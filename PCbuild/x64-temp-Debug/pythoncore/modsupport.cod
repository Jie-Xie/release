; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_Py_PackageContext
_BSS	SEGMENT
_Py_PackageContext DQ 01H DUP (?)
_BSS	ENDS
PUBLIC	Py_BuildValue
;	COMDAT pdata
; File c:\src\pyparallel\python\modsupport.c
pdata	SEGMENT
$pdata$Py_BuildValue DD imagerel $LN3
	DD	imagerel $LN3+76
	DD	imagerel $unwind$Py_BuildValue
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Py_BuildValue DD 011801H
	DD	06218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT Py_BuildValue
_TEXT	SEGMENT
retval$ = 32
va$ = 40
format$ = 64
Py_BuildValue PROC					; COMDAT

; 406  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 407  :     va_list va;
; 408  :     PyObject* retval;
; 409  :     va_start(va, format);

  00018	48 8d 44 24 48	 lea	 rax, QWORD PTR format$[rsp+8]
  0001d	48 89 44 24 28	 mov	 QWORD PTR va$[rsp], rax

; 410  :     retval = va_build_value(format, va, 0);

  00022	45 33 c0	 xor	 r8d, r8d
  00025	48 8b 54 24 28	 mov	 rdx, QWORD PTR va$[rsp]
  0002a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR format$[rsp]
  0002f	e8 00 00 00 00	 call	 va_build_value
  00034	48 89 44 24 20	 mov	 QWORD PTR retval$[rsp], rax

; 411  :     va_end(va);

  00039	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR va$[rsp], 0

; 412  :     return retval;

  00042	48 8b 44 24 20	 mov	 rax, QWORD PTR retval$[rsp]

; 413  : }

  00047	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004b	c3		 ret	 0
Py_BuildValue ENDP
_TEXT	ENDS
PUBLIC	_Py_BuildValue_SizeT
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_BuildValue_SizeT DD imagerel $LN3
	DD	imagerel $LN3+79
	DD	imagerel $unwind$_Py_BuildValue_SizeT
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_BuildValue_SizeT DD 011801H
	DD	06218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _Py_BuildValue_SizeT
_TEXT	SEGMENT
retval$ = 32
va$ = 40
format$ = 64
_Py_BuildValue_SizeT PROC				; COMDAT

; 417  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 418  :     va_list va;
; 419  :     PyObject* retval;
; 420  :     va_start(va, format);

  00018	48 8d 44 24 48	 lea	 rax, QWORD PTR format$[rsp+8]
  0001d	48 89 44 24 28	 mov	 QWORD PTR va$[rsp], rax

; 421  :     retval = va_build_value(format, va, FLAG_SIZE_T);

  00022	41 b8 01 00 00
	00		 mov	 r8d, 1
  00028	48 8b 54 24 28	 mov	 rdx, QWORD PTR va$[rsp]
  0002d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR format$[rsp]
  00032	e8 00 00 00 00	 call	 va_build_value
  00037	48 89 44 24 20	 mov	 QWORD PTR retval$[rsp], rax

; 422  :     va_end(va);

  0003c	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR va$[rsp], 0

; 423  :     return retval;

  00045	48 8b 44 24 20	 mov	 rax, QWORD PTR retval$[rsp]

; 424  : }

  0004a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004e	c3		 ret	 0
_Py_BuildValue_SizeT ENDP
_TEXT	ENDS
PUBLIC	Py_VaBuildValue
;	COMDAT pdata
pdata	SEGMENT
$pdata$Py_VaBuildValue DD imagerel $LN3
	DD	imagerel $LN3+37
	DD	imagerel $unwind$Py_VaBuildValue
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Py_VaBuildValue DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT Py_VaBuildValue
_TEXT	SEGMENT
format$ = 48
va$ = 56
Py_VaBuildValue PROC					; COMDAT

; 428  : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 429  :     return va_build_value(format, va, 0);

  0000e	45 33 c0	 xor	 r8d, r8d
  00011	48 8b 54 24 38	 mov	 rdx, QWORD PTR va$[rsp]
  00016	48 8b 4c 24 30	 mov	 rcx, QWORD PTR format$[rsp]
  0001b	e8 00 00 00 00	 call	 va_build_value

; 430  : }

  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	c3		 ret	 0
Py_VaBuildValue ENDP
_TEXT	ENDS
PUBLIC	_Py_VaBuildValue_SizeT
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_VaBuildValue_SizeT DD imagerel $LN3
	DD	imagerel $LN3+40
	DD	imagerel $unwind$_Py_VaBuildValue_SizeT
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_VaBuildValue_SizeT DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _Py_VaBuildValue_SizeT
_TEXT	SEGMENT
format$ = 48
va$ = 56
_Py_VaBuildValue_SizeT PROC				; COMDAT

; 434  : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 435  :     return va_build_value(format, va, FLAG_SIZE_T);

  0000e	41 b8 01 00 00
	00		 mov	 r8d, 1
  00014	48 8b 54 24 38	 mov	 rdx, QWORD PTR va$[rsp]
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR format$[rsp]
  0001e	e8 00 00 00 00	 call	 va_build_value

; 436  : }

  00023	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00027	c3		 ret	 0
_Py_VaBuildValue_SizeT ENDP
_TEXT	ENDS
PUBLIC	_Py_IncRef
EXTRN	_Py_NoneStruct:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$va_build_value DD imagerel va_build_value
	DD	imagerel va_build_value+159
	DD	imagerel $unwind$va_build_value
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$va_build_value DD 011301H
	DD	0a213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT va_build_value
_TEXT	SEGMENT
n$ = 48
f$ = 56
lva$ = 64
format$ = 96
va$ = 104
flags$ = 112
va_build_value PROC					; COMDAT

; 440  : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 441  :     const char *f = format;

  00013	48 8b 44 24 60	 mov	 rax, QWORD PTR format$[rsp]
  00018	48 89 44 24 38	 mov	 QWORD PTR f$[rsp], rax

; 442  :     int n = countformat(f, '\0');

  0001d	33 d2		 xor	 edx, edx
  0001f	48 8b 4c 24 38	 mov	 rcx, QWORD PTR f$[rsp]
  00024	e8 00 00 00 00	 call	 countformat
  00029	89 44 24 30	 mov	 DWORD PTR n$[rsp], eax

; 443  :     va_list lva;
; 444  : 
; 445  :         Py_VA_COPY(lva, va);

  0002d	48 8b 44 24 68	 mov	 rax, QWORD PTR va$[rsp]
  00032	48 89 44 24 40	 mov	 QWORD PTR lva$[rsp], rax

; 446  : 
; 447  :     if (n < 0)

  00037	83 7c 24 30 00	 cmp	 DWORD PTR n$[rsp], 0
  0003c	7d 04		 jge	 SHORT $LN3@va_build_v

; 448  :         return NULL;

  0003e	33 c0		 xor	 eax, eax
  00040	eb 58		 jmp	 SHORT $LN4@va_build_v
$LN3@va_build_v:

; 449  :     if (n == 0) {

  00042	83 7c 24 30 00	 cmp	 DWORD PTR n$[rsp], 0
  00047	75 15		 jne	 SHORT $LN2@va_build_v

; 450  :         Py_INCREF(Py_None);

  00049	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00050	e8 00 00 00 00	 call	 _Py_IncRef

; 451  :         return Py_None;

  00055	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0005c	eb 3c		 jmp	 SHORT $LN4@va_build_v
$LN2@va_build_v:

; 452  :     }
; 453  :     if (n == 1)

  0005e	83 7c 24 30 01	 cmp	 DWORD PTR n$[rsp], 1
  00063	75 16		 jne	 SHORT $LN1@va_build_v

; 454  :         return do_mkvalue(&f, &lva, flags);

  00065	44 8b 44 24 70	 mov	 r8d, DWORD PTR flags$[rsp]
  0006a	48 8d 54 24 40	 lea	 rdx, QWORD PTR lva$[rsp]
  0006f	48 8d 4c 24 38	 lea	 rcx, QWORD PTR f$[rsp]
  00074	e8 00 00 00 00	 call	 do_mkvalue
  00079	eb 1f		 jmp	 SHORT $LN4@va_build_v
$LN1@va_build_v:

; 455  :     return do_mktuple(&f, &lva, '\0', n, flags);

  0007b	8b 44 24 70	 mov	 eax, DWORD PTR flags$[rsp]
  0007f	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00083	44 8b 4c 24 30	 mov	 r9d, DWORD PTR n$[rsp]
  00088	45 33 c0	 xor	 r8d, r8d
  0008b	48 8d 54 24 40	 lea	 rdx, QWORD PTR lva$[rsp]
  00090	48 8d 4c 24 38	 lea	 rcx, QWORD PTR f$[rsp]
  00095	e8 00 00 00 00	 call	 do_mktuple
$LN4@va_build_v:

; 456  : }

  0009a	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0009e	c3		 ret	 0
va_build_value ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
EXTRN	_Py_RefTotal:QWORD
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN7
	DD	imagerel $LN7+132
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 6d		 jne	 SHORT $LN2@Py_IncRef
  00012	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0001a	4c 8b 4c 24 40	 mov	 r9, QWORD PTR op$[rsp]
  0001f	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_Guard
  00038	85 c0		 test	 eax, eax
  0003a	75 12		 jne	 SHORT $LN1@Py_IncRef
  0003c	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  00041	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00045	48 83 e0 20	 and	 rax, 32			; 00000020H
  00049	48 85 c0	 test	 rax, rax
  0004c	74 31		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;

  0004e	e8 00 00 00 00	 call	 _Py_PXCTX
  00053	85 c0		 test	 eax, eax
  00055	74 02		 je	 SHORT $LN5@Py_IncRef
  00057	eb 11		 jmp	 SHORT $LN6@Py_IncRef
$LN5@Py_IncRef:
  00059	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00060	48 ff c0	 inc	 rax
  00063	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN6@Py_IncRef:

; 907  :         (((PyObject*)(op))->ob_refcnt++);

  0006a	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  0006f	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00073	48 ff c0	 inc	 rax
  00076	48 8b 4c 24 40	 mov	 rcx, QWORD PTR op$[rsp]
  0007b	48 89 41 50	 mov	 QWORD PTR [rcx+80], rax
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  0007f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00083	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BK@KGLNCEEN@unmatched?5paren?5in?5format?$AA@ ; `string'
EXTRN	PyErr_SetString:PROC
EXTRN	PyExc_SystemError:QWORD
EXTRN	__ImageBase:BYTE
;	COMDAT pdata
; File c:\src\pyparallel\python\modsupport.c
pdata	SEGMENT
$pdata$countformat DD imagerel countformat
	DD	imagerel countformat+366
	DD	imagerel $unwind$countformat
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$countformat DD 010d01H
	DD	0620dH
xdata	ENDS
;	COMDAT ??_C@_0BK@KGLNCEEN@unmatched?5paren?5in?5format?$AA@
CONST	SEGMENT
??_C@_0BK@KGLNCEEN@unmatched?5paren?5in?5format?$AA@ DB 'unmatched paren '
	DB	'in format', 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT countformat
_TEXT	SEGMENT
level$ = 32
count$ = 36
tv68 = 40
format$ = 64
endchar$ = 72
countformat PROC					; COMDAT

; 18   : {

  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 19   :     int count = 0;

  0000d	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR count$[rsp], 0

; 20   :     int level = 0;

  00015	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR level$[rsp], 0
$LN12@countforma:

; 21   :     while (level > 0 || *format != endchar) {

  0001d	83 7c 24 20 00	 cmp	 DWORD PTR level$[rsp], 0
  00022	7f 12		 jg	 SHORT $LN10@countforma
  00024	48 8b 44 24 40	 mov	 rax, QWORD PTR format$[rsp]
  00029	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0002c	3b 44 24 48	 cmp	 eax, DWORD PTR endchar$[rsp]
  00030	0f 84 9b 00 00
	00		 je	 $LN11@countforma
$LN10@countforma:

; 22   :         switch (*format) {

  00036	48 8b 44 24 40	 mov	 rax, QWORD PTR format$[rsp]
  0003b	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0003e	89 44 24 28	 mov	 DWORD PTR tv68[rsp], eax
  00042	83 7c 24 28 7d	 cmp	 DWORD PTR tv68[rsp], 125 ; 0000007dH
  00047	77 65		 ja	 SHORT $LN2@countforma
  00049	48 63 44 24 28	 movsxd	 rax, DWORD PTR tv68[rsp]
  0004e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  00055	0f b6 84 01 00
	00 00 00	 movzx	 eax, BYTE PTR $LN15@countforma[rcx+rax]
  0005d	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN16@countforma[rcx+rax*4]
  00064	48 03 c1	 add	 rax, rcx
  00067	ff e0		 jmp	 rax
$LN7@countforma:

; 23   :         case '\0':
; 24   :             /* Premature end */
; 25   :             PyErr_SetString(PyExc_SystemError,
; 26   :                             "unmatched paren in format");

  00069	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@KGLNCEEN@unmatched?5paren?5in?5format?$AA@
  00070	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SystemError
  00077	e8 00 00 00 00	 call	 PyErr_SetString

; 27   :             return -1;

  0007c	b8 ff ff ff ff	 mov	 eax, -1
  00081	eb 52		 jmp	 SHORT $LN13@countforma
$LN6@countforma:

; 28   :         case '(':
; 29   :         case '[':
; 30   :         case '{':
; 31   :             if (level == 0)

  00083	83 7c 24 20 00	 cmp	 DWORD PTR level$[rsp], 0
  00088	75 0a		 jne	 SHORT $LN5@countforma

; 32   :                 count++;

  0008a	8b 44 24 24	 mov	 eax, DWORD PTR count$[rsp]
  0008e	ff c0		 inc	 eax
  00090	89 44 24 24	 mov	 DWORD PTR count$[rsp], eax
$LN5@countforma:

; 33   :             level++;

  00094	8b 44 24 20	 mov	 eax, DWORD PTR level$[rsp]
  00098	ff c0		 inc	 eax
  0009a	89 44 24 20	 mov	 DWORD PTR level$[rsp], eax

; 34   :             break;

  0009e	eb 1f		 jmp	 SHORT $LN8@countforma
$LN4@countforma:

; 35   :         case ')':
; 36   :         case ']':
; 37   :         case '}':
; 38   :             level--;

  000a0	8b 44 24 20	 mov	 eax, DWORD PTR level$[rsp]
  000a4	ff c8		 dec	 eax
  000a6	89 44 24 20	 mov	 DWORD PTR level$[rsp], eax

; 39   :             break;

  000aa	eb 13		 jmp	 SHORT $LN8@countforma
$LN3@countforma:

; 40   :         case '#':
; 41   :         case '&':
; 42   :         case ',':
; 43   :         case ':':
; 44   :         case ' ':
; 45   :         case '\t':
; 46   :             break;

  000ac	eb 11		 jmp	 SHORT $LN8@countforma
$LN2@countforma:

; 47   :         default:
; 48   :             if (level == 0)

  000ae	83 7c 24 20 00	 cmp	 DWORD PTR level$[rsp], 0
  000b3	75 0a		 jne	 SHORT $LN1@countforma

; 49   :                 count++;

  000b5	8b 44 24 24	 mov	 eax, DWORD PTR count$[rsp]
  000b9	ff c0		 inc	 eax
  000bb	89 44 24 24	 mov	 DWORD PTR count$[rsp], eax
$LN1@countforma:
$LN8@countforma:

; 50   :         }
; 51   :         format++;

  000bf	48 8b 44 24 40	 mov	 rax, QWORD PTR format$[rsp]
  000c4	48 ff c0	 inc	 rax
  000c7	48 89 44 24 40	 mov	 QWORD PTR format$[rsp], rax

; 52   :     }

  000cc	e9 4c ff ff ff	 jmp	 $LN12@countforma
$LN11@countforma:

; 53   :     return count;

  000d1	8b 44 24 24	 mov	 eax, DWORD PTR count$[rsp]
$LN13@countforma:

; 54   : }

  000d5	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000d9	c3		 ret	 0
  000da	66 90		 npad	 2
$LN16@countforma:
  000dc	00 00 00 00	 DD	 $LN7@countforma
  000e0	00 00 00 00	 DD	 $LN3@countforma
  000e4	00 00 00 00	 DD	 $LN6@countforma
  000e8	00 00 00 00	 DD	 $LN4@countforma
  000ec	00 00 00 00	 DD	 $LN2@countforma
$LN15@countforma:
  000f0	00		 DB	 0
  000f1	04		 DB	 4
  000f2	04		 DB	 4
  000f3	04		 DB	 4
  000f4	04		 DB	 4
  000f5	04		 DB	 4
  000f6	04		 DB	 4
  000f7	04		 DB	 4
  000f8	04		 DB	 4
  000f9	01		 DB	 1
  000fa	04		 DB	 4
  000fb	04		 DB	 4
  000fc	04		 DB	 4
  000fd	04		 DB	 4
  000fe	04		 DB	 4
  000ff	04		 DB	 4
  00100	04		 DB	 4
  00101	04		 DB	 4
  00102	04		 DB	 4
  00103	04		 DB	 4
  00104	04		 DB	 4
  00105	04		 DB	 4
  00106	04		 DB	 4
  00107	04		 DB	 4
  00108	04		 DB	 4
  00109	04		 DB	 4
  0010a	04		 DB	 4
  0010b	04		 DB	 4
  0010c	04		 DB	 4
  0010d	04		 DB	 4
  0010e	04		 DB	 4
  0010f	04		 DB	 4
  00110	01		 DB	 1
  00111	04		 DB	 4
  00112	04		 DB	 4
  00113	01		 DB	 1
  00114	04		 DB	 4
  00115	04		 DB	 4
  00116	01		 DB	 1
  00117	04		 DB	 4
  00118	02		 DB	 2
  00119	03		 DB	 3
  0011a	04		 DB	 4
  0011b	04		 DB	 4
  0011c	01		 DB	 1
  0011d	04		 DB	 4
  0011e	04		 DB	 4
  0011f	04		 DB	 4
  00120	04		 DB	 4
  00121	04		 DB	 4
  00122	04		 DB	 4
  00123	04		 DB	 4
  00124	04		 DB	 4
  00125	04		 DB	 4
  00126	04		 DB	 4
  00127	04		 DB	 4
  00128	04		 DB	 4
  00129	04		 DB	 4
  0012a	01		 DB	 1
  0012b	04		 DB	 4
  0012c	04		 DB	 4
  0012d	04		 DB	 4
  0012e	04		 DB	 4
  0012f	04		 DB	 4
  00130	04		 DB	 4
  00131	04		 DB	 4
  00132	04		 DB	 4
  00133	04		 DB	 4
  00134	04		 DB	 4
  00135	04		 DB	 4
  00136	04		 DB	 4
  00137	04		 DB	 4
  00138	04		 DB	 4
  00139	04		 DB	 4
  0013a	04		 DB	 4
  0013b	04		 DB	 4
  0013c	04		 DB	 4
  0013d	04		 DB	 4
  0013e	04		 DB	 4
  0013f	04		 DB	 4
  00140	04		 DB	 4
  00141	04		 DB	 4
  00142	04		 DB	 4
  00143	04		 DB	 4
  00144	04		 DB	 4
  00145	04		 DB	 4
  00146	04		 DB	 4
  00147	04		 DB	 4
  00148	04		 DB	 4
  00149	04		 DB	 4
  0014a	04		 DB	 4
  0014b	02		 DB	 2
  0014c	04		 DB	 4
  0014d	03		 DB	 3
  0014e	04		 DB	 4
  0014f	04		 DB	 4
  00150	04		 DB	 4
  00151	04		 DB	 4
  00152	04		 DB	 4
  00153	04		 DB	 4
  00154	04		 DB	 4
  00155	04		 DB	 4
  00156	04		 DB	 4
  00157	04		 DB	 4
  00158	04		 DB	 4
  00159	04		 DB	 4
  0015a	04		 DB	 4
  0015b	04		 DB	 4
  0015c	04		 DB	 4
  0015d	04		 DB	 4
  0015e	04		 DB	 4
  0015f	04		 DB	 4
  00160	04		 DB	 4
  00161	04		 DB	 4
  00162	04		 DB	 4
  00163	04		 DB	 4
  00164	04		 DB	 4
  00165	04		 DB	 4
  00166	04		 DB	 4
  00167	04		 DB	 4
  00168	04		 DB	 4
  00169	04		 DB	 4
  0016a	04		 DB	 4
  0016b	02		 DB	 2
  0016c	04		 DB	 4
  0016d	03		 DB	 3
countformat ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BK@CJGIJEPM@Unmatched?5paren?5in?5format?$AA@ ; `string'
PUBLIC	_Py_DecRef
EXTRN	PyTuple_New:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$do_mktuple DD imagerel do_mktuple
	DD	imagerel do_mktuple+303
	DD	imagerel $unwind$do_mktuple
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$do_mktuple DD 011801H
	DD	08218H
xdata	ENDS
;	COMDAT ??_C@_0BK@CJGIJEPM@Unmatched?5paren?5in?5format?$AA@
CONST	SEGMENT
??_C@_0BK@CJGIJEPM@Unmatched?5paren?5in?5format?$AA@ DB 'Unmatched paren '
	DB	'in format', 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT do_mktuple
_TEXT	SEGMENT
v$ = 32
i$ = 40
itemfailed$ = 44
w$20440 = 48
p_format$ = 80
p_va$ = 88
endchar$ = 96
n$ = 104
flags$ = 112
do_mktuple PROC						; COMDAT

; 153  : {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 154  :     PyObject *v;
; 155  :     int i;
; 156  :     int itemfailed = 0;

  00018	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR itemfailed$[rsp], 0

; 157  :     if (n < 0)

  00020	83 7c 24 68 00	 cmp	 DWORD PTR n$[rsp], 0
  00025	7d 07		 jge	 SHORT $LN9@do_mktuple

; 158  :         return NULL;

  00027	33 c0		 xor	 eax, eax
  00029	e9 fc 00 00 00	 jmp	 $LN10@do_mktuple
$LN9@do_mktuple:

; 159  :     if ((v = PyTuple_New(n)) == NULL)

  0002e	48 63 44 24 68	 movsxd	 rax, DWORD PTR n$[rsp]
  00033	48 8b c8	 mov	 rcx, rax
  00036	e8 00 00 00 00	 call	 PyTuple_New
  0003b	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax
  00040	48 83 7c 24 20
	00		 cmp	 QWORD PTR v$[rsp], 0
  00046	75 07		 jne	 SHORT $LN8@do_mktuple

; 160  :         return NULL;

  00048	33 c0		 xor	 eax, eax
  0004a	e9 db 00 00 00	 jmp	 $LN10@do_mktuple
$LN8@do_mktuple:

; 161  :     /* Note that we can't bail immediately on error as this will leak
; 162  :        refcounts on any 'N' arguments. */
; 163  :     for (i = 0; i < n; i++) {

  0004f	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00057	eb 0a		 jmp	 SHORT $LN7@do_mktuple
$LN6@do_mktuple:
  00059	8b 44 24 28	 mov	 eax, DWORD PTR i$[rsp]
  0005d	ff c0		 inc	 eax
  0005f	89 44 24 28	 mov	 DWORD PTR i$[rsp], eax
$LN7@do_mktuple:
  00063	8b 44 24 68	 mov	 eax, DWORD PTR n$[rsp]
  00067	39 44 24 28	 cmp	 DWORD PTR i$[rsp], eax
  0006b	7d 57		 jge	 SHORT $LN5@do_mktuple

; 164  :         PyObject *w = do_mkvalue(p_format, p_va, flags);

  0006d	44 8b 44 24 70	 mov	 r8d, DWORD PTR flags$[rsp]
  00072	48 8b 54 24 58	 mov	 rdx, QWORD PTR p_va$[rsp]
  00077	48 8b 4c 24 50	 mov	 rcx, QWORD PTR p_format$[rsp]
  0007c	e8 00 00 00 00	 call	 do_mkvalue
  00081	48 89 44 24 30	 mov	 QWORD PTR w$20440[rsp], rax

; 165  :         if (w == NULL) {

  00086	48 83 7c 24 30
	00		 cmp	 QWORD PTR w$20440[rsp], 0
  0008c	75 20		 jne	 SHORT $LN4@do_mktuple

; 166  :             itemfailed = 1;

  0008e	c7 44 24 2c 01
	00 00 00	 mov	 DWORD PTR itemfailed$[rsp], 1

; 167  :             Py_INCREF(Py_None);

  00096	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  0009d	e8 00 00 00 00	 call	 _Py_IncRef

; 168  :             w = Py_None;

  000a2	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000a9	48 89 44 24 30	 mov	 QWORD PTR w$20440[rsp], rax
$LN4@do_mktuple:

; 169  :         }
; 170  :         PyTuple_SET_ITEM(v, i, w);

  000ae	48 63 44 24 28	 movsxd	 rax, DWORD PTR i$[rsp]
  000b3	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  000b8	48 8b 54 24 30	 mov	 rdx, QWORD PTR w$20440[rsp]
  000bd	48 89 54 c1 70	 mov	 QWORD PTR [rcx+rax*8+112], rdx

; 171  :     }

  000c2	eb 95		 jmp	 SHORT $LN6@do_mktuple
$LN5@do_mktuple:

; 172  :     if (itemfailed) {

  000c4	83 7c 24 2c 00	 cmp	 DWORD PTR itemfailed$[rsp], 0
  000c9	74 0e		 je	 SHORT $LN3@do_mktuple

; 173  :         /* do_mkvalue() should have already set an error */
; 174  :         Py_DECREF(v);

  000cb	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  000d0	e8 00 00 00 00	 call	 _Py_DecRef

; 175  :         return NULL;

  000d5	33 c0		 xor	 eax, eax
  000d7	eb 51		 jmp	 SHORT $LN10@do_mktuple
$LN3@do_mktuple:

; 176  :     }
; 177  :     if (**p_format != endchar) {

  000d9	48 8b 44 24 50	 mov	 rax, QWORD PTR p_format$[rsp]
  000de	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000e1	0f be 00	 movsx	 eax, BYTE PTR [rax]
  000e4	3b 44 24 60	 cmp	 eax, DWORD PTR endchar$[rsp]
  000e8	74 21		 je	 SHORT $LN2@do_mktuple

; 178  :         Py_DECREF(v);

  000ea	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  000ef	e8 00 00 00 00	 call	 _Py_DecRef

; 179  :         PyErr_SetString(PyExc_SystemError,
; 180  :                         "Unmatched paren in format");

  000f4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@CJGIJEPM@Unmatched?5paren?5in?5format?$AA@
  000fb	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SystemError
  00102	e8 00 00 00 00	 call	 PyErr_SetString

; 181  :         return NULL;

  00107	33 c0		 xor	 eax, eax
  00109	eb 1f		 jmp	 SHORT $LN10@do_mktuple
$LN2@do_mktuple:

; 182  :     }
; 183  :     if (endchar)

  0010b	83 7c 24 60 00	 cmp	 DWORD PTR endchar$[rsp], 0
  00110	74 13		 je	 SHORT $LN1@do_mktuple

; 184  :         ++*p_format;

  00112	48 8b 44 24 50	 mov	 rax, QWORD PTR p_format$[rsp]
  00117	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0011a	48 ff c0	 inc	 rax
  0011d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR p_format$[rsp]
  00122	48 89 01	 mov	 QWORD PTR [rcx], rax
$LN1@do_mktuple:

; 185  :     return v;

  00125	48 8b 44 24 20	 mov	 rax, QWORD PTR v$[rsp]
$LN10@do_mktuple:

; 186  : }

  0012a	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0012e	c3		 ret	 0
do_mktuple ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
EXTRN	_Py_Dealloc:PROC
EXTRN	_Py_NegativeRefcount:PROC
EXTRN	Px_DecRef:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN13
	DD	imagerel $LN13+257
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
tv81 = 48
op$ = 80
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN13:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	0f 85 e6 00 00
	00		 jne	 $LN8@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00016	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0001b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0001f	48 83 e0 20	 and	 rax, 32			; 00000020H
  00023	48 85 c0	 test	 rax, rax
  00026	75 14		 jne	 SHORT $LN6@Py_DecRef
  00028	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0002d	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00031	48 25 80 00 00
	00		 and	 rax, 128		; 00000080H
  00037	48 85 c0	 test	 rax, rax
  0003a	74 0f		 je	 SHORT $LN7@Py_DecRef
$LN6@Py_DecRef:

; 926  :             Px_DECREF(op);

  0003c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  00041	e8 00 00 00 00	 call	 Px_DecRef
  00046	e9 b1 00 00 00	 jmp	 $LN5@Py_DecRef
$LN7@Py_DecRef:

; 927  :         else if (!Px_ISPX(op)) {

  0004b	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00050	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00054	48 83 e0 02	 and	 rax, 2
  00058	48 85 c0	 test	 rax, rax
  0005b	0f 85 9b 00 00
	00		 jne	 $LN4@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;

  00061	e8 00 00 00 00	 call	 _Py_PXCTX
  00066	85 c0		 test	 eax, eax
  00068	74 02		 je	 SHORT $LN11@Py_DecRef
  0006a	eb 11		 jmp	 SHORT $LN12@Py_DecRef
$LN11@Py_DecRef:
  0006c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00073	48 ff c8	 dec	 rax
  00076	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN12@Py_DecRef:

; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  0007d	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00082	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00086	48 ff c8	 dec	 rax
  00089	48 89 44 24 30	 mov	 QWORD PTR tv81[rsp], rax
  0008e	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00093	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv81[rsp]
  00098	48 89 48 50	 mov	 QWORD PTR [rax+80], rcx
  0009c	48 83 7c 24 30
	00		 cmp	 QWORD PTR tv81[rsp], 0
  000a2	74 4e		 je	 SHORT $LN3@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);

  000a4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000ac	4c 8b 4c 24 50	 mov	 r9, QWORD PTR op$[rsp]
  000b1	41 b8 a2 03 00
	00		 mov	 r8d, 930		; 000003a2H
  000b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000c5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ca	85 c0		 test	 eax, eax
  000cc	75 22		 jne	 SHORT $LN2@Py_DecRef
  000ce	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  000d3	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000d8	7d 16		 jge	 SHORT $LN2@Py_DecRef
  000da	4c 8b 44 24 50	 mov	 r8, QWORD PTR op$[rsp]
  000df	ba a2 03 00 00	 mov	 edx, 930		; 000003a2H
  000e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000eb	e8 00 00 00 00	 call	 _Py_NegativeRefcount
$LN2@Py_DecRef:

; 931  :             } else

  000f0	eb 0a		 jmp	 SHORT $LN1@Py_DecRef
$LN3@Py_DecRef:

; 932  :                 _Py_Dealloc((PyObject *)(op));

  000f2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  000f7	e8 00 00 00 00	 call	 _Py_Dealloc
$LN1@Py_DecRef:
$LN4@Py_DecRef:
$LN5@Py_DecRef:
$LN8@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  000fc	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00100	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CI@EEIIKDKA@bad?5format?5char?5passed?5to?5Py_Bui@ ; `string'
PUBLIC	??_C@_0CE@OKDAJOM@NULL?5object?5passed?5to?5Py_BuildVa@ ; `string'
PUBLIC	??_C@_0CB@JEDFEEEP@string?5too?5long?5for?5Python?5bytes@ ; `string'
PUBLIC	??_C@_0CC@GABEGKLK@string?5too?5long?5for?5Python?5strin@ ; `string'
PUBLIC	$T21097
EXTRN	PyErr_Occurred:PROC
EXTRN	PyUnicode_FromStringAndSize:PROC
EXTRN	PyExc_OverflowError:QWORD
EXTRN	strlen:PROC
EXTRN	PyUnicode_FromOrdinal:PROC
EXTRN	PyBytes_FromStringAndSize:PROC
EXTRN	PyComplex_FromCComplex:PROC
EXTRN	PyFloat_FromDouble:PROC
EXTRN	PyUnicode_FromUnicode:PROC
EXTRN	Py_UNICODE_strlen:PROC
EXTRN	PyLong_FromUnsignedLongLong:PROC
EXTRN	PyLong_FromLongLong:PROC
EXTRN	PyLong_FromSsize_t:PROC
EXTRN	PyLong_FromUnsignedLong:PROC
EXTRN	PyLong_FromLong:PROC
EXTRN	_fltused:DWORD
;	COMDAT pdata
; File c:\src\pyparallel\python\modsupport.c
pdata	SEGMENT
$pdata$do_mkvalue DD imagerel do_mkvalue
	DD	imagerel do_mkvalue+2611
	DD	imagerel $unwind$do_mkvalue
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$do_mkvalue DD 041801H
	DD	01b0118H
	DD	060107011H
xdata	ENDS
;	COMDAT ??_C@_0CI@EEIIKDKA@bad?5format?5char?5passed?5to?5Py_Bui@
CONST	SEGMENT
??_C@_0CI@EEIIKDKA@bad?5format?5char?5passed?5to?5Py_Bui@ DB 'bad format '
	DB	'char passed to Py_BuildValue', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@OKDAJOM@NULL?5object?5passed?5to?5Py_BuildVa@
CONST	SEGMENT
??_C@_0CE@OKDAJOM@NULL?5object?5passed?5to?5Py_BuildVa@ DB 'NULL object p'
	DB	'assed to Py_BuildValue', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@JEDFEEEP@string?5too?5long?5for?5Python?5bytes@
CONST	SEGMENT
??_C@_0CB@JEDFEEEP@string?5too?5long?5for?5Python?5bytes@ DB 'string too '
	DB	'long for Python bytes', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@GABEGKLK@string?5too?5long?5for?5Python?5strin@
CONST	SEGMENT
??_C@_0CC@GABEGKLK@string?5too?5long?5for?5Python?5strin@ DB 'string too '
	DB	'long for Python string', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT do_mkvalue
_TEXT	SEGMENT
n$20494 = 48
n$20528 = 52
v$20564 = 56
n$20576 = 64
u$20565 = 72
p$20631 = 80
i$20644 = 84
v$20656 = 88
n$20668 = 96
str$20657 = 104
m$20698 = 112
v$20706 = 120
n$20718 = 128
str$20707 = 136
m$20748 = 144
arg$20770 = 152
func$20759 = 160
v$20782 = 168
$T21097 = 176
tv67 = 192
tv68 = 196
p_format$ = 240
p_va$ = 248
flags$ = 256
do_mkvalue PROC						; COMDAT

; 190  : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec d8 00
	00 00		 sub	 rsp, 216		; 000000d8H
$LN54@do_mkvalue:

; 191  :     for (;;) {
; 192  :         switch (*(*p_format)++) {

  00018	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR p_format$[rsp]
  00020	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00023	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00026	89 84 24 c0 00
	00 00		 mov	 DWORD PTR tv67[rsp], eax
  0002d	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR p_format$[rsp]
  00035	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00038	48 ff c0	 inc	 rax
  0003b	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR p_format$[rsp]
  00043	48 89 01	 mov	 QWORD PTR [rcx], rax
  00046	8b 84 24 c0 00
	00 00		 mov	 eax, DWORD PTR tv67[rsp]
  0004d	89 84 24 c4 00
	00 00		 mov	 DWORD PTR tv68[rsp], eax
  00054	8b 84 24 c4 00
	00 00		 mov	 eax, DWORD PTR tv68[rsp]
  0005b	83 e8 09	 sub	 eax, 9
  0005e	89 84 24 c4 00
	00 00		 mov	 DWORD PTR tv68[rsp], eax
  00065	83 bc 24 c4 00
	00 00 72	 cmp	 DWORD PTR tv68[rsp], 114 ; 00000072H
  0006d	0f 87 d0 08 00
	00		 ja	 $LN1@do_mkvalue
  00073	48 63 84 24 c4
	00 00 00	 movsxd	 rax, DWORD PTR tv68[rsp]
  0007b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  00082	0f b6 84 01 00
	00 00 00	 movzx	 eax, BYTE PTR $LN57@do_mkvalue[rcx+rax]
  0008a	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN58@do_mkvalue[rcx+rax*4]
  00091	48 03 c1	 add	 rax, rcx
  00094	ff e0		 jmp	 rax
$LN50@do_mkvalue:

; 193  :         case '(':
; 194  :             return do_mktuple(p_format, p_va, ')',
; 195  :                               countformat(*p_format, ')'), flags);

  00096	ba 29 00 00 00	 mov	 edx, 41			; 00000029H
  0009b	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR p_format$[rsp]
  000a3	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  000a6	e8 00 00 00 00	 call	 countformat
  000ab	8b 8c 24 00 01
	00 00		 mov	 ecx, DWORD PTR flags$[rsp]
  000b2	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000b6	44 8b c8	 mov	 r9d, eax
  000b9	41 b8 29 00 00
	00		 mov	 r8d, 41			; 00000029H
  000bf	48 8b 94 24 f8
	00 00 00	 mov	 rdx, QWORD PTR p_va$[rsp]
  000c7	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR p_format$[rsp]
  000cf	e8 00 00 00 00	 call	 do_mktuple
  000d4	e9 86 08 00 00	 jmp	 $LN55@do_mkvalue
$LN49@do_mkvalue:

; 196  : 
; 197  :         case '[':
; 198  :             return do_mklist(p_format, p_va, ']',
; 199  :                              countformat(*p_format, ']'), flags);

  000d9	ba 5d 00 00 00	 mov	 edx, 93			; 0000005dH
  000de	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR p_format$[rsp]
  000e6	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  000e9	e8 00 00 00 00	 call	 countformat
  000ee	8b 8c 24 00 01
	00 00		 mov	 ecx, DWORD PTR flags$[rsp]
  000f5	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  000f9	44 8b c8	 mov	 r9d, eax
  000fc	41 b8 5d 00 00
	00		 mov	 r8d, 93			; 0000005dH
  00102	48 8b 94 24 f8
	00 00 00	 mov	 rdx, QWORD PTR p_va$[rsp]
  0010a	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR p_format$[rsp]
  00112	e8 00 00 00 00	 call	 do_mklist
  00117	e9 43 08 00 00	 jmp	 $LN55@do_mkvalue
$LN48@do_mkvalue:

; 200  : 
; 201  :         case '{':
; 202  :             return do_mkdict(p_format, p_va, '}',
; 203  :                              countformat(*p_format, '}'), flags);

  0011c	ba 7d 00 00 00	 mov	 edx, 125		; 0000007dH
  00121	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR p_format$[rsp]
  00129	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0012c	e8 00 00 00 00	 call	 countformat
  00131	8b 8c 24 00 01
	00 00		 mov	 ecx, DWORD PTR flags$[rsp]
  00138	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  0013c	44 8b c8	 mov	 r9d, eax
  0013f	41 b8 7d 00 00
	00		 mov	 r8d, 125		; 0000007dH
  00145	48 8b 94 24 f8
	00 00 00	 mov	 rdx, QWORD PTR p_va$[rsp]
  0014d	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR p_format$[rsp]
  00155	e8 00 00 00 00	 call	 do_mkdict
  0015a	e9 00 08 00 00	 jmp	 $LN55@do_mkvalue
$LN47@do_mkvalue:

; 204  : 
; 205  :         case 'b':
; 206  :         case 'B':
; 207  :         case 'h':
; 208  :         case 'i':
; 209  :             return PyLong_FromLong((long)va_arg(*p_va, int));

  0015f	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR p_va$[rsp]
  00167	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0016a	48 83 c0 08	 add	 rax, 8
  0016e	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR p_va$[rsp]
  00176	48 89 01	 mov	 QWORD PTR [rcx], rax
  00179	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR p_va$[rsp]
  00181	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00184	8b 48 f8	 mov	 ecx, DWORD PTR [rax-8]
  00187	e8 00 00 00 00	 call	 PyLong_FromLong
  0018c	e9 ce 07 00 00	 jmp	 $LN55@do_mkvalue
$LN46@do_mkvalue:

; 210  : 
; 211  :         case 'H':
; 212  :             return PyLong_FromLong((long)va_arg(*p_va, unsigned int));

  00191	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR p_va$[rsp]
  00199	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0019c	48 83 c0 08	 add	 rax, 8
  001a0	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR p_va$[rsp]
  001a8	48 89 01	 mov	 QWORD PTR [rcx], rax
  001ab	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR p_va$[rsp]
  001b3	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001b6	8b 48 f8	 mov	 ecx, DWORD PTR [rax-8]
  001b9	e8 00 00 00 00	 call	 PyLong_FromLong
  001be	e9 9c 07 00 00	 jmp	 $LN55@do_mkvalue
$LN45@do_mkvalue:

; 213  : 
; 214  :         case 'I':
; 215  :         {
; 216  :             unsigned int n;
; 217  :             n = va_arg(*p_va, unsigned int);

  001c3	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR p_va$[rsp]
  001cb	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001ce	48 83 c0 08	 add	 rax, 8
  001d2	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR p_va$[rsp]
  001da	48 89 01	 mov	 QWORD PTR [rcx], rax
  001dd	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR p_va$[rsp]
  001e5	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001e8	8b 40 f8	 mov	 eax, DWORD PTR [rax-8]
  001eb	89 44 24 30	 mov	 DWORD PTR n$20494[rsp], eax

; 218  :             return PyLong_FromUnsignedLong(n);

  001ef	8b 4c 24 30	 mov	 ecx, DWORD PTR n$20494[rsp]
  001f3	e8 00 00 00 00	 call	 PyLong_FromUnsignedLong
  001f8	e9 62 07 00 00	 jmp	 $LN55@do_mkvalue
$LN44@do_mkvalue:

; 219  :         }
; 220  : 
; 221  :         case 'n':
; 222  : #if SIZEOF_SIZE_T!=SIZEOF_LONG
; 223  :             return PyLong_FromSsize_t(va_arg(*p_va, Py_ssize_t));

  001fd	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR p_va$[rsp]
  00205	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00208	48 83 c0 08	 add	 rax, 8
  0020c	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR p_va$[rsp]
  00214	48 89 01	 mov	 QWORD PTR [rcx], rax
  00217	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR p_va$[rsp]
  0021f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00222	48 8b 48 f8	 mov	 rcx, QWORD PTR [rax-8]
  00226	e8 00 00 00 00	 call	 PyLong_FromSsize_t
  0022b	e9 2f 07 00 00	 jmp	 $LN55@do_mkvalue
$LN43@do_mkvalue:

; 224  : #endif
; 225  :             /* Fall through from 'n' to 'l' if Py_ssize_t is long */
; 226  :         case 'l':
; 227  :             return PyLong_FromLong(va_arg(*p_va, long));

  00230	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR p_va$[rsp]
  00238	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0023b	48 83 c0 08	 add	 rax, 8
  0023f	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR p_va$[rsp]
  00247	48 89 01	 mov	 QWORD PTR [rcx], rax
  0024a	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR p_va$[rsp]
  00252	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00255	8b 48 f8	 mov	 ecx, DWORD PTR [rax-8]
  00258	e8 00 00 00 00	 call	 PyLong_FromLong
  0025d	e9 fd 06 00 00	 jmp	 $LN55@do_mkvalue
$LN42@do_mkvalue:

; 228  : 
; 229  :         case 'k':
; 230  :         {
; 231  :             unsigned long n;
; 232  :             n = va_arg(*p_va, unsigned long);

  00262	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR p_va$[rsp]
  0026a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0026d	48 83 c0 08	 add	 rax, 8
  00271	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR p_va$[rsp]
  00279	48 89 01	 mov	 QWORD PTR [rcx], rax
  0027c	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR p_va$[rsp]
  00284	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00287	8b 40 f8	 mov	 eax, DWORD PTR [rax-8]
  0028a	89 44 24 34	 mov	 DWORD PTR n$20528[rsp], eax

; 233  :             return PyLong_FromUnsignedLong(n);

  0028e	8b 4c 24 34	 mov	 ecx, DWORD PTR n$20528[rsp]
  00292	e8 00 00 00 00	 call	 PyLong_FromUnsignedLong
  00297	e9 c3 06 00 00	 jmp	 $LN55@do_mkvalue
$LN41@do_mkvalue:

; 234  :         }
; 235  : 
; 236  : #ifdef HAVE_LONG_LONG
; 237  :         case 'L':
; 238  :             return PyLong_FromLongLong((PY_LONG_LONG)va_arg(*p_va, PY_LONG_LONG));

  0029c	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR p_va$[rsp]
  002a4	48 8b 00	 mov	 rax, QWORD PTR [rax]
  002a7	48 83 c0 08	 add	 rax, 8
  002ab	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR p_va$[rsp]
  002b3	48 89 01	 mov	 QWORD PTR [rcx], rax
  002b6	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR p_va$[rsp]
  002be	48 8b 00	 mov	 rax, QWORD PTR [rax]
  002c1	48 8b 48 f8	 mov	 rcx, QWORD PTR [rax-8]
  002c5	e8 00 00 00 00	 call	 PyLong_FromLongLong
  002ca	e9 90 06 00 00	 jmp	 $LN55@do_mkvalue
$LN40@do_mkvalue:

; 239  : 
; 240  :         case 'K':
; 241  :             return PyLong_FromUnsignedLongLong((PY_LONG_LONG)va_arg(*p_va, unsigned PY_LONG_LONG));

  002cf	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR p_va$[rsp]
  002d7	48 8b 00	 mov	 rax, QWORD PTR [rax]
  002da	48 83 c0 08	 add	 rax, 8
  002de	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR p_va$[rsp]
  002e6	48 89 01	 mov	 QWORD PTR [rcx], rax
  002e9	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR p_va$[rsp]
  002f1	48 8b 00	 mov	 rax, QWORD PTR [rax]
  002f4	48 8b 48 f8	 mov	 rcx, QWORD PTR [rax-8]
  002f8	e8 00 00 00 00	 call	 PyLong_FromUnsignedLongLong
  002fd	e9 5d 06 00 00	 jmp	 $LN55@do_mkvalue
$LN39@do_mkvalue:

; 242  : #endif
; 243  :         case 'u':
; 244  :         {
; 245  :             PyObject *v;
; 246  :             Py_UNICODE *u = va_arg(*p_va, Py_UNICODE *);

  00302	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR p_va$[rsp]
  0030a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0030d	48 83 c0 08	 add	 rax, 8
  00311	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR p_va$[rsp]
  00319	48 89 01	 mov	 QWORD PTR [rcx], rax
  0031c	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR p_va$[rsp]
  00324	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00327	48 8b 40 f8	 mov	 rax, QWORD PTR [rax-8]
  0032b	48 89 44 24 48	 mov	 QWORD PTR u$20565[rsp], rax

; 247  :             Py_ssize_t n;
; 248  :             if (**p_format == '#') {

  00330	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR p_format$[rsp]
  00338	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0033b	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0033e	83 f8 23	 cmp	 eax, 35			; 00000023H
  00341	0f 85 87 00 00
	00		 jne	 $LN38@do_mkvalue

; 249  :                 ++*p_format;

  00347	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR p_format$[rsp]
  0034f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00352	48 ff c0	 inc	 rax
  00355	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR p_format$[rsp]
  0035d	48 89 01	 mov	 QWORD PTR [rcx], rax

; 250  :                 if (flags & FLAG_SIZE_T)

  00360	8b 84 24 00 01
	00 00		 mov	 eax, DWORD PTR flags$[rsp]
  00367	83 e0 01	 and	 eax, 1
  0036a	85 c0		 test	 eax, eax
  0036c	74 30		 je	 SHORT $LN37@do_mkvalue

; 251  :                     n = va_arg(*p_va, Py_ssize_t);

  0036e	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR p_va$[rsp]
  00376	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00379	48 83 c0 08	 add	 rax, 8
  0037d	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR p_va$[rsp]
  00385	48 89 01	 mov	 QWORD PTR [rcx], rax
  00388	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR p_va$[rsp]
  00390	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00393	48 8b 40 f8	 mov	 rax, QWORD PTR [rax-8]
  00397	48 89 44 24 40	 mov	 QWORD PTR n$20576[rsp], rax

; 252  :                 else

  0039c	eb 2e		 jmp	 SHORT $LN36@do_mkvalue
$LN37@do_mkvalue:

; 253  :                     n = va_arg(*p_va, int);

  0039e	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR p_va$[rsp]
  003a6	48 8b 00	 mov	 rax, QWORD PTR [rax]
  003a9	48 83 c0 08	 add	 rax, 8
  003ad	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR p_va$[rsp]
  003b5	48 89 01	 mov	 QWORD PTR [rcx], rax
  003b8	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR p_va$[rsp]
  003c0	48 8b 00	 mov	 rax, QWORD PTR [rax]
  003c3	48 63 40 f8	 movsxd	 rax, DWORD PTR [rax-8]
  003c7	48 89 44 24 40	 mov	 QWORD PTR n$20576[rsp], rax
$LN36@do_mkvalue:

; 254  :             }
; 255  :             else

  003cc	eb 09		 jmp	 SHORT $LN35@do_mkvalue
$LN38@do_mkvalue:

; 256  :                 n = -1;

  003ce	48 c7 44 24 40
	ff ff ff ff	 mov	 QWORD PTR n$20576[rsp], -1
$LN35@do_mkvalue:

; 257  :             if (u == NULL) {

  003d7	48 83 7c 24 48
	00		 cmp	 QWORD PTR u$20565[rsp], 0
  003dd	75 18		 jne	 SHORT $LN34@do_mkvalue

; 258  :                 v = Py_None;

  003df	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  003e6	48 89 44 24 38	 mov	 QWORD PTR v$20564[rsp], rax

; 259  :                 Py_INCREF(v);

  003eb	48 8b 4c 24 38	 mov	 rcx, QWORD PTR v$20564[rsp]
  003f0	e8 00 00 00 00	 call	 _Py_IncRef

; 260  :             }
; 261  :             else {

  003f5	eb 2b		 jmp	 SHORT $LN33@do_mkvalue
$LN34@do_mkvalue:

; 262  :                 if (n < 0)

  003f7	48 83 7c 24 40
	00		 cmp	 QWORD PTR n$20576[rsp], 0
  003fd	7d 0f		 jge	 SHORT $LN32@do_mkvalue

; 263  :                     n = Py_UNICODE_strlen(u);

  003ff	48 8b 4c 24 48	 mov	 rcx, QWORD PTR u$20565[rsp]
  00404	e8 00 00 00 00	 call	 Py_UNICODE_strlen
  00409	48 89 44 24 40	 mov	 QWORD PTR n$20576[rsp], rax
$LN32@do_mkvalue:

; 264  :                 v = PyUnicode_FromUnicode(u, n);

  0040e	48 8b 54 24 40	 mov	 rdx, QWORD PTR n$20576[rsp]
  00413	48 8b 4c 24 48	 mov	 rcx, QWORD PTR u$20565[rsp]
  00418	e8 00 00 00 00	 call	 PyUnicode_FromUnicode
  0041d	48 89 44 24 38	 mov	 QWORD PTR v$20564[rsp], rax
$LN33@do_mkvalue:

; 265  :             }
; 266  :             return v;

  00422	48 8b 44 24 38	 mov	 rax, QWORD PTR v$20564[rsp]
  00427	e9 33 05 00 00	 jmp	 $LN55@do_mkvalue
$LN31@do_mkvalue:

; 267  :         }
; 268  :         case 'f':
; 269  :         case 'd':
; 270  :             return PyFloat_FromDouble(
; 271  :                 (double)va_arg(*p_va, va_double));

  0042c	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR p_va$[rsp]
  00434	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00437	48 83 c0 08	 add	 rax, 8
  0043b	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR p_va$[rsp]
  00443	48 89 01	 mov	 QWORD PTR [rcx], rax
  00446	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR p_va$[rsp]
  0044e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00451	f2 0f 10 40 f8	 movsdx	 xmm0, QWORD PTR [rax-8]
  00456	e8 00 00 00 00	 call	 PyFloat_FromDouble
  0045b	e9 ff 04 00 00	 jmp	 $LN55@do_mkvalue
$LN30@do_mkvalue:

; 272  : 
; 273  :         case 'D':
; 274  :             return PyComplex_FromCComplex(
; 275  :                 *((Py_complex *)va_arg(*p_va, Py_complex *)));

  00460	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR p_va$[rsp]
  00468	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0046b	48 83 c0 08	 add	 rax, 8
  0046f	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR p_va$[rsp]
  00477	48 89 01	 mov	 QWORD PTR [rcx], rax
  0047a	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR p_va$[rsp]
  00482	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00485	48 8b 40 f8	 mov	 rax, QWORD PTR [rax-8]
  00489	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR $T21097[rsp]
  00491	48 8b f9	 mov	 rdi, rcx
  00494	48 8b f0	 mov	 rsi, rax
  00497	b9 10 00 00 00	 mov	 ecx, 16
  0049c	f3 a4		 rep movsb
  0049e	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR $T21097[rsp]
  004a6	e8 00 00 00 00	 call	 PyComplex_FromCComplex
  004ab	e9 af 04 00 00	 jmp	 $LN55@do_mkvalue
$LN29@do_mkvalue:

; 276  : 
; 277  :         case 'c':
; 278  :         {
; 279  :             char p[1];
; 280  :             p[0] = (char)va_arg(*p_va, int);

  004b0	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR p_va$[rsp]
  004b8	48 8b 00	 mov	 rax, QWORD PTR [rax]
  004bb	48 83 c0 08	 add	 rax, 8
  004bf	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR p_va$[rsp]
  004c7	48 89 01	 mov	 QWORD PTR [rcx], rax
  004ca	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR p_va$[rsp]
  004d2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  004d5	0f b6 40 f8	 movzx	 eax, BYTE PTR [rax-8]
  004d9	88 44 24 50	 mov	 BYTE PTR p$20631[rsp], al

; 281  :             return PyBytes_FromStringAndSize(p, 1);

  004dd	ba 01 00 00 00	 mov	 edx, 1
  004e2	48 8d 4c 24 50	 lea	 rcx, QWORD PTR p$20631[rsp]
  004e7	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  004ec	e9 6e 04 00 00	 jmp	 $LN55@do_mkvalue
$LN28@do_mkvalue:

; 282  :         }
; 283  :         case 'C':
; 284  :         {
; 285  :             int i = va_arg(*p_va, int);

  004f1	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR p_va$[rsp]
  004f9	48 8b 00	 mov	 rax, QWORD PTR [rax]
  004fc	48 83 c0 08	 add	 rax, 8
  00500	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR p_va$[rsp]
  00508	48 89 01	 mov	 QWORD PTR [rcx], rax
  0050b	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR p_va$[rsp]
  00513	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00516	8b 40 f8	 mov	 eax, DWORD PTR [rax-8]
  00519	89 44 24 54	 mov	 DWORD PTR i$20644[rsp], eax

; 286  :             return PyUnicode_FromOrdinal(i);

  0051d	8b 4c 24 54	 mov	 ecx, DWORD PTR i$20644[rsp]
  00521	e8 00 00 00 00	 call	 PyUnicode_FromOrdinal
  00526	e9 34 04 00 00	 jmp	 $LN55@do_mkvalue
$LN27@do_mkvalue:

; 287  :         }
; 288  : 
; 289  :         case 's':
; 290  :         case 'z':
; 291  :         case 'U':   /* XXX deprecated alias */
; 292  :         {
; 293  :             PyObject *v;
; 294  :             char *str = va_arg(*p_va, char *);

  0052b	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR p_va$[rsp]
  00533	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00536	48 83 c0 08	 add	 rax, 8
  0053a	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR p_va$[rsp]
  00542	48 89 01	 mov	 QWORD PTR [rcx], rax
  00545	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR p_va$[rsp]
  0054d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00550	48 8b 40 f8	 mov	 rax, QWORD PTR [rax-8]
  00554	48 89 44 24 68	 mov	 QWORD PTR str$20657[rsp], rax

; 295  :             Py_ssize_t n;
; 296  :             if (**p_format == '#') {

  00559	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR p_format$[rsp]
  00561	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00564	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00567	83 f8 23	 cmp	 eax, 35			; 00000023H
  0056a	0f 85 87 00 00
	00		 jne	 $LN26@do_mkvalue

; 297  :                 ++*p_format;

  00570	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR p_format$[rsp]
  00578	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0057b	48 ff c0	 inc	 rax
  0057e	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR p_format$[rsp]
  00586	48 89 01	 mov	 QWORD PTR [rcx], rax

; 298  :                 if (flags & FLAG_SIZE_T)

  00589	8b 84 24 00 01
	00 00		 mov	 eax, DWORD PTR flags$[rsp]
  00590	83 e0 01	 and	 eax, 1
  00593	85 c0		 test	 eax, eax
  00595	74 30		 je	 SHORT $LN25@do_mkvalue

; 299  :                     n = va_arg(*p_va, Py_ssize_t);

  00597	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR p_va$[rsp]
  0059f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  005a2	48 83 c0 08	 add	 rax, 8
  005a6	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR p_va$[rsp]
  005ae	48 89 01	 mov	 QWORD PTR [rcx], rax
  005b1	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR p_va$[rsp]
  005b9	48 8b 00	 mov	 rax, QWORD PTR [rax]
  005bc	48 8b 40 f8	 mov	 rax, QWORD PTR [rax-8]
  005c0	48 89 44 24 60	 mov	 QWORD PTR n$20668[rsp], rax

; 300  :                 else

  005c5	eb 2e		 jmp	 SHORT $LN24@do_mkvalue
$LN25@do_mkvalue:

; 301  :                     n = va_arg(*p_va, int);

  005c7	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR p_va$[rsp]
  005cf	48 8b 00	 mov	 rax, QWORD PTR [rax]
  005d2	48 83 c0 08	 add	 rax, 8
  005d6	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR p_va$[rsp]
  005de	48 89 01	 mov	 QWORD PTR [rcx], rax
  005e1	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR p_va$[rsp]
  005e9	48 8b 00	 mov	 rax, QWORD PTR [rax]
  005ec	48 63 40 f8	 movsxd	 rax, DWORD PTR [rax-8]
  005f0	48 89 44 24 60	 mov	 QWORD PTR n$20668[rsp], rax
$LN24@do_mkvalue:

; 302  :             }
; 303  :             else

  005f5	eb 09		 jmp	 SHORT $LN23@do_mkvalue
$LN26@do_mkvalue:

; 304  :                 n = -1;

  005f7	48 c7 44 24 60
	ff ff ff ff	 mov	 QWORD PTR n$20668[rsp], -1
$LN23@do_mkvalue:

; 305  :             if (str == NULL) {

  00600	48 83 7c 24 68
	00		 cmp	 QWORD PTR str$20657[rsp], 0
  00606	75 18		 jne	 SHORT $LN22@do_mkvalue

; 306  :                 v = Py_None;

  00608	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0060f	48 89 44 24 58	 mov	 QWORD PTR v$20656[rsp], rax

; 307  :                 Py_INCREF(v);

  00614	48 8b 4c 24 58	 mov	 rcx, QWORD PTR v$20656[rsp]
  00619	e8 00 00 00 00	 call	 _Py_IncRef

; 308  :             }
; 309  :             else {

  0061e	eb 60		 jmp	 SHORT $LN21@do_mkvalue
$LN22@do_mkvalue:

; 310  :                 if (n < 0) {

  00620	48 83 7c 24 60
	00		 cmp	 QWORD PTR n$20668[rsp], 0
  00626	7d 44		 jge	 SHORT $LN20@do_mkvalue

; 311  :                     size_t m = strlen(str);

  00628	48 8b 4c 24 68	 mov	 rcx, QWORD PTR str$20657[rsp]
  0062d	e8 00 00 00 00	 call	 strlen
  00632	48 89 44 24 70	 mov	 QWORD PTR m$20698[rsp], rax

; 312  :                     if (m > PY_SSIZE_T_MAX) {

  00637	48 b8 ff ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775807 ; 7fffffffffffffffH
  00641	48 39 44 24 70	 cmp	 QWORD PTR m$20698[rsp], rax
  00646	76 1a		 jbe	 SHORT $LN19@do_mkvalue

; 313  :                         PyErr_SetString(PyExc_OverflowError,
; 314  :                             "string too long for Python string");

  00648	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CC@GABEGKLK@string?5too?5long?5for?5Python?5strin@
  0064f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_OverflowError
  00656	e8 00 00 00 00	 call	 PyErr_SetString

; 315  :                         return NULL;

  0065b	33 c0		 xor	 eax, eax
  0065d	e9 fd 02 00 00	 jmp	 $LN55@do_mkvalue
$LN19@do_mkvalue:

; 316  :                     }
; 317  :                     n = (Py_ssize_t)m;

  00662	48 8b 44 24 70	 mov	 rax, QWORD PTR m$20698[rsp]
  00667	48 89 44 24 60	 mov	 QWORD PTR n$20668[rsp], rax
$LN20@do_mkvalue:

; 318  :                 }
; 319  :                 v = PyUnicode_FromStringAndSize(str, n);

  0066c	48 8b 54 24 60	 mov	 rdx, QWORD PTR n$20668[rsp]
  00671	48 8b 4c 24 68	 mov	 rcx, QWORD PTR str$20657[rsp]
  00676	e8 00 00 00 00	 call	 PyUnicode_FromStringAndSize
  0067b	48 89 44 24 58	 mov	 QWORD PTR v$20656[rsp], rax
$LN21@do_mkvalue:

; 320  :             }
; 321  :             return v;

  00680	48 8b 44 24 58	 mov	 rax, QWORD PTR v$20656[rsp]
  00685	e9 d5 02 00 00	 jmp	 $LN55@do_mkvalue
$LN18@do_mkvalue:

; 322  :         }
; 323  : 
; 324  :         case 'y':
; 325  :         {
; 326  :             PyObject *v;
; 327  :             char *str = va_arg(*p_va, char *);

  0068a	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR p_va$[rsp]
  00692	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00695	48 83 c0 08	 add	 rax, 8
  00699	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR p_va$[rsp]
  006a1	48 89 01	 mov	 QWORD PTR [rcx], rax
  006a4	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR p_va$[rsp]
  006ac	48 8b 00	 mov	 rax, QWORD PTR [rax]
  006af	48 8b 40 f8	 mov	 rax, QWORD PTR [rax-8]
  006b3	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR str$20707[rsp], rax

; 328  :             Py_ssize_t n;
; 329  :             if (**p_format == '#') {

  006bb	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR p_format$[rsp]
  006c3	48 8b 00	 mov	 rax, QWORD PTR [rax]
  006c6	0f be 00	 movsx	 eax, BYTE PTR [rax]
  006c9	83 f8 23	 cmp	 eax, 35			; 00000023H
  006cc	0f 85 8d 00 00
	00		 jne	 $LN17@do_mkvalue

; 330  :                 ++*p_format;

  006d2	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR p_format$[rsp]
  006da	48 8b 00	 mov	 rax, QWORD PTR [rax]
  006dd	48 ff c0	 inc	 rax
  006e0	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR p_format$[rsp]
  006e8	48 89 01	 mov	 QWORD PTR [rcx], rax

; 331  :                 if (flags & FLAG_SIZE_T)

  006eb	8b 84 24 00 01
	00 00		 mov	 eax, DWORD PTR flags$[rsp]
  006f2	83 e0 01	 and	 eax, 1
  006f5	85 c0		 test	 eax, eax
  006f7	74 33		 je	 SHORT $LN16@do_mkvalue

; 332  :                     n = va_arg(*p_va, Py_ssize_t);

  006f9	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR p_va$[rsp]
  00701	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00704	48 83 c0 08	 add	 rax, 8
  00708	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR p_va$[rsp]
  00710	48 89 01	 mov	 QWORD PTR [rcx], rax
  00713	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR p_va$[rsp]
  0071b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0071e	48 8b 40 f8	 mov	 rax, QWORD PTR [rax-8]
  00722	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR n$20718[rsp], rax

; 333  :                 else

  0072a	eb 31		 jmp	 SHORT $LN15@do_mkvalue
$LN16@do_mkvalue:

; 334  :                     n = va_arg(*p_va, int);

  0072c	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR p_va$[rsp]
  00734	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00737	48 83 c0 08	 add	 rax, 8
  0073b	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR p_va$[rsp]
  00743	48 89 01	 mov	 QWORD PTR [rcx], rax
  00746	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR p_va$[rsp]
  0074e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00751	48 63 40 f8	 movsxd	 rax, DWORD PTR [rax-8]
  00755	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR n$20718[rsp], rax
$LN15@do_mkvalue:

; 335  :             }
; 336  :             else

  0075d	eb 0c		 jmp	 SHORT $LN14@do_mkvalue
$LN17@do_mkvalue:

; 337  :                 n = -1;

  0075f	48 c7 84 24 80
	00 00 00 ff ff
	ff ff		 mov	 QWORD PTR n$20718[rsp], -1
$LN14@do_mkvalue:

; 338  :             if (str == NULL) {

  0076b	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR str$20707[rsp], 0
  00774	75 18		 jne	 SHORT $LN13@do_mkvalue

; 339  :                 v = Py_None;

  00776	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0077d	48 89 44 24 78	 mov	 QWORD PTR v$20706[rsp], rax

; 340  :                 Py_INCREF(v);

  00782	48 8b 4c 24 78	 mov	 rcx, QWORD PTR v$20706[rsp]
  00787	e8 00 00 00 00	 call	 _Py_IncRef

; 341  :             }
; 342  :             else {

  0078c	eb 78		 jmp	 SHORT $LN12@do_mkvalue
$LN13@do_mkvalue:

; 343  :                 if (n < 0) {

  0078e	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR n$20718[rsp], 0
  00797	7d 53		 jge	 SHORT $LN11@do_mkvalue

; 344  :                     size_t m = strlen(str);

  00799	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR str$20707[rsp]
  007a1	e8 00 00 00 00	 call	 strlen
  007a6	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR m$20748[rsp], rax

; 345  :                     if (m > PY_SSIZE_T_MAX) {

  007ae	48 b8 ff ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775807 ; 7fffffffffffffffH
  007b8	48 39 84 24 90
	00 00 00	 cmp	 QWORD PTR m$20748[rsp], rax
  007c0	76 1a		 jbe	 SHORT $LN10@do_mkvalue

; 346  :                         PyErr_SetString(PyExc_OverflowError,
; 347  :                             "string too long for Python bytes");

  007c2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CB@JEDFEEEP@string?5too?5long?5for?5Python?5bytes@
  007c9	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_OverflowError
  007d0	e8 00 00 00 00	 call	 PyErr_SetString

; 348  :                         return NULL;

  007d5	33 c0		 xor	 eax, eax
  007d7	e9 83 01 00 00	 jmp	 $LN55@do_mkvalue
$LN10@do_mkvalue:

; 349  :                     }
; 350  :                     n = (Py_ssize_t)m;

  007dc	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR m$20748[rsp]
  007e4	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR n$20718[rsp], rax
$LN11@do_mkvalue:

; 351  :                 }
; 352  :                 v = PyBytes_FromStringAndSize(str, n);

  007ec	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR n$20718[rsp]
  007f4	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR str$20707[rsp]
  007fc	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  00801	48 89 44 24 78	 mov	 QWORD PTR v$20706[rsp], rax
$LN12@do_mkvalue:

; 353  :             }
; 354  :             return v;

  00806	48 8b 44 24 78	 mov	 rax, QWORD PTR v$20706[rsp]
  0080b	e9 4f 01 00 00	 jmp	 $LN55@do_mkvalue
$LN9@do_mkvalue:

; 355  :         }
; 356  : 
; 357  :         case 'N':
; 358  :         case 'S':
; 359  :         case 'O':
; 360  :         if (**p_format == '&') {

  00810	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR p_format$[rsp]
  00818	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0081b	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0081e	83 f8 26	 cmp	 eax, 38			; 00000026H
  00821	0f 85 94 00 00
	00		 jne	 $LN8@do_mkvalue

; 361  :             typedef PyObject *(*converter)(void *);
; 362  :             converter func = va_arg(*p_va, converter);

  00827	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR p_va$[rsp]
  0082f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00832	48 83 c0 08	 add	 rax, 8
  00836	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR p_va$[rsp]
  0083e	48 89 01	 mov	 QWORD PTR [rcx], rax
  00841	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR p_va$[rsp]
  00849	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0084c	48 8b 40 f8	 mov	 rax, QWORD PTR [rax-8]
  00850	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR func$20759[rsp], rax

; 363  :             void *arg = va_arg(*p_va, void *);

  00858	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR p_va$[rsp]
  00860	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00863	48 83 c0 08	 add	 rax, 8
  00867	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR p_va$[rsp]
  0086f	48 89 01	 mov	 QWORD PTR [rcx], rax
  00872	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR p_va$[rsp]
  0087a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0087d	48 8b 40 f8	 mov	 rax, QWORD PTR [rax-8]
  00881	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR arg$20770[rsp], rax

; 364  :             ++*p_format;

  00889	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR p_format$[rsp]
  00891	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00894	48 ff c0	 inc	 rax
  00897	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR p_format$[rsp]
  0089f	48 89 01	 mov	 QWORD PTR [rcx], rax

; 365  :             return (*func)(arg);

  008a2	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR arg$20770[rsp]
  008aa	ff 94 24 a0 00
	00 00		 call	 QWORD PTR func$20759[rsp]
  008b1	e9 a9 00 00 00	 jmp	 $LN55@do_mkvalue

; 366  :         }
; 367  :         else {

  008b6	e9 86 00 00 00	 jmp	 $LN7@do_mkvalue
$LN8@do_mkvalue:

; 368  :             PyObject *v;
; 369  :             v = va_arg(*p_va, PyObject *);

  008bb	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR p_va$[rsp]
  008c3	48 8b 00	 mov	 rax, QWORD PTR [rax]
  008c6	48 83 c0 08	 add	 rax, 8
  008ca	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR p_va$[rsp]
  008d2	48 89 01	 mov	 QWORD PTR [rcx], rax
  008d5	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR p_va$[rsp]
  008dd	48 8b 00	 mov	 rax, QWORD PTR [rax]
  008e0	48 8b 40 f8	 mov	 rax, QWORD PTR [rax-8]
  008e4	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR v$20782[rsp], rax

; 370  :             if (v != NULL) {

  008ec	48 83 bc 24 a8
	00 00 00 00	 cmp	 QWORD PTR v$20782[rsp], 0
  008f5	74 23		 je	 SHORT $LN6@do_mkvalue

; 371  :                 if (*(*p_format - 1) != 'N')

  008f7	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR p_format$[rsp]
  008ff	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00902	0f be 40 ff	 movsx	 eax, BYTE PTR [rax-1]
  00906	83 f8 4e	 cmp	 eax, 78			; 0000004eH
  00909	74 0d		 je	 SHORT $LN5@do_mkvalue

; 372  :                     Py_INCREF(v);

  0090b	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR v$20782[rsp]
  00913	e8 00 00 00 00	 call	 _Py_IncRef
$LN5@do_mkvalue:

; 373  :             }
; 374  :             else if (!PyErr_Occurred())

  00918	eb 1d		 jmp	 SHORT $LN4@do_mkvalue
$LN6@do_mkvalue:
  0091a	e8 00 00 00 00	 call	 PyErr_Occurred
  0091f	48 85 c0	 test	 rax, rax
  00922	75 13		 jne	 SHORT $LN3@do_mkvalue

; 375  :                 /* If a NULL was passed
; 376  :                  * because a call that should
; 377  :                  * have constructed a value
; 378  :                  * failed, that's OK, and we
; 379  :                  * pass the error on; but if
; 380  :                  * no error occurred it's not
; 381  :                  * clear that the caller knew
; 382  :                  * what she was doing. */
; 383  :                 PyErr_SetString(PyExc_SystemError,
; 384  :                     "NULL object passed to Py_BuildValue");

  00924	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@OKDAJOM@NULL?5object?5passed?5to?5Py_BuildVa@
  0092b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SystemError
  00932	e8 00 00 00 00	 call	 PyErr_SetString
$LN3@do_mkvalue:
$LN4@do_mkvalue:

; 385  :             return v;

  00937	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR v$20782[rsp]
  0093f	eb 1e		 jmp	 SHORT $LN55@do_mkvalue
$LN7@do_mkvalue:
$LN2@do_mkvalue:

; 386  :         }
; 387  : 
; 388  :         case ':':
; 389  :         case ',':
; 390  :         case ' ':
; 391  :         case '\t':
; 392  :             break;

  00941	eb 17		 jmp	 SHORT $LN51@do_mkvalue
$LN1@do_mkvalue:

; 393  : 
; 394  :         default:
; 395  :             PyErr_SetString(PyExc_SystemError,
; 396  :                 "bad format char passed to Py_BuildValue");

  00943	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CI@EEIIKDKA@bad?5format?5char?5passed?5to?5Py_Bui@
  0094a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SystemError
  00951	e8 00 00 00 00	 call	 PyErr_SetString

; 397  :             return NULL;

  00956	33 c0		 xor	 eax, eax
  00958	eb 05		 jmp	 SHORT $LN55@do_mkvalue
$LN51@do_mkvalue:

; 398  : 
; 399  :         }
; 400  :     }

  0095a	e9 b9 f6 ff ff	 jmp	 $LN54@do_mkvalue
$LN55@do_mkvalue:

; 401  : }

  0095f	48 81 c4 d8 00
	00 00		 add	 rsp, 216		; 000000d8H
  00966	5f		 pop	 rdi
  00967	5e		 pop	 rsi
  00968	c3		 ret	 0
  00969	0f 1f 00	 npad	 3
$LN58@do_mkvalue:
  0096c	00 00 00 00	 DD	 $LN2@do_mkvalue
  00970	00 00 00 00	 DD	 $LN50@do_mkvalue
  00974	00 00 00 00	 DD	 $LN47@do_mkvalue
  00978	00 00 00 00	 DD	 $LN28@do_mkvalue
  0097c	00 00 00 00	 DD	 $LN30@do_mkvalue
  00980	00 00 00 00	 DD	 $LN46@do_mkvalue
  00984	00 00 00 00	 DD	 $LN45@do_mkvalue
  00988	00 00 00 00	 DD	 $LN40@do_mkvalue
  0098c	00 00 00 00	 DD	 $LN41@do_mkvalue
  00990	00 00 00 00	 DD	 $LN9@do_mkvalue
  00994	00 00 00 00	 DD	 $LN27@do_mkvalue
  00998	00 00 00 00	 DD	 $LN49@do_mkvalue
  0099c	00 00 00 00	 DD	 $LN29@do_mkvalue
  009a0	00 00 00 00	 DD	 $LN31@do_mkvalue
  009a4	00 00 00 00	 DD	 $LN42@do_mkvalue
  009a8	00 00 00 00	 DD	 $LN43@do_mkvalue
  009ac	00 00 00 00	 DD	 $LN44@do_mkvalue
  009b0	00 00 00 00	 DD	 $LN39@do_mkvalue
  009b4	00 00 00 00	 DD	 $LN18@do_mkvalue
  009b8	00 00 00 00	 DD	 $LN48@do_mkvalue
  009bc	00 00 00 00	 DD	 $LN1@do_mkvalue
$LN57@do_mkvalue:
  009c0	00		 DB	 0
  009c1	14		 DB	 20
  009c2	14		 DB	 20
  009c3	14		 DB	 20
  009c4	14		 DB	 20
  009c5	14		 DB	 20
  009c6	14		 DB	 20
  009c7	14		 DB	 20
  009c8	14		 DB	 20
  009c9	14		 DB	 20
  009ca	14		 DB	 20
  009cb	14		 DB	 20
  009cc	14		 DB	 20
  009cd	14		 DB	 20
  009ce	14		 DB	 20
  009cf	14		 DB	 20
  009d0	14		 DB	 20
  009d1	14		 DB	 20
  009d2	14		 DB	 20
  009d3	14		 DB	 20
  009d4	14		 DB	 20
  009d5	14		 DB	 20
  009d6	14		 DB	 20
  009d7	00		 DB	 0
  009d8	14		 DB	 20
  009d9	14		 DB	 20
  009da	14		 DB	 20
  009db	14		 DB	 20
  009dc	14		 DB	 20
  009dd	14		 DB	 20
  009de	14		 DB	 20
  009df	01		 DB	 1
  009e0	14		 DB	 20
  009e1	14		 DB	 20
  009e2	14		 DB	 20
  009e3	00		 DB	 0
  009e4	14		 DB	 20
  009e5	14		 DB	 20
  009e6	14		 DB	 20
  009e7	14		 DB	 20
  009e8	14		 DB	 20
  009e9	14		 DB	 20
  009ea	14		 DB	 20
  009eb	14		 DB	 20
  009ec	14		 DB	 20
  009ed	14		 DB	 20
  009ee	14		 DB	 20
  009ef	14		 DB	 20
  009f0	14		 DB	 20
  009f1	00		 DB	 0
  009f2	14		 DB	 20
  009f3	14		 DB	 20
  009f4	14		 DB	 20
  009f5	14		 DB	 20
  009f6	14		 DB	 20
  009f7	14		 DB	 20
  009f8	14		 DB	 20
  009f9	02		 DB	 2
  009fa	03		 DB	 3
  009fb	04		 DB	 4
  009fc	14		 DB	 20
  009fd	14		 DB	 20
  009fe	14		 DB	 20
  009ff	05		 DB	 5
  00a00	06		 DB	 6
  00a01	14		 DB	 20
  00a02	07		 DB	 7
  00a03	08		 DB	 8
  00a04	14		 DB	 20
  00a05	09		 DB	 9
  00a06	09		 DB	 9
  00a07	14		 DB	 20
  00a08	14		 DB	 20
  00a09	14		 DB	 20
  00a0a	09		 DB	 9
  00a0b	14		 DB	 20
  00a0c	0a		 DB	 10
  00a0d	14		 DB	 20
  00a0e	14		 DB	 20
  00a0f	14		 DB	 20
  00a10	14		 DB	 20
  00a11	14		 DB	 20
  00a12	0b		 DB	 11
  00a13	14		 DB	 20
  00a14	14		 DB	 20
  00a15	14		 DB	 20
  00a16	14		 DB	 20
  00a17	14		 DB	 20
  00a18	14		 DB	 20
  00a19	02		 DB	 2
  00a1a	0c		 DB	 12
  00a1b	0d		 DB	 13
  00a1c	14		 DB	 20
  00a1d	0d		 DB	 13
  00a1e	14		 DB	 20
  00a1f	02		 DB	 2
  00a20	02		 DB	 2
  00a21	14		 DB	 20
  00a22	0e		 DB	 14
  00a23	0f		 DB	 15
  00a24	14		 DB	 20
  00a25	10		 DB	 16
  00a26	14		 DB	 20
  00a27	14		 DB	 20
  00a28	14		 DB	 20
  00a29	14		 DB	 20
  00a2a	0a		 DB	 10
  00a2b	14		 DB	 20
  00a2c	11		 DB	 17
  00a2d	14		 DB	 20
  00a2e	14		 DB	 20
  00a2f	14		 DB	 20
  00a30	12		 DB	 18
  00a31	0a		 DB	 10
  00a32	13		 DB	 19
do_mkvalue ENDP
_TEXT	ENDS
EXTRN	PyDict_SetItem:PROC
EXTRN	PyDict_New:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$do_mkdict DD imagerel do_mkdict
	DD	imagerel do_mkdict+420
	DD	imagerel $unwind$do_mkdict
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$do_mkdict DD 011801H
	DD	0a218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT do_mkdict
_TEXT	SEGMENT
i$ = 32
d$ = 40
itemfailed$ = 48
v$20363 = 56
k$20362 = 64
err$20364 = 72
p_format$ = 96
p_va$ = 104
endchar$ = 112
n$ = 120
flags$ = 128
do_mkdict PROC						; COMDAT

; 68   : {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 69   :     PyObject *d;
; 70   :     int i;
; 71   :     int itemfailed = 0;

  00018	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR itemfailed$[rsp], 0

; 72   :     if (n < 0)

  00020	83 7c 24 78 00	 cmp	 DWORD PTR n$[rsp], 0
  00025	7d 07		 jge	 SHORT $LN12@do_mkdict

; 73   :         return NULL;

  00027	33 c0		 xor	 eax, eax
  00029	e9 71 01 00 00	 jmp	 $LN13@do_mkdict
$LN12@do_mkdict:

; 74   :     if ((d = PyDict_New()) == NULL)

  0002e	e8 00 00 00 00	 call	 PyDict_New
  00033	48 89 44 24 28	 mov	 QWORD PTR d$[rsp], rax
  00038	48 83 7c 24 28
	00		 cmp	 QWORD PTR d$[rsp], 0
  0003e	75 07		 jne	 SHORT $LN11@do_mkdict

; 75   :         return NULL;

  00040	33 c0		 xor	 eax, eax
  00042	e9 58 01 00 00	 jmp	 $LN13@do_mkdict
$LN11@do_mkdict:

; 76   :     /* Note that we can't bail immediately on error as this will leak
; 77   :        refcounts on any 'N' arguments. */
; 78   :     for (i = 0; i < n; i+= 2) {

  00047	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  0004f	eb 0b		 jmp	 SHORT $LN10@do_mkdict
$LN9@do_mkdict:
  00051	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  00055	83 c0 02	 add	 eax, 2
  00058	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN10@do_mkdict:
  0005c	8b 44 24 78	 mov	 eax, DWORD PTR n$[rsp]
  00060	39 44 24 20	 cmp	 DWORD PTR i$[rsp], eax
  00064	0f 8d d5 00 00
	00		 jge	 $LN8@do_mkdict

; 79   :         PyObject *k, *v;
; 80   :         int err;
; 81   :         k = do_mkvalue(p_format, p_va, flags);

  0006a	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR flags$[rsp]
  00072	48 8b 54 24 68	 mov	 rdx, QWORD PTR p_va$[rsp]
  00077	48 8b 4c 24 60	 mov	 rcx, QWORD PTR p_format$[rsp]
  0007c	e8 00 00 00 00	 call	 do_mkvalue
  00081	48 89 44 24 40	 mov	 QWORD PTR k$20362[rsp], rax

; 82   :         if (k == NULL) {

  00086	48 83 7c 24 40
	00		 cmp	 QWORD PTR k$20362[rsp], 0
  0008c	75 20		 jne	 SHORT $LN7@do_mkdict

; 83   :             itemfailed = 1;

  0008e	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR itemfailed$[rsp], 1

; 84   :             Py_INCREF(Py_None);

  00096	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  0009d	e8 00 00 00 00	 call	 _Py_IncRef

; 85   :             k = Py_None;

  000a2	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000a9	48 89 44 24 40	 mov	 QWORD PTR k$20362[rsp], rax
$LN7@do_mkdict:

; 86   :         }
; 87   :         v = do_mkvalue(p_format, p_va, flags);

  000ae	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR flags$[rsp]
  000b6	48 8b 54 24 68	 mov	 rdx, QWORD PTR p_va$[rsp]
  000bb	48 8b 4c 24 60	 mov	 rcx, QWORD PTR p_format$[rsp]
  000c0	e8 00 00 00 00	 call	 do_mkvalue
  000c5	48 89 44 24 38	 mov	 QWORD PTR v$20363[rsp], rax

; 88   :         if (v == NULL) {

  000ca	48 83 7c 24 38
	00		 cmp	 QWORD PTR v$20363[rsp], 0
  000d0	75 20		 jne	 SHORT $LN6@do_mkdict

; 89   :             itemfailed = 1;

  000d2	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR itemfailed$[rsp], 1

; 90   :             Py_INCREF(Py_None);

  000da	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  000e1	e8 00 00 00 00	 call	 _Py_IncRef

; 91   :             v = Py_None;

  000e6	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000ed	48 89 44 24 38	 mov	 QWORD PTR v$20363[rsp], rax
$LN6@do_mkdict:

; 92   :         }
; 93   :         err = PyDict_SetItem(d, k, v);

  000f2	4c 8b 44 24 38	 mov	 r8, QWORD PTR v$20363[rsp]
  000f7	48 8b 54 24 40	 mov	 rdx, QWORD PTR k$20362[rsp]
  000fc	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  00101	e8 00 00 00 00	 call	 PyDict_SetItem
  00106	89 44 24 48	 mov	 DWORD PTR err$20364[rsp], eax

; 94   :         Py_DECREF(k);

  0010a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR k$20362[rsp]
  0010f	e8 00 00 00 00	 call	 _Py_DecRef

; 95   :         Py_DECREF(v);

  00114	48 8b 4c 24 38	 mov	 rcx, QWORD PTR v$20363[rsp]
  00119	e8 00 00 00 00	 call	 _Py_DecRef

; 96   :         if (err < 0 || itemfailed) {

  0011e	83 7c 24 48 00	 cmp	 DWORD PTR err$20364[rsp], 0
  00123	7c 07		 jl	 SHORT $LN4@do_mkdict
  00125	83 7c 24 30 00	 cmp	 DWORD PTR itemfailed$[rsp], 0
  0012a	74 0e		 je	 SHORT $LN5@do_mkdict
$LN4@do_mkdict:

; 97   :             Py_DECREF(d);

  0012c	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  00131	e8 00 00 00 00	 call	 _Py_DecRef

; 98   :             return NULL;

  00136	33 c0		 xor	 eax, eax
  00138	eb 65		 jmp	 SHORT $LN13@do_mkdict
$LN5@do_mkdict:

; 99   :         }
; 100  :     }

  0013a	e9 12 ff ff ff	 jmp	 $LN9@do_mkdict
$LN8@do_mkdict:

; 101  :     if (d != NULL && **p_format != endchar) {

  0013f	48 83 7c 24 28
	00		 cmp	 QWORD PTR d$[rsp], 0
  00145	74 39		 je	 SHORT $LN3@do_mkdict
  00147	48 8b 44 24 60	 mov	 rax, QWORD PTR p_format$[rsp]
  0014c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0014f	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00152	3b 44 24 70	 cmp	 eax, DWORD PTR endchar$[rsp]
  00156	74 28		 je	 SHORT $LN3@do_mkdict

; 102  :         Py_DECREF(d);

  00158	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  0015d	e8 00 00 00 00	 call	 _Py_DecRef

; 103  :         d = NULL;

  00162	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR d$[rsp], 0

; 104  :         PyErr_SetString(PyExc_SystemError,
; 105  :                         "Unmatched paren in format");

  0016b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@CJGIJEPM@Unmatched?5paren?5in?5format?$AA@
  00172	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SystemError
  00179	e8 00 00 00 00	 call	 PyErr_SetString
  0017e	eb 1a		 jmp	 SHORT $LN2@do_mkdict
$LN3@do_mkdict:

; 106  :     }
; 107  :     else if (endchar)

  00180	83 7c 24 70 00	 cmp	 DWORD PTR endchar$[rsp], 0
  00185	74 13		 je	 SHORT $LN1@do_mkdict

; 108  :         ++*p_format;

  00187	48 8b 44 24 60	 mov	 rax, QWORD PTR p_format$[rsp]
  0018c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0018f	48 ff c0	 inc	 rax
  00192	48 8b 4c 24 60	 mov	 rcx, QWORD PTR p_format$[rsp]
  00197	48 89 01	 mov	 QWORD PTR [rcx], rax
$LN1@do_mkdict:
$LN2@do_mkdict:

; 109  :     return d;

  0019a	48 8b 44 24 28	 mov	 rax, QWORD PTR d$[rsp]
$LN13@do_mkdict:

; 110  : }

  0019f	48 83 c4 58	 add	 rsp, 88			; 00000058H
  001a3	c3		 ret	 0
do_mkdict ENDP
_TEXT	ENDS
EXTRN	PyList_New:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$do_mklist DD imagerel do_mklist
	DD	imagerel do_mklist+306
	DD	imagerel $unwind$do_mklist
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$do_mklist DD 011801H
	DD	08218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT do_mklist
_TEXT	SEGMENT
v$ = 32
i$ = 40
itemfailed$ = 44
w$20406 = 48
p_format$ = 80
p_va$ = 88
endchar$ = 96
n$ = 104
flags$ = 112
do_mklist PROC						; COMDAT

; 114  : {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 115  :     PyObject *v;
; 116  :     int i;
; 117  :     int itemfailed = 0;

  00018	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR itemfailed$[rsp], 0

; 118  :     if (n < 0)

  00020	83 7c 24 68 00	 cmp	 DWORD PTR n$[rsp], 0
  00025	7d 07		 jge	 SHORT $LN9@do_mklist

; 119  :         return NULL;

  00027	33 c0		 xor	 eax, eax
  00029	e9 ff 00 00 00	 jmp	 $LN10@do_mklist
$LN9@do_mklist:

; 120  :     v = PyList_New(n);

  0002e	48 63 44 24 68	 movsxd	 rax, DWORD PTR n$[rsp]
  00033	48 8b c8	 mov	 rcx, rax
  00036	e8 00 00 00 00	 call	 PyList_New
  0003b	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax

; 121  :     if (v == NULL)

  00040	48 83 7c 24 20
	00		 cmp	 QWORD PTR v$[rsp], 0
  00046	75 07		 jne	 SHORT $LN8@do_mklist

; 122  :         return NULL;

  00048	33 c0		 xor	 eax, eax
  0004a	e9 de 00 00 00	 jmp	 $LN10@do_mklist
$LN8@do_mklist:

; 123  :     /* Note that we can't bail immediately on error as this will leak
; 124  :        refcounts on any 'N' arguments. */
; 125  :     for (i = 0; i < n; i++) {

  0004f	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00057	eb 0a		 jmp	 SHORT $LN7@do_mklist
$LN6@do_mklist:
  00059	8b 44 24 28	 mov	 eax, DWORD PTR i$[rsp]
  0005d	ff c0		 inc	 eax
  0005f	89 44 24 28	 mov	 DWORD PTR i$[rsp], eax
$LN7@do_mklist:
  00063	8b 44 24 68	 mov	 eax, DWORD PTR n$[rsp]
  00067	39 44 24 28	 cmp	 DWORD PTR i$[rsp], eax
  0006b	7d 5a		 jge	 SHORT $LN5@do_mklist

; 126  :         PyObject *w = do_mkvalue(p_format, p_va, flags);

  0006d	44 8b 44 24 70	 mov	 r8d, DWORD PTR flags$[rsp]
  00072	48 8b 54 24 58	 mov	 rdx, QWORD PTR p_va$[rsp]
  00077	48 8b 4c 24 50	 mov	 rcx, QWORD PTR p_format$[rsp]
  0007c	e8 00 00 00 00	 call	 do_mkvalue
  00081	48 89 44 24 30	 mov	 QWORD PTR w$20406[rsp], rax

; 127  :         if (w == NULL) {

  00086	48 83 7c 24 30
	00		 cmp	 QWORD PTR w$20406[rsp], 0
  0008c	75 20		 jne	 SHORT $LN4@do_mklist

; 128  :             itemfailed = 1;

  0008e	c7 44 24 2c 01
	00 00 00	 mov	 DWORD PTR itemfailed$[rsp], 1

; 129  :             Py_INCREF(Py_None);

  00096	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  0009d	e8 00 00 00 00	 call	 _Py_IncRef

; 130  :             w = Py_None;

  000a2	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000a9	48 89 44 24 30	 mov	 QWORD PTR w$20406[rsp], rax
$LN4@do_mklist:

; 131  :         }
; 132  :         PyList_SET_ITEM(v, i, w);

  000ae	48 63 44 24 28	 movsxd	 rax, DWORD PTR i$[rsp]
  000b3	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  000b8	48 8b 49 70	 mov	 rcx, QWORD PTR [rcx+112]
  000bc	48 8b 54 24 30	 mov	 rdx, QWORD PTR w$20406[rsp]
  000c1	48 89 14 c1	 mov	 QWORD PTR [rcx+rax*8], rdx

; 133  :     }

  000c5	eb 92		 jmp	 SHORT $LN6@do_mklist
$LN5@do_mklist:

; 134  : 
; 135  :     if (itemfailed) {

  000c7	83 7c 24 2c 00	 cmp	 DWORD PTR itemfailed$[rsp], 0
  000cc	74 0e		 je	 SHORT $LN3@do_mklist

; 136  :         /* do_mkvalue() should have already set an error */
; 137  :         Py_DECREF(v);

  000ce	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  000d3	e8 00 00 00 00	 call	 _Py_DecRef

; 138  :         return NULL;

  000d8	33 c0		 xor	 eax, eax
  000da	eb 51		 jmp	 SHORT $LN10@do_mklist
$LN3@do_mklist:

; 139  :     }
; 140  :     if (**p_format != endchar) {

  000dc	48 8b 44 24 50	 mov	 rax, QWORD PTR p_format$[rsp]
  000e1	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000e4	0f be 00	 movsx	 eax, BYTE PTR [rax]
  000e7	3b 44 24 60	 cmp	 eax, DWORD PTR endchar$[rsp]
  000eb	74 21		 je	 SHORT $LN2@do_mklist

; 141  :         Py_DECREF(v);

  000ed	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  000f2	e8 00 00 00 00	 call	 _Py_DecRef

; 142  :         PyErr_SetString(PyExc_SystemError,
; 143  :                         "Unmatched paren in format");

  000f7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@CJGIJEPM@Unmatched?5paren?5in?5format?$AA@
  000fe	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SystemError
  00105	e8 00 00 00 00	 call	 PyErr_SetString

; 144  :         return NULL;

  0010a	33 c0		 xor	 eax, eax
  0010c	eb 1f		 jmp	 SHORT $LN10@do_mklist
$LN2@do_mklist:

; 145  :     }
; 146  :     if (endchar)

  0010e	83 7c 24 60 00	 cmp	 DWORD PTR endchar$[rsp], 0
  00113	74 13		 je	 SHORT $LN1@do_mklist

; 147  :         ++*p_format;

  00115	48 8b 44 24 50	 mov	 rax, QWORD PTR p_format$[rsp]
  0011a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0011d	48 ff c0	 inc	 rax
  00120	48 8b 4c 24 50	 mov	 rcx, QWORD PTR p_format$[rsp]
  00125	48 89 01	 mov	 QWORD PTR [rcx], rax
$LN1@do_mklist:

; 148  :     return v;

  00128	48 8b 44 24 20	 mov	 rax, QWORD PTR v$[rsp]
$LN10@do_mklist:

; 149  : }

  0012d	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00131	c3		 ret	 0
do_mklist ENDP
_TEXT	ENDS
PUBLIC	PyEval_CallFunction
EXTRN	PyEval_CallObjectWithKeywords:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyEval_CallFunction DD imagerel $LN4
	DD	imagerel $LN4+118
	DD	imagerel $unwind$PyEval_CallFunction
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyEval_CallFunction DD 011801H
	DD	08218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyEval_CallFunction
_TEXT	SEGMENT
res$ = 32
args$ = 40
vargs$ = 48
obj$ = 80
format$ = 88
PyEval_CallFunction PROC				; COMDAT

; 461  : {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 462  :     va_list vargs;
; 463  :     PyObject *args;
; 464  :     PyObject *res;
; 465  : 
; 466  :     va_start(vargs, format);

  00018	48 8d 44 24 60	 lea	 rax, QWORD PTR format$[rsp+8]
  0001d	48 89 44 24 30	 mov	 QWORD PTR vargs$[rsp], rax

; 467  : 
; 468  :     args = Py_VaBuildValue(format, vargs);

  00022	48 8b 54 24 30	 mov	 rdx, QWORD PTR vargs$[rsp]
  00027	48 8b 4c 24 58	 mov	 rcx, QWORD PTR format$[rsp]
  0002c	e8 00 00 00 00	 call	 Py_VaBuildValue
  00031	48 89 44 24 28	 mov	 QWORD PTR args$[rsp], rax

; 469  :     va_end(vargs);

  00036	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR vargs$[rsp], 0

; 470  : 
; 471  :     if (args == NULL)

  0003f	48 83 7c 24 28
	00		 cmp	 QWORD PTR args$[rsp], 0
  00045	75 04		 jne	 SHORT $LN1@PyEval_Cal

; 472  :         return NULL;

  00047	33 c0		 xor	 eax, eax
  00049	eb 26		 jmp	 SHORT $LN2@PyEval_Cal
$LN1@PyEval_Cal:

; 473  : 
; 474  :     res = PyEval_CallObject(obj, args);

  0004b	45 33 c0	 xor	 r8d, r8d
  0004e	48 8b 54 24 28	 mov	 rdx, QWORD PTR args$[rsp]
  00053	48 8b 4c 24 50	 mov	 rcx, QWORD PTR obj$[rsp]
  00058	e8 00 00 00 00	 call	 PyEval_CallObjectWithKeywords
  0005d	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax

; 475  :     Py_DECREF(args);

  00062	48 8b 4c 24 28	 mov	 rcx, QWORD PTR args$[rsp]
  00067	e8 00 00 00 00	 call	 _Py_DecRef

; 476  : 
; 477  :     return res;

  0006c	48 8b 44 24 20	 mov	 rax, QWORD PTR res$[rsp]
$LN2@PyEval_Cal:

; 478  : }

  00071	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00075	c3		 ret	 0
PyEval_CallFunction ENDP
_TEXT	ENDS
PUBLIC	PyEval_CallMethod
EXTRN	PyObject_GetAttrString:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyEval_CallMethod DD imagerel $LN5
	DD	imagerel $LN5+170
	DD	imagerel $unwind$PyEval_CallMethod
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyEval_CallMethod DD 011801H
	DD	08218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyEval_CallMethod
_TEXT	SEGMENT
res$ = 32
args$ = 40
vargs$ = 48
meth$ = 56
obj$ = 80
methodname$ = 88
format$ = 96
PyEval_CallMethod PROC					; COMDAT

; 483  : {

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 484  :     va_list vargs;
; 485  :     PyObject *meth;
; 486  :     PyObject *args;
; 487  :     PyObject *res;
; 488  : 
; 489  :     meth = PyObject_GetAttrString(obj, methodname);

  00018	48 8b 54 24 58	 mov	 rdx, QWORD PTR methodname$[rsp]
  0001d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR obj$[rsp]
  00022	e8 00 00 00 00	 call	 PyObject_GetAttrString
  00027	48 89 44 24 38	 mov	 QWORD PTR meth$[rsp], rax

; 490  :     if (meth == NULL)

  0002c	48 83 7c 24 38
	00		 cmp	 QWORD PTR meth$[rsp], 0
  00032	75 04		 jne	 SHORT $LN2@PyEval_Cal@2

; 491  :         return NULL;

  00034	33 c0		 xor	 eax, eax
  00036	eb 6d		 jmp	 SHORT $LN3@PyEval_Cal@2
$LN2@PyEval_Cal@2:

; 492  : 
; 493  :     va_start(vargs, format);

  00038	48 8d 44 24 68	 lea	 rax, QWORD PTR format$[rsp+8]
  0003d	48 89 44 24 30	 mov	 QWORD PTR vargs$[rsp], rax

; 494  : 
; 495  :     args = Py_VaBuildValue(format, vargs);

  00042	48 8b 54 24 30	 mov	 rdx, QWORD PTR vargs$[rsp]
  00047	48 8b 4c 24 60	 mov	 rcx, QWORD PTR format$[rsp]
  0004c	e8 00 00 00 00	 call	 Py_VaBuildValue
  00051	48 89 44 24 28	 mov	 QWORD PTR args$[rsp], rax

; 496  :     va_end(vargs);

  00056	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR vargs$[rsp], 0

; 497  : 
; 498  :     if (args == NULL) {

  0005f	48 83 7c 24 28
	00		 cmp	 QWORD PTR args$[rsp], 0
  00065	75 0e		 jne	 SHORT $LN1@PyEval_Cal@2

; 499  :         Py_DECREF(meth);

  00067	48 8b 4c 24 38	 mov	 rcx, QWORD PTR meth$[rsp]
  0006c	e8 00 00 00 00	 call	 _Py_DecRef

; 500  :         return NULL;

  00071	33 c0		 xor	 eax, eax
  00073	eb 30		 jmp	 SHORT $LN3@PyEval_Cal@2
$LN1@PyEval_Cal@2:

; 501  :     }
; 502  : 
; 503  :     res = PyEval_CallObject(meth, args);

  00075	45 33 c0	 xor	 r8d, r8d
  00078	48 8b 54 24 28	 mov	 rdx, QWORD PTR args$[rsp]
  0007d	48 8b 4c 24 38	 mov	 rcx, QWORD PTR meth$[rsp]
  00082	e8 00 00 00 00	 call	 PyEval_CallObjectWithKeywords
  00087	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax

; 504  :     Py_DECREF(meth);

  0008c	48 8b 4c 24 38	 mov	 rcx, QWORD PTR meth$[rsp]
  00091	e8 00 00 00 00	 call	 _Py_DecRef

; 505  :     Py_DECREF(args);

  00096	48 8b 4c 24 28	 mov	 rcx, QWORD PTR args$[rsp]
  0009b	e8 00 00 00 00	 call	 _Py_DecRef

; 506  : 
; 507  :     return res;

  000a0	48 8b 44 24 20	 mov	 rax, QWORD PTR res$[rsp]
$LN3@PyEval_Cal@2:

; 508  : }

  000a5	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000a9	c3		 ret	 0
PyEval_CallMethod ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BM@HFKEKDOI@module?5?8?$CFs?8?5has?5no?5__dict__?$AA@ ; `string'
PUBLIC	??_C@_0CK@NBCBIDGD@PyModule_AddObject?$CI?$CJ?5needs?5non?9N@ ; `string'
PUBLIC	??_C@_0CP@ENPEONHI@PyModule_AddObject?$CI?$CJ?5needs?5modul@ ; `string'
PUBLIC	PyModule_AddObject
EXTRN	PyDict_SetItemString:PROC
EXTRN	PyErr_Format:PROC
EXTRN	PyModule_GetName:PROC
EXTRN	PyModule_GetDict:PROC
EXTRN	PyExc_TypeError:QWORD
EXTRN	PyType_IsSubtype:PROC
EXTRN	PyModule_Type:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyModule_AddObject DD imagerel $LN8
	DD	imagerel $LN8+245
	DD	imagerel $unwind$PyModule_AddObject
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyModule_AddObject DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT ??_C@_0BM@HFKEKDOI@module?5?8?$CFs?8?5has?5no?5__dict__?$AA@
CONST	SEGMENT
??_C@_0BM@HFKEKDOI@module?5?8?$CFs?8?5has?5no?5__dict__?$AA@ DB 'module '''
	DB	'%s'' has no __dict__', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@NBCBIDGD@PyModule_AddObject?$CI?$CJ?5needs?5non?9N@
CONST	SEGMENT
??_C@_0CK@NBCBIDGD@PyModule_AddObject?$CI?$CJ?5needs?5non?9N@ DB 'PyModul'
	DB	'e_AddObject() needs non-NULL value', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@ENPEONHI@PyModule_AddObject?$CI?$CJ?5needs?5modul@
CONST	SEGMENT
??_C@_0CP@ENPEONHI@PyModule_AddObject?$CI?$CJ?5needs?5modul@ DB 'PyModule'
	DB	'_AddObject() needs module as first arg', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyModule_AddObject
_TEXT	SEGMENT
dict$ = 32
m$ = 64
name$ = 72
o$ = 80
PyModule_AddObject PROC					; COMDAT

; 512  : {

$LN8:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 513  :     PyObject *dict;
; 514  :     if (!PyModule_Check(m)) {

  00013	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyModule_Type
  0001a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR m$[rsp]
  0001f	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00023	74 36		 je	 SHORT $LN5@PyModule_A
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyModule_Type
  0002c	48 8b 44 24 40	 mov	 rax, QWORD PTR m$[rsp]
  00031	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  00035	e8 00 00 00 00	 call	 PyType_IsSubtype
  0003a	85 c0		 test	 eax, eax
  0003c	75 1d		 jne	 SHORT $LN5@PyModule_A

; 515  :         PyErr_SetString(PyExc_TypeError,
; 516  :                     "PyModule_AddObject() needs module as first arg");

  0003e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CP@ENPEONHI@PyModule_AddObject?$CI?$CJ?5needs?5modul@
  00045	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0004c	e8 00 00 00 00	 call	 PyErr_SetString

; 517  :         return -1;

  00051	b8 ff ff ff ff	 mov	 eax, -1
  00056	e9 95 00 00 00	 jmp	 $LN6@PyModule_A
$LN5@PyModule_A:

; 518  :     }
; 519  :     if (!o) {

  0005b	48 83 7c 24 50
	00		 cmp	 QWORD PTR o$[rsp], 0
  00061	75 24		 jne	 SHORT $LN4@PyModule_A

; 520  :         if (!PyErr_Occurred())

  00063	e8 00 00 00 00	 call	 PyErr_Occurred
  00068	48 85 c0	 test	 rax, rax
  0006b	75 13		 jne	 SHORT $LN3@PyModule_A

; 521  :             PyErr_SetString(PyExc_TypeError,
; 522  :                             "PyModule_AddObject() needs non-NULL value");

  0006d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CK@NBCBIDGD@PyModule_AddObject?$CI?$CJ?5needs?5non?9N@
  00074	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0007b	e8 00 00 00 00	 call	 PyErr_SetString
$LN3@PyModule_A:

; 523  :         return -1;

  00080	b8 ff ff ff ff	 mov	 eax, -1
  00085	eb 69		 jmp	 SHORT $LN6@PyModule_A
$LN4@PyModule_A:

; 524  :     }
; 525  : 
; 526  :     dict = PyModule_GetDict(m);

  00087	48 8b 4c 24 40	 mov	 rcx, QWORD PTR m$[rsp]
  0008c	e8 00 00 00 00	 call	 PyModule_GetDict
  00091	48 89 44 24 20	 mov	 QWORD PTR dict$[rsp], rax

; 527  :     if (dict == NULL) {

  00096	48 83 7c 24 20
	00		 cmp	 QWORD PTR dict$[rsp], 0
  0009c	75 27		 jne	 SHORT $LN2@PyModule_A

; 528  :         /* Internal error -- modules must have a dict! */
; 529  :         PyErr_Format(PyExc_SystemError, "module '%s' has no __dict__",
; 530  :                      PyModule_GetName(m));

  0009e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR m$[rsp]
  000a3	e8 00 00 00 00	 call	 PyModule_GetName
  000a8	4c 8b c0	 mov	 r8, rax
  000ab	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@HFKEKDOI@module?5?8?$CFs?8?5has?5no?5__dict__?$AA@
  000b2	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SystemError
  000b9	e8 00 00 00 00	 call	 PyErr_Format

; 531  :         return -1;

  000be	b8 ff ff ff ff	 mov	 eax, -1
  000c3	eb 2b		 jmp	 SHORT $LN6@PyModule_A
$LN2@PyModule_A:

; 532  :     }
; 533  :     if (PyDict_SetItemString(dict, name, o))

  000c5	4c 8b 44 24 50	 mov	 r8, QWORD PTR o$[rsp]
  000ca	48 8b 54 24 48	 mov	 rdx, QWORD PTR name$[rsp]
  000cf	48 8b 4c 24 20	 mov	 rcx, QWORD PTR dict$[rsp]
  000d4	e8 00 00 00 00	 call	 PyDict_SetItemString
  000d9	85 c0		 test	 eax, eax
  000db	74 07		 je	 SHORT $LN1@PyModule_A

; 534  :         return -1;

  000dd	b8 ff ff ff ff	 mov	 eax, -1
  000e2	eb 0c		 jmp	 SHORT $LN6@PyModule_A
$LN1@PyModule_A:

; 535  :     Py_DECREF(o);

  000e4	48 8b 4c 24 50	 mov	 rcx, QWORD PTR o$[rsp]
  000e9	e8 00 00 00 00	 call	 _Py_DecRef

; 536  :     return 0;

  000ee	33 c0		 xor	 eax, eax
$LN6@PyModule_A:

; 537  : }

  000f0	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000f4	c3		 ret	 0
PyModule_AddObject ENDP
_TEXT	ENDS
PUBLIC	PyModule_AddIntConstant
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyModule_AddIntConstant DD imagerel $LN5
	DD	imagerel $LN5+96
	DD	imagerel $unwind$PyModule_AddIntConstant
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyModule_AddIntConstant DD 011301H
	DD	06213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyModule_AddIntConstant
_TEXT	SEGMENT
o$ = 32
m$ = 64
name$ = 72
value$ = 80
PyModule_AddIntConstant PROC				; COMDAT

; 541  : {

$LN5:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 542  :     PyObject *o = PyLong_FromLong(value);

  00013	8b 4c 24 50	 mov	 ecx, DWORD PTR value$[rsp]
  00017	e8 00 00 00 00	 call	 PyLong_FromLong
  0001c	48 89 44 24 20	 mov	 QWORD PTR o$[rsp], rax

; 543  :     if (!o)

  00021	48 83 7c 24 20
	00		 cmp	 QWORD PTR o$[rsp], 0
  00027	75 07		 jne	 SHORT $LN2@PyModule_A@2

; 544  :         return -1;

  00029	b8 ff ff ff ff	 mov	 eax, -1
  0002e	eb 2b		 jmp	 SHORT $LN3@PyModule_A@2
$LN2@PyModule_A@2:

; 545  :     if (PyModule_AddObject(m, name, o) == 0)

  00030	4c 8b 44 24 20	 mov	 r8, QWORD PTR o$[rsp]
  00035	48 8b 54 24 48	 mov	 rdx, QWORD PTR name$[rsp]
  0003a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR m$[rsp]
  0003f	e8 00 00 00 00	 call	 PyModule_AddObject
  00044	85 c0		 test	 eax, eax
  00046	75 04		 jne	 SHORT $LN1@PyModule_A@2

; 546  :         return 0;

  00048	33 c0		 xor	 eax, eax
  0004a	eb 0f		 jmp	 SHORT $LN3@PyModule_A@2
$LN1@PyModule_A@2:

; 547  :     Py_DECREF(o);

  0004c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR o$[rsp]
  00051	e8 00 00 00 00	 call	 _Py_DecRef

; 548  :     return -1;

  00056	b8 ff ff ff ff	 mov	 eax, -1
$LN3@PyModule_A@2:

; 549  : }

  0005b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0005f	c3		 ret	 0
PyModule_AddIntConstant ENDP
_TEXT	ENDS
PUBLIC	PyModule_AddStringConstant
EXTRN	PyUnicode_FromString:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyModule_AddStringConstant DD imagerel $LN5
	DD	imagerel $LN5+97
	DD	imagerel $unwind$PyModule_AddStringConstant
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyModule_AddStringConstant DD 011301H
	DD	06213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyModule_AddStringConstant
_TEXT	SEGMENT
o$ = 32
m$ = 64
name$ = 72
value$ = 80
PyModule_AddStringConstant PROC				; COMDAT

; 553  : {

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 554  :     PyObject *o = PyUnicode_FromString(value);

  00013	48 8b 4c 24 50	 mov	 rcx, QWORD PTR value$[rsp]
  00018	e8 00 00 00 00	 call	 PyUnicode_FromString
  0001d	48 89 44 24 20	 mov	 QWORD PTR o$[rsp], rax

; 555  :     if (!o)

  00022	48 83 7c 24 20
	00		 cmp	 QWORD PTR o$[rsp], 0
  00028	75 07		 jne	 SHORT $LN2@PyModule_A@3

; 556  :         return -1;

  0002a	b8 ff ff ff ff	 mov	 eax, -1
  0002f	eb 2b		 jmp	 SHORT $LN3@PyModule_A@3
$LN2@PyModule_A@3:

; 557  :     if (PyModule_AddObject(m, name, o) == 0)

  00031	4c 8b 44 24 20	 mov	 r8, QWORD PTR o$[rsp]
  00036	48 8b 54 24 48	 mov	 rdx, QWORD PTR name$[rsp]
  0003b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR m$[rsp]
  00040	e8 00 00 00 00	 call	 PyModule_AddObject
  00045	85 c0		 test	 eax, eax
  00047	75 04		 jne	 SHORT $LN1@PyModule_A@3

; 558  :         return 0;

  00049	33 c0		 xor	 eax, eax
  0004b	eb 0f		 jmp	 SHORT $LN3@PyModule_A@3
$LN1@PyModule_A@3:

; 559  :     Py_DECREF(o);

  0004d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR o$[rsp]
  00052	e8 00 00 00 00	 call	 _Py_DecRef

; 560  :     return -1;

  00057	b8 ff ff ff ff	 mov	 eax, -1
$LN3@PyModule_A@3:

; 561  : }

  0005c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00060	c3		 ret	 0
PyModule_AddStringConstant ENDP
_TEXT	ENDS
END
