; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0BC@NPBBDHCH@no?5mem?5for?5bitset?$AA@	; `string'
PUBLIC	_Py_newbitset
EXTRN	Py_FatalError:PROC
EXTRN	_PyObject_DebugMalloc:PROC
;	COMDAT pdata
; File c:\src\pyparallel\parser\bitset.c
pdata	SEGMENT
$pdata$_Py_newbitset DD imagerel $LN6
	DD	imagerel $LN6+140
	DD	imagerel $unwind$_Py_newbitset
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_newbitset DD 010801H
	DD	06208H
xdata	ENDS
;	COMDAT ??_C@_0BC@NPBBDHCH@no?5mem?5for?5bitset?$AA@
CONST	SEGMENT
??_C@_0BC@NPBBDHCH@no?5mem?5for?5bitset?$AA@ DB 'no mem for bitset', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_newbitset
_TEXT	SEGMENT
nbytes$ = 32
ss$ = 40
nbits$ = 64
_Py_newbitset PROC					; COMDAT

; 9    : {

$LN6:
  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 10   :     int nbytes = NBYTES(nbits);

  00008	48 63 44 24 40	 movsxd	 rax, DWORD PTR nbits$[rsp]
  0000d	48 83 c0 07	 add	 rax, 7
  00011	33 d2		 xor	 edx, edx
  00013	b9 08 00 00 00	 mov	 ecx, 8
  00018	48 f7 f1	 div	 rcx
  0001b	89 44 24 20	 mov	 DWORD PTR nbytes$[rsp], eax

; 11   :     bitset ss = (char *)PyObject_MALLOC(sizeof(BYTE) *  nbytes);

  0001f	48 63 44 24 20	 movsxd	 rax, DWORD PTR nbytes$[rsp]
  00024	48 8b c8	 mov	 rcx, rax
  00027	e8 00 00 00 00	 call	 _PyObject_DebugMalloc
  0002c	48 89 44 24 28	 mov	 QWORD PTR ss$[rsp], rax

; 12   : 
; 13   :     if (ss == NULL)

  00031	48 83 7c 24 28
	00		 cmp	 QWORD PTR ss$[rsp], 0
  00037	75 0c		 jne	 SHORT $LN3@Py_newbits

; 14   :         Py_FatalError("no mem for bitset");

  00039	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@NPBBDHCH@no?5mem?5for?5bitset?$AA@
  00040	e8 00 00 00 00	 call	 Py_FatalError
$LN3@Py_newbits:

; 15   : 
; 16   :     ss += nbytes;

  00045	48 63 44 24 20	 movsxd	 rax, DWORD PTR nbytes$[rsp]
  0004a	48 8b 4c 24 28	 mov	 rcx, QWORD PTR ss$[rsp]
  0004f	48 03 c8	 add	 rcx, rax
  00052	48 8b c1	 mov	 rax, rcx
  00055	48 89 44 24 28	 mov	 QWORD PTR ss$[rsp], rax
$LN2@Py_newbits:

; 17   :     while (--nbytes >= 0)

  0005a	8b 44 24 20	 mov	 eax, DWORD PTR nbytes$[rsp]
  0005e	ff c8		 dec	 eax
  00060	89 44 24 20	 mov	 DWORD PTR nbytes$[rsp], eax
  00064	83 7c 24 20 00	 cmp	 DWORD PTR nbytes$[rsp], 0
  00069	7c 17		 jl	 SHORT $LN1@Py_newbits

; 18   :         *--ss = 0;

  0006b	48 8b 44 24 28	 mov	 rax, QWORD PTR ss$[rsp]
  00070	48 ff c8	 dec	 rax
  00073	48 89 44 24 28	 mov	 QWORD PTR ss$[rsp], rax
  00078	48 8b 44 24 28	 mov	 rax, QWORD PTR ss$[rsp]
  0007d	c6 00 00	 mov	 BYTE PTR [rax], 0
  00080	eb d8		 jmp	 SHORT $LN2@Py_newbits
$LN1@Py_newbits:

; 19   :     return ss;

  00082	48 8b 44 24 28	 mov	 rax, QWORD PTR ss$[rsp]

; 20   : }

  00087	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0008b	c3		 ret	 0
_Py_newbitset ENDP
_TEXT	ENDS
PUBLIC	_Py_delbitset
EXTRN	_PyObject_DebugFree:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_delbitset DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$_Py_delbitset
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_delbitset DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _Py_delbitset
_TEXT	SEGMENT
ss$ = 48
_Py_delbitset PROC					; COMDAT

; 24   : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 25   :     PyObject_FREE(ss);

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR ss$[rsp]
  0000e	e8 00 00 00 00	 call	 _PyObject_DebugFree

; 26   : }

  00013	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00017	c3		 ret	 0
_Py_delbitset ENDP
_TEXT	ENDS
PUBLIC	_Py_addbit
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_addbit DD imagerel $LN4
	DD	imagerel $LN4+142
	DD	imagerel $unwind$_Py_addbit
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_addbit DD 010d01H
	DD	0220dH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _Py_addbit
_TEXT	SEGMENT
mask$ = 0
ibyte$ = 4
tv95 = 8
ss$ = 32
ibit$ = 40
_Py_addbit PROC						; COMDAT

; 30   : {

$LN4:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 18	 sub	 rsp, 24

; 31   :     int ibyte = BIT2BYTE(ibit);

  0000d	48 63 44 24 28	 movsxd	 rax, DWORD PTR ibit$[rsp]
  00012	33 d2		 xor	 edx, edx
  00014	b9 08 00 00 00	 mov	 ecx, 8
  00019	48 f7 f1	 div	 rcx
  0001c	89 44 24 04	 mov	 DWORD PTR ibyte$[rsp], eax

; 32   :     BYTE mask = BIT2MASK(ibit);

  00020	48 63 44 24 28	 movsxd	 rax, DWORD PTR ibit$[rsp]
  00025	33 d2		 xor	 edx, edx
  00027	b9 08 00 00 00	 mov	 ecx, 8
  0002c	48 f7 f1	 div	 rcx
  0002f	48 8b c2	 mov	 rax, rdx
  00032	b9 01 00 00 00	 mov	 ecx, 1
  00037	89 4c 24 08	 mov	 DWORD PTR tv95[rsp], ecx
  0003b	0f b6 c8	 movzx	 ecx, al
  0003e	8b 44 24 08	 mov	 eax, DWORD PTR tv95[rsp]
  00042	d3 e0		 shl	 eax, cl
  00044	88 04 24	 mov	 BYTE PTR mask$[rsp], al

; 33   : 
; 34   :     if (ss[ibyte] & mask)

  00047	48 63 44 24 04	 movsxd	 rax, DWORD PTR ibyte$[rsp]
  0004c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR ss$[rsp]
  00051	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  00055	0f be 0c 24	 movsx	 ecx, BYTE PTR mask$[rsp]
  00059	23 c1		 and	 eax, ecx
  0005b	85 c0		 test	 eax, eax
  0005d	74 04		 je	 SHORT $LN1@Py_addbit

; 35   :         return 0; /* Bit already set */

  0005f	33 c0		 xor	 eax, eax
  00061	eb 26		 jmp	 SHORT $LN2@Py_addbit
$LN1@Py_addbit:

; 36   :     ss[ibyte] |= mask;

  00063	48 63 44 24 04	 movsxd	 rax, DWORD PTR ibyte$[rsp]
  00068	0f be 0c 24	 movsx	 ecx, BYTE PTR mask$[rsp]
  0006c	48 8b 54 24 20	 mov	 rdx, QWORD PTR ss$[rsp]
  00071	0f be 04 02	 movsx	 eax, BYTE PTR [rdx+rax]
  00075	0b c1		 or	 eax, ecx
  00077	48 63 4c 24 04	 movsxd	 rcx, DWORD PTR ibyte$[rsp]
  0007c	48 8b 54 24 20	 mov	 rdx, QWORD PTR ss$[rsp]
  00081	88 04 0a	 mov	 BYTE PTR [rdx+rcx], al

; 37   :     return 1;

  00084	b8 01 00 00 00	 mov	 eax, 1
$LN2@Py_addbit:

; 38   : }

  00089	48 83 c4 18	 add	 rsp, 24
  0008d	c3		 ret	 0
_Py_addbit ENDP
_TEXT	ENDS
PUBLIC	_Py_samebitset
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_samebitset DD imagerel $LN6
	DD	imagerel $LN6+117
	DD	imagerel $unwind$_Py_samebitset
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_samebitset DD 011301H
	DD	02213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _Py_samebitset
_TEXT	SEGMENT
i$ = 0
ss1$ = 32
ss2$ = 40
nbits$ = 48
_Py_samebitset PROC					; COMDAT

; 50   : {

$LN6:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 18	 sub	 rsp, 24

; 51   :     int i;
; 52   : 
; 53   :     for (i = NBYTES(nbits); --i >= 0; )

  00013	48 63 44 24 30	 movsxd	 rax, DWORD PTR nbits$[rsp]
  00018	48 83 c0 07	 add	 rax, 7
  0001c	33 d2		 xor	 edx, edx
  0001e	b9 08 00 00 00	 mov	 ecx, 8
  00023	48 f7 f1	 div	 rcx
  00026	89 04 24	 mov	 DWORD PTR i$[rsp], eax
$LN3@Py_samebit:
  00029	8b 04 24	 mov	 eax, DWORD PTR i$[rsp]
  0002c	ff c8		 dec	 eax
  0002e	89 04 24	 mov	 DWORD PTR i$[rsp], eax
  00031	83 3c 24 00	 cmp	 DWORD PTR i$[rsp], 0
  00035	7c 34		 jl	 SHORT $LN2@Py_samebit

; 54   :         if (*ss1++ != *ss2++)

  00037	48 8b 44 24 28	 mov	 rax, QWORD PTR ss2$[rsp]
  0003c	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0003f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR ss1$[rsp]
  00044	0f be 09	 movsx	 ecx, BYTE PTR [rcx]
  00047	48 8b 54 24 28	 mov	 rdx, QWORD PTR ss2$[rsp]
  0004c	48 ff c2	 inc	 rdx
  0004f	48 89 54 24 28	 mov	 QWORD PTR ss2$[rsp], rdx
  00054	48 8b 54 24 20	 mov	 rdx, QWORD PTR ss1$[rsp]
  00059	48 ff c2	 inc	 rdx
  0005c	48 89 54 24 20	 mov	 QWORD PTR ss1$[rsp], rdx
  00061	3b c8		 cmp	 ecx, eax
  00063	74 04		 je	 SHORT $LN1@Py_samebit

; 55   :             return 0;

  00065	33 c0		 xor	 eax, eax
  00067	eb 07		 jmp	 SHORT $LN4@Py_samebit
$LN1@Py_samebit:

; 56   :     return 1;

  00069	eb be		 jmp	 SHORT $LN3@Py_samebit
$LN2@Py_samebit:
  0006b	b8 01 00 00 00	 mov	 eax, 1
$LN4@Py_samebit:

; 57   : }

  00070	48 83 c4 18	 add	 rsp, 24
  00074	c3		 ret	 0
_Py_samebitset ENDP
_TEXT	ENDS
PUBLIC	_Py_mergebitset
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_mergebitset DD imagerel $LN5
	DD	imagerel $LN5+115
	DD	imagerel $unwind$_Py_mergebitset
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_mergebitset DD 011301H
	DD	02213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _Py_mergebitset
_TEXT	SEGMENT
i$ = 0
ss1$ = 32
ss2$ = 40
nbits$ = 48
_Py_mergebitset PROC					; COMDAT

; 61   : {

$LN5:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 18	 sub	 rsp, 24

; 62   :     int i;
; 63   : 
; 64   :     for (i = NBYTES(nbits); --i >= 0; )

  00013	48 63 44 24 30	 movsxd	 rax, DWORD PTR nbits$[rsp]
  00018	48 83 c0 07	 add	 rax, 7
  0001c	33 d2		 xor	 edx, edx
  0001e	b9 08 00 00 00	 mov	 ecx, 8
  00023	48 f7 f1	 div	 rcx
  00026	89 04 24	 mov	 DWORD PTR i$[rsp], eax
$LN2@Py_mergebi:
  00029	8b 04 24	 mov	 eax, DWORD PTR i$[rsp]
  0002c	ff c8		 dec	 eax
  0002e	89 04 24	 mov	 DWORD PTR i$[rsp], eax
  00031	83 3c 24 00	 cmp	 DWORD PTR i$[rsp], 0
  00035	7c 37		 jl	 SHORT $LN1@Py_mergebi

; 65   :         *ss1++ |= *ss2++;

  00037	48 8b 44 24 28	 mov	 rax, QWORD PTR ss2$[rsp]
  0003c	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0003f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR ss1$[rsp]
  00044	0f be 09	 movsx	 ecx, BYTE PTR [rcx]
  00047	0b c8		 or	 ecx, eax
  00049	8b c1		 mov	 eax, ecx
  0004b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR ss1$[rsp]
  00050	88 01		 mov	 BYTE PTR [rcx], al
  00052	48 8b 44 24 28	 mov	 rax, QWORD PTR ss2$[rsp]
  00057	48 ff c0	 inc	 rax
  0005a	48 89 44 24 28	 mov	 QWORD PTR ss2$[rsp], rax
  0005f	48 8b 44 24 20	 mov	 rax, QWORD PTR ss1$[rsp]
  00064	48 ff c0	 inc	 rax
  00067	48 89 44 24 20	 mov	 QWORD PTR ss1$[rsp], rax
  0006c	eb bb		 jmp	 SHORT $LN2@Py_mergebi
$LN1@Py_mergebi:

; 66   : }

  0006e	48 83 c4 18	 add	 rsp, 24
  00072	c3		 ret	 0
_Py_mergebitset ENDP
_TEXT	ENDS
END
