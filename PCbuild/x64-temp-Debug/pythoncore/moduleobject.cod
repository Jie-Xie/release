; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_06BIEEJMKO@module?$AA@			; `string'
PUBLIC	??_C@_0DD@FIMFNFNK@__dir__?$CI?$CJ?5?9?$DO?5list?6specialized?5di@ ; `string'
PUBLIC	??_C@_07FPPEEAND@__dir__?$AA@			; `string'
PUBLIC	??_C@_03GHKEPEMO@doc?$AA@			; `string'
PUBLIC	??_C@_04MEMAJGDJ@name?$AA@			; `string'
PUBLIC	??_C@_09LGFMJFFD@moduledef?$AA@			; `string'
PUBLIC	??_C@_08IBFKALI@__dict__?$AA@			; `string'
PUBLIC	PyModule_Type
EXTRN	PyObject_GC_Del:PROC
EXTRN	PyType_GenericNew:PROC
EXTRN	PyType_GenericAlloc:PROC
EXTRN	PyObject_GenericSetAttr:PROC
EXTRN	PyObject_GenericGetAttr:PROC
EXTRN	PyType_Type:BYTE
;	COMDAT ??_C@_06BIEEJMKO@module?$AA@
CONST	SEGMENT
??_C@_06BIEEJMKO@module?$AA@ DB 'module', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@FIMFNFNK@__dir__?$CI?$CJ?5?9?$DO?5list?6specialized?5di@
CONST	SEGMENT
??_C@_0DD@FIMFNFNK@__dir__?$CI?$CJ?5?9?$DO?5list?6specialized?5di@ DB '__'
	DB	'dir__() -> list', 0aH, 'specialized dir() implementation', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07FPPEEAND@__dir__?$AA@
CONST	SEGMENT
??_C@_07FPPEEAND@__dir__?$AA@ DB '__dir__', 00H		; `string'
CONST	ENDS
_TLS	SEGMENT
?PyId___dict__@?1??module_dir@@9@9 DQ 0000000000000000H	; `module_dir'::`2'::PyId___dict__
	DQ	FLAT:??_C@_08IBFKALI@__dict__?$AA@
	DQ	0000000000000000H
_TLS	ENDS
;	COMDAT ??_C@_03GHKEPEMO@doc?$AA@
CONST	SEGMENT
??_C@_03GHKEPEMO@doc?$AA@ DB 'doc', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04MEMAJGDJ@name?$AA@
CONST	SEGMENT
??_C@_04MEMAJGDJ@name?$AA@ DB 'name', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09LGFMJFFD@moduledef?$AA@
CONST	SEGMENT
??_C@_09LGFMJFFD@moduledef?$AA@ DB 'moduledef', 00H	; `string'
CONST	ENDS
_DATA	SEGMENT
module_members DQ FLAT:??_C@_08IBFKALI@__dict__?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000060H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	0000000000000000H
	ORG $+32
moduledef_type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_09LGFMJFFD@moduledef?$AA@
	DQ	00000000000000c0H
	DQ	0000000000000000H
	ORG $+344
?kwlist@?1??module_init@@9@9 DQ FLAT:??_C@_04MEMAJGDJ@name?$AA@ ; `module_init'::`2'::kwlist
	DQ	FLAT:??_C@_03GHKEPEMO@doc?$AA@
	DQ	0000000000000000H
	ORG $+8
module_methods DQ FLAT:??_C@_07FPPEEAND@__dir__?$AA@
	DQ	FLAT:module_dir
	DD	04H
	ORG $+4
	DQ	FLAT:??_C@_0DD@FIMFNFNK@__dir__?$CI?$CJ?5?9?$DO?5list?6specialized?5di@
	DQ	0000000000000000H
	ORG $+24
module_doc DB	'module(name[, doc])', 0aH, 0aH, 'Create a module object.'
	DB	0aH, 'The name must be a string; the optional doc argument can'
	DB	' have any type.', 00H
	ORG $+11
PyModule_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_06BIEEJMKO@module?$AA@
	DQ	0000000000000080H
	DQ	0000000000000000H
	DQ	FLAT:module_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:module_repr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	FLAT:PyObject_GenericSetAttr
	DQ	0000000000000000H
	DD	044400H
	ORG $+4
	DQ	FLAT:module_doc
	DQ	FLAT:module_traverse
	DQ	FLAT:module_clear
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:module_methods
	DQ	FLAT:module_members
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000060H
	DQ	FLAT:module_init
	DQ	FLAT:PyType_GenericAlloc
	DQ	FLAT:PyType_GenericNew
	DQ	FLAT:PyObject_GC_Del
	ORG $+64
_DATA	ENDS
;	COMDAT ??_C@_08IBFKALI@__dict__?$AA@
CONST	SEGMENT
??_C@_08IBFKALI@__dict__?$AA@ DB '__dict__', 00H	; `string'
CONST	ENDS
PUBLIC	_Py_DecRef
PUBLIC	??_C@_0M@PFIGCCLC@__package__?$AA@		; `string'
PUBLIC	??_C@_07DIBBIFIJ@__doc__?$AA@			; `string'
PUBLIC	??_C@_08BHKDPDAA@__name__?$AA@			; `string'
PUBLIC	PyModule_NewObject
EXTRN	PyObject_GC_Track:PROC
EXTRN	_Py_NoneStruct:BYTE
EXTRN	PyDict_SetItemString:PROC
EXTRN	PyDict_New:PROC
EXTRN	_PyObject_GC_New:PROC
EXTRN	_PxObject_New:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\objects\moduleobject.c
pdata	SEGMENT
$pdata$PyModule_NewObject DD imagerel $LN10
	DD	imagerel $LN10+267
	DD	imagerel $unwind$PyModule_NewObject
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyModule_NewObject DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0M@PFIGCCLC@__package__?$AA@
CONST	SEGMENT
??_C@_0M@PFIGCCLC@__package__?$AA@ DB '__package__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DIBBIFIJ@__doc__?$AA@
CONST	SEGMENT
??_C@_07DIBBIFIJ@__doc__?$AA@ DB '__doc__', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08BHKDPDAA@__name__?$AA@
CONST	SEGMENT
??_C@_08BHKDPDAA@__name__?$AA@ DB '__name__', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyModule_NewObject
_TEXT	SEGMENT
m$ = 32
tv70 = 40
name$ = 64
PyModule_NewObject PROC					; COMDAT

; 31   : {

$LN10:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 32   :     PyModuleObject *m;
; 33   :     m = PyObject_GC_New(PyModuleObject, &PyModule_Type);

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	74 13		 je	 SHORT $LN8@PyModule_N
  00012	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyModule_Type
  00019	e8 00 00 00 00	 call	 _PxObject_New
  0001e	48 89 44 24 28	 mov	 QWORD PTR tv70[rsp], rax
  00023	eb 11		 jmp	 SHORT $LN9@PyModule_N
$LN8@PyModule_N:
  00025	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyModule_Type
  0002c	e8 00 00 00 00	 call	 _PyObject_GC_New
  00031	48 89 44 24 28	 mov	 QWORD PTR tv70[rsp], rax
$LN9@PyModule_N:
  00036	48 8b 44 24 28	 mov	 rax, QWORD PTR tv70[rsp]
  0003b	48 89 44 24 20	 mov	 QWORD PTR m$[rsp], rax

; 34   :     if (m == NULL)

  00040	48 83 7c 24 20
	00		 cmp	 QWORD PTR m$[rsp], 0
  00046	75 07		 jne	 SHORT $LN5@PyModule_N

; 35   :         return NULL;

  00048	33 c0		 xor	 eax, eax
  0004a	e9 b7 00 00 00	 jmp	 $LN6@PyModule_N
$LN5@PyModule_N:

; 36   :     m->md_def = NULL;

  0004f	48 8b 44 24 20	 mov	 rax, QWORD PTR m$[rsp]
  00054	48 c7 40 68 00
	00 00 00	 mov	 QWORD PTR [rax+104], 0

; 37   :     m->md_state = NULL;

  0005c	48 8b 44 24 20	 mov	 rax, QWORD PTR m$[rsp]
  00061	48 c7 40 70 00
	00 00 00	 mov	 QWORD PTR [rax+112], 0

; 38   :     m->md_dict = PyDict_New();

  00069	e8 00 00 00 00	 call	 PyDict_New
  0006e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR m$[rsp]
  00073	48 89 41 60	 mov	 QWORD PTR [rcx+96], rax

; 39   :     if (m->md_dict == NULL)

  00077	48 8b 44 24 20	 mov	 rax, QWORD PTR m$[rsp]
  0007c	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00081	75 02		 jne	 SHORT $LN4@PyModule_N

; 40   :         goto fail;

  00083	eb 75		 jmp	 SHORT $fail$20366
$LN4@PyModule_N:

; 41   :     if (PyDict_SetItemString(m->md_dict, "__name__", name) != 0)

  00085	4c 8b 44 24 40	 mov	 r8, QWORD PTR name$[rsp]
  0008a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08BHKDPDAA@__name__?$AA@
  00091	48 8b 44 24 20	 mov	 rax, QWORD PTR m$[rsp]
  00096	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  0009a	e8 00 00 00 00	 call	 PyDict_SetItemString
  0009f	85 c0		 test	 eax, eax
  000a1	74 02		 je	 SHORT $LN3@PyModule_N

; 42   :         goto fail;

  000a3	eb 55		 jmp	 SHORT $fail$20366
$LN3@PyModule_N:

; 43   :     if (PyDict_SetItemString(m->md_dict, "__doc__", Py_None) != 0)

  000a5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:_Py_NoneStruct
  000ac	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07DIBBIFIJ@__doc__?$AA@
  000b3	48 8b 44 24 20	 mov	 rax, QWORD PTR m$[rsp]
  000b8	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  000bc	e8 00 00 00 00	 call	 PyDict_SetItemString
  000c1	85 c0		 test	 eax, eax
  000c3	74 02		 je	 SHORT $LN2@PyModule_N

; 44   :         goto fail;

  000c5	eb 33		 jmp	 SHORT $fail$20366
$LN2@PyModule_N:

; 45   :     if (PyDict_SetItemString(m->md_dict, "__package__", Py_None) != 0)

  000c7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:_Py_NoneStruct
  000ce	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@PFIGCCLC@__package__?$AA@
  000d5	48 8b 44 24 20	 mov	 rax, QWORD PTR m$[rsp]
  000da	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  000de	e8 00 00 00 00	 call	 PyDict_SetItemString
  000e3	85 c0		 test	 eax, eax
  000e5	74 02		 je	 SHORT $LN1@PyModule_N

; 46   :         goto fail;

  000e7	eb 11		 jmp	 SHORT $fail$20366
$LN1@PyModule_N:

; 47   :     PyObject_GC_Track(m);

  000e9	48 8b 4c 24 20	 mov	 rcx, QWORD PTR m$[rsp]
  000ee	e8 00 00 00 00	 call	 PyObject_GC_Track

; 48   :     return (PyObject *)m;

  000f3	48 8b 44 24 20	 mov	 rax, QWORD PTR m$[rsp]
  000f8	eb 0c		 jmp	 SHORT $LN6@PyModule_N
$fail$20366:

; 49   : 
; 50   :  fail:
; 51   :     Py_DECREF(m);

  000fa	48 8b 4c 24 20	 mov	 rcx, QWORD PTR m$[rsp]
  000ff	e8 00 00 00 00	 call	 _Py_DecRef

; 52   :     return NULL;

  00104	33 c0		 xor	 eax, eax
$LN6@PyModule_N:

; 53   : }

  00106	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0010a	c3		 ret	 0
PyModule_NewObject ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
EXTRN	_Py_Dealloc:PROC
EXTRN	_Py_NegativeRefcount:PROC
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_RefTotal:QWORD
EXTRN	Px_DecRef:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN13
	DD	imagerel $LN13+257
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
tv81 = 48
op$ = 80
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN13:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	0f 85 e6 00 00
	00		 jne	 $LN8@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00016	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0001b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0001f	48 83 e0 20	 and	 rax, 32			; 00000020H
  00023	48 85 c0	 test	 rax, rax
  00026	75 14		 jne	 SHORT $LN6@Py_DecRef
  00028	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0002d	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00031	48 25 80 00 00
	00		 and	 rax, 128		; 00000080H
  00037	48 85 c0	 test	 rax, rax
  0003a	74 0f		 je	 SHORT $LN7@Py_DecRef
$LN6@Py_DecRef:

; 926  :             Px_DECREF(op);

  0003c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  00041	e8 00 00 00 00	 call	 Px_DecRef
  00046	e9 b1 00 00 00	 jmp	 $LN5@Py_DecRef
$LN7@Py_DecRef:

; 927  :         else if (!Px_ISPX(op)) {

  0004b	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00050	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00054	48 83 e0 02	 and	 rax, 2
  00058	48 85 c0	 test	 rax, rax
  0005b	0f 85 9b 00 00
	00		 jne	 $LN4@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;

  00061	e8 00 00 00 00	 call	 _Py_PXCTX
  00066	85 c0		 test	 eax, eax
  00068	74 02		 je	 SHORT $LN11@Py_DecRef
  0006a	eb 11		 jmp	 SHORT $LN12@Py_DecRef
$LN11@Py_DecRef:
  0006c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00073	48 ff c8	 dec	 rax
  00076	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN12@Py_DecRef:

; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  0007d	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00082	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00086	48 ff c8	 dec	 rax
  00089	48 89 44 24 30	 mov	 QWORD PTR tv81[rsp], rax
  0008e	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00093	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv81[rsp]
  00098	48 89 48 50	 mov	 QWORD PTR [rax+80], rcx
  0009c	48 83 7c 24 30
	00		 cmp	 QWORD PTR tv81[rsp], 0
  000a2	74 4e		 je	 SHORT $LN3@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);

  000a4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000ac	4c 8b 4c 24 50	 mov	 r9, QWORD PTR op$[rsp]
  000b1	41 b8 a2 03 00
	00		 mov	 r8d, 930		; 000003a2H
  000b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000c5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ca	85 c0		 test	 eax, eax
  000cc	75 22		 jne	 SHORT $LN2@Py_DecRef
  000ce	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  000d3	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000d8	7d 16		 jge	 SHORT $LN2@Py_DecRef
  000da	4c 8b 44 24 50	 mov	 r8, QWORD PTR op$[rsp]
  000df	ba a2 03 00 00	 mov	 edx, 930		; 000003a2H
  000e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000eb	e8 00 00 00 00	 call	 _Py_NegativeRefcount
$LN2@Py_DecRef:

; 931  :             } else

  000f0	eb 0a		 jmp	 SHORT $LN1@Py_DecRef
$LN3@Py_DecRef:

; 932  :                 _Py_Dealloc((PyObject *)(op));

  000f2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  000f7	e8 00 00 00 00	 call	 _Py_Dealloc
$LN1@Py_DecRef:
$LN4@Py_DecRef:
$LN5@Py_DecRef:
$LN8@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  000fc	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00100	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
PUBLIC	PyModule_New
EXTRN	PyUnicode_FromString:PROC
;	COMDAT pdata
; File c:\src\pyparallel\objects\moduleobject.c
pdata	SEGMENT
$pdata$PyModule_New DD imagerel $LN4
	DD	imagerel $LN4+71
	DD	imagerel $unwind$PyModule_New
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyModule_New DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyModule_New
_TEXT	SEGMENT
nameobj$ = 32
module$ = 40
name$ = 64
PyModule_New PROC					; COMDAT

; 57   : {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 58   :     PyObject *nameobj, *module;
; 59   :     nameobj = PyUnicode_FromString(name);

  00009	48 8b 4c 24 40	 mov	 rcx, QWORD PTR name$[rsp]
  0000e	e8 00 00 00 00	 call	 PyUnicode_FromString
  00013	48 89 44 24 20	 mov	 QWORD PTR nameobj$[rsp], rax

; 60   :     if (nameobj == NULL)

  00018	48 83 7c 24 20
	00		 cmp	 QWORD PTR nameobj$[rsp], 0
  0001e	75 04		 jne	 SHORT $LN1@PyModule_N@2

; 61   :         return NULL;

  00020	33 c0		 xor	 eax, eax
  00022	eb 1e		 jmp	 SHORT $LN2@PyModule_N@2
$LN1@PyModule_N@2:

; 62   :     module = PyModule_NewObject(nameobj);

  00024	48 8b 4c 24 20	 mov	 rcx, QWORD PTR nameobj$[rsp]
  00029	e8 00 00 00 00	 call	 PyModule_NewObject
  0002e	48 89 44 24 28	 mov	 QWORD PTR module$[rsp], rax

; 63   :     Py_DECREF(nameobj);

  00033	48 8b 4c 24 20	 mov	 rcx, QWORD PTR nameobj$[rsp]
  00038	e8 00 00 00 00	 call	 _Py_DecRef

; 64   :     return module;

  0003d	48 8b 44 24 28	 mov	 rax, QWORD PTR module$[rsp]
$LN2@PyModule_N@2:

; 65   : }

  00042	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00046	c3		 ret	 0
PyModule_New ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DG@BDKONPND@module?5functions?5cannot?5set?5METH@ ; `string'
PUBLIC	PyModule_GetDict
PUBLIC	??_C@_0GP@JPBGHDL@Python?5C?5API?5version?5mismatch?5fo@ ; `string'
PUBLIC	??_C@_0CI@BIPFLKPK@Python?5import?5machinery?5not?5init@ ; `string'
PUBLIC	PyModule_Create2TraceRefs
EXTRN	PyCFunction_NewEx:PROC
EXTRN	PyErr_SetString:PROC
EXTRN	PyExc_ValueError:QWORD
EXTRN	memset:PROC
EXTRN	PyErr_NoMemory:PROC
EXTRN	_PyMem_DebugMalloc:PROC
EXTRN	_PxMem_Malloc:PROC
EXTRN	strcmp:PROC
EXTRN	__imp_strrchr:PROC
EXTRN	_Py_PackageContext:QWORD
EXTRN	PyErr_WarnFormat:PROC
EXTRN	PyExc_RuntimeWarning:QWORD
EXTRN	PyType_Ready:PROC
EXTRN	Py_FatalError:PROC
EXTRN	PyThreadState_Get:PROC
_BSS	SEGMENT
max_module_number DQ 01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyModule_Create2TraceRefs DD imagerel $LN31
	DD	imagerel $LN31+1099
	DD	imagerel $unwind$PyModule_Create2TraceRefs
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyModule_Create2TraceRefs DD 021001H
	DD	0130110H
xdata	ENDS
;	COMDAT ??_C@_0DG@BDKONPND@module?5functions?5cannot?5set?5METH@
CONST	SEGMENT
??_C@_0DG@BDKONPND@module?5functions?5cannot?5set?5METH@ DB 'module funct'
	DB	'ions cannot set METH_CLASS or METH_STATIC', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GP@JPBGHDL@Python?5C?5API?5version?5mismatch?5fo@
CONST	SEGMENT
??_C@_0GP@JPBGHDL@Python?5C?5API?5version?5mismatch?5fo@ DB 'Python C API'
	DB	' version mismatch for module %.100s: This Python has API vers'
	DB	'ion %d, module %.100s has version %d.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@BIPFLKPK@Python?5import?5machinery?5not?5init@
CONST	SEGMENT
??_C@_0CI@BIPFLKPK@Python?5import?5machinery?5not?5init@ DB 'Python impor'
	DB	't machinery not initialized', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyModule_Create2TraceRefs
_TEXT	SEGMENT
v$ = 64
ml$ = 72
n$ = 80
name$ = 88
interp$ = 96
d$ = 104
m$ = 112
err$20406 = 120
p$20412 = 128
tv147 = 136
module$ = 160
module_api_version$ = 168
PyModule_Create2TraceRefs PROC				; COMDAT

; 70   : {

$LN31:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 71   :     PyObject *d, *v, *n;
; 72   :     PyMethodDef *ml;
; 73   :     const char* name;
; 74   :     PyModuleObject *m;
; 75   :     PyInterpreterState *interp = PyThreadState_Get()->interp;

  00010	e8 00 00 00 00	 call	 PyThreadState_Get
  00015	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00019	48 89 44 24 60	 mov	 QWORD PTR interp$[rsp], rax

; 76   :     if (interp->modules == NULL)

  0001e	48 8b 44 24 60	 mov	 rax, QWORD PTR interp$[rsp]
  00023	48 83 78 10 00	 cmp	 QWORD PTR [rax+16], 0
  00028	75 0c		 jne	 SHORT $LN26@PyModule_C

; 77   :         Py_FatalError("Python import machinery not initialized");

  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CI@BIPFLKPK@Python?5import?5machinery?5not?5init@
  00031	e8 00 00 00 00	 call	 Py_FatalError
$LN26@PyModule_C:

; 78   :     if (PyType_Ready(&moduledef_type) < 0)

  00036	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:moduledef_type
  0003d	e8 00 00 00 00	 call	 PyType_Ready
  00042	85 c0		 test	 eax, eax
  00044	7d 07		 jge	 SHORT $LN25@PyModule_C

; 79   :         return NULL;

  00046	33 c0		 xor	 eax, eax
  00048	e9 f6 03 00 00	 jmp	 $LN27@PyModule_C
$LN25@PyModule_C:

; 80   :     if (module->m_base.m_index == 0) {

  0004d	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR module$[rsp]
  00055	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  0005a	75 47		 jne	 SHORT $LN24@PyModule_C

; 81   :         max_module_number++;

  0005c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR max_module_number
  00063	48 ff c0	 inc	 rax
  00066	48 89 05 00 00
	00 00		 mov	 QWORD PTR max_module_number, rax

; 82   :         Py_REFCNT(module) = 1;

  0006d	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR module$[rsp]
  00075	48 c7 40 50 01
	00 00 00	 mov	 QWORD PTR [rax+80], 1

; 83   :         Py_TYPE(module) = &moduledef_type;

  0007d	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR module$[rsp]
  00085	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:moduledef_type
  0008c	48 89 48 58	 mov	 QWORD PTR [rax+88], rcx

; 84   :         module->m_base.m_index = max_module_number;

  00090	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR module$[rsp]
  00098	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR max_module_number
  0009f	48 89 48 68	 mov	 QWORD PTR [rax+104], rcx
$LN24@PyModule_C:

; 85   :     }
; 86   :     name = module->m_name;

  000a3	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR module$[rsp]
  000ab	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  000b2	48 89 44 24 58	 mov	 QWORD PTR name$[rsp], rax

; 87   :     if (module_api_version != PYTHON_API_VERSION && module_api_version != PYTHON_ABI_VERSION) {

  000b7	81 bc 24 a8 00
	00 00 f5 03 00
	00		 cmp	 DWORD PTR module_api_version$[rsp], 1013 ; 000003f5H
  000c2	74 56		 je	 SHORT $LN23@PyModule_C
  000c4	83 bc 24 a8 00
	00 00 03	 cmp	 DWORD PTR module_api_version$[rsp], 3
  000cc	74 4c		 je	 SHORT $LN23@PyModule_C

; 88   :         int err;
; 89   :         err = PyErr_WarnFormat(PyExc_RuntimeWarning, 1,
; 90   :             "Python C API version mismatch for module %.100s: "
; 91   :             "This Python has API version %d, module %.100s has version %d.",
; 92   :              name,
; 93   :              PYTHON_API_VERSION, name, module_api_version);

  000ce	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR module_api_version$[rsp]
  000d5	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  000d9	48 8b 44 24 58	 mov	 rax, QWORD PTR name$[rsp]
  000de	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000e3	c7 44 24 20 f5
	03 00 00	 mov	 DWORD PTR [rsp+32], 1013 ; 000003f5H
  000eb	4c 8b 4c 24 58	 mov	 r9, QWORD PTR name$[rsp]
  000f0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0GP@JPBGHDL@Python?5C?5API?5version?5mismatch?5fo@
  000f7	ba 01 00 00 00	 mov	 edx, 1
  000fc	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeWarning
  00103	e8 00 00 00 00	 call	 PyErr_WarnFormat
  00108	89 44 24 78	 mov	 DWORD PTR err$20406[rsp], eax

; 94   :         if (err)

  0010c	83 7c 24 78 00	 cmp	 DWORD PTR err$20406[rsp], 0
  00111	74 07		 je	 SHORT $LN22@PyModule_C

; 95   :             return NULL;

  00113	33 c0		 xor	 eax, eax
  00115	e9 29 03 00 00	 jmp	 $LN27@PyModule_C
$LN22@PyModule_C:
$LN23@PyModule_C:

; 96   :     }
; 97   :     /* Make sure name is fully qualified.
; 98   : 
; 99   :        This is a bit of a hack: when the shared library is loaded,
; 100  :        the module name is "package.module", but the module calls
; 101  :        PyModule_Create*() with just "module" for the name.  The shared
; 102  :        library loader squirrels away the true name of the module in
; 103  :        _Py_PackageContext, and PyModule_Create*() will substitute this
; 104  :        (if the name actually matches).
; 105  :     */
; 106  :     if (_Py_PackageContext != NULL) {

  0011a	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR _Py_PackageContext, 0
  00122	74 62		 je	 SHORT $LN21@PyModule_C

; 107  :         char *p = strrchr(_Py_PackageContext, '.');

  00124	ba 2e 00 00 00	 mov	 edx, 46			; 0000002eH
  00129	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR _Py_PackageContext
  00130	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strrchr
  00136	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR p$20412[rsp], rax

; 108  :         if (p != NULL && strcmp(module->m_name, p+1) == 0) {

  0013e	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR p$20412[rsp], 0
  00147	74 3d		 je	 SHORT $LN20@PyModule_C
  00149	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR p$20412[rsp]
  00151	48 ff c0	 inc	 rax
  00154	48 8b d0	 mov	 rdx, rax
  00157	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR module$[rsp]
  0015f	48 8b 88 80 00
	00 00		 mov	 rcx, QWORD PTR [rax+128]
  00166	e8 00 00 00 00	 call	 strcmp
  0016b	85 c0		 test	 eax, eax
  0016d	75 17		 jne	 SHORT $LN20@PyModule_C

; 109  :             name = _Py_PackageContext;

  0016f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_PackageContext
  00176	48 89 44 24 58	 mov	 QWORD PTR name$[rsp], rax

; 110  :             _Py_PackageContext = NULL;

  0017b	48 c7 05 00 00
	00 00 00 00 00
	00		 mov	 QWORD PTR _Py_PackageContext, 0
$LN20@PyModule_C:
$LN21@PyModule_C:

; 111  :         }
; 112  :     }
; 113  :     if ((m = (PyModuleObject*)PyModule_New(name)) == NULL)

  00186	48 8b 4c 24 58	 mov	 rcx, QWORD PTR name$[rsp]
  0018b	e8 00 00 00 00	 call	 PyModule_New
  00190	48 89 44 24 70	 mov	 QWORD PTR m$[rsp], rax
  00195	48 83 7c 24 70
	00		 cmp	 QWORD PTR m$[rsp], 0
  0019b	75 07		 jne	 SHORT $LN19@PyModule_C

; 114  :         return NULL;

  0019d	33 c0		 xor	 eax, eax
  0019f	e9 9f 02 00 00	 jmp	 $LN27@PyModule_C
$LN19@PyModule_C:

; 115  : 
; 116  :     if (module->m_size > 0) {

  001a4	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR module$[rsp]
  001ac	48 83 b8 90 00
	00 00 00	 cmp	 QWORD PTR [rax+144], 0
  001b4	0f 8e 95 00 00
	00		 jle	 $LN18@PyModule_C

; 117  :         m->md_state = PyMem_MALLOC(module->m_size);

  001ba	e8 00 00 00 00	 call	 _Py_PXCTX
  001bf	85 c0		 test	 eax, eax
  001c1	74 1e		 je	 SHORT $LN29@PyModule_C
  001c3	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR module$[rsp]
  001cb	48 8b 88 90 00
	00 00		 mov	 rcx, QWORD PTR [rax+144]
  001d2	e8 00 00 00 00	 call	 _PxMem_Malloc
  001d7	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv147[rsp], rax
  001df	eb 1c		 jmp	 SHORT $LN30@PyModule_C
$LN29@PyModule_C:
  001e1	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR module$[rsp]
  001e9	48 8b 88 90 00
	00 00		 mov	 rcx, QWORD PTR [rax+144]
  001f0	e8 00 00 00 00	 call	 _PyMem_DebugMalloc
  001f5	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv147[rsp], rax
$LN30@PyModule_C:
  001fd	48 8b 44 24 70	 mov	 rax, QWORD PTR m$[rsp]
  00202	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR tv147[rsp]
  0020a	48 89 48 70	 mov	 QWORD PTR [rax+112], rcx

; 118  :         if (!m->md_state) {

  0020e	48 8b 44 24 70	 mov	 rax, QWORD PTR m$[rsp]
  00213	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  00218	75 16		 jne	 SHORT $LN17@PyModule_C

; 119  :             PyErr_NoMemory();

  0021a	e8 00 00 00 00	 call	 PyErr_NoMemory

; 120  :             Py_DECREF(m);

  0021f	48 8b 4c 24 70	 mov	 rcx, QWORD PTR m$[rsp]
  00224	e8 00 00 00 00	 call	 _Py_DecRef

; 121  :             return NULL;

  00229	33 c0		 xor	 eax, eax
  0022b	e9 13 02 00 00	 jmp	 $LN27@PyModule_C
$LN17@PyModule_C:

; 122  :         }
; 123  :         memset(m->md_state, 0, module->m_size);

  00230	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR module$[rsp]
  00238	4c 8b 80 90 00
	00 00		 mov	 r8, QWORD PTR [rax+144]
  0023f	33 d2		 xor	 edx, edx
  00241	48 8b 44 24 70	 mov	 rax, QWORD PTR m$[rsp]
  00246	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  0024a	e8 00 00 00 00	 call	 memset
$LN18@PyModule_C:

; 124  :     }
; 125  : 
; 126  :     d = PyModule_GetDict((PyObject*)m);

  0024f	48 8b 4c 24 70	 mov	 rcx, QWORD PTR m$[rsp]
  00254	e8 00 00 00 00	 call	 PyModule_GetDict
  00259	48 89 44 24 68	 mov	 QWORD PTR d$[rsp], rax

; 127  :     if (module->m_methods != NULL) {

  0025e	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR module$[rsp]
  00266	48 83 b8 98 00
	00 00 00	 cmp	 QWORD PTR [rax+152], 0
  0026e	0f 84 3c 01 00
	00		 je	 $LN16@PyModule_C

; 128  :         n = PyUnicode_FromString(name);

  00274	48 8b 4c 24 58	 mov	 rcx, QWORD PTR name$[rsp]
  00279	e8 00 00 00 00	 call	 PyUnicode_FromString
  0027e	48 89 44 24 50	 mov	 QWORD PTR n$[rsp], rax

; 129  :         if (n == NULL) {

  00283	48 83 7c 24 50
	00		 cmp	 QWORD PTR n$[rsp], 0
  00289	75 11		 jne	 SHORT $LN15@PyModule_C

; 130  :             Py_DECREF(m);

  0028b	48 8b 4c 24 70	 mov	 rcx, QWORD PTR m$[rsp]
  00290	e8 00 00 00 00	 call	 _Py_DecRef

; 131  :             return NULL;

  00295	33 c0		 xor	 eax, eax
  00297	e9 a7 01 00 00	 jmp	 $LN27@PyModule_C
$LN15@PyModule_C:

; 132  :         }
; 133  :         for (ml = module->m_methods; ml->ml_name != NULL; ml++) {

  0029c	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR module$[rsp]
  002a4	48 8b 80 98 00
	00 00		 mov	 rax, QWORD PTR [rax+152]
  002ab	48 89 44 24 48	 mov	 QWORD PTR ml$[rsp], rax
  002b0	eb 0e		 jmp	 SHORT $LN14@PyModule_C
$LN13@PyModule_C:
  002b2	48 8b 44 24 48	 mov	 rax, QWORD PTR ml$[rsp]
  002b7	48 83 c0 20	 add	 rax, 32			; 00000020H
  002bb	48 89 44 24 48	 mov	 QWORD PTR ml$[rsp], rax
$LN14@PyModule_C:
  002c0	48 8b 44 24 48	 mov	 rax, QWORD PTR ml$[rsp]
  002c5	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  002c9	0f 84 d7 00 00
	00		 je	 $LN12@PyModule_C

; 134  :             if ((ml->ml_flags & METH_CLASS) ||
; 135  :                 (ml->ml_flags & METH_STATIC)) {

  002cf	48 8b 44 24 48	 mov	 rax, QWORD PTR ml$[rsp]
  002d4	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
  002d7	83 e0 10	 and	 eax, 16
  002da	85 c0		 test	 eax, eax
  002dc	75 0f		 jne	 SHORT $LN10@PyModule_C
  002de	48 8b 44 24 48	 mov	 rax, QWORD PTR ml$[rsp]
  002e3	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
  002e6	83 e0 20	 and	 eax, 32			; 00000020H
  002e9	85 c0		 test	 eax, eax
  002eb	74 2e		 je	 SHORT $LN11@PyModule_C
$LN10@PyModule_C:

; 136  :                 PyErr_SetString(PyExc_ValueError,
; 137  :                                 "module functions cannot set"
; 138  :                                 " METH_CLASS or METH_STATIC");

  002ed	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DG@BDKONPND@module?5functions?5cannot?5set?5METH@
  002f4	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  002fb	e8 00 00 00 00	 call	 PyErr_SetString

; 139  :                 Py_DECREF(n);

  00300	48 8b 4c 24 50	 mov	 rcx, QWORD PTR n$[rsp]
  00305	e8 00 00 00 00	 call	 _Py_DecRef

; 140  :                 Py_DECREF(m);

  0030a	48 8b 4c 24 70	 mov	 rcx, QWORD PTR m$[rsp]
  0030f	e8 00 00 00 00	 call	 _Py_DecRef

; 141  :                 return NULL;

  00314	33 c0		 xor	 eax, eax
  00316	e9 28 01 00 00	 jmp	 $LN27@PyModule_C
$LN11@PyModule_C:

; 142  :             }
; 143  :             v = PyCFunction_NewEx(ml, (PyObject*)m, n);

  0031b	4c 8b 44 24 50	 mov	 r8, QWORD PTR n$[rsp]
  00320	48 8b 54 24 70	 mov	 rdx, QWORD PTR m$[rsp]
  00325	48 8b 4c 24 48	 mov	 rcx, QWORD PTR ml$[rsp]
  0032a	e8 00 00 00 00	 call	 PyCFunction_NewEx
  0032f	48 89 44 24 40	 mov	 QWORD PTR v$[rsp], rax

; 144  :             if (v == NULL) {

  00334	48 83 7c 24 40
	00		 cmp	 QWORD PTR v$[rsp], 0
  0033a	75 1b		 jne	 SHORT $LN9@PyModule_C

; 145  :                 Py_DECREF(n);

  0033c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR n$[rsp]
  00341	e8 00 00 00 00	 call	 _Py_DecRef

; 146  :                 Py_DECREF(m);

  00346	48 8b 4c 24 70	 mov	 rcx, QWORD PTR m$[rsp]
  0034b	e8 00 00 00 00	 call	 _Py_DecRef

; 147  :                 return NULL;

  00350	33 c0		 xor	 eax, eax
  00352	e9 ec 00 00 00	 jmp	 $LN27@PyModule_C
$LN9@PyModule_C:

; 148  :             }
; 149  :             if (PyDict_SetItemString(d, ml->ml_name, v) != 0) {

  00357	4c 8b 44 24 40	 mov	 r8, QWORD PTR v$[rsp]
  0035c	48 8b 44 24 48	 mov	 rax, QWORD PTR ml$[rsp]
  00361	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00364	48 8b 4c 24 68	 mov	 rcx, QWORD PTR d$[rsp]
  00369	e8 00 00 00 00	 call	 PyDict_SetItemString
  0036e	85 c0		 test	 eax, eax
  00370	74 25		 je	 SHORT $LN8@PyModule_C

; 150  :                 Py_DECREF(v);

  00372	48 8b 4c 24 40	 mov	 rcx, QWORD PTR v$[rsp]
  00377	e8 00 00 00 00	 call	 _Py_DecRef

; 151  :                 Py_DECREF(n);

  0037c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR n$[rsp]
  00381	e8 00 00 00 00	 call	 _Py_DecRef

; 152  :                 Py_DECREF(m);

  00386	48 8b 4c 24 70	 mov	 rcx, QWORD PTR m$[rsp]
  0038b	e8 00 00 00 00	 call	 _Py_DecRef

; 153  :                 return NULL;

  00390	33 c0		 xor	 eax, eax
  00392	e9 ac 00 00 00	 jmp	 $LN27@PyModule_C
$LN8@PyModule_C:

; 154  :             }
; 155  :             Py_DECREF(v);

  00397	48 8b 4c 24 40	 mov	 rcx, QWORD PTR v$[rsp]
  0039c	e8 00 00 00 00	 call	 _Py_DecRef

; 156  :         }

  003a1	e9 0c ff ff ff	 jmp	 $LN13@PyModule_C
$LN12@PyModule_C:

; 157  :         Py_DECREF(n);

  003a6	48 8b 4c 24 50	 mov	 rcx, QWORD PTR n$[rsp]
  003ab	e8 00 00 00 00	 call	 _Py_DecRef
$LN16@PyModule_C:

; 158  :     }
; 159  :     if (module->m_doc != NULL) {

  003b0	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR module$[rsp]
  003b8	48 83 b8 88 00
	00 00 00	 cmp	 QWORD PTR [rax+136], 0
  003c0	74 6b		 je	 SHORT $LN7@PyModule_C

; 160  :         v = PyUnicode_FromString(module->m_doc);

  003c2	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR module$[rsp]
  003ca	48 8b 88 88 00
	00 00		 mov	 rcx, QWORD PTR [rax+136]
  003d1	e8 00 00 00 00	 call	 PyUnicode_FromString
  003d6	48 89 44 24 40	 mov	 QWORD PTR v$[rsp], rax

; 161  :         if (v == NULL || PyDict_SetItemString(d, "__doc__", v) != 0) {

  003db	48 83 7c 24 40
	00		 cmp	 QWORD PTR v$[rsp], 0
  003e1	74 1a		 je	 SHORT $LN5@PyModule_C
  003e3	4c 8b 44 24 40	 mov	 r8, QWORD PTR v$[rsp]
  003e8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07DIBBIFIJ@__doc__?$AA@
  003ef	48 8b 4c 24 68	 mov	 rcx, QWORD PTR d$[rsp]
  003f4	e8 00 00 00 00	 call	 PyDict_SetItemString
  003f9	85 c0		 test	 eax, eax
  003fb	74 26		 je	 SHORT $LN6@PyModule_C
$LN5@PyModule_C:
$LN4@PyModule_C:

; 162  :             Py_XDECREF(v);

  003fd	48 83 7c 24 40
	00		 cmp	 QWORD PTR v$[rsp], 0
  00403	74 0a		 je	 SHORT $LN1@PyModule_C
  00405	48 8b 4c 24 40	 mov	 rcx, QWORD PTR v$[rsp]
  0040a	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@PyModule_C:
  0040f	33 c0		 xor	 eax, eax
  00411	85 c0		 test	 eax, eax
  00413	75 e8		 jne	 SHORT $LN4@PyModule_C

; 163  :             Py_DECREF(m);

  00415	48 8b 4c 24 70	 mov	 rcx, QWORD PTR m$[rsp]
  0041a	e8 00 00 00 00	 call	 _Py_DecRef

; 164  :             return NULL;

  0041f	33 c0		 xor	 eax, eax
  00421	eb 20		 jmp	 SHORT $LN27@PyModule_C
$LN6@PyModule_C:

; 165  :         }
; 166  :         Py_DECREF(v);

  00423	48 8b 4c 24 40	 mov	 rcx, QWORD PTR v$[rsp]
  00428	e8 00 00 00 00	 call	 _Py_DecRef
$LN7@PyModule_C:

; 167  :     }
; 168  :     m->md_def = module;

  0042d	48 8b 44 24 70	 mov	 rax, QWORD PTR m$[rsp]
  00432	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR module$[rsp]
  0043a	48 89 48 68	 mov	 QWORD PTR [rax+104], rcx

; 169  :     return (PyObject*)m;

  0043e	48 8b 44 24 70	 mov	 rax, QWORD PTR m$[rsp]
$LN27@PyModule_C:

; 170  : }

  00443	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  0044a	c3		 ret	 0
PyModule_Create2TraceRefs ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BK@BABLDALH@?4?4?2Objects?2moduleobject?4c?$AA@ ; `string'
EXTRN	_PyErr_BadInternalCall:PROC
EXTRN	PyType_IsSubtype:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyModule_GetDict DD imagerel $LN5
	DD	imagerel $LN5+129
	DD	imagerel $unwind$PyModule_GetDict
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyModule_GetDict DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0BK@BABLDALH@?4?4?2Objects?2moduleobject?4c?$AA@
CONST	SEGMENT
??_C@_0BK@BABLDALH@?4?4?2Objects?2moduleobject?4c?$AA@ DB '..\Objects\mod'
	DB	'uleobject.c', 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyModule_GetDict
_TEXT	SEGMENT
d$ = 32
m$ = 64
PyModule_GetDict PROC					; COMDAT

; 175  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 176  :     PyObject *d;
; 177  :     if (!PyModule_Check(m)) {

  00009	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyModule_Type
  00010	48 8b 4c 24 40	 mov	 rcx, QWORD PTR m$[rsp]
  00015	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00019	74 2e		 je	 SHORT $LN2@PyModule_G
  0001b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyModule_Type
  00022	48 8b 44 24 40	 mov	 rax, QWORD PTR m$[rsp]
  00027	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  0002b	e8 00 00 00 00	 call	 PyType_IsSubtype
  00030	85 c0		 test	 eax, eax
  00032	75 15		 jne	 SHORT $LN2@PyModule_G

; 178  :         PyErr_BadInternalCall();

  00034	ba b2 00 00 00	 mov	 edx, 178		; 000000b2H
  00039	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@BABLDALH@?4?4?2Objects?2moduleobject?4c?$AA@
  00040	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 179  :         return NULL;

  00045	33 c0		 xor	 eax, eax
  00047	eb 33		 jmp	 SHORT $LN3@PyModule_G
$LN2@PyModule_G:

; 180  :     }
; 181  :     d = ((PyModuleObject *)m) -> md_dict;

  00049	48 8b 44 24 40	 mov	 rax, QWORD PTR m$[rsp]
  0004e	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00052	48 89 44 24 20	 mov	 QWORD PTR d$[rsp], rax

; 182  :     if (d == NULL)

  00057	48 83 7c 24 20
	00		 cmp	 QWORD PTR d$[rsp], 0
  0005d	75 18		 jne	 SHORT $LN1@PyModule_G

; 183  :         ((PyModuleObject *)m) -> md_dict = d = PyDict_New();

  0005f	e8 00 00 00 00	 call	 PyDict_New
  00064	48 89 44 24 20	 mov	 QWORD PTR d$[rsp], rax
  00069	48 8b 44 24 40	 mov	 rax, QWORD PTR m$[rsp]
  0006e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR d$[rsp]
  00073	48 89 48 60	 mov	 QWORD PTR [rax+96], rcx
$LN1@PyModule_G:

; 184  :     return d;

  00077	48 8b 44 24 20	 mov	 rax, QWORD PTR d$[rsp]
$LN3@PyModule_G:

; 185  : }

  0007c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00080	c3		 ret	 0
PyModule_GetDict ENDP
_TEXT	ENDS
PUBLIC	_Py_IncRef
PUBLIC	??_C@_0BA@ICJDMDLD@nameless?5module?$AA@	; `string'
PUBLIC	PyModule_GetNameObject
EXTRN	PyExc_SystemError:QWORD
EXTRN	PyDict_GetItemString:PROC
EXTRN	PyErr_BadArgument:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyModule_GetNameObject DD imagerel $LN6
	DD	imagerel $LN6+180
	DD	imagerel $unwind$PyModule_GetNameObject
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyModule_GetNameObject DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0BA@ICJDMDLD@nameless?5module?$AA@
CONST	SEGMENT
??_C@_0BA@ICJDMDLD@nameless?5module?$AA@ DB 'nameless module', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyModule_GetNameObject
_TEXT	SEGMENT
name$ = 32
d$ = 40
m$ = 64
PyModule_GetNameObject PROC				; COMDAT

; 189  : {

$LN6:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 190  :     PyObject *d;
; 191  :     PyObject *name;
; 192  :     if (!PyModule_Check(m)) {

  00009	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyModule_Type
  00010	48 8b 4c 24 40	 mov	 rcx, QWORD PTR m$[rsp]
  00015	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00019	74 22		 je	 SHORT $LN3@PyModule_G@2
  0001b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyModule_Type
  00022	48 8b 44 24 40	 mov	 rax, QWORD PTR m$[rsp]
  00027	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  0002b	e8 00 00 00 00	 call	 PyType_IsSubtype
  00030	85 c0		 test	 eax, eax
  00032	75 09		 jne	 SHORT $LN3@PyModule_G@2

; 193  :         PyErr_BadArgument();

  00034	e8 00 00 00 00	 call	 PyErr_BadArgument

; 194  :         return NULL;

  00039	33 c0		 xor	 eax, eax
  0003b	eb 72		 jmp	 SHORT $LN4@PyModule_G@2
$LN3@PyModule_G@2:

; 195  :     }
; 196  :     d = ((PyModuleObject *)m)->md_dict;

  0003d	48 8b 44 24 40	 mov	 rax, QWORD PTR m$[rsp]
  00042	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00046	48 89 44 24 28	 mov	 QWORD PTR d$[rsp], rax

; 197  :     if (d == NULL ||
; 198  :         (name = PyDict_GetItemString(d, "__name__")) == NULL ||
; 199  :         !PyUnicode_Check(name))

  0004b	48 83 7c 24 28
	00		 cmp	 QWORD PTR d$[rsp], 0
  00051	74 36		 je	 SHORT $LN1@PyModule_G@2
  00053	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08BHKDPDAA@__name__?$AA@
  0005a	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  0005f	e8 00 00 00 00	 call	 PyDict_GetItemString
  00064	48 89 44 24 20	 mov	 QWORD PTR name$[rsp], rax
  00069	48 83 7c 24 20
	00		 cmp	 QWORD PTR name$[rsp], 0
  0006f	74 18		 je	 SHORT $LN1@PyModule_G@2
  00071	48 8b 44 24 20	 mov	 rax, QWORD PTR name$[rsp]
  00076	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0007a	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00080	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00085	85 c0		 test	 eax, eax
  00087	75 17		 jne	 SHORT $LN2@PyModule_G@2
$LN1@PyModule_G@2:

; 200  :     {
; 201  :         PyErr_SetString(PyExc_SystemError, "nameless module");

  00089	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BA@ICJDMDLD@nameless?5module?$AA@
  00090	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SystemError
  00097	e8 00 00 00 00	 call	 PyErr_SetString

; 202  :         return NULL;

  0009c	33 c0		 xor	 eax, eax
  0009e	eb 0f		 jmp	 SHORT $LN4@PyModule_G@2
$LN2@PyModule_G@2:

; 203  :     }
; 204  :     Py_INCREF(name);

  000a0	48 8b 4c 24 20	 mov	 rcx, QWORD PTR name$[rsp]
  000a5	e8 00 00 00 00	 call	 _Py_IncRef

; 205  :     return name;

  000aa	48 8b 44 24 20	 mov	 rax, QWORD PTR name$[rsp]
$LN4@PyModule_G@2:

; 206  : }

  000af	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000b3	c3		 ret	 0
PyModule_GetNameObject ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN7
	DD	imagerel $LN7+132
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 6d		 jne	 SHORT $LN2@Py_IncRef
  00012	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0001a	4c 8b 4c 24 40	 mov	 r9, QWORD PTR op$[rsp]
  0001f	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_Guard
  00038	85 c0		 test	 eax, eax
  0003a	75 12		 jne	 SHORT $LN1@Py_IncRef
  0003c	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  00041	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00045	48 83 e0 20	 and	 rax, 32			; 00000020H
  00049	48 85 c0	 test	 rax, rax
  0004c	74 31		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;

  0004e	e8 00 00 00 00	 call	 _Py_PXCTX
  00053	85 c0		 test	 eax, eax
  00055	74 02		 je	 SHORT $LN5@Py_IncRef
  00057	eb 11		 jmp	 SHORT $LN6@Py_IncRef
$LN5@Py_IncRef:
  00059	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00060	48 ff c0	 inc	 rax
  00063	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN6@Py_IncRef:

; 907  :         (((PyObject*)(op))->ob_refcnt++);

  0006a	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  0006f	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00073	48 ff c0	 inc	 rax
  00076	48 8b 4c 24 40	 mov	 rcx, QWORD PTR op$[rsp]
  0007b	48 89 41 50	 mov	 QWORD PTR [rcx+80], rax
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  0007f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00083	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	PyModule_GetName
EXTRN	PyUnicode_AsUTF8:PROC
;	COMDAT pdata
; File c:\src\pyparallel\objects\moduleobject.c
pdata	SEGMENT
$pdata$PyModule_GetName DD imagerel $LN4
	DD	imagerel $LN4+61
	DD	imagerel $unwind$PyModule_GetName
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyModule_GetName DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyModule_GetName
_TEXT	SEGMENT
name$ = 32
m$ = 64
PyModule_GetName PROC					; COMDAT

; 210  : {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 211  :     PyObject *name = PyModule_GetNameObject(m);

  00009	48 8b 4c 24 40	 mov	 rcx, QWORD PTR m$[rsp]
  0000e	e8 00 00 00 00	 call	 PyModule_GetNameObject
  00013	48 89 44 24 20	 mov	 QWORD PTR name$[rsp], rax

; 212  :     if (name == NULL)

  00018	48 83 7c 24 20
	00		 cmp	 QWORD PTR name$[rsp], 0
  0001e	75 04		 jne	 SHORT $LN1@PyModule_G@3

; 213  :         return NULL;

  00020	33 c0		 xor	 eax, eax
  00022	eb 14		 jmp	 SHORT $LN2@PyModule_G@3
$LN1@PyModule_G@3:

; 214  :     Py_DECREF(name);   /* module dict has still a reference */

  00024	48 8b 4c 24 20	 mov	 rcx, QWORD PTR name$[rsp]
  00029	e8 00 00 00 00	 call	 _Py_DecRef

; 215  :     return _PyUnicode_AsString(name);

  0002e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR name$[rsp]
  00033	e8 00 00 00 00	 call	 PyUnicode_AsUTF8
$LN2@PyModule_G@3:

; 216  : }

  00038	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003c	c3		 ret	 0
PyModule_GetName ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BI@JOMFHBIA@module?5filename?5missing?$AA@ ; `string'
PUBLIC	??_C@_08PFHPBGLK@__file__?$AA@			; `string'
PUBLIC	PyModule_GetFilenameObject
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyModule_GetFilenameObject DD imagerel $LN6
	DD	imagerel $LN6+180
	DD	imagerel $unwind$PyModule_GetFilenameObject
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyModule_GetFilenameObject DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0BI@JOMFHBIA@module?5filename?5missing?$AA@
CONST	SEGMENT
??_C@_0BI@JOMFHBIA@module?5filename?5missing?$AA@ DB 'module filename mis'
	DB	'sing', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_08PFHPBGLK@__file__?$AA@
CONST	SEGMENT
??_C@_08PFHPBGLK@__file__?$AA@ DB '__file__', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyModule_GetFilenameObject
_TEXT	SEGMENT
fileobj$ = 32
d$ = 40
m$ = 64
PyModule_GetFilenameObject PROC				; COMDAT

; 220  : {

$LN6:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 221  :     PyObject *d;
; 222  :     PyObject *fileobj;
; 223  :     if (!PyModule_Check(m)) {

  00009	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyModule_Type
  00010	48 8b 4c 24 40	 mov	 rcx, QWORD PTR m$[rsp]
  00015	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00019	74 22		 je	 SHORT $LN3@PyModule_G@4
  0001b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyModule_Type
  00022	48 8b 44 24 40	 mov	 rax, QWORD PTR m$[rsp]
  00027	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  0002b	e8 00 00 00 00	 call	 PyType_IsSubtype
  00030	85 c0		 test	 eax, eax
  00032	75 09		 jne	 SHORT $LN3@PyModule_G@4

; 224  :         PyErr_BadArgument();

  00034	e8 00 00 00 00	 call	 PyErr_BadArgument

; 225  :         return NULL;

  00039	33 c0		 xor	 eax, eax
  0003b	eb 72		 jmp	 SHORT $LN4@PyModule_G@4
$LN3@PyModule_G@4:

; 226  :     }
; 227  :     d = ((PyModuleObject *)m)->md_dict;

  0003d	48 8b 44 24 40	 mov	 rax, QWORD PTR m$[rsp]
  00042	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00046	48 89 44 24 28	 mov	 QWORD PTR d$[rsp], rax

; 228  :     if (d == NULL ||
; 229  :         (fileobj = PyDict_GetItemString(d, "__file__")) == NULL ||
; 230  :         !PyUnicode_Check(fileobj))

  0004b	48 83 7c 24 28
	00		 cmp	 QWORD PTR d$[rsp], 0
  00051	74 36		 je	 SHORT $LN1@PyModule_G@4
  00053	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08PFHPBGLK@__file__?$AA@
  0005a	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  0005f	e8 00 00 00 00	 call	 PyDict_GetItemString
  00064	48 89 44 24 20	 mov	 QWORD PTR fileobj$[rsp], rax
  00069	48 83 7c 24 20
	00		 cmp	 QWORD PTR fileobj$[rsp], 0
  0006f	74 18		 je	 SHORT $LN1@PyModule_G@4
  00071	48 8b 44 24 20	 mov	 rax, QWORD PTR fileobj$[rsp]
  00076	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0007a	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00080	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00085	85 c0		 test	 eax, eax
  00087	75 17		 jne	 SHORT $LN2@PyModule_G@4
$LN1@PyModule_G@4:

; 231  :     {
; 232  :         PyErr_SetString(PyExc_SystemError, "module filename missing");

  00089	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@JOMFHBIA@module?5filename?5missing?$AA@
  00090	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SystemError
  00097	e8 00 00 00 00	 call	 PyErr_SetString

; 233  :         return NULL;

  0009c	33 c0		 xor	 eax, eax
  0009e	eb 0f		 jmp	 SHORT $LN4@PyModule_G@4
$LN2@PyModule_G@4:

; 234  :     }
; 235  :     Py_INCREF(fileobj);

  000a0	48 8b 4c 24 20	 mov	 rcx, QWORD PTR fileobj$[rsp]
  000a5	e8 00 00 00 00	 call	 _Py_IncRef

; 236  :     return fileobj;

  000aa	48 8b 44 24 20	 mov	 rax, QWORD PTR fileobj$[rsp]
$LN4@PyModule_G@4:

; 237  : }

  000af	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000b3	c3		 ret	 0
PyModule_GetFilenameObject ENDP
_TEXT	ENDS
PUBLIC	PyModule_GetFilename
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyModule_GetFilename DD imagerel $LN4
	DD	imagerel $LN4+71
	DD	imagerel $unwind$PyModule_GetFilename
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyModule_GetFilename DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyModule_GetFilename
_TEXT	SEGMENT
fileobj$ = 32
utf8$ = 40
m$ = 64
PyModule_GetFilename PROC				; COMDAT

; 241  : {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 242  :     PyObject *fileobj;
; 243  :     char *utf8;
; 244  :     fileobj = PyModule_GetFilenameObject(m);

  00009	48 8b 4c 24 40	 mov	 rcx, QWORD PTR m$[rsp]
  0000e	e8 00 00 00 00	 call	 PyModule_GetFilenameObject
  00013	48 89 44 24 20	 mov	 QWORD PTR fileobj$[rsp], rax

; 245  :     if (fileobj == NULL)

  00018	48 83 7c 24 20
	00		 cmp	 QWORD PTR fileobj$[rsp], 0
  0001e	75 04		 jne	 SHORT $LN1@PyModule_G@5

; 246  :         return NULL;

  00020	33 c0		 xor	 eax, eax
  00022	eb 1e		 jmp	 SHORT $LN2@PyModule_G@5
$LN1@PyModule_G@5:

; 247  :     utf8 = _PyUnicode_AsString(fileobj);

  00024	48 8b 4c 24 20	 mov	 rcx, QWORD PTR fileobj$[rsp]
  00029	e8 00 00 00 00	 call	 PyUnicode_AsUTF8
  0002e	48 89 44 24 28	 mov	 QWORD PTR utf8$[rsp], rax

; 248  :     Py_DECREF(fileobj);   /* module dict has still a reference */

  00033	48 8b 4c 24 20	 mov	 rcx, QWORD PTR fileobj$[rsp]
  00038	e8 00 00 00 00	 call	 _Py_DecRef

; 249  :     return utf8;

  0003d	48 8b 44 24 28	 mov	 rax, QWORD PTR utf8$[rsp]
$LN2@PyModule_G@5:

; 250  : }

  00042	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00046	c3		 ret	 0
PyModule_GetFilename ENDP
_TEXT	ENDS
PUBLIC	PyModule_GetDef
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyModule_GetDef DD imagerel $LN4
	DD	imagerel $LN4+75
	DD	imagerel $unwind$PyModule_GetDef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyModule_GetDef DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyModule_GetDef
_TEXT	SEGMENT
m$ = 48
PyModule_GetDef PROC					; COMDAT

; 254  : {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 255  :     if (!PyModule_Check(m)) {

  00009	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyModule_Type
  00010	48 8b 4c 24 30	 mov	 rcx, QWORD PTR m$[rsp]
  00015	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00019	74 22		 je	 SHORT $LN1@PyModule_G@6
  0001b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyModule_Type
  00022	48 8b 44 24 30	 mov	 rax, QWORD PTR m$[rsp]
  00027	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  0002b	e8 00 00 00 00	 call	 PyType_IsSubtype
  00030	85 c0		 test	 eax, eax
  00032	75 09		 jne	 SHORT $LN1@PyModule_G@6

; 256  :         PyErr_BadArgument();

  00034	e8 00 00 00 00	 call	 PyErr_BadArgument

; 257  :         return NULL;

  00039	33 c0		 xor	 eax, eax
  0003b	eb 09		 jmp	 SHORT $LN2@PyModule_G@6
$LN1@PyModule_G@6:

; 258  :     }
; 259  :     return ((PyModuleObject *)m)->md_def;

  0003d	48 8b 44 24 30	 mov	 rax, QWORD PTR m$[rsp]
  00042	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
$LN2@PyModule_G@6:

; 260  : }

  00046	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004a	c3		 ret	 0
PyModule_GetDef ENDP
_TEXT	ENDS
PUBLIC	PyModule_GetState
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyModule_GetState DD imagerel $LN4
	DD	imagerel $LN4+75
	DD	imagerel $unwind$PyModule_GetState
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyModule_GetState DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyModule_GetState
_TEXT	SEGMENT
m$ = 48
PyModule_GetState PROC					; COMDAT

; 264  : {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 265  :     if (!PyModule_Check(m)) {

  00009	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyModule_Type
  00010	48 8b 4c 24 30	 mov	 rcx, QWORD PTR m$[rsp]
  00015	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00019	74 22		 je	 SHORT $LN1@PyModule_G@7
  0001b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyModule_Type
  00022	48 8b 44 24 30	 mov	 rax, QWORD PTR m$[rsp]
  00027	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  0002b	e8 00 00 00 00	 call	 PyType_IsSubtype
  00030	85 c0		 test	 eax, eax
  00032	75 09		 jne	 SHORT $LN1@PyModule_G@7

; 266  :         PyErr_BadArgument();

  00034	e8 00 00 00 00	 call	 PyErr_BadArgument

; 267  :         return NULL;

  00039	33 c0		 xor	 eax, eax
  0003b	eb 09		 jmp	 SHORT $LN2@PyModule_G@7
$LN1@PyModule_G@7:

; 268  :     }
; 269  :     return ((PyModuleObject *)m)->md_state;

  0003d	48 8b 44 24 30	 mov	 rax, QWORD PTR m$[rsp]
  00042	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
$LN2@PyModule_G@7:

; 270  : }

  00046	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004a	c3		 ret	 0
PyModule_GetState ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BB@DLPAHNDA@?$CD?5?5?5clear?$FL2?$FN?5?$CFs?6?$AA@ ; `string'
PUBLIC	??_C@_0N@MNFFDJII@__builtins__?$AA@		; `string'
PUBLIC	??_C@_0BB@KBIGHKN@?$CD?5?5?5clear?$FL1?$FN?5?$CFs?6?$AA@ ; `string'
PUBLIC	??_C@_1EM@EKIBBIEO@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAk?$AAe?$AAy?$AA?$CJ?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt@ ; `string'
PUBLIC	??_C@_1DE@PDKIEJGH@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAk?$AAe?$AAy?$AA?$CJ?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CO@EIHKBHFP@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAk?$AAe?$AAy?$AA?$CJ?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DA@GEAALFGA@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAk?$AAe?$AAy?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CK@CDLJFFEK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAk?$AAe?$AAy?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DE@DKPNGGLH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@ ; `string'
PUBLIC	_PyModule_Clear
EXTRN	PyUnicode_CompareWithASCIIString:PROC
EXTRN	PyDict_SetItem:PROC
EXTRN	PyErr_Clear:PROC
EXTRN	PySys_WriteStderr:PROC
EXTRN	Py_VerboseFlag:DWORD
EXTRN	__imp__wassert:PROC
EXTRN	PyDict_Next:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyModule_Clear DD imagerel $LN123
	DD	imagerel $LN123+4464
	DD	imagerel $unwind$_PyModule_Clear
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyModule_Clear DD 020c01H
	DD	023010cH
xdata	ENDS
;	COMDAT ??_C@_0BB@DLPAHNDA@?$CD?5?5?5clear?$FL2?$FN?5?$CFs?6?$AA@
CONST	SEGMENT
??_C@_0BB@DLPAHNDA@?$CD?5?5?5clear?$FL2?$FN?5?$CFs?6?$AA@ DB '#   clear[2'
	DB	'] %s', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MNFFDJII@__builtins__?$AA@
CONST	SEGMENT
??_C@_0N@MNFFDJII@__builtins__?$AA@ DB '__builtins__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@KBIGHKN@?$CD?5?5?5clear?$FL1?$FN?5?$CFs?6?$AA@
CONST	SEGMENT
??_C@_0BB@KBIGHKN@?$CD?5?5?5clear?$FL1?$FN?5?$CFs?6?$AA@ DB '#   clear[1]'
	DB	' %s', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1EM@EKIBBIEO@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAk?$AAe?$AAy?$AA?$CJ?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt@
CONST	SEGMENT
??_C@_1EM@EKIBBIEO@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAk?$AAe?$AAy?$AA?$CJ?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt@ DB '('
	DB	00H, '(', 00H, 'P', 00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H
	DB	'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'O', 00H, 'b', 00H, 'j'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, '*', 00H, ')', 00H, '(', 00H
	DB	'(', 00H, 'k', 00H, 'e', 00H, 'y', 00H, ')', 00H, ')', 00H, ')'
	DB	00H, '-', 00H, '>', 00H, 'd', 00H, 'a', 00H, 't', 00H, 'a', 00H
	DB	'.', 00H, 'a', 00H, 'n', 00H, 'y', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DE@PDKIEJGH@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAk?$AAe?$AAy?$AA?$CJ?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DE@PDKIEJGH@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAk?$AAe?$AAy?$AA?$CJ?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'I', 00H, 'S', 00H, '_', 00H, 'R'
	DB	00H, 'E', 00H, 'A', 00H, 'D', 00H, 'Y', 00H, '(', 00H, '(', 00H
	DB	'k', 00H, 'e', 00H, 'y', 00H, ')', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CO@EIHKBHFP@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAk?$AAe?$AAy?$AA?$CJ?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CO@EIHKBHFP@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAk?$AAe?$AAy?$AA?$CJ?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, '(', 00H, 'k', 00H, 'e', 00H, 'y', 00H
	DB	')', 00H, ')', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1DA@GEAALFGA@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAk?$AAe?$AAy?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DA@GEAALFGA@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAk?$AAe?$AAy?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'I', 00H, 'S', 00H, '_', 00H, 'R'
	DB	00H, 'E', 00H, 'A', 00H, 'D', 00H, 'Y', 00H, '(', 00H, 'k', 00H
	DB	'e', 00H, 'y', 00H, ')', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@CDLJFFEK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAk?$AAe?$AAy?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CK@CDLJFFEK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAk?$AAe?$AAy?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, 'k', 00H, 'e', 00H, 'y', 00H, ')', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1DE@DKPNGGLH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
CONST	SEGMENT
??_C@_1DE@DKPNGGLH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@ DB '.'
	DB	00H, '.', 00H, '\', 00H, 'O', 00H, 'b', 00H, 'j', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 's', 00H, '\', 00H, 'm', 00H, 'o', 00H, 'd'
	DB	00H, 'u', 00H, 'l', 00H, 'e', 00H, 'o', 00H, 'b', 00H, 'j', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, '.', 00H, 'c', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PyModule_Clear
_TEXT	SEGMENT
value$ = 32
key$ = 40
d$ = 48
pos$ = 56
s$20702 = 64
s$20780 = 72
tv178 = 80
tv187 = 88
tv297 = 96
tv242 = 104
tv251 = 112
tv296 = 120
tv286 = 128
tv295 = 136
tv368 = 144
tv377 = 152
tv490 = 160
tv433 = 168
tv442 = 176
tv489 = 184
tv478 = 192
tv487 = 200
tv583 = 208
tv592 = 216
tv702 = 224
tv647 = 232
tv656 = 240
tv701 = 248
tv691 = 256
tv700 = 264
m$ = 288
_PyModule_Clear PROC					; COMDAT

; 274  : {

$LN123:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 81 ec 18 01
	00 00		 sub	 rsp, 280		; 00000118H

; 275  :     /* To make the execution order of destructors for global
; 276  :        objects a bit more predictable, we first zap all objects
; 277  :        whose name starts with a single underscore, before we clear
; 278  :        the entire dictionary.  We zap them by replacing them with
; 279  :        None, rather than deleting them from the dictionary, to
; 280  :        avoid rehashing the dictionary (to some extent). */
; 281  : 
; 282  :     Py_ssize_t pos;
; 283  :     PyObject *key, *value;
; 284  :     PyObject *d;
; 285  : 
; 286  :     d = ((PyModuleObject *)m)->md_dict;

  0000c	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR m$[rsp]
  00014	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00018	48 89 44 24 30	 mov	 QWORD PTR d$[rsp], rax

; 287  :     if (d == NULL)

  0001d	48 83 7c 24 30
	00		 cmp	 QWORD PTR d$[rsp], 0
  00023	75 05		 jne	 SHORT $LN18@PyModule_C@2

; 288  :         return;

  00025	e9 3e 11 00 00	 jmp	 $LN19@PyModule_C@2
$LN18@PyModule_C@2:

; 289  : 
; 290  :     /* First, clear only names starting with a single underscore */
; 291  :     pos = 0;

  0002a	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR pos$[rsp], 0
$LN17@PyModule_C@2:

; 292  :     while (PyDict_Next(d, &pos, &key, &value)) {

  00033	4c 8d 4c 24 20	 lea	 r9, QWORD PTR value$[rsp]
  00038	4c 8d 44 24 28	 lea	 r8, QWORD PTR key$[rsp]
  0003d	48 8d 54 24 38	 lea	 rdx, QWORD PTR pos$[rsp]
  00042	48 8b 4c 24 30	 mov	 rcx, QWORD PTR d$[rsp]
  00047	e8 00 00 00 00	 call	 PyDict_Next
  0004c	85 c0		 test	 eax, eax
  0004e	0f 84 fb 0a 00
	00		 je	 $LN16@PyModule_C@2

; 293  :         if (value != Py_None && PyUnicode_Check(key)) {

  00054	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0005b	48 39 44 24 20	 cmp	 QWORD PTR value$[rsp], rax
  00060	0f 84 e4 0a 00
	00		 je	 $LN15@PyModule_C@2
  00066	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  0006b	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0006f	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00075	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0007a	85 c0		 test	 eax, eax
  0007c	0f 84 c8 0a 00
	00		 je	 $LN15@PyModule_C@2

; 294  :             if (PyUnicode_READ_CHAR(key, 0) == '_' &&
; 295  :                 PyUnicode_READ_CHAR(key, 1) != '_') {

  00082	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  00087	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0008b	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00091	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00096	85 c0		 test	 eax, eax
  00098	75 1c		 jne	 SHORT $LN21@PyModule_C@2
  0009a	41 b8 26 01 00
	00		 mov	 r8d, 294		; 00000126H
  000a0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DE@DKPNGGLH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  000a7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@CDLJFFEK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAk?$AAe?$AAy?$AA?$CJ?$AA?$AA@
  000ae	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000b4	33 c0		 xor	 eax, eax
$LN21@PyModule_C@2:
  000b6	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  000bb	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  000be	c1 e8 07	 shr	 eax, 7
  000c1	83 e0 01	 and	 eax, 1
  000c4	85 c0		 test	 eax, eax
  000c6	75 1c		 jne	 SHORT $LN22@PyModule_C@2
  000c8	41 b8 26 01 00
	00		 mov	 r8d, 294		; 00000126H
  000ce	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DE@DKPNGGLH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  000d5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@GEAALFGA@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAk?$AAe?$AAy?$AA?$CJ?$AA?$AA@
  000dc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000e2	33 c0		 xor	 eax, eax
$LN22@PyModule_C@2:
  000e4	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  000e9	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000ed	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000f3	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  000f8	85 c0		 test	 eax, eax
  000fa	75 1c		 jne	 SHORT $LN23@PyModule_C@2
  000fc	41 b8 26 01 00
	00		 mov	 r8d, 294		; 00000126H
  00102	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DE@DKPNGGLH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00109	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@EIHKBHFP@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAk?$AAe?$AAy?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00110	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00116	33 c0		 xor	 eax, eax
$LN23@PyModule_C@2:
  00118	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  0011d	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00120	c1 e8 07	 shr	 eax, 7
  00123	83 e0 01	 and	 eax, 1
  00126	85 c0		 test	 eax, eax
  00128	75 1c		 jne	 SHORT $LN24@PyModule_C@2
  0012a	41 b8 26 01 00
	00		 mov	 r8d, 294		; 00000126H
  00130	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DE@DKPNGGLH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00137	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@PDKIEJGH@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAk?$AAe?$AAy?$AA?$CJ?$AA?$CJ?$AA?$AA@
  0013e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00144	33 c0		 xor	 eax, eax
$LN24@PyModule_C@2:
  00146	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  0014b	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0014e	c1 e8 02	 shr	 eax, 2
  00151	83 e0 07	 and	 eax, 7
  00154	83 f8 01	 cmp	 eax, 1
  00157	0f 85 39 01 00
	00		 jne	 $LN53@PyModule_C@2
  0015d	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  00162	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00166	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0016c	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00171	85 c0		 test	 eax, eax
  00173	75 1c		 jne	 SHORT $LN25@PyModule_C@2
  00175	41 b8 26 01 00
	00		 mov	 r8d, 294		; 00000126H
  0017b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DE@DKPNGGLH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00182	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@EIHKBHFP@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAk?$AAe?$AAy?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00189	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0018f	33 c0		 xor	 eax, eax
$LN25@PyModule_C@2:
  00191	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  00196	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00199	c1 e8 05	 shr	 eax, 5
  0019c	83 e0 01	 and	 eax, 1
  0019f	85 c0		 test	 eax, eax
  001a1	0f 84 a2 00 00
	00		 je	 $LN31@PyModule_C@2
  001a7	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  001ac	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  001b0	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  001b6	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  001bb	85 c0		 test	 eax, eax
  001bd	75 1c		 jne	 SHORT $LN26@PyModule_C@2
  001bf	41 b8 26 01 00
	00		 mov	 r8d, 294		; 00000126H
  001c5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DE@DKPNGGLH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  001cc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@EIHKBHFP@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAk?$AAe?$AAy?$AA?$CJ?$AA?$CJ?$AA?$AA@
  001d3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001d9	33 c0		 xor	 eax, eax
$LN26@PyModule_C@2:
  001db	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  001e0	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  001e3	c1 e8 07	 shr	 eax, 7
  001e6	83 e0 01	 and	 eax, 1
  001e9	85 c0		 test	 eax, eax
  001eb	75 1c		 jne	 SHORT $LN27@PyModule_C@2
  001ed	41 b8 26 01 00
	00		 mov	 r8d, 294		; 00000126H
  001f3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DE@DKPNGGLH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  001fa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@PDKIEJGH@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAk?$AAe?$AAy?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00201	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00207	33 c0		 xor	 eax, eax
$LN27@PyModule_C@2:
  00209	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  0020e	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00211	c1 e8 06	 shr	 eax, 6
  00214	83 e0 01	 and	 eax, 1
  00217	85 c0		 test	 eax, eax
  00219	74 12		 je	 SHORT $LN28@PyModule_C@2
  0021b	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  00220	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  00226	48 89 44 24 50	 mov	 QWORD PTR tv178[rsp], rax
  0022b	eb 10		 jmp	 SHORT $LN29@PyModule_C@2
$LN28@PyModule_C@2:
  0022d	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  00232	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  00238	48 89 44 24 50	 mov	 QWORD PTR tv178[rsp], rax
$LN29@PyModule_C@2:
  0023d	48 8b 44 24 50	 mov	 rax, QWORD PTR tv178[rsp]
  00242	48 89 44 24 58	 mov	 QWORD PTR tv187[rsp], rax
  00247	eb 3c		 jmp	 SHORT $LN32@PyModule_C@2
$LN31@PyModule_C@2:
  00249	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  0024e	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  00256	75 1c		 jne	 SHORT $LN30@PyModule_C@2
  00258	41 b8 26 01 00
	00		 mov	 r8d, 294		; 00000126H
  0025e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DE@DKPNGGLH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00265	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EM@EKIBBIEO@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAk?$AAe?$AAy?$AA?$CJ?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt@
  0026c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00272	33 c0		 xor	 eax, eax
$LN30@PyModule_C@2:
  00274	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  00279	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  00280	48 89 44 24 58	 mov	 QWORD PTR tv187[rsp], rax
$LN32@PyModule_C@2:
  00285	48 8b 44 24 58	 mov	 rax, QWORD PTR tv187[rsp]
  0028a	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0028d	89 44 24 60	 mov	 DWORD PTR tv297[rsp], eax
  00291	e9 ff 02 00 00	 jmp	 $LN54@PyModule_C@2
$LN53@PyModule_C@2:
  00296	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  0029b	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0029f	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  002a5	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  002aa	85 c0		 test	 eax, eax
  002ac	75 1c		 jne	 SHORT $LN33@PyModule_C@2
  002ae	41 b8 26 01 00
	00		 mov	 r8d, 294		; 00000126H
  002b4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DE@DKPNGGLH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  002bb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@EIHKBHFP@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAk?$AAe?$AAy?$AA?$CJ?$AA?$CJ?$AA?$AA@
  002c2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  002c8	33 c0		 xor	 eax, eax
$LN33@PyModule_C@2:
  002ca	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  002cf	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  002d2	c1 e8 07	 shr	 eax, 7
  002d5	83 e0 01	 and	 eax, 1
  002d8	85 c0		 test	 eax, eax
  002da	75 1c		 jne	 SHORT $LN34@PyModule_C@2
  002dc	41 b8 26 01 00
	00		 mov	 r8d, 294		; 00000126H
  002e2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DE@DKPNGGLH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  002e9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@PDKIEJGH@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAk?$AAe?$AAy?$AA?$CJ?$AA?$CJ?$AA?$AA@
  002f0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  002f6	33 c0		 xor	 eax, eax
$LN34@PyModule_C@2:
  002f8	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  002fd	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00300	c1 e8 02	 shr	 eax, 2
  00303	83 e0 07	 and	 eax, 7
  00306	83 f8 02	 cmp	 eax, 2
  00309	0f 85 39 01 00
	00		 jne	 $LN51@PyModule_C@2
  0030f	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  00314	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00318	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0031e	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00323	85 c0		 test	 eax, eax
  00325	75 1c		 jne	 SHORT $LN35@PyModule_C@2
  00327	41 b8 26 01 00
	00		 mov	 r8d, 294		; 00000126H
  0032d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DE@DKPNGGLH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00334	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@EIHKBHFP@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAk?$AAe?$AAy?$AA?$CJ?$AA?$CJ?$AA?$AA@
  0033b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00341	33 c0		 xor	 eax, eax
$LN35@PyModule_C@2:
  00343	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  00348	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0034b	c1 e8 05	 shr	 eax, 5
  0034e	83 e0 01	 and	 eax, 1
  00351	85 c0		 test	 eax, eax
  00353	0f 84 a2 00 00
	00		 je	 $LN41@PyModule_C@2
  00359	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  0035e	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00362	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00368	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0036d	85 c0		 test	 eax, eax
  0036f	75 1c		 jne	 SHORT $LN36@PyModule_C@2
  00371	41 b8 26 01 00
	00		 mov	 r8d, 294		; 00000126H
  00377	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DE@DKPNGGLH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  0037e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@EIHKBHFP@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAk?$AAe?$AAy?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00385	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0038b	33 c0		 xor	 eax, eax
$LN36@PyModule_C@2:
  0038d	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  00392	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00395	c1 e8 07	 shr	 eax, 7
  00398	83 e0 01	 and	 eax, 1
  0039b	85 c0		 test	 eax, eax
  0039d	75 1c		 jne	 SHORT $LN37@PyModule_C@2
  0039f	41 b8 26 01 00
	00		 mov	 r8d, 294		; 00000126H
  003a5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DE@DKPNGGLH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  003ac	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@PDKIEJGH@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAk?$AAe?$AAy?$AA?$CJ?$AA?$CJ?$AA?$AA@
  003b3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  003b9	33 c0		 xor	 eax, eax
$LN37@PyModule_C@2:
  003bb	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  003c0	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  003c3	c1 e8 06	 shr	 eax, 6
  003c6	83 e0 01	 and	 eax, 1
  003c9	85 c0		 test	 eax, eax
  003cb	74 12		 je	 SHORT $LN38@PyModule_C@2
  003cd	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  003d2	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  003d8	48 89 44 24 68	 mov	 QWORD PTR tv242[rsp], rax
  003dd	eb 10		 jmp	 SHORT $LN39@PyModule_C@2
$LN38@PyModule_C@2:
  003df	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  003e4	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  003ea	48 89 44 24 68	 mov	 QWORD PTR tv242[rsp], rax
$LN39@PyModule_C@2:
  003ef	48 8b 44 24 68	 mov	 rax, QWORD PTR tv242[rsp]
  003f4	48 89 44 24 70	 mov	 QWORD PTR tv251[rsp], rax
  003f9	eb 3c		 jmp	 SHORT $LN42@PyModule_C@2
$LN41@PyModule_C@2:
  003fb	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  00400	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  00408	75 1c		 jne	 SHORT $LN40@PyModule_C@2
  0040a	41 b8 26 01 00
	00		 mov	 r8d, 294		; 00000126H
  00410	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DE@DKPNGGLH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00417	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EM@EKIBBIEO@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAk?$AAe?$AAy?$AA?$CJ?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt@
  0041e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00424	33 c0		 xor	 eax, eax
$LN40@PyModule_C@2:
  00426	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  0042b	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  00432	48 89 44 24 70	 mov	 QWORD PTR tv251[rsp], rax
$LN42@PyModule_C@2:
  00437	48 8b 44 24 70	 mov	 rax, QWORD PTR tv251[rsp]
  0043c	0f b7 00	 movzx	 eax, WORD PTR [rax]
  0043f	89 44 24 78	 mov	 DWORD PTR tv296[rsp], eax
  00443	e9 45 01 00 00	 jmp	 $LN52@PyModule_C@2
$LN51@PyModule_C@2:
  00448	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  0044d	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00451	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00457	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0045c	85 c0		 test	 eax, eax
  0045e	75 1c		 jne	 SHORT $LN43@PyModule_C@2
  00460	41 b8 26 01 00
	00		 mov	 r8d, 294		; 00000126H
  00466	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DE@DKPNGGLH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  0046d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@EIHKBHFP@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAk?$AAe?$AAy?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00474	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0047a	33 c0		 xor	 eax, eax
$LN43@PyModule_C@2:
  0047c	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  00481	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00484	c1 e8 05	 shr	 eax, 5
  00487	83 e0 01	 and	 eax, 1
  0048a	85 c0		 test	 eax, eax
  0048c	0f 84 ae 00 00
	00		 je	 $LN49@PyModule_C@2
  00492	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  00497	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0049b	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  004a1	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  004a6	85 c0		 test	 eax, eax
  004a8	75 1c		 jne	 SHORT $LN44@PyModule_C@2
  004aa	41 b8 26 01 00
	00		 mov	 r8d, 294		; 00000126H
  004b0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DE@DKPNGGLH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  004b7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@EIHKBHFP@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAk?$AAe?$AAy?$AA?$CJ?$AA?$CJ?$AA?$AA@
  004be	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  004c4	33 c0		 xor	 eax, eax
$LN44@PyModule_C@2:
  004c6	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  004cb	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  004ce	c1 e8 07	 shr	 eax, 7
  004d1	83 e0 01	 and	 eax, 1
  004d4	85 c0		 test	 eax, eax
  004d6	75 1c		 jne	 SHORT $LN45@PyModule_C@2
  004d8	41 b8 26 01 00
	00		 mov	 r8d, 294		; 00000126H
  004de	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DE@DKPNGGLH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  004e5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@PDKIEJGH@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAk?$AAe?$AAy?$AA?$CJ?$AA?$CJ?$AA?$AA@
  004ec	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  004f2	33 c0		 xor	 eax, eax
$LN45@PyModule_C@2:
  004f4	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  004f9	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  004fc	c1 e8 06	 shr	 eax, 6
  004ff	83 e0 01	 and	 eax, 1
  00502	85 c0		 test	 eax, eax
  00504	74 15		 je	 SHORT $LN46@PyModule_C@2
  00506	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  0050b	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  00511	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv286[rsp], rax
  00519	eb 13		 jmp	 SHORT $LN47@PyModule_C@2
$LN46@PyModule_C@2:
  0051b	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  00520	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  00526	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv286[rsp], rax
$LN47@PyModule_C@2:
  0052e	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR tv286[rsp]
  00536	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv295[rsp], rax
  0053e	eb 3f		 jmp	 SHORT $LN50@PyModule_C@2
$LN49@PyModule_C@2:
  00540	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  00545	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  0054d	75 1c		 jne	 SHORT $LN48@PyModule_C@2
  0054f	41 b8 26 01 00
	00		 mov	 r8d, 294		; 00000126H
  00555	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DE@DKPNGGLH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  0055c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EM@EKIBBIEO@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAk?$AAe?$AAy?$AA?$CJ?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt@
  00563	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00569	33 c0		 xor	 eax, eax
$LN48@PyModule_C@2:
  0056b	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  00570	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  00577	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv295[rsp], rax
$LN50@PyModule_C@2:
  0057f	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR tv295[rsp]
  00587	8b 00		 mov	 eax, DWORD PTR [rax]
  00589	89 44 24 78	 mov	 DWORD PTR tv296[rsp], eax
$LN52@PyModule_C@2:
  0058d	8b 44 24 78	 mov	 eax, DWORD PTR tv296[rsp]
  00591	89 44 24 60	 mov	 DWORD PTR tv297[rsp], eax
$LN54@PyModule_C@2:
  00595	83 7c 24 60 5f	 cmp	 DWORD PTR tv297[rsp], 95 ; 0000005fH
  0059a	0f 85 aa 05 00
	00		 jne	 $LN14@PyModule_C@2
  005a0	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  005a5	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  005a9	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  005af	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  005b4	85 c0		 test	 eax, eax
  005b6	75 1c		 jne	 SHORT $LN55@PyModule_C@2
  005b8	41 b8 27 01 00
	00		 mov	 r8d, 295		; 00000127H
  005be	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DE@DKPNGGLH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  005c5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@CDLJFFEK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAk?$AAe?$AAy?$AA?$CJ?$AA?$AA@
  005cc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  005d2	33 c0		 xor	 eax, eax
$LN55@PyModule_C@2:
  005d4	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  005d9	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  005dc	c1 e8 07	 shr	 eax, 7
  005df	83 e0 01	 and	 eax, 1
  005e2	85 c0		 test	 eax, eax
  005e4	75 1c		 jne	 SHORT $LN56@PyModule_C@2
  005e6	41 b8 27 01 00
	00		 mov	 r8d, 295		; 00000127H
  005ec	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DE@DKPNGGLH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  005f3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@GEAALFGA@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAk?$AAe?$AAy?$AA?$CJ?$AA?$AA@
  005fa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00600	33 c0		 xor	 eax, eax
$LN56@PyModule_C@2:
  00602	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  00607	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0060b	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00611	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00616	85 c0		 test	 eax, eax
  00618	75 1c		 jne	 SHORT $LN57@PyModule_C@2
  0061a	41 b8 27 01 00
	00		 mov	 r8d, 295		; 00000127H
  00620	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DE@DKPNGGLH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00627	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@EIHKBHFP@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAk?$AAe?$AAy?$AA?$CJ?$AA?$CJ?$AA?$AA@
  0062e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00634	33 c0		 xor	 eax, eax
$LN57@PyModule_C@2:
  00636	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  0063b	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0063e	c1 e8 07	 shr	 eax, 7
  00641	83 e0 01	 and	 eax, 1
  00644	85 c0		 test	 eax, eax
  00646	75 1c		 jne	 SHORT $LN58@PyModule_C@2
  00648	41 b8 27 01 00
	00		 mov	 r8d, 295		; 00000127H
  0064e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DE@DKPNGGLH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00655	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@PDKIEJGH@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAk?$AAe?$AAy?$AA?$CJ?$AA?$CJ?$AA?$AA@
  0065c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00662	33 c0		 xor	 eax, eax
$LN58@PyModule_C@2:
  00664	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  00669	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0066c	c1 e8 02	 shr	 eax, 2
  0066f	83 e0 07	 and	 eax, 7
  00672	83 f8 01	 cmp	 eax, 1
  00675	0f 85 4f 01 00
	00		 jne	 $LN87@PyModule_C@2
  0067b	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  00680	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00684	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0068a	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0068f	85 c0		 test	 eax, eax
  00691	75 1c		 jne	 SHORT $LN59@PyModule_C@2
  00693	41 b8 27 01 00
	00		 mov	 r8d, 295		; 00000127H
  00699	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DE@DKPNGGLH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  006a0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@EIHKBHFP@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAk?$AAe?$AAy?$AA?$CJ?$AA?$CJ?$AA?$AA@
  006a7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  006ad	33 c0		 xor	 eax, eax
$LN59@PyModule_C@2:
  006af	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  006b4	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  006b7	c1 e8 05	 shr	 eax, 5
  006ba	83 e0 01	 and	 eax, 1
  006bd	85 c0		 test	 eax, eax
  006bf	0f 84 ae 00 00
	00		 je	 $LN65@PyModule_C@2
  006c5	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  006ca	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  006ce	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  006d4	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  006d9	85 c0		 test	 eax, eax
  006db	75 1c		 jne	 SHORT $LN60@PyModule_C@2
  006dd	41 b8 27 01 00
	00		 mov	 r8d, 295		; 00000127H
  006e3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DE@DKPNGGLH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  006ea	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@EIHKBHFP@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAk?$AAe?$AAy?$AA?$CJ?$AA?$CJ?$AA?$AA@
  006f1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  006f7	33 c0		 xor	 eax, eax
$LN60@PyModule_C@2:
  006f9	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  006fe	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00701	c1 e8 07	 shr	 eax, 7
  00704	83 e0 01	 and	 eax, 1
  00707	85 c0		 test	 eax, eax
  00709	75 1c		 jne	 SHORT $LN61@PyModule_C@2
  0070b	41 b8 27 01 00
	00		 mov	 r8d, 295		; 00000127H
  00711	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DE@DKPNGGLH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00718	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@PDKIEJGH@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAk?$AAe?$AAy?$AA?$CJ?$AA?$CJ?$AA?$AA@
  0071f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00725	33 c0		 xor	 eax, eax
$LN61@PyModule_C@2:
  00727	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  0072c	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0072f	c1 e8 06	 shr	 eax, 6
  00732	83 e0 01	 and	 eax, 1
  00735	85 c0		 test	 eax, eax
  00737	74 15		 je	 SHORT $LN62@PyModule_C@2
  00739	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  0073e	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  00744	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv368[rsp], rax
  0074c	eb 13		 jmp	 SHORT $LN63@PyModule_C@2
$LN62@PyModule_C@2:
  0074e	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  00753	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  00759	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv368[rsp], rax
$LN63@PyModule_C@2:
  00761	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR tv368[rsp]
  00769	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR tv377[rsp], rax
  00771	eb 3f		 jmp	 SHORT $LN66@PyModule_C@2
$LN65@PyModule_C@2:
  00773	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  00778	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  00780	75 1c		 jne	 SHORT $LN64@PyModule_C@2
  00782	41 b8 27 01 00
	00		 mov	 r8d, 295		; 00000127H
  00788	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DE@DKPNGGLH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  0078f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EM@EKIBBIEO@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAk?$AAe?$AAy?$AA?$CJ?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt@
  00796	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0079c	33 c0		 xor	 eax, eax
$LN64@PyModule_C@2:
  0079e	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  007a3	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  007aa	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR tv377[rsp], rax
$LN66@PyModule_C@2:
  007b2	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR tv377[rsp]
  007ba	0f b6 40 01	 movzx	 eax, BYTE PTR [rax+1]
  007be	89 84 24 a0 00
	00 00		 mov	 DWORD PTR tv490[rsp], eax
  007c5	e9 1f 03 00 00	 jmp	 $LN88@PyModule_C@2
$LN87@PyModule_C@2:
  007ca	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  007cf	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  007d3	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  007d9	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  007de	85 c0		 test	 eax, eax
  007e0	75 1c		 jne	 SHORT $LN67@PyModule_C@2
  007e2	41 b8 27 01 00
	00		 mov	 r8d, 295		; 00000127H
  007e8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DE@DKPNGGLH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  007ef	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@EIHKBHFP@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAk?$AAe?$AAy?$AA?$CJ?$AA?$CJ?$AA?$AA@
  007f6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  007fc	33 c0		 xor	 eax, eax
$LN67@PyModule_C@2:
  007fe	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  00803	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00806	c1 e8 07	 shr	 eax, 7
  00809	83 e0 01	 and	 eax, 1
  0080c	85 c0		 test	 eax, eax
  0080e	75 1c		 jne	 SHORT $LN68@PyModule_C@2
  00810	41 b8 27 01 00
	00		 mov	 r8d, 295		; 00000127H
  00816	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DE@DKPNGGLH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  0081d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@PDKIEJGH@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAk?$AAe?$AAy?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00824	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0082a	33 c0		 xor	 eax, eax
$LN68@PyModule_C@2:
  0082c	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  00831	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00834	c1 e8 02	 shr	 eax, 2
  00837	83 e0 07	 and	 eax, 7
  0083a	83 f8 02	 cmp	 eax, 2
  0083d	0f 85 4f 01 00
	00		 jne	 $LN85@PyModule_C@2
  00843	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  00848	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0084c	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00852	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00857	85 c0		 test	 eax, eax
  00859	75 1c		 jne	 SHORT $LN69@PyModule_C@2
  0085b	41 b8 27 01 00
	00		 mov	 r8d, 295		; 00000127H
  00861	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DE@DKPNGGLH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00868	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@EIHKBHFP@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAk?$AAe?$AAy?$AA?$CJ?$AA?$CJ?$AA?$AA@
  0086f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00875	33 c0		 xor	 eax, eax
$LN69@PyModule_C@2:
  00877	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  0087c	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0087f	c1 e8 05	 shr	 eax, 5
  00882	83 e0 01	 and	 eax, 1
  00885	85 c0		 test	 eax, eax
  00887	0f 84 ae 00 00
	00		 je	 $LN75@PyModule_C@2
  0088d	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  00892	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00896	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0089c	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  008a1	85 c0		 test	 eax, eax
  008a3	75 1c		 jne	 SHORT $LN70@PyModule_C@2
  008a5	41 b8 27 01 00
	00		 mov	 r8d, 295		; 00000127H
  008ab	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DE@DKPNGGLH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  008b2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@EIHKBHFP@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAk?$AAe?$AAy?$AA?$CJ?$AA?$CJ?$AA?$AA@
  008b9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  008bf	33 c0		 xor	 eax, eax
$LN70@PyModule_C@2:
  008c1	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  008c6	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  008c9	c1 e8 07	 shr	 eax, 7
  008cc	83 e0 01	 and	 eax, 1
  008cf	85 c0		 test	 eax, eax
  008d1	75 1c		 jne	 SHORT $LN71@PyModule_C@2
  008d3	41 b8 27 01 00
	00		 mov	 r8d, 295		; 00000127H
  008d9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DE@DKPNGGLH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  008e0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@PDKIEJGH@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAk?$AAe?$AAy?$AA?$CJ?$AA?$CJ?$AA?$AA@
  008e7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  008ed	33 c0		 xor	 eax, eax
$LN71@PyModule_C@2:
  008ef	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  008f4	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  008f7	c1 e8 06	 shr	 eax, 6
  008fa	83 e0 01	 and	 eax, 1
  008fd	85 c0		 test	 eax, eax
  008ff	74 15		 je	 SHORT $LN72@PyModule_C@2
  00901	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  00906	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  0090c	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR tv433[rsp], rax
  00914	eb 13		 jmp	 SHORT $LN73@PyModule_C@2
$LN72@PyModule_C@2:
  00916	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  0091b	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  00921	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR tv433[rsp], rax
$LN73@PyModule_C@2:
  00929	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR tv433[rsp]
  00931	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR tv442[rsp], rax
  00939	eb 3f		 jmp	 SHORT $LN76@PyModule_C@2
$LN75@PyModule_C@2:
  0093b	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  00940	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  00948	75 1c		 jne	 SHORT $LN74@PyModule_C@2
  0094a	41 b8 27 01 00
	00		 mov	 r8d, 295		; 00000127H
  00950	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DE@DKPNGGLH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00957	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EM@EKIBBIEO@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAk?$AAe?$AAy?$AA?$CJ?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt@
  0095e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00964	33 c0		 xor	 eax, eax
$LN74@PyModule_C@2:
  00966	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  0096b	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  00972	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR tv442[rsp], rax
$LN76@PyModule_C@2:
  0097a	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR tv442[rsp]
  00982	0f b7 40 02	 movzx	 eax, WORD PTR [rax+2]
  00986	89 84 24 b8 00
	00 00		 mov	 DWORD PTR tv489[rsp], eax
  0098d	e9 49 01 00 00	 jmp	 $LN86@PyModule_C@2
$LN85@PyModule_C@2:
  00992	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  00997	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0099b	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  009a1	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  009a6	85 c0		 test	 eax, eax
  009a8	75 1c		 jne	 SHORT $LN77@PyModule_C@2
  009aa	41 b8 27 01 00
	00		 mov	 r8d, 295		; 00000127H
  009b0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DE@DKPNGGLH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  009b7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@EIHKBHFP@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAk?$AAe?$AAy?$AA?$CJ?$AA?$CJ?$AA?$AA@
  009be	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  009c4	33 c0		 xor	 eax, eax
$LN77@PyModule_C@2:
  009c6	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  009cb	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  009ce	c1 e8 05	 shr	 eax, 5
  009d1	83 e0 01	 and	 eax, 1
  009d4	85 c0		 test	 eax, eax
  009d6	0f 84 ae 00 00
	00		 je	 $LN83@PyModule_C@2
  009dc	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  009e1	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  009e5	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  009eb	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  009f0	85 c0		 test	 eax, eax
  009f2	75 1c		 jne	 SHORT $LN78@PyModule_C@2
  009f4	41 b8 27 01 00
	00		 mov	 r8d, 295		; 00000127H
  009fa	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DE@DKPNGGLH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00a01	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@EIHKBHFP@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAk?$AAe?$AAy?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00a08	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00a0e	33 c0		 xor	 eax, eax
$LN78@PyModule_C@2:
  00a10	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  00a15	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00a18	c1 e8 07	 shr	 eax, 7
  00a1b	83 e0 01	 and	 eax, 1
  00a1e	85 c0		 test	 eax, eax
  00a20	75 1c		 jne	 SHORT $LN79@PyModule_C@2
  00a22	41 b8 27 01 00
	00		 mov	 r8d, 295		; 00000127H
  00a28	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DE@DKPNGGLH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00a2f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@PDKIEJGH@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAk?$AAe?$AAy?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00a36	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00a3c	33 c0		 xor	 eax, eax
$LN79@PyModule_C@2:
  00a3e	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  00a43	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00a46	c1 e8 06	 shr	 eax, 6
  00a49	83 e0 01	 and	 eax, 1
  00a4c	85 c0		 test	 eax, eax
  00a4e	74 15		 je	 SHORT $LN80@PyModule_C@2
  00a50	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  00a55	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  00a5b	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR tv478[rsp], rax
  00a63	eb 13		 jmp	 SHORT $LN81@PyModule_C@2
$LN80@PyModule_C@2:
  00a65	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  00a6a	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  00a70	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR tv478[rsp], rax
$LN81@PyModule_C@2:
  00a78	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR tv478[rsp]
  00a80	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR tv487[rsp], rax
  00a88	eb 3f		 jmp	 SHORT $LN84@PyModule_C@2
$LN83@PyModule_C@2:
  00a8a	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  00a8f	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  00a97	75 1c		 jne	 SHORT $LN82@PyModule_C@2
  00a99	41 b8 27 01 00
	00		 mov	 r8d, 295		; 00000127H
  00a9f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DE@DKPNGGLH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00aa6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EM@EKIBBIEO@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAk?$AAe?$AAy?$AA?$CJ?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt@
  00aad	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00ab3	33 c0		 xor	 eax, eax
$LN82@PyModule_C@2:
  00ab5	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  00aba	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  00ac1	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR tv487[rsp], rax
$LN84@PyModule_C@2:
  00ac9	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR tv487[rsp]
  00ad1	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00ad4	89 84 24 b8 00
	00 00		 mov	 DWORD PTR tv489[rsp], eax
$LN86@PyModule_C@2:
  00adb	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR tv489[rsp]
  00ae2	89 84 24 a0 00
	00 00		 mov	 DWORD PTR tv490[rsp], eax
$LN88@PyModule_C@2:
  00ae9	83 bc 24 a0 00
	00 00 5f	 cmp	 DWORD PTR tv490[rsp], 95 ; 0000005fH
  00af1	74 57		 je	 SHORT $LN14@PyModule_C@2

; 296  :                 if (Py_VerboseFlag > 1) {

  00af3	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR Py_VerboseFlag, 1
  00afa	7e 2f		 jle	 SHORT $LN13@PyModule_C@2

; 297  :                     const char *s = _PyUnicode_AsString(key);

  00afc	48 8b 4c 24 28	 mov	 rcx, QWORD PTR key$[rsp]
  00b01	e8 00 00 00 00	 call	 PyUnicode_AsUTF8
  00b06	48 89 44 24 40	 mov	 QWORD PTR s$20702[rsp], rax

; 298  :                     if (s != NULL)

  00b0b	48 83 7c 24 40
	00		 cmp	 QWORD PTR s$20702[rsp], 0
  00b11	74 13		 je	 SHORT $LN12@PyModule_C@2

; 299  :                         PySys_WriteStderr("#   clear[1] %s\n", s);

  00b13	48 8b 54 24 40	 mov	 rdx, QWORD PTR s$20702[rsp]
  00b18	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@KBIGHKN@?$CD?5?5?5clear?$FL1?$FN?5?$CFs?6?$AA@
  00b1f	e8 00 00 00 00	 call	 PySys_WriteStderr

; 300  :                     else

  00b24	eb 05		 jmp	 SHORT $LN11@PyModule_C@2
$LN12@PyModule_C@2:

; 301  :                         PyErr_Clear();

  00b26	e8 00 00 00 00	 call	 PyErr_Clear
$LN11@PyModule_C@2:
$LN13@PyModule_C@2:

; 302  :                 }
; 303  :                 if (PyDict_SetItem(d, key, Py_None) != 0)

  00b2b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:_Py_NoneStruct
  00b32	48 8b 54 24 28	 mov	 rdx, QWORD PTR key$[rsp]
  00b37	48 8b 4c 24 30	 mov	 rcx, QWORD PTR d$[rsp]
  00b3c	e8 00 00 00 00	 call	 PyDict_SetItem
  00b41	85 c0		 test	 eax, eax
  00b43	74 05		 je	 SHORT $LN10@PyModule_C@2

; 304  :                     PyErr_Clear();

  00b45	e8 00 00 00 00	 call	 PyErr_Clear
$LN10@PyModule_C@2:
$LN14@PyModule_C@2:
$LN15@PyModule_C@2:

; 305  :             }
; 306  :         }
; 307  :     }

  00b4a	e9 e4 f4 ff ff	 jmp	 $LN17@PyModule_C@2
$LN16@PyModule_C@2:

; 308  : 
; 309  :     /* Next, clear all names except for __builtins__ */
; 310  :     pos = 0;

  00b4f	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR pos$[rsp], 0
$LN9@PyModule_C@2:

; 311  :     while (PyDict_Next(d, &pos, &key, &value)) {

  00b58	4c 8d 4c 24 20	 lea	 r9, QWORD PTR value$[rsp]
  00b5d	4c 8d 44 24 28	 lea	 r8, QWORD PTR key$[rsp]
  00b62	48 8d 54 24 38	 lea	 rdx, QWORD PTR pos$[rsp]
  00b67	48 8b 4c 24 30	 mov	 rcx, QWORD PTR d$[rsp]
  00b6c	e8 00 00 00 00	 call	 PyDict_Next
  00b71	85 c0		 test	 eax, eax
  00b73	0f 84 ef 05 00
	00		 je	 $LN8@PyModule_C@2

; 312  :         if (value != Py_None && PyUnicode_Check(key)) {

  00b79	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00b80	48 39 44 24 20	 cmp	 QWORD PTR value$[rsp], rax
  00b85	0f 84 d8 05 00
	00		 je	 $LN7@PyModule_C@2
  00b8b	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  00b90	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00b94	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00b9a	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00b9f	85 c0		 test	 eax, eax
  00ba1	0f 84 bc 05 00
	00		 je	 $LN7@PyModule_C@2

; 313  :             if (PyUnicode_READ_CHAR(key, 0) != '_' ||
; 314  :                 PyUnicode_CompareWithASCIIString(key, "__builtins__") != 0)

  00ba7	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  00bac	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00bb0	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00bb6	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00bbb	85 c0		 test	 eax, eax
  00bbd	75 1c		 jne	 SHORT $LN89@PyModule_C@2
  00bbf	41 b8 39 01 00
	00		 mov	 r8d, 313		; 00000139H
  00bc5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DE@DKPNGGLH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00bcc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@CDLJFFEK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAk?$AAe?$AAy?$AA?$CJ?$AA?$AA@
  00bd3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00bd9	33 c0		 xor	 eax, eax
$LN89@PyModule_C@2:
  00bdb	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  00be0	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00be3	c1 e8 07	 shr	 eax, 7
  00be6	83 e0 01	 and	 eax, 1
  00be9	85 c0		 test	 eax, eax
  00beb	75 1c		 jne	 SHORT $LN90@PyModule_C@2
  00bed	41 b8 39 01 00
	00		 mov	 r8d, 313		; 00000139H
  00bf3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DE@DKPNGGLH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00bfa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@GEAALFGA@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAk?$AAe?$AAy?$AA?$CJ?$AA?$AA@
  00c01	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00c07	33 c0		 xor	 eax, eax
$LN90@PyModule_C@2:
  00c09	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  00c0e	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00c12	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00c18	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00c1d	85 c0		 test	 eax, eax
  00c1f	75 1c		 jne	 SHORT $LN91@PyModule_C@2
  00c21	41 b8 39 01 00
	00		 mov	 r8d, 313		; 00000139H
  00c27	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DE@DKPNGGLH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00c2e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@EIHKBHFP@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAk?$AAe?$AAy?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00c35	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00c3b	33 c0		 xor	 eax, eax
$LN91@PyModule_C@2:
  00c3d	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  00c42	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00c45	c1 e8 07	 shr	 eax, 7
  00c48	83 e0 01	 and	 eax, 1
  00c4b	85 c0		 test	 eax, eax
  00c4d	75 1c		 jne	 SHORT $LN92@PyModule_C@2
  00c4f	41 b8 39 01 00
	00		 mov	 r8d, 313		; 00000139H
  00c55	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DE@DKPNGGLH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00c5c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@PDKIEJGH@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAk?$AAe?$AAy?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00c63	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00c69	33 c0		 xor	 eax, eax
$LN92@PyModule_C@2:
  00c6b	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  00c70	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00c73	c1 e8 02	 shr	 eax, 2
  00c76	83 e0 07	 and	 eax, 7
  00c79	83 f8 01	 cmp	 eax, 1
  00c7c	0f 85 4e 01 00
	00		 jne	 $LN121@PyModule_C@2
  00c82	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  00c87	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00c8b	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00c91	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00c96	85 c0		 test	 eax, eax
  00c98	75 1c		 jne	 SHORT $LN93@PyModule_C@2
  00c9a	41 b8 39 01 00
	00		 mov	 r8d, 313		; 00000139H
  00ca0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DE@DKPNGGLH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00ca7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@EIHKBHFP@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAk?$AAe?$AAy?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00cae	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00cb4	33 c0		 xor	 eax, eax
$LN93@PyModule_C@2:
  00cb6	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  00cbb	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00cbe	c1 e8 05	 shr	 eax, 5
  00cc1	83 e0 01	 and	 eax, 1
  00cc4	85 c0		 test	 eax, eax
  00cc6	0f 84 ae 00 00
	00		 je	 $LN99@PyModule_C@2
  00ccc	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  00cd1	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00cd5	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00cdb	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00ce0	85 c0		 test	 eax, eax
  00ce2	75 1c		 jne	 SHORT $LN94@PyModule_C@2
  00ce4	41 b8 39 01 00
	00		 mov	 r8d, 313		; 00000139H
  00cea	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DE@DKPNGGLH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00cf1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@EIHKBHFP@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAk?$AAe?$AAy?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00cf8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00cfe	33 c0		 xor	 eax, eax
$LN94@PyModule_C@2:
  00d00	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  00d05	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00d08	c1 e8 07	 shr	 eax, 7
  00d0b	83 e0 01	 and	 eax, 1
  00d0e	85 c0		 test	 eax, eax
  00d10	75 1c		 jne	 SHORT $LN95@PyModule_C@2
  00d12	41 b8 39 01 00
	00		 mov	 r8d, 313		; 00000139H
  00d18	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DE@DKPNGGLH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00d1f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@PDKIEJGH@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAk?$AAe?$AAy?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00d26	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00d2c	33 c0		 xor	 eax, eax
$LN95@PyModule_C@2:
  00d2e	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  00d33	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00d36	c1 e8 06	 shr	 eax, 6
  00d39	83 e0 01	 and	 eax, 1
  00d3c	85 c0		 test	 eax, eax
  00d3e	74 15		 je	 SHORT $LN96@PyModule_C@2
  00d40	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  00d45	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  00d4b	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR tv583[rsp], rax
  00d53	eb 13		 jmp	 SHORT $LN97@PyModule_C@2
$LN96@PyModule_C@2:
  00d55	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  00d5a	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  00d60	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR tv583[rsp], rax
$LN97@PyModule_C@2:
  00d68	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR tv583[rsp]
  00d70	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR tv592[rsp], rax
  00d78	eb 3f		 jmp	 SHORT $LN100@PyModule_C@2
$LN99@PyModule_C@2:
  00d7a	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  00d7f	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  00d87	75 1c		 jne	 SHORT $LN98@PyModule_C@2
  00d89	41 b8 39 01 00
	00		 mov	 r8d, 313		; 00000139H
  00d8f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DE@DKPNGGLH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00d96	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EM@EKIBBIEO@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAk?$AAe?$AAy?$AA?$CJ?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt@
  00d9d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00da3	33 c0		 xor	 eax, eax
$LN98@PyModule_C@2:
  00da5	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  00daa	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  00db1	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR tv592[rsp], rax
$LN100@PyModule_C@2:
  00db9	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR tv592[rsp]
  00dc1	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00dc4	89 84 24 e0 00
	00 00		 mov	 DWORD PTR tv702[rsp], eax
  00dcb	e9 1d 03 00 00	 jmp	 $LN122@PyModule_C@2
$LN121@PyModule_C@2:
  00dd0	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  00dd5	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00dd9	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00ddf	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00de4	85 c0		 test	 eax, eax
  00de6	75 1c		 jne	 SHORT $LN101@PyModule_C@2
  00de8	41 b8 39 01 00
	00		 mov	 r8d, 313		; 00000139H
  00dee	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DE@DKPNGGLH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00df5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@EIHKBHFP@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAk?$AAe?$AAy?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00dfc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00e02	33 c0		 xor	 eax, eax
$LN101@PyModule_C@2:
  00e04	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  00e09	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00e0c	c1 e8 07	 shr	 eax, 7
  00e0f	83 e0 01	 and	 eax, 1
  00e12	85 c0		 test	 eax, eax
  00e14	75 1c		 jne	 SHORT $LN102@PyModule_C@2
  00e16	41 b8 39 01 00
	00		 mov	 r8d, 313		; 00000139H
  00e1c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DE@DKPNGGLH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00e23	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@PDKIEJGH@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAk?$AAe?$AAy?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00e2a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00e30	33 c0		 xor	 eax, eax
$LN102@PyModule_C@2:
  00e32	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  00e37	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00e3a	c1 e8 02	 shr	 eax, 2
  00e3d	83 e0 07	 and	 eax, 7
  00e40	83 f8 02	 cmp	 eax, 2
  00e43	0f 85 4e 01 00
	00		 jne	 $LN119@PyModule_C@2
  00e49	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  00e4e	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00e52	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00e58	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00e5d	85 c0		 test	 eax, eax
  00e5f	75 1c		 jne	 SHORT $LN103@PyModule_C@2
  00e61	41 b8 39 01 00
	00		 mov	 r8d, 313		; 00000139H
  00e67	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DE@DKPNGGLH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00e6e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@EIHKBHFP@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAk?$AAe?$AAy?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00e75	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00e7b	33 c0		 xor	 eax, eax
$LN103@PyModule_C@2:
  00e7d	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  00e82	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00e85	c1 e8 05	 shr	 eax, 5
  00e88	83 e0 01	 and	 eax, 1
  00e8b	85 c0		 test	 eax, eax
  00e8d	0f 84 ae 00 00
	00		 je	 $LN109@PyModule_C@2
  00e93	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  00e98	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00e9c	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00ea2	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00ea7	85 c0		 test	 eax, eax
  00ea9	75 1c		 jne	 SHORT $LN104@PyModule_C@2
  00eab	41 b8 39 01 00
	00		 mov	 r8d, 313		; 00000139H
  00eb1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DE@DKPNGGLH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00eb8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@EIHKBHFP@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAk?$AAe?$AAy?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00ebf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00ec5	33 c0		 xor	 eax, eax
$LN104@PyModule_C@2:
  00ec7	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  00ecc	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00ecf	c1 e8 07	 shr	 eax, 7
  00ed2	83 e0 01	 and	 eax, 1
  00ed5	85 c0		 test	 eax, eax
  00ed7	75 1c		 jne	 SHORT $LN105@PyModule_C@2
  00ed9	41 b8 39 01 00
	00		 mov	 r8d, 313		; 00000139H
  00edf	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DE@DKPNGGLH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00ee6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@PDKIEJGH@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAk?$AAe?$AAy?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00eed	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00ef3	33 c0		 xor	 eax, eax
$LN105@PyModule_C@2:
  00ef5	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  00efa	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00efd	c1 e8 06	 shr	 eax, 6
  00f00	83 e0 01	 and	 eax, 1
  00f03	85 c0		 test	 eax, eax
  00f05	74 15		 je	 SHORT $LN106@PyModule_C@2
  00f07	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  00f0c	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  00f12	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR tv647[rsp], rax
  00f1a	eb 13		 jmp	 SHORT $LN107@PyModule_C@2
$LN106@PyModule_C@2:
  00f1c	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  00f21	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  00f27	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR tv647[rsp], rax
$LN107@PyModule_C@2:
  00f2f	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR tv647[rsp]
  00f37	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR tv656[rsp], rax
  00f3f	eb 3f		 jmp	 SHORT $LN110@PyModule_C@2
$LN109@PyModule_C@2:
  00f41	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  00f46	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  00f4e	75 1c		 jne	 SHORT $LN108@PyModule_C@2
  00f50	41 b8 39 01 00
	00		 mov	 r8d, 313		; 00000139H
  00f56	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DE@DKPNGGLH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00f5d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EM@EKIBBIEO@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAk?$AAe?$AAy?$AA?$CJ?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt@
  00f64	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00f6a	33 c0		 xor	 eax, eax
$LN108@PyModule_C@2:
  00f6c	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  00f71	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  00f78	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR tv656[rsp], rax
$LN110@PyModule_C@2:
  00f80	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR tv656[rsp]
  00f88	0f b7 00	 movzx	 eax, WORD PTR [rax]
  00f8b	89 84 24 f8 00
	00 00		 mov	 DWORD PTR tv701[rsp], eax
  00f92	e9 48 01 00 00	 jmp	 $LN120@PyModule_C@2
$LN119@PyModule_C@2:
  00f97	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  00f9c	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00fa0	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00fa6	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00fab	85 c0		 test	 eax, eax
  00fad	75 1c		 jne	 SHORT $LN111@PyModule_C@2
  00faf	41 b8 39 01 00
	00		 mov	 r8d, 313		; 00000139H
  00fb5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DE@DKPNGGLH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00fbc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@EIHKBHFP@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAk?$AAe?$AAy?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00fc3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00fc9	33 c0		 xor	 eax, eax
$LN111@PyModule_C@2:
  00fcb	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  00fd0	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00fd3	c1 e8 05	 shr	 eax, 5
  00fd6	83 e0 01	 and	 eax, 1
  00fd9	85 c0		 test	 eax, eax
  00fdb	0f 84 ae 00 00
	00		 je	 $LN117@PyModule_C@2
  00fe1	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  00fe6	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00fea	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00ff0	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00ff5	85 c0		 test	 eax, eax
  00ff7	75 1c		 jne	 SHORT $LN112@PyModule_C@2
  00ff9	41 b8 39 01 00
	00		 mov	 r8d, 313		; 00000139H
  00fff	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DE@DKPNGGLH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  01006	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@EIHKBHFP@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAk?$AAe?$AAy?$AA?$CJ?$AA?$CJ?$AA?$AA@
  0100d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  01013	33 c0		 xor	 eax, eax
$LN112@PyModule_C@2:
  01015	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  0101a	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0101d	c1 e8 07	 shr	 eax, 7
  01020	83 e0 01	 and	 eax, 1
  01023	85 c0		 test	 eax, eax
  01025	75 1c		 jne	 SHORT $LN113@PyModule_C@2
  01027	41 b8 39 01 00
	00		 mov	 r8d, 313		; 00000139H
  0102d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DE@DKPNGGLH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  01034	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@PDKIEJGH@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAk?$AAe?$AAy?$AA?$CJ?$AA?$CJ?$AA?$AA@
  0103b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  01041	33 c0		 xor	 eax, eax
$LN113@PyModule_C@2:
  01043	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  01048	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0104b	c1 e8 06	 shr	 eax, 6
  0104e	83 e0 01	 and	 eax, 1
  01051	85 c0		 test	 eax, eax
  01053	74 15		 je	 SHORT $LN114@PyModule_C@2
  01055	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  0105a	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  01060	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR tv691[rsp], rax
  01068	eb 13		 jmp	 SHORT $LN115@PyModule_C@2
$LN114@PyModule_C@2:
  0106a	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  0106f	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  01075	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR tv691[rsp], rax
$LN115@PyModule_C@2:
  0107d	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR tv691[rsp]
  01085	48 89 84 24 08
	01 00 00	 mov	 QWORD PTR tv700[rsp], rax
  0108d	eb 3f		 jmp	 SHORT $LN118@PyModule_C@2
$LN117@PyModule_C@2:
  0108f	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  01094	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  0109c	75 1c		 jne	 SHORT $LN116@PyModule_C@2
  0109e	41 b8 39 01 00
	00		 mov	 r8d, 313		; 00000139H
  010a4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DE@DKPNGGLH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  010ab	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EM@EKIBBIEO@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAk?$AAe?$AAy?$AA?$CJ?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt@
  010b2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  010b8	33 c0		 xor	 eax, eax
$LN116@PyModule_C@2:
  010ba	48 8b 44 24 28	 mov	 rax, QWORD PTR key$[rsp]
  010bf	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  010c6	48 89 84 24 08
	01 00 00	 mov	 QWORD PTR tv700[rsp], rax
$LN118@PyModule_C@2:
  010ce	48 8b 84 24 08
	01 00 00	 mov	 rax, QWORD PTR tv700[rsp]
  010d6	8b 00		 mov	 eax, DWORD PTR [rax]
  010d8	89 84 24 f8 00
	00 00		 mov	 DWORD PTR tv701[rsp], eax
$LN120@PyModule_C@2:
  010df	8b 84 24 f8 00
	00 00		 mov	 eax, DWORD PTR tv701[rsp]
  010e6	89 84 24 e0 00
	00 00		 mov	 DWORD PTR tv702[rsp], eax
$LN122@PyModule_C@2:
  010ed	83 bc 24 e0 00
	00 00 5f	 cmp	 DWORD PTR tv702[rsp], 95 ; 0000005fH
  010f5	75 15		 jne	 SHORT $LN5@PyModule_C@2
  010f7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@MNFFDJII@__builtins__?$AA@
  010fe	48 8b 4c 24 28	 mov	 rcx, QWORD PTR key$[rsp]
  01103	e8 00 00 00 00	 call	 PyUnicode_CompareWithASCIIString
  01108	85 c0		 test	 eax, eax
  0110a	74 57		 je	 SHORT $LN6@PyModule_C@2
$LN5@PyModule_C@2:

; 315  :             {
; 316  :                 if (Py_VerboseFlag > 1) {

  0110c	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR Py_VerboseFlag, 1
  01113	7e 2f		 jle	 SHORT $LN4@PyModule_C@2

; 317  :                     const char *s = _PyUnicode_AsString(key);

  01115	48 8b 4c 24 28	 mov	 rcx, QWORD PTR key$[rsp]
  0111a	e8 00 00 00 00	 call	 PyUnicode_AsUTF8
  0111f	48 89 44 24 48	 mov	 QWORD PTR s$20780[rsp], rax

; 318  :                     if (s != NULL)

  01124	48 83 7c 24 48
	00		 cmp	 QWORD PTR s$20780[rsp], 0
  0112a	74 13		 je	 SHORT $LN3@PyModule_C@2

; 319  :                         PySys_WriteStderr("#   clear[2] %s\n", s);

  0112c	48 8b 54 24 48	 mov	 rdx, QWORD PTR s$20780[rsp]
  01131	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@DLPAHNDA@?$CD?5?5?5clear?$FL2?$FN?5?$CFs?6?$AA@
  01138	e8 00 00 00 00	 call	 PySys_WriteStderr

; 320  :                     else

  0113d	eb 05		 jmp	 SHORT $LN2@PyModule_C@2
$LN3@PyModule_C@2:

; 321  :                         PyErr_Clear();

  0113f	e8 00 00 00 00	 call	 PyErr_Clear
$LN2@PyModule_C@2:
$LN4@PyModule_C@2:

; 322  :                 }
; 323  :                 if (PyDict_SetItem(d, key, Py_None) != 0)

  01144	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:_Py_NoneStruct
  0114b	48 8b 54 24 28	 mov	 rdx, QWORD PTR key$[rsp]
  01150	48 8b 4c 24 30	 mov	 rcx, QWORD PTR d$[rsp]
  01155	e8 00 00 00 00	 call	 PyDict_SetItem
  0115a	85 c0		 test	 eax, eax
  0115c	74 05		 je	 SHORT $LN1@PyModule_C@2

; 324  :                     PyErr_Clear();

  0115e	e8 00 00 00 00	 call	 PyErr_Clear
$LN1@PyModule_C@2:
$LN6@PyModule_C@2:
$LN7@PyModule_C@2:

; 325  :             }
; 326  :         }
; 327  :     }

  01163	e9 f0 f9 ff ff	 jmp	 $LN9@PyModule_C@2
$LN8@PyModule_C@2:
$LN19@PyModule_C@2:

; 328  : 
; 329  :     /* Note: we leave __builtins__ in place, so that destructors
; 330  :        of non-global objects defined in this module can still use
; 331  :        builtins, in particularly 'None'. */
; 332  : 
; 333  : }

  01168	48 81 c4 18 01
	00 00		 add	 rsp, 280		; 00000118H
  0116f	c3		 ret	 0
_PyModule_Clear ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BE@LPGMACHM@U?$HMO?3module?4__init__?$AA@ ; `string'
EXTRN	PyArg_ParseTupleAndKeywords:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$module_init DD imagerel module_init
	DD	imagerel module_init+240
	DD	imagerel $unwind$module_init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$module_init DD 011301H
	DD	0a213H
xdata	ENDS
;	COMDAT ??_C@_0BE@LPGMACHM@U?$HMO?3module?4__init__?$AA@
CONST	SEGMENT
??_C@_0BE@LPGMACHM@U?$HMO?3module?4__init__?$AA@ DB 'U|O:module.__init__', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT module_init
_TEXT	SEGMENT
dict$ = 48
name$ = 56
doc$ = 64
m$ = 96
args$ = 104
kwds$ = 112
module_init PROC					; COMDAT

; 339  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 340  :     static char *kwlist[] = {"name", "doc", NULL};
; 341  :     PyObject *dict, *name = Py_None, *doc = Py_None;

  00013	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0001a	48 89 44 24 38	 mov	 QWORD PTR name$[rsp], rax
  0001f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00026	48 89 44 24 40	 mov	 QWORD PTR doc$[rsp], rax

; 342  :     if (!PyArg_ParseTupleAndKeywords(args, kwds, "U|O:module.__init__",
; 343  :                                      kwlist, &name, &doc))

  0002b	48 8d 44 24 40	 lea	 rax, QWORD PTR doc$[rsp]
  00030	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00035	48 8d 44 24 38	 lea	 rax, QWORD PTR name$[rsp]
  0003a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0003f	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?kwlist@?1??module_init@@9@9
  00046	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BE@LPGMACHM@U?$HMO?3module?4__init__?$AA@
  0004d	48 8b 54 24 70	 mov	 rdx, QWORD PTR kwds$[rsp]
  00052	48 8b 4c 24 68	 mov	 rcx, QWORD PTR args$[rsp]
  00057	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  0005c	85 c0		 test	 eax, eax
  0005e	75 0a		 jne	 SHORT $LN5@module_ini

; 344  :         return -1;

  00060	b8 ff ff ff ff	 mov	 eax, -1
  00065	e9 81 00 00 00	 jmp	 $LN6@module_ini
$LN5@module_ini:

; 345  :     dict = m->md_dict;

  0006a	48 8b 44 24 60	 mov	 rax, QWORD PTR m$[rsp]
  0006f	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00073	48 89 44 24 30	 mov	 QWORD PTR dict$[rsp], rax

; 346  :     if (dict == NULL) {

  00078	48 83 7c 24 30
	00		 cmp	 QWORD PTR dict$[rsp], 0
  0007e	75 27		 jne	 SHORT $LN4@module_ini

; 347  :         dict = PyDict_New();

  00080	e8 00 00 00 00	 call	 PyDict_New
  00085	48 89 44 24 30	 mov	 QWORD PTR dict$[rsp], rax

; 348  :         if (dict == NULL)

  0008a	48 83 7c 24 30
	00		 cmp	 QWORD PTR dict$[rsp], 0
  00090	75 07		 jne	 SHORT $LN3@module_ini

; 349  :             return -1;

  00092	b8 ff ff ff ff	 mov	 eax, -1
  00097	eb 52		 jmp	 SHORT $LN6@module_ini
$LN3@module_ini:

; 350  :         m->md_dict = dict;

  00099	48 8b 44 24 60	 mov	 rax, QWORD PTR m$[rsp]
  0009e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR dict$[rsp]
  000a3	48 89 48 60	 mov	 QWORD PTR [rax+96], rcx
$LN4@module_ini:

; 351  :     }
; 352  :     if (PyDict_SetItemString(dict, "__name__", name) < 0)

  000a7	4c 8b 44 24 38	 mov	 r8, QWORD PTR name$[rsp]
  000ac	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08BHKDPDAA@__name__?$AA@
  000b3	48 8b 4c 24 30	 mov	 rcx, QWORD PTR dict$[rsp]
  000b8	e8 00 00 00 00	 call	 PyDict_SetItemString
  000bd	85 c0		 test	 eax, eax
  000bf	7d 07		 jge	 SHORT $LN2@module_ini

; 353  :         return -1;

  000c1	b8 ff ff ff ff	 mov	 eax, -1
  000c6	eb 23		 jmp	 SHORT $LN6@module_ini
$LN2@module_ini:

; 354  :     if (PyDict_SetItemString(dict, "__doc__", doc) < 0)

  000c8	4c 8b 44 24 40	 mov	 r8, QWORD PTR doc$[rsp]
  000cd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07DIBBIFIJ@__doc__?$AA@
  000d4	48 8b 4c 24 30	 mov	 rcx, QWORD PTR dict$[rsp]
  000d9	e8 00 00 00 00	 call	 PyDict_SetItemString
  000de	85 c0		 test	 eax, eax
  000e0	7d 07		 jge	 SHORT $LN1@module_ini

; 355  :         return -1;

  000e2	b8 ff ff ff ff	 mov	 eax, -1
  000e7	eb 02		 jmp	 SHORT $LN6@module_ini
$LN1@module_ini:

; 356  :     return 0;

  000e9	33 c0		 xor	 eax, eax
$LN6@module_ini:

; 357  : }

  000eb	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000ef	c3		 ret	 0
module_init ENDP
_TEXT	ENDS
EXTRN	_PyMem_DebugFree:PROC
EXTRN	_PxMem_Free:PROC
EXTRN	PyObject_GC_UnTrack:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$module_dealloc DD imagerel module_dealloc
	DD	imagerel module_dealloc+198
	DD	imagerel $unwind$module_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$module_dealloc DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT module_dealloc
_TEXT	SEGMENT
tv86 = 32
m$ = 64
module_dealloc PROC					; COMDAT

; 361  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 362  :     PyObject_GC_UnTrack(m);

  00009	48 8b 4c 24 40	 mov	 rcx, QWORD PTR m$[rsp]
  0000e	e8 00 00 00 00	 call	 PyObject_GC_UnTrack

; 363  :     if (m->md_def && m->md_def->m_free)

  00013	48 8b 44 24 40	 mov	 rax, QWORD PTR m$[rsp]
  00018	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  0001d	74 27		 je	 SHORT $LN3@module_dea
  0001f	48 8b 44 24 40	 mov	 rax, QWORD PTR m$[rsp]
  00024	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00028	48 83 b8 b8 00
	00 00 00	 cmp	 QWORD PTR [rax+184], 0
  00030	74 14		 je	 SHORT $LN3@module_dea

; 364  :         m->md_def->m_free(m);

  00032	48 8b 44 24 40	 mov	 rax, QWORD PTR m$[rsp]
  00037	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0003b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR m$[rsp]
  00040	ff 90 b8 00 00
	00		 call	 QWORD PTR [rax+184]
$LN3@module_dea:

; 365  :     if (m->md_dict != NULL) {

  00046	48 8b 44 24 40	 mov	 rax, QWORD PTR m$[rsp]
  0004b	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00050	74 18		 je	 SHORT $LN2@module_dea

; 366  :         _PyModule_Clear((PyObject *)m);

  00052	48 8b 4c 24 40	 mov	 rcx, QWORD PTR m$[rsp]
  00057	e8 00 00 00 00	 call	 _PyModule_Clear

; 367  :         Py_DECREF(m->md_dict);

  0005c	48 8b 44 24 40	 mov	 rax, QWORD PTR m$[rsp]
  00061	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00065	e8 00 00 00 00	 call	 _Py_DecRef
$LN2@module_dea:

; 368  :     }
; 369  :     if (m->md_state != NULL)

  0006a	48 8b 44 24 40	 mov	 rax, QWORD PTR m$[rsp]
  0006f	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  00074	74 37		 je	 SHORT $LN1@module_dea

; 370  :         PyMem_FREE(m->md_state);

  00076	e8 00 00 00 00	 call	 _Py_PXCTX
  0007b	85 c0		 test	 eax, eax
  0007d	74 18		 je	 SHORT $LN6@module_dea
  0007f	48 8b 44 24 40	 mov	 rax, QWORD PTR m$[rsp]
  00084	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  00088	e8 00 00 00 00	 call	 _PxMem_Free
  0008d	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv86[rsp], 0
  00095	eb 16		 jmp	 SHORT $LN7@module_dea
$LN6@module_dea:
  00097	48 8b 44 24 40	 mov	 rax, QWORD PTR m$[rsp]
  0009c	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  000a0	e8 00 00 00 00	 call	 _PyMem_DebugFree
  000a5	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv86[rsp], 0
$LN7@module_dea:
$LN1@module_dea:

; 371  :     Py_TYPE(m)->tp_free((PyObject *)m);

  000ad	48 8b 44 24 40	 mov	 rax, QWORD PTR m$[rsp]
  000b2	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000b6	48 8b 4c 24 40	 mov	 rcx, QWORD PTR m$[rsp]
  000bb	ff 90 98 01 00
	00		 call	 QWORD PTR [rax+408]

; 372  : }

  000c1	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000c5	c3		 ret	 0
module_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BE@BCHJIIMJ@?$DMmodule?5?$CFR?5from?5?$CFR?$DO?$AA@ ; `string'
PUBLIC	??_C@_0BB@CIDANPGN@?$DMmodule?5?$CFR?5?$CI?$CFR?$CJ?$DO?$AA@ ; `string'
PUBLIC	??_C@_0M@KHGFKAFI@?$DMmodule?5?$CFR?$DO?$AA@	; `string'
PUBLIC	??_C@_01OGPIMHDM@?$DP?$AA@			; `string'
PUBLIC	??_C@_0M@PGMDLPDG@module_repr?$AA@		; `string'
PUBLIC	??_C@_03IELNPCCE@?$CIO?$CJ?$AA@			; `string'
PUBLIC	??_C@_0L@PADOMILC@__loader__?$AA@		; `string'
EXTRN	PyUnicode_FromFormat:PROC
EXTRN	PyUnicode_FromStringAndSize:PROC
EXTRN	PyObject_CallMethod:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$module_repr DD imagerel module_repr
	DD	imagerel module_repr+343
	DD	imagerel $unwind$module_repr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$module_repr DD 010901H
	DD	0a209H
xdata	ENDS
;	COMDAT ??_C@_0BE@BCHJIIMJ@?$DMmodule?5?$CFR?5from?5?$CFR?$DO?$AA@
CONST	SEGMENT
??_C@_0BE@BCHJIIMJ@?$DMmodule?5?$CFR?5from?5?$CFR?$DO?$AA@ DB '<module %R'
	DB	' from %R>', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@CIDANPGN@?$DMmodule?5?$CFR?5?$CI?$CFR?$CJ?$DO?$AA@
CONST	SEGMENT
??_C@_0BB@CIDANPGN@?$DMmodule?5?$CFR?5?$CI?$CFR?$CJ?$DO?$AA@ DB '<module '
	DB	'%R (%R)>', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@KHGFKAFI@?$DMmodule?5?$CFR?$DO?$AA@
CONST	SEGMENT
??_C@_0M@KHGFKAFI@?$DMmodule?5?$CFR?$DO?$AA@ DB '<module %R>', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01OGPIMHDM@?$DP?$AA@
CONST	SEGMENT
??_C@_01OGPIMHDM@?$DP?$AA@ DB '?', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@PGMDLPDG@module_repr?$AA@
CONST	SEGMENT
??_C@_0M@PGMDLPDG@module_repr?$AA@ DB 'module_repr', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03IELNPCCE@?$CIO?$CJ?$AA@
CONST	SEGMENT
??_C@_03IELNPCCE@?$CIO?$CJ?$AA@ DB '(O)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@PADOMILC@__loader__?$AA@
CONST	SEGMENT
??_C@_0L@PADOMILC@__loader__?$AA@ DB '__loader__', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT module_repr
_TEXT	SEGMENT
name$ = 48
repr$ = 56
loader$ = 64
filename$ = 72
m$ = 96
module_repr PROC					; COMDAT

; 376  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 377  :     PyObject *name, *filename, *repr, *loader = NULL;

  00009	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR loader$[rsp], 0

; 378  : 
; 379  :     /* See if the module has an __loader__.  If it does, give the loader the
; 380  :      * first shot at producing a repr for the module.
; 381  :      */
; 382  :     if (m->md_dict != NULL) {

  00012	48 8b 44 24 60	 mov	 rax, QWORD PTR m$[rsp]
  00017	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  0001c	74 1a		 je	 SHORT $LN10@module_rep

; 383  :         loader = PyDict_GetItemString(m->md_dict, "__loader__");

  0001e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@PADOMILC@__loader__?$AA@
  00025	48 8b 44 24 60	 mov	 rax, QWORD PTR m$[rsp]
  0002a	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  0002e	e8 00 00 00 00	 call	 PyDict_GetItemString
  00033	48 89 44 24 40	 mov	 QWORD PTR loader$[rsp], rax
$LN10@module_rep:

; 384  :     }
; 385  :     if (loader != NULL) {

  00038	48 83 7c 24 40
	00		 cmp	 QWORD PTR loader$[rsp], 0
  0003e	74 44		 je	 SHORT $LN9@module_rep

; 386  :         repr = PyObject_CallMethod(loader, "module_repr", "(O)",
; 387  :                                    (PyObject *)m, NULL);

  00040	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  00049	4c 8b 4c 24 60	 mov	 r9, QWORD PTR m$[rsp]
  0004e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03IELNPCCE@?$CIO?$CJ?$AA@
  00055	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@PGMDLPDG@module_repr?$AA@
  0005c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR loader$[rsp]
  00061	e8 00 00 00 00	 call	 PyObject_CallMethod
  00066	48 89 44 24 38	 mov	 QWORD PTR repr$[rsp], rax

; 388  :         if (repr == NULL) {

  0006b	48 83 7c 24 38
	00		 cmp	 QWORD PTR repr$[rsp], 0
  00071	75 07		 jne	 SHORT $LN8@module_rep

; 389  :             PyErr_Clear();

  00073	e8 00 00 00 00	 call	 PyErr_Clear

; 390  :         }
; 391  :         else {

  00078	eb 0a		 jmp	 SHORT $LN7@module_rep
$LN8@module_rep:

; 392  :             return repr;

  0007a	48 8b 44 24 38	 mov	 rax, QWORD PTR repr$[rsp]
  0007f	e9 ce 00 00 00	 jmp	 $LN11@module_rep
$LN7@module_rep:
$LN9@module_rep:

; 393  :         }
; 394  :     }
; 395  :     /* __loader__.module_repr(m) did not provide us with a repr.  Next, see if
; 396  :      * the module has an __file__.  If it doesn't then use repr(__loader__) if
; 397  :      * it exists, otherwise, just use module.__name__.
; 398  :      */
; 399  :     name = PyModule_GetNameObject((PyObject *)m);

  00084	48 8b 4c 24 60	 mov	 rcx, QWORD PTR m$[rsp]
  00089	e8 00 00 00 00	 call	 PyModule_GetNameObject
  0008e	48 89 44 24 30	 mov	 QWORD PTR name$[rsp], rax

; 400  :     if (name == NULL) {

  00093	48 83 7c 24 30
	00		 cmp	 QWORD PTR name$[rsp], 0
  00099	75 2a		 jne	 SHORT $LN6@module_rep

; 401  :         PyErr_Clear();

  0009b	e8 00 00 00 00	 call	 PyErr_Clear

; 402  :         name = PyUnicode_FromStringAndSize("?", 1);

  000a0	ba 01 00 00 00	 mov	 edx, 1
  000a5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01OGPIMHDM@?$DP?$AA@
  000ac	e8 00 00 00 00	 call	 PyUnicode_FromStringAndSize
  000b1	48 89 44 24 30	 mov	 QWORD PTR name$[rsp], rax

; 403  :         if (name == NULL)

  000b6	48 83 7c 24 30
	00		 cmp	 QWORD PTR name$[rsp], 0
  000bc	75 07		 jne	 SHORT $LN5@module_rep

; 404  :             return NULL;

  000be	33 c0		 xor	 eax, eax
  000c0	e9 8d 00 00 00	 jmp	 $LN11@module_rep
$LN5@module_rep:
$LN6@module_rep:

; 405  :     }
; 406  :     filename = PyModule_GetFilenameObject((PyObject *)m);

  000c5	48 8b 4c 24 60	 mov	 rcx, QWORD PTR m$[rsp]
  000ca	e8 00 00 00 00	 call	 PyModule_GetFilenameObject
  000cf	48 89 44 24 48	 mov	 QWORD PTR filename$[rsp], rax

; 407  :     if (filename == NULL) {

  000d4	48 83 7c 24 48
	00		 cmp	 QWORD PTR filename$[rsp], 0
  000da	75 42		 jne	 SHORT $LN4@module_rep

; 408  :         PyErr_Clear();

  000dc	e8 00 00 00 00	 call	 PyErr_Clear

; 409  :         /* There's no m.__file__, so if there was an __loader__, use that in
; 410  :          * the repr, otherwise, the only thing you can use is m.__name__
; 411  :          */
; 412  :         if (loader == NULL) {

  000e1	48 83 7c 24 40
	00		 cmp	 QWORD PTR loader$[rsp], 0
  000e7	75 18		 jne	 SHORT $LN3@module_rep

; 413  :             repr = PyUnicode_FromFormat("<module %R>", name);

  000e9	48 8b 54 24 30	 mov	 rdx, QWORD PTR name$[rsp]
  000ee	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@KHGFKAFI@?$DMmodule?5?$CFR?$DO?$AA@
  000f5	e8 00 00 00 00	 call	 PyUnicode_FromFormat
  000fa	48 89 44 24 38	 mov	 QWORD PTR repr$[rsp], rax

; 414  :         }
; 415  :         else {

  000ff	eb 1b		 jmp	 SHORT $LN2@module_rep
$LN3@module_rep:

; 416  :             repr = PyUnicode_FromFormat("<module %R (%R)>", name, loader);

  00101	4c 8b 44 24 40	 mov	 r8, QWORD PTR loader$[rsp]
  00106	48 8b 54 24 30	 mov	 rdx, QWORD PTR name$[rsp]
  0010b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@CIDANPGN@?$DMmodule?5?$CFR?5?$CI?$CFR?$CJ?$DO?$AA@
  00112	e8 00 00 00 00	 call	 PyUnicode_FromFormat
  00117	48 89 44 24 38	 mov	 QWORD PTR repr$[rsp], rax
$LN2@module_rep:

; 417  :         }
; 418  :     }
; 419  :     /* Finally, use m.__file__ */
; 420  :     else {

  0011c	eb 25		 jmp	 SHORT $LN1@module_rep
$LN4@module_rep:

; 421  :         repr = PyUnicode_FromFormat("<module %R from %R>", name, filename);

  0011e	4c 8b 44 24 48	 mov	 r8, QWORD PTR filename$[rsp]
  00123	48 8b 54 24 30	 mov	 rdx, QWORD PTR name$[rsp]
  00128	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@BCHJIIMJ@?$DMmodule?5?$CFR?5from?5?$CFR?$DO?$AA@
  0012f	e8 00 00 00 00	 call	 PyUnicode_FromFormat
  00134	48 89 44 24 38	 mov	 QWORD PTR repr$[rsp], rax

; 422  :         Py_DECREF(filename);

  00139	48 8b 4c 24 48	 mov	 rcx, QWORD PTR filename$[rsp]
  0013e	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@module_rep:

; 423  :     }
; 424  :     Py_DECREF(name);

  00143	48 8b 4c 24 30	 mov	 rcx, QWORD PTR name$[rsp]
  00148	e8 00 00 00 00	 call	 _Py_DecRef

; 425  :     return repr;

  0014d	48 8b 44 24 38	 mov	 rax, QWORD PTR repr$[rsp]
$LN11@module_rep:

; 426  : }

  00152	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00156	c3		 ret	 0
module_repr ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BA@COMOIAOB@module_traverse?$AA@		; `string'
EXTRN	_PyParallel_ContextGuardFailure:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$module_traverse DD imagerel module_traverse
	DD	imagerel module_traverse+194
	DD	imagerel $unwind$module_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$module_traverse DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT ??_C@_0BA@COMOIAOB@module_traverse?$AA@
CONST	SEGMENT
??_C@_0BA@COMOIAOB@module_traverse?$AA@ DB 'module_traverse', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT module_traverse
_TEXT	SEGMENT
res$20872 = 32
vret$20881 = 36
m$ = 64
visit$ = 72
arg$ = 80
module_traverse PROC					; COMDAT

; 430  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 431  :     if (m->md_def && m->md_def->m_traverse) {

  00013	48 8b 44 24 40	 mov	 rax, QWORD PTR m$[rsp]
  00018	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  0001d	74 42		 je	 SHORT $LN8@module_tra
  0001f	48 8b 44 24 40	 mov	 rax, QWORD PTR m$[rsp]
  00024	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00028	48 83 b8 a8 00
	00 00 00	 cmp	 QWORD PTR [rax+168], 0
  00030	74 2f		 je	 SHORT $LN8@module_tra

; 432  :         int res = m->md_def->m_traverse((PyObject*)m, visit, arg);

  00032	48 8b 44 24 40	 mov	 rax, QWORD PTR m$[rsp]
  00037	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0003b	4c 8b 44 24 50	 mov	 r8, QWORD PTR arg$[rsp]
  00040	48 8b 54 24 48	 mov	 rdx, QWORD PTR visit$[rsp]
  00045	48 8b 4c 24 40	 mov	 rcx, QWORD PTR m$[rsp]
  0004a	ff 90 a8 00 00
	00		 call	 QWORD PTR [rax+168]
  00050	89 44 24 20	 mov	 DWORD PTR res$20872[rsp], eax

; 433  :         if (res)

  00054	83 7c 24 20 00	 cmp	 DWORD PTR res$20872[rsp], 0
  00059	74 06		 je	 SHORT $LN7@module_tra

; 434  :             return res;

  0005b	8b 44 24 20	 mov	 eax, DWORD PTR res$20872[rsp]
  0005f	eb 5c		 jmp	 SHORT $LN9@module_tra
$LN7@module_tra:
$LN8@module_tra:
$LN6@module_tra:

; 435  :     }
; 436  :     Py_VISIT(m->md_dict);

  00061	e8 00 00 00 00	 call	 _Py_PXCTX
  00066	85 c0		 test	 eax, eax
  00068	74 1c		 je	 SHORT $LN3@module_tra
  0006a	45 33 c9	 xor	 r9d, r9d
  0006d	41 b8 b4 01 00
	00		 mov	 r8d, 436		; 000001b4H
  00073	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@BABLDALH@?4?4?2Objects?2moduleobject?4c?$AA@
  0007a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@COMOIAOB@module_traverse?$AA@
  00081	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@module_tra:
  00086	48 8b 44 24 40	 mov	 rax, QWORD PTR m$[rsp]
  0008b	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00090	74 23		 je	 SHORT $LN2@module_tra
  00092	48 8b 54 24 50	 mov	 rdx, QWORD PTR arg$[rsp]
  00097	48 8b 44 24 40	 mov	 rax, QWORD PTR m$[rsp]
  0009c	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  000a0	ff 54 24 48	 call	 QWORD PTR visit$[rsp]
  000a4	89 44 24 24	 mov	 DWORD PTR vret$20881[rsp], eax
  000a8	83 7c 24 24 00	 cmp	 DWORD PTR vret$20881[rsp], 0
  000ad	74 06		 je	 SHORT $LN1@module_tra
  000af	8b 44 24 24	 mov	 eax, DWORD PTR vret$20881[rsp]
  000b3	eb 08		 jmp	 SHORT $LN9@module_tra
$LN1@module_tra:
$LN2@module_tra:
  000b5	33 c0		 xor	 eax, eax
  000b7	85 c0		 test	 eax, eax
  000b9	75 a6		 jne	 SHORT $LN6@module_tra

; 437  :     return 0;

  000bb	33 c0		 xor	 eax, eax
$LN9@module_tra:

; 438  : }

  000bd	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000c1	c3		 ret	 0
module_traverse ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@GOHIEEJJ@module_clear?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$module_clear DD imagerel module_clear
	DD	imagerel module_clear+185
	DD	imagerel $unwind$module_clear
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$module_clear DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0N@GOHIEEJJ@module_clear?$AA@
CONST	SEGMENT
??_C@_0N@GOHIEEJJ@module_clear?$AA@ DB 'module_clear', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT module_clear
_TEXT	SEGMENT
res$20889 = 48
_py_tmp$20897 = 56
m$ = 80
module_clear PROC					; COMDAT

; 442  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 443  :     if (m->md_def && m->md_def->m_clear) {

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR m$[rsp]
  0000e	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  00013	74 38		 je	 SHORT $LN6@module_cle
  00015	48 8b 44 24 50	 mov	 rax, QWORD PTR m$[rsp]
  0001a	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001e	48 83 b8 b0 00
	00 00 00	 cmp	 QWORD PTR [rax+176], 0
  00026	74 25		 je	 SHORT $LN6@module_cle

; 444  :         int res = m->md_def->m_clear((PyObject*)m);

  00028	48 8b 44 24 50	 mov	 rax, QWORD PTR m$[rsp]
  0002d	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00031	48 8b 4c 24 50	 mov	 rcx, QWORD PTR m$[rsp]
  00036	ff 90 b0 00 00
	00		 call	 QWORD PTR [rax+176]
  0003c	89 44 24 30	 mov	 DWORD PTR res$20889[rsp], eax

; 445  :         if (res)

  00040	83 7c 24 30 00	 cmp	 DWORD PTR res$20889[rsp], 0
  00045	74 06		 je	 SHORT $LN5@module_cle

; 446  :             return res;

  00047	8b 44 24 30	 mov	 eax, DWORD PTR res$20889[rsp]
  0004b	eb 67		 jmp	 SHORT $LN7@module_cle
$LN5@module_cle:
$LN6@module_cle:
$LN4@module_cle:

; 447  :     }
; 448  :     Py_CLEAR(m->md_dict);

  0004d	48 8b 44 24 50	 mov	 rax, QWORD PTR m$[rsp]
  00052	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00057	74 53		 je	 SHORT $LN1@module_cle
  00059	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00061	48 8b 44 24 50	 mov	 rax, QWORD PTR m$[rsp]
  00066	4c 8b 48 60	 mov	 r9, QWORD PTR [rax+96]
  0006a	41 b8 c0 01 00
	00		 mov	 r8d, 448		; 000001c0H
  00070	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@BABLDALH@?4?4?2Objects?2moduleobject?4c?$AA@
  00077	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@GOHIEEJJ@module_clear?$AA@
  0007e	e8 00 00 00 00	 call	 _PyParallel_Guard
  00083	85 c0		 test	 eax, eax
  00085	75 25		 jne	 SHORT $LN1@module_cle
  00087	48 8b 44 24 50	 mov	 rax, QWORD PTR m$[rsp]
  0008c	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00090	48 89 44 24 38	 mov	 QWORD PTR _py_tmp$20897[rsp], rax
  00095	48 8b 44 24 50	 mov	 rax, QWORD PTR m$[rsp]
  0009a	48 c7 40 60 00
	00 00 00	 mov	 QWORD PTR [rax+96], 0
  000a2	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _py_tmp$20897[rsp]
  000a7	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@module_cle:
  000ac	33 c0		 xor	 eax, eax
  000ae	85 c0		 test	 eax, eax
  000b0	75 9b		 jne	 SHORT $LN4@module_cle

; 449  :     return 0;

  000b2	33 c0		 xor	 eax, eax
$LN7@module_cle:

; 450  : }

  000b4	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000b8	c3		 ret	 0
module_clear ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CE@GGOPNIFL@?$CF?4200s?4__dict__?5is?5not?5a?5diction@ ; `string'
EXTRN	PyErr_Format:PROC
EXTRN	PyExc_TypeError:QWORD
EXTRN	PyDict_Keys:PROC
EXTRN	_PyObject_GetAttrId:PROC
EXTRN	_tls_index:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$module_dir DD imagerel module_dir
	DD	imagerel module_dir+197
	DD	imagerel $unwind$module_dir
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$module_dir DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_0CE@GGOPNIFL@?$CF?4200s?4__dict__?5is?5not?5a?5diction@
CONST	SEGMENT
??_C@_0CE@GGOPNIFL@?$CF?4200s?4__dict__?5is?5not?5a?5diction@ DB '%.200s.'
	DB	'__dict__ is not a dictionary', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT module_dir
_TEXT	SEGMENT
dict$ = 32
result$ = 40
name$20917 = 48
self$ = 80
args$ = 88
module_dir PROC						; COMDAT

; 454  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 455  :     _Py_IDENTIFIER(__dict__);
; 456  :     PyObject *result = NULL;

  0000e	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR result$[rsp], 0

; 457  :     PyObject *dict = _PyObject_GetAttrId(self, &PyId___dict__);

  00017	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId___dict__@?1??module_dir@@9@9
  0001c	8b c0		 mov	 eax, eax
  0001e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00024	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0002d	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00031	48 8b d0	 mov	 rdx, rax
  00034	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  00039	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  0003e	48 89 44 24 20	 mov	 QWORD PTR dict$[rsp], rax

; 458  : 
; 459  :     if (dict != NULL) {

  00043	48 83 7c 24 20
	00		 cmp	 QWORD PTR dict$[rsp], 0
  00049	74 58		 je	 SHORT $LN8@module_dir

; 460  :         if (PyDict_Check(dict))

  0004b	48 8b 44 24 20	 mov	 rax, QWORD PTR dict$[rsp]
  00050	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00054	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0005a	25 00 00 00 20	 and	 eax, 536870912		; 20000000H
  0005f	85 c0		 test	 eax, eax
  00061	74 11		 je	 SHORT $LN7@module_dir

; 461  :             result = PyDict_Keys(dict);

  00063	48 8b 4c 24 20	 mov	 rcx, QWORD PTR dict$[rsp]
  00068	e8 00 00 00 00	 call	 PyDict_Keys
  0006d	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax

; 462  :         else {

  00072	eb 2f		 jmp	 SHORT $LN6@module_dir
$LN7@module_dir:

; 463  :             const char *name = PyModule_GetName(self);

  00074	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  00079	e8 00 00 00 00	 call	 PyModule_GetName
  0007e	48 89 44 24 30	 mov	 QWORD PTR name$20917[rsp], rax

; 464  :             if (name)

  00083	48 83 7c 24 30
	00		 cmp	 QWORD PTR name$20917[rsp], 0
  00089	74 18		 je	 SHORT $LN5@module_dir

; 465  :                 PyErr_Format(PyExc_TypeError,
; 466  :                              "%.200s.__dict__ is not a dictionary",
; 467  :                              name);

  0008b	4c 8b 44 24 30	 mov	 r8, QWORD PTR name$20917[rsp]
  00090	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@GGOPNIFL@?$CF?4200s?4__dict__?5is?5not?5a?5diction@
  00097	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0009e	e8 00 00 00 00	 call	 PyErr_Format
$LN5@module_dir:
$LN6@module_dir:
$LN8@module_dir:
$LN4@module_dir:

; 468  :         }
; 469  :     }
; 470  : 
; 471  :     Py_XDECREF(dict);

  000a3	48 83 7c 24 20
	00		 cmp	 QWORD PTR dict$[rsp], 0
  000a9	74 0a		 je	 SHORT $LN1@module_dir
  000ab	48 8b 4c 24 20	 mov	 rcx, QWORD PTR dict$[rsp]
  000b0	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@module_dir:
  000b5	33 c0		 xor	 eax, eax
  000b7	85 c0		 test	 eax, eax
  000b9	75 e8		 jne	 SHORT $LN4@module_dir

; 472  :     return result;

  000bb	48 8b 44 24 28	 mov	 rax, QWORD PTR result$[rsp]

; 473  : }

  000c0	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000c4	c3		 ret	 0
module_dir ENDP
_TEXT	ENDS
END
