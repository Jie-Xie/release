; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0BA@GMJLDMKP@surrogateescape?$AA@		; `string'
PUBLIC	??_C@_0O@BNPCNOJJ@surrogatepass?$AA@		; `string'
PUBLIC	??_C@_0HO@BMBAFHMD@Implements?5the?5?8backslashreplace@ ; `string'
PUBLIC	??_C@_0BI@DFNAJBLL@backslashreplace_errors?$AA@	; `string'
PUBLIC	??_C@_0BB@GGCFDDAA@backslashreplace?$AA@	; `string'
PUBLIC	??_C@_0IJ@BGIKOPNG@Implements?5the?5?8xmlcharrefreplac@ ; `string'
PUBLIC	??_C@_0BJ@PKKJBMDC@xmlcharrefreplace_errors?$AA@ ; `string'
PUBLIC	??_C@_0BC@EBFFMGGH@xmlcharrefreplace?$AA@	; `string'
PUBLIC	??_C@_0GC@JHANBNN@Implements?5the?5?8replace?8?5error?5h@ ; `string'
PUBLIC	??_C@_0P@EAIPFBP@replace_errors?$AA@		; `string'
PUBLIC	??_C@_07CLEHDIEJ@replace?$AA@			; `string'
PUBLIC	??_C@_0FE@LJBBJPHI@Implements?5the?5?8ignore?8?5error?5ha@ ; `string'
PUBLIC	??_C@_0O@DJBKIKOC@ignore_errors?$AA@		; `string'
PUBLIC	??_C@_06GDPEBLPA@ignore?$AA@			; `string'
PUBLIC	??_C@_0FG@FHKDHEAN@Implements?5the?5?8strict?8?5error?5ha@ ; `string'
PUBLIC	??_C@_0O@BGCCHANL@strict_errors?$AA@		; `string'
PUBLIC	??_C@_06OLFOGHEN@strict?$AA@			; `string'
PUBLIC	??_C@_08BHKDPDAA@__name__?$AA@			; `string'
PUBLIC	??_C@_09LFGACEKG@__class__?$AA@			; `string'
PUBLIC	??_C@_0BC@NCOEPKED@_is_text_encoding?$AA@	; `string'
PUBLIC	??_C@_0BB@JCEFLFJE@0123456789abcdef?$AA@	; `string'
PUBLIC	Py_hexdigits
;	COMDAT ??_C@_0BA@GMJLDMKP@surrogateescape?$AA@
CONST	SEGMENT
??_C@_0BA@GMJLDMKP@surrogateescape?$AA@ DB 'surrogateescape', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@BNPCNOJJ@surrogatepass?$AA@
CONST	SEGMENT
??_C@_0O@BNPCNOJJ@surrogatepass?$AA@ DB 'surrogatepass', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0HO@BMBAFHMD@Implements?5the?5?8backslashreplace@
CONST	SEGMENT
??_C@_0HO@BMBAFHMD@Implements?5the?5?8backslashreplace@ DB 'Implements th'
	DB	'e ''backslashreplace'' error handling, which replaces an unen'
	DB	'codable character with a backslashed escape sequence.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@DFNAJBLL@backslashreplace_errors?$AA@
CONST	SEGMENT
??_C@_0BI@DFNAJBLL@backslashreplace_errors?$AA@ DB 'backslashreplace_erro'
	DB	'rs', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@GGCFDDAA@backslashreplace?$AA@
CONST	SEGMENT
??_C@_0BB@GGCFDDAA@backslashreplace?$AA@ DB 'backslashreplace', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0IJ@BGIKOPNG@Implements?5the?5?8xmlcharrefreplac@
CONST	SEGMENT
??_C@_0IJ@BGIKOPNG@Implements?5the?5?8xmlcharrefreplac@ DB 'Implements th'
	DB	'e ''xmlcharrefreplace'' error handling, which replaces an une'
	DB	'ncodable character with the appropriate XML character referen'
	DB	'ce.', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@PKKJBMDC@xmlcharrefreplace_errors?$AA@
CONST	SEGMENT
??_C@_0BJ@PKKJBMDC@xmlcharrefreplace_errors?$AA@ DB 'xmlcharrefreplace_er'
	DB	'rors', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@EBFFMGGH@xmlcharrefreplace?$AA@
CONST	SEGMENT
??_C@_0BC@EBFFMGGH@xmlcharrefreplace?$AA@ DB 'xmlcharrefreplace', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GC@JHANBNN@Implements?5the?5?8replace?8?5error?5h@
CONST	SEGMENT
??_C@_0GC@JHANBNN@Implements?5the?5?8replace?8?5error?5h@ DB 'Implements '
	DB	'the ''replace'' error handling, which replaces malformed data'
	DB	' with a replacement marker.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@EAIPFBP@replace_errors?$AA@
CONST	SEGMENT
??_C@_0P@EAIPFBP@replace_errors?$AA@ DB 'replace_errors', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07CLEHDIEJ@replace?$AA@
CONST	SEGMENT
??_C@_07CLEHDIEJ@replace?$AA@ DB 'replace', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0FE@LJBBJPHI@Implements?5the?5?8ignore?8?5error?5ha@
CONST	SEGMENT
??_C@_0FE@LJBBJPHI@Implements?5the?5?8ignore?8?5error?5ha@ DB 'Implements'
	DB	' the ''ignore'' error handling, which ignores malformed data '
	DB	'and continues.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@DJBKIKOC@ignore_errors?$AA@
CONST	SEGMENT
??_C@_0O@DJBKIKOC@ignore_errors?$AA@ DB 'ignore_errors', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06GDPEBLPA@ignore?$AA@
CONST	SEGMENT
??_C@_06GDPEBLPA@ignore?$AA@ DB 'ignore', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0FG@FHKDHEAN@Implements?5the?5?8strict?8?5error?5ha@
CONST	SEGMENT
??_C@_0FG@FHKDHEAN@Implements?5the?5?8strict?8?5error?5ha@ DB 'Implements'
	DB	' the ''strict'' error handling, which raises a UnicodeError o'
	DB	'n coding errors.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@BGCCHANL@strict_errors?$AA@
CONST	SEGMENT
??_C@_0O@BGCCHANL@strict_errors?$AA@ DB 'strict_errors', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06OLFOGHEN@strict?$AA@
CONST	SEGMENT
??_C@_06OLFOGHEN@strict?$AA@ DB 'strict', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08BHKDPDAA@__name__?$AA@
CONST	SEGMENT
??_C@_08BHKDPDAA@__name__?$AA@ DB '__name__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09LFGACEKG@__class__?$AA@
CONST	SEGMENT
??_C@_09LFGACEKG@__class__?$AA@ DB '__class__', 00H	; `string'
CONST	ENDS
_TLS	SEGMENT
?PyId___name__@?1??wrong_exception_type@@9@9 DQ 0000000000000000H ; `wrong_exception_type'::`2'::PyId___name__
	DQ	FLAT:??_C@_08BHKDPDAA@__name__?$AA@
	DQ	0000000000000000H
?PyId___class__@?1??wrong_exception_type@@9@9 DQ 0000000000000000H ; `wrong_exception_type'::`2'::PyId___class__
	DQ	FLAT:??_C@_09LFGACEKG@__class__?$AA@
	DQ	0000000000000000H
?PyId__is_text_encoding@?1??_PyCodec_LookupTextEncoding@@9@9 DQ 0000000000000000H ; `_PyCodec_LookupTextEncoding'::`2'::PyId__is_text_encoding
	DQ	FLAT:??_C@_0BC@NCOEPKED@_is_text_encoding?$AA@
	DQ	0000000000000000H
_TLS	ENDS
;	COMDAT ??_C@_0BC@NCOEPKED@_is_text_encoding?$AA@
CONST	SEGMENT
??_C@_0BC@NCOEPKED@_is_text_encoding?$AA@ DB '_is_text_encoding', 00H ; `string'
CONST	ENDS
_DATA	SEGMENT
Py_hexdigits DQ	FLAT:??_C@_0BB@JCEFLFJE@0123456789abcdef?$AA@
	ORG $+8
?methods@?1??_PyCodecRegistry_Init@@9@9 DQ FLAT:??_C@_06OLFOGHEN@strict?$AA@ ; `_PyCodecRegistry_Init'::`2'::methods
	DQ	FLAT:??_C@_0O@BGCCHANL@strict_errors?$AA@
	DQ	FLAT:strict_errors
	DD	08H
	ORG $+4
	DQ	FLAT:??_C@_0FG@FHKDHEAN@Implements?5the?5?8strict?8?5error?5ha@
	DQ	FLAT:??_C@_06GDPEBLPA@ignore?$AA@
	DQ	FLAT:??_C@_0O@DJBKIKOC@ignore_errors?$AA@
	DQ	FLAT:ignore_errors
	DD	08H
	ORG $+4
	DQ	FLAT:??_C@_0FE@LJBBJPHI@Implements?5the?5?8ignore?8?5error?5ha@
	DQ	FLAT:??_C@_07CLEHDIEJ@replace?$AA@
	DQ	FLAT:??_C@_0P@EAIPFBP@replace_errors?$AA@
	DQ	FLAT:replace_errors
	DD	08H
	ORG $+4
	DQ	FLAT:??_C@_0GC@JHANBNN@Implements?5the?5?8replace?8?5error?5h@
	DQ	FLAT:??_C@_0BC@EBFFMGGH@xmlcharrefreplace?$AA@
	DQ	FLAT:??_C@_0BJ@PKKJBMDC@xmlcharrefreplace_errors?$AA@
	DQ	FLAT:xmlcharrefreplace_errors
	DD	08H
	ORG $+4
	DQ	FLAT:??_C@_0IJ@BGIKOPNG@Implements?5the?5?8xmlcharrefreplac@
	DQ	FLAT:??_C@_0BB@GGCFDDAA@backslashreplace?$AA@
	DQ	FLAT:??_C@_0BI@DFNAJBLL@backslashreplace_errors?$AA@
	DQ	FLAT:backslashreplace_errors
	DD	08H
	ORG $+4
	DQ	FLAT:??_C@_0HO@BMBAFHMD@Implements?5the?5?8backslashreplace@
	DQ	FLAT:??_C@_0O@BNPCNOJJ@surrogatepass?$AA@
	DQ	FLAT:??_C@_0O@BNPCNOJJ@surrogatepass?$AA@
	DQ	FLAT:surrogatepass_errors
	DD	08H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0BA@GMJLDMKP@surrogateescape?$AA@
	DQ	FLAT:??_C@_0BA@GMJLDMKP@surrogateescape?$AA@
	DQ	FLAT:surrogateescape_errors
	DD	08H
	ORG $+4
	ORG $+8
_DATA	ENDS
;	COMDAT ??_C@_0BB@JCEFLFJE@0123456789abcdef?$AA@
CONST	SEGMENT
??_C@_0BB@JCEFLFJE@0123456789abcdef?$AA@ DB '0123456789abcdef', 00H ; `string'
CONST	ENDS
PUBLIC	??_C@_0BK@PAOEIBOE@argument?5must?5be?5callable?$AA@ ; `string'
PUBLIC	PyCodec_Register
EXTRN	PyList_Append:PROC
EXTRN	PyErr_SetString:PROC
EXTRN	PyExc_TypeError:QWORD
EXTRN	PyCallable_Check:PROC
EXTRN	PyErr_BadArgument:PROC
EXTRN	PyThreadState_Get:PROC
;	COMDAT pdata
; File c:\src\pyparallel\python\codecs.c
pdata	SEGMENT
$pdata$PyCodec_Register DD imagerel $LN6
	DD	imagerel $LN6+127
	DD	imagerel $unwind$PyCodec_Register
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyCodec_Register DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0BK@PAOEIBOE@argument?5must?5be?5callable?$AA@
CONST	SEGMENT
??_C@_0BK@PAOEIBOE@argument?5must?5be?5callable?$AA@ DB 'argument must be'
	DB	' callable', 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyCodec_Register
_TEXT	SEGMENT
interp$ = 32
search_function$ = 64
PyCodec_Register PROC					; COMDAT

; 32   : {

$LN6:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 33   :     PyInterpreterState *interp = PyThreadState_GET()->interp;

  00009	e8 00 00 00 00	 call	 PyThreadState_Get
  0000e	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00012	48 89 44 24 20	 mov	 QWORD PTR interp$[rsp], rax

; 34   :     if (interp->codec_search_path == NULL && _PyCodecRegistry_Init())

  00017	48 8b 44 24 20	 mov	 rax, QWORD PTR interp$[rsp]
  0001c	48 83 78 38 00	 cmp	 QWORD PTR [rax+56], 0
  00021	75 0b		 jne	 SHORT $LN3@PyCodec_Re
  00023	e8 00 00 00 00	 call	 _PyCodecRegistry_Init
  00028	85 c0		 test	 eax, eax
  0002a	74 02		 je	 SHORT $LN3@PyCodec_Re

; 35   :         goto onError;

  0002c	eb 47		 jmp	 SHORT $onError$20296
$LN3@PyCodec_Re:

; 36   :     if (search_function == NULL) {

  0002e	48 83 7c 24 40
	00		 cmp	 QWORD PTR search_function$[rsp], 0
  00034	75 07		 jne	 SHORT $LN2@PyCodec_Re

; 37   :         PyErr_BadArgument();

  00036	e8 00 00 00 00	 call	 PyErr_BadArgument

; 38   :         goto onError;

  0003b	eb 38		 jmp	 SHORT $onError$20296
$LN2@PyCodec_Re:

; 39   :     }
; 40   :     if (!PyCallable_Check(search_function)) {

  0003d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR search_function$[rsp]
  00042	e8 00 00 00 00	 call	 PyCallable_Check
  00047	85 c0		 test	 eax, eax
  00049	75 15		 jne	 SHORT $LN1@PyCodec_Re

; 41   :         PyErr_SetString(PyExc_TypeError, "argument must be callable");

  0004b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@PAOEIBOE@argument?5must?5be?5callable?$AA@
  00052	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00059	e8 00 00 00 00	 call	 PyErr_SetString

; 42   :         goto onError;

  0005e	eb 15		 jmp	 SHORT $onError$20296
$LN1@PyCodec_Re:

; 43   :     }
; 44   :     return PyList_Append(interp->codec_search_path, search_function);

  00060	48 8b 54 24 40	 mov	 rdx, QWORD PTR search_function$[rsp]
  00065	48 8b 44 24 20	 mov	 rax, QWORD PTR interp$[rsp]
  0006a	48 8b 48 38	 mov	 rcx, QWORD PTR [rax+56]
  0006e	e8 00 00 00 00	 call	 PyList_Append
  00073	eb 05		 jmp	 SHORT $LN4@PyCodec_Re
$onError$20296:

; 45   : 
; 46   :  onError:
; 47   :     return -1;

  00075	b8 ff ff ff ff	 mov	 eax, -1
$LN4@PyCodec_Re:

; 48   : }

  0007a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0007e	c3		 ret	 0
PyCodec_Register ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BF@KNKEBGAE@unknown?5encoding?3?5?$CFs?$AA@ ; `string'
PUBLIC	??_C@_0CM@LLLEHON@codec?5search?5functions?5must?5retu@ ; `string'
PUBLIC	??_C@_0DK@MHMNAODF@no?5codec?5search?5functions?5regist@ ; `string'
PUBLIC	_Py_DecRef
PUBLIC	_Py_IncRef
PUBLIC	_PyCodec_Lookup
EXTRN	PyDict_SetItem:PROC
EXTRN	PyErr_Format:PROC
EXTRN	_Py_NoneStruct:BYTE
EXTRN	PyEval_CallObjectWithKeywords:PROC
EXTRN	PyList_GetItem:PROC
EXTRN	PyExc_LookupError:QWORD
EXTRN	PyList_Size:PROC
EXTRN	PyTuple_New:PROC
EXTRN	PyDict_GetItem:PROC
EXTRN	PyUnicode_InternInPlace:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyCodec_Lookup DD imagerel $LN24
	DD	imagerel $LN24+621
	DD	imagerel $unwind$_PyCodec_Lookup
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyCodec_Lookup DD 010901H
	DD	0c209H
xdata	ENDS
;	COMDAT ??_C@_0BF@KNKEBGAE@unknown?5encoding?3?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0BF@KNKEBGAE@unknown?5encoding?3?5?$CFs?$AA@ DB 'unknown encoding: '
	DB	'%s', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@LLLEHON@codec?5search?5functions?5must?5retu@
CONST	SEGMENT
??_C@_0CM@LLLEHON@codec?5search?5functions?5must?5retu@ DB 'codec search '
	DB	'functions must return 4-tuples', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@MHMNAODF@no?5codec?5search?5functions?5regist@
CONST	SEGMENT
??_C@_0DK@MHMNAODF@no?5codec?5search?5functions?5regist@ DB 'no codec sea'
	DB	'rch functions registered: can''t find encoding', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PyCodec_Lookup
_TEXT	SEGMENT
v$ = 32
args$ = 40
i$ = 48
len$ = 56
interp$ = 64
result$ = 72
func$20358 = 80
encoding$ = 112
_PyCodec_Lookup PROC					; COMDAT

; 101  : {

$LN24:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 102  :     PyInterpreterState *interp;
; 103  :     PyObject *result, *args = NULL, *v;

  00009	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR args$[rsp], 0

; 104  :     Py_ssize_t i, len;
; 105  : 
; 106  :     if (encoding == NULL) {

  00012	48 83 7c 24 70
	00		 cmp	 QWORD PTR encoding$[rsp], 0
  00018	75 0a		 jne	 SHORT $LN21@PyCodec_Lo

; 107  :         PyErr_BadArgument();

  0001a	e8 00 00 00 00	 call	 PyErr_BadArgument

; 108  :         goto onError;

  0001f	e9 2a 02 00 00	 jmp	 $onError$20340
$LN21@PyCodec_Lo:

; 109  :     }
; 110  : 
; 111  :     interp = PyThreadState_GET()->interp;

  00024	e8 00 00 00 00	 call	 PyThreadState_Get
  00029	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0002d	48 89 44 24 40	 mov	 QWORD PTR interp$[rsp], rax

; 112  :     if (interp->codec_search_path == NULL && _PyCodecRegistry_Init())

  00032	48 8b 44 24 40	 mov	 rax, QWORD PTR interp$[rsp]
  00037	48 83 78 38 00	 cmp	 QWORD PTR [rax+56], 0
  0003c	75 0e		 jne	 SHORT $LN20@PyCodec_Lo
  0003e	e8 00 00 00 00	 call	 _PyCodecRegistry_Init
  00043	85 c0		 test	 eax, eax
  00045	74 05		 je	 SHORT $LN20@PyCodec_Lo

; 113  :         goto onError;

  00047	e9 02 02 00 00	 jmp	 $onError$20340
$LN20@PyCodec_Lo:

; 114  : 
; 115  :     /* Convert the encoding to a normalized Python string: all
; 116  :        characters are converted to lower case, spaces and hyphens are
; 117  :        replaced with underscores. */
; 118  :     v = normalizestring(encoding);

  0004c	48 8b 4c 24 70	 mov	 rcx, QWORD PTR encoding$[rsp]
  00051	e8 00 00 00 00	 call	 normalizestring
  00056	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax

; 119  :     if (v == NULL)

  0005b	48 83 7c 24 20
	00		 cmp	 QWORD PTR v$[rsp], 0
  00061	75 05		 jne	 SHORT $LN19@PyCodec_Lo

; 120  :         goto onError;

  00063	e9 e6 01 00 00	 jmp	 $onError$20340
$LN19@PyCodec_Lo:

; 121  :     PyUnicode_InternInPlace(&v);

  00068	48 8d 4c 24 20	 lea	 rcx, QWORD PTR v$[rsp]
  0006d	e8 00 00 00 00	 call	 PyUnicode_InternInPlace

; 122  : 
; 123  :     /* First, try to lookup the name in the registry dictionary */
; 124  :     result = PyDict_GetItem(interp->codec_search_cache, v);

  00072	48 8b 54 24 20	 mov	 rdx, QWORD PTR v$[rsp]
  00077	48 8b 44 24 40	 mov	 rax, QWORD PTR interp$[rsp]
  0007c	48 8b 48 40	 mov	 rcx, QWORD PTR [rax+64]
  00080	e8 00 00 00 00	 call	 PyDict_GetItem
  00085	48 89 44 24 48	 mov	 QWORD PTR result$[rsp], rax

; 125  :     if (result != NULL) {

  0008a	48 83 7c 24 48
	00		 cmp	 QWORD PTR result$[rsp], 0
  00090	74 1e		 je	 SHORT $LN18@PyCodec_Lo

; 126  :         Py_INCREF(result);

  00092	48 8b 4c 24 48	 mov	 rcx, QWORD PTR result$[rsp]
  00097	e8 00 00 00 00	 call	 _Py_IncRef

; 127  :         Py_DECREF(v);

  0009c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  000a1	e8 00 00 00 00	 call	 _Py_DecRef

; 128  :         return result;

  000a6	48 8b 44 24 48	 mov	 rax, QWORD PTR result$[rsp]
  000ab	e9 b8 01 00 00	 jmp	 $LN22@PyCodec_Lo
$LN18@PyCodec_Lo:

; 129  :     }
; 130  : 
; 131  :     /* Next, scan the search functions in order of registration */
; 132  :     args = PyTuple_New(1);

  000b0	b9 01 00 00 00	 mov	 ecx, 1
  000b5	e8 00 00 00 00	 call	 PyTuple_New
  000ba	48 89 44 24 28	 mov	 QWORD PTR args$[rsp], rax

; 133  :     if (args == NULL)

  000bf	48 83 7c 24 28
	00		 cmp	 QWORD PTR args$[rsp], 0
  000c5	75 05		 jne	 SHORT $LN17@PyCodec_Lo

; 134  :         goto onError;

  000c7	e9 82 01 00 00	 jmp	 $onError$20340
$LN17@PyCodec_Lo:

; 135  :     PyTuple_SET_ITEM(args,0,v);

  000cc	48 8b 44 24 28	 mov	 rax, QWORD PTR args$[rsp]
  000d1	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  000d6	48 89 48 70	 mov	 QWORD PTR [rax+112], rcx

; 136  : 
; 137  :     len = PyList_Size(interp->codec_search_path);

  000da	48 8b 44 24 40	 mov	 rax, QWORD PTR interp$[rsp]
  000df	48 8b 48 38	 mov	 rcx, QWORD PTR [rax+56]
  000e3	e8 00 00 00 00	 call	 PyList_Size
  000e8	48 89 44 24 38	 mov	 QWORD PTR len$[rsp], rax

; 138  :     if (len < 0)

  000ed	48 83 7c 24 38
	00		 cmp	 QWORD PTR len$[rsp], 0
  000f3	7d 05		 jge	 SHORT $LN16@PyCodec_Lo

; 139  :         goto onError;

  000f5	e9 54 01 00 00	 jmp	 $onError$20340
$LN16@PyCodec_Lo:

; 140  :     if (len == 0) {

  000fa	48 83 7c 24 38
	00		 cmp	 QWORD PTR len$[rsp], 0
  00100	75 18		 jne	 SHORT $LN15@PyCodec_Lo

; 141  :         PyErr_SetString(PyExc_LookupError,
; 142  :                         "no codec search functions registered: "
; 143  :                         "can't find encoding");

  00102	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DK@MHMNAODF@no?5codec?5search?5functions?5regist@
  00109	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_LookupError
  00110	e8 00 00 00 00	 call	 PyErr_SetString

; 144  :         goto onError;

  00115	e9 34 01 00 00	 jmp	 $onError$20340
$LN15@PyCodec_Lo:

; 145  :     }
; 146  : 
; 147  :     for (i = 0; i < len; i++) {

  0011a	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  00123	eb 0d		 jmp	 SHORT $LN14@PyCodec_Lo
$LN13@PyCodec_Lo:
  00125	48 8b 44 24 30	 mov	 rax, QWORD PTR i$[rsp]
  0012a	48 ff c0	 inc	 rax
  0012d	48 89 44 24 30	 mov	 QWORD PTR i$[rsp], rax
$LN14@PyCodec_Lo:
  00132	48 8b 44 24 38	 mov	 rax, QWORD PTR len$[rsp]
  00137	48 39 44 24 30	 cmp	 QWORD PTR i$[rsp], rax
  0013c	0f 8d ad 00 00
	00		 jge	 $LN12@PyCodec_Lo

; 148  :         PyObject *func;
; 149  : 
; 150  :         func = PyList_GetItem(interp->codec_search_path, i);

  00142	48 8b 54 24 30	 mov	 rdx, QWORD PTR i$[rsp]
  00147	48 8b 44 24 40	 mov	 rax, QWORD PTR interp$[rsp]
  0014c	48 8b 48 38	 mov	 rcx, QWORD PTR [rax+56]
  00150	e8 00 00 00 00	 call	 PyList_GetItem
  00155	48 89 44 24 50	 mov	 QWORD PTR func$20358[rsp], rax

; 151  :         if (func == NULL)

  0015a	48 83 7c 24 50
	00		 cmp	 QWORD PTR func$20358[rsp], 0
  00160	75 05		 jne	 SHORT $LN11@PyCodec_Lo

; 152  :             goto onError;

  00162	e9 e7 00 00 00	 jmp	 $onError$20340
$LN11@PyCodec_Lo:

; 153  :         result = PyEval_CallObject(func, args);

  00167	45 33 c0	 xor	 r8d, r8d
  0016a	48 8b 54 24 28	 mov	 rdx, QWORD PTR args$[rsp]
  0016f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR func$20358[rsp]
  00174	e8 00 00 00 00	 call	 PyEval_CallObjectWithKeywords
  00179	48 89 44 24 48	 mov	 QWORD PTR result$[rsp], rax

; 154  :         if (result == NULL)

  0017e	48 83 7c 24 48
	00		 cmp	 QWORD PTR result$[rsp], 0
  00184	75 05		 jne	 SHORT $LN10@PyCodec_Lo

; 155  :             goto onError;

  00186	e9 c3 00 00 00	 jmp	 $onError$20340
$LN10@PyCodec_Lo:

; 156  :         if (result == Py_None) {

  0018b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00192	48 39 44 24 48	 cmp	 QWORD PTR result$[rsp], rax
  00197	75 0c		 jne	 SHORT $LN9@PyCodec_Lo

; 157  :             Py_DECREF(result);

  00199	48 8b 4c 24 48	 mov	 rcx, QWORD PTR result$[rsp]
  0019e	e8 00 00 00 00	 call	 _Py_DecRef

; 158  :             continue;

  001a3	eb 80		 jmp	 SHORT $LN13@PyCodec_Lo
$LN9@PyCodec_Lo:

; 159  :         }
; 160  :         if (!PyTuple_Check(result) || PyTuple_GET_SIZE(result) != 4) {

  001a5	48 8b 44 24 48	 mov	 rax, QWORD PTR result$[rsp]
  001aa	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  001ae	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  001b4	25 00 00 00 04	 and	 eax, 67108864		; 04000000H
  001b9	85 c0		 test	 eax, eax
  001bb	74 0c		 je	 SHORT $LN7@PyCodec_Lo
  001bd	48 8b 44 24 48	 mov	 rax, QWORD PTR result$[rsp]
  001c2	48 83 78 60 04	 cmp	 QWORD PTR [rax+96], 4
  001c7	74 1f		 je	 SHORT $LN8@PyCodec_Lo
$LN7@PyCodec_Lo:

; 161  :             PyErr_SetString(PyExc_TypeError,
; 162  :                             "codec search functions must return 4-tuples");

  001c9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CM@LLLEHON@codec?5search?5functions?5must?5retu@
  001d0	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  001d7	e8 00 00 00 00	 call	 PyErr_SetString

; 163  :             Py_DECREF(result);

  001dc	48 8b 4c 24 48	 mov	 rcx, QWORD PTR result$[rsp]
  001e1	e8 00 00 00 00	 call	 _Py_DecRef

; 164  :             goto onError;

  001e6	eb 66		 jmp	 SHORT $onError$20340
$LN8@PyCodec_Lo:

; 165  :         }
; 166  :         break;

  001e8	eb 05		 jmp	 SHORT $LN12@PyCodec_Lo

; 167  :     }

  001ea	e9 36 ff ff ff	 jmp	 $LN13@PyCodec_Lo
$LN12@PyCodec_Lo:

; 168  :     if (i == len) {

  001ef	48 8b 44 24 38	 mov	 rax, QWORD PTR len$[rsp]
  001f4	48 39 44 24 30	 cmp	 QWORD PTR i$[rsp], rax
  001f9	75 1a		 jne	 SHORT $LN6@PyCodec_Lo

; 169  :         /* XXX Perhaps we should cache misses too ? */
; 170  :         PyErr_Format(PyExc_LookupError,
; 171  :                      "unknown encoding: %s", encoding);

  001fb	4c 8b 44 24 70	 mov	 r8, QWORD PTR encoding$[rsp]
  00200	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BF@KNKEBGAE@unknown?5encoding?3?5?$CFs?$AA@
  00207	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_LookupError
  0020e	e8 00 00 00 00	 call	 PyErr_Format

; 172  :         goto onError;

  00213	eb 39		 jmp	 SHORT $onError$20340
$LN6@PyCodec_Lo:

; 173  :     }
; 174  : 
; 175  :     /* Cache and return the result */
; 176  :     if (PyDict_SetItem(interp->codec_search_cache, v, result) < 0) {

  00215	4c 8b 44 24 48	 mov	 r8, QWORD PTR result$[rsp]
  0021a	48 8b 54 24 20	 mov	 rdx, QWORD PTR v$[rsp]
  0021f	48 8b 44 24 40	 mov	 rax, QWORD PTR interp$[rsp]
  00224	48 8b 48 40	 mov	 rcx, QWORD PTR [rax+64]
  00228	e8 00 00 00 00	 call	 PyDict_SetItem
  0022d	85 c0		 test	 eax, eax
  0022f	7d 0c		 jge	 SHORT $LN5@PyCodec_Lo

; 177  :         Py_DECREF(result);

  00231	48 8b 4c 24 48	 mov	 rcx, QWORD PTR result$[rsp]
  00236	e8 00 00 00 00	 call	 _Py_DecRef

; 178  :         goto onError;

  0023b	eb 11		 jmp	 SHORT $onError$20340
$LN5@PyCodec_Lo:

; 179  :     }
; 180  :     Py_DECREF(args);

  0023d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR args$[rsp]
  00242	e8 00 00 00 00	 call	 _Py_DecRef

; 181  :     return result;

  00247	48 8b 44 24 48	 mov	 rax, QWORD PTR result$[rsp]
  0024c	eb 1a		 jmp	 SHORT $LN22@PyCodec_Lo
$onError$20340:
$LN4@PyCodec_Lo:

; 182  : 
; 183  :  onError:
; 184  :     Py_XDECREF(args);

  0024e	48 83 7c 24 28
	00		 cmp	 QWORD PTR args$[rsp], 0
  00254	74 0a		 je	 SHORT $LN1@PyCodec_Lo
  00256	48 8b 4c 24 28	 mov	 rcx, QWORD PTR args$[rsp]
  0025b	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@PyCodec_Lo:
  00260	33 c0		 xor	 eax, eax
  00262	85 c0		 test	 eax, eax
  00264	75 e8		 jne	 SHORT $LN4@PyCodec_Lo

; 185  :     return NULL;

  00266	33 c0		 xor	 eax, eax
$LN22@PyCodec_Lo:

; 186  : }

  00268	48 83 c4 68	 add	 rsp, 104		; 00000068H
  0026c	c3		 ret	 0
_PyCodec_Lookup ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
EXTRN	_Py_RefTotal:QWORD
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN7
	DD	imagerel $LN7+132
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 6d		 jne	 SHORT $LN2@Py_IncRef
  00012	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0001a	4c 8b 4c 24 40	 mov	 r9, QWORD PTR op$[rsp]
  0001f	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_Guard
  00038	85 c0		 test	 eax, eax
  0003a	75 12		 jne	 SHORT $LN1@Py_IncRef
  0003c	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  00041	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00045	48 83 e0 20	 and	 rax, 32			; 00000020H
  00049	48 85 c0	 test	 rax, rax
  0004c	74 31		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;

  0004e	e8 00 00 00 00	 call	 _Py_PXCTX
  00053	85 c0		 test	 eax, eax
  00055	74 02		 je	 SHORT $LN5@Py_IncRef
  00057	eb 11		 jmp	 SHORT $LN6@Py_IncRef
$LN5@Py_IncRef:
  00059	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00060	48 ff c0	 inc	 rax
  00063	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN6@Py_IncRef:

; 907  :         (((PyObject*)(op))->ob_refcnt++);

  0006a	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  0006f	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00073	48 ff c0	 inc	 rax
  00076	48 8b 4c 24 40	 mov	 rcx, QWORD PTR op$[rsp]
  0007b	48 89 41 50	 mov	 QWORD PTR [rcx+80], rax
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  0007f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00083	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
EXTRN	_Py_Dealloc:PROC
EXTRN	_Py_NegativeRefcount:PROC
EXTRN	Px_DecRef:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN13
	DD	imagerel $LN13+257
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
tv81 = 48
op$ = 80
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN13:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	0f 85 e6 00 00
	00		 jne	 $LN8@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00016	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0001b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0001f	48 83 e0 20	 and	 rax, 32			; 00000020H
  00023	48 85 c0	 test	 rax, rax
  00026	75 14		 jne	 SHORT $LN6@Py_DecRef
  00028	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0002d	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00031	48 25 80 00 00
	00		 and	 rax, 128		; 00000080H
  00037	48 85 c0	 test	 rax, rax
  0003a	74 0f		 je	 SHORT $LN7@Py_DecRef
$LN6@Py_DecRef:

; 926  :             Px_DECREF(op);

  0003c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  00041	e8 00 00 00 00	 call	 Px_DecRef
  00046	e9 b1 00 00 00	 jmp	 $LN5@Py_DecRef
$LN7@Py_DecRef:

; 927  :         else if (!Px_ISPX(op)) {

  0004b	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00050	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00054	48 83 e0 02	 and	 rax, 2
  00058	48 85 c0	 test	 rax, rax
  0005b	0f 85 9b 00 00
	00		 jne	 $LN4@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;

  00061	e8 00 00 00 00	 call	 _Py_PXCTX
  00066	85 c0		 test	 eax, eax
  00068	74 02		 je	 SHORT $LN11@Py_DecRef
  0006a	eb 11		 jmp	 SHORT $LN12@Py_DecRef
$LN11@Py_DecRef:
  0006c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00073	48 ff c8	 dec	 rax
  00076	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN12@Py_DecRef:

; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  0007d	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00082	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00086	48 ff c8	 dec	 rax
  00089	48 89 44 24 30	 mov	 QWORD PTR tv81[rsp], rax
  0008e	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00093	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv81[rsp]
  00098	48 89 48 50	 mov	 QWORD PTR [rax+80], rcx
  0009c	48 83 7c 24 30
	00		 cmp	 QWORD PTR tv81[rsp], 0
  000a2	74 4e		 je	 SHORT $LN3@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);

  000a4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000ac	4c 8b 4c 24 50	 mov	 r9, QWORD PTR op$[rsp]
  000b1	41 b8 a2 03 00
	00		 mov	 r8d, 930		; 000003a2H
  000b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000c5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ca	85 c0		 test	 eax, eax
  000cc	75 22		 jne	 SHORT $LN2@Py_DecRef
  000ce	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  000d3	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000d8	7d 16		 jge	 SHORT $LN2@Py_DecRef
  000da	4c 8b 44 24 50	 mov	 r8, QWORD PTR op$[rsp]
  000df	ba a2 03 00 00	 mov	 edx, 930		; 000003a2H
  000e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000eb	e8 00 00 00 00	 call	 _Py_NegativeRefcount
$LN2@Py_DecRef:

; 931  :             } else

  000f0	eb 0a		 jmp	 SHORT $LN1@Py_DecRef
$LN3@Py_DecRef:

; 932  :                 _Py_Dealloc((PyObject *)(op));

  000f2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  000f7	e8 00 00 00 00	 call	 _Py_Dealloc
$LN1@Py_DecRef:
$LN4@Py_DecRef:
$LN5@Py_DecRef:
$LN8@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  000fc	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00100	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BE@HLPAOMLE@string?5is?5too?5large?$AA@	; `string'
EXTRN	PyMem_Free:PROC
EXTRN	PyUnicode_FromString:PROC
EXTRN	_Py_ctype_tolower:BYTE
EXTRN	PyMem_Malloc:PROC
EXTRN	PyExc_OverflowError:QWORD
EXTRN	strlen:PROC
;	COMDAT pdata
; File c:\src\pyparallel\python\codecs.c
pdata	SEGMENT
$pdata$normalizestring DD imagerel normalizestring
	DD	imagerel normalizestring+306
	DD	imagerel $unwind$normalizestring
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$normalizestring DD 010901H
	DD	0a209H
xdata	ENDS
;	COMDAT ??_C@_0BE@HLPAOMLE@string?5is?5too?5large?$AA@
CONST	SEGMENT
??_C@_0BE@HLPAOMLE@string?5is?5too?5large?$AA@ DB 'string is too large', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT normalizestring
_TEXT	SEGMENT
p$ = 32
v$ = 40
i$ = 48
len$ = 56
ch$20320 = 64
string$ = 96
normalizestring PROC					; COMDAT

; 55   : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 56   :     register size_t i;
; 57   :     size_t len = strlen(string);

  00009	48 8b 4c 24 60	 mov	 rcx, QWORD PTR string$[rsp]
  0000e	e8 00 00 00 00	 call	 strlen
  00013	48 89 44 24 38	 mov	 QWORD PTR len$[rsp], rax

; 58   :     char *p;
; 59   :     PyObject *v;
; 60   : 
; 61   :     if (len > PY_SSIZE_T_MAX) {

  00018	48 b8 ff ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775807 ; 7fffffffffffffffH
  00022	48 39 44 24 38	 cmp	 QWORD PTR len$[rsp], rax
  00027	76 1a		 jbe	 SHORT $LN8@normalizes

; 62   :         PyErr_SetString(PyExc_OverflowError, "string is too large");

  00029	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@HLPAOMLE@string?5is?5too?5large?$AA@
  00030	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_OverflowError
  00037	e8 00 00 00 00	 call	 PyErr_SetString

; 63   :         return NULL;

  0003c	33 c0		 xor	 eax, eax
  0003e	e9 ea 00 00 00	 jmp	 $LN9@normalizes
$LN8@normalizes:

; 64   :     }
; 65   : 
; 66   :     p = PyMem_Malloc(len + 1);

  00043	48 8b 44 24 38	 mov	 rax, QWORD PTR len$[rsp]
  00048	48 ff c0	 inc	 rax
  0004b	48 8b c8	 mov	 rcx, rax
  0004e	e8 00 00 00 00	 call	 PyMem_Malloc
  00053	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax

; 67   :     if (p == NULL)

  00058	48 83 7c 24 20
	00		 cmp	 QWORD PTR p$[rsp], 0
  0005e	75 07		 jne	 SHORT $LN7@normalizes

; 68   :         return NULL;

  00060	33 c0		 xor	 eax, eax
  00062	e9 c6 00 00 00	 jmp	 $LN9@normalizes
$LN7@normalizes:

; 69   :     for (i = 0; i < len; i++) {

  00067	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  00070	eb 0d		 jmp	 SHORT $LN6@normalizes
$LN5@normalizes:
  00072	48 8b 44 24 30	 mov	 rax, QWORD PTR i$[rsp]
  00077	48 ff c0	 inc	 rax
  0007a	48 89 44 24 30	 mov	 QWORD PTR i$[rsp], rax
$LN6@normalizes:
  0007f	48 8b 44 24 38	 mov	 rax, QWORD PTR len$[rsp]
  00084	48 39 44 24 30	 cmp	 QWORD PTR i$[rsp], rax
  00089	73 65		 jae	 SHORT $LN4@normalizes

; 70   :         register char ch = string[i];

  0008b	48 8b 44 24 30	 mov	 rax, QWORD PTR i$[rsp]
  00090	48 8b 4c 24 60	 mov	 rcx, QWORD PTR string$[rsp]
  00095	48 03 c8	 add	 rcx, rax
  00098	48 8b c1	 mov	 rax, rcx
  0009b	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0009e	88 44 24 40	 mov	 BYTE PTR ch$20320[rsp], al

; 71   :         if (ch == ' ')

  000a2	0f be 44 24 40	 movsx	 eax, BYTE PTR ch$20320[rsp]
  000a7	83 f8 20	 cmp	 eax, 32			; 00000020H
  000aa	75 07		 jne	 SHORT $LN3@normalizes

; 72   :             ch = '-';

  000ac	c6 44 24 40 2d	 mov	 BYTE PTR ch$20320[rsp], 45 ; 0000002dH

; 73   :         else

  000b1	eb 24		 jmp	 SHORT $LN2@normalizes
$LN3@normalizes:

; 74   :             ch = Py_TOLOWER(Py_CHARMASK(ch));

  000b3	0f be 44 24 40	 movsx	 eax, BYTE PTR ch$20320[rsp]
  000b8	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  000bd	0f b6 c0	 movzx	 eax, al
  000c0	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  000c5	0f b6 c0	 movzx	 eax, al
  000c8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_ctype_tolower
  000cf	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  000d3	88 44 24 40	 mov	 BYTE PTR ch$20320[rsp], al
$LN2@normalizes:

; 75   :         p[i] = ch;

  000d7	48 8b 44 24 30	 mov	 rax, QWORD PTR i$[rsp]
  000dc	48 8b 4c 24 20	 mov	 rcx, QWORD PTR p$[rsp]
  000e1	48 03 c8	 add	 rcx, rax
  000e4	48 8b c1	 mov	 rax, rcx
  000e7	0f b6 4c 24 40	 movzx	 ecx, BYTE PTR ch$20320[rsp]
  000ec	88 08		 mov	 BYTE PTR [rax], cl

; 76   :     }

  000ee	eb 82		 jmp	 SHORT $LN5@normalizes
$LN4@normalizes:

; 77   :     p[i] = '\0';

  000f0	48 8b 44 24 30	 mov	 rax, QWORD PTR i$[rsp]
  000f5	48 8b 4c 24 20	 mov	 rcx, QWORD PTR p$[rsp]
  000fa	48 03 c8	 add	 rcx, rax
  000fd	48 8b c1	 mov	 rax, rcx
  00100	c6 00 00	 mov	 BYTE PTR [rax], 0

; 78   :     v = PyUnicode_FromString(p);

  00103	48 8b 4c 24 20	 mov	 rcx, QWORD PTR p$[rsp]
  00108	e8 00 00 00 00	 call	 PyUnicode_FromString
  0010d	48 89 44 24 28	 mov	 QWORD PTR v$[rsp], rax

; 79   :     if (v == NULL)

  00112	48 83 7c 24 28
	00		 cmp	 QWORD PTR v$[rsp], 0
  00118	75 04		 jne	 SHORT $LN1@normalizes

; 80   :         return NULL;

  0011a	33 c0		 xor	 eax, eax
  0011c	eb 0f		 jmp	 SHORT $LN9@normalizes
$LN1@normalizes:

; 81   :     PyMem_Free(p);

  0011e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR p$[rsp]
  00123	e8 00 00 00 00	 call	 PyMem_Free

; 82   :     return v;

  00128	48 8b 44 24 28	 mov	 rax, QWORD PTR v$[rsp]
$LN9@normalizes:

; 83   : }

  0012d	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00131	c3		 ret	 0
normalizestring ENDP
_TEXT	ENDS
PUBLIC	PyCodec_KnownEncoding
EXTRN	PyErr_Clear:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyCodec_KnownEncoding DD imagerel $LN5
	DD	imagerel $LN5+63
	DD	imagerel $unwind$PyCodec_KnownEncoding
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyCodec_KnownEncoding DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyCodec_KnownEncoding
_TEXT	SEGMENT
codecs$ = 32
encoding$ = 64
PyCodec_KnownEncoding PROC				; COMDAT

; 191  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 192  :     PyObject *codecs;
; 193  : 
; 194  :     codecs = _PyCodec_Lookup(encoding);

  00009	48 8b 4c 24 40	 mov	 rcx, QWORD PTR encoding$[rsp]
  0000e	e8 00 00 00 00	 call	 _PyCodec_Lookup
  00013	48 89 44 24 20	 mov	 QWORD PTR codecs$[rsp], rax

; 195  :     if (!codecs) {

  00018	48 83 7c 24 20
	00		 cmp	 QWORD PTR codecs$[rsp], 0
  0001e	75 0b		 jne	 SHORT $LN2@PyCodec_Kn

; 196  :         PyErr_Clear();

  00020	e8 00 00 00 00	 call	 PyErr_Clear

; 197  :         return 0;

  00025	33 c0		 xor	 eax, eax
  00027	eb 11		 jmp	 SHORT $LN3@PyCodec_Kn

; 198  :     }
; 199  :     else {

  00029	eb 0f		 jmp	 SHORT $LN1@PyCodec_Kn
$LN2@PyCodec_Kn:

; 200  :         Py_DECREF(codecs);

  0002b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR codecs$[rsp]
  00030	e8 00 00 00 00	 call	 _Py_DecRef

; 201  :         return 1;

  00035	b8 01 00 00 00	 mov	 eax, 1
$LN1@PyCodec_Kn:
$LN3@PyCodec_Kn:

; 202  :     }
; 203  : }

  0003a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003e	c3		 ret	 0
PyCodec_KnownEncoding ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BD@LLLDLNBG@incrementaldecoder?$AA@	; `string'
PUBLIC	_PyCodecInfo_GetIncrementalDecoder
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyCodecInfo_GetIncrementalDecoder DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$_PyCodecInfo_GetIncrementalDecoder
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyCodecInfo_GetIncrementalDecoder DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT ??_C@_0BD@LLLDLNBG@incrementaldecoder?$AA@
CONST	SEGMENT
??_C@_0BD@LLLDLNBG@incrementaldecoder?$AA@ DB 'incrementaldecoder', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PyCodecInfo_GetIncrementalDecoder
_TEXT	SEGMENT
codec_info$ = 48
errors$ = 56
_PyCodecInfo_GetIncrementalDecoder PROC			; COMDAT

; 308  : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 309  :     return codec_makeincrementalcodec(codec_info, errors,
; 310  :                                       "incrementaldecoder");

  0000e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BD@LLLDLNBG@incrementaldecoder?$AA@
  00015	48 8b 54 24 38	 mov	 rdx, QWORD PTR errors$[rsp]
  0001a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR codec_info$[rsp]
  0001f	e8 00 00 00 00	 call	 codec_makeincrementalcodec

; 311  : }

  00024	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00028	c3		 ret	 0
_PyCodecInfo_GetIncrementalDecoder ENDP
_TEXT	ENDS
PUBLIC	??_C@_01LKDEMHDF@s?$AA@				; `string'
EXTRN	PyObject_CallFunction:PROC
EXTRN	PyObject_GetAttrString:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$codec_makeincrementalcodec DD imagerel codec_makeincrementalcodec
	DD	imagerel codec_makeincrementalcodec+125
	DD	imagerel $unwind$codec_makeincrementalcodec
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$codec_makeincrementalcodec DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT ??_C@_01LKDEMHDF@s?$AA@
CONST	SEGMENT
??_C@_01LKDEMHDF@s?$AA@ DB 's', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT codec_makeincrementalcodec
_TEXT	SEGMENT
inccodec$ = 32
ret$ = 40
codec_info$ = 64
errors$ = 72
attrname$ = 80
codec_makeincrementalcodec PROC				; COMDAT

; 251  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 252  :     PyObject *ret, *inccodec;
; 253  : 
; 254  :     inccodec = PyObject_GetAttrString(codec_info, attrname);

  00013	48 8b 54 24 50	 mov	 rdx, QWORD PTR attrname$[rsp]
  00018	48 8b 4c 24 40	 mov	 rcx, QWORD PTR codec_info$[rsp]
  0001d	e8 00 00 00 00	 call	 PyObject_GetAttrString
  00022	48 89 44 24 20	 mov	 QWORD PTR inccodec$[rsp], rax

; 255  :     if (inccodec == NULL)

  00027	48 83 7c 24 20
	00		 cmp	 QWORD PTR inccodec$[rsp], 0
  0002d	75 04		 jne	 SHORT $LN3@codec_make

; 256  :         return NULL;

  0002f	33 c0		 xor	 eax, eax
  00031	eb 45		 jmp	 SHORT $LN4@codec_make
$LN3@codec_make:

; 257  :     if (errors)

  00033	48 83 7c 24 48
	00		 cmp	 QWORD PTR errors$[rsp], 0
  00039	74 1d		 je	 SHORT $LN2@codec_make

; 258  :         ret = PyObject_CallFunction(inccodec, "s", errors);

  0003b	4c 8b 44 24 48	 mov	 r8, QWORD PTR errors$[rsp]
  00040	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01LKDEMHDF@s?$AA@
  00047	48 8b 4c 24 20	 mov	 rcx, QWORD PTR inccodec$[rsp]
  0004c	e8 00 00 00 00	 call	 PyObject_CallFunction
  00051	48 89 44 24 28	 mov	 QWORD PTR ret$[rsp], rax

; 259  :     else

  00056	eb 11		 jmp	 SHORT $LN1@codec_make
$LN2@codec_make:

; 260  :         ret = PyObject_CallFunction(inccodec, NULL);

  00058	33 d2		 xor	 edx, edx
  0005a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR inccodec$[rsp]
  0005f	e8 00 00 00 00	 call	 PyObject_CallFunction
  00064	48 89 44 24 28	 mov	 QWORD PTR ret$[rsp], rax
$LN1@codec_make:

; 261  :     Py_DECREF(inccodec);

  00069	48 8b 4c 24 20	 mov	 rcx, QWORD PTR inccodec$[rsp]
  0006e	e8 00 00 00 00	 call	 _Py_DecRef

; 262  :     return ret;

  00073	48 8b 44 24 28	 mov	 rax, QWORD PTR ret$[rsp]
$LN4@codec_make:

; 263  : }

  00078	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0007c	c3		 ret	 0
codec_makeincrementalcodec ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BD@HFBOOJHC@incrementalencoder?$AA@	; `string'
PUBLIC	_PyCodecInfo_GetIncrementalEncoder
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyCodecInfo_GetIncrementalEncoder DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$_PyCodecInfo_GetIncrementalEncoder
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyCodecInfo_GetIncrementalEncoder DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT ??_C@_0BD@HFBOOJHC@incrementalencoder?$AA@
CONST	SEGMENT
??_C@_0BD@HFBOOJHC@incrementalencoder?$AA@ DB 'incrementalencoder', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PyCodecInfo_GetIncrementalEncoder
_TEXT	SEGMENT
codec_info$ = 48
errors$ = 56
_PyCodecInfo_GetIncrementalEncoder PROC			; COMDAT

; 315  : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 316  :     return codec_makeincrementalcodec(codec_info, errors,
; 317  :                                       "incrementalencoder");

  0000e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BD@HFBOOJHC@incrementalencoder?$AA@
  00015	48 8b 54 24 38	 mov	 rdx, QWORD PTR errors$[rsp]
  0001a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR codec_info$[rsp]
  0001f	e8 00 00 00 00	 call	 codec_makeincrementalcodec

; 318  : }

  00024	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00028	c3		 ret	 0
_PyCodecInfo_GetIncrementalEncoder ENDP
_TEXT	ENDS
PUBLIC	PyCodec_Encoder
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyCodec_Encoder DD imagerel $LN3
	DD	imagerel $LN3+26
	DD	imagerel $unwind$PyCodec_Encoder
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyCodec_Encoder DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyCodec_Encoder
_TEXT	SEGMENT
encoding$ = 48
PyCodec_Encoder PROC					; COMDAT

; 328  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 329  :     return codec_getitem(encoding, 0);

  00009	33 d2		 xor	 edx, edx
  0000b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR encoding$[rsp]
  00010	e8 00 00 00 00	 call	 codec_getitem

; 330  : }

  00015	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00019	c3		 ret	 0
PyCodec_Encoder ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$codec_getitem DD imagerel codec_getitem
	DD	imagerel codec_getitem+90
	DD	imagerel $unwind$codec_getitem
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$codec_getitem DD 010d01H
	DD	0620dH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT codec_getitem
_TEXT	SEGMENT
v$ = 32
codecs$ = 40
encoding$ = 64
index$ = 72
codec_getitem PROC					; COMDAT

; 233  : {

  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 234  :     PyObject *codecs;
; 235  :     PyObject *v;
; 236  : 
; 237  :     codecs = _PyCodec_Lookup(encoding);

  0000d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR encoding$[rsp]
  00012	e8 00 00 00 00	 call	 _PyCodec_Lookup
  00017	48 89 44 24 28	 mov	 QWORD PTR codecs$[rsp], rax

; 238  :     if (codecs == NULL)

  0001c	48 83 7c 24 28
	00		 cmp	 QWORD PTR codecs$[rsp], 0
  00022	75 04		 jne	 SHORT $LN1@codec_geti

; 239  :         return NULL;

  00024	33 c0		 xor	 eax, eax
  00026	eb 2d		 jmp	 SHORT $LN2@codec_geti
$LN1@codec_geti:

; 240  :     v = PyTuple_GET_ITEM(codecs, index);

  00028	48 63 44 24 48	 movsxd	 rax, DWORD PTR index$[rsp]
  0002d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR codecs$[rsp]
  00032	48 8b 44 c1 70	 mov	 rax, QWORD PTR [rcx+rax*8+112]
  00037	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax

; 241  :     Py_DECREF(codecs);

  0003c	48 8b 4c 24 28	 mov	 rcx, QWORD PTR codecs$[rsp]
  00041	e8 00 00 00 00	 call	 _Py_DecRef

; 242  :     Py_INCREF(v);

  00046	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  0004b	e8 00 00 00 00	 call	 _Py_IncRef

; 243  :     return v;

  00050	48 8b 44 24 20	 mov	 rax, QWORD PTR v$[rsp]
$LN2@codec_geti:

; 244  : }

  00055	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00059	c3		 ret	 0
codec_getitem ENDP
_TEXT	ENDS
PUBLIC	PyCodec_Decoder
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyCodec_Decoder DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$PyCodec_Decoder
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyCodec_Decoder DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyCodec_Decoder
_TEXT	SEGMENT
encoding$ = 48
PyCodec_Decoder PROC					; COMDAT

; 333  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 334  :     return codec_getitem(encoding, 1);

  00009	ba 01 00 00 00	 mov	 edx, 1
  0000e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR encoding$[rsp]
  00013	e8 00 00 00 00	 call	 codec_getitem

; 335  : }

  00018	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001c	c3		 ret	 0
PyCodec_Decoder ENDP
_TEXT	ENDS
PUBLIC	PyCodec_IncrementalEncoder
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyCodec_IncrementalEncoder DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$PyCodec_IncrementalEncoder
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyCodec_IncrementalEncoder DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyCodec_IncrementalEncoder
_TEXT	SEGMENT
encoding$ = 48
errors$ = 56
PyCodec_IncrementalEncoder PROC				; COMDAT

; 339  : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 340  :     return codec_getincrementalcodec(encoding, errors, "incrementalencoder");

  0000e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BD@HFBOOJHC@incrementalencoder?$AA@
  00015	48 8b 54 24 38	 mov	 rdx, QWORD PTR errors$[rsp]
  0001a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR encoding$[rsp]
  0001f	e8 00 00 00 00	 call	 codec_getincrementalcodec

; 341  : }

  00024	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00028	c3		 ret	 0
PyCodec_IncrementalEncoder ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$codec_getincrementalcodec DD imagerel codec_getincrementalcodec
	DD	imagerel codec_getincrementalcodec+91
	DD	imagerel $unwind$codec_getincrementalcodec
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$codec_getincrementalcodec DD 011301H
	DD	06213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT codec_getincrementalcodec
_TEXT	SEGMENT
ret$ = 32
codec_info$ = 40
encoding$ = 64
errors$ = 72
attrname$ = 80
codec_getincrementalcodec PROC				; COMDAT

; 269  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 270  :     PyObject *codec_info, *ret;
; 271  : 
; 272  :     codec_info = _PyCodec_Lookup(encoding);

  00013	48 8b 4c 24 40	 mov	 rcx, QWORD PTR encoding$[rsp]
  00018	e8 00 00 00 00	 call	 _PyCodec_Lookup
  0001d	48 89 44 24 28	 mov	 QWORD PTR codec_info$[rsp], rax

; 273  :     if (codec_info == NULL)

  00022	48 83 7c 24 28
	00		 cmp	 QWORD PTR codec_info$[rsp], 0
  00028	75 04		 jne	 SHORT $LN1@codec_geti@2

; 274  :         return NULL;

  0002a	33 c0		 xor	 eax, eax
  0002c	eb 28		 jmp	 SHORT $LN2@codec_geti@2
$LN1@codec_geti@2:

; 275  :     ret = codec_makeincrementalcodec(codec_info, errors, attrname);

  0002e	4c 8b 44 24 50	 mov	 r8, QWORD PTR attrname$[rsp]
  00033	48 8b 54 24 48	 mov	 rdx, QWORD PTR errors$[rsp]
  00038	48 8b 4c 24 28	 mov	 rcx, QWORD PTR codec_info$[rsp]
  0003d	e8 00 00 00 00	 call	 codec_makeincrementalcodec
  00042	48 89 44 24 20	 mov	 QWORD PTR ret$[rsp], rax

; 276  :     Py_DECREF(codec_info);

  00047	48 8b 4c 24 28	 mov	 rcx, QWORD PTR codec_info$[rsp]
  0004c	e8 00 00 00 00	 call	 _Py_DecRef

; 277  :     return ret;

  00051	48 8b 44 24 20	 mov	 rax, QWORD PTR ret$[rsp]
$LN2@codec_geti@2:

; 278  : }

  00056	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0005a	c3		 ret	 0
codec_getincrementalcodec ENDP
_TEXT	ENDS
PUBLIC	PyCodec_IncrementalDecoder
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyCodec_IncrementalDecoder DD imagerel $LN3
	DD	imagerel $LN3+41
	DD	imagerel $unwind$PyCodec_IncrementalDecoder
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyCodec_IncrementalDecoder DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyCodec_IncrementalDecoder
_TEXT	SEGMENT
encoding$ = 48
errors$ = 56
PyCodec_IncrementalDecoder PROC				; COMDAT

; 345  : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 346  :     return codec_getincrementalcodec(encoding, errors, "incrementaldecoder");

  0000e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BD@LLLDLNBG@incrementaldecoder?$AA@
  00015	48 8b 54 24 38	 mov	 rdx, QWORD PTR errors$[rsp]
  0001a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR encoding$[rsp]
  0001f	e8 00 00 00 00	 call	 codec_getincrementalcodec

; 347  : }

  00024	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00028	c3		 ret	 0
PyCodec_IncrementalDecoder ENDP
_TEXT	ENDS
PUBLIC	PyCodec_StreamReader
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyCodec_StreamReader DD imagerel $LN3
	DD	imagerel $LN3+50
	DD	imagerel $unwind$PyCodec_StreamReader
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyCodec_StreamReader DD 011301H
	DD	04213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyCodec_StreamReader
_TEXT	SEGMENT
encoding$ = 48
stream$ = 56
errors$ = 64
PyCodec_StreamReader PROC				; COMDAT

; 352  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 353  :     return codec_getstreamcodec(encoding, stream, errors, 2);

  00013	41 b9 02 00 00
	00		 mov	 r9d, 2
  00019	4c 8b 44 24 40	 mov	 r8, QWORD PTR errors$[rsp]
  0001e	48 8b 54 24 38	 mov	 rdx, QWORD PTR stream$[rsp]
  00023	48 8b 4c 24 30	 mov	 rcx, QWORD PTR encoding$[rsp]
  00028	e8 00 00 00 00	 call	 codec_getstreamcodec

; 354  : }

  0002d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00031	c3		 ret	 0
PyCodec_StreamReader ENDP
_TEXT	ENDS
PUBLIC	??_C@_01MJMHLOMK@O?$AA@				; `string'
PUBLIC	??_C@_02HPGKMGCF@Os?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$codec_getstreamcodec DD imagerel codec_getstreamcodec
	DD	imagerel codec_getstreamcodec+160
	DD	imagerel $unwind$codec_getstreamcodec
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$codec_getstreamcodec DD 011801H
	DD	08218H
xdata	ENDS
;	COMDAT ??_C@_01MJMHLOMK@O?$AA@
CONST	SEGMENT
??_C@_01MJMHLOMK@O?$AA@ DB 'O', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02HPGKMGCF@Os?$AA@
CONST	SEGMENT
??_C@_02HPGKMGCF@Os?$AA@ DB 'Os', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT codec_getstreamcodec
_TEXT	SEGMENT
codecs$ = 32
codeccls$ = 40
streamcodec$ = 48
encoding$ = 80
stream$ = 88
errors$ = 96
index$ = 104
codec_getstreamcodec PROC				; COMDAT

; 287  : {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 288  :     PyObject *codecs, *streamcodec, *codeccls;
; 289  : 
; 290  :     codecs = _PyCodec_Lookup(encoding);

  00018	48 8b 4c 24 50	 mov	 rcx, QWORD PTR encoding$[rsp]
  0001d	e8 00 00 00 00	 call	 _PyCodec_Lookup
  00022	48 89 44 24 20	 mov	 QWORD PTR codecs$[rsp], rax

; 291  :     if (codecs == NULL)

  00027	48 83 7c 24 20
	00		 cmp	 QWORD PTR codecs$[rsp], 0
  0002d	75 04		 jne	 SHORT $LN3@codec_gets

; 292  :         return NULL;

  0002f	33 c0		 xor	 eax, eax
  00031	eb 68		 jmp	 SHORT $LN4@codec_gets
$LN3@codec_gets:

; 293  : 
; 294  :     codeccls = PyTuple_GET_ITEM(codecs, index);

  00033	48 63 44 24 68	 movsxd	 rax, DWORD PTR index$[rsp]
  00038	48 8b 4c 24 20	 mov	 rcx, QWORD PTR codecs$[rsp]
  0003d	48 8b 44 c1 70	 mov	 rax, QWORD PTR [rcx+rax*8+112]
  00042	48 89 44 24 28	 mov	 QWORD PTR codeccls$[rsp], rax

; 295  :     if (errors != NULL)

  00047	48 83 7c 24 60
	00		 cmp	 QWORD PTR errors$[rsp], 0
  0004d	74 22		 je	 SHORT $LN2@codec_gets

; 296  :         streamcodec = PyObject_CallFunction(codeccls, "Os", stream, errors);

  0004f	4c 8b 4c 24 60	 mov	 r9, QWORD PTR errors$[rsp]
  00054	4c 8b 44 24 58	 mov	 r8, QWORD PTR stream$[rsp]
  00059	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02HPGKMGCF@Os?$AA@
  00060	48 8b 4c 24 28	 mov	 rcx, QWORD PTR codeccls$[rsp]
  00065	e8 00 00 00 00	 call	 PyObject_CallFunction
  0006a	48 89 44 24 30	 mov	 QWORD PTR streamcodec$[rsp], rax

; 297  :     else

  0006f	eb 1b		 jmp	 SHORT $LN1@codec_gets
$LN2@codec_gets:

; 298  :         streamcodec = PyObject_CallFunction(codeccls, "O", stream);

  00071	4c 8b 44 24 58	 mov	 r8, QWORD PTR stream$[rsp]
  00076	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01MJMHLOMK@O?$AA@
  0007d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR codeccls$[rsp]
  00082	e8 00 00 00 00	 call	 PyObject_CallFunction
  00087	48 89 44 24 30	 mov	 QWORD PTR streamcodec$[rsp], rax
$LN1@codec_gets:

; 299  :     Py_DECREF(codecs);

  0008c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR codecs$[rsp]
  00091	e8 00 00 00 00	 call	 _Py_DecRef

; 300  :     return streamcodec;

  00096	48 8b 44 24 30	 mov	 rax, QWORD PTR streamcodec$[rsp]
$LN4@codec_gets:

; 301  : }

  0009b	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0009f	c3		 ret	 0
codec_getstreamcodec ENDP
_TEXT	ENDS
PUBLIC	PyCodec_StreamWriter
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyCodec_StreamWriter DD imagerel $LN3
	DD	imagerel $LN3+50
	DD	imagerel $unwind$PyCodec_StreamWriter
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyCodec_StreamWriter DD 011301H
	DD	04213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyCodec_StreamWriter
_TEXT	SEGMENT
encoding$ = 48
stream$ = 56
errors$ = 64
PyCodec_StreamWriter PROC				; COMDAT

; 359  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 360  :     return codec_getstreamcodec(encoding, stream, errors, 3);

  00013	41 b9 03 00 00
	00		 mov	 r9d, 3
  00019	4c 8b 44 24 40	 mov	 r8, QWORD PTR errors$[rsp]
  0001e	48 8b 54 24 38	 mov	 rdx, QWORD PTR stream$[rsp]
  00023	48 8b 4c 24 30	 mov	 rcx, QWORD PTR encoding$[rsp]
  00028	e8 00 00 00 00	 call	 codec_getstreamcodec

; 361  : }

  0002d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00031	c3		 ret	 0
PyCodec_StreamWriter ENDP
_TEXT	ENDS
PUBLIC	PyCodec_Encode
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyCodec_Encode DD imagerel $LN4
	DD	imagerel $LN4+76
	DD	imagerel $unwind$PyCodec_Encode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyCodec_Encode DD 011301H
	DD	06213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyCodec_Encode
_TEXT	SEGMENT
encoder$ = 32
object$ = 64
encoding$ = 72
errors$ = 80
PyCodec_Encode PROC					; COMDAT

; 454  : {

$LN4:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 455  :     PyObject *encoder;
; 456  : 
; 457  :     encoder = PyCodec_Encoder(encoding);

  00013	48 8b 4c 24 48	 mov	 rcx, QWORD PTR encoding$[rsp]
  00018	e8 00 00 00 00	 call	 PyCodec_Encoder
  0001d	48 89 44 24 20	 mov	 QWORD PTR encoder$[rsp], rax

; 458  :     if (encoder == NULL)

  00022	48 83 7c 24 20
	00		 cmp	 QWORD PTR encoder$[rsp], 0
  00028	75 04		 jne	 SHORT $LN1@PyCodec_En

; 459  :         return NULL;

  0002a	33 c0		 xor	 eax, eax
  0002c	eb 19		 jmp	 SHORT $LN2@PyCodec_En
$LN1@PyCodec_En:

; 460  : 
; 461  :     return _PyCodec_EncodeInternal(object, encoder, encoding, errors);

  0002e	4c 8b 4c 24 50	 mov	 r9, QWORD PTR errors$[rsp]
  00033	4c 8b 44 24 48	 mov	 r8, QWORD PTR encoding$[rsp]
  00038	48 8b 54 24 20	 mov	 rdx, QWORD PTR encoder$[rsp]
  0003d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR object$[rsp]
  00042	e8 00 00 00 00	 call	 _PyCodec_EncodeInternal
$LN2@PyCodec_En:

; 462  : }

  00047	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004b	c3		 ret	 0
PyCodec_Encode ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CO@MNIHGCMD@encoder?5must?5return?5a?5tuple?5?$CIobj@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyCodec_EncodeInternal DD imagerel _PyCodec_EncodeInternal
	DD	imagerel _PyCodec_EncodeInternal+314
	DD	imagerel $unwind$_PyCodec_EncodeInternal
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyCodec_EncodeInternal DD 011801H
	DD	08218H
xdata	ENDS
;	COMDAT ??_C@_0CO@MNIHGCMD@encoder?5must?5return?5a?5tuple?5?$CIobj@
CONST	SEGMENT
??_C@_0CO@MNIHGCMD@encoder?5must?5return?5a?5tuple?5?$CIobj@ DB 'encoder '
	DB	'must return a tuple (object, integer)', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PyCodec_EncodeInternal
_TEXT	SEGMENT
v$ = 32
args$ = 40
result$ = 48
object$ = 80
encoder$ = 88
encoding$ = 96
errors$ = 104
_PyCodec_EncodeInternal PROC				; COMDAT

; 373  : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 374  :     PyObject *args = NULL, *result = NULL;

  00018	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR args$[rsp], 0
  00021	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR result$[rsp], 0

; 375  :     PyObject *v = NULL;

  0002a	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR v$[rsp], 0

; 376  : 
; 377  :     args = args_tuple(object, errors);

  00033	48 8b 54 24 68	 mov	 rdx, QWORD PTR errors$[rsp]
  00038	48 8b 4c 24 50	 mov	 rcx, QWORD PTR object$[rsp]
  0003d	e8 00 00 00 00	 call	 args_tuple
  00042	48 89 44 24 28	 mov	 QWORD PTR args$[rsp], rax

; 378  :     if (args == NULL)

  00047	48 83 7c 24 28
	00		 cmp	 QWORD PTR args$[rsp], 0
  0004d	75 05		 jne	 SHORT $LN16@PyCodec_En@2

; 379  :         goto onError;

  0004f	e9 97 00 00 00	 jmp	 $onError$20540
$LN16@PyCodec_En@2:

; 380  : 
; 381  :     result = PyEval_CallObject(encoder, args);

  00054	45 33 c0	 xor	 r8d, r8d
  00057	48 8b 54 24 28	 mov	 rdx, QWORD PTR args$[rsp]
  0005c	48 8b 4c 24 58	 mov	 rcx, QWORD PTR encoder$[rsp]
  00061	e8 00 00 00 00	 call	 PyEval_CallObjectWithKeywords
  00066	48 89 44 24 30	 mov	 QWORD PTR result$[rsp], rax

; 382  :     if (result == NULL)

  0006b	48 83 7c 24 30
	00		 cmp	 QWORD PTR result$[rsp], 0
  00071	75 02		 jne	 SHORT $LN15@PyCodec_En@2

; 383  :         goto onError;

  00073	eb 76		 jmp	 SHORT $onError$20540
$LN15@PyCodec_En@2:

; 384  : 
; 385  :     if (!PyTuple_Check(result) ||
; 386  :         PyTuple_GET_SIZE(result) != 2) {

  00075	48 8b 44 24 30	 mov	 rax, QWORD PTR result$[rsp]
  0007a	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0007e	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00084	25 00 00 00 04	 and	 eax, 67108864		; 04000000H
  00089	85 c0		 test	 eax, eax
  0008b	74 0c		 je	 SHORT $LN13@PyCodec_En@2
  0008d	48 8b 44 24 30	 mov	 rax, QWORD PTR result$[rsp]
  00092	48 83 78 60 02	 cmp	 QWORD PTR [rax+96], 2
  00097	74 15		 je	 SHORT $LN14@PyCodec_En@2
$LN13@PyCodec_En@2:

; 387  :         PyErr_SetString(PyExc_TypeError,
; 388  :                         "encoder must return a tuple (object, integer)");

  00099	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CO@MNIHGCMD@encoder?5must?5return?5a?5tuple?5?$CIobj@
  000a0	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000a7	e8 00 00 00 00	 call	 PyErr_SetString

; 389  :         goto onError;

  000ac	eb 3d		 jmp	 SHORT $onError$20540
$LN14@PyCodec_En@2:

; 390  :     }
; 391  :     v = PyTuple_GET_ITEM(result,0);

  000ae	48 8b 44 24 30	 mov	 rax, QWORD PTR result$[rsp]
  000b3	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  000b7	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax

; 392  :     Py_INCREF(v);

  000bc	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  000c1	e8 00 00 00 00	 call	 _Py_IncRef

; 393  :     /* We don't check or use the second (integer) entry. */
; 394  : 
; 395  :     Py_DECREF(args);

  000c6	48 8b 4c 24 28	 mov	 rcx, QWORD PTR args$[rsp]
  000cb	e8 00 00 00 00	 call	 _Py_DecRef

; 396  :     Py_DECREF(encoder);

  000d0	48 8b 4c 24 58	 mov	 rcx, QWORD PTR encoder$[rsp]
  000d5	e8 00 00 00 00	 call	 _Py_DecRef

; 397  :     Py_DECREF(result);

  000da	48 8b 4c 24 30	 mov	 rcx, QWORD PTR result$[rsp]
  000df	e8 00 00 00 00	 call	 _Py_DecRef

; 398  :     return v;

  000e4	48 8b 44 24 20	 mov	 rax, QWORD PTR v$[rsp]
  000e9	eb 4a		 jmp	 SHORT $LN17@PyCodec_En@2
$onError$20540:
$LN12@PyCodec_En@2:

; 399  : 
; 400  :  onError:
; 401  :     Py_XDECREF(result);

  000eb	48 83 7c 24 30
	00		 cmp	 QWORD PTR result$[rsp], 0
  000f1	74 0a		 je	 SHORT $LN9@PyCodec_En@2
  000f3	48 8b 4c 24 30	 mov	 rcx, QWORD PTR result$[rsp]
  000f8	e8 00 00 00 00	 call	 _Py_DecRef
$LN9@PyCodec_En@2:
  000fd	33 c0		 xor	 eax, eax
  000ff	85 c0		 test	 eax, eax
  00101	75 e8		 jne	 SHORT $LN12@PyCodec_En@2
$LN8@PyCodec_En@2:

; 402  :     Py_XDECREF(args);

  00103	48 83 7c 24 28
	00		 cmp	 QWORD PTR args$[rsp], 0
  00109	74 0a		 je	 SHORT $LN5@PyCodec_En@2
  0010b	48 8b 4c 24 28	 mov	 rcx, QWORD PTR args$[rsp]
  00110	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@PyCodec_En@2:
  00115	33 c0		 xor	 eax, eax
  00117	85 c0		 test	 eax, eax
  00119	75 e8		 jne	 SHORT $LN8@PyCodec_En@2
$LN4@PyCodec_En@2:

; 403  :     Py_XDECREF(encoder);

  0011b	48 83 7c 24 58
	00		 cmp	 QWORD PTR encoder$[rsp], 0
  00121	74 0a		 je	 SHORT $LN1@PyCodec_En@2
  00123	48 8b 4c 24 58	 mov	 rcx, QWORD PTR encoder$[rsp]
  00128	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@PyCodec_En@2:
  0012d	33 c0		 xor	 eax, eax
  0012f	85 c0		 test	 eax, eax
  00131	75 e8		 jne	 SHORT $LN4@PyCodec_En@2

; 404  :     return NULL;

  00133	33 c0		 xor	 eax, eax
$LN17@PyCodec_En@2:

; 405  : }

  00135	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00139	c3		 ret	 0
_PyCodec_EncodeInternal ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$args_tuple DD imagerel args_tuple
	DD	imagerel args_tuple+166
	DD	imagerel $unwind$args_tuple
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$args_tuple DD 010e01H
	DD	0820eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT args_tuple
_TEXT	SEGMENT
args$ = 32
v$20405 = 40
tv66 = 48
object$ = 80
errors$ = 88
args_tuple PROC						; COMDAT

; 208  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 209  :     PyObject *args;
; 210  : 
; 211  :     args = PyTuple_New(1 + (errors != NULL));

  0000e	48 83 7c 24 58
	00		 cmp	 QWORD PTR errors$[rsp], 0
  00014	74 0a		 je	 SHORT $LN6@args_tuple
  00016	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv66[rsp], 1
  0001e	eb 08		 jmp	 SHORT $LN7@args_tuple
$LN6@args_tuple:
  00020	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv66[rsp], 0
$LN7@args_tuple:
  00028	8b 44 24 30	 mov	 eax, DWORD PTR tv66[rsp]
  0002c	ff c0		 inc	 eax
  0002e	48 98		 cdqe
  00030	48 8b c8	 mov	 rcx, rax
  00033	e8 00 00 00 00	 call	 PyTuple_New
  00038	48 89 44 24 20	 mov	 QWORD PTR args$[rsp], rax

; 212  :     if (args == NULL)

  0003d	48 83 7c 24 20
	00		 cmp	 QWORD PTR args$[rsp], 0
  00043	75 04		 jne	 SHORT $LN3@args_tuple

; 213  :         return NULL;

  00045	33 c0		 xor	 eax, eax
  00047	eb 58		 jmp	 SHORT $LN4@args_tuple
$LN3@args_tuple:

; 214  :     Py_INCREF(object);

  00049	48 8b 4c 24 50	 mov	 rcx, QWORD PTR object$[rsp]
  0004e	e8 00 00 00 00	 call	 _Py_IncRef

; 215  :     PyTuple_SET_ITEM(args,0,object);

  00053	48 8b 44 24 20	 mov	 rax, QWORD PTR args$[rsp]
  00058	48 8b 4c 24 50	 mov	 rcx, QWORD PTR object$[rsp]
  0005d	48 89 48 70	 mov	 QWORD PTR [rax+112], rcx

; 216  :     if (errors) {

  00061	48 83 7c 24 58
	00		 cmp	 QWORD PTR errors$[rsp], 0
  00067	74 33		 je	 SHORT $LN2@args_tuple

; 217  :         PyObject *v;
; 218  : 
; 219  :         v = PyUnicode_FromString(errors);

  00069	48 8b 4c 24 58	 mov	 rcx, QWORD PTR errors$[rsp]
  0006e	e8 00 00 00 00	 call	 PyUnicode_FromString
  00073	48 89 44 24 28	 mov	 QWORD PTR v$20405[rsp], rax

; 220  :         if (v == NULL) {

  00078	48 83 7c 24 28
	00		 cmp	 QWORD PTR v$20405[rsp], 0
  0007e	75 0e		 jne	 SHORT $LN1@args_tuple

; 221  :             Py_DECREF(args);

  00080	48 8b 4c 24 20	 mov	 rcx, QWORD PTR args$[rsp]
  00085	e8 00 00 00 00	 call	 _Py_DecRef

; 222  :             return NULL;

  0008a	33 c0		 xor	 eax, eax
  0008c	eb 13		 jmp	 SHORT $LN4@args_tuple
$LN1@args_tuple:

; 223  :         }
; 224  :         PyTuple_SET_ITEM(args, 1, v);

  0008e	48 8b 44 24 20	 mov	 rax, QWORD PTR args$[rsp]
  00093	48 8b 4c 24 28	 mov	 rcx, QWORD PTR v$20405[rsp]
  00098	48 89 48 78	 mov	 QWORD PTR [rax+120], rcx
$LN2@args_tuple:

; 225  :     }
; 226  :     return args;

  0009c	48 8b 44 24 20	 mov	 rax, QWORD PTR args$[rsp]
$LN4@args_tuple:

; 227  : }

  000a1	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000a5	c3		 ret	 0
args_tuple ENDP
_TEXT	ENDS
PUBLIC	PyCodec_Decode
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyCodec_Decode DD imagerel $LN4
	DD	imagerel $LN4+76
	DD	imagerel $unwind$PyCodec_Decode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyCodec_Decode DD 011301H
	DD	06213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyCodec_Decode
_TEXT	SEGMENT
decoder$ = 32
object$ = 64
encoding$ = 72
errors$ = 80
PyCodec_Decode PROC					; COMDAT

; 467  : {

$LN4:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 468  :     PyObject *decoder;
; 469  : 
; 470  :     decoder = PyCodec_Decoder(encoding);

  00013	48 8b 4c 24 48	 mov	 rcx, QWORD PTR encoding$[rsp]
  00018	e8 00 00 00 00	 call	 PyCodec_Decoder
  0001d	48 89 44 24 20	 mov	 QWORD PTR decoder$[rsp], rax

; 471  :     if (decoder == NULL)

  00022	48 83 7c 24 20
	00		 cmp	 QWORD PTR decoder$[rsp], 0
  00028	75 04		 jne	 SHORT $LN1@PyCodec_De

; 472  :         return NULL;

  0002a	33 c0		 xor	 eax, eax
  0002c	eb 19		 jmp	 SHORT $LN2@PyCodec_De
$LN1@PyCodec_De:

; 473  : 
; 474  :     return _PyCodec_DecodeInternal(object, decoder, encoding, errors);

  0002e	4c 8b 4c 24 50	 mov	 r9, QWORD PTR errors$[rsp]
  00033	4c 8b 44 24 48	 mov	 r8, QWORD PTR encoding$[rsp]
  00038	48 8b 54 24 20	 mov	 rdx, QWORD PTR decoder$[rsp]
  0003d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR object$[rsp]
  00042	e8 00 00 00 00	 call	 _PyCodec_DecodeInternal
$LN2@PyCodec_De:

; 475  : }

  00047	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004b	c3		 ret	 0
PyCodec_Decode ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CN@KGDHGJFI@decoder?5must?5return?5a?5tuple?5?$CIobj@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyCodec_DecodeInternal DD imagerel _PyCodec_DecodeInternal
	DD	imagerel _PyCodec_DecodeInternal+305
	DD	imagerel $unwind$_PyCodec_DecodeInternal
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyCodec_DecodeInternal DD 011801H
	DD	08218H
xdata	ENDS
;	COMDAT ??_C@_0CN@KGDHGJFI@decoder?5must?5return?5a?5tuple?5?$CIobj@
CONST	SEGMENT
??_C@_0CN@KGDHGJFI@decoder?5must?5return?5a?5tuple?5?$CIobj@ DB 'decoder '
	DB	'must return a tuple (object,integer)', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PyCodec_DecodeInternal
_TEXT	SEGMENT
v$ = 32
args$ = 40
result$ = 48
object$ = 80
decoder$ = 88
encoding$ = 96
errors$ = 104
_PyCodec_DecodeInternal PROC				; COMDAT

; 417  : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 418  :     PyObject *args = NULL, *result = NULL;

  00018	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR args$[rsp], 0
  00021	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR result$[rsp], 0

; 419  :     PyObject *v;
; 420  : 
; 421  :     args = args_tuple(object, errors);

  0002a	48 8b 54 24 68	 mov	 rdx, QWORD PTR errors$[rsp]
  0002f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR object$[rsp]
  00034	e8 00 00 00 00	 call	 args_tuple
  00039	48 89 44 24 28	 mov	 QWORD PTR args$[rsp], rax

; 422  :     if (args == NULL)

  0003e	48 83 7c 24 28
	00		 cmp	 QWORD PTR args$[rsp], 0
  00044	75 05		 jne	 SHORT $LN16@PyCodec_De@2

; 423  :         goto onError;

  00046	e9 97 00 00 00	 jmp	 $onError$20588
$LN16@PyCodec_De@2:

; 424  : 
; 425  :     result = PyEval_CallObject(decoder,args);

  0004b	45 33 c0	 xor	 r8d, r8d
  0004e	48 8b 54 24 28	 mov	 rdx, QWORD PTR args$[rsp]
  00053	48 8b 4c 24 58	 mov	 rcx, QWORD PTR decoder$[rsp]
  00058	e8 00 00 00 00	 call	 PyEval_CallObjectWithKeywords
  0005d	48 89 44 24 30	 mov	 QWORD PTR result$[rsp], rax

; 426  :     if (result == NULL)

  00062	48 83 7c 24 30
	00		 cmp	 QWORD PTR result$[rsp], 0
  00068	75 02		 jne	 SHORT $LN15@PyCodec_De@2

; 427  :         goto onError;

  0006a	eb 76		 jmp	 SHORT $onError$20588
$LN15@PyCodec_De@2:

; 428  :     if (!PyTuple_Check(result) ||
; 429  :         PyTuple_GET_SIZE(result) != 2) {

  0006c	48 8b 44 24 30	 mov	 rax, QWORD PTR result$[rsp]
  00071	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00075	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0007b	25 00 00 00 04	 and	 eax, 67108864		; 04000000H
  00080	85 c0		 test	 eax, eax
  00082	74 0c		 je	 SHORT $LN13@PyCodec_De@2
  00084	48 8b 44 24 30	 mov	 rax, QWORD PTR result$[rsp]
  00089	48 83 78 60 02	 cmp	 QWORD PTR [rax+96], 2
  0008e	74 15		 je	 SHORT $LN14@PyCodec_De@2
$LN13@PyCodec_De@2:

; 430  :         PyErr_SetString(PyExc_TypeError,
; 431  :                         "decoder must return a tuple (object,integer)");

  00090	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CN@KGDHGJFI@decoder?5must?5return?5a?5tuple?5?$CIobj@
  00097	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0009e	e8 00 00 00 00	 call	 PyErr_SetString

; 432  :         goto onError;

  000a3	eb 3d		 jmp	 SHORT $onError$20588
$LN14@PyCodec_De@2:

; 433  :     }
; 434  :     v = PyTuple_GET_ITEM(result,0);

  000a5	48 8b 44 24 30	 mov	 rax, QWORD PTR result$[rsp]
  000aa	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  000ae	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax

; 435  :     Py_INCREF(v);

  000b3	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  000b8	e8 00 00 00 00	 call	 _Py_IncRef

; 436  :     /* We don't check or use the second (integer) entry. */
; 437  : 
; 438  :     Py_DECREF(args);

  000bd	48 8b 4c 24 28	 mov	 rcx, QWORD PTR args$[rsp]
  000c2	e8 00 00 00 00	 call	 _Py_DecRef

; 439  :     Py_DECREF(decoder);

  000c7	48 8b 4c 24 58	 mov	 rcx, QWORD PTR decoder$[rsp]
  000cc	e8 00 00 00 00	 call	 _Py_DecRef

; 440  :     Py_DECREF(result);

  000d1	48 8b 4c 24 30	 mov	 rcx, QWORD PTR result$[rsp]
  000d6	e8 00 00 00 00	 call	 _Py_DecRef

; 441  :     return v;

  000db	48 8b 44 24 20	 mov	 rax, QWORD PTR v$[rsp]
  000e0	eb 4a		 jmp	 SHORT $LN17@PyCodec_De@2
$onError$20588:
$LN12@PyCodec_De@2:

; 442  : 
; 443  :  onError:
; 444  :     Py_XDECREF(args);

  000e2	48 83 7c 24 28
	00		 cmp	 QWORD PTR args$[rsp], 0
  000e8	74 0a		 je	 SHORT $LN9@PyCodec_De@2
  000ea	48 8b 4c 24 28	 mov	 rcx, QWORD PTR args$[rsp]
  000ef	e8 00 00 00 00	 call	 _Py_DecRef
$LN9@PyCodec_De@2:
  000f4	33 c0		 xor	 eax, eax
  000f6	85 c0		 test	 eax, eax
  000f8	75 e8		 jne	 SHORT $LN12@PyCodec_De@2
$LN8@PyCodec_De@2:

; 445  :     Py_XDECREF(decoder);

  000fa	48 83 7c 24 58
	00		 cmp	 QWORD PTR decoder$[rsp], 0
  00100	74 0a		 je	 SHORT $LN5@PyCodec_De@2
  00102	48 8b 4c 24 58	 mov	 rcx, QWORD PTR decoder$[rsp]
  00107	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@PyCodec_De@2:
  0010c	33 c0		 xor	 eax, eax
  0010e	85 c0		 test	 eax, eax
  00110	75 e8		 jne	 SHORT $LN8@PyCodec_De@2
$LN4@PyCodec_De@2:

; 446  :     Py_XDECREF(result);

  00112	48 83 7c 24 30
	00		 cmp	 QWORD PTR result$[rsp], 0
  00118	74 0a		 je	 SHORT $LN1@PyCodec_De@2
  0011a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR result$[rsp]
  0011f	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@PyCodec_De@2:
  00124	33 c0		 xor	 eax, eax
  00126	85 c0		 test	 eax, eax
  00128	75 e8		 jne	 SHORT $LN4@PyCodec_De@2

; 447  :     return NULL;

  0012a	33 c0		 xor	 eax, eax
$LN17@PyCodec_De@2:

; 448  : }

  0012c	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00130	c3		 ret	 0
_PyCodec_DecodeInternal ENDP
_TEXT	ENDS
PUBLIC	??_C@_0ED@DJOHLNAJ@?8?$CF?4400s?8?5is?5not?5a?5text?5encoding?$DL@ ; `string'
PUBLIC	_PyCodec_LookupTextEncoding
EXTRN	PyObject_IsTrue:PROC
EXTRN	PyErr_ExceptionMatches:PROC
EXTRN	PyExc_AttributeError:QWORD
EXTRN	_PyObject_GetAttrId:PROC
EXTRN	PyTuple_Type:BYTE
EXTRN	_tls_index:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyCodec_LookupTextEncoding DD imagerel $LN10
	DD	imagerel $LN10+241
	DD	imagerel $unwind$_PyCodec_LookupTextEncoding
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyCodec_LookupTextEncoding DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_0ED@DJOHLNAJ@?8?$CF?4400s?8?5is?5not?5a?5text?5encoding?$DL@
CONST	SEGMENT
??_C@_0ED@DJOHLNAJ@?8?$CF?4400s?8?5is?5not?5a?5text?5encoding?$DL@ DB ''''
	DB	'%.400s'' is not a text encoding; use %s to handle arbitrary c'
	DB	'odecs', 00H					; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PyCodec_LookupTextEncoding
_TEXT	SEGMENT
attr$ = 32
is_text_codec$ = 40
codec$ = 48
encoding$ = 80
alternate_command$ = 88
_PyCodec_LookupTextEncoding PROC			; COMDAT

; 480  : {

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 481  :     _Py_IDENTIFIER(_is_text_encoding);
; 482  :     PyObject *codec;
; 483  :     PyObject *attr;
; 484  :     int is_text_codec;
; 485  : 
; 486  :     codec = _PyCodec_Lookup(encoding);

  0000e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR encoding$[rsp]
  00013	e8 00 00 00 00	 call	 _PyCodec_Lookup
  00018	48 89 44 24 30	 mov	 QWORD PTR codec$[rsp], rax

; 487  :     if (codec == NULL)

  0001d	48 83 7c 24 30
	00		 cmp	 QWORD PTR codec$[rsp], 0
  00023	75 07		 jne	 SHORT $LN7@PyCodec_Lo@2

; 488  :         return NULL;

  00025	33 c0		 xor	 eax, eax
  00027	e9 c0 00 00 00	 jmp	 $LN8@PyCodec_Lo@2
$LN7@PyCodec_Lo@2:

; 489  : 
; 490  :     /* Backwards compatibility: assume any raw tuple describes a text
; 491  :      * encoding, and the same for anything lacking the private
; 492  :      * attribute.
; 493  :      */
; 494  :     if (!PyTuple_CheckExact(codec)) {

  0002c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyTuple_Type
  00033	48 8b 4c 24 30	 mov	 rcx, QWORD PTR codec$[rsp]
  00038	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0003c	0f 84 a5 00 00
	00		 je	 $LN6@PyCodec_Lo@2

; 495  :         attr = _PyObject_GetAttrId(codec, &PyId__is_text_encoding);

  00042	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId__is_text_encoding@?1??_PyCodec_LookupTextEncoding@@9@9
  00047	8b c0		 mov	 eax, eax
  00049	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0004f	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00058	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0005c	48 8b d0	 mov	 rdx, rax
  0005f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR codec$[rsp]
  00064	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00069	48 89 44 24 20	 mov	 QWORD PTR attr$[rsp], rax

; 496  :         if (attr == NULL) {

  0006e	48 83 7c 24 20
	00		 cmp	 QWORD PTR attr$[rsp], 0
  00074	75 27		 jne	 SHORT $LN5@PyCodec_Lo@2

; 497  :             if (PyErr_ExceptionMatches(PyExc_AttributeError)) {

  00076	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_AttributeError
  0007d	e8 00 00 00 00	 call	 PyErr_ExceptionMatches
  00082	85 c0		 test	 eax, eax
  00084	74 07		 je	 SHORT $LN4@PyCodec_Lo@2

; 498  :                 PyErr_Clear();

  00086	e8 00 00 00 00	 call	 PyErr_Clear

; 499  :             } else {

  0008b	eb 0e		 jmp	 SHORT $LN3@PyCodec_Lo@2
$LN4@PyCodec_Lo@2:

; 500  :                 Py_DECREF(codec);

  0008d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR codec$[rsp]
  00092	e8 00 00 00 00	 call	 _Py_DecRef

; 501  :                 return NULL;

  00097	33 c0		 xor	 eax, eax
  00099	eb 51		 jmp	 SHORT $LN8@PyCodec_Lo@2
$LN3@PyCodec_Lo@2:

; 502  :             }
; 503  :         } else {

  0009b	eb 4a		 jmp	 SHORT $LN2@PyCodec_Lo@2
$LN5@PyCodec_Lo@2:

; 504  :             is_text_codec = PyObject_IsTrue(attr);

  0009d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR attr$[rsp]
  000a2	e8 00 00 00 00	 call	 PyObject_IsTrue
  000a7	89 44 24 28	 mov	 DWORD PTR is_text_codec$[rsp], eax

; 505  :             Py_DECREF(attr);

  000ab	48 8b 4c 24 20	 mov	 rcx, QWORD PTR attr$[rsp]
  000b0	e8 00 00 00 00	 call	 _Py_DecRef

; 506  :             if (!is_text_codec) {

  000b5	83 7c 24 28 00	 cmp	 DWORD PTR is_text_codec$[rsp], 0
  000ba	75 2b		 jne	 SHORT $LN1@PyCodec_Lo@2

; 507  :                 Py_DECREF(codec);

  000bc	48 8b 4c 24 30	 mov	 rcx, QWORD PTR codec$[rsp]
  000c1	e8 00 00 00 00	 call	 _Py_DecRef

; 508  :                 PyErr_Format(PyExc_LookupError,
; 509  :                              "'%.400s' is not a text encoding; "
; 510  :                              "use %s to handle arbitrary codecs",
; 511  :                              encoding, alternate_command);

  000c6	4c 8b 4c 24 58	 mov	 r9, QWORD PTR alternate_command$[rsp]
  000cb	4c 8b 44 24 50	 mov	 r8, QWORD PTR encoding$[rsp]
  000d0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0ED@DJOHLNAJ@?8?$CF?4400s?8?5is?5not?5a?5text?5encoding?$DL@
  000d7	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_LookupError
  000de	e8 00 00 00 00	 call	 PyErr_Format

; 512  :                 return NULL;

  000e3	33 c0		 xor	 eax, eax
  000e5	eb 05		 jmp	 SHORT $LN8@PyCodec_Lo@2
$LN1@PyCodec_Lo@2:
$LN2@PyCodec_Lo@2:
$LN6@PyCodec_Lo@2:

; 513  :             }
; 514  :         }
; 515  :     }
; 516  : 
; 517  :     /* This appears to be a valid text encoding */
; 518  :     return codec;

  000e7	48 8b 44 24 30	 mov	 rax, QWORD PTR codec$[rsp]
$LN8@PyCodec_Lo@2:

; 519  : }

  000ec	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000f0	c3		 ret	 0
_PyCodec_LookupTextEncoding ENDP
_TEXT	ENDS
PUBLIC	_PyCodec_EncodeText
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyCodec_EncodeText DD imagerel $LN4
	DD	imagerel $LN4+76
	DD	imagerel $unwind$_PyCodec_EncodeText
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyCodec_EncodeText DD 011301H
	DD	06213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _PyCodec_EncodeText
_TEXT	SEGMENT
encoder$ = 32
object$ = 64
encoding$ = 72
errors$ = 80
_PyCodec_EncodeText PROC				; COMDAT

; 553  : {

$LN4:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 554  :     PyObject *encoder;
; 555  : 
; 556  :     encoder = _PyCodec_TextEncoder(encoding);

  00013	48 8b 4c 24 48	 mov	 rcx, QWORD PTR encoding$[rsp]
  00018	e8 00 00 00 00	 call	 _PyCodec_TextEncoder
  0001d	48 89 44 24 20	 mov	 QWORD PTR encoder$[rsp], rax

; 557  :     if (encoder == NULL)

  00022	48 83 7c 24 20
	00		 cmp	 QWORD PTR encoder$[rsp], 0
  00028	75 04		 jne	 SHORT $LN1@PyCodec_En@3

; 558  :         return NULL;

  0002a	33 c0		 xor	 eax, eax
  0002c	eb 19		 jmp	 SHORT $LN2@PyCodec_En@3
$LN1@PyCodec_En@3:

; 559  : 
; 560  :     return _PyCodec_EncodeInternal(object, encoder, encoding, errors);

  0002e	4c 8b 4c 24 50	 mov	 r9, QWORD PTR errors$[rsp]
  00033	4c 8b 44 24 48	 mov	 r8, QWORD PTR encoding$[rsp]
  00038	48 8b 54 24 20	 mov	 rdx, QWORD PTR encoder$[rsp]
  0003d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR object$[rsp]
  00042	e8 00 00 00 00	 call	 _PyCodec_EncodeInternal
$LN2@PyCodec_En@3:

; 561  : }

  00047	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004b	c3		 ret	 0
_PyCodec_EncodeText ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BA@HIHFBICN@codecs?4encode?$CI?$CJ?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyCodec_TextEncoder DD imagerel _PyCodec_TextEncoder
	DD	imagerel _PyCodec_TextEncoder+34
	DD	imagerel $unwind$_PyCodec_TextEncoder
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyCodec_TextEncoder DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT ??_C@_0BA@HIHFBICN@codecs?4encode?$CI?$CJ?$AA@
CONST	SEGMENT
??_C@_0BA@HIHFBICN@codecs?4encode?$CI?$CJ?$AA@ DB 'codecs.encode()', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PyCodec_TextEncoder
_TEXT	SEGMENT
encoding$ = 48
_PyCodec_TextEncoder PROC				; COMDAT

; 541  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 542  :     return codec_getitem_checked(encoding, "codecs.encode()", 0);

  00009	45 33 c0	 xor	 r8d, r8d
  0000c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BA@HIHFBICN@codecs?4encode?$CI?$CJ?$AA@
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR encoding$[rsp]
  00018	e8 00 00 00 00	 call	 codec_getitem_checked

; 543  : }

  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
_PyCodec_TextEncoder ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$codec_getitem_checked DD imagerel codec_getitem_checked
	DD	imagerel codec_getitem_checked+101
	DD	imagerel $unwind$codec_getitem_checked
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$codec_getitem_checked DD 011301H
	DD	06213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT codec_getitem_checked
_TEXT	SEGMENT
v$ = 32
codec$ = 40
encoding$ = 64
alternate_command$ = 72
index$ = 80
codec_getitem_checked PROC				; COMDAT

; 526  : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 527  :     PyObject *codec;
; 528  :     PyObject *v;
; 529  : 
; 530  :     codec = _PyCodec_LookupTextEncoding(encoding, alternate_command);

  00013	48 8b 54 24 48	 mov	 rdx, QWORD PTR alternate_command$[rsp]
  00018	48 8b 4c 24 40	 mov	 rcx, QWORD PTR encoding$[rsp]
  0001d	e8 00 00 00 00	 call	 _PyCodec_LookupTextEncoding
  00022	48 89 44 24 28	 mov	 QWORD PTR codec$[rsp], rax

; 531  :     if (codec == NULL)

  00027	48 83 7c 24 28
	00		 cmp	 QWORD PTR codec$[rsp], 0
  0002d	75 04		 jne	 SHORT $LN1@codec_geti@3

; 532  :         return NULL;

  0002f	33 c0		 xor	 eax, eax
  00031	eb 2d		 jmp	 SHORT $LN2@codec_geti@3
$LN1@codec_geti@3:

; 533  : 
; 534  :     v = PyTuple_GET_ITEM(codec, index);

  00033	48 63 44 24 50	 movsxd	 rax, DWORD PTR index$[rsp]
  00038	48 8b 4c 24 28	 mov	 rcx, QWORD PTR codec$[rsp]
  0003d	48 8b 44 c1 70	 mov	 rax, QWORD PTR [rcx+rax*8+112]
  00042	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax

; 535  :     Py_INCREF(v);

  00047	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  0004c	e8 00 00 00 00	 call	 _Py_IncRef

; 536  :     Py_DECREF(codec);

  00051	48 8b 4c 24 28	 mov	 rcx, QWORD PTR codec$[rsp]
  00056	e8 00 00 00 00	 call	 _Py_DecRef

; 537  :     return v;

  0005b	48 8b 44 24 20	 mov	 rax, QWORD PTR v$[rsp]
$LN2@codec_geti@3:

; 538  : }

  00060	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00064	c3		 ret	 0
codec_getitem_checked ENDP
_TEXT	ENDS
PUBLIC	_PyCodec_DecodeText
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyCodec_DecodeText DD imagerel $LN4
	DD	imagerel $LN4+76
	DD	imagerel $unwind$_PyCodec_DecodeText
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyCodec_DecodeText DD 011301H
	DD	06213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _PyCodec_DecodeText
_TEXT	SEGMENT
decoder$ = 32
object$ = 64
encoding$ = 72
errors$ = 80
_PyCodec_DecodeText PROC				; COMDAT

; 566  : {

$LN4:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 567  :     PyObject *decoder;
; 568  : 
; 569  :     decoder = _PyCodec_TextDecoder(encoding);

  00013	48 8b 4c 24 48	 mov	 rcx, QWORD PTR encoding$[rsp]
  00018	e8 00 00 00 00	 call	 _PyCodec_TextDecoder
  0001d	48 89 44 24 20	 mov	 QWORD PTR decoder$[rsp], rax

; 570  :     if (decoder == NULL)

  00022	48 83 7c 24 20
	00		 cmp	 QWORD PTR decoder$[rsp], 0
  00028	75 04		 jne	 SHORT $LN1@PyCodec_De@3

; 571  :         return NULL;

  0002a	33 c0		 xor	 eax, eax
  0002c	eb 19		 jmp	 SHORT $LN2@PyCodec_De@3
$LN1@PyCodec_De@3:

; 572  : 
; 573  :     return _PyCodec_DecodeInternal(object, decoder, encoding, errors);

  0002e	4c 8b 4c 24 50	 mov	 r9, QWORD PTR errors$[rsp]
  00033	4c 8b 44 24 48	 mov	 r8, QWORD PTR encoding$[rsp]
  00038	48 8b 54 24 20	 mov	 rdx, QWORD PTR decoder$[rsp]
  0003d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR object$[rsp]
  00042	e8 00 00 00 00	 call	 _PyCodec_DecodeInternal
$LN2@PyCodec_De@3:

; 574  : }

  00047	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004b	c3		 ret	 0
_PyCodec_DecodeText ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BA@DCGEBADI@codecs?4decode?$CI?$CJ?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyCodec_TextDecoder DD imagerel _PyCodec_TextDecoder
	DD	imagerel _PyCodec_TextDecoder+37
	DD	imagerel $unwind$_PyCodec_TextDecoder
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyCodec_TextDecoder DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT ??_C@_0BA@DCGEBADI@codecs?4decode?$CI?$CJ?$AA@
CONST	SEGMENT
??_C@_0BA@DCGEBADI@codecs?4decode?$CI?$CJ?$AA@ DB 'codecs.decode()', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PyCodec_TextDecoder
_TEXT	SEGMENT
encoding$ = 48
_PyCodec_TextDecoder PROC				; COMDAT

; 546  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 547  :     return codec_getitem_checked(encoding, "codecs.decode()", 1);

  00009	41 b8 01 00 00
	00		 mov	 r8d, 1
  0000f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BA@DCGEBADI@codecs?4decode?$CI?$CJ?$AA@
  00016	48 8b 4c 24 30	 mov	 rcx, QWORD PTR encoding$[rsp]
  0001b	e8 00 00 00 00	 call	 codec_getitem_checked

; 548  : }

  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	c3		 ret	 0
_PyCodec_TextDecoder ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BJ@ICFBCEJM@handler?5must?5be?5callable?$AA@ ; `string'
PUBLIC	PyCodec_RegisterError
EXTRN	PyDict_SetItemString:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyCodec_RegisterError DD imagerel $LN5
	DD	imagerel $LN5+125
	DD	imagerel $unwind$PyCodec_RegisterError
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyCodec_RegisterError DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT ??_C@_0BJ@ICFBCEJM@handler?5must?5be?5callable?$AA@
CONST	SEGMENT
??_C@_0BJ@ICFBCEJM@handler?5must?5be?5callable?$AA@ DB 'handler must be c'
	DB	'allable', 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyCodec_RegisterError
_TEXT	SEGMENT
interp$ = 32
name$ = 64
error$ = 72
PyCodec_RegisterError PROC				; COMDAT

; 583  : {

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 584  :     PyInterpreterState *interp = PyThreadState_GET()->interp;

  0000e	e8 00 00 00 00	 call	 PyThreadState_Get
  00013	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00017	48 89 44 24 20	 mov	 QWORD PTR interp$[rsp], rax

; 585  :     if (interp->codec_search_path == NULL && _PyCodecRegistry_Init())

  0001c	48 8b 44 24 20	 mov	 rax, QWORD PTR interp$[rsp]
  00021	48 83 78 38 00	 cmp	 QWORD PTR [rax+56], 0
  00026	75 10		 jne	 SHORT $LN2@PyCodec_Re@2
  00028	e8 00 00 00 00	 call	 _PyCodecRegistry_Init
  0002d	85 c0		 test	 eax, eax
  0002f	74 07		 je	 SHORT $LN2@PyCodec_Re@2

; 586  :         return -1;

  00031	b8 ff ff ff ff	 mov	 eax, -1
  00036	eb 40		 jmp	 SHORT $LN3@PyCodec_Re@2
$LN2@PyCodec_Re@2:

; 587  :     if (!PyCallable_Check(error)) {

  00038	48 8b 4c 24 48	 mov	 rcx, QWORD PTR error$[rsp]
  0003d	e8 00 00 00 00	 call	 PyCallable_Check
  00042	85 c0		 test	 eax, eax
  00044	75 1a		 jne	 SHORT $LN1@PyCodec_Re@2

; 588  :         PyErr_SetString(PyExc_TypeError, "handler must be callable");

  00046	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@ICFBCEJM@handler?5must?5be?5callable?$AA@
  0004d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00054	e8 00 00 00 00	 call	 PyErr_SetString

; 589  :         return -1;

  00059	b8 ff ff ff ff	 mov	 eax, -1
  0005e	eb 18		 jmp	 SHORT $LN3@PyCodec_Re@2
$LN1@PyCodec_Re@2:

; 590  :     }
; 591  :     return PyDict_SetItemString(interp->codec_error_registry,
; 592  :                                 (char *)name, error);

  00060	4c 8b 44 24 48	 mov	 r8, QWORD PTR error$[rsp]
  00065	48 8b 54 24 40	 mov	 rdx, QWORD PTR name$[rsp]
  0006a	48 8b 44 24 20	 mov	 rax, QWORD PTR interp$[rsp]
  0006f	48 8b 48 48	 mov	 rcx, QWORD PTR [rax+72]
  00073	e8 00 00 00 00	 call	 PyDict_SetItemString
$LN3@PyCodec_Re@2:

; 593  : }

  00078	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0007c	c3		 ret	 0
PyCodec_RegisterError ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CE@JPNGEIEM@unknown?5error?5handler?5name?5?8?$CF?440@ ; `string'
PUBLIC	PyCodec_LookupError
EXTRN	PyDict_GetItemString:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyCodec_LookupError DD imagerel $LN7
	DD	imagerel $LN7+155
	DD	imagerel $unwind$PyCodec_LookupError
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyCodec_LookupError DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0CE@JPNGEIEM@unknown?5error?5handler?5name?5?8?$CF?440@
CONST	SEGMENT
??_C@_0CE@JPNGEIEM@unknown?5error?5handler?5name?5?8?$CF?440@ DB 'unknown'
	DB	' error handler name ''%.400s''', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyCodec_LookupError
_TEXT	SEGMENT
handler$ = 32
interp$ = 40
name$ = 64
PyCodec_LookupError PROC				; COMDAT

; 599  : {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 600  :     PyObject *handler = NULL;

  00009	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR handler$[rsp], 0

; 601  : 
; 602  :     PyInterpreterState *interp = PyThreadState_GET()->interp;

  00012	e8 00 00 00 00	 call	 PyThreadState_Get
  00017	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0001b	48 89 44 24 28	 mov	 QWORD PTR interp$[rsp], rax

; 603  :     if (interp->codec_search_path == NULL && _PyCodecRegistry_Init())

  00020	48 8b 44 24 28	 mov	 rax, QWORD PTR interp$[rsp]
  00025	48 83 78 38 00	 cmp	 QWORD PTR [rax+56], 0
  0002a	75 0d		 jne	 SHORT $LN4@PyCodec_Lo@3
  0002c	e8 00 00 00 00	 call	 _PyCodecRegistry_Init
  00031	85 c0		 test	 eax, eax
  00033	74 04		 je	 SHORT $LN4@PyCodec_Lo@3

; 604  :         return NULL;

  00035	33 c0		 xor	 eax, eax
  00037	eb 5d		 jmp	 SHORT $LN5@PyCodec_Lo@3
$LN4@PyCodec_Lo@3:

; 605  : 
; 606  :     if (name==NULL)

  00039	48 83 7c 24 40
	00		 cmp	 QWORD PTR name$[rsp], 0
  0003f	75 0c		 jne	 SHORT $LN3@PyCodec_Lo@3

; 607  :         name = "strict";

  00041	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_06OLFOGHEN@strict?$AA@
  00048	48 89 44 24 40	 mov	 QWORD PTR name$[rsp], rax
$LN3@PyCodec_Lo@3:

; 608  :     handler = PyDict_GetItemString(interp->codec_error_registry, (char *)name);

  0004d	48 8b 54 24 40	 mov	 rdx, QWORD PTR name$[rsp]
  00052	48 8b 44 24 28	 mov	 rax, QWORD PTR interp$[rsp]
  00057	48 8b 48 48	 mov	 rcx, QWORD PTR [rax+72]
  0005b	e8 00 00 00 00	 call	 PyDict_GetItemString
  00060	48 89 44 24 20	 mov	 QWORD PTR handler$[rsp], rax

; 609  :     if (!handler)

  00065	48 83 7c 24 20
	00		 cmp	 QWORD PTR handler$[rsp], 0
  0006b	75 1a		 jne	 SHORT $LN2@PyCodec_Lo@3

; 610  :         PyErr_Format(PyExc_LookupError, "unknown error handler name '%.400s'", name);

  0006d	4c 8b 44 24 40	 mov	 r8, QWORD PTR name$[rsp]
  00072	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@JPNGEIEM@unknown?5error?5handler?5name?5?8?$CF?440@
  00079	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_LookupError
  00080	e8 00 00 00 00	 call	 PyErr_Format

; 611  :     else

  00085	eb 0a		 jmp	 SHORT $LN1@PyCodec_Lo@3
$LN2@PyCodec_Lo@3:

; 612  :         Py_INCREF(handler);

  00087	48 8b 4c 24 20	 mov	 rcx, QWORD PTR handler$[rsp]
  0008c	e8 00 00 00 00	 call	 _Py_IncRef
$LN1@PyCodec_Lo@3:

; 613  :     return handler;

  00091	48 8b 44 24 20	 mov	 rax, QWORD PTR handler$[rsp]
$LN5@PyCodec_Lo@3:

; 614  : }

  00096	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0009a	c3		 ret	 0
PyCodec_LookupError ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CD@PECDDKM@codec?5must?5pass?5exception?5instan@ ; `string'
PUBLIC	PyCodec_StrictErrors
EXTRN	PyErr_SetObject:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyCodec_StrictErrors DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$PyCodec_StrictErrors
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyCodec_StrictErrors DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT ??_C@_0CD@PECDDKM@codec?5must?5pass?5exception?5instan@
CONST	SEGMENT
??_C@_0CD@PECDDKM@codec?5must?5pass?5exception?5instan@ DB 'codec must pa'
	DB	'ss exception instance', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyCodec_StrictErrors
_TEXT	SEGMENT
exc$ = 48
PyCodec_StrictErrors PROC				; COMDAT

; 633  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 634  :     if (PyExceptionInstance_Check(exc))

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR exc$[rsp]
  0000e	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00012	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00018	25 00 00 00 40	 and	 eax, 1073741824		; 40000000H
  0001d	85 c0		 test	 eax, eax
  0001f	74 15		 je	 SHORT $LN2@PyCodec_St

; 635  :         PyErr_SetObject(PyExceptionInstance_Class(exc), exc);

  00021	48 8b 54 24 30	 mov	 rdx, QWORD PTR exc$[rsp]
  00026	48 8b 44 24 30	 mov	 rax, QWORD PTR exc$[rsp]
  0002b	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  0002f	e8 00 00 00 00	 call	 PyErr_SetObject

; 636  :     else

  00034	eb 13		 jmp	 SHORT $LN1@PyCodec_St
$LN2@PyCodec_St:

; 637  :         PyErr_SetString(PyExc_TypeError, "codec must pass exception instance");

  00036	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@PECDDKM@codec?5must?5pass?5exception?5instan@
  0003d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00044	e8 00 00 00 00	 call	 PyErr_SetString
$LN1@PyCodec_St:

; 638  :     return NULL;

  00049	33 c0		 xor	 eax, eax

; 639  : }

  0004b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004f	c3		 ret	 0
PyCodec_StrictErrors ENDP
_TEXT	ENDS
PUBLIC	??_C@_04LFKIDKOI@?$CINn?$CJ?$AA@		; `string'
PUBLIC	PyCodec_IgnoreErrors
EXTRN	Py_BuildValue:PROC
EXTRN	PyUnicode_New:PROC
EXTRN	PyUnicodeTranslateError_GetEnd:PROC
EXTRN	PyExc_UnicodeTranslateError:QWORD
EXTRN	PyUnicodeDecodeError_GetEnd:PROC
EXTRN	PyExc_UnicodeDecodeError:QWORD
EXTRN	PyUnicodeEncodeError_GetEnd:PROC
EXTRN	PyObject_IsInstance:PROC
EXTRN	PyExc_UnicodeEncodeError:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyCodec_IgnoreErrors DD imagerel $LN12
	DD	imagerel $LN12+198
	DD	imagerel $unwind$PyCodec_IgnoreErrors
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyCodec_IgnoreErrors DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_04LFKIDKOI@?$CINn?$CJ?$AA@
CONST	SEGMENT
??_C@_04LFKIDKOI@?$CINn?$CJ?$AA@ DB '(Nn)', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyCodec_IgnoreErrors
_TEXT	SEGMENT
end$ = 32
exc$ = 64
PyCodec_IgnoreErrors PROC				; COMDAT

; 643  : {

$LN12:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 644  :     Py_ssize_t end;
; 645  :     if (PyObject_IsInstance(exc, PyExc_UnicodeEncodeError)) {

  00009	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR PyExc_UnicodeEncodeError
  00010	48 8b 4c 24 40	 mov	 rcx, QWORD PTR exc$[rsp]
  00015	e8 00 00 00 00	 call	 PyObject_IsInstance
  0001a	85 c0		 test	 eax, eax
  0001c	74 1c		 je	 SHORT $LN9@PyCodec_Ig

; 646  :         if (PyUnicodeEncodeError_GetEnd(exc, &end))

  0001e	48 8d 54 24 20	 lea	 rdx, QWORD PTR end$[rsp]
  00023	48 8b 4c 24 40	 mov	 rcx, QWORD PTR exc$[rsp]
  00028	e8 00 00 00 00	 call	 PyUnicodeEncodeError_GetEnd
  0002d	85 c0		 test	 eax, eax
  0002f	74 07		 je	 SHORT $LN8@PyCodec_Ig

; 647  :             return NULL;

  00031	33 c0		 xor	 eax, eax
  00033	e9 89 00 00 00	 jmp	 $LN10@PyCodec_Ig
$LN8@PyCodec_Ig:

; 648  :     }
; 649  :     else if (PyObject_IsInstance(exc, PyExc_UnicodeDecodeError)) {

  00038	eb 6a		 jmp	 SHORT $LN7@PyCodec_Ig
$LN9@PyCodec_Ig:
  0003a	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR PyExc_UnicodeDecodeError
  00041	48 8b 4c 24 40	 mov	 rcx, QWORD PTR exc$[rsp]
  00046	e8 00 00 00 00	 call	 PyObject_IsInstance
  0004b	85 c0		 test	 eax, eax
  0004d	74 19		 je	 SHORT $LN6@PyCodec_Ig

; 650  :         if (PyUnicodeDecodeError_GetEnd(exc, &end))

  0004f	48 8d 54 24 20	 lea	 rdx, QWORD PTR end$[rsp]
  00054	48 8b 4c 24 40	 mov	 rcx, QWORD PTR exc$[rsp]
  00059	e8 00 00 00 00	 call	 PyUnicodeDecodeError_GetEnd
  0005e	85 c0		 test	 eax, eax
  00060	74 04		 je	 SHORT $LN5@PyCodec_Ig

; 651  :             return NULL;

  00062	33 c0		 xor	 eax, eax
  00064	eb 5b		 jmp	 SHORT $LN10@PyCodec_Ig
$LN5@PyCodec_Ig:

; 652  :     }
; 653  :     else if (PyObject_IsInstance(exc, PyExc_UnicodeTranslateError)) {

  00066	eb 3c		 jmp	 SHORT $LN4@PyCodec_Ig
$LN6@PyCodec_Ig:
  00068	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR PyExc_UnicodeTranslateError
  0006f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR exc$[rsp]
  00074	e8 00 00 00 00	 call	 PyObject_IsInstance
  00079	85 c0		 test	 eax, eax
  0007b	74 19		 je	 SHORT $LN3@PyCodec_Ig

; 654  :         if (PyUnicodeTranslateError_GetEnd(exc, &end))

  0007d	48 8d 54 24 20	 lea	 rdx, QWORD PTR end$[rsp]
  00082	48 8b 4c 24 40	 mov	 rcx, QWORD PTR exc$[rsp]
  00087	e8 00 00 00 00	 call	 PyUnicodeTranslateError_GetEnd
  0008c	85 c0		 test	 eax, eax
  0008e	74 04		 je	 SHORT $LN2@PyCodec_Ig

; 655  :             return NULL;

  00090	33 c0		 xor	 eax, eax
  00092	eb 2d		 jmp	 SHORT $LN10@PyCodec_Ig
$LN2@PyCodec_Ig:

; 656  :     }
; 657  :     else {

  00094	eb 0e		 jmp	 SHORT $LN1@PyCodec_Ig
$LN3@PyCodec_Ig:

; 658  :         wrong_exception_type(exc);

  00096	48 8b 4c 24 40	 mov	 rcx, QWORD PTR exc$[rsp]
  0009b	e8 00 00 00 00	 call	 wrong_exception_type

; 659  :         return NULL;

  000a0	33 c0		 xor	 eax, eax
  000a2	eb 1d		 jmp	 SHORT $LN10@PyCodec_Ig
$LN1@PyCodec_Ig:
$LN4@PyCodec_Ig:
$LN7@PyCodec_Ig:

; 660  :     }
; 661  :     return Py_BuildValue("(Nn)", PyUnicode_New(0, 0), end);

  000a4	33 d2		 xor	 edx, edx
  000a6	33 c9		 xor	 ecx, ecx
  000a8	e8 00 00 00 00	 call	 PyUnicode_New
  000ad	4c 8b 44 24 20	 mov	 r8, QWORD PTR end$[rsp]
  000b2	48 8b d0	 mov	 rdx, rax
  000b5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04LFKIDKOI@?$CINn?$CJ?$AA@
  000bc	e8 00 00 00 00	 call	 Py_BuildValue
$LN10@PyCodec_Ig:

; 662  : }

  000c1	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000c5	c3		 ret	 0
PyCodec_IgnoreErrors ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CO@DJKMKMDO@don?8t?5know?5how?5to?5handle?5?$CFS?5in?5e@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$wrong_exception_type DD imagerel wrong_exception_type
	DD	imagerel wrong_exception_type+162
	DD	imagerel $unwind$wrong_exception_type
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$wrong_exception_type DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0CO@DJKMKMDO@don?8t?5know?5how?5to?5handle?5?$CFS?5in?5e@
CONST	SEGMENT
??_C@_0CO@DJKMKMDO@don?8t?5know?5how?5to?5handle?5?$CFS?5in?5e@ DB 'don'''
	DB	't know how to handle %S in error callback', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT wrong_exception_type
_TEXT	SEGMENT
type$ = 32
name$20758 = 40
exc$ = 64
wrong_exception_type PROC				; COMDAT

; 617  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 618  :     _Py_IDENTIFIER(__class__);
; 619  :     _Py_IDENTIFIER(__name__);
; 620  :     PyObject *type = _PyObject_GetAttrId(exc, &PyId___class__);

  00009	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId___class__@?1??wrong_exception_type@@9@9
  0000e	8b c0		 mov	 eax, eax
  00010	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00016	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0001f	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00023	48 8b d0	 mov	 rdx, rax
  00026	48 8b 4c 24 40	 mov	 rcx, QWORD PTR exc$[rsp]
  0002b	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00030	48 89 44 24 20	 mov	 QWORD PTR type$[rsp], rax

; 621  :     if (type != NULL) {

  00035	48 83 7c 24 20
	00		 cmp	 QWORD PTR type$[rsp], 0
  0003b	74 60		 je	 SHORT $LN2@wrong_exce

; 622  :         PyObject *name = _PyObject_GetAttrId(type, &PyId___name__);

  0003d	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId___name__@?1??wrong_exception_type@@9@9
  00042	8b c0		 mov	 eax, eax
  00044	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0004a	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00053	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00057	48 8b d0	 mov	 rdx, rax
  0005a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR type$[rsp]
  0005f	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00064	48 89 44 24 28	 mov	 QWORD PTR name$20758[rsp], rax

; 623  :         Py_DECREF(type);

  00069	48 8b 4c 24 20	 mov	 rcx, QWORD PTR type$[rsp]
  0006e	e8 00 00 00 00	 call	 _Py_DecRef

; 624  :         if (name != NULL) {

  00073	48 83 7c 24 28
	00		 cmp	 QWORD PTR name$20758[rsp], 0
  00079	74 22		 je	 SHORT $LN1@wrong_exce

; 625  :             PyErr_Format(PyExc_TypeError,
; 626  :                          "don't know how to handle %S in error callback", name);

  0007b	4c 8b 44 24 28	 mov	 r8, QWORD PTR name$20758[rsp]
  00080	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CO@DJKMKMDO@don?8t?5know?5how?5to?5handle?5?$CFS?5in?5e@
  00087	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0008e	e8 00 00 00 00	 call	 PyErr_Format

; 627  :             Py_DECREF(name);

  00093	48 8b 4c 24 28	 mov	 rcx, QWORD PTR name$20758[rsp]
  00098	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@wrong_exce:
$LN2@wrong_exce:

; 628  :         }
; 629  :     }
; 630  : }

  0009d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a1	c3		 ret	 0
wrong_exception_type ENDP
_TEXT	ENDS
PUBLIC	??_C@_04EHMCOCDF@?$CICn?$CJ?$AA@		; `string'
PUBLIC	??_C@_1EI@PCBNHGIB@?$AA_?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AAC?$AAo?$AAn?$AAs?$AAi?$AAs?$AAt?$AAe?$AAn?$AAc?$AAy?$AA?$CI?$AAr?$AAe?$AAs?$AA?0@ ; `string'
PUBLIC	??_C@_1DO@LPDHELHB@?$AA?$CI?$AAk?$AAi?$AAn?$AAd?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AA4?$AAB?$AAY?$AAT?$AAE?$AA_?$AAK?$AAI?$AAN?$AAD?$AA?$AA@ ; `string'
PUBLIC	??_C@_1EI@ILJBECKM@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AAr?$AAe?$AAs?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt?$AAa?$AA?4@ ; `string'
PUBLIC	??_C@_1DA@BOCADMCE@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAr?$AAe?$AAs?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CK@FJJJNMAO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAr?$AAe?$AAs?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@ ; `string'
PUBLIC	PyCodec_ReplaceErrors
EXTRN	PyUnicodeTranslateError_GetStart:PROC
EXTRN	_PyUnicode_CheckConsistency:PROC
EXTRN	__imp__wassert:PROC
EXTRN	PyUnicodeEncodeError_GetStart:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyCodec_ReplaceErrors DD imagerel $LN62
	DD	imagerel $LN62+1782
	DD	imagerel $unwind$PyCodec_ReplaceErrors
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyCodec_ReplaceErrors DD 020c01H
	DD	015010cH
xdata	ENDS
;	COMDAT ??_C@_04EHMCOCDF@?$CICn?$CJ?$AA@
CONST	SEGMENT
??_C@_04EHMCOCDF@?$CICn?$CJ?$AA@ DB '(Cn)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1EI@PCBNHGIB@?$AA_?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AAC?$AAo?$AAn?$AAs?$AAi?$AAs?$AAt?$AAe?$AAn?$AAc?$AAy?$AA?$CI?$AAr?$AAe?$AAs?$AA?0@
CONST	SEGMENT
??_C@_1EI@PCBNHGIB@?$AA_?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AAC?$AAo?$AAn?$AAs?$AAi?$AAs?$AAt?$AAe?$AAn?$AAc?$AAy?$AA?$CI?$AAr?$AAe?$AAs?$AA?0@ DB '_'
	DB	00H, 'P', 00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H
	DB	'o', 00H, 'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e'
	DB	00H, 'c', 00H, 'k', 00H, 'C', 00H, 'o', 00H, 'n', 00H, 's', 00H
	DB	'i', 00H, 's', 00H, 't', 00H, 'e', 00H, 'n', 00H, 'c', 00H, 'y'
	DB	00H, '(', 00H, 'r', 00H, 'e', 00H, 's', 00H, ',', 00H, ' ', 00H
	DB	'1', 00H, ')', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1DO@LPDHELHB@?$AA?$CI?$AAk?$AAi?$AAn?$AAd?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AA4?$AAB?$AAY?$AAT?$AAE?$AA_?$AAK?$AAI?$AAN?$AAD?$AA?$AA@
CONST	SEGMENT
??_C@_1DO@LPDHELHB@?$AA?$CI?$AAk?$AAi?$AAn?$AAd?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AA4?$AAB?$AAY?$AAT?$AAE?$AA_?$AAK?$AAI?$AAN?$AAD?$AA?$AA@ DB '('
	DB	00H, 'k', 00H, 'i', 00H, 'n', 00H, 'd', 00H, ')', 00H, ' ', 00H
	DB	'=', 00H, '=', 00H, ' ', 00H, 'P', 00H, 'y', 00H, 'U', 00H, 'n'
	DB	00H, 'i', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, '_', 00H
	DB	'4', 00H, 'B', 00H, 'Y', 00H, 'T', 00H, 'E', 00H, '_', 00H, 'K'
	DB	00H, 'I', 00H, 'N', 00H, 'D', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1EI@ILJBECKM@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AAr?$AAe?$AAs?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt?$AAa?$AA?4@
CONST	SEGMENT
??_C@_1EI@ILJBECKM@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AAr?$AAe?$AAs?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt?$AAa?$AA?4@ DB '('
	DB	00H, '(', 00H, 'P', 00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H
	DB	'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'O', 00H, 'b', 00H, 'j'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, '*', 00H, ')', 00H, '(', 00H
	DB	'r', 00H, 'e', 00H, 's', 00H, ')', 00H, ')', 00H, '-', 00H, '>'
	DB	00H, 'd', 00H, 'a', 00H, 't', 00H, 'a', 00H, '.', 00H, 'a', 00H
	DB	'n', 00H, 'y', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1DA@BOCADMCE@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAr?$AAe?$AAs?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DA@BOCADMCE@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAr?$AAe?$AAs?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'I', 00H, 'S', 00H, '_', 00H, 'R'
	DB	00H, 'E', 00H, 'A', 00H, 'D', 00H, 'Y', 00H, '(', 00H, 'r', 00H
	DB	'e', 00H, 's', 00H, ')', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@FJJJNMAO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAr?$AAe?$AAs?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CK@FJJJNMAO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAr?$AAe?$AAs?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, 'r', 00H, 'e', 00H, 's', 00H, ')', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
CONST	SEGMENT
??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@ DB '.'
	DB	00H, '.', 00H, '\', 00H, 'P', 00H, 'y', 00H, 't', 00H, 'h', 00H
	DB	'o', 00H, 'n', 00H, '\', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e'
	DB	00H, 'c', 00H, 's', 00H, '.', 00H, 'c', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyCodec_ReplaceErrors
_TEXT	SEGMENT
i$ = 32
len$ = 40
end$ = 48
start$ = 56
kind$20799 = 64
res$20798 = 72
data$20800 = 80
kind$20865 = 88
res$20864 = 96
data$20866 = 104
tv165 = 112
tv174 = 120
tv177 = 128
tv284 = 136
tv293 = 144
tv296 = 152
exc$ = 176
PyCodec_ReplaceErrors PROC				; COMDAT

; 666  : {

$LN62:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 667  :     Py_ssize_t start, end, i, len;
; 668  : 
; 669  :     if (PyObject_IsInstance(exc, PyExc_UnicodeEncodeError)) {

  0000c	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR PyExc_UnicodeEncodeError
  00013	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR exc$[rsp]
  0001b	e8 00 00 00 00	 call	 PyObject_IsInstance
  00020	85 c0		 test	 eax, eax
  00022	0f 84 1d 03 00
	00		 je	 $LN35@PyCodec_Re@3

; 670  :         PyObject *res;
; 671  :         int kind;
; 672  :         void *data;
; 673  :         if (PyUnicodeEncodeError_GetStart(exc, &start))

  00028	48 8d 54 24 38	 lea	 rdx, QWORD PTR start$[rsp]
  0002d	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR exc$[rsp]
  00035	e8 00 00 00 00	 call	 PyUnicodeEncodeError_GetStart
  0003a	85 c0		 test	 eax, eax
  0003c	74 07		 je	 SHORT $LN34@PyCodec_Re@3

; 674  :             return NULL;

  0003e	33 c0		 xor	 eax, eax
  00040	e9 a9 06 00 00	 jmp	 $LN36@PyCodec_Re@3
$LN34@PyCodec_Re@3:

; 675  :         if (PyUnicodeEncodeError_GetEnd(exc, &end))

  00045	48 8d 54 24 30	 lea	 rdx, QWORD PTR end$[rsp]
  0004a	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR exc$[rsp]
  00052	e8 00 00 00 00	 call	 PyUnicodeEncodeError_GetEnd
  00057	85 c0		 test	 eax, eax
  00059	74 07		 je	 SHORT $LN33@PyCodec_Re@3

; 676  :             return NULL;

  0005b	33 c0		 xor	 eax, eax
  0005d	e9 8c 06 00 00	 jmp	 $LN36@PyCodec_Re@3
$LN33@PyCodec_Re@3:

; 677  :         len = end - start;

  00062	48 8b 44 24 38	 mov	 rax, QWORD PTR start$[rsp]
  00067	48 8b 4c 24 30	 mov	 rcx, QWORD PTR end$[rsp]
  0006c	48 2b c8	 sub	 rcx, rax
  0006f	48 8b c1	 mov	 rax, rcx
  00072	48 89 44 24 28	 mov	 QWORD PTR len$[rsp], rax

; 678  :         res = PyUnicode_New(len, '?');

  00077	ba 3f 00 00 00	 mov	 edx, 63			; 0000003fH
  0007c	48 8b 4c 24 28	 mov	 rcx, QWORD PTR len$[rsp]
  00081	e8 00 00 00 00	 call	 PyUnicode_New
  00086	48 89 44 24 48	 mov	 QWORD PTR res$20798[rsp], rax

; 679  :         if (res == NULL)

  0008b	48 83 7c 24 48
	00		 cmp	 QWORD PTR res$20798[rsp], 0
  00091	75 07		 jne	 SHORT $LN32@PyCodec_Re@3

; 680  :             return NULL;

  00093	33 c0		 xor	 eax, eax
  00095	e9 54 06 00 00	 jmp	 $LN36@PyCodec_Re@3
$LN32@PyCodec_Re@3:

; 681  :         kind = PyUnicode_KIND(res);

  0009a	48 8b 44 24 48	 mov	 rax, QWORD PTR res$20798[rsp]
  0009f	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000a3	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000a9	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  000ae	85 c0		 test	 eax, eax
  000b0	75 1c		 jne	 SHORT $LN38@PyCodec_Re@3
  000b2	41 b8 a9 02 00
	00		 mov	 r8d, 681		; 000002a9H
  000b8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  000bf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@FJJJNMAO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAr?$AAe?$AAs?$AA?$CJ?$AA?$AA@
  000c6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000cc	33 c0		 xor	 eax, eax
$LN38@PyCodec_Re@3:
  000ce	48 8b 44 24 48	 mov	 rax, QWORD PTR res$20798[rsp]
  000d3	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  000d6	c1 e8 07	 shr	 eax, 7
  000d9	83 e0 01	 and	 eax, 1
  000dc	85 c0		 test	 eax, eax
  000de	75 1c		 jne	 SHORT $LN39@PyCodec_Re@3
  000e0	41 b8 a9 02 00
	00		 mov	 r8d, 681		; 000002a9H
  000e6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  000ed	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@BOCADMCE@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAr?$AAe?$AAs?$AA?$CJ?$AA?$AA@
  000f4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000fa	33 c0		 xor	 eax, eax
$LN39@PyCodec_Re@3:
  000fc	48 8b 44 24 48	 mov	 rax, QWORD PTR res$20798[rsp]
  00101	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00104	c1 e8 02	 shr	 eax, 2
  00107	83 e0 07	 and	 eax, 7
  0010a	89 44 24 40	 mov	 DWORD PTR kind$20799[rsp], eax

; 682  :         data = PyUnicode_DATA(res);

  0010e	48 8b 44 24 48	 mov	 rax, QWORD PTR res$20798[rsp]
  00113	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00117	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0011d	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00122	85 c0		 test	 eax, eax
  00124	75 1c		 jne	 SHORT $LN40@PyCodec_Re@3
  00126	41 b8 aa 02 00
	00		 mov	 r8d, 682		; 000002aaH
  0012c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  00133	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@FJJJNMAO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAr?$AAe?$AAs?$AA?$CJ?$AA?$AA@
  0013a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00140	33 c0		 xor	 eax, eax
$LN40@PyCodec_Re@3:
  00142	48 8b 44 24 48	 mov	 rax, QWORD PTR res$20798[rsp]
  00147	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0014a	c1 e8 05	 shr	 eax, 5
  0014d	83 e0 01	 and	 eax, 1
  00150	85 c0		 test	 eax, eax
  00152	0f 84 a2 00 00
	00		 je	 $LN46@PyCodec_Re@3
  00158	48 8b 44 24 48	 mov	 rax, QWORD PTR res$20798[rsp]
  0015d	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00161	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00167	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0016c	85 c0		 test	 eax, eax
  0016e	75 1c		 jne	 SHORT $LN41@PyCodec_Re@3
  00170	41 b8 aa 02 00
	00		 mov	 r8d, 682		; 000002aaH
  00176	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  0017d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@FJJJNMAO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAr?$AAe?$AAs?$AA?$CJ?$AA?$AA@
  00184	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0018a	33 c0		 xor	 eax, eax
$LN41@PyCodec_Re@3:
  0018c	48 8b 44 24 48	 mov	 rax, QWORD PTR res$20798[rsp]
  00191	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00194	c1 e8 07	 shr	 eax, 7
  00197	83 e0 01	 and	 eax, 1
  0019a	85 c0		 test	 eax, eax
  0019c	75 1c		 jne	 SHORT $LN42@PyCodec_Re@3
  0019e	41 b8 aa 02 00
	00		 mov	 r8d, 682		; 000002aaH
  001a4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  001ab	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@BOCADMCE@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAr?$AAe?$AAs?$AA?$CJ?$AA?$AA@
  001b2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001b8	33 c0		 xor	 eax, eax
$LN42@PyCodec_Re@3:
  001ba	48 8b 44 24 48	 mov	 rax, QWORD PTR res$20798[rsp]
  001bf	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  001c2	c1 e8 06	 shr	 eax, 6
  001c5	83 e0 01	 and	 eax, 1
  001c8	85 c0		 test	 eax, eax
  001ca	74 12		 je	 SHORT $LN43@PyCodec_Re@3
  001cc	48 8b 44 24 48	 mov	 rax, QWORD PTR res$20798[rsp]
  001d1	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  001d7	48 89 44 24 70	 mov	 QWORD PTR tv165[rsp], rax
  001dc	eb 10		 jmp	 SHORT $LN44@PyCodec_Re@3
$LN43@PyCodec_Re@3:
  001de	48 8b 44 24 48	 mov	 rax, QWORD PTR res$20798[rsp]
  001e3	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  001e9	48 89 44 24 70	 mov	 QWORD PTR tv165[rsp], rax
$LN44@PyCodec_Re@3:
  001ee	48 8b 44 24 70	 mov	 rax, QWORD PTR tv165[rsp]
  001f3	48 89 44 24 78	 mov	 QWORD PTR tv174[rsp], rax
  001f8	eb 3c		 jmp	 SHORT $LN47@PyCodec_Re@3
$LN46@PyCodec_Re@3:
  001fa	48 8b 44 24 48	 mov	 rax, QWORD PTR res$20798[rsp]
  001ff	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  00207	75 1c		 jne	 SHORT $LN45@PyCodec_Re@3
  00209	41 b8 aa 02 00
	00		 mov	 r8d, 682		; 000002aaH
  0020f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  00216	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EI@ILJBECKM@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AAr?$AAe?$AAs?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt?$AAa?$AA?4@
  0021d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00223	33 c0		 xor	 eax, eax
$LN45@PyCodec_Re@3:
  00225	48 8b 44 24 48	 mov	 rax, QWORD PTR res$20798[rsp]
  0022a	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  00231	48 89 44 24 78	 mov	 QWORD PTR tv174[rsp], rax
$LN47@PyCodec_Re@3:
  00236	48 8b 44 24 78	 mov	 rax, QWORD PTR tv174[rsp]
  0023b	48 89 44 24 50	 mov	 QWORD PTR data$20800[rsp], rax

; 683  :         for (i = 0; i < len; ++i)

  00240	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  00249	eb 0d		 jmp	 SHORT $LN31@PyCodec_Re@3
$LN30@PyCodec_Re@3:
  0024b	48 8b 44 24 20	 mov	 rax, QWORD PTR i$[rsp]
  00250	48 ff c0	 inc	 rax
  00253	48 89 44 24 20	 mov	 QWORD PTR i$[rsp], rax
$LN31@PyCodec_Re@3:
  00258	48 8b 44 24 28	 mov	 rax, QWORD PTR len$[rsp]
  0025d	48 39 44 24 20	 cmp	 QWORD PTR i$[rsp], rax
  00262	0f 8d 8e 00 00
	00		 jge	 $LN29@PyCodec_Re@3
$LN28@PyCodec_Re@3:

; 684  :             PyUnicode_WRITE(kind, data, i, '?');

  00268	8b 44 24 40	 mov	 eax, DWORD PTR kind$20799[rsp]
  0026c	89 84 24 80 00
	00 00		 mov	 DWORD PTR tv177[rsp], eax
  00273	83 bc 24 80 00
	00 00 01	 cmp	 DWORD PTR tv177[rsp], 1
  0027b	74 0c		 je	 SHORT $LN23@PyCodec_Re@3
  0027d	83 bc 24 80 00
	00 00 02	 cmp	 DWORD PTR tv177[rsp], 2
  00285	74 17		 je	 SHORT $LN22@PyCodec_Re@3
  00287	eb 2a		 jmp	 SHORT $LN21@PyCodec_Re@3
$LN23@PyCodec_Re@3:
  00289	48 8b 44 24 20	 mov	 rax, QWORD PTR i$[rsp]
  0028e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR data$20800[rsp]
  00293	48 03 c8	 add	 rcx, rax
  00296	48 8b c1	 mov	 rax, rcx
  00299	c6 00 3f	 mov	 BYTE PTR [rax], 63	; 0000003fH
  0029c	eb 49		 jmp	 SHORT $LN24@PyCodec_Re@3
$LN22@PyCodec_Re@3:
  0029e	b8 3f 00 00 00	 mov	 eax, 63			; 0000003fH
  002a3	48 8b 4c 24 50	 mov	 rcx, QWORD PTR data$20800[rsp]
  002a8	48 8b 54 24 20	 mov	 rdx, QWORD PTR i$[rsp]
  002ad	66 89 04 51	 mov	 WORD PTR [rcx+rdx*2], ax
  002b1	eb 34		 jmp	 SHORT $LN24@PyCodec_Re@3
$LN21@PyCodec_Re@3:
  002b3	83 7c 24 40 04	 cmp	 DWORD PTR kind$20799[rsp], 4
  002b8	74 1c		 je	 SHORT $LN48@PyCodec_Re@3
  002ba	41 b8 ac 02 00
	00		 mov	 r8d, 684		; 000002acH
  002c0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  002c7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@LPDHELHB@?$AA?$CI?$AAk?$AAi?$AAn?$AAd?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AA4?$AAB?$AAY?$AAT?$AAE?$AA_?$AAK?$AAI?$AAN?$AAD?$AA?$AA@
  002ce	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  002d4	33 c0		 xor	 eax, eax
$LN48@PyCodec_Re@3:
  002d6	48 8b 44 24 50	 mov	 rax, QWORD PTR data$20800[rsp]
  002db	48 8b 4c 24 20	 mov	 rcx, QWORD PTR i$[rsp]
  002e0	c7 04 88 3f 00
	00 00		 mov	 DWORD PTR [rax+rcx*4], 63 ; 0000003fH
$LN24@PyCodec_Re@3:
  002e7	33 c0		 xor	 eax, eax
  002e9	85 c0		 test	 eax, eax
  002eb	0f 85 77 ff ff
	ff		 jne	 $LN28@PyCodec_Re@3
  002f1	e9 55 ff ff ff	 jmp	 $LN30@PyCodec_Re@3
$LN29@PyCodec_Re@3:

; 685  :         assert(_PyUnicode_CheckConsistency(res, 1));

  002f6	ba 01 00 00 00	 mov	 edx, 1
  002fb	48 8b 4c 24 48	 mov	 rcx, QWORD PTR res$20798[rsp]
  00300	e8 00 00 00 00	 call	 _PyUnicode_CheckConsistency
  00305	85 c0		 test	 eax, eax
  00307	75 1c		 jne	 SHORT $LN49@PyCodec_Re@3
  00309	41 b8 ad 02 00
	00		 mov	 r8d, 685		; 000002adH
  0030f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  00316	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EI@PCBNHGIB@?$AA_?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AAC?$AAo?$AAn?$AAs?$AAi?$AAs?$AAt?$AAe?$AAn?$AAc?$AAy?$AA?$CI?$AAr?$AAe?$AAs?$AA?0@
  0031d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00323	33 c0		 xor	 eax, eax
$LN49@PyCodec_Re@3:

; 686  :         return Py_BuildValue("(Nn)", res, end);

  00325	4c 8b 44 24 30	 mov	 r8, QWORD PTR end$[rsp]
  0032a	48 8b 54 24 48	 mov	 rdx, QWORD PTR res$20798[rsp]
  0032f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04LFKIDKOI@?$CINn?$CJ?$AA@
  00336	e8 00 00 00 00	 call	 Py_BuildValue
  0033b	e9 ae 03 00 00	 jmp	 $LN36@PyCodec_Re@3
  00340	e9 a9 03 00 00	 jmp	 $LN20@PyCodec_Re@3
$LN35@PyCodec_Re@3:

; 687  :     }
; 688  :     else if (PyObject_IsInstance(exc, PyExc_UnicodeDecodeError)) {

  00345	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR PyExc_UnicodeDecodeError
  0034c	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR exc$[rsp]
  00354	e8 00 00 00 00	 call	 PyObject_IsInstance
  00359	85 c0		 test	 eax, eax
  0035b	74 3d		 je	 SHORT $LN19@PyCodec_Re@3

; 689  :         if (PyUnicodeDecodeError_GetEnd(exc, &end))

  0035d	48 8d 54 24 30	 lea	 rdx, QWORD PTR end$[rsp]
  00362	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR exc$[rsp]
  0036a	e8 00 00 00 00	 call	 PyUnicodeDecodeError_GetEnd
  0036f	85 c0		 test	 eax, eax
  00371	74 07		 je	 SHORT $LN18@PyCodec_Re@3

; 690  :             return NULL;

  00373	33 c0		 xor	 eax, eax
  00375	e9 74 03 00 00	 jmp	 $LN36@PyCodec_Re@3
$LN18@PyCodec_Re@3:

; 691  :         return Py_BuildValue("(Cn)",
; 692  :                              (int)Py_UNICODE_REPLACEMENT_CHARACTER,
; 693  :                              end);

  0037a	4c 8b 44 24 30	 mov	 r8, QWORD PTR end$[rsp]
  0037f	ba fd ff 00 00	 mov	 edx, 65533		; 0000fffdH
  00384	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04EHMCOCDF@?$CICn?$CJ?$AA@
  0038b	e8 00 00 00 00	 call	 Py_BuildValue
  00390	e9 59 03 00 00	 jmp	 $LN36@PyCodec_Re@3
  00395	e9 54 03 00 00	 jmp	 $LN17@PyCodec_Re@3
$LN19@PyCodec_Re@3:

; 694  :     }
; 695  :     else if (PyObject_IsInstance(exc, PyExc_UnicodeTranslateError)) {

  0039a	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR PyExc_UnicodeTranslateError
  003a1	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR exc$[rsp]
  003a9	e8 00 00 00 00	 call	 PyObject_IsInstance
  003ae	85 c0		 test	 eax, eax
  003b0	0f 84 29 03 00
	00		 je	 $LN16@PyCodec_Re@3

; 696  :         PyObject *res;
; 697  :         int kind;
; 698  :         void *data;
; 699  :         if (PyUnicodeTranslateError_GetStart(exc, &start))

  003b6	48 8d 54 24 38	 lea	 rdx, QWORD PTR start$[rsp]
  003bb	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR exc$[rsp]
  003c3	e8 00 00 00 00	 call	 PyUnicodeTranslateError_GetStart
  003c8	85 c0		 test	 eax, eax
  003ca	74 07		 je	 SHORT $LN15@PyCodec_Re@3

; 700  :             return NULL;

  003cc	33 c0		 xor	 eax, eax
  003ce	e9 1b 03 00 00	 jmp	 $LN36@PyCodec_Re@3
$LN15@PyCodec_Re@3:

; 701  :         if (PyUnicodeTranslateError_GetEnd(exc, &end))

  003d3	48 8d 54 24 30	 lea	 rdx, QWORD PTR end$[rsp]
  003d8	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR exc$[rsp]
  003e0	e8 00 00 00 00	 call	 PyUnicodeTranslateError_GetEnd
  003e5	85 c0		 test	 eax, eax
  003e7	74 07		 je	 SHORT $LN14@PyCodec_Re@3

; 702  :             return NULL;

  003e9	33 c0		 xor	 eax, eax
  003eb	e9 fe 02 00 00	 jmp	 $LN36@PyCodec_Re@3
$LN14@PyCodec_Re@3:

; 703  :         len = end - start;

  003f0	48 8b 44 24 38	 mov	 rax, QWORD PTR start$[rsp]
  003f5	48 8b 4c 24 30	 mov	 rcx, QWORD PTR end$[rsp]
  003fa	48 2b c8	 sub	 rcx, rax
  003fd	48 8b c1	 mov	 rax, rcx
  00400	48 89 44 24 28	 mov	 QWORD PTR len$[rsp], rax

; 704  :         res = PyUnicode_New(len, Py_UNICODE_REPLACEMENT_CHARACTER);

  00405	ba fd ff 00 00	 mov	 edx, 65533		; 0000fffdH
  0040a	48 8b 4c 24 28	 mov	 rcx, QWORD PTR len$[rsp]
  0040f	e8 00 00 00 00	 call	 PyUnicode_New
  00414	48 89 44 24 60	 mov	 QWORD PTR res$20864[rsp], rax

; 705  :         if (res == NULL)

  00419	48 83 7c 24 60
	00		 cmp	 QWORD PTR res$20864[rsp], 0
  0041f	75 07		 jne	 SHORT $LN13@PyCodec_Re@3

; 706  :             return NULL;

  00421	33 c0		 xor	 eax, eax
  00423	e9 c6 02 00 00	 jmp	 $LN36@PyCodec_Re@3
$LN13@PyCodec_Re@3:

; 707  :         kind = PyUnicode_KIND(res);

  00428	48 8b 44 24 60	 mov	 rax, QWORD PTR res$20864[rsp]
  0042d	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00431	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00437	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0043c	85 c0		 test	 eax, eax
  0043e	75 1c		 jne	 SHORT $LN50@PyCodec_Re@3
  00440	41 b8 c3 02 00
	00		 mov	 r8d, 707		; 000002c3H
  00446	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  0044d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@FJJJNMAO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAr?$AAe?$AAs?$AA?$CJ?$AA?$AA@
  00454	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0045a	33 c0		 xor	 eax, eax
$LN50@PyCodec_Re@3:
  0045c	48 8b 44 24 60	 mov	 rax, QWORD PTR res$20864[rsp]
  00461	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00464	c1 e8 07	 shr	 eax, 7
  00467	83 e0 01	 and	 eax, 1
  0046a	85 c0		 test	 eax, eax
  0046c	75 1c		 jne	 SHORT $LN51@PyCodec_Re@3
  0046e	41 b8 c3 02 00
	00		 mov	 r8d, 707		; 000002c3H
  00474	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  0047b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@BOCADMCE@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAr?$AAe?$AAs?$AA?$CJ?$AA?$AA@
  00482	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00488	33 c0		 xor	 eax, eax
$LN51@PyCodec_Re@3:
  0048a	48 8b 44 24 60	 mov	 rax, QWORD PTR res$20864[rsp]
  0048f	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00492	c1 e8 02	 shr	 eax, 2
  00495	83 e0 07	 and	 eax, 7
  00498	89 44 24 58	 mov	 DWORD PTR kind$20865[rsp], eax

; 708  :         data = PyUnicode_DATA(res);

  0049c	48 8b 44 24 60	 mov	 rax, QWORD PTR res$20864[rsp]
  004a1	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  004a5	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  004ab	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  004b0	85 c0		 test	 eax, eax
  004b2	75 1c		 jne	 SHORT $LN52@PyCodec_Re@3
  004b4	41 b8 c4 02 00
	00		 mov	 r8d, 708		; 000002c4H
  004ba	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  004c1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@FJJJNMAO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAr?$AAe?$AAs?$AA?$CJ?$AA?$AA@
  004c8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  004ce	33 c0		 xor	 eax, eax
$LN52@PyCodec_Re@3:
  004d0	48 8b 44 24 60	 mov	 rax, QWORD PTR res$20864[rsp]
  004d5	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  004d8	c1 e8 05	 shr	 eax, 5
  004db	83 e0 01	 and	 eax, 1
  004de	85 c0		 test	 eax, eax
  004e0	0f 84 ae 00 00
	00		 je	 $LN58@PyCodec_Re@3
  004e6	48 8b 44 24 60	 mov	 rax, QWORD PTR res$20864[rsp]
  004eb	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  004ef	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  004f5	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  004fa	85 c0		 test	 eax, eax
  004fc	75 1c		 jne	 SHORT $LN53@PyCodec_Re@3
  004fe	41 b8 c4 02 00
	00		 mov	 r8d, 708		; 000002c4H
  00504	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  0050b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@FJJJNMAO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAr?$AAe?$AAs?$AA?$CJ?$AA?$AA@
  00512	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00518	33 c0		 xor	 eax, eax
$LN53@PyCodec_Re@3:
  0051a	48 8b 44 24 60	 mov	 rax, QWORD PTR res$20864[rsp]
  0051f	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00522	c1 e8 07	 shr	 eax, 7
  00525	83 e0 01	 and	 eax, 1
  00528	85 c0		 test	 eax, eax
  0052a	75 1c		 jne	 SHORT $LN54@PyCodec_Re@3
  0052c	41 b8 c4 02 00
	00		 mov	 r8d, 708		; 000002c4H
  00532	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  00539	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@BOCADMCE@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAr?$AAe?$AAs?$AA?$CJ?$AA?$AA@
  00540	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00546	33 c0		 xor	 eax, eax
$LN54@PyCodec_Re@3:
  00548	48 8b 44 24 60	 mov	 rax, QWORD PTR res$20864[rsp]
  0054d	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00550	c1 e8 06	 shr	 eax, 6
  00553	83 e0 01	 and	 eax, 1
  00556	85 c0		 test	 eax, eax
  00558	74 15		 je	 SHORT $LN55@PyCodec_Re@3
  0055a	48 8b 44 24 60	 mov	 rax, QWORD PTR res$20864[rsp]
  0055f	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  00565	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv284[rsp], rax
  0056d	eb 13		 jmp	 SHORT $LN56@PyCodec_Re@3
$LN55@PyCodec_Re@3:
  0056f	48 8b 44 24 60	 mov	 rax, QWORD PTR res$20864[rsp]
  00574	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  0057a	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv284[rsp], rax
$LN56@PyCodec_Re@3:
  00582	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR tv284[rsp]
  0058a	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv293[rsp], rax
  00592	eb 3f		 jmp	 SHORT $LN59@PyCodec_Re@3
$LN58@PyCodec_Re@3:
  00594	48 8b 44 24 60	 mov	 rax, QWORD PTR res$20864[rsp]
  00599	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  005a1	75 1c		 jne	 SHORT $LN57@PyCodec_Re@3
  005a3	41 b8 c4 02 00
	00		 mov	 r8d, 708		; 000002c4H
  005a9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  005b0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EI@ILJBECKM@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AAr?$AAe?$AAs?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt?$AAa?$AA?4@
  005b7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  005bd	33 c0		 xor	 eax, eax
$LN57@PyCodec_Re@3:
  005bf	48 8b 44 24 60	 mov	 rax, QWORD PTR res$20864[rsp]
  005c4	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  005cb	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv293[rsp], rax
$LN59@PyCodec_Re@3:
  005d3	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR tv293[rsp]
  005db	48 89 44 24 68	 mov	 QWORD PTR data$20866[rsp], rax

; 709  :         for (i=0; i < len; i++)

  005e0	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  005e9	eb 0d		 jmp	 SHORT $LN12@PyCodec_Re@3
$LN11@PyCodec_Re@3:
  005eb	48 8b 44 24 20	 mov	 rax, QWORD PTR i$[rsp]
  005f0	48 ff c0	 inc	 rax
  005f3	48 89 44 24 20	 mov	 QWORD PTR i$[rsp], rax
$LN12@PyCodec_Re@3:
  005f8	48 8b 44 24 28	 mov	 rax, QWORD PTR len$[rsp]
  005fd	48 39 44 24 20	 cmp	 QWORD PTR i$[rsp], rax
  00602	0f 8d 8e 00 00
	00		 jge	 $LN10@PyCodec_Re@3
$LN9@PyCodec_Re@3:

; 710  :             PyUnicode_WRITE(kind, data, i, Py_UNICODE_REPLACEMENT_CHARACTER);

  00608	8b 44 24 58	 mov	 eax, DWORD PTR kind$20865[rsp]
  0060c	89 84 24 98 00
	00 00		 mov	 DWORD PTR tv296[rsp], eax
  00613	83 bc 24 98 00
	00 00 01	 cmp	 DWORD PTR tv296[rsp], 1
  0061b	74 0c		 je	 SHORT $LN4@PyCodec_Re@3
  0061d	83 bc 24 98 00
	00 00 02	 cmp	 DWORD PTR tv296[rsp], 2
  00625	74 17		 je	 SHORT $LN3@PyCodec_Re@3
  00627	eb 2a		 jmp	 SHORT $LN2@PyCodec_Re@3
$LN4@PyCodec_Re@3:
  00629	48 8b 44 24 20	 mov	 rax, QWORD PTR i$[rsp]
  0062e	48 8b 4c 24 68	 mov	 rcx, QWORD PTR data$20866[rsp]
  00633	48 03 c8	 add	 rcx, rax
  00636	48 8b c1	 mov	 rax, rcx
  00639	c6 00 fd	 mov	 BYTE PTR [rax], 253	; 000000fdH
  0063c	eb 49		 jmp	 SHORT $LN5@PyCodec_Re@3
$LN3@PyCodec_Re@3:
  0063e	b8 fd ff 00 00	 mov	 eax, 65533		; 0000fffdH
  00643	48 8b 4c 24 68	 mov	 rcx, QWORD PTR data$20866[rsp]
  00648	48 8b 54 24 20	 mov	 rdx, QWORD PTR i$[rsp]
  0064d	66 89 04 51	 mov	 WORD PTR [rcx+rdx*2], ax
  00651	eb 34		 jmp	 SHORT $LN5@PyCodec_Re@3
$LN2@PyCodec_Re@3:
  00653	83 7c 24 58 04	 cmp	 DWORD PTR kind$20865[rsp], 4
  00658	74 1c		 je	 SHORT $LN60@PyCodec_Re@3
  0065a	41 b8 c6 02 00
	00		 mov	 r8d, 710		; 000002c6H
  00660	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  00667	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@LPDHELHB@?$AA?$CI?$AAk?$AAi?$AAn?$AAd?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AA4?$AAB?$AAY?$AAT?$AAE?$AA_?$AAK?$AAI?$AAN?$AAD?$AA?$AA@
  0066e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00674	33 c0		 xor	 eax, eax
$LN60@PyCodec_Re@3:
  00676	48 8b 44 24 68	 mov	 rax, QWORD PTR data$20866[rsp]
  0067b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR i$[rsp]
  00680	c7 04 88 fd ff
	00 00		 mov	 DWORD PTR [rax+rcx*4], 65533 ; 0000fffdH
$LN5@PyCodec_Re@3:
  00687	33 c0		 xor	 eax, eax
  00689	85 c0		 test	 eax, eax
  0068b	0f 85 77 ff ff
	ff		 jne	 $LN9@PyCodec_Re@3
  00691	e9 55 ff ff ff	 jmp	 $LN11@PyCodec_Re@3
$LN10@PyCodec_Re@3:

; 711  :         assert(_PyUnicode_CheckConsistency(res, 1));

  00696	ba 01 00 00 00	 mov	 edx, 1
  0069b	48 8b 4c 24 60	 mov	 rcx, QWORD PTR res$20864[rsp]
  006a0	e8 00 00 00 00	 call	 _PyUnicode_CheckConsistency
  006a5	85 c0		 test	 eax, eax
  006a7	75 1c		 jne	 SHORT $LN61@PyCodec_Re@3
  006a9	41 b8 c7 02 00
	00		 mov	 r8d, 711		; 000002c7H
  006af	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  006b6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EI@PCBNHGIB@?$AA_?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AAC?$AAo?$AAn?$AAs?$AAi?$AAs?$AAt?$AAe?$AAn?$AAc?$AAy?$AA?$CI?$AAr?$AAe?$AAs?$AA?0@
  006bd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  006c3	33 c0		 xor	 eax, eax
$LN61@PyCodec_Re@3:

; 712  :         return Py_BuildValue("(Nn)", res, end);

  006c5	4c 8b 44 24 30	 mov	 r8, QWORD PTR end$[rsp]
  006ca	48 8b 54 24 60	 mov	 rdx, QWORD PTR res$20864[rsp]
  006cf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04LFKIDKOI@?$CINn?$CJ?$AA@
  006d6	e8 00 00 00 00	 call	 Py_BuildValue
  006db	eb 11		 jmp	 SHORT $LN36@PyCodec_Re@3

; 713  :     }
; 714  :     else {

  006dd	eb 0f		 jmp	 SHORT $LN1@PyCodec_Re@3
$LN16@PyCodec_Re@3:

; 715  :         wrong_exception_type(exc);

  006df	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR exc$[rsp]
  006e7	e8 00 00 00 00	 call	 wrong_exception_type

; 716  :         return NULL;

  006ec	33 c0		 xor	 eax, eax
$LN1@PyCodec_Re@3:
$LN17@PyCodec_Re@3:
$LN20@PyCodec_Re@3:
$LN36@PyCodec_Re@3:

; 717  :     }
; 718  : }

  006ee	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  006f5	c3		 ret	 0
PyCodec_ReplaceErrors ENDP
_TEXT	ENDS
PUBLIC	??_C@_1FC@FELCKDKN@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO@ ; `string'
PUBLIC	??_C@_1DK@PKLPIJEF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DE@NAODBNMM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DG@MCBMNNJM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DA@FJFAKGEG@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	PyCodec_XMLCharRefReplaceErrors
EXTRN	PyUnicodeEncodeError_GetObject:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyCodec_XMLCharRefReplaceErrors DD imagerel $LN118
	DD	imagerel $LN118+3944
	DD	imagerel $unwind$PyCodec_XMLCharRefReplaceErrors
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyCodec_XMLCharRefReplaceErrors DD 020c01H
	DD	021010cH
xdata	ENDS
;	COMDAT ??_C@_1FC@FELCKDKN@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO@
CONST	SEGMENT
??_C@_1FC@FELCKDKN@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO@ DB '('
	DB	00H, '(', 00H, 'P', 00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H
	DB	'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'O', 00H, 'b', 00H, 'j'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, '*', 00H, ')', 00H, '(', 00H
	DB	'(', 00H, 'o', 00H, 'b', 00H, 'j', 00H, 'e', 00H, 'c', 00H, 't'
	DB	00H, ')', 00H, ')', 00H, ')', 00H, '-', 00H, '>', 00H, 'd', 00H
	DB	'a', 00H, 't', 00H, 'a', 00H, '.', 00H, 'a', 00H, 'n', 00H, 'y'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1DK@PKLPIJEF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DK@PKLPIJEF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'I', 00H, 'S', 00H, '_', 00H, 'R'
	DB	00H, 'E', 00H, 'A', 00H, 'D', 00H, 'Y', 00H, '(', 00H, '(', 00H
	DB	'o', 00H, 'b', 00H, 'j', 00H, 'e', 00H, 'c', 00H, 't', 00H, ')'
	DB	00H, ')', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1DE@NAODBNMM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DE@NAODBNMM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, '(', 00H, 'o', 00H, 'b', 00H, 'j', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, ')', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DG@MCBMNNJM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DG@MCBMNNJM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'I', 00H, 'S', 00H, '_', 00H, 'R'
	DB	00H, 'E', 00H, 'A', 00H, 'D', 00H, 'Y', 00H, '(', 00H, 'o', 00H
	DB	'b', 00H, 'j', 00H, 'e', 00H, 'c', 00H, 't', 00H, ')', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1DA@FJFAKGEG@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DA@FJFAKGEG@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, 'o', 00H, 'b', 00H, 'j', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, ')', 00H, 00H, 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyCodec_XMLCharRefReplaceErrors
_TEXT	SEGMENT
ressize$20932 = 32
res$20930 = 40
outp$20931 = 48
i$20927 = 56
restuple$20925 = 64
end$20929 = 72
start$20928 = 80
object$20926 = 88
ch$20933 = 96
base$21047 = 100
digits$21046 = 104
tv182 = 112
tv191 = 120
tv306 = 128
tv247 = 136
tv256 = 144
tv305 = 152
tv293 = 160
tv302 = 168
tv359 = 176
tv368 = 184
tv440 = 192
tv449 = 200
tv564 = 208
tv505 = 216
tv514 = 224
tv563 = 232
tv551 = 240
tv560 = 248
exc$ = 272
PyCodec_XMLCharRefReplaceErrors PROC			; COMDAT

; 721  : {

$LN118:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H

; 722  :     if (PyObject_IsInstance(exc, PyExc_UnicodeEncodeError)) {

  0000c	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR PyExc_UnicodeEncodeError
  00013	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR exc$[rsp]
  0001b	e8 00 00 00 00	 call	 PyObject_IsInstance
  00020	85 c0		 test	 eax, eax
  00022	0f 84 29 0f 00
	00		 je	 $LN38@PyCodec_XM

; 723  :         PyObject *restuple;
; 724  :         PyObject *object;
; 725  :         Py_ssize_t i;
; 726  :         Py_ssize_t start;
; 727  :         Py_ssize_t end;
; 728  :         PyObject *res;
; 729  :         unsigned char *outp;
; 730  :         int ressize;
; 731  :         Py_UCS4 ch;
; 732  :         if (PyUnicodeEncodeError_GetStart(exc, &start))

  00028	48 8d 54 24 50	 lea	 rdx, QWORD PTR start$20928[rsp]
  0002d	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR exc$[rsp]
  00035	e8 00 00 00 00	 call	 PyUnicodeEncodeError_GetStart
  0003a	85 c0		 test	 eax, eax
  0003c	74 07		 je	 SHORT $LN37@PyCodec_XM

; 733  :             return NULL;

  0003e	33 c0		 xor	 eax, eax
  00040	e9 1b 0f 00 00	 jmp	 $LN39@PyCodec_XM
$LN37@PyCodec_XM:

; 734  :         if (PyUnicodeEncodeError_GetEnd(exc, &end))

  00045	48 8d 54 24 48	 lea	 rdx, QWORD PTR end$20929[rsp]
  0004a	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR exc$[rsp]
  00052	e8 00 00 00 00	 call	 PyUnicodeEncodeError_GetEnd
  00057	85 c0		 test	 eax, eax
  00059	74 07		 je	 SHORT $LN36@PyCodec_XM

; 735  :             return NULL;

  0005b	33 c0		 xor	 eax, eax
  0005d	e9 fe 0e 00 00	 jmp	 $LN39@PyCodec_XM
$LN36@PyCodec_XM:

; 736  :         if (!(object = PyUnicodeEncodeError_GetObject(exc)))

  00062	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR exc$[rsp]
  0006a	e8 00 00 00 00	 call	 PyUnicodeEncodeError_GetObject
  0006f	48 89 44 24 58	 mov	 QWORD PTR object$20926[rsp], rax
  00074	48 83 7c 24 58
	00		 cmp	 QWORD PTR object$20926[rsp], 0
  0007a	75 07		 jne	 SHORT $LN35@PyCodec_XM

; 737  :             return NULL;

  0007c	33 c0		 xor	 eax, eax
  0007e	e9 dd 0e 00 00	 jmp	 $LN39@PyCodec_XM
$LN35@PyCodec_XM:

; 738  :         for (i = start, ressize = 0; i < end; ++i) {

  00083	48 8b 44 24 50	 mov	 rax, QWORD PTR start$20928[rsp]
  00088	48 89 44 24 38	 mov	 QWORD PTR i$20927[rsp], rax
  0008d	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR ressize$20932[rsp], 0
  00095	eb 0d		 jmp	 SHORT $LN34@PyCodec_XM
$LN33@PyCodec_XM:
  00097	48 8b 44 24 38	 mov	 rax, QWORD PTR i$20927[rsp]
  0009c	48 ff c0	 inc	 rax
  0009f	48 89 44 24 38	 mov	 QWORD PTR i$20927[rsp], rax
$LN34@PyCodec_XM:
  000a4	48 8b 44 24 48	 mov	 rax, QWORD PTR end$20929[rsp]
  000a9	48 39 44 24 38	 cmp	 QWORD PTR i$20927[rsp], rax
  000ae	0f 8d ea 05 00
	00		 jge	 $LN32@PyCodec_XM

; 739  :             /* object is guaranteed to be "ready" */
; 740  :             ch = PyUnicode_READ_CHAR(object, i);

  000b4	48 8b 44 24 58	 mov	 rax, QWORD PTR object$20926[rsp]
  000b9	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000bd	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000c3	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  000c8	85 c0		 test	 eax, eax
  000ca	75 1c		 jne	 SHORT $LN41@PyCodec_XM
  000cc	41 b8 e4 02 00
	00		 mov	 r8d, 740		; 000002e4H
  000d2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  000d9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@FJFAKGEG@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$AA@
  000e0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000e6	33 c0		 xor	 eax, eax
$LN41@PyCodec_XM:
  000e8	48 8b 44 24 58	 mov	 rax, QWORD PTR object$20926[rsp]
  000ed	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  000f0	c1 e8 07	 shr	 eax, 7
  000f3	83 e0 01	 and	 eax, 1
  000f6	85 c0		 test	 eax, eax
  000f8	75 1c		 jne	 SHORT $LN42@PyCodec_XM
  000fa	41 b8 e4 02 00
	00		 mov	 r8d, 740		; 000002e4H
  00100	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  00107	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DG@MCBMNNJM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$AA@
  0010e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00114	33 c0		 xor	 eax, eax
$LN42@PyCodec_XM:
  00116	48 8b 44 24 58	 mov	 rax, QWORD PTR object$20926[rsp]
  0011b	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0011f	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00125	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0012a	85 c0		 test	 eax, eax
  0012c	75 1c		 jne	 SHORT $LN43@PyCodec_XM
  0012e	41 b8 e4 02 00
	00		 mov	 r8d, 740		; 000002e4H
  00134	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  0013b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@NAODBNMM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00142	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00148	33 c0		 xor	 eax, eax
$LN43@PyCodec_XM:
  0014a	48 8b 44 24 58	 mov	 rax, QWORD PTR object$20926[rsp]
  0014f	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00152	c1 e8 07	 shr	 eax, 7
  00155	83 e0 01	 and	 eax, 1
  00158	85 c0		 test	 eax, eax
  0015a	75 1c		 jne	 SHORT $LN44@PyCodec_XM
  0015c	41 b8 e4 02 00
	00		 mov	 r8d, 740		; 000002e4H
  00162	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  00169	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DK@PKLPIJEF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00170	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00176	33 c0		 xor	 eax, eax
$LN44@PyCodec_XM:
  00178	48 8b 44 24 58	 mov	 rax, QWORD PTR object$20926[rsp]
  0017d	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00180	c1 e8 02	 shr	 eax, 2
  00183	83 e0 07	 and	 eax, 7
  00186	83 f8 01	 cmp	 eax, 1
  00189	0f 85 47 01 00
	00		 jne	 $LN73@PyCodec_XM
  0018f	48 8b 44 24 58	 mov	 rax, QWORD PTR object$20926[rsp]
  00194	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00198	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0019e	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  001a3	85 c0		 test	 eax, eax
  001a5	75 1c		 jne	 SHORT $LN45@PyCodec_XM
  001a7	41 b8 e4 02 00
	00		 mov	 r8d, 740		; 000002e4H
  001ad	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  001b4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@NAODBNMM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  001bb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001c1	33 c0		 xor	 eax, eax
$LN45@PyCodec_XM:
  001c3	48 8b 44 24 58	 mov	 rax, QWORD PTR object$20926[rsp]
  001c8	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  001cb	c1 e8 05	 shr	 eax, 5
  001ce	83 e0 01	 and	 eax, 1
  001d1	85 c0		 test	 eax, eax
  001d3	0f 84 a2 00 00
	00		 je	 $LN51@PyCodec_XM
  001d9	48 8b 44 24 58	 mov	 rax, QWORD PTR object$20926[rsp]
  001de	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  001e2	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  001e8	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  001ed	85 c0		 test	 eax, eax
  001ef	75 1c		 jne	 SHORT $LN46@PyCodec_XM
  001f1	41 b8 e4 02 00
	00		 mov	 r8d, 740		; 000002e4H
  001f7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  001fe	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@NAODBNMM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00205	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0020b	33 c0		 xor	 eax, eax
$LN46@PyCodec_XM:
  0020d	48 8b 44 24 58	 mov	 rax, QWORD PTR object$20926[rsp]
  00212	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00215	c1 e8 07	 shr	 eax, 7
  00218	83 e0 01	 and	 eax, 1
  0021b	85 c0		 test	 eax, eax
  0021d	75 1c		 jne	 SHORT $LN47@PyCodec_XM
  0021f	41 b8 e4 02 00
	00		 mov	 r8d, 740		; 000002e4H
  00225	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  0022c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DK@PKLPIJEF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00233	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00239	33 c0		 xor	 eax, eax
$LN47@PyCodec_XM:
  0023b	48 8b 44 24 58	 mov	 rax, QWORD PTR object$20926[rsp]
  00240	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00243	c1 e8 06	 shr	 eax, 6
  00246	83 e0 01	 and	 eax, 1
  00249	85 c0		 test	 eax, eax
  0024b	74 12		 je	 SHORT $LN48@PyCodec_XM
  0024d	48 8b 44 24 58	 mov	 rax, QWORD PTR object$20926[rsp]
  00252	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  00258	48 89 44 24 70	 mov	 QWORD PTR tv182[rsp], rax
  0025d	eb 10		 jmp	 SHORT $LN49@PyCodec_XM
$LN48@PyCodec_XM:
  0025f	48 8b 44 24 58	 mov	 rax, QWORD PTR object$20926[rsp]
  00264	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  0026a	48 89 44 24 70	 mov	 QWORD PTR tv182[rsp], rax
$LN49@PyCodec_XM:
  0026f	48 8b 44 24 70	 mov	 rax, QWORD PTR tv182[rsp]
  00274	48 89 44 24 78	 mov	 QWORD PTR tv191[rsp], rax
  00279	eb 3c		 jmp	 SHORT $LN52@PyCodec_XM
$LN51@PyCodec_XM:
  0027b	48 8b 44 24 58	 mov	 rax, QWORD PTR object$20926[rsp]
  00280	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  00288	75 1c		 jne	 SHORT $LN50@PyCodec_XM
  0028a	41 b8 e4 02 00
	00		 mov	 r8d, 740		; 000002e4H
  00290	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  00297	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FC@FELCKDKN@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO@
  0029e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  002a4	33 c0		 xor	 eax, eax
$LN50@PyCodec_XM:
  002a6	48 8b 44 24 58	 mov	 rax, QWORD PTR object$20926[rsp]
  002ab	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  002b2	48 89 44 24 78	 mov	 QWORD PTR tv191[rsp], rax
$LN52@PyCodec_XM:
  002b7	48 8b 44 24 38	 mov	 rax, QWORD PTR i$20927[rsp]
  002bc	48 8b 4c 24 78	 mov	 rcx, QWORD PTR tv191[rsp]
  002c1	48 03 c8	 add	 rcx, rax
  002c4	48 8b c1	 mov	 rax, rcx
  002c7	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  002ca	89 84 24 80 00
	00 00		 mov	 DWORD PTR tv306[rsp], eax
  002d1	e9 29 03 00 00	 jmp	 $LN74@PyCodec_XM
$LN73@PyCodec_XM:
  002d6	48 8b 44 24 58	 mov	 rax, QWORD PTR object$20926[rsp]
  002db	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  002df	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  002e5	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  002ea	85 c0		 test	 eax, eax
  002ec	75 1c		 jne	 SHORT $LN53@PyCodec_XM
  002ee	41 b8 e4 02 00
	00		 mov	 r8d, 740		; 000002e4H
  002f4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  002fb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@NAODBNMM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00302	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00308	33 c0		 xor	 eax, eax
$LN53@PyCodec_XM:
  0030a	48 8b 44 24 58	 mov	 rax, QWORD PTR object$20926[rsp]
  0030f	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00312	c1 e8 07	 shr	 eax, 7
  00315	83 e0 01	 and	 eax, 1
  00318	85 c0		 test	 eax, eax
  0031a	75 1c		 jne	 SHORT $LN54@PyCodec_XM
  0031c	41 b8 e4 02 00
	00		 mov	 r8d, 740		; 000002e4H
  00322	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  00329	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DK@PKLPIJEF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00330	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00336	33 c0		 xor	 eax, eax
$LN54@PyCodec_XM:
  00338	48 8b 44 24 58	 mov	 rax, QWORD PTR object$20926[rsp]
  0033d	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00340	c1 e8 02	 shr	 eax, 2
  00343	83 e0 07	 and	 eax, 7
  00346	83 f8 02	 cmp	 eax, 2
  00349	0f 85 54 01 00
	00		 jne	 $LN71@PyCodec_XM
  0034f	48 8b 44 24 58	 mov	 rax, QWORD PTR object$20926[rsp]
  00354	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00358	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0035e	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00363	85 c0		 test	 eax, eax
  00365	75 1c		 jne	 SHORT $LN55@PyCodec_XM
  00367	41 b8 e4 02 00
	00		 mov	 r8d, 740		; 000002e4H
  0036d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  00374	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@NAODBNMM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  0037b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00381	33 c0		 xor	 eax, eax
$LN55@PyCodec_XM:
  00383	48 8b 44 24 58	 mov	 rax, QWORD PTR object$20926[rsp]
  00388	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0038b	c1 e8 05	 shr	 eax, 5
  0038e	83 e0 01	 and	 eax, 1
  00391	85 c0		 test	 eax, eax
  00393	0f 84 ae 00 00
	00		 je	 $LN61@PyCodec_XM
  00399	48 8b 44 24 58	 mov	 rax, QWORD PTR object$20926[rsp]
  0039e	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  003a2	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  003a8	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  003ad	85 c0		 test	 eax, eax
  003af	75 1c		 jne	 SHORT $LN56@PyCodec_XM
  003b1	41 b8 e4 02 00
	00		 mov	 r8d, 740		; 000002e4H
  003b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  003be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@NAODBNMM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  003c5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  003cb	33 c0		 xor	 eax, eax
$LN56@PyCodec_XM:
  003cd	48 8b 44 24 58	 mov	 rax, QWORD PTR object$20926[rsp]
  003d2	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  003d5	c1 e8 07	 shr	 eax, 7
  003d8	83 e0 01	 and	 eax, 1
  003db	85 c0		 test	 eax, eax
  003dd	75 1c		 jne	 SHORT $LN57@PyCodec_XM
  003df	41 b8 e4 02 00
	00		 mov	 r8d, 740		; 000002e4H
  003e5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  003ec	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DK@PKLPIJEF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  003f3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  003f9	33 c0		 xor	 eax, eax
$LN57@PyCodec_XM:
  003fb	48 8b 44 24 58	 mov	 rax, QWORD PTR object$20926[rsp]
  00400	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00403	c1 e8 06	 shr	 eax, 6
  00406	83 e0 01	 and	 eax, 1
  00409	85 c0		 test	 eax, eax
  0040b	74 15		 je	 SHORT $LN58@PyCodec_XM
  0040d	48 8b 44 24 58	 mov	 rax, QWORD PTR object$20926[rsp]
  00412	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  00418	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv247[rsp], rax
  00420	eb 13		 jmp	 SHORT $LN59@PyCodec_XM
$LN58@PyCodec_XM:
  00422	48 8b 44 24 58	 mov	 rax, QWORD PTR object$20926[rsp]
  00427	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  0042d	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv247[rsp], rax
$LN59@PyCodec_XM:
  00435	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR tv247[rsp]
  0043d	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv256[rsp], rax
  00445	eb 3f		 jmp	 SHORT $LN62@PyCodec_XM
$LN61@PyCodec_XM:
  00447	48 8b 44 24 58	 mov	 rax, QWORD PTR object$20926[rsp]
  0044c	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  00454	75 1c		 jne	 SHORT $LN60@PyCodec_XM
  00456	41 b8 e4 02 00
	00		 mov	 r8d, 740		; 000002e4H
  0045c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  00463	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FC@FELCKDKN@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO@
  0046a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00470	33 c0		 xor	 eax, eax
$LN60@PyCodec_XM:
  00472	48 8b 44 24 58	 mov	 rax, QWORD PTR object$20926[rsp]
  00477	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  0047e	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv256[rsp], rax
$LN62@PyCodec_XM:
  00486	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR tv256[rsp]
  0048e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR i$20927[rsp]
  00493	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  00497	89 84 24 98 00
	00 00		 mov	 DWORD PTR tv305[rsp], eax
  0049e	e9 4e 01 00 00	 jmp	 $LN72@PyCodec_XM
$LN71@PyCodec_XM:
  004a3	48 8b 44 24 58	 mov	 rax, QWORD PTR object$20926[rsp]
  004a8	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  004ac	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  004b2	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  004b7	85 c0		 test	 eax, eax
  004b9	75 1c		 jne	 SHORT $LN63@PyCodec_XM
  004bb	41 b8 e4 02 00
	00		 mov	 r8d, 740		; 000002e4H
  004c1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  004c8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@NAODBNMM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  004cf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  004d5	33 c0		 xor	 eax, eax
$LN63@PyCodec_XM:
  004d7	48 8b 44 24 58	 mov	 rax, QWORD PTR object$20926[rsp]
  004dc	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  004df	c1 e8 05	 shr	 eax, 5
  004e2	83 e0 01	 and	 eax, 1
  004e5	85 c0		 test	 eax, eax
  004e7	0f 84 ae 00 00
	00		 je	 $LN69@PyCodec_XM
  004ed	48 8b 44 24 58	 mov	 rax, QWORD PTR object$20926[rsp]
  004f2	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  004f6	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  004fc	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00501	85 c0		 test	 eax, eax
  00503	75 1c		 jne	 SHORT $LN64@PyCodec_XM
  00505	41 b8 e4 02 00
	00		 mov	 r8d, 740		; 000002e4H
  0050b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  00512	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@NAODBNMM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00519	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0051f	33 c0		 xor	 eax, eax
$LN64@PyCodec_XM:
  00521	48 8b 44 24 58	 mov	 rax, QWORD PTR object$20926[rsp]
  00526	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00529	c1 e8 07	 shr	 eax, 7
  0052c	83 e0 01	 and	 eax, 1
  0052f	85 c0		 test	 eax, eax
  00531	75 1c		 jne	 SHORT $LN65@PyCodec_XM
  00533	41 b8 e4 02 00
	00		 mov	 r8d, 740		; 000002e4H
  00539	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  00540	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DK@PKLPIJEF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00547	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0054d	33 c0		 xor	 eax, eax
$LN65@PyCodec_XM:
  0054f	48 8b 44 24 58	 mov	 rax, QWORD PTR object$20926[rsp]
  00554	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00557	c1 e8 06	 shr	 eax, 6
  0055a	83 e0 01	 and	 eax, 1
  0055d	85 c0		 test	 eax, eax
  0055f	74 15		 je	 SHORT $LN66@PyCodec_XM
  00561	48 8b 44 24 58	 mov	 rax, QWORD PTR object$20926[rsp]
  00566	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  0056c	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR tv293[rsp], rax
  00574	eb 13		 jmp	 SHORT $LN67@PyCodec_XM
$LN66@PyCodec_XM:
  00576	48 8b 44 24 58	 mov	 rax, QWORD PTR object$20926[rsp]
  0057b	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  00581	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR tv293[rsp], rax
$LN67@PyCodec_XM:
  00589	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR tv293[rsp]
  00591	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR tv302[rsp], rax
  00599	eb 3f		 jmp	 SHORT $LN70@PyCodec_XM
$LN69@PyCodec_XM:
  0059b	48 8b 44 24 58	 mov	 rax, QWORD PTR object$20926[rsp]
  005a0	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  005a8	75 1c		 jne	 SHORT $LN68@PyCodec_XM
  005aa	41 b8 e4 02 00
	00		 mov	 r8d, 740		; 000002e4H
  005b0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  005b7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FC@FELCKDKN@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO@
  005be	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  005c4	33 c0		 xor	 eax, eax
$LN68@PyCodec_XM:
  005c6	48 8b 44 24 58	 mov	 rax, QWORD PTR object$20926[rsp]
  005cb	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  005d2	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR tv302[rsp], rax
$LN70@PyCodec_XM:
  005da	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR tv302[rsp]
  005e2	48 8b 4c 24 38	 mov	 rcx, QWORD PTR i$20927[rsp]
  005e7	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  005ea	89 84 24 98 00
	00 00		 mov	 DWORD PTR tv305[rsp], eax
$LN72@PyCodec_XM:
  005f1	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR tv305[rsp]
  005f8	89 84 24 80 00
	00 00		 mov	 DWORD PTR tv306[rsp], eax
$LN74@PyCodec_XM:
  005ff	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR tv306[rsp]
  00606	89 44 24 60	 mov	 DWORD PTR ch$20933[rsp], eax

; 741  :             if (ch<10)

  0060a	83 7c 24 60 0a	 cmp	 DWORD PTR ch$20933[rsp], 10
  0060f	73 0d		 jae	 SHORT $LN31@PyCodec_XM

; 742  :                 ressize += 2+1+1;

  00611	8b 44 24 20	 mov	 eax, DWORD PTR ressize$20932[rsp]
  00615	83 c0 04	 add	 eax, 4
  00618	89 44 24 20	 mov	 DWORD PTR ressize$20932[rsp], eax
  0061c	eb 7b		 jmp	 SHORT $LN30@PyCodec_XM
$LN31@PyCodec_XM:

; 743  :             else if (ch<100)

  0061e	83 7c 24 60 64	 cmp	 DWORD PTR ch$20933[rsp], 100 ; 00000064H
  00623	73 0d		 jae	 SHORT $LN29@PyCodec_XM

; 744  :                 ressize += 2+2+1;

  00625	8b 44 24 20	 mov	 eax, DWORD PTR ressize$20932[rsp]
  00629	83 c0 05	 add	 eax, 5
  0062c	89 44 24 20	 mov	 DWORD PTR ressize$20932[rsp], eax
  00630	eb 67		 jmp	 SHORT $LN28@PyCodec_XM
$LN29@PyCodec_XM:

; 745  :             else if (ch<1000)

  00632	81 7c 24 60 e8
	03 00 00	 cmp	 DWORD PTR ch$20933[rsp], 1000 ; 000003e8H
  0063a	73 0d		 jae	 SHORT $LN27@PyCodec_XM

; 746  :                 ressize += 2+3+1;

  0063c	8b 44 24 20	 mov	 eax, DWORD PTR ressize$20932[rsp]
  00640	83 c0 06	 add	 eax, 6
  00643	89 44 24 20	 mov	 DWORD PTR ressize$20932[rsp], eax
  00647	eb 50		 jmp	 SHORT $LN26@PyCodec_XM
$LN27@PyCodec_XM:

; 747  :             else if (ch<10000)

  00649	81 7c 24 60 10
	27 00 00	 cmp	 DWORD PTR ch$20933[rsp], 10000 ; 00002710H
  00651	73 0d		 jae	 SHORT $LN25@PyCodec_XM

; 748  :                 ressize += 2+4+1;

  00653	8b 44 24 20	 mov	 eax, DWORD PTR ressize$20932[rsp]
  00657	83 c0 07	 add	 eax, 7
  0065a	89 44 24 20	 mov	 DWORD PTR ressize$20932[rsp], eax
  0065e	eb 39		 jmp	 SHORT $LN24@PyCodec_XM
$LN25@PyCodec_XM:

; 749  :             else if (ch<100000)

  00660	81 7c 24 60 a0
	86 01 00	 cmp	 DWORD PTR ch$20933[rsp], 100000 ; 000186a0H
  00668	73 0d		 jae	 SHORT $LN23@PyCodec_XM

; 750  :                 ressize += 2+5+1;

  0066a	8b 44 24 20	 mov	 eax, DWORD PTR ressize$20932[rsp]
  0066e	83 c0 08	 add	 eax, 8
  00671	89 44 24 20	 mov	 DWORD PTR ressize$20932[rsp], eax
  00675	eb 22		 jmp	 SHORT $LN22@PyCodec_XM
$LN23@PyCodec_XM:

; 751  :             else if (ch<1000000)

  00677	81 7c 24 60 40
	42 0f 00	 cmp	 DWORD PTR ch$20933[rsp], 1000000 ; 000f4240H
  0067f	73 0d		 jae	 SHORT $LN21@PyCodec_XM

; 752  :                 ressize += 2+6+1;

  00681	8b 44 24 20	 mov	 eax, DWORD PTR ressize$20932[rsp]
  00685	83 c0 09	 add	 eax, 9
  00688	89 44 24 20	 mov	 DWORD PTR ressize$20932[rsp], eax

; 753  :             else

  0068c	eb 0b		 jmp	 SHORT $LN20@PyCodec_XM
$LN21@PyCodec_XM:

; 754  :                 ressize += 2+7+1;

  0068e	8b 44 24 20	 mov	 eax, DWORD PTR ressize$20932[rsp]
  00692	83 c0 0a	 add	 eax, 10
  00695	89 44 24 20	 mov	 DWORD PTR ressize$20932[rsp], eax
$LN20@PyCodec_XM:
$LN22@PyCodec_XM:
$LN24@PyCodec_XM:
$LN26@PyCodec_XM:
$LN28@PyCodec_XM:
$LN30@PyCodec_XM:

; 755  :         }

  00699	e9 f9 f9 ff ff	 jmp	 $LN33@PyCodec_XM
$LN32@PyCodec_XM:

; 756  :         /* allocate replacement */
; 757  :         res = PyUnicode_New(ressize, 127);

  0069e	48 63 44 24 20	 movsxd	 rax, DWORD PTR ressize$20932[rsp]
  006a3	ba 7f 00 00 00	 mov	 edx, 127		; 0000007fH
  006a8	48 8b c8	 mov	 rcx, rax
  006ab	e8 00 00 00 00	 call	 PyUnicode_New
  006b0	48 89 44 24 28	 mov	 QWORD PTR res$20930[rsp], rax

; 758  :         if (res == NULL) {

  006b5	48 83 7c 24 28
	00		 cmp	 QWORD PTR res$20930[rsp], 0
  006bb	75 11		 jne	 SHORT $LN19@PyCodec_XM

; 759  :             Py_DECREF(object);

  006bd	48 8b 4c 24 58	 mov	 rcx, QWORD PTR object$20926[rsp]
  006c2	e8 00 00 00 00	 call	 _Py_DecRef

; 760  :             return NULL;

  006c7	33 c0		 xor	 eax, eax
  006c9	e9 92 08 00 00	 jmp	 $LN39@PyCodec_XM
$LN19@PyCodec_XM:

; 761  :         }
; 762  :         outp = PyUnicode_1BYTE_DATA(res);

  006ce	48 8b 44 24 28	 mov	 rax, QWORD PTR res$20930[rsp]
  006d3	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  006d7	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  006dd	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  006e2	85 c0		 test	 eax, eax
  006e4	75 1c		 jne	 SHORT $LN75@PyCodec_XM
  006e6	41 b8 fa 02 00
	00		 mov	 r8d, 762		; 000002faH
  006ec	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  006f3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@FJJJNMAO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAr?$AAe?$AAs?$AA?$CJ?$AA?$AA@
  006fa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00700	33 c0		 xor	 eax, eax
$LN75@PyCodec_XM:
  00702	48 8b 44 24 28	 mov	 rax, QWORD PTR res$20930[rsp]
  00707	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0070a	c1 e8 05	 shr	 eax, 5
  0070d	83 e0 01	 and	 eax, 1
  00710	85 c0		 test	 eax, eax
  00712	0f 84 ae 00 00
	00		 je	 $LN81@PyCodec_XM
  00718	48 8b 44 24 28	 mov	 rax, QWORD PTR res$20930[rsp]
  0071d	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00721	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00727	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0072c	85 c0		 test	 eax, eax
  0072e	75 1c		 jne	 SHORT $LN76@PyCodec_XM
  00730	41 b8 fa 02 00
	00		 mov	 r8d, 762		; 000002faH
  00736	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  0073d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@FJJJNMAO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAr?$AAe?$AAs?$AA?$CJ?$AA?$AA@
  00744	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0074a	33 c0		 xor	 eax, eax
$LN76@PyCodec_XM:
  0074c	48 8b 44 24 28	 mov	 rax, QWORD PTR res$20930[rsp]
  00751	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00754	c1 e8 07	 shr	 eax, 7
  00757	83 e0 01	 and	 eax, 1
  0075a	85 c0		 test	 eax, eax
  0075c	75 1c		 jne	 SHORT $LN77@PyCodec_XM
  0075e	41 b8 fa 02 00
	00		 mov	 r8d, 762		; 000002faH
  00764	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  0076b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@BOCADMCE@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAr?$AAe?$AAs?$AA?$CJ?$AA?$AA@
  00772	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00778	33 c0		 xor	 eax, eax
$LN77@PyCodec_XM:
  0077a	48 8b 44 24 28	 mov	 rax, QWORD PTR res$20930[rsp]
  0077f	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00782	c1 e8 06	 shr	 eax, 6
  00785	83 e0 01	 and	 eax, 1
  00788	85 c0		 test	 eax, eax
  0078a	74 15		 je	 SHORT $LN78@PyCodec_XM
  0078c	48 8b 44 24 28	 mov	 rax, QWORD PTR res$20930[rsp]
  00791	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  00797	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR tv359[rsp], rax
  0079f	eb 13		 jmp	 SHORT $LN79@PyCodec_XM
$LN78@PyCodec_XM:
  007a1	48 8b 44 24 28	 mov	 rax, QWORD PTR res$20930[rsp]
  007a6	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  007ac	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR tv359[rsp], rax
$LN79@PyCodec_XM:
  007b4	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR tv359[rsp]
  007bc	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR tv368[rsp], rax
  007c4	eb 3f		 jmp	 SHORT $LN82@PyCodec_XM
$LN81@PyCodec_XM:
  007c6	48 8b 44 24 28	 mov	 rax, QWORD PTR res$20930[rsp]
  007cb	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  007d3	75 1c		 jne	 SHORT $LN80@PyCodec_XM
  007d5	41 b8 fa 02 00
	00		 mov	 r8d, 762		; 000002faH
  007db	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  007e2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EI@ILJBECKM@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AAr?$AAe?$AAs?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt?$AAa?$AA?4@
  007e9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  007ef	33 c0		 xor	 eax, eax
$LN80@PyCodec_XM:
  007f1	48 8b 44 24 28	 mov	 rax, QWORD PTR res$20930[rsp]
  007f6	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  007fd	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR tv368[rsp], rax
$LN82@PyCodec_XM:
  00805	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR tv368[rsp]
  0080d	48 89 44 24 30	 mov	 QWORD PTR outp$20931[rsp], rax

; 763  :         /* generate replacement */
; 764  :         for (i = start; i < end; ++i) {

  00812	48 8b 44 24 50	 mov	 rax, QWORD PTR start$20928[rsp]
  00817	48 89 44 24 38	 mov	 QWORD PTR i$20927[rsp], rax
  0081c	eb 0d		 jmp	 SHORT $LN18@PyCodec_XM
$LN17@PyCodec_XM:
  0081e	48 8b 44 24 38	 mov	 rax, QWORD PTR i$20927[rsp]
  00823	48 ff c0	 inc	 rax
  00826	48 89 44 24 38	 mov	 QWORD PTR i$20927[rsp], rax
$LN18@PyCodec_XM:
  0082b	48 8b 44 24 48	 mov	 rax, QWORD PTR end$20929[rsp]
  00830	48 39 44 24 38	 cmp	 QWORD PTR i$20927[rsp], rax
  00835	0f 8d b9 06 00
	00		 jge	 $LN16@PyCodec_XM

; 765  :             int digits;
; 766  :             int base;
; 767  :             ch = PyUnicode_READ_CHAR(object, i);

  0083b	48 8b 44 24 58	 mov	 rax, QWORD PTR object$20926[rsp]
  00840	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00844	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0084a	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0084f	85 c0		 test	 eax, eax
  00851	75 1c		 jne	 SHORT $LN83@PyCodec_XM
  00853	41 b8 ff 02 00
	00		 mov	 r8d, 767		; 000002ffH
  00859	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  00860	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@FJFAKGEG@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$AA@
  00867	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0086d	33 c0		 xor	 eax, eax
$LN83@PyCodec_XM:
  0086f	48 8b 44 24 58	 mov	 rax, QWORD PTR object$20926[rsp]
  00874	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00877	c1 e8 07	 shr	 eax, 7
  0087a	83 e0 01	 and	 eax, 1
  0087d	85 c0		 test	 eax, eax
  0087f	75 1c		 jne	 SHORT $LN84@PyCodec_XM
  00881	41 b8 ff 02 00
	00		 mov	 r8d, 767		; 000002ffH
  00887	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  0088e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DG@MCBMNNJM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$AA@
  00895	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0089b	33 c0		 xor	 eax, eax
$LN84@PyCodec_XM:
  0089d	48 8b 44 24 58	 mov	 rax, QWORD PTR object$20926[rsp]
  008a2	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  008a6	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  008ac	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  008b1	85 c0		 test	 eax, eax
  008b3	75 1c		 jne	 SHORT $LN85@PyCodec_XM
  008b5	41 b8 ff 02 00
	00		 mov	 r8d, 767		; 000002ffH
  008bb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  008c2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@NAODBNMM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  008c9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  008cf	33 c0		 xor	 eax, eax
$LN85@PyCodec_XM:
  008d1	48 8b 44 24 58	 mov	 rax, QWORD PTR object$20926[rsp]
  008d6	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  008d9	c1 e8 07	 shr	 eax, 7
  008dc	83 e0 01	 and	 eax, 1
  008df	85 c0		 test	 eax, eax
  008e1	75 1c		 jne	 SHORT $LN86@PyCodec_XM
  008e3	41 b8 ff 02 00
	00		 mov	 r8d, 767		; 000002ffH
  008e9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  008f0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DK@PKLPIJEF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  008f7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  008fd	33 c0		 xor	 eax, eax
$LN86@PyCodec_XM:
  008ff	48 8b 44 24 58	 mov	 rax, QWORD PTR object$20926[rsp]
  00904	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00907	c1 e8 02	 shr	 eax, 2
  0090a	83 e0 07	 and	 eax, 7
  0090d	83 f8 01	 cmp	 eax, 1
  00910	0f 85 59 01 00
	00		 jne	 $LN115@PyCodec_XM
  00916	48 8b 44 24 58	 mov	 rax, QWORD PTR object$20926[rsp]
  0091b	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0091f	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00925	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0092a	85 c0		 test	 eax, eax
  0092c	75 1c		 jne	 SHORT $LN87@PyCodec_XM
  0092e	41 b8 ff 02 00
	00		 mov	 r8d, 767		; 000002ffH
  00934	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  0093b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@NAODBNMM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00942	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00948	33 c0		 xor	 eax, eax
$LN87@PyCodec_XM:
  0094a	48 8b 44 24 58	 mov	 rax, QWORD PTR object$20926[rsp]
  0094f	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00952	c1 e8 05	 shr	 eax, 5
  00955	83 e0 01	 and	 eax, 1
  00958	85 c0		 test	 eax, eax
  0095a	0f 84 ae 00 00
	00		 je	 $LN93@PyCodec_XM
  00960	48 8b 44 24 58	 mov	 rax, QWORD PTR object$20926[rsp]
  00965	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00969	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0096f	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00974	85 c0		 test	 eax, eax
  00976	75 1c		 jne	 SHORT $LN88@PyCodec_XM
  00978	41 b8 ff 02 00
	00		 mov	 r8d, 767		; 000002ffH
  0097e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  00985	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@NAODBNMM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  0098c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00992	33 c0		 xor	 eax, eax
$LN88@PyCodec_XM:
  00994	48 8b 44 24 58	 mov	 rax, QWORD PTR object$20926[rsp]
  00999	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0099c	c1 e8 07	 shr	 eax, 7
  0099f	83 e0 01	 and	 eax, 1
  009a2	85 c0		 test	 eax, eax
  009a4	75 1c		 jne	 SHORT $LN89@PyCodec_XM
  009a6	41 b8 ff 02 00
	00		 mov	 r8d, 767		; 000002ffH
  009ac	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  009b3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DK@PKLPIJEF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  009ba	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  009c0	33 c0		 xor	 eax, eax
$LN89@PyCodec_XM:
  009c2	48 8b 44 24 58	 mov	 rax, QWORD PTR object$20926[rsp]
  009c7	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  009ca	c1 e8 06	 shr	 eax, 6
  009cd	83 e0 01	 and	 eax, 1
  009d0	85 c0		 test	 eax, eax
  009d2	74 15		 je	 SHORT $LN90@PyCodec_XM
  009d4	48 8b 44 24 58	 mov	 rax, QWORD PTR object$20926[rsp]
  009d9	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  009df	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR tv440[rsp], rax
  009e7	eb 13		 jmp	 SHORT $LN91@PyCodec_XM
$LN90@PyCodec_XM:
  009e9	48 8b 44 24 58	 mov	 rax, QWORD PTR object$20926[rsp]
  009ee	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  009f4	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR tv440[rsp], rax
$LN91@PyCodec_XM:
  009fc	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR tv440[rsp]
  00a04	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR tv449[rsp], rax
  00a0c	eb 3f		 jmp	 SHORT $LN94@PyCodec_XM
$LN93@PyCodec_XM:
  00a0e	48 8b 44 24 58	 mov	 rax, QWORD PTR object$20926[rsp]
  00a13	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  00a1b	75 1c		 jne	 SHORT $LN92@PyCodec_XM
  00a1d	41 b8 ff 02 00
	00		 mov	 r8d, 767		; 000002ffH
  00a23	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  00a2a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FC@FELCKDKN@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO@
  00a31	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00a37	33 c0		 xor	 eax, eax
$LN92@PyCodec_XM:
  00a39	48 8b 44 24 58	 mov	 rax, QWORD PTR object$20926[rsp]
  00a3e	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  00a45	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR tv449[rsp], rax
$LN94@PyCodec_XM:
  00a4d	48 8b 44 24 38	 mov	 rax, QWORD PTR i$20927[rsp]
  00a52	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR tv449[rsp]
  00a5a	48 03 c8	 add	 rcx, rax
  00a5d	48 8b c1	 mov	 rax, rcx
  00a60	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00a63	89 84 24 d0 00
	00 00		 mov	 DWORD PTR tv564[rsp], eax
  00a6a	e9 29 03 00 00	 jmp	 $LN116@PyCodec_XM
$LN115@PyCodec_XM:
  00a6f	48 8b 44 24 58	 mov	 rax, QWORD PTR object$20926[rsp]
  00a74	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00a78	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00a7e	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00a83	85 c0		 test	 eax, eax
  00a85	75 1c		 jne	 SHORT $LN95@PyCodec_XM
  00a87	41 b8 ff 02 00
	00		 mov	 r8d, 767		; 000002ffH
  00a8d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  00a94	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@NAODBNMM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00a9b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00aa1	33 c0		 xor	 eax, eax
$LN95@PyCodec_XM:
  00aa3	48 8b 44 24 58	 mov	 rax, QWORD PTR object$20926[rsp]
  00aa8	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00aab	c1 e8 07	 shr	 eax, 7
  00aae	83 e0 01	 and	 eax, 1
  00ab1	85 c0		 test	 eax, eax
  00ab3	75 1c		 jne	 SHORT $LN96@PyCodec_XM
  00ab5	41 b8 ff 02 00
	00		 mov	 r8d, 767		; 000002ffH
  00abb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  00ac2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DK@PKLPIJEF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00ac9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00acf	33 c0		 xor	 eax, eax
$LN96@PyCodec_XM:
  00ad1	48 8b 44 24 58	 mov	 rax, QWORD PTR object$20926[rsp]
  00ad6	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00ad9	c1 e8 02	 shr	 eax, 2
  00adc	83 e0 07	 and	 eax, 7
  00adf	83 f8 02	 cmp	 eax, 2
  00ae2	0f 85 54 01 00
	00		 jne	 $LN113@PyCodec_XM
  00ae8	48 8b 44 24 58	 mov	 rax, QWORD PTR object$20926[rsp]
  00aed	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00af1	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00af7	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00afc	85 c0		 test	 eax, eax
  00afe	75 1c		 jne	 SHORT $LN97@PyCodec_XM
  00b00	41 b8 ff 02 00
	00		 mov	 r8d, 767		; 000002ffH
  00b06	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  00b0d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@NAODBNMM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00b14	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00b1a	33 c0		 xor	 eax, eax
$LN97@PyCodec_XM:
  00b1c	48 8b 44 24 58	 mov	 rax, QWORD PTR object$20926[rsp]
  00b21	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00b24	c1 e8 05	 shr	 eax, 5
  00b27	83 e0 01	 and	 eax, 1
  00b2a	85 c0		 test	 eax, eax
  00b2c	0f 84 ae 00 00
	00		 je	 $LN103@PyCodec_XM
  00b32	48 8b 44 24 58	 mov	 rax, QWORD PTR object$20926[rsp]
  00b37	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00b3b	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00b41	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00b46	85 c0		 test	 eax, eax
  00b48	75 1c		 jne	 SHORT $LN98@PyCodec_XM
  00b4a	41 b8 ff 02 00
	00		 mov	 r8d, 767		; 000002ffH
  00b50	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  00b57	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@NAODBNMM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00b5e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00b64	33 c0		 xor	 eax, eax
$LN98@PyCodec_XM:
  00b66	48 8b 44 24 58	 mov	 rax, QWORD PTR object$20926[rsp]
  00b6b	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00b6e	c1 e8 07	 shr	 eax, 7
  00b71	83 e0 01	 and	 eax, 1
  00b74	85 c0		 test	 eax, eax
  00b76	75 1c		 jne	 SHORT $LN99@PyCodec_XM
  00b78	41 b8 ff 02 00
	00		 mov	 r8d, 767		; 000002ffH
  00b7e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  00b85	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DK@PKLPIJEF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00b8c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00b92	33 c0		 xor	 eax, eax
$LN99@PyCodec_XM:
  00b94	48 8b 44 24 58	 mov	 rax, QWORD PTR object$20926[rsp]
  00b99	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00b9c	c1 e8 06	 shr	 eax, 6
  00b9f	83 e0 01	 and	 eax, 1
  00ba2	85 c0		 test	 eax, eax
  00ba4	74 15		 je	 SHORT $LN100@PyCodec_XM
  00ba6	48 8b 44 24 58	 mov	 rax, QWORD PTR object$20926[rsp]
  00bab	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  00bb1	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR tv505[rsp], rax
  00bb9	eb 13		 jmp	 SHORT $LN101@PyCodec_XM
$LN100@PyCodec_XM:
  00bbb	48 8b 44 24 58	 mov	 rax, QWORD PTR object$20926[rsp]
  00bc0	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  00bc6	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR tv505[rsp], rax
$LN101@PyCodec_XM:
  00bce	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR tv505[rsp]
  00bd6	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR tv514[rsp], rax
  00bde	eb 3f		 jmp	 SHORT $LN104@PyCodec_XM
$LN103@PyCodec_XM:
  00be0	48 8b 44 24 58	 mov	 rax, QWORD PTR object$20926[rsp]
  00be5	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  00bed	75 1c		 jne	 SHORT $LN102@PyCodec_XM
  00bef	41 b8 ff 02 00
	00		 mov	 r8d, 767		; 000002ffH
  00bf5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  00bfc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FC@FELCKDKN@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO@
  00c03	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00c09	33 c0		 xor	 eax, eax
$LN102@PyCodec_XM:
  00c0b	48 8b 44 24 58	 mov	 rax, QWORD PTR object$20926[rsp]
  00c10	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  00c17	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR tv514[rsp], rax
$LN104@PyCodec_XM:
  00c1f	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR tv514[rsp]
  00c27	48 8b 4c 24 38	 mov	 rcx, QWORD PTR i$20927[rsp]
  00c2c	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  00c30	89 84 24 e8 00
	00 00		 mov	 DWORD PTR tv563[rsp], eax
  00c37	e9 4e 01 00 00	 jmp	 $LN114@PyCodec_XM
$LN113@PyCodec_XM:
  00c3c	48 8b 44 24 58	 mov	 rax, QWORD PTR object$20926[rsp]
  00c41	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00c45	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00c4b	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00c50	85 c0		 test	 eax, eax
  00c52	75 1c		 jne	 SHORT $LN105@PyCodec_XM
  00c54	41 b8 ff 02 00
	00		 mov	 r8d, 767		; 000002ffH
  00c5a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  00c61	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@NAODBNMM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00c68	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00c6e	33 c0		 xor	 eax, eax
$LN105@PyCodec_XM:
  00c70	48 8b 44 24 58	 mov	 rax, QWORD PTR object$20926[rsp]
  00c75	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00c78	c1 e8 05	 shr	 eax, 5
  00c7b	83 e0 01	 and	 eax, 1
  00c7e	85 c0		 test	 eax, eax
  00c80	0f 84 ae 00 00
	00		 je	 $LN111@PyCodec_XM
  00c86	48 8b 44 24 58	 mov	 rax, QWORD PTR object$20926[rsp]
  00c8b	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00c8f	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00c95	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00c9a	85 c0		 test	 eax, eax
  00c9c	75 1c		 jne	 SHORT $LN106@PyCodec_XM
  00c9e	41 b8 ff 02 00
	00		 mov	 r8d, 767		; 000002ffH
  00ca4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  00cab	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@NAODBNMM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00cb2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00cb8	33 c0		 xor	 eax, eax
$LN106@PyCodec_XM:
  00cba	48 8b 44 24 58	 mov	 rax, QWORD PTR object$20926[rsp]
  00cbf	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00cc2	c1 e8 07	 shr	 eax, 7
  00cc5	83 e0 01	 and	 eax, 1
  00cc8	85 c0		 test	 eax, eax
  00cca	75 1c		 jne	 SHORT $LN107@PyCodec_XM
  00ccc	41 b8 ff 02 00
	00		 mov	 r8d, 767		; 000002ffH
  00cd2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  00cd9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DK@PKLPIJEF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00ce0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00ce6	33 c0		 xor	 eax, eax
$LN107@PyCodec_XM:
  00ce8	48 8b 44 24 58	 mov	 rax, QWORD PTR object$20926[rsp]
  00ced	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00cf0	c1 e8 06	 shr	 eax, 6
  00cf3	83 e0 01	 and	 eax, 1
  00cf6	85 c0		 test	 eax, eax
  00cf8	74 15		 je	 SHORT $LN108@PyCodec_XM
  00cfa	48 8b 44 24 58	 mov	 rax, QWORD PTR object$20926[rsp]
  00cff	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  00d05	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR tv551[rsp], rax
  00d0d	eb 13		 jmp	 SHORT $LN109@PyCodec_XM
$LN108@PyCodec_XM:
  00d0f	48 8b 44 24 58	 mov	 rax, QWORD PTR object$20926[rsp]
  00d14	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  00d1a	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR tv551[rsp], rax
$LN109@PyCodec_XM:
  00d22	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR tv551[rsp]
  00d2a	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR tv560[rsp], rax
  00d32	eb 3f		 jmp	 SHORT $LN112@PyCodec_XM
$LN111@PyCodec_XM:
  00d34	48 8b 44 24 58	 mov	 rax, QWORD PTR object$20926[rsp]
  00d39	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  00d41	75 1c		 jne	 SHORT $LN110@PyCodec_XM
  00d43	41 b8 ff 02 00
	00		 mov	 r8d, 767		; 000002ffH
  00d49	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  00d50	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FC@FELCKDKN@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO@
  00d57	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00d5d	33 c0		 xor	 eax, eax
$LN110@PyCodec_XM:
  00d5f	48 8b 44 24 58	 mov	 rax, QWORD PTR object$20926[rsp]
  00d64	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  00d6b	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR tv560[rsp], rax
$LN112@PyCodec_XM:
  00d73	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR tv560[rsp]
  00d7b	48 8b 4c 24 38	 mov	 rcx, QWORD PTR i$20927[rsp]
  00d80	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  00d83	89 84 24 e8 00
	00 00		 mov	 DWORD PTR tv563[rsp], eax
$LN114@PyCodec_XM:
  00d8a	8b 84 24 e8 00
	00 00		 mov	 eax, DWORD PTR tv563[rsp]
  00d91	89 84 24 d0 00
	00 00		 mov	 DWORD PTR tv564[rsp], eax
$LN116@PyCodec_XM:
  00d98	8b 84 24 d0 00
	00 00		 mov	 eax, DWORD PTR tv564[rsp]
  00d9f	89 44 24 60	 mov	 DWORD PTR ch$20933[rsp], eax

; 768  :             *outp++ = '&';

  00da3	48 8b 44 24 30	 mov	 rax, QWORD PTR outp$20931[rsp]
  00da8	c6 00 26	 mov	 BYTE PTR [rax], 38	; 00000026H
  00dab	48 8b 44 24 30	 mov	 rax, QWORD PTR outp$20931[rsp]
  00db0	48 ff c0	 inc	 rax
  00db3	48 89 44 24 30	 mov	 QWORD PTR outp$20931[rsp], rax

; 769  :             *outp++ = '#';

  00db8	48 8b 44 24 30	 mov	 rax, QWORD PTR outp$20931[rsp]
  00dbd	c6 00 23	 mov	 BYTE PTR [rax], 35	; 00000023H
  00dc0	48 8b 44 24 30	 mov	 rax, QWORD PTR outp$20931[rsp]
  00dc5	48 ff c0	 inc	 rax
  00dc8	48 89 44 24 30	 mov	 QWORD PTR outp$20931[rsp], rax

; 770  :             if (ch<10) {

  00dcd	83 7c 24 60 0a	 cmp	 DWORD PTR ch$20933[rsp], 10
  00dd2	73 15		 jae	 SHORT $LN15@PyCodec_XM

; 771  :                 digits = 1;

  00dd4	c7 44 24 68 01
	00 00 00	 mov	 DWORD PTR digits$21046[rsp], 1

; 772  :                 base = 1;

  00ddc	c7 44 24 64 01
	00 00 00	 mov	 DWORD PTR base$21047[rsp], 1
  00de4	e9 9c 00 00 00	 jmp	 $LN14@PyCodec_XM
$LN15@PyCodec_XM:

; 773  :             }
; 774  :             else if (ch<100) {

  00de9	83 7c 24 60 64	 cmp	 DWORD PTR ch$20933[rsp], 100 ; 00000064H
  00dee	73 15		 jae	 SHORT $LN13@PyCodec_XM

; 775  :                 digits = 2;

  00df0	c7 44 24 68 02
	00 00 00	 mov	 DWORD PTR digits$21046[rsp], 2

; 776  :                 base = 10;

  00df8	c7 44 24 64 0a
	00 00 00	 mov	 DWORD PTR base$21047[rsp], 10
  00e00	e9 80 00 00 00	 jmp	 $LN12@PyCodec_XM
$LN13@PyCodec_XM:

; 777  :             }
; 778  :             else if (ch<1000) {

  00e05	81 7c 24 60 e8
	03 00 00	 cmp	 DWORD PTR ch$20933[rsp], 1000 ; 000003e8H
  00e0d	73 12		 jae	 SHORT $LN11@PyCodec_XM

; 779  :                 digits = 3;

  00e0f	c7 44 24 68 03
	00 00 00	 mov	 DWORD PTR digits$21046[rsp], 3

; 780  :                 base = 100;

  00e17	c7 44 24 64 64
	00 00 00	 mov	 DWORD PTR base$21047[rsp], 100 ; 00000064H
  00e1f	eb 64		 jmp	 SHORT $LN10@PyCodec_XM
$LN11@PyCodec_XM:

; 781  :             }
; 782  :             else if (ch<10000) {

  00e21	81 7c 24 60 10
	27 00 00	 cmp	 DWORD PTR ch$20933[rsp], 10000 ; 00002710H
  00e29	73 12		 jae	 SHORT $LN9@PyCodec_XM

; 783  :                 digits = 4;

  00e2b	c7 44 24 68 04
	00 00 00	 mov	 DWORD PTR digits$21046[rsp], 4

; 784  :                 base = 1000;

  00e33	c7 44 24 64 e8
	03 00 00	 mov	 DWORD PTR base$21047[rsp], 1000 ; 000003e8H
  00e3b	eb 48		 jmp	 SHORT $LN8@PyCodec_XM
$LN9@PyCodec_XM:

; 785  :             }
; 786  :             else if (ch<100000) {

  00e3d	81 7c 24 60 a0
	86 01 00	 cmp	 DWORD PTR ch$20933[rsp], 100000 ; 000186a0H
  00e45	73 12		 jae	 SHORT $LN7@PyCodec_XM

; 787  :                 digits = 5;

  00e47	c7 44 24 68 05
	00 00 00	 mov	 DWORD PTR digits$21046[rsp], 5

; 788  :                 base = 10000;

  00e4f	c7 44 24 64 10
	27 00 00	 mov	 DWORD PTR base$21047[rsp], 10000 ; 00002710H
  00e57	eb 2c		 jmp	 SHORT $LN6@PyCodec_XM
$LN7@PyCodec_XM:

; 789  :             }
; 790  :             else if (ch<1000000) {

  00e59	81 7c 24 60 40
	42 0f 00	 cmp	 DWORD PTR ch$20933[rsp], 1000000 ; 000f4240H
  00e61	73 12		 jae	 SHORT $LN5@PyCodec_XM

; 791  :                 digits = 6;

  00e63	c7 44 24 68 06
	00 00 00	 mov	 DWORD PTR digits$21046[rsp], 6

; 792  :                 base = 100000;

  00e6b	c7 44 24 64 a0
	86 01 00	 mov	 DWORD PTR base$21047[rsp], 100000 ; 000186a0H

; 793  :             }
; 794  :             else {

  00e73	eb 10		 jmp	 SHORT $LN4@PyCodec_XM
$LN5@PyCodec_XM:

; 795  :                 digits = 7;

  00e75	c7 44 24 68 07
	00 00 00	 mov	 DWORD PTR digits$21046[rsp], 7

; 796  :                 base = 1000000;

  00e7d	c7 44 24 64 40
	42 0f 00	 mov	 DWORD PTR base$21047[rsp], 1000000 ; 000f4240H
$LN4@PyCodec_XM:
$LN6@PyCodec_XM:
$LN8@PyCodec_XM:
$LN10@PyCodec_XM:
$LN12@PyCodec_XM:
$LN14@PyCodec_XM:
$LN3@PyCodec_XM:

; 797  :             }
; 798  :             while (digits-->0) {

  00e85	8b 44 24 68	 mov	 eax, DWORD PTR digits$21046[rsp]
  00e89	8b 4c 24 68	 mov	 ecx, DWORD PTR digits$21046[rsp]
  00e8d	ff c9		 dec	 ecx
  00e8f	89 4c 24 68	 mov	 DWORD PTR digits$21046[rsp], ecx
  00e93	85 c0		 test	 eax, eax
  00e95	7e 43		 jle	 SHORT $LN2@PyCodec_XM

; 799  :                 *outp++ = '0' + ch/base;

  00e97	33 d2		 xor	 edx, edx
  00e99	8b 44 24 60	 mov	 eax, DWORD PTR ch$20933[rsp]
  00e9d	f7 74 24 64	 div	 DWORD PTR base$21047[rsp]
  00ea1	83 c0 30	 add	 eax, 48			; 00000030H
  00ea4	48 8b 4c 24 30	 mov	 rcx, QWORD PTR outp$20931[rsp]
  00ea9	88 01		 mov	 BYTE PTR [rcx], al
  00eab	48 8b 44 24 30	 mov	 rax, QWORD PTR outp$20931[rsp]
  00eb0	48 ff c0	 inc	 rax
  00eb3	48 89 44 24 30	 mov	 QWORD PTR outp$20931[rsp], rax

; 800  :                 ch %= base;

  00eb8	33 d2		 xor	 edx, edx
  00eba	8b 44 24 60	 mov	 eax, DWORD PTR ch$20933[rsp]
  00ebe	f7 74 24 64	 div	 DWORD PTR base$21047[rsp]
  00ec2	8b c2		 mov	 eax, edx
  00ec4	89 44 24 60	 mov	 DWORD PTR ch$20933[rsp], eax

; 801  :                 base /= 10;

  00ec8	8b 44 24 64	 mov	 eax, DWORD PTR base$21047[rsp]
  00ecc	99		 cdq
  00ecd	b9 0a 00 00 00	 mov	 ecx, 10
  00ed2	f7 f9		 idiv	 ecx
  00ed4	89 44 24 64	 mov	 DWORD PTR base$21047[rsp], eax

; 802  :             }

  00ed8	eb ab		 jmp	 SHORT $LN3@PyCodec_XM
$LN2@PyCodec_XM:

; 803  :             *outp++ = ';';

  00eda	48 8b 44 24 30	 mov	 rax, QWORD PTR outp$20931[rsp]
  00edf	c6 00 3b	 mov	 BYTE PTR [rax], 59	; 0000003bH
  00ee2	48 8b 44 24 30	 mov	 rax, QWORD PTR outp$20931[rsp]
  00ee7	48 ff c0	 inc	 rax
  00eea	48 89 44 24 30	 mov	 QWORD PTR outp$20931[rsp], rax

; 804  :         }

  00eef	e9 2a f9 ff ff	 jmp	 $LN17@PyCodec_XM
$LN16@PyCodec_XM:

; 805  :         assert(_PyUnicode_CheckConsistency(res, 1));

  00ef4	ba 01 00 00 00	 mov	 edx, 1
  00ef9	48 8b 4c 24 28	 mov	 rcx, QWORD PTR res$20930[rsp]
  00efe	e8 00 00 00 00	 call	 _PyUnicode_CheckConsistency
  00f03	85 c0		 test	 eax, eax
  00f05	75 1c		 jne	 SHORT $LN117@PyCodec_XM
  00f07	41 b8 25 03 00
	00		 mov	 r8d, 805		; 00000325H
  00f0d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  00f14	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EI@PCBNHGIB@?$AA_?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AAC?$AAo?$AAn?$AAs?$AAi?$AAs?$AAt?$AAe?$AAn?$AAc?$AAy?$AA?$CI?$AAr?$AAe?$AAs?$AA?0@
  00f1b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00f21	33 c0		 xor	 eax, eax
$LN117@PyCodec_XM:

; 806  :         restuple = Py_BuildValue("(Nn)", res, end);

  00f23	4c 8b 44 24 48	 mov	 r8, QWORD PTR end$20929[rsp]
  00f28	48 8b 54 24 28	 mov	 rdx, QWORD PTR res$20930[rsp]
  00f2d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04LFKIDKOI@?$CINn?$CJ?$AA@
  00f34	e8 00 00 00 00	 call	 Py_BuildValue
  00f39	48 89 44 24 40	 mov	 QWORD PTR restuple$20925[rsp], rax

; 807  :         Py_DECREF(object);

  00f3e	48 8b 4c 24 58	 mov	 rcx, QWORD PTR object$20926[rsp]
  00f43	e8 00 00 00 00	 call	 _Py_DecRef

; 808  :         return restuple;

  00f48	48 8b 44 24 40	 mov	 rax, QWORD PTR restuple$20925[rsp]
  00f4d	eb 11		 jmp	 SHORT $LN39@PyCodec_XM

; 809  :     }
; 810  :     else {

  00f4f	eb 0f		 jmp	 SHORT $LN1@PyCodec_XM
$LN38@PyCodec_XM:

; 811  :         wrong_exception_type(exc);

  00f51	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR exc$[rsp]
  00f59	e8 00 00 00 00	 call	 wrong_exception_type

; 812  :         return NULL;

  00f5e	33 c0		 xor	 eax, eax
$LN1@PyCodec_XM:
$LN39@PyCodec_XM:

; 813  :     }
; 814  : }

  00f60	48 81 c4 08 01
	00 00		 add	 rsp, 264		; 00000108H
  00f67	c3		 ret	 0
PyCodec_XMLCharRefReplaceErrors ENDP
_TEXT	ENDS
PUBLIC	PyCodec_BackslashReplaceErrors
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyCodec_BackslashReplaceErrors DD imagerel $LN100
	DD	imagerel $LN100+4049
	DD	imagerel $unwind$PyCodec_BackslashReplaceErrors
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyCodec_BackslashReplaceErrors DD 020c01H
	DD	021010cH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyCodec_BackslashReplaceErrors
_TEXT	SEGMENT
ressize$21141 = 32
res$21139 = 40
outp$21140 = 48
i$21136 = 56
restuple$21134 = 64
end$21138 = 72
start$21137 = 80
c$21142 = 88
object$21135 = 96
tv182 = 104
tv191 = 112
tv306 = 120
tv247 = 128
tv256 = 136
tv305 = 144
tv293 = 152
tv302 = 160
tv350 = 168
tv359 = 176
tv431 = 184
tv440 = 192
tv555 = 200
tv496 = 208
tv505 = 216
tv554 = 224
tv542 = 232
tv551 = 240
exc$ = 272
PyCodec_BackslashReplaceErrors PROC			; COMDAT

; 817  : {

$LN100:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H

; 818  :     if (PyObject_IsInstance(exc, PyExc_UnicodeEncodeError)) {

  0000c	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR PyExc_UnicodeEncodeError
  00013	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR exc$[rsp]
  0001b	e8 00 00 00 00	 call	 PyObject_IsInstance
  00020	85 c0		 test	 eax, eax
  00022	0f 84 92 0f 00
	00		 je	 $LN20@PyCodec_Ba

; 819  :         PyObject *restuple;
; 820  :         PyObject *object;
; 821  :         Py_ssize_t i;
; 822  :         Py_ssize_t start;
; 823  :         Py_ssize_t end;
; 824  :         PyObject *res;
; 825  :         unsigned char *outp;
; 826  :         int ressize;
; 827  :         Py_UCS4 c;
; 828  :         if (PyUnicodeEncodeError_GetStart(exc, &start))

  00028	48 8d 54 24 50	 lea	 rdx, QWORD PTR start$21137[rsp]
  0002d	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR exc$[rsp]
  00035	e8 00 00 00 00	 call	 PyUnicodeEncodeError_GetStart
  0003a	85 c0		 test	 eax, eax
  0003c	74 07		 je	 SHORT $LN19@PyCodec_Ba

; 829  :             return NULL;

  0003e	33 c0		 xor	 eax, eax
  00040	e9 84 0f 00 00	 jmp	 $LN21@PyCodec_Ba
$LN19@PyCodec_Ba:

; 830  :         if (PyUnicodeEncodeError_GetEnd(exc, &end))

  00045	48 8d 54 24 48	 lea	 rdx, QWORD PTR end$21138[rsp]
  0004a	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR exc$[rsp]
  00052	e8 00 00 00 00	 call	 PyUnicodeEncodeError_GetEnd
  00057	85 c0		 test	 eax, eax
  00059	74 07		 je	 SHORT $LN18@PyCodec_Ba

; 831  :             return NULL;

  0005b	33 c0		 xor	 eax, eax
  0005d	e9 67 0f 00 00	 jmp	 $LN21@PyCodec_Ba
$LN18@PyCodec_Ba:

; 832  :         if (!(object = PyUnicodeEncodeError_GetObject(exc)))

  00062	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR exc$[rsp]
  0006a	e8 00 00 00 00	 call	 PyUnicodeEncodeError_GetObject
  0006f	48 89 44 24 60	 mov	 QWORD PTR object$21135[rsp], rax
  00074	48 83 7c 24 60
	00		 cmp	 QWORD PTR object$21135[rsp], 0
  0007a	75 07		 jne	 SHORT $LN17@PyCodec_Ba

; 833  :             return NULL;

  0007c	33 c0		 xor	 eax, eax
  0007e	e9 46 0f 00 00	 jmp	 $LN21@PyCodec_Ba
$LN17@PyCodec_Ba:

; 834  :         for (i = start, ressize = 0; i < end; ++i) {

  00083	48 8b 44 24 50	 mov	 rax, QWORD PTR start$21137[rsp]
  00088	48 89 44 24 38	 mov	 QWORD PTR i$21136[rsp], rax
  0008d	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR ressize$21141[rsp], 0
  00095	eb 0d		 jmp	 SHORT $LN16@PyCodec_Ba
$LN15@PyCodec_Ba:
  00097	48 8b 44 24 38	 mov	 rax, QWORD PTR i$21136[rsp]
  0009c	48 ff c0	 inc	 rax
  0009f	48 89 44 24 38	 mov	 QWORD PTR i$21136[rsp], rax
$LN16@PyCodec_Ba:
  000a4	48 8b 44 24 48	 mov	 rax, QWORD PTR end$21138[rsp]
  000a9	48 39 44 24 38	 cmp	 QWORD PTR i$21136[rsp], rax
  000ae	0f 8d 8b 05 00
	00		 jge	 $LN14@PyCodec_Ba

; 835  :             /* object is guaranteed to be "ready" */
; 836  :             c = PyUnicode_READ_CHAR(object, i);

  000b4	48 8b 44 24 60	 mov	 rax, QWORD PTR object$21135[rsp]
  000b9	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000bd	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000c3	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  000c8	85 c0		 test	 eax, eax
  000ca	75 1c		 jne	 SHORT $LN23@PyCodec_Ba
  000cc	41 b8 44 03 00
	00		 mov	 r8d, 836		; 00000344H
  000d2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  000d9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@FJFAKGEG@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$AA@
  000e0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000e6	33 c0		 xor	 eax, eax
$LN23@PyCodec_Ba:
  000e8	48 8b 44 24 60	 mov	 rax, QWORD PTR object$21135[rsp]
  000ed	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  000f0	c1 e8 07	 shr	 eax, 7
  000f3	83 e0 01	 and	 eax, 1
  000f6	85 c0		 test	 eax, eax
  000f8	75 1c		 jne	 SHORT $LN24@PyCodec_Ba
  000fa	41 b8 44 03 00
	00		 mov	 r8d, 836		; 00000344H
  00100	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  00107	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DG@MCBMNNJM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$AA@
  0010e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00114	33 c0		 xor	 eax, eax
$LN24@PyCodec_Ba:
  00116	48 8b 44 24 60	 mov	 rax, QWORD PTR object$21135[rsp]
  0011b	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0011f	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00125	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0012a	85 c0		 test	 eax, eax
  0012c	75 1c		 jne	 SHORT $LN25@PyCodec_Ba
  0012e	41 b8 44 03 00
	00		 mov	 r8d, 836		; 00000344H
  00134	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  0013b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@NAODBNMM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00142	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00148	33 c0		 xor	 eax, eax
$LN25@PyCodec_Ba:
  0014a	48 8b 44 24 60	 mov	 rax, QWORD PTR object$21135[rsp]
  0014f	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00152	c1 e8 07	 shr	 eax, 7
  00155	83 e0 01	 and	 eax, 1
  00158	85 c0		 test	 eax, eax
  0015a	75 1c		 jne	 SHORT $LN26@PyCodec_Ba
  0015c	41 b8 44 03 00
	00		 mov	 r8d, 836		; 00000344H
  00162	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  00169	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DK@PKLPIJEF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00170	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00176	33 c0		 xor	 eax, eax
$LN26@PyCodec_Ba:
  00178	48 8b 44 24 60	 mov	 rax, QWORD PTR object$21135[rsp]
  0017d	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00180	c1 e8 02	 shr	 eax, 2
  00183	83 e0 07	 and	 eax, 7
  00186	83 f8 01	 cmp	 eax, 1
  00189	0f 85 44 01 00
	00		 jne	 $LN55@PyCodec_Ba
  0018f	48 8b 44 24 60	 mov	 rax, QWORD PTR object$21135[rsp]
  00194	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00198	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0019e	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  001a3	85 c0		 test	 eax, eax
  001a5	75 1c		 jne	 SHORT $LN27@PyCodec_Ba
  001a7	41 b8 44 03 00
	00		 mov	 r8d, 836		; 00000344H
  001ad	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  001b4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@NAODBNMM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  001bb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001c1	33 c0		 xor	 eax, eax
$LN27@PyCodec_Ba:
  001c3	48 8b 44 24 60	 mov	 rax, QWORD PTR object$21135[rsp]
  001c8	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  001cb	c1 e8 05	 shr	 eax, 5
  001ce	83 e0 01	 and	 eax, 1
  001d1	85 c0		 test	 eax, eax
  001d3	0f 84 a2 00 00
	00		 je	 $LN33@PyCodec_Ba
  001d9	48 8b 44 24 60	 mov	 rax, QWORD PTR object$21135[rsp]
  001de	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  001e2	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  001e8	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  001ed	85 c0		 test	 eax, eax
  001ef	75 1c		 jne	 SHORT $LN28@PyCodec_Ba
  001f1	41 b8 44 03 00
	00		 mov	 r8d, 836		; 00000344H
  001f7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  001fe	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@NAODBNMM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00205	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0020b	33 c0		 xor	 eax, eax
$LN28@PyCodec_Ba:
  0020d	48 8b 44 24 60	 mov	 rax, QWORD PTR object$21135[rsp]
  00212	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00215	c1 e8 07	 shr	 eax, 7
  00218	83 e0 01	 and	 eax, 1
  0021b	85 c0		 test	 eax, eax
  0021d	75 1c		 jne	 SHORT $LN29@PyCodec_Ba
  0021f	41 b8 44 03 00
	00		 mov	 r8d, 836		; 00000344H
  00225	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  0022c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DK@PKLPIJEF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00233	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00239	33 c0		 xor	 eax, eax
$LN29@PyCodec_Ba:
  0023b	48 8b 44 24 60	 mov	 rax, QWORD PTR object$21135[rsp]
  00240	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00243	c1 e8 06	 shr	 eax, 6
  00246	83 e0 01	 and	 eax, 1
  00249	85 c0		 test	 eax, eax
  0024b	74 12		 je	 SHORT $LN30@PyCodec_Ba
  0024d	48 8b 44 24 60	 mov	 rax, QWORD PTR object$21135[rsp]
  00252	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  00258	48 89 44 24 68	 mov	 QWORD PTR tv182[rsp], rax
  0025d	eb 10		 jmp	 SHORT $LN31@PyCodec_Ba
$LN30@PyCodec_Ba:
  0025f	48 8b 44 24 60	 mov	 rax, QWORD PTR object$21135[rsp]
  00264	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  0026a	48 89 44 24 68	 mov	 QWORD PTR tv182[rsp], rax
$LN31@PyCodec_Ba:
  0026f	48 8b 44 24 68	 mov	 rax, QWORD PTR tv182[rsp]
  00274	48 89 44 24 70	 mov	 QWORD PTR tv191[rsp], rax
  00279	eb 3c		 jmp	 SHORT $LN34@PyCodec_Ba
$LN33@PyCodec_Ba:
  0027b	48 8b 44 24 60	 mov	 rax, QWORD PTR object$21135[rsp]
  00280	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  00288	75 1c		 jne	 SHORT $LN32@PyCodec_Ba
  0028a	41 b8 44 03 00
	00		 mov	 r8d, 836		; 00000344H
  00290	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  00297	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FC@FELCKDKN@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO@
  0029e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  002a4	33 c0		 xor	 eax, eax
$LN32@PyCodec_Ba:
  002a6	48 8b 44 24 60	 mov	 rax, QWORD PTR object$21135[rsp]
  002ab	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  002b2	48 89 44 24 70	 mov	 QWORD PTR tv191[rsp], rax
$LN34@PyCodec_Ba:
  002b7	48 8b 44 24 38	 mov	 rax, QWORD PTR i$21136[rsp]
  002bc	48 8b 4c 24 70	 mov	 rcx, QWORD PTR tv191[rsp]
  002c1	48 03 c8	 add	 rcx, rax
  002c4	48 8b c1	 mov	 rax, rcx
  002c7	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  002ca	89 44 24 78	 mov	 DWORD PTR tv306[rsp], eax
  002ce	e9 26 03 00 00	 jmp	 $LN56@PyCodec_Ba
$LN55@PyCodec_Ba:
  002d3	48 8b 44 24 60	 mov	 rax, QWORD PTR object$21135[rsp]
  002d8	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  002dc	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  002e2	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  002e7	85 c0		 test	 eax, eax
  002e9	75 1c		 jne	 SHORT $LN35@PyCodec_Ba
  002eb	41 b8 44 03 00
	00		 mov	 r8d, 836		; 00000344H
  002f1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  002f8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@NAODBNMM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  002ff	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00305	33 c0		 xor	 eax, eax
$LN35@PyCodec_Ba:
  00307	48 8b 44 24 60	 mov	 rax, QWORD PTR object$21135[rsp]
  0030c	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0030f	c1 e8 07	 shr	 eax, 7
  00312	83 e0 01	 and	 eax, 1
  00315	85 c0		 test	 eax, eax
  00317	75 1c		 jne	 SHORT $LN36@PyCodec_Ba
  00319	41 b8 44 03 00
	00		 mov	 r8d, 836		; 00000344H
  0031f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  00326	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DK@PKLPIJEF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  0032d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00333	33 c0		 xor	 eax, eax
$LN36@PyCodec_Ba:
  00335	48 8b 44 24 60	 mov	 rax, QWORD PTR object$21135[rsp]
  0033a	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0033d	c1 e8 02	 shr	 eax, 2
  00340	83 e0 07	 and	 eax, 7
  00343	83 f8 02	 cmp	 eax, 2
  00346	0f 85 54 01 00
	00		 jne	 $LN53@PyCodec_Ba
  0034c	48 8b 44 24 60	 mov	 rax, QWORD PTR object$21135[rsp]
  00351	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00355	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0035b	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00360	85 c0		 test	 eax, eax
  00362	75 1c		 jne	 SHORT $LN37@PyCodec_Ba
  00364	41 b8 44 03 00
	00		 mov	 r8d, 836		; 00000344H
  0036a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  00371	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@NAODBNMM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00378	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0037e	33 c0		 xor	 eax, eax
$LN37@PyCodec_Ba:
  00380	48 8b 44 24 60	 mov	 rax, QWORD PTR object$21135[rsp]
  00385	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00388	c1 e8 05	 shr	 eax, 5
  0038b	83 e0 01	 and	 eax, 1
  0038e	85 c0		 test	 eax, eax
  00390	0f 84 ae 00 00
	00		 je	 $LN43@PyCodec_Ba
  00396	48 8b 44 24 60	 mov	 rax, QWORD PTR object$21135[rsp]
  0039b	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0039f	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  003a5	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  003aa	85 c0		 test	 eax, eax
  003ac	75 1c		 jne	 SHORT $LN38@PyCodec_Ba
  003ae	41 b8 44 03 00
	00		 mov	 r8d, 836		; 00000344H
  003b4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  003bb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@NAODBNMM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  003c2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  003c8	33 c0		 xor	 eax, eax
$LN38@PyCodec_Ba:
  003ca	48 8b 44 24 60	 mov	 rax, QWORD PTR object$21135[rsp]
  003cf	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  003d2	c1 e8 07	 shr	 eax, 7
  003d5	83 e0 01	 and	 eax, 1
  003d8	85 c0		 test	 eax, eax
  003da	75 1c		 jne	 SHORT $LN39@PyCodec_Ba
  003dc	41 b8 44 03 00
	00		 mov	 r8d, 836		; 00000344H
  003e2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  003e9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DK@PKLPIJEF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  003f0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  003f6	33 c0		 xor	 eax, eax
$LN39@PyCodec_Ba:
  003f8	48 8b 44 24 60	 mov	 rax, QWORD PTR object$21135[rsp]
  003fd	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00400	c1 e8 06	 shr	 eax, 6
  00403	83 e0 01	 and	 eax, 1
  00406	85 c0		 test	 eax, eax
  00408	74 15		 je	 SHORT $LN40@PyCodec_Ba
  0040a	48 8b 44 24 60	 mov	 rax, QWORD PTR object$21135[rsp]
  0040f	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  00415	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv247[rsp], rax
  0041d	eb 13		 jmp	 SHORT $LN41@PyCodec_Ba
$LN40@PyCodec_Ba:
  0041f	48 8b 44 24 60	 mov	 rax, QWORD PTR object$21135[rsp]
  00424	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  0042a	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv247[rsp], rax
$LN41@PyCodec_Ba:
  00432	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR tv247[rsp]
  0043a	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv256[rsp], rax
  00442	eb 3f		 jmp	 SHORT $LN44@PyCodec_Ba
$LN43@PyCodec_Ba:
  00444	48 8b 44 24 60	 mov	 rax, QWORD PTR object$21135[rsp]
  00449	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  00451	75 1c		 jne	 SHORT $LN42@PyCodec_Ba
  00453	41 b8 44 03 00
	00		 mov	 r8d, 836		; 00000344H
  00459	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  00460	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FC@FELCKDKN@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO@
  00467	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0046d	33 c0		 xor	 eax, eax
$LN42@PyCodec_Ba:
  0046f	48 8b 44 24 60	 mov	 rax, QWORD PTR object$21135[rsp]
  00474	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  0047b	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv256[rsp], rax
$LN44@PyCodec_Ba:
  00483	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR tv256[rsp]
  0048b	48 8b 4c 24 38	 mov	 rcx, QWORD PTR i$21136[rsp]
  00490	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  00494	89 84 24 90 00
	00 00		 mov	 DWORD PTR tv305[rsp], eax
  0049b	e9 4e 01 00 00	 jmp	 $LN54@PyCodec_Ba
$LN53@PyCodec_Ba:
  004a0	48 8b 44 24 60	 mov	 rax, QWORD PTR object$21135[rsp]
  004a5	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  004a9	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  004af	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  004b4	85 c0		 test	 eax, eax
  004b6	75 1c		 jne	 SHORT $LN45@PyCodec_Ba
  004b8	41 b8 44 03 00
	00		 mov	 r8d, 836		; 00000344H
  004be	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  004c5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@NAODBNMM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  004cc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  004d2	33 c0		 xor	 eax, eax
$LN45@PyCodec_Ba:
  004d4	48 8b 44 24 60	 mov	 rax, QWORD PTR object$21135[rsp]
  004d9	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  004dc	c1 e8 05	 shr	 eax, 5
  004df	83 e0 01	 and	 eax, 1
  004e2	85 c0		 test	 eax, eax
  004e4	0f 84 ae 00 00
	00		 je	 $LN51@PyCodec_Ba
  004ea	48 8b 44 24 60	 mov	 rax, QWORD PTR object$21135[rsp]
  004ef	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  004f3	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  004f9	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  004fe	85 c0		 test	 eax, eax
  00500	75 1c		 jne	 SHORT $LN46@PyCodec_Ba
  00502	41 b8 44 03 00
	00		 mov	 r8d, 836		; 00000344H
  00508	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  0050f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@NAODBNMM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00516	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0051c	33 c0		 xor	 eax, eax
$LN46@PyCodec_Ba:
  0051e	48 8b 44 24 60	 mov	 rax, QWORD PTR object$21135[rsp]
  00523	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00526	c1 e8 07	 shr	 eax, 7
  00529	83 e0 01	 and	 eax, 1
  0052c	85 c0		 test	 eax, eax
  0052e	75 1c		 jne	 SHORT $LN47@PyCodec_Ba
  00530	41 b8 44 03 00
	00		 mov	 r8d, 836		; 00000344H
  00536	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  0053d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DK@PKLPIJEF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00544	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0054a	33 c0		 xor	 eax, eax
$LN47@PyCodec_Ba:
  0054c	48 8b 44 24 60	 mov	 rax, QWORD PTR object$21135[rsp]
  00551	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00554	c1 e8 06	 shr	 eax, 6
  00557	83 e0 01	 and	 eax, 1
  0055a	85 c0		 test	 eax, eax
  0055c	74 15		 je	 SHORT $LN48@PyCodec_Ba
  0055e	48 8b 44 24 60	 mov	 rax, QWORD PTR object$21135[rsp]
  00563	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  00569	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR tv293[rsp], rax
  00571	eb 13		 jmp	 SHORT $LN49@PyCodec_Ba
$LN48@PyCodec_Ba:
  00573	48 8b 44 24 60	 mov	 rax, QWORD PTR object$21135[rsp]
  00578	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  0057e	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR tv293[rsp], rax
$LN49@PyCodec_Ba:
  00586	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR tv293[rsp]
  0058e	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR tv302[rsp], rax
  00596	eb 3f		 jmp	 SHORT $LN52@PyCodec_Ba
$LN51@PyCodec_Ba:
  00598	48 8b 44 24 60	 mov	 rax, QWORD PTR object$21135[rsp]
  0059d	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  005a5	75 1c		 jne	 SHORT $LN50@PyCodec_Ba
  005a7	41 b8 44 03 00
	00		 mov	 r8d, 836		; 00000344H
  005ad	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  005b4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FC@FELCKDKN@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO@
  005bb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  005c1	33 c0		 xor	 eax, eax
$LN50@PyCodec_Ba:
  005c3	48 8b 44 24 60	 mov	 rax, QWORD PTR object$21135[rsp]
  005c8	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  005cf	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR tv302[rsp], rax
$LN52@PyCodec_Ba:
  005d7	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR tv302[rsp]
  005df	48 8b 4c 24 38	 mov	 rcx, QWORD PTR i$21136[rsp]
  005e4	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  005e7	89 84 24 90 00
	00 00		 mov	 DWORD PTR tv305[rsp], eax
$LN54@PyCodec_Ba:
  005ee	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR tv305[rsp]
  005f5	89 44 24 78	 mov	 DWORD PTR tv306[rsp], eax
$LN56@PyCodec_Ba:
  005f9	8b 44 24 78	 mov	 eax, DWORD PTR tv306[rsp]
  005fd	89 44 24 58	 mov	 DWORD PTR c$21142[rsp], eax

; 837  :             if (c >= 0x10000) {

  00601	81 7c 24 58 00
	00 01 00	 cmp	 DWORD PTR c$21142[rsp], 65536 ; 00010000H
  00609	72 0d		 jb	 SHORT $LN13@PyCodec_Ba

; 838  :                 ressize += 1+1+8;

  0060b	8b 44 24 20	 mov	 eax, DWORD PTR ressize$21141[rsp]
  0060f	83 c0 0a	 add	 eax, 10
  00612	89 44 24 20	 mov	 DWORD PTR ressize$21141[rsp], eax
  00616	eb 22		 jmp	 SHORT $LN12@PyCodec_Ba
$LN13@PyCodec_Ba:

; 839  :             }
; 840  :             else if (c >= 0x100) {

  00618	81 7c 24 58 00
	01 00 00	 cmp	 DWORD PTR c$21142[rsp], 256 ; 00000100H
  00620	72 0d		 jb	 SHORT $LN11@PyCodec_Ba

; 841  :                 ressize += 1+1+4;

  00622	8b 44 24 20	 mov	 eax, DWORD PTR ressize$21141[rsp]
  00626	83 c0 06	 add	 eax, 6
  00629	89 44 24 20	 mov	 DWORD PTR ressize$21141[rsp], eax

; 842  :             }
; 843  :             else

  0062d	eb 0b		 jmp	 SHORT $LN10@PyCodec_Ba
$LN11@PyCodec_Ba:

; 844  :                 ressize += 1+1+2;

  0062f	8b 44 24 20	 mov	 eax, DWORD PTR ressize$21141[rsp]
  00633	83 c0 04	 add	 eax, 4
  00636	89 44 24 20	 mov	 DWORD PTR ressize$21141[rsp], eax
$LN10@PyCodec_Ba:
$LN12@PyCodec_Ba:

; 845  :         }

  0063a	e9 58 fa ff ff	 jmp	 $LN15@PyCodec_Ba
$LN14@PyCodec_Ba:

; 846  :         res = PyUnicode_New(ressize, 127);

  0063f	48 63 44 24 20	 movsxd	 rax, DWORD PTR ressize$21141[rsp]
  00644	ba 7f 00 00 00	 mov	 edx, 127		; 0000007fH
  00649	48 8b c8	 mov	 rcx, rax
  0064c	e8 00 00 00 00	 call	 PyUnicode_New
  00651	48 89 44 24 28	 mov	 QWORD PTR res$21139[rsp], rax

; 847  :         if (res==NULL)

  00656	48 83 7c 24 28
	00		 cmp	 QWORD PTR res$21139[rsp], 0
  0065c	75 07		 jne	 SHORT $LN9@PyCodec_Ba

; 848  :             return NULL;

  0065e	33 c0		 xor	 eax, eax
  00660	e9 64 09 00 00	 jmp	 $LN21@PyCodec_Ba
$LN9@PyCodec_Ba:

; 849  :         for (i = start, outp = PyUnicode_1BYTE_DATA(res);
; 850  :             i < end; ++i) {

  00665	48 8b 44 24 50	 mov	 rax, QWORD PTR start$21137[rsp]
  0066a	48 89 44 24 38	 mov	 QWORD PTR i$21136[rsp], rax
  0066f	48 8b 44 24 28	 mov	 rax, QWORD PTR res$21139[rsp]
  00674	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00678	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0067e	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00683	85 c0		 test	 eax, eax
  00685	75 1c		 jne	 SHORT $LN57@PyCodec_Ba
  00687	41 b8 51 03 00
	00		 mov	 r8d, 849		; 00000351H
  0068d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  00694	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@FJJJNMAO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAr?$AAe?$AAs?$AA?$CJ?$AA?$AA@
  0069b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  006a1	33 c0		 xor	 eax, eax
$LN57@PyCodec_Ba:
  006a3	48 8b 44 24 28	 mov	 rax, QWORD PTR res$21139[rsp]
  006a8	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  006ab	c1 e8 05	 shr	 eax, 5
  006ae	83 e0 01	 and	 eax, 1
  006b1	85 c0		 test	 eax, eax
  006b3	0f 84 ae 00 00
	00		 je	 $LN63@PyCodec_Ba
  006b9	48 8b 44 24 28	 mov	 rax, QWORD PTR res$21139[rsp]
  006be	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  006c2	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  006c8	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  006cd	85 c0		 test	 eax, eax
  006cf	75 1c		 jne	 SHORT $LN58@PyCodec_Ba
  006d1	41 b8 51 03 00
	00		 mov	 r8d, 849		; 00000351H
  006d7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  006de	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@FJJJNMAO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAr?$AAe?$AAs?$AA?$CJ?$AA?$AA@
  006e5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  006eb	33 c0		 xor	 eax, eax
$LN58@PyCodec_Ba:
  006ed	48 8b 44 24 28	 mov	 rax, QWORD PTR res$21139[rsp]
  006f2	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  006f5	c1 e8 07	 shr	 eax, 7
  006f8	83 e0 01	 and	 eax, 1
  006fb	85 c0		 test	 eax, eax
  006fd	75 1c		 jne	 SHORT $LN59@PyCodec_Ba
  006ff	41 b8 51 03 00
	00		 mov	 r8d, 849		; 00000351H
  00705	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  0070c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@BOCADMCE@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAr?$AAe?$AAs?$AA?$CJ?$AA?$AA@
  00713	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00719	33 c0		 xor	 eax, eax
$LN59@PyCodec_Ba:
  0071b	48 8b 44 24 28	 mov	 rax, QWORD PTR res$21139[rsp]
  00720	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00723	c1 e8 06	 shr	 eax, 6
  00726	83 e0 01	 and	 eax, 1
  00729	85 c0		 test	 eax, eax
  0072b	74 15		 je	 SHORT $LN60@PyCodec_Ba
  0072d	48 8b 44 24 28	 mov	 rax, QWORD PTR res$21139[rsp]
  00732	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  00738	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR tv350[rsp], rax
  00740	eb 13		 jmp	 SHORT $LN61@PyCodec_Ba
$LN60@PyCodec_Ba:
  00742	48 8b 44 24 28	 mov	 rax, QWORD PTR res$21139[rsp]
  00747	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  0074d	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR tv350[rsp], rax
$LN61@PyCodec_Ba:
  00755	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR tv350[rsp]
  0075d	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR tv359[rsp], rax
  00765	eb 3f		 jmp	 SHORT $LN64@PyCodec_Ba
$LN63@PyCodec_Ba:
  00767	48 8b 44 24 28	 mov	 rax, QWORD PTR res$21139[rsp]
  0076c	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  00774	75 1c		 jne	 SHORT $LN62@PyCodec_Ba
  00776	41 b8 51 03 00
	00		 mov	 r8d, 849		; 00000351H
  0077c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  00783	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EI@ILJBECKM@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AAr?$AAe?$AAs?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt?$AAa?$AA?4@
  0078a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00790	33 c0		 xor	 eax, eax
$LN62@PyCodec_Ba:
  00792	48 8b 44 24 28	 mov	 rax, QWORD PTR res$21139[rsp]
  00797	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  0079e	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR tv359[rsp], rax
$LN64@PyCodec_Ba:
  007a6	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR tv359[rsp]
  007ae	48 89 44 24 30	 mov	 QWORD PTR outp$21140[rsp], rax
  007b3	eb 0d		 jmp	 SHORT $LN8@PyCodec_Ba
$LN7@PyCodec_Ba:
  007b5	48 8b 44 24 38	 mov	 rax, QWORD PTR i$21136[rsp]
  007ba	48 ff c0	 inc	 rax
  007bd	48 89 44 24 38	 mov	 QWORD PTR i$21136[rsp], rax
$LN8@PyCodec_Ba:
  007c2	48 8b 44 24 48	 mov	 rax, QWORD PTR end$21138[rsp]
  007c7	48 39 44 24 38	 cmp	 QWORD PTR i$21136[rsp], rax
  007cc	0f 8d 8b 07 00
	00		 jge	 $LN6@PyCodec_Ba

; 851  :             c = PyUnicode_READ_CHAR(object, i);

  007d2	48 8b 44 24 60	 mov	 rax, QWORD PTR object$21135[rsp]
  007d7	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  007db	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  007e1	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  007e6	85 c0		 test	 eax, eax
  007e8	75 1c		 jne	 SHORT $LN65@PyCodec_Ba
  007ea	41 b8 53 03 00
	00		 mov	 r8d, 851		; 00000353H
  007f0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  007f7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@FJFAKGEG@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$AA@
  007fe	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00804	33 c0		 xor	 eax, eax
$LN65@PyCodec_Ba:
  00806	48 8b 44 24 60	 mov	 rax, QWORD PTR object$21135[rsp]
  0080b	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0080e	c1 e8 07	 shr	 eax, 7
  00811	83 e0 01	 and	 eax, 1
  00814	85 c0		 test	 eax, eax
  00816	75 1c		 jne	 SHORT $LN66@PyCodec_Ba
  00818	41 b8 53 03 00
	00		 mov	 r8d, 851		; 00000353H
  0081e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  00825	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DG@MCBMNNJM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$AA@
  0082c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00832	33 c0		 xor	 eax, eax
$LN66@PyCodec_Ba:
  00834	48 8b 44 24 60	 mov	 rax, QWORD PTR object$21135[rsp]
  00839	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0083d	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00843	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00848	85 c0		 test	 eax, eax
  0084a	75 1c		 jne	 SHORT $LN67@PyCodec_Ba
  0084c	41 b8 53 03 00
	00		 mov	 r8d, 851		; 00000353H
  00852	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  00859	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@NAODBNMM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00860	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00866	33 c0		 xor	 eax, eax
$LN67@PyCodec_Ba:
  00868	48 8b 44 24 60	 mov	 rax, QWORD PTR object$21135[rsp]
  0086d	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00870	c1 e8 07	 shr	 eax, 7
  00873	83 e0 01	 and	 eax, 1
  00876	85 c0		 test	 eax, eax
  00878	75 1c		 jne	 SHORT $LN68@PyCodec_Ba
  0087a	41 b8 53 03 00
	00		 mov	 r8d, 851		; 00000353H
  00880	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  00887	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DK@PKLPIJEF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  0088e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00894	33 c0		 xor	 eax, eax
$LN68@PyCodec_Ba:
  00896	48 8b 44 24 60	 mov	 rax, QWORD PTR object$21135[rsp]
  0089b	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0089e	c1 e8 02	 shr	 eax, 2
  008a1	83 e0 07	 and	 eax, 7
  008a4	83 f8 01	 cmp	 eax, 1
  008a7	0f 85 59 01 00
	00		 jne	 $LN97@PyCodec_Ba
  008ad	48 8b 44 24 60	 mov	 rax, QWORD PTR object$21135[rsp]
  008b2	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  008b6	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  008bc	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  008c1	85 c0		 test	 eax, eax
  008c3	75 1c		 jne	 SHORT $LN69@PyCodec_Ba
  008c5	41 b8 53 03 00
	00		 mov	 r8d, 851		; 00000353H
  008cb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  008d2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@NAODBNMM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  008d9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  008df	33 c0		 xor	 eax, eax
$LN69@PyCodec_Ba:
  008e1	48 8b 44 24 60	 mov	 rax, QWORD PTR object$21135[rsp]
  008e6	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  008e9	c1 e8 05	 shr	 eax, 5
  008ec	83 e0 01	 and	 eax, 1
  008ef	85 c0		 test	 eax, eax
  008f1	0f 84 ae 00 00
	00		 je	 $LN75@PyCodec_Ba
  008f7	48 8b 44 24 60	 mov	 rax, QWORD PTR object$21135[rsp]
  008fc	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00900	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00906	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0090b	85 c0		 test	 eax, eax
  0090d	75 1c		 jne	 SHORT $LN70@PyCodec_Ba
  0090f	41 b8 53 03 00
	00		 mov	 r8d, 851		; 00000353H
  00915	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  0091c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@NAODBNMM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00923	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00929	33 c0		 xor	 eax, eax
$LN70@PyCodec_Ba:
  0092b	48 8b 44 24 60	 mov	 rax, QWORD PTR object$21135[rsp]
  00930	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00933	c1 e8 07	 shr	 eax, 7
  00936	83 e0 01	 and	 eax, 1
  00939	85 c0		 test	 eax, eax
  0093b	75 1c		 jne	 SHORT $LN71@PyCodec_Ba
  0093d	41 b8 53 03 00
	00		 mov	 r8d, 851		; 00000353H
  00943	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  0094a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DK@PKLPIJEF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00951	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00957	33 c0		 xor	 eax, eax
$LN71@PyCodec_Ba:
  00959	48 8b 44 24 60	 mov	 rax, QWORD PTR object$21135[rsp]
  0095e	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00961	c1 e8 06	 shr	 eax, 6
  00964	83 e0 01	 and	 eax, 1
  00967	85 c0		 test	 eax, eax
  00969	74 15		 je	 SHORT $LN72@PyCodec_Ba
  0096b	48 8b 44 24 60	 mov	 rax, QWORD PTR object$21135[rsp]
  00970	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  00976	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR tv431[rsp], rax
  0097e	eb 13		 jmp	 SHORT $LN73@PyCodec_Ba
$LN72@PyCodec_Ba:
  00980	48 8b 44 24 60	 mov	 rax, QWORD PTR object$21135[rsp]
  00985	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  0098b	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR tv431[rsp], rax
$LN73@PyCodec_Ba:
  00993	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR tv431[rsp]
  0099b	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR tv440[rsp], rax
  009a3	eb 3f		 jmp	 SHORT $LN76@PyCodec_Ba
$LN75@PyCodec_Ba:
  009a5	48 8b 44 24 60	 mov	 rax, QWORD PTR object$21135[rsp]
  009aa	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  009b2	75 1c		 jne	 SHORT $LN74@PyCodec_Ba
  009b4	41 b8 53 03 00
	00		 mov	 r8d, 851		; 00000353H
  009ba	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  009c1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FC@FELCKDKN@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO@
  009c8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  009ce	33 c0		 xor	 eax, eax
$LN74@PyCodec_Ba:
  009d0	48 8b 44 24 60	 mov	 rax, QWORD PTR object$21135[rsp]
  009d5	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  009dc	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR tv440[rsp], rax
$LN76@PyCodec_Ba:
  009e4	48 8b 44 24 38	 mov	 rax, QWORD PTR i$21136[rsp]
  009e9	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR tv440[rsp]
  009f1	48 03 c8	 add	 rcx, rax
  009f4	48 8b c1	 mov	 rax, rcx
  009f7	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  009fa	89 84 24 c8 00
	00 00		 mov	 DWORD PTR tv555[rsp], eax
  00a01	e9 29 03 00 00	 jmp	 $LN98@PyCodec_Ba
$LN97@PyCodec_Ba:
  00a06	48 8b 44 24 60	 mov	 rax, QWORD PTR object$21135[rsp]
  00a0b	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00a0f	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00a15	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00a1a	85 c0		 test	 eax, eax
  00a1c	75 1c		 jne	 SHORT $LN77@PyCodec_Ba
  00a1e	41 b8 53 03 00
	00		 mov	 r8d, 851		; 00000353H
  00a24	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  00a2b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@NAODBNMM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00a32	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00a38	33 c0		 xor	 eax, eax
$LN77@PyCodec_Ba:
  00a3a	48 8b 44 24 60	 mov	 rax, QWORD PTR object$21135[rsp]
  00a3f	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00a42	c1 e8 07	 shr	 eax, 7
  00a45	83 e0 01	 and	 eax, 1
  00a48	85 c0		 test	 eax, eax
  00a4a	75 1c		 jne	 SHORT $LN78@PyCodec_Ba
  00a4c	41 b8 53 03 00
	00		 mov	 r8d, 851		; 00000353H
  00a52	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  00a59	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DK@PKLPIJEF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00a60	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00a66	33 c0		 xor	 eax, eax
$LN78@PyCodec_Ba:
  00a68	48 8b 44 24 60	 mov	 rax, QWORD PTR object$21135[rsp]
  00a6d	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00a70	c1 e8 02	 shr	 eax, 2
  00a73	83 e0 07	 and	 eax, 7
  00a76	83 f8 02	 cmp	 eax, 2
  00a79	0f 85 54 01 00
	00		 jne	 $LN95@PyCodec_Ba
  00a7f	48 8b 44 24 60	 mov	 rax, QWORD PTR object$21135[rsp]
  00a84	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00a88	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00a8e	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00a93	85 c0		 test	 eax, eax
  00a95	75 1c		 jne	 SHORT $LN79@PyCodec_Ba
  00a97	41 b8 53 03 00
	00		 mov	 r8d, 851		; 00000353H
  00a9d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  00aa4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@NAODBNMM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00aab	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00ab1	33 c0		 xor	 eax, eax
$LN79@PyCodec_Ba:
  00ab3	48 8b 44 24 60	 mov	 rax, QWORD PTR object$21135[rsp]
  00ab8	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00abb	c1 e8 05	 shr	 eax, 5
  00abe	83 e0 01	 and	 eax, 1
  00ac1	85 c0		 test	 eax, eax
  00ac3	0f 84 ae 00 00
	00		 je	 $LN85@PyCodec_Ba
  00ac9	48 8b 44 24 60	 mov	 rax, QWORD PTR object$21135[rsp]
  00ace	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00ad2	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00ad8	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00add	85 c0		 test	 eax, eax
  00adf	75 1c		 jne	 SHORT $LN80@PyCodec_Ba
  00ae1	41 b8 53 03 00
	00		 mov	 r8d, 851		; 00000353H
  00ae7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  00aee	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@NAODBNMM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00af5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00afb	33 c0		 xor	 eax, eax
$LN80@PyCodec_Ba:
  00afd	48 8b 44 24 60	 mov	 rax, QWORD PTR object$21135[rsp]
  00b02	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00b05	c1 e8 07	 shr	 eax, 7
  00b08	83 e0 01	 and	 eax, 1
  00b0b	85 c0		 test	 eax, eax
  00b0d	75 1c		 jne	 SHORT $LN81@PyCodec_Ba
  00b0f	41 b8 53 03 00
	00		 mov	 r8d, 851		; 00000353H
  00b15	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  00b1c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DK@PKLPIJEF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00b23	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00b29	33 c0		 xor	 eax, eax
$LN81@PyCodec_Ba:
  00b2b	48 8b 44 24 60	 mov	 rax, QWORD PTR object$21135[rsp]
  00b30	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00b33	c1 e8 06	 shr	 eax, 6
  00b36	83 e0 01	 and	 eax, 1
  00b39	85 c0		 test	 eax, eax
  00b3b	74 15		 je	 SHORT $LN82@PyCodec_Ba
  00b3d	48 8b 44 24 60	 mov	 rax, QWORD PTR object$21135[rsp]
  00b42	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  00b48	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR tv496[rsp], rax
  00b50	eb 13		 jmp	 SHORT $LN83@PyCodec_Ba
$LN82@PyCodec_Ba:
  00b52	48 8b 44 24 60	 mov	 rax, QWORD PTR object$21135[rsp]
  00b57	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  00b5d	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR tv496[rsp], rax
$LN83@PyCodec_Ba:
  00b65	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR tv496[rsp]
  00b6d	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR tv505[rsp], rax
  00b75	eb 3f		 jmp	 SHORT $LN86@PyCodec_Ba
$LN85@PyCodec_Ba:
  00b77	48 8b 44 24 60	 mov	 rax, QWORD PTR object$21135[rsp]
  00b7c	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  00b84	75 1c		 jne	 SHORT $LN84@PyCodec_Ba
  00b86	41 b8 53 03 00
	00		 mov	 r8d, 851		; 00000353H
  00b8c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  00b93	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FC@FELCKDKN@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO@
  00b9a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00ba0	33 c0		 xor	 eax, eax
$LN84@PyCodec_Ba:
  00ba2	48 8b 44 24 60	 mov	 rax, QWORD PTR object$21135[rsp]
  00ba7	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  00bae	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR tv505[rsp], rax
$LN86@PyCodec_Ba:
  00bb6	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR tv505[rsp]
  00bbe	48 8b 4c 24 38	 mov	 rcx, QWORD PTR i$21136[rsp]
  00bc3	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  00bc7	89 84 24 e0 00
	00 00		 mov	 DWORD PTR tv554[rsp], eax
  00bce	e9 4e 01 00 00	 jmp	 $LN96@PyCodec_Ba
$LN95@PyCodec_Ba:
  00bd3	48 8b 44 24 60	 mov	 rax, QWORD PTR object$21135[rsp]
  00bd8	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00bdc	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00be2	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00be7	85 c0		 test	 eax, eax
  00be9	75 1c		 jne	 SHORT $LN87@PyCodec_Ba
  00beb	41 b8 53 03 00
	00		 mov	 r8d, 851		; 00000353H
  00bf1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  00bf8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@NAODBNMM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00bff	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00c05	33 c0		 xor	 eax, eax
$LN87@PyCodec_Ba:
  00c07	48 8b 44 24 60	 mov	 rax, QWORD PTR object$21135[rsp]
  00c0c	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00c0f	c1 e8 05	 shr	 eax, 5
  00c12	83 e0 01	 and	 eax, 1
  00c15	85 c0		 test	 eax, eax
  00c17	0f 84 ae 00 00
	00		 je	 $LN93@PyCodec_Ba
  00c1d	48 8b 44 24 60	 mov	 rax, QWORD PTR object$21135[rsp]
  00c22	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00c26	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00c2c	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00c31	85 c0		 test	 eax, eax
  00c33	75 1c		 jne	 SHORT $LN88@PyCodec_Ba
  00c35	41 b8 53 03 00
	00		 mov	 r8d, 851		; 00000353H
  00c3b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  00c42	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@NAODBNMM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00c49	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00c4f	33 c0		 xor	 eax, eax
$LN88@PyCodec_Ba:
  00c51	48 8b 44 24 60	 mov	 rax, QWORD PTR object$21135[rsp]
  00c56	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00c59	c1 e8 07	 shr	 eax, 7
  00c5c	83 e0 01	 and	 eax, 1
  00c5f	85 c0		 test	 eax, eax
  00c61	75 1c		 jne	 SHORT $LN89@PyCodec_Ba
  00c63	41 b8 53 03 00
	00		 mov	 r8d, 851		; 00000353H
  00c69	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  00c70	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DK@PKLPIJEF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00c77	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00c7d	33 c0		 xor	 eax, eax
$LN89@PyCodec_Ba:
  00c7f	48 8b 44 24 60	 mov	 rax, QWORD PTR object$21135[rsp]
  00c84	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00c87	c1 e8 06	 shr	 eax, 6
  00c8a	83 e0 01	 and	 eax, 1
  00c8d	85 c0		 test	 eax, eax
  00c8f	74 15		 je	 SHORT $LN90@PyCodec_Ba
  00c91	48 8b 44 24 60	 mov	 rax, QWORD PTR object$21135[rsp]
  00c96	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  00c9c	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR tv542[rsp], rax
  00ca4	eb 13		 jmp	 SHORT $LN91@PyCodec_Ba
$LN90@PyCodec_Ba:
  00ca6	48 8b 44 24 60	 mov	 rax, QWORD PTR object$21135[rsp]
  00cab	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  00cb1	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR tv542[rsp], rax
$LN91@PyCodec_Ba:
  00cb9	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR tv542[rsp]
  00cc1	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR tv551[rsp], rax
  00cc9	eb 3f		 jmp	 SHORT $LN94@PyCodec_Ba
$LN93@PyCodec_Ba:
  00ccb	48 8b 44 24 60	 mov	 rax, QWORD PTR object$21135[rsp]
  00cd0	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  00cd8	75 1c		 jne	 SHORT $LN92@PyCodec_Ba
  00cda	41 b8 53 03 00
	00		 mov	 r8d, 851		; 00000353H
  00ce0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  00ce7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FC@FELCKDKN@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO@
  00cee	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00cf4	33 c0		 xor	 eax, eax
$LN92@PyCodec_Ba:
  00cf6	48 8b 44 24 60	 mov	 rax, QWORD PTR object$21135[rsp]
  00cfb	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  00d02	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR tv551[rsp], rax
$LN94@PyCodec_Ba:
  00d0a	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR tv551[rsp]
  00d12	48 8b 4c 24 38	 mov	 rcx, QWORD PTR i$21136[rsp]
  00d17	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  00d1a	89 84 24 e0 00
	00 00		 mov	 DWORD PTR tv554[rsp], eax
$LN96@PyCodec_Ba:
  00d21	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR tv554[rsp]
  00d28	89 84 24 c8 00
	00 00		 mov	 DWORD PTR tv555[rsp], eax
$LN98@PyCodec_Ba:
  00d2f	8b 84 24 c8 00
	00 00		 mov	 eax, DWORD PTR tv555[rsp]
  00d36	89 44 24 58	 mov	 DWORD PTR c$21142[rsp], eax

; 852  :             *outp++ = '\\';

  00d3a	48 8b 44 24 30	 mov	 rax, QWORD PTR outp$21140[rsp]
  00d3f	c6 00 5c	 mov	 BYTE PTR [rax], 92	; 0000005cH
  00d42	48 8b 44 24 30	 mov	 rax, QWORD PTR outp$21140[rsp]
  00d47	48 ff c0	 inc	 rax
  00d4a	48 89 44 24 30	 mov	 QWORD PTR outp$21140[rsp], rax

; 853  :             if (c >= 0x00010000) {

  00d4f	81 7c 24 58 00
	00 01 00	 cmp	 DWORD PTR c$21142[rsp], 65536 ; 00010000H
  00d57	0f 82 1c 01 00
	00		 jb	 $LN5@PyCodec_Ba

; 854  :                 *outp++ = 'U';

  00d5d	48 8b 44 24 30	 mov	 rax, QWORD PTR outp$21140[rsp]
  00d62	c6 00 55	 mov	 BYTE PTR [rax], 85	; 00000055H
  00d65	48 8b 44 24 30	 mov	 rax, QWORD PTR outp$21140[rsp]
  00d6a	48 ff c0	 inc	 rax
  00d6d	48 89 44 24 30	 mov	 QWORD PTR outp$21140[rsp], rax

; 855  :                 *outp++ = Py_hexdigits[(c>>28)&0xf];

  00d72	8b 44 24 58	 mov	 eax, DWORD PTR c$21142[rsp]
  00d76	c1 e8 1c	 shr	 eax, 28
  00d79	83 e0 0f	 and	 eax, 15
  00d7c	8b c0		 mov	 eax, eax
  00d7e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR outp$21140[rsp]
  00d83	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Py_hexdigits
  00d8a	0f b6 04 02	 movzx	 eax, BYTE PTR [rdx+rax]
  00d8e	88 01		 mov	 BYTE PTR [rcx], al
  00d90	48 8b 44 24 30	 mov	 rax, QWORD PTR outp$21140[rsp]
  00d95	48 ff c0	 inc	 rax
  00d98	48 89 44 24 30	 mov	 QWORD PTR outp$21140[rsp], rax

; 856  :                 *outp++ = Py_hexdigits[(c>>24)&0xf];

  00d9d	8b 44 24 58	 mov	 eax, DWORD PTR c$21142[rsp]
  00da1	c1 e8 18	 shr	 eax, 24
  00da4	83 e0 0f	 and	 eax, 15
  00da7	8b c0		 mov	 eax, eax
  00da9	48 8b 4c 24 30	 mov	 rcx, QWORD PTR outp$21140[rsp]
  00dae	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Py_hexdigits
  00db5	0f b6 04 02	 movzx	 eax, BYTE PTR [rdx+rax]
  00db9	88 01		 mov	 BYTE PTR [rcx], al
  00dbb	48 8b 44 24 30	 mov	 rax, QWORD PTR outp$21140[rsp]
  00dc0	48 ff c0	 inc	 rax
  00dc3	48 89 44 24 30	 mov	 QWORD PTR outp$21140[rsp], rax

; 857  :                 *outp++ = Py_hexdigits[(c>>20)&0xf];

  00dc8	8b 44 24 58	 mov	 eax, DWORD PTR c$21142[rsp]
  00dcc	c1 e8 14	 shr	 eax, 20
  00dcf	83 e0 0f	 and	 eax, 15
  00dd2	8b c0		 mov	 eax, eax
  00dd4	48 8b 4c 24 30	 mov	 rcx, QWORD PTR outp$21140[rsp]
  00dd9	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Py_hexdigits
  00de0	0f b6 04 02	 movzx	 eax, BYTE PTR [rdx+rax]
  00de4	88 01		 mov	 BYTE PTR [rcx], al
  00de6	48 8b 44 24 30	 mov	 rax, QWORD PTR outp$21140[rsp]
  00deb	48 ff c0	 inc	 rax
  00dee	48 89 44 24 30	 mov	 QWORD PTR outp$21140[rsp], rax

; 858  :                 *outp++ = Py_hexdigits[(c>>16)&0xf];

  00df3	8b 44 24 58	 mov	 eax, DWORD PTR c$21142[rsp]
  00df7	c1 e8 10	 shr	 eax, 16
  00dfa	83 e0 0f	 and	 eax, 15
  00dfd	8b c0		 mov	 eax, eax
  00dff	48 8b 4c 24 30	 mov	 rcx, QWORD PTR outp$21140[rsp]
  00e04	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Py_hexdigits
  00e0b	0f b6 04 02	 movzx	 eax, BYTE PTR [rdx+rax]
  00e0f	88 01		 mov	 BYTE PTR [rcx], al
  00e11	48 8b 44 24 30	 mov	 rax, QWORD PTR outp$21140[rsp]
  00e16	48 ff c0	 inc	 rax
  00e19	48 89 44 24 30	 mov	 QWORD PTR outp$21140[rsp], rax

; 859  :                 *outp++ = Py_hexdigits[(c>>12)&0xf];

  00e1e	8b 44 24 58	 mov	 eax, DWORD PTR c$21142[rsp]
  00e22	c1 e8 0c	 shr	 eax, 12
  00e25	83 e0 0f	 and	 eax, 15
  00e28	8b c0		 mov	 eax, eax
  00e2a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR outp$21140[rsp]
  00e2f	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Py_hexdigits
  00e36	0f b6 04 02	 movzx	 eax, BYTE PTR [rdx+rax]
  00e3a	88 01		 mov	 BYTE PTR [rcx], al
  00e3c	48 8b 44 24 30	 mov	 rax, QWORD PTR outp$21140[rsp]
  00e41	48 ff c0	 inc	 rax
  00e44	48 89 44 24 30	 mov	 QWORD PTR outp$21140[rsp], rax

; 860  :                 *outp++ = Py_hexdigits[(c>>8)&0xf];

  00e49	8b 44 24 58	 mov	 eax, DWORD PTR c$21142[rsp]
  00e4d	c1 e8 08	 shr	 eax, 8
  00e50	83 e0 0f	 and	 eax, 15
  00e53	8b c0		 mov	 eax, eax
  00e55	48 8b 4c 24 30	 mov	 rcx, QWORD PTR outp$21140[rsp]
  00e5a	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Py_hexdigits
  00e61	0f b6 04 02	 movzx	 eax, BYTE PTR [rdx+rax]
  00e65	88 01		 mov	 BYTE PTR [rcx], al
  00e67	48 8b 44 24 30	 mov	 rax, QWORD PTR outp$21140[rsp]
  00e6c	48 ff c0	 inc	 rax
  00e6f	48 89 44 24 30	 mov	 QWORD PTR outp$21140[rsp], rax
  00e74	e9 8c 00 00 00	 jmp	 $LN4@PyCodec_Ba
$LN5@PyCodec_Ba:

; 861  :             }
; 862  :             else if (c >= 0x100) {

  00e79	81 7c 24 58 00
	01 00 00	 cmp	 DWORD PTR c$21142[rsp], 256 ; 00000100H
  00e81	72 6d		 jb	 SHORT $LN3@PyCodec_Ba

; 863  :                 *outp++ = 'u';

  00e83	48 8b 44 24 30	 mov	 rax, QWORD PTR outp$21140[rsp]
  00e88	c6 00 75	 mov	 BYTE PTR [rax], 117	; 00000075H
  00e8b	48 8b 44 24 30	 mov	 rax, QWORD PTR outp$21140[rsp]
  00e90	48 ff c0	 inc	 rax
  00e93	48 89 44 24 30	 mov	 QWORD PTR outp$21140[rsp], rax

; 864  :                 *outp++ = Py_hexdigits[(c>>12)&0xf];

  00e98	8b 44 24 58	 mov	 eax, DWORD PTR c$21142[rsp]
  00e9c	c1 e8 0c	 shr	 eax, 12
  00e9f	83 e0 0f	 and	 eax, 15
  00ea2	8b c0		 mov	 eax, eax
  00ea4	48 8b 4c 24 30	 mov	 rcx, QWORD PTR outp$21140[rsp]
  00ea9	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Py_hexdigits
  00eb0	0f b6 04 02	 movzx	 eax, BYTE PTR [rdx+rax]
  00eb4	88 01		 mov	 BYTE PTR [rcx], al
  00eb6	48 8b 44 24 30	 mov	 rax, QWORD PTR outp$21140[rsp]
  00ebb	48 ff c0	 inc	 rax
  00ebe	48 89 44 24 30	 mov	 QWORD PTR outp$21140[rsp], rax

; 865  :                 *outp++ = Py_hexdigits[(c>>8)&0xf];

  00ec3	8b 44 24 58	 mov	 eax, DWORD PTR c$21142[rsp]
  00ec7	c1 e8 08	 shr	 eax, 8
  00eca	83 e0 0f	 and	 eax, 15
  00ecd	8b c0		 mov	 eax, eax
  00ecf	48 8b 4c 24 30	 mov	 rcx, QWORD PTR outp$21140[rsp]
  00ed4	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Py_hexdigits
  00edb	0f b6 04 02	 movzx	 eax, BYTE PTR [rdx+rax]
  00edf	88 01		 mov	 BYTE PTR [rcx], al
  00ee1	48 8b 44 24 30	 mov	 rax, QWORD PTR outp$21140[rsp]
  00ee6	48 ff c0	 inc	 rax
  00ee9	48 89 44 24 30	 mov	 QWORD PTR outp$21140[rsp], rax

; 866  :             }
; 867  :             else

  00eee	eb 15		 jmp	 SHORT $LN2@PyCodec_Ba
$LN3@PyCodec_Ba:

; 868  :                 *outp++ = 'x';

  00ef0	48 8b 44 24 30	 mov	 rax, QWORD PTR outp$21140[rsp]
  00ef5	c6 00 78	 mov	 BYTE PTR [rax], 120	; 00000078H
  00ef8	48 8b 44 24 30	 mov	 rax, QWORD PTR outp$21140[rsp]
  00efd	48 ff c0	 inc	 rax
  00f00	48 89 44 24 30	 mov	 QWORD PTR outp$21140[rsp], rax
$LN2@PyCodec_Ba:
$LN4@PyCodec_Ba:

; 869  :             *outp++ = Py_hexdigits[(c>>4)&0xf];

  00f05	8b 44 24 58	 mov	 eax, DWORD PTR c$21142[rsp]
  00f09	c1 e8 04	 shr	 eax, 4
  00f0c	83 e0 0f	 and	 eax, 15
  00f0f	8b c0		 mov	 eax, eax
  00f11	48 8b 4c 24 30	 mov	 rcx, QWORD PTR outp$21140[rsp]
  00f16	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Py_hexdigits
  00f1d	0f b6 04 02	 movzx	 eax, BYTE PTR [rdx+rax]
  00f21	88 01		 mov	 BYTE PTR [rcx], al
  00f23	48 8b 44 24 30	 mov	 rax, QWORD PTR outp$21140[rsp]
  00f28	48 ff c0	 inc	 rax
  00f2b	48 89 44 24 30	 mov	 QWORD PTR outp$21140[rsp], rax

; 870  :             *outp++ = Py_hexdigits[c&0xf];

  00f30	8b 44 24 58	 mov	 eax, DWORD PTR c$21142[rsp]
  00f34	83 e0 0f	 and	 eax, 15
  00f37	8b c0		 mov	 eax, eax
  00f39	48 8b 4c 24 30	 mov	 rcx, QWORD PTR outp$21140[rsp]
  00f3e	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Py_hexdigits
  00f45	0f b6 04 02	 movzx	 eax, BYTE PTR [rdx+rax]
  00f49	88 01		 mov	 BYTE PTR [rcx], al
  00f4b	48 8b 44 24 30	 mov	 rax, QWORD PTR outp$21140[rsp]
  00f50	48 ff c0	 inc	 rax
  00f53	48 89 44 24 30	 mov	 QWORD PTR outp$21140[rsp], rax

; 871  :         }

  00f58	e9 58 f8 ff ff	 jmp	 $LN7@PyCodec_Ba
$LN6@PyCodec_Ba:

; 872  : 
; 873  :         assert(_PyUnicode_CheckConsistency(res, 1));

  00f5d	ba 01 00 00 00	 mov	 edx, 1
  00f62	48 8b 4c 24 28	 mov	 rcx, QWORD PTR res$21139[rsp]
  00f67	e8 00 00 00 00	 call	 _PyUnicode_CheckConsistency
  00f6c	85 c0		 test	 eax, eax
  00f6e	75 1c		 jne	 SHORT $LN99@PyCodec_Ba
  00f70	41 b8 69 03 00
	00		 mov	 r8d, 873		; 00000369H
  00f76	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  00f7d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EI@PCBNHGIB@?$AA_?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AAC?$AAo?$AAn?$AAs?$AAi?$AAs?$AAt?$AAe?$AAn?$AAc?$AAy?$AA?$CI?$AAr?$AAe?$AAs?$AA?0@
  00f84	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00f8a	33 c0		 xor	 eax, eax
$LN99@PyCodec_Ba:

; 874  :         restuple = Py_BuildValue("(Nn)", res, end);

  00f8c	4c 8b 44 24 48	 mov	 r8, QWORD PTR end$21138[rsp]
  00f91	48 8b 54 24 28	 mov	 rdx, QWORD PTR res$21139[rsp]
  00f96	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04LFKIDKOI@?$CINn?$CJ?$AA@
  00f9d	e8 00 00 00 00	 call	 Py_BuildValue
  00fa2	48 89 44 24 40	 mov	 QWORD PTR restuple$21134[rsp], rax

; 875  :         Py_DECREF(object);

  00fa7	48 8b 4c 24 60	 mov	 rcx, QWORD PTR object$21135[rsp]
  00fac	e8 00 00 00 00	 call	 _Py_DecRef

; 876  :         return restuple;

  00fb1	48 8b 44 24 40	 mov	 rax, QWORD PTR restuple$21134[rsp]
  00fb6	eb 11		 jmp	 SHORT $LN21@PyCodec_Ba

; 877  :     }
; 878  :     else {

  00fb8	eb 0f		 jmp	 SHORT $LN1@PyCodec_Ba
$LN20@PyCodec_Ba:

; 879  :         wrong_exception_type(exc);

  00fba	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR exc$[rsp]
  00fc2	e8 00 00 00 00	 call	 wrong_exception_type

; 880  :         return NULL;

  00fc7	33 c0		 xor	 eax, eax
$LN1@PyCodec_Ba:
$LN21@PyCodec_Ba:

; 881  :     }
; 882  : }

  00fc9	48 81 c4 08 01
	00 00		 add	 rsp, 264		; 00000108H
  00fd0	c3		 ret	 0
PyCodec_BackslashReplaceErrors ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$strict_errors DD imagerel strict_errors
	DD	imagerel strict_errors+29
	DD	imagerel $unwind$strict_errors
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$strict_errors DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT strict_errors
_TEXT	SEGMENT
self$ = 48
exc$ = 56
strict_errors PROC					; COMDAT

; 1049 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1050 :     return PyCodec_StrictErrors(exc);

  0000e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR exc$[rsp]
  00013	e8 00 00 00 00	 call	 PyCodec_StrictErrors

; 1051 : }

  00018	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001c	c3		 ret	 0
strict_errors ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ignore_errors DD imagerel ignore_errors
	DD	imagerel ignore_errors+29
	DD	imagerel $unwind$ignore_errors
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ignore_errors DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT ignore_errors
_TEXT	SEGMENT
self$ = 48
exc$ = 56
ignore_errors PROC					; COMDAT

; 1055 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1056 :     return PyCodec_IgnoreErrors(exc);

  0000e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR exc$[rsp]
  00013	e8 00 00 00 00	 call	 PyCodec_IgnoreErrors

; 1057 : }

  00018	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001c	c3		 ret	 0
ignore_errors ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$replace_errors DD imagerel replace_errors
	DD	imagerel replace_errors+29
	DD	imagerel $unwind$replace_errors
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$replace_errors DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT replace_errors
_TEXT	SEGMENT
self$ = 48
exc$ = 56
replace_errors PROC					; COMDAT

; 1061 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1062 :     return PyCodec_ReplaceErrors(exc);

  0000e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR exc$[rsp]
  00013	e8 00 00 00 00	 call	 PyCodec_ReplaceErrors

; 1063 : }

  00018	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001c	c3		 ret	 0
replace_errors ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$xmlcharrefreplace_errors DD imagerel xmlcharrefreplace_errors
	DD	imagerel xmlcharrefreplace_errors+29
	DD	imagerel $unwind$xmlcharrefreplace_errors
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$xmlcharrefreplace_errors DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT xmlcharrefreplace_errors
_TEXT	SEGMENT
self$ = 48
exc$ = 56
xmlcharrefreplace_errors PROC				; COMDAT

; 1067 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1068 :     return PyCodec_XMLCharRefReplaceErrors(exc);

  0000e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR exc$[rsp]
  00013	e8 00 00 00 00	 call	 PyCodec_XMLCharRefReplaceErrors

; 1069 : }

  00018	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001c	c3		 ret	 0
xmlcharrefreplace_errors ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$backslashreplace_errors DD imagerel backslashreplace_errors
	DD	imagerel backslashreplace_errors+29
	DD	imagerel $unwind$backslashreplace_errors
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$backslashreplace_errors DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT backslashreplace_errors
_TEXT	SEGMENT
self$ = 48
exc$ = 56
backslashreplace_errors PROC				; COMDAT

; 1073 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1074 :     return PyCodec_BackslashReplaceErrors(exc);

  0000e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR exc$[rsp]
  00013	e8 00 00 00 00	 call	 PyCodec_BackslashReplaceErrors

; 1075 : }

  00018	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001c	c3		 ret	 0
backslashreplace_errors ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$surrogatepass_errors DD imagerel surrogatepass_errors
	DD	imagerel surrogatepass_errors+29
	DD	imagerel $unwind$surrogatepass_errors
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$surrogatepass_errors DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT surrogatepass_errors
_TEXT	SEGMENT
self$ = 48
exc$ = 56
surrogatepass_errors PROC				; COMDAT

; 1078 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1079 :     return PyCodec_SurrogatePassErrors(exc);

  0000e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR exc$[rsp]
  00013	e8 00 00 00 00	 call	 PyCodec_SurrogatePassErrors

; 1080 : }

  00018	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001c	c3		 ret	 0
surrogatepass_errors ENDP
_TEXT	ENDS
PUBLIC	??_C@_1CM@DLDBPABH@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_04NBEFNIN@?$CIOn?$CJ?$AA@			; `string'
EXTRN	PyUnicode_FromOrdinal:PROC
EXTRN	PyUnicodeDecodeError_GetObject:PROC
EXTRN	PyUnicodeDecodeError_GetStart:PROC
EXTRN	PyBytes_AsString:PROC
EXTRN	PyBytes_FromStringAndSize:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyCodec_SurrogatePassErrors DD imagerel PyCodec_SurrogatePassErrors
	DD	imagerel PyCodec_SurrogatePassErrors+2354
	DD	imagerel $unwind$PyCodec_SurrogatePassErrors
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyCodec_SurrogatePassErrors DD 020c01H
	DD	017010cH
xdata	ENDS
;	COMDAT ??_C@_1CM@DLDBPABH@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CM@DLDBPABH@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 's', 00H
	DB	'_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, '('
	DB	00H, 'o', 00H, 'b', 00H, 'j', 00H, 'e', 00H, 'c', 00H, 't', 00H
	DB	')', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_04NBEFNIN@?$CIOn?$CJ?$AA@
CONST	SEGMENT
??_C@_04NBEFNIN@?$CIOn?$CJ?$AA@ DB '(On)', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyCodec_SurrogatePassErrors
_TEXT	SEGMENT
res$ = 32
i$ = 40
restuple$ = 48
end$ = 56
start$ = 64
object$ = 72
outp$21323 = 80
ch$21337 = 88
p$21415 = 96
ch$21416 = 104
tv191 = 112
tv200 = 120
tv315 = 128
tv256 = 136
tv265 = 144
tv314 = 152
tv302 = 160
tv311 = 168
exc$ = 192
PyCodec_SurrogatePassErrors PROC			; COMDAT

; 888  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H

; 889  :     PyObject *restuple;
; 890  :     PyObject *object;
; 891  :     Py_ssize_t i;
; 892  :     Py_ssize_t start;
; 893  :     Py_ssize_t end;
; 894  :     PyObject *res;
; 895  :     if (PyObject_IsInstance(exc, PyExc_UnicodeEncodeError)) {

  0000c	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR PyExc_UnicodeEncodeError
  00013	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR exc$[rsp]
  0001b	e8 00 00 00 00	 call	 PyObject_IsInstance
  00020	85 c0		 test	 eax, eax
  00022	0f 84 11 07 00
	00		 je	 $LN21@PyCodec_Su

; 896  :         char *outp;
; 897  :         if (PyUnicodeEncodeError_GetStart(exc, &start))

  00028	48 8d 54 24 40	 lea	 rdx, QWORD PTR start$[rsp]
  0002d	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR exc$[rsp]
  00035	e8 00 00 00 00	 call	 PyUnicodeEncodeError_GetStart
  0003a	85 c0		 test	 eax, eax
  0003c	74 07		 je	 SHORT $LN20@PyCodec_Su

; 898  :             return NULL;

  0003e	33 c0		 xor	 eax, eax
  00040	e9 e5 08 00 00	 jmp	 $LN22@PyCodec_Su
$LN20@PyCodec_Su:

; 899  :         if (PyUnicodeEncodeError_GetEnd(exc, &end))

  00045	48 8d 54 24 38	 lea	 rdx, QWORD PTR end$[rsp]
  0004a	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR exc$[rsp]
  00052	e8 00 00 00 00	 call	 PyUnicodeEncodeError_GetEnd
  00057	85 c0		 test	 eax, eax
  00059	74 07		 je	 SHORT $LN19@PyCodec_Su

; 900  :             return NULL;

  0005b	33 c0		 xor	 eax, eax
  0005d	e9 c8 08 00 00	 jmp	 $LN22@PyCodec_Su
$LN19@PyCodec_Su:

; 901  :         if (!(object = PyUnicodeEncodeError_GetObject(exc)))

  00062	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR exc$[rsp]
  0006a	e8 00 00 00 00	 call	 PyUnicodeEncodeError_GetObject
  0006f	48 89 44 24 48	 mov	 QWORD PTR object$[rsp], rax
  00074	48 83 7c 24 48
	00		 cmp	 QWORD PTR object$[rsp], 0
  0007a	75 07		 jne	 SHORT $LN18@PyCodec_Su

; 902  :             return NULL;

  0007c	33 c0		 xor	 eax, eax
  0007e	e9 a7 08 00 00	 jmp	 $LN22@PyCodec_Su
$LN18@PyCodec_Su:

; 903  :         res = PyBytes_FromStringAndSize(NULL, 3*(end-start));

  00083	48 8b 44 24 40	 mov	 rax, QWORD PTR start$[rsp]
  00088	48 8b 4c 24 38	 mov	 rcx, QWORD PTR end$[rsp]
  0008d	48 2b c8	 sub	 rcx, rax
  00090	48 8b c1	 mov	 rax, rcx
  00093	48 6b c0 03	 imul	 rax, 3
  00097	48 8b d0	 mov	 rdx, rax
  0009a	33 c9		 xor	 ecx, ecx
  0009c	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  000a1	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax

; 904  :         if (!res) {

  000a6	48 83 7c 24 20
	00		 cmp	 QWORD PTR res$[rsp], 0
  000ac	75 11		 jne	 SHORT $LN17@PyCodec_Su

; 905  :             Py_DECREF(object);

  000ae	48 8b 4c 24 48	 mov	 rcx, QWORD PTR object$[rsp]
  000b3	e8 00 00 00 00	 call	 _Py_DecRef

; 906  :             return NULL;

  000b8	33 c0		 xor	 eax, eax
  000ba	e9 6b 08 00 00	 jmp	 $LN22@PyCodec_Su
$LN17@PyCodec_Su:

; 907  :         }
; 908  :         outp = PyBytes_AsString(res);

  000bf	48 8b 4c 24 20	 mov	 rcx, QWORD PTR res$[rsp]
  000c4	e8 00 00 00 00	 call	 PyBytes_AsString
  000c9	48 89 44 24 50	 mov	 QWORD PTR outp$21323[rsp], rax

; 909  :         for (i = start; i < end; i++) {

  000ce	48 8b 44 24 40	 mov	 rax, QWORD PTR start$[rsp]
  000d3	48 89 44 24 28	 mov	 QWORD PTR i$[rsp], rax
  000d8	eb 0d		 jmp	 SHORT $LN16@PyCodec_Su
$LN15@PyCodec_Su:
  000da	48 8b 44 24 28	 mov	 rax, QWORD PTR i$[rsp]
  000df	48 ff c0	 inc	 rax
  000e2	48 89 44 24 28	 mov	 QWORD PTR i$[rsp], rax
$LN16@PyCodec_Su:
  000e7	48 8b 44 24 38	 mov	 rax, QWORD PTR end$[rsp]
  000ec	48 39 44 24 28	 cmp	 QWORD PTR i$[rsp], rax
  000f1	0f 8d 04 06 00
	00		 jge	 $LN14@PyCodec_Su

; 910  :             /* object is guaranteed to be "ready" */
; 911  :             Py_UCS4 ch = PyUnicode_READ_CHAR(object, i);

  000f7	48 8b 44 24 48	 mov	 rax, QWORD PTR object$[rsp]
  000fc	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00100	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00106	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0010b	85 c0		 test	 eax, eax
  0010d	75 1c		 jne	 SHORT $LN24@PyCodec_Su
  0010f	41 b8 8f 03 00
	00		 mov	 r8d, 911		; 0000038fH
  00115	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  0011c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@FJFAKGEG@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$AA@
  00123	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00129	33 c0		 xor	 eax, eax
$LN24@PyCodec_Su:
  0012b	48 8b 44 24 48	 mov	 rax, QWORD PTR object$[rsp]
  00130	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00133	c1 e8 07	 shr	 eax, 7
  00136	83 e0 01	 and	 eax, 1
  00139	85 c0		 test	 eax, eax
  0013b	75 1c		 jne	 SHORT $LN25@PyCodec_Su
  0013d	41 b8 8f 03 00
	00		 mov	 r8d, 911		; 0000038fH
  00143	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  0014a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DG@MCBMNNJM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$AA@
  00151	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00157	33 c0		 xor	 eax, eax
$LN25@PyCodec_Su:
  00159	48 8b 44 24 48	 mov	 rax, QWORD PTR object$[rsp]
  0015e	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00162	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00168	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0016d	85 c0		 test	 eax, eax
  0016f	75 1c		 jne	 SHORT $LN26@PyCodec_Su
  00171	41 b8 8f 03 00
	00		 mov	 r8d, 911		; 0000038fH
  00177	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  0017e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@NAODBNMM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00185	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0018b	33 c0		 xor	 eax, eax
$LN26@PyCodec_Su:
  0018d	48 8b 44 24 48	 mov	 rax, QWORD PTR object$[rsp]
  00192	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00195	c1 e8 07	 shr	 eax, 7
  00198	83 e0 01	 and	 eax, 1
  0019b	85 c0		 test	 eax, eax
  0019d	75 1c		 jne	 SHORT $LN27@PyCodec_Su
  0019f	41 b8 8f 03 00
	00		 mov	 r8d, 911		; 0000038fH
  001a5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  001ac	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DK@PKLPIJEF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  001b3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001b9	33 c0		 xor	 eax, eax
$LN27@PyCodec_Su:
  001bb	48 8b 44 24 48	 mov	 rax, QWORD PTR object$[rsp]
  001c0	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  001c3	c1 e8 02	 shr	 eax, 2
  001c6	83 e0 07	 and	 eax, 7
  001c9	83 f8 01	 cmp	 eax, 1
  001cc	0f 85 47 01 00
	00		 jne	 $LN56@PyCodec_Su
  001d2	48 8b 44 24 48	 mov	 rax, QWORD PTR object$[rsp]
  001d7	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  001db	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  001e1	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  001e6	85 c0		 test	 eax, eax
  001e8	75 1c		 jne	 SHORT $LN28@PyCodec_Su
  001ea	41 b8 8f 03 00
	00		 mov	 r8d, 911		; 0000038fH
  001f0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  001f7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@NAODBNMM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  001fe	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00204	33 c0		 xor	 eax, eax
$LN28@PyCodec_Su:
  00206	48 8b 44 24 48	 mov	 rax, QWORD PTR object$[rsp]
  0020b	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0020e	c1 e8 05	 shr	 eax, 5
  00211	83 e0 01	 and	 eax, 1
  00214	85 c0		 test	 eax, eax
  00216	0f 84 a2 00 00
	00		 je	 $LN34@PyCodec_Su
  0021c	48 8b 44 24 48	 mov	 rax, QWORD PTR object$[rsp]
  00221	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00225	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0022b	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00230	85 c0		 test	 eax, eax
  00232	75 1c		 jne	 SHORT $LN29@PyCodec_Su
  00234	41 b8 8f 03 00
	00		 mov	 r8d, 911		; 0000038fH
  0023a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  00241	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@NAODBNMM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00248	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0024e	33 c0		 xor	 eax, eax
$LN29@PyCodec_Su:
  00250	48 8b 44 24 48	 mov	 rax, QWORD PTR object$[rsp]
  00255	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00258	c1 e8 07	 shr	 eax, 7
  0025b	83 e0 01	 and	 eax, 1
  0025e	85 c0		 test	 eax, eax
  00260	75 1c		 jne	 SHORT $LN30@PyCodec_Su
  00262	41 b8 8f 03 00
	00		 mov	 r8d, 911		; 0000038fH
  00268	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  0026f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DK@PKLPIJEF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00276	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0027c	33 c0		 xor	 eax, eax
$LN30@PyCodec_Su:
  0027e	48 8b 44 24 48	 mov	 rax, QWORD PTR object$[rsp]
  00283	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00286	c1 e8 06	 shr	 eax, 6
  00289	83 e0 01	 and	 eax, 1
  0028c	85 c0		 test	 eax, eax
  0028e	74 12		 je	 SHORT $LN31@PyCodec_Su
  00290	48 8b 44 24 48	 mov	 rax, QWORD PTR object$[rsp]
  00295	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  0029b	48 89 44 24 70	 mov	 QWORD PTR tv191[rsp], rax
  002a0	eb 10		 jmp	 SHORT $LN32@PyCodec_Su
$LN31@PyCodec_Su:
  002a2	48 8b 44 24 48	 mov	 rax, QWORD PTR object$[rsp]
  002a7	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  002ad	48 89 44 24 70	 mov	 QWORD PTR tv191[rsp], rax
$LN32@PyCodec_Su:
  002b2	48 8b 44 24 70	 mov	 rax, QWORD PTR tv191[rsp]
  002b7	48 89 44 24 78	 mov	 QWORD PTR tv200[rsp], rax
  002bc	eb 3c		 jmp	 SHORT $LN35@PyCodec_Su
$LN34@PyCodec_Su:
  002be	48 8b 44 24 48	 mov	 rax, QWORD PTR object$[rsp]
  002c3	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  002cb	75 1c		 jne	 SHORT $LN33@PyCodec_Su
  002cd	41 b8 8f 03 00
	00		 mov	 r8d, 911		; 0000038fH
  002d3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  002da	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FC@FELCKDKN@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO@
  002e1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  002e7	33 c0		 xor	 eax, eax
$LN33@PyCodec_Su:
  002e9	48 8b 44 24 48	 mov	 rax, QWORD PTR object$[rsp]
  002ee	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  002f5	48 89 44 24 78	 mov	 QWORD PTR tv200[rsp], rax
$LN35@PyCodec_Su:
  002fa	48 8b 44 24 28	 mov	 rax, QWORD PTR i$[rsp]
  002ff	48 8b 4c 24 78	 mov	 rcx, QWORD PTR tv200[rsp]
  00304	48 03 c8	 add	 rcx, rax
  00307	48 8b c1	 mov	 rax, rcx
  0030a	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0030d	89 84 24 80 00
	00 00		 mov	 DWORD PTR tv315[rsp], eax
  00314	e9 29 03 00 00	 jmp	 $LN57@PyCodec_Su
$LN56@PyCodec_Su:
  00319	48 8b 44 24 48	 mov	 rax, QWORD PTR object$[rsp]
  0031e	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00322	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00328	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0032d	85 c0		 test	 eax, eax
  0032f	75 1c		 jne	 SHORT $LN36@PyCodec_Su
  00331	41 b8 8f 03 00
	00		 mov	 r8d, 911		; 0000038fH
  00337	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  0033e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@NAODBNMM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00345	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0034b	33 c0		 xor	 eax, eax
$LN36@PyCodec_Su:
  0034d	48 8b 44 24 48	 mov	 rax, QWORD PTR object$[rsp]
  00352	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00355	c1 e8 07	 shr	 eax, 7
  00358	83 e0 01	 and	 eax, 1
  0035b	85 c0		 test	 eax, eax
  0035d	75 1c		 jne	 SHORT $LN37@PyCodec_Su
  0035f	41 b8 8f 03 00
	00		 mov	 r8d, 911		; 0000038fH
  00365	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  0036c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DK@PKLPIJEF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00373	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00379	33 c0		 xor	 eax, eax
$LN37@PyCodec_Su:
  0037b	48 8b 44 24 48	 mov	 rax, QWORD PTR object$[rsp]
  00380	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00383	c1 e8 02	 shr	 eax, 2
  00386	83 e0 07	 and	 eax, 7
  00389	83 f8 02	 cmp	 eax, 2
  0038c	0f 85 54 01 00
	00		 jne	 $LN54@PyCodec_Su
  00392	48 8b 44 24 48	 mov	 rax, QWORD PTR object$[rsp]
  00397	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0039b	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  003a1	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  003a6	85 c0		 test	 eax, eax
  003a8	75 1c		 jne	 SHORT $LN38@PyCodec_Su
  003aa	41 b8 8f 03 00
	00		 mov	 r8d, 911		; 0000038fH
  003b0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  003b7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@NAODBNMM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  003be	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  003c4	33 c0		 xor	 eax, eax
$LN38@PyCodec_Su:
  003c6	48 8b 44 24 48	 mov	 rax, QWORD PTR object$[rsp]
  003cb	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  003ce	c1 e8 05	 shr	 eax, 5
  003d1	83 e0 01	 and	 eax, 1
  003d4	85 c0		 test	 eax, eax
  003d6	0f 84 ae 00 00
	00		 je	 $LN44@PyCodec_Su
  003dc	48 8b 44 24 48	 mov	 rax, QWORD PTR object$[rsp]
  003e1	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  003e5	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  003eb	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  003f0	85 c0		 test	 eax, eax
  003f2	75 1c		 jne	 SHORT $LN39@PyCodec_Su
  003f4	41 b8 8f 03 00
	00		 mov	 r8d, 911		; 0000038fH
  003fa	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  00401	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@NAODBNMM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00408	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0040e	33 c0		 xor	 eax, eax
$LN39@PyCodec_Su:
  00410	48 8b 44 24 48	 mov	 rax, QWORD PTR object$[rsp]
  00415	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00418	c1 e8 07	 shr	 eax, 7
  0041b	83 e0 01	 and	 eax, 1
  0041e	85 c0		 test	 eax, eax
  00420	75 1c		 jne	 SHORT $LN40@PyCodec_Su
  00422	41 b8 8f 03 00
	00		 mov	 r8d, 911		; 0000038fH
  00428	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  0042f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DK@PKLPIJEF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00436	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0043c	33 c0		 xor	 eax, eax
$LN40@PyCodec_Su:
  0043e	48 8b 44 24 48	 mov	 rax, QWORD PTR object$[rsp]
  00443	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00446	c1 e8 06	 shr	 eax, 6
  00449	83 e0 01	 and	 eax, 1
  0044c	85 c0		 test	 eax, eax
  0044e	74 15		 je	 SHORT $LN41@PyCodec_Su
  00450	48 8b 44 24 48	 mov	 rax, QWORD PTR object$[rsp]
  00455	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  0045b	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv256[rsp], rax
  00463	eb 13		 jmp	 SHORT $LN42@PyCodec_Su
$LN41@PyCodec_Su:
  00465	48 8b 44 24 48	 mov	 rax, QWORD PTR object$[rsp]
  0046a	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  00470	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv256[rsp], rax
$LN42@PyCodec_Su:
  00478	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR tv256[rsp]
  00480	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv265[rsp], rax
  00488	eb 3f		 jmp	 SHORT $LN45@PyCodec_Su
$LN44@PyCodec_Su:
  0048a	48 8b 44 24 48	 mov	 rax, QWORD PTR object$[rsp]
  0048f	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  00497	75 1c		 jne	 SHORT $LN43@PyCodec_Su
  00499	41 b8 8f 03 00
	00		 mov	 r8d, 911		; 0000038fH
  0049f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  004a6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FC@FELCKDKN@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO@
  004ad	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  004b3	33 c0		 xor	 eax, eax
$LN43@PyCodec_Su:
  004b5	48 8b 44 24 48	 mov	 rax, QWORD PTR object$[rsp]
  004ba	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  004c1	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv265[rsp], rax
$LN45@PyCodec_Su:
  004c9	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR tv265[rsp]
  004d1	48 8b 4c 24 28	 mov	 rcx, QWORD PTR i$[rsp]
  004d6	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  004da	89 84 24 98 00
	00 00		 mov	 DWORD PTR tv314[rsp], eax
  004e1	e9 4e 01 00 00	 jmp	 $LN55@PyCodec_Su
$LN54@PyCodec_Su:
  004e6	48 8b 44 24 48	 mov	 rax, QWORD PTR object$[rsp]
  004eb	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  004ef	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  004f5	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  004fa	85 c0		 test	 eax, eax
  004fc	75 1c		 jne	 SHORT $LN46@PyCodec_Su
  004fe	41 b8 8f 03 00
	00		 mov	 r8d, 911		; 0000038fH
  00504	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  0050b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@NAODBNMM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00512	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00518	33 c0		 xor	 eax, eax
$LN46@PyCodec_Su:
  0051a	48 8b 44 24 48	 mov	 rax, QWORD PTR object$[rsp]
  0051f	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00522	c1 e8 05	 shr	 eax, 5
  00525	83 e0 01	 and	 eax, 1
  00528	85 c0		 test	 eax, eax
  0052a	0f 84 ae 00 00
	00		 je	 $LN52@PyCodec_Su
  00530	48 8b 44 24 48	 mov	 rax, QWORD PTR object$[rsp]
  00535	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00539	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0053f	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00544	85 c0		 test	 eax, eax
  00546	75 1c		 jne	 SHORT $LN47@PyCodec_Su
  00548	41 b8 8f 03 00
	00		 mov	 r8d, 911		; 0000038fH
  0054e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  00555	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@NAODBNMM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  0055c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00562	33 c0		 xor	 eax, eax
$LN47@PyCodec_Su:
  00564	48 8b 44 24 48	 mov	 rax, QWORD PTR object$[rsp]
  00569	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0056c	c1 e8 07	 shr	 eax, 7
  0056f	83 e0 01	 and	 eax, 1
  00572	85 c0		 test	 eax, eax
  00574	75 1c		 jne	 SHORT $LN48@PyCodec_Su
  00576	41 b8 8f 03 00
	00		 mov	 r8d, 911		; 0000038fH
  0057c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  00583	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DK@PKLPIJEF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  0058a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00590	33 c0		 xor	 eax, eax
$LN48@PyCodec_Su:
  00592	48 8b 44 24 48	 mov	 rax, QWORD PTR object$[rsp]
  00597	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0059a	c1 e8 06	 shr	 eax, 6
  0059d	83 e0 01	 and	 eax, 1
  005a0	85 c0		 test	 eax, eax
  005a2	74 15		 je	 SHORT $LN49@PyCodec_Su
  005a4	48 8b 44 24 48	 mov	 rax, QWORD PTR object$[rsp]
  005a9	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  005af	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR tv302[rsp], rax
  005b7	eb 13		 jmp	 SHORT $LN50@PyCodec_Su
$LN49@PyCodec_Su:
  005b9	48 8b 44 24 48	 mov	 rax, QWORD PTR object$[rsp]
  005be	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  005c4	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR tv302[rsp], rax
$LN50@PyCodec_Su:
  005cc	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR tv302[rsp]
  005d4	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR tv311[rsp], rax
  005dc	eb 3f		 jmp	 SHORT $LN53@PyCodec_Su
$LN52@PyCodec_Su:
  005de	48 8b 44 24 48	 mov	 rax, QWORD PTR object$[rsp]
  005e3	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  005eb	75 1c		 jne	 SHORT $LN51@PyCodec_Su
  005ed	41 b8 8f 03 00
	00		 mov	 r8d, 911		; 0000038fH
  005f3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  005fa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FC@FELCKDKN@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO@
  00601	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00607	33 c0		 xor	 eax, eax
$LN51@PyCodec_Su:
  00609	48 8b 44 24 48	 mov	 rax, QWORD PTR object$[rsp]
  0060e	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  00615	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR tv311[rsp], rax
$LN53@PyCodec_Su:
  0061d	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR tv311[rsp]
  00625	48 8b 4c 24 28	 mov	 rcx, QWORD PTR i$[rsp]
  0062a	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  0062d	89 84 24 98 00
	00 00		 mov	 DWORD PTR tv314[rsp], eax
$LN55@PyCodec_Su:
  00634	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR tv314[rsp]
  0063b	89 84 24 80 00
	00 00		 mov	 DWORD PTR tv315[rsp], eax
$LN57@PyCodec_Su:
  00642	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR tv315[rsp]
  00649	89 44 24 58	 mov	 DWORD PTR ch$21337[rsp], eax

; 912  :             if (ch < 0xd800 || ch > 0xdfff) {

  0064d	81 7c 24 58 00
	d8 00 00	 cmp	 DWORD PTR ch$21337[rsp], 55296 ; 0000d800H
  00655	72 0a		 jb	 SHORT $LN12@PyCodec_Su
  00657	81 7c 24 58 ff
	df 00 00	 cmp	 DWORD PTR ch$21337[rsp], 57343 ; 0000dfffH
  0065f	76 34		 jbe	 SHORT $LN13@PyCodec_Su
$LN12@PyCodec_Su:

; 913  :                 /* Not a surrogate, fail with original exception */
; 914  :                 PyErr_SetObject(PyExceptionInstance_Class(exc), exc);

  00661	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR exc$[rsp]
  00669	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR exc$[rsp]
  00671	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  00675	e8 00 00 00 00	 call	 PyErr_SetObject

; 915  :                 Py_DECREF(res);

  0067a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR res$[rsp]
  0067f	e8 00 00 00 00	 call	 _Py_DecRef

; 916  :                 Py_DECREF(object);

  00684	48 8b 4c 24 48	 mov	 rcx, QWORD PTR object$[rsp]
  00689	e8 00 00 00 00	 call	 _Py_DecRef

; 917  :                 return NULL;

  0068e	33 c0		 xor	 eax, eax
  00690	e9 95 02 00 00	 jmp	 $LN22@PyCodec_Su
$LN13@PyCodec_Su:

; 918  :             }
; 919  :             *outp++ = (char)(0xe0 | (ch >> 12));

  00695	8b 44 24 58	 mov	 eax, DWORD PTR ch$21337[rsp]
  00699	c1 e8 0c	 shr	 eax, 12
  0069c	0d e0 00 00 00	 or	 eax, 224		; 000000e0H
  006a1	48 8b 4c 24 50	 mov	 rcx, QWORD PTR outp$21323[rsp]
  006a6	88 01		 mov	 BYTE PTR [rcx], al
  006a8	48 8b 44 24 50	 mov	 rax, QWORD PTR outp$21323[rsp]
  006ad	48 ff c0	 inc	 rax
  006b0	48 89 44 24 50	 mov	 QWORD PTR outp$21323[rsp], rax

; 920  :             *outp++ = (char)(0x80 | ((ch >> 6) & 0x3f));

  006b5	8b 44 24 58	 mov	 eax, DWORD PTR ch$21337[rsp]
  006b9	c1 e8 06	 shr	 eax, 6
  006bc	83 e0 3f	 and	 eax, 63			; 0000003fH
  006bf	0f ba e8 07	 bts	 eax, 7
  006c3	48 8b 4c 24 50	 mov	 rcx, QWORD PTR outp$21323[rsp]
  006c8	88 01		 mov	 BYTE PTR [rcx], al
  006ca	48 8b 44 24 50	 mov	 rax, QWORD PTR outp$21323[rsp]
  006cf	48 ff c0	 inc	 rax
  006d2	48 89 44 24 50	 mov	 QWORD PTR outp$21323[rsp], rax

; 921  :             *outp++ = (char)(0x80 | (ch & 0x3f));

  006d7	8b 44 24 58	 mov	 eax, DWORD PTR ch$21337[rsp]
  006db	83 e0 3f	 and	 eax, 63			; 0000003fH
  006de	0f ba e8 07	 bts	 eax, 7
  006e2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR outp$21323[rsp]
  006e7	88 01		 mov	 BYTE PTR [rcx], al
  006e9	48 8b 44 24 50	 mov	 rax, QWORD PTR outp$21323[rsp]
  006ee	48 ff c0	 inc	 rax
  006f1	48 89 44 24 50	 mov	 QWORD PTR outp$21323[rsp], rax

; 922  :         }

  006f6	e9 df f9 ff ff	 jmp	 $LN15@PyCodec_Su
$LN14@PyCodec_Su:

; 923  :         restuple = Py_BuildValue("(On)", res, end);

  006fb	4c 8b 44 24 38	 mov	 r8, QWORD PTR end$[rsp]
  00700	48 8b 54 24 20	 mov	 rdx, QWORD PTR res$[rsp]
  00705	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04NBEFNIN@?$CIOn?$CJ?$AA@
  0070c	e8 00 00 00 00	 call	 Py_BuildValue
  00711	48 89 44 24 30	 mov	 QWORD PTR restuple$[rsp], rax

; 924  :         Py_DECREF(res);

  00716	48 8b 4c 24 20	 mov	 rcx, QWORD PTR res$[rsp]
  0071b	e8 00 00 00 00	 call	 _Py_DecRef

; 925  :         Py_DECREF(object);

  00720	48 8b 4c 24 48	 mov	 rcx, QWORD PTR object$[rsp]
  00725	e8 00 00 00 00	 call	 _Py_DecRef

; 926  :         return restuple;

  0072a	48 8b 44 24 30	 mov	 rax, QWORD PTR restuple$[rsp]
  0072f	e9 f6 01 00 00	 jmp	 $LN22@PyCodec_Su
  00734	e9 f1 01 00 00	 jmp	 $LN11@PyCodec_Su
$LN21@PyCodec_Su:

; 927  :     }
; 928  :     else if (PyObject_IsInstance(exc, PyExc_UnicodeDecodeError)) {

  00739	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR PyExc_UnicodeDecodeError
  00740	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR exc$[rsp]
  00748	e8 00 00 00 00	 call	 PyObject_IsInstance
  0074d	85 c0		 test	 eax, eax
  0074f	0f 84 c6 01 00
	00		 je	 $LN10@PyCodec_Su

; 929  :         unsigned char *p;
; 930  :         Py_UCS4 ch = 0;

  00755	c7 44 24 68 00
	00 00 00	 mov	 DWORD PTR ch$21416[rsp], 0

; 931  :         if (PyUnicodeDecodeError_GetStart(exc, &start))

  0075d	48 8d 54 24 40	 lea	 rdx, QWORD PTR start$[rsp]
  00762	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR exc$[rsp]
  0076a	e8 00 00 00 00	 call	 PyUnicodeDecodeError_GetStart
  0076f	85 c0		 test	 eax, eax
  00771	74 07		 je	 SHORT $LN9@PyCodec_Su

; 932  :             return NULL;

  00773	33 c0		 xor	 eax, eax
  00775	e9 b0 01 00 00	 jmp	 $LN22@PyCodec_Su
$LN9@PyCodec_Su:

; 933  :         if (!(object = PyUnicodeDecodeError_GetObject(exc)))

  0077a	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR exc$[rsp]
  00782	e8 00 00 00 00	 call	 PyUnicodeDecodeError_GetObject
  00787	48 89 44 24 48	 mov	 QWORD PTR object$[rsp], rax
  0078c	48 83 7c 24 48
	00		 cmp	 QWORD PTR object$[rsp], 0
  00792	75 07		 jne	 SHORT $LN8@PyCodec_Su

; 934  :             return NULL;

  00794	33 c0		 xor	 eax, eax
  00796	e9 8f 01 00 00	 jmp	 $LN22@PyCodec_Su
$LN8@PyCodec_Su:

; 935  :         if (!(p = (unsigned char*)PyBytes_AsString(object))) {

  0079b	48 8b 4c 24 48	 mov	 rcx, QWORD PTR object$[rsp]
  007a0	e8 00 00 00 00	 call	 PyBytes_AsString
  007a5	48 89 44 24 60	 mov	 QWORD PTR p$21415[rsp], rax
  007aa	48 83 7c 24 60
	00		 cmp	 QWORD PTR p$21415[rsp], 0
  007b0	75 11		 jne	 SHORT $LN7@PyCodec_Su

; 936  :             Py_DECREF(object);

  007b2	48 8b 4c 24 48	 mov	 rcx, QWORD PTR object$[rsp]
  007b7	e8 00 00 00 00	 call	 _Py_DecRef

; 937  :             return NULL;

  007bc	33 c0		 xor	 eax, eax
  007be	e9 67 01 00 00	 jmp	 $LN22@PyCodec_Su
$LN7@PyCodec_Su:

; 938  :         }
; 939  :         /* Try decoding a single surrogate character. If
; 940  :            there are more, let the codec call us again. */
; 941  :         p += start;

  007c3	48 8b 44 24 40	 mov	 rax, QWORD PTR start$[rsp]
  007c8	48 8b 4c 24 60	 mov	 rcx, QWORD PTR p$21415[rsp]
  007cd	48 03 c8	 add	 rcx, rax
  007d0	48 8b c1	 mov	 rax, rcx
  007d3	48 89 44 24 60	 mov	 QWORD PTR p$21415[rsp], rax

; 942  :         if (PyBytes_GET_SIZE(object) - start >= 3 &&
; 943  :             (p[0] & 0xf0) == 0xe0 &&
; 944  :             (p[1] & 0xc0) == 0x80 &&
; 945  :             (p[2] & 0xc0) == 0x80) {

  007d8	48 8b 44 24 48	 mov	 rax, QWORD PTR object$[rsp]
  007dd	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  007e1	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  007e7	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  007ec	85 c0		 test	 eax, eax
  007ee	75 1c		 jne	 SHORT $LN58@PyCodec_Su
  007f0	41 b8 ae 03 00
	00		 mov	 r8d, 942		; 000003aeH
  007f6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  007fd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@DLDBPABH@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$AA@
  00804	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0080a	33 c0		 xor	 eax, eax
$LN58@PyCodec_Su:
  0080c	48 8b 44 24 48	 mov	 rax, QWORD PTR object$[rsp]
  00811	48 8b 4c 24 40	 mov	 rcx, QWORD PTR start$[rsp]
  00816	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0081a	48 2b c1	 sub	 rax, rcx
  0081d	48 83 f8 03	 cmp	 rax, 3
  00821	0f 8c 8b 00 00
	00		 jl	 $LN6@PyCodec_Su
  00827	48 8b 44 24 60	 mov	 rax, QWORD PTR p$21415[rsp]
  0082c	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0082f	25 f0 00 00 00	 and	 eax, 240		; 000000f0H
  00834	3d e0 00 00 00	 cmp	 eax, 224		; 000000e0H
  00839	75 77		 jne	 SHORT $LN6@PyCodec_Su
  0083b	48 8b 44 24 60	 mov	 rax, QWORD PTR p$21415[rsp]
  00840	0f b6 40 01	 movzx	 eax, BYTE PTR [rax+1]
  00844	25 c0 00 00 00	 and	 eax, 192		; 000000c0H
  00849	3d 80 00 00 00	 cmp	 eax, 128		; 00000080H
  0084e	75 62		 jne	 SHORT $LN6@PyCodec_Su
  00850	48 8b 44 24 60	 mov	 rax, QWORD PTR p$21415[rsp]
  00855	0f b6 40 02	 movzx	 eax, BYTE PTR [rax+2]
  00859	25 c0 00 00 00	 and	 eax, 192		; 000000c0H
  0085e	3d 80 00 00 00	 cmp	 eax, 128		; 00000080H
  00863	75 4d		 jne	 SHORT $LN6@PyCodec_Su

; 946  :             /* it's a three-byte code */
; 947  :             ch = ((p[0] & 0x0f) << 12) + ((p[1] & 0x3f) << 6) + (p[2] & 0x3f);

  00865	48 8b 44 24 60	 mov	 rax, QWORD PTR p$21415[rsp]
  0086a	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0086d	83 e0 0f	 and	 eax, 15
  00870	c1 e0 0c	 shl	 eax, 12
  00873	48 8b 4c 24 60	 mov	 rcx, QWORD PTR p$21415[rsp]
  00878	0f b6 49 01	 movzx	 ecx, BYTE PTR [rcx+1]
  0087c	83 e1 3f	 and	 ecx, 63			; 0000003fH
  0087f	c1 e1 06	 shl	 ecx, 6
  00882	03 c1		 add	 eax, ecx
  00884	48 8b 4c 24 60	 mov	 rcx, QWORD PTR p$21415[rsp]
  00889	0f b6 49 02	 movzx	 ecx, BYTE PTR [rcx+2]
  0088d	83 e1 3f	 and	 ecx, 63			; 0000003fH
  00890	03 c1		 add	 eax, ecx
  00892	89 44 24 68	 mov	 DWORD PTR ch$21416[rsp], eax

; 948  :             if (ch < 0xd800 || ch > 0xdfff)

  00896	81 7c 24 68 00
	d8 00 00	 cmp	 DWORD PTR ch$21416[rsp], 55296 ; 0000d800H
  0089e	72 0a		 jb	 SHORT $LN4@PyCodec_Su
  008a0	81 7c 24 68 ff
	df 00 00	 cmp	 DWORD PTR ch$21416[rsp], 57343 ; 0000dfffH
  008a8	76 08		 jbe	 SHORT $LN5@PyCodec_Su
$LN4@PyCodec_Su:

; 949  :                 /* it's not a surrogate - fail */
; 950  :                 ch = 0;

  008aa	c7 44 24 68 00
	00 00 00	 mov	 DWORD PTR ch$21416[rsp], 0
$LN5@PyCodec_Su:
$LN6@PyCodec_Su:

; 951  :         }
; 952  :         Py_DECREF(object);

  008b2	48 8b 4c 24 48	 mov	 rcx, QWORD PTR object$[rsp]
  008b7	e8 00 00 00 00	 call	 _Py_DecRef

; 953  :         if (ch == 0) {

  008bc	83 7c 24 68 00	 cmp	 DWORD PTR ch$21416[rsp], 0
  008c1	75 1d		 jne	 SHORT $LN3@PyCodec_Su

; 954  :             PyErr_SetObject(PyExceptionInstance_Class(exc), exc);

  008c3	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR exc$[rsp]
  008cb	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR exc$[rsp]
  008d3	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  008d7	e8 00 00 00 00	 call	 PyErr_SetObject

; 955  :             return NULL;

  008dc	33 c0		 xor	 eax, eax
  008de	eb 4a		 jmp	 SHORT $LN22@PyCodec_Su
$LN3@PyCodec_Su:

; 956  :         }
; 957  :         res = PyUnicode_FromOrdinal(ch);

  008e0	8b 4c 24 68	 mov	 ecx, DWORD PTR ch$21416[rsp]
  008e4	e8 00 00 00 00	 call	 PyUnicode_FromOrdinal
  008e9	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax

; 958  :         if (res == NULL)

  008ee	48 83 7c 24 20
	00		 cmp	 QWORD PTR res$[rsp], 0
  008f4	75 04		 jne	 SHORT $LN2@PyCodec_Su

; 959  :             return NULL;

  008f6	33 c0		 xor	 eax, eax
  008f8	eb 30		 jmp	 SHORT $LN22@PyCodec_Su
$LN2@PyCodec_Su:

; 960  :         return Py_BuildValue("(Nn)", res, start+3);

  008fa	48 8b 44 24 40	 mov	 rax, QWORD PTR start$[rsp]
  008ff	48 83 c0 03	 add	 rax, 3
  00903	4c 8b c0	 mov	 r8, rax
  00906	48 8b 54 24 20	 mov	 rdx, QWORD PTR res$[rsp]
  0090b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04LFKIDKOI@?$CINn?$CJ?$AA@
  00912	e8 00 00 00 00	 call	 Py_BuildValue
  00917	eb 11		 jmp	 SHORT $LN22@PyCodec_Su

; 961  :     }
; 962  :     else {

  00919	eb 0f		 jmp	 SHORT $LN1@PyCodec_Su
$LN10@PyCodec_Su:

; 963  :         wrong_exception_type(exc);

  0091b	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR exc$[rsp]
  00923	e8 00 00 00 00	 call	 wrong_exception_type

; 964  :         return NULL;

  00928	33 c0		 xor	 eax, eax
$LN1@PyCodec_Su:
$LN11@PyCodec_Su:
$LN22@PyCodec_Su:

; 965  :     }
; 966  : }

  0092a	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  00931	c3		 ret	 0
PyCodec_SurrogatePassErrors ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$surrogateescape_errors DD imagerel surrogateescape_errors
	DD	imagerel surrogateescape_errors+29
	DD	imagerel $unwind$surrogateescape_errors
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$surrogateescape_errors DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT surrogateescape_errors
_TEXT	SEGMENT
self$ = 48
exc$ = 56
surrogateescape_errors PROC				; COMDAT

; 1083 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1084 :     return PyCodec_SurrogateEscapeErrors(exc);

  0000e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR exc$[rsp]
  00013	e8 00 00 00 00	 call	 PyCodec_SurrogateEscapeErrors

; 1085 : }

  00018	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001c	c3		 ret	 0
surrogateescape_errors ENDP
_TEXT	ENDS
EXTRN	PyUnicode_FromKindAndData:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyCodec_SurrogateEscapeErrors DD imagerel PyCodec_SurrogateEscapeErrors
	DD	imagerel PyCodec_SurrogateEscapeErrors+2230
	DD	imagerel $unwind$PyCodec_SurrogateEscapeErrors
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyCodec_SurrogateEscapeErrors DD 020c01H
	DD	019010cH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyCodec_SurrogateEscapeErrors
_TEXT	SEGMENT
res$ = 32
i$ = 40
restuple$ = 48
end$ = 56
start$ = 64
object$ = 72
outp$21452 = 80
ch$21466 = 88
p$21541 = 96
consumed$21543 = 104
ch$21542 = 112
str$21540 = 120
tv190 = 128
tv199 = 136
tv314 = 144
tv255 = 152
tv264 = 160
tv313 = 168
tv301 = 176
tv310 = 184
exc$ = 208
PyCodec_SurrogateEscapeErrors PROC			; COMDAT

; 970  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H

; 971  :     PyObject *restuple;
; 972  :     PyObject *object;
; 973  :     Py_ssize_t i;
; 974  :     Py_ssize_t start;
; 975  :     Py_ssize_t end;
; 976  :     PyObject *res;
; 977  :     if (PyObject_IsInstance(exc, PyExc_UnicodeEncodeError)) {

  0000c	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR PyExc_UnicodeEncodeError
  00013	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR exc$[rsp]
  0001b	e8 00 00 00 00	 call	 PyObject_IsInstance
  00020	85 c0		 test	 eax, eax
  00022	0f 84 db 06 00
	00		 je	 $LN22@PyCodec_Su@2

; 978  :         char *outp;
; 979  :         if (PyUnicodeEncodeError_GetStart(exc, &start))

  00028	48 8d 54 24 40	 lea	 rdx, QWORD PTR start$[rsp]
  0002d	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR exc$[rsp]
  00035	e8 00 00 00 00	 call	 PyUnicodeEncodeError_GetStart
  0003a	85 c0		 test	 eax, eax
  0003c	74 07		 je	 SHORT $LN21@PyCodec_Su@2

; 980  :             return NULL;

  0003e	33 c0		 xor	 eax, eax
  00040	e9 69 08 00 00	 jmp	 $LN23@PyCodec_Su@2
$LN21@PyCodec_Su@2:

; 981  :         if (PyUnicodeEncodeError_GetEnd(exc, &end))

  00045	48 8d 54 24 38	 lea	 rdx, QWORD PTR end$[rsp]
  0004a	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR exc$[rsp]
  00052	e8 00 00 00 00	 call	 PyUnicodeEncodeError_GetEnd
  00057	85 c0		 test	 eax, eax
  00059	74 07		 je	 SHORT $LN20@PyCodec_Su@2

; 982  :             return NULL;

  0005b	33 c0		 xor	 eax, eax
  0005d	e9 4c 08 00 00	 jmp	 $LN23@PyCodec_Su@2
$LN20@PyCodec_Su@2:

; 983  :         if (!(object = PyUnicodeEncodeError_GetObject(exc)))

  00062	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR exc$[rsp]
  0006a	e8 00 00 00 00	 call	 PyUnicodeEncodeError_GetObject
  0006f	48 89 44 24 48	 mov	 QWORD PTR object$[rsp], rax
  00074	48 83 7c 24 48
	00		 cmp	 QWORD PTR object$[rsp], 0
  0007a	75 07		 jne	 SHORT $LN19@PyCodec_Su@2

; 984  :             return NULL;

  0007c	33 c0		 xor	 eax, eax
  0007e	e9 2b 08 00 00	 jmp	 $LN23@PyCodec_Su@2
$LN19@PyCodec_Su@2:

; 985  :         res = PyBytes_FromStringAndSize(NULL, end-start);

  00083	48 8b 44 24 40	 mov	 rax, QWORD PTR start$[rsp]
  00088	48 8b 4c 24 38	 mov	 rcx, QWORD PTR end$[rsp]
  0008d	48 2b c8	 sub	 rcx, rax
  00090	48 8b c1	 mov	 rax, rcx
  00093	48 8b d0	 mov	 rdx, rax
  00096	33 c9		 xor	 ecx, ecx
  00098	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  0009d	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax

; 986  :         if (!res) {

  000a2	48 83 7c 24 20
	00		 cmp	 QWORD PTR res$[rsp], 0
  000a8	75 11		 jne	 SHORT $LN18@PyCodec_Su@2

; 987  :             Py_DECREF(object);

  000aa	48 8b 4c 24 48	 mov	 rcx, QWORD PTR object$[rsp]
  000af	e8 00 00 00 00	 call	 _Py_DecRef

; 988  :             return NULL;

  000b4	33 c0		 xor	 eax, eax
  000b6	e9 f3 07 00 00	 jmp	 $LN23@PyCodec_Su@2
$LN18@PyCodec_Su@2:

; 989  :         }
; 990  :         outp = PyBytes_AsString(res);

  000bb	48 8b 4c 24 20	 mov	 rcx, QWORD PTR res$[rsp]
  000c0	e8 00 00 00 00	 call	 PyBytes_AsString
  000c5	48 89 44 24 50	 mov	 QWORD PTR outp$21452[rsp], rax

; 991  :         for (i = start; i < end; i++) {

  000ca	48 8b 44 24 40	 mov	 rax, QWORD PTR start$[rsp]
  000cf	48 89 44 24 28	 mov	 QWORD PTR i$[rsp], rax
  000d4	eb 0d		 jmp	 SHORT $LN17@PyCodec_Su@2
$LN16@PyCodec_Su@2:
  000d6	48 8b 44 24 28	 mov	 rax, QWORD PTR i$[rsp]
  000db	48 ff c0	 inc	 rax
  000de	48 89 44 24 28	 mov	 QWORD PTR i$[rsp], rax
$LN17@PyCodec_Su@2:
  000e3	48 8b 44 24 38	 mov	 rax, QWORD PTR end$[rsp]
  000e8	48 39 44 24 28	 cmp	 QWORD PTR i$[rsp], rax
  000ed	0f 8d d2 05 00
	00		 jge	 $LN15@PyCodec_Su@2

; 992  :             /* object is guaranteed to be "ready" */
; 993  :             Py_UCS4 ch = PyUnicode_READ_CHAR(object, i);

  000f3	48 8b 44 24 48	 mov	 rax, QWORD PTR object$[rsp]
  000f8	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000fc	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00102	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00107	85 c0		 test	 eax, eax
  00109	75 1c		 jne	 SHORT $LN25@PyCodec_Su@2
  0010b	41 b8 e1 03 00
	00		 mov	 r8d, 993		; 000003e1H
  00111	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  00118	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@FJFAKGEG@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$AA@
  0011f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00125	33 c0		 xor	 eax, eax
$LN25@PyCodec_Su@2:
  00127	48 8b 44 24 48	 mov	 rax, QWORD PTR object$[rsp]
  0012c	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0012f	c1 e8 07	 shr	 eax, 7
  00132	83 e0 01	 and	 eax, 1
  00135	85 c0		 test	 eax, eax
  00137	75 1c		 jne	 SHORT $LN26@PyCodec_Su@2
  00139	41 b8 e1 03 00
	00		 mov	 r8d, 993		; 000003e1H
  0013f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  00146	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DG@MCBMNNJM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$AA@
  0014d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00153	33 c0		 xor	 eax, eax
$LN26@PyCodec_Su@2:
  00155	48 8b 44 24 48	 mov	 rax, QWORD PTR object$[rsp]
  0015a	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0015e	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00164	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00169	85 c0		 test	 eax, eax
  0016b	75 1c		 jne	 SHORT $LN27@PyCodec_Su@2
  0016d	41 b8 e1 03 00
	00		 mov	 r8d, 993		; 000003e1H
  00173	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  0017a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@NAODBNMM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00181	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00187	33 c0		 xor	 eax, eax
$LN27@PyCodec_Su@2:
  00189	48 8b 44 24 48	 mov	 rax, QWORD PTR object$[rsp]
  0018e	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00191	c1 e8 07	 shr	 eax, 7
  00194	83 e0 01	 and	 eax, 1
  00197	85 c0		 test	 eax, eax
  00199	75 1c		 jne	 SHORT $LN28@PyCodec_Su@2
  0019b	41 b8 e1 03 00
	00		 mov	 r8d, 993		; 000003e1H
  001a1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  001a8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DK@PKLPIJEF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  001af	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001b5	33 c0		 xor	 eax, eax
$LN28@PyCodec_Su@2:
  001b7	48 8b 44 24 48	 mov	 rax, QWORD PTR object$[rsp]
  001bc	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  001bf	c1 e8 02	 shr	 eax, 2
  001c2	83 e0 07	 and	 eax, 7
  001c5	83 f8 01	 cmp	 eax, 1
  001c8	0f 85 59 01 00
	00		 jne	 $LN57@PyCodec_Su@2
  001ce	48 8b 44 24 48	 mov	 rax, QWORD PTR object$[rsp]
  001d3	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  001d7	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  001dd	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  001e2	85 c0		 test	 eax, eax
  001e4	75 1c		 jne	 SHORT $LN29@PyCodec_Su@2
  001e6	41 b8 e1 03 00
	00		 mov	 r8d, 993		; 000003e1H
  001ec	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  001f3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@NAODBNMM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  001fa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00200	33 c0		 xor	 eax, eax
$LN29@PyCodec_Su@2:
  00202	48 8b 44 24 48	 mov	 rax, QWORD PTR object$[rsp]
  00207	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0020a	c1 e8 05	 shr	 eax, 5
  0020d	83 e0 01	 and	 eax, 1
  00210	85 c0		 test	 eax, eax
  00212	0f 84 ae 00 00
	00		 je	 $LN35@PyCodec_Su@2
  00218	48 8b 44 24 48	 mov	 rax, QWORD PTR object$[rsp]
  0021d	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00221	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00227	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0022c	85 c0		 test	 eax, eax
  0022e	75 1c		 jne	 SHORT $LN30@PyCodec_Su@2
  00230	41 b8 e1 03 00
	00		 mov	 r8d, 993		; 000003e1H
  00236	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  0023d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@NAODBNMM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00244	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0024a	33 c0		 xor	 eax, eax
$LN30@PyCodec_Su@2:
  0024c	48 8b 44 24 48	 mov	 rax, QWORD PTR object$[rsp]
  00251	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00254	c1 e8 07	 shr	 eax, 7
  00257	83 e0 01	 and	 eax, 1
  0025a	85 c0		 test	 eax, eax
  0025c	75 1c		 jne	 SHORT $LN31@PyCodec_Su@2
  0025e	41 b8 e1 03 00
	00		 mov	 r8d, 993		; 000003e1H
  00264	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  0026b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DK@PKLPIJEF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00272	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00278	33 c0		 xor	 eax, eax
$LN31@PyCodec_Su@2:
  0027a	48 8b 44 24 48	 mov	 rax, QWORD PTR object$[rsp]
  0027f	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00282	c1 e8 06	 shr	 eax, 6
  00285	83 e0 01	 and	 eax, 1
  00288	85 c0		 test	 eax, eax
  0028a	74 15		 je	 SHORT $LN32@PyCodec_Su@2
  0028c	48 8b 44 24 48	 mov	 rax, QWORD PTR object$[rsp]
  00291	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  00297	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv190[rsp], rax
  0029f	eb 13		 jmp	 SHORT $LN33@PyCodec_Su@2
$LN32@PyCodec_Su@2:
  002a1	48 8b 44 24 48	 mov	 rax, QWORD PTR object$[rsp]
  002a6	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  002ac	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv190[rsp], rax
$LN33@PyCodec_Su@2:
  002b4	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR tv190[rsp]
  002bc	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv199[rsp], rax
  002c4	eb 3f		 jmp	 SHORT $LN36@PyCodec_Su@2
$LN35@PyCodec_Su@2:
  002c6	48 8b 44 24 48	 mov	 rax, QWORD PTR object$[rsp]
  002cb	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  002d3	75 1c		 jne	 SHORT $LN34@PyCodec_Su@2
  002d5	41 b8 e1 03 00
	00		 mov	 r8d, 993		; 000003e1H
  002db	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  002e2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FC@FELCKDKN@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO@
  002e9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  002ef	33 c0		 xor	 eax, eax
$LN34@PyCodec_Su@2:
  002f1	48 8b 44 24 48	 mov	 rax, QWORD PTR object$[rsp]
  002f6	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  002fd	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv199[rsp], rax
$LN36@PyCodec_Su@2:
  00305	48 8b 44 24 28	 mov	 rax, QWORD PTR i$[rsp]
  0030a	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR tv199[rsp]
  00312	48 03 c8	 add	 rcx, rax
  00315	48 8b c1	 mov	 rax, rcx
  00318	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0031b	89 84 24 90 00
	00 00		 mov	 DWORD PTR tv314[rsp], eax
  00322	e9 29 03 00 00	 jmp	 $LN58@PyCodec_Su@2
$LN57@PyCodec_Su@2:
  00327	48 8b 44 24 48	 mov	 rax, QWORD PTR object$[rsp]
  0032c	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00330	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00336	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0033b	85 c0		 test	 eax, eax
  0033d	75 1c		 jne	 SHORT $LN37@PyCodec_Su@2
  0033f	41 b8 e1 03 00
	00		 mov	 r8d, 993		; 000003e1H
  00345	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  0034c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@NAODBNMM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00353	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00359	33 c0		 xor	 eax, eax
$LN37@PyCodec_Su@2:
  0035b	48 8b 44 24 48	 mov	 rax, QWORD PTR object$[rsp]
  00360	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00363	c1 e8 07	 shr	 eax, 7
  00366	83 e0 01	 and	 eax, 1
  00369	85 c0		 test	 eax, eax
  0036b	75 1c		 jne	 SHORT $LN38@PyCodec_Su@2
  0036d	41 b8 e1 03 00
	00		 mov	 r8d, 993		; 000003e1H
  00373	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  0037a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DK@PKLPIJEF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00381	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00387	33 c0		 xor	 eax, eax
$LN38@PyCodec_Su@2:
  00389	48 8b 44 24 48	 mov	 rax, QWORD PTR object$[rsp]
  0038e	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00391	c1 e8 02	 shr	 eax, 2
  00394	83 e0 07	 and	 eax, 7
  00397	83 f8 02	 cmp	 eax, 2
  0039a	0f 85 54 01 00
	00		 jne	 $LN55@PyCodec_Su@2
  003a0	48 8b 44 24 48	 mov	 rax, QWORD PTR object$[rsp]
  003a5	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  003a9	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  003af	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  003b4	85 c0		 test	 eax, eax
  003b6	75 1c		 jne	 SHORT $LN39@PyCodec_Su@2
  003b8	41 b8 e1 03 00
	00		 mov	 r8d, 993		; 000003e1H
  003be	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  003c5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@NAODBNMM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  003cc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  003d2	33 c0		 xor	 eax, eax
$LN39@PyCodec_Su@2:
  003d4	48 8b 44 24 48	 mov	 rax, QWORD PTR object$[rsp]
  003d9	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  003dc	c1 e8 05	 shr	 eax, 5
  003df	83 e0 01	 and	 eax, 1
  003e2	85 c0		 test	 eax, eax
  003e4	0f 84 ae 00 00
	00		 je	 $LN45@PyCodec_Su@2
  003ea	48 8b 44 24 48	 mov	 rax, QWORD PTR object$[rsp]
  003ef	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  003f3	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  003f9	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  003fe	85 c0		 test	 eax, eax
  00400	75 1c		 jne	 SHORT $LN40@PyCodec_Su@2
  00402	41 b8 e1 03 00
	00		 mov	 r8d, 993		; 000003e1H
  00408	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  0040f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@NAODBNMM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00416	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0041c	33 c0		 xor	 eax, eax
$LN40@PyCodec_Su@2:
  0041e	48 8b 44 24 48	 mov	 rax, QWORD PTR object$[rsp]
  00423	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00426	c1 e8 07	 shr	 eax, 7
  00429	83 e0 01	 and	 eax, 1
  0042c	85 c0		 test	 eax, eax
  0042e	75 1c		 jne	 SHORT $LN41@PyCodec_Su@2
  00430	41 b8 e1 03 00
	00		 mov	 r8d, 993		; 000003e1H
  00436	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  0043d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DK@PKLPIJEF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00444	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0044a	33 c0		 xor	 eax, eax
$LN41@PyCodec_Su@2:
  0044c	48 8b 44 24 48	 mov	 rax, QWORD PTR object$[rsp]
  00451	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00454	c1 e8 06	 shr	 eax, 6
  00457	83 e0 01	 and	 eax, 1
  0045a	85 c0		 test	 eax, eax
  0045c	74 15		 je	 SHORT $LN42@PyCodec_Su@2
  0045e	48 8b 44 24 48	 mov	 rax, QWORD PTR object$[rsp]
  00463	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  00469	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR tv255[rsp], rax
  00471	eb 13		 jmp	 SHORT $LN43@PyCodec_Su@2
$LN42@PyCodec_Su@2:
  00473	48 8b 44 24 48	 mov	 rax, QWORD PTR object$[rsp]
  00478	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  0047e	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR tv255[rsp], rax
$LN43@PyCodec_Su@2:
  00486	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR tv255[rsp]
  0048e	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR tv264[rsp], rax
  00496	eb 3f		 jmp	 SHORT $LN46@PyCodec_Su@2
$LN45@PyCodec_Su@2:
  00498	48 8b 44 24 48	 mov	 rax, QWORD PTR object$[rsp]
  0049d	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  004a5	75 1c		 jne	 SHORT $LN44@PyCodec_Su@2
  004a7	41 b8 e1 03 00
	00		 mov	 r8d, 993		; 000003e1H
  004ad	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  004b4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FC@FELCKDKN@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO@
  004bb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  004c1	33 c0		 xor	 eax, eax
$LN44@PyCodec_Su@2:
  004c3	48 8b 44 24 48	 mov	 rax, QWORD PTR object$[rsp]
  004c8	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  004cf	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR tv264[rsp], rax
$LN46@PyCodec_Su@2:
  004d7	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR tv264[rsp]
  004df	48 8b 4c 24 28	 mov	 rcx, QWORD PTR i$[rsp]
  004e4	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  004e8	89 84 24 a8 00
	00 00		 mov	 DWORD PTR tv313[rsp], eax
  004ef	e9 4e 01 00 00	 jmp	 $LN56@PyCodec_Su@2
$LN55@PyCodec_Su@2:
  004f4	48 8b 44 24 48	 mov	 rax, QWORD PTR object$[rsp]
  004f9	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  004fd	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00503	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00508	85 c0		 test	 eax, eax
  0050a	75 1c		 jne	 SHORT $LN47@PyCodec_Su@2
  0050c	41 b8 e1 03 00
	00		 mov	 r8d, 993		; 000003e1H
  00512	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  00519	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@NAODBNMM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00520	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00526	33 c0		 xor	 eax, eax
$LN47@PyCodec_Su@2:
  00528	48 8b 44 24 48	 mov	 rax, QWORD PTR object$[rsp]
  0052d	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00530	c1 e8 05	 shr	 eax, 5
  00533	83 e0 01	 and	 eax, 1
  00536	85 c0		 test	 eax, eax
  00538	0f 84 ae 00 00
	00		 je	 $LN53@PyCodec_Su@2
  0053e	48 8b 44 24 48	 mov	 rax, QWORD PTR object$[rsp]
  00543	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00547	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0054d	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00552	85 c0		 test	 eax, eax
  00554	75 1c		 jne	 SHORT $LN48@PyCodec_Su@2
  00556	41 b8 e1 03 00
	00		 mov	 r8d, 993		; 000003e1H
  0055c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  00563	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@NAODBNMM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  0056a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00570	33 c0		 xor	 eax, eax
$LN48@PyCodec_Su@2:
  00572	48 8b 44 24 48	 mov	 rax, QWORD PTR object$[rsp]
  00577	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0057a	c1 e8 07	 shr	 eax, 7
  0057d	83 e0 01	 and	 eax, 1
  00580	85 c0		 test	 eax, eax
  00582	75 1c		 jne	 SHORT $LN49@PyCodec_Su@2
  00584	41 b8 e1 03 00
	00		 mov	 r8d, 993		; 000003e1H
  0058a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  00591	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DK@PKLPIJEF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00598	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0059e	33 c0		 xor	 eax, eax
$LN49@PyCodec_Su@2:
  005a0	48 8b 44 24 48	 mov	 rax, QWORD PTR object$[rsp]
  005a5	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  005a8	c1 e8 06	 shr	 eax, 6
  005ab	83 e0 01	 and	 eax, 1
  005ae	85 c0		 test	 eax, eax
  005b0	74 15		 je	 SHORT $LN50@PyCodec_Su@2
  005b2	48 8b 44 24 48	 mov	 rax, QWORD PTR object$[rsp]
  005b7	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  005bd	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR tv301[rsp], rax
  005c5	eb 13		 jmp	 SHORT $LN51@PyCodec_Su@2
$LN50@PyCodec_Su@2:
  005c7	48 8b 44 24 48	 mov	 rax, QWORD PTR object$[rsp]
  005cc	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  005d2	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR tv301[rsp], rax
$LN51@PyCodec_Su@2:
  005da	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR tv301[rsp]
  005e2	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR tv310[rsp], rax
  005ea	eb 3f		 jmp	 SHORT $LN54@PyCodec_Su@2
$LN53@PyCodec_Su@2:
  005ec	48 8b 44 24 48	 mov	 rax, QWORD PTR object$[rsp]
  005f1	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  005f9	75 1c		 jne	 SHORT $LN52@PyCodec_Su@2
  005fb	41 b8 e1 03 00
	00		 mov	 r8d, 993		; 000003e1H
  00601	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@BPKNOKJH@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAc?$AAo?$AAd?$AAe?$AAc?$AAs?$AA?4?$AAc?$AA?$AA@
  00608	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FC@FELCKDKN@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CJ?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO@
  0060f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00615	33 c0		 xor	 eax, eax
$LN52@PyCodec_Su@2:
  00617	48 8b 44 24 48	 mov	 rax, QWORD PTR object$[rsp]
  0061c	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  00623	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR tv310[rsp], rax
$LN54@PyCodec_Su@2:
  0062b	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR tv310[rsp]
  00633	48 8b 4c 24 28	 mov	 rcx, QWORD PTR i$[rsp]
  00638	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  0063b	89 84 24 a8 00
	00 00		 mov	 DWORD PTR tv313[rsp], eax
$LN56@PyCodec_Su@2:
  00642	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR tv313[rsp]
  00649	89 84 24 90 00
	00 00		 mov	 DWORD PTR tv314[rsp], eax
$LN58@PyCodec_Su@2:
  00650	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR tv314[rsp]
  00657	89 44 24 58	 mov	 DWORD PTR ch$21466[rsp], eax

; 994  :             if (ch < 0xdc80 || ch > 0xdcff) {

  0065b	81 7c 24 58 80
	dc 00 00	 cmp	 DWORD PTR ch$21466[rsp], 56448 ; 0000dc80H
  00663	72 0a		 jb	 SHORT $LN13@PyCodec_Su@2
  00665	81 7c 24 58 ff
	dc 00 00	 cmp	 DWORD PTR ch$21466[rsp], 56575 ; 0000dcffH
  0066d	76 34		 jbe	 SHORT $LN14@PyCodec_Su@2
$LN13@PyCodec_Su@2:

; 995  :                 /* Not a UTF-8b surrogate, fail with original exception */
; 996  :                 PyErr_SetObject(PyExceptionInstance_Class(exc), exc);

  0066f	48 8b 94 24 d0
	00 00 00	 mov	 rdx, QWORD PTR exc$[rsp]
  00677	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR exc$[rsp]
  0067f	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  00683	e8 00 00 00 00	 call	 PyErr_SetObject

; 997  :                 Py_DECREF(res);

  00688	48 8b 4c 24 20	 mov	 rcx, QWORD PTR res$[rsp]
  0068d	e8 00 00 00 00	 call	 _Py_DecRef

; 998  :                 Py_DECREF(object);

  00692	48 8b 4c 24 48	 mov	 rcx, QWORD PTR object$[rsp]
  00697	e8 00 00 00 00	 call	 _Py_DecRef

; 999  :                 return NULL;

  0069c	33 c0		 xor	 eax, eax
  0069e	e9 0b 02 00 00	 jmp	 $LN23@PyCodec_Su@2
$LN14@PyCodec_Su@2:

; 1000 :             }
; 1001 :             *outp++ = ch - 0xdc00;

  006a3	8b 44 24 58	 mov	 eax, DWORD PTR ch$21466[rsp]
  006a7	2d 00 dc 00 00	 sub	 eax, 56320		; 0000dc00H
  006ac	48 8b 4c 24 50	 mov	 rcx, QWORD PTR outp$21452[rsp]
  006b1	88 01		 mov	 BYTE PTR [rcx], al
  006b3	48 8b 44 24 50	 mov	 rax, QWORD PTR outp$21452[rsp]
  006b8	48 ff c0	 inc	 rax
  006bb	48 89 44 24 50	 mov	 QWORD PTR outp$21452[rsp], rax

; 1002 :         }

  006c0	e9 11 fa ff ff	 jmp	 $LN16@PyCodec_Su@2
$LN15@PyCodec_Su@2:

; 1003 :         restuple = Py_BuildValue("(On)", res, end);

  006c5	4c 8b 44 24 38	 mov	 r8, QWORD PTR end$[rsp]
  006ca	48 8b 54 24 20	 mov	 rdx, QWORD PTR res$[rsp]
  006cf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04NBEFNIN@?$CIOn?$CJ?$AA@
  006d6	e8 00 00 00 00	 call	 Py_BuildValue
  006db	48 89 44 24 30	 mov	 QWORD PTR restuple$[rsp], rax

; 1004 :         Py_DECREF(res);

  006e0	48 8b 4c 24 20	 mov	 rcx, QWORD PTR res$[rsp]
  006e5	e8 00 00 00 00	 call	 _Py_DecRef

; 1005 :         Py_DECREF(object);

  006ea	48 8b 4c 24 48	 mov	 rcx, QWORD PTR object$[rsp]
  006ef	e8 00 00 00 00	 call	 _Py_DecRef

; 1006 :         return restuple;

  006f4	48 8b 44 24 30	 mov	 rax, QWORD PTR restuple$[rsp]
  006f9	e9 b0 01 00 00	 jmp	 $LN23@PyCodec_Su@2
  006fe	e9 ab 01 00 00	 jmp	 $LN12@PyCodec_Su@2
$LN22@PyCodec_Su@2:

; 1007 :     }
; 1008 :     else if (PyObject_IsInstance(exc, PyExc_UnicodeDecodeError)) {

  00703	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR PyExc_UnicodeDecodeError
  0070a	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR exc$[rsp]
  00712	e8 00 00 00 00	 call	 PyObject_IsInstance
  00717	85 c0		 test	 eax, eax
  00719	0f 84 80 01 00
	00		 je	 $LN11@PyCodec_Su@2

; 1009 :         PyObject *str;
; 1010 :         unsigned char *p;
; 1011 :         Py_UCS2 ch[4]; /* decode up to 4 bad bytes. */
; 1012 :         int consumed = 0;

  0071f	c7 44 24 68 00
	00 00 00	 mov	 DWORD PTR consumed$21543[rsp], 0

; 1013 :         if (PyUnicodeDecodeError_GetStart(exc, &start))

  00727	48 8d 54 24 40	 lea	 rdx, QWORD PTR start$[rsp]
  0072c	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR exc$[rsp]
  00734	e8 00 00 00 00	 call	 PyUnicodeDecodeError_GetStart
  00739	85 c0		 test	 eax, eax
  0073b	74 07		 je	 SHORT $LN10@PyCodec_Su@2

; 1014 :             return NULL;

  0073d	33 c0		 xor	 eax, eax
  0073f	e9 6a 01 00 00	 jmp	 $LN23@PyCodec_Su@2
$LN10@PyCodec_Su@2:

; 1015 :         if (PyUnicodeDecodeError_GetEnd(exc, &end))

  00744	48 8d 54 24 38	 lea	 rdx, QWORD PTR end$[rsp]
  00749	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR exc$[rsp]
  00751	e8 00 00 00 00	 call	 PyUnicodeDecodeError_GetEnd
  00756	85 c0		 test	 eax, eax
  00758	74 07		 je	 SHORT $LN9@PyCodec_Su@2

; 1016 :             return NULL;

  0075a	33 c0		 xor	 eax, eax
  0075c	e9 4d 01 00 00	 jmp	 $LN23@PyCodec_Su@2
$LN9@PyCodec_Su@2:

; 1017 :         if (!(object = PyUnicodeDecodeError_GetObject(exc)))

  00761	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR exc$[rsp]
  00769	e8 00 00 00 00	 call	 PyUnicodeDecodeError_GetObject
  0076e	48 89 44 24 48	 mov	 QWORD PTR object$[rsp], rax
  00773	48 83 7c 24 48
	00		 cmp	 QWORD PTR object$[rsp], 0
  00779	75 07		 jne	 SHORT $LN8@PyCodec_Su@2

; 1018 :             return NULL;

  0077b	33 c0		 xor	 eax, eax
  0077d	e9 2c 01 00 00	 jmp	 $LN23@PyCodec_Su@2
$LN8@PyCodec_Su@2:

; 1019 :         if (!(p = (unsigned char*)PyBytes_AsString(object))) {

  00782	48 8b 4c 24 48	 mov	 rcx, QWORD PTR object$[rsp]
  00787	e8 00 00 00 00	 call	 PyBytes_AsString
  0078c	48 89 44 24 60	 mov	 QWORD PTR p$21541[rsp], rax
  00791	48 83 7c 24 60
	00		 cmp	 QWORD PTR p$21541[rsp], 0
  00797	75 11		 jne	 SHORT $LN7@PyCodec_Su@2

; 1020 :             Py_DECREF(object);

  00799	48 8b 4c 24 48	 mov	 rcx, QWORD PTR object$[rsp]
  0079e	e8 00 00 00 00	 call	 _Py_DecRef

; 1021 :             return NULL;

  007a3	33 c0		 xor	 eax, eax
  007a5	e9 04 01 00 00	 jmp	 $LN23@PyCodec_Su@2
$LN7@PyCodec_Su@2:
$LN6@PyCodec_Su@2:

; 1022 :         }
; 1023 :         while (consumed < 4 && consumed < end-start) {

  007aa	83 7c 24 68 04	 cmp	 DWORD PTR consumed$21543[rsp], 4
  007af	7d 70		 jge	 SHORT $LN5@PyCodec_Su@2
  007b1	48 63 44 24 68	 movsxd	 rax, DWORD PTR consumed$21543[rsp]
  007b6	48 8b 4c 24 40	 mov	 rcx, QWORD PTR start$[rsp]
  007bb	48 8b 54 24 38	 mov	 rdx, QWORD PTR end$[rsp]
  007c0	48 2b d1	 sub	 rdx, rcx
  007c3	48 8b ca	 mov	 rcx, rdx
  007c6	48 3b c1	 cmp	 rax, rcx
  007c9	7d 56		 jge	 SHORT $LN5@PyCodec_Su@2

; 1024 :             /* Refuse to escape ASCII bytes. */
; 1025 :             if (p[start+consumed] < 128)

  007cb	48 63 44 24 68	 movsxd	 rax, DWORD PTR consumed$21543[rsp]
  007d0	48 8b 4c 24 40	 mov	 rcx, QWORD PTR start$[rsp]
  007d5	48 03 c8	 add	 rcx, rax
  007d8	48 8b c1	 mov	 rax, rcx
  007db	48 8b 4c 24 60	 mov	 rcx, QWORD PTR p$21541[rsp]
  007e0	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  007e4	3d 80 00 00 00	 cmp	 eax, 128		; 00000080H
  007e9	7d 02		 jge	 SHORT $LN4@PyCodec_Su@2

; 1026 :                 break;

  007eb	eb 34		 jmp	 SHORT $LN5@PyCodec_Su@2
$LN4@PyCodec_Su@2:

; 1027 :             ch[consumed] = 0xdc00 + p[start+consumed];

  007ed	48 63 44 24 68	 movsxd	 rax, DWORD PTR consumed$21543[rsp]
  007f2	48 8b 4c 24 40	 mov	 rcx, QWORD PTR start$[rsp]
  007f7	48 03 c8	 add	 rcx, rax
  007fa	48 8b c1	 mov	 rax, rcx
  007fd	48 8b 4c 24 60	 mov	 rcx, QWORD PTR p$21541[rsp]
  00802	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00806	05 00 dc 00 00	 add	 eax, 56320		; 0000dc00H
  0080b	48 63 4c 24 68	 movsxd	 rcx, DWORD PTR consumed$21543[rsp]
  00810	66 89 44 4c 70	 mov	 WORD PTR ch$21542[rsp+rcx*2], ax

; 1028 :             consumed++;

  00815	8b 44 24 68	 mov	 eax, DWORD PTR consumed$21543[rsp]
  00819	ff c0		 inc	 eax
  0081b	89 44 24 68	 mov	 DWORD PTR consumed$21543[rsp], eax

; 1029 :         }

  0081f	eb 89		 jmp	 SHORT $LN6@PyCodec_Su@2
$LN5@PyCodec_Su@2:

; 1030 :         Py_DECREF(object);

  00821	48 8b 4c 24 48	 mov	 rcx, QWORD PTR object$[rsp]
  00826	e8 00 00 00 00	 call	 _Py_DecRef

; 1031 :         if (!consumed) {

  0082b	83 7c 24 68 00	 cmp	 DWORD PTR consumed$21543[rsp], 0
  00830	75 1d		 jne	 SHORT $LN3@PyCodec_Su@2

; 1032 :             /* codec complained about ASCII byte. */
; 1033 :             PyErr_SetObject(PyExceptionInstance_Class(exc), exc);

  00832	48 8b 94 24 d0
	00 00 00	 mov	 rdx, QWORD PTR exc$[rsp]
  0083a	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR exc$[rsp]
  00842	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  00846	e8 00 00 00 00	 call	 PyErr_SetObject

; 1034 :             return NULL;

  0084b	33 c0		 xor	 eax, eax
  0084d	eb 5f		 jmp	 SHORT $LN23@PyCodec_Su@2
$LN3@PyCodec_Su@2:

; 1035 :         }
; 1036 :         str = PyUnicode_FromKindAndData(PyUnicode_2BYTE_KIND, ch, consumed);

  0084f	48 63 44 24 68	 movsxd	 rax, DWORD PTR consumed$21543[rsp]
  00854	4c 8b c0	 mov	 r8, rax
  00857	48 8d 54 24 70	 lea	 rdx, QWORD PTR ch$21542[rsp]
  0085c	b9 02 00 00 00	 mov	 ecx, 2
  00861	e8 00 00 00 00	 call	 PyUnicode_FromKindAndData
  00866	48 89 44 24 78	 mov	 QWORD PTR str$21540[rsp], rax

; 1037 :         if (str == NULL)

  0086b	48 83 7c 24 78
	00		 cmp	 QWORD PTR str$21540[rsp], 0
  00871	75 04		 jne	 SHORT $LN2@PyCodec_Su@2

; 1038 :             return NULL;

  00873	33 c0		 xor	 eax, eax
  00875	eb 37		 jmp	 SHORT $LN23@PyCodec_Su@2
$LN2@PyCodec_Su@2:

; 1039 :         return Py_BuildValue("(Nn)", str, start+consumed);

  00877	48 63 44 24 68	 movsxd	 rax, DWORD PTR consumed$21543[rsp]
  0087c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR start$[rsp]
  00881	48 03 c8	 add	 rcx, rax
  00884	48 8b c1	 mov	 rax, rcx
  00887	4c 8b c0	 mov	 r8, rax
  0088a	48 8b 54 24 78	 mov	 rdx, QWORD PTR str$21540[rsp]
  0088f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04LFKIDKOI@?$CINn?$CJ?$AA@
  00896	e8 00 00 00 00	 call	 Py_BuildValue
  0089b	eb 11		 jmp	 SHORT $LN23@PyCodec_Su@2

; 1040 :     }
; 1041 :     else {

  0089d	eb 0f		 jmp	 SHORT $LN1@PyCodec_Su@2
$LN11@PyCodec_Su@2:

; 1042 :         wrong_exception_type(exc);

  0089f	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR exc$[rsp]
  008a7	e8 00 00 00 00	 call	 wrong_exception_type

; 1043 :         return NULL;

  008ac	33 c0		 xor	 eax, eax
$LN1@PyCodec_Su@2:
$LN12@PyCodec_Su@2:
$LN23@PyCodec_Su@2:

; 1044 :     }
; 1045 : }

  008ae	48 81 c4 c8 00
	00 00		 add	 rsp, 200		; 000000c8H
  008b5	c3		 ret	 0
PyCodec_SurrogateEscapeErrors ENDP
_TEXT	ENDS
PUBLIC	??_C@_09JLELGAP@encodings?$AA@			; `string'
PUBLIC	??_C@_0CA@HPGLPMCB@can?8t?5initialize?5codec?5registry?$AA@ ; `string'
PUBLIC	??_C@_0CG@KAJPKAEK@can?8t?5initialize?5codec?5error?5reg@ ; `string'
EXTRN	PyImport_ImportModuleNoBlock:PROC
EXTRN	Py_FatalError:PROC
EXTRN	PyCFunction_NewEx:PROC
EXTRN	PyDict_New:PROC
EXTRN	PyList_New:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyCodecRegistry_Init DD imagerel _PyCodecRegistry_Init
	DD	imagerel _PyCodecRegistry_Init+361
	DD	imagerel $unwind$_PyCodecRegistry_Init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyCodecRegistry_Init DD 010401H
	DD	0a204H
xdata	ENDS
;	COMDAT ??_C@_09JLELGAP@encodings?$AA@
CONST	SEGMENT
??_C@_09JLELGAP@encodings?$AA@ DB 'encodings', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@HPGLPMCB@can?8t?5initialize?5codec?5registry?$AA@
CONST	SEGMENT
??_C@_0CA@HPGLPMCB@can?8t?5initialize?5codec?5registry?$AA@ DB 'can''t in'
	DB	'itialize codec registry', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@KAJPKAEK@can?8t?5initialize?5codec?5error?5reg@
CONST	SEGMENT
??_C@_0CG@KAJPKAEK@can?8t?5initialize?5codec?5error?5reg@ DB 'can''t init'
	DB	'ialize codec error registry', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PyCodecRegistry_Init
_TEXT	SEGMENT
i$ = 32
interp$ = 40
mod$ = 48
res$21644 = 56
func$21641 = 64
_PyCodecRegistry_Init PROC				; COMDAT

; 1088 : {

  00000	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 1089 :     static struct {
; 1090 :         char *name;
; 1091 :         PyMethodDef def;
; 1092 :     } methods[] =
; 1093 :     {
; 1094 :         {
; 1095 :             "strict",
; 1096 :             {
; 1097 :                 "strict_errors",
; 1098 :                 strict_errors,
; 1099 :                 METH_O,
; 1100 :                 PyDoc_STR("Implements the 'strict' error handling, which "
; 1101 :                           "raises a UnicodeError on coding errors.")
; 1102 :             }
; 1103 :         },
; 1104 :         {
; 1105 :             "ignore",
; 1106 :             {
; 1107 :                 "ignore_errors",
; 1108 :                 ignore_errors,
; 1109 :                 METH_O,
; 1110 :                 PyDoc_STR("Implements the 'ignore' error handling, which "
; 1111 :                           "ignores malformed data and continues.")
; 1112 :             }
; 1113 :         },
; 1114 :         {
; 1115 :             "replace",
; 1116 :             {
; 1117 :                 "replace_errors",
; 1118 :                 replace_errors,
; 1119 :                 METH_O,
; 1120 :                 PyDoc_STR("Implements the 'replace' error handling, which "
; 1121 :                           "replaces malformed data with a replacement marker.")
; 1122 :             }
; 1123 :         },
; 1124 :         {
; 1125 :             "xmlcharrefreplace",
; 1126 :             {
; 1127 :                 "xmlcharrefreplace_errors",
; 1128 :                 xmlcharrefreplace_errors,
; 1129 :                 METH_O,
; 1130 :                 PyDoc_STR("Implements the 'xmlcharrefreplace' error handling, "
; 1131 :                           "which replaces an unencodable character with the "
; 1132 :                           "appropriate XML character reference.")
; 1133 :             }
; 1134 :         },
; 1135 :         {
; 1136 :             "backslashreplace",
; 1137 :             {
; 1138 :                 "backslashreplace_errors",
; 1139 :                 backslashreplace_errors,
; 1140 :                 METH_O,
; 1141 :                 PyDoc_STR("Implements the 'backslashreplace' error handling, "
; 1142 :                           "which replaces an unencodable character with a "
; 1143 :                           "backslashed escape sequence.")
; 1144 :             }
; 1145 :         },
; 1146 :         {
; 1147 :             "surrogatepass",
; 1148 :             {
; 1149 :                 "surrogatepass",
; 1150 :                 surrogatepass_errors,
; 1151 :                 METH_O
; 1152 :             }
; 1153 :         },
; 1154 :         {
; 1155 :             "surrogateescape",
; 1156 :             {
; 1157 :                 "surrogateescape",
; 1158 :                 surrogateescape_errors,
; 1159 :                 METH_O
; 1160 :             }
; 1161 :         }
; 1162 :     };
; 1163 : 
; 1164 :     PyInterpreterState *interp = PyThreadState_GET()->interp;

  00004	e8 00 00 00 00	 call	 PyThreadState_Get
  00009	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0000d	48 89 44 24 28	 mov	 QWORD PTR interp$[rsp], rax

; 1165 :     PyObject *mod;
; 1166 :     unsigned i;
; 1167 : 
; 1168 :     if (interp->codec_search_path != NULL)

  00012	48 8b 44 24 28	 mov	 rax, QWORD PTR interp$[rsp]
  00017	48 83 78 38 00	 cmp	 QWORD PTR [rax+56], 0
  0001c	74 07		 je	 SHORT $LN10@PyCodecReg

; 1169 :         return 0;

  0001e	33 c0		 xor	 eax, eax
  00020	e9 3f 01 00 00	 jmp	 $LN11@PyCodecReg
$LN10@PyCodecReg:

; 1170 : 
; 1171 :     interp->codec_search_path = PyList_New(0);

  00025	33 c9		 xor	 ecx, ecx
  00027	e8 00 00 00 00	 call	 PyList_New
  0002c	48 8b 4c 24 28	 mov	 rcx, QWORD PTR interp$[rsp]
  00031	48 89 41 38	 mov	 QWORD PTR [rcx+56], rax

; 1172 :     interp->codec_search_cache = PyDict_New();

  00035	e8 00 00 00 00	 call	 PyDict_New
  0003a	48 8b 4c 24 28	 mov	 rcx, QWORD PTR interp$[rsp]
  0003f	48 89 41 40	 mov	 QWORD PTR [rcx+64], rax

; 1173 :     interp->codec_error_registry = PyDict_New();

  00043	e8 00 00 00 00	 call	 PyDict_New
  00048	48 8b 4c 24 28	 mov	 rcx, QWORD PTR interp$[rsp]
  0004d	48 89 41 48	 mov	 QWORD PTR [rcx+72], rax

; 1174 : 
; 1175 :     if (interp->codec_error_registry) {

  00051	48 8b 44 24 28	 mov	 rax, QWORD PTR interp$[rsp]
  00056	48 83 78 48 00	 cmp	 QWORD PTR [rax+72], 0
  0005b	0f 84 9b 00 00
	00		 je	 $LN9@PyCodecReg

; 1176 :         for (i = 0; i < Py_ARRAY_LENGTH(methods); ++i) {

  00061	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00069	eb 0a		 jmp	 SHORT $LN8@PyCodecReg
$LN7@PyCodecReg:
  0006b	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  0006f	ff c0		 inc	 eax
  00071	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN8@PyCodecReg:
  00075	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  00079	48 83 f8 07	 cmp	 rax, 7
  0007d	73 7d		 jae	 SHORT $LN6@PyCodecReg

; 1177 :             PyObject *func = PyCFunction_New(&methods[i].def, NULL);

  0007f	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  00083	48 6b c0 28	 imul	 rax, 40			; 00000028H
  00087	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?methods@?1??_PyCodecRegistry_Init@@9@9
  0008e	48 8d 44 01 08	 lea	 rax, QWORD PTR [rcx+rax+8]
  00093	45 33 c0	 xor	 r8d, r8d
  00096	33 d2		 xor	 edx, edx
  00098	48 8b c8	 mov	 rcx, rax
  0009b	e8 00 00 00 00	 call	 PyCFunction_NewEx
  000a0	48 89 44 24 40	 mov	 QWORD PTR func$21641[rsp], rax

; 1178 :             int res;
; 1179 :             if (!func)

  000a5	48 83 7c 24 40
	00		 cmp	 QWORD PTR func$21641[rsp], 0
  000ab	75 0c		 jne	 SHORT $LN5@PyCodecReg

; 1180 :                 Py_FatalError("can't initialize codec error registry");

  000ad	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CG@KAJPKAEK@can?8t?5initialize?5codec?5error?5reg@
  000b4	e8 00 00 00 00	 call	 Py_FatalError
$LN5@PyCodecReg:

; 1181 :             res = PyCodec_RegisterError(methods[i].name, func);

  000b9	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  000bd	48 6b c0 28	 imul	 rax, 40			; 00000028H
  000c1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?methods@?1??_PyCodecRegistry_Init@@9@9
  000c8	48 8b 54 24 40	 mov	 rdx, QWORD PTR func$21641[rsp]
  000cd	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  000d1	e8 00 00 00 00	 call	 PyCodec_RegisterError
  000d6	89 44 24 38	 mov	 DWORD PTR res$21644[rsp], eax

; 1182 :             Py_DECREF(func);

  000da	48 8b 4c 24 40	 mov	 rcx, QWORD PTR func$21641[rsp]
  000df	e8 00 00 00 00	 call	 _Py_DecRef

; 1183 :             if (res)

  000e4	83 7c 24 38 00	 cmp	 DWORD PTR res$21644[rsp], 0
  000e9	74 0c		 je	 SHORT $LN4@PyCodecReg

; 1184 :                 Py_FatalError("can't initialize codec error registry");

  000eb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CG@KAJPKAEK@can?8t?5initialize?5codec?5error?5reg@
  000f2	e8 00 00 00 00	 call	 Py_FatalError
$LN4@PyCodecReg:

; 1185 :         }

  000f7	e9 6f ff ff ff	 jmp	 $LN7@PyCodecReg
$LN6@PyCodecReg:
$LN9@PyCodecReg:

; 1186 :     }
; 1187 : 
; 1188 :     if (interp->codec_search_path == NULL ||
; 1189 :         interp->codec_search_cache == NULL ||
; 1190 :         interp->codec_error_registry == NULL)

  000fc	48 8b 44 24 28	 mov	 rax, QWORD PTR interp$[rsp]
  00101	48 83 78 38 00	 cmp	 QWORD PTR [rax+56], 0
  00106	74 18		 je	 SHORT $LN2@PyCodecReg
  00108	48 8b 44 24 28	 mov	 rax, QWORD PTR interp$[rsp]
  0010d	48 83 78 40 00	 cmp	 QWORD PTR [rax+64], 0
  00112	74 0c		 je	 SHORT $LN2@PyCodecReg
  00114	48 8b 44 24 28	 mov	 rax, QWORD PTR interp$[rsp]
  00119	48 83 78 48 00	 cmp	 QWORD PTR [rax+72], 0
  0011e	75 0c		 jne	 SHORT $LN3@PyCodecReg
$LN2@PyCodecReg:

; 1191 :         Py_FatalError("can't initialize codec registry");

  00120	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CA@HPGLPMCB@can?8t?5initialize?5codec?5registry?$AA@
  00127	e8 00 00 00 00	 call	 Py_FatalError
$LN3@PyCodecReg:

; 1192 : 
; 1193 :     mod = PyImport_ImportModuleNoBlock("encodings");

  0012c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09JLELGAP@encodings?$AA@
  00133	e8 00 00 00 00	 call	 PyImport_ImportModuleNoBlock
  00138	48 89 44 24 30	 mov	 QWORD PTR mod$[rsp], rax

; 1194 :     if (mod == NULL) {

  0013d	48 83 7c 24 30
	00		 cmp	 QWORD PTR mod$[rsp], 0
  00143	75 07		 jne	 SHORT $LN1@PyCodecReg

; 1195 :         return -1;

  00145	b8 ff ff ff ff	 mov	 eax, -1
  0014a	eb 18		 jmp	 SHORT $LN11@PyCodecReg
$LN1@PyCodecReg:

; 1196 :     }
; 1197 :     Py_DECREF(mod);

  0014c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR mod$[rsp]
  00151	e8 00 00 00 00	 call	 _Py_DecRef

; 1198 :     interp->codecs_initialized = 1;

  00156	48 8b 44 24 28	 mov	 rax, QWORD PTR interp$[rsp]
  0015b	c7 40 50 01 00
	00 00		 mov	 DWORD PTR [rax+80], 1

; 1199 :     return 0;

  00162	33 c0		 xor	 eax, eax
$LN11@PyCodecReg:

; 1200 : }

  00164	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00168	c3		 ret	 0
_PyCodecRegistry_Init ENDP
_TEXT	ENDS
END
