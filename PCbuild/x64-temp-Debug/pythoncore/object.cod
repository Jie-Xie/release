; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0BD@LEGJMDGP@NotImplementedType?$AA@	; `string'
PUBLIC	??_C@_08BCACFJCN@NoneType?$AA@			; `string'
PUBLIC	??_C@_07FPPEEAND@__dir__?$AA@			; `string'
PUBLIC	??_C@_0BF@LPKCECDC@__isabstractmethod__?$AA@	; `string'
PUBLIC	??_C@_02EEKDKGMJ@?$DO?$DN?$AA@			; `string'
PUBLIC	??_C@_01PPODPGHN@?$DO?$AA@			; `string'
PUBLIC	??_C@_02FDNJECIE@?$CB?$DN?$AA@			; `string'
PUBLIC	??_C@_02EGOFBIJA@?$DN?$DN?$AA@			; `string'
PUBLIC	??_C@_02EHCHHCKH@?$DM?$DN?$AA@			; `string'
PUBLIC	??_C@_01MNNFJEPP@?$DM?$AA@			; `string'
PUBLIC	??_C@_09PAJHGGFL@__bytes__?$AA@			; `string'
PUBLIC	_Py_SwappedOp
PUBLIC	_PyNone_Type
PUBLIC	_Py_NoneStruct
PUBLIC	_PyNotImplemented_Type
PUBLIC	_Py_NotImplementedStruct
PUBLIC	_PyCapsule_hack
PUBLIC	_Py_abstract_hack
PUBLIC	_PyTrash_delete_nesting
PUBLIC	_PyTrash_delete_later
EXTRN	PyObject_Size:PROC
EXTRN	PyCapsule_Type:BYTE
EXTRN	PyType_Type:BYTE
_DATA	SEGMENT
COMM	_Py_RefTotal:QWORD
COMM	_Py_HashSecret:BYTE:010H
_DATA	ENDS
_BSS	SEGMENT
_PyTrash_delete_nesting DD 01H DUP (?)
	ALIGN	8

_PyTrash_delete_later DQ 01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_0BD@LEGJMDGP@NotImplementedType?$AA@
CONST	SEGMENT
??_C@_0BD@LEGJMDGP@NotImplementedType?$AA@ DB 'NotImplementedType', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08BCACFJCN@NoneType?$AA@
CONST	SEGMENT
??_C@_08BCACFJCN@NoneType?$AA@ DB 'NoneType', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07FPPEEAND@__dir__?$AA@
CONST	SEGMENT
??_C@_07FPPEEAND@__dir__?$AA@ DB '__dir__', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@LPKCECDC@__isabstractmethod__?$AA@
CONST	SEGMENT
??_C@_0BF@LPKCECDC@__isabstractmethod__?$AA@ DB '__isabstractmethod__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02EEKDKGMJ@?$DO?$DN?$AA@
CONST	SEGMENT
??_C@_02EEKDKGMJ@?$DO?$DN?$AA@ DB '>=', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01PPODPGHN@?$DO?$AA@
CONST	SEGMENT
??_C@_01PPODPGHN@?$DO?$AA@ DB '>', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02FDNJECIE@?$CB?$DN?$AA@
CONST	SEGMENT
??_C@_02FDNJECIE@?$CB?$DN?$AA@ DB '!=', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02EGOFBIJA@?$DN?$DN?$AA@
CONST	SEGMENT
??_C@_02EGOFBIJA@?$DN?$DN?$AA@ DB '==', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02EHCHHCKH@?$DM?$DN?$AA@
CONST	SEGMENT
??_C@_02EHCHHCKH@?$DM?$DN?$AA@ DB '<=', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01MNNFJEPP@?$DM?$AA@
CONST	SEGMENT
??_C@_01MNNFJEPP@?$DM?$AA@ DB '<', 00H			; `string'
CONST	ENDS
_TLS	SEGMENT
?PyId___dir__@?1??_dir_object@@9@9 DQ 0000000000000000H	; `_dir_object'::`2'::PyId___dir__
	DQ	FLAT:??_C@_07FPPEEAND@__dir__?$AA@
	DQ	0000000000000000H
?PyId___isabstractmethod__@?1??_PyObject_IsAbstract@@9@9 DQ 0000000000000000H ; `_PyObject_IsAbstract'::`2'::PyId___isabstractmethod__
	DQ	FLAT:??_C@_0BF@LPKCECDC@__isabstractmethod__?$AA@
	DQ	0000000000000000H
?PyId___bytes__@?1??PyObject_Bytes@@9@9 DQ 0000000000000000H ; `PyObject_Bytes'::`2'::PyId___bytes__
	DQ	FLAT:??_C@_09PAJHGGFL@__bytes__?$AA@
	DQ	0000000000000000H
_TLS	ENDS
;	COMDAT ??_C@_09PAJHGGFL@__bytes__?$AA@
CONST	SEGMENT
??_C@_09PAJHGGFL@__bytes__?$AA@ DB '__bytes__', 00H	; `string'
CONST	ENDS
_DATA	SEGMENT
refchain DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:refchain
	DQ	FLAT:refchain
	ORG $+16
_Py_SwappedOp DD 04H
	DD	05H
	DD	02H
	DD	03H
	DD	00H
	DD	01H
opstrings DQ	FLAT:??_C@_01MNNFJEPP@?$DM?$AA@
	DQ	FLAT:??_C@_02EHCHHCKH@?$DM?$DN?$AA@
	DQ	FLAT:??_C@_02EGOFBIJA@?$DN?$DN?$AA@
	DQ	FLAT:??_C@_02FDNJECIE@?$CB?$DN?$AA@
	DQ	FLAT:??_C@_01PPODPGHN@?$DO?$AA@
	DQ	FLAT:??_C@_02EEKDKGMJ@?$DO?$DN?$AA@
_PyCapsule_hack DQ FLAT:PyCapsule_Type
none_as_number DQ 0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:none_bool
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
_PyNone_Type DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_08BCACFJCN@NoneType?$AA@
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:none_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:none_repr
	DQ	FLAT:none_as_number
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	040000H
	ORG $+4
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:none_new
	ORG $+72
_Py_NoneStruct DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:_PyNone_Type
_PyNotImplemented_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0BD@LEGJMDGP@NotImplementedType?$AA@
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:none_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:NotImplemented_repr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	040000H
	ORG $+4
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:notimplemented_new
	ORG $+72
_Py_NotImplementedStruct DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:_PyNotImplemented_Type
_Py_abstract_hack DQ FLAT:PyObject_Size
_DATA	ENDS
PUBLIC	??_C@_0BA@OPMDLGJK@_Py_GetRefTotal?$AA@		; `string'
PUBLIC	??_C@_0BE@LBNADOJM@?4?4?2Objects?2object?4c?$AA@ ; `string'
PUBLIC	_Py_GetRefTotal
EXTRN	_PySet_Dummy:PROC
EXTRN	_PyDict_Dummy:PROC
EXTRN	_PyParallel_ContextGuardFailure:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\objects\object.c
pdata	SEGMENT
$pdata$_Py_GetRefTotal DD imagerel $LN6
	DD	imagerel $LN6+149
	DD	imagerel $unwind$_Py_GetRefTotal
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_GetRefTotal DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_0BA@OPMDLGJK@_Py_GetRefTotal?$AA@
CONST	SEGMENT
??_C@_0BA@OPMDLGJK@_Py_GetRefTotal?$AA@ DB '_Py_GetRefTotal', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@LBNADOJM@?4?4?2Objects?2object?4c?$AA@
CONST	SEGMENT
??_C@_0BE@LBNADOJM@?4?4?2Objects?2object?4c?$AA@ DB '..\Objects\object.c', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_GetRefTotal
_TEXT	SEGMENT
total$ = 32
o$ = 40
_Py_GetRefTotal PROC					; COMDAT

; 23   : {

$LN6:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 24   :     PyObject *o;
; 25   :     Py_ssize_t total;
; 26   :     Py_GUARD

  00004	e8 00 00 00 00	 call	 _Py_PXCTX
  00009	85 c0		 test	 eax, eax
  0000b	74 1c		 je	 SHORT $LN3@Py_GetRefT
  0000d	45 33 c9	 xor	 r9d, r9d
  00010	41 b8 1a 00 00
	00		 mov	 r8d, 26
  00016	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@LBNADOJM@?4?4?2Objects?2object?4c?$AA@
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@OPMDLGJK@_Py_GetRefTotal?$AA@
  00024	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@Py_GetRefT:

; 27   :     total = _Py_RefTotal;

  00029	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00030	48 89 44 24 20	 mov	 QWORD PTR total$[rsp], rax

; 28   :     /* ignore the references to the dummy object of the dicts and sets
; 29   :        because they are not reliable and not useful (now that the
; 30   :        hash table code is well-tested) */
; 31   :     o = _PyDict_Dummy();

  00035	e8 00 00 00 00	 call	 _PyDict_Dummy
  0003a	48 89 44 24 28	 mov	 QWORD PTR o$[rsp], rax

; 32   :     if (o != NULL)

  0003f	48 83 7c 24 28
	00		 cmp	 QWORD PTR o$[rsp], 0
  00045	74 19		 je	 SHORT $LN2@Py_GetRefT

; 33   :         total -= o->ob_refcnt;

  00047	48 8b 44 24 28	 mov	 rax, QWORD PTR o$[rsp]
  0004c	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00050	48 8b 4c 24 20	 mov	 rcx, QWORD PTR total$[rsp]
  00055	48 2b c8	 sub	 rcx, rax
  00058	48 8b c1	 mov	 rax, rcx
  0005b	48 89 44 24 20	 mov	 QWORD PTR total$[rsp], rax
$LN2@Py_GetRefT:

; 34   :     o = _PySet_Dummy();

  00060	e8 00 00 00 00	 call	 _PySet_Dummy
  00065	48 89 44 24 28	 mov	 QWORD PTR o$[rsp], rax

; 35   :     if (o != NULL)

  0006a	48 83 7c 24 28
	00		 cmp	 QWORD PTR o$[rsp], 0
  00070	74 19		 je	 SHORT $LN1@Py_GetRefT

; 36   :         total -= o->ob_refcnt;

  00072	48 8b 44 24 28	 mov	 rax, QWORD PTR o$[rsp]
  00077	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  0007b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR total$[rsp]
  00080	48 2b c8	 sub	 rcx, rax
  00083	48 8b c1	 mov	 rax, rcx
  00086	48 89 44 24 20	 mov	 QWORD PTR total$[rsp], rax
$LN1@Py_GetRefT:

; 37   :     return total;

  0008b	48 8b 44 24 20	 mov	 rax, QWORD PTR total$[rsp]

; 38   : }

  00090	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00094	c3		 ret	 0
_Py_GetRefTotal ENDP
_TEXT	ENDS
PUBLIC	??_C@_1GC@IHLKEHK@?$AA?$CI?$AAo?$AAp?$AA?9?$AA?$DO?$AA_?$AAo?$AAb?$AA_?$AAp?$AAr?$AAe?$AAv?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA?$CI?$AAo?$AAp?$AA?9?$AA?$DO?$AA_@ ; `string'
PUBLIC	??_C@_1CI@ONKHJAFP@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@ ; `string'
PUBLIC	_Py_AddToAllObjects
EXTRN	__imp__wassert:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_AddToAllObjects DD imagerel $LN12
	DD	imagerel $LN12+216
	DD	imagerel $unwind$_Py_AddToAllObjects
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_AddToAllObjects DD 010d01H
	DD	0620dH
xdata	ENDS
;	COMDAT ??_C@_1GC@IHLKEHK@?$AA?$CI?$AAo?$AAp?$AA?9?$AA?$DO?$AA_?$AAo?$AAb?$AA_?$AAp?$AAr?$AAe?$AAv?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA?$CI?$AAo?$AAp?$AA?9?$AA?$DO?$AA_@
CONST	SEGMENT
??_C@_1GC@IHLKEHK@?$AA?$CI?$AAo?$AAp?$AA?9?$AA?$DO?$AA_?$AAo?$AAb?$AA_?$AAp?$AAr?$AAe?$AAv?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA?$CI?$AAo?$AAp?$AA?9?$AA?$DO?$AA_@ DB '('
	DB	00H, 'o', 00H, 'p', 00H, '-', 00H, '>', 00H, '_', 00H, 'o', 00H
	DB	'b', 00H, '_', 00H, 'p', 00H, 'r', 00H, 'e', 00H, 'v', 00H, ' '
	DB	00H, '=', 00H, '=', 00H, ' ', 00H, 'N', 00H, 'U', 00H, 'L', 00H
	DB	'L', 00H, ')', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '('
	DB	00H, 'o', 00H, 'p', 00H, '-', 00H, '>', 00H, '_', 00H, 'o', 00H
	DB	'b', 00H, '_', 00H, 'n', 00H, 'e', 00H, 'x', 00H, 't', 00H, ' '
	DB	00H, '=', 00H, '=', 00H, ' ', 00H, 'N', 00H, 'U', 00H, 'L', 00H
	DB	'L', 00H, ')', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1CI@ONKHJAFP@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
CONST	SEGMENT
??_C@_1CI@ONKHJAFP@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@ DB '.'
	DB	00H, '.', 00H, '\', 00H, 'O', 00H, 'b', 00H, 'j', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 's', 00H, '\', 00H, 'o', 00H, 'b', 00H, 'j'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, '.', 00H, 'c', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_AddToAllObjects
_TEXT	SEGMENT
tv72 = 32
tv71 = 36
op$ = 64
force$ = 72
_Py_AddToAllObjects PROC				; COMDAT

; 79   : {

$LN12:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 80   :     Px_VOID

  0000d	e8 00 00 00 00	 call	 _Py_PXCTX
  00012	85 c0		 test	 eax, eax
  00014	74 05		 je	 SHORT $LN4@Py_AddToAl
  00016	e9 b8 00 00 00	 jmp	 $LN5@Py_AddToAl
$LN4@Py_AddToAl:

; 81   : #ifdef  Py_DEBUG
; 82   :     if (!force) {

  0001b	83 7c 24 48 00	 cmp	 DWORD PTR force$[rsp], 0
  00020	75 62		 jne	 SHORT $LN3@Py_AddToAl

; 83   :         /* If it's initialized memory, op must be in or out of
; 84   :          * the list unambiguously.
; 85   :          */
; 86   :         assert((op->_ob_prev == NULL) == (op->_ob_next == NULL));

  00022	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  00027	48 83 78 48 00	 cmp	 QWORD PTR [rax+72], 0
  0002c	75 0a		 jne	 SHORT $LN9@Py_AddToAl
  0002e	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv72[rsp], 1
  00036	eb 08		 jmp	 SHORT $LN10@Py_AddToAl
$LN9@Py_AddToAl:
  00038	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv72[rsp], 0
$LN10@Py_AddToAl:
  00040	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  00045	48 83 78 40 00	 cmp	 QWORD PTR [rax+64], 0
  0004a	75 0a		 jne	 SHORT $LN7@Py_AddToAl
  0004c	c7 44 24 24 01
	00 00 00	 mov	 DWORD PTR tv71[rsp], 1
  00054	eb 08		 jmp	 SHORT $LN8@Py_AddToAl
$LN7@Py_AddToAl:
  00056	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR tv71[rsp], 0
$LN8@Py_AddToAl:
  0005e	8b 44 24 24	 mov	 eax, DWORD PTR tv71[rsp]
  00062	39 44 24 20	 cmp	 DWORD PTR tv72[rsp], eax
  00066	74 1c		 je	 SHORT $LN11@Py_AddToAl
  00068	41 b8 56 00 00
	00		 mov	 r8d, 86			; 00000056H
  0006e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CI@ONKHJAFP@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00075	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1GC@IHLKEHK@?$AA?$CI?$AAo?$AAp?$AA?9?$AA?$DO?$AA_?$AAo?$AAb?$AA_?$AAp?$AAr?$AAe?$AAv?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA?$CI?$AAo?$AAp?$AA?9?$AA?$DO?$AA_@
  0007c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00082	33 c0		 xor	 eax, eax
$LN11@Py_AddToAl:
$LN3@Py_AddToAl:

; 87   :     }
; 88   : #endif
; 89   :     if (force || op->_ob_prev == NULL) {

  00084	83 7c 24 48 00	 cmp	 DWORD PTR force$[rsp], 0
  00089	75 0c		 jne	 SHORT $LN1@Py_AddToAl
  0008b	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  00090	48 83 78 48 00	 cmp	 QWORD PTR [rax+72], 0
  00095	75 3c		 jne	 SHORT $LN2@Py_AddToAl
$LN1@Py_AddToAl:

; 90   :         op->_ob_next = refchain._ob_next;

  00097	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  0009c	48 8b 0d 40 00
	00 00		 mov	 rcx, QWORD PTR refchain+64
  000a3	48 89 48 40	 mov	 QWORD PTR [rax+64], rcx

; 91   :         op->_ob_prev = &refchain;

  000a7	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  000ac	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:refchain
  000b3	48 89 48 48	 mov	 QWORD PTR [rax+72], rcx

; 92   :         refchain._ob_next->_ob_prev = op;

  000b7	48 8b 05 40 00
	00 00		 mov	 rax, QWORD PTR refchain+64
  000be	48 8b 4c 24 40	 mov	 rcx, QWORD PTR op$[rsp]
  000c3	48 89 48 48	 mov	 QWORD PTR [rax+72], rcx

; 93   :         refchain._ob_next = op;

  000c7	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  000cc	48 89 05 40 00
	00 00		 mov	 QWORD PTR refchain+64, rax
$LN2@Py_AddToAl:
$LN5@Py_AddToAl:

; 94   :     }
; 95   : }

  000d3	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000d7	c3		 ret	 0
_Py_AddToAllObjects ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CO@ICBDNOMI@?$CFs?3?$CFi?5object?5at?5?$CFp?5has?5negative?5@ ; `string'
PUBLIC	??_C@_0BF@MJEBICDL@_Py_NegativeRefcount?$AA@	; `string'
PUBLIC	_Py_NegativeRefcount
EXTRN	Py_FatalError:PROC
EXTRN	PyOS_snprintf:PROC
EXTRN	_PyParallel_Guard:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_NegativeRefcount DD imagerel $LN3
	DD	imagerel $LN3+151
	DD	imagerel $unwind$_Py_NegativeRefcount
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_NegativeRefcount DD 021501H
	DD	02f0115H
xdata	ENDS
;	COMDAT ??_C@_0CO@ICBDNOMI@?$CFs?3?$CFi?5object?5at?5?$CFp?5has?5negative?5@
CONST	SEGMENT
??_C@_0CO@ICBDNOMI@?$CFs?3?$CFi?5object?5at?5?$CFp?5has?5negative?5@ DB '%'
	DB	's:%i object at %p has negative ref count %Id', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@MJEBICDL@_Py_NegativeRefcount?$AA@
CONST	SEGMENT
??_C@_0BF@MJEBICDL@_Py_NegativeRefcount?$AA@ DB '_Py_NegativeRefcount', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_NegativeRefcount
_TEXT	SEGMENT
buf$ = 64
fname$ = 384
lineno$ = 392
op$ = 400
_Py_NegativeRefcount PROC				; COMDAT

; 217  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 81 ec 78 01
	00 00		 sub	 rsp, 376		; 00000178H

; 218  :     char buf[300];
; 219  :     Py_GUARD_OBJ(op);

  00015	c7 44 24 20 20
	00 00 00	 mov	 DWORD PTR [rsp+32], 32	; 00000020H
  0001d	4c 8b 8c 24 90
	01 00 00	 mov	 r9, QWORD PTR op$[rsp]
  00025	41 b8 db 00 00
	00		 mov	 r8d, 219		; 000000dbH
  0002b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@LBNADOJM@?4?4?2Objects?2object?4c?$AA@
  00032	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@MJEBICDL@_Py_NegativeRefcount?$AA@
  00039	e8 00 00 00 00	 call	 _PyParallel_Guard

; 220  : 
; 221  :     PyOS_snprintf(buf, sizeof(buf),
; 222  :                   "%s:%i object at %p has negative ref count "
; 223  :                   "%" PY_FORMAT_SIZE_T "d",
; 224  :                   fname, lineno, op, op->ob_refcnt);

  0003e	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR op$[rsp]
  00046	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  0004a	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  0004f	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR op$[rsp]
  00057	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0005c	8b 84 24 88 01
	00 00		 mov	 eax, DWORD PTR lineno$[rsp]
  00063	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00067	4c 8b 8c 24 80
	01 00 00	 mov	 r9, QWORD PTR fname$[rsp]
  0006f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0CO@ICBDNOMI@?$CFs?3?$CFi?5object?5at?5?$CFp?5has?5negative?5@
  00076	ba 2c 01 00 00	 mov	 edx, 300		; 0000012cH
  0007b	48 8d 4c 24 40	 lea	 rcx, QWORD PTR buf$[rsp]
  00080	e8 00 00 00 00	 call	 PyOS_snprintf

; 225  :     Py_FatalError(buf);

  00085	48 8d 4c 24 40	 lea	 rcx, QWORD PTR buf$[rsp]
  0008a	e8 00 00 00 00	 call	 Py_FatalError

; 226  : }

  0008f	48 81 c4 78 01
	00 00		 add	 rsp, 376		; 00000178H
  00096	c3		 ret	 0
_Py_NegativeRefcount ENDP
_TEXT	ENDS
PUBLIC	_Py_IncRef
PUBLIC	??_C@_09FECHNEPL@Py_IncRef?$AA@			; `string'
PUBLIC	Py_IncRef
;	COMDAT pdata
pdata	SEGMENT
$pdata$Py_IncRef DD imagerel $LN8
	DD	imagerel $LN8+120
	DD	imagerel $unwind$Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Py_IncRef DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_09FECHNEPL@Py_IncRef?$AA@
CONST	SEGMENT
??_C@_09FECHNEPL@Py_IncRef?$AA@ DB 'Py_IncRef', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT Py_IncRef
_TEXT	SEGMENT
o$ = 64
Py_IncRef PROC						; COMDAT

; 232  : {

$LN8:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 233  :     Py_GUARD_OBJ(o);

  00009	c7 44 24 20 20
	00 00 00	 mov	 DWORD PTR [rsp+32], 32	; 00000020H
  00011	4c 8b 4c 24 40	 mov	 r9, QWORD PTR o$[rsp]
  00016	41 b8 e9 00 00
	00		 mov	 r8d, 233		; 000000e9H
  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@LBNADOJM@?4?4?2Objects?2object?4c?$AA@
  00023	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09FECHNEPL@Py_IncRef?$AA@
  0002a	e8 00 00 00 00	 call	 _PyParallel_Guard

; 234  :     Px_VOID_OP(o)

  0002f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00037	4c 8b 4c 24 40	 mov	 r9, QWORD PTR o$[rsp]
  0003c	41 b8 ea 00 00
	00		 mov	 r8d, 234		; 000000eaH
  00042	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@LBNADOJM@?4?4?2Objects?2object?4c?$AA@
  00049	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09FECHNEPL@Py_IncRef?$AA@
  00050	e8 00 00 00 00	 call	 _PyParallel_Guard
  00055	85 c0		 test	 eax, eax
  00057	74 02		 je	 SHORT $LN5@Py_IncRef
  00059	eb 18		 jmp	 SHORT $LN6@Py_IncRef
$LN5@Py_IncRef:
$LN4@Py_IncRef:

; 235  :     Py_XINCREF(o);

  0005b	48 83 7c 24 40
	00		 cmp	 QWORD PTR o$[rsp], 0
  00061	74 0a		 je	 SHORT $LN1@Py_IncRef
  00063	48 8b 4c 24 40	 mov	 rcx, QWORD PTR o$[rsp]
  00068	e8 00 00 00 00	 call	 _Py_IncRef
$LN1@Py_IncRef:
  0006d	33 c0		 xor	 eax, eax
  0006f	85 c0		 test	 eax, eax
  00071	75 e8		 jne	 SHORT $LN4@Py_IncRef
$LN6@Py_IncRef:

; 236  : }

  00073	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00077	c3		 ret	 0
Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN7
	DD	imagerel $LN7+132
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 6d		 jne	 SHORT $LN2@Py_IncRef@2
  00012	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0001a	4c 8b 4c 24 40	 mov	 r9, QWORD PTR op$[rsp]
  0001f	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_Guard
  00038	85 c0		 test	 eax, eax
  0003a	75 12		 jne	 SHORT $LN1@Py_IncRef@2
  0003c	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  00041	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00045	48 83 e0 20	 and	 rax, 32			; 00000020H
  00049	48 85 c0	 test	 rax, rax
  0004c	74 31		 je	 SHORT $LN2@Py_IncRef@2
$LN1@Py_IncRef@2:

; 906  :         _Py_INC_REFTOTAL;

  0004e	e8 00 00 00 00	 call	 _Py_PXCTX
  00053	85 c0		 test	 eax, eax
  00055	74 02		 je	 SHORT $LN5@Py_IncRef@2
  00057	eb 11		 jmp	 SHORT $LN6@Py_IncRef@2
$LN5@Py_IncRef@2:
  00059	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00060	48 ff c0	 inc	 rax
  00063	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN6@Py_IncRef@2:

; 907  :         (((PyObject*)(op))->ob_refcnt++);

  0006a	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  0006f	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00073	48 ff c0	 inc	 rax
  00076	48 8b 4c 24 40	 mov	 rcx, QWORD PTR op$[rsp]
  0007b	48 89 41 50	 mov	 QWORD PTR [rcx+80], rax
$LN2@Py_IncRef@2:

; 908  :     }
; 909  : }

  0007f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00083	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	_Py_DecRef
PUBLIC	??_C@_09FPDHEFPI@Py_DecRef?$AA@			; `string'
PUBLIC	Py_DecRef
;	COMDAT pdata
; File c:\src\pyparallel\objects\object.c
pdata	SEGMENT
$pdata$Py_DecRef DD imagerel $LN8
	DD	imagerel $LN8+120
	DD	imagerel $unwind$Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Py_DecRef DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_09FPDHEFPI@Py_DecRef?$AA@
CONST	SEGMENT
??_C@_09FPDHEFPI@Py_DecRef?$AA@ DB 'Py_DecRef', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT Py_DecRef
_TEXT	SEGMENT
o$ = 64
Py_DecRef PROC						; COMDAT

; 240  : {

$LN8:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 241  :     Py_GUARD_OBJ(o);

  00009	c7 44 24 20 20
	00 00 00	 mov	 DWORD PTR [rsp+32], 32	; 00000020H
  00011	4c 8b 4c 24 40	 mov	 r9, QWORD PTR o$[rsp]
  00016	41 b8 f1 00 00
	00		 mov	 r8d, 241		; 000000f1H
  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@LBNADOJM@?4?4?2Objects?2object?4c?$AA@
  00023	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09FPDHEFPI@Py_DecRef?$AA@
  0002a	e8 00 00 00 00	 call	 _PyParallel_Guard

; 242  :     Px_VOID_OP(o)

  0002f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00037	4c 8b 4c 24 40	 mov	 r9, QWORD PTR o$[rsp]
  0003c	41 b8 f2 00 00
	00		 mov	 r8d, 242		; 000000f2H
  00042	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@LBNADOJM@?4?4?2Objects?2object?4c?$AA@
  00049	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09FPDHEFPI@Py_DecRef?$AA@
  00050	e8 00 00 00 00	 call	 _PyParallel_Guard
  00055	85 c0		 test	 eax, eax
  00057	74 02		 je	 SHORT $LN5@Py_DecRef
  00059	eb 18		 jmp	 SHORT $LN6@Py_DecRef
$LN5@Py_DecRef:
$LN4@Py_DecRef:

; 243  :     Py_XDECREF(o);

  0005b	48 83 7c 24 40
	00		 cmp	 QWORD PTR o$[rsp], 0
  00061	74 0a		 je	 SHORT $LN1@Py_DecRef
  00063	48 8b 4c 24 40	 mov	 rcx, QWORD PTR o$[rsp]
  00068	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@Py_DecRef:
  0006d	33 c0		 xor	 eax, eax
  0006f	85 c0		 test	 eax, eax
  00071	75 e8		 jne	 SHORT $LN4@Py_DecRef
$LN6@Py_DecRef:

; 244  : }

  00073	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00077	c3		 ret	 0
Py_DecRef ENDP
_TEXT	ENDS
PUBLIC	_Py_Dealloc
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
EXTRN	Px_DecRef:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN13
	DD	imagerel $LN13+257
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
tv81 = 48
op$ = 80
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN13:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	0f 85 e6 00 00
	00		 jne	 $LN8@Py_DecRef@2

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00016	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0001b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0001f	48 83 e0 20	 and	 rax, 32			; 00000020H
  00023	48 85 c0	 test	 rax, rax
  00026	75 14		 jne	 SHORT $LN6@Py_DecRef@2
  00028	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0002d	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00031	48 25 80 00 00
	00		 and	 rax, 128		; 00000080H
  00037	48 85 c0	 test	 rax, rax
  0003a	74 0f		 je	 SHORT $LN7@Py_DecRef@2
$LN6@Py_DecRef@2:

; 926  :             Px_DECREF(op);

  0003c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  00041	e8 00 00 00 00	 call	 Px_DecRef
  00046	e9 b1 00 00 00	 jmp	 $LN5@Py_DecRef@2
$LN7@Py_DecRef@2:

; 927  :         else if (!Px_ISPX(op)) {

  0004b	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00050	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00054	48 83 e0 02	 and	 rax, 2
  00058	48 85 c0	 test	 rax, rax
  0005b	0f 85 9b 00 00
	00		 jne	 $LN4@Py_DecRef@2

; 928  :             _Py_DEC_REFTOTAL;

  00061	e8 00 00 00 00	 call	 _Py_PXCTX
  00066	85 c0		 test	 eax, eax
  00068	74 02		 je	 SHORT $LN11@Py_DecRef@2
  0006a	eb 11		 jmp	 SHORT $LN12@Py_DecRef@2
$LN11@Py_DecRef@2:
  0006c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00073	48 ff c8	 dec	 rax
  00076	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN12@Py_DecRef@2:

; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  0007d	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00082	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00086	48 ff c8	 dec	 rax
  00089	48 89 44 24 30	 mov	 QWORD PTR tv81[rsp], rax
  0008e	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00093	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv81[rsp]
  00098	48 89 48 50	 mov	 QWORD PTR [rax+80], rcx
  0009c	48 83 7c 24 30
	00		 cmp	 QWORD PTR tv81[rsp], 0
  000a2	74 4e		 je	 SHORT $LN3@Py_DecRef@2

; 930  :                 _Py_CHECK_REFCNT(op);

  000a4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000ac	4c 8b 4c 24 50	 mov	 r9, QWORD PTR op$[rsp]
  000b1	41 b8 a2 03 00
	00		 mov	 r8d, 930		; 000003a2H
  000b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000c5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ca	85 c0		 test	 eax, eax
  000cc	75 22		 jne	 SHORT $LN2@Py_DecRef@2
  000ce	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  000d3	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000d8	7d 16		 jge	 SHORT $LN2@Py_DecRef@2
  000da	4c 8b 44 24 50	 mov	 r8, QWORD PTR op$[rsp]
  000df	ba a2 03 00 00	 mov	 edx, 930		; 000003a2H
  000e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000eb	e8 00 00 00 00	 call	 _Py_NegativeRefcount
$LN2@Py_DecRef@2:

; 931  :             } else

  000f0	eb 0a		 jmp	 SHORT $LN1@Py_DecRef@2
$LN3@Py_DecRef@2:

; 932  :                 _Py_Dealloc((PyObject *)(op));

  000f2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  000f7	e8 00 00 00 00	 call	 _Py_Dealloc
$LN1@Py_DecRef@2:
$LN4@Py_DecRef@2:
$LN5@Py_DecRef@2:
$LN8@Py_DecRef@2:

; 933  :         }
; 934  :     }
; 935  : }

  000fc	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00100	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
PUBLIC	_Py_NewReference
PUBLIC	??_C@_0O@JHIEHDPE@PyObject_Init?$AA@		; `string'
PUBLIC	PyObject_Init
EXTRN	_PxObject_Init:PROC
EXTRN	PyErr_NoMemory:PROC
;	COMDAT pdata
; File c:\src\pyparallel\objects\object.c
pdata	SEGMENT
$pdata$PyObject_Init DD imagerel $LN5
	DD	imagerel $LN5+137
	DD	imagerel $unwind$PyObject_Init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyObject_Init DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT ??_C@_0O@JHIEHDPE@PyObject_Init?$AA@
CONST	SEGMENT
??_C@_0O@JHIEHDPE@PyObject_Init?$AA@ DB 'PyObject_Init', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyObject_Init
_TEXT	SEGMENT
op$ = 64
tp$ = 72
PyObject_Init PROC					; COMDAT

; 248  : {

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 249  :     if (op == NULL)

  0000e	48 83 7c 24 40
	00		 cmp	 QWORD PTR op$[rsp], 0
  00014	75 07		 jne	 SHORT $LN2@PyObject_I

; 250  :         return PyErr_NoMemory();

  00016	e8 00 00 00 00	 call	 PyErr_NoMemory
  0001b	eb 67		 jmp	 SHORT $LN3@PyObject_I
$LN2@PyObject_I:

; 251  :     Px_RETURN(_PxObject_Init(op, tp))

  0001d	e8 00 00 00 00	 call	 _Py_PXCTX
  00022	85 c0		 test	 eax, eax
  00024	74 11		 je	 SHORT $LN1@PyObject_I
  00026	48 8b 54 24 48	 mov	 rdx, QWORD PTR tp$[rsp]
  0002b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR op$[rsp]
  00030	e8 00 00 00 00	 call	 _PxObject_Init
  00035	eb 4d		 jmp	 SHORT $LN3@PyObject_I
$LN1@PyObject_I:

; 252  :     Py_GUARD_MEM(op);

  00037	c7 44 24 20 00
	02 00 00	 mov	 DWORD PTR [rsp+32], 512	; 00000200H
  0003f	4c 8b 4c 24 40	 mov	 r9, QWORD PTR op$[rsp]
  00044	41 b8 fc 00 00
	00		 mov	 r8d, 252		; 000000fcH
  0004a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@LBNADOJM@?4?4?2Objects?2object?4c?$AA@
  00051	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@JHIEHDPE@PyObject_Init?$AA@
  00058	e8 00 00 00 00	 call	 _PyParallel_Guard

; 253  :     /* Any changes should be reflected in PyObject_INIT (objimpl.h) */
; 254  :     Py_TYPE(op) = tp;

  0005d	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  00062	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tp$[rsp]
  00067	48 89 48 58	 mov	 QWORD PTR [rax+88], rcx

; 255  :     _PyObject_InitHead(op);

  0006b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR op$[rsp]
  00070	e8 00 00 00 00	 call	 _PyObject_InitHead

; 256  :     _Py_NewReference(op);

  00075	48 8b 4c 24 40	 mov	 rcx, QWORD PTR op$[rsp]
  0007a	e8 00 00 00 00	 call	 _Py_NewReference

; 257  :     return op;

  0007f	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
$LN3@PyObject_I:

; 258  : }

  00084	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00088	c3		 ret	 0
PyObject_Init ENDP
_TEXT	ENDS
PUBLIC	??_C@_1BI@GPFDFIDP@?$AAP?$AAy?$AA_?$AAT?$AAY?$AAP?$AAE?$AA?$CI?$AAo?$AAp?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1EI@MBCBHLGB@?$AAc?$AA?3?$AA?2?$AAs?$AAr?$AAc?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?2?$AAi?$AAn?$AAc?$AAl?$AAu?$AAd?$AAe?$AA?2?$AAo?$AAb?$AAj?$AAi?$AAm?$AAp@ ; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\objimpl.h
pdata	SEGMENT
$pdata$_PyObject_InitHead DD imagerel _PyObject_InitHead
	DD	imagerel _PyObject_InitHead+182
	DD	imagerel $unwind$_PyObject_InitHead
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyObject_InitHead DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT ??_C@_1BI@GPFDFIDP@?$AAP?$AAy?$AA_?$AAT?$AAY?$AAP?$AAE?$AA?$CI?$AAo?$AAp?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1BI@GPFDFIDP@?$AAP?$AAy?$AA_?$AAT?$AAY?$AAP?$AAE?$AA?$CI?$AAo?$AAp?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, '_', 00H, 'T', 00H, 'Y', 00H, 'P', 00H, 'E', 00H
	DB	'(', 00H, 'o', 00H, 'p', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EI@MBCBHLGB@?$AAc?$AA?3?$AA?2?$AAs?$AAr?$AAc?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?2?$AAi?$AAn?$AAc?$AAl?$AAu?$AAd?$AAe?$AA?2?$AAo?$AAb?$AAj?$AAi?$AAm?$AAp@
CONST	SEGMENT
??_C@_1EI@MBCBHLGB@?$AAc?$AA?3?$AA?2?$AAs?$AAr?$AAc?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?2?$AAi?$AAn?$AAc?$AAl?$AAu?$AAd?$AAe?$AA?2?$AAo?$AAb?$AAj?$AAi?$AAm?$AAp@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H
	DB	'p', 00H, 'y', 00H, 'p', 00H, 'a', 00H, 'r', 00H, 'a', 00H, 'l'
	DB	00H, 'l', 00H, 'e', 00H, 'l', 00H, '\', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'o'
	DB	00H, 'b', 00H, 'j', 00H, 'i', 00H, 'm', 00H, 'p', 00H, 'l', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PyObject_InitHead
_TEXT	SEGMENT
op$ = 48
_PyObject_InitHead PROC					; COMDAT

; 215  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 216  :     assert(Py_TYPE(op));

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  0000e	48 83 78 58 00	 cmp	 QWORD PTR [rax+88], 0
  00013	75 1c		 jne	 SHORT $LN3@PyObject_I@2
  00015	41 b8 d8 00 00
	00		 mov	 r8d, 216		; 000000d8H
  0001b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EI@MBCBHLGB@?$AAc?$AA?3?$AA?2?$AAs?$AAr?$AAc?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?2?$AAi?$AAn?$AAc?$AAl?$AAu?$AAd?$AAe?$AA?2?$AAo?$AAb?$AAj?$AAi?$AAm?$AAp@
  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BI@GPFDFIDP@?$AAP?$AAy?$AA_?$AAT?$AAY?$AAP?$AAE?$AA?$CI?$AAo?$AAp?$AA?$CJ?$AA?$AA@
  00029	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0002f	33 c0		 xor	 eax, eax
$LN3@PyObject_I@2:

; 217  :     op->is_px = _Py_NOT_PARALLEL;

  00031	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  00036	48 b9 78 56 ef
	be 34 12 ad de	 mov	 rcx, -2401243008567650696 ; dead1234beef5678H
  00040	48 89 08	 mov	 QWORD PTR [rax], rcx

; 218  :     op->px    = _Py_NOT_PARALLEL;

  00043	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  00048	48 b9 78 56 ef
	be 34 12 ad de	 mov	 rcx, -2401243008567650696 ; dead1234beef5678H
  00052	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 219  :     op->slist_entry.Next = NULL;

  00056	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  0005b	48 c7 40 10 00
	00 00 00	 mov	 QWORD PTR [rax+16], 0

; 220  :     op->px_flags  = Py_PXFLAGS_ISPY;

  00063	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  00068	48 c7 40 20 01
	00 00 00	 mov	 QWORD PTR [rax+32], 1

; 221  :     op->srw_lock  = NULL;

  00070	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  00075	48 c7 40 28 00
	00 00 00	 mov	 QWORD PTR [rax+40], 0

; 222  :     op->event     = NULL;

  0007d	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  00082	48 c7 40 30 00
	00 00 00	 mov	 QWORD PTR [rax+48], 0

; 223  :     op->orig_type = NULL;

  0008a	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  0008f	48 c7 40 38 00
	00 00 00	 mov	 QWORD PTR [rax+56], 0

; 224  : #ifdef Py_TRACE_REFS
; 225  :     op->_ob_next = NULL;

  00097	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  0009c	48 c7 40 40 00
	00 00 00	 mov	 QWORD PTR [rax+64], 0

; 226  :     op->_ob_prev = NULL;

  000a4	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  000a9	48 c7 40 48 00
	00 00 00	 mov	 QWORD PTR [rax+72], 0

; 227  : #else
; 228  :     op->_ob_next = _Py_NOT_PARALLEL;
; 229  :     op->_ob_prev = _Py_NOT_PARALLEL;
; 230  : #endif
; 231  : }

  000b1	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000b5	c3		 ret	 0
_PyObject_InitHead ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BB@OGHAFMIK@PyObject_InitVar?$AA@	; `string'
PUBLIC	PyObject_InitVar
EXTRN	_PxObject_InitVar:PROC
;	COMDAT pdata
; File c:\src\pyparallel\objects\object.c
pdata	SEGMENT
$pdata$PyObject_InitVar DD imagerel $LN5
	DD	imagerel $LN5+161
	DD	imagerel $unwind$PyObject_InitVar
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyObject_InitVar DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT ??_C@_0BB@OGHAFMIK@PyObject_InitVar?$AA@
CONST	SEGMENT
??_C@_0BB@OGHAFMIK@PyObject_InitVar?$AA@ DB 'PyObject_InitVar', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyObject_InitVar
_TEXT	SEGMENT
op$ = 64
tp$ = 72
size$ = 80
PyObject_InitVar PROC					; COMDAT

; 262  : {

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 263  :     if (op == NULL)

  00013	48 83 7c 24 40
	00		 cmp	 QWORD PTR op$[rsp], 0
  00019	75 07		 jne	 SHORT $LN2@PyObject_I@3

; 264  :         return (PyVarObject *) PyErr_NoMemory();

  0001b	e8 00 00 00 00	 call	 PyErr_NoMemory
  00020	eb 7a		 jmp	 SHORT $LN3@PyObject_I@3
$LN2@PyObject_I@3:

; 265  :     Px_RETURN(_PxObject_InitVar(op, tp, size))

  00022	e8 00 00 00 00	 call	 _Py_PXCTX
  00027	85 c0		 test	 eax, eax
  00029	74 16		 je	 SHORT $LN1@PyObject_I@3
  0002b	4c 8b 44 24 50	 mov	 r8, QWORD PTR size$[rsp]
  00030	48 8b 54 24 48	 mov	 rdx, QWORD PTR tp$[rsp]
  00035	48 8b 4c 24 40	 mov	 rcx, QWORD PTR op$[rsp]
  0003a	e8 00 00 00 00	 call	 _PxObject_InitVar
  0003f	eb 5b		 jmp	 SHORT $LN3@PyObject_I@3
$LN1@PyObject_I@3:

; 266  :     Py_GUARD_MEM(op);

  00041	c7 44 24 20 00
	02 00 00	 mov	 DWORD PTR [rsp+32], 512	; 00000200H
  00049	4c 8b 4c 24 40	 mov	 r9, QWORD PTR op$[rsp]
  0004e	41 b8 0a 01 00
	00		 mov	 r8d, 266		; 0000010aH
  00054	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@LBNADOJM@?4?4?2Objects?2object?4c?$AA@
  0005b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@OGHAFMIK@PyObject_InitVar?$AA@
  00062	e8 00 00 00 00	 call	 _PyParallel_Guard

; 267  :     /* Any changes should be reflected in PyObject_INIT_VAR */
; 268  :     op->ob_size = size;

  00067	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  0006c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR size$[rsp]
  00071	48 89 48 60	 mov	 QWORD PTR [rax+96], rcx

; 269  :     Py_TYPE(op) = tp;

  00075	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  0007a	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tp$[rsp]
  0007f	48 89 48 58	 mov	 QWORD PTR [rax+88], rcx

; 270  :     _PyObject_InitHead((PyObject *)op);

  00083	48 8b 4c 24 40	 mov	 rcx, QWORD PTR op$[rsp]
  00088	e8 00 00 00 00	 call	 _PyObject_InitHead

; 271  :     _Py_NewReference((PyObject *)op);

  0008d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR op$[rsp]
  00092	e8 00 00 00 00	 call	 _Py_NewReference

; 272  :     return op;

  00097	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
$LN3@PyObject_I@3:

; 273  : }

  0009c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a0	c3		 ret	 0
PyObject_InitVar ENDP
_TEXT	ENDS
PUBLIC	_PyObject_New
EXTRN	_PyObject_DebugMalloc:PROC
EXTRN	_PxObject_New:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyObject_New DD imagerel $LN5
	DD	imagerel $LN5+84
	DD	imagerel $unwind$_PyObject_New
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyObject_New DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _PyObject_New
_TEXT	SEGMENT
op$ = 32
tp$ = 64
_PyObject_New PROC					; COMDAT

; 277  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 278  :     PyObject *op;
; 279  :     Px_RETURN(_PxObject_New(tp))

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	74 0c		 je	 SHORT $LN2@PyObject_N
  00012	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tp$[rsp]
  00017	e8 00 00 00 00	 call	 _PxObject_New
  0001c	eb 31		 jmp	 SHORT $LN3@PyObject_N
$LN2@PyObject_N:

; 280  :     op = (PyObject *) PyObject_MALLOC(_PyObject_SIZE(tp));

  0001e	48 8b 44 24 40	 mov	 rax, QWORD PTR tp$[rsp]
  00023	48 8b 48 78	 mov	 rcx, QWORD PTR [rax+120]
  00027	e8 00 00 00 00	 call	 _PyObject_DebugMalloc
  0002c	48 89 44 24 20	 mov	 QWORD PTR op$[rsp], rax

; 281  :     if (op == NULL)

  00031	48 83 7c 24 20
	00		 cmp	 QWORD PTR op$[rsp], 0
  00037	75 07		 jne	 SHORT $LN1@PyObject_N

; 282  :         return PyErr_NoMemory();

  00039	e8 00 00 00 00	 call	 PyErr_NoMemory
  0003e	eb 0f		 jmp	 SHORT $LN3@PyObject_N
$LN1@PyObject_N:

; 283  :     return PyObject_INIT(op, tp);

  00040	48 8b 54 24 40	 mov	 rdx, QWORD PTR tp$[rsp]
  00045	48 8b 4c 24 20	 mov	 rcx, QWORD PTR op$[rsp]
  0004a	e8 00 00 00 00	 call	 PyObject_INIT
$LN3@PyObject_N:

; 284  : }

  0004f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00053	c3		 ret	 0
_PyObject_New ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\objimpl.h
pdata	SEGMENT
$pdata$PyObject_INIT DD imagerel PyObject_INIT
	DD	imagerel PyObject_INIT+84
	DD	imagerel $unwind$PyObject_INIT
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyObject_INIT DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyObject_INIT
_TEXT	SEGMENT
op$ = 48
tp$ = 56
PyObject_INIT PROC					; COMDAT

; 236  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 237  :     Px_RETURN(_PxObject_Init(op, tp))

  0000e	e8 00 00 00 00	 call	 _Py_PXCTX
  00013	85 c0		 test	 eax, eax
  00015	74 11		 je	 SHORT $LN1@PyObject_I@4
  00017	48 8b 54 24 38	 mov	 rdx, QWORD PTR tp$[rsp]
  0001c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR op$[rsp]
  00021	e8 00 00 00 00	 call	 _PxObject_Init
  00026	eb 27		 jmp	 SHORT $LN2@PyObject_I@4
$LN1@PyObject_I@4:

; 238  :     Py_TYPE(op) = tp;

  00028	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  0002d	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tp$[rsp]
  00032	48 89 48 58	 mov	 QWORD PTR [rax+88], rcx

; 239  :     _PyObject_InitHead(op);

  00036	48 8b 4c 24 30	 mov	 rcx, QWORD PTR op$[rsp]
  0003b	e8 00 00 00 00	 call	 _PyObject_InitHead

; 240  :     _Py_NewReference(op);

  00040	48 8b 4c 24 30	 mov	 rcx, QWORD PTR op$[rsp]
  00045	e8 00 00 00 00	 call	 _Py_NewReference

; 241  :     return op;

  0004a	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
$LN2@PyObject_I@4:

; 242  : }

  0004f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00053	c3		 ret	 0
PyObject_INIT ENDP
_TEXT	ENDS
PUBLIC	_PyObject_NewVar
EXTRN	_PxObject_NewVar:PROC
;	COMDAT pdata
; File c:\src\pyparallel\objects\object.c
pdata	SEGMENT
$pdata$_PyObject_NewVar DD imagerel $LN5
	DD	imagerel $LN5+139
	DD	imagerel $unwind$_PyObject_NewVar
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyObject_NewVar DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _PyObject_NewVar
_TEXT	SEGMENT
size$ = 32
op$ = 40
tp$ = 64
nitems$ = 72
_PyObject_NewVar PROC					; COMDAT

; 288  : {

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 289  :     PyVarObject *op;
; 290  :     size_t size;
; 291  :     Px_RETURN(_PxObject_NewVar(tp, nitems))

  0000e	e8 00 00 00 00	 call	 _Py_PXCTX
  00013	85 c0		 test	 eax, eax
  00015	74 11		 je	 SHORT $LN2@PyObject_N@2
  00017	48 8b 54 24 48	 mov	 rdx, QWORD PTR nitems$[rsp]
  0001c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tp$[rsp]
  00021	e8 00 00 00 00	 call	 _PxObject_NewVar
  00026	eb 5e		 jmp	 SHORT $LN3@PyObject_N@2
$LN2@PyObject_N@2:

; 292  : 
; 293  :     size = _PyObject_VAR_SIZE(tp, nitems);

  00028	48 8b 44 24 40	 mov	 rax, QWORD PTR tp$[rsp]
  0002d	48 8b 4c 24 48	 mov	 rcx, QWORD PTR nitems$[rsp]
  00032	48 0f af 88 80
	00 00 00	 imul	 rcx, QWORD PTR [rax+128]
  0003a	48 8b c1	 mov	 rax, rcx
  0003d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tp$[rsp]
  00042	48 8b 49 78	 mov	 rcx, QWORD PTR [rcx+120]
  00046	48 8d 44 01 07	 lea	 rax, QWORD PTR [rcx+rax+7]
  0004b	48 83 e0 f8	 and	 rax, -8
  0004f	48 89 44 24 20	 mov	 QWORD PTR size$[rsp], rax

; 294  :     op = (PyVarObject *) PyObject_MALLOC(size);

  00054	48 8b 4c 24 20	 mov	 rcx, QWORD PTR size$[rsp]
  00059	e8 00 00 00 00	 call	 _PyObject_DebugMalloc
  0005e	48 89 44 24 28	 mov	 QWORD PTR op$[rsp], rax

; 295  :     if (op == NULL)

  00063	48 83 7c 24 28
	00		 cmp	 QWORD PTR op$[rsp], 0
  00069	75 07		 jne	 SHORT $LN1@PyObject_N@2

; 296  :         return (PyVarObject *)PyErr_NoMemory();

  0006b	e8 00 00 00 00	 call	 PyErr_NoMemory
  00070	eb 14		 jmp	 SHORT $LN3@PyObject_N@2
$LN1@PyObject_N@2:

; 297  :     return PyObject_INIT_VAR(op, tp, nitems);

  00072	4c 8b 44 24 48	 mov	 r8, QWORD PTR nitems$[rsp]
  00077	48 8b 54 24 40	 mov	 rdx, QWORD PTR tp$[rsp]
  0007c	48 8b 4c 24 28	 mov	 rcx, QWORD PTR op$[rsp]
  00081	e8 00 00 00 00	 call	 PyObject_INIT_VAR
$LN3@PyObject_N@2:

; 298  : }

  00086	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0008a	c3		 ret	 0
_PyObject_NewVar ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\objimpl.h
pdata	SEGMENT
$pdata$PyObject_INIT_VAR DD imagerel PyObject_INIT_VAR
	DD	imagerel PyObject_INIT_VAR+108
	DD	imagerel $unwind$PyObject_INIT_VAR
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyObject_INIT_VAR DD 011301H
	DD	04213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyObject_INIT_VAR
_TEXT	SEGMENT
op$ = 48
tp$ = 56
n$ = 64
PyObject_INIT_VAR PROC					; COMDAT

; 247  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 248  :     Px_RETURN(_PxObject_InitVar(op, tp, n))

  00013	e8 00 00 00 00	 call	 _Py_PXCTX
  00018	85 c0		 test	 eax, eax
  0001a	74 16		 je	 SHORT $LN1@PyObject_I@5
  0001c	4c 8b 44 24 40	 mov	 r8, QWORD PTR n$[rsp]
  00021	48 8b 54 24 38	 mov	 rdx, QWORD PTR tp$[rsp]
  00026	48 8b 4c 24 30	 mov	 rcx, QWORD PTR op$[rsp]
  0002b	e8 00 00 00 00	 call	 _PxObject_InitVar
  00030	eb 35		 jmp	 SHORT $LN2@PyObject_I@5
$LN1@PyObject_I@5:

; 249  :     Py_SIZE(op) = n;

  00032	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  00037	48 8b 4c 24 40	 mov	 rcx, QWORD PTR n$[rsp]
  0003c	48 89 48 60	 mov	 QWORD PTR [rax+96], rcx

; 250  :     Py_TYPE(op) = tp;

  00040	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  00045	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tp$[rsp]
  0004a	48 89 48 58	 mov	 QWORD PTR [rax+88], rcx

; 251  :     _PyObject_InitHead((PyObject *)op);

  0004e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR op$[rsp]
  00053	e8 00 00 00 00	 call	 _PyObject_InitHead

; 252  :     _Py_NewReference((PyObject *)op);

  00058	48 8b 4c 24 30	 mov	 rcx, QWORD PTR op$[rsp]
  0005d	e8 00 00 00 00	 call	 _Py_NewReference

; 253  :     return op;

  00062	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
$LN2@PyObject_I@5:

; 254  : }

  00067	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006b	c3		 ret	 0
PyObject_INIT_VAR ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CC@PAPLFJML@str?$CI?$CJ?5or?5repr?$CI?$CJ?5returned?5?8?$CF?4100s@ ; `string'
PUBLIC	??_C@_1CC@OCMMMEOC@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAt?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_05CAMHEFLG@utf?98?$AA@			; `string'
PUBLIC	??_C@_0BB@GGCFDDAA@backslashreplace?$AA@	; `string'
PUBLIC	??_C@_1CC@PPMJPEFK@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	PyObject_Repr
PUBLIC	PyObject_Str
PUBLIC	??_C@_0BD@JNCEINCM@?$DMrefcnt?5?$CFld?5at?5?$CFp?$DO?$AA@ ; `string'
PUBLIC	??_C@_0P@GBGMABPC@PyObject_Print?$AA@		; `string'
PUBLIC	??_C@_05FNKBMBBG@?$DMnil?$DO?$AA@		; `string'
PUBLIC	PyObject_Print
EXTRN	__imp_LeaveCriticalSection:PROC
EXTRN	PyErr_SetFromErrno:PROC
EXTRN	PyExc_IOError:QWORD
EXTRN	__imp_ferror:PROC
EXTRN	PyErr_Format:PROC
EXTRN	PyExc_TypeError:QWORD
EXTRN	PyUnicode_AsEncodedString:PROC
EXTRN	__imp_fwrite:PROC
EXTRN	PyEval_RestoreThread:PROC
EXTRN	__imp_fprintf:PROC
EXTRN	PyEval_SaveThread:PROC
EXTRN	__imp_clearerr:PROC
EXTRN	PyErr_CheckSignals:PROC
EXTRN	__imp_EnterCriticalSection:PROC
EXTRN	__imp___iob_func:PROC
_BSS	SEGMENT
stderr_cs DB	028H DUP (?)
stdout_cs DB	028H DUP (?)
_BSS	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\objects\object.c
pdata	SEGMENT
$pdata$PyObject_Print DD imagerel $LN33
	DD	imagerel $LN33+935
	DD	imagerel $unwind$PyObject_Print
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyObject_Print DD 011301H
	DD	0c213H
xdata	ENDS
;	COMDAT ??_C@_0CC@PAPLFJML@str?$CI?$CJ?5or?5repr?$CI?$CJ?5returned?5?8?$CF?4100s@
CONST	SEGMENT
??_C@_0CC@PAPLFJML@str?$CI?$CJ?5or?5repr?$CI?$CJ?5returned?5?8?$CF?4100s@ DB 's'
	DB	'tr() or repr() returned ''%.100s''', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1CC@OCMMMEOC@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAt?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CC@OCMMMEOC@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAt?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 's', 00H
	DB	'_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, '('
	DB	00H, 't', 00H, ')', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05CAMHEFLG@utf?98?$AA@
CONST	SEGMENT
??_C@_05CAMHEFLG@utf?98?$AA@ DB 'utf-8', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@GGCFDDAA@backslashreplace?$AA@
CONST	SEGMENT
??_C@_0BB@GGCFDDAA@backslashreplace?$AA@ DB 'backslashreplace', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CC@PPMJPEFK@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CC@PPMJPEFK@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 's', 00H
	DB	'_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, '('
	DB	00H, 's', 00H, ')', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@JNCEINCM@?$DMrefcnt?5?$CFld?5at?5?$CFp?$DO?$AA@
CONST	SEGMENT
??_C@_0BD@JNCEINCM@?$DMrefcnt?5?$CFld?5at?5?$CFp?$DO?$AA@ DB '<refcnt %ld'
	DB	' at %p>', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@GBGMABPC@PyObject_Print?$AA@
CONST	SEGMENT
??_C@_0P@GBGMABPC@PyObject_Print?$AA@ DB 'PyObject_Print', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05FNKBMBBG@?$DMnil?$DO?$AA@
CONST	SEGMENT
??_C@_05FNKBMBBG@?$DMnil?$DO?$AA@ DB '<nil>', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyObject_Print
_TEXT	SEGMENT
cs$ = 48
ret$ = 56
_save$120585 = 64
_save$120590 = 72
s$120594 = 80
t$120612 = 88
op$ = 112
fp$ = 120
flags$ = 128
PyObject_Print PROC					; COMDAT

; 302  : {

$LN33:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 303  :     int ret = 0;

  00013	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR ret$[rsp], 0

; 304  : #ifdef WITH_PARALLEL
; 305  :     CRITICAL_SECTION *cs = NULL;

  0001b	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR cs$[rsp], 0

; 306  : 
; 307  :     if (fp == stdout)

  00024	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  0002a	48 83 c0 30	 add	 rax, 48			; 00000030H
  0002e	48 39 44 24 78	 cmp	 QWORD PTR fp$[rsp], rax
  00033	75 0e		 jne	 SHORT $LN26@PyObject_P

; 308  :         cs = &stdout_cs;

  00035	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:stdout_cs
  0003c	48 89 44 24 30	 mov	 QWORD PTR cs$[rsp], rax
  00041	eb 1d		 jmp	 SHORT $LN25@PyObject_P
$LN26@PyObject_P:

; 309  :     else if (fp == stderr)

  00043	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  00049	48 83 c0 60	 add	 rax, 96			; 00000060H
  0004d	48 39 44 24 78	 cmp	 QWORD PTR fp$[rsp], rax
  00052	75 0c		 jne	 SHORT $LN24@PyObject_P

; 310  :         cs = &stderr_cs;

  00054	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:stderr_cs
  0005b	48 89 44 24 30	 mov	 QWORD PTR cs$[rsp], rax
$LN24@PyObject_P:
$LN25@PyObject_P:

; 311  : 
; 312  :     if (cs)

  00060	48 83 7c 24 30
	00		 cmp	 QWORD PTR cs$[rsp], 0
  00066	74 0b		 je	 SHORT $LN23@PyObject_P

; 313  :         EnterCriticalSection(cs);

  00068	48 8b 4c 24 30	 mov	 rcx, QWORD PTR cs$[rsp]
  0006d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_EnterCriticalSection
$LN23@PyObject_P:

; 314  : #endif
; 315  :     ret = -1;

  00073	c7 44 24 38 ff
	ff ff ff	 mov	 DWORD PTR ret$[rsp], -1

; 316  :     if (PyErr_CheckSignals())

  0007b	e8 00 00 00 00	 call	 PyErr_CheckSignals
  00080	85 c0		 test	 eax, eax
  00082	74 05		 je	 SHORT $LN22@PyObject_P

; 317  :         goto end;

  00084	e9 02 03 00 00	 jmp	 $end$120582
$LN22@PyObject_P:

; 318  : #ifdef USE_STACKCHECK
; 319  :     if (PyOS_CheckStack()) {
; 320  :         PyErr_SetString(PyExc_MemoryError, "stack overflow");
; 321  :         goto end;
; 322  :     }
; 323  : #endif
; 324  :     ret = 0;

  00089	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR ret$[rsp], 0

; 325  :     clearerr(fp); /* Clear any previous error condition */

  00091	48 8b 4c 24 78	 mov	 rcx, QWORD PTR fp$[rsp]
  00096	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_clearerr

; 326  :     if (op == NULL) {

  0009c	48 83 7c 24 70
	00		 cmp	 QWORD PTR op$[rsp], 0
  000a2	75 2b		 jne	 SHORT $LN21@PyObject_P

; 327  :         Py_BEGIN_ALLOW_THREADS

  000a4	e8 00 00 00 00	 call	 PyEval_SaveThread
  000a9	48 89 44 24 40	 mov	 QWORD PTR _save$120585[rsp], rax

; 328  :         fprintf(fp, "<nil>");

  000ae	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05FNKBMBBG@?$DMnil?$DO?$AA@
  000b5	48 8b 4c 24 78	 mov	 rcx, QWORD PTR fp$[rsp]
  000ba	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fprintf

; 329  :         Py_END_ALLOW_THREADS

  000c0	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _save$120585[rsp]
  000c5	e8 00 00 00 00	 call	 PyEval_RestoreThread

; 330  :     }
; 331  :     else {

  000ca	e9 87 02 00 00	 jmp	 $LN20@PyObject_P
$LN21@PyObject_P:

; 332  :         if (!Py_ISPX(op) && op->ob_refcnt <= 0)

  000cf	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000d7	4c 8b 4c 24 70	 mov	 r9, QWORD PTR op$[rsp]
  000dc	41 b8 4c 01 00
	00		 mov	 r8d, 332		; 0000014cH
  000e2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@LBNADOJM@?4?4?2Objects?2object?4c?$AA@
  000e9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@GBGMABPC@PyObject_Print?$AA@
  000f0	e8 00 00 00 00	 call	 _PyParallel_Guard
  000f5	85 c0		 test	 eax, eax
  000f7	75 45		 jne	 SHORT $LN19@PyObject_P
  000f9	48 8b 44 24 70	 mov	 rax, QWORD PTR op$[rsp]
  000fe	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00103	7f 39		 jg	 SHORT $LN19@PyObject_P

; 333  :             /* XXX(twouters) cast refcount to long until %zd is
; 334  :                universally available */
; 335  :             Py_BEGIN_ALLOW_THREADS

  00105	e8 00 00 00 00	 call	 PyEval_SaveThread
  0010a	48 89 44 24 48	 mov	 QWORD PTR _save$120590[rsp], rax

; 336  :             fprintf(fp, "<refcnt %ld at %p>",
; 337  :                 (long)op->ob_refcnt, op);

  0010f	4c 8b 4c 24 70	 mov	 r9, QWORD PTR op$[rsp]
  00114	48 8b 44 24 70	 mov	 rax, QWORD PTR op$[rsp]
  00119	44 8b 40 50	 mov	 r8d, DWORD PTR [rax+80]
  0011d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@JNCEINCM@?$DMrefcnt?5?$CFld?5at?5?$CFp?$DO?$AA@
  00124	48 8b 4c 24 78	 mov	 rcx, QWORD PTR fp$[rsp]
  00129	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fprintf

; 338  :             Py_END_ALLOW_THREADS

  0012f	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _save$120590[rsp]
  00134	e8 00 00 00 00	 call	 PyEval_RestoreThread

; 339  :         else {

  00139	e9 18 02 00 00	 jmp	 $LN18@PyObject_P
$LN19@PyObject_P:

; 340  :             PyObject *s;
; 341  :             if (flags & Py_PRINT_RAW)

  0013e	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR flags$[rsp]
  00145	83 e0 01	 and	 eax, 1
  00148	85 c0		 test	 eax, eax
  0014a	74 11		 je	 SHORT $LN17@PyObject_P

; 342  :                 s = PyObject_Str(op);

  0014c	48 8b 4c 24 70	 mov	 rcx, QWORD PTR op$[rsp]
  00151	e8 00 00 00 00	 call	 PyObject_Str
  00156	48 89 44 24 50	 mov	 QWORD PTR s$120594[rsp], rax

; 343  :             else

  0015b	eb 0f		 jmp	 SHORT $LN16@PyObject_P
$LN17@PyObject_P:

; 344  :                 s = PyObject_Repr(op);

  0015d	48 8b 4c 24 70	 mov	 rcx, QWORD PTR op$[rsp]
  00162	e8 00 00 00 00	 call	 PyObject_Repr
  00167	48 89 44 24 50	 mov	 QWORD PTR s$120594[rsp], rax
$LN16@PyObject_P:

; 345  :             if (s == NULL)

  0016c	48 83 7c 24 50
	00		 cmp	 QWORD PTR s$120594[rsp], 0
  00172	75 0d		 jne	 SHORT $LN15@PyObject_P

; 346  :                 ret = -1;

  00174	c7 44 24 38 ff
	ff ff ff	 mov	 DWORD PTR ret$[rsp], -1
  0017c	e9 bd 01 00 00	 jmp	 $LN14@PyObject_P
$LN15@PyObject_P:

; 347  :             else if (PyBytes_Check(s)) {

  00181	48 8b 44 24 50	 mov	 rax, QWORD PTR s$120594[rsp]
  00186	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0018a	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00190	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  00195	85 c0		 test	 eax, eax
  00197	0f 84 92 00 00
	00		 je	 $LN13@PyObject_P

; 348  :                 fwrite(PyBytes_AS_STRING(s), 1,
; 349  :                        PyBytes_GET_SIZE(s), fp);

  0019d	48 8b 44 24 50	 mov	 rax, QWORD PTR s$120594[rsp]
  001a2	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  001a6	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  001ac	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  001b1	85 c0		 test	 eax, eax
  001b3	75 1c		 jne	 SHORT $LN29@PyObject_P
  001b5	41 b8 5d 01 00
	00		 mov	 r8d, 349		; 0000015dH
  001bb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CI@ONKHJAFP@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  001c2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CC@PPMJPEFK@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AA?$CJ?$AA?$AA@
  001c9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001cf	33 c0		 xor	 eax, eax
$LN29@PyObject_P:
  001d1	48 8b 44 24 50	 mov	 rax, QWORD PTR s$120594[rsp]
  001d6	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  001da	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  001e0	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  001e5	85 c0		 test	 eax, eax
  001e7	75 1c		 jne	 SHORT $LN30@PyObject_P
  001e9	41 b8 5c 01 00
	00		 mov	 r8d, 348		; 0000015cH
  001ef	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CI@ONKHJAFP@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  001f6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CC@PPMJPEFK@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AA?$CJ?$AA?$AA@
  001fd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00203	33 c0		 xor	 eax, eax
$LN30@PyObject_P:
  00205	48 8b 44 24 50	 mov	 rax, QWORD PTR s$120594[rsp]
  0020a	48 83 c0 78	 add	 rax, 120		; 00000078H
  0020e	4c 8b 4c 24 78	 mov	 r9, QWORD PTR fp$[rsp]
  00213	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$120594[rsp]
  00218	4c 8b 41 60	 mov	 r8, QWORD PTR [rcx+96]
  0021c	ba 01 00 00 00	 mov	 edx, 1
  00221	48 8b c8	 mov	 rcx, rax
  00224	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwrite
  0022a	e9 0f 01 00 00	 jmp	 $LN12@PyObject_P
$LN13@PyObject_P:

; 350  :             }
; 351  :             else if (PyUnicode_Check(s)) {

  0022f	48 8b 44 24 50	 mov	 rax, QWORD PTR s$120594[rsp]
  00234	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00238	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0023e	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00243	85 c0		 test	 eax, eax
  00245	0f 84 cb 00 00
	00		 je	 $LN11@PyObject_P

; 352  :                 PyObject *t;
; 353  :                 t = PyUnicode_AsEncodedString(s, "utf-8", "backslashreplace");

  0024b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BB@GGCFDDAA@backslashreplace?$AA@
  00252	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05CAMHEFLG@utf?98?$AA@
  00259	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$120594[rsp]
  0025e	e8 00 00 00 00	 call	 PyUnicode_AsEncodedString
  00263	48 89 44 24 58	 mov	 QWORD PTR t$120612[rsp], rax

; 354  :                 if (t == NULL)

  00268	48 83 7c 24 58
	00		 cmp	 QWORD PTR t$120612[rsp], 0
  0026e	75 0d		 jne	 SHORT $LN10@PyObject_P

; 355  :                     ret = 0;

  00270	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR ret$[rsp], 0

; 356  :                 else {

  00278	e9 97 00 00 00	 jmp	 $LN9@PyObject_P
$LN10@PyObject_P:

; 357  :                     fwrite(PyBytes_AS_STRING(t), 1,
; 358  :                            PyBytes_GET_SIZE(t), fp);

  0027d	48 8b 44 24 58	 mov	 rax, QWORD PTR t$120612[rsp]
  00282	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00286	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0028c	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  00291	85 c0		 test	 eax, eax
  00293	75 1c		 jne	 SHORT $LN31@PyObject_P
  00295	41 b8 66 01 00
	00		 mov	 r8d, 358		; 00000166H
  0029b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CI@ONKHJAFP@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  002a2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CC@OCMMMEOC@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAt?$AA?$CJ?$AA?$AA@
  002a9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  002af	33 c0		 xor	 eax, eax
$LN31@PyObject_P:
  002b1	48 8b 44 24 58	 mov	 rax, QWORD PTR t$120612[rsp]
  002b6	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  002ba	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  002c0	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  002c5	85 c0		 test	 eax, eax
  002c7	75 1c		 jne	 SHORT $LN32@PyObject_P
  002c9	41 b8 65 01 00
	00		 mov	 r8d, 357		; 00000165H
  002cf	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CI@ONKHJAFP@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  002d6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CC@OCMMMEOC@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAt?$AA?$CJ?$AA?$AA@
  002dd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  002e3	33 c0		 xor	 eax, eax
$LN32@PyObject_P:
  002e5	48 8b 44 24 58	 mov	 rax, QWORD PTR t$120612[rsp]
  002ea	48 83 c0 78	 add	 rax, 120		; 00000078H
  002ee	4c 8b 4c 24 78	 mov	 r9, QWORD PTR fp$[rsp]
  002f3	48 8b 4c 24 58	 mov	 rcx, QWORD PTR t$120612[rsp]
  002f8	4c 8b 41 60	 mov	 r8, QWORD PTR [rcx+96]
  002fc	ba 01 00 00 00	 mov	 edx, 1
  00301	48 8b c8	 mov	 rcx, rax
  00304	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwrite

; 359  :                     Py_DECREF(t);

  0030a	48 8b 4c 24 58	 mov	 rcx, QWORD PTR t$120612[rsp]
  0030f	e8 00 00 00 00	 call	 _Py_DecRef
$LN9@PyObject_P:

; 360  :                 }
; 361  :             }
; 362  :             else {

  00314	eb 28		 jmp	 SHORT $LN8@PyObject_P
$LN11@PyObject_P:

; 363  :                 PyErr_Format(PyExc_TypeError,
; 364  :                              "str() or repr() returned '%.100s'",
; 365  :                              s->ob_type->tp_name);

  00316	48 8b 44 24 50	 mov	 rax, QWORD PTR s$120594[rsp]
  0031b	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0031f	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  00323	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CC@PAPLFJML@str?$CI?$CJ?5or?5repr?$CI?$CJ?5returned?5?8?$CF?4100s@
  0032a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00331	e8 00 00 00 00	 call	 PyErr_Format

; 366  :                 ret = -1;

  00336	c7 44 24 38 ff
	ff ff ff	 mov	 DWORD PTR ret$[rsp], -1
$LN8@PyObject_P:
$LN12@PyObject_P:
$LN14@PyObject_P:
$LN7@PyObject_P:

; 367  :             }
; 368  :             Py_XDECREF(s);

  0033e	48 83 7c 24 50
	00		 cmp	 QWORD PTR s$120594[rsp], 0
  00344	74 0a		 je	 SHORT $LN4@PyObject_P
  00346	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$120594[rsp]
  0034b	e8 00 00 00 00	 call	 _Py_DecRef
$LN4@PyObject_P:
  00350	33 c0		 xor	 eax, eax
  00352	85 c0		 test	 eax, eax
  00354	75 e8		 jne	 SHORT $LN7@PyObject_P
$LN18@PyObject_P:
$LN20@PyObject_P:

; 369  :         }
; 370  :     }
; 371  :     if (ret == 0) {

  00356	83 7c 24 38 00	 cmp	 DWORD PTR ret$[rsp], 0
  0035b	75 2e		 jne	 SHORT $LN3@PyObject_P

; 372  :         if (ferror(fp)) {

  0035d	48 8b 4c 24 78	 mov	 rcx, QWORD PTR fp$[rsp]
  00362	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ferror
  00368	85 c0		 test	 eax, eax
  0036a	74 1f		 je	 SHORT $LN2@PyObject_P

; 373  :             PyErr_SetFromErrno(PyExc_IOError);

  0036c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_IOError
  00373	e8 00 00 00 00	 call	 PyErr_SetFromErrno

; 374  :             clearerr(fp);

  00378	48 8b 4c 24 78	 mov	 rcx, QWORD PTR fp$[rsp]
  0037d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_clearerr

; 375  :             ret = -1;

  00383	c7 44 24 38 ff
	ff ff ff	 mov	 DWORD PTR ret$[rsp], -1
$LN2@PyObject_P:
$LN3@PyObject_P:
$end$120582:

; 376  :         }
; 377  :     }
; 378  : end:
; 379  : #ifdef WITH_PARALLEL
; 380  :     if (cs)

  0038b	48 83 7c 24 30
	00		 cmp	 QWORD PTR cs$[rsp], 0
  00391	74 0b		 je	 SHORT $LN1@PyObject_P

; 381  :         LeaveCriticalSection(cs);

  00393	48 8b 4c 24 30	 mov	 rcx, QWORD PTR cs$[rsp]
  00398	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_LeaveCriticalSection
$LN1@PyObject_P:

; 382  : #endif
; 383  :     return ret;

  0039e	8b 44 24 38	 mov	 eax, DWORD PTR ret$[rsp]

; 384  : }

  003a2	48 83 c4 68	 add	 rsp, 104		; 00000068H
  003a6	c3		 ret	 0
PyObject_Print ENDP
_TEXT	ENDS
PUBLIC	_Py_BreakPoint
; Function compile flags: /Odtp
;	COMDAT _Py_BreakPoint
_TEXT	SEGMENT
_Py_BreakPoint PROC					; COMDAT

; 390  : }

  00000	c3		 ret	 0
_Py_BreakPoint ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CK@KILIGNMG@?6type?5?5?5?5?3?5?$CFs?6refcount?3?5?$CFld?6addr@ ; `string'
PUBLIC	??_C@_04HIBGFPH@NULL?$AA@			; `string'
PUBLIC	??_C@_0L@CEGGIADE@object?5?5?3?5?$AA@		; `string'
PUBLIC	??_C@_05NJDBAOFA@NULL?6?$AA@			; `string'
PUBLIC	??_C@_0P@FHBAFHIM@_PyObject_Dump?$AA@		; `string'
PUBLIC	_PyObject_Dump
EXTRN	PyGILState_Release:PROC
EXTRN	PyGILState_Ensure:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyObject_Dump DD imagerel $LN8
	DD	imagerel $LN8+254
	DD	imagerel $unwind$_PyObject_Dump
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyObject_Dump DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0CK@KILIGNMG@?6type?5?5?5?5?3?5?$CFs?6refcount?3?5?$CFld?6addr@
CONST	SEGMENT
??_C@_0CK@KILIGNMG@?6type?5?5?5?5?3?5?$CFs?6refcount?3?5?$CFld?6addr@ DB 0aH
	DB	'type    : %s', 0aH, 'refcount: %ld', 0aH, 'address : %p', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_04HIBGFPH@NULL?$AA@
CONST	SEGMENT
??_C@_04HIBGFPH@NULL?$AA@ DB 'NULL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@CEGGIADE@object?5?5?3?5?$AA@
CONST	SEGMENT
??_C@_0L@CEGGIADE@object?5?5?3?5?$AA@ DB 'object  : ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05NJDBAOFA@NULL?6?$AA@
CONST	SEGMENT
??_C@_05NJDBAOFA@NULL?6?$AA@ DB 'NULL', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@FHBAFHIM@_PyObject_Dump?$AA@
CONST	SEGMENT
??_C@_0P@FHBAFHIM@_PyObject_Dump?$AA@ DB '_PyObject_Dump', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PyObject_Dump
_TEXT	SEGMENT
gil$120647 = 48
tv94 = 56
op$ = 80
_PyObject_Dump PROC					; COMDAT

; 396  : {

$LN8:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 397  :     Py_GUARD

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	74 1c		 je	 SHORT $LN3@PyObject_D
  00012	45 33 c9	 xor	 r9d, r9d
  00015	41 b8 8d 01 00
	00		 mov	 r8d, 397		; 0000018dH
  0001b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@LBNADOJM@?4?4?2Objects?2object?4c?$AA@
  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@FHBAFHIM@_PyObject_Dump?$AA@
  00029	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@PyObject_D:

; 398  :     if (op == NULL)

  0002e	48 83 7c 24 50
	00		 cmp	 QWORD PTR op$[rsp], 0
  00034	75 1f		 jne	 SHORT $LN2@PyObject_D

; 399  :         fprintf(stderr, "NULL\n");

  00036	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  0003c	48 83 c0 60	 add	 rax, 96			; 00000060H
  00040	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05NJDBAOFA@NULL?6?$AA@
  00047	48 8b c8	 mov	 rcx, rax
  0004a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fprintf

; 400  :     else {

  00050	e9 a4 00 00 00	 jmp	 $LN1@PyObject_D
$LN2@PyObject_D:

; 401  : #ifdef WITH_THREAD
; 402  :         PyGILState_STATE gil;
; 403  : #endif
; 404  :         fprintf(stderr, "object  : ");

  00055	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  0005b	48 83 c0 60	 add	 rax, 96			; 00000060H
  0005f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@CEGGIADE@object?5?5?3?5?$AA@
  00066	48 8b c8	 mov	 rcx, rax
  00069	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fprintf

; 405  : #ifdef WITH_THREAD
; 406  :         gil = PyGILState_Ensure();

  0006f	e8 00 00 00 00	 call	 PyGILState_Ensure
  00074	89 44 24 30	 mov	 DWORD PTR gil$120647[rsp], eax

; 407  : #endif
; 408  :         (void)PyObject_Print(op, stderr, 0);

  00078	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  0007e	48 83 c0 60	 add	 rax, 96			; 00000060H
  00082	45 33 c0	 xor	 r8d, r8d
  00085	48 8b d0	 mov	 rdx, rax
  00088	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  0008d	e8 00 00 00 00	 call	 PyObject_Print

; 409  : #ifdef WITH_THREAD
; 410  :         PyGILState_Release(gil);

  00092	8b 4c 24 30	 mov	 ecx, DWORD PTR gil$120647[rsp]
  00096	e8 00 00 00 00	 call	 PyGILState_Release

; 411  : #endif
; 412  :         /* XXX(twouters) cast refcount to long until %zd is
; 413  :            universally available */
; 414  :         fprintf(stderr, "\n"
; 415  :             "type    : %s\n"
; 416  :             "refcount: %ld\n"
; 417  :             "address : %p\n",
; 418  :             Py_TYPE(op)==NULL ? "NULL" : Py_TYPE(op)->tp_name,
; 419  :             (long)op->ob_refcnt,
; 420  :             op);

  0009b	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  000a0	48 83 78 58 00	 cmp	 QWORD PTR [rax+88], 0
  000a5	75 0e		 jne	 SHORT $LN6@PyObject_D
  000a7	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04HIBGFPH@NULL?$AA@
  000ae	48 89 44 24 38	 mov	 QWORD PTR tv94[rsp], rax
  000b3	eb 12		 jmp	 SHORT $LN7@PyObject_D
$LN6@PyObject_D:
  000b5	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  000ba	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000be	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  000c2	48 89 44 24 38	 mov	 QWORD PTR tv94[rsp], rax
$LN7@PyObject_D:
  000c7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  000cd	48 83 c0 60	 add	 rax, 96			; 00000060H
  000d1	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  000d6	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  000db	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  000e0	44 8b 49 50	 mov	 r9d, DWORD PTR [rcx+80]
  000e4	4c 8b 44 24 38	 mov	 r8, QWORD PTR tv94[rsp]
  000e9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CK@KILIGNMG@?6type?5?5?5?5?3?5?$CFs?6refcount?3?5?$CFld?6addr@
  000f0	48 8b c8	 mov	 rcx, rax
  000f3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fprintf
$LN1@PyObject_D:

; 421  :     }
; 422  : }

  000f9	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000fd	c3		 ret	 0
_PyObject_Dump ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CL@EJGNHIEJ@__repr__?5returned?5non?9string?5?$CIty@ ; `string'
PUBLIC	??_C@_0BC@JEBMOEBF@?$DM?$CFs?5object?5at?5?$CFp?$DO?$AA@ ; `string'
PUBLIC	??_C@_06CBHGEMFM@?$DMNULL?$DO?$AA@		; `string'
EXTRN	PyUnicode_FromFormat:PROC
EXTRN	PyUnicode_FromString:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyObject_Repr DD imagerel $LN8
	DD	imagerel $LN8+218
	DD	imagerel $unwind$PyObject_Repr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyObject_Repr DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0CL@EJGNHIEJ@__repr__?5returned?5non?9string?5?$CIty@
CONST	SEGMENT
??_C@_0CL@EJGNHIEJ@__repr__?5returned?5non?9string?5?$CIty@ DB '__repr__ '
	DB	'returned non-string (type %.200s)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@JEBMOEBF@?$DM?$CFs?5object?5at?5?$CFp?$DO?$AA@
CONST	SEGMENT
??_C@_0BC@JEBMOEBF@?$DM?$CFs?5object?5at?5?$CFp?$DO?$AA@ DB '<%s object a'
	DB	't %p>', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_06CBHGEMFM@?$DMNULL?$DO?$AA@
CONST	SEGMENT
??_C@_06CBHGEMFM@?$DMNULL?$DO?$AA@ DB '<NULL>', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyObject_Repr
_TEXT	SEGMENT
res$ = 32
v$ = 64
PyObject_Repr PROC					; COMDAT

; 426  : {

$LN8:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 427  :     PyObject *res;
; 428  :     if (PyErr_CheckSignals())

  00009	e8 00 00 00 00	 call	 PyErr_CheckSignals
  0000e	85 c0		 test	 eax, eax
  00010	74 07		 je	 SHORT $LN5@PyObject_R

; 429  :         return NULL;

  00012	33 c0		 xor	 eax, eax
  00014	e9 bc 00 00 00	 jmp	 $LN6@PyObject_R
$LN5@PyObject_R:

; 430  : #ifdef USE_STACKCHECK
; 431  :     if (PyOS_CheckStack()) {
; 432  :         PyErr_SetString(PyExc_MemoryError, "stack overflow");
; 433  :         return NULL;
; 434  :     }
; 435  : #endif
; 436  :     if (v == NULL)

  00019	48 83 7c 24 40
	00		 cmp	 QWORD PTR v$[rsp], 0
  0001f	75 11		 jne	 SHORT $LN4@PyObject_R

; 437  :         return PyUnicode_FromString("<NULL>");

  00021	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06CBHGEMFM@?$DMNULL?$DO?$AA@
  00028	e8 00 00 00 00	 call	 PyUnicode_FromString
  0002d	e9 a3 00 00 00	 jmp	 $LN6@PyObject_R
$LN4@PyObject_R:

; 438  :     if (Py_TYPE(v)->tp_repr == NULL)

  00032	48 8b 44 24 40	 mov	 rax, QWORD PTR v$[rsp]
  00037	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0003b	48 83 b8 b0 00
	00 00 00	 cmp	 QWORD PTR [rax+176], 0
  00043	75 20		 jne	 SHORT $LN3@PyObject_R

; 439  :         return PyUnicode_FromFormat("<%s object at %p>",
; 440  :                                     v->ob_type->tp_name, v);

  00045	48 8b 44 24 40	 mov	 rax, QWORD PTR v$[rsp]
  0004a	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0004e	4c 8b 44 24 40	 mov	 r8, QWORD PTR v$[rsp]
  00053	48 8b 50 70	 mov	 rdx, QWORD PTR [rax+112]
  00057	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@JEBMOEBF@?$DM?$CFs?5object?5at?5?$CFp?$DO?$AA@
  0005e	e8 00 00 00 00	 call	 PyUnicode_FromFormat
  00063	eb 70		 jmp	 SHORT $LN6@PyObject_R
$LN3@PyObject_R:

; 441  :     res = (*v->ob_type->tp_repr)(v);

  00065	48 8b 44 24 40	 mov	 rax, QWORD PTR v$[rsp]
  0006a	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0006e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR v$[rsp]
  00073	ff 90 b0 00 00
	00		 call	 QWORD PTR [rax+176]
  00079	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax

; 442  :     if (res == NULL)

  0007e	48 83 7c 24 20
	00		 cmp	 QWORD PTR res$[rsp], 0
  00084	75 04		 jne	 SHORT $LN2@PyObject_R

; 443  :         return NULL;

  00086	33 c0		 xor	 eax, eax
  00088	eb 4b		 jmp	 SHORT $LN6@PyObject_R
$LN2@PyObject_R:

; 444  :     if (!PyUnicode_Check(res)) {

  0008a	48 8b 44 24 20	 mov	 rax, QWORD PTR res$[rsp]
  0008f	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00093	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00099	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0009e	85 c0		 test	 eax, eax
  000a0	75 2e		 jne	 SHORT $LN1@PyObject_R

; 445  :         PyErr_Format(PyExc_TypeError,
; 446  :                      "__repr__ returned non-string (type %.200s)",
; 447  :                      res->ob_type->tp_name);

  000a2	48 8b 44 24 20	 mov	 rax, QWORD PTR res$[rsp]
  000a7	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000ab	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  000af	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CL@EJGNHIEJ@__repr__?5returned?5non?9string?5?$CIty@
  000b6	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000bd	e8 00 00 00 00	 call	 PyErr_Format

; 448  :         Py_DECREF(res);

  000c2	48 8b 4c 24 20	 mov	 rcx, QWORD PTR res$[rsp]
  000c7	e8 00 00 00 00	 call	 _Py_DecRef

; 449  :         return NULL;

  000cc	33 c0		 xor	 eax, eax
  000ce	eb 05		 jmp	 SHORT $LN6@PyObject_R
$LN1@PyObject_R:

; 450  :     }
; 451  : #ifndef Py_DEBUG
; 452  :     if (PyUnicode_READY(res) < 0)
; 453  :         return NULL;
; 454  : #endif
; 455  :     return res;

  000d0	48 8b 44 24 20	 mov	 rax, QWORD PTR res$[rsp]
$LN6@PyObject_R:

; 456  : }

  000d5	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000d9	c3		 ret	 0
PyObject_Repr ENDP
_TEXT	ENDS
PUBLIC	??_C@_1EI@PCBNHGIB@?$AA_?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AAC?$AAo?$AAn?$AAs?$AAi?$AAs?$AAt?$AAe?$AAn?$AAc?$AAy?$AA?$CI?$AAr?$AAe?$AAs?$AA?0@ ; `string'
PUBLIC	??_C@_0CK@EHJIGAIF@__str__?5returned?5non?9string?5?$CItyp@ ; `string'
PUBLIC	??_C@_0CE@FMPGEPEN@?5while?5getting?5the?5str?5of?5an?5obj@ ; `string'
EXTRN	_PyUnicode_CheckConsistency:PROC
EXTRN	_Py_CheckRecursiveCall:PROC
EXTRN	_Py_CheckRecursionLimit:DWORD
EXTRN	PyThreadState_Get:PROC
EXTRN	PyUnicode_Type:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyObject_Str DD imagerel $LN17
	DD	imagerel $LN17+452
	DD	imagerel $unwind$PyObject_Str
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyObject_Str DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_1EI@PCBNHGIB@?$AA_?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AAC?$AAo?$AAn?$AAs?$AAi?$AAs?$AAt?$AAe?$AAn?$AAc?$AAy?$AA?$CI?$AAr?$AAe?$AAs?$AA?0@
CONST	SEGMENT
??_C@_1EI@PCBNHGIB@?$AA_?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AAC?$AAo?$AAn?$AAs?$AAi?$AAs?$AAt?$AAe?$AAn?$AAc?$AAy?$AA?$CI?$AAr?$AAe?$AAs?$AA?0@ DB '_'
	DB	00H, 'P', 00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H
	DB	'o', 00H, 'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e'
	DB	00H, 'c', 00H, 'k', 00H, 'C', 00H, 'o', 00H, 'n', 00H, 's', 00H
	DB	'i', 00H, 's', 00H, 't', 00H, 'e', 00H, 'n', 00H, 'c', 00H, 'y'
	DB	00H, '(', 00H, 'r', 00H, 'e', 00H, 's', 00H, ',', 00H, ' ', 00H
	DB	'1', 00H, ')', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@EHJIGAIF@__str__?5returned?5non?9string?5?$CItyp@
CONST	SEGMENT
??_C@_0CK@EHJIGAIF@__str__?5returned?5non?9string?5?$CItyp@ DB '__str__ r'
	DB	'eturned non-string (type %.200s)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@FMPGEPEN@?5while?5getting?5the?5str?5of?5an?5obj@
CONST	SEGMENT
??_C@_0CE@FMPGEPEN@?5while?5getting?5the?5str?5of?5an?5obj@ DB ' while ge'
	DB	'tting the str of an object', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyObject_Str
_TEXT	SEGMENT
res$ = 32
tv79 = 40
tv129 = 48
tv91 = 56
v$ = 80
PyObject_Str PROC					; COMDAT

; 460  : {

$LN17:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 461  :     PyObject *res;
; 462  :     if (PyErr_CheckSignals())

  00009	e8 00 00 00 00	 call	 PyErr_CheckSignals
  0000e	85 c0		 test	 eax, eax
  00010	74 07		 je	 SHORT $LN11@PyObject_S

; 463  :         return NULL;

  00012	33 c0		 xor	 eax, eax
  00014	e9 a6 01 00 00	 jmp	 $LN12@PyObject_S
$LN11@PyObject_S:

; 464  : #ifdef USE_STACKCHECK
; 465  :     if (PyOS_CheckStack()) {
; 466  :         PyErr_SetString(PyExc_MemoryError, "stack overflow");
; 467  :         return NULL;
; 468  :     }
; 469  : #endif
; 470  :     if (v == NULL)

  00019	48 83 7c 24 50
	00		 cmp	 QWORD PTR v$[rsp], 0
  0001f	75 11		 jne	 SHORT $LN10@PyObject_S

; 471  :         return PyUnicode_FromString("<NULL>");

  00021	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06CBHGEMFM@?$DMNULL?$DO?$AA@
  00028	e8 00 00 00 00	 call	 PyUnicode_FromString
  0002d	e9 8d 01 00 00	 jmp	 $LN12@PyObject_S
$LN10@PyObject_S:

; 472  :     if (PyUnicode_CheckExact(v)) {

  00032	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyUnicode_Type
  00039	48 8b 4c 24 50	 mov	 rcx, QWORD PTR v$[rsp]
  0003e	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00042	75 14		 jne	 SHORT $LN9@PyObject_S

; 473  : #ifndef Py_DEBUG
; 474  :         if (PyUnicode_READY(v) < 0)
; 475  :             return NULL;
; 476  : #endif
; 477  :         Py_INCREF(v);

  00044	48 8b 4c 24 50	 mov	 rcx, QWORD PTR v$[rsp]
  00049	e8 00 00 00 00	 call	 _Py_IncRef

; 478  :         return v;

  0004e	48 8b 44 24 50	 mov	 rax, QWORD PTR v$[rsp]
  00053	e9 67 01 00 00	 jmp	 $LN12@PyObject_S
$LN9@PyObject_S:

; 479  :     }
; 480  :     if (Py_TYPE(v)->tp_str == NULL)

  00058	48 8b 44 24 50	 mov	 rax, QWORD PTR v$[rsp]
  0005d	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00061	48 83 b8 e0 00
	00 00 00	 cmp	 QWORD PTR [rax+224], 0
  00069	75 0f		 jne	 SHORT $LN8@PyObject_S

; 481  :         return PyObject_Repr(v);

  0006b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR v$[rsp]
  00070	e8 00 00 00 00	 call	 PyObject_Repr
  00075	e9 45 01 00 00	 jmp	 $LN12@PyObject_S
$LN8@PyObject_S:

; 482  : 
; 483  :     /* It is possible for a type to have a tp_str representation that loops
; 484  :        infinitely. */
; 485  :     if (Py_EnterRecursiveCall(" while getting the str of an object"))

  0007a	e8 00 00 00 00	 call	 PyThreadState_Get
  0007f	48 83 c0 18	 add	 rax, 24
  00083	48 89 44 24 28	 mov	 QWORD PTR tv79[rsp], rax
  00088	48 8b 44 24 28	 mov	 rax, QWORD PTR tv79[rsp]
  0008d	8b 00		 mov	 eax, DWORD PTR [rax]
  0008f	ff c0		 inc	 eax
  00091	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tv79[rsp]
  00096	89 01		 mov	 DWORD PTR [rcx], eax
  00098	48 8b 44 24 28	 mov	 rax, QWORD PTR tv79[rsp]
  0009d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _Py_CheckRecursionLimit
  000a3	39 08		 cmp	 DWORD PTR [rax], ecx
  000a5	7e 17		 jle	 SHORT $LN7@PyObject_S
  000a7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CE@FMPGEPEN@?5while?5getting?5the?5str?5of?5an?5obj@
  000ae	e8 00 00 00 00	 call	 _Py_CheckRecursiveCall
  000b3	85 c0		 test	 eax, eax
  000b5	74 07		 je	 SHORT $LN7@PyObject_S

; 486  :         return NULL;

  000b7	33 c0		 xor	 eax, eax
  000b9	e9 01 01 00 00	 jmp	 $LN12@PyObject_S
$LN7@PyObject_S:

; 487  :     res = (*Py_TYPE(v)->tp_str)(v);

  000be	48 8b 44 24 50	 mov	 rax, QWORD PTR v$[rsp]
  000c3	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000c7	48 8b 4c 24 50	 mov	 rcx, QWORD PTR v$[rsp]
  000cc	ff 90 e0 00 00
	00		 call	 QWORD PTR [rax+224]
  000d2	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax
$LN6@PyObject_S:

; 488  :     Py_LeaveRecursiveCall();

  000d7	83 3d 00 00 00
	00 64		 cmp	 DWORD PTR _Py_CheckRecursionLimit, 100 ; 00000064H
  000de	7e 0f		 jle	 SHORT $LN14@PyObject_S
  000e0	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR _Py_CheckRecursionLimit
  000e6	83 e8 32	 sub	 eax, 50			; 00000032H
  000e9	89 44 24 30	 mov	 DWORD PTR tv129[rsp], eax
  000ed	eb 10		 jmp	 SHORT $LN15@PyObject_S
$LN14@PyObject_S:
  000ef	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR _Py_CheckRecursionLimit
  000f5	c1 f8 02	 sar	 eax, 2
  000f8	6b c0 03	 imul	 eax, 3
  000fb	89 44 24 30	 mov	 DWORD PTR tv129[rsp], eax
$LN15@PyObject_S:
  000ff	e8 00 00 00 00	 call	 PyThreadState_Get
  00104	48 83 c0 18	 add	 rax, 24
  00108	48 89 44 24 38	 mov	 QWORD PTR tv91[rsp], rax
  0010d	48 8b 44 24 38	 mov	 rax, QWORD PTR tv91[rsp]
  00112	8b 00		 mov	 eax, DWORD PTR [rax]
  00114	ff c8		 dec	 eax
  00116	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tv91[rsp]
  0011b	89 01		 mov	 DWORD PTR [rcx], eax
  0011d	48 8b 44 24 38	 mov	 rax, QWORD PTR tv91[rsp]
  00122	8b 4c 24 30	 mov	 ecx, DWORD PTR tv129[rsp]
  00126	39 08		 cmp	 DWORD PTR [rax], ecx
  00128	7d 09		 jge	 SHORT $LN3@PyObject_S
  0012a	e8 00 00 00 00	 call	 PyThreadState_Get
  0012f	c6 40 1c 00	 mov	 BYTE PTR [rax+28], 0
$LN3@PyObject_S:
  00133	33 c0		 xor	 eax, eax
  00135	85 c0		 test	 eax, eax
  00137	75 9e		 jne	 SHORT $LN6@PyObject_S

; 489  :     if (res == NULL)

  00139	48 83 7c 24 20
	00		 cmp	 QWORD PTR res$[rsp], 0
  0013f	75 04		 jne	 SHORT $LN2@PyObject_S

; 490  :         return NULL;

  00141	33 c0		 xor	 eax, eax
  00143	eb 7a		 jmp	 SHORT $LN12@PyObject_S
$LN2@PyObject_S:

; 491  :     if (!PyUnicode_Check(res)) {

  00145	48 8b 44 24 20	 mov	 rax, QWORD PTR res$[rsp]
  0014a	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0014e	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00154	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00159	85 c0		 test	 eax, eax
  0015b	75 2e		 jne	 SHORT $LN1@PyObject_S

; 492  :         PyErr_Format(PyExc_TypeError,
; 493  :                      "__str__ returned non-string (type %.200s)",
; 494  :                      Py_TYPE(res)->tp_name);

  0015d	48 8b 44 24 20	 mov	 rax, QWORD PTR res$[rsp]
  00162	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00166	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  0016a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CK@EHJIGAIF@__str__?5returned?5non?9string?5?$CItyp@
  00171	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00178	e8 00 00 00 00	 call	 PyErr_Format

; 495  :         Py_DECREF(res);

  0017d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR res$[rsp]
  00182	e8 00 00 00 00	 call	 _Py_DecRef

; 496  :         return NULL;

  00187	33 c0		 xor	 eax, eax
  00189	eb 34		 jmp	 SHORT $LN12@PyObject_S
$LN1@PyObject_S:

; 497  :     }
; 498  : #ifndef Py_DEBUG
; 499  :     if (PyUnicode_READY(res) < 0)
; 500  :         return NULL;
; 501  : #endif
; 502  :     assert(_PyUnicode_CheckConsistency(res, 1));

  0018b	ba 01 00 00 00	 mov	 edx, 1
  00190	48 8b 4c 24 20	 mov	 rcx, QWORD PTR res$[rsp]
  00195	e8 00 00 00 00	 call	 _PyUnicode_CheckConsistency
  0019a	85 c0		 test	 eax, eax
  0019c	75 1c		 jne	 SHORT $LN16@PyObject_S
  0019e	41 b8 f6 01 00
	00		 mov	 r8d, 502		; 000001f6H
  001a4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CI@ONKHJAFP@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  001ab	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EI@PCBNHGIB@?$AA_?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AAC?$AAo?$AAn?$AAs?$AAi?$AAs?$AAt?$AAe?$AAn?$AAc?$AAy?$AA?$CI?$AAr?$AAe?$AAs?$AA?0@
  001b2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001b8	33 c0		 xor	 eax, eax
$LN16@PyObject_S:

; 503  :     return res;

  001ba	48 8b 44 24 20	 mov	 rax, QWORD PTR res$[rsp]
$LN12@PyObject_S:

; 504  : }

  001bf	48 83 c4 48	 add	 rsp, 72			; 00000048H
  001c3	c3		 ret	 0
PyObject_Str ENDP
_TEXT	ENDS
PUBLIC	??_C@_1CK@POHBIJFN@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAa?$AAs?$AAc?$AAi?$AAi?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	PyObject_ASCII
EXTRN	PyUnicode_DecodeASCII:PROC
EXTRN	_PyUnicode_AsASCIIString:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyObject_ASCII DD imagerel $LN7
	DD	imagerel $LN7+244
	DD	imagerel $unwind$PyObject_ASCII
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyObject_ASCII DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_1CK@POHBIJFN@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAa?$AAs?$AAc?$AAi?$AAi?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CK@POHBIJFN@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAa?$AAs?$AAc?$AAi?$AAi?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 's', 00H
	DB	'_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, '('
	DB	00H, 'a', 00H, 's', 00H, 'c', 00H, 'i', 00H, 'i', 00H, ')', 00H
	DB	00H, 00H					; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyObject_ASCII
_TEXT	SEGMENT
res$ = 32
repr$ = 40
ascii$ = 48
v$ = 80
PyObject_ASCII PROC					; COMDAT

; 508  : {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 509  :     PyObject *repr, *ascii, *res;
; 510  : 
; 511  :     repr = PyObject_Repr(v);

  00009	48 8b 4c 24 50	 mov	 rcx, QWORD PTR v$[rsp]
  0000e	e8 00 00 00 00	 call	 PyObject_Repr
  00013	48 89 44 24 28	 mov	 QWORD PTR repr$[rsp], rax

; 512  :     if (repr == NULL)

  00018	48 83 7c 24 28
	00		 cmp	 QWORD PTR repr$[rsp], 0
  0001e	75 07		 jne	 SHORT $LN2@PyObject_A

; 513  :         return NULL;

  00020	33 c0		 xor	 eax, eax
  00022	e9 c8 00 00 00	 jmp	 $LN3@PyObject_A
$LN2@PyObject_A:

; 514  : 
; 515  :     /* repr is guaranteed to be a PyUnicode object by PyObject_Repr */
; 516  :     ascii = _PyUnicode_AsASCIIString(repr, "backslashreplace");

  00027	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BB@GGCFDDAA@backslashreplace?$AA@
  0002e	48 8b 4c 24 28	 mov	 rcx, QWORD PTR repr$[rsp]
  00033	e8 00 00 00 00	 call	 _PyUnicode_AsASCIIString
  00038	48 89 44 24 30	 mov	 QWORD PTR ascii$[rsp], rax

; 517  :     Py_DECREF(repr);

  0003d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR repr$[rsp]
  00042	e8 00 00 00 00	 call	 _Py_DecRef

; 518  :     if (ascii == NULL)

  00047	48 83 7c 24 30
	00		 cmp	 QWORD PTR ascii$[rsp], 0
  0004d	75 07		 jne	 SHORT $LN1@PyObject_A

; 519  :         return NULL;

  0004f	33 c0		 xor	 eax, eax
  00051	e9 99 00 00 00	 jmp	 $LN3@PyObject_A
$LN1@PyObject_A:

; 520  : 
; 521  :     res = PyUnicode_DecodeASCII(
; 522  :         PyBytes_AS_STRING(ascii),
; 523  :         PyBytes_GET_SIZE(ascii),
; 524  :         NULL);

  00056	48 8b 44 24 30	 mov	 rax, QWORD PTR ascii$[rsp]
  0005b	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0005f	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00065	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  0006a	85 c0		 test	 eax, eax
  0006c	75 1c		 jne	 SHORT $LN5@PyObject_A
  0006e	41 b8 0b 02 00
	00		 mov	 r8d, 523		; 0000020bH
  00074	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CI@ONKHJAFP@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  0007b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@POHBIJFN@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAa?$AAs?$AAc?$AAi?$AAi?$AA?$CJ?$AA?$AA@
  00082	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00088	33 c0		 xor	 eax, eax
$LN5@PyObject_A:
  0008a	48 8b 44 24 30	 mov	 rax, QWORD PTR ascii$[rsp]
  0008f	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00093	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00099	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  0009e	85 c0		 test	 eax, eax
  000a0	75 1c		 jne	 SHORT $LN6@PyObject_A
  000a2	41 b8 0a 02 00
	00		 mov	 r8d, 522		; 0000020aH
  000a8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CI@ONKHJAFP@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  000af	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@POHBIJFN@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAa?$AAs?$AAc?$AAi?$AAi?$AA?$CJ?$AA?$AA@
  000b6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000bc	33 c0		 xor	 eax, eax
$LN6@PyObject_A:
  000be	48 8b 44 24 30	 mov	 rax, QWORD PTR ascii$[rsp]
  000c3	48 83 c0 78	 add	 rax, 120		; 00000078H
  000c7	45 33 c0	 xor	 r8d, r8d
  000ca	48 8b 4c 24 30	 mov	 rcx, QWORD PTR ascii$[rsp]
  000cf	48 8b 51 60	 mov	 rdx, QWORD PTR [rcx+96]
  000d3	48 8b c8	 mov	 rcx, rax
  000d6	e8 00 00 00 00	 call	 PyUnicode_DecodeASCII
  000db	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax

; 525  : 
; 526  :     Py_DECREF(ascii);

  000e0	48 8b 4c 24 30	 mov	 rcx, QWORD PTR ascii$[rsp]
  000e5	e8 00 00 00 00	 call	 _Py_DecRef

; 527  :     return res;

  000ea	48 8b 44 24 20	 mov	 rax, QWORD PTR res$[rsp]
$LN3@PyObject_A:

; 528  : }

  000ef	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000f3	c3		 ret	 0
PyObject_ASCII ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CL@GNADLFAE@__bytes__?5returned?5non?9bytes?5?$CIty@ ; `string'
PUBLIC	PyObject_Bytes
EXTRN	PyBytes_FromObject:PROC
EXTRN	PyErr_Occurred:PROC
EXTRN	PyObject_CallFunctionObjArgs:PROC
EXTRN	_PyObject_LookupSpecial:PROC
EXTRN	PyBytes_Type:BYTE
EXTRN	PyBytes_FromString:PROC
EXTRN	_tls_index:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyObject_Bytes DD imagerel $LN10
	DD	imagerel $LN10+271
	DD	imagerel $unwind$PyObject_Bytes
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyObject_Bytes DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0CL@GNADLFAE@__bytes__?5returned?5non?9bytes?5?$CIty@
CONST	SEGMENT
??_C@_0CL@GNADLFAE@__bytes__?5returned?5non?9bytes?5?$CIty@ DB '__bytes__'
	DB	' returned non-bytes (type %.200s)', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyObject_Bytes
_TEXT	SEGMENT
result$ = 32
func$ = 40
v$ = 64
PyObject_Bytes PROC					; COMDAT

; 532  : {

$LN10:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 533  :     PyObject *result, *func;
; 534  :     _Py_IDENTIFIER(__bytes__);
; 535  : 
; 536  :     if (v == NULL)

  00009	48 83 7c 24 40
	00		 cmp	 QWORD PTR v$[rsp], 0
  0000f	75 11		 jne	 SHORT $LN7@PyObject_B

; 537  :         return PyBytes_FromString("<NULL>");

  00011	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06CBHGEMFM@?$DMNULL?$DO?$AA@
  00018	e8 00 00 00 00	 call	 PyBytes_FromString
  0001d	e9 e8 00 00 00	 jmp	 $LN8@PyObject_B
$LN7@PyObject_B:

; 538  : 
; 539  :     if (PyBytes_CheckExact(v)) {

  00022	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyBytes_Type
  00029	48 8b 4c 24 40	 mov	 rcx, QWORD PTR v$[rsp]
  0002e	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00032	75 14		 jne	 SHORT $LN6@PyObject_B

; 540  :         Py_INCREF(v);

  00034	48 8b 4c 24 40	 mov	 rcx, QWORD PTR v$[rsp]
  00039	e8 00 00 00 00	 call	 _Py_IncRef

; 541  :         return v;

  0003e	48 8b 44 24 40	 mov	 rax, QWORD PTR v$[rsp]
  00043	e9 c2 00 00 00	 jmp	 $LN8@PyObject_B
$LN6@PyObject_B:

; 542  :     }
; 543  : 
; 544  :     func = _PyObject_LookupSpecial(v, &PyId___bytes__);

  00048	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId___bytes__@?1??PyObject_Bytes@@9@9
  0004d	8b c0		 mov	 eax, eax
  0004f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00055	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0005e	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00062	48 8b d0	 mov	 rdx, rax
  00065	48 8b 4c 24 40	 mov	 rcx, QWORD PTR v$[rsp]
  0006a	e8 00 00 00 00	 call	 _PyObject_LookupSpecial
  0006f	48 89 44 24 28	 mov	 QWORD PTR func$[rsp], rax

; 545  :     if (func != NULL) {

  00074	48 83 7c 24 28
	00		 cmp	 QWORD PTR func$[rsp], 0
  0007a	74 76		 je	 SHORT $LN5@PyObject_B

; 546  :         result = PyObject_CallFunctionObjArgs(func, NULL);

  0007c	33 d2		 xor	 edx, edx
  0007e	48 8b 4c 24 28	 mov	 rcx, QWORD PTR func$[rsp]
  00083	e8 00 00 00 00	 call	 PyObject_CallFunctionObjArgs
  00088	48 89 44 24 20	 mov	 QWORD PTR result$[rsp], rax

; 547  :         Py_DECREF(func);

  0008d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR func$[rsp]
  00092	e8 00 00 00 00	 call	 _Py_DecRef

; 548  :         if (result == NULL)

  00097	48 83 7c 24 20
	00		 cmp	 QWORD PTR result$[rsp], 0
  0009d	75 04		 jne	 SHORT $LN4@PyObject_B

; 549  :             return NULL;

  0009f	33 c0		 xor	 eax, eax
  000a1	eb 67		 jmp	 SHORT $LN8@PyObject_B
$LN4@PyObject_B:

; 550  :         if (!PyBytes_Check(result)) {

  000a3	48 8b 44 24 20	 mov	 rax, QWORD PTR result$[rsp]
  000a8	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000ac	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000b2	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  000b7	85 c0		 test	 eax, eax
  000b9	75 2e		 jne	 SHORT $LN3@PyObject_B

; 551  :             PyErr_Format(PyExc_TypeError,
; 552  :                          "__bytes__ returned non-bytes (type %.200s)",
; 553  :                          Py_TYPE(result)->tp_name);

  000bb	48 8b 44 24 20	 mov	 rax, QWORD PTR result$[rsp]
  000c0	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000c4	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  000c8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CL@GNADLFAE@__bytes__?5returned?5non?9bytes?5?$CIty@
  000cf	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000d6	e8 00 00 00 00	 call	 PyErr_Format

; 554  :             Py_DECREF(result);

  000db	48 8b 4c 24 20	 mov	 rcx, QWORD PTR result$[rsp]
  000e0	e8 00 00 00 00	 call	 _Py_DecRef

; 555  :             return NULL;

  000e5	33 c0		 xor	 eax, eax
  000e7	eb 21		 jmp	 SHORT $LN8@PyObject_B
$LN3@PyObject_B:

; 556  :         }
; 557  :         return result;

  000e9	48 8b 44 24 20	 mov	 rax, QWORD PTR result$[rsp]
  000ee	eb 1a		 jmp	 SHORT $LN8@PyObject_B
  000f0	eb 0e		 jmp	 SHORT $LN2@PyObject_B
$LN5@PyObject_B:

; 558  :     }
; 559  :     else if (PyErr_Occurred())

  000f2	e8 00 00 00 00	 call	 PyErr_Occurred
  000f7	48 85 c0	 test	 rax, rax
  000fa	74 04		 je	 SHORT $LN1@PyObject_B

; 560  :         return NULL;

  000fc	33 c0		 xor	 eax, eax
  000fe	eb 0a		 jmp	 SHORT $LN8@PyObject_B
$LN1@PyObject_B:
$LN2@PyObject_B:

; 561  :     return PyBytes_FromObject(v);

  00100	48 8b 4c 24 40	 mov	 rcx, QWORD PTR v$[rsp]
  00105	e8 00 00 00 00	 call	 PyBytes_FromObject
$LN8@PyObject_B:

; 562  : }

  0010a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0010e	c3		 ret	 0
PyObject_Bytes ENDP
_TEXT	ENDS
PUBLIC	??_C@_0P@LIJGNMLP@?5in?5comparison?$AA@		; `string'
PUBLIC	??_C@_1DG@OPOPIJBD@?$AAP?$AAy?$AA_?$AAL?$AAT?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAo?$AAp?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AAp?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAP?$AAy?$AA_?$AAG?$AAE?$AA?$AA@ ; `string'
PUBLIC	PyObject_RichCompare
EXTRN	_PyErr_BadInternalCall:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyObject_RichCompare DD imagerel $LN15
	DD	imagerel $LN15+312
	DD	imagerel $unwind$PyObject_RichCompare
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyObject_RichCompare DD 011301H
	DD	08213H
xdata	ENDS
;	COMDAT ??_C@_0P@LIJGNMLP@?5in?5comparison?$AA@
CONST	SEGMENT
??_C@_0P@LIJGNMLP@?5in?5comparison?$AA@ DB ' in comparison', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DG@OPOPIJBD@?$AAP?$AAy?$AA_?$AAL?$AAT?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAo?$AAp?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AAp?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAP?$AAy?$AA_?$AAG?$AAE?$AA?$AA@
CONST	SEGMENT
??_C@_1DG@OPOPIJBD@?$AAP?$AAy?$AA_?$AAL?$AAT?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAo?$AAp?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AAp?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAP?$AAy?$AA_?$AAG?$AAE?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, '_', 00H, 'L', 00H, 'T', 00H, ' ', 00H, '<', 00H
	DB	'=', 00H, ' ', 00H, 'o', 00H, 'p', 00H, ' ', 00H, '&', 00H, '&'
	DB	00H, ' ', 00H, 'o', 00H, 'p', 00H, ' ', 00H, '<', 00H, '=', 00H
	DB	' ', 00H, 'P', 00H, 'y', 00H, '_', 00H, 'G', 00H, 'E', 00H, 00H
	DB	00H						; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyObject_RichCompare
_TEXT	SEGMENT
res$ = 32
tv78 = 40
tv128 = 48
tv90 = 56
v$ = 80
w$ = 88
op$ = 96
PyObject_RichCompare PROC				; COMDAT

; 656  : {

$LN15:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 657  :     PyObject *res;
; 658  : 
; 659  :     assert(Py_LT <= op && op <= Py_GE);

  00013	83 7c 24 60 00	 cmp	 DWORD PTR op$[rsp], 0
  00018	7c 07		 jl	 SHORT $LN11@PyObject_R@2
  0001a	83 7c 24 60 05	 cmp	 DWORD PTR op$[rsp], 5
  0001f	7e 1c		 jle	 SHORT $LN12@PyObject_R@2
$LN11@PyObject_R@2:
  00021	41 b8 93 02 00
	00		 mov	 r8d, 659		; 00000293H
  00027	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CI@ONKHJAFP@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  0002e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DG@OPOPIJBD@?$AAP?$AAy?$AA_?$AAL?$AAT?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAo?$AAp?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AAp?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAP?$AAy?$AA_?$AAG?$AAE?$AA?$AA@
  00035	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0003b	33 c0		 xor	 eax, eax
$LN12@PyObject_R@2:

; 660  :     if (v == NULL || w == NULL) {

  0003d	48 83 7c 24 50
	00		 cmp	 QWORD PTR v$[rsp], 0
  00043	74 08		 je	 SHORT $LN7@PyObject_R@2
  00045	48 83 7c 24 58
	00		 cmp	 QWORD PTR w$[rsp], 0
  0004b	75 22		 jne	 SHORT $LN8@PyObject_R@2
$LN7@PyObject_R@2:

; 661  :         if (!PyErr_Occurred())

  0004d	e8 00 00 00 00	 call	 PyErr_Occurred
  00052	48 85 c0	 test	 rax, rax
  00055	75 11		 jne	 SHORT $LN6@PyObject_R@2

; 662  :             PyErr_BadInternalCall();

  00057	ba 96 02 00 00	 mov	 edx, 662		; 00000296H
  0005c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@LBNADOJM@?4?4?2Objects?2object?4c?$AA@
  00063	e8 00 00 00 00	 call	 _PyErr_BadInternalCall
$LN6@PyObject_R@2:

; 663  :         return NULL;

  00068	33 c0		 xor	 eax, eax
  0006a	e9 c4 00 00 00	 jmp	 $LN9@PyObject_R@2
$LN8@PyObject_R@2:

; 664  :     }
; 665  :     if (Py_EnterRecursiveCall(" in comparison"))

  0006f	e8 00 00 00 00	 call	 PyThreadState_Get
  00074	48 83 c0 18	 add	 rax, 24
  00078	48 89 44 24 28	 mov	 QWORD PTR tv78[rsp], rax
  0007d	48 8b 44 24 28	 mov	 rax, QWORD PTR tv78[rsp]
  00082	8b 00		 mov	 eax, DWORD PTR [rax]
  00084	ff c0		 inc	 eax
  00086	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tv78[rsp]
  0008b	89 01		 mov	 DWORD PTR [rcx], eax
  0008d	48 8b 44 24 28	 mov	 rax, QWORD PTR tv78[rsp]
  00092	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _Py_CheckRecursionLimit
  00098	39 08		 cmp	 DWORD PTR [rax], ecx
  0009a	7e 17		 jle	 SHORT $LN5@PyObject_R@2
  0009c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@LIJGNMLP@?5in?5comparison?$AA@
  000a3	e8 00 00 00 00	 call	 _Py_CheckRecursiveCall
  000a8	85 c0		 test	 eax, eax
  000aa	74 07		 je	 SHORT $LN5@PyObject_R@2

; 666  :         return NULL;

  000ac	33 c0		 xor	 eax, eax
  000ae	e9 80 00 00 00	 jmp	 $LN9@PyObject_R@2
$LN5@PyObject_R@2:

; 667  :     res = do_richcompare(v, w, op);

  000b3	44 8b 44 24 60	 mov	 r8d, DWORD PTR op$[rsp]
  000b8	48 8b 54 24 58	 mov	 rdx, QWORD PTR w$[rsp]
  000bd	48 8b 4c 24 50	 mov	 rcx, QWORD PTR v$[rsp]
  000c2	e8 00 00 00 00	 call	 do_richcompare
  000c7	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax
$LN4@PyObject_R@2:

; 668  :     Py_LeaveRecursiveCall();

  000cc	83 3d 00 00 00
	00 64		 cmp	 DWORD PTR _Py_CheckRecursionLimit, 100 ; 00000064H
  000d3	7e 0f		 jle	 SHORT $LN13@PyObject_R@2
  000d5	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR _Py_CheckRecursionLimit
  000db	83 e8 32	 sub	 eax, 50			; 00000032H
  000de	89 44 24 30	 mov	 DWORD PTR tv128[rsp], eax
  000e2	eb 10		 jmp	 SHORT $LN14@PyObject_R@2
$LN13@PyObject_R@2:
  000e4	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR _Py_CheckRecursionLimit
  000ea	c1 f8 02	 sar	 eax, 2
  000ed	6b c0 03	 imul	 eax, 3
  000f0	89 44 24 30	 mov	 DWORD PTR tv128[rsp], eax
$LN14@PyObject_R@2:
  000f4	e8 00 00 00 00	 call	 PyThreadState_Get
  000f9	48 83 c0 18	 add	 rax, 24
  000fd	48 89 44 24 38	 mov	 QWORD PTR tv90[rsp], rax
  00102	48 8b 44 24 38	 mov	 rax, QWORD PTR tv90[rsp]
  00107	8b 00		 mov	 eax, DWORD PTR [rax]
  00109	ff c8		 dec	 eax
  0010b	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tv90[rsp]
  00110	89 01		 mov	 DWORD PTR [rcx], eax
  00112	48 8b 44 24 38	 mov	 rax, QWORD PTR tv90[rsp]
  00117	8b 4c 24 30	 mov	 ecx, DWORD PTR tv128[rsp]
  0011b	39 08		 cmp	 DWORD PTR [rax], ecx
  0011d	7d 09		 jge	 SHORT $LN1@PyObject_R@2
  0011f	e8 00 00 00 00	 call	 PyThreadState_Get
  00124	c6 40 1c 00	 mov	 BYTE PTR [rax+28], 0
$LN1@PyObject_R@2:
  00128	33 c0		 xor	 eax, eax
  0012a	85 c0		 test	 eax, eax
  0012c	75 9e		 jne	 SHORT $LN4@PyObject_R@2

; 669  :     return res;

  0012e	48 8b 44 24 20	 mov	 rax, QWORD PTR res$[rsp]
$LN9@PyObject_R@2:

; 670  : }

  00133	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00137	c3		 ret	 0
PyObject_RichCompare ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CI@DJEENELO@unorderable?5types?3?5?$CF?4100s?$CI?$CJ?5?$CFs?5?$CF@ ; `string'
EXTRN	_Py_FalseStruct:BYTE
EXTRN	_Py_TrueStruct:BYTE
EXTRN	PyType_IsSubtype:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$do_richcompare DD imagerel do_richcompare
	DD	imagerel do_richcompare+605
	DD	imagerel $unwind$do_richcompare
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$do_richcompare DD 011301H
	DD	0c213H
xdata	ENDS
;	COMDAT ??_C@_0CI@DJEENELO@unorderable?5types?3?5?$CF?4100s?$CI?$CJ?5?$CFs?5?$CF@
CONST	SEGMENT
??_C@_0CI@DJEENELO@unorderable?5types?3?5?$CF?4100s?$CI?$CJ?5?$CFs?5?$CF@ DB 'u'
	DB	'norderable types: %.100s() %s %.100s()', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT do_richcompare
_TEXT	SEGMENT
res$ = 48
f$ = 56
checked_reverse_op$ = 64
tv139 = 68
tv141 = 72
tv143 = 80
v$ = 112
w$ = 120
op$ = 128
do_richcompare PROC					; COMDAT

; 603  : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 604  :     richcmpfunc f;
; 605  :     PyObject *res;
; 606  :     int checked_reverse_op = 0;

  00013	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR checked_reverse_op$[rsp], 0

; 607  : 
; 608  :     if (v->ob_type != w->ob_type &&
; 609  :         PyType_IsSubtype(w->ob_type, v->ob_type) &&
; 610  :         (f = w->ob_type->tp_richcompare) != NULL) {

  0001b	48 8b 44 24 70	 mov	 rax, QWORD PTR v$[rsp]
  00020	48 8b 4c 24 78	 mov	 rcx, QWORD PTR w$[rsp]
  00025	48 8b 49 58	 mov	 rcx, QWORD PTR [rcx+88]
  00029	48 39 48 58	 cmp	 QWORD PTR [rax+88], rcx
  0002d	0f 84 88 00 00
	00		 je	 $LN11@do_richcom
  00033	48 8b 44 24 70	 mov	 rax, QWORD PTR v$[rsp]
  00038	48 8b 50 58	 mov	 rdx, QWORD PTR [rax+88]
  0003c	48 8b 44 24 78	 mov	 rax, QWORD PTR w$[rsp]
  00041	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  00045	e8 00 00 00 00	 call	 PyType_IsSubtype
  0004a	85 c0		 test	 eax, eax
  0004c	74 6d		 je	 SHORT $LN11@do_richcom
  0004e	48 8b 44 24 78	 mov	 rax, QWORD PTR w$[rsp]
  00053	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00057	48 8b 80 20 01
	00 00		 mov	 rax, QWORD PTR [rax+288]
  0005e	48 89 44 24 38	 mov	 QWORD PTR f$[rsp], rax
  00063	48 83 7c 24 38
	00		 cmp	 QWORD PTR f$[rsp], 0
  00069	74 50		 je	 SHORT $LN11@do_richcom

; 611  :         checked_reverse_op = 1;

  0006b	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR checked_reverse_op$[rsp], 1

; 612  :         res = (*f)(w, v, _Py_SwappedOp[op]);

  00073	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR op$[rsp]
  0007b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_SwappedOp
  00082	44 8b 04 81	 mov	 r8d, DWORD PTR [rcx+rax*4]
  00086	48 8b 54 24 70	 mov	 rdx, QWORD PTR v$[rsp]
  0008b	48 8b 4c 24 78	 mov	 rcx, QWORD PTR w$[rsp]
  00090	ff 54 24 38	 call	 QWORD PTR f$[rsp]
  00094	48 89 44 24 30	 mov	 QWORD PTR res$[rsp], rax

; 613  :         if (res != Py_NotImplemented)

  00099	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NotImplementedStruct
  000a0	48 39 44 24 30	 cmp	 QWORD PTR res$[rsp], rax
  000a5	74 0a		 je	 SHORT $LN10@do_richcom

; 614  :             return res;

  000a7	48 8b 44 24 30	 mov	 rax, QWORD PTR res$[rsp]
  000ac	e9 a7 01 00 00	 jmp	 $LN12@do_richcom
$LN10@do_richcom:

; 615  :         Py_DECREF(res);

  000b1	48 8b 4c 24 30	 mov	 rcx, QWORD PTR res$[rsp]
  000b6	e8 00 00 00 00	 call	 _Py_DecRef
$LN11@do_richcom:

; 616  :     }
; 617  :     if ((f = v->ob_type->tp_richcompare) != NULL) {

  000bb	48 8b 44 24 70	 mov	 rax, QWORD PTR v$[rsp]
  000c0	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000c4	48 8b 80 20 01
	00 00		 mov	 rax, QWORD PTR [rax+288]
  000cb	48 89 44 24 38	 mov	 QWORD PTR f$[rsp], rax
  000d0	48 83 7c 24 38
	00		 cmp	 QWORD PTR f$[rsp], 0
  000d6	74 3d		 je	 SHORT $LN9@do_richcom

; 618  :         res = (*f)(v, w, op);

  000d8	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR op$[rsp]
  000e0	48 8b 54 24 78	 mov	 rdx, QWORD PTR w$[rsp]
  000e5	48 8b 4c 24 70	 mov	 rcx, QWORD PTR v$[rsp]
  000ea	ff 54 24 38	 call	 QWORD PTR f$[rsp]
  000ee	48 89 44 24 30	 mov	 QWORD PTR res$[rsp], rax

; 619  :         if (res != Py_NotImplemented)

  000f3	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NotImplementedStruct
  000fa	48 39 44 24 30	 cmp	 QWORD PTR res$[rsp], rax
  000ff	74 0a		 je	 SHORT $LN8@do_richcom

; 620  :             return res;

  00101	48 8b 44 24 30	 mov	 rax, QWORD PTR res$[rsp]
  00106	e9 4d 01 00 00	 jmp	 $LN12@do_richcom
$LN8@do_richcom:

; 621  :         Py_DECREF(res);

  0010b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR res$[rsp]
  00110	e8 00 00 00 00	 call	 _Py_DecRef
$LN9@do_richcom:

; 622  :     }
; 623  :     if (!checked_reverse_op && (f = w->ob_type->tp_richcompare) != NULL) {

  00115	83 7c 24 40 00	 cmp	 DWORD PTR checked_reverse_op$[rsp], 0
  0011a	75 65		 jne	 SHORT $LN7@do_richcom
  0011c	48 8b 44 24 78	 mov	 rax, QWORD PTR w$[rsp]
  00121	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00125	48 8b 80 20 01
	00 00		 mov	 rax, QWORD PTR [rax+288]
  0012c	48 89 44 24 38	 mov	 QWORD PTR f$[rsp], rax
  00131	48 83 7c 24 38
	00		 cmp	 QWORD PTR f$[rsp], 0
  00137	74 48		 je	 SHORT $LN7@do_richcom

; 624  :         res = (*f)(w, v, _Py_SwappedOp[op]);

  00139	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR op$[rsp]
  00141	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_SwappedOp
  00148	44 8b 04 81	 mov	 r8d, DWORD PTR [rcx+rax*4]
  0014c	48 8b 54 24 70	 mov	 rdx, QWORD PTR v$[rsp]
  00151	48 8b 4c 24 78	 mov	 rcx, QWORD PTR w$[rsp]
  00156	ff 54 24 38	 call	 QWORD PTR f$[rsp]
  0015a	48 89 44 24 30	 mov	 QWORD PTR res$[rsp], rax

; 625  :         if (res != Py_NotImplemented)

  0015f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NotImplementedStruct
  00166	48 39 44 24 30	 cmp	 QWORD PTR res$[rsp], rax
  0016b	74 0a		 je	 SHORT $LN6@do_richcom

; 626  :             return res;

  0016d	48 8b 44 24 30	 mov	 rax, QWORD PTR res$[rsp]
  00172	e9 e1 00 00 00	 jmp	 $LN12@do_richcom
$LN6@do_richcom:

; 627  :         Py_DECREF(res);

  00177	48 8b 4c 24 30	 mov	 rcx, QWORD PTR res$[rsp]
  0017c	e8 00 00 00 00	 call	 _Py_DecRef
$LN7@do_richcom:

; 628  :     }
; 629  :     /* If neither object implements it, provide a sensible default
; 630  :        for == and !=, but raise an exception for ordering. */
; 631  :     switch (op) {

  00181	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR op$[rsp]
  00188	89 44 24 44	 mov	 DWORD PTR tv139[rsp], eax
  0018c	83 7c 24 44 02	 cmp	 DWORD PTR tv139[rsp], 2
  00191	74 09		 je	 SHORT $LN3@do_richcom
  00193	83 7c 24 44 03	 cmp	 DWORD PTR tv139[rsp], 3
  00198	74 34		 je	 SHORT $LN2@do_richcom
  0019a	eb 64		 jmp	 SHORT $LN1@do_richcom
$LN3@do_richcom:

; 632  :     case Py_EQ:
; 633  :         res = (v == w) ? Py_True : Py_False;

  0019c	48 8b 44 24 78	 mov	 rax, QWORD PTR w$[rsp]
  001a1	48 39 44 24 70	 cmp	 QWORD PTR v$[rsp], rax
  001a6	75 0e		 jne	 SHORT $LN14@do_richcom
  001a8	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  001af	48 89 44 24 48	 mov	 QWORD PTR tv141[rsp], rax
  001b4	eb 0c		 jmp	 SHORT $LN15@do_richcom
$LN14@do_richcom:
  001b6	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct
  001bd	48 89 44 24 48	 mov	 QWORD PTR tv141[rsp], rax
$LN15@do_richcom:
  001c2	48 8b 44 24 48	 mov	 rax, QWORD PTR tv141[rsp]
  001c7	48 89 44 24 30	 mov	 QWORD PTR res$[rsp], rax

; 634  :         break;

  001cc	eb 7b		 jmp	 SHORT $LN4@do_richcom
$LN2@do_richcom:

; 635  :     case Py_NE:
; 636  :         res = (v != w) ? Py_True : Py_False;

  001ce	48 8b 44 24 78	 mov	 rax, QWORD PTR w$[rsp]
  001d3	48 39 44 24 70	 cmp	 QWORD PTR v$[rsp], rax
  001d8	74 0e		 je	 SHORT $LN16@do_richcom
  001da	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  001e1	48 89 44 24 50	 mov	 QWORD PTR tv143[rsp], rax
  001e6	eb 0c		 jmp	 SHORT $LN17@do_richcom
$LN16@do_richcom:
  001e8	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct
  001ef	48 89 44 24 50	 mov	 QWORD PTR tv143[rsp], rax
$LN17@do_richcom:
  001f4	48 8b 44 24 50	 mov	 rax, QWORD PTR tv143[rsp]
  001f9	48 89 44 24 30	 mov	 QWORD PTR res$[rsp], rax

; 637  :         break;

  001fe	eb 49		 jmp	 SHORT $LN4@do_richcom
$LN1@do_richcom:

; 638  :     default:
; 639  :         /* XXX Special-case None so it doesn't show as NoneType() */
; 640  :         PyErr_Format(PyExc_TypeError,
; 641  :                      "unorderable types: %.100s() %s %.100s()",
; 642  :                      v->ob_type->tp_name,
; 643  :                      opstrings[op],
; 644  :                      w->ob_type->tp_name);

  00200	48 8b 44 24 78	 mov	 rax, QWORD PTR w$[rsp]
  00205	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00209	48 63 8c 24 80
	00 00 00	 movsxd	 rcx, DWORD PTR op$[rsp]
  00211	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:opstrings
  00218	4c 8b 44 24 70	 mov	 r8, QWORD PTR v$[rsp]
  0021d	4d 8b 40 58	 mov	 r8, QWORD PTR [r8+88]
  00221	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00225	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0022a	4c 8b 0c ca	 mov	 r9, QWORD PTR [rdx+rcx*8]
  0022e	4d 8b 40 70	 mov	 r8, QWORD PTR [r8+112]
  00232	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CI@DJEENELO@unorderable?5types?3?5?$CF?4100s?$CI?$CJ?5?$CFs?5?$CF@
  00239	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00240	e8 00 00 00 00	 call	 PyErr_Format

; 645  :         return NULL;

  00245	33 c0		 xor	 eax, eax
  00247	eb 0f		 jmp	 SHORT $LN12@do_richcom
$LN4@do_richcom:

; 646  :     }
; 647  :     Py_INCREF(res);

  00249	48 8b 4c 24 30	 mov	 rcx, QWORD PTR res$[rsp]
  0024e	e8 00 00 00 00	 call	 _Py_IncRef

; 648  :     return res;

  00253	48 8b 44 24 30	 mov	 rax, QWORD PTR res$[rsp]
$LN12@do_richcom:

; 649  : }

  00258	48 83 c4 68	 add	 rsp, 104		; 00000068H
  0025c	c3		 ret	 0
do_richcompare ENDP
_TEXT	ENDS
PUBLIC	PyObject_IsTrue
PUBLIC	PyObject_RichCompareBool
EXTRN	PyBool_Type:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyObject_RichCompareBool DD imagerel $LN12
	DD	imagerel $LN12+197
	DD	imagerel $unwind$PyObject_RichCompareBool
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyObject_RichCompareBool DD 011301H
	DD	06213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyObject_RichCompareBool
_TEXT	SEGMENT
res$ = 32
ok$ = 40
tv75 = 44
v$ = 64
w$ = 72
op$ = 80
PyObject_RichCompareBool PROC				; COMDAT

; 676  : {

$LN12:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 677  :     PyObject *res;
; 678  :     int ok;
; 679  : 
; 680  :     /* Quick result when objects are the same.
; 681  :        Guarantees that identity implies equality. */
; 682  :     if (v == w) {

  00013	48 8b 44 24 48	 mov	 rax, QWORD PTR w$[rsp]
  00018	48 39 44 24 40	 cmp	 QWORD PTR v$[rsp], rax
  0001d	75 21		 jne	 SHORT $LN7@PyObject_R@3

; 683  :         if (op == Py_EQ)

  0001f	83 7c 24 50 02	 cmp	 DWORD PTR op$[rsp], 2
  00024	75 0c		 jne	 SHORT $LN6@PyObject_R@3

; 684  :             return 1;

  00026	b8 01 00 00 00	 mov	 eax, 1
  0002b	e9 90 00 00 00	 jmp	 $LN8@PyObject_R@3
  00030	eb 0e		 jmp	 SHORT $LN5@PyObject_R@3
$LN6@PyObject_R@3:

; 685  :         else if (op == Py_NE)

  00032	83 7c 24 50 03	 cmp	 DWORD PTR op$[rsp], 3
  00037	75 07		 jne	 SHORT $LN4@PyObject_R@3

; 686  :             return 0;

  00039	33 c0		 xor	 eax, eax
  0003b	e9 80 00 00 00	 jmp	 $LN8@PyObject_R@3
$LN4@PyObject_R@3:
$LN5@PyObject_R@3:
$LN7@PyObject_R@3:

; 687  :     }
; 688  : 
; 689  :     res = PyObject_RichCompare(v, w, op);

  00040	44 8b 44 24 50	 mov	 r8d, DWORD PTR op$[rsp]
  00045	48 8b 54 24 48	 mov	 rdx, QWORD PTR w$[rsp]
  0004a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR v$[rsp]
  0004f	e8 00 00 00 00	 call	 PyObject_RichCompare
  00054	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax

; 690  :     if (res == NULL)

  00059	48 83 7c 24 20
	00		 cmp	 QWORD PTR res$[rsp], 0
  0005f	75 07		 jne	 SHORT $LN3@PyObject_R@3

; 691  :         return -1;

  00061	b8 ff ff ff ff	 mov	 eax, -1
  00066	eb 58		 jmp	 SHORT $LN8@PyObject_R@3
$LN3@PyObject_R@3:

; 692  :     if (PyBool_Check(res))

  00068	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyBool_Type
  0006f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR res$[rsp]
  00074	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00078	75 2a		 jne	 SHORT $LN2@PyObject_R@3

; 693  :         ok = (res == Py_True);

  0007a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  00081	48 39 44 24 20	 cmp	 QWORD PTR res$[rsp], rax
  00086	75 0a		 jne	 SHORT $LN10@PyObject_R@3
  00088	c7 44 24 2c 01
	00 00 00	 mov	 DWORD PTR tv75[rsp], 1
  00090	eb 08		 jmp	 SHORT $LN11@PyObject_R@3
$LN10@PyObject_R@3:
  00092	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR tv75[rsp], 0
$LN11@PyObject_R@3:
  0009a	8b 44 24 2c	 mov	 eax, DWORD PTR tv75[rsp]
  0009e	89 44 24 28	 mov	 DWORD PTR ok$[rsp], eax

; 694  :     else

  000a2	eb 0e		 jmp	 SHORT $LN1@PyObject_R@3
$LN2@PyObject_R@3:

; 695  :         ok = PyObject_IsTrue(res);

  000a4	48 8b 4c 24 20	 mov	 rcx, QWORD PTR res$[rsp]
  000a9	e8 00 00 00 00	 call	 PyObject_IsTrue
  000ae	89 44 24 28	 mov	 DWORD PTR ok$[rsp], eax
$LN1@PyObject_R@3:

; 696  :     Py_DECREF(res);

  000b2	48 8b 4c 24 20	 mov	 rcx, QWORD PTR res$[rsp]
  000b7	e8 00 00 00 00	 call	 _Py_DecRef

; 697  :     return ok;

  000bc	8b 44 24 28	 mov	 eax, DWORD PTR ok$[rsp]
$LN8@PyObject_R@3:

; 698  : }

  000c0	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000c4	c3		 ret	 0
PyObject_RichCompareBool ENDP
_TEXT	ENDS
PUBLIC	__real@43f0000000000000
PUBLIC	__real@43e0000000000000
PUBLIC	__real@41b0000000000000
PUBLIC	__mask@@NegDouble@
PUBLIC	__real@0000000000000000
PUBLIC	_Py_HashDouble
EXTRN	__imp_frexp:PROC
EXTRN	__imp__isnan:PROC
EXTRN	__imp__finite:PROC
EXTRN	_fltused:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_HashDouble DD imagerel $LN18
	DD	imagerel $LN18+636
	DD	imagerel $unwind$_Py_HashDouble
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_HashDouble DD 010a01H
	DD	0a20aH
xdata	ENDS
;	COMDAT __real@43f0000000000000
CONST	SEGMENT
__real@43f0000000000000 DQ 043f0000000000000r	; 1.84467e+019
CONST	ENDS
;	COMDAT __real@43e0000000000000
CONST	SEGMENT
__real@43e0000000000000 DQ 043e0000000000000r	; 9.22337e+018
CONST	ENDS
;	COMDAT __real@41b0000000000000
CONST	SEGMENT
__real@41b0000000000000 DQ 041b0000000000000r	; 2.68435e+008
CONST	ENDS
;	COMDAT __mask@@NegDouble@
CONST	SEGMENT
__mask@@NegDouble@ DB 00H, 00H, 00H, 00H, 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_HashDouble
_TEXT	SEGMENT
y$ = 32
x$ = 40
sign$ = 48
e$ = 52
m$ = 56
tv74 = 64
tv131 = 68
v$ = 96
_Py_HashDouble PROC					; COMDAT

; 759  : {

$LN18:
  00000	f2 0f 11 44 24
	08		 movsdx	 QWORD PTR [rsp+8], xmm0
  00006	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 760  :     int e, sign;
; 761  :     double m;
; 762  :     Py_uhash_t x, y;
; 763  : 
; 764  :     if (!Py_IS_FINITE(v)) {

  0000a	f2 0f 10 44 24
	60		 movsdx	 xmm0, QWORD PTR v$[rsp]
  00010	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__finite
  00016	85 c0		 test	 eax, eax
  00018	75 55		 jne	 SHORT $LN8@Py_HashDou

; 765  :         if (Py_IS_INFINITY(v))

  0001a	f2 0f 10 44 24
	60		 movsdx	 xmm0, QWORD PTR v$[rsp]
  00020	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__finite
  00026	85 c0		 test	 eax, eax
  00028	75 3e		 jne	 SHORT $LN7@Py_HashDou
  0002a	f2 0f 10 44 24
	60		 movsdx	 xmm0, QWORD PTR v$[rsp]
  00030	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__isnan
  00036	85 c0		 test	 eax, eax
  00038	75 2e		 jne	 SHORT $LN7@Py_HashDou

; 766  :             return v > 0 ? _PyHASH_INF : -_PyHASH_INF;

  0003a	f2 0f 10 44 24
	60		 movsdx	 xmm0, QWORD PTR v$[rsp]
  00040	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  00048	76 0a		 jbe	 SHORT $LN11@Py_HashDou
  0004a	c7 44 24 40 2f
	cb 04 00	 mov	 DWORD PTR tv74[rsp], 314159 ; 0004cb2fH
  00052	eb 08		 jmp	 SHORT $LN12@Py_HashDou
$LN11@Py_HashDou:
  00054	c7 44 24 40 d1
	34 fb ff	 mov	 DWORD PTR tv74[rsp], -314159 ; fffffffffffb34d1H
$LN12@Py_HashDou:
  0005c	48 63 44 24 40	 movsxd	 rax, DWORD PTR tv74[rsp]
  00061	e9 11 02 00 00	 jmp	 $LN9@Py_HashDou

; 767  :         else

  00066	eb 07		 jmp	 SHORT $LN6@Py_HashDou
$LN7@Py_HashDou:

; 768  :             return _PyHASH_NAN;

  00068	33 c0		 xor	 eax, eax
  0006a	e9 08 02 00 00	 jmp	 $LN9@Py_HashDou
$LN6@Py_HashDou:
$LN8@Py_HashDou:

; 769  :     }
; 770  : 
; 771  :     m = frexp(v, &e);

  0006f	48 8d 54 24 34	 lea	 rdx, QWORD PTR e$[rsp]
  00074	f2 0f 10 44 24
	60		 movsdx	 xmm0, QWORD PTR v$[rsp]
  0007a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_frexp
  00080	f2 0f 11 44 24
	38		 movsdx	 QWORD PTR m$[rsp], xmm0

; 772  : 
; 773  :     sign = 1;

  00086	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR sign$[rsp], 1

; 774  :     if (m < 0) {

  0008e	66 0f 57 c0	 xorpd	 xmm0, xmm0
  00092	66 0f 2f 44 24
	38		 comisd	 xmm0, QWORD PTR m$[rsp]
  00098	76 1c		 jbe	 SHORT $LN5@Py_HashDou

; 775  :         sign = -1;

  0009a	c7 44 24 30 ff
	ff ff ff	 mov	 DWORD PTR sign$[rsp], -1

; 776  :         m = -m;

  000a2	f2 0f 10 44 24
	38		 movsdx	 xmm0, QWORD PTR m$[rsp]
  000a8	66 0f 57 05 00
	00 00 00	 xorpd	 xmm0, QWORD PTR __mask@@NegDouble@
  000b0	f2 0f 11 44 24
	38		 movsdx	 QWORD PTR m$[rsp], xmm0
$LN5@Py_HashDou:

; 777  :     }
; 778  : 
; 779  :     /* process 28 bits at a time;  this should work well both for binary
; 780  :        and hexadecimal floating point. */
; 781  :     x = 0;

  000b6	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR x$[rsp], 0
$LN4@Py_HashDou:

; 782  :     while (m) {

  000bf	f2 0f 10 44 24
	38		 movsdx	 xmm0, QWORD PTR m$[rsp]
  000c5	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  000cd	7a 06		 jp	 SHORT $LN17@Py_HashDou
  000cf	0f 84 fb 00 00
	00		 je	 $LN3@Py_HashDou
$LN17@Py_HashDou:

; 783  :         x = ((x << 28) & _PyHASH_MODULUS) | x >> (_PyHASH_BITS - 28);

  000d5	48 8b 44 24 28	 mov	 rax, QWORD PTR x$[rsp]
  000da	48 c1 e0 1c	 shl	 rax, 28
  000de	48 b9 ff ff ff
	ff ff ff ff 1f	 mov	 rcx, 2305843009213693951 ; 1fffffffffffffffH
  000e8	48 23 c1	 and	 rax, rcx
  000eb	48 8b 4c 24 28	 mov	 rcx, QWORD PTR x$[rsp]
  000f0	48 c1 e9 21	 shr	 rcx, 33			; 00000021H
  000f4	48 0b c1	 or	 rax, rcx
  000f7	48 89 44 24 28	 mov	 QWORD PTR x$[rsp], rax

; 784  :         m *= 268435456.0;  /* 2**28 */

  000fc	f2 0f 10 44 24
	38		 movsdx	 xmm0, QWORD PTR m$[rsp]
  00102	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@41b0000000000000
  0010a	f2 0f 11 44 24
	38		 movsdx	 QWORD PTR m$[rsp], xmm0

; 785  :         e -= 28;

  00110	8b 44 24 34	 mov	 eax, DWORD PTR e$[rsp]
  00114	83 e8 1c	 sub	 eax, 28
  00117	89 44 24 34	 mov	 DWORD PTR e$[rsp], eax

; 786  :         y = (Py_uhash_t)m;  /* pull out integer part */

  0011b	33 c0		 xor	 eax, eax
  0011d	f2 0f 10 44 24
	38		 movsdx	 xmm0, QWORD PTR m$[rsp]
  00123	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@43e0000000000000
  0012b	76 1f		 jbe	 SHORT $LN16@Py_HashDou
  0012d	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@43e0000000000000
  00135	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@43e0000000000000
  0013d	73 0d		 jae	 SHORT $LN16@Py_HashDou
  0013f	48 b9 00 00 00
	00 00 00 00 80	 mov	 rcx, -9223372036854775808 ; 8000000000000000H
  00149	48 03 c1	 add	 rax, rcx
$LN16@Py_HashDou:
  0014c	f2 48 0f 2c c8	 cvttsd2si rcx, xmm0
  00151	48 03 c8	 add	 rcx, rax
  00154	48 8b c1	 mov	 rax, rcx
  00157	48 89 44 24 20	 mov	 QWORD PTR y$[rsp], rax

; 787  :         m -= y;

  0015c	48 8b 44 24 20	 mov	 rax, QWORD PTR y$[rsp]
  00161	66 0f ef c0	 pxor	 xmm0, xmm0
  00165	f2 48 0f 2a c0	 cvtsi2sd xmm0, rax
  0016a	48 85 c0	 test	 rax, rax
  0016d	7d 08		 jge	 SHORT $LN15@Py_HashDou
  0016f	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@43f0000000000000
$LN15@Py_HashDou:
  00177	f2 0f 10 4c 24
	38		 movsdx	 xmm1, QWORD PTR m$[rsp]
  0017d	f2 0f 5c c8	 subsd	 xmm1, xmm0
  00181	66 0f 28 c1	 movapd	 xmm0, xmm1
  00185	f2 0f 11 44 24
	38		 movsdx	 QWORD PTR m$[rsp], xmm0

; 788  :         x += y;

  0018b	48 8b 44 24 20	 mov	 rax, QWORD PTR y$[rsp]
  00190	48 8b 4c 24 28	 mov	 rcx, QWORD PTR x$[rsp]
  00195	48 03 c8	 add	 rcx, rax
  00198	48 8b c1	 mov	 rax, rcx
  0019b	48 89 44 24 28	 mov	 QWORD PTR x$[rsp], rax

; 789  :         if (x >= _PyHASH_MODULUS)

  001a0	48 b8 ff ff ff
	ff ff ff ff 1f	 mov	 rax, 2305843009213693951 ; 1fffffffffffffffH
  001aa	48 39 44 24 28	 cmp	 QWORD PTR x$[rsp], rax
  001af	72 1a		 jb	 SHORT $LN2@Py_HashDou

; 790  :             x -= _PyHASH_MODULUS;

  001b1	48 b8 ff ff ff
	ff ff ff ff 1f	 mov	 rax, 2305843009213693951 ; 1fffffffffffffffH
  001bb	48 8b 4c 24 28	 mov	 rcx, QWORD PTR x$[rsp]
  001c0	48 2b c8	 sub	 rcx, rax
  001c3	48 8b c1	 mov	 rax, rcx
  001c6	48 89 44 24 28	 mov	 QWORD PTR x$[rsp], rax
$LN2@Py_HashDou:

; 791  :     }

  001cb	e9 ef fe ff ff	 jmp	 $LN4@Py_HashDou
$LN3@Py_HashDou:

; 792  : 
; 793  :     /* adjust for the exponent;  first reduce it modulo _PyHASH_BITS */
; 794  :     e = e >= 0 ? e % _PyHASH_BITS : _PyHASH_BITS-1-((-1-e) % _PyHASH_BITS);

  001d0	83 7c 24 34 00	 cmp	 DWORD PTR e$[rsp], 0
  001d5	7c 14		 jl	 SHORT $LN13@Py_HashDou
  001d7	8b 44 24 34	 mov	 eax, DWORD PTR e$[rsp]
  001db	99		 cdq
  001dc	b9 3d 00 00 00	 mov	 ecx, 61			; 0000003dH
  001e1	f7 f9		 idiv	 ecx
  001e3	8b c2		 mov	 eax, edx
  001e5	89 44 24 44	 mov	 DWORD PTR tv131[rsp], eax
  001e9	eb 20		 jmp	 SHORT $LN14@Py_HashDou
$LN13@Py_HashDou:
  001eb	b8 ff ff ff ff	 mov	 eax, -1
  001f0	2b 44 24 34	 sub	 eax, DWORD PTR e$[rsp]
  001f4	99		 cdq
  001f5	b9 3d 00 00 00	 mov	 ecx, 61			; 0000003dH
  001fa	f7 f9		 idiv	 ecx
  001fc	8b c2		 mov	 eax, edx
  001fe	b9 3c 00 00 00	 mov	 ecx, 60			; 0000003cH
  00203	2b c8		 sub	 ecx, eax
  00205	8b c1		 mov	 eax, ecx
  00207	89 44 24 44	 mov	 DWORD PTR tv131[rsp], eax
$LN14@Py_HashDou:
  0020b	8b 44 24 44	 mov	 eax, DWORD PTR tv131[rsp]
  0020f	89 44 24 34	 mov	 DWORD PTR e$[rsp], eax

; 795  :     x = ((x << e) & _PyHASH_MODULUS) | x >> (_PyHASH_BITS - e);

  00213	8b 44 24 34	 mov	 eax, DWORD PTR e$[rsp]
  00217	0f b6 c8	 movzx	 ecx, al
  0021a	48 8b 44 24 28	 mov	 rax, QWORD PTR x$[rsp]
  0021f	48 d3 e0	 shl	 rax, cl
  00222	48 b9 ff ff ff
	ff ff ff ff 1f	 mov	 rcx, 2305843009213693951 ; 1fffffffffffffffH
  0022c	48 23 c1	 and	 rax, rcx
  0022f	b9 3d 00 00 00	 mov	 ecx, 61			; 0000003dH
  00234	2b 4c 24 34	 sub	 ecx, DWORD PTR e$[rsp]
  00238	48 8b 54 24 28	 mov	 rdx, QWORD PTR x$[rsp]
  0023d	48 d3 ea	 shr	 rdx, cl
  00240	48 8b ca	 mov	 rcx, rdx
  00243	48 0b c1	 or	 rax, rcx
  00246	48 89 44 24 28	 mov	 QWORD PTR x$[rsp], rax

; 796  : 
; 797  :     x = x * sign;

  0024b	48 63 44 24 30	 movsxd	 rax, DWORD PTR sign$[rsp]
  00250	48 8b 4c 24 28	 mov	 rcx, QWORD PTR x$[rsp]
  00255	48 0f af c8	 imul	 rcx, rax
  00259	48 8b c1	 mov	 rax, rcx
  0025c	48 89 44 24 28	 mov	 QWORD PTR x$[rsp], rax

; 798  :     if (x == (Py_uhash_t)-1)

  00261	48 83 7c 24 28
	ff		 cmp	 QWORD PTR x$[rsp], -1
  00267	75 09		 jne	 SHORT $LN1@Py_HashDou

; 799  :         x = (Py_uhash_t)-2;

  00269	48 c7 44 24 28
	fe ff ff ff	 mov	 QWORD PTR x$[rsp], -2
$LN1@Py_HashDou:

; 800  :     return (Py_hash_t)x;

  00272	48 8b 44 24 28	 mov	 rax, QWORD PTR x$[rsp]
$LN9@Py_HashDou:

; 801  : }

  00277	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0027b	c3		 ret	 0
_Py_HashDouble ENDP
_TEXT	ENDS
PUBLIC	_Py_HashPointer
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_HashPointer DD imagerel $LN4
	DD	imagerel $LN4+77
	DD	imagerel $unwind$_Py_HashPointer
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_HashPointer DD 010901H
	DD	02209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _Py_HashPointer
_TEXT	SEGMENT
y$ = 0
x$ = 8
p$ = 32
_Py_HashPointer PROC					; COMDAT

; 805  : {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 18	 sub	 rsp, 24

; 806  :     Py_hash_t x;
; 807  :     size_t y = (size_t)p;

  00009	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0000e	48 89 04 24	 mov	 QWORD PTR y$[rsp], rax

; 808  :     /* bottom 3 or 4 bits are likely to be 0; rotate y by 4 to avoid
; 809  :        excessive hash collisions for dicts and sets */
; 810  :     y = (y >> 4) | (y << (8 * SIZEOF_VOID_P - 4));

  00012	48 8b 04 24	 mov	 rax, QWORD PTR y$[rsp]
  00016	48 c1 e8 04	 shr	 rax, 4
  0001a	48 8b 0c 24	 mov	 rcx, QWORD PTR y$[rsp]
  0001e	48 c1 e1 3c	 shl	 rcx, 60			; 0000003cH
  00022	48 0b c1	 or	 rax, rcx
  00025	48 89 04 24	 mov	 QWORD PTR y$[rsp], rax

; 811  :     x = (Py_hash_t)y;

  00029	48 8b 04 24	 mov	 rax, QWORD PTR y$[rsp]
  0002d	48 89 44 24 08	 mov	 QWORD PTR x$[rsp], rax

; 812  :     if (x == -1)

  00032	48 83 7c 24 08
	ff		 cmp	 QWORD PTR x$[rsp], -1
  00038	75 09		 jne	 SHORT $LN1@Py_HashPoi

; 813  :         x = -2;

  0003a	48 c7 44 24 08
	fe ff ff ff	 mov	 QWORD PTR x$[rsp], -2
$LN1@Py_HashPoi:

; 814  :     return x;

  00043	48 8b 44 24 08	 mov	 rax, QWORD PTR x$[rsp]

; 815  : }

  00048	48 83 c4 18	 add	 rsp, 24
  0004c	c3		 ret	 0
_Py_HashPointer ENDP
_TEXT	ENDS
PUBLIC	??_C@_1DG@KLCDMOLB@?$AA_?$AAP?$AAy?$AA_?$AAH?$AAa?$AAs?$AAh?$AAS?$AAe?$AAc?$AAr?$AAe?$AAt?$AA_?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AAd?$AA?$AA@ ; `string'
PUBLIC	_Py_HashBytes
EXTRN	_Py_HashSecret_Initialized:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_HashBytes DD imagerel $LN9
	DD	imagerel $LN9+256
	DD	imagerel $unwind$_Py_HashBytes
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_HashBytes DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT ??_C@_1DG@KLCDMOLB@?$AA_?$AAP?$AAy?$AA_?$AAH?$AAa?$AAs?$AAh?$AAS?$AAe?$AAc?$AAr?$AAe?$AAt?$AA_?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AAd?$AA?$AA@
CONST	SEGMENT
??_C@_1DG@KLCDMOLB@?$AA_?$AAP?$AAy?$AA_?$AAH?$AAa?$AAs?$AAh?$AAS?$AAe?$AAc?$AAr?$AAe?$AAt?$AA_?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AAd?$AA?$AA@ DB '_'
	DB	00H, 'P', 00H, 'y', 00H, '_', 00H, 'H', 00H, 'a', 00H, 's', 00H
	DB	'h', 00H, 'S', 00H, 'e', 00H, 'c', 00H, 'r', 00H, 'e', 00H, 't'
	DB	00H, '_', 00H, 'I', 00H, 'n', 00H, 'i', 00H, 't', 00H, 'i', 00H
	DB	'a', 00H, 'l', 00H, 'i', 00H, 'z', 00H, 'e', 00H, 'd', 00H, 00H
	DB	00H						; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_HashBytes
_TEXT	SEGMENT
x$ = 32
i$ = 40
p$ = 64
len$ = 72
_Py_HashBytes PROC					; COMDAT

; 819  : {

$LN9:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 820  :     Py_uhash_t x;
; 821  :     Py_ssize_t i;
; 822  : 
; 823  :     /*
; 824  :       We make the hash of the empty string be 0, rather than using
; 825  :       (prefix ^ suffix), since this slightly obfuscates the hash secret
; 826  :     */
; 827  : #ifdef Py_DEBUG
; 828  :     assert(_Py_HashSecret_Initialized);

  0000e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _Py_HashSecret_Initialized, 0
  00015	75 1c		 jne	 SHORT $LN8@Py_HashByt
  00017	41 b8 3c 03 00
	00		 mov	 r8d, 828		; 0000033cH
  0001d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CI@ONKHJAFP@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00024	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DG@KLCDMOLB@?$AA_?$AAP?$AAy?$AA_?$AAH?$AAa?$AAs?$AAh?$AAS?$AAe?$AAc?$AAr?$AAe?$AAt?$AA_?$AAI?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AAi?$AAz?$AAe?$AAd?$AA?$AA@
  0002b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00031	33 c0		 xor	 eax, eax
$LN8@Py_HashByt:

; 829  : #endif
; 830  :     if (len == 0) {

  00033	48 83 7c 24 48
	00		 cmp	 QWORD PTR len$[rsp], 0
  00039	75 07		 jne	 SHORT $LN5@Py_HashByt

; 831  :         return 0;

  0003b	33 c0		 xor	 eax, eax
  0003d	e9 b9 00 00 00	 jmp	 $LN6@Py_HashByt
$LN5@Py_HashByt:

; 832  :     }
; 833  :     x = (Py_uhash_t) _Py_HashSecret.prefix;

  00042	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_HashSecret
  00049	48 89 44 24 20	 mov	 QWORD PTR x$[rsp], rax

; 834  :     x ^= (Py_uhash_t) *p << 7;

  0004e	48 8b 44 24 40	 mov	 rax, QWORD PTR p$[rsp]
  00053	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00056	48 c1 e0 07	 shl	 rax, 7
  0005a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  0005f	48 33 c8	 xor	 rcx, rax
  00062	48 8b c1	 mov	 rax, rcx
  00065	48 89 44 24 20	 mov	 QWORD PTR x$[rsp], rax

; 835  :     for (i = 0; i < len; i++)

  0006a	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  00073	eb 0d		 jmp	 SHORT $LN4@Py_HashByt
$LN3@Py_HashByt:
  00075	48 8b 44 24 28	 mov	 rax, QWORD PTR i$[rsp]
  0007a	48 ff c0	 inc	 rax
  0007d	48 89 44 24 28	 mov	 QWORD PTR i$[rsp], rax
$LN4@Py_HashByt:
  00082	48 8b 44 24 48	 mov	 rax, QWORD PTR len$[rsp]
  00087	48 39 44 24 28	 cmp	 QWORD PTR i$[rsp], rax
  0008c	7d 2b		 jge	 SHORT $LN2@Py_HashByt

; 836  :         x = (_PyHASH_MULTIPLIER * x) ^ (Py_uhash_t) *p++;

  0008e	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  00093	48 69 c0 43 42
	0f 00		 imul	 rax, 1000003		; 000f4243H
  0009a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR p$[rsp]
  0009f	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  000a2	48 33 c1	 xor	 rax, rcx
  000a5	48 89 44 24 20	 mov	 QWORD PTR x$[rsp], rax
  000aa	48 8b 44 24 40	 mov	 rax, QWORD PTR p$[rsp]
  000af	48 ff c0	 inc	 rax
  000b2	48 89 44 24 40	 mov	 QWORD PTR p$[rsp], rax
  000b7	eb bc		 jmp	 SHORT $LN3@Py_HashByt
$LN2@Py_HashByt:

; 837  :     x ^= (Py_uhash_t) len;

  000b9	48 8b 44 24 48	 mov	 rax, QWORD PTR len$[rsp]
  000be	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  000c3	48 33 c8	 xor	 rcx, rax
  000c6	48 8b c1	 mov	 rax, rcx
  000c9	48 89 44 24 20	 mov	 QWORD PTR x$[rsp], rax

; 838  :     x ^= (Py_uhash_t) _Py_HashSecret.suffix;

  000ce	48 8b 05 08 00
	00 00		 mov	 rax, QWORD PTR _Py_HashSecret+8
  000d5	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  000da	48 33 c8	 xor	 rcx, rax
  000dd	48 8b c1	 mov	 rax, rcx
  000e0	48 89 44 24 20	 mov	 QWORD PTR x$[rsp], rax

; 839  :     if (x == -1)

  000e5	48 83 7c 24 20
	ff		 cmp	 QWORD PTR x$[rsp], -1
  000eb	75 09		 jne	 SHORT $LN1@Py_HashByt

; 840  :         x = -2;

  000ed	48 c7 44 24 20
	fe ff ff ff	 mov	 QWORD PTR x$[rsp], -2
$LN1@Py_HashByt:

; 841  :     return x;

  000f6	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
$LN6@Py_HashByt:

; 842  : }

  000fb	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000ff	c3		 ret	 0
_Py_HashBytes ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BK@BHBNMGFE@unhashable?5type?3?5?8?$CF?4200s?8?$AA@ ; `string'
PUBLIC	PyObject_HashNotImplemented
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyObject_HashNotImplemented DD imagerel $LN3
	DD	imagerel $LN3+53
	DD	imagerel $unwind$PyObject_HashNotImplemented
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyObject_HashNotImplemented DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT ??_C@_0BK@BHBNMGFE@unhashable?5type?3?5?8?$CF?4200s?8?$AA@
CONST	SEGMENT
??_C@_0BK@BHBNMGFE@unhashable?5type?3?5?8?$CF?4200s?8?$AA@ DB 'unhashable'
	DB	' type: ''%.200s''', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyObject_HashNotImplemented
_TEXT	SEGMENT
v$ = 48
PyObject_HashNotImplemented PROC			; COMDAT

; 846  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 847  :     PyErr_Format(PyExc_TypeError, "unhashable type: '%.200s'",
; 848  :                  Py_TYPE(v)->tp_name);

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR v$[rsp]
  0000e	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00012	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  00016	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@BHBNMGFE@unhashable?5type?3?5?8?$CF?4200s?8?$AA@
  0001d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00024	e8 00 00 00 00	 call	 PyErr_Format

; 849  :     return -1;

  00029	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1

; 850  : }

  00030	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00034	c3		 ret	 0
PyObject_HashNotImplemented ENDP
_TEXT	ENDS
PUBLIC	PyObject_Hash
EXTRN	PyType_Ready:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyObject_Hash DD imagerel $LN7
	DD	imagerel $LN7+142
	DD	imagerel $unwind$PyObject_Hash
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyObject_Hash DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyObject_Hash
_TEXT	SEGMENT
tp$ = 32
v$ = 64
PyObject_Hash PROC					; COMDAT

; 856  : {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 857  :     PyTypeObject *tp = Py_TYPE(v);

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR v$[rsp]
  0000e	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00012	48 89 44 24 20	 mov	 QWORD PTR tp$[rsp], rax

; 858  :     if (tp->tp_hash != NULL)

  00017	48 8b 44 24 20	 mov	 rax, QWORD PTR tp$[rsp]
  0001c	48 83 b8 d0 00
	00 00 00	 cmp	 QWORD PTR [rax+208], 0
  00024	74 12		 je	 SHORT $LN4@PyObject_H

; 859  :         return (*tp->tp_hash)(v);

  00026	48 8b 4c 24 40	 mov	 rcx, QWORD PTR v$[rsp]
  0002b	48 8b 44 24 20	 mov	 rax, QWORD PTR tp$[rsp]
  00030	ff 90 d0 00 00
	00		 call	 QWORD PTR [rax+208]
  00036	eb 51		 jmp	 SHORT $LN5@PyObject_H
$LN4@PyObject_H:

; 860  :     /* To keep to the general practice that inheriting
; 861  :      * solely from object in C code should work without
; 862  :      * an explicit call to PyType_Ready, we implicitly call
; 863  :      * PyType_Ready here and then check the tp_hash slot again
; 864  :      */
; 865  :     if (tp->tp_dict == NULL) {

  00038	48 8b 44 24 20	 mov	 rax, QWORD PTR tp$[rsp]
  0003d	48 83 b8 60 01
	00 00 00	 cmp	 QWORD PTR [rax+352], 0
  00045	75 38		 jne	 SHORT $LN3@PyObject_H

; 866  :         if (PyType_Ready(tp) < 0)

  00047	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tp$[rsp]
  0004c	e8 00 00 00 00	 call	 PyType_Ready
  00051	85 c0		 test	 eax, eax
  00053	7d 09		 jge	 SHORT $LN2@PyObject_H

; 867  :             return -1;

  00055	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1
  0005c	eb 2b		 jmp	 SHORT $LN5@PyObject_H
$LN2@PyObject_H:

; 868  :         if (tp->tp_hash != NULL)

  0005e	48 8b 44 24 20	 mov	 rax, QWORD PTR tp$[rsp]
  00063	48 83 b8 d0 00
	00 00 00	 cmp	 QWORD PTR [rax+208], 0
  0006b	74 12		 je	 SHORT $LN1@PyObject_H

; 869  :             return (*tp->tp_hash)(v);

  0006d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR v$[rsp]
  00072	48 8b 44 24 20	 mov	 rax, QWORD PTR tp$[rsp]
  00077	ff 90 d0 00 00
	00		 call	 QWORD PTR [rax+208]
  0007d	eb 0a		 jmp	 SHORT $LN5@PyObject_H
$LN1@PyObject_H:
$LN3@PyObject_H:

; 870  :     }
; 871  :     /* Otherwise, the object can't be hashed */
; 872  :     return PyObject_HashNotImplemented(v);

  0007f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR v$[rsp]
  00084	e8 00 00 00 00	 call	 PyObject_HashNotImplemented
$LN5@PyObject_H:

; 873  : }

  00089	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0008d	c3		 ret	 0
PyObject_Hash ENDP
_TEXT	ENDS
PUBLIC	PyObject_GetAttr
PUBLIC	PyObject_GetAttrString
EXTRN	PyUnicode_InternFromString:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyObject_GetAttrString DD imagerel $LN5
	DD	imagerel $LN5+127
	DD	imagerel $unwind$PyObject_GetAttrString
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyObject_GetAttrString DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyObject_GetAttrString
_TEXT	SEGMENT
w$ = 32
res$ = 40
v$ = 64
name$ = 72
PyObject_GetAttrString PROC				; COMDAT

; 877  : {

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 878  :     PyObject *w, *res;
; 879  : 
; 880  :     if (Py_TYPE(v)->tp_getattr != NULL)

  0000e	48 8b 44 24 40	 mov	 rax, QWORD PTR v$[rsp]
  00013	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00017	48 83 b8 98 00
	00 00 00	 cmp	 QWORD PTR [rax+152], 0
  0001f	74 1b		 je	 SHORT $LN2@PyObject_G

; 881  :         return (*Py_TYPE(v)->tp_getattr)(v, (char*)name);

  00021	48 8b 44 24 40	 mov	 rax, QWORD PTR v$[rsp]
  00026	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0002a	48 8b 54 24 48	 mov	 rdx, QWORD PTR name$[rsp]
  0002f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR v$[rsp]
  00034	ff 90 98 00 00
	00		 call	 QWORD PTR [rax+152]
  0003a	eb 3e		 jmp	 SHORT $LN3@PyObject_G
$LN2@PyObject_G:

; 882  :     w = PyUnicode_InternFromString(name);

  0003c	48 8b 4c 24 48	 mov	 rcx, QWORD PTR name$[rsp]
  00041	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  00046	48 89 44 24 20	 mov	 QWORD PTR w$[rsp], rax

; 883  :     if (w == NULL)

  0004b	48 83 7c 24 20
	00		 cmp	 QWORD PTR w$[rsp], 0
  00051	75 04		 jne	 SHORT $LN1@PyObject_G

; 884  :         return NULL;

  00053	33 c0		 xor	 eax, eax
  00055	eb 23		 jmp	 SHORT $LN3@PyObject_G
$LN1@PyObject_G:

; 885  :     res = PyObject_GetAttr(v, w);

  00057	48 8b 54 24 20	 mov	 rdx, QWORD PTR w$[rsp]
  0005c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR v$[rsp]
  00061	e8 00 00 00 00	 call	 PyObject_GetAttr
  00066	48 89 44 24 28	 mov	 QWORD PTR res$[rsp], rax

; 886  :     Py_DECREF(w);

  0006b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR w$[rsp]
  00070	e8 00 00 00 00	 call	 _Py_DecRef

; 887  :     return res;

  00075	48 8b 44 24 28	 mov	 rax, QWORD PTR res$[rsp]
$LN3@PyObject_G:

; 888  : }

  0007a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0007e	c3		 ret	 0
PyObject_GetAttrString ENDP
_TEXT	ENDS
PUBLIC	PyObject_HasAttrString
EXTRN	PyErr_Clear:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyObject_HasAttrString DD imagerel $LN4
	DD	imagerel $LN4+71
	DD	imagerel $unwind$PyObject_HasAttrString
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyObject_HasAttrString DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyObject_HasAttrString
_TEXT	SEGMENT
res$ = 32
v$ = 64
name$ = 72
PyObject_HasAttrString PROC				; COMDAT

; 892  : {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 893  :     PyObject *res = PyObject_GetAttrString(v, name);

  0000e	48 8b 54 24 48	 mov	 rdx, QWORD PTR name$[rsp]
  00013	48 8b 4c 24 40	 mov	 rcx, QWORD PTR v$[rsp]
  00018	e8 00 00 00 00	 call	 PyObject_GetAttrString
  0001d	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax

; 894  :     if (res != NULL) {

  00022	48 83 7c 24 20
	00		 cmp	 QWORD PTR res$[rsp], 0
  00028	74 11		 je	 SHORT $LN1@PyObject_H@2

; 895  :         Py_DECREF(res);

  0002a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR res$[rsp]
  0002f	e8 00 00 00 00	 call	 _Py_DecRef

; 896  :         return 1;

  00034	b8 01 00 00 00	 mov	 eax, 1
  00039	eb 07		 jmp	 SHORT $LN2@PyObject_H@2
$LN1@PyObject_H@2:

; 897  :     }
; 898  :     PyErr_Clear();

  0003b	e8 00 00 00 00	 call	 PyErr_Clear

; 899  :     return 0;

  00040	33 c0		 xor	 eax, eax
$LN2@PyObject_H@2:

; 900  : }

  00042	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00046	c3		 ret	 0
PyObject_HasAttrString ENDP
_TEXT	ENDS
PUBLIC	PyObject_SetAttr
PUBLIC	PyObject_SetAttrString
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyObject_SetAttrString DD imagerel $LN9
	DD	imagerel $LN9+157
	DD	imagerel $unwind$PyObject_SetAttrString
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyObject_SetAttrString DD 011301H
	DD	06213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyObject_SetAttrString
_TEXT	SEGMENT
res$ = 32
s$ = 40
v$ = 64
name$ = 72
w$ = 80
PyObject_SetAttrString PROC				; COMDAT

; 904  : {

$LN9:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 905  :     PyObject *s;
; 906  :     int res;
; 907  : 
; 908  :     if (Py_TYPE(v)->tp_setattr != NULL)

  00013	48 8b 44 24 40	 mov	 rax, QWORD PTR v$[rsp]
  00018	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0001c	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  00024	74 20		 je	 SHORT $LN6@PyObject_S@2

; 909  :         return (*Py_TYPE(v)->tp_setattr)(v, (char*)name, w);

  00026	48 8b 44 24 40	 mov	 rax, QWORD PTR v$[rsp]
  0002b	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0002f	4c 8b 44 24 50	 mov	 r8, QWORD PTR w$[rsp]
  00034	48 8b 54 24 48	 mov	 rdx, QWORD PTR name$[rsp]
  00039	48 8b 4c 24 40	 mov	 rcx, QWORD PTR v$[rsp]
  0003e	ff 90 a0 00 00
	00		 call	 QWORD PTR [rax+160]
  00044	eb 52		 jmp	 SHORT $LN7@PyObject_S@2
$LN6@PyObject_S@2:

; 910  :     s = PyUnicode_InternFromString(name);

  00046	48 8b 4c 24 48	 mov	 rcx, QWORD PTR name$[rsp]
  0004b	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  00050	48 89 44 24 28	 mov	 QWORD PTR s$[rsp], rax

; 911  :     if (s == NULL)

  00055	48 83 7c 24 28
	00		 cmp	 QWORD PTR s$[rsp], 0
  0005b	75 07		 jne	 SHORT $LN5@PyObject_S@2

; 912  :         return -1;

  0005d	b8 ff ff ff ff	 mov	 eax, -1
  00062	eb 34		 jmp	 SHORT $LN7@PyObject_S@2
$LN5@PyObject_S@2:

; 913  :     res = PyObject_SetAttr(v, s, w);

  00064	4c 8b 44 24 50	 mov	 r8, QWORD PTR w$[rsp]
  00069	48 8b 54 24 28	 mov	 rdx, QWORD PTR s$[rsp]
  0006e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR v$[rsp]
  00073	e8 00 00 00 00	 call	 PyObject_SetAttr
  00078	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax
$LN4@PyObject_S@2:

; 914  :     Py_XDECREF(s);

  0007c	48 83 7c 24 28
	00		 cmp	 QWORD PTR s$[rsp], 0
  00082	74 0a		 je	 SHORT $LN1@PyObject_S@2
  00084	48 8b 4c 24 28	 mov	 rcx, QWORD PTR s$[rsp]
  00089	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@PyObject_S@2:
  0008e	33 c0		 xor	 eax, eax
  00090	85 c0		 test	 eax, eax
  00092	75 e8		 jne	 SHORT $LN4@PyObject_S@2

; 915  :     return res;

  00094	8b 44 24 20	 mov	 eax, DWORD PTR res$[rsp]
$LN7@PyObject_S@2:

; 916  : }

  00098	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0009c	c3		 ret	 0
PyObject_SetAttrString ENDP
_TEXT	ENDS
PUBLIC	_PyObject_GetAttrId
PUBLIC	_PyObject_IsAbstract
EXTRN	PyErr_ExceptionMatches:PROC
EXTRN	PyExc_AttributeError:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyObject_IsAbstract DD imagerel $LN6
	DD	imagerel $LN6+138
	DD	imagerel $unwind$_PyObject_IsAbstract
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyObject_IsAbstract DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _PyObject_IsAbstract
_TEXT	SEGMENT
res$ = 32
isabstract$ = 40
obj$ = 64
_PyObject_IsAbstract PROC				; COMDAT

; 920  : {

$LN6:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 921  :     int res;
; 922  :     PyObject* isabstract;
; 923  :     _Py_IDENTIFIER(__isabstractmethod__);
; 924  : 
; 925  :     if (obj == NULL)

  00009	48 83 7c 24 40
	00		 cmp	 QWORD PTR obj$[rsp], 0
  0000f	75 04		 jne	 SHORT $LN3@PyObject_I@6

; 926  :         return 0;

  00011	33 c0		 xor	 eax, eax
  00013	eb 70		 jmp	 SHORT $LN4@PyObject_I@6
$LN3@PyObject_I@6:

; 927  : 
; 928  :     isabstract = _PyObject_GetAttrId(obj, &PyId___isabstractmethod__);

  00015	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId___isabstractmethod__@?1??_PyObject_IsAbstract@@9@9
  0001a	8b c0		 mov	 eax, eax
  0001c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00022	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0002b	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0002f	48 8b d0	 mov	 rdx, rax
  00032	48 8b 4c 24 40	 mov	 rcx, QWORD PTR obj$[rsp]
  00037	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  0003c	48 89 44 24 28	 mov	 QWORD PTR isabstract$[rsp], rax

; 929  :     if (isabstract == NULL) {

  00041	48 83 7c 24 28
	00		 cmp	 QWORD PTR isabstract$[rsp], 0
  00047	75 20		 jne	 SHORT $LN2@PyObject_I@6

; 930  :         if (PyErr_ExceptionMatches(PyExc_AttributeError)) {

  00049	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_AttributeError
  00050	e8 00 00 00 00	 call	 PyErr_ExceptionMatches
  00055	85 c0		 test	 eax, eax
  00057	74 09		 je	 SHORT $LN1@PyObject_I@6

; 931  :             PyErr_Clear();

  00059	e8 00 00 00 00	 call	 PyErr_Clear

; 932  :             return 0;

  0005e	33 c0		 xor	 eax, eax
  00060	eb 23		 jmp	 SHORT $LN4@PyObject_I@6
$LN1@PyObject_I@6:

; 933  :         }
; 934  :         return -1;

  00062	b8 ff ff ff ff	 mov	 eax, -1
  00067	eb 1c		 jmp	 SHORT $LN4@PyObject_I@6
$LN2@PyObject_I@6:

; 935  :     }
; 936  :     res = PyObject_IsTrue(isabstract);

  00069	48 8b 4c 24 28	 mov	 rcx, QWORD PTR isabstract$[rsp]
  0006e	e8 00 00 00 00	 call	 PyObject_IsTrue
  00073	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 937  :     Py_DECREF(isabstract);

  00077	48 8b 4c 24 28	 mov	 rcx, QWORD PTR isabstract$[rsp]
  0007c	e8 00 00 00 00	 call	 _Py_DecRef

; 938  :     return res;

  00081	8b 44 24 20	 mov	 eax, DWORD PTR res$[rsp]
$LN4@PyObject_I@6:

; 939  : }

  00085	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00089	c3		 ret	 0
_PyObject_IsAbstract ENDP
_TEXT	ENDS
EXTRN	_PyUnicode_FromId:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyObject_GetAttrId DD imagerel $LN4
	DD	imagerel $LN4+71
	DD	imagerel $unwind$_PyObject_GetAttrId
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyObject_GetAttrId DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _PyObject_GetAttrId
_TEXT	SEGMENT
oname$ = 32
result$ = 40
v$ = 64
name$ = 72
_PyObject_GetAttrId PROC				; COMDAT

; 943  : {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 944  :     PyObject *result;
; 945  :     PyObject *oname = _PyUnicode_FromId(name); /* borrowed */

  0000e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR name$[rsp]
  00013	e8 00 00 00 00	 call	 _PyUnicode_FromId
  00018	48 89 44 24 20	 mov	 QWORD PTR oname$[rsp], rax

; 946  :     if (!oname)

  0001d	48 83 7c 24 20
	00		 cmp	 QWORD PTR oname$[rsp], 0
  00023	75 04		 jne	 SHORT $LN1@PyObject_G@2

; 947  :         return NULL;

  00025	33 c0		 xor	 eax, eax
  00027	eb 19		 jmp	 SHORT $LN2@PyObject_G@2
$LN1@PyObject_G@2:

; 948  :     result = PyObject_GetAttr(v, oname);

  00029	48 8b 54 24 20	 mov	 rdx, QWORD PTR oname$[rsp]
  0002e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR v$[rsp]
  00033	e8 00 00 00 00	 call	 PyObject_GetAttr
  00038	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax

; 949  :     return result;

  0003d	48 8b 44 24 28	 mov	 rax, QWORD PTR result$[rsp]
$LN2@PyObject_G@2:

; 950  : }

  00042	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00046	c3		 ret	 0
_PyObject_GetAttrId ENDP
_TEXT	ENDS
PUBLIC	PyObject_HasAttr
PUBLIC	_PyObject_HasAttrId
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyObject_HasAttrId DD imagerel $LN4
	DD	imagerel $LN4+72
	DD	imagerel $unwind$_PyObject_HasAttrId
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyObject_HasAttrId DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _PyObject_HasAttrId
_TEXT	SEGMENT
oname$ = 32
result$ = 40
v$ = 64
name$ = 72
_PyObject_HasAttrId PROC				; COMDAT

; 954  : {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 955  :     int result;
; 956  :     PyObject *oname = _PyUnicode_FromId(name); /* borrowed */

  0000e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR name$[rsp]
  00013	e8 00 00 00 00	 call	 _PyUnicode_FromId
  00018	48 89 44 24 20	 mov	 QWORD PTR oname$[rsp], rax

; 957  :     if (!oname)

  0001d	48 83 7c 24 20
	00		 cmp	 QWORD PTR oname$[rsp], 0
  00023	75 07		 jne	 SHORT $LN1@PyObject_H@3

; 958  :         return -1;

  00025	b8 ff ff ff ff	 mov	 eax, -1
  0002a	eb 17		 jmp	 SHORT $LN2@PyObject_H@3
$LN1@PyObject_H@3:

; 959  :     result = PyObject_HasAttr(v, oname);

  0002c	48 8b 54 24 20	 mov	 rdx, QWORD PTR oname$[rsp]
  00031	48 8b 4c 24 40	 mov	 rcx, QWORD PTR v$[rsp]
  00036	e8 00 00 00 00	 call	 PyObject_HasAttr
  0003b	89 44 24 28	 mov	 DWORD PTR result$[rsp], eax

; 960  :     return result;

  0003f	8b 44 24 28	 mov	 eax, DWORD PTR result$[rsp]
$LN2@PyObject_H@3:

; 961  : }

  00043	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00047	c3		 ret	 0
_PyObject_HasAttrId ENDP
_TEXT	ENDS
PUBLIC	_PyObject_SetAttrId
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyObject_SetAttrId DD imagerel $LN4
	DD	imagerel $LN4+82
	DD	imagerel $unwind$_PyObject_SetAttrId
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyObject_SetAttrId DD 011301H
	DD	06213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _PyObject_SetAttrId
_TEXT	SEGMENT
oname$ = 32
result$ = 40
v$ = 64
name$ = 72
w$ = 80
_PyObject_SetAttrId PROC				; COMDAT

; 965  : {

$LN4:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 966  :     int result;
; 967  :     PyObject *oname = _PyUnicode_FromId(name); /* borrowed */

  00013	48 8b 4c 24 48	 mov	 rcx, QWORD PTR name$[rsp]
  00018	e8 00 00 00 00	 call	 _PyUnicode_FromId
  0001d	48 89 44 24 20	 mov	 QWORD PTR oname$[rsp], rax

; 968  :     if (!oname)

  00022	48 83 7c 24 20
	00		 cmp	 QWORD PTR oname$[rsp], 0
  00028	75 07		 jne	 SHORT $LN1@PyObject_S@3

; 969  :         return -1;

  0002a	b8 ff ff ff ff	 mov	 eax, -1
  0002f	eb 1c		 jmp	 SHORT $LN2@PyObject_S@3
$LN1@PyObject_S@3:

; 970  :     result = PyObject_SetAttr(v, oname, w);

  00031	4c 8b 44 24 50	 mov	 r8, QWORD PTR w$[rsp]
  00036	48 8b 54 24 20	 mov	 rdx, QWORD PTR oname$[rsp]
  0003b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR v$[rsp]
  00040	e8 00 00 00 00	 call	 PyObject_SetAttr
  00045	89 44 24 28	 mov	 DWORD PTR result$[rsp], eax

; 971  :     return result;

  00049	8b 44 24 28	 mov	 eax, DWORD PTR result$[rsp]
$LN2@PyObject_S@3:

; 972  : }

  0004d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00051	c3		 ret	 0
_PyObject_SetAttrId ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CF@KKJGINOJ@?8?$CF?450s?8?5object?5has?5no?5attribute?5@ ; `string'
PUBLIC	??_C@_0CM@IFFJPMHG@attribute?5name?5must?5be?5string?0?5n@ ; `string'
EXTRN	PyUnicode_AsUTF8:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyObject_GetAttr DD imagerel $LN7
	DD	imagerel $LN7+234
	DD	imagerel $unwind$PyObject_GetAttr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyObject_GetAttr DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT ??_C@_0CF@KKJGINOJ@?8?$CF?450s?8?5object?5has?5no?5attribute?5@
CONST	SEGMENT
??_C@_0CF@KKJGINOJ@?8?$CF?450s?8?5object?5has?5no?5attribute?5@ DB '''%.5'
	DB	'0s'' object has no attribute ''%U''', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@IFFJPMHG@attribute?5name?5must?5be?5string?0?5n@
CONST	SEGMENT
??_C@_0CM@IFFJPMHG@attribute?5name?5must?5be?5string?0?5n@ DB 'attribute '
	DB	'name must be string, not ''%.200s''', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyObject_GetAttr
_TEXT	SEGMENT
tp$ = 32
name_str$121019 = 40
v$ = 64
name$ = 72
PyObject_GetAttr PROC					; COMDAT

; 976  : {

$LN7:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 977  :     PyTypeObject *tp = Py_TYPE(v);

  0000e	48 8b 44 24 40	 mov	 rax, QWORD PTR v$[rsp]
  00013	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00017	48 89 44 24 20	 mov	 QWORD PTR tp$[rsp], rax

; 978  : 
; 979  :     if (!PyUnicode_Check(name)) {

  0001c	48 8b 44 24 48	 mov	 rax, QWORD PTR name$[rsp]
  00021	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00025	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0002b	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00030	85 c0		 test	 eax, eax
  00032	75 27		 jne	 SHORT $LN4@PyObject_G@3

; 980  :         PyErr_Format(PyExc_TypeError,
; 981  :                      "attribute name must be string, not '%.200s'",
; 982  :                      name->ob_type->tp_name);

  00034	48 8b 44 24 48	 mov	 rax, QWORD PTR name$[rsp]
  00039	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0003d	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  00041	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CM@IFFJPMHG@attribute?5name?5must?5be?5string?0?5n@
  00048	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0004f	e8 00 00 00 00	 call	 PyErr_Format

; 983  :         return NULL;

  00054	33 c0		 xor	 eax, eax
  00056	e9 8a 00 00 00	 jmp	 $LN5@PyObject_G@3
$LN4@PyObject_G@3:

; 984  :     }
; 985  :     if (tp->tp_getattro != NULL)

  0005b	48 8b 44 24 20	 mov	 rax, QWORD PTR tp$[rsp]
  00060	48 83 b8 e8 00
	00 00 00	 cmp	 QWORD PTR [rax+232], 0
  00068	74 17		 je	 SHORT $LN3@PyObject_G@3

; 986  :         return (*tp->tp_getattro)(v, name);

  0006a	48 8b 54 24 48	 mov	 rdx, QWORD PTR name$[rsp]
  0006f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR v$[rsp]
  00074	48 8b 44 24 20	 mov	 rax, QWORD PTR tp$[rsp]
  00079	ff 90 e8 00 00
	00		 call	 QWORD PTR [rax+232]
  0007f	eb 64		 jmp	 SHORT $LN5@PyObject_G@3
$LN3@PyObject_G@3:

; 987  :     if (tp->tp_getattr != NULL) {

  00081	48 8b 44 24 20	 mov	 rax, QWORD PTR tp$[rsp]
  00086	48 83 b8 98 00
	00 00 00	 cmp	 QWORD PTR [rax+152], 0
  0008e	74 32		 je	 SHORT $LN2@PyObject_G@3

; 988  :         char *name_str = _PyUnicode_AsString(name);

  00090	48 8b 4c 24 48	 mov	 rcx, QWORD PTR name$[rsp]
  00095	e8 00 00 00 00	 call	 PyUnicode_AsUTF8
  0009a	48 89 44 24 28	 mov	 QWORD PTR name_str$121019[rsp], rax

; 989  :         if (name_str == NULL)

  0009f	48 83 7c 24 28
	00		 cmp	 QWORD PTR name_str$121019[rsp], 0
  000a5	75 04		 jne	 SHORT $LN1@PyObject_G@3

; 990  :             return NULL;

  000a7	33 c0		 xor	 eax, eax
  000a9	eb 3a		 jmp	 SHORT $LN5@PyObject_G@3
$LN1@PyObject_G@3:

; 991  :         return (*tp->tp_getattr)(v, name_str);

  000ab	48 8b 54 24 28	 mov	 rdx, QWORD PTR name_str$121019[rsp]
  000b0	48 8b 4c 24 40	 mov	 rcx, QWORD PTR v$[rsp]
  000b5	48 8b 44 24 20	 mov	 rax, QWORD PTR tp$[rsp]
  000ba	ff 90 98 00 00
	00		 call	 QWORD PTR [rax+152]
  000c0	eb 23		 jmp	 SHORT $LN5@PyObject_G@3
$LN2@PyObject_G@3:

; 992  :     }
; 993  :     PyErr_Format(PyExc_AttributeError,
; 994  :                  "'%.50s' object has no attribute '%U'",
; 995  :                  tp->tp_name, name);

  000c2	4c 8b 4c 24 48	 mov	 r9, QWORD PTR name$[rsp]
  000c7	48 8b 44 24 20	 mov	 rax, QWORD PTR tp$[rsp]
  000cc	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  000d0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CF@KKJGINOJ@?8?$CF?450s?8?5object?5has?5no?5attribute?5@
  000d7	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_AttributeError
  000de	e8 00 00 00 00	 call	 PyErr_Format

; 996  :     return NULL;

  000e3	33 c0		 xor	 eax, eax
$LN5@PyObject_G@3:

; 997  : }

  000e5	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000e9	c3		 ret	 0
PyObject_GetAttr ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyObject_HasAttr DD imagerel $LN4
	DD	imagerel $LN4+71
	DD	imagerel $unwind$PyObject_HasAttr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyObject_HasAttr DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyObject_HasAttr
_TEXT	SEGMENT
res$ = 32
v$ = 64
name$ = 72
PyObject_HasAttr PROC					; COMDAT

; 1001 : {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1002 :     PyObject *res = PyObject_GetAttr(v, name);

  0000e	48 8b 54 24 48	 mov	 rdx, QWORD PTR name$[rsp]
  00013	48 8b 4c 24 40	 mov	 rcx, QWORD PTR v$[rsp]
  00018	e8 00 00 00 00	 call	 PyObject_GetAttr
  0001d	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax

; 1003 :     if (res != NULL) {

  00022	48 83 7c 24 20
	00		 cmp	 QWORD PTR res$[rsp], 0
  00028	74 11		 je	 SHORT $LN1@PyObject_H@4

; 1004 :         Py_DECREF(res);

  0002a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR res$[rsp]
  0002f	e8 00 00 00 00	 call	 _Py_DecRef

; 1005 :         return 1;

  00034	b8 01 00 00 00	 mov	 eax, 1
  00039	eb 07		 jmp	 SHORT $LN2@PyObject_H@4
$LN1@PyObject_H@4:

; 1006 :     }
; 1007 :     PyErr_Clear();

  0003b	e8 00 00 00 00	 call	 PyErr_Clear

; 1008 :     return 0;

  00040	33 c0		 xor	 eax, eax
$LN2@PyObject_H@4:

; 1009 : }

  00042	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00046	c3		 ret	 0
PyObject_HasAttr ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DH@IBBLNBJD@?8?$CF?4100s?8?5object?5has?5only?5read?9on@ ; `string'
PUBLIC	??_C@_0CL@MPONDJNH@?8?$CF?4100s?8?5object?5has?5no?5attribute@ ; `string'
PUBLIC	??_C@_09PFNDHGIG@assign?5to?$AA@		; `string'
PUBLIC	??_C@_03ONKLGNNH@del?$AA@			; `string'
PUBLIC	??_C@_1CK@FJENALJB@?$AAn?$AAa?$AAm?$AAe?$AA?9?$AA?$DO?$AAo?$AAb?$AA_?$AAr?$AAe?$AAf?$AAc?$AAn?$AAt?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA1?$AA?$AA@ ; `string'
EXTRN	PyUnicode_InternInPlace:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyObject_SetAttr DD imagerel $LN14
	DD	imagerel $LN14+538
	DD	imagerel $unwind$PyObject_SetAttr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyObject_SetAttr DD 011301H
	DD	0c213H
xdata	ENDS
;	COMDAT ??_C@_0DH@IBBLNBJD@?8?$CF?4100s?8?5object?5has?5only?5read?9on@
CONST	SEGMENT
??_C@_0DH@IBBLNBJD@?8?$CF?4100s?8?5object?5has?5only?5read?9on@ DB '''%.1'
	DB	'00s'' object has only read-only attributes (%s .%U)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@MPONDJNH@?8?$CF?4100s?8?5object?5has?5no?5attribute@
CONST	SEGMENT
??_C@_0CL@MPONDJNH@?8?$CF?4100s?8?5object?5has?5no?5attribute@ DB '''%.10'
	DB	'0s'' object has no attributes (%s .%U)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09PFNDHGIG@assign?5to?$AA@
CONST	SEGMENT
??_C@_09PFNDHGIG@assign?5to?$AA@ DB 'assign to', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03ONKLGNNH@del?$AA@
CONST	SEGMENT
??_C@_03ONKLGNNH@del?$AA@ DB 'del', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@FJENALJB@?$AAn?$AAa?$AAm?$AAe?$AA?9?$AA?$DO?$AAo?$AAb?$AA_?$AAr?$AAe?$AAf?$AAc?$AAn?$AAt?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA1?$AA?$AA@
CONST	SEGMENT
??_C@_1CK@FJENALJB@?$AAn?$AAa?$AAm?$AAe?$AA?9?$AA?$DO?$AAo?$AAb?$AA_?$AAr?$AAe?$AAf?$AAc?$AAn?$AAt?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA1?$AA?$AA@ DB 'n'
	DB	00H, 'a', 00H, 'm', 00H, 'e', 00H, '-', 00H, '>', 00H, 'o', 00H
	DB	'b', 00H, '_', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'c', 00H, 'n'
	DB	00H, 't', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '1', 00H
	DB	00H, 00H					; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyObject_SetAttr
_TEXT	SEGMENT
err$ = 48
tp$ = 56
name_str$121052 = 64
tv141 = 72
tv149 = 80
v$ = 112
name$ = 120
value$ = 128
PyObject_SetAttr PROC					; COMDAT

; 1013 : {

$LN14:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 1014 :     PyTypeObject *tp = Py_TYPE(v);

  00013	48 8b 44 24 70	 mov	 rax, QWORD PTR v$[rsp]
  00018	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0001c	48 89 44 24 38	 mov	 QWORD PTR tp$[rsp], rax

; 1015 :     int err;
; 1016 : 
; 1017 :     if (!PyUnicode_Check(name)) {

  00021	48 8b 44 24 78	 mov	 rax, QWORD PTR name$[rsp]
  00026	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0002a	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00030	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00035	85 c0		 test	 eax, eax
  00037	75 2a		 jne	 SHORT $LN6@PyObject_S@4

; 1018 :         PyErr_Format(PyExc_TypeError,
; 1019 :                      "attribute name must be string, not '%.200s'",
; 1020 :                      name->ob_type->tp_name);

  00039	48 8b 44 24 78	 mov	 rax, QWORD PTR name$[rsp]
  0003e	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00042	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  00046	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CM@IFFJPMHG@attribute?5name?5must?5be?5string?0?5n@
  0004d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00054	e8 00 00 00 00	 call	 PyErr_Format

; 1021 :         return -1;

  00059	b8 ff ff ff ff	 mov	 eax, -1
  0005e	e9 b2 01 00 00	 jmp	 $LN7@PyObject_S@4
$LN6@PyObject_S@4:

; 1022 :     }
; 1023 :     Py_INCREF(name);

  00063	48 8b 4c 24 78	 mov	 rcx, QWORD PTR name$[rsp]
  00068	e8 00 00 00 00	 call	 _Py_IncRef

; 1024 : 
; 1025 :     PyUnicode_InternInPlace(&name);

  0006d	48 8d 4c 24 78	 lea	 rcx, QWORD PTR name$[rsp]
  00072	e8 00 00 00 00	 call	 PyUnicode_InternInPlace

; 1026 :     if (tp->tp_setattro != NULL) {

  00077	48 8b 44 24 38	 mov	 rax, QWORD PTR tp$[rsp]
  0007c	48 83 b8 f0 00
	00 00 00	 cmp	 QWORD PTR [rax+240], 0
  00084	74 34		 je	 SHORT $LN5@PyObject_S@4

; 1027 :         err = (*tp->tp_setattro)(v, name, value);

  00086	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR value$[rsp]
  0008e	48 8b 54 24 78	 mov	 rdx, QWORD PTR name$[rsp]
  00093	48 8b 4c 24 70	 mov	 rcx, QWORD PTR v$[rsp]
  00098	48 8b 44 24 38	 mov	 rax, QWORD PTR tp$[rsp]
  0009d	ff 90 f0 00 00
	00		 call	 QWORD PTR [rax+240]
  000a3	89 44 24 30	 mov	 DWORD PTR err$[rsp], eax

; 1028 :         Py_DECREF(name);

  000a7	48 8b 4c 24 78	 mov	 rcx, QWORD PTR name$[rsp]
  000ac	e8 00 00 00 00	 call	 _Py_DecRef

; 1029 :         return err;

  000b1	8b 44 24 30	 mov	 eax, DWORD PTR err$[rsp]
  000b5	e9 5b 01 00 00	 jmp	 $LN7@PyObject_S@4
$LN5@PyObject_S@4:

; 1030 :     }
; 1031 :     if (tp->tp_setattr != NULL) {

  000ba	48 8b 44 24 38	 mov	 rax, QWORD PTR tp$[rsp]
  000bf	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  000c7	74 55		 je	 SHORT $LN4@PyObject_S@4

; 1032 :         char *name_str = _PyUnicode_AsString(name);

  000c9	48 8b 4c 24 78	 mov	 rcx, QWORD PTR name$[rsp]
  000ce	e8 00 00 00 00	 call	 PyUnicode_AsUTF8
  000d3	48 89 44 24 40	 mov	 QWORD PTR name_str$121052[rsp], rax

; 1033 :         if (name_str == NULL)

  000d8	48 83 7c 24 40
	00		 cmp	 QWORD PTR name_str$121052[rsp], 0
  000de	75 0a		 jne	 SHORT $LN3@PyObject_S@4

; 1034 :             return -1;

  000e0	b8 ff ff ff ff	 mov	 eax, -1
  000e5	e9 2b 01 00 00	 jmp	 $LN7@PyObject_S@4
$LN3@PyObject_S@4:

; 1035 :         err = (*tp->tp_setattr)(v, name_str, value);

  000ea	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR value$[rsp]
  000f2	48 8b 54 24 40	 mov	 rdx, QWORD PTR name_str$121052[rsp]
  000f7	48 8b 4c 24 70	 mov	 rcx, QWORD PTR v$[rsp]
  000fc	48 8b 44 24 38	 mov	 rax, QWORD PTR tp$[rsp]
  00101	ff 90 a0 00 00
	00		 call	 QWORD PTR [rax+160]
  00107	89 44 24 30	 mov	 DWORD PTR err$[rsp], eax

; 1036 :         Py_DECREF(name);

  0010b	48 8b 4c 24 78	 mov	 rcx, QWORD PTR name$[rsp]
  00110	e8 00 00 00 00	 call	 _Py_DecRef

; 1037 :         return err;

  00115	8b 44 24 30	 mov	 eax, DWORD PTR err$[rsp]
  00119	e9 f7 00 00 00	 jmp	 $LN7@PyObject_S@4
$LN4@PyObject_S@4:

; 1038 :     }
; 1039 :     Py_DECREF(name);

  0011e	48 8b 4c 24 78	 mov	 rcx, QWORD PTR name$[rsp]
  00123	e8 00 00 00 00	 call	 _Py_DecRef

; 1040 :     assert(name->ob_refcnt >= 1);

  00128	48 8b 44 24 78	 mov	 rax, QWORD PTR name$[rsp]
  0012d	48 83 78 50 01	 cmp	 QWORD PTR [rax+80], 1
  00132	7d 1c		 jge	 SHORT $LN9@PyObject_S@4
  00134	41 b8 10 04 00
	00		 mov	 r8d, 1040		; 00000410H
  0013a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CI@ONKHJAFP@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00141	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@FJENALJB@?$AAn?$AAa?$AAm?$AAe?$AA?9?$AA?$DO?$AAo?$AAb?$AA_?$AAr?$AAe?$AAf?$AAc?$AAn?$AAt?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA1?$AA?$AA@
  00148	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0014e	33 c0		 xor	 eax, eax
$LN9@PyObject_S@4:

; 1041 :     if (tp->tp_getattr == NULL && tp->tp_getattro == NULL)

  00150	48 8b 44 24 38	 mov	 rax, QWORD PTR tp$[rsp]
  00155	48 83 b8 98 00
	00 00 00	 cmp	 QWORD PTR [rax+152], 0
  0015d	75 61		 jne	 SHORT $LN2@PyObject_S@4
  0015f	48 8b 44 24 38	 mov	 rax, QWORD PTR tp$[rsp]
  00164	48 83 b8 e8 00
	00 00 00	 cmp	 QWORD PTR [rax+232], 0
  0016c	75 52		 jne	 SHORT $LN2@PyObject_S@4

; 1042 :         PyErr_Format(PyExc_TypeError,
; 1043 :                      "'%.100s' object has no attributes "
; 1044 :                      "(%s .%U)",
; 1045 :                      tp->tp_name,
; 1046 :                      value==NULL ? "del" : "assign to",
; 1047 :                      name);

  0016e	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR value$[rsp], 0
  00177	75 0e		 jne	 SHORT $LN10@PyObject_S@4
  00179	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_03ONKLGNNH@del?$AA@
  00180	48 89 44 24 48	 mov	 QWORD PTR tv141[rsp], rax
  00185	eb 0c		 jmp	 SHORT $LN11@PyObject_S@4
$LN10@PyObject_S@4:
  00187	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_09PFNDHGIG@assign?5to?$AA@
  0018e	48 89 44 24 48	 mov	 QWORD PTR tv141[rsp], rax
$LN11@PyObject_S@4:
  00193	48 8b 44 24 78	 mov	 rax, QWORD PTR name$[rsp]
  00198	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0019d	4c 8b 4c 24 48	 mov	 r9, QWORD PTR tv141[rsp]
  001a2	48 8b 44 24 38	 mov	 rax, QWORD PTR tp$[rsp]
  001a7	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  001ab	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CL@MPONDJNH@?8?$CF?4100s?8?5object?5has?5no?5attribute@
  001b2	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  001b9	e8 00 00 00 00	 call	 PyErr_Format

; 1048 :     else

  001be	eb 50		 jmp	 SHORT $LN1@PyObject_S@4
$LN2@PyObject_S@4:

; 1049 :         PyErr_Format(PyExc_TypeError,
; 1050 :                      "'%.100s' object has only read-only attributes "
; 1051 :                      "(%s .%U)",
; 1052 :                      tp->tp_name,
; 1053 :                      value==NULL ? "del" : "assign to",
; 1054 :                      name);

  001c0	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR value$[rsp], 0
  001c9	75 0e		 jne	 SHORT $LN12@PyObject_S@4
  001cb	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_03ONKLGNNH@del?$AA@
  001d2	48 89 44 24 50	 mov	 QWORD PTR tv149[rsp], rax
  001d7	eb 0c		 jmp	 SHORT $LN13@PyObject_S@4
$LN12@PyObject_S@4:
  001d9	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_09PFNDHGIG@assign?5to?$AA@
  001e0	48 89 44 24 50	 mov	 QWORD PTR tv149[rsp], rax
$LN13@PyObject_S@4:
  001e5	48 8b 44 24 78	 mov	 rax, QWORD PTR name$[rsp]
  001ea	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001ef	4c 8b 4c 24 50	 mov	 r9, QWORD PTR tv149[rsp]
  001f4	48 8b 44 24 38	 mov	 rax, QWORD PTR tp$[rsp]
  001f9	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  001fd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DH@IBBLNBJD@?8?$CF?4100s?8?5object?5has?5only?5read?9on@
  00204	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0020b	e8 00 00 00 00	 call	 PyErr_Format
$LN1@PyObject_S@4:

; 1055 :     return -1;

  00210	b8 ff ff ff ff	 mov	 eax, -1
$LN7@PyObject_S@4:

; 1056 : }

  00215	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00219	c3		 ret	 0
PyObject_SetAttr ENDP
_TEXT	ENDS
PUBLIC	??_C@_1EA@GHHOBPMB@?$AAd?$AAi?$AAc?$AAt?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AA?$CF?$AA?5?$AAS?$AAI?$AAZ?$AAE?$AAO?$AAF?$AA_?$AAV?$AAO?$AAI?$AAD?$AA_?$AAP?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BO@PKFOLOIA@?$AAd?$AAi?$AAc?$AAt?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	_PyObject_GetDictPtr
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyObject_GetDictPtr DD imagerel $LN8
	DD	imagerel $LN8+278
	DD	imagerel $unwind$_PyObject_GetDictPtr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyObject_GetDictPtr DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_1EA@GHHOBPMB@?$AAd?$AAi?$AAc?$AAt?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AA?$CF?$AA?5?$AAS?$AAI?$AAZ?$AAE?$AAO?$AAF?$AA_?$AAV?$AAO?$AAI?$AAD?$AA_?$AAP?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1EA@GHHOBPMB@?$AAd?$AAi?$AAc?$AAt?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AA?$CF?$AA?5?$AAS?$AAI?$AAZ?$AAE?$AAO?$AAF?$AA_?$AAV?$AAO?$AAI?$AAD?$AA_?$AAP?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@ DB 'd'
	DB	00H, 'i', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'f', 00H, 'f', 00H
	DB	's', 00H, 'e', 00H, 't', 00H, ' ', 00H, '%', 00H, ' ', 00H, 'S'
	DB	00H, 'I', 00H, 'Z', 00H, 'E', 00H, 'O', 00H, 'F', 00H, '_', 00H
	DB	'V', 00H, 'O', 00H, 'I', 00H, 'D', 00H, '_', 00H, 'P', 00H, ' '
	DB	00H, '=', 00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BO@PKFOLOIA@?$AAd?$AAi?$AAc?$AAt?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1BO@PKFOLOIA@?$AAd?$AAi?$AAc?$AAt?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@ DB 'd'
	DB	00H, 'i', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'f', 00H, 'f', 00H
	DB	's', 00H, 'e', 00H, 't', 00H, ' ', 00H, '>', 00H, ' ', 00H, '0'
	DB	00H, 00H, 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PyObject_GetDictPtr
_TEXT	SEGMENT
dictoffset$ = 32
tp$ = 40
size$121079 = 48
tsize$121078 = 56
obj$ = 80
_PyObject_GetDictPtr PROC				; COMDAT

; 1062 : {

$LN8:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1063 :     Py_ssize_t dictoffset;
; 1064 :     PyTypeObject *tp = Py_TYPE(obj);

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR obj$[rsp]
  0000e	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00012	48 89 44 24 28	 mov	 QWORD PTR tp$[rsp], rax

; 1065 : 
; 1066 :     dictoffset = tp->tp_dictoffset;

  00017	48 8b 44 24 28	 mov	 rax, QWORD PTR tp$[rsp]
  0001c	48 8b 80 78 01
	00 00		 mov	 rax, QWORD PTR [rax+376]
  00023	48 89 44 24 20	 mov	 QWORD PTR dictoffset$[rsp], rax

; 1067 :     if (dictoffset == 0)

  00028	48 83 7c 24 20
	00		 cmp	 QWORD PTR dictoffset$[rsp], 0
  0002e	75 07		 jne	 SHORT $LN3@PyObject_G@4

; 1068 :         return NULL;

  00030	33 c0		 xor	 eax, eax
  00032	e9 da 00 00 00	 jmp	 $LN4@PyObject_G@4
$LN3@PyObject_G@4:

; 1069 :     if (dictoffset < 0) {

  00037	48 83 7c 24 20
	00		 cmp	 QWORD PTR dictoffset$[rsp], 0
  0003d	0f 8d be 00 00
	00		 jge	 $LN2@PyObject_G@4

; 1070 :         Py_ssize_t tsize;
; 1071 :         size_t size;
; 1072 : 
; 1073 :         tsize = ((PyVarObject *)obj)->ob_size;

  00043	48 8b 44 24 50	 mov	 rax, QWORD PTR obj$[rsp]
  00048	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0004c	48 89 44 24 38	 mov	 QWORD PTR tsize$121078[rsp], rax

; 1074 :         if (tsize < 0)

  00051	48 83 7c 24 38
	00		 cmp	 QWORD PTR tsize$121078[rsp], 0
  00057	7d 0d		 jge	 SHORT $LN1@PyObject_G@4

; 1075 :             tsize = -tsize;

  00059	48 8b 44 24 38	 mov	 rax, QWORD PTR tsize$121078[rsp]
  0005e	48 f7 d8	 neg	 rax
  00061	48 89 44 24 38	 mov	 QWORD PTR tsize$121078[rsp], rax
$LN1@PyObject_G@4:

; 1076 :         size = _PyObject_VAR_SIZE(tp, tsize);

  00066	48 8b 44 24 28	 mov	 rax, QWORD PTR tp$[rsp]
  0006b	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tsize$121078[rsp]
  00070	48 0f af 88 80
	00 00 00	 imul	 rcx, QWORD PTR [rax+128]
  00078	48 8b c1	 mov	 rax, rcx
  0007b	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tp$[rsp]
  00080	48 8b 49 78	 mov	 rcx, QWORD PTR [rcx+120]
  00084	48 8d 44 01 07	 lea	 rax, QWORD PTR [rcx+rax+7]
  00089	48 83 e0 f8	 and	 rax, -8
  0008d	48 89 44 24 30	 mov	 QWORD PTR size$121079[rsp], rax

; 1077 : 
; 1078 :         dictoffset += (long)size;

  00092	48 63 44 24 30	 movsxd	 rax, DWORD PTR size$121079[rsp]
  00097	48 8b 4c 24 20	 mov	 rcx, QWORD PTR dictoffset$[rsp]
  0009c	48 03 c8	 add	 rcx, rax
  0009f	48 8b c1	 mov	 rax, rcx
  000a2	48 89 44 24 20	 mov	 QWORD PTR dictoffset$[rsp], rax

; 1079 :         assert(dictoffset > 0);

  000a7	48 83 7c 24 20
	00		 cmp	 QWORD PTR dictoffset$[rsp], 0
  000ad	7f 1c		 jg	 SHORT $LN6@PyObject_G@4
  000af	41 b8 37 04 00
	00		 mov	 r8d, 1079		; 00000437H
  000b5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CI@ONKHJAFP@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  000bc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BO@PKFOLOIA@?$AAd?$AAi?$AAc?$AAt?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@
  000c3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000c9	33 c0		 xor	 eax, eax
$LN6@PyObject_G@4:

; 1080 :         assert(dictoffset % SIZEOF_VOID_P == 0);

  000cb	48 8b 44 24 20	 mov	 rax, QWORD PTR dictoffset$[rsp]
  000d0	48 99		 cdq
  000d2	48 83 e2 07	 and	 rdx, 7
  000d6	48 03 c2	 add	 rax, rdx
  000d9	48 83 e0 07	 and	 rax, 7
  000dd	48 2b c2	 sub	 rax, rdx
  000e0	48 85 c0	 test	 rax, rax
  000e3	74 1c		 je	 SHORT $LN7@PyObject_G@4
  000e5	41 b8 38 04 00
	00		 mov	 r8d, 1080		; 00000438H
  000eb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CI@ONKHJAFP@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  000f2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EA@GHHOBPMB@?$AAd?$AAi?$AAc?$AAt?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AA?$CF?$AA?5?$AAS?$AAI?$AAZ?$AAE?$AAO?$AAF?$AA_?$AAV?$AAO?$AAI?$AAD?$AA_?$AAP?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@
  000f9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000ff	33 c0		 xor	 eax, eax
$LN7@PyObject_G@4:
$LN2@PyObject_G@4:

; 1081 :     }
; 1082 :     return (PyObject **) ((char *)obj + dictoffset);

  00101	48 8b 44 24 20	 mov	 rax, QWORD PTR dictoffset$[rsp]
  00106	48 8b 4c 24 50	 mov	 rcx, QWORD PTR obj$[rsp]
  0010b	48 03 c8	 add	 rcx, rax
  0010e	48 8b c1	 mov	 rax, rcx
$LN4@PyObject_G@4:

; 1083 : }

  00111	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00115	c3		 ret	 0
_PyObject_GetDictPtr ENDP
_TEXT	ENDS
PUBLIC	PyObject_SelfIter
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyObject_SelfIter DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$PyObject_SelfIter
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyObject_SelfIter DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyObject_SelfIter
_TEXT	SEGMENT
obj$ = 48
PyObject_SelfIter PROC					; COMDAT

; 1087 : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1088 :     Py_INCREF(obj);

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR obj$[rsp]
  0000e	e8 00 00 00 00	 call	 _Py_IncRef

; 1089 :     return obj;

  00013	48 8b 44 24 30	 mov	 rax, QWORD PTR obj$[rsp]

; 1090 : }

  00018	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001c	c3		 ret	 0
PyObject_SelfIter ENDP
_TEXT	ENDS
PUBLIC	??_C@_08OCOMCJAJ@builtins?$AA@			; `string'
PUBLIC	_PyObject_GetBuiltin
EXTRN	PyImport_ImportModule:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyObject_GetBuiltin DD imagerel $LN4
	DD	imagerel $LN4+78
	DD	imagerel $unwind$_PyObject_GetBuiltin
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyObject_GetBuiltin DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_08OCOMCJAJ@builtins?$AA@
CONST	SEGMENT
??_C@_08OCOMCJAJ@builtins?$AA@ DB 'builtins', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PyObject_GetBuiltin
_TEXT	SEGMENT
attr$ = 32
mod$ = 40
name$ = 64
_PyObject_GetBuiltin PROC				; COMDAT

; 1095 : {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1096 :     PyObject *mod, *attr;
; 1097 :     mod = PyImport_ImportModule("builtins");

  00009	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08OCOMCJAJ@builtins?$AA@
  00010	e8 00 00 00 00	 call	 PyImport_ImportModule
  00015	48 89 44 24 28	 mov	 QWORD PTR mod$[rsp], rax

; 1098 :     if (mod == NULL)

  0001a	48 83 7c 24 28
	00		 cmp	 QWORD PTR mod$[rsp], 0
  00020	75 04		 jne	 SHORT $LN1@PyObject_G@5

; 1099 :         return NULL;

  00022	33 c0		 xor	 eax, eax
  00024	eb 23		 jmp	 SHORT $LN2@PyObject_G@5
$LN1@PyObject_G@5:

; 1100 :     attr = PyObject_GetAttrString(mod, name);

  00026	48 8b 54 24 40	 mov	 rdx, QWORD PTR name$[rsp]
  0002b	48 8b 4c 24 28	 mov	 rcx, QWORD PTR mod$[rsp]
  00030	e8 00 00 00 00	 call	 PyObject_GetAttrString
  00035	48 89 44 24 20	 mov	 QWORD PTR attr$[rsp], rax

; 1101 :     Py_DECREF(mod);

  0003a	48 8b 4c 24 28	 mov	 rcx, QWORD PTR mod$[rsp]
  0003f	e8 00 00 00 00	 call	 _Py_DecRef

; 1102 :     return attr;

  00044	48 8b 44 24 20	 mov	 rax, QWORD PTR attr$[rsp]
$LN2@PyObject_G@5:

; 1103 : }

  00049	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004d	c3		 ret	 0
_PyObject_GetBuiltin ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CA@OJDKODEI@?8?$CF?4200s?8?5object?5is?5not?5iterable?$AA@ ; `string'
PUBLIC	_PyObject_NextNotImplemented
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyObject_NextNotImplemented DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$_PyObject_NextNotImplemented
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyObject_NextNotImplemented DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT ??_C@_0CA@OJDKODEI@?8?$CF?4200s?8?5object?5is?5not?5iterable?$AA@
CONST	SEGMENT
??_C@_0CA@OJDKODEI@?8?$CF?4200s?8?5object?5is?5not?5iterable?$AA@ DB '''%'
	DB	'.200s'' object is not iterable', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PyObject_NextNotImplemented
_TEXT	SEGMENT
self$ = 48
_PyObject_NextNotImplemented PROC			; COMDAT

; 1112 : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1113 :     PyErr_Format(PyExc_TypeError,
; 1114 :                  "'%.200s' object is not iterable",
; 1115 :                  Py_TYPE(self)->tp_name);

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  0000e	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00012	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  00016	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CA@OJDKODEI@?8?$CF?4200s?8?5object?5is?5not?5iterable?$AA@
  0001d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00024	e8 00 00 00 00	 call	 PyErr_Format

; 1116 :     return NULL;

  00029	33 c0		 xor	 eax, eax

; 1117 : }

  0002b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002f	c3		 ret	 0
_PyObject_NextNotImplemented ENDP
_TEXT	ENDS
PUBLIC	_PyObject_GenericGetAttrWithDict
EXTRN	PyDict_GetItem:PROC
EXTRN	_PyType_Lookup:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyObject_GenericGetAttrWithDict DD imagerel $LN27
	DD	imagerel $LN27+822
	DD	imagerel $unwind$_PyObject_GenericGetAttrWithDict
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyObject_GenericGetAttrWithDict DD 011301H
	DD	0c213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _PyObject_GenericGetAttrWithDict
_TEXT	SEGMENT
res$ = 32
descr$ = 40
f$ = 48
dictoffset$ = 56
dictptr$ = 64
tp$ = 72
size$121155 = 80
tsize$121154 = 88
obj$ = 112
name$ = 120
dict$ = 128
_PyObject_GenericGetAttrWithDict PROC			; COMDAT

; 1123 : {

$LN27:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 1124 :     PyTypeObject *tp = Py_TYPE(obj);

  00013	48 8b 44 24 70	 mov	 rax, QWORD PTR obj$[rsp]
  00018	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0001c	48 89 44 24 48	 mov	 QWORD PTR tp$[rsp], rax

; 1125 :     PyObject *descr = NULL;

  00021	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR descr$[rsp], 0

; 1126 :     PyObject *res = NULL;

  0002a	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR res$[rsp], 0

; 1127 :     descrgetfunc f;
; 1128 :     Py_ssize_t dictoffset;
; 1129 :     PyObject **dictptr;
; 1130 : 
; 1131 :     if (!PyUnicode_Check(name)){

  00033	48 8b 44 24 78	 mov	 rax, QWORD PTR name$[rsp]
  00038	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0003c	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00042	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00047	85 c0		 test	 eax, eax
  00049	75 29		 jne	 SHORT $LN22@PyObject_G@6

; 1132 :         PyErr_Format(PyExc_TypeError,
; 1133 :                      "attribute name must be string, not '%.200s'",
; 1134 :                      name->ob_type->tp_name);

  0004b	48 8b 44 24 78	 mov	 rax, QWORD PTR name$[rsp]
  00050	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00054	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  00058	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CM@IFFJPMHG@attribute?5name?5must?5be?5string?0?5n@
  0005f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00066	e8 00 00 00 00	 call	 PyErr_Format

; 1135 :         return NULL;

  0006b	33 c0		 xor	 eax, eax
  0006d	e9 bf 02 00 00	 jmp	 $LN23@PyObject_G@6

; 1136 :     }
; 1137 :     else

  00072	eb 0a		 jmp	 SHORT $LN21@PyObject_G@6
$LN22@PyObject_G@6:

; 1138 :         Py_INCREF(name);

  00074	48 8b 4c 24 78	 mov	 rcx, QWORD PTR name$[rsp]
  00079	e8 00 00 00 00	 call	 _Py_IncRef
$LN21@PyObject_G@6:

; 1139 : 
; 1140 :     if (tp->tp_dict == NULL) {

  0007e	48 8b 44 24 48	 mov	 rax, QWORD PTR tp$[rsp]
  00083	48 83 b8 60 01
	00 00 00	 cmp	 QWORD PTR [rax+352], 0
  0008b	75 13		 jne	 SHORT $LN20@PyObject_G@6

; 1141 :         if (PyType_Ready(tp) < 0)

  0008d	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tp$[rsp]
  00092	e8 00 00 00 00	 call	 PyType_Ready
  00097	85 c0		 test	 eax, eax
  00099	7d 05		 jge	 SHORT $LN19@PyObject_G@6

; 1142 :             goto done;

  0009b	e9 6a 02 00 00	 jmp	 $done$121136
$LN19@PyObject_G@6:
$LN20@PyObject_G@6:

; 1143 :     }
; 1144 : 
; 1145 :     descr = _PyType_Lookup(tp, name);

  000a0	48 8b 54 24 78	 mov	 rdx, QWORD PTR name$[rsp]
  000a5	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tp$[rsp]
  000aa	e8 00 00 00 00	 call	 _PyType_Lookup
  000af	48 89 44 24 28	 mov	 QWORD PTR descr$[rsp], rax
$LN18@PyObject_G@6:

; 1146 :     Py_XINCREF(descr);

  000b4	48 83 7c 24 28
	00		 cmp	 QWORD PTR descr$[rsp], 0
  000ba	74 0a		 je	 SHORT $LN15@PyObject_G@6
  000bc	48 8b 4c 24 28	 mov	 rcx, QWORD PTR descr$[rsp]
  000c1	e8 00 00 00 00	 call	 _Py_IncRef
$LN15@PyObject_G@6:
  000c6	33 c0		 xor	 eax, eax
  000c8	85 c0		 test	 eax, eax
  000ca	75 e8		 jne	 SHORT $LN18@PyObject_G@6

; 1147 : 
; 1148 :     f = NULL;

  000cc	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR f$[rsp], 0

; 1149 :     if (descr != NULL) {

  000d5	48 83 7c 24 28
	00		 cmp	 QWORD PTR descr$[rsp], 0
  000db	74 51		 je	 SHORT $LN14@PyObject_G@6

; 1150 :         f = descr->ob_type->tp_descr_get;

  000dd	48 8b 44 24 28	 mov	 rax, QWORD PTR descr$[rsp]
  000e2	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000e6	48 8b 80 68 01
	00 00		 mov	 rax, QWORD PTR [rax+360]
  000ed	48 89 44 24 30	 mov	 QWORD PTR f$[rsp], rax

; 1151 :         if (f != NULL && PyDescr_IsData(descr)) {

  000f2	48 83 7c 24 30
	00		 cmp	 QWORD PTR f$[rsp], 0
  000f8	74 34		 je	 SHORT $LN13@PyObject_G@6
  000fa	48 8b 44 24 28	 mov	 rax, QWORD PTR descr$[rsp]
  000ff	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00103	48 83 b8 70 01
	00 00 00	 cmp	 QWORD PTR [rax+368], 0
  0010b	74 21		 je	 SHORT $LN13@PyObject_G@6

; 1152 :             res = f(descr, obj, (PyObject *)obj->ob_type);

  0010d	48 8b 44 24 70	 mov	 rax, QWORD PTR obj$[rsp]
  00112	4c 8b 40 58	 mov	 r8, QWORD PTR [rax+88]
  00116	48 8b 54 24 70	 mov	 rdx, QWORD PTR obj$[rsp]
  0011b	48 8b 4c 24 28	 mov	 rcx, QWORD PTR descr$[rsp]
  00120	ff 54 24 30	 call	 QWORD PTR f$[rsp]
  00124	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax

; 1153 :             goto done;

  00129	e9 dc 01 00 00	 jmp	 $done$121136
$LN13@PyObject_G@6:
$LN14@PyObject_G@6:

; 1154 :         }
; 1155 :     }
; 1156 : 
; 1157 :     if (dict == NULL) {

  0012e	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR dict$[rsp], 0
  00137	0f 85 0c 01 00
	00		 jne	 $LN12@PyObject_G@6

; 1158 :         /* Inline _PyObject_GetDictPtr */
; 1159 :         dictoffset = tp->tp_dictoffset;

  0013d	48 8b 44 24 48	 mov	 rax, QWORD PTR tp$[rsp]
  00142	48 8b 80 78 01
	00 00		 mov	 rax, QWORD PTR [rax+376]
  00149	48 89 44 24 38	 mov	 QWORD PTR dictoffset$[rsp], rax

; 1160 :         if (dictoffset != 0) {

  0014e	48 83 7c 24 38
	00		 cmp	 QWORD PTR dictoffset$[rsp], 0
  00154	0f 84 ef 00 00
	00		 je	 $LN11@PyObject_G@6

; 1161 :             if (dictoffset < 0) {

  0015a	48 83 7c 24 38
	00		 cmp	 QWORD PTR dictoffset$[rsp], 0
  00160	0f 8d be 00 00
	00		 jge	 $LN10@PyObject_G@6

; 1162 :                 Py_ssize_t tsize;
; 1163 :                 size_t size;
; 1164 : 
; 1165 :                 tsize = ((PyVarObject *)obj)->ob_size;

  00166	48 8b 44 24 70	 mov	 rax, QWORD PTR obj$[rsp]
  0016b	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0016f	48 89 44 24 58	 mov	 QWORD PTR tsize$121154[rsp], rax

; 1166 :                 if (tsize < 0)

  00174	48 83 7c 24 58
	00		 cmp	 QWORD PTR tsize$121154[rsp], 0
  0017a	7d 0d		 jge	 SHORT $LN9@PyObject_G@6

; 1167 :                     tsize = -tsize;

  0017c	48 8b 44 24 58	 mov	 rax, QWORD PTR tsize$121154[rsp]
  00181	48 f7 d8	 neg	 rax
  00184	48 89 44 24 58	 mov	 QWORD PTR tsize$121154[rsp], rax
$LN9@PyObject_G@6:

; 1168 :                 size = _PyObject_VAR_SIZE(tp, tsize);

  00189	48 8b 44 24 48	 mov	 rax, QWORD PTR tp$[rsp]
  0018e	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tsize$121154[rsp]
  00193	48 0f af 88 80
	00 00 00	 imul	 rcx, QWORD PTR [rax+128]
  0019b	48 8b c1	 mov	 rax, rcx
  0019e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tp$[rsp]
  001a3	48 8b 49 78	 mov	 rcx, QWORD PTR [rcx+120]
  001a7	48 8d 44 01 07	 lea	 rax, QWORD PTR [rcx+rax+7]
  001ac	48 83 e0 f8	 and	 rax, -8
  001b0	48 89 44 24 50	 mov	 QWORD PTR size$121155[rsp], rax

; 1169 : 
; 1170 :                 dictoffset += (long)size;

  001b5	48 63 44 24 50	 movsxd	 rax, DWORD PTR size$121155[rsp]
  001ba	48 8b 4c 24 38	 mov	 rcx, QWORD PTR dictoffset$[rsp]
  001bf	48 03 c8	 add	 rcx, rax
  001c2	48 8b c1	 mov	 rax, rcx
  001c5	48 89 44 24 38	 mov	 QWORD PTR dictoffset$[rsp], rax

; 1171 :                 assert(dictoffset > 0);

  001ca	48 83 7c 24 38
	00		 cmp	 QWORD PTR dictoffset$[rsp], 0
  001d0	7f 1c		 jg	 SHORT $LN25@PyObject_G@6
  001d2	41 b8 93 04 00
	00		 mov	 r8d, 1171		; 00000493H
  001d8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CI@ONKHJAFP@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  001df	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BO@PKFOLOIA@?$AAd?$AAi?$AAc?$AAt?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@
  001e6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001ec	33 c0		 xor	 eax, eax
$LN25@PyObject_G@6:

; 1172 :                 assert(dictoffset % SIZEOF_VOID_P == 0);

  001ee	48 8b 44 24 38	 mov	 rax, QWORD PTR dictoffset$[rsp]
  001f3	48 99		 cdq
  001f5	48 83 e2 07	 and	 rdx, 7
  001f9	48 03 c2	 add	 rax, rdx
  001fc	48 83 e0 07	 and	 rax, 7
  00200	48 2b c2	 sub	 rax, rdx
  00203	48 85 c0	 test	 rax, rax
  00206	74 1c		 je	 SHORT $LN26@PyObject_G@6
  00208	41 b8 94 04 00
	00		 mov	 r8d, 1172		; 00000494H
  0020e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CI@ONKHJAFP@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00215	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EA@GHHOBPMB@?$AAd?$AAi?$AAc?$AAt?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AA?$CF?$AA?5?$AAS?$AAI?$AAZ?$AAE?$AAO?$AAF?$AA_?$AAV?$AAO?$AAI?$AAD?$AA_?$AAP?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@
  0021c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00222	33 c0		 xor	 eax, eax
$LN26@PyObject_G@6:
$LN10@PyObject_G@6:

; 1173 :             }
; 1174 :             dictptr = (PyObject **) ((char *)obj + dictoffset);

  00224	48 8b 44 24 38	 mov	 rax, QWORD PTR dictoffset$[rsp]
  00229	48 8b 4c 24 70	 mov	 rcx, QWORD PTR obj$[rsp]
  0022e	48 03 c8	 add	 rcx, rax
  00231	48 8b c1	 mov	 rax, rcx
  00234	48 89 44 24 40	 mov	 QWORD PTR dictptr$[rsp], rax

; 1175 :             dict = *dictptr;

  00239	48 8b 44 24 40	 mov	 rax, QWORD PTR dictptr$[rsp]
  0023e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00241	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR dict$[rsp], rax
$LN11@PyObject_G@6:
$LN12@PyObject_G@6:

; 1176 :         }
; 1177 :     }
; 1178 :     if (dict != NULL) {

  00249	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR dict$[rsp], 0
  00252	74 52		 je	 SHORT $LN8@PyObject_G@6

; 1179 :         Py_INCREF(dict);

  00254	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR dict$[rsp]
  0025c	e8 00 00 00 00	 call	 _Py_IncRef

; 1180 :         res = PyDict_GetItem(dict, name);

  00261	48 8b 54 24 78	 mov	 rdx, QWORD PTR name$[rsp]
  00266	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR dict$[rsp]
  0026e	e8 00 00 00 00	 call	 PyDict_GetItem
  00273	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax

; 1181 :         if (res != NULL) {

  00278	48 83 7c 24 20
	00		 cmp	 QWORD PTR res$[rsp], 0
  0027e	74 19		 je	 SHORT $LN7@PyObject_G@6

; 1182 :             Py_INCREF(res);

  00280	48 8b 4c 24 20	 mov	 rcx, QWORD PTR res$[rsp]
  00285	e8 00 00 00 00	 call	 _Py_IncRef

; 1183 :             Py_DECREF(dict);

  0028a	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR dict$[rsp]
  00292	e8 00 00 00 00	 call	 _Py_DecRef

; 1184 :             goto done;

  00297	eb 71		 jmp	 SHORT $done$121136
$LN7@PyObject_G@6:

; 1185 :         }
; 1186 :         Py_DECREF(dict);

  00299	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR dict$[rsp]
  002a1	e8 00 00 00 00	 call	 _Py_DecRef
$LN8@PyObject_G@6:

; 1187 :     }
; 1188 : 
; 1189 :     if (f != NULL) {

  002a6	48 83 7c 24 30
	00		 cmp	 QWORD PTR f$[rsp], 0
  002ac	74 1e		 je	 SHORT $LN6@PyObject_G@6

; 1190 :         res = f(descr, obj, (PyObject *)Py_TYPE(obj));

  002ae	48 8b 44 24 70	 mov	 rax, QWORD PTR obj$[rsp]
  002b3	4c 8b 40 58	 mov	 r8, QWORD PTR [rax+88]
  002b7	48 8b 54 24 70	 mov	 rdx, QWORD PTR obj$[rsp]
  002bc	48 8b 4c 24 28	 mov	 rcx, QWORD PTR descr$[rsp]
  002c1	ff 54 24 30	 call	 QWORD PTR f$[rsp]
  002c5	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax

; 1191 :         goto done;

  002ca	eb 3e		 jmp	 SHORT $done$121136
$LN6@PyObject_G@6:

; 1192 :     }
; 1193 : 
; 1194 :     if (descr != NULL) {

  002cc	48 83 7c 24 28
	00		 cmp	 QWORD PTR descr$[rsp], 0
  002d2	74 15		 je	 SHORT $LN5@PyObject_G@6

; 1195 :         res = descr;

  002d4	48 8b 44 24 28	 mov	 rax, QWORD PTR descr$[rsp]
  002d9	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax

; 1196 :         descr = NULL;

  002de	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR descr$[rsp], 0

; 1197 :         goto done;

  002e7	eb 21		 jmp	 SHORT $done$121136
$LN5@PyObject_G@6:

; 1198 :     }
; 1199 : 
; 1200 :     PyErr_Format(PyExc_AttributeError,
; 1201 :                  "'%.50s' object has no attribute '%U'",
; 1202 :                  tp->tp_name, name);

  002e9	4c 8b 4c 24 78	 mov	 r9, QWORD PTR name$[rsp]
  002ee	48 8b 44 24 48	 mov	 rax, QWORD PTR tp$[rsp]
  002f3	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  002f7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CF@KKJGINOJ@?8?$CF?450s?8?5object?5has?5no?5attribute?5@
  002fe	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_AttributeError
  00305	e8 00 00 00 00	 call	 PyErr_Format
$done$121136:
$LN4@PyObject_G@6:

; 1203 :   done:
; 1204 :     Py_XDECREF(descr);

  0030a	48 83 7c 24 28
	00		 cmp	 QWORD PTR descr$[rsp], 0
  00310	74 0a		 je	 SHORT $LN1@PyObject_G@6
  00312	48 8b 4c 24 28	 mov	 rcx, QWORD PTR descr$[rsp]
  00317	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@PyObject_G@6:
  0031c	33 c0		 xor	 eax, eax
  0031e	85 c0		 test	 eax, eax
  00320	75 e8		 jne	 SHORT $LN4@PyObject_G@6

; 1205 :     Py_DECREF(name);

  00322	48 8b 4c 24 78	 mov	 rcx, QWORD PTR name$[rsp]
  00327	e8 00 00 00 00	 call	 _Py_DecRef

; 1206 :     return res;

  0032c	48 8b 44 24 20	 mov	 rax, QWORD PTR res$[rsp]
$LN23@PyObject_G@6:

; 1207 : }

  00331	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00335	c3		 ret	 0
_PyObject_GenericGetAttrWithDict ENDP
_TEXT	ENDS
PUBLIC	PyObject_GenericGetAttr
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyObject_GenericGetAttr DD imagerel $LN3
	DD	imagerel $LN3+37
	DD	imagerel $unwind$PyObject_GenericGetAttr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyObject_GenericGetAttr DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyObject_GenericGetAttr
_TEXT	SEGMENT
obj$ = 48
name$ = 56
PyObject_GenericGetAttr PROC				; COMDAT

; 1211 : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1212 :     return _PyObject_GenericGetAttrWithDict(obj, name, NULL);

  0000e	45 33 c0	 xor	 r8d, r8d
  00011	48 8b 54 24 38	 mov	 rdx, QWORD PTR name$[rsp]
  00016	48 8b 4c 24 30	 mov	 rcx, QWORD PTR obj$[rsp]
  0001b	e8 00 00 00 00	 call	 _PyObject_GenericGetAttrWithDict

; 1213 : }

  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	c3		 ret	 0
PyObject_GenericGetAttr ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CL@MBODLJBI@?8?$CF?450s?8?5object?5attribute?5?8?$CFU?8?5is@ ; `string'
PUBLIC	??_C@_0CG@EOFOALDN@?8?$CF?4100s?8?5object?5has?5no?5attribute@ ; `string'
PUBLIC	_PyObject_GenericSetAttrWithDict
EXTRN	PyDict_SetItem:PROC
EXTRN	PyDict_DelItem:PROC
EXTRN	PyErr_SetObject:PROC
EXTRN	PyExc_KeyError:QWORD
EXTRN	_PyObjectDict_SetItem:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyObject_GenericSetAttrWithDict DD imagerel $LN24
	DD	imagerel $LN24+682
	DD	imagerel $unwind$_PyObject_GenericSetAttrWithDict
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyObject_GenericSetAttrWithDict DD 011801H
	DD	0a218H
xdata	ENDS
;	COMDAT ??_C@_0CL@MBODLJBI@?8?$CF?450s?8?5object?5attribute?5?8?$CFU?8?5is@
CONST	SEGMENT
??_C@_0CL@MBODLJBI@?8?$CF?450s?8?5object?5attribute?5?8?$CFU?8?5is@ DB ''''
	DB	'%.50s'' object attribute ''%U'' is read-only', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@EOFOALDN@?8?$CF?4100s?8?5object?5has?5no?5attribute@
CONST	SEGMENT
??_C@_0CG@EOFOALDN@?8?$CF?4100s?8?5object?5has?5no?5attribute@ DB '''%.10'
	DB	'0s'' object has no attribute ''%U''', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PyObject_GenericSetAttrWithDict
_TEXT	SEGMENT
res$ = 32
descr$ = 40
f$ = 48
dictptr$ = 56
tp$ = 64
obj$ = 96
name$ = 104
value$ = 112
dict$ = 120
_PyObject_GenericSetAttrWithDict PROC			; COMDAT

; 1218 : {

$LN24:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 1219 :     PyTypeObject *tp = Py_TYPE(obj);

  00018	48 8b 44 24 60	 mov	 rax, QWORD PTR obj$[rsp]
  0001d	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00021	48 89 44 24 40	 mov	 QWORD PTR tp$[rsp], rax

; 1220 :     PyObject *descr;
; 1221 :     descrsetfunc f;
; 1222 :     PyObject **dictptr;
; 1223 :     int res = -1;

  00026	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR res$[rsp], -1

; 1224 : 
; 1225 :     if (!PyUnicode_Check(name)){

  0002e	48 8b 44 24 68	 mov	 rax, QWORD PTR name$[rsp]
  00033	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00037	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0003d	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00042	85 c0		 test	 eax, eax
  00044	75 2a		 jne	 SHORT $LN21@PyObject_G@7

; 1226 :         PyErr_Format(PyExc_TypeError,
; 1227 :                      "attribute name must be string, not '%.200s'",
; 1228 :                      name->ob_type->tp_name);

  00046	48 8b 44 24 68	 mov	 rax, QWORD PTR name$[rsp]
  0004b	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0004f	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  00053	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CM@IFFJPMHG@attribute?5name?5must?5be?5string?0?5n@
  0005a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00061	e8 00 00 00 00	 call	 PyErr_Format

; 1229 :         return -1;

  00066	b8 ff ff ff ff	 mov	 eax, -1
  0006b	e9 35 02 00 00	 jmp	 $LN22@PyObject_G@7
$LN21@PyObject_G@7:

; 1230 :     }
; 1231 : 
; 1232 :     if (tp->tp_dict == NULL && PyType_Ready(tp) < 0)

  00070	48 8b 44 24 40	 mov	 rax, QWORD PTR tp$[rsp]
  00075	48 83 b8 60 01
	00 00 00	 cmp	 QWORD PTR [rax+352], 0
  0007d	75 18		 jne	 SHORT $LN20@PyObject_G@7
  0007f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tp$[rsp]
  00084	e8 00 00 00 00	 call	 PyType_Ready
  00089	85 c0		 test	 eax, eax
  0008b	7d 0a		 jge	 SHORT $LN20@PyObject_G@7

; 1233 :         return -1;

  0008d	b8 ff ff ff ff	 mov	 eax, -1
  00092	e9 0e 02 00 00	 jmp	 $LN22@PyObject_G@7
$LN20@PyObject_G@7:

; 1234 : 
; 1235 :     Py_INCREF(name);

  00097	48 8b 4c 24 68	 mov	 rcx, QWORD PTR name$[rsp]
  0009c	e8 00 00 00 00	 call	 _Py_IncRef

; 1236 : 
; 1237 :     descr = _PyType_Lookup(tp, name);

  000a1	48 8b 54 24 68	 mov	 rdx, QWORD PTR name$[rsp]
  000a6	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tp$[rsp]
  000ab	e8 00 00 00 00	 call	 _PyType_Lookup
  000b0	48 89 44 24 28	 mov	 QWORD PTR descr$[rsp], rax
$LN19@PyObject_G@7:

; 1238 :     Py_XINCREF(descr);

  000b5	48 83 7c 24 28
	00		 cmp	 QWORD PTR descr$[rsp], 0
  000bb	74 0a		 je	 SHORT $LN16@PyObject_G@7
  000bd	48 8b 4c 24 28	 mov	 rcx, QWORD PTR descr$[rsp]
  000c2	e8 00 00 00 00	 call	 _Py_IncRef
$LN16@PyObject_G@7:
  000c7	33 c0		 xor	 eax, eax
  000c9	85 c0		 test	 eax, eax
  000cb	75 e8		 jne	 SHORT $LN19@PyObject_G@7

; 1239 : 
; 1240 :     f = NULL;

  000cd	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR f$[rsp], 0

; 1241 :     if (descr != NULL) {

  000d6	48 83 7c 24 28
	00		 cmp	 QWORD PTR descr$[rsp], 0
  000dc	74 4c		 je	 SHORT $LN15@PyObject_G@7

; 1242 :         f = descr->ob_type->tp_descr_set;

  000de	48 8b 44 24 28	 mov	 rax, QWORD PTR descr$[rsp]
  000e3	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000e7	48 8b 80 70 01
	00 00		 mov	 rax, QWORD PTR [rax+368]
  000ee	48 89 44 24 30	 mov	 QWORD PTR f$[rsp], rax

; 1243 :         if (f != NULL && PyDescr_IsData(descr)) {

  000f3	48 83 7c 24 30
	00		 cmp	 QWORD PTR f$[rsp], 0
  000f9	74 2f		 je	 SHORT $LN14@PyObject_G@7
  000fb	48 8b 44 24 28	 mov	 rax, QWORD PTR descr$[rsp]
  00100	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00104	48 83 b8 70 01
	00 00 00	 cmp	 QWORD PTR [rax+368], 0
  0010c	74 1c		 je	 SHORT $LN14@PyObject_G@7

; 1244 :             res = f(descr, obj, value);

  0010e	4c 8b 44 24 70	 mov	 r8, QWORD PTR value$[rsp]
  00113	48 8b 54 24 60	 mov	 rdx, QWORD PTR obj$[rsp]
  00118	48 8b 4c 24 28	 mov	 rcx, QWORD PTR descr$[rsp]
  0011d	ff 54 24 30	 call	 QWORD PTR f$[rsp]
  00121	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 1245 :             goto done;

  00125	e9 55 01 00 00	 jmp	 $done$121225
$LN14@PyObject_G@7:
$LN15@PyObject_G@7:

; 1246 :         }
; 1247 :     }
; 1248 : 
; 1249 :     if (dict == NULL) {

  0012a	48 83 7c 24 78
	00		 cmp	 QWORD PTR dict$[rsp], 0
  00130	75 65		 jne	 SHORT $LN13@PyObject_G@7

; 1250 :         dictptr = _PyObject_GetDictPtr(obj);

  00132	48 8b 4c 24 60	 mov	 rcx, QWORD PTR obj$[rsp]
  00137	e8 00 00 00 00	 call	 _PyObject_GetDictPtr
  0013c	48 89 44 24 38	 mov	 QWORD PTR dictptr$[rsp], rax

; 1251 :         if (dictptr != NULL) {

  00141	48 83 7c 24 38
	00		 cmp	 QWORD PTR dictptr$[rsp], 0
  00147	74 4e		 je	 SHORT $LN12@PyObject_G@7

; 1252 :             res = _PyObjectDict_SetItem(Py_TYPE(obj), dictptr, name, value);

  00149	4c 8b 4c 24 70	 mov	 r9, QWORD PTR value$[rsp]
  0014e	4c 8b 44 24 68	 mov	 r8, QWORD PTR name$[rsp]
  00153	48 8b 54 24 38	 mov	 rdx, QWORD PTR dictptr$[rsp]
  00158	48 8b 44 24 60	 mov	 rax, QWORD PTR obj$[rsp]
  0015d	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  00161	e8 00 00 00 00	 call	 _PyObjectDict_SetItem
  00166	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 1253 :             if (res < 0 && PyErr_ExceptionMatches(PyExc_KeyError))

  0016a	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  0016f	7d 21		 jge	 SHORT $LN11@PyObject_G@7
  00171	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_KeyError
  00178	e8 00 00 00 00	 call	 PyErr_ExceptionMatches
  0017d	85 c0		 test	 eax, eax
  0017f	74 11		 je	 SHORT $LN11@PyObject_G@7

; 1254 :                 PyErr_SetObject(PyExc_AttributeError, name);

  00181	48 8b 54 24 68	 mov	 rdx, QWORD PTR name$[rsp]
  00186	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_AttributeError
  0018d	e8 00 00 00 00	 call	 PyErr_SetObject
$LN11@PyObject_G@7:

; 1255 :             goto done;

  00192	e9 e8 00 00 00	 jmp	 $done$121225
$LN12@PyObject_G@7:
$LN13@PyObject_G@7:

; 1256 :         }
; 1257 :     }
; 1258 :     if (dict != NULL) {

  00197	48 83 7c 24 78
	00		 cmp	 QWORD PTR dict$[rsp], 0
  0019d	74 73		 je	 SHORT $LN10@PyObject_G@7

; 1259 :         Py_INCREF(dict);

  0019f	48 8b 4c 24 78	 mov	 rcx, QWORD PTR dict$[rsp]
  001a4	e8 00 00 00 00	 call	 _Py_IncRef

; 1260 :         if (value == NULL)

  001a9	48 83 7c 24 70
	00		 cmp	 QWORD PTR value$[rsp], 0
  001af	75 15		 jne	 SHORT $LN9@PyObject_G@7

; 1261 :             res = PyDict_DelItem(dict, name);

  001b1	48 8b 54 24 68	 mov	 rdx, QWORD PTR name$[rsp]
  001b6	48 8b 4c 24 78	 mov	 rcx, QWORD PTR dict$[rsp]
  001bb	e8 00 00 00 00	 call	 PyDict_DelItem
  001c0	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 1262 :         else

  001c4	eb 18		 jmp	 SHORT $LN8@PyObject_G@7
$LN9@PyObject_G@7:

; 1263 :             res = PyDict_SetItem(dict, name, value);

  001c6	4c 8b 44 24 70	 mov	 r8, QWORD PTR value$[rsp]
  001cb	48 8b 54 24 68	 mov	 rdx, QWORD PTR name$[rsp]
  001d0	48 8b 4c 24 78	 mov	 rcx, QWORD PTR dict$[rsp]
  001d5	e8 00 00 00 00	 call	 PyDict_SetItem
  001da	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax
$LN8@PyObject_G@7:

; 1264 :         Py_DECREF(dict);

  001de	48 8b 4c 24 78	 mov	 rcx, QWORD PTR dict$[rsp]
  001e3	e8 00 00 00 00	 call	 _Py_DecRef

; 1265 :         if (res < 0 && PyErr_ExceptionMatches(PyExc_KeyError))

  001e8	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  001ed	7d 21		 jge	 SHORT $LN7@PyObject_G@7
  001ef	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_KeyError
  001f6	e8 00 00 00 00	 call	 PyErr_ExceptionMatches
  001fb	85 c0		 test	 eax, eax
  001fd	74 11		 je	 SHORT $LN7@PyObject_G@7

; 1266 :             PyErr_SetObject(PyExc_AttributeError, name);

  001ff	48 8b 54 24 68	 mov	 rdx, QWORD PTR name$[rsp]
  00204	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_AttributeError
  0020b	e8 00 00 00 00	 call	 PyErr_SetObject
$LN7@PyObject_G@7:

; 1267 :         goto done;

  00210	eb 6d		 jmp	 SHORT $done$121225
$LN10@PyObject_G@7:

; 1268 :     }
; 1269 : 
; 1270 :     if (f != NULL) {

  00212	48 83 7c 24 30
	00		 cmp	 QWORD PTR f$[rsp], 0
  00218	74 19		 je	 SHORT $LN6@PyObject_G@7

; 1271 :         res = f(descr, obj, value);

  0021a	4c 8b 44 24 70	 mov	 r8, QWORD PTR value$[rsp]
  0021f	48 8b 54 24 60	 mov	 rdx, QWORD PTR obj$[rsp]
  00224	48 8b 4c 24 28	 mov	 rcx, QWORD PTR descr$[rsp]
  00229	ff 54 24 30	 call	 QWORD PTR f$[rsp]
  0022d	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 1272 :         goto done;

  00231	eb 4c		 jmp	 SHORT $done$121225
$LN6@PyObject_G@7:

; 1273 :     }
; 1274 : 
; 1275 :     if (descr == NULL) {

  00233	48 83 7c 24 28
	00		 cmp	 QWORD PTR descr$[rsp], 0
  00239	75 23		 jne	 SHORT $LN5@PyObject_G@7

; 1276 :         PyErr_Format(PyExc_AttributeError,
; 1277 :                      "'%.100s' object has no attribute '%U'",
; 1278 :                      tp->tp_name, name);

  0023b	4c 8b 4c 24 68	 mov	 r9, QWORD PTR name$[rsp]
  00240	48 8b 44 24 40	 mov	 rax, QWORD PTR tp$[rsp]
  00245	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  00249	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@EOFOALDN@?8?$CF?4100s?8?5object?5has?5no?5attribute@
  00250	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_AttributeError
  00257	e8 00 00 00 00	 call	 PyErr_Format

; 1279 :         goto done;

  0025c	eb 21		 jmp	 SHORT $done$121225
$LN5@PyObject_G@7:

; 1280 :     }
; 1281 : 
; 1282 :     PyErr_Format(PyExc_AttributeError,
; 1283 :                  "'%.50s' object attribute '%U' is read-only",
; 1284 :                  tp->tp_name, name);

  0025e	4c 8b 4c 24 68	 mov	 r9, QWORD PTR name$[rsp]
  00263	48 8b 44 24 40	 mov	 rax, QWORD PTR tp$[rsp]
  00268	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  0026c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CL@MBODLJBI@?8?$CF?450s?8?5object?5attribute?5?8?$CFU?8?5is@
  00273	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_AttributeError
  0027a	e8 00 00 00 00	 call	 PyErr_Format
$done$121225:
$LN4@PyObject_G@7:

; 1285 :   done:
; 1286 :     Py_XDECREF(descr);

  0027f	48 83 7c 24 28
	00		 cmp	 QWORD PTR descr$[rsp], 0
  00285	74 0a		 je	 SHORT $LN1@PyObject_G@7
  00287	48 8b 4c 24 28	 mov	 rcx, QWORD PTR descr$[rsp]
  0028c	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@PyObject_G@7:
  00291	33 c0		 xor	 eax, eax
  00293	85 c0		 test	 eax, eax
  00295	75 e8		 jne	 SHORT $LN4@PyObject_G@7

; 1287 :     Py_DECREF(name);

  00297	48 8b 4c 24 68	 mov	 rcx, QWORD PTR name$[rsp]
  0029c	e8 00 00 00 00	 call	 _Py_DecRef

; 1288 :     return res;

  002a1	8b 44 24 20	 mov	 eax, DWORD PTR res$[rsp]
$LN22@PyObject_G@7:

; 1289 : }

  002a5	48 83 c4 58	 add	 rsp, 88			; 00000058H
  002a9	c3		 ret	 0
_PyObject_GenericSetAttrWithDict ENDP
_TEXT	ENDS
PUBLIC	PyObject_GenericSetAttr
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyObject_GenericSetAttr DD imagerel $LN3
	DD	imagerel $LN3+47
	DD	imagerel $unwind$PyObject_GenericSetAttr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyObject_GenericSetAttr DD 011301H
	DD	04213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyObject_GenericSetAttr
_TEXT	SEGMENT
obj$ = 48
name$ = 56
value$ = 64
PyObject_GenericSetAttr PROC				; COMDAT

; 1293 : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1294 :     return _PyObject_GenericSetAttrWithDict(obj, name, value, NULL);

  00013	45 33 c9	 xor	 r9d, r9d
  00016	4c 8b 44 24 40	 mov	 r8, QWORD PTR value$[rsp]
  0001b	48 8b 54 24 38	 mov	 rdx, QWORD PTR name$[rsp]
  00020	48 8b 4c 24 30	 mov	 rcx, QWORD PTR obj$[rsp]
  00025	e8 00 00 00 00	 call	 _PyObject_GenericSetAttrWithDict

; 1295 : }

  0002a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002e	c3		 ret	 0
PyObject_GenericSetAttr ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DF@NPFGEKPJ@__dict__?5must?5be?5set?5to?5a?5dictio@ ; `string'
PUBLIC	??_C@_0BH@JKEKAFKG@cannot?5delete?5__dict__?$AA@ ; `string'
PUBLIC	??_C@_0BM@OFDEHIMA@This?5object?5has?5no?5__dict__?$AA@ ; `string'
PUBLIC	PyObject_GenericSetDict
EXTRN	PyErr_SetString:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyObject_GenericSetDict DD imagerel $LN14
	DD	imagerel $LN14+252
	DD	imagerel $unwind$PyObject_GenericSetDict
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyObject_GenericSetDict DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT ??_C@_0DF@NPFGEKPJ@__dict__?5must?5be?5set?5to?5a?5dictio@
CONST	SEGMENT
??_C@_0DF@NPFGEKPJ@__dict__?5must?5be?5set?5to?5a?5dictio@ DB '__dict__ m'
	DB	'ust be set to a dictionary, not a ''%.200s''', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@JKEKAFKG@cannot?5delete?5__dict__?$AA@
CONST	SEGMENT
??_C@_0BH@JKEKAFKG@cannot?5delete?5__dict__?$AA@ DB 'cannot delete __dict'
	DB	'__', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@OFDEHIMA@This?5object?5has?5no?5__dict__?$AA@
CONST	SEGMENT
??_C@_0BM@OFDEHIMA@This?5object?5has?5no?5__dict__?$AA@ DB 'This object h'
	DB	'as no __dict__', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyObject_GenericSetDict
_TEXT	SEGMENT
dict$ = 32
dictptr$ = 40
obj$ = 64
value$ = 72
context$ = 80
PyObject_GenericSetDict PROC				; COMDAT

; 1299 : {

$LN14:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1300 :     PyObject *dict, **dictptr = _PyObject_GetDictPtr(obj);

  00013	48 8b 4c 24 40	 mov	 rcx, QWORD PTR obj$[rsp]
  00018	e8 00 00 00 00	 call	 _PyObject_GetDictPtr
  0001d	48 89 44 24 28	 mov	 QWORD PTR dictptr$[rsp], rax

; 1301 :     if (dictptr == NULL) {

  00022	48 83 7c 24 28
	00		 cmp	 QWORD PTR dictptr$[rsp], 0
  00028	75 1d		 jne	 SHORT $LN11@PyObject_G@8

; 1302 :         PyErr_SetString(PyExc_AttributeError,
; 1303 :                         "This object has no __dict__");

  0002a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@OFDEHIMA@This?5object?5has?5no?5__dict__?$AA@
  00031	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_AttributeError
  00038	e8 00 00 00 00	 call	 PyErr_SetString

; 1304 :         return -1;

  0003d	b8 ff ff ff ff	 mov	 eax, -1
  00042	e9 b0 00 00 00	 jmp	 $LN12@PyObject_G@8
$LN11@PyObject_G@8:

; 1305 :     }
; 1306 :     if (value == NULL) {

  00047	48 83 7c 24 48
	00		 cmp	 QWORD PTR value$[rsp], 0
  0004d	75 1d		 jne	 SHORT $LN10@PyObject_G@8

; 1307 :         PyErr_SetString(PyExc_TypeError, "cannot delete __dict__");

  0004f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@JKEKAFKG@cannot?5delete?5__dict__?$AA@
  00056	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0005d	e8 00 00 00 00	 call	 PyErr_SetString

; 1308 :         return -1;

  00062	b8 ff ff ff ff	 mov	 eax, -1
  00067	e9 8b 00 00 00	 jmp	 $LN12@PyObject_G@8
$LN10@PyObject_G@8:

; 1309 :     }
; 1310 :     if (!PyDict_Check(value)) {

  0006c	48 8b 44 24 48	 mov	 rax, QWORD PTR value$[rsp]
  00071	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00075	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0007b	25 00 00 00 20	 and	 eax, 536870912		; 20000000H
  00080	85 c0		 test	 eax, eax
  00082	75 27		 jne	 SHORT $LN9@PyObject_G@8

; 1311 :         PyErr_Format(PyExc_TypeError,
; 1312 :                      "__dict__ must be set to a dictionary, "
; 1313 :                      "not a '%.200s'", Py_TYPE(value)->tp_name);

  00084	48 8b 44 24 48	 mov	 rax, QWORD PTR value$[rsp]
  00089	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0008d	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  00091	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DF@NPFGEKPJ@__dict__?5must?5be?5set?5to?5a?5dictio@
  00098	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0009f	e8 00 00 00 00	 call	 PyErr_Format

; 1314 :         return -1;

  000a4	b8 ff ff ff ff	 mov	 eax, -1
  000a9	eb 4c		 jmp	 SHORT $LN12@PyObject_G@8
$LN9@PyObject_G@8:

; 1315 :     }
; 1316 :     dict = *dictptr;

  000ab	48 8b 44 24 28	 mov	 rax, QWORD PTR dictptr$[rsp]
  000b0	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000b3	48 89 44 24 20	 mov	 QWORD PTR dict$[rsp], rax
$LN8@PyObject_G@8:

; 1317 :     Py_XINCREF(value);

  000b8	48 83 7c 24 48
	00		 cmp	 QWORD PTR value$[rsp], 0
  000be	74 0a		 je	 SHORT $LN5@PyObject_G@8
  000c0	48 8b 4c 24 48	 mov	 rcx, QWORD PTR value$[rsp]
  000c5	e8 00 00 00 00	 call	 _Py_IncRef
$LN5@PyObject_G@8:
  000ca	33 c0		 xor	 eax, eax
  000cc	85 c0		 test	 eax, eax
  000ce	75 e8		 jne	 SHORT $LN8@PyObject_G@8

; 1318 :     *dictptr = value;

  000d0	48 8b 44 24 28	 mov	 rax, QWORD PTR dictptr$[rsp]
  000d5	48 8b 4c 24 48	 mov	 rcx, QWORD PTR value$[rsp]
  000da	48 89 08	 mov	 QWORD PTR [rax], rcx
$LN4@PyObject_G@8:

; 1319 :     Py_XDECREF(dict);

  000dd	48 83 7c 24 20
	00		 cmp	 QWORD PTR dict$[rsp], 0
  000e3	74 0a		 je	 SHORT $LN1@PyObject_G@8
  000e5	48 8b 4c 24 20	 mov	 rcx, QWORD PTR dict$[rsp]
  000ea	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@PyObject_G@8:
  000ef	33 c0		 xor	 eax, eax
  000f1	85 c0		 test	 eax, eax
  000f3	75 e8		 jne	 SHORT $LN4@PyObject_G@8

; 1320 :     return 0;

  000f5	33 c0		 xor	 eax, eax
$LN12@PyObject_G@8:

; 1321 : }

  000f7	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000fb	c3		 ret	 0
PyObject_GenericSetDict ENDP
_TEXT	ENDS
PUBLIC	??_C@_1EA@PEPJOKNN@?$AA?$CI?$AAP?$AAy?$AA_?$AAs?$AAs?$AAi?$AAz?$AAe?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AAi?$AAn?$AAt?$AA?$CJ?$AA?$CI?$AAr?$AAe?$AAs?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA?$CI?$AAr?$AAe?$AAs?$AA?$CJ?$AA?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyObject_IsTrue DD imagerel $LN16
	DD	imagerel $LN16+382
	DD	imagerel $unwind$PyObject_IsTrue
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyObject_IsTrue DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_1EA@PEPJOKNN@?$AA?$CI?$AAP?$AAy?$AA_?$AAs?$AAs?$AAi?$AAz?$AAe?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AAi?$AAn?$AAt?$AA?$CJ?$AA?$CI?$AAr?$AAe?$AAs?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA?$CI?$AAr?$AAe?$AAs?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1EA@PEPJOKNN@?$AA?$CI?$AAP?$AAy?$AA_?$AAs?$AAs?$AAi?$AAz?$AAe?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AAi?$AAn?$AAt?$AA?$CJ?$AA?$CI?$AAr?$AAe?$AAs?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA?$CI?$AAr?$AAe?$AAs?$AA?$CJ?$AA?$AA@ DB '('
	DB	00H, 'P', 00H, 'y', 00H, '_', 00H, 's', 00H, 's', 00H, 'i', 00H
	DB	'z', 00H, 'e', 00H, '_', 00H, 't', 00H, ')', 00H, '(', 00H, 'i'
	DB	00H, 'n', 00H, 't', 00H, ')', 00H, '(', 00H, 'r', 00H, 'e', 00H
	DB	's', 00H, ')', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '('
	DB	00H, 'r', 00H, 'e', 00H, 's', 00H, ')', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyObject_IsTrue
_TEXT	SEGMENT
res$ = 32
tv143 = 40
v$ = 64
PyObject_IsTrue PROC					; COMDAT

; 1329 : {

$LN16:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1330 :     Py_ssize_t res;
; 1331 :     if (v == Py_True)

  00009	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  00010	48 39 44 24 40	 cmp	 QWORD PTR v$[rsp], rax
  00015	75 0a		 jne	 SHORT $LN10@PyObject_I@7

; 1332 :         return 1;

  00017	b8 01 00 00 00	 mov	 eax, 1
  0001c	e9 58 01 00 00	 jmp	 $LN11@PyObject_I@7
$LN10@PyObject_I@7:

; 1333 :     if (v == Py_False)

  00021	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct
  00028	48 39 44 24 40	 cmp	 QWORD PTR v$[rsp], rax
  0002d	75 07		 jne	 SHORT $LN9@PyObject_I@7

; 1334 :         return 0;

  0002f	33 c0		 xor	 eax, eax
  00031	e9 43 01 00 00	 jmp	 $LN11@PyObject_I@7
$LN9@PyObject_I@7:

; 1335 :     if (v == Py_None)

  00036	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0003d	48 39 44 24 40	 cmp	 QWORD PTR v$[rsp], rax
  00042	75 0c		 jne	 SHORT $LN8@PyObject_I@7

; 1336 :         return 0;

  00044	33 c0		 xor	 eax, eax
  00046	e9 2e 01 00 00	 jmp	 $LN11@PyObject_I@7

; 1337 :     else if (v->ob_type->tp_as_number != NULL &&

  0004b	e9 e3 00 00 00	 jmp	 $LN7@PyObject_I@7
$LN8@PyObject_I@7:

; 1338 :              v->ob_type->tp_as_number->nb_bool != NULL)

  00050	48 8b 44 24 40	 mov	 rax, QWORD PTR v$[rsp]
  00055	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00059	48 83 b8 b8 00
	00 00 00	 cmp	 QWORD PTR [rax+184], 0
  00061	74 3b		 je	 SHORT $LN6@PyObject_I@7
  00063	48 8b 44 24 40	 mov	 rax, QWORD PTR v$[rsp]
  00068	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0006c	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00073	48 83 78 48 00	 cmp	 QWORD PTR [rax+72], 0
  00078	74 24		 je	 SHORT $LN6@PyObject_I@7

; 1339 :         res = (*v->ob_type->tp_as_number->nb_bool)(v);

  0007a	48 8b 44 24 40	 mov	 rax, QWORD PTR v$[rsp]
  0007f	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00083	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  0008a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR v$[rsp]
  0008f	ff 50 48	 call	 QWORD PTR [rax+72]
  00092	48 98		 cdqe
  00094	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax

; 1340 :     else if (v->ob_type->tp_as_mapping != NULL &&

  00099	e9 95 00 00 00	 jmp	 $LN5@PyObject_I@7
$LN6@PyObject_I@7:

; 1341 :              v->ob_type->tp_as_mapping->mp_length != NULL)

  0009e	48 8b 44 24 40	 mov	 rax, QWORD PTR v$[rsp]
  000a3	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000a7	48 83 b8 c8 00
	00 00 00	 cmp	 QWORD PTR [rax+200], 0
  000af	74 34		 je	 SHORT $LN4@PyObject_I@7
  000b1	48 8b 44 24 40	 mov	 rax, QWORD PTR v$[rsp]
  000b6	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000ba	48 8b 80 c8 00
	00 00		 mov	 rax, QWORD PTR [rax+200]
  000c1	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  000c5	74 1e		 je	 SHORT $LN4@PyObject_I@7

; 1342 :         res = (*v->ob_type->tp_as_mapping->mp_length)(v);

  000c7	48 8b 44 24 40	 mov	 rax, QWORD PTR v$[rsp]
  000cc	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000d0	48 8b 80 c8 00
	00 00		 mov	 rax, QWORD PTR [rax+200]
  000d7	48 8b 4c 24 40	 mov	 rcx, QWORD PTR v$[rsp]
  000dc	ff 10		 call	 QWORD PTR [rax]
  000de	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax

; 1343 :     else if (v->ob_type->tp_as_sequence != NULL &&

  000e3	eb 4e		 jmp	 SHORT $LN3@PyObject_I@7
$LN4@PyObject_I@7:

; 1344 :              v->ob_type->tp_as_sequence->sq_length != NULL)

  000e5	48 8b 44 24 40	 mov	 rax, QWORD PTR v$[rsp]
  000ea	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000ee	48 83 b8 c0 00
	00 00 00	 cmp	 QWORD PTR [rax+192], 0
  000f6	74 34		 je	 SHORT $LN2@PyObject_I@7
  000f8	48 8b 44 24 40	 mov	 rax, QWORD PTR v$[rsp]
  000fd	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00101	48 8b 80 c0 00
	00 00		 mov	 rax, QWORD PTR [rax+192]
  00108	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0010c	74 1e		 je	 SHORT $LN2@PyObject_I@7

; 1345 :         res = (*v->ob_type->tp_as_sequence->sq_length)(v);

  0010e	48 8b 44 24 40	 mov	 rax, QWORD PTR v$[rsp]
  00113	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00117	48 8b 80 c0 00
	00 00		 mov	 rax, QWORD PTR [rax+192]
  0011e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR v$[rsp]
  00123	ff 10		 call	 QWORD PTR [rax]
  00125	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax

; 1346 :     else

  0012a	eb 07		 jmp	 SHORT $LN1@PyObject_I@7
$LN2@PyObject_I@7:

; 1347 :         return 1;

  0012c	b8 01 00 00 00	 mov	 eax, 1
  00131	eb 46		 jmp	 SHORT $LN11@PyObject_I@7
$LN1@PyObject_I@7:
$LN3@PyObject_I@7:
$LN5@PyObject_I@7:
$LN7@PyObject_I@7:

; 1348 :     /* if it is negative, it should be either -1 or -2 */
; 1349 :     return (res > 0) ? 1 : Py_SAFE_DOWNCAST(res, Py_ssize_t, int);

  00133	48 83 7c 24 20
	00		 cmp	 QWORD PTR res$[rsp], 0
  00139	7e 0a		 jle	 SHORT $LN14@PyObject_I@7
  0013b	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR tv143[rsp], 1
  00143	eb 30		 jmp	 SHORT $LN15@PyObject_I@7
$LN14@PyObject_I@7:
  00145	48 63 44 24 20	 movsxd	 rax, DWORD PTR res$[rsp]
  0014a	48 3b 44 24 20	 cmp	 rax, QWORD PTR res$[rsp]
  0014f	74 1c		 je	 SHORT $LN13@PyObject_I@7
  00151	41 b8 45 05 00
	00		 mov	 r8d, 1349		; 00000545H
  00157	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CI@ONKHJAFP@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  0015e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EA@PEPJOKNN@?$AA?$CI?$AAP?$AAy?$AA_?$AAs?$AAs?$AAi?$AAz?$AAe?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AAi?$AAn?$AAt?$AA?$CJ?$AA?$CI?$AAr?$AAe?$AAs?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA?$CI?$AAr?$AAe?$AAs?$AA?$CJ?$AA?$AA@
  00165	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0016b	33 c0		 xor	 eax, eax
$LN13@PyObject_I@7:
  0016d	8b 44 24 20	 mov	 eax, DWORD PTR res$[rsp]
  00171	89 44 24 28	 mov	 DWORD PTR tv143[rsp], eax
$LN15@PyObject_I@7:
  00175	8b 44 24 28	 mov	 eax, DWORD PTR tv143[rsp]
$LN11@PyObject_I@7:

; 1350 : }

  00179	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0017d	c3		 ret	 0
PyObject_IsTrue ENDP
_TEXT	ENDS
PUBLIC	PyObject_Not
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyObject_Not DD imagerel $LN6
	DD	imagerel $LN6+70
	DD	imagerel $unwind$PyObject_Not
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyObject_Not DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyObject_Not
_TEXT	SEGMENT
res$ = 32
tv68 = 36
v$ = 64
PyObject_Not PROC					; COMDAT

; 1357 : {

$LN6:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1358 :     int res;
; 1359 :     res = PyObject_IsTrue(v);

  00009	48 8b 4c 24 40	 mov	 rcx, QWORD PTR v$[rsp]
  0000e	e8 00 00 00 00	 call	 PyObject_IsTrue
  00013	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 1360 :     if (res < 0)

  00017	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  0001c	7d 06		 jge	 SHORT $LN1@PyObject_N@3

; 1361 :         return res;

  0001e	8b 44 24 20	 mov	 eax, DWORD PTR res$[rsp]
  00022	eb 1d		 jmp	 SHORT $LN2@PyObject_N@3
$LN1@PyObject_N@3:

; 1362 :     return res == 0;

  00024	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  00029	75 0a		 jne	 SHORT $LN4@PyObject_N@3
  0002b	c7 44 24 24 01
	00 00 00	 mov	 DWORD PTR tv68[rsp], 1
  00033	eb 08		 jmp	 SHORT $LN5@PyObject_N@3
$LN4@PyObject_N@3:
  00035	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR tv68[rsp], 0
$LN5@PyObject_N@3:
  0003d	8b 44 24 24	 mov	 eax, DWORD PTR tv68[rsp]
$LN2@PyObject_N@3:

; 1363 : }

  00041	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00045	c3		 ret	 0
PyObject_Not ENDP
_TEXT	ENDS
PUBLIC	PyCallable_Check
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyCallable_Check DD imagerel $LN6
	DD	imagerel $LN6+64
	DD	imagerel $unwind$PyCallable_Check
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyCallable_Check DD 010901H
	DD	02209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyCallable_Check
_TEXT	SEGMENT
tv68 = 0
x$ = 32
PyCallable_Check PROC					; COMDAT

; 1369 : {

$LN6:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 18	 sub	 rsp, 24

; 1370 :     if (x == NULL)

  00009	48 83 7c 24 20
	00		 cmp	 QWORD PTR x$[rsp], 0
  0000f	75 04		 jne	 SHORT $LN1@PyCallable

; 1371 :         return 0;

  00011	33 c0		 xor	 eax, eax
  00013	eb 26		 jmp	 SHORT $LN2@PyCallable
$LN1@PyCallable:

; 1372 :     return x->ob_type->tp_call != NULL;

  00015	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  0001a	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0001e	48 83 b8 d8 00
	00 00 00	 cmp	 QWORD PTR [rax+216], 0
  00026	74 09		 je	 SHORT $LN4@PyCallable
  00028	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv68[rsp], 1
  0002f	eb 07		 jmp	 SHORT $LN5@PyCallable
$LN4@PyCallable:
  00031	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv68[rsp], 0
$LN5@PyCallable:
  00038	8b 04 24	 mov	 eax, DWORD PTR tv68[rsp]
$LN2@PyCallable:

; 1373 : }

  0003b	48 83 c4 18	 add	 rsp, 24
  0003f	c3		 ret	 0
PyCallable_Check ENDP
_TEXT	ENDS
PUBLIC	PyObject_Dir
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyObject_Dir DD imagerel $LN5
	DD	imagerel $LN5+54
	DD	imagerel $unwind$PyObject_Dir
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyObject_Dir DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyObject_Dir
_TEXT	SEGMENT
tv68 = 32
obj$ = 64
PyObject_Dir PROC					; COMDAT

; 1443 : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1444 :     return (obj == NULL) ? _dir_locals() : _dir_object(obj);

  00009	48 83 7c 24 40
	00		 cmp	 QWORD PTR obj$[rsp], 0
  0000f	75 0c		 jne	 SHORT $LN3@PyObject_D@2
  00011	e8 00 00 00 00	 call	 _dir_locals
  00016	48 89 44 24 20	 mov	 QWORD PTR tv68[rsp], rax
  0001b	eb 0f		 jmp	 SHORT $LN4@PyObject_D@2
$LN3@PyObject_D@2:
  0001d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR obj$[rsp]
  00022	e8 00 00 00 00	 call	 _dir_object
  00027	48 89 44 24 20	 mov	 QWORD PTR tv68[rsp], rax
$LN4@PyObject_D@2:
  0002c	48 8b 44 24 20	 mov	 rax, QWORD PTR tv68[rsp]

; 1445 : }

  00031	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00035	c3		 ret	 0
PyObject_Dir ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DM@LOKPMOMI@dir?$CI?$CJ?3?5expected?5keys?$CI?$CJ?5of?5locals@ ; `string'
PUBLIC	??_C@_0BF@KDAEDCBL@frame?5does?5not?5exist?$AA@	; `string'
EXTRN	PyList_Sort:PROC
EXTRN	PyMapping_Keys:PROC
EXTRN	PyExc_SystemError:QWORD
EXTRN	PyEval_GetLocals:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_dir_locals DD imagerel _dir_locals
	DD	imagerel _dir_locals+183
	DD	imagerel $unwind$_dir_locals
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_dir_locals DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_0DM@LOKPMOMI@dir?$CI?$CJ?3?5expected?5keys?$CI?$CJ?5of?5locals@
CONST	SEGMENT
??_C@_0DM@LOKPMOMI@dir?$CI?$CJ?3?5expected?5keys?$CI?$CJ?5of?5locals@ DB 'd'
	DB	'ir(): expected keys() of locals to be a list, not ''%.200s''', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@KDAEDCBL@frame?5does?5not?5exist?$AA@
CONST	SEGMENT
??_C@_0BF@KDAEDCBL@frame?5does?5not?5exist?$AA@ DB 'frame does not exist', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _dir_locals
_TEXT	SEGMENT
locals$ = 32
names$ = 40
_dir_locals PROC					; COMDAT

; 1379 : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1380 :     PyObject *names;
; 1381 :     PyObject *locals = PyEval_GetLocals();

  00004	e8 00 00 00 00	 call	 PyEval_GetLocals
  00009	48 89 44 24 20	 mov	 QWORD PTR locals$[rsp], rax

; 1382 : 
; 1383 :     if (locals == NULL) {

  0000e	48 83 7c 24 20
	00		 cmp	 QWORD PTR locals$[rsp], 0
  00014	75 1a		 jne	 SHORT $LN4@dir_locals

; 1384 :         PyErr_SetString(PyExc_SystemError, "frame does not exist");

  00016	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BF@KDAEDCBL@frame?5does?5not?5exist?$AA@
  0001d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SystemError
  00024	e8 00 00 00 00	 call	 PyErr_SetString

; 1385 :         return NULL;

  00029	33 c0		 xor	 eax, eax
  0002b	e9 82 00 00 00	 jmp	 $LN5@dir_locals
$LN4@dir_locals:

; 1386 :     }
; 1387 : 
; 1388 :     names = PyMapping_Keys(locals);

  00030	48 8b 4c 24 20	 mov	 rcx, QWORD PTR locals$[rsp]
  00035	e8 00 00 00 00	 call	 PyMapping_Keys
  0003a	48 89 44 24 28	 mov	 QWORD PTR names$[rsp], rax

; 1389 :     if (!names)

  0003f	48 83 7c 24 28
	00		 cmp	 QWORD PTR names$[rsp], 0
  00045	75 04		 jne	 SHORT $LN3@dir_locals

; 1390 :         return NULL;

  00047	33 c0		 xor	 eax, eax
  00049	eb 67		 jmp	 SHORT $LN5@dir_locals
$LN3@dir_locals:

; 1391 :     if (!PyList_Check(names)) {

  0004b	48 8b 44 24 28	 mov	 rax, QWORD PTR names$[rsp]
  00050	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00054	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0005a	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  0005f	85 c0		 test	 eax, eax
  00061	75 2e		 jne	 SHORT $LN2@dir_locals

; 1392 :         PyErr_Format(PyExc_TypeError,
; 1393 :             "dir(): expected keys() of locals to be a list, "
; 1394 :             "not '%.200s'", Py_TYPE(names)->tp_name);

  00063	48 8b 44 24 28	 mov	 rax, QWORD PTR names$[rsp]
  00068	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0006c	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  00070	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DM@LOKPMOMI@dir?$CI?$CJ?3?5expected?5keys?$CI?$CJ?5of?5locals@
  00077	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0007e	e8 00 00 00 00	 call	 PyErr_Format

; 1395 :         Py_DECREF(names);

  00083	48 8b 4c 24 28	 mov	 rcx, QWORD PTR names$[rsp]
  00088	e8 00 00 00 00	 call	 _Py_DecRef

; 1396 :         return NULL;

  0008d	33 c0		 xor	 eax, eax
  0008f	eb 21		 jmp	 SHORT $LN5@dir_locals
$LN2@dir_locals:

; 1397 :     }
; 1398 :     if (PyList_Sort(names)) {

  00091	48 8b 4c 24 28	 mov	 rcx, QWORD PTR names$[rsp]
  00096	e8 00 00 00 00	 call	 PyList_Sort
  0009b	85 c0		 test	 eax, eax
  0009d	74 0e		 je	 SHORT $LN1@dir_locals

; 1399 :         Py_DECREF(names);

  0009f	48 8b 4c 24 28	 mov	 rcx, QWORD PTR names$[rsp]
  000a4	e8 00 00 00 00	 call	 _Py_DecRef

; 1400 :         return NULL;

  000a9	33 c0		 xor	 eax, eax
  000ab	eb 05		 jmp	 SHORT $LN5@dir_locals
$LN1@dir_locals:

; 1401 :     }
; 1402 :     /* the locals don't need to be DECREF'd */
; 1403 :     return names;

  000ad	48 8b 44 24 28	 mov	 rax, QWORD PTR names$[rsp]
$LN5@dir_locals:

; 1404 : }

  000b2	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000b6	c3		 ret	 0
_dir_locals ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CA@EJGFBLIN@object?5does?5not?5provide?5__dir__?$AA@ ; `string'
PUBLIC	??_C@_17ICLBCLLH@?$AAo?$AAb?$AAj?$AA?$AA@	; `string'
EXTRN	PySequence_List:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_dir_object DD imagerel _dir_object
	DD	imagerel _dir_object+244
	DD	imagerel $unwind$_dir_object
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_dir_object DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0CA@EJGFBLIN@object?5does?5not?5provide?5__dir__?$AA@
CONST	SEGMENT
??_C@_0CA@EJGFBLIN@object?5does?5not?5provide?5__dir__?$AA@ DB 'object do'
	DB	'es not provide __dir__', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_17ICLBCLLH@?$AAo?$AAb?$AAj?$AA?$AA@
CONST	SEGMENT
??_C@_17ICLBCLLH@?$AAo?$AAb?$AAj?$AA?$AA@ DB 'o', 00H, 'b', 00H, 'j', 00H
	DB	00H, 00H					; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _dir_object
_TEXT	SEGMENT
sorted$ = 32
result$ = 40
dirfunc$ = 48
obj$ = 80
_dir_object PROC					; COMDAT

; 1409 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1410 :     PyObject *result, *sorted;
; 1411 :     _Py_IDENTIFIER(__dir__);
; 1412 :     PyObject *dirfunc = _PyObject_LookupSpecial(obj, &PyId___dir__);

  00009	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId___dir__@?1??_dir_object@@9@9
  0000e	8b c0		 mov	 eax, eax
  00010	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00016	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0001f	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00023	48 8b d0	 mov	 rdx, rax
  00026	48 8b 4c 24 50	 mov	 rcx, QWORD PTR obj$[rsp]
  0002b	e8 00 00 00 00	 call	 _PyObject_LookupSpecial
  00030	48 89 44 24 30	 mov	 QWORD PTR dirfunc$[rsp], rax

; 1413 : 
; 1414 :     assert(obj);

  00035	48 83 7c 24 50
	00		 cmp	 QWORD PTR obj$[rsp], 0
  0003b	75 1c		 jne	 SHORT $LN8@dir_object
  0003d	41 b8 86 05 00
	00		 mov	 r8d, 1414		; 00000586H
  00043	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CI@ONKHJAFP@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  0004a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_17ICLBCLLH@?$AAo?$AAb?$AAj?$AA?$AA@
  00051	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00057	33 c0		 xor	 eax, eax
$LN8@dir_object:

; 1415 :     if (dirfunc == NULL) {

  00059	48 83 7c 24 30
	00		 cmp	 QWORD PTR dirfunc$[rsp], 0
  0005f	75 21		 jne	 SHORT $LN5@dir_object

; 1416 :         if (!PyErr_Occurred())

  00061	e8 00 00 00 00	 call	 PyErr_Occurred
  00066	48 85 c0	 test	 rax, rax
  00069	75 13		 jne	 SHORT $LN4@dir_object

; 1417 :             PyErr_SetString(PyExc_TypeError, "object does not provide __dir__");

  0006b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CA@EJGFBLIN@object?5does?5not?5provide?5__dir__?$AA@
  00072	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00079	e8 00 00 00 00	 call	 PyErr_SetString
$LN4@dir_object:

; 1418 :         return NULL;

  0007e	33 c0		 xor	 eax, eax
  00080	eb 6d		 jmp	 SHORT $LN6@dir_object
$LN5@dir_object:

; 1419 :     }
; 1420 :     /* use __dir__ */
; 1421 :     result = PyObject_CallFunctionObjArgs(dirfunc, NULL);

  00082	33 d2		 xor	 edx, edx
  00084	48 8b 4c 24 30	 mov	 rcx, QWORD PTR dirfunc$[rsp]
  00089	e8 00 00 00 00	 call	 PyObject_CallFunctionObjArgs
  0008e	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax

; 1422 :     Py_DECREF(dirfunc);

  00093	48 8b 4c 24 30	 mov	 rcx, QWORD PTR dirfunc$[rsp]
  00098	e8 00 00 00 00	 call	 _Py_DecRef

; 1423 :     if (result == NULL)

  0009d	48 83 7c 24 28
	00		 cmp	 QWORD PTR result$[rsp], 0
  000a3	75 04		 jne	 SHORT $LN3@dir_object

; 1424 :         return NULL;

  000a5	33 c0		 xor	 eax, eax
  000a7	eb 46		 jmp	 SHORT $LN6@dir_object
$LN3@dir_object:

; 1425 :     /* return sorted(result) */
; 1426 :     sorted = PySequence_List(result);

  000a9	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  000ae	e8 00 00 00 00	 call	 PySequence_List
  000b3	48 89 44 24 20	 mov	 QWORD PTR sorted$[rsp], rax

; 1427 :     Py_DECREF(result);

  000b8	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  000bd	e8 00 00 00 00	 call	 _Py_DecRef

; 1428 :     if (sorted == NULL)

  000c2	48 83 7c 24 20
	00		 cmp	 QWORD PTR sorted$[rsp], 0
  000c8	75 04		 jne	 SHORT $LN2@dir_object

; 1429 :         return NULL;

  000ca	33 c0		 xor	 eax, eax
  000cc	eb 21		 jmp	 SHORT $LN6@dir_object
$LN2@dir_object:

; 1430 :     if (PyList_Sort(sorted)) {

  000ce	48 8b 4c 24 20	 mov	 rcx, QWORD PTR sorted$[rsp]
  000d3	e8 00 00 00 00	 call	 PyList_Sort
  000d8	85 c0		 test	 eax, eax
  000da	74 0e		 je	 SHORT $LN1@dir_object

; 1431 :         Py_DECREF(sorted);

  000dc	48 8b 4c 24 20	 mov	 rcx, QWORD PTR sorted$[rsp]
  000e1	e8 00 00 00 00	 call	 _Py_DecRef

; 1432 :         return NULL;

  000e6	33 c0		 xor	 eax, eax
  000e8	eb 05		 jmp	 SHORT $LN6@dir_object
$LN1@dir_object:

; 1433 :     }
; 1434 :     return sorted;

  000ea	48 8b 44 24 20	 mov	 rax, QWORD PTR sorted$[rsp]
$LN6@dir_object:

; 1435 : }

  000ef	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000f3	c3		 ret	 0
_dir_object ENDP
_TEXT	ENDS
PUBLIC	??_C@_04OHJIHAFH@None?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$none_repr DD imagerel none_repr
	DD	imagerel none_repr+26
	DD	imagerel $unwind$none_repr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$none_repr DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT ??_C@_04OHJIHAFH@None?$AA@
CONST	SEGMENT
??_C@_04OHJIHAFH@None?$AA@ DB 'None', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT none_repr
_TEXT	SEGMENT
op$ = 48
none_repr PROC						; COMDAT

; 1456 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1457 :     return PyUnicode_FromString("None");

  00009	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04OHJIHAFH@None?$AA@
  00010	e8 00 00 00 00	 call	 PyUnicode_FromString

; 1458 : }

  00015	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00019	c3		 ret	 0
none_repr ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BC@HPOICNGE@deallocating?5None?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$none_dealloc DD imagerel none_dealloc
	DD	imagerel none_dealloc+26
	DD	imagerel $unwind$none_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$none_dealloc DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT ??_C@_0BC@HPOICNGE@deallocating?5None?$AA@
CONST	SEGMENT
??_C@_0BC@HPOICNGE@deallocating?5None?$AA@ DB 'deallocating None', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT none_dealloc
_TEXT	SEGMENT
ignore$ = 48
none_dealloc PROC					; COMDAT

; 1463 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1464 :     /* This should never get called, but we also don't want to SEGV if
; 1465 :      * we accidentally decref None out of existence.
; 1466 :      */
; 1467 :     Py_FatalError("deallocating None");

  00009	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@HPOICNGE@deallocating?5None?$AA@
  00010	e8 00 00 00 00	 call	 Py_FatalError

; 1468 : }

  00015	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00019	c3		 ret	 0
none_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BM@NBCCPGCB@NoneType?5takes?5no?5arguments?$AA@ ; `string'
EXTRN	PyDict_Size:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$none_new DD imagerel none_new
	DD	imagerel none_new+101
	DD	imagerel $unwind$none_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$none_new DD 011301H
	DD	04213H
xdata	ENDS
;	COMDAT ??_C@_0BM@NBCCPGCB@NoneType?5takes?5no?5arguments?$AA@
CONST	SEGMENT
??_C@_0BM@NBCCPGCB@NoneType?5takes?5no?5arguments?$AA@ DB 'NoneType takes'
	DB	' no arguments', 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT none_new
_TEXT	SEGMENT
type$ = 48
args$ = 56
kwargs$ = 64
none_new PROC						; COMDAT

; 1472 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1473 :     if (PyTuple_GET_SIZE(args) || (kwargs && PyDict_Size(kwargs))) {

  00013	48 8b 44 24 38	 mov	 rax, QWORD PTR args$[rsp]
  00018	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  0001d	75 17		 jne	 SHORT $LN1@none_new
  0001f	48 83 7c 24 40
	00		 cmp	 QWORD PTR kwargs$[rsp], 0
  00025	74 26		 je	 SHORT $LN2@none_new
  00027	48 8b 4c 24 40	 mov	 rcx, QWORD PTR kwargs$[rsp]
  0002c	e8 00 00 00 00	 call	 PyDict_Size
  00031	48 85 c0	 test	 rax, rax
  00034	74 17		 je	 SHORT $LN2@none_new
$LN1@none_new:

; 1474 :         PyErr_SetString(PyExc_TypeError, "NoneType takes no arguments");

  00036	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@NBCCPGCB@NoneType?5takes?5no?5arguments?$AA@
  0003d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00044	e8 00 00 00 00	 call	 PyErr_SetString

; 1475 :         return NULL;

  00049	33 c0		 xor	 eax, eax
  0004b	eb 13		 jmp	 SHORT $LN3@none_new
$LN2@none_new:

; 1476 :     }
; 1477 :     Py_RETURN_NONE;

  0004d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00054	e8 00 00 00 00	 call	 _Py_IncRef
  00059	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
$LN3@none_new:

; 1478 : }

  00060	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00064	c3		 ret	 0
none_new ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT none_bool
_TEXT	SEGMENT
v$ = 8
none_bool PROC						; COMDAT

; 1482 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 1483 :     return 0;

  00005	33 c0		 xor	 eax, eax

; 1484 : }

  00007	c3		 ret	 0
none_bool ENDP
_TEXT	ENDS
PUBLIC	??_C@_0P@HCLFFHDH@NotImplemented?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$NotImplemented_repr DD imagerel NotImplemented_repr
	DD	imagerel NotImplemented_repr+26
	DD	imagerel $unwind$NotImplemented_repr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$NotImplemented_repr DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT ??_C@_0P@HCLFFHDH@NotImplemented?$AA@
CONST	SEGMENT
??_C@_0P@HCLFFHDH@NotImplemented?$AA@ DB 'NotImplemented', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT NotImplemented_repr
_TEXT	SEGMENT
op$ = 48
NotImplemented_repr PROC				; COMDAT

; 1574 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1575 :     return PyUnicode_FromString("NotImplemented");

  00009	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@HCLFFHDH@NotImplemented?$AA@
  00010	e8 00 00 00 00	 call	 PyUnicode_FromString

; 1576 : }

  00015	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00019	c3		 ret	 0
NotImplemented_repr ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CG@KEOPNPJH@NotImplementedType?5takes?5no?5argu@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$notimplemented_new DD imagerel notimplemented_new
	DD	imagerel notimplemented_new+101
	DD	imagerel $unwind$notimplemented_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$notimplemented_new DD 011301H
	DD	04213H
xdata	ENDS
;	COMDAT ??_C@_0CG@KEOPNPJH@NotImplementedType?5takes?5no?5argu@
CONST	SEGMENT
??_C@_0CG@KEOPNPJH@NotImplementedType?5takes?5no?5argu@ DB 'NotImplemente'
	DB	'dType takes no arguments', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT notimplemented_new
_TEXT	SEGMENT
type$ = 48
args$ = 56
kwargs$ = 64
notimplemented_new PROC					; COMDAT

; 1580 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1581 :     if (PyTuple_GET_SIZE(args) || (kwargs && PyDict_Size(kwargs))) {

  00013	48 8b 44 24 38	 mov	 rax, QWORD PTR args$[rsp]
  00018	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  0001d	75 17		 jne	 SHORT $LN1@notimpleme
  0001f	48 83 7c 24 40
	00		 cmp	 QWORD PTR kwargs$[rsp], 0
  00025	74 26		 je	 SHORT $LN2@notimpleme
  00027	48 8b 4c 24 40	 mov	 rcx, QWORD PTR kwargs$[rsp]
  0002c	e8 00 00 00 00	 call	 PyDict_Size
  00031	48 85 c0	 test	 rax, rax
  00034	74 17		 je	 SHORT $LN2@notimpleme
$LN1@notimpleme:

; 1582 :         PyErr_SetString(PyExc_TypeError, "NotImplementedType takes no arguments");

  00036	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@KEOPNPJH@NotImplementedType?5takes?5no?5argu@
  0003d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00044	e8 00 00 00 00	 call	 PyErr_SetString

; 1583 :         return NULL;

  00049	33 c0		 xor	 eax, eax
  0004b	eb 13		 jmp	 SHORT $LN3@notimpleme
$LN2@notimpleme:

; 1584 :     }
; 1585 :     Py_RETURN_NOTIMPLEMENTED;

  0004d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NotImplementedStruct
  00054	e8 00 00 00 00	 call	 _Py_IncRef
  00059	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NotImplementedStruct
$LN3@notimpleme:

; 1586 : }

  00060	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00064	c3		 ret	 0
notimplemented_new ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CI@KCGLHPFK@Can?8t?5initialize?5sequence?5iterat@ ; `string'
PUBLIC	??_C@_0CA@KPPPNCLC@Can?8t?5initialize?5call?5iter?5type?$AA@ ; `string'
PUBLIC	??_C@_0CD@HCNPCLHE@Can?8t?5initialize?5method?5descr?5ty@ ; `string'
PUBLIC	??_C@_0CJ@PCHBNAPP@Can?8t?5initialize?5class?5method?5de@ ; `string'
PUBLIC	??_C@_0CG@HBOFAIND@Can?8t?5initialize?5instance?5method@ ; `string'
PUBLIC	??_C@_0BL@GNOJGKKA@Can?8t?5initialize?5cell?5type?$AA@ ; `string'
PUBLIC	??_C@_0CK@MLKLIMJK@Can?8t?5initialize?5long?5range?5iter@ ; `string'
PUBLIC	??_C@_0BO@NCFEEFJG@Can?8t?5initialize?5capsule?5type?$AA@ ; `string'
PUBLIC	??_C@_0CA@KLGIPOFE@Can?8t?5initialize?5namespace?5type?$AA@ ; `string'
PUBLIC	??_C@_0BK@IBODGPEH@Can?8t?5initialize?5zip?5type?$AA@ ; `string'
PUBLIC	??_C@_0BK@JKKHFLEK@Can?8t?5initialize?5map?5type?$AA@ ; `string'
PUBLIC	??_C@_0BN@MNJEFCB@Can?8t?5initialize?5filter?5type?$AA@ ; `string'
PUBLIC	??_C@_0CI@BIFPHOIH@Can?8t?5initialize?5member?5descript@ ; `string'
PUBLIC	??_C@_0BP@CDDJOKOM@Can?8t?5initialize?5ellipsis?5type?$AA@ ; `string'
PUBLIC	??_C@_0CF@IEPIPLE@Can?8t?5initialize?5method?5wrapper?5@ ; `string'
PUBLIC	??_C@_0BO@KOICOKPK@Can?8t?5initialize?5wrapper?5type?$AA@ ; `string'
PUBLIC	??_C@_0CJ@EAEDPJFE@Can?8t?5initialize?5get?9set?5descrip@ ; `string'
PUBLIC	??_C@_0CA@GDBPIPMJ@Can?8t?5initialize?5generator?5type?$AA@ ; `string'
PUBLIC	??_C@_0CB@NFMGFHFJ@Can?8t?5initialize?5dict?5proxy?5type@ ; `string'
PUBLIC	??_C@_0BP@JCDNDJAC@Can?8t?5initialize?5function?5type?$AA@ ; `string'
PUBLIC	??_C@_0BN@JMBCLGKN@Can?8t?5initialize?5method?5type?$AA@ ; `string'
PUBLIC	??_C@_0CH@ILEDBGFL@Can?8t?5initialize?5builtin?5functio@ ; `string'
PUBLIC	??_C@_0BM@FJKIPOOF@Can?8t?5initialize?5frame?5type?$AA@ ; `string'
PUBLIC	??_C@_0BL@LOLKLOFI@Can?8t?5initialize?5code?5type?$AA@ ; `string'
PUBLIC	??_C@_0BM@BEKOCBAI@Can?8t?5initialize?5StdPrinter?$AA@ ; `string'
PUBLIC	??_C@_0BP@LKMFIGMA@Can?8t?5initialize?5reversed?5type?$AA@ ; `string'
PUBLIC	??_C@_0CA@PPMIAJJC@Can?8t?5initialize?5enumerate?5type?$AA@ ; `string'
PUBLIC	??_C@_0BM@DKPPMODK@Can?8t?5initialize?5tuple?5type?$AA@ ; `string'
PUBLIC	??_C@_0CB@LDGAMANL@Can?8t?5initialize?5memoryview?5type@ ; `string'
PUBLIC	??_C@_0CF@LNOOACJJ@Can?8t?5initialize?5managed?5buffer?5@ ; `string'
PUBLIC	??_C@_0BP@LINOBPGC@Can?8t?5initialize?5property?5type?$AA@ ; `string'
PUBLIC	??_C@_0CA@JKDGKHHL@Can?8t?5initialize?5frozenset?5type?$AA@ ; `string'
PUBLIC	??_C@_0BK@OKCEDMPJ@Can?8t?5initialize?5int?5type?$AA@ ; `string'
PUBLIC	??_C@_0BM@DOALBGBJ@Can?8t?5initialize?5float?5type?$AA@ ; `string'
PUBLIC	??_C@_0BO@KMBFLGEI@Can?8t?5initialize?5complex?5type?$AA@ ; `string'
PUBLIC	??_C@_0CE@EOCDLOPI@Can?8t?5initialize?5static?5method?5t@ ; `string'
PUBLIC	??_C@_0BM@BBDMJHBN@Can?8t?5initialize?5slice?5type?$AA@ ; `string'
PUBLIC	??_C@_0BK@FNGBOMMP@Can?8t?5initialize?5str?5type?$AA@ ; `string'
PUBLIC	??_C@_0BK@IOKAOIEA@Can?8t?5initialize?5set?5type?$AA@ ; `string'
PUBLIC	??_C@_0BL@OEBAECMI@Can?8t?5initialize?5dict?5type?$AA@ ; `string'
PUBLIC	??_C@_0BM@MFGHKAFO@Can?8t?5initialize?5range?5type?$AA@ ; `string'
PUBLIC	??_C@_0BN@KBELOCDM@Can?8t?5initialize?5object?5type?$AA@ ; `string'
PUBLIC	??_C@_0BM@KOPCGCNC@Can?8t?5initialize?5super?5type?$AA@ ; `string'
PUBLIC	??_C@_0CA@NCHGDNKB@Can?8t?5initialize?5traceback?5type?$AA@ ; `string'
PUBLIC	??_C@_0CF@DBHDJCBG@Can?8t?5initialize?5NotImplemented?5@ ; `string'
PUBLIC	??_C@_0BL@JFNJCKPA@Can?8t?5initialize?5None?5type?$AA@ ; `string'
PUBLIC	??_C@_0BL@ILHMDDBH@Can?8t?5initialize?5list?5type?$AA@ ; `string'
PUBLIC	??_C@_0BH@FCIIPNCH@Can?8t?5initialize?5?8str?8?$AA@ ; `string'
PUBLIC	??_C@_0CA@NJNPLJM@Can?8t?5initialize?5bytearray?5type?$AA@ ; `string'
PUBLIC	??_C@_0BL@JJIKIMOD@Can?8t?5initialize?5bool?5type?$AA@ ; `string'
PUBLIC	??_C@_0CE@BJCODKBD@Can?8t?5initialize?5weakref?5proxy?5t@ ; `string'
PUBLIC	??_C@_0CN@MKPADHNI@Can?8t?5initialize?5callable?5weakre@ ; `string'
PUBLIC	??_C@_0BO@LECLAEMN@Can?8t?5initialize?5weakref?5type?$AA@ ; `string'
PUBLIC	??_C@_0BL@FMODCAOD@Can?8t?5initialize?5type?5type?$AA@ ; `string'
PUBLIC	??_C@_0P@JFABONIJ@_Py_ReadyTypes?$AA@		; `string'
PUBLIC	_Py_ReadyTypes
EXTRN	__imp_InitializeCriticalSectionAndSpinCount:PROC
EXTRN	PySeqIter_Type:BYTE
EXTRN	PyCallIter_Type:BYTE
EXTRN	PyMethodDescr_Type:BYTE
EXTRN	PyClassMethodDescr_Type:BYTE
EXTRN	PyInstanceMethod_Type:BYTE
EXTRN	PyCell_Type:BYTE
EXTRN	PyLongRangeIter_Type:BYTE
EXTRN	_PyNamespace_Type:BYTE
EXTRN	PyZip_Type:BYTE
EXTRN	PyMap_Type:BYTE
EXTRN	PyFilter_Type:BYTE
EXTRN	PyMemberDescr_Type:BYTE
EXTRN	PyEllipsis_Type:BYTE
EXTRN	_PyMethodWrapper_Type:BYTE
EXTRN	PyWrapperDescr_Type:BYTE
EXTRN	PyGetSetDescr_Type:BYTE
EXTRN	PyGen_Type:BYTE
EXTRN	PyDictProxy_Type:BYTE
EXTRN	PyFunction_Type:BYTE
EXTRN	PyMethod_Type:BYTE
EXTRN	PyCFunction_Type:BYTE
EXTRN	PyFrame_Type:BYTE
EXTRN	PyCode_Type:BYTE
EXTRN	PyStdPrinter_Type:BYTE
EXTRN	PyReversed_Type:BYTE
EXTRN	PyEnum_Type:BYTE
EXTRN	PyTuple_Type:BYTE
EXTRN	PyMemoryView_Type:BYTE
EXTRN	_PyManagedBuffer_Type:BYTE
EXTRN	PyProperty_Type:BYTE
EXTRN	PyFrozenSet_Type:BYTE
EXTRN	PyLong_Type:BYTE
EXTRN	PyFloat_Type:BYTE
EXTRN	PyComplex_Type:BYTE
EXTRN	PyStaticMethod_Type:BYTE
EXTRN	PySlice_Type:BYTE
EXTRN	PySet_Type:BYTE
EXTRN	PyDict_Type:BYTE
EXTRN	PyRange_Type:BYTE
EXTRN	PyBaseObject_Type:BYTE
EXTRN	PySuper_Type:BYTE
EXTRN	PyTraceBack_Type:BYTE
EXTRN	PyList_Type:BYTE
EXTRN	PyByteArray_Type:BYTE
EXTRN	_PyWeakref_ProxyType:BYTE
EXTRN	_PyWeakref_CallableProxyType:BYTE
EXTRN	_PyWeakref_RefType:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_ReadyTypes DD imagerel $LN58
	DD	imagerel $LN58+1594
	DD	imagerel $unwind$_Py_ReadyTypes
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_ReadyTypes DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0CI@KCGLHPFK@Can?8t?5initialize?5sequence?5iterat@
CONST	SEGMENT
??_C@_0CI@KCGLHPFK@Can?8t?5initialize?5sequence?5iterat@ DB 'Can''t initi'
	DB	'alize sequence iterator type', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@KPPPNCLC@Can?8t?5initialize?5call?5iter?5type?$AA@
CONST	SEGMENT
??_C@_0CA@KPPPNCLC@Can?8t?5initialize?5call?5iter?5type?$AA@ DB 'Can''t i'
	DB	'nitialize call iter type', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HCNPCLHE@Can?8t?5initialize?5method?5descr?5ty@
CONST	SEGMENT
??_C@_0CD@HCNPCLHE@Can?8t?5initialize?5method?5descr?5ty@ DB 'Can''t init'
	DB	'ialize method descr type', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@PCHBNAPP@Can?8t?5initialize?5class?5method?5de@
CONST	SEGMENT
??_C@_0CJ@PCHBNAPP@Can?8t?5initialize?5class?5method?5de@ DB 'Can''t init'
	DB	'ialize class method descr type', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@HBOFAIND@Can?8t?5initialize?5instance?5method@
CONST	SEGMENT
??_C@_0CG@HBOFAIND@Can?8t?5initialize?5instance?5method@ DB 'Can''t initi'
	DB	'alize instance method type', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@GNOJGKKA@Can?8t?5initialize?5cell?5type?$AA@
CONST	SEGMENT
??_C@_0BL@GNOJGKKA@Can?8t?5initialize?5cell?5type?$AA@ DB 'Can''t initial'
	DB	'ize cell type', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@MLKLIMJK@Can?8t?5initialize?5long?5range?5iter@
CONST	SEGMENT
??_C@_0CK@MLKLIMJK@Can?8t?5initialize?5long?5range?5iter@ DB 'Can''t init'
	DB	'ialize long range iterator type', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@NCFEEFJG@Can?8t?5initialize?5capsule?5type?$AA@
CONST	SEGMENT
??_C@_0BO@NCFEEFJG@Can?8t?5initialize?5capsule?5type?$AA@ DB 'Can''t init'
	DB	'ialize capsule type', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@KLGIPOFE@Can?8t?5initialize?5namespace?5type?$AA@
CONST	SEGMENT
??_C@_0CA@KLGIPOFE@Can?8t?5initialize?5namespace?5type?$AA@ DB 'Can''t in'
	DB	'itialize namespace type', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@IBODGPEH@Can?8t?5initialize?5zip?5type?$AA@
CONST	SEGMENT
??_C@_0BK@IBODGPEH@Can?8t?5initialize?5zip?5type?$AA@ DB 'Can''t initiali'
	DB	'ze zip type', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@JKKHFLEK@Can?8t?5initialize?5map?5type?$AA@
CONST	SEGMENT
??_C@_0BK@JKKHFLEK@Can?8t?5initialize?5map?5type?$AA@ DB 'Can''t initiali'
	DB	'ze map type', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@MNJEFCB@Can?8t?5initialize?5filter?5type?$AA@
CONST	SEGMENT
??_C@_0BN@MNJEFCB@Can?8t?5initialize?5filter?5type?$AA@ DB 'Can''t initia'
	DB	'lize filter type', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@BIFPHOIH@Can?8t?5initialize?5member?5descript@
CONST	SEGMENT
??_C@_0CI@BIFPHOIH@Can?8t?5initialize?5member?5descript@ DB 'Can''t initi'
	DB	'alize member descriptor type', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@CDDJOKOM@Can?8t?5initialize?5ellipsis?5type?$AA@
CONST	SEGMENT
??_C@_0BP@CDDJOKOM@Can?8t?5initialize?5ellipsis?5type?$AA@ DB 'Can''t ini'
	DB	'tialize ellipsis type', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@IEPIPLE@Can?8t?5initialize?5method?5wrapper?5@
CONST	SEGMENT
??_C@_0CF@IEPIPLE@Can?8t?5initialize?5method?5wrapper?5@ DB 'Can''t initi'
	DB	'alize method wrapper type', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@KOICOKPK@Can?8t?5initialize?5wrapper?5type?$AA@
CONST	SEGMENT
??_C@_0BO@KOICOKPK@Can?8t?5initialize?5wrapper?5type?$AA@ DB 'Can''t init'
	DB	'ialize wrapper type', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@EAEDPJFE@Can?8t?5initialize?5get?9set?5descrip@
CONST	SEGMENT
??_C@_0CJ@EAEDPJFE@Can?8t?5initialize?5get?9set?5descrip@ DB 'Can''t init'
	DB	'ialize get-set descriptor type', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@GDBPIPMJ@Can?8t?5initialize?5generator?5type?$AA@
CONST	SEGMENT
??_C@_0CA@GDBPIPMJ@Can?8t?5initialize?5generator?5type?$AA@ DB 'Can''t in'
	DB	'itialize generator type', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@NFMGFHFJ@Can?8t?5initialize?5dict?5proxy?5type@
CONST	SEGMENT
??_C@_0CB@NFMGFHFJ@Can?8t?5initialize?5dict?5proxy?5type@ DB 'Can''t init'
	DB	'ialize dict proxy type', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@JCDNDJAC@Can?8t?5initialize?5function?5type?$AA@
CONST	SEGMENT
??_C@_0BP@JCDNDJAC@Can?8t?5initialize?5function?5type?$AA@ DB 'Can''t ini'
	DB	'tialize function type', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@JMBCLGKN@Can?8t?5initialize?5method?5type?$AA@
CONST	SEGMENT
??_C@_0BN@JMBCLGKN@Can?8t?5initialize?5method?5type?$AA@ DB 'Can''t initi'
	DB	'alize method type', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@ILEDBGFL@Can?8t?5initialize?5builtin?5functio@
CONST	SEGMENT
??_C@_0CH@ILEDBGFL@Can?8t?5initialize?5builtin?5functio@ DB 'Can''t initi'
	DB	'alize builtin function type', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@FJKIPOOF@Can?8t?5initialize?5frame?5type?$AA@
CONST	SEGMENT
??_C@_0BM@FJKIPOOF@Can?8t?5initialize?5frame?5type?$AA@ DB 'Can''t initia'
	DB	'lize frame type', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@LOLKLOFI@Can?8t?5initialize?5code?5type?$AA@
CONST	SEGMENT
??_C@_0BL@LOLKLOFI@Can?8t?5initialize?5code?5type?$AA@ DB 'Can''t initial'
	DB	'ize code type', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@BEKOCBAI@Can?8t?5initialize?5StdPrinter?$AA@
CONST	SEGMENT
??_C@_0BM@BEKOCBAI@Can?8t?5initialize?5StdPrinter?$AA@ DB 'Can''t initial'
	DB	'ize StdPrinter', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@LKMFIGMA@Can?8t?5initialize?5reversed?5type?$AA@
CONST	SEGMENT
??_C@_0BP@LKMFIGMA@Can?8t?5initialize?5reversed?5type?$AA@ DB 'Can''t ini'
	DB	'tialize reversed type', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@PPMIAJJC@Can?8t?5initialize?5enumerate?5type?$AA@
CONST	SEGMENT
??_C@_0CA@PPMIAJJC@Can?8t?5initialize?5enumerate?5type?$AA@ DB 'Can''t in'
	DB	'itialize enumerate type', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@DKPPMODK@Can?8t?5initialize?5tuple?5type?$AA@
CONST	SEGMENT
??_C@_0BM@DKPPMODK@Can?8t?5initialize?5tuple?5type?$AA@ DB 'Can''t initia'
	DB	'lize tuple type', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@LDGAMANL@Can?8t?5initialize?5memoryview?5type@
CONST	SEGMENT
??_C@_0CB@LDGAMANL@Can?8t?5initialize?5memoryview?5type@ DB 'Can''t initi'
	DB	'alize memoryview type', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@LNOOACJJ@Can?8t?5initialize?5managed?5buffer?5@
CONST	SEGMENT
??_C@_0CF@LNOOACJJ@Can?8t?5initialize?5managed?5buffer?5@ DB 'Can''t init'
	DB	'ialize managed buffer type', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@LINOBPGC@Can?8t?5initialize?5property?5type?$AA@
CONST	SEGMENT
??_C@_0BP@LINOBPGC@Can?8t?5initialize?5property?5type?$AA@ DB 'Can''t ini'
	DB	'tialize property type', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@JKDGKHHL@Can?8t?5initialize?5frozenset?5type?$AA@
CONST	SEGMENT
??_C@_0CA@JKDGKHHL@Can?8t?5initialize?5frozenset?5type?$AA@ DB 'Can''t in'
	DB	'itialize frozenset type', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@OKCEDMPJ@Can?8t?5initialize?5int?5type?$AA@
CONST	SEGMENT
??_C@_0BK@OKCEDMPJ@Can?8t?5initialize?5int?5type?$AA@ DB 'Can''t initiali'
	DB	'ze int type', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@DOALBGBJ@Can?8t?5initialize?5float?5type?$AA@
CONST	SEGMENT
??_C@_0BM@DOALBGBJ@Can?8t?5initialize?5float?5type?$AA@ DB 'Can''t initia'
	DB	'lize float type', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@KMBFLGEI@Can?8t?5initialize?5complex?5type?$AA@
CONST	SEGMENT
??_C@_0BO@KMBFLGEI@Can?8t?5initialize?5complex?5type?$AA@ DB 'Can''t init'
	DB	'ialize complex type', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@EOCDLOPI@Can?8t?5initialize?5static?5method?5t@
CONST	SEGMENT
??_C@_0CE@EOCDLOPI@Can?8t?5initialize?5static?5method?5t@ DB 'Can''t init'
	DB	'ialize static method type', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@BBDMJHBN@Can?8t?5initialize?5slice?5type?$AA@
CONST	SEGMENT
??_C@_0BM@BBDMJHBN@Can?8t?5initialize?5slice?5type?$AA@ DB 'Can''t initia'
	DB	'lize slice type', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@FNGBOMMP@Can?8t?5initialize?5str?5type?$AA@
CONST	SEGMENT
??_C@_0BK@FNGBOMMP@Can?8t?5initialize?5str?5type?$AA@ DB 'Can''t initiali'
	DB	'ze str type', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@IOKAOIEA@Can?8t?5initialize?5set?5type?$AA@
CONST	SEGMENT
??_C@_0BK@IOKAOIEA@Can?8t?5initialize?5set?5type?$AA@ DB 'Can''t initiali'
	DB	'ze set type', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@OEBAECMI@Can?8t?5initialize?5dict?5type?$AA@
CONST	SEGMENT
??_C@_0BL@OEBAECMI@Can?8t?5initialize?5dict?5type?$AA@ DB 'Can''t initial'
	DB	'ize dict type', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@MFGHKAFO@Can?8t?5initialize?5range?5type?$AA@
CONST	SEGMENT
??_C@_0BM@MFGHKAFO@Can?8t?5initialize?5range?5type?$AA@ DB 'Can''t initia'
	DB	'lize range type', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@KBELOCDM@Can?8t?5initialize?5object?5type?$AA@
CONST	SEGMENT
??_C@_0BN@KBELOCDM@Can?8t?5initialize?5object?5type?$AA@ DB 'Can''t initi'
	DB	'alize object type', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@KOPCGCNC@Can?8t?5initialize?5super?5type?$AA@
CONST	SEGMENT
??_C@_0BM@KOPCGCNC@Can?8t?5initialize?5super?5type?$AA@ DB 'Can''t initia'
	DB	'lize super type', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@NCHGDNKB@Can?8t?5initialize?5traceback?5type?$AA@
CONST	SEGMENT
??_C@_0CA@NCHGDNKB@Can?8t?5initialize?5traceback?5type?$AA@ DB 'Can''t in'
	DB	'itialize traceback type', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@DBHDJCBG@Can?8t?5initialize?5NotImplemented?5@
CONST	SEGMENT
??_C@_0CF@DBHDJCBG@Can?8t?5initialize?5NotImplemented?5@ DB 'Can''t initi'
	DB	'alize NotImplemented type', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@JFNJCKPA@Can?8t?5initialize?5None?5type?$AA@
CONST	SEGMENT
??_C@_0BL@JFNJCKPA@Can?8t?5initialize?5None?5type?$AA@ DB 'Can''t initial'
	DB	'ize None type', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@ILHMDDBH@Can?8t?5initialize?5list?5type?$AA@
CONST	SEGMENT
??_C@_0BL@ILHMDDBH@Can?8t?5initialize?5list?5type?$AA@ DB 'Can''t initial'
	DB	'ize list type', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@FCIIPNCH@Can?8t?5initialize?5?8str?8?$AA@
CONST	SEGMENT
??_C@_0BH@FCIIPNCH@Can?8t?5initialize?5?8str?8?$AA@ DB 'Can''t initialize'
	DB	' ''str''', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@NJNPLJM@Can?8t?5initialize?5bytearray?5type?$AA@
CONST	SEGMENT
??_C@_0CA@NJNPLJM@Can?8t?5initialize?5bytearray?5type?$AA@ DB 'Can''t ini'
	DB	'tialize bytearray type', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@JJIKIMOD@Can?8t?5initialize?5bool?5type?$AA@
CONST	SEGMENT
??_C@_0BL@JJIKIMOD@Can?8t?5initialize?5bool?5type?$AA@ DB 'Can''t initial'
	DB	'ize bool type', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@BJCODKBD@Can?8t?5initialize?5weakref?5proxy?5t@
CONST	SEGMENT
??_C@_0CE@BJCODKBD@Can?8t?5initialize?5weakref?5proxy?5t@ DB 'Can''t init'
	DB	'ialize weakref proxy type', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@MKPADHNI@Can?8t?5initialize?5callable?5weakre@
CONST	SEGMENT
??_C@_0CN@MKPADHNI@Can?8t?5initialize?5callable?5weakre@ DB 'Can''t initi'
	DB	'alize callable weakref proxy type', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@LECLAEMN@Can?8t?5initialize?5weakref?5type?$AA@
CONST	SEGMENT
??_C@_0BO@LECLAEMN@Can?8t?5initialize?5weakref?5type?$AA@ DB 'Can''t init'
	DB	'ialize weakref type', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@FMODCAOD@Can?8t?5initialize?5type?5type?$AA@
CONST	SEGMENT
??_C@_0BL@FMODCAOD@Can?8t?5initialize?5type?5type?$AA@ DB 'Can''t initial'
	DB	'ize type type', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@JFABONIJ@_Py_ReadyTypes?$AA@
CONST	SEGMENT
??_C@_0P@JFABONIJ@_Py_ReadyTypes?$AA@ DB '_Py_ReadyTypes', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_ReadyTypes
_TEXT	SEGMENT
_Py_ReadyTypes PROC					; COMDAT

; 1636 : {

$LN58:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1637 :     Py_GUARD

  00004	e8 00 00 00 00	 call	 _Py_PXCTX
  00009	85 c0		 test	 eax, eax
  0000b	74 1c		 je	 SHORT $LN55@Py_ReadyTy
  0000d	45 33 c9	 xor	 r9d, r9d
  00010	41 b8 65 06 00
	00		 mov	 r8d, 1637		; 00000665H
  00016	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@LBNADOJM@?4?4?2Objects?2object?4c?$AA@
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@JFABONIJ@_Py_ReadyTypes?$AA@
  00024	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN55@Py_ReadyTy:

; 1638 : 
; 1639 :     if (PyType_Ready(&PyType_Type) < 0)

  00029	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyType_Type
  00030	e8 00 00 00 00	 call	 PyType_Ready
  00035	85 c0		 test	 eax, eax
  00037	7d 0c		 jge	 SHORT $LN54@Py_ReadyTy

; 1640 :         Py_FatalError("Can't initialize type type");

  00039	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BL@FMODCAOD@Can?8t?5initialize?5type?5type?$AA@
  00040	e8 00 00 00 00	 call	 Py_FatalError
$LN54@Py_ReadyTy:

; 1641 : 
; 1642 :     if (PyType_Ready(&_PyWeakref_RefType) < 0)

  00045	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_PyWeakref_RefType
  0004c	e8 00 00 00 00	 call	 PyType_Ready
  00051	85 c0		 test	 eax, eax
  00053	7d 0c		 jge	 SHORT $LN53@Py_ReadyTy

; 1643 :         Py_FatalError("Can't initialize weakref type");

  00055	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BO@LECLAEMN@Can?8t?5initialize?5weakref?5type?$AA@
  0005c	e8 00 00 00 00	 call	 Py_FatalError
$LN53@Py_ReadyTy:

; 1644 : 
; 1645 :     if (PyType_Ready(&_PyWeakref_CallableProxyType) < 0)

  00061	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_PyWeakref_CallableProxyType
  00068	e8 00 00 00 00	 call	 PyType_Ready
  0006d	85 c0		 test	 eax, eax
  0006f	7d 0c		 jge	 SHORT $LN52@Py_ReadyTy

; 1646 :         Py_FatalError("Can't initialize callable weakref proxy type");

  00071	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CN@MKPADHNI@Can?8t?5initialize?5callable?5weakre@
  00078	e8 00 00 00 00	 call	 Py_FatalError
$LN52@Py_ReadyTy:

; 1647 : 
; 1648 :     if (PyType_Ready(&_PyWeakref_ProxyType) < 0)

  0007d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_PyWeakref_ProxyType
  00084	e8 00 00 00 00	 call	 PyType_Ready
  00089	85 c0		 test	 eax, eax
  0008b	7d 0c		 jge	 SHORT $LN51@Py_ReadyTy

; 1649 :         Py_FatalError("Can't initialize weakref proxy type");

  0008d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CE@BJCODKBD@Can?8t?5initialize?5weakref?5proxy?5t@
  00094	e8 00 00 00 00	 call	 Py_FatalError
$LN51@Py_ReadyTy:

; 1650 : 
; 1651 :     if (PyType_Ready(&PyBool_Type) < 0)

  00099	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyBool_Type
  000a0	e8 00 00 00 00	 call	 PyType_Ready
  000a5	85 c0		 test	 eax, eax
  000a7	7d 0c		 jge	 SHORT $LN50@Py_ReadyTy

; 1652 :         Py_FatalError("Can't initialize bool type");

  000a9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BL@JJIKIMOD@Can?8t?5initialize?5bool?5type?$AA@
  000b0	e8 00 00 00 00	 call	 Py_FatalError
$LN50@Py_ReadyTy:

; 1653 : 
; 1654 :     if (PyType_Ready(&PyByteArray_Type) < 0)

  000b5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyByteArray_Type
  000bc	e8 00 00 00 00	 call	 PyType_Ready
  000c1	85 c0		 test	 eax, eax
  000c3	7d 0c		 jge	 SHORT $LN49@Py_ReadyTy

; 1655 :         Py_FatalError("Can't initialize bytearray type");

  000c5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CA@NJNPLJM@Can?8t?5initialize?5bytearray?5type?$AA@
  000cc	e8 00 00 00 00	 call	 Py_FatalError
$LN49@Py_ReadyTy:

; 1656 : 
; 1657 :     if (PyType_Ready(&PyBytes_Type) < 0)

  000d1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyBytes_Type
  000d8	e8 00 00 00 00	 call	 PyType_Ready
  000dd	85 c0		 test	 eax, eax
  000df	7d 0c		 jge	 SHORT $LN48@Py_ReadyTy

; 1658 :         Py_FatalError("Can't initialize 'str'");

  000e1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BH@FCIIPNCH@Can?8t?5initialize?5?8str?8?$AA@
  000e8	e8 00 00 00 00	 call	 Py_FatalError
$LN48@Py_ReadyTy:

; 1659 : 
; 1660 :     if (PyType_Ready(&PyList_Type) < 0)

  000ed	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyList_Type
  000f4	e8 00 00 00 00	 call	 PyType_Ready
  000f9	85 c0		 test	 eax, eax
  000fb	7d 0c		 jge	 SHORT $LN47@Py_ReadyTy

; 1661 :         Py_FatalError("Can't initialize list type");

  000fd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BL@ILHMDDBH@Can?8t?5initialize?5list?5type?$AA@
  00104	e8 00 00 00 00	 call	 Py_FatalError
$LN47@Py_ReadyTy:

; 1662 : 
; 1663 :     if (PyType_Ready(&_PyNone_Type) < 0)

  00109	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_PyNone_Type
  00110	e8 00 00 00 00	 call	 PyType_Ready
  00115	85 c0		 test	 eax, eax
  00117	7d 0c		 jge	 SHORT $LN46@Py_ReadyTy

; 1664 :         Py_FatalError("Can't initialize None type");

  00119	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BL@JFNJCKPA@Can?8t?5initialize?5None?5type?$AA@
  00120	e8 00 00 00 00	 call	 Py_FatalError
$LN46@Py_ReadyTy:

; 1665 : 
; 1666 :     if (PyType_Ready(&_PyNotImplemented_Type) < 0)

  00125	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_PyNotImplemented_Type
  0012c	e8 00 00 00 00	 call	 PyType_Ready
  00131	85 c0		 test	 eax, eax
  00133	7d 0c		 jge	 SHORT $LN45@Py_ReadyTy

; 1667 :         Py_FatalError("Can't initialize NotImplemented type");

  00135	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CF@DBHDJCBG@Can?8t?5initialize?5NotImplemented?5@
  0013c	e8 00 00 00 00	 call	 Py_FatalError
$LN45@Py_ReadyTy:

; 1668 : 
; 1669 :     if (PyType_Ready(&PyTraceBack_Type) < 0)

  00141	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyTraceBack_Type
  00148	e8 00 00 00 00	 call	 PyType_Ready
  0014d	85 c0		 test	 eax, eax
  0014f	7d 0c		 jge	 SHORT $LN44@Py_ReadyTy

; 1670 :         Py_FatalError("Can't initialize traceback type");

  00151	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CA@NCHGDNKB@Can?8t?5initialize?5traceback?5type?$AA@
  00158	e8 00 00 00 00	 call	 Py_FatalError
$LN44@Py_ReadyTy:

; 1671 : 
; 1672 :     if (PyType_Ready(&PySuper_Type) < 0)

  0015d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PySuper_Type
  00164	e8 00 00 00 00	 call	 PyType_Ready
  00169	85 c0		 test	 eax, eax
  0016b	7d 0c		 jge	 SHORT $LN43@Py_ReadyTy

; 1673 :         Py_FatalError("Can't initialize super type");

  0016d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BM@KOPCGCNC@Can?8t?5initialize?5super?5type?$AA@
  00174	e8 00 00 00 00	 call	 Py_FatalError
$LN43@Py_ReadyTy:

; 1674 : 
; 1675 :     if (PyType_Ready(&PyBaseObject_Type) < 0)

  00179	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyBaseObject_Type
  00180	e8 00 00 00 00	 call	 PyType_Ready
  00185	85 c0		 test	 eax, eax
  00187	7d 0c		 jge	 SHORT $LN42@Py_ReadyTy

; 1676 :         Py_FatalError("Can't initialize object type");

  00189	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BN@KBELOCDM@Can?8t?5initialize?5object?5type?$AA@
  00190	e8 00 00 00 00	 call	 Py_FatalError
$LN42@Py_ReadyTy:

; 1677 : 
; 1678 :     if (PyType_Ready(&PyRange_Type) < 0)

  00195	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyRange_Type
  0019c	e8 00 00 00 00	 call	 PyType_Ready
  001a1	85 c0		 test	 eax, eax
  001a3	7d 0c		 jge	 SHORT $LN41@Py_ReadyTy

; 1679 :         Py_FatalError("Can't initialize range type");

  001a5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BM@MFGHKAFO@Can?8t?5initialize?5range?5type?$AA@
  001ac	e8 00 00 00 00	 call	 Py_FatalError
$LN41@Py_ReadyTy:

; 1680 : 
; 1681 :     if (PyType_Ready(&PyDict_Type) < 0)

  001b1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyDict_Type
  001b8	e8 00 00 00 00	 call	 PyType_Ready
  001bd	85 c0		 test	 eax, eax
  001bf	7d 0c		 jge	 SHORT $LN40@Py_ReadyTy

; 1682 :         Py_FatalError("Can't initialize dict type");

  001c1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BL@OEBAECMI@Can?8t?5initialize?5dict?5type?$AA@
  001c8	e8 00 00 00 00	 call	 Py_FatalError
$LN40@Py_ReadyTy:

; 1683 : 
; 1684 :     if (PyType_Ready(&PySet_Type) < 0)

  001cd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PySet_Type
  001d4	e8 00 00 00 00	 call	 PyType_Ready
  001d9	85 c0		 test	 eax, eax
  001db	7d 0c		 jge	 SHORT $LN39@Py_ReadyTy

; 1685 :         Py_FatalError("Can't initialize set type");

  001dd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@IOKAOIEA@Can?8t?5initialize?5set?5type?$AA@
  001e4	e8 00 00 00 00	 call	 Py_FatalError
$LN39@Py_ReadyTy:

; 1686 : 
; 1687 :     if (PyType_Ready(&PyUnicode_Type) < 0)

  001e9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyUnicode_Type
  001f0	e8 00 00 00 00	 call	 PyType_Ready
  001f5	85 c0		 test	 eax, eax
  001f7	7d 0c		 jge	 SHORT $LN38@Py_ReadyTy

; 1688 :         Py_FatalError("Can't initialize str type");

  001f9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@FNGBOMMP@Can?8t?5initialize?5str?5type?$AA@
  00200	e8 00 00 00 00	 call	 Py_FatalError
$LN38@Py_ReadyTy:

; 1689 : 
; 1690 :     if (PyType_Ready(&PySlice_Type) < 0)

  00205	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PySlice_Type
  0020c	e8 00 00 00 00	 call	 PyType_Ready
  00211	85 c0		 test	 eax, eax
  00213	7d 0c		 jge	 SHORT $LN37@Py_ReadyTy

; 1691 :         Py_FatalError("Can't initialize slice type");

  00215	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BM@BBDMJHBN@Can?8t?5initialize?5slice?5type?$AA@
  0021c	e8 00 00 00 00	 call	 Py_FatalError
$LN37@Py_ReadyTy:

; 1692 : 
; 1693 :     if (PyType_Ready(&PyStaticMethod_Type) < 0)

  00221	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyStaticMethod_Type
  00228	e8 00 00 00 00	 call	 PyType_Ready
  0022d	85 c0		 test	 eax, eax
  0022f	7d 0c		 jge	 SHORT $LN36@Py_ReadyTy

; 1694 :         Py_FatalError("Can't initialize static method type");

  00231	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CE@EOCDLOPI@Can?8t?5initialize?5static?5method?5t@
  00238	e8 00 00 00 00	 call	 Py_FatalError
$LN36@Py_ReadyTy:

; 1695 : 
; 1696 :     if (PyType_Ready(&PyComplex_Type) < 0)

  0023d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyComplex_Type
  00244	e8 00 00 00 00	 call	 PyType_Ready
  00249	85 c0		 test	 eax, eax
  0024b	7d 0c		 jge	 SHORT $LN35@Py_ReadyTy

; 1697 :         Py_FatalError("Can't initialize complex type");

  0024d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BO@KMBFLGEI@Can?8t?5initialize?5complex?5type?$AA@
  00254	e8 00 00 00 00	 call	 Py_FatalError
$LN35@Py_ReadyTy:

; 1698 : 
; 1699 :     if (PyType_Ready(&PyFloat_Type) < 0)

  00259	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyFloat_Type
  00260	e8 00 00 00 00	 call	 PyType_Ready
  00265	85 c0		 test	 eax, eax
  00267	7d 0c		 jge	 SHORT $LN34@Py_ReadyTy

; 1700 :         Py_FatalError("Can't initialize float type");

  00269	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BM@DOALBGBJ@Can?8t?5initialize?5float?5type?$AA@
  00270	e8 00 00 00 00	 call	 Py_FatalError
$LN34@Py_ReadyTy:

; 1701 : 
; 1702 :     if (PyType_Ready(&PyLong_Type) < 0)

  00275	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyLong_Type
  0027c	e8 00 00 00 00	 call	 PyType_Ready
  00281	85 c0		 test	 eax, eax
  00283	7d 0c		 jge	 SHORT $LN33@Py_ReadyTy

; 1703 :         Py_FatalError("Can't initialize int type");

  00285	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@OKCEDMPJ@Can?8t?5initialize?5int?5type?$AA@
  0028c	e8 00 00 00 00	 call	 Py_FatalError
$LN33@Py_ReadyTy:

; 1704 : 
; 1705 :     if (PyType_Ready(&PyFrozenSet_Type) < 0)

  00291	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyFrozenSet_Type
  00298	e8 00 00 00 00	 call	 PyType_Ready
  0029d	85 c0		 test	 eax, eax
  0029f	7d 0c		 jge	 SHORT $LN32@Py_ReadyTy

; 1706 :         Py_FatalError("Can't initialize frozenset type");

  002a1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CA@JKDGKHHL@Can?8t?5initialize?5frozenset?5type?$AA@
  002a8	e8 00 00 00 00	 call	 Py_FatalError
$LN32@Py_ReadyTy:

; 1707 : 
; 1708 :     if (PyType_Ready(&PyProperty_Type) < 0)

  002ad	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyProperty_Type
  002b4	e8 00 00 00 00	 call	 PyType_Ready
  002b9	85 c0		 test	 eax, eax
  002bb	7d 0c		 jge	 SHORT $LN31@Py_ReadyTy

; 1709 :         Py_FatalError("Can't initialize property type");

  002bd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BP@LINOBPGC@Can?8t?5initialize?5property?5type?$AA@
  002c4	e8 00 00 00 00	 call	 Py_FatalError
$LN31@Py_ReadyTy:

; 1710 : 
; 1711 :     if (PyType_Ready(&_PyManagedBuffer_Type) < 0)

  002c9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_PyManagedBuffer_Type
  002d0	e8 00 00 00 00	 call	 PyType_Ready
  002d5	85 c0		 test	 eax, eax
  002d7	7d 0c		 jge	 SHORT $LN30@Py_ReadyTy

; 1712 :         Py_FatalError("Can't initialize managed buffer type");

  002d9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CF@LNOOACJJ@Can?8t?5initialize?5managed?5buffer?5@
  002e0	e8 00 00 00 00	 call	 Py_FatalError
$LN30@Py_ReadyTy:

; 1713 : 
; 1714 :     if (PyType_Ready(&PyMemoryView_Type) < 0)

  002e5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyMemoryView_Type
  002ec	e8 00 00 00 00	 call	 PyType_Ready
  002f1	85 c0		 test	 eax, eax
  002f3	7d 0c		 jge	 SHORT $LN29@Py_ReadyTy

; 1715 :         Py_FatalError("Can't initialize memoryview type");

  002f5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CB@LDGAMANL@Can?8t?5initialize?5memoryview?5type@
  002fc	e8 00 00 00 00	 call	 Py_FatalError
$LN29@Py_ReadyTy:

; 1716 : 
; 1717 :     if (PyType_Ready(&PyTuple_Type) < 0)

  00301	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyTuple_Type
  00308	e8 00 00 00 00	 call	 PyType_Ready
  0030d	85 c0		 test	 eax, eax
  0030f	7d 0c		 jge	 SHORT $LN28@Py_ReadyTy

; 1718 :         Py_FatalError("Can't initialize tuple type");

  00311	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BM@DKPPMODK@Can?8t?5initialize?5tuple?5type?$AA@
  00318	e8 00 00 00 00	 call	 Py_FatalError
$LN28@Py_ReadyTy:

; 1719 : 
; 1720 :     if (PyType_Ready(&PyEnum_Type) < 0)

  0031d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyEnum_Type
  00324	e8 00 00 00 00	 call	 PyType_Ready
  00329	85 c0		 test	 eax, eax
  0032b	7d 0c		 jge	 SHORT $LN27@Py_ReadyTy

; 1721 :         Py_FatalError("Can't initialize enumerate type");

  0032d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CA@PPMIAJJC@Can?8t?5initialize?5enumerate?5type?$AA@
  00334	e8 00 00 00 00	 call	 Py_FatalError
$LN27@Py_ReadyTy:

; 1722 : 
; 1723 :     if (PyType_Ready(&PyReversed_Type) < 0)

  00339	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyReversed_Type
  00340	e8 00 00 00 00	 call	 PyType_Ready
  00345	85 c0		 test	 eax, eax
  00347	7d 0c		 jge	 SHORT $LN26@Py_ReadyTy

; 1724 :         Py_FatalError("Can't initialize reversed type");

  00349	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BP@LKMFIGMA@Can?8t?5initialize?5reversed?5type?$AA@
  00350	e8 00 00 00 00	 call	 Py_FatalError
$LN26@Py_ReadyTy:

; 1725 : 
; 1726 :     if (PyType_Ready(&PyStdPrinter_Type) < 0)

  00355	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyStdPrinter_Type
  0035c	e8 00 00 00 00	 call	 PyType_Ready
  00361	85 c0		 test	 eax, eax
  00363	7d 0c		 jge	 SHORT $LN25@Py_ReadyTy

; 1727 :         Py_FatalError("Can't initialize StdPrinter");

  00365	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BM@BEKOCBAI@Can?8t?5initialize?5StdPrinter?$AA@
  0036c	e8 00 00 00 00	 call	 Py_FatalError
$LN25@Py_ReadyTy:

; 1728 : 
; 1729 :     if (PyType_Ready(&PyCode_Type) < 0)

  00371	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyCode_Type
  00378	e8 00 00 00 00	 call	 PyType_Ready
  0037d	85 c0		 test	 eax, eax
  0037f	7d 0c		 jge	 SHORT $LN24@Py_ReadyTy

; 1730 :         Py_FatalError("Can't initialize code type");

  00381	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BL@LOLKLOFI@Can?8t?5initialize?5code?5type?$AA@
  00388	e8 00 00 00 00	 call	 Py_FatalError
$LN24@Py_ReadyTy:

; 1731 : 
; 1732 :     if (PyType_Ready(&PyFrame_Type) < 0)

  0038d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyFrame_Type
  00394	e8 00 00 00 00	 call	 PyType_Ready
  00399	85 c0		 test	 eax, eax
  0039b	7d 0c		 jge	 SHORT $LN23@Py_ReadyTy

; 1733 :         Py_FatalError("Can't initialize frame type");

  0039d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BM@FJKIPOOF@Can?8t?5initialize?5frame?5type?$AA@
  003a4	e8 00 00 00 00	 call	 Py_FatalError
$LN23@Py_ReadyTy:

; 1734 : 
; 1735 :     if (PyType_Ready(&PyCFunction_Type) < 0)

  003a9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyCFunction_Type
  003b0	e8 00 00 00 00	 call	 PyType_Ready
  003b5	85 c0		 test	 eax, eax
  003b7	7d 0c		 jge	 SHORT $LN22@Py_ReadyTy

; 1736 :         Py_FatalError("Can't initialize builtin function type");

  003b9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CH@ILEDBGFL@Can?8t?5initialize?5builtin?5functio@
  003c0	e8 00 00 00 00	 call	 Py_FatalError
$LN22@Py_ReadyTy:

; 1737 : 
; 1738 :     if (PyType_Ready(&PyMethod_Type) < 0)

  003c5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyMethod_Type
  003cc	e8 00 00 00 00	 call	 PyType_Ready
  003d1	85 c0		 test	 eax, eax
  003d3	7d 0c		 jge	 SHORT $LN21@Py_ReadyTy

; 1739 :         Py_FatalError("Can't initialize method type");

  003d5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BN@JMBCLGKN@Can?8t?5initialize?5method?5type?$AA@
  003dc	e8 00 00 00 00	 call	 Py_FatalError
$LN21@Py_ReadyTy:

; 1740 : 
; 1741 :     if (PyType_Ready(&PyFunction_Type) < 0)

  003e1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyFunction_Type
  003e8	e8 00 00 00 00	 call	 PyType_Ready
  003ed	85 c0		 test	 eax, eax
  003ef	7d 0c		 jge	 SHORT $LN20@Py_ReadyTy

; 1742 :         Py_FatalError("Can't initialize function type");

  003f1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BP@JCDNDJAC@Can?8t?5initialize?5function?5type?$AA@
  003f8	e8 00 00 00 00	 call	 Py_FatalError
$LN20@Py_ReadyTy:

; 1743 : 
; 1744 :     if (PyType_Ready(&PyDictProxy_Type) < 0)

  003fd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyDictProxy_Type
  00404	e8 00 00 00 00	 call	 PyType_Ready
  00409	85 c0		 test	 eax, eax
  0040b	7d 0c		 jge	 SHORT $LN19@Py_ReadyTy

; 1745 :         Py_FatalError("Can't initialize dict proxy type");

  0040d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CB@NFMGFHFJ@Can?8t?5initialize?5dict?5proxy?5type@
  00414	e8 00 00 00 00	 call	 Py_FatalError
$LN19@Py_ReadyTy:

; 1746 : 
; 1747 :     if (PyType_Ready(&PyGen_Type) < 0)

  00419	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyGen_Type
  00420	e8 00 00 00 00	 call	 PyType_Ready
  00425	85 c0		 test	 eax, eax
  00427	7d 0c		 jge	 SHORT $LN18@Py_ReadyTy

; 1748 :         Py_FatalError("Can't initialize generator type");

  00429	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CA@GDBPIPMJ@Can?8t?5initialize?5generator?5type?$AA@
  00430	e8 00 00 00 00	 call	 Py_FatalError
$LN18@Py_ReadyTy:

; 1749 : 
; 1750 :     if (PyType_Ready(&PyGetSetDescr_Type) < 0)

  00435	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyGetSetDescr_Type
  0043c	e8 00 00 00 00	 call	 PyType_Ready
  00441	85 c0		 test	 eax, eax
  00443	7d 0c		 jge	 SHORT $LN17@Py_ReadyTy

; 1751 :         Py_FatalError("Can't initialize get-set descriptor type");

  00445	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CJ@EAEDPJFE@Can?8t?5initialize?5get?9set?5descrip@
  0044c	e8 00 00 00 00	 call	 Py_FatalError
$LN17@Py_ReadyTy:

; 1752 : 
; 1753 :     if (PyType_Ready(&PyWrapperDescr_Type) < 0)

  00451	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyWrapperDescr_Type
  00458	e8 00 00 00 00	 call	 PyType_Ready
  0045d	85 c0		 test	 eax, eax
  0045f	7d 0c		 jge	 SHORT $LN16@Py_ReadyTy

; 1754 :         Py_FatalError("Can't initialize wrapper type");

  00461	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BO@KOICOKPK@Can?8t?5initialize?5wrapper?5type?$AA@
  00468	e8 00 00 00 00	 call	 Py_FatalError
$LN16@Py_ReadyTy:

; 1755 : 
; 1756 :     if (PyType_Ready(&_PyMethodWrapper_Type) < 0)

  0046d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_PyMethodWrapper_Type
  00474	e8 00 00 00 00	 call	 PyType_Ready
  00479	85 c0		 test	 eax, eax
  0047b	7d 0c		 jge	 SHORT $LN15@Py_ReadyTy

; 1757 :         Py_FatalError("Can't initialize method wrapper type");

  0047d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CF@IEPIPLE@Can?8t?5initialize?5method?5wrapper?5@
  00484	e8 00 00 00 00	 call	 Py_FatalError
$LN15@Py_ReadyTy:

; 1758 : 
; 1759 :     if (PyType_Ready(&PyEllipsis_Type) < 0)

  00489	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyEllipsis_Type
  00490	e8 00 00 00 00	 call	 PyType_Ready
  00495	85 c0		 test	 eax, eax
  00497	7d 0c		 jge	 SHORT $LN14@Py_ReadyTy

; 1760 :         Py_FatalError("Can't initialize ellipsis type");

  00499	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BP@CDDJOKOM@Can?8t?5initialize?5ellipsis?5type?$AA@
  004a0	e8 00 00 00 00	 call	 Py_FatalError
$LN14@Py_ReadyTy:

; 1761 : 
; 1762 :     if (PyType_Ready(&PyMemberDescr_Type) < 0)

  004a5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyMemberDescr_Type
  004ac	e8 00 00 00 00	 call	 PyType_Ready
  004b1	85 c0		 test	 eax, eax
  004b3	7d 0c		 jge	 SHORT $LN13@Py_ReadyTy

; 1763 :         Py_FatalError("Can't initialize member descriptor type");

  004b5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CI@BIFPHOIH@Can?8t?5initialize?5member?5descript@
  004bc	e8 00 00 00 00	 call	 Py_FatalError
$LN13@Py_ReadyTy:

; 1764 : 
; 1765 :     if (PyType_Ready(&PyFilter_Type) < 0)

  004c1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyFilter_Type
  004c8	e8 00 00 00 00	 call	 PyType_Ready
  004cd	85 c0		 test	 eax, eax
  004cf	7d 0c		 jge	 SHORT $LN12@Py_ReadyTy

; 1766 :         Py_FatalError("Can't initialize filter type");

  004d1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BN@MNJEFCB@Can?8t?5initialize?5filter?5type?$AA@
  004d8	e8 00 00 00 00	 call	 Py_FatalError
$LN12@Py_ReadyTy:

; 1767 : 
; 1768 :     if (PyType_Ready(&PyMap_Type) < 0)

  004dd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyMap_Type
  004e4	e8 00 00 00 00	 call	 PyType_Ready
  004e9	85 c0		 test	 eax, eax
  004eb	7d 0c		 jge	 SHORT $LN11@Py_ReadyTy

; 1769 :         Py_FatalError("Can't initialize map type");

  004ed	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@JKKHFLEK@Can?8t?5initialize?5map?5type?$AA@
  004f4	e8 00 00 00 00	 call	 Py_FatalError
$LN11@Py_ReadyTy:

; 1770 : 
; 1771 :     if (PyType_Ready(&PyZip_Type) < 0)

  004f9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyZip_Type
  00500	e8 00 00 00 00	 call	 PyType_Ready
  00505	85 c0		 test	 eax, eax
  00507	7d 0c		 jge	 SHORT $LN10@Py_ReadyTy

; 1772 :         Py_FatalError("Can't initialize zip type");

  00509	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@IBODGPEH@Can?8t?5initialize?5zip?5type?$AA@
  00510	e8 00 00 00 00	 call	 Py_FatalError
$LN10@Py_ReadyTy:

; 1773 : 
; 1774 :     if (PyType_Ready(&_PyNamespace_Type) < 0)

  00515	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_PyNamespace_Type
  0051c	e8 00 00 00 00	 call	 PyType_Ready
  00521	85 c0		 test	 eax, eax
  00523	7d 0c		 jge	 SHORT $LN9@Py_ReadyTy

; 1775 :         Py_FatalError("Can't initialize namespace type");

  00525	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CA@KLGIPOFE@Can?8t?5initialize?5namespace?5type?$AA@
  0052c	e8 00 00 00 00	 call	 Py_FatalError
$LN9@Py_ReadyTy:

; 1776 : 
; 1777 :     if (PyType_Ready(&PyCapsule_Type) < 0)

  00531	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyCapsule_Type
  00538	e8 00 00 00 00	 call	 PyType_Ready
  0053d	85 c0		 test	 eax, eax
  0053f	7d 0c		 jge	 SHORT $LN8@Py_ReadyTy

; 1778 :         Py_FatalError("Can't initialize capsule type");

  00541	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BO@NCFEEFJG@Can?8t?5initialize?5capsule?5type?$AA@
  00548	e8 00 00 00 00	 call	 Py_FatalError
$LN8@Py_ReadyTy:

; 1779 : 
; 1780 :     if (PyType_Ready(&PyLongRangeIter_Type) < 0)

  0054d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyLongRangeIter_Type
  00554	e8 00 00 00 00	 call	 PyType_Ready
  00559	85 c0		 test	 eax, eax
  0055b	7d 0c		 jge	 SHORT $LN7@Py_ReadyTy

; 1781 :         Py_FatalError("Can't initialize long range iterator type");

  0055d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CK@MLKLIMJK@Can?8t?5initialize?5long?5range?5iter@
  00564	e8 00 00 00 00	 call	 Py_FatalError
$LN7@Py_ReadyTy:

; 1782 : 
; 1783 :     if (PyType_Ready(&PyCell_Type) < 0)

  00569	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyCell_Type
  00570	e8 00 00 00 00	 call	 PyType_Ready
  00575	85 c0		 test	 eax, eax
  00577	7d 0c		 jge	 SHORT $LN6@Py_ReadyTy

; 1784 :         Py_FatalError("Can't initialize cell type");

  00579	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BL@GNOJGKKA@Can?8t?5initialize?5cell?5type?$AA@
  00580	e8 00 00 00 00	 call	 Py_FatalError
$LN6@Py_ReadyTy:

; 1785 : 
; 1786 :     if (PyType_Ready(&PyInstanceMethod_Type) < 0)

  00585	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyInstanceMethod_Type
  0058c	e8 00 00 00 00	 call	 PyType_Ready
  00591	85 c0		 test	 eax, eax
  00593	7d 0c		 jge	 SHORT $LN5@Py_ReadyTy

; 1787 :         Py_FatalError("Can't initialize instance method type");

  00595	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CG@HBOFAIND@Can?8t?5initialize?5instance?5method@
  0059c	e8 00 00 00 00	 call	 Py_FatalError
$LN5@Py_ReadyTy:

; 1788 : 
; 1789 :     if (PyType_Ready(&PyClassMethodDescr_Type) < 0)

  005a1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyClassMethodDescr_Type
  005a8	e8 00 00 00 00	 call	 PyType_Ready
  005ad	85 c0		 test	 eax, eax
  005af	7d 0c		 jge	 SHORT $LN4@Py_ReadyTy

; 1790 :         Py_FatalError("Can't initialize class method descr type");

  005b1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CJ@PCHBNAPP@Can?8t?5initialize?5class?5method?5de@
  005b8	e8 00 00 00 00	 call	 Py_FatalError
$LN4@Py_ReadyTy:

; 1791 : 
; 1792 :     if (PyType_Ready(&PyMethodDescr_Type) < 0)

  005bd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyMethodDescr_Type
  005c4	e8 00 00 00 00	 call	 PyType_Ready
  005c9	85 c0		 test	 eax, eax
  005cb	7d 0c		 jge	 SHORT $LN3@Py_ReadyTy

; 1793 :         Py_FatalError("Can't initialize method descr type");

  005cd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CD@HCNPCLHE@Can?8t?5initialize?5method?5descr?5ty@
  005d4	e8 00 00 00 00	 call	 Py_FatalError
$LN3@Py_ReadyTy:

; 1794 : 
; 1795 :     if (PyType_Ready(&PyCallIter_Type) < 0)

  005d9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyCallIter_Type
  005e0	e8 00 00 00 00	 call	 PyType_Ready
  005e5	85 c0		 test	 eax, eax
  005e7	7d 0c		 jge	 SHORT $LN2@Py_ReadyTy

; 1796 :         Py_FatalError("Can't initialize call iter type");

  005e9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CA@KPPPNCLC@Can?8t?5initialize?5call?5iter?5type?$AA@
  005f0	e8 00 00 00 00	 call	 Py_FatalError
$LN2@Py_ReadyTy:

; 1797 : 
; 1798 :     if (PyType_Ready(&PySeqIter_Type) < 0)

  005f5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PySeqIter_Type
  005fc	e8 00 00 00 00	 call	 PyType_Ready
  00601	85 c0		 test	 eax, eax
  00603	7d 0c		 jge	 SHORT $LN1@Py_ReadyTy

; 1799 :         Py_FatalError("Can't initialize sequence iterator type");

  00605	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CI@KCGLHPFK@Can?8t?5initialize?5sequence?5iterat@
  0060c	e8 00 00 00 00	 call	 Py_FatalError
$LN1@Py_ReadyTy:

; 1800 : 
; 1801 : #ifdef WITH_PARALLEL
; 1802 :     InitializeCriticalSectionAndSpinCount(&stdout_cs, CS_SPINCOUNT);

  00611	ba 04 00 00 00	 mov	 edx, 4
  00616	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:stdout_cs
  0061d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_InitializeCriticalSectionAndSpinCount

; 1803 :     InitializeCriticalSectionAndSpinCount(&stderr_cs, CS_SPINCOUNT);

  00623	ba 04 00 00 00	 mov	 edx, 4
  00628	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:stderr_cs
  0062f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_InitializeCriticalSectionAndSpinCount

; 1804 : #endif
; 1805 : }

  00635	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00639	c3		 ret	 0
_Py_ReadyTypes ENDP
_TEXT	ENDS
PUBLIC	??_C@_1CK@ILJJDFCI@?$AAo?$AAp?$AA?9?$AA?$DO?$AA_?$AAo?$AAb?$AA_?$AAp?$AAr?$AAe?$AAv?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CK@JELMDLBK@?$AAo?$AAp?$AA?9?$AA?$DO?$AA_?$AAo?$AAb?$AA_?$AAn?$AAe?$AAx?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CK@NKEBHELJ@?$AAo?$AAp?$AA?9?$AA?$DO?$AAs?$AAr?$AAw?$AA_?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DG@JAKOKPNL@?$AAo?$AAp?$AA?9?$AA?$DO?$AAp?$AAx?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AA_?$AAN?$AAO?$AAT?$AA_?$AAP?$AAA?$AAR?$AAA?$AAL?$AAL?$AAE?$AAL?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DM@JPLHFCED@?$AAo?$AAp?$AA?9?$AA?$DO?$AAi?$AAs?$AA_?$AAp?$AAx?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AA_?$AAN?$AAO?$AAT?$AA_?$AAP?$AAA?$AAR?$AAA?$AAL?$AAL?$AAE?$AAL?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CG@KJDBNFLE@?$AAo?$AAp?$AA?9?$AA?$DO?$AAo?$AAb?$AA_?$AAr?$AAe?$AAf?$AAc?$AAn?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA1?$AA?$AA@ ; `string'
PUBLIC	_Py_VerifyObjectHead
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_VerifyObjectHead DD imagerel $LN10
	DD	imagerel $LN10+311
	DD	imagerel $unwind$_Py_VerifyObjectHead
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_VerifyObjectHead DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT ??_C@_1CK@ILJJDFCI@?$AAo?$AAp?$AA?9?$AA?$DO?$AA_?$AAo?$AAb?$AA_?$AAp?$AAr?$AAe?$AAv?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
CONST	SEGMENT
??_C@_1CK@ILJJDFCI@?$AAo?$AAp?$AA?9?$AA?$DO?$AA_?$AAo?$AAb?$AA_?$AAp?$AAr?$AAe?$AAv?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ DB 'o'
	DB	00H, 'p', 00H, '-', 00H, '>', 00H, '_', 00H, 'o', 00H, 'b', 00H
	DB	'_', 00H, 'p', 00H, 'r', 00H, 'e', 00H, 'v', 00H, ' ', 00H, '='
	DB	00H, '=', 00H, ' ', 00H, 'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@JELMDLBK@?$AAo?$AAp?$AA?9?$AA?$DO?$AA_?$AAo?$AAb?$AA_?$AAn?$AAe?$AAx?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
CONST	SEGMENT
??_C@_1CK@JELMDLBK@?$AAo?$AAp?$AA?9?$AA?$DO?$AA_?$AAo?$AAb?$AA_?$AAn?$AAe?$AAx?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ DB 'o'
	DB	00H, 'p', 00H, '-', 00H, '>', 00H, '_', 00H, 'o', 00H, 'b', 00H
	DB	'_', 00H, 'n', 00H, 'e', 00H, 'x', 00H, 't', 00H, ' ', 00H, '='
	DB	00H, '=', 00H, ' ', 00H, 'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@NKEBHELJ@?$AAo?$AAp?$AA?9?$AA?$DO?$AAs?$AAr?$AAw?$AA_?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
CONST	SEGMENT
??_C@_1CK@NKEBHELJ@?$AAo?$AAp?$AA?9?$AA?$DO?$AAs?$AAr?$AAw?$AA_?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ DB 'o'
	DB	00H, 'p', 00H, '-', 00H, '>', 00H, 's', 00H, 'r', 00H, 'w', 00H
	DB	'_', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'k', 00H, ' ', 00H, '='
	DB	00H, '=', 00H, ' ', 00H, 'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1DG@JAKOKPNL@?$AAo?$AAp?$AA?9?$AA?$DO?$AAp?$AAx?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AA_?$AAN?$AAO?$AAT?$AA_?$AAP?$AAA?$AAR?$AAA?$AAL?$AAL?$AAE?$AAL?$AA?$AA@
CONST	SEGMENT
??_C@_1DG@JAKOKPNL@?$AAo?$AAp?$AA?9?$AA?$DO?$AAp?$AAx?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AA_?$AAN?$AAO?$AAT?$AA_?$AAP?$AAA?$AAR?$AAA?$AAL?$AAL?$AAE?$AAL?$AA?$AA@ DB 'o'
	DB	00H, 'p', 00H, '-', 00H, '>', 00H, 'p', 00H, 'x', 00H, ' ', 00H
	DB	'=', 00H, '=', 00H, ' ', 00H, '_', 00H, 'P', 00H, 'y', 00H, '_'
	DB	00H, 'N', 00H, 'O', 00H, 'T', 00H, '_', 00H, 'P', 00H, 'A', 00H
	DB	'R', 00H, 'A', 00H, 'L', 00H, 'L', 00H, 'E', 00H, 'L', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1DM@JPLHFCED@?$AAo?$AAp?$AA?9?$AA?$DO?$AAi?$AAs?$AA_?$AAp?$AAx?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AA_?$AAN?$AAO?$AAT?$AA_?$AAP?$AAA?$AAR?$AAA?$AAL?$AAL?$AAE?$AAL?$AA?$AA@
CONST	SEGMENT
??_C@_1DM@JPLHFCED@?$AAo?$AAp?$AA?9?$AA?$DO?$AAi?$AAs?$AA_?$AAp?$AAx?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AA_?$AAN?$AAO?$AAT?$AA_?$AAP?$AAA?$AAR?$AAA?$AAL?$AAL?$AAE?$AAL?$AA?$AA@ DB 'o'
	DB	00H, 'p', 00H, '-', 00H, '>', 00H, 'i', 00H, 's', 00H, '_', 00H
	DB	'p', 00H, 'x', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '_'
	DB	00H, 'P', 00H, 'y', 00H, '_', 00H, 'N', 00H, 'O', 00H, 'T', 00H
	DB	'_', 00H, 'P', 00H, 'A', 00H, 'R', 00H, 'A', 00H, 'L', 00H, 'L'
	DB	00H, 'E', 00H, 'L', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@KJDBNFLE@?$AAo?$AAp?$AA?9?$AA?$DO?$AAo?$AAb?$AA_?$AAr?$AAe?$AAf?$AAc?$AAn?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA1?$AA?$AA@
CONST	SEGMENT
??_C@_1CG@KJDBNFLE@?$AAo?$AAp?$AA?9?$AA?$DO?$AAo?$AAb?$AA_?$AAr?$AAe?$AAf?$AAc?$AAn?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA1?$AA?$AA@ DB 'o'
	DB	00H, 'p', 00H, '-', 00H, '>', 00H, 'o', 00H, 'b', 00H, '_', 00H
	DB	'r', 00H, 'e', 00H, 'f', 00H, 'c', 00H, 'n', 00H, 't', 00H, ' '
	DB	00H, '=', 00H, '=', 00H, ' ', 00H, '1', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_VerifyObjectHead
_TEXT	SEGMENT
op$ = 48
_Py_VerifyObjectHead PROC				; COMDAT

; 1810 : {

$LN10:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1811 :     assert(Py_TYPE(op));

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  0000e	48 83 78 58 00	 cmp	 QWORD PTR [rax+88], 0
  00013	75 1c		 jne	 SHORT $LN3@Py_VerifyO
  00015	41 b8 13 07 00
	00		 mov	 r8d, 1811		; 00000713H
  0001b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CI@ONKHJAFP@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BI@GPFDFIDP@?$AAP?$AAy?$AA_?$AAT?$AAY?$AAP?$AAE?$AA?$CI?$AAo?$AAp?$AA?$CJ?$AA?$AA@
  00029	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0002f	33 c0		 xor	 eax, eax
$LN3@Py_VerifyO:

; 1812 :     assert(op->ob_refcnt == 1);

  00031	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  00036	48 83 78 50 01	 cmp	 QWORD PTR [rax+80], 1
  0003b	74 1c		 je	 SHORT $LN4@Py_VerifyO
  0003d	41 b8 14 07 00
	00		 mov	 r8d, 1812		; 00000714H
  00043	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CI@ONKHJAFP@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  0004a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@KJDBNFLE@?$AAo?$AAp?$AA?9?$AA?$DO?$AAo?$AAb?$AA_?$AAr?$AAe?$AAf?$AAc?$AAn?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA1?$AA?$AA@
  00051	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00057	33 c0		 xor	 eax, eax
$LN4@Py_VerifyO:

; 1813 :     assert(op->is_px    == _Py_NOT_PARALLEL);

  00059	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  0005e	48 b9 78 56 ef
	be 34 12 ad de	 mov	 rcx, -2401243008567650696 ; dead1234beef5678H
  00068	48 39 08	 cmp	 QWORD PTR [rax], rcx
  0006b	74 1c		 je	 SHORT $LN5@Py_VerifyO
  0006d	41 b8 15 07 00
	00		 mov	 r8d, 1813		; 00000715H
  00073	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CI@ONKHJAFP@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  0007a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DM@JPLHFCED@?$AAo?$AAp?$AA?9?$AA?$DO?$AAi?$AAs?$AA_?$AAp?$AAx?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AA_?$AAN?$AAO?$AAT?$AA_?$AAP?$AAA?$AAR?$AAA?$AAL?$AAL?$AAE?$AAL?$AA?$AA@
  00081	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00087	33 c0		 xor	 eax, eax
$LN5@Py_VerifyO:

; 1814 :     assert(op->px       == _Py_NOT_PARALLEL);

  00089	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  0008e	48 b9 78 56 ef
	be 34 12 ad de	 mov	 rcx, -2401243008567650696 ; dead1234beef5678H
  00098	48 39 48 08	 cmp	 QWORD PTR [rax+8], rcx
  0009c	74 1c		 je	 SHORT $LN6@Py_VerifyO
  0009e	41 b8 16 07 00
	00		 mov	 r8d, 1814		; 00000716H
  000a4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CI@ONKHJAFP@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  000ab	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DG@JAKOKPNL@?$AAo?$AAp?$AA?9?$AA?$DO?$AAp?$AAx?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AA_?$AAN?$AAO?$AAT?$AA_?$AAP?$AAA?$AAR?$AAA?$AAL?$AAL?$AAE?$AAL?$AA?$AA@
  000b2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000b8	33 c0		 xor	 eax, eax
$LN6@Py_VerifyO:

; 1815 :     assert(op->srw_lock == NULL);

  000ba	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  000bf	48 83 78 28 00	 cmp	 QWORD PTR [rax+40], 0
  000c4	74 1c		 je	 SHORT $LN7@Py_VerifyO
  000c6	41 b8 17 07 00
	00		 mov	 r8d, 1815		; 00000717H
  000cc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CI@ONKHJAFP@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  000d3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@NKEBHELJ@?$AAo?$AAp?$AA?9?$AA?$DO?$AAs?$AAr?$AAw?$AA_?$AAl?$AAo?$AAc?$AAk?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
  000da	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000e0	33 c0		 xor	 eax, eax
$LN7@Py_VerifyO:

; 1816 : #ifndef Py_TRACE_REFS
; 1817 :     assert(op->_ob_next == _Py_NOT_PARALLEL);
; 1818 :     assert(op->_ob_prev == _Py_NOT_PARALLEL);
; 1819 : #else
; 1820 :     assert(op->_ob_next == NULL);

  000e2	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  000e7	48 83 78 40 00	 cmp	 QWORD PTR [rax+64], 0
  000ec	74 1c		 je	 SHORT $LN8@Py_VerifyO
  000ee	41 b8 1c 07 00
	00		 mov	 r8d, 1820		; 0000071cH
  000f4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CI@ONKHJAFP@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  000fb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@JELMDLBK@?$AAo?$AAp?$AA?9?$AA?$DO?$AA_?$AAo?$AAb?$AA_?$AAn?$AAe?$AAx?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
  00102	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00108	33 c0		 xor	 eax, eax
$LN8@Py_VerifyO:

; 1821 :     assert(op->_ob_prev == NULL);

  0010a	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  0010f	48 83 78 48 00	 cmp	 QWORD PTR [rax+72], 0
  00114	74 1c		 je	 SHORT $LN9@Py_VerifyO
  00116	41 b8 1d 07 00
	00		 mov	 r8d, 1821		; 0000071dH
  0011c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CI@ONKHJAFP@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00123	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@ILJJDFCI@?$AAo?$AAp?$AA?9?$AA?$DO?$AA_?$AAo?$AAb?$AA_?$AAp?$AAr?$AAe?$AAv?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
  0012a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00130	33 c0		 xor	 eax, eax
$LN9@Py_VerifyO:

; 1822 : #endif
; 1823 : }

  00132	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00136	c3		 ret	 0
_Py_VerifyObjectHead ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BB@KJCLBMBN@_Py_NewReference?$AA@	; `string'
EXTRN	_Px_NewReference:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_NewReference DD imagerel $LN6
	DD	imagerel $LN6+139
	DD	imagerel $unwind$_Py_NewReference
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_NewReference DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0BB@KJCLBMBN@_Py_NewReference?$AA@
CONST	SEGMENT
??_C@_0BB@KJCLBMBN@_Py_NewReference?$AA@ DB '_Py_NewReference', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_NewReference
_TEXT	SEGMENT
op$ = 64
_Py_NewReference PROC					; COMDAT

; 1832 : {

$LN6:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1833 :     Px_RETURN_VOID(_Px_NewReference(op))

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	74 0c		 je	 SHORT $LN1@Py_NewRefe
  00012	48 8b 4c 24 40	 mov	 rcx, QWORD PTR op$[rsp]
  00017	e8 00 00 00 00	 call	 _Px_NewReference
  0001c	eb 68		 jmp	 SHORT $LN2@Py_NewRefe
$LN1@Py_NewRefe:

; 1834 :     Py_GUARD_OBJ(op);

  0001e	c7 44 24 20 20
	00 00 00	 mov	 DWORD PTR [rsp+32], 32	; 00000020H
  00026	4c 8b 4c 24 40	 mov	 r9, QWORD PTR op$[rsp]
  0002b	41 b8 2a 07 00
	00		 mov	 r8d, 1834		; 0000072aH
  00031	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@LBNADOJM@?4?4?2Objects?2object?4c?$AA@
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@KJCLBMBN@_Py_NewReference?$AA@
  0003f	e8 00 00 00 00	 call	 _PyParallel_Guard

; 1835 :     _Py_INC_REFTOTAL;

  00044	e8 00 00 00 00	 call	 _Py_PXCTX
  00049	85 c0		 test	 eax, eax
  0004b	74 02		 je	 SHORT $LN4@Py_NewRefe
  0004d	eb 11		 jmp	 SHORT $LN5@Py_NewRefe
$LN4@Py_NewRefe:
  0004f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00056	48 ff c0	 inc	 rax
  00059	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN5@Py_NewRefe:

; 1836 :     op->ob_refcnt = 1;

  00060	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  00065	48 c7 40 50 01
	00 00 00	 mov	 QWORD PTR [rax+80], 1

; 1837 :     _Py_VerifyObjectHead(op);

  0006d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR op$[rsp]
  00072	e8 00 00 00 00	 call	 _Py_VerifyObjectHead

; 1838 :     _Py_AddToAllObjects(op, 1);

  00077	ba 01 00 00 00	 mov	 edx, 1
  0007c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR op$[rsp]
  00081	e8 00 00 00 00	 call	 _Py_AddToAllObjects
$LN2@Py_NewRefe:

; 1839 :     _Py_INC_TPALLOCS(op);
; 1840 : }

  00086	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0008a	c3		 ret	 0
_Py_NewReference ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BF@IKEKMBED@UNREF?5invalid?5object?$AA@	; `string'
PUBLIC	??_C@_0BK@BNAJEPEP@?$CK?5op?9?$DO_ob_next?9?$DO_ob_prev?6?$AA@ ; `string'
PUBLIC	??_C@_0BK@PPDAJNAG@?$CK?5op?9?$DO_ob_prev?9?$DO_ob_next?6?$AA@ ; `string'
PUBLIC	??_C@_05PLDCEHJJ@?$CK?5ob?6?$AA@		; `string'
PUBLIC	??_C@_0BG@PBNCELDL@UNREF?5negative?5refcnt?$AA@	; `string'
PUBLIC	??_C@_0BE@KNCIGFOA@_Py_ForgetReference?$AA@	; `string'
PUBLIC	_Py_ForgetReference
EXTRN	_Px_ForgetReference:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_ForgetReference DD imagerel $LN7
	DD	imagerel $LN7+364
	DD	imagerel $unwind$_Py_ForgetReference
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_ForgetReference DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0BF@IKEKMBED@UNREF?5invalid?5object?$AA@
CONST	SEGMENT
??_C@_0BF@IKEKMBED@UNREF?5invalid?5object?$AA@ DB 'UNREF invalid object', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@BNAJEPEP@?$CK?5op?9?$DO_ob_next?9?$DO_ob_prev?6?$AA@
CONST	SEGMENT
??_C@_0BK@BNAJEPEP@?$CK?5op?9?$DO_ob_next?9?$DO_ob_prev?6?$AA@ DB '* op->'
	DB	'_ob_next->_ob_prev', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@PPDAJNAG@?$CK?5op?9?$DO_ob_prev?9?$DO_ob_next?6?$AA@
CONST	SEGMENT
??_C@_0BK@PPDAJNAG@?$CK?5op?9?$DO_ob_prev?9?$DO_ob_next?6?$AA@ DB '* op->'
	DB	'_ob_prev->_ob_next', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05PLDCEHJJ@?$CK?5ob?6?$AA@
CONST	SEGMENT
??_C@_05PLDCEHJJ@?$CK?5ob?6?$AA@ DB '* ob', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@PBNCELDL@UNREF?5negative?5refcnt?$AA@
CONST	SEGMENT
??_C@_0BG@PBNCELDL@UNREF?5negative?5refcnt?$AA@ DB 'UNREF negative refcnt'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@KNCIGFOA@_Py_ForgetReference?$AA@
CONST	SEGMENT
??_C@_0BE@KNCIGFOA@_Py_ForgetReference?$AA@ DB '_Py_ForgetReference', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_ForgetReference
_TEXT	SEGMENT
op$ = 64
_Py_ForgetReference PROC				; COMDAT

; 1844 : {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1845 : #ifdef SLOW_UNREF_CHECK
; 1846 :     register PyObject *p;
; 1847 : #endif
; 1848 :     Px_RETURN_VOID(_Px_ForgetReference(op))

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	74 0f		 je	 SHORT $LN4@Py_ForgetR
  00012	48 8b 4c 24 40	 mov	 rcx, QWORD PTR op$[rsp]
  00017	e8 00 00 00 00	 call	 _Px_ForgetReference
  0001c	e9 46 01 00 00	 jmp	 $LN5@Py_ForgetR
$LN4@Py_ForgetR:

; 1849 :     Py_GUARD_OBJ(op);

  00021	c7 44 24 20 20
	00 00 00	 mov	 DWORD PTR [rsp+32], 32	; 00000020H
  00029	4c 8b 4c 24 40	 mov	 r9, QWORD PTR op$[rsp]
  0002e	41 b8 39 07 00
	00		 mov	 r8d, 1849		; 00000739H
  00034	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@LBNADOJM@?4?4?2Objects?2object?4c?$AA@
  0003b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@KNCIGFOA@_Py_ForgetReference?$AA@
  00042	e8 00 00 00 00	 call	 _PyParallel_Guard

; 1850 :     if (op->ob_refcnt < 0)

  00047	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  0004c	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00051	7d 0c		 jge	 SHORT $LN3@Py_ForgetR

; 1851 :         Py_FatalError("UNREF negative refcnt");

  00053	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@PBNCELDL@UNREF?5negative?5refcnt?$AA@
  0005a	e8 00 00 00 00	 call	 Py_FatalError
$LN3@Py_ForgetR:

; 1852 :     if (op == &refchain ||
; 1853 :         op->_ob_prev->_ob_next != op || op->_ob_next->_ob_prev != op) {

  0005f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:refchain
  00066	48 39 44 24 40	 cmp	 QWORD PTR op$[rsp], rax
  0006b	74 2c		 je	 SHORT $LN1@Py_ForgetR
  0006d	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  00072	48 8b 40 48	 mov	 rax, QWORD PTR [rax+72]
  00076	48 8b 4c 24 40	 mov	 rcx, QWORD PTR op$[rsp]
  0007b	48 39 48 40	 cmp	 QWORD PTR [rax+64], rcx
  0007f	75 18		 jne	 SHORT $LN1@Py_ForgetR
  00081	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  00086	48 8b 40 40	 mov	 rax, QWORD PTR [rax+64]
  0008a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR op$[rsp]
  0008f	48 39 48 48	 cmp	 QWORD PTR [rax+72], rcx
  00093	0f 84 88 00 00
	00		 je	 $LN2@Py_ForgetR
$LN1@Py_ForgetR:

; 1854 :         fprintf(stderr, "* ob\n");

  00099	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  0009f	48 83 c0 60	 add	 rax, 96			; 00000060H
  000a3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05PLDCEHJJ@?$CK?5ob?6?$AA@
  000aa	48 8b c8	 mov	 rcx, rax
  000ad	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fprintf

; 1855 :         _PyObject_Dump(op);

  000b3	48 8b 4c 24 40	 mov	 rcx, QWORD PTR op$[rsp]
  000b8	e8 00 00 00 00	 call	 _PyObject_Dump

; 1856 :         fprintf(stderr, "* op->_ob_prev->_ob_next\n");

  000bd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  000c3	48 83 c0 60	 add	 rax, 96			; 00000060H
  000c7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@PPDAJNAG@?$CK?5op?9?$DO_ob_prev?9?$DO_ob_next?6?$AA@
  000ce	48 8b c8	 mov	 rcx, rax
  000d1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fprintf

; 1857 :         _PyObject_Dump(op->_ob_prev->_ob_next);

  000d7	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  000dc	48 8b 40 48	 mov	 rax, QWORD PTR [rax+72]
  000e0	48 8b 48 40	 mov	 rcx, QWORD PTR [rax+64]
  000e4	e8 00 00 00 00	 call	 _PyObject_Dump

; 1858 :         fprintf(stderr, "* op->_ob_next->_ob_prev\n");

  000e9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  000ef	48 83 c0 60	 add	 rax, 96			; 00000060H
  000f3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@BNAJEPEP@?$CK?5op?9?$DO_ob_next?9?$DO_ob_prev?6?$AA@
  000fa	48 8b c8	 mov	 rcx, rax
  000fd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fprintf

; 1859 :         _PyObject_Dump(op->_ob_next->_ob_prev);

  00103	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  00108	48 8b 40 40	 mov	 rax, QWORD PTR [rax+64]
  0010c	48 8b 48 48	 mov	 rcx, QWORD PTR [rax+72]
  00110	e8 00 00 00 00	 call	 _PyObject_Dump

; 1860 :         Py_FatalError("UNREF invalid object");

  00115	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@IKEKMBED@UNREF?5invalid?5object?$AA@
  0011c	e8 00 00 00 00	 call	 Py_FatalError
$LN2@Py_ForgetR:

; 1861 :     }
; 1862 : #ifdef SLOW_UNREF_CHECK
; 1863 :     for (p = refchain._ob_next; p != &refchain; p = p->_ob_next) {
; 1864 :         if (p == op)
; 1865 :             break;
; 1866 :     }
; 1867 :     if (p == &refchain) /* Not found */
; 1868 :         Py_FatalError("UNREF unknown object");
; 1869 : #endif
; 1870 :     op->_ob_next->_ob_prev = op->_ob_prev;

  00121	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  00126	48 8b 40 40	 mov	 rax, QWORD PTR [rax+64]
  0012a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR op$[rsp]
  0012f	48 8b 49 48	 mov	 rcx, QWORD PTR [rcx+72]
  00133	48 89 48 48	 mov	 QWORD PTR [rax+72], rcx

; 1871 :     op->_ob_prev->_ob_next = op->_ob_next;

  00137	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  0013c	48 8b 40 48	 mov	 rax, QWORD PTR [rax+72]
  00140	48 8b 4c 24 40	 mov	 rcx, QWORD PTR op$[rsp]
  00145	48 8b 49 40	 mov	 rcx, QWORD PTR [rcx+64]
  00149	48 89 48 40	 mov	 QWORD PTR [rax+64], rcx

; 1872 :     op->_ob_next = op->_ob_prev = NULL;

  0014d	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  00152	48 c7 40 48 00
	00 00 00	 mov	 QWORD PTR [rax+72], 0
  0015a	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  0015f	48 c7 40 40 00
	00 00 00	 mov	 QWORD PTR [rax+64], 0
$LN5@Py_ForgetR:

; 1873 :     _Py_INC_TPFREES(op);
; 1874 : }

  00167	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0016b	c3		 ret	 0
_Py_ForgetReference ENDP
_TEXT	ENDS
PUBLIC	??_C@_0M@ICFEBEBI@_Py_Dealloc?$AA@		; `string'
EXTRN	_Px_Dealloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_Dealloc DD imagerel $LN9
	DD	imagerel $LN9+168
	DD	imagerel $unwind$_Py_Dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_Dealloc DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0M@ICFEBEBI@_Py_Dealloc?$AA@
CONST	SEGMENT
??_C@_0M@ICFEBEBI@_Py_Dealloc?$AA@ DB '_Py_Dealloc', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_Dealloc
_TEXT	SEGMENT
dealloc$ = 48
op$ = 80
_Py_Dealloc PROC					; COMDAT

; 1878 : {

$LN9:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H
$LN6@Py_Dealloc:

; 1879 :     destructor dealloc;
; 1880 :     PyPx_GUARD_OBJ(op);

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	74 28		 je	 SHORT $LN3@Py_Dealloc
  00012	c7 44 24 20 40
	00 00 00	 mov	 DWORD PTR [rsp+32], 64	; 00000040H
  0001a	4c 8b 4c 24 50	 mov	 r9, QWORD PTR op$[rsp]
  0001f	41 b8 58 07 00
	00		 mov	 r8d, 1880		; 00000758H
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@LBNADOJM@?4?4?2Objects?2object?4c?$AA@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@ICFEBEBI@_Py_Dealloc?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_Guard
  00038	eb 26		 jmp	 SHORT $LN2@Py_Dealloc
$LN3@Py_Dealloc:
  0003a	c7 44 24 20 20
	00 00 00	 mov	 DWORD PTR [rsp+32], 32	; 00000020H
  00042	4c 8b 4c 24 50	 mov	 r9, QWORD PTR op$[rsp]
  00047	41 b8 58 07 00
	00		 mov	 r8d, 1880		; 00000758H
  0004d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@LBNADOJM@?4?4?2Objects?2object?4c?$AA@
  00054	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@ICFEBEBI@_Py_Dealloc?$AA@
  0005b	e8 00 00 00 00	 call	 _PyParallel_Guard
$LN2@Py_Dealloc:
  00060	33 c0		 xor	 eax, eax
  00062	85 c0		 test	 eax, eax
  00064	75 a3		 jne	 SHORT $LN6@Py_Dealloc

; 1881 :     Px_RETURN_VOID(_Px_Dealloc(op))

  00066	e8 00 00 00 00	 call	 _Py_PXCTX
  0006b	85 c0		 test	 eax, eax
  0006d	74 0c		 je	 SHORT $LN1@Py_Dealloc
  0006f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  00074	e8 00 00 00 00	 call	 _Px_Dealloc
  00079	eb 28		 jmp	 SHORT $LN7@Py_Dealloc
$LN1@Py_Dealloc:

; 1882 :     dealloc = Py_TYPE(op)->tp_dealloc;

  0007b	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00080	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00084	48 8b 80 88 00
	00 00		 mov	 rax, QWORD PTR [rax+136]
  0008b	48 89 44 24 30	 mov	 QWORD PTR dealloc$[rsp], rax

; 1883 :     _Py_ForgetReference(op);

  00090	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  00095	e8 00 00 00 00	 call	 _Py_ForgetReference

; 1884 :     (*dealloc)(op);

  0009a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  0009f	ff 54 24 30	 call	 QWORD PTR dealloc$[rsp]
$LN7@Py_Dealloc:

; 1885 : }

  000a3	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000a7	c3		 ret	 0
_Py_Dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_09NKCABEHL@?$CFp?5?$FL?$CFId?$FN?5?$AA@	; `string'
PUBLIC	??_C@_0BE@PPDHHCAO@Remaining?5objects?3?6?$AA@	; `string'
PUBLIC	??_C@_0BE@OLFBCEBK@_Py_PrintReferences?$AA@	; `string'
PUBLIC	_Py_PrintReferences
EXTRN	__imp_putc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_PrintReferences DD imagerel $LN8
	DD	imagerel $LN8+188
	DD	imagerel $unwind$_Py_PrintReferences
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_PrintReferences DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_09NKCABEHL@?$CFp?5?$FL?$CFId?$FN?5?$AA@
CONST	SEGMENT
??_C@_09NKCABEHL@?$CFp?5?$FL?$CFId?$FN?5?$AA@ DB '%p [%Id] ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@PPDHHCAO@Remaining?5objects?3?6?$AA@
CONST	SEGMENT
??_C@_0BE@PPDHHCAO@Remaining?5objects?3?6?$AA@ DB 'Remaining objects:', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@OLFBCEBK@_Py_PrintReferences?$AA@
CONST	SEGMENT
??_C@_0BE@OLFBCEBK@_Py_PrintReferences?$AA@ DB '_Py_PrintReferences', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_PrintReferences
_TEXT	SEGMENT
op$ = 32
fp$ = 64
_Py_PrintReferences PROC				; COMDAT

; 1892 : {

$LN8:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1893 :     PyObject *op;
; 1894 :     Py_GUARD

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	74 1c		 je	 SHORT $LN5@Py_PrintRe
  00012	45 33 c9	 xor	 r9d, r9d
  00015	41 b8 66 07 00
	00		 mov	 r8d, 1894		; 00000766H
  0001b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@LBNADOJM@?4?4?2Objects?2object?4c?$AA@
  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@OLFBCEBK@_Py_PrintReferences?$AA@
  00029	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN5@Py_PrintRe:

; 1895 :     fprintf(fp, "Remaining objects:\n");

  0002e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@PPDHHCAO@Remaining?5objects?3?6?$AA@
  00035	48 8b 4c 24 40	 mov	 rcx, QWORD PTR fp$[rsp]
  0003a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fprintf

; 1896 :     for (op = refchain._ob_next; op != &refchain; op = op->_ob_next) {

  00040	48 8b 05 40 00
	00 00		 mov	 rax, QWORD PTR refchain+64
  00047	48 89 44 24 20	 mov	 QWORD PTR op$[rsp], rax
  0004c	eb 0e		 jmp	 SHORT $LN4@Py_PrintRe
$LN3@Py_PrintRe:
  0004e	48 8b 44 24 20	 mov	 rax, QWORD PTR op$[rsp]
  00053	48 8b 40 40	 mov	 rax, QWORD PTR [rax+64]
  00057	48 89 44 24 20	 mov	 QWORD PTR op$[rsp], rax
$LN4@Py_PrintRe:
  0005c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:refchain
  00063	48 39 44 24 20	 cmp	 QWORD PTR op$[rsp], rax
  00068	74 4d		 je	 SHORT $LN2@Py_PrintRe

; 1897 :         fprintf(fp, "%p [%" PY_FORMAT_SIZE_T "d] ", op, op->ob_refcnt);

  0006a	48 8b 44 24 20	 mov	 rax, QWORD PTR op$[rsp]
  0006f	4c 8b 48 50	 mov	 r9, QWORD PTR [rax+80]
  00073	4c 8b 44 24 20	 mov	 r8, QWORD PTR op$[rsp]
  00078	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09NKCABEHL@?$CFp?5?$FL?$CFId?$FN?5?$AA@
  0007f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR fp$[rsp]
  00084	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fprintf

; 1898 :         if (PyObject_Print(op, fp, 0) != 0)

  0008a	45 33 c0	 xor	 r8d, r8d
  0008d	48 8b 54 24 40	 mov	 rdx, QWORD PTR fp$[rsp]
  00092	48 8b 4c 24 20	 mov	 rcx, QWORD PTR op$[rsp]
  00097	e8 00 00 00 00	 call	 PyObject_Print
  0009c	85 c0		 test	 eax, eax
  0009e	74 05		 je	 SHORT $LN1@Py_PrintRe

; 1899 :             PyErr_Clear();

  000a0	e8 00 00 00 00	 call	 PyErr_Clear
$LN1@Py_PrintRe:

; 1900 :         putc('\n', fp);

  000a5	48 8b 54 24 40	 mov	 rdx, QWORD PTR fp$[rsp]
  000aa	b9 0a 00 00 00	 mov	 ecx, 10
  000af	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_putc

; 1901 :     }

  000b5	eb 97		 jmp	 SHORT $LN3@Py_PrintRe
$LN2@Py_PrintRe:

; 1902 : }

  000b7	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000bb	c3		 ret	 0
_Py_PrintReferences ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@HGNABBHJ@?$CFp?5?$FL?$CFId?$FN?5?$CFs?6?$AA@ ; `string'
PUBLIC	??_C@_0BN@GBJDEODA@Remaining?5object?5addresses?3?6?$AA@ ; `string'
PUBLIC	??_C@_0BM@NJEPNIGE@_Py_PrintReferenceAddresses?$AA@ ; `string'
PUBLIC	_Py_PrintReferenceAddresses
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_PrintReferenceAddresses DD imagerel $LN7
	DD	imagerel $LN7+163
	DD	imagerel $unwind$_Py_PrintReferenceAddresses
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_PrintReferenceAddresses DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0N@HGNABBHJ@?$CFp?5?$FL?$CFId?$FN?5?$CFs?6?$AA@
CONST	SEGMENT
??_C@_0N@HGNABBHJ@?$CFp?5?$FL?$CFId?$FN?5?$CFs?6?$AA@ DB '%p [%Id] %s', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@GBJDEODA@Remaining?5object?5addresses?3?6?$AA@
CONST	SEGMENT
??_C@_0BN@GBJDEODA@Remaining?5object?5addresses?3?6?$AA@ DB 'Remaining ob'
	DB	'ject addresses:', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@NJEPNIGE@_Py_PrintReferenceAddresses?$AA@
CONST	SEGMENT
??_C@_0BM@NJEPNIGE@_Py_PrintReferenceAddresses?$AA@ DB '_Py_PrintReferenc'
	DB	'eAddresses', 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_PrintReferenceAddresses
_TEXT	SEGMENT
op$ = 48
fp$ = 80
_Py_PrintReferenceAddresses PROC			; COMDAT

; 1909 : {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1910 :     PyObject *op;
; 1911 :     Py_GUARD

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	74 1c		 je	 SHORT $LN4@Py_PrintRe@2
  00012	45 33 c9	 xor	 r9d, r9d
  00015	41 b8 77 07 00
	00		 mov	 r8d, 1911		; 00000777H
  0001b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@LBNADOJM@?4?4?2Objects?2object?4c?$AA@
  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BM@NJEPNIGE@_Py_PrintReferenceAddresses?$AA@
  00029	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN4@Py_PrintRe@2:

; 1912 :     fprintf(fp, "Remaining object addresses:\n");

  0002e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@GBJDEODA@Remaining?5object?5addresses?3?6?$AA@
  00035	48 8b 4c 24 50	 mov	 rcx, QWORD PTR fp$[rsp]
  0003a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fprintf

; 1913 :     for (op = refchain._ob_next; op != &refchain; op = op->_ob_next)

  00040	48 8b 05 40 00
	00 00		 mov	 rax, QWORD PTR refchain+64
  00047	48 89 44 24 30	 mov	 QWORD PTR op$[rsp], rax
  0004c	eb 0e		 jmp	 SHORT $LN3@Py_PrintRe@2
$LN2@Py_PrintRe@2:
  0004e	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  00053	48 8b 40 40	 mov	 rax, QWORD PTR [rax+64]
  00057	48 89 44 24 30	 mov	 QWORD PTR op$[rsp], rax
$LN3@Py_PrintRe@2:
  0005c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:refchain
  00063	48 39 44 24 30	 cmp	 QWORD PTR op$[rsp], rax
  00068	74 34		 je	 SHORT $LN1@Py_PrintRe@2

; 1914 :         fprintf(fp, "%p [%" PY_FORMAT_SIZE_T "d] %s\n", op,
; 1915 :             op->ob_refcnt, Py_TYPE(op)->tp_name);

  0006a	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  0006f	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00073	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00077	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0007c	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  00081	4c 8b 48 50	 mov	 r9, QWORD PTR [rax+80]
  00085	4c 8b 44 24 30	 mov	 r8, QWORD PTR op$[rsp]
  0008a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@HGNABBHJ@?$CFp?5?$FL?$CFId?$FN?5?$CFs?6?$AA@
  00091	48 8b 4c 24 50	 mov	 rcx, QWORD PTR fp$[rsp]
  00096	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fprintf
  0009c	eb b0		 jmp	 SHORT $LN2@Py_PrintRe@2
$LN1@Py_PrintRe@2:

; 1916 : }

  0009e	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000a2	c3		 ret	 0
_Py_PrintReferenceAddresses ENDP
_TEXT	ENDS
PUBLIC	??_C@_03LCJPFKJE@i?$HMO?$AA@			; `string'
PUBLIC	??_C@_0P@KJBKBJGC@_Py_GetObjects?$AA@		; `string'
PUBLIC	_Py_GetObjects
EXTRN	PyList_Append:PROC
EXTRN	PyList_New:PROC
EXTRN	PyArg_ParseTuple:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_GetObjects DD imagerel $LN17
	DD	imagerel $LN17+459
	DD	imagerel $unwind$_Py_GetObjects
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_GetObjects DD 010e01H
	DD	0a20eH
xdata	ENDS
;	COMDAT ??_C@_03LCJPFKJE@i?$HMO?$AA@
CONST	SEGMENT
??_C@_03LCJPFKJE@i?$HMO?$AA@ DB 'i|O', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@KJBKBJGC@_Py_GetObjects?$AA@
CONST	SEGMENT
??_C@_0P@KJBKBJGC@_Py_GetObjects?$AA@ DB '_Py_GetObjects', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_GetObjects
_TEXT	SEGMENT
res$ = 48
n$ = 56
i$ = 60
op$ = 64
t$ = 72
self$ = 96
args$ = 104
_Py_GetObjects PROC					; COMDAT

; 1920 : {

$LN17:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 1921 :     int i, n;
; 1922 :     PyObject *t = NULL;

  0000e	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR t$[rsp], 0

; 1923 :     PyObject *res, *op;
; 1924 :     Py_GUARD

  00017	e8 00 00 00 00	 call	 _Py_PXCTX
  0001c	85 c0		 test	 eax, eax
  0001e	74 1c		 je	 SHORT $LN14@Py_GetObje
  00020	45 33 c9	 xor	 r9d, r9d
  00023	41 b8 84 07 00
	00		 mov	 r8d, 1924		; 00000784H
  00029	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@LBNADOJM@?4?4?2Objects?2object?4c?$AA@
  00030	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@KJBKBJGC@_Py_GetObjects?$AA@
  00037	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN14@Py_GetObje:

; 1925 :     if (self)

  0003c	48 83 7c 24 60
	00		 cmp	 QWORD PTR self$[rsp], 0
  00042	74 26		 je	 SHORT $LN13@Py_GetObje

; 1926 :         Py_GUARD_OBJ(self);

  00044	c7 44 24 20 20
	00 00 00	 mov	 DWORD PTR [rsp+32], 32	; 00000020H
  0004c	4c 8b 4c 24 60	 mov	 r9, QWORD PTR self$[rsp]
  00051	41 b8 86 07 00
	00		 mov	 r8d, 1926		; 00000786H
  00057	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@LBNADOJM@?4?4?2Objects?2object?4c?$AA@
  0005e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@KJBKBJGC@_Py_GetObjects?$AA@
  00065	e8 00 00 00 00	 call	 _PyParallel_Guard
$LN13@Py_GetObje:

; 1927 : 
; 1928 :     if (args)

  0006a	48 83 7c 24 68
	00		 cmp	 QWORD PTR args$[rsp], 0
  00070	74 26		 je	 SHORT $LN12@Py_GetObje

; 1929 :         Py_GUARD_OBJ(args);

  00072	c7 44 24 20 20
	00 00 00	 mov	 DWORD PTR [rsp+32], 32	; 00000020H
  0007a	4c 8b 4c 24 68	 mov	 r9, QWORD PTR args$[rsp]
  0007f	41 b8 89 07 00
	00		 mov	 r8d, 1929		; 00000789H
  00085	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@LBNADOJM@?4?4?2Objects?2object?4c?$AA@
  0008c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@KJBKBJGC@_Py_GetObjects?$AA@
  00093	e8 00 00 00 00	 call	 _PyParallel_Guard
$LN12@Py_GetObje:

; 1930 : 
; 1931 :     if (!PyArg_ParseTuple(args, "i|O", &n, &t))

  00098	4c 8d 4c 24 48	 lea	 r9, QWORD PTR t$[rsp]
  0009d	4c 8d 44 24 38	 lea	 r8, QWORD PTR n$[rsp]
  000a2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03LCJPFKJE@i?$HMO?$AA@
  000a9	48 8b 4c 24 68	 mov	 rcx, QWORD PTR args$[rsp]
  000ae	e8 00 00 00 00	 call	 PyArg_ParseTuple
  000b3	85 c0		 test	 eax, eax
  000b5	75 07		 jne	 SHORT $LN11@Py_GetObje

; 1932 :         return NULL;

  000b7	33 c0		 xor	 eax, eax
  000b9	e9 08 01 00 00	 jmp	 $LN15@Py_GetObje
$LN11@Py_GetObje:

; 1933 :     op = refchain._ob_next;

  000be	48 8b 05 40 00
	00 00		 mov	 rax, QWORD PTR refchain+64
  000c5	48 89 44 24 40	 mov	 QWORD PTR op$[rsp], rax

; 1934 :     res = PyList_New(0);

  000ca	33 c9		 xor	 ecx, ecx
  000cc	e8 00 00 00 00	 call	 PyList_New
  000d1	48 89 44 24 30	 mov	 QWORD PTR res$[rsp], rax

; 1935 :     if (res == NULL)

  000d6	48 83 7c 24 30
	00		 cmp	 QWORD PTR res$[rsp], 0
  000dc	75 07		 jne	 SHORT $LN10@Py_GetObje

; 1936 :         return NULL;

  000de	33 c0		 xor	 eax, eax
  000e0	e9 e1 00 00 00	 jmp	 $LN15@Py_GetObje
$LN10@Py_GetObje:

; 1937 :     for (i = 0; (n == 0 || i < n) && op != &refchain; i++) {

  000e5	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  000ed	eb 0a		 jmp	 SHORT $LN9@Py_GetObje
$LN8@Py_GetObje:
  000ef	8b 44 24 3c	 mov	 eax, DWORD PTR i$[rsp]
  000f3	ff c0		 inc	 eax
  000f5	89 44 24 3c	 mov	 DWORD PTR i$[rsp], eax
$LN9@Py_GetObje:
  000f9	83 7c 24 38 00	 cmp	 DWORD PTR n$[rsp], 0
  000fe	74 0e		 je	 SHORT $LN6@Py_GetObje
  00100	8b 44 24 38	 mov	 eax, DWORD PTR n$[rsp]
  00104	39 44 24 3c	 cmp	 DWORD PTR i$[rsp], eax
  00108	0f 8d b3 00 00
	00		 jge	 $LN7@Py_GetObje
$LN6@Py_GetObje:
  0010e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:refchain
  00115	48 39 44 24 40	 cmp	 QWORD PTR op$[rsp], rax
  0011a	0f 84 a1 00 00
	00		 je	 $LN7@Py_GetObje
$LN5@Py_GetObje:

; 1938 :         while (op == self || op == args || op == res || op == t ||
; 1939 :                (t != NULL && Py_TYPE(op) != (PyTypeObject *) t)) {

  00120	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00125	48 39 44 24 40	 cmp	 QWORD PTR op$[rsp], rax
  0012a	74 3c		 je	 SHORT $LN3@Py_GetObje
  0012c	48 8b 44 24 68	 mov	 rax, QWORD PTR args$[rsp]
  00131	48 39 44 24 40	 cmp	 QWORD PTR op$[rsp], rax
  00136	74 30		 je	 SHORT $LN3@Py_GetObje
  00138	48 8b 44 24 30	 mov	 rax, QWORD PTR res$[rsp]
  0013d	48 39 44 24 40	 cmp	 QWORD PTR op$[rsp], rax
  00142	74 24		 je	 SHORT $LN3@Py_GetObje
  00144	48 8b 44 24 48	 mov	 rax, QWORD PTR t$[rsp]
  00149	48 39 44 24 40	 cmp	 QWORD PTR op$[rsp], rax
  0014e	74 18		 je	 SHORT $LN3@Py_GetObje
  00150	48 83 7c 24 48
	00		 cmp	 QWORD PTR t$[rsp], 0
  00156	74 35		 je	 SHORT $LN4@Py_GetObje
  00158	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  0015d	48 8b 4c 24 48	 mov	 rcx, QWORD PTR t$[rsp]
  00162	48 39 48 58	 cmp	 QWORD PTR [rax+88], rcx
  00166	74 25		 je	 SHORT $LN4@Py_GetObje
$LN3@Py_GetObje:

; 1940 :             op = op->_ob_next;

  00168	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  0016d	48 8b 40 40	 mov	 rax, QWORD PTR [rax+64]
  00171	48 89 44 24 40	 mov	 QWORD PTR op$[rsp], rax

; 1941 :             if (op == &refchain)

  00176	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:refchain
  0017d	48 39 44 24 40	 cmp	 QWORD PTR op$[rsp], rax
  00182	75 07		 jne	 SHORT $LN2@Py_GetObje

; 1942 :                 return res;

  00184	48 8b 44 24 30	 mov	 rax, QWORD PTR res$[rsp]
  00189	eb 3b		 jmp	 SHORT $LN15@Py_GetObje
$LN2@Py_GetObje:

; 1943 :         }

  0018b	eb 93		 jmp	 SHORT $LN5@Py_GetObje
$LN4@Py_GetObje:

; 1944 :         if (PyList_Append(res, op) < 0) {

  0018d	48 8b 54 24 40	 mov	 rdx, QWORD PTR op$[rsp]
  00192	48 8b 4c 24 30	 mov	 rcx, QWORD PTR res$[rsp]
  00197	e8 00 00 00 00	 call	 PyList_Append
  0019c	85 c0		 test	 eax, eax
  0019e	7d 0e		 jge	 SHORT $LN1@Py_GetObje

; 1945 :             Py_DECREF(res);

  001a0	48 8b 4c 24 30	 mov	 rcx, QWORD PTR res$[rsp]
  001a5	e8 00 00 00 00	 call	 _Py_DecRef

; 1946 :             return NULL;

  001aa	33 c0		 xor	 eax, eax
  001ac	eb 18		 jmp	 SHORT $LN15@Py_GetObje
$LN1@Py_GetObje:

; 1947 :         }
; 1948 :         op = op->_ob_next;

  001ae	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  001b3	48 8b 40 40	 mov	 rax, QWORD PTR [rax+64]
  001b7	48 89 44 24 40	 mov	 QWORD PTR op$[rsp], rax

; 1949 :     }

  001bc	e9 2e ff ff ff	 jmp	 $LN8@Py_GetObje
$LN7@Py_GetObje:

; 1950 :     return res;

  001c1	48 8b 44 24 30	 mov	 rax, QWORD PTR res$[rsp]
$LN15@Py_GetObje:

; 1951 : }

  001c6	48 83 c4 58	 add	 rsp, 88			; 00000058H
  001ca	c3		 ret	 0
_Py_GetObjects ENDP
_TEXT	ENDS
PUBLIC	PyMem_Malloc
EXTRN	_PyMem_DebugMalloc:PROC
EXTRN	_PxMem_Malloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyMem_Malloc DD imagerel $LN6
	DD	imagerel $LN6+81
	DD	imagerel $unwind$PyMem_Malloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyMem_Malloc DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyMem_Malloc
_TEXT	SEGMENT
tv74 = 32
nbytes$ = 64
PyMem_Malloc PROC					; COMDAT

; 1966 : {

$LN6:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1967 :     Px_RETURN(_PxMem_Malloc(nbytes))

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	74 0c		 je	 SHORT $LN1@PyMem_Mall
  00012	48 8b 4c 24 40	 mov	 rcx, QWORD PTR nbytes$[rsp]
  00017	e8 00 00 00 00	 call	 _PxMem_Malloc
  0001c	eb 2e		 jmp	 SHORT $LN2@PyMem_Mall
$LN1@PyMem_Mall:

; 1968 :     return PyMem_MALLOC(nbytes);

  0001e	e8 00 00 00 00	 call	 _Py_PXCTX
  00023	85 c0		 test	 eax, eax
  00025	74 11		 je	 SHORT $LN4@PyMem_Mall
  00027	48 8b 4c 24 40	 mov	 rcx, QWORD PTR nbytes$[rsp]
  0002c	e8 00 00 00 00	 call	 _PxMem_Malloc
  00031	48 89 44 24 20	 mov	 QWORD PTR tv74[rsp], rax
  00036	eb 0f		 jmp	 SHORT $LN5@PyMem_Mall
$LN4@PyMem_Mall:
  00038	48 8b 4c 24 40	 mov	 rcx, QWORD PTR nbytes$[rsp]
  0003d	e8 00 00 00 00	 call	 _PyMem_DebugMalloc
  00042	48 89 44 24 20	 mov	 QWORD PTR tv74[rsp], rax
$LN5@PyMem_Mall:
  00047	48 8b 44 24 20	 mov	 rax, QWORD PTR tv74[rsp]
$LN2@PyMem_Mall:

; 1969 : }

  0004c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00050	c3		 ret	 0
PyMem_Malloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@BPNPJLEC@PyMem_Realloc?$AA@		; `string'
PUBLIC	PyMem_Realloc
EXTRN	_PyMem_DebugRealloc:PROC
EXTRN	_PxMem_Realloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyMem_Realloc DD imagerel $LN6
	DD	imagerel $LN6+139
	DD	imagerel $unwind$PyMem_Realloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyMem_Realloc DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_0O@BPNPJLEC@PyMem_Realloc?$AA@
CONST	SEGMENT
??_C@_0O@BPNPJLEC@PyMem_Realloc?$AA@ DB 'PyMem_Realloc', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyMem_Realloc
_TEXT	SEGMENT
tv82 = 48
p$ = 80
nbytes$ = 88
PyMem_Realloc PROC					; COMDAT

; 1973 : {

$LN6:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1974 :     Px_RETURN(_PxMem_Realloc(p, nbytes))

  0000e	e8 00 00 00 00	 call	 _Py_PXCTX
  00013	85 c0		 test	 eax, eax
  00015	74 11		 je	 SHORT $LN1@PyMem_Real
  00017	48 8b 54 24 58	 mov	 rdx, QWORD PTR nbytes$[rsp]
  0001c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR p$[rsp]
  00021	e8 00 00 00 00	 call	 _PxMem_Realloc
  00026	eb 5e		 jmp	 SHORT $LN2@PyMem_Real
$LN1@PyMem_Real:

; 1975 :     Py_GUARD_MEM(p);

  00028	c7 44 24 20 00
	02 00 00	 mov	 DWORD PTR [rsp+32], 512	; 00000200H
  00030	4c 8b 4c 24 50	 mov	 r9, QWORD PTR p$[rsp]
  00035	41 b8 b7 07 00
	00		 mov	 r8d, 1975		; 000007b7H
  0003b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@LBNADOJM@?4?4?2Objects?2object?4c?$AA@
  00042	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@BPNPJLEC@PyMem_Realloc?$AA@
  00049	e8 00 00 00 00	 call	 _PyParallel_Guard

; 1976 :     return PyMem_REALLOC(p, nbytes);

  0004e	e8 00 00 00 00	 call	 _Py_PXCTX
  00053	85 c0		 test	 eax, eax
  00055	74 16		 je	 SHORT $LN4@PyMem_Real
  00057	48 8b 54 24 58	 mov	 rdx, QWORD PTR nbytes$[rsp]
  0005c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR p$[rsp]
  00061	e8 00 00 00 00	 call	 _PxMem_Realloc
  00066	48 89 44 24 30	 mov	 QWORD PTR tv82[rsp], rax
  0006b	eb 14		 jmp	 SHORT $LN5@PyMem_Real
$LN4@PyMem_Real:
  0006d	48 8b 54 24 58	 mov	 rdx, QWORD PTR nbytes$[rsp]
  00072	48 8b 4c 24 50	 mov	 rcx, QWORD PTR p$[rsp]
  00077	e8 00 00 00 00	 call	 _PyMem_DebugRealloc
  0007c	48 89 44 24 30	 mov	 QWORD PTR tv82[rsp], rax
$LN5@PyMem_Real:
  00081	48 8b 44 24 30	 mov	 rax, QWORD PTR tv82[rsp]
$LN2@PyMem_Real:

; 1977 : }

  00086	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0008a	c3		 ret	 0
PyMem_Realloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@GOGLDDK@PyMem_Free?$AA@		; `string'
PUBLIC	PyMem_Free
EXTRN	_PyMem_DebugFree:PROC
EXTRN	_PxMem_Free:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyMem_Free DD imagerel $LN7
	DD	imagerel $LN7+128
	DD	imagerel $unwind$PyMem_Free
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyMem_Free DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0L@GOGLDDK@PyMem_Free?$AA@
CONST	SEGMENT
??_C@_0L@GOGLDDK@PyMem_Free?$AA@ DB 'PyMem_Free', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyMem_Free
_TEXT	SEGMENT
tv77 = 48
p$ = 80
PyMem_Free PROC						; COMDAT

; 1981 : {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1982 :     Px_RETURN_VOID(_PxMem_Free(p))

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	74 0c		 je	 SHORT $LN2@PyMem_Free
  00012	48 8b 4c 24 50	 mov	 rcx, QWORD PTR p$[rsp]
  00017	e8 00 00 00 00	 call	 _PxMem_Free
  0001c	eb 5d		 jmp	 SHORT $LN3@PyMem_Free
$LN2@PyMem_Free:

; 1983 :     if (p)

  0001e	48 83 7c 24 50
	00		 cmp	 QWORD PTR p$[rsp], 0
  00024	74 26		 je	 SHORT $LN1@PyMem_Free

; 1984 :         Py_GUARD_MEM(p);

  00026	c7 44 24 20 00
	02 00 00	 mov	 DWORD PTR [rsp+32], 512	; 00000200H
  0002e	4c 8b 4c 24 50	 mov	 r9, QWORD PTR p$[rsp]
  00033	41 b8 c0 07 00
	00		 mov	 r8d, 1984		; 000007c0H
  00039	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@LBNADOJM@?4?4?2Objects?2object?4c?$AA@
  00040	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@GOGLDDK@PyMem_Free?$AA@
  00047	e8 00 00 00 00	 call	 _PyParallel_Guard
$LN1@PyMem_Free:

; 1985 :     PyMem_FREE(p);

  0004c	e8 00 00 00 00	 call	 _Py_PXCTX
  00051	85 c0		 test	 eax, eax
  00053	74 14		 je	 SHORT $LN5@PyMem_Free
  00055	48 8b 4c 24 50	 mov	 rcx, QWORD PTR p$[rsp]
  0005a	e8 00 00 00 00	 call	 _PxMem_Free
  0005f	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv77[rsp], 0
  00067	eb 12		 jmp	 SHORT $LN6@PyMem_Free
$LN5@PyMem_Free:
  00069	48 8b 4c 24 50	 mov	 rcx, QWORD PTR p$[rsp]
  0006e	e8 00 00 00 00	 call	 _PyMem_DebugFree
  00073	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv77[rsp], 0
$LN6@PyMem_Free:
$LN3@PyMem_Free:

; 1986 : }

  0007b	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0007f	c3		 ret	 0
PyMem_Free ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BJ@BLFENJDH@_PyObject_DebugTypeStats?$AA@ ; `string'
PUBLIC	_PyObject_DebugTypeStats
EXTRN	_PyTuple_DebugMallocStats:PROC
EXTRN	_PySet_DebugMallocStats:PROC
EXTRN	_PyMethod_DebugMallocStats:PROC
EXTRN	_PyList_DebugMallocStats:PROC
EXTRN	_PyFrame_DebugMallocStats:PROC
EXTRN	_PyFloat_DebugMallocStats:PROC
EXTRN	_PyDict_DebugMallocStats:PROC
EXTRN	_PyCFunction_DebugMallocStats:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyObject_DebugTypeStats DD imagerel $LN4
	DD	imagerel $LN4+131
	DD	imagerel $unwind$_PyObject_DebugTypeStats
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyObject_DebugTypeStats DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT ??_C@_0BJ@BLFENJDH@_PyObject_DebugTypeStats?$AA@
CONST	SEGMENT
??_C@_0BJ@BLFENJDH@_PyObject_DebugTypeStats?$AA@ DB '_PyObject_DebugTypeS'
	DB	'tats', 00H					; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PyObject_DebugTypeStats
_TEXT	SEGMENT
out$ = 48
_PyObject_DebugTypeStats PROC				; COMDAT

; 1990 : {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1991 :     Py_GUARD

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	74 1c		 je	 SHORT $LN1@PyObject_D@3
  00012	45 33 c9	 xor	 r9d, r9d
  00015	41 b8 c7 07 00
	00		 mov	 r8d, 1991		; 000007c7H
  0001b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@LBNADOJM@?4?4?2Objects?2object?4c?$AA@
  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@BLFENJDH@_PyObject_DebugTypeStats?$AA@
  00029	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN1@PyObject_D@3:

; 1992 :     _PyCFunction_DebugMallocStats(out);

  0002e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR out$[rsp]
  00033	e8 00 00 00 00	 call	 _PyCFunction_DebugMallocStats

; 1993 :     _PyDict_DebugMallocStats(out);

  00038	48 8b 4c 24 30	 mov	 rcx, QWORD PTR out$[rsp]
  0003d	e8 00 00 00 00	 call	 _PyDict_DebugMallocStats

; 1994 :     _PyFloat_DebugMallocStats(out);

  00042	48 8b 4c 24 30	 mov	 rcx, QWORD PTR out$[rsp]
  00047	e8 00 00 00 00	 call	 _PyFloat_DebugMallocStats

; 1995 :     _PyFrame_DebugMallocStats(out);

  0004c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR out$[rsp]
  00051	e8 00 00 00 00	 call	 _PyFrame_DebugMallocStats

; 1996 :     _PyList_DebugMallocStats(out);

  00056	48 8b 4c 24 30	 mov	 rcx, QWORD PTR out$[rsp]
  0005b	e8 00 00 00 00	 call	 _PyList_DebugMallocStats

; 1997 :     _PyMethod_DebugMallocStats(out);

  00060	48 8b 4c 24 30	 mov	 rcx, QWORD PTR out$[rsp]
  00065	e8 00 00 00 00	 call	 _PyMethod_DebugMallocStats

; 1998 :     _PySet_DebugMallocStats(out);

  0006a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR out$[rsp]
  0006f	e8 00 00 00 00	 call	 _PySet_DebugMallocStats

; 1999 :     _PyTuple_DebugMallocStats(out);

  00074	48 8b 4c 24 30	 mov	 rcx, QWORD PTR out$[rsp]
  00079	e8 00 00 00 00	 call	 _PyTuple_DebugMallocStats

; 2000 : }

  0007e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00082	c3		 ret	 0
_PyObject_DebugTypeStats ENDP
_TEXT	ENDS
PUBLIC	??_C@_07EMAABEDE@Py_Repr?$AA@			; `string'
PUBLIC	??_C@_0N@BJMJKJAA@Py_ReprEnter?$AA@		; `string'
PUBLIC	Py_ReprEnter
EXTRN	PyDict_SetItemString:PROC
EXTRN	PyDict_GetItemString:PROC
EXTRN	PyThreadState_GetDict:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$Py_ReprEnter DD imagerel $LN15
	DD	imagerel $LN15+321
	DD	imagerel $unwind$Py_ReprEnter
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Py_ReprEnter DD 010901H
	DD	0a209H
xdata	ENDS
;	COMDAT ??_C@_07EMAABEDE@Py_Repr?$AA@
CONST	SEGMENT
??_C@_07EMAABEDE@Py_Repr?$AA@ DB 'Py_Repr', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@BJMJKJAA@Py_ReprEnter?$AA@
CONST	SEGMENT
??_C@_0N@BJMJKJAA@Py_ReprEnter?$AA@ DB 'Py_ReprEnter', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT Py_ReprEnter
_TEXT	SEGMENT
i$ = 48
dict$ = 56
list$ = 64
obj$ = 96
Py_ReprEnter PROC					; COMDAT

; 2018 : {

$LN15:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 58	 sub	 rsp, 88			; 00000058H
$LN12@Py_ReprEnt:

; 2019 :     PyObject *dict;
; 2020 :     PyObject *list;
; 2021 :     Py_ssize_t i;
; 2022 : 
; 2023 :     PyPx_GUARD_OBJ(obj);

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	74 28		 je	 SHORT $LN9@Py_ReprEnt
  00012	c7 44 24 20 40
	00 00 00	 mov	 DWORD PTR [rsp+32], 64	; 00000040H
  0001a	4c 8b 4c 24 60	 mov	 r9, QWORD PTR obj$[rsp]
  0001f	41 b8 e7 07 00
	00		 mov	 r8d, 2023		; 000007e7H
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@LBNADOJM@?4?4?2Objects?2object?4c?$AA@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BJMJKJAA@Py_ReprEnter?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_Guard
  00038	eb 26		 jmp	 SHORT $LN8@Py_ReprEnt
$LN9@Py_ReprEnt:
  0003a	c7 44 24 20 20
	00 00 00	 mov	 DWORD PTR [rsp+32], 32	; 00000020H
  00042	4c 8b 4c 24 60	 mov	 r9, QWORD PTR obj$[rsp]
  00047	41 b8 e7 07 00
	00		 mov	 r8d, 2023		; 000007e7H
  0004d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@LBNADOJM@?4?4?2Objects?2object?4c?$AA@
  00054	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BJMJKJAA@Py_ReprEnter?$AA@
  0005b	e8 00 00 00 00	 call	 _PyParallel_Guard
$LN8@Py_ReprEnt:
  00060	33 c0		 xor	 eax, eax
  00062	85 c0		 test	 eax, eax
  00064	75 a3		 jne	 SHORT $LN12@Py_ReprEnt

; 2024 : 
; 2025 :     dict = PyThreadState_GetDict();

  00066	e8 00 00 00 00	 call	 PyThreadState_GetDict
  0006b	48 89 44 24 38	 mov	 QWORD PTR dict$[rsp], rax

; 2026 :     if (dict == NULL)

  00070	48 83 7c 24 38
	00		 cmp	 QWORD PTR dict$[rsp], 0
  00076	75 07		 jne	 SHORT $LN7@Py_ReprEnt

; 2027 :         return 0;

  00078	33 c0		 xor	 eax, eax
  0007a	e9 bd 00 00 00	 jmp	 $LN13@Py_ReprEnt
$LN7@Py_ReprEnt:

; 2028 :     list = PyDict_GetItemString(dict, KEY);

  0007f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07EMAABEDE@Py_Repr?$AA@
  00086	48 8b 4c 24 38	 mov	 rcx, QWORD PTR dict$[rsp]
  0008b	e8 00 00 00 00	 call	 PyDict_GetItemString
  00090	48 89 44 24 40	 mov	 QWORD PTR list$[rsp], rax

; 2029 :     if (list == NULL) {

  00095	48 83 7c 24 40
	00		 cmp	 QWORD PTR list$[rsp], 0
  0009b	75 49		 jne	 SHORT $LN6@Py_ReprEnt

; 2030 :         list = PyList_New(0);

  0009d	33 c9		 xor	 ecx, ecx
  0009f	e8 00 00 00 00	 call	 PyList_New
  000a4	48 89 44 24 40	 mov	 QWORD PTR list$[rsp], rax

; 2031 :         if (list == NULL)

  000a9	48 83 7c 24 40
	00		 cmp	 QWORD PTR list$[rsp], 0
  000af	75 0a		 jne	 SHORT $LN5@Py_ReprEnt

; 2032 :             return -1;

  000b1	b8 ff ff ff ff	 mov	 eax, -1
  000b6	e9 81 00 00 00	 jmp	 $LN13@Py_ReprEnt
$LN5@Py_ReprEnt:

; 2033 :         if (PyDict_SetItemString(dict, KEY, list) < 0)

  000bb	4c 8b 44 24 40	 mov	 r8, QWORD PTR list$[rsp]
  000c0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07EMAABEDE@Py_Repr?$AA@
  000c7	48 8b 4c 24 38	 mov	 rcx, QWORD PTR dict$[rsp]
  000cc	e8 00 00 00 00	 call	 PyDict_SetItemString
  000d1	85 c0		 test	 eax, eax
  000d3	7d 07		 jge	 SHORT $LN4@Py_ReprEnt

; 2034 :             return -1;

  000d5	b8 ff ff ff ff	 mov	 eax, -1
  000da	eb 60		 jmp	 SHORT $LN13@Py_ReprEnt
$LN4@Py_ReprEnt:

; 2035 :         Py_DECREF(list);

  000dc	48 8b 4c 24 40	 mov	 rcx, QWORD PTR list$[rsp]
  000e1	e8 00 00 00 00	 call	 _Py_DecRef
$LN6@Py_ReprEnt:

; 2036 :     }
; 2037 :     i = PyList_GET_SIZE(list);

  000e6	48 8b 44 24 40	 mov	 rax, QWORD PTR list$[rsp]
  000eb	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000ef	48 89 44 24 30	 mov	 QWORD PTR i$[rsp], rax
$LN3@Py_ReprEnt:

; 2038 :     while (--i >= 0) {

  000f4	48 8b 44 24 30	 mov	 rax, QWORD PTR i$[rsp]
  000f9	48 ff c8	 dec	 rax
  000fc	48 89 44 24 30	 mov	 QWORD PTR i$[rsp], rax
  00101	48 83 7c 24 30
	00		 cmp	 QWORD PTR i$[rsp], 0
  00107	7c 22		 jl	 SHORT $LN2@Py_ReprEnt

; 2039 :         if (PyList_GET_ITEM(list, i) == obj)

  00109	48 8b 44 24 40	 mov	 rax, QWORD PTR list$[rsp]
  0010e	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00112	48 8b 4c 24 30	 mov	 rcx, QWORD PTR i$[rsp]
  00117	48 8b 54 24 60	 mov	 rdx, QWORD PTR obj$[rsp]
  0011c	48 39 14 c8	 cmp	 QWORD PTR [rax+rcx*8], rdx
  00120	75 07		 jne	 SHORT $LN1@Py_ReprEnt

; 2040 :             return 1;

  00122	b8 01 00 00 00	 mov	 eax, 1
  00127	eb 13		 jmp	 SHORT $LN13@Py_ReprEnt
$LN1@Py_ReprEnt:

; 2041 :     }

  00129	eb c9		 jmp	 SHORT $LN3@Py_ReprEnt
$LN2@Py_ReprEnt:

; 2042 :     PyList_Append(list, obj);

  0012b	48 8b 54 24 60	 mov	 rdx, QWORD PTR obj$[rsp]
  00130	48 8b 4c 24 40	 mov	 rcx, QWORD PTR list$[rsp]
  00135	e8 00 00 00 00	 call	 PyList_Append

; 2043 :     return 0;

  0013a	33 c0		 xor	 eax, eax
$LN13@Py_ReprEnt:

; 2044 : }

  0013c	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00140	c3		 ret	 0
Py_ReprEnter ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@DFDCPHML@Py_ReprLeave?$AA@		; `string'
PUBLIC	Py_ReprLeave
EXTRN	PyList_SetSlice:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$Py_ReprLeave DD imagerel $LN14
	DD	imagerel $LN14+279
	DD	imagerel $unwind$Py_ReprLeave
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Py_ReprLeave DD 010901H
	DD	0a209H
xdata	ENDS
;	COMDAT ??_C@_0N@DFDCPHML@Py_ReprLeave?$AA@
CONST	SEGMENT
??_C@_0N@DFDCPHML@Py_ReprLeave?$AA@ DB 'Py_ReprLeave', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT Py_ReprLeave
_TEXT	SEGMENT
i$ = 48
dict$ = 56
list$ = 64
obj$ = 96
Py_ReprLeave PROC					; COMDAT

; 2048 : {

$LN14:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 58	 sub	 rsp, 88			; 00000058H
$LN11@Py_ReprLea:

; 2049 :     PyObject *dict;
; 2050 :     PyObject *list;
; 2051 :     Py_ssize_t i;
; 2052 : 
; 2053 :     PyPx_GUARD_OBJ(obj);

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	74 28		 je	 SHORT $LN8@Py_ReprLea
  00012	c7 44 24 20 40
	00 00 00	 mov	 DWORD PTR [rsp+32], 64	; 00000040H
  0001a	4c 8b 4c 24 60	 mov	 r9, QWORD PTR obj$[rsp]
  0001f	41 b8 05 08 00
	00		 mov	 r8d, 2053		; 00000805H
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@LBNADOJM@?4?4?2Objects?2object?4c?$AA@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@DFDCPHML@Py_ReprLeave?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_Guard
  00038	eb 26		 jmp	 SHORT $LN7@Py_ReprLea
$LN8@Py_ReprLea:
  0003a	c7 44 24 20 20
	00 00 00	 mov	 DWORD PTR [rsp+32], 32	; 00000020H
  00042	4c 8b 4c 24 60	 mov	 r9, QWORD PTR obj$[rsp]
  00047	41 b8 05 08 00
	00		 mov	 r8d, 2053		; 00000805H
  0004d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@LBNADOJM@?4?4?2Objects?2object?4c?$AA@
  00054	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@DFDCPHML@Py_ReprLeave?$AA@
  0005b	e8 00 00 00 00	 call	 _PyParallel_Guard
$LN7@Py_ReprLea:
  00060	33 c0		 xor	 eax, eax
  00062	85 c0		 test	 eax, eax
  00064	75 a3		 jne	 SHORT $LN11@Py_ReprLea

; 2054 : 
; 2055 :     dict = PyThreadState_GetDict();

  00066	e8 00 00 00 00	 call	 PyThreadState_GetDict
  0006b	48 89 44 24 38	 mov	 QWORD PTR dict$[rsp], rax

; 2056 :     if (dict == NULL)

  00070	48 83 7c 24 38
	00		 cmp	 QWORD PTR dict$[rsp], 0
  00076	75 05		 jne	 SHORT $LN6@Py_ReprLea

; 2057 :         return;

  00078	e9 95 00 00 00	 jmp	 $LN12@Py_ReprLea
$LN6@Py_ReprLea:

; 2058 :     list = PyDict_GetItemString(dict, KEY);

  0007d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07EMAABEDE@Py_Repr?$AA@
  00084	48 8b 4c 24 38	 mov	 rcx, QWORD PTR dict$[rsp]
  00089	e8 00 00 00 00	 call	 PyDict_GetItemString
  0008e	48 89 44 24 40	 mov	 QWORD PTR list$[rsp], rax

; 2059 :     if (list == NULL || !PyList_Check(list))

  00093	48 83 7c 24 40
	00		 cmp	 QWORD PTR list$[rsp], 0
  00099	74 18		 je	 SHORT $LN4@Py_ReprLea
  0009b	48 8b 44 24 40	 mov	 rax, QWORD PTR list$[rsp]
  000a0	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000a4	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000aa	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  000af	85 c0		 test	 eax, eax
  000b1	75 02		 jne	 SHORT $LN5@Py_ReprLea
$LN4@Py_ReprLea:

; 2060 :         return;

  000b3	eb 5d		 jmp	 SHORT $LN12@Py_ReprLea
$LN5@Py_ReprLea:

; 2061 :     i = PyList_GET_SIZE(list);

  000b5	48 8b 44 24 40	 mov	 rax, QWORD PTR list$[rsp]
  000ba	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000be	48 89 44 24 30	 mov	 QWORD PTR i$[rsp], rax
$LN3@Py_ReprLea:

; 2062 :     /* Count backwards because we always expect obj to be list[-1] */
; 2063 :     while (--i >= 0) {

  000c3	48 8b 44 24 30	 mov	 rax, QWORD PTR i$[rsp]
  000c8	48 ff c8	 dec	 rax
  000cb	48 89 44 24 30	 mov	 QWORD PTR i$[rsp], rax
  000d0	48 83 7c 24 30
	00		 cmp	 QWORD PTR i$[rsp], 0
  000d6	7c 3a		 jl	 SHORT $LN2@Py_ReprLea

; 2064 :         if (PyList_GET_ITEM(list, i) == obj) {

  000d8	48 8b 44 24 40	 mov	 rax, QWORD PTR list$[rsp]
  000dd	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  000e1	48 8b 4c 24 30	 mov	 rcx, QWORD PTR i$[rsp]
  000e6	48 8b 54 24 60	 mov	 rdx, QWORD PTR obj$[rsp]
  000eb	48 39 14 c8	 cmp	 QWORD PTR [rax+rcx*8], rdx
  000ef	75 1f		 jne	 SHORT $LN1@Py_ReprLea

; 2065 :             PyList_SetSlice(list, i, i + 1, NULL);

  000f1	48 8b 44 24 30	 mov	 rax, QWORD PTR i$[rsp]
  000f6	48 ff c0	 inc	 rax
  000f9	45 33 c9	 xor	 r9d, r9d
  000fc	4c 8b c0	 mov	 r8, rax
  000ff	48 8b 54 24 30	 mov	 rdx, QWORD PTR i$[rsp]
  00104	48 8b 4c 24 40	 mov	 rcx, QWORD PTR list$[rsp]
  00109	e8 00 00 00 00	 call	 PyList_SetSlice

; 2066 :             break;

  0010e	eb 02		 jmp	 SHORT $LN2@Py_ReprLea
$LN1@Py_ReprLea:

; 2067 :         }
; 2068 :     }

  00110	eb b1		 jmp	 SHORT $LN3@Py_ReprLea
$LN2@Py_ReprLea:
$LN12@Py_ReprLea:

; 2069 : }

  00112	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00116	c3		 ret	 0
Py_ReprLeave ENDP
_TEXT	ENDS
PUBLIC	??_C@_1CG@BBINLCNB@?$AAo?$AAp?$AA?9?$AA?$DO?$AAo?$AAb?$AA_?$AAr?$AAe?$AAf?$AAc?$AAn?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_1GE@NGKJHEDJ@?$AA_?$AAP?$AAy?$AA_?$AAA?$AAS?$AA_?$AAG?$AAC?$AA?$CI?$AAo?$AAp?$AA?$CJ?$AA?9?$AA?$DO?$AAg?$AAc?$AA?4?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA_?$AAP?$AAy@ ; `string'
PUBLIC	??_C@_1CG@JONAAHCD@?$AAP?$AAy?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA_?$AAI?$AAS?$AA_?$AAG?$AAC?$AA?$CI?$AAo?$AAp?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_0BI@OOFABKDM@_PyTrash_deposit_object?$AA@	; `string'
PUBLIC	_PyTrash_deposit_object
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyTrash_deposit_object DD imagerel $LN20
	DD	imagerel $LN20+566
	DD	imagerel $unwind$_PyTrash_deposit_object
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyTrash_deposit_object DD 010901H
	DD	0a209H
xdata	ENDS
;	COMDAT ??_C@_1CG@BBINLCNB@?$AAo?$AAp?$AA?9?$AA?$DO?$AAo?$AAb?$AA_?$AAr?$AAe?$AAf?$AAc?$AAn?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1CG@BBINLCNB@?$AAo?$AAp?$AA?9?$AA?$DO?$AAo?$AAb?$AA_?$AAr?$AAe?$AAf?$AAc?$AAn?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@ DB 'o'
	DB	00H, 'p', 00H, '-', 00H, '>', 00H, 'o', 00H, 'b', 00H, '_', 00H
	DB	'r', 00H, 'e', 00H, 'f', 00H, 'c', 00H, 'n', 00H, 't', 00H, ' '
	DB	00H, '=', 00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1GE@NGKJHEDJ@?$AA_?$AAP?$AAy?$AA_?$AAA?$AAS?$AA_?$AAG?$AAC?$AA?$CI?$AAo?$AAp?$AA?$CJ?$AA?9?$AA?$DO?$AAg?$AAc?$AA?4?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA_?$AAP?$AAy@
CONST	SEGMENT
??_C@_1GE@NGKJHEDJ@?$AA_?$AAP?$AAy?$AA_?$AAA?$AAS?$AA_?$AAG?$AAC?$AA?$CI?$AAo?$AAp?$AA?$CJ?$AA?9?$AA?$DO?$AAg?$AAc?$AA?4?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA_?$AAP?$AAy@ DB '_'
	DB	00H, 'P', 00H, 'y', 00H, '_', 00H, 'A', 00H, 'S', 00H, '_', 00H
	DB	'G', 00H, 'C', 00H, '(', 00H, 'o', 00H, 'p', 00H, ')', 00H, '-'
	DB	00H, '>', 00H, 'g', 00H, 'c', 00H, '.', 00H, 'g', 00H, 'c', 00H
	DB	'_', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 's', 00H, ' ', 00H, '='
	DB	00H, '=', 00H, ' ', 00H, '_', 00H, 'P', 00H, 'y', 00H, 'G', 00H
	DB	'C', 00H, '_', 00H, 'R', 00H, 'E', 00H, 'F', 00H, 'S', 00H, '_'
	DB	00H, 'U', 00H, 'N', 00H, 'T', 00H, 'R', 00H, 'A', 00H, 'C', 00H
	DB	'K', 00H, 'E', 00H, 'D', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@JONAAHCD@?$AAP?$AAy?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA_?$AAI?$AAS?$AA_?$AAG?$AAC?$AA?$CI?$AAo?$AAp?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CG@JONAAHCD@?$AAP?$AAy?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA_?$AAI?$AAS?$AA_?$AAG?$AAC?$AA?$CI?$AAo?$AAp?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'O', 00H, 'b', 00H, 'j', 00H, 'e', 00H, 'c', 00H
	DB	't', 00H, '_', 00H, 'I', 00H, 'S', 00H, '_', 00H, 'G', 00H, 'C'
	DB	00H, '(', 00H, 'o', 00H, 'p', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@OOFABKDM@_PyTrash_deposit_object?$AA@
CONST	SEGMENT
??_C@_0BI@OOFABKDM@_PyTrash_deposit_object?$AA@ DB '_PyTrash_deposit_obje'
	DB	'ct', 00H					; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PyTrash_deposit_object
_TEXT	SEGMENT
tv132 = 48
tv88 = 52
tv86 = 56
tv130 = 60
tv146 = 64
tv167 = 72
op$ = 96
_PyTrash_deposit_object PROC				; COMDAT

; 2087 : {

$LN20:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 2088 :     Py_GUARD

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	74 1c		 je	 SHORT $LN1@PyTrash_de
  00012	45 33 c9	 xor	 r9d, r9d
  00015	41 b8 28 08 00
	00		 mov	 r8d, 2088		; 00000828H
  0001b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@LBNADOJM@?4?4?2Objects?2object?4c?$AA@
  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@OOFABKDM@_PyTrash_deposit_object?$AA@
  00029	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN1@PyTrash_de:

; 2089 :     Py_GUARD_OBJ(op);

  0002e	c7 44 24 20 20
	00 00 00	 mov	 DWORD PTR [rsp+32], 32	; 00000020H
  00036	4c 8b 4c 24 60	 mov	 r9, QWORD PTR op$[rsp]
  0003b	41 b8 29 08 00
	00		 mov	 r8d, 2089		; 00000829H
  00041	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@LBNADOJM@?4?4?2Objects?2object?4c?$AA@
  00048	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@OOFABKDM@_PyTrash_deposit_object?$AA@
  0004f	e8 00 00 00 00	 call	 _PyParallel_Guard

; 2090 :     assert(PyObject_IS_GC(op));

  00054	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0005c	4c 8b 4c 24 60	 mov	 r9, QWORD PTR op$[rsp]
  00061	41 b8 2a 08 00
	00		 mov	 r8d, 2090		; 0000082aH
  00067	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@LBNADOJM@?4?4?2Objects?2object?4c?$AA@
  0006e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@OOFABKDM@_PyTrash_deposit_object?$AA@
  00075	e8 00 00 00 00	 call	 _PyParallel_Guard
  0007a	85 c0		 test	 eax, eax
  0007c	74 0d		 je	 SHORT $LN11@PyTrash_de
  0007e	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
  00086	e9 91 00 00 00	 jmp	 $LN12@PyTrash_de
$LN11@PyTrash_de:
  0008b	e8 00 00 00 00	 call	 _Py_PXCTX
  00090	85 c0		 test	 eax, eax
  00092	74 0a		 je	 SHORT $LN6@PyTrash_de
  00094	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR tv88[rsp], 0
  0009c	eb 32		 jmp	 SHORT $LN7@PyTrash_de
$LN6@PyTrash_de:
  0009e	48 8b 44 24 60	 mov	 rax, QWORD PTR op$[rsp]
  000a3	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000a7	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000ad	25 00 40 00 00	 and	 eax, 16384		; 00004000H
  000b2	85 c0		 test	 eax, eax
  000b4	74 0a		 je	 SHORT $LN4@PyTrash_de
  000b6	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR tv86[rsp], 1
  000be	eb 08		 jmp	 SHORT $LN5@PyTrash_de
$LN4@PyTrash_de:
  000c0	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv86[rsp], 0
$LN5@PyTrash_de:
  000c8	8b 44 24 38	 mov	 eax, DWORD PTR tv86[rsp]
  000cc	89 44 24 34	 mov	 DWORD PTR tv88[rsp], eax
$LN7@PyTrash_de:
  000d0	83 7c 24 34 00	 cmp	 DWORD PTR tv88[rsp], 0
  000d5	74 35		 je	 SHORT $LN9@PyTrash_de
  000d7	48 8b 44 24 60	 mov	 rax, QWORD PTR op$[rsp]
  000dc	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000e0	48 83 b8 a0 01
	00 00 00	 cmp	 QWORD PTR [rax+416], 0
  000e8	74 18		 je	 SHORT $LN8@PyTrash_de
  000ea	48 8b 44 24 60	 mov	 rax, QWORD PTR op$[rsp]
  000ef	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000f3	48 8b 4c 24 60	 mov	 rcx, QWORD PTR op$[rsp]
  000f8	ff 90 a0 01 00
	00		 call	 QWORD PTR [rax+416]
  000fe	85 c0		 test	 eax, eax
  00100	74 0a		 je	 SHORT $LN9@PyTrash_de
$LN8@PyTrash_de:
  00102	c7 44 24 3c 01
	00 00 00	 mov	 DWORD PTR tv130[rsp], 1
  0010a	eb 08		 jmp	 SHORT $LN10@PyTrash_de
$LN9@PyTrash_de:
  0010c	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR tv130[rsp], 0
$LN10@PyTrash_de:
  00114	8b 44 24 3c	 mov	 eax, DWORD PTR tv130[rsp]
  00118	89 44 24 30	 mov	 DWORD PTR tv132[rsp], eax
$LN12@PyTrash_de:
  0011c	83 7c 24 30 00	 cmp	 DWORD PTR tv132[rsp], 0
  00121	75 1c		 jne	 SHORT $LN13@PyTrash_de
  00123	41 b8 2a 08 00
	00		 mov	 r8d, 2090		; 0000082aH
  00129	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CI@ONKHJAFP@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00130	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@JONAAHCD@?$AAP?$AAy?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA_?$AAI?$AAS?$AA_?$AAG?$AAC?$AA?$CI?$AAo?$AAp?$AA?$CJ?$AA?$AA@
  00137	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0013d	33 c0		 xor	 eax, eax
$LN13@PyTrash_de:

; 2091 :     assert(_Py_AS_GC(op)->gc.gc_refs == _PyGC_REFS_UNTRACKED);

  0013f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00147	4c 8b 4c 24 60	 mov	 r9, QWORD PTR op$[rsp]
  0014c	41 b8 2b 08 00
	00		 mov	 r8d, 2091		; 0000082bH
  00152	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@LBNADOJM@?4?4?2Objects?2object?4c?$AA@
  00159	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@OOFABKDM@_PyTrash_deposit_object?$AA@
  00160	e8 00 00 00 00	 call	 _PyParallel_Guard
  00165	85 c0		 test	 eax, eax
  00167	74 0b		 je	 SHORT $LN14@PyTrash_de
  00169	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR tv146[rsp], 0
  00172	eb 0e		 jmp	 SHORT $LN15@PyTrash_de
$LN14@PyTrash_de:
  00174	48 8b 44 24 60	 mov	 rax, QWORD PTR op$[rsp]
  00179	48 83 e8 18	 sub	 rax, 24
  0017d	48 89 44 24 40	 mov	 QWORD PTR tv146[rsp], rax
$LN15@PyTrash_de:
  00182	48 8b 44 24 40	 mov	 rax, QWORD PTR tv146[rsp]
  00187	48 83 78 10 fe	 cmp	 QWORD PTR [rax+16], -2
  0018c	74 1c		 je	 SHORT $LN16@PyTrash_de
  0018e	41 b8 2b 08 00
	00		 mov	 r8d, 2091		; 0000082bH
  00194	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CI@ONKHJAFP@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  0019b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1GE@NGKJHEDJ@?$AA_?$AAP?$AAy?$AA_?$AAA?$AAS?$AA_?$AAG?$AAC?$AA?$CI?$AAo?$AAp?$AA?$CJ?$AA?9?$AA?$DO?$AAg?$AAc?$AA?4?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA_?$AAP?$AAy@
  001a2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001a8	33 c0		 xor	 eax, eax
$LN16@PyTrash_de:

; 2092 :     assert(op->ob_refcnt == 0);

  001aa	48 8b 44 24 60	 mov	 rax, QWORD PTR op$[rsp]
  001af	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  001b4	74 1c		 je	 SHORT $LN17@PyTrash_de
  001b6	41 b8 2c 08 00
	00		 mov	 r8d, 2092		; 0000082cH
  001bc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CI@ONKHJAFP@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  001c3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@BBINLCNB@?$AAo?$AAp?$AA?9?$AA?$DO?$AAo?$AAb?$AA_?$AAr?$AAe?$AAf?$AAc?$AAn?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@
  001ca	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001d0	33 c0		 xor	 eax, eax
$LN17@PyTrash_de:

; 2093 :     _Py_AS_GC(op)->gc.gc_prev = (PyGC_Head *)_PyTrash_delete_later;

  001d2	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  001da	4c 8b 4c 24 60	 mov	 r9, QWORD PTR op$[rsp]
  001df	41 b8 2d 08 00
	00		 mov	 r8d, 2093		; 0000082dH
  001e5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@LBNADOJM@?4?4?2Objects?2object?4c?$AA@
  001ec	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@OOFABKDM@_PyTrash_deposit_object?$AA@
  001f3	e8 00 00 00 00	 call	 _PyParallel_Guard
  001f8	85 c0		 test	 eax, eax
  001fa	74 0b		 je	 SHORT $LN18@PyTrash_de
  001fc	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR tv167[rsp], 0
  00205	eb 0e		 jmp	 SHORT $LN19@PyTrash_de
$LN18@PyTrash_de:
  00207	48 8b 44 24 60	 mov	 rax, QWORD PTR op$[rsp]
  0020c	48 83 e8 18	 sub	 rax, 24
  00210	48 89 44 24 48	 mov	 QWORD PTR tv167[rsp], rax
$LN19@PyTrash_de:
  00215	48 8b 44 24 48	 mov	 rax, QWORD PTR tv167[rsp]
  0021a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR _PyTrash_delete_later
  00221	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 2094 :     _PyTrash_delete_later = op;

  00225	48 8b 44 24 60	 mov	 rax, QWORD PTR op$[rsp]
  0022a	48 89 05 00 00
	00 00		 mov	 QWORD PTR _PyTrash_delete_later, rax

; 2095 : }

  00231	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00235	c3		 ret	 0
_PyTrash_deposit_object ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BP@LGGMIPKN@_PyTrash_thread_deposit_object?$AA@ ; `string'
PUBLIC	_PyTrash_thread_deposit_object
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyTrash_thread_deposit_object DD imagerel $LN20
	DD	imagerel $LN20+586
	DD	imagerel $unwind$_PyTrash_thread_deposit_object
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyTrash_thread_deposit_object DD 010901H
	DD	0c209H
xdata	ENDS
;	COMDAT ??_C@_0BP@LGGMIPKN@_PyTrash_thread_deposit_object?$AA@
CONST	SEGMENT
??_C@_0BP@LGGMIPKN@_PyTrash_thread_deposit_object?$AA@ DB '_PyTrash_threa'
	DB	'd_deposit_object', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PyTrash_thread_deposit_object
_TEXT	SEGMENT
tstate$ = 48
tv133 = 56
tv89 = 60
tv87 = 64
tv131 = 68
tv147 = 72
tv168 = 80
op$ = 112
_PyTrash_thread_deposit_object PROC			; COMDAT

; 2100 : {

$LN20:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 2101 :     PyThreadState *tstate;
; 2102 :     Py_GUARD

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	74 1c		 je	 SHORT $LN1@PyTrash_th
  00012	45 33 c9	 xor	 r9d, r9d
  00015	41 b8 36 08 00
	00		 mov	 r8d, 2102		; 00000836H
  0001b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@LBNADOJM@?4?4?2Objects?2object?4c?$AA@
  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BP@LGGMIPKN@_PyTrash_thread_deposit_object?$AA@
  00029	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN1@PyTrash_th:

; 2103 :     Py_GUARD_OBJ(op);

  0002e	c7 44 24 20 20
	00 00 00	 mov	 DWORD PTR [rsp+32], 32	; 00000020H
  00036	4c 8b 4c 24 70	 mov	 r9, QWORD PTR op$[rsp]
  0003b	41 b8 37 08 00
	00		 mov	 r8d, 2103		; 00000837H
  00041	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@LBNADOJM@?4?4?2Objects?2object?4c?$AA@
  00048	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BP@LGGMIPKN@_PyTrash_thread_deposit_object?$AA@
  0004f	e8 00 00 00 00	 call	 _PyParallel_Guard

; 2104 :     tstate = PyThreadState_GET();

  00054	e8 00 00 00 00	 call	 PyThreadState_Get
  00059	48 89 44 24 30	 mov	 QWORD PTR tstate$[rsp], rax

; 2105 :     assert(PyObject_IS_GC(op));

  0005e	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00066	4c 8b 4c 24 70	 mov	 r9, QWORD PTR op$[rsp]
  0006b	41 b8 39 08 00
	00		 mov	 r8d, 2105		; 00000839H
  00071	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@LBNADOJM@?4?4?2Objects?2object?4c?$AA@
  00078	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BP@LGGMIPKN@_PyTrash_thread_deposit_object?$AA@
  0007f	e8 00 00 00 00	 call	 _PyParallel_Guard
  00084	85 c0		 test	 eax, eax
  00086	74 0d		 je	 SHORT $LN11@PyTrash_th
  00088	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv133[rsp], 0
  00090	e9 91 00 00 00	 jmp	 $LN12@PyTrash_th
$LN11@PyTrash_th:
  00095	e8 00 00 00 00	 call	 _Py_PXCTX
  0009a	85 c0		 test	 eax, eax
  0009c	74 0a		 je	 SHORT $LN6@PyTrash_th
  0009e	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR tv89[rsp], 0
  000a6	eb 32		 jmp	 SHORT $LN7@PyTrash_th
$LN6@PyTrash_th:
  000a8	48 8b 44 24 70	 mov	 rax, QWORD PTR op$[rsp]
  000ad	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000b1	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000b7	25 00 40 00 00	 and	 eax, 16384		; 00004000H
  000bc	85 c0		 test	 eax, eax
  000be	74 0a		 je	 SHORT $LN4@PyTrash_th
  000c0	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv87[rsp], 1
  000c8	eb 08		 jmp	 SHORT $LN5@PyTrash_th
$LN4@PyTrash_th:
  000ca	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv87[rsp], 0
$LN5@PyTrash_th:
  000d2	8b 44 24 40	 mov	 eax, DWORD PTR tv87[rsp]
  000d6	89 44 24 3c	 mov	 DWORD PTR tv89[rsp], eax
$LN7@PyTrash_th:
  000da	83 7c 24 3c 00	 cmp	 DWORD PTR tv89[rsp], 0
  000df	74 35		 je	 SHORT $LN9@PyTrash_th
  000e1	48 8b 44 24 70	 mov	 rax, QWORD PTR op$[rsp]
  000e6	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000ea	48 83 b8 a0 01
	00 00 00	 cmp	 QWORD PTR [rax+416], 0
  000f2	74 18		 je	 SHORT $LN8@PyTrash_th
  000f4	48 8b 44 24 70	 mov	 rax, QWORD PTR op$[rsp]
  000f9	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000fd	48 8b 4c 24 70	 mov	 rcx, QWORD PTR op$[rsp]
  00102	ff 90 a0 01 00
	00		 call	 QWORD PTR [rax+416]
  00108	85 c0		 test	 eax, eax
  0010a	74 0a		 je	 SHORT $LN9@PyTrash_th
$LN8@PyTrash_th:
  0010c	c7 44 24 44 01
	00 00 00	 mov	 DWORD PTR tv131[rsp], 1
  00114	eb 08		 jmp	 SHORT $LN10@PyTrash_th
$LN9@PyTrash_th:
  00116	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv131[rsp], 0
$LN10@PyTrash_th:
  0011e	8b 44 24 44	 mov	 eax, DWORD PTR tv131[rsp]
  00122	89 44 24 38	 mov	 DWORD PTR tv133[rsp], eax
$LN12@PyTrash_th:
  00126	83 7c 24 38 00	 cmp	 DWORD PTR tv133[rsp], 0
  0012b	75 1c		 jne	 SHORT $LN13@PyTrash_th
  0012d	41 b8 39 08 00
	00		 mov	 r8d, 2105		; 00000839H
  00133	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CI@ONKHJAFP@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  0013a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@JONAAHCD@?$AAP?$AAy?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA_?$AAI?$AAS?$AA_?$AAG?$AAC?$AA?$CI?$AAo?$AAp?$AA?$CJ?$AA?$AA@
  00141	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00147	33 c0		 xor	 eax, eax
$LN13@PyTrash_th:

; 2106 :     assert(_Py_AS_GC(op)->gc.gc_refs == _PyGC_REFS_UNTRACKED);

  00149	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00151	4c 8b 4c 24 70	 mov	 r9, QWORD PTR op$[rsp]
  00156	41 b8 3a 08 00
	00		 mov	 r8d, 2106		; 0000083aH
  0015c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@LBNADOJM@?4?4?2Objects?2object?4c?$AA@
  00163	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BP@LGGMIPKN@_PyTrash_thread_deposit_object?$AA@
  0016a	e8 00 00 00 00	 call	 _PyParallel_Guard
  0016f	85 c0		 test	 eax, eax
  00171	74 0b		 je	 SHORT $LN14@PyTrash_th
  00173	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR tv147[rsp], 0
  0017c	eb 0e		 jmp	 SHORT $LN15@PyTrash_th
$LN14@PyTrash_th:
  0017e	48 8b 44 24 70	 mov	 rax, QWORD PTR op$[rsp]
  00183	48 83 e8 18	 sub	 rax, 24
  00187	48 89 44 24 48	 mov	 QWORD PTR tv147[rsp], rax
$LN15@PyTrash_th:
  0018c	48 8b 44 24 48	 mov	 rax, QWORD PTR tv147[rsp]
  00191	48 83 78 10 fe	 cmp	 QWORD PTR [rax+16], -2
  00196	74 1c		 je	 SHORT $LN16@PyTrash_th
  00198	41 b8 3a 08 00
	00		 mov	 r8d, 2106		; 0000083aH
  0019e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CI@ONKHJAFP@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  001a5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1GE@NGKJHEDJ@?$AA_?$AAP?$AAy?$AA_?$AAA?$AAS?$AA_?$AAG?$AAC?$AA?$CI?$AAo?$AAp?$AA?$CJ?$AA?9?$AA?$DO?$AAg?$AAc?$AA?4?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA_?$AAP?$AAy@
  001ac	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001b2	33 c0		 xor	 eax, eax
$LN16@PyTrash_th:

; 2107 :     assert(op->ob_refcnt == 0);

  001b4	48 8b 44 24 70	 mov	 rax, QWORD PTR op$[rsp]
  001b9	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  001be	74 1c		 je	 SHORT $LN17@PyTrash_th
  001c0	41 b8 3b 08 00
	00		 mov	 r8d, 2107		; 0000083bH
  001c6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CI@ONKHJAFP@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  001cd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@BBINLCNB@?$AAo?$AAp?$AA?9?$AA?$DO?$AAo?$AAb?$AA_?$AAr?$AAe?$AAf?$AAc?$AAn?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@
  001d4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001da	33 c0		 xor	 eax, eax
$LN17@PyTrash_th:

; 2108 :     _Py_AS_GC(op)->gc.gc_prev = (PyGC_Head *) tstate->trash_delete_later;

  001dc	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  001e4	4c 8b 4c 24 70	 mov	 r9, QWORD PTR op$[rsp]
  001e9	41 b8 3c 08 00
	00		 mov	 r8d, 2108		; 0000083cH
  001ef	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@LBNADOJM@?4?4?2Objects?2object?4c?$AA@
  001f6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BP@LGGMIPKN@_PyTrash_thread_deposit_object?$AA@
  001fd	e8 00 00 00 00	 call	 _PyParallel_Guard
  00202	85 c0		 test	 eax, eax
  00204	74 0b		 je	 SHORT $LN18@PyTrash_th
  00206	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR tv168[rsp], 0
  0020f	eb 0e		 jmp	 SHORT $LN19@PyTrash_th
$LN18@PyTrash_th:
  00211	48 8b 44 24 70	 mov	 rax, QWORD PTR op$[rsp]
  00216	48 83 e8 18	 sub	 rax, 24
  0021a	48 89 44 24 50	 mov	 QWORD PTR tv168[rsp], rax
$LN19@PyTrash_th:
  0021f	48 8b 44 24 50	 mov	 rax, QWORD PTR tv168[rsp]
  00224	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tstate$[rsp]
  00229	48 8b 89 98 00
	00 00		 mov	 rcx, QWORD PTR [rcx+152]
  00230	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 2109 :     tstate->trash_delete_later = op;

  00234	48 8b 44 24 30	 mov	 rax, QWORD PTR tstate$[rsp]
  00239	48 8b 4c 24 70	 mov	 rcx, QWORD PTR op$[rsp]
  0023e	48 89 88 98 00
	00 00		 mov	 QWORD PTR [rax+152], rcx

; 2110 : }

  00245	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00249	c3		 ret	 0
_PyTrash_thread_deposit_object ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BH@KCEAOLMP@_PyTrash_destroy_chain?$AA@	; `string'
PUBLIC	_PyTrash_destroy_chain
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyTrash_destroy_chain DD imagerel $LN9
	DD	imagerel $LN9+258
	DD	imagerel $unwind$_PyTrash_destroy_chain
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyTrash_destroy_chain DD 010401H
	DD	0a204H
xdata	ENDS
;	COMDAT ??_C@_0BH@KCEAOLMP@_PyTrash_destroy_chain?$AA@
CONST	SEGMENT
??_C@_0BH@KCEAOLMP@_PyTrash_destroy_chain?$AA@ DB '_PyTrash_destroy_chain'
	DB	00H						; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PyTrash_destroy_chain
_TEXT	SEGMENT
dealloc$121835 = 48
op$121834 = 56
tv81 = 64
_PyTrash_destroy_chain PROC				; COMDAT

; 2117 : {

$LN9:
  00000	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 2118 :     Py_GUARD

  00004	e8 00 00 00 00	 call	 _Py_PXCTX
  00009	85 c0		 test	 eax, eax
  0000b	74 1c		 je	 SHORT $LN3@PyTrash_de@2
  0000d	45 33 c9	 xor	 r9d, r9d
  00010	41 b8 46 08 00
	00		 mov	 r8d, 2118		; 00000846H
  00016	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@LBNADOJM@?4?4?2Objects?2object?4c?$AA@
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BH@KCEAOLMP@_PyTrash_destroy_chain?$AA@
  00024	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@PyTrash_de@2:
$LN2@PyTrash_de@2:

; 2119 :     while (_PyTrash_delete_later) {

  00029	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR _PyTrash_delete_later, 0
  00031	0f 84 c6 00 00
	00		 je	 $LN1@PyTrash_de@2

; 2120 :         PyObject *op = _PyTrash_delete_later;

  00037	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyTrash_delete_later
  0003e	48 89 44 24 38	 mov	 QWORD PTR op$121834[rsp], rax

; 2121 :         destructor dealloc = Py_TYPE(op)->tp_dealloc;

  00043	48 8b 44 24 38	 mov	 rax, QWORD PTR op$121834[rsp]
  00048	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0004c	48 8b 80 88 00
	00 00		 mov	 rax, QWORD PTR [rax+136]
  00053	48 89 44 24 30	 mov	 QWORD PTR dealloc$121835[rsp], rax

; 2122 : 
; 2123 :         _PyTrash_delete_later =
; 2124 :             (PyObject*) _Py_AS_GC(op)->gc.gc_prev;

  00058	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00060	4c 8b 4c 24 38	 mov	 r9, QWORD PTR op$121834[rsp]
  00065	41 b8 4c 08 00
	00		 mov	 r8d, 2124		; 0000084cH
  0006b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@LBNADOJM@?4?4?2Objects?2object?4c?$AA@
  00072	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BH@KCEAOLMP@_PyTrash_destroy_chain?$AA@
  00079	e8 00 00 00 00	 call	 _PyParallel_Guard
  0007e	85 c0		 test	 eax, eax
  00080	74 0b		 je	 SHORT $LN6@PyTrash_de@2
  00082	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR tv81[rsp], 0
  0008b	eb 0e		 jmp	 SHORT $LN7@PyTrash_de@2
$LN6@PyTrash_de@2:
  0008d	48 8b 44 24 38	 mov	 rax, QWORD PTR op$121834[rsp]
  00092	48 83 e8 18	 sub	 rax, 24
  00096	48 89 44 24 40	 mov	 QWORD PTR tv81[rsp], rax
$LN7@PyTrash_de@2:
  0009b	48 8b 44 24 40	 mov	 rax, QWORD PTR tv81[rsp]
  000a0	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  000a4	48 89 05 00 00
	00 00		 mov	 QWORD PTR _PyTrash_delete_later, rax

; 2125 : 
; 2126 :         /* Call the deallocator directly.  This used to try to
; 2127 :          * fool Py_DECREF into calling it indirectly, but
; 2128 :          * Py_DECREF was already called on this object, and in
; 2129 :          * assorted non-release builds calling Py_DECREF again ends
; 2130 :          * up distorting allocation statistics.
; 2131 :          */
; 2132 :         assert(op->ob_refcnt == 0);

  000ab	48 8b 44 24 38	 mov	 rax, QWORD PTR op$121834[rsp]
  000b0	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000b5	74 1c		 je	 SHORT $LN8@PyTrash_de@2
  000b7	41 b8 54 08 00
	00		 mov	 r8d, 2132		; 00000854H
  000bd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CI@ONKHJAFP@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  000c4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@BBINLCNB@?$AAo?$AAp?$AA?9?$AA?$DO?$AAo?$AAb?$AA_?$AAr?$AAe?$AAf?$AAc?$AAn?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@
  000cb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000d1	33 c0		 xor	 eax, eax
$LN8@PyTrash_de@2:

; 2133 :         ++_PyTrash_delete_nesting;

  000d3	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR _PyTrash_delete_nesting
  000d9	ff c0		 inc	 eax
  000db	89 05 00 00 00
	00		 mov	 DWORD PTR _PyTrash_delete_nesting, eax

; 2134 :         (*dealloc)(op);

  000e1	48 8b 4c 24 38	 mov	 rcx, QWORD PTR op$121834[rsp]
  000e6	ff 54 24 30	 call	 QWORD PTR dealloc$121835[rsp]

; 2135 :         --_PyTrash_delete_nesting;

  000ea	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR _PyTrash_delete_nesting
  000f0	ff c8		 dec	 eax
  000f2	89 05 00 00 00
	00		 mov	 DWORD PTR _PyTrash_delete_nesting, eax

; 2136 :     }

  000f8	e9 2c ff ff ff	 jmp	 $LN2@PyTrash_de@2
$LN1@PyTrash_de@2:

; 2137 : }

  000fd	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00101	c3		 ret	 0
_PyTrash_destroy_chain ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BO@PGJJGLPC@_PyTrash_thread_destroy_chain?$AA@ ; `string'
PUBLIC	_PyTrash_thread_destroy_chain
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyTrash_thread_destroy_chain DD imagerel $LN9
	DD	imagerel $LN9+303
	DD	imagerel $unwind$_PyTrash_thread_destroy_chain
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyTrash_thread_destroy_chain DD 010401H
	DD	0a204H
xdata	ENDS
;	COMDAT ??_C@_0BO@PGJJGLPC@_PyTrash_thread_destroy_chain?$AA@
CONST	SEGMENT
??_C@_0BO@PGJJGLPC@_PyTrash_thread_destroy_chain?$AA@ DB '_PyTrash_thread'
	DB	'_destroy_chain', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PyTrash_thread_destroy_chain
_TEXT	SEGMENT
tstate$ = 48
dealloc$121850 = 56
op$121849 = 64
tv85 = 72
_PyTrash_thread_destroy_chain PROC			; COMDAT

; 2142 : {

$LN9:
  00000	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 2143 :     PyThreadState *tstate;
; 2144 :     Py_GUARD

  00004	e8 00 00 00 00	 call	 _Py_PXCTX
  00009	85 c0		 test	 eax, eax
  0000b	74 1c		 je	 SHORT $LN3@PyTrash_th@2
  0000d	45 33 c9	 xor	 r9d, r9d
  00010	41 b8 60 08 00
	00		 mov	 r8d, 2144		; 00000860H
  00016	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@LBNADOJM@?4?4?2Objects?2object?4c?$AA@
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BO@PGJJGLPC@_PyTrash_thread_destroy_chain?$AA@
  00024	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@PyTrash_th@2:

; 2145 :     tstate = PyThreadState_GET();

  00029	e8 00 00 00 00	 call	 PyThreadState_Get
  0002e	48 89 44 24 30	 mov	 QWORD PTR tstate$[rsp], rax
$LN2@PyTrash_th@2:

; 2146 :     while (tstate->trash_delete_later) {

  00033	48 8b 44 24 30	 mov	 rax, QWORD PTR tstate$[rsp]
  00038	48 83 b8 98 00
	00 00 00	 cmp	 QWORD PTR [rax+152], 0
  00040	0f 84 e4 00 00
	00		 je	 $LN1@PyTrash_th@2

; 2147 :         PyObject *op = tstate->trash_delete_later;

  00046	48 8b 44 24 30	 mov	 rax, QWORD PTR tstate$[rsp]
  0004b	48 8b 80 98 00
	00 00		 mov	 rax, QWORD PTR [rax+152]
  00052	48 89 44 24 40	 mov	 QWORD PTR op$121849[rsp], rax

; 2148 :         destructor dealloc = Py_TYPE(op)->tp_dealloc;

  00057	48 8b 44 24 40	 mov	 rax, QWORD PTR op$121849[rsp]
  0005c	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00060	48 8b 80 88 00
	00 00		 mov	 rax, QWORD PTR [rax+136]
  00067	48 89 44 24 38	 mov	 QWORD PTR dealloc$121850[rsp], rax

; 2149 : 
; 2150 :         tstate->trash_delete_later =
; 2151 :             (PyObject*) _Py_AS_GC(op)->gc.gc_prev;

  0006c	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00074	4c 8b 4c 24 40	 mov	 r9, QWORD PTR op$121849[rsp]
  00079	41 b8 67 08 00
	00		 mov	 r8d, 2151		; 00000867H
  0007f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@LBNADOJM@?4?4?2Objects?2object?4c?$AA@
  00086	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BO@PGJJGLPC@_PyTrash_thread_destroy_chain?$AA@
  0008d	e8 00 00 00 00	 call	 _PyParallel_Guard
  00092	85 c0		 test	 eax, eax
  00094	74 0b		 je	 SHORT $LN6@PyTrash_th@2
  00096	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR tv85[rsp], 0
  0009f	eb 0e		 jmp	 SHORT $LN7@PyTrash_th@2
$LN6@PyTrash_th@2:
  000a1	48 8b 44 24 40	 mov	 rax, QWORD PTR op$121849[rsp]
  000a6	48 83 e8 18	 sub	 rax, 24
  000aa	48 89 44 24 48	 mov	 QWORD PTR tv85[rsp], rax
$LN7@PyTrash_th@2:
  000af	48 8b 44 24 30	 mov	 rax, QWORD PTR tstate$[rsp]
  000b4	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tv85[rsp]
  000b9	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  000bd	48 89 88 98 00
	00 00		 mov	 QWORD PTR [rax+152], rcx

; 2152 : 
; 2153 :         /* Call the deallocator directly.  This used to try to
; 2154 :          * fool Py_DECREF into calling it indirectly, but
; 2155 :          * Py_DECREF was already called on this object, and in
; 2156 :          * assorted non-release builds calling Py_DECREF again ends
; 2157 :          * up distorting allocation statistics.
; 2158 :          */
; 2159 :         assert(op->ob_refcnt == 0);

  000c4	48 8b 44 24 40	 mov	 rax, QWORD PTR op$121849[rsp]
  000c9	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000ce	74 1c		 je	 SHORT $LN8@PyTrash_th@2
  000d0	41 b8 6f 08 00
	00		 mov	 r8d, 2159		; 0000086fH
  000d6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CI@ONKHJAFP@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  000dd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@BBINLCNB@?$AAo?$AAp?$AA?9?$AA?$DO?$AAo?$AAb?$AA_?$AAr?$AAe?$AAf?$AAc?$AAn?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@
  000e4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000ea	33 c0		 xor	 eax, eax
$LN8@PyTrash_th@2:

; 2160 :         ++tstate->trash_delete_nesting;

  000ec	48 8b 44 24 30	 mov	 rax, QWORD PTR tstate$[rsp]
  000f1	8b 80 94 00 00
	00		 mov	 eax, DWORD PTR [rax+148]
  000f7	ff c0		 inc	 eax
  000f9	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tstate$[rsp]
  000fe	89 81 94 00 00
	00		 mov	 DWORD PTR [rcx+148], eax

; 2161 :         (*dealloc)(op);

  00104	48 8b 4c 24 40	 mov	 rcx, QWORD PTR op$121849[rsp]
  00109	ff 54 24 38	 call	 QWORD PTR dealloc$121850[rsp]

; 2162 :         --tstate->trash_delete_nesting;

  0010d	48 8b 44 24 30	 mov	 rax, QWORD PTR tstate$[rsp]
  00112	8b 80 94 00 00
	00		 mov	 eax, DWORD PTR [rax+148]
  00118	ff c8		 dec	 eax
  0011a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tstate$[rsp]
  0011f	89 81 94 00 00
	00		 mov	 DWORD PTR [rcx+148], eax

; 2163 :     }

  00125	e9 09 ff ff ff	 jmp	 $LN2@PyTrash_th@2
$LN1@PyTrash_th@2:

; 2164 : }

  0012a	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0012e	c3		 ret	 0
_PyTrash_thread_destroy_chain ENDP
_TEXT	ENDS
END
