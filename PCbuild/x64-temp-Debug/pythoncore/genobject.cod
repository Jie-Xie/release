; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_09HNDCMPDF@generator?$AA@			; `string'
PUBLIC	_PyGen_Send
PUBLIC	??_C@_04MIIPNNEF@send?$AA@			; `string'
PUBLIC	??_C@_07EJIGCMPG@gi_code?$AA@			; `string'
PUBLIC	??_C@_0L@HIMABBB@gi_running?$AA@		; `string'
PUBLIC	??_C@_08LNGNCNON@gi_frame?$AA@			; `string'
PUBLIC	??_C@_08BHKDPDAA@__name__?$AA@			; `string'
PUBLIC	??_C@_05JFAPCGDM@throw?$AA@			; `string'
PUBLIC	??_C@_05LBOHBHFK@close?$AA@			; `string'
PUBLIC	PyGen_Type
EXTRN	PyObject_SelfIter:PROC
EXTRN	PyObject_GenericGetAttr:PROC
EXTRN	PyType_Type:BYTE
;	COMDAT ??_C@_09HNDCMPDF@generator?$AA@
CONST	SEGMENT
??_C@_09HNDCMPDF@generator?$AA@ DB 'generator', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04MIIPNNEF@send?$AA@
CONST	SEGMENT
??_C@_04MIIPNNEF@send?$AA@ DB 'send', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07EJIGCMPG@gi_code?$AA@
CONST	SEGMENT
??_C@_07EJIGCMPG@gi_code?$AA@ DB 'gi_code', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HIMABBB@gi_running?$AA@
CONST	SEGMENT
??_C@_0L@HIMABBB@gi_running?$AA@ DB 'gi_running', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08LNGNCNON@gi_frame?$AA@
CONST	SEGMENT
??_C@_08LNGNCNON@gi_frame?$AA@ DB 'gi_frame', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08BHKDPDAA@__name__?$AA@
CONST	SEGMENT
??_C@_08BHKDPDAA@__name__?$AA@ DB '__name__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05JFAPCGDM@throw?$AA@
CONST	SEGMENT
??_C@_05JFAPCGDM@throw?$AA@ DB 'throw', 00H		; `string'
CONST	ENDS
_TLS	SEGMENT
?PyId_throw@?1??gen_throw@@9@9 DQ 0000000000000000H	; `gen_throw'::`2'::PyId_throw
	DQ	FLAT:??_C@_05JFAPCGDM@throw?$AA@
	DQ	0000000000000000H
?PyId_close@?1??gen_close_iter@@9@9 DQ 0000000000000000H ; `gen_close_iter'::`2'::PyId_close
	DQ	FLAT:??_C@_05LBOHBHFK@close?$AA@
	DQ	0000000000000000H
_TLS	ENDS
;	COMDAT ??_C@_05LBOHBHFK@close?$AA@
CONST	SEGMENT
??_C@_05LBOHBHFK@close?$AA@ DB 'close', 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
send_doc DB	'send(arg) -> send ''arg'' into generator,', 0aH, 'return'
	DB	' next yielded value or raise StopIteration.', 00H
	ORG $+6
close_doc DB	'close() -> raise GeneratorExit inside generator.', 00H
	ORG $+15
throw_doc DB	'throw(typ[,val[,tb]]) -> raise exception in generator,', 0aH
	DB	'return next yielded value or raise StopIteration.', 00H
	ORG $+7
gen__name__doc__ DB 'Return the name of the generator''s associated code '
	DB	'object.', 00H
	ORG $+5
gen_getsetlist DQ FLAT:??_C@_08BHKDPDAA@__name__?$AA@
	DQ	FLAT:gen_get_name
	DQ	0000000000000000H
	DQ	FLAT:gen__name__doc__
	ORG $+8
	DQ	0000000000000000H
	ORG $+32
gen_memberlist DQ FLAT:??_C@_08LNGNCNON@gi_frame?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000060H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0L@HIMABBB@gi_running?$AA@
	DD	0eH
	ORG $+4
	DQ	0000000000000068H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_07EJIGCMPG@gi_code?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000070H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	0000000000000000H
	ORG $+32
gen_methods DQ	FLAT:??_C@_04MIIPNNEF@send?$AA@
	DQ	FLAT:_PyGen_Send
	DD	08H
	ORG $+4
	DQ	FLAT:send_doc
	DQ	FLAT:??_C@_05JFAPCGDM@throw?$AA@
	DQ	FLAT:gen_throw
	DD	01H
	ORG $+4
	DQ	FLAT:throw_doc
	DQ	FLAT:??_C@_05LBOHBHFK@close?$AA@
	DQ	FLAT:gen_close
	DD	04H
	ORG $+4
	DQ	FLAT:close_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
PyGen_Type DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_09HNDCMPDF@generator?$AA@
	DQ	0000000000000080H
	DQ	0000000000000000H
	DQ	FLAT:gen_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:gen_repr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044000H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:gen_traverse
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000078H
	DQ	FLAT:PyObject_SelfIter
	DQ	FLAT:gen_iternext
	DQ	FLAT:gen_methods
	DQ	FLAT:gen_memberlist
	DQ	FLAT:gen_getsetlist
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:gen_del
	ORG $+8
_DATA	ENDS
PUBLIC	??_C@_0N@BEBOGKOA@gen_traverse?$AA@		; `string'
PUBLIC	??_C@_0BH@IGGHLIPC@?4?4?2Objects?2genobject?4c?$AA@ ; `string'
EXTRN	_PyParallel_ContextGuardFailure:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\objects\genobject.c
pdata	SEGMENT
$pdata$gen_traverse DD imagerel gen_traverse
	DD	imagerel gen_traverse+206
	DD	imagerel $unwind$gen_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gen_traverse DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT ??_C@_0N@BEBOGKOA@gen_traverse?$AA@
CONST	SEGMENT
??_C@_0N@BEBOGKOA@gen_traverse?$AA@ DB 'gen_traverse', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@IGGHLIPC@?4?4?2Objects?2genobject?4c?$AA@
CONST	SEGMENT
??_C@_0BH@IGGHLIPC@?4?4?2Objects?2genobject?4c?$AA@ DB '..\Objects\genobj'
	DB	'ect.c', 00H					; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT gen_traverse
_TEXT	SEGMENT
vret$20522 = 32
vret$20531 = 36
gen$ = 64
visit$ = 72
arg$ = 80
gen_traverse PROC					; COMDAT

; 12   : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN12@gen_traver:

; 13   :     Py_VISIT((PyObject *)gen->gi_frame);

  00013	e8 00 00 00 00	 call	 _Py_PXCTX
  00018	85 c0		 test	 eax, eax
  0001a	74 1c		 je	 SHORT $LN9@gen_traver
  0001c	45 33 c9	 xor	 r9d, r9d
  0001f	41 b8 0d 00 00
	00		 mov	 r8d, 13
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@IGGHLIPC@?4?4?2Objects?2genobject?4c?$AA@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BEBOGKOA@gen_traverse?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN9@gen_traver:
  00038	48 8b 44 24 40	 mov	 rax, QWORD PTR gen$[rsp]
  0003d	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00042	74 23		 je	 SHORT $LN8@gen_traver
  00044	48 8b 54 24 50	 mov	 rdx, QWORD PTR arg$[rsp]
  00049	48 8b 44 24 40	 mov	 rax, QWORD PTR gen$[rsp]
  0004e	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00052	ff 54 24 48	 call	 QWORD PTR visit$[rsp]
  00056	89 44 24 20	 mov	 DWORD PTR vret$20522[rsp], eax
  0005a	83 7c 24 20 00	 cmp	 DWORD PTR vret$20522[rsp], 0
  0005f	74 06		 je	 SHORT $LN7@gen_traver
  00061	8b 44 24 20	 mov	 eax, DWORD PTR vret$20522[rsp]
  00065	eb 62		 jmp	 SHORT $LN13@gen_traver
$LN7@gen_traver:
$LN8@gen_traver:
  00067	33 c0		 xor	 eax, eax
  00069	85 c0		 test	 eax, eax
  0006b	75 a6		 jne	 SHORT $LN12@gen_traver
$LN6@gen_traver:

; 14   :     Py_VISIT(gen->gi_code);

  0006d	e8 00 00 00 00	 call	 _Py_PXCTX
  00072	85 c0		 test	 eax, eax
  00074	74 1c		 je	 SHORT $LN3@gen_traver
  00076	45 33 c9	 xor	 r9d, r9d
  00079	41 b8 0e 00 00
	00		 mov	 r8d, 14
  0007f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@IGGHLIPC@?4?4?2Objects?2genobject?4c?$AA@
  00086	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BEBOGKOA@gen_traverse?$AA@
  0008d	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@gen_traver:
  00092	48 8b 44 24 40	 mov	 rax, QWORD PTR gen$[rsp]
  00097	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  0009c	74 23		 je	 SHORT $LN2@gen_traver
  0009e	48 8b 54 24 50	 mov	 rdx, QWORD PTR arg$[rsp]
  000a3	48 8b 44 24 40	 mov	 rax, QWORD PTR gen$[rsp]
  000a8	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  000ac	ff 54 24 48	 call	 QWORD PTR visit$[rsp]
  000b0	89 44 24 24	 mov	 DWORD PTR vret$20531[rsp], eax
  000b4	83 7c 24 24 00	 cmp	 DWORD PTR vret$20531[rsp], 0
  000b9	74 06		 je	 SHORT $LN1@gen_traver
  000bb	8b 44 24 24	 mov	 eax, DWORD PTR vret$20531[rsp]
  000bf	eb 08		 jmp	 SHORT $LN13@gen_traver
$LN1@gen_traver:
$LN2@gen_traver:
  000c1	33 c0		 xor	 eax, eax
  000c3	85 c0		 test	 eax, eax
  000c5	75 a6		 jne	 SHORT $LN6@gen_traver

; 15   :     return 0;

  000c7	33 c0		 xor	 eax, eax
$LN13@gen_traver:

; 16   : }

  000c9	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000cd	c3		 ret	 0
gen_traverse ENDP
_TEXT	ENDS
PUBLIC	_Py_DecRef
PUBLIC	??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@ ; `string'
PUBLIC	??_C@_1EM@HFMJMDDM@?$AAg?$AA?9?$AA?$DO?$AAg?$AAc?$AA?4?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AAG?$AAC?$AA_?$AAR?$AAE?$AAF?$AAS?$AA_?$AAU?$AAN?$AAT?$AAR@ ; `string'
PUBLIC	??_C@_1CO@MIHLJLBH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAg?$AAe?$AAn?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@ ; `string'
PUBLIC	??_C@_0M@PFEIELHL@gen_dealloc?$AA@		; `string'
EXTRN	PyObject_GC_Del:PROC
EXTRN	_PyGC_generation0:QWORD
EXTRN	Py_FatalError:PROC
EXTRN	PyObject_ClearWeakRefs:PROC
EXTRN	__imp__wassert:PROC
EXTRN	_PyParallel_Guard:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$gen_dealloc DD imagerel gen_dealloc
	DD	imagerel gen_dealloc+1099
	DD	imagerel $unwind$gen_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gen_dealloc DD 020c01H
	DD	011010cH
xdata	ENDS
;	COMDAT ??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@
CONST	SEGMENT
??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@ DB 'GC object alread'
	DB	'y tracked', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1EM@HFMJMDDM@?$AAg?$AA?9?$AA?$DO?$AAg?$AAc?$AA?4?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AAG?$AAC?$AA_?$AAR?$AAE?$AAF?$AAS?$AA_?$AAU?$AAN?$AAT?$AAR@
CONST	SEGMENT
??_C@_1EM@HFMJMDDM@?$AAg?$AA?9?$AA?$DO?$AAg?$AAc?$AA?4?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AAG?$AAC?$AA_?$AAR?$AAE?$AAF?$AAS?$AA_?$AAU?$AAN?$AAT?$AAR@ DB 'g'
	DB	00H, '-', 00H, '>', 00H, 'g', 00H, 'c', 00H, '.', 00H, 'g', 00H
	DB	'c', 00H, '_', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 's', 00H, ' '
	DB	00H, '!', 00H, '=', 00H, ' ', 00H, '_', 00H, 'P', 00H, 'y', 00H
	DB	'G', 00H, 'C', 00H, '_', 00H, 'R', 00H, 'E', 00H, 'F', 00H, 'S'
	DB	00H, '_', 00H, 'U', 00H, 'N', 00H, 'T', 00H, 'R', 00H, 'A', 00H
	DB	'C', 00H, 'K', 00H, 'E', 00H, 'D', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CO@MIHLJLBH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAg?$AAe?$AAn?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
CONST	SEGMENT
??_C@_1CO@MIHLJLBH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAg?$AAe?$AAn?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@ DB '.'
	DB	00H, '.', 00H, '\', 00H, 'O', 00H, 'b', 00H, 'j', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 's', 00H, '\', 00H, 'g', 00H, 'e', 00H, 'n'
	DB	00H, 'o', 00H, 'b', 00H, 'j', 00H, 'e', 00H, 'c', 00H, 't', 00H
	DB	'.', 00H, 'c', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@PFEIELHL@gen_dealloc?$AA@
CONST	SEGMENT
??_C@_0M@PFEIELHL@gen_dealloc?$AA@ DB 'gen_dealloc', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT gen_dealloc
_TEXT	SEGMENT
self$ = 48
g$20545 = 56
g$20558 = 64
g$20572 = 72
_py_tmp$20581 = 80
_py_tmp$20589 = 88
tv79 = 96
tv142 = 104
tv178 = 112
gen$ = 144
gen_dealloc PROC					; COMDAT

; 20   : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 21   :     PyObject *self = (PyObject *) gen;

  0000c	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR gen$[rsp]
  00014	48 89 44 24 30	 mov	 QWORD PTR self$[rsp], rax

; 22   : 
; 23   :     _PyObject_GC_UNTRACK(gen);

  00019	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00021	4c 8b 8c 24 90
	00 00 00	 mov	 r9, QWORD PTR gen$[rsp]
  00029	41 b8 17 00 00
	00		 mov	 r8d, 23
  0002f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@IGGHLIPC@?4?4?2Objects?2genobject?4c?$AA@
  00036	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@PFEIELHL@gen_dealloc?$AA@
  0003d	e8 00 00 00 00	 call	 _PyParallel_Guard
  00042	85 c0		 test	 eax, eax
  00044	0f 85 c7 00 00
	00		 jne	 $LN24@gen_deallo
$LN23@gen_deallo:
  0004a	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00052	4c 8b 8c 24 90
	00 00 00	 mov	 r9, QWORD PTR gen$[rsp]
  0005a	41 b8 17 00 00
	00		 mov	 r8d, 23
  00060	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@IGGHLIPC@?4?4?2Objects?2genobject?4c?$AA@
  00067	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@PFEIELHL@gen_dealloc?$AA@
  0006e	e8 00 00 00 00	 call	 _PyParallel_Guard
  00073	85 c0		 test	 eax, eax
  00075	74 0b		 je	 SHORT $LN27@gen_deallo
  00077	48 c7 44 24 60
	00 00 00 00	 mov	 QWORD PTR tv79[rsp], 0
  00080	eb 11		 jmp	 SHORT $LN28@gen_deallo
$LN27@gen_deallo:
  00082	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR gen$[rsp]
  0008a	48 83 e8 18	 sub	 rax, 24
  0008e	48 89 44 24 60	 mov	 QWORD PTR tv79[rsp], rax
$LN28@gen_deallo:
  00093	48 8b 44 24 60	 mov	 rax, QWORD PTR tv79[rsp]
  00098	48 89 44 24 38	 mov	 QWORD PTR g$20545[rsp], rax
  0009d	48 8b 44 24 38	 mov	 rax, QWORD PTR g$20545[rsp]
  000a2	48 83 78 10 fe	 cmp	 QWORD PTR [rax+16], -2
  000a7	75 1c		 jne	 SHORT $LN29@gen_deallo
  000a9	41 b8 17 00 00
	00		 mov	 r8d, 23
  000af	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@MIHLJLBH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAg?$AAe?$AAn?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  000b6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EM@HFMJMDDM@?$AAg?$AA?9?$AA?$DO?$AAg?$AAc?$AA?4?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AAG?$AAC?$AA_?$AAR?$AAE?$AAF?$AAS?$AA_?$AAU?$AAN?$AAT?$AAR@
  000bd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000c3	33 c0		 xor	 eax, eax
$LN29@gen_deallo:
  000c5	48 8b 44 24 38	 mov	 rax, QWORD PTR g$20545[rsp]
  000ca	48 c7 40 10 fe
	ff ff ff	 mov	 QWORD PTR [rax+16], -2
  000d2	48 8b 44 24 38	 mov	 rax, QWORD PTR g$20545[rsp]
  000d7	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  000db	48 8b 4c 24 38	 mov	 rcx, QWORD PTR g$20545[rsp]
  000e0	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000e3	48 89 08	 mov	 QWORD PTR [rax], rcx
  000e6	48 8b 44 24 38	 mov	 rax, QWORD PTR g$20545[rsp]
  000eb	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000ee	48 8b 4c 24 38	 mov	 rcx, QWORD PTR g$20545[rsp]
  000f3	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  000f7	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  000fb	48 8b 44 24 38	 mov	 rax, QWORD PTR g$20545[rsp]
  00100	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
  00107	33 c0		 xor	 eax, eax
  00109	85 c0		 test	 eax, eax
  0010b	0f 85 39 ff ff
	ff		 jne	 $LN23@gen_deallo
$LN24@gen_deallo:

; 24   : 
; 25   :     if (gen->gi_weakreflist != NULL)

  00111	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR gen$[rsp]
  00119	48 83 78 78 00	 cmp	 QWORD PTR [rax+120], 0
  0011e	74 0a		 je	 SHORT $LN20@gen_deallo

; 26   :         PyObject_ClearWeakRefs(self);

  00120	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self$[rsp]
  00125	e8 00 00 00 00	 call	 PyObject_ClearWeakRefs
$LN20@gen_deallo:

; 27   : 
; 28   :     _PyObject_GC_TRACK(self);

  0012a	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00132	4c 8b 4c 24 30	 mov	 r9, QWORD PTR self$[rsp]
  00137	41 b8 1c 00 00
	00		 mov	 r8d, 28
  0013d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@IGGHLIPC@?4?4?2Objects?2genobject?4c?$AA@
  00144	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@PFEIELHL@gen_dealloc?$AA@
  0014b	e8 00 00 00 00	 call	 _PyParallel_Guard
  00150	85 c0		 test	 eax, eax
  00152	0f 85 c0 00 00
	00		 jne	 $LN19@gen_deallo
$LN18@gen_deallo:
  00158	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00160	4c 8b 4c 24 30	 mov	 r9, QWORD PTR self$[rsp]
  00165	41 b8 1c 00 00
	00		 mov	 r8d, 28
  0016b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@IGGHLIPC@?4?4?2Objects?2genobject?4c?$AA@
  00172	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@PFEIELHL@gen_dealloc?$AA@
  00179	e8 00 00 00 00	 call	 _PyParallel_Guard
  0017e	85 c0		 test	 eax, eax
  00180	74 0b		 je	 SHORT $LN30@gen_deallo
  00182	48 c7 44 24 68
	00 00 00 00	 mov	 QWORD PTR tv142[rsp], 0
  0018b	eb 0e		 jmp	 SHORT $LN31@gen_deallo
$LN30@gen_deallo:
  0018d	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00192	48 83 e8 18	 sub	 rax, 24
  00196	48 89 44 24 68	 mov	 QWORD PTR tv142[rsp], rax
$LN31@gen_deallo:
  0019b	48 8b 44 24 68	 mov	 rax, QWORD PTR tv142[rsp]
  001a0	48 89 44 24 40	 mov	 QWORD PTR g$20558[rsp], rax
  001a5	48 8b 44 24 40	 mov	 rax, QWORD PTR g$20558[rsp]
  001aa	48 83 78 10 fe	 cmp	 QWORD PTR [rax+16], -2
  001af	74 0c		 je	 SHORT $LN15@gen_deallo
  001b1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@
  001b8	e8 00 00 00 00	 call	 Py_FatalError
$LN15@gen_deallo:
  001bd	48 8b 44 24 40	 mov	 rax, QWORD PTR g$20558[rsp]
  001c2	48 c7 40 10 fd
	ff ff ff	 mov	 QWORD PTR [rax+16], -3
  001ca	48 8b 44 24 40	 mov	 rax, QWORD PTR g$20558[rsp]
  001cf	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR _PyGC_generation0
  001d6	48 89 08	 mov	 QWORD PTR [rax], rcx
  001d9	48 8b 44 24 40	 mov	 rax, QWORD PTR g$20558[rsp]
  001de	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR _PyGC_generation0
  001e5	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  001e9	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  001ed	48 8b 44 24 40	 mov	 rax, QWORD PTR g$20558[rsp]
  001f2	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  001f6	48 8b 4c 24 40	 mov	 rcx, QWORD PTR g$20558[rsp]
  001fb	48 89 08	 mov	 QWORD PTR [rax], rcx
  001fe	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyGC_generation0
  00205	48 8b 4c 24 40	 mov	 rcx, QWORD PTR g$20558[rsp]
  0020a	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  0020e	33 c0		 xor	 eax, eax
  00210	85 c0		 test	 eax, eax
  00212	0f 85 40 ff ff
	ff		 jne	 $LN18@gen_deallo
$LN19@gen_deallo:

; 29   : 
; 30   :     if (gen->gi_frame != NULL && gen->gi_frame->f_stacktop != NULL) {

  00218	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR gen$[rsp]
  00220	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00225	74 3e		 je	 SHORT $LN14@gen_deallo
  00227	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR gen$[rsp]
  0022f	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00233	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  0023b	74 28		 je	 SHORT $LN14@gen_deallo

; 31   :         /* Generator is paused, so we need to close */
; 32   :         Py_TYPE(gen)->tp_del(self);

  0023d	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR gen$[rsp]
  00245	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00249	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self$[rsp]
  0024e	ff 90 d0 01 00
	00		 call	 QWORD PTR [rax+464]

; 33   :         if (self->ob_refcnt > 0)

  00254	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00259	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  0025e	7e 05		 jle	 SHORT $LN13@gen_deallo

; 34   :             return;                     /* resurrected.  :( */

  00260	e9 de 01 00 00	 jmp	 $LN25@gen_deallo
$LN13@gen_deallo:
$LN14@gen_deallo:

; 35   :     }
; 36   : 
; 37   :     _PyObject_GC_UNTRACK(self);

  00265	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0026d	4c 8b 4c 24 30	 mov	 r9, QWORD PTR self$[rsp]
  00272	41 b8 25 00 00
	00		 mov	 r8d, 37			; 00000025H
  00278	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@IGGHLIPC@?4?4?2Objects?2genobject?4c?$AA@
  0027f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@PFEIELHL@gen_dealloc?$AA@
  00286	e8 00 00 00 00	 call	 _PyParallel_Guard
  0028b	85 c0		 test	 eax, eax
  0028d	0f 85 c1 00 00
	00		 jne	 $LN12@gen_deallo
$LN11@gen_deallo:
  00293	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0029b	4c 8b 4c 24 30	 mov	 r9, QWORD PTR self$[rsp]
  002a0	41 b8 25 00 00
	00		 mov	 r8d, 37			; 00000025H
  002a6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@IGGHLIPC@?4?4?2Objects?2genobject?4c?$AA@
  002ad	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@PFEIELHL@gen_dealloc?$AA@
  002b4	e8 00 00 00 00	 call	 _PyParallel_Guard
  002b9	85 c0		 test	 eax, eax
  002bb	74 0b		 je	 SHORT $LN32@gen_deallo
  002bd	48 c7 44 24 70
	00 00 00 00	 mov	 QWORD PTR tv178[rsp], 0
  002c6	eb 0e		 jmp	 SHORT $LN33@gen_deallo
$LN32@gen_deallo:
  002c8	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  002cd	48 83 e8 18	 sub	 rax, 24
  002d1	48 89 44 24 70	 mov	 QWORD PTR tv178[rsp], rax
$LN33@gen_deallo:
  002d6	48 8b 44 24 70	 mov	 rax, QWORD PTR tv178[rsp]
  002db	48 89 44 24 48	 mov	 QWORD PTR g$20572[rsp], rax
  002e0	48 8b 44 24 48	 mov	 rax, QWORD PTR g$20572[rsp]
  002e5	48 83 78 10 fe	 cmp	 QWORD PTR [rax+16], -2
  002ea	75 1c		 jne	 SHORT $LN34@gen_deallo
  002ec	41 b8 25 00 00
	00		 mov	 r8d, 37			; 00000025H
  002f2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@MIHLJLBH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAg?$AAe?$AAn?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  002f9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EM@HFMJMDDM@?$AAg?$AA?9?$AA?$DO?$AAg?$AAc?$AA?4?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AAG?$AAC?$AA_?$AAR?$AAE?$AAF?$AAS?$AA_?$AAU?$AAN?$AAT?$AAR@
  00300	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00306	33 c0		 xor	 eax, eax
$LN34@gen_deallo:
  00308	48 8b 44 24 48	 mov	 rax, QWORD PTR g$20572[rsp]
  0030d	48 c7 40 10 fe
	ff ff ff	 mov	 QWORD PTR [rax+16], -2
  00315	48 8b 44 24 48	 mov	 rax, QWORD PTR g$20572[rsp]
  0031a	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0031e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR g$20572[rsp]
  00323	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00326	48 89 08	 mov	 QWORD PTR [rax], rcx
  00329	48 8b 44 24 48	 mov	 rax, QWORD PTR g$20572[rsp]
  0032e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00331	48 8b 4c 24 48	 mov	 rcx, QWORD PTR g$20572[rsp]
  00336	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  0033a	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  0033e	48 8b 44 24 48	 mov	 rax, QWORD PTR g$20572[rsp]
  00343	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
  0034a	33 c0		 xor	 eax, eax
  0034c	85 c0		 test	 eax, eax
  0034e	0f 85 3f ff ff
	ff		 jne	 $LN11@gen_deallo
$LN12@gen_deallo:
$LN8@gen_deallo:

; 38   :     Py_CLEAR(gen->gi_frame);

  00354	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR gen$[rsp]
  0035c	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00361	74 5c		 je	 SHORT $LN5@gen_deallo
  00363	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0036b	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR gen$[rsp]
  00373	4c 8b 48 60	 mov	 r9, QWORD PTR [rax+96]
  00377	41 b8 26 00 00
	00		 mov	 r8d, 38			; 00000026H
  0037d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@IGGHLIPC@?4?4?2Objects?2genobject?4c?$AA@
  00384	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@PFEIELHL@gen_dealloc?$AA@
  0038b	e8 00 00 00 00	 call	 _PyParallel_Guard
  00390	85 c0		 test	 eax, eax
  00392	75 2b		 jne	 SHORT $LN5@gen_deallo
  00394	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR gen$[rsp]
  0039c	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  003a0	48 89 44 24 50	 mov	 QWORD PTR _py_tmp$20581[rsp], rax
  003a5	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR gen$[rsp]
  003ad	48 c7 40 60 00
	00 00 00	 mov	 QWORD PTR [rax+96], 0
  003b5	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _py_tmp$20581[rsp]
  003ba	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@gen_deallo:
  003bf	33 c0		 xor	 eax, eax
  003c1	85 c0		 test	 eax, eax
  003c3	75 8f		 jne	 SHORT $LN8@gen_deallo
$LN4@gen_deallo:

; 39   :     Py_CLEAR(gen->gi_code);

  003c5	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR gen$[rsp]
  003cd	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  003d2	74 5c		 je	 SHORT $LN1@gen_deallo
  003d4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  003dc	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR gen$[rsp]
  003e4	4c 8b 48 70	 mov	 r9, QWORD PTR [rax+112]
  003e8	41 b8 27 00 00
	00		 mov	 r8d, 39			; 00000027H
  003ee	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@IGGHLIPC@?4?4?2Objects?2genobject?4c?$AA@
  003f5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@PFEIELHL@gen_dealloc?$AA@
  003fc	e8 00 00 00 00	 call	 _PyParallel_Guard
  00401	85 c0		 test	 eax, eax
  00403	75 2b		 jne	 SHORT $LN1@gen_deallo
  00405	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR gen$[rsp]
  0040d	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00411	48 89 44 24 58	 mov	 QWORD PTR _py_tmp$20589[rsp], rax
  00416	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR gen$[rsp]
  0041e	48 c7 40 70 00
	00 00 00	 mov	 QWORD PTR [rax+112], 0
  00426	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _py_tmp$20589[rsp]
  0042b	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@gen_deallo:
  00430	33 c0		 xor	 eax, eax
  00432	85 c0		 test	 eax, eax
  00434	75 8f		 jne	 SHORT $LN4@gen_deallo

; 40   :     PyObject_GC_Del(gen);

  00436	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR gen$[rsp]
  0043e	e8 00 00 00 00	 call	 PyObject_GC_Del
$LN25@gen_deallo:

; 41   : }

  00443	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  0044a	c3		 ret	 0
gen_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
EXTRN	_Py_Dealloc:PROC
EXTRN	_Py_NegativeRefcount:PROC
EXTRN	_Py_RefTotal:QWORD
EXTRN	Px_DecRef:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN13
	DD	imagerel $LN13+257
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
tv81 = 48
op$ = 80
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN13:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	0f 85 e6 00 00
	00		 jne	 $LN8@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00016	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0001b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0001f	48 83 e0 20	 and	 rax, 32			; 00000020H
  00023	48 85 c0	 test	 rax, rax
  00026	75 14		 jne	 SHORT $LN6@Py_DecRef
  00028	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0002d	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00031	48 25 80 00 00
	00		 and	 rax, 128		; 00000080H
  00037	48 85 c0	 test	 rax, rax
  0003a	74 0f		 je	 SHORT $LN7@Py_DecRef
$LN6@Py_DecRef:

; 926  :             Px_DECREF(op);

  0003c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  00041	e8 00 00 00 00	 call	 Px_DecRef
  00046	e9 b1 00 00 00	 jmp	 $LN5@Py_DecRef
$LN7@Py_DecRef:

; 927  :         else if (!Px_ISPX(op)) {

  0004b	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00050	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00054	48 83 e0 02	 and	 rax, 2
  00058	48 85 c0	 test	 rax, rax
  0005b	0f 85 9b 00 00
	00		 jne	 $LN4@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;

  00061	e8 00 00 00 00	 call	 _Py_PXCTX
  00066	85 c0		 test	 eax, eax
  00068	74 02		 je	 SHORT $LN11@Py_DecRef
  0006a	eb 11		 jmp	 SHORT $LN12@Py_DecRef
$LN11@Py_DecRef:
  0006c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00073	48 ff c8	 dec	 rax
  00076	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN12@Py_DecRef:

; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  0007d	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00082	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00086	48 ff c8	 dec	 rax
  00089	48 89 44 24 30	 mov	 QWORD PTR tv81[rsp], rax
  0008e	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00093	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv81[rsp]
  00098	48 89 48 50	 mov	 QWORD PTR [rax+80], rcx
  0009c	48 83 7c 24 30
	00		 cmp	 QWORD PTR tv81[rsp], 0
  000a2	74 4e		 je	 SHORT $LN3@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);

  000a4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000ac	4c 8b 4c 24 50	 mov	 r9, QWORD PTR op$[rsp]
  000b1	41 b8 a2 03 00
	00		 mov	 r8d, 930		; 000003a2H
  000b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000c5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ca	85 c0		 test	 eax, eax
  000cc	75 22		 jne	 SHORT $LN2@Py_DecRef
  000ce	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  000d3	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000d8	7d 16		 jge	 SHORT $LN2@Py_DecRef
  000da	4c 8b 44 24 50	 mov	 r8, QWORD PTR op$[rsp]
  000df	ba a2 03 00 00	 mov	 edx, 930		; 000003a2H
  000e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000eb	e8 00 00 00 00	 call	 _Py_NegativeRefcount
$LN2@Py_DecRef:

; 931  :             } else

  000f0	eb 0a		 jmp	 SHORT $LN1@Py_DecRef
$LN3@Py_DecRef:

; 932  :                 _Py_Dealloc((PyObject *)(op));

  000f2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  000f7	e8 00 00 00 00	 call	 _Py_Dealloc
$LN1@Py_DecRef:
$LN4@Py_DecRef:
$LN5@Py_DecRef:
$LN8@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  000fc	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00100	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\objects\genobject.c
pdata	SEGMENT
$pdata$_PyGen_Send DD imagerel $LN3
	DD	imagerel $LN3+37
	DD	imagerel $unwind$_PyGen_Send
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyGen_Send DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _PyGen_Send
_TEXT	SEGMENT
gen$ = 48
arg$ = 56
_PyGen_Send PROC					; COMDAT

; 139  : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 140  :     return gen_send_ex(gen, arg, 0);

  0000e	45 33 c0	 xor	 r8d, r8d
  00011	48 8b 54 24 38	 mov	 rdx, QWORD PTR arg$[rsp]
  00016	48 8b 4c 24 30	 mov	 rcx, QWORD PTR gen$[rsp]
  0001b	e8 00 00 00 00	 call	 gen_send_ex

; 141  : }

  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	c3		 ret	 0
_PyGen_Send ENDP
_TEXT	ENDS
PUBLIC	??_C@_0M@ECPJDFO@gen_send_ex?$AA@		; `string'
PUBLIC	??_C@_1DG@IGCDDMNK@?$AAf?$AA?9?$AA?$DO?$AAf?$AA_?$AAb?$AAa?$AAc?$AAk?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAt?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAf?$AAr?$AAa?$AAm?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CE@CCFLAAI@?$AAf?$AA?9?$AA?$DO?$AAf?$AA_?$AAb?$AAa?$AAc?$AAk?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ ; `string'
PUBLIC	_Py_IncRef
PUBLIC	??_C@_0DG@NJJEFJBM@can?8t?5send?5non?9None?5value?5to?5a?5j@ ; `string'
PUBLIC	??_C@_0BM@BMEDEPAL@generator?5already?5executing?$AA@ ; `string'
EXTRN	PyErr_SetObject:PROC
EXTRN	PyObject_CallFunctionObjArgs:PROC
EXTRN	PyEval_EvalFrameEx:PROC
EXTRN	PyExc_TypeError:QWORD
EXTRN	_Py_NoneStruct:BYTE
EXTRN	PyErr_SetNone:PROC
EXTRN	PyExc_StopIteration:QWORD
EXTRN	PyErr_SetString:PROC
EXTRN	PyExc_ValueError:QWORD
EXTRN	PyThreadState_Get:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$gen_send_ex DD imagerel gen_send_ex
	DD	imagerel gen_send_ex+1089
	DD	imagerel $unwind$gen_send_ex
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gen_send_ex DD 021601H
	DD	0110116H
xdata	ENDS
;	COMDAT ??_C@_0M@ECPJDFO@gen_send_ex?$AA@
CONST	SEGMENT
??_C@_0M@ECPJDFO@gen_send_ex?$AA@ DB 'gen_send_ex', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1DG@IGCDDMNK@?$AAf?$AA?9?$AA?$DO?$AAf?$AA_?$AAb?$AAa?$AAc?$AAk?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAt?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAf?$AAr?$AAa?$AAm?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1DG@IGCDDMNK@?$AAf?$AA?9?$AA?$DO?$AAf?$AA_?$AAb?$AAa?$AAc?$AAk?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAt?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAf?$AAr?$AAa?$AAm?$AAe?$AA?$AA@ DB 'f'
	DB	00H, '-', 00H, '>', 00H, 'f', 00H, '_', 00H, 'b', 00H, 'a', 00H
	DB	'c', 00H, 'k', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 't'
	DB	00H, 's', 00H, 't', 00H, 'a', 00H, 't', 00H, 'e', 00H, '-', 00H
	DB	'>', 00H, 'f', 00H, 'r', 00H, 'a', 00H, 'm', 00H, 'e', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1CE@CCFLAAI@?$AAf?$AA?9?$AA?$DO?$AAf?$AA_?$AAb?$AAa?$AAc?$AAk?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
CONST	SEGMENT
??_C@_1CE@CCFLAAI@?$AAf?$AA?9?$AA?$DO?$AAf?$AA_?$AAb?$AAa?$AAc?$AAk?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ DB 'f'
	DB	00H, '-', 00H, '>', 00H, 'f', 00H, '_', 00H, 'b', 00H, 'a', 00H
	DB	'c', 00H, 'k', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'N'
	DB	00H, 'U', 00H, 'L', 00H, 'L', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@NJJEFJBM@can?8t?5send?5non?9None?5value?5to?5a?5j@
CONST	SEGMENT
??_C@_0DG@NJJEFJBM@can?8t?5send?5non?9None?5value?5to?5a?5j@ DB 'can''t s'
	DB	'end non-None value to a just-started generator', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@BMEDEPAL@generator?5already?5executing?$AA@
CONST	SEGMENT
??_C@_0BM@BMEDEPAL@generator?5already?5executing?$AA@ DB 'generator alrea'
	DB	'dy executing', 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT gen_send_ex
_TEXT	SEGMENT
f$ = 48
tstate$ = 56
result$ = 64
_py_tmp$20634 = 72
e$20643 = 80
_py_tmp$20652 = 88
v$20660 = 96
tb$20661 = 104
t$20659 = 112
tv84 = 120
gen$ = 144
arg$ = 152
exc$ = 160
gen_send_ex PROC					; COMDAT

; 46   : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 47   :     PyThreadState *tstate = PyThreadState_GET();

  00016	e8 00 00 00 00	 call	 PyThreadState_Get
  0001b	48 89 44 24 38	 mov	 QWORD PTR tstate$[rsp], rax

; 48   :     PyFrameObject *f = gen->gi_frame;

  00020	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR gen$[rsp]
  00028	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0002c	48 89 44 24 30	 mov	 QWORD PTR f$[rsp], rax

; 49   :     PyObject *result;
; 50   : 
; 51   :     if (gen->gi_running) {

  00031	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR gen$[rsp]
  00039	0f be 40 68	 movsx	 eax, BYTE PTR [rax+104]
  0003d	85 c0		 test	 eax, eax
  0003f	74 1a		 je	 SHORT $LN37@gen_send_e

; 52   :         PyErr_SetString(PyExc_ValueError,
; 53   :                         "generator already executing");

  00041	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@BMEDEPAL@generator?5already?5executing?$AA@
  00048	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0004f	e8 00 00 00 00	 call	 PyErr_SetString

; 54   :         return NULL;

  00054	33 c0		 xor	 eax, eax
  00056	e9 de 03 00 00	 jmp	 $LN38@gen_send_e
$LN37@gen_send_e:

; 55   :     }
; 56   :     if (f == NULL || f->f_stacktop == NULL) {

  0005b	48 83 7c 24 30
	00		 cmp	 QWORD PTR f$[rsp], 0
  00061	74 0f		 je	 SHORT $LN35@gen_send_e
  00063	48 8b 44 24 30	 mov	 rax, QWORD PTR f$[rsp]
  00068	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  00070	75 28		 jne	 SHORT $LN36@gen_send_e
$LN35@gen_send_e:

; 57   :         /* Only set exception if called from send() */
; 58   :         if (arg && !exc)

  00072	48 83 bc 24 98
	00 00 00 00	 cmp	 QWORD PTR arg$[rsp], 0
  0007b	74 16		 je	 SHORT $LN34@gen_send_e
  0007d	83 bc 24 a0 00
	00 00 00	 cmp	 DWORD PTR exc$[rsp], 0
  00085	75 0c		 jne	 SHORT $LN34@gen_send_e

; 59   :             PyErr_SetNone(PyExc_StopIteration);

  00087	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_StopIteration
  0008e	e8 00 00 00 00	 call	 PyErr_SetNone
$LN34@gen_send_e:

; 60   :         return NULL;

  00093	33 c0		 xor	 eax, eax
  00095	e9 9f 03 00 00	 jmp	 $LN38@gen_send_e
$LN36@gen_send_e:

; 61   :     }
; 62   : 
; 63   :     if (f->f_lasti == -1) {

  0009a	48 8b 44 24 30	 mov	 rax, QWORD PTR f$[rsp]
  0009f	83 b8 d0 00 00
	00 ff		 cmp	 DWORD PTR [rax+208], -1
  000a6	75 38		 jne	 SHORT $LN33@gen_send_e

; 64   :         if (arg && arg != Py_None) {

  000a8	48 83 bc 24 98
	00 00 00 00	 cmp	 QWORD PTR arg$[rsp], 0
  000b1	74 2b		 je	 SHORT $LN32@gen_send_e
  000b3	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000ba	48 39 84 24 98
	00 00 00	 cmp	 QWORD PTR arg$[rsp], rax
  000c2	74 1a		 je	 SHORT $LN32@gen_send_e

; 65   :             PyErr_SetString(PyExc_TypeError,
; 66   :                             "can't send non-None value to a "
; 67   :                             "just-started generator");

  000c4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DG@NJJEFJBM@can?8t?5send?5non?9None?5value?5to?5a?5j@
  000cb	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000d2	e8 00 00 00 00	 call	 PyErr_SetString

; 68   :             return NULL;

  000d7	33 c0		 xor	 eax, eax
  000d9	e9 5b 03 00 00	 jmp	 $LN38@gen_send_e
$LN32@gen_send_e:

; 69   :         }
; 70   :     } else {

  000de	eb 6a		 jmp	 SHORT $LN31@gen_send_e
$LN33@gen_send_e:

; 71   :         /* Push arg onto the frame's value stack */
; 72   :         result = arg ? arg : Py_None;

  000e0	48 83 bc 24 98
	00 00 00 00	 cmp	 QWORD PTR arg$[rsp], 0
  000e9	74 0f		 je	 SHORT $LN40@gen_send_e
  000eb	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR arg$[rsp]
  000f3	48 89 44 24 78	 mov	 QWORD PTR tv84[rsp], rax
  000f8	eb 0c		 jmp	 SHORT $LN41@gen_send_e
$LN40@gen_send_e:
  000fa	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00101	48 89 44 24 78	 mov	 QWORD PTR tv84[rsp], rax
$LN41@gen_send_e:
  00106	48 8b 44 24 78	 mov	 rax, QWORD PTR tv84[rsp]
  0010b	48 89 44 24 40	 mov	 QWORD PTR result$[rsp], rax

; 73   :         Py_INCREF(result);

  00110	48 8b 4c 24 40	 mov	 rcx, QWORD PTR result$[rsp]
  00115	e8 00 00 00 00	 call	 _Py_IncRef

; 74   :         *(f->f_stacktop++) = result;

  0011a	48 8b 44 24 30	 mov	 rax, QWORD PTR f$[rsp]
  0011f	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  00126	48 8b 4c 24 40	 mov	 rcx, QWORD PTR result$[rsp]
  0012b	48 89 08	 mov	 QWORD PTR [rax], rcx
  0012e	48 8b 44 24 30	 mov	 rax, QWORD PTR f$[rsp]
  00133	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  0013a	48 83 c0 08	 add	 rax, 8
  0013e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR f$[rsp]
  00143	48 89 81 a0 00
	00 00		 mov	 QWORD PTR [rcx+160], rax
$LN31@gen_send_e:

; 75   :     }
; 76   : 
; 77   :     /* Generators always return to their most recent caller, not
; 78   :      * necessarily their creator. */
; 79   :     f->f_tstate = tstate;

  0014a	48 8b 44 24 30	 mov	 rax, QWORD PTR f$[rsp]
  0014f	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tstate$[rsp]
  00154	48 89 88 c8 00
	00 00		 mov	 QWORD PTR [rax+200], rcx
$LN30@gen_send_e:

; 80   :     Py_XINCREF(tstate->frame);

  0015b	48 8b 44 24 38	 mov	 rax, QWORD PTR tstate$[rsp]
  00160	48 83 78 10 00	 cmp	 QWORD PTR [rax+16], 0
  00165	74 0e		 je	 SHORT $LN27@gen_send_e
  00167	48 8b 44 24 38	 mov	 rax, QWORD PTR tstate$[rsp]
  0016c	48 8b 48 10	 mov	 rcx, QWORD PTR [rax+16]
  00170	e8 00 00 00 00	 call	 _Py_IncRef
$LN27@gen_send_e:
  00175	33 c0		 xor	 eax, eax
  00177	85 c0		 test	 eax, eax
  00179	75 e0		 jne	 SHORT $LN30@gen_send_e

; 81   :     assert(f->f_back == NULL);

  0017b	48 8b 44 24 30	 mov	 rax, QWORD PTR f$[rsp]
  00180	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  00185	74 1c		 je	 SHORT $LN42@gen_send_e
  00187	41 b8 51 00 00
	00		 mov	 r8d, 81			; 00000051H
  0018d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@MIHLJLBH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAg?$AAe?$AAn?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00194	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CE@CCFLAAI@?$AAf?$AA?9?$AA?$DO?$AAf?$AA_?$AAb?$AAa?$AAc?$AAk?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
  0019b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001a1	33 c0		 xor	 eax, eax
$LN42@gen_send_e:

; 82   :     f->f_back = tstate->frame;

  001a3	48 8b 44 24 30	 mov	 rax, QWORD PTR f$[rsp]
  001a8	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tstate$[rsp]
  001ad	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  001b1	48 89 48 70	 mov	 QWORD PTR [rax+112], rcx

; 83   : 
; 84   :     gen->gi_running = 1;

  001b5	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR gen$[rsp]
  001bd	c6 40 68 01	 mov	 BYTE PTR [rax+104], 1

; 85   :     result = PyEval_EvalFrameEx(f, exc);

  001c1	8b 94 24 a0 00
	00 00		 mov	 edx, DWORD PTR exc$[rsp]
  001c8	48 8b 4c 24 30	 mov	 rcx, QWORD PTR f$[rsp]
  001cd	e8 00 00 00 00	 call	 PyEval_EvalFrameEx
  001d2	48 89 44 24 40	 mov	 QWORD PTR result$[rsp], rax

; 86   :     gen->gi_running = 0;

  001d7	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR gen$[rsp]
  001df	c6 40 68 00	 mov	 BYTE PTR [rax+104], 0

; 87   : 
; 88   :     /* Don't keep the reference to f_back any longer than necessary.  It
; 89   :      * may keep a chain of frames alive or it could create a reference
; 90   :      * cycle. */
; 91   :     assert(f->f_back == tstate->frame);

  001e3	48 8b 44 24 30	 mov	 rax, QWORD PTR f$[rsp]
  001e8	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tstate$[rsp]
  001ed	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  001f1	48 39 48 70	 cmp	 QWORD PTR [rax+112], rcx
  001f5	74 1c		 je	 SHORT $LN43@gen_send_e
  001f7	41 b8 5b 00 00
	00		 mov	 r8d, 91			; 0000005bH
  001fd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@MIHLJLBH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAg?$AAe?$AAn?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00204	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DG@IGCDDMNK@?$AAf?$AA?9?$AA?$DO?$AAf?$AA_?$AAb?$AAa?$AAc?$AAk?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAt?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAf?$AAr?$AAa?$AAm?$AAe?$AA?$AA@
  0020b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00211	33 c0		 xor	 eax, eax
$LN43@gen_send_e:
$LN26@gen_send_e:

; 92   :     Py_CLEAR(f->f_back);

  00213	48 8b 44 24 30	 mov	 rax, QWORD PTR f$[rsp]
  00218	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  0021d	74 53		 je	 SHORT $LN23@gen_send_e
  0021f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00227	48 8b 44 24 30	 mov	 rax, QWORD PTR f$[rsp]
  0022c	4c 8b 48 70	 mov	 r9, QWORD PTR [rax+112]
  00230	41 b8 5c 00 00
	00		 mov	 r8d, 92			; 0000005cH
  00236	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@IGGHLIPC@?4?4?2Objects?2genobject?4c?$AA@
  0023d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@ECPJDFO@gen_send_ex?$AA@
  00244	e8 00 00 00 00	 call	 _PyParallel_Guard
  00249	85 c0		 test	 eax, eax
  0024b	75 25		 jne	 SHORT $LN23@gen_send_e
  0024d	48 8b 44 24 30	 mov	 rax, QWORD PTR f$[rsp]
  00252	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00256	48 89 44 24 48	 mov	 QWORD PTR _py_tmp$20634[rsp], rax
  0025b	48 8b 44 24 30	 mov	 rax, QWORD PTR f$[rsp]
  00260	48 c7 40 70 00
	00 00 00	 mov	 QWORD PTR [rax+112], 0
  00268	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _py_tmp$20634[rsp]
  0026d	e8 00 00 00 00	 call	 _Py_DecRef
$LN23@gen_send_e:
  00272	33 c0		 xor	 eax, eax
  00274	85 c0		 test	 eax, eax
  00276	75 9b		 jne	 SHORT $LN26@gen_send_e

; 93   :     /* Clear the borrowed reference to the thread state */
; 94   :     f->f_tstate = NULL;

  00278	48 8b 44 24 30	 mov	 rax, QWORD PTR f$[rsp]
  0027d	48 c7 80 c8 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+200], 0

; 95   : 
; 96   :     /* If the generator just returned (as opposed to yielding), signal
; 97   :      * that the generator is exhausted. */
; 98   :     if (result && f->f_stacktop == NULL) {

  00288	48 83 7c 24 40
	00		 cmp	 QWORD PTR result$[rsp], 0
  0028e	0f 84 c0 00 00
	00		 je	 $LN22@gen_send_e
  00294	48 8b 44 24 30	 mov	 rax, QWORD PTR f$[rsp]
  00299	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  002a1	0f 85 ad 00 00
	00		 jne	 $LN22@gen_send_e

; 99   :         if (result == Py_None) {

  002a7	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  002ae	48 39 44 24 40	 cmp	 QWORD PTR result$[rsp], rax
  002b3	75 0e		 jne	 SHORT $LN21@gen_send_e

; 100  :             /* Delay exception instantiation if we can */
; 101  :             PyErr_SetNone(PyExc_StopIteration);

  002b5	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_StopIteration
  002bc	e8 00 00 00 00	 call	 PyErr_SetNone

; 102  :         } else {

  002c1	eb 3c		 jmp	 SHORT $LN20@gen_send_e
$LN21@gen_send_e:

; 103  :             PyObject *e = PyObject_CallFunctionObjArgs(
; 104  :                                PyExc_StopIteration, result, NULL);

  002c3	45 33 c0	 xor	 r8d, r8d
  002c6	48 8b 54 24 40	 mov	 rdx, QWORD PTR result$[rsp]
  002cb	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_StopIteration
  002d2	e8 00 00 00 00	 call	 PyObject_CallFunctionObjArgs
  002d7	48 89 44 24 50	 mov	 QWORD PTR e$20643[rsp], rax

; 105  :             if (e != NULL) {

  002dc	48 83 7c 24 50
	00		 cmp	 QWORD PTR e$20643[rsp], 0
  002e2	74 1b		 je	 SHORT $LN19@gen_send_e

; 106  :                 PyErr_SetObject(PyExc_StopIteration, e);

  002e4	48 8b 54 24 50	 mov	 rdx, QWORD PTR e$20643[rsp]
  002e9	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_StopIteration
  002f0	e8 00 00 00 00	 call	 PyErr_SetObject

; 107  :                 Py_DECREF(e);

  002f5	48 8b 4c 24 50	 mov	 rcx, QWORD PTR e$20643[rsp]
  002fa	e8 00 00 00 00	 call	 _Py_DecRef
$LN19@gen_send_e:
$LN20@gen_send_e:
$LN18@gen_send_e:

; 108  :             }
; 109  :         }
; 110  :         Py_CLEAR(result);

  002ff	48 83 7c 24 40
	00		 cmp	 QWORD PTR result$[rsp], 0
  00305	74 47		 je	 SHORT $LN15@gen_send_e
  00307	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0030f	4c 8b 4c 24 40	 mov	 r9, QWORD PTR result$[rsp]
  00314	41 b8 6e 00 00
	00		 mov	 r8d, 110		; 0000006eH
  0031a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@IGGHLIPC@?4?4?2Objects?2genobject?4c?$AA@
  00321	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@ECPJDFO@gen_send_ex?$AA@
  00328	e8 00 00 00 00	 call	 _PyParallel_Guard
  0032d	85 c0		 test	 eax, eax
  0032f	75 1d		 jne	 SHORT $LN15@gen_send_e
  00331	48 8b 44 24 40	 mov	 rax, QWORD PTR result$[rsp]
  00336	48 89 44 24 58	 mov	 QWORD PTR _py_tmp$20652[rsp], rax
  0033b	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR result$[rsp], 0
  00344	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _py_tmp$20652[rsp]
  00349	e8 00 00 00 00	 call	 _Py_DecRef
$LN15@gen_send_e:
  0034e	33 c0		 xor	 eax, eax
  00350	85 c0		 test	 eax, eax
  00352	75 ab		 jne	 SHORT $LN18@gen_send_e
$LN22@gen_send_e:

; 111  :     }
; 112  : 
; 113  :     if (!result || f->f_stacktop == NULL) {

  00354	48 83 7c 24 40
	00		 cmp	 QWORD PTR result$[rsp], 0
  0035a	74 13		 je	 SHORT $LN13@gen_send_e
  0035c	48 8b 44 24 30	 mov	 rax, QWORD PTR f$[rsp]
  00361	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  00369	0f 85 c5 00 00
	00		 jne	 $LN14@gen_send_e
$LN13@gen_send_e:

; 114  :         /* generator can't be rerun, so release the frame */
; 115  :         /* first clean reference cycle through stored exception traceback */
; 116  :         PyObject *t, *v, *tb;
; 117  :         t = f->f_exc_type;

  0036f	48 8b 44 24 30	 mov	 rax, QWORD PTR f$[rsp]
  00374	48 8b 80 b0 00
	00 00		 mov	 rax, QWORD PTR [rax+176]
  0037b	48 89 44 24 70	 mov	 QWORD PTR t$20659[rsp], rax

; 118  :         v = f->f_exc_value;

  00380	48 8b 44 24 30	 mov	 rax, QWORD PTR f$[rsp]
  00385	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  0038c	48 89 44 24 60	 mov	 QWORD PTR v$20660[rsp], rax

; 119  :         tb = f->f_exc_traceback;

  00391	48 8b 44 24 30	 mov	 rax, QWORD PTR f$[rsp]
  00396	48 8b 80 c0 00
	00 00		 mov	 rax, QWORD PTR [rax+192]
  0039d	48 89 44 24 68	 mov	 QWORD PTR tb$20661[rsp], rax

; 120  :         f->f_exc_type = NULL;

  003a2	48 8b 44 24 30	 mov	 rax, QWORD PTR f$[rsp]
  003a7	48 c7 80 b0 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+176], 0

; 121  :         f->f_exc_value = NULL;

  003b2	48 8b 44 24 30	 mov	 rax, QWORD PTR f$[rsp]
  003b7	48 c7 80 b8 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+184], 0

; 122  :         f->f_exc_traceback = NULL;

  003c2	48 8b 44 24 30	 mov	 rax, QWORD PTR f$[rsp]
  003c7	48 c7 80 c0 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+192], 0
$LN12@gen_send_e:

; 123  :         Py_XDECREF(t);

  003d2	48 83 7c 24 70
	00		 cmp	 QWORD PTR t$20659[rsp], 0
  003d8	74 0a		 je	 SHORT $LN9@gen_send_e
  003da	48 8b 4c 24 70	 mov	 rcx, QWORD PTR t$20659[rsp]
  003df	e8 00 00 00 00	 call	 _Py_DecRef
$LN9@gen_send_e:
  003e4	33 c0		 xor	 eax, eax
  003e6	85 c0		 test	 eax, eax
  003e8	75 e8		 jne	 SHORT $LN12@gen_send_e
$LN8@gen_send_e:

; 124  :         Py_XDECREF(v);

  003ea	48 83 7c 24 60
	00		 cmp	 QWORD PTR v$20660[rsp], 0
  003f0	74 0a		 je	 SHORT $LN5@gen_send_e
  003f2	48 8b 4c 24 60	 mov	 rcx, QWORD PTR v$20660[rsp]
  003f7	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@gen_send_e:
  003fc	33 c0		 xor	 eax, eax
  003fe	85 c0		 test	 eax, eax
  00400	75 e8		 jne	 SHORT $LN8@gen_send_e
$LN4@gen_send_e:

; 125  :         Py_XDECREF(tb);

  00402	48 83 7c 24 68
	00		 cmp	 QWORD PTR tb$20661[rsp], 0
  00408	74 0a		 je	 SHORT $LN1@gen_send_e
  0040a	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tb$20661[rsp]
  0040f	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@gen_send_e:
  00414	33 c0		 xor	 eax, eax
  00416	85 c0		 test	 eax, eax
  00418	75 e8		 jne	 SHORT $LN4@gen_send_e

; 126  :         gen->gi_frame = NULL;

  0041a	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR gen$[rsp]
  00422	48 c7 40 60 00
	00 00 00	 mov	 QWORD PTR [rax+96], 0

; 127  :         Py_DECREF(f);

  0042a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR f$[rsp]
  0042f	e8 00 00 00 00	 call	 _Py_DecRef
$LN14@gen_send_e:

; 128  :     }
; 129  : 
; 130  :     return result;

  00434	48 8b 44 24 40	 mov	 rax, QWORD PTR result$[rsp]
$LN38@gen_send_e:

; 131  : }

  00439	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  00440	c3		 ret	 0
gen_send_ex ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN7
	DD	imagerel $LN7+132
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 6d		 jne	 SHORT $LN2@Py_IncRef
  00012	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0001a	4c 8b 4c 24 40	 mov	 r9, QWORD PTR op$[rsp]
  0001f	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_Guard
  00038	85 c0		 test	 eax, eax
  0003a	75 12		 jne	 SHORT $LN1@Py_IncRef
  0003c	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  00041	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00045	48 83 e0 20	 and	 rax, 32			; 00000020H
  00049	48 85 c0	 test	 rax, rax
  0004c	74 31		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;

  0004e	e8 00 00 00 00	 call	 _Py_PXCTX
  00053	85 c0		 test	 eax, eax
  00055	74 02		 je	 SHORT $LN5@Py_IncRef
  00057	eb 11		 jmp	 SHORT $LN6@Py_IncRef
$LN5@Py_IncRef:
  00059	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00060	48 ff c0	 inc	 rax
  00063	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN6@Py_IncRef:

; 907  :         (((PyObject*)(op))->ob_refcnt++);

  0006a	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  0006f	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00073	48 ff c0	 inc	 rax
  00076	48 8b 4c 24 40	 mov	 rcx, QWORD PTR op$[rsp]
  0007b	48 89 41 50	 mov	 QWORD PTR [rcx+80], rax
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  0007f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00083	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CA@EKELMAO@generator?5ignored?5GeneratorExit?$AA@ ; `string'
EXTRN	PyErr_Clear:PROC
EXTRN	PyErr_ExceptionMatches:PROC
EXTRN	PyExc_RuntimeError:QWORD
EXTRN	PyExc_GeneratorExit:QWORD
;	COMDAT pdata
; File c:\src\pyparallel\objects\genobject.c
pdata	SEGMENT
$pdata$gen_close DD imagerel gen_close
	DD	imagerel gen_close+240
	DD	imagerel $unwind$gen_close
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gen_close DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_0CA@EKELMAO@generator?5ignored?5GeneratorExit?$AA@
CONST	SEGMENT
??_C@_0CA@EKELMAO@generator?5ignored?5GeneratorExit?$AA@ DB 'generator ig'
	DB	'nored GeneratorExit', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT gen_close
_TEXT	SEGMENT
yf$ = 32
retval$ = 40
err$ = 48
gen$ = 80
args$ = 88
gen_close PROC						; COMDAT

; 199  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 200  :     PyObject *retval;
; 201  :     PyObject *yf = gen_yf(gen);

  0000e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR gen$[rsp]
  00013	e8 00 00 00 00	 call	 gen_yf
  00018	48 89 44 24 20	 mov	 QWORD PTR yf$[rsp], rax

; 202  :     int err = 0;

  0001d	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR err$[rsp], 0

; 203  : 
; 204  :     if (yf) {

  00025	48 83 7c 24 20
	00		 cmp	 QWORD PTR yf$[rsp], 0
  0002b	74 2a		 je	 SHORT $LN5@gen_close

; 205  :         gen->gi_running = 1;

  0002d	48 8b 44 24 50	 mov	 rax, QWORD PTR gen$[rsp]
  00032	c6 40 68 01	 mov	 BYTE PTR [rax+104], 1

; 206  :         err = gen_close_iter(yf);

  00036	48 8b 4c 24 20	 mov	 rcx, QWORD PTR yf$[rsp]
  0003b	e8 00 00 00 00	 call	 gen_close_iter
  00040	89 44 24 30	 mov	 DWORD PTR err$[rsp], eax

; 207  :         gen->gi_running = 0;

  00044	48 8b 44 24 50	 mov	 rax, QWORD PTR gen$[rsp]
  00049	c6 40 68 00	 mov	 BYTE PTR [rax+104], 0

; 208  :         Py_DECREF(yf);

  0004d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR yf$[rsp]
  00052	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@gen_close:

; 209  :     }
; 210  :     if (err == 0)

  00057	83 7c 24 30 00	 cmp	 DWORD PTR err$[rsp], 0
  0005c	75 0c		 jne	 SHORT $LN4@gen_close

; 211  :         PyErr_SetNone(PyExc_GeneratorExit);

  0005e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_GeneratorExit
  00065	e8 00 00 00 00	 call	 PyErr_SetNone
$LN4@gen_close:

; 212  :     retval = gen_send_ex(gen, Py_None, 1);

  0006a	41 b8 01 00 00
	00		 mov	 r8d, 1
  00070	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_Py_NoneStruct
  00077	48 8b 4c 24 50	 mov	 rcx, QWORD PTR gen$[rsp]
  0007c	e8 00 00 00 00	 call	 gen_send_ex
  00081	48 89 44 24 28	 mov	 QWORD PTR retval$[rsp], rax

; 213  :     if (retval) {

  00086	48 83 7c 24 28
	00		 cmp	 QWORD PTR retval$[rsp], 0
  0008c	74 21		 je	 SHORT $LN3@gen_close

; 214  :         Py_DECREF(retval);

  0008e	48 8b 4c 24 28	 mov	 rcx, QWORD PTR retval$[rsp]
  00093	e8 00 00 00 00	 call	 _Py_DecRef

; 215  :         PyErr_SetString(PyExc_RuntimeError,
; 216  :                         "generator ignored GeneratorExit");

  00098	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CA@EKELMAO@generator?5ignored?5GeneratorExit?$AA@
  0009f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeError
  000a6	e8 00 00 00 00	 call	 PyErr_SetString

; 217  :         return NULL;

  000ab	33 c0		 xor	 eax, eax
  000ad	eb 3c		 jmp	 SHORT $LN6@gen_close
$LN3@gen_close:

; 218  :     }
; 219  :     if (PyErr_ExceptionMatches(PyExc_StopIteration)
; 220  :         || PyErr_ExceptionMatches(PyExc_GeneratorExit)) {

  000af	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_StopIteration
  000b6	e8 00 00 00 00	 call	 PyErr_ExceptionMatches
  000bb	85 c0		 test	 eax, eax
  000bd	75 10		 jne	 SHORT $LN1@gen_close
  000bf	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_GeneratorExit
  000c6	e8 00 00 00 00	 call	 PyErr_ExceptionMatches
  000cb	85 c0		 test	 eax, eax
  000cd	74 1a		 je	 SHORT $LN2@gen_close
$LN1@gen_close:

; 221  :         PyErr_Clear();          /* ignore these errors */

  000cf	e8 00 00 00 00	 call	 PyErr_Clear

; 222  :         Py_INCREF(Py_None);

  000d4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  000db	e8 00 00 00 00	 call	 _Py_IncRef

; 223  :         return Py_None;

  000e0	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000e7	eb 02		 jmp	 SHORT $LN6@gen_close
$LN2@gen_close:

; 224  :     }
; 225  :     return NULL;

  000e9	33 c0		 xor	 eax, eax
$LN6@gen_close:

; 226  : }

  000eb	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000ef	c3		 ret	 0
gen_close ENDP
_TEXT	ENDS
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
EXTRN	PyObject_CallFunction:PROC
EXTRN	PyErr_WriteUnraisable:PROC
EXTRN	PyExc_AttributeError:QWORD
EXTRN	_PyObject_GetAttrId:PROC
EXTRN	_tls_index:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$gen_close_iter DD imagerel gen_close_iter
	DD	imagerel gen_close_iter+239
	DD	imagerel $unwind$gen_close_iter
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gen_close_iter DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT gen_close_iter
_TEXT	SEGMENT
retval$ = 32
meth$20705 = 40
yf$ = 64
gen_close_iter PROC					; COMDAT

; 153  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 154  :     PyObject *retval = NULL;

  00009	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR retval$[rsp], 0

; 155  :     _Py_IDENTIFIER(close);
; 156  : 
; 157  :     if (PyGen_CheckExact(yf)) {

  00012	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyGen_Type
  00019	48 8b 4c 24 40	 mov	 rcx, QWORD PTR yf$[rsp]
  0001e	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00022	75 28		 jne	 SHORT $LN11@gen_close_

; 158  :         retval = gen_close((PyGenObject *)yf, NULL);

  00024	33 d2		 xor	 edx, edx
  00026	48 8b 4c 24 40	 mov	 rcx, QWORD PTR yf$[rsp]
  0002b	e8 00 00 00 00	 call	 gen_close
  00030	48 89 44 24 20	 mov	 QWORD PTR retval$[rsp], rax

; 159  :         if (retval == NULL)

  00035	48 83 7c 24 20
	00		 cmp	 QWORD PTR retval$[rsp], 0
  0003b	75 0a		 jne	 SHORT $LN10@gen_close_

; 160  :             return -1;

  0003d	b8 ff ff ff ff	 mov	 eax, -1
  00042	e9 a3 00 00 00	 jmp	 $LN12@gen_close_
$LN10@gen_close_:

; 161  :     } else {

  00047	e9 84 00 00 00	 jmp	 $LN9@gen_close_
$LN11@gen_close_:

; 162  :         PyObject *meth = _PyObject_GetAttrId(yf, &PyId_close);

  0004c	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId_close@?1??gen_close_iter@@9@9
  00051	8b c0		 mov	 eax, eax
  00053	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00059	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00062	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00066	48 8b d0	 mov	 rdx, rax
  00069	48 8b 4c 24 40	 mov	 rcx, QWORD PTR yf$[rsp]
  0006e	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00073	48 89 44 24 28	 mov	 QWORD PTR meth$20705[rsp], rax

; 163  :         if (meth == NULL) {

  00078	48 83 7c 24 28
	00		 cmp	 QWORD PTR meth$20705[rsp], 0
  0007e	75 21		 jne	 SHORT $LN8@gen_close_

; 164  :             if (!PyErr_ExceptionMatches(PyExc_AttributeError))

  00080	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_AttributeError
  00087	e8 00 00 00 00	 call	 PyErr_ExceptionMatches
  0008c	85 c0		 test	 eax, eax
  0008e	75 0a		 jne	 SHORT $LN7@gen_close_

; 165  :                 PyErr_WriteUnraisable(yf);

  00090	48 8b 4c 24 40	 mov	 rcx, QWORD PTR yf$[rsp]
  00095	e8 00 00 00 00	 call	 PyErr_WriteUnraisable
$LN7@gen_close_:

; 166  :             PyErr_Clear();

  0009a	e8 00 00 00 00	 call	 PyErr_Clear

; 167  :         } else {

  0009f	eb 2f		 jmp	 SHORT $LN6@gen_close_
$LN8@gen_close_:

; 168  :             retval = PyObject_CallFunction(meth, "");

  000a1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  000a8	48 8b 4c 24 28	 mov	 rcx, QWORD PTR meth$20705[rsp]
  000ad	e8 00 00 00 00	 call	 PyObject_CallFunction
  000b2	48 89 44 24 20	 mov	 QWORD PTR retval$[rsp], rax

; 169  :             Py_DECREF(meth);

  000b7	48 8b 4c 24 28	 mov	 rcx, QWORD PTR meth$20705[rsp]
  000bc	e8 00 00 00 00	 call	 _Py_DecRef

; 170  :             if (retval == NULL)

  000c1	48 83 7c 24 20
	00		 cmp	 QWORD PTR retval$[rsp], 0
  000c7	75 07		 jne	 SHORT $LN5@gen_close_

; 171  :                 return -1;

  000c9	b8 ff ff ff ff	 mov	 eax, -1
  000ce	eb 1a		 jmp	 SHORT $LN12@gen_close_
$LN5@gen_close_:
$LN6@gen_close_:
$LN9@gen_close_:
$LN4@gen_close_:

; 172  :         }
; 173  :     }
; 174  :     Py_XDECREF(retval);

  000d0	48 83 7c 24 20
	00		 cmp	 QWORD PTR retval$[rsp], 0
  000d6	74 0a		 je	 SHORT $LN1@gen_close_
  000d8	48 8b 4c 24 20	 mov	 rcx, QWORD PTR retval$[rsp]
  000dd	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@gen_close_:
  000e2	33 c0		 xor	 eax, eax
  000e4	85 c0		 test	 eax, eax
  000e6	75 e8		 jne	 SHORT $LN4@gen_close_

; 175  :     return 0;

  000e8	33 c0		 xor	 eax, eax
$LN12@gen_close_:

; 176  : }

  000ea	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000ee	c3		 ret	 0
gen_close_iter ENDP
_TEXT	ENDS
PUBLIC	??_C@_1DA@EEAJMAPA@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AAy?$AAt?$AAe?$AAc?$AAo?$AAd?$AAe?$AA?$CJ?$AA?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$gen_yf DD imagerel gen_yf
	DD	imagerel gen_yf+221
	DD	imagerel $unwind$gen_yf
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gen_yf DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_1DA@EEAJMAPA@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AAy?$AAt?$AAe?$AAc?$AAo?$AAd?$AAe?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DA@EEAJMAPA@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AAy?$AAt?$AAe?$AAc?$AAo?$AAd?$AAe?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 's', 00H
	DB	'_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, '('
	DB	00H, 'b', 00H, 'y', 00H, 't', 00H, 'e', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, ')', 00H, 00H, 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT gen_yf
_TEXT	SEGMENT
yf$ = 32
f$ = 40
code$20728 = 48
bytecode$20727 = 56
gen$ = 80
gen_yf	PROC						; COMDAT

; 180  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 181  :     PyObject *yf = NULL;

  00009	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR yf$[rsp], 0

; 182  :     PyFrameObject *f = gen->gi_frame;

  00012	48 8b 44 24 50	 mov	 rax, QWORD PTR gen$[rsp]
  00017	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0001b	48 89 44 24 28	 mov	 QWORD PTR f$[rsp], rax

; 183  : 
; 184  :     if (f && f->f_stacktop) {

  00020	48 83 7c 24 28
	00		 cmp	 QWORD PTR f$[rsp], 0
  00026	0f 84 a7 00 00
	00		 je	 $LN2@gen_yf
  0002c	48 8b 44 24 28	 mov	 rax, QWORD PTR f$[rsp]
  00031	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  00039	0f 84 94 00 00
	00		 je	 $LN2@gen_yf

; 185  :         PyObject *bytecode = f->f_code->co_code;

  0003f	48 8b 44 24 28	 mov	 rax, QWORD PTR f$[rsp]
  00044	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  00048	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  0004c	48 89 44 24 38	 mov	 QWORD PTR bytecode$20727[rsp], rax

; 186  :         unsigned char *code = (unsigned char *)PyBytes_AS_STRING(bytecode);

  00051	48 8b 44 24 38	 mov	 rax, QWORD PTR bytecode$20727[rsp]
  00056	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0005a	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00060	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  00065	85 c0		 test	 eax, eax
  00067	75 1c		 jne	 SHORT $LN5@gen_yf
  00069	41 b8 ba 00 00
	00		 mov	 r8d, 186		; 000000baH
  0006f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@MIHLJLBH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAg?$AAe?$AAn?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00076	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@EEAJMAPA@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AAy?$AAt?$AAe?$AAc?$AAo?$AAd?$AAe?$AA?$CJ?$AA?$AA@
  0007d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00083	33 c0		 xor	 eax, eax
$LN5@gen_yf:
  00085	48 8b 44 24 38	 mov	 rax, QWORD PTR bytecode$20727[rsp]
  0008a	48 83 c0 78	 add	 rax, 120		; 00000078H
  0008e	48 89 44 24 30	 mov	 QWORD PTR code$20728[rsp], rax

; 187  : 
; 188  :         if (code[f->f_lasti + 1] != YIELD_FROM)

  00093	48 8b 44 24 28	 mov	 rax, QWORD PTR f$[rsp]
  00098	8b 80 d0 00 00
	00		 mov	 eax, DWORD PTR [rax+208]
  0009e	ff c0		 inc	 eax
  000a0	48 98		 cdqe
  000a2	48 8b 4c 24 30	 mov	 rcx, QWORD PTR code$20728[rsp]
  000a7	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  000ab	83 f8 48	 cmp	 eax, 72			; 00000048H
  000ae	74 04		 je	 SHORT $LN1@gen_yf

; 189  :             return NULL;

  000b0	33 c0		 xor	 eax, eax
  000b2	eb 24		 jmp	 SHORT $LN3@gen_yf
$LN1@gen_yf:

; 190  :         yf = f->f_stacktop[-1];

  000b4	48 8b 44 24 28	 mov	 rax, QWORD PTR f$[rsp]
  000b9	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  000c0	48 8b 40 f8	 mov	 rax, QWORD PTR [rax-8]
  000c4	48 89 44 24 20	 mov	 QWORD PTR yf$[rsp], rax

; 191  :         Py_INCREF(yf);

  000c9	48 8b 4c 24 20	 mov	 rcx, QWORD PTR yf$[rsp]
  000ce	e8 00 00 00 00	 call	 _Py_IncRef
$LN2@gen_yf:

; 192  :     }
; 193  : 
; 194  :     return yf;

  000d3	48 8b 44 24 20	 mov	 rax, QWORD PTR yf$[rsp]
$LN3@gen_yf:

; 195  : }

  000d8	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000dc	c3		 ret	 0
gen_yf	ENDP
_TEXT	ENDS
PUBLIC	??_C@_1KG@EPNIMMJI@?$AAP?$AAy?$AAT?$AAy?$AAp?$AAe?$AA_?$AAI?$AAS?$AA_?$AAG?$AAC?$AA?$CI?$AAP?$AAy?$AA_?$AAT?$AAY?$AAP?$AAE?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?$CJ?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_@ ; `string'
PUBLIC	??_C@_07CCNAJBHC@gen_del?$AA@			; `string'
PUBLIC	??_C@_1CI@JJIGMCON@?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAo?$AAb?$AA_?$AAr?$AAe?$AAf?$AAc?$AAn?$AAt?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CK@GBMONCHI@?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAo?$AAb?$AA_?$AAr?$AAe?$AAf?$AAc?$AAn?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@ ; `string'
EXTRN	_Py_NewReference:PROC
EXTRN	PyErr_Restore:PROC
EXTRN	PyErr_Fetch:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$gen_del DD imagerel gen_del
	DD	imagerel gen_del+578
	DD	imagerel $unwind$gen_del
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gen_del DD 020c01H
	DD	011010cH
xdata	ENDS
;	COMDAT ??_C@_1KG@EPNIMMJI@?$AAP?$AAy?$AAT?$AAy?$AAp?$AAe?$AA_?$AAI?$AAS?$AA_?$AAG?$AAC?$AA?$CI?$AAP?$AAy?$AA_?$AAT?$AAY?$AAP?$AAE?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?$CJ?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_@
CONST	SEGMENT
??_C@_1KG@EPNIMMJI@?$AAP?$AAy?$AAT?$AAy?$AAp?$AAe?$AA_?$AAI?$AAS?$AA_?$AAG?$AAC?$AA?$CI?$AAP?$AAy?$AA_?$AAT?$AAY?$AAP?$AAE?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?$CJ?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_@ DB 'P'
	DB	00H, 'y', 00H, 'T', 00H, 'y', 00H, 'p', 00H, 'e', 00H, '_', 00H
	DB	'I', 00H, 'S', 00H, '_', 00H, 'G', 00H, 'C', 00H, '(', 00H, 'P'
	DB	00H, 'y', 00H, '_', 00H, 'T', 00H, 'Y', 00H, 'P', 00H, 'E', 00H
	DB	'(', 00H, 's', 00H, 'e', 00H, 'l', 00H, 'f', 00H, ')', 00H, ')'
	DB	00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, '_', 00H, 'P', 00H
	DB	'y', 00H, '_', 00H, 'A', 00H, 'S', 00H, '_', 00H, 'G', 00H, 'C'
	DB	00H, '(', 00H, 's', 00H, 'e', 00H, 'l', 00H, 'f', 00H, ')', 00H
	DB	'-', 00H, '>', 00H, 'g', 00H, 'c', 00H, '.', 00H, 'g', 00H, 'c'
	DB	00H, '_', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 's', 00H, ' ', 00H
	DB	'!', 00H, '=', 00H, ' ', 00H, '_', 00H, 'P', 00H, 'y', 00H, 'G'
	DB	00H, 'C', 00H, '_', 00H, 'R', 00H, 'E', 00H, 'F', 00H, 'S', 00H
	DB	'_', 00H, 'U', 00H, 'N', 00H, 'T', 00H, 'R', 00H, 'A', 00H, 'C'
	DB	00H, 'K', 00H, 'E', 00H, 'D', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07CCNAJBHC@gen_del?$AA@
CONST	SEGMENT
??_C@_07CCNAJBHC@gen_del?$AA@ DB 'gen_del', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1CI@JJIGMCON@?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAo?$AAb?$AA_?$AAr?$AAe?$AAf?$AAc?$AAn?$AAt?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1CI@JJIGMCON@?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAo?$AAb?$AA_?$AAr?$AAe?$AAf?$AAc?$AAn?$AAt?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@ DB 's'
	DB	00H, 'e', 00H, 'l', 00H, 'f', 00H, '-', 00H, '>', 00H, 'o', 00H
	DB	'b', 00H, '_', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'c', 00H, 'n'
	DB	00H, 't', 00H, ' ', 00H, '>', 00H, ' ', 00H, '0', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@GBMONCHI@?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAo?$AAb?$AA_?$AAr?$AAe?$AAf?$AAc?$AAn?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1CK@GBMONCHI@?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAo?$AAb?$AA_?$AAr?$AAe?$AAf?$AAc?$AAn?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@ DB 's'
	DB	00H, 'e', 00H, 'l', 00H, 'f', 00H, '-', 00H, '>', 00H, 'o', 00H
	DB	'b', 00H, '_', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'c', 00H, 'n'
	DB	00H, 't', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '0', 00H
	DB	00H, 00H					; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT gen_del
_TEXT	SEGMENT
error_type$ = 48
res$ = 56
error_value$ = 64
gen$ = 72
error_traceback$ = 80
refcnt$20780 = 88
tv128 = 96
tv140 = 104
tv138 = 108
tv149 = 112
self$ = 144
gen_del	PROC						; COMDAT

; 230  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 231  :     PyObject *res;
; 232  :     PyObject *error_type, *error_value, *error_traceback;
; 233  :     PyGenObject *gen = (PyGenObject *)self;

  0000c	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00014	48 89 44 24 48	 mov	 QWORD PTR gen$[rsp], rax

; 234  : 
; 235  :     if (gen->gi_frame == NULL || gen->gi_frame->f_stacktop == NULL)

  00019	48 8b 44 24 48	 mov	 rax, QWORD PTR gen$[rsp]
  0001e	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00023	74 13		 je	 SHORT $LN4@gen_del
  00025	48 8b 44 24 48	 mov	 rax, QWORD PTR gen$[rsp]
  0002a	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0002e	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  00036	75 05		 jne	 SHORT $LN5@gen_del
$LN4@gen_del:

; 236  :         /* Generator isn't paused, so no need to close */
; 237  :         return;

  00038	e9 fd 01 00 00	 jmp	 $LN6@gen_del
$LN5@gen_del:

; 238  : 
; 239  :     /* Temporarily resurrect the object. */
; 240  :     assert(self->ob_refcnt == 0);

  0003d	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00045	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  0004a	74 1c		 je	 SHORT $LN8@gen_del
  0004c	41 b8 f0 00 00
	00		 mov	 r8d, 240		; 000000f0H
  00052	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@MIHLJLBH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAg?$AAe?$AAn?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00059	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@GBMONCHI@?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAo?$AAb?$AA_?$AAr?$AAe?$AAf?$AAc?$AAn?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@
  00060	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00066	33 c0		 xor	 eax, eax
$LN8@gen_del:

; 241  :     self->ob_refcnt = 1;

  00068	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00070	48 c7 40 50 01
	00 00 00	 mov	 QWORD PTR [rax+80], 1

; 242  : 
; 243  :     /* Save the current exception, if any. */
; 244  :     PyErr_Fetch(&error_type, &error_value, &error_traceback);

  00078	4c 8d 44 24 50	 lea	 r8, QWORD PTR error_traceback$[rsp]
  0007d	48 8d 54 24 40	 lea	 rdx, QWORD PTR error_value$[rsp]
  00082	48 8d 4c 24 30	 lea	 rcx, QWORD PTR error_type$[rsp]
  00087	e8 00 00 00 00	 call	 PyErr_Fetch

; 245  : 
; 246  :     res = gen_close(gen, NULL);

  0008c	33 d2		 xor	 edx, edx
  0008e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR gen$[rsp]
  00093	e8 00 00 00 00	 call	 gen_close
  00098	48 89 44 24 38	 mov	 QWORD PTR res$[rsp], rax

; 247  : 
; 248  :     if (res == NULL)

  0009d	48 83 7c 24 38
	00		 cmp	 QWORD PTR res$[rsp], 0
  000a3	75 0f		 jne	 SHORT $LN3@gen_del

; 249  :         PyErr_WriteUnraisable(self);

  000a5	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  000ad	e8 00 00 00 00	 call	 PyErr_WriteUnraisable

; 250  :     else

  000b2	eb 0a		 jmp	 SHORT $LN2@gen_del
$LN3@gen_del:

; 251  :         Py_DECREF(res);

  000b4	48 8b 4c 24 38	 mov	 rcx, QWORD PTR res$[rsp]
  000b9	e8 00 00 00 00	 call	 _Py_DecRef
$LN2@gen_del:

; 252  : 
; 253  :     /* Restore the saved exception. */
; 254  :     PyErr_Restore(error_type, error_value, error_traceback);

  000be	4c 8b 44 24 50	 mov	 r8, QWORD PTR error_traceback$[rsp]
  000c3	48 8b 54 24 40	 mov	 rdx, QWORD PTR error_value$[rsp]
  000c8	48 8b 4c 24 30	 mov	 rcx, QWORD PTR error_type$[rsp]
  000cd	e8 00 00 00 00	 call	 PyErr_Restore

; 255  : 
; 256  :     /* Undo the temporary resurrection; can't use DECREF here, it would
; 257  :      * cause a recursive call.
; 258  :      */
; 259  :     assert(self->ob_refcnt > 0);

  000d2	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  000da	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000df	7f 1c		 jg	 SHORT $LN9@gen_del
  000e1	41 b8 03 01 00
	00		 mov	 r8d, 259		; 00000103H
  000e7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@MIHLJLBH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAg?$AAe?$AAn?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  000ee	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CI@JJIGMCON@?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAo?$AAb?$AA_?$AAr?$AAe?$AAf?$AAc?$AAn?$AAt?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@
  000f5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000fb	33 c0		 xor	 eax, eax
$LN9@gen_del:

; 260  :     if (--self->ob_refcnt == 0)

  000fd	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00105	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00109	48 ff c8	 dec	 rax
  0010c	48 89 44 24 60	 mov	 QWORD PTR tv128[rsp], rax
  00111	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00119	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tv128[rsp]
  0011e	48 89 48 50	 mov	 QWORD PTR [rax+80], rcx
  00122	48 83 7c 24 60
	00		 cmp	 QWORD PTR tv128[rsp], 0
  00128	75 05		 jne	 SHORT $LN1@gen_del

; 261  :         return; /* this is the normal path out */

  0012a	e9 0b 01 00 00	 jmp	 $LN6@gen_del
$LN1@gen_del:

; 262  : 
; 263  :     /* close() resurrected it!  Make it look like the original Py_DECREF
; 264  :      * never happened.
; 265  :      */
; 266  :     {
; 267  :         Py_ssize_t refcnt = self->ob_refcnt;

  0012f	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00137	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  0013b	48 89 44 24 58	 mov	 QWORD PTR refcnt$20780[rsp], rax

; 268  :         _Py_NewReference(self);

  00140	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00148	e8 00 00 00 00	 call	 _Py_NewReference

; 269  :         self->ob_refcnt = refcnt;

  0014d	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00155	48 8b 4c 24 58	 mov	 rcx, QWORD PTR refcnt$20780[rsp]
  0015a	48 89 48 50	 mov	 QWORD PTR [rax+80], rcx

; 270  :     }
; 271  :     assert(PyType_IS_GC(Py_TYPE(self)) &&
; 272  :            _Py_AS_GC(self)->gc.gc_refs != _PyGC_REFS_UNTRACKED);

  0015e	e8 00 00 00 00	 call	 _Py_PXCTX
  00163	85 c0		 test	 eax, eax
  00165	74 0a		 je	 SHORT $LN12@gen_del
  00167	c7 44 24 68 00
	00 00 00	 mov	 DWORD PTR tv140[rsp], 0
  0016f	eb 35		 jmp	 SHORT $LN13@gen_del
$LN12@gen_del:
  00171	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00179	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0017d	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00183	25 00 40 00 00	 and	 eax, 16384		; 00004000H
  00188	85 c0		 test	 eax, eax
  0018a	74 0a		 je	 SHORT $LN10@gen_del
  0018c	c7 44 24 6c 01
	00 00 00	 mov	 DWORD PTR tv138[rsp], 1
  00194	eb 08		 jmp	 SHORT $LN11@gen_del
$LN10@gen_del:
  00196	c7 44 24 6c 00
	00 00 00	 mov	 DWORD PTR tv138[rsp], 0
$LN11@gen_del:
  0019e	8b 44 24 6c	 mov	 eax, DWORD PTR tv138[rsp]
  001a2	89 44 24 68	 mov	 DWORD PTR tv140[rsp], eax
$LN13@gen_del:
  001a6	83 7c 24 68 00	 cmp	 DWORD PTR tv140[rsp], 0
  001ab	74 55		 je	 SHORT $LN16@gen_del
  001ad	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  001b5	4c 8b 8c 24 90
	00 00 00	 mov	 r9, QWORD PTR self$[rsp]
  001bd	41 b8 10 01 00
	00		 mov	 r8d, 272		; 00000110H
  001c3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@IGGHLIPC@?4?4?2Objects?2genobject?4c?$AA@
  001ca	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07CCNAJBHC@gen_del?$AA@
  001d1	e8 00 00 00 00	 call	 _PyParallel_Guard
  001d6	85 c0		 test	 eax, eax
  001d8	74 0b		 je	 SHORT $LN14@gen_del
  001da	48 c7 44 24 70
	00 00 00 00	 mov	 QWORD PTR tv149[rsp], 0
  001e3	eb 11		 jmp	 SHORT $LN15@gen_del
$LN14@gen_del:
  001e5	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  001ed	48 83 e8 18	 sub	 rax, 24
  001f1	48 89 44 24 70	 mov	 QWORD PTR tv149[rsp], rax
$LN15@gen_del:
  001f6	48 8b 44 24 70	 mov	 rax, QWORD PTR tv149[rsp]
  001fb	48 83 78 10 fe	 cmp	 QWORD PTR [rax+16], -2
  00200	75 1c		 jne	 SHORT $LN17@gen_del
$LN16@gen_del:
  00202	41 b8 10 01 00
	00		 mov	 r8d, 272		; 00000110H
  00208	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@MIHLJLBH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAg?$AAe?$AAn?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  0020f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1KG@EPNIMMJI@?$AAP?$AAy?$AAT?$AAy?$AAp?$AAe?$AA_?$AAI?$AAS?$AA_?$AAG?$AAC?$AA?$CI?$AAP?$AAy?$AA_?$AAT?$AAY?$AAP?$AAE?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?$CJ?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA_@
  00216	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0021c	33 c0		 xor	 eax, eax
$LN17@gen_del:

; 273  : 
; 274  :     /* If Py_REF_DEBUG, _Py_NewReference bumped _Py_RefTotal, so
; 275  :      * we need to undo that. */
; 276  :     _Py_DEC_REFTOTAL;

  0021e	e8 00 00 00 00	 call	 _Py_PXCTX
  00223	85 c0		 test	 eax, eax
  00225	74 02		 je	 SHORT $LN18@gen_del
  00227	eb 11		 jmp	 SHORT $LN19@gen_del
$LN18@gen_del:
  00229	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00230	48 ff c8	 dec	 rax
  00233	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN19@gen_del:
$LN6@gen_del:

; 277  :     /* If Py_TRACE_REFS, _Py_NewReference re-added self to the object
; 278  :      * chain, so no more to do there.
; 279  :      * If COUNT_ALLOCS, the original decref bumped tp_frees, and
; 280  :      * _Py_NewReference bumped tp_allocs:  both of those need to be
; 281  :      * undone.
; 282  :      */
; 283  : #ifdef COUNT_ALLOCS
; 284  :     --(Py_TYPE(self)->tp_frees);
; 285  :     --(Py_TYPE(self)->tp_allocs);
; 286  : #endif
; 287  : }

  0023a	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  00241	c3		 ret	 0
gen_del	ENDP
_TEXT	ENDS
PUBLIC	??_C@_0EM@DNMJHJBL@exceptions?5must?5be?5classes?5or?5in@ ; `string'
PUBLIC	??_C@_0DB@DAOEGLML@instance?5exception?5may?5not?5have?5@ ; `string'
PUBLIC	??_C@_0DC@KPGEFMOD@throw?$CI?$CJ?5third?5argument?5must?5be?5a@ ; `string'
PUBLIC	_PyGen_FetchStopIterationValue
PUBLIC	??_C@_1BE@OMLJMPNF@?$AAr?$AAe?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy?$AAf?$AA?$AA@ ; `string'
EXTRN	PyErr_Format:PROC
EXTRN	PyException_GetTraceback:PROC
EXTRN	PyErr_NormalizeException:PROC
EXTRN	PyTraceBack_Type:BYTE
EXTRN	PyObject_CallObject:PROC
EXTRN	PyErr_GivenExceptionMatches:PROC
EXTRN	PyArg_UnpackTuple:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$gen_throw DD imagerel gen_throw
	DD	imagerel gen_throw+1272
	DD	imagerel $unwind$gen_throw
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gen_throw DD 021101H
	DD	0130111H
xdata	ENDS
;	COMDAT ??_C@_0EM@DNMJHJBL@exceptions?5must?5be?5classes?5or?5in@
CONST	SEGMENT
??_C@_0EM@DNMJHJBL@exceptions?5must?5be?5classes?5or?5in@ DB 'exceptions '
	DB	'must be classes or instances deriving from BaseException, not'
	DB	' %s', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@DAOEGLML@instance?5exception?5may?5not?5have?5@
CONST	SEGMENT
??_C@_0DB@DAOEGLML@instance?5exception?5may?5not?5have?5@ DB 'instance ex'
	DB	'ception may not have a separate value', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@KPGEFMOD@throw?$CI?$CJ?5third?5argument?5must?5be?5a@
CONST	SEGMENT
??_C@_0DC@KPGEFMOD@throw?$CI?$CJ?5third?5argument?5must?5be?5a@ DB 'throw'
	DB	'() third argument must be a traceback object', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BE@OMLJMPNF@?$AAr?$AAe?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy?$AAf?$AA?$AA@
CONST	SEGMENT
??_C@_1BE@OMLJMPNF@?$AAr?$AAe?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy?$AAf?$AA?$AA@ DB 'r'
	DB	00H, 'e', 00H, 't', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H
	DB	'y', 00H, 'f', 00H, 00H, 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT gen_throw
_TEXT	SEGMENT
yf$ = 64
val$ = 72
typ$ = 80
tb$ = 88
ret$20807 = 96
err$20808 = 104
meth$20817 = 112
val$20827 = 120
tv156 = 128
gen$ = 160
args$ = 168
gen_throw PROC						; COMDAT

; 297  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 298  :     PyObject *typ;
; 299  :     PyObject *tb = NULL;

  00011	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR tb$[rsp], 0

; 300  :     PyObject *val = NULL;

  0001a	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR val$[rsp], 0

; 301  :     PyObject *yf = gen_yf(gen);

  00023	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR gen$[rsp]
  0002b	e8 00 00 00 00	 call	 gen_yf
  00030	48 89 44 24 40	 mov	 QWORD PTR yf$[rsp], rax

; 302  :     _Py_IDENTIFIER(throw);
; 303  : 
; 304  :     if (!PyArg_UnpackTuple(args, "throw", 1, 3, &typ, &val, &tb))

  00035	48 8d 44 24 58	 lea	 rax, QWORD PTR tb$[rsp]
  0003a	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  0003f	48 8d 44 24 48	 lea	 rax, QWORD PTR val$[rsp]
  00044	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00049	48 8d 44 24 50	 lea	 rax, QWORD PTR typ$[rsp]
  0004e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00053	41 b9 03 00 00
	00		 mov	 r9d, 3
  00059	41 b8 01 00 00
	00		 mov	 r8d, 1
  0005f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05JFAPCGDM@throw?$AA@
  00066	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  0006e	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00073	85 c0		 test	 eax, eax
  00075	75 07		 jne	 SHORT $LN41@gen_throw

; 305  :         return NULL;

  00077	33 c0		 xor	 eax, eax
  00079	e9 72 04 00 00	 jmp	 $LN42@gen_throw
$LN41@gen_throw:

; 306  : 
; 307  :     if (yf) {

  0007e	48 83 7c 24 40
	00		 cmp	 QWORD PTR yf$[rsp], 0
  00084	0f 84 6d 02 00
	00		 je	 $LN40@gen_throw

; 308  :         PyObject *ret;
; 309  :         int err;
; 310  :         if (PyErr_GivenExceptionMatches(typ, PyExc_GeneratorExit)) {

  0008a	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR PyExc_GeneratorExit
  00091	48 8b 4c 24 50	 mov	 rcx, QWORD PTR typ$[rsp]
  00096	e8 00 00 00 00	 call	 PyErr_GivenExceptionMatches
  0009b	85 c0		 test	 eax, eax
  0009d	74 5b		 je	 SHORT $LN39@gen_throw

; 311  :             gen->gi_running = 1;

  0009f	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR gen$[rsp]
  000a7	c6 40 68 01	 mov	 BYTE PTR [rax+104], 1

; 312  :             err = gen_close_iter(yf);

  000ab	48 8b 4c 24 40	 mov	 rcx, QWORD PTR yf$[rsp]
  000b0	e8 00 00 00 00	 call	 gen_close_iter
  000b5	89 44 24 68	 mov	 DWORD PTR err$20808[rsp], eax

; 313  :             gen->gi_running = 0;

  000b9	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR gen$[rsp]
  000c1	c6 40 68 00	 mov	 BYTE PTR [rax+104], 0

; 314  :             Py_DECREF(yf);

  000c5	48 8b 4c 24 40	 mov	 rcx, QWORD PTR yf$[rsp]
  000ca	e8 00 00 00 00	 call	 _Py_DecRef

; 315  :             if (err < 0)

  000cf	83 7c 24 68 00	 cmp	 DWORD PTR err$20808[rsp], 0
  000d4	7d 1f		 jge	 SHORT $LN38@gen_throw

; 316  :                 return gen_send_ex(gen, Py_None, 1);

  000d6	41 b8 01 00 00
	00		 mov	 r8d, 1
  000dc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_Py_NoneStruct
  000e3	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR gen$[rsp]
  000eb	e8 00 00 00 00	 call	 gen_send_ex
  000f0	e9 fb 03 00 00	 jmp	 $LN42@gen_throw
$LN38@gen_throw:

; 317  :             goto throw_here;

  000f5	e9 fd 01 00 00	 jmp	 $throw_here$20812
$LN39@gen_throw:

; 318  :         }
; 319  :         if (PyGen_CheckExact(yf)) {

  000fa	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyGen_Type
  00101	48 8b 4c 24 40	 mov	 rcx, QWORD PTR yf$[rsp]
  00106	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0010a	75 34		 jne	 SHORT $LN37@gen_throw

; 320  :             gen->gi_running = 1;

  0010c	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR gen$[rsp]
  00114	c6 40 68 01	 mov	 BYTE PTR [rax+104], 1

; 321  :             ret = gen_throw((PyGenObject *)yf, args);

  00118	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR args$[rsp]
  00120	48 8b 4c 24 40	 mov	 rcx, QWORD PTR yf$[rsp]
  00125	e8 00 00 00 00	 call	 gen_throw
  0012a	48 89 44 24 60	 mov	 QWORD PTR ret$20807[rsp], rax

; 322  :             gen->gi_running = 0;

  0012f	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR gen$[rsp]
  00137	c6 40 68 00	 mov	 BYTE PTR [rax+104], 0

; 323  :         } else {

  0013b	e9 a2 00 00 00	 jmp	 $LN36@gen_throw
$LN37@gen_throw:

; 324  :             PyObject *meth = _PyObject_GetAttrId(yf, &PyId_throw);

  00140	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId_throw@?1??gen_throw@@9@9
  00145	8b c0		 mov	 eax, eax
  00147	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0014d	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00156	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0015a	48 8b d0	 mov	 rdx, rax
  0015d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR yf$[rsp]
  00162	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00167	48 89 44 24 70	 mov	 QWORD PTR meth$20817[rsp], rax

; 325  :             if (meth == NULL) {

  0016c	48 83 7c 24 70
	00		 cmp	 QWORD PTR meth$20817[rsp], 0
  00172	75 35		 jne	 SHORT $LN35@gen_throw

; 326  :                 if (!PyErr_ExceptionMatches(PyExc_AttributeError)) {

  00174	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_AttributeError
  0017b	e8 00 00 00 00	 call	 PyErr_ExceptionMatches
  00180	85 c0		 test	 eax, eax
  00182	75 11		 jne	 SHORT $LN34@gen_throw

; 327  :                     Py_DECREF(yf);

  00184	48 8b 4c 24 40	 mov	 rcx, QWORD PTR yf$[rsp]
  00189	e8 00 00 00 00	 call	 _Py_DecRef

; 328  :                     return NULL;

  0018e	33 c0		 xor	 eax, eax
  00190	e9 5b 03 00 00	 jmp	 $LN42@gen_throw
$LN34@gen_throw:

; 329  :                 }
; 330  :                 PyErr_Clear();

  00195	e8 00 00 00 00	 call	 PyErr_Clear

; 331  :                 Py_DECREF(yf);

  0019a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR yf$[rsp]
  0019f	e8 00 00 00 00	 call	 _Py_DecRef

; 332  :                 goto throw_here;

  001a4	e9 4e 01 00 00	 jmp	 $throw_here$20812
$LN35@gen_throw:

; 333  :             }
; 334  :             gen->gi_running = 1;

  001a9	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR gen$[rsp]
  001b1	c6 40 68 01	 mov	 BYTE PTR [rax+104], 1

; 335  :             ret = PyObject_CallObject(meth, args);

  001b5	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR args$[rsp]
  001bd	48 8b 4c 24 70	 mov	 rcx, QWORD PTR meth$20817[rsp]
  001c2	e8 00 00 00 00	 call	 PyObject_CallObject
  001c7	48 89 44 24 60	 mov	 QWORD PTR ret$20807[rsp], rax

; 336  :             gen->gi_running = 0;

  001cc	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR gen$[rsp]
  001d4	c6 40 68 00	 mov	 BYTE PTR [rax+104], 0

; 337  :             Py_DECREF(meth);

  001d8	48 8b 4c 24 70	 mov	 rcx, QWORD PTR meth$20817[rsp]
  001dd	e8 00 00 00 00	 call	 _Py_DecRef
$LN36@gen_throw:

; 338  :         }
; 339  :         Py_DECREF(yf);

  001e2	48 8b 4c 24 40	 mov	 rcx, QWORD PTR yf$[rsp]
  001e7	e8 00 00 00 00	 call	 _Py_DecRef

; 340  :         if (!ret) {

  001ec	48 83 7c 24 60
	00		 cmp	 QWORD PTR ret$20807[rsp], 0
  001f2	0f 85 f5 00 00
	00		 jne	 $LN33@gen_throw

; 341  :             PyObject *val;
; 342  :             /* Pop subiterator from stack */
; 343  :             ret = *(--gen->gi_frame->f_stacktop);

  001f8	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR gen$[rsp]
  00200	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00204	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  0020b	48 83 e8 08	 sub	 rax, 8
  0020f	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv156[rsp], rax
  00217	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR gen$[rsp]
  0021f	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00223	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR tv156[rsp]
  0022b	48 89 88 a0 00
	00 00		 mov	 QWORD PTR [rax+160], rcx
  00232	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR tv156[rsp]
  0023a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0023d	48 89 44 24 60	 mov	 QWORD PTR ret$20807[rsp], rax

; 344  :             assert(ret == yf);

  00242	48 8b 44 24 40	 mov	 rax, QWORD PTR yf$[rsp]
  00247	48 39 44 24 60	 cmp	 QWORD PTR ret$20807[rsp], rax
  0024c	74 1c		 je	 SHORT $LN44@gen_throw
  0024e	41 b8 58 01 00
	00		 mov	 r8d, 344		; 00000158H
  00254	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@MIHLJLBH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAg?$AAe?$AAn?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  0025b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BE@OMLJMPNF@?$AAr?$AAe?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAy?$AAf?$AA?$AA@
  00262	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00268	33 c0		 xor	 eax, eax
$LN44@gen_throw:

; 345  :             Py_DECREF(ret);

  0026a	48 8b 4c 24 60	 mov	 rcx, QWORD PTR ret$20807[rsp]
  0026f	e8 00 00 00 00	 call	 _Py_DecRef

; 346  :             /* Termination repetition of YIELD_FROM */
; 347  :             gen->gi_frame->f_lasti++;

  00274	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR gen$[rsp]
  0027c	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00280	8b 80 d0 00 00
	00		 mov	 eax, DWORD PTR [rax+208]
  00286	ff c0		 inc	 eax
  00288	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR gen$[rsp]
  00290	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  00294	89 81 d0 00 00
	00		 mov	 DWORD PTR [rcx+208], eax

; 348  :             if (_PyGen_FetchStopIterationValue(&val) == 0) {

  0029a	48 8d 4c 24 78	 lea	 rcx, QWORD PTR val$20827[rsp]
  0029f	e8 00 00 00 00	 call	 _PyGen_FetchStopIterationValue
  002a4	85 c0		 test	 eax, eax
  002a6	75 26		 jne	 SHORT $LN32@gen_throw

; 349  :                 ret = gen_send_ex(gen, val, 0);

  002a8	45 33 c0	 xor	 r8d, r8d
  002ab	48 8b 54 24 78	 mov	 rdx, QWORD PTR val$20827[rsp]
  002b0	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR gen$[rsp]
  002b8	e8 00 00 00 00	 call	 gen_send_ex
  002bd	48 89 44 24 60	 mov	 QWORD PTR ret$20807[rsp], rax

; 350  :                 Py_DECREF(val);

  002c2	48 8b 4c 24 78	 mov	 rcx, QWORD PTR val$20827[rsp]
  002c7	e8 00 00 00 00	 call	 _Py_DecRef

; 351  :             } else {

  002cc	eb 1f		 jmp	 SHORT $LN31@gen_throw
$LN32@gen_throw:

; 352  :                 ret = gen_send_ex(gen, Py_None, 1);

  002ce	41 b8 01 00 00
	00		 mov	 r8d, 1
  002d4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_Py_NoneStruct
  002db	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR gen$[rsp]
  002e3	e8 00 00 00 00	 call	 gen_send_ex
  002e8	48 89 44 24 60	 mov	 QWORD PTR ret$20807[rsp], rax
$LN31@gen_throw:
$LN33@gen_throw:

; 353  :             }
; 354  :         }
; 355  :         return ret;

  002ed	48 8b 44 24 60	 mov	 rax, QWORD PTR ret$20807[rsp]
  002f2	e9 f9 01 00 00	 jmp	 $LN42@gen_throw
$LN40@gen_throw:
$throw_here$20812:

; 356  :     }
; 357  : 
; 358  : throw_here:
; 359  :     /* First, check the traceback argument, replacing None with
; 360  :        NULL. */
; 361  :     if (tb == Py_None) {

  002f7	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  002fe	48 39 44 24 58	 cmp	 QWORD PTR tb$[rsp], rax
  00303	75 0b		 jne	 SHORT $LN30@gen_throw

; 362  :         tb = NULL;

  00305	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR tb$[rsp], 0
  0030e	eb 34		 jmp	 SHORT $LN29@gen_throw
$LN30@gen_throw:

; 363  :     }
; 364  :     else if (tb != NULL && !PyTraceBack_Check(tb)) {

  00310	48 83 7c 24 58
	00		 cmp	 QWORD PTR tb$[rsp], 0
  00316	74 2c		 je	 SHORT $LN28@gen_throw
  00318	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyTraceBack_Type
  0031f	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tb$[rsp]
  00324	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00328	74 1a		 je	 SHORT $LN28@gen_throw

; 365  :         PyErr_SetString(PyExc_TypeError,
; 366  :             "throw() third argument must be a traceback object");

  0032a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DC@KPGEFMOD@throw?$CI?$CJ?5third?5argument?5must?5be?5a@
  00331	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00338	e8 00 00 00 00	 call	 PyErr_SetString

; 367  :         return NULL;

  0033d	33 c0		 xor	 eax, eax
  0033f	e9 ac 01 00 00	 jmp	 $LN42@gen_throw
$LN28@gen_throw:
$LN29@gen_throw:

; 368  :     }
; 369  : 
; 370  :     Py_INCREF(typ);

  00344	48 8b 4c 24 50	 mov	 rcx, QWORD PTR typ$[rsp]
  00349	e8 00 00 00 00	 call	 _Py_IncRef
$LN27@gen_throw:

; 371  :     Py_XINCREF(val);

  0034e	48 83 7c 24 48
	00		 cmp	 QWORD PTR val$[rsp], 0
  00354	74 0a		 je	 SHORT $LN24@gen_throw
  00356	48 8b 4c 24 48	 mov	 rcx, QWORD PTR val$[rsp]
  0035b	e8 00 00 00 00	 call	 _Py_IncRef
$LN24@gen_throw:
  00360	33 c0		 xor	 eax, eax
  00362	85 c0		 test	 eax, eax
  00364	75 e8		 jne	 SHORT $LN27@gen_throw
$LN23@gen_throw:

; 372  :     Py_XINCREF(tb);

  00366	48 83 7c 24 58
	00		 cmp	 QWORD PTR tb$[rsp], 0
  0036c	74 0a		 je	 SHORT $LN20@gen_throw
  0036e	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tb$[rsp]
  00373	e8 00 00 00 00	 call	 _Py_IncRef
$LN20@gen_throw:
  00378	33 c0		 xor	 eax, eax
  0037a	85 c0		 test	 eax, eax
  0037c	75 e8		 jne	 SHORT $LN23@gen_throw

; 373  : 
; 374  :     if (PyExceptionClass_Check(typ))

  0037e	48 8b 44 24 50	 mov	 rax, QWORD PTR typ$[rsp]
  00383	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00387	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0038d	25 00 00 00 80	 and	 eax, -2147483648	; ffffffff80000000H
  00392	85 c0		 test	 eax, eax
  00394	74 2d		 je	 SHORT $LN19@gen_throw
  00396	48 8b 44 24 50	 mov	 rax, QWORD PTR typ$[rsp]
  0039b	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  003a1	25 00 00 00 40	 and	 eax, 1073741824		; 40000000H
  003a6	85 c0		 test	 eax, eax
  003a8	74 19		 je	 SHORT $LN19@gen_throw

; 375  :         PyErr_NormalizeException(&typ, &val, &tb);

  003aa	4c 8d 44 24 58	 lea	 r8, QWORD PTR tb$[rsp]
  003af	48 8d 54 24 48	 lea	 rdx, QWORD PTR val$[rsp]
  003b4	48 8d 4c 24 50	 lea	 rcx, QWORD PTR typ$[rsp]
  003b9	e8 00 00 00 00	 call	 PyErr_NormalizeException
  003be	e9 c1 00 00 00	 jmp	 $LN18@gen_throw
$LN19@gen_throw:

; 376  : 
; 377  :     else if (PyExceptionInstance_Check(typ)) {

  003c3	48 8b 44 24 50	 mov	 rax, QWORD PTR typ$[rsp]
  003c8	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  003cc	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  003d2	25 00 00 00 40	 and	 eax, 1073741824		; 40000000H
  003d7	85 c0		 test	 eax, eax
  003d9	0f 84 83 00 00
	00		 je	 $LN17@gen_throw

; 378  :         /* Raising an instance.  The value should be a dummy. */
; 379  :         if (val && val != Py_None) {

  003df	48 83 7c 24 48
	00		 cmp	 QWORD PTR val$[rsp], 0
  003e5	74 28		 je	 SHORT $LN16@gen_throw
  003e7	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  003ee	48 39 44 24 48	 cmp	 QWORD PTR val$[rsp], rax
  003f3	74 1a		 je	 SHORT $LN16@gen_throw

; 380  :             PyErr_SetString(PyExc_TypeError,
; 381  :               "instance exception may not have a separate value");

  003f5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DB@DAOEGLML@instance?5exception?5may?5not?5have?5@
  003fc	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00403	e8 00 00 00 00	 call	 PyErr_SetString

; 382  :             goto failed_throw;

  00408	e9 a7 00 00 00	 jmp	 $failed_throw$20860

; 383  :         }
; 384  :         else {

  0040d	eb 51		 jmp	 SHORT $LN15@gen_throw
$LN16@gen_throw:
$LN14@gen_throw:

; 385  :             /* Normalize to raise <class>, <instance> */
; 386  :             Py_XDECREF(val);

  0040f	48 83 7c 24 48
	00		 cmp	 QWORD PTR val$[rsp], 0
  00415	74 0a		 je	 SHORT $LN11@gen_throw
  00417	48 8b 4c 24 48	 mov	 rcx, QWORD PTR val$[rsp]
  0041c	e8 00 00 00 00	 call	 _Py_DecRef
$LN11@gen_throw:
  00421	33 c0		 xor	 eax, eax
  00423	85 c0		 test	 eax, eax
  00425	75 e8		 jne	 SHORT $LN14@gen_throw

; 387  :             val = typ;

  00427	48 8b 44 24 50	 mov	 rax, QWORD PTR typ$[rsp]
  0042c	48 89 44 24 48	 mov	 QWORD PTR val$[rsp], rax

; 388  :             typ = PyExceptionInstance_Class(typ);

  00431	48 8b 44 24 50	 mov	 rax, QWORD PTR typ$[rsp]
  00436	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0043a	48 89 44 24 50	 mov	 QWORD PTR typ$[rsp], rax

; 389  :             Py_INCREF(typ);

  0043f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR typ$[rsp]
  00444	e8 00 00 00 00	 call	 _Py_IncRef

; 390  : 
; 391  :             if (tb == NULL)

  00449	48 83 7c 24 58
	00		 cmp	 QWORD PTR tb$[rsp], 0
  0044f	75 0f		 jne	 SHORT $LN10@gen_throw

; 392  :                 /* Returns NULL if there's no traceback */
; 393  :                 tb = PyException_GetTraceback(val);

  00451	48 8b 4c 24 48	 mov	 rcx, QWORD PTR val$[rsp]
  00456	e8 00 00 00 00	 call	 PyException_GetTraceback
  0045b	48 89 44 24 58	 mov	 QWORD PTR tb$[rsp], rax
$LN10@gen_throw:
$LN15@gen_throw:

; 394  :         }
; 395  :     }
; 396  :     else {

  00460	eb 22		 jmp	 SHORT $LN9@gen_throw
$LN17@gen_throw:

; 397  :         /* Not something you can raise.  throw() fails. */
; 398  :         PyErr_Format(PyExc_TypeError,
; 399  :                      "exceptions must be classes or instances "
; 400  :                      "deriving from BaseException, not %s",
; 401  :                      Py_TYPE(typ)->tp_name);

  00462	48 8b 44 24 50	 mov	 rax, QWORD PTR typ$[rsp]
  00467	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0046b	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  0046f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0EM@DNMJHJBL@exceptions?5must?5be?5classes?5or?5in@
  00476	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0047d	e8 00 00 00 00	 call	 PyErr_Format

; 402  :             goto failed_throw;

  00482	eb 30		 jmp	 SHORT $failed_throw$20860
$LN9@gen_throw:
$LN18@gen_throw:

; 403  :     }
; 404  : 
; 405  :     PyErr_Restore(typ, val, tb);

  00484	4c 8b 44 24 58	 mov	 r8, QWORD PTR tb$[rsp]
  00489	48 8b 54 24 48	 mov	 rdx, QWORD PTR val$[rsp]
  0048e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR typ$[rsp]
  00493	e8 00 00 00 00	 call	 PyErr_Restore

; 406  :     return gen_send_ex(gen, Py_None, 1);

  00498	41 b8 01 00 00
	00		 mov	 r8d, 1
  0049e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_Py_NoneStruct
  004a5	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR gen$[rsp]
  004ad	e8 00 00 00 00	 call	 gen_send_ex
  004b2	eb 3c		 jmp	 SHORT $LN42@gen_throw
$failed_throw$20860:

; 407  : 
; 408  : failed_throw:
; 409  :     /* Didn't use our arguments, so restore their original refcounts */
; 410  :     Py_DECREF(typ);

  004b4	48 8b 4c 24 50	 mov	 rcx, QWORD PTR typ$[rsp]
  004b9	e8 00 00 00 00	 call	 _Py_DecRef
$LN8@gen_throw:

; 411  :     Py_XDECREF(val);

  004be	48 83 7c 24 48
	00		 cmp	 QWORD PTR val$[rsp], 0
  004c4	74 0a		 je	 SHORT $LN5@gen_throw
  004c6	48 8b 4c 24 48	 mov	 rcx, QWORD PTR val$[rsp]
  004cb	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@gen_throw:
  004d0	33 c0		 xor	 eax, eax
  004d2	85 c0		 test	 eax, eax
  004d4	75 e8		 jne	 SHORT $LN8@gen_throw
$LN4@gen_throw:

; 412  :     Py_XDECREF(tb);

  004d6	48 83 7c 24 58
	00		 cmp	 QWORD PTR tb$[rsp], 0
  004dc	74 0a		 je	 SHORT $LN1@gen_throw
  004de	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tb$[rsp]
  004e3	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@gen_throw:
  004e8	33 c0		 xor	 eax, eax
  004ea	85 c0		 test	 eax, eax
  004ec	75 e8		 jne	 SHORT $LN4@gen_throw

; 413  :     return NULL;

  004ee	33 c0		 xor	 eax, eax
$LN42@gen_throw:

; 414  : }

  004f0	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  004f7	c3		 ret	 0
gen_throw ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$gen_iternext DD imagerel gen_iternext
	DD	imagerel gen_iternext+75
	DD	imagerel $unwind$gen_iternext
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gen_iternext DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT gen_iternext
_TEXT	SEGMENT
ret$ = 32
val$ = 40
gen$ = 64
gen_iternext PROC					; COMDAT

; 419  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 420  :     PyObject *val = NULL;

  00009	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR val$[rsp], 0

; 421  :     PyObject *ret;
; 422  :     ret = gen_send_ex(gen, val, 0);

  00012	45 33 c0	 xor	 r8d, r8d
  00015	48 8b 54 24 28	 mov	 rdx, QWORD PTR val$[rsp]
  0001a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR gen$[rsp]
  0001f	e8 00 00 00 00	 call	 gen_send_ex
  00024	48 89 44 24 20	 mov	 QWORD PTR ret$[rsp], rax
$LN4@gen_iterne:

; 423  :     Py_XDECREF(val);

  00029	48 83 7c 24 28
	00		 cmp	 QWORD PTR val$[rsp], 0
  0002f	74 0a		 je	 SHORT $LN1@gen_iterne
  00031	48 8b 4c 24 28	 mov	 rcx, QWORD PTR val$[rsp]
  00036	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@gen_iterne:
  0003b	33 c0		 xor	 eax, eax
  0003d	85 c0		 test	 eax, eax
  0003f	75 e8		 jne	 SHORT $LN4@gen_iterne

; 424  :     return ret;

  00041	48 8b 44 24 20	 mov	 rax, QWORD PTR ret$[rsp]

; 425  : }

  00046	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004a	c3		 ret	 0
gen_iternext ENDP
_TEXT	ENDS
EXTRN	PyErr_Occurred:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyGen_FetchStopIterationValue DD imagerel $LN16
	DD	imagerel $LN16+216
	DD	imagerel $unwind$_PyGen_FetchStopIterationValue
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyGen_FetchStopIterationValue DD 010901H
	DD	08209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _PyGen_FetchStopIterationValue
_TEXT	SEGMENT
value$ = 32
et$ = 40
ev$ = 48
tb$ = 56
pvalue$ = 80
_PyGen_FetchStopIterationValue PROC			; COMDAT

; 437  : _PyGen_FetchStopIterationValue(PyObject **pvalue) {

$LN16:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 438  :     PyObject *et, *ev, *tb;
; 439  :     PyObject *value = NULL;

  00009	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR value$[rsp], 0

; 440  : 
; 441  :     if (PyErr_ExceptionMatches(PyExc_StopIteration)) {

  00012	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_StopIteration
  00019	e8 00 00 00 00	 call	 PyErr_ExceptionMatches
  0001e	85 c0		 test	 eax, eax
  00020	74 73		 je	 SHORT $LN13@PyGen_Fetc

; 442  :         PyErr_Fetch(&et, &ev, &tb);

  00022	4c 8d 44 24 38	 lea	 r8, QWORD PTR tb$[rsp]
  00027	48 8d 54 24 30	 lea	 rdx, QWORD PTR ev$[rsp]
  0002c	48 8d 4c 24 28	 lea	 rcx, QWORD PTR et$[rsp]
  00031	e8 00 00 00 00	 call	 PyErr_Fetch
$LN12@PyGen_Fetc:

; 443  :         Py_XDECREF(et);

  00036	48 83 7c 24 28
	00		 cmp	 QWORD PTR et$[rsp], 0
  0003c	74 0a		 je	 SHORT $LN9@PyGen_Fetc
  0003e	48 8b 4c 24 28	 mov	 rcx, QWORD PTR et$[rsp]
  00043	e8 00 00 00 00	 call	 _Py_DecRef
$LN9@PyGen_Fetc:
  00048	33 c0		 xor	 eax, eax
  0004a	85 c0		 test	 eax, eax
  0004c	75 e8		 jne	 SHORT $LN12@PyGen_Fetc
$LN8@PyGen_Fetc:

; 444  :         Py_XDECREF(tb);

  0004e	48 83 7c 24 38
	00		 cmp	 QWORD PTR tb$[rsp], 0
  00054	74 0a		 je	 SHORT $LN5@PyGen_Fetc
  00056	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tb$[rsp]
  0005b	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@PyGen_Fetc:
  00060	33 c0		 xor	 eax, eax
  00062	85 c0		 test	 eax, eax
  00064	75 e8		 jne	 SHORT $LN8@PyGen_Fetc

; 445  :         if (ev) {

  00066	48 83 7c 24 30
	00		 cmp	 QWORD PTR ev$[rsp], 0
  0006c	74 25		 je	 SHORT $LN4@PyGen_Fetc

; 446  :             value = ((PyStopIterationObject *)ev)->value;

  0006e	48 8b 44 24 30	 mov	 rax, QWORD PTR ev$[rsp]
  00073	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  0007a	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 447  :             Py_INCREF(value);

  0007f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  00084	e8 00 00 00 00	 call	 _Py_IncRef

; 448  :             Py_DECREF(ev);

  00089	48 8b 4c 24 30	 mov	 rcx, QWORD PTR ev$[rsp]
  0008e	e8 00 00 00 00	 call	 _Py_DecRef
$LN4@PyGen_Fetc:

; 449  :         }

  00093	eb 11		 jmp	 SHORT $LN3@PyGen_Fetc
$LN13@PyGen_Fetc:

; 450  :     } else if (PyErr_Occurred()) {

  00095	e8 00 00 00 00	 call	 PyErr_Occurred
  0009a	48 85 c0	 test	 rax, rax
  0009d	74 07		 je	 SHORT $LN2@PyGen_Fetc

; 451  :         return -1;

  0009f	b8 ff ff ff ff	 mov	 eax, -1
  000a4	eb 2d		 jmp	 SHORT $LN14@PyGen_Fetc
$LN2@PyGen_Fetc:
$LN3@PyGen_Fetc:

; 452  :     }
; 453  :     if (value == NULL) {

  000a6	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  000ac	75 16		 jne	 SHORT $LN1@PyGen_Fetc

; 454  :         value = Py_None;

  000ae	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000b5	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 455  :         Py_INCREF(value);

  000ba	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  000bf	e8 00 00 00 00	 call	 _Py_IncRef
$LN1@PyGen_Fetc:

; 456  :     }
; 457  :     *pvalue = value;

  000c4	48 8b 44 24 50	 mov	 rax, QWORD PTR pvalue$[rsp]
  000c9	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  000ce	48 89 08	 mov	 QWORD PTR [rax], rcx

; 458  :     return 0;

  000d1	33 c0		 xor	 eax, eax
$LN14@PyGen_Fetc:

; 459  : }

  000d3	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000d7	c3		 ret	 0
_PyGen_FetchStopIterationValue ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BM@DIMDFBHH@?$DMgenerator?5object?5?$CFS?5at?5?$CFp?$DO?$AA@ ; `string'
EXTRN	PyUnicode_FromFormat:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$gen_repr DD imagerel gen_repr
	DD	imagerel gen_repr+47
	DD	imagerel $unwind$gen_repr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gen_repr DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT ??_C@_0BM@DIMDFBHH@?$DMgenerator?5object?5?$CFS?5at?5?$CFp?$DO?$AA@
CONST	SEGMENT
??_C@_0BM@DIMDFBHH@?$DMgenerator?5object?5?$CFS?5at?5?$CFp?$DO?$AA@ DB '<'
	DB	'generator object %S at %p>', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT gen_repr
_TEXT	SEGMENT
gen$ = 48
gen_repr PROC						; COMDAT

; 463  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 464  :     return PyUnicode_FromFormat("<generator object %S at %p>",
; 465  :                                 ((PyCodeObject *)gen->gi_code)->co_name,
; 466  :                                 gen);

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR gen$[rsp]
  0000e	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00012	4c 8b 44 24 30	 mov	 r8, QWORD PTR gen$[rsp]
  00017	48 8b 90 b8 00
	00 00		 mov	 rdx, QWORD PTR [rax+184]
  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BM@DIMDFBHH@?$DMgenerator?5object?5?$CFS?5at?5?$CFp?$DO?$AA@
  00025	e8 00 00 00 00	 call	 PyUnicode_FromFormat

; 467  : }

  0002a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002e	c3		 ret	 0
gen_repr ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$gen_get_name DD imagerel gen_get_name
	DD	imagerel gen_get_name+50
	DD	imagerel $unwind$gen_get_name
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gen_get_name DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT gen_get_name
_TEXT	SEGMENT
name$ = 32
gen$ = 64
gen_get_name PROC					; COMDAT

; 472  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 473  :     PyObject *name = ((PyCodeObject *)gen->gi_code)->co_name;

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR gen$[rsp]
  0000e	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00012	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00019	48 89 44 24 20	 mov	 QWORD PTR name$[rsp], rax

; 474  :     Py_INCREF(name);

  0001e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR name$[rsp]
  00023	e8 00 00 00 00	 call	 _Py_IncRef

; 475  :     return name;

  00028	48 8b 44 24 20	 mov	 rax, QWORD PTR name$[rsp]

; 476  : }

  0002d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00031	c3		 ret	 0
gen_get_name ENDP
_TEXT	ENDS
PUBLIC	??_C@_09NOKDDDDN@PyGen_New?$AA@			; `string'
PUBLIC	PyGen_New
EXTRN	_PyObject_GC_New:PROC
EXTRN	_PxObject_New:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyGen_New DD imagerel $LN13
	DD	imagerel $LN13+405
	DD	imagerel $unwind$PyGen_New
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyGen_New DD 010901H
	DD	0a209H
xdata	ENDS
;	COMDAT ??_C@_09NOKDDDDN@PyGen_New?$AA@
CONST	SEGMENT
??_C@_09NOKDDDDN@PyGen_New?$AA@ DB 'PyGen_New', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyGen_New
_TEXT	SEGMENT
gen$ = 48
g$21005 = 56
tv70 = 64
tv95 = 72
f$ = 96
PyGen_New PROC						; COMDAT

; 555  : {

$LN13:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 556  :     PyGenObject *gen = PyObject_GC_New(PyGenObject, &PyGen_Type);

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	74 13		 je	 SHORT $LN9@PyGen_New
  00012	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyGen_Type
  00019	e8 00 00 00 00	 call	 _PxObject_New
  0001e	48 89 44 24 40	 mov	 QWORD PTR tv70[rsp], rax
  00023	eb 11		 jmp	 SHORT $LN10@PyGen_New
$LN9@PyGen_New:
  00025	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyGen_Type
  0002c	e8 00 00 00 00	 call	 _PyObject_GC_New
  00031	48 89 44 24 40	 mov	 QWORD PTR tv70[rsp], rax
$LN10@PyGen_New:
  00036	48 8b 44 24 40	 mov	 rax, QWORD PTR tv70[rsp]
  0003b	48 89 44 24 30	 mov	 QWORD PTR gen$[rsp], rax

; 557  :     if (gen == NULL) {

  00040	48 83 7c 24 30
	00		 cmp	 QWORD PTR gen$[rsp], 0
  00046	75 11		 jne	 SHORT $LN6@PyGen_New

; 558  :         Py_DECREF(f);

  00048	48 8b 4c 24 60	 mov	 rcx, QWORD PTR f$[rsp]
  0004d	e8 00 00 00 00	 call	 _Py_DecRef

; 559  :         return NULL;

  00052	33 c0		 xor	 eax, eax
  00054	e9 37 01 00 00	 jmp	 $LN7@PyGen_New
$LN6@PyGen_New:

; 560  :     }
; 561  :     gen->gi_frame = f;

  00059	48 8b 44 24 30	 mov	 rax, QWORD PTR gen$[rsp]
  0005e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR f$[rsp]
  00063	48 89 48 60	 mov	 QWORD PTR [rax+96], rcx

; 562  :     Py_INCREF(f->f_code);

  00067	48 8b 44 24 60	 mov	 rax, QWORD PTR f$[rsp]
  0006c	48 8b 48 78	 mov	 rcx, QWORD PTR [rax+120]
  00070	e8 00 00 00 00	 call	 _Py_IncRef

; 563  :     gen->gi_code = (PyObject *)(f->f_code);

  00075	48 8b 44 24 30	 mov	 rax, QWORD PTR gen$[rsp]
  0007a	48 8b 4c 24 60	 mov	 rcx, QWORD PTR f$[rsp]
  0007f	48 8b 49 78	 mov	 rcx, QWORD PTR [rcx+120]
  00083	48 89 48 70	 mov	 QWORD PTR [rax+112], rcx

; 564  :     gen->gi_running = 0;

  00087	48 8b 44 24 30	 mov	 rax, QWORD PTR gen$[rsp]
  0008c	c6 40 68 00	 mov	 BYTE PTR [rax+104], 0

; 565  :     gen->gi_weakreflist = NULL;

  00090	48 8b 44 24 30	 mov	 rax, QWORD PTR gen$[rsp]
  00095	48 c7 40 78 00
	00 00 00	 mov	 QWORD PTR [rax+120], 0

; 566  :     _PyObject_GC_TRACK(gen);

  0009d	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000a5	4c 8b 4c 24 30	 mov	 r9, QWORD PTR gen$[rsp]
  000aa	41 b8 36 02 00
	00		 mov	 r8d, 566		; 00000236H
  000b0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@IGGHLIPC@?4?4?2Objects?2genobject?4c?$AA@
  000b7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09NOKDDDDN@PyGen_New?$AA@
  000be	e8 00 00 00 00	 call	 _PyParallel_Guard
  000c3	85 c0		 test	 eax, eax
  000c5	0f 85 c0 00 00
	00		 jne	 $LN5@PyGen_New
$LN4@PyGen_New:
  000cb	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000d3	4c 8b 4c 24 30	 mov	 r9, QWORD PTR gen$[rsp]
  000d8	41 b8 36 02 00
	00		 mov	 r8d, 566		; 00000236H
  000de	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@IGGHLIPC@?4?4?2Objects?2genobject?4c?$AA@
  000e5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09NOKDDDDN@PyGen_New?$AA@
  000ec	e8 00 00 00 00	 call	 _PyParallel_Guard
  000f1	85 c0		 test	 eax, eax
  000f3	74 0b		 je	 SHORT $LN11@PyGen_New
  000f5	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR tv95[rsp], 0
  000fe	eb 0e		 jmp	 SHORT $LN12@PyGen_New
$LN11@PyGen_New:
  00100	48 8b 44 24 30	 mov	 rax, QWORD PTR gen$[rsp]
  00105	48 83 e8 18	 sub	 rax, 24
  00109	48 89 44 24 48	 mov	 QWORD PTR tv95[rsp], rax
$LN12@PyGen_New:
  0010e	48 8b 44 24 48	 mov	 rax, QWORD PTR tv95[rsp]
  00113	48 89 44 24 38	 mov	 QWORD PTR g$21005[rsp], rax
  00118	48 8b 44 24 38	 mov	 rax, QWORD PTR g$21005[rsp]
  0011d	48 83 78 10 fe	 cmp	 QWORD PTR [rax+16], -2
  00122	74 0c		 je	 SHORT $LN1@PyGen_New
  00124	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@
  0012b	e8 00 00 00 00	 call	 Py_FatalError
$LN1@PyGen_New:
  00130	48 8b 44 24 38	 mov	 rax, QWORD PTR g$21005[rsp]
  00135	48 c7 40 10 fd
	ff ff ff	 mov	 QWORD PTR [rax+16], -3
  0013d	48 8b 44 24 38	 mov	 rax, QWORD PTR g$21005[rsp]
  00142	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR _PyGC_generation0
  00149	48 89 08	 mov	 QWORD PTR [rax], rcx
  0014c	48 8b 44 24 38	 mov	 rax, QWORD PTR g$21005[rsp]
  00151	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR _PyGC_generation0
  00158	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  0015c	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  00160	48 8b 44 24 38	 mov	 rax, QWORD PTR g$21005[rsp]
  00165	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00169	48 8b 4c 24 38	 mov	 rcx, QWORD PTR g$21005[rsp]
  0016e	48 89 08	 mov	 QWORD PTR [rax], rcx
  00171	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyGC_generation0
  00178	48 8b 4c 24 38	 mov	 rcx, QWORD PTR g$21005[rsp]
  0017d	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  00181	33 c0		 xor	 eax, eax
  00183	85 c0		 test	 eax, eax
  00185	0f 85 40 ff ff
	ff		 jne	 $LN4@PyGen_New
$LN5@PyGen_New:

; 567  :     return (PyObject *)gen;

  0018b	48 8b 44 24 30	 mov	 rax, QWORD PTR gen$[rsp]
$LN7@PyGen_New:

; 568  : }

  00190	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00194	c3		 ret	 0
PyGen_New ENDP
_TEXT	ENDS
PUBLIC	PyGen_NeedsFinalizing
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyGen_NeedsFinalizing DD imagerel $LN9
	DD	imagerel $LN9+122
	DD	imagerel $unwind$PyGen_NeedsFinalizing
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyGen_NeedsFinalizing DD 010901H
	DD	02209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyGen_NeedsFinalizing
_TEXT	SEGMENT
i$ = 0
f$ = 8
gen$ = 32
PyGen_NeedsFinalizing PROC				; COMDAT

; 572  : {

$LN9:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 18	 sub	 rsp, 24

; 573  :     int i;
; 574  :     PyFrameObject *f = gen->gi_frame;

  00009	48 8b 44 24 20	 mov	 rax, QWORD PTR gen$[rsp]
  0000e	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00012	48 89 44 24 08	 mov	 QWORD PTR f$[rsp], rax

; 575  : 
; 576  :     if (f == NULL || f->f_stacktop == NULL)

  00017	48 83 7c 24 08
	00		 cmp	 QWORD PTR f$[rsp], 0
  0001d	74 0f		 je	 SHORT $LN5@PyGen_Need
  0001f	48 8b 44 24 08	 mov	 rax, QWORD PTR f$[rsp]
  00024	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  0002c	75 04		 jne	 SHORT $LN6@PyGen_Need
$LN5@PyGen_Need:

; 577  :         return 0; /* no frame or empty blockstack == no finalization */

  0002e	33 c0		 xor	 eax, eax
  00030	eb 43		 jmp	 SHORT $LN7@PyGen_Need
$LN6@PyGen_Need:

; 578  : 
; 579  :     /* Any block type besides a loop requires cleanup. */
; 580  :     for (i = 0; i < f->f_iblock; i++)

  00032	c7 04 24 00 00
	00 00		 mov	 DWORD PTR i$[rsp], 0
  00039	eb 08		 jmp	 SHORT $LN4@PyGen_Need
$LN3@PyGen_Need:
  0003b	8b 04 24	 mov	 eax, DWORD PTR i$[rsp]
  0003e	ff c0		 inc	 eax
  00040	89 04 24	 mov	 DWORD PTR i$[rsp], eax
$LN4@PyGen_Need:
  00043	48 8b 44 24 08	 mov	 rax, QWORD PTR f$[rsp]
  00048	8b 80 d8 00 00
	00		 mov	 eax, DWORD PTR [rax+216]
  0004e	39 04 24	 cmp	 DWORD PTR i$[rsp], eax
  00051	7d 20		 jge	 SHORT $LN2@PyGen_Need

; 581  :         if (f->f_blockstack[i].b_type != SETUP_LOOP)

  00053	48 63 04 24	 movsxd	 rax, DWORD PTR i$[rsp]
  00057	48 6b c0 0c	 imul	 rax, 12
  0005b	48 8b 4c 24 08	 mov	 rcx, QWORD PTR f$[rsp]
  00060	83 bc 01 dc 00
	00 00 78	 cmp	 DWORD PTR [rcx+rax+220], 120 ; 00000078H
  00068	74 07		 je	 SHORT $LN1@PyGen_Need

; 582  :             return 1;

  0006a	b8 01 00 00 00	 mov	 eax, 1
  0006f	eb 04		 jmp	 SHORT $LN7@PyGen_Need
$LN1@PyGen_Need:

; 583  : 
; 584  :     /* No blocks except loops, it's safe to skip finalization. */
; 585  :     return 0;

  00071	eb c8		 jmp	 SHORT $LN3@PyGen_Need
$LN2@PyGen_Need:
  00073	33 c0		 xor	 eax, eax
$LN7@PyGen_Need:

; 586  : }

  00075	48 83 c4 18	 add	 rsp, 24
  00079	c3		 ret	 0
PyGen_NeedsFinalizing ENDP
_TEXT	ENDS
END
