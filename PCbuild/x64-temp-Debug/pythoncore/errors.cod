; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_04CIMGMMMG@text?$AA@			; `string'
PUBLIC	??_C@_0BE@DKBHEDDB@print_file_and_line?$AA@	; `string'
PUBLIC	??_C@_06KLHHMIGM@offset?$AA@			; `string'
PUBLIC	??_C@_03GLPMCEFE@msg?$AA@			; `string'
PUBLIC	??_C@_06ILKIAHNN@lineno?$AA@			; `string'
PUBLIC	??_C@_08BABJIOEM@filename?$AA@			; `string'
PUBLIC	??_C@_0L@LNCJCPDP@__module__?$AA@		; `string'
;	COMDAT ??_C@_04CIMGMMMG@text?$AA@
CONST	SEGMENT
??_C@_04CIMGMMMG@text?$AA@ DB 'text', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@DKBHEDDB@print_file_and_line?$AA@
CONST	SEGMENT
??_C@_0BE@DKBHEDDB@print_file_and_line?$AA@ DB 'print_file_and_line', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06KLHHMIGM@offset?$AA@
CONST	SEGMENT
??_C@_06KLHHMIGM@offset?$AA@ DB 'offset', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03GLPMCEFE@msg?$AA@
CONST	SEGMENT
??_C@_03GLPMCEFE@msg?$AA@ DB 'msg', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06ILKIAHNN@lineno?$AA@
CONST	SEGMENT
??_C@_06ILKIAHNN@lineno?$AA@ DB 'lineno', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08BABJIOEM@filename?$AA@
CONST	SEGMENT
??_C@_08BABJIOEM@filename?$AA@ DB 'filename', 00H	; `string'
CONST	ENDS
_TLS	SEGMENT
?PyId_text@?1??PyErr_SyntaxLocationEx@@9@9 DQ 0000000000000000H ; `PyErr_SyntaxLocationEx'::`2'::PyId_text
	DQ	FLAT:??_C@_04CIMGMMMG@text?$AA@
	DQ	0000000000000000H
?PyId_print_file_and_line@?1??PyErr_SyntaxLocationEx@@9@9 DQ 0000000000000000H ; `PyErr_SyntaxLocationEx'::`2'::PyId_print_file_and_line
	DQ	FLAT:??_C@_0BE@DKBHEDDB@print_file_and_line?$AA@
	DQ	0000000000000000H
?PyId_offset@?1??PyErr_SyntaxLocationEx@@9@9 DQ 0000000000000000H ; `PyErr_SyntaxLocationEx'::`2'::PyId_offset
	DQ	FLAT:??_C@_06KLHHMIGM@offset?$AA@
	DQ	0000000000000000H
?PyId_msg@?1??PyErr_SyntaxLocationEx@@9@9 DQ 0000000000000000H ; `PyErr_SyntaxLocationEx'::`2'::PyId_msg
	DQ	FLAT:??_C@_03GLPMCEFE@msg?$AA@
	DQ	0000000000000000H
?PyId_lineno@?1??PyErr_SyntaxLocationEx@@9@9 DQ 0000000000000000H ; `PyErr_SyntaxLocationEx'::`2'::PyId_lineno
	DQ	FLAT:??_C@_06ILKIAHNN@lineno?$AA@
	DQ	0000000000000000H
?PyId_filename@?1??PyErr_SyntaxLocationEx@@9@9 DQ 0000000000000000H ; `PyErr_SyntaxLocationEx'::`2'::PyId_filename
	DQ	FLAT:??_C@_08BABJIOEM@filename?$AA@
	DQ	0000000000000000H
?PyId___module__@?1??PyErr_WriteUnraisable@@9@9 DQ 0000000000000000H ; `PyErr_WriteUnraisable'::`2'::PyId___module__
	DQ	FLAT:??_C@_0L@LNCJCPDP@__module__?$AA@
	DQ	0000000000000000H
_TLS	ENDS
;	COMDAT ??_C@_0L@LNCJCPDP@__module__?$AA@
CONST	SEGMENT
??_C@_0L@LNCJCPDP@__module__?$AA@ DB '__module__', 00H	; `string'
CONST	ENDS
PUBLIC	_Py_DecRef
PUBLIC	PyErr_Restore
EXTRN	PyTraceBack_Type:BYTE
EXTRN	PyThreadState_Get:PROC
;	COMDAT pdata
; File c:\src\pyparallel\python\errors.c
pdata	SEGMENT
$pdata$PyErr_Restore DD imagerel $LN16
	DD	imagerel $LN16+235
	DD	imagerel $unwind$PyErr_Restore
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyErr_Restore DD 011301H
	DD	08213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyErr_Restore
_TEXT	SEGMENT
oldtraceback$ = 32
oldtype$ = 40
tstate$ = 48
oldvalue$ = 56
type$ = 80
value$ = 88
traceback$ = 96
PyErr_Restore PROC					; COMDAT

; 26   : {

$LN16:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 27   :     PyThreadState *tstate = PyThreadState_GET();

  00013	e8 00 00 00 00	 call	 PyThreadState_Get
  00018	48 89 44 24 30	 mov	 QWORD PTR tstate$[rsp], rax

; 28   :     PyObject *oldtype, *oldvalue, *oldtraceback;
; 29   : 
; 30   :     if (traceback != NULL && !PyTraceBack_Check(traceback)) {

  0001d	48 83 7c 24 60
	00		 cmp	 QWORD PTR traceback$[rsp], 0
  00023	74 25		 je	 SHORT $LN13@PyErr_Rest
  00025	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyTraceBack_Type
  0002c	48 8b 4c 24 60	 mov	 rcx, QWORD PTR traceback$[rsp]
  00031	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00035	74 13		 je	 SHORT $LN13@PyErr_Rest

; 31   :         /* XXX Should never happen -- fatal error instead? */
; 32   :         /* Well, it could be None. */
; 33   :         Py_DECREF(traceback);

  00037	48 8b 4c 24 60	 mov	 rcx, QWORD PTR traceback$[rsp]
  0003c	e8 00 00 00 00	 call	 _Py_DecRef

; 34   :         traceback = NULL;

  00041	48 c7 44 24 60
	00 00 00 00	 mov	 QWORD PTR traceback$[rsp], 0
$LN13@PyErr_Rest:

; 35   :     }
; 36   : 
; 37   :     /* Save these in locals to safeguard against recursive
; 38   :        invocation through Py_XDECREF */
; 39   :     oldtype = tstate->curexc_type;

  0004a	48 8b 44 24 30	 mov	 rax, QWORD PTR tstate$[rsp]
  0004f	48 8b 40 48	 mov	 rax, QWORD PTR [rax+72]
  00053	48 89 44 24 28	 mov	 QWORD PTR oldtype$[rsp], rax

; 40   :     oldvalue = tstate->curexc_value;

  00058	48 8b 44 24 30	 mov	 rax, QWORD PTR tstate$[rsp]
  0005d	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00061	48 89 44 24 38	 mov	 QWORD PTR oldvalue$[rsp], rax

; 41   :     oldtraceback = tstate->curexc_traceback;

  00066	48 8b 44 24 30	 mov	 rax, QWORD PTR tstate$[rsp]
  0006b	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0006f	48 89 44 24 20	 mov	 QWORD PTR oldtraceback$[rsp], rax

; 42   : 
; 43   :     tstate->curexc_type = type;

  00074	48 8b 44 24 30	 mov	 rax, QWORD PTR tstate$[rsp]
  00079	48 8b 4c 24 50	 mov	 rcx, QWORD PTR type$[rsp]
  0007e	48 89 48 48	 mov	 QWORD PTR [rax+72], rcx

; 44   :     tstate->curexc_value = value;

  00082	48 8b 44 24 30	 mov	 rax, QWORD PTR tstate$[rsp]
  00087	48 8b 4c 24 58	 mov	 rcx, QWORD PTR value$[rsp]
  0008c	48 89 48 50	 mov	 QWORD PTR [rax+80], rcx

; 45   :     tstate->curexc_traceback = traceback;

  00090	48 8b 44 24 30	 mov	 rax, QWORD PTR tstate$[rsp]
  00095	48 8b 4c 24 60	 mov	 rcx, QWORD PTR traceback$[rsp]
  0009a	48 89 48 58	 mov	 QWORD PTR [rax+88], rcx
$LN12@PyErr_Rest:

; 46   : 
; 47   :     Py_XDECREF(oldtype);

  0009e	48 83 7c 24 28
	00		 cmp	 QWORD PTR oldtype$[rsp], 0
  000a4	74 0a		 je	 SHORT $LN9@PyErr_Rest
  000a6	48 8b 4c 24 28	 mov	 rcx, QWORD PTR oldtype$[rsp]
  000ab	e8 00 00 00 00	 call	 _Py_DecRef
$LN9@PyErr_Rest:
  000b0	33 c0		 xor	 eax, eax
  000b2	85 c0		 test	 eax, eax
  000b4	75 e8		 jne	 SHORT $LN12@PyErr_Rest
$LN8@PyErr_Rest:

; 48   :     Py_XDECREF(oldvalue);

  000b6	48 83 7c 24 38
	00		 cmp	 QWORD PTR oldvalue$[rsp], 0
  000bc	74 0a		 je	 SHORT $LN5@PyErr_Rest
  000be	48 8b 4c 24 38	 mov	 rcx, QWORD PTR oldvalue$[rsp]
  000c3	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@PyErr_Rest:
  000c8	33 c0		 xor	 eax, eax
  000ca	85 c0		 test	 eax, eax
  000cc	75 e8		 jne	 SHORT $LN8@PyErr_Rest
$LN4@PyErr_Rest:

; 49   :     Py_XDECREF(oldtraceback);

  000ce	48 83 7c 24 20
	00		 cmp	 QWORD PTR oldtraceback$[rsp], 0
  000d4	74 0a		 je	 SHORT $LN1@PyErr_Rest
  000d6	48 8b 4c 24 20	 mov	 rcx, QWORD PTR oldtraceback$[rsp]
  000db	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@PyErr_Rest:
  000e0	33 c0		 xor	 eax, eax
  000e2	85 c0		 test	 eax, eax
  000e4	75 e8		 jne	 SHORT $LN4@PyErr_Rest

; 50   : }

  000e6	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000ea	c3		 ret	 0
PyErr_Restore ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
EXTRN	_Py_Dealloc:PROC
EXTRN	_Py_NegativeRefcount:PROC
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_RefTotal:QWORD
EXTRN	Px_DecRef:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN13
	DD	imagerel $LN13+257
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
tv81 = 48
op$ = 80
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN13:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	0f 85 e6 00 00
	00		 jne	 $LN8@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00016	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0001b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0001f	48 83 e0 20	 and	 rax, 32			; 00000020H
  00023	48 85 c0	 test	 rax, rax
  00026	75 14		 jne	 SHORT $LN6@Py_DecRef
  00028	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0002d	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00031	48 25 80 00 00
	00		 and	 rax, 128		; 00000080H
  00037	48 85 c0	 test	 rax, rax
  0003a	74 0f		 je	 SHORT $LN7@Py_DecRef
$LN6@Py_DecRef:

; 926  :             Px_DECREF(op);

  0003c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  00041	e8 00 00 00 00	 call	 Px_DecRef
  00046	e9 b1 00 00 00	 jmp	 $LN5@Py_DecRef
$LN7@Py_DecRef:

; 927  :         else if (!Px_ISPX(op)) {

  0004b	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00050	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00054	48 83 e0 02	 and	 rax, 2
  00058	48 85 c0	 test	 rax, rax
  0005b	0f 85 9b 00 00
	00		 jne	 $LN4@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;

  00061	e8 00 00 00 00	 call	 _Py_PXCTX
  00066	85 c0		 test	 eax, eax
  00068	74 02		 je	 SHORT $LN11@Py_DecRef
  0006a	eb 11		 jmp	 SHORT $LN12@Py_DecRef
$LN11@Py_DecRef:
  0006c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00073	48 ff c8	 dec	 rax
  00076	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN12@Py_DecRef:

; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  0007d	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00082	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00086	48 ff c8	 dec	 rax
  00089	48 89 44 24 30	 mov	 QWORD PTR tv81[rsp], rax
  0008e	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00093	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv81[rsp]
  00098	48 89 48 50	 mov	 QWORD PTR [rax+80], rcx
  0009c	48 83 7c 24 30
	00		 cmp	 QWORD PTR tv81[rsp], 0
  000a2	74 4e		 je	 SHORT $LN3@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);

  000a4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000ac	4c 8b 4c 24 50	 mov	 r9, QWORD PTR op$[rsp]
  000b1	41 b8 a2 03 00
	00		 mov	 r8d, 930		; 000003a2H
  000b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000c5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ca	85 c0		 test	 eax, eax
  000cc	75 22		 jne	 SHORT $LN2@Py_DecRef
  000ce	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  000d3	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000d8	7d 16		 jge	 SHORT $LN2@Py_DecRef
  000da	4c 8b 44 24 50	 mov	 r8, QWORD PTR op$[rsp]
  000df	ba a2 03 00 00	 mov	 edx, 930		; 000003a2H
  000e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000eb	e8 00 00 00 00	 call	 _Py_NegativeRefcount
$LN2@Py_DecRef:

; 931  :             } else

  000f0	eb 0a		 jmp	 SHORT $LN1@Py_DecRef
$LN3@Py_DecRef:

; 932  :                 _Py_Dealloc((PyObject *)(op));

  000f2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  000f7	e8 00 00 00 00	 call	 _Py_Dealloc
$LN1@Py_DecRef:
$LN4@Py_DecRef:
$LN5@Py_DecRef:
$LN8@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  000fc	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00100	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
PUBLIC	_Py_IncRef
PUBLIC	PyErr_Format
PUBLIC	??_C@_0CK@BAHCAOOM@exception?5?$CFR?5not?5a?5BaseException@ ; `string'
PUBLIC	PyErr_SetObject
EXTRN	PyException_GetTraceback:PROC
EXTRN	PyException_SetContext:PROC
EXTRN	PyException_GetContext:PROC
EXTRN	PyEval_CallObjectWithKeywords:PROC
EXTRN	PyTuple_Pack:PROC
EXTRN	PyTuple_New:PROC
EXTRN	_Py_NoneStruct:BYTE
EXTRN	PyExc_SystemError:QWORD
;	COMDAT pdata
; File c:\src\pyparallel\python\errors.c
pdata	SEGMENT
$pdata$PyErr_SetObject DD imagerel $LN38
	DD	imagerel $LN38+669
	DD	imagerel $unwind$PyErr_SetObject
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyErr_SetObject DD 010e01H
	DD	0c20eH
xdata	ENDS
;	COMDAT ??_C@_0CK@BAHCAOOM@exception?5?$CFR?5not?5a?5BaseException@
CONST	SEGMENT
??_C@_0CK@BAHCAOOM@exception?5?$CFR?5not?5a?5BaseException@ DB 'exception'
	DB	' %R not a BaseException subclass', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyErr_SetObject
_TEXT	SEGMENT
tstate$ = 32
tb$ = 40
exc_value$ = 48
args$120454 = 56
fixed_value$120455 = 64
context$120481 = 72
o$120480 = 80
tv137 = 88
exception$ = 112
value$ = 120
PyErr_SetObject PROC					; COMDAT

; 54   : {

$LN38:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 55   :     PyThreadState *tstate = PyThreadState_GET();

  0000e	e8 00 00 00 00	 call	 PyThreadState_Get
  00013	48 89 44 24 20	 mov	 QWORD PTR tstate$[rsp], rax

; 56   :     PyObject *exc_value;
; 57   :     PyObject *tb = NULL;

  00018	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR tb$[rsp], 0

; 58   : 
; 59   :     if (exception != NULL &&
; 60   :         !PyExceptionClass_Check(exception)) {

  00021	48 83 7c 24 70
	00		 cmp	 QWORD PTR exception$[rsp], 0
  00027	74 49		 je	 SHORT $LN33@PyErr_SetO
  00029	48 8b 44 24 70	 mov	 rax, QWORD PTR exception$[rsp]
  0002e	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00032	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00038	25 00 00 00 80	 and	 eax, -2147483648	; ffffffff80000000H
  0003d	85 c0		 test	 eax, eax
  0003f	74 14		 je	 SHORT $LN32@PyErr_SetO
  00041	48 8b 44 24 70	 mov	 rax, QWORD PTR exception$[rsp]
  00046	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0004c	25 00 00 00 40	 and	 eax, 1073741824		; 40000000H
  00051	85 c0		 test	 eax, eax
  00053	75 1d		 jne	 SHORT $LN33@PyErr_SetO
$LN32@PyErr_SetO:

; 61   :         PyErr_Format(PyExc_SystemError,
; 62   :                      "exception %R not a BaseException subclass",
; 63   :                      exception);

  00055	4c 8b 44 24 70	 mov	 r8, QWORD PTR exception$[rsp]
  0005a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CK@BAHCAOOM@exception?5?$CFR?5not?5a?5BaseException@
  00061	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SystemError
  00068	e8 00 00 00 00	 call	 PyErr_Format

; 64   :         return;

  0006d	e9 26 02 00 00	 jmp	 $LN34@PyErr_SetO
$LN33@PyErr_SetO:
$LN31@PyErr_SetO:

; 65   :     }
; 66   :     Py_XINCREF(value);

  00072	48 83 7c 24 78
	00		 cmp	 QWORD PTR value$[rsp], 0
  00078	74 0a		 je	 SHORT $LN28@PyErr_SetO
  0007a	48 8b 4c 24 78	 mov	 rcx, QWORD PTR value$[rsp]
  0007f	e8 00 00 00 00	 call	 _Py_IncRef
$LN28@PyErr_SetO:
  00084	33 c0		 xor	 eax, eax
  00086	85 c0		 test	 eax, eax
  00088	75 e8		 jne	 SHORT $LN31@PyErr_SetO

; 67   :     exc_value = tstate->exc_value;

  0008a	48 8b 44 24 20	 mov	 rax, QWORD PTR tstate$[rsp]
  0008f	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00093	48 89 44 24 30	 mov	 QWORD PTR exc_value$[rsp], rax

; 68   :     if (exc_value != NULL && exc_value != Py_None) {

  00098	48 83 7c 24 30
	00		 cmp	 QWORD PTR exc_value$[rsp], 0
  0009e	0f 84 99 01 00
	00		 je	 $LN27@PyErr_SetO
  000a4	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000ab	48 39 44 24 30	 cmp	 QWORD PTR exc_value$[rsp], rax
  000b0	0f 84 87 01 00
	00		 je	 $LN27@PyErr_SetO

; 69   :         /* Implicit exception chaining */
; 70   :         Py_INCREF(exc_value);

  000b6	48 8b 4c 24 30	 mov	 rcx, QWORD PTR exc_value$[rsp]
  000bb	e8 00 00 00 00	 call	 _Py_IncRef

; 71   :         if (value == NULL || !PyExceptionInstance_Check(value)) {

  000c0	48 83 7c 24 78
	00		 cmp	 QWORD PTR value$[rsp], 0
  000c6	74 1c		 je	 SHORT $LN25@PyErr_SetO
  000c8	48 8b 44 24 78	 mov	 rax, QWORD PTR value$[rsp]
  000cd	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000d1	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000d7	25 00 00 00 40	 and	 eax, 1073741824		; 40000000H
  000dc	85 c0		 test	 eax, eax
  000de	0f 85 e1 00 00
	00		 jne	 $LN26@PyErr_SetO
$LN25@PyErr_SetO:

; 72   :             /* We must normalize the value right now */
; 73   :             PyObject *args, *fixed_value;
; 74   :             if (value == NULL || value == Py_None)

  000e4	48 83 7c 24 78
	00		 cmp	 QWORD PTR value$[rsp], 0
  000ea	74 0e		 je	 SHORT $LN23@PyErr_SetO
  000ec	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000f3	48 39 44 24 78	 cmp	 QWORD PTR value$[rsp], rax
  000f8	75 0e		 jne	 SHORT $LN24@PyErr_SetO
$LN23@PyErr_SetO:

; 75   :                 args = PyTuple_New(0);

  000fa	33 c9		 xor	 ecx, ecx
  000fc	e8 00 00 00 00	 call	 PyTuple_New
  00101	48 89 44 24 38	 mov	 QWORD PTR args$120454[rsp], rax
  00106	eb 42		 jmp	 SHORT $LN22@PyErr_SetO
$LN24@PyErr_SetO:

; 76   :             else if (PyTuple_Check(value)) {

  00108	48 8b 44 24 78	 mov	 rax, QWORD PTR value$[rsp]
  0010d	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00111	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00117	25 00 00 00 04	 and	 eax, 67108864		; 04000000H
  0011c	85 c0		 test	 eax, eax
  0011e	74 16		 je	 SHORT $LN21@PyErr_SetO

; 77   :                 Py_INCREF(value);

  00120	48 8b 4c 24 78	 mov	 rcx, QWORD PTR value$[rsp]
  00125	e8 00 00 00 00	 call	 _Py_IncRef

; 78   :                 args = value;

  0012a	48 8b 44 24 78	 mov	 rax, QWORD PTR value$[rsp]
  0012f	48 89 44 24 38	 mov	 QWORD PTR args$120454[rsp], rax

; 79   :             }
; 80   :             else

  00134	eb 14		 jmp	 SHORT $LN20@PyErr_SetO
$LN21@PyErr_SetO:

; 81   :                 args = PyTuple_Pack(1, value);

  00136	48 8b 54 24 78	 mov	 rdx, QWORD PTR value$[rsp]
  0013b	b9 01 00 00 00	 mov	 ecx, 1
  00140	e8 00 00 00 00	 call	 PyTuple_Pack
  00145	48 89 44 24 38	 mov	 QWORD PTR args$120454[rsp], rax
$LN20@PyErr_SetO:
$LN22@PyErr_SetO:

; 82   :             fixed_value = args ?
; 83   :                 PyEval_CallObject(exception, args) : NULL;

  0014a	48 83 7c 24 38
	00		 cmp	 QWORD PTR args$120454[rsp], 0
  00150	74 19		 je	 SHORT $LN36@PyErr_SetO
  00152	45 33 c0	 xor	 r8d, r8d
  00155	48 8b 54 24 38	 mov	 rdx, QWORD PTR args$120454[rsp]
  0015a	48 8b 4c 24 70	 mov	 rcx, QWORD PTR exception$[rsp]
  0015f	e8 00 00 00 00	 call	 PyEval_CallObjectWithKeywords
  00164	48 89 44 24 58	 mov	 QWORD PTR tv137[rsp], rax
  00169	eb 09		 jmp	 SHORT $LN37@PyErr_SetO
$LN36@PyErr_SetO:
  0016b	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR tv137[rsp], 0
$LN37@PyErr_SetO:
  00174	48 8b 44 24 58	 mov	 rax, QWORD PTR tv137[rsp]
  00179	48 89 44 24 40	 mov	 QWORD PTR fixed_value$120455[rsp], rax
$LN19@PyErr_SetO:

; 84   :             Py_XDECREF(args);

  0017e	48 83 7c 24 38
	00		 cmp	 QWORD PTR args$120454[rsp], 0
  00184	74 0a		 je	 SHORT $LN16@PyErr_SetO
  00186	48 8b 4c 24 38	 mov	 rcx, QWORD PTR args$120454[rsp]
  0018b	e8 00 00 00 00	 call	 _Py_DecRef
$LN16@PyErr_SetO:
  00190	33 c0		 xor	 eax, eax
  00192	85 c0		 test	 eax, eax
  00194	75 e8		 jne	 SHORT $LN19@PyErr_SetO
$LN15@PyErr_SetO:

; 85   :             Py_XDECREF(value);

  00196	48 83 7c 24 78
	00		 cmp	 QWORD PTR value$[rsp], 0
  0019c	74 0a		 je	 SHORT $LN12@PyErr_SetO
  0019e	48 8b 4c 24 78	 mov	 rcx, QWORD PTR value$[rsp]
  001a3	e8 00 00 00 00	 call	 _Py_DecRef
$LN12@PyErr_SetO:
  001a8	33 c0		 xor	 eax, eax
  001aa	85 c0		 test	 eax, eax
  001ac	75 e8		 jne	 SHORT $LN15@PyErr_SetO

; 86   :             if (fixed_value == NULL)

  001ae	48 83 7c 24 40
	00		 cmp	 QWORD PTR fixed_value$120455[rsp], 0
  001b4	75 05		 jne	 SHORT $LN11@PyErr_SetO

; 87   :                 return;

  001b6	e9 dd 00 00 00	 jmp	 $LN34@PyErr_SetO
$LN11@PyErr_SetO:

; 88   :             value = fixed_value;

  001bb	48 8b 44 24 40	 mov	 rax, QWORD PTR fixed_value$120455[rsp]
  001c0	48 89 44 24 78	 mov	 QWORD PTR value$[rsp], rax
$LN26@PyErr_SetO:

; 89   :         }
; 90   :         /* Avoid reference cycles through the context chain.
; 91   :            This is O(chain length) but context chains are
; 92   :            usually very short. Sensitive readers may try
; 93   :            to inline the call to PyException_GetContext. */
; 94   :         if (exc_value != value) {

  001c5	48 8b 44 24 78	 mov	 rax, QWORD PTR value$[rsp]
  001ca	48 39 44 24 30	 cmp	 QWORD PTR exc_value$[rsp], rax
  001cf	74 62		 je	 SHORT $LN10@PyErr_SetO

; 95   :             PyObject *o = exc_value, *context;

  001d1	48 8b 44 24 30	 mov	 rax, QWORD PTR exc_value$[rsp]
  001d6	48 89 44 24 50	 mov	 QWORD PTR o$120480[rsp], rax
$LN9@PyErr_SetO:

; 96   :             while ((context = PyException_GetContext(o))) {

  001db	48 8b 4c 24 50	 mov	 rcx, QWORD PTR o$120480[rsp]
  001e0	e8 00 00 00 00	 call	 PyException_GetContext
  001e5	48 89 44 24 48	 mov	 QWORD PTR context$120481[rsp], rax
  001ea	48 83 7c 24 48
	00		 cmp	 QWORD PTR context$120481[rsp], 0
  001f0	74 30		 je	 SHORT $LN8@PyErr_SetO

; 97   :                 Py_DECREF(context);

  001f2	48 8b 4c 24 48	 mov	 rcx, QWORD PTR context$120481[rsp]
  001f7	e8 00 00 00 00	 call	 _Py_DecRef

; 98   :                 if (context == value) {

  001fc	48 8b 44 24 78	 mov	 rax, QWORD PTR value$[rsp]
  00201	48 39 44 24 48	 cmp	 QWORD PTR context$120481[rsp], rax
  00206	75 0e		 jne	 SHORT $LN7@PyErr_SetO

; 99   :                     PyException_SetContext(o, NULL);

  00208	33 d2		 xor	 edx, edx
  0020a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR o$120480[rsp]
  0020f	e8 00 00 00 00	 call	 PyException_SetContext

; 100  :                     break;

  00214	eb 0c		 jmp	 SHORT $LN8@PyErr_SetO
$LN7@PyErr_SetO:

; 101  :                 }
; 102  :                 o = context;

  00216	48 8b 44 24 48	 mov	 rax, QWORD PTR context$120481[rsp]
  0021b	48 89 44 24 50	 mov	 QWORD PTR o$120480[rsp], rax

; 103  :             }

  00220	eb b9		 jmp	 SHORT $LN9@PyErr_SetO
$LN8@PyErr_SetO:

; 104  :             PyException_SetContext(value, exc_value);

  00222	48 8b 54 24 30	 mov	 rdx, QWORD PTR exc_value$[rsp]
  00227	48 8b 4c 24 78	 mov	 rcx, QWORD PTR value$[rsp]
  0022c	e8 00 00 00 00	 call	 PyException_SetContext

; 105  :         } else {

  00231	eb 0a		 jmp	 SHORT $LN6@PyErr_SetO
$LN10@PyErr_SetO:

; 106  :             Py_DECREF(exc_value);

  00233	48 8b 4c 24 30	 mov	 rcx, QWORD PTR exc_value$[rsp]
  00238	e8 00 00 00 00	 call	 _Py_DecRef
$LN6@PyErr_SetO:
$LN27@PyErr_SetO:

; 107  :         }
; 108  :     }
; 109  :     if (value != NULL && PyExceptionInstance_Check(value))

  0023d	48 83 7c 24 78
	00		 cmp	 QWORD PTR value$[rsp], 0
  00243	74 27		 je	 SHORT $LN5@PyErr_SetO
  00245	48 8b 44 24 78	 mov	 rax, QWORD PTR value$[rsp]
  0024a	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0024e	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00254	25 00 00 00 40	 and	 eax, 1073741824		; 40000000H
  00259	85 c0		 test	 eax, eax
  0025b	74 0f		 je	 SHORT $LN5@PyErr_SetO

; 110  :         tb = PyException_GetTraceback(value);

  0025d	48 8b 4c 24 78	 mov	 rcx, QWORD PTR value$[rsp]
  00262	e8 00 00 00 00	 call	 PyException_GetTraceback
  00267	48 89 44 24 28	 mov	 QWORD PTR tb$[rsp], rax
$LN5@PyErr_SetO:
$LN4@PyErr_SetO:

; 111  :     Py_XINCREF(exception);

  0026c	48 83 7c 24 70
	00		 cmp	 QWORD PTR exception$[rsp], 0
  00272	74 0a		 je	 SHORT $LN1@PyErr_SetO
  00274	48 8b 4c 24 70	 mov	 rcx, QWORD PTR exception$[rsp]
  00279	e8 00 00 00 00	 call	 _Py_IncRef
$LN1@PyErr_SetO:
  0027e	33 c0		 xor	 eax, eax
  00280	85 c0		 test	 eax, eax
  00282	75 e8		 jne	 SHORT $LN4@PyErr_SetO

; 112  :     PyErr_Restore(exception, value, tb);

  00284	4c 8b 44 24 28	 mov	 r8, QWORD PTR tb$[rsp]
  00289	48 8b 54 24 78	 mov	 rdx, QWORD PTR value$[rsp]
  0028e	48 8b 4c 24 70	 mov	 rcx, QWORD PTR exception$[rsp]
  00293	e8 00 00 00 00	 call	 PyErr_Restore
$LN34@PyErr_SetO:

; 113  : }

  00298	48 83 c4 68	 add	 rsp, 104		; 00000068H
  0029c	c3		 ret	 0
PyErr_SetObject ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN7
	DD	imagerel $LN7+132
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 6d		 jne	 SHORT $LN2@Py_IncRef
  00012	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0001a	4c 8b 4c 24 40	 mov	 r9, QWORD PTR op$[rsp]
  0001f	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_Guard
  00038	85 c0		 test	 eax, eax
  0003a	75 12		 jne	 SHORT $LN1@Py_IncRef
  0003c	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  00041	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00045	48 83 e0 20	 and	 rax, 32			; 00000020H
  00049	48 85 c0	 test	 rax, rax
  0004c	74 31		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;

  0004e	e8 00 00 00 00	 call	 _Py_PXCTX
  00053	85 c0		 test	 eax, eax
  00055	74 02		 je	 SHORT $LN5@Py_IncRef
  00057	eb 11		 jmp	 SHORT $LN6@Py_IncRef
$LN5@Py_IncRef:
  00059	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00060	48 ff c0	 inc	 rax
  00063	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN6@Py_IncRef:

; 907  :         (((PyObject*)(op))->ob_refcnt++);

  0006a	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  0006f	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00073	48 ff c0	 inc	 rax
  00076	48 8b 4c 24 40	 mov	 rcx, QWORD PTR op$[rsp]
  0007b	48 89 41 50	 mov	 QWORD PTR [rcx+80], rax
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  0007f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00083	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	PyErr_SetNone
;	COMDAT pdata
; File c:\src\pyparallel\python\errors.c
pdata	SEGMENT
$pdata$PyErr_SetNone DD imagerel $LN3
	DD	imagerel $LN3+26
	DD	imagerel $unwind$PyErr_SetNone
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyErr_SetNone DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyErr_SetNone
_TEXT	SEGMENT
exception$ = 48
PyErr_SetNone PROC					; COMDAT

; 117  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 118  :     PyErr_SetObject(exception, (PyObject *)NULL);

  00009	33 d2		 xor	 edx, edx
  0000b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR exception$[rsp]
  00010	e8 00 00 00 00	 call	 PyErr_SetObject

; 119  : }

  00015	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00019	c3		 ret	 0
PyErr_SetNone ENDP
_TEXT	ENDS
PUBLIC	PyErr_SetString
EXTRN	PyUnicode_FromString:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyErr_SetString DD imagerel $LN7
	DD	imagerel $LN7+73
	DD	imagerel $unwind$PyErr_SetString
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyErr_SetString DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyErr_SetString
_TEXT	SEGMENT
value$ = 32
exception$ = 64
string$ = 72
PyErr_SetString PROC					; COMDAT

; 123  : {

$LN7:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 124  :     PyObject *value = PyUnicode_FromString(string);

  0000e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR string$[rsp]
  00013	e8 00 00 00 00	 call	 PyUnicode_FromString
  00018	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 125  :     PyErr_SetObject(exception, value);

  0001d	48 8b 54 24 20	 mov	 rdx, QWORD PTR value$[rsp]
  00022	48 8b 4c 24 40	 mov	 rcx, QWORD PTR exception$[rsp]
  00027	e8 00 00 00 00	 call	 PyErr_SetObject
$LN4@PyErr_SetS:

; 126  :     Py_XDECREF(value);

  0002c	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  00032	74 0a		 je	 SHORT $LN1@PyErr_SetS
  00034	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  00039	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@PyErr_SetS:
  0003e	33 c0		 xor	 eax, eax
  00040	85 c0		 test	 eax, eax
  00042	75 e8		 jne	 SHORT $LN4@PyErr_SetS

; 127  : }

  00044	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00048	c3		 ret	 0
PyErr_SetString ENDP
_TEXT	ENDS
PUBLIC	PyErr_Occurred
EXTRN	PyThreadState_XGet:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyErr_Occurred DD imagerel $LN5
	DD	imagerel $LN5+57
	DD	imagerel $unwind$PyErr_Occurred
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyErr_Occurred DD 010401H
	DD	06204H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyErr_Occurred
_TEXT	SEGMENT
tstate$ = 32
tv67 = 40
PyErr_Occurred PROC					; COMDAT

; 132  : {

$LN5:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 133  :     PyThreadState *tstate = PyThreadState_XGET();

  00004	e8 00 00 00 00	 call	 PyThreadState_XGet
  00009	48 89 44 24 20	 mov	 QWORD PTR tstate$[rsp], rax

; 134  : 
; 135  :     return tstate == NULL ? NULL : tstate->curexc_type;

  0000e	48 83 7c 24 20
	00		 cmp	 QWORD PTR tstate$[rsp], 0
  00014	75 0b		 jne	 SHORT $LN3@PyErr_Occu
  00016	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR tv67[rsp], 0
  0001f	eb 0e		 jmp	 SHORT $LN4@PyErr_Occu
$LN3@PyErr_Occu:
  00021	48 8b 44 24 20	 mov	 rax, QWORD PTR tstate$[rsp]
  00026	48 8b 40 48	 mov	 rax, QWORD PTR [rax+72]
  0002a	48 89 44 24 28	 mov	 QWORD PTR tv67[rsp], rax
$LN4@PyErr_Occu:
  0002f	48 8b 44 24 28	 mov	 rax, QWORD PTR tv67[rsp]

; 136  : }

  00034	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00038	c3		 ret	 0
PyErr_Occurred ENDP
_TEXT	ENDS
PUBLIC	PyErr_WriteUnraisable
PUBLIC	PyErr_Fetch
PUBLIC	PyErr_GivenExceptionMatches
EXTRN	PyType_IsSubtype:PROC
EXTRN	PyTuple_Size:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyErr_GivenExceptionMatches DD imagerel $LN15
	DD	imagerel $LN15+431
	DD	imagerel $unwind$PyErr_GivenExceptionMatches
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyErr_GivenExceptionMatches DD 010e01H
	DD	0c20eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyErr_GivenExceptionMatches
_TEXT	SEGMENT
n$120530 = 32
i$120529 = 40
value$120545 = 48
res$120543 = 56
exception$120544 = 64
tb$120546 = 72
tv144 = 80
err$ = 112
exc$ = 120
PyErr_GivenExceptionMatches PROC			; COMDAT

; 141  : {

$LN15:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 142  :     if (err == NULL || exc == NULL) {

  0000e	48 83 7c 24 70
	00		 cmp	 QWORD PTR err$[rsp], 0
  00014	74 08		 je	 SHORT $LN9@PyErr_Give
  00016	48 83 7c 24 78
	00		 cmp	 QWORD PTR exc$[rsp], 0
  0001c	75 07		 jne	 SHORT $LN10@PyErr_Give
$LN9@PyErr_Give:

; 143  :         /* maybe caused by "import exceptions" that failed early on */
; 144  :         return 0;

  0001e	33 c0		 xor	 eax, eax
  00020	e9 85 01 00 00	 jmp	 $LN11@PyErr_Give
$LN10@PyErr_Give:

; 145  :     }
; 146  :     if (PyTuple_Check(exc)) {

  00025	48 8b 44 24 78	 mov	 rax, QWORD PTR exc$[rsp]
  0002a	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0002e	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00034	25 00 00 00 04	 and	 eax, 67108864		; 04000000H
  00039	85 c0		 test	 eax, eax
  0003b	74 63		 je	 SHORT $LN8@PyErr_Give

; 147  :         Py_ssize_t i, n;
; 148  :         n = PyTuple_Size(exc);

  0003d	48 8b 4c 24 78	 mov	 rcx, QWORD PTR exc$[rsp]
  00042	e8 00 00 00 00	 call	 PyTuple_Size
  00047	48 89 44 24 20	 mov	 QWORD PTR n$120530[rsp], rax

; 149  :         for (i = 0; i < n; i++) {

  0004c	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR i$120529[rsp], 0
  00055	eb 0d		 jmp	 SHORT $LN7@PyErr_Give
$LN6@PyErr_Give:
  00057	48 8b 44 24 28	 mov	 rax, QWORD PTR i$120529[rsp]
  0005c	48 ff c0	 inc	 rax
  0005f	48 89 44 24 28	 mov	 QWORD PTR i$120529[rsp], rax
$LN7@PyErr_Give:
  00064	48 8b 44 24 20	 mov	 rax, QWORD PTR n$120530[rsp]
  00069	48 39 44 24 28	 cmp	 QWORD PTR i$120529[rsp], rax
  0006e	7d 29		 jge	 SHORT $LN5@PyErr_Give

; 150  :             /* Test recursively */
; 151  :              if (PyErr_GivenExceptionMatches(
; 152  :                  err, PyTuple_GET_ITEM(exc, i)))

  00070	48 8b 44 24 78	 mov	 rax, QWORD PTR exc$[rsp]
  00075	48 8b 4c 24 28	 mov	 rcx, QWORD PTR i$120529[rsp]
  0007a	48 8b 54 c8 70	 mov	 rdx, QWORD PTR [rax+rcx*8+112]
  0007f	48 8b 4c 24 70	 mov	 rcx, QWORD PTR err$[rsp]
  00084	e8 00 00 00 00	 call	 PyErr_GivenExceptionMatches
  00089	85 c0		 test	 eax, eax
  0008b	74 0a		 je	 SHORT $LN4@PyErr_Give

; 153  :              {
; 154  :                  return 1;

  0008d	b8 01 00 00 00	 mov	 eax, 1
  00092	e9 13 01 00 00	 jmp	 $LN11@PyErr_Give
$LN4@PyErr_Give:

; 155  :              }
; 156  :         }

  00097	eb be		 jmp	 SHORT $LN6@PyErr_Give
$LN5@PyErr_Give:

; 157  :         return 0;

  00099	33 c0		 xor	 eax, eax
  0009b	e9 0a 01 00 00	 jmp	 $LN11@PyErr_Give
$LN8@PyErr_Give:

; 158  :     }
; 159  :     /* err might be an instance, so check its class. */
; 160  :     if (PyExceptionInstance_Check(err))

  000a0	48 8b 44 24 70	 mov	 rax, QWORD PTR err$[rsp]
  000a5	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000a9	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000af	25 00 00 00 40	 and	 eax, 1073741824		; 40000000H
  000b4	85 c0		 test	 eax, eax
  000b6	74 0e		 je	 SHORT $LN3@PyErr_Give

; 161  :         err = PyExceptionInstance_Class(err);

  000b8	48 8b 44 24 70	 mov	 rax, QWORD PTR err$[rsp]
  000bd	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000c1	48 89 44 24 70	 mov	 QWORD PTR err$[rsp], rax
$LN3@PyErr_Give:

; 162  : 
; 163  :     if (PyExceptionClass_Check(err) && PyExceptionClass_Check(exc)) {

  000c6	48 8b 44 24 70	 mov	 rax, QWORD PTR err$[rsp]
  000cb	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000cf	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000d5	25 00 00 00 80	 and	 eax, -2147483648	; ffffffff80000000H
  000da	85 c0		 test	 eax, eax
  000dc	0f 84 a6 00 00
	00		 je	 $LN2@PyErr_Give
  000e2	48 8b 44 24 70	 mov	 rax, QWORD PTR err$[rsp]
  000e7	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000ed	25 00 00 00 40	 and	 eax, 1073741824		; 40000000H
  000f2	85 c0		 test	 eax, eax
  000f4	0f 84 8e 00 00
	00		 je	 $LN2@PyErr_Give
  000fa	48 8b 44 24 78	 mov	 rax, QWORD PTR exc$[rsp]
  000ff	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00103	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00109	25 00 00 00 80	 and	 eax, -2147483648	; ffffffff80000000H
  0010e	85 c0		 test	 eax, eax
  00110	74 76		 je	 SHORT $LN2@PyErr_Give
  00112	48 8b 44 24 78	 mov	 rax, QWORD PTR exc$[rsp]
  00117	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0011d	25 00 00 00 40	 and	 eax, 1073741824		; 40000000H
  00122	85 c0		 test	 eax, eax
  00124	74 62		 je	 SHORT $LN2@PyErr_Give

; 164  :         int res = 0;

  00126	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR res$120543[rsp], 0

; 165  :         PyObject *exception, *value, *tb;
; 166  :         PyErr_Fetch(&exception, &value, &tb);

  0012e	4c 8d 44 24 48	 lea	 r8, QWORD PTR tb$120546[rsp]
  00133	48 8d 54 24 30	 lea	 rdx, QWORD PTR value$120545[rsp]
  00138	48 8d 4c 24 40	 lea	 rcx, QWORD PTR exception$120544[rsp]
  0013d	e8 00 00 00 00	 call	 PyErr_Fetch

; 167  :         /* PyObject_IsSubclass() can recurse and therefore is
; 168  :            not safe (see test_bad_getattr in test.pickletester). */
; 169  :         res = PyType_IsSubtype((PyTypeObject *)err, (PyTypeObject *)exc);

  00142	48 8b 54 24 78	 mov	 rdx, QWORD PTR exc$[rsp]
  00147	48 8b 4c 24 70	 mov	 rcx, QWORD PTR err$[rsp]
  0014c	e8 00 00 00 00	 call	 PyType_IsSubtype
  00151	89 44 24 38	 mov	 DWORD PTR res$120543[rsp], eax

; 170  :         /* This function must not fail, so print the error here */
; 171  :         if (res == -1) {

  00155	83 7c 24 38 ff	 cmp	 DWORD PTR res$120543[rsp], -1
  0015a	75 12		 jne	 SHORT $LN1@PyErr_Give

; 172  :             PyErr_WriteUnraisable(err);

  0015c	48 8b 4c 24 70	 mov	 rcx, QWORD PTR err$[rsp]
  00161	e8 00 00 00 00	 call	 PyErr_WriteUnraisable

; 173  :             res = 0;

  00166	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR res$120543[rsp], 0
$LN1@PyErr_Give:

; 174  :         }
; 175  :         PyErr_Restore(exception, value, tb);

  0016e	4c 8b 44 24 48	 mov	 r8, QWORD PTR tb$120546[rsp]
  00173	48 8b 54 24 30	 mov	 rdx, QWORD PTR value$120545[rsp]
  00178	48 8b 4c 24 40	 mov	 rcx, QWORD PTR exception$120544[rsp]
  0017d	e8 00 00 00 00	 call	 PyErr_Restore

; 176  :         return res;

  00182	8b 44 24 38	 mov	 eax, DWORD PTR res$120543[rsp]
  00186	eb 22		 jmp	 SHORT $LN11@PyErr_Give
$LN2@PyErr_Give:

; 177  :     }
; 178  : 
; 179  :     return err == exc;

  00188	48 8b 44 24 78	 mov	 rax, QWORD PTR exc$[rsp]
  0018d	48 39 44 24 70	 cmp	 QWORD PTR err$[rsp], rax
  00192	75 0a		 jne	 SHORT $LN13@PyErr_Give
  00194	c7 44 24 50 01
	00 00 00	 mov	 DWORD PTR tv144[rsp], 1
  0019c	eb 08		 jmp	 SHORT $LN14@PyErr_Give
$LN13@PyErr_Give:
  0019e	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR tv144[rsp], 0
$LN14@PyErr_Give:
  001a6	8b 44 24 50	 mov	 eax, DWORD PTR tv144[rsp]
$LN11@PyErr_Give:

; 180  : }

  001aa	48 83 c4 68	 add	 rsp, 104		; 00000068H
  001ae	c3		 ret	 0
PyErr_GivenExceptionMatches ENDP
_TEXT	ENDS
PUBLIC	PyErr_ExceptionMatches
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyErr_ExceptionMatches DD imagerel $LN3
	DD	imagerel $LN3+32
	DD	imagerel $unwind$PyErr_ExceptionMatches
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyErr_ExceptionMatches DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyErr_ExceptionMatches
_TEXT	SEGMENT
exc$ = 48
PyErr_ExceptionMatches PROC				; COMDAT

; 185  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 186  :     return PyErr_GivenExceptionMatches(PyErr_Occurred(), exc);

  00009	e8 00 00 00 00	 call	 PyErr_Occurred
  0000e	48 8b 54 24 30	 mov	 rdx, QWORD PTR exc$[rsp]
  00013	48 8b c8	 mov	 rcx, rax
  00016	e8 00 00 00 00	 call	 PyErr_GivenExceptionMatches

; 187  : }

  0001b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001f	c3		 ret	 0
PyErr_ExceptionMatches ENDP
_TEXT	ENDS
PUBLIC	PyErr_NormalizeException
EXTRN	PyExc_RecursionErrorInst:QWORD
EXTRN	PyExc_RuntimeError:QWORD
EXTRN	Py_GetRecursionLimit:PROC
EXTRN	PyObject_IsSubclass:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyErr_NormalizeException DD imagerel $LN21
	DD	imagerel $LN21+785
	DD	imagerel $unwind$PyErr_NormalizeException
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyErr_NormalizeException DD 011301H
	DD	0c213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyErr_NormalizeException
_TEXT	SEGMENT
value$ = 32
initial_tb$ = 40
type$ = 48
inclass$ = 56
tstate$ = 64
res$120580 = 72
args$120579 = 80
tv149 = 88
exc$ = 112
val$ = 120
tb$ = 128
PyErr_NormalizeException PROC				; COMDAT

; 198  : {

$LN21:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 199  :     PyObject *type = *exc;

  00013	48 8b 44 24 70	 mov	 rax, QWORD PTR exc$[rsp]
  00018	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0001b	48 89 44 24 30	 mov	 QWORD PTR type$[rsp], rax

; 200  :     PyObject *value = *val;

  00020	48 8b 44 24 78	 mov	 rax, QWORD PTR val$[rsp]
  00025	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00028	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 201  :     PyObject *inclass = NULL;

  0002d	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR inclass$[rsp], 0

; 202  :     PyObject *initial_tb = NULL;

  00036	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR initial_tb$[rsp], 0

; 203  :     PyThreadState *tstate = NULL;

  0003f	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR tstate$[rsp], 0

; 204  : 
; 205  :     if (type == NULL) {

  00048	48 83 7c 24 30
	00		 cmp	 QWORD PTR type$[rsp], 0
  0004e	75 05		 jne	 SHORT $LN18@PyErr_Norm

; 206  :         /* There was no exception, so nothing to do. */
; 207  :         return;

  00050	e9 b7 02 00 00	 jmp	 $LN19@PyErr_Norm
$LN18@PyErr_Norm:

; 208  :     }
; 209  : 
; 210  :     /* If PyErr_SetNone() was used, the value will have been actually
; 211  :        set to NULL.
; 212  :     */
; 213  :     if (!value) {

  00055	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  0005b	75 16		 jne	 SHORT $LN17@PyErr_Norm

; 214  :         value = Py_None;

  0005d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00064	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 215  :         Py_INCREF(value);

  00069	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  0006e	e8 00 00 00 00	 call	 _Py_IncRef
$LN17@PyErr_Norm:

; 216  :     }
; 217  : 
; 218  :     if (PyExceptionInstance_Check(value))

  00073	48 8b 44 24 20	 mov	 rax, QWORD PTR value$[rsp]
  00078	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0007c	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00082	25 00 00 00 40	 and	 eax, 1073741824		; 40000000H
  00087	85 c0		 test	 eax, eax
  00089	74 0e		 je	 SHORT $LN16@PyErr_Norm

; 219  :         inclass = PyExceptionInstance_Class(value);

  0008b	48 8b 44 24 20	 mov	 rax, QWORD PTR value$[rsp]
  00090	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00094	48 89 44 24 38	 mov	 QWORD PTR inclass$[rsp], rax
$LN16@PyErr_Norm:

; 220  : 
; 221  :     /* Normalize the exception so that if the type is a class, the
; 222  :        value will be an instance.
; 223  :     */
; 224  :     if (PyExceptionClass_Check(type)) {

  00099	48 8b 44 24 30	 mov	 rax, QWORD PTR type$[rsp]
  0009e	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000a2	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000a8	25 00 00 00 80	 and	 eax, -2147483648	; ffffffff80000000H
  000ad	85 c0		 test	 eax, eax
  000af	0f 84 0d 01 00
	00		 je	 $LN15@PyErr_Norm
  000b5	48 8b 44 24 30	 mov	 rax, QWORD PTR type$[rsp]
  000ba	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000c0	25 00 00 00 40	 and	 eax, 1073741824		; 40000000H
  000c5	85 c0		 test	 eax, eax
  000c7	0f 84 f5 00 00
	00		 je	 $LN15@PyErr_Norm

; 225  :         /* if the value was not an instance, or is not an instance
; 226  :            whose class is (or is derived from) type, then use the
; 227  :            value as an argument to instantiation of the type
; 228  :            class.
; 229  :         */
; 230  :         if (!inclass || !PyObject_IsSubclass(inclass, type)) {

  000cd	48 83 7c 24 38
	00		 cmp	 QWORD PTR inclass$[rsp], 0
  000d3	74 17		 je	 SHORT $LN13@PyErr_Norm
  000d5	48 8b 54 24 30	 mov	 rdx, QWORD PTR type$[rsp]
  000da	48 8b 4c 24 38	 mov	 rcx, QWORD PTR inclass$[rsp]
  000df	e8 00 00 00 00	 call	 PyObject_IsSubclass
  000e4	85 c0		 test	 eax, eax
  000e6	0f 85 ac 00 00
	00		 jne	 $LN14@PyErr_Norm
$LN13@PyErr_Norm:

; 231  :             PyObject *args, *res;
; 232  : 
; 233  :             if (value == Py_None)

  000ec	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000f3	48 39 44 24 20	 cmp	 QWORD PTR value$[rsp], rax
  000f8	75 0e		 jne	 SHORT $LN12@PyErr_Norm

; 234  :                 args = PyTuple_New(0);

  000fa	33 c9		 xor	 ecx, ecx
  000fc	e8 00 00 00 00	 call	 PyTuple_New
  00101	48 89 44 24 50	 mov	 QWORD PTR args$120579[rsp], rax
  00106	eb 42		 jmp	 SHORT $LN11@PyErr_Norm
$LN12@PyErr_Norm:

; 235  :             else if (PyTuple_Check(value)) {

  00108	48 8b 44 24 20	 mov	 rax, QWORD PTR value$[rsp]
  0010d	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00111	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00117	25 00 00 00 04	 and	 eax, 67108864		; 04000000H
  0011c	85 c0		 test	 eax, eax
  0011e	74 16		 je	 SHORT $LN10@PyErr_Norm

; 236  :                 Py_INCREF(value);

  00120	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  00125	e8 00 00 00 00	 call	 _Py_IncRef

; 237  :                 args = value;

  0012a	48 8b 44 24 20	 mov	 rax, QWORD PTR value$[rsp]
  0012f	48 89 44 24 50	 mov	 QWORD PTR args$120579[rsp], rax

; 238  :             }
; 239  :             else

  00134	eb 14		 jmp	 SHORT $LN9@PyErr_Norm
$LN10@PyErr_Norm:

; 240  :                 args = PyTuple_Pack(1, value);

  00136	48 8b 54 24 20	 mov	 rdx, QWORD PTR value$[rsp]
  0013b	b9 01 00 00 00	 mov	 ecx, 1
  00140	e8 00 00 00 00	 call	 PyTuple_Pack
  00145	48 89 44 24 50	 mov	 QWORD PTR args$120579[rsp], rax
$LN9@PyErr_Norm:
$LN11@PyErr_Norm:

; 241  : 
; 242  :             if (args == NULL)

  0014a	48 83 7c 24 50
	00		 cmp	 QWORD PTR args$120579[rsp], 0
  00150	75 05		 jne	 SHORT $LN8@PyErr_Norm

; 243  :                 goto finally;

  00152	e9 8a 00 00 00	 jmp	 $finally$120589
$LN8@PyErr_Norm:

; 244  :             res = PyEval_CallObject(type, args);

  00157	45 33 c0	 xor	 r8d, r8d
  0015a	48 8b 54 24 50	 mov	 rdx, QWORD PTR args$120579[rsp]
  0015f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR type$[rsp]
  00164	e8 00 00 00 00	 call	 PyEval_CallObjectWithKeywords
  00169	48 89 44 24 48	 mov	 QWORD PTR res$120580[rsp], rax

; 245  :             Py_DECREF(args);

  0016e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR args$120579[rsp]
  00173	e8 00 00 00 00	 call	 _Py_DecRef

; 246  :             if (res == NULL)

  00178	48 83 7c 24 48
	00		 cmp	 QWORD PTR res$120580[rsp], 0
  0017e	75 02		 jne	 SHORT $LN7@PyErr_Norm

; 247  :                 goto finally;

  00180	eb 5f		 jmp	 SHORT $finally$120589
$LN7@PyErr_Norm:

; 248  :             Py_DECREF(value);

  00182	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  00187	e8 00 00 00 00	 call	 _Py_DecRef

; 249  :             value = res;

  0018c	48 8b 44 24 48	 mov	 rax, QWORD PTR res$120580[rsp]
  00191	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax
  00196	eb 2a		 jmp	 SHORT $LN6@PyErr_Norm
$LN14@PyErr_Norm:

; 250  :         }
; 251  :         /* if the class of the instance doesn't exactly match the
; 252  :            class of the type, believe the instance
; 253  :         */
; 254  :         else if (inclass != type) {

  00198	48 8b 44 24 30	 mov	 rax, QWORD PTR type$[rsp]
  0019d	48 39 44 24 38	 cmp	 QWORD PTR inclass$[rsp], rax
  001a2	74 1e		 je	 SHORT $LN5@PyErr_Norm

; 255  :             Py_DECREF(type);

  001a4	48 8b 4c 24 30	 mov	 rcx, QWORD PTR type$[rsp]
  001a9	e8 00 00 00 00	 call	 _Py_DecRef

; 256  :             type = inclass;

  001ae	48 8b 44 24 38	 mov	 rax, QWORD PTR inclass$[rsp]
  001b3	48 89 44 24 30	 mov	 QWORD PTR type$[rsp], rax

; 257  :             Py_INCREF(type);

  001b8	48 8b 4c 24 30	 mov	 rcx, QWORD PTR type$[rsp]
  001bd	e8 00 00 00 00	 call	 _Py_IncRef
$LN5@PyErr_Norm:
$LN6@PyErr_Norm:
$LN15@PyErr_Norm:

; 258  :         }
; 259  :     }
; 260  :     *exc = type;

  001c2	48 8b 44 24 70	 mov	 rax, QWORD PTR exc$[rsp]
  001c7	48 8b 4c 24 30	 mov	 rcx, QWORD PTR type$[rsp]
  001cc	48 89 08	 mov	 QWORD PTR [rax], rcx

; 261  :     *val = value;

  001cf	48 8b 44 24 78	 mov	 rax, QWORD PTR val$[rsp]
  001d4	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  001d9	48 89 08	 mov	 QWORD PTR [rax], rcx

; 262  :     return;

  001dc	e9 2b 01 00 00	 jmp	 $LN19@PyErr_Norm
$finally$120589:

; 263  : finally:
; 264  :     Py_DECREF(type);

  001e1	48 8b 4c 24 30	 mov	 rcx, QWORD PTR type$[rsp]
  001e6	e8 00 00 00 00	 call	 _Py_DecRef

; 265  :     Py_DECREF(value);

  001eb	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  001f0	e8 00 00 00 00	 call	 _Py_DecRef

; 266  :     /* If the new exception doesn't set a traceback and the old
; 267  :        exception had a traceback, use the old traceback for the
; 268  :        new exception.  It's better than nothing.
; 269  :     */
; 270  :     initial_tb = *tb;

  001f5	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR tb$[rsp]
  001fd	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00200	48 89 44 24 28	 mov	 QWORD PTR initial_tb$[rsp], rax

; 271  :     PyErr_Fetch(exc, val, tb);

  00205	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR tb$[rsp]
  0020d	48 8b 54 24 78	 mov	 rdx, QWORD PTR val$[rsp]
  00212	48 8b 4c 24 70	 mov	 rcx, QWORD PTR exc$[rsp]
  00217	e8 00 00 00 00	 call	 PyErr_Fetch

; 272  :     if (initial_tb != NULL) {

  0021c	48 83 7c 24 28
	00		 cmp	 QWORD PTR initial_tb$[rsp], 0
  00222	74 2a		 je	 SHORT $LN4@PyErr_Norm

; 273  :         if (*tb == NULL)

  00224	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR tb$[rsp]
  0022c	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00230	75 12		 jne	 SHORT $LN3@PyErr_Norm

; 274  :             *tb = initial_tb;

  00232	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR tb$[rsp]
  0023a	48 8b 4c 24 28	 mov	 rcx, QWORD PTR initial_tb$[rsp]
  0023f	48 89 08	 mov	 QWORD PTR [rax], rcx

; 275  :         else

  00242	eb 0a		 jmp	 SHORT $LN2@PyErr_Norm
$LN3@PyErr_Norm:

; 276  :             Py_DECREF(initial_tb);

  00244	48 8b 4c 24 28	 mov	 rcx, QWORD PTR initial_tb$[rsp]
  00249	e8 00 00 00 00	 call	 _Py_DecRef
$LN2@PyErr_Norm:
$LN4@PyErr_Norm:

; 277  :     }
; 278  :     /* normalize recursively */
; 279  :     tstate = PyThreadState_GET();

  0024e	e8 00 00 00 00	 call	 PyThreadState_Get
  00253	48 89 44 24 40	 mov	 QWORD PTR tstate$[rsp], rax

; 280  :     if (++tstate->recursion_depth > Py_GetRecursionLimit()) {

  00258	48 8b 44 24 40	 mov	 rax, QWORD PTR tstate$[rsp]
  0025d	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00260	ff c0		 inc	 eax
  00262	89 44 24 58	 mov	 DWORD PTR tv149[rsp], eax
  00266	48 8b 44 24 40	 mov	 rax, QWORD PTR tstate$[rsp]
  0026b	8b 4c 24 58	 mov	 ecx, DWORD PTR tv149[rsp]
  0026f	89 48 18	 mov	 DWORD PTR [rax+24], ecx
  00272	e8 00 00 00 00	 call	 Py_GetRecursionLimit
  00277	39 44 24 58	 cmp	 DWORD PTR tv149[rsp], eax
  0027b	7e 66		 jle	 SHORT $LN1@PyErr_Norm

; 281  :         --tstate->recursion_depth;

  0027d	48 8b 44 24 40	 mov	 rax, QWORD PTR tstate$[rsp]
  00282	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00285	ff c8		 dec	 eax
  00287	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tstate$[rsp]
  0028c	89 41 18	 mov	 DWORD PTR [rcx+24], eax

; 282  :         /* throw away the old exception... */
; 283  :         Py_DECREF(*exc);

  0028f	48 8b 44 24 70	 mov	 rax, QWORD PTR exc$[rsp]
  00294	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00297	e8 00 00 00 00	 call	 _Py_DecRef

; 284  :         Py_DECREF(*val);

  0029c	48 8b 44 24 78	 mov	 rax, QWORD PTR val$[rsp]
  002a1	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  002a4	e8 00 00 00 00	 call	 _Py_DecRef

; 285  :         /* ... and use the recursion error instead */
; 286  :         *exc = PyExc_RuntimeError;

  002a9	48 8b 44 24 70	 mov	 rax, QWORD PTR exc$[rsp]
  002ae	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeError
  002b5	48 89 08	 mov	 QWORD PTR [rax], rcx

; 287  :         *val = PyExc_RecursionErrorInst;

  002b8	48 8b 44 24 78	 mov	 rax, QWORD PTR val$[rsp]
  002bd	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RecursionErrorInst
  002c4	48 89 08	 mov	 QWORD PTR [rax], rcx

; 288  :         Py_INCREF(*exc);

  002c7	48 8b 44 24 70	 mov	 rax, QWORD PTR exc$[rsp]
  002cc	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  002cf	e8 00 00 00 00	 call	 _Py_IncRef

; 289  :         Py_INCREF(*val);

  002d4	48 8b 44 24 78	 mov	 rax, QWORD PTR val$[rsp]
  002d9	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  002dc	e8 00 00 00 00	 call	 _Py_IncRef

; 290  :         /* just keeping the old traceback */
; 291  :         return;

  002e1	eb 29		 jmp	 SHORT $LN19@PyErr_Norm
$LN1@PyErr_Norm:

; 292  :     }
; 293  :     PyErr_NormalizeException(exc, val, tb);

  002e3	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR tb$[rsp]
  002eb	48 8b 54 24 78	 mov	 rdx, QWORD PTR val$[rsp]
  002f0	48 8b 4c 24 70	 mov	 rcx, QWORD PTR exc$[rsp]
  002f5	e8 00 00 00 00	 call	 PyErr_NormalizeException

; 294  :     --tstate->recursion_depth;

  002fa	48 8b 44 24 40	 mov	 rax, QWORD PTR tstate$[rsp]
  002ff	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00302	ff c8		 dec	 eax
  00304	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tstate$[rsp]
  00309	89 41 18	 mov	 DWORD PTR [rcx+24], eax
$LN19@PyErr_Norm:

; 295  : }

  0030c	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00310	c3		 ret	 0
PyErr_NormalizeException ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyErr_Fetch DD imagerel $LN3
	DD	imagerel $LN3+124
	DD	imagerel $unwind$PyErr_Fetch
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyErr_Fetch DD 011301H
	DD	06213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyErr_Fetch
_TEXT	SEGMENT
tstate$ = 32
p_type$ = 64
p_value$ = 72
p_traceback$ = 80
PyErr_Fetch PROC					; COMDAT

; 300  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 301  :     PyThreadState *tstate = PyThreadState_GET();

  00013	e8 00 00 00 00	 call	 PyThreadState_Get
  00018	48 89 44 24 20	 mov	 QWORD PTR tstate$[rsp], rax

; 302  : 
; 303  :     *p_type = tstate->curexc_type;

  0001d	48 8b 44 24 40	 mov	 rax, QWORD PTR p_type$[rsp]
  00022	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tstate$[rsp]
  00027	48 8b 49 48	 mov	 rcx, QWORD PTR [rcx+72]
  0002b	48 89 08	 mov	 QWORD PTR [rax], rcx

; 304  :     *p_value = tstate->curexc_value;

  0002e	48 8b 44 24 48	 mov	 rax, QWORD PTR p_value$[rsp]
  00033	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tstate$[rsp]
  00038	48 8b 49 50	 mov	 rcx, QWORD PTR [rcx+80]
  0003c	48 89 08	 mov	 QWORD PTR [rax], rcx

; 305  :     *p_traceback = tstate->curexc_traceback;

  0003f	48 8b 44 24 50	 mov	 rax, QWORD PTR p_traceback$[rsp]
  00044	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tstate$[rsp]
  00049	48 8b 49 58	 mov	 rcx, QWORD PTR [rcx+88]
  0004d	48 89 08	 mov	 QWORD PTR [rax], rcx

; 306  : 
; 307  :     tstate->curexc_type = NULL;

  00050	48 8b 44 24 20	 mov	 rax, QWORD PTR tstate$[rsp]
  00055	48 c7 40 48 00
	00 00 00	 mov	 QWORD PTR [rax+72], 0

; 308  :     tstate->curexc_value = NULL;

  0005d	48 8b 44 24 20	 mov	 rax, QWORD PTR tstate$[rsp]
  00062	48 c7 40 50 00
	00 00 00	 mov	 QWORD PTR [rax+80], 0

; 309  :     tstate->curexc_traceback = NULL;

  0006a	48 8b 44 24 20	 mov	 rax, QWORD PTR tstate$[rsp]
  0006f	48 c7 40 58 00
	00 00 00	 mov	 QWORD PTR [rax+88], 0

; 310  : }

  00077	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0007b	c3		 ret	 0
PyErr_Fetch ENDP
_TEXT	ENDS
PUBLIC	PyErr_Clear
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyErr_Clear DD imagerel $LN3
	DD	imagerel $LN3+21
	DD	imagerel $unwind$PyErr_Clear
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyErr_Clear DD 010401H
	DD	04204H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyErr_Clear
_TEXT	SEGMENT
PyErr_Clear PROC					; COMDAT

; 314  : {

$LN3:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 315  :     PyErr_Restore(NULL, NULL, NULL);

  00004	45 33 c0	 xor	 r8d, r8d
  00007	33 d2		 xor	 edx, edx
  00009	33 c9		 xor	 ecx, ecx
  0000b	e8 00 00 00 00	 call	 PyErr_Restore

; 316  : }

  00010	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00014	c3		 ret	 0
PyErr_Clear ENDP
_TEXT	ENDS
PUBLIC	PyErr_GetExcInfo
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyErr_GetExcInfo DD imagerel $LN15
	DD	imagerel $LN15+175
	DD	imagerel $unwind$PyErr_GetExcInfo
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyErr_GetExcInfo DD 011301H
	DD	06213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyErr_GetExcInfo
_TEXT	SEGMENT
tstate$ = 32
p_type$ = 64
p_value$ = 72
p_traceback$ = 80
PyErr_GetExcInfo PROC					; COMDAT

; 320  : {

$LN15:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 321  :     PyThreadState *tstate = PyThreadState_GET();

  00013	e8 00 00 00 00	 call	 PyThreadState_Get
  00018	48 89 44 24 20	 mov	 QWORD PTR tstate$[rsp], rax

; 322  : 
; 323  :     *p_type = tstate->exc_type;

  0001d	48 8b 44 24 40	 mov	 rax, QWORD PTR p_type$[rsp]
  00022	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tstate$[rsp]
  00027	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  0002b	48 89 08	 mov	 QWORD PTR [rax], rcx

; 324  :     *p_value = tstate->exc_value;

  0002e	48 8b 44 24 48	 mov	 rax, QWORD PTR p_value$[rsp]
  00033	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tstate$[rsp]
  00038	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]
  0003c	48 89 08	 mov	 QWORD PTR [rax], rcx

; 325  :     *p_traceback = tstate->exc_traceback;

  0003f	48 8b 44 24 50	 mov	 rax, QWORD PTR p_traceback$[rsp]
  00044	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tstate$[rsp]
  00049	48 8b 49 70	 mov	 rcx, QWORD PTR [rcx+112]
  0004d	48 89 08	 mov	 QWORD PTR [rax], rcx
$LN12@PyErr_GetE:

; 326  : 
; 327  :     Py_XINCREF(*p_type);

  00050	48 8b 44 24 40	 mov	 rax, QWORD PTR p_type$[rsp]
  00055	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00059	74 0d		 je	 SHORT $LN9@PyErr_GetE
  0005b	48 8b 44 24 40	 mov	 rax, QWORD PTR p_type$[rsp]
  00060	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00063	e8 00 00 00 00	 call	 _Py_IncRef
$LN9@PyErr_GetE:
  00068	33 c0		 xor	 eax, eax
  0006a	85 c0		 test	 eax, eax
  0006c	75 e2		 jne	 SHORT $LN12@PyErr_GetE
$LN8@PyErr_GetE:

; 328  :     Py_XINCREF(*p_value);

  0006e	48 8b 44 24 48	 mov	 rax, QWORD PTR p_value$[rsp]
  00073	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00077	74 0d		 je	 SHORT $LN5@PyErr_GetE
  00079	48 8b 44 24 48	 mov	 rax, QWORD PTR p_value$[rsp]
  0007e	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00081	e8 00 00 00 00	 call	 _Py_IncRef
$LN5@PyErr_GetE:
  00086	33 c0		 xor	 eax, eax
  00088	85 c0		 test	 eax, eax
  0008a	75 e2		 jne	 SHORT $LN8@PyErr_GetE
$LN4@PyErr_GetE:

; 329  :     Py_XINCREF(*p_traceback);

  0008c	48 8b 44 24 50	 mov	 rax, QWORD PTR p_traceback$[rsp]
  00091	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00095	74 0d		 je	 SHORT $LN1@PyErr_GetE
  00097	48 8b 44 24 50	 mov	 rax, QWORD PTR p_traceback$[rsp]
  0009c	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0009f	e8 00 00 00 00	 call	 _Py_IncRef
$LN1@PyErr_GetE:
  000a4	33 c0		 xor	 eax, eax
  000a6	85 c0		 test	 eax, eax
  000a8	75 e2		 jne	 SHORT $LN4@PyErr_GetE

; 330  : }

  000aa	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000ae	c3		 ret	 0
PyErr_GetExcInfo ENDP
_TEXT	ENDS
PUBLIC	PyErr_SetExcInfo
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyErr_SetExcInfo DD imagerel $LN15
	DD	imagerel $LN15+190
	DD	imagerel $unwind$PyErr_SetExcInfo
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyErr_SetExcInfo DD 011301H
	DD	08213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyErr_SetExcInfo
_TEXT	SEGMENT
oldtraceback$ = 32
oldtype$ = 40
tstate$ = 48
oldvalue$ = 56
p_type$ = 80
p_value$ = 88
p_traceback$ = 96
PyErr_SetExcInfo PROC					; COMDAT

; 334  : {

$LN15:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 335  :     PyObject *oldtype, *oldvalue, *oldtraceback;
; 336  :     PyThreadState *tstate = PyThreadState_GET();

  00013	e8 00 00 00 00	 call	 PyThreadState_Get
  00018	48 89 44 24 30	 mov	 QWORD PTR tstate$[rsp], rax

; 337  : 
; 338  :     oldtype = tstate->exc_type;

  0001d	48 8b 44 24 30	 mov	 rax, QWORD PTR tstate$[rsp]
  00022	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00026	48 89 44 24 28	 mov	 QWORD PTR oldtype$[rsp], rax

; 339  :     oldvalue = tstate->exc_value;

  0002b	48 8b 44 24 30	 mov	 rax, QWORD PTR tstate$[rsp]
  00030	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00034	48 89 44 24 38	 mov	 QWORD PTR oldvalue$[rsp], rax

; 340  :     oldtraceback = tstate->exc_traceback;

  00039	48 8b 44 24 30	 mov	 rax, QWORD PTR tstate$[rsp]
  0003e	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00042	48 89 44 24 20	 mov	 QWORD PTR oldtraceback$[rsp], rax

; 341  : 
; 342  :     tstate->exc_type = p_type;

  00047	48 8b 44 24 30	 mov	 rax, QWORD PTR tstate$[rsp]
  0004c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR p_type$[rsp]
  00051	48 89 48 60	 mov	 QWORD PTR [rax+96], rcx

; 343  :     tstate->exc_value = p_value;

  00055	48 8b 44 24 30	 mov	 rax, QWORD PTR tstate$[rsp]
  0005a	48 8b 4c 24 58	 mov	 rcx, QWORD PTR p_value$[rsp]
  0005f	48 89 48 68	 mov	 QWORD PTR [rax+104], rcx

; 344  :     tstate->exc_traceback = p_traceback;

  00063	48 8b 44 24 30	 mov	 rax, QWORD PTR tstate$[rsp]
  00068	48 8b 4c 24 60	 mov	 rcx, QWORD PTR p_traceback$[rsp]
  0006d	48 89 48 70	 mov	 QWORD PTR [rax+112], rcx
$LN12@PyErr_SetE:

; 345  : 
; 346  :     Py_XDECREF(oldtype);

  00071	48 83 7c 24 28
	00		 cmp	 QWORD PTR oldtype$[rsp], 0
  00077	74 0a		 je	 SHORT $LN9@PyErr_SetE
  00079	48 8b 4c 24 28	 mov	 rcx, QWORD PTR oldtype$[rsp]
  0007e	e8 00 00 00 00	 call	 _Py_DecRef
$LN9@PyErr_SetE:
  00083	33 c0		 xor	 eax, eax
  00085	85 c0		 test	 eax, eax
  00087	75 e8		 jne	 SHORT $LN12@PyErr_SetE
$LN8@PyErr_SetE:

; 347  :     Py_XDECREF(oldvalue);

  00089	48 83 7c 24 38
	00		 cmp	 QWORD PTR oldvalue$[rsp], 0
  0008f	74 0a		 je	 SHORT $LN5@PyErr_SetE
  00091	48 8b 4c 24 38	 mov	 rcx, QWORD PTR oldvalue$[rsp]
  00096	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@PyErr_SetE:
  0009b	33 c0		 xor	 eax, eax
  0009d	85 c0		 test	 eax, eax
  0009f	75 e8		 jne	 SHORT $LN8@PyErr_SetE
$LN4@PyErr_SetE:

; 348  :     Py_XDECREF(oldtraceback);

  000a1	48 83 7c 24 20
	00		 cmp	 QWORD PTR oldtraceback$[rsp], 0
  000a7	74 0a		 je	 SHORT $LN1@PyErr_SetE
  000a9	48 8b 4c 24 20	 mov	 rcx, QWORD PTR oldtraceback$[rsp]
  000ae	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@PyErr_SetE:
  000b3	33 c0		 xor	 eax, eax
  000b5	85 c0		 test	 eax, eax
  000b7	75 e8		 jne	 SHORT $LN4@PyErr_SetE

; 349  : }

  000b9	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000bd	c3		 ret	 0
PyErr_SetExcInfo ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CJ@ECMFPPAN@bad?5argument?5type?5for?5built?9in?5o@ ; `string'
PUBLIC	PyErr_BadArgument
EXTRN	PyExc_TypeError:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyErr_BadArgument DD imagerel $LN3
	DD	imagerel $LN3+30
	DD	imagerel $unwind$PyErr_BadArgument
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyErr_BadArgument DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0CJ@ECMFPPAN@bad?5argument?5type?5for?5built?9in?5o@
CONST	SEGMENT
??_C@_0CJ@ECMFPPAN@bad?5argument?5type?5for?5built?9in?5o@ DB 'bad argume'
	DB	'nt type for built-in operation', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyErr_BadArgument
_TEXT	SEGMENT
PyErr_BadArgument PROC					; COMDAT

; 355  : {

$LN3:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 356  :     PyErr_SetString(PyExc_TypeError,
; 357  :                     "bad argument type for built-in operation");

  00004	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CJ@ECMFPPAN@bad?5argument?5type?5for?5built?9in?5o@
  0000b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00012	e8 00 00 00 00	 call	 PyErr_SetString

; 358  :     return 0;

  00017	33 c0		 xor	 eax, eax

; 359  : }

  00019	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001d	c3		 ret	 0
PyErr_BadArgument ENDP
_TEXT	ENDS
PUBLIC	PyErr_NoMemory
EXTRN	PyExc_MemoryError:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyErr_NoMemory DD imagerel $LN3
	DD	imagerel $LN3+23
	DD	imagerel $unwind$PyErr_NoMemory
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyErr_NoMemory DD 010401H
	DD	04204H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyErr_NoMemory
_TEXT	SEGMENT
PyErr_NoMemory PROC					; COMDAT

; 363  : {

$LN3:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 364  :     PyErr_SetNone(PyExc_MemoryError);

  00004	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_MemoryError
  0000b	e8 00 00 00 00	 call	 PyErr_SetNone

; 365  :     return NULL;

  00010	33 c0		 xor	 eax, eax

; 366  : }

  00012	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00016	c3		 ret	 0
PyErr_NoMemory ENDP
_TEXT	ENDS
PUBLIC	??_C@_04LBMCIBLI@?$CIiO?$CJ?$AA@		; `string'
PUBLIC	??_C@_05MNBHNBEG@?$CIiOO?$CJ?$AA@		; `string'
PUBLIC	??_C@_0BD@MKMJJOEP@Windows?5Error?50x?$CFX?$AA@	; `string'
PUBLIC	??_C@_05NAOIJFC@Error?$AA@			; `string'
PUBLIC	PyErr_SetFromErrnoWithFilenameObject
EXTRN	PyObject_Call:PROC
EXTRN	Py_BuildValue:PROC
EXTRN	__imp_LocalFree:PROC
EXTRN	PyUnicode_FromWideChar:PROC
EXTRN	PyUnicode_FromFormat:PROC
EXTRN	__imp_FormatMessageW:PROC
EXTRN	__imp___sys_errlist:PROC
EXTRN	__imp___sys_nerr:PROC
EXTRN	PyErr_CheckSignals:PROC
EXTRN	__imp__errno:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyErr_SetFromErrnoWithFilenameObject DD imagerel $LN18
	DD	imagerel $LN18+542
	DD	imagerel $unwind$PyErr_SetFromErrnoWithFilenameObject
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyErr_SetFromErrnoWithFilenameObject DD 010e01H
	DD	0e20eH
xdata	ENDS
;	COMDAT ??_C@_04LBMCIBLI@?$CIiO?$CJ?$AA@
CONST	SEGMENT
??_C@_04LBMCIBLI@?$CIiO?$CJ?$AA@ DB '(iO)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05MNBHNBEG@?$CIiOO?$CJ?$AA@
CONST	SEGMENT
??_C@_05MNBHNBEG@?$CIiOO?$CJ?$AA@ DB '(iOO)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@MKMJJOEP@Windows?5Error?50x?$CFX?$AA@
CONST	SEGMENT
??_C@_0BD@MKMJJOEP@Windows?5Error?50x?$CFX?$AA@ DB 'Windows Error 0x%X', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05NAOIJFC@Error?$AA@
CONST	SEGMENT
??_C@_05NAOIJFC@Error?$AA@ DB 'Error', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyErr_SetFromErrnoWithFilenameObject
_TEXT	SEGMENT
args$ = 64
v$ = 72
i$ = 80
s_buf$ = 88
message$ = 96
len$120702 = 104
exc$ = 128
filenameObject$ = 136
PyErr_SetFromErrnoWithFilenameObject PROC		; COMDAT

; 370  : {

$LN18:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 371  :     PyObject *message;
; 372  :     PyObject *v, *args;
; 373  :     int i = errno;

  0000e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00014	8b 00		 mov	 eax, DWORD PTR [rax]
  00016	89 44 24 50	 mov	 DWORD PTR i$[rsp], eax

; 374  : #ifdef MS_WINDOWS
; 375  :     WCHAR *s_buf = NULL;

  0001a	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR s_buf$[rsp], 0

; 376  : #endif /* Unix/Windows */
; 377  : 
; 378  : #ifdef EINTR
; 379  :     if (i == EINTR && PyErr_CheckSignals())

  00023	83 7c 24 50 04	 cmp	 DWORD PTR i$[rsp], 4
  00028	75 10		 jne	 SHORT $LN15@PyErr_SetF
  0002a	e8 00 00 00 00	 call	 PyErr_CheckSignals
  0002f	85 c0		 test	 eax, eax
  00031	74 07		 je	 SHORT $LN15@PyErr_SetF

; 380  :         return NULL;

  00033	33 c0		 xor	 eax, eax
  00035	e9 df 01 00 00	 jmp	 $LN16@PyErr_SetF
$LN15@PyErr_SetF:

; 381  : #endif
; 382  : 
; 383  : #ifndef MS_WINDOWS
; 384  :     if (i != 0) {
; 385  :         char *s = strerror(i);
; 386  :         message = PyUnicode_DecodeLocale(s, "surrogateescape");
; 387  :     }
; 388  :     else {
; 389  :         /* Sometimes errno didn't get set */
; 390  :         message = PyUnicode_FromString("Error");
; 391  :     }
; 392  : #else
; 393  :     if (i == 0)

  0003a	83 7c 24 50 00	 cmp	 DWORD PTR i$[rsp], 0
  0003f	75 16		 jne	 SHORT $LN14@PyErr_SetF

; 394  :         message = PyUnicode_FromString("Error"); /* Sometimes errno didn't get set */

  00041	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05NAOIJFC@Error?$AA@
  00048	e8 00 00 00 00	 call	 PyUnicode_FromString
  0004d	48 89 44 24 60	 mov	 QWORD PTR message$[rsp], rax

; 395  :     else

  00052	e9 f7 00 00 00	 jmp	 $LN13@PyErr_SetF
$LN14@PyErr_SetF:

; 396  :     {
; 397  :         /* Note that the Win32 errors do not lineup with the
; 398  :            errno error.  So if the error is in the MSVC error
; 399  :            table, we use it, otherwise we assume it really _is_
; 400  :            a Win32 error code
; 401  :         */
; 402  :         if (i > 0 && i < _sys_nerr) {

  00057	83 7c 24 50 00	 cmp	 DWORD PTR i$[rsp], 0
  0005c	7e 2c		 jle	 SHORT $LN12@PyErr_SetF
  0005e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___sys_nerr
  00064	8b 00		 mov	 eax, DWORD PTR [rax]
  00066	39 44 24 50	 cmp	 DWORD PTR i$[rsp], eax
  0006a	7d 1e		 jge	 SHORT $LN12@PyErr_SetF

; 403  :             message = PyUnicode_FromString(_sys_errlist[i]);

  0006c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___sys_errlist
  00072	48 63 4c 24 50	 movsxd	 rcx, DWORD PTR i$[rsp]
  00077	48 8b 0c c8	 mov	 rcx, QWORD PTR [rax+rcx*8]
  0007b	e8 00 00 00 00	 call	 PyUnicode_FromString
  00080	48 89 44 24 60	 mov	 QWORD PTR message$[rsp], rax

; 404  :         }
; 405  :         else {

  00085	e9 c4 00 00 00	 jmp	 $LN11@PyErr_SetF
$LN12@PyErr_SetF:

; 406  :             int len = FormatMessageW(
; 407  :                 FORMAT_MESSAGE_ALLOCATE_BUFFER |
; 408  :                 FORMAT_MESSAGE_FROM_SYSTEM |
; 409  :                 FORMAT_MESSAGE_IGNORE_INSERTS,
; 410  :                 NULL,                   /* no message source */
; 411  :                 i,
; 412  :                 MAKELANGID(LANG_NEUTRAL,
; 413  :                            SUBLANG_DEFAULT),
; 414  :                            /* Default language */
; 415  :                 (LPWSTR) &s_buf,
; 416  :                 0,                      /* size not used */
; 417  :                 NULL);                  /* no args */

  0008a	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR [rsp+48], 0
  00093	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  0009b	48 8d 44 24 58	 lea	 rax, QWORD PTR s_buf$[rsp]
  000a0	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000a5	41 b9 00 04 00
	00		 mov	 r9d, 1024		; 00000400H
  000ab	44 8b 44 24 50	 mov	 r8d, DWORD PTR i$[rsp]
  000b0	33 d2		 xor	 edx, edx
  000b2	b9 00 13 00 00	 mov	 ecx, 4864		; 00001300H
  000b7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FormatMessageW
  000bd	89 44 24 68	 mov	 DWORD PTR len$120702[rsp], eax

; 418  :             if (len==0) {

  000c1	83 7c 24 68 00	 cmp	 DWORD PTR len$120702[rsp], 0
  000c6	75 20		 jne	 SHORT $LN10@PyErr_SetF

; 419  :                 /* Only ever seen this in out-of-mem
; 420  :                    situations */
; 421  :                 s_buf = NULL;

  000c8	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR s_buf$[rsp], 0

; 422  :                 message = PyUnicode_FromFormat("Windows Error 0x%X", i);

  000d1	8b 54 24 50	 mov	 edx, DWORD PTR i$[rsp]
  000d5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@MKMJJOEP@Windows?5Error?50x?$CFX?$AA@
  000dc	e8 00 00 00 00	 call	 PyUnicode_FromFormat
  000e1	48 89 44 24 60	 mov	 QWORD PTR message$[rsp], rax

; 423  :             } else {

  000e6	eb 66		 jmp	 SHORT $LN9@PyErr_SetF
$LN10@PyErr_SetF:
$LN8@PyErr_SetF:

; 424  :                 /* remove trailing cr/lf and dots */
; 425  :                 while (len > 0 && (s_buf[len-1] <= L' ' || s_buf[len-1] == L'.'))

  000e8	83 7c 24 68 00	 cmp	 DWORD PTR len$120702[rsp], 0
  000ed	7e 48		 jle	 SHORT $LN7@PyErr_SetF
  000ef	8b 44 24 68	 mov	 eax, DWORD PTR len$120702[rsp]
  000f3	ff c8		 dec	 eax
  000f5	48 98		 cdqe
  000f7	48 8b 4c 24 58	 mov	 rcx, QWORD PTR s_buf$[rsp]
  000fc	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00100	83 f8 20	 cmp	 eax, 32			; 00000020H
  00103	7e 16		 jle	 SHORT $LN6@PyErr_SetF
  00105	8b 44 24 68	 mov	 eax, DWORD PTR len$120702[rsp]
  00109	ff c8		 dec	 eax
  0010b	48 98		 cdqe
  0010d	48 8b 4c 24 58	 mov	 rcx, QWORD PTR s_buf$[rsp]
  00112	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00116	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  00119	75 1c		 jne	 SHORT $LN7@PyErr_SetF
$LN6@PyErr_SetF:

; 426  :                     s_buf[--len] = L'\0';

  0011b	8b 44 24 68	 mov	 eax, DWORD PTR len$120702[rsp]
  0011f	ff c8		 dec	 eax
  00121	89 44 24 68	 mov	 DWORD PTR len$120702[rsp], eax
  00125	48 63 44 24 68	 movsxd	 rax, DWORD PTR len$120702[rsp]
  0012a	33 c9		 xor	 ecx, ecx
  0012c	48 8b 54 24 58	 mov	 rdx, QWORD PTR s_buf$[rsp]
  00131	66 89 0c 42	 mov	 WORD PTR [rdx+rax*2], cx
  00135	eb b1		 jmp	 SHORT $LN8@PyErr_SetF
$LN7@PyErr_SetF:

; 427  :                 message = PyUnicode_FromWideChar(s_buf, len);

  00137	48 63 44 24 68	 movsxd	 rax, DWORD PTR len$120702[rsp]
  0013c	48 8b d0	 mov	 rdx, rax
  0013f	48 8b 4c 24 58	 mov	 rcx, QWORD PTR s_buf$[rsp]
  00144	e8 00 00 00 00	 call	 PyUnicode_FromWideChar
  00149	48 89 44 24 60	 mov	 QWORD PTR message$[rsp], rax
$LN9@PyErr_SetF:
$LN11@PyErr_SetF:
$LN13@PyErr_SetF:

; 428  :             }
; 429  :         }
; 430  :     }
; 431  : #endif /* Unix/Windows */
; 432  : 
; 433  :     if (message == NULL)

  0014e	48 83 7c 24 60
	00		 cmp	 QWORD PTR message$[rsp], 0
  00154	75 12		 jne	 SHORT $LN5@PyErr_SetF

; 434  :     {
; 435  : #ifdef MS_WINDOWS
; 436  :         LocalFree(s_buf);

  00156	48 8b 4c 24 58	 mov	 rcx, QWORD PTR s_buf$[rsp]
  0015b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_LocalFree

; 437  : #endif
; 438  :         return NULL;

  00161	33 c0		 xor	 eax, eax
  00163	e9 b1 00 00 00	 jmp	 $LN16@PyErr_SetF
$LN5@PyErr_SetF:

; 439  :     }
; 440  : 
; 441  :     if (filenameObject != NULL)

  00168	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR filenameObject$[rsp], 0
  00171	74 24		 je	 SHORT $LN4@PyErr_SetF

; 442  :         args = Py_BuildValue("(iOO)", i, message, filenameObject);

  00173	4c 8b 8c 24 88
	00 00 00	 mov	 r9, QWORD PTR filenameObject$[rsp]
  0017b	4c 8b 44 24 60	 mov	 r8, QWORD PTR message$[rsp]
  00180	8b 54 24 50	 mov	 edx, DWORD PTR i$[rsp]
  00184	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05MNBHNBEG@?$CIiOO?$CJ?$AA@
  0018b	e8 00 00 00 00	 call	 Py_BuildValue
  00190	48 89 44 24 40	 mov	 QWORD PTR args$[rsp], rax

; 443  :     else

  00195	eb 1a		 jmp	 SHORT $LN3@PyErr_SetF
$LN4@PyErr_SetF:

; 444  :         args = Py_BuildValue("(iO)", i, message);

  00197	4c 8b 44 24 60	 mov	 r8, QWORD PTR message$[rsp]
  0019c	8b 54 24 50	 mov	 edx, DWORD PTR i$[rsp]
  001a0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04LBMCIBLI@?$CIiO?$CJ?$AA@
  001a7	e8 00 00 00 00	 call	 Py_BuildValue
  001ac	48 89 44 24 40	 mov	 QWORD PTR args$[rsp], rax
$LN3@PyErr_SetF:

; 445  :     Py_DECREF(message);

  001b1	48 8b 4c 24 60	 mov	 rcx, QWORD PTR message$[rsp]
  001b6	e8 00 00 00 00	 call	 _Py_DecRef

; 446  : 
; 447  :     if (args != NULL) {

  001bb	48 83 7c 24 40
	00		 cmp	 QWORD PTR args$[rsp], 0
  001c1	74 49		 je	 SHORT $LN2@PyErr_SetF

; 448  :         v = PyObject_Call(exc, args, NULL);

  001c3	45 33 c0	 xor	 r8d, r8d
  001c6	48 8b 54 24 40	 mov	 rdx, QWORD PTR args$[rsp]
  001cb	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR exc$[rsp]
  001d3	e8 00 00 00 00	 call	 PyObject_Call
  001d8	48 89 44 24 48	 mov	 QWORD PTR v$[rsp], rax

; 449  :         Py_DECREF(args);

  001dd	48 8b 4c 24 40	 mov	 rcx, QWORD PTR args$[rsp]
  001e2	e8 00 00 00 00	 call	 _Py_DecRef

; 450  :         if (v != NULL) {

  001e7	48 83 7c 24 48
	00		 cmp	 QWORD PTR v$[rsp], 0
  001ed	74 1d		 je	 SHORT $LN1@PyErr_SetF

; 451  :             PyErr_SetObject((PyObject *) Py_TYPE(v), v);

  001ef	48 8b 54 24 48	 mov	 rdx, QWORD PTR v$[rsp]
  001f4	48 8b 44 24 48	 mov	 rax, QWORD PTR v$[rsp]
  001f9	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  001fd	e8 00 00 00 00	 call	 PyErr_SetObject

; 452  :             Py_DECREF(v);

  00202	48 8b 4c 24 48	 mov	 rcx, QWORD PTR v$[rsp]
  00207	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@PyErr_SetF:
$LN2@PyErr_SetF:

; 453  :         }
; 454  :     }
; 455  : #ifdef MS_WINDOWS
; 456  :     LocalFree(s_buf);

  0020c	48 8b 4c 24 58	 mov	 rcx, QWORD PTR s_buf$[rsp]
  00211	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_LocalFree

; 457  : #endif
; 458  :     return NULL;

  00217	33 c0		 xor	 eax, eax
$LN16@PyErr_SetF:

; 459  : }

  00219	48 83 c4 78	 add	 rsp, 120		; 00000078H
  0021d	c3		 ret	 0
PyErr_SetFromErrnoWithFilenameObject ENDP
_TEXT	ENDS
PUBLIC	PyErr_SetFromErrnoWithFilename
EXTRN	PyUnicode_DecodeFSDefault:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyErr_SetFromErrnoWithFilename DD imagerel $LN9
	DD	imagerel $LN9+112
	DD	imagerel $unwind$PyErr_SetFromErrnoWithFilename
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyErr_SetFromErrnoWithFilename DD 010e01H
	DD	0820eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyErr_SetFromErrnoWithFilename
_TEXT	SEGMENT
name$ = 32
result$ = 40
tv67 = 48
exc$ = 80
filename$ = 88
PyErr_SetFromErrnoWithFilename PROC			; COMDAT

; 464  : {

$LN9:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 465  :     PyObject *name = filename ? PyUnicode_DecodeFSDefault(filename) : NULL;

  0000e	48 83 7c 24 58
	00		 cmp	 QWORD PTR filename$[rsp], 0
  00014	74 11		 je	 SHORT $LN7@PyErr_SetF@2
  00016	48 8b 4c 24 58	 mov	 rcx, QWORD PTR filename$[rsp]
  0001b	e8 00 00 00 00	 call	 PyUnicode_DecodeFSDefault
  00020	48 89 44 24 30	 mov	 QWORD PTR tv67[rsp], rax
  00025	eb 09		 jmp	 SHORT $LN8@PyErr_SetF@2
$LN7@PyErr_SetF@2:
  00027	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR tv67[rsp], 0
$LN8@PyErr_SetF@2:
  00030	48 8b 44 24 30	 mov	 rax, QWORD PTR tv67[rsp]
  00035	48 89 44 24 20	 mov	 QWORD PTR name$[rsp], rax

; 466  :     PyObject *result = PyErr_SetFromErrnoWithFilenameObject(exc, name);

  0003a	48 8b 54 24 20	 mov	 rdx, QWORD PTR name$[rsp]
  0003f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR exc$[rsp]
  00044	e8 00 00 00 00	 call	 PyErr_SetFromErrnoWithFilenameObject
  00049	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax
$LN4@PyErr_SetF@2:

; 467  :     Py_XDECREF(name);

  0004e	48 83 7c 24 20
	00		 cmp	 QWORD PTR name$[rsp], 0
  00054	74 0a		 je	 SHORT $LN1@PyErr_SetF@2
  00056	48 8b 4c 24 20	 mov	 rcx, QWORD PTR name$[rsp]
  0005b	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@PyErr_SetF@2:
  00060	33 c0		 xor	 eax, eax
  00062	85 c0		 test	 eax, eax
  00064	75 e8		 jne	 SHORT $LN4@PyErr_SetF@2

; 468  :     return result;

  00066	48 8b 44 24 28	 mov	 rax, QWORD PTR result$[rsp]

; 469  : }

  0006b	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0006f	c3		 ret	 0
PyErr_SetFromErrnoWithFilename ENDP
_TEXT	ENDS
PUBLIC	PyErr_SetFromErrnoWithUnicodeFilename
EXTRN	PyUnicode_FromUnicode:PROC
EXTRN	__imp_wcslen:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyErr_SetFromErrnoWithUnicodeFilename DD imagerel $LN9
	DD	imagerel $LN9+126
	DD	imagerel $unwind$PyErr_SetFromErrnoWithUnicodeFilename
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyErr_SetFromErrnoWithUnicodeFilename DD 010e01H
	DD	0820eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyErr_SetFromErrnoWithUnicodeFilename
_TEXT	SEGMENT
name$ = 32
result$ = 40
tv70 = 48
exc$ = 80
filename$ = 88
PyErr_SetFromErrnoWithUnicodeFilename PROC		; COMDAT

; 474  : {

$LN9:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 475  :     PyObject *name = filename ?
; 476  :                      PyUnicode_FromUnicode(filename, wcslen(filename)) :
; 477  :              NULL;

  0000e	48 83 7c 24 58
	00		 cmp	 QWORD PTR filename$[rsp], 0
  00014	74 1f		 je	 SHORT $LN7@PyErr_SetF@3
  00016	48 8b 4c 24 58	 mov	 rcx, QWORD PTR filename$[rsp]
  0001b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_wcslen
  00021	48 8b d0	 mov	 rdx, rax
  00024	48 8b 4c 24 58	 mov	 rcx, QWORD PTR filename$[rsp]
  00029	e8 00 00 00 00	 call	 PyUnicode_FromUnicode
  0002e	48 89 44 24 30	 mov	 QWORD PTR tv70[rsp], rax
  00033	eb 09		 jmp	 SHORT $LN8@PyErr_SetF@3
$LN7@PyErr_SetF@3:
  00035	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR tv70[rsp], 0
$LN8@PyErr_SetF@3:
  0003e	48 8b 44 24 30	 mov	 rax, QWORD PTR tv70[rsp]
  00043	48 89 44 24 20	 mov	 QWORD PTR name$[rsp], rax

; 478  :     PyObject *result = PyErr_SetFromErrnoWithFilenameObject(exc, name);

  00048	48 8b 54 24 20	 mov	 rdx, QWORD PTR name$[rsp]
  0004d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR exc$[rsp]
  00052	e8 00 00 00 00	 call	 PyErr_SetFromErrnoWithFilenameObject
  00057	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax
$LN4@PyErr_SetF@3:

; 479  :     Py_XDECREF(name);

  0005c	48 83 7c 24 20
	00		 cmp	 QWORD PTR name$[rsp], 0
  00062	74 0a		 je	 SHORT $LN1@PyErr_SetF@3
  00064	48 8b 4c 24 20	 mov	 rcx, QWORD PTR name$[rsp]
  00069	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@PyErr_SetF@3:
  0006e	33 c0		 xor	 eax, eax
  00070	85 c0		 test	 eax, eax
  00072	75 e8		 jne	 SHORT $LN4@PyErr_SetF@3

; 480  :     return result;

  00074	48 8b 44 24 28	 mov	 rax, QWORD PTR result$[rsp]

; 481  : }

  00079	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0007d	c3		 ret	 0
PyErr_SetFromErrnoWithUnicodeFilename ENDP
_TEXT	ENDS
PUBLIC	PyErr_SetFromErrno
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyErr_SetFromErrno DD imagerel $LN3
	DD	imagerel $LN3+26
	DD	imagerel $unwind$PyErr_SetFromErrno
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyErr_SetFromErrno DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyErr_SetFromErrno
_TEXT	SEGMENT
exc$ = 48
PyErr_SetFromErrno PROC					; COMDAT

; 486  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 487  :     return PyErr_SetFromErrnoWithFilenameObject(exc, NULL);

  00009	33 d2		 xor	 edx, edx
  0000b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR exc$[rsp]
  00010	e8 00 00 00 00	 call	 PyErr_SetFromErrnoWithFilenameObject

; 488  : }

  00015	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00019	c3		 ret	 0
PyErr_SetFromErrno ENDP
_TEXT	ENDS
PUBLIC	??_C@_06KLKOOBFP@?$CIiOOi?$CJ?$AA@		; `string'
PUBLIC	PyErr_SetExcFromWindowsErrWithFilenameObject
EXTRN	__imp_GetLastError:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyErr_SetExcFromWindowsErrWithFilenameObject DD imagerel $LN13
	DD	imagerel $LN13+452
	DD	imagerel $unwind$PyErr_SetExcFromWindowsErrWithFilenameObject
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyErr_SetExcFromWindowsErrWithFilenameObject DD 011201H
	DD	0e212H
xdata	ENDS
;	COMDAT ??_C@_06KLKOOBFP@?$CIiOOi?$CJ?$AA@
CONST	SEGMENT
??_C@_06KLKOOBFP@?$CIiOOi?$CJ?$AA@ DB '(iOOi)', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyErr_SetExcFromWindowsErrWithFilenameObject
_TEXT	SEGMENT
v$ = 64
args$ = 72
s_buf$ = 80
len$ = 88
message$ = 96
err$ = 104
exc$ = 128
ierr$ = 136
filenameObject$ = 144
PyErr_SetExcFromWindowsErrWithFilenameObject PROC	; COMDAT

; 496  : {

$LN13:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 497  :     int len;
; 498  :     WCHAR *s_buf = NULL; /* Free via LocalFree */

  00012	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR s_buf$[rsp], 0

; 499  :     PyObject *message;
; 500  :     PyObject *args, *v;
; 501  :     DWORD err = (DWORD)ierr;

  0001b	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR ierr$[rsp]
  00022	89 44 24 68	 mov	 DWORD PTR err$[rsp], eax

; 502  :     if (err==0) err = GetLastError();

  00026	83 7c 24 68 00	 cmp	 DWORD PTR err$[rsp], 0
  0002b	75 0a		 jne	 SHORT $LN10@PyErr_SetE@2
  0002d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetLastError
  00033	89 44 24 68	 mov	 DWORD PTR err$[rsp], eax
$LN10@PyErr_SetE@2:

; 503  :     len = FormatMessageW(
; 504  :         /* Error API error */
; 505  :         FORMAT_MESSAGE_ALLOCATE_BUFFER |
; 506  :         FORMAT_MESSAGE_FROM_SYSTEM |
; 507  :         FORMAT_MESSAGE_IGNORE_INSERTS,
; 508  :         NULL,           /* no message source */
; 509  :         err,
; 510  :         MAKELANGID(LANG_NEUTRAL,
; 511  :         SUBLANG_DEFAULT), /* Default language */
; 512  :         (LPWSTR) &s_buf,
; 513  :         0,              /* size not used */
; 514  :         NULL);          /* no args */

  00037	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR [rsp+48], 0
  00040	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  00048	48 8d 44 24 50	 lea	 rax, QWORD PTR s_buf$[rsp]
  0004d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00052	41 b9 00 04 00
	00		 mov	 r9d, 1024		; 00000400H
  00058	44 8b 44 24 68	 mov	 r8d, DWORD PTR err$[rsp]
  0005d	33 d2		 xor	 edx, edx
  0005f	b9 00 13 00 00	 mov	 ecx, 4864		; 00001300H
  00064	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FormatMessageW
  0006a	89 44 24 58	 mov	 DWORD PTR len$[rsp], eax

; 515  :     if (len==0) {

  0006e	83 7c 24 58 00	 cmp	 DWORD PTR len$[rsp], 0
  00073	75 20		 jne	 SHORT $LN9@PyErr_SetE@2

; 516  :         /* Only seen this in out of mem situations */
; 517  :         message = PyUnicode_FromFormat("Windows Error 0x%X", err);

  00075	8b 54 24 68	 mov	 edx, DWORD PTR err$[rsp]
  00079	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@MKMJJOEP@Windows?5Error?50x?$CFX?$AA@
  00080	e8 00 00 00 00	 call	 PyUnicode_FromFormat
  00085	48 89 44 24 60	 mov	 QWORD PTR message$[rsp], rax

; 518  :         s_buf = NULL;

  0008a	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR s_buf$[rsp], 0

; 519  :     } else {

  00093	eb 66		 jmp	 SHORT $LN8@PyErr_SetE@2
$LN9@PyErr_SetE@2:
$LN7@PyErr_SetE@2:

; 520  :         /* remove trailing cr/lf and dots */
; 521  :         while (len > 0 && (s_buf[len-1] <= L' ' || s_buf[len-1] == L'.'))

  00095	83 7c 24 58 00	 cmp	 DWORD PTR len$[rsp], 0
  0009a	7e 48		 jle	 SHORT $LN6@PyErr_SetE@2
  0009c	8b 44 24 58	 mov	 eax, DWORD PTR len$[rsp]
  000a0	ff c8		 dec	 eax
  000a2	48 98		 cdqe
  000a4	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s_buf$[rsp]
  000a9	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  000ad	83 f8 20	 cmp	 eax, 32			; 00000020H
  000b0	7e 16		 jle	 SHORT $LN5@PyErr_SetE@2
  000b2	8b 44 24 58	 mov	 eax, DWORD PTR len$[rsp]
  000b6	ff c8		 dec	 eax
  000b8	48 98		 cdqe
  000ba	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s_buf$[rsp]
  000bf	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  000c3	83 f8 2e	 cmp	 eax, 46			; 0000002eH
  000c6	75 1c		 jne	 SHORT $LN6@PyErr_SetE@2
$LN5@PyErr_SetE@2:

; 522  :             s_buf[--len] = L'\0';

  000c8	8b 44 24 58	 mov	 eax, DWORD PTR len$[rsp]
  000cc	ff c8		 dec	 eax
  000ce	89 44 24 58	 mov	 DWORD PTR len$[rsp], eax
  000d2	48 63 44 24 58	 movsxd	 rax, DWORD PTR len$[rsp]
  000d7	33 c9		 xor	 ecx, ecx
  000d9	48 8b 54 24 50	 mov	 rdx, QWORD PTR s_buf$[rsp]
  000de	66 89 0c 42	 mov	 WORD PTR [rdx+rax*2], cx
  000e2	eb b1		 jmp	 SHORT $LN7@PyErr_SetE@2
$LN6@PyErr_SetE@2:

; 523  :         message = PyUnicode_FromWideChar(s_buf, len);

  000e4	48 63 44 24 58	 movsxd	 rax, DWORD PTR len$[rsp]
  000e9	48 8b d0	 mov	 rdx, rax
  000ec	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s_buf$[rsp]
  000f1	e8 00 00 00 00	 call	 PyUnicode_FromWideChar
  000f6	48 89 44 24 60	 mov	 QWORD PTR message$[rsp], rax
$LN8@PyErr_SetE@2:

; 524  :     }
; 525  : 
; 526  :     if (message == NULL)

  000fb	48 83 7c 24 60
	00		 cmp	 QWORD PTR message$[rsp], 0
  00101	75 12		 jne	 SHORT $LN4@PyErr_SetE@2

; 527  :     {
; 528  :         LocalFree(s_buf);

  00103	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s_buf$[rsp]
  00108	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_LocalFree

; 529  :         return NULL;

  0010e	33 c0		 xor	 eax, eax
  00110	e9 aa 00 00 00	 jmp	 $LN11@PyErr_SetE@2
$LN4@PyErr_SetE@2:

; 530  :     }
; 531  : 
; 532  :     if (filenameObject == NULL)

  00115	48 83 bc 24 90
	00 00 00 00	 cmp	 QWORD PTR filenameObject$[rsp], 0
  0011e	75 0f		 jne	 SHORT $LN3@PyErr_SetE@2

; 533  :         filenameObject = Py_None;

  00120	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00127	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR filenameObject$[rsp], rax
$LN3@PyErr_SetE@2:

; 534  :     /* This is the constructor signature for passing a Windows error code.
; 535  :        The POSIX translation will be figured out by the constructor. */
; 536  :     args = Py_BuildValue("(iOOi)", 0, message, filenameObject, err);

  0012f	8b 44 24 68	 mov	 eax, DWORD PTR err$[rsp]
  00133	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00137	4c 8b 8c 24 90
	00 00 00	 mov	 r9, QWORD PTR filenameObject$[rsp]
  0013f	4c 8b 44 24 60	 mov	 r8, QWORD PTR message$[rsp]
  00144	33 d2		 xor	 edx, edx
  00146	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06KLKOOBFP@?$CIiOOi?$CJ?$AA@
  0014d	e8 00 00 00 00	 call	 Py_BuildValue
  00152	48 89 44 24 48	 mov	 QWORD PTR args$[rsp], rax

; 537  :     Py_DECREF(message);

  00157	48 8b 4c 24 60	 mov	 rcx, QWORD PTR message$[rsp]
  0015c	e8 00 00 00 00	 call	 _Py_DecRef

; 538  : 
; 539  :     if (args != NULL) {

  00161	48 83 7c 24 48
	00		 cmp	 QWORD PTR args$[rsp], 0
  00167	74 49		 je	 SHORT $LN2@PyErr_SetE@2

; 540  :         v = PyObject_Call(exc, args, NULL);

  00169	45 33 c0	 xor	 r8d, r8d
  0016c	48 8b 54 24 48	 mov	 rdx, QWORD PTR args$[rsp]
  00171	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR exc$[rsp]
  00179	e8 00 00 00 00	 call	 PyObject_Call
  0017e	48 89 44 24 40	 mov	 QWORD PTR v$[rsp], rax

; 541  :         Py_DECREF(args);

  00183	48 8b 4c 24 48	 mov	 rcx, QWORD PTR args$[rsp]
  00188	e8 00 00 00 00	 call	 _Py_DecRef

; 542  :         if (v != NULL) {

  0018d	48 83 7c 24 40
	00		 cmp	 QWORD PTR v$[rsp], 0
  00193	74 1d		 je	 SHORT $LN1@PyErr_SetE@2

; 543  :             PyErr_SetObject((PyObject *) Py_TYPE(v), v);

  00195	48 8b 54 24 40	 mov	 rdx, QWORD PTR v$[rsp]
  0019a	48 8b 44 24 40	 mov	 rax, QWORD PTR v$[rsp]
  0019f	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  001a3	e8 00 00 00 00	 call	 PyErr_SetObject

; 544  :             Py_DECREF(v);

  001a8	48 8b 4c 24 40	 mov	 rcx, QWORD PTR v$[rsp]
  001ad	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@PyErr_SetE@2:
$LN2@PyErr_SetE@2:

; 545  :         }
; 546  :     }
; 547  :     LocalFree(s_buf);

  001b2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s_buf$[rsp]
  001b7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_LocalFree

; 548  :     return NULL;

  001bd	33 c0		 xor	 eax, eax
$LN11@PyErr_SetE@2:

; 549  : }

  001bf	48 83 c4 78	 add	 rsp, 120		; 00000078H
  001c3	c3		 ret	 0
PyErr_SetExcFromWindowsErrWithFilenameObject ENDP
_TEXT	ENDS
PUBLIC	PyErr_SetExcFromWindowsErrWithFilename
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyErr_SetExcFromWindowsErrWithFilename DD imagerel $LN9
	DD	imagerel $LN9+120
	DD	imagerel $unwind$PyErr_SetExcFromWindowsErrWithFilename
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyErr_SetExcFromWindowsErrWithFilename DD 011201H
	DD	08212H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyErr_SetExcFromWindowsErrWithFilename
_TEXT	SEGMENT
name$ = 32
ret$ = 40
tv67 = 48
exc$ = 80
ierr$ = 88
filename$ = 96
PyErr_SetExcFromWindowsErrWithFilename PROC		; COMDAT

; 555  : {

$LN9:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 556  :     PyObject *name = filename ? PyUnicode_DecodeFSDefault(filename) : NULL;

  00012	48 83 7c 24 60
	00		 cmp	 QWORD PTR filename$[rsp], 0
  00018	74 11		 je	 SHORT $LN7@PyErr_SetE@3
  0001a	48 8b 4c 24 60	 mov	 rcx, QWORD PTR filename$[rsp]
  0001f	e8 00 00 00 00	 call	 PyUnicode_DecodeFSDefault
  00024	48 89 44 24 30	 mov	 QWORD PTR tv67[rsp], rax
  00029	eb 09		 jmp	 SHORT $LN8@PyErr_SetE@3
$LN7@PyErr_SetE@3:
  0002b	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR tv67[rsp], 0
$LN8@PyErr_SetE@3:
  00034	48 8b 44 24 30	 mov	 rax, QWORD PTR tv67[rsp]
  00039	48 89 44 24 20	 mov	 QWORD PTR name$[rsp], rax

; 557  :     PyObject *ret = PyErr_SetExcFromWindowsErrWithFilenameObject(exc,
; 558  :                                                                  ierr,
; 559  :                                                                  name);

  0003e	4c 8b 44 24 20	 mov	 r8, QWORD PTR name$[rsp]
  00043	8b 54 24 58	 mov	 edx, DWORD PTR ierr$[rsp]
  00047	48 8b 4c 24 50	 mov	 rcx, QWORD PTR exc$[rsp]
  0004c	e8 00 00 00 00	 call	 PyErr_SetExcFromWindowsErrWithFilenameObject
  00051	48 89 44 24 28	 mov	 QWORD PTR ret$[rsp], rax
$LN4@PyErr_SetE@3:

; 560  :     Py_XDECREF(name);

  00056	48 83 7c 24 20
	00		 cmp	 QWORD PTR name$[rsp], 0
  0005c	74 0a		 je	 SHORT $LN1@PyErr_SetE@3
  0005e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR name$[rsp]
  00063	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@PyErr_SetE@3:
  00068	33 c0		 xor	 eax, eax
  0006a	85 c0		 test	 eax, eax
  0006c	75 e8		 jne	 SHORT $LN4@PyErr_SetE@3

; 561  :     return ret;

  0006e	48 8b 44 24 28	 mov	 rax, QWORD PTR ret$[rsp]

; 562  : }

  00073	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00077	c3		 ret	 0
PyErr_SetExcFromWindowsErrWithFilename ENDP
_TEXT	ENDS
PUBLIC	PyErr_SetExcFromWindowsErrWithUnicodeFilename
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyErr_SetExcFromWindowsErrWithUnicodeFilename DD imagerel $LN9
	DD	imagerel $LN9+134
	DD	imagerel $unwind$PyErr_SetExcFromWindowsErrWithUnicodeFilename
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyErr_SetExcFromWindowsErrWithUnicodeFilename DD 011201H
	DD	08212H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyErr_SetExcFromWindowsErrWithUnicodeFilename
_TEXT	SEGMENT
name$ = 32
ret$ = 40
tv70 = 48
exc$ = 80
ierr$ = 88
filename$ = 96
PyErr_SetExcFromWindowsErrWithUnicodeFilename PROC	; COMDAT

; 568  : {

$LN9:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 569  :     PyObject *name = filename ?
; 570  :                      PyUnicode_FromUnicode(filename, wcslen(filename)) :
; 571  :              NULL;

  00012	48 83 7c 24 60
	00		 cmp	 QWORD PTR filename$[rsp], 0
  00018	74 1f		 je	 SHORT $LN7@PyErr_SetE@4
  0001a	48 8b 4c 24 60	 mov	 rcx, QWORD PTR filename$[rsp]
  0001f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_wcslen
  00025	48 8b d0	 mov	 rdx, rax
  00028	48 8b 4c 24 60	 mov	 rcx, QWORD PTR filename$[rsp]
  0002d	e8 00 00 00 00	 call	 PyUnicode_FromUnicode
  00032	48 89 44 24 30	 mov	 QWORD PTR tv70[rsp], rax
  00037	eb 09		 jmp	 SHORT $LN8@PyErr_SetE@4
$LN7@PyErr_SetE@4:
  00039	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR tv70[rsp], 0
$LN8@PyErr_SetE@4:
  00042	48 8b 44 24 30	 mov	 rax, QWORD PTR tv70[rsp]
  00047	48 89 44 24 20	 mov	 QWORD PTR name$[rsp], rax

; 572  :     PyObject *ret = PyErr_SetExcFromWindowsErrWithFilenameObject(exc,
; 573  :                                                                  ierr,
; 574  :                                                                  name);

  0004c	4c 8b 44 24 20	 mov	 r8, QWORD PTR name$[rsp]
  00051	8b 54 24 58	 mov	 edx, DWORD PTR ierr$[rsp]
  00055	48 8b 4c 24 50	 mov	 rcx, QWORD PTR exc$[rsp]
  0005a	e8 00 00 00 00	 call	 PyErr_SetExcFromWindowsErrWithFilenameObject
  0005f	48 89 44 24 28	 mov	 QWORD PTR ret$[rsp], rax
$LN4@PyErr_SetE@4:

; 575  :     Py_XDECREF(name);

  00064	48 83 7c 24 20
	00		 cmp	 QWORD PTR name$[rsp], 0
  0006a	74 0a		 je	 SHORT $LN1@PyErr_SetE@4
  0006c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR name$[rsp]
  00071	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@PyErr_SetE@4:
  00076	33 c0		 xor	 eax, eax
  00078	85 c0		 test	 eax, eax
  0007a	75 e8		 jne	 SHORT $LN4@PyErr_SetE@4

; 576  :     return ret;

  0007c	48 8b 44 24 28	 mov	 rax, QWORD PTR ret$[rsp]

; 577  : }

  00081	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00085	c3		 ret	 0
PyErr_SetExcFromWindowsErrWithUnicodeFilename ENDP
_TEXT	ENDS
PUBLIC	PyErr_SetExcFromWindowsErr
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyErr_SetExcFromWindowsErr DD imagerel $LN3
	DD	imagerel $LN3+35
	DD	imagerel $unwind$PyErr_SetExcFromWindowsErr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyErr_SetExcFromWindowsErr DD 010d01H
	DD	0420dH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyErr_SetExcFromWindowsErr
_TEXT	SEGMENT
exc$ = 48
ierr$ = 56
PyErr_SetExcFromWindowsErr PROC				; COMDAT

; 580  : {

$LN3:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 581  :     return PyErr_SetExcFromWindowsErrWithFilename(exc, ierr, NULL);

  0000d	45 33 c0	 xor	 r8d, r8d
  00010	8b 54 24 38	 mov	 edx, DWORD PTR ierr$[rsp]
  00014	48 8b 4c 24 30	 mov	 rcx, QWORD PTR exc$[rsp]
  00019	e8 00 00 00 00	 call	 PyErr_SetExcFromWindowsErrWithFilename

; 582  : }

  0001e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00022	c3		 ret	 0
PyErr_SetExcFromWindowsErr ENDP
_TEXT	ENDS
PUBLIC	PyErr_SetFromWindowsErr
EXTRN	PyExc_WindowsError:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyErr_SetFromWindowsErr DD imagerel $LN3
	DD	imagerel $LN3+32
	DD	imagerel $unwind$PyErr_SetFromWindowsErr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyErr_SetFromWindowsErr DD 010801H
	DD	04208H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyErr_SetFromWindowsErr
_TEXT	SEGMENT
ierr$ = 48
PyErr_SetFromWindowsErr PROC				; COMDAT

; 585  : {

$LN3:
  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 586  :     return PyErr_SetExcFromWindowsErrWithFilename(PyExc_WindowsError,
; 587  :                                                   ierr, NULL);

  00008	45 33 c0	 xor	 r8d, r8d
  0000b	8b 54 24 30	 mov	 edx, DWORD PTR ierr$[rsp]
  0000f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_WindowsError
  00016	e8 00 00 00 00	 call	 PyErr_SetExcFromWindowsErrWithFilename

; 588  : }

  0001b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001f	c3		 ret	 0
PyErr_SetFromWindowsErr ENDP
_TEXT	ENDS
PUBLIC	PyErr_SetFromWindowsErrWithFilename
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyErr_SetFromWindowsErrWithFilename DD imagerel $LN9
	DD	imagerel $LN9+117
	DD	imagerel $unwind$PyErr_SetFromWindowsErrWithFilename
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyErr_SetFromWindowsErrWithFilename DD 010d01H
	DD	0820dH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyErr_SetFromWindowsErrWithFilename
_TEXT	SEGMENT
name$ = 32
result$ = 40
tv67 = 48
ierr$ = 80
filename$ = 88
PyErr_SetFromWindowsErrWithFilename PROC		; COMDAT

; 592  : {

$LN9:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00009	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 593  :     PyObject *name = filename ? PyUnicode_DecodeFSDefault(filename) : NULL;

  0000d	48 83 7c 24 58
	00		 cmp	 QWORD PTR filename$[rsp], 0
  00013	74 11		 je	 SHORT $LN7@PyErr_SetF@4
  00015	48 8b 4c 24 58	 mov	 rcx, QWORD PTR filename$[rsp]
  0001a	e8 00 00 00 00	 call	 PyUnicode_DecodeFSDefault
  0001f	48 89 44 24 30	 mov	 QWORD PTR tv67[rsp], rax
  00024	eb 09		 jmp	 SHORT $LN8@PyErr_SetF@4
$LN7@PyErr_SetF@4:
  00026	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR tv67[rsp], 0
$LN8@PyErr_SetF@4:
  0002f	48 8b 44 24 30	 mov	 rax, QWORD PTR tv67[rsp]
  00034	48 89 44 24 20	 mov	 QWORD PTR name$[rsp], rax

; 594  :     PyObject *result = PyErr_SetExcFromWindowsErrWithFilenameObject(
; 595  :                                                   PyExc_WindowsError,
; 596  :                                                   ierr, name);

  00039	4c 8b 44 24 20	 mov	 r8, QWORD PTR name$[rsp]
  0003e	8b 54 24 50	 mov	 edx, DWORD PTR ierr$[rsp]
  00042	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_WindowsError
  00049	e8 00 00 00 00	 call	 PyErr_SetExcFromWindowsErrWithFilenameObject
  0004e	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax
$LN4@PyErr_SetF@4:

; 597  :     Py_XDECREF(name);

  00053	48 83 7c 24 20
	00		 cmp	 QWORD PTR name$[rsp], 0
  00059	74 0a		 je	 SHORT $LN1@PyErr_SetF@4
  0005b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR name$[rsp]
  00060	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@PyErr_SetF@4:
  00065	33 c0		 xor	 eax, eax
  00067	85 c0		 test	 eax, eax
  00069	75 e8		 jne	 SHORT $LN4@PyErr_SetF@4

; 598  :     return result;

  0006b	48 8b 44 24 28	 mov	 rax, QWORD PTR result$[rsp]

; 599  : }

  00070	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00074	c3		 ret	 0
PyErr_SetFromWindowsErrWithFilename ENDP
_TEXT	ENDS
PUBLIC	PyErr_SetFromWindowsErrWithUnicodeFilename
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyErr_SetFromWindowsErrWithUnicodeFilename DD imagerel $LN9
	DD	imagerel $LN9+131
	DD	imagerel $unwind$PyErr_SetFromWindowsErrWithUnicodeFilename
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyErr_SetFromWindowsErrWithUnicodeFilename DD 010d01H
	DD	0820dH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyErr_SetFromWindowsErrWithUnicodeFilename
_TEXT	SEGMENT
name$ = 32
result$ = 40
tv70 = 48
ierr$ = 80
filename$ = 88
PyErr_SetFromWindowsErrWithUnicodeFilename PROC		; COMDAT

; 604  : {

$LN9:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00009	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 605  :     PyObject *name = filename ?
; 606  :                      PyUnicode_FromUnicode(filename, wcslen(filename)) :
; 607  :              NULL;

  0000d	48 83 7c 24 58
	00		 cmp	 QWORD PTR filename$[rsp], 0
  00013	74 1f		 je	 SHORT $LN7@PyErr_SetF@5
  00015	48 8b 4c 24 58	 mov	 rcx, QWORD PTR filename$[rsp]
  0001a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_wcslen
  00020	48 8b d0	 mov	 rdx, rax
  00023	48 8b 4c 24 58	 mov	 rcx, QWORD PTR filename$[rsp]
  00028	e8 00 00 00 00	 call	 PyUnicode_FromUnicode
  0002d	48 89 44 24 30	 mov	 QWORD PTR tv70[rsp], rax
  00032	eb 09		 jmp	 SHORT $LN8@PyErr_SetF@5
$LN7@PyErr_SetF@5:
  00034	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR tv70[rsp], 0
$LN8@PyErr_SetF@5:
  0003d	48 8b 44 24 30	 mov	 rax, QWORD PTR tv70[rsp]
  00042	48 89 44 24 20	 mov	 QWORD PTR name$[rsp], rax

; 608  :     PyObject *result = PyErr_SetExcFromWindowsErrWithFilenameObject(
; 609  :                                                   PyExc_WindowsError,
; 610  :                                                   ierr, name);

  00047	4c 8b 44 24 20	 mov	 r8, QWORD PTR name$[rsp]
  0004c	8b 54 24 50	 mov	 edx, DWORD PTR ierr$[rsp]
  00050	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_WindowsError
  00057	e8 00 00 00 00	 call	 PyErr_SetExcFromWindowsErrWithFilenameObject
  0005c	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax
$LN4@PyErr_SetF@5:

; 611  :     Py_XDECREF(name);

  00061	48 83 7c 24 20
	00		 cmp	 QWORD PTR name$[rsp], 0
  00067	74 0a		 je	 SHORT $LN1@PyErr_SetF@5
  00069	48 8b 4c 24 20	 mov	 rcx, QWORD PTR name$[rsp]
  0006e	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@PyErr_SetF@5:
  00073	33 c0		 xor	 eax, eax
  00075	85 c0		 test	 eax, eax
  00077	75 e8		 jne	 SHORT $LN4@PyErr_SetF@5

; 612  :     return result;

  00079	48 8b 44 24 28	 mov	 rax, QWORD PTR result$[rsp]

; 613  : }

  0007e	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00082	c3		 ret	 0
PyErr_SetFromWindowsErrWithUnicodeFilename ENDP
_TEXT	ENDS
PUBLIC	??_C@_04LNEJFJGI@path?$AA@			; `string'
PUBLIC	??_C@_04MEMAJGDJ@name?$AA@			; `string'
PUBLIC	PyErr_SetImportError
EXTRN	PyExc_ImportError:QWORD
EXTRN	PyDict_SetItemString:PROC
EXTRN	PyDict_New:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyErr_SetImportError DD imagerel $LN9
	DD	imagerel $LN9+298
	DD	imagerel $unwind$PyErr_SetImportError
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyErr_SetImportError DD 011301H
	DD	08213H
xdata	ENDS
;	COMDAT ??_C@_04LNEJFJGI@path?$AA@
CONST	SEGMENT
??_C@_04LNEJFJGI@path?$AA@ DB 'path', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04MEMAJGDJ@name?$AA@
CONST	SEGMENT
??_C@_04MEMAJGDJ@name?$AA@ DB 'name', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyErr_SetImportError
_TEXT	SEGMENT
kwargs$ = 32
args$ = 40
error$ = 48
msg$ = 80
name$ = 88
path$ = 96
PyErr_SetImportError PROC				; COMDAT

; 618  : {

$LN9:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 619  :     PyObject *args, *kwargs, *error;
; 620  : 
; 621  :     if (msg == NULL)

  00013	48 83 7c 24 50
	00		 cmp	 QWORD PTR msg$[rsp], 0
  00019	75 07		 jne	 SHORT $LN6@PyErr_SetI

; 622  :         return NULL;

  0001b	33 c0		 xor	 eax, eax
  0001d	e9 03 01 00 00	 jmp	 $LN7@PyErr_SetI
$LN6@PyErr_SetI:

; 623  : 
; 624  :     args = PyTuple_New(1);

  00022	b9 01 00 00 00	 mov	 ecx, 1
  00027	e8 00 00 00 00	 call	 PyTuple_New
  0002c	48 89 44 24 28	 mov	 QWORD PTR args$[rsp], rax

; 625  :     if (args == NULL)

  00031	48 83 7c 24 28
	00		 cmp	 QWORD PTR args$[rsp], 0
  00037	75 07		 jne	 SHORT $LN5@PyErr_SetI

; 626  :         return NULL;

  00039	33 c0		 xor	 eax, eax
  0003b	e9 e5 00 00 00	 jmp	 $LN7@PyErr_SetI
$LN5@PyErr_SetI:

; 627  : 
; 628  :     kwargs = PyDict_New();

  00040	e8 00 00 00 00	 call	 PyDict_New
  00045	48 89 44 24 20	 mov	 QWORD PTR kwargs$[rsp], rax

; 629  :     if (kwargs == NULL) {

  0004a	48 83 7c 24 20
	00		 cmp	 QWORD PTR kwargs$[rsp], 0
  00050	75 11		 jne	 SHORT $LN4@PyErr_SetI

; 630  :         Py_DECREF(args);

  00052	48 8b 4c 24 28	 mov	 rcx, QWORD PTR args$[rsp]
  00057	e8 00 00 00 00	 call	 _Py_DecRef

; 631  :         return NULL;

  0005c	33 c0		 xor	 eax, eax
  0005e	e9 c2 00 00 00	 jmp	 $LN7@PyErr_SetI
$LN4@PyErr_SetI:

; 632  :     }
; 633  : 
; 634  :     if (name == NULL) {

  00063	48 83 7c 24 58
	00		 cmp	 QWORD PTR name$[rsp], 0
  00069	75 0c		 jne	 SHORT $LN3@PyErr_SetI

; 635  :         name = Py_None;

  0006b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00072	48 89 44 24 58	 mov	 QWORD PTR name$[rsp], rax
$LN3@PyErr_SetI:

; 636  :     }
; 637  : 
; 638  :     if (path == NULL) {

  00077	48 83 7c 24 60
	00		 cmp	 QWORD PTR path$[rsp], 0
  0007d	75 0c		 jne	 SHORT $LN2@PyErr_SetI

; 639  :         path = Py_None;

  0007f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00086	48 89 44 24 60	 mov	 QWORD PTR path$[rsp], rax
$LN2@PyErr_SetI:

; 640  :     }
; 641  : 
; 642  :     Py_INCREF(msg);

  0008b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR msg$[rsp]
  00090	e8 00 00 00 00	 call	 _Py_IncRef

; 643  :     PyTuple_SET_ITEM(args, 0, msg);

  00095	48 8b 44 24 28	 mov	 rax, QWORD PTR args$[rsp]
  0009a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR msg$[rsp]
  0009f	48 89 48 70	 mov	 QWORD PTR [rax+112], rcx

; 644  :     PyDict_SetItemString(kwargs, "name", name);

  000a3	4c 8b 44 24 58	 mov	 r8, QWORD PTR name$[rsp]
  000a8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04MEMAJGDJ@name?$AA@
  000af	48 8b 4c 24 20	 mov	 rcx, QWORD PTR kwargs$[rsp]
  000b4	e8 00 00 00 00	 call	 PyDict_SetItemString

; 645  :     PyDict_SetItemString(kwargs, "path", path);

  000b9	4c 8b 44 24 60	 mov	 r8, QWORD PTR path$[rsp]
  000be	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04LNEJFJGI@path?$AA@
  000c5	48 8b 4c 24 20	 mov	 rcx, QWORD PTR kwargs$[rsp]
  000ca	e8 00 00 00 00	 call	 PyDict_SetItemString

; 646  : 
; 647  :     error = PyObject_Call(PyExc_ImportError, args, kwargs);

  000cf	4c 8b 44 24 20	 mov	 r8, QWORD PTR kwargs$[rsp]
  000d4	48 8b 54 24 28	 mov	 rdx, QWORD PTR args$[rsp]
  000d9	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ImportError
  000e0	e8 00 00 00 00	 call	 PyObject_Call
  000e5	48 89 44 24 30	 mov	 QWORD PTR error$[rsp], rax

; 648  :     if (error != NULL) {

  000ea	48 83 7c 24 30
	00		 cmp	 QWORD PTR error$[rsp], 0
  000f0	74 1d		 je	 SHORT $LN1@PyErr_SetI

; 649  :         PyErr_SetObject((PyObject *)Py_TYPE(error), error);

  000f2	48 8b 54 24 30	 mov	 rdx, QWORD PTR error$[rsp]
  000f7	48 8b 44 24 30	 mov	 rax, QWORD PTR error$[rsp]
  000fc	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  00100	e8 00 00 00 00	 call	 PyErr_SetObject

; 650  :         Py_DECREF(error);

  00105	48 8b 4c 24 30	 mov	 rcx, QWORD PTR error$[rsp]
  0010a	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@PyErr_SetI:

; 651  :     }
; 652  : 
; 653  :     Py_DECREF(args);

  0010f	48 8b 4c 24 28	 mov	 rcx, QWORD PTR args$[rsp]
  00114	e8 00 00 00 00	 call	 _Py_DecRef

; 654  :     Py_DECREF(kwargs);

  00119	48 8b 4c 24 20	 mov	 rcx, QWORD PTR kwargs$[rsp]
  0011e	e8 00 00 00 00	 call	 _Py_DecRef

; 655  : 
; 656  :     return NULL;

  00123	33 c0		 xor	 eax, eax
$LN7@PyErr_SetI:

; 657  : }

  00125	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00129	c3		 ret	 0
PyErr_SetImportError ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CJ@HCAGLKKH@?$CFs?3?$CFd?3?5bad?5argument?5to?5internal?5@ ; `string'
PUBLIC	_PyErr_BadInternalCall
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyErr_BadInternalCall DD imagerel $LN3
	DD	imagerel $LN3+47
	DD	imagerel $unwind$_PyErr_BadInternalCall
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyErr_BadInternalCall DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT ??_C@_0CJ@HCAGLKKH@?$CFs?3?$CFd?3?5bad?5argument?5to?5internal?5@
CONST	SEGMENT
??_C@_0CJ@HCAGLKKH@?$CFs?3?$CFd?3?5bad?5argument?5to?5internal?5@ DB '%s:'
	DB	'%d: bad argument to internal function', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PyErr_BadInternalCall
_TEXT	SEGMENT
filename$ = 48
lineno$ = 56
_PyErr_BadInternalCall PROC				; COMDAT

; 661  : {

$LN3:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 662  :     PyErr_Format(PyExc_SystemError,
; 663  :                  "%s:%d: bad argument to internal function",
; 664  :                  filename, lineno);

  0000d	44 8b 4c 24 38	 mov	 r9d, DWORD PTR lineno$[rsp]
  00012	4c 8b 44 24 30	 mov	 r8, QWORD PTR filename$[rsp]
  00017	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CJ@HCAGLKKH@?$CFs?3?$CFd?3?5bad?5argument?5to?5internal?5@
  0001e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SystemError
  00025	e8 00 00 00 00	 call	 PyErr_Format

; 665  : }

  0002a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002e	c3		 ret	 0
_PyErr_BadInternalCall ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CC@DGMKLFNG@bad?5argument?5to?5internal?5functio@ ; `string'
PUBLIC	PyErr_BadInternalCall
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyErr_BadInternalCall DD imagerel $LN3
	DD	imagerel $LN3+28
	DD	imagerel $unwind$PyErr_BadInternalCall
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyErr_BadInternalCall DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0CC@DGMKLFNG@bad?5argument?5to?5internal?5functio@
CONST	SEGMENT
??_C@_0CC@DGMKLFNG@bad?5argument?5to?5internal?5functio@ DB 'bad argument'
	DB	' to internal function', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyErr_BadInternalCall
_TEXT	SEGMENT
PyErr_BadInternalCall PROC				; COMDAT

; 672  : {

$LN3:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 673  :     PyErr_Format(PyExc_SystemError,
; 674  :                  "bad argument to internal function");

  00004	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CC@DGMKLFNG@bad?5argument?5to?5internal?5functio@
  0000b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SystemError
  00012	e8 00 00 00 00	 call	 PyErr_Format

; 675  : }

  00017	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001b	c3		 ret	 0
PyErr_BadInternalCall ENDP
_TEXT	ENDS
EXTRN	PyUnicode_FromFormatV:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyErr_Format DD imagerel $LN7
	DD	imagerel $LN7+109
	DD	imagerel $unwind$PyErr_Format
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyErr_Format DD 011801H
	DD	06218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyErr_Format
_TEXT	SEGMENT
vargs$ = 32
string$ = 40
exception$ = 64
format$ = 72
PyErr_Format PROC					; COMDAT

; 682  : {

$LN7:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 683  :     va_list vargs;
; 684  :     PyObject* string;
; 685  : 
; 686  : #ifdef HAVE_STDARG_PROTOTYPES
; 687  :     va_start(vargs, format);

  00018	48 8d 44 24 50	 lea	 rax, QWORD PTR format$[rsp+8]
  0001d	48 89 44 24 20	 mov	 QWORD PTR vargs$[rsp], rax

; 688  : #else
; 689  :     va_start(vargs);
; 690  : #endif
; 691  : 
; 692  :     string = PyUnicode_FromFormatV(format, vargs);

  00022	48 8b 54 24 20	 mov	 rdx, QWORD PTR vargs$[rsp]
  00027	48 8b 4c 24 48	 mov	 rcx, QWORD PTR format$[rsp]
  0002c	e8 00 00 00 00	 call	 PyUnicode_FromFormatV
  00031	48 89 44 24 28	 mov	 QWORD PTR string$[rsp], rax

; 693  :     PyErr_SetObject(exception, string);

  00036	48 8b 54 24 28	 mov	 rdx, QWORD PTR string$[rsp]
  0003b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR exception$[rsp]
  00040	e8 00 00 00 00	 call	 PyErr_SetObject
$LN4@PyErr_Form:

; 694  :     Py_XDECREF(string);

  00045	48 83 7c 24 28
	00		 cmp	 QWORD PTR string$[rsp], 0
  0004b	74 0a		 je	 SHORT $LN1@PyErr_Form
  0004d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR string$[rsp]
  00052	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@PyErr_Form:
  00057	33 c0		 xor	 eax, eax
  00059	85 c0		 test	 eax, eax
  0005b	75 e8		 jne	 SHORT $LN4@PyErr_Form

; 695  :     va_end(vargs);

  0005d	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR vargs$[rsp], 0

; 696  :     return NULL;

  00066	33 c0		 xor	 eax, eax

; 697  : }

  00068	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0006c	c3		 ret	 0
PyErr_Format ENDP
_TEXT	ENDS
PUBLIC	??_C@_03KLBGLGKG@sOO?$AA@			; `string'
PUBLIC	??_C@_0CO@OCGGGGAF@PyErr_NewException?3?5name?5must?5be@ ; `string'
PUBLIC	PyErr_NewException
EXTRN	PyObject_CallFunction:PROC
EXTRN	PyType_Type:BYTE
EXTRN	PyUnicode_FromStringAndSize:PROC
EXTRN	PyDict_GetItemString:PROC
EXTRN	PyExc_Exception:QWORD
EXTRN	__imp_strrchr:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyErr_NewException DD imagerel $LN29
	DD	imagerel $LN29+530
	DD	imagerel $unwind$PyErr_NewException
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyErr_NewException DD 011301H
	DD	0c213H
xdata	ENDS
;	COMDAT ??_C@_03KLBGLGKG@sOO?$AA@
CONST	SEGMENT
??_C@_03KLBGLGKG@sOO?$AA@ DB 'sOO', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@OCGGGGAF@PyErr_NewException?3?5name?5must?5be@
CONST	SEGMENT
??_C@_0CO@OCGGGGAF@PyErr_NewException?3?5name?5must?5be@ DB 'PyErr_NewExc'
	DB	'eption: name must be module.class', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyErr_NewException
_TEXT	SEGMENT
mydict$ = 48
dot$ = 56
bases$ = 64
classname$ = 72
modulename$ = 80
result$ = 88
name$ = 112
base$ = 120
dict$ = 128
PyErr_NewException PROC					; COMDAT

; 703  : {

$LN29:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 704  :     const char *dot;
; 705  :     PyObject *modulename = NULL;

  00013	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR modulename$[rsp], 0

; 706  :     PyObject *classname = NULL;

  0001c	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR classname$[rsp], 0

; 707  :     PyObject *mydict = NULL;

  00025	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR mydict$[rsp], 0

; 708  :     PyObject *bases = NULL;

  0002e	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR bases$[rsp], 0

; 709  :     PyObject *result = NULL;

  00037	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR result$[rsp], 0

; 710  :     dot = strrchr(name, '.');

  00040	ba 2e 00 00 00	 mov	 edx, 46			; 0000002eH
  00045	48 8b 4c 24 70	 mov	 rcx, QWORD PTR name$[rsp]
  0004a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strrchr
  00050	48 89 44 24 38	 mov	 QWORD PTR dot$[rsp], rax

; 711  :     if (dot == NULL) {

  00055	48 83 7c 24 38
	00		 cmp	 QWORD PTR dot$[rsp], 0
  0005b	75 1a		 jne	 SHORT $LN26@PyErr_NewE

; 712  :         PyErr_SetString(PyExc_SystemError,
; 713  :             "PyErr_NewException: name must be module.class");

  0005d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CO@OCGGGGAF@PyErr_NewException?3?5name?5must?5be@
  00064	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SystemError
  0006b	e8 00 00 00 00	 call	 PyErr_SetString

; 714  :         return NULL;

  00070	33 c0		 xor	 eax, eax
  00072	e9 96 01 00 00	 jmp	 $LN27@PyErr_NewE
$LN26@PyErr_NewE:

; 715  :     }
; 716  :     if (base == NULL)

  00077	48 83 7c 24 78
	00		 cmp	 QWORD PTR base$[rsp], 0
  0007d	75 0c		 jne	 SHORT $LN25@PyErr_NewE

; 717  :         base = PyExc_Exception;

  0007f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR PyExc_Exception
  00086	48 89 44 24 78	 mov	 QWORD PTR base$[rsp], rax
$LN25@PyErr_NewE:

; 718  :     if (dict == NULL) {

  0008b	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR dict$[rsp], 0
  00094	75 27		 jne	 SHORT $LN24@PyErr_NewE

; 719  :         dict = mydict = PyDict_New();

  00096	e8 00 00 00 00	 call	 PyDict_New
  0009b	48 89 44 24 30	 mov	 QWORD PTR mydict$[rsp], rax
  000a0	48 8b 44 24 30	 mov	 rax, QWORD PTR mydict$[rsp]
  000a5	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR dict$[rsp], rax

; 720  :         if (dict == NULL)

  000ad	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR dict$[rsp], 0
  000b6	75 05		 jne	 SHORT $LN23@PyErr_NewE

; 721  :             goto failure;

  000b8	e9 eb 00 00 00	 jmp	 $failure$120965
$LN23@PyErr_NewE:
$LN24@PyErr_NewE:

; 722  :     }
; 723  :     if (PyDict_GetItemString(dict, "__module__") == NULL) {

  000bd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@LNCJCPDP@__module__?$AA@
  000c4	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR dict$[rsp]
  000cc	e8 00 00 00 00	 call	 PyDict_GetItemString
  000d1	48 85 c0	 test	 rax, rax
  000d4	75 51		 jne	 SHORT $LN22@PyErr_NewE

; 724  :         modulename = PyUnicode_FromStringAndSize(name,
; 725  :                                              (Py_ssize_t)(dot-name));

  000d6	48 8b 44 24 70	 mov	 rax, QWORD PTR name$[rsp]
  000db	48 8b 4c 24 38	 mov	 rcx, QWORD PTR dot$[rsp]
  000e0	48 2b c8	 sub	 rcx, rax
  000e3	48 8b c1	 mov	 rax, rcx
  000e6	48 8b d0	 mov	 rdx, rax
  000e9	48 8b 4c 24 70	 mov	 rcx, QWORD PTR name$[rsp]
  000ee	e8 00 00 00 00	 call	 PyUnicode_FromStringAndSize
  000f3	48 89 44 24 50	 mov	 QWORD PTR modulename$[rsp], rax

; 726  :         if (modulename == NULL)

  000f8	48 83 7c 24 50
	00		 cmp	 QWORD PTR modulename$[rsp], 0
  000fe	75 05		 jne	 SHORT $LN21@PyErr_NewE

; 727  :             goto failure;

  00100	e9 a3 00 00 00	 jmp	 $failure$120965
$LN21@PyErr_NewE:

; 728  :         if (PyDict_SetItemString(dict, "__module__", modulename) != 0)

  00105	4c 8b 44 24 50	 mov	 r8, QWORD PTR modulename$[rsp]
  0010a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@LNCJCPDP@__module__?$AA@
  00111	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR dict$[rsp]
  00119	e8 00 00 00 00	 call	 PyDict_SetItemString
  0011e	85 c0		 test	 eax, eax
  00120	74 05		 je	 SHORT $LN20@PyErr_NewE

; 729  :             goto failure;

  00122	e9 81 00 00 00	 jmp	 $failure$120965
$LN20@PyErr_NewE:
$LN22@PyErr_NewE:

; 730  :     }
; 731  :     if (PyTuple_Check(base)) {

  00127	48 8b 44 24 78	 mov	 rax, QWORD PTR base$[rsp]
  0012c	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00130	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00136	25 00 00 00 04	 and	 eax, 67108864		; 04000000H
  0013b	85 c0		 test	 eax, eax
  0013d	74 16		 je	 SHORT $LN19@PyErr_NewE

; 732  :         bases = base;

  0013f	48 8b 44 24 78	 mov	 rax, QWORD PTR base$[rsp]
  00144	48 89 44 24 40	 mov	 QWORD PTR bases$[rsp], rax

; 733  :         /* INCREF as we create a new ref in the else branch */
; 734  :         Py_INCREF(bases);

  00149	48 8b 4c 24 40	 mov	 rcx, QWORD PTR bases$[rsp]
  0014e	e8 00 00 00 00	 call	 _Py_IncRef

; 735  :     } else {

  00153	eb 1e		 jmp	 SHORT $LN18@PyErr_NewE
$LN19@PyErr_NewE:

; 736  :         bases = PyTuple_Pack(1, base);

  00155	48 8b 54 24 78	 mov	 rdx, QWORD PTR base$[rsp]
  0015a	b9 01 00 00 00	 mov	 ecx, 1
  0015f	e8 00 00 00 00	 call	 PyTuple_Pack
  00164	48 89 44 24 40	 mov	 QWORD PTR bases$[rsp], rax

; 737  :         if (bases == NULL)

  00169	48 83 7c 24 40
	00		 cmp	 QWORD PTR bases$[rsp], 0
  0016f	75 02		 jne	 SHORT $LN17@PyErr_NewE

; 738  :             goto failure;

  00171	eb 35		 jmp	 SHORT $failure$120965
$LN17@PyErr_NewE:
$LN18@PyErr_NewE:

; 739  :     }
; 740  :     /* Create a real class. */
; 741  :     result = PyObject_CallFunction((PyObject *)&PyType_Type, "sOO",
; 742  :                                    dot+1, bases, dict);

  00173	48 8b 44 24 38	 mov	 rax, QWORD PTR dot$[rsp]
  00178	48 ff c0	 inc	 rax
  0017b	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR dict$[rsp]
  00183	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00188	4c 8b 4c 24 40	 mov	 r9, QWORD PTR bases$[rsp]
  0018d	4c 8b c0	 mov	 r8, rax
  00190	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03KLBGLGKG@sOO?$AA@
  00197	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyType_Type
  0019e	e8 00 00 00 00	 call	 PyObject_CallFunction
  001a3	48 89 44 24 58	 mov	 QWORD PTR result$[rsp], rax
$failure$120965:
$LN16@PyErr_NewE:

; 743  :   failure:
; 744  :     Py_XDECREF(bases);

  001a8	48 83 7c 24 40
	00		 cmp	 QWORD PTR bases$[rsp], 0
  001ae	74 0a		 je	 SHORT $LN13@PyErr_NewE
  001b0	48 8b 4c 24 40	 mov	 rcx, QWORD PTR bases$[rsp]
  001b5	e8 00 00 00 00	 call	 _Py_DecRef
$LN13@PyErr_NewE:
  001ba	33 c0		 xor	 eax, eax
  001bc	85 c0		 test	 eax, eax
  001be	75 e8		 jne	 SHORT $LN16@PyErr_NewE
$LN12@PyErr_NewE:

; 745  :     Py_XDECREF(mydict);

  001c0	48 83 7c 24 30
	00		 cmp	 QWORD PTR mydict$[rsp], 0
  001c6	74 0a		 je	 SHORT $LN9@PyErr_NewE
  001c8	48 8b 4c 24 30	 mov	 rcx, QWORD PTR mydict$[rsp]
  001cd	e8 00 00 00 00	 call	 _Py_DecRef
$LN9@PyErr_NewE:
  001d2	33 c0		 xor	 eax, eax
  001d4	85 c0		 test	 eax, eax
  001d6	75 e8		 jne	 SHORT $LN12@PyErr_NewE
$LN8@PyErr_NewE:

; 746  :     Py_XDECREF(classname);

  001d8	48 83 7c 24 48
	00		 cmp	 QWORD PTR classname$[rsp], 0
  001de	74 0a		 je	 SHORT $LN5@PyErr_NewE
  001e0	48 8b 4c 24 48	 mov	 rcx, QWORD PTR classname$[rsp]
  001e5	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@PyErr_NewE:
  001ea	33 c0		 xor	 eax, eax
  001ec	85 c0		 test	 eax, eax
  001ee	75 e8		 jne	 SHORT $LN8@PyErr_NewE
$LN4@PyErr_NewE:

; 747  :     Py_XDECREF(modulename);

  001f0	48 83 7c 24 50
	00		 cmp	 QWORD PTR modulename$[rsp], 0
  001f6	74 0a		 je	 SHORT $LN1@PyErr_NewE
  001f8	48 8b 4c 24 50	 mov	 rcx, QWORD PTR modulename$[rsp]
  001fd	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@PyErr_NewE:
  00202	33 c0		 xor	 eax, eax
  00204	85 c0		 test	 eax, eax
  00206	75 e8		 jne	 SHORT $LN4@PyErr_NewE

; 748  :     return result;

  00208	48 8b 44 24 58	 mov	 rax, QWORD PTR result$[rsp]
$LN27@PyErr_NewE:

; 749  : }

  0020d	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00211	c3		 ret	 0
PyErr_NewException ENDP
_TEXT	ENDS
PUBLIC	??_C@_07DIBBIFIJ@__doc__?$AA@			; `string'
PUBLIC	PyErr_NewExceptionWithDoc
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyErr_NewExceptionWithDoc DD imagerel $LN12
	DD	imagerel $LN12+222
	DD	imagerel $unwind$PyErr_NewExceptionWithDoc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyErr_NewExceptionWithDoc DD 011801H
	DD	08218H
xdata	ENDS
;	COMDAT ??_C@_07DIBBIFIJ@__doc__?$AA@
CONST	SEGMENT
??_C@_07DIBBIFIJ@__doc__?$AA@ DB '__doc__', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyErr_NewExceptionWithDoc
_TEXT	SEGMENT
mydict$ = 32
docobj$ = 40
ret$ = 48
result$ = 56
name$ = 80
doc$ = 88
base$ = 96
dict$ = 104
PyErr_NewExceptionWithDoc PROC				; COMDAT

; 756  : {

$LN12:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 757  :     int result;
; 758  :     PyObject *ret = NULL;

  00018	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR ret$[rsp], 0

; 759  :     PyObject *mydict = NULL; /* points to the dict only if we create it */

  00021	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR mydict$[rsp], 0

; 760  :     PyObject *docobj;
; 761  : 
; 762  :     if (dict == NULL) {

  0002a	48 83 7c 24 68
	00		 cmp	 QWORD PTR dict$[rsp], 0
  00030	75 23		 jne	 SHORT $LN9@PyErr_NewE@2

; 763  :         dict = mydict = PyDict_New();

  00032	e8 00 00 00 00	 call	 PyDict_New
  00037	48 89 44 24 20	 mov	 QWORD PTR mydict$[rsp], rax
  0003c	48 8b 44 24 20	 mov	 rax, QWORD PTR mydict$[rsp]
  00041	48 89 44 24 68	 mov	 QWORD PTR dict$[rsp], rax

; 764  :         if (dict == NULL) {

  00046	48 83 7c 24 68
	00		 cmp	 QWORD PTR dict$[rsp], 0
  0004c	75 07		 jne	 SHORT $LN8@PyErr_NewE@2

; 765  :             return NULL;

  0004e	33 c0		 xor	 eax, eax
  00050	e9 84 00 00 00	 jmp	 $LN10@PyErr_NewE@2
$LN8@PyErr_NewE@2:
$LN9@PyErr_NewE@2:

; 766  :         }
; 767  :     }
; 768  : 
; 769  :     if (doc != NULL) {

  00055	48 83 7c 24 58
	00		 cmp	 QWORD PTR doc$[rsp], 0
  0005b	74 46		 je	 SHORT $LN7@PyErr_NewE@2

; 770  :         docobj = PyUnicode_FromString(doc);

  0005d	48 8b 4c 24 58	 mov	 rcx, QWORD PTR doc$[rsp]
  00062	e8 00 00 00 00	 call	 PyUnicode_FromString
  00067	48 89 44 24 28	 mov	 QWORD PTR docobj$[rsp], rax

; 771  :         if (docobj == NULL)

  0006c	48 83 7c 24 28
	00		 cmp	 QWORD PTR docobj$[rsp], 0
  00072	75 02		 jne	 SHORT $LN6@PyErr_NewE@2

; 772  :             goto failure;

  00074	eb 46		 jmp	 SHORT $failure$121025
$LN6@PyErr_NewE@2:

; 773  :         result = PyDict_SetItemString(dict, "__doc__", docobj);

  00076	4c 8b 44 24 28	 mov	 r8, QWORD PTR docobj$[rsp]
  0007b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07DIBBIFIJ@__doc__?$AA@
  00082	48 8b 4c 24 68	 mov	 rcx, QWORD PTR dict$[rsp]
  00087	e8 00 00 00 00	 call	 PyDict_SetItemString
  0008c	89 44 24 38	 mov	 DWORD PTR result$[rsp], eax

; 774  :         Py_DECREF(docobj);

  00090	48 8b 4c 24 28	 mov	 rcx, QWORD PTR docobj$[rsp]
  00095	e8 00 00 00 00	 call	 _Py_DecRef

; 775  :         if (result < 0)

  0009a	83 7c 24 38 00	 cmp	 DWORD PTR result$[rsp], 0
  0009f	7d 02		 jge	 SHORT $LN5@PyErr_NewE@2

; 776  :             goto failure;

  000a1	eb 19		 jmp	 SHORT $failure$121025
$LN5@PyErr_NewE@2:
$LN7@PyErr_NewE@2:

; 777  :     }
; 778  : 
; 779  :     ret = PyErr_NewException(name, base, dict);

  000a3	4c 8b 44 24 68	 mov	 r8, QWORD PTR dict$[rsp]
  000a8	48 8b 54 24 60	 mov	 rdx, QWORD PTR base$[rsp]
  000ad	48 8b 4c 24 50	 mov	 rcx, QWORD PTR name$[rsp]
  000b2	e8 00 00 00 00	 call	 PyErr_NewException
  000b7	48 89 44 24 30	 mov	 QWORD PTR ret$[rsp], rax
$failure$121025:
$LN4@PyErr_NewE@2:

; 780  :   failure:
; 781  :     Py_XDECREF(mydict);

  000bc	48 83 7c 24 20
	00		 cmp	 QWORD PTR mydict$[rsp], 0
  000c2	74 0a		 je	 SHORT $LN1@PyErr_NewE@2
  000c4	48 8b 4c 24 20	 mov	 rcx, QWORD PTR mydict$[rsp]
  000c9	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@PyErr_NewE@2:
  000ce	33 c0		 xor	 eax, eax
  000d0	85 c0		 test	 eax, eax
  000d2	75 e8		 jne	 SHORT $LN4@PyErr_NewE@2

; 782  :     return ret;

  000d4	48 8b 44 24 30	 mov	 rax, QWORD PTR ret$[rsp]
$LN10@PyErr_NewE@2:

; 783  : }

  000d9	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000dd	c3		 ret	 0
PyErr_NewExceptionWithDoc ENDP
_TEXT	ENDS
PUBLIC	??_C@_09GBDGLPNL@?5ignored?6?$AA@		; `string'
PUBLIC	??_C@_04GJPPFNOH@?5in?5?$AA@			; `string'
PUBLIC	??_C@_02LMMGGCAJ@?3?5?$AA@			; `string'
PUBLIC	??_C@_01LFCBOECM@?4?$AA@			; `string'
PUBLIC	??_C@_08OCOMCJAJ@builtins?$AA@			; `string'
PUBLIC	??_C@_09EEKGDCPH@?$DMunknown?$DO?$AA@		; `string'
PUBLIC	??_C@_1DE@KOIAKBLO@?$AAP?$AAy?$AAE?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AAC?$AAl?$AAa?$AAs?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAt?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CG@ECJHFPLI@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAe?$AAr?$AAr?$AAo?$AAr?$AAs?$AA?4?$AAc?$AA?$AA@ ; `string'
PUBLIC	??_C@_0L@HHGNICHB@Exception?5?$AA@		; `string'
PUBLIC	??_C@_06FJGNEBG@stderr?$AA@			; `string'
EXTRN	PyFile_WriteObject:PROC
EXTRN	strcmp:PROC
EXTRN	PyUnicode_AsUTF8:PROC
EXTRN	_PyObject_GetAttrId:PROC
EXTRN	__imp__wassert:PROC
EXTRN	PyFile_WriteString:PROC
EXTRN	PySys_GetObject:PROC
EXTRN	_tls_index:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyErr_WriteUnraisable DD imagerel $LN32
	DD	imagerel $LN32+653
	DD	imagerel $unwind$PyErr_WriteUnraisable
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyErr_WriteUnraisable DD 010901H
	DD	0c209H
xdata	ENDS
;	COMDAT ??_C@_09GBDGLPNL@?5ignored?6?$AA@
CONST	SEGMENT
??_C@_09GBDGLPNL@?5ignored?6?$AA@ DB ' ignored', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04GJPPFNOH@?5in?5?$AA@
CONST	SEGMENT
??_C@_04GJPPFNOH@?5in?5?$AA@ DB ' in ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02LMMGGCAJ@?3?5?$AA@
CONST	SEGMENT
??_C@_02LMMGGCAJ@?3?5?$AA@ DB ': ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01LFCBOECM@?4?$AA@
CONST	SEGMENT
??_C@_01LFCBOECM@?4?$AA@ DB '.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08OCOMCJAJ@builtins?$AA@
CONST	SEGMENT
??_C@_08OCOMCJAJ@builtins?$AA@ DB 'builtins', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09EEKGDCPH@?$DMunknown?$DO?$AA@
CONST	SEGMENT
??_C@_09EEKGDCPH@?$DMunknown?$DO?$AA@ DB '<unknown>', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DE@KOIAKBLO@?$AAP?$AAy?$AAE?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AAC?$AAl?$AAa?$AAs?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAt?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DE@KOIAKBLO@?$AAP?$AAy?$AAE?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AAC?$AAl?$AAa?$AAs?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAt?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'E', 00H, 'x', 00H, 'c', 00H, 'e', 00H, 'p', 00H
	DB	't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 'C', 00H, 'l', 00H, 'a'
	DB	00H, 's', 00H, 's', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H
	DB	'c', 00H, 'k', 00H, '(', 00H, 't', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@ECJHFPLI@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAe?$AAr?$AAr?$AAo?$AAr?$AAs?$AA?4?$AAc?$AA?$AA@
CONST	SEGMENT
??_C@_1CG@ECJHFPLI@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAe?$AAr?$AAr?$AAo?$AAr?$AAs?$AA?4?$AAc?$AA?$AA@ DB '.'
	DB	00H, '.', 00H, '\', 00H, 'P', 00H, 'y', 00H, 't', 00H, 'h', 00H
	DB	'o', 00H, 'n', 00H, '\', 00H, 'e', 00H, 'r', 00H, 'r', 00H, 'o'
	DB	00H, 'r', 00H, 's', 00H, '.', 00H, 'c', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HHGNICHB@Exception?5?$AA@
CONST	SEGMENT
??_C@_0L@HHGNICHB@Exception?5?$AA@ DB 'Exception ', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06FJGNEBG@stderr?$AA@
CONST	SEGMENT
??_C@_06FJGNEBG@stderr?$AA@ DB 'stderr', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyErr_WriteUnraisable
_TEXT	SEGMENT
v$ = 32
f$ = 40
tb$ = 48
t$ = 56
className$121049 = 64
moduleName$121048 = 72
dot$121059 = 80
modstr$121066 = 88
obj$ = 112
PyErr_WriteUnraisable PROC				; COMDAT

; 790  : {

$LN32:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 791  :     _Py_IDENTIFIER(__module__);
; 792  :     PyObject *f, *t, *v, *tb;
; 793  :     PyErr_Fetch(&t, &v, &tb);

  00009	4c 8d 44 24 30	 lea	 r8, QWORD PTR tb$[rsp]
  0000e	48 8d 54 24 20	 lea	 rdx, QWORD PTR v$[rsp]
  00013	48 8d 4c 24 38	 lea	 rcx, QWORD PTR t$[rsp]
  00018	e8 00 00 00 00	 call	 PyErr_Fetch

; 794  :     f = PySys_GetObject("stderr");

  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06FJGNEBG@stderr?$AA@
  00024	e8 00 00 00 00	 call	 PySys_GetObject
  00029	48 89 44 24 28	 mov	 QWORD PTR f$[rsp], rax

; 795  :     if (f != NULL && f != Py_None) {

  0002e	48 83 7c 24 28
	00		 cmp	 QWORD PTR f$[rsp], 0
  00034	0f 84 06 02 00
	00		 je	 $LN27@PyErr_Writ
  0003a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00041	48 39 44 24 28	 cmp	 QWORD PTR f$[rsp], rax
  00046	0f 84 f4 01 00
	00		 je	 $LN27@PyErr_Writ

; 796  :         PyFile_WriteString("Exception ", f);

  0004c	48 8b 54 24 28	 mov	 rdx, QWORD PTR f$[rsp]
  00051	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@HHGNICHB@Exception?5?$AA@
  00058	e8 00 00 00 00	 call	 PyFile_WriteString

; 797  :         if (t) {

  0005d	48 83 7c 24 38
	00		 cmp	 QWORD PTR t$[rsp], 0
  00063	0f 84 96 01 00
	00		 je	 $LN26@PyErr_Writ

; 798  :             PyObject* moduleName;
; 799  :             char* className;
; 800  :             assert(PyExceptionClass_Check(t));

  00069	48 8b 44 24 38	 mov	 rax, QWORD PTR t$[rsp]
  0006e	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00072	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00078	25 00 00 00 80	 and	 eax, -2147483648	; ffffffff80000000H
  0007d	85 c0		 test	 eax, eax
  0007f	74 14		 je	 SHORT $LN30@PyErr_Writ
  00081	48 8b 44 24 38	 mov	 rax, QWORD PTR t$[rsp]
  00086	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0008c	25 00 00 00 40	 and	 eax, 1073741824		; 40000000H
  00091	85 c0		 test	 eax, eax
  00093	75 1c		 jne	 SHORT $LN31@PyErr_Writ
$LN30@PyErr_Writ:
  00095	41 b8 20 03 00
	00		 mov	 r8d, 800		; 00000320H
  0009b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@ECJHFPLI@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAe?$AAr?$AAr?$AAo?$AAr?$AAs?$AA?4?$AAc?$AA?$AA@
  000a2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@KOIAKBLO@?$AAP?$AAy?$AAE?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AAC?$AAl?$AAa?$AAs?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAt?$AA?$CJ?$AA?$AA@
  000a9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000af	33 c0		 xor	 eax, eax
$LN31@PyErr_Writ:

; 801  :             className = PyExceptionClass_Name(t);

  000b1	48 8b 44 24 38	 mov	 rax, QWORD PTR t$[rsp]
  000b6	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  000ba	48 89 44 24 40	 mov	 QWORD PTR className$121049[rsp], rax

; 802  :             if (className != NULL) {

  000bf	48 83 7c 24 40
	00		 cmp	 QWORD PTR className$121049[rsp], 0
  000c5	74 2a		 je	 SHORT $LN25@PyErr_Writ

; 803  :                 char *dot = strrchr(className, '.');

  000c7	ba 2e 00 00 00	 mov	 edx, 46			; 0000002eH
  000cc	48 8b 4c 24 40	 mov	 rcx, QWORD PTR className$121049[rsp]
  000d1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strrchr
  000d7	48 89 44 24 50	 mov	 QWORD PTR dot$121059[rsp], rax

; 804  :                 if (dot != NULL)

  000dc	48 83 7c 24 50
	00		 cmp	 QWORD PTR dot$121059[rsp], 0
  000e2	74 0d		 je	 SHORT $LN24@PyErr_Writ

; 805  :                     className = dot+1;

  000e4	48 8b 44 24 50	 mov	 rax, QWORD PTR dot$121059[rsp]
  000e9	48 ff c0	 inc	 rax
  000ec	48 89 44 24 40	 mov	 QWORD PTR className$121049[rsp], rax
$LN24@PyErr_Writ:
$LN25@PyErr_Writ:

; 806  :             }
; 807  : 
; 808  :             moduleName = _PyObject_GetAttrId(t, &PyId___module__);

  000f1	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId___module__@?1??PyErr_WriteUnraisable@@9@9
  000f6	8b c0		 mov	 eax, eax
  000f8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  000fe	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00107	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0010b	48 8b d0	 mov	 rdx, rax
  0010e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR t$[rsp]
  00113	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00118	48 89 44 24 48	 mov	 QWORD PTR moduleName$121048[rsp], rax

; 809  :             if (moduleName == NULL)

  0011d	48 83 7c 24 48
	00		 cmp	 QWORD PTR moduleName$121048[rsp], 0
  00123	75 13		 jne	 SHORT $LN23@PyErr_Writ

; 810  :                 PyFile_WriteString("<unknown>", f);

  00125	48 8b 54 24 28	 mov	 rdx, QWORD PTR f$[rsp]
  0012a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09EEKGDCPH@?$DMunknown?$DO?$AA@
  00131	e8 00 00 00 00	 call	 PyFile_WriteString

; 811  :             else {

  00136	eb 4c		 jmp	 SHORT $LN22@PyErr_Writ
$LN23@PyErr_Writ:

; 812  :                 char* modstr = _PyUnicode_AsString(moduleName);

  00138	48 8b 4c 24 48	 mov	 rcx, QWORD PTR moduleName$121048[rsp]
  0013d	e8 00 00 00 00	 call	 PyUnicode_AsUTF8
  00142	48 89 44 24 58	 mov	 QWORD PTR modstr$121066[rsp], rax

; 813  :                 if (modstr &&
; 814  :                     strcmp(modstr, "builtins") != 0)

  00147	48 83 7c 24 58
	00		 cmp	 QWORD PTR modstr$121066[rsp], 0
  0014d	74 35		 je	 SHORT $LN21@PyErr_Writ
  0014f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08OCOMCJAJ@builtins?$AA@
  00156	48 8b 4c 24 58	 mov	 rcx, QWORD PTR modstr$121066[rsp]
  0015b	e8 00 00 00 00	 call	 strcmp
  00160	85 c0		 test	 eax, eax
  00162	74 20		 je	 SHORT $LN21@PyErr_Writ

; 815  :                 {
; 816  :                     PyFile_WriteString(modstr, f);

  00164	48 8b 54 24 28	 mov	 rdx, QWORD PTR f$[rsp]
  00169	48 8b 4c 24 58	 mov	 rcx, QWORD PTR modstr$121066[rsp]
  0016e	e8 00 00 00 00	 call	 PyFile_WriteString

; 817  :                     PyFile_WriteString(".", f);

  00173	48 8b 54 24 28	 mov	 rdx, QWORD PTR f$[rsp]
  00178	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01LFCBOECM@?4?$AA@
  0017f	e8 00 00 00 00	 call	 PyFile_WriteString
$LN21@PyErr_Writ:
$LN22@PyErr_Writ:

; 818  :                 }
; 819  :             }
; 820  :             if (className == NULL)

  00184	48 83 7c 24 40
	00		 cmp	 QWORD PTR className$121049[rsp], 0
  0018a	75 13		 jne	 SHORT $LN20@PyErr_Writ

; 821  :                 PyFile_WriteString("<unknown>", f);

  0018c	48 8b 54 24 28	 mov	 rdx, QWORD PTR f$[rsp]
  00191	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09EEKGDCPH@?$DMunknown?$DO?$AA@
  00198	e8 00 00 00 00	 call	 PyFile_WriteString

; 822  :             else

  0019d	eb 0f		 jmp	 SHORT $LN19@PyErr_Writ
$LN20@PyErr_Writ:

; 823  :                 PyFile_WriteString(className, f);

  0019f	48 8b 54 24 28	 mov	 rdx, QWORD PTR f$[rsp]
  001a4	48 8b 4c 24 40	 mov	 rcx, QWORD PTR className$121049[rsp]
  001a9	e8 00 00 00 00	 call	 PyFile_WriteString
$LN19@PyErr_Writ:

; 824  :             if (v && v != Py_None) {

  001ae	48 83 7c 24 20
	00		 cmp	 QWORD PTR v$[rsp], 0
  001b4	74 31		 je	 SHORT $LN18@PyErr_Writ
  001b6	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  001bd	48 39 44 24 20	 cmp	 QWORD PTR v$[rsp], rax
  001c2	74 23		 je	 SHORT $LN18@PyErr_Writ

; 825  :                 PyFile_WriteString(": ", f);

  001c4	48 8b 54 24 28	 mov	 rdx, QWORD PTR f$[rsp]
  001c9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02LMMGGCAJ@?3?5?$AA@
  001d0	e8 00 00 00 00	 call	 PyFile_WriteString

; 826  :                 PyFile_WriteObject(v, f, 0);

  001d5	45 33 c0	 xor	 r8d, r8d
  001d8	48 8b 54 24 28	 mov	 rdx, QWORD PTR f$[rsp]
  001dd	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  001e2	e8 00 00 00 00	 call	 PyFile_WriteObject
$LN18@PyErr_Writ:
$LN17@PyErr_Writ:

; 827  :             }
; 828  :             Py_XDECREF(moduleName);

  001e7	48 83 7c 24 48
	00		 cmp	 QWORD PTR moduleName$121048[rsp], 0
  001ed	74 0a		 je	 SHORT $LN14@PyErr_Writ
  001ef	48 8b 4c 24 48	 mov	 rcx, QWORD PTR moduleName$121048[rsp]
  001f4	e8 00 00 00 00	 call	 _Py_DecRef
$LN14@PyErr_Writ:
  001f9	33 c0		 xor	 eax, eax
  001fb	85 c0		 test	 eax, eax
  001fd	75 e8		 jne	 SHORT $LN17@PyErr_Writ
$LN26@PyErr_Writ:

; 829  :         }
; 830  :         if (obj) {

  001ff	48 83 7c 24 70
	00		 cmp	 QWORD PTR obj$[rsp], 0
  00205	74 23		 je	 SHORT $LN13@PyErr_Writ

; 831  :             PyFile_WriteString(" in ", f);

  00207	48 8b 54 24 28	 mov	 rdx, QWORD PTR f$[rsp]
  0020c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04GJPPFNOH@?5in?5?$AA@
  00213	e8 00 00 00 00	 call	 PyFile_WriteString

; 832  :             PyFile_WriteObject(obj, f, 0);

  00218	45 33 c0	 xor	 r8d, r8d
  0021b	48 8b 54 24 28	 mov	 rdx, QWORD PTR f$[rsp]
  00220	48 8b 4c 24 70	 mov	 rcx, QWORD PTR obj$[rsp]
  00225	e8 00 00 00 00	 call	 PyFile_WriteObject
$LN13@PyErr_Writ:

; 833  :         }
; 834  :         PyFile_WriteString(" ignored\n", f);

  0022a	48 8b 54 24 28	 mov	 rdx, QWORD PTR f$[rsp]
  0022f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09GBDGLPNL@?5ignored?6?$AA@
  00236	e8 00 00 00 00	 call	 PyFile_WriteString

; 835  :         PyErr_Clear(); /* Just in case */

  0023b	e8 00 00 00 00	 call	 PyErr_Clear
$LN27@PyErr_Writ:
$LN12@PyErr_Writ:

; 836  :     }
; 837  :     Py_XDECREF(t);

  00240	48 83 7c 24 38
	00		 cmp	 QWORD PTR t$[rsp], 0
  00246	74 0a		 je	 SHORT $LN9@PyErr_Writ
  00248	48 8b 4c 24 38	 mov	 rcx, QWORD PTR t$[rsp]
  0024d	e8 00 00 00 00	 call	 _Py_DecRef
$LN9@PyErr_Writ:
  00252	33 c0		 xor	 eax, eax
  00254	85 c0		 test	 eax, eax
  00256	75 e8		 jne	 SHORT $LN12@PyErr_Writ
$LN8@PyErr_Writ:

; 838  :     Py_XDECREF(v);

  00258	48 83 7c 24 20
	00		 cmp	 QWORD PTR v$[rsp], 0
  0025e	74 0a		 je	 SHORT $LN5@PyErr_Writ
  00260	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  00265	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@PyErr_Writ:
  0026a	33 c0		 xor	 eax, eax
  0026c	85 c0		 test	 eax, eax
  0026e	75 e8		 jne	 SHORT $LN8@PyErr_Writ
$LN4@PyErr_Writ:

; 839  :     Py_XDECREF(tb);

  00270	48 83 7c 24 30
	00		 cmp	 QWORD PTR tb$[rsp], 0
  00276	74 0a		 je	 SHORT $LN1@PyErr_Writ
  00278	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tb$[rsp]
  0027d	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@PyErr_Writ:
  00282	33 c0		 xor	 eax, eax
  00284	85 c0		 test	 eax, eax
  00286	75 e8		 jne	 SHORT $LN4@PyErr_Writ

; 840  : }

  00288	48 83 c4 68	 add	 rsp, 104		; 00000068H
  0028c	c3		 ret	 0
PyErr_WriteUnraisable ENDP
_TEXT	ENDS
PUBLIC	PyErr_SyntaxLocationEx
PUBLIC	PyErr_SyntaxLocation
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyErr_SyntaxLocation DD imagerel $LN3
	DD	imagerel $LN3+38
	DD	imagerel $unwind$PyErr_SyntaxLocation
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyErr_SyntaxLocation DD 010d01H
	DD	0420dH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyErr_SyntaxLocation
_TEXT	SEGMENT
filename$ = 48
lineno$ = 56
PyErr_SyntaxLocation PROC				; COMDAT

; 846  : PyErr_SyntaxLocation(const char *filename, int lineno) {

$LN3:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 847  :     PyErr_SyntaxLocationEx(filename, lineno, -1);

  0000d	41 b8 ff ff ff
	ff		 mov	 r8d, -1
  00013	8b 54 24 38	 mov	 edx, DWORD PTR lineno$[rsp]
  00017	48 8b 4c 24 30	 mov	 rcx, QWORD PTR filename$[rsp]
  0001c	e8 00 00 00 00	 call	 PyErr_SyntaxLocationEx

; 848  : }

  00021	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00025	c3		 ret	 0
PyErr_SyntaxLocation ENDP
_TEXT	ENDS
PUBLIC	PyErr_ProgramText
EXTRN	PyObject_Str:PROC
EXTRN	_PyObject_HasAttrId:PROC
EXTRN	PyExc_SyntaxError:QWORD
EXTRN	_PyObject_SetAttrId:PROC
EXTRN	PyLong_FromLong:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyErr_SyntaxLocationEx DD imagerel $LN24
	DD	imagerel $LN24+776
	DD	imagerel $unwind$PyErr_SyntaxLocationEx
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyErr_SyntaxLocationEx DD 011201H
	DD	08212H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyErr_SyntaxLocationEx
_TEXT	SEGMENT
v$ = 32
tmp$ = 40
tb$ = 48
exc$ = 56
filename$ = 80
lineno$ = 88
col_offset$ = 96
PyErr_SyntaxLocationEx PROC				; COMDAT

; 857  : {

$LN24:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 858  :     PyObject *exc, *v, *tb, *tmp;
; 859  :     _Py_IDENTIFIER(filename);
; 860  :     _Py_IDENTIFIER(lineno);
; 861  :     _Py_IDENTIFIER(msg);
; 862  :     _Py_IDENTIFIER(offset);
; 863  :     _Py_IDENTIFIER(print_file_and_line);
; 864  :     _Py_IDENTIFIER(text);
; 865  : 
; 866  :     /* add attributes for the line number and filename for the error */
; 867  :     PyErr_Fetch(&exc, &v, &tb);

  00012	4c 8d 44 24 30	 lea	 r8, QWORD PTR tb$[rsp]
  00017	48 8d 54 24 20	 lea	 rdx, QWORD PTR v$[rsp]
  0001c	48 8d 4c 24 38	 lea	 rcx, QWORD PTR exc$[rsp]
  00021	e8 00 00 00 00	 call	 PyErr_Fetch

; 868  :     PyErr_NormalizeException(&exc, &v, &tb);

  00026	4c 8d 44 24 30	 lea	 r8, QWORD PTR tb$[rsp]
  0002b	48 8d 54 24 20	 lea	 rdx, QWORD PTR v$[rsp]
  00030	48 8d 4c 24 38	 lea	 rcx, QWORD PTR exc$[rsp]
  00035	e8 00 00 00 00	 call	 PyErr_NormalizeException

; 869  :     /* XXX check that it is, indeed, a syntax error. It might not
; 870  :      * be, though. */
; 871  :     tmp = PyLong_FromLong(lineno);

  0003a	8b 4c 24 58	 mov	 ecx, DWORD PTR lineno$[rsp]
  0003e	e8 00 00 00 00	 call	 PyLong_FromLong
  00043	48 89 44 24 28	 mov	 QWORD PTR tmp$[rsp], rax

; 872  :     if (tmp == NULL)

  00048	48 83 7c 24 28
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  0004e	75 07		 jne	 SHORT $LN21@PyErr_Synt

; 873  :         PyErr_Clear();

  00050	e8 00 00 00 00	 call	 PyErr_Clear

; 874  :     else {

  00055	eb 3f		 jmp	 SHORT $LN20@PyErr_Synt
$LN21@PyErr_Synt:

; 875  :         if (_PyObject_SetAttrId(v, &PyId_lineno, tmp))

  00057	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId_lineno@?1??PyErr_SyntaxLocationEx@@9@9
  0005c	8b c0		 mov	 eax, eax
  0005e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00064	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0006d	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00071	4c 8b 44 24 28	 mov	 r8, QWORD PTR tmp$[rsp]
  00076	48 8b d0	 mov	 rdx, rax
  00079	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  0007e	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  00083	85 c0		 test	 eax, eax
  00085	74 05		 je	 SHORT $LN19@PyErr_Synt

; 876  :             PyErr_Clear();

  00087	e8 00 00 00 00	 call	 PyErr_Clear
$LN19@PyErr_Synt:

; 877  :         Py_DECREF(tmp);

  0008c	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tmp$[rsp]
  00091	e8 00 00 00 00	 call	 _Py_DecRef
$LN20@PyErr_Synt:

; 878  :     }
; 879  :     if (col_offset >= 0) {

  00096	83 7c 24 60 00	 cmp	 DWORD PTR col_offset$[rsp], 0
  0009b	7c 5c		 jl	 SHORT $LN18@PyErr_Synt

; 880  :         tmp = PyLong_FromLong(col_offset);

  0009d	8b 4c 24 60	 mov	 ecx, DWORD PTR col_offset$[rsp]
  000a1	e8 00 00 00 00	 call	 PyLong_FromLong
  000a6	48 89 44 24 28	 mov	 QWORD PTR tmp$[rsp], rax

; 881  :         if (tmp == NULL)

  000ab	48 83 7c 24 28
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  000b1	75 07		 jne	 SHORT $LN17@PyErr_Synt

; 882  :             PyErr_Clear();

  000b3	e8 00 00 00 00	 call	 PyErr_Clear

; 883  :         else {

  000b8	eb 3f		 jmp	 SHORT $LN16@PyErr_Synt
$LN17@PyErr_Synt:

; 884  :             if (_PyObject_SetAttrId(v, &PyId_offset, tmp))

  000ba	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId_offset@?1??PyErr_SyntaxLocationEx@@9@9
  000bf	8b c0		 mov	 eax, eax
  000c1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  000c7	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  000d0	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  000d4	4c 8b 44 24 28	 mov	 r8, QWORD PTR tmp$[rsp]
  000d9	48 8b d0	 mov	 rdx, rax
  000dc	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  000e1	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  000e6	85 c0		 test	 eax, eax
  000e8	74 05		 je	 SHORT $LN15@PyErr_Synt

; 885  :                 PyErr_Clear();

  000ea	e8 00 00 00 00	 call	 PyErr_Clear
$LN15@PyErr_Synt:

; 886  :             Py_DECREF(tmp);

  000ef	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tmp$[rsp]
  000f4	e8 00 00 00 00	 call	 _Py_DecRef
$LN16@PyErr_Synt:
$LN18@PyErr_Synt:

; 887  :         }
; 888  :     }
; 889  :     if (filename != NULL) {

  000f9	48 83 7c 24 50
	00		 cmp	 QWORD PTR filename$[rsp], 0
  000ff	0f 84 b7 00 00
	00		 je	 $LN14@PyErr_Synt

; 890  :         tmp = PyUnicode_DecodeFSDefault(filename);

  00105	48 8b 4c 24 50	 mov	 rcx, QWORD PTR filename$[rsp]
  0010a	e8 00 00 00 00	 call	 PyUnicode_DecodeFSDefault
  0010f	48 89 44 24 28	 mov	 QWORD PTR tmp$[rsp], rax

; 891  :         if (tmp == NULL)

  00114	48 83 7c 24 28
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  0011a	75 07		 jne	 SHORT $LN13@PyErr_Synt

; 892  :             PyErr_Clear();

  0011c	e8 00 00 00 00	 call	 PyErr_Clear

; 893  :         else {

  00121	eb 3f		 jmp	 SHORT $LN12@PyErr_Synt
$LN13@PyErr_Synt:

; 894  :             if (_PyObject_SetAttrId(v, &PyId_filename, tmp))

  00123	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId_filename@?1??PyErr_SyntaxLocationEx@@9@9
  00128	8b c0		 mov	 eax, eax
  0012a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00130	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00139	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0013d	4c 8b 44 24 28	 mov	 r8, QWORD PTR tmp$[rsp]
  00142	48 8b d0	 mov	 rdx, rax
  00145	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  0014a	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  0014f	85 c0		 test	 eax, eax
  00151	74 05		 je	 SHORT $LN11@PyErr_Synt

; 895  :                 PyErr_Clear();

  00153	e8 00 00 00 00	 call	 PyErr_Clear
$LN11@PyErr_Synt:

; 896  :             Py_DECREF(tmp);

  00158	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tmp$[rsp]
  0015d	e8 00 00 00 00	 call	 _Py_DecRef
$LN12@PyErr_Synt:

; 897  :         }
; 898  : 
; 899  :         tmp = PyErr_ProgramText(filename, lineno);

  00162	8b 54 24 58	 mov	 edx, DWORD PTR lineno$[rsp]
  00166	48 8b 4c 24 50	 mov	 rcx, QWORD PTR filename$[rsp]
  0016b	e8 00 00 00 00	 call	 PyErr_ProgramText
  00170	48 89 44 24 28	 mov	 QWORD PTR tmp$[rsp], rax

; 900  :         if (tmp) {

  00175	48 83 7c 24 28
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  0017b	74 3f		 je	 SHORT $LN10@PyErr_Synt

; 901  :             if (_PyObject_SetAttrId(v, &PyId_text, tmp))

  0017d	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId_text@?1??PyErr_SyntaxLocationEx@@9@9
  00182	8b c0		 mov	 eax, eax
  00184	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0018a	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00193	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00197	4c 8b 44 24 28	 mov	 r8, QWORD PTR tmp$[rsp]
  0019c	48 8b d0	 mov	 rdx, rax
  0019f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  001a4	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  001a9	85 c0		 test	 eax, eax
  001ab	74 05		 je	 SHORT $LN9@PyErr_Synt

; 902  :                 PyErr_Clear();

  001ad	e8 00 00 00 00	 call	 PyErr_Clear
$LN9@PyErr_Synt:

; 903  :             Py_DECREF(tmp);

  001b2	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tmp$[rsp]
  001b7	e8 00 00 00 00	 call	 _Py_DecRef
$LN10@PyErr_Synt:
$LN14@PyErr_Synt:

; 904  :         }
; 905  :     }
; 906  :     if (_PyObject_SetAttrId(v, &PyId_offset, Py_None)) {

  001bc	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId_offset@?1??PyErr_SyntaxLocationEx@@9@9
  001c1	8b c0		 mov	 eax, eax
  001c3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  001c9	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  001d2	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  001d6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:_Py_NoneStruct
  001dd	48 8b d0	 mov	 rdx, rax
  001e0	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  001e5	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  001ea	85 c0		 test	 eax, eax
  001ec	74 05		 je	 SHORT $LN8@PyErr_Synt

; 907  :         PyErr_Clear();

  001ee	e8 00 00 00 00	 call	 PyErr_Clear
$LN8@PyErr_Synt:

; 908  :     }
; 909  :     if (exc != PyExc_SyntaxError) {

  001f3	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR PyExc_SyntaxError
  001fa	48 39 44 24 38	 cmp	 QWORD PTR exc$[rsp], rax
  001ff	0f 84 ea 00 00
	00		 je	 $LN7@PyErr_Synt

; 910  :         if (!_PyObject_HasAttrId(v, &PyId_msg)) {

  00205	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId_msg@?1??PyErr_SyntaxLocationEx@@9@9
  0020a	8b c0		 mov	 eax, eax
  0020c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00212	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0021b	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0021f	48 8b d0	 mov	 rdx, rax
  00222	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  00227	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  0022c	85 c0		 test	 eax, eax
  0022e	75 5d		 jne	 SHORT $LN6@PyErr_Synt

; 911  :             tmp = PyObject_Str(v);

  00230	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  00235	e8 00 00 00 00	 call	 PyObject_Str
  0023a	48 89 44 24 28	 mov	 QWORD PTR tmp$[rsp], rax

; 912  :             if (tmp) {

  0023f	48 83 7c 24 28
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  00245	74 41		 je	 SHORT $LN5@PyErr_Synt

; 913  :                 if (_PyObject_SetAttrId(v, &PyId_msg, tmp))

  00247	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId_msg@?1??PyErr_SyntaxLocationEx@@9@9
  0024c	8b c0		 mov	 eax, eax
  0024e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00254	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0025d	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00261	4c 8b 44 24 28	 mov	 r8, QWORD PTR tmp$[rsp]
  00266	48 8b d0	 mov	 rdx, rax
  00269	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  0026e	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  00273	85 c0		 test	 eax, eax
  00275	74 05		 je	 SHORT $LN4@PyErr_Synt

; 914  :                     PyErr_Clear();

  00277	e8 00 00 00 00	 call	 PyErr_Clear
$LN4@PyErr_Synt:

; 915  :                 Py_DECREF(tmp);

  0027c	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tmp$[rsp]
  00281	e8 00 00 00 00	 call	 _Py_DecRef

; 916  :             } else {

  00286	eb 05		 jmp	 SHORT $LN3@PyErr_Synt
$LN5@PyErr_Synt:

; 917  :                 PyErr_Clear();

  00288	e8 00 00 00 00	 call	 PyErr_Clear
$LN3@PyErr_Synt:
$LN6@PyErr_Synt:

; 918  :             }
; 919  :         }
; 920  :         if (!_PyObject_HasAttrId(v, &PyId_print_file_and_line)) {

  0028d	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId_print_file_and_line@?1??PyErr_SyntaxLocationEx@@9@9
  00292	8b c0		 mov	 eax, eax
  00294	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0029a	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  002a3	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  002a7	48 8b d0	 mov	 rdx, rax
  002aa	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  002af	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  002b4	85 c0		 test	 eax, eax
  002b6	75 37		 jne	 SHORT $LN2@PyErr_Synt

; 921  :             if (_PyObject_SetAttrId(v, &PyId_print_file_and_line,
; 922  :                                     Py_None))

  002b8	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId_print_file_and_line@?1??PyErr_SyntaxLocationEx@@9@9
  002bd	8b c0		 mov	 eax, eax
  002bf	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  002c5	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  002ce	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  002d2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:_Py_NoneStruct
  002d9	48 8b d0	 mov	 rdx, rax
  002dc	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  002e1	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  002e6	85 c0		 test	 eax, eax
  002e8	74 05		 je	 SHORT $LN1@PyErr_Synt

; 923  :                 PyErr_Clear();

  002ea	e8 00 00 00 00	 call	 PyErr_Clear
$LN1@PyErr_Synt:
$LN2@PyErr_Synt:
$LN7@PyErr_Synt:

; 924  :         }
; 925  :     }
; 926  :     PyErr_Restore(exc, v, tb);

  002ef	4c 8b 44 24 30	 mov	 r8, QWORD PTR tb$[rsp]
  002f4	48 8b 54 24 20	 mov	 rdx, QWORD PTR v$[rsp]
  002f9	48 8b 4c 24 38	 mov	 rcx, QWORD PTR exc$[rsp]
  002fe	e8 00 00 00 00	 call	 PyErr_Restore

; 927  : }

  00303	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00307	c3		 ret	 0
PyErr_SyntaxLocationEx ENDP
_TEXT	ENDS
PUBLIC	??_C@_02JDPG@rb?$AA@				; `string'
EXTRN	__imp_fclose:PROC
EXTRN	Py_UniversalNewlineFgets:PROC
EXTRN	__imp_fopen:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyErr_ProgramText DD imagerel $LN19
	DD	imagerel $LN19+390
	DD	imagerel $unwind$PyErr_ProgramText
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyErr_ProgramText DD 021001H
	DD	0890110H
xdata	ENDS
;	COMDAT ??_C@_02JDPG@rb?$AA@
CONST	SEGMENT
??_C@_02JDPG@rb?$AA@ DB 'rb', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyErr_ProgramText
_TEXT	SEGMENT
i$ = 32
fp$ = 40
linebuf$ = 48
pLastChar$121183 = 1056
p$121192 = 1064
res$121193 = 1072
filename$ = 1104
lineno$ = 1112
PyErr_ProgramText PROC					; COMDAT

; 937  : {

$LN19:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 81 ec 48 04
	00 00		 sub	 rsp, 1096		; 00000448H

; 938  :     FILE *fp;
; 939  :     int i;
; 940  :     char linebuf[1000];
; 941  : 
; 942  :     if (filename == NULL || *filename == '\0' || lineno <= 0)

  00010	48 83 bc 24 50
	04 00 00 00	 cmp	 QWORD PTR filename$[rsp], 0
  00019	74 19		 je	 SHORT $LN15@PyErr_Prog
  0001b	48 8b 84 24 50
	04 00 00	 mov	 rax, QWORD PTR filename$[rsp]
  00023	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00026	85 c0		 test	 eax, eax
  00028	74 0a		 je	 SHORT $LN15@PyErr_Prog
  0002a	83 bc 24 58 04
	00 00 00	 cmp	 DWORD PTR lineno$[rsp], 0
  00032	7f 07		 jg	 SHORT $LN16@PyErr_Prog
$LN15@PyErr_Prog:

; 943  :         return NULL;

  00034	33 c0		 xor	 eax, eax
  00036	e9 43 01 00 00	 jmp	 $LN17@PyErr_Prog
$LN16@PyErr_Prog:

; 944  :     fp = fopen(filename, "r" PY_STDIOTEXTMODE);

  0003b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02JDPG@rb?$AA@
  00042	48 8b 8c 24 50
	04 00 00	 mov	 rcx, QWORD PTR filename$[rsp]
  0004a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fopen
  00050	48 89 44 24 28	 mov	 QWORD PTR fp$[rsp], rax

; 945  :     if (fp == NULL)

  00055	48 83 7c 24 28
	00		 cmp	 QWORD PTR fp$[rsp], 0
  0005b	75 07		 jne	 SHORT $LN14@PyErr_Prog

; 946  :         return NULL;

  0005d	33 c0		 xor	 eax, eax
  0005f	e9 1a 01 00 00	 jmp	 $LN17@PyErr_Prog
$LN14@PyErr_Prog:

; 947  :     for (i = 0; i < lineno; i++) {

  00064	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  0006c	eb 0a		 jmp	 SHORT $LN13@PyErr_Prog
$LN12@PyErr_Prog:
  0006e	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  00072	ff c0		 inc	 eax
  00074	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN13@PyErr_Prog:
  00078	8b 84 24 58 04
	00 00		 mov	 eax, DWORD PTR lineno$[rsp]
  0007f	39 44 24 20	 cmp	 DWORD PTR i$[rsp], eax
  00083	7d 5a		 jge	 SHORT $LN11@PyErr_Prog

; 948  :         char *pLastChar = &linebuf[sizeof(linebuf) - 2];

  00085	48 8d 84 24 16
	04 00 00	 lea	 rax, QWORD PTR linebuf$[rsp+998]
  0008d	48 89 84 24 20
	04 00 00	 mov	 QWORD PTR pLastChar$121183[rsp], rax
$LN10@PyErr_Prog:

; 949  :         do {
; 950  :             *pLastChar = '\0';

  00095	48 8b 84 24 20
	04 00 00	 mov	 rax, QWORD PTR pLastChar$121183[rsp]
  0009d	c6 00 00	 mov	 BYTE PTR [rax], 0

; 951  :             if (Py_UniversalNewlineFgets(linebuf, sizeof linebuf,
; 952  :                                          fp, NULL) == NULL)

  000a0	45 33 c9	 xor	 r9d, r9d
  000a3	4c 8b 44 24 28	 mov	 r8, QWORD PTR fp$[rsp]
  000a8	ba e8 03 00 00	 mov	 edx, 1000		; 000003e8H
  000ad	48 8d 4c 24 30	 lea	 rcx, QWORD PTR linebuf$[rsp]
  000b2	e8 00 00 00 00	 call	 Py_UniversalNewlineFgets
  000b7	48 85 c0	 test	 rax, rax
  000ba	75 02		 jne	 SHORT $LN7@PyErr_Prog

; 953  :                 break;

  000bc	eb 1f		 jmp	 SHORT $LN8@PyErr_Prog
$LN7@PyErr_Prog:

; 954  :             /* fgets read *something*; if it didn't get as
; 955  :                far as pLastChar, it must have found a newline
; 956  :                or hit the end of the file; if pLastChar is \n,
; 957  :                it obviously found a newline; else we haven't
; 958  :                yet seen a newline, so must continue */
; 959  :         } while (*pLastChar != '\0' && *pLastChar != '\n');

  000be	48 8b 84 24 20
	04 00 00	 mov	 rax, QWORD PTR pLastChar$121183[rsp]
  000c6	0f be 00	 movsx	 eax, BYTE PTR [rax]
  000c9	85 c0		 test	 eax, eax
  000cb	74 10		 je	 SHORT $LN6@PyErr_Prog
  000cd	48 8b 84 24 20
	04 00 00	 mov	 rax, QWORD PTR pLastChar$121183[rsp]
  000d5	0f be 00	 movsx	 eax, BYTE PTR [rax]
  000d8	83 f8 0a	 cmp	 eax, 10
  000db	75 b8		 jne	 SHORT $LN10@PyErr_Prog
$LN6@PyErr_Prog:
$LN8@PyErr_Prog:

; 960  :     }

  000dd	eb 8f		 jmp	 SHORT $LN12@PyErr_Prog
$LN11@PyErr_Prog:

; 961  :     fclose(fp);

  000df	48 8b 4c 24 28	 mov	 rcx, QWORD PTR fp$[rsp]
  000e4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fclose

; 962  :     if (i == lineno) {

  000ea	8b 84 24 58 04
	00 00		 mov	 eax, DWORD PTR lineno$[rsp]
  000f1	39 44 24 20	 cmp	 DWORD PTR i$[rsp], eax
  000f5	0f 85 81 00 00
	00		 jne	 $LN5@PyErr_Prog

; 963  :         char *p = linebuf;

  000fb	48 8d 44 24 30	 lea	 rax, QWORD PTR linebuf$[rsp]
  00100	48 89 84 24 28
	04 00 00	 mov	 QWORD PTR p$121192[rsp], rax
$LN4@PyErr_Prog:

; 964  :         PyObject *res;
; 965  :         while (*p == ' ' || *p == '\t' || *p == '\014')

  00108	48 8b 84 24 28
	04 00 00	 mov	 rax, QWORD PTR p$121192[rsp]
  00110	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00113	83 f8 20	 cmp	 eax, 32			; 00000020H
  00116	74 20		 je	 SHORT $LN2@PyErr_Prog
  00118	48 8b 84 24 28
	04 00 00	 mov	 rax, QWORD PTR p$121192[rsp]
  00120	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00123	83 f8 09	 cmp	 eax, 9
  00126	74 10		 je	 SHORT $LN2@PyErr_Prog
  00128	48 8b 84 24 28
	04 00 00	 mov	 rax, QWORD PTR p$121192[rsp]
  00130	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00133	83 f8 0c	 cmp	 eax, 12
  00136	75 15		 jne	 SHORT $LN3@PyErr_Prog
$LN2@PyErr_Prog:

; 966  :             p++;

  00138	48 8b 84 24 28
	04 00 00	 mov	 rax, QWORD PTR p$121192[rsp]
  00140	48 ff c0	 inc	 rax
  00143	48 89 84 24 28
	04 00 00	 mov	 QWORD PTR p$121192[rsp], rax
  0014b	eb bb		 jmp	 SHORT $LN4@PyErr_Prog
$LN3@PyErr_Prog:

; 967  :         res = PyUnicode_FromString(p);

  0014d	48 8b 8c 24 28
	04 00 00	 mov	 rcx, QWORD PTR p$121192[rsp]
  00155	e8 00 00 00 00	 call	 PyUnicode_FromString
  0015a	48 89 84 24 30
	04 00 00	 mov	 QWORD PTR res$121193[rsp], rax

; 968  :         if (res == NULL)

  00162	48 83 bc 24 30
	04 00 00 00	 cmp	 QWORD PTR res$121193[rsp], 0
  0016b	75 05		 jne	 SHORT $LN1@PyErr_Prog

; 969  :             PyErr_Clear();

  0016d	e8 00 00 00 00	 call	 PyErr_Clear
$LN1@PyErr_Prog:

; 970  :         return res;

  00172	48 8b 84 24 30
	04 00 00	 mov	 rax, QWORD PTR res$121193[rsp]
  0017a	eb 02		 jmp	 SHORT $LN17@PyErr_Prog
$LN5@PyErr_Prog:

; 971  :     }
; 972  :     return NULL;

  0017c	33 c0		 xor	 eax, eax
$LN17@PyErr_Prog:

; 973  : }

  0017e	48 81 c4 48 04
	00 00		 add	 rsp, 1096		; 00000448H
  00185	c3		 ret	 0
PyErr_ProgramText ENDP
_TEXT	ENDS
END
