; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0P@GNMDLNAP@tuple_iterator?$AA@		; `string'
PUBLIC	??_C@_0N@MOOGCAMH@__setstate__?$AA@		; `string'
PUBLIC	??_C@_0L@NNMACJIG@__reduce__?$AA@		; `string'
PUBLIC	??_C@_0BA@BJLPBKGK@__length_hint__?$AA@		; `string'
PUBLIC	??_C@_05NNMEHDAO@tuple?$AA@			; `string'
PUBLIC	??_C@_05IOMEMJEC@count?$AA@			; `string'
PUBLIC	??_C@_05FKHKFDID@index?$AA@			; `string'
PUBLIC	??_C@_0L@HOGGIPGN@__sizeof__?$AA@		; `string'
PUBLIC	??_C@_0P@BCBHENLA@__getnewargs__?$AA@		; `string'
PUBLIC	??_C@_08IBBDGPOF@sequence?$AA@			; `string'
PUBLIC	PyTuple_Type
PUBLIC	PyTupleIter_Type
EXTRN	PyObject_SelfIter:PROC
EXTRN	PyObject_GC_Del:PROC
EXTRN	PyObject_GenericGetAttr:PROC
EXTRN	PyType_Type:BYTE
_BSS	SEGMENT
?sep@?1??tuplerepr@@9@9 DQ 01H DUP (?)			; `tuplerepr'::`2'::sep
_BSS	ENDS
;	COMDAT ??_C@_0P@GNMDLNAP@tuple_iterator?$AA@
CONST	SEGMENT
??_C@_0P@GNMDLNAP@tuple_iterator?$AA@ DB 'tuple_iterator', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MOOGCAMH@__setstate__?$AA@
CONST	SEGMENT
??_C@_0N@MOOGCAMH@__setstate__?$AA@ DB '__setstate__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NNMACJIG@__reduce__?$AA@
CONST	SEGMENT
??_C@_0L@NNMACJIG@__reduce__?$AA@ DB '__reduce__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@BJLPBKGK@__length_hint__?$AA@
CONST	SEGMENT
??_C@_0BA@BJLPBKGK@__length_hint__?$AA@ DB '__length_hint__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05NNMEHDAO@tuple?$AA@
CONST	SEGMENT
??_C@_05NNMEHDAO@tuple?$AA@ DB 'tuple', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05IOMEMJEC@count?$AA@
CONST	SEGMENT
??_C@_05IOMEMJEC@count?$AA@ DB 'count', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05FKHKFDID@index?$AA@
CONST	SEGMENT
??_C@_05FKHKFDID@index?$AA@ DB 'index', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HOGGIPGN@__sizeof__?$AA@
CONST	SEGMENT
??_C@_0L@HOGGIPGN@__sizeof__?$AA@ DB '__sizeof__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BCBHENLA@__getnewargs__?$AA@
CONST	SEGMENT
??_C@_0P@BCBHENLA@__getnewargs__?$AA@ DB '__getnewargs__', 00H ; `string'
CONST	ENDS
_DATA	SEGMENT
?kwlist@?1??tuple_new@@9@9 DQ FLAT:??_C@_08IBBDGPOF@sequence?$AA@ ; `tuple_new'::`2'::kwlist
	DQ	0000000000000000H
tuple_doc DB	'tuple() -> empty tuple', 0aH, 'tuple(iterable) -> tuple '
	DB	'initialized from iterable''s items', 0aH, 0aH, 'If the argume'
	DB	'nt is a tuple, the return value is the same object.', 00H
	ORG $+12
tuple_as_sequence DQ FLAT:tuplelength
	DQ	FLAT:tupleconcat
	DQ	FLAT:tuplerepeat
	DQ	FLAT:tupleitem
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:tuplecontains
	ORG $+16
index_doc DB	'T.index(value, [start, [stop]]) -> integer -- return fir'
	DB	'st index of value.', 0aH, 'Raises ValueError if the value is '
	DB	'not present.', 00H
	ORG $+6
count_doc DB	'T.count(value) -> integer -- return number of occurrence'
	DB	's of value', 00H
	ORG $+5
sizeof_doc DB	'T.__sizeof__() -- size of T in memory, in bytes', 00H
	ORG $+8
tuple_methods DQ FLAT:??_C@_0P@BCBHENLA@__getnewargs__?$AA@
	DQ	FLAT:tuple_getnewargs
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0L@HOGGIPGN@__sizeof__?$AA@
	DQ	FLAT:tuple_sizeof
	DD	04H
	ORG $+4
	DQ	FLAT:sizeof_doc
	DQ	FLAT:??_C@_05FKHKFDID@index?$AA@
	DQ	FLAT:tupleindex
	DD	01H
	ORG $+4
	DQ	FLAT:index_doc
	DQ	FLAT:??_C@_05IOMEMJEC@count?$AA@
	DQ	FLAT:tuplecount
	DD	08H
	ORG $+4
	DQ	FLAT:count_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
tuple_as_mapping DQ FLAT:tuplelength
	DQ	FLAT:tuplesubscript
	DQ	0000000000000000H
	ORG $+8
PyTuple_Type DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_05NNMEHDAO@tuple?$AA@
	DQ	0000000000000078H
	DQ	0000000000000008H
	DQ	FLAT:tupledealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:tuplerepr
	DQ	0000000000000000H
	DQ	FLAT:tuple_as_sequence
	DQ	FLAT:tuple_as_mapping
	DQ	FLAT:tuplehash
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	04044400H
	ORG $+4
	DQ	FLAT:tuple_doc
	DQ	FLAT:tupletraverse
	DQ	0000000000000000H
	DQ	FLAT:tuplerichcompare
	DQ	0000000000000000H
	DQ	FLAT:tuple_iter
	DQ	0000000000000000H
	DQ	FLAT:tuple_methods
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:tuple_new
	DQ	FLAT:PyObject_GC_Del
	ORG $+64
length_hint_doc DB 'Private method returning an estimate of len(list(it))'
	DB	'.', 00H
	ORG $+1
reduce_doc DB	'Return state information for pickling.', 00H
	ORG $+1
setstate_doc DB	'Set state information for unpickling.', 00H
	ORG $+10
tupleiter_methods DQ FLAT:??_C@_0BA@BJLPBKGK@__length_hint__?$AA@
	DQ	FLAT:tupleiter_len
	DD	04H
	ORG $+4
	DQ	FLAT:length_hint_doc
	DQ	FLAT:??_C@_0L@NNMACJIG@__reduce__?$AA@
	DQ	FLAT:tupleiter_reduce
	DD	04H
	ORG $+4
	DQ	FLAT:reduce_doc
	DQ	FLAT:??_C@_0N@MOOGCAMH@__setstate__?$AA@
	DQ	FLAT:tupleiter_setstate
	DD	08H
	ORG $+4
	DQ	FLAT:setstate_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
PyTupleIter_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0P@GNMDLNAP@tuple_iterator?$AA@
	DQ	0000000000000070H
	DQ	0000000000000000H
	DQ	FLAT:tupleiter_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044000H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:tupleiter_traverse
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_SelfIter
	DQ	FLAT:tupleiter_next
	DQ	FLAT:tupleiter_methods
	DQ	0000000000000000H
	ORG $+144
_DATA	ENDS
;	COMDAT ??_C@_08IBBDGPOF@sequence?$AA@
CONST	SEGMENT
??_C@_08IBBDGPOF@sequence?$AA@ DB 'sequence', 00H	; `string'
CONST	ENDS
PUBLIC	??_C@_0BM@JCBEKPGK@free?5?$CFd?9sized?5PyTupleObject?$AA@ ; `string'
PUBLIC	_PyTuple_DebugMallocStats
EXTRN	_PyDebugAllocatorStats:PROC
EXTRN	PyOS_snprintf:PROC
_BSS	SEGMENT
numfree	DD	014H DUP (?)
_BSS	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\objects\tupleobject.c
pdata	SEGMENT
$pdata$_PyTuple_DebugMallocStats DD imagerel $LN6
	DD	imagerel $LN6+142
	DD	imagerel $unwind$_PyTuple_DebugMallocStats
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyTuple_DebugMallocStats DD 020c01H
	DD	017010cH
xdata	ENDS
;	COMDAT ??_C@_0BM@JCBEKPGK@free?5?$CFd?9sized?5PyTupleObject?$AA@
CONST	SEGMENT
??_C@_0BM@JCBEKPGK@free?5?$CFd?9sized?5PyTupleObject?$AA@ DB 'free %d-siz'
	DB	'ed PyTupleObject', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PyTuple_DebugMallocStats
_TEXT	SEGMENT
i$ = 32
buf$ = 48
out$ = 192
_PyTuple_DebugMallocStats PROC				; COMDAT

; 51   : {

$LN6:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H

; 52   : #if PyTuple_MAXSAVESIZE > 0
; 53   :     int i;
; 54   :     char buf[128];
; 55   :     for (i = 1; i < PyTuple_MAXSAVESIZE; i++) {

  0000c	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR i$[rsp], 1
  00014	eb 0a		 jmp	 SHORT $LN3@PyTuple_De
$LN2@PyTuple_De:
  00016	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  0001a	ff c0		 inc	 eax
  0001c	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN3@PyTuple_De:
  00020	83 7c 24 20 14	 cmp	 DWORD PTR i$[rsp], 20
  00025	7d 5f		 jge	 SHORT $LN1@PyTuple_De

; 56   :         PyOS_snprintf(buf, sizeof(buf),
; 57   :                       "free %d-sized PyTupleObject", i);

  00027	44 8b 4c 24 20	 mov	 r9d, DWORD PTR i$[rsp]
  0002c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BM@JCBEKPGK@free?5?$CFd?9sized?5PyTupleObject?$AA@
  00033	ba 80 00 00 00	 mov	 edx, 128		; 00000080H
  00038	48 8d 4c 24 30	 lea	 rcx, QWORD PTR buf$[rsp]
  0003d	e8 00 00 00 00	 call	 PyOS_snprintf

; 58   :         _PyDebugAllocatorStats(out,
; 59   :                                buf,
; 60   :                                numfree[i], _PyObject_VAR_SIZE(&PyTuple_Type, i));

  00042	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  00047	48 0f af 05 80
	00 00 00	 imul	 rax, QWORD PTR PyTuple_Type+128
  0004f	48 8b 0d 78 00
	00 00		 mov	 rcx, QWORD PTR PyTuple_Type+120
  00056	48 8d 44 01 07	 lea	 rax, QWORD PTR [rcx+rax+7]
  0005b	48 83 e0 f8	 and	 rax, -8
  0005f	48 63 4c 24 20	 movsxd	 rcx, DWORD PTR i$[rsp]
  00064	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:numfree
  0006b	4c 8b c8	 mov	 r9, rax
  0006e	44 8b 04 8a	 mov	 r8d, DWORD PTR [rdx+rcx*4]
  00072	48 8d 54 24 30	 lea	 rdx, QWORD PTR buf$[rsp]
  00077	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR out$[rsp]
  0007f	e8 00 00 00 00	 call	 _PyDebugAllocatorStats

; 61   :     }

  00084	eb 90		 jmp	 SHORT $LN2@PyTuple_De
$LN1@PyTuple_De:

; 62   : #endif
; 63   : }

  00086	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  0008d	c3		 ret	 0
_PyTuple_DebugMallocStats ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@ ; `string'
PUBLIC	??_C@_0M@GAGABHEE@PyTuple_New?$AA@		; `string'
PUBLIC	_Py_IncRef
PUBLIC	??_C@_0BJ@NPBNLKPK@?4?4?2Objects?2tupleobject?4c?$AA@ ; `string'
PUBLIC	PyTuple_New
EXTRN	_PyGC_generation0:QWORD
EXTRN	Py_FatalError:PROC
EXTRN	_PyParallel_Guard:PROC
EXTRN	_PyObject_GC_NewVar:PROC
EXTRN	_PxObject_NewVar:PROC
EXTRN	PyErr_NoMemory:PROC
EXTRN	_Py_NewReference:PROC
EXTRN	_Py_PXCTX:PROC
EXTRN	_PyErr_BadInternalCall:PROC
_BSS	SEGMENT
free_list DQ	014H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyTuple_New DD imagerel $LN24
	DD	imagerel $LN24+715
	DD	imagerel $unwind$PyTuple_New
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyTuple_New DD 010901H
	DD	0c209H
xdata	ENDS
;	COMDAT ??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@
CONST	SEGMENT
??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@ DB 'GC object alread'
	DB	'y tracked', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GAGABHEE@PyTuple_New?$AA@
CONST	SEGMENT
??_C@_0M@GAGABHEE@PyTuple_New?$AA@ DB 'PyTuple_New', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@NPBNLKPK@?4?4?2Objects?2tupleobject?4c?$AA@
CONST	SEGMENT
??_C@_0BJ@NPBNLKPK@?4?4?2Objects?2tupleobject?4c?$AA@ DB '..\Objects\tupl'
	DB	'eobject.c', 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyTuple_New
_TEXT	SEGMENT
i$ = 48
op$ = 56
g$20370 = 64
tv132 = 72
tv159 = 80
size$ = 112
PyTuple_New PROC					; COMDAT

; 67   : {

$LN24:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 68   :     register PyTupleObject *op;
; 69   :     Py_ssize_t i;
; 70   :     if (size < 0) {

  00009	48 83 7c 24 70
	00		 cmp	 QWORD PTR size$[rsp], 0
  0000f	7d 18		 jge	 SHORT $LN17@PyTuple_Ne

; 71   :         PyErr_BadInternalCall();

  00011	ba 47 00 00 00	 mov	 edx, 71			; 00000047H
  00016	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@NPBNLKPK@?4?4?2Objects?2tupleobject?4c?$AA@
  0001d	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 72   :         return NULL;

  00022	33 c0		 xor	 eax, eax
  00024	e9 9d 02 00 00	 jmp	 $LN18@PyTuple_Ne
$LN17@PyTuple_Ne:

; 73   :     }
; 74   :     if (Py_PXCTX)

  00029	e8 00 00 00 00	 call	 _Py_PXCTX
  0002e	85 c0		 test	 eax, eax
  00030	74 05		 je	 SHORT $LN16@PyTuple_Ne

; 75   :         goto newvar;

  00032	e9 be 00 00 00	 jmp	 $newvar$20335
$LN16@PyTuple_Ne:

; 76   : #if PyTuple_MAXSAVESIZE > 0
; 77   :     if (size == 0 && free_list[0]) {

  00037	48 83 7c 24 70
	00		 cmp	 QWORD PTR size$[rsp], 0
  0003d	75 2a		 jne	 SHORT $LN15@PyTuple_Ne
  0003f	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR free_list, 0
  00047	74 20		 je	 SHORT $LN15@PyTuple_Ne

; 78   :         op = free_list[0];

  00049	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR free_list
  00050	48 89 44 24 38	 mov	 QWORD PTR op$[rsp], rax

; 79   :         Py_INCREF(op);

  00055	48 8b 4c 24 38	 mov	 rcx, QWORD PTR op$[rsp]
  0005a	e8 00 00 00 00	 call	 _Py_IncRef

; 80   : #ifdef COUNT_ALLOCS
; 81   :         tuple_zero_allocs++;
; 82   : #endif
; 83   :         return (PyObject *) op;

  0005f	48 8b 44 24 38	 mov	 rax, QWORD PTR op$[rsp]
  00064	e9 5d 02 00 00	 jmp	 $LN18@PyTuple_Ne
$LN15@PyTuple_Ne:

; 84   :     }
; 85   :     if (size < PyTuple_MAXSAVESIZE && (op = free_list[size]) != NULL) {

  00069	48 83 7c 24 70
	14		 cmp	 QWORD PTR size$[rsp], 20
  0006f	0f 8d 80 00 00
	00		 jge	 $LN14@PyTuple_Ne
  00075	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:free_list
  0007c	48 8b 4c 24 70	 mov	 rcx, QWORD PTR size$[rsp]
  00081	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  00085	48 89 44 24 38	 mov	 QWORD PTR op$[rsp], rax
  0008a	48 83 7c 24 38
	00		 cmp	 QWORD PTR op$[rsp], 0
  00090	74 63		 je	 SHORT $LN14@PyTuple_Ne

; 86   :         free_list[size] = (PyTupleObject *) op->ob_item[0];

  00092	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:free_list
  00099	48 8b 4c 24 70	 mov	 rcx, QWORD PTR size$[rsp]
  0009e	48 8b 54 24 38	 mov	 rdx, QWORD PTR op$[rsp]
  000a3	48 8b 52 70	 mov	 rdx, QWORD PTR [rdx+112]
  000a7	48 89 14 c8	 mov	 QWORD PTR [rax+rcx*8], rdx

; 87   :         numfree[size]--;

  000ab	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:numfree
  000b2	48 8b 4c 24 70	 mov	 rcx, QWORD PTR size$[rsp]
  000b7	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  000ba	ff c8		 dec	 eax
  000bc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:numfree
  000c3	48 8b 54 24 70	 mov	 rdx, QWORD PTR size$[rsp]
  000c8	89 04 91	 mov	 DWORD PTR [rcx+rdx*4], eax

; 88   : #ifdef COUNT_ALLOCS
; 89   :         fast_tuple_allocs++;
; 90   : #endif
; 91   :         /* Inline PyObject_InitVar */
; 92   : #ifdef Py_TRACE_REFS
; 93   :         Py_SIZE(op) = size;

  000cb	48 8b 44 24 38	 mov	 rax, QWORD PTR op$[rsp]
  000d0	48 8b 4c 24 70	 mov	 rcx, QWORD PTR size$[rsp]
  000d5	48 89 48 60	 mov	 QWORD PTR [rax+96], rcx

; 94   :         Py_TYPE(op) = &PyTuple_Type;

  000d9	48 8b 44 24 38	 mov	 rax, QWORD PTR op$[rsp]
  000de	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyTuple_Type
  000e5	48 89 48 58	 mov	 QWORD PTR [rax+88], rcx

; 95   : #endif
; 96   :         _Py_NewReference((PyObject *)op);

  000e9	48 8b 4c 24 38	 mov	 rcx, QWORD PTR op$[rsp]
  000ee	e8 00 00 00 00	 call	 _Py_NewReference

; 97   :     }
; 98   :     else

  000f3	eb 6b		 jmp	 SHORT $LN13@PyTuple_Ne
$LN14@PyTuple_Ne:
$newvar$20335:

; 99   : #endif
; 100  :     {
; 101  : newvar:
; 102  :         /* Check for overflow */
; 103  :         if (size > (PY_SSIZE_T_MAX - sizeof(PyTupleObject) -
; 104  :                     sizeof(PyObject *)) / sizeof(PyObject *)) {

  000f5	48 b8 ee ff ff
	ff ff ff ff 0f	 mov	 rax, 1152921504606846958 ; 0fffffffffffffeeH
  000ff	48 39 44 24 70	 cmp	 QWORD PTR size$[rsp], rax
  00104	76 0a		 jbe	 SHORT $LN12@PyTuple_Ne

; 105  :             return PyErr_NoMemory();

  00106	e8 00 00 00 00	 call	 PyErr_NoMemory
  0010b	e9 b6 01 00 00	 jmp	 $LN18@PyTuple_Ne
$LN12@PyTuple_Ne:

; 106  :         }
; 107  :         op = PyObject_GC_NewVar(PyTupleObject, &PyTuple_Type, size);

  00110	e8 00 00 00 00	 call	 _Py_PXCTX
  00115	85 c0		 test	 eax, eax
  00117	74 18		 je	 SHORT $LN20@PyTuple_Ne
  00119	48 8b 54 24 70	 mov	 rdx, QWORD PTR size$[rsp]
  0011e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyTuple_Type
  00125	e8 00 00 00 00	 call	 _PxObject_NewVar
  0012a	48 89 44 24 48	 mov	 QWORD PTR tv132[rsp], rax
  0012f	eb 16		 jmp	 SHORT $LN21@PyTuple_Ne
$LN20@PyTuple_Ne:
  00131	48 8b 54 24 70	 mov	 rdx, QWORD PTR size$[rsp]
  00136	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyTuple_Type
  0013d	e8 00 00 00 00	 call	 _PyObject_GC_NewVar
  00142	48 89 44 24 48	 mov	 QWORD PTR tv132[rsp], rax
$LN21@PyTuple_Ne:
  00147	48 8b 44 24 48	 mov	 rax, QWORD PTR tv132[rsp]
  0014c	48 89 44 24 38	 mov	 QWORD PTR op$[rsp], rax

; 108  :         if (op == NULL)

  00151	48 83 7c 24 38
	00		 cmp	 QWORD PTR op$[rsp], 0
  00157	75 07		 jne	 SHORT $LN11@PyTuple_Ne

; 109  :             return NULL;

  00159	33 c0		 xor	 eax, eax
  0015b	e9 66 01 00 00	 jmp	 $LN18@PyTuple_Ne
$LN11@PyTuple_Ne:
$LN13@PyTuple_Ne:

; 110  :     }
; 111  :     for (i=0; i < size; i++)

  00160	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  00169	eb 0d		 jmp	 SHORT $LN10@PyTuple_Ne
$LN9@PyTuple_Ne:
  0016b	48 8b 44 24 30	 mov	 rax, QWORD PTR i$[rsp]
  00170	48 ff c0	 inc	 rax
  00173	48 89 44 24 30	 mov	 QWORD PTR i$[rsp], rax
$LN10@PyTuple_Ne:
  00178	48 8b 44 24 70	 mov	 rax, QWORD PTR size$[rsp]
  0017d	48 39 44 24 30	 cmp	 QWORD PTR i$[rsp], rax
  00182	7d 15		 jge	 SHORT $LN8@PyTuple_Ne

; 112  :         op->ob_item[i] = NULL;

  00184	48 8b 44 24 38	 mov	 rax, QWORD PTR op$[rsp]
  00189	48 8b 4c 24 30	 mov	 rcx, QWORD PTR i$[rsp]
  0018e	48 c7 44 c8 70
	00 00 00 00	 mov	 QWORD PTR [rax+rcx*8+112], 0
  00197	eb d2		 jmp	 SHORT $LN9@PyTuple_Ne
$LN8@PyTuple_Ne:

; 113  : 
; 114  :     if (Py_PXCTX)

  00199	e8 00 00 00 00	 call	 _Py_PXCTX
  0019e	85 c0		 test	 eax, eax
  001a0	74 05		 je	 SHORT $LN7@PyTuple_Ne

; 115  :         goto end;

  001a2	e9 1a 01 00 00	 jmp	 $end$20362
$LN7@PyTuple_Ne:

; 116  : 
; 117  : #if PyTuple_MAXSAVESIZE > 0
; 118  :     if (size == 0) {

  001a7	48 83 7c 24 70
	00		 cmp	 QWORD PTR size$[rsp], 0
  001ad	75 24		 jne	 SHORT $LN6@PyTuple_Ne

; 119  :         free_list[0] = op;

  001af	48 8b 44 24 38	 mov	 rax, QWORD PTR op$[rsp]
  001b4	48 89 05 00 00
	00 00		 mov	 QWORD PTR free_list, rax

; 120  :         ++numfree[0];

  001bb	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR numfree
  001c1	ff c0		 inc	 eax
  001c3	89 05 00 00 00
	00		 mov	 DWORD PTR numfree, eax

; 121  :         Py_INCREF(op);          /* extra INCREF so that this is never freed */

  001c9	48 8b 4c 24 38	 mov	 rcx, QWORD PTR op$[rsp]
  001ce	e8 00 00 00 00	 call	 _Py_IncRef
$LN6@PyTuple_Ne:

; 122  :     }
; 123  : #endif
; 124  : #ifdef SHOW_TRACK_COUNT
; 125  :     count_tracked++;
; 126  : #endif
; 127  :     _PyObject_GC_TRACK(op);

  001d3	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  001db	4c 8b 4c 24 38	 mov	 r9, QWORD PTR op$[rsp]
  001e0	41 b8 7f 00 00
	00		 mov	 r8d, 127		; 0000007fH
  001e6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@NPBNLKPK@?4?4?2Objects?2tupleobject?4c?$AA@
  001ed	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@GAGABHEE@PyTuple_New?$AA@
  001f4	e8 00 00 00 00	 call	 _PyParallel_Guard
  001f9	85 c0		 test	 eax, eax
  001fb	0f 85 c0 00 00
	00		 jne	 $LN5@PyTuple_Ne
$LN4@PyTuple_Ne:
  00201	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00209	4c 8b 4c 24 38	 mov	 r9, QWORD PTR op$[rsp]
  0020e	41 b8 7f 00 00
	00		 mov	 r8d, 127		; 0000007fH
  00214	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@NPBNLKPK@?4?4?2Objects?2tupleobject?4c?$AA@
  0021b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@GAGABHEE@PyTuple_New?$AA@
  00222	e8 00 00 00 00	 call	 _PyParallel_Guard
  00227	85 c0		 test	 eax, eax
  00229	74 0b		 je	 SHORT $LN22@PyTuple_Ne
  0022b	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR tv159[rsp], 0
  00234	eb 0e		 jmp	 SHORT $LN23@PyTuple_Ne
$LN22@PyTuple_Ne:
  00236	48 8b 44 24 38	 mov	 rax, QWORD PTR op$[rsp]
  0023b	48 83 e8 18	 sub	 rax, 24
  0023f	48 89 44 24 50	 mov	 QWORD PTR tv159[rsp], rax
$LN23@PyTuple_Ne:
  00244	48 8b 44 24 50	 mov	 rax, QWORD PTR tv159[rsp]
  00249	48 89 44 24 40	 mov	 QWORD PTR g$20370[rsp], rax
  0024e	48 8b 44 24 40	 mov	 rax, QWORD PTR g$20370[rsp]
  00253	48 83 78 10 fe	 cmp	 QWORD PTR [rax+16], -2
  00258	74 0c		 je	 SHORT $LN1@PyTuple_Ne
  0025a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@
  00261	e8 00 00 00 00	 call	 Py_FatalError
$LN1@PyTuple_Ne:
  00266	48 8b 44 24 40	 mov	 rax, QWORD PTR g$20370[rsp]
  0026b	48 c7 40 10 fd
	ff ff ff	 mov	 QWORD PTR [rax+16], -3
  00273	48 8b 44 24 40	 mov	 rax, QWORD PTR g$20370[rsp]
  00278	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR _PyGC_generation0
  0027f	48 89 08	 mov	 QWORD PTR [rax], rcx
  00282	48 8b 44 24 40	 mov	 rax, QWORD PTR g$20370[rsp]
  00287	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR _PyGC_generation0
  0028e	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00292	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  00296	48 8b 44 24 40	 mov	 rax, QWORD PTR g$20370[rsp]
  0029b	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0029f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR g$20370[rsp]
  002a4	48 89 08	 mov	 QWORD PTR [rax], rcx
  002a7	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyGC_generation0
  002ae	48 8b 4c 24 40	 mov	 rcx, QWORD PTR g$20370[rsp]
  002b3	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  002b7	33 c0		 xor	 eax, eax
  002b9	85 c0		 test	 eax, eax
  002bb	0f 85 40 ff ff
	ff		 jne	 $LN4@PyTuple_Ne
$LN5@PyTuple_Ne:
$end$20362:

; 128  : end:
; 129  :     return (PyObject *) op;

  002c1	48 8b 44 24 38	 mov	 rax, QWORD PTR op$[rsp]
$LN18@PyTuple_Ne:

; 130  : }

  002c6	48 83 c4 68	 add	 rsp, 104		; 00000068H
  002ca	c3		 ret	 0
PyTuple_New ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
EXTRN	_Py_RefTotal:QWORD
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN7
	DD	imagerel $LN7+132
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 6d		 jne	 SHORT $LN2@Py_IncRef
  00012	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0001a	4c 8b 4c 24 40	 mov	 r9, QWORD PTR op$[rsp]
  0001f	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_Guard
  00038	85 c0		 test	 eax, eax
  0003a	75 12		 jne	 SHORT $LN1@Py_IncRef
  0003c	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  00041	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00045	48 83 e0 20	 and	 rax, 32			; 00000020H
  00049	48 85 c0	 test	 rax, rax
  0004c	74 31		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;

  0004e	e8 00 00 00 00	 call	 _Py_PXCTX
  00053	85 c0		 test	 eax, eax
  00055	74 02		 je	 SHORT $LN5@Py_IncRef
  00057	eb 11		 jmp	 SHORT $LN6@Py_IncRef
$LN5@Py_IncRef:
  00059	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00060	48 ff c0	 inc	 rax
  00063	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN6@Py_IncRef:

; 907  :         (((PyObject*)(op))->ob_refcnt++);

  0006a	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  0006f	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00073	48 ff c0	 inc	 rax
  00076	48 8b 4c 24 40	 mov	 rcx, QWORD PTR op$[rsp]
  0007b	48 89 41 50	 mov	 QWORD PTR [rcx+80], rax
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  0007f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00083	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	PyTuple_Size
;	COMDAT pdata
; File c:\src\pyparallel\objects\tupleobject.c
pdata	SEGMENT
$pdata$PyTuple_Size DD imagerel $LN5
	DD	imagerel $LN5+75
	DD	imagerel $unwind$PyTuple_Size
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyTuple_Size DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyTuple_Size
_TEXT	SEGMENT
op$ = 48
PyTuple_Size PROC					; COMDAT

; 134  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 135  :     if (!PyTuple_Check(op)) {

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  0000e	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00012	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00018	25 00 00 00 04	 and	 eax, 67108864		; 04000000H
  0001d	85 c0		 test	 eax, eax
  0001f	75 1c		 jne	 SHORT $LN2@PyTuple_Si

; 136  :         PyErr_BadInternalCall();

  00021	ba 88 00 00 00	 mov	 edx, 136		; 00000088H
  00026	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@NPBNLKPK@?4?4?2Objects?2tupleobject?4c?$AA@
  0002d	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 137  :         return -1;

  00032	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1
  00039	eb 0b		 jmp	 SHORT $LN3@PyTuple_Si

; 138  :     }
; 139  :     else

  0003b	eb 09		 jmp	 SHORT $LN1@PyTuple_Si
$LN2@PyTuple_Si:

; 140  :         return Py_SIZE(op);

  0003d	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  00042	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
$LN1@PyTuple_Si:
$LN3@PyTuple_Si:

; 141  : }

  00046	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004a	c3		 ret	 0
PyTuple_Size ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BJ@KFCEHIN@tuple?5index?5out?5of?5range?$AA@ ; `string'
PUBLIC	PyTuple_GetItem
EXTRN	PyErr_SetString:PROC
EXTRN	PyExc_IndexError:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyTuple_GetItem DD imagerel $LN6
	DD	imagerel $LN6+126
	DD	imagerel $unwind$PyTuple_GetItem
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyTuple_GetItem DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT ??_C@_0BJ@KFCEHIN@tuple?5index?5out?5of?5range?$AA@
CONST	SEGMENT
??_C@_0BJ@KFCEHIN@tuple?5index?5out?5of?5range?$AA@ DB 'tuple index out o'
	DB	'f range', 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyTuple_GetItem
_TEXT	SEGMENT
op$ = 48
i$ = 56
PyTuple_GetItem PROC					; COMDAT

; 145  : {

$LN6:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 146  :     if (!PyTuple_Check(op)) {

  0000e	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  00013	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00017	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0001d	25 00 00 00 04	 and	 eax, 67108864		; 04000000H
  00022	85 c0		 test	 eax, eax
  00024	75 15		 jne	 SHORT $LN3@PyTuple_Ge

; 147  :         PyErr_BadInternalCall();

  00026	ba 93 00 00 00	 mov	 edx, 147		; 00000093H
  0002b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@NPBNLKPK@?4?4?2Objects?2tupleobject?4c?$AA@
  00032	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 148  :         return NULL;

  00037	33 c0		 xor	 eax, eax
  00039	eb 3e		 jmp	 SHORT $LN4@PyTuple_Ge
$LN3@PyTuple_Ge:

; 149  :     }
; 150  :     if (i < 0 || i >= Py_SIZE(op)) {

  0003b	48 83 7c 24 38
	00		 cmp	 QWORD PTR i$[rsp], 0
  00041	7c 10		 jl	 SHORT $LN1@PyTuple_Ge
  00043	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  00048	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0004c	48 39 44 24 38	 cmp	 QWORD PTR i$[rsp], rax
  00051	7c 17		 jl	 SHORT $LN2@PyTuple_Ge
$LN1@PyTuple_Ge:

; 151  :         PyErr_SetString(PyExc_IndexError, "tuple index out of range");

  00053	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@KFCEHIN@tuple?5index?5out?5of?5range?$AA@
  0005a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_IndexError
  00061	e8 00 00 00 00	 call	 PyErr_SetString

; 152  :         return NULL;

  00066	33 c0		 xor	 eax, eax
  00068	eb 0f		 jmp	 SHORT $LN4@PyTuple_Ge
$LN2@PyTuple_Ge:

; 153  :     }
; 154  :     return ((PyTupleObject *)op) -> ob_item[i];

  0006a	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  0006f	48 8b 4c 24 38	 mov	 rcx, QWORD PTR i$[rsp]
  00074	48 8b 44 c8 70	 mov	 rax, QWORD PTR [rax+rcx*8+112]
$LN4@PyTuple_Ge:

; 155  : }

  00079	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0007d	c3		 ret	 0
PyTuple_GetItem ENDP
_TEXT	ENDS
PUBLIC	PyTuple_GetItemAddr
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyTuple_GetItemAddr DD imagerel $LN6
	DD	imagerel $LN6+126
	DD	imagerel $unwind$PyTuple_GetItemAddr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyTuple_GetItemAddr DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyTuple_GetItemAddr
_TEXT	SEGMENT
op$ = 48
i$ = 56
PyTuple_GetItemAddr PROC				; COMDAT

; 159  : {

$LN6:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 160  :     if (!PyTuple_Check(op)) {

  0000e	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  00013	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00017	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0001d	25 00 00 00 04	 and	 eax, 67108864		; 04000000H
  00022	85 c0		 test	 eax, eax
  00024	75 15		 jne	 SHORT $LN3@PyTuple_Ge@2

; 161  :         PyErr_BadInternalCall();

  00026	ba a1 00 00 00	 mov	 edx, 161		; 000000a1H
  0002b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@NPBNLKPK@?4?4?2Objects?2tupleobject?4c?$AA@
  00032	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 162  :         return NULL;

  00037	33 c0		 xor	 eax, eax
  00039	eb 3e		 jmp	 SHORT $LN4@PyTuple_Ge@2
$LN3@PyTuple_Ge@2:

; 163  :     }
; 164  :     if (i < 0 || i >= Py_SIZE(op)) {

  0003b	48 83 7c 24 38
	00		 cmp	 QWORD PTR i$[rsp], 0
  00041	7c 10		 jl	 SHORT $LN1@PyTuple_Ge@2
  00043	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  00048	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0004c	48 39 44 24 38	 cmp	 QWORD PTR i$[rsp], rax
  00051	7c 17		 jl	 SHORT $LN2@PyTuple_Ge@2
$LN1@PyTuple_Ge@2:

; 165  :         PyErr_SetString(PyExc_IndexError, "tuple index out of range");

  00053	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@KFCEHIN@tuple?5index?5out?5of?5range?$AA@
  0005a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_IndexError
  00061	e8 00 00 00 00	 call	 PyErr_SetString

; 166  :         return NULL;

  00066	33 c0		 xor	 eax, eax
  00068	eb 0f		 jmp	 SHORT $LN4@PyTuple_Ge@2
$LN2@PyTuple_Ge@2:

; 167  :     }
; 168  :     return &(((PyTupleObject *)op)->ob_item[i]);

  0006a	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  0006f	48 8b 4c 24 38	 mov	 rcx, QWORD PTR i$[rsp]
  00074	48 8d 44 c8 70	 lea	 rax, QWORD PTR [rax+rcx*8+112]
$LN4@PyTuple_Ge@2:

; 169  : }

  00079	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0007d	c3		 ret	 0
PyTuple_GetItemAddr ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CE@DLLNLCNA@tuple?5assignment?5index?5out?5of?5ra@ ; `string'
PUBLIC	_Py_DecRef
PUBLIC	PyTuple_SetItem
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyTuple_SetItem DD imagerel $LN19
	DD	imagerel $LN19+257
	DD	imagerel $unwind$PyTuple_SetItem
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyTuple_SetItem DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT ??_C@_0CE@DLLNLCNA@tuple?5assignment?5index?5out?5of?5ra@
CONST	SEGMENT
??_C@_0CE@DLLNLCNA@tuple?5assignment?5index?5out?5of?5ra@ DB 'tuple assig'
	DB	'nment index out of range', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyTuple_SetItem
_TEXT	SEGMENT
p$ = 32
olditem$ = 40
op$ = 64
i$ = 72
newitem$ = 80
PyTuple_SetItem PROC					; COMDAT

; 173  : {

$LN19:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 174  :     register PyObject *olditem;
; 175  :     register PyObject **p;
; 176  :     if (!PyTuple_Check(op) || op->ob_refcnt != 1) {

  00013	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  00018	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0001c	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00022	25 00 00 00 04	 and	 eax, 67108864		; 04000000H
  00027	85 c0		 test	 eax, eax
  00029	74 0c		 je	 SHORT $LN15@PyTuple_Se
  0002b	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  00030	48 83 78 50 01	 cmp	 QWORD PTR [rax+80], 1
  00035	74 33		 je	 SHORT $LN16@PyTuple_Se
$LN15@PyTuple_Se:
$LN14@PyTuple_Se:

; 177  :         Py_XDECREF(newitem);

  00037	48 83 7c 24 50
	00		 cmp	 QWORD PTR newitem$[rsp], 0
  0003d	74 0a		 je	 SHORT $LN11@PyTuple_Se
  0003f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR newitem$[rsp]
  00044	e8 00 00 00 00	 call	 _Py_DecRef
$LN11@PyTuple_Se:
  00049	33 c0		 xor	 eax, eax
  0004b	85 c0		 test	 eax, eax
  0004d	75 e8		 jne	 SHORT $LN14@PyTuple_Se

; 178  :         PyErr_BadInternalCall();

  0004f	ba b2 00 00 00	 mov	 edx, 178		; 000000b2H
  00054	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@NPBNLKPK@?4?4?2Objects?2tupleobject?4c?$AA@
  0005b	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 179  :         return -1;

  00060	b8 ff ff ff ff	 mov	 eax, -1
  00065	e9 92 00 00 00	 jmp	 $LN17@PyTuple_Se
$LN16@PyTuple_Se:

; 180  :     }
; 181  :     if (i < 0 || i >= Py_SIZE(op)) {

  0006a	48 83 7c 24 48
	00		 cmp	 QWORD PTR i$[rsp], 0
  00070	7c 10		 jl	 SHORT $LN9@PyTuple_Se
  00072	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  00077	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0007b	48 39 44 24 48	 cmp	 QWORD PTR i$[rsp], rax
  00080	7c 32		 jl	 SHORT $LN10@PyTuple_Se
$LN9@PyTuple_Se:
$LN8@PyTuple_Se:

; 182  :         Py_XDECREF(newitem);

  00082	48 83 7c 24 50
	00		 cmp	 QWORD PTR newitem$[rsp], 0
  00088	74 0a		 je	 SHORT $LN5@PyTuple_Se
  0008a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR newitem$[rsp]
  0008f	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@PyTuple_Se:
  00094	33 c0		 xor	 eax, eax
  00096	85 c0		 test	 eax, eax
  00098	75 e8		 jne	 SHORT $LN8@PyTuple_Se

; 183  :         PyErr_SetString(PyExc_IndexError,
; 184  :                         "tuple assignment index out of range");

  0009a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@DLLNLCNA@tuple?5assignment?5index?5out?5of?5ra@
  000a1	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_IndexError
  000a8	e8 00 00 00 00	 call	 PyErr_SetString

; 185  :         return -1;

  000ad	b8 ff ff ff ff	 mov	 eax, -1
  000b2	eb 48		 jmp	 SHORT $LN17@PyTuple_Se
$LN10@PyTuple_Se:

; 186  :     }
; 187  :     p = ((PyTupleObject *)op) -> ob_item + i;

  000b4	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  000b9	48 8b 4c 24 48	 mov	 rcx, QWORD PTR i$[rsp]
  000be	48 8d 44 c8 70	 lea	 rax, QWORD PTR [rax+rcx*8+112]
  000c3	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax

; 188  :     olditem = *p;

  000c8	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  000cd	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000d0	48 89 44 24 28	 mov	 QWORD PTR olditem$[rsp], rax

; 189  :     *p = newitem;

  000d5	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  000da	48 8b 4c 24 50	 mov	 rcx, QWORD PTR newitem$[rsp]
  000df	48 89 08	 mov	 QWORD PTR [rax], rcx
$LN4@PyTuple_Se:

; 190  :     Py_XDECREF(olditem);

  000e2	48 83 7c 24 28
	00		 cmp	 QWORD PTR olditem$[rsp], 0
  000e8	74 0a		 je	 SHORT $LN1@PyTuple_Se
  000ea	48 8b 4c 24 28	 mov	 rcx, QWORD PTR olditem$[rsp]
  000ef	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@PyTuple_Se:
  000f4	33 c0		 xor	 eax, eax
  000f6	85 c0		 test	 eax, eax
  000f8	75 e8		 jne	 SHORT $LN4@PyTuple_Se

; 191  :     return 0;

  000fa	33 c0		 xor	 eax, eax
$LN17@PyTuple_Se:

; 192  : }

  000fc	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00100	c3		 ret	 0
PyTuple_SetItem ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
EXTRN	_Py_Dealloc:PROC
EXTRN	_Py_NegativeRefcount:PROC
EXTRN	Px_DecRef:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN13
	DD	imagerel $LN13+257
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
tv81 = 48
op$ = 80
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN13:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	0f 85 e6 00 00
	00		 jne	 $LN8@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00016	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0001b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0001f	48 83 e0 20	 and	 rax, 32			; 00000020H
  00023	48 85 c0	 test	 rax, rax
  00026	75 14		 jne	 SHORT $LN6@Py_DecRef
  00028	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0002d	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00031	48 25 80 00 00
	00		 and	 rax, 128		; 00000080H
  00037	48 85 c0	 test	 rax, rax
  0003a	74 0f		 je	 SHORT $LN7@Py_DecRef
$LN6@Py_DecRef:

; 926  :             Px_DECREF(op);

  0003c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  00041	e8 00 00 00 00	 call	 Px_DecRef
  00046	e9 b1 00 00 00	 jmp	 $LN5@Py_DecRef
$LN7@Py_DecRef:

; 927  :         else if (!Px_ISPX(op)) {

  0004b	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00050	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00054	48 83 e0 02	 and	 rax, 2
  00058	48 85 c0	 test	 rax, rax
  0005b	0f 85 9b 00 00
	00		 jne	 $LN4@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;

  00061	e8 00 00 00 00	 call	 _Py_PXCTX
  00066	85 c0		 test	 eax, eax
  00068	74 02		 je	 SHORT $LN11@Py_DecRef
  0006a	eb 11		 jmp	 SHORT $LN12@Py_DecRef
$LN11@Py_DecRef:
  0006c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00073	48 ff c8	 dec	 rax
  00076	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN12@Py_DecRef:

; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  0007d	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00082	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00086	48 ff c8	 dec	 rax
  00089	48 89 44 24 30	 mov	 QWORD PTR tv81[rsp], rax
  0008e	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00093	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv81[rsp]
  00098	48 89 48 50	 mov	 QWORD PTR [rax+80], rcx
  0009c	48 83 7c 24 30
	00		 cmp	 QWORD PTR tv81[rsp], 0
  000a2	74 4e		 je	 SHORT $LN3@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);

  000a4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000ac	4c 8b 4c 24 50	 mov	 r9, QWORD PTR op$[rsp]
  000b1	41 b8 a2 03 00
	00		 mov	 r8d, 930		; 000003a2H
  000b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000c5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ca	85 c0		 test	 eax, eax
  000cc	75 22		 jne	 SHORT $LN2@Py_DecRef
  000ce	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  000d3	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000d8	7d 16		 jge	 SHORT $LN2@Py_DecRef
  000da	4c 8b 44 24 50	 mov	 r8, QWORD PTR op$[rsp]
  000df	ba a2 03 00 00	 mov	 edx, 930		; 000003a2H
  000e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000eb	e8 00 00 00 00	 call	 _Py_NegativeRefcount
$LN2@Py_DecRef:

; 931  :             } else

  000f0	eb 0a		 jmp	 SHORT $LN1@Py_DecRef
$LN3@Py_DecRef:

; 932  :                 _Py_Dealloc((PyObject *)(op));

  000f2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  000f7	e8 00 00 00 00	 call	 _Py_Dealloc
$LN1@Py_DecRef:
$LN4@Py_DecRef:
$LN5@Py_DecRef:
$LN8@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  000fc	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00100	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_1EM@HFMJMDDM@?$AAg?$AA?9?$AA?$DO?$AAg?$AAc?$AA?4?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AAG?$AAC?$AA_?$AAR?$AAE?$AAF?$AAS?$AA_?$AAU?$AAN?$AAT?$AAR@ ; `string'
PUBLIC	??_C@_1DC@DKKPAKMP@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAt?$AAu?$AAp?$AAl?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@ ; `string'
PUBLIC	??_C@_0BG@JFPMCBCL@_PyTuple_MaybeUntrack?$AA@	; `string'
PUBLIC	_PyTuple_MaybeUntrack
EXTRN	__imp__wassert:PROC
;	COMDAT pdata
; File c:\src\pyparallel\objects\tupleobject.c
pdata	SEGMENT
$pdata$_PyTuple_MaybeUntrack DD imagerel $LN43
	DD	imagerel $LN43+1110
	DD	imagerel $unwind$_PyTuple_MaybeUntrack
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyTuple_MaybeUntrack DD 020c01H
	DD	015010cH
xdata	ENDS
;	COMDAT ??_C@_1EM@HFMJMDDM@?$AAg?$AA?9?$AA?$DO?$AAg?$AAc?$AA?4?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AAG?$AAC?$AA_?$AAR?$AAE?$AAF?$AAS?$AA_?$AAU?$AAN?$AAT?$AAR@
CONST	SEGMENT
??_C@_1EM@HFMJMDDM@?$AAg?$AA?9?$AA?$DO?$AAg?$AAc?$AA?4?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AAG?$AAC?$AA_?$AAR?$AAE?$AAF?$AAS?$AA_?$AAU?$AAN?$AAT?$AAR@ DB 'g'
	DB	00H, '-', 00H, '>', 00H, 'g', 00H, 'c', 00H, '.', 00H, 'g', 00H
	DB	'c', 00H, '_', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 's', 00H, ' '
	DB	00H, '!', 00H, '=', 00H, ' ', 00H, '_', 00H, 'P', 00H, 'y', 00H
	DB	'G', 00H, 'C', 00H, '_', 00H, 'R', 00H, 'E', 00H, 'F', 00H, 'S'
	DB	00H, '_', 00H, 'U', 00H, 'N', 00H, 'T', 00H, 'R', 00H, 'A', 00H
	DB	'C', 00H, 'K', 00H, 'E', 00H, 'D', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DC@DKKPAKMP@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAt?$AAu?$AAp?$AAl?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
CONST	SEGMENT
??_C@_1DC@DKKPAKMP@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAt?$AAu?$AAp?$AAl?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@ DB '.'
	DB	00H, '.', 00H, '\', 00H, 'O', 00H, 'b', 00H, 'j', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 's', 00H, '\', 00H, 't', 00H, 'u', 00H, 'p'
	DB	00H, 'l', 00H, 'e', 00H, 'o', 00H, 'b', 00H, 'j', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, '.', 00H, 'c', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@JFPMCBCL@_PyTuple_MaybeUntrack?$AA@
CONST	SEGMENT
??_C@_0BG@JFPMCBCL@_PyTuple_MaybeUntrack?$AA@ DB '_PyTuple_MaybeUntrack', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PyTuple_MaybeUntrack
_TEXT	SEGMENT
n$ = 48
i$ = 56
t$ = 64
elt$20460 = 72
g$20475 = 80
tv85 = 88
tv80 = 96
tv83 = 104
tv184 = 108
tv157 = 112
tv145 = 116
tv143 = 120
tv155 = 124
tv179 = 128
tv174 = 136
tv177 = 144
tv182 = 148
tv201 = 152
op$ = 176
_PyTuple_MaybeUntrack PROC				; COMDAT

; 196  : {

$LN43:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 197  :     PyTupleObject *t;
; 198  :     Py_ssize_t i, n;
; 199  : 
; 200  :     if (!PyTuple_CheckExact(op) || !_PyObject_GC_IS_TRACKED(op))

  0000c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyTuple_Type
  00013	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR op$[rsp]
  0001b	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0001f	0f 85 ad 00 00
	00		 jne	 $LN10@PyTuple_Ma
  00025	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0002d	4c 8b 8c 24 b0
	00 00 00	 mov	 r9, QWORD PTR op$[rsp]
  00035	41 b8 c8 00 00
	00		 mov	 r8d, 200		; 000000c8H
  0003b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@NPBNLKPK@?4?4?2Objects?2tupleobject?4c?$AA@
  00042	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@JFPMCBCL@_PyTuple_MaybeUntrack?$AA@
  00049	e8 00 00 00 00	 call	 _PyParallel_Guard
  0004e	85 c0		 test	 eax, eax
  00050	74 0a		 je	 SHORT $LN18@PyTuple_Ma
  00052	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR tv85[rsp], 0
  0005a	eb 6f		 jmp	 SHORT $LN19@PyTuple_Ma
$LN18@PyTuple_Ma:
  0005c	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00064	4c 8b 8c 24 b0
	00 00 00	 mov	 r9, QWORD PTR op$[rsp]
  0006c	41 b8 c8 00 00
	00		 mov	 r8d, 200		; 000000c8H
  00072	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@NPBNLKPK@?4?4?2Objects?2tupleobject?4c?$AA@
  00079	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@JFPMCBCL@_PyTuple_MaybeUntrack?$AA@
  00080	e8 00 00 00 00	 call	 _PyParallel_Guard
  00085	85 c0		 test	 eax, eax
  00087	74 0b		 je	 SHORT $LN14@PyTuple_Ma
  00089	48 c7 44 24 60
	00 00 00 00	 mov	 QWORD PTR tv80[rsp], 0
  00092	eb 11		 jmp	 SHORT $LN15@PyTuple_Ma
$LN14@PyTuple_Ma:
  00094	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR op$[rsp]
  0009c	48 83 e8 18	 sub	 rax, 24
  000a0	48 89 44 24 60	 mov	 QWORD PTR tv80[rsp], rax
$LN15@PyTuple_Ma:
  000a5	48 8b 44 24 60	 mov	 rax, QWORD PTR tv80[rsp]
  000aa	48 83 78 10 fe	 cmp	 QWORD PTR [rax+16], -2
  000af	74 0a		 je	 SHORT $LN16@PyTuple_Ma
  000b1	c7 44 24 68 01
	00 00 00	 mov	 DWORD PTR tv83[rsp], 1
  000b9	eb 08		 jmp	 SHORT $LN17@PyTuple_Ma
$LN16@PyTuple_Ma:
  000bb	c7 44 24 68 00
	00 00 00	 mov	 DWORD PTR tv83[rsp], 0
$LN17@PyTuple_Ma:
  000c3	8b 44 24 68	 mov	 eax, DWORD PTR tv83[rsp]
  000c7	89 44 24 58	 mov	 DWORD PTR tv85[rsp], eax
$LN19@PyTuple_Ma:
  000cb	83 7c 24 58 00	 cmp	 DWORD PTR tv85[rsp], 0
  000d0	75 05		 jne	 SHORT $LN11@PyTuple_Ma
$LN10@PyTuple_Ma:

; 201  :         return;

  000d2	e9 77 03 00 00	 jmp	 $LN12@PyTuple_Ma
$LN11@PyTuple_Ma:

; 202  :     t = (PyTupleObject *) op;

  000d7	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR op$[rsp]
  000df	48 89 44 24 40	 mov	 QWORD PTR t$[rsp], rax

; 203  :     n = Py_SIZE(t);

  000e4	48 8b 44 24 40	 mov	 rax, QWORD PTR t$[rsp]
  000e9	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000ed	48 89 44 24 30	 mov	 QWORD PTR n$[rsp], rax

; 204  :     for (i = 0; i < n; i++) {

  000f2	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  000fb	eb 0d		 jmp	 SHORT $LN9@PyTuple_Ma
$LN8@PyTuple_Ma:
  000fd	48 8b 44 24 38	 mov	 rax, QWORD PTR i$[rsp]
  00102	48 ff c0	 inc	 rax
  00105	48 89 44 24 38	 mov	 QWORD PTR i$[rsp], rax
$LN9@PyTuple_Ma:
  0010a	48 8b 44 24 30	 mov	 rax, QWORD PTR n$[rsp]
  0010f	48 39 44 24 38	 cmp	 QWORD PTR i$[rsp], rax
  00114	0f 8d 33 02 00
	00		 jge	 $LN7@PyTuple_Ma

; 205  :         PyObject *elt = PyTuple_GET_ITEM(t, i);

  0011a	48 8b 44 24 40	 mov	 rax, QWORD PTR t$[rsp]
  0011f	48 8b 4c 24 38	 mov	 rcx, QWORD PTR i$[rsp]
  00124	48 8b 44 c8 70	 mov	 rax, QWORD PTR [rax+rcx*8+112]
  00129	48 89 44 24 48	 mov	 QWORD PTR elt$20460[rsp], rax

; 206  :         /* Tuple with NULL elements aren't
; 207  :            fully constructed, don't untrack
; 208  :            them yet. */
; 209  :         if (!elt ||
; 210  :             _PyObject_GC_MAY_BE_TRACKED(elt))

  0012e	48 83 7c 24 48
	00		 cmp	 QWORD PTR elt$20460[rsp], 0
  00134	0f 84 09 02 00
	00		 je	 $LN5@PyTuple_Ma
  0013a	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00142	4c 8b 4c 24 48	 mov	 r9, QWORD PTR elt$20460[rsp]
  00147	41 b8 d2 00 00
	00		 mov	 r8d, 210		; 000000d2H
  0014d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@NPBNLKPK@?4?4?2Objects?2tupleobject?4c?$AA@
  00154	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@JFPMCBCL@_PyTuple_MaybeUntrack?$AA@
  0015b	e8 00 00 00 00	 call	 _PyParallel_Guard
  00160	85 c0		 test	 eax, eax
  00162	74 0d		 je	 SHORT $LN38@PyTuple_Ma
  00164	c7 44 24 6c 00
	00 00 00	 mov	 DWORD PTR tv184[rsp], 0
  0016c	e9 cb 01 00 00	 jmp	 $LN39@PyTuple_Ma
$LN38@PyTuple_Ma:
  00171	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00179	4c 8b 4c 24 48	 mov	 r9, QWORD PTR elt$20460[rsp]
  0017e	41 b8 d2 00 00
	00		 mov	 r8d, 210		; 000000d2H
  00184	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@NPBNLKPK@?4?4?2Objects?2tupleobject?4c?$AA@
  0018b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@JFPMCBCL@_PyTuple_MaybeUntrack?$AA@
  00192	e8 00 00 00 00	 call	 _PyParallel_Guard
  00197	85 c0		 test	 eax, eax
  00199	74 0d		 je	 SHORT $LN27@PyTuple_Ma
  0019b	c7 44 24 70 00
	00 00 00	 mov	 DWORD PTR tv157[rsp], 0
  001a3	e9 91 00 00 00	 jmp	 $LN28@PyTuple_Ma
$LN27@PyTuple_Ma:
  001a8	e8 00 00 00 00	 call	 _Py_PXCTX
  001ad	85 c0		 test	 eax, eax
  001af	74 0a		 je	 SHORT $LN22@PyTuple_Ma
  001b1	c7 44 24 74 00
	00 00 00	 mov	 DWORD PTR tv145[rsp], 0
  001b9	eb 32		 jmp	 SHORT $LN23@PyTuple_Ma
$LN22@PyTuple_Ma:
  001bb	48 8b 44 24 48	 mov	 rax, QWORD PTR elt$20460[rsp]
  001c0	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  001c4	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  001ca	25 00 40 00 00	 and	 eax, 16384		; 00004000H
  001cf	85 c0		 test	 eax, eax
  001d1	74 0a		 je	 SHORT $LN20@PyTuple_Ma
  001d3	c7 44 24 78 01
	00 00 00	 mov	 DWORD PTR tv143[rsp], 1
  001db	eb 08		 jmp	 SHORT $LN21@PyTuple_Ma
$LN20@PyTuple_Ma:
  001dd	c7 44 24 78 00
	00 00 00	 mov	 DWORD PTR tv143[rsp], 0
$LN21@PyTuple_Ma:
  001e5	8b 44 24 78	 mov	 eax, DWORD PTR tv143[rsp]
  001e9	89 44 24 74	 mov	 DWORD PTR tv145[rsp], eax
$LN23@PyTuple_Ma:
  001ed	83 7c 24 74 00	 cmp	 DWORD PTR tv145[rsp], 0
  001f2	74 35		 je	 SHORT $LN25@PyTuple_Ma
  001f4	48 8b 44 24 48	 mov	 rax, QWORD PTR elt$20460[rsp]
  001f9	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  001fd	48 83 b8 a0 01
	00 00 00	 cmp	 QWORD PTR [rax+416], 0
  00205	74 18		 je	 SHORT $LN24@PyTuple_Ma
  00207	48 8b 44 24 48	 mov	 rax, QWORD PTR elt$20460[rsp]
  0020c	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00210	48 8b 4c 24 48	 mov	 rcx, QWORD PTR elt$20460[rsp]
  00215	ff 90 a0 01 00
	00		 call	 QWORD PTR [rax+416]
  0021b	85 c0		 test	 eax, eax
  0021d	74 0a		 je	 SHORT $LN25@PyTuple_Ma
$LN24@PyTuple_Ma:
  0021f	c7 44 24 7c 01
	00 00 00	 mov	 DWORD PTR tv155[rsp], 1
  00227	eb 08		 jmp	 SHORT $LN26@PyTuple_Ma
$LN25@PyTuple_Ma:
  00229	c7 44 24 7c 00
	00 00 00	 mov	 DWORD PTR tv155[rsp], 0
$LN26@PyTuple_Ma:
  00231	8b 44 24 7c	 mov	 eax, DWORD PTR tv155[rsp]
  00235	89 44 24 70	 mov	 DWORD PTR tv157[rsp], eax
$LN28@PyTuple_Ma:
  00239	83 7c 24 70 00	 cmp	 DWORD PTR tv157[rsp], 0
  0023e	0f 84 e2 00 00
	00		 je	 $LN36@PyTuple_Ma
  00244	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyTuple_Type
  0024b	48 8b 4c 24 48	 mov	 rcx, QWORD PTR elt$20460[rsp]
  00250	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00254	0f 85 bf 00 00
	00		 jne	 $LN35@PyTuple_Ma
  0025a	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00262	4c 8b 4c 24 48	 mov	 r9, QWORD PTR elt$20460[rsp]
  00267	41 b8 d2 00 00
	00		 mov	 r8d, 210		; 000000d2H
  0026d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@NPBNLKPK@?4?4?2Objects?2tupleobject?4c?$AA@
  00274	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@JFPMCBCL@_PyTuple_MaybeUntrack?$AA@
  0027b	e8 00 00 00 00	 call	 _PyParallel_Guard
  00280	85 c0		 test	 eax, eax
  00282	74 0d		 je	 SHORT $LN33@PyTuple_Ma
  00284	c7 84 24 80 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv179[rsp], 0
  0028f	eb 7e		 jmp	 SHORT $LN34@PyTuple_Ma
$LN33@PyTuple_Ma:
  00291	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00299	4c 8b 4c 24 48	 mov	 r9, QWORD PTR elt$20460[rsp]
  0029e	41 b8 d2 00 00
	00		 mov	 r8d, 210		; 000000d2H
  002a4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@NPBNLKPK@?4?4?2Objects?2tupleobject?4c?$AA@
  002ab	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@JFPMCBCL@_PyTuple_MaybeUntrack?$AA@
  002b2	e8 00 00 00 00	 call	 _PyParallel_Guard
  002b7	85 c0		 test	 eax, eax
  002b9	74 0e		 je	 SHORT $LN29@PyTuple_Ma
  002bb	48 c7 84 24 88
	00 00 00 00 00
	00 00		 mov	 QWORD PTR tv174[rsp], 0
  002c7	eb 11		 jmp	 SHORT $LN30@PyTuple_Ma
$LN29@PyTuple_Ma:
  002c9	48 8b 44 24 48	 mov	 rax, QWORD PTR elt$20460[rsp]
  002ce	48 83 e8 18	 sub	 rax, 24
  002d2	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv174[rsp], rax
$LN30@PyTuple_Ma:
  002da	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR tv174[rsp]
  002e2	48 83 78 10 fe	 cmp	 QWORD PTR [rax+16], -2
  002e7	74 0d		 je	 SHORT $LN31@PyTuple_Ma
  002e9	c7 84 24 90 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv177[rsp], 1
  002f4	eb 0b		 jmp	 SHORT $LN32@PyTuple_Ma
$LN31@PyTuple_Ma:
  002f6	c7 84 24 90 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv177[rsp], 0
$LN32@PyTuple_Ma:
  00301	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR tv177[rsp]
  00308	89 84 24 80 00
	00 00		 mov	 DWORD PTR tv179[rsp], eax
$LN34@PyTuple_Ma:
  0030f	83 bc 24 80 00
	00 00 00	 cmp	 DWORD PTR tv179[rsp], 0
  00317	74 0d		 je	 SHORT $LN36@PyTuple_Ma
$LN35@PyTuple_Ma:
  00319	c7 84 24 94 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv182[rsp], 1
  00324	eb 0b		 jmp	 SHORT $LN37@PyTuple_Ma
$LN36@PyTuple_Ma:
  00326	c7 84 24 94 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv182[rsp], 0
$LN37@PyTuple_Ma:
  00331	8b 84 24 94 00
	00 00		 mov	 eax, DWORD PTR tv182[rsp]
  00338	89 44 24 6c	 mov	 DWORD PTR tv184[rsp], eax
$LN39@PyTuple_Ma:
  0033c	83 7c 24 6c 00	 cmp	 DWORD PTR tv184[rsp], 0
  00341	74 05		 je	 SHORT $LN6@PyTuple_Ma
$LN5@PyTuple_Ma:

; 211  :             return;

  00343	e9 06 01 00 00	 jmp	 $LN12@PyTuple_Ma
$LN6@PyTuple_Ma:

; 212  :     }

  00348	e9 b0 fd ff ff	 jmp	 $LN8@PyTuple_Ma
$LN7@PyTuple_Ma:

; 213  : #ifdef SHOW_TRACK_COUNT
; 214  :     count_tracked--;
; 215  :     count_untracked++;
; 216  : #endif
; 217  :     _PyObject_GC_UNTRACK(op);

  0034d	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00355	4c 8b 8c 24 b0
	00 00 00	 mov	 r9, QWORD PTR op$[rsp]
  0035d	41 b8 d9 00 00
	00		 mov	 r8d, 217		; 000000d9H
  00363	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@NPBNLKPK@?4?4?2Objects?2tupleobject?4c?$AA@
  0036a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@JFPMCBCL@_PyTuple_MaybeUntrack?$AA@
  00371	e8 00 00 00 00	 call	 _PyParallel_Guard
  00376	85 c0		 test	 eax, eax
  00378	0f 85 d0 00 00
	00		 jne	 $LN4@PyTuple_Ma
$LN3@PyTuple_Ma:
  0037e	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00386	4c 8b 8c 24 b0
	00 00 00	 mov	 r9, QWORD PTR op$[rsp]
  0038e	41 b8 d9 00 00
	00		 mov	 r8d, 217		; 000000d9H
  00394	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@NPBNLKPK@?4?4?2Objects?2tupleobject?4c?$AA@
  0039b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@JFPMCBCL@_PyTuple_MaybeUntrack?$AA@
  003a2	e8 00 00 00 00	 call	 _PyParallel_Guard
  003a7	85 c0		 test	 eax, eax
  003a9	74 0e		 je	 SHORT $LN40@PyTuple_Ma
  003ab	48 c7 84 24 98
	00 00 00 00 00
	00 00		 mov	 QWORD PTR tv201[rsp], 0
  003b7	eb 14		 jmp	 SHORT $LN41@PyTuple_Ma
$LN40@PyTuple_Ma:
  003b9	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR op$[rsp]
  003c1	48 83 e8 18	 sub	 rax, 24
  003c5	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR tv201[rsp], rax
$LN41@PyTuple_Ma:
  003cd	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR tv201[rsp]
  003d5	48 89 44 24 50	 mov	 QWORD PTR g$20475[rsp], rax
  003da	48 8b 44 24 50	 mov	 rax, QWORD PTR g$20475[rsp]
  003df	48 83 78 10 fe	 cmp	 QWORD PTR [rax+16], -2
  003e4	75 1c		 jne	 SHORT $LN42@PyTuple_Ma
  003e6	41 b8 d9 00 00
	00		 mov	 r8d, 217		; 000000d9H
  003ec	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DC@DKKPAKMP@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAt?$AAu?$AAp?$AAl?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  003f3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EM@HFMJMDDM@?$AAg?$AA?9?$AA?$DO?$AAg?$AAc?$AA?4?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AAG?$AAC?$AA_?$AAR?$AAE?$AAF?$AAS?$AA_?$AAU?$AAN?$AAT?$AAR@
  003fa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00400	33 c0		 xor	 eax, eax
$LN42@PyTuple_Ma:
  00402	48 8b 44 24 50	 mov	 rax, QWORD PTR g$20475[rsp]
  00407	48 c7 40 10 fe
	ff ff ff	 mov	 QWORD PTR [rax+16], -2
  0040f	48 8b 44 24 50	 mov	 rax, QWORD PTR g$20475[rsp]
  00414	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00418	48 8b 4c 24 50	 mov	 rcx, QWORD PTR g$20475[rsp]
  0041d	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00420	48 89 08	 mov	 QWORD PTR [rax], rcx
  00423	48 8b 44 24 50	 mov	 rax, QWORD PTR g$20475[rsp]
  00428	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0042b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR g$20475[rsp]
  00430	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00434	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  00438	48 8b 44 24 50	 mov	 rax, QWORD PTR g$20475[rsp]
  0043d	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
  00444	33 c0		 xor	 eax, eax
  00446	85 c0		 test	 eax, eax
  00448	0f 85 30 ff ff
	ff		 jne	 $LN3@PyTuple_Ma
$LN4@PyTuple_Ma:
$LN12@PyTuple_Ma:

; 218  : }

  0044e	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  00455	c3		 ret	 0
_PyTuple_MaybeUntrack ENDP
_TEXT	ENDS
PUBLIC	PyTuple_Pack
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyTuple_Pack DD imagerel $LN7
	DD	imagerel $LN7+198
	DD	imagerel $unwind$PyTuple_Pack
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyTuple_Pack DD 011801H
	DD	0a218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyTuple_Pack
_TEXT	SEGMENT
i$ = 32
vargs$ = 40
items$ = 48
result$ = 56
o$ = 64
n$ = 96
PyTuple_Pack PROC					; COMDAT

; 222  : {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 223  :     Py_ssize_t i;
; 224  :     PyObject *o;
; 225  :     PyObject *result;
; 226  :     PyObject **items;
; 227  :     va_list vargs;
; 228  : 
; 229  :     va_start(vargs, n);

  00018	48 8d 44 24 68	 lea	 rax, QWORD PTR n$[rsp+8]
  0001d	48 89 44 24 28	 mov	 QWORD PTR vargs$[rsp], rax

; 230  :     result = PyTuple_New(n);

  00022	48 8b 4c 24 60	 mov	 rcx, QWORD PTR n$[rsp]
  00027	e8 00 00 00 00	 call	 PyTuple_New
  0002c	48 89 44 24 38	 mov	 QWORD PTR result$[rsp], rax

; 231  :     if (result == NULL) {

  00031	48 83 7c 24 38
	00		 cmp	 QWORD PTR result$[rsp], 0
  00037	75 0d		 jne	 SHORT $LN4@PyTuple_Pa

; 232  :         va_end(vargs);

  00039	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR vargs$[rsp], 0

; 233  :         return NULL;

  00042	33 c0		 xor	 eax, eax
  00044	eb 7b		 jmp	 SHORT $LN5@PyTuple_Pa
$LN4@PyTuple_Pa:

; 234  :     }
; 235  :     items = ((PyTupleObject *)result)->ob_item;

  00046	48 8b 44 24 38	 mov	 rax, QWORD PTR result$[rsp]
  0004b	48 83 c0 70	 add	 rax, 112		; 00000070H
  0004f	48 89 44 24 30	 mov	 QWORD PTR items$[rsp], rax

; 236  :     for (i = 0; i < n; i++) {

  00054	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  0005d	eb 0d		 jmp	 SHORT $LN3@PyTuple_Pa
$LN2@PyTuple_Pa:
  0005f	48 8b 44 24 20	 mov	 rax, QWORD PTR i$[rsp]
  00064	48 ff c0	 inc	 rax
  00067	48 89 44 24 20	 mov	 QWORD PTR i$[rsp], rax
$LN3@PyTuple_Pa:
  0006c	48 8b 44 24 60	 mov	 rax, QWORD PTR n$[rsp]
  00071	48 39 44 24 20	 cmp	 QWORD PTR i$[rsp], rax
  00076	7d 3b		 jge	 SHORT $LN1@PyTuple_Pa

; 237  :         o = va_arg(vargs, PyObject *);

  00078	48 8b 44 24 28	 mov	 rax, QWORD PTR vargs$[rsp]
  0007d	48 83 c0 08	 add	 rax, 8
  00081	48 89 44 24 28	 mov	 QWORD PTR vargs$[rsp], rax
  00086	48 8b 44 24 28	 mov	 rax, QWORD PTR vargs$[rsp]
  0008b	48 8b 40 f8	 mov	 rax, QWORD PTR [rax-8]
  0008f	48 89 44 24 40	 mov	 QWORD PTR o$[rsp], rax

; 238  :         Py_INCREF(o);

  00094	48 8b 4c 24 40	 mov	 rcx, QWORD PTR o$[rsp]
  00099	e8 00 00 00 00	 call	 _Py_IncRef

; 239  :         items[i] = o;

  0009e	48 8b 44 24 30	 mov	 rax, QWORD PTR items$[rsp]
  000a3	48 8b 4c 24 20	 mov	 rcx, QWORD PTR i$[rsp]
  000a8	48 8b 54 24 40	 mov	 rdx, QWORD PTR o$[rsp]
  000ad	48 89 14 c8	 mov	 QWORD PTR [rax+rcx*8], rdx

; 240  :     }

  000b1	eb ac		 jmp	 SHORT $LN2@PyTuple_Pa
$LN1@PyTuple_Pa:

; 241  :     va_end(vargs);

  000b3	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR vargs$[rsp], 0

; 242  :     return result;

  000bc	48 8b 44 24 38	 mov	 rax, QWORD PTR result$[rsp]
$LN5@PyTuple_Pa:

; 243  : }

  000c1	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000c5	c3		 ret	 0
PyTuple_Pack ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@HLMMFMBP@tupledealloc?$AA@		; `string'
EXTRN	_PyTrash_thread_deposit_object:PROC
EXTRN	_PyTrash_thread_destroy_chain:PROC
EXTRN	PyThreadState_Get:PROC
EXTRN	PyObject_GC_UnTrack:PROC
EXTRN	_PyParallel_ContextGuardFailure:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$tupledealloc DD imagerel tupledealloc
	DD	imagerel tupledealloc+443
	DD	imagerel $unwind$tupledealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$tupledealloc DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0N@HLMMFMBP@tupledealloc?$AA@
CONST	SEGMENT
??_C@_0N@HLMMFMBP@tupledealloc?$AA@ DB 'tupledealloc', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT tupledealloc
_TEXT	SEGMENT
i$ = 32
len$ = 40
_tstate$20523 = 48
op$ = 80
tupledealloc PROC					; COMDAT

; 250  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 251  :     register Py_ssize_t i;
; 252  :     register Py_ssize_t len =  Py_SIZE(op);

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0000e	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00012	48 89 44 24 28	 mov	 QWORD PTR len$[rsp], rax

; 253  :     Py_GUARD

  00017	e8 00 00 00 00	 call	 _Py_PXCTX
  0001c	85 c0		 test	 eax, eax
  0001e	74 1c		 je	 SHORT $LN15@tupledeall
  00020	45 33 c9	 xor	 r9d, r9d
  00023	41 b8 fd 00 00
	00		 mov	 r8d, 253		; 000000fdH
  00029	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@NPBNLKPK@?4?4?2Objects?2tupleobject?4c?$AA@
  00030	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@HLMMFMBP@tupledealloc?$AA@
  00037	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN15@tupledeall:

; 254  :     PyObject_GC_UnTrack(op);

  0003c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  00041	e8 00 00 00 00	 call	 PyObject_GC_UnTrack
$LN14@tupledeall:

; 255  :     Py_TRASHCAN_SAFE_BEGIN(op)

  00046	e8 00 00 00 00	 call	 PyThreadState_Get
  0004b	48 89 44 24 30	 mov	 QWORD PTR _tstate$20523[rsp], rax
  00050	48 8b 44 24 30	 mov	 rax, QWORD PTR _tstate$20523[rsp]
  00055	83 b8 94 00 00
	00 32		 cmp	 DWORD PTR [rax+148], 50	; 00000032H
  0005c	0f 8d 40 01 00
	00		 jge	 $LN11@tupledeall
  00062	48 8b 44 24 30	 mov	 rax, QWORD PTR _tstate$20523[rsp]
  00067	8b 80 94 00 00
	00		 mov	 eax, DWORD PTR [rax+148]
  0006d	ff c0		 inc	 eax
  0006f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _tstate$20523[rsp]
  00074	89 81 94 00 00
	00		 mov	 DWORD PTR [rcx+148], eax

; 256  :     if (len > 0) {

  0007a	48 83 7c 24 28
	00		 cmp	 QWORD PTR len$[rsp], 0
  00080	0f 8e cc 00 00
	00		 jle	 $LN10@tupledeall

; 257  :         i = len;

  00086	48 8b 44 24 28	 mov	 rax, QWORD PTR len$[rsp]
  0008b	48 89 44 24 20	 mov	 QWORD PTR i$[rsp], rax
$LN9@tupledeall:

; 258  :         while (--i >= 0)

  00090	48 8b 44 24 20	 mov	 rax, QWORD PTR i$[rsp]
  00095	48 ff c8	 dec	 rax
  00098	48 89 44 24 20	 mov	 QWORD PTR i$[rsp], rax
  0009d	48 83 7c 24 20
	00		 cmp	 QWORD PTR i$[rsp], 0
  000a3	7c 2e		 jl	 SHORT $LN8@tupledeall
$LN7@tupledeall:

; 259  :             Py_XDECREF(op->ob_item[i]);

  000a5	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  000aa	48 8b 4c 24 20	 mov	 rcx, QWORD PTR i$[rsp]
  000af	48 83 7c c8 70
	00		 cmp	 QWORD PTR [rax+rcx*8+112], 0
  000b5	74 14		 je	 SHORT $LN4@tupledeall
  000b7	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  000bc	48 8b 4c 24 20	 mov	 rcx, QWORD PTR i$[rsp]
  000c1	48 8b 4c c8 70	 mov	 rcx, QWORD PTR [rax+rcx*8+112]
  000c6	e8 00 00 00 00	 call	 _Py_DecRef
$LN4@tupledeall:
  000cb	33 c0		 xor	 eax, eax
  000cd	85 c0		 test	 eax, eax
  000cf	75 d4		 jne	 SHORT $LN7@tupledeall
  000d1	eb bd		 jmp	 SHORT $LN9@tupledeall
$LN8@tupledeall:

; 260  : #if PyTuple_MAXSAVESIZE > 0
; 261  :         if (len < PyTuple_MAXSAVESIZE &&
; 262  :             numfree[len] < PyTuple_MAXFREELIST &&
; 263  :             Py_TYPE(op) == &PyTuple_Type)

  000d3	48 83 7c 24 28
	14		 cmp	 QWORD PTR len$[rsp], 20
  000d9	7d 77		 jge	 SHORT $LN3@tupledeall
  000db	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:numfree
  000e2	48 8b 4c 24 28	 mov	 rcx, QWORD PTR len$[rsp]
  000e7	81 3c 88 d0 07
	00 00		 cmp	 DWORD PTR [rax+rcx*4], 2000 ; 000007d0H
  000ee	7d 62		 jge	 SHORT $LN3@tupledeall
  000f0	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyTuple_Type
  000f7	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  000fc	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00100	75 50		 jne	 SHORT $LN3@tupledeall

; 264  :         {
; 265  :             op->ob_item[0] = (PyObject *) free_list[len];

  00102	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:free_list
  00109	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  0010e	48 8b 54 24 28	 mov	 rdx, QWORD PTR len$[rsp]
  00113	48 8b 04 d0	 mov	 rax, QWORD PTR [rax+rdx*8]
  00117	48 89 41 70	 mov	 QWORD PTR [rcx+112], rax

; 266  :             numfree[len]++;

  0011b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:numfree
  00122	48 8b 4c 24 28	 mov	 rcx, QWORD PTR len$[rsp]
  00127	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  0012a	ff c0		 inc	 eax
  0012c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:numfree
  00133	48 8b 54 24 28	 mov	 rdx, QWORD PTR len$[rsp]
  00138	89 04 91	 mov	 DWORD PTR [rcx+rdx*4], eax

; 267  :             free_list[len] = op;

  0013b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:free_list
  00142	48 8b 4c 24 28	 mov	 rcx, QWORD PTR len$[rsp]
  00147	48 8b 54 24 50	 mov	 rdx, QWORD PTR op$[rsp]
  0014c	48 89 14 c8	 mov	 QWORD PTR [rax+rcx*8], rdx

; 268  :             goto done; /* return */

  00150	eb 14		 jmp	 SHORT $done$20537
$LN3@tupledeall:
$LN10@tupledeall:

; 269  :         }
; 270  : #endif
; 271  :     }
; 272  :     Py_TYPE(op)->tp_free((PyObject *)op);

  00152	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00157	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0015b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  00160	ff 90 98 01 00
	00		 call	 QWORD PTR [rax+408]
$done$20537:

; 273  : done:
; 274  :     Py_TRASHCAN_SAFE_END(op)

  00166	48 8b 44 24 30	 mov	 rax, QWORD PTR _tstate$20523[rsp]
  0016b	8b 80 94 00 00
	00		 mov	 eax, DWORD PTR [rax+148]
  00171	ff c8		 dec	 eax
  00173	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _tstate$20523[rsp]
  00178	89 81 94 00 00
	00		 mov	 DWORD PTR [rcx+148], eax
  0017e	48 8b 44 24 30	 mov	 rax, QWORD PTR _tstate$20523[rsp]
  00183	48 83 b8 98 00
	00 00 00	 cmp	 QWORD PTR [rax+152], 0
  0018b	74 13		 je	 SHORT $LN2@tupledeall
  0018d	48 8b 44 24 30	 mov	 rax, QWORD PTR _tstate$20523[rsp]
  00192	83 b8 94 00 00
	00 00		 cmp	 DWORD PTR [rax+148], 0
  00199	7f 05		 jg	 SHORT $LN2@tupledeall
  0019b	e8 00 00 00 00	 call	 _PyTrash_thread_destroy_chain
$LN2@tupledeall:
  001a0	eb 0a		 jmp	 SHORT $LN1@tupledeall
$LN11@tupledeall:
  001a2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  001a7	e8 00 00 00 00	 call	 _PyTrash_thread_deposit_object
$LN1@tupledeall:
  001ac	33 c0		 xor	 eax, eax
  001ae	85 c0		 test	 eax, eax
  001b0	0f 85 90 fe ff
	ff		 jne	 $LN14@tupledeall

; 275  : }

  001b6	48 83 c4 48	 add	 rsp, 72			; 00000048H
  001ba	c3		 ret	 0
tupledealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_02HFKPAGIC@?0?$CJ?$AA@			; `string'
PUBLIC	??_C@_01PKGAHCOL@?$CJ?$AA@			; `string'
PUBLIC	??_C@_0CD@KOCNJJAM@?5while?5getting?5the?5repr?5of?5a?5tup@ ; `string'
PUBLIC	??_C@_09CHIONKKD@tuplerepr?$AA@			; `string'
PUBLIC	??_C@_01ODHLEDKK@?$CI?$AA@			; `string'
PUBLIC	??_C@_05ONELGEGO@?$CI?4?4?4?$CJ?$AA@		; `string'
PUBLIC	??_C@_02KEGNLNML@?0?5?$AA@			; `string'
PUBLIC	??_C@_02HCKGKOFO@?$CI?$CJ?$AA@			; `string'
EXTRN	_PyAccu_Destroy:PROC
EXTRN	_PyAccu_Finish:PROC
EXTRN	Py_ReprLeave:PROC
EXTRN	PyObject_Repr:PROC
EXTRN	_Py_CheckRecursiveCall:PROC
EXTRN	_Py_CheckRecursionLimit:DWORD
EXTRN	_PyAccu_Accumulate:PROC
EXTRN	_PyAccu_Init:PROC
EXTRN	Py_ReprEnter:PROC
EXTRN	PyUnicode_FromString:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$tuplerepr DD imagerel tuplerepr
	DD	imagerel tuplerepr+985
	DD	imagerel $unwind$tuplerepr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$tuplerepr DD 020c01H
	DD	013010cH
xdata	ENDS
;	COMDAT ??_C@_02HFKPAGIC@?0?$CJ?$AA@
CONST	SEGMENT
??_C@_02HFKPAGIC@?0?$CJ?$AA@ DB ',)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01PKGAHCOL@?$CJ?$AA@
CONST	SEGMENT
??_C@_01PKGAHCOL@?$CJ?$AA@ DB ')', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@KOCNJJAM@?5while?5getting?5the?5repr?5of?5a?5tup@
CONST	SEGMENT
??_C@_0CD@KOCNJJAM@?5while?5getting?5the?5repr?5of?5a?5tup@ DB ' while ge'
	DB	'tting the repr of a tuple', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09CHIONKKD@tuplerepr?$AA@
CONST	SEGMENT
??_C@_09CHIONKKD@tuplerepr?$AA@ DB 'tuplerepr', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01ODHLEDKK@?$CI?$AA@
CONST	SEGMENT
??_C@_01ODHLEDKK@?$CI?$AA@ DB '(', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05ONELGEGO@?$CI?4?4?4?$CJ?$AA@
CONST	SEGMENT
??_C@_05ONELGEGO@?$CI?4?4?4?$CJ?$AA@ DB '(...)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02KEGNLNML@?0?5?$AA@
CONST	SEGMENT
??_C@_02KEGNLNML@?0?5?$AA@ DB ', ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02HCKGKOFO@?$CI?$CJ?$AA@
CONST	SEGMENT
??_C@_02HCKGKOFO@?$CI?$CJ?$AA@ DB '()', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT tuplerepr
_TEXT	SEGMENT
n$ = 48
i$ = 56
s$ = 64
acc$ = 72
_py_tmp$20579 = 88
_py_tmp$20600 = 96
_py_tmp$20615 = 104
tv79 = 112
tv136 = 120
tv155 = 128
tv149 = 136
v$ = 160
tuplerepr PROC						; COMDAT

; 279  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 280  :     Py_ssize_t i, n;
; 281  :     PyObject *s = NULL;

  0000c	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR s$[rsp], 0

; 282  :     _PyAccu acc;
; 283  :     static PyObject *sep = NULL;
; 284  : 
; 285  :     n = Py_SIZE(v);

  00015	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR v$[rsp]
  0001d	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00021	48 89 44 24 30	 mov	 QWORD PTR n$[rsp], rax

; 286  :     if (n == 0)

  00026	48 83 7c 24 30
	00		 cmp	 QWORD PTR n$[rsp], 0
  0002c	75 11		 jne	 SHORT $LN38@tuplerepr

; 287  :         return PyUnicode_FromString("()");

  0002e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02HCKGKOFO@?$CI?$CJ?$AA@
  00035	e8 00 00 00 00	 call	 PyUnicode_FromString
  0003a	e9 92 03 00 00	 jmp	 $LN39@tuplerepr
$LN38@tuplerepr:

; 288  : 
; 289  :     if (sep == NULL) {

  0003f	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?sep@?1??tuplerepr@@9@9, 0
  00047	75 24		 jne	 SHORT $LN37@tuplerepr

; 290  :         sep = PyUnicode_FromString(", ");

  00049	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02KEGNLNML@?0?5?$AA@
  00050	e8 00 00 00 00	 call	 PyUnicode_FromString
  00055	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?sep@?1??tuplerepr@@9@9, rax

; 291  :         if (sep == NULL)

  0005c	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?sep@?1??tuplerepr@@9@9, 0
  00064	75 07		 jne	 SHORT $LN36@tuplerepr

; 292  :             return NULL;

  00066	33 c0		 xor	 eax, eax
  00068	e9 64 03 00 00	 jmp	 $LN39@tuplerepr
$LN36@tuplerepr:
$LN37@tuplerepr:

; 293  :     }
; 294  : 
; 295  :     /* While not mutable, it is still possible to end up with a cycle in a
; 296  :        tuple through an object that stores itself within a tuple (and thus
; 297  :        infinitely asks for the repr of itself). This should only be
; 298  :        possible within a type. */
; 299  :     i = Py_ReprEnter((PyObject *)v);

  0006d	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR v$[rsp]
  00075	e8 00 00 00 00	 call	 Py_ReprEnter
  0007a	48 98		 cdqe
  0007c	48 89 44 24 38	 mov	 QWORD PTR i$[rsp], rax

; 300  :     if (i != 0) {

  00081	48 83 7c 24 38
	00		 cmp	 QWORD PTR i$[rsp], 0
  00087	74 2e		 je	 SHORT $LN35@tuplerepr

; 301  :         return i > 0 ? PyUnicode_FromString("(...)") : NULL;

  00089	48 83 7c 24 38
	00		 cmp	 QWORD PTR i$[rsp], 0
  0008f	7e 13		 jle	 SHORT $LN41@tuplerepr
  00091	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05ONELGEGO@?$CI?4?4?4?$CJ?$AA@
  00098	e8 00 00 00 00	 call	 PyUnicode_FromString
  0009d	48 89 44 24 70	 mov	 QWORD PTR tv79[rsp], rax
  000a2	eb 09		 jmp	 SHORT $LN42@tuplerepr
$LN41@tuplerepr:
  000a4	48 c7 44 24 70
	00 00 00 00	 mov	 QWORD PTR tv79[rsp], 0
$LN42@tuplerepr:
  000ad	48 8b 44 24 70	 mov	 rax, QWORD PTR tv79[rsp]
  000b2	e9 1a 03 00 00	 jmp	 $LN39@tuplerepr
$LN35@tuplerepr:

; 302  :     }
; 303  : 
; 304  :     if (_PyAccu_Init(&acc))

  000b7	48 8d 4c 24 48	 lea	 rcx, QWORD PTR acc$[rsp]
  000bc	e8 00 00 00 00	 call	 _PyAccu_Init
  000c1	85 c0		 test	 eax, eax
  000c3	74 05		 je	 SHORT $LN34@tuplerepr

; 305  :         goto error;

  000c5	e9 d6 02 00 00	 jmp	 $error$20569
$LN34@tuplerepr:

; 306  : 
; 307  :     s = PyUnicode_FromString("(");

  000ca	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01ODHLEDKK@?$CI?$AA@
  000d1	e8 00 00 00 00	 call	 PyUnicode_FromString
  000d6	48 89 44 24 40	 mov	 QWORD PTR s$[rsp], rax

; 308  :     if (s == NULL || _PyAccu_Accumulate(&acc, s))

  000db	48 83 7c 24 40
	00		 cmp	 QWORD PTR s$[rsp], 0
  000e1	74 13		 je	 SHORT $LN32@tuplerepr
  000e3	48 8b 54 24 40	 mov	 rdx, QWORD PTR s$[rsp]
  000e8	48 8d 4c 24 48	 lea	 rcx, QWORD PTR acc$[rsp]
  000ed	e8 00 00 00 00	 call	 _PyAccu_Accumulate
  000f2	85 c0		 test	 eax, eax
  000f4	74 05		 je	 SHORT $LN33@tuplerepr
$LN32@tuplerepr:

; 309  :         goto error;

  000f6	e9 a5 02 00 00	 jmp	 $error$20569
$LN33@tuplerepr:
$LN31@tuplerepr:

; 310  :     Py_CLEAR(s);

  000fb	48 83 7c 24 40
	00		 cmp	 QWORD PTR s$[rsp], 0
  00101	74 47		 je	 SHORT $LN28@tuplerepr
  00103	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0010b	4c 8b 4c 24 40	 mov	 r9, QWORD PTR s$[rsp]
  00110	41 b8 36 01 00
	00		 mov	 r8d, 310		; 00000136H
  00116	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@NPBNLKPK@?4?4?2Objects?2tupleobject?4c?$AA@
  0011d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09CHIONKKD@tuplerepr?$AA@
  00124	e8 00 00 00 00	 call	 _PyParallel_Guard
  00129	85 c0		 test	 eax, eax
  0012b	75 1d		 jne	 SHORT $LN28@tuplerepr
  0012d	48 8b 44 24 40	 mov	 rax, QWORD PTR s$[rsp]
  00132	48 89 44 24 58	 mov	 QWORD PTR _py_tmp$20579[rsp], rax
  00137	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR s$[rsp], 0
  00140	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _py_tmp$20579[rsp]
  00145	e8 00 00 00 00	 call	 _Py_DecRef
$LN28@tuplerepr:
  0014a	33 c0		 xor	 eax, eax
  0014c	85 c0		 test	 eax, eax
  0014e	75 ab		 jne	 SHORT $LN31@tuplerepr

; 311  : 
; 312  :     /* Do repr() on each element. */
; 313  :     for (i = 0; i < n; ++i) {

  00150	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  00159	eb 0d		 jmp	 SHORT $LN27@tuplerepr
$LN26@tuplerepr:
  0015b	48 8b 44 24 38	 mov	 rax, QWORD PTR i$[rsp]
  00160	48 ff c0	 inc	 rax
  00163	48 89 44 24 38	 mov	 QWORD PTR i$[rsp], rax
$LN27@tuplerepr:
  00168	48 8b 44 24 30	 mov	 rax, QWORD PTR n$[rsp]
  0016d	48 39 44 24 38	 cmp	 QWORD PTR i$[rsp], rax
  00172	0f 8d 71 01 00
	00		 jge	 $LN25@tuplerepr

; 314  :         if (Py_EnterRecursiveCall(" while getting the repr of a tuple"))

  00178	e8 00 00 00 00	 call	 PyThreadState_Get
  0017d	48 83 c0 18	 add	 rax, 24
  00181	48 89 44 24 78	 mov	 QWORD PTR tv136[rsp], rax
  00186	48 8b 44 24 78	 mov	 rax, QWORD PTR tv136[rsp]
  0018b	8b 00		 mov	 eax, DWORD PTR [rax]
  0018d	ff c0		 inc	 eax
  0018f	48 8b 4c 24 78	 mov	 rcx, QWORD PTR tv136[rsp]
  00194	89 01		 mov	 DWORD PTR [rcx], eax
  00196	48 8b 44 24 78	 mov	 rax, QWORD PTR tv136[rsp]
  0019b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _Py_CheckRecursionLimit
  001a1	39 08		 cmp	 DWORD PTR [rax], ecx
  001a3	7e 15		 jle	 SHORT $LN24@tuplerepr
  001a5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CD@KOCNJJAM@?5while?5getting?5the?5repr?5of?5a?5tup@
  001ac	e8 00 00 00 00	 call	 _Py_CheckRecursiveCall
  001b1	85 c0		 test	 eax, eax
  001b3	74 05		 je	 SHORT $LN24@tuplerepr

; 315  :             goto error;

  001b5	e9 e6 01 00 00	 jmp	 $error$20569
$LN24@tuplerepr:

; 316  :         s = PyObject_Repr(v->ob_item[i]);

  001ba	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR v$[rsp]
  001c2	48 8b 4c 24 38	 mov	 rcx, QWORD PTR i$[rsp]
  001c7	48 8b 4c c8 70	 mov	 rcx, QWORD PTR [rax+rcx*8+112]
  001cc	e8 00 00 00 00	 call	 PyObject_Repr
  001d1	48 89 44 24 40	 mov	 QWORD PTR s$[rsp], rax
$LN23@tuplerepr:

; 317  :         Py_LeaveRecursiveCall();

  001d6	83 3d 00 00 00
	00 64		 cmp	 DWORD PTR _Py_CheckRecursionLimit, 100 ; 00000064H
  001dd	7e 12		 jle	 SHORT $LN43@tuplerepr
  001df	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR _Py_CheckRecursionLimit
  001e5	83 e8 32	 sub	 eax, 50			; 00000032H
  001e8	89 84 24 80 00
	00 00		 mov	 DWORD PTR tv155[rsp], eax
  001ef	eb 13		 jmp	 SHORT $LN44@tuplerepr
$LN43@tuplerepr:
  001f1	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR _Py_CheckRecursionLimit
  001f7	c1 f8 02	 sar	 eax, 2
  001fa	6b c0 03	 imul	 eax, 3
  001fd	89 84 24 80 00
	00 00		 mov	 DWORD PTR tv155[rsp], eax
$LN44@tuplerepr:
  00204	e8 00 00 00 00	 call	 PyThreadState_Get
  00209	48 83 c0 18	 add	 rax, 24
  0020d	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv149[rsp], rax
  00215	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR tv149[rsp]
  0021d	8b 00		 mov	 eax, DWORD PTR [rax]
  0021f	ff c8		 dec	 eax
  00221	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR tv149[rsp]
  00229	89 01		 mov	 DWORD PTR [rcx], eax
  0022b	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR tv149[rsp]
  00233	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR tv155[rsp]
  0023a	39 08		 cmp	 DWORD PTR [rax], ecx
  0023c	7d 09		 jge	 SHORT $LN20@tuplerepr
  0023e	e8 00 00 00 00	 call	 PyThreadState_Get
  00243	c6 40 1c 00	 mov	 BYTE PTR [rax+28], 0
$LN20@tuplerepr:
  00247	33 c0		 xor	 eax, eax
  00249	85 c0		 test	 eax, eax
  0024b	75 89		 jne	 SHORT $LN23@tuplerepr

; 318  :         if (i > 0 && _PyAccu_Accumulate(&acc, sep))

  0024d	48 83 7c 24 38
	00		 cmp	 QWORD PTR i$[rsp], 0
  00253	7e 1a		 jle	 SHORT $LN19@tuplerepr
  00255	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR ?sep@?1??tuplerepr@@9@9
  0025c	48 8d 4c 24 48	 lea	 rcx, QWORD PTR acc$[rsp]
  00261	e8 00 00 00 00	 call	 _PyAccu_Accumulate
  00266	85 c0		 test	 eax, eax
  00268	74 05		 je	 SHORT $LN19@tuplerepr

; 319  :             goto error;

  0026a	e9 31 01 00 00	 jmp	 $error$20569
$LN19@tuplerepr:

; 320  :         if (s == NULL || _PyAccu_Accumulate(&acc, s))

  0026f	48 83 7c 24 40
	00		 cmp	 QWORD PTR s$[rsp], 0
  00275	74 13		 je	 SHORT $LN17@tuplerepr
  00277	48 8b 54 24 40	 mov	 rdx, QWORD PTR s$[rsp]
  0027c	48 8d 4c 24 48	 lea	 rcx, QWORD PTR acc$[rsp]
  00281	e8 00 00 00 00	 call	 _PyAccu_Accumulate
  00286	85 c0		 test	 eax, eax
  00288	74 05		 je	 SHORT $LN18@tuplerepr
$LN17@tuplerepr:

; 321  :             goto error;

  0028a	e9 11 01 00 00	 jmp	 $error$20569
$LN18@tuplerepr:
$LN16@tuplerepr:

; 322  :         Py_CLEAR(s);

  0028f	48 83 7c 24 40
	00		 cmp	 QWORD PTR s$[rsp], 0
  00295	74 47		 je	 SHORT $LN13@tuplerepr
  00297	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0029f	4c 8b 4c 24 40	 mov	 r9, QWORD PTR s$[rsp]
  002a4	41 b8 42 01 00
	00		 mov	 r8d, 322		; 00000142H
  002aa	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@NPBNLKPK@?4?4?2Objects?2tupleobject?4c?$AA@
  002b1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09CHIONKKD@tuplerepr?$AA@
  002b8	e8 00 00 00 00	 call	 _PyParallel_Guard
  002bd	85 c0		 test	 eax, eax
  002bf	75 1d		 jne	 SHORT $LN13@tuplerepr
  002c1	48 8b 44 24 40	 mov	 rax, QWORD PTR s$[rsp]
  002c6	48 89 44 24 60	 mov	 QWORD PTR _py_tmp$20600[rsp], rax
  002cb	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR s$[rsp], 0
  002d4	48 8b 4c 24 60	 mov	 rcx, QWORD PTR _py_tmp$20600[rsp]
  002d9	e8 00 00 00 00	 call	 _Py_DecRef
$LN13@tuplerepr:
  002de	33 c0		 xor	 eax, eax
  002e0	85 c0		 test	 eax, eax
  002e2	75 ab		 jne	 SHORT $LN16@tuplerepr

; 323  :     }

  002e4	e9 72 fe ff ff	 jmp	 $LN26@tuplerepr
$LN25@tuplerepr:

; 324  :     if (n > 1)

  002e9	48 83 7c 24 30
	01		 cmp	 QWORD PTR n$[rsp], 1
  002ef	7e 13		 jle	 SHORT $LN12@tuplerepr

; 325  :         s = PyUnicode_FromString(")");

  002f1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01PKGAHCOL@?$CJ?$AA@
  002f8	e8 00 00 00 00	 call	 PyUnicode_FromString
  002fd	48 89 44 24 40	 mov	 QWORD PTR s$[rsp], rax

; 326  :     else

  00302	eb 11		 jmp	 SHORT $LN11@tuplerepr
$LN12@tuplerepr:

; 327  :         s = PyUnicode_FromString(",)");

  00304	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02HFKPAGIC@?0?$CJ?$AA@
  0030b	e8 00 00 00 00	 call	 PyUnicode_FromString
  00310	48 89 44 24 40	 mov	 QWORD PTR s$[rsp], rax
$LN11@tuplerepr:

; 328  :     if (s == NULL || _PyAccu_Accumulate(&acc, s))

  00315	48 83 7c 24 40
	00		 cmp	 QWORD PTR s$[rsp], 0
  0031b	74 13		 je	 SHORT $LN9@tuplerepr
  0031d	48 8b 54 24 40	 mov	 rdx, QWORD PTR s$[rsp]
  00322	48 8d 4c 24 48	 lea	 rcx, QWORD PTR acc$[rsp]
  00327	e8 00 00 00 00	 call	 _PyAccu_Accumulate
  0032c	85 c0		 test	 eax, eax
  0032e	74 02		 je	 SHORT $LN10@tuplerepr
$LN9@tuplerepr:

; 329  :         goto error;

  00330	eb 6e		 jmp	 SHORT $error$20569
$LN10@tuplerepr:
$LN8@tuplerepr:

; 330  :     Py_CLEAR(s);

  00332	48 83 7c 24 40
	00		 cmp	 QWORD PTR s$[rsp], 0
  00338	74 47		 je	 SHORT $LN5@tuplerepr
  0033a	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00342	4c 8b 4c 24 40	 mov	 r9, QWORD PTR s$[rsp]
  00347	41 b8 4a 01 00
	00		 mov	 r8d, 330		; 0000014aH
  0034d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@NPBNLKPK@?4?4?2Objects?2tupleobject?4c?$AA@
  00354	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09CHIONKKD@tuplerepr?$AA@
  0035b	e8 00 00 00 00	 call	 _PyParallel_Guard
  00360	85 c0		 test	 eax, eax
  00362	75 1d		 jne	 SHORT $LN5@tuplerepr
  00364	48 8b 44 24 40	 mov	 rax, QWORD PTR s$[rsp]
  00369	48 89 44 24 68	 mov	 QWORD PTR _py_tmp$20615[rsp], rax
  0036e	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR s$[rsp], 0
  00377	48 8b 4c 24 68	 mov	 rcx, QWORD PTR _py_tmp$20615[rsp]
  0037c	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@tuplerepr:
  00381	33 c0		 xor	 eax, eax
  00383	85 c0		 test	 eax, eax
  00385	75 ab		 jne	 SHORT $LN8@tuplerepr

; 331  : 
; 332  :     Py_ReprLeave((PyObject *)v);

  00387	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR v$[rsp]
  0038f	e8 00 00 00 00	 call	 Py_ReprLeave

; 333  :     return _PyAccu_Finish(&acc);

  00394	48 8d 4c 24 48	 lea	 rcx, QWORD PTR acc$[rsp]
  00399	e8 00 00 00 00	 call	 _PyAccu_Finish
  0039e	eb 31		 jmp	 SHORT $LN39@tuplerepr
$error$20569:

; 334  : 
; 335  : error:
; 336  :     _PyAccu_Destroy(&acc);

  003a0	48 8d 4c 24 48	 lea	 rcx, QWORD PTR acc$[rsp]
  003a5	e8 00 00 00 00	 call	 _PyAccu_Destroy
$LN4@tuplerepr:

; 337  :     Py_XDECREF(s);

  003aa	48 83 7c 24 40
	00		 cmp	 QWORD PTR s$[rsp], 0
  003b0	74 0a		 je	 SHORT $LN1@tuplerepr
  003b2	48 8b 4c 24 40	 mov	 rcx, QWORD PTR s$[rsp]
  003b7	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@tuplerepr:
  003bc	33 c0		 xor	 eax, eax
  003be	85 c0		 test	 eax, eax
  003c0	75 e8		 jne	 SHORT $LN4@tuplerepr

; 338  :     Py_ReprLeave((PyObject *)v);

  003c2	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR v$[rsp]
  003ca	e8 00 00 00 00	 call	 Py_ReprLeave

; 339  :     return NULL;

  003cf	33 c0		 xor	 eax, eax
$LN39@tuplerepr:

; 340  : }

  003d1	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  003d8	c3		 ret	 0
tuplerepr ENDP
_TEXT	ENDS
EXTRN	PyObject_Hash:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$tuplehash DD imagerel tuplehash
	DD	imagerel tuplehash+244
	DD	imagerel $unwind$tuplehash
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$tuplehash DD 010901H
	DD	0a209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT tuplehash
_TEXT	SEGMENT
p$ = 32
y$ = 40
x$ = 48
len$ = 56
mult$ = 64
tv70 = 72
v$ = 96
tuplehash PROC						; COMDAT

; 352  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 353  :     register Py_uhash_t x;  /* Unsigned for defined overflow behavior. */
; 354  :     register Py_hash_t y;
; 355  :     register Py_ssize_t len = Py_SIZE(v);

  00009	48 8b 44 24 60	 mov	 rax, QWORD PTR v$[rsp]
  0000e	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00012	48 89 44 24 38	 mov	 QWORD PTR len$[rsp], rax

; 356  :     register PyObject **p;
; 357  :     Py_uhash_t mult = _PyHASH_MULTIPLIER;

  00017	48 c7 44 24 40
	43 42 0f 00	 mov	 QWORD PTR mult$[rsp], 1000003 ; 000f4243H

; 358  :     x = 0x345678UL;

  00020	48 c7 44 24 30
	78 56 34 00	 mov	 QWORD PTR x$[rsp], 3430008 ; 00345678H

; 359  :     p = v->ob_item;

  00029	48 8b 44 24 60	 mov	 rax, QWORD PTR v$[rsp]
  0002e	48 83 c0 70	 add	 rax, 112		; 00000070H
  00032	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax
$LN4@tuplehash:

; 360  :     while (--len >= 0) {

  00037	48 8b 44 24 38	 mov	 rax, QWORD PTR len$[rsp]
  0003c	48 ff c8	 dec	 rax
  0003f	48 89 44 24 38	 mov	 QWORD PTR len$[rsp], rax
  00044	48 83 7c 24 38
	00		 cmp	 QWORD PTR len$[rsp], 0
  0004a	7c 7d		 jl	 SHORT $LN3@tuplehash

; 361  :         y = PyObject_Hash(*p++);

  0004c	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00051	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00054	48 89 44 24 48	 mov	 QWORD PTR tv70[rsp], rax
  00059	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tv70[rsp]
  0005e	e8 00 00 00 00	 call	 PyObject_Hash
  00063	48 89 44 24 28	 mov	 QWORD PTR y$[rsp], rax
  00068	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0006d	48 83 c0 08	 add	 rax, 8
  00071	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax

; 362  :         if (y == -1)

  00076	48 83 7c 24 28
	ff		 cmp	 QWORD PTR y$[rsp], -1
  0007c	75 09		 jne	 SHORT $LN2@tuplehash

; 363  :             return -1;

  0007e	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1
  00085	eb 68		 jmp	 SHORT $LN5@tuplehash
$LN2@tuplehash:

; 364  :         x = (x ^ y) * mult;

  00087	48 8b 44 24 28	 mov	 rax, QWORD PTR y$[rsp]
  0008c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR x$[rsp]
  00091	48 33 c8	 xor	 rcx, rax
  00094	48 8b c1	 mov	 rax, rcx
  00097	48 0f af 44 24
	40		 imul	 rax, QWORD PTR mult$[rsp]
  0009d	48 89 44 24 30	 mov	 QWORD PTR x$[rsp], rax

; 365  :         /* the cast might truncate len; that doesn't change hash stability */
; 366  :         mult += (Py_hash_t)(82520UL + len + len);

  000a2	48 8b 44 24 38	 mov	 rax, QWORD PTR len$[rsp]
  000a7	48 8b 4c 24 38	 mov	 rcx, QWORD PTR len$[rsp]
  000ac	48 8d 84 08 58
	42 01 00	 lea	 rax, QWORD PTR [rax+rcx+82520]
  000b4	48 8b 4c 24 40	 mov	 rcx, QWORD PTR mult$[rsp]
  000b9	48 03 c8	 add	 rcx, rax
  000bc	48 8b c1	 mov	 rax, rcx
  000bf	48 89 44 24 40	 mov	 QWORD PTR mult$[rsp], rax

; 367  :     }

  000c4	e9 6e ff ff ff	 jmp	 $LN4@tuplehash
$LN3@tuplehash:

; 368  :     x += 97531UL;

  000c9	48 8b 44 24 30	 mov	 rax, QWORD PTR x$[rsp]
  000ce	48 05 fb 7c 01
	00		 add	 rax, 97531		; 00017cfbH
  000d4	48 89 44 24 30	 mov	 QWORD PTR x$[rsp], rax

; 369  :     if (x == (Py_uhash_t)-1)

  000d9	48 83 7c 24 30
	ff		 cmp	 QWORD PTR x$[rsp], -1
  000df	75 09		 jne	 SHORT $LN1@tuplehash

; 370  :         x = -2;

  000e1	48 c7 44 24 30
	fe ff ff ff	 mov	 QWORD PTR x$[rsp], -2
$LN1@tuplehash:

; 371  :     return x;

  000ea	48 8b 44 24 30	 mov	 rax, QWORD PTR x$[rsp]
$LN5@tuplehash:

; 372  : }

  000ef	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000f3	c3		 ret	 0
tuplehash ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT tuplelength
_TEXT	SEGMENT
a$ = 8
tuplelength PROC					; COMDAT

; 376  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 377  :     return Py_SIZE(a);

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR a$[rsp]
  0000a	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]

; 378  : }

  0000e	c3		 ret	 0
tuplelength ENDP
_TEXT	ENDS
EXTRN	PyObject_RichCompareBool:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$tuplecontains DD imagerel tuplecontains
	DD	imagerel tuplecontains+115
	DD	imagerel $unwind$tuplecontains
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$tuplecontains DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT tuplecontains
_TEXT	SEGMENT
i$ = 32
cmp$ = 40
a$ = 64
el$ = 72
tuplecontains PROC					; COMDAT

; 382  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 383  :     Py_ssize_t i;
; 384  :     int cmp;
; 385  : 
; 386  :     for (i = 0, cmp = 0 ; cmp == 0 && i < Py_SIZE(a); ++i)

  0000e	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  00017	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR cmp$[rsp], 0
  0001f	eb 0d		 jmp	 SHORT $LN3@tupleconta
$LN2@tupleconta:
  00021	48 8b 44 24 20	 mov	 rax, QWORD PTR i$[rsp]
  00026	48 ff c0	 inc	 rax
  00029	48 89 44 24 20	 mov	 QWORD PTR i$[rsp], rax
$LN3@tupleconta:
  0002e	83 7c 24 28 00	 cmp	 DWORD PTR cmp$[rsp], 0
  00033	75 35		 jne	 SHORT $LN1@tupleconta
  00035	48 8b 44 24 40	 mov	 rax, QWORD PTR a$[rsp]
  0003a	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0003e	48 39 44 24 20	 cmp	 QWORD PTR i$[rsp], rax
  00043	7d 25		 jge	 SHORT $LN1@tupleconta

; 387  :         cmp = PyObject_RichCompareBool(el, PyTuple_GET_ITEM(a, i),
; 388  :                                            Py_EQ);

  00045	41 b8 02 00 00
	00		 mov	 r8d, 2
  0004b	48 8b 44 24 40	 mov	 rax, QWORD PTR a$[rsp]
  00050	48 8b 4c 24 20	 mov	 rcx, QWORD PTR i$[rsp]
  00055	48 8b 54 c8 70	 mov	 rdx, QWORD PTR [rax+rcx*8+112]
  0005a	48 8b 4c 24 48	 mov	 rcx, QWORD PTR el$[rsp]
  0005f	e8 00 00 00 00	 call	 PyObject_RichCompareBool
  00064	89 44 24 28	 mov	 DWORD PTR cmp$[rsp], eax
  00068	eb b7		 jmp	 SHORT $LN2@tupleconta
$LN1@tupleconta:

; 389  :     return cmp;

  0006a	8b 44 24 28	 mov	 eax, DWORD PTR cmp$[rsp]

; 390  : }

  0006e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00072	c3		 ret	 0
tuplecontains ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$tupleitem DD imagerel tupleitem
	DD	imagerel tupleitem+101
	DD	imagerel $unwind$tupleitem
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$tupleitem DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT tupleitem
_TEXT	SEGMENT
a$ = 48
i$ = 56
tupleitem PROC						; COMDAT

; 394  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 395  :     if (i < 0 || i >= Py_SIZE(a)) {

  0000e	48 83 7c 24 38
	00		 cmp	 QWORD PTR i$[rsp], 0
  00014	7c 10		 jl	 SHORT $LN1@tupleitem
  00016	48 8b 44 24 30	 mov	 rax, QWORD PTR a$[rsp]
  0001b	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0001f	48 39 44 24 38	 cmp	 QWORD PTR i$[rsp], rax
  00024	7c 17		 jl	 SHORT $LN2@tupleitem
$LN1@tupleitem:

; 396  :         PyErr_SetString(PyExc_IndexError, "tuple index out of range");

  00026	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@KFCEHIN@tuple?5index?5out?5of?5range?$AA@
  0002d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_IndexError
  00034	e8 00 00 00 00	 call	 PyErr_SetString

; 397  :         return NULL;

  00039	33 c0		 xor	 eax, eax
  0003b	eb 23		 jmp	 SHORT $LN3@tupleitem
$LN2@tupleitem:

; 398  :     }
; 399  :     Py_INCREF(a->ob_item[i]);

  0003d	48 8b 44 24 30	 mov	 rax, QWORD PTR a$[rsp]
  00042	48 8b 4c 24 38	 mov	 rcx, QWORD PTR i$[rsp]
  00047	48 8b 4c c8 70	 mov	 rcx, QWORD PTR [rax+rcx*8+112]
  0004c	e8 00 00 00 00	 call	 _Py_IncRef

; 400  :     return a->ob_item[i];

  00051	48 8b 44 24 30	 mov	 rax, QWORD PTR a$[rsp]
  00056	48 8b 4c 24 38	 mov	 rcx, QWORD PTR i$[rsp]
  0005b	48 8b 44 c8 70	 mov	 rax, QWORD PTR [rax+rcx*8+112]
$LN3@tupleitem:

; 401  : }

  00060	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00064	c3		 ret	 0
tupleitem ENDP
_TEXT	ENDS
PUBLIC	PyTuple_GetSlice
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyTuple_GetSlice DD imagerel $LN5
	DD	imagerel $LN5+97
	DD	imagerel $unwind$PyTuple_GetSlice
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyTuple_GetSlice DD 011301H
	DD	04213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyTuple_GetSlice
_TEXT	SEGMENT
op$ = 48
i$ = 56
j$ = 64
PyTuple_GetSlice PROC					; COMDAT

; 437  : {

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 438  :     if (op == NULL || !PyTuple_Check(op)) {

  00013	48 83 7c 24 30
	00		 cmp	 QWORD PTR op$[rsp], 0
  00019	74 18		 je	 SHORT $LN1@PyTuple_Ge@3
  0001b	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  00020	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00024	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0002a	25 00 00 00 04	 and	 eax, 67108864		; 04000000H
  0002f	85 c0		 test	 eax, eax
  00031	75 15		 jne	 SHORT $LN2@PyTuple_Ge@3
$LN1@PyTuple_Ge@3:

; 439  :         PyErr_BadInternalCall();

  00033	ba b7 01 00 00	 mov	 edx, 439		; 000001b7H
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@NPBNLKPK@?4?4?2Objects?2tupleobject?4c?$AA@
  0003f	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 440  :         return NULL;

  00044	33 c0		 xor	 eax, eax
  00046	eb 14		 jmp	 SHORT $LN3@PyTuple_Ge@3
$LN2@PyTuple_Ge@3:

; 441  :     }
; 442  :     return tupleslice((PyTupleObject *)op, i, j);

  00048	4c 8b 44 24 40	 mov	 r8, QWORD PTR j$[rsp]
  0004d	48 8b 54 24 38	 mov	 rdx, QWORD PTR i$[rsp]
  00052	48 8b 4c 24 30	 mov	 rcx, QWORD PTR op$[rsp]
  00057	e8 00 00 00 00	 call	 tupleslice
$LN3@PyTuple_Ge@3:

; 443  : }

  0005c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00060	c3		 ret	 0
PyTuple_GetSlice ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$tupleslice DD imagerel tupleslice
	DD	imagerel tupleslice+328
	DD	imagerel $unwind$tupleslice
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$tupleslice DD 011301H
	DD	0a213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT tupleslice
_TEXT	SEGMENT
i$ = 32
dest$ = 40
len$ = 48
src$ = 56
np$ = 64
v$20703 = 72
a$ = 96
ilow$ = 104
ihigh$ = 112
tupleslice PROC						; COMDAT

; 406  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 407  :     register PyTupleObject *np;
; 408  :     PyObject **src, **dest;
; 409  :     register Py_ssize_t i;
; 410  :     Py_ssize_t len;
; 411  :     if (ilow < 0)

  00013	48 83 7c 24 68
	00		 cmp	 QWORD PTR ilow$[rsp], 0
  00019	7d 09		 jge	 SHORT $LN8@tupleslice

; 412  :         ilow = 0;

  0001b	48 c7 44 24 68
	00 00 00 00	 mov	 QWORD PTR ilow$[rsp], 0
$LN8@tupleslice:

; 413  :     if (ihigh > Py_SIZE(a))

  00024	48 8b 44 24 60	 mov	 rax, QWORD PTR a$[rsp]
  00029	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0002d	48 39 44 24 70	 cmp	 QWORD PTR ihigh$[rsp], rax
  00032	7e 0e		 jle	 SHORT $LN7@tupleslice

; 414  :         ihigh = Py_SIZE(a);

  00034	48 8b 44 24 60	 mov	 rax, QWORD PTR a$[rsp]
  00039	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0003d	48 89 44 24 70	 mov	 QWORD PTR ihigh$[rsp], rax
$LN7@tupleslice:

; 415  :     if (ihigh < ilow)

  00042	48 8b 44 24 68	 mov	 rax, QWORD PTR ilow$[rsp]
  00047	48 39 44 24 70	 cmp	 QWORD PTR ihigh$[rsp], rax
  0004c	7d 0a		 jge	 SHORT $LN6@tupleslice

; 416  :         ihigh = ilow;

  0004e	48 8b 44 24 68	 mov	 rax, QWORD PTR ilow$[rsp]
  00053	48 89 44 24 70	 mov	 QWORD PTR ihigh$[rsp], rax
$LN6@tupleslice:

; 417  :     if (ilow == 0 && ihigh == Py_SIZE(a) && PyTuple_CheckExact(a)) {

  00058	48 83 7c 24 68
	00		 cmp	 QWORD PTR ilow$[rsp], 0
  0005e	75 36		 jne	 SHORT $LN5@tupleslice
  00060	48 8b 44 24 60	 mov	 rax, QWORD PTR a$[rsp]
  00065	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00069	48 39 44 24 70	 cmp	 QWORD PTR ihigh$[rsp], rax
  0006e	75 26		 jne	 SHORT $LN5@tupleslice
  00070	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyTuple_Type
  00077	48 8b 4c 24 60	 mov	 rcx, QWORD PTR a$[rsp]
  0007c	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00080	75 14		 jne	 SHORT $LN5@tupleslice

; 418  :         Py_INCREF(a);

  00082	48 8b 4c 24 60	 mov	 rcx, QWORD PTR a$[rsp]
  00087	e8 00 00 00 00	 call	 _Py_IncRef

; 419  :         return (PyObject *)a;

  0008c	48 8b 44 24 60	 mov	 rax, QWORD PTR a$[rsp]
  00091	e9 ad 00 00 00	 jmp	 $LN9@tupleslice
$LN5@tupleslice:

; 420  :     }
; 421  :     len = ihigh - ilow;

  00096	48 8b 44 24 68	 mov	 rax, QWORD PTR ilow$[rsp]
  0009b	48 8b 4c 24 70	 mov	 rcx, QWORD PTR ihigh$[rsp]
  000a0	48 2b c8	 sub	 rcx, rax
  000a3	48 8b c1	 mov	 rax, rcx
  000a6	48 89 44 24 30	 mov	 QWORD PTR len$[rsp], rax

; 422  :     np = (PyTupleObject *)PyTuple_New(len);

  000ab	48 8b 4c 24 30	 mov	 rcx, QWORD PTR len$[rsp]
  000b0	e8 00 00 00 00	 call	 PyTuple_New
  000b5	48 89 44 24 40	 mov	 QWORD PTR np$[rsp], rax

; 423  :     if (np == NULL)

  000ba	48 83 7c 24 40
	00		 cmp	 QWORD PTR np$[rsp], 0
  000c0	75 04		 jne	 SHORT $LN4@tupleslice

; 424  :         return NULL;

  000c2	33 c0		 xor	 eax, eax
  000c4	eb 7d		 jmp	 SHORT $LN9@tupleslice
$LN4@tupleslice:

; 425  :     src = a->ob_item + ilow;

  000c6	48 8b 44 24 60	 mov	 rax, QWORD PTR a$[rsp]
  000cb	48 8b 4c 24 68	 mov	 rcx, QWORD PTR ilow$[rsp]
  000d0	48 8d 44 c8 70	 lea	 rax, QWORD PTR [rax+rcx*8+112]
  000d5	48 89 44 24 38	 mov	 QWORD PTR src$[rsp], rax

; 426  :     dest = np->ob_item;

  000da	48 8b 44 24 40	 mov	 rax, QWORD PTR np$[rsp]
  000df	48 83 c0 70	 add	 rax, 112		; 00000070H
  000e3	48 89 44 24 28	 mov	 QWORD PTR dest$[rsp], rax

; 427  :     for (i = 0; i < len; i++) {

  000e8	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  000f1	eb 0d		 jmp	 SHORT $LN3@tupleslice
$LN2@tupleslice:
  000f3	48 8b 44 24 20	 mov	 rax, QWORD PTR i$[rsp]
  000f8	48 ff c0	 inc	 rax
  000fb	48 89 44 24 20	 mov	 QWORD PTR i$[rsp], rax
$LN3@tupleslice:
  00100	48 8b 44 24 30	 mov	 rax, QWORD PTR len$[rsp]
  00105	48 39 44 24 20	 cmp	 QWORD PTR i$[rsp], rax
  0010a	7d 32		 jge	 SHORT $LN1@tupleslice

; 428  :         PyObject *v = src[i];

  0010c	48 8b 44 24 38	 mov	 rax, QWORD PTR src$[rsp]
  00111	48 8b 4c 24 20	 mov	 rcx, QWORD PTR i$[rsp]
  00116	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  0011a	48 89 44 24 48	 mov	 QWORD PTR v$20703[rsp], rax

; 429  :         Py_INCREF(v);

  0011f	48 8b 4c 24 48	 mov	 rcx, QWORD PTR v$20703[rsp]
  00124	e8 00 00 00 00	 call	 _Py_IncRef

; 430  :         dest[i] = v;

  00129	48 8b 44 24 28	 mov	 rax, QWORD PTR dest$[rsp]
  0012e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR i$[rsp]
  00133	48 8b 54 24 48	 mov	 rdx, QWORD PTR v$20703[rsp]
  00138	48 89 14 c8	 mov	 QWORD PTR [rax+rcx*8], rdx

; 431  :     }

  0013c	eb b5		 jmp	 SHORT $LN2@tupleslice
$LN1@tupleslice:

; 432  :     return (PyObject *)np;

  0013e	48 8b 44 24 40	 mov	 rax, QWORD PTR np$[rsp]
$LN9@tupleslice:

; 433  : }

  00143	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00147	c3		 ret	 0
tupleslice ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DD@KJFLILAG@can?5only?5concatenate?5tuple?5?$CInot?5@ ; `string'
EXTRN	PyErr_Format:PROC
EXTRN	PyExc_TypeError:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$tupleconcat DD imagerel tupleconcat
	DD	imagerel tupleconcat+404
	DD	imagerel $unwind$tupleconcat
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$tupleconcat DD 010e01H
	DD	0c20eH
xdata	ENDS
;	COMDAT ??_C@_0DD@KJFLILAG@can?5only?5concatenate?5tuple?5?$CInot?5@
CONST	SEGMENT
??_C@_0DD@KJFLILAG@can?5only?5concatenate?5tuple?5?$CInot?5@ DB 'can only'
	DB	' concatenate tuple (not "%.200s") to tuple', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT tupleconcat
_TEXT	SEGMENT
i$ = 32
dest$ = 40
size$ = 48
np$ = 56
src$ = 64
v$20748 = 72
v$20757 = 80
a$ = 112
bb$ = 120
tupleconcat PROC					; COMDAT

; 447  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 448  :     register Py_ssize_t size;
; 449  :     register Py_ssize_t i;
; 450  :     PyObject **src, **dest;
; 451  :     PyTupleObject *np;
; 452  :     if (!PyTuple_Check(bb)) {

  0000e	48 8b 44 24 78	 mov	 rax, QWORD PTR bb$[rsp]
  00013	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00017	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0001d	25 00 00 00 04	 and	 eax, 67108864		; 04000000H
  00022	85 c0		 test	 eax, eax
  00024	75 27		 jne	 SHORT $LN9@tupleconca

; 453  :         PyErr_Format(PyExc_TypeError,
; 454  :              "can only concatenate tuple (not \"%.200s\") to tuple",
; 455  :                  Py_TYPE(bb)->tp_name);

  00026	48 8b 44 24 78	 mov	 rax, QWORD PTR bb$[rsp]
  0002b	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0002f	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  00033	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DD@KJFLILAG@can?5only?5concatenate?5tuple?5?$CInot?5@
  0003a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00041	e8 00 00 00 00	 call	 PyErr_Format

; 456  :         return NULL;

  00046	33 c0		 xor	 eax, eax
  00048	e9 42 01 00 00	 jmp	 $LN10@tupleconca
$LN9@tupleconca:

; 457  :     }
; 458  : #define b ((PyTupleObject *)bb)
; 459  :     size = Py_SIZE(a) + Py_SIZE(b);

  0004d	48 8b 44 24 70	 mov	 rax, QWORD PTR a$[rsp]
  00052	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00056	48 8b 4c 24 78	 mov	 rcx, QWORD PTR bb$[rsp]
  0005b	48 03 41 60	 add	 rax, QWORD PTR [rcx+96]
  0005f	48 89 44 24 30	 mov	 QWORD PTR size$[rsp], rax

; 460  :     if (size < 0)

  00064	48 83 7c 24 30
	00		 cmp	 QWORD PTR size$[rsp], 0
  0006a	7d 0a		 jge	 SHORT $LN8@tupleconca

; 461  :         return PyErr_NoMemory();

  0006c	e8 00 00 00 00	 call	 PyErr_NoMemory
  00071	e9 19 01 00 00	 jmp	 $LN10@tupleconca
$LN8@tupleconca:

; 462  :     np = (PyTupleObject *) PyTuple_New(size);

  00076	48 8b 4c 24 30	 mov	 rcx, QWORD PTR size$[rsp]
  0007b	e8 00 00 00 00	 call	 PyTuple_New
  00080	48 89 44 24 38	 mov	 QWORD PTR np$[rsp], rax

; 463  :     if (np == NULL) {

  00085	48 83 7c 24 38
	00		 cmp	 QWORD PTR np$[rsp], 0
  0008b	75 07		 jne	 SHORT $LN7@tupleconca

; 464  :         return NULL;

  0008d	33 c0		 xor	 eax, eax
  0008f	e9 fb 00 00 00	 jmp	 $LN10@tupleconca
$LN7@tupleconca:

; 465  :     }
; 466  :     src = a->ob_item;

  00094	48 8b 44 24 70	 mov	 rax, QWORD PTR a$[rsp]
  00099	48 83 c0 70	 add	 rax, 112		; 00000070H
  0009d	48 89 44 24 40	 mov	 QWORD PTR src$[rsp], rax

; 467  :     dest = np->ob_item;

  000a2	48 8b 44 24 38	 mov	 rax, QWORD PTR np$[rsp]
  000a7	48 83 c0 70	 add	 rax, 112		; 00000070H
  000ab	48 89 44 24 28	 mov	 QWORD PTR dest$[rsp], rax

; 468  :     for (i = 0; i < Py_SIZE(a); i++) {

  000b0	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  000b9	eb 0d		 jmp	 SHORT $LN6@tupleconca
$LN5@tupleconca:
  000bb	48 8b 44 24 20	 mov	 rax, QWORD PTR i$[rsp]
  000c0	48 ff c0	 inc	 rax
  000c3	48 89 44 24 20	 mov	 QWORD PTR i$[rsp], rax
$LN6@tupleconca:
  000c8	48 8b 44 24 70	 mov	 rax, QWORD PTR a$[rsp]
  000cd	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000d1	48 39 44 24 20	 cmp	 QWORD PTR i$[rsp], rax
  000d6	7d 32		 jge	 SHORT $LN4@tupleconca

; 469  :         PyObject *v = src[i];

  000d8	48 8b 44 24 40	 mov	 rax, QWORD PTR src$[rsp]
  000dd	48 8b 4c 24 20	 mov	 rcx, QWORD PTR i$[rsp]
  000e2	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  000e6	48 89 44 24 48	 mov	 QWORD PTR v$20748[rsp], rax

; 470  :         Py_INCREF(v);

  000eb	48 8b 4c 24 48	 mov	 rcx, QWORD PTR v$20748[rsp]
  000f0	e8 00 00 00 00	 call	 _Py_IncRef

; 471  :         dest[i] = v;

  000f5	48 8b 44 24 28	 mov	 rax, QWORD PTR dest$[rsp]
  000fa	48 8b 4c 24 20	 mov	 rcx, QWORD PTR i$[rsp]
  000ff	48 8b 54 24 48	 mov	 rdx, QWORD PTR v$20748[rsp]
  00104	48 89 14 c8	 mov	 QWORD PTR [rax+rcx*8], rdx

; 472  :     }

  00108	eb b1		 jmp	 SHORT $LN5@tupleconca
$LN4@tupleconca:

; 473  :     src = b->ob_item;

  0010a	48 8b 44 24 78	 mov	 rax, QWORD PTR bb$[rsp]
  0010f	48 83 c0 70	 add	 rax, 112		; 00000070H
  00113	48 89 44 24 40	 mov	 QWORD PTR src$[rsp], rax

; 474  :     dest = np->ob_item + Py_SIZE(a);

  00118	48 8b 44 24 70	 mov	 rax, QWORD PTR a$[rsp]
  0011d	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00121	48 8b 4c 24 38	 mov	 rcx, QWORD PTR np$[rsp]
  00126	48 8d 44 c1 70	 lea	 rax, QWORD PTR [rcx+rax*8+112]
  0012b	48 89 44 24 28	 mov	 QWORD PTR dest$[rsp], rax

; 475  :     for (i = 0; i < Py_SIZE(b); i++) {

  00130	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  00139	eb 0d		 jmp	 SHORT $LN3@tupleconca
$LN2@tupleconca:
  0013b	48 8b 44 24 20	 mov	 rax, QWORD PTR i$[rsp]
  00140	48 ff c0	 inc	 rax
  00143	48 89 44 24 20	 mov	 QWORD PTR i$[rsp], rax
$LN3@tupleconca:
  00148	48 8b 44 24 78	 mov	 rax, QWORD PTR bb$[rsp]
  0014d	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00151	48 39 44 24 20	 cmp	 QWORD PTR i$[rsp], rax
  00156	7d 32		 jge	 SHORT $LN1@tupleconca

; 476  :         PyObject *v = src[i];

  00158	48 8b 44 24 40	 mov	 rax, QWORD PTR src$[rsp]
  0015d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR i$[rsp]
  00162	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  00166	48 89 44 24 50	 mov	 QWORD PTR v$20757[rsp], rax

; 477  :         Py_INCREF(v);

  0016b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR v$20757[rsp]
  00170	e8 00 00 00 00	 call	 _Py_IncRef

; 478  :         dest[i] = v;

  00175	48 8b 44 24 28	 mov	 rax, QWORD PTR dest$[rsp]
  0017a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR i$[rsp]
  0017f	48 8b 54 24 50	 mov	 rdx, QWORD PTR v$20757[rsp]
  00184	48 89 14 c8	 mov	 QWORD PTR [rax+rcx*8], rdx

; 479  :     }

  00188	eb b1		 jmp	 SHORT $LN2@tupleconca
$LN1@tupleconca:

; 480  :     return (PyObject *)np;

  0018a	48 8b 44 24 38	 mov	 rax, QWORD PTR np$[rsp]
$LN10@tupleconca:

; 481  : #undef b
; 482  : }

  0018f	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00193	c3		 ret	 0
tupleconcat ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$tuplerepeat DD imagerel tuplerepeat
	DD	imagerel tuplerepeat+368
	DD	imagerel $unwind$tuplerepeat
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$tuplerepeat DD 010e01H
	DD	0a20eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT tuplerepeat
_TEXT	SEGMENT
p$ = 32
i$ = 40
size$ = 48
items$ = 56
np$ = 64
j$ = 72
a$ = 96
n$ = 104
tuplerepeat PROC					; COMDAT

; 486  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 487  :     Py_ssize_t i, j;
; 488  :     Py_ssize_t size;
; 489  :     PyTupleObject *np;
; 490  :     PyObject **p, **items;
; 491  :     if (n < 0)

  0000e	48 83 7c 24 68
	00		 cmp	 QWORD PTR n$[rsp], 0
  00014	7d 09		 jge	 SHORT $LN13@tuplerepea

; 492  :         n = 0;

  00016	48 c7 44 24 68
	00 00 00 00	 mov	 QWORD PTR n$[rsp], 0
$LN13@tuplerepea:

; 493  :     if (Py_SIZE(a) == 0 || n == 1) {

  0001f	48 8b 44 24 60	 mov	 rax, QWORD PTR a$[rsp]
  00024	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00029	74 08		 je	 SHORT $LN11@tuplerepea
  0002b	48 83 7c 24 68
	01		 cmp	 QWORD PTR n$[rsp], 1
  00031	75 3e		 jne	 SHORT $LN12@tuplerepea
$LN11@tuplerepea:

; 494  :         if (PyTuple_CheckExact(a)) {

  00033	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyTuple_Type
  0003a	48 8b 4c 24 60	 mov	 rcx, QWORD PTR a$[rsp]
  0003f	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00043	75 14		 jne	 SHORT $LN10@tuplerepea

; 495  :             /* Since tuples are immutable, we can return a shared
; 496  :                copy in this case */
; 497  :             Py_INCREF(a);

  00045	48 8b 4c 24 60	 mov	 rcx, QWORD PTR a$[rsp]
  0004a	e8 00 00 00 00	 call	 _Py_IncRef

; 498  :             return (PyObject *)a;

  0004f	48 8b 44 24 60	 mov	 rax, QWORD PTR a$[rsp]
  00054	e9 12 01 00 00	 jmp	 $LN14@tuplerepea
$LN10@tuplerepea:

; 499  :         }
; 500  :         if (Py_SIZE(a) == 0)

  00059	48 8b 44 24 60	 mov	 rax, QWORD PTR a$[rsp]
  0005e	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00063	75 0c		 jne	 SHORT $LN9@tuplerepea

; 501  :             return PyTuple_New(0);

  00065	33 c9		 xor	 ecx, ecx
  00067	e8 00 00 00 00	 call	 PyTuple_New
  0006c	e9 fa 00 00 00	 jmp	 $LN14@tuplerepea
$LN9@tuplerepea:
$LN12@tuplerepea:

; 502  :     }
; 503  :     if (n > PY_SSIZE_T_MAX / Py_SIZE(a))

  00071	48 b8 ff ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775807 ; 7fffffffffffffffH
  0007b	48 99		 cdq
  0007d	48 8b 4c 24 60	 mov	 rcx, QWORD PTR a$[rsp]
  00082	48 f7 79 60	 idiv	 QWORD PTR [rcx+96]
  00086	48 39 44 24 68	 cmp	 QWORD PTR n$[rsp], rax
  0008b	7e 0a		 jle	 SHORT $LN8@tuplerepea

; 504  :         return PyErr_NoMemory();

  0008d	e8 00 00 00 00	 call	 PyErr_NoMemory
  00092	e9 d4 00 00 00	 jmp	 $LN14@tuplerepea
$LN8@tuplerepea:

; 505  :     size = Py_SIZE(a) * n;

  00097	48 8b 44 24 60	 mov	 rax, QWORD PTR a$[rsp]
  0009c	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000a0	48 0f af 44 24
	68		 imul	 rax, QWORD PTR n$[rsp]
  000a6	48 89 44 24 30	 mov	 QWORD PTR size$[rsp], rax

; 506  :     np = (PyTupleObject *) PyTuple_New(size);

  000ab	48 8b 4c 24 30	 mov	 rcx, QWORD PTR size$[rsp]
  000b0	e8 00 00 00 00	 call	 PyTuple_New
  000b5	48 89 44 24 40	 mov	 QWORD PTR np$[rsp], rax

; 507  :     if (np == NULL)

  000ba	48 83 7c 24 40
	00		 cmp	 QWORD PTR np$[rsp], 0
  000c0	75 07		 jne	 SHORT $LN7@tuplerepea

; 508  :         return NULL;

  000c2	33 c0		 xor	 eax, eax
  000c4	e9 a2 00 00 00	 jmp	 $LN14@tuplerepea
$LN7@tuplerepea:

; 509  :     p = np->ob_item;

  000c9	48 8b 44 24 40	 mov	 rax, QWORD PTR np$[rsp]
  000ce	48 83 c0 70	 add	 rax, 112		; 00000070H
  000d2	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax

; 510  :     items = a->ob_item;

  000d7	48 8b 44 24 60	 mov	 rax, QWORD PTR a$[rsp]
  000dc	48 83 c0 70	 add	 rax, 112		; 00000070H
  000e0	48 89 44 24 38	 mov	 QWORD PTR items$[rsp], rax

; 511  :     for (i = 0; i < n; i++) {

  000e5	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  000ee	eb 0d		 jmp	 SHORT $LN6@tuplerepea
$LN5@tuplerepea:
  000f0	48 8b 44 24 28	 mov	 rax, QWORD PTR i$[rsp]
  000f5	48 ff c0	 inc	 rax
  000f8	48 89 44 24 28	 mov	 QWORD PTR i$[rsp], rax
$LN6@tuplerepea:
  000fd	48 8b 44 24 68	 mov	 rax, QWORD PTR n$[rsp]
  00102	48 39 44 24 28	 cmp	 QWORD PTR i$[rsp], rax
  00107	7d 5d		 jge	 SHORT $LN4@tuplerepea

; 512  :         for (j = 0; j < Py_SIZE(a); j++) {

  00109	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR j$[rsp], 0
  00112	eb 0d		 jmp	 SHORT $LN3@tuplerepea
$LN2@tuplerepea:
  00114	48 8b 44 24 48	 mov	 rax, QWORD PTR j$[rsp]
  00119	48 ff c0	 inc	 rax
  0011c	48 89 44 24 48	 mov	 QWORD PTR j$[rsp], rax
$LN3@tuplerepea:
  00121	48 8b 44 24 60	 mov	 rax, QWORD PTR a$[rsp]
  00126	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0012a	48 39 44 24 48	 cmp	 QWORD PTR j$[rsp], rax
  0012f	7d 33		 jge	 SHORT $LN1@tuplerepea

; 513  :             *p = items[j];

  00131	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00136	48 8b 4c 24 38	 mov	 rcx, QWORD PTR items$[rsp]
  0013b	48 8b 54 24 48	 mov	 rdx, QWORD PTR j$[rsp]
  00140	48 8b 0c d1	 mov	 rcx, QWORD PTR [rcx+rdx*8]
  00144	48 89 08	 mov	 QWORD PTR [rax], rcx

; 514  :             Py_INCREF(*p);

  00147	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0014c	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0014f	e8 00 00 00 00	 call	 _Py_IncRef

; 515  :             p++;

  00154	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00159	48 83 c0 08	 add	 rax, 8
  0015d	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax

; 516  :         }

  00162	eb b0		 jmp	 SHORT $LN2@tuplerepea
$LN1@tuplerepea:

; 517  :     }

  00164	eb 8a		 jmp	 SHORT $LN5@tuplerepea
$LN4@tuplerepea:

; 518  :     return (PyObject *) np;

  00166	48 8b 44 24 40	 mov	 rax, QWORD PTR np$[rsp]
$LN14@tuplerepea:

; 519  : }

  0016b	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0016f	c3		 ret	 0
tuplerepeat ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BP@DLHBEOMF@tuple?4index?$CIx?$CJ?3?5x?5not?5in?5tuple?$AA@ ; `string'
PUBLIC	??_C@_0N@GKKDPPOM@O?$HMO?$CGO?$CG?3index?$AA@	; `string'
EXTRN	PyExc_ValueError:QWORD
EXTRN	PyLong_FromSsize_t:PROC
EXTRN	PyArg_ParseTuple:PROC
EXTRN	_PyEval_SliceIndex:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$tupleindex DD imagerel tupleindex
	DD	imagerel tupleindex+375
	DD	imagerel $unwind$tupleindex
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$tupleindex DD 010e01H
	DD	0e20eH
xdata	ENDS
;	COMDAT ??_C@_0BP@DLHBEOMF@tuple?4index?$CIx?$CJ?3?5x?5not?5in?5tuple?$AA@
CONST	SEGMENT
??_C@_0BP@DLHBEOMF@tuple?4index?$CIx?$CJ?3?5x?5not?5in?5tuple?$AA@ DB 'tu'
	DB	'ple.index(x): x not in tuple', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@GKKDPPOM@O?$HMO?$CGO?$CG?3index?$AA@
CONST	SEGMENT
??_C@_0N@GKKDPPOM@O?$HMO?$CGO?$CG?3index?$AA@ DB 'O|O&O&:index', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT tupleindex
_TEXT	SEGMENT
v$ = 64
i$ = 72
stop$ = 80
start$ = 88
cmp$20824 = 96
self$ = 128
args$ = 136
tupleindex PROC						; COMDAT

; 523  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 524  :     Py_ssize_t i, start=0, stop=Py_SIZE(self);

  0000e	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR start$[rsp], 0
  00017	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0001f	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00023	48 89 44 24 50	 mov	 QWORD PTR stop$[rsp], rax

; 525  :     PyObject *v;
; 526  : 
; 527  :     if (!PyArg_ParseTuple(args, "O|O&O&:index", &v,
; 528  :                                 _PyEval_SliceIndex, &start,
; 529  :                                 _PyEval_SliceIndex, &stop))

  00028	48 8d 44 24 50	 lea	 rax, QWORD PTR stop$[rsp]
  0002d	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00032	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyEval_SliceIndex
  00039	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0003e	48 8d 44 24 58	 lea	 rax, QWORD PTR start$[rsp]
  00043	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00048	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_PyEval_SliceIndex
  0004f	4c 8d 44 24 40	 lea	 r8, QWORD PTR v$[rsp]
  00054	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@GKKDPPOM@O?$HMO?$CGO?$CG?3index?$AA@
  0005b	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  00063	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00068	85 c0		 test	 eax, eax
  0006a	75 07		 jne	 SHORT $LN11@tupleindex

; 530  :         return NULL;

  0006c	33 c0		 xor	 eax, eax
  0006e	e9 ff 00 00 00	 jmp	 $LN12@tupleindex
$LN11@tupleindex:

; 531  :     if (start < 0) {

  00073	48 83 7c 24 58
	00		 cmp	 QWORD PTR start$[rsp], 0
  00079	7d 2d		 jge	 SHORT $LN10@tupleindex

; 532  :         start += Py_SIZE(self);

  0007b	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00083	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00087	48 8b 4c 24 58	 mov	 rcx, QWORD PTR start$[rsp]
  0008c	48 03 c8	 add	 rcx, rax
  0008f	48 8b c1	 mov	 rax, rcx
  00092	48 89 44 24 58	 mov	 QWORD PTR start$[rsp], rax

; 533  :         if (start < 0)

  00097	48 83 7c 24 58
	00		 cmp	 QWORD PTR start$[rsp], 0
  0009d	7d 09		 jge	 SHORT $LN9@tupleindex

; 534  :             start = 0;

  0009f	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR start$[rsp], 0
$LN9@tupleindex:
$LN10@tupleindex:

; 535  :     }
; 536  :     if (stop < 0) {

  000a8	48 83 7c 24 50
	00		 cmp	 QWORD PTR stop$[rsp], 0
  000ae	7d 2d		 jge	 SHORT $LN8@tupleindex

; 537  :         stop += Py_SIZE(self);

  000b0	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  000b8	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000bc	48 8b 4c 24 50	 mov	 rcx, QWORD PTR stop$[rsp]
  000c1	48 03 c8	 add	 rcx, rax
  000c4	48 8b c1	 mov	 rax, rcx
  000c7	48 89 44 24 50	 mov	 QWORD PTR stop$[rsp], rax

; 538  :         if (stop < 0)

  000cc	48 83 7c 24 50
	00		 cmp	 QWORD PTR stop$[rsp], 0
  000d2	7d 09		 jge	 SHORT $LN7@tupleindex

; 539  :             stop = 0;

  000d4	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR stop$[rsp], 0
$LN7@tupleindex:
$LN8@tupleindex:

; 540  :     }
; 541  :     for (i = start; i < stop && i < Py_SIZE(self); i++) {

  000dd	48 8b 44 24 58	 mov	 rax, QWORD PTR start$[rsp]
  000e2	48 89 44 24 48	 mov	 QWORD PTR i$[rsp], rax
  000e7	eb 0d		 jmp	 SHORT $LN6@tupleindex
$LN5@tupleindex:
  000e9	48 8b 44 24 48	 mov	 rax, QWORD PTR i$[rsp]
  000ee	48 ff c0	 inc	 rax
  000f1	48 89 44 24 48	 mov	 QWORD PTR i$[rsp], rax
$LN6@tupleindex:
  000f6	48 8b 44 24 50	 mov	 rax, QWORD PTR stop$[rsp]
  000fb	48 39 44 24 48	 cmp	 QWORD PTR i$[rsp], rax
  00100	7d 5b		 jge	 SHORT $LN4@tupleindex
  00102	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0010a	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0010e	48 39 44 24 48	 cmp	 QWORD PTR i$[rsp], rax
  00113	7d 48		 jge	 SHORT $LN4@tupleindex

; 542  :         int cmp = PyObject_RichCompareBool(self->ob_item[i], v, Py_EQ);

  00115	41 b8 02 00 00
	00		 mov	 r8d, 2
  0011b	48 8b 54 24 40	 mov	 rdx, QWORD PTR v$[rsp]
  00120	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00128	48 8b 4c 24 48	 mov	 rcx, QWORD PTR i$[rsp]
  0012d	48 8b 4c c8 70	 mov	 rcx, QWORD PTR [rax+rcx*8+112]
  00132	e8 00 00 00 00	 call	 PyObject_RichCompareBool
  00137	89 44 24 60	 mov	 DWORD PTR cmp$20824[rsp], eax

; 543  :         if (cmp > 0)

  0013b	83 7c 24 60 00	 cmp	 DWORD PTR cmp$20824[rsp], 0
  00140	7e 0e		 jle	 SHORT $LN3@tupleindex

; 544  :             return PyLong_FromSsize_t(i);

  00142	48 8b 4c 24 48	 mov	 rcx, QWORD PTR i$[rsp]
  00147	e8 00 00 00 00	 call	 PyLong_FromSsize_t
  0014c	eb 24		 jmp	 SHORT $LN12@tupleindex
  0014e	eb 0b		 jmp	 SHORT $LN2@tupleindex
$LN3@tupleindex:

; 545  :         else if (cmp < 0)

  00150	83 7c 24 60 00	 cmp	 DWORD PTR cmp$20824[rsp], 0
  00155	7d 04		 jge	 SHORT $LN1@tupleindex

; 546  :             return NULL;

  00157	33 c0		 xor	 eax, eax
  00159	eb 17		 jmp	 SHORT $LN12@tupleindex
$LN1@tupleindex:
$LN2@tupleindex:

; 547  :     }

  0015b	eb 8c		 jmp	 SHORT $LN5@tupleindex
$LN4@tupleindex:

; 548  :     PyErr_SetString(PyExc_ValueError, "tuple.index(x): x not in tuple");

  0015d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BP@DLHBEOMF@tuple?4index?$CIx?$CJ?3?5x?5not?5in?5tuple?$AA@
  00164	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0016b	e8 00 00 00 00	 call	 PyErr_SetString

; 549  :     return NULL;

  00170	33 c0		 xor	 eax, eax
$LN12@tupleindex:

; 550  : }

  00172	48 83 c4 78	 add	 rsp, 120		; 00000078H
  00176	c3		 ret	 0
tupleindex ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$tuplecount DD imagerel tuplecount
	DD	imagerel tuplecount+148
	DD	imagerel $unwind$tuplecount
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$tuplecount DD 010e01H
	DD	0820eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT tuplecount
_TEXT	SEGMENT
count$ = 32
i$ = 40
cmp$20843 = 48
self$ = 80
v$ = 88
tuplecount PROC						; COMDAT

; 554  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 555  :     Py_ssize_t count = 0;

  0000e	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR count$[rsp], 0

; 556  :     Py_ssize_t i;
; 557  : 
; 558  :     for (i = 0; i < Py_SIZE(self); i++) {

  00017	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  00020	eb 0d		 jmp	 SHORT $LN6@tuplecount
$LN5@tuplecount:
  00022	48 8b 44 24 28	 mov	 rax, QWORD PTR i$[rsp]
  00027	48 ff c0	 inc	 rax
  0002a	48 89 44 24 28	 mov	 QWORD PTR i$[rsp], rax
$LN6@tuplecount:
  0002f	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00034	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00038	48 39 44 24 28	 cmp	 QWORD PTR i$[rsp], rax
  0003d	7d 46		 jge	 SHORT $LN4@tuplecount

; 559  :         int cmp = PyObject_RichCompareBool(self->ob_item[i], v, Py_EQ);

  0003f	41 b8 02 00 00
	00		 mov	 r8d, 2
  00045	48 8b 54 24 58	 mov	 rdx, QWORD PTR v$[rsp]
  0004a	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  0004f	48 8b 4c 24 28	 mov	 rcx, QWORD PTR i$[rsp]
  00054	48 8b 4c c8 70	 mov	 rcx, QWORD PTR [rax+rcx*8+112]
  00059	e8 00 00 00 00	 call	 PyObject_RichCompareBool
  0005e	89 44 24 30	 mov	 DWORD PTR cmp$20843[rsp], eax

; 560  :         if (cmp > 0)

  00062	83 7c 24 30 00	 cmp	 DWORD PTR cmp$20843[rsp], 0
  00067	7e 0f		 jle	 SHORT $LN3@tuplecount

; 561  :             count++;

  00069	48 8b 44 24 20	 mov	 rax, QWORD PTR count$[rsp]
  0006e	48 ff c0	 inc	 rax
  00071	48 89 44 24 20	 mov	 QWORD PTR count$[rsp], rax
  00076	eb 0b		 jmp	 SHORT $LN2@tuplecount
$LN3@tuplecount:

; 562  :         else if (cmp < 0)

  00078	83 7c 24 30 00	 cmp	 DWORD PTR cmp$20843[rsp], 0
  0007d	7d 04		 jge	 SHORT $LN1@tuplecount

; 563  :             return NULL;

  0007f	33 c0		 xor	 eax, eax
  00081	eb 0c		 jmp	 SHORT $LN7@tuplecount
$LN1@tuplecount:
$LN2@tuplecount:

; 564  :     }

  00083	eb 9d		 jmp	 SHORT $LN5@tuplecount
$LN4@tuplecount:

; 565  :     return PyLong_FromSsize_t(count);

  00085	48 8b 4c 24 20	 mov	 rcx, QWORD PTR count$[rsp]
  0008a	e8 00 00 00 00	 call	 PyLong_FromSsize_t
$LN7@tuplecount:

; 566  : }

  0008f	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00093	c3		 ret	 0
tuplecount ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@FOEPELLG@tupletraverse?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$tupletraverse DD imagerel tupletraverse
	DD	imagerel tupletraverse+165
	DD	imagerel $unwind$tupletraverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$tupletraverse DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT ??_C@_0O@FOEPELLG@tupletraverse?$AA@
CONST	SEGMENT
??_C@_0O@FOEPELLG@tupletraverse?$AA@ DB 'tupletraverse', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT tupletraverse
_TEXT	SEGMENT
i$ = 32
vret$20867 = 40
o$ = 64
visit$ = 72
arg$ = 80
tupletraverse PROC					; COMDAT

; 570  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 571  :     Py_ssize_t i;
; 572  : 
; 573  :     for (i = Py_SIZE(o); --i >= 0; )

  00013	48 8b 44 24 40	 mov	 rax, QWORD PTR o$[rsp]
  00018	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0001c	48 89 44 24 20	 mov	 QWORD PTR i$[rsp], rax
$LN8@tupletrave:
  00021	48 8b 44 24 20	 mov	 rax, QWORD PTR i$[rsp]
  00026	48 ff c8	 dec	 rax
  00029	48 89 44 24 20	 mov	 QWORD PTR i$[rsp], rax
  0002e	48 83 7c 24 20
	00		 cmp	 QWORD PTR i$[rsp], 0
  00034	7c 68		 jl	 SHORT $LN7@tupletrave
$LN6@tupletrave:

; 574  :         Py_VISIT(o->ob_item[i]);

  00036	e8 00 00 00 00	 call	 _Py_PXCTX
  0003b	85 c0		 test	 eax, eax
  0003d	74 1c		 je	 SHORT $LN3@tupletrave
  0003f	45 33 c9	 xor	 r9d, r9d
  00042	41 b8 3e 02 00
	00		 mov	 r8d, 574		; 0000023eH
  00048	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@NPBNLKPK@?4?4?2Objects?2tupleobject?4c?$AA@
  0004f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@FOEPELLG@tupletraverse?$AA@
  00056	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@tupletrave:
  0005b	48 8b 44 24 40	 mov	 rax, QWORD PTR o$[rsp]
  00060	48 8b 4c 24 20	 mov	 rcx, QWORD PTR i$[rsp]
  00065	48 83 7c c8 70
	00		 cmp	 QWORD PTR [rax+rcx*8+112], 0
  0006b	74 29		 je	 SHORT $LN2@tupletrave
  0006d	48 8b 54 24 50	 mov	 rdx, QWORD PTR arg$[rsp]
  00072	48 8b 44 24 40	 mov	 rax, QWORD PTR o$[rsp]
  00077	48 8b 4c 24 20	 mov	 rcx, QWORD PTR i$[rsp]
  0007c	48 8b 4c c8 70	 mov	 rcx, QWORD PTR [rax+rcx*8+112]
  00081	ff 54 24 48	 call	 QWORD PTR visit$[rsp]
  00085	89 44 24 28	 mov	 DWORD PTR vret$20867[rsp], eax
  00089	83 7c 24 28 00	 cmp	 DWORD PTR vret$20867[rsp], 0
  0008e	74 06		 je	 SHORT $LN1@tupletrave
  00090	8b 44 24 28	 mov	 eax, DWORD PTR vret$20867[rsp]
  00094	eb 0a		 jmp	 SHORT $LN9@tupletrave
$LN1@tupletrave:
$LN2@tupletrave:
  00096	33 c0		 xor	 eax, eax
  00098	85 c0		 test	 eax, eax
  0009a	75 9a		 jne	 SHORT $LN6@tupletrave
  0009c	eb 83		 jmp	 SHORT $LN8@tupletrave
$LN7@tupletrave:

; 575  :     return 0;

  0009e	33 c0		 xor	 eax, eax
$LN9@tupletrave:

; 576  : }

  000a0	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a4	c3		 ret	 0
tupletraverse ENDP
_TEXT	ENDS
EXTRN	PyObject_RichCompare:PROC
EXTRN	_Py_FalseStruct:BYTE
EXTRN	_Py_TrueStruct:BYTE
EXTRN	__ImageBase:BYTE
EXTRN	_Py_NotImplementedStruct:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$tuplerichcompare DD imagerel tuplerichcompare
	DD	imagerel tuplerichcompare+788
	DD	imagerel $unwind$tuplerichcompare
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$tuplerichcompare DD 021601H
	DD	0110116H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT tuplerichcompare
_TEXT	SEGMENT
i$ = 32
wlen$ = 40
vt$ = 48
vlen$ = 56
wt$ = 64
k$20895 = 72
res$20902 = 80
cmp$20901 = 88
tv92 = 92
tv94 = 96
tv128 = 100
tv130 = 104
tv132 = 108
tv134 = 112
tv136 = 116
v$ = 144
w$ = 152
op$ = 160
tuplerichcompare PROC					; COMDAT

; 580  : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 581  :     PyTupleObject *vt, *wt;
; 582  :     Py_ssize_t i;
; 583  :     Py_ssize_t vlen, wlen;
; 584  : 
; 585  :     if (!PyTuple_Check(v) || !PyTuple_Check(w))

  00016	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR v$[rsp]
  0001e	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00022	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00028	25 00 00 00 04	 and	 eax, 67108864		; 04000000H
  0002d	85 c0		 test	 eax, eax
  0002f	74 1b		 je	 SHORT $LN21@tuplerichc
  00031	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR w$[rsp]
  00039	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0003d	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00043	25 00 00 00 04	 and	 eax, 67108864		; 04000000H
  00048	85 c0		 test	 eax, eax
  0004a	75 18		 jne	 SHORT $LN22@tuplerichc
$LN21@tuplerichc:

; 586  :         Py_RETURN_NOTIMPLEMENTED;

  0004c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NotImplementedStruct
  00053	e8 00 00 00 00	 call	 _Py_IncRef
  00058	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NotImplementedStruct
  0005f	e9 8e 02 00 00	 jmp	 $LN23@tuplerichc
$LN22@tuplerichc:

; 587  : 
; 588  :     vt = (PyTupleObject *)v;

  00064	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR v$[rsp]
  0006c	48 89 44 24 30	 mov	 QWORD PTR vt$[rsp], rax

; 589  :     wt = (PyTupleObject *)w;

  00071	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR w$[rsp]
  00079	48 89 44 24 40	 mov	 QWORD PTR wt$[rsp], rax

; 590  : 
; 591  :     vlen = Py_SIZE(vt);

  0007e	48 8b 44 24 30	 mov	 rax, QWORD PTR vt$[rsp]
  00083	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00087	48 89 44 24 38	 mov	 QWORD PTR vlen$[rsp], rax

; 592  :     wlen = Py_SIZE(wt);

  0008c	48 8b 44 24 40	 mov	 rax, QWORD PTR wt$[rsp]
  00091	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00095	48 89 44 24 28	 mov	 QWORD PTR wlen$[rsp], rax

; 593  : 
; 594  :     /* Note:  the corresponding code for lists has an "early out" test
; 595  :      * here when op is EQ or NE and the lengths differ.  That pays there,
; 596  :      * but Tim was unable to find any real code where EQ/NE tuple
; 597  :      * compares don't have the same length, so testing for it here would
; 598  :      * have cost without benefit.
; 599  :      */
; 600  : 
; 601  :     /* Search for the first index where items are different.
; 602  :      * Note that because tuples are immutable, it's safe to reuse
; 603  :      * vlen and wlen across the comparison calls.
; 604  :      */
; 605  :     for (i = 0; i < vlen && i < wlen; i++) {

  0009a	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  000a3	eb 0d		 jmp	 SHORT $LN20@tuplerichc
$LN19@tuplerichc:
  000a5	48 8b 44 24 20	 mov	 rax, QWORD PTR i$[rsp]
  000aa	48 ff c0	 inc	 rax
  000ad	48 89 44 24 20	 mov	 QWORD PTR i$[rsp], rax
$LN20@tuplerichc:
  000b2	48 8b 44 24 38	 mov	 rax, QWORD PTR vlen$[rsp]
  000b7	48 39 44 24 20	 cmp	 QWORD PTR i$[rsp], rax
  000bc	7d 52		 jge	 SHORT $LN18@tuplerichc
  000be	48 8b 44 24 28	 mov	 rax, QWORD PTR wlen$[rsp]
  000c3	48 39 44 24 20	 cmp	 QWORD PTR i$[rsp], rax
  000c8	7d 46		 jge	 SHORT $LN18@tuplerichc

; 606  :         int k = PyObject_RichCompareBool(vt->ob_item[i],
; 607  :                                          wt->ob_item[i], Py_EQ);

  000ca	41 b8 02 00 00
	00		 mov	 r8d, 2
  000d0	48 8b 44 24 40	 mov	 rax, QWORD PTR wt$[rsp]
  000d5	48 8b 4c 24 20	 mov	 rcx, QWORD PTR i$[rsp]
  000da	48 8b 54 c8 70	 mov	 rdx, QWORD PTR [rax+rcx*8+112]
  000df	48 8b 44 24 30	 mov	 rax, QWORD PTR vt$[rsp]
  000e4	48 8b 4c 24 20	 mov	 rcx, QWORD PTR i$[rsp]
  000e9	48 8b 4c c8 70	 mov	 rcx, QWORD PTR [rax+rcx*8+112]
  000ee	e8 00 00 00 00	 call	 PyObject_RichCompareBool
  000f3	89 44 24 48	 mov	 DWORD PTR k$20895[rsp], eax

; 608  :         if (k < 0)

  000f7	83 7c 24 48 00	 cmp	 DWORD PTR k$20895[rsp], 0
  000fc	7d 07		 jge	 SHORT $LN17@tuplerichc

; 609  :             return NULL;

  000fe	33 c0		 xor	 eax, eax
  00100	e9 ed 01 00 00	 jmp	 $LN23@tuplerichc
$LN17@tuplerichc:

; 610  :         if (!k)

  00105	83 7c 24 48 00	 cmp	 DWORD PTR k$20895[rsp], 0
  0010a	75 02		 jne	 SHORT $LN16@tuplerichc

; 611  :             break;

  0010c	eb 02		 jmp	 SHORT $LN18@tuplerichc
$LN16@tuplerichc:

; 612  :     }

  0010e	eb 95		 jmp	 SHORT $LN19@tuplerichc
$LN18@tuplerichc:

; 613  : 
; 614  :     if (i >= vlen || i >= wlen) {

  00110	48 8b 44 24 38	 mov	 rax, QWORD PTR vlen$[rsp]
  00115	48 39 44 24 20	 cmp	 QWORD PTR i$[rsp], rax
  0011a	7d 10		 jge	 SHORT $LN14@tuplerichc
  0011c	48 8b 44 24 28	 mov	 rax, QWORD PTR wlen$[rsp]
  00121	48 39 44 24 20	 cmp	 QWORD PTR i$[rsp], rax
  00126	0f 8c 5d 01 00
	00		 jl	 $LN15@tuplerichc
$LN14@tuplerichc:

; 615  :         /* No more items to compare -- compare sizes */
; 616  :         int cmp;
; 617  :         PyObject *res;
; 618  :         switch (op) {

  0012c	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR op$[rsp]
  00133	89 44 24 5c	 mov	 DWORD PTR tv92[rsp], eax
  00137	83 7c 24 5c 05	 cmp	 DWORD PTR tv92[rsp], 5
  0013c	0f 87 0e 01 00
	00		 ja	 $LN5@tuplerichc
  00142	48 63 44 24 5c	 movsxd	 rax, DWORD PTR tv92[rsp]
  00147	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  0014e	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN37@tuplerichc[rcx+rax*4]
  00155	48 03 c1	 add	 rax, rcx
  00158	ff e0		 jmp	 rax
$LN11@tuplerichc:

; 619  :         case Py_LT: cmp = vlen <  wlen; break;

  0015a	48 8b 44 24 28	 mov	 rax, QWORD PTR wlen$[rsp]
  0015f	48 39 44 24 38	 cmp	 QWORD PTR vlen$[rsp], rax
  00164	7d 0a		 jge	 SHORT $LN25@tuplerichc
  00166	c7 44 24 60 01
	00 00 00	 mov	 DWORD PTR tv94[rsp], 1
  0016e	eb 08		 jmp	 SHORT $LN26@tuplerichc
$LN25@tuplerichc:
  00170	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR tv94[rsp], 0
$LN26@tuplerichc:
  00178	8b 44 24 60	 mov	 eax, DWORD PTR tv94[rsp]
  0017c	89 44 24 58	 mov	 DWORD PTR cmp$20901[rsp], eax
  00180	e9 d2 00 00 00	 jmp	 $LN12@tuplerichc
$LN10@tuplerichc:

; 620  :         case Py_LE: cmp = vlen <= wlen; break;

  00185	48 8b 44 24 28	 mov	 rax, QWORD PTR wlen$[rsp]
  0018a	48 39 44 24 38	 cmp	 QWORD PTR vlen$[rsp], rax
  0018f	7f 0a		 jg	 SHORT $LN27@tuplerichc
  00191	c7 44 24 64 01
	00 00 00	 mov	 DWORD PTR tv128[rsp], 1
  00199	eb 08		 jmp	 SHORT $LN28@tuplerichc
$LN27@tuplerichc:
  0019b	c7 44 24 64 00
	00 00 00	 mov	 DWORD PTR tv128[rsp], 0
$LN28@tuplerichc:
  001a3	8b 44 24 64	 mov	 eax, DWORD PTR tv128[rsp]
  001a7	89 44 24 58	 mov	 DWORD PTR cmp$20901[rsp], eax
  001ab	e9 a7 00 00 00	 jmp	 $LN12@tuplerichc
$LN9@tuplerichc:

; 621  :         case Py_EQ: cmp = vlen == wlen; break;

  001b0	48 8b 44 24 28	 mov	 rax, QWORD PTR wlen$[rsp]
  001b5	48 39 44 24 38	 cmp	 QWORD PTR vlen$[rsp], rax
  001ba	75 0a		 jne	 SHORT $LN29@tuplerichc
  001bc	c7 44 24 68 01
	00 00 00	 mov	 DWORD PTR tv130[rsp], 1
  001c4	eb 08		 jmp	 SHORT $LN30@tuplerichc
$LN29@tuplerichc:
  001c6	c7 44 24 68 00
	00 00 00	 mov	 DWORD PTR tv130[rsp], 0
$LN30@tuplerichc:
  001ce	8b 44 24 68	 mov	 eax, DWORD PTR tv130[rsp]
  001d2	89 44 24 58	 mov	 DWORD PTR cmp$20901[rsp], eax
  001d6	eb 7f		 jmp	 SHORT $LN12@tuplerichc
$LN8@tuplerichc:

; 622  :         case Py_NE: cmp = vlen != wlen; break;

  001d8	48 8b 44 24 28	 mov	 rax, QWORD PTR wlen$[rsp]
  001dd	48 39 44 24 38	 cmp	 QWORD PTR vlen$[rsp], rax
  001e2	74 0a		 je	 SHORT $LN31@tuplerichc
  001e4	c7 44 24 6c 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  001ec	eb 08		 jmp	 SHORT $LN32@tuplerichc
$LN31@tuplerichc:
  001ee	c7 44 24 6c 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN32@tuplerichc:
  001f6	8b 44 24 6c	 mov	 eax, DWORD PTR tv132[rsp]
  001fa	89 44 24 58	 mov	 DWORD PTR cmp$20901[rsp], eax
  001fe	eb 57		 jmp	 SHORT $LN12@tuplerichc
$LN7@tuplerichc:

; 623  :         case Py_GT: cmp = vlen >  wlen; break;

  00200	48 8b 44 24 28	 mov	 rax, QWORD PTR wlen$[rsp]
  00205	48 39 44 24 38	 cmp	 QWORD PTR vlen$[rsp], rax
  0020a	7e 0a		 jle	 SHORT $LN33@tuplerichc
  0020c	c7 44 24 70 01
	00 00 00	 mov	 DWORD PTR tv134[rsp], 1
  00214	eb 08		 jmp	 SHORT $LN34@tuplerichc
$LN33@tuplerichc:
  00216	c7 44 24 70 00
	00 00 00	 mov	 DWORD PTR tv134[rsp], 0
$LN34@tuplerichc:
  0021e	8b 44 24 70	 mov	 eax, DWORD PTR tv134[rsp]
  00222	89 44 24 58	 mov	 DWORD PTR cmp$20901[rsp], eax
  00226	eb 2f		 jmp	 SHORT $LN12@tuplerichc
$LN6@tuplerichc:

; 624  :         case Py_GE: cmp = vlen >= wlen; break;

  00228	48 8b 44 24 28	 mov	 rax, QWORD PTR wlen$[rsp]
  0022d	48 39 44 24 38	 cmp	 QWORD PTR vlen$[rsp], rax
  00232	7c 0a		 jl	 SHORT $LN35@tuplerichc
  00234	c7 44 24 74 01
	00 00 00	 mov	 DWORD PTR tv136[rsp], 1
  0023c	eb 08		 jmp	 SHORT $LN36@tuplerichc
$LN35@tuplerichc:
  0023e	c7 44 24 74 00
	00 00 00	 mov	 DWORD PTR tv136[rsp], 0
$LN36@tuplerichc:
  00246	8b 44 24 74	 mov	 eax, DWORD PTR tv136[rsp]
  0024a	89 44 24 58	 mov	 DWORD PTR cmp$20901[rsp], eax
  0024e	eb 07		 jmp	 SHORT $LN12@tuplerichc
$LN5@tuplerichc:

; 625  :         default: return NULL; /* cannot happen */

  00250	33 c0		 xor	 eax, eax
  00252	e9 9b 00 00 00	 jmp	 $LN23@tuplerichc
$LN12@tuplerichc:

; 626  :         }
; 627  :         if (cmp)

  00257	83 7c 24 58 00	 cmp	 DWORD PTR cmp$20901[rsp], 0
  0025c	74 0e		 je	 SHORT $LN4@tuplerichc

; 628  :             res = Py_True;

  0025e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  00265	48 89 44 24 50	 mov	 QWORD PTR res$20902[rsp], rax

; 629  :         else

  0026a	eb 0c		 jmp	 SHORT $LN3@tuplerichc
$LN4@tuplerichc:

; 630  :             res = Py_False;

  0026c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct
  00273	48 89 44 24 50	 mov	 QWORD PTR res$20902[rsp], rax
$LN3@tuplerichc:

; 631  :         Py_INCREF(res);

  00278	48 8b 4c 24 50	 mov	 rcx, QWORD PTR res$20902[rsp]
  0027d	e8 00 00 00 00	 call	 _Py_IncRef

; 632  :         return res;

  00282	48 8b 44 24 50	 mov	 rax, QWORD PTR res$20902[rsp]
  00287	eb 69		 jmp	 SHORT $LN23@tuplerichc
$LN15@tuplerichc:

; 633  :     }
; 634  : 
; 635  :     /* We have an item that differs -- shortcuts for EQ/NE */
; 636  :     if (op == Py_EQ) {

  00289	83 bc 24 a0 00
	00 00 02	 cmp	 DWORD PTR op$[rsp], 2
  00291	75 15		 jne	 SHORT $LN2@tuplerichc

; 637  :         Py_INCREF(Py_False);

  00293	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_FalseStruct
  0029a	e8 00 00 00 00	 call	 _Py_IncRef

; 638  :         return Py_False;

  0029f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct
  002a6	eb 4a		 jmp	 SHORT $LN23@tuplerichc
$LN2@tuplerichc:

; 639  :     }
; 640  :     if (op == Py_NE) {

  002a8	83 bc 24 a0 00
	00 00 03	 cmp	 DWORD PTR op$[rsp], 3
  002b0	75 15		 jne	 SHORT $LN1@tuplerichc

; 641  :         Py_INCREF(Py_True);

  002b2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_TrueStruct
  002b9	e8 00 00 00 00	 call	 _Py_IncRef

; 642  :         return Py_True;

  002be	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  002c5	eb 2b		 jmp	 SHORT $LN23@tuplerichc
$LN1@tuplerichc:

; 643  :     }
; 644  : 
; 645  :     /* Compare the final item again using the proper operator */
; 646  :     return PyObject_RichCompare(vt->ob_item[i], wt->ob_item[i], op);

  002c7	44 8b 84 24 a0
	00 00 00	 mov	 r8d, DWORD PTR op$[rsp]
  002cf	48 8b 44 24 40	 mov	 rax, QWORD PTR wt$[rsp]
  002d4	48 8b 4c 24 20	 mov	 rcx, QWORD PTR i$[rsp]
  002d9	48 8b 54 c8 70	 mov	 rdx, QWORD PTR [rax+rcx*8+112]
  002de	48 8b 44 24 30	 mov	 rax, QWORD PTR vt$[rsp]
  002e3	48 8b 4c 24 20	 mov	 rcx, QWORD PTR i$[rsp]
  002e8	48 8b 4c c8 70	 mov	 rcx, QWORD PTR [rax+rcx*8+112]
  002ed	e8 00 00 00 00	 call	 PyObject_RichCompare
$LN23@tuplerichc:

; 647  : }

  002f2	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  002f9	c3		 ret	 0
  002fa	66 90		 npad	 2
$LN37@tuplerichc:
  002fc	00 00 00 00	 DD	 $LN11@tuplerichc
  00300	00 00 00 00	 DD	 $LN10@tuplerichc
  00304	00 00 00 00	 DD	 $LN9@tuplerichc
  00308	00 00 00 00	 DD	 $LN8@tuplerichc
  0030c	00 00 00 00	 DD	 $LN7@tuplerichc
  00310	00 00 00 00	 DD	 $LN6@tuplerichc
tuplerichcompare ENDP
_TEXT	ENDS
PUBLIC	??_C@_08GADGNMJP@?$HMO?3tuple?$AA@		; `string'
EXTRN	PySequence_Tuple:PROC
EXTRN	PyArg_ParseTupleAndKeywords:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$tuple_new DD imagerel tuple_new
	DD	imagerel tuple_new+145
	DD	imagerel $unwind$tuple_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$tuple_new DD 011301H
	DD	08213H
xdata	ENDS
;	COMDAT ??_C@_08GADGNMJP@?$HMO?3tuple?$AA@
CONST	SEGMENT
??_C@_08GADGNMJP@?$HMO?3tuple?$AA@ DB '|O:tuple', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT tuple_new
_TEXT	SEGMENT
arg$ = 48
type$ = 80
args$ = 88
kwds$ = 96
tuple_new PROC						; COMDAT

; 654  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 655  :     PyObject *arg = NULL;

  00013	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR arg$[rsp], 0

; 656  :     static char *kwlist[] = {"sequence", 0};
; 657  : 
; 658  :     if (type != &PyTuple_Type)

  0001c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyTuple_Type
  00023	48 39 44 24 50	 cmp	 QWORD PTR type$[rsp], rax
  00028	74 16		 je	 SHORT $LN4@tuple_new

; 659  :         return tuple_subtype_new(type, args, kwds);

  0002a	4c 8b 44 24 60	 mov	 r8, QWORD PTR kwds$[rsp]
  0002f	48 8b 54 24 58	 mov	 rdx, QWORD PTR args$[rsp]
  00034	48 8b 4c 24 50	 mov	 rcx, QWORD PTR type$[rsp]
  00039	e8 00 00 00 00	 call	 tuple_subtype_new
  0003e	eb 4c		 jmp	 SHORT $LN5@tuple_new
$LN4@tuple_new:

; 660  :     if (!PyArg_ParseTupleAndKeywords(args, kwds, "|O:tuple", kwlist, &arg))

  00040	48 8d 44 24 30	 lea	 rax, QWORD PTR arg$[rsp]
  00045	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0004a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?kwlist@?1??tuple_new@@9@9
  00051	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_08GADGNMJP@?$HMO?3tuple?$AA@
  00058	48 8b 54 24 60	 mov	 rdx, QWORD PTR kwds$[rsp]
  0005d	48 8b 4c 24 58	 mov	 rcx, QWORD PTR args$[rsp]
  00062	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  00067	85 c0		 test	 eax, eax
  00069	75 04		 jne	 SHORT $LN3@tuple_new

; 661  :         return NULL;

  0006b	33 c0		 xor	 eax, eax
  0006d	eb 1d		 jmp	 SHORT $LN5@tuple_new
$LN3@tuple_new:

; 662  : 
; 663  :     if (arg == NULL)

  0006f	48 83 7c 24 30
	00		 cmp	 QWORD PTR arg$[rsp], 0
  00075	75 0b		 jne	 SHORT $LN2@tuple_new

; 664  :         return PyTuple_New(0);

  00077	33 c9		 xor	 ecx, ecx
  00079	e8 00 00 00 00	 call	 PyTuple_New
  0007e	eb 0c		 jmp	 SHORT $LN5@tuple_new

; 665  :     else

  00080	eb 0a		 jmp	 SHORT $LN1@tuple_new
$LN2@tuple_new:

; 666  :         return PySequence_Tuple(arg);

  00082	48 8b 4c 24 30	 mov	 rcx, QWORD PTR arg$[rsp]
  00087	e8 00 00 00 00	 call	 PySequence_Tuple
$LN1@tuple_new:
$LN5@tuple_new:

; 667  : }

  0008c	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00090	c3		 ret	 0
tuple_new ENDP
_TEXT	ENDS
PUBLIC	??_C@_1CG@LMGEEDCO@?$AAP?$AAy?$AAT?$AAu?$AAp?$AAl?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAt?$AAm?$AAp?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1EM@HMKLPHJJ@?$AAP?$AAy?$AAT?$AAy?$AAp?$AAe?$AA_?$AAI?$AAs?$AAS?$AAu?$AAb?$AAt?$AAy?$AAp?$AAe?$AA?$CI?$AAt?$AAy?$AAp?$AAe?$AA?0?$AA?5?$AA?$CG?$AAP?$AAy?$AAT?$AAu?$AAp?$AAl?$AAe?$AA_@ ; `string'
EXTRN	PyType_IsSubtype:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$tuple_subtype_new DD imagerel tuple_subtype_new
	DD	imagerel tuple_subtype_new+322
	DD	imagerel $unwind$tuple_subtype_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$tuple_subtype_new DD 011301H
	DD	0a213H
xdata	ENDS
;	COMDAT ??_C@_1CG@LMGEEDCO@?$AAP?$AAy?$AAT?$AAu?$AAp?$AAl?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAt?$AAm?$AAp?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CG@LMGEEDCO@?$AAP?$AAy?$AAT?$AAu?$AAp?$AAl?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAt?$AAm?$AAp?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'T', 00H, 'u', 00H, 'p', 00H, 'l', 00H, 'e', 00H
	DB	'_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, '('
	DB	00H, 't', 00H, 'm', 00H, 'p', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EM@HMKLPHJJ@?$AAP?$AAy?$AAT?$AAy?$AAp?$AAe?$AA_?$AAI?$AAs?$AAS?$AAu?$AAb?$AAt?$AAy?$AAp?$AAe?$AA?$CI?$AAt?$AAy?$AAp?$AAe?$AA?0?$AA?5?$AA?$CG?$AAP?$AAy?$AAT?$AAu?$AAp?$AAl?$AAe?$AA_@
CONST	SEGMENT
??_C@_1EM@HMKLPHJJ@?$AAP?$AAy?$AAT?$AAy?$AAp?$AAe?$AA_?$AAI?$AAs?$AAS?$AAu?$AAb?$AAt?$AAy?$AAp?$AAe?$AA?$CI?$AAt?$AAy?$AAp?$AAe?$AA?0?$AA?5?$AA?$CG?$AAP?$AAy?$AAT?$AAu?$AAp?$AAl?$AAe?$AA_@ DB 'P'
	DB	00H, 'y', 00H, 'T', 00H, 'y', 00H, 'p', 00H, 'e', 00H, '_', 00H
	DB	'I', 00H, 's', 00H, 'S', 00H, 'u', 00H, 'b', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, '(', 00H, 't', 00H, 'y', 00H, 'p', 00H
	DB	'e', 00H, ',', 00H, ' ', 00H, '&', 00H, 'P', 00H, 'y', 00H, 'T'
	DB	00H, 'u', 00H, 'p', 00H, 'l', 00H, 'e', 00H, '_', 00H, 'T', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, ')', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT tuple_subtype_new
_TEXT	SEGMENT
n$ = 32
i$ = 40
tmp$ = 48
item$ = 56
newobj$ = 64
type$ = 96
args$ = 104
kwds$ = 112
tuple_subtype_new PROC					; COMDAT

; 671  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 672  :     PyObject *tmp, *newobj, *item;
; 673  :     Py_ssize_t i, n;
; 674  : 
; 675  :     assert(PyType_IsSubtype(type, &PyTuple_Type));

  00013	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyTuple_Type
  0001a	48 8b 4c 24 60	 mov	 rcx, QWORD PTR type$[rsp]
  0001f	e8 00 00 00 00	 call	 PyType_IsSubtype
  00024	85 c0		 test	 eax, eax
  00026	75 1c		 jne	 SHORT $LN8@tuple_subt
  00028	41 b8 a3 02 00
	00		 mov	 r8d, 675		; 000002a3H
  0002e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DC@DKKPAKMP@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAt?$AAu?$AAp?$AAl?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EM@HMKLPHJJ@?$AAP?$AAy?$AAT?$AAy?$AAp?$AAe?$AA_?$AAI?$AAs?$AAS?$AAu?$AAb?$AAt?$AAy?$AAp?$AAe?$AA?$CI?$AAt?$AAy?$AAp?$AAe?$AA?0?$AA?5?$AA?$CG?$AAP?$AAy?$AAT?$AAu?$AAp?$AAl?$AAe?$AA_@
  0003c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00042	33 c0		 xor	 eax, eax
$LN8@tuple_subt:

; 676  :     tmp = tuple_new(&PyTuple_Type, args, kwds);

  00044	4c 8b 44 24 70	 mov	 r8, QWORD PTR kwds$[rsp]
  00049	48 8b 54 24 68	 mov	 rdx, QWORD PTR args$[rsp]
  0004e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyTuple_Type
  00055	e8 00 00 00 00	 call	 tuple_new
  0005a	48 89 44 24 30	 mov	 QWORD PTR tmp$[rsp], rax

; 677  :     if (tmp == NULL)

  0005f	48 83 7c 24 30
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  00065	75 07		 jne	 SHORT $LN5@tuple_subt

; 678  :         return NULL;

  00067	33 c0		 xor	 eax, eax
  00069	e9 cf 00 00 00	 jmp	 $LN6@tuple_subt
$LN5@tuple_subt:

; 679  :     assert(PyTuple_Check(tmp));

  0006e	48 8b 44 24 30	 mov	 rax, QWORD PTR tmp$[rsp]
  00073	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00077	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0007d	25 00 00 00 04	 and	 eax, 67108864		; 04000000H
  00082	85 c0		 test	 eax, eax
  00084	75 1c		 jne	 SHORT $LN9@tuple_subt
  00086	41 b8 a7 02 00
	00		 mov	 r8d, 679		; 000002a7H
  0008c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DC@DKKPAKMP@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAt?$AAu?$AAp?$AAl?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00093	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@LMGEEDCO@?$AAP?$AAy?$AAT?$AAu?$AAp?$AAl?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAt?$AAm?$AAp?$AA?$CJ?$AA?$AA@
  0009a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000a0	33 c0		 xor	 eax, eax
$LN9@tuple_subt:

; 680  :     newobj = type->tp_alloc(type, n = PyTuple_GET_SIZE(tmp));

  000a2	48 8b 44 24 30	 mov	 rax, QWORD PTR tmp$[rsp]
  000a7	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000ab	48 89 44 24 20	 mov	 QWORD PTR n$[rsp], rax
  000b0	48 8b 54 24 20	 mov	 rdx, QWORD PTR n$[rsp]
  000b5	48 8b 4c 24 60	 mov	 rcx, QWORD PTR type$[rsp]
  000ba	48 8b 44 24 60	 mov	 rax, QWORD PTR type$[rsp]
  000bf	ff 90 88 01 00
	00		 call	 QWORD PTR [rax+392]
  000c5	48 89 44 24 40	 mov	 QWORD PTR newobj$[rsp], rax

; 681  :     if (newobj == NULL)

  000ca	48 83 7c 24 40
	00		 cmp	 QWORD PTR newobj$[rsp], 0
  000d0	75 04		 jne	 SHORT $LN4@tuple_subt

; 682  :         return NULL;

  000d2	33 c0		 xor	 eax, eax
  000d4	eb 67		 jmp	 SHORT $LN6@tuple_subt
$LN4@tuple_subt:

; 683  :     for (i = 0; i < n; i++) {

  000d6	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  000df	eb 0d		 jmp	 SHORT $LN3@tuple_subt
$LN2@tuple_subt:
  000e1	48 8b 44 24 28	 mov	 rax, QWORD PTR i$[rsp]
  000e6	48 ff c0	 inc	 rax
  000e9	48 89 44 24 28	 mov	 QWORD PTR i$[rsp], rax
$LN3@tuple_subt:
  000ee	48 8b 44 24 20	 mov	 rax, QWORD PTR n$[rsp]
  000f3	48 39 44 24 28	 cmp	 QWORD PTR i$[rsp], rax
  000f8	7d 34		 jge	 SHORT $LN1@tuple_subt

; 684  :         item = PyTuple_GET_ITEM(tmp, i);

  000fa	48 8b 44 24 30	 mov	 rax, QWORD PTR tmp$[rsp]
  000ff	48 8b 4c 24 28	 mov	 rcx, QWORD PTR i$[rsp]
  00104	48 8b 44 c8 70	 mov	 rax, QWORD PTR [rax+rcx*8+112]
  00109	48 89 44 24 38	 mov	 QWORD PTR item$[rsp], rax

; 685  :         Py_INCREF(item);

  0010e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR item$[rsp]
  00113	e8 00 00 00 00	 call	 _Py_IncRef

; 686  :         PyTuple_SET_ITEM(newobj, i, item);

  00118	48 8b 44 24 40	 mov	 rax, QWORD PTR newobj$[rsp]
  0011d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR i$[rsp]
  00122	48 8b 54 24 38	 mov	 rdx, QWORD PTR item$[rsp]
  00127	48 89 54 c8 70	 mov	 QWORD PTR [rax+rcx*8+112], rdx

; 687  :     }

  0012c	eb b3		 jmp	 SHORT $LN2@tuple_subt
$LN1@tuple_subt:

; 688  :     Py_DECREF(tmp);

  0012e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tmp$[rsp]
  00133	e8 00 00 00 00	 call	 _Py_DecRef

; 689  :     return newobj;

  00138	48 8b 44 24 40	 mov	 rax, QWORD PTR newobj$[rsp]
$LN6@tuple_subt:

; 690  : }

  0013d	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00141	c3		 ret	 0
tuple_subtype_new ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CL@MICCDJOP@tuple?5indices?5must?5be?5integers?0?5@ ; `string'
EXTRN	PySlice_GetIndicesEx:PROC
EXTRN	PySlice_Type:BYTE
EXTRN	PyErr_Occurred:PROC
EXTRN	PyNumber_AsSsize_t:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$tuplesubscript DD imagerel tuplesubscript
	DD	imagerel tuplesubscript+627
	DD	imagerel $unwind$tuplesubscript
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$tuplesubscript DD 021101H
	DD	0130111H
xdata	ENDS
;	COMDAT ??_C@_0CL@MICCDJOP@tuple?5indices?5must?5be?5integers?0?5@
CONST	SEGMENT
??_C@_0CL@MICCDJOP@tuple?5indices?5must?5be?5integers?0?5@ DB 'tuple indi'
	DB	'ces must be integers, not %.200s', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT tuplesubscript
_TEXT	SEGMENT
i$21002 = 48
it$21017 = 56
i$21015 = 64
cur$21014 = 72
dest$21019 = 80
slicelength$21013 = 88
step$21012 = 96
stop$21011 = 104
start$21010 = 112
result$21016 = 120
src$21018 = 128
self$ = 160
item$ = 168
tuplesubscript PROC					; COMDAT

; 711  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 712  :     if (PyIndex_Check(item)) {

  00011	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR item$[rsp]
  00019	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0001d	48 83 b8 b8 00
	00 00 00	 cmp	 QWORD PTR [rax+184], 0
  00025	0f 84 8f 00 00
	00		 je	 $LN15@tuplesubsc
  0002b	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR item$[rsp]
  00033	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00037	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  0003e	48 83 b8 08 01
	00 00 00	 cmp	 QWORD PTR [rax+264], 0
  00046	74 72		 je	 SHORT $LN15@tuplesubsc

; 713  :         Py_ssize_t i = PyNumber_AsSsize_t(item, PyExc_IndexError);

  00048	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR PyExc_IndexError
  0004f	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR item$[rsp]
  00057	e8 00 00 00 00	 call	 PyNumber_AsSsize_t
  0005c	48 89 44 24 30	 mov	 QWORD PTR i$21002[rsp], rax

; 714  :         if (i == -1 && PyErr_Occurred())

  00061	48 83 7c 24 30
	ff		 cmp	 QWORD PTR i$21002[rsp], -1
  00067	75 11		 jne	 SHORT $LN14@tuplesubsc
  00069	e8 00 00 00 00	 call	 PyErr_Occurred
  0006e	48 85 c0	 test	 rax, rax
  00071	74 07		 je	 SHORT $LN14@tuplesubsc

; 715  :             return NULL;

  00073	33 c0		 xor	 eax, eax
  00075	e9 f1 01 00 00	 jmp	 $LN16@tuplesubsc
$LN14@tuplesubsc:

; 716  :         if (i < 0)

  0007a	48 83 7c 24 30
	00		 cmp	 QWORD PTR i$21002[rsp], 0
  00080	7d 1c		 jge	 SHORT $LN13@tuplesubsc

; 717  :             i += PyTuple_GET_SIZE(self);

  00082	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0008a	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0008e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR i$21002[rsp]
  00093	48 03 c8	 add	 rcx, rax
  00096	48 8b c1	 mov	 rax, rcx
  00099	48 89 44 24 30	 mov	 QWORD PTR i$21002[rsp], rax
$LN13@tuplesubsc:

; 718  :         return tupleitem(self, i);

  0009e	48 8b 54 24 30	 mov	 rdx, QWORD PTR i$21002[rsp]
  000a3	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  000ab	e8 00 00 00 00	 call	 tupleitem
  000b0	e9 b6 01 00 00	 jmp	 $LN16@tuplesubsc
  000b5	e9 b1 01 00 00	 jmp	 $LN12@tuplesubsc
$LN15@tuplesubsc:

; 719  :     }
; 720  :     else if (PySlice_Check(item)) {

  000ba	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PySlice_Type
  000c1	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR item$[rsp]
  000c9	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  000cd	0f 85 73 01 00
	00		 jne	 $LN11@tuplesubsc

; 721  :         Py_ssize_t start, stop, step, slicelength, cur, i;
; 722  :         PyObject* result;
; 723  :         PyObject* it;
; 724  :         PyObject **src, **dest;
; 725  : 
; 726  :         if (PySlice_GetIndicesEx(item,
; 727  :                          PyTuple_GET_SIZE(self),
; 728  :                          &start, &stop, &step, &slicelength) < 0) {

  000d3	48 8d 44 24 58	 lea	 rax, QWORD PTR slicelength$21013[rsp]
  000d8	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000dd	48 8d 44 24 60	 lea	 rax, QWORD PTR step$21012[rsp]
  000e2	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000e7	4c 8d 4c 24 68	 lea	 r9, QWORD PTR stop$21011[rsp]
  000ec	4c 8d 44 24 70	 lea	 r8, QWORD PTR start$21010[rsp]
  000f1	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  000f9	48 8b 50 60	 mov	 rdx, QWORD PTR [rax+96]
  000fd	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR item$[rsp]
  00105	e8 00 00 00 00	 call	 PySlice_GetIndicesEx
  0010a	85 c0		 test	 eax, eax
  0010c	7d 07		 jge	 SHORT $LN10@tuplesubsc

; 729  :             return NULL;

  0010e	33 c0		 xor	 eax, eax
  00110	e9 56 01 00 00	 jmp	 $LN16@tuplesubsc
$LN10@tuplesubsc:

; 730  :         }
; 731  : 
; 732  :         if (slicelength <= 0) {

  00115	48 83 7c 24 58
	00		 cmp	 QWORD PTR slicelength$21013[rsp], 0
  0011b	7f 11		 jg	 SHORT $LN9@tuplesubsc

; 733  :             return PyTuple_New(0);

  0011d	33 c9		 xor	 ecx, ecx
  0011f	e8 00 00 00 00	 call	 PyTuple_New
  00124	e9 42 01 00 00	 jmp	 $LN16@tuplesubsc

; 734  :         }
; 735  :         else if (start == 0 && step == 1 &&

  00129	e9 16 01 00 00	 jmp	 $LN8@tuplesubsc
$LN9@tuplesubsc:

; 736  :                  slicelength == PyTuple_GET_SIZE(self) &&
; 737  :                  PyTuple_CheckExact(self)) {

  0012e	48 83 7c 24 70
	00		 cmp	 QWORD PTR start$21010[rsp], 0
  00134	75 4f		 jne	 SHORT $LN7@tuplesubsc
  00136	48 83 7c 24 60
	01		 cmp	 QWORD PTR step$21012[rsp], 1
  0013c	75 47		 jne	 SHORT $LN7@tuplesubsc
  0013e	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00146	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0014a	48 39 44 24 58	 cmp	 QWORD PTR slicelength$21013[rsp], rax
  0014f	75 34		 jne	 SHORT $LN7@tuplesubsc
  00151	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyTuple_Type
  00158	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00160	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00164	75 1f		 jne	 SHORT $LN7@tuplesubsc

; 738  :             Py_INCREF(self);

  00166	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  0016e	e8 00 00 00 00	 call	 _Py_IncRef

; 739  :             return (PyObject *)self;

  00173	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0017b	e9 eb 00 00 00	 jmp	 $LN16@tuplesubsc

; 740  :         }
; 741  :         else {

  00180	e9 bf 00 00 00	 jmp	 $LN6@tuplesubsc
$LN7@tuplesubsc:

; 742  :             result = PyTuple_New(slicelength);

  00185	48 8b 4c 24 58	 mov	 rcx, QWORD PTR slicelength$21013[rsp]
  0018a	e8 00 00 00 00	 call	 PyTuple_New
  0018f	48 89 44 24 78	 mov	 QWORD PTR result$21016[rsp], rax

; 743  :             if (!result) return NULL;

  00194	48 83 7c 24 78
	00		 cmp	 QWORD PTR result$21016[rsp], 0
  0019a	75 07		 jne	 SHORT $LN5@tuplesubsc
  0019c	33 c0		 xor	 eax, eax
  0019e	e9 c8 00 00 00	 jmp	 $LN16@tuplesubsc
$LN5@tuplesubsc:

; 744  : 
; 745  :             src = self->ob_item;

  001a3	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  001ab	48 83 c0 70	 add	 rax, 112		; 00000070H
  001af	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR src$21018[rsp], rax

; 746  :             dest = ((PyTupleObject *)result)->ob_item;

  001b7	48 8b 44 24 78	 mov	 rax, QWORD PTR result$21016[rsp]
  001bc	48 83 c0 70	 add	 rax, 112		; 00000070H
  001c0	48 89 44 24 50	 mov	 QWORD PTR dest$21019[rsp], rax

; 747  :             for (cur = start, i = 0; i < slicelength;
; 748  :                  cur += step, i++) {

  001c5	48 8b 44 24 70	 mov	 rax, QWORD PTR start$21010[rsp]
  001ca	48 89 44 24 48	 mov	 QWORD PTR cur$21014[rsp], rax
  001cf	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR i$21015[rsp], 0
  001d8	eb 22		 jmp	 SHORT $LN4@tuplesubsc
$LN3@tuplesubsc:
  001da	48 8b 44 24 60	 mov	 rax, QWORD PTR step$21012[rsp]
  001df	48 8b 4c 24 48	 mov	 rcx, QWORD PTR cur$21014[rsp]
  001e4	48 03 c8	 add	 rcx, rax
  001e7	48 8b c1	 mov	 rax, rcx
  001ea	48 89 44 24 48	 mov	 QWORD PTR cur$21014[rsp], rax
  001ef	48 8b 44 24 40	 mov	 rax, QWORD PTR i$21015[rsp]
  001f4	48 ff c0	 inc	 rax
  001f7	48 89 44 24 40	 mov	 QWORD PTR i$21015[rsp], rax
$LN4@tuplesubsc:
  001fc	48 8b 44 24 58	 mov	 rax, QWORD PTR slicelength$21013[rsp]
  00201	48 39 44 24 40	 cmp	 QWORD PTR i$21015[rsp], rax
  00206	7d 35		 jge	 SHORT $LN2@tuplesubsc

; 749  :                 it = src[cur];

  00208	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR src$21018[rsp]
  00210	48 8b 4c 24 48	 mov	 rcx, QWORD PTR cur$21014[rsp]
  00215	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  00219	48 89 44 24 38	 mov	 QWORD PTR it$21017[rsp], rax

; 750  :                 Py_INCREF(it);

  0021e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR it$21017[rsp]
  00223	e8 00 00 00 00	 call	 _Py_IncRef

; 751  :                 dest[i] = it;

  00228	48 8b 44 24 50	 mov	 rax, QWORD PTR dest$21019[rsp]
  0022d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR i$21015[rsp]
  00232	48 8b 54 24 38	 mov	 rdx, QWORD PTR it$21017[rsp]
  00237	48 89 14 c8	 mov	 QWORD PTR [rax+rcx*8], rdx

; 752  :             }

  0023b	eb 9d		 jmp	 SHORT $LN3@tuplesubsc
$LN2@tuplesubsc:

; 753  : 
; 754  :             return result;

  0023d	48 8b 44 24 78	 mov	 rax, QWORD PTR result$21016[rsp]
  00242	eb 27		 jmp	 SHORT $LN16@tuplesubsc
$LN6@tuplesubsc:
$LN8@tuplesubsc:

; 755  :         }
; 756  :     }
; 757  :     else {

  00244	eb 25		 jmp	 SHORT $LN1@tuplesubsc
$LN11@tuplesubsc:

; 758  :         PyErr_Format(PyExc_TypeError,
; 759  :                      "tuple indices must be integers, not %.200s",
; 760  :                      Py_TYPE(item)->tp_name);

  00246	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR item$[rsp]
  0024e	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00252	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  00256	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CL@MICCDJOP@tuple?5indices?5must?5be?5integers?0?5@
  0025d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00264	e8 00 00 00 00	 call	 PyErr_Format

; 761  :         return NULL;

  00269	33 c0		 xor	 eax, eax
$LN1@tuplesubsc:
$LN12@tuplesubsc:
$LN16@tuplesubsc:

; 762  :     }
; 763  : }

  0026b	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  00272	c3		 ret	 0
tuplesubscript ENDP
_TEXT	ENDS
PUBLIC	??_C@_03IFHPJIBD@?$CIN?$CJ?$AA@			; `string'
EXTRN	Py_BuildValue:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$tuple_getnewargs DD imagerel tuple_getnewargs
	DD	imagerel tuple_getnewargs+50
	DD	imagerel $unwind$tuple_getnewargs
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$tuple_getnewargs DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT ??_C@_03IFHPJIBD@?$CIN?$CJ?$AA@
CONST	SEGMENT
??_C@_03IFHPJIBD@?$CIN?$CJ?$AA@ DB '(N)', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT tuple_getnewargs
_TEXT	SEGMENT
v$ = 48
tuple_getnewargs PROC					; COMDAT

; 767  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 768  :     return Py_BuildValue("(N)", tupleslice(v, 0, Py_SIZE(v)));

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR v$[rsp]
  0000e	4c 8b 40 60	 mov	 r8, QWORD PTR [rax+96]
  00012	33 d2		 xor	 edx, edx
  00014	48 8b 4c 24 30	 mov	 rcx, QWORD PTR v$[rsp]
  00019	e8 00 00 00 00	 call	 tupleslice
  0001e	48 8b d0	 mov	 rdx, rax
  00021	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03IFHPJIBD@?$CIN?$CJ?$AA@
  00028	e8 00 00 00 00	 call	 Py_BuildValue

; 769  : 
; 770  : }

  0002d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00031	c3		 ret	 0
tuple_getnewargs ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$tuple_sizeof DD imagerel tuple_sizeof
	DD	imagerel tuple_sizeof+49
	DD	imagerel $unwind$tuple_sizeof
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$tuple_sizeof DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT tuple_sizeof
_TEXT	SEGMENT
res$ = 32
self$ = 64
tuple_sizeof PROC					; COMDAT

; 774  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 775  :     Py_ssize_t res;
; 776  : 
; 777  :     res = PyTuple_Type.tp_basicsize + Py_SIZE(self) * sizeof(PyObject *);

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0000e	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00012	48 8b 0d 78 00
	00 00		 mov	 rcx, QWORD PTR PyTuple_Type+120
  00019	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  0001d	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax

; 778  :     return PyLong_FromSsize_t(res);

  00022	48 8b 4c 24 20	 mov	 rcx, QWORD PTR res$[rsp]
  00027	e8 00 00 00 00	 call	 PyLong_FromSsize_t

; 779  : }

  0002c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00030	c3		 ret	 0
tuple_sizeof ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BA@BAEFLNMJ@_PyTuple_Resize?$AA@		; `string'
PUBLIC	_PyTuple_Resize
EXTRN	memset:PROC
EXTRN	_Py_ForgetReference:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyTuple_Resize DD imagerel $LN45
	DD	imagerel $LN45+1308
	DD	imagerel $unwind$_PyTuple_Resize
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyTuple_Resize DD 021101H
	DD	0130111H
xdata	ENDS
;	COMDAT ??_C@_0BA@BAEFLNMJ@_PyTuple_Resize?$AA@
CONST	SEGMENT
??_C@_0BA@BAEFLNMJ@_PyTuple_Resize?$AA@ DB '_PyTuple_Resize', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PyTuple_Resize
_TEXT	SEGMENT
v$ = 48
oldsize$ = 56
i$ = 64
sv$ = 72
g$21130 = 80
_py_tmp$21143 = 88
g$21158 = 96
tv83 = 104
tv138 = 108
tv133 = 112
tv136 = 120
tv155 = 128
tv223 = 136
pv$ = 160
newsize$ = 168
_PyTuple_Resize PROC					; COMDAT

; 858  : {

$LN45:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 859  :     register PyTupleObject *v;
; 860  :     register PyTupleObject *sv;
; 861  :     Py_ssize_t i;
; 862  :     Py_ssize_t oldsize;
; 863  : 
; 864  :     v = (PyTupleObject *) *pv;

  00011	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR pv$[rsp]
  00019	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0001c	48 89 44 24 30	 mov	 QWORD PTR v$[rsp], rax

; 865  :     if (v == NULL || Py_TYPE(v) != &PyTuple_Type ||
; 866  :         (Py_SIZE(v) != 0 && Py_REFCNT(v) != 1)) {

  00021	48 83 7c 24 30
	00		 cmp	 QWORD PTR v$[rsp], 0
  00027	74 2a		 je	 SHORT $LN26@PyTuple_Re
  00029	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyTuple_Type
  00030	48 8b 4c 24 30	 mov	 rcx, QWORD PTR v$[rsp]
  00035	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00039	75 18		 jne	 SHORT $LN26@PyTuple_Re
  0003b	48 8b 44 24 30	 mov	 rax, QWORD PTR v$[rsp]
  00040	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00045	74 4e		 je	 SHORT $LN27@PyTuple_Re
  00047	48 8b 44 24 30	 mov	 rax, QWORD PTR v$[rsp]
  0004c	48 83 78 50 01	 cmp	 QWORD PTR [rax+80], 1
  00051	74 42		 je	 SHORT $LN27@PyTuple_Re
$LN26@PyTuple_Re:

; 867  :         *pv = 0;

  00053	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR pv$[rsp]
  0005b	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
$LN25@PyTuple_Re:

; 868  :         Py_XDECREF(v);

  00062	48 83 7c 24 30
	00		 cmp	 QWORD PTR v$[rsp], 0
  00068	74 0a		 je	 SHORT $LN22@PyTuple_Re
  0006a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR v$[rsp]
  0006f	e8 00 00 00 00	 call	 _Py_DecRef
$LN22@PyTuple_Re:
  00074	33 c0		 xor	 eax, eax
  00076	85 c0		 test	 eax, eax
  00078	75 e8		 jne	 SHORT $LN25@PyTuple_Re

; 869  :         PyErr_BadInternalCall();

  0007a	ba 65 03 00 00	 mov	 edx, 869		; 00000365H
  0007f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@NPBNLKPK@?4?4?2Objects?2tupleobject?4c?$AA@
  00086	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 870  :         return -1;

  0008b	b8 ff ff ff ff	 mov	 eax, -1
  00090	e9 7f 04 00 00	 jmp	 $LN28@PyTuple_Re
$LN27@PyTuple_Re:

; 871  :     }
; 872  :     oldsize = Py_SIZE(v);

  00095	48 8b 44 24 30	 mov	 rax, QWORD PTR v$[rsp]
  0009a	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0009e	48 89 44 24 38	 mov	 QWORD PTR oldsize$[rsp], rax

; 873  :     if (oldsize == newsize)

  000a3	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR newsize$[rsp]
  000ab	48 39 44 24 38	 cmp	 QWORD PTR oldsize$[rsp], rax
  000b0	75 07		 jne	 SHORT $LN21@PyTuple_Re

; 874  :         return 0;

  000b2	33 c0		 xor	 eax, eax
  000b4	e9 5b 04 00 00	 jmp	 $LN28@PyTuple_Re
$LN21@PyTuple_Re:

; 875  : 
; 876  :     if (oldsize == 0) {

  000b9	48 83 7c 24 38
	00		 cmp	 QWORD PTR oldsize$[rsp], 0
  000bf	75 4b		 jne	 SHORT $LN20@PyTuple_Re

; 877  :         /* Empty tuples are often shared, so we should never
; 878  :            resize them in-place even if we do own the only
; 879  :            (current) reference */
; 880  :         Py_DECREF(v);

  000c1	48 8b 4c 24 30	 mov	 rcx, QWORD PTR v$[rsp]
  000c6	e8 00 00 00 00	 call	 _Py_DecRef

; 881  :         *pv = PyTuple_New(newsize);

  000cb	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR newsize$[rsp]
  000d3	e8 00 00 00 00	 call	 PyTuple_New
  000d8	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR pv$[rsp]
  000e0	48 89 01	 mov	 QWORD PTR [rcx], rax

; 882  :         return *pv == NULL ? -1 : 0;

  000e3	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR pv$[rsp]
  000eb	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  000ef	75 0a		 jne	 SHORT $LN30@PyTuple_Re
  000f1	c7 44 24 68 ff
	ff ff ff	 mov	 DWORD PTR tv83[rsp], -1
  000f9	eb 08		 jmp	 SHORT $LN31@PyTuple_Re
$LN30@PyTuple_Re:
  000fb	c7 44 24 68 00
	00 00 00	 mov	 DWORD PTR tv83[rsp], 0
$LN31@PyTuple_Re:
  00103	8b 44 24 68	 mov	 eax, DWORD PTR tv83[rsp]
  00107	e9 08 04 00 00	 jmp	 $LN28@PyTuple_Re
$LN20@PyTuple_Re:

; 883  :     }
; 884  : 
; 885  :     /* XXX UNREF/NEWREF interface should be more symmetrical */
; 886  :     _Py_DEC_REFTOTAL;

  0010c	e8 00 00 00 00	 call	 _Py_PXCTX
  00111	85 c0		 test	 eax, eax
  00113	74 02		 je	 SHORT $LN32@PyTuple_Re
  00115	eb 11		 jmp	 SHORT $LN33@PyTuple_Re
$LN32@PyTuple_Re:
  00117	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  0011e	48 ff c8	 dec	 rax
  00121	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN33@PyTuple_Re:

; 887  :     if (_PyObject_GC_IS_TRACKED(v))

  00128	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00130	4c 8b 4c 24 30	 mov	 r9, QWORD PTR v$[rsp]
  00135	41 b8 77 03 00
	00		 mov	 r8d, 887		; 00000377H
  0013b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@NPBNLKPK@?4?4?2Objects?2tupleobject?4c?$AA@
  00142	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@BAEFLNMJ@_PyTuple_Resize?$AA@
  00149	e8 00 00 00 00	 call	 _PyParallel_Guard
  0014e	85 c0		 test	 eax, eax
  00150	74 0a		 je	 SHORT $LN38@PyTuple_Re
  00152	c7 44 24 6c 00
	00 00 00	 mov	 DWORD PTR tv138[rsp], 0
  0015a	eb 69		 jmp	 SHORT $LN39@PyTuple_Re
$LN38@PyTuple_Re:
  0015c	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00164	4c 8b 4c 24 30	 mov	 r9, QWORD PTR v$[rsp]
  00169	41 b8 77 03 00
	00		 mov	 r8d, 887		; 00000377H
  0016f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@NPBNLKPK@?4?4?2Objects?2tupleobject?4c?$AA@
  00176	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@BAEFLNMJ@_PyTuple_Resize?$AA@
  0017d	e8 00 00 00 00	 call	 _PyParallel_Guard
  00182	85 c0		 test	 eax, eax
  00184	74 0b		 je	 SHORT $LN34@PyTuple_Re
  00186	48 c7 44 24 70
	00 00 00 00	 mov	 QWORD PTR tv133[rsp], 0
  0018f	eb 0e		 jmp	 SHORT $LN35@PyTuple_Re
$LN34@PyTuple_Re:
  00191	48 8b 44 24 30	 mov	 rax, QWORD PTR v$[rsp]
  00196	48 83 e8 18	 sub	 rax, 24
  0019a	48 89 44 24 70	 mov	 QWORD PTR tv133[rsp], rax
$LN35@PyTuple_Re:
  0019f	48 8b 44 24 70	 mov	 rax, QWORD PTR tv133[rsp]
  001a4	48 83 78 10 fe	 cmp	 QWORD PTR [rax+16], -2
  001a9	74 0a		 je	 SHORT $LN36@PyTuple_Re
  001ab	c7 44 24 78 01
	00 00 00	 mov	 DWORD PTR tv136[rsp], 1
  001b3	eb 08		 jmp	 SHORT $LN37@PyTuple_Re
$LN36@PyTuple_Re:
  001b5	c7 44 24 78 00
	00 00 00	 mov	 DWORD PTR tv136[rsp], 0
$LN37@PyTuple_Re:
  001bd	8b 44 24 78	 mov	 eax, DWORD PTR tv136[rsp]
  001c1	89 44 24 6c	 mov	 DWORD PTR tv138[rsp], eax
$LN39@PyTuple_Re:
  001c5	83 7c 24 6c 00	 cmp	 DWORD PTR tv138[rsp], 0
  001ca	0f 84 f8 00 00
	00		 je	 $LN19@PyTuple_Re

; 888  :         _PyObject_GC_UNTRACK(v);

  001d0	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  001d8	4c 8b 4c 24 30	 mov	 r9, QWORD PTR v$[rsp]
  001dd	41 b8 78 03 00
	00		 mov	 r8d, 888		; 00000378H
  001e3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@NPBNLKPK@?4?4?2Objects?2tupleobject?4c?$AA@
  001ea	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@BAEFLNMJ@_PyTuple_Resize?$AA@
  001f1	e8 00 00 00 00	 call	 _PyParallel_Guard
  001f6	85 c0		 test	 eax, eax
  001f8	0f 85 ca 00 00
	00		 jne	 $LN18@PyTuple_Re
$LN17@PyTuple_Re:
  001fe	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00206	4c 8b 4c 24 30	 mov	 r9, QWORD PTR v$[rsp]
  0020b	41 b8 78 03 00
	00		 mov	 r8d, 888		; 00000378H
  00211	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@NPBNLKPK@?4?4?2Objects?2tupleobject?4c?$AA@
  00218	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@BAEFLNMJ@_PyTuple_Resize?$AA@
  0021f	e8 00 00 00 00	 call	 _PyParallel_Guard
  00224	85 c0		 test	 eax, eax
  00226	74 0e		 je	 SHORT $LN40@PyTuple_Re
  00228	48 c7 84 24 80
	00 00 00 00 00
	00 00		 mov	 QWORD PTR tv155[rsp], 0
  00234	eb 11		 jmp	 SHORT $LN41@PyTuple_Re
$LN40@PyTuple_Re:
  00236	48 8b 44 24 30	 mov	 rax, QWORD PTR v$[rsp]
  0023b	48 83 e8 18	 sub	 rax, 24
  0023f	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv155[rsp], rax
$LN41@PyTuple_Re:
  00247	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR tv155[rsp]
  0024f	48 89 44 24 50	 mov	 QWORD PTR g$21130[rsp], rax
  00254	48 8b 44 24 50	 mov	 rax, QWORD PTR g$21130[rsp]
  00259	48 83 78 10 fe	 cmp	 QWORD PTR [rax+16], -2
  0025e	75 1c		 jne	 SHORT $LN42@PyTuple_Re
  00260	41 b8 78 03 00
	00		 mov	 r8d, 888		; 00000378H
  00266	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DC@DKKPAKMP@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAt?$AAu?$AAp?$AAl?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  0026d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EM@HFMJMDDM@?$AAg?$AA?9?$AA?$DO?$AAg?$AAc?$AA?4?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AAG?$AAC?$AA_?$AAR?$AAE?$AAF?$AAS?$AA_?$AAU?$AAN?$AAT?$AAR@
  00274	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0027a	33 c0		 xor	 eax, eax
$LN42@PyTuple_Re:
  0027c	48 8b 44 24 50	 mov	 rax, QWORD PTR g$21130[rsp]
  00281	48 c7 40 10 fe
	ff ff ff	 mov	 QWORD PTR [rax+16], -2
  00289	48 8b 44 24 50	 mov	 rax, QWORD PTR g$21130[rsp]
  0028e	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00292	48 8b 4c 24 50	 mov	 rcx, QWORD PTR g$21130[rsp]
  00297	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0029a	48 89 08	 mov	 QWORD PTR [rax], rcx
  0029d	48 8b 44 24 50	 mov	 rax, QWORD PTR g$21130[rsp]
  002a2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  002a5	48 8b 4c 24 50	 mov	 rcx, QWORD PTR g$21130[rsp]
  002aa	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  002ae	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  002b2	48 8b 44 24 50	 mov	 rax, QWORD PTR g$21130[rsp]
  002b7	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
  002be	33 c0		 xor	 eax, eax
  002c0	85 c0		 test	 eax, eax
  002c2	0f 85 36 ff ff
	ff		 jne	 $LN17@PyTuple_Re
$LN18@PyTuple_Re:
$LN19@PyTuple_Re:

; 889  :     _Py_ForgetReference((PyObject *) v);

  002c8	48 8b 4c 24 30	 mov	 rcx, QWORD PTR v$[rsp]
  002cd	e8 00 00 00 00	 call	 _Py_ForgetReference

; 890  :     /* DECREF items deleted by shrinkage */
; 891  :     for (i = newsize; i < oldsize; i++) {

  002d2	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR newsize$[rsp]
  002da	48 89 44 24 40	 mov	 QWORD PTR i$[rsp], rax
  002df	eb 0d		 jmp	 SHORT $LN14@PyTuple_Re
$LN13@PyTuple_Re:
  002e1	48 8b 44 24 40	 mov	 rax, QWORD PTR i$[rsp]
  002e6	48 ff c0	 inc	 rax
  002e9	48 89 44 24 40	 mov	 QWORD PTR i$[rsp], rax
$LN14@PyTuple_Re:
  002ee	48 8b 44 24 38	 mov	 rax, QWORD PTR oldsize$[rsp]
  002f3	48 39 44 24 40	 cmp	 QWORD PTR i$[rsp], rax
  002f8	0f 8d 82 00 00
	00		 jge	 $LN12@PyTuple_Re
$LN11@PyTuple_Re:

; 892  :         Py_CLEAR(v->ob_item[i]);

  002fe	48 8b 44 24 30	 mov	 rax, QWORD PTR v$[rsp]
  00303	48 8b 4c 24 40	 mov	 rcx, QWORD PTR i$[rsp]
  00308	48 83 7c c8 70
	00		 cmp	 QWORD PTR [rax+rcx*8+112], 0
  0030e	74 65		 je	 SHORT $LN8@PyTuple_Re
  00310	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00318	48 8b 44 24 30	 mov	 rax, QWORD PTR v$[rsp]
  0031d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR i$[rsp]
  00322	4c 8b 4c c8 70	 mov	 r9, QWORD PTR [rax+rcx*8+112]
  00327	41 b8 7c 03 00
	00		 mov	 r8d, 892		; 0000037cH
  0032d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@NPBNLKPK@?4?4?2Objects?2tupleobject?4c?$AA@
  00334	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@BAEFLNMJ@_PyTuple_Resize?$AA@
  0033b	e8 00 00 00 00	 call	 _PyParallel_Guard
  00340	85 c0		 test	 eax, eax
  00342	75 31		 jne	 SHORT $LN8@PyTuple_Re
  00344	48 8b 44 24 30	 mov	 rax, QWORD PTR v$[rsp]
  00349	48 8b 4c 24 40	 mov	 rcx, QWORD PTR i$[rsp]
  0034e	48 8b 44 c8 70	 mov	 rax, QWORD PTR [rax+rcx*8+112]
  00353	48 89 44 24 58	 mov	 QWORD PTR _py_tmp$21143[rsp], rax
  00358	48 8b 44 24 30	 mov	 rax, QWORD PTR v$[rsp]
  0035d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR i$[rsp]
  00362	48 c7 44 c8 70
	00 00 00 00	 mov	 QWORD PTR [rax+rcx*8+112], 0
  0036b	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _py_tmp$21143[rsp]
  00370	e8 00 00 00 00	 call	 _Py_DecRef
$LN8@PyTuple_Re:
  00375	33 c0		 xor	 eax, eax
  00377	85 c0		 test	 eax, eax
  00379	75 83		 jne	 SHORT $LN11@PyTuple_Re

; 893  :     }

  0037b	e9 61 ff ff ff	 jmp	 $LN13@PyTuple_Re
$LN12@PyTuple_Re:

; 894  :     sv = PyObject_GC_Resize(PyTupleObject, v, newsize);

  00380	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR newsize$[rsp]
  00388	48 8b 4c 24 30	 mov	 rcx, QWORD PTR v$[rsp]
  0038d	e8 00 00 00 00	 call	 __PyObject_GC_RESIZE
  00392	48 89 44 24 48	 mov	 QWORD PTR sv$[rsp], rax

; 895  :     if (sv == NULL) {

  00397	48 83 7c 24 48
	00		 cmp	 QWORD PTR sv$[rsp], 0
  0039d	75 23		 jne	 SHORT $LN7@PyTuple_Re

; 896  :         *pv = NULL;

  0039f	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR pv$[rsp]
  003a7	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 897  :         PyObject_GC_Del(v);

  003ae	48 8b 4c 24 30	 mov	 rcx, QWORD PTR v$[rsp]
  003b3	e8 00 00 00 00	 call	 PyObject_GC_Del

; 898  :         return -1;

  003b8	b8 ff ff ff ff	 mov	 eax, -1
  003bd	e9 52 01 00 00	 jmp	 $LN28@PyTuple_Re
$LN7@PyTuple_Re:

; 899  :     }
; 900  :     _Py_NewReference((PyObject *) sv);

  003c2	48 8b 4c 24 48	 mov	 rcx, QWORD PTR sv$[rsp]
  003c7	e8 00 00 00 00	 call	 _Py_NewReference

; 901  :     /* Zero out items added by growing */
; 902  :     if (newsize > oldsize)

  003cc	48 8b 44 24 38	 mov	 rax, QWORD PTR oldsize$[rsp]
  003d1	48 39 84 24 a8
	00 00 00	 cmp	 QWORD PTR newsize$[rsp], rax
  003d9	7e 30		 jle	 SHORT $LN6@PyTuple_Re

; 903  :         memset(&sv->ob_item[oldsize], 0,
; 904  :                sizeof(*sv->ob_item) * (newsize - oldsize));

  003db	48 8b 44 24 38	 mov	 rax, QWORD PTR oldsize$[rsp]
  003e0	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR newsize$[rsp]
  003e8	48 2b c8	 sub	 rcx, rax
  003eb	48 8b c1	 mov	 rax, rcx
  003ee	48 c1 e0 03	 shl	 rax, 3
  003f2	48 8b 4c 24 48	 mov	 rcx, QWORD PTR sv$[rsp]
  003f7	48 8b 54 24 38	 mov	 rdx, QWORD PTR oldsize$[rsp]
  003fc	48 8d 4c d1 70	 lea	 rcx, QWORD PTR [rcx+rdx*8+112]
  00401	4c 8b c0	 mov	 r8, rax
  00404	33 d2		 xor	 edx, edx
  00406	e8 00 00 00 00	 call	 memset
$LN6@PyTuple_Re:

; 905  :     *pv = (PyObject *) sv;

  0040b	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR pv$[rsp]
  00413	48 8b 4c 24 48	 mov	 rcx, QWORD PTR sv$[rsp]
  00418	48 89 08	 mov	 QWORD PTR [rax], rcx

; 906  :     _PyObject_GC_TRACK(sv);

  0041b	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00423	4c 8b 4c 24 48	 mov	 r9, QWORD PTR sv$[rsp]
  00428	41 b8 8a 03 00
	00		 mov	 r8d, 906		; 0000038aH
  0042e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@NPBNLKPK@?4?4?2Objects?2tupleobject?4c?$AA@
  00435	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@BAEFLNMJ@_PyTuple_Resize?$AA@
  0043c	e8 00 00 00 00	 call	 _PyParallel_Guard
  00441	85 c0		 test	 eax, eax
  00443	0f 85 c9 00 00
	00		 jne	 $LN5@PyTuple_Re
$LN4@PyTuple_Re:
  00449	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00451	4c 8b 4c 24 48	 mov	 r9, QWORD PTR sv$[rsp]
  00456	41 b8 8a 03 00
	00		 mov	 r8d, 906		; 0000038aH
  0045c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@NPBNLKPK@?4?4?2Objects?2tupleobject?4c?$AA@
  00463	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@BAEFLNMJ@_PyTuple_Resize?$AA@
  0046a	e8 00 00 00 00	 call	 _PyParallel_Guard
  0046f	85 c0		 test	 eax, eax
  00471	74 0e		 je	 SHORT $LN43@PyTuple_Re
  00473	48 c7 84 24 88
	00 00 00 00 00
	00 00		 mov	 QWORD PTR tv223[rsp], 0
  0047f	eb 11		 jmp	 SHORT $LN44@PyTuple_Re
$LN43@PyTuple_Re:
  00481	48 8b 44 24 48	 mov	 rax, QWORD PTR sv$[rsp]
  00486	48 83 e8 18	 sub	 rax, 24
  0048a	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv223[rsp], rax
$LN44@PyTuple_Re:
  00492	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR tv223[rsp]
  0049a	48 89 44 24 60	 mov	 QWORD PTR g$21158[rsp], rax
  0049f	48 8b 44 24 60	 mov	 rax, QWORD PTR g$21158[rsp]
  004a4	48 83 78 10 fe	 cmp	 QWORD PTR [rax+16], -2
  004a9	74 0c		 je	 SHORT $LN1@PyTuple_Re
  004ab	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@
  004b2	e8 00 00 00 00	 call	 Py_FatalError
$LN1@PyTuple_Re:
  004b7	48 8b 44 24 60	 mov	 rax, QWORD PTR g$21158[rsp]
  004bc	48 c7 40 10 fd
	ff ff ff	 mov	 QWORD PTR [rax+16], -3
  004c4	48 8b 44 24 60	 mov	 rax, QWORD PTR g$21158[rsp]
  004c9	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR _PyGC_generation0
  004d0	48 89 08	 mov	 QWORD PTR [rax], rcx
  004d3	48 8b 44 24 60	 mov	 rax, QWORD PTR g$21158[rsp]
  004d8	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR _PyGC_generation0
  004df	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  004e3	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  004e7	48 8b 44 24 60	 mov	 rax, QWORD PTR g$21158[rsp]
  004ec	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  004f0	48 8b 4c 24 60	 mov	 rcx, QWORD PTR g$21158[rsp]
  004f5	48 89 08	 mov	 QWORD PTR [rax], rcx
  004f8	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyGC_generation0
  004ff	48 8b 4c 24 60	 mov	 rcx, QWORD PTR g$21158[rsp]
  00504	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  00508	33 c0		 xor	 eax, eax
  0050a	85 c0		 test	 eax, eax
  0050c	0f 85 37 ff ff
	ff		 jne	 $LN4@PyTuple_Re
$LN5@PyTuple_Re:

; 907  :     return 0;

  00512	33 c0		 xor	 eax, eax
$LN28@PyTuple_Re:

; 908  : }

  00514	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  0051b	c3		 ret	 0
_PyTuple_Resize ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BF@HFBINLOF@__PyObject_GC_RESIZE?$AA@	; `string'
PUBLIC	??_C@_0CE@FGBBJFKA@c?3?2src?2pyparallel?2include?2objimp@ ; `string'
EXTRN	_PyObject_GC_Resize:PROC
EXTRN	_PxObject_Resize:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\objimpl.h
pdata	SEGMENT
$pdata$__PyObject_GC_RESIZE DD imagerel __PyObject_GC_RESIZE
	DD	imagerel __PyObject_GC_RESIZE+95
	DD	imagerel $unwind$__PyObject_GC_RESIZE
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__PyObject_GC_RESIZE DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT ??_C@_0BF@HFBINLOF@__PyObject_GC_RESIZE?$AA@
CONST	SEGMENT
??_C@_0BF@HFBINLOF@__PyObject_GC_RESIZE?$AA@ DB '__PyObject_GC_RESIZE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@FGBBJFKA@c?3?2src?2pyparallel?2include?2objimp@
CONST	SEGMENT
??_C@_0CE@FGBBJFKA@c?3?2src?2pyparallel?2include?2objimp@ DB 'c:\src\pypa'
	DB	'rallel\include\objimpl.h', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT __PyObject_GC_RESIZE
_TEXT	SEGMENT
op$ = 64
nitems$ = 72
__PyObject_GC_RESIZE PROC				; COMDAT

; 372  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 373  :     if (Py_ISPX(op))

  0000e	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00016	4c 8b 4c 24 40	 mov	 r9, QWORD PTR op$[rsp]
  0001b	41 b8 75 01 00
	00		 mov	 r8d, 373		; 00000175H
  00021	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@FGBBJFKA@c?3?2src?2pyparallel?2include?2objimp@
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@HFBINLOF@__PyObject_GC_RESIZE?$AA@
  0002f	e8 00 00 00 00	 call	 _PyParallel_Guard
  00034	85 c0		 test	 eax, eax
  00036	74 13		 je	 SHORT $LN2@PyObject_G

; 374  :         return _PxObject_Resize(op, nitems);

  00038	48 8b 54 24 48	 mov	 rdx, QWORD PTR nitems$[rsp]
  0003d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR op$[rsp]
  00042	e8 00 00 00 00	 call	 _PxObject_Resize
  00047	eb 11		 jmp	 SHORT $LN3@PyObject_G

; 375  :     else

  00049	eb 0f		 jmp	 SHORT $LN1@PyObject_G
$LN2@PyObject_G:

; 376  :         return _PyObject_GC_Resize(op, nitems);

  0004b	48 8b 54 24 48	 mov	 rdx, QWORD PTR nitems$[rsp]
  00050	48 8b 4c 24 40	 mov	 rcx, QWORD PTR op$[rsp]
  00055	e8 00 00 00 00	 call	 _PyObject_GC_Resize
$LN1@PyObject_G:
$LN3@PyObject_G:

; 377  : }

  0005a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0005e	c3		 ret	 0
__PyObject_GC_RESIZE ENDP
_TEXT	ENDS
PUBLIC	PyTuple_ClearFreeList
;	COMDAT pdata
; File c:\src\pyparallel\objects\tupleobject.c
pdata	SEGMENT
$pdata$PyTuple_ClearFreeList DD imagerel $LN9
	DD	imagerel $LN9+204
	DD	imagerel $unwind$PyTuple_ClearFreeList
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyTuple_ClearFreeList DD 010401H
	DD	08204H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyTuple_ClearFreeList
_TEXT	SEGMENT
i$ = 32
freelist_size$ = 36
p$21170 = 40
q$21171 = 48
PyTuple_ClearFreeList PROC				; COMDAT

; 912  : {

$LN9:
  00000	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 913  :     int freelist_size = 0;

  00004	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR freelist_size$[rsp], 0

; 914  : #if PyTuple_MAXSAVESIZE > 0
; 915  :     int i;
; 916  :     if (Py_PXCTX)

  0000c	e8 00 00 00 00	 call	 _Py_PXCTX
  00011	85 c0		 test	 eax, eax
  00013	74 07		 je	 SHORT $LN6@PyTuple_Cl

; 917  :         return 0;

  00015	33 c0		 xor	 eax, eax
  00017	e9 ab 00 00 00	 jmp	 $LN7@PyTuple_Cl
$LN6@PyTuple_Cl:

; 918  :     for (i = 1; i < PyTuple_MAXSAVESIZE; i++) {

  0001c	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR i$[rsp], 1
  00024	eb 0a		 jmp	 SHORT $LN5@PyTuple_Cl
$LN4@PyTuple_Cl:
  00026	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  0002a	ff c0		 inc	 eax
  0002c	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN5@PyTuple_Cl:
  00030	83 7c 24 20 14	 cmp	 DWORD PTR i$[rsp], 20
  00035	0f 8d 88 00 00
	00		 jge	 $LN3@PyTuple_Cl

; 919  :         PyTupleObject *p, *q;
; 920  :         p = free_list[i];

  0003b	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  00040	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:free_list
  00047	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  0004b	48 89 44 24 28	 mov	 QWORD PTR p$21170[rsp], rax

; 921  :         freelist_size += numfree[i];

  00050	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  00055	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:numfree
  0005c	8b 04 81	 mov	 eax, DWORD PTR [rcx+rax*4]
  0005f	8b 4c 24 24	 mov	 ecx, DWORD PTR freelist_size$[rsp]
  00063	03 c8		 add	 ecx, eax
  00065	8b c1		 mov	 eax, ecx
  00067	89 44 24 24	 mov	 DWORD PTR freelist_size$[rsp], eax

; 922  :         free_list[i] = NULL;

  0006b	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  00070	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:free_list
  00077	48 c7 04 c1 00
	00 00 00	 mov	 QWORD PTR [rcx+rax*8], 0

; 923  :         numfree[i] = 0;

  0007f	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  00084	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:numfree
  0008b	c7 04 81 00 00
	00 00		 mov	 DWORD PTR [rcx+rax*4], 0
$LN2@PyTuple_Cl:

; 924  :         while (p) {

  00092	48 83 7c 24 28
	00		 cmp	 QWORD PTR p$21170[rsp], 0
  00098	74 24		 je	 SHORT $LN1@PyTuple_Cl

; 925  :             q = p;

  0009a	48 8b 44 24 28	 mov	 rax, QWORD PTR p$21170[rsp]
  0009f	48 89 44 24 30	 mov	 QWORD PTR q$21171[rsp], rax

; 926  :             p = (PyTupleObject *)(p->ob_item[0]);

  000a4	48 8b 44 24 28	 mov	 rax, QWORD PTR p$21170[rsp]
  000a9	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  000ad	48 89 44 24 28	 mov	 QWORD PTR p$21170[rsp], rax

; 927  :             PyObject_GC_Del(q);

  000b2	48 8b 4c 24 30	 mov	 rcx, QWORD PTR q$21171[rsp]
  000b7	e8 00 00 00 00	 call	 PyObject_GC_Del

; 928  :         }

  000bc	eb d4		 jmp	 SHORT $LN2@PyTuple_Cl
$LN1@PyTuple_Cl:

; 929  :     }

  000be	e9 63 ff ff ff	 jmp	 $LN4@PyTuple_Cl
$LN3@PyTuple_Cl:

; 930  : #endif
; 931  :     return freelist_size;

  000c3	8b 44 24 24	 mov	 eax, DWORD PTR freelist_size$[rsp]
$LN7@PyTuple_Cl:

; 932  : }

  000c7	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000cb	c3		 ret	 0
PyTuple_ClearFreeList ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@KMLPFJPG@PyTuple_Fini?$AA@		; `string'
PUBLIC	PyTuple_Fini
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyTuple_Fini DD imagerel $LN8
	DD	imagerel $LN8+144
	DD	imagerel $unwind$PyTuple_Fini
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyTuple_Fini DD 010401H
	DD	08204H
xdata	ENDS
;	COMDAT ??_C@_0N@KMLPFJPG@PyTuple_Fini?$AA@
CONST	SEGMENT
??_C@_0N@KMLPFJPG@PyTuple_Fini?$AA@ DB 'PyTuple_Fini', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyTuple_Fini
_TEXT	SEGMENT
_py_tmp$21185 = 48
PyTuple_Fini PROC					; COMDAT

; 936  : {

$LN8:
  00000	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 937  : #if PyTuple_MAXSAVESIZE > 0
; 938  :     /* empty tuples are used all over the place and applications may
; 939  :      * rely on the fact that an empty tuple is a singleton. */
; 940  :     Py_GUARD

  00004	e8 00 00 00 00	 call	 _Py_PXCTX
  00009	85 c0		 test	 eax, eax
  0000b	74 1c		 je	 SHORT $LN5@PyTuple_Fi
  0000d	45 33 c9	 xor	 r9d, r9d
  00010	41 b8 ac 03 00
	00		 mov	 r8d, 940		; 000003acH
  00016	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@NPBNLKPK@?4?4?2Objects?2tupleobject?4c?$AA@
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@KMLPFJPG@PyTuple_Fini?$AA@
  00024	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN5@PyTuple_Fi:
$LN4@PyTuple_Fi:

; 941  :     Py_CLEAR(free_list[0]);

  00029	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR free_list, 0
  00031	74 4d		 je	 SHORT $LN1@PyTuple_Fi
  00033	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0003b	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR free_list
  00042	41 b8 ad 03 00
	00		 mov	 r8d, 941		; 000003adH
  00048	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@NPBNLKPK@?4?4?2Objects?2tupleobject?4c?$AA@
  0004f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@KMLPFJPG@PyTuple_Fini?$AA@
  00056	e8 00 00 00 00	 call	 _PyParallel_Guard
  0005b	85 c0		 test	 eax, eax
  0005d	75 21		 jne	 SHORT $LN1@PyTuple_Fi
  0005f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR free_list
  00066	48 89 44 24 30	 mov	 QWORD PTR _py_tmp$21185[rsp], rax
  0006b	48 c7 05 00 00
	00 00 00 00 00
	00		 mov	 QWORD PTR free_list, 0
  00076	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _py_tmp$21185[rsp]
  0007b	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@PyTuple_Fi:
  00080	33 c0		 xor	 eax, eax
  00082	85 c0		 test	 eax, eax
  00084	75 a3		 jne	 SHORT $LN4@PyTuple_Fi

; 942  : 
; 943  :     (void)PyTuple_ClearFreeList();

  00086	e8 00 00 00 00	 call	 PyTuple_ClearFreeList

; 944  : #endif
; 945  : #ifdef SHOW_TRACK_COUNT
; 946  :     show_track();
; 947  : #endif
; 948  : }

  0008b	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0008f	c3		 ret	 0
PyTuple_Fini ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BC@KEPNBDGO@tupleiter_dealloc?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$tupleiter_dealloc DD imagerel tupleiter_dealloc
	DD	imagerel tupleiter_dealloc+295
	DD	imagerel $unwind$tupleiter_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$tupleiter_dealloc DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0BC@KEPNBDGO@tupleiter_dealloc?$AA@
CONST	SEGMENT
??_C@_0BC@KEPNBDGO@tupleiter_dealloc?$AA@ DB 'tupleiter_dealloc', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT tupleiter_dealloc
_TEXT	SEGMENT
g$21204 = 48
tv79 = 56
it$ = 80
tupleiter_dealloc PROC					; COMDAT

; 960  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 961  :     _PyObject_GC_UNTRACK(it);

  00009	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00011	4c 8b 4c 24 50	 mov	 r9, QWORD PTR it$[rsp]
  00016	41 b8 c1 03 00
	00		 mov	 r8d, 961		; 000003c1H
  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@NPBNLKPK@?4?4?2Objects?2tupleobject?4c?$AA@
  00023	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@KEPNBDGO@tupleiter_dealloc?$AA@
  0002a	e8 00 00 00 00	 call	 _PyParallel_Guard
  0002f	85 c0		 test	 eax, eax
  00031	0f 85 c1 00 00
	00		 jne	 $LN8@tupleiter_
$LN7@tupleiter_:
  00037	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0003f	4c 8b 4c 24 50	 mov	 r9, QWORD PTR it$[rsp]
  00044	41 b8 c1 03 00
	00		 mov	 r8d, 961		; 000003c1H
  0004a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@NPBNLKPK@?4?4?2Objects?2tupleobject?4c?$AA@
  00051	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@KEPNBDGO@tupleiter_dealloc?$AA@
  00058	e8 00 00 00 00	 call	 _PyParallel_Guard
  0005d	85 c0		 test	 eax, eax
  0005f	74 0b		 je	 SHORT $LN11@tupleiter_
  00061	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR tv79[rsp], 0
  0006a	eb 0e		 jmp	 SHORT $LN12@tupleiter_
$LN11@tupleiter_:
  0006c	48 8b 44 24 50	 mov	 rax, QWORD PTR it$[rsp]
  00071	48 83 e8 18	 sub	 rax, 24
  00075	48 89 44 24 38	 mov	 QWORD PTR tv79[rsp], rax
$LN12@tupleiter_:
  0007a	48 8b 44 24 38	 mov	 rax, QWORD PTR tv79[rsp]
  0007f	48 89 44 24 30	 mov	 QWORD PTR g$21204[rsp], rax
  00084	48 8b 44 24 30	 mov	 rax, QWORD PTR g$21204[rsp]
  00089	48 83 78 10 fe	 cmp	 QWORD PTR [rax+16], -2
  0008e	75 1c		 jne	 SHORT $LN13@tupleiter_
  00090	41 b8 c1 03 00
	00		 mov	 r8d, 961		; 000003c1H
  00096	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DC@DKKPAKMP@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAt?$AAu?$AAp?$AAl?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  0009d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EM@HFMJMDDM@?$AAg?$AA?9?$AA?$DO?$AAg?$AAc?$AA?4?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AAG?$AAC?$AA_?$AAR?$AAE?$AAF?$AAS?$AA_?$AAU?$AAN?$AAT?$AAR@
  000a4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000aa	33 c0		 xor	 eax, eax
$LN13@tupleiter_:
  000ac	48 8b 44 24 30	 mov	 rax, QWORD PTR g$21204[rsp]
  000b1	48 c7 40 10 fe
	ff ff ff	 mov	 QWORD PTR [rax+16], -2
  000b9	48 8b 44 24 30	 mov	 rax, QWORD PTR g$21204[rsp]
  000be	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  000c2	48 8b 4c 24 30	 mov	 rcx, QWORD PTR g$21204[rsp]
  000c7	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000ca	48 89 08	 mov	 QWORD PTR [rax], rcx
  000cd	48 8b 44 24 30	 mov	 rax, QWORD PTR g$21204[rsp]
  000d2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000d5	48 8b 4c 24 30	 mov	 rcx, QWORD PTR g$21204[rsp]
  000da	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  000de	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  000e2	48 8b 44 24 30	 mov	 rax, QWORD PTR g$21204[rsp]
  000e7	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
  000ee	33 c0		 xor	 eax, eax
  000f0	85 c0		 test	 eax, eax
  000f2	0f 85 3f ff ff
	ff		 jne	 $LN7@tupleiter_
$LN8@tupleiter_:
$LN4@tupleiter_:

; 962  :     Py_XDECREF(it->it_seq);

  000f8	48 8b 44 24 50	 mov	 rax, QWORD PTR it$[rsp]
  000fd	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  00102	74 0e		 je	 SHORT $LN1@tupleiter_
  00104	48 8b 44 24 50	 mov	 rax, QWORD PTR it$[rsp]
  00109	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  0010d	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@tupleiter_:
  00112	33 c0		 xor	 eax, eax
  00114	85 c0		 test	 eax, eax
  00116	75 e0		 jne	 SHORT $LN4@tupleiter_

; 963  :     PyObject_GC_Del(it);

  00118	48 8b 4c 24 50	 mov	 rcx, QWORD PTR it$[rsp]
  0011d	e8 00 00 00 00	 call	 PyObject_GC_Del

; 964  : }

  00122	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00126	c3		 ret	 0
tupleiter_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BD@HJJCDLFD@tupleiter_traverse?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$tupleiter_traverse DD imagerel tupleiter_traverse
	DD	imagerel tupleiter_traverse+116
	DD	imagerel $unwind$tupleiter_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$tupleiter_traverse DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT ??_C@_0BD@HJJCDLFD@tupleiter_traverse?$AA@
CONST	SEGMENT
??_C@_0BD@HJJCDLFD@tupleiter_traverse?$AA@ DB 'tupleiter_traverse', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT tupleiter_traverse
_TEXT	SEGMENT
vret$21228 = 32
it$ = 64
visit$ = 72
arg$ = 80
tupleiter_traverse PROC					; COMDAT

; 968  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN6@tupleiter_@2:

; 969  :     Py_VISIT(it->it_seq);

  00013	e8 00 00 00 00	 call	 _Py_PXCTX
  00018	85 c0		 test	 eax, eax
  0001a	74 1c		 je	 SHORT $LN3@tupleiter_@2
  0001c	45 33 c9	 xor	 r9d, r9d
  0001f	41 b8 c9 03 00
	00		 mov	 r8d, 969		; 000003c9H
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@NPBNLKPK@?4?4?2Objects?2tupleobject?4c?$AA@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@HJJCDLFD@tupleiter_traverse?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@tupleiter_@2:
  00038	48 8b 44 24 40	 mov	 rax, QWORD PTR it$[rsp]
  0003d	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  00042	74 23		 je	 SHORT $LN2@tupleiter_@2
  00044	48 8b 54 24 50	 mov	 rdx, QWORD PTR arg$[rsp]
  00049	48 8b 44 24 40	 mov	 rax, QWORD PTR it$[rsp]
  0004e	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  00052	ff 54 24 48	 call	 QWORD PTR visit$[rsp]
  00056	89 44 24 20	 mov	 DWORD PTR vret$21228[rsp], eax
  0005a	83 7c 24 20 00	 cmp	 DWORD PTR vret$21228[rsp], 0
  0005f	74 06		 je	 SHORT $LN1@tupleiter_@2
  00061	8b 44 24 20	 mov	 eax, DWORD PTR vret$21228[rsp]
  00065	eb 08		 jmp	 SHORT $LN7@tupleiter_@2
$LN1@tupleiter_@2:
$LN2@tupleiter_@2:
  00067	33 c0		 xor	 eax, eax
  00069	85 c0		 test	 eax, eax
  0006b	75 a6		 jne	 SHORT $LN6@tupleiter_@2

; 970  :     return 0;

  0006d	33 c0		 xor	 eax, eax
$LN7@tupleiter_@2:

; 971  : }

  0006f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00073	c3		 ret	 0
tupleiter_traverse ENDP
_TEXT	ENDS
PUBLIC	??_C@_1CG@EGABJAEH@?$AAP?$AAy?$AAT?$AAu?$AAp?$AAl?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAe?$AAq?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BG@OOKCFHFC@?$AAi?$AAt?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$tupleiter_next DD imagerel tupleiter_next
	DD	imagerel tupleiter_next+235
	DD	imagerel $unwind$tupleiter_next
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$tupleiter_next DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_1CG@EGABJAEH@?$AAP?$AAy?$AAT?$AAu?$AAp?$AAl?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAe?$AAq?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CG@EGABJAEH@?$AAP?$AAy?$AAT?$AAu?$AAp?$AAl?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAe?$AAq?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'T', 00H, 'u', 00H, 'p', 00H, 'l', 00H, 'e', 00H
	DB	'_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, '('
	DB	00H, 's', 00H, 'e', 00H, 'q', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BG@OOKCFHFC@?$AAi?$AAt?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
CONST	SEGMENT
??_C@_1BG@OOKCFHFC@?$AAi?$AAt?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ DB 'i'
	DB	00H, 't', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, 'N', 00H
	DB	'U', 00H, 'L', 00H, 'L', 00H, 00H, 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT tupleiter_next
_TEXT	SEGMENT
seq$ = 32
item$ = 40
it$ = 64
tupleiter_next PROC					; COMDAT

; 975  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 976  :     PyTupleObject *seq;
; 977  :     PyObject *item;
; 978  : 
; 979  :     assert(it != NULL);

  00009	48 83 7c 24 40
	00		 cmp	 QWORD PTR it$[rsp], 0
  0000f	75 1c		 jne	 SHORT $LN5@tupleiter_@3
  00011	41 b8 d3 03 00
	00		 mov	 r8d, 979		; 000003d3H
  00017	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DC@DKKPAKMP@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAt?$AAu?$AAp?$AAl?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BG@OOKCFHFC@?$AAi?$AAt?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
  00025	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0002b	33 c0		 xor	 eax, eax
$LN5@tupleiter_@3:

; 980  :     seq = it->it_seq;

  0002d	48 8b 44 24 40	 mov	 rax, QWORD PTR it$[rsp]
  00032	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00036	48 89 44 24 20	 mov	 QWORD PTR seq$[rsp], rax

; 981  :     if (seq == NULL)

  0003b	48 83 7c 24 20
	00		 cmp	 QWORD PTR seq$[rsp], 0
  00041	75 07		 jne	 SHORT $LN2@tupleiter_@3

; 982  :         return NULL;

  00043	33 c0		 xor	 eax, eax
  00045	e9 9c 00 00 00	 jmp	 $LN3@tupleiter_@3
$LN2@tupleiter_@3:

; 983  :     assert(PyTuple_Check(seq));

  0004a	48 8b 44 24 20	 mov	 rax, QWORD PTR seq$[rsp]
  0004f	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00053	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00059	25 00 00 00 04	 and	 eax, 67108864		; 04000000H
  0005e	85 c0		 test	 eax, eax
  00060	75 1c		 jne	 SHORT $LN6@tupleiter_@3
  00062	41 b8 d7 03 00
	00		 mov	 r8d, 983		; 000003d7H
  00068	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DC@DKKPAKMP@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAt?$AAu?$AAp?$AAl?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  0006f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@EGABJAEH@?$AAP?$AAy?$AAT?$AAu?$AAp?$AAl?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAe?$AAq?$AA?$CJ?$AA?$AA@
  00076	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0007c	33 c0		 xor	 eax, eax
$LN6@tupleiter_@3:

; 984  : 
; 985  :     if (it->it_index < PyTuple_GET_SIZE(seq)) {

  0007e	48 8b 44 24 40	 mov	 rax, QWORD PTR it$[rsp]
  00083	48 63 40 60	 movsxd	 rax, DWORD PTR [rax+96]
  00087	48 8b 4c 24 20	 mov	 rcx, QWORD PTR seq$[rsp]
  0008c	48 3b 41 60	 cmp	 rax, QWORD PTR [rcx+96]
  00090	7d 3b		 jge	 SHORT $LN1@tupleiter_@3

; 986  :         item = PyTuple_GET_ITEM(seq, it->it_index);

  00092	48 8b 44 24 40	 mov	 rax, QWORD PTR it$[rsp]
  00097	48 63 40 60	 movsxd	 rax, DWORD PTR [rax+96]
  0009b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR seq$[rsp]
  000a0	48 8b 44 c1 70	 mov	 rax, QWORD PTR [rcx+rax*8+112]
  000a5	48 89 44 24 28	 mov	 QWORD PTR item$[rsp], rax

; 987  :         ++it->it_index;

  000aa	48 8b 44 24 40	 mov	 rax, QWORD PTR it$[rsp]
  000af	8b 40 60	 mov	 eax, DWORD PTR [rax+96]
  000b2	ff c0		 inc	 eax
  000b4	48 8b 4c 24 40	 mov	 rcx, QWORD PTR it$[rsp]
  000b9	89 41 60	 mov	 DWORD PTR [rcx+96], eax

; 988  :         Py_INCREF(item);

  000bc	48 8b 4c 24 28	 mov	 rcx, QWORD PTR item$[rsp]
  000c1	e8 00 00 00 00	 call	 _Py_IncRef

; 989  :         return item;

  000c6	48 8b 44 24 28	 mov	 rax, QWORD PTR item$[rsp]
  000cb	eb 19		 jmp	 SHORT $LN3@tupleiter_@3
$LN1@tupleiter_@3:

; 990  :     }
; 991  : 
; 992  :     Py_DECREF(seq);

  000cd	48 8b 4c 24 20	 mov	 rcx, QWORD PTR seq$[rsp]
  000d2	e8 00 00 00 00	 call	 _Py_DecRef

; 993  :     it->it_seq = NULL;

  000d7	48 8b 44 24 40	 mov	 rax, QWORD PTR it$[rsp]
  000dc	48 c7 40 68 00
	00 00 00	 mov	 QWORD PTR [rax+104], 0

; 994  :     return NULL;

  000e4	33 c0		 xor	 eax, eax
$LN3@tupleiter_@3:

; 995  : }

  000e6	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000ea	c3		 ret	 0
tupleiter_next ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$tupleiter_len DD imagerel tupleiter_len
	DD	imagerel tupleiter_len+75
	DD	imagerel $unwind$tupleiter_len
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$tupleiter_len DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT tupleiter_len
_TEXT	SEGMENT
len$ = 32
it$ = 64
tupleiter_len PROC					; COMDAT

; 999  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1000 :     Py_ssize_t len = 0;

  00009	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR len$[rsp], 0

; 1001 :     if (it->it_seq)

  00012	48 8b 44 24 40	 mov	 rax, QWORD PTR it$[rsp]
  00017	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  0001c	74 1e		 je	 SHORT $LN1@tupleiter_@4

; 1002 :         len = PyTuple_GET_SIZE(it->it_seq) - it->it_index;

  0001e	48 8b 44 24 40	 mov	 rax, QWORD PTR it$[rsp]
  00023	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00027	48 8b 4c 24 40	 mov	 rcx, QWORD PTR it$[rsp]
  0002c	48 63 49 60	 movsxd	 rcx, DWORD PTR [rcx+96]
  00030	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00034	48 2b c1	 sub	 rax, rcx
  00037	48 89 44 24 20	 mov	 QWORD PTR len$[rsp], rax
$LN1@tupleiter_@4:

; 1003 :     return PyLong_FromSsize_t(len);

  0003c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR len$[rsp]
  00041	e8 00 00 00 00	 call	 PyLong_FromSsize_t

; 1004 : }

  00046	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004a	c3		 ret	 0
tupleiter_len ENDP
_TEXT	ENDS
PUBLIC	??_C@_05JMICDENA@N?$CI?$CI?$CJ?$CJ?$AA@		; `string'
PUBLIC	??_C@_05LHHNEACK@N?$CIO?$CJl?$AA@		; `string'
PUBLIC	??_C@_04BKLHDIKK@iter?$AA@			; `string'
EXTRN	_PyObject_GetBuiltin:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$tupleiter_reduce DD imagerel tupleiter_reduce
	DD	imagerel tupleiter_reduce+102
	DD	imagerel $unwind$tupleiter_reduce
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$tupleiter_reduce DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT ??_C@_05JMICDENA@N?$CI?$CI?$CJ?$CJ?$AA@
CONST	SEGMENT
??_C@_05JMICDENA@N?$CI?$CI?$CJ?$CJ?$AA@ DB 'N(())', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05LHHNEACK@N?$CIO?$CJl?$AA@
CONST	SEGMENT
??_C@_05LHHNEACK@N?$CIO?$CJl?$AA@ DB 'N(O)l', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04BKLHDIKK@iter?$AA@
CONST	SEGMENT
??_C@_04BKLHDIKK@iter?$AA@ DB 'iter', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT tupleiter_reduce
_TEXT	SEGMENT
it$ = 48
tupleiter_reduce PROC					; COMDAT

; 1010 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1011 :     if (it->it_seq)

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR it$[rsp]
  0000e	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  00013	74 31		 je	 SHORT $LN2@tupleiter_@5

; 1012 :         return Py_BuildValue("N(O)l", _PyObject_GetBuiltin("iter"),
; 1013 :                              it->it_seq, it->it_index);

  00015	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04BKLHDIKK@iter?$AA@
  0001c	e8 00 00 00 00	 call	 _PyObject_GetBuiltin
  00021	48 8b 4c 24 30	 mov	 rcx, QWORD PTR it$[rsp]
  00026	44 8b 49 60	 mov	 r9d, DWORD PTR [rcx+96]
  0002a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR it$[rsp]
  0002f	4c 8b 41 68	 mov	 r8, QWORD PTR [rcx+104]
  00033	48 8b d0	 mov	 rdx, rax
  00036	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05LHHNEACK@N?$CIO?$CJl?$AA@
  0003d	e8 00 00 00 00	 call	 Py_BuildValue
  00042	eb 1d		 jmp	 SHORT $LN3@tupleiter_@5

; 1014 :     else

  00044	eb 1b		 jmp	 SHORT $LN1@tupleiter_@5
$LN2@tupleiter_@5:

; 1015 :         return Py_BuildValue("N(())", _PyObject_GetBuiltin("iter"));

  00046	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04BKLHDIKK@iter?$AA@
  0004d	e8 00 00 00 00	 call	 _PyObject_GetBuiltin
  00052	48 8b d0	 mov	 rdx, rax
  00055	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05JMICDENA@N?$CI?$CI?$CJ?$CJ?$AA@
  0005c	e8 00 00 00 00	 call	 Py_BuildValue
$LN1@tupleiter_@5:
$LN3@tupleiter_@5:

; 1016 : }

  00061	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00065	c3		 ret	 0
tupleiter_reduce ENDP
_TEXT	ENDS
EXTRN	_Py_NoneStruct:BYTE
EXTRN	PyLong_AsLong:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$tupleiter_setstate DD imagerel tupleiter_setstate
	DD	imagerel tupleiter_setstate+162
	DD	imagerel $unwind$tupleiter_setstate
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$tupleiter_setstate DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT tupleiter_setstate
_TEXT	SEGMENT
index$ = 32
it$ = 64
state$ = 72
tupleiter_setstate PROC					; COMDAT

; 1020 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1021 :     long index = PyLong_AsLong(state);

  0000e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR state$[rsp]
  00013	e8 00 00 00 00	 call	 PyLong_AsLong
  00018	89 44 24 20	 mov	 DWORD PTR index$[rsp], eax

; 1022 :     if (index == -1 && PyErr_Occurred())

  0001c	83 7c 24 20 ff	 cmp	 DWORD PTR index$[rsp], -1
  00021	75 0e		 jne	 SHORT $LN5@tupleiter_@6
  00023	e8 00 00 00 00	 call	 PyErr_Occurred
  00028	48 85 c0	 test	 rax, rax
  0002b	74 04		 je	 SHORT $LN5@tupleiter_@6

; 1023 :         return NULL;

  0002d	33 c0		 xor	 eax, eax
  0002f	eb 6c		 jmp	 SHORT $LN6@tupleiter_@6
$LN5@tupleiter_@6:

; 1024 :     if (it->it_seq != NULL) {

  00031	48 8b 44 24 40	 mov	 rax, QWORD PTR it$[rsp]
  00036	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  0003b	74 4d		 je	 SHORT $LN4@tupleiter_@6

; 1025 :         if (index < 0)

  0003d	83 7c 24 20 00	 cmp	 DWORD PTR index$[rsp], 0
  00042	7d 0a		 jge	 SHORT $LN3@tupleiter_@6

; 1026 :             index = 0;

  00044	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR index$[rsp], 0
  0004c	eb 30		 jmp	 SHORT $LN2@tupleiter_@6
$LN3@tupleiter_@6:

; 1027 :         else if (it->it_seq != NULL && index > PyTuple_GET_SIZE(it->it_seq))

  0004e	48 8b 44 24 40	 mov	 rax, QWORD PTR it$[rsp]
  00053	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  00058	74 24		 je	 SHORT $LN1@tupleiter_@6
  0005a	48 63 44 24 20	 movsxd	 rax, DWORD PTR index$[rsp]
  0005f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR it$[rsp]
  00064	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]
  00068	48 3b 41 60	 cmp	 rax, QWORD PTR [rcx+96]
  0006c	7e 10		 jle	 SHORT $LN1@tupleiter_@6

; 1028 :             index = PyTuple_GET_SIZE(it->it_seq);

  0006e	48 8b 44 24 40	 mov	 rax, QWORD PTR it$[rsp]
  00073	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00077	8b 40 60	 mov	 eax, DWORD PTR [rax+96]
  0007a	89 44 24 20	 mov	 DWORD PTR index$[rsp], eax
$LN1@tupleiter_@6:
$LN2@tupleiter_@6:

; 1029 :         it->it_index = index;

  0007e	48 8b 44 24 40	 mov	 rax, QWORD PTR it$[rsp]
  00083	8b 4c 24 20	 mov	 ecx, DWORD PTR index$[rsp]
  00087	89 48 60	 mov	 DWORD PTR [rax+96], ecx
$LN4@tupleiter_@6:

; 1030 :     }
; 1031 :     Py_RETURN_NONE;

  0008a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00091	e8 00 00 00 00	 call	 _Py_IncRef
  00096	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
$LN6@tupleiter_@6:

; 1032 : }

  0009d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a1	c3		 ret	 0
tupleiter_setstate ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@LKDILOLH@tuple_iter?$AA@		; `string'
EXTRN	_PyObject_GC_New:PROC
EXTRN	_PxObject_New:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$tuple_iter DD imagerel tuple_iter
	DD	imagerel tuple_iter+411
	DD	imagerel $unwind$tuple_iter
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$tuple_iter DD 010901H
	DD	0a209H
xdata	ENDS
;	COMDAT ??_C@_0L@LKDILOLH@tuple_iter?$AA@
CONST	SEGMENT
??_C@_0L@LKDILOLH@tuple_iter?$AA@ DB 'tuple_iter', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT tuple_iter
_TEXT	SEGMENT
it$ = 48
g$21335 = 56
tv76 = 64
tv128 = 72
seq$ = 96
tuple_iter PROC						; COMDAT

; 1079 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 1080 :     tupleiterobject *it;
; 1081 : 
; 1082 :     if (!PyTuple_Check(seq)) {

  00009	48 8b 44 24 60	 mov	 rax, QWORD PTR seq$[rsp]
  0000e	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00012	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00018	25 00 00 00 04	 and	 eax, 67108864		; 04000000H
  0001d	85 c0		 test	 eax, eax
  0001f	75 18		 jne	 SHORT $LN7@tuple_iter

; 1083 :         PyErr_BadInternalCall();

  00021	ba 3b 04 00 00	 mov	 edx, 1083		; 0000043bH
  00026	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@NPBNLKPK@?4?4?2Objects?2tupleobject?4c?$AA@
  0002d	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 1084 :         return NULL;

  00032	33 c0		 xor	 eax, eax
  00034	e9 5d 01 00 00	 jmp	 $LN8@tuple_iter
$LN7@tuple_iter:

; 1085 :     }
; 1086 :     it = PyObject_GC_New(tupleiterobject, &PyTupleIter_Type);

  00039	e8 00 00 00 00	 call	 _Py_PXCTX
  0003e	85 c0		 test	 eax, eax
  00040	74 13		 je	 SHORT $LN10@tuple_iter
  00042	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyTupleIter_Type
  00049	e8 00 00 00 00	 call	 _PxObject_New
  0004e	48 89 44 24 40	 mov	 QWORD PTR tv76[rsp], rax
  00053	eb 11		 jmp	 SHORT $LN11@tuple_iter
$LN10@tuple_iter:
  00055	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyTupleIter_Type
  0005c	e8 00 00 00 00	 call	 _PyObject_GC_New
  00061	48 89 44 24 40	 mov	 QWORD PTR tv76[rsp], rax
$LN11@tuple_iter:
  00066	48 8b 44 24 40	 mov	 rax, QWORD PTR tv76[rsp]
  0006b	48 89 44 24 30	 mov	 QWORD PTR it$[rsp], rax

; 1087 :     if (it == NULL)

  00070	48 83 7c 24 30
	00		 cmp	 QWORD PTR it$[rsp], 0
  00076	75 07		 jne	 SHORT $LN6@tuple_iter

; 1088 :         return NULL;

  00078	33 c0		 xor	 eax, eax
  0007a	e9 17 01 00 00	 jmp	 $LN8@tuple_iter
$LN6@tuple_iter:

; 1089 :     it->it_index = 0;

  0007f	48 8b 44 24 30	 mov	 rax, QWORD PTR it$[rsp]
  00084	c7 40 60 00 00
	00 00		 mov	 DWORD PTR [rax+96], 0

; 1090 :     Py_INCREF(seq);

  0008b	48 8b 4c 24 60	 mov	 rcx, QWORD PTR seq$[rsp]
  00090	e8 00 00 00 00	 call	 _Py_IncRef

; 1091 :     it->it_seq = (PyTupleObject *)seq;

  00095	48 8b 44 24 30	 mov	 rax, QWORD PTR it$[rsp]
  0009a	48 8b 4c 24 60	 mov	 rcx, QWORD PTR seq$[rsp]
  0009f	48 89 48 68	 mov	 QWORD PTR [rax+104], rcx

; 1092 :     _PyObject_GC_TRACK(it);

  000a3	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000ab	4c 8b 4c 24 30	 mov	 r9, QWORD PTR it$[rsp]
  000b0	41 b8 44 04 00
	00		 mov	 r8d, 1092		; 00000444H
  000b6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@NPBNLKPK@?4?4?2Objects?2tupleobject?4c?$AA@
  000bd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@LKDILOLH@tuple_iter?$AA@
  000c4	e8 00 00 00 00	 call	 _PyParallel_Guard
  000c9	85 c0		 test	 eax, eax
  000cb	0f 85 c0 00 00
	00		 jne	 $LN5@tuple_iter
$LN4@tuple_iter:
  000d1	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000d9	4c 8b 4c 24 30	 mov	 r9, QWORD PTR it$[rsp]
  000de	41 b8 44 04 00
	00		 mov	 r8d, 1092		; 00000444H
  000e4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@NPBNLKPK@?4?4?2Objects?2tupleobject?4c?$AA@
  000eb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@LKDILOLH@tuple_iter?$AA@
  000f2	e8 00 00 00 00	 call	 _PyParallel_Guard
  000f7	85 c0		 test	 eax, eax
  000f9	74 0b		 je	 SHORT $LN12@tuple_iter
  000fb	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR tv128[rsp], 0
  00104	eb 0e		 jmp	 SHORT $LN13@tuple_iter
$LN12@tuple_iter:
  00106	48 8b 44 24 30	 mov	 rax, QWORD PTR it$[rsp]
  0010b	48 83 e8 18	 sub	 rax, 24
  0010f	48 89 44 24 48	 mov	 QWORD PTR tv128[rsp], rax
$LN13@tuple_iter:
  00114	48 8b 44 24 48	 mov	 rax, QWORD PTR tv128[rsp]
  00119	48 89 44 24 38	 mov	 QWORD PTR g$21335[rsp], rax
  0011e	48 8b 44 24 38	 mov	 rax, QWORD PTR g$21335[rsp]
  00123	48 83 78 10 fe	 cmp	 QWORD PTR [rax+16], -2
  00128	74 0c		 je	 SHORT $LN1@tuple_iter
  0012a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@
  00131	e8 00 00 00 00	 call	 Py_FatalError
$LN1@tuple_iter:
  00136	48 8b 44 24 38	 mov	 rax, QWORD PTR g$21335[rsp]
  0013b	48 c7 40 10 fd
	ff ff ff	 mov	 QWORD PTR [rax+16], -3
  00143	48 8b 44 24 38	 mov	 rax, QWORD PTR g$21335[rsp]
  00148	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR _PyGC_generation0
  0014f	48 89 08	 mov	 QWORD PTR [rax], rcx
  00152	48 8b 44 24 38	 mov	 rax, QWORD PTR g$21335[rsp]
  00157	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR _PyGC_generation0
  0015e	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00162	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  00166	48 8b 44 24 38	 mov	 rax, QWORD PTR g$21335[rsp]
  0016b	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0016f	48 8b 4c 24 38	 mov	 rcx, QWORD PTR g$21335[rsp]
  00174	48 89 08	 mov	 QWORD PTR [rax], rcx
  00177	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyGC_generation0
  0017e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR g$21335[rsp]
  00183	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  00187	33 c0		 xor	 eax, eax
  00189	85 c0		 test	 eax, eax
  0018b	0f 85 40 ff ff
	ff		 jne	 $LN4@tuple_iter
$LN5@tuple_iter:

; 1093 :     return (PyObject *)it;

  00191	48 8b 44 24 30	 mov	 rax, QWORD PTR it$[rsp]
$LN8@tuple_iter:

; 1094 : }

  00196	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0019a	c3		 ret	 0
tuple_iter ENDP
_TEXT	ENDS
END
