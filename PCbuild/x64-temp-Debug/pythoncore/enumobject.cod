; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_08DNDMMOJA@reversed?$AA@			; `string'
PUBLIC	??_C@_0N@MOOGCAMH@__setstate__?$AA@		; `string'
PUBLIC	??_C@_0BA@BJLPBKGK@__length_hint__?$AA@		; `string'
PUBLIC	??_C@_0N@FDLIKANA@__reversed__?$AA@		; `string'
PUBLIC	??_C@_09KCAIFCBE@enumerate?$AA@			; `string'
PUBLIC	??_C@_0L@NNMACJIG@__reduce__?$AA@		; `string'
PUBLIC	??_C@_05FAGFPHJG@start?$AA@			; `string'
PUBLIC	??_C@_08DCHCEAJP@iterable?$AA@			; `string'
PUBLIC	PyEnum_Type
PUBLIC	PyReversed_Type
EXTRN	PyObject_GC_Del:PROC
EXTRN	PyType_GenericAlloc:PROC
EXTRN	PyObject_SelfIter:PROC
EXTRN	PyObject_GenericGetAttr:PROC
EXTRN	PyType_Type:BYTE
_BSS	SEGMENT
?one@?1??enum_next_long@@9@9 DQ 01H DUP (?)		; `enum_next_long'::`2'::one
_BSS	ENDS
;	COMDAT ??_C@_08DNDMMOJA@reversed?$AA@
CONST	SEGMENT
??_C@_08DNDMMOJA@reversed?$AA@ DB 'reversed', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MOOGCAMH@__setstate__?$AA@
CONST	SEGMENT
??_C@_0N@MOOGCAMH@__setstate__?$AA@ DB '__setstate__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@BJLPBKGK@__length_hint__?$AA@
CONST	SEGMENT
??_C@_0BA@BJLPBKGK@__length_hint__?$AA@ DB '__length_hint__', 00H ; `string'
CONST	ENDS
_TLS	SEGMENT
?PyId___reversed__@?1??reversed_new@@9@9 DQ 0000000000000000H ; `reversed_new'::`2'::PyId___reversed__
	DQ	FLAT:??_C@_0N@FDLIKANA@__reversed__?$AA@
	DQ	0000000000000000H
_TLS	ENDS
;	COMDAT ??_C@_0N@FDLIKANA@__reversed__?$AA@
CONST	SEGMENT
??_C@_0N@FDLIKANA@__reversed__?$AA@ DB '__reversed__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09KCAIFCBE@enumerate?$AA@
CONST	SEGMENT
??_C@_09KCAIFCBE@enumerate?$AA@ DB 'enumerate', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NNMACJIG@__reduce__?$AA@
CONST	SEGMENT
??_C@_0L@NNMACJIG@__reduce__?$AA@ DB '__reduce__', 00H	; `string'
CONST	ENDS
_DATA	SEGMENT
?kwlist@?1??enum_new@@9@9 DQ FLAT:??_C@_08DCHCEAJP@iterable?$AA@ ; `enum_new'::`2'::kwlist
	DQ	FLAT:??_C@_05FAGFPHJG@start?$AA@
	DQ	0000000000000000H
reduce_doc DB	'Return state information for pickling.', 00H
	ORG $+1
enum_methods DQ	FLAT:??_C@_0L@NNMACJIG@__reduce__?$AA@
	DQ	FLAT:enum_reduce
	DD	04H
	ORG $+4
	DQ	FLAT:reduce_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
enum_doc DB	'enumerate(iterable[, start]) -> iterator for index, valu'
	DB	'e of iterable', 0aH, 0aH, 'Return an enumerate object.  itera'
	DB	'ble must be another object that supports', 0aH, 'iteration.  '
	DB	'The enumerate object yields pairs containing a count (from', 0aH
	DB	'start, which defaults to zero) and a value yielded by the ite'
	DB	'rable argument.', 0aH, 'enumerate is useful for obtaining an '
	DB	'indexed list:', 0aH, '    (0, seq[0]), (1, seq[1]), (2, seq[2'
	DB	']), ...', 00H
	ORG $+8
PyEnum_Type DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_09KCAIFCBE@enumerate?$AA@
	DQ	0000000000000080H
	DQ	0000000000000000H
	DQ	FLAT:enum_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044400H
	ORG $+4
	DQ	FLAT:enum_doc
	DQ	FLAT:enum_traverse
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_SelfIter
	DQ	FLAT:enum_next
	DQ	FLAT:enum_methods
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyType_GenericAlloc
	DQ	FLAT:enum_new
	DQ	FLAT:PyObject_GC_Del
	ORG $+64
reversed_doc DB	'reversed(sequence) -> reverse iterator over values of th'
	DB	'e sequence', 0aH, 0aH, 'Return a reverse iterator', 00H
	ORG $+2
length_hint_doc DB 'Private method returning an estimate of len(list(it))'
	DB	'.', 00H
	ORG $+1
setstate_doc DB	'Set state information for unpickling.', 00H
	ORG $+2
reversediter_methods DQ FLAT:??_C@_0BA@BJLPBKGK@__length_hint__?$AA@
	DQ	FLAT:reversed_len
	DD	04H
	ORG $+4
	DQ	FLAT:length_hint_doc
	DQ	FLAT:??_C@_0L@NNMACJIG@__reduce__?$AA@
	DQ	FLAT:reversed_reduce
	DD	04H
	ORG $+4
	DQ	FLAT:reduce_doc
	DQ	FLAT:??_C@_0N@MOOGCAMH@__setstate__?$AA@
	DQ	FLAT:reversed_setstate
	DD	08H
	ORG $+4
	DQ	FLAT:setstate_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
PyReversed_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_08DNDMMOJA@reversed?$AA@
	DQ	0000000000000070H
	DQ	0000000000000000H
	DQ	FLAT:reversed_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044400H
	ORG $+4
	DQ	FLAT:reversed_doc
	DQ	FLAT:reversed_traverse
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_SelfIter
	DQ	FLAT:reversed_next
	DQ	FLAT:reversediter_methods
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyType_GenericAlloc
	DQ	FLAT:reversed_new
	DQ	FLAT:PyObject_GC_Del
	ORG $+64
_DATA	ENDS
;	COMDAT ??_C@_05FAGFPHJG@start?$AA@
CONST	SEGMENT
??_C@_05FAGFPHJG@start?$AA@ DB 'start', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08DCHCEAJP@iterable?$AA@
CONST	SEGMENT
??_C@_08DCHCEAJP@iterable?$AA@ DB 'iterable', 00H	; `string'
CONST	ENDS
PUBLIC	??_C@_1CI@JEDHJDOO@?$AAP?$AAy?$AAL?$AAo?$AAn?$AAg?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAt?$AAa?$AAr?$AAt?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DA@LMNFBKCH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAe?$AAn?$AAu?$AAm?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@ ; `string'
PUBLIC	_Py_DecRef
PUBLIC	??_C@_0O@CPGIPOME@O?$HMO?3enumerate?$AA@	; `string'
EXTRN	PyTuple_Pack:PROC
EXTRN	_Py_NoneStruct:BYTE
EXTRN	PyObject_GetIter:PROC
EXTRN	PyErr_Clear:PROC
EXTRN	PyErr_Occurred:PROC
EXTRN	PyLong_AsSsize_t:PROC
EXTRN	__imp__wassert:PROC
EXTRN	PyNumber_Index:PROC
EXTRN	PyArg_ParseTupleAndKeywords:PROC
;	COMDAT pdata
; File c:\src\pyparallel\objects\enumobject.c
pdata	SEGMENT
$pdata$enum_new DD imagerel enum_new
	DD	imagerel enum_new+485
	DD	imagerel $unwind$enum_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$enum_new DD 011301H
	DD	0a213H
xdata	ENDS
;	COMDAT ??_C@_1CI@JEDHJDOO@?$AAP?$AAy?$AAL?$AAo?$AAn?$AAg?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAt?$AAa?$AAr?$AAt?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CI@JEDHJDOO@?$AAP?$AAy?$AAL?$AAo?$AAn?$AAg?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAt?$AAa?$AAr?$AAt?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'L', 00H, 'o', 00H, 'n', 00H, 'g', 00H, '_', 00H
	DB	'C', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, '(', 00H, 's'
	DB	00H, 't', 00H, 'a', 00H, 'r', 00H, 't', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DA@LMNFBKCH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAe?$AAn?$AAu?$AAm?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
CONST	SEGMENT
??_C@_1DA@LMNFBKCH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAe?$AAn?$AAu?$AAm?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@ DB '.'
	DB	00H, '.', 00H, '\', 00H, 'O', 00H, 'b', 00H, 'j', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 's', 00H, '\', 00H, 'e', 00H, 'n', 00H, 'u'
	DB	00H, 'm', 00H, 'o', 00H, 'b', 00H, 'j', 00H, 'e', 00H, 'c', 00H
	DB	't', 00H, '.', 00H, 'c', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@CPGIPOME@O?$HMO?3enumerate?$AA@
CONST	SEGMENT
??_C@_0O@CPGIPOME@O?$HMO?3enumerate?$AA@ DB 'O|O:enumerate', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT enum_new
_TEXT	SEGMENT
en$ = 48
start$ = 56
seq$ = 64
type$ = 96
args$ = 104
kwds$ = 112
enum_new PROC						; COMDAT

; 15   : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 16   :     enumobject *en;
; 17   :     PyObject *seq = NULL;

  00013	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR seq$[rsp], 0

; 18   :     PyObject *start = NULL;

  0001c	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR start$[rsp], 0

; 19   :     static char *kwlist[] = {"iterable", "start", 0};
; 20   : 
; 21   :     if (!PyArg_ParseTupleAndKeywords(args, kwds, "O|O:enumerate", kwlist,
; 22   :                                      &seq, &start))

  00025	48 8d 44 24 38	 lea	 rax, QWORD PTR start$[rsp]
  0002a	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0002f	48 8d 44 24 40	 lea	 rax, QWORD PTR seq$[rsp]
  00034	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00039	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?kwlist@?1??enum_new@@9@9
  00040	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0O@CPGIPOME@O?$HMO?3enumerate?$AA@
  00047	48 8b 54 24 70	 mov	 rdx, QWORD PTR kwds$[rsp]
  0004c	48 8b 4c 24 68	 mov	 rcx, QWORD PTR args$[rsp]
  00051	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  00056	85 c0		 test	 eax, eax
  00058	75 07		 jne	 SHORT $LN9@enum_new

; 23   :         return NULL;

  0005a	33 c0		 xor	 eax, eax
  0005c	e9 7f 01 00 00	 jmp	 $LN10@enum_new
$LN9@enum_new:

; 24   : 
; 25   :     en = (enumobject *)type->tp_alloc(type, 0);

  00061	33 d2		 xor	 edx, edx
  00063	48 8b 4c 24 60	 mov	 rcx, QWORD PTR type$[rsp]
  00068	48 8b 44 24 60	 mov	 rax, QWORD PTR type$[rsp]
  0006d	ff 90 88 01 00
	00		 call	 QWORD PTR [rax+392]
  00073	48 89 44 24 30	 mov	 QWORD PTR en$[rsp], rax

; 26   :     if (en == NULL)

  00078	48 83 7c 24 30
	00		 cmp	 QWORD PTR en$[rsp], 0
  0007e	75 07		 jne	 SHORT $LN8@enum_new

; 27   :         return NULL;

  00080	33 c0		 xor	 eax, eax
  00082	e9 59 01 00 00	 jmp	 $LN10@enum_new
$LN8@enum_new:

; 28   :     if (start != NULL) {

  00087	48 83 7c 24 38
	00		 cmp	 QWORD PTR start$[rsp], 0
  0008d	0f 84 c6 00 00
	00		 je	 $LN7@enum_new

; 29   :         start = PyNumber_Index(start);

  00093	48 8b 4c 24 38	 mov	 rcx, QWORD PTR start$[rsp]
  00098	e8 00 00 00 00	 call	 PyNumber_Index
  0009d	48 89 44 24 38	 mov	 QWORD PTR start$[rsp], rax

; 30   :         if (start == NULL) {

  000a2	48 83 7c 24 38
	00		 cmp	 QWORD PTR start$[rsp], 0
  000a8	75 11		 jne	 SHORT $LN6@enum_new

; 31   :             Py_DECREF(en);

  000aa	48 8b 4c 24 30	 mov	 rcx, QWORD PTR en$[rsp]
  000af	e8 00 00 00 00	 call	 _Py_DecRef

; 32   :             return NULL;

  000b4	33 c0		 xor	 eax, eax
  000b6	e9 25 01 00 00	 jmp	 $LN10@enum_new
$LN6@enum_new:

; 33   :         }
; 34   :         assert(PyLong_Check(start));

  000bb	48 8b 44 24 38	 mov	 rax, QWORD PTR start$[rsp]
  000c0	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000c4	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000ca	25 00 00 00 01	 and	 eax, 16777216		; 01000000H
  000cf	85 c0		 test	 eax, eax
  000d1	75 1c		 jne	 SHORT $LN12@enum_new
  000d3	41 b8 22 00 00
	00		 mov	 r8d, 34			; 00000022H
  000d9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@LMNFBKCH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAe?$AAn?$AAu?$AAm?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  000e0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CI@JEDHJDOO@?$AAP?$AAy?$AAL?$AAo?$AAn?$AAg?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAt?$AAa?$AAr?$AAt?$AA?$CJ?$AA?$AA@
  000e7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000ed	33 c0		 xor	 eax, eax
$LN12@enum_new:

; 35   :         en->en_index = PyLong_AsSsize_t(start);

  000ef	48 8b 4c 24 38	 mov	 rcx, QWORD PTR start$[rsp]
  000f4	e8 00 00 00 00	 call	 PyLong_AsSsize_t
  000f9	48 8b 4c 24 30	 mov	 rcx, QWORD PTR en$[rsp]
  000fe	48 89 41 60	 mov	 QWORD PTR [rcx+96], rax

; 36   :         if (en->en_index == -1 && PyErr_Occurred()) {

  00102	48 8b 44 24 30	 mov	 rax, QWORD PTR en$[rsp]
  00107	48 83 78 60 ff	 cmp	 QWORD PTR [rax+96], -1
  0010c	75 32		 jne	 SHORT $LN5@enum_new
  0010e	e8 00 00 00 00	 call	 PyErr_Occurred
  00113	48 85 c0	 test	 rax, rax
  00116	74 28		 je	 SHORT $LN5@enum_new

; 37   :             PyErr_Clear();

  00118	e8 00 00 00 00	 call	 PyErr_Clear

; 38   :             en->en_index = PY_SSIZE_T_MAX;

  0011d	48 8b 44 24 30	 mov	 rax, QWORD PTR en$[rsp]
  00122	48 b9 ff ff ff
	ff ff ff ff 7f	 mov	 rcx, 9223372036854775807 ; 7fffffffffffffffH
  0012c	48 89 48 60	 mov	 QWORD PTR [rax+96], rcx

; 39   :             en->en_longindex = start;

  00130	48 8b 44 24 30	 mov	 rax, QWORD PTR en$[rsp]
  00135	48 8b 4c 24 38	 mov	 rcx, QWORD PTR start$[rsp]
  0013a	48 89 48 78	 mov	 QWORD PTR [rax+120], rcx

; 40   :         } else {

  0013e	eb 17		 jmp	 SHORT $LN4@enum_new
$LN5@enum_new:

; 41   :             en->en_longindex = NULL;

  00140	48 8b 44 24 30	 mov	 rax, QWORD PTR en$[rsp]
  00145	48 c7 40 78 00
	00 00 00	 mov	 QWORD PTR [rax+120], 0

; 42   :             Py_DECREF(start);

  0014d	48 8b 4c 24 38	 mov	 rcx, QWORD PTR start$[rsp]
  00152	e8 00 00 00 00	 call	 _Py_DecRef
$LN4@enum_new:

; 43   :         }
; 44   :     } else {

  00157	eb 1a		 jmp	 SHORT $LN3@enum_new
$LN7@enum_new:

; 45   :         en->en_index = 0;

  00159	48 8b 44 24 30	 mov	 rax, QWORD PTR en$[rsp]
  0015e	48 c7 40 60 00
	00 00 00	 mov	 QWORD PTR [rax+96], 0

; 46   :         en->en_longindex = NULL;

  00166	48 8b 44 24 30	 mov	 rax, QWORD PTR en$[rsp]
  0016b	48 c7 40 78 00
	00 00 00	 mov	 QWORD PTR [rax+120], 0
$LN3@enum_new:

; 47   :     }
; 48   :     en->en_sit = PyObject_GetIter(seq);

  00173	48 8b 4c 24 40	 mov	 rcx, QWORD PTR seq$[rsp]
  00178	e8 00 00 00 00	 call	 PyObject_GetIter
  0017d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR en$[rsp]
  00182	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax

; 49   :     if (en->en_sit == NULL) {

  00186	48 8b 44 24 30	 mov	 rax, QWORD PTR en$[rsp]
  0018b	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  00190	75 0e		 jne	 SHORT $LN2@enum_new

; 50   :         Py_DECREF(en);

  00192	48 8b 4c 24 30	 mov	 rcx, QWORD PTR en$[rsp]
  00197	e8 00 00 00 00	 call	 _Py_DecRef

; 51   :         return NULL;

  0019c	33 c0		 xor	 eax, eax
  0019e	eb 40		 jmp	 SHORT $LN10@enum_new
$LN2@enum_new:

; 52   :     }
; 53   :     en->en_result = PyTuple_Pack(2, Py_None, Py_None);

  001a0	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:_Py_NoneStruct
  001a7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_Py_NoneStruct
  001ae	b9 02 00 00 00	 mov	 ecx, 2
  001b3	e8 00 00 00 00	 call	 PyTuple_Pack
  001b8	48 8b 4c 24 30	 mov	 rcx, QWORD PTR en$[rsp]
  001bd	48 89 41 70	 mov	 QWORD PTR [rcx+112], rax

; 54   :     if (en->en_result == NULL) {

  001c1	48 8b 44 24 30	 mov	 rax, QWORD PTR en$[rsp]
  001c6	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  001cb	75 0e		 jne	 SHORT $LN1@enum_new

; 55   :         Py_DECREF(en);

  001cd	48 8b 4c 24 30	 mov	 rcx, QWORD PTR en$[rsp]
  001d2	e8 00 00 00 00	 call	 _Py_DecRef

; 56   :         return NULL;

  001d7	33 c0		 xor	 eax, eax
  001d9	eb 05		 jmp	 SHORT $LN10@enum_new
$LN1@enum_new:

; 57   :     }
; 58   :     return (PyObject *)en;

  001db	48 8b 44 24 30	 mov	 rax, QWORD PTR en$[rsp]
$LN10@enum_new:

; 59   : }

  001e0	48 83 c4 58	 add	 rsp, 88			; 00000058H
  001e4	c3		 ret	 0
enum_new ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
EXTRN	_Py_Dealloc:PROC
EXTRN	_Py_NegativeRefcount:PROC
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_RefTotal:QWORD
EXTRN	Px_DecRef:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN13
	DD	imagerel $LN13+257
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
tv81 = 48
op$ = 80
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN13:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	0f 85 e6 00 00
	00		 jne	 $LN8@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00016	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0001b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0001f	48 83 e0 20	 and	 rax, 32			; 00000020H
  00023	48 85 c0	 test	 rax, rax
  00026	75 14		 jne	 SHORT $LN6@Py_DecRef
  00028	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0002d	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00031	48 25 80 00 00
	00		 and	 rax, 128		; 00000080H
  00037	48 85 c0	 test	 rax, rax
  0003a	74 0f		 je	 SHORT $LN7@Py_DecRef
$LN6@Py_DecRef:

; 926  :             Px_DECREF(op);

  0003c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  00041	e8 00 00 00 00	 call	 Px_DecRef
  00046	e9 b1 00 00 00	 jmp	 $LN5@Py_DecRef
$LN7@Py_DecRef:

; 927  :         else if (!Px_ISPX(op)) {

  0004b	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00050	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00054	48 83 e0 02	 and	 rax, 2
  00058	48 85 c0	 test	 rax, rax
  0005b	0f 85 9b 00 00
	00		 jne	 $LN4@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;

  00061	e8 00 00 00 00	 call	 _Py_PXCTX
  00066	85 c0		 test	 eax, eax
  00068	74 02		 je	 SHORT $LN11@Py_DecRef
  0006a	eb 11		 jmp	 SHORT $LN12@Py_DecRef
$LN11@Py_DecRef:
  0006c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00073	48 ff c8	 dec	 rax
  00076	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN12@Py_DecRef:

; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  0007d	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00082	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00086	48 ff c8	 dec	 rax
  00089	48 89 44 24 30	 mov	 QWORD PTR tv81[rsp], rax
  0008e	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00093	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv81[rsp]
  00098	48 89 48 50	 mov	 QWORD PTR [rax+80], rcx
  0009c	48 83 7c 24 30
	00		 cmp	 QWORD PTR tv81[rsp], 0
  000a2	74 4e		 je	 SHORT $LN3@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);

  000a4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000ac	4c 8b 4c 24 50	 mov	 r9, QWORD PTR op$[rsp]
  000b1	41 b8 a2 03 00
	00		 mov	 r8d, 930		; 000003a2H
  000b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000c5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ca	85 c0		 test	 eax, eax
  000cc	75 22		 jne	 SHORT $LN2@Py_DecRef
  000ce	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  000d3	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000d8	7d 16		 jge	 SHORT $LN2@Py_DecRef
  000da	4c 8b 44 24 50	 mov	 r8, QWORD PTR op$[rsp]
  000df	ba a2 03 00 00	 mov	 edx, 930		; 000003a2H
  000e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000eb	e8 00 00 00 00	 call	 _Py_NegativeRefcount
$LN2@Py_DecRef:

; 931  :             } else

  000f0	eb 0a		 jmp	 SHORT $LN1@Py_DecRef
$LN3@Py_DecRef:

; 932  :                 _Py_Dealloc((PyObject *)(op));

  000f2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  000f7	e8 00 00 00 00	 call	 _Py_Dealloc
$LN1@Py_DecRef:
$LN4@Py_DecRef:
$LN5@Py_DecRef:
$LN8@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  000fc	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00100	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
EXTRN	PyObject_GC_UnTrack:PROC
;	COMDAT pdata
; File c:\src\pyparallel\objects\enumobject.c
pdata	SEGMENT
$pdata$enum_dealloc DD imagerel enum_dealloc
	DD	imagerel enum_dealloc+140
	DD	imagerel $unwind$enum_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$enum_dealloc DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT enum_dealloc
_TEXT	SEGMENT
en$ = 48
enum_dealloc PROC					; COMDAT

; 63   : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 64   :     PyObject_GC_UnTrack(en);

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR en$[rsp]
  0000e	e8 00 00 00 00	 call	 PyObject_GC_UnTrack
$LN12@enum_deall:

; 65   :     Py_XDECREF(en->en_sit);

  00013	48 8b 44 24 30	 mov	 rax, QWORD PTR en$[rsp]
  00018	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  0001d	74 0e		 je	 SHORT $LN9@enum_deall
  0001f	48 8b 44 24 30	 mov	 rax, QWORD PTR en$[rsp]
  00024	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  00028	e8 00 00 00 00	 call	 _Py_DecRef
$LN9@enum_deall:
  0002d	33 c0		 xor	 eax, eax
  0002f	85 c0		 test	 eax, eax
  00031	75 e0		 jne	 SHORT $LN12@enum_deall
$LN8@enum_deall:

; 66   :     Py_XDECREF(en->en_result);

  00033	48 8b 44 24 30	 mov	 rax, QWORD PTR en$[rsp]
  00038	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  0003d	74 0e		 je	 SHORT $LN5@enum_deall
  0003f	48 8b 44 24 30	 mov	 rax, QWORD PTR en$[rsp]
  00044	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  00048	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@enum_deall:
  0004d	33 c0		 xor	 eax, eax
  0004f	85 c0		 test	 eax, eax
  00051	75 e0		 jne	 SHORT $LN8@enum_deall
$LN4@enum_deall:

; 67   :     Py_XDECREF(en->en_longindex);

  00053	48 8b 44 24 30	 mov	 rax, QWORD PTR en$[rsp]
  00058	48 83 78 78 00	 cmp	 QWORD PTR [rax+120], 0
  0005d	74 0e		 je	 SHORT $LN1@enum_deall
  0005f	48 8b 44 24 30	 mov	 rax, QWORD PTR en$[rsp]
  00064	48 8b 48 78	 mov	 rcx, QWORD PTR [rax+120]
  00068	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@enum_deall:
  0006d	33 c0		 xor	 eax, eax
  0006f	85 c0		 test	 eax, eax
  00071	75 e0		 jne	 SHORT $LN4@enum_deall

; 68   :     Py_TYPE(en)->tp_free(en);

  00073	48 8b 44 24 30	 mov	 rax, QWORD PTR en$[rsp]
  00078	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0007c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR en$[rsp]
  00081	ff 90 98 01 00
	00		 call	 QWORD PTR [rax+408]

; 69   : }

  00087	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0008b	c3		 ret	 0
enum_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@NAMADFPE@enum_traverse?$AA@		; `string'
PUBLIC	??_C@_0BI@IJIAJLMK@?4?4?2Objects?2enumobject?4c?$AA@ ; `string'
EXTRN	_PyParallel_ContextGuardFailure:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$enum_traverse DD imagerel enum_traverse
	DD	imagerel enum_traverse+299
	DD	imagerel $unwind$enum_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$enum_traverse DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT ??_C@_0O@NAMADFPE@enum_traverse?$AA@
CONST	SEGMENT
??_C@_0O@NAMADFPE@enum_traverse?$AA@ DB 'enum_traverse', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@IJIAJLMK@?4?4?2Objects?2enumobject?4c?$AA@
CONST	SEGMENT
??_C@_0BI@IJIAJLMK@?4?4?2Objects?2enumobject?4c?$AA@ DB '..\Objects\enumo'
	DB	'bject.c', 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT enum_traverse
_TEXT	SEGMENT
vret$20380 = 32
vret$20388 = 36
vret$20396 = 40
en$ = 64
visit$ = 72
arg$ = 80
enum_traverse PROC					; COMDAT

; 73   : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN18@enum_trave:

; 74   :     Py_VISIT(en->en_sit);

  00013	e8 00 00 00 00	 call	 _Py_PXCTX
  00018	85 c0		 test	 eax, eax
  0001a	74 1c		 je	 SHORT $LN15@enum_trave
  0001c	45 33 c9	 xor	 r9d, r9d
  0001f	41 b8 4a 00 00
	00		 mov	 r8d, 74			; 0000004aH
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@IJIAJLMK@?4?4?2Objects?2enumobject?4c?$AA@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@NAMADFPE@enum_traverse?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN15@enum_trave:
  00038	48 8b 44 24 40	 mov	 rax, QWORD PTR en$[rsp]
  0003d	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  00042	74 26		 je	 SHORT $LN14@enum_trave
  00044	48 8b 54 24 50	 mov	 rdx, QWORD PTR arg$[rsp]
  00049	48 8b 44 24 40	 mov	 rax, QWORD PTR en$[rsp]
  0004e	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  00052	ff 54 24 48	 call	 QWORD PTR visit$[rsp]
  00056	89 44 24 20	 mov	 DWORD PTR vret$20380[rsp], eax
  0005a	83 7c 24 20 00	 cmp	 DWORD PTR vret$20380[rsp], 0
  0005f	74 09		 je	 SHORT $LN13@enum_trave
  00061	8b 44 24 20	 mov	 eax, DWORD PTR vret$20380[rsp]
  00065	e9 bc 00 00 00	 jmp	 $LN19@enum_trave
$LN13@enum_trave:
$LN14@enum_trave:
  0006a	33 c0		 xor	 eax, eax
  0006c	85 c0		 test	 eax, eax
  0006e	75 a3		 jne	 SHORT $LN18@enum_trave
$LN12@enum_trave:

; 75   :     Py_VISIT(en->en_result);

  00070	e8 00 00 00 00	 call	 _Py_PXCTX
  00075	85 c0		 test	 eax, eax
  00077	74 1c		 je	 SHORT $LN9@enum_trave
  00079	45 33 c9	 xor	 r9d, r9d
  0007c	41 b8 4b 00 00
	00		 mov	 r8d, 75			; 0000004bH
  00082	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@IJIAJLMK@?4?4?2Objects?2enumobject?4c?$AA@
  00089	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@NAMADFPE@enum_traverse?$AA@
  00090	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN9@enum_trave:
  00095	48 8b 44 24 40	 mov	 rax, QWORD PTR en$[rsp]
  0009a	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  0009f	74 23		 je	 SHORT $LN8@enum_trave
  000a1	48 8b 54 24 50	 mov	 rdx, QWORD PTR arg$[rsp]
  000a6	48 8b 44 24 40	 mov	 rax, QWORD PTR en$[rsp]
  000ab	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  000af	ff 54 24 48	 call	 QWORD PTR visit$[rsp]
  000b3	89 44 24 24	 mov	 DWORD PTR vret$20388[rsp], eax
  000b7	83 7c 24 24 00	 cmp	 DWORD PTR vret$20388[rsp], 0
  000bc	74 06		 je	 SHORT $LN7@enum_trave
  000be	8b 44 24 24	 mov	 eax, DWORD PTR vret$20388[rsp]
  000c2	eb 62		 jmp	 SHORT $LN19@enum_trave
$LN7@enum_trave:
$LN8@enum_trave:
  000c4	33 c0		 xor	 eax, eax
  000c6	85 c0		 test	 eax, eax
  000c8	75 a6		 jne	 SHORT $LN12@enum_trave
$LN6@enum_trave:

; 76   :     Py_VISIT(en->en_longindex);

  000ca	e8 00 00 00 00	 call	 _Py_PXCTX
  000cf	85 c0		 test	 eax, eax
  000d1	74 1c		 je	 SHORT $LN3@enum_trave
  000d3	45 33 c9	 xor	 r9d, r9d
  000d6	41 b8 4c 00 00
	00		 mov	 r8d, 76			; 0000004cH
  000dc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@IJIAJLMK@?4?4?2Objects?2enumobject?4c?$AA@
  000e3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@NAMADFPE@enum_traverse?$AA@
  000ea	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@enum_trave:
  000ef	48 8b 44 24 40	 mov	 rax, QWORD PTR en$[rsp]
  000f4	48 83 78 78 00	 cmp	 QWORD PTR [rax+120], 0
  000f9	74 23		 je	 SHORT $LN2@enum_trave
  000fb	48 8b 54 24 50	 mov	 rdx, QWORD PTR arg$[rsp]
  00100	48 8b 44 24 40	 mov	 rax, QWORD PTR en$[rsp]
  00105	48 8b 48 78	 mov	 rcx, QWORD PTR [rax+120]
  00109	ff 54 24 48	 call	 QWORD PTR visit$[rsp]
  0010d	89 44 24 28	 mov	 DWORD PTR vret$20396[rsp], eax
  00111	83 7c 24 28 00	 cmp	 DWORD PTR vret$20396[rsp], 0
  00116	74 06		 je	 SHORT $LN1@enum_trave
  00118	8b 44 24 28	 mov	 eax, DWORD PTR vret$20396[rsp]
  0011c	eb 08		 jmp	 SHORT $LN19@enum_trave
$LN1@enum_trave:
$LN2@enum_trave:
  0011e	33 c0		 xor	 eax, eax
  00120	85 c0		 test	 eax, eax
  00122	75 a6		 jne	 SHORT $LN6@enum_trave

; 77   :     return 0;

  00124	33 c0		 xor	 eax, eax
$LN19@enum_trave:

; 78   : }

  00126	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0012a	c3		 ret	 0
enum_traverse ENDP
_TEXT	ENDS
PUBLIC	_Py_IncRef
EXTRN	PyTuple_New:PROC
EXTRN	PyLong_FromSsize_t:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$enum_next DD imagerel enum_next
	DD	imagerel enum_next+320
	DD	imagerel $unwind$enum_next
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$enum_next DD 010901H
	DD	08209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT enum_next
_TEXT	SEGMENT
it$ = 32
next_index$ = 40
next_item$ = 48
result$ = 56
en$ = 80
enum_next PROC						; COMDAT

; 124  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 125  :     PyObject *next_index;
; 126  :     PyObject *next_item;
; 127  :     PyObject *result = en->en_result;

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR en$[rsp]
  0000e	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00012	48 89 44 24 38	 mov	 QWORD PTR result$[rsp], rax

; 128  :     PyObject *it = en->en_sit;

  00017	48 8b 44 24 50	 mov	 rax, QWORD PTR en$[rsp]
  0001c	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00020	48 89 44 24 20	 mov	 QWORD PTR it$[rsp], rax

; 129  : 
; 130  :     next_item = (*Py_TYPE(it)->tp_iternext)(it);

  00025	48 8b 44 24 20	 mov	 rax, QWORD PTR it$[rsp]
  0002a	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0002e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR it$[rsp]
  00033	ff 90 38 01 00
	00		 call	 QWORD PTR [rax+312]
  00039	48 89 44 24 30	 mov	 QWORD PTR next_item$[rsp], rax

; 131  :     if (next_item == NULL)

  0003e	48 83 7c 24 30
	00		 cmp	 QWORD PTR next_item$[rsp], 0
  00044	75 07		 jne	 SHORT $LN6@enum_next

; 132  :         return NULL;

  00046	33 c0		 xor	 eax, eax
  00048	e9 ee 00 00 00	 jmp	 $LN7@enum_next
$LN6@enum_next:

; 133  : 
; 134  :     if (en->en_index == PY_SSIZE_T_MAX)

  0004d	48 8b 44 24 50	 mov	 rax, QWORD PTR en$[rsp]
  00052	48 b9 ff ff ff
	ff ff ff ff 7f	 mov	 rcx, 9223372036854775807 ; 7fffffffffffffffH
  0005c	48 39 48 60	 cmp	 QWORD PTR [rax+96], rcx
  00060	75 14		 jne	 SHORT $LN5@enum_next

; 135  :         return enum_next_long(en, next_item);

  00062	48 8b 54 24 30	 mov	 rdx, QWORD PTR next_item$[rsp]
  00067	48 8b 4c 24 50	 mov	 rcx, QWORD PTR en$[rsp]
  0006c	e8 00 00 00 00	 call	 enum_next_long
  00071	e9 c5 00 00 00	 jmp	 $LN7@enum_next
$LN5@enum_next:

; 136  : 
; 137  :     next_index = PyLong_FromSsize_t(en->en_index);

  00076	48 8b 44 24 50	 mov	 rax, QWORD PTR en$[rsp]
  0007b	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  0007f	e8 00 00 00 00	 call	 PyLong_FromSsize_t
  00084	48 89 44 24 28	 mov	 QWORD PTR next_index$[rsp], rax

; 138  :     if (next_index == NULL) {

  00089	48 83 7c 24 28
	00		 cmp	 QWORD PTR next_index$[rsp], 0
  0008f	75 11		 jne	 SHORT $LN4@enum_next

; 139  :         Py_DECREF(next_item);

  00091	48 8b 4c 24 30	 mov	 rcx, QWORD PTR next_item$[rsp]
  00096	e8 00 00 00 00	 call	 _Py_DecRef

; 140  :         return NULL;

  0009b	33 c0		 xor	 eax, eax
  0009d	e9 99 00 00 00	 jmp	 $LN7@enum_next
$LN4@enum_next:

; 141  :     }
; 142  :     en->en_index++;

  000a2	48 8b 44 24 50	 mov	 rax, QWORD PTR en$[rsp]
  000a7	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000ab	48 ff c0	 inc	 rax
  000ae	48 8b 4c 24 50	 mov	 rcx, QWORD PTR en$[rsp]
  000b3	48 89 41 60	 mov	 QWORD PTR [rcx+96], rax

; 143  : 
; 144  :     if (result->ob_refcnt == 1) {

  000b7	48 8b 44 24 38	 mov	 rax, QWORD PTR result$[rsp]
  000bc	48 83 78 50 01	 cmp	 QWORD PTR [rax+80], 1
  000c1	75 28		 jne	 SHORT $LN3@enum_next

; 145  :         Py_INCREF(result);

  000c3	48 8b 4c 24 38	 mov	 rcx, QWORD PTR result$[rsp]
  000c8	e8 00 00 00 00	 call	 _Py_IncRef

; 146  :         Py_DECREF(PyTuple_GET_ITEM(result, 0));

  000cd	48 8b 44 24 38	 mov	 rax, QWORD PTR result$[rsp]
  000d2	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  000d6	e8 00 00 00 00	 call	 _Py_DecRef

; 147  :         Py_DECREF(PyTuple_GET_ITEM(result, 1));

  000db	48 8b 44 24 38	 mov	 rax, QWORD PTR result$[rsp]
  000e0	48 8b 48 78	 mov	 rcx, QWORD PTR [rax+120]
  000e4	e8 00 00 00 00	 call	 _Py_DecRef

; 148  :     } else {

  000e9	eb 2f		 jmp	 SHORT $LN2@enum_next
$LN3@enum_next:

; 149  :         result = PyTuple_New(2);

  000eb	b9 02 00 00 00	 mov	 ecx, 2
  000f0	e8 00 00 00 00	 call	 PyTuple_New
  000f5	48 89 44 24 38	 mov	 QWORD PTR result$[rsp], rax

; 150  :         if (result == NULL) {

  000fa	48 83 7c 24 38
	00		 cmp	 QWORD PTR result$[rsp], 0
  00100	75 18		 jne	 SHORT $LN1@enum_next

; 151  :             Py_DECREF(next_index);

  00102	48 8b 4c 24 28	 mov	 rcx, QWORD PTR next_index$[rsp]
  00107	e8 00 00 00 00	 call	 _Py_DecRef

; 152  :             Py_DECREF(next_item);

  0010c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR next_item$[rsp]
  00111	e8 00 00 00 00	 call	 _Py_DecRef

; 153  :             return NULL;

  00116	33 c0		 xor	 eax, eax
  00118	eb 21		 jmp	 SHORT $LN7@enum_next
$LN1@enum_next:
$LN2@enum_next:

; 154  :         }
; 155  :     }
; 156  :     PyTuple_SET_ITEM(result, 0, next_index);

  0011a	48 8b 44 24 38	 mov	 rax, QWORD PTR result$[rsp]
  0011f	48 8b 4c 24 28	 mov	 rcx, QWORD PTR next_index$[rsp]
  00124	48 89 48 70	 mov	 QWORD PTR [rax+112], rcx

; 157  :     PyTuple_SET_ITEM(result, 1, next_item);

  00128	48 8b 44 24 38	 mov	 rax, QWORD PTR result$[rsp]
  0012d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR next_item$[rsp]
  00132	48 89 48 78	 mov	 QWORD PTR [rax+120], rcx

; 158  :     return result;

  00136	48 8b 44 24 38	 mov	 rax, QWORD PTR result$[rsp]
$LN7@enum_next:

; 159  : }

  0013b	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0013f	c3		 ret	 0
enum_next ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN7
	DD	imagerel $LN7+132
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 6d		 jne	 SHORT $LN2@Py_IncRef
  00012	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0001a	4c 8b 4c 24 40	 mov	 r9, QWORD PTR op$[rsp]
  0001f	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_Guard
  00038	85 c0		 test	 eax, eax
  0003a	75 12		 jne	 SHORT $LN1@Py_IncRef
  0003c	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  00041	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00045	48 83 e0 20	 and	 rax, 32			; 00000020H
  00049	48 85 c0	 test	 rax, rax
  0004c	74 31		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;

  0004e	e8 00 00 00 00	 call	 _Py_PXCTX
  00053	85 c0		 test	 eax, eax
  00055	74 02		 je	 SHORT $LN5@Py_IncRef
  00057	eb 11		 jmp	 SHORT $LN6@Py_IncRef
$LN5@Py_IncRef:
  00059	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00060	48 ff c0	 inc	 rax
  00063	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN6@Py_IncRef:

; 907  :         (((PyObject*)(op))->ob_refcnt++);

  0006a	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  0006f	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00073	48 ff c0	 inc	 rax
  00076	48 8b 4c 24 40	 mov	 rcx, QWORD PTR op$[rsp]
  0007b	48 89 41 50	 mov	 QWORD PTR [rcx+80], rax
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  0007f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00083	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_1CG@EOFNADBC@?$AAn?$AAe?$AAx?$AAt?$AA_?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ ; `string'
EXTRN	PyNumber_Add:PROC
EXTRN	PyLong_FromLong:PROC
;	COMDAT pdata
; File c:\src\pyparallel\objects\enumobject.c
pdata	SEGMENT
$pdata$enum_next_long DD imagerel enum_next_long
	DD	imagerel enum_next_long+365
	DD	imagerel $unwind$enum_next_long
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$enum_next_long DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_1CG@EOFNADBC@?$AAn?$AAe?$AAx?$AAt?$AA_?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
CONST	SEGMENT
??_C@_1CG@EOFNADBC@?$AAn?$AAe?$AAx?$AAt?$AA_?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ DB 'n'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, '_', 00H, 'i', 00H, 'n', 00H
	DB	'd', 00H, 'e', 00H, 'x', 00H, ' ', 00H, '!', 00H, '=', 00H, ' '
	DB	00H, 'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT enum_next_long
_TEXT	SEGMENT
next_index$ = 32
stepped_up$ = 40
result$ = 48
en$ = 80
next_item$ = 88
enum_next_long PROC					; COMDAT

; 82   : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 83   :     static PyObject *one = NULL;
; 84   :     PyObject *result = en->en_result;

  0000e	48 8b 44 24 50	 mov	 rax, QWORD PTR en$[rsp]
  00013	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00017	48 89 44 24 30	 mov	 QWORD PTR result$[rsp], rax

; 85   :     PyObject *next_index;
; 86   :     PyObject *stepped_up;
; 87   : 
; 88   :     if (en->en_longindex == NULL) {

  0001c	48 8b 44 24 50	 mov	 rax, QWORD PTR en$[rsp]
  00021	48 83 78 78 00	 cmp	 QWORD PTR [rax+120], 0
  00026	75 2b		 jne	 SHORT $LN8@enum_next_

; 89   :         en->en_longindex = PyLong_FromSsize_t(PY_SSIZE_T_MAX);

  00028	48 b9 ff ff ff
	ff ff ff ff 7f	 mov	 rcx, 9223372036854775807 ; 7fffffffffffffffH
  00032	e8 00 00 00 00	 call	 PyLong_FromSsize_t
  00037	48 8b 4c 24 50	 mov	 rcx, QWORD PTR en$[rsp]
  0003c	48 89 41 78	 mov	 QWORD PTR [rcx+120], rax

; 90   :         if (en->en_longindex == NULL)

  00040	48 8b 44 24 50	 mov	 rax, QWORD PTR en$[rsp]
  00045	48 83 78 78 00	 cmp	 QWORD PTR [rax+120], 0
  0004a	75 07		 jne	 SHORT $LN7@enum_next_

; 91   :             return NULL;

  0004c	33 c0		 xor	 eax, eax
  0004e	e9 15 01 00 00	 jmp	 $LN9@enum_next_
$LN7@enum_next_:
$LN8@enum_next_:

; 92   :     }
; 93   :     if (one == NULL) {

  00053	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?one@?1??enum_next_long@@9@9, 0
  0005b	75 22		 jne	 SHORT $LN6@enum_next_

; 94   :         one = PyLong_FromLong(1);

  0005d	b9 01 00 00 00	 mov	 ecx, 1
  00062	e8 00 00 00 00	 call	 PyLong_FromLong
  00067	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?one@?1??enum_next_long@@9@9, rax

; 95   :         if (one == NULL)

  0006e	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?one@?1??enum_next_long@@9@9, 0
  00076	75 07		 jne	 SHORT $LN5@enum_next_

; 96   :             return NULL;

  00078	33 c0		 xor	 eax, eax
  0007a	e9 e9 00 00 00	 jmp	 $LN9@enum_next_
$LN5@enum_next_:
$LN6@enum_next_:

; 97   :     }
; 98   :     next_index = en->en_longindex;

  0007f	48 8b 44 24 50	 mov	 rax, QWORD PTR en$[rsp]
  00084	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  00088	48 89 44 24 20	 mov	 QWORD PTR next_index$[rsp], rax

; 99   :     assert(next_index != NULL);

  0008d	48 83 7c 24 20
	00		 cmp	 QWORD PTR next_index$[rsp], 0
  00093	75 1c		 jne	 SHORT $LN11@enum_next_
  00095	41 b8 63 00 00
	00		 mov	 r8d, 99			; 00000063H
  0009b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@LMNFBKCH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAe?$AAn?$AAu?$AAm?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  000a2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@EOFNADBC@?$AAn?$AAe?$AAx?$AAt?$AA_?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
  000a9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000af	33 c0		 xor	 eax, eax
$LN11@enum_next_:

; 100  :     stepped_up = PyNumber_Add(next_index, one);

  000b1	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR ?one@?1??enum_next_long@@9@9
  000b8	48 8b 4c 24 20	 mov	 rcx, QWORD PTR next_index$[rsp]
  000bd	e8 00 00 00 00	 call	 PyNumber_Add
  000c2	48 89 44 24 28	 mov	 QWORD PTR stepped_up$[rsp], rax

; 101  :     if (stepped_up == NULL)

  000c7	48 83 7c 24 28
	00		 cmp	 QWORD PTR stepped_up$[rsp], 0
  000cd	75 07		 jne	 SHORT $LN4@enum_next_

; 102  :         return NULL;

  000cf	33 c0		 xor	 eax, eax
  000d1	e9 92 00 00 00	 jmp	 $LN9@enum_next_
$LN4@enum_next_:

; 103  :     en->en_longindex = stepped_up;

  000d6	48 8b 44 24 50	 mov	 rax, QWORD PTR en$[rsp]
  000db	48 8b 4c 24 28	 mov	 rcx, QWORD PTR stepped_up$[rsp]
  000e0	48 89 48 78	 mov	 QWORD PTR [rax+120], rcx

; 104  : 
; 105  :     if (result->ob_refcnt == 1) {

  000e4	48 8b 44 24 30	 mov	 rax, QWORD PTR result$[rsp]
  000e9	48 83 78 50 01	 cmp	 QWORD PTR [rax+80], 1
  000ee	75 28		 jne	 SHORT $LN3@enum_next_

; 106  :         Py_INCREF(result);

  000f0	48 8b 4c 24 30	 mov	 rcx, QWORD PTR result$[rsp]
  000f5	e8 00 00 00 00	 call	 _Py_IncRef

; 107  :         Py_DECREF(PyTuple_GET_ITEM(result, 0));

  000fa	48 8b 44 24 30	 mov	 rax, QWORD PTR result$[rsp]
  000ff	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  00103	e8 00 00 00 00	 call	 _Py_DecRef

; 108  :         Py_DECREF(PyTuple_GET_ITEM(result, 1));

  00108	48 8b 44 24 30	 mov	 rax, QWORD PTR result$[rsp]
  0010d	48 8b 48 78	 mov	 rcx, QWORD PTR [rax+120]
  00111	e8 00 00 00 00	 call	 _Py_DecRef

; 109  :     } else {

  00116	eb 2f		 jmp	 SHORT $LN2@enum_next_
$LN3@enum_next_:

; 110  :         result = PyTuple_New(2);

  00118	b9 02 00 00 00	 mov	 ecx, 2
  0011d	e8 00 00 00 00	 call	 PyTuple_New
  00122	48 89 44 24 30	 mov	 QWORD PTR result$[rsp], rax

; 111  :         if (result == NULL) {

  00127	48 83 7c 24 30
	00		 cmp	 QWORD PTR result$[rsp], 0
  0012d	75 18		 jne	 SHORT $LN1@enum_next_

; 112  :             Py_DECREF(next_index);

  0012f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR next_index$[rsp]
  00134	e8 00 00 00 00	 call	 _Py_DecRef

; 113  :             Py_DECREF(next_item);

  00139	48 8b 4c 24 58	 mov	 rcx, QWORD PTR next_item$[rsp]
  0013e	e8 00 00 00 00	 call	 _Py_DecRef

; 114  :             return NULL;

  00143	33 c0		 xor	 eax, eax
  00145	eb 21		 jmp	 SHORT $LN9@enum_next_
$LN1@enum_next_:
$LN2@enum_next_:

; 115  :         }
; 116  :     }
; 117  :     PyTuple_SET_ITEM(result, 0, next_index);

  00147	48 8b 44 24 30	 mov	 rax, QWORD PTR result$[rsp]
  0014c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR next_index$[rsp]
  00151	48 89 48 70	 mov	 QWORD PTR [rax+112], rcx

; 118  :     PyTuple_SET_ITEM(result, 1, next_item);

  00155	48 8b 44 24 30	 mov	 rax, QWORD PTR result$[rsp]
  0015a	48 8b 4c 24 58	 mov	 rcx, QWORD PTR next_item$[rsp]
  0015f	48 89 48 78	 mov	 QWORD PTR [rax+120], rcx

; 119  :     return result;

  00163	48 8b 44 24 30	 mov	 rax, QWORD PTR result$[rsp]
$LN9@enum_next_:

; 120  : }

  00168	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0016c	c3		 ret	 0
enum_next_long ENDP
_TEXT	ENDS
PUBLIC	??_C@_05IEPKLDIK@O?$CIOn?$CJ?$AA@		; `string'
PUBLIC	??_C@_05LNHFJPFN@O?$CIOO?$CJ?$AA@		; `string'
EXTRN	Py_BuildValue:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$enum_reduce DD imagerel enum_reduce
	DD	imagerel enum_reduce+108
	DD	imagerel $unwind$enum_reduce
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$enum_reduce DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT ??_C@_05IEPKLDIK@O?$CIOn?$CJ?$AA@
CONST	SEGMENT
??_C@_05IEPKLDIK@O?$CIOn?$CJ?$AA@ DB 'O(On)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05LNHFJPFN@O?$CIOO?$CJ?$AA@
CONST	SEGMENT
??_C@_05LNHFJPFN@O?$CIOO?$CJ?$AA@ DB 'O(OO)', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT enum_reduce
_TEXT	SEGMENT
en$ = 48
enum_reduce PROC					; COMDAT

; 163  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 164  :     if (en->en_longindex != NULL)

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR en$[rsp]
  0000e	48 83 78 78 00	 cmp	 QWORD PTR [rax+120], 0
  00013	74 2b		 je	 SHORT $LN2@enum_reduc

; 165  :         return Py_BuildValue("O(OO)", Py_TYPE(en), en->en_sit, en->en_longindex);

  00015	48 8b 44 24 30	 mov	 rax, QWORD PTR en$[rsp]
  0001a	4c 8b 48 78	 mov	 r9, QWORD PTR [rax+120]
  0001e	48 8b 44 24 30	 mov	 rax, QWORD PTR en$[rsp]
  00023	4c 8b 40 68	 mov	 r8, QWORD PTR [rax+104]
  00027	48 8b 44 24 30	 mov	 rax, QWORD PTR en$[rsp]
  0002c	48 8b 50 58	 mov	 rdx, QWORD PTR [rax+88]
  00030	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05LNHFJPFN@O?$CIOO?$CJ?$AA@
  00037	e8 00 00 00 00	 call	 Py_BuildValue
  0003c	eb 29		 jmp	 SHORT $LN3@enum_reduc

; 166  :     else

  0003e	eb 27		 jmp	 SHORT $LN1@enum_reduc
$LN2@enum_reduc:

; 167  :         return Py_BuildValue("O(On)", Py_TYPE(en), en->en_sit, en->en_index);

  00040	48 8b 44 24 30	 mov	 rax, QWORD PTR en$[rsp]
  00045	4c 8b 48 60	 mov	 r9, QWORD PTR [rax+96]
  00049	48 8b 44 24 30	 mov	 rax, QWORD PTR en$[rsp]
  0004e	4c 8b 40 68	 mov	 r8, QWORD PTR [rax+104]
  00052	48 8b 44 24 30	 mov	 rax, QWORD PTR en$[rsp]
  00057	48 8b 50 58	 mov	 rdx, QWORD PTR [rax+88]
  0005b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05IEPKLDIK@O?$CIOn?$CJ?$AA@
  00062	e8 00 00 00 00	 call	 Py_BuildValue
$LN1@enum_reduc:
$LN3@enum_reduc:

; 168  : }

  00067	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006b	c3		 ret	 0
enum_reduce ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CK@LEIEICCA@argument?5to?5reversed?$CI?$CJ?5must?5be?5a@ ; `string'
PUBLIC	??_C@_0L@HPIFNACC@reversed?$CI?$CJ?$AA@		; `string'
EXTRN	PySequence_Size:PROC
EXTRN	PyErr_SetString:PROC
EXTRN	PyExc_TypeError:QWORD
EXTRN	PySequence_Check:PROC
EXTRN	PyObject_CallFunctionObjArgs:PROC
EXTRN	_PyObject_LookupSpecial:PROC
EXTRN	PyArg_UnpackTuple:PROC
EXTRN	_PyArg_NoKeywords:PROC
EXTRN	_tls_index:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$reversed_new DD imagerel reversed_new
	DD	imagerel reversed_new+372
	DD	imagerel $unwind$reversed_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$reversed_new DD 011301H
	DD	0c213H
xdata	ENDS
;	COMDAT ??_C@_0CK@LEIEICCA@argument?5to?5reversed?$CI?$CJ?5must?5be?5a@
CONST	SEGMENT
??_C@_0CK@LEIEICCA@argument?5to?5reversed?$CI?$CJ?5must?5be?5a@ DB 'argum'
	DB	'ent to reversed() must be a sequence', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HPIFNACC@reversed?$CI?$CJ?$AA@
CONST	SEGMENT
??_C@_0L@HPIFNACC@reversed?$CI?$CJ?$AA@ DB 'reversed()', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT reversed_new
_TEXT	SEGMENT
reversed_meth$ = 48
n$ = 56
ro$ = 64
seq$ = 72
res$20539 = 80
type$ = 112
args$ = 120
kwds$ = 128
reversed_new PROC					; COMDAT

; 240  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 241  :     Py_ssize_t n;
; 242  :     PyObject *seq, *reversed_meth;
; 243  :     reversedobject *ro;
; 244  :     _Py_IDENTIFIER(__reversed__);
; 245  : 
; 246  :     if (type == &PyReversed_Type && !_PyArg_NoKeywords("reversed()", kwds))

  00013	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyReversed_Type
  0001a	48 39 44 24 70	 cmp	 QWORD PTR type$[rsp], rax
  0001f	75 1f		 jne	 SHORT $LN8@reversed_n
  00021	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR kwds$[rsp]
  00029	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@HPIFNACC@reversed?$CI?$CJ?$AA@
  00030	e8 00 00 00 00	 call	 _PyArg_NoKeywords
  00035	85 c0		 test	 eax, eax
  00037	75 07		 jne	 SHORT $LN8@reversed_n

; 247  :         return NULL;

  00039	33 c0		 xor	 eax, eax
  0003b	e9 2f 01 00 00	 jmp	 $LN9@reversed_n
$LN8@reversed_n:

; 248  : 
; 249  :     if (!PyArg_UnpackTuple(args, "reversed", 1, 1, &seq) )

  00040	48 8d 44 24 48	 lea	 rax, QWORD PTR seq$[rsp]
  00045	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0004a	41 b9 01 00 00
	00		 mov	 r9d, 1
  00050	41 b8 01 00 00
	00		 mov	 r8d, 1
  00056	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08DNDMMOJA@reversed?$AA@
  0005d	48 8b 4c 24 78	 mov	 rcx, QWORD PTR args$[rsp]
  00062	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00067	85 c0		 test	 eax, eax
  00069	75 07		 jne	 SHORT $LN7@reversed_n

; 250  :         return NULL;

  0006b	33 c0		 xor	 eax, eax
  0006d	e9 fd 00 00 00	 jmp	 $LN9@reversed_n
$LN7@reversed_n:

; 251  : 
; 252  :     reversed_meth = _PyObject_LookupSpecial(seq, &PyId___reversed__);

  00072	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId___reversed__@?1??reversed_new@@9@9
  00077	8b c0		 mov	 eax, eax
  00079	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0007f	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00088	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0008c	48 8b d0	 mov	 rdx, rax
  0008f	48 8b 4c 24 48	 mov	 rcx, QWORD PTR seq$[rsp]
  00094	e8 00 00 00 00	 call	 _PyObject_LookupSpecial
  00099	48 89 44 24 30	 mov	 QWORD PTR reversed_meth$[rsp], rax

; 253  :     if (reversed_meth != NULL) {

  0009e	48 83 7c 24 30
	00		 cmp	 QWORD PTR reversed_meth$[rsp], 0
  000a4	74 27		 je	 SHORT $LN6@reversed_n

; 254  :         PyObject *res = PyObject_CallFunctionObjArgs(reversed_meth, NULL);

  000a6	33 d2		 xor	 edx, edx
  000a8	48 8b 4c 24 30	 mov	 rcx, QWORD PTR reversed_meth$[rsp]
  000ad	e8 00 00 00 00	 call	 PyObject_CallFunctionObjArgs
  000b2	48 89 44 24 50	 mov	 QWORD PTR res$20539[rsp], rax

; 255  :         Py_DECREF(reversed_meth);

  000b7	48 8b 4c 24 30	 mov	 rcx, QWORD PTR reversed_meth$[rsp]
  000bc	e8 00 00 00 00	 call	 _Py_DecRef

; 256  :         return res;

  000c1	48 8b 44 24 50	 mov	 rax, QWORD PTR res$20539[rsp]
  000c6	e9 a4 00 00 00	 jmp	 $LN9@reversed_n
  000cb	eb 11		 jmp	 SHORT $LN5@reversed_n
$LN6@reversed_n:

; 257  :     }
; 258  :     else if (PyErr_Occurred())

  000cd	e8 00 00 00 00	 call	 PyErr_Occurred
  000d2	48 85 c0	 test	 rax, rax
  000d5	74 07		 je	 SHORT $LN4@reversed_n

; 259  :         return NULL;

  000d7	33 c0		 xor	 eax, eax
  000d9	e9 91 00 00 00	 jmp	 $LN9@reversed_n
$LN4@reversed_n:
$LN5@reversed_n:

; 260  : 
; 261  :     if (!PySequence_Check(seq)) {

  000de	48 8b 4c 24 48	 mov	 rcx, QWORD PTR seq$[rsp]
  000e3	e8 00 00 00 00	 call	 PySequence_Check
  000e8	85 c0		 test	 eax, eax
  000ea	75 17		 jne	 SHORT $LN3@reversed_n

; 262  :         PyErr_SetString(PyExc_TypeError,
; 263  :                         "argument to reversed() must be a sequence");

  000ec	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CK@LEIEICCA@argument?5to?5reversed?$CI?$CJ?5must?5be?5a@
  000f3	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000fa	e8 00 00 00 00	 call	 PyErr_SetString

; 264  :         return NULL;

  000ff	33 c0		 xor	 eax, eax
  00101	eb 6c		 jmp	 SHORT $LN9@reversed_n
$LN3@reversed_n:

; 265  :     }
; 266  : 
; 267  :     n = PySequence_Size(seq);

  00103	48 8b 4c 24 48	 mov	 rcx, QWORD PTR seq$[rsp]
  00108	e8 00 00 00 00	 call	 PySequence_Size
  0010d	48 89 44 24 38	 mov	 QWORD PTR n$[rsp], rax

; 268  :     if (n == -1)

  00112	48 83 7c 24 38
	ff		 cmp	 QWORD PTR n$[rsp], -1
  00118	75 04		 jne	 SHORT $LN2@reversed_n

; 269  :         return NULL;

  0011a	33 c0		 xor	 eax, eax
  0011c	eb 51		 jmp	 SHORT $LN9@reversed_n
$LN2@reversed_n:

; 270  : 
; 271  :     ro = (reversedobject *)type->tp_alloc(type, 0);

  0011e	33 d2		 xor	 edx, edx
  00120	48 8b 4c 24 70	 mov	 rcx, QWORD PTR type$[rsp]
  00125	48 8b 44 24 70	 mov	 rax, QWORD PTR type$[rsp]
  0012a	ff 90 88 01 00
	00		 call	 QWORD PTR [rax+392]
  00130	48 89 44 24 40	 mov	 QWORD PTR ro$[rsp], rax

; 272  :     if (ro == NULL)

  00135	48 83 7c 24 40
	00		 cmp	 QWORD PTR ro$[rsp], 0
  0013b	75 04		 jne	 SHORT $LN1@reversed_n

; 273  :         return NULL;

  0013d	33 c0		 xor	 eax, eax
  0013f	eb 2e		 jmp	 SHORT $LN9@reversed_n
$LN1@reversed_n:

; 274  : 
; 275  :     ro->index = n-1;

  00141	48 8b 44 24 38	 mov	 rax, QWORD PTR n$[rsp]
  00146	48 ff c8	 dec	 rax
  00149	48 8b 4c 24 40	 mov	 rcx, QWORD PTR ro$[rsp]
  0014e	48 89 41 60	 mov	 QWORD PTR [rcx+96], rax

; 276  :     Py_INCREF(seq);

  00152	48 8b 4c 24 48	 mov	 rcx, QWORD PTR seq$[rsp]
  00157	e8 00 00 00 00	 call	 _Py_IncRef

; 277  :     ro->seq = seq;

  0015c	48 8b 44 24 40	 mov	 rax, QWORD PTR ro$[rsp]
  00161	48 8b 4c 24 48	 mov	 rcx, QWORD PTR seq$[rsp]
  00166	48 89 48 68	 mov	 QWORD PTR [rax+104], rcx

; 278  :     return (PyObject *)ro;

  0016a	48 8b 44 24 40	 mov	 rax, QWORD PTR ro$[rsp]
$LN9@reversed_n:

; 279  : }

  0016f	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00173	c3		 ret	 0
reversed_new ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$reversed_dealloc DD imagerel reversed_dealloc
	DD	imagerel reversed_dealloc+76
	DD	imagerel $unwind$reversed_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$reversed_dealloc DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT reversed_dealloc
_TEXT	SEGMENT
ro$ = 48
reversed_dealloc PROC					; COMDAT

; 283  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 284  :     PyObject_GC_UnTrack(ro);

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR ro$[rsp]
  0000e	e8 00 00 00 00	 call	 PyObject_GC_UnTrack
$LN4@reversed_d:

; 285  :     Py_XDECREF(ro->seq);

  00013	48 8b 44 24 30	 mov	 rax, QWORD PTR ro$[rsp]
  00018	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  0001d	74 0e		 je	 SHORT $LN1@reversed_d
  0001f	48 8b 44 24 30	 mov	 rax, QWORD PTR ro$[rsp]
  00024	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  00028	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@reversed_d:
  0002d	33 c0		 xor	 eax, eax
  0002f	85 c0		 test	 eax, eax
  00031	75 e0		 jne	 SHORT $LN4@reversed_d

; 286  :     Py_TYPE(ro)->tp_free(ro);

  00033	48 8b 44 24 30	 mov	 rax, QWORD PTR ro$[rsp]
  00038	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0003c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR ro$[rsp]
  00041	ff 90 98 01 00
	00		 call	 QWORD PTR [rax+408]

; 287  : }

  00047	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004b	c3		 ret	 0
reversed_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BC@FHNIGFND@reversed_traverse?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$reversed_traverse DD imagerel reversed_traverse
	DD	imagerel reversed_traverse+116
	DD	imagerel $unwind$reversed_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$reversed_traverse DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT ??_C@_0BC@FHNIGFND@reversed_traverse?$AA@
CONST	SEGMENT
??_C@_0BC@FHNIGFND@reversed_traverse?$AA@ DB 'reversed_traverse', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT reversed_traverse
_TEXT	SEGMENT
vret$20580 = 32
ro$ = 64
visit$ = 72
arg$ = 80
reversed_traverse PROC					; COMDAT

; 291  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN6@reversed_t:

; 292  :     Py_VISIT(ro->seq);

  00013	e8 00 00 00 00	 call	 _Py_PXCTX
  00018	85 c0		 test	 eax, eax
  0001a	74 1c		 je	 SHORT $LN3@reversed_t
  0001c	45 33 c9	 xor	 r9d, r9d
  0001f	41 b8 24 01 00
	00		 mov	 r8d, 292		; 00000124H
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@IJIAJLMK@?4?4?2Objects?2enumobject?4c?$AA@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@FHNIGFND@reversed_traverse?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@reversed_t:
  00038	48 8b 44 24 40	 mov	 rax, QWORD PTR ro$[rsp]
  0003d	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  00042	74 23		 je	 SHORT $LN2@reversed_t
  00044	48 8b 54 24 50	 mov	 rdx, QWORD PTR arg$[rsp]
  00049	48 8b 44 24 40	 mov	 rax, QWORD PTR ro$[rsp]
  0004e	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  00052	ff 54 24 48	 call	 QWORD PTR visit$[rsp]
  00056	89 44 24 20	 mov	 DWORD PTR vret$20580[rsp], eax
  0005a	83 7c 24 20 00	 cmp	 DWORD PTR vret$20580[rsp], 0
  0005f	74 06		 je	 SHORT $LN1@reversed_t
  00061	8b 44 24 20	 mov	 eax, DWORD PTR vret$20580[rsp]
  00065	eb 08		 jmp	 SHORT $LN7@reversed_t
$LN1@reversed_t:
$LN2@reversed_t:
  00067	33 c0		 xor	 eax, eax
  00069	85 c0		 test	 eax, eax
  0006b	75 a6		 jne	 SHORT $LN6@reversed_t

; 293  :     return 0;

  0006d	33 c0		 xor	 eax, eax
$LN7@reversed_t:

; 294  : }

  0006f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00073	c3		 ret	 0
reversed_traverse ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@MGJOBLEK@reversed_next?$AA@		; `string'
EXTRN	PyExc_StopIteration:QWORD
EXTRN	PyErr_ExceptionMatches:PROC
EXTRN	PyExc_IndexError:QWORD
EXTRN	PySequence_GetItem:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$reversed_next DD imagerel reversed_next
	DD	imagerel reversed_next+252
	DD	imagerel $unwind$reversed_next
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$reversed_next DD 010901H
	DD	0a209H
xdata	ENDS
;	COMDAT ??_C@_0O@MGJOBLEK@reversed_next?$AA@
CONST	SEGMENT
??_C@_0O@MGJOBLEK@reversed_next?$AA@ DB 'reversed_next', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT reversed_next
_TEXT	SEGMENT
index$ = 48
item$ = 56
_py_tmp$20599 = 64
ro$ = 96
reversed_next PROC					; COMDAT

; 298  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 299  :     PyObject *item;
; 300  :     Py_ssize_t index = ro->index;

  00009	48 8b 44 24 60	 mov	 rax, QWORD PTR ro$[rsp]
  0000e	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00012	48 89 44 24 30	 mov	 QWORD PTR index$[rsp], rax

; 301  : 
; 302  :     if (index >= 0) {

  00017	48 83 7c 24 30
	00		 cmp	 QWORD PTR index$[rsp], 0
  0001d	7c 64		 jl	 SHORT $LN8@reversed_n@2

; 303  :         item = PySequence_GetItem(ro->seq, index);

  0001f	48 8b 54 24 30	 mov	 rdx, QWORD PTR index$[rsp]
  00024	48 8b 44 24 60	 mov	 rax, QWORD PTR ro$[rsp]
  00029	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  0002d	e8 00 00 00 00	 call	 PySequence_GetItem
  00032	48 89 44 24 38	 mov	 QWORD PTR item$[rsp], rax

; 304  :         if (item != NULL) {

  00037	48 83 7c 24 38
	00		 cmp	 QWORD PTR item$[rsp], 0
  0003d	74 1f		 je	 SHORT $LN7@reversed_n@2

; 305  :             ro->index--;

  0003f	48 8b 44 24 60	 mov	 rax, QWORD PTR ro$[rsp]
  00044	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00048	48 ff c8	 dec	 rax
  0004b	48 8b 4c 24 60	 mov	 rcx, QWORD PTR ro$[rsp]
  00050	48 89 41 60	 mov	 QWORD PTR [rcx+96], rax

; 306  :             return item;

  00054	48 8b 44 24 38	 mov	 rax, QWORD PTR item$[rsp]
  00059	e9 99 00 00 00	 jmp	 $LN9@reversed_n@2
$LN7@reversed_n@2:

; 307  :         }
; 308  :         if (PyErr_ExceptionMatches(PyExc_IndexError) ||
; 309  :             PyErr_ExceptionMatches(PyExc_StopIteration))

  0005e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_IndexError
  00065	e8 00 00 00 00	 call	 PyErr_ExceptionMatches
  0006a	85 c0		 test	 eax, eax
  0006c	75 10		 jne	 SHORT $LN5@reversed_n@2
  0006e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_StopIteration
  00075	e8 00 00 00 00	 call	 PyErr_ExceptionMatches
  0007a	85 c0		 test	 eax, eax
  0007c	74 05		 je	 SHORT $LN6@reversed_n@2
$LN5@reversed_n@2:

; 310  :             PyErr_Clear();

  0007e	e8 00 00 00 00	 call	 PyErr_Clear
$LN6@reversed_n@2:
$LN8@reversed_n@2:

; 311  :     }
; 312  :     ro->index = -1;

  00083	48 8b 44 24 60	 mov	 rax, QWORD PTR ro$[rsp]
  00088	48 c7 40 60 ff
	ff ff ff	 mov	 QWORD PTR [rax+96], -1
$LN4@reversed_n@2:

; 313  :     Py_CLEAR(ro->seq);

  00090	48 8b 44 24 60	 mov	 rax, QWORD PTR ro$[rsp]
  00095	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  0009a	74 53		 je	 SHORT $LN1@reversed_n@2
  0009c	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000a4	48 8b 44 24 60	 mov	 rax, QWORD PTR ro$[rsp]
  000a9	4c 8b 48 68	 mov	 r9, QWORD PTR [rax+104]
  000ad	41 b8 39 01 00
	00		 mov	 r8d, 313		; 00000139H
  000b3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@IJIAJLMK@?4?4?2Objects?2enumobject?4c?$AA@
  000ba	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@MGJOBLEK@reversed_next?$AA@
  000c1	e8 00 00 00 00	 call	 _PyParallel_Guard
  000c6	85 c0		 test	 eax, eax
  000c8	75 25		 jne	 SHORT $LN1@reversed_n@2
  000ca	48 8b 44 24 60	 mov	 rax, QWORD PTR ro$[rsp]
  000cf	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000d3	48 89 44 24 40	 mov	 QWORD PTR _py_tmp$20599[rsp], rax
  000d8	48 8b 44 24 60	 mov	 rax, QWORD PTR ro$[rsp]
  000dd	48 c7 40 68 00
	00 00 00	 mov	 QWORD PTR [rax+104], 0
  000e5	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _py_tmp$20599[rsp]
  000ea	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@reversed_n@2:
  000ef	33 c0		 xor	 eax, eax
  000f1	85 c0		 test	 eax, eax
  000f3	75 9b		 jne	 SHORT $LN4@reversed_n@2

; 314  :     return NULL;

  000f5	33 c0		 xor	 eax, eax
$LN9@reversed_n@2:

; 315  : }

  000f7	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000fb	c3		 ret	 0
reversed_next ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$reversed_len DD imagerel reversed_len
	DD	imagerel reversed_len+126
	DD	imagerel $unwind$reversed_len
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$reversed_len DD 010901H
	DD	08209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT reversed_len
_TEXT	SEGMENT
position$ = 32
seqsize$ = 40
tv76 = 48
ro$ = 80
reversed_len PROC					; COMDAT

; 324  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 325  :     Py_ssize_t position, seqsize;
; 326  : 
; 327  :     if (ro->seq == NULL)

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR ro$[rsp]
  0000e	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  00013	75 09		 jne	 SHORT $LN2@reversed_l

; 328  :         return PyLong_FromLong(0);

  00015	33 c9		 xor	 ecx, ecx
  00017	e8 00 00 00 00	 call	 PyLong_FromLong
  0001c	eb 5b		 jmp	 SHORT $LN3@reversed_l
$LN2@reversed_l:

; 329  :     seqsize = PySequence_Size(ro->seq);

  0001e	48 8b 44 24 50	 mov	 rax, QWORD PTR ro$[rsp]
  00023	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  00027	e8 00 00 00 00	 call	 PySequence_Size
  0002c	48 89 44 24 28	 mov	 QWORD PTR seqsize$[rsp], rax

; 330  :     if (seqsize == -1)

  00031	48 83 7c 24 28
	ff		 cmp	 QWORD PTR seqsize$[rsp], -1
  00037	75 04		 jne	 SHORT $LN1@reversed_l

; 331  :         return NULL;

  00039	33 c0		 xor	 eax, eax
  0003b	eb 3c		 jmp	 SHORT $LN3@reversed_l
$LN1@reversed_l:

; 332  :     position = ro->index + 1;

  0003d	48 8b 44 24 50	 mov	 rax, QWORD PTR ro$[rsp]
  00042	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00046	48 ff c0	 inc	 rax
  00049	48 89 44 24 20	 mov	 QWORD PTR position$[rsp], rax

; 333  :     return PyLong_FromSsize_t((seqsize < position)  ?  0  :  position);

  0004e	48 8b 44 24 20	 mov	 rax, QWORD PTR position$[rsp]
  00053	48 39 44 24 28	 cmp	 QWORD PTR seqsize$[rsp], rax
  00058	7d 0b		 jge	 SHORT $LN5@reversed_l
  0005a	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR tv76[rsp], 0
  00063	eb 0a		 jmp	 SHORT $LN6@reversed_l
$LN5@reversed_l:
  00065	48 8b 44 24 20	 mov	 rax, QWORD PTR position$[rsp]
  0006a	48 89 44 24 30	 mov	 QWORD PTR tv76[rsp], rax
$LN6@reversed_l:
  0006f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv76[rsp]
  00074	e8 00 00 00 00	 call	 PyLong_FromSsize_t
$LN3@reversed_l:

; 334  : }

  00079	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0007d	c3		 ret	 0
reversed_len ENDP
_TEXT	ENDS
PUBLIC	??_C@_05FHNOOHHF@O?$CI?$CI?$CJ?$CJ?$AA@		; `string'
PUBLIC	??_C@_05EOBHPBAN@O?$CIO?$CJn?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$reversed_reduce DD imagerel reversed_reduce
	DD	imagerel reversed_reduce+90
	DD	imagerel $unwind$reversed_reduce
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$reversed_reduce DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT ??_C@_05FHNOOHHF@O?$CI?$CI?$CJ?$CJ?$AA@
CONST	SEGMENT
??_C@_05FHNOOHHF@O?$CI?$CI?$CJ?$CJ?$AA@ DB 'O(())', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05EOBHPBAN@O?$CIO?$CJn?$AA@
CONST	SEGMENT
??_C@_05EOBHPBAN@O?$CIO?$CJn?$AA@ DB 'O(O)n', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT reversed_reduce
_TEXT	SEGMENT
ro$ = 48
reversed_reduce PROC					; COMDAT

; 340  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 341  :     if (ro->seq)

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR ro$[rsp]
  0000e	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  00013	74 2b		 je	 SHORT $LN2@reversed_r

; 342  :         return Py_BuildValue("O(O)n", Py_TYPE(ro), ro->seq, ro->index);

  00015	48 8b 44 24 30	 mov	 rax, QWORD PTR ro$[rsp]
  0001a	4c 8b 48 60	 mov	 r9, QWORD PTR [rax+96]
  0001e	48 8b 44 24 30	 mov	 rax, QWORD PTR ro$[rsp]
  00023	4c 8b 40 68	 mov	 r8, QWORD PTR [rax+104]
  00027	48 8b 44 24 30	 mov	 rax, QWORD PTR ro$[rsp]
  0002c	48 8b 50 58	 mov	 rdx, QWORD PTR [rax+88]
  00030	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05EOBHPBAN@O?$CIO?$CJn?$AA@
  00037	e8 00 00 00 00	 call	 Py_BuildValue
  0003c	eb 17		 jmp	 SHORT $LN3@reversed_r

; 343  :     else

  0003e	eb 15		 jmp	 SHORT $LN1@reversed_r
$LN2@reversed_r:

; 344  :         return Py_BuildValue("O(())", Py_TYPE(ro));

  00040	48 8b 44 24 30	 mov	 rax, QWORD PTR ro$[rsp]
  00045	48 8b 50 58	 mov	 rdx, QWORD PTR [rax+88]
  00049	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05FHNOOHHF@O?$CI?$CI?$CJ?$CJ?$AA@
  00050	e8 00 00 00 00	 call	 Py_BuildValue
$LN1@reversed_r:
$LN3@reversed_r:

; 345  : }

  00055	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00059	c3		 ret	 0
reversed_reduce ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$reversed_setstate DD imagerel reversed_setstate
	DD	imagerel reversed_setstate+179
	DD	imagerel $unwind$reversed_setstate
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$reversed_setstate DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT reversed_setstate
_TEXT	SEGMENT
index$ = 32
n$20636 = 40
ro$ = 64
state$ = 72
reversed_setstate PROC					; COMDAT

; 349  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 350  :     Py_ssize_t index = PyLong_AsSsize_t(state);

  0000e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR state$[rsp]
  00013	e8 00 00 00 00	 call	 PyLong_AsSsize_t
  00018	48 89 44 24 20	 mov	 QWORD PTR index$[rsp], rax

; 351  :     if (index == -1 && PyErr_Occurred())

  0001d	48 83 7c 24 20
	ff		 cmp	 QWORD PTR index$[rsp], -1
  00023	75 0e		 jne	 SHORT $LN6@reversed_s
  00025	e8 00 00 00 00	 call	 PyErr_Occurred
  0002a	48 85 c0	 test	 rax, rax
  0002d	74 04		 je	 SHORT $LN6@reversed_s

; 352  :         return NULL;

  0002f	33 c0		 xor	 eax, eax
  00031	eb 7b		 jmp	 SHORT $LN7@reversed_s
$LN6@reversed_s:

; 353  :     if (ro->seq != 0) {

  00033	48 8b 44 24 40	 mov	 rax, QWORD PTR ro$[rsp]
  00038	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  0003d	74 5c		 je	 SHORT $LN5@reversed_s

; 354  :         Py_ssize_t n = PySequence_Size(ro->seq);

  0003f	48 8b 44 24 40	 mov	 rax, QWORD PTR ro$[rsp]
  00044	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  00048	e8 00 00 00 00	 call	 PySequence_Size
  0004d	48 89 44 24 28	 mov	 QWORD PTR n$20636[rsp], rax

; 355  :         if (n < 0)

  00052	48 83 7c 24 28
	00		 cmp	 QWORD PTR n$20636[rsp], 0
  00058	7d 04		 jge	 SHORT $LN4@reversed_s

; 356  :             return NULL;

  0005a	33 c0		 xor	 eax, eax
  0005c	eb 50		 jmp	 SHORT $LN7@reversed_s
$LN4@reversed_s:

; 357  :         if (index < -1)

  0005e	48 83 7c 24 20
	ff		 cmp	 QWORD PTR index$[rsp], -1
  00064	7d 0b		 jge	 SHORT $LN3@reversed_s

; 358  :             index = -1;

  00066	48 c7 44 24 20
	ff ff ff ff	 mov	 QWORD PTR index$[rsp], -1
  0006f	eb 1c		 jmp	 SHORT $LN2@reversed_s
$LN3@reversed_s:

; 359  :         else if (index > n-1)

  00071	48 8b 44 24 28	 mov	 rax, QWORD PTR n$20636[rsp]
  00076	48 ff c8	 dec	 rax
  00079	48 39 44 24 20	 cmp	 QWORD PTR index$[rsp], rax
  0007e	7e 0d		 jle	 SHORT $LN1@reversed_s

; 360  :             index = n-1;

  00080	48 8b 44 24 28	 mov	 rax, QWORD PTR n$20636[rsp]
  00085	48 ff c8	 dec	 rax
  00088	48 89 44 24 20	 mov	 QWORD PTR index$[rsp], rax
$LN1@reversed_s:
$LN2@reversed_s:

; 361  :         ro->index = index;

  0008d	48 8b 44 24 40	 mov	 rax, QWORD PTR ro$[rsp]
  00092	48 8b 4c 24 20	 mov	 rcx, QWORD PTR index$[rsp]
  00097	48 89 48 60	 mov	 QWORD PTR [rax+96], rcx
$LN5@reversed_s:

; 362  :     }
; 363  :     Py_RETURN_NONE;

  0009b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  000a2	e8 00 00 00 00	 call	 _Py_IncRef
  000a7	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
$LN7@reversed_s:

; 364  : }

  000ae	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000b2	c3		 ret	 0
reversed_setstate ENDP
_TEXT	ENDS
END
