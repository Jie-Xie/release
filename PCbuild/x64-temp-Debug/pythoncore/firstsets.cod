; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0BH@HJHHCOPB@Adding?5FIRST?5sets?5?4?4?4?6?$AA@ ; `string'
PUBLIC	_Py_addfirstsets
EXTRN	__imp_printf:PROC
EXTRN	Py_DebugFlag:DWORD
;	COMDAT pdata
; File c:\src\pyparallel\parser\firstsets.c
pdata	SEGMENT
$pdata$_Py_addfirstsets DD imagerel $LN8
	DD	imagerel $LN8+121
	DD	imagerel $unwind$_Py_addfirstsets
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_addfirstsets DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0BH@HJHHCOPB@Adding?5FIRST?5sets?5?4?4?4?6?$AA@
CONST	SEGMENT
??_C@_0BH@HJHHCOPB@Adding?5FIRST?5sets?5?4?4?4?6?$AA@ DB 'Adding FIRST se'
	DB	'ts ...', 0aH, 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_addfirstsets
_TEXT	SEGMENT
i$ = 32
d$ = 40
g$ = 64
_Py_addfirstsets PROC					; COMDAT

; 15   : {

$LN8:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 16   :     int i;
; 17   :     dfa *d;
; 18   : 
; 19   :     if (Py_DebugFlag)

  00009	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR Py_DebugFlag, 0
  00010	74 0d		 je	 SHORT $LN5@Py_addfirs

; 20   :         printf("Adding FIRST sets ...\n");

  00012	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BH@HJHHCOPB@Adding?5FIRST?5sets?5?4?4?4?6?$AA@
  00019	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_printf
$LN5@Py_addfirs:

; 21   :     for (i = 0; i < g->g_ndfas; i++) {

  0001f	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00027	eb 0a		 jmp	 SHORT $LN4@Py_addfirs
$LN3@Py_addfirs:
  00029	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  0002d	ff c0		 inc	 eax
  0002f	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN4@Py_addfirs:
  00033	48 8b 44 24 40	 mov	 rax, QWORD PTR g$[rsp]
  00038	8b 00		 mov	 eax, DWORD PTR [rax]
  0003a	39 44 24 20	 cmp	 DWORD PTR i$[rsp], eax
  0003e	7d 34		 jge	 SHORT $LN2@Py_addfirs

; 22   :         d = &g->g_dfa[i];

  00040	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  00045	48 6b c0 28	 imul	 rax, 40			; 00000028H
  00049	48 8b 4c 24 40	 mov	 rcx, QWORD PTR g$[rsp]
  0004e	48 03 41 08	 add	 rax, QWORD PTR [rcx+8]
  00052	48 89 44 24 28	 mov	 QWORD PTR d$[rsp], rax

; 23   :         if (d->d_first == NULL)

  00057	48 8b 44 24 28	 mov	 rax, QWORD PTR d$[rsp]
  0005c	48 83 78 20 00	 cmp	 QWORD PTR [rax+32], 0
  00061	75 0f		 jne	 SHORT $LN1@Py_addfirs

; 24   :             calcfirstset(g, d);

  00063	48 8b 54 24 28	 mov	 rdx, QWORD PTR d$[rsp]
  00068	48 8b 4c 24 40	 mov	 rcx, QWORD PTR g$[rsp]
  0006d	e8 00 00 00 00	 call	 calcfirstset
$LN1@Py_addfirs:

; 25   :     }

  00072	eb b5		 jmp	 SHORT $LN3@Py_addfirs
$LN2@Py_addfirs:

; 26   : }

  00074	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00078	c3		 ret	 0
_Py_addfirstsets ENDP
_TEXT	ENDS
PUBLIC	??_C@_03NIEPJMFE@?5?$HN?6?$AA@			; `string'
PUBLIC	??_C@_03EEBNCBOD@?5?$CFs?$AA@			; `string'
PUBLIC	??_C@_0BG@LKLMONNO@FIRST?5set?5for?5?8?$CFs?8?3?5?$HL?$AA@ ; `string'
PUBLIC	??_C@_0BL@CMDAFHFL@Left?9recursion?5below?5?8?$CFs?8?6?$AA@ ; `string'
PUBLIC	??_C@_0CF@BLEGJFFD@no?5mem?5to?5resize?5sym?5in?5calcfirs@ ; `string'
PUBLIC	??_C@_0CD@KCONAOJG@no?5mem?5for?5new?5sym?5in?5calcfirsts@ ; `string'
PUBLIC	??_C@_0CH@LGDMKLFL@Re?9calculating?5FIRST?5set?5for?5?8?$CFs@ ; `string'
PUBLIC	??_C@_0BJ@DFLADLKJ@Left?9recursion?5for?5?8?$CFs?8?6?$AA@ ; `string'
PUBLIC	??_C@_0BO@GFDICKIM@Calculate?5FIRST?5set?5for?5?8?$CFs?8?6?$AA@ ; `string'
EXTRN	_PyObject_DebugFree:PROC
EXTRN	PyGrammar_LabelRepr:PROC
EXTRN	_Py_addbit:PROC
EXTRN	_Py_mergebitset:PROC
EXTRN	PyGrammar_FindDFA:PROC
EXTRN	_PyObject_DebugRealloc:PROC
EXTRN	_Py_findlabel:PROC
EXTRN	Py_FatalError:PROC
EXTRN	_PyObject_DebugMalloc:PROC
EXTRN	__imp_fprintf:PROC
EXTRN	__imp___iob_func:PROC
EXTRN	_Py_newbitset:PROC
_BSS	SEGMENT
?dummy@?1??calcfirstset@@9@9 DQ 01H DUP (?)		; `calcfirstset'::`2'::dummy
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$calcfirstset DD imagerel calcfirstset
	DD	imagerel calcfirstset+1046
	DD	imagerel $unwind$calcfirstset
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$calcfirstset DD 021101H
	DD	0110111H
xdata	ENDS
;	COMDAT ??_C@_03NIEPJMFE@?5?$HN?6?$AA@
CONST	SEGMENT
??_C@_03NIEPJMFE@?5?$HN?6?$AA@ DB ' }', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03EEBNCBOD@?5?$CFs?$AA@
CONST	SEGMENT
??_C@_03EEBNCBOD@?5?$CFs?$AA@ DB ' %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@LKLMONNO@FIRST?5set?5for?5?8?$CFs?8?3?5?$HL?$AA@
CONST	SEGMENT
??_C@_0BG@LKLMONNO@FIRST?5set?5for?5?8?$CFs?8?3?5?$HL?$AA@ DB 'FIRST set '
	DB	'for ''%s'': {', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@CMDAFHFL@Left?9recursion?5below?5?8?$CFs?8?6?$AA@
CONST	SEGMENT
??_C@_0BL@CMDAFHFL@Left?9recursion?5below?5?8?$CFs?8?6?$AA@ DB 'Left-recu'
	DB	'rsion below ''%s''', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@BLEGJFFD@no?5mem?5to?5resize?5sym?5in?5calcfirs@
CONST	SEGMENT
??_C@_0CF@BLEGJFFD@no?5mem?5to?5resize?5sym?5in?5calcfirs@ DB 'no mem to '
	DB	'resize sym in calcfirstset', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@KCONAOJG@no?5mem?5for?5new?5sym?5in?5calcfirsts@
CONST	SEGMENT
??_C@_0CD@KCONAOJG@no?5mem?5for?5new?5sym?5in?5calcfirsts@ DB 'no mem for'
	DB	' new sym in calcfirstset', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@LGDMKLFL@Re?9calculating?5FIRST?5set?5for?5?8?$CFs@
CONST	SEGMENT
??_C@_0CH@LGDMKLFL@Re?9calculating?5FIRST?5set?5for?5?8?$CFs@ DB 'Re-calc'
	DB	'ulating FIRST set for ''%s'' ???', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@DFLADLKJ@Left?9recursion?5for?5?8?$CFs?8?6?$AA@
CONST	SEGMENT
??_C@_0BJ@DFLADLKJ@Left?9recursion?5for?5?8?$CFs?8?6?$AA@ DB 'Left-recurs'
	DB	'ion for ''%s''', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@GFDICKIM@Calculate?5FIRST?5set?5for?5?8?$CFs?8?6?$AA@
CONST	SEGMENT
??_C@_0BO@GFDICKIM@Calculate?5FIRST?5set?5for?5?8?$CFs?8?6?$AA@ DB 'Calcu'
	DB	'late FIRST set for ''%s''', 0aH, 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT calcfirstset
_TEXT	SEGMENT
l0$ = 32
a$ = 40
i$ = 48
type$ = 52
nsyms$ = 56
s$ = 64
sym$ = 72
result$ = 80
nbits$ = 88
d1$ = 96
j$ = 104
tv202 = 108
tv292 = 112
g$ = 144
d$ = 152
calcfirstset PROC					; COMDAT

; 30   : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 31   :     int i, j;
; 32   :     state *s;
; 33   :     arc *a;
; 34   :     int nsyms;
; 35   :     int *sym;
; 36   :     int nbits;
; 37   :     static bitset dummy;
; 38   :     bitset result;
; 39   :     int type;
; 40   :     dfa *d1;
; 41   :     label *l0;
; 42   : 
; 43   :     if (Py_DebugFlag)

  00011	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR Py_DebugFlag, 0
  00018	74 19		 je	 SHORT $LN25@calcfirsts

; 44   :         printf("Calculate FIRST set for '%s'\n", d->d_name);

  0001a	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR d$[rsp]
  00022	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  00026	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BO@GFDICKIM@Calculate?5FIRST?5set?5for?5?8?$CFs?8?6?$AA@
  0002d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_printf
$LN25@calcfirsts:

; 45   : 
; 46   :     if (dummy == NULL)

  00033	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?dummy@?1??calcfirstset@@9@9, 0
  0003b	75 11		 jne	 SHORT $LN24@calcfirsts

; 47   :         dummy = newbitset(1);

  0003d	b9 01 00 00 00	 mov	 ecx, 1
  00042	e8 00 00 00 00	 call	 _Py_newbitset
  00047	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?dummy@?1??calcfirstset@@9@9, rax
$LN24@calcfirsts:

; 48   :     if (d->d_first == dummy) {

  0004e	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR d$[rsp]
  00056	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?dummy@?1??calcfirstset@@9@9
  0005d	48 39 48 20	 cmp	 QWORD PTR [rax+32], rcx
  00061	75 2b		 jne	 SHORT $LN23@calcfirsts

; 49   :         fprintf(stderr, "Left-recursion for '%s'\n", d->d_name);

  00063	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  00069	48 83 c0 60	 add	 rax, 96			; 00000060H
  0006d	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR d$[rsp]
  00075	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00079	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@DFLADLKJ@Left?9recursion?5for?5?8?$CFs?8?6?$AA@
  00080	48 8b c8	 mov	 rcx, rax
  00083	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fprintf

; 50   :         return;

  00089	e9 80 03 00 00	 jmp	 $LN26@calcfirsts
$LN23@calcfirsts:

; 51   :     }
; 52   :     if (d->d_first != NULL) {

  0008e	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR d$[rsp]
  00096	48 83 78 20 00	 cmp	 QWORD PTR [rax+32], 0
  0009b	74 26		 je	 SHORT $LN22@calcfirsts

; 53   :         fprintf(stderr, "Re-calculating FIRST set for '%s' ???\n",
; 54   :             d->d_name);

  0009d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  000a3	48 83 c0 60	 add	 rax, 96			; 00000060H
  000a7	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR d$[rsp]
  000af	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  000b3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CH@LGDMKLFL@Re?9calculating?5FIRST?5set?5for?5?8?$CFs@
  000ba	48 8b c8	 mov	 rcx, rax
  000bd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fprintf
$LN22@calcfirsts:

; 55   :     }
; 56   :     d->d_first = dummy;

  000c3	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR d$[rsp]
  000cb	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?dummy@?1??calcfirstset@@9@9
  000d2	48 89 48 20	 mov	 QWORD PTR [rax+32], rcx

; 57   : 
; 58   :     l0 = g->g_ll.ll_label;

  000d6	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR g$[rsp]
  000de	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  000e2	48 89 44 24 20	 mov	 QWORD PTR l0$[rsp], rax

; 59   :     nbits = g->g_ll.ll_nlabels;

  000e7	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR g$[rsp]
  000ef	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
  000f2	89 44 24 58	 mov	 DWORD PTR nbits$[rsp], eax

; 60   :     result = newbitset(nbits);

  000f6	8b 4c 24 58	 mov	 ecx, DWORD PTR nbits$[rsp]
  000fa	e8 00 00 00 00	 call	 _Py_newbitset
  000ff	48 89 44 24 50	 mov	 QWORD PTR result$[rsp], rax

; 61   : 
; 62   :     sym = (int *)PyObject_MALLOC(sizeof(int));

  00104	b9 04 00 00 00	 mov	 ecx, 4
  00109	e8 00 00 00 00	 call	 _PyObject_DebugMalloc
  0010e	48 89 44 24 48	 mov	 QWORD PTR sym$[rsp], rax

; 63   :     if (sym == NULL)

  00113	48 83 7c 24 48
	00		 cmp	 QWORD PTR sym$[rsp], 0
  00119	75 0c		 jne	 SHORT $LN21@calcfirsts

; 64   :         Py_FatalError("no mem for new sym in calcfirstset");

  0011b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CD@KCONAOJG@no?5mem?5for?5new?5sym?5in?5calcfirsts@
  00122	e8 00 00 00 00	 call	 Py_FatalError
$LN21@calcfirsts:

; 65   :     nsyms = 1;

  00127	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR nsyms$[rsp], 1

; 66   :     sym[0] = findlabel(&g->g_ll, d->d_type, (char *)NULL);

  0012f	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR g$[rsp]
  00137	48 83 c0 10	 add	 rax, 16
  0013b	45 33 c0	 xor	 r8d, r8d
  0013e	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR d$[rsp]
  00146	8b 11		 mov	 edx, DWORD PTR [rcx]
  00148	48 8b c8	 mov	 rcx, rax
  0014b	e8 00 00 00 00	 call	 _Py_findlabel
  00150	48 8b 4c 24 48	 mov	 rcx, QWORD PTR sym$[rsp]
  00155	89 01		 mov	 DWORD PTR [rcx], eax

; 67   : 
; 68   :     s = &d->d_state[d->d_initial];

  00157	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR d$[rsp]
  0015f	48 63 40 10	 movsxd	 rax, DWORD PTR [rax+16]
  00163	48 6b c0 28	 imul	 rax, 40			; 00000028H
  00167	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR d$[rsp]
  0016f	48 03 41 18	 add	 rax, QWORD PTR [rcx+24]
  00173	48 89 44 24 40	 mov	 QWORD PTR s$[rsp], rax

; 69   :     for (i = 0; i < s->s_narcs; i++) {

  00178	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00180	eb 0a		 jmp	 SHORT $LN20@calcfirsts
$LN19@calcfirsts:
  00182	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  00186	ff c0		 inc	 eax
  00188	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN20@calcfirsts:
  0018c	48 8b 44 24 40	 mov	 rax, QWORD PTR s$[rsp]
  00191	8b 00		 mov	 eax, DWORD PTR [rax]
  00193	39 44 24 30	 cmp	 DWORD PTR i$[rsp], eax
  00197	0f 8d 81 01 00
	00		 jge	 $LN18@calcfirsts

; 70   :         a = &s->s_arc[i];

  0019d	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$[rsp]
  001a2	48 8b 4c 24 40	 mov	 rcx, QWORD PTR s$[rsp]
  001a7	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  001ab	48 8d 04 81	 lea	 rax, QWORD PTR [rcx+rax*4]
  001af	48 89 44 24 28	 mov	 QWORD PTR a$[rsp], rax

; 71   :         for (j = 0; j < nsyms; j++) {

  001b4	c7 44 24 68 00
	00 00 00	 mov	 DWORD PTR j$[rsp], 0
  001bc	eb 0a		 jmp	 SHORT $LN17@calcfirsts
$LN16@calcfirsts:
  001be	8b 44 24 68	 mov	 eax, DWORD PTR j$[rsp]
  001c2	ff c0		 inc	 eax
  001c4	89 44 24 68	 mov	 DWORD PTR j$[rsp], eax
$LN17@calcfirsts:
  001c8	8b 44 24 38	 mov	 eax, DWORD PTR nsyms$[rsp]
  001cc	39 44 24 68	 cmp	 DWORD PTR j$[rsp], eax
  001d0	7d 1b		 jge	 SHORT $LN15@calcfirsts

; 72   :             if (sym[j] == a->a_lbl)

  001d2	48 63 44 24 68	 movsxd	 rax, DWORD PTR j$[rsp]
  001d7	48 8b 4c 24 28	 mov	 rcx, QWORD PTR a$[rsp]
  001dc	0f bf 09	 movsx	 ecx, WORD PTR [rcx]
  001df	48 8b 54 24 48	 mov	 rdx, QWORD PTR sym$[rsp]
  001e4	39 0c 82	 cmp	 DWORD PTR [rdx+rax*4], ecx
  001e7	75 02		 jne	 SHORT $LN14@calcfirsts

; 73   :                 break;

  001e9	eb 02		 jmp	 SHORT $LN15@calcfirsts
$LN14@calcfirsts:

; 74   :         }

  001eb	eb d1		 jmp	 SHORT $LN16@calcfirsts
$LN15@calcfirsts:

; 75   :         if (j >= nsyms) { /* New label */

  001ed	8b 44 24 38	 mov	 eax, DWORD PTR nsyms$[rsp]
  001f1	39 44 24 68	 cmp	 DWORD PTR j$[rsp], eax
  001f5	0f 8c 1e 01 00
	00		 jl	 $LN13@calcfirsts

; 76   :             sym = (int *)PyObject_REALLOC(sym,
; 77   :                                     sizeof(int) * (nsyms + 1));

  001fb	8b 44 24 38	 mov	 eax, DWORD PTR nsyms$[rsp]
  001ff	ff c0		 inc	 eax
  00201	48 98		 cdqe
  00203	48 c1 e0 02	 shl	 rax, 2
  00207	48 8b d0	 mov	 rdx, rax
  0020a	48 8b 4c 24 48	 mov	 rcx, QWORD PTR sym$[rsp]
  0020f	e8 00 00 00 00	 call	 _PyObject_DebugRealloc
  00214	48 89 44 24 48	 mov	 QWORD PTR sym$[rsp], rax

; 78   :             if (sym == NULL)

  00219	48 83 7c 24 48
	00		 cmp	 QWORD PTR sym$[rsp], 0
  0021f	75 0c		 jne	 SHORT $LN12@calcfirsts

; 79   :                 Py_FatalError(
; 80   :                     "no mem to resize sym in calcfirstset");

  00221	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CF@BLEGJFFD@no?5mem?5to?5resize?5sym?5in?5calcfirs@
  00228	e8 00 00 00 00	 call	 Py_FatalError
$LN12@calcfirsts:

; 81   :             sym[nsyms++] = a->a_lbl;

  0022d	48 63 44 24 38	 movsxd	 rax, DWORD PTR nsyms$[rsp]
  00232	48 8b 4c 24 28	 mov	 rcx, QWORD PTR a$[rsp]
  00237	0f bf 09	 movsx	 ecx, WORD PTR [rcx]
  0023a	48 8b 54 24 48	 mov	 rdx, QWORD PTR sym$[rsp]
  0023f	89 0c 82	 mov	 DWORD PTR [rdx+rax*4], ecx
  00242	8b 44 24 38	 mov	 eax, DWORD PTR nsyms$[rsp]
  00246	ff c0		 inc	 eax
  00248	89 44 24 38	 mov	 DWORD PTR nsyms$[rsp], eax

; 82   :             type = l0[a->a_lbl].lb_type;

  0024c	48 8b 44 24 28	 mov	 rax, QWORD PTR a$[rsp]
  00251	48 0f bf 00	 movsx	 rax, WORD PTR [rax]
  00255	48 6b c0 10	 imul	 rax, 16
  00259	48 8b 4c 24 20	 mov	 rcx, QWORD PTR l0$[rsp]
  0025e	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00261	89 44 24 34	 mov	 DWORD PTR type$[rsp], eax

; 83   :             if (ISNONTERMINAL(type)) {

  00265	81 7c 24 34 00
	01 00 00	 cmp	 DWORD PTR type$[rsp], 256 ; 00000100H
  0026d	0f 8c 88 00 00
	00		 jl	 $LN11@calcfirsts

; 84   :                 d1 = PyGrammar_FindDFA(g, type);

  00273	8b 54 24 34	 mov	 edx, DWORD PTR type$[rsp]
  00277	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR g$[rsp]
  0027f	e8 00 00 00 00	 call	 PyGrammar_FindDFA
  00284	48 89 44 24 60	 mov	 QWORD PTR d1$[rsp], rax

; 85   :                 if (d1->d_first == dummy) {

  00289	48 8b 44 24 60	 mov	 rax, QWORD PTR d1$[rsp]
  0028e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?dummy@?1??calcfirstset@@9@9
  00295	48 39 48 20	 cmp	 QWORD PTR [rax+32], rcx
  00299	75 28		 jne	 SHORT $LN10@calcfirsts

; 86   :                     fprintf(stderr,
; 87   :                         "Left-recursion below '%s'\n",
; 88   :                         d->d_name);

  0029b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  002a1	48 83 c0 60	 add	 rax, 96			; 00000060H
  002a5	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR d$[rsp]
  002ad	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  002b1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BL@CMDAFHFL@Left?9recursion?5below?5?8?$CFs?8?6?$AA@
  002b8	48 8b c8	 mov	 rcx, rax
  002bb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fprintf

; 89   :                 }
; 90   :                 else {

  002c1	eb 36		 jmp	 SHORT $LN9@calcfirsts
$LN10@calcfirsts:

; 91   :                     if (d1->d_first == NULL)

  002c3	48 8b 44 24 60	 mov	 rax, QWORD PTR d1$[rsp]
  002c8	48 83 78 20 00	 cmp	 QWORD PTR [rax+32], 0
  002cd	75 12		 jne	 SHORT $LN8@calcfirsts

; 92   :                         calcfirstset(g, d1);

  002cf	48 8b 54 24 60	 mov	 rdx, QWORD PTR d1$[rsp]
  002d4	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR g$[rsp]
  002dc	e8 00 00 00 00	 call	 calcfirstset
$LN8@calcfirsts:

; 93   :                     mergebitset(result,
; 94   :                                 d1->d_first, nbits);

  002e1	44 8b 44 24 58	 mov	 r8d, DWORD PTR nbits$[rsp]
  002e6	48 8b 44 24 60	 mov	 rax, QWORD PTR d1$[rsp]
  002eb	48 8b 50 20	 mov	 rdx, QWORD PTR [rax+32]
  002ef	48 8b 4c 24 50	 mov	 rcx, QWORD PTR result$[rsp]
  002f4	e8 00 00 00 00	 call	 _Py_mergebitset
$LN9@calcfirsts:

; 95   :                 }

  002f9	eb 1e		 jmp	 SHORT $LN7@calcfirsts
$LN11@calcfirsts:

; 96   :             }
; 97   :             else if (ISTERMINAL(type)) {

  002fb	81 7c 24 34 00
	01 00 00	 cmp	 DWORD PTR type$[rsp], 256 ; 00000100H
  00303	7d 14		 jge	 SHORT $LN6@calcfirsts

; 98   :                 addbit(result, a->a_lbl);

  00305	48 8b 44 24 28	 mov	 rax, QWORD PTR a$[rsp]
  0030a	0f bf 00	 movsx	 eax, WORD PTR [rax]
  0030d	8b d0		 mov	 edx, eax
  0030f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR result$[rsp]
  00314	e8 00 00 00 00	 call	 _Py_addbit
$LN6@calcfirsts:
$LN7@calcfirsts:
$LN13@calcfirsts:

; 99   :             }
; 100  :         }
; 101  :     }

  00319	e9 64 fe ff ff	 jmp	 $LN19@calcfirsts
$LN18@calcfirsts:

; 102  :     d->d_first = result;

  0031e	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR d$[rsp]
  00326	48 8b 4c 24 50	 mov	 rcx, QWORD PTR result$[rsp]
  0032b	48 89 48 20	 mov	 QWORD PTR [rax+32], rcx

; 103  :     if (Py_DebugFlag) {

  0032f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR Py_DebugFlag, 0
  00336	0f 84 c8 00 00
	00		 je	 $LN5@calcfirsts

; 104  :         printf("FIRST set for '%s': {", d->d_name);

  0033c	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR d$[rsp]
  00344	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  00348	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@LKLMONNO@FIRST?5set?5for?5?8?$CFs?8?3?5?$HL?$AA@
  0034f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_printf

; 105  :         for (i = 0; i < nbits; i++) {

  00355	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  0035d	eb 0a		 jmp	 SHORT $LN4@calcfirsts
$LN3@calcfirsts:
  0035f	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  00363	ff c0		 inc	 eax
  00365	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN4@calcfirsts:
  00369	8b 44 24 58	 mov	 eax, DWORD PTR nbits$[rsp]
  0036d	39 44 24 30	 cmp	 DWORD PTR i$[rsp], eax
  00371	0f 8d 80 00 00
	00		 jge	 $LN2@calcfirsts

; 106  :             if (testbit(result, i))

  00377	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$[rsp]
  0037c	33 d2		 xor	 edx, edx
  0037e	b9 08 00 00 00	 mov	 ecx, 8
  00383	48 f7 f1	 div	 rcx
  00386	48 8b 4c 24 50	 mov	 rcx, QWORD PTR result$[rsp]
  0038b	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  0038f	89 44 24 6c	 mov	 DWORD PTR tv202[rsp], eax
  00393	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR i$[rsp]
  00398	33 d2		 xor	 edx, edx
  0039a	48 8b c1	 mov	 rax, rcx
  0039d	b9 08 00 00 00	 mov	 ecx, 8
  003a2	48 f7 f1	 div	 rcx
  003a5	48 8b c2	 mov	 rax, rdx
  003a8	b9 01 00 00 00	 mov	 ecx, 1
  003ad	89 4c 24 70	 mov	 DWORD PTR tv292[rsp], ecx
  003b1	0f b6 c8	 movzx	 ecx, al
  003b4	8b 44 24 70	 mov	 eax, DWORD PTR tv292[rsp]
  003b8	d3 e0		 shl	 eax, cl
  003ba	8b 4c 24 6c	 mov	 ecx, DWORD PTR tv202[rsp]
  003be	23 c8		 and	 ecx, eax
  003c0	8b c1		 mov	 eax, ecx
  003c2	85 c0		 test	 eax, eax
  003c4	74 2c		 je	 SHORT $LN1@calcfirsts

; 107  :                 printf(" %s", PyGrammar_LabelRepr(&l0[i]));

  003c6	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$[rsp]
  003cb	48 6b c0 10	 imul	 rax, 16
  003cf	48 8b 4c 24 20	 mov	 rcx, QWORD PTR l0$[rsp]
  003d4	48 03 c8	 add	 rcx, rax
  003d7	48 8b c1	 mov	 rax, rcx
  003da	48 8b c8	 mov	 rcx, rax
  003dd	e8 00 00 00 00	 call	 PyGrammar_LabelRepr
  003e2	48 8b d0	 mov	 rdx, rax
  003e5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03EEBNCBOD@?5?$CFs?$AA@
  003ec	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_printf
$LN1@calcfirsts:

; 108  :         }

  003f2	e9 68 ff ff ff	 jmp	 $LN3@calcfirsts
$LN2@calcfirsts:

; 109  :         printf(" }\n");

  003f7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03NIEPJMFE@?5?$HN?6?$AA@
  003fe	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_printf
$LN5@calcfirsts:

; 110  :     }
; 111  : 
; 112  :     PyObject_FREE(sym);

  00404	48 8b 4c 24 48	 mov	 rcx, QWORD PTR sym$[rsp]
  00409	e8 00 00 00 00	 call	 _PyObject_DebugFree
$LN26@calcfirsts:

; 113  : }

  0040e	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  00415	c3		 ret	 0
calcfirstset ENDP
_TEXT	ENDS
END
