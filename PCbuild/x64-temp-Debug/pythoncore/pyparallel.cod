; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_06NAHKMOGH@_async?$AA@			; `string'
PUBLIC	_async_call_from_main_thread_and_wait
PUBLIC	??_C@_0BP@JFECJGF@call_from_main_thread_and_wait?$AA@ ; `string'
PUBLIC	_async_call_from_main_thread
PUBLIC	??_C@_0BG@GDMKOJLI@call_from_main_thread?$AA@	; `string'
PUBLIC	_async_persisted_contexts
PUBLIC	??_C@_0BD@FHGOHLMH@persisted_contexts?$AA@	; `string'
PUBLIC	_async_is_parallel_thread
PUBLIC	??_C@_0BD@IOGDFFJL@is_parallel_thread?$AA@	; `string'
PUBLIC	_async_active_contexts
PUBLIC	??_C@_0BA@IAMMEFIL@active_contexts?$AA@		; `string'
PUBLIC	_async_signal_and_wait
PUBLIC	??_C@_0BA@KFOAPOMJ@signal_and_wait?$AA@		; `string'
PUBLIC	_async_submit_write_io
PUBLIC	??_C@_0BA@NELHJCPB@submit_write_io?$AA@		; `string'
PUBLIC	_async_try_write_lock
PUBLIC	??_C@_0P@PGLFFOAC@try_write_lock?$AA@		; `string'
PUBLIC	_async_try_read_lock
PUBLIC	??_C@_0O@NMLNLIJN@try_read_lock?$AA@		; `string'
PUBLIC	_async_submit_server
PUBLIC	??_C@_0O@FHOJKAJP@submit_server?$AA@		; `string'
PUBLIC	_async_submit_client
PUBLIC	??_C@_0O@BIKLHLBM@submit_client?$AA@		; `string'
PUBLIC	_async_submit_class
PUBLIC	??_C@_0N@GJCHEFMD@submit_class?$AA@		; `string'
PUBLIC	_async_submit_timer
PUBLIC	??_C@_0N@PEHCKJKL@submit_timer?$AA@		; `string'
PUBLIC	_async__dbg_address
PUBLIC	??_C@_0N@EONPHPCE@_dbg_address?$AA@		; `string'
PUBLIC	_async_active_count
PUBLIC	??_C@_0N@BBPNBAFF@active_count?$AA@		; `string'
PUBLIC	_async_is_active_ex
PUBLIC	??_C@_0N@BKLNKEHO@is_active_ex?$AA@		; `string'
PUBLIC	_async_write_unlock
PUBLIC	??_C@_0N@MOAFFPLO@write_unlock?$AA@		; `string'
PUBLIC	_async_read_unlock
PUBLIC	??_C@_0M@KBMFGJKH@read_unlock?$AA@		; `string'
PUBLIC	_async_submit_wait
PUBLIC	??_C@_0M@MONDDDPF@submit_wait?$AA@		; `string'
PUBLIC	_async_submit_work
PUBLIC	??_C@_0M@PDCFAGMJ@submit_work?$AA@		; `string'
PUBLIC	_async_write_lock
PUBLIC	??_C@_0L@LOEOJHDP@write_lock?$AA@		; `string'
PUBLIC	_async_filecloser
PUBLIC	??_C@_0L@NHCCIFLF@filecloser?$AA@		; `string'
PUBLIC	_async_fileopener
PUBLIC	??_C@_0L@IMFFLKMC@fileopener?$AA@		; `string'
PUBLIC	_async__post_open
PUBLIC	??_C@_0L@ILCHLJH@_post_open?$AA@		; `string'
PUBLIC	_async_read_lock
PUBLIC	??_C@_09JFECMODK@read_lock?$AA@			; `string'
PUBLIC	_async_submit_io
PUBLIC	??_C@_09NGDECFMF@submit_io?$AA@			; `string'
PUBLIC	_async_is_active
PUBLIC	??_C@_09NFIEOJGK@is_active?$AA@			; `string'
PUBLIC	_async_protected
PUBLIC	??_C@_09IPOLMLK@protected?$AA@			; `string'
PUBLIC	_async_unprotect
PUBLIC	??_C@_09LHNJOGML@unprotect?$AA@			; `string'
PUBLIC	_async_cpu_count
PUBLIC	??_C@_09CHNCHKJL@cpu_count?$AA@			; `string'
PUBLIC	_async_run_once
PUBLIC	??_C@_08JHMCJIFL@run_once?$AA@			; `string'
PUBLIC	_async_register
PUBLIC	??_C@_08DHHIDNEP@register?$AA@			; `string'
PUBLIC	_async__rawfile
PUBLIC	??_C@_08GIJFBOPB@_rawfile?$AA@			; `string'
PUBLIC	_async__address
PUBLIC	??_C@_08JJIPKIML@_address?$AA@			; `string'
PUBLIC	_async_prewait
PUBLIC	??_C@_07NBHOAOAJ@prewait?$AA@			; `string'
PUBLIC	_async_protect
PUBLIC	??_C@_07LFLAEFDO@protect?$AA@			; `string'
PUBLIC	_async_server
PUBLIC	??_C@_06HJHJCKIO@server?$AA@			; `string'
PUBLIC	_async_client
PUBLIC	??_C@_06DGDLPBAN@client?$AA@			; `string'
PUBLIC	_async_signal
PUBLIC	??_C@_06OAFOBKHE@signal?$AA@			; `string'
PUBLIC	_async__close
PUBLIC	??_C@_06EINEPANJ@_close?$AA@			; `string'
PUBLIC	_async_stderr
PUBLIC	??_C@_06FJGNEBG@stderr?$AA@			; `string'
PUBLIC	_async_stdout
PUBLIC	??_C@_06DJDOIFHB@stdout?$AA@			; `string'
PUBLIC	_async_rdtsc
PUBLIC	??_C@_05JIFPPKLN@rdtsc?$AA@			; `string'
PUBLIC	_async_write
PUBLIC	??_C@_05NGFEDHGN@write?$AA@			; `string'
PUBLIC	_async_print
PUBLIC	??_C@_05IJDJACGD@print?$AA@			; `string'
PUBLIC	_async_list
PUBLIC	??_C@_04DONFEANM@list?$AA@			; `string'
PUBLIC	_async_dict
PUBLIC	??_C@_04BCIDKIGN@dict?$AA@			; `string'
PUBLIC	_async_read
PUBLIC	??_C@_04POLDLDMI@read?$AA@			; `string'
PUBLIC	_async_wait
PUBLIC	??_C@_04PNOAOIAG@wait?$AA@			; `string'
PUBLIC	_async_run
PUBLIC	??_C@_03LGMJKEGG@run?$AA@			; `string'
PUBLIC	_async_map
PUBLIC	??_C@_0M@NCDCDINH@OO?3register?$AA@		; `string'
PUBLIC	??_C@_08FCFPNNHF@protocol?$AA@			; `string'
PUBLIC	??_C@_09PBENLGJM@transport?$AA@			; `string'
PUBLIC	??_C@_0BM@BICFFLHA@Asynchronous?5Socket?5Objects?$AA@ ; `string'
PUBLIC	pxsocket_dealloc
PUBLIC	??_C@_0O@POBIDKD@_async?4socket?$AA@		; `string'
PUBLIC	??_C@_0BH@CNEGKLNK@sock_timeout?5attribute?$AA@	; `string'
PUBLIC	??_C@_0N@EJAJFIKO@sock_timeout?$AA@		; `string'
PUBLIC	??_C@_0BF@PGBPHFFO@sock_proto?5attribute?$AA@	; `string'
PUBLIC	??_C@_0L@LEEOFDBB@sock_proto?$AA@		; `string'
PUBLIC	??_C@_0BE@GKFOEKAL@sock_type?5attribute?$AA@	; `string'
PUBLIC	??_C@_09POMCLMKJ@sock_type?$AA@			; `string'
PUBLIC	??_C@_0BG@OGFLPBML@sock_family?5attribute?$AA@	; `string'
PUBLIC	??_C@_0M@MPEABHKE@sock_family?$AA@		; `string'
PUBLIC	??_C@_0P@JEFMDHHI@port?5attribute?$AA@		; `string'
PUBLIC	??_C@_0P@MCCBLNDF@host?5attribute?$AA@		; `string'
PUBLIC	??_C@_0N@MACGLBGI@ip?5attribute?$AA@		; `string'
PUBLIC	??_C@_02GIIHKPLE@ip?$AA@			; `string'
PUBLIC	pxsocket_next_send_id
PUBLIC	??_C@_0N@NCCDGHBG@next_send_id?$AA@		; `string'
PUBLIC	pxsocket_sendfile
PUBLIC	??_C@_08JCEFHKI@sendfile?$AA@			; `string'
PUBLIC	pxsocket_close
PUBLIC	??_C@_05LBOHBHFK@close?$AA@			; `string'
PUBLIC	??_C@_0BH@JFNJHNMC@max_sync_recv_attempts?$AA@	; `string'
PUBLIC	??_C@_0BH@GAODOAFA@max_sync_send_attempts?$AA@	; `string'
PUBLIC	??_C@_0O@DEOIOEML@shutdown_send?$AA@		; `string'
PUBLIC	??_C@_0M@FFOAFBMD@concurrency?$AA@		; `string'
PUBLIC	??_C@_0L@LPJIDIJF@throughput?$AA@		; `string'
PUBLIC	??_C@_0L@JKAFEJJM@lines_mode?$AA@		; `string'
PUBLIC	??_C@_0O@FEMJBDAD@send_complete?$AA@		; `string'
PUBLIC	??_C@_0O@HGCJJJHB@recv_shutdown?$AA@		; `string'
PUBLIC	??_C@_0O@IDBDAEOD@send_shutdown?$AA@		; `string'
PUBLIC	??_C@_0M@NJCGKHAI@recv_failed?$AA@		; `string'
PUBLIC	??_C@_0M@DFELAKCA@send_failed?$AA@		; `string'
PUBLIC	_Py_HandleCtrlC
PUBLIC	xlist_new
PUBLIC	xlist_alloc
PUBLIC	??_C@_0BI@GPMFHCMJ@Interlocked?5List?5Object?$AA@ ; `string'
PUBLIC	xlist_dealloc
PUBLIC	??_C@_05KOEEJJMO@xlist?$AA@			; `string'
PUBLIC	PyXList_Length
PUBLIC	xlist_flush
PUBLIC	??_C@_05GLCAEPFP@flush?$AA@			; `string'
PUBLIC	xlist_push
PUBLIC	??_C@_04GHHNIPCF@push?$AA@			; `string'
PUBLIC	xlist_pop
PUBLIC	??_C@_03NJDAHFJE@pop?$AA@			; `string'
PUBLIC	??_C@_09KKLBMLNG@_parallel?$AA@			; `string'
PUBLIC	_parallel_map
PUBLIC	??_C@_03HBNNNHNM@map?$AA@			; `string'
PUBLIC	??_C@_0P@LHLKCILO@?$HMs?$CDiiii?3socket?$AA@	; `string'
PUBLIC	??_C@_0BA@BGFLKNPD@max_line_length?$AA@		; `string'
PUBLIC	??_C@_0P@KIPMBABE@auto_reconnect?$AA@		; `string'
PUBLIC	??_C@_0N@OMMDCOFJ@wait_for_eol?$AA@		; `string'
PUBLIC	??_C@_09JDOKIHNG@line_mode?$AA@			; `string'
PUBLIC	??_C@_0BI@NHGFAPHE@initial_regex_to_expect?$AA@	; `string'
PUBLIC	??_C@_0BI@IECGIAPO@initial_words_to_expect?$AA@	; `string'
PUBLIC	??_C@_0BG@FNILJMKJ@initial_bytes_to_send?$AA@	; `string'
PUBLIC	??_C@_0BJ@PIOCLNOP@initial_connection_error?$AA@ ; `string'
PUBLIC	??_C@_0BC@KOBHOIFN@exception_handler?$AA@	; `string'
PUBLIC	??_C@_0BA@KKCDIOEH@connection_done?$AA@		; `string'
PUBLIC	??_C@_0BD@JBGBNIPL@connection_timeout?$AA@	; `string'
PUBLIC	??_C@_0BC@PBJEBHHN@connection_closed?$AA@	; `string'
PUBLIC	??_C@_0BA@NNHENGLF@connection_lost?$AA@		; `string'
PUBLIC	??_C@_0N@HICNGCPO@eof_received?$AA@		; `string'
PUBLIC	??_C@_0P@FHJFIELO@lines_received?$AA@		; `string'
PUBLIC	??_C@_0O@KHJLGLGO@data_received?$AA@		; `string'
PUBLIC	??_C@_0BA@EKHLBOND@connection_made?$AA@		; `string'
PUBLIC	??_C@_05BENFLAID@proto?$AA@			; `string'
PUBLIC	??_C@_04GPMDFGEJ@type?$AA@			; `string'
PUBLIC	??_C@_06NBOBHOCP@family?$AA@			; `string'
PUBLIC	??_C@_04LPGMAPLE@port?$AA@			; `string'
PUBLIC	??_C@_04OODOLJMA@host?$AA@			; `string'
PUBLIC	last_context_heap_malloc_addr
PUBLIC	heap_override
PUBLIC	TSTATE
PUBLIC	tls
PUBLIC	last_heap_override_malloc_addr
PUBLIC	ctx
PUBLIC	Py_MainThreadId
PUBLIC	Py_MainProcessId
PUBLIC	Py_ParallelContextsEnabled
PUBLIC	_PxObjectSignature
PUBLIC	_PxSocketSignature
PUBLIC	_PxSocketBufSignature
PUBLIC	_PxBlockingCallsThreshold
PUBLIC	_Py_CtrlCPressed
PUBLIC	_Py_InstalledCtrlCHandler
PUBLIC	_PyParallel_Finalized
PUBLIC	_PxSocketServer_PreallocatedSockets
PUBLIC	_PxSocket_MaxSyncSendAttempts
PUBLIC	_PxSocket_MaxSyncRecvAttempts
PUBLIC	_PxSocket_MaxRecvBufSize
PUBLIC	_PyTLSHeap_DefaultSize
PUBLIC	_PxSocket_SendListSize
PUBLIC	_PxSocket_ActiveHogs
PUBLIC	_PxSocket_ActiveIOLoops
PUBLIC	_PyParallel_NumCPUs
PUBLIC	_Px_ObjectSignature_CallDepth
PUBLIC	_Px_SafeObjectSignatureTest_CallDepth
PUBLIC	PyXList_Type
PUBLIC	_Py_CtrlCHandlerRoutine
PUBLIC	_async_methods
PUBLIC	_asyncmodule
EXTRN	PyType_GenericAlloc:PROC
EXTRN	PyObject_GenericSetAttr:PROC
EXTRN	PyObject_GenericGetAttr:PROC
_TLS	SEGMENT
last_context_heap_malloc_addr DQ 01H DUP (?)
heap_override DQ 01H DUP (?)
TSTATE	DQ	01H DUP (?)
tls	DB	05e40H DUP (?)
_TLS	ENDS
_DATA	SEGMENT
COMM	PyExc_AssignmentError:QWORD
COMM	PyExc_AsyncError:QWORD
_DATA	ENDS
_TLS	SEGMENT
last_heap_override_malloc_addr DQ 01H DUP (?)
_TLS	ENDS
_BSS	SEGMENT
_Py_CtrlCPressed DD 01H DUP (?)
_Py_InstalledCtrlCHandler DD 01H DUP (?)
_PyParallel_Finalized DD 01H DUP (?)
_PxSocket_ActiveHogs DD 01H DUP (?)
_PxSocket_ActiveIOLoops DD 01H DUP (?)
_PyParallel_NumCPUs DD 01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_06NAHKMOGH@_async?$AA@
CONST	SEGMENT
??_C@_06NAHKMOGH@_async?$AA@ DB '_async', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@JFECJGF@call_from_main_thread_and_wait?$AA@
CONST	SEGMENT
??_C@_0BP@JFECJGF@call_from_main_thread_and_wait?$AA@ DB 'call_from_main_'
	DB	'thread_and_wait', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@GDMKOJLI@call_from_main_thread?$AA@
CONST	SEGMENT
??_C@_0BG@GDMKOJLI@call_from_main_thread?$AA@ DB 'call_from_main_thread', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FHGOHLMH@persisted_contexts?$AA@
CONST	SEGMENT
??_C@_0BD@FHGOHLMH@persisted_contexts?$AA@ DB 'persisted_contexts', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@IOGDFFJL@is_parallel_thread?$AA@
CONST	SEGMENT
??_C@_0BD@IOGDFFJL@is_parallel_thread?$AA@ DB 'is_parallel_thread', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@IAMMEFIL@active_contexts?$AA@
CONST	SEGMENT
??_C@_0BA@IAMMEFIL@active_contexts?$AA@ DB 'active_contexts', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@KFOAPOMJ@signal_and_wait?$AA@
CONST	SEGMENT
??_C@_0BA@KFOAPOMJ@signal_and_wait?$AA@ DB 'signal_and_wait', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@NELHJCPB@submit_write_io?$AA@
CONST	SEGMENT
??_C@_0BA@NELHJCPB@submit_write_io?$AA@ DB 'submit_write_io', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@PGLFFOAC@try_write_lock?$AA@
CONST	SEGMENT
??_C@_0P@PGLFFOAC@try_write_lock?$AA@ DB 'try_write_lock', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@NMLNLIJN@try_read_lock?$AA@
CONST	SEGMENT
??_C@_0O@NMLNLIJN@try_read_lock?$AA@ DB 'try_read_lock', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@FHOJKAJP@submit_server?$AA@
CONST	SEGMENT
??_C@_0O@FHOJKAJP@submit_server?$AA@ DB 'submit_server', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@BIKLHLBM@submit_client?$AA@
CONST	SEGMENT
??_C@_0O@BIKLHLBM@submit_client?$AA@ DB 'submit_client', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@GJCHEFMD@submit_class?$AA@
CONST	SEGMENT
??_C@_0N@GJCHEFMD@submit_class?$AA@ DB 'submit_class', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@PEHCKJKL@submit_timer?$AA@
CONST	SEGMENT
??_C@_0N@PEHCKJKL@submit_timer?$AA@ DB 'submit_timer', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@EONPHPCE@_dbg_address?$AA@
CONST	SEGMENT
??_C@_0N@EONPHPCE@_dbg_address?$AA@ DB '_dbg_address', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@BBPNBAFF@active_count?$AA@
CONST	SEGMENT
??_C@_0N@BBPNBAFF@active_count?$AA@ DB 'active_count', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@BKLNKEHO@is_active_ex?$AA@
CONST	SEGMENT
??_C@_0N@BKLNKEHO@is_active_ex?$AA@ DB 'is_active_ex', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MOAFFPLO@write_unlock?$AA@
CONST	SEGMENT
??_C@_0N@MOAFFPLO@write_unlock?$AA@ DB 'write_unlock', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@KBMFGJKH@read_unlock?$AA@
CONST	SEGMENT
??_C@_0M@KBMFGJKH@read_unlock?$AA@ DB 'read_unlock', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MONDDDPF@submit_wait?$AA@
CONST	SEGMENT
??_C@_0M@MONDDDPF@submit_wait?$AA@ DB 'submit_wait', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@PDCFAGMJ@submit_work?$AA@
CONST	SEGMENT
??_C@_0M@PDCFAGMJ@submit_work?$AA@ DB 'submit_work', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@LOEOJHDP@write_lock?$AA@
CONST	SEGMENT
??_C@_0L@LOEOJHDP@write_lock?$AA@ DB 'write_lock', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NHCCIFLF@filecloser?$AA@
CONST	SEGMENT
??_C@_0L@NHCCIFLF@filecloser?$AA@ DB 'filecloser', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@IMFFLKMC@fileopener?$AA@
CONST	SEGMENT
??_C@_0L@IMFFLKMC@fileopener?$AA@ DB 'fileopener', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@ILCHLJH@_post_open?$AA@
CONST	SEGMENT
??_C@_0L@ILCHLJH@_post_open?$AA@ DB '_post_open', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09JFECMODK@read_lock?$AA@
CONST	SEGMENT
??_C@_09JFECMODK@read_lock?$AA@ DB 'read_lock', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09NGDECFMF@submit_io?$AA@
CONST	SEGMENT
??_C@_09NGDECFMF@submit_io?$AA@ DB 'submit_io', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09NFIEOJGK@is_active?$AA@
CONST	SEGMENT
??_C@_09NFIEOJGK@is_active?$AA@ DB 'is_active', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09IPOLMLK@protected?$AA@
CONST	SEGMENT
??_C@_09IPOLMLK@protected?$AA@ DB 'protected', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09LHNJOGML@unprotect?$AA@
CONST	SEGMENT
??_C@_09LHNJOGML@unprotect?$AA@ DB 'unprotect', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09CHNCHKJL@cpu_count?$AA@
CONST	SEGMENT
??_C@_09CHNCHKJL@cpu_count?$AA@ DB 'cpu_count', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08JHMCJIFL@run_once?$AA@
CONST	SEGMENT
??_C@_08JHMCJIFL@run_once?$AA@ DB 'run_once', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08DHHIDNEP@register?$AA@
CONST	SEGMENT
??_C@_08DHHIDNEP@register?$AA@ DB 'register', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08GIJFBOPB@_rawfile?$AA@
CONST	SEGMENT
??_C@_08GIJFBOPB@_rawfile?$AA@ DB '_rawfile', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08JJIPKIML@_address?$AA@
CONST	SEGMENT
??_C@_08JJIPKIML@_address?$AA@ DB '_address', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07NBHOAOAJ@prewait?$AA@
CONST	SEGMENT
??_C@_07NBHOAOAJ@prewait?$AA@ DB 'prewait', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07LFLAEFDO@protect?$AA@
CONST	SEGMENT
??_C@_07LFLAEFDO@protect?$AA@ DB 'protect', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HJHJCKIO@server?$AA@
CONST	SEGMENT
??_C@_06HJHJCKIO@server?$AA@ DB 'server', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DGDLPBAN@client?$AA@
CONST	SEGMENT
??_C@_06DGDLPBAN@client?$AA@ DB 'client', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OAFOBKHE@signal?$AA@
CONST	SEGMENT
??_C@_06OAFOBKHE@signal?$AA@ DB 'signal', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EINEPANJ@_close?$AA@
CONST	SEGMENT
??_C@_06EINEPANJ@_close?$AA@ DB '_close', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FJGNEBG@stderr?$AA@
CONST	SEGMENT
??_C@_06FJGNEBG@stderr?$AA@ DB 'stderr', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DJDOIFHB@stdout?$AA@
CONST	SEGMENT
??_C@_06DJDOIFHB@stdout?$AA@ DB 'stdout', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05JIFPPKLN@rdtsc?$AA@
CONST	SEGMENT
??_C@_05JIFPPKLN@rdtsc?$AA@ DB 'rdtsc', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05NGFEDHGN@write?$AA@
CONST	SEGMENT
??_C@_05NGFEDHGN@write?$AA@ DB 'write', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05IJDJACGD@print?$AA@
CONST	SEGMENT
??_C@_05IJDJACGD@print?$AA@ DB 'print', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04DONFEANM@list?$AA@
CONST	SEGMENT
??_C@_04DONFEANM@list?$AA@ DB 'list', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04BCIDKIGN@dict?$AA@
CONST	SEGMENT
??_C@_04BCIDKIGN@dict?$AA@ DB 'dict', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04POLDLDMI@read?$AA@
CONST	SEGMENT
??_C@_04POLDLDMI@read?$AA@ DB 'read', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04PNOAOIAG@wait?$AA@
CONST	SEGMENT
??_C@_04PNOAOIAG@wait?$AA@ DB 'wait', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03LGMJKEGG@run?$AA@
CONST	SEGMENT
??_C@_03LGMJKEGG@run?$AA@ DB 'run', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@NCDCDINH@OO?3register?$AA@
CONST	SEGMENT
??_C@_0M@NCDCDINH@OO?3register?$AA@ DB 'OO:register', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08FCFPNNHF@protocol?$AA@
CONST	SEGMENT
??_C@_08FCFPNNHF@protocol?$AA@ DB 'protocol', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09PBENLGJM@transport?$AA@
CONST	SEGMENT
??_C@_09PBENLGJM@transport?$AA@ DB 'transport', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@BICFFLHA@Asynchronous?5Socket?5Objects?$AA@
CONST	SEGMENT
??_C@_0BM@BICFFLHA@Asynchronous?5Socket?5Objects?$AA@ DB 'Asynchronous So'
	DB	'cket Objects', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@POBIDKD@_async?4socket?$AA@
CONST	SEGMENT
??_C@_0O@POBIDKD@_async?4socket?$AA@ DB '_async.socket', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@CNEGKLNK@sock_timeout?5attribute?$AA@
CONST	SEGMENT
??_C@_0BH@CNEGKLNK@sock_timeout?5attribute?$AA@ DB 'sock_timeout attribut'
	DB	'e', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@EJAJFIKO@sock_timeout?$AA@
CONST	SEGMENT
??_C@_0N@EJAJFIKO@sock_timeout?$AA@ DB 'sock_timeout', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@PGBPHFFO@sock_proto?5attribute?$AA@
CONST	SEGMENT
??_C@_0BF@PGBPHFFO@sock_proto?5attribute?$AA@ DB 'sock_proto attribute', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@LEEOFDBB@sock_proto?$AA@
CONST	SEGMENT
??_C@_0L@LEEOFDBB@sock_proto?$AA@ DB 'sock_proto', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@GKFOEKAL@sock_type?5attribute?$AA@
CONST	SEGMENT
??_C@_0BE@GKFOEKAL@sock_type?5attribute?$AA@ DB 'sock_type attribute', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09POMCLMKJ@sock_type?$AA@
CONST	SEGMENT
??_C@_09POMCLMKJ@sock_type?$AA@ DB 'sock_type', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@OGFLPBML@sock_family?5attribute?$AA@
CONST	SEGMENT
??_C@_0BG@OGFLPBML@sock_family?5attribute?$AA@ DB 'sock_family attribute', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MPEABHKE@sock_family?$AA@
CONST	SEGMENT
??_C@_0M@MPEABHKE@sock_family?$AA@ DB 'sock_family', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@JEFMDHHI@port?5attribute?$AA@
CONST	SEGMENT
??_C@_0P@JEFMDHHI@port?5attribute?$AA@ DB 'port attribute', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@MCCBLNDF@host?5attribute?$AA@
CONST	SEGMENT
??_C@_0P@MCCBLNDF@host?5attribute?$AA@ DB 'host attribute', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MACGLBGI@ip?5attribute?$AA@
CONST	SEGMENT
??_C@_0N@MACGLBGI@ip?5attribute?$AA@ DB 'ip attribute', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02GIIHKPLE@ip?$AA@
CONST	SEGMENT
??_C@_02GIIHKPLE@ip?$AA@ DB 'ip', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NCCDGHBG@next_send_id?$AA@
CONST	SEGMENT
??_C@_0N@NCCDGHBG@next_send_id?$AA@ DB 'next_send_id', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08JCEFHKI@sendfile?$AA@
CONST	SEGMENT
??_C@_08JCEFHKI@sendfile?$AA@ DB 'sendfile', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05LBOHBHFK@close?$AA@
CONST	SEGMENT
??_C@_05LBOHBHFK@close?$AA@ DB 'close', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@JFNJHNMC@max_sync_recv_attempts?$AA@
CONST	SEGMENT
??_C@_0BH@JFNJHNMC@max_sync_recv_attempts?$AA@ DB 'max_sync_recv_attempts'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@GAODOAFA@max_sync_send_attempts?$AA@
CONST	SEGMENT
??_C@_0BH@GAODOAFA@max_sync_send_attempts?$AA@ DB 'max_sync_send_attempts'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@DEOIOEML@shutdown_send?$AA@
CONST	SEGMENT
??_C@_0O@DEOIOEML@shutdown_send?$AA@ DB 'shutdown_send', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@FFOAFBMD@concurrency?$AA@
CONST	SEGMENT
??_C@_0M@FFOAFBMD@concurrency?$AA@ DB 'concurrency', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@LPJIDIJF@throughput?$AA@
CONST	SEGMENT
??_C@_0L@LPJIDIJF@throughput?$AA@ DB 'throughput', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JKAFEJJM@lines_mode?$AA@
CONST	SEGMENT
??_C@_0L@JKAFEJJM@lines_mode?$AA@ DB 'lines_mode', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@FEMJBDAD@send_complete?$AA@
CONST	SEGMENT
??_C@_0O@FEMJBDAD@send_complete?$AA@ DB 'send_complete', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@HGCJJJHB@recv_shutdown?$AA@
CONST	SEGMENT
??_C@_0O@HGCJJJHB@recv_shutdown?$AA@ DB 'recv_shutdown', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@IDBDAEOD@send_shutdown?$AA@
CONST	SEGMENT
??_C@_0O@IDBDAEOD@send_shutdown?$AA@ DB 'send_shutdown', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@NJCGKHAI@recv_failed?$AA@
CONST	SEGMENT
??_C@_0M@NJCGKHAI@recv_failed?$AA@ DB 'recv_failed', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@DFELAKCA@send_failed?$AA@
CONST	SEGMENT
??_C@_0M@DFELAKCA@send_failed?$AA@ DB 'send_failed', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@GPMFHCMJ@Interlocked?5List?5Object?$AA@
CONST	SEGMENT
??_C@_0BI@GPMFHCMJ@Interlocked?5List?5Object?$AA@ DB 'Interlocked List Ob'
	DB	'ject', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_05KOEEJJMO@xlist?$AA@
CONST	SEGMENT
??_C@_05KOEEJJMO@xlist?$AA@ DB 'xlist', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05GLCAEPFP@flush?$AA@
CONST	SEGMENT
??_C@_05GLCAEPFP@flush?$AA@ DB 'flush', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GHHNIPCF@push?$AA@
CONST	SEGMENT
??_C@_04GHHNIPCF@push?$AA@ DB 'push', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03NJDAHFJE@pop?$AA@
CONST	SEGMENT
??_C@_03NJDAHFJE@pop?$AA@ DB 'pop', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09KKLBMLNG@_parallel?$AA@
CONST	SEGMENT
??_C@_09KKLBMLNG@_parallel?$AA@ DB '_parallel', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03HBNNNHNM@map?$AA@
CONST	SEGMENT
??_C@_03HBNNNHNM@map?$AA@ DB 'map', 00H			; `string'
CONST	ENDS
_TLS	SEGMENT
_Px_SafeObjectSignatureTest_CallDepth DD 00H
_Px_ObjectSignature_CallDepth DD 00H
_PxNewThread DD	01H
	ORG $+20
ctx	DQ	0000000000000000H
PyId_max_sync_recv_attempts DQ 0000000000000000H
	DQ	FLAT:??_C@_0BH@JFNJHNMC@max_sync_recv_attempts?$AA@
	DQ	0000000000000000H
PyId_max_sync_send_attempts DQ 0000000000000000H
	DQ	FLAT:??_C@_0BH@GAODOAFA@max_sync_send_attempts?$AA@
	DQ	0000000000000000H
PyId_shutdown_send DQ 0000000000000000H
	DQ	FLAT:??_C@_0O@DEOIOEML@shutdown_send?$AA@
	DQ	0000000000000000H
PyId_concurrency DQ 0000000000000000H
	DQ	FLAT:??_C@_0M@FFOAFBMD@concurrency?$AA@
	DQ	0000000000000000H
PyId_throughput DQ 0000000000000000H
	DQ	FLAT:??_C@_0L@LPJIDIJF@throughput?$AA@
	DQ	0000000000000000H
PyId_lines_mode DQ 0000000000000000H
	DQ	FLAT:??_C@_0L@JKAFEJJM@lines_mode?$AA@
	DQ	0000000000000000H
PyId_initial_bytes_to_send DQ 0000000000000000H
	DQ	FLAT:??_C@_0BG@FNILJMKJ@initial_bytes_to_send?$AA@
	DQ	0000000000000000H
PyId_exception_handler DQ 0000000000000000H
	DQ	FLAT:??_C@_0BC@KOBHOIFN@exception_handler?$AA@
	DQ	0000000000000000H
PyId_connection_closed DQ 0000000000000000H
	DQ	FLAT:??_C@_0BC@PBJEBHHN@connection_closed?$AA@
	DQ	0000000000000000H
PyId_connection_made DQ 0000000000000000H
	DQ	FLAT:??_C@_0BA@EKHLBOND@connection_made?$AA@
	DQ	0000000000000000H
PyId_lines_received DQ 0000000000000000H
	DQ	FLAT:??_C@_0P@FHJFIELO@lines_received?$AA@
	DQ	0000000000000000H
PyId_data_received DQ 0000000000000000H
	DQ	FLAT:??_C@_0O@KHJLGLGO@data_received?$AA@
	DQ	0000000000000000H
PyId_send_complete DQ 0000000000000000H
	DQ	FLAT:??_C@_0O@FEMJBDAD@send_complete?$AA@
	DQ	0000000000000000H
PyId_recv_shutdown DQ 0000000000000000H
	DQ	FLAT:??_C@_0O@HGCJJJHB@recv_shutdown?$AA@
	DQ	0000000000000000H
PyId_send_shutdown DQ 0000000000000000H
	DQ	FLAT:??_C@_0O@IDBDAEOD@send_shutdown?$AA@
	DQ	0000000000000000H
PyId_recv_failed DQ 0000000000000000H
	DQ	FLAT:??_C@_0M@NJCGKHAI@recv_failed?$AA@
	DQ	0000000000000000H
PyId_send_failed DQ 0000000000000000H
	DQ	FLAT:??_C@_0M@DFELAKCA@send_failed?$AA@
	DQ	0000000000000000H
_TLS	ENDS
;	COMDAT ??_C@_0P@LHLKCILO@?$HMs?$CDiiii?3socket?$AA@
CONST	SEGMENT
??_C@_0P@LHLKCILO@?$HMs?$CDiiii?3socket?$AA@ DB '|s#iiii:socket', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@BGFLKNPD@max_line_length?$AA@
CONST	SEGMENT
??_C@_0BA@BGFLKNPD@max_line_length?$AA@ DB 'max_line_length', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@KIPMBABE@auto_reconnect?$AA@
CONST	SEGMENT
??_C@_0P@KIPMBABE@auto_reconnect?$AA@ DB 'auto_reconnect', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@OMMDCOFJ@wait_for_eol?$AA@
CONST	SEGMENT
??_C@_0N@OMMDCOFJ@wait_for_eol?$AA@ DB 'wait_for_eol', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09JDOKIHNG@line_mode?$AA@
CONST	SEGMENT
??_C@_09JDOKIHNG@line_mode?$AA@ DB 'line_mode', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@NHGFAPHE@initial_regex_to_expect?$AA@
CONST	SEGMENT
??_C@_0BI@NHGFAPHE@initial_regex_to_expect?$AA@ DB 'initial_regex_to_expe'
	DB	'ct', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@IECGIAPO@initial_words_to_expect?$AA@
CONST	SEGMENT
??_C@_0BI@IECGIAPO@initial_words_to_expect?$AA@ DB 'initial_words_to_expe'
	DB	'ct', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@FNILJMKJ@initial_bytes_to_send?$AA@
CONST	SEGMENT
??_C@_0BG@FNILJMKJ@initial_bytes_to_send?$AA@ DB 'initial_bytes_to_send', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@PIOCLNOP@initial_connection_error?$AA@
CONST	SEGMENT
??_C@_0BJ@PIOCLNOP@initial_connection_error?$AA@ DB 'initial_connection_e'
	DB	'rror', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@KOBHOIFN@exception_handler?$AA@
CONST	SEGMENT
??_C@_0BC@KOBHOIFN@exception_handler?$AA@ DB 'exception_handler', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@KKCDIOEH@connection_done?$AA@
CONST	SEGMENT
??_C@_0BA@KKCDIOEH@connection_done?$AA@ DB 'connection_done', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@JBGBNIPL@connection_timeout?$AA@
CONST	SEGMENT
??_C@_0BD@JBGBNIPL@connection_timeout?$AA@ DB 'connection_timeout', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@PBJEBHHN@connection_closed?$AA@
CONST	SEGMENT
??_C@_0BC@PBJEBHHN@connection_closed?$AA@ DB 'connection_closed', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@NNHENGLF@connection_lost?$AA@
CONST	SEGMENT
??_C@_0BA@NNHENGLF@connection_lost?$AA@ DB 'connection_lost', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@HICNGCPO@eof_received?$AA@
CONST	SEGMENT
??_C@_0N@HICNGCPO@eof_received?$AA@ DB 'eof_received', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@FHJFIELO@lines_received?$AA@
CONST	SEGMENT
??_C@_0P@FHJFIELO@lines_received?$AA@ DB 'lines_received', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@KHJLGLGO@data_received?$AA@
CONST	SEGMENT
??_C@_0O@KHJLGLGO@data_received?$AA@ DB 'data_received', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@EKHLBOND@connection_made?$AA@
CONST	SEGMENT
??_C@_0BA@EKHLBOND@connection_made?$AA@ DB 'connection_made', 00H ; `string'
CONST	ENDS
_DATA	SEGMENT
pxsocket_kwlist DQ FLAT:??_C@_04OODOLJMA@host?$AA@
	DQ	FLAT:??_C@_04LPGMAPLE@port?$AA@
	DQ	FLAT:??_C@_06NBOBHOCP@family?$AA@
	DQ	FLAT:??_C@_04GPMDFGEJ@type?$AA@
	DQ	FLAT:??_C@_05BENFLAID@proto?$AA@
	DQ	0000000000000000H
pxsocket_protocol_attrs DQ FLAT:??_C@_0BA@EKHLBOND@connection_made?$AA@
	DQ	FLAT:??_C@_0O@KHJLGLGO@data_received?$AA@
	DQ	FLAT:??_C@_0P@FHJFIELO@lines_received?$AA@
	DQ	FLAT:??_C@_0N@HICNGCPO@eof_received?$AA@
	DQ	FLAT:??_C@_0BA@NNHENGLF@connection_lost?$AA@
	DQ	FLAT:??_C@_0BC@PBJEBHHN@connection_closed?$AA@
	DQ	FLAT:??_C@_0BD@JBGBNIPL@connection_timeout?$AA@
	DQ	FLAT:??_C@_0BA@KKCDIOEH@connection_done?$AA@
	DQ	FLAT:??_C@_0BC@KOBHOIFN@exception_handler?$AA@
	DQ	FLAT:??_C@_0BJ@PIOCLNOP@initial_connection_error?$AA@
	DQ	FLAT:??_C@_0BG@FNILJMKJ@initial_bytes_to_send?$AA@
	DQ	FLAT:??_C@_0BI@IECGIAPO@initial_words_to_expect?$AA@
	DQ	FLAT:??_C@_0BI@NHGFAPHE@initial_regex_to_expect?$AA@
	DQ	FLAT:??_C@_09JDOKIHNG@line_mode?$AA@
	DQ	FLAT:??_C@_0N@OMMDCOFJ@wait_for_eol?$AA@
	DQ	FLAT:??_C@_0P@KIPMBABE@auto_reconnect?$AA@
	DQ	FLAT:??_C@_0BA@BGFLKNPD@max_line_length?$AA@
	DQ	0000000000000000H
pxsocket_kwlist_formatstring DQ FLAT:??_C@_0P@LHLKCILO@?$HMs?$CDiiii?3socket?$AA@
Py_MainProcessId DD 0ffffffffH
Py_ParallelContextsEnabled DD 0ffffffffH
_PxObjectSignature DQ ffffffffffffffffH
_PxSocketSignature DQ ffffffffffffffffH
_PxSocketBufSignature DQ ffffffffffffffffH
_PxBlockingCallsThreshold DD 014H
_PxSocketServer_PreallocatedSockets DD 03e8H
_PxSocket_MaxSyncSendAttempts DD 03H
_PxSocket_MaxSyncRecvAttempts DD 03H
_PxSocket_MaxRecvBufSize DD 010000H
_PyTLSHeap_DefaultSize DD 0200000H
Py_MainThreadId DD 0ffffffffH
_PxSocket_SendListSize DD 01eH
_parallel_doc DB '_parallel module.', 0aH, 0aH, 'Functions:', 0aH, 0aH, 'm'
	DB	'ap()', 0aH, 00H
	ORG $+2
_async_cpu_count_doc DB 'cpu_count() -> integer', 0aH, 0aH, 'Return an in'
	DB	'teger representing the number of online logical CPUs,', 0aH, 'o'
	DB	'r -1 if this value cannot be established.', 00H
	ORG $+3
_Py_CtrlCHandlerRoutine DQ FLAT:_Py_HandleCtrlC
_parallel_map_doc DB 'map(callable, iterable) -> list', 0aH, 0aH, 'Calls '
	DB	'``callable`` with each item in ``iterable``.', 0aH, 'Returns '
	DB	'a list of results.', 00H
	ORG $+1
_parallel_methods DQ FLAT:??_C@_03HBNNNHNM@map?$AA@
	DQ	FLAT:_parallel_map
	DD	01H
	ORG $+4
	DQ	FLAT:_parallel_map_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
_parallelmodule DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_09KKLBMLNG@_parallel?$AA@
	DQ	FLAT:_parallel_doc
	DQ	ffffffffffffffffH
	DQ	FLAT:_parallel_methods
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
xlist_pop_doc DB 'XXX TODO', 0aH, 00H
	ORG $+2
pxsocket_accept_doc DB 'x', 0aH, 00H
	ORG $+1
xlist_push_doc DB 'XXX TODO', 0aH, 00H
	ORG $+2
pxsocket_bind_doc DB 'x', 0aH, 00H
	ORG $+1
xlist_size_doc DB 'XXX TODO', 0aH, 00H
	ORG $+2
pxsocket_connect_doc DB 'x', 0aH, 00H
	ORG $+1
xlist_flush_doc DB 'XXX TODO', 0aH, 00H
	ORG $+6
xlist_methods DQ FLAT:??_C@_03NJDAHFJE@pop?$AA@
	DQ	FLAT:xlist_pop
	DD	04H
	ORG $+4
	DQ	FLAT:xlist_pop_doc
	DQ	FLAT:??_C@_04GHHNIPCF@push?$AA@
	DQ	FLAT:xlist_push
	DD	08H
	ORG $+4
	DQ	FLAT:xlist_push_doc
	DQ	FLAT:??_C@_05GLCAEPFP@flush?$AA@
	DQ	FLAT:xlist_flush
	DD	04H
	ORG $+4
	DQ	FLAT:xlist_flush_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
xlist_as_sequence DQ FLAT:PyXList_Length
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
PyXList_Type DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	ORG $+16
	DQ	FLAT:??_C@_05KOEEJJMO@xlist?$AA@
	DQ	00000000000000a0H
	DQ	0000000000000000H
	DQ	FLAT:xlist_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:xlist_as_sequence
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	040000H
	ORG $+4
	DQ	FLAT:??_C@_0BI@GPMFHCMJ@Interlocked?5List?5Object?$AA@
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:xlist_methods
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:xlist_alloc
	DQ	FLAT:xlist_new
	DQ	0000000000000000H
	ORG $+64
_async_list_doc DB 'Helper function for creating an async-protected insta'
	DB	'nce of type ''##name''', 0aH, 00H
	ORG $+5
_async_dict_doc DB 'Helper function for creating an async-protected insta'
	DB	'nce of type ''##name''', 0aH, 00H
	ORG $+5
_async_doc DB	'_async module.', 0aH, 0aH, 'Functions:', 0aH, 0aH, 'run('
	DB	')', 0aH, 'map(callable, iterable[, chunksize[, callback[, err'
	DB	'back]]])', 0aH, 'submit_work(func[, args[, kwds[, callback[, '
	DB	'errback]]]])', 0aH, 'submit_wait(wait, func[, args[, kwds[, c'
	DB	'allback[, errback]]]])', 0aH, 'submit_timer(timer, func[, arg'
	DB	's[, kwds[, callback[, errback]]]])', 0aH, 'submit_io(func[, a'
	DB	'rgs[, kwds[, callback[, errback]]]])', 0aH, 'submit_server(ob'
	DB	'j)', 0aH, 'submit_client(obj)', 0aH, 0aH, 'Socket IO function'
	DB	's:', 0aH, 'connect(sock, (host, port)[, buf[, callback[, errb'
	DB	'ack]]])', 0aH, 00H
	ORG $+3
_async_run_doc DB 'run() -> None', 0aH, 0aH, 'Runs the _async event loop.'
	DB	00H
	ORG $+1
pxsocket_close_doc DB 'x', 0aH, 00H
	ORG $+1
?kwlist@?1??_async_register@@9@9 DQ FLAT:??_C@_09PBENLGJM@transport?$AA@ ; `_async_register'::`2'::kwlist
	DQ	FLAT:??_C@_08FCFPNNHF@protocol?$AA@
	DQ	0000000000000000H
_async_unregister_doc DB 'unregister(object) -> None', 0aH, 0aH, 'Unregis'
	DB	'ters an asynchronous object.', 00H
_async_read_doc DB 'XXX TODO', 0aH, 00H
	ORG $+2
pxsocket_listen_doc DB 'x', 0aH, 00H
	ORG $+1
_async_open_doc DB 'XXX TODO', 0aH, 00H
	ORG $+6
_async_pipe_doc DB 'XXX TODO', 0aH, 00H
	ORG $+6
_async_write_doc DB 'XXX TODO', 0aH, 00H
	ORG $+6
_async_fileopener_doc DB 'XXX TODO', 0aH, 00H
	ORG $+6
_async_filecloser_doc DB 'XXX TODO', 0aH, 00H
	ORG $+6
_async__address_doc DB 'XXX TODO', 0aH, 00H
	ORG $+6
_async__dbg_address_doc DB 'XXX TODO', 0aH, 00H
	ORG $+6
_async__close_doc DB 'XXX TODO', 0aH, 00H
	ORG $+6
_async__rawfile_doc DB 'XXX TODO', 0aH, 00H
	ORG $+6
_async__post_open_doc DB 'XXX TODO', 0aH, 00H
	ORG $+6
_async_submit_write_io_doc DB 'XXX TODO', 0aH, 00H
	ORG $+6
_async_map_doc DB 'XXX TODO', 0aH, 00H
	ORG $+6
_async_wait_doc DB 'XXX TODO', 0aH, 00H
	ORG $+6
_async_rdtsc_doc DB 'XXX TODO', 0aH, 00H
	ORG $+6
_async_client_doc DB 'XXX TODO', 0aH, 00H
	ORG $+6
_async_server_doc DB 'XXX TODO', 0aH, 00H
	ORG $+6
_async_signal_doc DB 'XXX TODO', 0aH, 00H
	ORG $+6
_async_prewait_doc DB 'XXX TODO', 0aH, 00H
	ORG $+6
_async_protect_doc DB 'XXX TODO', 0aH, 00H
	ORG $+6
_async_run_once_doc DB 'XXX TODO', 0aH, 00H
	ORG $+6
_async_unprotect_doc DB 'XXX TODO', 0aH, 00H
	ORG $+6
_async_protected_doc DB 'XXX TODO', 0aH, 00H
	ORG $+6
_async_is_active_doc DB 'XXX TODO', 0aH, 00H
	ORG $+6
_async_read_lock_doc DB 'XXX TODO', 0aH, 00H
	ORG $+6
_async_read_unlock_doc DB 'XXX TODO', 0aH, 00H
	ORG $+6
_async_try_read_lock_doc DB 'XXX TODO', 0aH, 00H
	ORG $+6
_async_write_lock_doc DB 'XXX TODO', 0aH, 00H
	ORG $+6
_async_write_unlock_doc DB 'XXX TODO', 0aH, 00H
	ORG $+6
_async_try_write_lock_doc DB 'XXX TODO', 0aH, 00H
	ORG $+6
_async_submit_io_doc DB 'XXX TODO', 0aH, 00H
	ORG $+6
_async_submit_work_doc DB 'XXX TODO', 0aH, 00H
	ORG $+6
_async_submit_wait_doc DB 'XXX TODO', 0aH, 00H
	ORG $+6
_async_is_active_ex_doc DB 'XXX TODO', 0aH, 00H
	ORG $+6
_async_active_count_doc DB 'XXX TODO', 0aH, 00H
	ORG $+6
_async_submit_timer_doc DB 'XXX TODO', 0aH, 00H
	ORG $+6
_async_submit_class_doc DB 'XXX TODO', 0aH, 00H
	ORG $+6
_async_submit_client_doc DB 'XXX TODO', 0aH, 00H
	ORG $+6
_async_submit_server_doc DB 'XXX TODO', 0aH, 00H
	ORG $+6
_async_active_contexts_doc DB 'XXX TODO', 0aH, 00H
	ORG $+6
_async_persisted_contexts_doc DB 'XXX TODO', 0aH, 00H
	ORG $+6
_async_signal_and_wait_doc DB 'XXX TODO', 0aH, 00H
	ORG $+6
_async_is_parallel_thread_doc DB 'XXX TODO', 0aH, 00H
	ORG $+6
_async_call_from_main_thread_doc DB 'XXX TODO', 0aH, 00H
	ORG $+6
_async_call_from_main_thread_and_wait_doc DB 'XXX TODO', 0aH, 00H
	ORG $+6
pxsocket_write_doc DB 'XXX TODO', 0aH, 00H
	ORG $+6
pxsocket_next_send_id_doc DB 'xxx todo', 0aH, 00H
	ORG $+6
pxsocket_sendfile_doc DB 'xxx todo', 0aH, 00H
	ORG $+6
PxSocketMethods DQ FLAT:??_C@_05LBOHBHFK@close?$AA@
	DQ	FLAT:pxsocket_close
	DD	04H
	ORG $+4
	DQ	FLAT:pxsocket_close_doc
	DQ	FLAT:??_C@_08JCEFHKI@sendfile?$AA@
	DQ	FLAT:pxsocket_sendfile
	DD	01H
	ORG $+4
	DQ	FLAT:pxsocket_sendfile_doc
	DQ	FLAT:??_C@_0N@NCCDGHBG@next_send_id?$AA@
	DQ	FLAT:pxsocket_next_send_id
	DD	04H
	ORG $+4
	DQ	FLAT:pxsocket_next_send_id_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
PxSocketMembers DQ FLAT:??_C@_02GIIHKPLE@ip?$AA@
	DD	05H
	ORG $+4
	DQ	0000000000000214H
	DD	00H
	ORG $+4
	DQ	FLAT:??_C@_0N@MACGLBGI@ip?5attribute?$AA@
	DQ	FLAT:??_C@_04OODOLJMA@host?$AA@
	DD	05H
	ORG $+4
	DQ	0000000000000228H
	DD	00H
	ORG $+4
	DQ	FLAT:??_C@_0P@MCCBLNDF@host?5attribute?$AA@
	DQ	FLAT:??_C@_04LPGMAPLE@port?$AA@
	DD	01H
	ORG $+4
	DQ	0000000000000230H
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0P@JEFMDHHI@port?5attribute?$AA@
	DQ	FLAT:??_C@_0M@MPEABHKE@sock_family?$AA@
	DD	01H
	ORG $+4
	DQ	0000000000000068H
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0BG@OGFLPBML@sock_family?5attribute?$AA@
	DQ	FLAT:??_C@_09POMCLMKJ@sock_type?$AA@
	DD	01H
	ORG $+4
	DQ	000000000000006cH
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0BE@GKFOEKAL@sock_type?5attribute?$AA@
	DQ	FLAT:??_C@_0L@LEEOFDBB@sock_proto?$AA@
	DD	01H
	ORG $+4
	DQ	0000000000000070H
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0BF@PGBPHFFO@sock_proto?5attribute?$AA@
	DQ	FLAT:??_C@_0N@EJAJFIKO@sock_timeout?$AA@
	DD	04H
	ORG $+4
	DQ	0000000000000080H
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0BH@CNEGKLNK@sock_timeout?5attribute?$AA@
	DQ	0000000000000000H
	ORG $+32
PxSocket_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0O@POBIDKD@_async?4socket?$AA@
	DQ	0000000000000450H
	DQ	0000000000000000H
	DQ	FLAT:pxsocket_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	FLAT:PyObject_GenericSetAttr
	DQ	0000000000000000H
	DD	040000H
	ORG $+4
	DQ	FLAT:??_C@_0BM@BICFFLHA@Asynchronous?5Socket?5Objects?$AA@
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PxSocketMethods
	DQ	FLAT:PxSocketMembers
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyType_GenericAlloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+64
_async_print_doc DB 'xxx todo', 0aH, 00H
	ORG $+6
_async_stdout_doc DB 'xxx todo', 0aH, 00H
	ORG $+6
_async_stderr_doc DB 'xxx todo', 0aH, 00H
	ORG $+6
_async_register_doc DB 'register(transport=object, protocol=object) -> No'
	DB	'ne', 0aH, 0aH, 'Register an asynchronous transport object wit'
	DB	'h the given protocol.', 00H
?fmt@?1??_async_register@@9@9 DQ FLAT:??_C@_0M@NCDCDINH@OO?3register?$AA@ ; `_async_register'::`2'::fmt
_async_methods DQ FLAT:??_C@_03HBNNNHNM@map?$AA@
	DQ	FLAT:_async_map
	DD	01H
	ORG $+4
	DQ	FLAT:_async_map_doc
	DQ	FLAT:??_C@_03LGMJKEGG@run?$AA@
	DQ	FLAT:_async_run
	DD	04H
	ORG $+4
	DQ	FLAT:_async_run_doc
	DQ	FLAT:??_C@_04PNOAOIAG@wait?$AA@
	DQ	FLAT:_async_wait
	DD	08H
	ORG $+4
	DQ	FLAT:_async_wait_doc
	DQ	FLAT:??_C@_04POLDLDMI@read?$AA@
	DQ	FLAT:_async_read
	DD	01H
	ORG $+4
	DQ	FLAT:_async_read_doc
	DQ	FLAT:??_C@_04BCIDKIGN@dict?$AA@
	DQ	FLAT:_async_dict
	DD	03H
	ORG $+4
	DQ	FLAT:_async_dict_doc
	DQ	FLAT:??_C@_04DONFEANM@list?$AA@
	DQ	FLAT:_async_list
	DD	03H
	ORG $+4
	DQ	FLAT:_async_list_doc
	DQ	FLAT:??_C@_05IJDJACGD@print?$AA@
	DQ	FLAT:_async_print
	DD	01H
	ORG $+4
	DQ	FLAT:_async_print_doc
	DQ	FLAT:??_C@_05NGFEDHGN@write?$AA@
	DQ	FLAT:_async_write
	DD	01H
	ORG $+4
	DQ	FLAT:_async_write_doc
	DQ	FLAT:??_C@_05JIFPPKLN@rdtsc?$AA@
	DQ	FLAT:_async_rdtsc
	DD	04H
	ORG $+4
	DQ	FLAT:_async_rdtsc_doc
	DQ	FLAT:??_C@_06DJDOIFHB@stdout?$AA@
	DQ	FLAT:_async_stdout
	DD	08H
	ORG $+4
	DQ	FLAT:_async_stdout_doc
	DQ	FLAT:??_C@_06FJGNEBG@stderr?$AA@
	DQ	FLAT:_async_stderr
	DD	08H
	ORG $+4
	DQ	FLAT:_async_stderr_doc
	DQ	FLAT:??_C@_06EINEPANJ@_close?$AA@
	DQ	FLAT:_async__close
	DD	08H
	ORG $+4
	DQ	FLAT:_async__close_doc
	DQ	FLAT:??_C@_06OAFOBKHE@signal?$AA@
	DQ	FLAT:_async_signal
	DD	08H
	ORG $+4
	DQ	FLAT:_async_signal_doc
	DQ	FLAT:??_C@_06DGDLPBAN@client?$AA@
	DQ	FLAT:_async_client
	DD	03H
	ORG $+4
	DQ	FLAT:_async_client_doc
	DQ	FLAT:??_C@_06HJHJCKIO@server?$AA@
	DQ	FLAT:_async_server
	DD	03H
	ORG $+4
	DQ	FLAT:_async_server_doc
	DQ	FLAT:??_C@_07LFLAEFDO@protect?$AA@
	DQ	FLAT:_async_protect
	DD	08H
	ORG $+4
	DQ	FLAT:_async_protect_doc
	DQ	FLAT:??_C@_07NBHOAOAJ@prewait?$AA@
	DQ	FLAT:_async_prewait
	DD	08H
	ORG $+4
	DQ	FLAT:_async_prewait_doc
	DQ	FLAT:??_C@_08JJIPKIML@_address?$AA@
	DQ	FLAT:_async__address
	DD	08H
	ORG $+4
	DQ	FLAT:_async__address_doc
	DQ	FLAT:??_C@_08GIJFBOPB@_rawfile?$AA@
	DQ	FLAT:_async__rawfile
	DD	08H
	ORG $+4
	DQ	FLAT:_async__rawfile_doc
	DQ	FLAT:??_C@_08DHHIDNEP@register?$AA@
	DQ	FLAT:_async_register
	DD	03H
	ORG $+4
	DQ	FLAT:_async_register_doc
	DQ	FLAT:??_C@_08JHMCJIFL@run_once?$AA@
	DQ	FLAT:_async_run_once
	DD	04H
	ORG $+4
	DQ	FLAT:_async_run_once_doc
	DQ	FLAT:??_C@_09CHNCHKJL@cpu_count?$AA@
	DQ	FLAT:_async_cpu_count
	DD	04H
	ORG $+4
	DQ	FLAT:_async_cpu_count_doc
	DQ	FLAT:??_C@_09LHNJOGML@unprotect?$AA@
	DQ	FLAT:_async_unprotect
	DD	08H
	ORG $+4
	DQ	FLAT:_async_unprotect_doc
	DQ	FLAT:??_C@_09IPOLMLK@protected?$AA@
	DQ	FLAT:_async_protected
	DD	08H
	ORG $+4
	DQ	FLAT:_async_protected_doc
	DQ	FLAT:??_C@_09NFIEOJGK@is_active?$AA@
	DQ	FLAT:_async_is_active
	DD	04H
	ORG $+4
	DQ	FLAT:_async_is_active_doc
	DQ	FLAT:??_C@_09NGDECFMF@submit_io?$AA@
	DQ	FLAT:_async_submit_io
	DD	01H
	ORG $+4
	DQ	FLAT:_async_submit_io_doc
	DQ	FLAT:??_C@_09JFECMODK@read_lock?$AA@
	DQ	FLAT:_async_read_lock
	DD	08H
	ORG $+4
	DQ	FLAT:_async_read_lock_doc
	DQ	FLAT:??_C@_0L@ILCHLJH@_post_open?$AA@
	DQ	FLAT:_async__post_open
	DD	01H
	ORG $+4
	DQ	FLAT:_async__post_open_doc
	DQ	FLAT:??_C@_0L@IMFFLKMC@fileopener?$AA@
	DQ	FLAT:_async_fileopener
	DD	01H
	ORG $+4
	DQ	FLAT:_async_fileopener_doc
	DQ	FLAT:??_C@_0L@NHCCIFLF@filecloser?$AA@
	DQ	FLAT:_async_filecloser
	DD	01H
	ORG $+4
	DQ	FLAT:_async_filecloser_doc
	DQ	FLAT:??_C@_0L@LOEOJHDP@write_lock?$AA@
	DQ	FLAT:_async_write_lock
	DD	08H
	ORG $+4
	DQ	FLAT:_async_write_lock_doc
	DQ	FLAT:??_C@_0M@PDCFAGMJ@submit_work?$AA@
	DQ	FLAT:_async_submit_work
	DD	01H
	ORG $+4
	DQ	FLAT:_async_submit_work_doc
	DQ	FLAT:??_C@_0M@MONDDDPF@submit_wait?$AA@
	DQ	FLAT:_async_submit_wait
	DD	01H
	ORG $+4
	DQ	FLAT:_async_submit_wait_doc
	DQ	FLAT:??_C@_0M@KBMFGJKH@read_unlock?$AA@
	DQ	FLAT:_async_read_unlock
	DD	08H
	ORG $+4
	DQ	FLAT:_async_read_unlock_doc
	DQ	FLAT:??_C@_0N@MOAFFPLO@write_unlock?$AA@
	DQ	FLAT:_async_write_unlock
	DD	08H
	ORG $+4
	DQ	FLAT:_async_write_unlock_doc
	DQ	FLAT:??_C@_0N@BKLNKEHO@is_active_ex?$AA@
	DQ	FLAT:_async_is_active_ex
	DD	04H
	ORG $+4
	DQ	FLAT:_async_is_active_ex_doc
	DQ	FLAT:??_C@_0N@BBPNBAFF@active_count?$AA@
	DQ	FLAT:_async_active_count
	DD	04H
	ORG $+4
	DQ	FLAT:_async_active_count_doc
	DQ	FLAT:??_C@_0N@EONPHPCE@_dbg_address?$AA@
	DQ	FLAT:_async__dbg_address
	DD	08H
	ORG $+4
	DQ	FLAT:_async__dbg_address_doc
	DQ	FLAT:??_C@_0N@PEHCKJKL@submit_timer?$AA@
	DQ	FLAT:_async_submit_timer
	DD	01H
	ORG $+4
	DQ	FLAT:_async_submit_timer_doc
	DQ	FLAT:??_C@_0N@GJCHEFMD@submit_class?$AA@
	DQ	FLAT:_async_submit_class
	DD	08H
	ORG $+4
	DQ	FLAT:_async_submit_class_doc
	DQ	FLAT:??_C@_0O@BIKLHLBM@submit_client?$AA@
	DQ	FLAT:_async_submit_client
	DD	08H
	ORG $+4
	DQ	FLAT:_async_submit_client_doc
	DQ	FLAT:??_C@_0O@FHOJKAJP@submit_server?$AA@
	DQ	FLAT:_async_submit_server
	DD	08H
	ORG $+4
	DQ	FLAT:_async_submit_server_doc
	DQ	FLAT:??_C@_0O@NMLNLIJN@try_read_lock?$AA@
	DQ	FLAT:_async_try_read_lock
	DD	08H
	ORG $+4
	DQ	FLAT:_async_try_read_lock_doc
	DQ	FLAT:??_C@_0P@PGLFFOAC@try_write_lock?$AA@
	DQ	FLAT:_async_try_write_lock
	DD	08H
	ORG $+4
	DQ	FLAT:_async_try_write_lock_doc
	DQ	FLAT:??_C@_0BA@NELHJCPB@submit_write_io?$AA@
	DQ	FLAT:_async_submit_write_io
	DD	01H
	ORG $+4
	DQ	FLAT:_async_submit_write_io_doc
	DQ	FLAT:??_C@_0BA@KFOAPOMJ@signal_and_wait?$AA@
	DQ	FLAT:_async_signal_and_wait
	DD	01H
	ORG $+4
	DQ	FLAT:_async_signal_and_wait_doc
	DQ	FLAT:??_C@_0BA@IAMMEFIL@active_contexts?$AA@
	DQ	FLAT:_async_active_contexts
	DD	04H
	ORG $+4
	DQ	FLAT:_async_active_contexts_doc
	DQ	FLAT:??_C@_0BD@IOGDFFJL@is_parallel_thread?$AA@
	DQ	FLAT:_async_is_parallel_thread
	DD	04H
	ORG $+4
	DQ	FLAT:_async_is_parallel_thread_doc
	DQ	FLAT:??_C@_0BD@FHGOHLMH@persisted_contexts?$AA@
	DQ	FLAT:_async_persisted_contexts
	DD	04H
	ORG $+4
	DQ	FLAT:_async_persisted_contexts_doc
	DQ	FLAT:??_C@_0BG@GDMKOJLI@call_from_main_thread?$AA@
	DQ	FLAT:_async_call_from_main_thread
	DD	01H
	ORG $+4
	DQ	FLAT:_async_call_from_main_thread_doc
	DQ	FLAT:??_C@_0BP@JFECJGF@call_from_main_thread_and_wait?$AA@
	DQ	FLAT:_async_call_from_main_thread_and_wait
	DD	01H
	ORG $+4
	DQ	FLAT:_async_call_from_main_thread_and_wait_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
_asyncmodule DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_06NAHKMOGH@_async?$AA@
	DQ	FLAT:_async_doc
	DQ	ffffffffffffffffH
	DQ	FLAT:_async_methods
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
_DATA	ENDS
;	COMDAT ??_C@_05BENFLAID@proto?$AA@
CONST	SEGMENT
??_C@_05BENFLAID@proto?$AA@ DB 'proto', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GPMDFGEJ@type?$AA@
CONST	SEGMENT
??_C@_04GPMDFGEJ@type?$AA@ DB 'type', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06NBOBHOCP@family?$AA@
CONST	SEGMENT
??_C@_06NBOBHOCP@family?$AA@ DB 'family', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04LPGMAPLE@port?$AA@
CONST	SEGMENT
??_C@_04LPGMAPLE@port?$AA@ DB 'port', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04OODOLJMA@host?$AA@
CONST	SEGMENT
??_C@_04OODOLJMA@host?$AA@ DB 'host', 00H		; `string'
CONST	ENDS
CONST	SEGMENT
_AcceptEx_GUID DD 0b5367df1H
	DW	0cbacH
	DW	011cfH
	DB	095H
	DB	0caH
	DB	00H
	DB	080H
	DB	05fH
	DB	048H
	DB	0a1H
	DB	092H
_ConnectEx_GUID DD 025a207b9H
	DW	0ddf3H
	DW	04660H
	DB	08eH
	DB	0e9H
	DB	076H
	DB	0e5H
	DB	08cH
	DB	074H
	DB	06H
	DB	03eH
_WSARecvMsg_GUID DD 0f689d7c8H
	DW	06f1fH
	DW	0436bH
	DB	08aH
	DB	053H
	DB	0e5H
	DB	04fH
	DB	0e3H
	DB	051H
	DB	0c3H
	DB	022H
_WSASendMsg_GUID DD 0a441e712H
	DW	0754fH
	DW	043caH
	DB	084H
	DB	0a7H
	DB	0dH
	DB	0eeH
	DB	044H
	DB	0cfH
	DB	060H
	DB	06dH
_DisconnectEx_GUID DD 07fda2e11H
	DW	08630H
	DW	0436fH
	DB	0a0H
	DB	031H
	DB	0f5H
	DB	036H
	DB	0a6H
	DB	0eeH
	DB	0c1H
	DB	057H
_TransmitFile_GUID DD 0b5367df0H
	DW	0cbacH
	DW	011cfH
	DB	095H
	DB	0caH
	DB	00H
	DB	080H
	DB	05fH
	DB	048H
	DB	0a1H
	DB	092H
_TransmitPackets_GUID DD 0d9689da0H
	DW	01f90H
	DW	011d3H
	DB	099H
	DB	071H
	DB	00H
	DB	0c0H
	DB	04fH
	DB	068H
	DB	0c8H
	DB	076H
_GetAcceptExSockaddrs_GUID DD 0b5367df2H
	DW	0cbacH
	DW	011cfH
	DB	095H
	DB	0caH
	DB	00H
	DB	080H
	DB	05fH
	DB	048H
	DB	0a1H
	DB	092H
CONST	ENDS
PUBLIC	_Py_PXCTX
PUBLIC	_PyParallel_DoesContextHaveActiveHeapSnapshot
EXTRN	_tls_index:DWORD
;	COMDAT pdata
; File c:\src\pyparallel\python\pyparallel.c
pdata	SEGMENT
$pdata$_PyParallel_DoesContextHaveActiveHeapSnapshot DD imagerel $LN7
	DD	imagerel $LN7+98
	DD	imagerel $unwind$_PyParallel_DoesContextHaveActiveHeapSnapshot
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyParallel_DoesContextHaveActiveHeapSnapshot DD 010401H
	DD	06204H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _PyParallel_DoesContextHaveActiveHeapSnapshot
_TEXT	SEGMENT
tv75 = 32
tv74 = 36
_PyParallel_DoesContextHaveActiveHeapSnapshot PROC	; COMDAT

; 110  : {

$LN7:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 111  :     return (!Py_PXCTX ? 0 : (ctx->snapshot_id == 0));

  00004	e8 00 00 00 00	 call	 _Py_PXCTX
  00009	85 c0		 test	 eax, eax
  0000b	75 0a		 jne	 SHORT $LN5@PyParallel
  0000d	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv75[rsp], 0
  00015	eb 42		 jmp	 SHORT $LN6@PyParallel
$LN5@PyParallel:
  00017	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:ctx
  0001c	8b c0		 mov	 eax, eax
  0001e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00024	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0002d	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  00031	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  00035	48 83 b8 f0 01
	00 00 00	 cmp	 QWORD PTR [rax+496], 0
  0003d	75 0a		 jne	 SHORT $LN3@PyParallel
  0003f	c7 44 24 24 01
	00 00 00	 mov	 DWORD PTR tv74[rsp], 1
  00047	eb 08		 jmp	 SHORT $LN4@PyParallel
$LN3@PyParallel:
  00049	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR tv74[rsp], 0
$LN4@PyParallel:
  00051	8b 44 24 24	 mov	 eax, DWORD PTR tv74[rsp]
  00055	89 44 24 20	 mov	 DWORD PTR tv75[rsp], eax
$LN6@PyParallel:
  00059	8b 44 24 20	 mov	 eax, DWORD PTR tv75[rsp]

; 112  : }

  0005d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00061	c3		 ret	 0
_PyParallel_DoesContextHaveActiveHeapSnapshot ENDP
_TEXT	ENDS
PUBLIC	_PyParallel_IsTLSHeapActive
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyParallel_IsTLSHeapActive DD imagerel $LN7
	DD	imagerel $LN7+94
	DD	imagerel $unwind$_PyParallel_IsTLSHeapActive
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyParallel_IsTLSHeapActive DD 010401H
	DD	06204H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _PyParallel_IsTLSHeapActive
_TEXT	SEGMENT
tv75 = 32
tv74 = 36
_PyParallel_IsTLSHeapActive PROC			; COMDAT

; 118  : {

$LN7:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 119  :     return (!Py_PXCTX ? 0 : Px_TLS_HEAP_ACTIVE);

  00004	e8 00 00 00 00	 call	 _Py_PXCTX
  00009	85 c0		 test	 eax, eax
  0000b	75 0a		 jne	 SHORT $LN5@PyParallel@2
  0000d	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv75[rsp], 0
  00015	eb 3e		 jmp	 SHORT $LN6@PyParallel@2
$LN5@PyParallel@2:
  00017	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:tls
  0001c	8b c0		 mov	 eax, eax
  0001e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00024	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0002d	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  00031	83 bc 01 d0 00
	00 00 00	 cmp	 DWORD PTR [rcx+rax+208], 0
  00039	7e 0a		 jle	 SHORT $LN3@PyParallel@2
  0003b	c7 44 24 24 01
	00 00 00	 mov	 DWORD PTR tv74[rsp], 1
  00043	eb 08		 jmp	 SHORT $LN4@PyParallel@2
$LN3@PyParallel@2:
  00045	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR tv74[rsp], 0
$LN4@PyParallel@2:
  0004d	8b 44 24 24	 mov	 eax, DWORD PTR tv74[rsp]
  00051	89 44 24 20	 mov	 DWORD PTR tv75[rsp], eax
$LN6@PyParallel@2:
  00055	8b 44 24 20	 mov	 eax, DWORD PTR tv75[rsp]

; 120  : }

  00059	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0005d	c3		 ret	 0
_PyParallel_IsTLSHeapActive ENDP
_TEXT	ENDS
PUBLIC	_PyParallel_GetTLSHeapDepth
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyParallel_GetTLSHeapDepth DD imagerel $LN5
	DD	imagerel $LN5+69
	DD	imagerel $unwind$_PyParallel_GetTLSHeapDepth
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyParallel_GetTLSHeapDepth DD 010401H
	DD	06204H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _PyParallel_GetTLSHeapDepth
_TEXT	SEGMENT
tv73 = 32
_PyParallel_GetTLSHeapDepth PROC			; COMDAT

; 124  : {

$LN5:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 125  :     return (!Py_PXCTX ? 0 : tls.heap_depth);

  00004	e8 00 00 00 00	 call	 _Py_PXCTX
  00009	85 c0		 test	 eax, eax
  0000b	75 0a		 jne	 SHORT $LN3@PyParallel@3
  0000d	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv73[rsp], 0
  00015	eb 25		 jmp	 SHORT $LN4@PyParallel@3
$LN3@PyParallel@3:
  00017	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:tls
  0001c	8b c0		 mov	 eax, eax
  0001e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00024	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0002d	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  00031	8b 84 01 d0 00
	00 00		 mov	 eax, DWORD PTR [rcx+rax+208]
  00038	89 44 24 20	 mov	 DWORD PTR tv73[rsp], eax
$LN4@PyParallel@3:
  0003c	8b 44 24 20	 mov	 eax, DWORD PTR tv73[rsp]

; 126  : }

  00040	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00044	c3		 ret	 0
_PyParallel_GetTLSHeapDepth ENDP
_TEXT	ENDS
PUBLIC	??_C@_1BK@MIIJJGCJ@?$AAc?$AA?9?$AA?$DO?$AAh?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAt?$AA?9?$AA?$DO?$AAh?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BK@MEEFFJG@?$AA?$CB?$AAt?$AA?9?$AA?$DO?$AAc?$AAt?$AAx?$AA_?$AAh?$AAe?$AAa?$AAp?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CG@CGLGKPAD@?$AAt?$AA?9?$AA?$DO?$AAh?$AAe?$AAa?$AAp?$AA_?$AAd?$AAe?$AAp?$AAt?$AAh?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA1?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@ ; `string'
PUBLIC	??_C@_0DA@BHNKKJOD@PyParallel_EnableTLSHeap?$CI?$CJ?3?5heap@ ; `string'
PUBLIC	_PyParallel_EnableTLSHeap
EXTRN	__imp__wassert:PROC
EXTRN	Py_FatalError:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyParallel_EnableTLSHeap DD imagerel $LN9
	DD	imagerel $LN9+332
	DD	imagerel $unwind$_PyParallel_EnableTLSHeap
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyParallel_EnableTLSHeap DD 010401H
	DD	08204H
xdata	ENDS
;	COMDAT ??_C@_1BK@MIIJJGCJ@?$AAc?$AA?9?$AA?$DO?$AAh?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAt?$AA?9?$AA?$DO?$AAh?$AA?$AA@
CONST	SEGMENT
??_C@_1BK@MIIJJGCJ@?$AAc?$AA?9?$AA?$DO?$AAh?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAt?$AA?9?$AA?$DO?$AAh?$AA?$AA@ DB 'c'
	DB	00H, '-', 00H, '>', 00H, 'h', 00H, ' ', 00H, '!', 00H, '=', 00H
	DB	' ', 00H, 't', 00H, '-', 00H, '>', 00H, 'h', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BK@MEEFFJG@?$AA?$CB?$AAt?$AA?9?$AA?$DO?$AAc?$AAt?$AAx?$AA_?$AAh?$AAe?$AAa?$AAp?$AA?$AA@
CONST	SEGMENT
??_C@_1BK@MEEFFJG@?$AA?$CB?$AAt?$AA?9?$AA?$DO?$AAc?$AAt?$AAx?$AA_?$AAh?$AAe?$AAa?$AAp?$AA?$AA@ DB '!'
	DB	00H, 't', 00H, '-', 00H, '>', 00H, 'c', 00H, 't', 00H, 'x', 00H
	DB	'_', 00H, 'h', 00H, 'e', 00H, 'a', 00H, 'p', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@CGLGKPAD@?$AAt?$AA?9?$AA?$DO?$AAh?$AAe?$AAa?$AAp?$AA_?$AAd?$AAe?$AAp?$AAt?$AAh?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA1?$AA?$AA@
CONST	SEGMENT
??_C@_1CG@CGLGKPAD@?$AAt?$AA?9?$AA?$DO?$AAh?$AAe?$AAa?$AAp?$AA_?$AAd?$AAe?$AAp?$AAt?$AAh?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA1?$AA?$AA@ DB 't'
	DB	00H, '-', 00H, '>', 00H, 'h', 00H, 'e', 00H, 'a', 00H, 'p', 00H
	DB	'_', 00H, 'd', 00H, 'e', 00H, 'p', 00H, 't', 00H, 'h', 00H, ' '
	DB	00H, '=', 00H, '=', 00H, ' ', 00H, '1', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
CONST	SEGMENT
??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@ DB '.'
	DB	00H, '.', 00H, '\', 00H, 'P', 00H, 'y', 00H, 't', 00H, 'h', 00H
	DB	'o', 00H, 'n', 00H, '\', 00H, 'p', 00H, 'y', 00H, 'p', 00H, 'a'
	DB	00H, 'r', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'e', 00H, 'l', 00H
	DB	'.', 00H, 'c', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@BHNKKJOD@PyParallel_EnableTLSHeap?$CI?$CJ?3?5heap@
CONST	SEGMENT
??_C@_0DA@BHNKKJOD@PyParallel_EnableTLSHeap?$CI?$CJ?3?5heap@ DB 'PyParall'
	DB	'el_EnableTLSHeap(): heap depth overflow', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PyParallel_EnableTLSHeap
_TEXT	SEGMENT
c$ = 32
t$ = 40
tv80 = 48
_PyParallel_EnableTLSHeap PROC				; COMDAT

; 130  : {

$LN9:
  00000	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 131  :     TLS     *t = &tls;

  00004	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:tls
  00009	8b c0		 mov	 eax, eax
  0000b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00011	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0001a	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0001e	48 89 44 24 28	 mov	 QWORD PTR t$[rsp], rax

; 132  :     Context *c = ctx;

  00023	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:ctx
  00028	8b c0		 mov	 eax, eax
  0002a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00030	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00039	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  0003d	48 8b 04 08	 mov	 rax, QWORD PTR [rax+rcx]
  00041	48 89 44 24 20	 mov	 QWORD PTR c$[rsp], rax

; 133  : 
; 134  :     if (!Py_PXCTX)

  00046	e8 00 00 00 00	 call	 _Py_PXCTX
  0004b	85 c0		 test	 eax, eax
  0004d	75 05		 jne	 SHORT $LN3@PyParallel@4

; 135  :         return;

  0004f	e9 f3 00 00 00	 jmp	 $LN4@PyParallel@4
$LN3@PyParallel@4:

; 136  : 
; 137  :     if (++t->heap_depth > 1)

  00054	48 8b 44 24 28	 mov	 rax, QWORD PTR t$[rsp]
  00059	8b 80 d0 00 00
	00		 mov	 eax, DWORD PTR [rax+208]
  0005f	ff c0		 inc	 eax
  00061	89 44 24 30	 mov	 DWORD PTR tv80[rsp], eax
  00065	48 8b 44 24 28	 mov	 rax, QWORD PTR t$[rsp]
  0006a	8b 4c 24 30	 mov	 ecx, DWORD PTR tv80[rsp]
  0006e	89 88 d0 00 00
	00		 mov	 DWORD PTR [rax+208], ecx
  00074	83 7c 24 30 01	 cmp	 DWORD PTR tv80[rsp], 1
  00079	7e 05		 jle	 SHORT $LN2@PyParallel@4

; 138  :         /* Heap already active. */
; 139  :         return;

  0007b	e9 c7 00 00 00	 jmp	 $LN4@PyParallel@4
$LN2@PyParallel@4:

; 140  : 
; 141  :     if (t->heap_depth < 0)

  00080	48 8b 44 24 28	 mov	 rax, QWORD PTR t$[rsp]
  00085	83 b8 d0 00 00
	00 00		 cmp	 DWORD PTR [rax+208], 0
  0008c	7d 0c		 jge	 SHORT $LN1@PyParallel@4

; 142  :         Py_FatalError("PyParallel_EnableTLSHeap(): heap depth overflow");

  0008e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DA@BHNKKJOD@PyParallel_EnableTLSHeap?$CI?$CJ?3?5heap@
  00095	e8 00 00 00 00	 call	 Py_FatalError
$LN1@PyParallel@4:

; 143  : 
; 144  :     assert(t->heap_depth == 1);

  0009a	48 8b 44 24 28	 mov	 rax, QWORD PTR t$[rsp]
  0009f	83 b8 d0 00 00
	00 01		 cmp	 DWORD PTR [rax+208], 1
  000a6	74 1c		 je	 SHORT $LN6@PyParallel@4
  000a8	41 b8 90 00 00
	00		 mov	 r8d, 144		; 00000090H
  000ae	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  000b5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@CGLGKPAD@?$AAt?$AA?9?$AA?$DO?$AAh?$AAe?$AAa?$AAp?$AA_?$AAd?$AAe?$AAp?$AAt?$AAh?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA1?$AA?$AA@
  000bc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000c2	33 c0		 xor	 eax, eax
$LN6@PyParallel@4:

; 145  :     assert(!t->ctx_heap);

  000c4	48 8b 44 24 28	 mov	 rax, QWORD PTR t$[rsp]
  000c9	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  000ce	74 1c		 je	 SHORT $LN7@PyParallel@4
  000d0	41 b8 91 00 00
	00		 mov	 r8d, 145		; 00000091H
  000d6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  000dd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BK@MEEFFJG@?$AA?$CB?$AAt?$AA?9?$AA?$DO?$AAc?$AAt?$AAx?$AA_?$AAh?$AAe?$AAa?$AAp?$AA?$AA@
  000e4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000ea	33 c0		 xor	 eax, eax
$LN7@PyParallel@4:

; 146  :     assert(c->h != t->h);

  000ec	48 8b 44 24 20	 mov	 rax, QWORD PTR c$[rsp]
  000f1	48 8b 4c 24 28	 mov	 rcx, QWORD PTR t$[rsp]
  000f6	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000f9	48 39 88 d0 00
	00 00		 cmp	 QWORD PTR [rax+208], rcx
  00100	75 1c		 jne	 SHORT $LN8@PyParallel@4
  00102	41 b8 92 00 00
	00		 mov	 r8d, 146		; 00000092H
  00108	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0010f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BK@MIIJJGCJ@?$AAc?$AA?9?$AA?$DO?$AAh?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAt?$AA?9?$AA?$DO?$AAh?$AA?$AA@
  00116	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0011c	33 c0		 xor	 eax, eax
$LN8@PyParallel@4:

; 147  : 
; 148  :     t->ctx_heap = c->h;

  0011e	48 8b 44 24 28	 mov	 rax, QWORD PTR t$[rsp]
  00123	48 8b 4c 24 20	 mov	 rcx, QWORD PTR c$[rsp]
  00128	48 8b 89 d0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+208]
  0012f	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 149  :     c->h = t->h;

  00133	48 8b 44 24 20	 mov	 rax, QWORD PTR c$[rsp]
  00138	48 8b 4c 24 28	 mov	 rcx, QWORD PTR t$[rsp]
  0013d	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00140	48 89 88 d0 00
	00 00		 mov	 QWORD PTR [rax+208], rcx
$LN4@PyParallel@4:

; 150  : }

  00147	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0014b	c3		 ret	 0
_PyParallel_EnableTLSHeap ENDP
_TEXT	ENDS
PUBLIC	??_C@_1CI@KCELDBAK@?$AAc?$AA?9?$AA?$DO?$AAh?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAt?$AA?9?$AA?$DO?$AAc?$AAt?$AAx?$AA_?$AAh?$AAe?$AAa?$AAp?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BK@IJIMHLHP@?$AAc?$AA?9?$AA?$DO?$AAh?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAt?$AA?9?$AA?$DO?$AAh?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BI@GIKBDHKC@?$AAt?$AA?9?$AA?$DO?$AAc?$AAt?$AAx?$AA_?$AAh?$AAe?$AAa?$AAp?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CG@JOAKMIGG@?$AAt?$AA?9?$AA?$DO?$AAh?$AAe?$AAa?$AAp?$AA_?$AAd?$AAe?$AAp?$AAt?$AAh?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_0CP@OEHHIABM@PyParallel_DisableTLSHeap?3?5negat@ ; `string'
PUBLIC	_PyParallel_DisableTLSHeap
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyParallel_DisableTLSHeap DD imagerel $LN10
	DD	imagerel $LN10+376
	DD	imagerel $unwind$_PyParallel_DisableTLSHeap
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyParallel_DisableTLSHeap DD 010401H
	DD	08204H
xdata	ENDS
;	COMDAT ??_C@_1CI@KCELDBAK@?$AAc?$AA?9?$AA?$DO?$AAh?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAt?$AA?9?$AA?$DO?$AAc?$AAt?$AAx?$AA_?$AAh?$AAe?$AAa?$AAp?$AA?$AA@
CONST	SEGMENT
??_C@_1CI@KCELDBAK@?$AAc?$AA?9?$AA?$DO?$AAh?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAt?$AA?9?$AA?$DO?$AAc?$AAt?$AAx?$AA_?$AAh?$AAe?$AAa?$AAp?$AA?$AA@ DB 'c'
	DB	00H, '-', 00H, '>', 00H, 'h', 00H, ' ', 00H, '!', 00H, '=', 00H
	DB	' ', 00H, 't', 00H, '-', 00H, '>', 00H, 'c', 00H, 't', 00H, 'x'
	DB	00H, '_', 00H, 'h', 00H, 'e', 00H, 'a', 00H, 'p', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BK@IJIMHLHP@?$AAc?$AA?9?$AA?$DO?$AAh?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAt?$AA?9?$AA?$DO?$AAh?$AA?$AA@
CONST	SEGMENT
??_C@_1BK@IJIMHLHP@?$AAc?$AA?9?$AA?$DO?$AAh?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAt?$AA?9?$AA?$DO?$AAh?$AA?$AA@ DB 'c'
	DB	00H, '-', 00H, '>', 00H, 'h', 00H, ' ', 00H, '=', 00H, '=', 00H
	DB	' ', 00H, 't', 00H, '-', 00H, '>', 00H, 'h', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BI@GIKBDHKC@?$AAt?$AA?9?$AA?$DO?$AAc?$AAt?$AAx?$AA_?$AAh?$AAe?$AAa?$AAp?$AA?$AA@
CONST	SEGMENT
??_C@_1BI@GIKBDHKC@?$AAt?$AA?9?$AA?$DO?$AAc?$AAt?$AAx?$AA_?$AAh?$AAe?$AAa?$AAp?$AA?$AA@ DB 't'
	DB	00H, '-', 00H, '>', 00H, 'c', 00H, 't', 00H, 'x', 00H, '_', 00H
	DB	'h', 00H, 'e', 00H, 'a', 00H, 'p', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@JOAKMIGG@?$AAt?$AA?9?$AA?$DO?$AAh?$AAe?$AAa?$AAp?$AA_?$AAd?$AAe?$AAp?$AAt?$AAh?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1CG@JOAKMIGG@?$AAt?$AA?9?$AA?$DO?$AAh?$AAe?$AAa?$AAp?$AA_?$AAd?$AAe?$AAp?$AAt?$AAh?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@ DB 't'
	DB	00H, '-', 00H, '>', 00H, 'h', 00H, 'e', 00H, 'a', 00H, 'p', 00H
	DB	'_', 00H, 'd', 00H, 'e', 00H, 'p', 00H, 't', 00H, 'h', 00H, ' '
	DB	00H, '=', 00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@OEHHIABM@PyParallel_DisableTLSHeap?3?5negat@
CONST	SEGMENT
??_C@_0CP@OEHHIABM@PyParallel_DisableTLSHeap?3?5negat@ DB 'PyParallel_Dis'
	DB	'ableTLSHeap: negative heap depth', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PyParallel_DisableTLSHeap
_TEXT	SEGMENT
c$ = 32
t$ = 40
tv80 = 48
_PyParallel_DisableTLSHeap PROC				; COMDAT

; 154  : {

$LN10:
  00000	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 155  :     TLS     *t = &tls;

  00004	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:tls
  00009	8b c0		 mov	 eax, eax
  0000b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00011	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0001a	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0001e	48 89 44 24 28	 mov	 QWORD PTR t$[rsp], rax

; 156  :     Context *c = ctx;

  00023	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:ctx
  00028	8b c0		 mov	 eax, eax
  0002a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00030	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00039	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  0003d	48 8b 04 08	 mov	 rax, QWORD PTR [rax+rcx]
  00041	48 89 44 24 20	 mov	 QWORD PTR c$[rsp], rax

; 157  : 
; 158  :     if (!Py_PXCTX)

  00046	e8 00 00 00 00	 call	 _Py_PXCTX
  0004b	85 c0		 test	 eax, eax
  0004d	75 05		 jne	 SHORT $LN3@PyParallel@5

; 159  :         return;

  0004f	e9 1f 01 00 00	 jmp	 $LN4@PyParallel@5
$LN3@PyParallel@5:

; 160  : 
; 161  :     if (--t->heap_depth > 0)

  00054	48 8b 44 24 28	 mov	 rax, QWORD PTR t$[rsp]
  00059	8b 80 d0 00 00
	00		 mov	 eax, DWORD PTR [rax+208]
  0005f	ff c8		 dec	 eax
  00061	89 44 24 30	 mov	 DWORD PTR tv80[rsp], eax
  00065	48 8b 44 24 28	 mov	 rax, QWORD PTR t$[rsp]
  0006a	8b 4c 24 30	 mov	 ecx, DWORD PTR tv80[rsp]
  0006e	89 88 d0 00 00
	00		 mov	 DWORD PTR [rax+208], ecx
  00074	83 7c 24 30 00	 cmp	 DWORD PTR tv80[rsp], 0
  00079	7e 05		 jle	 SHORT $LN2@PyParallel@5

; 162  :         return;

  0007b	e9 f3 00 00 00	 jmp	 $LN4@PyParallel@5
$LN2@PyParallel@5:

; 163  : 
; 164  :     if (t->heap_depth < 0)

  00080	48 8b 44 24 28	 mov	 rax, QWORD PTR t$[rsp]
  00085	83 b8 d0 00 00
	00 00		 cmp	 DWORD PTR [rax+208], 0
  0008c	7d 0c		 jge	 SHORT $LN1@PyParallel@5

; 165  :         Py_FatalError("PyParallel_DisableTLSHeap: negative heap depth");

  0008e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CP@OEHHIABM@PyParallel_DisableTLSHeap?3?5negat@
  00095	e8 00 00 00 00	 call	 Py_FatalError
$LN1@PyParallel@5:

; 166  : 
; 167  :     assert(t->heap_depth == 0);

  0009a	48 8b 44 24 28	 mov	 rax, QWORD PTR t$[rsp]
  0009f	83 b8 d0 00 00
	00 00		 cmp	 DWORD PTR [rax+208], 0
  000a6	74 1c		 je	 SHORT $LN6@PyParallel@5
  000a8	41 b8 a7 00 00
	00		 mov	 r8d, 167		; 000000a7H
  000ae	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  000b5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@JOAKMIGG@?$AAt?$AA?9?$AA?$DO?$AAh?$AAe?$AAa?$AAp?$AA_?$AAd?$AAe?$AAp?$AAt?$AAh?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@
  000bc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000c2	33 c0		 xor	 eax, eax
$LN6@PyParallel@5:

; 168  :     assert(t->ctx_heap);

  000c4	48 8b 44 24 28	 mov	 rax, QWORD PTR t$[rsp]
  000c9	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  000ce	75 1c		 jne	 SHORT $LN7@PyParallel@5
  000d0	41 b8 a8 00 00
	00		 mov	 r8d, 168		; 000000a8H
  000d6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  000dd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BI@GIKBDHKC@?$AAt?$AA?9?$AA?$DO?$AAc?$AAt?$AAx?$AA_?$AAh?$AAe?$AAa?$AAp?$AA?$AA@
  000e4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000ea	33 c0		 xor	 eax, eax
$LN7@PyParallel@5:

; 169  :     assert(c->h == t->h);

  000ec	48 8b 44 24 20	 mov	 rax, QWORD PTR c$[rsp]
  000f1	48 8b 4c 24 28	 mov	 rcx, QWORD PTR t$[rsp]
  000f6	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000f9	48 39 88 d0 00
	00 00		 cmp	 QWORD PTR [rax+208], rcx
  00100	74 1c		 je	 SHORT $LN8@PyParallel@5
  00102	41 b8 a9 00 00
	00		 mov	 r8d, 169		; 000000a9H
  00108	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0010f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BK@IJIMHLHP@?$AAc?$AA?9?$AA?$DO?$AAh?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAt?$AA?9?$AA?$DO?$AAh?$AA?$AA@
  00116	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0011c	33 c0		 xor	 eax, eax
$LN8@PyParallel@5:

; 170  :     assert(c->h != t->ctx_heap);

  0011e	48 8b 44 24 20	 mov	 rax, QWORD PTR c$[rsp]
  00123	48 8b 4c 24 28	 mov	 rcx, QWORD PTR t$[rsp]
  00128	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  0012c	48 39 88 d0 00
	00 00		 cmp	 QWORD PTR [rax+208], rcx
  00133	75 1c		 jne	 SHORT $LN9@PyParallel@5
  00135	41 b8 aa 00 00
	00		 mov	 r8d, 170		; 000000aaH
  0013b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00142	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CI@KCELDBAK@?$AAc?$AA?9?$AA?$DO?$AAh?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAt?$AA?9?$AA?$DO?$AAc?$AAt?$AAx?$AA_?$AAh?$AAe?$AAa?$AAp?$AA?$AA@
  00149	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0014f	33 c0		 xor	 eax, eax
$LN9@PyParallel@5:

; 171  : 
; 172  :     c->h = t->ctx_heap;

  00151	48 8b 44 24 20	 mov	 rax, QWORD PTR c$[rsp]
  00156	48 8b 4c 24 28	 mov	 rcx, QWORD PTR t$[rsp]
  0015b	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  0015f	48 89 88 d0 00
	00 00		 mov	 QWORD PTR [rax+208], rcx

; 173  :     t->ctx_heap = NULL;

  00166	48 8b 44 24 28	 mov	 rax, QWORD PTR t$[rsp]
  0016b	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0
$LN4@PyParallel@5:

; 174  : }

  00173	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00177	c3		 ret	 0
_PyParallel_DisableTLSHeap ENDP
_TEXT	ENDS
PUBLIC	_PyParallel_GetCurrentThreadState
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyParallel_GetCurrentThreadState DD imagerel $LN3
	DD	imagerel $LN3+14
	DD	imagerel $unwind$_PyParallel_GetCurrentThreadState
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyParallel_GetCurrentThreadState DD 010401H
	DD	04204H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _PyParallel_GetCurrentThreadState
_TEXT	SEGMENT
_PyParallel_GetCurrentThreadState PROC			; COMDAT

; 207  : {

$LN3:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 208  :     return get_main_thread_state();

  00004	e8 00 00 00 00	 call	 get_main_thread_state

; 209  : }

  00009	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0000d	c3		 ret	 0
_PyParallel_GetCurrentThreadState ENDP
_TEXT	ENDS
EXTRN	_PyThreadState_Current:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$get_main_thread_state DD imagerel get_main_thread_state
	DD	imagerel get_main_thread_state+65
	DD	imagerel $unwind$get_main_thread_state
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$get_main_thread_state DD 010401H
	DD	02204H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT get_main_thread_state
_TEXT	SEGMENT
tstate$ = 0
get_main_thread_state PROC				; COMDAT

; 195  : {

  00000	48 83 ec 18	 sub	 rsp, 24

; 196  :     PyThreadState *tstate;
; 197  : 
; 198  :     tstate = (PyThreadState *)_Py_atomic_load_relaxed(&_PyThreadState_Current);

  00004	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyThreadState_Current
  0000b	48 89 04 24	 mov	 QWORD PTR tstate$[rsp], rax

; 199  :     if (!tstate)

  0000f	48 83 3c 24 00	 cmp	 QWORD PTR tstate$[rsp], 0
  00014	75 22		 jne	 SHORT $LN1@get_main_t

; 200  :         tstate = TSTATE;

  00016	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:TSTATE
  0001b	8b c0		 mov	 eax, eax
  0001d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00023	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0002c	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  00030	48 8b 04 08	 mov	 rax, QWORD PTR [rax+rcx]
  00034	48 89 04 24	 mov	 QWORD PTR tstate$[rsp], rax
$LN1@get_main_t:

; 201  :     //assert(tstate);
; 202  :     return tstate;

  00038	48 8b 04 24	 mov	 rax, QWORD PTR tstate$[rsp]

; 203  : }

  0003c	48 83 c4 18	 add	 rsp, 24
  00040	c3		 ret	 0
get_main_thread_state ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CC@KKBNEAJH@Context?5heap?5snapshots?5exhausted@ ; `string'
PUBLIC	??_C@_1CK@ODAODKCA@?$AAh?$AA?9?$AA?$DO?$AAb?$AAi?$AAt?$AAm?$AAa?$AAp?$AA_?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAi?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DE@FCGGLNFG@?$AA?$CB?$AAp?$AAr?$AAe?$AAv?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AA?$CI?$AAp?$AAr?$AAe?$AAv?$AA?9?$AA?$DO?$AAc?$AAt?$AAx?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAc?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	PxContext_HeapSnapshot
EXTRN	memcpy:PROC
EXTRN	__imp_LeaveCriticalSection:PROC
EXTRN	__imp_EnterCriticalSection:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PxContext_HeapSnapshot DD imagerel $LN9
	DD	imagerel $LN9+496
	DD	imagerel $unwind$PxContext_HeapSnapshot
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PxContext_HeapSnapshot DD 010e01H
	DD	0a20eH
xdata	ENDS
;	COMDAT ??_C@_0CC@KKBNEAJH@Context?5heap?5snapshots?5exhausted@
CONST	SEGMENT
??_C@_0CC@KKBNEAJH@Context?5heap?5snapshots?5exhausted@ DB 'Context heap '
	DB	'snapshots exhausted!', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@ODAODKCA@?$AAh?$AA?9?$AA?$DO?$AAb?$AAi?$AAt?$AAm?$AAa?$AAp?$AA_?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAi?$AA?$AA@
CONST	SEGMENT
??_C@_1CK@ODAODKCA@?$AAh?$AA?9?$AA?$DO?$AAb?$AAi?$AAt?$AAm?$AAa?$AAp?$AA_?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAi?$AA?$AA@ DB 'h'
	DB	00H, '-', 00H, '>', 00H, 'b', 00H, 'i', 00H, 't', 00H, 'm', 00H
	DB	'a', 00H, 'p', 00H, '_', 00H, 'i', 00H, 'n', 00H, 'd', 00H, 'e'
	DB	00H, 'x', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'i', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1DE@FCGGLNFG@?$AA?$CB?$AAp?$AAr?$AAe?$AAv?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AA?$CI?$AAp?$AAr?$AAe?$AAv?$AA?9?$AA?$DO?$AAc?$AAt?$AAx?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAc?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DE@FCGGLNFG@?$AA?$CB?$AAp?$AAr?$AAe?$AAv?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AA?$CI?$AAp?$AAr?$AAe?$AAv?$AA?9?$AA?$DO?$AAc?$AAt?$AAx?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAc?$AA?$CJ?$AA?$AA@ DB '!'
	DB	00H, 'p', 00H, 'r', 00H, 'e', 00H, 'v', 00H, ' ', 00H, '|', 00H
	DB	'|', 00H, ' ', 00H, '(', 00H, 'p', 00H, 'r', 00H, 'e', 00H, 'v'
	DB	00H, '-', 00H, '>', 00H, 'c', 00H, 't', 00H, 'x', 00H, ' ', 00H
	DB	'=', 00H, '=', 00H, ' ', 00H, 'c', 00H, ')', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PxContext_HeapSnapshot
_TEXT	SEGMENT
h$ = 32
i$ = 40
bitmap$ = 48
tv167 = 56
tv142 = 64
c$ = 96
prev$ = 104
PxContext_HeapSnapshot PROC				; COMDAT

; 281  : {

$LN9:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 282  :     Heap *h = NULL;

  0000e	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR h$[rsp], 0

; 283  :     Px_UINTPTR bitmap = Px_PTR(c->snapshots_bitmap);

  00017	48 8b 44 24 60	 mov	 rax, QWORD PTR c$[rsp]
  0001c	48 8b 80 20 02
	00 00		 mov	 rax, QWORD PTR [rax+544]
  00023	48 89 44 24 30	 mov	 QWORD PTR bitmap$[rsp], rax

; 284  :     unsigned long i = 0;

  00028	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0

; 285  : 
; 286  :     assert(!prev || (prev->ctx == c));

  00030	48 83 7c 24 68
	00		 cmp	 QWORD PTR prev$[rsp], 0
  00036	74 2c		 je	 SHORT $LN7@PxContext_
  00038	48 8b 44 24 68	 mov	 rax, QWORD PTR prev$[rsp]
  0003d	48 8b 4c 24 60	 mov	 rcx, QWORD PTR c$[rsp]
  00042	48 39 48 58	 cmp	 QWORD PTR [rax+88], rcx
  00046	74 1c		 je	 SHORT $LN7@PxContext_
  00048	41 b8 1e 01 00
	00		 mov	 r8d, 286		; 0000011eH
  0004e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00055	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@FCGGLNFG@?$AA?$CB?$AAp?$AAr?$AAe?$AAv?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AA?$CI?$AAp?$AAr?$AAe?$AAv?$AA?9?$AA?$DO?$AAc?$AAt?$AAx?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAc?$AA?$CJ?$AA?$AA@
  0005c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00062	33 c0		 xor	 eax, eax
$LN7@PxContext_:

; 287  : 
; 288  :     EnterCriticalSection(&c->heap_cs);

  00064	48 8b 44 24 60	 mov	 rax, QWORD PTR c$[rsp]
  00069	48 05 c8 01 00
	00		 add	 rax, 456		; 000001c8H
  0006f	48 8b c8	 mov	 rcx, rax
  00072	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_EnterCriticalSection

; 289  :     EnterCriticalSection(&c->snapshots_cs);

  00078	48 8b 44 24 60	 mov	 rax, QWORD PTR c$[rsp]
  0007d	48 05 f8 01 00
	00		 add	 rax, 504		; 000001f8H
  00083	48 8b c8	 mov	 rcx, rax
  00086	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_EnterCriticalSection

; 290  : 
; 291  :     if (_tls_bitscan_fwd(&i, bitmap))

  0008c	48 8b 44 24 30	 mov	 rax, QWORD PTR bitmap$[rsp]
  00091	48 0f bc c0	 bsf	 rax, rax
  00095	89 44 24 28	 mov	 DWORD PTR i$[rsp], eax
  00099	0f 95 c0	 setne	 al
  0009c	0f b6 c0	 movzx	 eax, al
  0009f	85 c0		 test	 eax, eax
  000a1	74 16		 je	 SHORT $LN4@PxContext_

; 292  :         h = c->snapshots[i];

  000a3	8b 44 24 28	 mov	 eax, DWORD PTR i$[rsp]
  000a7	48 8b 4c 24 60	 mov	 rcx, QWORD PTR c$[rsp]
  000ac	48 8b 84 c1 28
	02 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+552]
  000b4	48 89 44 24 20	 mov	 QWORD PTR h$[rsp], rax
$LN4@PxContext_:

; 293  : 
; 294  :     if (h) {

  000b9	48 83 7c 24 20
	00		 cmp	 QWORD PTR h$[rsp], 0
  000bf	74 5a		 je	 SHORT $LN3@PxContext_

; 295  :         assert(h->bitmap_index == i);

  000c1	48 8b 44 24 20	 mov	 rax, QWORD PTR h$[rsp]
  000c6	0f be 80 b0 00
	00 00		 movsx	 eax, BYTE PTR [rax+176]
  000cd	3b 44 24 28	 cmp	 eax, DWORD PTR i$[rsp]
  000d1	74 1c		 je	 SHORT $LN8@PxContext_
  000d3	41 b8 27 01 00
	00		 mov	 r8d, 295		; 00000127H
  000d9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  000e0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@ODAODKCA@?$AAh?$AA?9?$AA?$DO?$AAb?$AAi?$AAt?$AAm?$AAa?$AAp?$AA_?$AAi?$AAn?$AAd?$AAe?$AAx?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAi?$AA?$AA@
  000e7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000ed	33 c0		 xor	 eax, eax
$LN8@PxContext_:

; 296  :         _tls_interlocked_and(&c->snapshots_bitmap, ~(Px_UINTPTR_1 << i));

  000ef	8b 44 24 28	 mov	 eax, DWORD PTR i$[rsp]
  000f3	b9 01 00 00 00	 mov	 ecx, 1
  000f8	48 89 4c 24 38	 mov	 QWORD PTR tv167[rsp], rcx
  000fd	0f b6 c8	 movzx	 ecx, al
  00100	48 8b 44 24 38	 mov	 rax, QWORD PTR tv167[rsp]
  00105	48 d3 e0	 shl	 rax, cl
  00108	48 f7 d0	 not	 rax
  0010b	48 8b 4c 24 60	 mov	 rcx, QWORD PTR c$[rsp]
  00110	48 81 c1 20 02
	00 00		 add	 rcx, 544		; 00000220H
  00117	f0 48 21 01	 lock and QWORD PTR [rcx], rax
$LN3@PxContext_:

; 297  :     }
; 298  : 
; 299  :     LeaveCriticalSection(&c->snapshots_cs);

  0011b	48 8b 44 24 60	 mov	 rax, QWORD PTR c$[rsp]
  00120	48 05 f8 01 00
	00		 add	 rax, 504		; 000001f8H
  00126	48 8b c8	 mov	 rcx, rax
  00129	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_LeaveCriticalSection

; 300  : 
; 301  :     if (!h)

  0012f	48 83 7c 24 20
	00		 cmp	 QWORD PTR h$[rsp], 0
  00135	75 0c		 jne	 SHORT $LN2@PxContext_

; 302  :         Py_FatalError("Context heap snapshots exhausted!");

  00137	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CC@KKBNEAJH@Context?5heap?5snapshots?5exhausted@
  0013e	e8 00 00 00 00	 call	 Py_FatalError
$LN2@PxContext_:

; 303  : 
; 304  :     memcpy(h, c->h, PxHeap_SNAPSHOT_COPY_SIZE);

  00143	41 b8 a8 00 00
	00		 mov	 r8d, 168		; 000000a8H
  00149	48 8b 44 24 60	 mov	 rax, QWORD PTR c$[rsp]
  0014e	48 8b 90 d0 00
	00 00		 mov	 rdx, QWORD PTR [rax+208]
  00155	48 8b 4c 24 20	 mov	 rcx, QWORD PTR h$[rsp]
  0015a	e8 00 00 00 00	 call	 memcpy

; 305  :     h->snapshot_id = ++c->snapshot_id;

  0015f	48 8b 44 24 60	 mov	 rax, QWORD PTR c$[rsp]
  00164	48 8b 80 f0 01
	00 00		 mov	 rax, QWORD PTR [rax+496]
  0016b	48 ff c0	 inc	 rax
  0016e	48 89 44 24 40	 mov	 QWORD PTR tv142[rsp], rax
  00173	48 8b 44 24 60	 mov	 rax, QWORD PTR c$[rsp]
  00178	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tv142[rsp]
  0017d	48 89 88 f0 01
	00 00		 mov	 QWORD PTR [rax+496], rcx
  00184	48 8b 44 24 20	 mov	 rax, QWORD PTR h$[rsp]
  00189	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tv142[rsp]
  0018e	48 89 88 a8 00
	00 00		 mov	 QWORD PTR [rax+168], rcx

; 306  :     if (prev) {

  00195	48 83 7c 24 68
	00		 cmp	 QWORD PTR prev$[rsp], 0
  0019b	74 28		 je	 SHORT $LN1@PxContext_

; 307  :         h->sle_prev = prev;

  0019d	48 8b 44 24 20	 mov	 rax, QWORD PTR h$[rsp]
  001a2	48 8b 4c 24 68	 mov	 rcx, QWORD PTR prev$[rsp]
  001a7	48 89 08	 mov	 QWORD PTR [rax], rcx

; 308  :         h->sle_next = NULL;

  001aa	48 8b 44 24 20	 mov	 rax, QWORD PTR h$[rsp]
  001af	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0

; 309  :         prev->sle_next = h;

  001b7	48 8b 44 24 68	 mov	 rax, QWORD PTR prev$[rsp]
  001bc	48 8b 4c 24 20	 mov	 rcx, QWORD PTR h$[rsp]
  001c1	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
$LN1@PxContext_:

; 310  :     }
; 311  :     h->sle_next = NULL;

  001c5	48 8b 44 24 20	 mov	 rax, QWORD PTR h$[rsp]
  001ca	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0

; 312  : 
; 313  :     LeaveCriticalSection(&c->heap_cs);

  001d2	48 8b 44 24 60	 mov	 rax, QWORD PTR c$[rsp]
  001d7	48 05 c8 01 00
	00		 add	 rax, 456		; 000001c8H
  001dd	48 8b c8	 mov	 rcx, rax
  001e0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_LeaveCriticalSection

; 314  : 
; 315  :     return h;

  001e6	48 8b 44 24 20	 mov	 rax, QWORD PTR h$[rsp]

; 316  : }

  001eb	48 83 c4 58	 add	 rsp, 88			; 00000058H
  001ef	c3		 ret	 0
PxContext_HeapSnapshot ENDP
_TEXT	ENDS
PUBLIC	??_C@_1EM@CNLFGLPH@?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$DM?$AA?5?$AAP?$AAx?$AA_?$AAL?$AAA?$AAR?$AAG?$AAE?$AA_?$AAP?$AAA?$AAG?$AAE@ ; `string'
PUBLIC	??_C@_1CG@NKBCBHHD@?$AAh?$AA1?$AA?9?$AA?$DO?$AAc?$AAt?$AAx?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAh?$AA2?$AA?9?$AA?$DO?$AAc?$AAt?$AAx?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CG@FNIKEDBD@?$AAh?$AA1?$AA?9?$AA?$DO?$AAs?$AAl?$AAe?$AA_?$AAn?$AAe?$AAx?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAh?$AA2?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CG@BCLABKOE@?$AAh?$AA2?$AA?9?$AA?$DO?$AAs?$AAl?$AAe?$AA_?$AAp?$AAr?$AAe?$AAv?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAh?$AA1?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BM@DIKHIDKA@?$AA?$CB?$AAh?$AA2?$AA?9?$AA?$DO?$AAs?$AAl?$AAe?$AA_?$AAn?$AAe?$AAx?$AAt?$AA?$AA@ ; `string'
PUBLIC	??_C@_15PALIODEB@?$AAh?$AA2?$AA?$AA@		; `string'
PUBLIC	??_C@_13COJANIEC@?$AA0?$AA?$AA@			; `string'
PUBLIC	??_C@_1BC@PCADLOGK@?$AAc?$AAt?$AAx?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAc?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BK@LNNNCCBB@?$AAh?$AA1?$AA?9?$AA?$DO?$AAc?$AAt?$AAx?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAc?$AA?$AA@ ; `string'
PUBLIC	PxContext_RollbackHeap
EXTRN	memset:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PxContext_RollbackHeap DD imagerel $LN24
	DD	imagerel $LN24+1187
	DD	imagerel $unwind$PxContext_RollbackHeap
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PxContext_RollbackHeap DD 021101H
	DD	0110111H
xdata	ENDS
;	COMDAT ??_C@_1EM@CNLFGLPH@?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$DM?$AA?5?$AAP?$AAx?$AA_?$AAL?$AAA?$AAR?$AAG?$AAE?$AA_?$AAP?$AAA?$AAG?$AAE@
CONST	SEGMENT
??_C@_1EM@CNLFGLPH@?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$DM?$AA?5?$AAP?$AAx?$AA_?$AAL?$AAA?$AAR?$AAG?$AAE?$AA_?$AAP?$AAA?$AAG?$AAE@ DB 's'
	DB	00H, 'i', 00H, 'z', 00H, 'e', 00H, ' ', 00H, '>', 00H, ' ', 00H
	DB	'0', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 's', 00H, 'i'
	DB	00H, 'z', 00H, 'e', 00H, ' ', 00H, '<', 00H, ' ', 00H, 'P', 00H
	DB	'x', 00H, '_', 00H, 'L', 00H, 'A', 00H, 'R', 00H, 'G', 00H, 'E'
	DB	00H, '_', 00H, 'P', 00H, 'A', 00H, 'G', 00H, 'E', 00H, '_', 00H
	DB	'S', 00H, 'I', 00H, 'Z', 00H, 'E', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@NKBCBHHD@?$AAh?$AA1?$AA?9?$AA?$DO?$AAc?$AAt?$AAx?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAh?$AA2?$AA?9?$AA?$DO?$AAc?$AAt?$AAx?$AA?$AA@
CONST	SEGMENT
??_C@_1CG@NKBCBHHD@?$AAh?$AA1?$AA?9?$AA?$DO?$AAc?$AAt?$AAx?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAh?$AA2?$AA?9?$AA?$DO?$AAc?$AAt?$AAx?$AA?$AA@ DB 'h'
	DB	00H, '1', 00H, '-', 00H, '>', 00H, 'c', 00H, 't', 00H, 'x', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'h', 00H, '2', 00H, '-'
	DB	00H, '>', 00H, 'c', 00H, 't', 00H, 'x', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@FNIKEDBD@?$AAh?$AA1?$AA?9?$AA?$DO?$AAs?$AAl?$AAe?$AA_?$AAn?$AAe?$AAx?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAh?$AA2?$AA?$AA@
CONST	SEGMENT
??_C@_1CG@FNIKEDBD@?$AAh?$AA1?$AA?9?$AA?$DO?$AAs?$AAl?$AAe?$AA_?$AAn?$AAe?$AAx?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAh?$AA2?$AA?$AA@ DB 'h'
	DB	00H, '1', 00H, '-', 00H, '>', 00H, 's', 00H, 'l', 00H, 'e', 00H
	DB	'_', 00H, 'n', 00H, 'e', 00H, 'x', 00H, 't', 00H, ' ', 00H, '='
	DB	00H, '=', 00H, ' ', 00H, 'h', 00H, '2', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@BCLABKOE@?$AAh?$AA2?$AA?9?$AA?$DO?$AAs?$AAl?$AAe?$AA_?$AAp?$AAr?$AAe?$AAv?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAh?$AA1?$AA?$AA@
CONST	SEGMENT
??_C@_1CG@BCLABKOE@?$AAh?$AA2?$AA?9?$AA?$DO?$AAs?$AAl?$AAe?$AA_?$AAp?$AAr?$AAe?$AAv?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAh?$AA1?$AA?$AA@ DB 'h'
	DB	00H, '2', 00H, '-', 00H, '>', 00H, 's', 00H, 'l', 00H, 'e', 00H
	DB	'_', 00H, 'p', 00H, 'r', 00H, 'e', 00H, 'v', 00H, ' ', 00H, '='
	DB	00H, '=', 00H, ' ', 00H, 'h', 00H, '1', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BM@DIKHIDKA@?$AA?$CB?$AAh?$AA2?$AA?9?$AA?$DO?$AAs?$AAl?$AAe?$AA_?$AAn?$AAe?$AAx?$AAt?$AA?$AA@
CONST	SEGMENT
??_C@_1BM@DIKHIDKA@?$AA?$CB?$AAh?$AA2?$AA?9?$AA?$DO?$AAs?$AAl?$AAe?$AA_?$AAn?$AAe?$AAx?$AAt?$AA?$AA@ DB '!'
	DB	00H, 'h', 00H, '2', 00H, '-', 00H, '>', 00H, 's', 00H, 'l', 00H
	DB	'e', 00H, '_', 00H, 'n', 00H, 'e', 00H, 'x', 00H, 't', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_15PALIODEB@?$AAh?$AA2?$AA?$AA@
CONST	SEGMENT
??_C@_15PALIODEB@?$AAh?$AA2?$AA?$AA@ DB 'h', 00H, '2', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_13COJANIEC@?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_13COJANIEC@?$AA0?$AA?$AA@ DB '0', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@PCADLOGK@?$AAc?$AAt?$AAx?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAc?$AA?$AA@
CONST	SEGMENT
??_C@_1BC@PCADLOGK@?$AAc?$AAt?$AAx?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAc?$AA?$AA@ DB 'c'
	DB	00H, 't', 00H, 'x', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H
	DB	'c', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1BK@LNNNCCBB@?$AAh?$AA1?$AA?9?$AA?$DO?$AAc?$AAt?$AAx?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAc?$AA?$AA@
CONST	SEGMENT
??_C@_1BK@LNNNCCBB@?$AAh?$AA1?$AA?9?$AA?$DO?$AAc?$AAt?$AAx?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAc?$AA?$AA@ DB 'h'
	DB	00H, '1', 00H, '-', 00H, '>', 00H, 'c', 00H, 't', 00H, 'x', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'c', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PxContext_RollbackHeap
_TEXT	SEGMENT
hstart$ = 32
h2$ = 40
h1$ = 48
tstart$ = 56
size$ = 64
next$ = 72
bitmap$ = 80
i$125748 = 88
tv196 = 96
tv314 = 104
tv318 = 112
c$ = 144
snapshot$ = 152
PxContext_RollbackHeap PROC				; COMDAT

; 320  : {

$LN24:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 321  :     Heap *h1, *h2;
; 322  :     void *tstart, *hstart, *next;
; 323  :     Px_UINTPTR bitmap = 0;

  00011	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR bitmap$[rsp], 0

; 324  :     size_t size;
; 325  : 
; 326  :     h1 = *snapshot;

  0001a	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR snapshot$[rsp]
  00022	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00025	48 89 44 24 30	 mov	 QWORD PTR h1$[rsp], rax

; 327  :     assert(h1->ctx == c);

  0002a	48 8b 44 24 30	 mov	 rax, QWORD PTR h1$[rsp]
  0002f	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  00037	48 39 48 58	 cmp	 QWORD PTR [rax+88], rcx
  0003b	74 1c		 je	 SHORT $LN11@PxContext_@2
  0003d	41 b8 47 01 00
	00		 mov	 r8d, 327		; 00000147H
  00043	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0004a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BK@LNNNCCBB@?$AAh?$AA1?$AA?9?$AA?$DO?$AAc?$AAt?$AAx?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAc?$AA?$AA@
  00051	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00057	33 c0		 xor	 eax, eax
$LN11@PxContext_@2:

; 328  :     assert(ctx == c);

  00059	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:ctx
  0005e	8b c0		 mov	 eax, eax
  00060	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00066	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0006f	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  00073	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR c$[rsp]
  0007b	48 39 14 08	 cmp	 QWORD PTR [rax+rcx], rdx
  0007f	74 1c		 je	 SHORT $LN12@PxContext_@2
  00081	41 b8 48 01 00
	00		 mov	 r8d, 328		; 00000148H
  00087	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0008e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BC@PCADLOGK@?$AAc?$AAt?$AAx?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAc?$AA?$AA@
  00095	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0009b	33 c0		 xor	 eax, eax
$LN12@PxContext_@2:

; 329  : 
; 330  :     EnterCriticalSection(&c->heap_cs);

  0009d	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  000a5	48 05 c8 01 00
	00		 add	 rax, 456		; 000001c8H
  000ab	48 8b c8	 mov	 rcx, rax
  000ae	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_EnterCriticalSection

; 331  :     EnterCriticalSection(&c->snapshots_cs);

  000b4	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  000bc	48 05 f8 01 00
	00		 add	 rax, 504		; 000001f8H
  000c2	48 8b c8	 mov	 rcx, rax
  000c5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_EnterCriticalSection

; 332  : 
; 333  :     h2 = h1->sle_next;

  000cb	48 8b 44 24 30	 mov	 rax, QWORD PTR h1$[rsp]
  000d0	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  000d4	48 89 44 24 28	 mov	 QWORD PTR h2$[rsp], rax

; 334  : 
; 335  :     if (!h2) {

  000d9	48 83 7c 24 28
	00		 cmp	 QWORD PTR h2$[rsp], 0
  000df	0f 85 85 00 00
	00		 jne	 $LN8@PxContext_@2

; 336  :         unsigned long i = 0;

  000e5	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR i$125748[rsp], 0

; 337  :         bitmap = Px_PTR(c->snapshots_bitmap);

  000ed	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  000f5	48 8b 80 20 02
	00 00		 mov	 rax, QWORD PTR [rax+544]
  000fc	48 89 44 24 50	 mov	 QWORD PTR bitmap$[rsp], rax

; 338  :         if (_tls_bitscan_fwd(&i, bitmap))

  00101	48 8b 44 24 50	 mov	 rax, QWORD PTR bitmap$[rsp]
  00106	48 0f bc c0	 bsf	 rax, rax
  0010a	89 44 24 58	 mov	 DWORD PTR i$125748[rsp], eax
  0010e	0f 95 c0	 setne	 al
  00111	0f b6 c0	 movzx	 eax, al
  00114	85 c0		 test	 eax, eax
  00116	74 19		 je	 SHORT $LN7@PxContext_@2

; 339  :             if (i == h1->bitmap_index+1)

  00118	48 8b 44 24 30	 mov	 rax, QWORD PTR h1$[rsp]
  0011d	0f be 80 b0 00
	00 00		 movsx	 eax, BYTE PTR [rax+176]
  00124	ff c0		 inc	 eax
  00126	39 44 24 58	 cmp	 DWORD PTR i$125748[rsp], eax
  0012a	75 05		 jne	 SHORT $LN6@PxContext_@2

; 340  :                 goto rollback;

  0012c	e9 bc 01 00 00	 jmp	 $rollback$125752
$LN6@PxContext_@2:
$LN7@PxContext_@2:

; 341  : 
; 342  :         assert(0);

  00131	33 c0		 xor	 eax, eax
  00133	85 c0		 test	 eax, eax
  00135	75 1c		 jne	 SHORT $LN13@PxContext_@2
  00137	41 b8 56 01 00
	00		 mov	 r8d, 342		; 00000156H
  0013d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00144	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_13COJANIEC@?$AA0?$AA?$AA@
  0014b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00151	33 c0		 xor	 eax, eax
$LN13@PxContext_@2:

; 343  :         h2 = PxContext_HeapSnapshot(c, h1);

  00153	48 8b 54 24 30	 mov	 rdx, QWORD PTR h1$[rsp]
  00158	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  00160	e8 00 00 00 00	 call	 PxContext_HeapSnapshot
  00165	48 89 44 24 28	 mov	 QWORD PTR h2$[rsp], rax
$LN8@PxContext_@2:

; 344  :     }
; 345  : 
; 346  :     assert(h2);

  0016a	48 83 7c 24 28
	00		 cmp	 QWORD PTR h2$[rsp], 0
  00170	75 1c		 jne	 SHORT $LN14@PxContext_@2
  00172	41 b8 5a 01 00
	00		 mov	 r8d, 346		; 0000015aH
  00178	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0017f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_15PALIODEB@?$AAh?$AA2?$AA?$AA@
  00186	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0018c	33 c0		 xor	 eax, eax
$LN14@PxContext_@2:

; 347  :     assert(!h2->sle_next);

  0018e	48 8b 44 24 28	 mov	 rax, QWORD PTR h2$[rsp]
  00193	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00198	74 1c		 je	 SHORT $LN15@PxContext_@2
  0019a	41 b8 5b 01 00
	00		 mov	 r8d, 347		; 0000015bH
  001a0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  001a7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BM@DIKHIDKA@?$AA?$CB?$AAh?$AA2?$AA?9?$AA?$DO?$AAs?$AAl?$AAe?$AA_?$AAn?$AAe?$AAx?$AAt?$AA?$AA@
  001ae	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001b4	33 c0		 xor	 eax, eax
$LN15@PxContext_@2:

; 348  :     assert(h2->sle_prev == h1);

  001b6	48 8b 44 24 28	 mov	 rax, QWORD PTR h2$[rsp]
  001bb	48 8b 4c 24 30	 mov	 rcx, QWORD PTR h1$[rsp]
  001c0	48 39 08	 cmp	 QWORD PTR [rax], rcx
  001c3	74 1c		 je	 SHORT $LN16@PxContext_@2
  001c5	41 b8 5c 01 00
	00		 mov	 r8d, 348		; 0000015cH
  001cb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  001d2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@BCLABKOE@?$AAh?$AA2?$AA?9?$AA?$DO?$AAs?$AAl?$AAe?$AA_?$AAp?$AAr?$AAe?$AAv?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAh?$AA1?$AA?$AA@
  001d9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001df	33 c0		 xor	 eax, eax
$LN16@PxContext_@2:

; 349  :     assert(h1->sle_next == h2);

  001e1	48 8b 44 24 30	 mov	 rax, QWORD PTR h1$[rsp]
  001e6	48 8b 4c 24 28	 mov	 rcx, QWORD PTR h2$[rsp]
  001eb	48 39 48 08	 cmp	 QWORD PTR [rax+8], rcx
  001ef	74 1c		 je	 SHORT $LN17@PxContext_@2
  001f1	41 b8 5d 01 00
	00		 mov	 r8d, 349		; 0000015dH
  001f7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  001fe	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@FNIKEDBD@?$AAh?$AA1?$AA?9?$AA?$DO?$AAs?$AAl?$AAe?$AA_?$AAn?$AAe?$AAx?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAh?$AA2?$AA?$AA@
  00205	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0020b	33 c0		 xor	 eax, eax
$LN17@PxContext_@2:

; 350  : 
; 351  :     assert(h1->ctx == h2->ctx);

  0020d	48 8b 44 24 30	 mov	 rax, QWORD PTR h1$[rsp]
  00212	48 8b 4c 24 28	 mov	 rcx, QWORD PTR h2$[rsp]
  00217	48 8b 49 58	 mov	 rcx, QWORD PTR [rcx+88]
  0021b	48 39 48 58	 cmp	 QWORD PTR [rax+88], rcx
  0021f	74 1c		 je	 SHORT $LN18@PxContext_@2
  00221	41 b8 5f 01 00
	00		 mov	 r8d, 351		; 0000015fH
  00227	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0022e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@NKBCBHHD@?$AAh?$AA1?$AA?9?$AA?$DO?$AAc?$AAt?$AAx?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAh?$AA2?$AA?9?$AA?$DO?$AAc?$AAt?$AAx?$AA?$AA@
  00235	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0023b	33 c0		 xor	 eax, eax
$LN18@PxContext_@2:

; 352  : 
; 353  :     if (h1->snapshot_id == h2->snapshot_id-1)

  0023d	48 8b 44 24 28	 mov	 rax, QWORD PTR h2$[rsp]
  00242	48 8b 80 a8 00
	00 00		 mov	 rax, QWORD PTR [rax+168]
  00249	48 ff c8	 dec	 rax
  0024c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR h1$[rsp]
  00251	48 39 81 a8 00
	00 00		 cmp	 QWORD PTR [rcx+168], rax
  00258	75 05		 jne	 SHORT $LN5@PxContext_@2

; 354  :         goto rollback;

  0025a	e9 8e 00 00 00	 jmp	 $rollback$125752
$LN5@PxContext_@2:

; 355  : 
; 356  :     if (_tls_popcnt(c->snapshots_bitmap) == 2)

  0025f	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  00267	f3 48 0f b8 80
	20 02 00 00	 popcnt	 rax, QWORD PTR [rax+544]
  00270	48 83 f8 02	 cmp	 rax, 2
  00274	75 02		 jne	 SHORT $LN4@PxContext_@2

; 357  :         goto rollback;

  00276	eb 75		 jmp	 SHORT $rollback$125752
$LN4@PxContext_@2:

; 358  : 
; 359  :     if (h1->id == h2->id && h1->id == c->h->id) {

  00278	48 8b 44 24 30	 mov	 rax, QWORD PTR h1$[rsp]
  0027d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR h2$[rsp]
  00282	8b 49 50	 mov	 ecx, DWORD PTR [rcx+80]
  00285	39 48 50	 cmp	 DWORD PTR [rax+80], ecx
  00288	75 3c		 jne	 SHORT $LN3@PxContext_@2
  0028a	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  00292	48 8b 80 d0 00
	00 00		 mov	 rax, QWORD PTR [rax+208]
  00299	48 8b 4c 24 30	 mov	 rcx, QWORD PTR h1$[rsp]
  0029e	8b 40 50	 mov	 eax, DWORD PTR [rax+80]
  002a1	39 41 50	 cmp	 DWORD PTR [rcx+80], eax
  002a4	75 20		 jne	 SHORT $LN3@PxContext_@2

; 360  :         if (h2->allocated == c->h->allocated)

  002a6	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  002ae	48 8b 80 d0 00
	00 00		 mov	 rax, QWORD PTR [rax+208]
  002b5	48 8b 4c 24 28	 mov	 rcx, QWORD PTR h2$[rsp]
  002ba	48 8b 40 40	 mov	 rax, QWORD PTR [rax+64]
  002be	48 39 41 40	 cmp	 QWORD PTR [rcx+64], rax
  002c2	75 02		 jne	 SHORT $LN2@PxContext_@2

; 361  :             goto rollback;

  002c4	eb 27		 jmp	 SHORT $rollback$125752
$LN2@PxContext_@2:
$LN3@PxContext_@2:

; 362  :     }
; 363  : 
; 364  :     /* xxx todo */
; 365  :     assert(0);

  002c6	33 c0		 xor	 eax, eax
  002c8	85 c0		 test	 eax, eax
  002ca	75 1c		 jne	 SHORT $LN19@PxContext_@2
  002cc	41 b8 6d 01 00
	00		 mov	 r8d, 365		; 0000016dH
  002d2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  002d9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_13COJANIEC@?$AA0?$AA?$AA@
  002e0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  002e6	33 c0		 xor	 eax, eax
$LN19@PxContext_@2:

; 366  :     return;

  002e8	e9 ae 01 00 00	 jmp	 $LN9@PxContext_@2
$rollback$125752:

; 367  : 
; 368  : rollback:
; 369  :     /* xxx todo: HeapFree() extra heaps if h1 != h2. */
; 370  : 
; 371  :     next = (h2 ? h2->next : c->h->next);

  002ed	48 83 7c 24 28
	00		 cmp	 QWORD PTR h2$[rsp], 0
  002f3	74 10		 je	 SHORT $LN20@PxContext_@2
  002f5	48 8b 44 24 28	 mov	 rax, QWORD PTR h2$[rsp]
  002fa	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  002fe	48 89 44 24 60	 mov	 QWORD PTR tv196[rsp], rax
  00303	eb 18		 jmp	 SHORT $LN21@PxContext_@2
$LN20@PxContext_@2:
  00305	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  0030d	48 8b 80 d0 00
	00 00		 mov	 rax, QWORD PTR [rax+208]
  00314	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  00318	48 89 44 24 60	 mov	 QWORD PTR tv196[rsp], rax
$LN21@PxContext_@2:
  0031d	48 8b 44 24 60	 mov	 rax, QWORD PTR tv196[rsp]
  00322	48 89 44 24 48	 mov	 QWORD PTR next$[rsp], rax

; 372  :     size = _Py_PTR(next) - _Py_PTR(h1->next);

  00327	48 8b 44 24 30	 mov	 rax, QWORD PTR h1$[rsp]
  0032c	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  00330	48 8b 4c 24 48	 mov	 rcx, QWORD PTR next$[rsp]
  00335	48 2b c8	 sub	 rcx, rax
  00338	48 8b c1	 mov	 rax, rcx
  0033b	48 89 44 24 40	 mov	 QWORD PTR size$[rsp], rax

; 373  :     assert(size > 0 && size < Px_LARGE_PAGE_SIZE);

  00340	48 83 7c 24 40
	00		 cmp	 QWORD PTR size$[rsp], 0
  00346	76 0b		 jbe	 SHORT $LN22@PxContext_@2
  00348	48 81 7c 24 40
	00 00 20 00	 cmp	 QWORD PTR size$[rsp], 2097152 ; 00200000H
  00351	72 1c		 jb	 SHORT $LN23@PxContext_@2
$LN22@PxContext_@2:
  00353	41 b8 75 01 00
	00		 mov	 r8d, 373		; 00000175H
  00359	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00360	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EM@CNLFGLPH@?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$DM?$AA?5?$AAP?$AAx?$AA_?$AAL?$AAA?$AAR?$AAG?$AAE?$AA_?$AAP?$AAA?$AAG?$AAE@
  00367	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0036d	33 c0		 xor	 eax, eax
$LN23@PxContext_@2:

; 374  :     memset(h1->next, 0, size);

  0036f	4c 8b 44 24 40	 mov	 r8, QWORD PTR size$[rsp]
  00374	33 d2		 xor	 edx, edx
  00376	48 8b 44 24 30	 mov	 rax, QWORD PTR h1$[rsp]
  0037b	48 8b 48 18	 mov	 rcx, QWORD PTR [rax+24]
  0037f	e8 00 00 00 00	 call	 memset

; 375  : 
; 376  :     /* skip sle_prev and sle_next */
; 377  :     tstart = _Py_CAST_FWD(c->h, void *, Heap, base);

  00384	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  0038c	48 8b 80 d0 00
	00 00		 mov	 rax, QWORD PTR [rax+208]
  00393	48 83 c0 10	 add	 rax, 16
  00397	48 89 44 24 38	 mov	 QWORD PTR tstart$[rsp], rax

; 378  :     hstart = _Py_CAST_FWD(h1,   void *, Heap, base);

  0039c	48 8b 44 24 30	 mov	 rax, QWORD PTR h1$[rsp]
  003a1	48 83 c0 10	 add	 rax, 16
  003a5	48 89 44 24 20	 mov	 QWORD PTR hstart$[rsp], rax

; 379  :     size = PxHeap_SNAPSHOT_COPY_SIZE - _Py_PTR_SUB(tstart, c->h);

  003aa	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  003b2	48 8b 80 d0 00
	00 00		 mov	 rax, QWORD PTR [rax+208]
  003b9	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tstart$[rsp]
  003be	48 2b c8	 sub	 rcx, rax
  003c1	48 8b c1	 mov	 rax, rcx
  003c4	b9 a8 00 00 00	 mov	 ecx, 168		; 000000a8H
  003c9	48 2b c8	 sub	 rcx, rax
  003cc	48 8b c1	 mov	 rax, rcx
  003cf	48 89 44 24 40	 mov	 QWORD PTR size$[rsp], rax

; 380  :     memcpy(tstart, hstart, size);

  003d4	4c 8b 44 24 40	 mov	 r8, QWORD PTR size$[rsp]
  003d9	48 8b 54 24 20	 mov	 rdx, QWORD PTR hstart$[rsp]
  003de	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tstart$[rsp]
  003e3	e8 00 00 00 00	 call	 memcpy

; 381  : 
; 382  :     bitmap = (Px_UINTPTR_1 << h1->bitmap_index);

  003e8	48 8b 44 24 30	 mov	 rax, QWORD PTR h1$[rsp]
  003ed	0f be 80 b0 00
	00 00		 movsx	 eax, BYTE PTR [rax+176]
  003f4	b9 01 00 00 00	 mov	 ecx, 1
  003f9	48 89 4c 24 68	 mov	 QWORD PTR tv314[rsp], rcx
  003fe	0f b6 c8	 movzx	 ecx, al
  00401	48 8b 44 24 68	 mov	 rax, QWORD PTR tv314[rsp]
  00406	48 d3 e0	 shl	 rax, cl
  00409	48 89 44 24 50	 mov	 QWORD PTR bitmap$[rsp], rax

; 383  :     if (h2)

  0040e	48 83 7c 24 28
	00		 cmp	 QWORD PTR h2$[rsp], 0
  00414	74 31		 je	 SHORT $LN1@PxContext_@2

; 384  :         bitmap |= (Px_UINTPTR_1 << h2->bitmap_index);

  00416	48 8b 44 24 28	 mov	 rax, QWORD PTR h2$[rsp]
  0041b	0f be 80 b0 00
	00 00		 movsx	 eax, BYTE PTR [rax+176]
  00422	b9 01 00 00 00	 mov	 ecx, 1
  00427	48 89 4c 24 70	 mov	 QWORD PTR tv318[rsp], rcx
  0042c	0f b6 c8	 movzx	 ecx, al
  0042f	48 8b 44 24 70	 mov	 rax, QWORD PTR tv318[rsp]
  00434	48 d3 e0	 shl	 rax, cl
  00437	48 8b 4c 24 50	 mov	 rcx, QWORD PTR bitmap$[rsp]
  0043c	48 0b c8	 or	 rcx, rax
  0043f	48 8b c1	 mov	 rax, rcx
  00442	48 89 44 24 50	 mov	 QWORD PTR bitmap$[rsp], rax
$LN1@PxContext_@2:

; 385  : 
; 386  :     _tls_interlocked_or(&c->snapshots_bitmap, bitmap);

  00447	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  0044f	48 05 20 02 00
	00		 add	 rax, 544		; 00000220H
  00455	48 8b 4c 24 50	 mov	 rcx, QWORD PTR bitmap$[rsp]
  0045a	f0 48 09 08	 lock or QWORD PTR [rax], rcx

; 387  : 
; 388  :     *snapshot = NULL;

  0045e	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR snapshot$[rsp]
  00466	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 389  : 
; 390  :     LeaveCriticalSection(&c->snapshots_cs);

  0046d	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  00475	48 05 f8 01 00
	00		 add	 rax, 504		; 000001f8H
  0047b	48 8b c8	 mov	 rcx, rax
  0047e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_LeaveCriticalSection

; 391  :     LeaveCriticalSection(&c->heap_cs);

  00484	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  0048c	48 05 c8 01 00
	00		 add	 rax, 456		; 000001c8H
  00492	48 8b c8	 mov	 rcx, rax
  00495	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_LeaveCriticalSection
$LN9@PxContext_@2:

; 392  : 
; 393  :     return;
; 394  : }

  0049b	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  004a2	c3		 ret	 0
PxContext_RollbackHeap ENDP
_TEXT	ENDS
PUBLIC	_PyHeap_Malloc
PUBLIC	??_C@_1HC@LNIIIEBO@?$AA?$CI?$AA?$CB?$AAl?$AAe?$AAn?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CB?$AAb?$AAu?$AAf?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AA?$CJ?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AA?$CI?$AA?5?$AAl?$AAe?$AAn?$AA?5?$AA?$CG?$AA?$CG?$AA?5@ ; `string'
PUBLIC	??_C@_1DG@FIOFPEII@?$AAc?$AA?9?$AA?$DO?$AAi?$AAo?$AA_?$AAo?$AAb?$AAj?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA?$CI?$AAP?$AAy?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?5?$AA?$CK?$AA?$CJ?$AAs?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BI@FADBJKJH@?$AAs?$AA?9?$AA?$DO?$AAc?$AAt?$AAx?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAc?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BC@DLDNDONE@?$AAc?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAc?$AAt?$AAx?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CI@OFAJJFHP@?$AA?$CB?$AAs?$AAn?$AAa?$AAp?$AAs?$AAh?$AAo?$AAt?$AA?9?$AA?$DO?$AAs?$AAl?$AAe?$AA_?$AAn?$AAe?$AAx?$AAt?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CI@LPFBMFNI@?$AA?$CB?$AAs?$AAn?$AAa?$AAp?$AAs?$AAh?$AAo?$AAt?$AA?9?$AA?$DO?$AAs?$AAl?$AAe?$AA_?$AAp?$AAr?$AAe?$AAv?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BC@JENOOCMO@?$AAs?$AAn?$AAa?$AAp?$AAs?$AAh?$AAo?$AAt?$AA?$AA@ ; `string'
PUBLIC	??_C@_1O@EGDLIBPP@?$AA?$CB?$AA?$CK?$AAs?$AAb?$AAu?$AAf?$AA?$AA@ ; `string'
PUBLIC	PxSocket_NEW_SBUF
;	COMDAT pdata
pdata	SEGMENT
$pdata$PxSocket_NEW_SBUF DD imagerel $LN20
	DD	imagerel $LN20+760
	DD	imagerel $unwind$PxSocket_NEW_SBUF
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PxSocket_NEW_SBUF DD 011801H
	DD	08218H
xdata	ENDS
;	COMDAT ??_C@_1HC@LNIIIEBO@?$AA?$CI?$AA?$CB?$AAl?$AAe?$AAn?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CB?$AAb?$AAu?$AAf?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AA?$CJ?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AA?$CI?$AA?5?$AAl?$AAe?$AAn?$AA?5?$AA?$CG?$AA?$CG?$AA?5@
CONST	SEGMENT
??_C@_1HC@LNIIIEBO@?$AA?$CI?$AA?$CB?$AAl?$AAe?$AAn?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CB?$AAb?$AAu?$AAf?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AA?$CJ?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AA?$CI?$AA?5?$AAl?$AAe?$AAn?$AA?5?$AA?$CG?$AA?$CG?$AA?5@ DB '('
	DB	00H, '!', 00H, 'l', 00H, 'e', 00H, 'n', 00H, ' ', 00H, '&', 00H
	DB	'&', 00H, ' ', 00H, '!', 00H, 'b', 00H, 'u', 00H, 'f', 00H, ' '
	DB	00H, '&', 00H, '&', 00H, ' ', 00H, 'o', 00H, ')', 00H, ' ', 00H
	DB	'|', 00H, '|', 00H, ' ', 00H, '(', 00H, ' ', 00H, 'l', 00H, 'e'
	DB	00H, 'n', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'b', 00H
	DB	'u', 00H, 'f', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, '!'
	DB	00H, 'o', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, '(', 00H
	DB	'*', 00H, 'l', 00H, 'e', 00H, 'n', 00H, ' ', 00H, '>', 00H, ' '
	DB	00H, '0', 00H, ')', 00H, ')', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1DG@FIOFPEII@?$AAc?$AA?9?$AA?$DO?$AAi?$AAo?$AA_?$AAo?$AAb?$AAj?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA?$CI?$AAP?$AAy?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?5?$AA?$CK?$AA?$CJ?$AAs?$AA?$AA@
CONST	SEGMENT
??_C@_1DG@FIOFPEII@?$AAc?$AA?9?$AA?$DO?$AAi?$AAo?$AA_?$AAo?$AAb?$AAj?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA?$CI?$AAP?$AAy?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?5?$AA?$CK?$AA?$CJ?$AAs?$AA?$AA@ DB 'c'
	DB	00H, '-', 00H, '>', 00H, 'i', 00H, 'o', 00H, '_', 00H, 'o', 00H
	DB	'b', 00H, 'j', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '('
	DB	00H, 'P', 00H, 'y', 00H, 'O', 00H, 'b', 00H, 'j', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, ' ', 00H, '*', 00H, ')', 00H, 's', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1BI@FADBJKJH@?$AAs?$AA?9?$AA?$DO?$AAc?$AAt?$AAx?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAc?$AA?$AA@
CONST	SEGMENT
??_C@_1BI@FADBJKJH@?$AAs?$AA?9?$AA?$DO?$AAc?$AAt?$AAx?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAc?$AA?$AA@ DB 's'
	DB	00H, '-', 00H, '>', 00H, 'c', 00H, 't', 00H, 'x', 00H, ' ', 00H
	DB	'=', 00H, '=', 00H, ' ', 00H, 'c', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@DLDNDONE@?$AAc?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAc?$AAt?$AAx?$AA?$AA@
CONST	SEGMENT
??_C@_1BC@DLDNDONE@?$AAc?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAc?$AAt?$AAx?$AA?$AA@ DB 'c'
	DB	00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'c', 00H, 't', 00H
	DB	'x', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CI@OFAJJFHP@?$AA?$CB?$AAs?$AAn?$AAa?$AAp?$AAs?$AAh?$AAo?$AAt?$AA?9?$AA?$DO?$AAs?$AAl?$AAe?$AA_?$AAn?$AAe?$AAx?$AAt?$AA?$AA@
CONST	SEGMENT
??_C@_1CI@OFAJJFHP@?$AA?$CB?$AAs?$AAn?$AAa?$AAp?$AAs?$AAh?$AAo?$AAt?$AA?9?$AA?$DO?$AAs?$AAl?$AAe?$AA_?$AAn?$AAe?$AAx?$AAt?$AA?$AA@ DB '!'
	DB	00H, 's', 00H, 'n', 00H, 'a', 00H, 'p', 00H, 's', 00H, 'h', 00H
	DB	'o', 00H, 't', 00H, '-', 00H, '>', 00H, 's', 00H, 'l', 00H, 'e'
	DB	00H, '_', 00H, 'n', 00H, 'e', 00H, 'x', 00H, 't', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CI@LPFBMFNI@?$AA?$CB?$AAs?$AAn?$AAa?$AAp?$AAs?$AAh?$AAo?$AAt?$AA?9?$AA?$DO?$AAs?$AAl?$AAe?$AA_?$AAp?$AAr?$AAe?$AAv?$AA?$AA@
CONST	SEGMENT
??_C@_1CI@LPFBMFNI@?$AA?$CB?$AAs?$AAn?$AAa?$AAp?$AAs?$AAh?$AAo?$AAt?$AA?9?$AA?$DO?$AAs?$AAl?$AAe?$AA_?$AAp?$AAr?$AAe?$AAv?$AA?$AA@ DB '!'
	DB	00H, 's', 00H, 'n', 00H, 'a', 00H, 'p', 00H, 's', 00H, 'h', 00H
	DB	'o', 00H, 't', 00H, '-', 00H, '>', 00H, 's', 00H, 'l', 00H, 'e'
	DB	00H, '_', 00H, 'p', 00H, 'r', 00H, 'e', 00H, 'v', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@JENOOCMO@?$AAs?$AAn?$AAa?$AAp?$AAs?$AAh?$AAo?$AAt?$AA?$AA@
CONST	SEGMENT
??_C@_1BC@JENOOCMO@?$AAs?$AAn?$AAa?$AAp?$AAs?$AAh?$AAo?$AAt?$AA?$AA@ DB 's'
	DB	00H, 'n', 00H, 'a', 00H, 'p', 00H, 's', 00H, 'h', 00H, 'o', 00H
	DB	't', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1O@EGDLIBPP@?$AA?$CB?$AA?$CK?$AAs?$AAb?$AAu?$AAf?$AA?$AA@
CONST	SEGMENT
??_C@_1O@EGDLIBPP@?$AA?$CB?$AA?$CK?$AAs?$AAb?$AAu?$AAf?$AA?$AA@ DB '!', 00H
	DB	'*', 00H, 's', 00H, 'b', 00H, 'u', 00H, 'f', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PxSocket_NEW_SBUF
_TEXT	SEGMENT
w$ = 32
b$ = 48
nbytes$ = 56
c$ = 80
s$ = 88
snapshot$ = 96
len$ = 104
buf$ = 112
o$ = 120
sbuf$ = 128
copy_buf$ = 136
PxSocket_NEW_SBUF PROC					; COMDAT

; 443  : {

$LN20:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 444  :     DWORD  nbytes;
; 445  :     WSABUF w;
; 446  :     SBUF *b;
; 447  :     assert(!*sbuf);

  00018	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR sbuf$[rsp]
  00020	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00024	74 1c		 je	 SHORT $LN10@PxSocket_N
  00026	41 b8 bf 01 00
	00		 mov	 r8d, 447		; 000001bfH
  0002c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00033	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1O@EGDLIBPP@?$AA?$CB?$AA?$CK?$AAs?$AAb?$AAu?$AAf?$AA?$AA@
  0003a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00040	33 c0		 xor	 eax, eax
$LN10@PxSocket_N:

; 448  :     assert(snapshot);

  00042	48 83 7c 24 60
	00		 cmp	 QWORD PTR snapshot$[rsp], 0
  00048	75 1c		 jne	 SHORT $LN11@PxSocket_N
  0004a	41 b8 c0 01 00
	00		 mov	 r8d, 448		; 000001c0H
  00050	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00057	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BC@JENOOCMO@?$AAs?$AAn?$AAa?$AAp?$AAs?$AAh?$AAo?$AAt?$AA?$AA@
  0005e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00064	33 c0		 xor	 eax, eax
$LN11@PxSocket_N:

; 449  :     assert(!snapshot->sle_prev);

  00066	48 8b 44 24 60	 mov	 rax, QWORD PTR snapshot$[rsp]
  0006b	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0006f	74 1c		 je	 SHORT $LN12@PxSocket_N
  00071	41 b8 c1 01 00
	00		 mov	 r8d, 449		; 000001c1H
  00077	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0007e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CI@LPFBMFNI@?$AA?$CB?$AAs?$AAn?$AAa?$AAp?$AAs?$AAh?$AAo?$AAt?$AA?9?$AA?$DO?$AAs?$AAl?$AAe?$AA_?$AAp?$AAr?$AAe?$AAv?$AA?$AA@
  00085	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0008b	33 c0		 xor	 eax, eax
$LN12@PxSocket_N:

; 450  :     assert(!snapshot->sle_next);

  0008d	48 8b 44 24 60	 mov	 rax, QWORD PTR snapshot$[rsp]
  00092	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00097	74 1c		 je	 SHORT $LN13@PxSocket_N
  00099	41 b8 c2 01 00
	00		 mov	 r8d, 450		; 000001c2H
  0009f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  000a6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CI@OFAJJFHP@?$AA?$CB?$AAs?$AAn?$AAa?$AAp?$AAs?$AAh?$AAo?$AAt?$AA?9?$AA?$DO?$AAs?$AAl?$AAe?$AA_?$AAn?$AAe?$AAx?$AAt?$AA?$AA@
  000ad	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000b3	33 c0		 xor	 eax, eax
$LN13@PxSocket_N:

; 451  :     assert(c == ctx);

  000b5	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:ctx
  000ba	8b c0		 mov	 eax, eax
  000bc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  000c2	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  000cb	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  000cf	48 8b 04 08	 mov	 rax, QWORD PTR [rax+rcx]
  000d3	48 39 44 24 50	 cmp	 QWORD PTR c$[rsp], rax
  000d8	74 1c		 je	 SHORT $LN14@PxSocket_N
  000da	41 b8 c3 01 00
	00		 mov	 r8d, 451		; 000001c3H
  000e0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  000e7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BC@DLDNDONE@?$AAc?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAc?$AAt?$AAx?$AA?$AA@
  000ee	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000f4	33 c0		 xor	 eax, eax
$LN14@PxSocket_N:

; 452  :     assert(s->ctx == c);

  000f6	48 8b 44 24 58	 mov	 rax, QWORD PTR s$[rsp]
  000fb	48 8b 4c 24 50	 mov	 rcx, QWORD PTR c$[rsp]
  00100	48 39 88 00 02
	00 00		 cmp	 QWORD PTR [rax+512], rcx
  00107	74 1c		 je	 SHORT $LN15@PxSocket_N
  00109	41 b8 c4 01 00
	00		 mov	 r8d, 452		; 000001c4H
  0010f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00116	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BI@FADBJKJH@?$AAs?$AA?9?$AA?$DO?$AAc?$AAt?$AAx?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAc?$AA?$AA@
  0011d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00123	33 c0		 xor	 eax, eax
$LN15@PxSocket_N:

; 453  :     assert(c->io_obj == (PyObject *)s);

  00125	48 8b 44 24 50	 mov	 rax, QWORD PTR c$[rsp]
  0012a	48 8b 4c 24 58	 mov	 rcx, QWORD PTR s$[rsp]
  0012f	48 39 88 a8 32
	00 00		 cmp	 QWORD PTR [rax+12968], rcx
  00136	74 1c		 je	 SHORT $LN16@PxSocket_N
  00138	41 b8 c5 01 00
	00		 mov	 r8d, 453		; 000001c5H
  0013e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00145	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DG@FIOFPEII@?$AAc?$AA?9?$AA?$DO?$AAi?$AAo?$AA_?$AAo?$AAb?$AAj?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA?$CI?$AAP?$AAy?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?5?$AA?$CK?$AA?$CJ?$AAs?$AA?$AA@
  0014c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00152	33 c0		 xor	 eax, eax
$LN16@PxSocket_N:

; 454  :     assert(
; 455  :         (!len && !buf &&  o) ||
; 456  :         ( len &&  buf && !o && (*len > 0))
; 457  :     );

  00154	48 83 7c 24 68
	00		 cmp	 QWORD PTR len$[rsp], 0
  0015a	75 10		 jne	 SHORT $LN17@PxSocket_N
  0015c	48 83 7c 24 70
	00		 cmp	 QWORD PTR buf$[rsp], 0
  00162	75 08		 jne	 SHORT $LN17@PxSocket_N
  00164	48 83 7c 24 78
	00		 cmp	 QWORD PTR o$[rsp], 0
  0016a	75 3e		 jne	 SHORT $LN19@PxSocket_N
$LN17@PxSocket_N:
  0016c	48 83 7c 24 68
	00		 cmp	 QWORD PTR len$[rsp], 0
  00172	74 1a		 je	 SHORT $LN18@PxSocket_N
  00174	48 83 7c 24 70
	00		 cmp	 QWORD PTR buf$[rsp], 0
  0017a	74 12		 je	 SHORT $LN18@PxSocket_N
  0017c	48 83 7c 24 78
	00		 cmp	 QWORD PTR o$[rsp], 0
  00182	75 0a		 jne	 SHORT $LN18@PxSocket_N
  00184	48 8b 44 24 68	 mov	 rax, QWORD PTR len$[rsp]
  00189	83 38 00	 cmp	 DWORD PTR [rax], 0
  0018c	77 1c		 ja	 SHORT $LN19@PxSocket_N
$LN18@PxSocket_N:
  0018e	41 b8 c9 01 00
	00		 mov	 r8d, 457		; 000001c9H
  00194	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0019b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1HC@LNIIIEBO@?$AA?$CI?$AA?$CB?$AAl?$AAe?$AAn?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CB?$AAb?$AAu?$AAf?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAo?$AA?$CJ?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AA?$CI?$AA?5?$AAl?$AAe?$AAn?$AA?5?$AA?$CG?$AA?$CG?$AA?5@
  001a2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001a8	33 c0		 xor	 eax, eax
$LN19@PxSocket_N:

; 458  : 
; 459  :     if (!o) {

  001aa	48 83 7c 24 78
	00		 cmp	 QWORD PTR o$[rsp], 0
  001b0	75 17		 jne	 SHORT $LN7@PxSocket_N

; 460  :         w.len = *len;

  001b2	48 8b 44 24 68	 mov	 rax, QWORD PTR len$[rsp]
  001b7	8b 00		 mov	 eax, DWORD PTR [rax]
  001b9	89 44 24 20	 mov	 DWORD PTR w$[rsp], eax

; 461  :         w.buf =  buf;

  001bd	48 8b 44 24 70	 mov	 rax, QWORD PTR buf$[rsp]
  001c2	48 89 44 24 28	 mov	 QWORD PTR w$[rsp+8], rax
  001c7	eb 1a		 jmp	 SHORT $LN6@PxSocket_N
$LN7@PxSocket_N:

; 462  :     } else if (!PyObject2WSABUF(o, &w))

  001c9	48 8d 54 24 20	 lea	 rdx, QWORD PTR w$[rsp]
  001ce	48 8b 4c 24 78	 mov	 rcx, QWORD PTR o$[rsp]
  001d3	e8 00 00 00 00	 call	 PyObject2WSABUF
  001d8	85 c0		 test	 eax, eax
  001da	75 07		 jne	 SHORT $LN5@PxSocket_N

; 463  :         return 0;

  001dc	33 c0		 xor	 eax, eax
  001de	e9 10 01 00 00	 jmp	 $LN8@PxSocket_N
$LN5@PxSocket_N:
$LN6@PxSocket_N:

; 464  : 
; 465  :     nbytes = Px_PTR_ALIGN(sizeof(SBUF));

  001e3	c7 44 24 38 50
	00 00 00	 mov	 DWORD PTR nbytes$[rsp], 80 ; 00000050H

; 466  :     if (copy_buf)

  001eb	83 bc 24 88 00
	00 00 00	 cmp	 DWORD PTR copy_buf$[rsp], 0
  001f3	74 10		 je	 SHORT $LN4@PxSocket_N

; 467  :         nbytes += w.len;

  001f5	8b 44 24 20	 mov	 eax, DWORD PTR w$[rsp]
  001f9	8b 4c 24 38	 mov	 ecx, DWORD PTR nbytes$[rsp]
  001fd	03 c8		 add	 ecx, eax
  001ff	8b c1		 mov	 eax, ecx
  00201	89 44 24 38	 mov	 DWORD PTR nbytes$[rsp], eax
$LN4@PxSocket_N:

; 468  : 
; 469  :     *sbuf = (SBUF *)_PyHeap_Malloc(c, nbytes, 0, 0);

  00205	8b 44 24 38	 mov	 eax, DWORD PTR nbytes$[rsp]
  00209	45 33 c9	 xor	 r9d, r9d
  0020c	45 33 c0	 xor	 r8d, r8d
  0020f	8b d0		 mov	 edx, eax
  00211	48 8b 4c 24 50	 mov	 rcx, QWORD PTR c$[rsp]
  00216	e8 00 00 00 00	 call	 _PyHeap_Malloc
  0021b	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR sbuf$[rsp]
  00223	48 89 01	 mov	 QWORD PTR [rcx], rax

; 470  :     if (!*sbuf)

  00226	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR sbuf$[rsp]
  0022e	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00232	75 07		 jne	 SHORT $LN3@PxSocket_N

; 471  :         return 0;

  00234	33 c0		 xor	 eax, eax
  00236	e9 b8 00 00 00	 jmp	 $LN8@PxSocket_N
$LN3@PxSocket_N:

; 472  : 
; 473  :     b = *sbuf;

  0023b	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR sbuf$[rsp]
  00243	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00246	48 89 44 24 30	 mov	 QWORD PTR b$[rsp], rax

; 474  : 
; 475  :     b->last_thread_id = _Py_get_current_thread_id();

  0024b	65 8b 04 25 48
	00 00 00	 mov	 eax, DWORD PTR gs:72
  00253	48 8b 4c 24 30	 mov	 rcx, QWORD PTR b$[rsp]
  00258	89 41 18	 mov	 DWORD PTR [rcx+24], eax

; 476  :     b->snapshot = snapshot;

  0025b	48 8b 44 24 30	 mov	 rax, QWORD PTR b$[rsp]
  00260	48 8b 4c 24 60	 mov	 rcx, QWORD PTR snapshot$[rsp]
  00265	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 477  :     b->s = s;

  00269	48 8b 44 24 30	 mov	 rax, QWORD PTR b$[rsp]
  0026e	48 8b 4c 24 58	 mov	 rcx, QWORD PTR s$[rsp]
  00273	48 89 08	 mov	 QWORD PTR [rax], rcx

; 478  :     s->ol = &b->ol;

  00276	48 8b 44 24 30	 mov	 rax, QWORD PTR b$[rsp]
  0027b	48 83 c0 20	 add	 rax, 32			; 00000020H
  0027f	48 8b 4c 24 58	 mov	 rcx, QWORD PTR s$[rsp]
  00284	48 89 81 80 03
	00 00		 mov	 QWORD PTR [rcx+896], rax

; 479  :     s->sbuf = b;

  0028b	48 8b 44 24 58	 mov	 rax, QWORD PTR s$[rsp]
  00290	48 8b 4c 24 30	 mov	 rcx, QWORD PTR b$[rsp]
  00295	48 89 88 68 03
	00 00		 mov	 QWORD PTR [rax+872], rcx

; 480  : 
; 481  :     b->w.len = w.len;

  0029c	48 8b 44 24 30	 mov	 rax, QWORD PTR b$[rsp]
  002a1	8b 4c 24 20	 mov	 ecx, DWORD PTR w$[rsp]
  002a5	89 48 40	 mov	 DWORD PTR [rax+64], ecx

; 482  : 
; 483  :     if (!copy_buf)

  002a8	83 bc 24 88 00
	00 00 00	 cmp	 DWORD PTR copy_buf$[rsp], 0
  002b0	75 10		 jne	 SHORT $LN2@PxSocket_N

; 484  :         b->w.buf = w.buf;

  002b2	48 8b 44 24 30	 mov	 rax, QWORD PTR b$[rsp]
  002b7	48 8b 4c 24 28	 mov	 rcx, QWORD PTR w$[rsp+8]
  002bc	48 89 48 48	 mov	 QWORD PTR [rax+72], rcx

; 485  :     else {

  002c0	eb 2c		 jmp	 SHORT $LN1@PxSocket_N
$LN2@PxSocket_N:

; 486  :         b->w.buf = (char *)(_Py_PTR_ADD(b, Px_PTR_ALIGN(sizeof(SBUF))));

  002c2	48 8b 44 24 30	 mov	 rax, QWORD PTR b$[rsp]
  002c7	48 83 c0 50	 add	 rax, 80			; 00000050H
  002cb	48 8b 4c 24 30	 mov	 rcx, QWORD PTR b$[rsp]
  002d0	48 89 41 48	 mov	 QWORD PTR [rcx+72], rax

; 487  :         memcpy(b->w.buf, w.buf, w.len);

  002d4	8b 44 24 20	 mov	 eax, DWORD PTR w$[rsp]
  002d8	44 8b c0	 mov	 r8d, eax
  002db	48 8b 54 24 28	 mov	 rdx, QWORD PTR w$[rsp+8]
  002e0	48 8b 44 24 30	 mov	 rax, QWORD PTR b$[rsp]
  002e5	48 8b 48 48	 mov	 rcx, QWORD PTR [rax+72]
  002e9	e8 00 00 00 00	 call	 memcpy
$LN1@PxSocket_N:

; 488  :     }
; 489  : 
; 490  :     return 1;

  002ee	b8 01 00 00 00	 mov	 eax, 1
$LN8@PxSocket_N:

; 491  : }

  002f3	48 83 c4 48	 add	 rsp, 72			; 00000048H
  002f7	c3		 ret	 0
PxSocket_NEW_SBUF ENDP
_TEXT	ENDS
EXTRN	PyUnicode_AsUTF8AndSize:PROC
EXTRN	PyType_IsSubtype:PROC
EXTRN	PyByteArray_Type:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyObject2WSABUF DD imagerel PyObject2WSABUF
	DD	imagerel PyObject2WSABUF+271
	DD	imagerel $unwind$PyObject2WSABUF
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyObject2WSABUF DD 010e01H
	DD	0820eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyObject2WSABUF
_TEXT	SEGMENT
result$ = 32
buf$125822 = 40
nbytes$125821 = 48
o$ = 80
w$ = 88
PyObject2WSABUF PROC					; COMDAT

; 402  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 403  :     int result = 1;

  0000e	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1

; 404  :     if (PyBytes_Check(o)) {

  00016	48 8b 44 24 50	 mov	 rax, QWORD PTR o$[rsp]
  0001b	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0001f	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00025	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  0002a	85 c0		 test	 eax, eax
  0002c	74 26		 je	 SHORT $LN9@PyObject2W

; 405  :         w->len = (ULONG)((PyVarObject *)o)->ob_size;

  0002e	48 8b 44 24 58	 mov	 rax, QWORD PTR w$[rsp]
  00033	48 8b 4c 24 50	 mov	 rcx, QWORD PTR o$[rsp]
  00038	8b 49 60	 mov	 ecx, DWORD PTR [rcx+96]
  0003b	89 08		 mov	 DWORD PTR [rax], ecx

; 406  :         w->buf = (char *)((PyBytesObject *)o)->ob_sval;

  0003d	48 8b 44 24 50	 mov	 rax, QWORD PTR o$[rsp]
  00042	48 83 c0 78	 add	 rax, 120		; 00000078H
  00046	48 8b 4c 24 58	 mov	 rcx, QWORD PTR w$[rsp]
  0004b	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
  0004f	e9 b2 00 00 00	 jmp	 $LN8@PyObject2W
$LN9@PyObject2W:

; 407  :     } else if (PyByteArray_Check(o)) {

  00054	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyByteArray_Type
  0005b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR o$[rsp]
  00060	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00064	74 19		 je	 SHORT $LN6@PyObject2W
  00066	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyByteArray_Type
  0006d	48 8b 44 24 50	 mov	 rax, QWORD PTR o$[rsp]
  00072	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  00076	e8 00 00 00 00	 call	 PyType_IsSubtype
  0007b	85 c0		 test	 eax, eax
  0007d	74 26		 je	 SHORT $LN7@PyObject2W
$LN6@PyObject2W:

; 408  :         w->len = (ULONG)((PyByteArrayObject *)o)->ob_alloc;

  0007f	48 8b 44 24 58	 mov	 rax, QWORD PTR w$[rsp]
  00084	48 8b 4c 24 50	 mov	 rcx, QWORD PTR o$[rsp]
  00089	8b 49 78	 mov	 ecx, DWORD PTR [rcx+120]
  0008c	89 08		 mov	 DWORD PTR [rax], ecx

; 409  :         w->buf = ((PyByteArrayObject *)o)->ob_bytes;

  0008e	48 8b 44 24 58	 mov	 rax, QWORD PTR w$[rsp]
  00093	48 8b 4c 24 50	 mov	 rcx, QWORD PTR o$[rsp]
  00098	48 8b 89 80 00
	00 00		 mov	 rcx, QWORD PTR [rcx+128]
  0009f	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  000a3	eb 61		 jmp	 SHORT $LN5@PyObject2W
$LN7@PyObject2W:

; 410  :     } else if (PyUnicode_Check(o)) {

  000a5	48 8b 44 24 50	 mov	 rax, QWORD PTR o$[rsp]
  000aa	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000ae	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000b4	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  000b9	85 c0		 test	 eax, eax
  000bb	74 41		 je	 SHORT $LN4@PyObject2W

; 411  :         Py_ssize_t nbytes;
; 412  :         char *buf = PyUnicode_AsUTF8AndSize(o, &nbytes);

  000bd	48 8d 54 24 30	 lea	 rdx, QWORD PTR nbytes$125821[rsp]
  000c2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR o$[rsp]
  000c7	e8 00 00 00 00	 call	 PyUnicode_AsUTF8AndSize
  000cc	48 89 44 24 28	 mov	 QWORD PTR buf$125822[rsp], rax

; 413  :         if (buf) {

  000d1	48 83 7c 24 28
	00		 cmp	 QWORD PTR buf$125822[rsp], 0
  000d7	74 1b		 je	 SHORT $LN3@PyObject2W

; 414  :             w->buf = buf;

  000d9	48 8b 44 24 58	 mov	 rax, QWORD PTR w$[rsp]
  000de	48 8b 4c 24 28	 mov	 rcx, QWORD PTR buf$125822[rsp]
  000e3	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 415  :             /* xxx todo: range check */
; 416  :             w->len = (DWORD)nbytes;

  000e7	48 8b 44 24 58	 mov	 rax, QWORD PTR w$[rsp]
  000ec	8b 4c 24 30	 mov	 ecx, DWORD PTR nbytes$125821[rsp]
  000f0	89 08		 mov	 DWORD PTR [rax], ecx

; 417  :         } else

  000f2	eb 08		 jmp	 SHORT $LN2@PyObject2W
$LN3@PyObject2W:

; 418  :             result = 0;

  000f4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR result$[rsp], 0
$LN2@PyObject2W:

; 419  :     } else

  000fc	eb 08		 jmp	 SHORT $LN1@PyObject2W
$LN4@PyObject2W:

; 420  :         result = 0;

  000fe	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR result$[rsp], 0
$LN1@PyObject2W:
$LN5@PyObject2W:
$LN8@PyObject2W:

; 421  : 
; 422  :     return result;

  00106	8b 44 24 20	 mov	 eax, DWORD PTR result$[rsp]

; 423  : }

  0010a	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0010e	c3		 ret	 0
PyObject2WSABUF ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BJ@DJEDNLFK@WSACloseEvent?$CI?$CJ?5?9?$DO?5other?$AA@ ; `string'
PUBLIC	??_C@_0CC@HMPLBGBI@WSACloseEvent?$CI?$CJ?5?9?$DO?5INVALID_HANDL@ ; `string'
PUBLIC	_RESET_OVERLAPPED
EXTRN	__imp_WSAGetLastError:PROC
EXTRN	__imp_WSACloseEvent:PROC
EXTRN	memcmp:PROC
_BSS	SEGMENT
_NULL_OVERLAPPED DB 020H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_RESET_OVERLAPPED DD imagerel $LN8
	DD	imagerel $LN8+133
	DD	imagerel $unwind$_RESET_OVERLAPPED
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_RESET_OVERLAPPED DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0BJ@DJEDNLFK@WSACloseEvent?$CI?$CJ?5?9?$DO?5other?$AA@
CONST	SEGMENT
??_C@_0BJ@DJEDNLFK@WSACloseEvent?$CI?$CJ?5?9?$DO?5other?$AA@ DB 'WSAClose'
	DB	'Event() -> other', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@HMPLBGBI@WSACloseEvent?$CI?$CJ?5?9?$DO?5INVALID_HANDL@
CONST	SEGMENT
??_C@_0CC@HMPLBGBI@WSACloseEvent?$CI?$CJ?5?9?$DO?5INVALID_HANDL@ DB 'WSAC'
	DB	'loseEvent() -> INVALID_HANDLE', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _RESET_OVERLAPPED
_TEXT	SEGMENT
last_error$125896 = 32
ol$ = 64
_RESET_OVERLAPPED PROC					; COMDAT

; 515  : {

$LN8:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 516  :     if (!IS_OVERLAPPED_NULL(ol)) {

  00009	41 b8 20 00 00
	00		 mov	 r8d, 32			; 00000020H
  0000f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_NULL_OVERLAPPED
  00016	48 8b 4c 24 40	 mov	 rcx, QWORD PTR ol$[rsp]
  0001b	e8 00 00 00 00	 call	 memcmp
  00020	85 c0		 test	 eax, eax
  00022	74 5c		 je	 SHORT $LN5@RESET_OVER

; 517  :         if (ol->hEvent) {

  00024	48 8b 44 24 40	 mov	 rax, QWORD PTR ol$[rsp]
  00029	48 83 78 18 00	 cmp	 QWORD PTR [rax+24], 0
  0002e	74 3e		 je	 SHORT $LN4@RESET_OVER

; 518  :             if (!WSACloseEvent(ol->hEvent)) {

  00030	48 8b 44 24 40	 mov	 rax, QWORD PTR ol$[rsp]
  00035	48 8b 48 18	 mov	 rcx, QWORD PTR [rax+24]
  00039	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WSACloseEvent
  0003f	85 c0		 test	 eax, eax
  00041	75 2b		 jne	 SHORT $LN3@RESET_OVER

; 519  :                 int last_error = WSAGetLastError();

  00043	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WSAGetLastError
  00049	89 44 24 20	 mov	 DWORD PTR last_error$125896[rsp], eax

; 520  :                 if (last_error == WSA_INVALID_HANDLE)

  0004d	83 7c 24 20 06	 cmp	 DWORD PTR last_error$125896[rsp], 6
  00052	75 0e		 jne	 SHORT $LN2@RESET_OVER

; 521  :                     Py_FatalError("WSACloseEvent() -> INVALID_HANDLE");

  00054	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CC@HMPLBGBI@WSACloseEvent?$CI?$CJ?5?9?$DO?5INVALID_HANDL@
  0005b	e8 00 00 00 00	 call	 Py_FatalError

; 522  :                 else

  00060	eb 0c		 jmp	 SHORT $LN1@RESET_OVER
$LN2@RESET_OVER:

; 523  :                     Py_FatalError("WSACloseEvent() -> other");

  00062	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@DJEDNLFK@WSACloseEvent?$CI?$CJ?5?9?$DO?5other?$AA@
  00069	e8 00 00 00 00	 call	 Py_FatalError
$LN1@RESET_OVER:
$LN3@RESET_OVER:
$LN4@RESET_OVER:

; 524  :             }
; 525  :         }
; 526  :         memset(ol, 0, sizeof(OVERLAPPED));

  0006e	41 b8 20 00 00
	00		 mov	 r8d, 32			; 00000020H
  00074	33 d2		 xor	 edx, edx
  00076	48 8b 4c 24 40	 mov	 rcx, QWORD PTR ol$[rsp]
  0007b	e8 00 00 00 00	 call	 memset
$LN5@RESET_OVER:

; 527  :     }
; 528  : }

  00080	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00084	c3		 ret	 0
_RESET_OVERLAPPED ENDP
_TEXT	ENDS
PUBLIC	_PyParallel_DisassociateCurrentThreadFromCallback
EXTRN	__imp_DisassociateCurrentThreadFromCallback:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyParallel_DisassociateCurrentThreadFromCallback DD imagerel $LN4
	DD	imagerel $LN4+107
	DD	imagerel $unwind$_PyParallel_DisassociateCurrentThreadFromCallback
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyParallel_DisassociateCurrentThreadFromCallback DD 010401H
	DD	06204H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _PyParallel_DisassociateCurrentThreadFromCallback
_TEXT	SEGMENT
c$ = 32
_PyParallel_DisassociateCurrentThreadFromCallback PROC	; COMDAT

; 541  : {

$LN4:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 542  :     Context *c = ctx;

  00004	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:ctx
  00009	8b c0		 mov	 eax, eax
  0000b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00011	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0001a	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  0001e	48 8b 04 08	 mov	 rax, QWORD PTR [rax+rcx]
  00022	48 89 44 24 20	 mov	 QWORD PTR c$[rsp], rax

; 543  :     if (Px_CTX_IS_DISASSOCIATED(c))

  00027	48 8b 44 24 20	 mov	 rax, QWORD PTR c$[rsp]
  0002c	8b 80 f8 00 00
	00		 mov	 eax, DWORD PTR [rax+248]
  00032	83 e0 10	 and	 eax, 16
  00035	85 c0		 test	 eax, eax
  00037	74 02		 je	 SHORT $LN1@PyParallel@6

; 544  :         return;

  00039	eb 2b		 jmp	 SHORT $LN2@PyParallel@6
$LN1@PyParallel@6:

; 545  :     DisassociateCurrentThreadFromCallback((PTP_CALLBACK_INSTANCE)c->instance);

  0003b	48 8b 44 24 20	 mov	 rax, QWORD PTR c$[rsp]
  00040	48 8b 88 f0 00
	00 00		 mov	 rcx, QWORD PTR [rax+240]
  00047	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_DisassociateCurrentThreadFromCallback

; 546  :     Px_CTXFLAGS(c) |= Px_CTXFLAGS_DISASSOCIATED;

  0004d	48 8b 44 24 20	 mov	 rax, QWORD PTR c$[rsp]
  00052	8b 80 f8 00 00
	00		 mov	 eax, DWORD PTR [rax+248]
  00058	83 c8 10	 or	 eax, 16
  0005b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR c$[rsp]
  00060	89 81 f8 00 00
	00		 mov	 DWORD PTR [rcx+248], eax
$LN2@PyParallel@6:

; 547  : }

  00066	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0006a	c3		 ret	 0
_PyParallel_DisassociateCurrentThreadFromCallback ENDP
_TEXT	ENDS
PUBLIC	_PyParallel_ContextGuardFailure
PUBLIC	??_C@_0BJ@BPAJLFDI@_PyParallel_BlockingCall?$AA@ ; `string'
PUBLIC	??_C@_0BH@PGHBGAOD@?4?4?2Python?2pyparallel?4c?$AA@ ; `string'
PUBLIC	_PyParallel_BlockingCall
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyParallel_BlockingCall DD imagerel $LN8
	DD	imagerel $LN8+210
	DD	imagerel $unwind$_PyParallel_BlockingCall
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyParallel_BlockingCall DD 010401H
	DD	08204H
xdata	ENDS
;	COMDAT ??_C@_0BJ@BPAJLFDI@_PyParallel_BlockingCall?$AA@
CONST	SEGMENT
??_C@_0BJ@BPAJLFDI@_PyParallel_BlockingCall?$AA@ DB '_PyParallel_Blocking'
	DB	'Call', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@PGHBGAOD@?4?4?2Python?2pyparallel?4c?$AA@
CONST	SEGMENT
??_C@_0BH@PGHBGAOD@?4?4?2Python?2pyparallel?4c?$AA@ DB '..\Python\pyparal'
	DB	'lel.c', 00H					; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PyParallel_BlockingCall
_TEXT	SEGMENT
s$ = 32
c$ = 40
tv74 = 48
tv87 = 56
_PyParallel_BlockingCall PROC				; COMDAT

; 551  : {

$LN8:
  00000	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 552  :     Context *c = ctx;

  00004	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:ctx
  00009	8b c0		 mov	 eax, eax
  0000b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00011	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0001a	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  0001e	48 8b 04 08	 mov	 rax, QWORD PTR [rax+rcx]
  00022	48 89 44 24 28	 mov	 QWORD PTR c$[rsp], rax

; 553  :     Stats   *s = STATS(c);

  00027	48 8b 44 24 28	 mov	 rax, QWORD PTR c$[rsp]
  0002c	8b 80 f8 00 00
	00		 mov	 eax, DWORD PTR [rax+248]
  00032	83 e0 20	 and	 eax, 32			; 00000020H
  00035	85 c0		 test	 eax, eax
  00037	74 12		 je	 SHORT $LN6@PyParallel@7
  00039	48 8b 44 24 28	 mov	 rax, QWORD PTR c$[rsp]
  0003e	48 05 00 01 00
	00		 add	 rax, 256		; 00000100H
  00044	48 89 44 24 30	 mov	 QWORD PTR tv74[rsp], rax
  00049	eb 09		 jmp	 SHORT $LN7@PyParallel@7
$LN6@PyParallel@7:
  0004b	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR tv74[rsp], 0
$LN7@PyParallel@7:
  00054	48 8b 44 24 30	 mov	 rax, QWORD PTR tv74[rsp]
  00059	48 89 44 24 20	 mov	 QWORD PTR s$[rsp], rax

; 554  :     Px_GUARD

  0005e	e8 00 00 00 00	 call	 _Py_PXCTX
  00063	85 c0		 test	 eax, eax
  00065	75 1f		 jne	 SHORT $LN3@PyParallel@7
  00067	41 b9 01 00 00
	00		 mov	 r9d, 1
  0006d	41 b8 2a 02 00
	00		 mov	 r8d, 554		; 0000022aH
  00073	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@PGHBGAOD@?4?4?2Python?2pyparallel?4c?$AA@
  0007a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@BPAJLFDI@_PyParallel_BlockingCall?$AA@
  00081	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@PyParallel@7:

; 555  : 
; 556  :     if (Px_CTX_IS_DISASSOCIATED(c))

  00086	48 8b 44 24 28	 mov	 rax, QWORD PTR c$[rsp]
  0008b	8b 80 f8 00 00
	00		 mov	 eax, DWORD PTR [rax+248]
  00091	83 e0 10	 and	 eax, 16
  00094	85 c0		 test	 eax, eax
  00096	74 02		 je	 SHORT $LN2@PyParallel@7

; 557  :         return;

  00098	eb 33		 jmp	 SHORT $LN4@PyParallel@7
$LN2@PyParallel@7:

; 558  : 
; 559  :     if (s && ++s->blocking_calls > _PxBlockingCallsThreshold)

  0009a	48 83 7c 24 20
	00		 cmp	 QWORD PTR s$[rsp], 0
  000a0	74 2b		 je	 SHORT $LN1@PyParallel@7
  000a2	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  000a7	8b 40 38	 mov	 eax, DWORD PTR [rax+56]
  000aa	ff c0		 inc	 eax
  000ac	89 44 24 38	 mov	 DWORD PTR tv87[rsp], eax
  000b0	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  000b5	8b 4c 24 38	 mov	 ecx, DWORD PTR tv87[rsp]
  000b9	89 48 38	 mov	 DWORD PTR [rax+56], ecx
  000bc	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR _PxBlockingCallsThreshold
  000c2	39 44 24 38	 cmp	 DWORD PTR tv87[rsp], eax
  000c6	7e 05		 jle	 SHORT $LN1@PyParallel@7

; 560  :         _PyParallel_DisassociateCurrentThreadFromCallback();

  000c8	e8 00 00 00 00	 call	 _PyParallel_DisassociateCurrentThreadFromCallback
$LN1@PyParallel@7:
$LN4@PyParallel@7:

; 561  : }

  000cd	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000d1	c3		 ret	 0
_PyParallel_BlockingCall ENDP
_TEXT	ENDS
PUBLIC	_PyHeap_MemAlignedMalloc
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyHeap_MemAlignedMalloc DD imagerel $LN3
	DD	imagerel $LN3+43
	DD	imagerel $unwind$_PyHeap_MemAlignedMalloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyHeap_MemAlignedMalloc DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _PyHeap_MemAlignedMalloc
_TEXT	SEGMENT
c$ = 48
n$ = 56
_PyHeap_MemAlignedMalloc PROC				; COMDAT

; 566  : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 567  :     return _PyHeap_Malloc(c, n, Px_MEM_ALIGN_SIZE, 0);

  0000e	45 33 c9	 xor	 r9d, r9d
  00011	41 b8 10 00 00
	00		 mov	 r8d, 16
  00017	48 8b 54 24 38	 mov	 rdx, QWORD PTR n$[rsp]
  0001c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR c$[rsp]
  00021	e8 00 00 00 00	 call	 _PyHeap_Malloc

; 568  : }

  00026	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002a	c3		 ret	 0
_PyHeap_MemAlignedMalloc ENDP
_TEXT	ENDS
PUBLIC	_PyHeap_NewListItem
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyHeap_NewListItem DD imagerel $LN3
	DD	imagerel $LN3+29
	DD	imagerel $unwind$_PyHeap_NewListItem
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyHeap_NewListItem DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _PyHeap_NewListItem
_TEXT	SEGMENT
c$ = 48
_PyHeap_NewListItem PROC				; COMDAT

; 573  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 574  :     return (PxListItem *)_PyHeap_MemAlignedMalloc(c, sizeof(PxListItem));

  00009	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  0000e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR c$[rsp]
  00013	e8 00 00 00 00	 call	 _PyHeap_MemAlignedMalloc

; 575  : }

  00018	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001c	c3		 ret	 0
_PyHeap_NewListItem ENDP
_TEXT	ENDS
PUBLIC	_PyHeap_NewList
EXTRN	__imp_InitializeSListHead:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyHeap_NewList DD imagerel $LN4
	DD	imagerel $LN4+58
	DD	imagerel $unwind$_PyHeap_NewList
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyHeap_NewList DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _PyHeap_NewList
_TEXT	SEGMENT
l$ = 32
c$ = 64
_PyHeap_NewList PROC					; COMDAT

; 580  : {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 581  :     PxListHead *l;
; 582  : 
; 583  :     l = (PxListHead *)_PyHeap_MemAlignedMalloc(c, sizeof(PxListHead));

  00009	ba 10 00 00 00	 mov	 edx, 16
  0000e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR c$[rsp]
  00013	e8 00 00 00 00	 call	 _PyHeap_MemAlignedMalloc
  00018	48 89 44 24 20	 mov	 QWORD PTR l$[rsp], rax

; 584  :     if (l)

  0001d	48 83 7c 24 20
	00		 cmp	 QWORD PTR l$[rsp], 0
  00023	74 0b		 je	 SHORT $LN1@PyHeap_New

; 585  :         InitializeSListHead(l);

  00025	48 8b 4c 24 20	 mov	 rcx, QWORD PTR l$[rsp]
  0002a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_InitializeSListHead
$LN1@PyHeap_New:

; 586  : 
; 587  :     return l;

  00030	48 8b 44 24 20	 mov	 rax, QWORD PTR l$[rsp]

; 588  : }

  00035	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00039	c3		 ret	 0
_PyHeap_NewList ENDP
_TEXT	ENDS
PUBLIC	??_C@_1CO@DEBCAOHM@?$AAP?$AAy?$AA_?$AAM?$AAa?$AAi?$AAn?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAI?$AAd?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA?9?$AA1?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CI@LEOGFFNH@?$AAP?$AAy?$AA_?$AAM?$AAa?$AAi?$AAn?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AAI?$AAd?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_PXCTX DD imagerel $LN7
	DD	imagerel $LN7+129
	DD	imagerel $unwind$_Py_PXCTX
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_PXCTX DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_1CO@DEBCAOHM@?$AAP?$AAy?$AA_?$AAM?$AAa?$AAi?$AAn?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAI?$AAd?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA?9?$AA1?$AA?$AA@
CONST	SEGMENT
??_C@_1CO@DEBCAOHM@?$AAP?$AAy?$AA_?$AAM?$AAa?$AAi?$AAn?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAI?$AAd?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA?9?$AA1?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, '_', 00H, 'M', 00H, 'a', 00H, 'i', 00H, 'n', 00H
	DB	'P', 00H, 'r', 00H, 'o', 00H, 'c', 00H, 'e', 00H, 's', 00H, 's'
	DB	00H, 'I', 00H, 'd', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H
	DB	'-', 00H, '1', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1CI@LEOGFFNH@?$AAP?$AAy?$AA_?$AAM?$AAa?$AAi?$AAn?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AAI?$AAd?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1CI@LEOGFFNH@?$AAP?$AAy?$AA_?$AAM?$AAa?$AAi?$AAn?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AAI?$AAd?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, '_', 00H, 'M', 00H, 'a', 00H, 'i', 00H, 'n', 00H
	DB	'T', 00H, 'h', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'd', 00H, 'I'
	DB	00H, 'd', 00H, ' ', 00H, '>', 00H, ' ', 00H, '0', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_PXCTX
_TEXT	SEGMENT
active$ = 32
tv67 = 36
_Py_PXCTX PROC						; COMDAT

; 593  : {

$LN7:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 594  :     int active = (int)(Py_MainThreadId != _Py_get_current_thread_id());

  00004	65 8b 04 25 48
	00 00 00	 mov	 eax, DWORD PTR gs:72
  0000c	39 05 00 00 00
	00		 cmp	 DWORD PTR Py_MainThreadId, eax
  00012	74 0a		 je	 SHORT $LN3@Py_PXCTX
  00014	c7 44 24 24 01
	00 00 00	 mov	 DWORD PTR tv67[rsp], 1
  0001c	eb 08		 jmp	 SHORT $LN4@Py_PXCTX
$LN3@Py_PXCTX:
  0001e	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR tv67[rsp], 0
$LN4@Py_PXCTX:
  00026	8b 44 24 24	 mov	 eax, DWORD PTR tv67[rsp]
  0002a	89 44 24 20	 mov	 DWORD PTR active$[rsp], eax

; 595  :     assert(Py_MainThreadId > 0);

  0002e	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR Py_MainThreadId, 0
  00035	7f 1c		 jg	 SHORT $LN5@Py_PXCTX
  00037	41 b8 53 02 00
	00		 mov	 r8d, 595		; 00000253H
  0003d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00044	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CI@LEOGFFNH@?$AAP?$AAy?$AA_?$AAM?$AAa?$AAi?$AAn?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AAI?$AAd?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@
  0004b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00051	33 c0		 xor	 eax, eax
$LN5@Py_PXCTX:

; 596  :     assert(Py_MainProcessId != -1);

  00053	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR Py_MainProcessId, -1
  0005a	75 1c		 jne	 SHORT $LN6@Py_PXCTX
  0005c	41 b8 54 02 00
	00		 mov	 r8d, 596		; 00000254H
  00062	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00069	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@DEBCAOHM@?$AAP?$AAy?$AA_?$AAM?$AAa?$AAi?$AAn?$AAP?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAI?$AAd?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA?9?$AA1?$AA?$AA@
  00070	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00076	33 c0		 xor	 eax, eax
$LN6@Py_PXCTX:

; 597  :     return active;

  00078	8b 44 24 20	 mov	 eax, DWORD PTR active$[rsp]

; 598  : }

  0007c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00080	c3		 ret	 0
_Py_PXCTX ENDP
_TEXT	ENDS
PUBLIC	_PxMem_Free
PUBLIC	??_C@_1CA@LIAOCINA@?$AAP?$AAy?$AA_?$AAO?$AAR?$AAI?$AAG?$AA_?$AAT?$AAY?$AAP?$AAE?$AA?$CI?$AAo?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	_PyParallel_Guard
PUBLIC	??_C@_0BC@MJMFODLA@_PyObject_Dealloc?$AA@	; `string'
PUBLIC	_PyObject_Dealloc
EXTRN	_PyMem_DebugFree:PROC
EXTRN	__imp_CloseHandle:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyObject_Dealloc DD imagerel $LN10
	DD	imagerel $LN10+348
	DD	imagerel $unwind$_PyObject_Dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyObject_Dealloc DD 010901H
	DD	0a209H
xdata	ENDS
;	COMDAT ??_C@_1CA@LIAOCINA@?$AAP?$AAy?$AA_?$AAO?$AAR?$AAI?$AAG?$AA_?$AAT?$AAY?$AAP?$AAE?$AA?$CI?$AAo?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CA@LIAOCINA@?$AAP?$AAy?$AA_?$AAO?$AAR?$AAI?$AAG?$AA_?$AAT?$AAY?$AAP?$AAE?$AA?$CI?$AAo?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, '_', 00H, 'O', 00H, 'R', 00H, 'I', 00H, 'G', 00H
	DB	'_', 00H, 'T', 00H, 'Y', 00H, 'P', 00H, 'E', 00H, '(', 00H, 'o'
	DB	00H, ')', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@MJMFODLA@_PyObject_Dealloc?$AA@
CONST	SEGMENT
??_C@_0BC@MJMFODLA@_PyObject_Dealloc?$AA@ DB '_PyObject_Dealloc', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PyObject_Dealloc
_TEXT	SEGMENT
mm$ = 48
d$ = 56
tp$ = 64
tv130 = 72
tv135 = 76
o$ = 96
_PyObject_Dealloc PROC					; COMDAT

; 602  : {

$LN10:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 603  :     PyTypeObject *tp;
; 604  :     PyMappingMethods *mm;
; 605  :     //PySequenceMethods *sm;
; 606  :     destructor d;
; 607  : 
; 608  :     Py_GUARD_OBJ(o);

  00009	c7 44 24 20 20
	00 00 00	 mov	 DWORD PTR [rsp+32], 32	; 00000020H
  00011	4c 8b 4c 24 60	 mov	 r9, QWORD PTR o$[rsp]
  00016	41 b8 60 02 00
	00		 mov	 r8d, 608		; 00000260H
  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@PGHBGAOD@?4?4?2Python?2pyparallel?4c?$AA@
  00023	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@MJMFODLA@_PyObject_Dealloc?$AA@
  0002a	e8 00 00 00 00	 call	 _PyParallel_Guard

; 609  :     Py_GUARD

  0002f	e8 00 00 00 00	 call	 _Py_PXCTX
  00034	85 c0		 test	 eax, eax
  00036	74 1c		 je	 SHORT $LN2@PyObject_D
  00038	45 33 c9	 xor	 r9d, r9d
  0003b	41 b8 61 02 00
	00		 mov	 r8d, 609		; 00000261H
  00041	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@PGHBGAOD@?4?4?2Python?2pyparallel?4c?$AA@
  00048	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@MJMFODLA@_PyObject_Dealloc?$AA@
  0004f	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN2@PyObject_D:

; 610  : 
; 611  :     assert(Py_ORIG_TYPE(o));

  00054	48 8b 44 24 60	 mov	 rax, QWORD PTR o$[rsp]
  00059	48 83 78 38 00	 cmp	 QWORD PTR [rax+56], 0
  0005e	75 1c		 jne	 SHORT $LN5@PyObject_D
  00060	41 b8 63 02 00
	00		 mov	 r8d, 611		; 00000263H
  00066	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0006d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CA@LIAOCINA@?$AAP?$AAy?$AA_?$AAO?$AAR?$AAI?$AAG?$AA_?$AAT?$AAY?$AAP?$AAE?$AA?$CI?$AAo?$AA?$CJ?$AA?$AA@
  00074	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0007a	33 c0		 xor	 eax, eax
$LN5@PyObject_D:

; 612  : 
; 613  :     if (Py_HAS_EVENT(o))

  0007c	48 8b 44 24 60	 mov	 rax, QWORD PTR o$[rsp]
  00081	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00085	48 83 e0 08	 and	 rax, 8
  00089	48 85 c0	 test	 rax, rax
  0008c	74 0f		 je	 SHORT $LN1@PyObject_D

; 614  :         PyEvent_DESTROY(o);

  0008e	48 8b 44 24 60	 mov	 rax, QWORD PTR o$[rsp]
  00093	48 8b 48 30	 mov	 rcx, QWORD PTR [rax+48]
  00097	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CloseHandle
$LN1@PyObject_D:

; 615  : 
; 616  :     tp = Py_TYPE(o);

  0009d	48 8b 44 24 60	 mov	 rax, QWORD PTR o$[rsp]
  000a2	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000a6	48 89 44 24 40	 mov	 QWORD PTR tp$[rsp], rax

; 617  :     mm = tp->tp_as_mapping;

  000ab	48 8b 44 24 40	 mov	 rax, QWORD PTR tp$[rsp]
  000b0	48 8b 80 c8 00
	00 00		 mov	 rax, QWORD PTR [rax+200]
  000b7	48 89 44 24 30	 mov	 QWORD PTR mm$[rsp], rax

; 618  :     //sm = tp->tp_as_sequence;
; 619  :     d = Py_ORIG_TYPE_CAST(o)->tp_dealloc;

  000bc	48 8b 44 24 60	 mov	 rax, QWORD PTR o$[rsp]
  000c1	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  000c5	48 8b 80 88 00
	00 00		 mov	 rax, QWORD PTR [rax+136]
  000cc	48 89 44 24 38	 mov	 QWORD PTR d$[rsp], rax

; 620  :     Py_TYPE(o) = Py_ORIG_TYPE(o);

  000d1	48 8b 44 24 60	 mov	 rax, QWORD PTR o$[rsp]
  000d6	48 8b 4c 24 60	 mov	 rcx, QWORD PTR o$[rsp]
  000db	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  000df	48 89 48 58	 mov	 QWORD PTR [rax+88], rcx

; 621  :     Py_ORIG_TYPE(o) = NULL;

  000e3	48 8b 44 24 60	 mov	 rax, QWORD PTR o$[rsp]
  000e8	48 c7 40 38 00
	00 00 00	 mov	 QWORD PTR [rax+56], 0

; 622  :     (*d)(o);

  000f0	48 8b 4c 24 60	 mov	 rcx, QWORD PTR o$[rsp]
  000f5	ff 54 24 38	 call	 QWORD PTR d$[rsp]

; 623  :     PyMem_FREE(tp);

  000f9	e8 00 00 00 00	 call	 _Py_PXCTX
  000fe	85 c0		 test	 eax, eax
  00100	74 14		 je	 SHORT $LN6@PyObject_D
  00102	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tp$[rsp]
  00107	e8 00 00 00 00	 call	 _PxMem_Free
  0010c	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv130[rsp], 0
  00114	eb 12		 jmp	 SHORT $LN7@PyObject_D
$LN6@PyObject_D:
  00116	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tp$[rsp]
  0011b	e8 00 00 00 00	 call	 _PyMem_DebugFree
  00120	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv130[rsp], 0
$LN7@PyObject_D:

; 624  :     PyMem_FREE(mm);

  00128	e8 00 00 00 00	 call	 _Py_PXCTX
  0012d	85 c0		 test	 eax, eax
  0012f	74 14		 je	 SHORT $LN8@PyObject_D
  00131	48 8b 4c 24 30	 mov	 rcx, QWORD PTR mm$[rsp]
  00136	e8 00 00 00 00	 call	 _PxMem_Free
  0013b	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR tv135[rsp], 0
  00143	eb 12		 jmp	 SHORT $LN9@PyObject_D
$LN8@PyObject_D:
  00145	48 8b 4c 24 30	 mov	 rcx, QWORD PTR mm$[rsp]
  0014a	e8 00 00 00 00	 call	 _PyMem_DebugFree
  0014f	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR tv135[rsp], 0
$LN9@PyObject_D:

; 625  :     //PyMem_FREE(sm);
; 626  : }

  00157	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0015b	c3		 ret	 0
_PyObject_Dealloc ENDP
_TEXT	ENDS
PUBLIC	_protected
EXTRN	_PyObject_GetDictPtr:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_protected DD imagerel $LN7
	DD	imagerel $LN7+131
	DD	imagerel $unwind$_protected
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_protected DD 010901H
	DD	08209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _protected
_TEXT	SEGMENT
dp$ = 32
tv76 = 40
tv75 = 48
obj$ = 80
_protected PROC						; COMDAT

; 631  : {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 632  :     PyObject **dp;
; 633  :     dp = _PyObject_GetDictPtr(obj);

  00009	48 8b 4c 24 50	 mov	 rcx, QWORD PTR obj$[rsp]
  0000e	e8 00 00 00 00	 call	 _PyObject_GetDictPtr
  00013	48 89 44 24 20	 mov	 QWORD PTR dp$[rsp], rax

; 634  :     return (!dp ? Px_ISPROTECTED(obj) :
; 635  :                   Px_ISPROTECTED(obj) && Px_ISPROTECTED(*dp));

  00018	48 83 7c 24 20
	00		 cmp	 QWORD PTR dp$[rsp], 0
  0001e	75 14		 jne	 SHORT $LN5@protected
  00020	48 8b 44 24 50	 mov	 rax, QWORD PTR obj$[rsp]
  00025	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00029	48 83 e0 04	 and	 rax, 4
  0002d	48 89 44 24 28	 mov	 QWORD PTR tv76[rsp], rax
  00032	eb 45		 jmp	 SHORT $LN6@protected
$LN5@protected:
  00034	48 8b 44 24 50	 mov	 rax, QWORD PTR obj$[rsp]
  00039	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0003d	48 83 e0 04	 and	 rax, 4
  00041	48 85 c0	 test	 rax, rax
  00044	74 20		 je	 SHORT $LN3@protected
  00046	48 8b 44 24 20	 mov	 rax, QWORD PTR dp$[rsp]
  0004b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0004e	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00052	48 83 e0 04	 and	 rax, 4
  00056	48 85 c0	 test	 rax, rax
  00059	74 0b		 je	 SHORT $LN3@protected
  0005b	48 c7 44 24 30
	01 00 00 00	 mov	 QWORD PTR tv75[rsp], 1
  00064	eb 09		 jmp	 SHORT $LN4@protected
$LN3@protected:
  00066	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR tv75[rsp], 0
$LN4@protected:
  0006f	48 8b 44 24 30	 mov	 rax, QWORD PTR tv75[rsp]
  00074	48 89 44 24 28	 mov	 QWORD PTR tv76[rsp], rax
$LN6@protected:
  00079	0f b6 44 24 28	 movzx	 eax, BYTE PTR tv76[rsp]

; 636  : }

  0007e	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00082	c3		 ret	 0
_protected ENDP
_TEXT	ENDS
PUBLIC	_Py_IncRef
EXTRN	_Py_FalseStruct:BYTE
EXTRN	_Py_TrueStruct:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$_async_protected DD imagerel $LN5
	DD	imagerel $LN5+101
	DD	imagerel $unwind$_async_protected
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_async_protected DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _async_protected
_TEXT	SEGMENT
tv71 = 32
self$ = 64
obj$ = 72
_async_protected PROC					; COMDAT

; 640  : {

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 641  :     Py_INCREF(obj);

  0000e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR obj$[rsp]
  00013	e8 00 00 00 00	 call	 _Py_IncRef

; 642  :     Py_RETURN_BOOL(_protected(obj));

  00018	48 8b 4c 24 48	 mov	 rcx, QWORD PTR obj$[rsp]
  0001d	e8 00 00 00 00	 call	 _protected
  00022	0f be c0	 movsx	 eax, al
  00025	85 c0		 test	 eax, eax
  00027	74 1a		 je	 SHORT $LN3@async_prot
  00029	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_TrueStruct
  00030	e8 00 00 00 00	 call	 _Py_IncRef
  00035	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  0003c	48 89 44 24 20	 mov	 QWORD PTR tv71[rsp], rax
  00041	eb 18		 jmp	 SHORT $LN4@async_prot
$LN3@async_prot:
  00043	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_FalseStruct
  0004a	e8 00 00 00 00	 call	 _Py_IncRef
  0004f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct
  00056	48 89 44 24 20	 mov	 QWORD PTR tv71[rsp], rax
$LN4@async_prot:
  0005b	48 8b 44 24 20	 mov	 rax, QWORD PTR tv71[rsp]

; 643  : }

  00060	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00064	c3		 ret	 0
_async_protected ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
EXTRN	_Py_RefTotal:QWORD
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN7
	DD	imagerel $LN7+132
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 6d		 jne	 SHORT $LN2@Py_IncRef
  00012	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0001a	4c 8b 4c 24 40	 mov	 r9, QWORD PTR op$[rsp]
  0001f	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_Guard
  00038	85 c0		 test	 eax, eax
  0003a	75 12		 jne	 SHORT $LN1@Py_IncRef
  0003c	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  00041	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00045	48 83 e0 20	 and	 rax, 32			; 00000020H
  00049	48 85 c0	 test	 rax, rax
  0004c	74 31		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;

  0004e	e8 00 00 00 00	 call	 _Py_PXCTX
  00053	85 c0		 test	 eax, eax
  00055	74 02		 je	 SHORT $LN5@Py_IncRef
  00057	eb 11		 jmp	 SHORT $LN6@Py_IncRef
$LN5@Py_IncRef:
  00059	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00060	48 ff c0	 inc	 rax
  00063	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN6@Py_IncRef:

; 907  :         (((PyObject*)(op))->ob_refcnt++);

  0006a	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  0006f	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00073	48 ff c0	 inc	 rax
  00076	48 8b 4c 24 40	 mov	 rcx, QWORD PTR op$[rsp]
  0007b	48 89 41 50	 mov	 QWORD PTR [rcx+80], rax
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  0007f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00083	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	_unprotect
;	COMDAT pdata
; File c:\src\pyparallel\python\pyparallel.c
pdata	SEGMENT
$pdata$_unprotect DD imagerel $LN5
	DD	imagerel $LN5+161
	DD	imagerel $unwind$_unprotect
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_unprotect DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _unprotect
_TEXT	SEGMENT
dp$ = 32
obj$ = 64
_unprotect PROC						; COMDAT

; 648  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 649  :     PyObject **dp;
; 650  :     if (_protected(obj)) {

  00009	48 8b 4c 24 40	 mov	 rcx, QWORD PTR obj$[rsp]
  0000e	e8 00 00 00 00	 call	 _protected
  00013	0f be c0	 movsx	 eax, al
  00016	85 c0		 test	 eax, eax
  00018	74 27		 je	 SHORT $LN2@unprotect

; 651  :         Py_PXFLAGS(obj) &= ~Py_PXFLAGS_RWLOCK;

  0001a	48 8b 44 24 40	 mov	 rax, QWORD PTR obj$[rsp]
  0001f	b9 fb ff ff ff	 mov	 ecx, -5			; fffffffbH
  00024	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00028	48 23 c1	 and	 rax, rcx
  0002b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR obj$[rsp]
  00030	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 652  :         obj->srw_lock = NULL;

  00034	48 8b 44 24 40	 mov	 rax, QWORD PTR obj$[rsp]
  00039	48 c7 40 28 00
	00 00 00	 mov	 QWORD PTR [rax+40], 0
$LN2@unprotect:

; 653  :     }
; 654  :     dp = _PyObject_GetDictPtr(obj);

  00041	48 8b 4c 24 40	 mov	 rcx, QWORD PTR obj$[rsp]
  00046	e8 00 00 00 00	 call	 _PyObject_GetDictPtr
  0004b	48 89 44 24 20	 mov	 QWORD PTR dp$[rsp], rax

; 655  :     if (dp && _protected(*dp)) {

  00050	48 83 7c 24 20
	00		 cmp	 QWORD PTR dp$[rsp], 0
  00056	74 44		 je	 SHORT $LN1@unprotect
  00058	48 8b 44 24 20	 mov	 rax, QWORD PTR dp$[rsp]
  0005d	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00060	e8 00 00 00 00	 call	 _protected
  00065	0f be c0	 movsx	 eax, al
  00068	85 c0		 test	 eax, eax
  0006a	74 30		 je	 SHORT $LN1@unprotect

; 656  :         (*dp)->px_flags &= ~Py_PXFLAGS_RWLOCK;

  0006c	48 8b 44 24 20	 mov	 rax, QWORD PTR dp$[rsp]
  00071	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00074	b9 fb ff ff ff	 mov	 ecx, -5			; fffffffbH
  00079	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0007d	48 23 c1	 and	 rax, rcx
  00080	48 8b 4c 24 20	 mov	 rcx, QWORD PTR dp$[rsp]
  00085	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00088	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 657  :         (*dp)->srw_lock = NULL;

  0008c	48 8b 44 24 20	 mov	 rax, QWORD PTR dp$[rsp]
  00091	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00094	48 c7 40 28 00
	00 00 00	 mov	 QWORD PTR [rax+40], 0
$LN1@unprotect:

; 658  :     }
; 659  : }

  0009c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a0	c3		 ret	 0
_unprotect ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BB@JFIHBBGO@_async_unprotect?$AA@	; `string'
EXTRN	_Py_NoneStruct:BYTE
EXTRN	PyErr_SetNone:PROC
_BSS	SEGMENT
PyExc_ProtectionError DQ 01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_async_unprotect DD imagerel $LN4
	DD	imagerel $LN4+116
	DD	imagerel $unwind$_async_unprotect
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_async_unprotect DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT ??_C@_0BB@JFIHBBGO@_async_unprotect?$AA@
CONST	SEGMENT
??_C@_0BB@JFIHBBGO@_async_unprotect?$AA@ DB '_async_unprotect', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _async_unprotect
_TEXT	SEGMENT
self$ = 64
obj$ = 72
_async_unprotect PROC					; COMDAT

; 663  : {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 664  :     Py_INCREF(obj);

  0000e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR obj$[rsp]
  00013	e8 00 00 00 00	 call	 _Py_IncRef

; 665  :     if (Py_ISPX(obj)) {

  00018	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00020	4c 8b 4c 24 48	 mov	 r9, QWORD PTR obj$[rsp]
  00025	41 b8 99 02 00
	00		 mov	 r8d, 665		; 00000299H
  0002b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@PGHBGAOD@?4?4?2Python?2pyparallel?4c?$AA@
  00032	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@JFIHBBGO@_async_unprotect?$AA@
  00039	e8 00 00 00 00	 call	 _PyParallel_Guard
  0003e	85 c0		 test	 eax, eax
  00040	74 10		 je	 SHORT $LN1@async_unpr

; 666  :         PyErr_SetNone(PyExc_ProtectionError);

  00042	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ProtectionError
  00049	e8 00 00 00 00	 call	 PyErr_SetNone

; 667  :         return NULL;

  0004e	33 c0		 xor	 eax, eax
  00050	eb 1d		 jmp	 SHORT $LN2@async_unpr
$LN1@async_unpr:

; 668  :     }
; 669  :     _unprotect(obj);

  00052	48 8b 4c 24 48	 mov	 rcx, QWORD PTR obj$[rsp]
  00057	e8 00 00 00 00	 call	 _unprotect

; 670  :     Py_RETURN_NONE;

  0005c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00063	e8 00 00 00 00	 call	 _Py_IncRef
  00068	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
$LN2@async_unpr:

; 671  : }

  0006f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00073	c3		 ret	 0
_async_unprotect ENDP
_TEXT	ENDS
PUBLIC	_read_lock
;	COMDAT pdata
pdata	SEGMENT
$pdata$_async_read_lock DD imagerel $LN7
	DD	imagerel $LN7+78
	DD	imagerel $unwind$_async_read_lock
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_async_read_lock DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _async_read_lock
_TEXT	SEGMENT
self$ = 48
obj$ = 56
_async_read_lock PROC					; COMDAT

; 675  : {

$LN7:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
$LN4@async_read:

; 676  :     Px_PROTECTION_GUARD(obj);

  0000e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR obj$[rsp]
  00013	e8 00 00 00 00	 call	 _protected
  00018	0f be c0	 movsx	 eax, al
  0001b	85 c0		 test	 eax, eax
  0001d	75 10		 jne	 SHORT $LN1@async_read
  0001f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ProtectionError
  00026	e8 00 00 00 00	 call	 PyErr_SetNone
  0002b	33 c0		 xor	 eax, eax
  0002d	eb 1a		 jmp	 SHORT $LN5@async_read
$LN1@async_read:
  0002f	33 c0		 xor	 eax, eax
  00031	85 c0		 test	 eax, eax
  00033	75 d9		 jne	 SHORT $LN4@async_read

; 677  :     Py_INCREF(obj);

  00035	48 8b 4c 24 38	 mov	 rcx, QWORD PTR obj$[rsp]
  0003a	e8 00 00 00 00	 call	 _Py_IncRef

; 678  :     return _read_lock(obj);

  0003f	48 8b 4c 24 38	 mov	 rcx, QWORD PTR obj$[rsp]
  00044	e8 00 00 00 00	 call	 _read_lock
$LN5@async_read:

; 679  : }

  00049	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004d	c3		 ret	 0
_async_read_lock ENDP
_TEXT	ENDS
EXTRN	__imp_AcquireSRWLockShared:PROC
;	COMDAT pdata
; File c:\src\pyparallel\python\pyparallel_private.h
pdata	SEGMENT
$pdata$_read_lock DD imagerel $LN3
	DD	imagerel $LN3+37
	DD	imagerel $unwind$_read_lock
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_read_lock DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _read_lock
_TEXT	SEGMENT
obj$ = 48
_read_lock PROC						; COMDAT

; 1182 : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1183 :     AcquireSRWLockShared((PSRWLOCK)&(obj->srw_lock));

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR obj$[rsp]
  0000e	48 83 c0 28	 add	 rax, 40			; 00000028H
  00012	48 8b c8	 mov	 rcx, rax
  00015	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_AcquireSRWLockShared

; 1184 :     return obj;

  0001b	48 8b 44 24 30	 mov	 rax, QWORD PTR obj$[rsp]

; 1185 : }

  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	c3		 ret	 0
_read_lock ENDP
_TEXT	ENDS
PUBLIC	_read_unlock
;	COMDAT pdata
; File c:\src\pyparallel\python\pyparallel.c
pdata	SEGMENT
$pdata$_async_read_unlock DD imagerel $LN7
	DD	imagerel $LN7+78
	DD	imagerel $unwind$_async_read_unlock
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_async_read_unlock DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _async_read_unlock
_TEXT	SEGMENT
self$ = 48
obj$ = 56
_async_read_unlock PROC					; COMDAT

; 683  : {

$LN7:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
$LN4@async_read@2:

; 684  :     Px_PROTECTION_GUARD(obj);

  0000e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR obj$[rsp]
  00013	e8 00 00 00 00	 call	 _protected
  00018	0f be c0	 movsx	 eax, al
  0001b	85 c0		 test	 eax, eax
  0001d	75 10		 jne	 SHORT $LN1@async_read@2
  0001f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ProtectionError
  00026	e8 00 00 00 00	 call	 PyErr_SetNone
  0002b	33 c0		 xor	 eax, eax
  0002d	eb 1a		 jmp	 SHORT $LN5@async_read@2
$LN1@async_read@2:
  0002f	33 c0		 xor	 eax, eax
  00031	85 c0		 test	 eax, eax
  00033	75 d9		 jne	 SHORT $LN4@async_read@2

; 685  :     Py_INCREF(obj);

  00035	48 8b 4c 24 38	 mov	 rcx, QWORD PTR obj$[rsp]
  0003a	e8 00 00 00 00	 call	 _Py_IncRef

; 686  :     return _read_unlock(obj);

  0003f	48 8b 4c 24 38	 mov	 rcx, QWORD PTR obj$[rsp]
  00044	e8 00 00 00 00	 call	 _read_unlock
$LN5@async_read@2:

; 687  : }

  00049	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004d	c3		 ret	 0
_async_read_unlock ENDP
_TEXT	ENDS
EXTRN	__imp_ReleaseSRWLockShared:PROC
;	COMDAT pdata
; File c:\src\pyparallel\python\pyparallel_private.h
pdata	SEGMENT
$pdata$_read_unlock DD imagerel $LN3
	DD	imagerel $LN3+37
	DD	imagerel $unwind$_read_unlock
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_read_unlock DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _read_unlock
_TEXT	SEGMENT
obj$ = 48
_read_unlock PROC					; COMDAT

; 1191 : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1192 :     ReleaseSRWLockShared((PSRWLOCK)&(obj->srw_lock));

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR obj$[rsp]
  0000e	48 83 c0 28	 add	 rax, 40			; 00000028H
  00012	48 8b c8	 mov	 rcx, rax
  00015	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ReleaseSRWLockShared

; 1193 :     return obj;

  0001b	48 8b 44 24 30	 mov	 rax, QWORD PTR obj$[rsp]

; 1194 : }

  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	c3		 ret	 0
_read_unlock ENDP
_TEXT	ENDS
PUBLIC	_try_read_lock
;	COMDAT pdata
; File c:\src\pyparallel\python\pyparallel.c
pdata	SEGMENT
$pdata$_async_try_read_lock DD imagerel $LN9
	DD	imagerel $LN9+140
	DD	imagerel $unwind$_async_try_read_lock
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_async_try_read_lock DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _async_try_read_lock
_TEXT	SEGMENT
tv77 = 32
self$ = 64
obj$ = 72
_async_try_read_lock PROC				; COMDAT

; 691  : {

$LN9:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@async_try_:

; 692  :     Px_PROTECTION_GUARD(obj);

  0000e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR obj$[rsp]
  00013	e8 00 00 00 00	 call	 _protected
  00018	0f be c0	 movsx	 eax, al
  0001b	85 c0		 test	 eax, eax
  0001d	75 10		 jne	 SHORT $LN1@async_try_
  0001f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ProtectionError
  00026	e8 00 00 00 00	 call	 PyErr_SetNone
  0002b	33 c0		 xor	 eax, eax
  0002d	eb 58		 jmp	 SHORT $LN5@async_try_
$LN1@async_try_:
  0002f	33 c0		 xor	 eax, eax
  00031	85 c0		 test	 eax, eax
  00033	75 d9		 jne	 SHORT $LN4@async_try_

; 693  :     Py_INCREF(obj);

  00035	48 8b 4c 24 48	 mov	 rcx, QWORD PTR obj$[rsp]
  0003a	e8 00 00 00 00	 call	 _Py_IncRef

; 694  :     Py_RETURN_BOOL(_try_read_lock(obj));

  0003f	48 8b 4c 24 48	 mov	 rcx, QWORD PTR obj$[rsp]
  00044	e8 00 00 00 00	 call	 _try_read_lock
  00049	0f be c0	 movsx	 eax, al
  0004c	85 c0		 test	 eax, eax
  0004e	74 1a		 je	 SHORT $LN7@async_try_
  00050	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_TrueStruct
  00057	e8 00 00 00 00	 call	 _Py_IncRef
  0005c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  00063	48 89 44 24 20	 mov	 QWORD PTR tv77[rsp], rax
  00068	eb 18		 jmp	 SHORT $LN8@async_try_
$LN7@async_try_:
  0006a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_FalseStruct
  00071	e8 00 00 00 00	 call	 _Py_IncRef
  00076	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct
  0007d	48 89 44 24 20	 mov	 QWORD PTR tv77[rsp], rax
$LN8@async_try_:
  00082	48 8b 44 24 20	 mov	 rax, QWORD PTR tv77[rsp]
$LN5@async_try_:

; 695  : }

  00087	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0008b	c3		 ret	 0
_async_try_read_lock ENDP
_TEXT	ENDS
EXTRN	__imp_TryAcquireSRWLockShared:PROC
;	COMDAT pdata
; File c:\src\pyparallel\python\pyparallel_private.h
pdata	SEGMENT
$pdata$_try_read_lock DD imagerel $LN3
	DD	imagerel $LN3+32
	DD	imagerel $unwind$_try_read_lock
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_try_read_lock DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _try_read_lock
_TEXT	SEGMENT
obj$ = 48
_try_read_lock PROC					; COMDAT

; 1200 : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1201 :     return TryAcquireSRWLockShared((PSRWLOCK)&(obj->srw_lock));

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR obj$[rsp]
  0000e	48 83 c0 28	 add	 rax, 40			; 00000028H
  00012	48 8b c8	 mov	 rcx, rax
  00015	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_TryAcquireSRWLockShared

; 1202 : }

  0001b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001f	c3		 ret	 0
_try_read_lock ENDP
_TEXT	ENDS
PUBLIC	_write_lock
;	COMDAT pdata
; File c:\src\pyparallel\python\pyparallel.c
pdata	SEGMENT
$pdata$_async_write_lock DD imagerel $LN7
	DD	imagerel $LN7+78
	DD	imagerel $unwind$_async_write_lock
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_async_write_lock DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _async_write_lock
_TEXT	SEGMENT
self$ = 48
obj$ = 56
_async_write_lock PROC					; COMDAT

; 699  : {

$LN7:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
$LN4@async_writ:

; 700  :     Px_PROTECTION_GUARD(obj);

  0000e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR obj$[rsp]
  00013	e8 00 00 00 00	 call	 _protected
  00018	0f be c0	 movsx	 eax, al
  0001b	85 c0		 test	 eax, eax
  0001d	75 10		 jne	 SHORT $LN1@async_writ
  0001f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ProtectionError
  00026	e8 00 00 00 00	 call	 PyErr_SetNone
  0002b	33 c0		 xor	 eax, eax
  0002d	eb 1a		 jmp	 SHORT $LN5@async_writ
$LN1@async_writ:
  0002f	33 c0		 xor	 eax, eax
  00031	85 c0		 test	 eax, eax
  00033	75 d9		 jne	 SHORT $LN4@async_writ

; 701  :     Py_INCREF(obj);

  00035	48 8b 4c 24 38	 mov	 rcx, QWORD PTR obj$[rsp]
  0003a	e8 00 00 00 00	 call	 _Py_IncRef

; 702  :     return _write_lock(obj);

  0003f	48 8b 4c 24 38	 mov	 rcx, QWORD PTR obj$[rsp]
  00044	e8 00 00 00 00	 call	 _write_lock
$LN5@async_writ:

; 703  : }

  00049	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004d	c3		 ret	 0
_async_write_lock ENDP
_TEXT	ENDS
EXTRN	__imp_AcquireSRWLockExclusive:PROC
;	COMDAT pdata
; File c:\src\pyparallel\python\pyparallel_private.h
pdata	SEGMENT
$pdata$_write_lock DD imagerel $LN3
	DD	imagerel $LN3+37
	DD	imagerel $unwind$_write_lock
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_write_lock DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _write_lock
_TEXT	SEGMENT
obj$ = 48
_write_lock PROC					; COMDAT

; 1208 : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1209 :     AcquireSRWLockExclusive((PSRWLOCK)&(obj->srw_lock));

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR obj$[rsp]
  0000e	48 83 c0 28	 add	 rax, 40			; 00000028H
  00012	48 8b c8	 mov	 rcx, rax
  00015	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_AcquireSRWLockExclusive

; 1210 :     return obj;

  0001b	48 8b 44 24 30	 mov	 rax, QWORD PTR obj$[rsp]

; 1211 : }

  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	c3		 ret	 0
_write_lock ENDP
_TEXT	ENDS
PUBLIC	_write_unlock
;	COMDAT pdata
; File c:\src\pyparallel\python\pyparallel.c
pdata	SEGMENT
$pdata$_async_write_unlock DD imagerel $LN7
	DD	imagerel $LN7+78
	DD	imagerel $unwind$_async_write_unlock
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_async_write_unlock DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _async_write_unlock
_TEXT	SEGMENT
self$ = 48
obj$ = 56
_async_write_unlock PROC				; COMDAT

; 707  : {

$LN7:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
$LN4@async_writ@2:

; 708  :     Px_PROTECTION_GUARD(obj);

  0000e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR obj$[rsp]
  00013	e8 00 00 00 00	 call	 _protected
  00018	0f be c0	 movsx	 eax, al
  0001b	85 c0		 test	 eax, eax
  0001d	75 10		 jne	 SHORT $LN1@async_writ@2
  0001f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ProtectionError
  00026	e8 00 00 00 00	 call	 PyErr_SetNone
  0002b	33 c0		 xor	 eax, eax
  0002d	eb 1a		 jmp	 SHORT $LN5@async_writ@2
$LN1@async_writ@2:
  0002f	33 c0		 xor	 eax, eax
  00031	85 c0		 test	 eax, eax
  00033	75 d9		 jne	 SHORT $LN4@async_writ@2

; 709  :     Py_INCREF(obj);

  00035	48 8b 4c 24 38	 mov	 rcx, QWORD PTR obj$[rsp]
  0003a	e8 00 00 00 00	 call	 _Py_IncRef

; 710  :     return _write_unlock(obj);

  0003f	48 8b 4c 24 38	 mov	 rcx, QWORD PTR obj$[rsp]
  00044	e8 00 00 00 00	 call	 _write_unlock
$LN5@async_writ@2:

; 711  : }

  00049	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004d	c3		 ret	 0
_async_write_unlock ENDP
_TEXT	ENDS
EXTRN	__imp_ReleaseSRWLockExclusive:PROC
;	COMDAT pdata
; File c:\src\pyparallel\python\pyparallel_private.h
pdata	SEGMENT
$pdata$_write_unlock DD imagerel $LN3
	DD	imagerel $LN3+37
	DD	imagerel $unwind$_write_unlock
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_write_unlock DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _write_unlock
_TEXT	SEGMENT
obj$ = 48
_write_unlock PROC					; COMDAT

; 1217 : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1218 :     ReleaseSRWLockExclusive((PSRWLOCK)&(obj->srw_lock));

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR obj$[rsp]
  0000e	48 83 c0 28	 add	 rax, 40			; 00000028H
  00012	48 8b c8	 mov	 rcx, rax
  00015	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ReleaseSRWLockExclusive

; 1219 :     return obj;

  0001b	48 8b 44 24 30	 mov	 rax, QWORD PTR obj$[rsp]

; 1220 : }

  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	c3		 ret	 0
_write_unlock ENDP
_TEXT	ENDS
PUBLIC	_try_write_lock
;	COMDAT pdata
; File c:\src\pyparallel\python\pyparallel.c
pdata	SEGMENT
$pdata$_async_try_write_lock DD imagerel $LN9
	DD	imagerel $LN9+140
	DD	imagerel $unwind$_async_try_write_lock
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_async_try_write_lock DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _async_try_write_lock
_TEXT	SEGMENT
tv77 = 32
self$ = 64
obj$ = 72
_async_try_write_lock PROC				; COMDAT

; 715  : {

$LN9:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN4@async_try_@2:

; 716  :     Px_PROTECTION_GUARD(obj);

  0000e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR obj$[rsp]
  00013	e8 00 00 00 00	 call	 _protected
  00018	0f be c0	 movsx	 eax, al
  0001b	85 c0		 test	 eax, eax
  0001d	75 10		 jne	 SHORT $LN1@async_try_@2
  0001f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ProtectionError
  00026	e8 00 00 00 00	 call	 PyErr_SetNone
  0002b	33 c0		 xor	 eax, eax
  0002d	eb 58		 jmp	 SHORT $LN5@async_try_@2
$LN1@async_try_@2:
  0002f	33 c0		 xor	 eax, eax
  00031	85 c0		 test	 eax, eax
  00033	75 d9		 jne	 SHORT $LN4@async_try_@2

; 717  :     Py_INCREF(obj);

  00035	48 8b 4c 24 48	 mov	 rcx, QWORD PTR obj$[rsp]
  0003a	e8 00 00 00 00	 call	 _Py_IncRef

; 718  :     Py_RETURN_BOOL(_try_write_lock(obj));

  0003f	48 8b 4c 24 48	 mov	 rcx, QWORD PTR obj$[rsp]
  00044	e8 00 00 00 00	 call	 _try_write_lock
  00049	0f be c0	 movsx	 eax, al
  0004c	85 c0		 test	 eax, eax
  0004e	74 1a		 je	 SHORT $LN7@async_try_@2
  00050	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_TrueStruct
  00057	e8 00 00 00 00	 call	 _Py_IncRef
  0005c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  00063	48 89 44 24 20	 mov	 QWORD PTR tv77[rsp], rax
  00068	eb 18		 jmp	 SHORT $LN8@async_try_@2
$LN7@async_try_@2:
  0006a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_FalseStruct
  00071	e8 00 00 00 00	 call	 _Py_IncRef
  00076	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct
  0007d	48 89 44 24 20	 mov	 QWORD PTR tv77[rsp], rax
$LN8@async_try_@2:
  00082	48 8b 44 24 20	 mov	 rax, QWORD PTR tv77[rsp]
$LN5@async_try_@2:

; 719  : }

  00087	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0008b	c3		 ret	 0
_async_try_write_lock ENDP
_TEXT	ENDS
EXTRN	__imp_TryAcquireSRWLockExclusive:PROC
;	COMDAT pdata
; File c:\src\pyparallel\python\pyparallel_private.h
pdata	SEGMENT
$pdata$_try_write_lock DD imagerel $LN3
	DD	imagerel $LN3+32
	DD	imagerel $unwind$_try_write_lock
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_try_write_lock DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _try_write_lock
_TEXT	SEGMENT
obj$ = 48
_try_write_lock PROC					; COMDAT

; 1226 : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1227 :     return TryAcquireSRWLockExclusive((PSRWLOCK)&(obj->srw_lock));

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR obj$[rsp]
  0000e	48 83 c0 28	 add	 rax, 40			; 00000028H
  00012	48 8b c8	 mov	 rcx, rax
  00015	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_TryAcquireSRWLockExclusive

; 1228 : }

  0001b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001f	c3		 ret	 0
_try_write_lock ENDP
_TEXT	ENDS
PUBLIC	_PyHeap_NewObject
;	COMDAT pdata
; File c:\src\pyparallel\python\pyparallel.c
pdata	SEGMENT
$pdata$_PyHeap_NewObject DD imagerel $LN3
	DD	imagerel $LN3+35
	DD	imagerel $unwind$_PyHeap_NewObject
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyHeap_NewObject DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _PyHeap_NewObject
_TEXT	SEGMENT
c$ = 48
_PyHeap_NewObject PROC					; COMDAT

; 724  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 725  :     return (Object *)_PyHeap_Malloc(c, sizeof(Object), 0, 0);

  00009	45 33 c9	 xor	 r9d, r9d
  0000c	45 33 c0	 xor	 r8d, r8d
  0000f	ba 18 00 00 00	 mov	 edx, 24
  00014	48 8b 4c 24 30	 mov	 rcx, QWORD PTR c$[rsp]
  00019	e8 00 00 00 00	 call	 _PyHeap_Malloc

; 726  : }

  0001e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00022	c3		 ret	 0
_PyHeap_NewObject ENDP
_TEXT	ENDS
PUBLIC	??_C@_1CG@IAFJBALO@?$AA?$CB?$AA?$CI?$AAP?$AAx?$AA_?$AAP?$AAE?$AAR?$AAS?$AAI?$AAS?$AAT?$AAE?$AAD?$AA?$CI?$AAo?$AA?$CJ?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	_Px_TryPersist
EXTRN	__imp_InitOnceComplete:PROC
EXTRN	PyErr_SetFromWindowsErr:PROC
EXTRN	__imp_InitOnceBeginInitialize:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Px_TryPersist DD imagerel $LN10
	DD	imagerel $LN10+374
	DD	imagerel $unwind$_Px_TryPersist
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Px_TryPersist DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_1CG@IAFJBALO@?$AA?$CB?$AA?$CI?$AAP?$AAx?$AA_?$AAP?$AAE?$AAR?$AAS?$AAI?$AAS?$AAT?$AAE?$AAD?$AA?$CI?$AAo?$AA?$CJ?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CG@IAFJBALO@?$AA?$CB?$AA?$CI?$AAP?$AAx?$AA_?$AAP?$AAE?$AAR?$AAS?$AAI?$AAS?$AAT?$AAE?$AAD?$AA?$CI?$AAo?$AA?$CJ?$AA?$CJ?$AA?$AA@ DB '!'
	DB	00H, '(', 00H, 'P', 00H, 'x', 00H, '_', 00H, 'P', 00H, 'E', 00H
	DB	'R', 00H, 'S', 00H, 'I', 00H, 'S', 00H, 'T', 00H, 'E', 00H, 'D'
	DB	00H, '(', 00H, 'o', 00H, ')', 00H, ')', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Px_TryPersist
_TEXT	SEGMENT
x$ = 32
pending$ = 40
c$ = 48
o$ = 80
_Px_TryPersist PROC					; COMDAT

; 739  : {

$LN10:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 740  :     BOOL pending;
; 741  :     Context  *c;
; 742  :     PxObject *x;
; 743  :     if (!o || (!(Px_ISPX(o))) || Px_PERSISTED(o))

  00009	48 83 7c 24 50
	00		 cmp	 QWORD PTR o$[rsp], 0
  0000f	74 24		 je	 SHORT $LN5@Px_TryPers
  00011	48 8b 44 24 50	 mov	 rax, QWORD PTR o$[rsp]
  00016	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0001a	48 83 e0 02	 and	 rax, 2
  0001e	48 85 c0	 test	 rax, rax
  00021	74 12		 je	 SHORT $LN5@Px_TryPers
  00023	48 8b 44 24 50	 mov	 rax, QWORD PTR o$[rsp]
  00028	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0002c	48 83 e0 20	 and	 rax, 32			; 00000020H
  00030	48 85 c0	 test	 rax, rax
  00033	74 0a		 je	 SHORT $LN6@Px_TryPers
$LN5@Px_TryPers:

; 744  :         return 1;

  00035	b8 01 00 00 00	 mov	 eax, 1
  0003a	e9 32 01 00 00	 jmp	 $LN7@Px_TryPers
$LN6@Px_TryPers:

; 745  : 
; 746  :     x = Py_ASPX(o);

  0003f	48 8b 44 24 50	 mov	 rax, QWORD PTR o$[rsp]
  00044	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00048	48 89 44 24 20	 mov	 QWORD PTR x$[rsp], rax

; 747  :     if (!InitOnceBeginInitialize(&(x->persist), 0, &pending, NULL)) {

  0004d	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  00052	48 83 c0 20	 add	 rax, 32			; 00000020H
  00056	45 33 c9	 xor	 r9d, r9d
  00059	4c 8d 44 24 28	 lea	 r8, QWORD PTR pending$[rsp]
  0005e	33 d2		 xor	 edx, edx
  00060	48 8b c8	 mov	 rcx, rax
  00063	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_InitOnceBeginInitialize
  00069	85 c0		 test	 eax, eax
  0006b	75 0e		 jne	 SHORT $LN4@Px_TryPers

; 748  :         PyErr_SetFromWindowsErr(0);

  0006d	33 c9		 xor	 ecx, ecx
  0006f	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr

; 749  :         return 0;

  00074	33 c0		 xor	 eax, eax
  00076	e9 f6 00 00 00	 jmp	 $LN7@Px_TryPers
$LN4@Px_TryPers:

; 750  :     }
; 751  :     if (!pending)

  0007b	83 7c 24 28 00	 cmp	 DWORD PTR pending$[rsp], 0
  00080	75 0a		 jne	 SHORT $LN3@Px_TryPers

; 752  :         return 1;

  00082	b8 01 00 00 00	 mov	 eax, 1
  00087	e9 e5 00 00 00	 jmp	 $LN7@Px_TryPers
$LN3@Px_TryPers:

; 753  : 
; 754  :     assert(!(Px_PERSISTED(o)));

  0008c	48 8b 44 24 50	 mov	 rax, QWORD PTR o$[rsp]
  00091	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00095	48 83 e0 20	 and	 rax, 32			; 00000020H
  00099	48 85 c0	 test	 rax, rax
  0009c	74 1c		 je	 SHORT $LN9@Px_TryPers
  0009e	41 b8 f2 02 00
	00		 mov	 r8d, 754		; 000002f2H
  000a4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  000ab	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@IAFJBALO@?$AA?$CB?$AA?$CI?$AAP?$AAx?$AA_?$AAP?$AAE?$AAR?$AAS?$AAI?$AAS?$AAT?$AAE?$AAD?$AA?$CI?$AAo?$AA?$CJ?$AA?$CJ?$AA?$AA@
  000b2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000b8	33 c0		 xor	 eax, eax
$LN9@Px_TryPers:

; 755  : 
; 756  :     c = x->ctx;

  000ba	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  000bf	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c2	48 89 44 24 30	 mov	 QWORD PTR c$[rsp], rax

; 757  :     if (!Px_CTX_IS_PERSISTED(c))

  000c7	48 8b 44 24 30	 mov	 rax, QWORD PTR c$[rsp]
  000cc	8b 80 f8 00 00
	00		 mov	 eax, DWORD PTR [rax+248]
  000d2	83 e0 01	 and	 eax, 1
  000d5	85 c0		 test	 eax, eax
  000d7	75 19		 jne	 SHORT $LN2@Px_TryPers

; 758  :         Px_CTXFLAGS(c) |= Px_CTXFLAGS_IS_PERSISTED;

  000d9	48 8b 44 24 30	 mov	 rax, QWORD PTR c$[rsp]
  000de	8b 80 f8 00 00
	00		 mov	 eax, DWORD PTR [rax+248]
  000e4	83 c8 01	 or	 eax, 1
  000e7	48 8b 4c 24 30	 mov	 rcx, QWORD PTR c$[rsp]
  000ec	89 81 f8 00 00
	00		 mov	 DWORD PTR [rcx+248], eax
$LN2@Px_TryPers:

; 759  : 
; 760  :     c->persisted_count++;

  000f2	48 8b 44 24 30	 mov	 rax, QWORD PTR c$[rsp]
  000f7	8b 80 10 38 00
	00		 mov	 eax, DWORD PTR [rax+14352]
  000fd	ff c0		 inc	 eax
  000ff	48 8b 4c 24 30	 mov	 rcx, QWORD PTR c$[rsp]
  00104	89 81 10 38 00
	00		 mov	 DWORD PTR [rcx+14352], eax

; 761  : 
; 762  :     Py_PXFLAGS(o) |= Py_PXFLAGS_PERSISTED;

  0010a	48 8b 44 24 50	 mov	 rax, QWORD PTR o$[rsp]
  0010f	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00113	48 83 c8 20	 or	 rax, 32			; 00000020H
  00117	48 8b 4c 24 50	 mov	 rcx, QWORD PTR o$[rsp]
  0011c	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 763  :     Py_REFCNT(o) = 1;

  00120	48 8b 44 24 50	 mov	 rax, QWORD PTR o$[rsp]
  00125	48 c7 40 50 01
	00 00 00	 mov	 QWORD PTR [rax+80], 1

; 764  : 
; 765  :     Px_CTXFLAGS(c) |= Px_CTXFLAGS_IS_PERSISTED;

  0012d	48 8b 44 24 30	 mov	 rax, QWORD PTR c$[rsp]
  00132	8b 80 f8 00 00
	00		 mov	 eax, DWORD PTR [rax+248]
  00138	83 c8 01	 or	 eax, 1
  0013b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR c$[rsp]
  00140	89 81 f8 00 00
	00		 mov	 DWORD PTR [rcx+248], eax

; 766  : 
; 767  :     if (!InitOnceComplete(&(x->persist), 0, NULL)) {

  00146	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  0014b	48 83 c0 20	 add	 rax, 32			; 00000020H
  0014f	45 33 c0	 xor	 r8d, r8d
  00152	33 d2		 xor	 edx, edx
  00154	48 8b c8	 mov	 rcx, rax
  00157	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_InitOnceComplete
  0015d	85 c0		 test	 eax, eax
  0015f	75 0b		 jne	 SHORT $LN1@Px_TryPers

; 768  :         PyErr_SetFromWindowsErr(0);

  00161	33 c9		 xor	 ecx, ecx
  00163	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr

; 769  :         return 0;

  00168	33 c0		 xor	 eax, eax
  0016a	eb 05		 jmp	 SHORT $LN7@Px_TryPers
$LN1@Px_TryPers:

; 770  :     }
; 771  : 
; 772  :     return 1;

  0016c	b8 01 00 00 00	 mov	 eax, 1
$LN7@Px_TryPers:

; 773  : }

  00171	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00175	c3		 ret	 0
_Px_TryPersist ENDP
_TEXT	ENDS
PUBLIC	??_C@_1BK@NNCALBJ@?$AA?$CB?$AAP?$AAx?$AA_?$AAX?$AAI?$AAS?$AAP?$AAX?$AA?$CI?$AAv?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BI@NLHBCOIC@?$AA?$CB?$AAP?$AAx?$AA_?$AAI?$AAS?$AAP?$AAX?$AA?$CI?$AAk?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BI@EAOAGMJE@?$AA?$CB?$AAP?$AAx?$AA_?$AAI?$AAS?$AAP?$AAX?$AA?$CI?$AAo?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	_PyParallel_ExecutingCallbackFromMainThread
PUBLIC	_Px_objobjargproc_ass
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Px_objobjargproc_ass DD imagerel $LN13
	DD	imagerel $LN13+308
	DD	imagerel $unwind$_Px_objobjargproc_ass
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Px_objobjargproc_ass DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT ??_C@_1BK@NNCALBJ@?$AA?$CB?$AAP?$AAx?$AA_?$AAX?$AAI?$AAS?$AAP?$AAX?$AA?$CI?$AAv?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1BK@NNCALBJ@?$AA?$CB?$AAP?$AAx?$AA_?$AAX?$AAI?$AAS?$AAP?$AAX?$AA?$CI?$AAv?$AA?$CJ?$AA?$AA@ DB '!'
	DB	00H, 'P', 00H, 'x', 00H, '_', 00H, 'X', 00H, 'I', 00H, 'S', 00H
	DB	'P', 00H, 'X', 00H, '(', 00H, 'v', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BI@NLHBCOIC@?$AA?$CB?$AAP?$AAx?$AA_?$AAI?$AAS?$AAP?$AAX?$AA?$CI?$AAk?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1BI@NLHBCOIC@?$AA?$CB?$AAP?$AAx?$AA_?$AAI?$AAS?$AAP?$AAX?$AA?$CI?$AAk?$AA?$CJ?$AA?$AA@ DB '!'
	DB	00H, 'P', 00H, 'x', 00H, '_', 00H, 'I', 00H, 'S', 00H, 'P', 00H
	DB	'X', 00H, '(', 00H, 'k', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BI@EAOAGMJE@?$AA?$CB?$AAP?$AAx?$AA_?$AAI?$AAS?$AAP?$AAX?$AA?$CI?$AAo?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1BI@EAOAGMJE@?$AA?$CB?$AAP?$AAx?$AA_?$AAI?$AAS?$AAP?$AAX?$AA?$CI?$AAo?$AA?$CJ?$AA?$AA@ DB '!'
	DB	00H, 'P', 00H, 'x', 00H, '_', 00H, 'I', 00H, 'S', 00H, 'P', 00H
	DB	'X', 00H, '(', 00H, 'o', 00H, ')', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Px_objobjargproc_ass
_TEXT	SEGMENT
tv85 = 32
tv136 = 40
o$ = 64
k$ = 72
v$ = 80
_Px_objobjargproc_ass PROC				; COMDAT

; 778  : {

$LN13:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 779  :     if (!Py_PXCTX && !Py_PXCB) {

  00013	e8 00 00 00 00	 call	 _Py_PXCTX
  00018	85 c0		 test	 eax, eax
  0001a	0f 85 b2 00 00
	00		 jne	 $LN3@Px_objobja
  00020	e8 00 00 00 00	 call	 _PyParallel_ExecutingCallbackFromMainThread
  00025	85 c0		 test	 eax, eax
  00027	0f 85 a5 00 00
	00		 jne	 $LN3@Px_objobja

; 780  :         assert(!Px_ISPX(o));

  0002d	48 8b 44 24 40	 mov	 rax, QWORD PTR o$[rsp]
  00032	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00036	48 83 e0 02	 and	 rax, 2
  0003a	48 85 c0	 test	 rax, rax
  0003d	74 1c		 je	 SHORT $LN6@Px_objobja
  0003f	41 b8 0c 03 00
	00		 mov	 r8d, 780		; 0000030cH
  00045	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0004c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BI@EAOAGMJE@?$AA?$CB?$AAP?$AAx?$AA_?$AAI?$AAS?$AAP?$AAX?$AA?$CI?$AAo?$AA?$CJ?$AA?$AA@
  00053	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00059	33 c0		 xor	 eax, eax
$LN6@Px_objobja:

; 781  :         assert(!Px_ISPX(k));

  0005b	48 8b 44 24 48	 mov	 rax, QWORD PTR k$[rsp]
  00060	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00064	48 83 e0 02	 and	 rax, 2
  00068	48 85 c0	 test	 rax, rax
  0006b	74 1c		 je	 SHORT $LN7@Px_objobja
  0006d	41 b8 0d 03 00
	00		 mov	 r8d, 781		; 0000030dH
  00073	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0007a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BI@NLHBCOIC@?$AA?$CB?$AAP?$AAx?$AA_?$AAI?$AAS?$AAP?$AAX?$AA?$CI?$AAk?$AA?$CJ?$AA?$AA@
  00081	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00087	33 c0		 xor	 eax, eax
$LN7@Px_objobja:

; 782  :         assert(!Px_XISPX(v));

  00089	48 83 7c 24 50
	00		 cmp	 QWORD PTR v$[rsp], 0
  0008f	74 14		 je	 SHORT $LN8@Px_objobja
  00091	48 8b 44 24 50	 mov	 rax, QWORD PTR v$[rsp]
  00096	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0009a	48 83 e0 02	 and	 rax, 2
  0009e	48 89 44 24 20	 mov	 QWORD PTR tv85[rsp], rax
  000a3	eb 09		 jmp	 SHORT $LN9@Px_objobja
$LN8@Px_objobja:
  000a5	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR tv85[rsp], 0
$LN9@Px_objobja:
  000ae	48 83 7c 24 20
	00		 cmp	 QWORD PTR tv85[rsp], 0
  000b4	74 1c		 je	 SHORT $LN10@Px_objobja
  000b6	41 b8 0e 03 00
	00		 mov	 r8d, 782		; 0000030eH
  000bc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  000c3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BK@NNCALBJ@?$AA?$CB?$AAP?$AAx?$AA_?$AAX?$AAI?$AAS?$AAP?$AAX?$AA?$CI?$AAv?$AA?$CJ?$AA?$AA@
  000ca	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000d0	33 c0		 xor	 eax, eax
$LN10@Px_objobja:
$LN3@Px_objobja:

; 783  :     }
; 784  :     if (!Px_ISPY(o) || (!Py_PXCTX && !Py_PXCB))

  000d2	48 8b 44 24 40	 mov	 rax, QWORD PTR o$[rsp]
  000d7	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  000db	48 83 e0 01	 and	 rax, 1
  000df	48 85 c0	 test	 rax, rax
  000e2	74 12		 je	 SHORT $LN1@Px_objobja
  000e4	e8 00 00 00 00	 call	 _Py_PXCTX
  000e9	85 c0		 test	 eax, eax
  000eb	75 10		 jne	 SHORT $LN2@Px_objobja
  000ed	e8 00 00 00 00	 call	 _PyParallel_ExecutingCallbackFromMainThread
  000f2	85 c0		 test	 eax, eax
  000f4	75 07		 jne	 SHORT $LN2@Px_objobja
$LN1@Px_objobja:

; 785  :         return 1;

  000f6	b8 01 00 00 00	 mov	 eax, 1
  000fb	eb 32		 jmp	 SHORT $LN4@Px_objobja
$LN2@Px_objobja:

; 786  : 
; 787  :     return !(!_Px_TryPersist(k) || !_Px_TryPersist(v));

  000fd	48 8b 4c 24 48	 mov	 rcx, QWORD PTR k$[rsp]
  00102	e8 00 00 00 00	 call	 _Px_TryPersist
  00107	85 c0		 test	 eax, eax
  00109	74 18		 je	 SHORT $LN11@Px_objobja
  0010b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR v$[rsp]
  00110	e8 00 00 00 00	 call	 _Px_TryPersist
  00115	85 c0		 test	 eax, eax
  00117	74 0a		 je	 SHORT $LN11@Px_objobja
  00119	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR tv136[rsp], 1
  00121	eb 08		 jmp	 SHORT $LN12@Px_objobja
$LN11@Px_objobja:
  00123	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR tv136[rsp], 0
$LN12@Px_objobja:
  0012b	8b 44 24 28	 mov	 eax, DWORD PTR tv136[rsp]
$LN4@Px_objobja:

; 788  : }

  0012f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00133	c3		 ret	 0
_Px_objobjargproc_ass ENDP
_TEXT	ENDS
PUBLIC	_PyObject_GenericSetAttr
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyObject_GenericSetAttr DD imagerel $LN10
	DD	imagerel $LN10+247
	DD	imagerel $unwind$_PyObject_GenericSetAttr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyObject_GenericSetAttr DD 011301H
	DD	06213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _PyObject_GenericSetAttr
_TEXT	SEGMENT
result$ = 32
tp$ = 40
o$ = 64
n$ = 72
v$ = 80
_PyObject_GenericSetAttr PROC				; COMDAT

; 793  : {

$LN10:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 794  :     PyTypeObject *tp;
; 795  :     int result;
; 796  :     assert(Py_ORIG_TYPE(o));

  00013	48 8b 44 24 40	 mov	 rax, QWORD PTR o$[rsp]
  00018	48 83 78 38 00	 cmp	 QWORD PTR [rax+56], 0
  0001d	75 1c		 jne	 SHORT $LN9@PyObject_G
  0001f	41 b8 1c 03 00
	00		 mov	 r8d, 796		; 0000031cH
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CA@LIAOCINA@?$AAP?$AAy?$AA_?$AAO?$AAR?$AAI?$AAG?$AA_?$AAT?$AAY?$AAP?$AAE?$AA?$CI?$AAo?$AA?$CJ?$AA?$AA@
  00033	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00039	33 c0		 xor	 eax, eax
$LN9@PyObject_G:

; 797  : 
; 798  :     _Px_WRITE_LOCK(o);

  0003b	48 8b 44 24 40	 mov	 rax, QWORD PTR o$[rsp]
  00040	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00044	48 83 e0 04	 and	 rax, 4
  00048	48 85 c0	 test	 rax, rax
  0004b	74 0a		 je	 SHORT $LN6@PyObject_G
  0004d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR o$[rsp]
  00052	e8 00 00 00 00	 call	 _write_lock
$LN6@PyObject_G:

; 799  :     tp = Py_ORIG_TYPE_CAST(o);

  00057	48 8b 44 24 40	 mov	 rax, QWORD PTR o$[rsp]
  0005c	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  00060	48 89 44 24 28	 mov	 QWORD PTR tp$[rsp], rax

; 800  :     if (tp->tp_setattro)

  00065	48 8b 44 24 28	 mov	 rax, QWORD PTR tp$[rsp]
  0006a	48 83 b8 f0 00
	00 00 00	 cmp	 QWORD PTR [rax+240], 0
  00072	74 20		 je	 SHORT $LN5@PyObject_G

; 801  :         result = (*tp->tp_setattro)(o, n, v);

  00074	4c 8b 44 24 50	 mov	 r8, QWORD PTR v$[rsp]
  00079	48 8b 54 24 48	 mov	 rdx, QWORD PTR n$[rsp]
  0007e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR o$[rsp]
  00083	48 8b 44 24 28	 mov	 rax, QWORD PTR tp$[rsp]
  00088	ff 90 f0 00 00
	00		 call	 QWORD PTR [rax+240]
  0008e	89 44 24 20	 mov	 DWORD PTR result$[rsp], eax

; 802  :     else

  00092	eb 18		 jmp	 SHORT $LN4@PyObject_G
$LN5@PyObject_G:

; 803  :         result = PyObject_GenericSetAttr(o, n, v);

  00094	4c 8b 44 24 50	 mov	 r8, QWORD PTR v$[rsp]
  00099	48 8b 54 24 48	 mov	 rdx, QWORD PTR n$[rsp]
  0009e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR o$[rsp]
  000a3	e8 00 00 00 00	 call	 PyObject_GenericSetAttr
  000a8	89 44 24 20	 mov	 DWORD PTR result$[rsp], eax
$LN4@PyObject_G:

; 804  :     _Px_WRITE_UNLOCK(o);

  000ac	48 8b 44 24 40	 mov	 rax, QWORD PTR o$[rsp]
  000b1	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  000b5	48 83 e0 04	 and	 rax, 4
  000b9	48 85 c0	 test	 rax, rax
  000bc	74 0a		 je	 SHORT $LN3@PyObject_G
  000be	48 8b 4c 24 40	 mov	 rcx, QWORD PTR o$[rsp]
  000c3	e8 00 00 00 00	 call	 _write_unlock
$LN3@PyObject_G:

; 805  :     if (result == -1 || !_Px_objobjargproc_ass(o, n, v))

  000c8	83 7c 24 20 ff	 cmp	 DWORD PTR result$[rsp], -1
  000cd	74 18		 je	 SHORT $LN1@PyObject_G
  000cf	4c 8b 44 24 50	 mov	 r8, QWORD PTR v$[rsp]
  000d4	48 8b 54 24 48	 mov	 rdx, QWORD PTR n$[rsp]
  000d9	48 8b 4c 24 40	 mov	 rcx, QWORD PTR o$[rsp]
  000de	e8 00 00 00 00	 call	 _Px_objobjargproc_ass
  000e3	85 c0		 test	 eax, eax
  000e5	75 07		 jne	 SHORT $LN2@PyObject_G
$LN1@PyObject_G:

; 806  :         return -1;

  000e7	b8 ff ff ff ff	 mov	 eax, -1
  000ec	eb 04		 jmp	 SHORT $LN7@PyObject_G
$LN2@PyObject_G:

; 807  : 
; 808  :     return result;

  000ee	8b 44 24 20	 mov	 eax, DWORD PTR result$[rsp]
$LN7@PyObject_G:

; 809  : }

  000f2	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000f6	c3		 ret	 0
_PyObject_GenericSetAttr ENDP
_TEXT	ENDS
PUBLIC	_PyObject_GenericGetAttr
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyObject_GenericGetAttr DD imagerel $LN8
	DD	imagerel $LN8+197
	DD	imagerel $unwind$_PyObject_GenericGetAttr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyObject_GenericGetAttr DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _PyObject_GenericGetAttr
_TEXT	SEGMENT
result$ = 32
tp$ = 40
o$ = 64
n$ = 72
_PyObject_GenericGetAttr PROC				; COMDAT

; 813  : {

$LN8:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 814  :     PyTypeObject *tp;
; 815  :     PyObject *result;
; 816  :     assert(Py_ORIG_TYPE(o));

  0000e	48 8b 44 24 40	 mov	 rax, QWORD PTR o$[rsp]
  00013	48 83 78 38 00	 cmp	 QWORD PTR [rax+56], 0
  00018	75 1c		 jne	 SHORT $LN7@PyObject_G@2
  0001a	41 b8 30 03 00
	00		 mov	 r8d, 816		; 00000330H
  00020	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00027	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CA@LIAOCINA@?$AAP?$AAy?$AA_?$AAO?$AAR?$AAI?$AAG?$AA_?$AAT?$AAY?$AAP?$AAE?$AA?$CI?$AAo?$AA?$CJ?$AA?$AA@
  0002e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00034	33 c0		 xor	 eax, eax
$LN7@PyObject_G@2:

; 817  : 
; 818  :     _Px_READ_LOCK(o);

  00036	48 8b 44 24 40	 mov	 rax, QWORD PTR o$[rsp]
  0003b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0003f	48 83 e0 04	 and	 rax, 4
  00043	48 85 c0	 test	 rax, rax
  00046	74 0a		 je	 SHORT $LN4@PyObject_G@2
  00048	48 8b 4c 24 40	 mov	 rcx, QWORD PTR o$[rsp]
  0004d	e8 00 00 00 00	 call	 _read_lock
$LN4@PyObject_G@2:

; 819  :     tp = Py_ORIG_TYPE_CAST(o);

  00052	48 8b 44 24 40	 mov	 rax, QWORD PTR o$[rsp]
  00057	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  0005b	48 89 44 24 28	 mov	 QWORD PTR tp$[rsp], rax

; 820  :     if (tp->tp_getattro)

  00060	48 8b 44 24 28	 mov	 rax, QWORD PTR tp$[rsp]
  00065	48 83 b8 e8 00
	00 00 00	 cmp	 QWORD PTR [rax+232], 0
  0006d	74 1c		 je	 SHORT $LN3@PyObject_G@2

; 821  :         result = (*tp->tp_getattro)(o, n);

  0006f	48 8b 54 24 48	 mov	 rdx, QWORD PTR n$[rsp]
  00074	48 8b 4c 24 40	 mov	 rcx, QWORD PTR o$[rsp]
  00079	48 8b 44 24 28	 mov	 rax, QWORD PTR tp$[rsp]
  0007e	ff 90 e8 00 00
	00		 call	 QWORD PTR [rax+232]
  00084	48 89 44 24 20	 mov	 QWORD PTR result$[rsp], rax

; 822  :     else

  00089	eb 14		 jmp	 SHORT $LN2@PyObject_G@2
$LN3@PyObject_G@2:

; 823  :         result = PyObject_GenericGetAttr(o, n);

  0008b	48 8b 54 24 48	 mov	 rdx, QWORD PTR n$[rsp]
  00090	48 8b 4c 24 40	 mov	 rcx, QWORD PTR o$[rsp]
  00095	e8 00 00 00 00	 call	 PyObject_GenericGetAttr
  0009a	48 89 44 24 20	 mov	 QWORD PTR result$[rsp], rax
$LN2@PyObject_G@2:

; 824  :     _Px_READ_UNLOCK(o);

  0009f	48 8b 44 24 40	 mov	 rax, QWORD PTR o$[rsp]
  000a4	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  000a8	48 83 e0 04	 and	 rax, 4
  000ac	48 85 c0	 test	 rax, rax
  000af	74 0a		 je	 SHORT $LN1@PyObject_G@2
  000b1	48 8b 4c 24 40	 mov	 rcx, QWORD PTR o$[rsp]
  000b6	e8 00 00 00 00	 call	 _read_unlock
$LN1@PyObject_G@2:

; 825  : 
; 826  :     return result;

  000bb	48 8b 44 24 20	 mov	 rax, QWORD PTR result$[rsp]

; 827  : }

  000c0	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000c4	c3		 ret	 0
_PyObject_GenericGetAttr ENDP
_TEXT	ENDS
PUBLIC	_Py_DecRef
PUBLIC	_PyObject_SetAttrString
EXTRN	PyUnicode_InternFromString:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyObject_SetAttrString DD imagerel $LN10
	DD	imagerel $LN10+285
	DD	imagerel $unwind$_PyObject_SetAttrString
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyObject_SetAttrString DD 011301H
	DD	08213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _PyObject_SetAttrString
_TEXT	SEGMENT
result$ = 32
tp$ = 40
s$126237 = 48
o$ = 80
n$ = 88
v$ = 96
_PyObject_SetAttrString PROC				; COMDAT

; 831  : {

$LN10:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 832  :     PyTypeObject *tp;
; 833  :     int result;
; 834  :     assert(Py_ORIG_TYPE(o));

  00013	48 8b 44 24 50	 mov	 rax, QWORD PTR o$[rsp]
  00018	48 83 78 38 00	 cmp	 QWORD PTR [rax+56], 0
  0001d	75 1c		 jne	 SHORT $LN9@PyObject_S
  0001f	41 b8 42 03 00
	00		 mov	 r8d, 834		; 00000342H
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CA@LIAOCINA@?$AAP?$AAy?$AA_?$AAO?$AAR?$AAI?$AAG?$AA_?$AAT?$AAY?$AAP?$AAE?$AA?$CI?$AAo?$AA?$CJ?$AA?$AA@
  00033	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00039	33 c0		 xor	 eax, eax
$LN9@PyObject_S:

; 835  : 
; 836  :     _Px_WRITE_LOCK(o);

  0003b	48 8b 44 24 50	 mov	 rax, QWORD PTR o$[rsp]
  00040	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00044	48 83 e0 04	 and	 rax, 4
  00048	48 85 c0	 test	 rax, rax
  0004b	74 0a		 je	 SHORT $LN6@PyObject_S
  0004d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR o$[rsp]
  00052	e8 00 00 00 00	 call	 _write_lock
$LN6@PyObject_S:

; 837  :     tp = Py_ORIG_TYPE_CAST(o);

  00057	48 8b 44 24 50	 mov	 rax, QWORD PTR o$[rsp]
  0005c	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  00060	48 89 44 24 28	 mov	 QWORD PTR tp$[rsp], rax

; 838  :     if (tp->tp_setattr)

  00065	48 8b 44 24 28	 mov	 rax, QWORD PTR tp$[rsp]
  0006a	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  00072	74 20		 je	 SHORT $LN5@PyObject_S

; 839  :         result = (*tp->tp_setattr)(o, n, v);

  00074	4c 8b 44 24 60	 mov	 r8, QWORD PTR v$[rsp]
  00079	48 8b 54 24 58	 mov	 rdx, QWORD PTR n$[rsp]
  0007e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR o$[rsp]
  00083	48 8b 44 24 28	 mov	 rax, QWORD PTR tp$[rsp]
  00088	ff 90 a0 00 00
	00		 call	 QWORD PTR [rax+160]
  0008e	89 44 24 20	 mov	 DWORD PTR result$[rsp], eax

; 840  :     else {

  00092	eb 40		 jmp	 SHORT $LN4@PyObject_S
$LN5@PyObject_S:

; 841  :         PyObject *s;
; 842  :         s = PyUnicode_InternFromString(n);

  00094	48 8b 4c 24 58	 mov	 rcx, QWORD PTR n$[rsp]
  00099	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  0009e	48 89 44 24 30	 mov	 QWORD PTR s$126237[rsp], rax

; 843  :         if (!s)

  000a3	48 83 7c 24 30
	00		 cmp	 QWORD PTR s$126237[rsp], 0
  000a9	75 07		 jne	 SHORT $LN3@PyObject_S

; 844  :             return -1;

  000ab	b8 ff ff ff ff	 mov	 eax, -1
  000b0	eb 66		 jmp	 SHORT $LN7@PyObject_S
$LN3@PyObject_S:

; 845  :         result = PyObject_GenericSetAttr(o, s, v);

  000b2	4c 8b 44 24 60	 mov	 r8, QWORD PTR v$[rsp]
  000b7	48 8b 54 24 30	 mov	 rdx, QWORD PTR s$126237[rsp]
  000bc	48 8b 4c 24 50	 mov	 rcx, QWORD PTR o$[rsp]
  000c1	e8 00 00 00 00	 call	 PyObject_GenericSetAttr
  000c6	89 44 24 20	 mov	 DWORD PTR result$[rsp], eax

; 846  :         Py_DECREF(s);

  000ca	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s$126237[rsp]
  000cf	e8 00 00 00 00	 call	 _Py_DecRef
$LN4@PyObject_S:

; 847  :     }
; 848  :     _Px_WRITE_UNLOCK(o);

  000d4	48 8b 44 24 50	 mov	 rax, QWORD PTR o$[rsp]
  000d9	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  000dd	48 83 e0 04	 and	 rax, 4
  000e1	48 85 c0	 test	 rax, rax
  000e4	74 0a		 je	 SHORT $LN2@PyObject_S
  000e6	48 8b 4c 24 50	 mov	 rcx, QWORD PTR o$[rsp]
  000eb	e8 00 00 00 00	 call	 _write_unlock
$LN2@PyObject_S:

; 849  :     if (result != -1 && !_Px_objobjargproc_ass(o, NULL, v))

  000f0	83 7c 24 20 ff	 cmp	 DWORD PTR result$[rsp], -1
  000f5	74 1d		 je	 SHORT $LN1@PyObject_S
  000f7	4c 8b 44 24 60	 mov	 r8, QWORD PTR v$[rsp]
  000fc	33 d2		 xor	 edx, edx
  000fe	48 8b 4c 24 50	 mov	 rcx, QWORD PTR o$[rsp]
  00103	e8 00 00 00 00	 call	 _Px_objobjargproc_ass
  00108	85 c0		 test	 eax, eax
  0010a	75 08		 jne	 SHORT $LN1@PyObject_S

; 850  :         result = -1;

  0010c	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR result$[rsp], -1
$LN1@PyObject_S:

; 851  : 
; 852  :     return result;

  00114	8b 44 24 20	 mov	 eax, DWORD PTR result$[rsp]
$LN7@PyObject_S:

; 853  : }

  00118	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0011c	c3		 ret	 0
_PyObject_SetAttrString ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
PUBLIC	Px_DecRef
EXTRN	_Py_Dealloc:PROC
EXTRN	_Py_NegativeRefcount:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN13
	DD	imagerel $LN13+257
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
tv81 = 48
op$ = 80
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN13:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	0f 85 e6 00 00
	00		 jne	 $LN8@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00016	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0001b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0001f	48 83 e0 20	 and	 rax, 32			; 00000020H
  00023	48 85 c0	 test	 rax, rax
  00026	75 14		 jne	 SHORT $LN6@Py_DecRef
  00028	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0002d	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00031	48 25 80 00 00
	00		 and	 rax, 128		; 00000080H
  00037	48 85 c0	 test	 rax, rax
  0003a	74 0f		 je	 SHORT $LN7@Py_DecRef
$LN6@Py_DecRef:

; 926  :             Px_DECREF(op);

  0003c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  00041	e8 00 00 00 00	 call	 Px_DecRef
  00046	e9 b1 00 00 00	 jmp	 $LN5@Py_DecRef
$LN7@Py_DecRef:

; 927  :         else if (!Px_ISPX(op)) {

  0004b	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00050	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00054	48 83 e0 02	 and	 rax, 2
  00058	48 85 c0	 test	 rax, rax
  0005b	0f 85 9b 00 00
	00		 jne	 $LN4@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;

  00061	e8 00 00 00 00	 call	 _Py_PXCTX
  00066	85 c0		 test	 eax, eax
  00068	74 02		 je	 SHORT $LN11@Py_DecRef
  0006a	eb 11		 jmp	 SHORT $LN12@Py_DecRef
$LN11@Py_DecRef:
  0006c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00073	48 ff c8	 dec	 rax
  00076	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN12@Py_DecRef:

; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  0007d	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00082	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00086	48 ff c8	 dec	 rax
  00089	48 89 44 24 30	 mov	 QWORD PTR tv81[rsp], rax
  0008e	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00093	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv81[rsp]
  00098	48 89 48 50	 mov	 QWORD PTR [rax+80], rcx
  0009c	48 83 7c 24 30
	00		 cmp	 QWORD PTR tv81[rsp], 0
  000a2	74 4e		 je	 SHORT $LN3@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);

  000a4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000ac	4c 8b 4c 24 50	 mov	 r9, QWORD PTR op$[rsp]
  000b1	41 b8 a2 03 00
	00		 mov	 r8d, 930		; 000003a2H
  000b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000c5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ca	85 c0		 test	 eax, eax
  000cc	75 22		 jne	 SHORT $LN2@Py_DecRef
  000ce	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  000d3	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000d8	7d 16		 jge	 SHORT $LN2@Py_DecRef
  000da	4c 8b 44 24 50	 mov	 r8, QWORD PTR op$[rsp]
  000df	ba a2 03 00 00	 mov	 edx, 930		; 000003a2H
  000e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000eb	e8 00 00 00 00	 call	 _Py_NegativeRefcount
$LN2@Py_DecRef:

; 931  :             } else

  000f0	eb 0a		 jmp	 SHORT $LN1@Py_DecRef
$LN3@Py_DecRef:

; 932  :                 _Py_Dealloc((PyObject *)(op));

  000f2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  000f7	e8 00 00 00 00	 call	 _Py_Dealloc
$LN1@Py_DecRef:
$LN4@Py_DecRef:
$LN5@Py_DecRef:
$LN8@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  000fc	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00100	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
PUBLIC	_PyObject_GetAttrString
;	COMDAT pdata
; File c:\src\pyparallel\python\pyparallel.c
pdata	SEGMENT
$pdata$_PyObject_GetAttrString DD imagerel $LN9
	DD	imagerel $LN9+234
	DD	imagerel $unwind$_PyObject_GetAttrString
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyObject_GetAttrString DD 010e01H
	DD	0820eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _PyObject_GetAttrString
_TEXT	SEGMENT
result$ = 32
tp$ = 40
s$126259 = 48
o$ = 80
n$ = 88
_PyObject_GetAttrString PROC				; COMDAT

; 857  : {

$LN9:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 858  :     PyTypeObject *tp;
; 859  :     PyObject *result;
; 860  :     assert(Py_ORIG_TYPE(o));

  0000e	48 8b 44 24 50	 mov	 rax, QWORD PTR o$[rsp]
  00013	48 83 78 38 00	 cmp	 QWORD PTR [rax+56], 0
  00018	75 1c		 jne	 SHORT $LN8@PyObject_G@3
  0001a	41 b8 5c 03 00
	00		 mov	 r8d, 860		; 0000035cH
  00020	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00027	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CA@LIAOCINA@?$AAP?$AAy?$AA_?$AAO?$AAR?$AAI?$AAG?$AA_?$AAT?$AAY?$AAP?$AAE?$AA?$CI?$AAo?$AA?$CJ?$AA?$AA@
  0002e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00034	33 c0		 xor	 eax, eax
$LN8@PyObject_G@3:

; 861  : 
; 862  :     _Px_READ_LOCK(o);

  00036	48 8b 44 24 50	 mov	 rax, QWORD PTR o$[rsp]
  0003b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0003f	48 83 e0 04	 and	 rax, 4
  00043	48 85 c0	 test	 rax, rax
  00046	74 0a		 je	 SHORT $LN5@PyObject_G@3
  00048	48 8b 4c 24 50	 mov	 rcx, QWORD PTR o$[rsp]
  0004d	e8 00 00 00 00	 call	 _read_lock
$LN5@PyObject_G@3:

; 863  :     tp = Py_ORIG_TYPE_CAST(o);

  00052	48 8b 44 24 50	 mov	 rax, QWORD PTR o$[rsp]
  00057	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  0005b	48 89 44 24 28	 mov	 QWORD PTR tp$[rsp], rax

; 864  :     if (tp->tp_getattr)

  00060	48 8b 44 24 28	 mov	 rax, QWORD PTR tp$[rsp]
  00065	48 83 b8 98 00
	00 00 00	 cmp	 QWORD PTR [rax+152], 0
  0006d	74 1c		 je	 SHORT $LN4@PyObject_G@3

; 865  :         result = (*tp->tp_getattr)(o, n);

  0006f	48 8b 54 24 58	 mov	 rdx, QWORD PTR n$[rsp]
  00074	48 8b 4c 24 50	 mov	 rcx, QWORD PTR o$[rsp]
  00079	48 8b 44 24 28	 mov	 rax, QWORD PTR tp$[rsp]
  0007e	ff 90 98 00 00
	00		 call	 QWORD PTR [rax+152]
  00084	48 89 44 24 20	 mov	 QWORD PTR result$[rsp], rax

; 866  :     else {

  00089	eb 39		 jmp	 SHORT $LN3@PyObject_G@3
$LN4@PyObject_G@3:

; 867  :         PyObject *s;
; 868  :         s = PyUnicode_InternFromString(n);

  0008b	48 8b 4c 24 58	 mov	 rcx, QWORD PTR n$[rsp]
  00090	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  00095	48 89 44 24 30	 mov	 QWORD PTR s$126259[rsp], rax

; 869  :         if (!s)

  0009a	48 83 7c 24 30
	00		 cmp	 QWORD PTR s$126259[rsp], 0
  000a0	75 04		 jne	 SHORT $LN2@PyObject_G@3

; 870  :             return NULL;

  000a2	33 c0		 xor	 eax, eax
  000a4	eb 3f		 jmp	 SHORT $LN6@PyObject_G@3
$LN2@PyObject_G@3:

; 871  :         result = PyObject_GenericGetAttr(o, s);

  000a6	48 8b 54 24 30	 mov	 rdx, QWORD PTR s$126259[rsp]
  000ab	48 8b 4c 24 50	 mov	 rcx, QWORD PTR o$[rsp]
  000b0	e8 00 00 00 00	 call	 PyObject_GenericGetAttr
  000b5	48 89 44 24 20	 mov	 QWORD PTR result$[rsp], rax

; 872  :         Py_DECREF(s);

  000ba	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s$126259[rsp]
  000bf	e8 00 00 00 00	 call	 _Py_DecRef
$LN3@PyObject_G@3:

; 873  :     }
; 874  :     _Px_READ_UNLOCK(o);

  000c4	48 8b 44 24 50	 mov	 rax, QWORD PTR o$[rsp]
  000c9	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  000cd	48 83 e0 04	 and	 rax, 4
  000d1	48 85 c0	 test	 rax, rax
  000d4	74 0a		 je	 SHORT $LN1@PyObject_G@3
  000d6	48 8b 4c 24 50	 mov	 rcx, QWORD PTR o$[rsp]
  000db	e8 00 00 00 00	 call	 _read_unlock
$LN1@PyObject_G@3:

; 875  : 
; 876  :     return result;

  000e0	48 8b 44 24 20	 mov	 rax, QWORD PTR result$[rsp]
$LN6@PyObject_G@3:

; 877  : }

  000e5	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e9	c3		 ret	 0
_PyObject_GetAttrString ENDP
_TEXT	ENDS
PUBLIC	_Px_mp_length
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Px_mp_length DD imagerel $LN6
	DD	imagerel $LN6+143
	DD	imagerel $unwind$_Px_mp_length
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Px_mp_length DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _Px_mp_length
_TEXT	SEGMENT
result$ = 32
o$ = 64
_Px_mp_length PROC					; COMDAT

; 882  : {

$LN6:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 883  :     Py_ssize_t result;
; 884  :     assert(Py_ORIG_TYPE(o));

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR o$[rsp]
  0000e	48 83 78 38 00	 cmp	 QWORD PTR [rax+56], 0
  00013	75 1c		 jne	 SHORT $LN5@Px_mp_leng
  00015	41 b8 74 03 00
	00		 mov	 r8d, 884		; 00000374H
  0001b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CA@LIAOCINA@?$AAP?$AAy?$AA_?$AAO?$AAR?$AAI?$AAG?$AA_?$AAT?$AAY?$AAP?$AAE?$AA?$CI?$AAo?$AA?$CJ?$AA?$AA@
  00029	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0002f	33 c0		 xor	 eax, eax
$LN5@Px_mp_leng:

; 885  :     _Px_READ_LOCK(o);

  00031	48 8b 44 24 40	 mov	 rax, QWORD PTR o$[rsp]
  00036	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0003a	48 83 e0 04	 and	 rax, 4
  0003e	48 85 c0	 test	 rax, rax
  00041	74 0a		 je	 SHORT $LN2@Px_mp_leng
  00043	48 8b 4c 24 40	 mov	 rcx, QWORD PTR o$[rsp]
  00048	e8 00 00 00 00	 call	 _read_lock
$LN2@Px_mp_leng:

; 886  :     result = Py_ORIG_TYPE_CAST(o)->tp_as_mapping->mp_length(o);

  0004d	48 8b 44 24 40	 mov	 rax, QWORD PTR o$[rsp]
  00052	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  00056	48 8b 80 c8 00
	00 00		 mov	 rax, QWORD PTR [rax+200]
  0005d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR o$[rsp]
  00062	ff 10		 call	 QWORD PTR [rax]
  00064	48 89 44 24 20	 mov	 QWORD PTR result$[rsp], rax

; 887  :     _Px_READ_UNLOCK(o);

  00069	48 8b 44 24 40	 mov	 rax, QWORD PTR o$[rsp]
  0006e	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00072	48 83 e0 04	 and	 rax, 4
  00076	48 85 c0	 test	 rax, rax
  00079	74 0a		 je	 SHORT $LN1@Px_mp_leng
  0007b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR o$[rsp]
  00080	e8 00 00 00 00	 call	 _read_unlock
$LN1@Px_mp_leng:

; 888  :     return result;

  00085	48 8b 44 24 20	 mov	 rax, QWORD PTR result$[rsp]

; 889  : }

  0008a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0008e	c3		 ret	 0
_Px_mp_length ENDP
_TEXT	ENDS
PUBLIC	_Px_mp_subcript
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Px_mp_subcript DD imagerel $LN6
	DD	imagerel $LN6+154
	DD	imagerel $unwind$_Px_mp_subcript
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Px_mp_subcript DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _Px_mp_subcript
_TEXT	SEGMENT
result$ = 32
o$ = 64
k$ = 72
_Px_mp_subcript PROC					; COMDAT

; 893  : {

$LN6:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 894  :     PyObject *result;
; 895  :     assert(Py_ORIG_TYPE(o));

  0000e	48 8b 44 24 40	 mov	 rax, QWORD PTR o$[rsp]
  00013	48 83 78 38 00	 cmp	 QWORD PTR [rax+56], 0
  00018	75 1c		 jne	 SHORT $LN5@Px_mp_subc
  0001a	41 b8 7f 03 00
	00		 mov	 r8d, 895		; 0000037fH
  00020	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00027	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CA@LIAOCINA@?$AAP?$AAy?$AA_?$AAO?$AAR?$AAI?$AAG?$AA_?$AAT?$AAY?$AAP?$AAE?$AA?$CI?$AAo?$AA?$CJ?$AA?$AA@
  0002e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00034	33 c0		 xor	 eax, eax
$LN5@Px_mp_subc:

; 896  :     _Px_READ_LOCK(o);

  00036	48 8b 44 24 40	 mov	 rax, QWORD PTR o$[rsp]
  0003b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0003f	48 83 e0 04	 and	 rax, 4
  00043	48 85 c0	 test	 rax, rax
  00046	74 0a		 je	 SHORT $LN2@Px_mp_subc
  00048	48 8b 4c 24 40	 mov	 rcx, QWORD PTR o$[rsp]
  0004d	e8 00 00 00 00	 call	 _read_lock
$LN2@Px_mp_subc:

; 897  :     result = Py_ORIG_TYPE_CAST(o)->tp_as_mapping->mp_subscript(o, k);

  00052	48 8b 44 24 40	 mov	 rax, QWORD PTR o$[rsp]
  00057	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  0005b	48 8b 80 c8 00
	00 00		 mov	 rax, QWORD PTR [rax+200]
  00062	48 8b 54 24 48	 mov	 rdx, QWORD PTR k$[rsp]
  00067	48 8b 4c 24 40	 mov	 rcx, QWORD PTR o$[rsp]
  0006c	ff 50 08	 call	 QWORD PTR [rax+8]
  0006f	48 89 44 24 20	 mov	 QWORD PTR result$[rsp], rax

; 898  :     _Px_READ_UNLOCK(o);

  00074	48 8b 44 24 40	 mov	 rax, QWORD PTR o$[rsp]
  00079	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0007d	48 83 e0 04	 and	 rax, 4
  00081	48 85 c0	 test	 rax, rax
  00084	74 0a		 je	 SHORT $LN1@Px_mp_subc
  00086	48 8b 4c 24 40	 mov	 rcx, QWORD PTR o$[rsp]
  0008b	e8 00 00 00 00	 call	 _read_unlock
$LN1@Px_mp_subc:

; 899  :     return result;

  00090	48 8b 44 24 20	 mov	 rax, QWORD PTR result$[rsp]

; 900  : }

  00095	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00099	c3		 ret	 0
_Px_mp_subcript ENDP
_TEXT	ENDS
PUBLIC	_Px_mp_ass_subscript
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Px_mp_ass_subscript DD imagerel $LN8
	DD	imagerel $LN8+200
	DD	imagerel $unwind$_Px_mp_ass_subscript
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Px_mp_ass_subscript DD 011301H
	DD	06213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _Px_mp_ass_subscript
_TEXT	SEGMENT
result$ = 32
o$ = 64
k$ = 72
v$ = 80
_Px_mp_ass_subscript PROC				; COMDAT

; 904  : {

$LN8:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 905  :     int result;
; 906  :     assert(Py_ORIG_TYPE(o));

  00013	48 8b 44 24 40	 mov	 rax, QWORD PTR o$[rsp]
  00018	48 83 78 38 00	 cmp	 QWORD PTR [rax+56], 0
  0001d	75 1c		 jne	 SHORT $LN7@Px_mp_ass_
  0001f	41 b8 8a 03 00
	00		 mov	 r8d, 906		; 0000038aH
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CA@LIAOCINA@?$AAP?$AAy?$AA_?$AAO?$AAR?$AAI?$AAG?$AA_?$AAT?$AAY?$AAP?$AAE?$AA?$CI?$AAo?$AA?$CJ?$AA?$AA@
  00033	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00039	33 c0		 xor	 eax, eax
$LN7@Px_mp_ass_:

; 907  :     _Px_WRITE_LOCK(o);

  0003b	48 8b 44 24 40	 mov	 rax, QWORD PTR o$[rsp]
  00040	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00044	48 83 e0 04	 and	 rax, 4
  00048	48 85 c0	 test	 rax, rax
  0004b	74 0a		 je	 SHORT $LN4@Px_mp_ass_
  0004d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR o$[rsp]
  00052	e8 00 00 00 00	 call	 _write_lock
$LN4@Px_mp_ass_:

; 908  :     result = Py_ORIG_TYPE_CAST(o)->tp_as_mapping->mp_ass_subscript(o, k, v);

  00057	48 8b 44 24 40	 mov	 rax, QWORD PTR o$[rsp]
  0005c	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  00060	48 8b 80 c8 00
	00 00		 mov	 rax, QWORD PTR [rax+200]
  00067	4c 8b 44 24 50	 mov	 r8, QWORD PTR v$[rsp]
  0006c	48 8b 54 24 48	 mov	 rdx, QWORD PTR k$[rsp]
  00071	48 8b 4c 24 40	 mov	 rcx, QWORD PTR o$[rsp]
  00076	ff 50 10	 call	 QWORD PTR [rax+16]
  00079	89 44 24 20	 mov	 DWORD PTR result$[rsp], eax

; 909  :     _Px_WRITE_UNLOCK(o);

  0007d	48 8b 44 24 40	 mov	 rax, QWORD PTR o$[rsp]
  00082	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00086	48 83 e0 04	 and	 rax, 4
  0008a	48 85 c0	 test	 rax, rax
  0008d	74 0a		 je	 SHORT $LN3@Px_mp_ass_
  0008f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR o$[rsp]
  00094	e8 00 00 00 00	 call	 _write_unlock
$LN3@Px_mp_ass_:

; 910  :     if (result == -1 || !_Px_objobjargproc_ass(o, k, v))

  00099	83 7c 24 20 ff	 cmp	 DWORD PTR result$[rsp], -1
  0009e	74 18		 je	 SHORT $LN1@Px_mp_ass_
  000a0	4c 8b 44 24 50	 mov	 r8, QWORD PTR v$[rsp]
  000a5	48 8b 54 24 48	 mov	 rdx, QWORD PTR k$[rsp]
  000aa	48 8b 4c 24 40	 mov	 rcx, QWORD PTR o$[rsp]
  000af	e8 00 00 00 00	 call	 _Px_objobjargproc_ass
  000b4	85 c0		 test	 eax, eax
  000b6	75 07		 jne	 SHORT $LN2@Px_mp_ass_
$LN1@Px_mp_ass_:

; 911  :         return -1;

  000b8	b8 ff ff ff ff	 mov	 eax, -1
  000bd	eb 04		 jmp	 SHORT $LN5@Px_mp_ass_
$LN2@Px_mp_ass_:

; 912  :     return result;

  000bf	8b 44 24 20	 mov	 eax, DWORD PTR result$[rsp]
$LN5@Px_mp_ass_:

; 913  : }

  000c3	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000c7	c3		 ret	 0
_Px_mp_ass_subscript ENDP
_TEXT	ENDS
PUBLIC	_Px_sq_length
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Px_sq_length DD imagerel $LN6
	DD	imagerel $LN6+143
	DD	imagerel $unwind$_Px_sq_length
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Px_sq_length DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _Px_sq_length
_TEXT	SEGMENT
result$ = 32
o$ = 64
_Px_sq_length PROC					; COMDAT

; 918  : {

$LN6:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 919  :     Py_ssize_t result;
; 920  :     assert(Py_ORIG_TYPE(o));

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR o$[rsp]
  0000e	48 83 78 38 00	 cmp	 QWORD PTR [rax+56], 0
  00013	75 1c		 jne	 SHORT $LN5@Px_sq_leng
  00015	41 b8 98 03 00
	00		 mov	 r8d, 920		; 00000398H
  0001b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CA@LIAOCINA@?$AAP?$AAy?$AA_?$AAO?$AAR?$AAI?$AAG?$AA_?$AAT?$AAY?$AAP?$AAE?$AA?$CI?$AAo?$AA?$CJ?$AA?$AA@
  00029	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0002f	33 c0		 xor	 eax, eax
$LN5@Px_sq_leng:

; 921  :     _Px_READ_LOCK(o);

  00031	48 8b 44 24 40	 mov	 rax, QWORD PTR o$[rsp]
  00036	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0003a	48 83 e0 04	 and	 rax, 4
  0003e	48 85 c0	 test	 rax, rax
  00041	74 0a		 je	 SHORT $LN2@Px_sq_leng
  00043	48 8b 4c 24 40	 mov	 rcx, QWORD PTR o$[rsp]
  00048	e8 00 00 00 00	 call	 _read_lock
$LN2@Px_sq_leng:

; 922  :     result = Py_ORIG_TYPE_CAST(o)->tp_as_sequence->sq_length(o);

  0004d	48 8b 44 24 40	 mov	 rax, QWORD PTR o$[rsp]
  00052	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  00056	48 8b 80 c0 00
	00 00		 mov	 rax, QWORD PTR [rax+192]
  0005d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR o$[rsp]
  00062	ff 10		 call	 QWORD PTR [rax]
  00064	48 89 44 24 20	 mov	 QWORD PTR result$[rsp], rax

; 923  :     _Px_READ_UNLOCK(o);

  00069	48 8b 44 24 40	 mov	 rax, QWORD PTR o$[rsp]
  0006e	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00072	48 83 e0 04	 and	 rax, 4
  00076	48 85 c0	 test	 rax, rax
  00079	74 0a		 je	 SHORT $LN1@Px_sq_leng
  0007b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR o$[rsp]
  00080	e8 00 00 00 00	 call	 _read_unlock
$LN1@Px_sq_leng:

; 924  :     return result;

  00085	48 8b 44 24 20	 mov	 rax, QWORD PTR result$[rsp]

; 925  : }

  0008a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0008e	c3		 ret	 0
_Px_sq_length ENDP
_TEXT	ENDS
PUBLIC	??_C@_1CC@DNBCFJEA@?$AAP?$AAy?$AAE?$AAr?$AAr?$AA_?$AAO?$AAc?$AAc?$AAu?$AAr?$AAr?$AAe?$AAd?$AA?$CI?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1KK@HMDJKLL@?$AA?$CB?$AAo?$AAl?$AAd?$AA_?$AAm?$AAm?$AA?9?$AA?$DO?$AAm?$AAp?$AA_?$AAa?$AAs?$AAs?$AA_?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AA?$DP?$AA?5?$AA1?$AA?5?$AA?3?$AA?5@ ; `string'
PUBLIC	??_C@_1HK@NEFIHBMA@?$AAo?$AAl?$AAd?$AA_?$AAm?$AAm?$AA?9?$AA?$DO?$AAm?$AAp?$AA_?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?5?$AA?$DP?$AA?5?$AA?$CI?$AAn?$AAe?$AAw?$AA_?$AAm?$AAm?$AA?9?$AA?$DO?$AAm?$AAp?$AA_@ ; `string'
PUBLIC	??_C@_1FA@OPBLMOG@?$AAn?$AAe?$AAw?$AA_?$AAm?$AAm?$AA?9?$AA?$DO?$AAm?$AAp?$AA_?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA_?$AAP?$AAx?$AA_?$AAm?$AAp?$AA_?$AAs@ ; `string'
PUBLIC	??_C@_1GE@PGHPFG@?$AAP?$AAy?$AA_?$AAT?$AAY?$AAP?$AAE?$AA?$CI?$AAo?$AA?$CJ?$AA?9?$AA?$DO?$AAt?$AAp?$AA_?$AAg?$AAe?$AAt?$AAa?$AAt?$AAt?$AAr?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AAO?$AAb?$AAj@ ; `string'
PUBLIC	??_C@_1GE@DFKDCIGI@?$AAP?$AAy?$AA_?$AAT?$AAY?$AAP?$AAE?$AA?$CI?$AAo?$AA?$CJ?$AA?9?$AA?$DO?$AAt?$AAp?$AA_?$AAs?$AAe?$AAt?$AAa?$AAt?$AAt?$AAr?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AAO?$AAb?$AAj@ ; `string'
PUBLIC	??_C@_1GI@OHPMNKMC@?$AAP?$AAy?$AA_?$AAT?$AAY?$AAP?$AAE?$AA?$CI?$AAo?$AA?$CJ?$AA?9?$AA?$DO?$AAt?$AAp?$AA_?$AAg?$AAe?$AAt?$AAa?$AAt?$AAt?$AAr?$AAo?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AAO?$AAb@ ; `string'
PUBLIC	??_C@_1GI@FBEBAGIN@?$AAP?$AAy?$AA_?$AAT?$AAY?$AAP?$AAE?$AA?$CI?$AAo?$AA?$CJ?$AA?9?$AA?$DO?$AAt?$AAp?$AA_?$AAs?$AAe?$AAt?$AAa?$AAt?$AAt?$AAr?$AAo?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AAO?$AAb@ ; `string'
PUBLIC	??_C@_1FI@MFFGIELI@?$AAP?$AAy?$AA_?$AAT?$AAY?$AAP?$AAE?$AA?$CI?$AAo?$AA?$CJ?$AA?9?$AA?$DO?$AAt?$AAp?$AA_?$AAd?$AAe?$AAa?$AAl?$AAl?$AAo?$AAc?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AAO?$AAb?$AAj@ ; `string'
PUBLIC	??_C@_1GM@JAGGOPJC@?$AAP?$AAy?$AA_?$AAO?$AAR?$AAI?$AAG?$AA_?$AAT?$AAY?$AAP?$AAE?$AA_?$AAC?$AAA?$AAS?$AAT?$AA?$CI?$AAo?$AA?$CJ?$AA?9?$AA?$DO?$AAt?$AAp?$AA_?$AAd?$AAe?$AAa?$AAl?$AAl?$AAo?$AAc@ ; `string'
PUBLIC	??_C@_1EC@MDHCKPLC@?$AAP?$AAy?$AA_?$AAO?$AAR?$AAI?$AAG?$AA_?$AAT?$AAY?$AAP?$AAE?$AA_?$AAC?$AAA?$AAS?$AAT?$AA?$CI?$AAo?$AA?$CJ?$AA?9?$AA?$DO?$AAt?$AAp?$AA_?$AAd?$AAe?$AAa?$AAl?$AAl?$AAo?$AAc@ ; `string'
PUBLIC	??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@ ; `string'
PUBLIC	??_C@_1EM@HFMJMDDM@?$AAg?$AA?9?$AA?$DO?$AAg?$AAc?$AA?4?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AAG?$AAC?$AA_?$AAR?$AAE?$AAF?$AAS?$AA_?$AAU?$AAN?$AAT?$AAR@ ; `string'
PUBLIC	_PxMem_Malloc
PUBLIC	??_C@_0BH@KCLIIPCK@_PyObject_PrepOrigType?$AA@	; `string'
PUBLIC	_PyObject_PrepOrigType
EXTRN	PyErr_Occurred:PROC
EXTRN	_PyGC_generation0:QWORD
EXTRN	PyErr_NoMemory:PROC
EXTRN	_PyMem_DebugMalloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyObject_PrepOrigType DD imagerel $LN75
	DD	imagerel $LN75+2638
	DD	imagerel $unwind$_PyObject_PrepOrigType
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyObject_PrepOrigType DD 021101H
	DD	0230111H
xdata	ENDS
;	COMDAT ??_C@_1CC@DNBCFJEA@?$AAP?$AAy?$AAE?$AAr?$AAr?$AA_?$AAO?$AAc?$AAc?$AAu?$AAr?$AAr?$AAe?$AAd?$AA?$CI?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CC@DNBCFJEA@?$AAP?$AAy?$AAE?$AAr?$AAr?$AA_?$AAO?$AAc?$AAc?$AAu?$AAr?$AAr?$AAe?$AAd?$AA?$CI?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'E', 00H, 'r', 00H, 'r', 00H, '_', 00H, 'O', 00H
	DB	'c', 00H, 'c', 00H, 'u', 00H, 'r', 00H, 'r', 00H, 'e', 00H, 'd'
	DB	00H, '(', 00H, ')', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1KK@HMDJKLL@?$AA?$CB?$AAo?$AAl?$AAd?$AA_?$AAm?$AAm?$AA?9?$AA?$DO?$AAm?$AAp?$AA_?$AAa?$AAs?$AAs?$AA_?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AA?$DP?$AA?5?$AA1?$AA?5?$AA?3?$AA?5@
CONST	SEGMENT
??_C@_1KK@HMDJKLL@?$AA?$CB?$AAo?$AAl?$AAd?$AA_?$AAm?$AAm?$AA?9?$AA?$DO?$AAm?$AAp?$AA_?$AAa?$AAs?$AAs?$AA_?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AA?$DP?$AA?5?$AA1?$AA?5?$AA?3?$AA?5@ DB '!'
	DB	00H, 'o', 00H, 'l', 00H, 'd', 00H, '_', 00H, 'm', 00H, 'm', 00H
	DB	'-', 00H, '>', 00H, 'm', 00H, 'p', 00H, '_', 00H, 'a', 00H, 's'
	DB	00H, 's', 00H, '_', 00H, 's', 00H, 'u', 00H, 'b', 00H, 's', 00H
	DB	'c', 00H, 'r', 00H, 'i', 00H, 'p', 00H, 't', 00H, ' ', 00H, '?'
	DB	00H, ' ', 00H, '1', 00H, ' ', 00H, ':', 00H, ' ', 00H, '(', 00H
	DB	' ', 00H, 'n', 00H, 'e', 00H, 'w', 00H, '_', 00H, 'm', 00H, 'm'
	DB	00H, '-', 00H, '>', 00H, 'm', 00H, 'p', 00H, '_', 00H, 'a', 00H
	DB	's', 00H, 's', 00H, '_', 00H, 's', 00H, 'u', 00H, 'b', 00H, 's'
	DB	00H, 'c', 00H, 'r', 00H, 'i', 00H, 'p', 00H, 't', 00H, ' ', 00H
	DB	'=', 00H, '=', 00H, ' ', 00H, '_', 00H, 'P', 00H, 'x', 00H, '_'
	DB	00H, 'm', 00H, 'p', 00H, '_', 00H, 'a', 00H, 's', 00H, 's', 00H
	DB	'_', 00H, 's', 00H, 'u', 00H, 'b', 00H, 's', 00H, 'c', 00H, 'r'
	DB	00H, 'i', 00H, 'p', 00H, 't', 00H, ' ', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1HK@NEFIHBMA@?$AAo?$AAl?$AAd?$AA_?$AAm?$AAm?$AA?9?$AA?$DO?$AAm?$AAp?$AA_?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?5?$AA?$DP?$AA?5?$AA?$CI?$AAn?$AAe?$AAw?$AA_?$AAm?$AAm?$AA?9?$AA?$DO?$AAm?$AAp?$AA_@
CONST	SEGMENT
??_C@_1HK@NEFIHBMA@?$AAo?$AAl?$AAd?$AA_?$AAm?$AAm?$AA?9?$AA?$DO?$AAm?$AAp?$AA_?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?5?$AA?$DP?$AA?5?$AA?$CI?$AAn?$AAe?$AAw?$AA_?$AAm?$AAm?$AA?9?$AA?$DO?$AAm?$AAp?$AA_@ DB 'o'
	DB	00H, 'l', 00H, 'd', 00H, '_', 00H, 'm', 00H, 'm', 00H, '-', 00H
	DB	'>', 00H, 'm', 00H, 'p', 00H, '_', 00H, 'l', 00H, 'e', 00H, 'n'
	DB	00H, 'g', 00H, 't', 00H, 'h', 00H, ' ', 00H, '?', 00H, ' ', 00H
	DB	'(', 00H, 'n', 00H, 'e', 00H, 'w', 00H, '_', 00H, 'm', 00H, 'm'
	DB	00H, '-', 00H, '>', 00H, 'm', 00H, 'p', 00H, '_', 00H, 'l', 00H
	DB	'e', 00H, 'n', 00H, 'g', 00H, 't', 00H, 'h', 00H, ' ', 00H, '='
	DB	00H, '=', 00H, ' ', 00H, '_', 00H, 'P', 00H, 'x', 00H, '_', 00H
	DB	'm', 00H, 'p', 00H, '_', 00H, 'l', 00H, 'e', 00H, 'n', 00H, 'g'
	DB	00H, 't', 00H, 'h', 00H, ')', 00H, ' ', 00H, ':', 00H, ' ', 00H
	DB	'1', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1FA@OPBLMOG@?$AAn?$AAe?$AAw?$AA_?$AAm?$AAm?$AA?9?$AA?$DO?$AAm?$AAp?$AA_?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA_?$AAP?$AAx?$AA_?$AAm?$AAp?$AA_?$AAs@
CONST	SEGMENT
??_C@_1FA@OPBLMOG@?$AAn?$AAe?$AAw?$AA_?$AAm?$AAm?$AA?9?$AA?$DO?$AAm?$AAp?$AA_?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA_?$AAP?$AAx?$AA_?$AAm?$AAp?$AA_?$AAs@ DB 'n'
	DB	00H, 'e', 00H, 'w', 00H, '_', 00H, 'm', 00H, 'm', 00H, '-', 00H
	DB	'>', 00H, 'm', 00H, 'p', 00H, '_', 00H, 's', 00H, 'u', 00H, 'b'
	DB	00H, 's', 00H, 'c', 00H, 'r', 00H, 'i', 00H, 'p', 00H, 't', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '_', 00H, 'P', 00H, 'x'
	DB	00H, '_', 00H, 'm', 00H, 'p', 00H, '_', 00H, 's', 00H, 'u', 00H
	DB	'b', 00H, 'c', 00H, 'r', 00H, 'i', 00H, 'p', 00H, 't', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1GE@PGHPFG@?$AAP?$AAy?$AA_?$AAT?$AAY?$AAP?$AAE?$AA?$CI?$AAo?$AA?$CJ?$AA?9?$AA?$DO?$AAt?$AAp?$AA_?$AAg?$AAe?$AAt?$AAa?$AAt?$AAt?$AAr?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AAO?$AAb?$AAj@
CONST	SEGMENT
??_C@_1GE@PGHPFG@?$AAP?$AAy?$AA_?$AAT?$AAY?$AAP?$AAE?$AA?$CI?$AAo?$AA?$CJ?$AA?9?$AA?$DO?$AAt?$AAp?$AA_?$AAg?$AAe?$AAt?$AAa?$AAt?$AAt?$AAr?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AAO?$AAb?$AAj@ DB 'P'
	DB	00H, 'y', 00H, '_', 00H, 'T', 00H, 'Y', 00H, 'P', 00H, 'E', 00H
	DB	'(', 00H, 'o', 00H, ')', 00H, '-', 00H, '>', 00H, 't', 00H, 'p'
	DB	00H, '_', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'a', 00H, 't', 00H
	DB	't', 00H, 'r', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '_'
	DB	00H, 'P', 00H, 'y', 00H, 'O', 00H, 'b', 00H, 'j', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, '_', 00H, 'G', 00H, 'e', 00H, 't', 00H, 'A'
	DB	00H, 't', 00H, 't', 00H, 'r', 00H, 'S', 00H, 't', 00H, 'r', 00H
	DB	'i', 00H, 'n', 00H, 'g', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1GE@DFKDCIGI@?$AAP?$AAy?$AA_?$AAT?$AAY?$AAP?$AAE?$AA?$CI?$AAo?$AA?$CJ?$AA?9?$AA?$DO?$AAt?$AAp?$AA_?$AAs?$AAe?$AAt?$AAa?$AAt?$AAt?$AAr?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AAO?$AAb?$AAj@
CONST	SEGMENT
??_C@_1GE@DFKDCIGI@?$AAP?$AAy?$AA_?$AAT?$AAY?$AAP?$AAE?$AA?$CI?$AAo?$AA?$CJ?$AA?9?$AA?$DO?$AAt?$AAp?$AA_?$AAs?$AAe?$AAt?$AAa?$AAt?$AAt?$AAr?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AAO?$AAb?$AAj@ DB 'P'
	DB	00H, 'y', 00H, '_', 00H, 'T', 00H, 'Y', 00H, 'P', 00H, 'E', 00H
	DB	'(', 00H, 'o', 00H, ')', 00H, '-', 00H, '>', 00H, 't', 00H, 'p'
	DB	00H, '_', 00H, 's', 00H, 'e', 00H, 't', 00H, 'a', 00H, 't', 00H
	DB	't', 00H, 'r', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '_'
	DB	00H, 'P', 00H, 'y', 00H, 'O', 00H, 'b', 00H, 'j', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, '_', 00H, 'S', 00H, 'e', 00H, 't', 00H, 'A'
	DB	00H, 't', 00H, 't', 00H, 'r', 00H, 'S', 00H, 't', 00H, 'r', 00H
	DB	'i', 00H, 'n', 00H, 'g', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1GI@OHPMNKMC@?$AAP?$AAy?$AA_?$AAT?$AAY?$AAP?$AAE?$AA?$CI?$AAo?$AA?$CJ?$AA?9?$AA?$DO?$AAt?$AAp?$AA_?$AAg?$AAe?$AAt?$AAa?$AAt?$AAt?$AAr?$AAo?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AAO?$AAb@
CONST	SEGMENT
??_C@_1GI@OHPMNKMC@?$AAP?$AAy?$AA_?$AAT?$AAY?$AAP?$AAE?$AA?$CI?$AAo?$AA?$CJ?$AA?9?$AA?$DO?$AAt?$AAp?$AA_?$AAg?$AAe?$AAt?$AAa?$AAt?$AAt?$AAr?$AAo?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AAO?$AAb@ DB 'P'
	DB	00H, 'y', 00H, '_', 00H, 'T', 00H, 'Y', 00H, 'P', 00H, 'E', 00H
	DB	'(', 00H, 'o', 00H, ')', 00H, '-', 00H, '>', 00H, 't', 00H, 'p'
	DB	00H, '_', 00H, 'g', 00H, 'e', 00H, 't', 00H, 'a', 00H, 't', 00H
	DB	't', 00H, 'r', 00H, 'o', 00H, ' ', 00H, '=', 00H, '=', 00H, ' '
	DB	00H, '_', 00H, 'P', 00H, 'y', 00H, 'O', 00H, 'b', 00H, 'j', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, '_', 00H, 'G', 00H, 'e', 00H, 'n'
	DB	00H, 'e', 00H, 'r', 00H, 'i', 00H, 'c', 00H, 'G', 00H, 'e', 00H
	DB	't', 00H, 'A', 00H, 't', 00H, 't', 00H, 'r', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1GI@FBEBAGIN@?$AAP?$AAy?$AA_?$AAT?$AAY?$AAP?$AAE?$AA?$CI?$AAo?$AA?$CJ?$AA?9?$AA?$DO?$AAt?$AAp?$AA_?$AAs?$AAe?$AAt?$AAa?$AAt?$AAt?$AAr?$AAo?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AAO?$AAb@
CONST	SEGMENT
??_C@_1GI@FBEBAGIN@?$AAP?$AAy?$AA_?$AAT?$AAY?$AAP?$AAE?$AA?$CI?$AAo?$AA?$CJ?$AA?9?$AA?$DO?$AAt?$AAp?$AA_?$AAs?$AAe?$AAt?$AAa?$AAt?$AAt?$AAr?$AAo?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AAO?$AAb@ DB 'P'
	DB	00H, 'y', 00H, '_', 00H, 'T', 00H, 'Y', 00H, 'P', 00H, 'E', 00H
	DB	'(', 00H, 'o', 00H, ')', 00H, '-', 00H, '>', 00H, 't', 00H, 'p'
	DB	00H, '_', 00H, 's', 00H, 'e', 00H, 't', 00H, 'a', 00H, 't', 00H
	DB	't', 00H, 'r', 00H, 'o', 00H, ' ', 00H, '=', 00H, '=', 00H, ' '
	DB	00H, '_', 00H, 'P', 00H, 'y', 00H, 'O', 00H, 'b', 00H, 'j', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, '_', 00H, 'G', 00H, 'e', 00H, 'n'
	DB	00H, 'e', 00H, 'r', 00H, 'i', 00H, 'c', 00H, 'S', 00H, 'e', 00H
	DB	't', 00H, 'A', 00H, 't', 00H, 't', 00H, 'r', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1FI@MFFGIELI@?$AAP?$AAy?$AA_?$AAT?$AAY?$AAP?$AAE?$AA?$CI?$AAo?$AA?$CJ?$AA?9?$AA?$DO?$AAt?$AAp?$AA_?$AAd?$AAe?$AAa?$AAl?$AAl?$AAo?$AAc?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AAO?$AAb?$AAj@
CONST	SEGMENT
??_C@_1FI@MFFGIELI@?$AAP?$AAy?$AA_?$AAT?$AAY?$AAP?$AAE?$AA?$CI?$AAo?$AA?$CJ?$AA?9?$AA?$DO?$AAt?$AAp?$AA_?$AAd?$AAe?$AAa?$AAl?$AAl?$AAo?$AAc?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AAO?$AAb?$AAj@ DB 'P'
	DB	00H, 'y', 00H, '_', 00H, 'T', 00H, 'Y', 00H, 'P', 00H, 'E', 00H
	DB	'(', 00H, 'o', 00H, ')', 00H, '-', 00H, '>', 00H, 't', 00H, 'p'
	DB	00H, '_', 00H, 'd', 00H, 'e', 00H, 'a', 00H, 'l', 00H, 'l', 00H
	DB	'o', 00H, 'c', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '_'
	DB	00H, 'P', 00H, 'y', 00H, 'O', 00H, 'b', 00H, 'j', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, '_', 00H, 'D', 00H, 'e', 00H, 'a', 00H, 'l'
	DB	00H, 'l', 00H, 'o', 00H, 'c', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1GM@JAGGOPJC@?$AAP?$AAy?$AA_?$AAO?$AAR?$AAI?$AAG?$AA_?$AAT?$AAY?$AAP?$AAE?$AA_?$AAC?$AAA?$AAS?$AAT?$AA?$CI?$AAo?$AA?$CJ?$AA?9?$AA?$DO?$AAt?$AAp?$AA_?$AAd?$AAe?$AAa?$AAl?$AAl?$AAo?$AAc@
CONST	SEGMENT
??_C@_1GM@JAGGOPJC@?$AAP?$AAy?$AA_?$AAO?$AAR?$AAI?$AAG?$AA_?$AAT?$AAY?$AAP?$AAE?$AA_?$AAC?$AAA?$AAS?$AAT?$AA?$CI?$AAo?$AA?$CJ?$AA?9?$AA?$DO?$AAt?$AAp?$AA_?$AAd?$AAe?$AAa?$AAl?$AAl?$AAo?$AAc@ DB 'P'
	DB	00H, 'y', 00H, '_', 00H, 'O', 00H, 'R', 00H, 'I', 00H, 'G', 00H
	DB	'_', 00H, 'T', 00H, 'Y', 00H, 'P', 00H, 'E', 00H, '_', 00H, 'C'
	DB	00H, 'A', 00H, 'S', 00H, 'T', 00H, '(', 00H, 'o', 00H, ')', 00H
	DB	'-', 00H, '>', 00H, 't', 00H, 'p', 00H, '_', 00H, 'd', 00H, 'e'
	DB	00H, 'a', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, ' ', 00H
	DB	'!', 00H, '=', 00H, ' ', 00H, '_', 00H, 'P', 00H, 'y', 00H, 'O'
	DB	00H, 'b', 00H, 'j', 00H, 'e', 00H, 'c', 00H, 't', 00H, '_', 00H
	DB	'D', 00H, 'e', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1EC@MDHCKPLC@?$AAP?$AAy?$AA_?$AAO?$AAR?$AAI?$AAG?$AA_?$AAT?$AAY?$AAP?$AAE?$AA_?$AAC?$AAA?$AAS?$AAT?$AA?$CI?$AAo?$AA?$CJ?$AA?9?$AA?$DO?$AAt?$AAp?$AA_?$AAd?$AAe?$AAa?$AAl?$AAl?$AAo?$AAc@
CONST	SEGMENT
??_C@_1EC@MDHCKPLC@?$AAP?$AAy?$AA_?$AAO?$AAR?$AAI?$AAG?$AA_?$AAT?$AAY?$AAP?$AAE?$AA_?$AAC?$AAA?$AAS?$AAT?$AA?$CI?$AAo?$AA?$CJ?$AA?9?$AA?$DO?$AAt?$AAp?$AA_?$AAd?$AAe?$AAa?$AAl?$AAl?$AAo?$AAc@ DB 'P'
	DB	00H, 'y', 00H, '_', 00H, 'O', 00H, 'R', 00H, 'I', 00H, 'G', 00H
	DB	'_', 00H, 'T', 00H, 'Y', 00H, 'P', 00H, 'E', 00H, '_', 00H, 'C'
	DB	00H, 'A', 00H, 'S', 00H, 'T', 00H, '(', 00H, 'o', 00H, ')', 00H
	DB	'-', 00H, '>', 00H, 't', 00H, 'p', 00H, '_', 00H, 'd', 00H, 'e'
	DB	00H, 'a', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@
CONST	SEGMENT
??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@ DB 'GC object alread'
	DB	'y tracked', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1EM@HFMJMDDM@?$AAg?$AA?9?$AA?$DO?$AAg?$AAc?$AA?4?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AAG?$AAC?$AA_?$AAR?$AAE?$AAF?$AAS?$AA_?$AAU?$AAN?$AAT?$AAR@
CONST	SEGMENT
??_C@_1EM@HFMJMDDM@?$AAg?$AA?9?$AA?$DO?$AAg?$AAc?$AA?4?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AAG?$AAC?$AA_?$AAR?$AAE?$AAF?$AAS?$AA_?$AAU?$AAN?$AAT?$AAR@ DB 'g'
	DB	00H, '-', 00H, '>', 00H, 'g', 00H, 'c', 00H, '.', 00H, 'g', 00H
	DB	'c', 00H, '_', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 's', 00H, ' '
	DB	00H, '!', 00H, '=', 00H, ' ', 00H, '_', 00H, 'P', 00H, 'y', 00H
	DB	'G', 00H, 'C', 00H, '_', 00H, 'R', 00H, 'E', 00H, 'F', 00H, 'S'
	DB	00H, '_', 00H, 'U', 00H, 'N', 00H, 'T', 00H, 'R', 00H, 'A', 00H
	DB	'C', 00H, 'K', 00H, 'E', 00H, 'D', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@KCLIIPCK@_PyObject_PrepOrigType?$AA@
CONST	SEGMENT
??_C@_0BH@KCLIIPCK@_PyObject_PrepOrigType?$AA@ DB '_PyObject_PrepOrigType'
	DB	00H						; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PyObject_PrepOrigType
_TEXT	SEGMENT
new_mm$ = 48
old_mm$ = 56
is_gc$126342 = 64
is_tracked$126343 = 68
type$126335 = 72
offset$126339 = 80
size$126338 = 88
is_heap$126341 = 96
m$126340 = 104
tp$126337 = 112
g$126363 = 120
g$126380 = 128
tv70 = 136
tv77 = 140
tv75 = 144
tv90 = 152
tv142 = 160
tv137 = 168
tv140 = 176
tv149 = 184
tv167 = 192
tv193 = 200
tv210 = 208
tv238 = 216
tv245 = 224
tv249 = 232
tv255 = 240
tv325 = 244
tv327 = 248
tv338 = 252
tv337 = 256
o$ = 288
kwds$ = 296
_PyObject_PrepOrigType PROC				; COMDAT

; 929  : {

$LN75:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec 18 01
	00 00		 sub	 rsp, 280		; 00000118H

; 930  :     PyMappingMethods *old_mm, *new_mm;
; 931  :     /*PySequenceMethods *old_sm, *new_sm;*/
; 932  : 
; 933  :     if (!Py_ORIG_TYPE(o)) {

  00011	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR o$[rsp]
  00019	48 83 78 38 00	 cmp	 QWORD PTR [rax+56], 0
  0001e	0f 85 e3 06 00
	00		 jne	 $LN21@PyObject_P

; 934  :         PyTypeObject *type = Py_TYPE(o), *tp;

  00024	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR o$[rsp]
  0002c	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00030	48 89 44 24 48	 mov	 QWORD PTR type$126335[rsp], rax

; 935  :         size_t size;
; 936  :         void *offset = type;

  00035	48 8b 44 24 48	 mov	 rax, QWORD PTR type$126335[rsp]
  0003a	48 89 44 24 50	 mov	 QWORD PTR offset$126339[rsp], rax

; 937  :         void *m;
; 938  :         int is_heap = PyType_HasFeature(type, Py_TPFLAGS_HEAPTYPE);

  0003f	48 8b 44 24 48	 mov	 rax, QWORD PTR type$126335[rsp]
  00044	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0004a	25 00 02 00 00	 and	 eax, 512		; 00000200H
  0004f	85 c0		 test	 eax, eax
  00051	74 0d		 je	 SHORT $LN24@PyObject_P
  00053	c7 84 24 88 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv70[rsp], 1
  0005e	eb 0b		 jmp	 SHORT $LN25@PyObject_P
$LN24@PyObject_P:
  00060	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv70[rsp], 0
$LN25@PyObject_P:
  0006b	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR tv70[rsp]
  00072	89 44 24 60	 mov	 DWORD PTR is_heap$126341[rsp], eax

; 939  :         int is_gc = PyType_IS_GC(type);

  00076	e8 00 00 00 00	 call	 _Py_PXCTX
  0007b	85 c0		 test	 eax, eax
  0007d	74 0d		 je	 SHORT $LN28@PyObject_P
  0007f	c7 84 24 8c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv77[rsp], 0
  0008a	eb 3a		 jmp	 SHORT $LN29@PyObject_P
$LN28@PyObject_P:
  0008c	48 8b 44 24 48	 mov	 rax, QWORD PTR type$126335[rsp]
  00091	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00097	25 00 40 00 00	 and	 eax, 16384		; 00004000H
  0009c	85 c0		 test	 eax, eax
  0009e	74 0d		 je	 SHORT $LN26@PyObject_P
  000a0	c7 84 24 90 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv75[rsp], 1
  000ab	eb 0b		 jmp	 SHORT $LN27@PyObject_P
$LN26@PyObject_P:
  000ad	c7 84 24 90 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv75[rsp], 0
$LN27@PyObject_P:
  000b8	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR tv75[rsp]
  000bf	89 84 24 8c 00
	00 00		 mov	 DWORD PTR tv77[rsp], eax
$LN29@PyObject_P:
  000c6	8b 84 24 8c 00
	00 00		 mov	 eax, DWORD PTR tv77[rsp]
  000cd	89 44 24 40	 mov	 DWORD PTR is_gc$126342[rsp], eax

; 940  :         int is_tracked = 0;

  000d1	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR is_tracked$126343[rsp], 0

; 941  : 
; 942  :         if (is_heap)

  000d9	83 7c 24 60 00	 cmp	 DWORD PTR is_heap$126341[rsp], 0
  000de	74 0b		 je	 SHORT $LN20@PyObject_P

; 943  :             size = sizeof(PyHeapTypeObject);

  000e0	48 c7 44 24 58
	90 03 00 00	 mov	 QWORD PTR size$126338[rsp], 912 ; 00000390H

; 944  :         else

  000e9	eb 09		 jmp	 SHORT $LN19@PyObject_P
$LN20@PyObject_P:

; 945  :             size = sizeof(PyTypeObject);

  000eb	48 c7 44 24 58
	e0 01 00 00	 mov	 QWORD PTR size$126338[rsp], 480 ; 000001e0H
$LN19@PyObject_P:

; 946  : 
; 947  :         if (is_gc && is_heap) {

  000f4	83 7c 24 40 00	 cmp	 DWORD PTR is_gc$126342[rsp], 0
  000f9	0f 84 2f 01 00
	00		 je	 $LN18@PyObject_P
  000ff	83 7c 24 60 00	 cmp	 DWORD PTR is_heap$126341[rsp], 0
  00104	0f 84 24 01 00
	00		 je	 $LN18@PyObject_P

; 948  :             size += sizeof(PyGC_Head);

  0010a	48 8b 44 24 58	 mov	 rax, QWORD PTR size$126338[rsp]
  0010f	48 83 c0 18	 add	 rax, 24
  00113	48 89 44 24 58	 mov	 QWORD PTR size$126338[rsp], rax

; 949  :             offset = _Py_AS_GC(type);

  00118	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00120	4c 8b 4c 24 48	 mov	 r9, QWORD PTR type$126335[rsp]
  00125	41 b8 b5 03 00
	00		 mov	 r8d, 949		; 000003b5H
  0012b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@PGHBGAOD@?4?4?2Python?2pyparallel?4c?$AA@
  00132	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BH@KCLIIPCK@_PyObject_PrepOrigType?$AA@
  00139	e8 00 00 00 00	 call	 _PyParallel_Guard
  0013e	85 c0		 test	 eax, eax
  00140	74 0e		 je	 SHORT $LN30@PyObject_P
  00142	48 c7 84 24 98
	00 00 00 00 00
	00 00		 mov	 QWORD PTR tv90[rsp], 0
  0014e	eb 11		 jmp	 SHORT $LN31@PyObject_P
$LN30@PyObject_P:
  00150	48 8b 44 24 48	 mov	 rax, QWORD PTR type$126335[rsp]
  00155	48 83 e8 18	 sub	 rax, 24
  00159	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR tv90[rsp], rax
$LN31@PyObject_P:
  00161	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR tv90[rsp]
  00169	48 89 44 24 50	 mov	 QWORD PTR offset$126339[rsp], rax

; 950  :             is_tracked = _PyObject_GC_IS_TRACKED(type);

  0016e	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00176	4c 8b 4c 24 48	 mov	 r9, QWORD PTR type$126335[rsp]
  0017b	41 b8 b6 03 00
	00		 mov	 r8d, 950		; 000003b6H
  00181	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@PGHBGAOD@?4?4?2Python?2pyparallel?4c?$AA@
  00188	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BH@KCLIIPCK@_PyObject_PrepOrigType?$AA@
  0018f	e8 00 00 00 00	 call	 _PyParallel_Guard
  00194	85 c0		 test	 eax, eax
  00196	74 0d		 je	 SHORT $LN36@PyObject_P
  00198	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv142[rsp], 0
  001a3	eb 7e		 jmp	 SHORT $LN37@PyObject_P
$LN36@PyObject_P:
  001a5	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  001ad	4c 8b 4c 24 48	 mov	 r9, QWORD PTR type$126335[rsp]
  001b2	41 b8 b6 03 00
	00		 mov	 r8d, 950		; 000003b6H
  001b8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@PGHBGAOD@?4?4?2Python?2pyparallel?4c?$AA@
  001bf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BH@KCLIIPCK@_PyObject_PrepOrigType?$AA@
  001c6	e8 00 00 00 00	 call	 _PyParallel_Guard
  001cb	85 c0		 test	 eax, eax
  001cd	74 0e		 je	 SHORT $LN32@PyObject_P
  001cf	48 c7 84 24 a8
	00 00 00 00 00
	00 00		 mov	 QWORD PTR tv137[rsp], 0
  001db	eb 11		 jmp	 SHORT $LN33@PyObject_P
$LN32@PyObject_P:
  001dd	48 8b 44 24 48	 mov	 rax, QWORD PTR type$126335[rsp]
  001e2	48 83 e8 18	 sub	 rax, 24
  001e6	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR tv137[rsp], rax
$LN33@PyObject_P:
  001ee	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR tv137[rsp]
  001f6	48 83 78 10 fe	 cmp	 QWORD PTR [rax+16], -2
  001fb	74 0d		 je	 SHORT $LN34@PyObject_P
  001fd	c7 84 24 b0 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv140[rsp], 1
  00208	eb 0b		 jmp	 SHORT $LN35@PyObject_P
$LN34@PyObject_P:
  0020a	c7 84 24 b0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv140[rsp], 0
$LN35@PyObject_P:
  00215	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR tv140[rsp]
  0021c	89 84 24 a0 00
	00 00		 mov	 DWORD PTR tv142[rsp], eax
$LN37@PyObject_P:
  00223	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR tv142[rsp]
  0022a	89 44 24 44	 mov	 DWORD PTR is_tracked$126343[rsp], eax
$LN18@PyObject_P:

; 951  :         }
; 952  : 
; 953  :         m = PyMem_MALLOC(size);

  0022e	e8 00 00 00 00	 call	 _Py_PXCTX
  00233	85 c0		 test	 eax, eax
  00235	74 14		 je	 SHORT $LN38@PyObject_P
  00237	48 8b 4c 24 58	 mov	 rcx, QWORD PTR size$126338[rsp]
  0023c	e8 00 00 00 00	 call	 _PxMem_Malloc
  00241	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR tv149[rsp], rax
  00249	eb 12		 jmp	 SHORT $LN39@PyObject_P
$LN38@PyObject_P:
  0024b	48 8b 4c 24 58	 mov	 rcx, QWORD PTR size$126338[rsp]
  00250	e8 00 00 00 00	 call	 _PyMem_DebugMalloc
  00255	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR tv149[rsp], rax
$LN39@PyObject_P:
  0025d	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR tv149[rsp]
  00265	48 89 44 24 68	 mov	 QWORD PTR m$126340[rsp], rax

; 954  :         if (!m) {

  0026a	48 83 7c 24 68
	00		 cmp	 QWORD PTR m$126340[rsp], 0
  00270	75 0c		 jne	 SHORT $LN17@PyObject_P

; 955  :             PyErr_NoMemory();

  00272	e8 00 00 00 00	 call	 PyErr_NoMemory

; 956  :             return 0;

  00277	32 c0		 xor	 al, al
  00279	e9 c8 07 00 00	 jmp	 $LN22@PyObject_P
$LN17@PyObject_P:

; 957  :         }
; 958  : 
; 959  :         if (is_tracked)

  0027e	83 7c 24 44 00	 cmp	 DWORD PTR is_tracked$126343[rsp], 0
  00283	0f 84 f8 00 00
	00		 je	 $LN16@PyObject_P

; 960  :             _PyObject_GC_UNTRACK(type);

  00289	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00291	4c 8b 4c 24 48	 mov	 r9, QWORD PTR type$126335[rsp]
  00296	41 b8 c0 03 00
	00		 mov	 r8d, 960		; 000003c0H
  0029c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@PGHBGAOD@?4?4?2Python?2pyparallel?4c?$AA@
  002a3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BH@KCLIIPCK@_PyObject_PrepOrigType?$AA@
  002aa	e8 00 00 00 00	 call	 _PyParallel_Guard
  002af	85 c0		 test	 eax, eax
  002b1	0f 85 ca 00 00
	00		 jne	 $LN15@PyObject_P
$LN14@PyObject_P:
  002b7	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  002bf	4c 8b 4c 24 48	 mov	 r9, QWORD PTR type$126335[rsp]
  002c4	41 b8 c0 03 00
	00		 mov	 r8d, 960		; 000003c0H
  002ca	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@PGHBGAOD@?4?4?2Python?2pyparallel?4c?$AA@
  002d1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BH@KCLIIPCK@_PyObject_PrepOrigType?$AA@
  002d8	e8 00 00 00 00	 call	 _PyParallel_Guard
  002dd	85 c0		 test	 eax, eax
  002df	74 0e		 je	 SHORT $LN40@PyObject_P
  002e1	48 c7 84 24 c0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR tv167[rsp], 0
  002ed	eb 11		 jmp	 SHORT $LN41@PyObject_P
$LN40@PyObject_P:
  002ef	48 8b 44 24 48	 mov	 rax, QWORD PTR type$126335[rsp]
  002f4	48 83 e8 18	 sub	 rax, 24
  002f8	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR tv167[rsp], rax
$LN41@PyObject_P:
  00300	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR tv167[rsp]
  00308	48 89 44 24 78	 mov	 QWORD PTR g$126363[rsp], rax
  0030d	48 8b 44 24 78	 mov	 rax, QWORD PTR g$126363[rsp]
  00312	48 83 78 10 fe	 cmp	 QWORD PTR [rax+16], -2
  00317	75 1c		 jne	 SHORT $LN42@PyObject_P
  00319	41 b8 c0 03 00
	00		 mov	 r8d, 960		; 000003c0H
  0031f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00326	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EM@HFMJMDDM@?$AAg?$AA?9?$AA?$DO?$AAg?$AAc?$AA?4?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AAG?$AAC?$AA_?$AAR?$AAE?$AAF?$AAS?$AA_?$AAU?$AAN?$AAT?$AAR@
  0032d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00333	33 c0		 xor	 eax, eax
$LN42@PyObject_P:
  00335	48 8b 44 24 78	 mov	 rax, QWORD PTR g$126363[rsp]
  0033a	48 c7 40 10 fe
	ff ff ff	 mov	 QWORD PTR [rax+16], -2
  00342	48 8b 44 24 78	 mov	 rax, QWORD PTR g$126363[rsp]
  00347	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0034b	48 8b 4c 24 78	 mov	 rcx, QWORD PTR g$126363[rsp]
  00350	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00353	48 89 08	 mov	 QWORD PTR [rax], rcx
  00356	48 8b 44 24 78	 mov	 rax, QWORD PTR g$126363[rsp]
  0035b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0035e	48 8b 4c 24 78	 mov	 rcx, QWORD PTR g$126363[rsp]
  00363	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00367	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  0036b	48 8b 44 24 78	 mov	 rax, QWORD PTR g$126363[rsp]
  00370	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
  00377	33 c0		 xor	 eax, eax
  00379	85 c0		 test	 eax, eax
  0037b	0f 85 36 ff ff
	ff		 jne	 $LN14@PyObject_P
$LN15@PyObject_P:
$LN16@PyObject_P:

; 961  : 
; 962  :         memcpy(m, offset, size);

  00381	4c 8b 44 24 58	 mov	 r8, QWORD PTR size$126338[rsp]
  00386	48 8b 54 24 50	 mov	 rdx, QWORD PTR offset$126339[rsp]
  0038b	48 8b 4c 24 68	 mov	 rcx, QWORD PTR m$126340[rsp]
  00390	e8 00 00 00 00	 call	 memcpy

; 963  : 
; 964  :         if (is_gc && is_heap)

  00395	83 7c 24 40 00	 cmp	 DWORD PTR is_gc$126342[rsp], 0
  0039a	74 5f		 je	 SHORT $LN11@PyObject_P
  0039c	83 7c 24 60 00	 cmp	 DWORD PTR is_heap$126341[rsp], 0
  003a1	74 58		 je	 SHORT $LN11@PyObject_P

; 965  :             tp = (PyTypeObject *)_Py_FROM_GC(m);

  003a3	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  003ab	4c 8b 4c 24 68	 mov	 r9, QWORD PTR m$126340[rsp]
  003b0	41 b8 c5 03 00
	00		 mov	 r8d, 965		; 000003c5H
  003b6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@PGHBGAOD@?4?4?2Python?2pyparallel?4c?$AA@
  003bd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BH@KCLIIPCK@_PyObject_PrepOrigType?$AA@
  003c4	e8 00 00 00 00	 call	 _PyParallel_Guard
  003c9	85 c0		 test	 eax, eax
  003cb	74 0e		 je	 SHORT $LN43@PyObject_P
  003cd	48 c7 84 24 c8
	00 00 00 00 00
	00 00		 mov	 QWORD PTR tv193[rsp], 0
  003d9	eb 11		 jmp	 SHORT $LN44@PyObject_P
$LN43@PyObject_P:
  003db	48 8b 44 24 68	 mov	 rax, QWORD PTR m$126340[rsp]
  003e0	48 83 c0 18	 add	 rax, 24
  003e4	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR tv193[rsp], rax
$LN44@PyObject_P:
  003ec	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR tv193[rsp]
  003f4	48 89 44 24 70	 mov	 QWORD PTR tp$126337[rsp], rax

; 966  :         else

  003f9	eb 0a		 jmp	 SHORT $LN10@PyObject_P
$LN11@PyObject_P:

; 967  :             tp = (PyTypeObject *)m;

  003fb	48 8b 44 24 68	 mov	 rax, QWORD PTR m$126340[rsp]
  00400	48 89 44 24 70	 mov	 QWORD PTR tp$126337[rsp], rax
$LN10@PyObject_P:

; 968  : 
; 969  :         if (is_tracked)

  00405	83 7c 24 44 00	 cmp	 DWORD PTR is_tracked$126343[rsp], 0
  0040a	0f 84 0f 01 00
	00		 je	 $LN9@PyObject_P

; 970  :             _PyObject_GC_TRACK(tp);

  00410	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00418	4c 8b 4c 24 70	 mov	 r9, QWORD PTR tp$126337[rsp]
  0041d	41 b8 ca 03 00
	00		 mov	 r8d, 970		; 000003caH
  00423	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@PGHBGAOD@?4?4?2Python?2pyparallel?4c?$AA@
  0042a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BH@KCLIIPCK@_PyObject_PrepOrigType?$AA@
  00431	e8 00 00 00 00	 call	 _PyParallel_Guard
  00436	85 c0		 test	 eax, eax
  00438	0f 85 e1 00 00
	00		 jne	 $LN8@PyObject_P
$LN7@PyObject_P:
  0043e	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00446	4c 8b 4c 24 70	 mov	 r9, QWORD PTR tp$126337[rsp]
  0044b	41 b8 ca 03 00
	00		 mov	 r8d, 970		; 000003caH
  00451	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@PGHBGAOD@?4?4?2Python?2pyparallel?4c?$AA@
  00458	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BH@KCLIIPCK@_PyObject_PrepOrigType?$AA@
  0045f	e8 00 00 00 00	 call	 _PyParallel_Guard
  00464	85 c0		 test	 eax, eax
  00466	74 0e		 je	 SHORT $LN45@PyObject_P
  00468	48 c7 84 24 d0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR tv210[rsp], 0
  00474	eb 11		 jmp	 SHORT $LN46@PyObject_P
$LN45@PyObject_P:
  00476	48 8b 44 24 70	 mov	 rax, QWORD PTR tp$126337[rsp]
  0047b	48 83 e8 18	 sub	 rax, 24
  0047f	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR tv210[rsp], rax
$LN46@PyObject_P:
  00487	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR tv210[rsp]
  0048f	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR g$126380[rsp], rax
  00497	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR g$126380[rsp]
  0049f	48 83 78 10 fe	 cmp	 QWORD PTR [rax+16], -2
  004a4	74 0c		 je	 SHORT $LN4@PyObject_P
  004a6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@
  004ad	e8 00 00 00 00	 call	 Py_FatalError
$LN4@PyObject_P:
  004b2	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR g$126380[rsp]
  004ba	48 c7 40 10 fd
	ff ff ff	 mov	 QWORD PTR [rax+16], -3
  004c2	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR g$126380[rsp]
  004ca	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR _PyGC_generation0
  004d1	48 89 08	 mov	 QWORD PTR [rax], rcx
  004d4	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR g$126380[rsp]
  004dc	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR _PyGC_generation0
  004e3	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  004e7	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  004eb	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR g$126380[rsp]
  004f3	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  004f7	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR g$126380[rsp]
  004ff	48 89 08	 mov	 QWORD PTR [rax], rcx
  00502	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyGC_generation0
  00509	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR g$126380[rsp]
  00511	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  00515	33 c0		 xor	 eax, eax
  00517	85 c0		 test	 eax, eax
  00519	0f 85 1f ff ff
	ff		 jne	 $LN7@PyObject_P
$LN8@PyObject_P:
$LN9@PyObject_P:

; 971  : 
; 972  :         Py_ORIG_TYPE(o) = type;

  0051f	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR o$[rsp]
  00527	48 8b 4c 24 48	 mov	 rcx, QWORD PTR type$126335[rsp]
  0052c	48 89 48 38	 mov	 QWORD PTR [rax+56], rcx

; 973  :         Py_TYPE(o) = tp;

  00530	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR o$[rsp]
  00538	48 8b 4c 24 70	 mov	 rcx, QWORD PTR tp$126337[rsp]
  0053d	48 89 48 58	 mov	 QWORD PTR [rax+88], rcx

; 974  :         tp->tp_dealloc  = _PyObject_Dealloc;

  00541	48 8b 44 24 70	 mov	 rax, QWORD PTR tp$126337[rsp]
  00546	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_PyObject_Dealloc
  0054d	48 89 88 88 00
	00 00		 mov	 QWORD PTR [rax+136], rcx

; 975  :         tp->tp_setattro = _PyObject_GenericSetAttr;

  00554	48 8b 44 24 70	 mov	 rax, QWORD PTR tp$126337[rsp]
  00559	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_PyObject_GenericSetAttr
  00560	48 89 88 f0 00
	00 00		 mov	 QWORD PTR [rax+240], rcx

; 976  :         tp->tp_getattro = _PyObject_GenericGetAttr;

  00567	48 8b 44 24 70	 mov	 rax, QWORD PTR tp$126337[rsp]
  0056c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_PyObject_GenericGetAttr
  00573	48 89 88 e8 00
	00 00		 mov	 QWORD PTR [rax+232], rcx

; 977  :         tp->tp_setattr  = _PyObject_SetAttrString;

  0057a	48 8b 44 24 70	 mov	 rax, QWORD PTR tp$126337[rsp]
  0057f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_PyObject_SetAttrString
  00586	48 89 88 a0 00
	00 00		 mov	 QWORD PTR [rax+160], rcx

; 978  :         tp->tp_getattr  = _PyObject_GetAttrString;

  0058d	48 8b 44 24 70	 mov	 rax, QWORD PTR tp$126337[rsp]
  00592	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_PyObject_GetAttrString
  00599	48 89 88 98 00
	00 00		 mov	 QWORD PTR [rax+152], rcx

; 979  : 
; 980  :         old_mm = type->tp_as_mapping;

  005a0	48 8b 44 24 48	 mov	 rax, QWORD PTR type$126335[rsp]
  005a5	48 8b 80 c8 00
	00 00		 mov	 rax, QWORD PTR [rax+200]
  005ac	48 89 44 24 38	 mov	 QWORD PTR old_mm$[rsp], rax

; 981  :         if (old_mm && old_mm->mp_subscript) {

  005b1	48 83 7c 24 38
	00		 cmp	 QWORD PTR old_mm$[rsp], 0
  005b7	0f 84 09 01 00
	00		 je	 $LN3@PyObject_P
  005bd	48 8b 44 24 38	 mov	 rax, QWORD PTR old_mm$[rsp]
  005c2	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  005c7	0f 84 f9 00 00
	00		 je	 $LN3@PyObject_P

; 982  :             size = sizeof(PyMappingMethods);

  005cd	48 c7 44 24 58
	18 00 00 00	 mov	 QWORD PTR size$126338[rsp], 24

; 983  :             new_mm = (PyMappingMethods *)PyMem_MALLOC(size);

  005d6	e8 00 00 00 00	 call	 _Py_PXCTX
  005db	85 c0		 test	 eax, eax
  005dd	74 14		 je	 SHORT $LN47@PyObject_P
  005df	48 8b 4c 24 58	 mov	 rcx, QWORD PTR size$126338[rsp]
  005e4	e8 00 00 00 00	 call	 _PxMem_Malloc
  005e9	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR tv238[rsp], rax
  005f1	eb 12		 jmp	 SHORT $LN48@PyObject_P
$LN47@PyObject_P:
  005f3	48 8b 4c 24 58	 mov	 rcx, QWORD PTR size$126338[rsp]
  005f8	e8 00 00 00 00	 call	 _PyMem_DebugMalloc
  005fd	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR tv238[rsp], rax
$LN48@PyObject_P:
  00605	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR tv238[rsp]
  0060d	48 89 44 24 30	 mov	 QWORD PTR new_mm$[rsp], rax

; 984  :             if (!new_mm)

  00612	48 83 7c 24 30
	00		 cmp	 QWORD PTR new_mm$[rsp], 0
  00618	75 05		 jne	 SHORT $LN2@PyObject_P

; 985  :                 goto free_m;

  0061a	e9 a9 00 00 00	 jmp	 $free_m$126393
$LN2@PyObject_P:

; 986  : 
; 987  :             memcpy(new_mm, old_mm, size);

  0061f	4c 8b 44 24 58	 mov	 r8, QWORD PTR size$126338[rsp]
  00624	48 8b 54 24 38	 mov	 rdx, QWORD PTR old_mm$[rsp]
  00629	48 8b 4c 24 30	 mov	 rcx, QWORD PTR new_mm$[rsp]
  0062e	e8 00 00 00 00	 call	 memcpy

; 988  : 
; 989  :             new_mm->mp_subscript = _Px_mp_subcript;

  00633	48 8b 44 24 30	 mov	 rax, QWORD PTR new_mm$[rsp]
  00638	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Px_mp_subcript
  0063f	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 990  : 
; 991  :             new_mm->mp_length = (old_mm->mp_length ? _Px_mp_length : 0);

  00643	48 8b 44 24 38	 mov	 rax, QWORD PTR old_mm$[rsp]
  00648	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0064c	74 11		 je	 SHORT $LN49@PyObject_P
  0064e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Px_mp_length
  00655	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR tv245[rsp], rax
  0065d	eb 0c		 jmp	 SHORT $LN50@PyObject_P
$LN49@PyObject_P:
  0065f	48 c7 84 24 e0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR tv245[rsp], 0
$LN50@PyObject_P:
  0066b	48 8b 44 24 30	 mov	 rax, QWORD PTR new_mm$[rsp]
  00670	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR tv245[rsp]
  00678	48 89 08	 mov	 QWORD PTR [rax], rcx

; 992  :             new_mm->mp_ass_subscript = (
; 993  :                 old_mm->mp_ass_subscript ? _Px_mp_ass_subscript : 0
; 994  :             );

  0067b	48 8b 44 24 38	 mov	 rax, QWORD PTR old_mm$[rsp]
  00680	48 83 78 10 00	 cmp	 QWORD PTR [rax+16], 0
  00685	74 11		 je	 SHORT $LN51@PyObject_P
  00687	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Px_mp_ass_subscript
  0068e	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR tv249[rsp], rax
  00696	eb 0c		 jmp	 SHORT $LN52@PyObject_P
$LN51@PyObject_P:
  00698	48 c7 84 24 e8
	00 00 00 00 00
	00 00		 mov	 QWORD PTR tv249[rsp], 0
$LN52@PyObject_P:
  006a4	48 8b 44 24 30	 mov	 rax, QWORD PTR new_mm$[rsp]
  006a9	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR tv249[rsp]
  006b1	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 995  : 
; 996  :             tp->tp_as_mapping = new_mm;

  006b5	48 8b 44 24 70	 mov	 rax, QWORD PTR tp$126337[rsp]
  006ba	48 8b 4c 24 30	 mov	 rcx, QWORD PTR new_mm$[rsp]
  006bf	48 89 88 c8 00
	00 00		 mov	 QWORD PTR [rax+200], rcx
$LN3@PyObject_P:

; 997  :         }
; 998  : 
; 999  :         /*
; 1000 :         old_sm = type->tp_as_sequence;
; 1001 :         if (old_sm) {
; 1002 :             assert(old_sm->sq_item);
; 1003 :             size = sizeof(PySequenceMethods);
; 1004 :             new_sm = (PySequenceMethods *)PyMem_MALLOC(size);
; 1005 :             if (!new_sm)
; 1006 :                 goto free_new_mm;
; 1007 : 
; 1008 :             memcpy(new_sm, old_sm, size);
; 1009 : 
; 1010 :             new_sm->sq_item = _Px_sq_item;
; 1011 : 
; 1012 :             new_sm->sq_length = (old_sm->sq_length ? _Px_sq_length : 0);
; 1013 :             new_sm->sq_concat = (old_sm->sq_concat ? _Px_sq_concat : 0);
; 1014 :             new_sm->sq_repeat = (old_sm->sq_repeat ? _Px_sq_repeat : 0);
; 1015 :             new_sm->sq_ass_item = (old_sm->sq_ass_item ? _Px_sq_ass_item : 0);
; 1016 :             new_sm->sq_contains = (old_sm->sq_contains ? _Px_sq_contains : 0);
; 1017 :             new_sm->sq_inplace_concat = (
; 1018 :                 old_sm->sq_inplace_concat ? _Px_sq_inplace_concat : 0
; 1019 :             );
; 1020 :             new_sm->sq_inplace_repeat = (
; 1021 :                 old_sm->sq_inplace_repeat ? _Px_sq_inplace_repeat : 0
; 1022 :             );
; 1023 : 
; 1024 :             tp->tp_as_sequence = new_sm;
; 1025 :         }
; 1026 :         */
; 1027 : 
; 1028 :         goto check_invariants;

  006c6	eb 3f		 jmp	 SHORT $check_invariants$126394
$free_m$126393:

; 1029 : 
; 1030 :         /*
; 1031 :     free_new_mm:
; 1032 :         PyMem_FREE(new_mm);
; 1033 :         */
; 1034 : 
; 1035 :     free_m:
; 1036 :         PyMem_FREE(m);

  006c8	e8 00 00 00 00	 call	 _Py_PXCTX
  006cd	85 c0		 test	 eax, eax
  006cf	74 17		 je	 SHORT $LN53@PyObject_P
  006d1	48 8b 4c 24 68	 mov	 rcx, QWORD PTR m$126340[rsp]
  006d6	e8 00 00 00 00	 call	 _PxMem_Free
  006db	c7 84 24 f0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv255[rsp], 0
  006e6	eb 15		 jmp	 SHORT $LN54@PyObject_P
$LN53@PyObject_P:
  006e8	48 8b 4c 24 68	 mov	 rcx, QWORD PTR m$126340[rsp]
  006ed	e8 00 00 00 00	 call	 _PyMem_DebugFree
  006f2	c7 84 24 f0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv255[rsp], 0
$LN54@PyObject_P:

; 1037 : 
; 1038 :         PyErr_NoMemory();

  006fd	e8 00 00 00 00	 call	 PyErr_NoMemory

; 1039 :         goto error;

  00702	e9 17 03 00 00	 jmp	 $error$126395
$LN21@PyObject_P:
$check_invariants$126394:

; 1040 : 
; 1041 :     }
; 1042 : 
; 1043 : check_invariants:
; 1044 :     assert(Py_ORIG_TYPE(o));

  00707	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR o$[rsp]
  0070f	48 83 78 38 00	 cmp	 QWORD PTR [rax+56], 0
  00714	75 1c		 jne	 SHORT $LN55@PyObject_P
  00716	41 b8 14 04 00
	00		 mov	 r8d, 1044		; 00000414H
  0071c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00723	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CA@LIAOCINA@?$AAP?$AAy?$AA_?$AAO?$AAR?$AAI?$AAG?$AA_?$AAT?$AAY?$AAP?$AAE?$AA?$CI?$AAo?$AA?$CJ?$AA?$AA@
  0072a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00730	33 c0		 xor	 eax, eax
$LN55@PyObject_P:

; 1045 :     assert(Py_ORIG_TYPE_CAST(o)->tp_dealloc);

  00732	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR o$[rsp]
  0073a	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  0073e	48 83 b8 88 00
	00 00 00	 cmp	 QWORD PTR [rax+136], 0
  00746	75 1c		 jne	 SHORT $LN56@PyObject_P
  00748	41 b8 15 04 00
	00		 mov	 r8d, 1045		; 00000415H
  0074e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00755	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EC@MDHCKPLC@?$AAP?$AAy?$AA_?$AAO?$AAR?$AAI?$AAG?$AA_?$AAT?$AAY?$AAP?$AAE?$AA_?$AAC?$AAA?$AAS?$AAT?$AA?$CI?$AAo?$AA?$CJ?$AA?9?$AA?$DO?$AAt?$AAp?$AA_?$AAd?$AAe?$AAa?$AAl?$AAl?$AAo?$AAc@
  0075c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00762	33 c0		 xor	 eax, eax
$LN56@PyObject_P:

; 1046 :     assert(Py_ORIG_TYPE_CAST(o)->tp_dealloc != _PyObject_Dealloc);

  00764	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR o$[rsp]
  0076c	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  00770	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_PyObject_Dealloc
  00777	48 39 88 88 00
	00 00		 cmp	 QWORD PTR [rax+136], rcx
  0077e	75 1c		 jne	 SHORT $LN57@PyObject_P
  00780	41 b8 16 04 00
	00		 mov	 r8d, 1046		; 00000416H
  00786	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0078d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1GM@JAGGOPJC@?$AAP?$AAy?$AA_?$AAO?$AAR?$AAI?$AAG?$AA_?$AAT?$AAY?$AAP?$AAE?$AA_?$AAC?$AAA?$AAS?$AAT?$AA?$CI?$AAo?$AA?$CJ?$AA?9?$AA?$DO?$AAt?$AAp?$AA_?$AAd?$AAe?$AAa?$AAl?$AAl?$AAo?$AAc@
  00794	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0079a	33 c0		 xor	 eax, eax
$LN57@PyObject_P:

; 1047 :     assert(Py_TYPE(o)->tp_dealloc  == _PyObject_Dealloc);

  0079c	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR o$[rsp]
  007a4	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  007a8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_PyObject_Dealloc
  007af	48 39 88 88 00
	00 00		 cmp	 QWORD PTR [rax+136], rcx
  007b6	74 1c		 je	 SHORT $LN58@PyObject_P
  007b8	41 b8 17 04 00
	00		 mov	 r8d, 1047		; 00000417H
  007be	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  007c5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FI@MFFGIELI@?$AAP?$AAy?$AA_?$AAT?$AAY?$AAP?$AAE?$AA?$CI?$AAo?$AA?$CJ?$AA?9?$AA?$DO?$AAt?$AAp?$AA_?$AAd?$AAe?$AAa?$AAl?$AAl?$AAo?$AAc?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AAO?$AAb?$AAj@
  007cc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  007d2	33 c0		 xor	 eax, eax
$LN58@PyObject_P:

; 1048 :     assert(Py_TYPE(o)->tp_setattro == _PyObject_GenericSetAttr);

  007d4	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR o$[rsp]
  007dc	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  007e0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_PyObject_GenericSetAttr
  007e7	48 39 88 f0 00
	00 00		 cmp	 QWORD PTR [rax+240], rcx
  007ee	74 1c		 je	 SHORT $LN59@PyObject_P
  007f0	41 b8 18 04 00
	00		 mov	 r8d, 1048		; 00000418H
  007f6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  007fd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1GI@FBEBAGIN@?$AAP?$AAy?$AA_?$AAT?$AAY?$AAP?$AAE?$AA?$CI?$AAo?$AA?$CJ?$AA?9?$AA?$DO?$AAt?$AAp?$AA_?$AAs?$AAe?$AAt?$AAa?$AAt?$AAt?$AAr?$AAo?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AAO?$AAb@
  00804	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0080a	33 c0		 xor	 eax, eax
$LN59@PyObject_P:

; 1049 :     assert(Py_TYPE(o)->tp_getattro == _PyObject_GenericGetAttr);

  0080c	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR o$[rsp]
  00814	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00818	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_PyObject_GenericGetAttr
  0081f	48 39 88 e8 00
	00 00		 cmp	 QWORD PTR [rax+232], rcx
  00826	74 1c		 je	 SHORT $LN60@PyObject_P
  00828	41 b8 19 04 00
	00		 mov	 r8d, 1049		; 00000419H
  0082e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00835	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1GI@OHPMNKMC@?$AAP?$AAy?$AA_?$AAT?$AAY?$AAP?$AAE?$AA?$CI?$AAo?$AA?$CJ?$AA?9?$AA?$DO?$AAt?$AAp?$AA_?$AAg?$AAe?$AAt?$AAa?$AAt?$AAt?$AAr?$AAo?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AAO?$AAb@
  0083c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00842	33 c0		 xor	 eax, eax
$LN60@PyObject_P:

; 1050 :     assert(Py_TYPE(o)->tp_setattr  == _PyObject_SetAttrString);

  00844	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR o$[rsp]
  0084c	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00850	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_PyObject_SetAttrString
  00857	48 39 88 a0 00
	00 00		 cmp	 QWORD PTR [rax+160], rcx
  0085e	74 1c		 je	 SHORT $LN61@PyObject_P
  00860	41 b8 1a 04 00
	00		 mov	 r8d, 1050		; 0000041aH
  00866	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0086d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1GE@DFKDCIGI@?$AAP?$AAy?$AA_?$AAT?$AAY?$AAP?$AAE?$AA?$CI?$AAo?$AA?$CJ?$AA?9?$AA?$DO?$AAt?$AAp?$AA_?$AAs?$AAe?$AAt?$AAa?$AAt?$AAt?$AAr?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AAO?$AAb?$AAj@
  00874	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0087a	33 c0		 xor	 eax, eax
$LN61@PyObject_P:

; 1051 :     assert(Py_TYPE(o)->tp_getattr  == _PyObject_GetAttrString);

  0087c	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR o$[rsp]
  00884	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00888	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_PyObject_GetAttrString
  0088f	48 39 88 98 00
	00 00		 cmp	 QWORD PTR [rax+152], rcx
  00896	74 1c		 je	 SHORT $LN62@PyObject_P
  00898	41 b8 1b 04 00
	00		 mov	 r8d, 1051		; 0000041bH
  0089e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  008a5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1GE@PGHPFG@?$AAP?$AAy?$AA_?$AAT?$AAY?$AAP?$AAE?$AA?$CI?$AAo?$AA?$CJ?$AA?9?$AA?$DO?$AAt?$AAp?$AA_?$AAg?$AAe?$AAt?$AAa?$AAt?$AAt?$AAr?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AAO?$AAb?$AAj@
  008ac	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  008b2	33 c0		 xor	 eax, eax
$LN62@PyObject_P:

; 1052 :     old_mm = (Py_ORIG_TYPE_CAST(o)->tp_as_mapping);

  008b4	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR o$[rsp]
  008bc	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  008c0	48 8b 80 c8 00
	00 00		 mov	 rax, QWORD PTR [rax+200]
  008c7	48 89 44 24 38	 mov	 QWORD PTR old_mm$[rsp], rax

; 1053 :     if (old_mm && old_mm->mp_subscript) {

  008cc	48 83 7c 24 38
	00		 cmp	 QWORD PTR old_mm$[rsp], 0
  008d2	0f 84 42 01 00
	00		 je	 $LN1@PyObject_P
  008d8	48 8b 44 24 38	 mov	 rax, QWORD PTR old_mm$[rsp]
  008dd	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  008e2	0f 84 32 01 00
	00		 je	 $LN1@PyObject_P

; 1054 :         new_mm = Py_TYPE(o)->tp_as_mapping;

  008e8	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR o$[rsp]
  008f0	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  008f4	48 8b 80 c8 00
	00 00		 mov	 rax, QWORD PTR [rax+200]
  008fb	48 89 44 24 30	 mov	 QWORD PTR new_mm$[rsp], rax

; 1055 :         assert(new_mm->mp_subscript == _Px_mp_subcript);

  00900	48 8b 44 24 30	 mov	 rax, QWORD PTR new_mm$[rsp]
  00905	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Px_mp_subcript
  0090c	48 39 48 08	 cmp	 QWORD PTR [rax+8], rcx
  00910	74 1c		 je	 SHORT $LN63@PyObject_P
  00912	41 b8 1f 04 00
	00		 mov	 r8d, 1055		; 0000041fH
  00918	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0091f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FA@OPBLMOG@?$AAn?$AAe?$AAw?$AA_?$AAm?$AAm?$AA?9?$AA?$DO?$AAm?$AAp?$AA_?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA_?$AAP?$AAx?$AA_?$AAm?$AAp?$AA_?$AAs@
  00926	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0092c	33 c0		 xor	 eax, eax
$LN63@PyObject_P:

; 1056 :         assert(old_mm->mp_length ? (new_mm->mp_length == _Px_mp_length) : 1);

  0092e	48 8b 44 24 38	 mov	 rax, QWORD PTR old_mm$[rsp]
  00933	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00937	74 39		 je	 SHORT $LN66@PyObject_P
  00939	48 8b 44 24 30	 mov	 rax, QWORD PTR new_mm$[rsp]
  0093e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Px_mp_length
  00945	48 39 08	 cmp	 QWORD PTR [rax], rcx
  00948	75 0d		 jne	 SHORT $LN64@PyObject_P
  0094a	c7 84 24 f4 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv325[rsp], 1
  00955	eb 0b		 jmp	 SHORT $LN65@PyObject_P
$LN64@PyObject_P:
  00957	c7 84 24 f4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv325[rsp], 0
$LN65@PyObject_P:
  00962	8b 84 24 f4 00
	00 00		 mov	 eax, DWORD PTR tv325[rsp]
  00969	89 84 24 f8 00
	00 00		 mov	 DWORD PTR tv327[rsp], eax
  00970	eb 0b		 jmp	 SHORT $LN67@PyObject_P
$LN66@PyObject_P:
  00972	c7 84 24 f8 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv327[rsp], 1
$LN67@PyObject_P:
  0097d	83 bc 24 f8 00
	00 00 00	 cmp	 DWORD PTR tv327[rsp], 0
  00985	75 1c		 jne	 SHORT $LN68@PyObject_P
  00987	41 b8 20 04 00
	00		 mov	 r8d, 1056		; 00000420H
  0098d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00994	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1HK@NEFIHBMA@?$AAo?$AAl?$AAd?$AA_?$AAm?$AAm?$AA?9?$AA?$DO?$AAm?$AAp?$AA_?$AAl?$AAe?$AAn?$AAg?$AAt?$AAh?$AA?5?$AA?$DP?$AA?5?$AA?$CI?$AAn?$AAe?$AAw?$AA_?$AAm?$AAm?$AA?9?$AA?$DO?$AAm?$AAp?$AA_@
  0099b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  009a1	33 c0		 xor	 eax, eax
$LN68@PyObject_P:

; 1057 :         assert(
; 1058 :             !old_mm->mp_ass_subscript ? 1 : (
; 1059 :                 new_mm->mp_ass_subscript == _Px_mp_ass_subscript
; 1060 :             )
; 1061 :         );

  009a3	48 8b 44 24 38	 mov	 rax, QWORD PTR old_mm$[rsp]
  009a8	48 83 78 10 00	 cmp	 QWORD PTR [rax+16], 0
  009ad	75 0d		 jne	 SHORT $LN71@PyObject_P
  009af	c7 84 24 fc 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv338[rsp], 1
  009ba	eb 38		 jmp	 SHORT $LN72@PyObject_P
$LN71@PyObject_P:
  009bc	48 8b 44 24 30	 mov	 rax, QWORD PTR new_mm$[rsp]
  009c1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Px_mp_ass_subscript
  009c8	48 39 48 10	 cmp	 QWORD PTR [rax+16], rcx
  009cc	75 0d		 jne	 SHORT $LN69@PyObject_P
  009ce	c7 84 24 00 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv337[rsp], 1
  009d9	eb 0b		 jmp	 SHORT $LN70@PyObject_P
$LN69@PyObject_P:
  009db	c7 84 24 00 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv337[rsp], 0
$LN70@PyObject_P:
  009e6	8b 84 24 00 01
	00 00		 mov	 eax, DWORD PTR tv337[rsp]
  009ed	89 84 24 fc 00
	00 00		 mov	 DWORD PTR tv338[rsp], eax
$LN72@PyObject_P:
  009f4	83 bc 24 fc 00
	00 00 00	 cmp	 DWORD PTR tv338[rsp], 0
  009fc	75 1c		 jne	 SHORT $LN73@PyObject_P
  009fe	41 b8 25 04 00
	00		 mov	 r8d, 1061		; 00000425H
  00a04	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00a0b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1KK@HMDJKLL@?$AA?$CB?$AAo?$AAl?$AAd?$AA_?$AAm?$AAm?$AA?9?$AA?$DO?$AAm?$AAp?$AA_?$AAa?$AAs?$AAs?$AA_?$AAs?$AAu?$AAb?$AAs?$AAc?$AAr?$AAi?$AAp?$AAt?$AA?5?$AA?$DP?$AA?5?$AA1?$AA?5?$AA?3?$AA?5@
  00a12	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00a18	33 c0		 xor	 eax, eax
$LN73@PyObject_P:
$LN1@PyObject_P:

; 1062 :     }
; 1063 :     /*
; 1064 :     old_sm = (Py_ORIG_TYPE_CAST(o)->tp_as_sequence);
; 1065 :     if (old_sm) {
; 1066 :         new_sm = Py_TYPE(o)->tp_as_sequence;
; 1067 :         assert(new_sm->sq_item);
; 1068 :         assert(new_sm->sq_item == _Px_sq_item);
; 1069 :         assert(old_sm->sq_length ? (new_sm->sq_length == _Px_sq_length) : 1);
; 1070 :         assert(old_sm->sq_concat ? (new_sm->sq_concat == _Px_sq_concat) : 1);
; 1071 :         assert(old_sm->sq_repeat ? (new_sm->sq_repeat == _Px_sq_repeat) : 1);
; 1072 :         assert(old_sm->sq_ass_item ? (new_sm->sq_ass_item == _Px_sq_ass_item) : 1);
; 1073 :         assert(old_sm->sq_contains ? (new_sm->sq_contains == _Px_sq_contains) : 1);
; 1074 :         assert(
; 1075 :             !old_sm->sq_inplace_concat ? 1 : (
; 1076 :                 new_sm->sq_inplace_concat == _Px_sq_inplace_concat
; 1077 :             )
; 1078 :         );
; 1079 :         assert(
; 1080 :             !old_sm->sq_inplace_repeat ? 1 : (
; 1081 :                 new_sm->sq_inplace_repeat == _Px_sq_inplace_repeat
; 1082 :             )
; 1083 :         );
; 1084 :     }
; 1085 :     */
; 1086 :     return 1;

  00a1a	b0 01		 mov	 al, 1
  00a1c	eb 28		 jmp	 SHORT $LN22@PyObject_P
$error$126395:

; 1087 : error:
; 1088 :     assert(PyErr_Occurred());

  00a1e	e8 00 00 00 00	 call	 PyErr_Occurred
  00a23	48 85 c0	 test	 rax, rax
  00a26	75 1c		 jne	 SHORT $LN74@PyObject_P
  00a28	41 b8 40 04 00
	00		 mov	 r8d, 1088		; 00000440H
  00a2e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00a35	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CC@DNBCFJEA@?$AAP?$AAy?$AAE?$AAr?$AAr?$AA_?$AAO?$AAc?$AAc?$AAu?$AAr?$AAr?$AAe?$AAd?$AA?$CI?$AA?$CJ?$AA?$AA@
  00a3c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00a42	33 c0		 xor	 eax, eax
$LN74@PyObject_P:

; 1089 :     return 0;

  00a44	32 c0		 xor	 al, al
$LN22@PyObject_P:

; 1090 : }

  00a46	48 81 c4 18 01
	00 00		 add	 rsp, 280		; 00000118H
  00a4d	c3		 ret	 0
_PyObject_PrepOrigType ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BD@JOGICDBK@_PyEvent_TryCreate?$AA@	; `string'
PUBLIC	??_C@_1CC@IOGJBLIK@?$AAP?$AAy?$AA_?$AAH?$AAA?$AAS?$AA_?$AAR?$AAW?$AAL?$AAO?$AAC?$AAK?$AA?$CI?$AAo?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	_PyEvent_TryCreate
EXTRN	__imp_CreateEventW:PROC
_BSS	SEGMENT
PyExc_WaitError DQ 01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyEvent_TryCreate DD imagerel $LN13
	DD	imagerel $LN13+322
	DD	imagerel $unwind$_PyEvent_TryCreate
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyEvent_TryCreate DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0BD@JOGICDBK@_PyEvent_TryCreate?$AA@
CONST	SEGMENT
??_C@_0BD@JOGICDBK@_PyEvent_TryCreate?$AA@ DB '_PyEvent_TryCreate', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CC@IOGJBLIK@?$AAP?$AAy?$AA_?$AAH?$AAA?$AAS?$AA_?$AAR?$AAW?$AAL?$AAO?$AAC?$AAK?$AA?$CI?$AAo?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CC@IOGJBLIK@?$AAP?$AAy?$AA_?$AAH?$AAA?$AAS?$AA_?$AAR?$AAW?$AAL?$AAO?$AAC?$AAK?$AA?$CI?$AAo?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, '_', 00H, 'H', 00H, 'A', 00H, 'S', 00H, '_', 00H
	DB	'R', 00H, 'W', 00H, 'L', 00H, 'O', 00H, 'C', 00H, 'K', 00H, '('
	DB	00H, 'o', 00H, ')', 00H, 00H, 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PyEvent_TryCreate
_TEXT	SEGMENT
success$ = 48
tv89 = 56
o$ = 80
_PyEvent_TryCreate PROC					; COMDAT

; 1094 : {

$LN13:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1095 :     char success = 1;

  00009	c6 44 24 30 01	 mov	 BYTE PTR success$[rsp], 1

; 1096 :     assert(Py_HAS_RWLOCK(o));

  0000e	48 8b 44 24 50	 mov	 rax, QWORD PTR o$[rsp]
  00013	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00017	48 83 e0 04	 and	 rax, 4
  0001b	48 85 c0	 test	 rax, rax
  0001e	75 1c		 jne	 SHORT $LN11@PyEvent_Tr
  00020	41 b8 48 04 00
	00		 mov	 r8d, 1096		; 00000448H
  00026	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0002d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CC@IOGJBLIK@?$AAP?$AAy?$AA_?$AAH?$AAA?$AAS?$AA_?$AAR?$AAW?$AAL?$AAO?$AAC?$AAK?$AA?$CI?$AAo?$AA?$CJ?$AA?$AA@
  00034	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0003a	33 c0		 xor	 eax, eax
$LN11@PyEvent_Tr:

; 1097 :     _write_lock(o);

  0003c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR o$[rsp]
  00041	e8 00 00 00 00	 call	 _write_lock

; 1098 :     if (!Py_HAS_EVENT(o)) {

  00046	48 8b 44 24 50	 mov	 rax, QWORD PTR o$[rsp]
  0004b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0004f	48 83 e0 08	 and	 rax, 8
  00053	48 85 c0	 test	 rax, rax
  00056	0f 85 a3 00 00
	00		 jne	 $LN8@PyEvent_Tr

; 1099 :         success = 0;

  0005c	c6 44 24 30 00	 mov	 BYTE PTR success$[rsp], 0

; 1100 :         if (Py_ISPX(o))

  00061	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00069	4c 8b 4c 24 50	 mov	 r9, QWORD PTR o$[rsp]
  0006e	41 b8 4c 04 00
	00		 mov	 r8d, 1100		; 0000044cH
  00074	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@PGHBGAOD@?4?4?2Python?2pyparallel?4c?$AA@
  0007b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@JOGICDBK@_PyEvent_TryCreate?$AA@
  00082	e8 00 00 00 00	 call	 _PyParallel_Guard
  00087	85 c0		 test	 eax, eax
  00089	74 0e		 je	 SHORT $LN7@PyEvent_Tr

; 1101 :             PyErr_SetNone(PyExc_WaitError);

  0008b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_WaitError
  00092	e8 00 00 00 00	 call	 PyErr_SetNone
  00097	eb 66		 jmp	 SHORT $LN6@PyEvent_Tr
$LN7@PyEvent_Tr:

; 1102 :         else if (!_PyObject_PrepOrigType(o, 0))

  00099	33 d2		 xor	 edx, edx
  0009b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR o$[rsp]
  000a0	e8 00 00 00 00	 call	 _PyObject_PrepOrigType
  000a5	0f be c0	 movsx	 eax, al
  000a8	85 c0		 test	 eax, eax
  000aa	75 04		 jne	 SHORT $LN5@PyEvent_Tr

; 1103 :             goto done;

  000ac	eb 51		 jmp	 SHORT $done$126447
  000ae	eb 4f		 jmp	 SHORT $LN4@PyEvent_Tr
$LN5@PyEvent_Tr:

; 1104 :         else if (!PyEvent_CREATE(o))

  000b0	45 33 c9	 xor	 r9d, r9d
  000b3	45 33 c0	 xor	 r8d, r8d
  000b6	33 d2		 xor	 edx, edx
  000b8	33 c9		 xor	 ecx, ecx
  000ba	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateEventW
  000c0	48 89 44 24 38	 mov	 QWORD PTR tv89[rsp], rax
  000c5	48 8b 44 24 50	 mov	 rax, QWORD PTR o$[rsp]
  000ca	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tv89[rsp]
  000cf	48 89 48 30	 mov	 QWORD PTR [rax+48], rcx
  000d3	48 83 7c 24 38
	00		 cmp	 QWORD PTR tv89[rsp], 0
  000d9	75 09		 jne	 SHORT $LN3@PyEvent_Tr

; 1105 :             PyErr_SetFromWindowsErr(0);

  000db	33 c9		 xor	 ecx, ecx
  000dd	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr

; 1106 :         else {

  000e2	eb 1b		 jmp	 SHORT $LN2@PyEvent_Tr
$LN3@PyEvent_Tr:

; 1107 :             Py_PXFLAGS(o) |= Py_PXFLAGS_EVENT;

  000e4	48 8b 44 24 50	 mov	 rax, QWORD PTR o$[rsp]
  000e9	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  000ed	48 83 c8 08	 or	 rax, 8
  000f1	48 8b 4c 24 50	 mov	 rcx, QWORD PTR o$[rsp]
  000f6	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 1108 :             success = 1;

  000fa	c6 44 24 30 01	 mov	 BYTE PTR success$[rsp], 1
$LN2@PyEvent_Tr:
$LN4@PyEvent_Tr:
$LN6@PyEvent_Tr:
$LN8@PyEvent_Tr:
$done$126447:

; 1109 :         }
; 1110 :     }
; 1111 : done:
; 1112 :     if (!success)

  000ff	0f be 44 24 30	 movsx	 eax, BYTE PTR success$[rsp]
  00104	85 c0		 test	 eax, eax
  00106	75 26		 jne	 SHORT $LN1@PyEvent_Tr

; 1113 :         assert(PyErr_Occurred());

  00108	e8 00 00 00 00	 call	 PyErr_Occurred
  0010d	48 85 c0	 test	 rax, rax
  00110	75 1c		 jne	 SHORT $LN12@PyEvent_Tr
  00112	41 b8 59 04 00
	00		 mov	 r8d, 1113		; 00000459H
  00118	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0011f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CC@DNBCFJEA@?$AAP?$AAy?$AAE?$AAr?$AAr?$AA_?$AAO?$AAc?$AAc?$AAu?$AAr?$AAr?$AAe?$AAd?$AA?$CI?$AA?$CJ?$AA?$AA@
  00126	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0012c	33 c0		 xor	 eax, eax
$LN12@PyEvent_Tr:
$LN1@PyEvent_Tr:

; 1114 :     _write_unlock(o);

  0012e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR o$[rsp]
  00133	e8 00 00 00 00	 call	 _write_unlock

; 1115 :     return success;

  00138	0f b6 44 24 30	 movzx	 eax, BYTE PTR success$[rsp]

; 1116 : }

  0013d	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00141	c3		 ret	 0
_PyEvent_TryCreate ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BM@JNNJNMPE@unexpected?5result?5from?5wait?$AA@ ; `string'
PUBLIC	??_C@_0BJ@IMPAOHD@infinite?5wait?5timed?5out?$DP?$AA@ ; `string'
PUBLIC	??_C@_0P@BLBOHJGC@wait?5abandoned?$AA@		; `string'
EXTRN	PyErr_SetString:PROC
EXTRN	PyExc_SystemError:QWORD
EXTRN	__imp_WaitForSingleObject:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_async_wait DD imagerel $LN16
	DD	imagerel $LN16+248
	DD	imagerel $unwind$_async_wait
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_async_wait DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT ??_C@_0BM@JNNJNMPE@unexpected?5result?5from?5wait?$AA@
CONST	SEGMENT
??_C@_0BM@JNNJNMPE@unexpected?5result?5from?5wait?$AA@ DB 'unexpected res'
	DB	'ult from wait', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@IMPAOHD@infinite?5wait?5timed?5out?$DP?$AA@
CONST	SEGMENT
??_C@_0BJ@IMPAOHD@infinite?5wait?5timed?5out?$DP?$AA@ DB 'infinite wait t'
	DB	'imed out?', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BLBOHJGC@wait?5abandoned?$AA@
CONST	SEGMENT
??_C@_0P@BLBOHJGC@wait?5abandoned?$AA@ DB 'wait abandoned', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _async_wait
_TEXT	SEGMENT
result$ = 32
self$ = 64
o$ = 72
_async_wait PROC					; COMDAT

; 1120 : {

$LN16:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN13@async_wait:

; 1121 :     DWORD result;
; 1122 :     Px_PROTECTION_GUARD(o);

  0000e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR o$[rsp]
  00013	e8 00 00 00 00	 call	 _protected
  00018	0f be c0	 movsx	 eax, al
  0001b	85 c0		 test	 eax, eax
  0001d	75 13		 jne	 SHORT $LN10@async_wait
  0001f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ProtectionError
  00026	e8 00 00 00 00	 call	 PyErr_SetNone
  0002b	33 c0		 xor	 eax, eax
  0002d	e9 c1 00 00 00	 jmp	 $LN14@async_wait
$LN10@async_wait:
  00032	33 c0		 xor	 eax, eax
  00034	85 c0		 test	 eax, eax
  00036	75 d6		 jne	 SHORT $LN13@async_wait

; 1123 :     Py_INCREF(o);

  00038	48 8b 4c 24 48	 mov	 rcx, QWORD PTR o$[rsp]
  0003d	e8 00 00 00 00	 call	 _Py_IncRef

; 1124 :     if (!_PyEvent_TryCreate(o))

  00042	48 8b 4c 24 48	 mov	 rcx, QWORD PTR o$[rsp]
  00047	e8 00 00 00 00	 call	 _PyEvent_TryCreate
  0004c	0f be c0	 movsx	 eax, al
  0004f	85 c0		 test	 eax, eax
  00051	75 07		 jne	 SHORT $LN9@async_wait

; 1125 :         return NULL;

  00053	33 c0		 xor	 eax, eax
  00055	e9 99 00 00 00	 jmp	 $LN14@async_wait
$LN9@async_wait:

; 1126 : 
; 1127 :     result = WaitForSingleObject((HANDLE)o->event, INFINITE);

  0005a	ba ff ff ff ff	 mov	 edx, -1			; ffffffffH
  0005f	48 8b 44 24 48	 mov	 rax, QWORD PTR o$[rsp]
  00064	48 8b 48 30	 mov	 rcx, QWORD PTR [rax+48]
  00068	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WaitForSingleObject
  0006e	89 44 24 20	 mov	 DWORD PTR result$[rsp], eax

; 1128 : 
; 1129 :     if (result == WAIT_OBJECT_0)

  00072	83 7c 24 20 00	 cmp	 DWORD PTR result$[rsp], 0
  00077	75 17		 jne	 SHORT $LN8@async_wait

; 1130 :         Py_RETURN_NONE;

  00079	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00080	e8 00 00 00 00	 call	 _Py_IncRef
  00085	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0008c	eb 65		 jmp	 SHORT $LN14@async_wait
  0008e	eb 61		 jmp	 SHORT $LN7@async_wait
$LN8@async_wait:

; 1131 : 
; 1132 :     else if (result == WAIT_ABANDONED)

  00090	81 7c 24 20 80
	00 00 00	 cmp	 DWORD PTR result$[rsp], 128 ; 00000080H
  00098	75 15		 jne	 SHORT $LN6@async_wait

; 1133 :         PyErr_SetString(PyExc_SystemError, "wait abandoned");

  0009a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0P@BLBOHJGC@wait?5abandoned?$AA@
  000a1	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SystemError
  000a8	e8 00 00 00 00	 call	 PyErr_SetString
  000ad	eb 42		 jmp	 SHORT $LN5@async_wait
$LN6@async_wait:

; 1134 : 
; 1135 :     else if (result == WAIT_TIMEOUT)

  000af	81 7c 24 20 02
	01 00 00	 cmp	 DWORD PTR result$[rsp], 258 ; 00000102H
  000b7	75 15		 jne	 SHORT $LN4@async_wait

; 1136 :         PyErr_SetString(PyExc_SystemError, "infinite wait timed out?");

  000b9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@IMPAOHD@infinite?5wait?5timed?5out?$DP?$AA@
  000c0	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SystemError
  000c7	e8 00 00 00 00	 call	 PyErr_SetString
  000cc	eb 23		 jmp	 SHORT $LN3@async_wait
$LN4@async_wait:

; 1137 : 
; 1138 :     else if (result == WAIT_FAILED)

  000ce	83 7c 24 20 ff	 cmp	 DWORD PTR result$[rsp], -1 ; ffffffffH
  000d3	75 09		 jne	 SHORT $LN2@async_wait

; 1139 :         PyErr_SetFromWindowsErr(0);

  000d5	33 c9		 xor	 ecx, ecx
  000d7	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr

; 1140 : 
; 1141 :     else

  000dc	eb 13		 jmp	 SHORT $LN1@async_wait
$LN2@async_wait:

; 1142 :         PyErr_SetString(PyExc_SystemError, "unexpected result from wait");

  000de	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@JNNJNMPE@unexpected?5result?5from?5wait?$AA@
  000e5	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SystemError
  000ec	e8 00 00 00 00	 call	 PyErr_SetString
$LN1@async_wait:
$LN3@async_wait:
$LN5@async_wait:
$LN7@async_wait:

; 1143 : 
; 1144 :     return NULL;

  000f1	33 c0		 xor	 eax, eax
$LN14@async_wait:

; 1145 : }

  000f3	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000f7	c3		 ret	 0
_async_wait ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_async_prewait DD imagerel $LN8
	DD	imagerel $LN8+104
	DD	imagerel $unwind$_async_prewait
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_async_prewait DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _async_prewait
_TEXT	SEGMENT
self$ = 48
o$ = 56
_async_prewait PROC					; COMDAT

; 1149 : {

$LN8:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
$LN5@async_prew:

; 1150 :     Px_PROTECTION_GUARD(o);

  0000e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR o$[rsp]
  00013	e8 00 00 00 00	 call	 _protected
  00018	0f be c0	 movsx	 eax, al
  0001b	85 c0		 test	 eax, eax
  0001d	75 10		 jne	 SHORT $LN2@async_prew
  0001f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ProtectionError
  00026	e8 00 00 00 00	 call	 PyErr_SetNone
  0002b	33 c0		 xor	 eax, eax
  0002d	eb 34		 jmp	 SHORT $LN6@async_prew
$LN2@async_prew:
  0002f	33 c0		 xor	 eax, eax
  00031	85 c0		 test	 eax, eax
  00033	75 d9		 jne	 SHORT $LN5@async_prew

; 1151 :     Py_INCREF(o);

  00035	48 8b 4c 24 38	 mov	 rcx, QWORD PTR o$[rsp]
  0003a	e8 00 00 00 00	 call	 _Py_IncRef

; 1152 :     if (!_PyEvent_TryCreate(o))

  0003f	48 8b 4c 24 38	 mov	 rcx, QWORD PTR o$[rsp]
  00044	e8 00 00 00 00	 call	 _PyEvent_TryCreate
  00049	0f be c0	 movsx	 eax, al
  0004c	85 c0		 test	 eax, eax
  0004e	75 04		 jne	 SHORT $LN1@async_prew

; 1153 :         return NULL;

  00050	33 c0		 xor	 eax, eax
  00052	eb 0f		 jmp	 SHORT $LN6@async_prew
$LN1@async_prew:

; 1154 : 
; 1155 :     Py_INCREF(o);

  00054	48 8b 4c 24 38	 mov	 rcx, QWORD PTR o$[rsp]
  00059	e8 00 00 00 00	 call	 _Py_IncRef

; 1156 :     return o;

  0005e	48 8b 44 24 38	 mov	 rax, QWORD PTR o$[rsp]
$LN6@async_prew:

; 1157 : }

  00063	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00067	c3		 ret	 0
_async_prewait ENDP
_TEXT	ENDS
EXTRN	__imp_SetEvent:PROC
_BSS	SEGMENT
PyExc_NoWaitersError DQ 01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_async_signal DD imagerel $LN15
	DD	imagerel $LN15+201
	DD	imagerel $unwind$_async_signal
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_async_signal DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _async_signal
_TEXT	SEGMENT
result$ = 32
self$ = 64
o$ = 72
_async_signal PROC					; COMDAT

; 1161 : {

$LN15:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1162 :     PyObject *result = NULL;

  0000e	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR result$[rsp], 0
$LN12@async_sign:

; 1163 :     Px_PROTECTION_GUARD(o);

  00017	48 8b 4c 24 48	 mov	 rcx, QWORD PTR o$[rsp]
  0001c	e8 00 00 00 00	 call	 _protected
  00021	0f be c0	 movsx	 eax, al
  00024	85 c0		 test	 eax, eax
  00026	75 13		 jne	 SHORT $LN9@async_sign
  00028	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ProtectionError
  0002f	e8 00 00 00 00	 call	 PyErr_SetNone
  00034	33 c0		 xor	 eax, eax
  00036	e9 89 00 00 00	 jmp	 $LN13@async_sign
$LN9@async_sign:
  0003b	33 c0		 xor	 eax, eax
  0003d	85 c0		 test	 eax, eax
  0003f	75 d6		 jne	 SHORT $LN12@async_sign

; 1164 :     Py_INCREF(o);

  00041	48 8b 4c 24 48	 mov	 rcx, QWORD PTR o$[rsp]
  00046	e8 00 00 00 00	 call	 _Py_IncRef

; 1165 :     _write_lock(o);

  0004b	48 8b 4c 24 48	 mov	 rcx, QWORD PTR o$[rsp]
  00050	e8 00 00 00 00	 call	 _write_lock

; 1166 : 
; 1167 :     if (!Py_HAS_EVENT(o))

  00055	48 8b 44 24 48	 mov	 rax, QWORD PTR o$[rsp]
  0005a	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0005e	48 83 e0 08	 and	 rax, 8
  00062	48 85 c0	 test	 rax, rax
  00065	75 0e		 jne	 SHORT $LN8@async_sign

; 1168 :         PyErr_SetNone(PyExc_NoWaitersError);

  00067	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_NoWaitersError
  0006e	e8 00 00 00 00	 call	 PyErr_SetNone
  00073	eb 28		 jmp	 SHORT $LN7@async_sign
$LN8@async_sign:

; 1169 :     else if (!PyEvent_SIGNAL(o))

  00075	48 8b 44 24 48	 mov	 rax, QWORD PTR o$[rsp]
  0007a	48 8b 48 30	 mov	 rcx, QWORD PTR [rax+48]
  0007e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SetEvent
  00084	85 c0		 test	 eax, eax
  00086	75 09		 jne	 SHORT $LN6@async_sign

; 1170 :         PyErr_SetFromWindowsErr(0);

  00088	33 c9		 xor	 ecx, ecx
  0008a	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr

; 1171 :     else

  0008f	eb 0c		 jmp	 SHORT $LN5@async_sign
$LN6@async_sign:

; 1172 :         result = Py_None;

  00091	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00098	48 89 44 24 20	 mov	 QWORD PTR result$[rsp], rax
$LN5@async_sign:
$LN7@async_sign:

; 1173 : 
; 1174 :     _write_unlock(o);

  0009d	48 8b 4c 24 48	 mov	 rcx, QWORD PTR o$[rsp]
  000a2	e8 00 00 00 00	 call	 _write_unlock
$LN4@async_sign:

; 1175 :     Py_XINCREF(result);

  000a7	48 83 7c 24 20
	00		 cmp	 QWORD PTR result$[rsp], 0
  000ad	74 0a		 je	 SHORT $LN1@async_sign
  000af	48 8b 4c 24 20	 mov	 rcx, QWORD PTR result$[rsp]
  000b4	e8 00 00 00 00	 call	 _Py_IncRef
$LN1@async_sign:
  000b9	33 c0		 xor	 eax, eax
  000bb	85 c0		 test	 eax, eax
  000bd	75 e8		 jne	 SHORT $LN4@async_sign

; 1176 :     return result;

  000bf	48 8b 44 24 20	 mov	 rax, QWORD PTR result$[rsp]
$LN13@async_sign:

; 1177 : }

  000c4	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000c8	c3		 ret	 0
_async_signal ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CE@PKHAABHI@signal?5and?5wait?5objects?5must?5dif@ ; `string'
EXTRN	__imp_SignalObjectAndWait:PROC
EXTRN	PyArg_UnpackTuple:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_async_signal_and_wait DD imagerel $LN27
	DD	imagerel $LN27+531
	DD	imagerel $unwind$_async_signal_and_wait
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_async_signal_and_wait DD 010e01H
	DD	0a20eH
xdata	ENDS
;	COMDAT ??_C@_0CE@PKHAABHI@signal?5and?5wait?5objects?5must?5dif@
CONST	SEGMENT
??_C@_0CE@PKHAABHI@signal?5and?5wait?5objects?5must?5dif@ DB 'signal and '
	DB	'wait objects must differ', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _async_signal_and_wait
_TEXT	SEGMENT
w$ = 48
s$ = 56
wait_result$ = 64
result$ = 72
self$ = 96
args$ = 104
_async_signal_and_wait PROC				; COMDAT

; 1181 : {

$LN27:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 1182 :     PyObject *s, *w;
; 1183 :     PyObject *result = NULL;

  0000e	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR result$[rsp], 0

; 1184 :     DWORD wait_result;
; 1185 : 
; 1186 :     if (!PyArg_UnpackTuple(args, "signal_and_wait", 2, 2, &s, &w))

  00017	48 8d 44 24 30	 lea	 rax, QWORD PTR w$[rsp]
  0001c	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00021	48 8d 44 24 38	 lea	 rax, QWORD PTR s$[rsp]
  00026	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0002b	41 b9 02 00 00
	00		 mov	 r9d, 2
  00031	41 b8 02 00 00
	00		 mov	 r8d, 2
  00037	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BA@KFOAPOMJ@signal_and_wait?$AA@
  0003e	48 8b 4c 24 68	 mov	 rcx, QWORD PTR args$[rsp]
  00043	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00048	85 c0		 test	 eax, eax
  0004a	75 05		 jne	 SHORT $LN23@async_sign@2

; 1187 :         goto done;

  0004c	e9 7e 01 00 00	 jmp	 $done$126542
$LN23@async_sign@2:
$LN22@async_sign@2:

; 1188 : 
; 1189 :     Px_PROTECTION_GUARD(s);

  00051	48 8b 4c 24 38	 mov	 rcx, QWORD PTR s$[rsp]
  00056	e8 00 00 00 00	 call	 _protected
  0005b	0f be c0	 movsx	 eax, al
  0005e	85 c0		 test	 eax, eax
  00060	75 13		 jne	 SHORT $LN19@async_sign@2
  00062	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ProtectionError
  00069	e8 00 00 00 00	 call	 PyErr_SetNone
  0006e	33 c0		 xor	 eax, eax
  00070	e9 99 01 00 00	 jmp	 $LN24@async_sign@2
$LN19@async_sign@2:
  00075	33 c0		 xor	 eax, eax
  00077	85 c0		 test	 eax, eax
  00079	75 d6		 jne	 SHORT $LN22@async_sign@2
$LN18@async_sign@2:

; 1190 :     Px_PROTECTION_GUARD(w);

  0007b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR w$[rsp]
  00080	e8 00 00 00 00	 call	 _protected
  00085	0f be c0	 movsx	 eax, al
  00088	85 c0		 test	 eax, eax
  0008a	75 13		 jne	 SHORT $LN15@async_sign@2
  0008c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ProtectionError
  00093	e8 00 00 00 00	 call	 PyErr_SetNone
  00098	33 c0		 xor	 eax, eax
  0009a	e9 6f 01 00 00	 jmp	 $LN24@async_sign@2
$LN15@async_sign@2:
  0009f	33 c0		 xor	 eax, eax
  000a1	85 c0		 test	 eax, eax
  000a3	75 d6		 jne	 SHORT $LN18@async_sign@2

; 1191 : 
; 1192 :     if (s == w) {

  000a5	48 8b 44 24 30	 mov	 rax, QWORD PTR w$[rsp]
  000aa	48 39 44 24 38	 cmp	 QWORD PTR s$[rsp], rax
  000af	75 18		 jne	 SHORT $LN14@async_sign@2

; 1193 :         PyErr_SetString(PyExc_WaitError,
; 1194 :                         "signal and wait objects must differ");

  000b1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@PKHAABHI@signal?5and?5wait?5objects?5must?5dif@
  000b8	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_WaitError
  000bf	e8 00 00 00 00	 call	 PyErr_SetString

; 1195 :         goto done;

  000c4	e9 06 01 00 00	 jmp	 $done$126542
$LN14@async_sign@2:

; 1196 :     }
; 1197 : 
; 1198 :     if (!_PyEvent_TryCreate(w))

  000c9	48 8b 4c 24 30	 mov	 rcx, QWORD PTR w$[rsp]
  000ce	e8 00 00 00 00	 call	 _PyEvent_TryCreate
  000d3	0f be c0	 movsx	 eax, al
  000d6	85 c0		 test	 eax, eax
  000d8	75 05		 jne	 SHORT $LN13@async_sign@2

; 1199 :         goto done;

  000da	e9 f0 00 00 00	 jmp	 $done$126542
$LN13@async_sign@2:

; 1200 : 
; 1201 :     if (!Py_HAS_EVENT(s)) {

  000df	48 8b 44 24 38	 mov	 rax, QWORD PTR s$[rsp]
  000e4	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  000e8	48 83 e0 08	 and	 rax, 8
  000ec	48 85 c0	 test	 rax, rax
  000ef	75 11		 jne	 SHORT $LN12@async_sign@2

; 1202 :         PyErr_SetNone(PyExc_NoWaitersError);

  000f1	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_NoWaitersError
  000f8	e8 00 00 00 00	 call	 PyErr_SetNone

; 1203 :         goto done;

  000fd	e9 cd 00 00 00	 jmp	 $done$126542
$LN12@async_sign@2:

; 1204 :     }
; 1205 : 
; 1206 :     Py_INCREF(s);

  00102	48 8b 4c 24 38	 mov	 rcx, QWORD PTR s$[rsp]
  00107	e8 00 00 00 00	 call	 _Py_IncRef

; 1207 :     Py_INCREF(w);

  0010c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR w$[rsp]
  00111	e8 00 00 00 00	 call	 _Py_IncRef

; 1208 : 
; 1209 :     wait_result = SignalObjectAndWait(Py_EVENT(s), Py_EVENT(w), INFINITE, 0);

  00116	45 33 c9	 xor	 r9d, r9d
  00119	41 b8 ff ff ff
	ff		 mov	 r8d, -1			; ffffffffH
  0011f	48 8b 44 24 30	 mov	 rax, QWORD PTR w$[rsp]
  00124	48 8b 50 30	 mov	 rdx, QWORD PTR [rax+48]
  00128	48 8b 44 24 38	 mov	 rax, QWORD PTR s$[rsp]
  0012d	48 8b 48 30	 mov	 rcx, QWORD PTR [rax+48]
  00131	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SignalObjectAndWait
  00137	89 44 24 40	 mov	 DWORD PTR wait_result$[rsp], eax

; 1210 : 
; 1211 :     if (wait_result == WAIT_OBJECT_0 || wait_result == WAIT_IO_COMPLETION)

  0013b	83 7c 24 40 00	 cmp	 DWORD PTR wait_result$[rsp], 0
  00140	74 0a		 je	 SHORT $LN10@async_sign@2
  00142	81 7c 24 40 c0
	00 00 00	 cmp	 DWORD PTR wait_result$[rsp], 192 ; 000000c0H
  0014a	75 0e		 jne	 SHORT $LN11@async_sign@2
$LN10@async_sign@2:

; 1212 :         result = Py_None;

  0014c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00153	48 89 44 24 48	 mov	 QWORD PTR result$[rsp], rax
  00158	eb 61		 jmp	 SHORT $LN9@async_sign@2
$LN11@async_sign@2:

; 1213 : 
; 1214 :     else if (wait_result == WAIT_ABANDONED)

  0015a	81 7c 24 40 80
	00 00 00	 cmp	 DWORD PTR wait_result$[rsp], 128 ; 00000080H
  00162	75 15		 jne	 SHORT $LN8@async_sign@2

; 1215 :         PyErr_SetString(PyExc_SystemError, "wait abandoned");

  00164	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0P@BLBOHJGC@wait?5abandoned?$AA@
  0016b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SystemError
  00172	e8 00 00 00 00	 call	 PyErr_SetString
  00177	eb 42		 jmp	 SHORT $LN7@async_sign@2
$LN8@async_sign@2:

; 1216 : 
; 1217 :     else if (wait_result == WAIT_TIMEOUT)

  00179	81 7c 24 40 02
	01 00 00	 cmp	 DWORD PTR wait_result$[rsp], 258 ; 00000102H
  00181	75 15		 jne	 SHORT $LN6@async_sign@2

; 1218 :         PyErr_SetString(PyExc_SystemError, "infinite wait timed out?");

  00183	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@IMPAOHD@infinite?5wait?5timed?5out?$DP?$AA@
  0018a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SystemError
  00191	e8 00 00 00 00	 call	 PyErr_SetString
  00196	eb 23		 jmp	 SHORT $LN5@async_sign@2
$LN6@async_sign@2:

; 1219 : 
; 1220 :     else if (wait_result == WAIT_FAILED)

  00198	83 7c 24 40 ff	 cmp	 DWORD PTR wait_result$[rsp], -1 ; ffffffffH
  0019d	75 09		 jne	 SHORT $LN4@async_sign@2

; 1221 :         PyErr_SetFromWindowsErr(0);

  0019f	33 c9		 xor	 ecx, ecx
  001a1	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr

; 1222 : 
; 1223 :     else

  001a6	eb 13		 jmp	 SHORT $LN3@async_sign@2
$LN4@async_sign@2:

; 1224 :         PyErr_SetString(PyExc_SystemError, "unexpected result from wait");

  001a8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@JNNJNMPE@unexpected?5result?5from?5wait?$AA@
  001af	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SystemError
  001b6	e8 00 00 00 00	 call	 PyErr_SetString
$LN3@async_sign@2:
$LN5@async_sign@2:
$LN7@async_sign@2:
$LN9@async_sign@2:

; 1225 : 
; 1226 :     Py_DECREF(s);

  001bb	48 8b 4c 24 38	 mov	 rcx, QWORD PTR s$[rsp]
  001c0	e8 00 00 00 00	 call	 _Py_DecRef

; 1227 :     Py_DECREF(w);

  001c5	48 8b 4c 24 30	 mov	 rcx, QWORD PTR w$[rsp]
  001ca	e8 00 00 00 00	 call	 _Py_DecRef
$done$126542:

; 1228 : 
; 1229 : done:
; 1230 :     if (!result)

  001cf	48 83 7c 24 48
	00		 cmp	 QWORD PTR result$[rsp], 0
  001d5	75 28		 jne	 SHORT $LN2@async_sign@2

; 1231 :         assert(PyErr_Occurred());

  001d7	e8 00 00 00 00	 call	 PyErr_Occurred
  001dc	48 85 c0	 test	 rax, rax
  001df	75 1c		 jne	 SHORT $LN26@async_sign@2
  001e1	41 b8 cf 04 00
	00		 mov	 r8d, 1231		; 000004cfH
  001e7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  001ee	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CC@DNBCFJEA@?$AAP?$AAy?$AAE?$AAr?$AAr?$AA_?$AAO?$AAc?$AAc?$AAu?$AAr?$AAr?$AAe?$AAd?$AA?$CI?$AA?$CJ?$AA?$AA@
  001f5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001fb	33 c0		 xor	 eax, eax
$LN26@async_sign@2:

; 1232 :     else

  001fd	eb 0a		 jmp	 SHORT $LN1@async_sign@2
$LN2@async_sign@2:

; 1233 :         Py_INCREF(result);

  001ff	48 8b 4c 24 48	 mov	 rcx, QWORD PTR result$[rsp]
  00204	e8 00 00 00 00	 call	 _Py_IncRef
$LN1@async_sign@2:

; 1234 : 
; 1235 :     return result;

  00209	48 8b 44 24 48	 mov	 rax, QWORD PTR result$[rsp]
$LN24@async_sign@2:

; 1236 : }

  0020e	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00212	c3		 ret	 0
_async_signal_and_wait ENDP
_TEXT	ENDS
PUBLIC	_protect
EXTRN	__imp_InitializeSRWLock:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_protect DD imagerel $LN8
	DD	imagerel $LN8+278
	DD	imagerel $unwind$_protect
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_protect DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _protect
_TEXT	SEGMENT
dp$ = 32
obj$ = 64
_protect PROC						; COMDAT

; 1241 : {

$LN8:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1242 :     PyObject **dp;
; 1243 :     if (!obj)

  00009	48 83 7c 24 40
	00		 cmp	 QWORD PTR obj$[rsp], 0
  0000f	75 07		 jne	 SHORT $LN5@protect

; 1244 :         return NULL;

  00011	33 c0		 xor	 eax, eax
  00013	e9 f9 00 00 00	 jmp	 $LN6@protect
$LN5@protect:

; 1245 : 
; 1246 :     if (!_protected(obj)) {

  00018	48 8b 4c 24 40	 mov	 rcx, QWORD PTR obj$[rsp]
  0001d	e8 00 00 00 00	 call	 _protected
  00022	0f be c0	 movsx	 eax, al
  00025	85 c0		 test	 eax, eax
  00027	75 42		 jne	 SHORT $LN4@protect

; 1247 :         if (!_PyObject_PrepOrigType(obj, 0))

  00029	33 d2		 xor	 edx, edx
  0002b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR obj$[rsp]
  00030	e8 00 00 00 00	 call	 _PyObject_PrepOrigType
  00035	0f be c0	 movsx	 eax, al
  00038	85 c0		 test	 eax, eax
  0003a	75 07		 jne	 SHORT $LN3@protect

; 1248 :             return NULL;

  0003c	33 c0		 xor	 eax, eax
  0003e	e9 ce 00 00 00	 jmp	 $LN6@protect
$LN3@protect:

; 1249 :         InitializeSRWLock((PSRWLOCK)&(obj->srw_lock));

  00043	48 8b 44 24 40	 mov	 rax, QWORD PTR obj$[rsp]
  00048	48 83 c0 28	 add	 rax, 40			; 00000028H
  0004c	48 8b c8	 mov	 rcx, rax
  0004f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_InitializeSRWLock

; 1250 :         Py_PXFLAGS(obj) |= Py_PXFLAGS_RWLOCK;

  00055	48 8b 44 24 40	 mov	 rax, QWORD PTR obj$[rsp]
  0005a	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0005e	48 83 c8 04	 or	 rax, 4
  00062	48 8b 4c 24 40	 mov	 rcx, QWORD PTR obj$[rsp]
  00067	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax
$LN4@protect:

; 1251 :     }
; 1252 : 
; 1253 :     dp = _PyObject_GetDictPtr(obj);

  0006b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR obj$[rsp]
  00070	e8 00 00 00 00	 call	 _PyObject_GetDictPtr
  00075	48 89 44 24 20	 mov	 QWORD PTR dp$[rsp], rax

; 1254 :     if (dp && !_protected(*dp)) {

  0007a	48 83 7c 24 20
	00		 cmp	 QWORD PTR dp$[rsp], 0
  00080	0f 84 86 00 00
	00		 je	 $LN2@protect
  00086	48 8b 44 24 20	 mov	 rax, QWORD PTR dp$[rsp]
  0008b	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0008e	e8 00 00 00 00	 call	 _protected
  00093	0f be c0	 movsx	 eax, al
  00096	85 c0		 test	 eax, eax
  00098	75 72		 jne	 SHORT $LN2@protect

; 1255 :         if (!_PyObject_PrepOrigType(*dp, 0)) {

  0009a	33 d2		 xor	 edx, edx
  0009c	48 8b 44 24 20	 mov	 rax, QWORD PTR dp$[rsp]
  000a1	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  000a4	e8 00 00 00 00	 call	 _PyObject_PrepOrigType
  000a9	0f be c0	 movsx	 eax, al
  000ac	85 c0		 test	 eax, eax
  000ae	75 2b		 jne	 SHORT $LN1@protect

; 1256 :             /* Manually undo the protection we applied above. */
; 1257 :             Py_PXFLAGS(obj) &= ~Py_PXFLAGS_RWLOCK;

  000b0	48 8b 44 24 40	 mov	 rax, QWORD PTR obj$[rsp]
  000b5	b9 fb ff ff ff	 mov	 ecx, -5			; fffffffbH
  000ba	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  000be	48 23 c1	 and	 rax, rcx
  000c1	48 8b 4c 24 40	 mov	 rcx, QWORD PTR obj$[rsp]
  000c6	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 1258 :             obj->srw_lock = NULL;

  000ca	48 8b 44 24 40	 mov	 rax, QWORD PTR obj$[rsp]
  000cf	48 c7 40 28 00
	00 00 00	 mov	 QWORD PTR [rax+40], 0

; 1259 :             return NULL;

  000d7	33 c0		 xor	 eax, eax
  000d9	eb 36		 jmp	 SHORT $LN6@protect
$LN1@protect:

; 1260 :         }
; 1261 :         InitializeSRWLock((PSRWLOCK)&((*dp)->srw_lock));

  000db	48 8b 44 24 20	 mov	 rax, QWORD PTR dp$[rsp]
  000e0	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000e3	48 83 c0 28	 add	 rax, 40			; 00000028H
  000e7	48 8b c8	 mov	 rcx, rax
  000ea	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_InitializeSRWLock

; 1262 :         Py_PXFLAGS((*dp)) |= Py_PXFLAGS_RWLOCK;

  000f0	48 8b 44 24 20	 mov	 rax, QWORD PTR dp$[rsp]
  000f5	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000f8	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  000fc	48 83 c8 04	 or	 rax, 4
  00100	48 8b 4c 24 20	 mov	 rcx, QWORD PTR dp$[rsp]
  00105	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00108	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax
$LN2@protect:

; 1263 :     }
; 1264 :     return obj;

  0010c	48 8b 44 24 40	 mov	 rax, QWORD PTR obj$[rsp]
$LN6@protect:

; 1265 : }

  00111	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00115	c3		 ret	 0
_protect ENDP
_TEXT	ENDS
PUBLIC	??_C@_0P@OHMGPHIF@_async_protect?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$_async_protect DD imagerel $LN4
	DD	imagerel $LN4+107
	DD	imagerel $unwind$_async_protect
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_async_protect DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT ??_C@_0P@OHMGPHIF@_async_protect?$AA@
CONST	SEGMENT
??_C@_0P@OHMGPHIF@_async_protect?$AA@ DB '_async_protect', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _async_protect
_TEXT	SEGMENT
self$ = 64
obj$ = 72
_async_protect PROC					; COMDAT

; 1269 : {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1270 :     Py_INCREF(obj);

  0000e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR obj$[rsp]
  00013	e8 00 00 00 00	 call	 _Py_IncRef

; 1271 :     if (Py_ISPX(obj)) {

  00018	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00020	4c 8b 4c 24 48	 mov	 r9, QWORD PTR obj$[rsp]
  00025	41 b8 f7 04 00
	00		 mov	 r8d, 1271		; 000004f7H
  0002b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@PGHBGAOD@?4?4?2Python?2pyparallel?4c?$AA@
  00032	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@OHMGPHIF@_async_protect?$AA@
  00039	e8 00 00 00 00	 call	 _PyParallel_Guard
  0003e	85 c0		 test	 eax, eax
  00040	74 10		 je	 SHORT $LN1@async_prot@2

; 1272 :         PyErr_SetNone(PyExc_ProtectionError);

  00042	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ProtectionError
  00049	e8 00 00 00 00	 call	 PyErr_SetNone

; 1273 :         return NULL;

  0004e	33 c0		 xor	 eax, eax
  00050	eb 14		 jmp	 SHORT $LN2@async_prot@2
$LN1@async_prot@2:

; 1274 :     }
; 1275 :     Py_INCREF(obj);

  00052	48 8b 4c 24 48	 mov	 rcx, QWORD PTR obj$[rsp]
  00057	e8 00 00 00 00	 call	 _Py_IncRef

; 1276 :     return _protect(obj);

  0005c	48 8b 4c 24 48	 mov	 rcx, QWORD PTR obj$[rsp]
  00061	e8 00 00 00 00	 call	 _protect
$LN2@async_prot@2:

; 1277 : }

  00066	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0006a	c3		 ret	 0
_async_protect ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BP@NIKPECIN@invalid?5type?5for?5raw?5attribute?$AA@ ; `string'
PUBLIC	??_C@_0BG@IOLDKAG@not?5an?5io?5file?5object?$AA@ ; `string'
PUBLIC	??_C@_03DGOGAGNC@raw?$AA@			; `string'
EXTRN	PyExc_ValueError:QWORD
EXTRN	PyObject_GetAttrString:PROC
EXTRN	PyFileIO_Type:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$_async__rawfile DD imagerel $LN7
	DD	imagerel $LN7+243
	DD	imagerel $unwind$_async__rawfile
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_async__rawfile DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT ??_C@_0BP@NIKPECIN@invalid?5type?5for?5raw?5attribute?$AA@
CONST	SEGMENT
??_C@_0BP@NIKPECIN@invalid?5type?5for?5raw?5attribute?$AA@ DB 'invalid ty'
	DB	'pe for raw attribute', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@IOLDKAG@not?5an?5io?5file?5object?$AA@
CONST	SEGMENT
??_C@_0BG@IOLDKAG@not?5an?5io?5file?5object?$AA@ DB 'not an io file objec'
	DB	't', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_03DGOGAGNC@raw?$AA@
CONST	SEGMENT
??_C@_03DGOGAGNC@raw?$AA@ DB 'raw', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _async__rawfile
_TEXT	SEGMENT
raw$ = 32
f$ = 40
self$ = 64
obj$ = 72
_async__rawfile PROC					; COMDAT

; 1281 : {

$LN7:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1282 :     PyObject *raw;
; 1283 :     fileio   *f;
; 1284 : 
; 1285 :     Py_INCREF(obj);

  0000e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR obj$[rsp]
  00013	e8 00 00 00 00	 call	 _Py_IncRef

; 1286 :     if (PyFileIO_Check(obj))

  00018	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyFileIO_Type
  0001f	48 8b 4c 24 48	 mov	 rcx, QWORD PTR obj$[rsp]
  00024	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00028	74 19		 je	 SHORT $LN3@async__raw
  0002a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyFileIO_Type
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR obj$[rsp]
  00036	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  0003a	e8 00 00 00 00	 call	 PyType_IsSubtype
  0003f	85 c0		 test	 eax, eax
  00041	74 0a		 je	 SHORT $LN4@async__raw
$LN3@async__raw:

; 1287 :         return obj;

  00043	48 8b 44 24 48	 mov	 rax, QWORD PTR obj$[rsp]
  00048	e9 a1 00 00 00	 jmp	 $LN5@async__raw
$LN4@async__raw:

; 1288 : 
; 1289 :     raw = PyObject_GetAttrString(obj, "raw");

  0004d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03DGOGAGNC@raw?$AA@
  00054	48 8b 4c 24 48	 mov	 rcx, QWORD PTR obj$[rsp]
  00059	e8 00 00 00 00	 call	 PyObject_GetAttrString
  0005e	48 89 44 24 20	 mov	 QWORD PTR raw$[rsp], rax

; 1290 :     if (!raw) {

  00063	48 83 7c 24 20
	00		 cmp	 QWORD PTR raw$[rsp], 0
  00069	75 17		 jne	 SHORT $LN2@async__raw

; 1291 :         PyErr_SetString(PyExc_ValueError, "not an io file object");

  0006b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@IOLDKAG@not?5an?5io?5file?5object?$AA@
  00072	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00079	e8 00 00 00 00	 call	 PyErr_SetString

; 1292 :         return NULL;

  0007e	33 c0		 xor	 eax, eax
  00080	eb 6c		 jmp	 SHORT $LN5@async__raw
$LN2@async__raw:

; 1293 :     }
; 1294 : 
; 1295 :     if (!PyFileIO_Check(raw)) {

  00082	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyFileIO_Type
  00089	48 8b 4c 24 20	 mov	 rcx, QWORD PTR raw$[rsp]
  0008e	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00092	74 30		 je	 SHORT $LN1@async__raw
  00094	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyFileIO_Type
  0009b	48 8b 44 24 20	 mov	 rax, QWORD PTR raw$[rsp]
  000a0	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  000a4	e8 00 00 00 00	 call	 PyType_IsSubtype
  000a9	85 c0		 test	 eax, eax
  000ab	75 17		 jne	 SHORT $LN1@async__raw

; 1296 :         PyErr_SetString(PyExc_ValueError, "invalid type for raw attribute");

  000ad	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BP@NIKPECIN@invalid?5type?5for?5raw?5attribute?$AA@
  000b4	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  000bb	e8 00 00 00 00	 call	 PyErr_SetString

; 1297 :         return NULL;

  000c0	33 c0		 xor	 eax, eax
  000c2	eb 2a		 jmp	 SHORT $LN5@async__raw
$LN1@async__raw:

; 1298 :     }
; 1299 : 
; 1300 :     f = (fileio *)raw;

  000c4	48 8b 44 24 20	 mov	 rax, QWORD PTR raw$[rsp]
  000c9	48 89 44 24 28	 mov	 QWORD PTR f$[rsp], rax

; 1301 :     Py_INCREF(f);

  000ce	48 8b 4c 24 28	 mov	 rcx, QWORD PTR f$[rsp]
  000d3	e8 00 00 00 00	 call	 _Py_IncRef

; 1302 :     f->owner = obj;

  000d8	48 8b 44 24 28	 mov	 rax, QWORD PTR f$[rsp]
  000dd	48 8b 4c 24 48	 mov	 rcx, QWORD PTR obj$[rsp]
  000e2	48 89 88 b8 00
	00 00		 mov	 QWORD PTR [rax+184], rcx

; 1303 :     return (PyObject *)f;

  000e9	48 8b 44 24 28	 mov	 rax, QWORD PTR f$[rsp]
$LN5@async__raw:

; 1304 : }

  000ee	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000f2	c3		 ret	 0
_async__rawfile ENDP
_TEXT	ENDS
PUBLIC	??_C@_1DO@KBLCNCG@?$AAx?$AA?9?$AA?$DO?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA1?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAx?$AA?9?$AA?$DO?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA2?$AA?$AA@ ; `string'
PUBLIC	_PxPages_LookupHeapPage
EXTRN	__ImageBase:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PxPages_LookupHeapPage DD imagerel $LN65
	DD	imagerel $LN65+2312
	DD	imagerel $unwind$_PxPages_LookupHeapPage
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PxPages_LookupHeapPage DD 021601H
	DD	0130116H
xdata	ENDS
;	COMDAT ??_C@_1DO@KBLCNCG@?$AAx?$AA?9?$AA?$DO?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA1?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAx?$AA?9?$AA?$DO?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA2?$AA?$AA@
CONST	SEGMENT
??_C@_1DO@KBLCNCG@?$AAx?$AA?9?$AA?$DO?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA1?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAx?$AA?9?$AA?$DO?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA2?$AA?$AA@ DB 'x'
	DB	00H, '-', 00H, '>', 00H, 'c', 00H, 'o', 00H, 'u', 00H, 'n', 00H
	DB	't', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '1', 00H, ' '
	DB	00H, '&', 00H, '&', 00H, ' ', 00H, 'x', 00H, '-', 00H, '>', 00H
	DB	'c', 00H, 'o', 00H, 'u', 00H, 'n', 00H, 't', 00H, ' ', 00H, '<'
	DB	00H, '=', 00H, ' ', 00H, '2', 00H, 00H, 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PxPages_LookupHeapPage
_TEXT	SEGMENT
x$ = 32
_hf_bkt$126650 = 40
_hf_hashv$126651 = 44
_hj_k$126659 = 48
_hj_key$126660 = 56
_hj_i$126657 = 64
_hj_j$126658 = 68
_da_dst$126715 = 72
_da_dst$126733 = 80
h2$126742 = 88
h1$126741 = 96
tv184 = 104
tv323 = 112
tv332 = 120
tv331 = 124
tv343 = 128
tv342 = 132
pages$ = 160
value$ = 168
p$ = 176
_PxPages_LookupHeapPage PROC				; COMDAT

; 1308 : {

$LN65:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H
$LN49@PxPages_Lo:

; 1309 :     PxPages *x;
; 1310 :     HASH_FIND_INT(pages, value, x);

  00016	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR x$[rsp], 0
  0001f	48 83 bc 24 a0
	00 00 00 00	 cmp	 QWORD PTR pages$[rsp], 0
  00028	0f 84 31 07 00
	00		 je	 $LN46@PxPages_Lo
$LN45@PxPages_Lo:
  0002e	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR value$[rsp]
  00036	48 89 44 24 38	 mov	 QWORD PTR _hj_key$126660[rsp], rax
  0003b	c7 44 24 2c ef
	be ed fe	 mov	 DWORD PTR _hf_hashv$126651[rsp], -17973521 ; feedbeefH
  00043	c7 44 24 44 b9
	79 37 9e	 mov	 DWORD PTR _hj_j$126658[rsp], -1640531527 ; 9e3779b9H
  0004b	8b 44 24 44	 mov	 eax, DWORD PTR _hj_j$126658[rsp]
  0004f	89 44 24 40	 mov	 DWORD PTR _hj_i$126657[rsp], eax
  00053	c7 44 24 30 04
	00 00 00	 mov	 DWORD PTR _hj_k$126659[rsp], 4
$LN42@PxPages_Lo:
  0005b	83 7c 24 30 0c	 cmp	 DWORD PTR _hj_k$126659[rsp], 12
  00060	0f 82 a9 02 00
	00		 jb	 $LN41@PxPages_Lo
  00066	48 8b 44 24 38	 mov	 rax, QWORD PTR _hj_key$126660[rsp]
  0006b	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0006e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _hj_key$126660[rsp]
  00073	0f be 49 01	 movsx	 ecx, BYTE PTR [rcx+1]
  00077	c1 e1 08	 shl	 ecx, 8
  0007a	03 c1		 add	 eax, ecx
  0007c	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _hj_key$126660[rsp]
  00081	0f be 49 02	 movsx	 ecx, BYTE PTR [rcx+2]
  00085	c1 e1 10	 shl	 ecx, 16
  00088	03 c1		 add	 eax, ecx
  0008a	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _hj_key$126660[rsp]
  0008f	0f be 49 03	 movsx	 ecx, BYTE PTR [rcx+3]
  00093	c1 e1 18	 shl	 ecx, 24
  00096	03 4c 24 40	 add	 ecx, DWORD PTR _hj_i$126657[rsp]
  0009a	03 c8		 add	 ecx, eax
  0009c	8b c1		 mov	 eax, ecx
  0009e	89 44 24 40	 mov	 DWORD PTR _hj_i$126657[rsp], eax
  000a2	48 8b 44 24 38	 mov	 rax, QWORD PTR _hj_key$126660[rsp]
  000a7	0f be 40 04	 movsx	 eax, BYTE PTR [rax+4]
  000ab	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _hj_key$126660[rsp]
  000b0	0f be 49 05	 movsx	 ecx, BYTE PTR [rcx+5]
  000b4	c1 e1 08	 shl	 ecx, 8
  000b7	03 c1		 add	 eax, ecx
  000b9	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _hj_key$126660[rsp]
  000be	0f be 49 06	 movsx	 ecx, BYTE PTR [rcx+6]
  000c2	c1 e1 10	 shl	 ecx, 16
  000c5	03 c1		 add	 eax, ecx
  000c7	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _hj_key$126660[rsp]
  000cc	0f be 49 07	 movsx	 ecx, BYTE PTR [rcx+7]
  000d0	c1 e1 18	 shl	 ecx, 24
  000d3	03 4c 24 44	 add	 ecx, DWORD PTR _hj_j$126658[rsp]
  000d7	03 c8		 add	 ecx, eax
  000d9	8b c1		 mov	 eax, ecx
  000db	89 44 24 44	 mov	 DWORD PTR _hj_j$126658[rsp], eax
  000df	48 8b 44 24 38	 mov	 rax, QWORD PTR _hj_key$126660[rsp]
  000e4	0f be 40 08	 movsx	 eax, BYTE PTR [rax+8]
  000e8	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _hj_key$126660[rsp]
  000ed	0f be 49 09	 movsx	 ecx, BYTE PTR [rcx+9]
  000f1	c1 e1 08	 shl	 ecx, 8
  000f4	03 c1		 add	 eax, ecx
  000f6	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _hj_key$126660[rsp]
  000fb	0f be 49 0a	 movsx	 ecx, BYTE PTR [rcx+10]
  000ff	c1 e1 10	 shl	 ecx, 16
  00102	03 c1		 add	 eax, ecx
  00104	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _hj_key$126660[rsp]
  00109	0f be 49 0b	 movsx	 ecx, BYTE PTR [rcx+11]
  0010d	c1 e1 18	 shl	 ecx, 24
  00110	03 4c 24 2c	 add	 ecx, DWORD PTR _hf_hashv$126651[rsp]
  00114	03 c8		 add	 ecx, eax
  00116	8b c1		 mov	 eax, ecx
  00118	89 44 24 2c	 mov	 DWORD PTR _hf_hashv$126651[rsp], eax
$LN40@PxPages_Lo:
  0011c	8b 44 24 44	 mov	 eax, DWORD PTR _hj_j$126658[rsp]
  00120	8b 4c 24 40	 mov	 ecx, DWORD PTR _hj_i$126657[rsp]
  00124	2b c8		 sub	 ecx, eax
  00126	8b c1		 mov	 eax, ecx
  00128	89 44 24 40	 mov	 DWORD PTR _hj_i$126657[rsp], eax
  0012c	8b 44 24 2c	 mov	 eax, DWORD PTR _hf_hashv$126651[rsp]
  00130	8b 4c 24 40	 mov	 ecx, DWORD PTR _hj_i$126657[rsp]
  00134	2b c8		 sub	 ecx, eax
  00136	8b c1		 mov	 eax, ecx
  00138	89 44 24 40	 mov	 DWORD PTR _hj_i$126657[rsp], eax
  0013c	8b 44 24 2c	 mov	 eax, DWORD PTR _hf_hashv$126651[rsp]
  00140	c1 e8 0d	 shr	 eax, 13
  00143	8b 4c 24 40	 mov	 ecx, DWORD PTR _hj_i$126657[rsp]
  00147	33 c8		 xor	 ecx, eax
  00149	8b c1		 mov	 eax, ecx
  0014b	89 44 24 40	 mov	 DWORD PTR _hj_i$126657[rsp], eax
  0014f	8b 44 24 2c	 mov	 eax, DWORD PTR _hf_hashv$126651[rsp]
  00153	8b 4c 24 44	 mov	 ecx, DWORD PTR _hj_j$126658[rsp]
  00157	2b c8		 sub	 ecx, eax
  00159	8b c1		 mov	 eax, ecx
  0015b	89 44 24 44	 mov	 DWORD PTR _hj_j$126658[rsp], eax
  0015f	8b 44 24 40	 mov	 eax, DWORD PTR _hj_i$126657[rsp]
  00163	8b 4c 24 44	 mov	 ecx, DWORD PTR _hj_j$126658[rsp]
  00167	2b c8		 sub	 ecx, eax
  00169	8b c1		 mov	 eax, ecx
  0016b	89 44 24 44	 mov	 DWORD PTR _hj_j$126658[rsp], eax
  0016f	8b 44 24 40	 mov	 eax, DWORD PTR _hj_i$126657[rsp]
  00173	c1 e0 08	 shl	 eax, 8
  00176	8b 4c 24 44	 mov	 ecx, DWORD PTR _hj_j$126658[rsp]
  0017a	33 c8		 xor	 ecx, eax
  0017c	8b c1		 mov	 eax, ecx
  0017e	89 44 24 44	 mov	 DWORD PTR _hj_j$126658[rsp], eax
  00182	8b 44 24 40	 mov	 eax, DWORD PTR _hj_i$126657[rsp]
  00186	8b 4c 24 2c	 mov	 ecx, DWORD PTR _hf_hashv$126651[rsp]
  0018a	2b c8		 sub	 ecx, eax
  0018c	8b c1		 mov	 eax, ecx
  0018e	89 44 24 2c	 mov	 DWORD PTR _hf_hashv$126651[rsp], eax
  00192	8b 44 24 44	 mov	 eax, DWORD PTR _hj_j$126658[rsp]
  00196	8b 4c 24 2c	 mov	 ecx, DWORD PTR _hf_hashv$126651[rsp]
  0019a	2b c8		 sub	 ecx, eax
  0019c	8b c1		 mov	 eax, ecx
  0019e	89 44 24 2c	 mov	 DWORD PTR _hf_hashv$126651[rsp], eax
  001a2	8b 44 24 44	 mov	 eax, DWORD PTR _hj_j$126658[rsp]
  001a6	c1 e8 0d	 shr	 eax, 13
  001a9	8b 4c 24 2c	 mov	 ecx, DWORD PTR _hf_hashv$126651[rsp]
  001ad	33 c8		 xor	 ecx, eax
  001af	8b c1		 mov	 eax, ecx
  001b1	89 44 24 2c	 mov	 DWORD PTR _hf_hashv$126651[rsp], eax
  001b5	8b 44 24 44	 mov	 eax, DWORD PTR _hj_j$126658[rsp]
  001b9	8b 4c 24 40	 mov	 ecx, DWORD PTR _hj_i$126657[rsp]
  001bd	2b c8		 sub	 ecx, eax
  001bf	8b c1		 mov	 eax, ecx
  001c1	89 44 24 40	 mov	 DWORD PTR _hj_i$126657[rsp], eax
  001c5	8b 44 24 2c	 mov	 eax, DWORD PTR _hf_hashv$126651[rsp]
  001c9	8b 4c 24 40	 mov	 ecx, DWORD PTR _hj_i$126657[rsp]
  001cd	2b c8		 sub	 ecx, eax
  001cf	8b c1		 mov	 eax, ecx
  001d1	89 44 24 40	 mov	 DWORD PTR _hj_i$126657[rsp], eax
  001d5	8b 44 24 2c	 mov	 eax, DWORD PTR _hf_hashv$126651[rsp]
  001d9	c1 e8 0c	 shr	 eax, 12
  001dc	8b 4c 24 40	 mov	 ecx, DWORD PTR _hj_i$126657[rsp]
  001e0	33 c8		 xor	 ecx, eax
  001e2	8b c1		 mov	 eax, ecx
  001e4	89 44 24 40	 mov	 DWORD PTR _hj_i$126657[rsp], eax
  001e8	8b 44 24 2c	 mov	 eax, DWORD PTR _hf_hashv$126651[rsp]
  001ec	8b 4c 24 44	 mov	 ecx, DWORD PTR _hj_j$126658[rsp]
  001f0	2b c8		 sub	 ecx, eax
  001f2	8b c1		 mov	 eax, ecx
  001f4	89 44 24 44	 mov	 DWORD PTR _hj_j$126658[rsp], eax
  001f8	8b 44 24 40	 mov	 eax, DWORD PTR _hj_i$126657[rsp]
  001fc	8b 4c 24 44	 mov	 ecx, DWORD PTR _hj_j$126658[rsp]
  00200	2b c8		 sub	 ecx, eax
  00202	8b c1		 mov	 eax, ecx
  00204	89 44 24 44	 mov	 DWORD PTR _hj_j$126658[rsp], eax
  00208	8b 44 24 40	 mov	 eax, DWORD PTR _hj_i$126657[rsp]
  0020c	c1 e0 10	 shl	 eax, 16
  0020f	8b 4c 24 44	 mov	 ecx, DWORD PTR _hj_j$126658[rsp]
  00213	33 c8		 xor	 ecx, eax
  00215	8b c1		 mov	 eax, ecx
  00217	89 44 24 44	 mov	 DWORD PTR _hj_j$126658[rsp], eax
  0021b	8b 44 24 40	 mov	 eax, DWORD PTR _hj_i$126657[rsp]
  0021f	8b 4c 24 2c	 mov	 ecx, DWORD PTR _hf_hashv$126651[rsp]
  00223	2b c8		 sub	 ecx, eax
  00225	8b c1		 mov	 eax, ecx
  00227	89 44 24 2c	 mov	 DWORD PTR _hf_hashv$126651[rsp], eax
  0022b	8b 44 24 44	 mov	 eax, DWORD PTR _hj_j$126658[rsp]
  0022f	8b 4c 24 2c	 mov	 ecx, DWORD PTR _hf_hashv$126651[rsp]
  00233	2b c8		 sub	 ecx, eax
  00235	8b c1		 mov	 eax, ecx
  00237	89 44 24 2c	 mov	 DWORD PTR _hf_hashv$126651[rsp], eax
  0023b	8b 44 24 44	 mov	 eax, DWORD PTR _hj_j$126658[rsp]
  0023f	c1 e8 05	 shr	 eax, 5
  00242	8b 4c 24 2c	 mov	 ecx, DWORD PTR _hf_hashv$126651[rsp]
  00246	33 c8		 xor	 ecx, eax
  00248	8b c1		 mov	 eax, ecx
  0024a	89 44 24 2c	 mov	 DWORD PTR _hf_hashv$126651[rsp], eax
  0024e	8b 44 24 44	 mov	 eax, DWORD PTR _hj_j$126658[rsp]
  00252	8b 4c 24 40	 mov	 ecx, DWORD PTR _hj_i$126657[rsp]
  00256	2b c8		 sub	 ecx, eax
  00258	8b c1		 mov	 eax, ecx
  0025a	89 44 24 40	 mov	 DWORD PTR _hj_i$126657[rsp], eax
  0025e	8b 44 24 2c	 mov	 eax, DWORD PTR _hf_hashv$126651[rsp]
  00262	8b 4c 24 40	 mov	 ecx, DWORD PTR _hj_i$126657[rsp]
  00266	2b c8		 sub	 ecx, eax
  00268	8b c1		 mov	 eax, ecx
  0026a	89 44 24 40	 mov	 DWORD PTR _hj_i$126657[rsp], eax
  0026e	8b 44 24 2c	 mov	 eax, DWORD PTR _hf_hashv$126651[rsp]
  00272	c1 e8 03	 shr	 eax, 3
  00275	8b 4c 24 40	 mov	 ecx, DWORD PTR _hj_i$126657[rsp]
  00279	33 c8		 xor	 ecx, eax
  0027b	8b c1		 mov	 eax, ecx
  0027d	89 44 24 40	 mov	 DWORD PTR _hj_i$126657[rsp], eax
  00281	8b 44 24 2c	 mov	 eax, DWORD PTR _hf_hashv$126651[rsp]
  00285	8b 4c 24 44	 mov	 ecx, DWORD PTR _hj_j$126658[rsp]
  00289	2b c8		 sub	 ecx, eax
  0028b	8b c1		 mov	 eax, ecx
  0028d	89 44 24 44	 mov	 DWORD PTR _hj_j$126658[rsp], eax
  00291	8b 44 24 40	 mov	 eax, DWORD PTR _hj_i$126657[rsp]
  00295	8b 4c 24 44	 mov	 ecx, DWORD PTR _hj_j$126658[rsp]
  00299	2b c8		 sub	 ecx, eax
  0029b	8b c1		 mov	 eax, ecx
  0029d	89 44 24 44	 mov	 DWORD PTR _hj_j$126658[rsp], eax
  002a1	8b 44 24 40	 mov	 eax, DWORD PTR _hj_i$126657[rsp]
  002a5	c1 e0 0a	 shl	 eax, 10
  002a8	8b 4c 24 44	 mov	 ecx, DWORD PTR _hj_j$126658[rsp]
  002ac	33 c8		 xor	 ecx, eax
  002ae	8b c1		 mov	 eax, ecx
  002b0	89 44 24 44	 mov	 DWORD PTR _hj_j$126658[rsp], eax
  002b4	8b 44 24 40	 mov	 eax, DWORD PTR _hj_i$126657[rsp]
  002b8	8b 4c 24 2c	 mov	 ecx, DWORD PTR _hf_hashv$126651[rsp]
  002bc	2b c8		 sub	 ecx, eax
  002be	8b c1		 mov	 eax, ecx
  002c0	89 44 24 2c	 mov	 DWORD PTR _hf_hashv$126651[rsp], eax
  002c4	8b 44 24 44	 mov	 eax, DWORD PTR _hj_j$126658[rsp]
  002c8	8b 4c 24 2c	 mov	 ecx, DWORD PTR _hf_hashv$126651[rsp]
  002cc	2b c8		 sub	 ecx, eax
  002ce	8b c1		 mov	 eax, ecx
  002d0	89 44 24 2c	 mov	 DWORD PTR _hf_hashv$126651[rsp], eax
  002d4	8b 44 24 44	 mov	 eax, DWORD PTR _hj_j$126658[rsp]
  002d8	c1 e8 0f	 shr	 eax, 15
  002db	8b 4c 24 2c	 mov	 ecx, DWORD PTR _hf_hashv$126651[rsp]
  002df	33 c8		 xor	 ecx, eax
  002e1	8b c1		 mov	 eax, ecx
  002e3	89 44 24 2c	 mov	 DWORD PTR _hf_hashv$126651[rsp], eax
  002e7	33 c0		 xor	 eax, eax
  002e9	85 c0		 test	 eax, eax
  002eb	0f 85 2b fe ff
	ff		 jne	 $LN40@PxPages_Lo
  002f1	48 8b 44 24 38	 mov	 rax, QWORD PTR _hj_key$126660[rsp]
  002f6	48 83 c0 0c	 add	 rax, 12
  002fa	48 89 44 24 38	 mov	 QWORD PTR _hj_key$126660[rsp], rax
  002ff	8b 44 24 30	 mov	 eax, DWORD PTR _hj_k$126659[rsp]
  00303	83 e8 0c	 sub	 eax, 12
  00306	89 44 24 30	 mov	 DWORD PTR _hj_k$126659[rsp], eax
  0030a	e9 4c fd ff ff	 jmp	 $LN42@PxPages_Lo
$LN41@PxPages_Lo:
  0030f	8b 44 24 2c	 mov	 eax, DWORD PTR _hf_hashv$126651[rsp]
  00313	48 83 c0 04	 add	 rax, 4
  00317	89 44 24 2c	 mov	 DWORD PTR _hf_hashv$126651[rsp], eax
  0031b	8b 44 24 30	 mov	 eax, DWORD PTR _hj_k$126659[rsp]
  0031f	89 44 24 68	 mov	 DWORD PTR tv184[rsp], eax
  00323	8b 44 24 68	 mov	 eax, DWORD PTR tv184[rsp]
  00327	ff c8		 dec	 eax
  00329	89 44 24 68	 mov	 DWORD PTR tv184[rsp], eax
  0032d	83 7c 24 68 0a	 cmp	 DWORD PTR tv184[rsp], 10
  00332	0f 87 18 01 00
	00		 ja	 $LN36@PxPages_Lo
  00338	8b 44 24 68	 mov	 eax, DWORD PTR tv184[rsp]
  0033c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  00343	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN64@PxPages_Lo[rcx+rax*4]
  0034a	48 03 c1	 add	 rax, rcx
  0034d	ff e0		 jmp	 rax
$LN35@PxPages_Lo:
  0034f	48 8b 44 24 38	 mov	 rax, QWORD PTR _hj_key$126660[rsp]
  00354	0f be 40 0a	 movsx	 eax, BYTE PTR [rax+10]
  00358	c1 e0 18	 shl	 eax, 24
  0035b	8b 4c 24 2c	 mov	 ecx, DWORD PTR _hf_hashv$126651[rsp]
  0035f	03 c8		 add	 ecx, eax
  00361	8b c1		 mov	 eax, ecx
  00363	89 44 24 2c	 mov	 DWORD PTR _hf_hashv$126651[rsp], eax
$LN34@PxPages_Lo:
  00367	48 8b 44 24 38	 mov	 rax, QWORD PTR _hj_key$126660[rsp]
  0036c	0f be 40 09	 movsx	 eax, BYTE PTR [rax+9]
  00370	c1 e0 10	 shl	 eax, 16
  00373	8b 4c 24 2c	 mov	 ecx, DWORD PTR _hf_hashv$126651[rsp]
  00377	03 c8		 add	 ecx, eax
  00379	8b c1		 mov	 eax, ecx
  0037b	89 44 24 2c	 mov	 DWORD PTR _hf_hashv$126651[rsp], eax
$LN33@PxPages_Lo:
  0037f	48 8b 44 24 38	 mov	 rax, QWORD PTR _hj_key$126660[rsp]
  00384	0f be 40 08	 movsx	 eax, BYTE PTR [rax+8]
  00388	c1 e0 08	 shl	 eax, 8
  0038b	8b 4c 24 2c	 mov	 ecx, DWORD PTR _hf_hashv$126651[rsp]
  0038f	03 c8		 add	 ecx, eax
  00391	8b c1		 mov	 eax, ecx
  00393	89 44 24 2c	 mov	 DWORD PTR _hf_hashv$126651[rsp], eax
$LN32@PxPages_Lo:
  00397	48 8b 44 24 38	 mov	 rax, QWORD PTR _hj_key$126660[rsp]
  0039c	0f be 40 07	 movsx	 eax, BYTE PTR [rax+7]
  003a0	c1 e0 18	 shl	 eax, 24
  003a3	8b 4c 24 44	 mov	 ecx, DWORD PTR _hj_j$126658[rsp]
  003a7	03 c8		 add	 ecx, eax
  003a9	8b c1		 mov	 eax, ecx
  003ab	89 44 24 44	 mov	 DWORD PTR _hj_j$126658[rsp], eax
$LN31@PxPages_Lo:
  003af	48 8b 44 24 38	 mov	 rax, QWORD PTR _hj_key$126660[rsp]
  003b4	0f be 40 06	 movsx	 eax, BYTE PTR [rax+6]
  003b8	c1 e0 10	 shl	 eax, 16
  003bb	8b 4c 24 44	 mov	 ecx, DWORD PTR _hj_j$126658[rsp]
  003bf	03 c8		 add	 ecx, eax
  003c1	8b c1		 mov	 eax, ecx
  003c3	89 44 24 44	 mov	 DWORD PTR _hj_j$126658[rsp], eax
$LN30@PxPages_Lo:
  003c7	48 8b 44 24 38	 mov	 rax, QWORD PTR _hj_key$126660[rsp]
  003cc	0f be 40 05	 movsx	 eax, BYTE PTR [rax+5]
  003d0	c1 e0 08	 shl	 eax, 8
  003d3	8b 4c 24 44	 mov	 ecx, DWORD PTR _hj_j$126658[rsp]
  003d7	03 c8		 add	 ecx, eax
  003d9	8b c1		 mov	 eax, ecx
  003db	89 44 24 44	 mov	 DWORD PTR _hj_j$126658[rsp], eax
$LN29@PxPages_Lo:
  003df	48 8b 44 24 38	 mov	 rax, QWORD PTR _hj_key$126660[rsp]
  003e4	0f be 40 04	 movsx	 eax, BYTE PTR [rax+4]
  003e8	8b 4c 24 44	 mov	 ecx, DWORD PTR _hj_j$126658[rsp]
  003ec	03 c8		 add	 ecx, eax
  003ee	8b c1		 mov	 eax, ecx
  003f0	89 44 24 44	 mov	 DWORD PTR _hj_j$126658[rsp], eax
$LN28@PxPages_Lo:
  003f4	48 8b 44 24 38	 mov	 rax, QWORD PTR _hj_key$126660[rsp]
  003f9	0f be 40 03	 movsx	 eax, BYTE PTR [rax+3]
  003fd	c1 e0 18	 shl	 eax, 24
  00400	8b 4c 24 40	 mov	 ecx, DWORD PTR _hj_i$126657[rsp]
  00404	03 c8		 add	 ecx, eax
  00406	8b c1		 mov	 eax, ecx
  00408	89 44 24 40	 mov	 DWORD PTR _hj_i$126657[rsp], eax
$LN27@PxPages_Lo:
  0040c	48 8b 44 24 38	 mov	 rax, QWORD PTR _hj_key$126660[rsp]
  00411	0f be 40 02	 movsx	 eax, BYTE PTR [rax+2]
  00415	c1 e0 10	 shl	 eax, 16
  00418	8b 4c 24 40	 mov	 ecx, DWORD PTR _hj_i$126657[rsp]
  0041c	03 c8		 add	 ecx, eax
  0041e	8b c1		 mov	 eax, ecx
  00420	89 44 24 40	 mov	 DWORD PTR _hj_i$126657[rsp], eax
$LN26@PxPages_Lo:
  00424	48 8b 44 24 38	 mov	 rax, QWORD PTR _hj_key$126660[rsp]
  00429	0f be 40 01	 movsx	 eax, BYTE PTR [rax+1]
  0042d	c1 e0 08	 shl	 eax, 8
  00430	8b 4c 24 40	 mov	 ecx, DWORD PTR _hj_i$126657[rsp]
  00434	03 c8		 add	 ecx, eax
  00436	8b c1		 mov	 eax, ecx
  00438	89 44 24 40	 mov	 DWORD PTR _hj_i$126657[rsp], eax
$LN25@PxPages_Lo:
  0043c	48 8b 44 24 38	 mov	 rax, QWORD PTR _hj_key$126660[rsp]
  00441	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00444	8b 4c 24 40	 mov	 ecx, DWORD PTR _hj_i$126657[rsp]
  00448	03 c8		 add	 ecx, eax
  0044a	8b c1		 mov	 eax, ecx
  0044c	89 44 24 40	 mov	 DWORD PTR _hj_i$126657[rsp], eax
$LN36@PxPages_Lo:
$LN24@PxPages_Lo:
  00450	8b 44 24 44	 mov	 eax, DWORD PTR _hj_j$126658[rsp]
  00454	8b 4c 24 40	 mov	 ecx, DWORD PTR _hj_i$126657[rsp]
  00458	2b c8		 sub	 ecx, eax
  0045a	8b c1		 mov	 eax, ecx
  0045c	89 44 24 40	 mov	 DWORD PTR _hj_i$126657[rsp], eax
  00460	8b 44 24 2c	 mov	 eax, DWORD PTR _hf_hashv$126651[rsp]
  00464	8b 4c 24 40	 mov	 ecx, DWORD PTR _hj_i$126657[rsp]
  00468	2b c8		 sub	 ecx, eax
  0046a	8b c1		 mov	 eax, ecx
  0046c	89 44 24 40	 mov	 DWORD PTR _hj_i$126657[rsp], eax
  00470	8b 44 24 2c	 mov	 eax, DWORD PTR _hf_hashv$126651[rsp]
  00474	c1 e8 0d	 shr	 eax, 13
  00477	8b 4c 24 40	 mov	 ecx, DWORD PTR _hj_i$126657[rsp]
  0047b	33 c8		 xor	 ecx, eax
  0047d	8b c1		 mov	 eax, ecx
  0047f	89 44 24 40	 mov	 DWORD PTR _hj_i$126657[rsp], eax
  00483	8b 44 24 2c	 mov	 eax, DWORD PTR _hf_hashv$126651[rsp]
  00487	8b 4c 24 44	 mov	 ecx, DWORD PTR _hj_j$126658[rsp]
  0048b	2b c8		 sub	 ecx, eax
  0048d	8b c1		 mov	 eax, ecx
  0048f	89 44 24 44	 mov	 DWORD PTR _hj_j$126658[rsp], eax
  00493	8b 44 24 40	 mov	 eax, DWORD PTR _hj_i$126657[rsp]
  00497	8b 4c 24 44	 mov	 ecx, DWORD PTR _hj_j$126658[rsp]
  0049b	2b c8		 sub	 ecx, eax
  0049d	8b c1		 mov	 eax, ecx
  0049f	89 44 24 44	 mov	 DWORD PTR _hj_j$126658[rsp], eax
  004a3	8b 44 24 40	 mov	 eax, DWORD PTR _hj_i$126657[rsp]
  004a7	c1 e0 08	 shl	 eax, 8
  004aa	8b 4c 24 44	 mov	 ecx, DWORD PTR _hj_j$126658[rsp]
  004ae	33 c8		 xor	 ecx, eax
  004b0	8b c1		 mov	 eax, ecx
  004b2	89 44 24 44	 mov	 DWORD PTR _hj_j$126658[rsp], eax
  004b6	8b 44 24 40	 mov	 eax, DWORD PTR _hj_i$126657[rsp]
  004ba	8b 4c 24 2c	 mov	 ecx, DWORD PTR _hf_hashv$126651[rsp]
  004be	2b c8		 sub	 ecx, eax
  004c0	8b c1		 mov	 eax, ecx
  004c2	89 44 24 2c	 mov	 DWORD PTR _hf_hashv$126651[rsp], eax
  004c6	8b 44 24 44	 mov	 eax, DWORD PTR _hj_j$126658[rsp]
  004ca	8b 4c 24 2c	 mov	 ecx, DWORD PTR _hf_hashv$126651[rsp]
  004ce	2b c8		 sub	 ecx, eax
  004d0	8b c1		 mov	 eax, ecx
  004d2	89 44 24 2c	 mov	 DWORD PTR _hf_hashv$126651[rsp], eax
  004d6	8b 44 24 44	 mov	 eax, DWORD PTR _hj_j$126658[rsp]
  004da	c1 e8 0d	 shr	 eax, 13
  004dd	8b 4c 24 2c	 mov	 ecx, DWORD PTR _hf_hashv$126651[rsp]
  004e1	33 c8		 xor	 ecx, eax
  004e3	8b c1		 mov	 eax, ecx
  004e5	89 44 24 2c	 mov	 DWORD PTR _hf_hashv$126651[rsp], eax
  004e9	8b 44 24 44	 mov	 eax, DWORD PTR _hj_j$126658[rsp]
  004ed	8b 4c 24 40	 mov	 ecx, DWORD PTR _hj_i$126657[rsp]
  004f1	2b c8		 sub	 ecx, eax
  004f3	8b c1		 mov	 eax, ecx
  004f5	89 44 24 40	 mov	 DWORD PTR _hj_i$126657[rsp], eax
  004f9	8b 44 24 2c	 mov	 eax, DWORD PTR _hf_hashv$126651[rsp]
  004fd	8b 4c 24 40	 mov	 ecx, DWORD PTR _hj_i$126657[rsp]
  00501	2b c8		 sub	 ecx, eax
  00503	8b c1		 mov	 eax, ecx
  00505	89 44 24 40	 mov	 DWORD PTR _hj_i$126657[rsp], eax
  00509	8b 44 24 2c	 mov	 eax, DWORD PTR _hf_hashv$126651[rsp]
  0050d	c1 e8 0c	 shr	 eax, 12
  00510	8b 4c 24 40	 mov	 ecx, DWORD PTR _hj_i$126657[rsp]
  00514	33 c8		 xor	 ecx, eax
  00516	8b c1		 mov	 eax, ecx
  00518	89 44 24 40	 mov	 DWORD PTR _hj_i$126657[rsp], eax
  0051c	8b 44 24 2c	 mov	 eax, DWORD PTR _hf_hashv$126651[rsp]
  00520	8b 4c 24 44	 mov	 ecx, DWORD PTR _hj_j$126658[rsp]
  00524	2b c8		 sub	 ecx, eax
  00526	8b c1		 mov	 eax, ecx
  00528	89 44 24 44	 mov	 DWORD PTR _hj_j$126658[rsp], eax
  0052c	8b 44 24 40	 mov	 eax, DWORD PTR _hj_i$126657[rsp]
  00530	8b 4c 24 44	 mov	 ecx, DWORD PTR _hj_j$126658[rsp]
  00534	2b c8		 sub	 ecx, eax
  00536	8b c1		 mov	 eax, ecx
  00538	89 44 24 44	 mov	 DWORD PTR _hj_j$126658[rsp], eax
  0053c	8b 44 24 40	 mov	 eax, DWORD PTR _hj_i$126657[rsp]
  00540	c1 e0 10	 shl	 eax, 16
  00543	8b 4c 24 44	 mov	 ecx, DWORD PTR _hj_j$126658[rsp]
  00547	33 c8		 xor	 ecx, eax
  00549	8b c1		 mov	 eax, ecx
  0054b	89 44 24 44	 mov	 DWORD PTR _hj_j$126658[rsp], eax
  0054f	8b 44 24 40	 mov	 eax, DWORD PTR _hj_i$126657[rsp]
  00553	8b 4c 24 2c	 mov	 ecx, DWORD PTR _hf_hashv$126651[rsp]
  00557	2b c8		 sub	 ecx, eax
  00559	8b c1		 mov	 eax, ecx
  0055b	89 44 24 2c	 mov	 DWORD PTR _hf_hashv$126651[rsp], eax
  0055f	8b 44 24 44	 mov	 eax, DWORD PTR _hj_j$126658[rsp]
  00563	8b 4c 24 2c	 mov	 ecx, DWORD PTR _hf_hashv$126651[rsp]
  00567	2b c8		 sub	 ecx, eax
  00569	8b c1		 mov	 eax, ecx
  0056b	89 44 24 2c	 mov	 DWORD PTR _hf_hashv$126651[rsp], eax
  0056f	8b 44 24 44	 mov	 eax, DWORD PTR _hj_j$126658[rsp]
  00573	c1 e8 05	 shr	 eax, 5
  00576	8b 4c 24 2c	 mov	 ecx, DWORD PTR _hf_hashv$126651[rsp]
  0057a	33 c8		 xor	 ecx, eax
  0057c	8b c1		 mov	 eax, ecx
  0057e	89 44 24 2c	 mov	 DWORD PTR _hf_hashv$126651[rsp], eax
  00582	8b 44 24 44	 mov	 eax, DWORD PTR _hj_j$126658[rsp]
  00586	8b 4c 24 40	 mov	 ecx, DWORD PTR _hj_i$126657[rsp]
  0058a	2b c8		 sub	 ecx, eax
  0058c	8b c1		 mov	 eax, ecx
  0058e	89 44 24 40	 mov	 DWORD PTR _hj_i$126657[rsp], eax
  00592	8b 44 24 2c	 mov	 eax, DWORD PTR _hf_hashv$126651[rsp]
  00596	8b 4c 24 40	 mov	 ecx, DWORD PTR _hj_i$126657[rsp]
  0059a	2b c8		 sub	 ecx, eax
  0059c	8b c1		 mov	 eax, ecx
  0059e	89 44 24 40	 mov	 DWORD PTR _hj_i$126657[rsp], eax
  005a2	8b 44 24 2c	 mov	 eax, DWORD PTR _hf_hashv$126651[rsp]
  005a6	c1 e8 03	 shr	 eax, 3
  005a9	8b 4c 24 40	 mov	 ecx, DWORD PTR _hj_i$126657[rsp]
  005ad	33 c8		 xor	 ecx, eax
  005af	8b c1		 mov	 eax, ecx
  005b1	89 44 24 40	 mov	 DWORD PTR _hj_i$126657[rsp], eax
  005b5	8b 44 24 2c	 mov	 eax, DWORD PTR _hf_hashv$126651[rsp]
  005b9	8b 4c 24 44	 mov	 ecx, DWORD PTR _hj_j$126658[rsp]
  005bd	2b c8		 sub	 ecx, eax
  005bf	8b c1		 mov	 eax, ecx
  005c1	89 44 24 44	 mov	 DWORD PTR _hj_j$126658[rsp], eax
  005c5	8b 44 24 40	 mov	 eax, DWORD PTR _hj_i$126657[rsp]
  005c9	8b 4c 24 44	 mov	 ecx, DWORD PTR _hj_j$126658[rsp]
  005cd	2b c8		 sub	 ecx, eax
  005cf	8b c1		 mov	 eax, ecx
  005d1	89 44 24 44	 mov	 DWORD PTR _hj_j$126658[rsp], eax
  005d5	8b 44 24 40	 mov	 eax, DWORD PTR _hj_i$126657[rsp]
  005d9	c1 e0 0a	 shl	 eax, 10
  005dc	8b 4c 24 44	 mov	 ecx, DWORD PTR _hj_j$126658[rsp]
  005e0	33 c8		 xor	 ecx, eax
  005e2	8b c1		 mov	 eax, ecx
  005e4	89 44 24 44	 mov	 DWORD PTR _hj_j$126658[rsp], eax
  005e8	8b 44 24 40	 mov	 eax, DWORD PTR _hj_i$126657[rsp]
  005ec	8b 4c 24 2c	 mov	 ecx, DWORD PTR _hf_hashv$126651[rsp]
  005f0	2b c8		 sub	 ecx, eax
  005f2	8b c1		 mov	 eax, ecx
  005f4	89 44 24 2c	 mov	 DWORD PTR _hf_hashv$126651[rsp], eax
  005f8	8b 44 24 44	 mov	 eax, DWORD PTR _hj_j$126658[rsp]
  005fc	8b 4c 24 2c	 mov	 ecx, DWORD PTR _hf_hashv$126651[rsp]
  00600	2b c8		 sub	 ecx, eax
  00602	8b c1		 mov	 eax, ecx
  00604	89 44 24 2c	 mov	 DWORD PTR _hf_hashv$126651[rsp], eax
  00608	8b 44 24 44	 mov	 eax, DWORD PTR _hj_j$126658[rsp]
  0060c	c1 e8 0f	 shr	 eax, 15
  0060f	8b 4c 24 2c	 mov	 ecx, DWORD PTR _hf_hashv$126651[rsp]
  00613	33 c8		 xor	 ecx, eax
  00615	8b c1		 mov	 eax, ecx
  00617	89 44 24 2c	 mov	 DWORD PTR _hf_hashv$126651[rsp], eax
  0061b	33 c0		 xor	 eax, eax
  0061d	85 c0		 test	 eax, eax
  0061f	0f 85 2b fe ff
	ff		 jne	 $LN24@PxPages_Lo
  00625	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR pages$[rsp]
  0062d	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00631	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00634	ff c8		 dec	 eax
  00636	8b 4c 24 2c	 mov	 ecx, DWORD PTR _hf_hashv$126651[rsp]
  0063a	23 c8		 and	 ecx, eax
  0063c	8b c1		 mov	 eax, ecx
  0063e	89 44 24 28	 mov	 DWORD PTR _hf_bkt$126650[rsp], eax
  00642	33 c0		 xor	 eax, eax
  00644	85 c0		 test	 eax, eax
  00646	0f 85 e2 f9 ff
	ff		 jne	 $LN45@PxPages_Lo
  0064c	33 c0		 xor	 eax, eax
  0064e	83 f8 01	 cmp	 eax, 1
  00651	0f 84 08 01 00
	00		 je	 $LN21@PxPages_Lo
$LN20@PxPages_Lo:
  00657	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR pages$[rsp]
  0065f	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00663	8b 4c 24 28	 mov	 ecx, DWORD PTR _hf_bkt$126650[rsp]
  00667	48 6b c9 10	 imul	 rcx, 16
  0066b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0066e	48 83 3c 01 00	 cmp	 QWORD PTR [rcx+rax], 0
  00673	74 48		 je	 SHORT $LN17@PxPages_Lo
$LN16@PxPages_Lo:
  00675	48 8d 44 24 20	 lea	 rax, QWORD PTR x$[rsp]
  0067a	48 89 44 24 48	 mov	 QWORD PTR _da_dst$126715[rsp], rax
  0067f	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR pages$[rsp]
  00687	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0068b	8b 4c 24 28	 mov	 ecx, DWORD PTR _hf_bkt$126650[rsp]
  0068f	48 6b c9 10	 imul	 rcx, 16
  00693	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00696	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR pages$[rsp]
  0069e	48 8b 52 20	 mov	 rdx, QWORD PTR [rdx+32]
  006a2	48 8b 52 20	 mov	 rdx, QWORD PTR [rdx+32]
  006a6	48 8b 04 08	 mov	 rax, QWORD PTR [rax+rcx]
  006aa	48 2b c2	 sub	 rax, rdx
  006ad	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _da_dst$126715[rsp]
  006b2	48 89 01	 mov	 QWORD PTR [rcx], rax
  006b5	33 c0		 xor	 eax, eax
  006b7	85 c0		 test	 eax, eax
  006b9	75 ba		 jne	 SHORT $LN16@PxPages_Lo
  006bb	eb 09		 jmp	 SHORT $LN13@PxPages_Lo
$LN17@PxPages_Lo:
  006bd	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR x$[rsp], 0
$LN13@PxPages_Lo:
$LN12@PxPages_Lo:
  006c6	48 83 7c 24 20
	00		 cmp	 QWORD PTR x$[rsp], 0
  006cc	0f 84 83 00 00
	00		 je	 $LN11@PxPages_Lo
  006d2	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  006d7	8b 40 50	 mov	 eax, DWORD PTR [rax+80]
  006da	48 83 f8 04	 cmp	 rax, 4
  006de	75 22		 jne	 SHORT $LN10@PxPages_Lo
  006e0	41 b8 04 00 00
	00		 mov	 r8d, 4
  006e6	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR value$[rsp]
  006ee	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  006f3	48 8b 48 48	 mov	 rcx, QWORD PTR [rax+72]
  006f7	e8 00 00 00 00	 call	 memcmp
  006fc	85 c0		 test	 eax, eax
  006fe	75 02		 jne	 SHORT $LN9@PxPages_Lo
  00700	eb 53		 jmp	 SHORT $LN11@PxPages_Lo
$LN9@PxPages_Lo:
$LN10@PxPages_Lo:
  00702	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  00707	48 83 78 40 00	 cmp	 QWORD PTR [rax+64], 0
  0070c	74 39		 je	 SHORT $LN8@PxPages_Lo
$LN7@PxPages_Lo:
  0070e	48 8d 44 24 20	 lea	 rax, QWORD PTR x$[rsp]
  00713	48 89 44 24 50	 mov	 QWORD PTR _da_dst$126733[rsp], rax
  00718	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR pages$[rsp]
  00720	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00724	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  00729	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0072d	48 8b 49 40	 mov	 rcx, QWORD PTR [rcx+64]
  00731	48 2b c8	 sub	 rcx, rax
  00734	48 8b c1	 mov	 rax, rcx
  00737	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _da_dst$126733[rsp]
  0073c	48 89 01	 mov	 QWORD PTR [rcx], rax
  0073f	33 c0		 xor	 eax, eax
  00741	85 c0		 test	 eax, eax
  00743	75 c9		 jne	 SHORT $LN7@PxPages_Lo
  00745	eb 09		 jmp	 SHORT $LN4@PxPages_Lo
$LN8@PxPages_Lo:
  00747	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR x$[rsp], 0
$LN4@PxPages_Lo:
  00750	e9 71 ff ff ff	 jmp	 $LN12@PxPages_Lo
$LN11@PxPages_Lo:
  00755	33 c0		 xor	 eax, eax
  00757	85 c0		 test	 eax, eax
  00759	0f 85 f8 fe ff
	ff		 jne	 $LN20@PxPages_Lo
$LN21@PxPages_Lo:
$LN46@PxPages_Lo:
  0075f	33 c0		 xor	 eax, eax
  00761	85 c0		 test	 eax, eax
  00763	0f 85 ad f8 ff
	ff		 jne	 $LN49@PxPages_Lo

; 1311 :     if (x) {

  00769	48 83 7c 24 20
	00		 cmp	 QWORD PTR x$[rsp], 0
  0076f	0f 84 5c 01 00
	00		 je	 $LN3@PxPages_Lo

; 1312 :         Heap *h1, *h2;
; 1313 :         assert(x->count >= 1 && x->count <= 2);

  00775	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  0077a	0f bf 40 18	 movsx	 eax, WORD PTR [rax+24]
  0077e	83 f8 01	 cmp	 eax, 1
  00781	7c 0e		 jl	 SHORT $LN52@PxPages_Lo
  00783	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  00788	0f bf 40 18	 movsx	 eax, WORD PTR [rax+24]
  0078c	83 f8 02	 cmp	 eax, 2
  0078f	7e 1c		 jle	 SHORT $LN53@PxPages_Lo
$LN52@PxPages_Lo:
  00791	41 b8 21 05 00
	00		 mov	 r8d, 1313		; 00000521H
  00797	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0079e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@KBLCNCG@?$AAx?$AA?9?$AA?$DO?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA1?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAx?$AA?9?$AA?$DO?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA2?$AA?$AA@
  007a5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  007ab	33 c0		 xor	 eax, eax
$LN53@PxPages_Lo:

; 1314 :         h1 = x->heaps[0];

  007ad	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  007b2	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  007b6	48 89 44 24 60	 mov	 QWORD PTR h1$126741[rsp], rax

; 1315 :         h2 = (x->count == 2 ? x->heaps[1] : NULL);

  007bb	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  007c0	0f bf 40 18	 movsx	 eax, WORD PTR [rax+24]
  007c4	83 f8 02	 cmp	 eax, 2
  007c7	75 10		 jne	 SHORT $LN54@PxPages_Lo
  007c9	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  007ce	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  007d2	48 89 44 24 70	 mov	 QWORD PTR tv323[rsp], rax
  007d7	eb 09		 jmp	 SHORT $LN55@PxPages_Lo
$LN54@PxPages_Lo:
  007d9	48 c7 44 24 70
	00 00 00 00	 mov	 QWORD PTR tv323[rsp], 0
$LN55@PxPages_Lo:
  007e2	48 8b 44 24 70	 mov	 rax, QWORD PTR tv323[rsp]
  007e7	48 89 44 24 58	 mov	 QWORD PTR h2$126742[rsp], rax

; 1316 :         if (Px_PTR_IN_HEAP(p, h1) || (h2 && Px_PTR_IN_HEAP(p, h2)))

  007ec	48 83 7c 24 60
	00		 cmp	 QWORD PTR h1$126741[rsp], 0
  007f2	75 0a		 jne	 SHORT $LN58@PxPages_Lo
  007f4	c7 44 24 78 00
	00 00 00	 mov	 DWORD PTR tv332[rsp], 0
  007fc	eb 49		 jmp	 SHORT $LN59@PxPages_Lo
$LN58@PxPages_Lo:
  007fe	48 8b 44 24 60	 mov	 rax, QWORD PTR h1$126741[rsp]
  00803	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00807	48 39 84 24 b0
	00 00 00	 cmp	 QWORD PTR p$[rsp], rax
  0080f	72 26		 jb	 SHORT $LN56@PxPages_Lo
  00811	48 8b 44 24 60	 mov	 rax, QWORD PTR h1$126741[rsp]
  00816	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0081a	48 8b 4c 24 60	 mov	 rcx, QWORD PTR h1$126741[rsp]
  0081f	48 03 41 38	 add	 rax, QWORD PTR [rcx+56]
  00823	48 39 84 24 b0
	00 00 00	 cmp	 QWORD PTR p$[rsp], rax
  0082b	77 0a		 ja	 SHORT $LN56@PxPages_Lo
  0082d	c7 44 24 7c 01
	00 00 00	 mov	 DWORD PTR tv331[rsp], 1
  00835	eb 08		 jmp	 SHORT $LN57@PxPages_Lo
$LN56@PxPages_Lo:
  00837	c7 44 24 7c 00
	00 00 00	 mov	 DWORD PTR tv331[rsp], 0
$LN57@PxPages_Lo:
  0083f	8b 44 24 7c	 mov	 eax, DWORD PTR tv331[rsp]
  00843	89 44 24 78	 mov	 DWORD PTR tv332[rsp], eax
$LN59@PxPages_Lo:
  00847	83 7c 24 78 00	 cmp	 DWORD PTR tv332[rsp], 0
  0084c	75 7c		 jne	 SHORT $LN1@PxPages_Lo
  0084e	48 83 7c 24 58
	00		 cmp	 QWORD PTR h2$126742[rsp], 0
  00854	74 7b		 je	 SHORT $LN2@PxPages_Lo
  00856	48 83 7c 24 58
	00		 cmp	 QWORD PTR h2$126742[rsp], 0
  0085c	75 0d		 jne	 SHORT $LN62@PxPages_Lo
  0085e	c7 84 24 80 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv343[rsp], 0
  00869	eb 55		 jmp	 SHORT $LN63@PxPages_Lo
$LN62@PxPages_Lo:
  0086b	48 8b 44 24 58	 mov	 rax, QWORD PTR h2$126742[rsp]
  00870	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00874	48 39 84 24 b0
	00 00 00	 cmp	 QWORD PTR p$[rsp], rax
  0087c	72 29		 jb	 SHORT $LN60@PxPages_Lo
  0087e	48 8b 44 24 58	 mov	 rax, QWORD PTR h2$126742[rsp]
  00883	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00887	48 8b 4c 24 58	 mov	 rcx, QWORD PTR h2$126742[rsp]
  0088c	48 03 41 38	 add	 rax, QWORD PTR [rcx+56]
  00890	48 39 84 24 b0
	00 00 00	 cmp	 QWORD PTR p$[rsp], rax
  00898	77 0d		 ja	 SHORT $LN60@PxPages_Lo
  0089a	c7 84 24 84 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv342[rsp], 1
  008a5	eb 0b		 jmp	 SHORT $LN61@PxPages_Lo
$LN60@PxPages_Lo:
  008a7	c7 84 24 84 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv342[rsp], 0
$LN61@PxPages_Lo:
  008b2	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR tv342[rsp]
  008b9	89 84 24 80 00
	00 00		 mov	 DWORD PTR tv343[rsp], eax
$LN63@PxPages_Lo:
  008c0	83 bc 24 80 00
	00 00 00	 cmp	 DWORD PTR tv343[rsp], 0
  008c8	74 07		 je	 SHORT $LN2@PxPages_Lo
$LN1@PxPages_Lo:

; 1317 :             return 1;

  008ca	b8 01 00 00 00	 mov	 eax, 1
  008cf	eb 02		 jmp	 SHORT $LN50@PxPages_Lo
$LN2@PxPages_Lo:
$LN3@PxPages_Lo:

; 1318 :     }
; 1319 :     return 0;

  008d1	33 c0		 xor	 eax, eax
$LN50@PxPages_Lo:

; 1320 : }

  008d3	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  008da	c3		 ret	 0
  008db	90		 npad	 1
$LN64@PxPages_Lo:
  008dc	00 00 00 00	 DD	 $LN25@PxPages_Lo
  008e0	00 00 00 00	 DD	 $LN26@PxPages_Lo
  008e4	00 00 00 00	 DD	 $LN27@PxPages_Lo
  008e8	00 00 00 00	 DD	 $LN28@PxPages_Lo
  008ec	00 00 00 00	 DD	 $LN29@PxPages_Lo
  008f0	00 00 00 00	 DD	 $LN30@PxPages_Lo
  008f4	00 00 00 00	 DD	 $LN31@PxPages_Lo
  008f8	00 00 00 00	 DD	 $LN32@PxPages_Lo
  008fc	00 00 00 00	 DD	 $LN33@PxPages_Lo
  00900	00 00 00 00	 DD	 $LN34@PxPages_Lo
  00904	00 00 00 00	 DD	 $LN35@PxPages_Lo
_PxPages_LookupHeapPage ENDP
_TEXT	ENDS
PUBLIC	PxPages_Find
;	COMDAT pdata
pdata	SEGMENT
$pdata$PxPages_Find DD imagerel $LN4
	DD	imagerel $LN4+128
	DD	imagerel $unwind$PxPages_Find
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PxPages_Find DD 010e01H
	DD	0820eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PxPages_Find
_TEXT	SEGMENT
found$ = 32
upper$ = 40
lower$ = 48
pages$ = 80
p$ = 88
PxPages_Find PROC					; COMDAT

; 1324 : {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1325 :     int found;
; 1326 :     Px_UINTPTR lower, upper;
; 1327 : 
; 1328 :     lower = Px_PAGESIZE_ALIGN_DOWN(p, Px_LARGE_PAGE_SIZE);

  0000e	48 8b 44 24 58	 mov	 rax, QWORD PTR p$[rsp]
  00013	48 25 00 00 e0
	ff		 and	 rax, -2097152		; ffffffffffe00000H
  00019	48 89 44 24 30	 mov	 QWORD PTR lower$[rsp], rax

; 1329 :     upper = Px_PAGESIZE_ALIGN_UP(p, Px_LARGE_PAGE_SIZE);

  0001e	48 8b 44 24 58	 mov	 rax, QWORD PTR p$[rsp]
  00023	48 05 ff ff 1f
	00		 add	 rax, 2097151		; 001fffffH
  00029	48 25 00 00 e0
	ff		 and	 rax, -2097152		; ffffffffffe00000H
  0002f	48 89 44 24 28	 mov	 QWORD PTR upper$[rsp], rax

; 1330 : 
; 1331 :     found = _PxPages_LookupHeapPage(pages, &lower, p);

  00034	4c 8b 44 24 58	 mov	 r8, QWORD PTR p$[rsp]
  00039	48 8d 54 24 30	 lea	 rdx, QWORD PTR lower$[rsp]
  0003e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pages$[rsp]
  00043	e8 00 00 00 00	 call	 _PxPages_LookupHeapPage
  00048	89 44 24 20	 mov	 DWORD PTR found$[rsp], eax

; 1332 :     if (!found && lower != upper)

  0004c	83 7c 24 20 00	 cmp	 DWORD PTR found$[rsp], 0
  00051	75 24		 jne	 SHORT $LN1@PxPages_Fi
  00053	48 8b 44 24 28	 mov	 rax, QWORD PTR upper$[rsp]
  00058	48 39 44 24 30	 cmp	 QWORD PTR lower$[rsp], rax
  0005d	74 18		 je	 SHORT $LN1@PxPages_Fi

; 1333 :         found = _PxPages_LookupHeapPage(pages, &upper, p);

  0005f	4c 8b 44 24 58	 mov	 r8, QWORD PTR p$[rsp]
  00064	48 8d 54 24 28	 lea	 rdx, QWORD PTR upper$[rsp]
  00069	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pages$[rsp]
  0006e	e8 00 00 00 00	 call	 _PxPages_LookupHeapPage
  00073	89 44 24 20	 mov	 DWORD PTR found$[rsp], eax
$LN1@PxPages_Fi:

; 1334 : 
; 1335 :     return found;

  00077	8b 44 24 20	 mov	 eax, DWORD PTR found$[rsp]

; 1336 : }

  0007b	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0007f	c3		 ret	 0
PxPages_Find ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CG@KALHPGEP@invalid?5app?5item?5count?5?$CFd?0?5actua@ ; `string'
PUBLIC	??_C@_0BM@HCMMMIMF@invalid?5prev?5?$CFp?0?5actual?5?$CFp?6?$AA@ ; `string'
PUBLIC	??_C@_0CF@CNAMDMPB@invalid?5hh?5item?5count?5?$CFd?0?5actual@ ; `string'
PUBLIC	??_C@_0CE@EEFPEMAF@invalid?5bucket?5count?5?$CFd?0?5actual?5@ ; `string'
PUBLIC	??_C@_0BP@DLILMHAM@invalid?5hh_prev?5?$CFp?0?5actual?5?$CFp?6?$AA@ ; `string'
PUBLIC	_PxPages_AddHeapPage
EXTRN	__imp_fprintf:PROC
EXTRN	__imp___iob_func:PROC
EXTRN	__imp_free:PROC
EXTRN	__imp_exit:PROC
EXTRN	__imp_malloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PxPages_AddHeapPage DD imagerel $LN144
	DD	imagerel $LN144+6804
	DD	imagerel $unwind$_PxPages_AddHeapPage
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PxPages_AddHeapPage DD 021601H
	DD	0230116H
xdata	ENDS
;	COMDAT ??_C@_0CG@KALHPGEP@invalid?5app?5item?5count?5?$CFd?0?5actua@
CONST	SEGMENT
??_C@_0CG@KALHPGEP@invalid?5app?5item?5count?5?$CFd?0?5actua@ DB 'invalid'
	DB	' app item count %d, actual %d', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@HCMMMIMF@invalid?5prev?5?$CFp?0?5actual?5?$CFp?6?$AA@
CONST	SEGMENT
??_C@_0BM@HCMMMIMF@invalid?5prev?5?$CFp?0?5actual?5?$CFp?6?$AA@ DB 'inval'
	DB	'id prev %p, actual %p', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@CNAMDMPB@invalid?5hh?5item?5count?5?$CFd?0?5actual@
CONST	SEGMENT
??_C@_0CF@CNAMDMPB@invalid?5hh?5item?5count?5?$CFd?0?5actual@ DB 'invalid'
	DB	' hh item count %d, actual %d', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@EEFPEMAF@invalid?5bucket?5count?5?$CFd?0?5actual?5@
CONST	SEGMENT
??_C@_0CE@EEFPEMAF@invalid?5bucket?5count?5?$CFd?0?5actual?5@ DB 'invalid'
	DB	' bucket count %d, actual %d', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@DLILMHAM@invalid?5hh_prev?5?$CFp?0?5actual?5?$CFp?6?$AA@
CONST	SEGMENT
??_C@_0BP@DLILMHAM@invalid?5hh_prev?5?$CFp?0?5actual?5?$CFp?6?$AA@ DB 'in'
	DB	'valid hh_prev %p, actual %p', 0aH, 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PxPages_AddHeapPage
_TEXT	SEGMENT
x$ = 32
_hf_bkt$126793 = 40
_hf_hashv$126794 = 44
_hj_k$126802 = 48
_hj_key$126803 = 56
_hj_i$126800 = 64
_hj_j$126801 = 68
_da_dst$126858 = 72
_da_dst$126876 = 80
_ha_bkt$126890 = 88
_hj_k$126918 = 92
_hj_key$126919 = 96
_hj_i$126916 = 104
_hj_j$126917 = 108
_he_bkt$126975 = 112
_he_hh_nxt$126978 = 120
_he_bkt_i$126976 = 128
_he_new_buckets$126979 = 136
_he_thh$126977 = 144
_he_newbkt$126980 = 152
_thh$127005 = 160
_count$127002 = 168
_bkt_count$127003 = 172
_prev$127004 = 176
_bkt_i$127001 = 184
tv184 = 188
tv501 = 192
tv717 = 196
tv744 = 200
tv935 = 208
tv792 = 216
tv837 = 224
tv913 = 232
tv909 = 240
tv882 = 248
tv898 = 256
pages$ = 288
value$ = 296
h$ = 304
_PxPages_AddHeapPage PROC				; COMDAT

; 1340 : {

$LN144:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 81 ec 18 01
	00 00		 sub	 rsp, 280		; 00000118H
$LN133@PxPages_Ad:

; 1341 :     PxPages *x;
; 1342 :     HASH_FIND_INT(*pages, value, x);

  00016	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR x$[rsp], 0
  0001f	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR pages$[rsp]
  00027	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0002b	0f 84 4f 07 00
	00		 je	 $LN130@PxPages_Ad
$LN129@PxPages_Ad:
  00031	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR value$[rsp]
  00039	48 89 44 24 38	 mov	 QWORD PTR _hj_key$126803[rsp], rax
  0003e	c7 44 24 2c ef
	be ed fe	 mov	 DWORD PTR _hf_hashv$126794[rsp], -17973521 ; feedbeefH
  00046	c7 44 24 44 b9
	79 37 9e	 mov	 DWORD PTR _hj_j$126801[rsp], -1640531527 ; 9e3779b9H
  0004e	8b 44 24 44	 mov	 eax, DWORD PTR _hj_j$126801[rsp]
  00052	89 44 24 40	 mov	 DWORD PTR _hj_i$126800[rsp], eax
  00056	c7 44 24 30 04
	00 00 00	 mov	 DWORD PTR _hj_k$126802[rsp], 4
$LN126@PxPages_Ad:
  0005e	83 7c 24 30 0c	 cmp	 DWORD PTR _hj_k$126802[rsp], 12
  00063	0f 82 a9 02 00
	00		 jb	 $LN125@PxPages_Ad
  00069	48 8b 44 24 38	 mov	 rax, QWORD PTR _hj_key$126803[rsp]
  0006e	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00071	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _hj_key$126803[rsp]
  00076	0f be 49 01	 movsx	 ecx, BYTE PTR [rcx+1]
  0007a	c1 e1 08	 shl	 ecx, 8
  0007d	03 c1		 add	 eax, ecx
  0007f	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _hj_key$126803[rsp]
  00084	0f be 49 02	 movsx	 ecx, BYTE PTR [rcx+2]
  00088	c1 e1 10	 shl	 ecx, 16
  0008b	03 c1		 add	 eax, ecx
  0008d	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _hj_key$126803[rsp]
  00092	0f be 49 03	 movsx	 ecx, BYTE PTR [rcx+3]
  00096	c1 e1 18	 shl	 ecx, 24
  00099	03 4c 24 40	 add	 ecx, DWORD PTR _hj_i$126800[rsp]
  0009d	03 c8		 add	 ecx, eax
  0009f	8b c1		 mov	 eax, ecx
  000a1	89 44 24 40	 mov	 DWORD PTR _hj_i$126800[rsp], eax
  000a5	48 8b 44 24 38	 mov	 rax, QWORD PTR _hj_key$126803[rsp]
  000aa	0f be 40 04	 movsx	 eax, BYTE PTR [rax+4]
  000ae	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _hj_key$126803[rsp]
  000b3	0f be 49 05	 movsx	 ecx, BYTE PTR [rcx+5]
  000b7	c1 e1 08	 shl	 ecx, 8
  000ba	03 c1		 add	 eax, ecx
  000bc	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _hj_key$126803[rsp]
  000c1	0f be 49 06	 movsx	 ecx, BYTE PTR [rcx+6]
  000c5	c1 e1 10	 shl	 ecx, 16
  000c8	03 c1		 add	 eax, ecx
  000ca	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _hj_key$126803[rsp]
  000cf	0f be 49 07	 movsx	 ecx, BYTE PTR [rcx+7]
  000d3	c1 e1 18	 shl	 ecx, 24
  000d6	03 4c 24 44	 add	 ecx, DWORD PTR _hj_j$126801[rsp]
  000da	03 c8		 add	 ecx, eax
  000dc	8b c1		 mov	 eax, ecx
  000de	89 44 24 44	 mov	 DWORD PTR _hj_j$126801[rsp], eax
  000e2	48 8b 44 24 38	 mov	 rax, QWORD PTR _hj_key$126803[rsp]
  000e7	0f be 40 08	 movsx	 eax, BYTE PTR [rax+8]
  000eb	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _hj_key$126803[rsp]
  000f0	0f be 49 09	 movsx	 ecx, BYTE PTR [rcx+9]
  000f4	c1 e1 08	 shl	 ecx, 8
  000f7	03 c1		 add	 eax, ecx
  000f9	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _hj_key$126803[rsp]
  000fe	0f be 49 0a	 movsx	 ecx, BYTE PTR [rcx+10]
  00102	c1 e1 10	 shl	 ecx, 16
  00105	03 c1		 add	 eax, ecx
  00107	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _hj_key$126803[rsp]
  0010c	0f be 49 0b	 movsx	 ecx, BYTE PTR [rcx+11]
  00110	c1 e1 18	 shl	 ecx, 24
  00113	03 4c 24 2c	 add	 ecx, DWORD PTR _hf_hashv$126794[rsp]
  00117	03 c8		 add	 ecx, eax
  00119	8b c1		 mov	 eax, ecx
  0011b	89 44 24 2c	 mov	 DWORD PTR _hf_hashv$126794[rsp], eax
$LN124@PxPages_Ad:
  0011f	8b 44 24 44	 mov	 eax, DWORD PTR _hj_j$126801[rsp]
  00123	8b 4c 24 40	 mov	 ecx, DWORD PTR _hj_i$126800[rsp]
  00127	2b c8		 sub	 ecx, eax
  00129	8b c1		 mov	 eax, ecx
  0012b	89 44 24 40	 mov	 DWORD PTR _hj_i$126800[rsp], eax
  0012f	8b 44 24 2c	 mov	 eax, DWORD PTR _hf_hashv$126794[rsp]
  00133	8b 4c 24 40	 mov	 ecx, DWORD PTR _hj_i$126800[rsp]
  00137	2b c8		 sub	 ecx, eax
  00139	8b c1		 mov	 eax, ecx
  0013b	89 44 24 40	 mov	 DWORD PTR _hj_i$126800[rsp], eax
  0013f	8b 44 24 2c	 mov	 eax, DWORD PTR _hf_hashv$126794[rsp]
  00143	c1 e8 0d	 shr	 eax, 13
  00146	8b 4c 24 40	 mov	 ecx, DWORD PTR _hj_i$126800[rsp]
  0014a	33 c8		 xor	 ecx, eax
  0014c	8b c1		 mov	 eax, ecx
  0014e	89 44 24 40	 mov	 DWORD PTR _hj_i$126800[rsp], eax
  00152	8b 44 24 2c	 mov	 eax, DWORD PTR _hf_hashv$126794[rsp]
  00156	8b 4c 24 44	 mov	 ecx, DWORD PTR _hj_j$126801[rsp]
  0015a	2b c8		 sub	 ecx, eax
  0015c	8b c1		 mov	 eax, ecx
  0015e	89 44 24 44	 mov	 DWORD PTR _hj_j$126801[rsp], eax
  00162	8b 44 24 40	 mov	 eax, DWORD PTR _hj_i$126800[rsp]
  00166	8b 4c 24 44	 mov	 ecx, DWORD PTR _hj_j$126801[rsp]
  0016a	2b c8		 sub	 ecx, eax
  0016c	8b c1		 mov	 eax, ecx
  0016e	89 44 24 44	 mov	 DWORD PTR _hj_j$126801[rsp], eax
  00172	8b 44 24 40	 mov	 eax, DWORD PTR _hj_i$126800[rsp]
  00176	c1 e0 08	 shl	 eax, 8
  00179	8b 4c 24 44	 mov	 ecx, DWORD PTR _hj_j$126801[rsp]
  0017d	33 c8		 xor	 ecx, eax
  0017f	8b c1		 mov	 eax, ecx
  00181	89 44 24 44	 mov	 DWORD PTR _hj_j$126801[rsp], eax
  00185	8b 44 24 40	 mov	 eax, DWORD PTR _hj_i$126800[rsp]
  00189	8b 4c 24 2c	 mov	 ecx, DWORD PTR _hf_hashv$126794[rsp]
  0018d	2b c8		 sub	 ecx, eax
  0018f	8b c1		 mov	 eax, ecx
  00191	89 44 24 2c	 mov	 DWORD PTR _hf_hashv$126794[rsp], eax
  00195	8b 44 24 44	 mov	 eax, DWORD PTR _hj_j$126801[rsp]
  00199	8b 4c 24 2c	 mov	 ecx, DWORD PTR _hf_hashv$126794[rsp]
  0019d	2b c8		 sub	 ecx, eax
  0019f	8b c1		 mov	 eax, ecx
  001a1	89 44 24 2c	 mov	 DWORD PTR _hf_hashv$126794[rsp], eax
  001a5	8b 44 24 44	 mov	 eax, DWORD PTR _hj_j$126801[rsp]
  001a9	c1 e8 0d	 shr	 eax, 13
  001ac	8b 4c 24 2c	 mov	 ecx, DWORD PTR _hf_hashv$126794[rsp]
  001b0	33 c8		 xor	 ecx, eax
  001b2	8b c1		 mov	 eax, ecx
  001b4	89 44 24 2c	 mov	 DWORD PTR _hf_hashv$126794[rsp], eax
  001b8	8b 44 24 44	 mov	 eax, DWORD PTR _hj_j$126801[rsp]
  001bc	8b 4c 24 40	 mov	 ecx, DWORD PTR _hj_i$126800[rsp]
  001c0	2b c8		 sub	 ecx, eax
  001c2	8b c1		 mov	 eax, ecx
  001c4	89 44 24 40	 mov	 DWORD PTR _hj_i$126800[rsp], eax
  001c8	8b 44 24 2c	 mov	 eax, DWORD PTR _hf_hashv$126794[rsp]
  001cc	8b 4c 24 40	 mov	 ecx, DWORD PTR _hj_i$126800[rsp]
  001d0	2b c8		 sub	 ecx, eax
  001d2	8b c1		 mov	 eax, ecx
  001d4	89 44 24 40	 mov	 DWORD PTR _hj_i$126800[rsp], eax
  001d8	8b 44 24 2c	 mov	 eax, DWORD PTR _hf_hashv$126794[rsp]
  001dc	c1 e8 0c	 shr	 eax, 12
  001df	8b 4c 24 40	 mov	 ecx, DWORD PTR _hj_i$126800[rsp]
  001e3	33 c8		 xor	 ecx, eax
  001e5	8b c1		 mov	 eax, ecx
  001e7	89 44 24 40	 mov	 DWORD PTR _hj_i$126800[rsp], eax
  001eb	8b 44 24 2c	 mov	 eax, DWORD PTR _hf_hashv$126794[rsp]
  001ef	8b 4c 24 44	 mov	 ecx, DWORD PTR _hj_j$126801[rsp]
  001f3	2b c8		 sub	 ecx, eax
  001f5	8b c1		 mov	 eax, ecx
  001f7	89 44 24 44	 mov	 DWORD PTR _hj_j$126801[rsp], eax
  001fb	8b 44 24 40	 mov	 eax, DWORD PTR _hj_i$126800[rsp]
  001ff	8b 4c 24 44	 mov	 ecx, DWORD PTR _hj_j$126801[rsp]
  00203	2b c8		 sub	 ecx, eax
  00205	8b c1		 mov	 eax, ecx
  00207	89 44 24 44	 mov	 DWORD PTR _hj_j$126801[rsp], eax
  0020b	8b 44 24 40	 mov	 eax, DWORD PTR _hj_i$126800[rsp]
  0020f	c1 e0 10	 shl	 eax, 16
  00212	8b 4c 24 44	 mov	 ecx, DWORD PTR _hj_j$126801[rsp]
  00216	33 c8		 xor	 ecx, eax
  00218	8b c1		 mov	 eax, ecx
  0021a	89 44 24 44	 mov	 DWORD PTR _hj_j$126801[rsp], eax
  0021e	8b 44 24 40	 mov	 eax, DWORD PTR _hj_i$126800[rsp]
  00222	8b 4c 24 2c	 mov	 ecx, DWORD PTR _hf_hashv$126794[rsp]
  00226	2b c8		 sub	 ecx, eax
  00228	8b c1		 mov	 eax, ecx
  0022a	89 44 24 2c	 mov	 DWORD PTR _hf_hashv$126794[rsp], eax
  0022e	8b 44 24 44	 mov	 eax, DWORD PTR _hj_j$126801[rsp]
  00232	8b 4c 24 2c	 mov	 ecx, DWORD PTR _hf_hashv$126794[rsp]
  00236	2b c8		 sub	 ecx, eax
  00238	8b c1		 mov	 eax, ecx
  0023a	89 44 24 2c	 mov	 DWORD PTR _hf_hashv$126794[rsp], eax
  0023e	8b 44 24 44	 mov	 eax, DWORD PTR _hj_j$126801[rsp]
  00242	c1 e8 05	 shr	 eax, 5
  00245	8b 4c 24 2c	 mov	 ecx, DWORD PTR _hf_hashv$126794[rsp]
  00249	33 c8		 xor	 ecx, eax
  0024b	8b c1		 mov	 eax, ecx
  0024d	89 44 24 2c	 mov	 DWORD PTR _hf_hashv$126794[rsp], eax
  00251	8b 44 24 44	 mov	 eax, DWORD PTR _hj_j$126801[rsp]
  00255	8b 4c 24 40	 mov	 ecx, DWORD PTR _hj_i$126800[rsp]
  00259	2b c8		 sub	 ecx, eax
  0025b	8b c1		 mov	 eax, ecx
  0025d	89 44 24 40	 mov	 DWORD PTR _hj_i$126800[rsp], eax
  00261	8b 44 24 2c	 mov	 eax, DWORD PTR _hf_hashv$126794[rsp]
  00265	8b 4c 24 40	 mov	 ecx, DWORD PTR _hj_i$126800[rsp]
  00269	2b c8		 sub	 ecx, eax
  0026b	8b c1		 mov	 eax, ecx
  0026d	89 44 24 40	 mov	 DWORD PTR _hj_i$126800[rsp], eax
  00271	8b 44 24 2c	 mov	 eax, DWORD PTR _hf_hashv$126794[rsp]
  00275	c1 e8 03	 shr	 eax, 3
  00278	8b 4c 24 40	 mov	 ecx, DWORD PTR _hj_i$126800[rsp]
  0027c	33 c8		 xor	 ecx, eax
  0027e	8b c1		 mov	 eax, ecx
  00280	89 44 24 40	 mov	 DWORD PTR _hj_i$126800[rsp], eax
  00284	8b 44 24 2c	 mov	 eax, DWORD PTR _hf_hashv$126794[rsp]
  00288	8b 4c 24 44	 mov	 ecx, DWORD PTR _hj_j$126801[rsp]
  0028c	2b c8		 sub	 ecx, eax
  0028e	8b c1		 mov	 eax, ecx
  00290	89 44 24 44	 mov	 DWORD PTR _hj_j$126801[rsp], eax
  00294	8b 44 24 40	 mov	 eax, DWORD PTR _hj_i$126800[rsp]
  00298	8b 4c 24 44	 mov	 ecx, DWORD PTR _hj_j$126801[rsp]
  0029c	2b c8		 sub	 ecx, eax
  0029e	8b c1		 mov	 eax, ecx
  002a0	89 44 24 44	 mov	 DWORD PTR _hj_j$126801[rsp], eax
  002a4	8b 44 24 40	 mov	 eax, DWORD PTR _hj_i$126800[rsp]
  002a8	c1 e0 0a	 shl	 eax, 10
  002ab	8b 4c 24 44	 mov	 ecx, DWORD PTR _hj_j$126801[rsp]
  002af	33 c8		 xor	 ecx, eax
  002b1	8b c1		 mov	 eax, ecx
  002b3	89 44 24 44	 mov	 DWORD PTR _hj_j$126801[rsp], eax
  002b7	8b 44 24 40	 mov	 eax, DWORD PTR _hj_i$126800[rsp]
  002bb	8b 4c 24 2c	 mov	 ecx, DWORD PTR _hf_hashv$126794[rsp]
  002bf	2b c8		 sub	 ecx, eax
  002c1	8b c1		 mov	 eax, ecx
  002c3	89 44 24 2c	 mov	 DWORD PTR _hf_hashv$126794[rsp], eax
  002c7	8b 44 24 44	 mov	 eax, DWORD PTR _hj_j$126801[rsp]
  002cb	8b 4c 24 2c	 mov	 ecx, DWORD PTR _hf_hashv$126794[rsp]
  002cf	2b c8		 sub	 ecx, eax
  002d1	8b c1		 mov	 eax, ecx
  002d3	89 44 24 2c	 mov	 DWORD PTR _hf_hashv$126794[rsp], eax
  002d7	8b 44 24 44	 mov	 eax, DWORD PTR _hj_j$126801[rsp]
  002db	c1 e8 0f	 shr	 eax, 15
  002de	8b 4c 24 2c	 mov	 ecx, DWORD PTR _hf_hashv$126794[rsp]
  002e2	33 c8		 xor	 ecx, eax
  002e4	8b c1		 mov	 eax, ecx
  002e6	89 44 24 2c	 mov	 DWORD PTR _hf_hashv$126794[rsp], eax
  002ea	33 c0		 xor	 eax, eax
  002ec	85 c0		 test	 eax, eax
  002ee	0f 85 2b fe ff
	ff		 jne	 $LN124@PxPages_Ad
  002f4	48 8b 44 24 38	 mov	 rax, QWORD PTR _hj_key$126803[rsp]
  002f9	48 83 c0 0c	 add	 rax, 12
  002fd	48 89 44 24 38	 mov	 QWORD PTR _hj_key$126803[rsp], rax
  00302	8b 44 24 30	 mov	 eax, DWORD PTR _hj_k$126802[rsp]
  00306	83 e8 0c	 sub	 eax, 12
  00309	89 44 24 30	 mov	 DWORD PTR _hj_k$126802[rsp], eax
  0030d	e9 4c fd ff ff	 jmp	 $LN126@PxPages_Ad
$LN125@PxPages_Ad:
  00312	8b 44 24 2c	 mov	 eax, DWORD PTR _hf_hashv$126794[rsp]
  00316	48 83 c0 04	 add	 rax, 4
  0031a	89 44 24 2c	 mov	 DWORD PTR _hf_hashv$126794[rsp], eax
  0031e	8b 44 24 30	 mov	 eax, DWORD PTR _hj_k$126802[rsp]
  00322	89 84 24 bc 00
	00 00		 mov	 DWORD PTR tv184[rsp], eax
  00329	8b 84 24 bc 00
	00 00		 mov	 eax, DWORD PTR tv184[rsp]
  00330	ff c8		 dec	 eax
  00332	89 84 24 bc 00
	00 00		 mov	 DWORD PTR tv184[rsp], eax
  00339	83 bc 24 bc 00
	00 00 0a	 cmp	 DWORD PTR tv184[rsp], 10
  00341	0f 87 1b 01 00
	00		 ja	 $LN120@PxPages_Ad
  00347	8b 84 24 bc 00
	00 00		 mov	 eax, DWORD PTR tv184[rsp]
  0034e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  00355	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN143@PxPages_Ad[rcx+rax*4]
  0035c	48 03 c1	 add	 rax, rcx
  0035f	ff e0		 jmp	 rax
$LN119@PxPages_Ad:
  00361	48 8b 44 24 38	 mov	 rax, QWORD PTR _hj_key$126803[rsp]
  00366	0f be 40 0a	 movsx	 eax, BYTE PTR [rax+10]
  0036a	c1 e0 18	 shl	 eax, 24
  0036d	8b 4c 24 2c	 mov	 ecx, DWORD PTR _hf_hashv$126794[rsp]
  00371	03 c8		 add	 ecx, eax
  00373	8b c1		 mov	 eax, ecx
  00375	89 44 24 2c	 mov	 DWORD PTR _hf_hashv$126794[rsp], eax
$LN118@PxPages_Ad:
  00379	48 8b 44 24 38	 mov	 rax, QWORD PTR _hj_key$126803[rsp]
  0037e	0f be 40 09	 movsx	 eax, BYTE PTR [rax+9]
  00382	c1 e0 10	 shl	 eax, 16
  00385	8b 4c 24 2c	 mov	 ecx, DWORD PTR _hf_hashv$126794[rsp]
  00389	03 c8		 add	 ecx, eax
  0038b	8b c1		 mov	 eax, ecx
  0038d	89 44 24 2c	 mov	 DWORD PTR _hf_hashv$126794[rsp], eax
$LN117@PxPages_Ad:
  00391	48 8b 44 24 38	 mov	 rax, QWORD PTR _hj_key$126803[rsp]
  00396	0f be 40 08	 movsx	 eax, BYTE PTR [rax+8]
  0039a	c1 e0 08	 shl	 eax, 8
  0039d	8b 4c 24 2c	 mov	 ecx, DWORD PTR _hf_hashv$126794[rsp]
  003a1	03 c8		 add	 ecx, eax
  003a3	8b c1		 mov	 eax, ecx
  003a5	89 44 24 2c	 mov	 DWORD PTR _hf_hashv$126794[rsp], eax
$LN116@PxPages_Ad:
  003a9	48 8b 44 24 38	 mov	 rax, QWORD PTR _hj_key$126803[rsp]
  003ae	0f be 40 07	 movsx	 eax, BYTE PTR [rax+7]
  003b2	c1 e0 18	 shl	 eax, 24
  003b5	8b 4c 24 44	 mov	 ecx, DWORD PTR _hj_j$126801[rsp]
  003b9	03 c8		 add	 ecx, eax
  003bb	8b c1		 mov	 eax, ecx
  003bd	89 44 24 44	 mov	 DWORD PTR _hj_j$126801[rsp], eax
$LN115@PxPages_Ad:
  003c1	48 8b 44 24 38	 mov	 rax, QWORD PTR _hj_key$126803[rsp]
  003c6	0f be 40 06	 movsx	 eax, BYTE PTR [rax+6]
  003ca	c1 e0 10	 shl	 eax, 16
  003cd	8b 4c 24 44	 mov	 ecx, DWORD PTR _hj_j$126801[rsp]
  003d1	03 c8		 add	 ecx, eax
  003d3	8b c1		 mov	 eax, ecx
  003d5	89 44 24 44	 mov	 DWORD PTR _hj_j$126801[rsp], eax
$LN114@PxPages_Ad:
  003d9	48 8b 44 24 38	 mov	 rax, QWORD PTR _hj_key$126803[rsp]
  003de	0f be 40 05	 movsx	 eax, BYTE PTR [rax+5]
  003e2	c1 e0 08	 shl	 eax, 8
  003e5	8b 4c 24 44	 mov	 ecx, DWORD PTR _hj_j$126801[rsp]
  003e9	03 c8		 add	 ecx, eax
  003eb	8b c1		 mov	 eax, ecx
  003ed	89 44 24 44	 mov	 DWORD PTR _hj_j$126801[rsp], eax
$LN113@PxPages_Ad:
  003f1	48 8b 44 24 38	 mov	 rax, QWORD PTR _hj_key$126803[rsp]
  003f6	0f be 40 04	 movsx	 eax, BYTE PTR [rax+4]
  003fa	8b 4c 24 44	 mov	 ecx, DWORD PTR _hj_j$126801[rsp]
  003fe	03 c8		 add	 ecx, eax
  00400	8b c1		 mov	 eax, ecx
  00402	89 44 24 44	 mov	 DWORD PTR _hj_j$126801[rsp], eax
$LN112@PxPages_Ad:
  00406	48 8b 44 24 38	 mov	 rax, QWORD PTR _hj_key$126803[rsp]
  0040b	0f be 40 03	 movsx	 eax, BYTE PTR [rax+3]
  0040f	c1 e0 18	 shl	 eax, 24
  00412	8b 4c 24 40	 mov	 ecx, DWORD PTR _hj_i$126800[rsp]
  00416	03 c8		 add	 ecx, eax
  00418	8b c1		 mov	 eax, ecx
  0041a	89 44 24 40	 mov	 DWORD PTR _hj_i$126800[rsp], eax
$LN111@PxPages_Ad:
  0041e	48 8b 44 24 38	 mov	 rax, QWORD PTR _hj_key$126803[rsp]
  00423	0f be 40 02	 movsx	 eax, BYTE PTR [rax+2]
  00427	c1 e0 10	 shl	 eax, 16
  0042a	8b 4c 24 40	 mov	 ecx, DWORD PTR _hj_i$126800[rsp]
  0042e	03 c8		 add	 ecx, eax
  00430	8b c1		 mov	 eax, ecx
  00432	89 44 24 40	 mov	 DWORD PTR _hj_i$126800[rsp], eax
$LN110@PxPages_Ad:
  00436	48 8b 44 24 38	 mov	 rax, QWORD PTR _hj_key$126803[rsp]
  0043b	0f be 40 01	 movsx	 eax, BYTE PTR [rax+1]
  0043f	c1 e0 08	 shl	 eax, 8
  00442	8b 4c 24 40	 mov	 ecx, DWORD PTR _hj_i$126800[rsp]
  00446	03 c8		 add	 ecx, eax
  00448	8b c1		 mov	 eax, ecx
  0044a	89 44 24 40	 mov	 DWORD PTR _hj_i$126800[rsp], eax
$LN109@PxPages_Ad:
  0044e	48 8b 44 24 38	 mov	 rax, QWORD PTR _hj_key$126803[rsp]
  00453	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00456	8b 4c 24 40	 mov	 ecx, DWORD PTR _hj_i$126800[rsp]
  0045a	03 c8		 add	 ecx, eax
  0045c	8b c1		 mov	 eax, ecx
  0045e	89 44 24 40	 mov	 DWORD PTR _hj_i$126800[rsp], eax
$LN120@PxPages_Ad:
$LN108@PxPages_Ad:
  00462	8b 44 24 44	 mov	 eax, DWORD PTR _hj_j$126801[rsp]
  00466	8b 4c 24 40	 mov	 ecx, DWORD PTR _hj_i$126800[rsp]
  0046a	2b c8		 sub	 ecx, eax
  0046c	8b c1		 mov	 eax, ecx
  0046e	89 44 24 40	 mov	 DWORD PTR _hj_i$126800[rsp], eax
  00472	8b 44 24 2c	 mov	 eax, DWORD PTR _hf_hashv$126794[rsp]
  00476	8b 4c 24 40	 mov	 ecx, DWORD PTR _hj_i$126800[rsp]
  0047a	2b c8		 sub	 ecx, eax
  0047c	8b c1		 mov	 eax, ecx
  0047e	89 44 24 40	 mov	 DWORD PTR _hj_i$126800[rsp], eax
  00482	8b 44 24 2c	 mov	 eax, DWORD PTR _hf_hashv$126794[rsp]
  00486	c1 e8 0d	 shr	 eax, 13
  00489	8b 4c 24 40	 mov	 ecx, DWORD PTR _hj_i$126800[rsp]
  0048d	33 c8		 xor	 ecx, eax
  0048f	8b c1		 mov	 eax, ecx
  00491	89 44 24 40	 mov	 DWORD PTR _hj_i$126800[rsp], eax
  00495	8b 44 24 2c	 mov	 eax, DWORD PTR _hf_hashv$126794[rsp]
  00499	8b 4c 24 44	 mov	 ecx, DWORD PTR _hj_j$126801[rsp]
  0049d	2b c8		 sub	 ecx, eax
  0049f	8b c1		 mov	 eax, ecx
  004a1	89 44 24 44	 mov	 DWORD PTR _hj_j$126801[rsp], eax
  004a5	8b 44 24 40	 mov	 eax, DWORD PTR _hj_i$126800[rsp]
  004a9	8b 4c 24 44	 mov	 ecx, DWORD PTR _hj_j$126801[rsp]
  004ad	2b c8		 sub	 ecx, eax
  004af	8b c1		 mov	 eax, ecx
  004b1	89 44 24 44	 mov	 DWORD PTR _hj_j$126801[rsp], eax
  004b5	8b 44 24 40	 mov	 eax, DWORD PTR _hj_i$126800[rsp]
  004b9	c1 e0 08	 shl	 eax, 8
  004bc	8b 4c 24 44	 mov	 ecx, DWORD PTR _hj_j$126801[rsp]
  004c0	33 c8		 xor	 ecx, eax
  004c2	8b c1		 mov	 eax, ecx
  004c4	89 44 24 44	 mov	 DWORD PTR _hj_j$126801[rsp], eax
  004c8	8b 44 24 40	 mov	 eax, DWORD PTR _hj_i$126800[rsp]
  004cc	8b 4c 24 2c	 mov	 ecx, DWORD PTR _hf_hashv$126794[rsp]
  004d0	2b c8		 sub	 ecx, eax
  004d2	8b c1		 mov	 eax, ecx
  004d4	89 44 24 2c	 mov	 DWORD PTR _hf_hashv$126794[rsp], eax
  004d8	8b 44 24 44	 mov	 eax, DWORD PTR _hj_j$126801[rsp]
  004dc	8b 4c 24 2c	 mov	 ecx, DWORD PTR _hf_hashv$126794[rsp]
  004e0	2b c8		 sub	 ecx, eax
  004e2	8b c1		 mov	 eax, ecx
  004e4	89 44 24 2c	 mov	 DWORD PTR _hf_hashv$126794[rsp], eax
  004e8	8b 44 24 44	 mov	 eax, DWORD PTR _hj_j$126801[rsp]
  004ec	c1 e8 0d	 shr	 eax, 13
  004ef	8b 4c 24 2c	 mov	 ecx, DWORD PTR _hf_hashv$126794[rsp]
  004f3	33 c8		 xor	 ecx, eax
  004f5	8b c1		 mov	 eax, ecx
  004f7	89 44 24 2c	 mov	 DWORD PTR _hf_hashv$126794[rsp], eax
  004fb	8b 44 24 44	 mov	 eax, DWORD PTR _hj_j$126801[rsp]
  004ff	8b 4c 24 40	 mov	 ecx, DWORD PTR _hj_i$126800[rsp]
  00503	2b c8		 sub	 ecx, eax
  00505	8b c1		 mov	 eax, ecx
  00507	89 44 24 40	 mov	 DWORD PTR _hj_i$126800[rsp], eax
  0050b	8b 44 24 2c	 mov	 eax, DWORD PTR _hf_hashv$126794[rsp]
  0050f	8b 4c 24 40	 mov	 ecx, DWORD PTR _hj_i$126800[rsp]
  00513	2b c8		 sub	 ecx, eax
  00515	8b c1		 mov	 eax, ecx
  00517	89 44 24 40	 mov	 DWORD PTR _hj_i$126800[rsp], eax
  0051b	8b 44 24 2c	 mov	 eax, DWORD PTR _hf_hashv$126794[rsp]
  0051f	c1 e8 0c	 shr	 eax, 12
  00522	8b 4c 24 40	 mov	 ecx, DWORD PTR _hj_i$126800[rsp]
  00526	33 c8		 xor	 ecx, eax
  00528	8b c1		 mov	 eax, ecx
  0052a	89 44 24 40	 mov	 DWORD PTR _hj_i$126800[rsp], eax
  0052e	8b 44 24 2c	 mov	 eax, DWORD PTR _hf_hashv$126794[rsp]
  00532	8b 4c 24 44	 mov	 ecx, DWORD PTR _hj_j$126801[rsp]
  00536	2b c8		 sub	 ecx, eax
  00538	8b c1		 mov	 eax, ecx
  0053a	89 44 24 44	 mov	 DWORD PTR _hj_j$126801[rsp], eax
  0053e	8b 44 24 40	 mov	 eax, DWORD PTR _hj_i$126800[rsp]
  00542	8b 4c 24 44	 mov	 ecx, DWORD PTR _hj_j$126801[rsp]
  00546	2b c8		 sub	 ecx, eax
  00548	8b c1		 mov	 eax, ecx
  0054a	89 44 24 44	 mov	 DWORD PTR _hj_j$126801[rsp], eax
  0054e	8b 44 24 40	 mov	 eax, DWORD PTR _hj_i$126800[rsp]
  00552	c1 e0 10	 shl	 eax, 16
  00555	8b 4c 24 44	 mov	 ecx, DWORD PTR _hj_j$126801[rsp]
  00559	33 c8		 xor	 ecx, eax
  0055b	8b c1		 mov	 eax, ecx
  0055d	89 44 24 44	 mov	 DWORD PTR _hj_j$126801[rsp], eax
  00561	8b 44 24 40	 mov	 eax, DWORD PTR _hj_i$126800[rsp]
  00565	8b 4c 24 2c	 mov	 ecx, DWORD PTR _hf_hashv$126794[rsp]
  00569	2b c8		 sub	 ecx, eax
  0056b	8b c1		 mov	 eax, ecx
  0056d	89 44 24 2c	 mov	 DWORD PTR _hf_hashv$126794[rsp], eax
  00571	8b 44 24 44	 mov	 eax, DWORD PTR _hj_j$126801[rsp]
  00575	8b 4c 24 2c	 mov	 ecx, DWORD PTR _hf_hashv$126794[rsp]
  00579	2b c8		 sub	 ecx, eax
  0057b	8b c1		 mov	 eax, ecx
  0057d	89 44 24 2c	 mov	 DWORD PTR _hf_hashv$126794[rsp], eax
  00581	8b 44 24 44	 mov	 eax, DWORD PTR _hj_j$126801[rsp]
  00585	c1 e8 05	 shr	 eax, 5
  00588	8b 4c 24 2c	 mov	 ecx, DWORD PTR _hf_hashv$126794[rsp]
  0058c	33 c8		 xor	 ecx, eax
  0058e	8b c1		 mov	 eax, ecx
  00590	89 44 24 2c	 mov	 DWORD PTR _hf_hashv$126794[rsp], eax
  00594	8b 44 24 44	 mov	 eax, DWORD PTR _hj_j$126801[rsp]
  00598	8b 4c 24 40	 mov	 ecx, DWORD PTR _hj_i$126800[rsp]
  0059c	2b c8		 sub	 ecx, eax
  0059e	8b c1		 mov	 eax, ecx
  005a0	89 44 24 40	 mov	 DWORD PTR _hj_i$126800[rsp], eax
  005a4	8b 44 24 2c	 mov	 eax, DWORD PTR _hf_hashv$126794[rsp]
  005a8	8b 4c 24 40	 mov	 ecx, DWORD PTR _hj_i$126800[rsp]
  005ac	2b c8		 sub	 ecx, eax
  005ae	8b c1		 mov	 eax, ecx
  005b0	89 44 24 40	 mov	 DWORD PTR _hj_i$126800[rsp], eax
  005b4	8b 44 24 2c	 mov	 eax, DWORD PTR _hf_hashv$126794[rsp]
  005b8	c1 e8 03	 shr	 eax, 3
  005bb	8b 4c 24 40	 mov	 ecx, DWORD PTR _hj_i$126800[rsp]
  005bf	33 c8		 xor	 ecx, eax
  005c1	8b c1		 mov	 eax, ecx
  005c3	89 44 24 40	 mov	 DWORD PTR _hj_i$126800[rsp], eax
  005c7	8b 44 24 2c	 mov	 eax, DWORD PTR _hf_hashv$126794[rsp]
  005cb	8b 4c 24 44	 mov	 ecx, DWORD PTR _hj_j$126801[rsp]
  005cf	2b c8		 sub	 ecx, eax
  005d1	8b c1		 mov	 eax, ecx
  005d3	89 44 24 44	 mov	 DWORD PTR _hj_j$126801[rsp], eax
  005d7	8b 44 24 40	 mov	 eax, DWORD PTR _hj_i$126800[rsp]
  005db	8b 4c 24 44	 mov	 ecx, DWORD PTR _hj_j$126801[rsp]
  005df	2b c8		 sub	 ecx, eax
  005e1	8b c1		 mov	 eax, ecx
  005e3	89 44 24 44	 mov	 DWORD PTR _hj_j$126801[rsp], eax
  005e7	8b 44 24 40	 mov	 eax, DWORD PTR _hj_i$126800[rsp]
  005eb	c1 e0 0a	 shl	 eax, 10
  005ee	8b 4c 24 44	 mov	 ecx, DWORD PTR _hj_j$126801[rsp]
  005f2	33 c8		 xor	 ecx, eax
  005f4	8b c1		 mov	 eax, ecx
  005f6	89 44 24 44	 mov	 DWORD PTR _hj_j$126801[rsp], eax
  005fa	8b 44 24 40	 mov	 eax, DWORD PTR _hj_i$126800[rsp]
  005fe	8b 4c 24 2c	 mov	 ecx, DWORD PTR _hf_hashv$126794[rsp]
  00602	2b c8		 sub	 ecx, eax
  00604	8b c1		 mov	 eax, ecx
  00606	89 44 24 2c	 mov	 DWORD PTR _hf_hashv$126794[rsp], eax
  0060a	8b 44 24 44	 mov	 eax, DWORD PTR _hj_j$126801[rsp]
  0060e	8b 4c 24 2c	 mov	 ecx, DWORD PTR _hf_hashv$126794[rsp]
  00612	2b c8		 sub	 ecx, eax
  00614	8b c1		 mov	 eax, ecx
  00616	89 44 24 2c	 mov	 DWORD PTR _hf_hashv$126794[rsp], eax
  0061a	8b 44 24 44	 mov	 eax, DWORD PTR _hj_j$126801[rsp]
  0061e	c1 e8 0f	 shr	 eax, 15
  00621	8b 4c 24 2c	 mov	 ecx, DWORD PTR _hf_hashv$126794[rsp]
  00625	33 c8		 xor	 ecx, eax
  00627	8b c1		 mov	 eax, ecx
  00629	89 44 24 2c	 mov	 DWORD PTR _hf_hashv$126794[rsp], eax
  0062d	33 c0		 xor	 eax, eax
  0062f	85 c0		 test	 eax, eax
  00631	0f 85 2b fe ff
	ff		 jne	 $LN108@PxPages_Ad
  00637	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR pages$[rsp]
  0063f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00642	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00646	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00649	ff c8		 dec	 eax
  0064b	8b 4c 24 2c	 mov	 ecx, DWORD PTR _hf_hashv$126794[rsp]
  0064f	23 c8		 and	 ecx, eax
  00651	8b c1		 mov	 eax, ecx
  00653	89 44 24 28	 mov	 DWORD PTR _hf_bkt$126793[rsp], eax
  00657	33 c0		 xor	 eax, eax
  00659	85 c0		 test	 eax, eax
  0065b	0f 85 d0 f9 ff
	ff		 jne	 $LN129@PxPages_Ad
  00661	33 c0		 xor	 eax, eax
  00663	83 f8 01	 cmp	 eax, 1
  00666	0f 84 14 01 00
	00		 je	 $LN105@PxPages_Ad
$LN104@PxPages_Ad:
  0066c	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR pages$[rsp]
  00674	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00677	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0067b	8b 4c 24 28	 mov	 ecx, DWORD PTR _hf_bkt$126793[rsp]
  0067f	48 6b c9 10	 imul	 rcx, 16
  00683	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00686	48 83 3c 01 00	 cmp	 QWORD PTR [rcx+rax], 0
  0068b	74 4e		 je	 SHORT $LN101@PxPages_Ad
$LN100@PxPages_Ad:
  0068d	48 8d 44 24 20	 lea	 rax, QWORD PTR x$[rsp]
  00692	48 89 44 24 48	 mov	 QWORD PTR _da_dst$126858[rsp], rax
  00697	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR pages$[rsp]
  0069f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  006a2	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  006a6	8b 4c 24 28	 mov	 ecx, DWORD PTR _hf_bkt$126793[rsp]
  006aa	48 6b c9 10	 imul	 rcx, 16
  006ae	48 8b 00	 mov	 rax, QWORD PTR [rax]
  006b1	48 8b 94 24 20
	01 00 00	 mov	 rdx, QWORD PTR pages$[rsp]
  006b9	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  006bc	48 8b 52 20	 mov	 rdx, QWORD PTR [rdx+32]
  006c0	48 8b 52 20	 mov	 rdx, QWORD PTR [rdx+32]
  006c4	48 8b 04 08	 mov	 rax, QWORD PTR [rax+rcx]
  006c8	48 2b c2	 sub	 rax, rdx
  006cb	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _da_dst$126858[rsp]
  006d0	48 89 01	 mov	 QWORD PTR [rcx], rax
  006d3	33 c0		 xor	 eax, eax
  006d5	85 c0		 test	 eax, eax
  006d7	75 b4		 jne	 SHORT $LN100@PxPages_Ad
  006d9	eb 09		 jmp	 SHORT $LN97@PxPages_Ad
$LN101@PxPages_Ad:
  006db	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR x$[rsp], 0
$LN97@PxPages_Ad:
$LN96@PxPages_Ad:
  006e4	48 83 7c 24 20
	00		 cmp	 QWORD PTR x$[rsp], 0
  006ea	0f 84 86 00 00
	00		 je	 $LN95@PxPages_Ad
  006f0	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  006f5	8b 40 50	 mov	 eax, DWORD PTR [rax+80]
  006f8	48 83 f8 04	 cmp	 rax, 4
  006fc	75 22		 jne	 SHORT $LN94@PxPages_Ad
  006fe	41 b8 04 00 00
	00		 mov	 r8d, 4
  00704	48 8b 94 24 28
	01 00 00	 mov	 rdx, QWORD PTR value$[rsp]
  0070c	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  00711	48 8b 48 48	 mov	 rcx, QWORD PTR [rax+72]
  00715	e8 00 00 00 00	 call	 memcmp
  0071a	85 c0		 test	 eax, eax
  0071c	75 02		 jne	 SHORT $LN93@PxPages_Ad
  0071e	eb 56		 jmp	 SHORT $LN95@PxPages_Ad
$LN93@PxPages_Ad:
$LN94@PxPages_Ad:
  00720	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  00725	48 83 78 40 00	 cmp	 QWORD PTR [rax+64], 0
  0072a	74 3c		 je	 SHORT $LN92@PxPages_Ad
$LN91@PxPages_Ad:
  0072c	48 8d 44 24 20	 lea	 rax, QWORD PTR x$[rsp]
  00731	48 89 44 24 50	 mov	 QWORD PTR _da_dst$126876[rsp], rax
  00736	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR pages$[rsp]
  0073e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00741	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00745	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  0074a	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0074e	48 8b 49 40	 mov	 rcx, QWORD PTR [rcx+64]
  00752	48 2b c8	 sub	 rcx, rax
  00755	48 8b c1	 mov	 rax, rcx
  00758	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _da_dst$126876[rsp]
  0075d	48 89 01	 mov	 QWORD PTR [rcx], rax
  00760	33 c0		 xor	 eax, eax
  00762	85 c0		 test	 eax, eax
  00764	75 c6		 jne	 SHORT $LN91@PxPages_Ad
  00766	eb 09		 jmp	 SHORT $LN88@PxPages_Ad
$LN92@PxPages_Ad:
  00768	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR x$[rsp], 0
$LN88@PxPages_Ad:
  00771	e9 6e ff ff ff	 jmp	 $LN96@PxPages_Ad
$LN95@PxPages_Ad:
  00776	33 c0		 xor	 eax, eax
  00778	85 c0		 test	 eax, eax
  0077a	0f 85 ec fe ff
	ff		 jne	 $LN104@PxPages_Ad
$LN105@PxPages_Ad:
$LN130@PxPages_Ad:
  00780	33 c0		 xor	 eax, eax
  00782	85 c0		 test	 eax, eax
  00784	0f 85 8c f8 ff
	ff		 jne	 $LN133@PxPages_Ad

; 1343 :     if (x) {

  0078a	48 83 7c 24 20
	00		 cmp	 QWORD PTR x$[rsp], 0
  00790	74 36		 je	 SHORT $LN87@PxPages_Ad

; 1344 :         /* Original:
; 1345 :         assert(x->count == 1);
; 1346 :         x->heaps[1] = h;
; 1347 :         x->count++; */
; 1348 :         x->heaps[x->count++] = h;

  00792	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  00797	48 0f bf 40 18	 movsx	 rax, WORD PTR [rax+24]
  0079c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  007a1	48 8b 94 24 30
	01 00 00	 mov	 rdx, QWORD PTR h$[rsp]
  007a9	48 89 54 c1 08	 mov	 QWORD PTR [rcx+rax*8+8], rdx
  007ae	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  007b3	0f b7 40 18	 movzx	 eax, WORD PTR [rax+24]
  007b7	66 ff c0	 inc	 ax
  007ba	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  007bf	66 89 41 18	 mov	 WORD PTR [rcx+24], ax

; 1349 :     } else {

  007c3	e9 69 12 00 00	 jmp	 $LN86@PxPages_Ad
$LN87@PxPages_Ad:

; 1350 :         x = (PxPages *)malloc(sizeof(PxPages));

  007c8	b9 58 00 00 00	 mov	 ecx, 88			; 00000058H
  007cd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  007d3	48 89 44 24 20	 mov	 QWORD PTR x$[rsp], rax

; 1351 :         x->heaps[0] = h;

  007d8	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  007dd	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR h$[rsp]
  007e5	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 1352 :         x->count = 1;

  007e9	b8 01 00 00 00	 mov	 eax, 1
  007ee	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  007f3	66 89 41 18	 mov	 WORD PTR [rcx+24], ax

; 1353 :         x->base = *value;

  007f7	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  007fc	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR value$[rsp]
  00804	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00807	48 89 08	 mov	 QWORD PTR [rax], rcx
$LN85@PxPages_Ad:

; 1354 :         HASH_ADD_INT(*pages, base, x);

  0080a	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  0080f	48 c7 40 30 00
	00 00 00	 mov	 QWORD PTR [rax+48], 0
  00817	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  0081c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  00821	48 89 48 48	 mov	 QWORD PTR [rax+72], rcx
  00825	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  0082a	c7 40 50 04 00
	00 00		 mov	 DWORD PTR [rax+80], 4
  00831	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR pages$[rsp]
  00839	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0083d	0f 85 6f 01 00
	00		 jne	 $LN82@PxPages_Ad
  00843	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR pages$[rsp]
  0084b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  00850	48 89 08	 mov	 QWORD PTR [rax], rcx
  00853	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR pages$[rsp]
  0085b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0085e	48 c7 40 28 00
	00 00 00	 mov	 QWORD PTR [rax+40], 0
$LN81@PxPages_Ad:
  00866	b9 40 00 00 00	 mov	 ecx, 64			; 00000040H
  0086b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00871	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR pages$[rsp]
  00879	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0087c	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax
  00880	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR pages$[rsp]
  00888	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0088b	48 83 78 20 00	 cmp	 QWORD PTR [rax+32], 0
  00890	75 0b		 jne	 SHORT $LN78@PxPages_Ad
  00892	b9 ff ff ff ff	 mov	 ecx, -1
  00897	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_exit
$LN78@PxPages_Ad:
  0089d	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR pages$[rsp]
  008a5	48 8b 00	 mov	 rax, QWORD PTR [rax]
  008a8	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  008ae	33 d2		 xor	 edx, edx
  008b0	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  008b4	e8 00 00 00 00	 call	 memset
  008b9	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR pages$[rsp]
  008c1	48 8b 00	 mov	 rax, QWORD PTR [rax]
  008c4	48 83 c0 20	 add	 rax, 32			; 00000020H
  008c8	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR pages$[rsp]
  008d0	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  008d3	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  008d7	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax
  008db	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR pages$[rsp]
  008e3	48 8b 00	 mov	 rax, QWORD PTR [rax]
  008e6	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  008ea	c7 40 08 20 00
	00 00		 mov	 DWORD PTR [rax+8], 32	; 00000020H
  008f1	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR pages$[rsp]
  008f9	48 8b 00	 mov	 rax, QWORD PTR [rax]
  008fc	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00900	c7 40 0c 05 00
	00 00		 mov	 DWORD PTR [rax+12], 5
  00907	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR pages$[rsp]
  0090f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00912	48 83 c0 20	 add	 rax, 32			; 00000020H
  00916	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR pages$[rsp]
  0091e	48 2b 01	 sub	 rax, QWORD PTR [rcx]
  00921	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR pages$[rsp]
  00929	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0092c	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  00930	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax
  00934	b9 00 02 00 00	 mov	 ecx, 512		; 00000200H
  00939	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  0093f	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR pages$[rsp]
  00947	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0094a	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  0094e	48 89 01	 mov	 QWORD PTR [rcx], rax
  00951	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR pages$[rsp]
  00959	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0095c	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00960	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00964	75 0b		 jne	 SHORT $LN77@PxPages_Ad
  00966	b9 ff ff ff ff	 mov	 ecx, -1
  0096b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_exit
$LN77@PxPages_Ad:
  00971	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR pages$[rsp]
  00979	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0097c	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00980	41 b8 00 02 00
	00		 mov	 r8d, 512		; 00000200H
  00986	33 d2		 xor	 edx, edx
  00988	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0098b	e8 00 00 00 00	 call	 memset
  00990	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR pages$[rsp]
  00998	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0099b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0099f	c7 40 38 e1 1f
	11 a0		 mov	 DWORD PTR [rax+56], -1609490463 ; a0111fe1H
  009a6	33 c0		 xor	 eax, eax
  009a8	85 c0		 test	 eax, eax
  009aa	0f 85 b6 fe ff
	ff		 jne	 $LN81@PxPages_Ad
  009b0	eb 6a		 jmp	 SHORT $LN76@PxPages_Ad
$LN82@PxPages_Ad:
  009b2	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR pages$[rsp]
  009ba	48 8b 00	 mov	 rax, QWORD PTR [rax]
  009bd	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  009c1	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  009c5	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  009ca	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx
  009ce	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR pages$[rsp]
  009d6	48 8b 00	 mov	 rax, QWORD PTR [rax]
  009d9	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  009dd	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR pages$[rsp]
  009e5	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  009e8	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  009ec	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  009f0	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  009f4	48 2b c1	 sub	 rax, rcx
  009f7	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  009fc	48 89 41 28	 mov	 QWORD PTR [rcx+40], rax
  00a00	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  00a05	48 83 c0 20	 add	 rax, 32			; 00000020H
  00a09	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR pages$[rsp]
  00a11	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00a14	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  00a18	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax
$LN76@PxPages_Ad:
  00a1c	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR pages$[rsp]
  00a24	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00a27	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00a2b	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
  00a2e	ff c0		 inc	 eax
  00a30	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR pages$[rsp]
  00a38	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00a3b	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  00a3f	89 41 10	 mov	 DWORD PTR [rcx+16], eax
  00a42	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR pages$[rsp]
  00a4a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00a4d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  00a52	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00a56	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax
$LN75@PxPages_Ad:
  00a5a	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  00a5f	48 89 44 24 60	 mov	 QWORD PTR _hj_key$126919[rsp], rax
  00a64	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  00a69	c7 40 54 ef be
	ed fe		 mov	 DWORD PTR [rax+84], -17973521 ; feedbeefH
  00a70	c7 44 24 6c b9
	79 37 9e	 mov	 DWORD PTR _hj_j$126917[rsp], -1640531527 ; 9e3779b9H
  00a78	8b 44 24 6c	 mov	 eax, DWORD PTR _hj_j$126917[rsp]
  00a7c	89 44 24 68	 mov	 DWORD PTR _hj_i$126916[rsp], eax
  00a80	c7 44 24 5c 04
	00 00 00	 mov	 DWORD PTR _hj_k$126918[rsp], 4
$LN72@PxPages_Ad:
  00a88	83 7c 24 5c 0c	 cmp	 DWORD PTR _hj_k$126918[rsp], 12
  00a8d	0f 82 0f 03 00
	00		 jb	 $LN71@PxPages_Ad
  00a93	48 8b 44 24 60	 mov	 rax, QWORD PTR _hj_key$126919[rsp]
  00a98	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00a9b	48 8b 4c 24 60	 mov	 rcx, QWORD PTR _hj_key$126919[rsp]
  00aa0	0f be 49 01	 movsx	 ecx, BYTE PTR [rcx+1]
  00aa4	c1 e1 08	 shl	 ecx, 8
  00aa7	03 c1		 add	 eax, ecx
  00aa9	48 8b 4c 24 60	 mov	 rcx, QWORD PTR _hj_key$126919[rsp]
  00aae	0f be 49 02	 movsx	 ecx, BYTE PTR [rcx+2]
  00ab2	c1 e1 10	 shl	 ecx, 16
  00ab5	03 c1		 add	 eax, ecx
  00ab7	48 8b 4c 24 60	 mov	 rcx, QWORD PTR _hj_key$126919[rsp]
  00abc	0f be 49 03	 movsx	 ecx, BYTE PTR [rcx+3]
  00ac0	c1 e1 18	 shl	 ecx, 24
  00ac3	03 4c 24 68	 add	 ecx, DWORD PTR _hj_i$126916[rsp]
  00ac7	03 c8		 add	 ecx, eax
  00ac9	8b c1		 mov	 eax, ecx
  00acb	89 44 24 68	 mov	 DWORD PTR _hj_i$126916[rsp], eax
  00acf	48 8b 44 24 60	 mov	 rax, QWORD PTR _hj_key$126919[rsp]
  00ad4	0f be 40 04	 movsx	 eax, BYTE PTR [rax+4]
  00ad8	48 8b 4c 24 60	 mov	 rcx, QWORD PTR _hj_key$126919[rsp]
  00add	0f be 49 05	 movsx	 ecx, BYTE PTR [rcx+5]
  00ae1	c1 e1 08	 shl	 ecx, 8
  00ae4	03 c1		 add	 eax, ecx
  00ae6	48 8b 4c 24 60	 mov	 rcx, QWORD PTR _hj_key$126919[rsp]
  00aeb	0f be 49 06	 movsx	 ecx, BYTE PTR [rcx+6]
  00aef	c1 e1 10	 shl	 ecx, 16
  00af2	03 c1		 add	 eax, ecx
  00af4	48 8b 4c 24 60	 mov	 rcx, QWORD PTR _hj_key$126919[rsp]
  00af9	0f be 49 07	 movsx	 ecx, BYTE PTR [rcx+7]
  00afd	c1 e1 18	 shl	 ecx, 24
  00b00	03 4c 24 6c	 add	 ecx, DWORD PTR _hj_j$126917[rsp]
  00b04	03 c8		 add	 ecx, eax
  00b06	8b c1		 mov	 eax, ecx
  00b08	89 44 24 6c	 mov	 DWORD PTR _hj_j$126917[rsp], eax
  00b0c	48 8b 44 24 60	 mov	 rax, QWORD PTR _hj_key$126919[rsp]
  00b11	0f be 40 08	 movsx	 eax, BYTE PTR [rax+8]
  00b15	48 8b 4c 24 60	 mov	 rcx, QWORD PTR _hj_key$126919[rsp]
  00b1a	0f be 49 09	 movsx	 ecx, BYTE PTR [rcx+9]
  00b1e	c1 e1 08	 shl	 ecx, 8
  00b21	03 c1		 add	 eax, ecx
  00b23	48 8b 4c 24 60	 mov	 rcx, QWORD PTR _hj_key$126919[rsp]
  00b28	0f be 49 0a	 movsx	 ecx, BYTE PTR [rcx+10]
  00b2c	c1 e1 10	 shl	 ecx, 16
  00b2f	03 c1		 add	 eax, ecx
  00b31	48 8b 4c 24 60	 mov	 rcx, QWORD PTR _hj_key$126919[rsp]
  00b36	0f be 49 0b	 movsx	 ecx, BYTE PTR [rcx+11]
  00b3a	c1 e1 18	 shl	 ecx, 24
  00b3d	03 c1		 add	 eax, ecx
  00b3f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  00b44	03 41 54	 add	 eax, DWORD PTR [rcx+84]
  00b47	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  00b4c	89 41 54	 mov	 DWORD PTR [rcx+84], eax
$LN70@PxPages_Ad:
  00b4f	8b 44 24 6c	 mov	 eax, DWORD PTR _hj_j$126917[rsp]
  00b53	8b 4c 24 68	 mov	 ecx, DWORD PTR _hj_i$126916[rsp]
  00b57	2b c8		 sub	 ecx, eax
  00b59	8b c1		 mov	 eax, ecx
  00b5b	89 44 24 68	 mov	 DWORD PTR _hj_i$126916[rsp], eax
  00b5f	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  00b64	8b 40 54	 mov	 eax, DWORD PTR [rax+84]
  00b67	8b 4c 24 68	 mov	 ecx, DWORD PTR _hj_i$126916[rsp]
  00b6b	2b c8		 sub	 ecx, eax
  00b6d	8b c1		 mov	 eax, ecx
  00b6f	89 44 24 68	 mov	 DWORD PTR _hj_i$126916[rsp], eax
  00b73	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  00b78	8b 40 54	 mov	 eax, DWORD PTR [rax+84]
  00b7b	c1 e8 0d	 shr	 eax, 13
  00b7e	8b 4c 24 68	 mov	 ecx, DWORD PTR _hj_i$126916[rsp]
  00b82	33 c8		 xor	 ecx, eax
  00b84	8b c1		 mov	 eax, ecx
  00b86	89 44 24 68	 mov	 DWORD PTR _hj_i$126916[rsp], eax
  00b8a	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  00b8f	8b 40 54	 mov	 eax, DWORD PTR [rax+84]
  00b92	8b 4c 24 6c	 mov	 ecx, DWORD PTR _hj_j$126917[rsp]
  00b96	2b c8		 sub	 ecx, eax
  00b98	8b c1		 mov	 eax, ecx
  00b9a	89 44 24 6c	 mov	 DWORD PTR _hj_j$126917[rsp], eax
  00b9e	8b 44 24 68	 mov	 eax, DWORD PTR _hj_i$126916[rsp]
  00ba2	8b 4c 24 6c	 mov	 ecx, DWORD PTR _hj_j$126917[rsp]
  00ba6	2b c8		 sub	 ecx, eax
  00ba8	8b c1		 mov	 eax, ecx
  00baa	89 44 24 6c	 mov	 DWORD PTR _hj_j$126917[rsp], eax
  00bae	8b 44 24 68	 mov	 eax, DWORD PTR _hj_i$126916[rsp]
  00bb2	c1 e0 08	 shl	 eax, 8
  00bb5	8b 4c 24 6c	 mov	 ecx, DWORD PTR _hj_j$126917[rsp]
  00bb9	33 c8		 xor	 ecx, eax
  00bbb	8b c1		 mov	 eax, ecx
  00bbd	89 44 24 6c	 mov	 DWORD PTR _hj_j$126917[rsp], eax
  00bc1	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  00bc6	8b 4c 24 68	 mov	 ecx, DWORD PTR _hj_i$126916[rsp]
  00bca	8b 40 54	 mov	 eax, DWORD PTR [rax+84]
  00bcd	2b c1		 sub	 eax, ecx
  00bcf	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  00bd4	89 41 54	 mov	 DWORD PTR [rcx+84], eax
  00bd7	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  00bdc	8b 4c 24 6c	 mov	 ecx, DWORD PTR _hj_j$126917[rsp]
  00be0	8b 40 54	 mov	 eax, DWORD PTR [rax+84]
  00be3	2b c1		 sub	 eax, ecx
  00be5	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  00bea	89 41 54	 mov	 DWORD PTR [rcx+84], eax
  00bed	8b 44 24 6c	 mov	 eax, DWORD PTR _hj_j$126917[rsp]
  00bf1	c1 e8 0d	 shr	 eax, 13
  00bf4	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  00bf9	8b 49 54	 mov	 ecx, DWORD PTR [rcx+84]
  00bfc	33 c8		 xor	 ecx, eax
  00bfe	8b c1		 mov	 eax, ecx
  00c00	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  00c05	89 41 54	 mov	 DWORD PTR [rcx+84], eax
  00c08	8b 44 24 6c	 mov	 eax, DWORD PTR _hj_j$126917[rsp]
  00c0c	8b 4c 24 68	 mov	 ecx, DWORD PTR _hj_i$126916[rsp]
  00c10	2b c8		 sub	 ecx, eax
  00c12	8b c1		 mov	 eax, ecx
  00c14	89 44 24 68	 mov	 DWORD PTR _hj_i$126916[rsp], eax
  00c18	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  00c1d	8b 40 54	 mov	 eax, DWORD PTR [rax+84]
  00c20	8b 4c 24 68	 mov	 ecx, DWORD PTR _hj_i$126916[rsp]
  00c24	2b c8		 sub	 ecx, eax
  00c26	8b c1		 mov	 eax, ecx
  00c28	89 44 24 68	 mov	 DWORD PTR _hj_i$126916[rsp], eax
  00c2c	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  00c31	8b 40 54	 mov	 eax, DWORD PTR [rax+84]
  00c34	c1 e8 0c	 shr	 eax, 12
  00c37	8b 4c 24 68	 mov	 ecx, DWORD PTR _hj_i$126916[rsp]
  00c3b	33 c8		 xor	 ecx, eax
  00c3d	8b c1		 mov	 eax, ecx
  00c3f	89 44 24 68	 mov	 DWORD PTR _hj_i$126916[rsp], eax
  00c43	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  00c48	8b 40 54	 mov	 eax, DWORD PTR [rax+84]
  00c4b	8b 4c 24 6c	 mov	 ecx, DWORD PTR _hj_j$126917[rsp]
  00c4f	2b c8		 sub	 ecx, eax
  00c51	8b c1		 mov	 eax, ecx
  00c53	89 44 24 6c	 mov	 DWORD PTR _hj_j$126917[rsp], eax
  00c57	8b 44 24 68	 mov	 eax, DWORD PTR _hj_i$126916[rsp]
  00c5b	8b 4c 24 6c	 mov	 ecx, DWORD PTR _hj_j$126917[rsp]
  00c5f	2b c8		 sub	 ecx, eax
  00c61	8b c1		 mov	 eax, ecx
  00c63	89 44 24 6c	 mov	 DWORD PTR _hj_j$126917[rsp], eax
  00c67	8b 44 24 68	 mov	 eax, DWORD PTR _hj_i$126916[rsp]
  00c6b	c1 e0 10	 shl	 eax, 16
  00c6e	8b 4c 24 6c	 mov	 ecx, DWORD PTR _hj_j$126917[rsp]
  00c72	33 c8		 xor	 ecx, eax
  00c74	8b c1		 mov	 eax, ecx
  00c76	89 44 24 6c	 mov	 DWORD PTR _hj_j$126917[rsp], eax
  00c7a	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  00c7f	8b 4c 24 68	 mov	 ecx, DWORD PTR _hj_i$126916[rsp]
  00c83	8b 40 54	 mov	 eax, DWORD PTR [rax+84]
  00c86	2b c1		 sub	 eax, ecx
  00c88	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  00c8d	89 41 54	 mov	 DWORD PTR [rcx+84], eax
  00c90	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  00c95	8b 4c 24 6c	 mov	 ecx, DWORD PTR _hj_j$126917[rsp]
  00c99	8b 40 54	 mov	 eax, DWORD PTR [rax+84]
  00c9c	2b c1		 sub	 eax, ecx
  00c9e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  00ca3	89 41 54	 mov	 DWORD PTR [rcx+84], eax
  00ca6	8b 44 24 6c	 mov	 eax, DWORD PTR _hj_j$126917[rsp]
  00caa	c1 e8 05	 shr	 eax, 5
  00cad	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  00cb2	8b 49 54	 mov	 ecx, DWORD PTR [rcx+84]
  00cb5	33 c8		 xor	 ecx, eax
  00cb7	8b c1		 mov	 eax, ecx
  00cb9	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  00cbe	89 41 54	 mov	 DWORD PTR [rcx+84], eax
  00cc1	8b 44 24 6c	 mov	 eax, DWORD PTR _hj_j$126917[rsp]
  00cc5	8b 4c 24 68	 mov	 ecx, DWORD PTR _hj_i$126916[rsp]
  00cc9	2b c8		 sub	 ecx, eax
  00ccb	8b c1		 mov	 eax, ecx
  00ccd	89 44 24 68	 mov	 DWORD PTR _hj_i$126916[rsp], eax
  00cd1	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  00cd6	8b 40 54	 mov	 eax, DWORD PTR [rax+84]
  00cd9	8b 4c 24 68	 mov	 ecx, DWORD PTR _hj_i$126916[rsp]
  00cdd	2b c8		 sub	 ecx, eax
  00cdf	8b c1		 mov	 eax, ecx
  00ce1	89 44 24 68	 mov	 DWORD PTR _hj_i$126916[rsp], eax
  00ce5	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  00cea	8b 40 54	 mov	 eax, DWORD PTR [rax+84]
  00ced	c1 e8 03	 shr	 eax, 3
  00cf0	8b 4c 24 68	 mov	 ecx, DWORD PTR _hj_i$126916[rsp]
  00cf4	33 c8		 xor	 ecx, eax
  00cf6	8b c1		 mov	 eax, ecx
  00cf8	89 44 24 68	 mov	 DWORD PTR _hj_i$126916[rsp], eax
  00cfc	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  00d01	8b 40 54	 mov	 eax, DWORD PTR [rax+84]
  00d04	8b 4c 24 6c	 mov	 ecx, DWORD PTR _hj_j$126917[rsp]
  00d08	2b c8		 sub	 ecx, eax
  00d0a	8b c1		 mov	 eax, ecx
  00d0c	89 44 24 6c	 mov	 DWORD PTR _hj_j$126917[rsp], eax
  00d10	8b 44 24 68	 mov	 eax, DWORD PTR _hj_i$126916[rsp]
  00d14	8b 4c 24 6c	 mov	 ecx, DWORD PTR _hj_j$126917[rsp]
  00d18	2b c8		 sub	 ecx, eax
  00d1a	8b c1		 mov	 eax, ecx
  00d1c	89 44 24 6c	 mov	 DWORD PTR _hj_j$126917[rsp], eax
  00d20	8b 44 24 68	 mov	 eax, DWORD PTR _hj_i$126916[rsp]
  00d24	c1 e0 0a	 shl	 eax, 10
  00d27	8b 4c 24 6c	 mov	 ecx, DWORD PTR _hj_j$126917[rsp]
  00d2b	33 c8		 xor	 ecx, eax
  00d2d	8b c1		 mov	 eax, ecx
  00d2f	89 44 24 6c	 mov	 DWORD PTR _hj_j$126917[rsp], eax
  00d33	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  00d38	8b 4c 24 68	 mov	 ecx, DWORD PTR _hj_i$126916[rsp]
  00d3c	8b 40 54	 mov	 eax, DWORD PTR [rax+84]
  00d3f	2b c1		 sub	 eax, ecx
  00d41	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  00d46	89 41 54	 mov	 DWORD PTR [rcx+84], eax
  00d49	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  00d4e	8b 4c 24 6c	 mov	 ecx, DWORD PTR _hj_j$126917[rsp]
  00d52	8b 40 54	 mov	 eax, DWORD PTR [rax+84]
  00d55	2b c1		 sub	 eax, ecx
  00d57	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  00d5c	89 41 54	 mov	 DWORD PTR [rcx+84], eax
  00d5f	8b 44 24 6c	 mov	 eax, DWORD PTR _hj_j$126917[rsp]
  00d63	c1 e8 0f	 shr	 eax, 15
  00d66	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  00d6b	8b 49 54	 mov	 ecx, DWORD PTR [rcx+84]
  00d6e	33 c8		 xor	 ecx, eax
  00d70	8b c1		 mov	 eax, ecx
  00d72	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  00d77	89 41 54	 mov	 DWORD PTR [rcx+84], eax
  00d7a	33 c0		 xor	 eax, eax
  00d7c	85 c0		 test	 eax, eax
  00d7e	0f 85 cb fd ff
	ff		 jne	 $LN70@PxPages_Ad
  00d84	48 8b 44 24 60	 mov	 rax, QWORD PTR _hj_key$126919[rsp]
  00d89	48 83 c0 0c	 add	 rax, 12
  00d8d	48 89 44 24 60	 mov	 QWORD PTR _hj_key$126919[rsp], rax
  00d92	8b 44 24 5c	 mov	 eax, DWORD PTR _hj_k$126918[rsp]
  00d96	83 e8 0c	 sub	 eax, 12
  00d99	89 44 24 5c	 mov	 DWORD PTR _hj_k$126918[rsp], eax
  00d9d	e9 e6 fc ff ff	 jmp	 $LN72@PxPages_Ad
$LN71@PxPages_Ad:
  00da2	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  00da7	8b 40 54	 mov	 eax, DWORD PTR [rax+84]
  00daa	48 83 c0 04	 add	 rax, 4
  00dae	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  00db3	89 41 54	 mov	 DWORD PTR [rcx+84], eax
  00db6	8b 44 24 5c	 mov	 eax, DWORD PTR _hj_k$126918[rsp]
  00dba	89 84 24 c0 00
	00 00		 mov	 DWORD PTR tv501[rsp], eax
  00dc1	8b 84 24 c0 00
	00 00		 mov	 eax, DWORD PTR tv501[rsp]
  00dc8	ff c8		 dec	 eax
  00dca	89 84 24 c0 00
	00 00		 mov	 DWORD PTR tv501[rsp], eax
  00dd1	83 bc 24 c0 00
	00 00 0a	 cmp	 DWORD PTR tv501[rsp], 10
  00dd9	0f 87 27 01 00
	00		 ja	 $LN66@PxPages_Ad
  00ddf	8b 84 24 c0 00
	00 00		 mov	 eax, DWORD PTR tv501[rsp]
  00de6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  00ded	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN142@PxPages_Ad[rcx+rax*4]
  00df4	48 03 c1	 add	 rax, rcx
  00df7	ff e0		 jmp	 rax
$LN65@PxPages_Ad:
  00df9	48 8b 44 24 60	 mov	 rax, QWORD PTR _hj_key$126919[rsp]
  00dfe	0f be 40 0a	 movsx	 eax, BYTE PTR [rax+10]
  00e02	c1 e0 18	 shl	 eax, 24
  00e05	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  00e0a	03 41 54	 add	 eax, DWORD PTR [rcx+84]
  00e0d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  00e12	89 41 54	 mov	 DWORD PTR [rcx+84], eax
$LN64@PxPages_Ad:
  00e15	48 8b 44 24 60	 mov	 rax, QWORD PTR _hj_key$126919[rsp]
  00e1a	0f be 40 09	 movsx	 eax, BYTE PTR [rax+9]
  00e1e	c1 e0 10	 shl	 eax, 16
  00e21	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  00e26	03 41 54	 add	 eax, DWORD PTR [rcx+84]
  00e29	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  00e2e	89 41 54	 mov	 DWORD PTR [rcx+84], eax
$LN63@PxPages_Ad:
  00e31	48 8b 44 24 60	 mov	 rax, QWORD PTR _hj_key$126919[rsp]
  00e36	0f be 40 08	 movsx	 eax, BYTE PTR [rax+8]
  00e3a	c1 e0 08	 shl	 eax, 8
  00e3d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  00e42	03 41 54	 add	 eax, DWORD PTR [rcx+84]
  00e45	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  00e4a	89 41 54	 mov	 DWORD PTR [rcx+84], eax
$LN62@PxPages_Ad:
  00e4d	48 8b 44 24 60	 mov	 rax, QWORD PTR _hj_key$126919[rsp]
  00e52	0f be 40 07	 movsx	 eax, BYTE PTR [rax+7]
  00e56	c1 e0 18	 shl	 eax, 24
  00e59	8b 4c 24 6c	 mov	 ecx, DWORD PTR _hj_j$126917[rsp]
  00e5d	03 c8		 add	 ecx, eax
  00e5f	8b c1		 mov	 eax, ecx
  00e61	89 44 24 6c	 mov	 DWORD PTR _hj_j$126917[rsp], eax
$LN61@PxPages_Ad:
  00e65	48 8b 44 24 60	 mov	 rax, QWORD PTR _hj_key$126919[rsp]
  00e6a	0f be 40 06	 movsx	 eax, BYTE PTR [rax+6]
  00e6e	c1 e0 10	 shl	 eax, 16
  00e71	8b 4c 24 6c	 mov	 ecx, DWORD PTR _hj_j$126917[rsp]
  00e75	03 c8		 add	 ecx, eax
  00e77	8b c1		 mov	 eax, ecx
  00e79	89 44 24 6c	 mov	 DWORD PTR _hj_j$126917[rsp], eax
$LN60@PxPages_Ad:
  00e7d	48 8b 44 24 60	 mov	 rax, QWORD PTR _hj_key$126919[rsp]
  00e82	0f be 40 05	 movsx	 eax, BYTE PTR [rax+5]
  00e86	c1 e0 08	 shl	 eax, 8
  00e89	8b 4c 24 6c	 mov	 ecx, DWORD PTR _hj_j$126917[rsp]
  00e8d	03 c8		 add	 ecx, eax
  00e8f	8b c1		 mov	 eax, ecx
  00e91	89 44 24 6c	 mov	 DWORD PTR _hj_j$126917[rsp], eax
$LN59@PxPages_Ad:
  00e95	48 8b 44 24 60	 mov	 rax, QWORD PTR _hj_key$126919[rsp]
  00e9a	0f be 40 04	 movsx	 eax, BYTE PTR [rax+4]
  00e9e	8b 4c 24 6c	 mov	 ecx, DWORD PTR _hj_j$126917[rsp]
  00ea2	03 c8		 add	 ecx, eax
  00ea4	8b c1		 mov	 eax, ecx
  00ea6	89 44 24 6c	 mov	 DWORD PTR _hj_j$126917[rsp], eax
$LN58@PxPages_Ad:
  00eaa	48 8b 44 24 60	 mov	 rax, QWORD PTR _hj_key$126919[rsp]
  00eaf	0f be 40 03	 movsx	 eax, BYTE PTR [rax+3]
  00eb3	c1 e0 18	 shl	 eax, 24
  00eb6	8b 4c 24 68	 mov	 ecx, DWORD PTR _hj_i$126916[rsp]
  00eba	03 c8		 add	 ecx, eax
  00ebc	8b c1		 mov	 eax, ecx
  00ebe	89 44 24 68	 mov	 DWORD PTR _hj_i$126916[rsp], eax
$LN57@PxPages_Ad:
  00ec2	48 8b 44 24 60	 mov	 rax, QWORD PTR _hj_key$126919[rsp]
  00ec7	0f be 40 02	 movsx	 eax, BYTE PTR [rax+2]
  00ecb	c1 e0 10	 shl	 eax, 16
  00ece	8b 4c 24 68	 mov	 ecx, DWORD PTR _hj_i$126916[rsp]
  00ed2	03 c8		 add	 ecx, eax
  00ed4	8b c1		 mov	 eax, ecx
  00ed6	89 44 24 68	 mov	 DWORD PTR _hj_i$126916[rsp], eax
$LN56@PxPages_Ad:
  00eda	48 8b 44 24 60	 mov	 rax, QWORD PTR _hj_key$126919[rsp]
  00edf	0f be 40 01	 movsx	 eax, BYTE PTR [rax+1]
  00ee3	c1 e0 08	 shl	 eax, 8
  00ee6	8b 4c 24 68	 mov	 ecx, DWORD PTR _hj_i$126916[rsp]
  00eea	03 c8		 add	 ecx, eax
  00eec	8b c1		 mov	 eax, ecx
  00eee	89 44 24 68	 mov	 DWORD PTR _hj_i$126916[rsp], eax
$LN55@PxPages_Ad:
  00ef2	48 8b 44 24 60	 mov	 rax, QWORD PTR _hj_key$126919[rsp]
  00ef7	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00efa	8b 4c 24 68	 mov	 ecx, DWORD PTR _hj_i$126916[rsp]
  00efe	03 c8		 add	 ecx, eax
  00f00	8b c1		 mov	 eax, ecx
  00f02	89 44 24 68	 mov	 DWORD PTR _hj_i$126916[rsp], eax
$LN66@PxPages_Ad:
$LN54@PxPages_Ad:
  00f06	8b 44 24 6c	 mov	 eax, DWORD PTR _hj_j$126917[rsp]
  00f0a	8b 4c 24 68	 mov	 ecx, DWORD PTR _hj_i$126916[rsp]
  00f0e	2b c8		 sub	 ecx, eax
  00f10	8b c1		 mov	 eax, ecx
  00f12	89 44 24 68	 mov	 DWORD PTR _hj_i$126916[rsp], eax
  00f16	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  00f1b	8b 40 54	 mov	 eax, DWORD PTR [rax+84]
  00f1e	8b 4c 24 68	 mov	 ecx, DWORD PTR _hj_i$126916[rsp]
  00f22	2b c8		 sub	 ecx, eax
  00f24	8b c1		 mov	 eax, ecx
  00f26	89 44 24 68	 mov	 DWORD PTR _hj_i$126916[rsp], eax
  00f2a	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  00f2f	8b 40 54	 mov	 eax, DWORD PTR [rax+84]
  00f32	c1 e8 0d	 shr	 eax, 13
  00f35	8b 4c 24 68	 mov	 ecx, DWORD PTR _hj_i$126916[rsp]
  00f39	33 c8		 xor	 ecx, eax
  00f3b	8b c1		 mov	 eax, ecx
  00f3d	89 44 24 68	 mov	 DWORD PTR _hj_i$126916[rsp], eax
  00f41	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  00f46	8b 40 54	 mov	 eax, DWORD PTR [rax+84]
  00f49	8b 4c 24 6c	 mov	 ecx, DWORD PTR _hj_j$126917[rsp]
  00f4d	2b c8		 sub	 ecx, eax
  00f4f	8b c1		 mov	 eax, ecx
  00f51	89 44 24 6c	 mov	 DWORD PTR _hj_j$126917[rsp], eax
  00f55	8b 44 24 68	 mov	 eax, DWORD PTR _hj_i$126916[rsp]
  00f59	8b 4c 24 6c	 mov	 ecx, DWORD PTR _hj_j$126917[rsp]
  00f5d	2b c8		 sub	 ecx, eax
  00f5f	8b c1		 mov	 eax, ecx
  00f61	89 44 24 6c	 mov	 DWORD PTR _hj_j$126917[rsp], eax
  00f65	8b 44 24 68	 mov	 eax, DWORD PTR _hj_i$126916[rsp]
  00f69	c1 e0 08	 shl	 eax, 8
  00f6c	8b 4c 24 6c	 mov	 ecx, DWORD PTR _hj_j$126917[rsp]
  00f70	33 c8		 xor	 ecx, eax
  00f72	8b c1		 mov	 eax, ecx
  00f74	89 44 24 6c	 mov	 DWORD PTR _hj_j$126917[rsp], eax
  00f78	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  00f7d	8b 4c 24 68	 mov	 ecx, DWORD PTR _hj_i$126916[rsp]
  00f81	8b 40 54	 mov	 eax, DWORD PTR [rax+84]
  00f84	2b c1		 sub	 eax, ecx
  00f86	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  00f8b	89 41 54	 mov	 DWORD PTR [rcx+84], eax
  00f8e	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  00f93	8b 4c 24 6c	 mov	 ecx, DWORD PTR _hj_j$126917[rsp]
  00f97	8b 40 54	 mov	 eax, DWORD PTR [rax+84]
  00f9a	2b c1		 sub	 eax, ecx
  00f9c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  00fa1	89 41 54	 mov	 DWORD PTR [rcx+84], eax
  00fa4	8b 44 24 6c	 mov	 eax, DWORD PTR _hj_j$126917[rsp]
  00fa8	c1 e8 0d	 shr	 eax, 13
  00fab	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  00fb0	8b 49 54	 mov	 ecx, DWORD PTR [rcx+84]
  00fb3	33 c8		 xor	 ecx, eax
  00fb5	8b c1		 mov	 eax, ecx
  00fb7	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  00fbc	89 41 54	 mov	 DWORD PTR [rcx+84], eax
  00fbf	8b 44 24 6c	 mov	 eax, DWORD PTR _hj_j$126917[rsp]
  00fc3	8b 4c 24 68	 mov	 ecx, DWORD PTR _hj_i$126916[rsp]
  00fc7	2b c8		 sub	 ecx, eax
  00fc9	8b c1		 mov	 eax, ecx
  00fcb	89 44 24 68	 mov	 DWORD PTR _hj_i$126916[rsp], eax
  00fcf	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  00fd4	8b 40 54	 mov	 eax, DWORD PTR [rax+84]
  00fd7	8b 4c 24 68	 mov	 ecx, DWORD PTR _hj_i$126916[rsp]
  00fdb	2b c8		 sub	 ecx, eax
  00fdd	8b c1		 mov	 eax, ecx
  00fdf	89 44 24 68	 mov	 DWORD PTR _hj_i$126916[rsp], eax
  00fe3	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  00fe8	8b 40 54	 mov	 eax, DWORD PTR [rax+84]
  00feb	c1 e8 0c	 shr	 eax, 12
  00fee	8b 4c 24 68	 mov	 ecx, DWORD PTR _hj_i$126916[rsp]
  00ff2	33 c8		 xor	 ecx, eax
  00ff4	8b c1		 mov	 eax, ecx
  00ff6	89 44 24 68	 mov	 DWORD PTR _hj_i$126916[rsp], eax
  00ffa	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  00fff	8b 40 54	 mov	 eax, DWORD PTR [rax+84]
  01002	8b 4c 24 6c	 mov	 ecx, DWORD PTR _hj_j$126917[rsp]
  01006	2b c8		 sub	 ecx, eax
  01008	8b c1		 mov	 eax, ecx
  0100a	89 44 24 6c	 mov	 DWORD PTR _hj_j$126917[rsp], eax
  0100e	8b 44 24 68	 mov	 eax, DWORD PTR _hj_i$126916[rsp]
  01012	8b 4c 24 6c	 mov	 ecx, DWORD PTR _hj_j$126917[rsp]
  01016	2b c8		 sub	 ecx, eax
  01018	8b c1		 mov	 eax, ecx
  0101a	89 44 24 6c	 mov	 DWORD PTR _hj_j$126917[rsp], eax
  0101e	8b 44 24 68	 mov	 eax, DWORD PTR _hj_i$126916[rsp]
  01022	c1 e0 10	 shl	 eax, 16
  01025	8b 4c 24 6c	 mov	 ecx, DWORD PTR _hj_j$126917[rsp]
  01029	33 c8		 xor	 ecx, eax
  0102b	8b c1		 mov	 eax, ecx
  0102d	89 44 24 6c	 mov	 DWORD PTR _hj_j$126917[rsp], eax
  01031	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  01036	8b 4c 24 68	 mov	 ecx, DWORD PTR _hj_i$126916[rsp]
  0103a	8b 40 54	 mov	 eax, DWORD PTR [rax+84]
  0103d	2b c1		 sub	 eax, ecx
  0103f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  01044	89 41 54	 mov	 DWORD PTR [rcx+84], eax
  01047	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  0104c	8b 4c 24 6c	 mov	 ecx, DWORD PTR _hj_j$126917[rsp]
  01050	8b 40 54	 mov	 eax, DWORD PTR [rax+84]
  01053	2b c1		 sub	 eax, ecx
  01055	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  0105a	89 41 54	 mov	 DWORD PTR [rcx+84], eax
  0105d	8b 44 24 6c	 mov	 eax, DWORD PTR _hj_j$126917[rsp]
  01061	c1 e8 05	 shr	 eax, 5
  01064	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  01069	8b 49 54	 mov	 ecx, DWORD PTR [rcx+84]
  0106c	33 c8		 xor	 ecx, eax
  0106e	8b c1		 mov	 eax, ecx
  01070	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  01075	89 41 54	 mov	 DWORD PTR [rcx+84], eax
  01078	8b 44 24 6c	 mov	 eax, DWORD PTR _hj_j$126917[rsp]
  0107c	8b 4c 24 68	 mov	 ecx, DWORD PTR _hj_i$126916[rsp]
  01080	2b c8		 sub	 ecx, eax
  01082	8b c1		 mov	 eax, ecx
  01084	89 44 24 68	 mov	 DWORD PTR _hj_i$126916[rsp], eax
  01088	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  0108d	8b 40 54	 mov	 eax, DWORD PTR [rax+84]
  01090	8b 4c 24 68	 mov	 ecx, DWORD PTR _hj_i$126916[rsp]
  01094	2b c8		 sub	 ecx, eax
  01096	8b c1		 mov	 eax, ecx
  01098	89 44 24 68	 mov	 DWORD PTR _hj_i$126916[rsp], eax
  0109c	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  010a1	8b 40 54	 mov	 eax, DWORD PTR [rax+84]
  010a4	c1 e8 03	 shr	 eax, 3
  010a7	8b 4c 24 68	 mov	 ecx, DWORD PTR _hj_i$126916[rsp]
  010ab	33 c8		 xor	 ecx, eax
  010ad	8b c1		 mov	 eax, ecx
  010af	89 44 24 68	 mov	 DWORD PTR _hj_i$126916[rsp], eax
  010b3	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  010b8	8b 40 54	 mov	 eax, DWORD PTR [rax+84]
  010bb	8b 4c 24 6c	 mov	 ecx, DWORD PTR _hj_j$126917[rsp]
  010bf	2b c8		 sub	 ecx, eax
  010c1	8b c1		 mov	 eax, ecx
  010c3	89 44 24 6c	 mov	 DWORD PTR _hj_j$126917[rsp], eax
  010c7	8b 44 24 68	 mov	 eax, DWORD PTR _hj_i$126916[rsp]
  010cb	8b 4c 24 6c	 mov	 ecx, DWORD PTR _hj_j$126917[rsp]
  010cf	2b c8		 sub	 ecx, eax
  010d1	8b c1		 mov	 eax, ecx
  010d3	89 44 24 6c	 mov	 DWORD PTR _hj_j$126917[rsp], eax
  010d7	8b 44 24 68	 mov	 eax, DWORD PTR _hj_i$126916[rsp]
  010db	c1 e0 0a	 shl	 eax, 10
  010de	8b 4c 24 6c	 mov	 ecx, DWORD PTR _hj_j$126917[rsp]
  010e2	33 c8		 xor	 ecx, eax
  010e4	8b c1		 mov	 eax, ecx
  010e6	89 44 24 6c	 mov	 DWORD PTR _hj_j$126917[rsp], eax
  010ea	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  010ef	8b 4c 24 68	 mov	 ecx, DWORD PTR _hj_i$126916[rsp]
  010f3	8b 40 54	 mov	 eax, DWORD PTR [rax+84]
  010f6	2b c1		 sub	 eax, ecx
  010f8	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  010fd	89 41 54	 mov	 DWORD PTR [rcx+84], eax
  01100	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  01105	8b 4c 24 6c	 mov	 ecx, DWORD PTR _hj_j$126917[rsp]
  01109	8b 40 54	 mov	 eax, DWORD PTR [rax+84]
  0110c	2b c1		 sub	 eax, ecx
  0110e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  01113	89 41 54	 mov	 DWORD PTR [rcx+84], eax
  01116	8b 44 24 6c	 mov	 eax, DWORD PTR _hj_j$126917[rsp]
  0111a	c1 e8 0f	 shr	 eax, 15
  0111d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  01122	8b 49 54	 mov	 ecx, DWORD PTR [rcx+84]
  01125	33 c8		 xor	 ecx, eax
  01127	8b c1		 mov	 eax, ecx
  01129	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  0112e	89 41 54	 mov	 DWORD PTR [rcx+84], eax
  01131	33 c0		 xor	 eax, eax
  01133	85 c0		 test	 eax, eax
  01135	0f 85 cb fd ff
	ff		 jne	 $LN54@PxPages_Ad
  0113b	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR pages$[rsp]
  01143	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01146	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0114a	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  0114d	ff c8		 dec	 eax
  0114f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  01154	8b 49 54	 mov	 ecx, DWORD PTR [rcx+84]
  01157	23 c8		 and	 ecx, eax
  01159	8b c1		 mov	 eax, ecx
  0115b	89 44 24 58	 mov	 DWORD PTR _ha_bkt$126890[rsp], eax
  0115f	33 c0		 xor	 eax, eax
  01161	85 c0		 test	 eax, eax
  01163	0f 85 f1 f8 ff
	ff		 jne	 $LN75@PxPages_Ad
$LN51@PxPages_Ad:
  01169	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR pages$[rsp]
  01171	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01174	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  01178	8b 4c 24 58	 mov	 ecx, DWORD PTR _ha_bkt$126890[rsp]
  0117c	48 6b c9 10	 imul	 rcx, 16
  01180	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01183	8b 44 08 08	 mov	 eax, DWORD PTR [rax+rcx+8]
  01187	ff c0		 inc	 eax
  01189	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR pages$[rsp]
  01191	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  01194	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  01198	8b 54 24 58	 mov	 edx, DWORD PTR _ha_bkt$126890[rsp]
  0119c	48 6b d2 10	 imul	 rdx, 16
  011a0	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  011a3	89 44 11 08	 mov	 DWORD PTR [rcx+rdx+8], eax
  011a7	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR pages$[rsp]
  011af	48 8b 00	 mov	 rax, QWORD PTR [rax]
  011b2	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  011b6	8b 4c 24 58	 mov	 ecx, DWORD PTR _ha_bkt$126890[rsp]
  011ba	48 6b c9 10	 imul	 rcx, 16
  011be	48 8b 00	 mov	 rax, QWORD PTR [rax]
  011c1	48 8b 54 24 20	 mov	 rdx, QWORD PTR x$[rsp]
  011c6	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  011ca	48 89 42 40	 mov	 QWORD PTR [rdx+64], rax
  011ce	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  011d3	48 c7 40 38 00
	00 00 00	 mov	 QWORD PTR [rax+56], 0
  011db	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR pages$[rsp]
  011e3	48 8b 00	 mov	 rax, QWORD PTR [rax]
  011e6	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  011ea	8b 4c 24 58	 mov	 ecx, DWORD PTR _ha_bkt$126890[rsp]
  011ee	48 6b c9 10	 imul	 rcx, 16
  011f2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  011f5	48 83 3c 01 00	 cmp	 QWORD PTR [rcx+rax], 0
  011fa	74 2b		 je	 SHORT $LN48@PxPages_Ad
  011fc	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  01201	48 83 c0 20	 add	 rax, 32			; 00000020H
  01205	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR pages$[rsp]
  0120d	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  01210	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  01214	8b 54 24 58	 mov	 edx, DWORD PTR _ha_bkt$126890[rsp]
  01218	48 6b d2 10	 imul	 rdx, 16
  0121c	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0121f	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  01223	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax
$LN48@PxPages_Ad:
  01227	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  0122c	48 83 c0 20	 add	 rax, 32			; 00000020H
  01230	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR pages$[rsp]
  01238	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0123b	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  0123f	8b 54 24 58	 mov	 edx, DWORD PTR _ha_bkt$126890[rsp]
  01243	48 6b d2 10	 imul	 rdx, 16
  01247	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0124a	48 89 04 0a	 mov	 QWORD PTR [rdx+rcx], rax
  0124e	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR pages$[rsp]
  01256	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01259	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0125d	8b 4c 24 58	 mov	 ecx, DWORD PTR _ha_bkt$126890[rsp]
  01261	48 6b c9 10	 imul	 rcx, 16
  01265	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01268	48 8b 94 24 20
	01 00 00	 mov	 rdx, QWORD PTR pages$[rsp]
  01270	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  01273	48 8b 52 20	 mov	 rdx, QWORD PTR [rdx+32]
  01277	44 8b 44 24 58	 mov	 r8d, DWORD PTR _ha_bkt$126890[rsp]
  0127c	4d 6b c0 10	 imul	 r8, 16
  01280	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  01283	42 8b 54 02 0c	 mov	 edx, DWORD PTR [rdx+r8+12]
  01288	ff c2		 inc	 edx
  0128a	6b d2 0a	 imul	 edx, 10
  0128d	39 54 08 08	 cmp	 DWORD PTR [rax+rcx+8], edx
  01291	0f 82 80 03 00
	00		 jb	 $LN47@PxPages_Ad
  01297	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  0129c	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  012a0	83 78 34 01	 cmp	 DWORD PTR [rax+52], 1
  012a4	0f 84 6d 03 00
	00		 je	 $LN47@PxPages_Ad
$LN46@PxPages_Ad:
  012aa	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  012af	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  012b3	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  012b6	d1 e0		 shl	 eax, 1
  012b8	8b c0		 mov	 eax, eax
  012ba	48 6b c0 10	 imul	 rax, 16
  012be	48 8b c8	 mov	 rcx, rax
  012c1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  012c7	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR _he_new_buckets$126979[rsp], rax
  012cf	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR _he_new_buckets$126979[rsp], 0
  012d8	75 0b		 jne	 SHORT $LN43@PxPages_Ad
  012da	b9 ff ff ff ff	 mov	 ecx, -1
  012df	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_exit
$LN43@PxPages_Ad:
  012e5	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  012ea	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  012ee	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  012f1	d1 e0		 shl	 eax, 1
  012f3	8b c0		 mov	 eax, eax
  012f5	48 6b c0 10	 imul	 rax, 16
  012f9	4c 8b c0	 mov	 r8, rax
  012fc	33 d2		 xor	 edx, edx
  012fe	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR _he_new_buckets$126979[rsp]
  01306	e8 00 00 00 00	 call	 memset
  0130b	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  01310	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  01314	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  01319	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  0131d	8b 49 08	 mov	 ecx, DWORD PTR [rcx+8]
  01320	8d 4c 09 ff	 lea	 ecx, DWORD PTR [rcx+rcx-1]
  01324	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
  01327	23 c1		 and	 eax, ecx
  01329	85 c0		 test	 eax, eax
  0132b	74 0d		 je	 SHORT $LN136@PxPages_Ad
  0132d	c7 84 24 c4 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv717[rsp], 1
  01338	eb 0b		 jmp	 SHORT $LN137@PxPages_Ad
$LN136@PxPages_Ad:
  0133a	c7 84 24 c4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv717[rsp], 0
$LN137@PxPages_Ad:
  01345	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  0134a	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0134e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  01353	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  01357	8b 49 0c	 mov	 ecx, DWORD PTR [rcx+12]
  0135a	ff c1		 inc	 ecx
  0135c	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
  0135f	d3 e8		 shr	 eax, cl
  01361	03 84 24 c4 00
	00 00		 add	 eax, DWORD PTR tv717[rsp]
  01368	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  0136d	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  01371	89 41 28	 mov	 DWORD PTR [rcx+40], eax
  01374	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  01379	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0137d	c7 40 2c 00 00
	00 00		 mov	 DWORD PTR [rax+44], 0
  01384	c7 84 24 80 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _he_bkt_i$126976[rsp], 0
  0138f	eb 10		 jmp	 SHORT $LN42@PxPages_Ad
$LN41@PxPages_Ad:
  01391	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR _he_bkt_i$126976[rsp]
  01398	ff c0		 inc	 eax
  0139a	89 84 24 80 00
	00 00		 mov	 DWORD PTR _he_bkt_i$126976[rsp], eax
$LN42@PxPages_Ad:
  013a1	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  013a6	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  013aa	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  013ad	39 84 24 80 00
	00 00		 cmp	 DWORD PTR _he_bkt_i$126976[rsp], eax
  013b4	0f 83 89 01 00
	00		 jae	 $LN40@PxPages_Ad
  013ba	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  013bf	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  013c3	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR _he_bkt_i$126976[rsp]
  013ca	48 6b c9 10	 imul	 rcx, 16
  013ce	48 8b 00	 mov	 rax, QWORD PTR [rax]
  013d1	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  013d5	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR _he_thh$126977[rsp], rax
$LN39@PxPages_Ad:
  013dd	48 83 bc 24 90
	00 00 00 00	 cmp	 QWORD PTR _he_thh$126977[rsp], 0
  013e6	0f 84 52 01 00
	00		 je	 $LN38@PxPages_Ad
  013ec	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR _he_thh$126977[rsp]
  013f4	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  013f8	48 89 44 24 78	 mov	 QWORD PTR _he_hh_nxt$126978[rsp], rax
$LN37@PxPages_Ad:
  013fd	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  01402	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  01406	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  01409	8d 44 00 ff	 lea	 eax, DWORD PTR [rax+rax-1]
  0140d	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR _he_thh$126977[rsp]
  01415	8b 49 34	 mov	 ecx, DWORD PTR [rcx+52]
  01418	23 c8		 and	 ecx, eax
  0141a	8b c1		 mov	 eax, ecx
  0141c	89 44 24 70	 mov	 DWORD PTR _he_bkt$126975[rsp], eax
  01420	33 c0		 xor	 eax, eax
  01422	85 c0		 test	 eax, eax
  01424	75 d7		 jne	 SHORT $LN37@PxPages_Ad
  01426	8b 44 24 70	 mov	 eax, DWORD PTR _he_bkt$126975[rsp]
  0142a	48 6b c0 10	 imul	 rax, 16
  0142e	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR _he_new_buckets$126979[rsp]
  01436	48 03 c8	 add	 rcx, rax
  01439	48 8b c1	 mov	 rax, rcx
  0143c	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR _he_newbkt$126980[rsp], rax
  01444	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR _he_newbkt$126980[rsp]
  0144c	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  0144f	ff c0		 inc	 eax
  01451	89 84 24 c8 00
	00 00		 mov	 DWORD PTR tv744[rsp], eax
  01458	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR _he_newbkt$126980[rsp]
  01460	8b 8c 24 c8 00
	00 00		 mov	 ecx, DWORD PTR tv744[rsp]
  01467	89 48 08	 mov	 DWORD PTR [rax+8], ecx
  0146a	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  0146f	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  01473	8b 40 28	 mov	 eax, DWORD PTR [rax+40]
  01476	39 84 24 c8 00
	00 00		 cmp	 DWORD PTR tv744[rsp], eax
  0147d	76 4e		 jbe	 SHORT $LN34@PxPages_Ad
  0147f	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  01484	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  01488	8b 40 2c	 mov	 eax, DWORD PTR [rax+44]
  0148b	ff c0		 inc	 eax
  0148d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  01492	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  01496	89 41 2c	 mov	 DWORD PTR [rcx+44], eax
  01499	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  0149e	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  014a2	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR tv935[rsp], rax
  014aa	33 d2		 xor	 edx, edx
  014ac	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR _he_newbkt$126980[rsp]
  014b4	8b 41 08	 mov	 eax, DWORD PTR [rcx+8]
  014b7	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR tv935[rsp]
  014bf	f7 71 28	 div	 DWORD PTR [rcx+40]
  014c2	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR _he_newbkt$126980[rsp]
  014ca	89 41 0c	 mov	 DWORD PTR [rcx+12], eax
$LN34@PxPages_Ad:
  014cd	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR _he_thh$126977[rsp]
  014d5	48 c7 40 18 00
	00 00 00	 mov	 QWORD PTR [rax+24], 0
  014dd	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR _he_thh$126977[rsp]
  014e5	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR _he_newbkt$126980[rsp]
  014ed	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  014f0	48 89 48 20	 mov	 QWORD PTR [rax+32], rcx
  014f4	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR _he_newbkt$126980[rsp]
  014fc	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  01500	74 17		 je	 SHORT $LN33@PxPages_Ad
  01502	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR _he_newbkt$126980[rsp]
  0150a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0150d	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR _he_thh$126977[rsp]
  01515	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx
$LN33@PxPages_Ad:
  01519	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR _he_newbkt$126980[rsp]
  01521	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR _he_thh$126977[rsp]
  01529	48 89 08	 mov	 QWORD PTR [rax], rcx
  0152c	48 8b 44 24 78	 mov	 rax, QWORD PTR _he_hh_nxt$126978[rsp]
  01531	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR _he_thh$126977[rsp], rax
  01539	e9 9f fe ff ff	 jmp	 $LN39@PxPages_Ad
$LN38@PxPages_Ad:
  0153e	e9 4e fe ff ff	 jmp	 $LN41@PxPages_Ad
$LN40@PxPages_Ad:
  01543	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  01548	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0154c	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0154f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
  01555	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  0155a	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0155e	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  01561	d1 e0		 shl	 eax, 1
  01563	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  01568	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  0156c	89 41 08	 mov	 DWORD PTR [rcx+8], eax
  0156f	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  01574	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  01578	8b 40 0c	 mov	 eax, DWORD PTR [rax+12]
  0157b	ff c0		 inc	 eax
  0157d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  01582	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  01586	89 41 0c	 mov	 DWORD PTR [rcx+12], eax
  01589	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  0158e	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  01592	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR _he_new_buckets$126979[rsp]
  0159a	48 89 08	 mov	 QWORD PTR [rax], rcx
  0159d	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  015a2	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  015a6	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  015ab	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  015af	8b 49 10	 mov	 ecx, DWORD PTR [rcx+16]
  015b2	d1 e9		 shr	 ecx, 1
  015b4	39 48 2c	 cmp	 DWORD PTR [rax+44], ecx
  015b7	76 17		 jbe	 SHORT $LN138@PxPages_Ad
  015b9	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  015be	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  015c2	8b 40 30	 mov	 eax, DWORD PTR [rax+48]
  015c5	ff c0		 inc	 eax
  015c7	89 84 24 d8 00
	00 00		 mov	 DWORD PTR tv792[rsp], eax
  015ce	eb 0b		 jmp	 SHORT $LN139@PxPages_Ad
$LN138@PxPages_Ad:
  015d0	c7 84 24 d8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv792[rsp], 0
$LN139@PxPages_Ad:
  015db	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  015e0	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  015e4	8b 8c 24 d8 00
	00 00		 mov	 ecx, DWORD PTR tv792[rsp]
  015eb	89 48 30	 mov	 DWORD PTR [rax+48], ecx
  015ee	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  015f3	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  015f7	83 78 30 01	 cmp	 DWORD PTR [rax+48], 1
  015fb	76 10		 jbe	 SHORT $LN32@PxPages_Ad
  015fd	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  01602	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  01606	c7 40 34 01 00
	00 00		 mov	 DWORD PTR [rax+52], 1
$LN32@PxPages_Ad:
  0160d	33 c0		 xor	 eax, eax
  0160f	85 c0		 test	 eax, eax
  01611	0f 85 93 fc ff
	ff		 jne	 $LN46@PxPages_Ad
$LN47@PxPages_Ad:
  01617	33 c0		 xor	 eax, eax
  01619	85 c0		 test	 eax, eax
  0161b	0f 85 48 fb ff
	ff		 jne	 $LN51@PxPages_Ad
$LN31@PxPages_Ad:
  01621	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR pages$[rsp]
  01629	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0162d	0f 84 ea 03 00
	00		 je	 $LN28@PxPages_Ad
  01633	c7 84 24 a8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _count$127002[rsp], 0
  0163e	c7 84 24 b8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _bkt_i$127001[rsp], 0
  01649	eb 10		 jmp	 SHORT $LN27@PxPages_Ad
$LN26@PxPages_Ad:
  0164b	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR _bkt_i$127001[rsp]
  01652	ff c0		 inc	 eax
  01654	89 84 24 b8 00
	00 00		 mov	 DWORD PTR _bkt_i$127001[rsp], eax
$LN27@PxPages_Ad:
  0165b	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR pages$[rsp]
  01663	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01666	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0166a	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  0166d	39 84 24 b8 00
	00 00		 cmp	 DWORD PTR _bkt_i$127001[rsp], eax
  01674	0f 83 9a 01 00
	00		 jae	 $LN25@PxPages_Ad
  0167a	c7 84 24 ac 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _bkt_count$127003[rsp], 0
  01685	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR pages$[rsp]
  0168d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01690	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  01694	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR _bkt_i$127001[rsp]
  0169b	48 6b c9 10	 imul	 rcx, 16
  0169f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  016a2	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  016a6	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR _thh$127005[rsp], rax
  016ae	48 c7 84 24 b0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR _prev$127004[rsp], 0
$LN24@PxPages_Ad:
  016ba	48 83 bc 24 a0
	00 00 00 00	 cmp	 QWORD PTR _thh$127005[rsp], 0
  016c3	0f 84 8e 00 00
	00		 je	 $LN23@PxPages_Ad
  016c9	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR _thh$127005[rsp]
  016d1	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  016d5	48 39 84 24 b0
	00 00 00	 cmp	 QWORD PTR _prev$127004[rsp], rax
  016dd	74 3f		 je	 SHORT $LN22@PxPages_Ad
$LN21@PxPages_Ad:
  016df	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  016e5	48 83 c0 60	 add	 rax, 96			; 00000060H
  016e9	4c 8b 8c 24 b0
	00 00 00	 mov	 r9, QWORD PTR _prev$127004[rsp]
  016f1	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR _thh$127005[rsp]
  016f9	4c 8b 41 18	 mov	 r8, QWORD PTR [rcx+24]
  016fd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BP@DLILMHAM@invalid?5hh_prev?5?$CFp?0?5actual?5?$CFp?6?$AA@
  01704	48 8b c8	 mov	 rcx, rax
  01707	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fprintf
  0170d	b9 ff ff ff ff	 mov	 ecx, -1
  01712	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_exit
  01718	33 c0		 xor	 eax, eax
  0171a	85 c0		 test	 eax, eax
  0171c	75 c1		 jne	 SHORT $LN21@PxPages_Ad
$LN22@PxPages_Ad:
  0171e	8b 84 24 ac 00
	00 00		 mov	 eax, DWORD PTR _bkt_count$127003[rsp]
  01725	ff c0		 inc	 eax
  01727	89 84 24 ac 00
	00 00		 mov	 DWORD PTR _bkt_count$127003[rsp], eax
  0172e	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR _thh$127005[rsp]
  01736	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR _prev$127004[rsp], rax
  0173e	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR _thh$127005[rsp]
  01746	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0174a	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR _thh$127005[rsp], rax
  01752	e9 63 ff ff ff	 jmp	 $LN24@PxPages_Ad
$LN23@PxPages_Ad:
  01757	8b 84 24 ac 00
	00 00		 mov	 eax, DWORD PTR _bkt_count$127003[rsp]
  0175e	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR _count$127002[rsp]
  01765	03 c8		 add	 ecx, eax
  01767	8b c1		 mov	 eax, ecx
  01769	89 84 24 a8 00
	00 00		 mov	 DWORD PTR _count$127002[rsp], eax
  01770	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR pages$[rsp]
  01778	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0177b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0177f	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR _bkt_i$127001[rsp]
  01786	48 6b c9 10	 imul	 rcx, 16
  0178a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0178d	8b 94 24 ac 00
	00 00		 mov	 edx, DWORD PTR _bkt_count$127003[rsp]
  01794	39 54 08 08	 cmp	 DWORD PTR [rax+rcx+8], edx
  01798	74 75		 je	 SHORT $LN18@PxPages_Ad
$LN17@PxPages_Ad:
  0179a	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR pages$[rsp]
  017a2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  017a5	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  017a9	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR _bkt_i$127001[rsp]
  017b0	48 6b c9 10	 imul	 rcx, 16
  017b4	48 89 8c 24 e0
	00 00 00	 mov	 QWORD PTR tv837[rsp], rcx
  017bc	48 8b 00	 mov	 rax, QWORD PTR [rax]
  017bf	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR tv913[rsp], rax
  017c7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  017cd	48 83 c0 60	 add	 rax, 96			; 00000060H
  017d1	44 8b 8c 24 ac
	00 00 00	 mov	 r9d, DWORD PTR _bkt_count$127003[rsp]
  017d9	48 8b 94 24 e8
	00 00 00	 mov	 rdx, QWORD PTR tv913[rsp]
  017e1	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR tv837[rsp]
  017e9	44 8b 44 0a 08	 mov	 r8d, DWORD PTR [rdx+rcx+8]
  017ee	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@EEFPEMAF@invalid?5bucket?5count?5?$CFd?0?5actual?5@
  017f5	48 8b c8	 mov	 rcx, rax
  017f8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fprintf
  017fe	b9 ff ff ff ff	 mov	 ecx, -1
  01803	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_exit
  01809	33 c0		 xor	 eax, eax
  0180b	85 c0		 test	 eax, eax
  0180d	75 8b		 jne	 SHORT $LN17@PxPages_Ad
$LN18@PxPages_Ad:
  0180f	e9 37 fe ff ff	 jmp	 $LN26@PxPages_Ad
$LN25@PxPages_Ad:
  01814	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR pages$[rsp]
  0181c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0181f	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  01823	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
  01826	39 84 24 a8 00
	00 00		 cmp	 DWORD PTR _count$127002[rsp], eax
  0182d	74 56		 je	 SHORT $LN14@PxPages_Ad
$LN13@PxPages_Ad:
  0182f	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR pages$[rsp]
  01837	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0183a	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0183e	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR tv909[rsp], rax
  01846	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  0184c	48 83 c0 60	 add	 rax, 96			; 00000060H
  01850	44 8b 8c 24 a8
	00 00 00	 mov	 r9d, DWORD PTR _count$127002[rsp]
  01858	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR tv909[rsp]
  01860	44 8b 41 10	 mov	 r8d, DWORD PTR [rcx+16]
  01864	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CF@CNAMDMPB@invalid?5hh?5item?5count?5?$CFd?0?5actual@
  0186b	48 8b c8	 mov	 rcx, rax
  0186e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fprintf
  01874	b9 ff ff ff ff	 mov	 ecx, -1
  01879	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_exit
  0187f	33 c0		 xor	 eax, eax
  01881	85 c0		 test	 eax, eax
  01883	75 aa		 jne	 SHORT $LN13@PxPages_Ad
$LN14@PxPages_Ad:
  01885	c7 84 24 a8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _count$127002[rsp], 0
  01890	48 c7 84 24 b0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR _prev$127004[rsp], 0
  0189c	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR pages$[rsp]
  018a4	48 8b 00	 mov	 rax, QWORD PTR [rax]
  018a7	48 83 c0 20	 add	 rax, 32			; 00000020H
  018ab	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR _thh$127005[rsp], rax
$LN10@PxPages_Ad:
  018b3	48 83 bc 24 a0
	00 00 00 00	 cmp	 QWORD PTR _thh$127005[rsp], 0
  018bc	0f 84 ea 00 00
	00		 je	 $LN9@PxPages_Ad
  018c2	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR _count$127002[rsp]
  018c9	ff c0		 inc	 eax
  018cb	89 84 24 a8 00
	00 00		 mov	 DWORD PTR _count$127002[rsp], eax
  018d2	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR _thh$127005[rsp]
  018da	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  018de	48 39 84 24 b0
	00 00 00	 cmp	 QWORD PTR _prev$127004[rsp], rax
  018e6	74 3f		 je	 SHORT $LN8@PxPages_Ad
$LN7@PxPages_Ad:
  018e8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  018ee	48 83 c0 60	 add	 rax, 96			; 00000060H
  018f2	4c 8b 8c 24 b0
	00 00 00	 mov	 r9, QWORD PTR _prev$127004[rsp]
  018fa	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR _thh$127005[rsp]
  01902	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  01906	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@HCMMMIMF@invalid?5prev?5?$CFp?0?5actual?5?$CFp?6?$AA@
  0190d	48 8b c8	 mov	 rcx, rax
  01910	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fprintf
  01916	b9 ff ff ff ff	 mov	 ecx, -1
  0191b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_exit
  01921	33 c0		 xor	 eax, eax
  01923	85 c0		 test	 eax, eax
  01925	75 c1		 jne	 SHORT $LN7@PxPages_Ad
$LN8@PxPages_Ad:
  01927	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR pages$[rsp]
  0192f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01932	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  01936	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0193a	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR _thh$127005[rsp]
  01942	48 2b c8	 sub	 rcx, rax
  01945	48 8b c1	 mov	 rax, rcx
  01948	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR _prev$127004[rsp], rax
  01950	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR _thh$127005[rsp]
  01958	48 83 78 10 00	 cmp	 QWORD PTR [rax+16], 0
  0195d	74 2c		 je	 SHORT $LN140@PxPages_Ad
  0195f	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR pages$[rsp]
  01967	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0196a	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0196e	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR _thh$127005[rsp]
  01976	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  0197a	48 03 48 20	 add	 rcx, QWORD PTR [rax+32]
  0197e	48 8b c1	 mov	 rax, rcx
  01981	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR tv882[rsp], rax
  01989	eb 0c		 jmp	 SHORT $LN141@PxPages_Ad
$LN140@PxPages_Ad:
  0198b	48 c7 84 24 f8
	00 00 00 00 00
	00 00		 mov	 QWORD PTR tv882[rsp], 0
$LN141@PxPages_Ad:
  01997	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR tv882[rsp]
  0199f	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR _thh$127005[rsp], rax
  019a7	e9 07 ff ff ff	 jmp	 $LN10@PxPages_Ad
$LN9@PxPages_Ad:
  019ac	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR pages$[rsp]
  019b4	48 8b 00	 mov	 rax, QWORD PTR [rax]
  019b7	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  019bb	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
  019be	39 84 24 a8 00
	00 00		 cmp	 DWORD PTR _count$127002[rsp], eax
  019c5	74 56		 je	 SHORT $LN4@PxPages_Ad
$LN3@PxPages_Ad:
  019c7	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR pages$[rsp]
  019cf	48 8b 00	 mov	 rax, QWORD PTR [rax]
  019d2	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  019d6	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR tv898[rsp], rax
  019de	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  019e4	48 83 c0 60	 add	 rax, 96			; 00000060H
  019e8	44 8b 8c 24 a8
	00 00 00	 mov	 r9d, DWORD PTR _count$127002[rsp]
  019f0	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR tv898[rsp]
  019f8	44 8b 41 10	 mov	 r8d, DWORD PTR [rcx+16]
  019fc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@KALHPGEP@invalid?5app?5item?5count?5?$CFd?0?5actua@
  01a03	48 8b c8	 mov	 rcx, rax
  01a06	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fprintf
  01a0c	b9 ff ff ff ff	 mov	 ecx, -1
  01a11	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_exit
  01a17	33 c0		 xor	 eax, eax
  01a19	85 c0		 test	 eax, eax
  01a1b	75 aa		 jne	 SHORT $LN3@PxPages_Ad
$LN4@PxPages_Ad:
$LN28@PxPages_Ad:
  01a1d	33 c0		 xor	 eax, eax
  01a1f	85 c0		 test	 eax, eax
  01a21	0f 85 fa fb ff
	ff		 jne	 $LN31@PxPages_Ad
  01a27	33 c0		 xor	 eax, eax
  01a29	85 c0		 test	 eax, eax
  01a2b	0f 85 d9 ed ff
	ff		 jne	 $LN85@PxPages_Ad
$LN86@PxPages_Ad:
$LN135@PxPages_Ad:

; 1355 :     }
; 1356 : }

  01a31	48 81 c4 18 01
	00 00		 add	 rsp, 280		; 00000118H
  01a38	c3		 ret	 0
  01a39	0f 1f 00	 npad	 3
$LN143@PxPages_Ad:
  01a3c	00 00 00 00	 DD	 $LN109@PxPages_Ad
  01a40	00 00 00 00	 DD	 $LN110@PxPages_Ad
  01a44	00 00 00 00	 DD	 $LN111@PxPages_Ad
  01a48	00 00 00 00	 DD	 $LN112@PxPages_Ad
  01a4c	00 00 00 00	 DD	 $LN113@PxPages_Ad
  01a50	00 00 00 00	 DD	 $LN114@PxPages_Ad
  01a54	00 00 00 00	 DD	 $LN115@PxPages_Ad
  01a58	00 00 00 00	 DD	 $LN116@PxPages_Ad
  01a5c	00 00 00 00	 DD	 $LN117@PxPages_Ad
  01a60	00 00 00 00	 DD	 $LN118@PxPages_Ad
  01a64	00 00 00 00	 DD	 $LN119@PxPages_Ad
$LN142@PxPages_Ad:
  01a68	00 00 00 00	 DD	 $LN55@PxPages_Ad
  01a6c	00 00 00 00	 DD	 $LN56@PxPages_Ad
  01a70	00 00 00 00	 DD	 $LN57@PxPages_Ad
  01a74	00 00 00 00	 DD	 $LN58@PxPages_Ad
  01a78	00 00 00 00	 DD	 $LN59@PxPages_Ad
  01a7c	00 00 00 00	 DD	 $LN60@PxPages_Ad
  01a80	00 00 00 00	 DD	 $LN61@PxPages_Ad
  01a84	00 00 00 00	 DD	 $LN62@PxPages_Ad
  01a88	00 00 00 00	 DD	 $LN63@PxPages_Ad
  01a8c	00 00 00 00	 DD	 $LN64@PxPages_Ad
  01a90	00 00 00 00	 DD	 $LN65@PxPages_Ad
_PxPages_AddHeapPage ENDP
_TEXT	ENDS
PUBLIC	??_C@_1CC@GCAKPFE@?$AAx?$AA?9?$AA?$DO?$AAh?$AAe?$AAa?$AAp?$AAs?$AA?$FL?$AA1?$AA?$FN?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAh?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CC@KIEIDOMF@?$AAx?$AA?9?$AA?$DO?$AAh?$AAe?$AAa?$AAp?$AAs?$AA?$FL?$AA0?$AA?$FN?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAh?$AA?$AA@ ; `string'
PUBLIC	??_C@_13HADAKIJA@?$AAx?$AA?$AA@			; `string'
PUBLIC	_PxPages_RemoveHeapPage
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PxPages_RemoveHeapPage DD imagerel $LN110
	DD	imagerel $LN110+3844
	DD	imagerel $unwind$_PxPages_RemoveHeapPage
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PxPages_RemoveHeapPage DD 021601H
	DD	0190116H
xdata	ENDS
;	COMDAT ??_C@_1CC@GCAKPFE@?$AAx?$AA?9?$AA?$DO?$AAh?$AAe?$AAa?$AAp?$AAs?$AA?$FL?$AA1?$AA?$FN?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAh?$AA?$AA@
CONST	SEGMENT
??_C@_1CC@GCAKPFE@?$AAx?$AA?9?$AA?$DO?$AAh?$AAe?$AAa?$AAp?$AAs?$AA?$FL?$AA1?$AA?$FN?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAh?$AA?$AA@ DB 'x'
	DB	00H, '-', 00H, '>', 00H, 'h', 00H, 'e', 00H, 'a', 00H, 'p', 00H
	DB	's', 00H, '[', 00H, '1', 00H, ']', 00H, ' ', 00H, '=', 00H, '='
	DB	00H, ' ', 00H, 'h', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1CC@KIEIDOMF@?$AAx?$AA?9?$AA?$DO?$AAh?$AAe?$AAa?$AAp?$AAs?$AA?$FL?$AA0?$AA?$FN?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAh?$AA?$AA@
CONST	SEGMENT
??_C@_1CC@KIEIDOMF@?$AAx?$AA?9?$AA?$DO?$AAh?$AAe?$AAa?$AAp?$AAs?$AA?$FL?$AA0?$AA?$FN?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAh?$AA?$AA@ DB 'x'
	DB	00H, '-', 00H, '>', 00H, 'h', 00H, 'e', 00H, 'a', 00H, 'p', 00H
	DB	's', 00H, '[', 00H, '0', 00H, ']', 00H, ' ', 00H, '=', 00H, '='
	DB	00H, ' ', 00H, 'h', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_13HADAKIJA@?$AAx?$AA?$AA@
CONST	SEGMENT
??_C@_13HADAKIJA@?$AAx?$AA?$AA@ DB 'x', 00H, 00H, 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PxPages_RemoveHeapPage
_TEXT	SEGMENT
x$ = 32
_hf_bkt$127064 = 40
_hf_hashv$127065 = 44
_hj_k$127073 = 48
_hj_key$127074 = 56
_hj_i$127071 = 64
_hj_j$127072 = 68
_da_dst$127129 = 72
_da_dst$127147 = 80
_hd_hh_del$127163 = 88
_hd_bkt$127162 = 96
_da_dst$127181 = 104
_thh$127200 = 112
_count$127197 = 120
_bkt_count$127198 = 124
_prev$127199 = 128
_bkt_i$127196 = 136
tv184 = 140
tv451 = 144
tv555 = 152
tv551 = 160
tv496 = 168
tv540 = 176
pages$ = 208
value$ = 216
h$ = 224
_PxPages_RemoveHeapPage PROC				; COMDAT

; 1360 : {

$LN110:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H
$LN99@PxPages_Re:

; 1361 :     PxPages *x;
; 1362 :     HASH_FIND_INT(*pages, value, x);

  00016	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR x$[rsp], 0
  0001f	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR pages$[rsp]
  00027	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0002b	0f 84 4f 07 00
	00		 je	 $LN96@PxPages_Re
$LN95@PxPages_Re:
  00031	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR value$[rsp]
  00039	48 89 44 24 38	 mov	 QWORD PTR _hj_key$127074[rsp], rax
  0003e	c7 44 24 2c ef
	be ed fe	 mov	 DWORD PTR _hf_hashv$127065[rsp], -17973521 ; feedbeefH
  00046	c7 44 24 44 b9
	79 37 9e	 mov	 DWORD PTR _hj_j$127072[rsp], -1640531527 ; 9e3779b9H
  0004e	8b 44 24 44	 mov	 eax, DWORD PTR _hj_j$127072[rsp]
  00052	89 44 24 40	 mov	 DWORD PTR _hj_i$127071[rsp], eax
  00056	c7 44 24 30 04
	00 00 00	 mov	 DWORD PTR _hj_k$127073[rsp], 4
$LN92@PxPages_Re:
  0005e	83 7c 24 30 0c	 cmp	 DWORD PTR _hj_k$127073[rsp], 12
  00063	0f 82 a9 02 00
	00		 jb	 $LN91@PxPages_Re
  00069	48 8b 44 24 38	 mov	 rax, QWORD PTR _hj_key$127074[rsp]
  0006e	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00071	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _hj_key$127074[rsp]
  00076	0f be 49 01	 movsx	 ecx, BYTE PTR [rcx+1]
  0007a	c1 e1 08	 shl	 ecx, 8
  0007d	03 c1		 add	 eax, ecx
  0007f	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _hj_key$127074[rsp]
  00084	0f be 49 02	 movsx	 ecx, BYTE PTR [rcx+2]
  00088	c1 e1 10	 shl	 ecx, 16
  0008b	03 c1		 add	 eax, ecx
  0008d	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _hj_key$127074[rsp]
  00092	0f be 49 03	 movsx	 ecx, BYTE PTR [rcx+3]
  00096	c1 e1 18	 shl	 ecx, 24
  00099	03 4c 24 40	 add	 ecx, DWORD PTR _hj_i$127071[rsp]
  0009d	03 c8		 add	 ecx, eax
  0009f	8b c1		 mov	 eax, ecx
  000a1	89 44 24 40	 mov	 DWORD PTR _hj_i$127071[rsp], eax
  000a5	48 8b 44 24 38	 mov	 rax, QWORD PTR _hj_key$127074[rsp]
  000aa	0f be 40 04	 movsx	 eax, BYTE PTR [rax+4]
  000ae	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _hj_key$127074[rsp]
  000b3	0f be 49 05	 movsx	 ecx, BYTE PTR [rcx+5]
  000b7	c1 e1 08	 shl	 ecx, 8
  000ba	03 c1		 add	 eax, ecx
  000bc	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _hj_key$127074[rsp]
  000c1	0f be 49 06	 movsx	 ecx, BYTE PTR [rcx+6]
  000c5	c1 e1 10	 shl	 ecx, 16
  000c8	03 c1		 add	 eax, ecx
  000ca	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _hj_key$127074[rsp]
  000cf	0f be 49 07	 movsx	 ecx, BYTE PTR [rcx+7]
  000d3	c1 e1 18	 shl	 ecx, 24
  000d6	03 4c 24 44	 add	 ecx, DWORD PTR _hj_j$127072[rsp]
  000da	03 c8		 add	 ecx, eax
  000dc	8b c1		 mov	 eax, ecx
  000de	89 44 24 44	 mov	 DWORD PTR _hj_j$127072[rsp], eax
  000e2	48 8b 44 24 38	 mov	 rax, QWORD PTR _hj_key$127074[rsp]
  000e7	0f be 40 08	 movsx	 eax, BYTE PTR [rax+8]
  000eb	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _hj_key$127074[rsp]
  000f0	0f be 49 09	 movsx	 ecx, BYTE PTR [rcx+9]
  000f4	c1 e1 08	 shl	 ecx, 8
  000f7	03 c1		 add	 eax, ecx
  000f9	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _hj_key$127074[rsp]
  000fe	0f be 49 0a	 movsx	 ecx, BYTE PTR [rcx+10]
  00102	c1 e1 10	 shl	 ecx, 16
  00105	03 c1		 add	 eax, ecx
  00107	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _hj_key$127074[rsp]
  0010c	0f be 49 0b	 movsx	 ecx, BYTE PTR [rcx+11]
  00110	c1 e1 18	 shl	 ecx, 24
  00113	03 4c 24 2c	 add	 ecx, DWORD PTR _hf_hashv$127065[rsp]
  00117	03 c8		 add	 ecx, eax
  00119	8b c1		 mov	 eax, ecx
  0011b	89 44 24 2c	 mov	 DWORD PTR _hf_hashv$127065[rsp], eax
$LN90@PxPages_Re:
  0011f	8b 44 24 44	 mov	 eax, DWORD PTR _hj_j$127072[rsp]
  00123	8b 4c 24 40	 mov	 ecx, DWORD PTR _hj_i$127071[rsp]
  00127	2b c8		 sub	 ecx, eax
  00129	8b c1		 mov	 eax, ecx
  0012b	89 44 24 40	 mov	 DWORD PTR _hj_i$127071[rsp], eax
  0012f	8b 44 24 2c	 mov	 eax, DWORD PTR _hf_hashv$127065[rsp]
  00133	8b 4c 24 40	 mov	 ecx, DWORD PTR _hj_i$127071[rsp]
  00137	2b c8		 sub	 ecx, eax
  00139	8b c1		 mov	 eax, ecx
  0013b	89 44 24 40	 mov	 DWORD PTR _hj_i$127071[rsp], eax
  0013f	8b 44 24 2c	 mov	 eax, DWORD PTR _hf_hashv$127065[rsp]
  00143	c1 e8 0d	 shr	 eax, 13
  00146	8b 4c 24 40	 mov	 ecx, DWORD PTR _hj_i$127071[rsp]
  0014a	33 c8		 xor	 ecx, eax
  0014c	8b c1		 mov	 eax, ecx
  0014e	89 44 24 40	 mov	 DWORD PTR _hj_i$127071[rsp], eax
  00152	8b 44 24 2c	 mov	 eax, DWORD PTR _hf_hashv$127065[rsp]
  00156	8b 4c 24 44	 mov	 ecx, DWORD PTR _hj_j$127072[rsp]
  0015a	2b c8		 sub	 ecx, eax
  0015c	8b c1		 mov	 eax, ecx
  0015e	89 44 24 44	 mov	 DWORD PTR _hj_j$127072[rsp], eax
  00162	8b 44 24 40	 mov	 eax, DWORD PTR _hj_i$127071[rsp]
  00166	8b 4c 24 44	 mov	 ecx, DWORD PTR _hj_j$127072[rsp]
  0016a	2b c8		 sub	 ecx, eax
  0016c	8b c1		 mov	 eax, ecx
  0016e	89 44 24 44	 mov	 DWORD PTR _hj_j$127072[rsp], eax
  00172	8b 44 24 40	 mov	 eax, DWORD PTR _hj_i$127071[rsp]
  00176	c1 e0 08	 shl	 eax, 8
  00179	8b 4c 24 44	 mov	 ecx, DWORD PTR _hj_j$127072[rsp]
  0017d	33 c8		 xor	 ecx, eax
  0017f	8b c1		 mov	 eax, ecx
  00181	89 44 24 44	 mov	 DWORD PTR _hj_j$127072[rsp], eax
  00185	8b 44 24 40	 mov	 eax, DWORD PTR _hj_i$127071[rsp]
  00189	8b 4c 24 2c	 mov	 ecx, DWORD PTR _hf_hashv$127065[rsp]
  0018d	2b c8		 sub	 ecx, eax
  0018f	8b c1		 mov	 eax, ecx
  00191	89 44 24 2c	 mov	 DWORD PTR _hf_hashv$127065[rsp], eax
  00195	8b 44 24 44	 mov	 eax, DWORD PTR _hj_j$127072[rsp]
  00199	8b 4c 24 2c	 mov	 ecx, DWORD PTR _hf_hashv$127065[rsp]
  0019d	2b c8		 sub	 ecx, eax
  0019f	8b c1		 mov	 eax, ecx
  001a1	89 44 24 2c	 mov	 DWORD PTR _hf_hashv$127065[rsp], eax
  001a5	8b 44 24 44	 mov	 eax, DWORD PTR _hj_j$127072[rsp]
  001a9	c1 e8 0d	 shr	 eax, 13
  001ac	8b 4c 24 2c	 mov	 ecx, DWORD PTR _hf_hashv$127065[rsp]
  001b0	33 c8		 xor	 ecx, eax
  001b2	8b c1		 mov	 eax, ecx
  001b4	89 44 24 2c	 mov	 DWORD PTR _hf_hashv$127065[rsp], eax
  001b8	8b 44 24 44	 mov	 eax, DWORD PTR _hj_j$127072[rsp]
  001bc	8b 4c 24 40	 mov	 ecx, DWORD PTR _hj_i$127071[rsp]
  001c0	2b c8		 sub	 ecx, eax
  001c2	8b c1		 mov	 eax, ecx
  001c4	89 44 24 40	 mov	 DWORD PTR _hj_i$127071[rsp], eax
  001c8	8b 44 24 2c	 mov	 eax, DWORD PTR _hf_hashv$127065[rsp]
  001cc	8b 4c 24 40	 mov	 ecx, DWORD PTR _hj_i$127071[rsp]
  001d0	2b c8		 sub	 ecx, eax
  001d2	8b c1		 mov	 eax, ecx
  001d4	89 44 24 40	 mov	 DWORD PTR _hj_i$127071[rsp], eax
  001d8	8b 44 24 2c	 mov	 eax, DWORD PTR _hf_hashv$127065[rsp]
  001dc	c1 e8 0c	 shr	 eax, 12
  001df	8b 4c 24 40	 mov	 ecx, DWORD PTR _hj_i$127071[rsp]
  001e3	33 c8		 xor	 ecx, eax
  001e5	8b c1		 mov	 eax, ecx
  001e7	89 44 24 40	 mov	 DWORD PTR _hj_i$127071[rsp], eax
  001eb	8b 44 24 2c	 mov	 eax, DWORD PTR _hf_hashv$127065[rsp]
  001ef	8b 4c 24 44	 mov	 ecx, DWORD PTR _hj_j$127072[rsp]
  001f3	2b c8		 sub	 ecx, eax
  001f5	8b c1		 mov	 eax, ecx
  001f7	89 44 24 44	 mov	 DWORD PTR _hj_j$127072[rsp], eax
  001fb	8b 44 24 40	 mov	 eax, DWORD PTR _hj_i$127071[rsp]
  001ff	8b 4c 24 44	 mov	 ecx, DWORD PTR _hj_j$127072[rsp]
  00203	2b c8		 sub	 ecx, eax
  00205	8b c1		 mov	 eax, ecx
  00207	89 44 24 44	 mov	 DWORD PTR _hj_j$127072[rsp], eax
  0020b	8b 44 24 40	 mov	 eax, DWORD PTR _hj_i$127071[rsp]
  0020f	c1 e0 10	 shl	 eax, 16
  00212	8b 4c 24 44	 mov	 ecx, DWORD PTR _hj_j$127072[rsp]
  00216	33 c8		 xor	 ecx, eax
  00218	8b c1		 mov	 eax, ecx
  0021a	89 44 24 44	 mov	 DWORD PTR _hj_j$127072[rsp], eax
  0021e	8b 44 24 40	 mov	 eax, DWORD PTR _hj_i$127071[rsp]
  00222	8b 4c 24 2c	 mov	 ecx, DWORD PTR _hf_hashv$127065[rsp]
  00226	2b c8		 sub	 ecx, eax
  00228	8b c1		 mov	 eax, ecx
  0022a	89 44 24 2c	 mov	 DWORD PTR _hf_hashv$127065[rsp], eax
  0022e	8b 44 24 44	 mov	 eax, DWORD PTR _hj_j$127072[rsp]
  00232	8b 4c 24 2c	 mov	 ecx, DWORD PTR _hf_hashv$127065[rsp]
  00236	2b c8		 sub	 ecx, eax
  00238	8b c1		 mov	 eax, ecx
  0023a	89 44 24 2c	 mov	 DWORD PTR _hf_hashv$127065[rsp], eax
  0023e	8b 44 24 44	 mov	 eax, DWORD PTR _hj_j$127072[rsp]
  00242	c1 e8 05	 shr	 eax, 5
  00245	8b 4c 24 2c	 mov	 ecx, DWORD PTR _hf_hashv$127065[rsp]
  00249	33 c8		 xor	 ecx, eax
  0024b	8b c1		 mov	 eax, ecx
  0024d	89 44 24 2c	 mov	 DWORD PTR _hf_hashv$127065[rsp], eax
  00251	8b 44 24 44	 mov	 eax, DWORD PTR _hj_j$127072[rsp]
  00255	8b 4c 24 40	 mov	 ecx, DWORD PTR _hj_i$127071[rsp]
  00259	2b c8		 sub	 ecx, eax
  0025b	8b c1		 mov	 eax, ecx
  0025d	89 44 24 40	 mov	 DWORD PTR _hj_i$127071[rsp], eax
  00261	8b 44 24 2c	 mov	 eax, DWORD PTR _hf_hashv$127065[rsp]
  00265	8b 4c 24 40	 mov	 ecx, DWORD PTR _hj_i$127071[rsp]
  00269	2b c8		 sub	 ecx, eax
  0026b	8b c1		 mov	 eax, ecx
  0026d	89 44 24 40	 mov	 DWORD PTR _hj_i$127071[rsp], eax
  00271	8b 44 24 2c	 mov	 eax, DWORD PTR _hf_hashv$127065[rsp]
  00275	c1 e8 03	 shr	 eax, 3
  00278	8b 4c 24 40	 mov	 ecx, DWORD PTR _hj_i$127071[rsp]
  0027c	33 c8		 xor	 ecx, eax
  0027e	8b c1		 mov	 eax, ecx
  00280	89 44 24 40	 mov	 DWORD PTR _hj_i$127071[rsp], eax
  00284	8b 44 24 2c	 mov	 eax, DWORD PTR _hf_hashv$127065[rsp]
  00288	8b 4c 24 44	 mov	 ecx, DWORD PTR _hj_j$127072[rsp]
  0028c	2b c8		 sub	 ecx, eax
  0028e	8b c1		 mov	 eax, ecx
  00290	89 44 24 44	 mov	 DWORD PTR _hj_j$127072[rsp], eax
  00294	8b 44 24 40	 mov	 eax, DWORD PTR _hj_i$127071[rsp]
  00298	8b 4c 24 44	 mov	 ecx, DWORD PTR _hj_j$127072[rsp]
  0029c	2b c8		 sub	 ecx, eax
  0029e	8b c1		 mov	 eax, ecx
  002a0	89 44 24 44	 mov	 DWORD PTR _hj_j$127072[rsp], eax
  002a4	8b 44 24 40	 mov	 eax, DWORD PTR _hj_i$127071[rsp]
  002a8	c1 e0 0a	 shl	 eax, 10
  002ab	8b 4c 24 44	 mov	 ecx, DWORD PTR _hj_j$127072[rsp]
  002af	33 c8		 xor	 ecx, eax
  002b1	8b c1		 mov	 eax, ecx
  002b3	89 44 24 44	 mov	 DWORD PTR _hj_j$127072[rsp], eax
  002b7	8b 44 24 40	 mov	 eax, DWORD PTR _hj_i$127071[rsp]
  002bb	8b 4c 24 2c	 mov	 ecx, DWORD PTR _hf_hashv$127065[rsp]
  002bf	2b c8		 sub	 ecx, eax
  002c1	8b c1		 mov	 eax, ecx
  002c3	89 44 24 2c	 mov	 DWORD PTR _hf_hashv$127065[rsp], eax
  002c7	8b 44 24 44	 mov	 eax, DWORD PTR _hj_j$127072[rsp]
  002cb	8b 4c 24 2c	 mov	 ecx, DWORD PTR _hf_hashv$127065[rsp]
  002cf	2b c8		 sub	 ecx, eax
  002d1	8b c1		 mov	 eax, ecx
  002d3	89 44 24 2c	 mov	 DWORD PTR _hf_hashv$127065[rsp], eax
  002d7	8b 44 24 44	 mov	 eax, DWORD PTR _hj_j$127072[rsp]
  002db	c1 e8 0f	 shr	 eax, 15
  002de	8b 4c 24 2c	 mov	 ecx, DWORD PTR _hf_hashv$127065[rsp]
  002e2	33 c8		 xor	 ecx, eax
  002e4	8b c1		 mov	 eax, ecx
  002e6	89 44 24 2c	 mov	 DWORD PTR _hf_hashv$127065[rsp], eax
  002ea	33 c0		 xor	 eax, eax
  002ec	85 c0		 test	 eax, eax
  002ee	0f 85 2b fe ff
	ff		 jne	 $LN90@PxPages_Re
  002f4	48 8b 44 24 38	 mov	 rax, QWORD PTR _hj_key$127074[rsp]
  002f9	48 83 c0 0c	 add	 rax, 12
  002fd	48 89 44 24 38	 mov	 QWORD PTR _hj_key$127074[rsp], rax
  00302	8b 44 24 30	 mov	 eax, DWORD PTR _hj_k$127073[rsp]
  00306	83 e8 0c	 sub	 eax, 12
  00309	89 44 24 30	 mov	 DWORD PTR _hj_k$127073[rsp], eax
  0030d	e9 4c fd ff ff	 jmp	 $LN92@PxPages_Re
$LN91@PxPages_Re:
  00312	8b 44 24 2c	 mov	 eax, DWORD PTR _hf_hashv$127065[rsp]
  00316	48 83 c0 04	 add	 rax, 4
  0031a	89 44 24 2c	 mov	 DWORD PTR _hf_hashv$127065[rsp], eax
  0031e	8b 44 24 30	 mov	 eax, DWORD PTR _hj_k$127073[rsp]
  00322	89 84 24 8c 00
	00 00		 mov	 DWORD PTR tv184[rsp], eax
  00329	8b 84 24 8c 00
	00 00		 mov	 eax, DWORD PTR tv184[rsp]
  00330	ff c8		 dec	 eax
  00332	89 84 24 8c 00
	00 00		 mov	 DWORD PTR tv184[rsp], eax
  00339	83 bc 24 8c 00
	00 00 0a	 cmp	 DWORD PTR tv184[rsp], 10
  00341	0f 87 1b 01 00
	00		 ja	 $LN86@PxPages_Re
  00347	8b 84 24 8c 00
	00 00		 mov	 eax, DWORD PTR tv184[rsp]
  0034e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  00355	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN109@PxPages_Re[rcx+rax*4]
  0035c	48 03 c1	 add	 rax, rcx
  0035f	ff e0		 jmp	 rax
$LN85@PxPages_Re:
  00361	48 8b 44 24 38	 mov	 rax, QWORD PTR _hj_key$127074[rsp]
  00366	0f be 40 0a	 movsx	 eax, BYTE PTR [rax+10]
  0036a	c1 e0 18	 shl	 eax, 24
  0036d	8b 4c 24 2c	 mov	 ecx, DWORD PTR _hf_hashv$127065[rsp]
  00371	03 c8		 add	 ecx, eax
  00373	8b c1		 mov	 eax, ecx
  00375	89 44 24 2c	 mov	 DWORD PTR _hf_hashv$127065[rsp], eax
$LN84@PxPages_Re:
  00379	48 8b 44 24 38	 mov	 rax, QWORD PTR _hj_key$127074[rsp]
  0037e	0f be 40 09	 movsx	 eax, BYTE PTR [rax+9]
  00382	c1 e0 10	 shl	 eax, 16
  00385	8b 4c 24 2c	 mov	 ecx, DWORD PTR _hf_hashv$127065[rsp]
  00389	03 c8		 add	 ecx, eax
  0038b	8b c1		 mov	 eax, ecx
  0038d	89 44 24 2c	 mov	 DWORD PTR _hf_hashv$127065[rsp], eax
$LN83@PxPages_Re:
  00391	48 8b 44 24 38	 mov	 rax, QWORD PTR _hj_key$127074[rsp]
  00396	0f be 40 08	 movsx	 eax, BYTE PTR [rax+8]
  0039a	c1 e0 08	 shl	 eax, 8
  0039d	8b 4c 24 2c	 mov	 ecx, DWORD PTR _hf_hashv$127065[rsp]
  003a1	03 c8		 add	 ecx, eax
  003a3	8b c1		 mov	 eax, ecx
  003a5	89 44 24 2c	 mov	 DWORD PTR _hf_hashv$127065[rsp], eax
$LN82@PxPages_Re:
  003a9	48 8b 44 24 38	 mov	 rax, QWORD PTR _hj_key$127074[rsp]
  003ae	0f be 40 07	 movsx	 eax, BYTE PTR [rax+7]
  003b2	c1 e0 18	 shl	 eax, 24
  003b5	8b 4c 24 44	 mov	 ecx, DWORD PTR _hj_j$127072[rsp]
  003b9	03 c8		 add	 ecx, eax
  003bb	8b c1		 mov	 eax, ecx
  003bd	89 44 24 44	 mov	 DWORD PTR _hj_j$127072[rsp], eax
$LN81@PxPages_Re:
  003c1	48 8b 44 24 38	 mov	 rax, QWORD PTR _hj_key$127074[rsp]
  003c6	0f be 40 06	 movsx	 eax, BYTE PTR [rax+6]
  003ca	c1 e0 10	 shl	 eax, 16
  003cd	8b 4c 24 44	 mov	 ecx, DWORD PTR _hj_j$127072[rsp]
  003d1	03 c8		 add	 ecx, eax
  003d3	8b c1		 mov	 eax, ecx
  003d5	89 44 24 44	 mov	 DWORD PTR _hj_j$127072[rsp], eax
$LN80@PxPages_Re:
  003d9	48 8b 44 24 38	 mov	 rax, QWORD PTR _hj_key$127074[rsp]
  003de	0f be 40 05	 movsx	 eax, BYTE PTR [rax+5]
  003e2	c1 e0 08	 shl	 eax, 8
  003e5	8b 4c 24 44	 mov	 ecx, DWORD PTR _hj_j$127072[rsp]
  003e9	03 c8		 add	 ecx, eax
  003eb	8b c1		 mov	 eax, ecx
  003ed	89 44 24 44	 mov	 DWORD PTR _hj_j$127072[rsp], eax
$LN79@PxPages_Re:
  003f1	48 8b 44 24 38	 mov	 rax, QWORD PTR _hj_key$127074[rsp]
  003f6	0f be 40 04	 movsx	 eax, BYTE PTR [rax+4]
  003fa	8b 4c 24 44	 mov	 ecx, DWORD PTR _hj_j$127072[rsp]
  003fe	03 c8		 add	 ecx, eax
  00400	8b c1		 mov	 eax, ecx
  00402	89 44 24 44	 mov	 DWORD PTR _hj_j$127072[rsp], eax
$LN78@PxPages_Re:
  00406	48 8b 44 24 38	 mov	 rax, QWORD PTR _hj_key$127074[rsp]
  0040b	0f be 40 03	 movsx	 eax, BYTE PTR [rax+3]
  0040f	c1 e0 18	 shl	 eax, 24
  00412	8b 4c 24 40	 mov	 ecx, DWORD PTR _hj_i$127071[rsp]
  00416	03 c8		 add	 ecx, eax
  00418	8b c1		 mov	 eax, ecx
  0041a	89 44 24 40	 mov	 DWORD PTR _hj_i$127071[rsp], eax
$LN77@PxPages_Re:
  0041e	48 8b 44 24 38	 mov	 rax, QWORD PTR _hj_key$127074[rsp]
  00423	0f be 40 02	 movsx	 eax, BYTE PTR [rax+2]
  00427	c1 e0 10	 shl	 eax, 16
  0042a	8b 4c 24 40	 mov	 ecx, DWORD PTR _hj_i$127071[rsp]
  0042e	03 c8		 add	 ecx, eax
  00430	8b c1		 mov	 eax, ecx
  00432	89 44 24 40	 mov	 DWORD PTR _hj_i$127071[rsp], eax
$LN76@PxPages_Re:
  00436	48 8b 44 24 38	 mov	 rax, QWORD PTR _hj_key$127074[rsp]
  0043b	0f be 40 01	 movsx	 eax, BYTE PTR [rax+1]
  0043f	c1 e0 08	 shl	 eax, 8
  00442	8b 4c 24 40	 mov	 ecx, DWORD PTR _hj_i$127071[rsp]
  00446	03 c8		 add	 ecx, eax
  00448	8b c1		 mov	 eax, ecx
  0044a	89 44 24 40	 mov	 DWORD PTR _hj_i$127071[rsp], eax
$LN75@PxPages_Re:
  0044e	48 8b 44 24 38	 mov	 rax, QWORD PTR _hj_key$127074[rsp]
  00453	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00456	8b 4c 24 40	 mov	 ecx, DWORD PTR _hj_i$127071[rsp]
  0045a	03 c8		 add	 ecx, eax
  0045c	8b c1		 mov	 eax, ecx
  0045e	89 44 24 40	 mov	 DWORD PTR _hj_i$127071[rsp], eax
$LN86@PxPages_Re:
$LN74@PxPages_Re:
  00462	8b 44 24 44	 mov	 eax, DWORD PTR _hj_j$127072[rsp]
  00466	8b 4c 24 40	 mov	 ecx, DWORD PTR _hj_i$127071[rsp]
  0046a	2b c8		 sub	 ecx, eax
  0046c	8b c1		 mov	 eax, ecx
  0046e	89 44 24 40	 mov	 DWORD PTR _hj_i$127071[rsp], eax
  00472	8b 44 24 2c	 mov	 eax, DWORD PTR _hf_hashv$127065[rsp]
  00476	8b 4c 24 40	 mov	 ecx, DWORD PTR _hj_i$127071[rsp]
  0047a	2b c8		 sub	 ecx, eax
  0047c	8b c1		 mov	 eax, ecx
  0047e	89 44 24 40	 mov	 DWORD PTR _hj_i$127071[rsp], eax
  00482	8b 44 24 2c	 mov	 eax, DWORD PTR _hf_hashv$127065[rsp]
  00486	c1 e8 0d	 shr	 eax, 13
  00489	8b 4c 24 40	 mov	 ecx, DWORD PTR _hj_i$127071[rsp]
  0048d	33 c8		 xor	 ecx, eax
  0048f	8b c1		 mov	 eax, ecx
  00491	89 44 24 40	 mov	 DWORD PTR _hj_i$127071[rsp], eax
  00495	8b 44 24 2c	 mov	 eax, DWORD PTR _hf_hashv$127065[rsp]
  00499	8b 4c 24 44	 mov	 ecx, DWORD PTR _hj_j$127072[rsp]
  0049d	2b c8		 sub	 ecx, eax
  0049f	8b c1		 mov	 eax, ecx
  004a1	89 44 24 44	 mov	 DWORD PTR _hj_j$127072[rsp], eax
  004a5	8b 44 24 40	 mov	 eax, DWORD PTR _hj_i$127071[rsp]
  004a9	8b 4c 24 44	 mov	 ecx, DWORD PTR _hj_j$127072[rsp]
  004ad	2b c8		 sub	 ecx, eax
  004af	8b c1		 mov	 eax, ecx
  004b1	89 44 24 44	 mov	 DWORD PTR _hj_j$127072[rsp], eax
  004b5	8b 44 24 40	 mov	 eax, DWORD PTR _hj_i$127071[rsp]
  004b9	c1 e0 08	 shl	 eax, 8
  004bc	8b 4c 24 44	 mov	 ecx, DWORD PTR _hj_j$127072[rsp]
  004c0	33 c8		 xor	 ecx, eax
  004c2	8b c1		 mov	 eax, ecx
  004c4	89 44 24 44	 mov	 DWORD PTR _hj_j$127072[rsp], eax
  004c8	8b 44 24 40	 mov	 eax, DWORD PTR _hj_i$127071[rsp]
  004cc	8b 4c 24 2c	 mov	 ecx, DWORD PTR _hf_hashv$127065[rsp]
  004d0	2b c8		 sub	 ecx, eax
  004d2	8b c1		 mov	 eax, ecx
  004d4	89 44 24 2c	 mov	 DWORD PTR _hf_hashv$127065[rsp], eax
  004d8	8b 44 24 44	 mov	 eax, DWORD PTR _hj_j$127072[rsp]
  004dc	8b 4c 24 2c	 mov	 ecx, DWORD PTR _hf_hashv$127065[rsp]
  004e0	2b c8		 sub	 ecx, eax
  004e2	8b c1		 mov	 eax, ecx
  004e4	89 44 24 2c	 mov	 DWORD PTR _hf_hashv$127065[rsp], eax
  004e8	8b 44 24 44	 mov	 eax, DWORD PTR _hj_j$127072[rsp]
  004ec	c1 e8 0d	 shr	 eax, 13
  004ef	8b 4c 24 2c	 mov	 ecx, DWORD PTR _hf_hashv$127065[rsp]
  004f3	33 c8		 xor	 ecx, eax
  004f5	8b c1		 mov	 eax, ecx
  004f7	89 44 24 2c	 mov	 DWORD PTR _hf_hashv$127065[rsp], eax
  004fb	8b 44 24 44	 mov	 eax, DWORD PTR _hj_j$127072[rsp]
  004ff	8b 4c 24 40	 mov	 ecx, DWORD PTR _hj_i$127071[rsp]
  00503	2b c8		 sub	 ecx, eax
  00505	8b c1		 mov	 eax, ecx
  00507	89 44 24 40	 mov	 DWORD PTR _hj_i$127071[rsp], eax
  0050b	8b 44 24 2c	 mov	 eax, DWORD PTR _hf_hashv$127065[rsp]
  0050f	8b 4c 24 40	 mov	 ecx, DWORD PTR _hj_i$127071[rsp]
  00513	2b c8		 sub	 ecx, eax
  00515	8b c1		 mov	 eax, ecx
  00517	89 44 24 40	 mov	 DWORD PTR _hj_i$127071[rsp], eax
  0051b	8b 44 24 2c	 mov	 eax, DWORD PTR _hf_hashv$127065[rsp]
  0051f	c1 e8 0c	 shr	 eax, 12
  00522	8b 4c 24 40	 mov	 ecx, DWORD PTR _hj_i$127071[rsp]
  00526	33 c8		 xor	 ecx, eax
  00528	8b c1		 mov	 eax, ecx
  0052a	89 44 24 40	 mov	 DWORD PTR _hj_i$127071[rsp], eax
  0052e	8b 44 24 2c	 mov	 eax, DWORD PTR _hf_hashv$127065[rsp]
  00532	8b 4c 24 44	 mov	 ecx, DWORD PTR _hj_j$127072[rsp]
  00536	2b c8		 sub	 ecx, eax
  00538	8b c1		 mov	 eax, ecx
  0053a	89 44 24 44	 mov	 DWORD PTR _hj_j$127072[rsp], eax
  0053e	8b 44 24 40	 mov	 eax, DWORD PTR _hj_i$127071[rsp]
  00542	8b 4c 24 44	 mov	 ecx, DWORD PTR _hj_j$127072[rsp]
  00546	2b c8		 sub	 ecx, eax
  00548	8b c1		 mov	 eax, ecx
  0054a	89 44 24 44	 mov	 DWORD PTR _hj_j$127072[rsp], eax
  0054e	8b 44 24 40	 mov	 eax, DWORD PTR _hj_i$127071[rsp]
  00552	c1 e0 10	 shl	 eax, 16
  00555	8b 4c 24 44	 mov	 ecx, DWORD PTR _hj_j$127072[rsp]
  00559	33 c8		 xor	 ecx, eax
  0055b	8b c1		 mov	 eax, ecx
  0055d	89 44 24 44	 mov	 DWORD PTR _hj_j$127072[rsp], eax
  00561	8b 44 24 40	 mov	 eax, DWORD PTR _hj_i$127071[rsp]
  00565	8b 4c 24 2c	 mov	 ecx, DWORD PTR _hf_hashv$127065[rsp]
  00569	2b c8		 sub	 ecx, eax
  0056b	8b c1		 mov	 eax, ecx
  0056d	89 44 24 2c	 mov	 DWORD PTR _hf_hashv$127065[rsp], eax
  00571	8b 44 24 44	 mov	 eax, DWORD PTR _hj_j$127072[rsp]
  00575	8b 4c 24 2c	 mov	 ecx, DWORD PTR _hf_hashv$127065[rsp]
  00579	2b c8		 sub	 ecx, eax
  0057b	8b c1		 mov	 eax, ecx
  0057d	89 44 24 2c	 mov	 DWORD PTR _hf_hashv$127065[rsp], eax
  00581	8b 44 24 44	 mov	 eax, DWORD PTR _hj_j$127072[rsp]
  00585	c1 e8 05	 shr	 eax, 5
  00588	8b 4c 24 2c	 mov	 ecx, DWORD PTR _hf_hashv$127065[rsp]
  0058c	33 c8		 xor	 ecx, eax
  0058e	8b c1		 mov	 eax, ecx
  00590	89 44 24 2c	 mov	 DWORD PTR _hf_hashv$127065[rsp], eax
  00594	8b 44 24 44	 mov	 eax, DWORD PTR _hj_j$127072[rsp]
  00598	8b 4c 24 40	 mov	 ecx, DWORD PTR _hj_i$127071[rsp]
  0059c	2b c8		 sub	 ecx, eax
  0059e	8b c1		 mov	 eax, ecx
  005a0	89 44 24 40	 mov	 DWORD PTR _hj_i$127071[rsp], eax
  005a4	8b 44 24 2c	 mov	 eax, DWORD PTR _hf_hashv$127065[rsp]
  005a8	8b 4c 24 40	 mov	 ecx, DWORD PTR _hj_i$127071[rsp]
  005ac	2b c8		 sub	 ecx, eax
  005ae	8b c1		 mov	 eax, ecx
  005b0	89 44 24 40	 mov	 DWORD PTR _hj_i$127071[rsp], eax
  005b4	8b 44 24 2c	 mov	 eax, DWORD PTR _hf_hashv$127065[rsp]
  005b8	c1 e8 03	 shr	 eax, 3
  005bb	8b 4c 24 40	 mov	 ecx, DWORD PTR _hj_i$127071[rsp]
  005bf	33 c8		 xor	 ecx, eax
  005c1	8b c1		 mov	 eax, ecx
  005c3	89 44 24 40	 mov	 DWORD PTR _hj_i$127071[rsp], eax
  005c7	8b 44 24 2c	 mov	 eax, DWORD PTR _hf_hashv$127065[rsp]
  005cb	8b 4c 24 44	 mov	 ecx, DWORD PTR _hj_j$127072[rsp]
  005cf	2b c8		 sub	 ecx, eax
  005d1	8b c1		 mov	 eax, ecx
  005d3	89 44 24 44	 mov	 DWORD PTR _hj_j$127072[rsp], eax
  005d7	8b 44 24 40	 mov	 eax, DWORD PTR _hj_i$127071[rsp]
  005db	8b 4c 24 44	 mov	 ecx, DWORD PTR _hj_j$127072[rsp]
  005df	2b c8		 sub	 ecx, eax
  005e1	8b c1		 mov	 eax, ecx
  005e3	89 44 24 44	 mov	 DWORD PTR _hj_j$127072[rsp], eax
  005e7	8b 44 24 40	 mov	 eax, DWORD PTR _hj_i$127071[rsp]
  005eb	c1 e0 0a	 shl	 eax, 10
  005ee	8b 4c 24 44	 mov	 ecx, DWORD PTR _hj_j$127072[rsp]
  005f2	33 c8		 xor	 ecx, eax
  005f4	8b c1		 mov	 eax, ecx
  005f6	89 44 24 44	 mov	 DWORD PTR _hj_j$127072[rsp], eax
  005fa	8b 44 24 40	 mov	 eax, DWORD PTR _hj_i$127071[rsp]
  005fe	8b 4c 24 2c	 mov	 ecx, DWORD PTR _hf_hashv$127065[rsp]
  00602	2b c8		 sub	 ecx, eax
  00604	8b c1		 mov	 eax, ecx
  00606	89 44 24 2c	 mov	 DWORD PTR _hf_hashv$127065[rsp], eax
  0060a	8b 44 24 44	 mov	 eax, DWORD PTR _hj_j$127072[rsp]
  0060e	8b 4c 24 2c	 mov	 ecx, DWORD PTR _hf_hashv$127065[rsp]
  00612	2b c8		 sub	 ecx, eax
  00614	8b c1		 mov	 eax, ecx
  00616	89 44 24 2c	 mov	 DWORD PTR _hf_hashv$127065[rsp], eax
  0061a	8b 44 24 44	 mov	 eax, DWORD PTR _hj_j$127072[rsp]
  0061e	c1 e8 0f	 shr	 eax, 15
  00621	8b 4c 24 2c	 mov	 ecx, DWORD PTR _hf_hashv$127065[rsp]
  00625	33 c8		 xor	 ecx, eax
  00627	8b c1		 mov	 eax, ecx
  00629	89 44 24 2c	 mov	 DWORD PTR _hf_hashv$127065[rsp], eax
  0062d	33 c0		 xor	 eax, eax
  0062f	85 c0		 test	 eax, eax
  00631	0f 85 2b fe ff
	ff		 jne	 $LN74@PxPages_Re
  00637	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR pages$[rsp]
  0063f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00642	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00646	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00649	ff c8		 dec	 eax
  0064b	8b 4c 24 2c	 mov	 ecx, DWORD PTR _hf_hashv$127065[rsp]
  0064f	23 c8		 and	 ecx, eax
  00651	8b c1		 mov	 eax, ecx
  00653	89 44 24 28	 mov	 DWORD PTR _hf_bkt$127064[rsp], eax
  00657	33 c0		 xor	 eax, eax
  00659	85 c0		 test	 eax, eax
  0065b	0f 85 d0 f9 ff
	ff		 jne	 $LN95@PxPages_Re
  00661	33 c0		 xor	 eax, eax
  00663	83 f8 01	 cmp	 eax, 1
  00666	0f 84 14 01 00
	00		 je	 $LN71@PxPages_Re
$LN70@PxPages_Re:
  0066c	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR pages$[rsp]
  00674	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00677	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0067b	8b 4c 24 28	 mov	 ecx, DWORD PTR _hf_bkt$127064[rsp]
  0067f	48 6b c9 10	 imul	 rcx, 16
  00683	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00686	48 83 3c 01 00	 cmp	 QWORD PTR [rcx+rax], 0
  0068b	74 4e		 je	 SHORT $LN67@PxPages_Re
$LN66@PxPages_Re:
  0068d	48 8d 44 24 20	 lea	 rax, QWORD PTR x$[rsp]
  00692	48 89 44 24 48	 mov	 QWORD PTR _da_dst$127129[rsp], rax
  00697	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR pages$[rsp]
  0069f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  006a2	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  006a6	8b 4c 24 28	 mov	 ecx, DWORD PTR _hf_bkt$127064[rsp]
  006aa	48 6b c9 10	 imul	 rcx, 16
  006ae	48 8b 00	 mov	 rax, QWORD PTR [rax]
  006b1	48 8b 94 24 d0
	00 00 00	 mov	 rdx, QWORD PTR pages$[rsp]
  006b9	48 8b 12	 mov	 rdx, QWORD PTR [rdx]
  006bc	48 8b 52 20	 mov	 rdx, QWORD PTR [rdx+32]
  006c0	48 8b 52 20	 mov	 rdx, QWORD PTR [rdx+32]
  006c4	48 8b 04 08	 mov	 rax, QWORD PTR [rax+rcx]
  006c8	48 2b c2	 sub	 rax, rdx
  006cb	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _da_dst$127129[rsp]
  006d0	48 89 01	 mov	 QWORD PTR [rcx], rax
  006d3	33 c0		 xor	 eax, eax
  006d5	85 c0		 test	 eax, eax
  006d7	75 b4		 jne	 SHORT $LN66@PxPages_Re
  006d9	eb 09		 jmp	 SHORT $LN63@PxPages_Re
$LN67@PxPages_Re:
  006db	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR x$[rsp], 0
$LN63@PxPages_Re:
$LN62@PxPages_Re:
  006e4	48 83 7c 24 20
	00		 cmp	 QWORD PTR x$[rsp], 0
  006ea	0f 84 86 00 00
	00		 je	 $LN61@PxPages_Re
  006f0	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  006f5	8b 40 50	 mov	 eax, DWORD PTR [rax+80]
  006f8	48 83 f8 04	 cmp	 rax, 4
  006fc	75 22		 jne	 SHORT $LN60@PxPages_Re
  006fe	41 b8 04 00 00
	00		 mov	 r8d, 4
  00704	48 8b 94 24 d8
	00 00 00	 mov	 rdx, QWORD PTR value$[rsp]
  0070c	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  00711	48 8b 48 48	 mov	 rcx, QWORD PTR [rax+72]
  00715	e8 00 00 00 00	 call	 memcmp
  0071a	85 c0		 test	 eax, eax
  0071c	75 02		 jne	 SHORT $LN59@PxPages_Re
  0071e	eb 56		 jmp	 SHORT $LN61@PxPages_Re
$LN59@PxPages_Re:
$LN60@PxPages_Re:
  00720	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  00725	48 83 78 40 00	 cmp	 QWORD PTR [rax+64], 0
  0072a	74 3c		 je	 SHORT $LN58@PxPages_Re
$LN57@PxPages_Re:
  0072c	48 8d 44 24 20	 lea	 rax, QWORD PTR x$[rsp]
  00731	48 89 44 24 50	 mov	 QWORD PTR _da_dst$127147[rsp], rax
  00736	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR pages$[rsp]
  0073e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00741	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00745	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  0074a	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0074e	48 8b 49 40	 mov	 rcx, QWORD PTR [rcx+64]
  00752	48 2b c8	 sub	 rcx, rax
  00755	48 8b c1	 mov	 rax, rcx
  00758	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _da_dst$127147[rsp]
  0075d	48 89 01	 mov	 QWORD PTR [rcx], rax
  00760	33 c0		 xor	 eax, eax
  00762	85 c0		 test	 eax, eax
  00764	75 c6		 jne	 SHORT $LN57@PxPages_Re
  00766	eb 09		 jmp	 SHORT $LN54@PxPages_Re
$LN58@PxPages_Re:
  00768	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR x$[rsp], 0
$LN54@PxPages_Re:
  00771	e9 6e ff ff ff	 jmp	 $LN62@PxPages_Re
$LN61@PxPages_Re:
  00776	33 c0		 xor	 eax, eax
  00778	85 c0		 test	 eax, eax
  0077a	0f 85 ec fe ff
	ff		 jne	 $LN70@PxPages_Re
$LN71@PxPages_Re:
$LN96@PxPages_Re:
  00780	33 c0		 xor	 eax, eax
  00782	85 c0		 test	 eax, eax
  00784	0f 85 8c f8 ff
	ff		 jne	 $LN99@PxPages_Re

; 1363 :     assert(x);

  0078a	48 83 7c 24 20
	00		 cmp	 QWORD PTR x$[rsp], 0
  00790	75 1c		 jne	 SHORT $LN102@PxPages_Re
  00792	41 b8 53 05 00
	00		 mov	 r8d, 1363		; 00000553H
  00798	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0079f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_13HADAKIJA@?$AAx?$AA?$AA@
  007a6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  007ac	33 c0		 xor	 eax, eax
$LN102@PxPages_Re:

; 1364 :     if (x->count == 1) {

  007ae	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  007b3	0f bf 40 18	 movsx	 eax, WORD PTR [rax+24]
  007b7	83 f8 01	 cmp	 eax, 1
  007ba	0f 85 64 06 00
	00		 jne	 $LN53@PxPages_Re

; 1365 :         assert(x->heaps[0] == h);

  007c0	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  007c5	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR h$[rsp]
  007cd	48 39 48 08	 cmp	 QWORD PTR [rax+8], rcx
  007d1	74 1c		 je	 SHORT $LN103@PxPages_Re
  007d3	41 b8 55 05 00
	00		 mov	 r8d, 1365		; 00000555H
  007d9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  007e0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CC@KIEIDOMF@?$AAx?$AA?9?$AA?$DO?$AAh?$AAe?$AAa?$AAp?$AAs?$AA?$FL?$AA0?$AA?$FN?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAh?$AA?$AA@
  007e7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  007ed	33 c0		 xor	 eax, eax
$LN103@PxPages_Re:
$LN52@PxPages_Re:

; 1366 :         HASH_DEL(*pages, x);

  007ef	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  007f4	48 83 78 28 00	 cmp	 QWORD PTR [rax+40], 0
  007f9	75 4d		 jne	 SHORT $LN49@PxPages_Re
  007fb	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  00800	48 83 78 30 00	 cmp	 QWORD PTR [rax+48], 0
  00805	75 41		 jne	 SHORT $LN49@PxPages_Re
  00807	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR pages$[rsp]
  0080f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00812	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00816	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00819	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
  0081f	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR pages$[rsp]
  00827	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0082a	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  0082e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
  00834	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR pages$[rsp]
  0083c	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
  00843	e9 20 02 00 00	 jmp	 $LN48@PxPages_Re
$LN49@PxPages_Re:
  00848	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  0084d	48 83 c0 20	 add	 rax, 32			; 00000020H
  00851	48 89 44 24 58	 mov	 QWORD PTR _hd_hh_del$127163[rsp], rax
  00856	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR pages$[rsp]
  0085e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00861	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00865	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR pages$[rsp]
  0086d	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00870	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  00874	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  00878	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  0087c	48 2b c1	 sub	 rax, rcx
  0087f	48 39 44 24 20	 cmp	 QWORD PTR x$[rsp], rax
  00884	75 32		 jne	 SHORT $LN47@PxPages_Re
  00886	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR pages$[rsp]
  0088e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00891	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00895	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  0089a	48 8b 49 28	 mov	 rcx, QWORD PTR [rcx+40]
  0089e	48 03 48 20	 add	 rcx, QWORD PTR [rax+32]
  008a2	48 8b c1	 mov	 rax, rcx
  008a5	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR pages$[rsp]
  008ad	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  008b0	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  008b4	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax
$LN47@PxPages_Re:
  008b8	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  008bd	48 83 78 28 00	 cmp	 QWORD PTR [rax+40], 0
  008c2	74 2c		 je	 SHORT $LN46@PxPages_Re
  008c4	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR pages$[rsp]
  008cc	48 8b 00	 mov	 rax, QWORD PTR [rax]
  008cf	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  008d3	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  008d8	48 8b 49 28	 mov	 rcx, QWORD PTR [rcx+40]
  008dc	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  008e0	48 8b 54 24 20	 mov	 rdx, QWORD PTR x$[rsp]
  008e5	48 8b 52 30	 mov	 rdx, QWORD PTR [rdx+48]
  008e9	48 89 54 01 10	 mov	 QWORD PTR [rcx+rax+16], rdx
  008ee	eb 24		 jmp	 SHORT $LN45@PxPages_Re
$LN46@PxPages_Re:
$LN44@PxPages_Re:
  008f0	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR pages$[rsp]
  008f8	48 89 44 24 68	 mov	 QWORD PTR _da_dst$127181[rsp], rax
  008fd	48 8b 44 24 68	 mov	 rax, QWORD PTR _da_dst$127181[rsp]
  00902	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  00907	48 8b 49 30	 mov	 rcx, QWORD PTR [rcx+48]
  0090b	48 89 08	 mov	 QWORD PTR [rax], rcx
  0090e	33 c0		 xor	 eax, eax
  00910	85 c0		 test	 eax, eax
  00912	75 dc		 jne	 SHORT $LN44@PxPages_Re
$LN45@PxPages_Re:
  00914	48 8b 44 24 58	 mov	 rax, QWORD PTR _hd_hh_del$127163[rsp]
  00919	48 83 78 10 00	 cmp	 QWORD PTR [rax+16], 0
  0091e	74 2a		 je	 SHORT $LN41@PxPages_Re
  00920	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR pages$[rsp]
  00928	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0092b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0092f	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _hd_hh_del$127163[rsp]
  00934	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  00938	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0093c	48 8b 54 24 58	 mov	 rdx, QWORD PTR _hd_hh_del$127163[rsp]
  00941	48 8b 52 08	 mov	 rdx, QWORD PTR [rdx+8]
  00945	48 89 54 01 08	 mov	 QWORD PTR [rcx+rax+8], rdx
$LN41@PxPages_Re:
$LN40@PxPages_Re:
  0094a	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR pages$[rsp]
  00952	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00955	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00959	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  0095c	ff c8		 dec	 eax
  0095e	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _hd_hh_del$127163[rsp]
  00963	8b 49 34	 mov	 ecx, DWORD PTR [rcx+52]
  00966	23 c8		 and	 ecx, eax
  00968	8b c1		 mov	 eax, ecx
  0096a	89 44 24 60	 mov	 DWORD PTR _hd_bkt$127162[rsp], eax
  0096e	33 c0		 xor	 eax, eax
  00970	85 c0		 test	 eax, eax
  00972	75 d6		 jne	 SHORT $LN40@PxPages_Re
  00974	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR pages$[rsp]
  0097c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0097f	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00983	8b 4c 24 60	 mov	 ecx, DWORD PTR _hd_bkt$127162[rsp]
  00987	48 6b c9 10	 imul	 rcx, 16
  0098b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0098e	8b 44 08 08	 mov	 eax, DWORD PTR [rax+rcx+8]
  00992	ff c8		 dec	 eax
  00994	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR pages$[rsp]
  0099c	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0099f	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  009a3	8b 54 24 60	 mov	 edx, DWORD PTR _hd_bkt$127162[rsp]
  009a7	48 6b d2 10	 imul	 rdx, 16
  009ab	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  009ae	89 44 11 08	 mov	 DWORD PTR [rcx+rdx+8], eax
  009b2	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR pages$[rsp]
  009ba	48 8b 00	 mov	 rax, QWORD PTR [rax]
  009bd	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  009c1	8b 4c 24 60	 mov	 ecx, DWORD PTR _hd_bkt$127162[rsp]
  009c5	48 6b c9 10	 imul	 rcx, 16
  009c9	48 8b 00	 mov	 rax, QWORD PTR [rax]
  009cc	48 8b 54 24 58	 mov	 rdx, QWORD PTR _hd_hh_del$127163[rsp]
  009d1	48 39 14 01	 cmp	 QWORD PTR [rcx+rax], rdx
  009d5	75 27		 jne	 SHORT $LN37@PxPages_Re
  009d7	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR pages$[rsp]
  009df	48 8b 00	 mov	 rax, QWORD PTR [rax]
  009e2	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  009e6	8b 4c 24 60	 mov	 ecx, DWORD PTR _hd_bkt$127162[rsp]
  009ea	48 6b c9 10	 imul	 rcx, 16
  009ee	48 8b 00	 mov	 rax, QWORD PTR [rax]
  009f1	48 8b 54 24 58	 mov	 rdx, QWORD PTR _hd_hh_del$127163[rsp]
  009f6	48 8b 52 20	 mov	 rdx, QWORD PTR [rdx+32]
  009fa	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx
$LN37@PxPages_Re:
  009fe	48 8b 44 24 58	 mov	 rax, QWORD PTR _hd_hh_del$127163[rsp]
  00a03	48 83 78 18 00	 cmp	 QWORD PTR [rax+24], 0
  00a08	74 16		 je	 SHORT $LN36@PxPages_Re
  00a0a	48 8b 44 24 58	 mov	 rax, QWORD PTR _hd_hh_del$127163[rsp]
  00a0f	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  00a13	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _hd_hh_del$127163[rsp]
  00a18	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  00a1c	48 89 48 20	 mov	 QWORD PTR [rax+32], rcx
$LN36@PxPages_Re:
  00a20	48 8b 44 24 58	 mov	 rax, QWORD PTR _hd_hh_del$127163[rsp]
  00a25	48 83 78 20 00	 cmp	 QWORD PTR [rax+32], 0
  00a2a	74 16		 je	 SHORT $LN35@PxPages_Re
  00a2c	48 8b 44 24 58	 mov	 rax, QWORD PTR _hd_hh_del$127163[rsp]
  00a31	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00a35	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _hd_hh_del$127163[rsp]
  00a3a	48 8b 49 18	 mov	 rcx, QWORD PTR [rcx+24]
  00a3e	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx
$LN35@PxPages_Re:
  00a42	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR pages$[rsp]
  00a4a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00a4d	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00a51	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
  00a54	ff c8		 dec	 eax
  00a56	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR pages$[rsp]
  00a5e	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00a61	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  00a65	89 41 10	 mov	 DWORD PTR [rcx+16], eax
$LN48@PxPages_Re:
$LN34@PxPages_Re:
  00a68	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR pages$[rsp]
  00a70	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00a74	0f 84 86 03 00
	00		 je	 $LN31@PxPages_Re
  00a7a	c7 44 24 78 00
	00 00 00	 mov	 DWORD PTR _count$127197[rsp], 0
  00a82	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR _bkt_i$127196[rsp], 0
  00a8d	eb 10		 jmp	 SHORT $LN30@PxPages_Re
$LN29@PxPages_Re:
  00a8f	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR _bkt_i$127196[rsp]
  00a96	ff c0		 inc	 eax
  00a98	89 84 24 88 00
	00 00		 mov	 DWORD PTR _bkt_i$127196[rsp], eax
$LN30@PxPages_Re:
  00a9f	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR pages$[rsp]
  00aa7	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00aaa	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00aae	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00ab1	39 84 24 88 00
	00 00		 cmp	 DWORD PTR _bkt_i$127196[rsp], eax
  00ab8	0f 83 66 01 00
	00		 jae	 $LN28@PxPages_Re
  00abe	c7 44 24 7c 00
	00 00 00	 mov	 DWORD PTR _bkt_count$127198[rsp], 0
  00ac6	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR pages$[rsp]
  00ace	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00ad1	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00ad5	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR _bkt_i$127196[rsp]
  00adc	48 6b c9 10	 imul	 rcx, 16
  00ae0	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00ae3	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  00ae7	48 89 44 24 70	 mov	 QWORD PTR _thh$127200[rsp], rax
  00aec	48 c7 84 24 80
	00 00 00 00 00
	00 00		 mov	 QWORD PTR _prev$127199[rsp], 0
$LN27@PxPages_Re:
  00af8	48 83 7c 24 70
	00		 cmp	 QWORD PTR _thh$127200[rsp], 0
  00afe	74 76		 je	 SHORT $LN26@PxPages_Re
  00b00	48 8b 44 24 70	 mov	 rax, QWORD PTR _thh$127200[rsp]
  00b05	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  00b09	48 39 84 24 80
	00 00 00	 cmp	 QWORD PTR _prev$127199[rsp], rax
  00b11	74 3c		 je	 SHORT $LN25@PxPages_Re
$LN24@PxPages_Re:
  00b13	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  00b19	48 83 c0 60	 add	 rax, 96			; 00000060H
  00b1d	4c 8b 8c 24 80
	00 00 00	 mov	 r9, QWORD PTR _prev$127199[rsp]
  00b25	48 8b 4c 24 70	 mov	 rcx, QWORD PTR _thh$127200[rsp]
  00b2a	4c 8b 41 18	 mov	 r8, QWORD PTR [rcx+24]
  00b2e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BP@DLILMHAM@invalid?5hh_prev?5?$CFp?0?5actual?5?$CFp?6?$AA@
  00b35	48 8b c8	 mov	 rcx, rax
  00b38	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fprintf
  00b3e	b9 ff ff ff ff	 mov	 ecx, -1
  00b43	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_exit
  00b49	33 c0		 xor	 eax, eax
  00b4b	85 c0		 test	 eax, eax
  00b4d	75 c4		 jne	 SHORT $LN24@PxPages_Re
$LN25@PxPages_Re:
  00b4f	8b 44 24 7c	 mov	 eax, DWORD PTR _bkt_count$127198[rsp]
  00b53	ff c0		 inc	 eax
  00b55	89 44 24 7c	 mov	 DWORD PTR _bkt_count$127198[rsp], eax
  00b59	48 8b 44 24 70	 mov	 rax, QWORD PTR _thh$127200[rsp]
  00b5e	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR _prev$127199[rsp], rax
  00b66	48 8b 44 24 70	 mov	 rax, QWORD PTR _thh$127200[rsp]
  00b6b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00b6f	48 89 44 24 70	 mov	 QWORD PTR _thh$127200[rsp], rax
  00b74	eb 82		 jmp	 SHORT $LN27@PxPages_Re
$LN26@PxPages_Re:
  00b76	8b 44 24 7c	 mov	 eax, DWORD PTR _bkt_count$127198[rsp]
  00b7a	8b 4c 24 78	 mov	 ecx, DWORD PTR _count$127197[rsp]
  00b7e	03 c8		 add	 ecx, eax
  00b80	8b c1		 mov	 eax, ecx
  00b82	89 44 24 78	 mov	 DWORD PTR _count$127197[rsp], eax
  00b86	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR pages$[rsp]
  00b8e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00b91	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00b95	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR _bkt_i$127196[rsp]
  00b9c	48 6b c9 10	 imul	 rcx, 16
  00ba0	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00ba3	8b 54 24 7c	 mov	 edx, DWORD PTR _bkt_count$127198[rsp]
  00ba7	39 54 08 08	 cmp	 DWORD PTR [rax+rcx+8], edx
  00bab	74 72		 je	 SHORT $LN21@PxPages_Re
$LN20@PxPages_Re:
  00bad	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR pages$[rsp]
  00bb5	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00bb8	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00bbc	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR _bkt_i$127196[rsp]
  00bc3	48 6b c9 10	 imul	 rcx, 16
  00bc7	48 89 8c 24 90
	00 00 00	 mov	 QWORD PTR tv451[rsp], rcx
  00bcf	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00bd2	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR tv555[rsp], rax
  00bda	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  00be0	48 83 c0 60	 add	 rax, 96			; 00000060H
  00be4	44 8b 4c 24 7c	 mov	 r9d, DWORD PTR _bkt_count$127198[rsp]
  00be9	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR tv555[rsp]
  00bf1	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR tv451[rsp]
  00bf9	44 8b 44 11 08	 mov	 r8d, DWORD PTR [rcx+rdx+8]
  00bfe	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@EEFPEMAF@invalid?5bucket?5count?5?$CFd?0?5actual?5@
  00c05	48 8b c8	 mov	 rcx, rax
  00c08	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fprintf
  00c0e	b9 ff ff ff ff	 mov	 ecx, -1
  00c13	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_exit
  00c19	33 c0		 xor	 eax, eax
  00c1b	85 c0		 test	 eax, eax
  00c1d	75 8e		 jne	 SHORT $LN20@PxPages_Re
$LN21@PxPages_Re:
  00c1f	e9 6b fe ff ff	 jmp	 $LN29@PxPages_Re
$LN28@PxPages_Re:
  00c24	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR pages$[rsp]
  00c2c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00c2f	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00c33	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
  00c36	39 44 24 78	 cmp	 DWORD PTR _count$127197[rsp], eax
  00c3a	74 53		 je	 SHORT $LN17@PxPages_Re
$LN16@PxPages_Re:
  00c3c	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR pages$[rsp]
  00c44	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00c47	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00c4b	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR tv551[rsp], rax
  00c53	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  00c59	48 83 c0 60	 add	 rax, 96			; 00000060H
  00c5d	44 8b 4c 24 78	 mov	 r9d, DWORD PTR _count$127197[rsp]
  00c62	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR tv551[rsp]
  00c6a	44 8b 41 10	 mov	 r8d, DWORD PTR [rcx+16]
  00c6e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CF@CNAMDMPB@invalid?5hh?5item?5count?5?$CFd?0?5actual@
  00c75	48 8b c8	 mov	 rcx, rax
  00c78	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fprintf
  00c7e	b9 ff ff ff ff	 mov	 ecx, -1
  00c83	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_exit
  00c89	33 c0		 xor	 eax, eax
  00c8b	85 c0		 test	 eax, eax
  00c8d	75 ad		 jne	 SHORT $LN16@PxPages_Re
$LN17@PxPages_Re:
  00c8f	c7 44 24 78 00
	00 00 00	 mov	 DWORD PTR _count$127197[rsp], 0
  00c97	48 c7 84 24 80
	00 00 00 00 00
	00 00		 mov	 QWORD PTR _prev$127199[rsp], 0
  00ca3	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR pages$[rsp]
  00cab	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00cae	48 83 c0 20	 add	 rax, 32			; 00000020H
  00cb2	48 89 44 24 70	 mov	 QWORD PTR _thh$127200[rsp], rax
$LN13@PxPages_Re:
  00cb7	48 83 7c 24 70
	00		 cmp	 QWORD PTR _thh$127200[rsp], 0
  00cbd	0f 84 d2 00 00
	00		 je	 $LN12@PxPages_Re
  00cc3	8b 44 24 78	 mov	 eax, DWORD PTR _count$127197[rsp]
  00cc7	ff c0		 inc	 eax
  00cc9	89 44 24 78	 mov	 DWORD PTR _count$127197[rsp], eax
  00ccd	48 8b 44 24 70	 mov	 rax, QWORD PTR _thh$127200[rsp]
  00cd2	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00cd6	48 39 84 24 80
	00 00 00	 cmp	 QWORD PTR _prev$127199[rsp], rax
  00cde	74 3c		 je	 SHORT $LN11@PxPages_Re
$LN10@PxPages_Re:
  00ce0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  00ce6	48 83 c0 60	 add	 rax, 96			; 00000060H
  00cea	4c 8b 8c 24 80
	00 00 00	 mov	 r9, QWORD PTR _prev$127199[rsp]
  00cf2	48 8b 4c 24 70	 mov	 rcx, QWORD PTR _thh$127200[rsp]
  00cf7	4c 8b 41 08	 mov	 r8, QWORD PTR [rcx+8]
  00cfb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@HCMMMIMF@invalid?5prev?5?$CFp?0?5actual?5?$CFp?6?$AA@
  00d02	48 8b c8	 mov	 rcx, rax
  00d05	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fprintf
  00d0b	b9 ff ff ff ff	 mov	 ecx, -1
  00d10	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_exit
  00d16	33 c0		 xor	 eax, eax
  00d18	85 c0		 test	 eax, eax
  00d1a	75 c4		 jne	 SHORT $LN10@PxPages_Re
$LN11@PxPages_Re:
  00d1c	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR pages$[rsp]
  00d24	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00d27	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00d2b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00d2f	48 8b 4c 24 70	 mov	 rcx, QWORD PTR _thh$127200[rsp]
  00d34	48 2b c8	 sub	 rcx, rax
  00d37	48 8b c1	 mov	 rax, rcx
  00d3a	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR _prev$127199[rsp], rax
  00d42	48 8b 44 24 70	 mov	 rax, QWORD PTR _thh$127200[rsp]
  00d47	48 83 78 10 00	 cmp	 QWORD PTR [rax+16], 0
  00d4c	74 29		 je	 SHORT $LN104@PxPages_Re
  00d4e	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR pages$[rsp]
  00d56	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00d59	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00d5d	48 8b 4c 24 70	 mov	 rcx, QWORD PTR _thh$127200[rsp]
  00d62	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  00d66	48 03 48 20	 add	 rcx, QWORD PTR [rax+32]
  00d6a	48 8b c1	 mov	 rax, rcx
  00d6d	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR tv496[rsp], rax
  00d75	eb 0c		 jmp	 SHORT $LN105@PxPages_Re
$LN104@PxPages_Re:
  00d77	48 c7 84 24 a8
	00 00 00 00 00
	00 00		 mov	 QWORD PTR tv496[rsp], 0
$LN105@PxPages_Re:
  00d83	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR tv496[rsp]
  00d8b	48 89 44 24 70	 mov	 QWORD PTR _thh$127200[rsp], rax
  00d90	e9 22 ff ff ff	 jmp	 $LN13@PxPages_Re
$LN12@PxPages_Re:
  00d95	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR pages$[rsp]
  00d9d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00da0	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00da4	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
  00da7	39 44 24 78	 cmp	 DWORD PTR _count$127197[rsp], eax
  00dab	74 53		 je	 SHORT $LN7@PxPages_Re
$LN6@PxPages_Re:
  00dad	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR pages$[rsp]
  00db5	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00db8	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00dbc	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR tv540[rsp], rax
  00dc4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  00dca	48 83 c0 60	 add	 rax, 96			; 00000060H
  00dce	44 8b 4c 24 78	 mov	 r9d, DWORD PTR _count$127197[rsp]
  00dd3	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR tv540[rsp]
  00ddb	44 8b 41 10	 mov	 r8d, DWORD PTR [rcx+16]
  00ddf	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@KALHPGEP@invalid?5app?5item?5count?5?$CFd?0?5actua@
  00de6	48 8b c8	 mov	 rcx, rax
  00de9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fprintf
  00def	b9 ff ff ff ff	 mov	 ecx, -1
  00df4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_exit
  00dfa	33 c0		 xor	 eax, eax
  00dfc	85 c0		 test	 eax, eax
  00dfe	75 ad		 jne	 SHORT $LN6@PxPages_Re
$LN7@PxPages_Re:
$LN31@PxPages_Re:
  00e00	33 c0		 xor	 eax, eax
  00e02	85 c0		 test	 eax, eax
  00e04	0f 85 5e fc ff
	ff		 jne	 $LN34@PxPages_Re
  00e0a	33 c0		 xor	 eax, eax
  00e0c	85 c0		 test	 eax, eax
  00e0e	0f 85 db f9 ff
	ff		 jne	 $LN52@PxPages_Re

; 1367 :         free(x);

  00e14	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  00e19	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 1368 :     } else {

  00e1f	e9 a9 00 00 00	 jmp	 $LN3@PxPages_Re
$LN53@PxPages_Re:

; 1369 :         assert(x->count >= 1 && x->count <= 2);

  00e24	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  00e29	0f bf 40 18	 movsx	 eax, WORD PTR [rax+24]
  00e2d	83 f8 01	 cmp	 eax, 1
  00e30	7c 0e		 jl	 SHORT $LN106@PxPages_Re
  00e32	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  00e37	0f bf 40 18	 movsx	 eax, WORD PTR [rax+24]
  00e3b	83 f8 02	 cmp	 eax, 2
  00e3e	7e 1c		 jle	 SHORT $LN107@PxPages_Re
$LN106@PxPages_Re:
  00e40	41 b8 59 05 00
	00		 mov	 r8d, 1369		; 00000559H
  00e46	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00e4d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@KBLCNCG@?$AAx?$AA?9?$AA?$DO?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA1?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAx?$AA?9?$AA?$DO?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA2?$AA?$AA@
  00e54	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00e5a	33 c0		 xor	 eax, eax
$LN107@PxPages_Re:

; 1370 :         if (x->heaps[0] == h)

  00e5c	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  00e61	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR h$[rsp]
  00e69	48 39 48 08	 cmp	 QWORD PTR [rax+8], rcx
  00e6d	75 14		 jne	 SHORT $LN2@PxPages_Re

; 1371 :             x->heaps[0] = x->heaps[1];

  00e6f	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  00e74	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  00e79	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  00e7d	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 1372 :         else

  00e81	eb 2f		 jmp	 SHORT $LN1@PxPages_Re
$LN2@PxPages_Re:

; 1373 :             assert(x->heaps[1] == h);

  00e83	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  00e88	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR h$[rsp]
  00e90	48 39 48 10	 cmp	 QWORD PTR [rax+16], rcx
  00e94	74 1c		 je	 SHORT $LN108@PxPages_Re
  00e96	41 b8 5d 05 00
	00		 mov	 r8d, 1373		; 0000055dH
  00e9c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00ea3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CC@GCAKPFE@?$AAx?$AA?9?$AA?$DO?$AAh?$AAe?$AAa?$AAp?$AAs?$AA?$FL?$AA1?$AA?$FN?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAh?$AA?$AA@
  00eaa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00eb0	33 c0		 xor	 eax, eax
$LN108@PxPages_Re:
$LN1@PxPages_Re:

; 1374 :         x->heaps[1] = NULL;

  00eb2	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  00eb7	48 c7 40 10 00
	00 00 00	 mov	 QWORD PTR [rax+16], 0

; 1375 :         x->count = 1;

  00ebf	b8 01 00 00 00	 mov	 eax, 1
  00ec4	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  00ec9	66 89 41 18	 mov	 WORD PTR [rcx+24], ax
$LN3@PxPages_Re:
$LN101@PxPages_Re:

; 1376 :     }
; 1377 : }

  00ecd	48 81 c4 c8 00
	00 00		 add	 rsp, 200		; 000000c8H
  00ed4	c3		 ret	 0
  00ed5	0f 1f 00	 npad	 3
$LN109@PxPages_Re:
  00ed8	00 00 00 00	 DD	 $LN75@PxPages_Re
  00edc	00 00 00 00	 DD	 $LN76@PxPages_Re
  00ee0	00 00 00 00	 DD	 $LN77@PxPages_Re
  00ee4	00 00 00 00	 DD	 $LN78@PxPages_Re
  00ee8	00 00 00 00	 DD	 $LN79@PxPages_Re
  00eec	00 00 00 00	 DD	 $LN80@PxPages_Re
  00ef0	00 00 00 00	 DD	 $LN81@PxPages_Re
  00ef4	00 00 00 00	 DD	 $LN82@PxPages_Re
  00ef8	00 00 00 00	 DD	 $LN83@PxPages_Re
  00efc	00 00 00 00	 DD	 $LN84@PxPages_Re
  00f00	00 00 00 00	 DD	 $LN85@PxPages_Re
_PxPages_RemoveHeapPage ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BO@NOFCKPEP@?$FL?$CFd?$FN?5base?3?50x?$CFllx?0?5count?3?5?$CFd?6?$AA@ ; `string'
PUBLIC	PxPages_Dump
EXTRN	__imp_printf:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PxPages_Dump DD imagerel $LN10
	DD	imagerel $LN10+187
	DD	imagerel $unwind$PxPages_Dump
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PxPages_Dump DD 010901H
	DD	0a209H
xdata	ENDS
;	COMDAT ??_C@_0BO@NOFCKPEP@?$FL?$CFd?$FN?5base?3?50x?$CFllx?0?5count?3?5?$CFd?6?$AA@
CONST	SEGMENT
??_C@_0BO@NOFCKPEP@?$FL?$CFd?$FN?5base?3?50x?$CFllx?0?5count?3?5?$CFd?6?$AA@ DB '['
	DB	'%d] base: 0x%llx, count: %d', 0aH, 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PxPages_Dump
_TEXT	SEGMENT
x$ = 32
i$ = 40
t$ = 48
tv66 = 56
tv69 = 64
pages$ = 96
PxPages_Dump PROC					; COMDAT

; 1380 : {

$LN10:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 1381 :     PxPages *x, *t;
; 1382 :     int i = 0;

  00009	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0

; 1383 :     HASH_ITER(hh, pages, x, t) {

  00011	48 8b 44 24 60	 mov	 rax, QWORD PTR pages$[rsp]
  00016	48 89 44 24 20	 mov	 QWORD PTR x$[rsp], rax
  0001b	48 83 7c 24 60
	00		 cmp	 QWORD PTR pages$[rsp], 0
  00021	74 10		 je	 SHORT $LN6@PxPages_Du
  00023	48 8b 44 24 60	 mov	 rax, QWORD PTR pages$[rsp]
  00028	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  0002c	48 89 44 24 38	 mov	 QWORD PTR tv66[rsp], rax
  00031	eb 09		 jmp	 SHORT $LN7@PxPages_Du
$LN6@PxPages_Du:
  00033	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR tv66[rsp], 0
$LN7@PxPages_Du:
  0003c	48 8b 44 24 38	 mov	 rax, QWORD PTR tv66[rsp]
  00041	48 89 44 24 30	 mov	 QWORD PTR t$[rsp], rax
  00046	eb 35		 jmp	 SHORT $LN3@PxPages_Du
$LN2@PxPages_Du:
  00048	48 8b 44 24 30	 mov	 rax, QWORD PTR t$[rsp]
  0004d	48 89 44 24 20	 mov	 QWORD PTR x$[rsp], rax
  00052	48 83 7c 24 30
	00		 cmp	 QWORD PTR t$[rsp], 0
  00058	74 10		 je	 SHORT $LN8@PxPages_Du
  0005a	48 8b 44 24 30	 mov	 rax, QWORD PTR t$[rsp]
  0005f	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  00063	48 89 44 24 40	 mov	 QWORD PTR tv69[rsp], rax
  00068	eb 09		 jmp	 SHORT $LN9@PxPages_Du
$LN8@PxPages_Du:
  0006a	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR tv69[rsp], 0
$LN9@PxPages_Du:
  00073	48 8b 44 24 40	 mov	 rax, QWORD PTR tv69[rsp]
  00078	48 89 44 24 30	 mov	 QWORD PTR t$[rsp], rax
$LN3@PxPages_Du:
  0007d	48 83 7c 24 20
	00		 cmp	 QWORD PTR x$[rsp], 0
  00083	74 31		 je	 SHORT $LN1@PxPages_Du

; 1384 :         i++;

  00085	8b 44 24 28	 mov	 eax, DWORD PTR i$[rsp]
  00089	ff c0		 inc	 eax
  0008b	89 44 24 28	 mov	 DWORD PTR i$[rsp], eax

; 1385 :         printf("[%d] base: 0x%llx, count: %d\n", i, x->base, x->count);

  0008f	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  00094	0f bf 40 18	 movsx	 eax, WORD PTR [rax+24]
  00098	44 8b c8	 mov	 r9d, eax
  0009b	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  000a0	4c 8b 00	 mov	 r8, QWORD PTR [rax]
  000a3	8b 54 24 28	 mov	 edx, DWORD PTR i$[rsp]
  000a7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BO@NOFCKPEP@?$FL?$CFd?$FN?5base?3?50x?$CFllx?0?5count?3?5?$CFd?6?$AA@
  000ae	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_printf

; 1386 :     }

  000b4	eb 92		 jmp	 SHORT $LN2@PxPages_Du
$LN1@PxPages_Du:

; 1387 : }

  000b6	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000ba	c3		 ret	 0
PxPages_Dump ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BF@FMHELPEA@_PxState_InitPxPages?$AA@	; `string'
PUBLIC	_PxState_InitPxPages
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PxState_InitPxPages DD imagerel $LN4
	DD	imagerel $LN4+69
	DD	imagerel $unwind$_PxState_InitPxPages
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PxState_InitPxPages DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT ??_C@_0BF@FMHELPEA@_PxState_InitPxPages?$AA@
CONST	SEGMENT
??_C@_0BF@FMHELPEA@_PxState_InitPxPages?$AA@ DB '_PxState_InitPxPages', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PxState_InitPxPages
_TEXT	SEGMENT
px$ = 48
_PxState_InitPxPages PROC				; COMDAT

; 1392 : {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1393 :     Py_GUARD

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	74 1c		 je	 SHORT $LN1@PxState_In
  00012	45 33 c9	 xor	 r9d, r9d
  00015	41 b8 71 05 00
	00		 mov	 r8d, 1393		; 00000571H
  0001b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@PGHBGAOD@?4?4?2Python?2pyparallel?4c?$AA@
  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@FMHELPEA@_PxState_InitPxPages?$AA@
  00029	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN1@PxState_In:

; 1394 : 
; 1395 :     InitializeSRWLock(&px->pages_srwlock);

  0002e	48 8b 44 24 30	 mov	 rax, QWORD PTR px$[rsp]
  00033	48 83 c0 60	 add	 rax, 96			; 00000060H
  00037	48 8b c8	 mov	 rcx, rax
  0003a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_InitializeSRWLock

; 1396 : }

  00040	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00044	c3		 ret	 0
_PxState_InitPxPages ENDP
_TEXT	ENDS
PUBLIC	??_C@_1DM@PMBKDKPO@?$AA?$CI?$AAh?$AA?9?$AA?$DO?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$CF?$AA?5?$AAh?$AA?9?$AA?$DO?$AAp?$AAa?$AAg?$AAe?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	_PxState_RegisterHeap
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PxState_RegisterHeap DD imagerel $LN8
	DD	imagerel $LN8+341
	DD	imagerel $unwind$_PxState_RegisterHeap
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PxState_RegisterHeap DD 011301H
	DD	0a213H
xdata	ENDS
;	COMDAT ??_C@_1DM@PMBKDKPO@?$AA?$CI?$AAh?$AA?9?$AA?$DO?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$CF?$AA?5?$AAh?$AA?9?$AA?$DO?$AAp?$AAa?$AAg?$AAe?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1DM@PMBKDKPO@?$AA?$CI?$AAh?$AA?9?$AA?$DO?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$CF?$AA?5?$AAh?$AA?9?$AA?$DO?$AAp?$AAa?$AAg?$AAe?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@ DB '('
	DB	00H, 'h', 00H, '-', 00H, '>', 00H, 's', 00H, 'i', 00H, 'z', 00H
	DB	'e', 00H, ' ', 00H, '%', 00H, ' ', 00H, 'h', 00H, '-', 00H, '>'
	DB	00H, 'p', 00H, 'a', 00H, 'g', 00H, 'e', 00H, '_', 00H, 's', 00H
	DB	'i', 00H, 'z', 00H, 'e', 00H, ')', 00H, ' ', 00H, '=', 00H, '='
	DB	00H, ' ', 00H, '0', 00H, 00H, 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PxState_RegisterHeap
_TEXT	SEGMENT
i$ = 32
p$127286 = 40
upper$127288 = 48
lower$127287 = 56
tv68 = 64
px$ = 96
h$ = 104
c$ = 112
_PxState_RegisterHeap PROC				; COMDAT

; 1400 : {

$LN8:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 1401 :     int i;
; 1402 : 
; 1403 :     AcquireSRWLockExclusive(&px->pages_srwlock);

  00013	48 8b 44 24 60	 mov	 rax, QWORD PTR px$[rsp]
  00018	48 83 c0 60	 add	 rax, 96			; 00000060H
  0001c	48 8b c8	 mov	 rcx, rax
  0001f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_AcquireSRWLockExclusive

; 1404 : 
; 1405 :     assert((h->size % h->page_size) == 0);

  00025	48 8b 44 24 68	 mov	 rax, QWORD PTR h$[rsp]
  0002a	48 63 40 20	 movsxd	 rax, DWORD PTR [rax+32]
  0002e	48 89 44 24 40	 mov	 QWORD PTR tv68[rsp], rax
  00033	33 d2		 xor	 edx, edx
  00035	48 8b 4c 24 68	 mov	 rcx, QWORD PTR h$[rsp]
  0003a	48 8b 41 38	 mov	 rax, QWORD PTR [rcx+56]
  0003e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tv68[rsp]
  00043	48 f7 f1	 div	 rcx
  00046	48 8b c2	 mov	 rax, rdx
  00049	48 85 c0	 test	 rax, rax
  0004c	74 1c		 je	 SHORT $LN7@PxState_Re
  0004e	41 b8 7d 05 00
	00		 mov	 r8d, 1405		; 0000057dH
  00054	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0005b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DM@PMBKDKPO@?$AA?$CI?$AAh?$AA?9?$AA?$DO?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$CF?$AA?5?$AAh?$AA?9?$AA?$DO?$AAp?$AAa?$AAg?$AAe?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@
  00062	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00068	33 c0		 xor	 eax, eax
$LN7@PxState_Re:

; 1406 : 
; 1407 :     for (i = 0; i < h->pages; i++) {

  0006a	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00072	eb 0a		 jmp	 SHORT $LN4@PxState_Re
$LN3@PxState_Re:
  00074	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  00078	ff c0		 inc	 eax
  0007a	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN4@PxState_Re:
  0007e	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  00083	48 8b 4c 24 68	 mov	 rcx, QWORD PTR h$[rsp]
  00088	48 3b 41 28	 cmp	 rax, QWORD PTR [rcx+40]
  0008c	0f 83 ac 00 00
	00		 jae	 $LN2@PxState_Re

; 1408 :         void *p;
; 1409 :         Px_UINTPTR lower, upper;
; 1410 : 
; 1411 :         p = Px_PTR_ADD(h->base, (i * h->page_size));

  00092	48 8b 44 24 68	 mov	 rax, QWORD PTR h$[rsp]
  00097	8b 4c 24 20	 mov	 ecx, DWORD PTR i$[rsp]
  0009b	0f af 48 20	 imul	 ecx, DWORD PTR [rax+32]
  0009f	8b c1		 mov	 eax, ecx
  000a1	48 98		 cdqe
  000a3	48 8b 4c 24 68	 mov	 rcx, QWORD PTR h$[rsp]
  000a8	48 03 41 10	 add	 rax, QWORD PTR [rcx+16]
  000ac	48 89 44 24 28	 mov	 QWORD PTR p$127286[rsp], rax

; 1412 : 
; 1413 :         lower = Px_PAGESIZE_ALIGN_DOWN(p, h->page_size);

  000b1	48 8b 44 24 68	 mov	 rax, QWORD PTR h$[rsp]
  000b6	48 63 40 20	 movsxd	 rax, DWORD PTR [rax+32]
  000ba	48 f7 d8	 neg	 rax
  000bd	48 8b 4c 24 28	 mov	 rcx, QWORD PTR p$127286[rsp]
  000c2	48 23 c8	 and	 rcx, rax
  000c5	48 8b c1	 mov	 rax, rcx
  000c8	48 89 44 24 38	 mov	 QWORD PTR lower$127287[rsp], rax

; 1414 :         upper = Px_PAGESIZE_ALIGN_UP(p, h->page_size);

  000cd	48 8b 44 24 68	 mov	 rax, QWORD PTR h$[rsp]
  000d2	48 63 40 20	 movsxd	 rax, DWORD PTR [rax+32]
  000d6	48 8b 4c 24 28	 mov	 rcx, QWORD PTR p$127286[rsp]
  000db	48 8d 44 01 ff	 lea	 rax, QWORD PTR [rcx+rax-1]
  000e0	48 8b 4c 24 68	 mov	 rcx, QWORD PTR h$[rsp]
  000e5	48 63 49 20	 movsxd	 rcx, DWORD PTR [rcx+32]
  000e9	48 ff c9	 dec	 rcx
  000ec	48 f7 d1	 not	 rcx
  000ef	48 23 c1	 and	 rax, rcx
  000f2	48 89 44 24 30	 mov	 QWORD PTR upper$127288[rsp], rax

; 1415 : 
; 1416 :         _PxPages_AddHeapPage(&(px->pages), &lower, h);

  000f7	48 8b 44 24 60	 mov	 rax, QWORD PTR px$[rsp]
  000fc	48 83 c0 68	 add	 rax, 104		; 00000068H
  00100	4c 8b 44 24 68	 mov	 r8, QWORD PTR h$[rsp]
  00105	48 8d 54 24 38	 lea	 rdx, QWORD PTR lower$127287[rsp]
  0010a	48 8b c8	 mov	 rcx, rax
  0010d	e8 00 00 00 00	 call	 _PxPages_AddHeapPage

; 1417 :         if (lower != upper)

  00112	48 8b 44 24 30	 mov	 rax, QWORD PTR upper$127288[rsp]
  00117	48 39 44 24 38	 cmp	 QWORD PTR lower$127287[rsp], rax
  0011c	74 1b		 je	 SHORT $LN1@PxState_Re

; 1418 :             _PxPages_AddHeapPage(&(px->pages), &upper, h);

  0011e	48 8b 44 24 60	 mov	 rax, QWORD PTR px$[rsp]
  00123	48 83 c0 68	 add	 rax, 104		; 00000068H
  00127	4c 8b 44 24 68	 mov	 r8, QWORD PTR h$[rsp]
  0012c	48 8d 54 24 30	 lea	 rdx, QWORD PTR upper$127288[rsp]
  00131	48 8b c8	 mov	 rcx, rax
  00134	e8 00 00 00 00	 call	 _PxPages_AddHeapPage
$LN1@PxState_Re:

; 1419 :     }

  00139	e9 36 ff ff ff	 jmp	 $LN3@PxState_Re
$LN2@PxState_Re:

; 1420 :     ReleaseSRWLockExclusive(&px->pages_srwlock);

  0013e	48 8b 44 24 60	 mov	 rax, QWORD PTR px$[rsp]
  00143	48 83 c0 60	 add	 rax, 96			; 00000060H
  00147	48 8b c8	 mov	 rcx, rax
  0014a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ReleaseSRWLockExclusive

; 1421 : 
; 1422 : }

  00150	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00154	c3		 ret	 0
_PxState_RegisterHeap ENDP
_TEXT	ENDS
PUBLIC	??_C@_1CO@HHKADHDI@?$AAh?$AAe?$AAa?$AAp?$AA_?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAs?$AA?9?$AA?$DO?$AAh?$AAe?$AAa?$AAp?$AAs?$AA?$AA@ ; `string'
PUBLIC	??_C@_0BL@NPDCEEJI@_PxContext_UnregisterHeaps?$AA@ ; `string'
PUBLIC	_PxContext_UnregisterHeaps
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PxContext_UnregisterHeaps DD imagerel $LN13
	DD	imagerel $LN13+525
	DD	imagerel $unwind$_PxContext_UnregisterHeaps
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PxContext_UnregisterHeaps DD 010901H
	DD	0c209H
xdata	ENDS
;	COMDAT ??_C@_1CO@HHKADHDI@?$AAh?$AAe?$AAa?$AAp?$AA_?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAs?$AA?9?$AA?$DO?$AAh?$AAe?$AAa?$AAp?$AAs?$AA?$AA@
CONST	SEGMENT
??_C@_1CO@HHKADHDI@?$AAh?$AAe?$AAa?$AAp?$AA_?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAs?$AA?9?$AA?$DO?$AAh?$AAe?$AAa?$AAp?$AAs?$AA?$AA@ DB 'h'
	DB	00H, 'e', 00H, 'a', 00H, 'p', 00H, '_', 00H, 'c', 00H, 'o', 00H
	DB	'u', 00H, 'n', 00H, 't', 00H, ' ', 00H, '=', 00H, '=', 00H, ' '
	DB	00H, 's', 00H, '-', 00H, '>', 00H, 'h', 00H, 'e', 00H, 'a', 00H
	DB	'p', 00H, 's', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@NPDCEEJI@_PxContext_UnregisterHeaps?$AA@
CONST	SEGMENT
??_C@_0BL@NPDCEEJI@_PxContext_UnregisterHeaps?$AA@ DB '_PxContext_Unregis'
	DB	'terHeaps', 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PxContext_UnregisterHeaps
_TEXT	SEGMENT
h$ = 32
heap_count$ = 40
i$ = 44
s$ = 48
px$ = 56
p$127316 = 64
upper$127318 = 72
lower$127317 = 80
tv79 = 88
c$ = 112
_PxContext_UnregisterHeaps PROC				; COMDAT

; 1426 : {

$LN13:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 1427 :     Heap    *h;
; 1428 :     Stats   *s;
; 1429 :     PxState *px;
; 1430 :     int      i, heap_count = 0;

  00009	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR heap_count$[rsp], 0

; 1431 : 
; 1432 :     Py_GUARD

  00011	e8 00 00 00 00	 call	 _Py_PXCTX
  00016	85 c0		 test	 eax, eax
  00018	74 1c		 je	 SHORT $LN8@PxContext_@3
  0001a	45 33 c9	 xor	 r9d, r9d
  0001d	41 b8 98 05 00
	00		 mov	 r8d, 1432		; 00000598H
  00023	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@PGHBGAOD@?4?4?2Python?2pyparallel?4c?$AA@
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BL@NPDCEEJI@_PxContext_UnregisterHeaps?$AA@
  00031	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN8@PxContext_@3:

; 1433 : 
; 1434 :     px =  c->px;

  00036	48 8b 44 24 70	 mov	 rax, QWORD PTR c$[rsp]
  0003b	48 8b 80 d8 00
	00 00		 mov	 rax, QWORD PTR [rax+216]
  00042	48 89 44 24 38	 mov	 QWORD PTR px$[rsp], rax

; 1435 :     s  = &c->stats;

  00047	48 8b 44 24 70	 mov	 rax, QWORD PTR c$[rsp]
  0004c	48 05 00 01 00
	00		 add	 rax, 256		; 00000100H
  00052	48 89 44 24 30	 mov	 QWORD PTR s$[rsp], rax

; 1436 : 
; 1437 :     AcquireSRWLockExclusive(&px->pages_srwlock);

  00057	48 8b 44 24 38	 mov	 rax, QWORD PTR px$[rsp]
  0005c	48 83 c0 60	 add	 rax, 96			; 00000060H
  00060	48 8b c8	 mov	 rcx, rax
  00063	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_AcquireSRWLockExclusive

; 1438 : 
; 1439 :     h = &c->heap;

  00069	48 8b 44 24 70	 mov	 rax, QWORD PTR c$[rsp]
  0006e	48 83 c0 18	 add	 rax, 24
  00072	48 89 44 24 20	 mov	 QWORD PTR h$[rsp], rax
$LN7@PxContext_@3:

; 1440 :     while (h) {

  00077	48 83 7c 24 20
	00		 cmp	 QWORD PTR h$[rsp], 0
  0007d	0f 84 44 01 00
	00		 je	 $LN6@PxContext_@3

; 1441 :         heap_count++;

  00083	8b 44 24 28	 mov	 eax, DWORD PTR heap_count$[rsp]
  00087	ff c0		 inc	 eax
  00089	89 44 24 28	 mov	 DWORD PTR heap_count$[rsp], eax

; 1442 : 
; 1443 :         assert((h->size % h->page_size) == 0);

  0008d	48 8b 44 24 20	 mov	 rax, QWORD PTR h$[rsp]
  00092	48 63 40 20	 movsxd	 rax, DWORD PTR [rax+32]
  00096	48 89 44 24 58	 mov	 QWORD PTR tv79[rsp], rax
  0009b	33 d2		 xor	 edx, edx
  0009d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR h$[rsp]
  000a2	48 8b 41 38	 mov	 rax, QWORD PTR [rcx+56]
  000a6	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tv79[rsp]
  000ab	48 f7 f1	 div	 rcx
  000ae	48 8b c2	 mov	 rax, rdx
  000b1	48 85 c0	 test	 rax, rax
  000b4	74 1c		 je	 SHORT $LN11@PxContext_@3
  000b6	41 b8 a3 05 00
	00		 mov	 r8d, 1443		; 000005a3H
  000bc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  000c3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DM@PMBKDKPO@?$AA?$CI?$AAh?$AA?9?$AA?$DO?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$CF?$AA?5?$AAh?$AA?9?$AA?$DO?$AAp?$AAa?$AAg?$AAe?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@
  000ca	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000d0	33 c0		 xor	 eax, eax
$LN11@PxContext_@3:

; 1444 : 
; 1445 :         for (i = 0; i < h->pages; i++) {

  000d2	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  000da	eb 0a		 jmp	 SHORT $LN5@PxContext_@3
$LN4@PxContext_@3:
  000dc	8b 44 24 2c	 mov	 eax, DWORD PTR i$[rsp]
  000e0	ff c0		 inc	 eax
  000e2	89 44 24 2c	 mov	 DWORD PTR i$[rsp], eax
$LN5@PxContext_@3:
  000e6	48 63 44 24 2c	 movsxd	 rax, DWORD PTR i$[rsp]
  000eb	48 8b 4c 24 20	 mov	 rcx, QWORD PTR h$[rsp]
  000f0	48 3b 41 28	 cmp	 rax, QWORD PTR [rcx+40]
  000f4	0f 83 ac 00 00
	00		 jae	 $LN3@PxContext_@3

; 1446 :             void *p;
; 1447 :             Px_UINTPTR lower, upper;
; 1448 : 
; 1449 :             p = Px_PTR_ADD(h->base, (i * h->page_size));

  000fa	48 8b 44 24 20	 mov	 rax, QWORD PTR h$[rsp]
  000ff	8b 4c 24 2c	 mov	 ecx, DWORD PTR i$[rsp]
  00103	0f af 48 20	 imul	 ecx, DWORD PTR [rax+32]
  00107	8b c1		 mov	 eax, ecx
  00109	48 98		 cdqe
  0010b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR h$[rsp]
  00110	48 03 41 10	 add	 rax, QWORD PTR [rcx+16]
  00114	48 89 44 24 40	 mov	 QWORD PTR p$127316[rsp], rax

; 1450 : 
; 1451 :             lower = Px_PAGESIZE_ALIGN_DOWN(p, h->page_size);

  00119	48 8b 44 24 20	 mov	 rax, QWORD PTR h$[rsp]
  0011e	48 63 40 20	 movsxd	 rax, DWORD PTR [rax+32]
  00122	48 f7 d8	 neg	 rax
  00125	48 8b 4c 24 40	 mov	 rcx, QWORD PTR p$127316[rsp]
  0012a	48 23 c8	 and	 rcx, rax
  0012d	48 8b c1	 mov	 rax, rcx
  00130	48 89 44 24 50	 mov	 QWORD PTR lower$127317[rsp], rax

; 1452 :             upper = Px_PAGESIZE_ALIGN_UP(p, h->page_size);

  00135	48 8b 44 24 20	 mov	 rax, QWORD PTR h$[rsp]
  0013a	48 63 40 20	 movsxd	 rax, DWORD PTR [rax+32]
  0013e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR p$127316[rsp]
  00143	48 8d 44 01 ff	 lea	 rax, QWORD PTR [rcx+rax-1]
  00148	48 8b 4c 24 20	 mov	 rcx, QWORD PTR h$[rsp]
  0014d	48 63 49 20	 movsxd	 rcx, DWORD PTR [rcx+32]
  00151	48 ff c9	 dec	 rcx
  00154	48 f7 d1	 not	 rcx
  00157	48 23 c1	 and	 rax, rcx
  0015a	48 89 44 24 48	 mov	 QWORD PTR upper$127318[rsp], rax

; 1453 : 
; 1454 :             _PxPages_RemoveHeapPage(&(px->pages), &lower, h);

  0015f	48 8b 44 24 38	 mov	 rax, QWORD PTR px$[rsp]
  00164	48 83 c0 68	 add	 rax, 104		; 00000068H
  00168	4c 8b 44 24 20	 mov	 r8, QWORD PTR h$[rsp]
  0016d	48 8d 54 24 50	 lea	 rdx, QWORD PTR lower$127317[rsp]
  00172	48 8b c8	 mov	 rcx, rax
  00175	e8 00 00 00 00	 call	 _PxPages_RemoveHeapPage

; 1455 :             if (lower != upper)

  0017a	48 8b 44 24 48	 mov	 rax, QWORD PTR upper$127318[rsp]
  0017f	48 39 44 24 50	 cmp	 QWORD PTR lower$127317[rsp], rax
  00184	74 1b		 je	 SHORT $LN2@PxContext_@3

; 1456 :                 _PxPages_RemoveHeapPage(&(px->pages), &upper, h);

  00186	48 8b 44 24 38	 mov	 rax, QWORD PTR px$[rsp]
  0018b	48 83 c0 68	 add	 rax, 104		; 00000068H
  0018f	4c 8b 44 24 20	 mov	 r8, QWORD PTR h$[rsp]
  00194	48 8d 54 24 48	 lea	 rdx, QWORD PTR upper$127318[rsp]
  00199	48 8b c8	 mov	 rcx, rax
  0019c	e8 00 00 00 00	 call	 _PxPages_RemoveHeapPage
$LN2@PxContext_@3:

; 1457 :         }

  001a1	e9 36 ff ff ff	 jmp	 $LN4@PxContext_@3
$LN3@PxContext_@3:

; 1458 : 
; 1459 :         h = h->sle_next;

  001a6	48 8b 44 24 20	 mov	 rax, QWORD PTR h$[rsp]
  001ab	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  001af	48 89 44 24 20	 mov	 QWORD PTR h$[rsp], rax

; 1460 :         if (h->size == 0)

  001b4	48 8b 44 24 20	 mov	 rax, QWORD PTR h$[rsp]
  001b9	48 83 78 38 00	 cmp	 QWORD PTR [rax+56], 0
  001be	75 02		 jne	 SHORT $LN1@PxContext_@3

; 1461 :             break;

  001c0	eb 05		 jmp	 SHORT $LN6@PxContext_@3
$LN1@PxContext_@3:

; 1462 :     }

  001c2	e9 b0 fe ff ff	 jmp	 $LN7@PxContext_@3
$LN6@PxContext_@3:

; 1463 :     ReleaseSRWLockExclusive(&px->pages_srwlock);

  001c7	48 8b 44 24 38	 mov	 rax, QWORD PTR px$[rsp]
  001cc	48 83 c0 60	 add	 rax, 96			; 00000060H
  001d0	48 8b c8	 mov	 rcx, rax
  001d3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ReleaseSRWLockExclusive

; 1464 :     assert(heap_count == s->heaps);

  001d9	48 63 44 24 28	 movsxd	 rax, DWORD PTR heap_count$[rsp]
  001de	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s$[rsp]
  001e3	48 3b 81 90 00
	00 00		 cmp	 rax, QWORD PTR [rcx+144]
  001ea	74 1c		 je	 SHORT $LN12@PxContext_@3
  001ec	41 b8 b8 05 00
	00		 mov	 r8d, 1464		; 000005b8H
  001f2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  001f9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@HHKADHDI@?$AAh?$AAe?$AAa?$AAp?$AA_?$AAc?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAs?$AA?9?$AA?$DO?$AAh?$AAe?$AAa?$AAp?$AAs?$AA?$AA@
  00200	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00206	33 c0		 xor	 eax, eax
$LN12@PxContext_@3:

; 1465 : }

  00208	48 83 c4 68	 add	 rsp, 104		; 00000068H
  0020c	c3		 ret	 0
_PxContext_UnregisterHeaps ENDP
_TEXT	ENDS
PUBLIC	_Px_MemorySignature
EXTRN	_PyMem_InRange:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Px_MemorySignature DD imagerel $LN9
	DD	imagerel $LN9+196
	DD	imagerel $unwind$_Px_MemorySignature
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Px_MemorySignature DD 010901H
	DD	08209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _Px_MemorySignature
_TEXT	SEGMENT
signature$ = 32
px$ = 40
tv70 = 48
m$ = 80
_Px_MemorySignature PROC				; COMDAT

; 1491 : {

$LN9:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1492 :     PxState *px;
; 1493 :     unsigned long signature;
; 1494 : 
; 1495 :     if (!m)

  00009	48 83 7c 24 50
	00		 cmp	 QWORD PTR m$[rsp], 0
  0000f	75 0a		 jne	 SHORT $LN4@Px_MemoryS

; 1496 :         return _MEMSIG_NULL;

  00011	b8 02 00 00 00	 mov	 eax, 2
  00016	e9 a4 00 00 00	 jmp	 $LN5@Px_MemoryS
$LN4@Px_MemoryS:

; 1497 : 
; 1498 :     px = PXSTATE();

  0001b	e8 00 00 00 00	 call	 PXSTATE
  00020	48 89 44 24 28	 mov	 QWORD PTR px$[rsp], rax

; 1499 :     if (!px)

  00025	48 83 7c 24 28
	00		 cmp	 QWORD PTR px$[rsp], 0
  0002b	75 26		 jne	 SHORT $LN3@Px_MemoryS

; 1500 :         return (_PyMem_InRange(m) ? _MEMSIG_PY : _MEMSIG_NOT_READY);

  0002d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR m$[rsp]
  00032	e8 00 00 00 00	 call	 _PyMem_InRange
  00037	85 c0		 test	 eax, eax
  00039	74 0a		 je	 SHORT $LN7@Px_MemoryS
  0003b	c7 44 24 30 08
	00 00 00	 mov	 DWORD PTR tv70[rsp], 8
  00043	eb 08		 jmp	 SHORT $LN8@Px_MemoryS
$LN7@Px_MemoryS:
  00045	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv70[rsp], 1
$LN8@Px_MemoryS:
  0004d	8b 44 24 30	 mov	 eax, DWORD PTR tv70[rsp]
  00051	eb 6c		 jmp	 SHORT $LN5@Px_MemoryS
$LN3@Px_MemoryS:

; 1501 : 
; 1502 :     signature = _MEMSIG_UNKNOWN;

  00053	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR signature$[rsp], 4

; 1503 : 
; 1504 :     AcquireSRWLockShared(&px->pages_srwlock);

  0005b	48 8b 44 24 28	 mov	 rax, QWORD PTR px$[rsp]
  00060	48 83 c0 60	 add	 rax, 96			; 00000060H
  00064	48 8b c8	 mov	 rcx, rax
  00067	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_AcquireSRWLockShared

; 1505 :     if (PxPages_Find(px->pages, m))

  0006d	48 8b 54 24 50	 mov	 rdx, QWORD PTR m$[rsp]
  00072	48 8b 44 24 28	 mov	 rax, QWORD PTR px$[rsp]
  00077	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  0007b	e8 00 00 00 00	 call	 PxPages_Find
  00080	85 c0		 test	 eax, eax
  00082	74 08		 je	 SHORT $LN2@Px_MemoryS

; 1506 :         signature = _MEMSIG_PX;

  00084	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR signature$[rsp], 16
$LN2@Px_MemoryS:

; 1507 :     ReleaseSRWLockShared(&px->pages_srwlock);

  0008c	48 8b 44 24 28	 mov	 rax, QWORD PTR px$[rsp]
  00091	48 83 c0 60	 add	 rax, 96			; 00000060H
  00095	48 8b c8	 mov	 rcx, rax
  00098	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ReleaseSRWLockShared

; 1508 : 
; 1509 :     if (signature == _MEMSIG_UNKNOWN && _PyMem_InRange(m))

  0009e	83 7c 24 20 04	 cmp	 DWORD PTR signature$[rsp], 4
  000a3	75 16		 jne	 SHORT $LN1@Px_MemoryS
  000a5	48 8b 4c 24 50	 mov	 rcx, QWORD PTR m$[rsp]
  000aa	e8 00 00 00 00	 call	 _PyMem_InRange
  000af	85 c0		 test	 eax, eax
  000b1	74 08		 je	 SHORT $LN1@Px_MemoryS

; 1510 :         signature = _MEMSIG_PY;

  000b3	c7 44 24 20 08
	00 00 00	 mov	 DWORD PTR signature$[rsp], 8
$LN1@Px_MemoryS:

; 1511 : 
; 1512 :     return signature;

  000bb	8b 44 24 20	 mov	 eax, DWORD PTR signature$[rsp]
$LN5@Px_MemoryS:

; 1513 : }

  000bf	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000c3	c3		 ret	 0
_Px_MemorySignature ENDP
_TEXT	ENDS
PUBLIC	??_C@_1BK@NBLEEGOG@?$AAp?$AAx?$AA?5?$AA?9?$AA?$DO?$AA?5?$AA0?$AAx?$AA8?$AA?4?$AA?4?$AA?6?$AA?$AA@ ; `string'
PUBLIC	??_C@_17KKIMHOM@?$AA?$CB?$AAp?$AAx?$AA?$AA@	; `string'
PUBLIC	??_C@_1EC@ONMHDOMO@?$AA_?$AAP?$AAy?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AAS?$AAt?$AAa?$AAt?$AAe?$AA_?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$CB?$AA?6@ ; `string'
EXTRN	__imp_OutputDebugStringW:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PXSTATE DD imagerel PXSTATE
	DD	imagerel PXSTATE+185
	DD	imagerel $unwind$PXSTATE
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PXSTATE DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_1BK@NBLEEGOG@?$AAp?$AAx?$AA?5?$AA?9?$AA?$DO?$AA?5?$AA0?$AAx?$AA8?$AA?4?$AA?4?$AA?6?$AA?$AA@
CONST	SEGMENT
??_C@_1BK@NBLEEGOG@?$AAp?$AAx?$AA?5?$AA?9?$AA?$DO?$AA?5?$AA0?$AAx?$AA8?$AA?4?$AA?4?$AA?6?$AA?$AA@ DB 'p'
	DB	00H, 'x', 00H, ' ', 00H, '-', 00H, '>', 00H, ' ', 00H, '0', 00H
	DB	'x', 00H, '8', 00H, '.', 00H, '.', 00H, 0aH, 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_17KKIMHOM@?$AA?$CB?$AAp?$AAx?$AA?$AA@
CONST	SEGMENT
??_C@_17KKIMHOM@?$AA?$CB?$AAp?$AAx?$AA?$AA@ DB '!', 00H, 'p', 00H, 'x', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1EC@ONMHDOMO@?$AA_?$AAP?$AAy?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AAS?$AAt?$AAa?$AAt?$AAe?$AA_?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$CB?$AA?6@
CONST	SEGMENT
??_C@_1EC@ONMHDOMO@?$AA_?$AAP?$AAy?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AAS?$AAt?$AAa?$AAt?$AAe?$AA_?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$CB?$AA?6@ DB '_'
	DB	00H, 'P', 00H, 'y', 00H, 'T', 00H, 'h', 00H, 'r', 00H, 'e', 00H
	DB	'a', 00H, 'd', 00H, 'S', 00H, 't', 00H, 'a', 00H, 't', 00H, 'e'
	DB	00H, '_', 00H, 'C', 00H, 'u', 00H, 'r', 00H, 'r', 00H, 'e', 00H
	DB	'n', 00H, 't', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'N'
	DB	00H, 'U', 00H, 'L', 00H, 'L', 00H, '!', 00H, 0aH, 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PXSTATE
_TEXT	SEGMENT
pstate$ = 32
px$ = 40
PXSTATE	PROC						; COMDAT

; 257  : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 258  :     PxState *px;
; 259  :     register PyThreadState *pstate = get_main_thread_state();

  00004	e8 00 00 00 00	 call	 get_main_thread_state
  00009	48 89 44 24 20	 mov	 QWORD PTR pstate$[rsp], rax

; 260  :     if (!pstate) {

  0000e	48 83 7c 24 20
	00		 cmp	 QWORD PTR pstate$[rsp], 0
  00014	75 42		 jne	 SHORT $LN5@PXSTATE

; 261  :         OutputDebugString(L"_PyThreadState_Current == NULL!\n");

  00016	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EC@ONMHDOMO@?$AA_?$AAP?$AAy?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AAS?$AAt?$AAa?$AAt?$AAe?$AA_?$AAC?$AAu?$AAr?$AAr?$AAe?$AAn?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$CB?$AA?6@
  0001d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_OutputDebugStringW

; 262  :         if (Py_PXCTX)

  00023	e8 00 00 00 00	 call	 _Py_PXCTX
  00028	85 c0		 test	 eax, eax
  0002a	74 2a		 je	 SHORT $LN4@PXSTATE

; 263  :             px = ctx->px;

  0002c	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:ctx
  00031	8b c0		 mov	 eax, eax
  00033	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00039	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00042	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  00046	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  0004a	48 8b 80 d8 00
	00 00		 mov	 rax, QWORD PTR [rax+216]
  00051	48 89 44 24 28	 mov	 QWORD PTR px$[rsp], rax
$LN4@PXSTATE:

; 264  :     } else

  00056	eb 11		 jmp	 SHORT $LN3@PXSTATE
$LN5@PXSTATE:

; 265  :         px = (PxState *)pstate->px;

  00058	48 8b 44 24 20	 mov	 rax, QWORD PTR pstate$[rsp]
  0005d	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  00064	48 89 44 24 28	 mov	 QWORD PTR px$[rsp], rax
$LN3@PXSTATE:

; 266  :     if (!px) {

  00069	48 83 7c 24 28
	00		 cmp	 QWORD PTR px$[rsp], 0
  0006f	75 0d		 jne	 SHORT $LN2@PXSTATE

; 267  :         OutputDebugString(L"!px");

  00071	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_17KKIMHOM@?$AA?$CB?$AAp?$AAx?$AA?$AA@
  00078	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_OutputDebugStringW
$LN2@PXSTATE:

; 268  :     }
; 269  :     if ((Px_PTR(px) & 0x0000000800000000) == 0x0000000800000000) {

  0007e	48 b8 00 00 00
	00 08 00 00 00	 mov	 rax, 34359738368	; 0000000800000000H
  00088	48 8b 4c 24 28	 mov	 rcx, QWORD PTR px$[rsp]
  0008d	48 23 c8	 and	 rcx, rax
  00090	48 8b c1	 mov	 rax, rcx
  00093	48 b9 00 00 00
	00 08 00 00 00	 mov	 rcx, 34359738368	; 0000000800000000H
  0009d	48 3b c1	 cmp	 rax, rcx
  000a0	75 0d		 jne	 SHORT $LN1@PXSTATE

; 270  :         OutputDebugString(L"px -> 0x8..\n");

  000a2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BK@NBLEEGOG@?$AAp?$AAx?$AA?5?$AA?9?$AA?$DO?$AA?5?$AA0?$AAx?$AA8?$AA?4?$AA?4?$AA?6?$AA?$AA@
  000a9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_OutputDebugStringW
$LN1@PXSTATE:

; 271  :     }
; 272  :     /*
; 273  :     assert(px);
; 274  :     assert((Px_PTR(px) & 0x0000000800000000) != 0x0000000800000000);
; 275  :     */
; 276  :     return px;

  000af	48 8b 44 24 28	 mov	 rax, QWORD PTR px$[rsp]

; 277  : }

  000b4	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000b8	c3		 ret	 0
PXSTATE	ENDP
_TEXT	ENDS
PUBLIC	??_C@_1FI@KINPDBLO@?$AAP?$AAy?$AA_?$AAA?$AAS?$AAP?$AAX?$AA?$CI?$AAy?$AA?$CJ?$AA?9?$AA?$DO?$AAs?$AAi?$AAg?$AAn?$AAa?$AAt?$AAu?$AAr?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA_?$AAP?$AAx?$AAO?$AAb?$AAj?$AAe@ ; `string'
PUBLIC	??_C@_1BM@KKCMMGBJ@?$AAy?$AA?9?$AA?$DO?$AAp?$AAx?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DE@KMOFJHID@?$AAy?$AA?9?$AA?$DO?$AAp?$AAx?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AA_?$AAN?$AAO?$AAT?$AA_?$AAP?$AAA?$AAR?$AAA?$AAL?$AAL?$AAE?$AAL?$AA?$AA@ ; `string'
PUBLIC	??_C@_1EG@BLLKLMBP@?$AA_?$AAP?$AAx?$AA_?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAS?$AAi?$AAg?$AAn?$AAa?$AAt?$AAu?$AAr?$AAe?$AA_?$AAC?$AAa?$AAl?$AAl?$AAD?$AAe?$AAp?$AAt?$AAh?$AA?5?$AA?$DN?$AA?$DN@ ; `string'
PUBLIC	_Px_ObjectSignature
EXTRN	__C_specific_handler:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Px_ObjectSignature DD imagerel $LN19
	DD	imagerel $LN19+478
	DD	imagerel $unwind$_Px_ObjectSignature
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Px_ObjectSignature$filt$0 DD imagerel _Px_ObjectSignature$filt$0
	DD	imagerel _Px_ObjectSignature$filt$0+61
	DD	imagerel $unwind$_Px_ObjectSignature$filt$0
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Px_ObjectSignature$filt$0 DD 020601H
	DD	050023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Px_ObjectSignature DD 010909H
	DD	0a209H
	DD	imagerel __C_specific_handler
	DD	01H
	DD	imagerel $LN19+160
	DD	imagerel $LN19+175
	DD	imagerel _Px_ObjectSignature$filt$0
	DD	imagerel $LN19+175
xdata	ENDS
;	COMDAT ??_C@_1FI@KINPDBLO@?$AAP?$AAy?$AA_?$AAA?$AAS?$AAP?$AAX?$AA?$CI?$AAy?$AA?$CJ?$AA?9?$AA?$DO?$AAs?$AAi?$AAg?$AAn?$AAa?$AAt?$AAu?$AAr?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA_?$AAP?$AAx?$AAO?$AAb?$AAj?$AAe@
CONST	SEGMENT
??_C@_1FI@KINPDBLO@?$AAP?$AAy?$AA_?$AAA?$AAS?$AAP?$AAX?$AA?$CI?$AAy?$AA?$CJ?$AA?9?$AA?$DO?$AAs?$AAi?$AAg?$AAn?$AAa?$AAt?$AAu?$AAr?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA_?$AAP?$AAx?$AAO?$AAb?$AAj?$AAe@ DB 'P'
	DB	00H, 'y', 00H, '_', 00H, 'A', 00H, 'S', 00H, 'P', 00H, 'X', 00H
	DB	'(', 00H, 'y', 00H, ')', 00H, '-', 00H, '>', 00H, 's', 00H, 'i'
	DB	00H, 'g', 00H, 'n', 00H, 'a', 00H, 't', 00H, 'u', 00H, 'r', 00H
	DB	'e', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '_', 00H, 'P'
	DB	00H, 'x', 00H, 'O', 00H, 'b', 00H, 'j', 00H, 'e', 00H, 'c', 00H
	DB	't', 00H, 'S', 00H, 'i', 00H, 'g', 00H, 'n', 00H, 'a', 00H, 't'
	DB	00H, 'u', 00H, 'r', 00H, 'e', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1BM@KKCMMGBJ@?$AAy?$AA?9?$AA?$DO?$AAp?$AAx?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
CONST	SEGMENT
??_C@_1BM@KKCMMGBJ@?$AAy?$AA?9?$AA?$DO?$AAp?$AAx?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ DB 'y'
	DB	00H, '-', 00H, '>', 00H, 'p', 00H, 'x', 00H, ' ', 00H, '!', 00H
	DB	'=', 00H, ' ', 00H, 'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1DE@KMOFJHID@?$AAy?$AA?9?$AA?$DO?$AAp?$AAx?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AA_?$AAN?$AAO?$AAT?$AA_?$AAP?$AAA?$AAR?$AAA?$AAL?$AAL?$AAE?$AAL?$AA?$AA@
CONST	SEGMENT
??_C@_1DE@KMOFJHID@?$AAy?$AA?9?$AA?$DO?$AAp?$AAx?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AA_?$AAN?$AAO?$AAT?$AA_?$AAP?$AAA?$AAR?$AAA?$AAL?$AAL?$AAE?$AAL?$AA?$AA@ DB 'y'
	DB	00H, '-', 00H, '>', 00H, 'p', 00H, 'x', 00H, ' ', 00H, '=', 00H
	DB	'=', 00H, ' ', 00H, '_', 00H, 'P', 00H, 'y', 00H, '_', 00H, 'N'
	DB	00H, 'O', 00H, 'T', 00H, '_', 00H, 'P', 00H, 'A', 00H, 'R', 00H
	DB	'A', 00H, 'L', 00H, 'L', 00H, 'E', 00H, 'L', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EG@BLLKLMBP@?$AA_?$AAP?$AAx?$AA_?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAS?$AAi?$AAg?$AAn?$AAa?$AAt?$AAu?$AAr?$AAe?$AA_?$AAC?$AAa?$AAl?$AAl?$AAD?$AAe?$AAp?$AAt?$AAh?$AA?5?$AA?$DN?$AA?$DN@
CONST	SEGMENT
??_C@_1EG@BLLKLMBP@?$AA_?$AAP?$AAx?$AA_?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAS?$AAi?$AAg?$AAn?$AAa?$AAt?$AAu?$AAr?$AAe?$AA_?$AAC?$AAa?$AAl?$AAl?$AAD?$AAe?$AAp?$AAt?$AAh?$AA?5?$AA?$DN?$AA?$DN@ DB '_'
	DB	00H, 'P', 00H, 'x', 00H, '_', 00H, 'O', 00H, 'b', 00H, 'j', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'S', 00H, 'i', 00H, 'g', 00H, 'n'
	DB	00H, 'a', 00H, 't', 00H, 'u', 00H, 'r', 00H, 'e', 00H, '_', 00H
	DB	'C', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'D', 00H, 'e', 00H, 'p'
	DB	00H, 't', 00H, 'h', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H
	DB	'0', 00H, 00H, 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Px_ObjectSignature
_TEXT	SEGMENT
y$ = 32
s$ = 40
signature$ = 48
$T134890 = 56
$T134891 = 64
tv129 = 68
m$ = 96
_Px_ObjectSignature PROC				; COMDAT

; 1517 : {

$LN19:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 1518 :     PyObject     *y;
; 1519 :     Py_uintptr_t  s;
; 1520 :     unsigned long signature;
; 1521 : 
; 1522 :     if (!m)

  00009	48 83 7c 24 60
	00		 cmp	 QWORD PTR m$[rsp], 0
  0000f	75 0a		 jne	 SHORT $LN5@Px_ObjectS

; 1523 :         return _OBJSIG_NULL;

  00011	b8 02 00 00 00	 mov	 eax, 2
  00016	e9 be 01 00 00	 jmp	 $LN14@Px_ObjectS
$LN5@Px_ObjectS:

; 1524 : 
; 1525 :     assert(_Px_ObjectSignature_CallDepth == 0);

  0001b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:_Px_ObjectSignature_CallDepth
  00020	8b c0		 mov	 eax, eax
  00022	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00028	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00031	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  00035	83 3c 08 00	 cmp	 DWORD PTR [rax+rcx], 0
  00039	74 1c		 je	 SHORT $LN8@Px_ObjectS
  0003b	41 b8 f5 05 00
	00		 mov	 r8d, 1525		; 000005f5H
  00041	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00048	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EG@BLLKLMBP@?$AA_?$AAP?$AAx?$AA_?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAS?$AAi?$AAg?$AAn?$AAa?$AAt?$AAu?$AAr?$AAe?$AA_?$AAC?$AAa?$AAl?$AAl?$AAD?$AAe?$AAp?$AAt?$AAh?$AA?5?$AA?$DN?$AA?$DN@
  0004f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00055	33 c0		 xor	 eax, eax
$LN8@Px_ObjectS:

; 1526 :     _Px_ObjectSignature_CallDepth++;

  00057	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR _tls_index
  0005d	65 48 8b 0c 25
	58 00 00 00	 mov	 rcx, QWORD PTR gs:88
  00066	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:_Px_ObjectSignature_CallDepth
  0006b	8b d2		 mov	 edx, edx
  0006d	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  00071	8b 04 10	 mov	 eax, DWORD PTR [rax+rdx]
  00074	ff c0		 inc	 eax
  00076	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0007c	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00085	41 b8 00 00 00
	00		 mov	 r8d, OFFSET FLAT:_Px_ObjectSignature_CallDepth
  0008b	45 8b c0	 mov	 r8d, r8d
  0008e	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  00092	41 89 04 08	 mov	 DWORD PTR [r8+rcx], eax

; 1527 : 
; 1528 :     y = (PyObject *)m;

  00096	48 8b 44 24 60	 mov	 rax, QWORD PTR m$[rsp]
  0009b	48 89 44 24 20	 mov	 QWORD PTR y$[rsp], rax

; 1529 : 
; 1530 :     __try {
; 1531 :         s = ((Py_uintptr_t)(y->is_px));

  000a0	48 8b 44 24 20	 mov	 rax, QWORD PTR y$[rsp]
  000a5	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000a8	48 89 44 24 28	 mov	 QWORD PTR s$[rsp], rax

; 1532 :     } __except(

  000ad	eb 09		 jmp	 SHORT $LN18@Px_ObjectS
$LN16@Px_ObjectS:

; 1533 :         GetExceptionCode() == EXCEPTION_ACCESS_VIOLATION ?
; 1534 :             EXCEPTION_EXECUTE_HANDLER :
; 1535 :             EXCEPTION_CONTINUE_SEARCH
; 1536 :     ) {
; 1537 :         s = (Py_uintptr_t)NULL;

  000af	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR s$[rsp], 0
$LN18@Px_ObjectS:

; 1538 :     }
; 1539 : 
; 1540 :     if (!s) {

  000b8	48 83 7c 24 28
	00		 cmp	 QWORD PTR s$[rsp], 0
  000be	75 0d		 jne	 SHORT $LN3@Px_ObjectS

; 1541 :         signature = _OBJSIG_UNKNOWN;

  000c0	c7 44 24 30 04
	00 00 00	 mov	 DWORD PTR signature$[rsp], 4

; 1542 :         goto done;

  000c8	e9 c9 00 00 00	 jmp	 $done$127376
$LN3@Px_ObjectS:

; 1543 :     }
; 1544 : 
; 1545 :     if (s == (Py_uintptr_t)_Py_NOT_PARALLEL) {

  000cd	48 b8 78 56 ef
	be 34 12 ad de	 mov	 rax, -2401243008567650696 ; dead1234beef5678H
  000d7	48 39 44 24 28	 cmp	 QWORD PTR s$[rsp], rax
  000dc	75 3b		 jne	 SHORT $LN2@Px_ObjectS

; 1546 :         assert(y->px == _Py_NOT_PARALLEL);

  000de	48 8b 44 24 20	 mov	 rax, QWORD PTR y$[rsp]
  000e3	48 b9 78 56 ef
	be 34 12 ad de	 mov	 rcx, -2401243008567650696 ; dead1234beef5678H
  000ed	48 39 48 08	 cmp	 QWORD PTR [rax+8], rcx
  000f1	74 1c		 je	 SHORT $LN11@Px_ObjectS
  000f3	41 b8 0a 06 00
	00		 mov	 r8d, 1546		; 0000060aH
  000f9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00100	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@KMOFJHID@?$AAy?$AA?9?$AA?$DO?$AAp?$AAx?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AA_?$AAN?$AAO?$AAT?$AA_?$AAP?$AAA?$AAR?$AAA?$AAL?$AAL?$AAE?$AAL?$AA?$AA@
  00107	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0010d	33 c0		 xor	 eax, eax
$LN11@Px_ObjectS:

; 1547 :         signature = _OBJSIG_PY;

  0010f	c7 44 24 30 08
	00 00 00	 mov	 DWORD PTR signature$[rsp], 8

; 1548 :         goto done;

  00117	eb 7d		 jmp	 SHORT $done$127376
$LN2@Px_ObjectS:

; 1549 :     }
; 1550 : 
; 1551 :     if (s == (Py_uintptr_t)_Py_IS_PARALLEL) {

  00119	48 b8 ad de 32
	54 ef be 76 98	 mov	 rax, -7460565797573566803 ; 9876beef5432deadH
  00123	48 39 44 24 28	 cmp	 QWORD PTR s$[rsp], rax
  00128	75 64		 jne	 SHORT $LN1@Px_ObjectS

; 1552 :         assert(y->px != NULL);

  0012a	48 8b 44 24 20	 mov	 rax, QWORD PTR y$[rsp]
  0012f	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00134	75 1c		 jne	 SHORT $LN12@Px_ObjectS
  00136	41 b8 10 06 00
	00		 mov	 r8d, 1552		; 00000610H
  0013c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00143	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BM@KKCMMGBJ@?$AAy?$AA?9?$AA?$DO?$AAp?$AAx?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
  0014a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00150	33 c0		 xor	 eax, eax
$LN12@Px_ObjectS:

; 1553 :         assert(Py_ASPX(y)->signature == _PxObjectSignature);

  00152	48 8b 44 24 20	 mov	 rax, QWORD PTR y$[rsp]
  00157	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0015b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR _PxObjectSignature
  00162	48 39 48 28	 cmp	 QWORD PTR [rax+40], rcx
  00166	74 1c		 je	 SHORT $LN13@Px_ObjectS
  00168	41 b8 11 06 00
	00		 mov	 r8d, 1553		; 00000611H
  0016e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00175	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FI@KINPDBLO@?$AAP?$AAy?$AA_?$AAA?$AAS?$AAP?$AAX?$AA?$CI?$AAy?$AA?$CJ?$AA?9?$AA?$DO?$AAs?$AAi?$AAg?$AAn?$AAa?$AAt?$AAu?$AAr?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA_?$AAP?$AAx?$AAO?$AAb?$AAj?$AAe@
  0017c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00182	33 c0		 xor	 eax, eax
$LN13@Px_ObjectS:

; 1554 :         signature = _OBJSIG_PX;

  00184	c7 44 24 30 10
	00 00 00	 mov	 DWORD PTR signature$[rsp], 16

; 1555 :         goto done;

  0018c	eb 08		 jmp	 SHORT $done$127376
$LN1@Px_ObjectS:

; 1556 :     }
; 1557 : 
; 1558 :     /* We'll hit this if m is a valid pointer (i.e. dereferencing m->is_px
; 1559 :      * doesn't trigger the SEH), but it doesn't point to something with a
; 1560 :      * valid object signature.
; 1561 :      */
; 1562 :     signature = _OBJSIG_UNKNOWN;

  0018e	c7 44 24 30 04
	00 00 00	 mov	 DWORD PTR signature$[rsp], 4
$done$127376:

; 1563 : done:
; 1564 :     _Px_ObjectSignature_CallDepth--;

  00196	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR _tls_index
  0019c	65 48 8b 0c 25
	58 00 00 00	 mov	 rcx, QWORD PTR gs:88
  001a5	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:_Px_ObjectSignature_CallDepth
  001aa	8b d2		 mov	 edx, edx
  001ac	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  001b0	8b 04 10	 mov	 eax, DWORD PTR [rax+rdx]
  001b3	ff c8		 dec	 eax
  001b5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  001bb	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  001c4	41 b8 00 00 00
	00		 mov	 r8d, OFFSET FLAT:_Px_ObjectSignature_CallDepth
  001ca	45 8b c0	 mov	 r8d, r8d
  001cd	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  001d1	41 89 04 08	 mov	 DWORD PTR [r8+rcx], eax

; 1565 :     return signature;

  001d5	8b 44 24 30	 mov	 eax, DWORD PTR signature$[rsp]
$LN14@Px_ObjectS:

; 1566 : }

  001d9	48 83 c4 58	 add	 rsp, 88			; 00000058H
  001dd	c3		 ret	 0
_Px_ObjectSignature ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
y$ = 32
s$ = 40
signature$ = 48
$T134890 = 56
$T134891 = 64
tv129 = 68
m$ = 96
_Px_ObjectSignature$filt$0 PROC
  00000	40 55		 push	 rbp
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b ea	 mov	 rbp, rdx
$LN15@Px_ObjectS@2:

; 1536 :     ) {

  00009	48 89 4d 38	 mov	 QWORD PTR $T134890[rbp], rcx
  0000d	48 8b 45 38	 mov	 rax, QWORD PTR $T134890[rbp]
  00011	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00014	8b 00		 mov	 eax, DWORD PTR [rax]
  00016	89 45 40	 mov	 DWORD PTR $T134891[rbp], eax
  00019	8b 45 40	 mov	 eax, DWORD PTR $T134891[rbp]
  0001c	3d 05 00 00 c0	 cmp	 eax, -1073741819	; c0000005H
  00021	75 09		 jne	 SHORT $LN9@Px_ObjectS@2
  00023	c7 45 44 01 00
	00 00		 mov	 DWORD PTR tv129[rbp], 1
  0002a	eb 07		 jmp	 SHORT $LN10@Px_ObjectS@2
$LN9@Px_ObjectS@2:
  0002c	c7 45 44 00 00
	00 00		 mov	 DWORD PTR tv129[rbp], 0
$LN10@Px_ObjectS@2:
  00033	8b 45 44	 mov	 eax, DWORD PTR tv129[rbp]
$LN17@Px_ObjectS@2:
  00036	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003a	5d		 pop	 rbp
  0003b	c3		 ret	 0
  0003c	cc		 int	 3
_Px_ObjectSignature$filt$0 ENDP
text$x	ENDS
PUBLIC	??_C@_1BI@BANAPADN@?$AAi?$AAs?$AA_?$AAp?$AAx?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA?9?$AA1?$AA?$AA@ ; `string'
PUBLIC	??_C@_1FG@MIPEGGHJ@?$AA_?$AAP?$AAx?$AA_?$AAS?$AAa?$AAf?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAS?$AAi?$AAg?$AAn?$AAa?$AAt?$AAu?$AAr?$AAe?$AAT?$AAe?$AAs?$AAt?$AA_?$AAC?$AAa?$AAl?$AAl@ ; `string'
PUBLIC	_Px_SafeObjectSignatureTest
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Px_SafeObjectSignatureTest DD imagerel $LN29
	DD	imagerel $LN29+496
	DD	imagerel $unwind$_Px_SafeObjectSignatureTest
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Px_SafeObjectSignatureTest$filt$0 DD imagerel _Px_SafeObjectSignatureTest$filt$0
	DD	imagerel _Px_SafeObjectSignatureTest$filt$0+61
	DD	imagerel $unwind$_Px_SafeObjectSignatureTest$filt$0
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Px_SafeObjectSignatureTest$filt$1 DD imagerel _Px_SafeObjectSignatureTest$filt$1
	DD	imagerel _Px_SafeObjectSignatureTest$filt$1+61
	DD	imagerel $unwind$_Px_SafeObjectSignatureTest$filt$1
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Px_SafeObjectSignatureTest$filt$1 DD 020601H
	DD	050023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Px_SafeObjectSignatureTest$filt$0 DD 020601H
	DD	050023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Px_SafeObjectSignatureTest DD 020c09H
	DD	011010cH
	DD	imagerel __C_specific_handler
	DD	02H
	DD	imagerel $LN29+169
	DD	imagerel $LN29+184
	DD	imagerel _Px_SafeObjectSignatureTest$filt$0
	DD	imagerel $LN29+184
	DD	imagerel $LN29+299
	DD	imagerel $LN29+345
	DD	imagerel _Px_SafeObjectSignatureTest$filt$1
	DD	imagerel $LN29+345
xdata	ENDS
;	COMDAT ??_C@_1BI@BANAPADN@?$AAi?$AAs?$AA_?$AAp?$AAx?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA?9?$AA1?$AA?$AA@
CONST	SEGMENT
??_C@_1BI@BANAPADN@?$AAi?$AAs?$AA_?$AAp?$AAx?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA?9?$AA1?$AA?$AA@ DB 'i'
	DB	00H, 's', 00H, '_', 00H, 'p', 00H, 'x', 00H, ' ', 00H, '!', 00H
	DB	'=', 00H, ' ', 00H, '-', 00H, '1', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1FG@MIPEGGHJ@?$AA_?$AAP?$AAx?$AA_?$AAS?$AAa?$AAf?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAS?$AAi?$AAg?$AAn?$AAa?$AAt?$AAu?$AAr?$AAe?$AAT?$AAe?$AAs?$AAt?$AA_?$AAC?$AAa?$AAl?$AAl@
CONST	SEGMENT
??_C@_1FG@MIPEGGHJ@?$AA_?$AAP?$AAx?$AA_?$AAS?$AAa?$AAf?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAS?$AAi?$AAg?$AAn?$AAa?$AAt?$AAu?$AAr?$AAe?$AAT?$AAe?$AAs?$AAt?$AA_?$AAC?$AAa?$AAl?$AAl@ DB '_'
	DB	00H, 'P', 00H, 'x', 00H, '_', 00H, 'S', 00H, 'a', 00H, 'f', 00H
	DB	'e', 00H, 'O', 00H, 'b', 00H, 'j', 00H, 'e', 00H, 'c', 00H, 't'
	DB	00H, 'S', 00H, 'i', 00H, 'g', 00H, 'n', 00H, 'a', 00H, 't', 00H
	DB	'u', 00H, 'r', 00H, 'e', 00H, 'T', 00H, 'e', 00H, 's', 00H, 't'
	DB	00H, '_', 00H, 'C', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'D', 00H
	DB	'e', 00H, 'p', 00H, 't', 00H, 'h', 00H, ' ', 00H, '=', 00H, '='
	DB	00H, ' ', 00H, '0', 00H, 00H, 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Px_SafeObjectSignatureTest
_TEXT	SEGMENT
x$ = 32
y$ = 40
s$ = 48
is_px$ = 56
signature$ = 60
is_py$ = 64
$T134930 = 72
$T134931 = 80
$T134932 = 88
$T134933 = 96
tv129 = 100
tv132 = 104
tv137 = 108
tv140 = 112
tv147 = 116
m$ = 144
_Px_SafeObjectSignatureTest PROC			; COMDAT

; 1570 : {

$LN29:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 1571 :     PyObject     *y;
; 1572 :     PxObject     *x;
; 1573 :     Py_uintptr_t  s;
; 1574 :     int is_py;
; 1575 :     int is_px;
; 1576 :     unsigned long signature;
; 1577 : 
; 1578 :     if (!m)

  0000c	48 83 bc 24 90
	00 00 00 00	 cmp	 QWORD PTR m$[rsp], 0
  00015	75 0a		 jne	 SHORT $LN5@Px_SafeObj

; 1579 :         return _OBJSIG_NULL;

  00017	b8 02 00 00 00	 mov	 eax, 2
  0001c	e9 c7 01 00 00	 jmp	 $LN20@Px_SafeObj
$LN5@Px_SafeObj:

; 1580 : 
; 1581 :     y = (PyObject *)m;

  00021	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR m$[rsp]
  00029	48 89 44 24 28	 mov	 QWORD PTR y$[rsp], rax

; 1582 : 
; 1583 :     assert(_Px_SafeObjectSignatureTest_CallDepth == 0);

  0002e	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:_Px_SafeObjectSignatureTest_CallDepth
  00033	8b c0		 mov	 eax, eax
  00035	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0003b	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00044	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  00048	83 3c 08 00	 cmp	 DWORD PTR [rax+rcx], 0
  0004c	74 1c		 je	 SHORT $LN8@Px_SafeObj
  0004e	41 b8 2f 06 00
	00		 mov	 r8d, 1583		; 0000062fH
  00054	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0005b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FG@MIPEGGHJ@?$AA_?$AAP?$AAx?$AA_?$AAS?$AAa?$AAf?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAS?$AAi?$AAg?$AAn?$AAa?$AAt?$AAu?$AAr?$AAe?$AAT?$AAe?$AAs?$AAt?$AA_?$AAC?$AAa?$AAl?$AAl@
  00062	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00068	33 c0		 xor	 eax, eax
$LN8@Px_SafeObj:

; 1584 :     _Px_SafeObjectSignatureTest_CallDepth++;

  0006a	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR _tls_index
  00070	65 48 8b 0c 25
	58 00 00 00	 mov	 rcx, QWORD PTR gs:88
  00079	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:_Px_SafeObjectSignatureTest_CallDepth
  0007e	8b d2		 mov	 edx, edx
  00080	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  00084	8b 04 10	 mov	 eax, DWORD PTR [rax+rdx]
  00087	ff c0		 inc	 eax
  00089	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0008f	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00098	41 b8 00 00 00
	00		 mov	 r8d, OFFSET FLAT:_Px_SafeObjectSignatureTest_CallDepth
  0009e	45 8b c0	 mov	 r8d, r8d
  000a1	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  000a5	41 89 04 08	 mov	 DWORD PTR [r8+rcx], eax

; 1585 : 
; 1586 :     __try {
; 1587 :         s = ((Py_uintptr_t)(y->is_px));

  000a9	48 8b 44 24 28	 mov	 rax, QWORD PTR y$[rsp]
  000ae	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000b1	48 89 44 24 30	 mov	 QWORD PTR s$[rsp], rax

; 1588 :     } __except(

  000b6	eb 09		 jmp	 SHORT $LN24@Px_SafeObj
$LN22@Px_SafeObj:

; 1589 :         GetExceptionCode() == EXCEPTION_ACCESS_VIOLATION ?
; 1590 :             EXCEPTION_EXECUTE_HANDLER :
; 1591 :             EXCEPTION_CONTINUE_SEARCH
; 1592 :     ) {
; 1593 :         s = (Py_uintptr_t)NULL;

  000b8	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR s$[rsp], 0
$LN24@Px_SafeObj:

; 1594 :     }
; 1595 : 
; 1596 :     if (!s) {

  000c1	48 83 7c 24 30
	00		 cmp	 QWORD PTR s$[rsp], 0
  000c7	75 0d		 jne	 SHORT $LN3@Px_SafeObj

; 1597 :         signature = _OBJSIG_UNKNOWN;

  000c9	c7 44 24 3c 04
	00 00 00	 mov	 DWORD PTR signature$[rsp], 4

; 1598 :         goto done;

  000d1	e9 cf 00 00 00	 jmp	 $done$127413
$LN3@Px_SafeObj:

; 1599 :     }
; 1600 : 
; 1601 :     is_py = (s == (Py_uintptr_t)_Py_NOT_PARALLEL);

  000d6	48 b8 78 56 ef
	be 34 12 ad de	 mov	 rax, -2401243008567650696 ; dead1234beef5678H
  000e0	48 39 44 24 30	 cmp	 QWORD PTR s$[rsp], rax
  000e5	75 0a		 jne	 SHORT $LN11@Px_SafeObj
  000e7	c7 44 24 68 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  000ef	eb 08		 jmp	 SHORT $LN12@Px_SafeObj
$LN11@Px_SafeObj:
  000f1	c7 44 24 68 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
$LN12@Px_SafeObj:
  000f9	8b 44 24 68	 mov	 eax, DWORD PTR tv132[rsp]
  000fd	89 44 24 40	 mov	 DWORD PTR is_py$[rsp], eax

; 1602 : 
; 1603 :     if (is_py) {

  00101	83 7c 24 40 00	 cmp	 DWORD PTR is_py$[rsp], 0
  00106	74 0d		 je	 SHORT $LN2@Px_SafeObj

; 1604 :         signature = _OBJSIG_PY;

  00108	c7 44 24 3c 08
	00 00 00	 mov	 DWORD PTR signature$[rsp], 8

; 1605 :         goto done;

  00110	e9 90 00 00 00	 jmp	 $done$127413
$LN2@Px_SafeObj:

; 1606 :     }
; 1607 : 
; 1608 :     is_px = -1;

  00115	c7 44 24 38 ff
	ff ff ff	 mov	 DWORD PTR is_px$[rsp], -1

; 1609 :     x = Py_ASPX(y);

  0011d	48 8b 44 24 28	 mov	 rax, QWORD PTR y$[rsp]
  00122	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00126	48 89 44 24 20	 mov	 QWORD PTR x$[rsp], rax

; 1610 :     __try {
; 1611 :         is_px = (x->signature == _PxObjectSignature);

  0012b	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  00130	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR _PxObjectSignature
  00137	48 39 48 28	 cmp	 QWORD PTR [rax+40], rcx
  0013b	75 0a		 jne	 SHORT $LN13@Px_SafeObj
  0013d	c7 44 24 6c 01
	00 00 00	 mov	 DWORD PTR tv137[rsp], 1
  00145	eb 08		 jmp	 SHORT $LN14@Px_SafeObj
$LN13@Px_SafeObj:
  00147	c7 44 24 6c 00
	00 00 00	 mov	 DWORD PTR tv137[rsp], 0
$LN14@Px_SafeObj:
  0014f	8b 44 24 6c	 mov	 eax, DWORD PTR tv137[rsp]
  00153	89 44 24 38	 mov	 DWORD PTR is_px$[rsp], eax

; 1612 :     } __except(

  00157	eb 08		 jmp	 SHORT $LN28@Px_SafeObj
$LN26@Px_SafeObj:

; 1613 :         GetExceptionCode() == EXCEPTION_ACCESS_VIOLATION ?
; 1614 :             EXCEPTION_EXECUTE_HANDLER :
; 1615 :             EXCEPTION_CONTINUE_SEARCH
; 1616 :     ) {
; 1617 :         is_px = 0;

  00159	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR is_px$[rsp], 0
$LN28@Px_SafeObj:

; 1618 :     }
; 1619 : 
; 1620 :     assert(is_px != -1);

  00161	83 7c 24 38 ff	 cmp	 DWORD PTR is_px$[rsp], -1
  00166	75 1c		 jne	 SHORT $LN17@Px_SafeObj
  00168	41 b8 54 06 00
	00		 mov	 r8d, 1620		; 00000654H
  0016e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00175	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BI@BANAPADN@?$AAi?$AAs?$AA_?$AAp?$AAx?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA?9?$AA1?$AA?$AA@
  0017c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00182	33 c0		 xor	 eax, eax
$LN17@Px_SafeObj:

; 1621 : 
; 1622 :     signature = (is_px ? _OBJSIG_PX : _OBJSIG_UNKNOWN);

  00184	83 7c 24 38 00	 cmp	 DWORD PTR is_px$[rsp], 0
  00189	74 0a		 je	 SHORT $LN18@Px_SafeObj
  0018b	c7 44 24 74 10
	00 00 00	 mov	 DWORD PTR tv147[rsp], 16
  00193	eb 08		 jmp	 SHORT $LN19@Px_SafeObj
$LN18@Px_SafeObj:
  00195	c7 44 24 74 04
	00 00 00	 mov	 DWORD PTR tv147[rsp], 4
$LN19@Px_SafeObj:
  0019d	8b 44 24 74	 mov	 eax, DWORD PTR tv147[rsp]
  001a1	89 44 24 3c	 mov	 DWORD PTR signature$[rsp], eax
$done$127413:

; 1623 : done:
; 1624 :     _Px_SafeObjectSignatureTest_CallDepth--;

  001a5	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR _tls_index
  001ab	65 48 8b 0c 25
	58 00 00 00	 mov	 rcx, QWORD PTR gs:88
  001b4	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:_Px_SafeObjectSignatureTest_CallDepth
  001b9	8b d2		 mov	 edx, edx
  001bb	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  001bf	8b 04 10	 mov	 eax, DWORD PTR [rax+rdx]
  001c2	ff c8		 dec	 eax
  001c4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  001ca	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  001d3	41 b8 00 00 00
	00		 mov	 r8d, OFFSET FLAT:_Px_SafeObjectSignatureTest_CallDepth
  001d9	45 8b c0	 mov	 r8d, r8d
  001dc	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  001e0	41 89 04 08	 mov	 DWORD PTR [r8+rcx], eax

; 1625 :     return signature;

  001e4	8b 44 24 3c	 mov	 eax, DWORD PTR signature$[rsp]
$LN20@Px_SafeObj:

; 1626 : }

  001e8	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  001ef	c3		 ret	 0
_Px_SafeObjectSignatureTest ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
x$ = 32
y$ = 40
s$ = 48
is_px$ = 56
signature$ = 60
is_py$ = 64
$T134930 = 72
$T134931 = 80
$T134932 = 88
$T134933 = 96
tv129 = 100
tv132 = 104
tv137 = 108
tv140 = 112
tv147 = 116
m$ = 144
_Px_SafeObjectSignatureTest$filt$0 PROC
  00000	40 55		 push	 rbp
  00002	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00006	48 8b ea	 mov	 rbp, rdx
$LN21@Px_SafeObj@2:

; 1592 :     ) {

  00009	48 89 4d 58	 mov	 QWORD PTR $T134932[rbp], rcx
  0000d	48 8b 45 58	 mov	 rax, QWORD PTR $T134932[rbp]
  00011	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00014	8b 00		 mov	 eax, DWORD PTR [rax]
  00016	89 45 60	 mov	 DWORD PTR $T134933[rbp], eax
  00019	8b 45 60	 mov	 eax, DWORD PTR $T134933[rbp]
  0001c	3d 05 00 00 c0	 cmp	 eax, -1073741819	; c0000005H
  00021	75 09		 jne	 SHORT $LN9@Px_SafeObj@2
  00023	c7 45 64 01 00
	00 00		 mov	 DWORD PTR tv129[rbp], 1
  0002a	eb 07		 jmp	 SHORT $LN10@Px_SafeObj@2
$LN9@Px_SafeObj@2:
  0002c	c7 45 64 00 00
	00 00		 mov	 DWORD PTR tv129[rbp], 0
$LN10@Px_SafeObj@2:
  00033	8b 45 64	 mov	 eax, DWORD PTR tv129[rbp]
$LN23@Px_SafeObj@2:
  00036	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0003a	5d		 pop	 rbp
  0003b	c3		 ret	 0
  0003c	cc		 int	 3
_Px_SafeObjectSignatureTest$filt$0 ENDP
; Function compile flags: /Odtp
x$ = 32
y$ = 40
s$ = 48
is_px$ = 56
signature$ = 60
is_py$ = 64
$T134930 = 72
$T134931 = 80
$T134932 = 88
$T134933 = 96
tv129 = 100
tv132 = 104
tv137 = 108
tv140 = 112
tv147 = 116
m$ = 144
_Px_SafeObjectSignatureTest$filt$1 PROC
  00040	40 55		 push	 rbp
  00042	48 83 ec 20	 sub	 rsp, 32			; 00000020H
  00046	48 8b ea	 mov	 rbp, rdx
$LN25@Px_SafeObj@3:

; 1616 :     ) {

  00049	48 89 4d 48	 mov	 QWORD PTR $T134930[rbp], rcx
  0004d	48 8b 45 48	 mov	 rax, QWORD PTR $T134930[rbp]
  00051	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00054	8b 00		 mov	 eax, DWORD PTR [rax]
  00056	89 45 50	 mov	 DWORD PTR $T134931[rbp], eax
  00059	8b 45 50	 mov	 eax, DWORD PTR $T134931[rbp]
  0005c	3d 05 00 00 c0	 cmp	 eax, -1073741819	; c0000005H
  00061	75 09		 jne	 SHORT $LN15@Px_SafeObj@3
  00063	c7 45 70 01 00
	00 00		 mov	 DWORD PTR tv140[rbp], 1
  0006a	eb 07		 jmp	 SHORT $LN16@Px_SafeObj@3
$LN15@Px_SafeObj@3:
  0006c	c7 45 70 00 00
	00 00		 mov	 DWORD PTR tv140[rbp], 0
$LN16@Px_SafeObj@3:
  00073	8b 45 70	 mov	 eax, DWORD PTR tv140[rbp]
$LN27@Px_SafeObj@3:
  00076	48 83 c4 20	 add	 rsp, 32			; 00000020H
  0007a	5d		 pop	 rbp
  0007b	c3		 ret	 0
  0007c	cc		 int	 3
_Px_SafeObjectSignatureTest$filt$1 ENDP
text$x	ENDS
PUBLIC	??_C@_1BO@NNOKCBCN@?$AAs?$AA?5?$AA?$CG?$AA?5?$AA_?$AAO?$AAB?$AAJ?$AAS?$AAI?$AAG?$AA_?$AAP?$AAX?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BO@GFFGEGEI@?$AAs?$AA?5?$AA?$CG?$AA?5?$AA_?$AAO?$AAB?$AAJ?$AAS?$AAI?$AAG?$AA_?$AAP?$AAY?$AA?$AA@ ; `string'
PUBLIC	??_C@_1EM@EMFGMHHE@?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5?$AA?$CI?$AA_?$AAP?$AAY?$AAO?$AAB?$AAJ?$AA_?$AAG?$AAU?$AAA?$AAR?$AAD?$AA?5?$AA?$HM?$AA?5?$AA_?$AAP?$AAX?$AAO?$AAB?$AAJ?$AA_?$AAG@ ; `string'
PUBLIC	??_C@_13BHPHAPDN@?$AAm?$AA?$AA@			; `string'
PUBLIC	??_C@_1DM@NHIBJJMM@?$AAs?$AA?5?$AA?$CG?$AA?5?$AA?$CI?$AA_?$AAO?$AAB?$AAJ?$AAS?$AAI?$AAG?$AA_?$AAP?$AAY?$AA?5?$AA?$HM?$AA?5?$AA_?$AAO?$AAB?$AAJ?$AAS?$AAI?$AAG?$AA_?$AAP?$AAX?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1GA@CFBMDNJP@?$AAs?$AA?5?$AA?$CG?$AA?5?$AA?$CI?$AA_?$AAO?$AAB?$AAJ?$AAS?$AAI?$AAG?$AA_?$AAU?$AAN?$AAK?$AAN?$AAO?$AAW?$AAN?$AA?5?$AA?$HM?$AA?5?$AA_?$AAO?$AAB?$AAJ?$AAS?$AAI?$AAG?$AA_?$AAP@ ; `string'
PUBLIC	??_C@_1CA@HHPLIOGA@?$AA_?$AAO?$AAB?$AAJ?$AAT?$AAE?$AAS?$AAT?$AA?$CI?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	Py_popcnt_u32
PUBLIC	_PyParallel_GuardObj
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyParallel_GuardObj DD imagerel $LN35
	DD	imagerel $LN35+705
	DD	imagerel $unwind$_PyParallel_GuardObj
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyParallel_GuardObj DD 011801H
	DD	08218H
xdata	ENDS
;	COMDAT ??_C@_1BO@NNOKCBCN@?$AAs?$AA?5?$AA?$CG?$AA?5?$AA_?$AAO?$AAB?$AAJ?$AAS?$AAI?$AAG?$AA_?$AAP?$AAX?$AA?$AA@
CONST	SEGMENT
??_C@_1BO@NNOKCBCN@?$AAs?$AA?5?$AA?$CG?$AA?5?$AA_?$AAO?$AAB?$AAJ?$AAS?$AAI?$AAG?$AA_?$AAP?$AAX?$AA?$AA@ DB 's'
	DB	00H, ' ', 00H, '&', 00H, ' ', 00H, '_', 00H, 'O', 00H, 'B', 00H
	DB	'J', 00H, 'S', 00H, 'I', 00H, 'G', 00H, '_', 00H, 'P', 00H, 'X'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1BO@GFFGEGEI@?$AAs?$AA?5?$AA?$CG?$AA?5?$AA_?$AAO?$AAB?$AAJ?$AAS?$AAI?$AAG?$AA_?$AAP?$AAY?$AA?$AA@
CONST	SEGMENT
??_C@_1BO@GFFGEGEI@?$AAs?$AA?5?$AA?$CG?$AA?5?$AA_?$AAO?$AAB?$AAJ?$AAS?$AAI?$AAG?$AA_?$AAP?$AAY?$AA?$AA@ DB 's'
	DB	00H, ' ', 00H, '&', 00H, ' ', 00H, '_', 00H, 'O', 00H, 'B', 00H
	DB	'J', 00H, 'S', 00H, 'I', 00H, 'G', 00H, '_', 00H, 'P', 00H, 'Y'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1EM@EMFGMHHE@?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5?$AA?$CI?$AA_?$AAP?$AAY?$AAO?$AAB?$AAJ?$AA_?$AAG?$AAU?$AAA?$AAR?$AAD?$AA?5?$AA?$HM?$AA?5?$AA_?$AAP?$AAX?$AAO?$AAB?$AAJ?$AA_?$AAG@
CONST	SEGMENT
??_C@_1EM@EMFGMHHE@?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5?$AA?$CI?$AA_?$AAP?$AAY?$AAO?$AAB?$AAJ?$AA_?$AAG?$AAU?$AAA?$AAR?$AAD?$AA?5?$AA?$HM?$AA?5?$AA_?$AAP?$AAX?$AAO?$AAB?$AAJ?$AA_?$AAG@ DB 'f'
	DB	00H, 'l', 00H, 'a', 00H, 'g', 00H, 's', 00H, ' ', 00H, '&', 00H
	DB	' ', 00H, '(', 00H, '_', 00H, 'P', 00H, 'Y', 00H, 'O', 00H, 'B'
	DB	00H, 'J', 00H, '_', 00H, 'G', 00H, 'U', 00H, 'A', 00H, 'R', 00H
	DB	'D', 00H, ' ', 00H, '|', 00H, ' ', 00H, '_', 00H, 'P', 00H, 'X'
	DB	00H, 'O', 00H, 'B', 00H, 'J', 00H, '_', 00H, 'G', 00H, 'U', 00H
	DB	'A', 00H, 'R', 00H, 'D', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_13BHPHAPDN@?$AAm?$AA?$AA@
CONST	SEGMENT
??_C@_13BHPHAPDN@?$AAm?$AA?$AA@ DB 'm', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1DM@NHIBJJMM@?$AAs?$AA?5?$AA?$CG?$AA?5?$AA?$CI?$AA_?$AAO?$AAB?$AAJ?$AAS?$AAI?$AAG?$AA_?$AAP?$AAY?$AA?5?$AA?$HM?$AA?5?$AA_?$AAO?$AAB?$AAJ?$AAS?$AAI?$AAG?$AA_?$AAP?$AAX?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DM@NHIBJJMM@?$AAs?$AA?5?$AA?$CG?$AA?5?$AA?$CI?$AA_?$AAO?$AAB?$AAJ?$AAS?$AAI?$AAG?$AA_?$AAP?$AAY?$AA?5?$AA?$HM?$AA?5?$AA_?$AAO?$AAB?$AAJ?$AAS?$AAI?$AAG?$AA_?$AAP?$AAX?$AA?$CJ?$AA?$AA@ DB 's'
	DB	00H, ' ', 00H, '&', 00H, ' ', 00H, '(', 00H, '_', 00H, 'O', 00H
	DB	'B', 00H, 'J', 00H, 'S', 00H, 'I', 00H, 'G', 00H, '_', 00H, 'P'
	DB	00H, 'Y', 00H, ' ', 00H, '|', 00H, ' ', 00H, '_', 00H, 'O', 00H
	DB	'B', 00H, 'J', 00H, 'S', 00H, 'I', 00H, 'G', 00H, '_', 00H, 'P'
	DB	00H, 'X', 00H, ')', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1GA@CFBMDNJP@?$AAs?$AA?5?$AA?$CG?$AA?5?$AA?$CI?$AA_?$AAO?$AAB?$AAJ?$AAS?$AAI?$AAG?$AA_?$AAU?$AAN?$AAK?$AAN?$AAO?$AAW?$AAN?$AA?5?$AA?$HM?$AA?5?$AA_?$AAO?$AAB?$AAJ?$AAS?$AAI?$AAG?$AA_?$AAP@
CONST	SEGMENT
??_C@_1GA@CFBMDNJP@?$AAs?$AA?5?$AA?$CG?$AA?5?$AA?$CI?$AA_?$AAO?$AAB?$AAJ?$AAS?$AAI?$AAG?$AA_?$AAU?$AAN?$AAK?$AAN?$AAO?$AAW?$AAN?$AA?5?$AA?$HM?$AA?5?$AA_?$AAO?$AAB?$AAJ?$AAS?$AAI?$AAG?$AA_?$AAP@ DB 's'
	DB	00H, ' ', 00H, '&', 00H, ' ', 00H, '(', 00H, '_', 00H, 'O', 00H
	DB	'B', 00H, 'J', 00H, 'S', 00H, 'I', 00H, 'G', 00H, '_', 00H, 'U'
	DB	00H, 'N', 00H, 'K', 00H, 'N', 00H, 'O', 00H, 'W', 00H, 'N', 00H
	DB	' ', 00H, '|', 00H, ' ', 00H, '_', 00H, 'O', 00H, 'B', 00H, 'J'
	DB	00H, 'S', 00H, 'I', 00H, 'G', 00H, '_', 00H, 'P', 00H, 'X', 00H
	DB	' ', 00H, '|', 00H, ' ', 00H, '_', 00H, 'O', 00H, 'B', 00H, 'J'
	DB	00H, 'S', 00H, 'I', 00H, 'G', 00H, '_', 00H, 'P', 00H, 'Y', 00H
	DB	')', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CA@HHPLIOGA@?$AA_?$AAO?$AAB?$AAJ?$AAT?$AAE?$AAS?$AAT?$AA?$CI?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CA@HHPLIOGA@?$AA_?$AAO?$AAB?$AAJ?$AAT?$AAE?$AAS?$AAT?$AA?$CI?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?$CJ?$AA?$AA@ DB '_'
	DB	00H, 'O', 00H, 'B', 00H, 'J', 00H, 'T', 00H, 'E', 00H, 'S', 00H
	DB	'T', 00H, '(', 00H, 'f', 00H, 'l', 00H, 'a', 00H, 'g', 00H, 's'
	DB	00H, ')', 00H, 00H, 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PyParallel_GuardObj
_TEXT	SEGMENT
s$ = 32
o$ = 36
tv81 = 40
tv146 = 44
tv144 = 48
tv149 = 52
tv155 = 56
function$ = 80
filename$ = 88
lineno$ = 96
m$ = 104
flags$ = 112
_PyParallel_GuardObj PROC				; COMDAT

; 1634 : {

$LN35:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1635 :     unsigned long s, o;
; 1636 : 
; 1637 :     assert(_OBJTEST(flags));

  00018	8b 4c 24 70	 mov	 ecx, DWORD PTR flags$[rsp]
  0001c	e8 00 00 00 00	 call	 Py_popcnt_u32
  00021	85 c0		 test	 eax, eax
  00023	74 0e		 je	 SHORT $LN17@PyParallel@8
  00025	83 7c 24 70 02	 cmp	 DWORD PTR flags$[rsp], 2
  0002a	72 07		 jb	 SHORT $LN17@PyParallel@8
  0002c	83 7c 24 70 40	 cmp	 DWORD PTR flags$[rsp], 64 ; 00000040H
  00031	76 1c		 jbe	 SHORT $LN18@PyParallel@8
$LN17@PyParallel@8:
  00033	41 b8 65 06 00
	00		 mov	 r8d, 1637		; 00000665H
  00039	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00040	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CA@HHPLIOGA@?$AA_?$AAO?$AAB?$AAJ?$AAT?$AAE?$AAS?$AAT?$AA?$CI?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?$CJ?$AA?$AA@
  00047	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0004d	33 c0		 xor	 eax, eax
$LN18@PyParallel@8:

; 1638 : 
; 1639 :     if (_PyParallel_Finalized)

  0004f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _PyParallel_Finalized, 0
  00056	74 3d		 je	 SHORT $LN14@PyParallel@8

; 1640 :         return (_PYTEST(flags) ? 1 : 0);

  00058	8b 4c 24 70	 mov	 ecx, DWORD PTR flags$[rsp]
  0005c	e8 00 00 00 00	 call	 Py_popcnt_u32
  00061	85 c0		 test	 eax, eax
  00063	74 1f		 je	 SHORT $LN19@PyParallel@8
  00065	8b 4c 24 70	 mov	 ecx, DWORD PTR flags$[rsp]
  00069	e8 00 00 00 00	 call	 _px_bitpos_uint32
  0006e	99		 cdq
  0006f	83 e0 01	 and	 eax, 1
  00072	33 c2		 xor	 eax, edx
  00074	2b c2		 sub	 eax, edx
  00076	85 c0		 test	 eax, eax
  00078	74 0a		 je	 SHORT $LN19@PyParallel@8
  0007a	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR tv81[rsp], 1
  00082	eb 08		 jmp	 SHORT $LN20@PyParallel@8
$LN19@PyParallel@8:
  00084	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR tv81[rsp], 0
$LN20@PyParallel@8:
  0008c	8b 44 24 28	 mov	 eax, DWORD PTR tv81[rsp]
  00090	e9 27 02 00 00	 jmp	 $LN15@PyParallel@8
$LN14@PyParallel@8:

; 1641 : 
; 1642 :     if (m) {

  00095	48 83 7c 24 68
	00		 cmp	 QWORD PTR m$[rsp], 0
  0009b	74 73		 je	 SHORT $LN13@PyParallel@8

; 1643 :         o = _Px_SafeObjectSignatureTest(m);

  0009d	48 8b 4c 24 68	 mov	 rcx, QWORD PTR m$[rsp]
  000a2	e8 00 00 00 00	 call	 _Px_SafeObjectSignatureTest
  000a7	89 44 24 24	 mov	 DWORD PTR o$[rsp], eax

; 1644 :         s = _Px_MemorySignature(m);

  000ab	48 8b 4c 24 68	 mov	 rcx, QWORD PTR m$[rsp]
  000b0	e8 00 00 00 00	 call	 _Px_MemorySignature
  000b5	89 44 24 20	 mov	 DWORD PTR s$[rsp], eax

; 1645 :         if (s & _MEMSIG_NOT_READY || (o > s))

  000b9	8b 44 24 20	 mov	 eax, DWORD PTR s$[rsp]
  000bd	83 e0 01	 and	 eax, 1
  000c0	85 c0		 test	 eax, eax
  000c2	75 0a		 jne	 SHORT $LN11@PyParallel@8
  000c4	8b 44 24 20	 mov	 eax, DWORD PTR s$[rsp]
  000c8	39 44 24 24	 cmp	 DWORD PTR o$[rsp], eax
  000cc	76 08		 jbe	 SHORT $LN12@PyParallel@8
$LN11@PyParallel@8:

; 1646 :             s = o;

  000ce	8b 44 24 24	 mov	 eax, DWORD PTR o$[rsp]
  000d2	89 44 24 20	 mov	 DWORD PTR s$[rsp], eax
$LN12@PyParallel@8:

; 1647 : 
; 1648 :         if (s & (_OBJSIG_UNKNOWN))

  000d6	8b 44 24 20	 mov	 eax, DWORD PTR s$[rsp]
  000da	83 e0 04	 and	 eax, 4
  000dd	85 c0		 test	 eax, eax
  000df	74 08		 je	 SHORT $LN10@PyParallel@8

; 1649 :             s = _OBJSIG_PY;

  000e1	c7 44 24 20 08
	00 00 00	 mov	 DWORD PTR s$[rsp], 8
$LN10@PyParallel@8:

; 1650 : 
; 1651 :         assert(s & (_OBJSIG_UNKNOWN | _OBJSIG_PX | _OBJSIG_PY));

  000e9	8b 44 24 20	 mov	 eax, DWORD PTR s$[rsp]
  000ed	83 e0 1c	 and	 eax, 28
  000f0	85 c0		 test	 eax, eax
  000f2	75 1c		 jne	 SHORT $LN21@PyParallel@8
  000f4	41 b8 73 06 00
	00		 mov	 r8d, 1651		; 00000673H
  000fa	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00101	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1GA@CFBMDNJP@?$AAs?$AA?5?$AA?$CG?$AA?5?$AA?$CI?$AA_?$AAO?$AAB?$AAJ?$AAS?$AAI?$AAG?$AA_?$AAU?$AAN?$AAK?$AAN?$AAO?$AAW?$AAN?$AA?5?$AA?$HM?$AA?5?$AA_?$AAO?$AAB?$AAJ?$AAS?$AAI?$AAG?$AA_?$AAP@
  00108	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0010e	33 c0		 xor	 eax, eax
$LN21@PyParallel@8:
$LN13@PyParallel@8:

; 1652 :     }
; 1653 : 
; 1654 :     if (flags & (_PXOBJ_TEST | _PY_ISPX_TEST)) {

  00110	8b 44 24 70	 mov	 eax, DWORD PTR flags$[rsp]
  00114	83 e0 14	 and	 eax, 20
  00117	85 c0		 test	 eax, eax
  00119	0f 84 af 00 00
	00		 je	 $LN9@PyParallel@8

; 1655 : 
; 1656 :         if (!m)

  0011f	48 83 7c 24 68
	00		 cmp	 QWORD PTR m$[rsp], 0
  00125	75 07		 jne	 SHORT $LN8@PyParallel@8

; 1657 :             return 0;

  00127	33 c0		 xor	 eax, eax
  00129	e9 8e 01 00 00	 jmp	 $LN15@PyParallel@8
$LN8@PyParallel@8:

; 1658 : 
; 1659 :         if (flags & _PY_ISPX_TEST) {

  0012e	8b 44 24 70	 mov	 eax, DWORD PTR flags$[rsp]
  00132	83 e0 10	 and	 eax, 16
  00135	85 c0		 test	 eax, eax
  00137	74 69		 je	 SHORT $LN7@PyParallel@8

; 1660 :             /* Special case for Py_ISPX(o); o must be a valid object. */
; 1661 :             assert(s & (_OBJSIG_PY | _OBJSIG_PX));

  00139	8b 44 24 20	 mov	 eax, DWORD PTR s$[rsp]
  0013d	83 e0 18	 and	 eax, 24
  00140	85 c0		 test	 eax, eax
  00142	75 1c		 jne	 SHORT $LN22@PyParallel@8
  00144	41 b8 7d 06 00
	00		 mov	 r8d, 1661		; 0000067dH
  0014a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00151	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DM@NHIBJJMM@?$AAs?$AA?5?$AA?$CG?$AA?5?$AA?$CI?$AA_?$AAO?$AAB?$AAJ?$AAS?$AAI?$AAG?$AA_?$AAP?$AAY?$AA?5?$AA?$HM?$AA?5?$AA_?$AAO?$AAB?$AAJ?$AAS?$AAI?$AAG?$AA_?$AAP?$AAX?$AA?$CJ?$AA?$AA@
  00158	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0015e	33 c0		 xor	 eax, eax
$LN22@PyParallel@8:

; 1662 :             return (Py_PXCTX ? 1 : ((s & _OBJSIG_PX) == _OBJSIG_PX) ? 1 : 0);

  00160	e8 00 00 00 00	 call	 _Py_PXCTX
  00165	85 c0		 test	 eax, eax
  00167	74 0a		 je	 SHORT $LN25@PyParallel@8
  00169	c7 44 24 2c 01
	00 00 00	 mov	 DWORD PTR tv146[rsp], 1
  00171	eb 26		 jmp	 SHORT $LN26@PyParallel@8
$LN25@PyParallel@8:
  00173	8b 44 24 20	 mov	 eax, DWORD PTR s$[rsp]
  00177	83 e0 10	 and	 eax, 16
  0017a	83 f8 10	 cmp	 eax, 16
  0017d	75 0a		 jne	 SHORT $LN23@PyParallel@8
  0017f	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv144[rsp], 1
  00187	eb 08		 jmp	 SHORT $LN24@PyParallel@8
$LN23@PyParallel@8:
  00189	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv144[rsp], 0
$LN24@PyParallel@8:
  00191	8b 44 24 30	 mov	 eax, DWORD PTR tv144[rsp]
  00195	89 44 24 2c	 mov	 DWORD PTR tv146[rsp], eax
$LN26@PyParallel@8:
  00199	8b 44 24 2c	 mov	 eax, DWORD PTR tv146[rsp]
  0019d	e9 1a 01 00 00	 jmp	 $LN15@PyParallel@8
$LN7@PyParallel@8:

; 1663 :         }
; 1664 : 
; 1665 :         return ((s & _OBJSIG_PX) == _OBJSIG_PX);

  001a2	8b 44 24 20	 mov	 eax, DWORD PTR s$[rsp]
  001a6	83 e0 10	 and	 eax, 16
  001a9	83 f8 10	 cmp	 eax, 16
  001ac	75 0a		 jne	 SHORT $LN27@PyParallel@8
  001ae	c7 44 24 34 01
	00 00 00	 mov	 DWORD PTR tv149[rsp], 1
  001b6	eb 08		 jmp	 SHORT $LN28@PyParallel@8
$LN27@PyParallel@8:
  001b8	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR tv149[rsp], 0
$LN28@PyParallel@8:
  001c0	8b 44 24 34	 mov	 eax, DWORD PTR tv149[rsp]
  001c4	e9 f3 00 00 00	 jmp	 $LN15@PyParallel@8
  001c9	e9 ee 00 00 00	 jmp	 $LN6@PyParallel@8
$LN9@PyParallel@8:

; 1666 : 
; 1667 :     } else if (flags & _PYOBJ_TEST) {

  001ce	8b 44 24 70	 mov	 eax, DWORD PTR flags$[rsp]
  001d2	83 e0 02	 and	 eax, 2
  001d5	85 c0		 test	 eax, eax
  001d7	74 3b		 je	 SHORT $LN5@PyParallel@8

; 1668 : 
; 1669 :         if (!m)

  001d9	48 83 7c 24 68
	00		 cmp	 QWORD PTR m$[rsp], 0
  001df	75 07		 jne	 SHORT $LN4@PyParallel@8

; 1670 :             return 0;

  001e1	33 c0		 xor	 eax, eax
  001e3	e9 d4 00 00 00	 jmp	 $LN15@PyParallel@8
$LN4@PyParallel@8:

; 1671 : 
; 1672 :         return ((s & _OBJSIG_PY) == _OBJSIG_PY);

  001e8	8b 44 24 20	 mov	 eax, DWORD PTR s$[rsp]
  001ec	83 e0 08	 and	 eax, 8
  001ef	83 f8 08	 cmp	 eax, 8
  001f2	75 0a		 jne	 SHORT $LN29@PyParallel@8
  001f4	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR tv155[rsp], 1
  001fc	eb 08		 jmp	 SHORT $LN30@PyParallel@8
$LN29@PyParallel@8:
  001fe	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv155[rsp], 0
$LN30@PyParallel@8:
  00206	8b 44 24 38	 mov	 eax, DWORD PTR tv155[rsp]
  0020a	e9 ad 00 00 00	 jmp	 $LN15@PyParallel@8

; 1673 : 
; 1674 :     } else {

  0020f	e9 a8 00 00 00	 jmp	 $LN3@PyParallel@8
$LN5@PyParallel@8:

; 1675 :         assert(m);

  00214	48 83 7c 24 68
	00		 cmp	 QWORD PTR m$[rsp], 0
  0021a	75 1c		 jne	 SHORT $LN31@PyParallel@8
  0021c	41 b8 8b 06 00
	00		 mov	 r8d, 1675		; 0000068bH
  00222	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00229	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_13BHPHAPDN@?$AAm?$AA?$AA@
  00230	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00236	33 c0		 xor	 eax, eax
$LN31@PyParallel@8:

; 1676 : 
; 1677 :         assert(flags & (_PYOBJ_GUARD | _PXOBJ_GUARD));

  00238	8b 44 24 70	 mov	 eax, DWORD PTR flags$[rsp]
  0023c	83 e0 60	 and	 eax, 96			; 00000060H
  0023f	85 c0		 test	 eax, eax
  00241	75 1c		 jne	 SHORT $LN32@PyParallel@8
  00243	41 b8 8d 06 00
	00		 mov	 r8d, 1677		; 0000068dH
  00249	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00250	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EM@EMFGMHHE@?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5?$AA?$CI?$AA_?$AAP?$AAY?$AAO?$AAB?$AAJ?$AA_?$AAG?$AAU?$AAA?$AAR?$AAD?$AA?5?$AA?$HM?$AA?5?$AA_?$AAP?$AAX?$AAO?$AAB?$AAJ?$AA_?$AAG@
  00257	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0025d	33 c0		 xor	 eax, eax
$LN32@PyParallel@8:

; 1678 : 
; 1679 :         if (flags & _PYOBJ_GUARD)

  0025f	8b 44 24 70	 mov	 eax, DWORD PTR flags$[rsp]
  00263	83 e0 20	 and	 eax, 32			; 00000020H
  00266	85 c0		 test	 eax, eax
  00268	74 29		 je	 SHORT $LN2@PyParallel@8

; 1680 :             assert(s & _OBJSIG_PY);

  0026a	8b 44 24 20	 mov	 eax, DWORD PTR s$[rsp]
  0026e	83 e0 08	 and	 eax, 8
  00271	85 c0		 test	 eax, eax
  00273	75 1c		 jne	 SHORT $LN33@PyParallel@8
  00275	41 b8 90 06 00
	00		 mov	 r8d, 1680		; 00000690H
  0027b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00282	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BO@GFFGEGEI@?$AAs?$AA?5?$AA?$CG?$AA?5?$AA_?$AAO?$AAB?$AAJ?$AAS?$AAI?$AAG?$AA_?$AAP?$AAY?$AA?$AA@
  00289	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0028f	33 c0		 xor	 eax, eax
$LN33@PyParallel@8:

; 1681 :         else

  00291	eb 27		 jmp	 SHORT $LN1@PyParallel@8
$LN2@PyParallel@8:

; 1682 :             assert(s & _OBJSIG_PX);

  00293	8b 44 24 20	 mov	 eax, DWORD PTR s$[rsp]
  00297	83 e0 10	 and	 eax, 16
  0029a	85 c0		 test	 eax, eax
  0029c	75 1c		 jne	 SHORT $LN34@PyParallel@8
  0029e	41 b8 92 06 00
	00		 mov	 r8d, 1682		; 00000692H
  002a4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  002ab	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BO@NNOKCBCN@?$AAs?$AA?5?$AA?$CG?$AA?5?$AA_?$AAO?$AAB?$AAJ?$AAS?$AAI?$AAG?$AA_?$AAP?$AAX?$AA?$AA@
  002b2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  002b8	33 c0		 xor	 eax, eax
$LN34@PyParallel@8:
$LN1@PyParallel@8:

; 1683 : 
; 1684 :         return 0;

  002ba	33 c0		 xor	 eax, eax
$LN3@PyParallel@8:
$LN6@PyParallel@8:
$LN15@PyParallel@8:

; 1685 :     }
; 1686 : }

  002bc	48 83 c4 48	 add	 rsp, 72			; 00000048H
  002c0	c3		 ret	 0
_PyParallel_GuardObj ENDP
; Function compile flags: /Odtp
; File c:\src\pyparallel\include\pyintrinsics.h
_TEXT	ENDS
;	COMDAT Py_popcnt_u32
_TEXT	SEGMENT
i$ = 8
Py_popcnt_u32 PROC					; COMDAT

; 49   : {

  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx

; 50   :     i = i - ((i >> 1 & 0x55555555));

  00004	8b 44 24 08	 mov	 eax, DWORD PTR i$[rsp]
  00008	d1 e8		 shr	 eax, 1
  0000a	25 55 55 55 55	 and	 eax, 1431655765		; 55555555H
  0000f	8b 4c 24 08	 mov	 ecx, DWORD PTR i$[rsp]
  00013	2b c8		 sub	 ecx, eax
  00015	8b c1		 mov	 eax, ecx
  00017	89 44 24 08	 mov	 DWORD PTR i$[rsp], eax

; 51   :     i = (i & 0x33333333) + ((i >> 2) & 0x33333333);

  0001b	8b 44 24 08	 mov	 eax, DWORD PTR i$[rsp]
  0001f	25 33 33 33 33	 and	 eax, 858993459		; 33333333H
  00024	8b 4c 24 08	 mov	 ecx, DWORD PTR i$[rsp]
  00028	c1 e9 02	 shr	 ecx, 2
  0002b	81 e1 33 33 33
	33		 and	 ecx, 858993459		; 33333333H
  00031	03 c1		 add	 eax, ecx
  00033	89 44 24 08	 mov	 DWORD PTR i$[rsp], eax

; 52   :     i = (i + (i >> 4)) & 0x0f0f0f0f;

  00037	8b 44 24 08	 mov	 eax, DWORD PTR i$[rsp]
  0003b	c1 e8 04	 shr	 eax, 4
  0003e	8b 4c 24 08	 mov	 ecx, DWORD PTR i$[rsp]
  00042	03 c8		 add	 ecx, eax
  00044	8b c1		 mov	 eax, ecx
  00046	25 0f 0f 0f 0f	 and	 eax, 252645135		; 0f0f0f0fH
  0004b	89 44 24 08	 mov	 DWORD PTR i$[rsp], eax

; 53   :     i = i + (i >> 8);

  0004f	8b 44 24 08	 mov	 eax, DWORD PTR i$[rsp]
  00053	c1 e8 08	 shr	 eax, 8
  00056	8b 4c 24 08	 mov	 ecx, DWORD PTR i$[rsp]
  0005a	03 c8		 add	 ecx, eax
  0005c	8b c1		 mov	 eax, ecx
  0005e	89 44 24 08	 mov	 DWORD PTR i$[rsp], eax

; 54   :     i = i + (i >> 16);

  00062	8b 44 24 08	 mov	 eax, DWORD PTR i$[rsp]
  00066	c1 e8 10	 shr	 eax, 16
  00069	8b 4c 24 08	 mov	 ecx, DWORD PTR i$[rsp]
  0006d	03 c8		 add	 ecx, eax
  0006f	8b c1		 mov	 eax, ecx
  00071	89 44 24 08	 mov	 DWORD PTR i$[rsp], eax

; 55   :     return i & 0x0000003f;

  00075	8b 44 24 08	 mov	 eax, DWORD PTR i$[rsp]
  00079	83 e0 3f	 and	 eax, 63			; 0000003fH

; 56   : }

  0007c	c3		 ret	 0
Py_popcnt_u32 ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\include\pyparallel.h
pdata	SEGMENT
$pdata$_px_bitpos_uint32 DD imagerel _px_bitpos_uint32
	DD	imagerel _px_bitpos_uint32+34
	DD	imagerel $unwind$_px_bitpos_uint32
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_px_bitpos_uint32 DD 010801H
	DD	02208H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _px_bitpos_uint32
_TEXT	SEGMENT
i$ = 0
f$ = 32
_px_bitpos_uint32 PROC					; COMDAT

; 148  : {

  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	48 83 ec 18	 sub	 rsp, 24

; 149  :     unsigned long i = 0;

  00008	c7 04 24 00 00
	00 00		 mov	 DWORD PTR i$[rsp], 0

; 150  :     _px_bitscan_fwd(&i, f);

  0000f	8b 44 24 20	 mov	 eax, DWORD PTR f$[rsp]
  00013	48 0f bc c0	 bsf	 rax, rax
  00017	89 04 24	 mov	 DWORD PTR i$[rsp], eax

; 151  :     return i;

  0001a	8b 04 24	 mov	 eax, DWORD PTR i$[rsp]

; 152  : }

  0001d	48 83 c4 18	 add	 rsp, 24
  00021	c3		 ret	 0
_px_bitpos_uint32 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DG@NAJIJNLK@WARNING?$CB?5expected?5_MEMSIG_PY?5but@ ; `string'
PUBLIC	_PxWarn_PyMemUnknown
EXTRN	PySys_FormatStderr:PROC
;	COMDAT pdata
; File c:\src\pyparallel\python\pyparallel.c
pdata	SEGMENT
$pdata$_PxWarn_PyMemUnknown DD imagerel $LN3
	DD	imagerel $LN3+21
	DD	imagerel $unwind$_PxWarn_PyMemUnknown
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PxWarn_PyMemUnknown DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0DG@NAJIJNLK@WARNING?$CB?5expected?5_MEMSIG_PY?5but@
CONST	SEGMENT
??_C@_0DG@NAJIJNLK@WARNING?$CB?5expected?5_MEMSIG_PY?5but@ DB 'WARNING! e'
	DB	'xpected _MEMSIG_PY but got _MEMSIG_UNKNOWN', 0aH, 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PxWarn_PyMemUnknown
_TEXT	SEGMENT
_PxWarn_PyMemUnknown PROC				; COMDAT

; 1690 : {

$LN3:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1691 :     PySys_FormatStderr(
; 1692 :         "WARNING! expected _MEMSIG_PY but got _MEMSIG_UNKNOWN\n"
; 1693 :     );

  00004	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DG@NAJIJNLK@WARNING?$CB?5expected?5_MEMSIG_PY?5but@
  0000b	e8 00 00 00 00	 call	 PySys_FormatStderr

; 1694 : }

  00010	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00014	c3		 ret	 0
_PxWarn_PyMemUnknown ENDP
_TEXT	ENDS
PUBLIC	??_C@_1BO@LPDKFLA@?$AAs?$AA?5?$AA?$CG?$AA?5?$AA_?$AAM?$AAE?$AAM?$AAS?$AAI?$AAG?$AA_?$AAP?$AAX?$AA?$AA@ ; `string'
PUBLIC	??_C@_0BM@CAEDKFG@?6couldn?8t?5find?5ptr?3?50x?$CFllx?6?$AA@ ; `string'
PUBLIC	??_C@_1BO@LDEPMCNF@?$AAs?$AA?5?$AA?$CG?$AA?5?$AA_?$AAM?$AAE?$AAM?$AAS?$AAI?$AAG?$AA_?$AAP?$AAY?$AA?$AA@ ; `string'
PUBLIC	??_C@_1EM@CLJFJNFI@?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5?$AA?$CI?$AA_?$AAP?$AAY?$AAM?$AAE?$AAM?$AA_?$AAG?$AAU?$AAA?$AAR?$AAD?$AA?5?$AA?$HM?$AA?5?$AA_?$AAP?$AAX?$AAM?$AAE?$AAM?$AA_?$AAG@ ; `string'
PUBLIC	??_C@_1CA@NDPAMAAF@?$AA_?$AAM?$AAE?$AAM?$AAT?$AAE?$AAS?$AAT?$AA?$CI?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	_PyParallel_GuardMem
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyParallel_GuardMem DD imagerel $LN30
	DD	imagerel $LN30+714
	DD	imagerel $unwind$_PyParallel_GuardMem
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyParallel_GuardMem DD 011801H
	DD	08218H
xdata	ENDS
;	COMDAT ??_C@_1BO@LPDKFLA@?$AAs?$AA?5?$AA?$CG?$AA?5?$AA_?$AAM?$AAE?$AAM?$AAS?$AAI?$AAG?$AA_?$AAP?$AAX?$AA?$AA@
CONST	SEGMENT
??_C@_1BO@LPDKFLA@?$AAs?$AA?5?$AA?$CG?$AA?5?$AA_?$AAM?$AAE?$AAM?$AAS?$AAI?$AAG?$AA_?$AAP?$AAX?$AA?$AA@ DB 's'
	DB	00H, ' ', 00H, '&', 00H, ' ', 00H, '_', 00H, 'M', 00H, 'E', 00H
	DB	'M', 00H, 'S', 00H, 'I', 00H, 'G', 00H, '_', 00H, 'P', 00H, 'X'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@CAEDKFG@?6couldn?8t?5find?5ptr?3?50x?$CFllx?6?$AA@
CONST	SEGMENT
??_C@_0BM@CAEDKFG@?6couldn?8t?5find?5ptr?3?50x?$CFllx?6?$AA@ DB 0aH, 'cou'
	DB	'ldn''t find ptr: 0x%llx', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1BO@LDEPMCNF@?$AAs?$AA?5?$AA?$CG?$AA?5?$AA_?$AAM?$AAE?$AAM?$AAS?$AAI?$AAG?$AA_?$AAP?$AAY?$AA?$AA@
CONST	SEGMENT
??_C@_1BO@LDEPMCNF@?$AAs?$AA?5?$AA?$CG?$AA?5?$AA_?$AAM?$AAE?$AAM?$AAS?$AAI?$AAG?$AA_?$AAP?$AAY?$AA?$AA@ DB 's'
	DB	00H, ' ', 00H, '&', 00H, ' ', 00H, '_', 00H, 'M', 00H, 'E', 00H
	DB	'M', 00H, 'S', 00H, 'I', 00H, 'G', 00H, '_', 00H, 'P', 00H, 'Y'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1EM@CLJFJNFI@?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5?$AA?$CI?$AA_?$AAP?$AAY?$AAM?$AAE?$AAM?$AA_?$AAG?$AAU?$AAA?$AAR?$AAD?$AA?5?$AA?$HM?$AA?5?$AA_?$AAP?$AAX?$AAM?$AAE?$AAM?$AA_?$AAG@
CONST	SEGMENT
??_C@_1EM@CLJFJNFI@?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5?$AA?$CI?$AA_?$AAP?$AAY?$AAM?$AAE?$AAM?$AA_?$AAG?$AAU?$AAA?$AAR?$AAD?$AA?5?$AA?$HM?$AA?5?$AA_?$AAP?$AAX?$AAM?$AAE?$AAM?$AA_?$AAG@ DB 'f'
	DB	00H, 'l', 00H, 'a', 00H, 'g', 00H, 's', 00H, ' ', 00H, '&', 00H
	DB	' ', 00H, '(', 00H, '_', 00H, 'P', 00H, 'Y', 00H, 'M', 00H, 'E'
	DB	00H, 'M', 00H, '_', 00H, 'G', 00H, 'U', 00H, 'A', 00H, 'R', 00H
	DB	'D', 00H, ' ', 00H, '|', 00H, ' ', 00H, '_', 00H, 'P', 00H, 'X'
	DB	00H, 'M', 00H, 'E', 00H, 'M', 00H, '_', 00H, 'G', 00H, 'U', 00H
	DB	'A', 00H, 'R', 00H, 'D', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CA@NDPAMAAF@?$AA_?$AAM?$AAE?$AAM?$AAT?$AAE?$AAS?$AAT?$AA?$CI?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CA@NDPAMAAF@?$AA_?$AAM?$AAE?$AAM?$AAT?$AAE?$AAS?$AAT?$AA?$CI?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?$CJ?$AA?$AA@ DB '_'
	DB	00H, 'M', 00H, 'E', 00H, 'M', 00H, 'T', 00H, 'E', 00H, 'S', 00H
	DB	'T', 00H, '(', 00H, 'f', 00H, 'l', 00H, 'a', 00H, 'g', 00H, 's'
	DB	00H, ')', 00H, 00H, 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PyParallel_GuardMem
_TEXT	SEGMENT
s$ = 32
o$ = 36
px$127506 = 40
tv81 = 48
tv148 = 52
function$ = 80
filename$ = 88
lineno$ = 96
m$ = 104
flags$ = 112
_PyParallel_GuardMem PROC				; COMDAT

; 1702 : {

$LN30:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1703 :     unsigned long s = 0;

  00018	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR s$[rsp], 0

; 1704 :     unsigned long o;
; 1705 : 
; 1706 :     assert(_MEMTEST(flags));

  00020	8b 4c 24 70	 mov	 ecx, DWORD PTR flags$[rsp]
  00024	e8 00 00 00 00	 call	 Py_popcnt_u32
  00029	85 c0		 test	 eax, eax
  0002b	74 14		 je	 SHORT $LN20@PyParallel@9
  0002d	81 7c 24 70 80
	00 00 00	 cmp	 DWORD PTR flags$[rsp], 128 ; 00000080H
  00035	72 0a		 jb	 SHORT $LN20@PyParallel@9
  00037	81 7c 24 70 00
	04 00 00	 cmp	 DWORD PTR flags$[rsp], 1024 ; 00000400H
  0003f	76 1c		 jbe	 SHORT $LN21@PyParallel@9
$LN20@PyParallel@9:
  00041	41 b8 aa 06 00
	00		 mov	 r8d, 1706		; 000006aaH
  00047	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0004e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CA@NDPAMAAF@?$AA_?$AAM?$AAE?$AAM?$AAT?$AAE?$AAS?$AAT?$AA?$CI?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?$CJ?$AA?$AA@
  00055	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0005b	33 c0		 xor	 eax, eax
$LN21@PyParallel@9:

; 1707 : 
; 1708 :     if (_PyParallel_Finalized)

  0005d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _PyParallel_Finalized, 0
  00064	74 3d		 je	 SHORT $LN17@PyParallel@9

; 1709 :         return (_PYTEST(flags) ? 1 : 0);

  00066	8b 4c 24 70	 mov	 ecx, DWORD PTR flags$[rsp]
  0006a	e8 00 00 00 00	 call	 Py_popcnt_u32
  0006f	85 c0		 test	 eax, eax
  00071	74 1f		 je	 SHORT $LN22@PyParallel@9
  00073	8b 4c 24 70	 mov	 ecx, DWORD PTR flags$[rsp]
  00077	e8 00 00 00 00	 call	 _px_bitpos_uint32
  0007c	99		 cdq
  0007d	83 e0 01	 and	 eax, 1
  00080	33 c2		 xor	 eax, edx
  00082	2b c2		 sub	 eax, edx
  00084	85 c0		 test	 eax, eax
  00086	74 0a		 je	 SHORT $LN22@PyParallel@9
  00088	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv81[rsp], 1
  00090	eb 08		 jmp	 SHORT $LN23@PyParallel@9
$LN22@PyParallel@9:
  00092	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv81[rsp], 0
$LN23@PyParallel@9:
  0009a	8b 44 24 30	 mov	 eax, DWORD PTR tv81[rsp]
  0009e	e9 22 02 00 00	 jmp	 $LN18@PyParallel@9
$LN17@PyParallel@9:

; 1710 : 
; 1711 :     if (m) {

  000a3	48 83 7c 24 68
	00		 cmp	 QWORD PTR m$[rsp], 0
  000a9	0f 84 ad 00 00
	00		 je	 $LN16@PyParallel@9

; 1712 :         if (_PyParallel_IsHeapOverrideActive()) {

  000af	e8 00 00 00 00	 call	 _PyParallel_IsHeapOverrideActive
  000b4	0f be c0	 movsx	 eax, al
  000b7	85 c0		 test	 eax, eax
  000b9	74 2d		 je	 SHORT $LN15@PyParallel@9

; 1713 :             if (m == last_heap_override_malloc_addr)

  000bb	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:last_heap_override_malloc_addr
  000c0	8b c0		 mov	 eax, eax
  000c2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  000c8	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  000d1	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  000d5	48 8b 04 08	 mov	 rax, QWORD PTR [rax+rcx]
  000d9	48 39 44 24 68	 cmp	 QWORD PTR m$[rsp], rax
  000de	75 08		 jne	 SHORT $LN14@PyParallel@9

; 1714 :                 s = _MEMSIG_PX;

  000e0	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR s$[rsp], 16
$LN14@PyParallel@9:
$LN15@PyParallel@9:

; 1715 :         }
; 1716 :         if (!s) {

  000e8	83 7c 24 20 00	 cmp	 DWORD PTR s$[rsp], 0
  000ed	75 2d		 jne	 SHORT $LN13@PyParallel@9

; 1717 :             if (m == last_context_heap_malloc_addr)

  000ef	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:last_context_heap_malloc_addr
  000f4	8b c0		 mov	 eax, eax
  000f6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  000fc	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00105	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  00109	48 8b 04 08	 mov	 rax, QWORD PTR [rax+rcx]
  0010d	48 39 44 24 68	 cmp	 QWORD PTR m$[rsp], rax
  00112	75 08		 jne	 SHORT $LN12@PyParallel@9

; 1718 :                 s = _MEMSIG_PX;

  00114	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR s$[rsp], 16
$LN12@PyParallel@9:
$LN13@PyParallel@9:

; 1719 :         }
; 1720 :         if (!s) {

  0011c	83 7c 24 20 00	 cmp	 DWORD PTR s$[rsp], 0
  00121	75 39		 jne	 SHORT $LN11@PyParallel@9

; 1721 :             o = _Px_SafeObjectSignatureTest(m);

  00123	48 8b 4c 24 68	 mov	 rcx, QWORD PTR m$[rsp]
  00128	e8 00 00 00 00	 call	 _Px_SafeObjectSignatureTest
  0012d	89 44 24 24	 mov	 DWORD PTR o$[rsp], eax

; 1722 :             s = _Px_MemorySignature(m);

  00131	48 8b 4c 24 68	 mov	 rcx, QWORD PTR m$[rsp]
  00136	e8 00 00 00 00	 call	 _Px_MemorySignature
  0013b	89 44 24 20	 mov	 DWORD PTR s$[rsp], eax

; 1723 :             if (s & _MEMSIG_NOT_READY || (o > s))

  0013f	8b 44 24 20	 mov	 eax, DWORD PTR s$[rsp]
  00143	83 e0 01	 and	 eax, 1
  00146	85 c0		 test	 eax, eax
  00148	75 0a		 jne	 SHORT $LN9@PyParallel@9
  0014a	8b 44 24 20	 mov	 eax, DWORD PTR s$[rsp]
  0014e	39 44 24 24	 cmp	 DWORD PTR o$[rsp], eax
  00152	76 08		 jbe	 SHORT $LN10@PyParallel@9
$LN9@PyParallel@9:

; 1724 :                 s = o;

  00154	8b 44 24 24	 mov	 eax, DWORD PTR o$[rsp]
  00158	89 44 24 20	 mov	 DWORD PTR s$[rsp], eax
$LN10@PyParallel@9:
$LN11@PyParallel@9:
$LN16@PyParallel@9:

; 1725 :         }
; 1726 :     }
; 1727 : 
; 1728 :     if (flags & (_PYMEM_TEST | _PXMEM_TEST)) {

  0015c	8b 44 24 70	 mov	 eax, DWORD PTR flags$[rsp]
  00160	25 80 01 00 00	 and	 eax, 384		; 00000180H
  00165	85 c0		 test	 eax, eax
  00167	74 42		 je	 SHORT $LN8@PyParallel@9

; 1729 : 
; 1730 :         if (!m)

  00169	48 83 7c 24 68
	00		 cmp	 QWORD PTR m$[rsp], 0
  0016f	75 07		 jne	 SHORT $LN7@PyParallel@9

; 1731 :             return 0;

  00171	33 c0		 xor	 eax, eax
  00173	e9 4d 01 00 00	 jmp	 $LN18@PyParallel@9
$LN7@PyParallel@9:

; 1732 : 
; 1733 :         return (flags & _PYMEM_TEST ? s & _MEMSIG_PY : s & _MEMSIG_PX);

  00178	8b 44 24 70	 mov	 eax, DWORD PTR flags$[rsp]
  0017c	25 80 00 00 00	 and	 eax, 128		; 00000080H
  00181	85 c0		 test	 eax, eax
  00183	74 0d		 je	 SHORT $LN24@PyParallel@9
  00185	8b 44 24 20	 mov	 eax, DWORD PTR s$[rsp]
  00189	83 e0 08	 and	 eax, 8
  0018c	89 44 24 34	 mov	 DWORD PTR tv148[rsp], eax
  00190	eb 0b		 jmp	 SHORT $LN25@PyParallel@9
$LN24@PyParallel@9:
  00192	8b 44 24 20	 mov	 eax, DWORD PTR s$[rsp]
  00196	83 e0 10	 and	 eax, 16
  00199	89 44 24 34	 mov	 DWORD PTR tv148[rsp], eax
$LN25@PyParallel@9:
  0019d	8b 44 24 34	 mov	 eax, DWORD PTR tv148[rsp]
  001a1	e9 1f 01 00 00	 jmp	 $LN18@PyParallel@9

; 1734 : 
; 1735 :     } else {

  001a6	e9 1a 01 00 00	 jmp	 $LN6@PyParallel@9
$LN8@PyParallel@9:

; 1736 :         assert(m);

  001ab	48 83 7c 24 68
	00		 cmp	 QWORD PTR m$[rsp], 0
  001b1	75 1c		 jne	 SHORT $LN26@PyParallel@9
  001b3	41 b8 c8 06 00
	00		 mov	 r8d, 1736		; 000006c8H
  001b9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  001c0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_13BHPHAPDN@?$AAm?$AA?$AA@
  001c7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001cd	33 c0		 xor	 eax, eax
$LN26@PyParallel@9:

; 1737 : 
; 1738 :         assert(flags & (_PYMEM_GUARD | _PXMEM_GUARD));

  001cf	8b 44 24 70	 mov	 eax, DWORD PTR flags$[rsp]
  001d3	25 00 06 00 00	 and	 eax, 1536		; 00000600H
  001d8	85 c0		 test	 eax, eax
  001da	75 1c		 jne	 SHORT $LN27@PyParallel@9
  001dc	41 b8 ca 06 00
	00		 mov	 r8d, 1738		; 000006caH
  001e2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  001e9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EM@CLJFJNFI@?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5?$AA?$CI?$AA_?$AAP?$AAY?$AAM?$AAE?$AAM?$AA_?$AAG?$AAU?$AAA?$AAR?$AAD?$AA?5?$AA?$HM?$AA?5?$AA_?$AAP?$AAX?$AAM?$AAE?$AAM?$AA_?$AAG@
  001f0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001f6	33 c0		 xor	 eax, eax
$LN27@PyParallel@9:

; 1739 : 
; 1740 :         if (flags & _PYMEM_GUARD) {

  001f8	8b 44 24 70	 mov	 eax, DWORD PTR flags$[rsp]
  001fc	25 00 02 00 00	 and	 eax, 512		; 00000200H
  00201	85 c0		 test	 eax, eax
  00203	74 3e		 je	 SHORT $LN5@PyParallel@9

; 1741 :             if (s & _MEMSIG_UNKNOWN) {

  00205	8b 44 24 20	 mov	 eax, DWORD PTR s$[rsp]
  00209	83 e0 04	 and	 eax, 4
  0020c	85 c0		 test	 eax, eax
  0020e	74 07		 je	 SHORT $LN4@PyParallel@9

; 1742 :                 //printf("expected _MEMSIG_PY but got _MEMSIG_UNKNOWN\n");
; 1743 :                 return 0;

  00210	33 c0		 xor	 eax, eax
  00212	e9 ae 00 00 00	 jmp	 $LN18@PyParallel@9
$LN4@PyParallel@9:

; 1744 :             }
; 1745 :             assert(s & _MEMSIG_PY);

  00217	8b 44 24 20	 mov	 eax, DWORD PTR s$[rsp]
  0021b	83 e0 08	 and	 eax, 8
  0021e	85 c0		 test	 eax, eax
  00220	75 1c		 jne	 SHORT $LN28@PyParallel@9
  00222	41 b8 d1 06 00
	00		 mov	 r8d, 1745		; 000006d1H
  00228	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0022f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BO@LDEPMCNF@?$AAs?$AA?5?$AA?$CG?$AA?5?$AA_?$AAM?$AAE?$AAM?$AAS?$AAI?$AAG?$AA_?$AAP?$AAY?$AA?$AA@
  00236	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0023c	33 c0		 xor	 eax, eax
$LN28@PyParallel@9:

; 1746 :         } else {

  0023e	e9 80 00 00 00	 jmp	 $LN3@PyParallel@9
$LN5@PyParallel@9:

; 1747 :             if (!(s & _MEMSIG_PX)) {

  00243	8b 44 24 20	 mov	 eax, DWORD PTR s$[rsp]
  00247	83 e0 10	 and	 eax, 16
  0024a	85 c0		 test	 eax, eax
  0024c	75 4e		 jne	 SHORT $LN2@PyParallel@9

; 1748 :                 PxState *px = PXSTATE();

  0024e	e8 00 00 00 00	 call	 PXSTATE
  00253	48 89 44 24 28	 mov	 QWORD PTR px$127506[rsp], rax

; 1749 :                 AcquireSRWLockShared(&px->pages_srwlock);

  00258	48 8b 44 24 28	 mov	 rax, QWORD PTR px$127506[rsp]
  0025d	48 83 c0 60	 add	 rax, 96			; 00000060H
  00261	48 8b c8	 mov	 rcx, rax
  00264	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_AcquireSRWLockShared

; 1750 :                 printf("\ncouldn't find ptr: 0x%llx\n", m);

  0026a	48 8b 54 24 68	 mov	 rdx, QWORD PTR m$[rsp]
  0026f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BM@CAEDKFG@?6couldn?8t?5find?5ptr?3?50x?$CFllx?6?$AA@
  00276	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_printf

; 1751 :                 PxPages_Dump(px->pages);

  0027c	48 8b 44 24 28	 mov	 rax, QWORD PTR px$127506[rsp]
  00281	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  00285	e8 00 00 00 00	 call	 PxPages_Dump

; 1752 :                 ReleaseSRWLockExclusive(&px->pages_srwlock);

  0028a	48 8b 44 24 28	 mov	 rax, QWORD PTR px$127506[rsp]
  0028f	48 83 c0 60	 add	 rax, 96			; 00000060H
  00293	48 8b c8	 mov	 rcx, rax
  00296	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ReleaseSRWLockExclusive
$LN2@PyParallel@9:

; 1753 :             } else {
; 1754 :                 //printf("found ptr 0x%llx\n", m);
; 1755 :             }
; 1756 :             assert(s & _MEMSIG_PX);

  0029c	8b 44 24 20	 mov	 eax, DWORD PTR s$[rsp]
  002a0	83 e0 10	 and	 eax, 16
  002a3	85 c0		 test	 eax, eax
  002a5	75 1c		 jne	 SHORT $LN29@PyParallel@9
  002a7	41 b8 dc 06 00
	00		 mov	 r8d, 1756		; 000006dcH
  002ad	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  002b4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BO@LPDKFLA@?$AAs?$AA?5?$AA?$CG?$AA?5?$AA_?$AAM?$AAE?$AAM?$AAS?$AAI?$AAG?$AA_?$AAP?$AAX?$AA?$AA@
  002bb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  002c1	33 c0		 xor	 eax, eax
$LN29@PyParallel@9:
$LN3@PyParallel@9:

; 1757 :         }
; 1758 : 
; 1759 :         return 0;

  002c3	33 c0		 xor	 eax, eax
$LN6@PyParallel@9:
$LN18@PyParallel@9:

; 1760 :     }
; 1761 : }

  002c5	48 83 c4 48	 add	 rsp, 72			; 00000048H
  002c9	c3		 ret	 0
_PyParallel_GuardMem ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyParallel_IsHeapOverrideActive DD imagerel _PyParallel_IsHeapOverrideActive
	DD	imagerel _PyParallel_IsHeapOverrideActive+62
	DD	imagerel $unwind$_PyParallel_IsHeapOverrideActive
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyParallel_IsHeapOverrideActive DD 010401H
	DD	02204H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _PyParallel_IsHeapOverrideActive
_TEXT	SEGMENT
tv71 = 0
_PyParallel_IsHeapOverrideActive PROC			; COMDAT

; 79   : {

  00000	48 83 ec 18	 sub	 rsp, 24

; 80   :     return (heap_override != NULL);

  00004	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:heap_override
  00009	8b c0		 mov	 eax, eax
  0000b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00011	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0001a	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  0001e	48 83 3c 08 00	 cmp	 QWORD PTR [rax+rcx], 0
  00023	74 09		 je	 SHORT $LN3@PyParallel@10
  00025	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv71[rsp], 1
  0002c	eb 07		 jmp	 SHORT $LN4@PyParallel@10
$LN3@PyParallel@10:
  0002e	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv71[rsp], 0
$LN4@PyParallel@10:
  00035	0f b6 04 24	 movzx	 eax, BYTE PTR tv71[rsp]

; 81   : }

  00039	48 83 c4 18	 add	 rsp, 24
  0003d	c3		 ret	 0
_PyParallel_IsHeapOverrideActive ENDP
_TEXT	ENDS
PUBLIC	??_C@_1EA@MPOAFFKO@?$AA_?$AAP?$AAy?$AA_?$AAU?$AAI?$AAN?$AAT?$AA3?$AA2?$AA_?$AAB?$AAI?$AAT?$AAS?$AA_?$AAS?$AAE?$AAT?$AA?$CI?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA1?$AA?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyParallel_Guard DD imagerel $LN8
	DD	imagerel $LN8+229
	DD	imagerel $unwind$_PyParallel_Guard
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyParallel_Guard DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT ??_C@_1EA@MPOAFFKO@?$AA_?$AAP?$AAy?$AA_?$AAU?$AAI?$AAN?$AAT?$AA3?$AA2?$AA_?$AAB?$AAI?$AAT?$AAS?$AA_?$AAS?$AAE?$AAT?$AA?$CI?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA1?$AA?$AA@
CONST	SEGMENT
??_C@_1EA@MPOAFFKO@?$AA_?$AAP?$AAy?$AA_?$AAU?$AAI?$AAN?$AAT?$AA3?$AA2?$AA_?$AAB?$AAI?$AAT?$AAS?$AA_?$AAS?$AAE?$AAT?$AA?$CI?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA1?$AA?$AA@ DB '_'
	DB	00H, 'P', 00H, 'y', 00H, '_', 00H, 'U', 00H, 'I', 00H, 'N', 00H
	DB	'T', 00H, '3', 00H, '2', 00H, '_', 00H, 'B', 00H, 'I', 00H, 'T'
	DB	00H, 'S', 00H, '_', 00H, 'S', 00H, 'E', 00H, 'T', 00H, '(', 00H
	DB	'f', 00H, 'l', 00H, 'a', 00H, 'g', 00H, 's', 00H, ')', 00H, ' '
	DB	00H, '=', 00H, '=', 00H, ' ', 00H, '1', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PyParallel_Guard
_TEXT	SEGMENT
function$ = 64
filename$ = 72
lineno$ = 80
m$ = 88
flags$ = 96
_PyParallel_Guard PROC					; COMDAT

; 1769 : {

$LN8:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1770 :     assert(_Py_UINT32_BITS_SET(flags) == 1);

  00018	8b 4c 24 60	 mov	 ecx, DWORD PTR flags$[rsp]
  0001c	e8 00 00 00 00	 call	 Py_popcnt_u32
  00021	83 f8 01	 cmp	 eax, 1
  00024	74 1c		 je	 SHORT $LN5@PyParallel@11
  00026	41 b8 ea 06 00
	00		 mov	 r8d, 1770		; 000006eaH
  0002c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00033	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EA@MPOAFFKO@?$AA_?$AAP?$AAy?$AA_?$AAU?$AAI?$AAN?$AAT?$AA3?$AA2?$AA_?$AAB?$AAI?$AAT?$AAS?$AA_?$AAS?$AAE?$AAT?$AA?$CI?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA1?$AA?$AA@
  0003a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00040	33 c0		 xor	 eax, eax
$LN5@PyParallel@11:

; 1771 : 
; 1772 :     if (_OBJTEST(flags))

  00042	8b 4c 24 60	 mov	 ecx, DWORD PTR flags$[rsp]
  00046	e8 00 00 00 00	 call	 Py_popcnt_u32
  0004b	85 c0		 test	 eax, eax
  0004d	74 33		 je	 SHORT $LN2@PyParallel@11
  0004f	83 7c 24 60 02	 cmp	 DWORD PTR flags$[rsp], 2
  00054	72 2c		 jb	 SHORT $LN2@PyParallel@11
  00056	83 7c 24 60 40	 cmp	 DWORD PTR flags$[rsp], 64 ; 00000040H
  0005b	77 25		 ja	 SHORT $LN2@PyParallel@11

; 1773 :         return _PyParallel_GuardObj(function, filename, lineno, m, flags);

  0005d	8b 44 24 60	 mov	 eax, DWORD PTR flags$[rsp]
  00061	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00065	4c 8b 4c 24 58	 mov	 r9, QWORD PTR m$[rsp]
  0006a	44 8b 44 24 50	 mov	 r8d, DWORD PTR lineno$[rsp]
  0006f	48 8b 54 24 48	 mov	 rdx, QWORD PTR filename$[rsp]
  00074	48 8b 4c 24 40	 mov	 rcx, QWORD PTR function$[rsp]
  00079	e8 00 00 00 00	 call	 _PyParallel_GuardObj
  0007e	eb 60		 jmp	 SHORT $LN3@PyParallel@11

; 1774 :     else {

  00080	eb 5e		 jmp	 SHORT $LN1@PyParallel@11
$LN2@PyParallel@11:

; 1775 :         assert(_MEMTEST(flags));

  00082	8b 4c 24 60	 mov	 ecx, DWORD PTR flags$[rsp]
  00086	e8 00 00 00 00	 call	 Py_popcnt_u32
  0008b	85 c0		 test	 eax, eax
  0008d	74 14		 je	 SHORT $LN6@PyParallel@11
  0008f	81 7c 24 60 80
	00 00 00	 cmp	 DWORD PTR flags$[rsp], 128 ; 00000080H
  00097	72 0a		 jb	 SHORT $LN6@PyParallel@11
  00099	81 7c 24 60 00
	04 00 00	 cmp	 DWORD PTR flags$[rsp], 1024 ; 00000400H
  000a1	76 1c		 jbe	 SHORT $LN7@PyParallel@11
$LN6@PyParallel@11:
  000a3	41 b8 ef 06 00
	00		 mov	 r8d, 1775		; 000006efH
  000a9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  000b0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CA@NDPAMAAF@?$AA_?$AAM?$AAE?$AAM?$AAT?$AAE?$AAS?$AAT?$AA?$CI?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?$CJ?$AA?$AA@
  000b7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000bd	33 c0		 xor	 eax, eax
$LN7@PyParallel@11:

; 1776 :         return _PyParallel_GuardMem(function, filename, lineno, m, flags);

  000bf	8b 44 24 60	 mov	 eax, DWORD PTR flags$[rsp]
  000c3	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  000c7	4c 8b 4c 24 58	 mov	 r9, QWORD PTR m$[rsp]
  000cc	44 8b 44 24 50	 mov	 r8d, DWORD PTR lineno$[rsp]
  000d1	48 8b 54 24 48	 mov	 rdx, QWORD PTR filename$[rsp]
  000d6	48 8b 4c 24 40	 mov	 rcx, QWORD PTR function$[rsp]
  000db	e8 00 00 00 00	 call	 _PyParallel_GuardMem
$LN1@PyParallel@11:
$LN3@PyParallel@11:

; 1777 :     }
; 1778 : }

  000e0	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000e4	c3		 ret	 0
_PyParallel_Guard ENDP
_TEXT	ENDS
PUBLIC	_Px_TEST
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Px_TEST DD imagerel $LN6
	DD	imagerel $LN6+100
	DD	imagerel $unwind$_Px_TEST
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Px_TEST DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _Px_TEST
_TEXT	SEGMENT
s$ = 32
m$ = 36
o$ = 40
tv70 = 44
p$ = 64
_Px_TEST PROC						; COMDAT

; 1782 : {

$LN6:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1783 :     unsigned long o, m, s;
; 1784 :     if (!p)

  00009	48 83 7c 24 40
	00		 cmp	 QWORD PTR p$[rsp], 0
  0000f	75 07		 jne	 SHORT $LN1@Px_TEST

; 1785 :         return _SIG_NULL;

  00011	b8 02 00 00 00	 mov	 eax, 2
  00016	eb 47		 jmp	 SHORT $LN2@Px_TEST
$LN1@Px_TEST:

; 1786 : 
; 1787 :     o = _Px_SafeObjectSignatureTest(p);

  00018	48 8b 4c 24 40	 mov	 rcx, QWORD PTR p$[rsp]
  0001d	e8 00 00 00 00	 call	 _Px_SafeObjectSignatureTest
  00022	89 44 24 28	 mov	 DWORD PTR o$[rsp], eax

; 1788 :     m = _Px_MemorySignature(p);

  00026	48 8b 4c 24 40	 mov	 rcx, QWORD PTR p$[rsp]
  0002b	e8 00 00 00 00	 call	 _Px_MemorySignature
  00030	89 44 24 24	 mov	 DWORD PTR m$[rsp], eax

; 1789 :     s = Px_MAX(o, m);

  00034	8b 44 24 24	 mov	 eax, DWORD PTR m$[rsp]
  00038	39 44 24 28	 cmp	 DWORD PTR o$[rsp], eax
  0003c	76 0a		 jbe	 SHORT $LN4@Px_TEST
  0003e	8b 44 24 28	 mov	 eax, DWORD PTR o$[rsp]
  00042	89 44 24 2c	 mov	 DWORD PTR tv70[rsp], eax
  00046	eb 08		 jmp	 SHORT $LN5@Px_TEST
$LN4@Px_TEST:
  00048	8b 44 24 24	 mov	 eax, DWORD PTR m$[rsp]
  0004c	89 44 24 2c	 mov	 DWORD PTR tv70[rsp], eax
$LN5@Px_TEST:
  00050	8b 44 24 2c	 mov	 eax, DWORD PTR tv70[rsp]
  00054	89 44 24 20	 mov	 DWORD PTR s$[rsp], eax

; 1790 :     return (s & _SIG_PX);

  00058	8b 44 24 20	 mov	 eax, DWORD PTR s$[rsp]
  0005c	83 e0 10	 and	 eax, 16
$LN2@Px_TEST:

; 1791 : }

  0005f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00063	c3		 ret	 0
_Px_TEST ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DB@BAIDDJO@_PyParallel_ContextGuardFailure?3@ ; `string'
PUBLIC	??_C@_0CP@EFIOEGMI@?$CFs?5called?5from?5within?5parallel?5c@ ; `string'
PUBLIC	??_C@_0CO@CEBGPBEF@?$CFs?5called?5outside?5of?5parallel?5co@ ; `string'
EXTRN	__imp__snprintf:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyParallel_ContextGuardFailure DD imagerel $LN7
	DD	imagerel $LN7+183
	DD	imagerel $unwind$_PyParallel_ContextGuardFailure
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyParallel_ContextGuardFailure DD 021b01H
	DD	01b011bH
xdata	ENDS
;	COMDAT ??_C@_0DB@BAIDDJO@_PyParallel_ContextGuardFailure?3@
CONST	SEGMENT
??_C@_0DB@BAIDDJO@_PyParallel_ContextGuardFailure?3@ DB '_PyParallel_Cont'
	DB	'extGuardFailure: snprintf failed', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@EFIOEGMI@?$CFs?5called?5from?5within?5parallel?5c@
CONST	SEGMENT
??_C@_0CP@EFIOEGMI@?$CFs?5called?5from?5within?5parallel?5c@ DB '%s calle'
	DB	'd from within parallel context (%s:%d)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@CEBGPBEF@?$CFs?5called?5outside?5of?5parallel?5co@
CONST	SEGMENT
??_C@_0CO@CEBGPBEF@?$CFs?5called?5outside?5of?5parallel?5co@ DB '%s calle'
	DB	'd outside of parallel context (%s:%d)', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PyParallel_ContextGuardFailure
_TEXT	SEGMENT
fmt$ = 48
buf$ = 64
err$ = 192
function$ = 224
filename$ = 232
lineno$ = 240
was_px_ctx$ = 248
_PyParallel_ContextGuardFailure PROC			; COMDAT

; 1798 : {

$LN7:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec d8 00
	00 00		 sub	 rsp, 216		; 000000d8H

; 1799 :     int err;
; 1800 :     char buf[128], *fmt;
; 1801 :     memset((void *)buf, 0, sizeof(buf));

  0001b	41 b8 80 00 00
	00		 mov	 r8d, 128		; 00000080H
  00021	33 d2		 xor	 edx, edx
  00023	48 8d 4c 24 40	 lea	 rcx, QWORD PTR buf$[rsp]
  00028	e8 00 00 00 00	 call	 memset

; 1802 : 
; 1803 :     if (was_px_ctx)

  0002d	83 bc 24 f8 00
	00 00 00	 cmp	 DWORD PTR was_px_ctx$[rsp], 0
  00035	74 0e		 je	 SHORT $LN4@PyParallel@12

; 1804 :         fmt = "%s called outside of parallel context (%s:%d)";

  00037	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0CO@CEBGPBEF@?$CFs?5called?5outside?5of?5parallel?5co@
  0003e	48 89 44 24 30	 mov	 QWORD PTR fmt$[rsp], rax

; 1805 :     else

  00043	eb 0c		 jmp	 SHORT $LN3@PyParallel@12
$LN4@PyParallel@12:

; 1806 :         fmt = "%s called from within parallel context (%s:%d)";

  00045	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0CP@EFIOEGMI@?$CFs?5called?5from?5within?5parallel?5c@
  0004c	48 89 44 24 30	 mov	 QWORD PTR fmt$[rsp], rax
$LN3@PyParallel@12:

; 1807 : 
; 1808 :     err = snprintf(buf, sizeof(buf), fmt, function, filename, lineno);

  00051	8b 84 24 f0 00
	00 00		 mov	 eax, DWORD PTR lineno$[rsp]
  00058	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  0005c	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR filename$[rsp]
  00064	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00069	4c 8b 8c 24 e0
	00 00 00	 mov	 r9, QWORD PTR function$[rsp]
  00071	4c 8b 44 24 30	 mov	 r8, QWORD PTR fmt$[rsp]
  00076	ba 80 00 00 00	 mov	 edx, 128		; 00000080H
  0007b	48 8d 4c 24 40	 lea	 rcx, QWORD PTR buf$[rsp]
  00080	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__snprintf
  00086	89 84 24 c0 00
	00 00		 mov	 DWORD PTR err$[rsp], eax

; 1809 :     if (err == -1)

  0008d	83 bc 24 c0 00
	00 00 ff	 cmp	 DWORD PTR err$[rsp], -1
  00095	75 0e		 jne	 SHORT $LN2@PyParallel@12

; 1810 :         Py_FatalError("_PyParallel_ContextGuardFailure: snprintf failed");

  00097	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DB@BAIDDJO@_PyParallel_ContextGuardFailure?3@
  0009e	e8 00 00 00 00	 call	 Py_FatalError

; 1811 :     else

  000a3	eb 0a		 jmp	 SHORT $LN1@PyParallel@12
$LN2@PyParallel@12:

; 1812 :         Py_FatalError(buf);

  000a5	48 8d 4c 24 40	 lea	 rcx, QWORD PTR buf$[rsp]
  000aa	e8 00 00 00 00	 call	 Py_FatalError
$LN1@PyParallel@12:

; 1813 : }

  000af	48 81 c4 d8 00
	00 00		 add	 rsp, 216		; 000000d8H
  000b6	c3		 ret	 0
_PyParallel_ContextGuardFailure ENDP
_TEXT	ENDS
PUBLIC	??_C@_1BI@GALLOPMD@?$AAh?$AA?9?$AA?$DO?$AAs?$AAl?$AAe?$AA_?$AAn?$AAe?$AAx?$AAt?$AA?$AA@ ; `string'
PUBLIC	??_C@_13CACJPPAP@?$AAh?$AA?$AA@			; `string'
PUBLIC	??_C@_1DA@KHENGHIN@?$AA?$CI?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$CF?$AA?5?$AAp?$AAa?$AAg?$AAe?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CI@EOAECDBO@?$AA?$CB?$AAP?$AAx?$AA_?$AAT?$AAL?$AAS?$AA_?$AAH?$AAE?$AAA?$AAP?$AA_?$AAA?$AAC?$AAT?$AAI?$AAV?$AAE?$AA?$AA@ ; `string'
PUBLIC	Heap_Init
EXTRN	__imp_HeapAlloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$Heap_Init DD imagerel $LN13
	DD	imagerel $LN13+804
	DD	imagerel $unwind$Heap_Init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Heap_Init DD 011301H
	DD	0c213H
xdata	ENDS
;	COMDAT ??_C@_1BI@GALLOPMD@?$AAh?$AA?9?$AA?$DO?$AAs?$AAl?$AAe?$AA_?$AAn?$AAe?$AAx?$AAt?$AA?$AA@
CONST	SEGMENT
??_C@_1BI@GALLOPMD@?$AAh?$AA?9?$AA?$DO?$AAs?$AAl?$AAe?$AA_?$AAn?$AAe?$AAx?$AAt?$AA?$AA@ DB 'h'
	DB	00H, '-', 00H, '>', 00H, 's', 00H, 'l', 00H, 'e', 00H, '_', 00H
	DB	'n', 00H, 'e', 00H, 'x', 00H, 't', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_13CACJPPAP@?$AAh?$AA?$AA@
CONST	SEGMENT
??_C@_13CACJPPAP@?$AAh?$AA?$AA@ DB 'h', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1DA@KHENGHIN@?$AA?$CI?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$CF?$AA?5?$AAp?$AAa?$AAg?$AAe?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1DA@KHENGHIN@?$AA?$CI?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$CF?$AA?5?$AAp?$AAa?$AAg?$AAe?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@ DB '('
	DB	00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, ' ', 00H, '%', 00H
	DB	' ', 00H, 'p', 00H, 'a', 00H, 'g', 00H, 'e', 00H, '_', 00H, 's'
	DB	00H, 'i', 00H, 'z', 00H, 'e', 00H, ')', 00H, ' ', 00H, '=', 00H
	DB	'=', 00H, ' ', 00H, '0', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1CI@EOAECDBO@?$AA?$CB?$AAP?$AAx?$AA_?$AAT?$AAL?$AAS?$AA_?$AAH?$AAE?$AAA?$AAP?$AA_?$AAA?$AAC?$AAT?$AAI?$AAV?$AAE?$AA?$AA@
CONST	SEGMENT
??_C@_1CI@EOAECDBO@?$AA?$CB?$AAP?$AAx?$AA_?$AAT?$AAL?$AAS?$AA_?$AAH?$AAE?$AAA?$AAP?$AA_?$AAA?$AAC?$AAT?$AAI?$AAV?$AAE?$AA?$AA@ DB '!'
	DB	00H, 'P', 00H, 'x', 00H, '_', 00H, 'T', 00H, 'L', 00H, 'S', 00H
	DB	'_', 00H, 'H', 00H, 'E', 00H, 'A', 00H, 'P', 00H, '_', 00H, 'A'
	DB	00H, 'C', 00H, 'T', 00H, 'I', 00H, 'V', 00H, 'E', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT Heap_Init
_TEXT	SEGMENT
h$ = 32
flags$ = 40
s$ = 48
size$ = 56
tv86 = 64
tv142 = 72
tv147 = 80
c$ = 112
n$ = 120
page_size$ = 128
Heap_Init PROC						; COMDAT

; 1823 : {

$LN13:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 1824 :     Heap  *h;
; 1825 :     Stats *s = &(c->stats);

  00013	48 8b 44 24 70	 mov	 rax, QWORD PTR c$[rsp]
  00018	48 05 00 01 00
	00		 add	 rax, 256		; 00000100H
  0001e	48 89 44 24 30	 mov	 QWORD PTR s$[rsp], rax

; 1826 :     size_t size;
; 1827 :     int flags;
; 1828 : 
; 1829 :     assert(!Px_TLS_HEAP_ACTIVE);

  00023	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:tls
  00028	8b c0		 mov	 eax, eax
  0002a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00030	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00039	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  0003d	83 bc 01 d0 00
	00 00 00	 cmp	 DWORD PTR [rcx+rax+208], 0
  00045	7e 1c		 jle	 SHORT $LN9@Heap_Init
  00047	41 b8 25 07 00
	00		 mov	 r8d, 1829		; 00000725H
  0004d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00054	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CI@EOAECDBO@?$AA?$CB?$AAP?$AAx?$AA_?$AAT?$AAL?$AAS?$AA_?$AAH?$AAE?$AAA?$AAP?$AA_?$AAA?$AAC?$AAT?$AAI?$AAV?$AAE?$AA?$AA@
  0005b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00061	33 c0		 xor	 eax, eax
$LN9@Heap_Init:

; 1830 : 
; 1831 :     if (!page_size)

  00063	83 bc 24 80 00
	00 00 00	 cmp	 DWORD PTR page_size$[rsp], 0
  0006b	75 0b		 jne	 SHORT $LN6@Heap_Init

; 1832 :         page_size = Px_LARGE_PAGE_SIZE;

  0006d	c7 84 24 80 00
	00 00 00 00 20
	00		 mov	 DWORD PTR page_size$[rsp], 2097152 ; 00200000H
$LN6@Heap_Init:

; 1833 : 
; 1834 :     if (n < Px_DEFAULT_HEAP_SIZE)

  00078	48 81 7c 24 78
	00 00 20 00	 cmp	 QWORD PTR n$[rsp], 2097152 ; 00200000H
  00081	73 0b		 jae	 SHORT $LN5@Heap_Init

; 1835 :         size = Px_DEFAULT_HEAP_SIZE;

  00083	48 c7 44 24 38
	00 00 20 00	 mov	 QWORD PTR size$[rsp], 2097152 ; 00200000H

; 1836 :     else

  0008c	eb 0a		 jmp	 SHORT $LN4@Heap_Init
$LN5@Heap_Init:

; 1837 :         size = n;

  0008e	48 8b 44 24 78	 mov	 rax, QWORD PTR n$[rsp]
  00093	48 89 44 24 38	 mov	 QWORD PTR size$[rsp], rax
$LN4@Heap_Init:

; 1838 : 
; 1839 :     size = Px_PAGESIZE_ALIGN_UP(size, page_size);

  00098	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR page_size$[rsp]
  000a0	48 8b 4c 24 38	 mov	 rcx, QWORD PTR size$[rsp]
  000a5	48 8d 44 01 ff	 lea	 rax, QWORD PTR [rcx+rax-1]
  000aa	48 63 8c 24 80
	00 00 00	 movsxd	 rcx, DWORD PTR page_size$[rsp]
  000b2	48 ff c9	 dec	 rcx
  000b5	48 f7 d1	 not	 rcx
  000b8	48 23 c1	 and	 rax, rcx
  000bb	48 89 44 24 38	 mov	 QWORD PTR size$[rsp], rax

; 1840 : 
; 1841 :     assert((size % page_size) == 0);

  000c0	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR page_size$[rsp]
  000c8	48 89 44 24 40	 mov	 QWORD PTR tv86[rsp], rax
  000cd	33 d2		 xor	 edx, edx
  000cf	48 8b 44 24 38	 mov	 rax, QWORD PTR size$[rsp]
  000d4	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tv86[rsp]
  000d9	48 f7 f1	 div	 rcx
  000dc	48 8b c2	 mov	 rax, rdx
  000df	48 85 c0	 test	 rax, rax
  000e2	74 1c		 je	 SHORT $LN10@Heap_Init
  000e4	41 b8 31 07 00
	00		 mov	 r8d, 1841		; 00000731H
  000ea	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  000f1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@KHENGHIN@?$AA?$CI?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$CF?$AA?5?$AAp?$AAa?$AAg?$AAe?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@
  000f8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000fe	33 c0		 xor	 eax, eax
$LN10@Heap_Init:

; 1842 : 
; 1843 :     if (!c->h) {

  00100	48 8b 44 24 70	 mov	 rax, QWORD PTR c$[rsp]
  00105	48 83 b8 d0 00
	00 00 00	 cmp	 QWORD PTR [rax+208], 0
  0010d	75 1c		 jne	 SHORT $LN3@Heap_Init

; 1844 :         /* First init. */
; 1845 :         h = &(c->heap);

  0010f	48 8b 44 24 70	 mov	 rax, QWORD PTR c$[rsp]
  00114	48 83 c0 18	 add	 rax, 24
  00118	48 89 44 24 20	 mov	 QWORD PTR h$[rsp], rax

; 1846 :         h->id = 1;

  0011d	48 8b 44 24 20	 mov	 rax, QWORD PTR h$[rsp]
  00122	c7 40 50 01 00
	00 00		 mov	 DWORD PTR [rax+80], 1

; 1847 :     } else {

  00129	eb 3e		 jmp	 SHORT $LN2@Heap_Init
$LN3@Heap_Init:

; 1848 :         h = c->h->sle_next;

  0012b	48 8b 44 24 70	 mov	 rax, QWORD PTR c$[rsp]
  00130	48 8b 80 d0 00
	00 00		 mov	 rax, QWORD PTR [rax+208]
  00137	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0013b	48 89 44 24 20	 mov	 QWORD PTR h$[rsp], rax

; 1849 :         h->sle_prev = c->h;

  00140	48 8b 44 24 20	 mov	 rax, QWORD PTR h$[rsp]
  00145	48 8b 4c 24 70	 mov	 rcx, QWORD PTR c$[rsp]
  0014a	48 8b 89 d0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+208]
  00151	48 89 08	 mov	 QWORD PTR [rax], rcx

; 1850 :         h->id = h->sle_prev->id + 1;

  00154	48 8b 44 24 20	 mov	 rax, QWORD PTR h$[rsp]
  00159	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0015c	8b 40 50	 mov	 eax, DWORD PTR [rax+80]
  0015f	ff c0		 inc	 eax
  00161	48 8b 4c 24 20	 mov	 rcx, QWORD PTR h$[rsp]
  00166	89 41 50	 mov	 DWORD PTR [rcx+80], eax
$LN2@Heap_Init:

; 1851 :     }
; 1852 : 
; 1853 :     assert(h);

  00169	48 83 7c 24 20
	00		 cmp	 QWORD PTR h$[rsp], 0
  0016f	75 1c		 jne	 SHORT $LN11@Heap_Init
  00171	41 b8 3d 07 00
	00		 mov	 r8d, 1853		; 0000073dH
  00177	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0017e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_13CACJPPAP@?$AAh?$AA?$AA@
  00185	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0018b	33 c0		 xor	 eax, eax
$LN11@Heap_Init:

; 1854 : 
; 1855 :     h->page_size = page_size;

  0018d	48 8b 44 24 20	 mov	 rax, QWORD PTR h$[rsp]
  00192	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR page_size$[rsp]
  00199	89 48 20	 mov	 DWORD PTR [rax+32], ecx

; 1856 :     h->pages = size / page_size;

  0019c	48 63 84 24 80
	00 00 00	 movsxd	 rax, DWORD PTR page_size$[rsp]
  001a4	48 89 44 24 48	 mov	 QWORD PTR tv142[rsp], rax
  001a9	33 d2		 xor	 edx, edx
  001ab	48 8b 44 24 38	 mov	 rax, QWORD PTR size$[rsp]
  001b0	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tv142[rsp]
  001b5	48 f7 f1	 div	 rcx
  001b8	48 8b 4c 24 20	 mov	 rcx, QWORD PTR h$[rsp]
  001bd	48 89 41 28	 mov	 QWORD PTR [rcx+40], rax

; 1857 : 
; 1858 :     h->size = size;

  001c1	48 8b 44 24 20	 mov	 rax, QWORD PTR h$[rsp]
  001c6	48 8b 4c 24 38	 mov	 rcx, QWORD PTR size$[rsp]
  001cb	48 89 48 38	 mov	 QWORD PTR [rax+56], rcx

; 1859 :     flags = HEAP_ZERO_MEMORY;

  001cf	c7 44 24 28 08
	00 00 00	 mov	 DWORD PTR flags$[rsp], 8

; 1860 :     h->base = h->next = HeapAlloc(c->heap_handle, flags, h->size);

  001d7	48 8b 44 24 20	 mov	 rax, QWORD PTR h$[rsp]
  001dc	4c 8b 40 38	 mov	 r8, QWORD PTR [rax+56]
  001e0	8b 54 24 28	 mov	 edx, DWORD PTR flags$[rsp]
  001e4	48 8b 44 24 70	 mov	 rax, QWORD PTR c$[rsp]
  001e9	48 8b 48 10	 mov	 rcx, QWORD PTR [rax+16]
  001ed	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_HeapAlloc
  001f3	48 89 44 24 50	 mov	 QWORD PTR tv147[rsp], rax
  001f8	48 8b 44 24 20	 mov	 rax, QWORD PTR h$[rsp]
  001fd	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tv147[rsp]
  00202	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx
  00206	48 8b 44 24 20	 mov	 rax, QWORD PTR h$[rsp]
  0020b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tv147[rsp]
  00210	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 1861 :     if (!h->base)

  00214	48 8b 44 24 20	 mov	 rax, QWORD PTR h$[rsp]
  00219	48 83 78 10 00	 cmp	 QWORD PTR [rax+16], 0
  0021e	75 0c		 jne	 SHORT $LN1@Heap_Init

; 1862 :         return PyErr_SetFromWindowsErr(0);

  00220	33 c9		 xor	 ecx, ecx
  00222	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
  00227	e9 f3 00 00 00	 jmp	 $LN7@Heap_Init
$LN1@Heap_Init:

; 1863 :     h->next_alignment = Px_GET_ALIGNMENT(h->base);

  0022c	48 8b 44 24 20	 mov	 rax, QWORD PTR h$[rsp]
  00231	48 8b 48 10	 mov	 rcx, QWORD PTR [rax+16]
  00235	e8 00 00 00 00	 call	 Px_GET_ALIGNMENT
  0023a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR h$[rsp]
  0023f	48 89 41 30	 mov	 QWORD PTR [rcx+48], rax

; 1864 :     h->remaining = size;

  00243	48 8b 44 24 20	 mov	 rax, QWORD PTR h$[rsp]
  00248	48 8b 4c 24 38	 mov	 rcx, QWORD PTR size$[rsp]
  0024d	48 89 48 48	 mov	 QWORD PTR [rax+72], rcx

; 1865 :     s->remaining = size;

  00251	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  00256	48 8b 4c 24 38	 mov	 rcx, QWORD PTR size$[rsp]
  0025b	48 89 88 a8 00
	00 00		 mov	 QWORD PTR [rax+168], rcx

; 1866 :     s->size += size;

  00262	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  00267	48 8b 80 98 00
	00 00		 mov	 rax, QWORD PTR [rax+152]
  0026e	48 03 44 24 38	 add	 rax, QWORD PTR size$[rsp]
  00273	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s$[rsp]
  00278	48 89 81 98 00
	00 00		 mov	 QWORD PTR [rcx+152], rax

; 1867 :     s->heaps++;

  0027f	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  00284	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  0028b	48 ff c0	 inc	 rax
  0028e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s$[rsp]
  00293	48 89 81 90 00
	00 00		 mov	 QWORD PTR [rcx+144], rax

; 1868 :     c->h = h;

  0029a	48 8b 44 24 70	 mov	 rax, QWORD PTR c$[rsp]
  0029f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR h$[rsp]
  002a4	48 89 88 d0 00
	00 00		 mov	 QWORD PTR [rax+208], rcx

; 1869 :     h->ctx = c;

  002ab	48 8b 44 24 20	 mov	 rax, QWORD PTR h$[rsp]
  002b0	48 8b 4c 24 70	 mov	 rcx, QWORD PTR c$[rsp]
  002b5	48 89 48 58	 mov	 QWORD PTR [rax+88], rcx

; 1870 :     h->sle_next = (Heap *)_PyHeap_Malloc(c, sizeof(Heap), 0, 0);

  002b9	45 33 c9	 xor	 r9d, r9d
  002bc	45 33 c0	 xor	 r8d, r8d
  002bf	ba b8 00 00 00	 mov	 edx, 184		; 000000b8H
  002c4	48 8b 4c 24 70	 mov	 rcx, QWORD PTR c$[rsp]
  002c9	e8 00 00 00 00	 call	 _PyHeap_Malloc
  002ce	48 8b 4c 24 20	 mov	 rcx, QWORD PTR h$[rsp]
  002d3	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 1871 :     assert(h->sle_next);

  002d7	48 8b 44 24 20	 mov	 rax, QWORD PTR h$[rsp]
  002dc	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  002e1	75 1c		 jne	 SHORT $LN12@Heap_Init
  002e3	41 b8 4f 07 00
	00		 mov	 r8d, 1871		; 0000074fH
  002e9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  002f0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BI@GALLOPMD@?$AAh?$AA?9?$AA?$DO?$AAs?$AAl?$AAe?$AA_?$AAn?$AAe?$AAx?$AAt?$AA?$AA@
  002f7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  002fd	33 c0		 xor	 eax, eax
$LN12@Heap_Init:

; 1872 :     _PxState_RegisterHeap(c->px, h, c);

  002ff	4c 8b 44 24 70	 mov	 r8, QWORD PTR c$[rsp]
  00304	48 8b 54 24 20	 mov	 rdx, QWORD PTR h$[rsp]
  00309	48 8b 44 24 70	 mov	 rax, QWORD PTR c$[rsp]
  0030e	48 8b 88 d8 00
	00 00		 mov	 rcx, QWORD PTR [rax+216]
  00315	e8 00 00 00 00	 call	 _PxState_RegisterHeap

; 1873 :     return h;

  0031a	48 8b 44 24 20	 mov	 rax, QWORD PTR h$[rsp]
$LN7@Heap_Init:

; 1874 : }

  0031f	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00323	c3		 ret	 0
Heap_Init ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\python\pyparallel_private.h
pdata	SEGMENT
$pdata$Px_GET_ALIGNMENT DD imagerel Px_GET_ALIGNMENT
	DD	imagerel Px_GET_ALIGNMENT+100
	DD	imagerel $unwind$Px_GET_ALIGNMENT
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Px_GET_ALIGNMENT DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT Px_GET_ALIGNMENT
_TEXT	SEGMENT
i$ = 0
c$ = 8
tv79 = 16
p$ = 48
Px_GET_ALIGNMENT PROC					; COMDAT

; 101  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 102  :     register Px_UINTPTR c = Px_PTR(p);

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR p$[rsp]
  0000e	48 89 44 24 08	 mov	 QWORD PTR c$[rsp], rax

; 103  :     register unsigned int i = 0;

  00013	c7 04 24 00 00
	00 00		 mov	 DWORD PTR i$[rsp], 0

; 104  :     if (!p)

  0001a	48 83 7c 24 30
	00		 cmp	 QWORD PTR p$[rsp], 0
  00020	75 04		 jne	 SHORT $LN3@Px_GET_ALI

; 105  :         return 0;

  00022	33 c0		 xor	 eax, eax
  00024	eb 39		 jmp	 SHORT $LN4@Px_GET_ALI
$LN3@Px_GET_ALI:
$LN2@Px_GET_ALI:

; 106  :     while (!((c >> i) & 1))

  00026	8b 04 24	 mov	 eax, DWORD PTR i$[rsp]
  00029	0f b6 c8	 movzx	 ecx, al
  0002c	48 8b 44 24 08	 mov	 rax, QWORD PTR c$[rsp]
  00031	48 d3 e8	 shr	 rax, cl
  00034	48 83 e0 01	 and	 rax, 1
  00038	48 85 c0	 test	 rax, rax
  0003b	75 0a		 jne	 SHORT $LN1@Px_GET_ALI

; 107  :         i++;

  0003d	8b 04 24	 mov	 eax, DWORD PTR i$[rsp]
  00040	ff c0		 inc	 eax
  00042	89 04 24	 mov	 DWORD PTR i$[rsp], eax
  00045	eb df		 jmp	 SHORT $LN2@Px_GET_ALI
$LN1@Px_GET_ALI:

; 108  :     return (1ULL << i);

  00047	8b 04 24	 mov	 eax, DWORD PTR i$[rsp]
  0004a	b9 01 00 00 00	 mov	 ecx, 1
  0004f	48 89 4c 24 10	 mov	 QWORD PTR tv79[rsp], rcx
  00054	0f b6 c8	 movzx	 ecx, al
  00057	48 8b 44 24 10	 mov	 rax, QWORD PTR tv79[rsp]
  0005c	48 d3 e0	 shl	 rax, cl
$LN4@Px_GET_ALI:

; 109  : }

  0005f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00063	c3		 ret	 0
Px_GET_ALIGNMENT ENDP
_TEXT	ENDS
PUBLIC	_PyTLSHeap_Malloc
PUBLIC	_PyTLSHeap_Init
;	COMDAT pdata
; File c:\src\pyparallel\python\pyparallel.c
pdata	SEGMENT
$pdata$_PyTLSHeap_Init DD imagerel $LN12
	DD	imagerel $LN12+726
	DD	imagerel $unwind$_PyTLSHeap_Init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyTLSHeap_Init DD 010d01H
	DD	0c20dH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _PyTLSHeap_Init
_TEXT	SEGMENT
h$ = 32
flags$ = 40
s$ = 48
size$ = 56
t$ = 64
tv82 = 72
tv135 = 80
tv140 = 88
n$ = 112
page_size$ = 120
_PyTLSHeap_Init PROC					; COMDAT

; 1879 : {

$LN12:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 1880 :     TLS *t = &tls;

  0000d	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:tls
  00012	8b c0		 mov	 eax, eax
  00014	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0001a	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00023	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00027	48 89 44 24 40	 mov	 QWORD PTR t$[rsp], rax

; 1881 :     Heap *h;
; 1882 :     Stats *s = &(t->stats);

  0002c	48 8b 44 24 40	 mov	 rax, QWORD PTR t$[rsp]
  00031	48 05 e0 00 00
	00		 add	 rax, 224		; 000000e0H
  00037	48 89 44 24 30	 mov	 QWORD PTR s$[rsp], rax

; 1883 :     size_t size;
; 1884 :     int flags;
; 1885 : 
; 1886 :     if (!page_size)

  0003c	83 7c 24 78 00	 cmp	 DWORD PTR page_size$[rsp], 0
  00041	75 08		 jne	 SHORT $LN6@PyTLSHeap_

; 1887 :         page_size = Px_LARGE_PAGE_SIZE;

  00043	c7 44 24 78 00
	00 20 00	 mov	 DWORD PTR page_size$[rsp], 2097152 ; 00200000H
$LN6@PyTLSHeap_:

; 1888 : 
; 1889 :     if (n < _PyTLSHeap_DefaultSize)

  0004b	48 63 05 00 00
	00 00		 movsxd	 rax, DWORD PTR _PyTLSHeap_DefaultSize
  00052	48 39 44 24 70	 cmp	 QWORD PTR n$[rsp], rax
  00057	73 0e		 jae	 SHORT $LN5@PyTLSHeap_

; 1890 :         size = _PyTLSHeap_DefaultSize;

  00059	48 63 05 00 00
	00 00		 movsxd	 rax, DWORD PTR _PyTLSHeap_DefaultSize
  00060	48 89 44 24 38	 mov	 QWORD PTR size$[rsp], rax

; 1891 :     else

  00065	eb 0a		 jmp	 SHORT $LN4@PyTLSHeap_
$LN5@PyTLSHeap_:

; 1892 :         size = n;

  00067	48 8b 44 24 70	 mov	 rax, QWORD PTR n$[rsp]
  0006c	48 89 44 24 38	 mov	 QWORD PTR size$[rsp], rax
$LN4@PyTLSHeap_:

; 1893 : 
; 1894 :     size = Px_PAGESIZE_ALIGN_UP(size, page_size);

  00071	48 63 44 24 78	 movsxd	 rax, DWORD PTR page_size$[rsp]
  00076	48 8b 4c 24 38	 mov	 rcx, QWORD PTR size$[rsp]
  0007b	48 8d 44 01 ff	 lea	 rax, QWORD PTR [rcx+rax-1]
  00080	48 63 4c 24 78	 movsxd	 rcx, DWORD PTR page_size$[rsp]
  00085	48 ff c9	 dec	 rcx
  00088	48 f7 d1	 not	 rcx
  0008b	48 23 c1	 and	 rax, rcx
  0008e	48 89 44 24 38	 mov	 QWORD PTR size$[rsp], rax

; 1895 : 
; 1896 :     assert((size % page_size) == 0);

  00093	48 63 44 24 78	 movsxd	 rax, DWORD PTR page_size$[rsp]
  00098	48 89 44 24 48	 mov	 QWORD PTR tv82[rsp], rax
  0009d	33 d2		 xor	 edx, edx
  0009f	48 8b 44 24 38	 mov	 rax, QWORD PTR size$[rsp]
  000a4	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tv82[rsp]
  000a9	48 f7 f1	 div	 rcx
  000ac	48 8b c2	 mov	 rax, rdx
  000af	48 85 c0	 test	 rax, rax
  000b2	74 1c		 je	 SHORT $LN9@PyTLSHeap_
  000b4	41 b8 68 07 00
	00		 mov	 r8d, 1896		; 00000768H
  000ba	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  000c1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@KHENGHIN@?$AA?$CI?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$CF?$AA?5?$AAp?$AAa?$AAg?$AAe?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@
  000c8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000ce	33 c0		 xor	 eax, eax
$LN9@PyTLSHeap_:

; 1897 : 
; 1898 :     if (!t->h) {

  000d0	48 8b 44 24 40	 mov	 rax, QWORD PTR t$[rsp]
  000d5	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  000d9	75 1c		 jne	 SHORT $LN3@PyTLSHeap_

; 1899 :         /* First init. */
; 1900 :         h = &(t->heap);

  000db	48 8b 44 24 40	 mov	 rax, QWORD PTR t$[rsp]
  000e0	48 83 c0 10	 add	 rax, 16
  000e4	48 89 44 24 20	 mov	 QWORD PTR h$[rsp], rax

; 1901 :         h->id = 1;

  000e9	48 8b 44 24 20	 mov	 rax, QWORD PTR h$[rsp]
  000ee	c7 40 50 01 00
	00 00		 mov	 DWORD PTR [rax+80], 1

; 1902 :     } else {

  000f5	eb 36		 jmp	 SHORT $LN2@PyTLSHeap_
$LN3@PyTLSHeap_:

; 1903 :         h = t->h->sle_next;

  000f7	48 8b 44 24 40	 mov	 rax, QWORD PTR t$[rsp]
  000fc	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000ff	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00103	48 89 44 24 20	 mov	 QWORD PTR h$[rsp], rax

; 1904 :         h->sle_prev = t->h;

  00108	48 8b 44 24 20	 mov	 rax, QWORD PTR h$[rsp]
  0010d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR t$[rsp]
  00112	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00115	48 89 08	 mov	 QWORD PTR [rax], rcx

; 1905 :         h->id = h->sle_prev->id + 1;

  00118	48 8b 44 24 20	 mov	 rax, QWORD PTR h$[rsp]
  0011d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00120	8b 40 50	 mov	 eax, DWORD PTR [rax+80]
  00123	ff c0		 inc	 eax
  00125	48 8b 4c 24 20	 mov	 rcx, QWORD PTR h$[rsp]
  0012a	89 41 50	 mov	 DWORD PTR [rcx+80], eax
$LN2@PyTLSHeap_:

; 1906 :     }
; 1907 : 
; 1908 :     assert(h);

  0012d	48 83 7c 24 20
	00		 cmp	 QWORD PTR h$[rsp], 0
  00133	75 1c		 jne	 SHORT $LN10@PyTLSHeap_
  00135	41 b8 74 07 00
	00		 mov	 r8d, 1908		; 00000774H
  0013b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00142	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_13CACJPPAP@?$AAh?$AA?$AA@
  00149	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0014f	33 c0		 xor	 eax, eax
$LN10@PyTLSHeap_:

; 1909 : 
; 1910 :     h->page_size = page_size;

  00151	48 8b 44 24 20	 mov	 rax, QWORD PTR h$[rsp]
  00156	8b 4c 24 78	 mov	 ecx, DWORD PTR page_size$[rsp]
  0015a	89 48 20	 mov	 DWORD PTR [rax+32], ecx

; 1911 :     h->pages = size / page_size;

  0015d	48 63 44 24 78	 movsxd	 rax, DWORD PTR page_size$[rsp]
  00162	48 89 44 24 50	 mov	 QWORD PTR tv135[rsp], rax
  00167	33 d2		 xor	 edx, edx
  00169	48 8b 44 24 38	 mov	 rax, QWORD PTR size$[rsp]
  0016e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tv135[rsp]
  00173	48 f7 f1	 div	 rcx
  00176	48 8b 4c 24 20	 mov	 rcx, QWORD PTR h$[rsp]
  0017b	48 89 41 28	 mov	 QWORD PTR [rcx+40], rax

; 1912 : 
; 1913 :     h->size = size;

  0017f	48 8b 44 24 20	 mov	 rax, QWORD PTR h$[rsp]
  00184	48 8b 4c 24 38	 mov	 rcx, QWORD PTR size$[rsp]
  00189	48 89 48 38	 mov	 QWORD PTR [rax+56], rcx

; 1914 :     flags = HEAP_ZERO_MEMORY;

  0018d	c7 44 24 28 08
	00 00 00	 mov	 DWORD PTR flags$[rsp], 8

; 1915 :     h->base = h->next = HeapAlloc(t->handle, flags, h->size);

  00195	48 8b 44 24 20	 mov	 rax, QWORD PTR h$[rsp]
  0019a	4c 8b 40 38	 mov	 r8, QWORD PTR [rax+56]
  0019e	8b 54 24 28	 mov	 edx, DWORD PTR flags$[rsp]
  001a2	48 8b 44 24 40	 mov	 rax, QWORD PTR t$[rsp]
  001a7	48 8b 88 c8 00
	00 00		 mov	 rcx, QWORD PTR [rax+200]
  001ae	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_HeapAlloc
  001b4	48 89 44 24 58	 mov	 QWORD PTR tv140[rsp], rax
  001b9	48 8b 44 24 20	 mov	 rax, QWORD PTR h$[rsp]
  001be	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tv140[rsp]
  001c3	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx
  001c7	48 8b 44 24 20	 mov	 rax, QWORD PTR h$[rsp]
  001cc	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tv140[rsp]
  001d1	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 1916 :     if (!h->base)

  001d5	48 8b 44 24 20	 mov	 rax, QWORD PTR h$[rsp]
  001da	48 83 78 10 00	 cmp	 QWORD PTR [rax+16], 0
  001df	75 0c		 jne	 SHORT $LN1@PyTLSHeap_

; 1917 :         return (int)PyErr_SetFromWindowsErr(0);

  001e1	33 c9		 xor	 ecx, ecx
  001e3	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
  001e8	e9 e4 00 00 00	 jmp	 $LN7@PyTLSHeap_
$LN1@PyTLSHeap_:

; 1918 :     h->next_alignment = Px_GET_ALIGNMENT(h->base);

  001ed	48 8b 44 24 20	 mov	 rax, QWORD PTR h$[rsp]
  001f2	48 8b 48 10	 mov	 rcx, QWORD PTR [rax+16]
  001f6	e8 00 00 00 00	 call	 Px_GET_ALIGNMENT
  001fb	48 8b 4c 24 20	 mov	 rcx, QWORD PTR h$[rsp]
  00200	48 89 41 30	 mov	 QWORD PTR [rcx+48], rax

; 1919 :     h->remaining = size;

  00204	48 8b 44 24 20	 mov	 rax, QWORD PTR h$[rsp]
  00209	48 8b 4c 24 38	 mov	 rcx, QWORD PTR size$[rsp]
  0020e	48 89 48 48	 mov	 QWORD PTR [rax+72], rcx

; 1920 :     s->remaining = size;

  00212	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  00217	48 8b 4c 24 38	 mov	 rcx, QWORD PTR size$[rsp]
  0021c	48 89 88 a8 00
	00 00		 mov	 QWORD PTR [rax+168], rcx

; 1921 :     s->size += size;

  00223	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  00228	48 8b 80 98 00
	00 00		 mov	 rax, QWORD PTR [rax+152]
  0022f	48 03 44 24 38	 add	 rax, QWORD PTR size$[rsp]
  00234	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s$[rsp]
  00239	48 89 81 98 00
	00 00		 mov	 QWORD PTR [rcx+152], rax

; 1922 :     s->heaps++;

  00240	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  00245	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  0024c	48 ff c0	 inc	 rax
  0024f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s$[rsp]
  00254	48 89 81 90 00
	00 00		 mov	 QWORD PTR [rcx+144], rax

; 1923 :     t->h = h;

  0025b	48 8b 44 24 40	 mov	 rax, QWORD PTR t$[rsp]
  00260	48 8b 4c 24 20	 mov	 rcx, QWORD PTR h$[rsp]
  00265	48 89 08	 mov	 QWORD PTR [rax], rcx

; 1924 :     h->tls = t;

  00268	48 8b 44 24 20	 mov	 rax, QWORD PTR h$[rsp]
  0026d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR t$[rsp]
  00272	48 89 48 60	 mov	 QWORD PTR [rax+96], rcx

; 1925 :     h->sle_next = (Heap *)_PyTLSHeap_Malloc(sizeof(Heap), 0);

  00276	33 d2		 xor	 edx, edx
  00278	b9 b8 00 00 00	 mov	 ecx, 184		; 000000b8H
  0027d	e8 00 00 00 00	 call	 _PyTLSHeap_Malloc
  00282	48 8b 4c 24 20	 mov	 rcx, QWORD PTR h$[rsp]
  00287	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 1926 :     assert(h->sle_next);

  0028b	48 8b 44 24 20	 mov	 rax, QWORD PTR h$[rsp]
  00290	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00295	75 1c		 jne	 SHORT $LN11@PyTLSHeap_
  00297	41 b8 86 07 00
	00		 mov	 r8d, 1926		; 00000786H
  0029d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  002a4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BI@GALLOPMD@?$AAh?$AA?9?$AA?$DO?$AAs?$AAl?$AAe?$AA_?$AAn?$AAe?$AAx?$AAt?$AA?$AA@
  002ab	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  002b1	33 c0		 xor	 eax, eax
$LN11@PyTLSHeap_:

; 1927 :     _PxState_RegisterHeap(t->px, h, 0);

  002b3	45 33 c0	 xor	 r8d, r8d
  002b6	48 8b 54 24 20	 mov	 rdx, QWORD PTR h$[rsp]
  002bb	48 8b 44 24 40	 mov	 rax, QWORD PTR t$[rsp]
  002c0	48 8b 88 d8 00
	00 00		 mov	 rcx, QWORD PTR [rax+216]
  002c7	e8 00 00 00 00	 call	 _PxState_RegisterHeap

; 1928 :     return 1;

  002cc	b8 01 00 00 00	 mov	 eax, 1
$LN7@PyTLSHeap_:

; 1929 : }

  002d1	48 83 c4 68	 add	 rsp, 104		; 00000068H
  002d5	c3		 ret	 0
_PyTLSHeap_Init ENDP
_TEXT	ENDS
PUBLIC	_PyHeap_Init
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyHeap_Init DD imagerel $LN3
	DD	imagerel $LN3+37
	DD	imagerel $unwind$_PyHeap_Init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyHeap_Init DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _PyHeap_Init
_TEXT	SEGMENT
c$ = 48
n$ = 56
_PyHeap_Init PROC					; COMDAT

; 1933 : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1934 :     return Heap_Init(c, n, 0);

  0000e	45 33 c0	 xor	 r8d, r8d
  00011	48 8b 54 24 38	 mov	 rdx, QWORD PTR n$[rsp]
  00016	48 8b 4c 24 30	 mov	 rcx, QWORD PTR c$[rsp]
  0001b	e8 00 00 00 00	 call	 Heap_Init

; 1935 : }

  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	c3		 ret	 0
_PyHeap_Init ENDP
_TEXT	ENDS
PUBLIC	??_C@_1BBG@JBIMKPHM@?$AAH?$AAe?$AAa?$AAp?$AA_?$AAL?$AAo?$AAc?$AAa?$AAl?$AAM?$AAa?$AAl?$AAl?$AAo?$AAc?$AA?3?$AA?5?$AAl?$AAo?$AAc?$AAa?$AAl?$AA?5?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?5?$AAe@ ; `string'
PUBLIC	??_C@_1EA@DKNKPPGC@?$AA_?$AAP?$AAy?$AA_?$AAI?$AAS?$AA_?$AAA?$AAL?$AAI?$AAG?$AAN?$AAE?$AAD?$AA?$CI?$AAn?$AAe?$AAx?$AAt?$AA?0?$AA?5?$AAa?$AAl?$AAi?$AAg?$AAn?$AAm?$AAe?$AAn?$AAt?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1HI@JFOADBN@?$AAP?$AAx?$AA_?$AAP?$AAT?$AAR?$AA_?$AAA?$AAD?$AAD?$AA?$CI?$AAc?$AA?9?$AA?$DO?$AAt?$AAb?$AAu?$AAf?$AA_?$AAb?$AAa?$AAs?$AAe?$AA?0?$AA?5?$AAc?$AA?9?$AA?$DO?$AAt?$AAb?$AAu?$AAf@ ; `string'
PUBLIC	Heap_LocalMalloc
EXTRN	__imp_fwprintf_s:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$Heap_LocalMalloc DD imagerel $LN13
	DD	imagerel $LN13+924
	DD	imagerel $unwind$Heap_LocalMalloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Heap_LocalMalloc DD 011301H
	DD	0a213H
xdata	ENDS
;	COMDAT ??_C@_1BBG@JBIMKPHM@?$AAH?$AAe?$AAa?$AAp?$AA_?$AAL?$AAo?$AAc?$AAa?$AAl?$AAM?$AAa?$AAl?$AAl?$AAo?$AAc?$AA?3?$AA?5?$AAl?$AAo?$AAc?$AAa?$AAl?$AA?5?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?5?$AAe@
CONST	SEGMENT
??_C@_1BBG@JBIMKPHM@?$AAH?$AAe?$AAa?$AAp?$AA_?$AAL?$AAo?$AAc?$AAa?$AAl?$AAM?$AAa?$AAl?$AAl?$AAo?$AAc?$AA?3?$AA?5?$AAl?$AAo?$AAc?$AAa?$AAl?$AA?5?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?5?$AAe@ DB 'H'
	DB	00H, 'e', 00H, 'a', 00H, 'p', 00H, '_', 00H, 'L', 00H, 'o', 00H
	DB	'c', 00H, 'a', 00H, 'l', 00H, 'M', 00H, 'a', 00H, 'l', 00H, 'l'
	DB	00H, 'o', 00H, 'c', 00H, ':', 00H, ' ', 00H, 'l', 00H, 'o', 00H
	DB	'c', 00H, 'a', 00H, 'l', 00H, ' ', 00H, 'b', 00H, 'u', 00H, 'f'
	DB	00H, 'f', 00H, 'e', 00H, 'r', 00H, ' ', 00H, 'e', 00H, 'x', 00H
	DB	'h', 00H, 'a', 00H, 'u', 00H, 's', 00H, 't', 00H, 'e', 00H, 'd'
	DB	00H, ' ', 00H, '(', 00H, 'r', 00H, 'e', 00H, 'q', 00H, 'u', 00H
	DB	'e', 00H, 's', 00H, 't', 00H, 'e', 00H, 'd', 00H, ':', 00H, ' '
	DB	00H, '%', 00H, 'l', 00H, 'l', 00H, 'd', 00H, ',', 00H, ' ', 00H
	DB	'a', 00H, 'v', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'a', 00H, 'b'
	DB	00H, 'l', 00H, 'e', 00H, ':', 00H, ' ', 00H, '%', 00H, 'l', 00H
	DB	'l', 00H, 'd', 00H, ')', 00H, '.', 00H, ' ', 00H, ' ', 00H, 'R'
	DB	00H, 'e', 00H, 's', 00H, 'o', 00H, 'r', 00H, 't', 00H, 'e', 00H
	DB	'd', 00H, ' ', 00H, 't', 00H, 'o', 00H, ' ', 00H, 'm', 00H, 'a'
	DB	00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, '(', 00H, ')', 00H
	DB	' ', 00H, '-', 00H, '-', 00H, ' ', 00H, 'n', 00H, 'o', 00H, 't'
	DB	00H, 'e', 00H, ' ', 00H, 't', 00H, 'h', 00H, 'a', 00H, 't', 00H
	DB	' ', 00H, 'm', 00H, 'e', 00H, 'm', 00H, 'o', 00H, 'r', 00H, 'y'
	DB	00H, ' ', 00H, 'w', 00H, 'i', 00H, 'l', 00H, 'l', 00H, ' ', 00H
	DB	'n', 00H, 'o', 00H, 't', 00H, ' ', 00H, 'b', 00H, 'e', 00H, ' '
	DB	00H, 'f', 00H, 'r', 00H, 'e', 00H, 'e', 00H, 'd', 00H, '!', 00H
	DB	0aH, 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1EA@DKNKPPGC@?$AA_?$AAP?$AAy?$AA_?$AAI?$AAS?$AA_?$AAA?$AAL?$AAI?$AAG?$AAN?$AAE?$AAD?$AA?$CI?$AAn?$AAe?$AAx?$AAt?$AA?0?$AA?5?$AAa?$AAl?$AAi?$AAg?$AAn?$AAm?$AAe?$AAn?$AAt?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1EA@DKNKPPGC@?$AA_?$AAP?$AAy?$AA_?$AAI?$AAS?$AA_?$AAA?$AAL?$AAI?$AAG?$AAN?$AAE?$AAD?$AA?$CI?$AAn?$AAe?$AAx?$AAt?$AA?0?$AA?5?$AAa?$AAl?$AAi?$AAg?$AAn?$AAm?$AAe?$AAn?$AAt?$AA?$CJ?$AA?$AA@ DB '_'
	DB	00H, 'P', 00H, 'y', 00H, '_', 00H, 'I', 00H, 'S', 00H, '_', 00H
	DB	'A', 00H, 'L', 00H, 'I', 00H, 'G', 00H, 'N', 00H, 'E', 00H, 'D'
	DB	00H, '(', 00H, 'n', 00H, 'e', 00H, 'x', 00H, 't', 00H, ',', 00H
	DB	' ', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'g', 00H, 'n', 00H, 'm'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1HI@JFOADBN@?$AAP?$AAx?$AA_?$AAP?$AAT?$AAR?$AA_?$AAA?$AAD?$AAD?$AA?$CI?$AAc?$AA?9?$AA?$DO?$AAt?$AAb?$AAu?$AAf?$AA_?$AAb?$AAa?$AAs?$AAe?$AA?0?$AA?5?$AAc?$AA?9?$AA?$DO?$AAt?$AAb?$AAu?$AAf@
CONST	SEGMENT
??_C@_1HI@JFOADBN@?$AAP?$AAx?$AA_?$AAP?$AAT?$AAR?$AA_?$AAA?$AAD?$AAD?$AA?$CI?$AAc?$AA?9?$AA?$DO?$AAt?$AAb?$AAu?$AAf?$AA_?$AAb?$AAa?$AAs?$AAe?$AA?0?$AA?5?$AAc?$AA?9?$AA?$DO?$AAt?$AAb?$AAu?$AAf@ DB 'P'
	DB	00H, 'x', 00H, '_', 00H, 'P', 00H, 'T', 00H, 'R', 00H, '_', 00H
	DB	'A', 00H, 'D', 00H, 'D', 00H, '(', 00H, 'c', 00H, '-', 00H, '>'
	DB	00H, 't', 00H, 'b', 00H, 'u', 00H, 'f', 00H, '_', 00H, 'b', 00H
	DB	'a', 00H, 's', 00H, 'e', 00H, ',', 00H, ' ', 00H, 'c', 00H, '-'
	DB	00H, '>', 00H, 't', 00H, 'b', 00H, 'u', 00H, 'f', 00H, '_', 00H
	DB	'a', 00H, 'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 't'
	DB	00H, 'e', 00H, 'd', 00H, ')', 00H, ' ', 00H, '=', 00H, '=', 00H
	DB	' ', 00H, 'c', 00H, '-', 00H, '>', 00H, 't', 00H, 'b', 00H, 'u'
	DB	00H, 'f', 00H, '_', 00H, 'n', 00H, 'e', 00H, 'x', 00H, 't', 00H
	DB	00H, 00H					; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT Heap_LocalMalloc
_TEXT	SEGMENT
aligned_size$ = 32
requested_size$ = 40
next$ = 48
fmt$ = 56
alignment$ = 64
alignment_diff$ = 72
c$ = 96
n$ = 104
align$ = 112
Heap_LocalMalloc PROC					; COMDAT

; 1939 : {

$LN13:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 1940 :     void *next;
; 1941 :     wchar_t *fmt;
; 1942 :     size_t alignment_diff;
; 1943 :     size_t alignment = align;

  00013	48 8b 44 24 70	 mov	 rax, QWORD PTR align$[rsp]
  00018	48 89 44 24 40	 mov	 QWORD PTR alignment$[rsp], rax

; 1944 :     size_t requested_size = n;

  0001d	48 8b 44 24 68	 mov	 rax, QWORD PTR n$[rsp]
  00022	48 89 44 24 28	 mov	 QWORD PTR requested_size$[rsp], rax

; 1945 :     size_t aligned_size;
; 1946 : 
; 1947 :     if (!alignment)

  00027	48 83 7c 24 40
	00		 cmp	 QWORD PTR alignment$[rsp], 0
  0002d	75 09		 jne	 SHORT $LN7@Heap_Local

; 1948 :         alignment = Px_PTR_ALIGN_SIZE;

  0002f	48 c7 44 24 40
	08 00 00 00	 mov	 QWORD PTR alignment$[rsp], 8
$LN7@Heap_Local:

; 1949 : 
; 1950 :     if (alignment > c->tbuf_next_alignment)

  00038	48 8b 44 24 60	 mov	 rax, QWORD PTR c$[rsp]
  0003d	48 8b 80 c0 37
	00 00		 mov	 rax, QWORD PTR [rax+14272]
  00044	48 39 44 24 40	 cmp	 QWORD PTR alignment$[rsp], rax
  00049	76 26		 jbe	 SHORT $LN6@Heap_Local

; 1951 :         alignment_diff = Px_PTR_ALIGN(alignment - c->tbuf_next_alignment);

  0004b	48 8b 44 24 60	 mov	 rax, QWORD PTR c$[rsp]
  00050	48 8b 80 c0 37
	00 00		 mov	 rax, QWORD PTR [rax+14272]
  00057	48 8b 4c 24 40	 mov	 rcx, QWORD PTR alignment$[rsp]
  0005c	48 2b c8	 sub	 rcx, rax
  0005f	48 8b c1	 mov	 rax, rcx
  00062	48 83 c0 07	 add	 rax, 7
  00066	48 83 e0 f8	 and	 rax, -8
  0006a	48 89 44 24 48	 mov	 QWORD PTR alignment_diff$[rsp], rax

; 1952 :     else

  0006f	eb 09		 jmp	 SHORT $LN5@Heap_Local
$LN6@Heap_Local:

; 1953 :         alignment_diff = 0;

  00071	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR alignment_diff$[rsp], 0
$LN5@Heap_Local:

; 1954 : 
; 1955 :     aligned_size = Px_ALIGN(n, alignment);

  0007a	48 8b 44 24 68	 mov	 rax, QWORD PTR n$[rsp]
  0007f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR alignment$[rsp]
  00084	48 8d 44 08 ff	 lea	 rax, QWORD PTR [rax+rcx-1]
  00089	48 8b 4c 24 40	 mov	 rcx, QWORD PTR alignment$[rsp]
  0008e	48 ff c9	 dec	 rcx
  00091	48 f7 d1	 not	 rcx
  00094	48 23 c1	 and	 rax, rcx
  00097	48 89 44 24 20	 mov	 QWORD PTR aligned_size$[rsp], rax

; 1956 : 
; 1957 :     if (aligned_size < (c->tbuf_remaining-alignment_diff)) {

  0009c	48 8b 44 24 60	 mov	 rax, QWORD PTR c$[rsp]
  000a1	48 8b 4c 24 48	 mov	 rcx, QWORD PTR alignment_diff$[rsp]
  000a6	48 8b 80 b0 37
	00 00		 mov	 rax, QWORD PTR [rax+14256]
  000ad	48 2b c1	 sub	 rax, rcx
  000b0	48 39 44 24 20	 cmp	 QWORD PTR aligned_size$[rsp], rax
  000b5	0f 83 26 02 00
	00		 jae	 $LN4@Heap_Local

; 1958 :         if (alignment_diff) {

  000bb	48 83 7c 24 48
	00		 cmp	 QWORD PTR alignment_diff$[rsp], 0
  000c1	0f 84 d4 00 00
	00		 je	 $LN3@Heap_Local

; 1959 :             c->tbuf_remaining -= alignment_diff;

  000c7	48 8b 44 24 60	 mov	 rax, QWORD PTR c$[rsp]
  000cc	48 8b 4c 24 48	 mov	 rcx, QWORD PTR alignment_diff$[rsp]
  000d1	48 8b 80 b0 37
	00 00		 mov	 rax, QWORD PTR [rax+14256]
  000d8	48 2b c1	 sub	 rax, rcx
  000db	48 8b 4c 24 60	 mov	 rcx, QWORD PTR c$[rsp]
  000e0	48 89 81 b0 37
	00 00		 mov	 QWORD PTR [rcx+14256], rax

; 1960 :             c->tbuf_allocated += alignment_diff;

  000e7	48 8b 44 24 60	 mov	 rax, QWORD PTR c$[rsp]
  000ec	48 8b 80 a8 37
	00 00		 mov	 rax, QWORD PTR [rax+14248]
  000f3	48 03 44 24 48	 add	 rax, QWORD PTR alignment_diff$[rsp]
  000f8	48 8b 4c 24 60	 mov	 rcx, QWORD PTR c$[rsp]
  000fd	48 89 81 a8 37
	00 00		 mov	 QWORD PTR [rcx+14248], rax

; 1961 :             c->tbuf_alignment_mismatches++;

  00104	48 8b 44 24 60	 mov	 rax, QWORD PTR c$[rsp]
  00109	48 8b 80 c8 37
	00 00		 mov	 rax, QWORD PTR [rax+14280]
  00110	48 ff c0	 inc	 rax
  00113	48 8b 4c 24 60	 mov	 rcx, QWORD PTR c$[rsp]
  00118	48 89 81 c8 37
	00 00		 mov	 QWORD PTR [rcx+14280], rax

; 1962 :             c->tbuf_bytes_wasted += alignment_diff;

  0011f	48 8b 44 24 60	 mov	 rax, QWORD PTR c$[rsp]
  00124	48 8b 80 b8 37
	00 00		 mov	 rax, QWORD PTR [rax+14264]
  0012b	48 03 44 24 48	 add	 rax, QWORD PTR alignment_diff$[rsp]
  00130	48 8b 4c 24 60	 mov	 rcx, QWORD PTR c$[rsp]
  00135	48 89 81 b8 37
	00 00		 mov	 QWORD PTR [rcx+14264], rax

; 1963 :             c->tbuf_next = Px_PTR_ADD(c->tbuf_next, alignment_diff);

  0013c	48 8b 44 24 60	 mov	 rax, QWORD PTR c$[rsp]
  00141	48 8b 80 98 37
	00 00		 mov	 rax, QWORD PTR [rax+14232]
  00148	48 03 44 24 48	 add	 rax, QWORD PTR alignment_diff$[rsp]
  0014d	48 8b 4c 24 60	 mov	 rcx, QWORD PTR c$[rsp]
  00152	48 89 81 98 37
	00 00		 mov	 QWORD PTR [rcx+14232], rax

; 1964 :             assert(Px_PTR_ADD(c->tbuf_base, c->tbuf_allocated) == c->tbuf_next);

  00159	48 8b 44 24 60	 mov	 rax, QWORD PTR c$[rsp]
  0015e	48 8b 80 90 37
	00 00		 mov	 rax, QWORD PTR [rax+14224]
  00165	48 8b 4c 24 60	 mov	 rcx, QWORD PTR c$[rsp]
  0016a	48 03 81 a8 37
	00 00		 add	 rax, QWORD PTR [rcx+14248]
  00171	48 8b 4c 24 60	 mov	 rcx, QWORD PTR c$[rsp]
  00176	48 3b 81 98 37
	00 00		 cmp	 rax, QWORD PTR [rcx+14232]
  0017d	74 1c		 je	 SHORT $LN10@Heap_Local
  0017f	41 b8 ac 07 00
	00		 mov	 r8d, 1964		; 000007acH
  00185	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0018c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1HI@JFOADBN@?$AAP?$AAx?$AA_?$AAP?$AAT?$AAR?$AA_?$AAA?$AAD?$AAD?$AA?$CI?$AAc?$AA?9?$AA?$DO?$AAt?$AAb?$AAu?$AAf?$AA_?$AAb?$AAa?$AAs?$AAe?$AA?0?$AA?5?$AAc?$AA?9?$AA?$DO?$AAt?$AAb?$AAu?$AAf@
  00193	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00199	33 c0		 xor	 eax, eax
$LN10@Heap_Local:
$LN3@Heap_Local:

; 1965 :         }
; 1966 : 
; 1967 :         c->tbuf_mallocs++;

  0019b	48 8b 44 24 60	 mov	 rax, QWORD PTR c$[rsp]
  001a0	48 8b 80 a0 37
	00 00		 mov	 rax, QWORD PTR [rax+14240]
  001a7	48 ff c0	 inc	 rax
  001aa	48 8b 4c 24 60	 mov	 rcx, QWORD PTR c$[rsp]
  001af	48 89 81 a0 37
	00 00		 mov	 QWORD PTR [rcx+14240], rax

; 1968 :         c->tbuf_allocated += aligned_size;

  001b6	48 8b 44 24 60	 mov	 rax, QWORD PTR c$[rsp]
  001bb	48 8b 80 a8 37
	00 00		 mov	 rax, QWORD PTR [rax+14248]
  001c2	48 03 44 24 20	 add	 rax, QWORD PTR aligned_size$[rsp]
  001c7	48 8b 4c 24 60	 mov	 rcx, QWORD PTR c$[rsp]
  001cc	48 89 81 a8 37
	00 00		 mov	 QWORD PTR [rcx+14248], rax

; 1969 :         c->tbuf_remaining -= aligned_size;

  001d3	48 8b 44 24 60	 mov	 rax, QWORD PTR c$[rsp]
  001d8	48 8b 4c 24 20	 mov	 rcx, QWORD PTR aligned_size$[rsp]
  001dd	48 8b 80 b0 37
	00 00		 mov	 rax, QWORD PTR [rax+14256]
  001e4	48 2b c1	 sub	 rax, rcx
  001e7	48 8b 4c 24 60	 mov	 rcx, QWORD PTR c$[rsp]
  001ec	48 89 81 b0 37
	00 00		 mov	 QWORD PTR [rcx+14256], rax

; 1970 : 
; 1971 :         c->tbuf_bytes_wasted += (aligned_size - requested_size);

  001f3	48 8b 44 24 28	 mov	 rax, QWORD PTR requested_size$[rsp]
  001f8	48 8b 4c 24 20	 mov	 rcx, QWORD PTR aligned_size$[rsp]
  001fd	48 2b c8	 sub	 rcx, rax
  00200	48 8b c1	 mov	 rax, rcx
  00203	48 8b 4c 24 60	 mov	 rcx, QWORD PTR c$[rsp]
  00208	48 03 81 b8 37
	00 00		 add	 rax, QWORD PTR [rcx+14264]
  0020f	48 8b 4c 24 60	 mov	 rcx, QWORD PTR c$[rsp]
  00214	48 89 81 b8 37
	00 00		 mov	 QWORD PTR [rcx+14264], rax

; 1972 : 
; 1973 :         next = c->tbuf_next;

  0021b	48 8b 44 24 60	 mov	 rax, QWORD PTR c$[rsp]
  00220	48 8b 80 98 37
	00 00		 mov	 rax, QWORD PTR [rax+14232]
  00227	48 89 44 24 30	 mov	 QWORD PTR next$[rsp], rax

; 1974 :         c->tbuf_next = Px_PTR_ADD(c->tbuf_next, aligned_size);

  0022c	48 8b 44 24 60	 mov	 rax, QWORD PTR c$[rsp]
  00231	48 8b 80 98 37
	00 00		 mov	 rax, QWORD PTR [rax+14232]
  00238	48 03 44 24 20	 add	 rax, QWORD PTR aligned_size$[rsp]
  0023d	48 8b 4c 24 60	 mov	 rcx, QWORD PTR c$[rsp]
  00242	48 89 81 98 37
	00 00		 mov	 QWORD PTR [rcx+14232], rax

; 1975 :         c->tbuf_next_alignment = Px_GET_ALIGNMENT(c->tbuf_next);

  00249	48 8b 44 24 60	 mov	 rax, QWORD PTR c$[rsp]
  0024e	48 8b 88 98 37
	00 00		 mov	 rcx, QWORD PTR [rax+14232]
  00255	e8 00 00 00 00	 call	 Px_GET_ALIGNMENT
  0025a	48 8b 4c 24 60	 mov	 rcx, QWORD PTR c$[rsp]
  0025f	48 89 81 c0 37
	00 00		 mov	 QWORD PTR [rcx+14272], rax

; 1976 :         assert(Px_PTR_ADD(c->tbuf_base, c->tbuf_allocated) == c->tbuf_next);

  00266	48 8b 44 24 60	 mov	 rax, QWORD PTR c$[rsp]
  0026b	48 8b 80 90 37
	00 00		 mov	 rax, QWORD PTR [rax+14224]
  00272	48 8b 4c 24 60	 mov	 rcx, QWORD PTR c$[rsp]
  00277	48 03 81 a8 37
	00 00		 add	 rax, QWORD PTR [rcx+14248]
  0027e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR c$[rsp]
  00283	48 3b 81 98 37
	00 00		 cmp	 rax, QWORD PTR [rcx+14232]
  0028a	74 1c		 je	 SHORT $LN11@Heap_Local
  0028c	41 b8 b8 07 00
	00		 mov	 r8d, 1976		; 000007b8H
  00292	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00299	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1HI@JFOADBN@?$AAP?$AAx?$AA_?$AAP?$AAT?$AAR?$AA_?$AAA?$AAD?$AAD?$AA?$CI?$AAc?$AA?9?$AA?$DO?$AAt?$AAb?$AAu?$AAf?$AA_?$AAb?$AAa?$AAs?$AAe?$AA?0?$AA?5?$AAc?$AA?9?$AA?$DO?$AAt?$AAb?$AAu?$AAf@
  002a0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  002a6	33 c0		 xor	 eax, eax
$LN11@Heap_Local:

; 1977 :         assert(_Py_IS_ALIGNED(next, alignment));

  002a8	48 8b 44 24 40	 mov	 rax, QWORD PTR alignment$[rsp]
  002ad	48 ff c8	 dec	 rax
  002b0	48 8b 4c 24 30	 mov	 rcx, QWORD PTR next$[rsp]
  002b5	48 23 c8	 and	 rcx, rax
  002b8	48 8b c1	 mov	 rax, rcx
  002bb	48 85 c0	 test	 rax, rax
  002be	74 1c		 je	 SHORT $LN12@Heap_Local
  002c0	41 b8 b9 07 00
	00		 mov	 r8d, 1977		; 000007b9H
  002c6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  002cd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EA@DKNKPPGC@?$AA_?$AAP?$AAy?$AA_?$AAI?$AAS?$AA_?$AAA?$AAL?$AAI?$AAG?$AAN?$AAE?$AAD?$AA?$CI?$AAn?$AAe?$AAx?$AAt?$AA?0?$AA?5?$AAa?$AAl?$AAi?$AAg?$AAn?$AAm?$AAe?$AAn?$AAt?$AA?$CJ?$AA?$AA@
  002d4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  002da	33 c0		 xor	 eax, eax
$LN12@Heap_Local:

; 1978 : 
; 1979 :     } else {

  002dc	e9 b1 00 00 00	 jmp	 $LN2@Heap_Local
$LN4@Heap_Local:

; 1980 :         next = (void *)malloc(aligned_size);

  002e1	48 8b 4c 24 20	 mov	 rcx, QWORD PTR aligned_size$[rsp]
  002e6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  002ec	48 89 44 24 30	 mov	 QWORD PTR next$[rsp], rax

; 1981 :         if (!next)

  002f1	48 83 7c 24 30
	00		 cmp	 QWORD PTR next$[rsp], 0
  002f7	75 0a		 jne	 SHORT $LN1@Heap_Local

; 1982 :             return PyErr_NoMemory();

  002f9	e8 00 00 00 00	 call	 PyErr_NoMemory
  002fe	e9 94 00 00 00	 jmp	 $LN8@Heap_Local
$LN1@Heap_Local:

; 1983 : 
; 1984 :         memset(next, 0, aligned_size);

  00303	4c 8b 44 24 20	 mov	 r8, QWORD PTR aligned_size$[rsp]
  00308	33 d2		 xor	 edx, edx
  0030a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR next$[rsp]
  0030f	e8 00 00 00 00	 call	 memset

; 1985 : 
; 1986 :         c->leak_count++;

  00314	48 8b 44 24 60	 mov	 rax, QWORD PTR c$[rsp]
  00319	48 8b 80 d8 37
	00 00		 mov	 rax, QWORD PTR [rax+14296]
  00320	48 ff c0	 inc	 rax
  00323	48 8b 4c 24 60	 mov	 rcx, QWORD PTR c$[rsp]
  00328	48 89 81 d8 37
	00 00		 mov	 QWORD PTR [rcx+14296], rax

; 1987 :         c->leaked_bytes += aligned_size;

  0032f	48 8b 44 24 60	 mov	 rax, QWORD PTR c$[rsp]
  00334	48 8b 80 d0 37
	00 00		 mov	 rax, QWORD PTR [rax+14288]
  0033b	48 03 44 24 20	 add	 rax, QWORD PTR aligned_size$[rsp]
  00340	48 8b 4c 24 60	 mov	 rcx, QWORD PTR c$[rsp]
  00345	48 89 81 d0 37
	00 00		 mov	 QWORD PTR [rcx+14288], rax

; 1988 :         c->last_leak = next;

  0034c	48 8b 44 24 60	 mov	 rax, QWORD PTR c$[rsp]
  00351	48 8b 4c 24 30	 mov	 rcx, QWORD PTR next$[rsp]
  00356	48 89 88 e0 37
	00 00		 mov	 QWORD PTR [rax+14304], rcx

; 1989 : 
; 1990 :         fmt = L"Heap_LocalMalloc: local buffer exhausted ("    \
; 1991 :               L"requested: %lld, available: %lld).  Resorted " \
; 1992 :               L"to malloc() -- note that memory will not be "  \
; 1993 :               L"freed!\n";

  0035d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_1BBG@JBIMKPHM@?$AAH?$AAe?$AAa?$AAp?$AA_?$AAL?$AAo?$AAc?$AAa?$AAl?$AAM?$AAa?$AAl?$AAl?$AAo?$AAc?$AA?3?$AA?5?$AAl?$AAo?$AAc?$AAa?$AAl?$AA?5?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?5?$AAe@
  00364	48 89 44 24 38	 mov	 QWORD PTR fmt$[rsp], rax

; 1994 :         fwprintf_s(stderr, fmt, aligned_size, c->tbuf_remaining);

  00369	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  0036f	48 83 c0 60	 add	 rax, 96			; 00000060H
  00373	48 8b 4c 24 60	 mov	 rcx, QWORD PTR c$[rsp]
  00378	4c 8b 89 b0 37
	00 00		 mov	 r9, QWORD PTR [rcx+14256]
  0037f	4c 8b 44 24 20	 mov	 r8, QWORD PTR aligned_size$[rsp]
  00384	48 8b 54 24 38	 mov	 rdx, QWORD PTR fmt$[rsp]
  00389	48 8b c8	 mov	 rcx, rax
  0038c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fwprintf_s
$LN2@Heap_Local:

; 1995 :     }
; 1996 : 
; 1997 :     return next;

  00392	48 8b 44 24 30	 mov	 rax, QWORD PTR next$[rsp]
$LN8@Heap_Local:

; 1998 : }

  00397	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0039b	c3		 ret	 0
Heap_LocalMalloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_1EI@KNJLBONP@?$AAP?$AAx?$AA_?$AAG?$AAE?$AAT?$AA_?$AAA?$AAL?$AAI?$AAG?$AAN?$AAM?$AAE?$AAN?$AAT?$AA?$CI?$AAn?$AAe?$AAx?$AAt?$AA?$CJ?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAa?$AAl?$AAi?$AAg?$AAn?$AAm@ ; `string'
PUBLIC	??_C@_1EG@JGCNDNBG@?$AA_?$AAP?$AAy?$AA_?$AAI?$AAS?$AA_?$AAA?$AAL?$AAI?$AAG?$AAN?$AAE?$AAD?$AA?$CI?$AAh?$AA?9?$AA?$DO?$AAb?$AAa?$AAs?$AAe?$AA?0?$AA?5?$AAa?$AAl?$AAi?$AAg?$AAn?$AAm?$AAe?$AAn@ ; `string'
PUBLIC	??_C@_1FK@IKGKJGMB@?$AAP?$AAx?$AA_?$AAP?$AAT?$AAR?$AA_?$AAA?$AAD?$AAD?$AA?$CI?$AAh?$AA?9?$AA?$DO?$AAb?$AAa?$AAs?$AAe?$AA?0?$AA?5?$AAh?$AA?9?$AA?$DO?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAd@ ; `string'
PUBLIC	??_C@_1EE@JBLKGFAK@?$AAt?$AA?9?$AA?$DO?$AAh?$AAe?$AAa?$AAp?$AA_?$AAd?$AAe?$AAp?$AAt?$AAh?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AA_?$AAP?$AAx?$AAN?$AAe?$AAw?$AAT?$AAh?$AAr?$AAe?$AAa@ ; `string'
EXTRN	__imp__aligned_malloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyTLSHeap_Malloc DD imagerel $LN16
	DD	imagerel $LN16+1192
	DD	imagerel $unwind$_PyTLSHeap_Malloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyTLSHeap_Malloc DD 010e01H
	DD	0e20eH
xdata	ENDS
;	COMDAT ??_C@_1EI@KNJLBONP@?$AAP?$AAx?$AA_?$AAG?$AAE?$AAT?$AA_?$AAA?$AAL?$AAI?$AAG?$AAN?$AAM?$AAE?$AAN?$AAT?$AA?$CI?$AAn?$AAe?$AAx?$AAt?$AA?$CJ?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAa?$AAl?$AAi?$AAg?$AAn?$AAm@
CONST	SEGMENT
??_C@_1EI@KNJLBONP@?$AAP?$AAx?$AA_?$AAG?$AAE?$AAT?$AA_?$AAA?$AAL?$AAI?$AAG?$AAN?$AAM?$AAE?$AAN?$AAT?$AA?$CI?$AAn?$AAe?$AAx?$AAt?$AA?$CJ?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAa?$AAl?$AAi?$AAg?$AAn?$AAm@ DB 'P'
	DB	00H, 'x', 00H, '_', 00H, 'G', 00H, 'E', 00H, 'T', 00H, '_', 00H
	DB	'A', 00H, 'L', 00H, 'I', 00H, 'G', 00H, 'N', 00H, 'M', 00H, 'E'
	DB	00H, 'N', 00H, 'T', 00H, '(', 00H, 'n', 00H, 'e', 00H, 'x', 00H
	DB	't', 00H, ')', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, 'a'
	DB	00H, 'l', 00H, 'i', 00H, 'g', 00H, 'n', 00H, 'm', 00H, 'e', 00H
	DB	'n', 00H, 't', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1EG@JGCNDNBG@?$AA_?$AAP?$AAy?$AA_?$AAI?$AAS?$AA_?$AAA?$AAL?$AAI?$AAG?$AAN?$AAE?$AAD?$AA?$CI?$AAh?$AA?9?$AA?$DO?$AAb?$AAa?$AAs?$AAe?$AA?0?$AA?5?$AAa?$AAl?$AAi?$AAg?$AAn?$AAm?$AAe?$AAn@
CONST	SEGMENT
??_C@_1EG@JGCNDNBG@?$AA_?$AAP?$AAy?$AA_?$AAI?$AAS?$AA_?$AAA?$AAL?$AAI?$AAG?$AAN?$AAE?$AAD?$AA?$CI?$AAh?$AA?9?$AA?$DO?$AAb?$AAa?$AAs?$AAe?$AA?0?$AA?5?$AAa?$AAl?$AAi?$AAg?$AAn?$AAm?$AAe?$AAn@ DB '_'
	DB	00H, 'P', 00H, 'y', 00H, '_', 00H, 'I', 00H, 'S', 00H, '_', 00H
	DB	'A', 00H, 'L', 00H, 'I', 00H, 'G', 00H, 'N', 00H, 'E', 00H, 'D'
	DB	00H, '(', 00H, 'h', 00H, '-', 00H, '>', 00H, 'b', 00H, 'a', 00H
	DB	's', 00H, 'e', 00H, ',', 00H, ' ', 00H, 'a', 00H, 'l', 00H, 'i'
	DB	00H, 'g', 00H, 'n', 00H, 'm', 00H, 'e', 00H, 'n', 00H, 't', 00H
	DB	')', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1FK@IKGKJGMB@?$AAP?$AAx?$AA_?$AAP?$AAT?$AAR?$AA_?$AAA?$AAD?$AAD?$AA?$CI?$AAh?$AA?9?$AA?$DO?$AAb?$AAa?$AAs?$AAe?$AA?0?$AA?5?$AAh?$AA?9?$AA?$DO?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAd@
CONST	SEGMENT
??_C@_1FK@IKGKJGMB@?$AAP?$AAx?$AA_?$AAP?$AAT?$AAR?$AA_?$AAA?$AAD?$AAD?$AA?$CI?$AAh?$AA?9?$AA?$DO?$AAb?$AAa?$AAs?$AAe?$AA?0?$AA?5?$AAh?$AA?9?$AA?$DO?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAd@ DB 'P'
	DB	00H, 'x', 00H, '_', 00H, 'P', 00H, 'T', 00H, 'R', 00H, '_', 00H
	DB	'A', 00H, 'D', 00H, 'D', 00H, '(', 00H, 'h', 00H, '-', 00H, '>'
	DB	00H, 'b', 00H, 'a', 00H, 's', 00H, 'e', 00H, ',', 00H, ' ', 00H
	DB	'h', 00H, '-', 00H, '>', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'o'
	DB	00H, 'c', 00H, 'a', 00H, 't', 00H, 'e', 00H, 'd', 00H, ')', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'h', 00H, '-', 00H, '>'
	DB	00H, 'n', 00H, 'e', 00H, 'x', 00H, 't', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EE@JBLKGFAK@?$AAt?$AA?9?$AA?$DO?$AAh?$AAe?$AAa?$AAp?$AA_?$AAd?$AAe?$AAp?$AAt?$AAh?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AA_?$AAP?$AAx?$AAN?$AAe?$AAw?$AAT?$AAh?$AAr?$AAe?$AAa@
CONST	SEGMENT
??_C@_1EE@JBLKGFAK@?$AAt?$AA?9?$AA?$DO?$AAh?$AAe?$AAa?$AAp?$AA_?$AAd?$AAe?$AAp?$AAt?$AAh?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AA_?$AAP?$AAx?$AAN?$AAe?$AAw?$AAT?$AAh?$AAr?$AAe?$AAa@ DB 't'
	DB	00H, '-', 00H, '>', 00H, 'h', 00H, 'e', 00H, 'a', 00H, 'p', 00H
	DB	'_', 00H, 'd', 00H, 'e', 00H, 'p', 00H, 't', 00H, 'h', 00H, ' '
	DB	00H, '>', 00H, ' ', 00H, '0', 00H, ' ', 00H, '|', 00H, '|', 00H
	DB	' ', 00H, '_', 00H, 'P', 00H, 'x', 00H, 'N', 00H, 'e', 00H, 'w'
	DB	00H, 'T', 00H, 'h', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'd', 00H
	DB	00H, 00H					; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PyTLSHeap_Malloc
_TEXT	SEGMENT
h$ = 32
s$ = 40
aligned_size$ = 48
requested_size$ = 56
next$ = 64
alignment$ = 72
alignment_diff$ = 80
t$ = 88
tv236 = 96
n$ = 128
align$ = 136
_PyTLSHeap_Malloc PROC					; COMDAT

; 2002 : {

$LN16:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 2003 :     void  *next;
; 2004 :     Heap  *h;
; 2005 :     TLS   *t = &tls;

  0000e	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:tls
  00013	8b c0		 mov	 eax, eax
  00015	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0001b	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00024	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00028	48 89 44 24 58	 mov	 QWORD PTR t$[rsp], rax

; 2006 :     Stats *s = &t->stats;

  0002d	48 8b 44 24 58	 mov	 rax, QWORD PTR t$[rsp]
  00032	48 05 e0 00 00
	00		 add	 rax, 224		; 000000e0H
  00038	48 89 44 24 28	 mov	 QWORD PTR s$[rsp], rax

; 2007 :     size_t alignment_diff;
; 2008 :     size_t alignment = align;

  0003d	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR align$[rsp]
  00045	48 89 44 24 48	 mov	 QWORD PTR alignment$[rsp], rax

; 2009 :     size_t requested_size = n;

  0004a	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR n$[rsp]
  00052	48 89 44 24 38	 mov	 QWORD PTR requested_size$[rsp], rax

; 2010 :     size_t aligned_size;
; 2011 : 
; 2012 :     assert(t->heap_depth > 0 || _PxNewThread);

  00057	48 8b 44 24 58	 mov	 rax, QWORD PTR t$[rsp]
  0005c	83 b8 d0 00 00
	00 00		 cmp	 DWORD PTR [rax+208], 0
  00063	7f 3c		 jg	 SHORT $LN9@PyTLSHeap_@2
  00065	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:_PxNewThread
  0006a	8b c0		 mov	 eax, eax
  0006c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00072	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0007b	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  0007f	83 3c 08 00	 cmp	 DWORD PTR [rax+rcx], 0
  00083	75 1c		 jne	 SHORT $LN9@PyTLSHeap_@2
  00085	41 b8 dc 07 00
	00		 mov	 r8d, 2012		; 000007dcH
  0008b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00092	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@JBLKGFAK@?$AAt?$AA?9?$AA?$DO?$AAh?$AAe?$AAa?$AAp?$AA_?$AAd?$AAe?$AAp?$AAt?$AAh?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AA_?$AAP?$AAx?$AAN?$AAe?$AAw?$AAT?$AAh?$AAr?$AAe?$AAa@
  00099	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0009f	33 c0		 xor	 eax, eax
$LN9@PyTLSHeap_@2:

; 2013 : 
; 2014 :     if (!alignment)

  000a1	48 83 7c 24 48
	00		 cmp	 QWORD PTR alignment$[rsp], 0
  000a7	75 09		 jne	 SHORT $LN6@PyTLSHeap_@2

; 2015 :         alignment = Px_PTR_ALIGN_SIZE;

  000a9	48 c7 44 24 48
	08 00 00 00	 mov	 QWORD PTR alignment$[rsp], 8
$LN6@PyTLSHeap_@2:
$begin$127684:

; 2016 : begin:
; 2017 :     h = t->h;

  000b2	48 8b 44 24 58	 mov	 rax, QWORD PTR t$[rsp]
  000b7	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000ba	48 89 44 24 20	 mov	 QWORD PTR h$[rsp], rax

; 2018 : 
; 2019 :     if (alignment > h->next_alignment)

  000bf	48 8b 44 24 20	 mov	 rax, QWORD PTR h$[rsp]
  000c4	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  000c8	48 39 44 24 48	 cmp	 QWORD PTR alignment$[rsp], rax
  000cd	76 23		 jbe	 SHORT $LN5@PyTLSHeap_@2

; 2020 :         alignment_diff = Px_PTR_ALIGN(alignment - h->next_alignment);

  000cf	48 8b 44 24 20	 mov	 rax, QWORD PTR h$[rsp]
  000d4	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  000d8	48 8b 4c 24 48	 mov	 rcx, QWORD PTR alignment$[rsp]
  000dd	48 2b c8	 sub	 rcx, rax
  000e0	48 8b c1	 mov	 rax, rcx
  000e3	48 83 c0 07	 add	 rax, 7
  000e7	48 83 e0 f8	 and	 rax, -8
  000eb	48 89 44 24 50	 mov	 QWORD PTR alignment_diff$[rsp], rax

; 2021 :     else

  000f0	eb 09		 jmp	 SHORT $LN4@PyTLSHeap_@2
$LN5@PyTLSHeap_@2:

; 2022 :         alignment_diff = 0;

  000f2	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR alignment_diff$[rsp], 0
$LN4@PyTLSHeap_@2:

; 2023 : 
; 2024 :     aligned_size = Px_ALIGN(n, alignment);

  000fb	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR n$[rsp]
  00103	48 8b 4c 24 48	 mov	 rcx, QWORD PTR alignment$[rsp]
  00108	48 8d 44 08 ff	 lea	 rax, QWORD PTR [rax+rcx-1]
  0010d	48 8b 4c 24 48	 mov	 rcx, QWORD PTR alignment$[rsp]
  00112	48 ff c9	 dec	 rcx
  00115	48 f7 d1	 not	 rcx
  00118	48 23 c1	 and	 rax, rcx
  0011b	48 89 44 24 30	 mov	 QWORD PTR aligned_size$[rsp], rax

; 2025 : 
; 2026 :     if (aligned_size < (h->remaining-alignment_diff)) {

  00120	48 8b 44 24 20	 mov	 rax, QWORD PTR h$[rsp]
  00125	48 8b 4c 24 50	 mov	 rcx, QWORD PTR alignment_diff$[rsp]
  0012a	48 8b 40 48	 mov	 rax, QWORD PTR [rax+72]
  0012e	48 2b c1	 sub	 rax, rcx
  00131	48 39 44 24 30	 cmp	 QWORD PTR aligned_size$[rsp], rax
  00136	0f 83 f1 02 00
	00		 jae	 $LN3@PyTLSHeap_@2

; 2027 :         if (alignment_diff) {

  0013c	48 83 7c 24 50
	00		 cmp	 QWORD PTR alignment_diff$[rsp], 0
  00142	0f 84 22 01 00
	00		 je	 $LN2@PyTLSHeap_@2

; 2028 :             h->remaining -= alignment_diff;

  00148	48 8b 44 24 20	 mov	 rax, QWORD PTR h$[rsp]
  0014d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR alignment_diff$[rsp]
  00152	48 8b 40 48	 mov	 rax, QWORD PTR [rax+72]
  00156	48 2b c1	 sub	 rax, rcx
  00159	48 8b 4c 24 20	 mov	 rcx, QWORD PTR h$[rsp]
  0015e	48 89 41 48	 mov	 QWORD PTR [rcx+72], rax

; 2029 :             s->remaining -= alignment_diff;

  00162	48 8b 44 24 28	 mov	 rax, QWORD PTR s$[rsp]
  00167	48 8b 4c 24 50	 mov	 rcx, QWORD PTR alignment_diff$[rsp]
  0016c	48 8b 80 a8 00
	00 00		 mov	 rax, QWORD PTR [rax+168]
  00173	48 2b c1	 sub	 rax, rcx
  00176	48 8b 4c 24 28	 mov	 rcx, QWORD PTR s$[rsp]
  0017b	48 89 81 a8 00
	00 00		 mov	 QWORD PTR [rcx+168], rax

; 2030 :             h->allocated += alignment_diff;

  00182	48 8b 44 24 20	 mov	 rax, QWORD PTR h$[rsp]
  00187	48 8b 40 40	 mov	 rax, QWORD PTR [rax+64]
  0018b	48 03 44 24 50	 add	 rax, QWORD PTR alignment_diff$[rsp]
  00190	48 8b 4c 24 20	 mov	 rcx, QWORD PTR h$[rsp]
  00195	48 89 41 40	 mov	 QWORD PTR [rcx+64], rax

; 2031 :             s->allocated += alignment_diff;

  00199	48 8b 44 24 28	 mov	 rax, QWORD PTR s$[rsp]
  0019e	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  001a5	48 03 44 24 50	 add	 rax, QWORD PTR alignment_diff$[rsp]
  001aa	48 8b 4c 24 28	 mov	 rcx, QWORD PTR s$[rsp]
  001af	48 89 81 a0 00
	00 00		 mov	 QWORD PTR [rcx+160], rax

; 2032 :             h->alignment_mismatches++;

  001b6	48 8b 44 24 20	 mov	 rax, QWORD PTR h$[rsp]
  001bb	48 8b 80 98 00
	00 00		 mov	 rax, QWORD PTR [rax+152]
  001c2	48 ff c0	 inc	 rax
  001c5	48 8b 4c 24 20	 mov	 rcx, QWORD PTR h$[rsp]
  001ca	48 89 81 98 00
	00 00		 mov	 QWORD PTR [rcx+152], rax

; 2033 :             s->alignment_mismatches++;

  001d1	48 8b 44 24 28	 mov	 rax, QWORD PTR s$[rsp]
  001d6	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  001da	48 ff c0	 inc	 rax
  001dd	48 8b 4c 24 28	 mov	 rcx, QWORD PTR s$[rsp]
  001e2	48 89 41 70	 mov	 QWORD PTR [rcx+112], rax

; 2034 :             h->bytes_wasted += alignment_diff;

  001e6	48 8b 44 24 20	 mov	 rax, QWORD PTR h$[rsp]
  001eb	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  001f2	48 03 44 24 50	 add	 rax, QWORD PTR alignment_diff$[rsp]
  001f7	48 8b 4c 24 20	 mov	 rcx, QWORD PTR h$[rsp]
  001fc	48 89 81 a0 00
	00 00		 mov	 QWORD PTR [rcx+160], rax

; 2035 :             s->bytes_wasted += alignment_diff;

  00203	48 8b 44 24 28	 mov	 rax, QWORD PTR s$[rsp]
  00208	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  0020c	48 03 44 24 50	 add	 rax, QWORD PTR alignment_diff$[rsp]
  00211	48 8b 4c 24 28	 mov	 rcx, QWORD PTR s$[rsp]
  00216	48 89 41 78	 mov	 QWORD PTR [rcx+120], rax

; 2036 :             h->next = Px_PTR_ADD(h->next, alignment_diff);

  0021a	48 8b 44 24 20	 mov	 rax, QWORD PTR h$[rsp]
  0021f	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  00223	48 03 44 24 50	 add	 rax, QWORD PTR alignment_diff$[rsp]
  00228	48 8b 4c 24 20	 mov	 rcx, QWORD PTR h$[rsp]
  0022d	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax

; 2037 :             assert(Px_PTR_ADD(h->base, h->allocated) == h->next);

  00231	48 8b 44 24 20	 mov	 rax, QWORD PTR h$[rsp]
  00236	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0023a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR h$[rsp]
  0023f	48 03 41 40	 add	 rax, QWORD PTR [rcx+64]
  00243	48 8b 4c 24 20	 mov	 rcx, QWORD PTR h$[rsp]
  00248	48 3b 41 18	 cmp	 rax, QWORD PTR [rcx+24]
  0024c	74 1c		 je	 SHORT $LN10@PyTLSHeap_@2
  0024e	41 b8 f5 07 00
	00		 mov	 r8d, 2037		; 000007f5H
  00254	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0025b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FK@IKGKJGMB@?$AAP?$AAx?$AA_?$AAP?$AAT?$AAR?$AA_?$AAA?$AAD?$AAD?$AA?$CI?$AAh?$AA?9?$AA?$DO?$AAb?$AAa?$AAs?$AAe?$AA?0?$AA?5?$AAh?$AA?9?$AA?$DO?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAd@
  00262	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00268	33 c0		 xor	 eax, eax
$LN10@PyTLSHeap_@2:
$LN2@PyTLSHeap_@2:

; 2038 :         }
; 2039 : 
; 2040 :         h->allocated += aligned_size;

  0026a	48 8b 44 24 20	 mov	 rax, QWORD PTR h$[rsp]
  0026f	48 8b 40 40	 mov	 rax, QWORD PTR [rax+64]
  00273	48 03 44 24 30	 add	 rax, QWORD PTR aligned_size$[rsp]
  00278	48 8b 4c 24 20	 mov	 rcx, QWORD PTR h$[rsp]
  0027d	48 89 41 40	 mov	 QWORD PTR [rcx+64], rax

; 2041 :         s->allocated += aligned_size;

  00281	48 8b 44 24 28	 mov	 rax, QWORD PTR s$[rsp]
  00286	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  0028d	48 03 44 24 30	 add	 rax, QWORD PTR aligned_size$[rsp]
  00292	48 8b 4c 24 28	 mov	 rcx, QWORD PTR s$[rsp]
  00297	48 89 81 a0 00
	00 00		 mov	 QWORD PTR [rcx+160], rax

; 2042 : 
; 2043 :         h->remaining -= aligned_size;

  0029e	48 8b 44 24 20	 mov	 rax, QWORD PTR h$[rsp]
  002a3	48 8b 4c 24 30	 mov	 rcx, QWORD PTR aligned_size$[rsp]
  002a8	48 8b 40 48	 mov	 rax, QWORD PTR [rax+72]
  002ac	48 2b c1	 sub	 rax, rcx
  002af	48 8b 4c 24 20	 mov	 rcx, QWORD PTR h$[rsp]
  002b4	48 89 41 48	 mov	 QWORD PTR [rcx+72], rax

; 2044 :         s->remaining -= aligned_size;

  002b8	48 8b 44 24 28	 mov	 rax, QWORD PTR s$[rsp]
  002bd	48 8b 4c 24 30	 mov	 rcx, QWORD PTR aligned_size$[rsp]
  002c2	48 8b 80 a8 00
	00 00		 mov	 rax, QWORD PTR [rax+168]
  002c9	48 2b c1	 sub	 rax, rcx
  002cc	48 8b 4c 24 28	 mov	 rcx, QWORD PTR s$[rsp]
  002d1	48 89 81 a8 00
	00 00		 mov	 QWORD PTR [rcx+168], rax

; 2045 : 
; 2046 :         h->mallocs++;

  002d8	48 8b 44 24 20	 mov	 rax, QWORD PTR h$[rsp]
  002dd	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  002e1	48 ff c0	 inc	 rax
  002e4	48 8b 4c 24 20	 mov	 rcx, QWORD PTR h$[rsp]
  002e9	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax

; 2047 :         s->mallocs++;

  002ed	48 8b 44 24 28	 mov	 rax, QWORD PTR s$[rsp]
  002f2	48 8b 40 40	 mov	 rax, QWORD PTR [rax+64]
  002f6	48 ff c0	 inc	 rax
  002f9	48 8b 4c 24 28	 mov	 rcx, QWORD PTR s$[rsp]
  002fe	48 89 41 40	 mov	 QWORD PTR [rcx+64], rax

; 2048 : 
; 2049 :         h->bytes_wasted += (aligned_size - requested_size);

  00302	48 8b 44 24 38	 mov	 rax, QWORD PTR requested_size$[rsp]
  00307	48 8b 4c 24 30	 mov	 rcx, QWORD PTR aligned_size$[rsp]
  0030c	48 2b c8	 sub	 rcx, rax
  0030f	48 8b c1	 mov	 rax, rcx
  00312	48 8b 4c 24 20	 mov	 rcx, QWORD PTR h$[rsp]
  00317	48 03 81 a0 00
	00 00		 add	 rax, QWORD PTR [rcx+160]
  0031e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR h$[rsp]
  00323	48 89 81 a0 00
	00 00		 mov	 QWORD PTR [rcx+160], rax

; 2050 :         s->bytes_wasted += (aligned_size - requested_size);

  0032a	48 8b 44 24 38	 mov	 rax, QWORD PTR requested_size$[rsp]
  0032f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR aligned_size$[rsp]
  00334	48 2b c8	 sub	 rcx, rax
  00337	48 8b c1	 mov	 rax, rcx
  0033a	48 8b 4c 24 28	 mov	 rcx, QWORD PTR s$[rsp]
  0033f	48 03 41 78	 add	 rax, QWORD PTR [rcx+120]
  00343	48 8b 4c 24 28	 mov	 rcx, QWORD PTR s$[rsp]
  00348	48 89 41 78	 mov	 QWORD PTR [rcx+120], rax

; 2051 : 
; 2052 :         next = h->next;

  0034c	48 8b 44 24 20	 mov	 rax, QWORD PTR h$[rsp]
  00351	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  00355	48 89 44 24 40	 mov	 QWORD PTR next$[rsp], rax

; 2053 :         h->next = Px_PTR_ADD(h->next, aligned_size);

  0035a	48 8b 44 24 20	 mov	 rax, QWORD PTR h$[rsp]
  0035f	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  00363	48 03 44 24 30	 add	 rax, QWORD PTR aligned_size$[rsp]
  00368	48 8b 4c 24 20	 mov	 rcx, QWORD PTR h$[rsp]
  0036d	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax

; 2054 :         h->next_alignment = Px_GET_ALIGNMENT(h->next);

  00371	48 8b 44 24 20	 mov	 rax, QWORD PTR h$[rsp]
  00376	48 8b 48 18	 mov	 rcx, QWORD PTR [rax+24]
  0037a	e8 00 00 00 00	 call	 Px_GET_ALIGNMENT
  0037f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR h$[rsp]
  00384	48 89 41 30	 mov	 QWORD PTR [rcx+48], rax

; 2055 : 
; 2056 :         assert(Px_PTR_ADD(h->base, h->allocated) == h->next);

  00388	48 8b 44 24 20	 mov	 rax, QWORD PTR h$[rsp]
  0038d	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00391	48 8b 4c 24 20	 mov	 rcx, QWORD PTR h$[rsp]
  00396	48 03 41 40	 add	 rax, QWORD PTR [rcx+64]
  0039a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR h$[rsp]
  0039f	48 3b 41 18	 cmp	 rax, QWORD PTR [rcx+24]
  003a3	74 1c		 je	 SHORT $LN11@PyTLSHeap_@2
  003a5	41 b8 08 08 00
	00		 mov	 r8d, 2056		; 00000808H
  003ab	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  003b2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FK@IKGKJGMB@?$AAP?$AAx?$AA_?$AAP?$AAT?$AAR?$AA_?$AAA?$AAD?$AAD?$AA?$CI?$AAh?$AA?9?$AA?$DO?$AAb?$AAa?$AAs?$AAe?$AA?0?$AA?5?$AAh?$AA?9?$AA?$DO?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAd@
  003b9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  003bf	33 c0		 xor	 eax, eax
$LN11@PyTLSHeap_@2:

; 2057 :         assert(_Py_IS_ALIGNED(h->base, alignment));

  003c1	48 8b 44 24 48	 mov	 rax, QWORD PTR alignment$[rsp]
  003c6	48 ff c8	 dec	 rax
  003c9	48 8b 4c 24 20	 mov	 rcx, QWORD PTR h$[rsp]
  003ce	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  003d2	48 23 c8	 and	 rcx, rax
  003d5	48 8b c1	 mov	 rax, rcx
  003d8	48 85 c0	 test	 rax, rax
  003db	74 1c		 je	 SHORT $LN12@PyTLSHeap_@2
  003dd	41 b8 09 08 00
	00		 mov	 r8d, 2057		; 00000809H
  003e3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  003ea	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EG@JGCNDNBG@?$AA_?$AAP?$AAy?$AA_?$AAI?$AAS?$AA_?$AAA?$AAL?$AAI?$AAG?$AAN?$AAE?$AAD?$AA?$CI?$AAh?$AA?9?$AA?$DO?$AAb?$AAa?$AAs?$AAe?$AA?0?$AA?5?$AAa?$AAl?$AAi?$AAg?$AAn?$AAm?$AAe?$AAn@
  003f1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  003f7	33 c0		 xor	 eax, eax
$LN12@PyTLSHeap_@2:

; 2058 :         assert(Px_GET_ALIGNMENT(next) >= alignment);

  003f9	48 8b 4c 24 40	 mov	 rcx, QWORD PTR next$[rsp]
  003fe	e8 00 00 00 00	 call	 Px_GET_ALIGNMENT
  00403	48 3b 44 24 48	 cmp	 rax, QWORD PTR alignment$[rsp]
  00408	73 1c		 jae	 SHORT $LN13@PyTLSHeap_@2
  0040a	41 b8 0a 08 00
	00		 mov	 r8d, 2058		; 0000080aH
  00410	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00417	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EI@KNJLBONP@?$AAP?$AAx?$AA_?$AAG?$AAE?$AAT?$AA_?$AAA?$AAL?$AAI?$AAG?$AAN?$AAM?$AAE?$AAN?$AAT?$AA?$CI?$AAn?$AAe?$AAx?$AAt?$AA?$CJ?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAa?$AAl?$AAi?$AAg?$AAn?$AAm@
  0041e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00424	33 c0		 xor	 eax, eax
$LN13@PyTLSHeap_@2:

; 2059 :         return next;

  00426	48 8b 44 24 40	 mov	 rax, QWORD PTR next$[rsp]
  0042b	eb 76		 jmp	 SHORT $LN7@PyTLSHeap_@2
$LN3@PyTLSHeap_@2:

; 2060 :     }
; 2061 : 
; 2062 :     t->h = h->sle_next;

  0042d	48 8b 44 24 58	 mov	 rax, QWORD PTR t$[rsp]
  00432	48 8b 4c 24 20	 mov	 rcx, QWORD PTR h$[rsp]
  00437	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  0043b	48 89 08	 mov	 QWORD PTR [rax], rcx

; 2063 : 
; 2064 :     if (!t->h->size && !_PyTLSHeap_Init(Px_NEW_HEAP_SIZE(aligned_size), 0)) {

  0043e	48 8b 44 24 58	 mov	 rax, QWORD PTR t$[rsp]
  00443	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00446	48 83 78 38 00	 cmp	 QWORD PTR [rax+56], 0
  0044b	75 51		 jne	 SHORT $LN1@PyTLSHeap_@2
  0044d	48 81 7c 24 30
	40 0f 00 00	 cmp	 QWORD PTR aligned_size$[rsp], 3904 ; 00000f40H
  00456	76 0c		 jbe	 SHORT $LN14@PyTLSHeap_@2
  00458	48 8b 44 24 30	 mov	 rax, QWORD PTR aligned_size$[rsp]
  0045d	48 89 44 24 60	 mov	 QWORD PTR tv236[rsp], rax
  00462	eb 09		 jmp	 SHORT $LN15@PyTLSHeap_@2
$LN14@PyTLSHeap_@2:
  00464	48 c7 44 24 60
	40 0f 00 00	 mov	 QWORD PTR tv236[rsp], 3904 ; 00000f40H
$LN15@PyTLSHeap_@2:
  0046d	48 8b 44 24 60	 mov	 rax, QWORD PTR tv236[rsp]
  00472	48 05 ff 0f 00
	00		 add	 rax, 4095		; 00000fffH
  00478	48 25 00 f0 ff
	ff		 and	 rax, -4096		; fffffffffffff000H
  0047e	33 d2		 xor	 edx, edx
  00480	48 8b c8	 mov	 rcx, rax
  00483	e8 00 00 00 00	 call	 _PyTLSHeap_Init
  00488	85 c0		 test	 eax, eax
  0048a	75 12		 jne	 SHORT $LN1@PyTLSHeap_@2

; 2065 :         return _aligned_malloc(aligned_size, alignment);

  0048c	48 8b 54 24 48	 mov	 rdx, QWORD PTR alignment$[rsp]
  00491	48 8b 4c 24 30	 mov	 rcx, QWORD PTR aligned_size$[rsp]
  00496	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__aligned_malloc
  0049c	eb 05		 jmp	 SHORT $LN7@PyTLSHeap_@2
$LN1@PyTLSHeap_@2:

; 2066 :     }
; 2067 : 
; 2068 :     goto begin;

  0049e	e9 0f fc ff ff	 jmp	 $begin$127684
$LN7@PyTLSHeap_@2:

; 2069 : }

  004a3	48 83 c4 78	 add	 rsp, 120		; 00000078H
  004a7	c3		 ret	 0
_PyTLSHeap_Malloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_1EG@PJJDKMK@?$AA_?$AAP?$AAy?$AAP?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA_?$AAI?$AAs?$AAH?$AAe?$AAa?$AAp?$AAO?$AAv?$AAe?$AAr?$AAr?$AAi?$AAd?$AAe?$AAA?$AAc?$AAt?$AAi?$AAv?$AAe@ ; `string'
PUBLIC	_PyHeapOverride_Malloc
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyHeapOverride_Malloc DD imagerel $LN9
	DD	imagerel $LN9+250
	DD	imagerel $unwind$_PyHeapOverride_Malloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyHeapOverride_Malloc DD 010e01H
	DD	0a20eH
xdata	ENDS
;	COMDAT ??_C@_1EG@PJJDKMK@?$AA_?$AAP?$AAy?$AAP?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA_?$AAI?$AAs?$AAH?$AAe?$AAa?$AAp?$AAO?$AAv?$AAe?$AAr?$AAr?$AAi?$AAd?$AAe?$AAA?$AAc?$AAt?$AAi?$AAv?$AAe@
CONST	SEGMENT
??_C@_1EG@PJJDKMK@?$AA_?$AAP?$AAy?$AAP?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA_?$AAI?$AAs?$AAH?$AAe?$AAa?$AAp?$AAO?$AAv?$AAe?$AAr?$AAr?$AAi?$AAd?$AAe?$AAA?$AAc?$AAt?$AAi?$AAv?$AAe@ DB '_'
	DB	00H, 'P', 00H, 'y', 00H, 'P', 00H, 'a', 00H, 'r', 00H, 'a', 00H
	DB	'l', 00H, 'l', 00H, 'e', 00H, 'l', 00H, '_', 00H, 'I', 00H, 's'
	DB	00H, 'H', 00H, 'e', 00H, 'a', 00H, 'p', 00H, 'O', 00H, 'v', 00H
	DB	'e', 00H, 'r', 00H, 'r', 00H, 'i', 00H, 'd', 00H, 'e', 00H, 'A'
	DB	00H, 'c', 00H, 't', 00H, 'i', 00H, 'v', 00H, 'e', 00H, '(', 00H
	DB	')', 00H, 00H, 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PyHeapOverride_Malloc
_TEXT	SEGMENT
p$ = 32
h$ = 40
flags$ = 48
aligned_size$ = 56
tv65 = 64
tv69 = 72
n$ = 96
align$ = 104
_PyHeapOverride_Malloc PROC				; COMDAT

; 2073 : {

$LN9:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 2074 :     void *p;
; 2075 :     HANDLE h;
; 2076 :     int flags = HEAP_ZERO_MEMORY;

  0000e	c7 44 24 30 08
	00 00 00	 mov	 DWORD PTR flags$[rsp], 8

; 2077 :     size_t aligned_size = Px_ALIGN(n, Px_MAX(align, Px_PTR_ALIGN_SIZE));

  00016	48 83 7c 24 68
	08		 cmp	 QWORD PTR align$[rsp], 8
  0001c	76 0c		 jbe	 SHORT $LN4@PyHeapOver
  0001e	48 8b 44 24 68	 mov	 rax, QWORD PTR align$[rsp]
  00023	48 89 44 24 40	 mov	 QWORD PTR tv65[rsp], rax
  00028	eb 09		 jmp	 SHORT $LN5@PyHeapOver
$LN4@PyHeapOver:
  0002a	48 c7 44 24 40
	08 00 00 00	 mov	 QWORD PTR tv65[rsp], 8
$LN5@PyHeapOver:
  00033	48 83 7c 24 68
	08		 cmp	 QWORD PTR align$[rsp], 8
  00039	76 0c		 jbe	 SHORT $LN6@PyHeapOver
  0003b	48 8b 44 24 68	 mov	 rax, QWORD PTR align$[rsp]
  00040	48 89 44 24 48	 mov	 QWORD PTR tv69[rsp], rax
  00045	eb 09		 jmp	 SHORT $LN7@PyHeapOver
$LN6@PyHeapOver:
  00047	48 c7 44 24 48
	08 00 00 00	 mov	 QWORD PTR tv69[rsp], 8
$LN7@PyHeapOver:
  00050	48 8b 44 24 60	 mov	 rax, QWORD PTR n$[rsp]
  00055	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tv65[rsp]
  0005a	48 8d 44 08 ff	 lea	 rax, QWORD PTR [rax+rcx-1]
  0005f	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tv69[rsp]
  00064	48 ff c9	 dec	 rcx
  00067	48 f7 d1	 not	 rcx
  0006a	48 23 c1	 and	 rax, rcx
  0006d	48 89 44 24 38	 mov	 QWORD PTR aligned_size$[rsp], rax

; 2078 :     assert(_PyParallel_IsHeapOverrideActive());

  00072	e8 00 00 00 00	 call	 _PyParallel_IsHeapOverrideActive
  00077	0f be c0	 movsx	 eax, al
  0007a	85 c0		 test	 eax, eax
  0007c	75 1c		 jne	 SHORT $LN8@PyHeapOver
  0007e	41 b8 1e 08 00
	00		 mov	 r8d, 2078		; 0000081eH
  00084	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0008b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EG@PJJDKMK@?$AA_?$AAP?$AAy?$AAP?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA_?$AAI?$AAs?$AAH?$AAe?$AAa?$AAp?$AAO?$AAv?$AAe?$AAr?$AAr?$AAi?$AAd?$AAe?$AAA?$AAc?$AAt?$AAi?$AAv?$AAe@
  00092	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00098	33 c0		 xor	 eax, eax
$LN8@PyHeapOver:

; 2079 : 
; 2080 :     h = _PyParallel_GetHeapOverride();

  0009a	e8 00 00 00 00	 call	 _PyParallel_GetHeapOverride
  0009f	48 89 44 24 28	 mov	 QWORD PTR h$[rsp], rax

; 2081 : 
; 2082 :     p = HeapAlloc(h, HEAP_ZERO_MEMORY, aligned_size);

  000a4	4c 8b 44 24 38	 mov	 r8, QWORD PTR aligned_size$[rsp]
  000a9	ba 08 00 00 00	 mov	 edx, 8
  000ae	48 8b 4c 24 28	 mov	 rcx, QWORD PTR h$[rsp]
  000b3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_HeapAlloc
  000b9	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax

; 2083 :     if (!p)

  000be	48 83 7c 24 20
	00		 cmp	 QWORD PTR p$[rsp], 0
  000c4	75 07		 jne	 SHORT $LN1@PyHeapOver

; 2084 :         PyErr_SetFromWindowsErr(0);

  000c6	33 c9		 xor	 ecx, ecx
  000c8	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
$LN1@PyHeapOver:

; 2085 : 
; 2086 :     last_heap_override_malloc_addr = p;

  000cd	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:last_heap_override_malloc_addr
  000d2	8b c0		 mov	 eax, eax
  000d4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  000da	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  000e3	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  000e7	48 8b 54 24 20	 mov	 rdx, QWORD PTR p$[rsp]
  000ec	48 89 14 08	 mov	 QWORD PTR [rax+rcx], rdx

; 2087 : 
; 2088 :     return p;

  000f0	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]

; 2089 : }

  000f5	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000f9	c3		 ret	 0
_PyHeapOverride_Malloc ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _PyParallel_GetHeapOverride
_TEXT	SEGMENT
_PyParallel_GetHeapOverride PROC			; COMDAT

; 95   :     return heap_override;

  00000	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:heap_override
  00005	8b c0		 mov	 eax, eax
  00007	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0000d	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00016	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  0001a	48 8b 04 08	 mov	 rax, QWORD PTR [rax+rcx]

; 96   : }

  0001e	c3		 ret	 0
_PyParallel_GetHeapOverride ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyHeap_Malloc DD imagerel $LN18
	DD	imagerel $LN18+1200
	DD	imagerel $unwind$_PyHeap_Malloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyHeap_Malloc DD 011801H
	DD	0c218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _PyHeap_Malloc
_TEXT	SEGMENT
h$ = 32
s$ = 40
aligned_size$ = 48
requested_size$ = 56
next$ = 64
alignment$ = 72
alignment_diff$ = 80
tv238 = 88
c$ = 112
n$ = 120
align$ = 128
no_realloc$ = 136
_PyHeap_Malloc PROC					; COMDAT

; 2093 : {

$LN18:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 2094 :     void  *next;
; 2095 :     Heap  *h;
; 2096 :     Stats *s;
; 2097 :     size_t alignment_diff;
; 2098 :     size_t alignment = align;

  00018	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR align$[rsp]
  00020	48 89 44 24 48	 mov	 QWORD PTR alignment$[rsp], rax

; 2099 :     size_t requested_size = n;

  00025	48 8b 44 24 78	 mov	 rax, QWORD PTR n$[rsp]
  0002a	48 89 44 24 38	 mov	 QWORD PTR requested_size$[rsp], rax

; 2100 :     size_t aligned_size;
; 2101 : 
; 2102 :     if (Px_TLS_HEAP_ACTIVE)

  0002f	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:tls
  00034	8b c0		 mov	 eax, eax
  00036	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0003c	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00045	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  00049	83 bc 01 d0 00
	00 00 00	 cmp	 DWORD PTR [rcx+rax+208], 0
  00051	7e 17		 jle	 SHORT $LN9@PyHeap_Mal

; 2103 :         return _PyTLSHeap_Malloc(n, align);

  00053	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR align$[rsp]
  0005b	48 8b 4c 24 78	 mov	 rcx, QWORD PTR n$[rsp]
  00060	e8 00 00 00 00	 call	 _PyTLSHeap_Malloc
  00065	e9 41 04 00 00	 jmp	 $LN10@PyHeap_Mal
$LN9@PyHeap_Mal:

; 2104 : 
; 2105 :     if (_PyParallel_IsHeapOverrideActive())

  0006a	e8 00 00 00 00	 call	 _PyParallel_IsHeapOverrideActive
  0006f	0f be c0	 movsx	 eax, al
  00072	85 c0		 test	 eax, eax
  00074	74 17		 je	 SHORT $LN8@PyHeap_Mal

; 2106 :         return _PyHeapOverride_Malloc(n, align);

  00076	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR align$[rsp]
  0007e	48 8b 4c 24 78	 mov	 rcx, QWORD PTR n$[rsp]
  00083	e8 00 00 00 00	 call	 _PyHeapOverride_Malloc
  00088	e9 1e 04 00 00	 jmp	 $LN10@PyHeap_Mal
$LN8@PyHeap_Mal:

; 2107 : 
; 2108 :     s = &c->stats;

  0008d	48 8b 44 24 70	 mov	 rax, QWORD PTR c$[rsp]
  00092	48 05 00 01 00
	00		 add	 rax, 256		; 00000100H
  00098	48 89 44 24 28	 mov	 QWORD PTR s$[rsp], rax

; 2109 :     if (!alignment)

  0009d	48 83 7c 24 48
	00		 cmp	 QWORD PTR alignment$[rsp], 0
  000a3	75 09		 jne	 SHORT $LN7@PyHeap_Mal

; 2110 :         alignment = Px_PTR_ALIGN_SIZE;

  000a5	48 c7 44 24 48
	08 00 00 00	 mov	 QWORD PTR alignment$[rsp], 8
$LN7@PyHeap_Mal:
$begin$127770:

; 2111 : 
; 2112 : begin:
; 2113 :     h = c->h;

  000ae	48 8b 44 24 70	 mov	 rax, QWORD PTR c$[rsp]
  000b3	48 8b 80 d0 00
	00 00		 mov	 rax, QWORD PTR [rax+208]
  000ba	48 89 44 24 20	 mov	 QWORD PTR h$[rsp], rax

; 2114 : 
; 2115 :     if (alignment > h->next_alignment)

  000bf	48 8b 44 24 20	 mov	 rax, QWORD PTR h$[rsp]
  000c4	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  000c8	48 39 44 24 48	 cmp	 QWORD PTR alignment$[rsp], rax
  000cd	76 23		 jbe	 SHORT $LN6@PyHeap_Mal

; 2116 :         alignment_diff = Px_PTR_ALIGN(alignment - h->next_alignment);

  000cf	48 8b 44 24 20	 mov	 rax, QWORD PTR h$[rsp]
  000d4	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  000d8	48 8b 4c 24 48	 mov	 rcx, QWORD PTR alignment$[rsp]
  000dd	48 2b c8	 sub	 rcx, rax
  000e0	48 8b c1	 mov	 rax, rcx
  000e3	48 83 c0 07	 add	 rax, 7
  000e7	48 83 e0 f8	 and	 rax, -8
  000eb	48 89 44 24 50	 mov	 QWORD PTR alignment_diff$[rsp], rax

; 2117 :     else

  000f0	eb 09		 jmp	 SHORT $LN5@PyHeap_Mal
$LN6@PyHeap_Mal:

; 2118 :         alignment_diff = 0;

  000f2	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR alignment_diff$[rsp], 0
$LN5@PyHeap_Mal:

; 2119 : 
; 2120 :     aligned_size = Px_ALIGN(n, alignment);

  000fb	48 8b 44 24 78	 mov	 rax, QWORD PTR n$[rsp]
  00100	48 8b 4c 24 48	 mov	 rcx, QWORD PTR alignment$[rsp]
  00105	48 8d 44 08 ff	 lea	 rax, QWORD PTR [rax+rcx-1]
  0010a	48 8b 4c 24 48	 mov	 rcx, QWORD PTR alignment$[rsp]
  0010f	48 ff c9	 dec	 rcx
  00112	48 f7 d1	 not	 rcx
  00115	48 23 c1	 and	 rax, rcx
  00118	48 89 44 24 30	 mov	 QWORD PTR aligned_size$[rsp], rax

; 2121 : 
; 2122 :     if (aligned_size < (h->remaining-alignment_diff)) {

  0011d	48 8b 44 24 20	 mov	 rax, QWORD PTR h$[rsp]
  00122	48 8b 4c 24 50	 mov	 rcx, QWORD PTR alignment_diff$[rsp]
  00127	48 8b 40 48	 mov	 rax, QWORD PTR [rax+72]
  0012b	48 2b c1	 sub	 rax, rcx
  0012e	48 39 44 24 30	 cmp	 QWORD PTR aligned_size$[rsp], rax
  00133	0f 83 14 03 00
	00		 jae	 $LN4@PyHeap_Mal

; 2123 :         if (alignment_diff) {

  00139	48 83 7c 24 50
	00		 cmp	 QWORD PTR alignment_diff$[rsp], 0
  0013f	0f 84 22 01 00
	00		 je	 $LN3@PyHeap_Mal

; 2124 :             h->remaining -= alignment_diff;

  00145	48 8b 44 24 20	 mov	 rax, QWORD PTR h$[rsp]
  0014a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR alignment_diff$[rsp]
  0014f	48 8b 40 48	 mov	 rax, QWORD PTR [rax+72]
  00153	48 2b c1	 sub	 rax, rcx
  00156	48 8b 4c 24 20	 mov	 rcx, QWORD PTR h$[rsp]
  0015b	48 89 41 48	 mov	 QWORD PTR [rcx+72], rax

; 2125 :             s->remaining -= alignment_diff;

  0015f	48 8b 44 24 28	 mov	 rax, QWORD PTR s$[rsp]
  00164	48 8b 4c 24 50	 mov	 rcx, QWORD PTR alignment_diff$[rsp]
  00169	48 8b 80 a8 00
	00 00		 mov	 rax, QWORD PTR [rax+168]
  00170	48 2b c1	 sub	 rax, rcx
  00173	48 8b 4c 24 28	 mov	 rcx, QWORD PTR s$[rsp]
  00178	48 89 81 a8 00
	00 00		 mov	 QWORD PTR [rcx+168], rax

; 2126 :             h->allocated += alignment_diff;

  0017f	48 8b 44 24 20	 mov	 rax, QWORD PTR h$[rsp]
  00184	48 8b 40 40	 mov	 rax, QWORD PTR [rax+64]
  00188	48 03 44 24 50	 add	 rax, QWORD PTR alignment_diff$[rsp]
  0018d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR h$[rsp]
  00192	48 89 41 40	 mov	 QWORD PTR [rcx+64], rax

; 2127 :             s->allocated += alignment_diff;

  00196	48 8b 44 24 28	 mov	 rax, QWORD PTR s$[rsp]
  0019b	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  001a2	48 03 44 24 50	 add	 rax, QWORD PTR alignment_diff$[rsp]
  001a7	48 8b 4c 24 28	 mov	 rcx, QWORD PTR s$[rsp]
  001ac	48 89 81 a0 00
	00 00		 mov	 QWORD PTR [rcx+160], rax

; 2128 :             h->alignment_mismatches++;

  001b3	48 8b 44 24 20	 mov	 rax, QWORD PTR h$[rsp]
  001b8	48 8b 80 98 00
	00 00		 mov	 rax, QWORD PTR [rax+152]
  001bf	48 ff c0	 inc	 rax
  001c2	48 8b 4c 24 20	 mov	 rcx, QWORD PTR h$[rsp]
  001c7	48 89 81 98 00
	00 00		 mov	 QWORD PTR [rcx+152], rax

; 2129 :             s->alignment_mismatches++;

  001ce	48 8b 44 24 28	 mov	 rax, QWORD PTR s$[rsp]
  001d3	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  001d7	48 ff c0	 inc	 rax
  001da	48 8b 4c 24 28	 mov	 rcx, QWORD PTR s$[rsp]
  001df	48 89 41 70	 mov	 QWORD PTR [rcx+112], rax

; 2130 :             h->bytes_wasted += alignment_diff;

  001e3	48 8b 44 24 20	 mov	 rax, QWORD PTR h$[rsp]
  001e8	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  001ef	48 03 44 24 50	 add	 rax, QWORD PTR alignment_diff$[rsp]
  001f4	48 8b 4c 24 20	 mov	 rcx, QWORD PTR h$[rsp]
  001f9	48 89 81 a0 00
	00 00		 mov	 QWORD PTR [rcx+160], rax

; 2131 :             s->bytes_wasted += alignment_diff;

  00200	48 8b 44 24 28	 mov	 rax, QWORD PTR s$[rsp]
  00205	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  00209	48 03 44 24 50	 add	 rax, QWORD PTR alignment_diff$[rsp]
  0020e	48 8b 4c 24 28	 mov	 rcx, QWORD PTR s$[rsp]
  00213	48 89 41 78	 mov	 QWORD PTR [rcx+120], rax

; 2132 :             h->next = Px_PTR_ADD(h->next, alignment_diff);

  00217	48 8b 44 24 20	 mov	 rax, QWORD PTR h$[rsp]
  0021c	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  00220	48 03 44 24 50	 add	 rax, QWORD PTR alignment_diff$[rsp]
  00225	48 8b 4c 24 20	 mov	 rcx, QWORD PTR h$[rsp]
  0022a	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax

; 2133 :             assert(Px_PTR_ADD(h->base, h->allocated) == h->next);

  0022e	48 8b 44 24 20	 mov	 rax, QWORD PTR h$[rsp]
  00233	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00237	48 8b 4c 24 20	 mov	 rcx, QWORD PTR h$[rsp]
  0023c	48 03 41 40	 add	 rax, QWORD PTR [rcx+64]
  00240	48 8b 4c 24 20	 mov	 rcx, QWORD PTR h$[rsp]
  00245	48 3b 41 18	 cmp	 rax, QWORD PTR [rcx+24]
  00249	74 1c		 je	 SHORT $LN12@PyHeap_Mal
  0024b	41 b8 55 08 00
	00		 mov	 r8d, 2133		; 00000855H
  00251	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00258	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FK@IKGKJGMB@?$AAP?$AAx?$AA_?$AAP?$AAT?$AAR?$AA_?$AAA?$AAD?$AAD?$AA?$CI?$AAh?$AA?9?$AA?$DO?$AAb?$AAa?$AAs?$AAe?$AA?0?$AA?5?$AAh?$AA?9?$AA?$DO?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAd@
  0025f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00265	33 c0		 xor	 eax, eax
$LN12@PyHeap_Mal:
$LN3@PyHeap_Mal:

; 2134 :         }
; 2135 : 
; 2136 :         h->allocated += aligned_size;

  00267	48 8b 44 24 20	 mov	 rax, QWORD PTR h$[rsp]
  0026c	48 8b 40 40	 mov	 rax, QWORD PTR [rax+64]
  00270	48 03 44 24 30	 add	 rax, QWORD PTR aligned_size$[rsp]
  00275	48 8b 4c 24 20	 mov	 rcx, QWORD PTR h$[rsp]
  0027a	48 89 41 40	 mov	 QWORD PTR [rcx+64], rax

; 2137 :         s->allocated += aligned_size;

  0027e	48 8b 44 24 28	 mov	 rax, QWORD PTR s$[rsp]
  00283	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  0028a	48 03 44 24 30	 add	 rax, QWORD PTR aligned_size$[rsp]
  0028f	48 8b 4c 24 28	 mov	 rcx, QWORD PTR s$[rsp]
  00294	48 89 81 a0 00
	00 00		 mov	 QWORD PTR [rcx+160], rax

; 2138 : 
; 2139 :         h->remaining -= aligned_size;

  0029b	48 8b 44 24 20	 mov	 rax, QWORD PTR h$[rsp]
  002a0	48 8b 4c 24 30	 mov	 rcx, QWORD PTR aligned_size$[rsp]
  002a5	48 8b 40 48	 mov	 rax, QWORD PTR [rax+72]
  002a9	48 2b c1	 sub	 rax, rcx
  002ac	48 8b 4c 24 20	 mov	 rcx, QWORD PTR h$[rsp]
  002b1	48 89 41 48	 mov	 QWORD PTR [rcx+72], rax

; 2140 :         s->remaining -= aligned_size;

  002b5	48 8b 44 24 28	 mov	 rax, QWORD PTR s$[rsp]
  002ba	48 8b 4c 24 30	 mov	 rcx, QWORD PTR aligned_size$[rsp]
  002bf	48 8b 80 a8 00
	00 00		 mov	 rax, QWORD PTR [rax+168]
  002c6	48 2b c1	 sub	 rax, rcx
  002c9	48 8b 4c 24 28	 mov	 rcx, QWORD PTR s$[rsp]
  002ce	48 89 81 a8 00
	00 00		 mov	 QWORD PTR [rcx+168], rax

; 2141 : 
; 2142 :         h->mallocs++;

  002d5	48 8b 44 24 20	 mov	 rax, QWORD PTR h$[rsp]
  002da	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  002de	48 ff c0	 inc	 rax
  002e1	48 8b 4c 24 20	 mov	 rcx, QWORD PTR h$[rsp]
  002e6	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax

; 2143 :         s->mallocs++;

  002ea	48 8b 44 24 28	 mov	 rax, QWORD PTR s$[rsp]
  002ef	48 8b 40 40	 mov	 rax, QWORD PTR [rax+64]
  002f3	48 ff c0	 inc	 rax
  002f6	48 8b 4c 24 28	 mov	 rcx, QWORD PTR s$[rsp]
  002fb	48 89 41 40	 mov	 QWORD PTR [rcx+64], rax

; 2144 : 
; 2145 :         h->bytes_wasted += (aligned_size - requested_size);

  002ff	48 8b 44 24 38	 mov	 rax, QWORD PTR requested_size$[rsp]
  00304	48 8b 4c 24 30	 mov	 rcx, QWORD PTR aligned_size$[rsp]
  00309	48 2b c8	 sub	 rcx, rax
  0030c	48 8b c1	 mov	 rax, rcx
  0030f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR h$[rsp]
  00314	48 03 81 a0 00
	00 00		 add	 rax, QWORD PTR [rcx+160]
  0031b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR h$[rsp]
  00320	48 89 81 a0 00
	00 00		 mov	 QWORD PTR [rcx+160], rax

; 2146 :         s->bytes_wasted += (aligned_size - requested_size);

  00327	48 8b 44 24 38	 mov	 rax, QWORD PTR requested_size$[rsp]
  0032c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR aligned_size$[rsp]
  00331	48 2b c8	 sub	 rcx, rax
  00334	48 8b c1	 mov	 rax, rcx
  00337	48 8b 4c 24 28	 mov	 rcx, QWORD PTR s$[rsp]
  0033c	48 03 41 78	 add	 rax, QWORD PTR [rcx+120]
  00340	48 8b 4c 24 28	 mov	 rcx, QWORD PTR s$[rsp]
  00345	48 89 41 78	 mov	 QWORD PTR [rcx+120], rax

; 2147 : 
; 2148 :         next = h->next;

  00349	48 8b 44 24 20	 mov	 rax, QWORD PTR h$[rsp]
  0034e	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  00352	48 89 44 24 40	 mov	 QWORD PTR next$[rsp], rax

; 2149 :         h->next = Px_PTR_ADD(h->next, aligned_size);

  00357	48 8b 44 24 20	 mov	 rax, QWORD PTR h$[rsp]
  0035c	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  00360	48 03 44 24 30	 add	 rax, QWORD PTR aligned_size$[rsp]
  00365	48 8b 4c 24 20	 mov	 rcx, QWORD PTR h$[rsp]
  0036a	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax

; 2150 :         h->next_alignment = Px_GET_ALIGNMENT(h->next);

  0036e	48 8b 44 24 20	 mov	 rax, QWORD PTR h$[rsp]
  00373	48 8b 48 18	 mov	 rcx, QWORD PTR [rax+24]
  00377	e8 00 00 00 00	 call	 Px_GET_ALIGNMENT
  0037c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR h$[rsp]
  00381	48 89 41 30	 mov	 QWORD PTR [rcx+48], rax

; 2151 : 
; 2152 :         assert(Px_PTR_ADD(h->base, h->allocated) == h->next);

  00385	48 8b 44 24 20	 mov	 rax, QWORD PTR h$[rsp]
  0038a	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0038e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR h$[rsp]
  00393	48 03 41 40	 add	 rax, QWORD PTR [rcx+64]
  00397	48 8b 4c 24 20	 mov	 rcx, QWORD PTR h$[rsp]
  0039c	48 3b 41 18	 cmp	 rax, QWORD PTR [rcx+24]
  003a0	74 1c		 je	 SHORT $LN13@PyHeap_Mal
  003a2	41 b8 68 08 00
	00		 mov	 r8d, 2152		; 00000868H
  003a8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  003af	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FK@IKGKJGMB@?$AAP?$AAx?$AA_?$AAP?$AAT?$AAR?$AA_?$AAA?$AAD?$AAD?$AA?$CI?$AAh?$AA?9?$AA?$DO?$AAb?$AAa?$AAs?$AAe?$AA?0?$AA?5?$AAh?$AA?9?$AA?$DO?$AAa?$AAl?$AAl?$AAo?$AAc?$AAa?$AAt?$AAe?$AAd@
  003b6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  003bc	33 c0		 xor	 eax, eax
$LN13@PyHeap_Mal:

; 2153 :         assert(_Py_IS_ALIGNED(h->base, alignment));

  003be	48 8b 44 24 48	 mov	 rax, QWORD PTR alignment$[rsp]
  003c3	48 ff c8	 dec	 rax
  003c6	48 8b 4c 24 20	 mov	 rcx, QWORD PTR h$[rsp]
  003cb	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  003cf	48 23 c8	 and	 rcx, rax
  003d2	48 8b c1	 mov	 rax, rcx
  003d5	48 85 c0	 test	 rax, rax
  003d8	74 1c		 je	 SHORT $LN14@PyHeap_Mal
  003da	41 b8 69 08 00
	00		 mov	 r8d, 2153		; 00000869H
  003e0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  003e7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EG@JGCNDNBG@?$AA_?$AAP?$AAy?$AA_?$AAI?$AAS?$AA_?$AAA?$AAL?$AAI?$AAG?$AAN?$AAE?$AAD?$AA?$CI?$AAh?$AA?9?$AA?$DO?$AAb?$AAa?$AAs?$AAe?$AA?0?$AA?5?$AAa?$AAl?$AAi?$AAg?$AAn?$AAm?$AAe?$AAn@
  003ee	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  003f4	33 c0		 xor	 eax, eax
$LN14@PyHeap_Mal:

; 2154 :         assert(Px_GET_ALIGNMENT(next) >= alignment);

  003f6	48 8b 4c 24 40	 mov	 rcx, QWORD PTR next$[rsp]
  003fb	e8 00 00 00 00	 call	 Px_GET_ALIGNMENT
  00400	48 3b 44 24 48	 cmp	 rax, QWORD PTR alignment$[rsp]
  00405	73 1c		 jae	 SHORT $LN15@PyHeap_Mal
  00407	41 b8 6a 08 00
	00		 mov	 r8d, 2154		; 0000086aH
  0040d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00414	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EI@KNJLBONP@?$AAP?$AAx?$AA_?$AAG?$AAE?$AAT?$AA_?$AAA?$AAL?$AAI?$AAG?$AAN?$AAM?$AAE?$AAN?$AAT?$AA?$CI?$AAn?$AAe?$AAx?$AAt?$AA?$CJ?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAa?$AAl?$AAi?$AAg?$AAn?$AAm@
  0041b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00421	33 c0		 xor	 eax, eax
$LN15@PyHeap_Mal:

; 2155 :         last_context_heap_malloc_addr = next;

  00423	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:last_context_heap_malloc_addr
  00428	8b c0		 mov	 eax, eax
  0042a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00430	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00439	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  0043d	48 8b 54 24 40	 mov	 rdx, QWORD PTR next$[rsp]
  00442	48 89 14 08	 mov	 QWORD PTR [rax+rcx], rdx

; 2156 :         return next;

  00446	48 8b 44 24 40	 mov	 rax, QWORD PTR next$[rsp]
  0044b	eb 5e		 jmp	 SHORT $LN10@PyHeap_Mal
$LN4@PyHeap_Mal:

; 2157 :     }
; 2158 : 
; 2159 :     if (no_realloc)
; 2160 :         NULL;
; 2161 : 
; 2162 :     /* Force a resize. */
; 2163 :     if (!_PyHeap_Init(c, Px_NEW_HEAP_SIZE(aligned_size)))

  0044d	48 81 7c 24 30
	40 0f 00 00	 cmp	 QWORD PTR aligned_size$[rsp], 3904 ; 00000f40H
  00456	76 0c		 jbe	 SHORT $LN16@PyHeap_Mal
  00458	48 8b 44 24 30	 mov	 rax, QWORD PTR aligned_size$[rsp]
  0045d	48 89 44 24 58	 mov	 QWORD PTR tv238[rsp], rax
  00462	eb 09		 jmp	 SHORT $LN17@PyHeap_Mal
$LN16@PyHeap_Mal:
  00464	48 c7 44 24 58
	40 0f 00 00	 mov	 QWORD PTR tv238[rsp], 3904 ; 00000f40H
$LN17@PyHeap_Mal:
  0046d	48 8b 44 24 58	 mov	 rax, QWORD PTR tv238[rsp]
  00472	48 05 ff 0f 00
	00		 add	 rax, 4095		; 00000fffH
  00478	48 25 00 f0 ff
	ff		 and	 rax, -4096		; fffffffffffff000H
  0047e	48 8b d0	 mov	 rdx, rax
  00481	48 8b 4c 24 70	 mov	 rcx, QWORD PTR c$[rsp]
  00486	e8 00 00 00 00	 call	 _PyHeap_Init
  0048b	48 85 c0	 test	 rax, rax
  0048e	75 16		 jne	 SHORT $LN1@PyHeap_Mal

; 2164 :         return Heap_LocalMalloc(c, aligned_size, alignment);

  00490	4c 8b 44 24 48	 mov	 r8, QWORD PTR alignment$[rsp]
  00495	48 8b 54 24 30	 mov	 rdx, QWORD PTR aligned_size$[rsp]
  0049a	48 8b 4c 24 70	 mov	 rcx, QWORD PTR c$[rsp]
  0049f	e8 00 00 00 00	 call	 Heap_LocalMalloc
  004a4	eb 05		 jmp	 SHORT $LN10@PyHeap_Mal
$LN1@PyHeap_Mal:

; 2165 : 
; 2166 :     goto begin;

  004a6	e9 03 fc ff ff	 jmp	 $begin$127770
$LN10@PyHeap_Mal:

; 2167 : }

  004ab	48 83 c4 68	 add	 rsp, 104		; 00000068H
  004af	c3		 ret	 0
_PyHeap_Malloc ENDP
_TEXT	ENDS
PUBLIC	_PyHeap_FastFree
; Function compile flags: /Odtp
;	COMDAT _PyHeap_FastFree
_TEXT	SEGMENT
h$ = 8
s$ = 16
p$ = 24
_PyHeap_FastFree PROC					; COMDAT

; 2172 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 2173 :     h->frees++;

  0000f	48 8b 44 24 08	 mov	 rax, QWORD PTR h$[rsp]
  00014	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  0001b	48 ff c0	 inc	 rax
  0001e	48 8b 4c 24 08	 mov	 rcx, QWORD PTR h$[rsp]
  00023	48 89 81 90 00
	00 00		 mov	 QWORD PTR [rcx+144], rax

; 2174 :     s->frees++;

  0002a	48 8b 44 24 10	 mov	 rax, QWORD PTR s$[rsp]
  0002f	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00033	48 ff c0	 inc	 rax
  00036	48 8b 4c 24 10	 mov	 rcx, QWORD PTR s$[rsp]
  0003b	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax

; 2175 : }

  0003f	c3		 ret	 0
_PyHeap_FastFree ENDP
_TEXT	ENDS
PUBLIC	_PyTLSHeap_Realloc
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyTLSHeap_Realloc DD imagerel $LN5
	DD	imagerel $LN5+81
	DD	imagerel $unwind$_PyTLSHeap_Realloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyTLSHeap_Realloc DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _PyTLSHeap_Realloc
_TEXT	SEGMENT
r$ = 32
p$ = 64
n$ = 72
_PyTLSHeap_Realloc PROC					; COMDAT

; 2179 : {

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2180 :     void *r = _PyTLSHeap_Malloc(n, 0);

  0000e	33 d2		 xor	 edx, edx
  00010	48 8b 4c 24 48	 mov	 rcx, QWORD PTR n$[rsp]
  00015	e8 00 00 00 00	 call	 _PyTLSHeap_Malloc
  0001a	48 89 44 24 20	 mov	 QWORD PTR r$[rsp], rax

; 2181 :     if (!r)

  0001f	48 83 7c 24 20
	00		 cmp	 QWORD PTR r$[rsp], 0
  00025	75 04		 jne	 SHORT $LN2@PyTLSHeap_@3

; 2182 :         return NULL;

  00027	33 c0		 xor	 eax, eax
  00029	eb 21		 jmp	 SHORT $LN3@PyTLSHeap_@3
$LN2@PyTLSHeap_@3:

; 2183 : 
; 2184 :     if (p)

  0002b	48 83 7c 24 40
	00		 cmp	 QWORD PTR p$[rsp], 0
  00031	74 14		 je	 SHORT $LN1@PyTLSHeap_@3

; 2185 :         memcpy(r, p, n);

  00033	4c 8b 44 24 48	 mov	 r8, QWORD PTR n$[rsp]
  00038	48 8b 54 24 40	 mov	 rdx, QWORD PTR p$[rsp]
  0003d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR r$[rsp]
  00042	e8 00 00 00 00	 call	 memcpy
$LN1@PyTLSHeap_@3:

; 2186 : 
; 2187 :     return r;

  00047	48 8b 44 24 20	 mov	 rax, QWORD PTR r$[rsp]
$LN3@PyTLSHeap_@3:

; 2188 : }

  0004c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00050	c3		 ret	 0
_PyTLSHeap_Realloc ENDP
_TEXT	ENDS
PUBLIC	_PyHeap_Realloc
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyHeap_Realloc DD imagerel $LN6
	DD	imagerel $LN6+233
	DD	imagerel $unwind$_PyHeap_Realloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyHeap_Realloc DD 011301H
	DD	08213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _PyHeap_Realloc
_TEXT	SEGMENT
h$ = 32
s$ = 40
r$ = 48
c$ = 80
p$ = 88
n$ = 96
_PyHeap_Realloc PROC					; COMDAT

; 2192 : {

$LN6:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 2193 :     void  *r;
; 2194 :     Heap  *h;
; 2195 :     Stats *s;
; 2196 : 
; 2197 :     if (Px_TLS_HEAP_ACTIVE)

  00013	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:tls
  00018	8b c0		 mov	 eax, eax
  0001a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00020	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00029	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  0002d	83 bc 01 d0 00
	00 00 00	 cmp	 DWORD PTR [rcx+rax+208], 0
  00035	7e 14		 jle	 SHORT $LN3@PyHeap_Rea

; 2198 :         return _PyTLSHeap_Realloc(p, n);

  00037	48 8b 54 24 60	 mov	 rdx, QWORD PTR n$[rsp]
  0003c	48 8b 4c 24 58	 mov	 rcx, QWORD PTR p$[rsp]
  00041	e8 00 00 00 00	 call	 _PyTLSHeap_Realloc
  00046	e9 99 00 00 00	 jmp	 $LN4@PyHeap_Rea
$LN3@PyHeap_Rea:

; 2199 : 
; 2200 :     h = c->h;

  0004b	48 8b 44 24 50	 mov	 rax, QWORD PTR c$[rsp]
  00050	48 8b 80 d0 00
	00 00		 mov	 rax, QWORD PTR [rax+208]
  00057	48 89 44 24 20	 mov	 QWORD PTR h$[rsp], rax

; 2201 :     s = &c->stats;

  0005c	48 8b 44 24 50	 mov	 rax, QWORD PTR c$[rsp]
  00061	48 05 00 01 00
	00		 add	 rax, 256		; 00000100H
  00067	48 89 44 24 28	 mov	 QWORD PTR s$[rsp], rax

; 2202 :     r = _PyHeap_Malloc(c, n, 0, 0);

  0006c	45 33 c9	 xor	 r9d, r9d
  0006f	45 33 c0	 xor	 r8d, r8d
  00072	48 8b 54 24 60	 mov	 rdx, QWORD PTR n$[rsp]
  00077	48 8b 4c 24 50	 mov	 rcx, QWORD PTR c$[rsp]
  0007c	e8 00 00 00 00	 call	 _PyHeap_Malloc
  00081	48 89 44 24 30	 mov	 QWORD PTR r$[rsp], rax

; 2203 :     if (!r)

  00086	48 83 7c 24 30
	00		 cmp	 QWORD PTR r$[rsp], 0
  0008c	75 04		 jne	 SHORT $LN2@PyHeap_Rea

; 2204 :         return NULL;

  0008e	33 c0		 xor	 eax, eax
  00090	eb 52		 jmp	 SHORT $LN4@PyHeap_Rea
$LN2@PyHeap_Rea:

; 2205 :     if (!p)

  00092	48 83 7c 24 58
	00		 cmp	 QWORD PTR p$[rsp], 0
  00098	75 07		 jne	 SHORT $LN1@PyHeap_Rea

; 2206 :         return r;

  0009a	48 8b 44 24 30	 mov	 rax, QWORD PTR r$[rsp]
  0009f	eb 43		 jmp	 SHORT $LN4@PyHeap_Rea
$LN1@PyHeap_Rea:

; 2207 :     h->mem_reallocs++;

  000a1	48 8b 44 24 20	 mov	 rax, QWORD PTR h$[rsp]
  000a6	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  000aa	48 ff c0	 inc	 rax
  000ad	48 8b 4c 24 20	 mov	 rcx, QWORD PTR h$[rsp]
  000b2	48 89 41 78	 mov	 QWORD PTR [rcx+120], rax

; 2208 :     s->mem_reallocs++;

  000b6	48 8b 44 24 28	 mov	 rax, QWORD PTR s$[rsp]
  000bb	48 8b 40 48	 mov	 rax, QWORD PTR [rax+72]
  000bf	48 ff c0	 inc	 rax
  000c2	48 8b 4c 24 28	 mov	 rcx, QWORD PTR s$[rsp]
  000c7	48 89 41 48	 mov	 QWORD PTR [rcx+72], rax

; 2209 :     memcpy(r, p, n);

  000cb	4c 8b 44 24 60	 mov	 r8, QWORD PTR n$[rsp]
  000d0	48 8b 54 24 58	 mov	 rdx, QWORD PTR p$[rsp]
  000d5	48 8b 4c 24 30	 mov	 rcx, QWORD PTR r$[rsp]
  000da	e8 00 00 00 00	 call	 memcpy

; 2210 :     return r;

  000df	48 8b 44 24 30	 mov	 rax, QWORD PTR r$[rsp]
$LN4@PyHeap_Rea:

; 2211 : }

  000e4	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e8	c3		 ret	 0
_PyHeap_Realloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@LBBOHHAH@_PyHeap_Free?$AA@		; `string'
PUBLIC	_PyHeap_Free
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyHeap_Free DD imagerel $LN4
	DD	imagerel $LN4+176
	DD	imagerel $unwind$_PyHeap_Free
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyHeap_Free DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_0N@LBBOHHAH@_PyHeap_Free?$AA@
CONST	SEGMENT
??_C@_0N@LBBOHHAH@_PyHeap_Free?$AA@ DB '_PyHeap_Free', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PyHeap_Free
_TEXT	SEGMENT
h$ = 48
s$ = 56
c$ = 80
p$ = 88
_PyHeap_Free PROC					; COMDAT

; 2215 : {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 2216 :     Heap  *h;
; 2217 :     Stats *s;
; 2218 : 
; 2219 :     if (Px_TLS_HEAP_ACTIVE)

  0000e	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:tls
  00013	8b c0		 mov	 eax, eax
  00015	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0001b	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00024	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  00028	83 bc 01 d0 00
	00 00 00	 cmp	 DWORD PTR [rcx+rax+208], 0
  00030	7e 02		 jle	 SHORT $LN1@PyHeap_Fre

; 2220 :         return;

  00032	eb 77		 jmp	 SHORT $LN2@PyHeap_Fre
$LN1@PyHeap_Fre:

; 2221 : 
; 2222 :     Px_GUARD_MEM(p);

  00034	c7 44 24 20 00
	04 00 00	 mov	 DWORD PTR [rsp+32], 1024 ; 00000400H
  0003c	4c 8b 4c 24 58	 mov	 r9, QWORD PTR p$[rsp]
  00041	41 b8 ae 08 00
	00		 mov	 r8d, 2222		; 000008aeH
  00047	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@PGHBGAOD@?4?4?2Python?2pyparallel?4c?$AA@
  0004e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@LBBOHHAH@_PyHeap_Free?$AA@
  00055	e8 00 00 00 00	 call	 _PyParallel_Guard

; 2223 : 
; 2224 :     h = c->h;

  0005a	48 8b 44 24 50	 mov	 rax, QWORD PTR c$[rsp]
  0005f	48 8b 80 d0 00
	00 00		 mov	 rax, QWORD PTR [rax+208]
  00066	48 89 44 24 30	 mov	 QWORD PTR h$[rsp], rax

; 2225 :     s = &c->stats;

  0006b	48 8b 44 24 50	 mov	 rax, QWORD PTR c$[rsp]
  00070	48 05 00 01 00
	00		 add	 rax, 256		; 00000100H
  00076	48 89 44 24 38	 mov	 QWORD PTR s$[rsp], rax

; 2226 : 
; 2227 :     h->frees++;

  0007b	48 8b 44 24 30	 mov	 rax, QWORD PTR h$[rsp]
  00080	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  00087	48 ff c0	 inc	 rax
  0008a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR h$[rsp]
  0008f	48 89 81 90 00
	00 00		 mov	 QWORD PTR [rcx+144], rax

; 2228 :     s->frees++;

  00096	48 8b 44 24 38	 mov	 rax, QWORD PTR s$[rsp]
  0009b	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0009f	48 ff c0	 inc	 rax
  000a2	48 8b 4c 24 38	 mov	 rcx, QWORD PTR s$[rsp]
  000a7	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
$LN2@PyHeap_Fre:

; 2229 : }

  000ab	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000af	c3		 ret	 0
_PyHeap_Free ENDP
_TEXT	ENDS
PUBLIC	??_C@_1CM@HCPGJHEI@?$AA?$CB?$AAc?$AA?9?$AA?$DO?$AAo?$AAb?$AA_?$AAl?$AAa?$AAs?$AAt?$AA?9?$AA?$DO?$AA_?$AAo?$AAb?$AA_?$AAn?$AAe?$AAx?$AAt?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CO@IDPPHAMD@?$AA?$CB?$AAc?$AA?9?$AA?$DO?$AAo?$AAb?$AA_?$AAf?$AAi?$AAr?$AAs?$AAt?$AA?9?$AA?$DO?$AA_?$AAo?$AAb?$AA_?$AAp?$AAr?$AAe?$AAv?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CK@LMGKILLE@?$AAP?$AAy?$AA_?$AAS?$AAI?$AAZ?$AAE?$AA?$CI?$AAn?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAn?$AAi?$AAt?$AAe?$AAm?$AAs?$AA?$AA@ ; `string'
PUBLIC	??_C@_1EC@BJNBAJB@?$AAi?$AAs?$AA_?$AAv?$AAa?$AAr?$AAo?$AAb?$AAj?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAi?$AAs?$AA_?$AAv?$AAa?$AAr?$AAo?$AAb?$AAj?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA1@ ; `string'
PUBLIC	??_C@_1CC@LHHCMOJG@?$AAP?$AAy?$AA_?$AAT?$AAY?$AAP?$AAE?$AA?$CI?$AAn?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAt?$AAp?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CI@GHKNKKNJ@?$AAP?$AAy?$AA_?$AAS?$AAI?$AAZ?$AAE?$AA?$CI?$AAp?$AA?$CJ?$AA?5?$AA?$DM?$AA?5?$AAn?$AAi?$AAt?$AAe?$AAm?$AAs?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DI@GBDFJEAO@?$AAb?$AAy?$AAt?$AAe?$AAs?$AA_?$AAt?$AAo?$AA_?$AAc?$AAo?$AAp?$AAy?$AA?5?$AA?$DM?$AA?5?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CG@PEJLAKP@?$AAP?$AAy?$AA_?$AAT?$AAY?$AAP?$AAE?$AA?$CI?$AAp?$AA?$CJ?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ ; `string'
PUBLIC	??_C@_17FEINKNBF@?$AA?$CB?$AAt?$AAp?$AA?$AA@	; `string'
PUBLIC	??_C@_0M@NJLCLNDF@init_object?$AA@		; `string'
PUBLIC	??_C@_15LFLBLBBH@?$AAt?$AAp?$AA?$AA@		; `string'
PUBLIC	init_object
;	COMDAT pdata
pdata	SEGMENT
$pdata$init_object DD imagerel $LN47
	DD	imagerel $LN47+2609
	DD	imagerel $unwind$init_object
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$init_object DD 021b01H
	DD	019011bH
xdata	ENDS
;	COMDAT ??_C@_1CM@HCPGJHEI@?$AA?$CB?$AAc?$AA?9?$AA?$DO?$AAo?$AAb?$AA_?$AAl?$AAa?$AAs?$AAt?$AA?9?$AA?$DO?$AA_?$AAo?$AAb?$AA_?$AAn?$AAe?$AAx?$AAt?$AA?$AA@
CONST	SEGMENT
??_C@_1CM@HCPGJHEI@?$AA?$CB?$AAc?$AA?9?$AA?$DO?$AAo?$AAb?$AA_?$AAl?$AAa?$AAs?$AAt?$AA?9?$AA?$DO?$AA_?$AAo?$AAb?$AA_?$AAn?$AAe?$AAx?$AAt?$AA?$AA@ DB '!'
	DB	00H, 'c', 00H, '-', 00H, '>', 00H, 'o', 00H, 'b', 00H, '_', 00H
	DB	'l', 00H, 'a', 00H, 's', 00H, 't', 00H, '-', 00H, '>', 00H, '_'
	DB	00H, 'o', 00H, 'b', 00H, '_', 00H, 'n', 00H, 'e', 00H, 'x', 00H
	DB	't', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CO@IDPPHAMD@?$AA?$CB?$AAc?$AA?9?$AA?$DO?$AAo?$AAb?$AA_?$AAf?$AAi?$AAr?$AAs?$AAt?$AA?9?$AA?$DO?$AA_?$AAo?$AAb?$AA_?$AAp?$AAr?$AAe?$AAv?$AA?$AA@
CONST	SEGMENT
??_C@_1CO@IDPPHAMD@?$AA?$CB?$AAc?$AA?9?$AA?$DO?$AAo?$AAb?$AA_?$AAf?$AAi?$AAr?$AAs?$AAt?$AA?9?$AA?$DO?$AA_?$AAo?$AAb?$AA_?$AAp?$AAr?$AAe?$AAv?$AA?$AA@ DB '!'
	DB	00H, 'c', 00H, '-', 00H, '>', 00H, 'o', 00H, 'b', 00H, '_', 00H
	DB	'f', 00H, 'i', 00H, 'r', 00H, 's', 00H, 't', 00H, '-', 00H, '>'
	DB	00H, '_', 00H, 'o', 00H, 'b', 00H, '_', 00H, 'p', 00H, 'r', 00H
	DB	'e', 00H, 'v', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@LMGKILLE@?$AAP?$AAy?$AA_?$AAS?$AAI?$AAZ?$AAE?$AA?$CI?$AAn?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAn?$AAi?$AAt?$AAe?$AAm?$AAs?$AA?$AA@
CONST	SEGMENT
??_C@_1CK@LMGKILLE@?$AAP?$AAy?$AA_?$AAS?$AAI?$AAZ?$AAE?$AA?$CI?$AAn?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAn?$AAi?$AAt?$AAe?$AAm?$AAs?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, '_', 00H, 'S', 00H, 'I', 00H, 'Z', 00H, 'E', 00H
	DB	'(', 00H, 'n', 00H, ')', 00H, ' ', 00H, '=', 00H, '=', 00H, ' '
	DB	00H, 'n', 00H, 'i', 00H, 't', 00H, 'e', 00H, 'm', 00H, 's', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1EC@BJNBAJB@?$AAi?$AAs?$AA_?$AAv?$AAa?$AAr?$AAo?$AAb?$AAj?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAi?$AAs?$AA_?$AAv?$AAa?$AAr?$AAo?$AAb?$AAj?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA1@
CONST	SEGMENT
??_C@_1EC@BJNBAJB@?$AAi?$AAs?$AA_?$AAv?$AAa?$AAr?$AAo?$AAb?$AAj?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAi?$AAs?$AA_?$AAv?$AAa?$AAr?$AAo?$AAb?$AAj?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA1@ DB 'i'
	DB	00H, 's', 00H, '_', 00H, 'v', 00H, 'a', 00H, 'r', 00H, 'o', 00H
	DB	'b', 00H, 'j', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '0'
	DB	00H, ' ', 00H, '|', 00H, '|', 00H, ' ', 00H, 'i', 00H, 's', 00H
	DB	'_', 00H, 'v', 00H, 'a', 00H, 'r', 00H, 'o', 00H, 'b', 00H, 'j'
	DB	00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '1', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CC@LHHCMOJG@?$AAP?$AAy?$AA_?$AAT?$AAY?$AAP?$AAE?$AA?$CI?$AAn?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAt?$AAp?$AA?$AA@
CONST	SEGMENT
??_C@_1CC@LHHCMOJG@?$AAP?$AAy?$AA_?$AAT?$AAY?$AAP?$AAE?$AA?$CI?$AAn?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAt?$AAp?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, '_', 00H, 'T', 00H, 'Y', 00H, 'P', 00H, 'E', 00H
	DB	'(', 00H, 'n', 00H, ')', 00H, ' ', 00H, '=', 00H, '=', 00H, ' '
	DB	00H, 't', 00H, 'p', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1CI@GHKNKKNJ@?$AAP?$AAy?$AA_?$AAS?$AAI?$AAZ?$AAE?$AA?$CI?$AAp?$AA?$CJ?$AA?5?$AA?$DM?$AA?5?$AAn?$AAi?$AAt?$AAe?$AAm?$AAs?$AA?$AA@
CONST	SEGMENT
??_C@_1CI@GHKNKKNJ@?$AAP?$AAy?$AA_?$AAS?$AAI?$AAZ?$AAE?$AA?$CI?$AAp?$AA?$CJ?$AA?5?$AA?$DM?$AA?5?$AAn?$AAi?$AAt?$AAe?$AAm?$AAs?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, '_', 00H, 'S', 00H, 'I', 00H, 'Z', 00H, 'E', 00H
	DB	'(', 00H, 'p', 00H, ')', 00H, ' ', 00H, '<', 00H, ' ', 00H, 'n'
	DB	00H, 'i', 00H, 't', 00H, 'e', 00H, 'm', 00H, 's', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DI@GBDFJEAO@?$AAb?$AAy?$AAt?$AAe?$AAs?$AA_?$AAt?$AAo?$AA_?$AAc?$AAo?$AAp?$AAy?$AA?5?$AA?$DM?$AA?5?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1DI@GBDFJEAO@?$AAb?$AAy?$AAt?$AAe?$AAs?$AA_?$AAt?$AAo?$AA_?$AAc?$AAo?$AAp?$AAy?$AA?5?$AA?$DM?$AA?5?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?$AA@ DB 'b'
	DB	00H, 'y', 00H, 't', 00H, 'e', 00H, 's', 00H, '_', 00H, 't', 00H
	DB	'o', 00H, '_', 00H, 'c', 00H, 'o', 00H, 'p', 00H, 'y', 00H, ' '
	DB	00H, '<', 00H, ' ', 00H, 'o', 00H, 'b', 00H, 'j', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, '_', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@PEJLAKP@?$AAP?$AAy?$AA_?$AAT?$AAY?$AAP?$AAE?$AA?$CI?$AAp?$AA?$CJ?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
CONST	SEGMENT
??_C@_1CG@PEJLAKP@?$AAP?$AAy?$AA_?$AAT?$AAY?$AAP?$AAE?$AA?$CI?$AAp?$AA?$CJ?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, '_', 00H, 'T', 00H, 'Y', 00H, 'P', 00H, 'E', 00H
	DB	'(', 00H, 'p', 00H, ')', 00H, ' ', 00H, '!', 00H, '=', 00H, ' '
	DB	00H, 'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_17FEINKNBF@?$AA?$CB?$AAt?$AAp?$AA?$AA@
CONST	SEGMENT
??_C@_17FEINKNBF@?$AA?$CB?$AAt?$AAp?$AA?$AA@ DB '!', 00H, 't', 00H, 'p', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@NJLCLNDF@init_object?$AA@
CONST	SEGMENT
??_C@_0M@NJLCLNDF@init_object?$AA@ DB 'init_object', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_15LFLBLBBH@?$AAt?$AAp?$AA?$AA@
CONST	SEGMENT
??_C@_15LFLBLBBH@?$AAt?$AAp?$AA?$AA@ DB 't', 00H, 'p', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT init_object
_TEXT	SEGMENT
is_heap_override_active$ = 48
x$ = 56
n$ = 64
s$ = 72
init_type$ = 80
bytes_to_copy$ = 88
total_size$ = 96
is_varobj$ = 104
t$ = 112
object_size$ = 120
o$ = 128
last$128123 = 136
tv82 = 144
tv130 = 152
tv170 = 160
tv207 = 164
tv242 = 168
tv376 = 176
c$ = 208
p$ = 216
tp$ = 224
nitems$ = 232
init_object PROC					; COMDAT

; 2254 : {

$LN47:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H

; 2255 :     /* Main use cases:
; 2256 :      *  1.  Redirect from PyObject_NEW/PyObject_NEW_VAR.  p will be NULL.
; 2257 :      *  2.  PyObject_MALLOC/PyObject_INIT combo (PyUnicode* does this).
; 2258 :      *      p will pass Px_GUARD_MEM(p) and everything will be null.  We
; 2259 :      *      need to allocate x & o manually.
; 2260 :      *  3.  Redirect from PyObject_GC_Resize.  p shouldn't be NULL, although
; 2261 :      *      it might not be a PX allocation -- we could be resizing a PY
; 2262 :      *      allocation.  That's fine, as our realloc doesn't actually free
; 2263 :      *      anything, so we're, in effect, just copying the existing object.
; 2264 :      */
; 2265 :     TLS      *t = &tls;

  0001b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:tls
  00020	8b c0		 mov	 eax, eax
  00022	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00028	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00031	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00035	48 89 44 24 70	 mov	 QWORD PTR t$[rsp], rax

; 2266 :     PyObject *n;
; 2267 :     PxObject *x;
; 2268 :     Object   *o;
; 2269 :     Stats    *s;
; 2270 :     size_t    object_size;
; 2271 :     size_t    total_size;
; 2272 :     size_t    bytes_to_copy;
; 2273 :     int       init_type;
; 2274 :     int       is_varobj = -1;

  0003a	c7 44 24 68 ff
	ff ff ff	 mov	 DWORD PTR is_varobj$[rsp], -1

; 2275 :     int       is_heap_override_active = _PyParallel_IsHeapOverrideActive();

  00042	e8 00 00 00 00	 call	 _PyParallel_IsHeapOverrideActive
  00047	0f be c0	 movsx	 eax, al
  0004a	89 44 24 30	 mov	 DWORD PTR is_heap_override_active$[rsp], eax

; 2276 : 
; 2277 : #define _INIT_NEW       1
; 2278 : #define _INIT_INIT      2
; 2279 : #define _INIT_RESIZE    3
; 2280 : 
; 2281 :     s = (Px_TLS_HEAP_ACTIVE ? &t->stats : &c->stats);

  0004e	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:tls
  00053	8b c0		 mov	 eax, eax
  00055	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0005b	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00064	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  00068	83 bc 01 d0 00
	00 00 00	 cmp	 DWORD PTR [rcx+rax+208], 0
  00070	7e 15		 jle	 SHORT $LN23@init_objec
  00072	48 8b 44 24 70	 mov	 rax, QWORD PTR t$[rsp]
  00077	48 05 e0 00 00
	00		 add	 rax, 224		; 000000e0H
  0007d	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv82[rsp], rax
  00085	eb 16		 jmp	 SHORT $LN24@init_objec
$LN23@init_objec:
  00087	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  0008f	48 05 00 01 00
	00		 add	 rax, 256		; 00000100H
  00095	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv82[rsp], rax
$LN24@init_objec:
  0009d	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR tv82[rsp]
  000a5	48 89 44 24 48	 mov	 QWORD PTR s$[rsp], rax

; 2282 : 
; 2283 :     if (!p) {

  000aa	48 83 bc 24 d8
	00 00 00 00	 cmp	 QWORD PTR p$[rsp], 0
  000b3	0f 85 f3 01 00
	00		 jne	 $LN20@init_objec

; 2284 :         /* Case 1: PyObject_NEW/NEW_VAR (via (Object|VarObject)_New). */
; 2285 :         init_type = _INIT_NEW;

  000b9	c7 44 24 50 01
	00 00 00	 mov	 DWORD PTR init_type$[rsp], 1

; 2286 :         assert(tp);

  000c1	48 83 bc 24 e0
	00 00 00 00	 cmp	 QWORD PTR tp$[rsp], 0
  000ca	75 1c		 jne	 SHORT $LN25@init_objec
  000cc	41 b8 ee 08 00
	00		 mov	 r8d, 2286		; 000008eeH
  000d2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  000d9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_15LFLBLBBH@?$AAt?$AAp?$AA?$AA@
  000e0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000e6	33 c0		 xor	 eax, eax
$LN25@init_objec:

; 2287 : 
; 2288 :         object_size = _Px_VSZ(tp, nitems);

  000e8	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR tp$[rsp]
  000f0	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  000f8	75 16		 jne	 SHORT $LN26@init_objec
  000fa	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR tp$[rsp]
  00102	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  00106	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR tv130[rsp], rax
  0010e	eb 38		 jmp	 SHORT $LN27@init_objec
$LN26@init_objec:
  00110	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR tp$[rsp]
  00118	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR nitems$[rsp]
  00120	48 0f af 88 80
	00 00 00	 imul	 rcx, QWORD PTR [rax+128]
  00128	48 8b c1	 mov	 rax, rcx
  0012b	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR tp$[rsp]
  00133	48 8b 49 78	 mov	 rcx, QWORD PTR [rcx+120]
  00137	48 8d 44 01 07	 lea	 rax, QWORD PTR [rcx+rax+7]
  0013c	48 83 e0 f8	 and	 rax, -8
  00140	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR tv130[rsp], rax
$LN27@init_objec:
  00148	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR tv130[rsp]
  00150	48 83 c0 07	 add	 rax, 7
  00154	48 83 e0 f8	 and	 rax, -8
  00158	48 89 44 24 78	 mov	 QWORD PTR object_size$[rsp], rax

; 2289 :         total_size  = _Px_SZ(object_size);

  0015d	48 8b 44 24 78	 mov	 rax, QWORD PTR object_size$[rsp]
  00162	48 83 c0 07	 add	 rax, 7
  00166	48 83 e0 f8	 and	 rax, -8
  0016a	48 83 c0 4f	 add	 rax, 79			; 0000004fH
  0016e	48 83 e0 f8	 and	 rax, -8
  00172	48 89 44 24 60	 mov	 QWORD PTR total_size$[rsp], rax

; 2290 :         n = (PyObject *)_PyHeap_Malloc(c, total_size, 0, 0);

  00177	45 33 c9	 xor	 r9d, r9d
  0017a	45 33 c0	 xor	 r8d, r8d
  0017d	48 8b 54 24 60	 mov	 rdx, QWORD PTR total_size$[rsp]
  00182	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  0018a	e8 00 00 00 00	 call	 _PyHeap_Malloc
  0018f	48 89 44 24 40	 mov	 QWORD PTR n$[rsp], rax

; 2291 :         if (!n)

  00194	48 83 7c 24 40
	00		 cmp	 QWORD PTR n$[rsp], 0
  0019a	75 0a		 jne	 SHORT $LN19@init_objec

; 2292 :             return PyErr_NoMemory();

  0019c	e8 00 00 00 00	 call	 PyErr_NoMemory
  001a1	e9 83 08 00 00	 jmp	 $LN21@init_objec
$LN19@init_objec:

; 2293 :         x = _Px_X_PTR(n, object_size);

  001a6	48 8b 44 24 78	 mov	 rax, QWORD PTR object_size$[rsp]
  001ab	48 83 c0 07	 add	 rax, 7
  001af	48 83 e0 f8	 and	 rax, -8
  001b3	48 83 c0 07	 add	 rax, 7
  001b7	48 83 e0 f8	 and	 rax, -8
  001bb	48 8b 4c 24 40	 mov	 rcx, QWORD PTR n$[rsp]
  001c0	48 8d 44 01 07	 lea	 rax, QWORD PTR [rcx+rax+7]
  001c5	48 83 e0 f8	 and	 rax, -8
  001c9	48 83 c0 07	 add	 rax, 7
  001cd	48 83 e0 f8	 and	 rax, -8
  001d1	48 89 44 24 38	 mov	 QWORD PTR x$[rsp], rax

; 2294 :         o = _Px_O_PTR(n, object_size);

  001d6	48 8b 44 24 78	 mov	 rax, QWORD PTR object_size$[rsp]
  001db	48 83 c0 07	 add	 rax, 7
  001df	48 83 e0 f8	 and	 rax, -8
  001e3	48 83 c0 37	 add	 rax, 55			; 00000037H
  001e7	48 83 e0 f8	 and	 rax, -8
  001eb	48 83 c0 07	 add	 rax, 7
  001ef	48 83 e0 f8	 and	 rax, -8
  001f3	48 8b 4c 24 40	 mov	 rcx, QWORD PTR n$[rsp]
  001f8	48 8d 44 01 07	 lea	 rax, QWORD PTR [rcx+rax+7]
  001fd	48 83 e0 f8	 and	 rax, -8
  00201	48 83 c0 07	 add	 rax, 7
  00205	48 83 e0 f8	 and	 rax, -8
  00209	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR o$[rsp], rax

; 2295 : 
; 2296 :         Py_TYPE(n) = tp;

  00211	48 8b 44 24 40	 mov	 rax, QWORD PTR n$[rsp]
  00216	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR tp$[rsp]
  0021e	48 89 48 58	 mov	 QWORD PTR [rax+88], rcx

; 2297 :         if (is_varobj = (tp->tp_itemsize > 0)) {

  00222	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR tp$[rsp]
  0022a	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  00232	7e 0d		 jle	 SHORT $LN28@init_objec
  00234	c7 84 24 a0 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv170[rsp], 1
  0023f	eb 0b		 jmp	 SHORT $LN29@init_objec
$LN28@init_objec:
  00241	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv170[rsp], 0
$LN29@init_objec:
  0024c	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR tv170[rsp]
  00253	89 44 24 68	 mov	 DWORD PTR is_varobj$[rsp], eax
  00257	83 7c 24 68 00	 cmp	 DWORD PTR is_varobj$[rsp], 0
  0025c	74 2e		 je	 SHORT $LN18@init_objec

; 2298 :             s->varobjs++;

  0025e	48 8b 44 24 48	 mov	 rax, QWORD PTR s$[rsp]
  00263	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  0026a	48 ff c0	 inc	 rax
  0026d	48 8b 4c 24 48	 mov	 rcx, QWORD PTR s$[rsp]
  00272	48 89 81 b8 00
	00 00		 mov	 QWORD PTR [rcx+184], rax

; 2299 :             Py_SIZE(n) = nitems;

  00279	48 8b 44 24 40	 mov	 rax, QWORD PTR n$[rsp]
  0027e	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR nitems$[rsp]
  00286	48 89 48 60	 mov	 QWORD PTR [rax+96], rcx

; 2300 :         } else

  0028a	eb 1b		 jmp	 SHORT $LN17@init_objec
$LN18@init_objec:

; 2301 :             s->objects++;

  0028c	48 8b 44 24 48	 mov	 rax, QWORD PTR s$[rsp]
  00291	48 8b 80 b0 00
	00 00		 mov	 rax, QWORD PTR [rax+176]
  00298	48 ff c0	 inc	 rax
  0029b	48 8b 4c 24 48	 mov	 rcx, QWORD PTR s$[rsp]
  002a0	48 89 81 b0 00
	00 00		 mov	 QWORD PTR [rcx+176], rax
$LN17@init_objec:

; 2302 : 
; 2303 :     } else {

  002a7	e9 61 04 00 00	 jmp	 $LN16@init_objec
$LN20@init_objec:

; 2304 :         if (tp) {

  002ac	48 83 bc 24 e0
	00 00 00 00	 cmp	 QWORD PTR tp$[rsp], 0
  002b5	0f 84 67 01 00
	00		 je	 $LN15@init_objec

; 2305 :             /* Case 2: PyObject_INIT/INIT_VAR called against manually
; 2306 :              * allocated memory (i.e. not allocated via PyObject_NEW). */
; 2307 :             init_type = _INIT_INIT;

  002bb	c7 44 24 50 02
	00 00 00	 mov	 DWORD PTR init_type$[rsp], 2

; 2308 :             assert(tp);

  002c3	48 83 bc 24 e0
	00 00 00 00	 cmp	 QWORD PTR tp$[rsp], 0
  002cc	75 1c		 jne	 SHORT $LN30@init_objec
  002ce	41 b8 04 09 00
	00		 mov	 r8d, 2308		; 00000904H
  002d4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  002db	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_15LFLBLBBH@?$AAt?$AAp?$AA?$AA@
  002e2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  002e8	33 c0		 xor	 eax, eax
$LN30@init_objec:

; 2309 :             Px_GUARD_MEM(p);

  002ea	c7 44 24 20 00
	04 00 00	 mov	 DWORD PTR [rsp+32], 1024 ; 00000400H
  002f2	4c 8b 8c 24 d8
	00 00 00	 mov	 r9, QWORD PTR p$[rsp]
  002fa	41 b8 05 09 00
	00		 mov	 r8d, 2309		; 00000905H
  00300	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@PGHBGAOD@?4?4?2Python?2pyparallel?4c?$AA@
  00307	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@NJLCLNDF@init_object?$AA@
  0030e	e8 00 00 00 00	 call	 _PyParallel_Guard

; 2310 : 
; 2311 :             /* Need to manually allocate x + o storage. */
; 2312 :             x = (PxObject *)_PyHeap_Malloc(c, _Px_SZ(0), 0, 0);

  00313	45 33 c9	 xor	 r9d, r9d
  00316	45 33 c0	 xor	 r8d, r8d
  00319	ba 48 00 00 00	 mov	 edx, 72			; 00000048H
  0031e	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  00326	e8 00 00 00 00	 call	 _PyHeap_Malloc
  0032b	48 89 44 24 38	 mov	 QWORD PTR x$[rsp], rax

; 2313 :             if (!x)

  00330	48 83 7c 24 38
	00		 cmp	 QWORD PTR x$[rsp], 0
  00336	75 0a		 jne	 SHORT $LN14@init_objec

; 2314 :                 return PyErr_NoMemory();

  00338	e8 00 00 00 00	 call	 PyErr_NoMemory
  0033d	e9 e7 06 00 00	 jmp	 $LN21@init_objec
$LN14@init_objec:

; 2315 : 
; 2316 :             o = _Px_O_PTR(x, 0);

  00342	48 8b 44 24 38	 mov	 rax, QWORD PTR x$[rsp]
  00347	48 83 c0 37	 add	 rax, 55			; 00000037H
  0034b	48 83 e0 f8	 and	 rax, -8
  0034f	48 83 c0 07	 add	 rax, 7
  00353	48 83 e0 f8	 and	 rax, -8
  00357	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR o$[rsp], rax

; 2317 :             n = p;

  0035f	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR p$[rsp]
  00367	48 89 44 24 40	 mov	 QWORD PTR n$[rsp], rax

; 2318 : 
; 2319 :             Py_TYPE(n) = tp;

  0036c	48 8b 44 24 40	 mov	 rax, QWORD PTR n$[rsp]
  00371	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR tp$[rsp]
  00379	48 89 48 58	 mov	 QWORD PTR [rax+88], rcx

; 2320 : 
; 2321 :             if (is_varobj = (tp->tp_itemsize > 0))

  0037d	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR tp$[rsp]
  00385	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  0038d	7e 0d		 jle	 SHORT $LN31@init_objec
  0038f	c7 84 24 a4 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv207[rsp], 1
  0039a	eb 0b		 jmp	 SHORT $LN32@init_objec
$LN31@init_objec:
  0039c	c7 84 24 a4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv207[rsp], 0
$LN32@init_objec:
  003a7	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR tv207[rsp]
  003ae	89 44 24 68	 mov	 DWORD PTR is_varobj$[rsp], eax
  003b2	83 7c 24 68 00	 cmp	 DWORD PTR is_varobj$[rsp], 0
  003b7	74 11		 je	 SHORT $LN13@init_objec

; 2322 :                 Py_SIZE(n) = nitems;

  003b9	48 8b 44 24 40	 mov	 rax, QWORD PTR n$[rsp]
  003be	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR nitems$[rsp]
  003c6	48 89 48 60	 mov	 QWORD PTR [rax+96], rcx
$LN13@init_objec:

; 2323 : 
; 2324 :             if (!Px_ISMIMIC(n)) {

  003ca	48 8b 44 24 40	 mov	 rax, QWORD PTR n$[rsp]
  003cf	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  003d3	48 25 00 02 00
	00		 and	 rax, 512		; 00000200H
  003d9	48 85 c0	 test	 rax, rax
  003dc	75 3f		 jne	 SHORT $LN12@init_objec

; 2325 :                 if (is_varobj)

  003de	83 7c 24 68 00	 cmp	 DWORD PTR is_varobj$[rsp], 0
  003e3	74 1d		 je	 SHORT $LN11@init_objec

; 2326 :                     s->varobjs++;

  003e5	48 8b 44 24 48	 mov	 rax, QWORD PTR s$[rsp]
  003ea	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  003f1	48 ff c0	 inc	 rax
  003f4	48 8b 4c 24 48	 mov	 rcx, QWORD PTR s$[rsp]
  003f9	48 89 81 b8 00
	00 00		 mov	 QWORD PTR [rcx+184], rax

; 2327 :                 else

  00400	eb 1b		 jmp	 SHORT $LN10@init_objec
$LN11@init_objec:

; 2328 :                     s->objects++;

  00402	48 8b 44 24 48	 mov	 rax, QWORD PTR s$[rsp]
  00407	48 8b 80 b0 00
	00 00		 mov	 rax, QWORD PTR [rax+176]
  0040e	48 ff c0	 inc	 rax
  00411	48 8b 4c 24 48	 mov	 rcx, QWORD PTR s$[rsp]
  00416	48 89 81 b0 00
	00 00		 mov	 QWORD PTR [rcx+176], rax
$LN10@init_objec:
$LN12@init_objec:

; 2329 :             }
; 2330 : 
; 2331 :         } else {

  0041d	e9 eb 02 00 00	 jmp	 $LN9@init_objec
$LN15@init_objec:

; 2332 :             /* Case 3: PyObject_GC_Resize called.  Object to resize may or may
; 2333 :              * not be from a parallel context.  Doesn't matter either way as
; 2334 :              * we don't really realloc anything behind the scenes -- we just
; 2335 :              * malloc another, larger chunk from our heap and copy over the
; 2336 :              * previous data. */
; 2337 :             init_type = _INIT_RESIZE;

  00422	c7 44 24 50 03
	00 00 00	 mov	 DWORD PTR init_type$[rsp], 3

; 2338 :             assert(!tp);

  0042a	48 83 bc 24 e0
	00 00 00 00	 cmp	 QWORD PTR tp$[rsp], 0
  00433	74 1c		 je	 SHORT $LN33@init_objec
  00435	41 b8 22 09 00
	00		 mov	 r8d, 2338		; 00000922H
  0043b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00442	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_17FEINKNBF@?$AA?$CB?$AAt?$AAp?$AA?$AA@
  00449	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0044f	33 c0		 xor	 eax, eax
$LN33@init_objec:

; 2339 :             assert(Py_TYPE(p) != NULL);

  00451	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR p$[rsp]
  00459	48 83 78 58 00	 cmp	 QWORD PTR [rax+88], 0
  0045e	75 1c		 jne	 SHORT $LN34@init_objec
  00460	41 b8 23 09 00
	00		 mov	 r8d, 2339		; 00000923H
  00466	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0046d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@PEJLAKP@?$AAP?$AAy?$AA_?$AAT?$AAY?$AAP?$AAE?$AA?$CI?$AAp?$AA?$CJ?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
  00474	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0047a	33 c0		 xor	 eax, eax
$LN34@init_objec:

; 2340 :             is_varobj = 1;

  0047c	c7 44 24 68 01
	00 00 00	 mov	 DWORD PTR is_varobj$[rsp], 1

; 2341 : 
; 2342 :             object_size = _Px_VSZ(tp, nitems);

  00484	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR tp$[rsp]
  0048c	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  00494	75 16		 jne	 SHORT $LN35@init_objec
  00496	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR tp$[rsp]
  0049e	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  004a2	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR tv242[rsp], rax
  004aa	eb 38		 jmp	 SHORT $LN36@init_objec
$LN35@init_objec:
  004ac	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR tp$[rsp]
  004b4	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR nitems$[rsp]
  004bc	48 0f af 88 80
	00 00 00	 imul	 rcx, QWORD PTR [rax+128]
  004c4	48 8b c1	 mov	 rax, rcx
  004c7	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR tp$[rsp]
  004cf	48 8b 49 78	 mov	 rcx, QWORD PTR [rcx+120]
  004d3	48 8d 44 01 07	 lea	 rax, QWORD PTR [rcx+rax+7]
  004d8	48 83 e0 f8	 and	 rax, -8
  004dc	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR tv242[rsp], rax
$LN36@init_objec:
  004e4	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR tv242[rsp]
  004ec	48 83 c0 07	 add	 rax, 7
  004f0	48 83 e0 f8	 and	 rax, -8
  004f4	48 89 44 24 78	 mov	 QWORD PTR object_size$[rsp], rax

; 2343 :             total_size  = _Px_SZ(object_size);

  004f9	48 8b 44 24 78	 mov	 rax, QWORD PTR object_size$[rsp]
  004fe	48 83 c0 07	 add	 rax, 7
  00502	48 83 e0 f8	 and	 rax, -8
  00506	48 83 c0 4f	 add	 rax, 79			; 0000004fH
  0050a	48 83 e0 f8	 and	 rax, -8
  0050e	48 89 44 24 60	 mov	 QWORD PTR total_size$[rsp], rax

; 2344 :             n = (PyObject *)_PyHeap_Malloc(c, total_size, 0, 0);

  00513	45 33 c9	 xor	 r9d, r9d
  00516	45 33 c0	 xor	 r8d, r8d
  00519	48 8b 54 24 60	 mov	 rdx, QWORD PTR total_size$[rsp]
  0051e	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  00526	e8 00 00 00 00	 call	 _PyHeap_Malloc
  0052b	48 89 44 24 40	 mov	 QWORD PTR n$[rsp], rax

; 2345 :             if (!n)

  00530	48 83 7c 24 40
	00		 cmp	 QWORD PTR n$[rsp], 0
  00536	75 0a		 jne	 SHORT $LN8@init_objec

; 2346 :                 return PyErr_NoMemory();

  00538	e8 00 00 00 00	 call	 PyErr_NoMemory
  0053d	e9 e7 04 00 00	 jmp	 $LN21@init_objec
$LN8@init_objec:

; 2347 :             x = _Px_X_PTR(n, object_size);

  00542	48 8b 44 24 78	 mov	 rax, QWORD PTR object_size$[rsp]
  00547	48 83 c0 07	 add	 rax, 7
  0054b	48 83 e0 f8	 and	 rax, -8
  0054f	48 83 c0 07	 add	 rax, 7
  00553	48 83 e0 f8	 and	 rax, -8
  00557	48 8b 4c 24 40	 mov	 rcx, QWORD PTR n$[rsp]
  0055c	48 8d 44 01 07	 lea	 rax, QWORD PTR [rcx+rax+7]
  00561	48 83 e0 f8	 and	 rax, -8
  00565	48 83 c0 07	 add	 rax, 7
  00569	48 83 e0 f8	 and	 rax, -8
  0056d	48 89 44 24 38	 mov	 QWORD PTR x$[rsp], rax

; 2348 :             o = _Px_O_PTR(n, object_size);

  00572	48 8b 44 24 78	 mov	 rax, QWORD PTR object_size$[rsp]
  00577	48 83 c0 07	 add	 rax, 7
  0057b	48 83 e0 f8	 and	 rax, -8
  0057f	48 83 c0 37	 add	 rax, 55			; 00000037H
  00583	48 83 e0 f8	 and	 rax, -8
  00587	48 83 c0 07	 add	 rax, 7
  0058b	48 83 e0 f8	 and	 rax, -8
  0058f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR n$[rsp]
  00594	48 8d 44 01 07	 lea	 rax, QWORD PTR [rcx+rax+7]
  00599	48 83 e0 f8	 and	 rax, -8
  0059d	48 83 c0 07	 add	 rax, 7
  005a1	48 83 e0 f8	 and	 rax, -8
  005a5	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR o$[rsp], rax

; 2349 : 
; 2350 :             /* Just do a blanket copy of everything rather than trying to
; 2351 :              * isolate the underlying VarObject ob_items.  It doesn't matter
; 2352 :              * if we pick up old pointers and whatnot (i.e. old px/is_px refs)
; 2353 :              * as all that stuff is initialized in the next section. */
; 2354 :             bytes_to_copy = _PyObject_VAR_SIZE(tp, Py_SIZE(p));

  005ad	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR p$[rsp]
  005b5	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR tp$[rsp]
  005bd	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  005c1	48 0f af 81 80
	00 00 00	 imul	 rax, QWORD PTR [rcx+128]
  005c9	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR tp$[rsp]
  005d1	48 8b 49 78	 mov	 rcx, QWORD PTR [rcx+120]
  005d5	48 8d 44 01 07	 lea	 rax, QWORD PTR [rcx+rax+7]
  005da	48 83 e0 f8	 and	 rax, -8
  005de	48 89 44 24 58	 mov	 QWORD PTR bytes_to_copy$[rsp], rax

; 2355 : 
; 2356 :             assert(bytes_to_copy < object_size);

  005e3	48 8b 44 24 78	 mov	 rax, QWORD PTR object_size$[rsp]
  005e8	48 39 44 24 58	 cmp	 QWORD PTR bytes_to_copy$[rsp], rax
  005ed	72 1c		 jb	 SHORT $LN37@init_objec
  005ef	41 b8 34 09 00
	00		 mov	 r8d, 2356		; 00000934H
  005f5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  005fc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DI@GBDFJEAO@?$AAb?$AAy?$AAt?$AAe?$AAs?$AA_?$AAt?$AAo?$AA_?$AAc?$AAo?$AAp?$AAy?$AA?5?$AA?$DM?$AA?5?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?$AA@
  00603	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00609	33 c0		 xor	 eax, eax
$LN37@init_objec:

; 2357 :             assert(Py_SIZE(p) < nitems);

  0060b	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR p$[rsp]
  00613	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR nitems$[rsp]
  0061b	48 39 48 60	 cmp	 QWORD PTR [rax+96], rcx
  0061f	7c 1c		 jl	 SHORT $LN38@init_objec
  00621	41 b8 35 09 00
	00		 mov	 r8d, 2357		; 00000935H
  00627	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0062e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CI@GHKNKKNJ@?$AAP?$AAy?$AA_?$AAS?$AAI?$AAZ?$AAE?$AA?$CI?$AAp?$AA?$CJ?$AA?5?$AA?$DM?$AA?5?$AAn?$AAi?$AAt?$AAe?$AAm?$AAs?$AA?$AA@
  00635	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0063b	33 c0		 xor	 eax, eax
$LN38@init_objec:

; 2358 : 
; 2359 :             memcpy(n, p, bytes_to_copy);

  0063d	4c 8b 44 24 58	 mov	 r8, QWORD PTR bytes_to_copy$[rsp]
  00642	48 8b 94 24 d8
	00 00 00	 mov	 rdx, QWORD PTR p$[rsp]
  0064a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR n$[rsp]
  0064f	e8 00 00 00 00	 call	 memcpy

; 2360 : 
; 2361 :             Py_TYPE(n) = tp;

  00654	48 8b 44 24 40	 mov	 rax, QWORD PTR n$[rsp]
  00659	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR tp$[rsp]
  00661	48 89 48 58	 mov	 QWORD PTR [rax+88], rcx

; 2362 :             Py_SIZE(n) = nitems;

  00665	48 8b 44 24 40	 mov	 rax, QWORD PTR n$[rsp]
  0066a	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR nitems$[rsp]
  00672	48 89 48 60	 mov	 QWORD PTR [rax+96], rcx

; 2363 : 
; 2364 :             if (Py_PXOBJ(p)) {

  00676	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR [rsp+32], 4
  0067e	4c 8b 8c 24 d8
	00 00 00	 mov	 r9, QWORD PTR p$[rsp]
  00686	41 b8 3c 09 00
	00		 mov	 r8d, 2364		; 0000093cH
  0068c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@PGHBGAOD@?4?4?2Python?2pyparallel?4c?$AA@
  00693	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@NJLCLNDF@init_object?$AA@
  0069a	e8 00 00 00 00	 call	 _PyParallel_Guard
  0069f	85 c0		 test	 eax, eax
  006a1	74 26		 je	 SHORT $LN7@init_objec

; 2365 :                 /* XXX do we really need to do this?  (Original line of
; 2366 :                  * thinking was that we might need to treat the object
; 2367 :                  * differently down the track (i.e. during cleanup) if
; 2368 :                  * it was resized.) */
; 2369 :                 Py_ASPX(p)->resized_to = n;

  006a3	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR p$[rsp]
  006ab	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  006af	48 8b 4c 24 40	 mov	 rcx, QWORD PTR n$[rsp]
  006b4	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 2370 :                 x->resized_from = p;

  006b8	48 8b 44 24 38	 mov	 rax, QWORD PTR x$[rsp]
  006bd	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR p$[rsp]
  006c5	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx
$LN7@init_objec:

; 2371 :             }
; 2372 : 
; 2373 :             c->h->resizes++;

  006c9	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  006d1	48 8b 80 d0 00
	00 00		 mov	 rax, QWORD PTR [rax+208]
  006d8	48 8b 80 88 00
	00 00		 mov	 rax, QWORD PTR [rax+136]
  006df	48 ff c0	 inc	 rax
  006e2	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  006ea	48 8b 89 d0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+208]
  006f1	48 89 81 88 00
	00 00		 mov	 QWORD PTR [rcx+136], rax

; 2374 :             s->resizes++;

  006f8	48 8b 44 24 48	 mov	 rax, QWORD PTR s$[rsp]
  006fd	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00701	48 ff c0	 inc	 rax
  00704	48 8b 4c 24 48	 mov	 rcx, QWORD PTR s$[rsp]
  00709	48 89 41 60	 mov	 QWORD PTR [rcx+96], rax
$LN9@init_objec:
$LN16@init_objec:

; 2375 :         }
; 2376 :     }
; 2377 :     Py_REFCNT(n) = 1;

  0070d	48 8b 44 24 40	 mov	 rax, QWORD PTR n$[rsp]
  00712	48 c7 40 50 01
	00 00 00	 mov	 QWORD PTR [rax+80], 1

; 2378 : 
; 2379 :     assert(tp);

  0071a	48 83 bc 24 e0
	00 00 00 00	 cmp	 QWORD PTR tp$[rsp], 0
  00723	75 1c		 jne	 SHORT $LN39@init_objec
  00725	41 b8 4b 09 00
	00		 mov	 r8d, 2379		; 0000094bH
  0072b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00732	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_15LFLBLBBH@?$AAt?$AAp?$AA?$AA@
  00739	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0073f	33 c0		 xor	 eax, eax
$LN39@init_objec:

; 2380 :     assert(Py_TYPE(n) == tp);

  00741	48 8b 44 24 40	 mov	 rax, QWORD PTR n$[rsp]
  00746	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR tp$[rsp]
  0074e	48 39 48 58	 cmp	 QWORD PTR [rax+88], rcx
  00752	74 1c		 je	 SHORT $LN40@init_objec
  00754	41 b8 4c 09 00
	00		 mov	 r8d, 2380		; 0000094cH
  0075a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00761	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CC@LHHCMOJG@?$AAP?$AAy?$AA_?$AAT?$AAY?$AAP?$AAE?$AA?$CI?$AAn?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAt?$AAp?$AA?$AA@
  00768	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0076e	33 c0		 xor	 eax, eax
$LN40@init_objec:

; 2381 :     assert(is_varobj == 0 || is_varobj == 1);

  00770	83 7c 24 68 00	 cmp	 DWORD PTR is_varobj$[rsp], 0
  00775	74 23		 je	 SHORT $LN41@init_objec
  00777	83 7c 24 68 01	 cmp	 DWORD PTR is_varobj$[rsp], 1
  0077c	74 1c		 je	 SHORT $LN41@init_objec
  0077e	41 b8 4d 09 00
	00		 mov	 r8d, 2381		; 0000094dH
  00784	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0078b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EC@BJNBAJB@?$AAi?$AAs?$AA_?$AAv?$AAa?$AAr?$AAo?$AAb?$AAj?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAi?$AAs?$AA_?$AAv?$AAa?$AAr?$AAo?$AAb?$AAj?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA1@
  00792	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00798	33 c0		 xor	 eax, eax
$LN41@init_objec:

; 2382 : 
; 2383 :     Py_EVENT(n) = NULL;

  0079a	48 8b 44 24 40	 mov	 rax, QWORD PTR n$[rsp]
  0079f	48 c7 40 30 00
	00 00 00	 mov	 QWORD PTR [rax+48], 0

; 2384 :     Py_PXFLAGS(n) |= Py_PXFLAGS_ISPX;

  007a7	48 8b 44 24 40	 mov	 rax, QWORD PTR n$[rsp]
  007ac	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  007b0	48 83 c8 02	 or	 rax, 2
  007b4	48 8b 4c 24 40	 mov	 rcx, QWORD PTR n$[rsp]
  007b9	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 2385 :     Py_ORIG_TYPE(n) = NULL;

  007bd	48 8b 44 24 40	 mov	 rax, QWORD PTR n$[rsp]
  007c2	48 c7 40 38 00
	00 00 00	 mov	 QWORD PTR [rax+56], 0

; 2386 : 
; 2387 :     if (is_varobj)

  007ca	83 7c 24 68 00	 cmp	 DWORD PTR is_varobj$[rsp], 0
  007cf	74 2f		 je	 SHORT $LN6@init_objec

; 2388 :         assert(Py_SIZE(n) == nitems);

  007d1	48 8b 44 24 40	 mov	 rax, QWORD PTR n$[rsp]
  007d6	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR nitems$[rsp]
  007de	48 39 48 60	 cmp	 QWORD PTR [rax+96], rcx
  007e2	74 1c		 je	 SHORT $LN42@init_objec
  007e4	41 b8 54 09 00
	00		 mov	 r8d, 2388		; 00000954H
  007ea	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  007f1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@LMGKILLE@?$AAP?$AAy?$AA_?$AAS?$AAI?$AAZ?$AAE?$AA?$CI?$AAn?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAn?$AAi?$AAt?$AAe?$AAm?$AAs?$AA?$AA@
  007f8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  007fe	33 c0		 xor	 eax, eax
$LN42@init_objec:
$LN6@init_objec:

; 2389 : 
; 2390 :     n->px = x;

  00800	48 8b 44 24 40	 mov	 rax, QWORD PTR n$[rsp]
  00805	48 8b 4c 24 38	 mov	 rcx, QWORD PTR x$[rsp]
  0080a	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 2391 :     n->is_px = _Py_IS_PARALLEL;

  0080e	48 8b 44 24 40	 mov	 rax, QWORD PTR n$[rsp]
  00813	48 b9 ad de 32
	54 ef be 76 98	 mov	 rcx, -7460565797573566803 ; 9876beef5432deadH
  0081d	48 89 08	 mov	 QWORD PTR [rax], rcx

; 2392 :     n->srw_lock = NULL;

  00820	48 8b 44 24 40	 mov	 rax, QWORD PTR n$[rsp]
  00825	48 c7 40 28 00
	00 00 00	 mov	 QWORD PTR [rax+40], 0

; 2393 : 
; 2394 :     x->ctx = c;

  0082d	48 8b 44 24 38	 mov	 rax, QWORD PTR x$[rsp]
  00832	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  0083a	48 89 08	 mov	 QWORD PTR [rax], rcx

; 2395 :     x->signature = _PxObjectSignature;

  0083d	48 8b 44 24 38	 mov	 rax, QWORD PTR x$[rsp]
  00842	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR _PxObjectSignature
  00849	48 89 48 28	 mov	 QWORD PTR [rax+40], rcx

; 2396 : 
; 2397 :     if (Px_ISMIMIC(n))

  0084d	48 8b 44 24 40	 mov	 rax, QWORD PTR n$[rsp]
  00852	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00856	48 25 00 02 00
	00		 and	 rax, 512		; 00000200H
  0085c	48 85 c0	 test	 rax, rax
  0085f	74 05		 je	 SHORT $LN5@init_objec

; 2398 :         goto end;

  00861	e9 be 01 00 00	 jmp	 $end$128115
$LN5@init_objec:

; 2399 : 
; 2400 :     if (Px_TLS_HEAP_ACTIVE)

  00866	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:tls
  0086b	8b c0		 mov	 eax, eax
  0086d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00873	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0087c	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  00880	83 bc 01 d0 00
	00 00 00	 cmp	 DWORD PTR [rcx+rax+208], 0
  00888	7e 05		 jle	 SHORT $LN4@init_objec

; 2401 :         goto end;

  0088a	e9 95 01 00 00	 jmp	 $end$128115
$LN4@init_objec:

; 2402 : 
; 2403 :     if (is_heap_override_active) {

  0088f	83 7c 24 30 00	 cmp	 DWORD PTR is_heap_override_active$[rsp], 0
  00894	74 1c		 je	 SHORT $LN3@init_objec

; 2404 :         Py_PXFLAGS(n) |= Py_PXFLAGS_CLONED;

  00896	48 8b 44 24 40	 mov	 rax, QWORD PTR n$[rsp]
  0089b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0089f	48 0f ba e8 07	 bts	 rax, 7
  008a4	48 8b 4c 24 40	 mov	 rcx, QWORD PTR n$[rsp]
  008a9	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 2405 :         goto end;

  008ad	e9 72 01 00 00	 jmp	 $end$128115
$LN3@init_objec:

; 2406 :     }
; 2407 : 
; 2408 :     o->op = n;

  008b2	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR o$[rsp]
  008ba	48 8b 4c 24 40	 mov	 rcx, QWORD PTR n$[rsp]
  008bf	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 2409 :     append_object((is_varobj ? &c->varobjs : &c->objects), o);

  008c3	83 7c 24 68 00	 cmp	 DWORD PTR is_varobj$[rsp], 0
  008c8	74 18		 je	 SHORT $LN43@init_objec
  008ca	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  008d2	48 05 70 33 00
	00		 add	 rax, 13168		; 00003370H
  008d8	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR tv376[rsp], rax
  008e0	eb 16		 jmp	 SHORT $LN44@init_objec
$LN43@init_objec:
  008e2	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  008ea	48 05 60 33 00
	00		 add	 rax, 13152		; 00003360H
  008f0	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR tv376[rsp], rax
$LN44@init_objec:
  008f8	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR o$[rsp]
  00900	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR tv376[rsp]
  00908	e8 00 00 00 00	 call	 append_object

; 2410 : 
; 2411 :     if (!c->ob_first) {

  0090d	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  00915	48 83 b8 18 33
	00 00 00	 cmp	 QWORD PTR [rax+13080], 0
  0091d	75 47		 jne	 SHORT $LN2@init_objec

; 2412 :         c->ob_first = n;

  0091f	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  00927	48 8b 4c 24 40	 mov	 rcx, QWORD PTR n$[rsp]
  0092c	48 89 88 18 33
	00 00		 mov	 QWORD PTR [rax+13080], rcx

; 2413 :         c->ob_last  = n;

  00933	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  0093b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR n$[rsp]
  00940	48 89 88 20 33
	00 00		 mov	 QWORD PTR [rax+13088], rcx

; 2414 :         n->_ob_next = NULL;

  00947	48 8b 44 24 40	 mov	 rax, QWORD PTR n$[rsp]
  0094c	48 c7 40 40 00
	00 00 00	 mov	 QWORD PTR [rax+64], 0

; 2415 :         n->_ob_prev = NULL;

  00954	48 8b 44 24 40	 mov	 rax, QWORD PTR n$[rsp]
  00959	48 c7 40 48 00
	00 00 00	 mov	 QWORD PTR [rax+72], 0

; 2416 :     } else {

  00961	e9 be 00 00 00	 jmp	 $LN1@init_objec
$LN2@init_objec:

; 2417 :         PyObject *last;
; 2418 :         assert(!c->ob_first->_ob_prev);

  00966	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  0096e	48 8b 80 18 33
	00 00		 mov	 rax, QWORD PTR [rax+13080]
  00975	48 83 78 48 00	 cmp	 QWORD PTR [rax+72], 0
  0097a	74 1c		 je	 SHORT $LN45@init_objec
  0097c	41 b8 72 09 00
	00		 mov	 r8d, 2418		; 00000972H
  00982	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00989	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@IDPPHAMD@?$AA?$CB?$AAc?$AA?9?$AA?$DO?$AAo?$AAb?$AA_?$AAf?$AAi?$AAr?$AAs?$AAt?$AA?9?$AA?$DO?$AA_?$AAo?$AAb?$AA_?$AAp?$AAr?$AAe?$AAv?$AA?$AA@
  00990	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00996	33 c0		 xor	 eax, eax
$LN45@init_objec:

; 2419 :         assert(!c->ob_last->_ob_next);

  00998	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  009a0	48 8b 80 20 33
	00 00		 mov	 rax, QWORD PTR [rax+13088]
  009a7	48 83 78 40 00	 cmp	 QWORD PTR [rax+64], 0
  009ac	74 1c		 je	 SHORT $LN46@init_objec
  009ae	41 b8 73 09 00
	00		 mov	 r8d, 2419		; 00000973H
  009b4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  009bb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@HCPGJHEI@?$AA?$CB?$AAc?$AA?9?$AA?$DO?$AAo?$AAb?$AA_?$AAl?$AAa?$AAs?$AAt?$AA?9?$AA?$DO?$AA_?$AAo?$AAb?$AA_?$AAn?$AAe?$AAx?$AAt?$AA?$AA@
  009c2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  009c8	33 c0		 xor	 eax, eax
$LN46@init_objec:

; 2420 :         last = c->ob_last;

  009ca	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  009d2	48 8b 80 20 33
	00 00		 mov	 rax, QWORD PTR [rax+13088]
  009d9	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR last$128123[rsp], rax

; 2421 :         last->_ob_next = n;

  009e1	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR last$128123[rsp]
  009e9	48 8b 4c 24 40	 mov	 rcx, QWORD PTR n$[rsp]
  009ee	48 89 48 40	 mov	 QWORD PTR [rax+64], rcx

; 2422 :         n->_ob_prev = last;

  009f2	48 8b 44 24 40	 mov	 rax, QWORD PTR n$[rsp]
  009f7	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR last$128123[rsp]
  009ff	48 89 48 48	 mov	 QWORD PTR [rax+72], rcx

; 2423 :         n->_ob_next = NULL;

  00a03	48 8b 44 24 40	 mov	 rax, QWORD PTR n$[rsp]
  00a08	48 c7 40 40 00
	00 00 00	 mov	 QWORD PTR [rax+64], 0

; 2424 :         c->ob_last = n;

  00a10	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  00a18	48 8b 4c 24 40	 mov	 rcx, QWORD PTR n$[rsp]
  00a1d	48 89 88 20 33
	00 00		 mov	 QWORD PTR [rax+13088], rcx
$LN1@init_objec:
$end$128115:

; 2425 :     }
; 2426 : 
; 2427 : end:
; 2428 :     return n;

  00a24	48 8b 44 24 40	 mov	 rax, QWORD PTR n$[rsp]
$LN21@init_objec:

; 2429 : }

  00a29	48 81 c4 c8 00
	00 00		 add	 rsp, 200		; 000000c8H
  00a30	c3		 ret	 0
init_object ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\python\pyparallel_private.h
pdata	SEGMENT
$pdata$append_object DD imagerel append_object
	DD	imagerel append_object+136
	DD	imagerel $unwind$append_object
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$append_object DD 010e01H
	DD	0220eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT append_object
_TEXT	SEGMENT
n$ = 0
list$ = 32
o$ = 40
append_object PROC					; COMDAT

; 270  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 18	 sub	 rsp, 24

; 271  :     register Object *n;
; 272  :     if (!list->first) {

  0000e	48 8b 44 24 20	 mov	 rax, QWORD PTR list$[rsp]
  00013	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00017	75 29		 jne	 SHORT $LN2@append_obj

; 273  :         list->first = o;

  00019	48 8b 44 24 20	 mov	 rax, QWORD PTR list$[rsp]
  0001e	48 8b 4c 24 28	 mov	 rcx, QWORD PTR o$[rsp]
  00023	48 89 08	 mov	 QWORD PTR [rax], rcx

; 274  :         list->last = o;

  00026	48 8b 44 24 20	 mov	 rax, QWORD PTR list$[rsp]
  0002b	48 8b 4c 24 28	 mov	 rcx, QWORD PTR o$[rsp]
  00030	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 275  :         o->prev = NULL;

  00034	48 8b 44 24 28	 mov	 rax, QWORD PTR o$[rsp]
  00039	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 276  :     } else {

  00040	eb 34		 jmp	 SHORT $LN1@append_obj
$LN2@append_obj:

; 277  :         n = list->last;

  00042	48 8b 44 24 20	 mov	 rax, QWORD PTR list$[rsp]
  00047	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0004b	48 89 04 24	 mov	 QWORD PTR n$[rsp], rax

; 278  :         n->next = o;

  0004f	48 8b 04 24	 mov	 rax, QWORD PTR n$[rsp]
  00053	48 8b 4c 24 28	 mov	 rcx, QWORD PTR o$[rsp]
  00058	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 279  :         o->prev = n;

  0005c	48 8b 44 24 28	 mov	 rax, QWORD PTR o$[rsp]
  00061	48 8b 0c 24	 mov	 rcx, QWORD PTR n$[rsp]
  00065	48 89 08	 mov	 QWORD PTR [rax], rcx

; 280  :         list->last = o;

  00068	48 8b 44 24 20	 mov	 rax, QWORD PTR list$[rsp]
  0006d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR o$[rsp]
  00072	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
$LN1@append_obj:

; 281  :     }
; 282  :     o->next = NULL;

  00076	48 8b 44 24 28	 mov	 rax, QWORD PTR o$[rsp]
  0007b	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0

; 283  : }

  00083	48 83 c4 18	 add	 rsp, 24
  00087	c3		 ret	 0
append_object ENDP
_TEXT	ENDS
PUBLIC	??_C@_1CK@EJHJGDOE@?$AAt?$AAp?$AA?9?$AA?$DO?$AAt?$AAp?$AA_?$AAi?$AAt?$AAe?$AAm?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	Object_Init
;	COMDAT pdata
; File c:\src\pyparallel\python\pyparallel.c
pdata	SEGMENT
$pdata$Object_Init DD imagerel $LN4
	DD	imagerel $LN4+90
	DD	imagerel $unwind$Object_Init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Object_Init DD 011301H
	DD	04213H
xdata	ENDS
;	COMDAT ??_C@_1CK@EJHJGDOE@?$AAt?$AAp?$AA?9?$AA?$DO?$AAt?$AAp?$AA_?$AAi?$AAt?$AAe?$AAm?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1CK@EJHJGDOE@?$AAt?$AAp?$AA?9?$AA?$DO?$AAt?$AAp?$AA_?$AAi?$AAt?$AAe?$AAm?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@ DB 't'
	DB	00H, 'p', 00H, '-', 00H, '>', 00H, 't', 00H, 'p', 00H, '_', 00H
	DB	'i', 00H, 't', 00H, 'e', 00H, 'm', 00H, 's', 00H, 'i', 00H, 'z'
	DB	00H, 'e', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '0', 00H
	DB	00H, 00H					; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT Object_Init
_TEXT	SEGMENT
op$ = 48
tp$ = 56
c$ = 64
Object_Init PROC					; COMDAT

; 2434 : {

$LN4:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2435 :     assert(tp->tp_itemsize == 0);

  00013	48 8b 44 24 38	 mov	 rax, QWORD PTR tp$[rsp]
  00018	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  00020	74 1c		 je	 SHORT $LN3@Object_Ini
  00022	41 b8 83 09 00
	00		 mov	 r8d, 2435		; 00000983H
  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@EJHJGDOE@?$AAt?$AAp?$AA?9?$AA?$DO?$AAt?$AAp?$AA_?$AAi?$AAt?$AAe?$AAm?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@
  00036	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0003c	33 c0		 xor	 eax, eax
$LN3@Object_Ini:

; 2436 :     return init_object(c, op, tp, 0);

  0003e	45 33 c9	 xor	 r9d, r9d
  00041	4c 8b 44 24 38	 mov	 r8, QWORD PTR tp$[rsp]
  00046	48 8b 54 24 30	 mov	 rdx, QWORD PTR op$[rsp]
  0004b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR c$[rsp]
  00050	e8 00 00 00 00	 call	 init_object

; 2437 : }

  00055	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00059	c3		 ret	 0
Object_Init ENDP
_TEXT	ENDS
PUBLIC	Object_New
;	COMDAT pdata
pdata	SEGMENT
$pdata$Object_New DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$Object_New
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Object_New DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT Object_New
_TEXT	SEGMENT
tp$ = 48
c$ = 56
Object_New PROC						; COMDAT

; 2442 : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2443 :     return init_object(c, NULL, tp, 0);

  0000e	45 33 c9	 xor	 r9d, r9d
  00011	4c 8b 44 24 30	 mov	 r8, QWORD PTR tp$[rsp]
  00016	33 d2		 xor	 edx, edx
  00018	48 8b 4c 24 38	 mov	 rcx, QWORD PTR c$[rsp]
  0001d	e8 00 00 00 00	 call	 init_object

; 2444 : }

  00022	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00026	c3		 ret	 0
Object_New ENDP
_TEXT	ENDS
PUBLIC	??_C@_1CI@EAELMLFA@?$AAt?$AAp?$AA?9?$AA?$DO?$AAt?$AAp?$AA_?$AAi?$AAt?$AAe?$AAm?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	VarObject_Init
;	COMDAT pdata
pdata	SEGMENT
$pdata$VarObject_Init DD imagerel $LN4
	DD	imagerel $LN4+97
	DD	imagerel $unwind$VarObject_Init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$VarObject_Init DD 011801H
	DD	04218H
xdata	ENDS
;	COMDAT ??_C@_1CI@EAELMLFA@?$AAt?$AAp?$AA?9?$AA?$DO?$AAt?$AAp?$AA_?$AAi?$AAt?$AAe?$AAm?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1CI@EAELMLFA@?$AAt?$AAp?$AA?9?$AA?$DO?$AAt?$AAp?$AA_?$AAi?$AAt?$AAe?$AAm?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@ DB 't'
	DB	00H, 'p', 00H, '-', 00H, '>', 00H, 't', 00H, 'p', 00H, '_', 00H
	DB	'i', 00H, 't', 00H, 'e', 00H, 'm', 00H, 's', 00H, 'i', 00H, 'z'
	DB	00H, 'e', 00H, ' ', 00H, '>', 00H, ' ', 00H, '0', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT VarObject_Init
_TEXT	SEGMENT
v$ = 48
tp$ = 56
nitems$ = 64
c$ = 72
VarObject_Init PROC					; COMDAT

; 2449 : {

$LN4:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2450 :     assert(tp->tp_itemsize > 0);

  00018	48 8b 44 24 38	 mov	 rax, QWORD PTR tp$[rsp]
  0001d	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  00025	7f 1c		 jg	 SHORT $LN3@VarObject_
  00027	41 b8 92 09 00
	00		 mov	 r8d, 2450		; 00000992H
  0002d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00034	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CI@EAELMLFA@?$AAt?$AAp?$AA?9?$AA?$DO?$AAt?$AAp?$AA_?$AAi?$AAt?$AAe?$AAm?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@
  0003b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00041	33 c0		 xor	 eax, eax
$LN3@VarObject_:

; 2451 :     return (PyVarObject *)init_object(c, (PyObject *)v, tp, nitems);

  00043	4c 8b 4c 24 40	 mov	 r9, QWORD PTR nitems$[rsp]
  00048	4c 8b 44 24 38	 mov	 r8, QWORD PTR tp$[rsp]
  0004d	48 8b 54 24 30	 mov	 rdx, QWORD PTR v$[rsp]
  00052	48 8b 4c 24 48	 mov	 rcx, QWORD PTR c$[rsp]
  00057	e8 00 00 00 00	 call	 init_object

; 2452 : }

  0005c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00060	c3		 ret	 0
VarObject_Init ENDP
_TEXT	ENDS
PUBLIC	VarObject_New
;	COMDAT pdata
pdata	SEGMENT
$pdata$VarObject_New DD imagerel $LN3
	DD	imagerel $LN3+46
	DD	imagerel $unwind$VarObject_New
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$VarObject_New DD 011301H
	DD	04213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT VarObject_New
_TEXT	SEGMENT
tp$ = 48
nitems$ = 56
c$ = 64
VarObject_New PROC					; COMDAT

; 2457 : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2458 :     return (PyVarObject *)init_object(c, NULL, tp, nitems);

  00013	4c 8b 4c 24 38	 mov	 r9, QWORD PTR nitems$[rsp]
  00018	4c 8b 44 24 30	 mov	 r8, QWORD PTR tp$[rsp]
  0001d	33 d2		 xor	 edx, edx
  0001f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR c$[rsp]
  00024	e8 00 00 00 00	 call	 init_object

; 2459 : }

  00029	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002d	c3		 ret	 0
VarObject_New ENDP
_TEXT	ENDS
PUBLIC	VarObject_Resize
;	COMDAT pdata
pdata	SEGMENT
$pdata$VarObject_Resize DD imagerel $LN3
	DD	imagerel $LN3+47
	DD	imagerel $unwind$VarObject_Resize
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$VarObject_Resize DD 011301H
	DD	04213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT VarObject_Resize
_TEXT	SEGMENT
v$ = 48
nitems$ = 56
c$ = 64
VarObject_Resize PROC					; COMDAT

; 2463 : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2464 :     return (PyVarObject *)init_object(c, v, NULL, nitems);

  00013	4c 8b 4c 24 38	 mov	 r9, QWORD PTR nitems$[rsp]
  00018	45 33 c0	 xor	 r8d, r8d
  0001b	48 8b 54 24 30	 mov	 rdx, QWORD PTR v$[rsp]
  00020	48 8b 4c 24 40	 mov	 rcx, QWORD PTR c$[rsp]
  00025	e8 00 00 00 00	 call	 init_object

; 2465 : }

  0002a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002e	c3		 ret	 0
VarObject_Resize ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CO@NEPGBNJA@?6_PxObject_Realloc?$CI?$CBPy_PXCTX?5?$CG?$CG?5@ ; `string'
PUBLIC	??_C@_0CN@MCCLLPPH@?6_PxObject_Realloc?$CIPy_PXCTX?5?$CG?$CG?5p@ ; `string'
PUBLIC	_PxObject_Realloc
EXTRN	_PyObject_DebugRealloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PxObject_Realloc DD imagerel $LN10
	DD	imagerel $LN10+260
	DD	imagerel $unwind$_PxObject_Realloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PxObject_Realloc DD 010e01H
	DD	0a20eH
xdata	ENDS
;	COMDAT ??_C@_0CO@NEPGBNJA@?6_PxObject_Realloc?$CI?$CBPy_PXCTX?5?$CG?$CG?5@
CONST	SEGMENT
??_C@_0CO@NEPGBNJA@?6_PxObject_Realloc?$CI?$CBPy_PXCTX?5?$CG?$CG?5@ DB 0aH
	DB	'_PxObject_Realloc(!Py_PXCTX && p = _SIG_PX)', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@MCCLLPPH@?6_PxObject_Realloc?$CIPy_PXCTX?5?$CG?$CG?5p@
CONST	SEGMENT
??_C@_0CN@MCCLLPPH@?6_PxObject_Realloc?$CIPy_PXCTX?5?$CG?$CG?5p@ DB 0aH, '_'
	DB	'PxObject_Realloc(Py_PXCTX && p = _SIG_PY)', 0aH, 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PxObject_Realloc
_TEXT	SEGMENT
s$ = 32
c$ = 40
m$ = 48
o$ = 52
r$128191 = 56
tv75 = 64
p$ = 96
nbytes$ = 104
_PxObject_Realloc PROC					; COMDAT

; 2469 : {

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 2470 :     unsigned long o, m, s;
; 2471 :     Context *c = ctx;

  0000e	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:ctx
  00013	8b c0		 mov	 eax, eax
  00015	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0001b	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00024	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  00028	48 8b 04 08	 mov	 rax, QWORD PTR [rax+rcx]
  0002c	48 89 44 24 28	 mov	 QWORD PTR c$[rsp], rax

; 2472 :     o = _Px_SafeObjectSignatureTest(p);

  00031	48 8b 4c 24 60	 mov	 rcx, QWORD PTR p$[rsp]
  00036	e8 00 00 00 00	 call	 _Px_SafeObjectSignatureTest
  0003b	89 44 24 34	 mov	 DWORD PTR o$[rsp], eax

; 2473 :     m = _Px_MemorySignature(p);

  0003f	48 8b 4c 24 60	 mov	 rcx, QWORD PTR p$[rsp]
  00044	e8 00 00 00 00	 call	 _Px_MemorySignature
  00049	89 44 24 30	 mov	 DWORD PTR m$[rsp], eax

; 2474 :     s = Px_MAX(o, m);

  0004d	8b 44 24 30	 mov	 eax, DWORD PTR m$[rsp]
  00051	39 44 24 34	 cmp	 DWORD PTR o$[rsp], eax
  00055	76 0a		 jbe	 SHORT $LN7@PxObject_R
  00057	8b 44 24 34	 mov	 eax, DWORD PTR o$[rsp]
  0005b	89 44 24 40	 mov	 DWORD PTR tv75[rsp], eax
  0005f	eb 08		 jmp	 SHORT $LN8@PxObject_R
$LN7@PxObject_R:
  00061	8b 44 24 30	 mov	 eax, DWORD PTR m$[rsp]
  00065	89 44 24 40	 mov	 DWORD PTR tv75[rsp], eax
$LN8@PxObject_R:
  00069	8b 44 24 40	 mov	 eax, DWORD PTR tv75[rsp]
  0006d	89 44 24 20	 mov	 DWORD PTR s$[rsp], eax

; 2475 :     if (Py_PXCTX) {

  00071	e8 00 00 00 00	 call	 _Py_PXCTX
  00076	85 c0		 test	 eax, eax
  00078	74 3a		 je	 SHORT $LN4@PxObject_R

; 2476 :         void *r;
; 2477 :         if (s & _SIG_PY)

  0007a	8b 44 24 20	 mov	 eax, DWORD PTR s$[rsp]
  0007e	83 e0 08	 and	 eax, 8
  00081	85 c0		 test	 eax, eax
  00083	74 0d		 je	 SHORT $LN3@PxObject_R

; 2478 :             printf("\n_PxObject_Realloc(Py_PXCTX && p = _SIG_PY)\n");

  00085	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CN@MCCLLPPH@?6_PxObject_Realloc?$CIPy_PXCTX?5?$CG?$CG?5p@
  0008c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_printf
$LN3@PxObject_R:

; 2479 :         r = _PyHeap_Realloc(c, p, nbytes);

  00092	4c 8b 44 24 68	 mov	 r8, QWORD PTR nbytes$[rsp]
  00097	48 8b 54 24 60	 mov	 rdx, QWORD PTR p$[rsp]
  0009c	48 8b 4c 24 28	 mov	 rcx, QWORD PTR c$[rsp]
  000a1	e8 00 00 00 00	 call	 _PyHeap_Realloc
  000a6	48 89 44 24 38	 mov	 QWORD PTR r$128191[rsp], rax

; 2480 :         return r;

  000ab	48 8b 44 24 38	 mov	 rax, QWORD PTR r$128191[rsp]
  000b0	eb 4d		 jmp	 SHORT $LN5@PxObject_R

; 2481 :     } else {

  000b2	eb 29		 jmp	 SHORT $LN2@PxObject_R
$LN4@PxObject_R:

; 2482 :         if (s & _SIG_PX)

  000b4	8b 44 24 20	 mov	 eax, DWORD PTR s$[rsp]
  000b8	83 e0 10	 and	 eax, 16
  000bb	85 c0		 test	 eax, eax
  000bd	74 0d		 je	 SHORT $LN1@PxObject_R

; 2483 :             printf("\n_PxObject_Realloc(!Py_PXCTX && p = _SIG_PX)\n");

  000bf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@NEPGBNJA@?6_PxObject_Realloc?$CI?$CBPy_PXCTX?5?$CG?$CG?5@
  000c6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_printf
$LN1@PxObject_R:

; 2484 :         return PyObject_Realloc(p, nbytes);

  000cc	48 8b 54 24 68	 mov	 rdx, QWORD PTR nbytes$[rsp]
  000d1	48 8b 4c 24 60	 mov	 rcx, QWORD PTR p$[rsp]
  000d6	e8 00 00 00 00	 call	 _PyObject_DebugRealloc
  000db	eb 22		 jmp	 SHORT $LN5@PxObject_R
$LN2@PxObject_R:

; 2485 :     }
; 2486 :     assert(0);

  000dd	33 c0		 xor	 eax, eax
  000df	85 c0		 test	 eax, eax
  000e1	75 1c		 jne	 SHORT $LN9@PxObject_R
  000e3	41 b8 b6 09 00
	00		 mov	 r8d, 2486		; 000009b6H
  000e9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  000f0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_13COJANIEC@?$AA0?$AA?$AA@
  000f7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000fd	33 c0		 xor	 eax, eax
$LN9@PxObject_R:
$LN5@PxObject_R:

; 2487 : }

  000ff	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00103	c3		 ret	 0
_PxObject_Realloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CL@MMGKBFNL@?6_PxObject_Free?$CI?$CBPy_PXCTX?5?$CG?$CG?5p?5?$DN@ ; `string'
PUBLIC	??_C@_0CL@GHBPPONJ@?6_PxObject_Free?$CIPy_PXCTX?5?$CG?$CG?5p?5?$CB?$DN@ ; `string'
PUBLIC	_PxObject_Free
EXTRN	_PyObject_DebugFree:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PxObject_Free DD imagerel $LN12
	DD	imagerel $LN12+214
	DD	imagerel $unwind$_PxObject_Free
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PxObject_Free DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0CL@MMGKBFNL@?6_PxObject_Free?$CI?$CBPy_PXCTX?5?$CG?$CG?5p?5?$DN@
CONST	SEGMENT
??_C@_0CL@MMGKBFNL@?6_PxObject_Free?$CI?$CBPy_PXCTX?5?$CG?$CG?5p?5?$DN@ DB 0aH
	DB	'_PxObject_Free(!Py_PXCTX && p = _SIG_PX)', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@GHBPPONJ@?6_PxObject_Free?$CIPy_PXCTX?5?$CG?$CG?5p?5?$CB?$DN@
CONST	SEGMENT
??_C@_0CL@GHBPPONJ@?6_PxObject_Free?$CIPy_PXCTX?5?$CG?$CG?5p?5?$CB?$DN@ DB 0aH
	DB	'_PxObject_Free(Py_PXCTX && p != _SIG_PX)', 0aH, 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PxObject_Free
_TEXT	SEGMENT
s$ = 32
c$ = 40
m$ = 48
o$ = 52
tv76 = 56
p$ = 80
_PxObject_Free PROC					; COMDAT

; 2492 : {

$LN12:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 2493 :     unsigned long o, m, s;
; 2494 :     Context *c = ctx;

  00009	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:ctx
  0000e	8b c0		 mov	 eax, eax
  00010	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00016	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0001f	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  00023	48 8b 04 08	 mov	 rax, QWORD PTR [rax+rcx]
  00027	48 89 44 24 28	 mov	 QWORD PTR c$[rsp], rax

; 2495 :     if (!p)

  0002c	48 83 7c 24 50
	00		 cmp	 QWORD PTR p$[rsp], 0
  00032	75 05		 jne	 SHORT $LN7@PxObject_F

; 2496 :         return;

  00034	e9 98 00 00 00	 jmp	 $LN8@PxObject_F
$LN7@PxObject_F:

; 2497 :     o = _Px_SafeObjectSignatureTest(p);

  00039	48 8b 4c 24 50	 mov	 rcx, QWORD PTR p$[rsp]
  0003e	e8 00 00 00 00	 call	 _Px_SafeObjectSignatureTest
  00043	89 44 24 34	 mov	 DWORD PTR o$[rsp], eax

; 2498 :     m = _Px_MemorySignature(p);

  00047	48 8b 4c 24 50	 mov	 rcx, QWORD PTR p$[rsp]
  0004c	e8 00 00 00 00	 call	 _Px_MemorySignature
  00051	89 44 24 30	 mov	 DWORD PTR m$[rsp], eax

; 2499 :     s = Px_MAX(o, m);

  00055	8b 44 24 30	 mov	 eax, DWORD PTR m$[rsp]
  00059	39 44 24 34	 cmp	 DWORD PTR o$[rsp], eax
  0005d	76 0a		 jbe	 SHORT $LN10@PxObject_F
  0005f	8b 44 24 34	 mov	 eax, DWORD PTR o$[rsp]
  00063	89 44 24 38	 mov	 DWORD PTR tv76[rsp], eax
  00067	eb 08		 jmp	 SHORT $LN11@PxObject_F
$LN10@PxObject_F:
  00069	8b 44 24 30	 mov	 eax, DWORD PTR m$[rsp]
  0006d	89 44 24 38	 mov	 DWORD PTR tv76[rsp], eax
$LN11@PxObject_F:
  00071	8b 44 24 38	 mov	 eax, DWORD PTR tv76[rsp]
  00075	89 44 24 20	 mov	 DWORD PTR s$[rsp], eax

; 2500 :     if (Py_PXCTX) {

  00079	e8 00 00 00 00	 call	 _Py_PXCTX
  0007e	85 c0		 test	 eax, eax
  00080	74 2b		 je	 SHORT $LN6@PxObject_F

; 2501 :         if (!(s & _SIG_PX))

  00082	8b 44 24 20	 mov	 eax, DWORD PTR s$[rsp]
  00086	83 e0 10	 and	 eax, 16
  00089	85 c0		 test	 eax, eax
  0008b	75 0f		 jne	 SHORT $LN5@PxObject_F

; 2502 :             printf("\n_PxObject_Free(Py_PXCTX && p != _SIG_PX)\n");

  0008d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CL@GHBPPONJ@?6_PxObject_Free?$CIPy_PXCTX?5?$CG?$CG?5p?5?$CB?$DN@
  00094	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_printf

; 2503 :         else

  0009a	eb 0f		 jmp	 SHORT $LN4@PxObject_F
$LN5@PxObject_F:

; 2504 :             _PyHeap_Free(c, p);

  0009c	48 8b 54 24 50	 mov	 rdx, QWORD PTR p$[rsp]
  000a1	48 8b 4c 24 28	 mov	 rcx, QWORD PTR c$[rsp]
  000a6	e8 00 00 00 00	 call	 _PyHeap_Free
$LN4@PxObject_F:

; 2505 :     } else {

  000ab	eb 24		 jmp	 SHORT $LN3@PxObject_F
$LN6@PxObject_F:

; 2506 :         if (s & _SIG_PX)

  000ad	8b 44 24 20	 mov	 eax, DWORD PTR s$[rsp]
  000b1	83 e0 10	 and	 eax, 16
  000b4	85 c0		 test	 eax, eax
  000b6	74 0f		 je	 SHORT $LN2@PxObject_F

; 2507 :             printf("\n_PxObject_Free(!Py_PXCTX && p = _SIG_PX)\n");

  000b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CL@MMGKBFNL@?6_PxObject_Free?$CI?$CBPy_PXCTX?5?$CG?$CG?5p?5?$DN@
  000bf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_printf

; 2508 :         else

  000c5	eb 0a		 jmp	 SHORT $LN1@PxObject_F
$LN2@PxObject_F:

; 2509 :             PyObject_Free(p);

  000c7	48 8b 4c 24 50	 mov	 rcx, QWORD PTR p$[rsp]
  000cc	e8 00 00 00 00	 call	 _PyObject_DebugFree
$LN1@PxObject_F:
$LN3@PxObject_F:
$LN8@PxObject_F:

; 2510 :     }
; 2511 : }

  000d1	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000d5	c3		 ret	 0
_PxObject_Free ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BP@KGNLFIED@non?9None?5return?5value?5detected?$AA@ ; `string'
PUBLIC	??_C@_1CK@NHMAHCO@?$AA?$CB?$AAt?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAe?$AAx?$AAc?$AA_?$AAt?$AAy?$AAp?$AAe?$AA?$AA@ ; `string'
PUBLIC	null_with_exc_or_non_none_return_type
;	COMDAT pdata
pdata	SEGMENT
$pdata$null_with_exc_or_non_none_return_type DD imagerel $LN8
	DD	imagerel $LN8+158
	DD	imagerel $unwind$null_with_exc_or_non_none_return_type
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$null_with_exc_or_non_none_return_type DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT ??_C@_0BP@KGNLFIED@non?9None?5return?5value?5detected?$AA@
CONST	SEGMENT
??_C@_0BP@KGNLFIED@non?9None?5return?5value?5detected?$AA@ DB 'non-None r'
	DB	'eturn value detected', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@NHMAHCO@?$AA?$CB?$AAt?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAe?$AAx?$AAc?$AA_?$AAt?$AAy?$AAp?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1CK@NHMAHCO@?$AA?$CB?$AAt?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAe?$AAx?$AAc?$AA_?$AAt?$AAy?$AAp?$AAe?$AA?$AA@ DB '!'
	DB	00H, 't', 00H, 's', 00H, 't', 00H, 'a', 00H, 't', 00H, 'e', 00H
	DB	'-', 00H, '>', 00H, 'c', 00H, 'u', 00H, 'r', 00H, 'e', 00H, 'x'
	DB	00H, 'c', 00H, '_', 00H, 't', 00H, 'y', 00H, 'p', 00H, 'e', 00H
	DB	00H, 00H					; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT null_with_exc_or_non_none_return_type
_TEXT	SEGMENT
op$ = 48
tstate$ = 56
null_with_exc_or_non_none_return_type PROC		; COMDAT

; 2534 : {

$LN8:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2535 :     if (!op && tstate->curexc_type)

  0000e	48 83 7c 24 30
	00		 cmp	 QWORD PTR op$[rsp], 0
  00014	75 13		 jne	 SHORT $LN4@null_with_
  00016	48 8b 44 24 38	 mov	 rax, QWORD PTR tstate$[rsp]
  0001b	48 83 78 48 00	 cmp	 QWORD PTR [rax+72], 0
  00020	74 07		 je	 SHORT $LN4@null_with_

; 2536 :         return 1;

  00022	b8 01 00 00 00	 mov	 eax, 1
  00027	eb 70		 jmp	 SHORT $LN5@null_with_
$LN4@null_with_:

; 2537 : 
; 2538 :     assert(!tstate->curexc_type);

  00029	48 8b 44 24 38	 mov	 rax, QWORD PTR tstate$[rsp]
  0002e	48 83 78 48 00	 cmp	 QWORD PTR [rax+72], 0
  00033	74 1c		 je	 SHORT $LN7@null_with_
  00035	41 b8 ea 09 00
	00		 mov	 r8d, 2538		; 000009eaH
  0003b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00042	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@NHMAHCO@?$AA?$CB?$AAt?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAe?$AAx?$AAc?$AA_?$AAt?$AAy?$AAp?$AAe?$AA?$AA@
  00049	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0004f	33 c0		 xor	 eax, eax
$LN7@null_with_:

; 2539 : 
; 2540 :     if ((!op && !tstate->curexc_type) || op == Py_None)

  00051	48 83 7c 24 30
	00		 cmp	 QWORD PTR op$[rsp], 0
  00057	75 0c		 jne	 SHORT $LN1@null_with_
  00059	48 8b 44 24 38	 mov	 rax, QWORD PTR tstate$[rsp]
  0005e	48 83 78 48 00	 cmp	 QWORD PTR [rax+72], 0
  00063	74 0e		 je	 SHORT $LN2@null_with_
$LN1@null_with_:
  00065	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0006c	48 39 44 24 30	 cmp	 QWORD PTR op$[rsp], rax
  00071	75 04		 jne	 SHORT $LN3@null_with_
$LN2@null_with_:

; 2541 :         return 0;

  00073	33 c0		 xor	 eax, eax
  00075	eb 22		 jmp	 SHORT $LN5@null_with_
$LN3@null_with_:

; 2542 : 
; 2543 :     Py_DECREF(op);

  00077	48 8b 4c 24 30	 mov	 rcx, QWORD PTR op$[rsp]
  0007c	e8 00 00 00 00	 call	 _Py_DecRef

; 2544 :     PyErr_SetString(PyExc_ValueError, "non-None return value detected");

  00081	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BP@KGNLFIED@non?9None?5return?5value?5detected?$AA@
  00088	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0008f	e8 00 00 00 00	 call	 PyErr_SetString

; 2545 :     return 1;

  00094	b8 01 00 00 00	 mov	 eax, 1
$LN5@null_with_:

; 2546 : }

  00099	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0009d	c3		 ret	 0
null_with_exc_or_non_none_return_type ENDP
_TEXT	ENDS
PUBLIC	null_or_non_none_return_type
;	COMDAT pdata
pdata	SEGMENT
$pdata$null_or_non_none_return_type DD imagerel $LN5
	DD	imagerel $LN5+81
	DD	imagerel $unwind$null_or_non_none_return_type
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$null_or_non_none_return_type DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT null_or_non_none_return_type
_TEXT	SEGMENT
op$ = 48
null_or_non_none_return_type PROC			; COMDAT

; 2551 : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2552 :     if (!op)

  00009	48 83 7c 24 30
	00		 cmp	 QWORD PTR op$[rsp], 0
  0000f	75 07		 jne	 SHORT $LN2@null_or_no

; 2553 :         return 1;

  00011	b8 01 00 00 00	 mov	 eax, 1
  00016	eb 34		 jmp	 SHORT $LN3@null_or_no
$LN2@null_or_no:

; 2554 : 
; 2555 :     if (op == Py_None)

  00018	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0001f	48 39 44 24 30	 cmp	 QWORD PTR op$[rsp], rax
  00024	75 04		 jne	 SHORT $LN1@null_or_no

; 2556 :         return 0;

  00026	33 c0		 xor	 eax, eax
  00028	eb 22		 jmp	 SHORT $LN3@null_or_no
$LN1@null_or_no:

; 2557 : 
; 2558 :     Py_DECREF(op);

  0002a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR op$[rsp]
  0002f	e8 00 00 00 00	 call	 _Py_DecRef

; 2559 :     PyErr_SetString(PyExc_ValueError, "non-None return value detected");

  00034	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BP@KGNLFIED@non?9None?5return?5value?5detected?$AA@
  0003b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00042	e8 00 00 00 00	 call	 PyErr_SetString

; 2560 :     return 1;

  00047	b8 01 00 00 00	 mov	 eax, 1
$LN3@null_or_no:

; 2561 : }

  0004c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00050	c3		 ret	 0
null_or_non_none_return_type ENDP
_TEXT	ENDS
PUBLIC	Px_INCCTX
; Function compile flags: /Odtp
;	COMDAT Px_INCCTX
_TEXT	SEGMENT
c$ = 8
Px_INCCTX PROC						; COMDAT

; 2567 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 2568 :     InterlockedIncrement(&(c->refcnt));

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR c$[rsp]
  0000a	48 05 58 33 00
	00		 add	 rax, 13144		; 00003358H
  00010	f0 ff 00	 lock inc DWORD PTR [rax]

; 2569 : }

  00013	c3		 ret	 0
Px_INCCTX ENDP
_TEXT	ENDS
PUBLIC	??_C@_1CI@OCJHNLEK@?$AA?$CB?$AAp?$AAx?$AA?9?$AA?$DO?$AAc?$AAt?$AAx?$AA_?$AAl?$AAa?$AAs?$AAt?$AA?9?$AA?$DO?$AAn?$AAe?$AAx?$AAt?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CK@MILIFEMM@?$AA?$CB?$AAp?$AAx?$AA?9?$AA?$DO?$AAc?$AAt?$AAx?$AA_?$AAf?$AAi?$AAr?$AAs?$AAt?$AA?9?$AA?$DO?$AAp?$AAr?$AAe?$AAv?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BM@GKJBGAJK@?$AA?$CB?$AAp?$AAx?$AA?9?$AA?$DO?$AAc?$AAt?$AAx?$AA_?$AAl?$AAa?$AAs?$AAt?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CA@BJNJFFOA@?$AAc?$AA?9?$AA?$DO?$AAp?$AAr?$AAe?$AAv?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CA@GPMFLNC@?$AAc?$AA?9?$AA?$DO?$AAn?$AAe?$AAx?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DG@MDHCDGLA@?$AAc?$AA?9?$AA?$DO?$AAt?$AAt?$AAl?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA1?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAc?$AA?9?$AA?$DO?$AAt?$AAt?$AAl?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA4?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CO@DLIGFFFB@?$AAP?$AAx?$AA_?$AAC?$AAT?$AAX?$AA_?$AAI?$AAS?$AA_?$AAP?$AAE?$AAR?$AAS?$AAI?$AAS?$AAT?$AAE?$AAD?$AA?$CI?$AAc?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BO@GGFKJEAA@?$AAc?$AA?9?$AA?$DO?$AAr?$AAe?$AAf?$AAc?$AAn?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	_PxState_ReleaseContext
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PxState_ReleaseContext DD imagerel $LN15
	DD	imagerel $LN15+659
	DD	imagerel $unwind$_PxState_ReleaseContext
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PxState_ReleaseContext DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT ??_C@_1CI@OCJHNLEK@?$AA?$CB?$AAp?$AAx?$AA?9?$AA?$DO?$AAc?$AAt?$AAx?$AA_?$AAl?$AAa?$AAs?$AAt?$AA?9?$AA?$DO?$AAn?$AAe?$AAx?$AAt?$AA?$AA@
CONST	SEGMENT
??_C@_1CI@OCJHNLEK@?$AA?$CB?$AAp?$AAx?$AA?9?$AA?$DO?$AAc?$AAt?$AAx?$AA_?$AAl?$AAa?$AAs?$AAt?$AA?9?$AA?$DO?$AAn?$AAe?$AAx?$AAt?$AA?$AA@ DB '!'
	DB	00H, 'p', 00H, 'x', 00H, '-', 00H, '>', 00H, 'c', 00H, 't', 00H
	DB	'x', 00H, '_', 00H, 'l', 00H, 'a', 00H, 's', 00H, 't', 00H, '-'
	DB	00H, '>', 00H, 'n', 00H, 'e', 00H, 'x', 00H, 't', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@MILIFEMM@?$AA?$CB?$AAp?$AAx?$AA?9?$AA?$DO?$AAc?$AAt?$AAx?$AA_?$AAf?$AAi?$AAr?$AAs?$AAt?$AA?9?$AA?$DO?$AAp?$AAr?$AAe?$AAv?$AA?$AA@
CONST	SEGMENT
??_C@_1CK@MILIFEMM@?$AA?$CB?$AAp?$AAx?$AA?9?$AA?$DO?$AAc?$AAt?$AAx?$AA_?$AAf?$AAi?$AAr?$AAs?$AAt?$AA?9?$AA?$DO?$AAp?$AAr?$AAe?$AAv?$AA?$AA@ DB '!'
	DB	00H, 'p', 00H, 'x', 00H, '-', 00H, '>', 00H, 'c', 00H, 't', 00H
	DB	'x', 00H, '_', 00H, 'f', 00H, 'i', 00H, 'r', 00H, 's', 00H, 't'
	DB	00H, '-', 00H, '>', 00H, 'p', 00H, 'r', 00H, 'e', 00H, 'v', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BM@GKJBGAJK@?$AA?$CB?$AAp?$AAx?$AA?9?$AA?$DO?$AAc?$AAt?$AAx?$AA_?$AAl?$AAa?$AAs?$AAt?$AA?$AA@
CONST	SEGMENT
??_C@_1BM@GKJBGAJK@?$AA?$CB?$AAp?$AAx?$AA?9?$AA?$DO?$AAc?$AAt?$AAx?$AA_?$AAl?$AAa?$AAs?$AAt?$AA?$AA@ DB '!'
	DB	00H, 'p', 00H, 'x', 00H, '-', 00H, '>', 00H, 'c', 00H, 't', 00H
	DB	'x', 00H, '_', 00H, 'l', 00H, 'a', 00H, 's', 00H, 't', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1CA@BJNJFFOA@?$AAc?$AA?9?$AA?$DO?$AAp?$AAr?$AAe?$AAv?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
CONST	SEGMENT
??_C@_1CA@BJNJFFOA@?$AAc?$AA?9?$AA?$DO?$AAp?$AAr?$AAe?$AAv?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ DB 'c'
	DB	00H, '-', 00H, '>', 00H, 'p', 00H, 'r', 00H, 'e', 00H, 'v', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'N', 00H, 'U', 00H, 'L'
	DB	00H, 'L', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1CA@GPMFLNC@?$AAc?$AA?9?$AA?$DO?$AAn?$AAe?$AAx?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
CONST	SEGMENT
??_C@_1CA@GPMFLNC@?$AAc?$AA?9?$AA?$DO?$AAn?$AAe?$AAx?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ DB 'c'
	DB	00H, '-', 00H, '>', 00H, 'n', 00H, 'e', 00H, 'x', 00H, 't', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'N', 00H, 'U', 00H, 'L'
	DB	00H, 'L', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1DG@MDHCDGLA@?$AAc?$AA?9?$AA?$DO?$AAt?$AAt?$AAl?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA1?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAc?$AA?9?$AA?$DO?$AAt?$AAt?$AAl?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA4?$AA?$AA@
CONST	SEGMENT
??_C@_1DG@MDHCDGLA@?$AAc?$AA?9?$AA?$DO?$AAt?$AAt?$AAl?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA1?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAc?$AA?9?$AA?$DO?$AAt?$AAt?$AAl?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA4?$AA?$AA@ DB 'c'
	DB	00H, '-', 00H, '>', 00H, 't', 00H, 't', 00H, 'l', 00H, ' ', 00H
	DB	'>', 00H, '=', 00H, ' ', 00H, '1', 00H, ' ', 00H, '&', 00H, '&'
	DB	00H, ' ', 00H, 'c', 00H, '-', 00H, '>', 00H, 't', 00H, 't', 00H
	DB	'l', 00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H, '4', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1CO@DLIGFFFB@?$AAP?$AAx?$AA_?$AAC?$AAT?$AAX?$AA_?$AAI?$AAS?$AA_?$AAP?$AAE?$AAR?$AAS?$AAI?$AAS?$AAT?$AAE?$AAD?$AA?$CI?$AAc?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CO@DLIGFFFB@?$AAP?$AAx?$AA_?$AAC?$AAT?$AAX?$AA_?$AAI?$AAS?$AA_?$AAP?$AAE?$AAR?$AAS?$AAI?$AAS?$AAT?$AAE?$AAD?$AA?$CI?$AAc?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'x', 00H, '_', 00H, 'C', 00H, 'T', 00H, 'X', 00H, '_', 00H
	DB	'I', 00H, 'S', 00H, '_', 00H, 'P', 00H, 'E', 00H, 'R', 00H, 'S'
	DB	00H, 'I', 00H, 'S', 00H, 'T', 00H, 'E', 00H, 'D', 00H, '(', 00H
	DB	'c', 00H, ')', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1BO@GGFKJEAA@?$AAc?$AA?9?$AA?$DO?$AAr?$AAe?$AAf?$AAc?$AAn?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1BO@GGFKJEAA@?$AAc?$AA?9?$AA?$DO?$AAr?$AAe?$AAf?$AAc?$AAn?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@ DB 'c'
	DB	00H, '-', 00H, '>', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'c', 00H
	DB	'n', 00H, 't', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '0'
	DB	00H, 00H, 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PxState_ReleaseContext
_TEXT	SEGMENT
last$ = 32
px$ = 64
c$ = 72
_PxState_ReleaseContext PROC				; COMDAT

; 2573 : {

$LN15:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2574 :     register Context *last;
; 2575 :     assert(c->refcnt == 0);

  0000e	48 8b 44 24 48	 mov	 rax, QWORD PTR c$[rsp]
  00013	8b 80 58 33 00
	00		 mov	 eax, DWORD PTR [rax+13144]
  00019	85 c0		 test	 eax, eax
  0001b	74 1c		 je	 SHORT $LN6@PxState_Re@2
  0001d	41 b8 0f 0a 00
	00		 mov	 r8d, 2575		; 00000a0fH
  00023	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BO@GGFKJEAA@?$AAc?$AA?9?$AA?$DO?$AAr?$AAe?$AAf?$AAc?$AAn?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@
  00031	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00037	33 c0		 xor	 eax, eax
$LN6@PxState_Re@2:

; 2576 :     if (c->persisted_count > 0) {

  00039	48 8b 44 24 48	 mov	 rax, QWORD PTR c$[rsp]
  0003e	83 b8 10 38 00
	00 00		 cmp	 DWORD PTR [rax+14352], 0
  00045	0f 8e 8f 00 00
	00		 jle	 $LN3@PxState_Re@2

; 2577 : 
; 2578 :         assert(Px_CTX_IS_PERSISTED(c));

  0004b	48 8b 44 24 48	 mov	 rax, QWORD PTR c$[rsp]
  00050	8b 80 f8 00 00
	00		 mov	 eax, DWORD PTR [rax+248]
  00056	83 e0 01	 and	 eax, 1
  00059	85 c0		 test	 eax, eax
  0005b	75 1c		 jne	 SHORT $LN7@PxState_Re@2
  0005d	41 b8 12 0a 00
	00		 mov	 r8d, 2578		; 00000a12H
  00063	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0006a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@DLIGFFFB@?$AAP?$AAx?$AA_?$AAC?$AAT?$AAX?$AA_?$AAI?$AAS?$AA_?$AAP?$AAE?$AAR?$AAS?$AAI?$AAS?$AAT?$AAE?$AAD?$AA?$CI?$AAc?$AA?$CJ?$AA?$AA@
  00071	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00077	33 c0		 xor	 eax, eax
$LN7@PxState_Re@2:

; 2579 : 
; 2580 :         InterlockedIncrement(&(px->contexts_persisted));

  00079	48 8b 44 24 40	 mov	 rax, QWORD PTR px$[rsp]
  0007e	48 05 ec 00 00
	00		 add	 rax, 236		; 000000ecH
  00084	f0 ff 00	 lock inc DWORD PTR [rax]

; 2581 :         InterlockedDecrement(&(px->active));

  00087	48 8b 44 24 40	 mov	 rax, QWORD PTR px$[rsp]
  0008c	48 05 f8 00 00
	00		 add	 rax, 248		; 000000f8H
  00092	f0 ff 08	 lock dec DWORD PTR [rax]

; 2582 :         InterlockedDecrement(&(px->contexts_active));

  00095	48 8b 44 24 40	 mov	 rax, QWORD PTR px$[rsp]
  0009a	48 05 e8 00 00
	00		 add	 rax, 232		; 000000e8H
  000a0	f0 ff 08	 lock dec DWORD PTR [rax]

; 2583 : 
; 2584 :         Px_CTXFLAGS(c) &= ~Px_CTXFLAGS_IS_PERSISTED;

  000a3	48 8b 44 24 48	 mov	 rax, QWORD PTR c$[rsp]
  000a8	8b 80 f8 00 00
	00		 mov	 eax, DWORD PTR [rax+248]
  000ae	83 e0 fe	 and	 eax, -2
  000b1	48 8b 4c 24 48	 mov	 rcx, QWORD PTR c$[rsp]
  000b6	89 81 f8 00 00
	00		 mov	 DWORD PTR [rcx+248], eax

; 2585 :         Px_CTXFLAGS(c) |=  Px_CTXFLAGS_WAS_PERSISTED;

  000bc	48 8b 44 24 48	 mov	 rax, QWORD PTR c$[rsp]
  000c1	8b 80 f8 00 00
	00		 mov	 eax, DWORD PTR [rax+248]
  000c7	83 c8 02	 or	 eax, 2
  000ca	48 8b 4c 24 48	 mov	 rcx, QWORD PTR c$[rsp]
  000cf	89 81 f8 00 00
	00		 mov	 DWORD PTR [rcx+248], eax

; 2586 : 
; 2587 :         return;

  000d5	e9 b4 01 00 00	 jmp	 $LN4@PxState_Re@2
$LN3@PxState_Re@2:

; 2588 :     }
; 2589 : 
; 2590 :     assert(c->ttl >= 1 && c->ttl <= 4);

  000da	48 8b 44 24 48	 mov	 rax, QWORD PTR c$[rsp]
  000df	0f bf 80 00 38
	00 00		 movsx	 eax, WORD PTR [rax+14336]
  000e6	83 f8 01	 cmp	 eax, 1
  000e9	7c 11		 jl	 SHORT $LN8@PxState_Re@2
  000eb	48 8b 44 24 48	 mov	 rax, QWORD PTR c$[rsp]
  000f0	0f bf 80 00 38
	00 00		 movsx	 eax, WORD PTR [rax+14336]
  000f7	83 f8 04	 cmp	 eax, 4
  000fa	7e 1c		 jle	 SHORT $LN9@PxState_Re@2
$LN8@PxState_Re@2:
  000fc	41 b8 1e 0a 00
	00		 mov	 r8d, 2590		; 00000a1eH
  00102	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00109	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DG@MDHCDGLA@?$AAc?$AA?9?$AA?$DO?$AAt?$AAt?$AAl?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA1?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAc?$AA?9?$AA?$DO?$AAt?$AAt?$AAl?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA4?$AA?$AA@
  00110	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00116	33 c0		 xor	 eax, eax
$LN9@PxState_Re@2:

; 2591 :     assert(c->next == NULL);

  00118	48 8b 44 24 48	 mov	 rax, QWORD PTR c$[rsp]
  0011d	48 83 b8 10 33
	00 00 00	 cmp	 QWORD PTR [rax+13072], 0
  00125	74 1c		 je	 SHORT $LN10@PxState_Re@2
  00127	41 b8 1f 0a 00
	00		 mov	 r8d, 2591		; 00000a1fH
  0012d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00134	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CA@GPMFLNC@?$AAc?$AA?9?$AA?$DO?$AAn?$AAe?$AAx?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
  0013b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00141	33 c0		 xor	 eax, eax
$LN10@PxState_Re@2:

; 2592 :     assert(c->prev == NULL);

  00143	48 8b 44 24 48	 mov	 rax, QWORD PTR c$[rsp]
  00148	48 83 b8 08 33
	00 00 00	 cmp	 QWORD PTR [rax+13064], 0
  00150	74 1c		 je	 SHORT $LN11@PxState_Re@2
  00152	41 b8 20 0a 00
	00		 mov	 r8d, 2592		; 00000a20H
  00158	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0015f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CA@BJNJFFOA@?$AAc?$AA?9?$AA?$DO?$AAp?$AAr?$AAe?$AAv?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
  00166	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0016c	33 c0		 xor	 eax, eax
$LN11@PxState_Re@2:

; 2593 :     if (!px->ctx_first) {

  0016e	48 8b 44 24 40	 mov	 rax, QWORD PTR px$[rsp]
  00173	48 83 78 78 00	 cmp	 QWORD PTR [rax+120], 0
  00178	75 5f		 jne	 SHORT $LN2@PxState_Re@2

; 2594 :         assert(!px->ctx_last);

  0017a	48 8b 44 24 40	 mov	 rax, QWORD PTR px$[rsp]
  0017f	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  00187	74 1c		 je	 SHORT $LN12@PxState_Re@2
  00189	41 b8 22 0a 00
	00		 mov	 r8d, 2594		; 00000a22H
  0018f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00196	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BM@GKJBGAJK@?$AA?$CB?$AAp?$AAx?$AA?9?$AA?$DO?$AAc?$AAt?$AAx?$AA_?$AAl?$AAa?$AAs?$AAt?$AA?$AA@
  0019d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001a3	33 c0		 xor	 eax, eax
$LN12@PxState_Re@2:

; 2595 :         px->ctx_first = c;

  001a5	48 8b 44 24 40	 mov	 rax, QWORD PTR px$[rsp]
  001aa	48 8b 4c 24 48	 mov	 rcx, QWORD PTR c$[rsp]
  001af	48 89 48 78	 mov	 QWORD PTR [rax+120], rcx

; 2596 :         px->ctx_last = c;

  001b3	48 8b 44 24 40	 mov	 rax, QWORD PTR px$[rsp]
  001b8	48 8b 4c 24 48	 mov	 rcx, QWORD PTR c$[rsp]
  001bd	48 89 88 80 00
	00 00		 mov	 QWORD PTR [rax+128], rcx

; 2597 :         c->next = NULL;

  001c4	48 8b 44 24 48	 mov	 rax, QWORD PTR c$[rsp]
  001c9	48 c7 80 10 33
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+13072], 0

; 2598 :     } else {

  001d4	e9 b5 00 00 00	 jmp	 $LN1@PxState_Re@2
$LN2@PxState_Re@2:

; 2599 :         assert(!px->ctx_first->prev);

  001d9	48 8b 44 24 40	 mov	 rax, QWORD PTR px$[rsp]
  001de	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  001e2	48 83 b8 08 33
	00 00 00	 cmp	 QWORD PTR [rax+13064], 0
  001ea	74 1c		 je	 SHORT $LN13@PxState_Re@2
  001ec	41 b8 27 0a 00
	00		 mov	 r8d, 2599		; 00000a27H
  001f2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  001f9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@MILIFEMM@?$AA?$CB?$AAp?$AAx?$AA?9?$AA?$DO?$AAc?$AAt?$AAx?$AA_?$AAf?$AAi?$AAr?$AAs?$AAt?$AA?9?$AA?$DO?$AAp?$AAr?$AAe?$AAv?$AA?$AA@
  00200	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00206	33 c0		 xor	 eax, eax
$LN13@PxState_Re@2:

; 2600 :         assert(!px->ctx_last->next);

  00208	48 8b 44 24 40	 mov	 rax, QWORD PTR px$[rsp]
  0020d	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  00214	48 83 b8 10 33
	00 00 00	 cmp	 QWORD PTR [rax+13072], 0
  0021c	74 1c		 je	 SHORT $LN14@PxState_Re@2
  0021e	41 b8 28 0a 00
	00		 mov	 r8d, 2600		; 00000a28H
  00224	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0022b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CI@OCJHNLEK@?$AA?$CB?$AAp?$AAx?$AA?9?$AA?$DO?$AAc?$AAt?$AAx?$AA_?$AAl?$AAa?$AAs?$AAt?$AA?9?$AA?$DO?$AAn?$AAe?$AAx?$AAt?$AA?$AA@
  00232	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00238	33 c0		 xor	 eax, eax
$LN14@PxState_Re@2:

; 2601 :         last = px->ctx_last;

  0023a	48 8b 44 24 40	 mov	 rax, QWORD PTR px$[rsp]
  0023f	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  00246	48 89 44 24 20	 mov	 QWORD PTR last$[rsp], rax

; 2602 :         last->next = c;

  0024b	48 8b 44 24 20	 mov	 rax, QWORD PTR last$[rsp]
  00250	48 8b 4c 24 48	 mov	 rcx, QWORD PTR c$[rsp]
  00255	48 89 88 10 33
	00 00		 mov	 QWORD PTR [rax+13072], rcx

; 2603 :         c->prev = last;

  0025c	48 8b 44 24 48	 mov	 rax, QWORD PTR c$[rsp]
  00261	48 8b 4c 24 20	 mov	 rcx, QWORD PTR last$[rsp]
  00266	48 89 88 08 33
	00 00		 mov	 QWORD PTR [rax+13064], rcx

; 2604 :         c->next = NULL;

  0026d	48 8b 44 24 48	 mov	 rax, QWORD PTR c$[rsp]
  00272	48 c7 80 10 33
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+13072], 0

; 2605 :         px->ctx_last = c;

  0027d	48 8b 44 24 40	 mov	 rax, QWORD PTR px$[rsp]
  00282	48 8b 4c 24 48	 mov	 rcx, QWORD PTR c$[rsp]
  00287	48 89 88 80 00
	00 00		 mov	 QWORD PTR [rax+128], rcx
$LN1@PxState_Re@2:
$LN4@PxState_Re@2:

; 2606 :     }
; 2607 : }

  0028e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00292	c3		 ret	 0
_PxState_ReleaseContext ENDP
_TEXT	ENDS
PUBLIC	??_C@_1BO@INGNCPAD@?$AAc?$AA?9?$AA?$DO?$AAr?$AAe?$AAf?$AAc?$AAn?$AAt?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	Px_DECCTX
;	COMDAT pdata
pdata	SEGMENT
$pdata$Px_DECCTX DD imagerel $LN6
	DD	imagerel $LN6+176
	DD	imagerel $unwind$Px_DECCTX
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Px_DECCTX DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_1BO@INGNCPAD@?$AAc?$AA?9?$AA?$DO?$AAr?$AAe?$AAf?$AAc?$AAn?$AAt?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1BO@INGNCPAD@?$AAc?$AA?9?$AA?$DO?$AAr?$AAe?$AAf?$AAc?$AAn?$AAt?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@ DB 'c'
	DB	00H, '-', 00H, '>', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'c', 00H
	DB	'n', 00H, 't', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0'
	DB	00H, 00H, 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT Px_DECCTX
_TEXT	SEGMENT
px$ = 32
c$ = 64
Px_DECCTX PROC						; COMDAT

; 2612 : {

$LN6:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2613 :     register PxState *px = c->px;

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR c$[rsp]
  0000e	48 8b 80 d8 00
	00 00		 mov	 rax, QWORD PTR [rax+216]
  00015	48 89 44 24 20	 mov	 QWORD PTR px$[rsp], rax

; 2614 :     InterlockedDecrement(&(c->refcnt));

  0001a	48 8b 44 24 40	 mov	 rax, QWORD PTR c$[rsp]
  0001f	48 05 58 33 00
	00		 add	 rax, 13144		; 00003358H
  00025	f0 ff 08	 lock dec DWORD PTR [rax]

; 2615 :     assert(c->refcnt >= 0);

  00028	48 8b 44 24 40	 mov	 rax, QWORD PTR c$[rsp]
  0002d	8b 80 58 33 00
	00		 mov	 eax, DWORD PTR [rax+13144]
  00033	85 c0		 test	 eax, eax
  00035	7d 1c		 jge	 SHORT $LN4@Px_DECCTX
  00037	41 b8 37 0a 00
	00		 mov	 r8d, 2615		; 00000a37H
  0003d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00044	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BO@INGNCPAD@?$AAc?$AA?9?$AA?$DO?$AAr?$AAe?$AAf?$AAc?$AAn?$AAt?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@
  0004b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00051	33 c0		 xor	 eax, eax
$LN4@Px_DECCTX:

; 2616 : 
; 2617 :     if (c->refcnt > 0)

  00053	48 8b 44 24 40	 mov	 rax, QWORD PTR c$[rsp]
  00058	8b 80 58 33 00
	00		 mov	 eax, DWORD PTR [rax+13144]
  0005e	85 c0		 test	 eax, eax
  00060	7e 0d		 jle	 SHORT $LN1@Px_DECCTX

; 2618 :         return c->refcnt;

  00062	48 8b 44 24 40	 mov	 rax, QWORD PTR c$[rsp]
  00067	8b 80 58 33 00
	00		 mov	 eax, DWORD PTR [rax+13144]
  0006d	eb 3c		 jmp	 SHORT $LN2@Px_DECCTX
$LN1@Px_DECCTX:

; 2619 : 
; 2620 :     assert(c->refcnt == 0);

  0006f	48 8b 44 24 40	 mov	 rax, QWORD PTR c$[rsp]
  00074	8b 80 58 33 00
	00		 mov	 eax, DWORD PTR [rax+13144]
  0007a	85 c0		 test	 eax, eax
  0007c	74 1c		 je	 SHORT $LN5@Px_DECCTX
  0007e	41 b8 3c 0a 00
	00		 mov	 r8d, 2620		; 00000a3cH
  00084	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0008b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BO@GGFKJEAA@?$AAc?$AA?9?$AA?$DO?$AAr?$AAe?$AAf?$AAc?$AAn?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@
  00092	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00098	33 c0		 xor	 eax, eax
$LN5@Px_DECCTX:

; 2621 :     _PxState_ReleaseContext(px, c);

  0009a	48 8b 54 24 40	 mov	 rdx, QWORD PTR c$[rsp]
  0009f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR px$[rsp]
  000a4	e8 00 00 00 00	 call	 _PxState_ReleaseContext

; 2622 :     return 0;

  000a9	33 c0		 xor	 eax, eax
$LN2@Px_DECCTX:

; 2623 : }

  000ab	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000af	c3		 ret	 0
Px_DECCTX ENDP
_TEXT	ENDS
PUBLIC	??_C@_1FA@NILNEEOO@?$AAP?$AAx?$AAL?$AAi?$AAs?$AAt?$AA_?$AAQ?$AAu?$AAe?$AAr?$AAy?$AAD?$AAe?$AAp?$AAt?$AAh?$AA?$CI?$AAp?$AAx?$AA?9?$AA?$DO?$AAi?$AAo?$AA_?$AAf?$AAr?$AAe?$AAe?$AA?$CJ?$AA?5?$AA?$DN@ ; `string'
PUBLIC	??_C@_1GA@NBOAEOCG@?$AAP?$AAx?$AA_?$AAP?$AAT?$AAR?$AA?$CI?$AAb?$AAu?$AAf?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAP?$AAx?$AA_?$AAA?$AAL?$AAI?$AAG?$AAN?$AA?$CI?$AAb?$AAu?$AAf?$AA?0?$AA?5?$AAP?$AAx?$AA_@ ; `string'
PUBLIC	??_C@_1FM@OFCNMBNI@?$AAP?$AAx?$AA_?$AAP?$AAT?$AAR?$AA?$CI?$AAi?$AAo?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAP?$AAx?$AA_?$AAA?$AAL?$AAI?$AAG?$AAN?$AA?$CI?$AAi?$AAo?$AA?0?$AA?5?$AAP?$AAx?$AA_?$AAM?$AAE@ ; `string'
PUBLIC	??_C@_15OLJENLOO@?$AAp?$AAx?$AA?$AA@		; `string'
PUBLIC	_PxState_AllocIOBufs
EXTRN	__imp_HeapDestroy:PROC
EXTRN	PxList_QueryDepth:PROC
EXTRN	PxList_Push:PROC
EXTRN	__imp_HeapCreate:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PxState_AllocIOBufs DD imagerel $LN19
	DD	imagerel $LN19+762
	DD	imagerel $unwind$_PxState_AllocIOBufs
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PxState_AllocIOBufs DD 021b01H
	DD	011011bH
xdata	ENDS
;	COMDAT ??_C@_1FA@NILNEEOO@?$AAP?$AAx?$AAL?$AAi?$AAs?$AAt?$AA_?$AAQ?$AAu?$AAe?$AAr?$AAy?$AAD?$AAe?$AAp?$AAt?$AAh?$AA?$CI?$AAp?$AAx?$AA?9?$AA?$DO?$AAi?$AAo?$AA_?$AAf?$AAr?$AAe?$AAe?$AA?$CJ?$AA?5?$AA?$DN@
CONST	SEGMENT
??_C@_1FA@NILNEEOO@?$AAP?$AAx?$AAL?$AAi?$AAs?$AAt?$AA_?$AAQ?$AAu?$AAe?$AAr?$AAy?$AAD?$AAe?$AAp?$AAt?$AAh?$AA?$CI?$AAp?$AAx?$AA?9?$AA?$DO?$AAi?$AAo?$AA_?$AAf?$AAr?$AAe?$AAe?$AA?$CJ?$AA?5?$AA?$DN@ DB 'P'
	DB	00H, 'x', 00H, 'L', 00H, 'i', 00H, 's', 00H, 't', 00H, '_', 00H
	DB	'Q', 00H, 'u', 00H, 'e', 00H, 'r', 00H, 'y', 00H, 'D', 00H, 'e'
	DB	00H, 'p', 00H, 't', 00H, 'h', 00H, '(', 00H, 'p', 00H, 'x', 00H
	DB	'-', 00H, '>', 00H, 'i', 00H, 'o', 00H, '_', 00H, 'f', 00H, 'r'
	DB	00H, 'e', 00H, 'e', 00H, ')', 00H, ' ', 00H, '=', 00H, '=', 00H
	DB	' ', 00H, 'n', 00H, 'b', 00H, 'u', 00H, 'f', 00H, 's', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1GA@NBOAEOCG@?$AAP?$AAx?$AA_?$AAP?$AAT?$AAR?$AA?$CI?$AAb?$AAu?$AAf?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAP?$AAx?$AA_?$AAA?$AAL?$AAI?$AAG?$AAN?$AA?$CI?$AAb?$AAu?$AAf?$AA?0?$AA?5?$AAP?$AAx?$AA_@
CONST	SEGMENT
??_C@_1GA@NBOAEOCG@?$AAP?$AAx?$AA_?$AAP?$AAT?$AAR?$AA?$CI?$AAb?$AAu?$AAf?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAP?$AAx?$AA_?$AAA?$AAL?$AAI?$AAG?$AAN?$AA?$CI?$AAb?$AAu?$AAf?$AA?0?$AA?5?$AAP?$AAx?$AA_@ DB 'P'
	DB	00H, 'x', 00H, '_', 00H, 'P', 00H, 'T', 00H, 'R', 00H, '(', 00H
	DB	'b', 00H, 'u', 00H, 'f', 00H, ')', 00H, ' ', 00H, '=', 00H, '='
	DB	00H, ' ', 00H, 'P', 00H, 'x', 00H, '_', 00H, 'A', 00H, 'L', 00H
	DB	'I', 00H, 'G', 00H, 'N', 00H, '(', 00H, 'b', 00H, 'u', 00H, 'f'
	DB	00H, ',', 00H, ' ', 00H, 'P', 00H, 'x', 00H, '_', 00H, 'M', 00H
	DB	'E', 00H, 'M', 00H, '_', 00H, 'A', 00H, 'L', 00H, 'I', 00H, 'G'
	DB	00H, 'N', 00H, '_', 00H, 'S', 00H, 'I', 00H, 'Z', 00H, 'E', 00H
	DB	')', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1FM@OFCNMBNI@?$AAP?$AAx?$AA_?$AAP?$AAT?$AAR?$AA?$CI?$AAi?$AAo?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAP?$AAx?$AA_?$AAA?$AAL?$AAI?$AAG?$AAN?$AA?$CI?$AAi?$AAo?$AA?0?$AA?5?$AAP?$AAx?$AA_?$AAM?$AAE@
CONST	SEGMENT
??_C@_1FM@OFCNMBNI@?$AAP?$AAx?$AA_?$AAP?$AAT?$AAR?$AA?$CI?$AAi?$AAo?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAP?$AAx?$AA_?$AAA?$AAL?$AAI?$AAG?$AAN?$AA?$CI?$AAi?$AAo?$AA?0?$AA?5?$AAP?$AAx?$AA_?$AAM?$AAE@ DB 'P'
	DB	00H, 'x', 00H, '_', 00H, 'P', 00H, 'T', 00H, 'R', 00H, '(', 00H
	DB	'i', 00H, 'o', 00H, ')', 00H, ' ', 00H, '=', 00H, '=', 00H, ' '
	DB	00H, 'P', 00H, 'x', 00H, '_', 00H, 'A', 00H, 'L', 00H, 'I', 00H
	DB	'G', 00H, 'N', 00H, '(', 00H, 'i', 00H, 'o', 00H, ',', 00H, ' '
	DB	00H, 'P', 00H, 'x', 00H, '_', 00H, 'M', 00H, 'E', 00H, 'M', 00H
	DB	'_', 00H, 'A', 00H, 'L', 00H, 'I', 00H, 'G', 00H, 'N', 00H, '_'
	DB	00H, 'S', 00H, 'I', 00H, 'Z', 00H, 'E', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_15OLJENLOO@?$AAp?$AAx?$AA?$AA@
CONST	SEGMENT
??_C@_15OLJENLOO@?$AAp?$AAx?$AA?$AA@ DB 'p', 00H, 'x', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PxState_AllocIOBufs
_TEXT	SEGMENT
io$ = 32
iosize$ = 40
i$ = 48
all_io$ = 56
nbufs$ = 64
io_first$ = 72
bufsize$ = 80
buf$ = 88
heapsize$ = 96
buf_first$ = 104
result$ = 112
all_bufs$ = 120
px$ = 144
c$ = 152
count$ = 160
size$ = 168
_PxState_AllocIOBufs PROC				; COMDAT

; 2627 : {

$LN19:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 2628 :     size_t   nbufs;
; 2629 :     size_t   bufsize;
; 2630 :     size_t   heapsize;
; 2631 :     size_t   all_io;
; 2632 :     size_t   all_bufs;
; 2633 :     size_t   iosize;
; 2634 :     void    *io_first;
; 2635 :     void    *buf_first;
; 2636 :     int      i;
; 2637 :     int      result = 0;

  0001b	c7 44 24 70 00
	00 00 00	 mov	 DWORD PTR result$[rsp], 0

; 2638 :     PxIO    *io;
; 2639 :     char    *buf;
; 2640 : 
; 2641 :     assert(px);

  00023	48 83 bc 24 90
	00 00 00 00	 cmp	 QWORD PTR px$[rsp], 0
  0002c	75 1c		 jne	 SHORT $LN14@PxState_Al
  0002e	41 b8 51 0a 00
	00		 mov	 r8d, 2641		; 00000a51H
  00034	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0003b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_15OLJENLOO@?$AAp?$AAx?$AA?$AA@
  00042	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00048	33 c0		 xor	 eax, eax
$LN14@PxState_Al:

; 2642 : 
; 2643 :     nbufs = count;

  0004a	48 63 84 24 a0
	00 00 00	 movsxd	 rax, DWORD PTR count$[rsp]
  00052	48 89 44 24 40	 mov	 QWORD PTR nbufs$[rsp], rax

; 2644 :     bufsize = size;

  00057	48 63 84 24 a8
	00 00 00	 movsxd	 rax, DWORD PTR size$[rsp]
  0005f	48 89 44 24 50	 mov	 QWORD PTR bufsize$[rsp], rax

; 2645 :     iosize = Px_MEM_ALIGN(sizeof(PxIO));

  00064	48 c7 44 24 28
	50 00 00 00	 mov	 QWORD PTR iosize$[rsp], 80 ; 00000050H

; 2646 : 
; 2647 :     all_io = nbufs * iosize;

  0006d	48 8b 44 24 40	 mov	 rax, QWORD PTR nbufs$[rsp]
  00072	48 0f af 44 24
	28		 imul	 rax, QWORD PTR iosize$[rsp]
  00078	48 89 44 24 38	 mov	 QWORD PTR all_io$[rsp], rax

; 2648 :     all_bufs = nbufs * bufsize;

  0007d	48 8b 44 24 40	 mov	 rax, QWORD PTR nbufs$[rsp]
  00082	48 0f af 44 24
	50		 imul	 rax, QWORD PTR bufsize$[rsp]
  00088	48 89 44 24 78	 mov	 QWORD PTR all_bufs$[rsp], rax

; 2649 : 
; 2650 :     heapsize = all_io + all_bufs;

  0008d	48 8b 44 24 78	 mov	 rax, QWORD PTR all_bufs$[rsp]
  00092	48 8b 4c 24 38	 mov	 rcx, QWORD PTR all_io$[rsp]
  00097	48 03 c8	 add	 rcx, rax
  0009a	48 8b c1	 mov	 rax, rcx
  0009d	48 89 44 24 60	 mov	 QWORD PTR heapsize$[rsp], rax

; 2651 : 
; 2652 :     c->heap_handle = HeapCreate(HEAP_NO_SERIALIZE, heapsize, 0);

  000a2	45 33 c0	 xor	 r8d, r8d
  000a5	48 8b 54 24 60	 mov	 rdx, QWORD PTR heapsize$[rsp]
  000aa	b9 01 00 00 00	 mov	 ecx, 1
  000af	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_HeapCreate
  000b5	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  000bd	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 2653 :     if (!c->heap_handle) {

  000c1	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  000c9	48 83 78 10 00	 cmp	 QWORD PTR [rax+16], 0
  000ce	75 0c		 jne	 SHORT $LN11@PxState_Al

; 2654 :         PyErr_SetFromWindowsErr(0);

  000d0	33 c9		 xor	 ecx, ecx
  000d2	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr

; 2655 :         goto done;

  000d7	e9 e5 01 00 00	 jmp	 $done$128313
$LN11@PxState_Al:

; 2656 :     }
; 2657 : 
; 2658 :     if (!_PyHeap_Init(c, heapsize))

  000dc	48 8b 54 24 60	 mov	 rdx, QWORD PTR heapsize$[rsp]
  000e1	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  000e9	e8 00 00 00 00	 call	 _PyHeap_Init
  000ee	48 85 c0	 test	 rax, rax
  000f1	75 05		 jne	 SHORT $LN10@PxState_Al

; 2659 :         goto free_heap;

  000f3	e9 b7 01 00 00	 jmp	 $free_heap$128315
$LN10@PxState_Al:

; 2660 : 
; 2661 :     io_first = _PyHeap_Malloc(c, all_io, Px_MEM_ALIGN_SIZE, 1);

  000f8	41 b9 01 00 00
	00		 mov	 r9d, 1
  000fe	41 b8 10 00 00
	00		 mov	 r8d, 16
  00104	48 8b 54 24 38	 mov	 rdx, QWORD PTR all_io$[rsp]
  00109	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  00111	e8 00 00 00 00	 call	 _PyHeap_Malloc
  00116	48 89 44 24 48	 mov	 QWORD PTR io_first$[rsp], rax

; 2662 :     if (!io_first)

  0011b	48 83 7c 24 48
	00		 cmp	 QWORD PTR io_first$[rsp], 0
  00121	75 05		 jne	 SHORT $LN9@PxState_Al

; 2663 :         goto free_heap;

  00123	e9 87 01 00 00	 jmp	 $free_heap$128315
$LN9@PxState_Al:
$LN8@PxState_Al:

; 2664 : 
; 2665 :     do {
; 2666 :         buf_first = _PyHeap_Malloc(c, all_bufs, Px_MEM_ALIGN_SIZE, 1);

  00128	41 b9 01 00 00
	00		 mov	 r9d, 1
  0012e	41 b8 10 00 00
	00		 mov	 r8d, 16
  00134	48 8b 54 24 78	 mov	 rdx, QWORD PTR all_bufs$[rsp]
  00139	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  00141	e8 00 00 00 00	 call	 _PyHeap_Malloc
  00146	48 89 44 24 68	 mov	 QWORD PTR buf_first$[rsp], rax

; 2667 :         if (buf_first)

  0014b	48 83 7c 24 68
	00		 cmp	 QWORD PTR buf_first$[rsp], 0
  00151	74 02		 je	 SHORT $LN5@PxState_Al

; 2668 :             break;

  00153	eb 2a		 jmp	 SHORT $LN6@PxState_Al
$LN5@PxState_Al:

; 2669 : 
; 2670 :         all_bufs -= bufsize;

  00155	48 8b 44 24 50	 mov	 rax, QWORD PTR bufsize$[rsp]
  0015a	48 8b 4c 24 78	 mov	 rcx, QWORD PTR all_bufs$[rsp]
  0015f	48 2b c8	 sub	 rcx, rax
  00162	48 8b c1	 mov	 rax, rcx
  00165	48 89 44 24 78	 mov	 QWORD PTR all_bufs$[rsp], rax

; 2671 :         nbufs--;

  0016a	48 8b 44 24 40	 mov	 rax, QWORD PTR nbufs$[rsp]
  0016f	48 ff c8	 dec	 rax
  00172	48 89 44 24 40	 mov	 QWORD PTR nbufs$[rsp], rax

; 2672 : 
; 2673 :     } while (all_bufs > 0);

  00177	48 83 7c 24 78
	00		 cmp	 QWORD PTR all_bufs$[rsp], 0
  0017d	77 a9		 ja	 SHORT $LN8@PxState_Al
$LN6@PxState_Al:

; 2674 : 
; 2675 :     for (i = 0; i < nbufs; i++) {

  0017f	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00187	eb 0a		 jmp	 SHORT $LN4@PxState_Al
$LN3@PxState_Al:
  00189	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  0018d	ff c0		 inc	 eax
  0018f	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN4@PxState_Al:
  00193	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$[rsp]
  00198	48 3b 44 24 40	 cmp	 rax, QWORD PTR nbufs$[rsp]
  0019d	0f 83 cb 00 00
	00		 jae	 $LN2@PxState_Al

; 2676 :         io =  (PxIO *)Px_PTR_ADD(io_first,  (i * iosize));

  001a3	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$[rsp]
  001a8	48 0f af 44 24
	28		 imul	 rax, QWORD PTR iosize$[rsp]
  001ae	48 8b 4c 24 48	 mov	 rcx, QWORD PTR io_first$[rsp]
  001b3	48 03 c8	 add	 rcx, rax
  001b6	48 8b c1	 mov	 rax, rcx
  001b9	48 89 44 24 20	 mov	 QWORD PTR io$[rsp], rax

; 2677 :         buf = (char *)Px_PTR_ADD(buf_first, (i * bufsize));

  001be	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$[rsp]
  001c3	48 0f af 44 24
	50		 imul	 rax, QWORD PTR bufsize$[rsp]
  001c9	48 8b 4c 24 68	 mov	 rcx, QWORD PTR buf_first$[rsp]
  001ce	48 03 c8	 add	 rcx, rax
  001d1	48 8b c1	 mov	 rax, rcx
  001d4	48 89 44 24 58	 mov	 QWORD PTR buf$[rsp], rax

; 2678 : 
; 2679 :         assert(Px_PTR(io) ==  Px_ALIGN(io,  Px_MEM_ALIGN_SIZE));

  001d9	48 8b 44 24 20	 mov	 rax, QWORD PTR io$[rsp]
  001de	48 83 c0 0f	 add	 rax, 15
  001e2	48 83 e0 f0	 and	 rax, -16
  001e6	48 39 44 24 20	 cmp	 QWORD PTR io$[rsp], rax
  001eb	74 1c		 je	 SHORT $LN15@PxState_Al
  001ed	41 b8 77 0a 00
	00		 mov	 r8d, 2679		; 00000a77H
  001f3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  001fa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FM@OFCNMBNI@?$AAP?$AAx?$AA_?$AAP?$AAT?$AAR?$AA?$CI?$AAi?$AAo?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAP?$AAx?$AA_?$AAA?$AAL?$AAI?$AAG?$AAN?$AA?$CI?$AAi?$AAo?$AA?0?$AA?5?$AAP?$AAx?$AA_?$AAM?$AAE@
  00201	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00207	33 c0		 xor	 eax, eax
$LN15@PxState_Al:

; 2680 :         assert(Px_PTR(buf) == Px_ALIGN(buf, Px_MEM_ALIGN_SIZE));

  00209	48 8b 44 24 58	 mov	 rax, QWORD PTR buf$[rsp]
  0020e	48 83 c0 0f	 add	 rax, 15
  00212	48 83 e0 f0	 and	 rax, -16
  00216	48 39 44 24 58	 cmp	 QWORD PTR buf$[rsp], rax
  0021b	74 1c		 je	 SHORT $LN16@PxState_Al
  0021d	41 b8 78 0a 00
	00		 mov	 r8d, 2680		; 00000a78H
  00223	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0022a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1GA@NBOAEOCG@?$AAP?$AAx?$AA_?$AAP?$AAT?$AAR?$AA?$CI?$AAb?$AAu?$AAf?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAP?$AAx?$AA_?$AAA?$AAL?$AAI?$AAG?$AAN?$AA?$CI?$AAb?$AAu?$AAf?$AA?0?$AA?5?$AAP?$AAx?$AA_@
  00231	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00237	33 c0		 xor	 eax, eax
$LN16@PxState_Al:

; 2681 : 
; 2682 :         io->size = (int)bufsize;

  00239	48 8b 44 24 20	 mov	 rax, QWORD PTR io$[rsp]
  0023e	8b 4c 24 50	 mov	 ecx, DWORD PTR bufsize$[rsp]
  00242	89 48 38	 mov	 DWORD PTR [rax+56], ecx

; 2683 :         io->buf  = buf;

  00245	48 8b 44 24 20	 mov	 rax, QWORD PTR io$[rsp]
  0024a	48 8b 4c 24 58	 mov	 rcx, QWORD PTR buf$[rsp]
  0024f	48 89 48 48	 mov	 QWORD PTR [rax+72], rcx

; 2684 : 
; 2685 :         PxList_Push(px->io_free, E2I(io));

  00253	48 8b 54 24 20	 mov	 rdx, QWORD PTR io$[rsp]
  00258	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR px$[rsp]
  00260	48 8b 48 48	 mov	 rcx, QWORD PTR [rax+72]
  00264	e8 00 00 00 00	 call	 PxList_Push

; 2686 :     }

  00269	e9 1b ff ff ff	 jmp	 $LN3@PxState_Al
$LN2@PxState_Al:

; 2687 : 
; 2688 :     assert(PxList_QueryDepth(px->io_free) == nbufs);

  0026e	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR px$[rsp]
  00276	48 8b 48 48	 mov	 rcx, QWORD PTR [rax+72]
  0027a	e8 00 00 00 00	 call	 PxList_QueryDepth
  0027f	0f b7 c0	 movzx	 eax, ax
  00282	48 3b 44 24 40	 cmp	 rax, QWORD PTR nbufs$[rsp]
  00287	74 1c		 je	 SHORT $LN17@PxState_Al
  00289	41 b8 80 0a 00
	00		 mov	 r8d, 2688		; 00000a80H
  0028f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00296	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FA@NILNEEOO@?$AAP?$AAx?$AAL?$AAi?$AAs?$AAt?$AA_?$AAQ?$AAu?$AAe?$AAr?$AAy?$AAD?$AAe?$AAp?$AAt?$AAh?$AA?$CI?$AAp?$AAx?$AA?9?$AA?$DO?$AAi?$AAo?$AA_?$AAf?$AAr?$AAe?$AAe?$AA?$CJ?$AA?5?$AA?$DN@
  0029d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  002a3	33 c0		 xor	 eax, eax
$LN17@PxState_Al:

; 2689 : 
; 2690 :     result = 1;

  002a5	c7 44 24 70 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1

; 2691 :     goto done;

  002ad	eb 12		 jmp	 SHORT $done$128313
$free_heap$128315:

; 2692 : 
; 2693 : free_heap:
; 2694 :     HeapDestroy(c->heap_handle);

  002af	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  002b7	48 8b 48 10	 mov	 rcx, QWORD PTR [rax+16]
  002bb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_HeapDestroy
$done$128313:

; 2695 : 
; 2696 : done:
; 2697 :     if (!result)

  002c1	83 7c 24 70 00	 cmp	 DWORD PTR result$[rsp], 0
  002c6	75 26		 jne	 SHORT $LN1@PxState_Al

; 2698 :         assert(PyErr_Occurred());

  002c8	e8 00 00 00 00	 call	 PyErr_Occurred
  002cd	48 85 c0	 test	 rax, rax
  002d0	75 1c		 jne	 SHORT $LN18@PxState_Al
  002d2	41 b8 8a 0a 00
	00		 mov	 r8d, 2698		; 00000a8aH
  002d8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  002df	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CC@DNBCFJEA@?$AAP?$AAy?$AAE?$AAr?$AAr?$AA_?$AAO?$AAc?$AAc?$AAu?$AAr?$AAr?$AAe?$AAd?$AA?$CI?$AA?$CJ?$AA?$AA@
  002e6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  002ec	33 c0		 xor	 eax, eax
$LN18@PxState_Al:
$LN1@PxState_Al:

; 2699 : 
; 2700 :     return result;

  002ee	8b 44 24 70	 mov	 eax, DWORD PTR result$[rsp]

; 2701 : }

  002f2	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  002f9	c3		 ret	 0
_PxState_AllocIOBufs ENDP
_TEXT	ENDS
PUBLIC	_PyParallel_CreatedNewThreadState
EXTRN	PxList_FreeListHead:PROC
EXTRN	__imp_InitializeCriticalSectionAndSpinCount:PROC
EXTRN	PxList_New:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyParallel_CreatedNewThreadState DD imagerel $LN15
	DD	imagerel $LN15+706
	DD	imagerel $unwind$_PyParallel_CreatedNewThreadState
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyParallel_CreatedNewThreadState DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _PyParallel_CreatedNewThreadState
_TEXT	SEGMENT
px$ = 32
tstate$ = 64
_PyParallel_CreatedNewThreadState PROC			; COMDAT

; 2705 : {

$LN15:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2706 :     PxState *px;
; 2707 : 
; 2708 :     TSTATE = tstate;

  00009	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:TSTATE
  0000e	8b c0		 mov	 eax, eax
  00010	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00016	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0001f	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  00023	48 8b 54 24 40	 mov	 rdx, QWORD PTR tstate$[rsp]
  00028	48 89 14 08	 mov	 QWORD PTR [rax+rcx], rdx

; 2709 : 
; 2710 :     px = (PxState *)malloc(sizeof(PxState));

  0002c	b9 e8 01 00 00	 mov	 ecx, 488		; 000001e8H
  00031	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00037	48 89 44 24 20	 mov	 QWORD PTR px$[rsp], rax

; 2711 :     if (!px)

  0003c	48 83 7c 24 20
	00		 cmp	 QWORD PTR px$[rsp], 0
  00042	75 0a		 jne	 SHORT $LN12@PyParallel@13

; 2712 :         return PyErr_NoMemory();

  00044	e8 00 00 00 00	 call	 PyErr_NoMemory
  00049	e9 6f 02 00 00	 jmp	 $LN13@PyParallel@13
$LN12@PyParallel@13:

; 2713 : 
; 2714 :     memset((void *)px, 0, sizeof(PxState));

  0004e	41 b8 e8 01 00
	00		 mov	 r8d, 488		; 000001e8H
  00054	33 d2		 xor	 edx, edx
  00056	48 8b 4c 24 20	 mov	 rcx, QWORD PTR px$[rsp]
  0005b	e8 00 00 00 00	 call	 memset

; 2715 : 
; 2716 :     px->errors = PxList_New();

  00060	e8 00 00 00 00	 call	 PxList_New
  00065	48 8b 4c 24 20	 mov	 rcx, QWORD PTR px$[rsp]
  0006a	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 2717 :     if (!px->errors)

  0006e	48 8b 44 24 20	 mov	 rax, QWORD PTR px$[rsp]
  00073	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00078	75 05		 jne	 SHORT $LN11@PyParallel@13

; 2718 :         goto free_px;

  0007a	e9 16 02 00 00	 jmp	 $free_px$128366
$LN11@PyParallel@13:

; 2719 : 
; 2720 :     px->completed_callbacks = PxList_New();

  0007f	e8 00 00 00 00	 call	 PxList_New
  00084	48 8b 4c 24 20	 mov	 rcx, QWORD PTR px$[rsp]
  00089	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 2721 :     if (!px->completed_callbacks)

  0008d	48 8b 44 24 20	 mov	 rax, QWORD PTR px$[rsp]
  00092	48 83 78 10 00	 cmp	 QWORD PTR [rax+16], 0
  00097	75 05		 jne	 SHORT $LN10@PyParallel@13

; 2722 :         goto free_errors;

  00099	e9 e9 01 00 00	 jmp	 $free_errors$128368
$LN10@PyParallel@13:

; 2723 : 
; 2724 :     px->completed_errbacks = PxList_New();

  0009e	e8 00 00 00 00	 call	 PxList_New
  000a3	48 8b 4c 24 20	 mov	 rcx, QWORD PTR px$[rsp]
  000a8	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax

; 2725 :     if (!px->completed_errbacks)

  000ac	48 8b 44 24 20	 mov	 rax, QWORD PTR px$[rsp]
  000b1	48 83 78 18 00	 cmp	 QWORD PTR [rax+24], 0
  000b6	75 05		 jne	 SHORT $LN9@PyParallel@13

; 2726 :         goto free_completed_callbacks;

  000b8	e9 bc 01 00 00	 jmp	 $free_completed_callbacks$128370
$LN9@PyParallel@13:

; 2727 : 
; 2728 :     px->incoming = PxList_New();

  000bd	e8 00 00 00 00	 call	 PxList_New
  000c2	48 8b 4c 24 20	 mov	 rcx, QWORD PTR px$[rsp]
  000c7	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 2729 :     if (!px->incoming)

  000cb	48 8b 44 24 20	 mov	 rax, QWORD PTR px$[rsp]
  000d0	48 83 78 20 00	 cmp	 QWORD PTR [rax+32], 0
  000d5	75 05		 jne	 SHORT $LN8@PyParallel@13

; 2730 :         goto free_completed_errbacks;

  000d7	e9 8f 01 00 00	 jmp	 $free_completed_errbacks$128372
$LN8@PyParallel@13:

; 2731 : 
; 2732 :     px->finished = PxList_New();

  000dc	e8 00 00 00 00	 call	 PxList_New
  000e1	48 8b 4c 24 20	 mov	 rcx, QWORD PTR px$[rsp]
  000e6	48 89 41 28	 mov	 QWORD PTR [rcx+40], rax

; 2733 :     if (!px->finished)

  000ea	48 8b 44 24 20	 mov	 rax, QWORD PTR px$[rsp]
  000ef	48 83 78 28 00	 cmp	 QWORD PTR [rax+40], 0
  000f4	75 05		 jne	 SHORT $LN7@PyParallel@13

; 2734 :         goto free_incoming;

  000f6	e9 62 01 00 00	 jmp	 $free_incoming$128374
$LN7@PyParallel@13:

; 2735 : 
; 2736 :     px->finished_sockets = PxList_New();

  000fb	e8 00 00 00 00	 call	 PxList_New
  00100	48 8b 4c 24 20	 mov	 rcx, QWORD PTR px$[rsp]
  00105	48 89 41 30	 mov	 QWORD PTR [rcx+48], rax

; 2737 :     if (!px->finished_sockets)

  00109	48 8b 44 24 20	 mov	 rax, QWORD PTR px$[rsp]
  0010e	48 83 78 30 00	 cmp	 QWORD PTR [rax+48], 0
  00113	75 05		 jne	 SHORT $LN6@PyParallel@13

; 2738 :         goto free_finished;

  00115	e9 35 01 00 00	 jmp	 $free_finished$128376
$LN6@PyParallel@13:

; 2739 : 
; 2740 :     px->io_free = PxList_New();

  0011a	e8 00 00 00 00	 call	 PxList_New
  0011f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR px$[rsp]
  00124	48 89 41 48	 mov	 QWORD PTR [rcx+72], rax

; 2741 :     if (!px->io_free)

  00128	48 8b 44 24 20	 mov	 rax, QWORD PTR px$[rsp]
  0012d	48 83 78 48 00	 cmp	 QWORD PTR [rax+72], 0
  00132	75 05		 jne	 SHORT $LN5@PyParallel@13

; 2742 :         goto free_finished_sockets;

  00134	e9 08 01 00 00	 jmp	 $free_finished_sockets$128378
$LN5@PyParallel@13:

; 2743 : 
; 2744 :     px->work_ready = PxList_New();

  00139	e8 00 00 00 00	 call	 PxList_New
  0013e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR px$[rsp]
  00143	48 89 41 38	 mov	 QWORD PTR [rcx+56], rax

; 2745 :     if (!px->work_ready)

  00147	48 8b 44 24 20	 mov	 rax, QWORD PTR px$[rsp]
  0014c	48 83 78 38 00	 cmp	 QWORD PTR [rax+56], 0
  00151	75 05		 jne	 SHORT $LN4@PyParallel@13

; 2746 :         goto free_io_free;

  00153	e9 db 00 00 00	 jmp	 $free_io_free$128380
$LN4@PyParallel@13:

; 2747 : 
; 2748 :     px->io_free_wakeup = CreateEvent(NULL, FALSE, FALSE, NULL);

  00158	45 33 c9	 xor	 r9d, r9d
  0015b	45 33 c0	 xor	 r8d, r8d
  0015e	33 d2		 xor	 edx, edx
  00160	33 c9		 xor	 ecx, ecx
  00162	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateEventW
  00168	48 8b 4c 24 20	 mov	 rcx, QWORD PTR px$[rsp]
  0016d	48 89 41 50	 mov	 QWORD PTR [rcx+80], rax

; 2749 :     if (!px->io_free_wakeup)

  00171	48 8b 44 24 20	 mov	 rax, QWORD PTR px$[rsp]
  00176	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  0017b	75 05		 jne	 SHORT $LN3@PyParallel@13

; 2750 :         goto free_work_ready;

  0017d	e9 a3 00 00 00	 jmp	 $free_work_ready$128384
$LN3@PyParallel@13:

; 2751 : 
; 2752 :     px->wakeup = CreateEvent(NULL, FALSE, FALSE, NULL);

  00182	45 33 c9	 xor	 r9d, r9d
  00185	45 33 c0	 xor	 r8d, r8d
  00188	33 d2		 xor	 edx, edx
  0018a	33 c9		 xor	 ecx, ecx
  0018c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateEventW
  00192	48 8b 4c 24 20	 mov	 rcx, QWORD PTR px$[rsp]
  00197	48 89 81 a0 00
	00 00		 mov	 QWORD PTR [rcx+160], rax

; 2753 :     if (!px->wakeup)

  0019e	48 8b 44 24 20	 mov	 rax, QWORD PTR px$[rsp]
  001a3	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  001ab	75 02		 jne	 SHORT $LN2@PyParallel@13

; 2754 :         goto free_io_wakeup;

  001ad	eb 67		 jmp	 SHORT $free_io_wakeup$128388
$LN2@PyParallel@13:

; 2755 : 
; 2756 :     _PxState_InitPxPages(px);

  001af	48 8b 4c 24 20	 mov	 rcx, QWORD PTR px$[rsp]
  001b4	e8 00 00 00 00	 call	 _PxState_InitPxPages

; 2757 : 
; 2758 :     InitializeCriticalSectionAndSpinCount(&(px->cs), 12);

  001b9	48 8b 44 24 20	 mov	 rax, QWORD PTR px$[rsp]
  001be	48 05 a8 00 00
	00		 add	 rax, 168		; 000000a8H
  001c4	ba 0c 00 00 00	 mov	 edx, 12
  001c9	48 8b c8	 mov	 rcx, rax
  001cc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_InitializeCriticalSectionAndSpinCount

; 2759 : 
; 2760 :     tstate->px = px;

  001d2	48 8b 44 24 40	 mov	 rax, QWORD PTR tstate$[rsp]
  001d7	48 8b 4c 24 20	 mov	 rcx, QWORD PTR px$[rsp]
  001dc	48 89 88 a0 00
	00 00		 mov	 QWORD PTR [rax+160], rcx

; 2761 :     px->tstate = tstate;

  001e3	48 8b 44 24 20	 mov	 rax, QWORD PTR px$[rsp]
  001e8	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tstate$[rsp]
  001ed	48 89 48 70	 mov	 QWORD PTR [rax+112], rcx

; 2762 : 
; 2763 :     tstate->is_parallel_thread = 0;

  001f1	48 8b 44 24 40	 mov	 rax, QWORD PTR tstate$[rsp]
  001f6	c7 80 a8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+168], 0

; 2764 :     px->ctx_ttl = 1;

  00200	b8 01 00 00 00	 mov	 eax, 1
  00205	48 8b 4c 24 20	 mov	 rcx, QWORD PTR px$[rsp]
  0020a	66 89 81 8e 00
	00 00		 mov	 WORD PTR [rcx+142], ax

; 2765 : 
; 2766 :     goto done;

  00211	e9 93 00 00 00	 jmp	 $done$128389
$free_io_wakeup$128388:

; 2767 : 
; 2768 : free_io_wakeup:
; 2769 :     CloseHandle(px->io_free_wakeup);

  00216	48 8b 44 24 20	 mov	 rax, QWORD PTR px$[rsp]
  0021b	48 8b 48 50	 mov	 rcx, QWORD PTR [rax+80]
  0021f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CloseHandle
$free_work_ready$128384:

; 2770 : 
; 2771 : free_work_ready:
; 2772 :     PxList_FreeListHead(px->work_ready);

  00225	48 8b 44 24 20	 mov	 rax, QWORD PTR px$[rsp]
  0022a	48 8b 48 38	 mov	 rcx, QWORD PTR [rax+56]
  0022e	e8 00 00 00 00	 call	 PxList_FreeListHead
$free_io_free$128380:

; 2773 : 
; 2774 : free_io_free:
; 2775 :     PxList_FreeListHead(px->io_free);

  00233	48 8b 44 24 20	 mov	 rax, QWORD PTR px$[rsp]
  00238	48 8b 48 48	 mov	 rcx, QWORD PTR [rax+72]
  0023c	e8 00 00 00 00	 call	 PxList_FreeListHead
$free_finished_sockets$128378:

; 2776 : 
; 2777 : free_finished_sockets:
; 2778 :     PxList_FreeListHead(px->finished_sockets);

  00241	48 8b 44 24 20	 mov	 rax, QWORD PTR px$[rsp]
  00246	48 8b 48 30	 mov	 rcx, QWORD PTR [rax+48]
  0024a	e8 00 00 00 00	 call	 PxList_FreeListHead
$free_finished$128376:

; 2779 : 
; 2780 : free_finished:
; 2781 :     PxList_FreeListHead(px->finished);

  0024f	48 8b 44 24 20	 mov	 rax, QWORD PTR px$[rsp]
  00254	48 8b 48 28	 mov	 rcx, QWORD PTR [rax+40]
  00258	e8 00 00 00 00	 call	 PxList_FreeListHead
$free_incoming$128374:

; 2782 : 
; 2783 : free_incoming:
; 2784 :     PxList_FreeListHead(px->incoming);

  0025d	48 8b 44 24 20	 mov	 rax, QWORD PTR px$[rsp]
  00262	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  00266	e8 00 00 00 00	 call	 PxList_FreeListHead
$free_completed_errbacks$128372:

; 2785 : 
; 2786 : free_completed_errbacks:
; 2787 :     PxList_FreeListHead(px->completed_errbacks);

  0026b	48 8b 44 24 20	 mov	 rax, QWORD PTR px$[rsp]
  00270	48 8b 48 18	 mov	 rcx, QWORD PTR [rax+24]
  00274	e8 00 00 00 00	 call	 PxList_FreeListHead
$free_completed_callbacks$128370:

; 2788 : 
; 2789 : free_completed_callbacks:
; 2790 :     PxList_FreeListHead(px->completed_callbacks);

  00279	48 8b 44 24 20	 mov	 rax, QWORD PTR px$[rsp]
  0027e	48 8b 48 10	 mov	 rcx, QWORD PTR [rax+16]
  00282	e8 00 00 00 00	 call	 PxList_FreeListHead
$free_errors$128368:

; 2791 : 
; 2792 : free_errors:
; 2793 :     PxList_FreeListHead(px->errors);

  00287	48 8b 44 24 20	 mov	 rax, QWORD PTR px$[rsp]
  0028c	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00290	e8 00 00 00 00	 call	 PxList_FreeListHead
$free_px$128366:

; 2794 : 
; 2795 : free_px:
; 2796 :     free(px);

  00295	48 8b 4c 24 20	 mov	 rcx, QWORD PTR px$[rsp]
  0029a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 2797 :     px = NULL;

  002a0	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR px$[rsp], 0
$done$128389:

; 2798 : 
; 2799 : done:
; 2800 :     if (!px)

  002a9	48 83 7c 24 20
	00		 cmp	 QWORD PTR px$[rsp], 0
  002af	75 07		 jne	 SHORT $LN1@PyParallel@13

; 2801 :         PyErr_SetFromWindowsErr(0);

  002b1	33 c9		 xor	 ecx, ecx
  002b3	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
$LN1@PyParallel@13:

; 2802 : 
; 2803 :     return px;

  002b8	48 8b 44 24 20	 mov	 rax, QWORD PTR px$[rsp]
$LN13@PyParallel@13:

; 2804 : }

  002bd	48 83 c4 38	 add	 rsp, 56			; 00000038H
  002c1	c3		 ret	 0
_PyParallel_CreatedNewThreadState ENDP
_TEXT	ENDS
PUBLIC	_PyParallel_ClearingThreadState
; Function compile flags: /Odtp
;	COMDAT _PyParallel_ClearingThreadState
_TEXT	SEGMENT
tstate$ = 8
_PyParallel_ClearingThreadState PROC			; COMDAT

; 2808 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 2809 : 
; 2810 : }

  00005	c3		 ret	 0
_PyParallel_ClearingThreadState ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DM@DDNIIIMI@_PyParallel_DeletingThreadState?$CI@ ; `string'
PUBLIC	_PyParallel_DeletingThreadState
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyParallel_DeletingThreadState DD imagerel $LN5
	DD	imagerel $LN5+105
	DD	imagerel $unwind$_PyParallel_DeletingThreadState
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyParallel_DeletingThreadState DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0DM@DDNIIIMI@_PyParallel_DeletingThreadState?$CI@
CONST	SEGMENT
??_C@_0DM@DDNIIIMI@_PyParallel_DeletingThreadState?$CI@ DB '_PyParallel_D'
	DB	'eletingThreadState(): px->contexts_active: %d', 0aH, 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PyParallel_DeletingThreadState
_TEXT	SEGMENT
px$ = 32
tstate$ = 64
_PyParallel_DeletingThreadState PROC			; COMDAT

; 2816 : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2817 :     PxState *px = (PxState *)tstate->px;

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR tstate$[rsp]
  0000e	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  00015	48 89 44 24 20	 mov	 QWORD PTR px$[rsp], rax

; 2818 : 
; 2819 :     assert(px);

  0001a	48 83 7c 24 20
	00		 cmp	 QWORD PTR px$[rsp], 0
  00020	75 1c		 jne	 SHORT $LN4@PyParallel@14
  00022	41 b8 03 0b 00
	00		 mov	 r8d, 2819		; 00000b03H
  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_15OLJENLOO@?$AAp?$AAx?$AA?$AA@
  00036	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0003c	33 c0		 xor	 eax, eax
$LN4@PyParallel@14:

; 2820 : 
; 2821 :     if (px->contexts_active > 0) {

  0003e	48 8b 44 24 20	 mov	 rax, QWORD PTR px$[rsp]
  00043	83 b8 e8 00 00
	00 00		 cmp	 DWORD PTR [rax+232], 0
  0004a	7e 18		 jle	 SHORT $LN1@PyParallel@14

; 2822 :         printf("_PyParallel_DeletingThreadState(): px->contexts_active: %d\n",
; 2823 :                px->contexts_active);

  0004c	48 8b 44 24 20	 mov	 rax, QWORD PTR px$[rsp]
  00051	8b 90 e8 00 00
	00		 mov	 edx, DWORD PTR [rax+232]
  00057	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DM@DDNIIIMI@_PyParallel_DeletingThreadState?$CI@
  0005e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_printf
$LN1@PyParallel@14:

; 2824 :     }
; 2825 : }

  00064	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00068	c3		 ret	 0
_PyParallel_DeletingThreadState ENDP
_TEXT	ENDS
PUBLIC	_PyParallel_DeletingInterpreterState
; Function compile flags: /Odtp
;	COMDAT _PyParallel_DeletingInterpreterState
_TEXT	SEGMENT
interp$ = 8
_PyParallel_DeletingInterpreterState PROC		; COMDAT

; 2829 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 2830 : 
; 2831 : }

  00005	c3		 ret	 0
_PyParallel_DeletingInterpreterState ENDP
_TEXT	ENDS
PUBLIC	_PyParallel_InitializedThreadState
; Function compile flags: /Odtp
;	COMDAT _PyParallel_InitializedThreadState
_TEXT	SEGMENT
pstate$ = 8
_PyParallel_InitializedThreadState PROC			; COMDAT

; 2835 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 2836 :     //if (Py_MainThreadId != _Py_get_current_thread_id())
; 2837 :     //    PyEval_RestoreThread(pstate);
; 2838 : }

  00005	c3		 ret	 0
_PyParallel_InitializedThreadState ENDP
_TEXT	ENDS
PUBLIC	??_C@_1DI@GLFGCHFN@?$AA?$CB?$AAt?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAi?$AAs?$AA_?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA_?$AAt?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?$AA@ ; `string'
PUBLIC	??_C@_0CM@EMPFFMGD@_PyParallel_ExecutingCallbackFro@ ; `string'
EXTRN	PyThreadState_Get:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyParallel_ExecutingCallbackFromMainThread DD imagerel $LN7
	DD	imagerel $LN7+151
	DD	imagerel $unwind$_PyParallel_ExecutingCallbackFromMainThread
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyParallel_ExecutingCallbackFromMainThread DD 010401H
	DD	08204H
xdata	ENDS
;	COMDAT ??_C@_1DI@GLFGCHFN@?$AA?$CB?$AAt?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAi?$AAs?$AA_?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA_?$AAt?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?$AA@
CONST	SEGMENT
??_C@_1DI@GLFGCHFN@?$AA?$CB?$AAt?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAi?$AAs?$AA_?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA_?$AAt?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?$AA@ DB '!'
	DB	00H, 't', 00H, 's', 00H, 't', 00H, 'a', 00H, 't', 00H, 'e', 00H
	DB	'-', 00H, '>', 00H, 'i', 00H, 's', 00H, '_', 00H, 'p', 00H, 'a'
	DB	00H, 'r', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'e', 00H, 'l', 00H
	DB	'_', 00H, 't', 00H, 'h', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'd'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@EMPFFMGD@_PyParallel_ExecutingCallbackFro@
CONST	SEGMENT
??_C@_0CM@EMPFFMGD@_PyParallel_ExecutingCallbackFro@ DB '_PyParallel_Exec'
	DB	'utingCallbackFromMainThread', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PyParallel_ExecutingCallbackFromMainThread
_TEXT	SEGMENT
px$ = 32
tstate$ = 40
tv80 = 48
_PyParallel_ExecutingCallbackFromMainThread PROC	; COMDAT

; 2843 : {

$LN7:
  00000	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 2844 :     PyThreadState *tstate;
; 2845 :     PxState       *px;
; 2846 :     Py_GUARD

  00004	e8 00 00 00 00	 call	 _Py_PXCTX
  00009	85 c0		 test	 eax, eax
  0000b	74 1c		 je	 SHORT $LN1@PyParallel@15
  0000d	45 33 c9	 xor	 r9d, r9d
  00010	41 b8 1e 0b 00
	00		 mov	 r8d, 2846		; 00000b1eH
  00016	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@PGHBGAOD@?4?4?2Python?2pyparallel?4c?$AA@
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CM@EMPFFMGD@_PyParallel_ExecutingCallbackFro@
  00024	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN1@PyParallel@15:

; 2847 : 
; 2848 :     tstate = PyThreadState_GET();

  00029	e8 00 00 00 00	 call	 PyThreadState_Get
  0002e	48 89 44 24 28	 mov	 QWORD PTR tstate$[rsp], rax

; 2849 : 
; 2850 :     assert(!tstate->is_parallel_thread);

  00033	48 8b 44 24 28	 mov	 rax, QWORD PTR tstate$[rsp]
  00038	83 b8 a8 00 00
	00 00		 cmp	 DWORD PTR [rax+168], 0
  0003f	74 1c		 je	 SHORT $LN4@PyParallel@15
  00041	41 b8 22 0b 00
	00		 mov	 r8d, 2850		; 00000b22H
  00047	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0004e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DI@GLFGCHFN@?$AA?$CB?$AAt?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAi?$AAs?$AA_?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA_?$AAt?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?$AA@
  00055	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0005b	33 c0		 xor	 eax, eax
$LN4@PyParallel@15:

; 2851 :     px = (PxState *)tstate->px;

  0005d	48 8b 44 24 28	 mov	 rax, QWORD PTR tstate$[rsp]
  00062	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  00069	48 89 44 24 20	 mov	 QWORD PTR px$[rsp], rax

; 2852 :     return (px->processing_callback == 1);

  0006e	48 8b 44 24 20	 mov	 rax, QWORD PTR px$[rsp]
  00073	83 b8 d0 00 00
	00 01		 cmp	 DWORD PTR [rax+208], 1
  0007a	75 0a		 jne	 SHORT $LN5@PyParallel@15
  0007c	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv80[rsp], 1
  00084	eb 08		 jmp	 SHORT $LN6@PyParallel@15
$LN5@PyParallel@15:
  00086	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv80[rsp], 0
$LN6@PyParallel@15:
  0008e	8b 44 24 30	 mov	 eax, DWORD PTR tv80[rsp]

; 2853 : }

  00092	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00096	c3		 ret	 0
_PyParallel_ExecutingCallbackFromMainThread ENDP
_TEXT	ENDS
PUBLIC	??_C@_1DI@DIMDMEME@?$AAp?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAe?$AAx?$AAc?$AA_?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ ; `string'
PUBLIC	PxState_SetError
EXTRN	PxList_TimestampItem:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PxState_SetError DD imagerel $LN4
	DD	imagerel $LN4+265
	DD	imagerel $unwind$PxState_SetError
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PxState_SetError DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_1DI@DIMDMEME@?$AAp?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAe?$AAx?$AAc?$AA_?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
CONST	SEGMENT
??_C@_1DI@DIMDMEME@?$AAp?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAe?$AAx?$AAc?$AA_?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ DB 'p'
	DB	00H, 's', 00H, 't', 00H, 'a', 00H, 't', 00H, 'e', 00H, '-', 00H
	DB	'>', 00H, 'c', 00H, 'u', 00H, 'r', 00H, 'e', 00H, 'x', 00H, 'c'
	DB	00H, '_', 00H, 't', 00H, 'y', 00H, 'p', 00H, 'e', 00H, ' ', 00H
	DB	'!', 00H, '=', 00H, ' ', 00H, 'N', 00H, 'U', 00H, 'L', 00H, 'L'
	DB	00H, 00H, 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PxState_SetError
_TEXT	SEGMENT
pstate$ = 32
px$ = 40
c$ = 64
PxState_SetError PROC					; COMDAT

; 2857 : {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2858 :     PxState *px = c->px;

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR c$[rsp]
  0000e	48 8b 80 d8 00
	00 00		 mov	 rax, QWORD PTR [rax+216]
  00015	48 89 44 24 28	 mov	 QWORD PTR px$[rsp], rax

; 2859 :     PyThreadState *pstate = c->pstate;

  0001a	48 8b 44 24 40	 mov	 rax, QWORD PTR c$[rsp]
  0001f	48 8b 80 e8 00
	00 00		 mov	 rax, QWORD PTR [rax+232]
  00026	48 89 44 24 20	 mov	 QWORD PTR pstate$[rsp], rax

; 2860 :     assert(pstate->curexc_type != NULL);

  0002b	48 8b 44 24 20	 mov	 rax, QWORD PTR pstate$[rsp]
  00030	48 83 78 48 00	 cmp	 QWORD PTR [rax+72], 0
  00035	75 1c		 jne	 SHORT $LN3@PxState_Se
  00037	41 b8 2c 0b 00
	00		 mov	 r8d, 2860		; 00000b2cH
  0003d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00044	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DI@DIMDMEME@?$AAp?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAe?$AAx?$AAc?$AA_?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
  0004b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00051	33 c0		 xor	 eax, eax
$LN3@PxState_Se:

; 2861 :     PxList_TimestampItem(c->error);

  00053	48 8b 44 24 40	 mov	 rax, QWORD PTR c$[rsp]
  00058	48 8b 88 28 33
	00 00		 mov	 rcx, QWORD PTR [rax+13096]
  0005f	e8 00 00 00 00	 call	 PxList_TimestampItem

; 2862 :     c->error->from = c;

  00064	48 8b 44 24 40	 mov	 rax, QWORD PTR c$[rsp]
  00069	48 8b 80 28 33
	00 00		 mov	 rax, QWORD PTR [rax+13096]
  00070	48 8b 4c 24 40	 mov	 rcx, QWORD PTR c$[rsp]
  00075	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 2863 :     c->error->p1 = pstate->curexc_type;

  00079	48 8b 44 24 40	 mov	 rax, QWORD PTR c$[rsp]
  0007e	48 8b 80 28 33
	00 00		 mov	 rax, QWORD PTR [rax+13096]
  00085	48 8b 4c 24 20	 mov	 rcx, QWORD PTR pstate$[rsp]
  0008a	48 8b 49 48	 mov	 rcx, QWORD PTR [rcx+72]
  0008e	48 89 48 20	 mov	 QWORD PTR [rax+32], rcx

; 2864 :     c->error->p2 = pstate->curexc_value;

  00092	48 8b 44 24 40	 mov	 rax, QWORD PTR c$[rsp]
  00097	48 8b 80 28 33
	00 00		 mov	 rax, QWORD PTR [rax+13096]
  0009e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR pstate$[rsp]
  000a3	48 8b 49 50	 mov	 rcx, QWORD PTR [rcx+80]
  000a7	48 89 48 28	 mov	 QWORD PTR [rax+40], rcx

; 2865 :     c->error->p3 = pstate->curexc_traceback;

  000ab	48 8b 44 24 40	 mov	 rax, QWORD PTR c$[rsp]
  000b0	48 8b 80 28 33
	00 00		 mov	 rax, QWORD PTR [rax+13096]
  000b7	48 8b 4c 24 20	 mov	 rcx, QWORD PTR pstate$[rsp]
  000bc	48 8b 49 58	 mov	 rcx, QWORD PTR [rcx+88]
  000c0	48 89 48 30	 mov	 QWORD PTR [rax+48], rcx

; 2866 :     InterlockedExchange(&(c->done), 1);

  000c4	48 8b 44 24 40	 mov	 rax, QWORD PTR c$[rsp]
  000c9	48 05 04 38 00
	00		 add	 rax, 14340		; 00003804H
  000cf	b9 01 00 00 00	 mov	 ecx, 1
  000d4	87 08		 xchg	 DWORD PTR [rax], ecx

; 2867 :     /*
; 2868 :     InterlockedIncrement64(done);
; 2869 :     InterlockedDecrement(inflight);
; 2870 :     */
; 2871 :     PxList_Push(px->errors, c->error);

  000d6	48 8b 44 24 40	 mov	 rax, QWORD PTR c$[rsp]
  000db	48 8b 90 28 33
	00 00		 mov	 rdx, QWORD PTR [rax+13096]
  000e2	48 8b 44 24 28	 mov	 rax, QWORD PTR px$[rsp]
  000e7	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  000eb	e8 00 00 00 00	 call	 PxList_Push

; 2872 :     SetEvent(px->wakeup);

  000f0	48 8b 44 24 28	 mov	 rax, QWORD PTR px$[rsp]
  000f5	48 8b 88 a0 00
	00 00		 mov	 rcx, QWORD PTR [rax+160]
  000fc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SetEvent

; 2873 :     return NULL;

  00102	33 c0		 xor	 eax, eax

; 2874 : }

  00104	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00108	c3		 ret	 0
PxState_SetError ENDP
_TEXT	ENDS
PUBLIC	??_C@_03IELNPCCE@?$CIO?$CJ?$AA@			; `string'
PUBLIC	??_C@_1CI@FHCLAHIJ@?$AAp?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAe?$AAx?$AAc?$AA_?$AAt?$AAy?$AAp?$AAe?$AA?$AA@ ; `string'
PUBLIC	PxContext_HandleError
EXTRN	PyObject_CallObject:PROC
EXTRN	Py_BuildValue:PROC
EXTRN	PyErr_Clear:PROC
EXTRN	PyTuple_Pack:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PxContext_HandleError DD imagerel $LN8
	DD	imagerel $LN8+387
	DD	imagerel $unwind$PxContext_HandleError
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PxContext_HandleError DD 010901H
	DD	0a209H
xdata	ENDS
;	COMDAT ??_C@_03IELNPCCE@?$CIO?$CJ?$AA@
CONST	SEGMENT
??_C@_03IELNPCCE@?$CIO?$CJ?$AA@ DB '(O)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1CI@FHCLAHIJ@?$AAp?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAe?$AAx?$AAc?$AA_?$AAt?$AAy?$AAp?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1CI@FHCLAHIJ@?$AAp?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAe?$AAx?$AAc?$AA_?$AAt?$AAy?$AAp?$AAe?$AA?$AA@ DB 'p'
	DB	00H, 's', 00H, 't', 00H, 'a', 00H, 't', 00H, 'e', 00H, '-', 00H
	DB	'>', 00H, 'c', 00H, 'u', 00H, 'r', 00H, 'e', 00H, 'x', 00H, 'c'
	DB	00H, '_', 00H, 't', 00H, 'y', 00H, 'p', 00H, 'e', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PxContext_HandleError
_TEXT	SEGMENT
args$ = 32
pstate$ = 40
px$ = 48
r$ = 56
exc$128442 = 64
c$ = 96
PxContext_HandleError PROC				; COMDAT

; 2878 : {

$LN8:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 2879 :     PyObject *args, *r;
; 2880 :     PxState *px = c->px;

  00009	48 8b 44 24 60	 mov	 rax, QWORD PTR c$[rsp]
  0000e	48 8b 80 d8 00
	00 00		 mov	 rax, QWORD PTR [rax+216]
  00015	48 89 44 24 30	 mov	 QWORD PTR px$[rsp], rax

; 2881 :     PyThreadState *pstate = c->pstate;

  0001a	48 8b 44 24 60	 mov	 rax, QWORD PTR c$[rsp]
  0001f	48 8b 80 e8 00
	00 00		 mov	 rax, QWORD PTR [rax+232]
  00026	48 89 44 24 28	 mov	 QWORD PTR pstate$[rsp], rax

; 2882 : 
; 2883 :     assert(pstate->curexc_type != NULL);

  0002b	48 8b 44 24 28	 mov	 rax, QWORD PTR pstate$[rsp]
  00030	48 83 78 48 00	 cmp	 QWORD PTR [rax+72], 0
  00035	75 1c		 jne	 SHORT $LN6@PxContext_@4
  00037	41 b8 43 0b 00
	00		 mov	 r8d, 2883		; 00000b43H
  0003d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00044	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DI@DIMDMEME@?$AAp?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAe?$AAx?$AAc?$AA_?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
  0004b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00051	33 c0		 xor	 eax, eax
$LN6@PxContext_@4:

; 2884 : 
; 2885 :     if (c->errback) {

  00053	48 8b 44 24 60	 mov	 rax, QWORD PTR c$[rsp]
  00058	48 83 b8 58 32
	00 00 00	 cmp	 QWORD PTR [rax+12888], 0
  00060	0f 84 0e 01 00
	00		 je	 $LN3@PxContext_@4

; 2886 :         PyObject *exc;
; 2887 :         assert(pstate->curexc_type);

  00066	48 8b 44 24 28	 mov	 rax, QWORD PTR pstate$[rsp]
  0006b	48 83 78 48 00	 cmp	 QWORD PTR [rax+72], 0
  00070	75 1c		 jne	 SHORT $LN7@PxContext_@4
  00072	41 b8 47 0b 00
	00		 mov	 r8d, 2887		; 00000b47H
  00078	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0007f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CI@FHCLAHIJ@?$AAp?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAe?$AAx?$AAc?$AA_?$AAt?$AAy?$AAp?$AAe?$AA?$AA@
  00086	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0008c	33 c0		 xor	 eax, eax
$LN7@PxContext_@4:

; 2888 :         exc = PyTuple_Pack(3, pstate->curexc_type,
; 2889 :                               pstate->curexc_value,
; 2890 :                               pstate->curexc_traceback);

  0008e	48 8b 44 24 28	 mov	 rax, QWORD PTR pstate$[rsp]
  00093	4c 8b 48 58	 mov	 r9, QWORD PTR [rax+88]
  00097	48 8b 44 24 28	 mov	 rax, QWORD PTR pstate$[rsp]
  0009c	4c 8b 40 50	 mov	 r8, QWORD PTR [rax+80]
  000a0	48 8b 44 24 28	 mov	 rax, QWORD PTR pstate$[rsp]
  000a5	48 8b 50 48	 mov	 rdx, QWORD PTR [rax+72]
  000a9	b9 03 00 00 00	 mov	 ecx, 3
  000ae	e8 00 00 00 00	 call	 PyTuple_Pack
  000b3	48 89 44 24 40	 mov	 QWORD PTR exc$128442[rsp], rax

; 2891 :         if (!exc)

  000b8	48 83 7c 24 40
	00		 cmp	 QWORD PTR exc$128442[rsp], 0
  000be	75 05		 jne	 SHORT $LN2@PxContext_@4

; 2892 :             goto error;

  000c0	e9 af 00 00 00	 jmp	 $error$128446
$LN2@PxContext_@4:

; 2893 : 
; 2894 :         PyErr_Clear();

  000c5	e8 00 00 00 00	 call	 PyErr_Clear

; 2895 :         args = Py_BuildValue("(O)", exc);

  000ca	48 8b 54 24 40	 mov	 rdx, QWORD PTR exc$128442[rsp]
  000cf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03IELNPCCE@?$CIO?$CJ?$AA@
  000d6	e8 00 00 00 00	 call	 Py_BuildValue
  000db	48 89 44 24 20	 mov	 QWORD PTR args$[rsp], rax

; 2896 :         r = PyObject_CallObject(c->errback, args);

  000e0	48 8b 54 24 20	 mov	 rdx, QWORD PTR args$[rsp]
  000e5	48 8b 44 24 60	 mov	 rax, QWORD PTR c$[rsp]
  000ea	48 8b 88 58 32
	00 00		 mov	 rcx, QWORD PTR [rax+12888]
  000f1	e8 00 00 00 00	 call	 PyObject_CallObject
  000f6	48 89 44 24 38	 mov	 QWORD PTR r$[rsp], rax

; 2897 :         if (!null_with_exc_or_non_none_return_type(r, pstate)) {

  000fb	48 8b 54 24 28	 mov	 rdx, QWORD PTR pstate$[rsp]
  00100	48 8b 4c 24 38	 mov	 rcx, QWORD PTR r$[rsp]
  00105	e8 00 00 00 00	 call	 null_with_exc_or_non_none_return_type
  0010a	85 c0		 test	 eax, eax
  0010c	75 66		 jne	 SHORT $LN1@PxContext_@4

; 2898 :             c->errback_completed->from = c;

  0010e	48 8b 44 24 60	 mov	 rax, QWORD PTR c$[rsp]
  00113	48 8b 80 38 33
	00 00		 mov	 rax, QWORD PTR [rax+13112]
  0011a	48 8b 4c 24 60	 mov	 rcx, QWORD PTR c$[rsp]
  0011f	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 2899 :             PxList_TimestampItem(c->errback_completed);

  00123	48 8b 44 24 60	 mov	 rax, QWORD PTR c$[rsp]
  00128	48 8b 88 38 33
	00 00		 mov	 rcx, QWORD PTR [rax+13112]
  0012f	e8 00 00 00 00	 call	 PxList_TimestampItem

; 2900 :             InterlockedExchange(&(c->done), 1);

  00134	48 8b 44 24 60	 mov	 rax, QWORD PTR c$[rsp]
  00139	48 05 04 38 00
	00		 add	 rax, 14340		; 00003804H
  0013f	b9 01 00 00 00	 mov	 ecx, 1
  00144	87 08		 xchg	 DWORD PTR [rax], ecx

; 2901 :             /*
; 2902 :             InterlockedIncrement64(done);
; 2903 :             InterlockedDecrement(inflight);
; 2904 :             */
; 2905 :             PxList_Push(px->completed_errbacks, c->errback_completed);

  00146	48 8b 44 24 60	 mov	 rax, QWORD PTR c$[rsp]
  0014b	48 8b 90 38 33
	00 00		 mov	 rdx, QWORD PTR [rax+13112]
  00152	48 8b 44 24 30	 mov	 rax, QWORD PTR px$[rsp]
  00157	48 8b 48 18	 mov	 rcx, QWORD PTR [rax+24]
  0015b	e8 00 00 00 00	 call	 PxList_Push

; 2906 :             SetEvent(px->wakeup);

  00160	48 8b 44 24 30	 mov	 rax, QWORD PTR px$[rsp]
  00165	48 8b 88 a0 00
	00 00		 mov	 rcx, QWORD PTR [rax+160]
  0016c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SetEvent

; 2907 :             return;

  00172	eb 0a		 jmp	 SHORT $LN4@PxContext_@4
$LN1@PxContext_@4:
$LN3@PxContext_@4:
$error$128446:

; 2908 :         }
; 2909 :     }
; 2910 : 
; 2911 : error:
; 2912 :     PxState_SetError(c);

  00174	48 8b 4c 24 60	 mov	 rcx, QWORD PTR c$[rsp]
  00179	e8 00 00 00 00	 call	 PxState_SetError
$LN4@PxContext_@4:

; 2913 : }

  0017e	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00182	c3		 ret	 0
PxContext_HandleError ENDP
_TEXT	ENDS
PUBLIC	??_C@_1BK@IFKCBINM@?$AA?$CG?$AAr?$AAb?$AA?9?$AA?$DO?$AAw?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAr?$AAw?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BK@MPNLKOFO@?$AA?$CG?$AAs?$AAb?$AA?9?$AA?$DO?$AAw?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAs?$AAw?$AA?$AA@ ; `string'
PUBLIC	??_C@_1M@CMCLMPIG@?$AAt?$AA?9?$AA?$DO?$AAp?$AAx?$AA?$AA@ ; `string'
PUBLIC	??_C@_0CD@GEDLNAHP@_PyParallel_InitTLSHeap?3HeapCrea@ ; `string'
PUBLIC	??_C@_1M@FKINEFFD@?$AA?$CB?$AAt?$AA?9?$AA?$DO?$AAh?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CE@DLGFNPMD@?$AA_?$AAP?$AAx?$AAN?$AAe?$AAw?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	_PyParallel_InitTLS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyParallel_InitTLS DD imagerel $LN13
	DD	imagerel $LN13+931
	DD	imagerel $unwind$_PyParallel_InitTLS
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyParallel_InitTLS DD 010401H
	DD	0c204H
xdata	ENDS
;	COMDAT ??_C@_1BK@IFKCBINM@?$AA?$CG?$AAr?$AAb?$AA?9?$AA?$DO?$AAw?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAr?$AAw?$AA?$AA@
CONST	SEGMENT
??_C@_1BK@IFKCBINM@?$AA?$CG?$AAr?$AAb?$AA?9?$AA?$DO?$AAw?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAr?$AAw?$AA?$AA@ DB '&'
	DB	00H, 'r', 00H, 'b', 00H, '-', 00H, '>', 00H, 'w', 00H, ' ', 00H
	DB	'=', 00H, '=', 00H, ' ', 00H, 'r', 00H, 'w', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BK@MPNLKOFO@?$AA?$CG?$AAs?$AAb?$AA?9?$AA?$DO?$AAw?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAs?$AAw?$AA?$AA@
CONST	SEGMENT
??_C@_1BK@MPNLKOFO@?$AA?$CG?$AAs?$AAb?$AA?9?$AA?$DO?$AAw?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAs?$AAw?$AA?$AA@ DB '&'
	DB	00H, 's', 00H, 'b', 00H, '-', 00H, '>', 00H, 'w', 00H, ' ', 00H
	DB	'=', 00H, '=', 00H, ' ', 00H, 's', 00H, 'w', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1M@CMCLMPIG@?$AAt?$AA?9?$AA?$DO?$AAp?$AAx?$AA?$AA@
CONST	SEGMENT
??_C@_1M@CMCLMPIG@?$AAt?$AA?9?$AA?$DO?$AAp?$AAx?$AA?$AA@ DB 't', 00H, '-', 00H
	DB	'>', 00H, 'p', 00H, 'x', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@GEDLNAHP@_PyParallel_InitTLSHeap?3HeapCrea@
CONST	SEGMENT
??_C@_0CD@GEDLNAHP@_PyParallel_InitTLSHeap?3HeapCrea@ DB '_PyParallel_Ini'
	DB	'tTLSHeap:HeapCreate', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1M@FKINEFFD@?$AA?$CB?$AAt?$AA?9?$AA?$DO?$AAh?$AA?$AA@
CONST	SEGMENT
??_C@_1M@FKINEFFD@?$AA?$CB?$AAt?$AA?9?$AA?$DO?$AAh?$AA?$AA@ DB '!', 00H, 't'
	DB	00H, '-', 00H, '>', 00H, 'h', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1CE@DLGFNPMD@?$AA_?$AAP?$AAx?$AAN?$AAe?$AAw?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1CE@DLGFNPMD@?$AA_?$AAP?$AAx?$AAN?$AAe?$AAw?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$AA@ DB '_'
	DB	00H, 'P', 00H, 'x', 00H, 'N', 00H, 'e', 00H, 'w', 00H, 'T', 00H
	DB	'h', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'd', 00H, ' ', 00H, '!'
	DB	00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PyParallel_InitTLS
_TEXT	SEGMENT
i$ = 32
t$ = 40
h$128467 = 48
sb$128468 = 56
sw$128470 = 64
rb$128469 = 72
rw$128478 = 80
_PyParallel_InitTLS PROC				; COMDAT

; 2917 : {

$LN13:
  00000	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 2918 :     int   i;
; 2919 :     TLS  *t = &tls;

  00004	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:tls
  00009	8b c0		 mov	 eax, eax
  0000b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00011	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0001a	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0001e	48 89 44 24 28	 mov	 QWORD PTR t$[rsp], rax

; 2920 :     assert(_PxNewThread != 0);

  00023	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:_PxNewThread
  00028	8b c0		 mov	 eax, eax
  0002a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00030	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00039	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  0003d	83 3c 08 00	 cmp	 DWORD PTR [rax+rcx], 0
  00041	75 1c		 jne	 SHORT $LN8@PyParallel@16
  00043	41 b8 68 0b 00
	00		 mov	 r8d, 2920		; 00000b68H
  00049	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00050	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CE@DLGFNPMD@?$AA_?$AAP?$AAx?$AAN?$AAe?$AAw?$AAT?$AAh?$AAr?$AAe?$AAa?$AAd?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$AA@
  00057	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0005d	33 c0		 xor	 eax, eax
$LN8@PyParallel@16:

; 2921 :     assert(!t->h);

  0005f	48 8b 44 24 28	 mov	 rax, QWORD PTR t$[rsp]
  00064	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00068	74 1c		 je	 SHORT $LN9@PyParallel@16
  0006a	41 b8 69 0b 00
	00		 mov	 r8d, 2921		; 00000b69H
  00070	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00077	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1M@FKINEFFD@?$AA?$CB?$AAt?$AA?9?$AA?$DO?$AAh?$AA?$AA@
  0007e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00084	33 c0		 xor	 eax, eax
$LN9@PyParallel@16:

; 2922 : 
; 2923 :     t->handle = HeapCreate(HEAP_NO_SERIALIZE, _PyTLSHeap_DefaultSize, 0);

  00086	48 63 05 00 00
	00 00		 movsxd	 rax, DWORD PTR _PyTLSHeap_DefaultSize
  0008d	45 33 c0	 xor	 r8d, r8d
  00090	48 8b d0	 mov	 rdx, rax
  00093	b9 01 00 00 00	 mov	 ecx, 1
  00098	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_HeapCreate
  0009e	48 8b 4c 24 28	 mov	 rcx, QWORD PTR t$[rsp]
  000a3	48 89 81 c8 00
	00 00		 mov	 QWORD PTR [rcx+200], rax

; 2924 :     if (!t->handle)

  000aa	48 8b 44 24 28	 mov	 rax, QWORD PTR t$[rsp]
  000af	48 83 b8 c8 00
	00 00 00	 cmp	 QWORD PTR [rax+200], 0
  000b7	75 0c		 jne	 SHORT $LN5@PyParallel@16

; 2925 :         Py_FatalError("_PyParallel_InitTLSHeap:HeapCreate");

  000b9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CD@GEDLNAHP@_PyParallel_InitTLSHeap?3HeapCrea@
  000c0	e8 00 00 00 00	 call	 Py_FatalError
$LN5@PyParallel@16:

; 2926 : 
; 2927 :     TSTATE = ctx->tstate;

  000c5	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:ctx
  000ca	8b c0		 mov	 eax, eax
  000cc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  000d2	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  000db	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  000df	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  000e3	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:TSTATE
  000e8	8b c9		 mov	 ecx, ecx
  000ea	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _tls_index
  000f0	65 4c 8b 04 25
	58 00 00 00	 mov	 r8, QWORD PTR gs:88
  000f9	49 8b 14 d0	 mov	 rdx, QWORD PTR [r8+rdx*8]
  000fd	48 8b 80 e0 00
	00 00		 mov	 rax, QWORD PTR [rax+224]
  00104	48 89 04 11	 mov	 QWORD PTR [rcx+rdx], rax

; 2928 :     t->px = (PxState *)TSTATE->px;

  00108	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:TSTATE
  0010d	8b c0		 mov	 eax, eax
  0010f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00115	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0011e	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  00122	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  00126	48 8b 4c 24 28	 mov	 rcx, QWORD PTR t$[rsp]
  0012b	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  00132	48 89 81 d8 00
	00 00		 mov	 QWORD PTR [rcx+216], rax

; 2929 :     assert(t->px);

  00139	48 8b 44 24 28	 mov	 rax, QWORD PTR t$[rsp]
  0013e	48 83 b8 d8 00
	00 00 00	 cmp	 QWORD PTR [rax+216], 0
  00146	75 1c		 jne	 SHORT $LN10@PyParallel@16
  00148	41 b8 71 0b 00
	00		 mov	 r8d, 2929		; 00000b71H
  0014e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00155	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1M@CMCLMPIG@?$AAt?$AA?9?$AA?$DO?$AAp?$AAx?$AA?$AA@
  0015c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00162	33 c0		 xor	 eax, eax
$LN10@PyParallel@16:

; 2930 : 
; 2931 :     InitializeCriticalSectionAndSpinCount(&t->sbuf_cs, TLS_BUF_SPINCOUNT);

  00164	48 8b 44 24 28	 mov	 rax, QWORD PTR t$[rsp]
  00169	48 05 a8 01 00
	00		 add	 rax, 424		; 000001a8H
  0016f	ba 08 00 00 00	 mov	 edx, 8
  00174	48 8b c8	 mov	 rcx, rax
  00177	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_InitializeCriticalSectionAndSpinCount

; 2932 :     InitializeCriticalSectionAndSpinCount(&t->rbuf_cs, TLS_BUF_SPINCOUNT);

  0017d	48 8b 44 24 28	 mov	 rax, QWORD PTR t$[rsp]
  00182	48 05 d8 17 00
	00		 add	 rax, 6104		; 000017d8H
  00188	ba 08 00 00 00	 mov	 edx, 8
  0018d	48 8b c8	 mov	 rcx, rax
  00190	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_InitializeCriticalSectionAndSpinCount

; 2933 :     InitializeCriticalSectionAndSpinCount(&t->snapshots_cs, TLS_BUF_SPINCOUNT);

  00196	48 8b 44 24 28	 mov	 rax, QWORD PTR t$[rsp]
  0019b	48 05 10 2e 00
	00		 add	 rax, 11792		; 00002e10H
  001a1	ba 08 00 00 00	 mov	 edx, 8
  001a6	48 8b c8	 mov	 rcx, rax
  001a9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_InitializeCriticalSectionAndSpinCount

; 2934 : 
; 2935 :     if (!_PyTLSHeap_Init(0, 0))

  001af	33 d2		 xor	 edx, edx
  001b1	33 c9		 xor	 ecx, ecx
  001b3	e8 00 00 00 00	 call	 _PyTLSHeap_Init
  001b8	85 c0		 test	 eax, eax
  001ba	75 07		 jne	 SHORT $LN4@PyParallel@16

; 2936 :         return 0;

  001bc	33 c0		 xor	 eax, eax
  001be	e9 db 01 00 00	 jmp	 $LN6@PyParallel@16
$LN4@PyParallel@16:

; 2937 : 
; 2938 :     for (i = 0; i < Px_NUM_TLS_WSABUFS; i++) {

  001c3	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  001cb	eb 0a		 jmp	 SHORT $LN3@PyParallel@16
$LN2@PyParallel@16:
  001cd	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  001d1	ff c0		 inc	 eax
  001d3	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN3@PyParallel@16:
  001d7	83 7c 24 20 40	 cmp	 DWORD PTR i$[rsp], 64	; 00000040H
  001dc	0f 8d 64 01 00
	00		 jge	 $LN1@PyParallel@16

; 2939 :         Heap   *h  = &t->snapshot[i];

  001e2	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  001e7	48 69 c0 b8 00
	00 00		 imul	 rax, 184		; 000000b8H
  001ee	48 8b 4c 24 28	 mov	 rcx, QWORD PTR t$[rsp]
  001f3	48 8d 84 01 40
	30 00 00	 lea	 rax, QWORD PTR [rcx+rax+12352]
  001fb	48 89 44 24 30	 mov	 QWORD PTR h$128467[rsp], rax

; 2940 :         TLSBUF *sb = &t->sbuf[i];

  00200	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  00205	48 6b c0 50	 imul	 rax, 80			; 00000050H
  00209	48 8b 4c 24 28	 mov	 rcx, QWORD PTR t$[rsp]
  0020e	48 8d 84 01 d8
	03 00 00	 lea	 rax, QWORD PTR [rcx+rax+984]
  00216	48 89 44 24 38	 mov	 QWORD PTR sb$128468[rsp], rax

; 2941 :         TLSBUF *rb = &t->sbuf[i];

  0021b	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  00220	48 6b c0 50	 imul	 rax, 80			; 00000050H
  00224	48 8b 4c 24 28	 mov	 rcx, QWORD PTR t$[rsp]
  00229	48 8d 84 01 d8
	03 00 00	 lea	 rax, QWORD PTR [rcx+rax+984]
  00231	48 89 44 24 48	 mov	 QWORD PTR rb$128469[rsp], rax

; 2942 :         WSABUF *sw = T2W(sb);

  00236	48 8b 44 24 38	 mov	 rax, QWORD PTR sb$128468[rsp]
  0023b	48 83 c0 40	 add	 rax, 64			; 00000040H
  0023f	48 89 44 24 40	 mov	 QWORD PTR sw$128470[rsp], rax

; 2943 :         WSABUF *rw = T2W(rb);

  00244	48 8b 44 24 48	 mov	 rax, QWORD PTR rb$128469[rsp]
  00249	48 83 c0 40	 add	 rax, 64			; 00000040H
  0024d	48 89 44 24 50	 mov	 QWORD PTR rw$128478[rsp], rax

; 2944 : 
; 2945 :         h->bitmap_index  = i;

  00252	48 8b 44 24 30	 mov	 rax, QWORD PTR h$128467[rsp]
  00257	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR i$[rsp]
  0025c	88 88 b0 00 00
	00		 mov	 BYTE PTR [rax+176], cl

; 2946 :         sb->bitmap_index = i;

  00262	48 8b 44 24 38	 mov	 rax, QWORD PTR sb$128468[rsp]
  00267	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR i$[rsp]
  0026c	88 08		 mov	 BYTE PTR [rax], cl

; 2947 :         rb->bitmap_index = i;

  0026e	48 8b 44 24 48	 mov	 rax, QWORD PTR rb$128469[rsp]
  00273	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR i$[rsp]
  00278	88 08		 mov	 BYTE PTR [rax], cl

; 2948 : 
; 2949 :         h->tls  = t;

  0027a	48 8b 44 24 30	 mov	 rax, QWORD PTR h$128467[rsp]
  0027f	48 8b 4c 24 28	 mov	 rcx, QWORD PTR t$[rsp]
  00284	48 89 48 60	 mov	 QWORD PTR [rax+96], rcx

; 2950 :         sb->tls = t;

  00288	48 8b 44 24 38	 mov	 rax, QWORD PTR sb$128468[rsp]
  0028d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR t$[rsp]
  00292	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 2951 :         rb->tls = t;

  00296	48 8b 44 24 48	 mov	 rax, QWORD PTR rb$128469[rsp]
  0029b	48 8b 4c 24 28	 mov	 rcx, QWORD PTR t$[rsp]
  002a0	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 2952 : 
; 2953 :         assert(&sb->w == sw);

  002a4	48 8b 44 24 38	 mov	 rax, QWORD PTR sb$128468[rsp]
  002a9	48 83 c0 40	 add	 rax, 64			; 00000040H
  002ad	48 3b 44 24 40	 cmp	 rax, QWORD PTR sw$128470[rsp]
  002b2	74 1c		 je	 SHORT $LN11@PyParallel@16
  002b4	41 b8 89 0b 00
	00		 mov	 r8d, 2953		; 00000b89H
  002ba	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  002c1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BK@MPNLKOFO@?$AA?$CG?$AAs?$AAb?$AA?9?$AA?$DO?$AAw?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAs?$AAw?$AA?$AA@
  002c8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  002ce	33 c0		 xor	 eax, eax
$LN11@PyParallel@16:

; 2954 :         assert(&rb->w == rw);

  002d0	48 8b 44 24 48	 mov	 rax, QWORD PTR rb$128469[rsp]
  002d5	48 83 c0 40	 add	 rax, 64			; 00000040H
  002d9	48 3b 44 24 50	 cmp	 rax, QWORD PTR rw$128478[rsp]
  002de	74 1c		 je	 SHORT $LN12@PyParallel@16
  002e0	41 b8 8a 0b 00
	00		 mov	 r8d, 2954		; 00000b8aH
  002e6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  002ed	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BK@IFKCBINM@?$AA?$CG?$AAr?$AAb?$AA?9?$AA?$DO?$AAw?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAr?$AAw?$AA?$AA@
  002f4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  002fa	33 c0		 xor	 eax, eax
$LN12@PyParallel@16:

; 2955 : 
; 2956 :         t->sbufs[i]     = sw;

  002fc	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  00301	48 8b 4c 24 28	 mov	 rcx, QWORD PTR t$[rsp]
  00306	48 8b 54 24 40	 mov	 rdx, QWORD PTR sw$128470[rsp]
  0030b	48 89 94 c1 d8
	01 00 00	 mov	 QWORD PTR [rcx+rax*8+472], rdx

; 2957 :         t->rbufs[i]     = rw;

  00313	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  00318	48 8b 4c 24 28	 mov	 rcx, QWORD PTR t$[rsp]
  0031d	48 8b 54 24 50	 mov	 rdx, QWORD PTR rw$128478[rsp]
  00322	48 89 94 c1 08
	18 00 00	 mov	 QWORD PTR [rcx+rax*8+6152], rdx

; 2958 :         t->snapshots[i] = h;

  0032a	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  0032f	48 8b 4c 24 28	 mov	 rcx, QWORD PTR t$[rsp]
  00334	48 8b 54 24 30	 mov	 rdx, QWORD PTR h$128467[rsp]
  00339	48 89 94 c1 40
	2e 00 00	 mov	 QWORD PTR [rcx+rax*8+11840], rdx

; 2959 :     }

  00341	e9 87 fe ff ff	 jmp	 $LN2@PyParallel@16
$LN1@PyParallel@16:

; 2960 : 
; 2961 :     t->sbuf_bitmap      = ~0;

  00346	48 8b 44 24 28	 mov	 rax, QWORD PTR t$[rsp]
  0034b	48 c7 80 d0 01
	00 00 ff ff ff
	ff		 mov	 QWORD PTR [rax+464], -1

; 2962 :     t->rbuf_bitmap      = ~0;

  00356	48 8b 44 24 28	 mov	 rax, QWORD PTR t$[rsp]
  0035b	48 c7 80 00 18
	00 00 ff ff ff
	ff		 mov	 QWORD PTR [rax+6144], -1

; 2963 :     t->snapshots_bitmap = ~0;

  00366	48 8b 44 24 28	 mov	 rax, QWORD PTR t$[rsp]
  0036b	48 c7 80 38 2e
	00 00 ff ff ff
	ff		 mov	 QWORD PTR [rax+11832], -1

; 2964 : 
; 2965 :     t->thread_id = _Py_get_current_thread_id();

  00376	65 8b 04 25 48
	00 00 00	 mov	 eax, DWORD PTR gs:72
  0037e	48 8b 4c 24 28	 mov	 rcx, QWORD PTR t$[rsp]
  00383	89 81 d4 00 00
	00		 mov	 DWORD PTR [rcx+212], eax

; 2966 :     t->snapshot_id = 0;

  00389	48 8b 44 24 28	 mov	 rax, QWORD PTR t$[rsp]
  0038e	48 c7 80 08 2e
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+11784], 0

; 2967 : 
; 2968 :     return 1;

  00399	b8 01 00 00 00	 mov	 eax, 1
$LN6@PyParallel@16:

; 2969 : }

  0039e	48 83 c4 68	 add	 rsp, 104		; 00000068H
  003a2	c3		 ret	 0
_PyParallel_InitTLS ENDP
_TEXT	ENDS
PUBLIC	??_C@_1BI@ILCIELPE@?$AAc?$AA?9?$AA?$DO?$AAi?$AAn?$AAs?$AAt?$AAa?$AAn?$AAc?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BO@BDJEFOOI@?$AAc?$AA?9?$AA?$DO?$AAh?$AAe?$AAa?$AAp?$AA_?$AAh?$AAa?$AAn?$AAd?$AAl?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BE@NAEPLPEN@?$AAc?$AA?9?$AA?$DO?$AAt?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1MI@EMIMEPOL@?$AAc?$AA?9?$AA?$DO?$AAe?$AAr?$AAr?$AAo?$AAr?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAc?$AA?9?$AA?$DO?$AAp?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAc?$AA?9?$AA?$DO?$AAd?$AAe?$AAc?$AAr@ ; `string'
PUBLIC	??_C@_0BP@NPBDICDC@TLS?5heap?5initialization?5failed?$AA@ ; `string'
PUBLIC	_PyParallel_EnteredCallback
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyParallel_EnteredCallback DD imagerel $LN12
	DD	imagerel $LN12+469
	DD	imagerel $unwind$_PyParallel_EnteredCallback
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyParallel_EnteredCallback DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT ??_C@_1BI@ILCIELPE@?$AAc?$AA?9?$AA?$DO?$AAi?$AAn?$AAs?$AAt?$AAa?$AAn?$AAc?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1BI@ILCIELPE@?$AAc?$AA?9?$AA?$DO?$AAi?$AAn?$AAs?$AAt?$AAa?$AAn?$AAc?$AAe?$AA?$AA@ DB 'c'
	DB	00H, '-', 00H, '>', 00H, 'i', 00H, 'n', 00H, 's', 00H, 't', 00H
	DB	'a', 00H, 'n', 00H, 'c', 00H, 'e', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BO@BDJEFOOI@?$AAc?$AA?9?$AA?$DO?$AAh?$AAe?$AAa?$AAp?$AA_?$AAh?$AAa?$AAn?$AAd?$AAl?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1BO@BDJEFOOI@?$AAc?$AA?9?$AA?$DO?$AAh?$AAe?$AAa?$AAp?$AA_?$AAh?$AAa?$AAn?$AAd?$AAl?$AAe?$AA?$AA@ DB 'c'
	DB	00H, '-', 00H, '>', 00H, 'h', 00H, 'e', 00H, 'a', 00H, 'p', 00H
	DB	'_', 00H, 'h', 00H, 'a', 00H, 'n', 00H, 'd', 00H, 'l', 00H, 'e'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1BE@NAEPLPEN@?$AAc?$AA?9?$AA?$DO?$AAt?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1BE@NAEPLPEN@?$AAc?$AA?9?$AA?$DO?$AAt?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?$AA@ DB 'c'
	DB	00H, '-', 00H, '>', 00H, 't', 00H, 's', 00H, 't', 00H, 'a', 00H
	DB	't', 00H, 'e', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1MI@EMIMEPOL@?$AAc?$AA?9?$AA?$DO?$AAe?$AAr?$AAr?$AAo?$AAr?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAc?$AA?9?$AA?$DO?$AAp?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAc?$AA?9?$AA?$DO?$AAd?$AAe?$AAc?$AAr@
CONST	SEGMENT
??_C@_1MI@EMIMEPOL@?$AAc?$AA?9?$AA?$DO?$AAe?$AAr?$AAr?$AAo?$AAr?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAc?$AA?9?$AA?$DO?$AAp?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAc?$AA?9?$AA?$DO?$AAd?$AAe?$AAc?$AAr@ DB 'c'
	DB	00H, '-', 00H, '>', 00H, 'e', 00H, 'r', 00H, 'r', 00H, 'o', 00H
	DB	'r', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'c', 00H, '-'
	DB	00H, '>', 00H, 'p', 00H, 's', 00H, 't', 00H, 'a', 00H, 't', 00H
	DB	'e', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'c', 00H, '-'
	DB	00H, '>', 00H, 'd', 00H, 'e', 00H, 'c', 00H, 'r', 00H, 'e', 00H
	DB	'f', 00H, 's', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'c'
	DB	00H, '-', 00H, '>', 00H, 'o', 00H, 'u', 00H, 't', 00H, 'g', 00H
	DB	'o', 00H, 'i', 00H, 'n', 00H, 'g', 00H, ' ', 00H, '&', 00H, '&'
	DB	00H, ' ', 00H, 'c', 00H, '-', 00H, '>', 00H, 'e', 00H, 'r', 00H
	DB	'r', 00H, 'b', 00H, 'a', 00H, 'c', 00H, 'k', 00H, '_', 00H, 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H, 't', 00H
	DB	'e', 00H, 'd', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'c'
	DB	00H, '-', 00H, '>', 00H, 'c', 00H, 'a', 00H, 'l', 00H, 'l', 00H
	DB	'b', 00H, 'a', 00H, 'c', 00H, 'k', 00H, '_', 00H, 'c', 00H, 'o'
	DB	00H, 'm', 00H, 'p', 00H, 'l', 00H, 'e', 00H, 't', 00H, 'e', 00H
	DB	'd', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@NPBDICDC@TLS?5heap?5initialization?5failed?$AA@
CONST	SEGMENT
??_C@_0BP@NPBDICDC@TLS?5heap?5initialization?5failed?$AA@ DB 'TLS heap in'
	DB	'itialization failed', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PyParallel_EnteredCallback
_TEXT	SEGMENT
s$ = 32
c$ = 64
instance$ = 72
_PyParallel_EnteredCallback PROC			; COMDAT

; 2973 : {

$LN12:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2974 :     Stats *s;
; 2975 : 
; 2976 :     ctx = c;

  0000e	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:ctx
  00013	8b c0		 mov	 eax, eax
  00015	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0001b	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00024	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  00028	48 8b 54 24 40	 mov	 rdx, QWORD PTR c$[rsp]
  0002d	48 89 14 08	 mov	 QWORD PTR [rax+rcx], rdx

; 2977 : 
; 2978 :     if (_PxNewThread) {

  00031	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:_PxNewThread
  00036	8b c0		 mov	 eax, eax
  00038	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0003e	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00047	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  0004b	83 3c 08 00	 cmp	 DWORD PTR [rax+rcx], 0
  0004f	74 36		 je	 SHORT $LN4@PyParallel@17

; 2979 :         if (!_PyParallel_InitTLS())

  00051	e8 00 00 00 00	 call	 _PyParallel_InitTLS
  00056	85 c0		 test	 eax, eax
  00058	75 0c		 jne	 SHORT $LN3@PyParallel@17

; 2980 :             Py_FatalError("TLS heap initialization failed");

  0005a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BP@NPBDICDC@TLS?5heap?5initialization?5failed?$AA@
  00061	e8 00 00 00 00	 call	 Py_FatalError
$LN3@PyParallel@17:

; 2981 :         _PxNewThread = 0;

  00066	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:_PxNewThread
  0006b	8b c0		 mov	 eax, eax
  0006d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00073	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0007c	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  00080	c7 04 08 00 00
	00 00		 mov	 DWORD PTR [rax+rcx], 0
$LN4@PyParallel@17:

; 2982 :     } else {
; 2983 :         /* xxx not a new thread */
; 2984 :     }
; 2985 : 
; 2986 :     assert(
; 2987 :         c->error                &&
; 2988 :         c->pstate               &&
; 2989 :         c->decrefs              &&
; 2990 :         c->outgoing             &&
; 2991 :         c->errback_completed    &&
; 2992 :         c->callback_completed
; 2993 :     );

  00087	48 8b 44 24 40	 mov	 rax, QWORD PTR c$[rsp]
  0008c	48 83 b8 28 33
	00 00 00	 cmp	 QWORD PTR [rax+13096], 0
  00094	74 4b		 je	 SHORT $LN7@PyParallel@17
  00096	48 8b 44 24 40	 mov	 rax, QWORD PTR c$[rsp]
  0009b	48 83 b8 e8 00
	00 00 00	 cmp	 QWORD PTR [rax+232], 0
  000a3	74 3c		 je	 SHORT $LN7@PyParallel@17
  000a5	48 8b 44 24 40	 mov	 rax, QWORD PTR c$[rsp]
  000aa	48 83 b8 48 33
	00 00 00	 cmp	 QWORD PTR [rax+13128], 0
  000b2	74 2d		 je	 SHORT $LN7@PyParallel@17
  000b4	48 8b 44 24 40	 mov	 rax, QWORD PTR c$[rsp]
  000b9	48 83 b8 40 33
	00 00 00	 cmp	 QWORD PTR [rax+13120], 0
  000c1	74 1e		 je	 SHORT $LN7@PyParallel@17
  000c3	48 8b 44 24 40	 mov	 rax, QWORD PTR c$[rsp]
  000c8	48 83 b8 38 33
	00 00 00	 cmp	 QWORD PTR [rax+13112], 0
  000d0	74 0f		 je	 SHORT $LN7@PyParallel@17
  000d2	48 8b 44 24 40	 mov	 rax, QWORD PTR c$[rsp]
  000d7	48 83 b8 30 33
	00 00 00	 cmp	 QWORD PTR [rax+13104], 0
  000df	75 1c		 jne	 SHORT $LN8@PyParallel@17
$LN7@PyParallel@17:
  000e1	41 b8 b1 0b 00
	00		 mov	 r8d, 2993		; 00000bb1H
  000e7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  000ee	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1MI@EMIMEPOL@?$AAc?$AA?9?$AA?$DO?$AAe?$AAr?$AAr?$AAo?$AAr?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAc?$AA?9?$AA?$DO?$AAp?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAc?$AA?9?$AA?$DO?$AAd?$AAe?$AAc?$AAr@
  000f5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000fb	33 c0		 xor	 eax, eax
$LN8@PyParallel@17:

; 2994 : 
; 2995 :     s = &(c->stats);

  000fd	48 8b 44 24 40	 mov	 rax, QWORD PTR c$[rsp]
  00102	48 05 00 01 00
	00		 add	 rax, 256		; 00000100H
  00108	48 89 44 24 20	 mov	 QWORD PTR s$[rsp], rax

; 2996 :     s->entered = _Py_rdtsc();

  0010d	0f 31		 rdtsc
  0010f	48 c1 e2 20	 shl	 rdx, 32			; 00000020H
  00113	48 0b c2	 or	 rax, rdx
  00116	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  0011b	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 2997 :     assert(c->tstate);

  0011f	48 8b 44 24 40	 mov	 rax, QWORD PTR c$[rsp]
  00124	48 83 b8 e0 00
	00 00 00	 cmp	 QWORD PTR [rax+224], 0
  0012c	75 1c		 jne	 SHORT $LN9@PyParallel@17
  0012e	41 b8 b5 0b 00
	00		 mov	 r8d, 2997		; 00000bb5H
  00134	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0013b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BE@NAEPLPEN@?$AAc?$AA?9?$AA?$DO?$AAt?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?$AA@
  00142	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00148	33 c0		 xor	 eax, eax
$LN9@PyParallel@17:

; 2998 :     assert(c->heap_handle);

  0014a	48 8b 44 24 40	 mov	 rax, QWORD PTR c$[rsp]
  0014f	48 83 78 10 00	 cmp	 QWORD PTR [rax+16], 0
  00154	75 1c		 jne	 SHORT $LN10@PyParallel@17
  00156	41 b8 b6 0b 00
	00		 mov	 r8d, 2998		; 00000bb6H
  0015c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00163	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BO@BDJEFOOI@?$AAc?$AA?9?$AA?$DO?$AAh?$AAe?$AAa?$AAp?$AA_?$AAh?$AAa?$AAn?$AAd?$AAl?$AAe?$AA?$AA@
  0016a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00170	33 c0		 xor	 eax, eax
$LN10@PyParallel@17:

; 2999 : 
; 3000 :     if (instance)

  00172	48 83 7c 24 48
	00		 cmp	 QWORD PTR instance$[rsp], 0
  00178	74 11		 je	 SHORT $LN1@PyParallel@17

; 3001 :         c->instance = instance;

  0017a	48 8b 44 24 40	 mov	 rax, QWORD PTR c$[rsp]
  0017f	48 8b 4c 24 48	 mov	 rcx, QWORD PTR instance$[rsp]
  00184	48 89 88 f0 00
	00 00		 mov	 QWORD PTR [rax+240], rcx
$LN1@PyParallel@17:

; 3002 : 
; 3003 :     assert(c->instance);

  0018b	48 8b 44 24 40	 mov	 rax, QWORD PTR c$[rsp]
  00190	48 83 b8 f0 00
	00 00 00	 cmp	 QWORD PTR [rax+240], 0
  00198	75 1c		 jne	 SHORT $LN11@PyParallel@17
  0019a	41 b8 bb 0b 00
	00		 mov	 r8d, 3003		; 00000bbbH
  001a0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  001a7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BI@ILCIELPE@?$AAc?$AA?9?$AA?$DO?$AAi?$AAn?$AAs?$AAt?$AAa?$AAn?$AAc?$AAe?$AA?$AA@
  001ae	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001b4	33 c0		 xor	 eax, eax
$LN11@PyParallel@17:

; 3004 :     c->pstate->thread_id = _Py_get_current_thread_id();

  001b6	65 8b 04 25 48
	00 00 00	 mov	 eax, DWORD PTR gs:72
  001be	48 8b 4c 24 40	 mov	 rcx, QWORD PTR c$[rsp]
  001c3	48 8b 89 e8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+232]
  001ca	89 81 90 00 00
	00		 mov	 DWORD PTR [rcx+144], eax

; 3005 : }

  001d0	48 83 c4 38	 add	 rsp, 56			; 00000038H
  001d4	c3		 ret	 0
_PyParallel_EnteredCallback ENDP
_TEXT	ENDS
PUBLIC	_PyParallel_EnteredIOCallback
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyParallel_EnteredIOCallback DD imagerel $LN4
	DD	imagerel $LN4+101
	DD	imagerel $unwind$_PyParallel_EnteredIOCallback
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyParallel_EnteredIOCallback DD 011801H
	DD	04218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _PyParallel_EnteredIOCallback
_TEXT	SEGMENT
c$ = 48
instance$ = 56
overlapped$ = 64
io_result$ = 72
nbytes$ = 80
tp_io$ = 88
_PyParallel_EnteredIOCallback PROC			; COMDAT

; 3016 : {

$LN4:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 3017 :     _PyParallel_EnteredCallback(c, instance);

  00018	48 8b 54 24 38	 mov	 rdx, QWORD PTR instance$[rsp]
  0001d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR c$[rsp]
  00022	e8 00 00 00 00	 call	 _PyParallel_EnteredCallback

; 3018 : 
; 3019 :     c->io_result = io_result;

  00027	48 8b 44 24 30	 mov	 rax, QWORD PTR c$[rsp]
  0002c	8b 4c 24 48	 mov	 ecx, DWORD PTR io_result$[rsp]
  00030	89 88 94 32 00
	00		 mov	 DWORD PTR [rax+12948], ecx

; 3020 :     c->io_nbytes = nbytes;

  00036	48 8b 44 24 30	 mov	 rax, QWORD PTR c$[rsp]
  0003b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR nbytes$[rsp]
  00040	48 89 88 98 32
	00 00		 mov	 QWORD PTR [rax+12952], rcx

; 3021 :     if (overlapped)

  00047	48 83 7c 24 40
	00		 cmp	 QWORD PTR overlapped$[rsp], 0
  0004d	74 11		 je	 SHORT $LN1@PyParallel@18

; 3022 :         c->ol = overlapped;

  0004f	48 8b 44 24 30	 mov	 rax, QWORD PTR c$[rsp]
  00054	48 8b 4c 24 40	 mov	 rcx, QWORD PTR overlapped$[rsp]
  00059	48 89 88 d0 32
	00 00		 mov	 QWORD PTR [rax+13008], rcx
$LN1@PyParallel@18:

; 3023 :     /*
; 3024 :     if (overlapped)
; 3025 :         assert(overlapped == &(c->overlapped));
; 3026 :     if (tp_io)
; 3027 :         assert(tp_io == c->tp_io);
; 3028 :         */
; 3029 : }

  00060	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00064	c3		 ret	 0
_PyParallel_EnteredIOCallback ENDP
_TEXT	ENDS
PUBLIC	_PyParallel_ExitingCallback
; Function compile flags: /Odtp
;	COMDAT _PyParallel_ExitingCallback
_TEXT	SEGMENT
c$ = 8
_PyParallel_ExitingCallback PROC			; COMDAT

; 3033 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 3034 :     c->stats.exited = _Py_rdtsc();

  00005	0f 31		 rdtsc
  00007	48 c1 e2 20	 shl	 rdx, 32			; 00000020H
  0000b	48 0b c2	 or	 rax, rdx
  0000e	48 8b 4c 24 08	 mov	 rcx, QWORD PTR c$[rsp]
  00013	48 89 81 10 01
	00 00		 mov	 QWORD PTR [rcx+272], rax

; 3035 : }

  0001a	c3		 ret	 0
_PyParallel_ExitingCallback ENDP
_TEXT	ENDS
PUBLIC	_PyParallel_ExitingIOCallback
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyParallel_ExitingIOCallback DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$_PyParallel_ExitingIOCallback
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyParallel_ExitingIOCallback DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _PyParallel_ExitingIOCallback
_TEXT	SEGMENT
c$ = 48
_PyParallel_ExitingIOCallback PROC			; COMDAT

; 3039 : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 3040 :     _PyParallel_ExitingCallback(c);

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR c$[rsp]
  0000e	e8 00 00 00 00	 call	 _PyParallel_ExitingCallback

; 3041 : }

  00013	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00017	c3		 ret	 0
_PyParallel_ExitingIOCallback ENDP
_TEXT	ENDS
PUBLIC	??_C@_1CK@NNPNEEPB@?$AA?$CB?$AAp?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAe?$AAx?$AAc?$AA_?$AAt?$AAy?$AAp?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1NA@IBMPMCOM@?$AAc?$AA?9?$AA?$DO?$AAw?$AAa?$AAi?$AAt?$AA_?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAW?$AAA?$AAI?$AAT?$AA_?$AAO?$AAB?$AAJ?$AAE?$AAC?$AAT?$AA_?$AA0?$AA?5@ ; `string'
PUBLIC	_PyParallel_WorkCallback
EXTRN	PyObject_Call:PROC
_BSS	SEGMENT
PyExc_WaitTimeoutError DQ 01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyParallel_WorkCallback DD imagerel $LN28
	DD	imagerel $LN28+1831
	DD	imagerel $unwind$_PyParallel_WorkCallback
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyParallel_WorkCallback DD 021101H
	DD	0150111H
xdata	ENDS
;	COMDAT ??_C@_1CK@NNPNEEPB@?$AA?$CB?$AAp?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAe?$AAx?$AAc?$AA_?$AAt?$AAy?$AAp?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1CK@NNPNEEPB@?$AA?$CB?$AAp?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAe?$AAx?$AAc?$AA_?$AAt?$AAy?$AAp?$AAe?$AA?$AA@ DB '!'
	DB	00H, 'p', 00H, 's', 00H, 't', 00H, 'a', 00H, 't', 00H, 'e', 00H
	DB	'-', 00H, '>', 00H, 'c', 00H, 'u', 00H, 'r', 00H, 'e', 00H, 'x'
	DB	00H, 'c', 00H, '_', 00H, 't', 00H, 'y', 00H, 'p', 00H, 'e', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1NA@IBMPMCOM@?$AAc?$AA?9?$AA?$DO?$AAw?$AAa?$AAi?$AAt?$AA_?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAW?$AAA?$AAI?$AAT?$AA_?$AAO?$AAB?$AAJ?$AAE?$AAC?$AAT?$AA_?$AA0?$AA?5@
CONST	SEGMENT
??_C@_1NA@IBMPMCOM@?$AAc?$AA?9?$AA?$DO?$AAw?$AAa?$AAi?$AAt?$AA_?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAW?$AAA?$AAI?$AAT?$AA_?$AAO?$AAB?$AAJ?$AAE?$AAC?$AAT?$AA_?$AA0?$AA?5@ DB 'c'
	DB	00H, '-', 00H, '>', 00H, 'w', 00H, 'a', 00H, 'i', 00H, 't', 00H
	DB	'_', 00H, 'r', 00H, 'e', 00H, 's', 00H, 'u', 00H, 'l', 00H, 't'
	DB	00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'W', 00H, 'A', 00H
	DB	'I', 00H, 'T', 00H, '_', 00H, 'O', 00H, 'B', 00H, 'J', 00H, 'E'
	DB	00H, 'C', 00H, 'T', 00H, '_', 00H, '0', 00H, ' ', 00H, '|', 00H
	DB	'|', 00H, ' ', 00H, 'c', 00H, '-', 00H, '>', 00H, 'w', 00H, 'a'
	DB	00H, 'i', 00H, 't', 00H, '_', 00H, 'r', 00H, 'e', 00H, 's', 00H
	DB	'u', 00H, 'l', 00H, 't', 00H, ' ', 00H, '=', 00H, '=', 00H, ' '
	DB	00H, 'W', 00H, 'A', 00H, 'I', 00H, 'T', 00H, '_', 00H, 'T', 00H
	DB	'I', 00H, 'M', 00H, 'E', 00H, 'O', 00H, 'U', 00H, 'T', 00H, ' '
	DB	00H, '|', 00H, '|', 00H, ' ', 00H, 'c', 00H, '-', 00H, '>', 00H
	DB	'w', 00H, 'a', 00H, 'i', 00H, 't', 00H, '_', 00H, 'r', 00H, 'e'
	DB	00H, 's', 00H, 'u', 00H, 'l', 00H, 't', 00H, ' ', 00H, '=', 00H
	DB	'=', 00H, ' ', 00H, 'W', 00H, 'A', 00H, 'I', 00H, 'T', 00H, '_'
	DB	00H, 'A', 00H, 'B', 00H, 'A', 00H, 'N', 00H, 'D', 00H, 'O', 00H
	DB	'N', 00H, 'E', 00H, 'D', 00H, '_', 00H, '0', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PyParallel_WorkCallback
_TEXT	SEGMENT
args$ = 32
callback_args$ = 40
pstate$ = 48
s$ = 56
pending$ = 64
px$ = 72
callback_kwds$ = 80
kwds$ = 88
done$ = 96
inflight$ = 104
errback$ = 112
r$ = 120
c$ = 128
callback$ = 136
func$ = 144
exc$128592 = 152
instance$ = 176
context$ = 184
_PyParallel_WorkCallback PROC				; COMDAT

; 3046 : {

$LN28:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 3047 :     Context  *c = (Context *)context;

  00011	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR context$[rsp]
  00019	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR c$[rsp], rax

; 3048 :     Stats    *s;
; 3049 :     PxState  *px;
; 3050 :     PyObject *r;
; 3051 :     PyObject *func = NULL,

  00021	48 c7 84 24 90
	00 00 00 00 00
	00 00		 mov	 QWORD PTR func$[rsp], 0

; 3052 :              *args = NULL,

  0002d	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR args$[rsp], 0

; 3053 :              *kwds = NULL,

  00036	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR kwds$[rsp], 0

; 3054 :              *callback = NULL,

  0003f	48 c7 84 24 88
	00 00 00 00 00
	00 00		 mov	 QWORD PTR callback$[rsp], 0

; 3055 :              *callback_args = NULL,

  0004b	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR callback_args$[rsp], 0

; 3056 :              *callback_kwds = NULL,

  00054	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR callback_kwds$[rsp], 0

; 3057 :              *errback = NULL;

  0005d	48 c7 44 24 70
	00 00 00 00	 mov	 QWORD PTR errback$[rsp], 0

; 3058 : 
; 3059 :     PyThreadState *pstate;
; 3060 : 
; 3061 :     volatile long       *pending;
; 3062 :     volatile long       *inflight;
; 3063 :     volatile long long  *done;
; 3064 : 
; 3065 :     _PyParallel_EnteredCallback(c, instance);

  00066	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR instance$[rsp]
  0006e	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  00076	e8 00 00 00 00	 call	 _PyParallel_EnteredCallback

; 3066 : 
; 3067 :     s = &(c->stats);

  0007b	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  00083	48 05 00 01 00
	00		 add	 rax, 256		; 00000100H
  00089	48 89 44 24 38	 mov	 QWORD PTR s$[rsp], rax

; 3068 :     px = (PxState *)c->tstate->px;

  0008e	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  00096	48 8b 80 e0 00
	00 00		 mov	 rax, QWORD PTR [rax+224]
  0009d	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  000a4	48 89 44 24 48	 mov	 QWORD PTR px$[rsp], rax

; 3069 : 
; 3070 :     if (c->tp_wait) {

  000a9	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  000b1	48 83 b8 68 32
	00 00 00	 cmp	 QWORD PTR [rax+12904], 0
  000b9	74 35		 je	 SHORT $LN20@PyParallel@19

; 3071 :         pending = &(px->waits_pending);

  000bb	48 8b 44 24 48	 mov	 rax, QWORD PTR px$[rsp]
  000c0	48 05 28 01 00
	00		 add	 rax, 296		; 00000128H
  000c6	48 89 44 24 40	 mov	 QWORD PTR pending$[rsp], rax

; 3072 :         inflight = &(px->waits_inflight);

  000cb	48 8b 44 24 48	 mov	 rax, QWORD PTR px$[rsp]
  000d0	48 05 2c 01 00
	00		 add	 rax, 300		; 0000012cH
  000d6	48 89 44 24 68	 mov	 QWORD PTR inflight$[rsp], rax

; 3073 :         done = &(px->waits_done);

  000db	48 8b 44 24 48	 mov	 rax, QWORD PTR px$[rsp]
  000e0	48 05 30 01 00
	00		 add	 rax, 304		; 00000130H
  000e6	48 89 44 24 60	 mov	 QWORD PTR done$[rsp], rax
  000eb	e9 b8 00 00 00	 jmp	 $LN19@PyParallel@19
$LN20@PyParallel@19:

; 3074 :     } else if (c->tp_io) {

  000f0	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  000f8	48 83 b8 88 32
	00 00 00	 cmp	 QWORD PTR [rax+12936], 0
  00100	74 32		 je	 SHORT $LN18@PyParallel@19

; 3075 :         pending = &(px->io_pending);

  00102	48 8b 44 24 48	 mov	 rax, QWORD PTR px$[rsp]
  00107	48 05 58 01 00
	00		 add	 rax, 344		; 00000158H
  0010d	48 89 44 24 40	 mov	 QWORD PTR pending$[rsp], rax

; 3076 :         inflight = &(px->io_inflight);

  00112	48 8b 44 24 48	 mov	 rax, QWORD PTR px$[rsp]
  00117	48 05 5c 01 00
	00		 add	 rax, 348		; 0000015cH
  0011d	48 89 44 24 68	 mov	 QWORD PTR inflight$[rsp], rax

; 3077 :         done = &(px->io_done);

  00122	48 8b 44 24 48	 mov	 rax, QWORD PTR px$[rsp]
  00127	48 05 60 01 00
	00		 add	 rax, 352		; 00000160H
  0012d	48 89 44 24 60	 mov	 QWORD PTR done$[rsp], rax
  00132	eb 74		 jmp	 SHORT $LN17@PyParallel@19
$LN18@PyParallel@19:

; 3078 :     } else if (c->tp_timer) {

  00134	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  0013c	48 83 b8 e8 32
	00 00 00	 cmp	 QWORD PTR [rax+13032], 0
  00144	74 32		 je	 SHORT $LN16@PyParallel@19

; 3079 :         pending = &(px->timers_pending);

  00146	48 8b 44 24 48	 mov	 rax, QWORD PTR px$[rsp]
  0014b	48 05 40 01 00
	00		 add	 rax, 320		; 00000140H
  00151	48 89 44 24 40	 mov	 QWORD PTR pending$[rsp], rax

; 3080 :         inflight = &(px->timers_inflight);

  00156	48 8b 44 24 48	 mov	 rax, QWORD PTR px$[rsp]
  0015b	48 05 44 01 00
	00		 add	 rax, 324		; 00000144H
  00161	48 89 44 24 68	 mov	 QWORD PTR inflight$[rsp], rax

; 3081 :         done = &(px->timers_done);

  00166	48 8b 44 24 48	 mov	 rax, QWORD PTR px$[rsp]
  0016b	48 05 48 01 00
	00		 add	 rax, 328		; 00000148H
  00171	48 89 44 24 60	 mov	 QWORD PTR done$[rsp], rax

; 3082 :     } else {

  00176	eb 30		 jmp	 SHORT $LN15@PyParallel@19
$LN16@PyParallel@19:

; 3083 :         pending = &(px->pending);

  00178	48 8b 44 24 48	 mov	 rax, QWORD PTR px$[rsp]
  0017d	48 05 10 01 00
	00		 add	 rax, 272		; 00000110H
  00183	48 89 44 24 40	 mov	 QWORD PTR pending$[rsp], rax

; 3084 :         inflight = &(px->inflight);

  00188	48 8b 44 24 48	 mov	 rax, QWORD PTR px$[rsp]
  0018d	48 05 14 01 00
	00		 add	 rax, 276		; 00000114H
  00193	48 89 44 24 68	 mov	 QWORD PTR inflight$[rsp], rax

; 3085 :         done = &(px->done);

  00198	48 8b 44 24 48	 mov	 rax, QWORD PTR px$[rsp]
  0019d	48 05 18 01 00
	00		 add	 rax, 280		; 00000118H
  001a3	48 89 44 24 60	 mov	 QWORD PTR done$[rsp], rax
$LN15@PyParallel@19:
$LN17@PyParallel@19:
$LN19@PyParallel@19:

; 3086 :     }
; 3087 : 
; 3088 :     InterlockedDecrement(pending);

  001a8	48 8b 44 24 40	 mov	 rax, QWORD PTR pending$[rsp]
  001ad	f0 ff 08	 lock dec DWORD PTR [rax]

; 3089 :     InterlockedIncrement(inflight);

  001b0	48 8b 44 24 68	 mov	 rax, QWORD PTR inflight$[rsp]
  001b5	f0 ff 00	 lock inc DWORD PTR [rax]

; 3090 : 
; 3091 :     pstate = c->pstate;

  001b8	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  001c0	48 8b 80 e8 00
	00 00		 mov	 rax, QWORD PTR [rax+232]
  001c7	48 89 44 24 30	 mov	 QWORD PTR pstate$[rsp], rax

; 3092 : 
; 3093 :     func = c->func;

  001cc	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  001d4	48 8b 80 38 32
	00 00		 mov	 rax, QWORD PTR [rax+12856]
  001db	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR func$[rsp], rax

; 3094 :     args = c->args;

  001e3	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  001eb	48 8b 80 40 32
	00 00		 mov	 rax, QWORD PTR [rax+12864]
  001f2	48 89 44 24 20	 mov	 QWORD PTR args$[rsp], rax

; 3095 :     kwds = c->kwds;

  001f7	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  001ff	48 8b 80 48 32
	00 00		 mov	 rax, QWORD PTR [rax+12872]
  00206	48 89 44 24 58	 mov	 QWORD PTR kwds$[rsp], rax

; 3096 : 
; 3097 :     callback = c->callback;

  0020b	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  00213	48 8b 80 50 32
	00 00		 mov	 rax, QWORD PTR [rax+12880]
  0021a	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR callback$[rsp], rax

; 3098 :     errback = c->errback;

  00222	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  0022a	48 8b 80 58 32
	00 00		 mov	 rax, QWORD PTR [rax+12888]
  00231	48 89 44 24 70	 mov	 QWORD PTR errback$[rsp], rax

; 3099 : 
; 3100 :     if (c->tp_wait) {

  00236	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  0023e	48 83 b8 68 32
	00 00 00	 cmp	 QWORD PTR [rax+12904], 0
  00246	0f 84 9f 00 00
	00		 je	 $LN14@PyParallel@19

; 3101 :         assert(
; 3102 :             c->wait_result == WAIT_OBJECT_0 ||
; 3103 :             c->wait_result == WAIT_TIMEOUT  ||
; 3104 :             c->wait_result == WAIT_ABANDONED_0
; 3105 :         );

  0024c	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  00254	83 b8 70 32 00
	00 00		 cmp	 DWORD PTR [rax+12912], 0
  0025b	74 44		 je	 SHORT $LN23@PyParallel@19
  0025d	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  00265	81 b8 70 32 00
	00 02 01 00 00	 cmp	 DWORD PTR [rax+12912], 258 ; 00000102H
  0026f	74 30		 je	 SHORT $LN23@PyParallel@19
  00271	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  00279	81 b8 70 32 00
	00 80 00 00 00	 cmp	 DWORD PTR [rax+12912], 128 ; 00000080H
  00283	74 1c		 je	 SHORT $LN23@PyParallel@19
  00285	41 b8 21 0c 00
	00		 mov	 r8d, 3105		; 00000c21H
  0028b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00292	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1NA@IBMPMCOM@?$AAc?$AA?9?$AA?$DO?$AAw?$AAa?$AAi?$AAt?$AA_?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAW?$AAA?$AAI?$AAT?$AA_?$AAO?$AAB?$AAJ?$AAE?$AAC?$AAT?$AA_?$AA0?$AA?5@
  00299	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0029f	33 c0		 xor	 eax, eax
$LN23@PyParallel@19:

; 3106 :         if (c->wait_result == WAIT_OBJECT_0)

  002a1	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  002a9	83 b8 70 32 00
	00 00		 cmp	 DWORD PTR [rax+12912], 0
  002b0	75 04		 jne	 SHORT $LN13@PyParallel@19

; 3107 :             goto start;

  002b2	eb 6b		 jmp	 SHORT $start$128576
  002b4	eb 33		 jmp	 SHORT $LN12@PyParallel@19
$LN13@PyParallel@19:

; 3108 :         else if (c->wait_result == WAIT_TIMEOUT) {

  002b6	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  002be	81 b8 70 32 00
	00 02 01 00 00	 cmp	 DWORD PTR [rax+12912], 258 ; 00000102H
  002c8	75 13		 jne	 SHORT $LN11@PyParallel@19

; 3109 :             PyErr_SetNone(PyExc_WaitTimeoutError);

  002ca	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_WaitTimeoutError
  002d1	e8 00 00 00 00	 call	 PyErr_SetNone

; 3110 :             goto errback;

  002d6	e9 e0 01 00 00	 jmp	 $errback$128579

; 3111 :         } else {

  002db	eb 0c		 jmp	 SHORT $LN10@PyParallel@19
$LN11@PyParallel@19:

; 3112 :             PyErr_SetFromWindowsErr(0);

  002dd	33 c9		 xor	 ecx, ecx
  002df	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr

; 3113 :             goto errback;

  002e4	e9 d2 01 00 00	 jmp	 $errback$128579
$LN10@PyParallel@19:
$LN12@PyParallel@19:

; 3114 :         }
; 3115 :     } /* else if (c->tp_io && c->io_type == Px_IOTYPE_FILE) {

  002e9	eb 34		 jmp	 SHORT $LN9@PyParallel@19
$LN14@PyParallel@19:

; 3116 :         PxListItem *item;
; 3117 :         PyObject *obj;
; 3118 :         PxIO *io;
; 3119 :         ULONG_PTR nbytes;
; 3120 :         assert(
; 3121 :             (c->io_type & (PyAsync_IO_WRITE)) &&
; 3122 :             c->overlapped != NULL &&
; 3123 :             c->io != NULL
; 3124 :         );
; 3125 :         io = c->io;
; 3126 :         obj = io->obj;
; 3127 :         nbytes = c->io_nbytes;
; 3128 :         if (PxIO_IS_ONDEMAND(io))
; 3129 :             PxList_Push(px->io_ondemand, E2I(io));
; 3130 :         else {
; 3131 :             assert(PxIO_IS_PREALLOC(io));
; 3132 :             memset(&(io->overlapped), 0, sizeof(OVERLAPPED));
; 3133 :             io->obj = NULL;
; 3134 :             PxList_Push(px->io_free, E2I(io));
; 3135 :             SetEvent(px->io_free_wakeup);
; 3136 :         }
; 3137 : 
; 3138 :         item = _PyHeap_NewListItem(c);
; 3139 :         if (!item) {
; 3140 :             PyErr_NoMemory();
; 3141 :             goto error;
; 3142 :         }
; 3143 :         item->p1 = obj;
; 3144 :         PxList_Push(c->decrefs, item);
; 3145 : 
; 3146 :         if (c->io_result == NO_ERROR) {
; 3147 :             if (!c->callback)
; 3148 :                 goto after_callback;
; 3149 :             args = PyTuple_Pack(2, obj, nbytes);
; 3150 :             goto start_callback;
; 3151 :         } else {
; 3152 :             PyErr_SetFromWindowsErr(c->io_result);
; 3153 :             goto errback;
; 3154 :         }
; 3155 :         assert(0);
; 3156 :     } else if (c->tp_io && c->io_type == Px_IOTYPE_SOCKET) {
; 3157 :         PxSocket *s = (PxSocket *)c->io_obj;
; 3158 :         switch (s->io_op) {
; 3159 :             case PxSocket_IO_CONNECT:
; 3160 :                 READ_LOCK(s);
; 3161 :                 func = s->connection_made;
; 3162 :                 READ_UNLOCK(s);
; 3163 :                 args = Py_BuildValue("(O)", s);
; 3164 :                 break;
; 3165 :             case PxSocket_IO_READ:
; 3166 :                 func = s->data_received;
; 3167 :                 if (!func)
; 3168 :                     break;
; 3169 :         }
; 3170 :         READ_UNLOCK(s);
; 3171 : 
; 3172 :     } */ else if (c->tp_timer) {

  002eb	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  002f3	48 83 b8 e8 32
	00 00 00	 cmp	 QWORD PTR [rax+13032], 0
  002fb	74 22		 je	 SHORT $LN8@PyParallel@19

; 3173 :         assert(0);

  002fd	33 c0		 xor	 eax, eax
  002ff	85 c0		 test	 eax, eax
  00301	75 1c		 jne	 SHORT $LN24@PyParallel@19
  00303	41 b8 65 0c 00
	00		 mov	 r8d, 3173		; 00000c65H
  00309	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00310	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_13COJANIEC@?$AA0?$AA?$AA@
  00317	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0031d	33 c0		 xor	 eax, eax
$LN24@PyParallel@19:
$LN8@PyParallel@19:
$LN9@PyParallel@19:
$start$128576:

; 3174 :     }
; 3175 : 
; 3176 : start:
; 3177 :     s->start = _Py_rdtsc();

  0031f	0f 31		 rdtsc
  00321	48 c1 e2 20	 shl	 rdx, 32			; 00000020H
  00325	48 0b c2	 or	 rax, rdx
  00328	48 8b 4c 24 38	 mov	 rcx, QWORD PTR s$[rsp]
  0032d	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax

; 3178 :     c->result = PyObject_Call(c->func, c->args, c->kwds);

  00331	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  00339	4c 8b 80 48 32
	00 00		 mov	 r8, QWORD PTR [rax+12872]
  00340	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  00348	48 8b 90 40 32
	00 00		 mov	 rdx, QWORD PTR [rax+12864]
  0034f	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  00357	48 8b 88 38 32
	00 00		 mov	 rcx, QWORD PTR [rax+12856]
  0035e	e8 00 00 00 00	 call	 PyObject_Call
  00363	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  0036b	48 89 81 60 32
	00 00		 mov	 QWORD PTR [rcx+12896], rax

; 3179 :     s->end = _Py_rdtsc();

  00372	0f 31		 rdtsc
  00374	48 c1 e2 20	 shl	 rdx, 32			; 00000020H
  00378	48 0b c2	 or	 rax, rdx
  0037b	48 8b 4c 24 38	 mov	 rcx, QWORD PTR s$[rsp]
  00380	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 3180 : 
; 3181 :     if (c->result) {

  00384	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  0038c	48 83 b8 60 32
	00 00 00	 cmp	 QWORD PTR [rax+12896], 0
  00394	0f 84 21 01 00
	00		 je	 $LN7@PyParallel@19

; 3182 :         assert(!pstate->curexc_type);

  0039a	48 8b 44 24 30	 mov	 rax, QWORD PTR pstate$[rsp]
  0039f	48 83 78 48 00	 cmp	 QWORD PTR [rax+72], 0
  003a4	74 1c		 je	 SHORT $LN25@PyParallel@19
  003a6	41 b8 6e 0c 00
	00		 mov	 r8d, 3182		; 00000c6eH
  003ac	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  003b3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@NNPNEEPB@?$AA?$CB?$AAp?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAe?$AAx?$AAc?$AA_?$AAt?$AAy?$AAp?$AAe?$AA?$AA@
  003ba	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  003c0	33 c0		 xor	 eax, eax
$LN25@PyParallel@19:

; 3183 :         if (c->callback) {

  003c2	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  003ca	48 83 b8 50 32
	00 00 00	 cmp	 QWORD PTR [rax+12880], 0
  003d2	74 5e		 je	 SHORT $LN6@PyParallel@19

; 3184 :             if (!args)

  003d4	48 83 7c 24 20
	00		 cmp	 QWORD PTR args$[rsp], 0
  003da	75 20		 jne	 SHORT $LN5@PyParallel@19

; 3185 :                 args = Py_BuildValue("(O)", c->result);

  003dc	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  003e4	48 8b 90 60 32
	00 00		 mov	 rdx, QWORD PTR [rax+12896]
  003eb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03IELNPCCE@?$CIO?$CJ?$AA@
  003f2	e8 00 00 00 00	 call	 Py_BuildValue
  003f7	48 89 44 24 20	 mov	 QWORD PTR args$[rsp], rax
$LN5@PyParallel@19:

; 3186 :             r = PyObject_CallObject(c->callback, args);

  003fc	48 8b 54 24 20	 mov	 rdx, QWORD PTR args$[rsp]
  00401	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  00409	48 8b 88 50 32
	00 00		 mov	 rcx, QWORD PTR [rax+12880]
  00410	e8 00 00 00 00	 call	 PyObject_CallObject
  00415	48 89 44 24 78	 mov	 QWORD PTR r$[rsp], rax

; 3187 :             if (null_with_exc_or_non_none_return_type(r, pstate))

  0041a	48 8b 54 24 30	 mov	 rdx, QWORD PTR pstate$[rsp]
  0041f	48 8b 4c 24 78	 mov	 rcx, QWORD PTR r$[rsp]
  00424	e8 00 00 00 00	 call	 null_with_exc_or_non_none_return_type
  00429	85 c0		 test	 eax, eax
  0042b	74 05		 je	 SHORT $LN4@PyParallel@19

; 3188 :                 goto errback;

  0042d	e9 89 00 00 00	 jmp	 $errback$128579
$LN4@PyParallel@19:
$LN6@PyParallel@19:

; 3189 :         }
; 3190 :         c->callback_completed->from = c;

  00432	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  0043a	48 8b 80 30 33
	00 00		 mov	 rax, QWORD PTR [rax+13104]
  00441	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  00449	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 3191 :         PxList_TimestampItem(c->callback_completed);

  0044d	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  00455	48 8b 88 30 33
	00 00		 mov	 rcx, QWORD PTR [rax+13104]
  0045c	e8 00 00 00 00	 call	 PxList_TimestampItem

; 3192 :         InterlockedExchange(&(c->done), 1);

  00461	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  00469	48 05 04 38 00
	00		 add	 rax, 14340		; 00003804H
  0046f	b9 01 00 00 00	 mov	 ecx, 1
  00474	87 08		 xchg	 DWORD PTR [rax], ecx

; 3193 :         InterlockedIncrement64(done);

  00476	48 8b 44 24 60	 mov	 rax, QWORD PTR done$[rsp]
  0047b	f0 48 ff 00	 lock inc QWORD PTR [rax]

; 3194 :         InterlockedDecrement(inflight);

  0047f	48 8b 44 24 68	 mov	 rax, QWORD PTR inflight$[rsp]
  00484	f0 ff 08	 lock dec DWORD PTR [rax]

; 3195 :         PxList_Push(px->completed_callbacks, c->callback_completed);

  00487	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  0048f	48 8b 90 30 33
	00 00		 mov	 rdx, QWORD PTR [rax+13104]
  00496	48 8b 44 24 48	 mov	 rax, QWORD PTR px$[rsp]
  0049b	48 8b 48 10	 mov	 rcx, QWORD PTR [rax+16]
  0049f	e8 00 00 00 00	 call	 PxList_Push

; 3196 :         SetEvent(px->wakeup);

  004a4	48 8b 44 24 48	 mov	 rax, QWORD PTR px$[rsp]
  004a9	48 8b 88 a0 00
	00 00		 mov	 rcx, QWORD PTR [rax+160]
  004b0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SetEvent

; 3197 :         goto end;

  004b6	e9 57 02 00 00	 jmp	 $end$128590
$LN7@PyParallel@19:
$errback$128579:

; 3198 :     }
; 3199 : 
; 3200 : errback:
; 3201 :     if (c->errback) {

  004bb	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  004c3	48 83 b8 58 32
	00 00 00	 cmp	 QWORD PTR [rax+12888], 0
  004cb	0f 84 41 01 00
	00		 je	 $LN3@PyParallel@19

; 3202 :         PyObject *exc;
; 3203 :         assert(pstate->curexc_type);

  004d1	48 8b 44 24 30	 mov	 rax, QWORD PTR pstate$[rsp]
  004d6	48 83 78 48 00	 cmp	 QWORD PTR [rax+72], 0
  004db	75 1c		 jne	 SHORT $LN26@PyParallel@19
  004dd	41 b8 83 0c 00
	00		 mov	 r8d, 3203		; 00000c83H
  004e3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  004ea	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CI@FHCLAHIJ@?$AAp?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAe?$AAx?$AAc?$AA_?$AAt?$AAy?$AAp?$AAe?$AA?$AA@
  004f1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  004f7	33 c0		 xor	 eax, eax
$LN26@PyParallel@19:

; 3204 :         exc = PyTuple_Pack(3, pstate->curexc_type,
; 3205 :                               pstate->curexc_value,
; 3206 :                               pstate->curexc_traceback);

  004f9	48 8b 44 24 30	 mov	 rax, QWORD PTR pstate$[rsp]
  004fe	4c 8b 48 58	 mov	 r9, QWORD PTR [rax+88]
  00502	48 8b 44 24 30	 mov	 rax, QWORD PTR pstate$[rsp]
  00507	4c 8b 40 50	 mov	 r8, QWORD PTR [rax+80]
  0050b	48 8b 44 24 30	 mov	 rax, QWORD PTR pstate$[rsp]
  00510	48 8b 50 48	 mov	 rdx, QWORD PTR [rax+72]
  00514	b9 03 00 00 00	 mov	 ecx, 3
  00519	e8 00 00 00 00	 call	 PyTuple_Pack
  0051e	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR exc$128592[rsp], rax

; 3207 :         if (!exc)

  00526	48 83 bc 24 98
	00 00 00 00	 cmp	 QWORD PTR exc$128592[rsp], 0
  0052f	75 05		 jne	 SHORT $LN2@PyParallel@19

; 3208 :             goto error;

  00531	e9 dc 00 00 00	 jmp	 $error$128595
$LN2@PyParallel@19:

; 3209 : 
; 3210 :         PyErr_Clear();

  00536	e8 00 00 00 00	 call	 PyErr_Clear

; 3211 :         args = Py_BuildValue("(O)", exc);

  0053b	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR exc$128592[rsp]
  00543	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03IELNPCCE@?$CIO?$CJ?$AA@
  0054a	e8 00 00 00 00	 call	 Py_BuildValue
  0054f	48 89 44 24 20	 mov	 QWORD PTR args$[rsp], rax

; 3212 :         r = PyObject_CallObject(c->errback, args);

  00554	48 8b 54 24 20	 mov	 rdx, QWORD PTR args$[rsp]
  00559	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  00561	48 8b 88 58 32
	00 00		 mov	 rcx, QWORD PTR [rax+12888]
  00568	e8 00 00 00 00	 call	 PyObject_CallObject
  0056d	48 89 44 24 78	 mov	 QWORD PTR r$[rsp], rax

; 3213 :         if (!null_with_exc_or_non_none_return_type(r, pstate)) {

  00572	48 8b 54 24 30	 mov	 rdx, QWORD PTR pstate$[rsp]
  00577	48 8b 4c 24 78	 mov	 rcx, QWORD PTR r$[rsp]
  0057c	e8 00 00 00 00	 call	 null_with_exc_or_non_none_return_type
  00581	85 c0		 test	 eax, eax
  00583	0f 85 89 00 00
	00		 jne	 $LN1@PyParallel@19

; 3214 :             c->errback_completed->from = c;

  00589	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  00591	48 8b 80 38 33
	00 00		 mov	 rax, QWORD PTR [rax+13112]
  00598	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  005a0	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 3215 :             PxList_TimestampItem(c->errback_completed);

  005a4	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  005ac	48 8b 88 38 33
	00 00		 mov	 rcx, QWORD PTR [rax+13112]
  005b3	e8 00 00 00 00	 call	 PxList_TimestampItem

; 3216 :             InterlockedExchange(&(c->done), 1);

  005b8	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  005c0	48 05 04 38 00
	00		 add	 rax, 14340		; 00003804H
  005c6	b9 01 00 00 00	 mov	 ecx, 1
  005cb	87 08		 xchg	 DWORD PTR [rax], ecx

; 3217 :             InterlockedIncrement64(done);

  005cd	48 8b 44 24 60	 mov	 rax, QWORD PTR done$[rsp]
  005d2	f0 48 ff 00	 lock inc QWORD PTR [rax]

; 3218 :             InterlockedDecrement(inflight);

  005d6	48 8b 44 24 68	 mov	 rax, QWORD PTR inflight$[rsp]
  005db	f0 ff 08	 lock dec DWORD PTR [rax]

; 3219 :             PxList_Push(px->completed_errbacks, c->errback_completed);

  005de	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  005e6	48 8b 90 38 33
	00 00		 mov	 rdx, QWORD PTR [rax+13112]
  005ed	48 8b 44 24 48	 mov	 rax, QWORD PTR px$[rsp]
  005f2	48 8b 48 18	 mov	 rcx, QWORD PTR [rax+24]
  005f6	e8 00 00 00 00	 call	 PxList_Push

; 3220 :             SetEvent(px->wakeup);

  005fb	48 8b 44 24 48	 mov	 rax, QWORD PTR px$[rsp]
  00600	48 8b 88 a0 00
	00 00		 mov	 rcx, QWORD PTR [rax+160]
  00607	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SetEvent

; 3221 :             goto end;

  0060d	e9 00 01 00 00	 jmp	 $end$128590
$LN1@PyParallel@19:
$LN3@PyParallel@19:
$error$128595:

; 3222 :         }
; 3223 :     }
; 3224 : 
; 3225 : error:
; 3226 :     assert(pstate->curexc_type != NULL);

  00612	48 8b 44 24 30	 mov	 rax, QWORD PTR pstate$[rsp]
  00617	48 83 78 48 00	 cmp	 QWORD PTR [rax+72], 0
  0061c	75 1c		 jne	 SHORT $LN27@PyParallel@19
  0061e	41 b8 9a 0c 00
	00		 mov	 r8d, 3226		; 00000c9aH
  00624	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0062b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DI@DIMDMEME@?$AAp?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAe?$AAx?$AAc?$AA_?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
  00632	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00638	33 c0		 xor	 eax, eax
$LN27@PyParallel@19:

; 3227 :     PxList_TimestampItem(c->error);

  0063a	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  00642	48 8b 88 28 33
	00 00		 mov	 rcx, QWORD PTR [rax+13096]
  00649	e8 00 00 00 00	 call	 PxList_TimestampItem

; 3228 :     c->error->from = c;

  0064e	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  00656	48 8b 80 28 33
	00 00		 mov	 rax, QWORD PTR [rax+13096]
  0065d	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  00665	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 3229 :     c->error->p1 = pstate->curexc_type;

  00669	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  00671	48 8b 80 28 33
	00 00		 mov	 rax, QWORD PTR [rax+13096]
  00678	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pstate$[rsp]
  0067d	48 8b 49 48	 mov	 rcx, QWORD PTR [rcx+72]
  00681	48 89 48 20	 mov	 QWORD PTR [rax+32], rcx

; 3230 :     c->error->p2 = pstate->curexc_value;

  00685	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  0068d	48 8b 80 28 33
	00 00		 mov	 rax, QWORD PTR [rax+13096]
  00694	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pstate$[rsp]
  00699	48 8b 49 50	 mov	 rcx, QWORD PTR [rcx+80]
  0069d	48 89 48 28	 mov	 QWORD PTR [rax+40], rcx

; 3231 :     c->error->p3 = pstate->curexc_traceback;

  006a1	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  006a9	48 8b 80 28 33
	00 00		 mov	 rax, QWORD PTR [rax+13096]
  006b0	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pstate$[rsp]
  006b5	48 8b 49 58	 mov	 rcx, QWORD PTR [rcx+88]
  006b9	48 89 48 30	 mov	 QWORD PTR [rax+48], rcx

; 3232 :     InterlockedExchange(&(c->done), 1);

  006bd	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  006c5	48 05 04 38 00
	00		 add	 rax, 14340		; 00003804H
  006cb	b9 01 00 00 00	 mov	 ecx, 1
  006d0	87 08		 xchg	 DWORD PTR [rax], ecx

; 3233 :     InterlockedIncrement64(done);

  006d2	48 8b 44 24 60	 mov	 rax, QWORD PTR done$[rsp]
  006d7	f0 48 ff 00	 lock inc QWORD PTR [rax]

; 3234 :     InterlockedDecrement(inflight);

  006db	48 8b 44 24 68	 mov	 rax, QWORD PTR inflight$[rsp]
  006e0	f0 ff 08	 lock dec DWORD PTR [rax]

; 3235 :     PxList_Push(px->errors, c->error);

  006e3	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  006eb	48 8b 90 28 33
	00 00		 mov	 rdx, QWORD PTR [rax+13096]
  006f2	48 8b 44 24 48	 mov	 rax, QWORD PTR px$[rsp]
  006f7	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  006fb	e8 00 00 00 00	 call	 PxList_Push

; 3236 :     SetEvent(px->wakeup);

  00700	48 8b 44 24 48	 mov	 rax, QWORD PTR px$[rsp]
  00705	48 8b 88 a0 00
	00 00		 mov	 rcx, QWORD PTR [rax+160]
  0070c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SetEvent
$end$128590:

; 3237 : end:
; 3238 :     _PyParallel_ExitingCallback(c);

  00712	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  0071a	e8 00 00 00 00	 call	 _PyParallel_ExitingCallback

; 3239 : }

  0071f	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  00726	c3		 ret	 0
_PyParallel_WorkCallback ENDP
_TEXT	ENDS
PUBLIC	??_C@_1CG@BPIMGAM@?$AAw?$AAa?$AAi?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAc?$AA?9?$AA?$DO?$AAt?$AAp?$AA_?$AAw?$AAa?$AAi?$AAt?$AA?$AA@ ; `string'
PUBLIC	_PyParallel_WaitCallback
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyParallel_WaitCallback DD imagerel $LN4
	DD	imagerel $LN4+116
	DD	imagerel $unwind$_PyParallel_WaitCallback
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyParallel_WaitCallback DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT ??_C@_1CG@BPIMGAM@?$AAw?$AAa?$AAi?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAc?$AA?9?$AA?$DO?$AAt?$AAp?$AA_?$AAw?$AAa?$AAi?$AAt?$AA?$AA@
CONST	SEGMENT
??_C@_1CG@BPIMGAM@?$AAw?$AAa?$AAi?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAc?$AA?9?$AA?$DO?$AAt?$AAp?$AA_?$AAw?$AAa?$AAi?$AAt?$AA?$AA@ DB 'w'
	DB	00H, 'a', 00H, 'i', 00H, 't', 00H, ' ', 00H, '=', 00H, '=', 00H
	DB	' ', 00H, 'c', 00H, '-', 00H, '>', 00H, 't', 00H, 'p', 00H, '_'
	DB	00H, 'w', 00H, 'a', 00H, 'i', 00H, 't', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PyParallel_WaitCallback
_TEXT	SEGMENT
c$ = 32
instance$ = 64
context$ = 72
wait$ = 80
wait_result$ = 88
_PyParallel_WaitCallback PROC				; COMDAT

; 3248 : {

$LN4:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 3249 :     Context  *c = (Context *)context;

  00018	48 8b 44 24 48	 mov	 rax, QWORD PTR context$[rsp]
  0001d	48 89 44 24 20	 mov	 QWORD PTR c$[rsp], rax

; 3250 : 
; 3251 :     assert(wait == c->tp_wait);

  00022	48 8b 44 24 20	 mov	 rax, QWORD PTR c$[rsp]
  00027	48 8b 80 68 32
	00 00		 mov	 rax, QWORD PTR [rax+12904]
  0002e	48 39 44 24 50	 cmp	 QWORD PTR wait$[rsp], rax
  00033	74 1c		 je	 SHORT $LN3@PyParallel@20
  00035	41 b8 b3 0c 00
	00		 mov	 r8d, 3251		; 00000cb3H
  0003b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00042	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@BPIMGAM@?$AAw?$AAa?$AAi?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAc?$AA?9?$AA?$DO?$AAt?$AAp?$AA_?$AAw?$AAa?$AAi?$AAt?$AA?$AA@
  00049	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0004f	33 c0		 xor	 eax, eax
$LN3@PyParallel@20:

; 3252 :     c->wait_result = wait_result;

  00051	48 8b 44 24 20	 mov	 rax, QWORD PTR c$[rsp]
  00056	8b 4c 24 58	 mov	 ecx, DWORD PTR wait_result$[rsp]
  0005a	89 88 70 32 00
	00		 mov	 DWORD PTR [rax+12912], ecx

; 3253 : 
; 3254 :     _PyParallel_WorkCallback(instance, c);

  00060	48 8b 54 24 20	 mov	 rdx, QWORD PTR c$[rsp]
  00065	48 8b 4c 24 40	 mov	 rcx, QWORD PTR instance$[rsp]
  0006a	e8 00 00 00 00	 call	 _PyParallel_WorkCallback

; 3255 : }

  0006f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00073	c3		 ret	 0
_PyParallel_WaitCallback ENDP
_TEXT	ENDS
PUBLIC	??_C@_1DO@PJJIPBIG@?$AAo?$AAv?$AAe?$AAr?$AAl?$AAa?$AAp?$AAp?$AAe?$AAd?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA?$CG?$AA?$CI?$AAc?$AA?9?$AA?$DO?$AAo?$AAv?$AAe?$AAr?$AAl?$AAa?$AAp?$AAp?$AAe?$AAd?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CE@JNEKPGPF@?$AAt?$AAp?$AA_?$AAi?$AAo?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAc?$AA?9?$AA?$DO?$AAt?$AAp?$AA_?$AAi?$AAo?$AA?$AA@ ; `string'
PUBLIC	_PyParallel_IOCallback
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyParallel_IOCallback DD imagerel $LN5
	DD	imagerel $LN5+179
	DD	imagerel $unwind$_PyParallel_IOCallback
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyParallel_IOCallback DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT ??_C@_1DO@PJJIPBIG@?$AAo?$AAv?$AAe?$AAr?$AAl?$AAa?$AAp?$AAp?$AAe?$AAd?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA?$CG?$AA?$CI?$AAc?$AA?9?$AA?$DO?$AAo?$AAv?$AAe?$AAr?$AAl?$AAa?$AAp?$AAp?$AAe?$AAd?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DO@PJJIPBIG@?$AAo?$AAv?$AAe?$AAr?$AAl?$AAa?$AAp?$AAp?$AAe?$AAd?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA?$CG?$AA?$CI?$AAc?$AA?9?$AA?$DO?$AAo?$AAv?$AAe?$AAr?$AAl?$AAa?$AAp?$AAp?$AAe?$AAd?$AA?$CJ?$AA?$AA@ DB 'o'
	DB	00H, 'v', 00H, 'e', 00H, 'r', 00H, 'l', 00H, 'a', 00H, 'p', 00H
	DB	'p', 00H, 'e', 00H, 'd', 00H, ' ', 00H, '=', 00H, '=', 00H, ' '
	DB	00H, '&', 00H, '(', 00H, 'c', 00H, '-', 00H, '>', 00H, 'o', 00H
	DB	'v', 00H, 'e', 00H, 'r', 00H, 'l', 00H, 'a', 00H, 'p', 00H, 'p'
	DB	00H, 'e', 00H, 'd', 00H, ')', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1CE@JNEKPGPF@?$AAt?$AAp?$AA_?$AAi?$AAo?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAc?$AA?9?$AA?$DO?$AAt?$AAp?$AA_?$AAi?$AAo?$AA?$AA@
CONST	SEGMENT
??_C@_1CE@JNEKPGPF@?$AAt?$AAp?$AA_?$AAi?$AAo?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAc?$AA?9?$AA?$DO?$AAt?$AAp?$AA_?$AAi?$AAo?$AA?$AA@ DB 't'
	DB	00H, 'p', 00H, '_', 00H, 'i', 00H, 'o', 00H, ' ', 00H, '=', 00H
	DB	'=', 00H, ' ', 00H, 'c', 00H, '-', 00H, '>', 00H, 't', 00H, 'p'
	DB	00H, '_', 00H, 'i', 00H, 'o', 00H, 00H, 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PyParallel_IOCallback
_TEXT	SEGMENT
c$ = 32
instance$ = 64
context$ = 72
overlapped$ = 80
io_result$ = 88
nbytes$ = 96
tp_io$ = 104
_PyParallel_IOCallback PROC				; COMDAT

; 3267 : {

$LN5:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 3268 :     Context *c = (Context *)context;

  00018	48 8b 44 24 48	 mov	 rax, QWORD PTR context$[rsp]
  0001d	48 89 44 24 20	 mov	 QWORD PTR c$[rsp], rax

; 3269 :     assert(tp_io == c->tp_io);

  00022	48 8b 44 24 20	 mov	 rax, QWORD PTR c$[rsp]
  00027	48 8b 80 88 32
	00 00		 mov	 rax, QWORD PTR [rax+12936]
  0002e	48 39 44 24 68	 cmp	 QWORD PTR tp_io$[rsp], rax
  00033	74 1c		 je	 SHORT $LN3@PyParallel@21
  00035	41 b8 c5 0c 00
	00		 mov	 r8d, 3269		; 00000cc5H
  0003b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00042	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CE@JNEKPGPF@?$AAt?$AAp?$AA_?$AAi?$AAo?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAc?$AA?9?$AA?$DO?$AAt?$AAp?$AA_?$AAi?$AAo?$AA?$AA@
  00049	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0004f	33 c0		 xor	 eax, eax
$LN3@PyParallel@21:

; 3270 :     c->io_result = io_result;

  00051	48 8b 44 24 20	 mov	 rax, QWORD PTR c$[rsp]
  00056	8b 4c 24 58	 mov	 ecx, DWORD PTR io_result$[rsp]
  0005a	89 88 94 32 00
	00		 mov	 DWORD PTR [rax+12948], ecx

; 3271 :     c->io_nbytes = nbytes;

  00060	48 8b 44 24 20	 mov	 rax, QWORD PTR c$[rsp]
  00065	48 8b 4c 24 60	 mov	 rcx, QWORD PTR nbytes$[rsp]
  0006a	48 89 88 98 32
	00 00		 mov	 QWORD PTR [rax+12952], rcx

; 3272 :     assert(overlapped == &(c->overlapped));

  00071	48 8b 44 24 20	 mov	 rax, QWORD PTR c$[rsp]
  00076	48 05 b0 32 00
	00		 add	 rax, 12976		; 000032b0H
  0007c	48 39 44 24 50	 cmp	 QWORD PTR overlapped$[rsp], rax
  00081	74 1c		 je	 SHORT $LN4@PyParallel@21
  00083	41 b8 c8 0c 00
	00		 mov	 r8d, 3272		; 00000cc8H
  00089	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00090	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@PJJIPBIG@?$AAo?$AAv?$AAe?$AAr?$AAl?$AAa?$AAp?$AAp?$AAe?$AAd?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA?$CG?$AA?$CI?$AAc?$AA?9?$AA?$DO?$AAo?$AAv?$AAe?$AAr?$AAl?$AAa?$AAp?$AAp?$AAe?$AAd?$AA?$CJ?$AA?$AA@
  00097	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0009d	33 c0		 xor	 eax, eax
$LN4@PyParallel@21:

; 3273 :     /* c->io = OL2PxIO(c->overlapped);*/
; 3274 :     _PyParallel_WorkCallback(instance, c);

  0009f	48 8b 54 24 20	 mov	 rdx, QWORD PTR c$[rsp]
  000a4	48 8b 4c 24 40	 mov	 rcx, QWORD PTR instance$[rsp]
  000a9	e8 00 00 00 00	 call	 _PyParallel_WorkCallback

; 3275 : }

  000ae	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000b2	c3		 ret	 0
_PyParallel_IOCallback ENDP
_TEXT	ENDS
PUBLIC	_cpu_count
EXTRN	__imp_GetSystemInfo:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_cpu_count DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$_cpu_count
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_cpu_count DD 010401H
	DD	0a204H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _cpu_count
_TEXT	SEGMENT
sysinfo$ = 32
_cpu_count PROC						; COMDAT

; 3306 : {

$LN3:
  00000	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 3307 : #ifdef MS_WINDOWS
; 3308 :     SYSTEM_INFO sysinfo;
; 3309 :     GetSystemInfo(&sysinfo);

  00004	48 8d 4c 24 20	 lea	 rcx, QWORD PTR sysinfo$[rsp]
  00009	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetSystemInfo

; 3310 :     return sysinfo.dwNumberOfProcessors;

  0000f	8b 44 24 40	 mov	 eax, DWORD PTR sysinfo$[rsp+32]

; 3311 : #elif __hpux
; 3312 :     return mpctl(MPC_GETNUMSPUS, NULL, NULL);
; 3313 : #ifndef _SC_NPROCESSORS_ONLN
; 3314 : #ifdef _SC_NPROC_ONLN /* IRIX */
; 3315 : #define _SC_NPROCESSORS_ONLN _SC_NPROC_ONLN
; 3316 : #endif
; 3317 : #endif /* ! defined(_SC_NPROCESSORS_ONLN) */
; 3318 : #elif defined(HAVE_SYSCONF) && defined(_SC_NPROCESSORS_ONLN)
; 3319 :     return sysconf(_SC_NPROCESSORS_ONLN);
; 3320 : #elif __APPLE__
; 3321 :     int err = -1;
; 3322 :     int ncpu = -1;
; 3323 :     size_t len = sizeof(int);
; 3324 :     err = sysctlnametomib("hw.logicalcpu", &ncpu, &len, NULL, 0);
; 3325 :     if (!err)
; 3326 :         return ncpu;
; 3327 :     else
; 3328 :         return _bsd_cpu_count();
; 3329 : #elif defined(__DragonFly__) || \
; 3330 :       defined(__OpenBSD__)   || \
; 3331 :       defined(__FreeBSD__)   || \
; 3332 :       defined(__NetBSD__)
; 3333 :     return _bsd_cpu_count();
; 3334 : #else
; 3335 :     return -1;
; 3336 : #endif
; 3337 : }

  00013	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00017	c3		 ret	 0
_cpu_count ENDP
_TEXT	ENDS
EXTRN	PyLong_FromLong:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_async_cpu_count DD imagerel $LN3
	DD	imagerel $LN3+26
	DD	imagerel $unwind$_async_cpu_count
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_async_cpu_count DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _async_cpu_count
_TEXT	SEGMENT
self$ = 48
_async_cpu_count PROC					; COMDAT

; 3341 : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 3342 :     return PyLong_FromLong(_cpu_count());

  00009	e8 00 00 00 00	 call	 _cpu_count
  0000e	8b c8		 mov	 ecx, eax
  00010	e8 00 00 00 00	 call	 PyLong_FromLong

; 3343 : }

  00015	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00019	c3		 ret	 0
_async_cpu_count ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DD@DKPNMLIK@_PyParallel_Init?3?5GetActiveProce@ ; `string'
PUBLIC	??_C@_0FK@NBNOKFBO@_PyParallel_Init?3?5intrinsics?5fai@ ; `string'
PUBLIC	??_C@_0FM@DCEGNIEB@_PyParallel_Init?3?5intrinsics?5fai@ ; `string'
PUBLIC	??_C@_0GB@NAEJGNGB@_PyParallel_Init?3?5invariant?5fail@ ; `string'
PUBLIC	??_C@_0GB@BOHNPJND@_PyParallel_Init?3?5invariant?5fail@ ; `string'
PUBLIC	_PyParallel_Init
EXTRN	__imp_GetCurrentThreadId:PROC
EXTRN	__imp_GetCurrentProcessId:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyParallel_Init DD imagerel $LN12
	DD	imagerel $LN12+304
	DD	imagerel $unwind$_PyParallel_Init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyParallel_Init DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0DD@DKPNMLIK@_PyParallel_Init?3?5GetActiveProce@
CONST	SEGMENT
??_C@_0DD@DKPNMLIK@_PyParallel_Init?3?5GetActiveProce@ DB '_PyParallel_In'
	DB	'it: GetActiveProcessorCount() failed', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0FK@NBNOKFBO@_PyParallel_Init?3?5intrinsics?5fai@
CONST	SEGMENT
??_C@_0FK@NBNOKFBO@_PyParallel_Init?3?5intrinsics?5fai@ DB '_PyParallel_I'
	DB	'nit: intrinsics failure: _Py_get_current_thread_id() != GetCu'
	DB	'rrentThreadId()', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0FM@DCEGNIEB@_PyParallel_Init?3?5intrinsics?5fai@
CONST	SEGMENT
??_C@_0FM@DCEGNIEB@_PyParallel_Init?3?5intrinsics?5fai@ DB '_PyParallel_I'
	DB	'nit: intrinsics failure: _Py_get_current_process_id() != GetC'
	DB	'urrentProcessId()', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0GB@NAEJGNGB@_PyParallel_Init?3?5invariant?5fail@
CONST	SEGMENT
??_C@_0GB@NAEJGNGB@_PyParallel_Init?3?5invariant?5fail@ DB '_PyParallel_I'
	DB	'nit: invariant failed: Py_MainProcessId should also be -1 if '
	DB	'Py_MainThreadId is -1.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0GB@BOHNPJND@_PyParallel_Init?3?5invariant?5fail@
CONST	SEGMENT
??_C@_0GB@BOHNPJND@_PyParallel_Init?3?5invariant?5fail@ DB '_PyParallel_I'
	DB	'nit: invariant failed: Py_MainThreadId should also be -1 if P'
	DB	'y_MainProcessId is -1.', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PyParallel_Init
_TEXT	SEGMENT
_PyParallel_Init PROC					; COMDAT

; 3347 : {

$LN12:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 3348 :     _Py_sfence();

  00004	0f ae f8	 sfence

; 3349 : 
; 3350 :     if (Py_MainProcessId == -1) {

  00007	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR Py_MainProcessId, -1
  0000e	75 15		 jne	 SHORT $LN9@PyParallel@22

; 3351 :         if (Py_MainThreadId != -1)

  00010	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR Py_MainThreadId, -1
  00017	74 0c		 je	 SHORT $LN8@PyParallel@22

; 3352 :             Py_FatalError("_PyParallel_Init: invariant failed: "  \
; 3353 :                           "Py_MainThreadId should also be -1 if " \
; 3354 :                           "Py_MainProcessId is -1.");

  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0GB@BOHNPJND@_PyParallel_Init?3?5invariant?5fail@
  00020	e8 00 00 00 00	 call	 Py_FatalError
$LN8@PyParallel@22:
$LN9@PyParallel@22:

; 3355 :     }
; 3356 :     if (Py_MainThreadId == -1) {

  00025	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR Py_MainThreadId, -1
  0002c	75 15		 jne	 SHORT $LN7@PyParallel@22

; 3357 :         if (Py_MainProcessId != -1)

  0002e	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR Py_MainProcessId, -1
  00035	74 0c		 je	 SHORT $LN6@PyParallel@22

; 3358 :             Py_FatalError("_PyParallel_Init: invariant failed: "   \
; 3359 :                           "Py_MainProcessId should also be -1 if " \
; 3360 :                           "Py_MainThreadId is -1.");

  00037	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0GB@NAEJGNGB@_PyParallel_Init?3?5invariant?5fail@
  0003e	e8 00 00 00 00	 call	 Py_FatalError
$LN6@PyParallel@22:
$LN7@PyParallel@22:

; 3361 :     }
; 3362 : 
; 3363 :     if (Py_MainProcessId == -1) {

  00043	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR Py_MainProcessId, -1
  0004a	75 28		 jne	 SHORT $LN5@PyParallel@22

; 3364 :         Py_MainProcessId = GetCurrentProcessId();

  0004c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetCurrentProcessId
  00052	89 05 00 00 00
	00		 mov	 DWORD PTR Py_MainProcessId, eax

; 3365 :         if (Py_MainProcessId != _Py_get_current_process_id())

  00058	65 8b 04 25 40
	00 00 00	 mov	 eax, DWORD PTR gs:64
  00060	39 05 00 00 00
	00		 cmp	 DWORD PTR Py_MainProcessId, eax
  00066	74 0c		 je	 SHORT $LN4@PyParallel@22

; 3366 :             Py_FatalError("_PyParallel_Init: intrinsics failure: " \
; 3367 :                           "_Py_get_current_process_id() != "       \
; 3368 :                           "GetCurrentProcessId()");

  00068	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0FM@DCEGNIEB@_PyParallel_Init?3?5intrinsics?5fai@
  0006f	e8 00 00 00 00	 call	 Py_FatalError
$LN4@PyParallel@22:
$LN5@PyParallel@22:

; 3369 :     }
; 3370 : 
; 3371 :     if (Py_MainThreadId == -1) {

  00074	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR Py_MainThreadId, -1
  0007b	75 28		 jne	 SHORT $LN3@PyParallel@22

; 3372 :         Py_MainThreadId = GetCurrentThreadId();

  0007d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetCurrentThreadId
  00083	89 05 00 00 00
	00		 mov	 DWORD PTR Py_MainThreadId, eax

; 3373 :         if (Py_MainThreadId != _Py_get_current_thread_id())

  00089	65 8b 04 25 48
	00 00 00	 mov	 eax, DWORD PTR gs:72
  00091	39 05 00 00 00
	00		 cmp	 DWORD PTR Py_MainThreadId, eax
  00097	74 0c		 je	 SHORT $LN2@PyParallel@22

; 3374 :             Py_FatalError("_PyParallel_Init: intrinsics failure: " \
; 3375 :                           "_Py_get_current_thread_id() != "        \
; 3376 :                           "GetCurrentThreadId()");

  00099	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0FK@NBNOKFBO@_PyParallel_Init?3?5intrinsics?5fai@
  000a0	e8 00 00 00 00	 call	 Py_FatalError
$LN2@PyParallel@22:
$LN3@PyParallel@22:

; 3377 :     }
; 3378 : 
; 3379 :     _PxObjectSignature = (Px_PTR(_Py_rdtsc()) ^ Px_PTR(&_PxObjectSignature));

  000a5	0f 31		 rdtsc
  000a7	48 c1 e2 20	 shl	 rdx, 32			; 00000020H
  000ab	48 0b c2	 or	 rax, rdx
  000ae	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_PxObjectSignature
  000b5	48 33 c1	 xor	 rax, rcx
  000b8	48 89 05 00 00
	00 00		 mov	 QWORD PTR _PxObjectSignature, rax

; 3380 :     _PxSocketSignature = (Px_PTR(_Py_rdtsc()) ^ Px_PTR(&_PxSocketSignature));

  000bf	0f 31		 rdtsc
  000c1	48 c1 e2 20	 shl	 rdx, 32			; 00000020H
  000c5	48 0b c2	 or	 rax, rdx
  000c8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_PxSocketSignature
  000cf	48 33 c1	 xor	 rax, rcx
  000d2	48 89 05 00 00
	00 00		 mov	 QWORD PTR _PxSocketSignature, rax

; 3381 :     _PxSocketBufSignature = (
; 3382 :         Px_PTR(_Py_rdtsc()) ^
; 3383 :         Px_PTR(&_PxSocketBufSignature)
; 3384 :     );

  000d9	0f 31		 rdtsc
  000db	48 c1 e2 20	 shl	 rdx, 32			; 00000020H
  000df	48 0b c2	 or	 rax, rdx
  000e2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_PxSocketBufSignature
  000e9	48 33 c1	 xor	 rax, rcx
  000ec	48 89 05 00 00
	00 00		 mov	 QWORD PTR _PxSocketBufSignature, rax

; 3385 : 
; 3386 :     Py_ParallelContextsEnabled = 0;

  000f3	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR Py_ParallelContextsEnabled, 0

; 3387 :     _Py_lfence();

  000fd	0f ae e8	 lfence

; 3388 :     _Py_clflush(&Py_MainThreadId);

  00100	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:Py_MainThreadId
  00107	48 0f ae 38	 clflush QWORD PTR [rax]

; 3389 : 
; 3390 :     _PyParallel_NumCPUs = _cpu_count();

  0010b	e8 00 00 00 00	 call	 _cpu_count
  00110	89 05 00 00 00
	00		 mov	 DWORD PTR _PyParallel_NumCPUs, eax

; 3391 :     if (!_PyParallel_NumCPUs)

  00116	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _PyParallel_NumCPUs, 0
  0011d	75 0c		 jne	 SHORT $LN1@PyParallel@22

; 3392 :         Py_FatalError("_PyParallel_Init: GetActiveProcessorCount() failed");

  0011f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DD@DKPNMLIK@_PyParallel_Init?3?5GetActiveProce@
  00126	e8 00 00 00 00	 call	 Py_FatalError
$LN1@PyParallel@22:

; 3393 : 
; 3394 : }

  0012b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0012f	c3		 ret	 0
_PyParallel_Init ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DB@INOHEMDM@_PyParallel_Finalize?$CI?$CJ?3?5px?9?$DOcont@ ; `string'
PUBLIC	_PyParallel_Finalize
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyParallel_Finalize DD imagerel $LN5
	DD	imagerel $LN5+103
	DD	imagerel $unwind$_PyParallel_Finalize
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyParallel_Finalize DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_0DB@INOHEMDM@_PyParallel_Finalize?$CI?$CJ?3?5px?9?$DOcont@
CONST	SEGMENT
??_C@_0DB@INOHEMDM@_PyParallel_Finalize?$CI?$CJ?3?5px?9?$DOcont@ DB '_PyP'
	DB	'arallel_Finalize(): px->contexts_active: %d', 0aH, 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PyParallel_Finalize
_TEXT	SEGMENT
px$ = 32
_PyParallel_Finalize PROC				; COMDAT

; 3398 : {

$LN5:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 3399 :     PxState *px = PXSTATE();

  00004	e8 00 00 00 00	 call	 PXSTATE
  00009	48 89 44 24 20	 mov	 QWORD PTR px$[rsp], rax

; 3400 : 
; 3401 :     assert(px);

  0000e	48 83 7c 24 20
	00		 cmp	 QWORD PTR px$[rsp], 0
  00014	75 1c		 jne	 SHORT $LN4@PyParallel@23
  00016	41 b8 49 0d 00
	00		 mov	 r8d, 3401		; 00000d49H
  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00023	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_15OLJENLOO@?$AAp?$AAx?$AA?$AA@
  0002a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00030	33 c0		 xor	 eax, eax
$LN4@PyParallel@23:

; 3402 : 
; 3403 :     if (px->contexts_active > 0) {

  00032	48 8b 44 24 20	 mov	 rax, QWORD PTR px$[rsp]
  00037	83 b8 e8 00 00
	00 00		 cmp	 DWORD PTR [rax+232], 0
  0003e	7e 18		 jle	 SHORT $LN1@PyParallel@23

; 3404 :         printf("_PyParallel_Finalize(): px->contexts_active: %d\n",
; 3405 :                px->contexts_active);

  00040	48 8b 44 24 20	 mov	 rax, QWORD PTR px$[rsp]
  00045	8b 90 e8 00 00
	00		 mov	 edx, DWORD PTR [rax+232]
  0004b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DB@INOHEMDM@_PyParallel_Finalize?$CI?$CJ?3?5px?9?$DOcont@
  00052	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_printf
$LN1@PyParallel@23:

; 3406 :     }
; 3407 : 
; 3408 :     _PyParallel_Finalized = 1;

  00058	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _PyParallel_Finalized, 1

; 3409 : }

  00062	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00066	c3		 ret	 0
_PyParallel_Finalize ENDP
_TEXT	ENDS
PUBLIC	_PyParallel_ClearMainThreadId
; Function compile flags: /Odtp
;	COMDAT _PyParallel_ClearMainThreadId
_TEXT	SEGMENT
_PyParallel_ClearMainThreadId PROC			; COMDAT

; 3414 :     _Py_sfence();

  00000	0f ae f8	 sfence

; 3415 :     Py_MainThreadId = 0;

  00003	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR Py_MainThreadId, 0

; 3416 :     _Py_lfence();

  0000d	0f ae e8	 lfence

; 3417 :     _Py_clflush(&Py_MainThreadId);

  00010	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:Py_MainThreadId
  00017	48 0f ae 38	 clflush QWORD PTR [rax]

; 3418 :     //TSTATE = NULL;
; 3419 : }

  0001b	c3		 ret	 0
_PyParallel_ClearMainThreadId ENDP
_TEXT	ENDS
PUBLIC	_PyParallel_CreatedGIL
; Function compile flags: /Odtp
;	COMDAT _PyParallel_CreatedGIL
_TEXT	SEGMENT
_PyParallel_CreatedGIL PROC				; COMDAT

; 3424 :     //_PyParallel_ClearMainThreadId();
; 3425 : }

  00000	c3		 ret	 0
_PyParallel_CreatedGIL ENDP
_TEXT	ENDS
PUBLIC	_PyParallel_AboutToDropGIL
; Function compile flags: /Odtp
;	COMDAT _PyParallel_AboutToDropGIL
_TEXT	SEGMENT
_PyParallel_AboutToDropGIL PROC				; COMDAT

; 3430 :     //_PyParallel_ClearMainThreadId();
; 3431 : }

  00000	c3		 ret	 0
_PyParallel_AboutToDropGIL ENDP
_TEXT	ENDS
PUBLIC	_PyParallel_DestroyedGIL
; Function compile flags: /Odtp
;	COMDAT _PyParallel_DestroyedGIL
_TEXT	SEGMENT
_PyParallel_DestroyedGIL PROC				; COMDAT

; 3436 :     //_PyParallel_ClearMainThreadId();
; 3437 : }

  00000	c3		 ret	 0
_PyParallel_DestroyedGIL ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DE@OCLLNCBC@_PyParallel_JustAcquiredGIL?3?5Py_@ ; `string'
PUBLIC	??_C@_0GK@DIDDDKJH@_PyParallel_JustAcquiredGIL?3?5inv@ ; `string'
PUBLIC	_PyParallel_JustAcquiredGIL
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyParallel_JustAcquiredGIL DD imagerel $LN5
	DD	imagerel $LN5+119
	DD	imagerel $unwind$_PyParallel_JustAcquiredGIL
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyParallel_JustAcquiredGIL DD 020701H
	DD	0170107H
xdata	ENDS
;	COMDAT ??_C@_0DE@OCLLNCBC@_PyParallel_JustAcquiredGIL?3?5Py_@
CONST	SEGMENT
??_C@_0DE@OCLLNCBC@_PyParallel_JustAcquiredGIL?3?5Py_@ DB '_PyParallel_Ju'
	DB	'stAcquiredGIL: Py_MainProcessId == -1', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0GK@DIDDDKJH@_PyParallel_JustAcquiredGIL?3?5inv@
CONST	SEGMENT
??_C@_0GK@DIDDDKJH@_PyParallel_JustAcquiredGIL?3?5inv@ DB '_PyParallel_Ju'
	DB	'stAcquiredGIL: invariant failed: expected Py_MainThreadId to '
	DB	'have value 0, actual value: %d', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PyParallel_JustAcquiredGIL
_TEXT	SEGMENT
fmt$ = 32
buf$ = 48
_PyParallel_JustAcquiredGIL PROC			; COMDAT

; 3441 : {

$LN5:
  00000	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H

; 3442 :     char buf[128], *fmt;
; 3443 : 
; 3444 :     _Py_lfence();

  00007	0f ae e8	 lfence

; 3445 : 
; 3446 :     if (Py_MainThreadId != 0) {

  0000a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR Py_MainThreadId, 0
  00011	74 28		 je	 SHORT $LN2@PyParallel@24

; 3447 :         fmt = "_PyParallel_JustAcquiredGIL: invariant failed: "   \
; 3448 :               "expected Py_MainThreadId to have value 0, actual " \
; 3449 :               "value: %d";

  00013	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0GK@DIDDDKJH@_PyParallel_JustAcquiredGIL?3?5inv@
  0001a	48 89 44 24 20	 mov	 QWORD PTR fmt$[rsp], rax

; 3450 :         (void)snprintf(buf, sizeof(buf), fmt, Py_MainThreadId);

  0001f	44 8b 0d 00 00
	00 00		 mov	 r9d, DWORD PTR Py_MainThreadId
  00026	4c 8b 44 24 20	 mov	 r8, QWORD PTR fmt$[rsp]
  0002b	ba 80 00 00 00	 mov	 edx, 128		; 00000080H
  00030	48 8d 4c 24 30	 lea	 rcx, QWORD PTR buf$[rsp]
  00035	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__snprintf
$LN2@PyParallel@24:

; 3451 :         /*Py_FatalError(buf);*/
; 3452 :     }
; 3453 : 
; 3454 :     if (Py_MainProcessId == -1)

  0003b	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR Py_MainProcessId, -1
  00042	75 0c		 jne	 SHORT $LN1@PyParallel@24

; 3455 :         Py_FatalError("_PyParallel_JustAcquiredGIL: Py_MainProcessId == -1");

  00044	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DE@OCLLNCBC@_PyParallel_JustAcquiredGIL?3?5Py_@
  0004b	e8 00 00 00 00	 call	 Py_FatalError
$LN1@PyParallel@24:

; 3456 : 
; 3457 :     _Py_sfence();

  00050	0f ae f8	 sfence

; 3458 :     Py_MainThreadId = _Py_get_current_thread_id();

  00053	65 8b 04 25 48
	00 00 00	 mov	 eax, DWORD PTR gs:72
  0005b	89 05 00 00 00
	00		 mov	 DWORD PTR Py_MainThreadId, eax

; 3459 :     _Py_lfence();

  00061	0f ae e8	 lfence

; 3460 :     _Py_clflush(&Py_MainThreadId);

  00064	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:Py_MainThreadId
  0006b	48 0f ae 38	 clflush QWORD PTR [rax]

; 3461 :     //TSTATE = \
; 3462 :     //    (PyThreadState *)_Py_atomic_load_relaxed(&_PyThreadState_Current);
; 3463 : }

  0006f	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  00076	c3		 ret	 0
_PyParallel_JustAcquiredGIL ENDP
_TEXT	ENDS
PUBLIC	_PyParallel_SetMainProcessId
; Function compile flags: /Odtp
;	COMDAT _PyParallel_SetMainProcessId
_TEXT	SEGMENT
id$ = 8
_PyParallel_SetMainProcessId PROC			; COMDAT

; 3467 : {

  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx

; 3468 :     _Py_sfence();

  00004	0f ae f8	 sfence

; 3469 :     Py_MainProcessId = id;

  00007	8b 44 24 08	 mov	 eax, DWORD PTR id$[rsp]
  0000b	89 05 00 00 00
	00		 mov	 DWORD PTR Py_MainProcessId, eax

; 3470 :     _Py_lfence();

  00011	0f ae e8	 lfence

; 3471 :     _Py_clflush(&Py_MainThreadId);

  00014	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:Py_MainThreadId
  0001b	48 0f ae 38	 clflush QWORD PTR [rax]

; 3472 : }

  0001f	c3		 ret	 0
_PyParallel_SetMainProcessId ENDP
_TEXT	ENDS
PUBLIC	_PyParallel_ClearMainProcessId
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyParallel_ClearMainProcessId DD imagerel $LN3
	DD	imagerel $LN3+16
	DD	imagerel $unwind$_PyParallel_ClearMainProcessId
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyParallel_ClearMainProcessId DD 010401H
	DD	04204H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _PyParallel_ClearMainProcessId
_TEXT	SEGMENT
_PyParallel_ClearMainProcessId PROC			; COMDAT

; 3476 : {

$LN3:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 3477 :     _PyParallel_SetMainProcessId(0);

  00004	33 c9		 xor	 ecx, ecx
  00006	e8 00 00 00 00	 call	 _PyParallel_SetMainProcessId

; 3478 : }

  0000b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0000f	c3		 ret	 0
_PyParallel_ClearMainProcessId ENDP
_TEXT	ENDS
PUBLIC	_PyParallel_RestoreMainProcessId
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyParallel_RestoreMainProcessId DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$_PyParallel_RestoreMainProcessId
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyParallel_RestoreMainProcessId DD 010401H
	DD	04204H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _PyParallel_RestoreMainProcessId
_TEXT	SEGMENT
_PyParallel_RestoreMainProcessId PROC			; COMDAT

; 3482 : {

$LN3:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 3483 :     _PyParallel_SetMainProcessId(_Py_get_current_process_id());

  00004	65 8b 04 25 40
	00 00 00	 mov	 eax, DWORD PTR gs:64
  0000c	8b c8		 mov	 ecx, eax
  0000e	e8 00 00 00 00	 call	 _PyParallel_SetMainProcessId

; 3484 : }

  00013	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00017	c3		 ret	 0
_PyParallel_RestoreMainProcessId ENDP
_TEXT	ENDS
PUBLIC	_PyParallel_EnableParallelContexts
; Function compile flags: /Odtp
;	COMDAT _PyParallel_EnableParallelContexts
_TEXT	SEGMENT
_PyParallel_EnableParallelContexts PROC			; COMDAT

; 3489 :     _Py_sfence();

  00000	0f ae f8	 sfence

; 3490 :     Py_ParallelContextsEnabled = 1;

  00003	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR Py_ParallelContextsEnabled, 1

; 3491 :     _Py_lfence();

  0000d	0f ae e8	 lfence

; 3492 :     _Py_clflush(&Py_MainThreadId);

  00010	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:Py_MainThreadId
  00017	48 0f ae 38	 clflush QWORD PTR [rax]

; 3493 : }

  0001b	c3		 ret	 0
_PyParallel_EnableParallelContexts ENDP
_TEXT	ENDS
PUBLIC	_PyParallel_DisableParallelContexts
; Function compile flags: /Odtp
;	COMDAT _PyParallel_DisableParallelContexts
_TEXT	SEGMENT
_PyParallel_DisableParallelContexts PROC		; COMDAT

; 3498 :     _Py_sfence();

  00000	0f ae f8	 sfence

; 3499 :     Py_ParallelContextsEnabled = 0;

  00003	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR Py_ParallelContextsEnabled, 0

; 3500 :     _Py_lfence();

  0000d	0f ae e8	 lfence

; 3501 :     _Py_clflush(&Py_MainThreadId);

  00010	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:Py_MainThreadId
  00017	48 0f ae 38	 clflush QWORD PTR [rax]

; 3502 : }

  0001b	c3		 ret	 0
_PyParallel_DisableParallelContexts ENDP
_TEXT	ENDS
PUBLIC	_PyParallel_NewThreadState
; Function compile flags: /Odtp
;	COMDAT _PyParallel_NewThreadState
_TEXT	SEGMENT
tstate$ = 8
_PyParallel_NewThreadState PROC				; COMDAT

; 3506 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 3507 :     return;
; 3508 : }

  00005	c3		 ret	 0
_PyParallel_NewThreadState ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _parallel_map
_TEXT	SEGMENT
self$ = 8
args$ = 16
_parallel_map PROC					; COMDAT

; 3513 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 3514 :     return NULL;

  0000a	33 c0		 xor	 eax, eax

; 3515 : }

  0000c	c3		 ret	 0
_parallel_map ENDP
_TEXT	ENDS
PUBLIC	_PyParallel_ModInit
EXTRN	PyModule_Create2TraceRefs:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyParallel_ModInit DD imagerel $LN4
	DD	imagerel $LN4+48
	DD	imagerel $unwind$_PyParallel_ModInit
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyParallel_ModInit DD 010401H
	DD	06204H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _PyParallel_ModInit
_TEXT	SEGMENT
m$ = 32
_PyParallel_ModInit PROC				; COMDAT

; 3555 : {

$LN4:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 3556 :     PyObject *m;
; 3557 : 
; 3558 :     m = PyModule_Create(&_parallelmodule);

  00004	ba f5 03 00 00	 mov	 edx, 1013		; 000003f5H
  00009	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_parallelmodule
  00010	e8 00 00 00 00	 call	 PyModule_Create2TraceRefs
  00015	48 89 44 24 20	 mov	 QWORD PTR m$[rsp], rax

; 3559 :     if (m == NULL)

  0001a	48 83 7c 24 20
	00		 cmp	 QWORD PTR m$[rsp], 0
  00020	75 04		 jne	 SHORT $LN1@PyParallel@25

; 3560 :         return NULL;

  00022	33 c0		 xor	 eax, eax
  00024	eb 05		 jmp	 SHORT $LN2@PyParallel@25
$LN1@PyParallel@25:

; 3561 : 
; 3562 :     return m;

  00026	48 8b 44 24 20	 mov	 rax, QWORD PTR m$[rsp]
$LN2@PyParallel@25:

; 3563 : }

  0002b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0002f	c3		 ret	 0
_PyParallel_ModInit ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$xlist_dealloc DD imagerel $LN3
	DD	imagerel $LN3+40
	DD	imagerel $unwind$xlist_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$xlist_dealloc DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT xlist_dealloc
_TEXT	SEGMENT
xlist$ = 48
xlist_dealloc PROC					; COMDAT

; 3568 : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 3569 :     HeapDestroy(xlist->heap_handle);

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR xlist$[rsp]
  0000e	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  00012	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_HeapDestroy

; 3570 :     free(xlist);

  00018	48 8b 4c 24 30	 mov	 rcx, QWORD PTR xlist$[rsp]
  0001d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 3571 : }

  00023	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00027	c3		 ret	 0
xlist_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DG@PACBDENP@xlist?5objects?5cannot?5be?5created?5@ ; `string'
PUBLIC	PyXList_New
EXTRN	PxList_NewFromHeap:PROC
EXTRN	PyExc_RuntimeError:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyXList_New DD imagerel $LN7
	DD	imagerel $LN7+259
	DD	imagerel $unwind$PyXList_New
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyXList_New DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_0DG@PACBDENP@xlist?5objects?5cannot?5be?5created?5@
CONST	SEGMENT
??_C@_0DG@PACBDENP@xlist?5objects?5cannot?5be?5created?5@ DB 'xlist objec'
	DB	'ts cannot be created from parallel threads', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyXList_New
_TEXT	SEGMENT
xlist$ = 32
PyXList_New PROC					; COMDAT

; 3575 : {

$LN7:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 3576 :     PyXListObject *xlist;
; 3577 : 
; 3578 :     if (Py_PXCTX) {

  00004	e8 00 00 00 00	 call	 _Py_PXCTX
  00009	85 c0		 test	 eax, eax
  0000b	74 1a		 je	 SHORT $LN4@PyXList_Ne

; 3579 :         PyErr_SetString(PyExc_RuntimeError,
; 3580 :                         "xlist objects cannot be "
; 3581 :                         "created from parallel threads");

  0000d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DG@PACBDENP@xlist?5objects?5cannot?5be?5created?5@
  00014	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeError
  0001b	e8 00 00 00 00	 call	 PyErr_SetString

; 3582 :         return NULL;

  00020	33 c0		 xor	 eax, eax
  00022	e9 d7 00 00 00	 jmp	 $LN5@PyXList_Ne
$LN4@PyXList_Ne:

; 3583 :     }
; 3584 : 
; 3585 :     xlist = (PyXListObject *)malloc(sizeof(PyXListObject));

  00027	b9 a0 00 00 00	 mov	 ecx, 160		; 000000a0H
  0002c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00032	48 89 44 24 20	 mov	 QWORD PTR xlist$[rsp], rax

; 3586 :     if (!xlist)

  00037	48 83 7c 24 20
	00		 cmp	 QWORD PTR xlist$[rsp], 0
  0003d	75 0a		 jne	 SHORT $LN3@PyXList_Ne

; 3587 :         return PyErr_NoMemory();

  0003f	e8 00 00 00 00	 call	 PyErr_NoMemory
  00044	e9 b5 00 00 00	 jmp	 $LN5@PyXList_Ne
$LN3@PyXList_Ne:

; 3588 : 
; 3589 :     memset(xlist, 0, sizeof(PyXListObject));

  00049	41 b8 a0 00 00
	00		 mov	 r8d, 160		; 000000a0H
  0004f	33 d2		 xor	 edx, edx
  00051	48 8b 4c 24 20	 mov	 rcx, QWORD PTR xlist$[rsp]
  00056	e8 00 00 00 00	 call	 memset

; 3590 : 
; 3591 :     xlist->heap_handle = HeapCreate(0, 0, 0);

  0005b	45 33 c0	 xor	 r8d, r8d
  0005e	33 d2		 xor	 edx, edx
  00060	33 c9		 xor	 ecx, ecx
  00062	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_HeapCreate
  00068	48 8b 4c 24 20	 mov	 rcx, QWORD PTR xlist$[rsp]
  0006d	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax

; 3592 :     if (!xlist->heap_handle) {

  00071	48 8b 44 24 20	 mov	 rax, QWORD PTR xlist$[rsp]
  00076	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  0007b	75 16		 jne	 SHORT $LN2@PyXList_Ne

; 3593 :         PyErr_SetFromWindowsErr(0);

  0007d	33 c9		 xor	 ecx, ecx
  0007f	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr

; 3594 :         free(xlist);

  00084	48 8b 4c 24 20	 mov	 rcx, QWORD PTR xlist$[rsp]
  00089	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 3595 :         return NULL;

  0008f	33 c0		 xor	 eax, eax
  00091	eb 6b		 jmp	 SHORT $LN5@PyXList_Ne
$LN2@PyXList_Ne:

; 3596 :     }
; 3597 : 
; 3598 :     xlist->head = PxList_NewFromHeap(xlist->heap_handle);

  00093	48 8b 44 24 20	 mov	 rax, QWORD PTR xlist$[rsp]
  00098	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  0009c	e8 00 00 00 00	 call	 PxList_NewFromHeap
  000a1	48 8b 4c 24 20	 mov	 rcx, QWORD PTR xlist$[rsp]
  000a6	48 89 41 60	 mov	 QWORD PTR [rcx+96], rax

; 3599 :     if (!xlist->head) {

  000aa	48 8b 44 24 20	 mov	 rax, QWORD PTR xlist$[rsp]
  000af	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  000b4	75 0f		 jne	 SHORT $LN1@PyXList_Ne

; 3600 :         free(xlist);

  000b6	48 8b 4c 24 20	 mov	 rcx, QWORD PTR xlist$[rsp]
  000bb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 3601 :         return NULL;

  000c1	33 c0		 xor	 eax, eax
  000c3	eb 39		 jmp	 SHORT $LN5@PyXList_Ne
$LN1@PyXList_Ne:

; 3602 :     }
; 3603 : 
; 3604 :     /* Manually initialize the type. */
; 3605 :     xlist->ob_base.ob_type = &PyXList_Type;

  000c5	48 8b 44 24 20	 mov	 rax, QWORD PTR xlist$[rsp]
  000ca	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyXList_Type
  000d1	48 89 48 58	 mov	 QWORD PTR [rax+88], rcx

; 3606 :     xlist->ob_base.ob_refcnt = 1;

  000d5	48 8b 44 24 20	 mov	 rax, QWORD PTR xlist$[rsp]
  000da	48 c7 40 50 01
	00 00 00	 mov	 QWORD PTR [rax+80], 1

; 3607 : 
; 3608 :     InitializeCriticalSectionAndSpinCount(&(xlist->cs), 4);

  000e2	48 8b 44 24 20	 mov	 rax, QWORD PTR xlist$[rsp]
  000e7	48 83 c0 70	 add	 rax, 112		; 00000070H
  000eb	ba 04 00 00 00	 mov	 edx, 4
  000f0	48 8b c8	 mov	 rcx, rax
  000f3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_InitializeCriticalSectionAndSpinCount

; 3609 : 
; 3610 :     return (PyObject *)xlist;

  000f9	48 8b 44 24 20	 mov	 rax, QWORD PTR xlist$[rsp]
$LN5@PyXList_Ne:

; 3611 : }

  000fe	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00102	c3		 ret	 0
PyXList_New ENDP
_TEXT	ENDS
PUBLIC	??_C@_1CI@IFHKCPGI@?$AAt?$AAp?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA?$CG?$AAP?$AAy?$AAX?$AAL?$AAi?$AAs?$AAt?$AA_?$AAT?$AAy?$AAp?$AAe?$AA?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$xlist_new DD imagerel $LN4
	DD	imagerel $LN4+71
	DD	imagerel $unwind$xlist_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$xlist_new DD 011301H
	DD	04213H
xdata	ENDS
;	COMDAT ??_C@_1CI@IFHKCPGI@?$AAt?$AAp?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA?$CG?$AAP?$AAy?$AAX?$AAL?$AAi?$AAs?$AAt?$AA_?$AAT?$AAy?$AAp?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1CI@IFHKCPGI@?$AAt?$AAp?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA?$CG?$AAP?$AAy?$AAX?$AAL?$AAi?$AAs?$AAt?$AA_?$AAT?$AAy?$AAp?$AAe?$AA?$AA@ DB 't'
	DB	00H, 'p', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '&', 00H
	DB	'P', 00H, 'y', 00H, 'X', 00H, 'L', 00H, 'i', 00H, 's', 00H, 't'
	DB	00H, '_', 00H, 'T', 00H, 'y', 00H, 'p', 00H, 'e', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT xlist_new
_TEXT	SEGMENT
tp$ = 48
args$ = 56
kwds$ = 64
xlist_new PROC						; COMDAT

; 3615 : {

$LN4:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 3616 :     assert(tp == &PyXList_Type);

  00013	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyXList_Type
  0001a	48 39 44 24 30	 cmp	 QWORD PTR tp$[rsp], rax
  0001f	74 1c		 je	 SHORT $LN3@xlist_new
  00021	41 b8 20 0e 00
	00		 mov	 r8d, 3616		; 00000e20H
  00027	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0002e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CI@IFHKCPGI@?$AAt?$AAp?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA?$CG?$AAP?$AAy?$AAX?$AAL?$AAi?$AAs?$AAt?$AA_?$AAT?$AAy?$AAp?$AAe?$AA?$AA@
  00035	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0003b	33 c0		 xor	 eax, eax
$LN3@xlist_new:

; 3617 :     return PyXList_New();

  0003d	e8 00 00 00 00	 call	 PyXList_New

; 3618 : }

  00042	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00046	c3		 ret	 0
xlist_new ENDP
_TEXT	ENDS
PUBLIC	??_C@_1BI@ECNGIFOH@?$AAn?$AAi?$AAt?$AAe?$AAm?$AAs?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$xlist_alloc DD imagerel $LN5
	DD	imagerel $LN5+102
	DD	imagerel $unwind$xlist_alloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$xlist_alloc DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT ??_C@_1BI@ECNGIFOH@?$AAn?$AAi?$AAt?$AAe?$AAm?$AAs?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1BI@ECNGIFOH@?$AAn?$AAi?$AAt?$AAe?$AAm?$AAs?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@ DB 'n'
	DB	00H, 'i', 00H, 't', 00H, 'e', 00H, 'm', 00H, 's', 00H, ' ', 00H
	DB	'=', 00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT xlist_alloc
_TEXT	SEGMENT
tp$ = 48
nitems$ = 56
xlist_alloc PROC					; COMDAT

; 3622 : {

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 3623 :     assert(nitems == 0);

  0000e	48 83 7c 24 38
	00		 cmp	 QWORD PTR nitems$[rsp], 0
  00014	74 1c		 je	 SHORT $LN3@xlist_allo
  00016	41 b8 27 0e 00
	00		 mov	 r8d, 3623		; 00000e27H
  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00023	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BI@ECNGIFOH@?$AAn?$AAi?$AAt?$AAe?$AAm?$AAs?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@
  0002a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00030	33 c0		 xor	 eax, eax
$LN3@xlist_allo:

; 3624 :     assert(tp == &PyXList_Type);

  00032	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyXList_Type
  00039	48 39 44 24 30	 cmp	 QWORD PTR tp$[rsp], rax
  0003e	74 1c		 je	 SHORT $LN4@xlist_allo
  00040	41 b8 28 0e 00
	00		 mov	 r8d, 3624		; 00000e28H
  00046	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0004d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CI@IFHKCPGI@?$AAt?$AAp?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA?$CG?$AAP?$AAy?$AAX?$AAL?$AAi?$AAs?$AAt?$AA_?$AAT?$AAy?$AAp?$AAe?$AA?$AA@
  00054	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0005a	33 c0		 xor	 eax, eax
$LN4@xlist_allo:

; 3625 : 
; 3626 :     return PyXList_New();

  0005c	e8 00 00 00 00	 call	 PyXList_New

; 3627 : }

  00061	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00065	c3		 ret	 0
xlist_alloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_09HMODBDMJ@xlist_pop?$AA@			; `string'
PUBLIC	??_C@_1BK@FANMKJDN@?$AAa?$AAr?$AAg?$AAs?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ ; `string'
EXTRN	PxList_Pop:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$xlist_pop DD imagerel $LN8
	DD	imagerel $LN8+190
	DD	imagerel $unwind$xlist_pop
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$xlist_pop DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_09HMODBDMJ@xlist_pop?$AA@
CONST	SEGMENT
??_C@_09HMODBDMJ@xlist_pop?$AA@ DB 'xlist_pop', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1BK@FANMKJDN@?$AAa?$AAr?$AAg?$AAs?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
CONST	SEGMENT
??_C@_1BK@FANMKJDN@?$AAa?$AAr?$AAg?$AAs?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ DB 'a'
	DB	00H, 'r', 00H, 'g', 00H, 's', 00H, ' ', 00H, '=', 00H, '=', 00H
	DB	' ', 00H, 'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT xlist_pop
_TEXT	SEGMENT
obj$ = 32
item$ = 40
xlist$ = 48
tv80 = 56
self$ = 80
args$ = 88
xlist_pop PROC						; COMDAT

; 3631 : {

$LN8:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 3632 :     PyXListObject *xlist = (PyXListObject *)self;

  0000e	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00013	48 89 44 24 30	 mov	 QWORD PTR xlist$[rsp], rax

; 3633 :     PxListItem *item;
; 3634 :     PyObject *obj;
; 3635 :     assert(args == NULL);

  00018	48 83 7c 24 58
	00		 cmp	 QWORD PTR args$[rsp], 0
  0001e	74 1c		 je	 SHORT $LN5@xlist_pop
  00020	41 b8 33 0e 00
	00		 mov	 r8d, 3635		; 00000e33H
  00026	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0002d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BK@FANMKJDN@?$AAa?$AAr?$AAg?$AAs?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
  00034	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0003a	33 c0		 xor	 eax, eax
$LN5@xlist_pop:

; 3636 :     Py_GUARD

  0003c	e8 00 00 00 00	 call	 _Py_PXCTX
  00041	85 c0		 test	 eax, eax
  00043	74 1c		 je	 SHORT $LN2@xlist_pop
  00045	45 33 c9	 xor	 r9d, r9d
  00048	41 b8 34 0e 00
	00		 mov	 r8d, 3636		; 00000e34H
  0004e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@PGHBGAOD@?4?4?2Python?2pyparallel?4c?$AA@
  00055	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09HMODBDMJ@xlist_pop?$AA@
  0005c	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN2@xlist_pop:

; 3637 :     /*Py_INCREF(xlist);*/
; 3638 :     item = PxList_Pop(xlist->head);

  00061	48 8b 44 24 30	 mov	 rax, QWORD PTR xlist$[rsp]
  00066	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  0006a	e8 00 00 00 00	 call	 PxList_Pop
  0006f	48 89 44 24 28	 mov	 QWORD PTR item$[rsp], rax

; 3639 :     obj = (item ? I2O(item) : NULL);

  00074	48 83 7c 24 28
	00		 cmp	 QWORD PTR item$[rsp], 0
  0007a	74 10		 je	 SHORT $LN6@xlist_pop
  0007c	48 8b 44 24 28	 mov	 rax, QWORD PTR item$[rsp]
  00081	48 83 e8 10	 sub	 rax, 16
  00085	48 89 44 24 38	 mov	 QWORD PTR tv80[rsp], rax
  0008a	eb 09		 jmp	 SHORT $LN7@xlist_pop
$LN6@xlist_pop:
  0008c	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR tv80[rsp], 0
$LN7@xlist_pop:
  00095	48 8b 44 24 38	 mov	 rax, QWORD PTR tv80[rsp]
  0009a	48 89 44 24 20	 mov	 QWORD PTR obj$[rsp], rax

; 3640 :     if (obj)

  0009f	48 83 7c 24 20
	00		 cmp	 QWORD PTR obj$[rsp], 0
  000a5	74 0d		 je	 SHORT $LN1@xlist_pop

; 3641 :         Py_REFCNT(obj) = 1;

  000a7	48 8b 44 24 20	 mov	 rax, QWORD PTR obj$[rsp]
  000ac	48 c7 40 50 01
	00 00 00	 mov	 QWORD PTR [rax+80], 1
$LN1@xlist_pop:

; 3642 :     return obj;

  000b4	48 8b 44 24 20	 mov	 rax, QWORD PTR obj$[rsp]

; 3643 : }

  000b9	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000bd	c3		 ret	 0
xlist_pop ENDP
_TEXT	ENDS
PUBLIC	PyXList_Pop
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyXList_Pop DD imagerel $LN3
	DD	imagerel $LN3+26
	DD	imagerel $unwind$PyXList_Pop
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyXList_Pop DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyXList_Pop
_TEXT	SEGMENT
xlist$ = 48
PyXList_Pop PROC					; COMDAT

; 3647 : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 3648 :     return xlist_pop(xlist, NULL);

  00009	33 d2		 xor	 edx, edx
  0000b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR xlist$[rsp]
  00010	e8 00 00 00 00	 call	 xlist_pop

; 3649 : }

  00015	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00019	c3		 ret	 0
PyXList_Pop ENDP
_TEXT	ENDS
PUBLIC	??_C@_1CE@CNIMEOPK@?$AAP?$AAx?$AA_?$AAC?$AAL?$AAO?$AAN?$AAE?$AAD?$AA?$CI?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1O@PHBBLDEN@?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?$AA@ ; `string'
PUBLIC	_PxObject_Init
PUBLIC	PyObject_Clone
EXTRN	_PyUnicode_Copy:PROC
EXTRN	_PyLong_Copy:PROC
EXTRN	PyErr_Format:PROC
EXTRN	PyFloat_Type:BYTE
EXTRN	PyLong_Type:BYTE
EXTRN	PyUnicode_Type:BYTE
EXTRN	PyBytes_Type:BYTE
EXTRN	_fltused:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyObject_Clone DD imagerel $LN17
	DD	imagerel $LN17+508
	DD	imagerel $unwind$PyObject_Clone
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyObject_Clone DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_1CE@CNIMEOPK@?$AAP?$AAx?$AA_?$AAC?$AAL?$AAO?$AAN?$AAE?$AAD?$AA?$CI?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CE@CNIMEOPK@?$AAP?$AAx?$AA_?$AAC?$AAL?$AAO?$AAN?$AAE?$AAD?$AA?$CI?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'x', 00H, '_', 00H, 'C', 00H, 'L', 00H, 'O', 00H, 'N', 00H
	DB	'E', 00H, 'D', 00H, '(', 00H, 'r', 00H, 'e', 00H, 's', 00H, 'u'
	DB	00H, 'l', 00H, 't', 00H, ')', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1O@PHBBLDEN@?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?$AA@
CONST	SEGMENT
??_C@_1O@PHBBLDEN@?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?$AA@ DB 'r', 00H, 'e'
	DB	00H, 's', 00H, 'u', 00H, 'l', 00H, 't', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyObject_Clone
_TEXT	SEGMENT
valid_type$ = 32
result$ = 40
tp$ = 48
tv75 = 56
src$ = 80
errmsg$ = 88
PyObject_Clone PROC					; COMDAT

; 3653 : {

$LN17:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 3654 :     int valid_type;
; 3655 :     PyObject *result = NULL;

  0000e	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR result$[rsp], 0

; 3656 :     PyTypeObject *tp;
; 3657 : 
; 3658 :     tp = Py_TYPE(src);

  00017	48 8b 44 24 50	 mov	 rax, QWORD PTR src$[rsp]
  0001c	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00020	48 89 44 24 30	 mov	 QWORD PTR tp$[rsp], rax

; 3659 : 
; 3660 :     valid_type = (
; 3661 :         PyBytes_CheckExact(src)         ||
; 3662 :         PyByteArray_CheckExact(src)     ||
; 3663 :         PyUnicode_CheckExact(src)       ||
; 3664 :         PyLong_CheckExact(src)          ||
; 3665 :         PyFloat_CheckExact(src)
; 3666 :     );

  00025	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyBytes_Type
  0002c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR src$[rsp]
  00031	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00035	74 52		 je	 SHORT $LN11@PyObject_C
  00037	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyByteArray_Type
  0003e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR src$[rsp]
  00043	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00047	74 40		 je	 SHORT $LN11@PyObject_C
  00049	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyUnicode_Type
  00050	48 8b 4c 24 50	 mov	 rcx, QWORD PTR src$[rsp]
  00055	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00059	74 2e		 je	 SHORT $LN11@PyObject_C
  0005b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyLong_Type
  00062	48 8b 4c 24 50	 mov	 rcx, QWORD PTR src$[rsp]
  00067	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0006b	74 1c		 je	 SHORT $LN11@PyObject_C
  0006d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyFloat_Type
  00074	48 8b 4c 24 50	 mov	 rcx, QWORD PTR src$[rsp]
  00079	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0007d	74 0a		 je	 SHORT $LN11@PyObject_C
  0007f	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv75[rsp], 0
  00087	eb 08		 jmp	 SHORT $LN12@PyObject_C
$LN11@PyObject_C:
  00089	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR tv75[rsp], 1
$LN12@PyObject_C:
  00091	8b 44 24 38	 mov	 eax, DWORD PTR tv75[rsp]
  00095	89 44 24 20	 mov	 DWORD PTR valid_type$[rsp], eax

; 3667 : 
; 3668 :     if (!valid_type) {

  00099	83 7c 24 20 00	 cmp	 DWORD PTR valid_type$[rsp], 0
  0009e	75 21		 jne	 SHORT $LN8@PyObject_C

; 3669 :         PyErr_Format(PyExc_ValueError, errmsg, tp->tp_name);

  000a0	48 8b 44 24 30	 mov	 rax, QWORD PTR tp$[rsp]
  000a5	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  000a9	48 8b 54 24 58	 mov	 rdx, QWORD PTR errmsg$[rsp]
  000ae	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  000b5	e8 00 00 00 00	 call	 PyErr_Format

; 3670 :         return NULL;

  000ba	33 c0		 xor	 eax, eax
  000bc	e9 36 01 00 00	 jmp	 $LN9@PyObject_C
$LN8@PyObject_C:

; 3671 :     }
; 3672 : 
; 3673 :     assert(_PyParallel_IsHeapOverrideActive());

  000c1	e8 00 00 00 00	 call	 _PyParallel_IsHeapOverrideActive
  000c6	0f be c0	 movsx	 eax, al
  000c9	85 c0		 test	 eax, eax
  000cb	75 1c		 jne	 SHORT $LN13@PyObject_C
  000cd	41 b8 59 0e 00
	00		 mov	 r8d, 3673		; 00000e59H
  000d3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  000da	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EG@PJJDKMK@?$AA_?$AAP?$AAy?$AAP?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA_?$AAI?$AAs?$AAH?$AAe?$AAa?$AAp?$AAO?$AAv?$AAe?$AAr?$AAr?$AAi?$AAd?$AAe?$AAA?$AAc?$AAt?$AAi?$AAv?$AAe@
  000e1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000e7	33 c0		 xor	 eax, eax
$LN13@PyObject_C:

; 3674 : 
; 3675 :     if (PyLong_CheckExact(src)) {

  000e9	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyLong_Type
  000f0	48 8b 4c 24 50	 mov	 rcx, QWORD PTR src$[rsp]
  000f5	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  000f9	75 14		 jne	 SHORT $LN7@PyObject_C

; 3676 :         result = _PyLong_Copy((PyLongObject *)src);

  000fb	48 8b 4c 24 50	 mov	 rcx, QWORD PTR src$[rsp]
  00100	e8 00 00 00 00	 call	 _PyLong_Copy
  00105	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax
  0010a	e9 8f 00 00 00	 jmp	 $LN6@PyObject_C
$LN7@PyObject_C:

; 3677 : 
; 3678 :     } else if (PyFloat_CheckExact(src)) {

  0010f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyFloat_Type
  00116	48 8b 4c 24 50	 mov	 rcx, QWORD PTR src$[rsp]
  0011b	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0011f	75 38		 jne	 SHORT $LN5@PyObject_C

; 3679 :         result = _PxObject_Init(NULL, &PyFloat_Type);

  00121	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyFloat_Type
  00128	33 c9		 xor	 ecx, ecx
  0012a	e8 00 00 00 00	 call	 _PxObject_Init
  0012f	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax

; 3680 :         if (!result)

  00134	48 83 7c 24 28
	00		 cmp	 QWORD PTR result$[rsp], 0
  0013a	75 07		 jne	 SHORT $LN4@PyObject_C

; 3681 :             return NULL;

  0013c	33 c0		 xor	 eax, eax
  0013e	e9 b4 00 00 00	 jmp	 $LN9@PyObject_C
$LN4@PyObject_C:

; 3682 :         PyFloat_AS_DOUBLE(result) = PyFloat_AS_DOUBLE(src);

  00143	48 8b 44 24 50	 mov	 rax, QWORD PTR src$[rsp]
  00148	f2 0f 10 40 60	 movsdx	 xmm0, QWORD PTR [rax+96]
  0014d	48 8b 44 24 28	 mov	 rax, QWORD PTR result$[rsp]
  00152	f2 0f 11 40 60	 movsdx	 QWORD PTR [rax+96], xmm0
  00157	eb 45		 jmp	 SHORT $LN3@PyObject_C
$LN5@PyObject_C:

; 3683 : 
; 3684 :     } else if (PyUnicode_CheckExact(src)) {

  00159	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyUnicode_Type
  00160	48 8b 4c 24 50	 mov	 rcx, QWORD PTR src$[rsp]
  00165	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00169	75 11		 jne	 SHORT $LN2@PyObject_C

; 3685 :         result = _PyUnicode_Copy(src);

  0016b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR src$[rsp]
  00170	e8 00 00 00 00	 call	 _PyUnicode_Copy
  00175	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax

; 3686 : 
; 3687 :     } else {

  0017a	eb 22		 jmp	 SHORT $LN1@PyObject_C
$LN2@PyObject_C:

; 3688 :         assert(0);

  0017c	33 c0		 xor	 eax, eax
  0017e	85 c0		 test	 eax, eax
  00180	75 1c		 jne	 SHORT $LN14@PyObject_C
  00182	41 b8 68 0e 00
	00		 mov	 r8d, 3688		; 00000e68H
  00188	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0018f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_13COJANIEC@?$AA0?$AA?$AA@
  00196	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0019c	33 c0		 xor	 eax, eax
$LN14@PyObject_C:
$LN1@PyObject_C:
$LN3@PyObject_C:
$LN6@PyObject_C:

; 3689 :     }
; 3690 : 
; 3691 :     assert(result);

  0019e	48 83 7c 24 28
	00		 cmp	 QWORD PTR result$[rsp], 0
  001a4	75 1c		 jne	 SHORT $LN15@PyObject_C
  001a6	41 b8 6b 0e 00
	00		 mov	 r8d, 3691		; 00000e6bH
  001ac	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  001b3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1O@PHBBLDEN@?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?$AA@
  001ba	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001c0	33 c0		 xor	 eax, eax
$LN15@PyObject_C:

; 3692 :     assert(Px_CLONED(result));

  001c2	48 8b 44 24 28	 mov	 rax, QWORD PTR result$[rsp]
  001c7	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  001cb	48 25 80 00 00
	00		 and	 rax, 128		; 00000080H
  001d1	48 85 c0	 test	 rax, rax
  001d4	75 1c		 jne	 SHORT $LN16@PyObject_C
  001d6	41 b8 6c 0e 00
	00		 mov	 r8d, 3692		; 00000e6cH
  001dc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  001e3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CE@CNIMEOPK@?$AAP?$AAx?$AA_?$AAC?$AAL?$AAO?$AAN?$AAE?$AAD?$AA?$CI?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?$CJ?$AA?$AA@
  001ea	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001f0	33 c0		 xor	 eax, eax
$LN16@PyObject_C:

; 3693 : 
; 3694 :     return result;

  001f2	48 8b 44 24 28	 mov	 rax, QWORD PTR result$[rsp]
$LN9@PyObject_C:

; 3695 : }

  001f7	48 83 c4 48	 add	 rsp, 72			; 00000048H
  001fb	c3		 ret	 0
PyObject_Clone ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CO@NKDGGCNB@objects?5of?5type?5?$CFs?5cannot?5be?5pus@ ; `string'
PUBLIC	??_C@_17NHHLECMC@?$AAs?$AAr?$AAc?$AA?$AA@	; `string'
EXTRN	PxList_PushObject:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$xlist_push DD imagerel $LN7
	DD	imagerel $LN7+186
	DD	imagerel $unwind$xlist_push
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$xlist_push DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT ??_C@_0CO@NKDGGCNB@objects?5of?5type?5?$CFs?5cannot?5be?5pus@
CONST	SEGMENT
??_C@_0CO@NKDGGCNB@objects?5of?5type?5?$CFs?5cannot?5be?5pus@ DB 'objects'
	DB	' of type %s cannot be pushed to xlists', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_17NHHLECMC@?$AAs?$AAr?$AAc?$AA?$AA@
CONST	SEGMENT
??_C@_17NHHLECMC@?$AAs?$AAr?$AAc?$AA?$AA@ DB 's', 00H, 'r', 00H, 'c', 00H
	DB	00H, 00H					; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT xlist_push
_TEXT	SEGMENT
xlist$ = 32
dst$128868 = 40
obj$ = 64
src$ = 72
xlist_push PROC						; COMDAT

; 3699 : {

$LN7:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 3700 :     PyXListObject *xlist = (PyXListObject *)obj;

  0000e	48 8b 44 24 40	 mov	 rax, QWORD PTR obj$[rsp]
  00013	48 89 44 24 20	 mov	 QWORD PTR xlist$[rsp], rax

; 3701 :     assert(src);

  00018	48 83 7c 24 48
	00		 cmp	 QWORD PTR src$[rsp], 0
  0001e	75 1c		 jne	 SHORT $LN6@xlist_push
  00020	41 b8 75 0e 00
	00		 mov	 r8d, 3701		; 00000e75H
  00026	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0002d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_17NHHLECMC@?$AAs?$AAr?$AAc?$AA?$AA@
  00034	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0003a	33 c0		 xor	 eax, eax
$LN6@xlist_push:

; 3702 : 
; 3703 :     /*Py_INCREF(xlist);*/
; 3704 :     /*Py_INCREF(src);*/
; 3705 : 
; 3706 :     if (!Py_PXCTX)

  0003c	e8 00 00 00 00	 call	 _Py_PXCTX
  00041	85 c0		 test	 eax, eax
  00043	75 15		 jne	 SHORT $LN3@xlist_push

; 3707 :         PxList_PushObject(xlist->head, src);

  00045	48 8b 54 24 48	 mov	 rdx, QWORD PTR src$[rsp]
  0004a	48 8b 44 24 20	 mov	 rax, QWORD PTR xlist$[rsp]
  0004f	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00053	e8 00 00 00 00	 call	 PxList_PushObject

; 3708 :     else {

  00058	eb 48		 jmp	 SHORT $LN2@xlist_push
$LN3@xlist_push:

; 3709 :         PyObject *dst;
; 3710 :         _PyParallel_SetHeapOverride(xlist->heap_handle);

  0005a	48 8b 44 24 20	 mov	 rax, QWORD PTR xlist$[rsp]
  0005f	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  00063	e8 00 00 00 00	 call	 _PyParallel_SetHeapOverride

; 3711 :         dst = PyObject_Clone(src, "objects of type %s cannot "
; 3712 :                                   "be pushed to xlists");

  00068	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CO@NKDGGCNB@objects?5of?5type?5?$CFs?5cannot?5be?5pus@
  0006f	48 8b 4c 24 48	 mov	 rcx, QWORD PTR src$[rsp]
  00074	e8 00 00 00 00	 call	 PyObject_Clone
  00079	48 89 44 24 28	 mov	 QWORD PTR dst$128868[rsp], rax

; 3713 :         _PyParallel_RemoveHeapOverride();

  0007e	e8 00 00 00 00	 call	 _PyParallel_RemoveHeapOverride

; 3714 :         if (!dst)

  00083	48 83 7c 24 28
	00		 cmp	 QWORD PTR dst$128868[rsp], 0
  00089	75 04		 jne	 SHORT $LN1@xlist_push

; 3715 :             return NULL;

  0008b	33 c0		 xor	 eax, eax
  0008d	eb 26		 jmp	 SHORT $LN4@xlist_push
$LN1@xlist_push:

; 3716 : 
; 3717 :         PxList_PushObject(xlist->head, dst);

  0008f	48 8b 54 24 28	 mov	 rdx, QWORD PTR dst$128868[rsp]
  00094	48 8b 44 24 20	 mov	 rax, QWORD PTR xlist$[rsp]
  00099	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  0009d	e8 00 00 00 00	 call	 PxList_PushObject
$LN2@xlist_push:

; 3718 :     }
; 3719 : 
; 3720 :     /*
; 3721 :     if (Px_CV_WAITERS(xlist))
; 3722 :         ConditionVariableWakeOne(&(xlist->cv));
; 3723 :     */
; 3724 : 
; 3725 :     Py_RETURN_NONE;

  000a2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  000a9	e8 00 00 00 00	 call	 _Py_IncRef
  000ae	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
$LN4@xlist_push:

; 3726 : }

  000b5	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000b9	c3		 ret	 0
xlist_push ENDP
_TEXT	ENDS
PUBLIC	??_C@_1EI@EFGNGFAC@?$AA?$CB?$AA_?$AAP?$AAy?$AAP?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA_?$AAI?$AAs?$AAH?$AAe?$AAa?$AAp?$AAO?$AAv?$AAe?$AAr?$AAr?$AAi?$AAd?$AAe?$AAA?$AAc?$AAt?$AAi?$AAv@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyParallel_SetHeapOverride DD imagerel _PyParallel_SetHeapOverride
	DD	imagerel _PyParallel_SetHeapOverride+89
	DD	imagerel $unwind$_PyParallel_SetHeapOverride
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyParallel_SetHeapOverride DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT ??_C@_1EI@EFGNGFAC@?$AA?$CB?$AA_?$AAP?$AAy?$AAP?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA_?$AAI?$AAs?$AAH?$AAe?$AAa?$AAp?$AAO?$AAv?$AAe?$AAr?$AAr?$AAi?$AAd?$AAe?$AAA?$AAc?$AAt?$AAi?$AAv@
CONST	SEGMENT
??_C@_1EI@EFGNGFAC@?$AA?$CB?$AA_?$AAP?$AAy?$AAP?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA_?$AAI?$AAs?$AAH?$AAe?$AAa?$AAp?$AAO?$AAv?$AAe?$AAr?$AAr?$AAi?$AAd?$AAe?$AAA?$AAc?$AAt?$AAi?$AAv@ DB '!'
	DB	00H, '_', 00H, 'P', 00H, 'y', 00H, 'P', 00H, 'a', 00H, 'r', 00H
	DB	'a', 00H, 'l', 00H, 'l', 00H, 'e', 00H, 'l', 00H, '_', 00H, 'I'
	DB	00H, 's', 00H, 'H', 00H, 'e', 00H, 'a', 00H, 'p', 00H, 'O', 00H
	DB	'v', 00H, 'e', 00H, 'r', 00H, 'r', 00H, 'i', 00H, 'd', 00H, 'e'
	DB	00H, 'A', 00H, 'c', 00H, 't', 00H, 'i', 00H, 'v', 00H, 'e', 00H
	DB	'(', 00H, ')', 00H, 00H, 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PyParallel_SetHeapOverride
_TEXT	SEGMENT
heap_handle$ = 48
_PyParallel_SetHeapOverride PROC			; COMDAT

; 86   : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 87   :     assert(!_PyParallel_IsHeapOverrideActive());

  00009	e8 00 00 00 00	 call	 _PyParallel_IsHeapOverrideActive
  0000e	0f be c0	 movsx	 eax, al
  00011	85 c0		 test	 eax, eax
  00013	74 1c		 je	 SHORT $LN3@PyParallel@26
  00015	41 b8 57 00 00
	00		 mov	 r8d, 87			; 00000057H
  0001b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EI@EFGNGFAC@?$AA?$CB?$AA_?$AAP?$AAy?$AAP?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA_?$AAI?$AAs?$AAH?$AAe?$AAa?$AAp?$AAO?$AAv?$AAe?$AAr?$AAr?$AAi?$AAd?$AAe?$AAA?$AAc?$AAt?$AAi?$AAv@
  00029	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0002f	33 c0		 xor	 eax, eax
$LN3@PyParallel@26:

; 88   :     heap_override = heap_handle;

  00031	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:heap_override
  00036	8b c0		 mov	 eax, eax
  00038	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0003e	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00047	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  0004b	48 8b 54 24 30	 mov	 rdx, QWORD PTR heap_handle$[rsp]
  00050	48 89 14 08	 mov	 QWORD PTR [rax+rcx], rdx

; 89   : }

  00054	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00058	c3		 ret	 0
_PyParallel_SetHeapOverride ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyParallel_RemoveHeapOverride DD imagerel _PyParallel_RemoveHeapOverride
	DD	imagerel _PyParallel_RemoveHeapOverride+83
	DD	imagerel $unwind$_PyParallel_RemoveHeapOverride
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyParallel_RemoveHeapOverride DD 010401H
	DD	04204H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _PyParallel_RemoveHeapOverride
_TEXT	SEGMENT
_PyParallel_RemoveHeapOverride PROC			; COMDAT

; 102  : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 103  :     assert(_PyParallel_IsHeapOverrideActive());

  00004	e8 00 00 00 00	 call	 _PyParallel_IsHeapOverrideActive
  00009	0f be c0	 movsx	 eax, al
  0000c	85 c0		 test	 eax, eax
  0000e	75 1c		 jne	 SHORT $LN3@PyParallel@27
  00010	41 b8 67 00 00
	00		 mov	 r8d, 103		; 00000067H
  00016	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EG@PJJDKMK@?$AA_?$AAP?$AAy?$AAP?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA_?$AAI?$AAs?$AAH?$AAe?$AAa?$AAp?$AAO?$AAv?$AAe?$AAr?$AAr?$AAi?$AAd?$AAe?$AAA?$AAc?$AAt?$AAi?$AAv?$AAe@
  00024	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0002a	33 c0		 xor	 eax, eax
$LN3@PyParallel@27:

; 104  :     heap_override = NULL;

  0002c	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:heap_override
  00031	8b c0		 mov	 eax, eax
  00033	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00039	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00042	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  00046	48 c7 04 08 00
	00 00 00	 mov	 QWORD PTR [rax+rcx], 0

; 105  : }

  0004e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00052	c3		 ret	 0
_PyParallel_RemoveHeapOverride ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$xlist_flush DD imagerel $LN3
	DD	imagerel $LN3+38
	DD	imagerel $unwind$xlist_flush
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$xlist_flush DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT xlist_flush
_TEXT	SEGMENT
self$ = 48
arg$ = 56
xlist_flush PROC					; COMDAT

; 3730 : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 3731 :     Py_RETURN_NONE;

  0000e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00015	e8 00 00 00 00	 call	 _Py_IncRef
  0001a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 3732 : }

  00021	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00025	c3		 ret	 0
xlist_flush ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyXList_Length DD imagerel $LN3
	DD	imagerel $LN3+51
	DD	imagerel $unwind$PyXList_Length
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyXList_Length DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyXList_Length
_TEXT	SEGMENT
xlist$ = 32
self$ = 64
PyXList_Length PROC					; COMDAT

; 3736 : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 3737 :     PyXListObject *xlist = (PyXListObject *)self;

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0000e	48 89 44 24 20	 mov	 QWORD PTR xlist$[rsp], rax

; 3738 :     Py_INCREF(xlist);

  00013	48 8b 4c 24 20	 mov	 rcx, QWORD PTR xlist$[rsp]
  00018	e8 00 00 00 00	 call	 _Py_IncRef

; 3739 :     return PxList_QueryDepth(xlist->head);

  0001d	48 8b 44 24 20	 mov	 rax, QWORD PTR xlist$[rsp]
  00022	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00026	e8 00 00 00 00	 call	 PxList_QueryDepth
  0002b	0f b7 c0	 movzx	 eax, ax

; 3740 : }

  0002e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00032	c3		 ret	 0
PyXList_Length ENDP
_TEXT	ENDS
PUBLIC	_is_active_ex
EXTRN	__imp_TryEnterCriticalSection:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_is_active_ex DD imagerel $LN6
	DD	imagerel $LN6+531
	DD	imagerel $unwind$_is_active_ex
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_is_active_ex DD 010401H
	DD	08204H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _is_active_ex
_TEXT	SEGMENT
px$ = 32
tstate$ = 40
rv$ = 48
tv171 = 52
_is_active_ex PROC					; COMDAT

; 3819 : {

$LN6:
  00000	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 3820 :     PyThreadState *tstate = get_main_thread_state();

  00004	e8 00 00 00 00	 call	 get_main_thread_state
  00009	48 89 44 24 28	 mov	 QWORD PTR tstate$[rsp], rax

; 3821 :     PxState *px = (PxState *)tstate->px;

  0000e	48 8b 44 24 28	 mov	 rax, QWORD PTR tstate$[rsp]
  00013	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  0001a	48 89 44 24 20	 mov	 QWORD PTR px$[rsp], rax

; 3822 :     int rv;
; 3823 : 
; 3824 :     if (!TryEnterCriticalSection(&(px->cs)))

  0001f	48 8b 44 24 20	 mov	 rax, QWORD PTR px$[rsp]
  00024	48 05 a8 00 00
	00		 add	 rax, 168		; 000000a8H
  0002a	48 8b c8	 mov	 rcx, rax
  0002d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_TryEnterCriticalSection
  00033	85 c0		 test	 eax, eax
  00035	75 0a		 jne	 SHORT $LN1@is_active_

; 3825 :         return 1;

  00037	b8 01 00 00 00	 mov	 eax, 1
  0003c	e9 cd 01 00 00	 jmp	 $LN2@is_active_
$LN1@is_active_:

; 3826 : 
; 3827 :     rv = !(px->ctx_first == NULL &&
; 3828 :            px->done == px->last_done_count &&
; 3829 :            px->submitted == px->last_submitted_count &&
; 3830 :            px->pending == 0 &&
; 3831 :            px->inflight == 0 &&
; 3832 :            px->sync_wait_submitted == px->last_sync_wait_submitted_count &&
; 3833 :            px->sync_wait_pending == 0 &&
; 3834 :            px->sync_wait_inflight == 0 &&
; 3835 :            px->sync_wait_done == px->last_sync_wait_done_count &&
; 3836 :            px->sync_nowait_submitted == px->last_sync_nowait_submitted_count &&
; 3837 :            px->sync_nowait_pending == 0 &&
; 3838 :            px->sync_nowait_inflight == 0 &&
; 3839 :            px->sync_nowait_done == px->last_sync_nowait_done_count &&
; 3840 :            PxList_QueryDepth(px->errors)   == 0 &&
; 3841 :            PxList_QueryDepth(px->finished) == 0 &&
; 3842 :            PxList_QueryDepth(px->incoming) == 0 &&
; 3843 :            PxList_QueryDepth(px->completed_errbacks) == 0 &&
; 3844 :            PxList_QueryDepth(px->completed_callbacks) == 0);

  00041	48 8b 44 24 20	 mov	 rax, QWORD PTR px$[rsp]
  00046	48 83 78 78 00	 cmp	 QWORD PTR [rax+120], 0
  0004b	0f 85 95 01 00
	00		 jne	 $LN4@is_active_
  00051	48 8b 44 24 20	 mov	 rax, QWORD PTR px$[rsp]
  00056	48 8b 80 18 01
	00 00		 mov	 rax, QWORD PTR [rax+280]
  0005d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR px$[rsp]
  00062	48 3b 81 a8 01
	00 00		 cmp	 rax, QWORD PTR [rcx+424]
  00069	0f 85 77 01 00
	00		 jne	 $LN4@is_active_
  0006f	48 8b 44 24 20	 mov	 rax, QWORD PTR px$[rsp]
  00074	48 8b 80 08 01
	00 00		 mov	 rax, QWORD PTR [rax+264]
  0007b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR px$[rsp]
  00080	48 3b 81 b0 01
	00 00		 cmp	 rax, QWORD PTR [rcx+432]
  00087	0f 85 59 01 00
	00		 jne	 $LN4@is_active_
  0008d	48 8b 44 24 20	 mov	 rax, QWORD PTR px$[rsp]
  00092	8b 80 10 01 00
	00		 mov	 eax, DWORD PTR [rax+272]
  00098	85 c0		 test	 eax, eax
  0009a	0f 85 46 01 00
	00		 jne	 $LN4@is_active_
  000a0	48 8b 44 24 20	 mov	 rax, QWORD PTR px$[rsp]
  000a5	8b 80 14 01 00
	00		 mov	 eax, DWORD PTR [rax+276]
  000ab	85 c0		 test	 eax, eax
  000ad	0f 85 33 01 00
	00		 jne	 $LN4@is_active_
  000b3	48 8b 44 24 20	 mov	 rax, QWORD PTR px$[rsp]
  000b8	48 8b 80 78 01
	00 00		 mov	 rax, QWORD PTR [rax+376]
  000bf	48 8b 4c 24 20	 mov	 rcx, QWORD PTR px$[rsp]
  000c4	48 3b 81 c0 01
	00 00		 cmp	 rax, QWORD PTR [rcx+448]
  000cb	0f 85 15 01 00
	00		 jne	 $LN4@is_active_
  000d1	48 8b 44 24 20	 mov	 rax, QWORD PTR px$[rsp]
  000d6	8b 80 80 01 00
	00		 mov	 eax, DWORD PTR [rax+384]
  000dc	85 c0		 test	 eax, eax
  000de	0f 85 02 01 00
	00		 jne	 $LN4@is_active_
  000e4	48 8b 44 24 20	 mov	 rax, QWORD PTR px$[rsp]
  000e9	8b 80 84 01 00
	00		 mov	 eax, DWORD PTR [rax+388]
  000ef	85 c0		 test	 eax, eax
  000f1	0f 85 ef 00 00
	00		 jne	 $LN4@is_active_
  000f7	48 8b 44 24 20	 mov	 rax, QWORD PTR px$[rsp]
  000fc	48 8b 80 88 01
	00 00		 mov	 rax, QWORD PTR [rax+392]
  00103	48 8b 4c 24 20	 mov	 rcx, QWORD PTR px$[rsp]
  00108	48 3b 81 b8 01
	00 00		 cmp	 rax, QWORD PTR [rcx+440]
  0010f	0f 85 d1 00 00
	00		 jne	 $LN4@is_active_
  00115	48 8b 44 24 20	 mov	 rax, QWORD PTR px$[rsp]
  0011a	48 8b 80 90 01
	00 00		 mov	 rax, QWORD PTR [rax+400]
  00121	48 8b 4c 24 20	 mov	 rcx, QWORD PTR px$[rsp]
  00126	48 3b 81 d0 01
	00 00		 cmp	 rax, QWORD PTR [rcx+464]
  0012d	0f 85 b3 00 00
	00		 jne	 $LN4@is_active_
  00133	48 8b 44 24 20	 mov	 rax, QWORD PTR px$[rsp]
  00138	8b 80 98 01 00
	00		 mov	 eax, DWORD PTR [rax+408]
  0013e	85 c0		 test	 eax, eax
  00140	0f 85 a0 00 00
	00		 jne	 $LN4@is_active_
  00146	48 8b 44 24 20	 mov	 rax, QWORD PTR px$[rsp]
  0014b	8b 80 9c 01 00
	00		 mov	 eax, DWORD PTR [rax+412]
  00151	85 c0		 test	 eax, eax
  00153	0f 85 8d 00 00
	00		 jne	 $LN4@is_active_
  00159	48 8b 44 24 20	 mov	 rax, QWORD PTR px$[rsp]
  0015e	48 8b 80 a0 01
	00 00		 mov	 rax, QWORD PTR [rax+416]
  00165	48 8b 4c 24 20	 mov	 rcx, QWORD PTR px$[rsp]
  0016a	48 3b 81 c8 01
	00 00		 cmp	 rax, QWORD PTR [rcx+456]
  00171	75 73		 jne	 SHORT $LN4@is_active_
  00173	48 8b 44 24 20	 mov	 rax, QWORD PTR px$[rsp]
  00178	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0017c	e8 00 00 00 00	 call	 PxList_QueryDepth
  00181	0f b7 c0	 movzx	 eax, ax
  00184	85 c0		 test	 eax, eax
  00186	75 5e		 jne	 SHORT $LN4@is_active_
  00188	48 8b 44 24 20	 mov	 rax, QWORD PTR px$[rsp]
  0018d	48 8b 48 28	 mov	 rcx, QWORD PTR [rax+40]
  00191	e8 00 00 00 00	 call	 PxList_QueryDepth
  00196	0f b7 c0	 movzx	 eax, ax
  00199	85 c0		 test	 eax, eax
  0019b	75 49		 jne	 SHORT $LN4@is_active_
  0019d	48 8b 44 24 20	 mov	 rax, QWORD PTR px$[rsp]
  001a2	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  001a6	e8 00 00 00 00	 call	 PxList_QueryDepth
  001ab	0f b7 c0	 movzx	 eax, ax
  001ae	85 c0		 test	 eax, eax
  001b0	75 34		 jne	 SHORT $LN4@is_active_
  001b2	48 8b 44 24 20	 mov	 rax, QWORD PTR px$[rsp]
  001b7	48 8b 48 18	 mov	 rcx, QWORD PTR [rax+24]
  001bb	e8 00 00 00 00	 call	 PxList_QueryDepth
  001c0	0f b7 c0	 movzx	 eax, ax
  001c3	85 c0		 test	 eax, eax
  001c5	75 1f		 jne	 SHORT $LN4@is_active_
  001c7	48 8b 44 24 20	 mov	 rax, QWORD PTR px$[rsp]
  001cc	48 8b 48 10	 mov	 rcx, QWORD PTR [rax+16]
  001d0	e8 00 00 00 00	 call	 PxList_QueryDepth
  001d5	0f b7 c0	 movzx	 eax, ax
  001d8	85 c0		 test	 eax, eax
  001da	75 0a		 jne	 SHORT $LN4@is_active_
  001dc	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR tv171[rsp], 0
  001e4	eb 08		 jmp	 SHORT $LN5@is_active_
$LN4@is_active_:
  001e6	c7 44 24 34 01
	00 00 00	 mov	 DWORD PTR tv171[rsp], 1
$LN5@is_active_:
  001ee	8b 44 24 34	 mov	 eax, DWORD PTR tv171[rsp]
  001f2	89 44 24 30	 mov	 DWORD PTR rv$[rsp], eax

; 3845 : 
; 3846 :     LeaveCriticalSection(&(px->cs));

  001f6	48 8b 44 24 20	 mov	 rax, QWORD PTR px$[rsp]
  001fb	48 05 a8 00 00
	00		 add	 rax, 168		; 000000a8H
  00201	48 8b c8	 mov	 rcx, rax
  00204	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_LeaveCriticalSection

; 3847 :     return rv;

  0020a	8b 44 24 30	 mov	 eax, DWORD PTR rv$[rsp]
$LN2@is_active_:

; 3848 : }

  0020e	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00212	c3		 ret	 0
_is_active_ex ENDP
_TEXT	ENDS
PUBLIC	_is_parallel_thread
;	COMDAT pdata
pdata	SEGMENT
$pdata$_is_parallel_thread DD imagerel $LN3
	DD	imagerel $LN3+20
	DD	imagerel $unwind$_is_parallel_thread
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_is_parallel_thread DD 010401H
	DD	04204H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _is_parallel_thread
_TEXT	SEGMENT
_is_parallel_thread PROC				; COMDAT

; 3853 : {

$LN3:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 3854 :     return PyThreadState_GET()->is_parallel_thread;

  00004	e8 00 00 00 00	 call	 PyThreadState_Get
  00009	8b 80 a8 00 00
	00		 mov	 eax, DWORD PTR [rax+168]

; 3855 : }

  0000f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00013	c3		 ret	 0
_is_parallel_thread ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_async_is_parallel_thread DD imagerel $LN5
	DD	imagerel $LN5+69
	DD	imagerel $unwind$_async_is_parallel_thread
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_async_is_parallel_thread DD 010401H
	DD	06204H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _async_is_parallel_thread
_TEXT	SEGMENT
r$ = 32
tv66 = 40
_async_is_parallel_thread PROC				; COMDAT

; 3859 : {

$LN5:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 3860 :     PyObject *r = (PyObject *)(_is_parallel_thread() ? Py_True : Py_False);

  00004	e8 00 00 00 00	 call	 _is_parallel_thread
  00009	85 c0		 test	 eax, eax
  0000b	74 0e		 je	 SHORT $LN3@async_is_p
  0000d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  00014	48 89 44 24 28	 mov	 QWORD PTR tv66[rsp], rax
  00019	eb 0c		 jmp	 SHORT $LN4@async_is_p
$LN3@async_is_p:
  0001b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct
  00022	48 89 44 24 28	 mov	 QWORD PTR tv66[rsp], rax
$LN4@async_is_p:
  00027	48 8b 44 24 28	 mov	 rax, QWORD PTR tv66[rsp]
  0002c	48 89 44 24 20	 mov	 QWORD PTR r$[rsp], rax

; 3861 :     Py_INCREF(r);

  00031	48 8b 4c 24 20	 mov	 rcx, QWORD PTR r$[rsp]
  00036	e8 00 00 00 00	 call	 _Py_IncRef

; 3862 :     return r;

  0003b	48 8b 44 24 20	 mov	 rax, QWORD PTR r$[rsp]

; 3863 : }

  00040	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00044	c3		 ret	 0
_async_is_parallel_thread ENDP
_TEXT	ENDS
PUBLIC	_rdtsc
; Function compile flags: /Odtp
;	COMDAT _rdtsc
_TEXT	SEGMENT
_rdtsc	PROC						; COMDAT

; 3869 :     return _Py_rdtsc();

  00000	0f 31		 rdtsc
  00002	48 c1 e2 20	 shl	 rdx, 32			; 00000020H
  00006	48 0b c2	 or	 rax, rdx

; 3870 : }

  00009	c3		 ret	 0
_rdtsc	ENDP
_TEXT	ENDS
EXTRN	PyLong_FromUnsignedLongLong:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_async_rdtsc DD imagerel $LN3
	DD	imagerel $LN3+26
	DD	imagerel $unwind$_async_rdtsc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_async_rdtsc DD 010401H
	DD	04204H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _async_rdtsc
_TEXT	SEGMENT
_async_rdtsc PROC					; COMDAT

; 3874 : {

$LN3:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 3875 :     return PyLong_FromUnsignedLongLong(_Py_rdtsc());

  00004	0f 31		 rdtsc
  00006	48 c1 e2 20	 shl	 rdx, 32			; 00000020H
  0000a	48 0b c2	 or	 rax, rdx
  0000d	48 8b c8	 mov	 rcx, rax
  00010	e8 00 00 00 00	 call	 PyLong_FromUnsignedLongLong

; 3876 : }

  00015	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00019	c3		 ret	 0
_async_rdtsc ENDP
_TEXT	ENDS
PUBLIC	_is_active
;	COMDAT pdata
pdata	SEGMENT
$pdata$_is_active DD imagerel $LN3
	DD	imagerel $LN3+20
	DD	imagerel $unwind$_is_active
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_is_active DD 010401H
	DD	04204H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _is_active
_TEXT	SEGMENT
_is_active PROC						; COMDAT

; 3881 : {

$LN3:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 3882 :     return PXSTATE()->active;

  00004	e8 00 00 00 00	 call	 PXSTATE
  00009	8b 80 f8 00 00
	00		 mov	 eax, DWORD PTR [rax+248]

; 3883 : }

  0000f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00013	c3		 ret	 0
_is_active ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_async_is_active DD imagerel $LN5
	DD	imagerel $LN5+79
	DD	imagerel $unwind$_async_is_active
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_async_is_active DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _async_is_active
_TEXT	SEGMENT
r$ = 32
tv66 = 40
self$ = 64
args$ = 72
_async_is_active PROC					; COMDAT

; 3887 : {

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 3888 :     PyObject *r = (PyObject *)(_is_active() ? Py_True : Py_False);

  0000e	e8 00 00 00 00	 call	 _is_active
  00013	85 c0		 test	 eax, eax
  00015	74 0e		 je	 SHORT $LN3@async_is_a
  00017	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  0001e	48 89 44 24 28	 mov	 QWORD PTR tv66[rsp], rax
  00023	eb 0c		 jmp	 SHORT $LN4@async_is_a
$LN3@async_is_a:
  00025	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct
  0002c	48 89 44 24 28	 mov	 QWORD PTR tv66[rsp], rax
$LN4@async_is_a:
  00031	48 8b 44 24 28	 mov	 rax, QWORD PTR tv66[rsp]
  00036	48 89 44 24 20	 mov	 QWORD PTR r$[rsp], rax

; 3889 :     Py_INCREF(r);

  0003b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR r$[rsp]
  00040	e8 00 00 00 00	 call	 _Py_IncRef

; 3890 :     return r;

  00045	48 8b 44 24 20	 mov	 rax, QWORD PTR r$[rsp]

; 3891 : }

  0004a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004e	c3		 ret	 0
_async_is_active ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_async_is_active_ex DD imagerel $LN5
	DD	imagerel $LN5+79
	DD	imagerel $unwind$_async_is_active_ex
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_async_is_active_ex DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _async_is_active_ex
_TEXT	SEGMENT
r$ = 32
tv66 = 40
self$ = 64
args$ = 72
_async_is_active_ex PROC				; COMDAT

; 3895 : {

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 3896 :     PyObject *r = (PyObject *)(_is_active_ex() ? Py_True : Py_False);

  0000e	e8 00 00 00 00	 call	 _is_active_ex
  00013	85 c0		 test	 eax, eax
  00015	74 0e		 je	 SHORT $LN3@async_is_a@2
  00017	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  0001e	48 89 44 24 28	 mov	 QWORD PTR tv66[rsp], rax
  00023	eb 0c		 jmp	 SHORT $LN4@async_is_a@2
$LN3@async_is_a@2:
  00025	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct
  0002c	48 89 44 24 28	 mov	 QWORD PTR tv66[rsp], rax
$LN4@async_is_a@2:
  00031	48 8b 44 24 28	 mov	 rax, QWORD PTR tv66[rsp]
  00036	48 89 44 24 20	 mov	 QWORD PTR r$[rsp], rax

; 3897 :     Py_INCREF(r);

  0003b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR r$[rsp]
  00040	e8 00 00 00 00	 call	 _Py_IncRef

; 3898 :     return r;

  00045	48 8b 44 24 20	 mov	 rax, QWORD PTR r$[rsp]

; 3899 : }

  0004a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004e	c3		 ret	 0
_async_is_active_ex ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_async_active_count DD imagerel $LN3
	DD	imagerel $LN3+35
	DD	imagerel $unwind$_async_active_count
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_async_active_count DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _async_active_count
_TEXT	SEGMENT
self$ = 48
args$ = 56
_async_active_count PROC				; COMDAT

; 3904 : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 3905 :     return PyLong_FromLong(PXSTATE()->active);

  0000e	e8 00 00 00 00	 call	 PXSTATE
  00013	8b 88 f8 00 00
	00		 mov	 ecx, DWORD PTR [rax+248]
  00019	e8 00 00 00 00	 call	 PyLong_FromLong

; 3906 : }

  0001e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00022	c3		 ret	 0
_async_active_count ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_async_active_contexts DD imagerel $LN3
	DD	imagerel $LN3+35
	DD	imagerel $unwind$_async_active_contexts
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_async_active_contexts DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _async_active_contexts
_TEXT	SEGMENT
self$ = 48
args$ = 56
_async_active_contexts PROC				; COMDAT

; 3910 : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 3911 :     return PyLong_FromLong(PXSTATE()->contexts_active);

  0000e	e8 00 00 00 00	 call	 PXSTATE
  00013	8b 88 e8 00 00
	00		 mov	 ecx, DWORD PTR [rax+232]
  00019	e8 00 00 00 00	 call	 PyLong_FromLong

; 3912 : }

  0001e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00022	c3		 ret	 0
_async_active_contexts ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_async_persisted_contexts DD imagerel $LN3
	DD	imagerel $LN3+35
	DD	imagerel $unwind$_async_persisted_contexts
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_async_persisted_contexts DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _async_persisted_contexts
_TEXT	SEGMENT
self$ = 48
args$ = 56
_async_persisted_contexts PROC				; COMDAT

; 3916 : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 3917 :     return PyLong_FromLong(PXSTATE()->contexts_persisted);

  0000e	e8 00 00 00 00	 call	 PXSTATE
  00013	8b 88 ec 00 00
	00		 mov	 ecx, DWORD PTR [rax+236]
  00019	e8 00 00 00 00	 call	 PyLong_FromLong

; 3918 : }

  0001e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00022	c3		 ret	 0
_async_persisted_contexts ENDP
_TEXT	ENDS
PUBLIC	incref_args
;	COMDAT pdata
pdata	SEGMENT
$pdata$incref_args DD imagerel $LN19
	DD	imagerel $LN19+183
	DD	imagerel $unwind$incref_args
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$incref_args DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT incref_args
_TEXT	SEGMENT
c$ = 48
incref_args PROC					; COMDAT

; 3923 : {

$LN19:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 3924 :     Py_INCREF(c->func);

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR c$[rsp]
  0000e	48 8b 88 38 32
	00 00		 mov	 rcx, QWORD PTR [rax+12856]
  00015	e8 00 00 00 00	 call	 _Py_IncRef
$LN16@incref_arg:

; 3925 :     Py_XINCREF(c->args);

  0001a	48 8b 44 24 30	 mov	 rax, QWORD PTR c$[rsp]
  0001f	48 83 b8 40 32
	00 00 00	 cmp	 QWORD PTR [rax+12864], 0
  00027	74 11		 je	 SHORT $LN13@incref_arg
  00029	48 8b 44 24 30	 mov	 rax, QWORD PTR c$[rsp]
  0002e	48 8b 88 40 32
	00 00		 mov	 rcx, QWORD PTR [rax+12864]
  00035	e8 00 00 00 00	 call	 _Py_IncRef
$LN13@incref_arg:
  0003a	33 c0		 xor	 eax, eax
  0003c	85 c0		 test	 eax, eax
  0003e	75 da		 jne	 SHORT $LN16@incref_arg
$LN12@incref_arg:

; 3926 :     Py_XINCREF(c->kwds);

  00040	48 8b 44 24 30	 mov	 rax, QWORD PTR c$[rsp]
  00045	48 83 b8 48 32
	00 00 00	 cmp	 QWORD PTR [rax+12872], 0
  0004d	74 11		 je	 SHORT $LN9@incref_arg
  0004f	48 8b 44 24 30	 mov	 rax, QWORD PTR c$[rsp]
  00054	48 8b 88 48 32
	00 00		 mov	 rcx, QWORD PTR [rax+12872]
  0005b	e8 00 00 00 00	 call	 _Py_IncRef
$LN9@incref_arg:
  00060	33 c0		 xor	 eax, eax
  00062	85 c0		 test	 eax, eax
  00064	75 da		 jne	 SHORT $LN12@incref_arg
$LN8@incref_arg:

; 3927 :     Py_XINCREF(c->callback);

  00066	48 8b 44 24 30	 mov	 rax, QWORD PTR c$[rsp]
  0006b	48 83 b8 50 32
	00 00 00	 cmp	 QWORD PTR [rax+12880], 0
  00073	74 11		 je	 SHORT $LN5@incref_arg
  00075	48 8b 44 24 30	 mov	 rax, QWORD PTR c$[rsp]
  0007a	48 8b 88 50 32
	00 00		 mov	 rcx, QWORD PTR [rax+12880]
  00081	e8 00 00 00 00	 call	 _Py_IncRef
$LN5@incref_arg:
  00086	33 c0		 xor	 eax, eax
  00088	85 c0		 test	 eax, eax
  0008a	75 da		 jne	 SHORT $LN8@incref_arg
$LN4@incref_arg:

; 3928 :     Py_XINCREF(c->errback);

  0008c	48 8b 44 24 30	 mov	 rax, QWORD PTR c$[rsp]
  00091	48 83 b8 58 32
	00 00 00	 cmp	 QWORD PTR [rax+12888], 0
  00099	74 11		 je	 SHORT $LN1@incref_arg
  0009b	48 8b 44 24 30	 mov	 rax, QWORD PTR c$[rsp]
  000a0	48 8b 88 58 32
	00 00		 mov	 rcx, QWORD PTR [rax+12888]
  000a7	e8 00 00 00 00	 call	 _Py_IncRef
$LN1@incref_arg:
  000ac	33 c0		 xor	 eax, eax
  000ae	85 c0		 test	 eax, eax
  000b0	75 da		 jne	 SHORT $LN4@incref_arg

; 3929 : }

  000b2	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000b6	c3		 ret	 0
incref_args ENDP
_TEXT	ENDS
PUBLIC	incref_waitobj_args
;	COMDAT pdata
pdata	SEGMENT
$pdata$incref_waitobj_args DD imagerel $LN3
	DD	imagerel $LN3+58
	DD	imagerel $unwind$incref_waitobj_args
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$incref_waitobj_args DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT incref_waitobj_args
_TEXT	SEGMENT
c$ = 48
incref_waitobj_args PROC				; COMDAT

; 3934 : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 3935 :     Py_INCREF(c->waitobj);

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR c$[rsp]
  0000e	48 8b 88 28 32
	00 00		 mov	 rcx, QWORD PTR [rax+12840]
  00015	e8 00 00 00 00	 call	 _Py_IncRef

; 3936 :     Py_INCREF(c->waitobj_timeout);

  0001a	48 8b 44 24 30	 mov	 rax, QWORD PTR c$[rsp]
  0001f	48 8b 88 30 32
	00 00		 mov	 rcx, QWORD PTR [rax+12848]
  00026	e8 00 00 00 00	 call	 _Py_IncRef

; 3937 :     incref_args(c);

  0002b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR c$[rsp]
  00030	e8 00 00 00 00	 call	 incref_args

; 3938 : }

  00035	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00039	c3		 ret	 0
incref_waitobj_args ENDP
_TEXT	ENDS
PUBLIC	decref_args
;	COMDAT pdata
pdata	SEGMENT
$pdata$decref_args DD imagerel $LN23
	DD	imagerel $LN23+204
	DD	imagerel $unwind$decref_args
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$decref_args DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT decref_args
_TEXT	SEGMENT
c$ = 48
decref_args PROC					; COMDAT

; 3944 : {

$LN23:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
$LN20@decref_arg:

; 3945 :     Py_XDECREF(c->func);

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR c$[rsp]
  0000e	48 83 b8 38 32
	00 00 00	 cmp	 QWORD PTR [rax+12856], 0
  00016	74 11		 je	 SHORT $LN17@decref_arg
  00018	48 8b 44 24 30	 mov	 rax, QWORD PTR c$[rsp]
  0001d	48 8b 88 38 32
	00 00		 mov	 rcx, QWORD PTR [rax+12856]
  00024	e8 00 00 00 00	 call	 _Py_DecRef
$LN17@decref_arg:
  00029	33 c0		 xor	 eax, eax
  0002b	85 c0		 test	 eax, eax
  0002d	75 da		 jne	 SHORT $LN20@decref_arg
$LN16@decref_arg:

; 3946 :     Py_XDECREF(c->args);

  0002f	48 8b 44 24 30	 mov	 rax, QWORD PTR c$[rsp]
  00034	48 83 b8 40 32
	00 00 00	 cmp	 QWORD PTR [rax+12864], 0
  0003c	74 11		 je	 SHORT $LN13@decref_arg
  0003e	48 8b 44 24 30	 mov	 rax, QWORD PTR c$[rsp]
  00043	48 8b 88 40 32
	00 00		 mov	 rcx, QWORD PTR [rax+12864]
  0004a	e8 00 00 00 00	 call	 _Py_DecRef
$LN13@decref_arg:
  0004f	33 c0		 xor	 eax, eax
  00051	85 c0		 test	 eax, eax
  00053	75 da		 jne	 SHORT $LN16@decref_arg
$LN12@decref_arg:

; 3947 :     Py_XDECREF(c->kwds);

  00055	48 8b 44 24 30	 mov	 rax, QWORD PTR c$[rsp]
  0005a	48 83 b8 48 32
	00 00 00	 cmp	 QWORD PTR [rax+12872], 0
  00062	74 11		 je	 SHORT $LN9@decref_arg
  00064	48 8b 44 24 30	 mov	 rax, QWORD PTR c$[rsp]
  00069	48 8b 88 48 32
	00 00		 mov	 rcx, QWORD PTR [rax+12872]
  00070	e8 00 00 00 00	 call	 _Py_DecRef
$LN9@decref_arg:
  00075	33 c0		 xor	 eax, eax
  00077	85 c0		 test	 eax, eax
  00079	75 da		 jne	 SHORT $LN12@decref_arg
$LN8@decref_arg:

; 3948 :     Py_XDECREF(c->callback);

  0007b	48 8b 44 24 30	 mov	 rax, QWORD PTR c$[rsp]
  00080	48 83 b8 50 32
	00 00 00	 cmp	 QWORD PTR [rax+12880], 0
  00088	74 11		 je	 SHORT $LN5@decref_arg
  0008a	48 8b 44 24 30	 mov	 rax, QWORD PTR c$[rsp]
  0008f	48 8b 88 50 32
	00 00		 mov	 rcx, QWORD PTR [rax+12880]
  00096	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@decref_arg:
  0009b	33 c0		 xor	 eax, eax
  0009d	85 c0		 test	 eax, eax
  0009f	75 da		 jne	 SHORT $LN8@decref_arg
$LN4@decref_arg:

; 3949 :     Py_XDECREF(c->errback);

  000a1	48 8b 44 24 30	 mov	 rax, QWORD PTR c$[rsp]
  000a6	48 83 b8 58 32
	00 00 00	 cmp	 QWORD PTR [rax+12888], 0
  000ae	74 11		 je	 SHORT $LN1@decref_arg
  000b0	48 8b 44 24 30	 mov	 rax, QWORD PTR c$[rsp]
  000b5	48 8b 88 58 32
	00 00		 mov	 rcx, QWORD PTR [rax+12888]
  000bc	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@decref_arg:
  000c1	33 c0		 xor	 eax, eax
  000c3	85 c0		 test	 eax, eax
  000c5	75 da		 jne	 SHORT $LN4@decref_arg

; 3950 : }

  000c7	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000cb	c3		 ret	 0
decref_args ENDP
_TEXT	ENDS
PUBLIC	decref_waitobj_args
;	COMDAT pdata
pdata	SEGMENT
$pdata$decref_waitobj_args DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$decref_waitobj_args
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$decref_waitobj_args DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT decref_waitobj_args
_TEXT	SEGMENT
c$ = 48
decref_waitobj_args PROC				; COMDAT

; 3955 : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 3956 :     Py_DECREF(c->waitobj);

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR c$[rsp]
  0000e	48 8b 88 28 32
	00 00		 mov	 rcx, QWORD PTR [rax+12840]
  00015	e8 00 00 00 00	 call	 _Py_DecRef

; 3957 :     Py_DECREF(c->waitobj_timeout);

  0001a	48 8b 44 24 30	 mov	 rax, QWORD PTR c$[rsp]
  0001f	48 8b 88 30 32
	00 00		 mov	 rcx, QWORD PTR [rax+12848]
  00026	e8 00 00 00 00	 call	 _Py_DecRef

; 3958 : }

  0002b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002f	c3		 ret	 0
decref_waitobj_args ENDP
_TEXT	ENDS
PUBLIC	??_C@_1BI@IOGGDNFP@?$AAP?$AAy?$AA_?$AAE?$AAV?$AAE?$AAN?$AAT?$AA?$CI?$AAo?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CA@NOMFJIDE@?$AAP?$AAy?$AA_?$AAH?$AAA?$AAS?$AA_?$AAE?$AAV?$AAE?$AAN?$AAT?$AA?$CI?$AAo?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BI@KGJAHCDC@?$AAc?$AA?9?$AA?$DO?$AAp?$AAx?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAp?$AAx?$AA?$AA@ ; `string'
PUBLIC	_PxState_FreeContext
EXTRN	PxList_Next:PROC
EXTRN	PxList_Flush:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PxState_FreeContext DD imagerel $LN35
	DD	imagerel $LN35+932
	DD	imagerel $unwind$_PxState_FreeContext
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PxState_FreeContext DD 010e01H
	DD	0c20eH
xdata	ENDS
;	COMDAT ??_C@_1BI@IOGGDNFP@?$AAP?$AAy?$AA_?$AAE?$AAV?$AAE?$AAN?$AAT?$AA?$CI?$AAo?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1BI@IOGGDNFP@?$AAP?$AAy?$AA_?$AAE?$AAV?$AAE?$AAN?$AAT?$AA?$CI?$AAo?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, '_', 00H, 'E', 00H, 'V', 00H, 'E', 00H, 'N', 00H
	DB	'T', 00H, '(', 00H, 'o', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CA@NOMFJIDE@?$AAP?$AAy?$AA_?$AAH?$AAA?$AAS?$AA_?$AAE?$AAV?$AAE?$AAN?$AAT?$AA?$CI?$AAo?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CA@NOMFJIDE@?$AAP?$AAy?$AA_?$AAH?$AAA?$AAS?$AA_?$AAE?$AAV?$AAE?$AAN?$AAT?$AA?$CI?$AAo?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, '_', 00H, 'H', 00H, 'A', 00H, 'S', 00H, '_', 00H
	DB	'E', 00H, 'V', 00H, 'E', 00H, 'N', 00H, 'T', 00H, '(', 00H, 'o'
	DB	00H, ')', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1BI@KGJAHCDC@?$AAc?$AA?9?$AA?$DO?$AAp?$AAx?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAp?$AAx?$AA?$AA@
CONST	SEGMENT
??_C@_1BI@KGJAHCDC@?$AAc?$AA?9?$AA?$DO?$AAp?$AAx?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAp?$AAx?$AA?$AA@ DB 'c'
	DB	00H, '-', 00H, '>', 00H, 'p', 00H, 'x', 00H, ' ', 00H, '=', 00H
	DB	'=', 00H, ' ', 00H, 'p', 00H, 'x', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PxState_FreeContext
_TEXT	SEGMENT
h$ = 32
prev$ = 40
s$ = 48
next$ = 56
item$ = 64
o$ = 72
next$129082 = 80
px$ = 112
c$ = 120
_PxState_FreeContext PROC				; COMDAT

; 3962 : {

$LN35:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 3963 :     Heap *h;
; 3964 :     Stats *s;
; 3965 :     Object *o;
; 3966 :     PxListItem *item;
; 3967 :     Context *prev, *next;
; 3968 : 
; 3969 :     assert(c->px == px);

  0000e	48 8b 44 24 78	 mov	 rax, QWORD PTR c$[rsp]
  00013	48 8b 4c 24 70	 mov	 rcx, QWORD PTR px$[rsp]
  00018	48 39 88 d8 00
	00 00		 cmp	 QWORD PTR [rax+216], rcx
  0001f	74 1c		 je	 SHORT $LN32@PxState_Fr
  00021	41 b8 81 0f 00
	00		 mov	 r8d, 3969		; 00000f81H
  00027	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0002e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BI@KGJAHCDC@?$AAc?$AA?9?$AA?$DO?$AAp?$AAx?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAp?$AAx?$AA?$AA@
  00035	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0003b	33 c0		 xor	 eax, eax
$LN32@PxState_Fr:

; 3970 : 
; 3971 :     prev = c->prev;

  0003d	48 8b 44 24 78	 mov	 rax, QWORD PTR c$[rsp]
  00042	48 8b 80 08 33
	00 00		 mov	 rax, QWORD PTR [rax+13064]
  00049	48 89 44 24 28	 mov	 QWORD PTR prev$[rsp], rax

; 3972 :     next = c->next;

  0004e	48 8b 44 24 78	 mov	 rax, QWORD PTR c$[rsp]
  00053	48 8b 80 10 33
	00 00		 mov	 rax, QWORD PTR [rax+13072]
  0005a	48 89 44 24 38	 mov	 QWORD PTR next$[rsp], rax

; 3973 : 
; 3974 :     if (px->ctx_first == c)

  0005f	48 8b 44 24 70	 mov	 rax, QWORD PTR px$[rsp]
  00064	48 8b 4c 24 78	 mov	 rcx, QWORD PTR c$[rsp]
  00069	48 39 48 78	 cmp	 QWORD PTR [rax+120], rcx
  0006d	75 0e		 jne	 SHORT $LN29@PxState_Fr

; 3975 :         px->ctx_first = next;

  0006f	48 8b 44 24 70	 mov	 rax, QWORD PTR px$[rsp]
  00074	48 8b 4c 24 38	 mov	 rcx, QWORD PTR next$[rsp]
  00079	48 89 48 78	 mov	 QWORD PTR [rax+120], rcx
$LN29@PxState_Fr:

; 3976 : 
; 3977 :     if (px->ctx_last == c)

  0007d	48 8b 44 24 70	 mov	 rax, QWORD PTR px$[rsp]
  00082	48 8b 4c 24 78	 mov	 rcx, QWORD PTR c$[rsp]
  00087	48 39 88 80 00
	00 00		 cmp	 QWORD PTR [rax+128], rcx
  0008e	75 11		 jne	 SHORT $LN28@PxState_Fr

; 3978 :         px->ctx_last = prev;

  00090	48 8b 44 24 70	 mov	 rax, QWORD PTR px$[rsp]
  00095	48 8b 4c 24 28	 mov	 rcx, QWORD PTR prev$[rsp]
  0009a	48 89 88 80 00
	00 00		 mov	 QWORD PTR [rax+128], rcx
$LN28@PxState_Fr:

; 3979 : 
; 3980 :     if (prev)

  000a1	48 83 7c 24 28
	00		 cmp	 QWORD PTR prev$[rsp], 0
  000a7	74 11		 je	 SHORT $LN27@PxState_Fr

; 3981 :         prev->next = next;

  000a9	48 8b 44 24 28	 mov	 rax, QWORD PTR prev$[rsp]
  000ae	48 8b 4c 24 38	 mov	 rcx, QWORD PTR next$[rsp]
  000b3	48 89 88 10 33
	00 00		 mov	 QWORD PTR [rax+13072], rcx
$LN27@PxState_Fr:

; 3982 : 
; 3983 :     if (next)

  000ba	48 83 7c 24 38
	00		 cmp	 QWORD PTR next$[rsp], 0
  000c0	74 11		 je	 SHORT $LN26@PxState_Fr

; 3984 :         next->prev = prev;

  000c2	48 8b 44 24 38	 mov	 rax, QWORD PTR next$[rsp]
  000c7	48 8b 4c 24 28	 mov	 rcx, QWORD PTR prev$[rsp]
  000cc	48 89 88 08 33
	00 00		 mov	 QWORD PTR [rax+13064], rcx
$LN26@PxState_Fr:

; 3985 : 
; 3986 :     /* xxx todo: check refcnts of func/args/kwds etc? */
; 3987 :     decref_args(c);

  000d3	48 8b 4c 24 78	 mov	 rcx, QWORD PTR c$[rsp]
  000d8	e8 00 00 00 00	 call	 decref_args

; 3988 : 
; 3989 :     if (c->tp_wait)

  000dd	48 8b 44 24 78	 mov	 rax, QWORD PTR c$[rsp]
  000e2	48 83 b8 68 32
	00 00 00	 cmp	 QWORD PTR [rax+12904], 0
  000ea	74 0a		 je	 SHORT $LN25@PxState_Fr

; 3990 :         decref_waitobj_args(c);

  000ec	48 8b 4c 24 78	 mov	 rcx, QWORD PTR c$[rsp]
  000f1	e8 00 00 00 00	 call	 decref_waitobj_args
$LN25@PxState_Fr:

; 3991 : 
; 3992 :     h = c->h;

  000f6	48 8b 44 24 78	 mov	 rax, QWORD PTR c$[rsp]
  000fb	48 8b 80 d0 00
	00 00		 mov	 rax, QWORD PTR [rax+208]
  00102	48 89 44 24 20	 mov	 QWORD PTR h$[rsp], rax

; 3993 :     s = &(c->stats);

  00107	48 8b 44 24 78	 mov	 rax, QWORD PTR c$[rsp]
  0010c	48 05 00 01 00
	00		 add	 rax, 256		; 00000100H
  00112	48 89 44 24 30	 mov	 QWORD PTR s$[rsp], rax

; 3994 :     _PyHeap_FastFree(h, s, c->error);

  00117	48 8b 44 24 78	 mov	 rax, QWORD PTR c$[rsp]
  0011c	4c 8b 80 28 33
	00 00		 mov	 r8, QWORD PTR [rax+13096]
  00123	48 8b 54 24 30	 mov	 rdx, QWORD PTR s$[rsp]
  00128	48 8b 4c 24 20	 mov	 rcx, QWORD PTR h$[rsp]
  0012d	e8 00 00 00 00	 call	 _PyHeap_FastFree

; 3995 :     _PyHeap_FastFree(h, s, c->errback_completed);

  00132	48 8b 44 24 78	 mov	 rax, QWORD PTR c$[rsp]
  00137	4c 8b 80 38 33
	00 00		 mov	 r8, QWORD PTR [rax+13112]
  0013e	48 8b 54 24 30	 mov	 rdx, QWORD PTR s$[rsp]
  00143	48 8b 4c 24 20	 mov	 rcx, QWORD PTR h$[rsp]
  00148	e8 00 00 00 00	 call	 _PyHeap_FastFree

; 3996 :     _PyHeap_FastFree(h, s, c->callback_completed);

  0014d	48 8b 44 24 78	 mov	 rax, QWORD PTR c$[rsp]
  00152	4c 8b 80 30 33
	00 00		 mov	 r8, QWORD PTR [rax+13104]
  00159	48 8b 54 24 30	 mov	 rdx, QWORD PTR s$[rsp]
  0015e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR h$[rsp]
  00163	e8 00 00 00 00	 call	 _PyHeap_FastFree

; 3997 :     _PyHeap_FastFree(h, s, c->outgoing);

  00168	48 8b 44 24 78	 mov	 rax, QWORD PTR c$[rsp]
  0016d	4c 8b 80 40 33
	00 00		 mov	 r8, QWORD PTR [rax+13120]
  00174	48 8b 54 24 30	 mov	 rdx, QWORD PTR s$[rsp]
  00179	48 8b 4c 24 20	 mov	 rcx, QWORD PTR h$[rsp]
  0017e	e8 00 00 00 00	 call	 _PyHeap_FastFree

; 3998 : 
; 3999 :     if (c->last_leak)

  00183	48 8b 44 24 78	 mov	 rax, QWORD PTR c$[rsp]
  00188	48 83 b8 e0 37
	00 00 00	 cmp	 QWORD PTR [rax+14304], 0
  00190	74 12		 je	 SHORT $LN24@PxState_Fr

; 4000 :         free(c->last_leak);

  00192	48 8b 44 24 78	 mov	 rax, QWORD PTR c$[rsp]
  00197	48 8b 88 e0 37
	00 00		 mov	 rcx, QWORD PTR [rax+14304]
  0019e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN24@PxState_Fr:

; 4001 : 
; 4002 :     if (c->errors_tuple)

  001a4	48 8b 44 24 78	 mov	 rax, QWORD PTR c$[rsp]
  001a9	48 83 b8 e8 37
	00 00 00	 cmp	 QWORD PTR [rax+14312], 0
  001b1	74 1b		 je	 SHORT $LN23@PxState_Fr

; 4003 :         _PyHeap_FastFree(h, s, c->errors_tuple);

  001b3	48 8b 44 24 78	 mov	 rax, QWORD PTR c$[rsp]
  001b8	4c 8b 80 e8 37
	00 00		 mov	 r8, QWORD PTR [rax+14312]
  001bf	48 8b 54 24 30	 mov	 rdx, QWORD PTR s$[rsp]
  001c4	48 8b 4c 24 20	 mov	 rcx, QWORD PTR h$[rsp]
  001c9	e8 00 00 00 00	 call	 _PyHeap_FastFree
$LN23@PxState_Fr:

; 4004 : 
; 4005 :     item = PxList_Flush(c->decrefs);

  001ce	48 8b 44 24 78	 mov	 rax, QWORD PTR c$[rsp]
  001d3	48 8b 88 48 33
	00 00		 mov	 rcx, QWORD PTR [rax+13128]
  001da	e8 00 00 00 00	 call	 PxList_Flush
  001df	48 89 44 24 40	 mov	 QWORD PTR item$[rsp], rax
$LN22@PxState_Fr:

; 4006 :     while (item) {

  001e4	48 83 7c 24 40
	00		 cmp	 QWORD PTR item$[rsp], 0
  001ea	0f 84 ad 00 00
	00		 je	 $LN21@PxState_Fr

; 4007 :         PxListItem *next = PxList_Next(item);

  001f0	48 8b 4c 24 40	 mov	 rcx, QWORD PTR item$[rsp]
  001f5	e8 00 00 00 00	 call	 PxList_Next
  001fa	48 89 44 24 50	 mov	 QWORD PTR next$129082[rsp], rax
$LN20@PxState_Fr:

; 4008 :         Py_XDECREF((PyObject *)item->p1);

  001ff	48 8b 44 24 40	 mov	 rax, QWORD PTR item$[rsp]
  00204	48 83 78 20 00	 cmp	 QWORD PTR [rax+32], 0
  00209	74 0e		 je	 SHORT $LN17@PxState_Fr
  0020b	48 8b 44 24 40	 mov	 rax, QWORD PTR item$[rsp]
  00210	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  00214	e8 00 00 00 00	 call	 _Py_DecRef
$LN17@PxState_Fr:
  00219	33 c0		 xor	 eax, eax
  0021b	85 c0		 test	 eax, eax
  0021d	75 e0		 jne	 SHORT $LN20@PxState_Fr
$LN16@PxState_Fr:

; 4009 :         Py_XDECREF((PyObject *)item->p2);

  0021f	48 8b 44 24 40	 mov	 rax, QWORD PTR item$[rsp]
  00224	48 83 78 28 00	 cmp	 QWORD PTR [rax+40], 0
  00229	74 0e		 je	 SHORT $LN13@PxState_Fr
  0022b	48 8b 44 24 40	 mov	 rax, QWORD PTR item$[rsp]
  00230	48 8b 48 28	 mov	 rcx, QWORD PTR [rax+40]
  00234	e8 00 00 00 00	 call	 _Py_DecRef
$LN13@PxState_Fr:
  00239	33 c0		 xor	 eax, eax
  0023b	85 c0		 test	 eax, eax
  0023d	75 e0		 jne	 SHORT $LN16@PxState_Fr
$LN12@PxState_Fr:

; 4010 :         Py_XDECREF((PyObject *)item->p3);

  0023f	48 8b 44 24 40	 mov	 rax, QWORD PTR item$[rsp]
  00244	48 83 78 30 00	 cmp	 QWORD PTR [rax+48], 0
  00249	74 0e		 je	 SHORT $LN9@PxState_Fr
  0024b	48 8b 44 24 40	 mov	 rax, QWORD PTR item$[rsp]
  00250	48 8b 48 30	 mov	 rcx, QWORD PTR [rax+48]
  00254	e8 00 00 00 00	 call	 _Py_DecRef
$LN9@PxState_Fr:
  00259	33 c0		 xor	 eax, eax
  0025b	85 c0		 test	 eax, eax
  0025d	75 e0		 jne	 SHORT $LN12@PxState_Fr
$LN8@PxState_Fr:

; 4011 :         Py_XDECREF((PyObject *)item->p4);

  0025f	48 8b 44 24 40	 mov	 rax, QWORD PTR item$[rsp]
  00264	48 83 78 38 00	 cmp	 QWORD PTR [rax+56], 0
  00269	74 0e		 je	 SHORT $LN5@PxState_Fr
  0026b	48 8b 44 24 40	 mov	 rax, QWORD PTR item$[rsp]
  00270	48 8b 48 38	 mov	 rcx, QWORD PTR [rax+56]
  00274	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@PxState_Fr:
  00279	33 c0		 xor	 eax, eax
  0027b	85 c0		 test	 eax, eax
  0027d	75 e0		 jne	 SHORT $LN8@PxState_Fr

; 4012 :         _PyHeap_Free(c, item);

  0027f	48 8b 54 24 40	 mov	 rdx, QWORD PTR item$[rsp]
  00284	48 8b 4c 24 78	 mov	 rcx, QWORD PTR c$[rsp]
  00289	e8 00 00 00 00	 call	 _PyHeap_Free

; 4013 :         item = next;

  0028e	48 8b 44 24 50	 mov	 rax, QWORD PTR next$129082[rsp]
  00293	48 89 44 24 40	 mov	 QWORD PTR item$[rsp], rax

; 4014 :     }

  00298	e9 47 ff ff ff	 jmp	 $LN22@PxState_Fr
$LN21@PxState_Fr:

; 4015 : 
; 4016 :     for (o = c->events.first; o; o = o->next) {

  0029d	48 8b 44 24 78	 mov	 rax, QWORD PTR c$[rsp]
  002a2	48 8b 80 80 33
	00 00		 mov	 rax, QWORD PTR [rax+13184]
  002a9	48 89 44 24 48	 mov	 QWORD PTR o$[rsp], rax
  002ae	eb 0e		 jmp	 SHORT $LN4@PxState_Fr
$LN3@PxState_Fr:
  002b0	48 8b 44 24 48	 mov	 rax, QWORD PTR o$[rsp]
  002b5	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  002b9	48 89 44 24 48	 mov	 QWORD PTR o$[rsp], rax
$LN4@PxState_Fr:
  002be	48 83 7c 24 48
	00		 cmp	 QWORD PTR o$[rsp], 0
  002c4	74 67		 je	 SHORT $LN2@PxState_Fr

; 4017 :         assert(Py_HAS_EVENT(o));

  002c6	48 8b 44 24 48	 mov	 rax, QWORD PTR o$[rsp]
  002cb	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  002cf	48 83 e0 08	 and	 rax, 8
  002d3	48 85 c0	 test	 rax, rax
  002d6	75 1c		 jne	 SHORT $LN33@PxState_Fr
  002d8	41 b8 b1 0f 00
	00		 mov	 r8d, 4017		; 00000fb1H
  002de	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  002e5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CA@NOMFJIDE@?$AAP?$AAy?$AA_?$AAH?$AAA?$AAS?$AA_?$AAE?$AAV?$AAE?$AAN?$AAT?$AA?$CI?$AAo?$AA?$CJ?$AA?$AA@
  002ec	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  002f2	33 c0		 xor	 eax, eax
$LN33@PxState_Fr:

; 4018 :         assert(Py_EVENT(o));

  002f4	48 8b 44 24 48	 mov	 rax, QWORD PTR o$[rsp]
  002f9	48 83 78 30 00	 cmp	 QWORD PTR [rax+48], 0
  002fe	75 1c		 jne	 SHORT $LN34@PxState_Fr
  00300	41 b8 b2 0f 00
	00		 mov	 r8d, 4018		; 00000fb2H
  00306	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0030d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BI@IOGGDNFP@?$AAP?$AAy?$AA_?$AAE?$AAV?$AAE?$AAN?$AAT?$AA?$CI?$AAo?$AA?$CJ?$AA?$AA@
  00314	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0031a	33 c0		 xor	 eax, eax
$LN34@PxState_Fr:

; 4019 :         PyEvent_DESTROY(o);

  0031c	48 8b 44 24 48	 mov	 rax, QWORD PTR o$[rsp]
  00321	48 8b 48 30	 mov	 rcx, QWORD PTR [rax+48]
  00325	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CloseHandle

; 4020 :     }

  0032b	eb 83		 jmp	 SHORT $LN3@PxState_Fr
$LN2@PxState_Fr:

; 4021 : 
; 4022 :     px->contexts_destroyed++;

  0032d	48 8b 44 24 70	 mov	 rax, QWORD PTR px$[rsp]
  00332	48 8b 80 e0 00
	00 00		 mov	 rax, QWORD PTR [rax+224]
  00339	48 ff c0	 inc	 rax
  0033c	48 8b 4c 24 70	 mov	 rcx, QWORD PTR px$[rsp]
  00341	48 89 81 e0 00
	00 00		 mov	 QWORD PTR [rcx+224], rax

; 4023 : 
; 4024 :     if (!Px_CTX_WAS_PERSISTED(c)) {

  00348	48 8b 44 24 78	 mov	 rax, QWORD PTR c$[rsp]
  0034d	8b 80 f8 00 00
	00		 mov	 eax, DWORD PTR [rax+248]
  00353	83 e0 02	 and	 eax, 2
  00356	85 c0		 test	 eax, eax
  00358	75 1c		 jne	 SHORT $LN1@PxState_Fr

; 4025 :         InterlockedDecrement(&(px->active));

  0035a	48 8b 44 24 70	 mov	 rax, QWORD PTR px$[rsp]
  0035f	48 05 f8 00 00
	00		 add	 rax, 248		; 000000f8H
  00365	f0 ff 08	 lock dec DWORD PTR [rax]

; 4026 :         InterlockedDecrement(&(px->contexts_active));

  00368	48 8b 44 24 70	 mov	 rax, QWORD PTR px$[rsp]
  0036d	48 05 e8 00 00
	00		 add	 rax, 232		; 000000e8H
  00373	f0 ff 08	 lock dec DWORD PTR [rax]
$LN1@PxState_Fr:

; 4027 :     }
; 4028 : 
; 4029 :     /*
; 4030 :     if (c->io_obj) {
; 4031 :         if (Py_TYPE(c->io_obj) == &PxSocket_Type) {
; 4032 :             PxSocket *s = (PxSocket *)c->io_obj;
; 4033 :             if (c->tp_io)
; 4034 :                 CancelThreadpoolIo(c->tp_io);
; 4035 :         }
; 4036 :         Py_DECREF(c->io_obj);
; 4037 :     }
; 4038 :     */
; 4039 : 
; 4040 :     _PxContext_UnregisterHeaps(c);

  00376	48 8b 4c 24 78	 mov	 rcx, QWORD PTR c$[rsp]
  0037b	e8 00 00 00 00	 call	 _PxContext_UnregisterHeaps

; 4041 : 
; 4042 :     HeapDestroy(c->heap_handle);

  00380	48 8b 44 24 78	 mov	 rax, QWORD PTR c$[rsp]
  00385	48 8b 48 10	 mov	 rcx, QWORD PTR [rax+16]
  00389	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_HeapDestroy

; 4043 :     free(c);

  0038f	48 8b 4c 24 78	 mov	 rcx, QWORD PTR c$[rsp]
  00394	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 4044 :     return next;

  0039a	48 8b 44 24 38	 mov	 rax, QWORD PTR next$[rsp]

; 4045 : }

  0039f	48 83 c4 68	 add	 rsp, 104		; 00000068H
  003a3	c3		 ret	 0
_PxState_FreeContext ENDP
_TEXT	ENDS
PUBLIC	??_C@_1BI@EGHBKAON@?$AAc?$AA?9?$AA?$DO?$AAt?$AAt?$AAl?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	_PxState_PurgeContexts
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PxState_PurgeContexts DD imagerel $LN9
	DD	imagerel $LN9+212
	DD	imagerel $unwind$_PxState_PurgeContexts
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PxState_PurgeContexts DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_1BI@EGHBKAON@?$AAc?$AA?9?$AA?$DO?$AAt?$AAt?$AAl?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1BI@EGHBKAON@?$AAc?$AA?9?$AA?$DO?$AAt?$AAt?$AAl?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@ DB 'c'
	DB	00H, '-', 00H, '>', 00H, 't', 00H, 't', 00H, 'l', 00H, ' ', 00H
	DB	'=', 00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PxState_PurgeContexts
_TEXT	SEGMENT
destroyed$ = 32
c$ = 40
px$ = 64
_PxState_PurgeContexts PROC				; COMDAT

; 4049 : {

$LN9:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 4050 :     Context *c;
; 4051 :     int destroyed = 0;

  00009	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR destroyed$[rsp], 0

; 4052 : 
; 4053 :     if (!px->ctx_first)

  00011	48 8b 44 24 40	 mov	 rax, QWORD PTR px$[rsp]
  00016	48 83 78 78 00	 cmp	 QWORD PTR [rax+120], 0
  0001b	75 07		 jne	 SHORT $LN4@PxState_Pu

; 4054 :         return 0;

  0001d	33 c0		 xor	 eax, eax
  0001f	e9 ab 00 00 00	 jmp	 $LN5@PxState_Pu
$LN4@PxState_Pu:

; 4055 : 
; 4056 :     c = px->ctx_first;

  00024	48 8b 44 24 40	 mov	 rax, QWORD PTR px$[rsp]
  00029	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  0002d	48 89 44 24 28	 mov	 QWORD PTR c$[rsp], rax
$LN8@PxState_Pu:
$LN3@PxState_Pu:

; 4057 :     while (c) {

  00032	48 83 7c 24 28
	00		 cmp	 QWORD PTR c$[rsp], 0
  00038	0f 84 8d 00 00
	00		 je	 $LN2@PxState_Pu

; 4058 :         if (c->ttl > 0) {

  0003e	48 8b 44 24 28	 mov	 rax, QWORD PTR c$[rsp]
  00043	0f bf 80 00 38
	00 00		 movsx	 eax, WORD PTR [rax+14336]
  0004a	85 c0		 test	 eax, eax
  0004c	7e 2e		 jle	 SHORT $LN1@PxState_Pu

; 4059 :             --(c->ttl);

  0004e	48 8b 44 24 28	 mov	 rax, QWORD PTR c$[rsp]
  00053	0f b7 80 00 38
	00 00		 movzx	 eax, WORD PTR [rax+14336]
  0005a	66 ff c8	 dec	 ax
  0005d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR c$[rsp]
  00062	66 89 81 00 38
	00 00		 mov	 WORD PTR [rcx+14336], ax

; 4060 :             c = c->next;

  00069	48 8b 44 24 28	 mov	 rax, QWORD PTR c$[rsp]
  0006e	48 8b 80 10 33
	00 00		 mov	 rax, QWORD PTR [rax+13072]
  00075	48 89 44 24 28	 mov	 QWORD PTR c$[rsp], rax

; 4061 :             continue;

  0007a	eb b6		 jmp	 SHORT $LN3@PxState_Pu
$LN1@PxState_Pu:

; 4062 :         }
; 4063 :         assert(c->ttl == 0);

  0007c	48 8b 44 24 28	 mov	 rax, QWORD PTR c$[rsp]
  00081	0f bf 80 00 38
	00 00		 movsx	 eax, WORD PTR [rax+14336]
  00088	85 c0		 test	 eax, eax
  0008a	74 1c		 je	 SHORT $LN7@PxState_Pu
  0008c	41 b8 df 0f 00
	00		 mov	 r8d, 4063		; 00000fdfH
  00092	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00099	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BI@EGHBKAON@?$AAc?$AA?9?$AA?$DO?$AAt?$AAt?$AAl?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@
  000a0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000a6	33 c0		 xor	 eax, eax
$LN7@PxState_Pu:

; 4064 : 
; 4065 :         c = _PxState_FreeContext(px, c);

  000a8	48 8b 54 24 28	 mov	 rdx, QWORD PTR c$[rsp]
  000ad	48 8b 4c 24 40	 mov	 rcx, QWORD PTR px$[rsp]
  000b2	e8 00 00 00 00	 call	 _PxState_FreeContext
  000b7	48 89 44 24 28	 mov	 QWORD PTR c$[rsp], rax

; 4066 :         destroyed++;

  000bc	8b 44 24 20	 mov	 eax, DWORD PTR destroyed$[rsp]
  000c0	ff c0		 inc	 eax
  000c2	89 44 24 20	 mov	 DWORD PTR destroyed$[rsp], eax

; 4067 :     }

  000c6	e9 67 ff ff ff	 jmp	 $LN8@PxState_Pu
$LN2@PxState_Pu:

; 4068 : 
; 4069 :     return destroyed;

  000cb	8b 44 24 20	 mov	 eax, DWORD PTR destroyed$[rsp]
$LN5@PxState_Pu:

; 4070 : }

  000cf	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000d3	c3		 ret	 0
_PxState_PurgeContexts ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _Py_HandleCtrlC
_TEXT	SEGMENT
ctrltype$ = 8
_Py_HandleCtrlC PROC					; COMDAT

; 4074 : {

  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx

; 4075 :     if (ctrltype == CTRL_C_EVENT) {

  00004	83 7c 24 08 00	 cmp	 DWORD PTR ctrltype$[rsp], 0
  00009	75 22		 jne	 SHORT $LN1@Py_HandleC

; 4076 :         _Py_sfence();

  0000b	0f ae f8	 sfence

; 4077 :         _Py_CtrlCPressed = 1;

  0000e	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _Py_CtrlCPressed, 1

; 4078 :         _Py_lfence();

  00018	0f ae e8	 lfence

; 4079 :         _Py_clflush(&_Py_CtrlCPressed);

  0001b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_CtrlCPressed
  00022	48 0f ae 38	 clflush QWORD PTR [rax]

; 4080 :         return TRUE;

  00026	b8 01 00 00 00	 mov	 eax, 1
  0002b	eb 02		 jmp	 SHORT $LN2@Py_HandleC
$LN1@Py_HandleC:

; 4081 :     }
; 4082 :     return FALSE;

  0002d	33 c0		 xor	 eax, eax
$LN2@Py_HandleC:

; 4083 : }

  0002f	f3 c3		 fatret	 0
_Py_HandleCtrlC ENDP
_TEXT	ENDS
PUBLIC	??_C@_0P@DEDCJLKF@_Py_CheckCtrlC?$AA@		; `string'
PUBLIC	_Py_CheckCtrlC
EXTRN	PyExc_KeyboardInterrupt:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_CheckCtrlC DD imagerel $LN5
	DD	imagerel $LN5+86
	DD	imagerel $unwind$_Py_CheckCtrlC
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_CheckCtrlC DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0P@DEDCJLKF@_Py_CheckCtrlC?$AA@
CONST	SEGMENT
??_C@_0P@DEDCJLKF@_Py_CheckCtrlC?$AA@ DB '_Py_CheckCtrlC', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_CheckCtrlC
_TEXT	SEGMENT
_Py_CheckCtrlC PROC					; COMDAT

; 4088 : {

$LN5:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 4089 :     Py_GUARD

  00004	e8 00 00 00 00	 call	 _Py_PXCTX
  00009	85 c0		 test	 eax, eax
  0000b	74 1c		 je	 SHORT $LN2@Py_CheckCt
  0000d	45 33 c9	 xor	 r9d, r9d
  00010	41 b8 f9 0f 00
	00		 mov	 r8d, 4089		; 00000ff9H
  00016	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@PGHBGAOD@?4?4?2Python?2pyparallel?4c?$AA@
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@DEDCJLKF@_Py_CheckCtrlC?$AA@
  00024	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN2@Py_CheckCt:

; 4090 : 
; 4091 :     if (_Py_CtrlCPressed) {

  00029	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _Py_CtrlCPressed, 0
  00030	74 1d		 je	 SHORT $LN1@Py_CheckCt

; 4092 :         _Py_CtrlCPressed = 0;

  00032	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR _Py_CtrlCPressed, 0

; 4093 :         PyErr_SetNone(PyExc_KeyboardInterrupt);

  0003c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_KeyboardInterrupt
  00043	e8 00 00 00 00	 call	 PyErr_SetNone

; 4094 :         return 1;

  00048	b8 01 00 00 00	 mov	 eax, 1
  0004d	eb 02		 jmp	 SHORT $LN3@Py_CheckCt
$LN1@Py_CheckCt:

; 4095 :     }
; 4096 : 
; 4097 :     return 0;

  0004f	33 c0		 xor	 eax, eax
$LN3@Py_CheckCt:

; 4098 : }

  00051	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00055	c3		 ret	 0
_Py_CheckCtrlC ENDP
_TEXT	ENDS
PUBLIC	_InterlockedAdd
PUBLIC	??_C@_1BC@BIBGLHHL@?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	_PyParallel_SchedulePyNoneDecref
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyParallel_SchedulePyNoneDecref DD imagerel $LN4
	DD	imagerel $LN4+81
	DD	imagerel $unwind$_PyParallel_SchedulePyNoneDecref
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyParallel_SchedulePyNoneDecref DD 010801H
	DD	06208H
xdata	ENDS
;	COMDAT ??_C@_1BC@BIBGLHHL@?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1BC@BIBGLHHL@?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@ DB 'r'
	DB	00H, 'e', 00H, 'f', 00H, 's', 00H, ' ', 00H, '>', 00H, ' ', 00H
	DB	'0', 00H, 00H, 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PyParallel_SchedulePyNoneDecref
_TEXT	SEGMENT
px$ = 32
refs$ = 64
_PyParallel_SchedulePyNoneDecref PROC			; COMDAT

; 4102 : {

$LN4:
  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 4103 :     PxState *px = PXSTATE();

  00008	e8 00 00 00 00	 call	 PXSTATE
  0000d	48 89 44 24 20	 mov	 QWORD PTR px$[rsp], rax

; 4104 :     assert(refs > 0);

  00012	83 7c 24 40 00	 cmp	 DWORD PTR refs$[rsp], 0
  00017	7f 1c		 jg	 SHORT $LN3@PyParallel@28
  00019	41 b8 08 10 00
	00		 mov	 r8d, 4104		; 00001008H
  0001f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00026	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BC@BIBGLHHL@?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@
  0002d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00033	33 c0		 xor	 eax, eax
$LN3@PyParallel@28:

; 4105 :     InterlockedAdd(&(px->incoming_pynone_decrefs), refs);

  00035	48 8b 44 24 20	 mov	 rax, QWORD PTR px$[rsp]
  0003a	48 05 00 01 00
	00		 add	 rax, 256		; 00000100H
  00040	8b 54 24 40	 mov	 edx, DWORD PTR refs$[rsp]
  00044	48 8b c8	 mov	 rcx, rax
  00047	e8 00 00 00 00	 call	 _InterlockedAdd

; 4106 : }

  0004c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00050	c3		 ret	 0
_PyParallel_SchedulePyNoneDecref ENDP
; Function compile flags: /Odtp
; File c:\program files (x86)\microsoft sdks\windows\v7.0a\include\winnt.h
_TEXT	ENDS
;	COMDAT _InterlockedAdd
_TEXT	SEGMENT
Addend$ = 8
Value$ = 16
_InterlockedAdd PROC					; COMDAT

; 2539 : {

  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 2540 :     return InterlockedExchangeAdd(Addend, Value) + Value;

  00009	8b 44 24 10	 mov	 eax, DWORD PTR Value$[rsp]
  0000d	48 8b 4c 24 08	 mov	 rcx, QWORD PTR Addend$[rsp]
  00012	f0 0f c1 01	 lock xadd DWORD PTR [rcx], eax
  00016	03 44 24 10	 add	 eax, DWORD PTR Value$[rsp]

; 2541 : }

  0001a	c3		 ret	 0
_InterlockedAdd ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CO@NCNAFCJK@async?5call?5from?5main?5thread?5retu@ ; `string'
PUBLIC	??_C@_1DI@EOJHILJI@?$AAt?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAe?$AAx?$AAc?$AA_?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ ; `string'
PUBLIC	??_C@_1O@LDDGLODA@?$AAe?$AAx?$AAc?$AA_?$AAt?$AAb?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BE@GOIKFNMH@?$AAe?$AAx?$AAc?$AA_?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BC@MCJEHPHF@?$AAe?$AAx?$AAc?$AA_?$AAt?$AAy?$AAp?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CI@IHKKEEFG@?$AAt?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAe?$AAx?$AAc?$AA_?$AAt?$AAy?$AAp?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1IM@HEBAOIIC@?$AAd?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAd?$AA?9?$AA?$DO?$AAp?$AA1?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAd?$AA?9?$AA?$DO?$AAp?$AA2?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN@ ; `string'
PUBLIC	??_C@_1DA@EMCAHAFN@?$AAP?$AAy?$AAD?$AAi?$AAc?$AAt?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AAE?$AAx?$AAa?$AAc?$AAt?$AA?$CI?$AAk?$AAw?$AAd?$AAs?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DK@KLMHFHIC@?$AAp?$AAx?$AA?9?$AA?$DO?$AAp?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAi?$AAn?$AAg?$AA_?$AAc?$AAa?$AAl?$AAl?$AAb?$AAa?$AAc?$AAk?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_1FK@KKIIGMOG@?$AAP?$AAy?$AAE?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AAC?$AAl?$AAa?$AAs?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt@ ; `string'
PUBLIC	??_C@_1BG@BPIFJEKM@?$AA?$CB?$AAc?$AA?9?$AA?$DO?$AAi?$AAo?$AA_?$AAo?$AAb?$AAj?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CO@HCHPAKEJ@?$AA?$CI?$AAP?$AAy?$AA_?$AAR?$AAE?$AAF?$AAC?$AAN?$AAT?$AA?$CI?$AAo?$AA?$CJ?$AA?5?$AA?9?$AA?5?$AAr?$AA?$CJ?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_1O@KCABCDJI@?$AAr?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_0BA@MLCDIEON@_async_run_once?$AA@		; `string'
EXTRN	PyErr_WarnEx:PROC
EXTRN	PyExc_RuntimeWarning:QWORD
EXTRN	PyErr_Fetch:PROC
EXTRN	PyDict_Type:BYTE
EXTRN	PyErr_Restore:PROC
EXTRN	PxList_SeverFromNext:PROC
EXTRN	PxList_Transfer:PROC
EXTRN	PyExc_AsyncRunCalledWithoutEventsError:QWORD
EXTRN	__imp_SetConsoleCtrlHandler:PROC
EXTRN	PyErr_CheckSignals:PROC
;	COMDAT pdata
; File c:\src\pyparallel\python\pyparallel.c
pdata	SEGMENT
$pdata$_async_run_once DD imagerel $LN69
	DD	imagerel $LN69+2851
	DD	imagerel $unwind$_async_run_once
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_async_run_once DD 021101H
	DD	0210111H
xdata	ENDS
;	COMDAT ??_C@_0CO@NCNAFCJK@async?5call?5from?5main?5thread?5retu@
CONST	SEGMENT
??_C@_0CO@NCNAFCJK@async?5call?5from?5main?5thread?5retu@ DB 'async call '
	DB	'from main thread returned non-None', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1DI@EOJHILJI@?$AAt?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAe?$AAx?$AAc?$AA_?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
CONST	SEGMENT
??_C@_1DI@EOJHILJI@?$AAt?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAe?$AAx?$AAc?$AA_?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ DB 't'
	DB	00H, 's', 00H, 't', 00H, 'a', 00H, 't', 00H, 'e', 00H, '-', 00H
	DB	'>', 00H, 'c', 00H, 'u', 00H, 'r', 00H, 'e', 00H, 'x', 00H, 'c'
	DB	00H, '_', 00H, 't', 00H, 'y', 00H, 'p', 00H, 'e', 00H, ' ', 00H
	DB	'!', 00H, '=', 00H, ' ', 00H, 'N', 00H, 'U', 00H, 'L', 00H, 'L'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1O@LDDGLODA@?$AAe?$AAx?$AAc?$AA_?$AAt?$AAb?$AA?$AA@
CONST	SEGMENT
??_C@_1O@LDDGLODA@?$AAe?$AAx?$AAc?$AA_?$AAt?$AAb?$AA?$AA@ DB 'e', 00H, 'x'
	DB	00H, 'c', 00H, '_', 00H, 't', 00H, 'b', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BE@GOIKFNMH@?$AAe?$AAx?$AAc?$AA_?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1BE@GOIKFNMH@?$AAe?$AAx?$AAc?$AA_?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?$AA@ DB 'e'
	DB	00H, 'x', 00H, 'c', 00H, '_', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	'u', 00H, 'e', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@MCJEHPHF@?$AAe?$AAx?$AAc?$AA_?$AAt?$AAy?$AAp?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1BC@MCJEHPHF@?$AAe?$AAx?$AAc?$AA_?$AAt?$AAy?$AAp?$AAe?$AA?$AA@ DB 'e'
	DB	00H, 'x', 00H, 'c', 00H, '_', 00H, 't', 00H, 'y', 00H, 'p', 00H
	DB	'e', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CI@IHKKEEFG@?$AAt?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAe?$AAx?$AAc?$AA_?$AAt?$AAy?$AAp?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1CI@IHKKEEFG@?$AAt?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAe?$AAx?$AAc?$AA_?$AAt?$AAy?$AAp?$AAe?$AA?$AA@ DB 't'
	DB	00H, 's', 00H, 't', 00H, 'a', 00H, 't', 00H, 'e', 00H, '-', 00H
	DB	'>', 00H, 'c', 00H, 'u', 00H, 'r', 00H, 'e', 00H, 'x', 00H, 'c'
	DB	00H, '_', 00H, 't', 00H, 'y', 00H, 'p', 00H, 'e', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1IM@HEBAOIIC@?$AAd?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAd?$AA?9?$AA?$DO?$AAp?$AA1?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAd?$AA?9?$AA?$DO?$AAp?$AA2?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN@
CONST	SEGMENT
??_C@_1IM@HEBAOIIC@?$AAd?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAd?$AA?9?$AA?$DO?$AAp?$AA1?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAd?$AA?9?$AA?$DO?$AAp?$AA2?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN@ DB 'd'
	DB	00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'd', 00H, '-', 00H
	DB	'>', 00H, 'p', 00H, '1', 00H, ' ', 00H, '=', 00H, '=', 00H, ' '
	DB	00H, 'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H, ' ', 00H, '&', 00H
	DB	'&', 00H, ' ', 00H, 'd', 00H, '-', 00H, '>', 00H, 'p', 00H, '2'
	DB	00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'N', 00H, 'U', 00H
	DB	'L', 00H, 'L', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'd'
	DB	00H, '-', 00H, '>', 00H, 'p', 00H, '3', 00H, ' ', 00H, '=', 00H
	DB	'=', 00H, ' ', 00H, 'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H, ' '
	DB	00H, '&', 00H, '&', 00H, ' ', 00H, 'd', 00H, '-', 00H, '>', 00H
	DB	'p', 00H, '4', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'N'
	DB	00H, 'U', 00H, 'L', 00H, 'L', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1DA@EMCAHAFN@?$AAP?$AAy?$AAD?$AAi?$AAc?$AAt?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AAE?$AAx?$AAa?$AAc?$AAt?$AA?$CI?$AAk?$AAw?$AAd?$AAs?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DA@EMCAHAFN@?$AAP?$AAy?$AAD?$AAi?$AAc?$AAt?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AAE?$AAx?$AAa?$AAc?$AAt?$AA?$CI?$AAk?$AAw?$AAd?$AAs?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'D', 00H, 'i', 00H, 'c', 00H, 't', 00H, '_', 00H
	DB	'C', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, 'E', 00H, 'x'
	DB	00H, 'a', 00H, 'c', 00H, 't', 00H, '(', 00H, 'k', 00H, 'w', 00H
	DB	'd', 00H, 's', 00H, ')', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1DK@KLMHFHIC@?$AAp?$AAx?$AA?9?$AA?$DO?$AAp?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAi?$AAn?$AAg?$AA_?$AAc?$AAa?$AAl?$AAl?$AAb?$AAa?$AAc?$AAk?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1DK@KLMHFHIC@?$AAp?$AAx?$AA?9?$AA?$DO?$AAp?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAi?$AAn?$AAg?$AA_?$AAc?$AAa?$AAl?$AAl?$AAb?$AAa?$AAc?$AAk?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@ DB 'p'
	DB	00H, 'x', 00H, '-', 00H, '>', 00H, 'p', 00H, 'r', 00H, 'o', 00H
	DB	'c', 00H, 'e', 00H, 's', 00H, 's', 00H, 'i', 00H, 'n', 00H, 'g'
	DB	00H, '_', 00H, 'c', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'b', 00H
	DB	'a', 00H, 'c', 00H, 'k', 00H, ' ', 00H, '=', 00H, '=', 00H, ' '
	DB	00H, '0', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1FK@KKIIGMOG@?$AAP?$AAy?$AAE?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AAC?$AAl?$AAa?$AAs?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt@
CONST	SEGMENT
??_C@_1FK@KKIIGMOG@?$AAP?$AAy?$AAE?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AAC?$AAl?$AAa?$AAs?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt@ DB 'P'
	DB	00H, 'y', 00H, 'E', 00H, 'x', 00H, 'c', 00H, 'e', 00H, 'p', 00H
	DB	't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, 'C', 00H, 'l', 00H, 'a'
	DB	00H, 's', 00H, 's', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H
	DB	'c', 00H, 'k', 00H, '(', 00H, '(', 00H, 'P', 00H, 'y', 00H, 'O'
	DB	00H, 'b', 00H, 'j', 00H, 'e', 00H, 'c', 00H, 't', 00H, ' ', 00H
	DB	'*', 00H, ')', 00H, 'i', 00H, 't', 00H, 'e', 00H, 'm', 00H, '-'
	DB	00H, '>', 00H, 'p', 00H, '1', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BG@BPIFJEKM@?$AA?$CB?$AAc?$AA?9?$AA?$DO?$AAi?$AAo?$AA_?$AAo?$AAb?$AAj?$AA?$AA@
CONST	SEGMENT
??_C@_1BG@BPIFJEKM@?$AA?$CB?$AAc?$AA?9?$AA?$DO?$AAi?$AAo?$AA_?$AAo?$AAb?$AAj?$AA?$AA@ DB '!'
	DB	00H, 'c', 00H, '-', 00H, '>', 00H, 'i', 00H, 'o', 00H, '_', 00H
	DB	'o', 00H, 'b', 00H, 'j', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1CO@HCHPAKEJ@?$AA?$CI?$AAP?$AAy?$AA_?$AAR?$AAE?$AAF?$AAC?$AAN?$AAT?$AA?$CI?$AAo?$AA?$CJ?$AA?5?$AA?9?$AA?5?$AAr?$AA?$CJ?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1CO@HCHPAKEJ@?$AA?$CI?$AAP?$AAy?$AA_?$AAR?$AAE?$AAF?$AAC?$AAN?$AAT?$AA?$CI?$AAo?$AA?$CJ?$AA?5?$AA?9?$AA?5?$AAr?$AA?$CJ?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@ DB '('
	DB	00H, 'P', 00H, 'y', 00H, '_', 00H, 'R', 00H, 'E', 00H, 'F', 00H
	DB	'C', 00H, 'N', 00H, 'T', 00H, '(', 00H, 'o', 00H, ')', 00H, ' '
	DB	00H, '-', 00H, ' ', 00H, 'r', 00H, ')', 00H, ' ', 00H, '>', 00H
	DB	' ', 00H, '0', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1O@KCABCDJI@?$AAr?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1O@KCABCDJI@?$AAr?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@ DB 'r', 00H
	DB	' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@MLCDIEON@_async_run_once?$AA@
CONST	SEGMENT
??_C@_0BA@MLCDIEON@_async_run_once?$AA@ DB '_async_run_once', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _async_run_once
_TEXT	SEGMENT
processed_finished$ = 32
processed_incoming$ = 36
old_frame$ = 40
errors$ = 48
events$ = 52
depth_hint$ = 56
tstate$ = 64
px$ = 72
processed_errbacks$ = 80
purged$ = 84
wait$ = 88
c$ = 96
result$ = 104
err$ = 112
item$ = 120
processed_callbacks$ = 128
waited$ = 132
processed_errors$ = 136
depth$ = 140
r$129196 = 144
o$129200 = 152
args$129235 = 160
kwds$129236 = 168
wait$129233 = 176
result$129237 = 184
func$129234 = 192
d$129251 = 200
exc_tb$129261 = 208
exc_type$129259 = 216
exc_value$129260 = 224
msg$129281 = 232
tv198 = 240
tv422 = 248
self$ = 272
args$ = 280
_async_run_once PROC					; COMDAT

; 4110 : {

$LN69:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H

; 4111 :     int err = 0;

  00011	c7 44 24 70 00
	00 00 00	 mov	 DWORD PTR err$[rsp], 0

; 4112 :     int wait = -1;

  00019	c7 44 24 58 ff
	ff ff ff	 mov	 DWORD PTR wait$[rsp], -1

; 4113 :     int purged = 0;

  00021	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR purged$[rsp], 0

; 4114 :     unsigned short depth_hint = 0;

  00029	33 c0		 xor	 eax, eax
  0002b	66 89 44 24 38	 mov	 WORD PTR depth_hint$[rsp], ax

; 4115 :     unsigned int waited = 0;

  00030	c7 84 24 84 00
	00 00 00 00 00
	00		 mov	 DWORD PTR waited$[rsp], 0

; 4116 :     unsigned int depth = 0;

  0003b	c7 84 24 8c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR depth$[rsp], 0

; 4117 :     unsigned int events = 0;

  00046	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR events$[rsp], 0

; 4118 :     unsigned int errors = 0;

  0004e	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR errors$[rsp], 0

; 4119 :     unsigned int processed_errors = 0;

  00056	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR processed_errors$[rsp], 0

; 4120 :     unsigned int processed_finished = 0;

  00061	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR processed_finished$[rsp], 0

; 4121 :     unsigned int processed_incoming = 0;

  00069	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR processed_incoming$[rsp], 0

; 4122 :     unsigned int processed_errbacks = 0;

  00071	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR processed_errbacks$[rsp], 0

; 4123 :     unsigned int processed_callbacks = 0;

  00079	c7 84 24 80 00
	00 00 00 00 00
	00		 mov	 DWORD PTR processed_callbacks$[rsp], 0

; 4124 :     PyObject *result = NULL;

  00084	48 c7 44 24 68
	00 00 00 00	 mov	 QWORD PTR result$[rsp], 0

; 4125 :     Context *c;
; 4126 :     PxState *px;
; 4127 :     PxListItem *item = NULL;

  0008d	48 c7 44 24 78
	00 00 00 00	 mov	 QWORD PTR item$[rsp], 0

; 4128 :     PyThreadState *tstate;
; 4129 :     PyFrameObject *old_frame;
; 4130 :     Py_GUARD

  00096	e8 00 00 00 00	 call	 _Py_PXCTX
  0009b	85 c0		 test	 eax, eax
  0009d	74 1c		 je	 SHORT $LN49@async_run_
  0009f	45 33 c9	 xor	 r9d, r9d
  000a2	41 b8 22 10 00
	00		 mov	 r8d, 4130		; 00001022H
  000a8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@PGHBGAOD@?4?4?2Python?2pyparallel?4c?$AA@
  000af	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@MLCDIEON@_async_run_once?$AA@
  000b6	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN49@async_run_:

; 4131 : 
; 4132 :     if (PyErr_CheckSignals() || _Py_CheckCtrlC())

  000bb	e8 00 00 00 00	 call	 PyErr_CheckSignals
  000c0	85 c0		 test	 eax, eax
  000c2	75 09		 jne	 SHORT $LN47@async_run_
  000c4	e8 00 00 00 00	 call	 _Py_CheckCtrlC
  000c9	85 c0		 test	 eax, eax
  000cb	74 07		 je	 SHORT $LN48@async_run_
$LN47@async_run_:

; 4133 :         return NULL;

  000cd	33 c0		 xor	 eax, eax
  000cf	e9 47 0a 00 00	 jmp	 $LN50@async_run_
$LN48@async_run_:

; 4134 : 
; 4135 :     if (!_Py_InstalledCtrlCHandler) {

  000d4	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR _Py_InstalledCtrlCHandler, 0
  000db	75 2e		 jne	 SHORT $LN46@async_run_

; 4136 :         if (!SetConsoleCtrlHandler(_Py_CtrlCHandlerRoutine, TRUE)) {

  000dd	ba 01 00 00 00	 mov	 edx, 1
  000e2	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR _Py_CtrlCHandlerRoutine
  000e9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SetConsoleCtrlHandler
  000ef	85 c0		 test	 eax, eax
  000f1	75 0e		 jne	 SHORT $LN45@async_run_

; 4137 :             PyErr_SetFromWindowsErr(0);

  000f3	33 c9		 xor	 ecx, ecx
  000f5	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr

; 4138 :             return NULL;

  000fa	33 c0		 xor	 eax, eax
  000fc	e9 1a 0a 00 00	 jmp	 $LN50@async_run_
$LN45@async_run_:

; 4139 :         }
; 4140 :         _Py_InstalledCtrlCHandler = 1;

  00101	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR _Py_InstalledCtrlCHandler, 1
$LN46@async_run_:

; 4141 :     }
; 4142 : 
; 4143 :     tstate = get_main_thread_state();

  0010b	e8 00 00 00 00	 call	 get_main_thread_state
  00110	48 89 44 24 40	 mov	 QWORD PTR tstate$[rsp], rax

; 4144 : 
; 4145 :     px = (PxState *)tstate->px;

  00115	48 8b 44 24 40	 mov	 rax, QWORD PTR tstate$[rsp]
  0011a	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  00121	48 89 44 24 48	 mov	 QWORD PTR px$[rsp], rax

; 4146 : 
; 4147 :     if (px->submitted == 0 &&
; 4148 :         px->waits_submitted == 0 &&
; 4149 :         px->persistent == 0 &&
; 4150 :         px->contexts_persisted == 0 &&
; 4151 :         px->contexts_active == 0)

  00126	48 8b 44 24 48	 mov	 rax, QWORD PTR px$[rsp]
  0012b	48 8b 80 08 01
	00 00		 mov	 rax, QWORD PTR [rax+264]
  00132	48 85 c0	 test	 rax, rax
  00135	75 4f		 jne	 SHORT $LN44@async_run_
  00137	48 8b 44 24 48	 mov	 rax, QWORD PTR px$[rsp]
  0013c	48 8b 80 20 01
	00 00		 mov	 rax, QWORD PTR [rax+288]
  00143	48 85 c0	 test	 rax, rax
  00146	75 3e		 jne	 SHORT $LN44@async_run_
  00148	48 8b 44 24 48	 mov	 rax, QWORD PTR px$[rsp]
  0014d	8b 80 fc 00 00
	00		 mov	 eax, DWORD PTR [rax+252]
  00153	85 c0		 test	 eax, eax
  00155	75 2f		 jne	 SHORT $LN44@async_run_
  00157	48 8b 44 24 48	 mov	 rax, QWORD PTR px$[rsp]
  0015c	83 b8 ec 00 00
	00 00		 cmp	 DWORD PTR [rax+236], 0
  00163	75 21		 jne	 SHORT $LN44@async_run_
  00165	48 8b 44 24 48	 mov	 rax, QWORD PTR px$[rsp]
  0016a	83 b8 e8 00 00
	00 00		 cmp	 DWORD PTR [rax+232], 0
  00171	75 13		 jne	 SHORT $LN44@async_run_

; 4152 :     {
; 4153 :         PyErr_SetNone(PyExc_AsyncRunCalledWithoutEventsError);

  00173	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_AsyncRunCalledWithoutEventsError
  0017a	e8 00 00 00 00	 call	 PyErr_SetNone

; 4154 :         return NULL;

  0017f	33 c0		 xor	 eax, eax
  00181	e9 95 09 00 00	 jmp	 $LN50@async_run_
$LN44@async_run_:

; 4155 :     }
; 4156 : 
; 4157 :     if (px->incoming_pynone_decrefs) {

  00186	48 8b 44 24 48	 mov	 rax, QWORD PTR px$[rsp]
  0018b	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00191	85 c0		 test	 eax, eax
  00193	0f 84 b8 00 00
	00		 je	 $LN43@async_run_

; 4158 :         long r = InterlockedExchange(&(px->incoming_pynone_decrefs), 0);

  00199	48 8b 44 24 48	 mov	 rax, QWORD PTR px$[rsp]
  0019e	48 05 00 01 00
	00		 add	 rax, 256		; 00000100H
  001a4	33 c9		 xor	 ecx, ecx
  001a6	87 08		 xchg	 DWORD PTR [rax], ecx
  001a8	8b c1		 mov	 eax, ecx
  001aa	89 84 24 90 00
	00 00		 mov	 DWORD PTR r$129196[rsp], eax

; 4159 :         assert(r >= 0);

  001b1	83 bc 24 90 00
	00 00 00	 cmp	 DWORD PTR r$129196[rsp], 0
  001b9	7d 1c		 jge	 SHORT $LN52@async_run_
  001bb	41 b8 3f 10 00
	00		 mov	 r8d, 4159		; 0000103fH
  001c1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  001c8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1O@KCABCDJI@?$AAr?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@
  001cf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001d5	33 c0		 xor	 eax, eax
$LN52@async_run_:

; 4160 :         if (r > 0) {

  001d7	83 bc 24 90 00
	00 00 00	 cmp	 DWORD PTR r$129196[rsp], 0
  001df	7e 70		 jle	 SHORT $LN42@async_run_

; 4161 :             PyObject *o = Py_None;

  001e1	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  001e8	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR o$129200[rsp], rax

; 4162 :             assert((Py_REFCNT(o) - r) > 0);

  001f0	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR r$129196[rsp]
  001f8	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR o$129200[rsp]
  00200	48 8b 49 50	 mov	 rcx, QWORD PTR [rcx+80]
  00204	48 2b c8	 sub	 rcx, rax
  00207	48 8b c1	 mov	 rax, rcx
  0020a	48 85 c0	 test	 rax, rax
  0020d	7f 1c		 jg	 SHORT $LN53@async_run_
  0020f	41 b8 42 10 00
	00		 mov	 r8d, 4162		; 00001042H
  00215	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0021c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@HCHPAKEJ@?$AA?$CI?$AAP?$AAy?$AA_?$AAR?$AAE?$AAF?$AAC?$AAN?$AAT?$AA?$CI?$AAo?$AA?$CJ?$AA?5?$AA?9?$AA?5?$AAr?$AA?$CJ?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@
  00223	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00229	33 c0		 xor	 eax, eax
$LN53@async_run_:

; 4163 :             o->ob_refcnt -= r;

  0022b	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR r$129196[rsp]
  00233	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR o$129200[rsp]
  0023b	48 8b 49 50	 mov	 rcx, QWORD PTR [rcx+80]
  0023f	48 2b c8	 sub	 rcx, rax
  00242	48 8b c1	 mov	 rax, rcx
  00245	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR o$129200[rsp]
  0024d	48 89 41 50	 mov	 QWORD PTR [rcx+80], rax
$LN42@async_run_:
$LN43@async_run_:

; 4164 :         }
; 4165 :     }
; 4166 : 
; 4167 :     px->last_done_count = px->done;

  00251	48 8b 44 24 48	 mov	 rax, QWORD PTR px$[rsp]
  00256	48 8b 4c 24 48	 mov	 rcx, QWORD PTR px$[rsp]
  0025b	48 8b 89 18 01
	00 00		 mov	 rcx, QWORD PTR [rcx+280]
  00262	48 89 88 a8 01
	00 00		 mov	 QWORD PTR [rax+424], rcx

; 4168 :     px->last_submitted_count = px->submitted;

  00269	48 8b 44 24 48	 mov	 rax, QWORD PTR px$[rsp]
  0026e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR px$[rsp]
  00273	48 8b 89 08 01
	00 00		 mov	 rcx, QWORD PTR [rcx+264]
  0027a	48 89 88 b0 01
	00 00		 mov	 QWORD PTR [rax+432], rcx

; 4169 : 
; 4170 :     px->last_sync_wait_done_count = px->sync_wait_done;;

  00281	48 8b 44 24 48	 mov	 rax, QWORD PTR px$[rsp]
  00286	48 8b 4c 24 48	 mov	 rcx, QWORD PTR px$[rsp]
  0028b	48 8b 89 88 01
	00 00		 mov	 rcx, QWORD PTR [rcx+392]
  00292	48 89 88 b8 01
	00 00		 mov	 QWORD PTR [rax+440], rcx

; 4171 :     px->last_sync_wait_submitted_count = px->sync_wait_submitted;

  00299	48 8b 44 24 48	 mov	 rax, QWORD PTR px$[rsp]
  0029e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR px$[rsp]
  002a3	48 8b 89 78 01
	00 00		 mov	 rcx, QWORD PTR [rcx+376]
  002aa	48 89 88 c0 01
	00 00		 mov	 QWORD PTR [rax+448], rcx

; 4172 : 
; 4173 :     px->last_sync_nowait_done_count = px->sync_nowait_done;;

  002b1	48 8b 44 24 48	 mov	 rax, QWORD PTR px$[rsp]
  002b6	48 8b 4c 24 48	 mov	 rcx, QWORD PTR px$[rsp]
  002bb	48 8b 89 a0 01
	00 00		 mov	 rcx, QWORD PTR [rcx+416]
  002c2	48 89 88 c8 01
	00 00		 mov	 QWORD PTR [rax+456], rcx

; 4174 :     px->last_sync_nowait_submitted_count = px->sync_nowait_submitted;

  002c9	48 8b 44 24 48	 mov	 rax, QWORD PTR px$[rsp]
  002ce	48 8b 4c 24 48	 mov	 rcx, QWORD PTR px$[rsp]
  002d3	48 8b 89 90 01
	00 00		 mov	 rcx, QWORD PTR [rcx+400]
  002da	48 89 88 d0 01
	00 00		 mov	 QWORD PTR [rax+464], rcx

; 4175 : 
; 4176 :     purged = _PxState_PurgeContexts(px);

  002e1	48 8b 4c 24 48	 mov	 rcx, QWORD PTR px$[rsp]
  002e6	e8 00 00 00 00	 call	 _PxState_PurgeContexts
  002eb	89 44 24 54	 mov	 DWORD PTR purged$[rsp], eax

; 4177 : 
; 4178 :     item = PxList_Flush(px->finished);

  002ef	48 8b 44 24 48	 mov	 rax, QWORD PTR px$[rsp]
  002f4	48 8b 48 28	 mov	 rcx, QWORD PTR [rax+40]
  002f8	e8 00 00 00 00	 call	 PxList_Flush
  002fd	48 89 44 24 78	 mov	 QWORD PTR item$[rsp], rax
$LN41@async_run_:

; 4179 :     while (item) {

  00302	48 83 7c 24 78
	00		 cmp	 QWORD PTR item$[rsp], 0
  00308	0f 84 aa 00 00
	00		 je	 $LN40@async_run_

; 4180 :         ++processed_finished;

  0030e	8b 44 24 20	 mov	 eax, DWORD PTR processed_finished$[rsp]
  00312	ff c0		 inc	 eax
  00314	89 44 24 20	 mov	 DWORD PTR processed_finished$[rsp], eax

; 4181 :         c = (Context *)item->from;

  00318	48 8b 44 24 78	 mov	 rax, QWORD PTR item$[rsp]
  0031d	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  00321	48 89 44 24 60	 mov	 QWORD PTR c$[rsp], rax

; 4182 :         c->times_finished++;

  00326	48 8b 44 24 60	 mov	 rax, QWORD PTR c$[rsp]
  0032b	8b 80 08 38 00
	00		 mov	 eax, DWORD PTR [rax+14344]
  00331	ff c0		 inc	 eax
  00333	48 8b 4c 24 60	 mov	 rcx, QWORD PTR c$[rsp]
  00338	89 81 08 38 00
	00		 mov	 DWORD PTR [rcx+14344], eax

; 4183 : 
; 4184 :         assert(!c->io_obj);

  0033e	48 8b 44 24 60	 mov	 rax, QWORD PTR c$[rsp]
  00343	48 83 b8 a8 32
	00 00 00	 cmp	 QWORD PTR [rax+12968], 0
  0034b	74 1c		 je	 SHORT $LN54@async_run_
  0034d	41 b8 58 10 00
	00		 mov	 r8d, 4184		; 00001058H
  00353	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0035a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BG@BPIFJEKM@?$AA?$CB?$AAc?$AA?9?$AA?$DO?$AAi?$AAo?$AA_?$AAo?$AAb?$AAj?$AA?$AA@
  00361	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00367	33 c0		 xor	 eax, eax
$LN54@async_run_:

; 4185 : 
; 4186 :         item = (Px_DECCTX(c) ?
; 4187 :             PxList_Transfer(px->finished, item) :
; 4188 :             PxList_SeverFromNext(item)
; 4189 :         );

  00369	48 8b 4c 24 60	 mov	 rcx, QWORD PTR c$[rsp]
  0036e	e8 00 00 00 00	 call	 Px_DECCTX
  00373	85 c0		 test	 eax, eax
  00375	74 1d		 je	 SHORT $LN55@async_run_
  00377	48 8b 54 24 78	 mov	 rdx, QWORD PTR item$[rsp]
  0037c	48 8b 44 24 48	 mov	 rax, QWORD PTR px$[rsp]
  00381	48 8b 48 28	 mov	 rcx, QWORD PTR [rax+40]
  00385	e8 00 00 00 00	 call	 PxList_Transfer
  0038a	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR tv198[rsp], rax
  00392	eb 12		 jmp	 SHORT $LN56@async_run_
$LN55@async_run_:
  00394	48 8b 4c 24 78	 mov	 rcx, QWORD PTR item$[rsp]
  00399	e8 00 00 00 00	 call	 PxList_SeverFromNext
  0039e	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR tv198[rsp], rax
$LN56@async_run_:
  003a6	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR tv198[rsp]
  003ae	48 89 44 24 78	 mov	 QWORD PTR item$[rsp], rax

; 4190 :     }

  003b3	e9 4a ff ff ff	 jmp	 $LN41@async_run_
$LN40@async_run_:
$start$129210:

; 4191 : 
; 4192 : start:
; 4193 :     if (PyErr_CheckSignals())

  003b8	e8 00 00 00 00	 call	 PyErr_CheckSignals
  003bd	85 c0		 test	 eax, eax
  003bf	74 07		 je	 SHORT $LN39@async_run_

; 4194 :         return NULL;

  003c1	33 c0		 xor	 eax, eax
  003c3	e9 53 07 00 00	 jmp	 $LN50@async_run_
$LN39@async_run_:

; 4195 :     /* First error wins. */
; 4196 :     item = PxList_Pop(px->errors);

  003c8	48 8b 44 24 48	 mov	 rax, QWORD PTR px$[rsp]
  003cd	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  003d1	e8 00 00 00 00	 call	 PxList_Pop
  003d6	48 89 44 24 78	 mov	 QWORD PTR item$[rsp], rax

; 4197 :     if (item) {

  003db	48 83 7c 24 78
	00		 cmp	 QWORD PTR item$[rsp], 0
  003e1	0f 84 b6 00 00
	00		 je	 $LN38@async_run_

; 4198 :         c = item->from;

  003e7	48 8b 44 24 78	 mov	 rax, QWORD PTR item$[rsp]
  003ec	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  003f0	48 89 44 24 60	 mov	 QWORD PTR c$[rsp], rax

; 4199 :         assert(PyExceptionClass_Check((PyObject *)item->p1));

  003f5	48 8b 44 24 78	 mov	 rax, QWORD PTR item$[rsp]
  003fa	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  003fe	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00402	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00408	25 00 00 00 80	 and	 eax, -2147483648	; ffffffff80000000H
  0040d	85 c0		 test	 eax, eax
  0040f	74 18		 je	 SHORT $LN57@async_run_
  00411	48 8b 44 24 78	 mov	 rax, QWORD PTR item$[rsp]
  00416	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0041a	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00420	25 00 00 00 40	 and	 eax, 1073741824		; 40000000H
  00425	85 c0		 test	 eax, eax
  00427	75 1c		 jne	 SHORT $LN58@async_run_
$LN57@async_run_:
  00429	41 b8 67 10 00
	00		 mov	 r8d, 4199		; 00001067H
  0042f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00436	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FK@KKIIGMOG@?$AAP?$AAy?$AAE?$AAx?$AAc?$AAe?$AAp?$AAt?$AAi?$AAo?$AAn?$AAC?$AAl?$AAa?$AAs?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt@
  0043d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00443	33 c0		 xor	 eax, eax
$LN58@async_run_:

; 4200 :         PyErr_Restore((PyObject *)item->p1,
; 4201 :                       (PyObject *)item->p2,
; 4202 :                       (PyObject *)item->p3);

  00445	48 8b 44 24 78	 mov	 rax, QWORD PTR item$[rsp]
  0044a	4c 8b 40 30	 mov	 r8, QWORD PTR [rax+48]
  0044e	48 8b 44 24 78	 mov	 rax, QWORD PTR item$[rsp]
  00453	48 8b 50 28	 mov	 rdx, QWORD PTR [rax+40]
  00457	48 8b 44 24 78	 mov	 rax, QWORD PTR item$[rsp]
  0045c	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  00460	e8 00 00 00 00	 call	 PyErr_Restore

; 4203 : 
; 4204 :         /* Ugh, so hacky.  If our originating context is an I/O object, don't
; 4205 :          * treat the context as 'finished'. */
; 4206 :         if (!c->io_obj) {

  00465	48 8b 44 24 60	 mov	 rax, QWORD PTR c$[rsp]
  0046a	48 83 b8 a8 32
	00 00 00	 cmp	 QWORD PTR [rax+12968], 0
  00472	75 22		 jne	 SHORT $LN37@async_run_

; 4207 :             PxList_Transfer(px->finished, item);

  00474	48 8b 54 24 78	 mov	 rdx, QWORD PTR item$[rsp]
  00479	48 8b 44 24 48	 mov	 rax, QWORD PTR px$[rsp]
  0047e	48 8b 48 28	 mov	 rcx, QWORD PTR [rax+40]
  00482	e8 00 00 00 00	 call	 PxList_Transfer

; 4208 :             InterlockedIncrement64(&(px->done));

  00487	48 8b 44 24 48	 mov	 rax, QWORD PTR px$[rsp]
  0048c	48 05 18 01 00
	00		 add	 rax, 280		; 00000118H
  00492	f0 48 ff 00	 lock inc QWORD PTR [rax]
$LN37@async_run_:

; 4209 :         }
; 4210 :         return NULL;

  00496	33 c0		 xor	 eax, eax
  00498	e9 7e 06 00 00	 jmp	 $LN50@async_run_
$LN38@async_run_:

; 4211 :     }
; 4212 : 
; 4213 :     assert(px->processing_callback == 0);

  0049d	48 8b 44 24 48	 mov	 rax, QWORD PTR px$[rsp]
  004a2	83 b8 d0 00 00
	00 00		 cmp	 DWORD PTR [rax+208], 0
  004a9	74 1c		 je	 SHORT $LN59@async_run_
  004ab	41 b8 75 10 00
	00		 mov	 r8d, 4213		; 00001075H
  004b1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  004b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DK@KLMHFHIC@?$AAp?$AAx?$AA?9?$AA?$DO?$AAp?$AAr?$AAo?$AAc?$AAe?$AAs?$AAs?$AAi?$AAn?$AAg?$AA_?$AAc?$AAa?$AAl?$AAl?$AAb?$AAa?$AAc?$AAk?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@
  004bf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  004c5	33 c0		 xor	 eax, eax
$LN59@async_run_:

; 4214 :     /* Process incoming work items. */
; 4215 :     old_frame = ((PyFrameObject *)(tstate->frame));

  004c7	48 8b 44 24 40	 mov	 rax, QWORD PTR tstate$[rsp]
  004cc	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  004d0	48 89 44 24 28	 mov	 QWORD PTR old_frame$[rsp], rax

; 4216 :     ((PyFrameObject *)(tstate->frame)) = NULL;

  004d5	48 8b 44 24 40	 mov	 rax, QWORD PTR tstate$[rsp]
  004da	48 c7 40 10 00
	00 00 00	 mov	 QWORD PTR [rax+16], 0
$LN68@async_run_:
$LN36@async_run_:

; 4217 :     while (item = PxList_Pop(px->incoming)) {

  004e2	48 8b 44 24 48	 mov	 rax, QWORD PTR px$[rsp]
  004e7	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  004eb	e8 00 00 00 00	 call	 PxList_Pop
  004f0	48 89 44 24 78	 mov	 QWORD PTR item$[rsp], rax
  004f5	48 83 7c 24 78
	00		 cmp	 QWORD PTR item$[rsp], 0
  004fb	0f 84 71 04 00
	00		 je	 $LN35@async_run_

; 4218 :         HANDLE wait;
; 4219 :         PyObject *func, *args, *kwds, *result;
; 4220 : 
; 4221 :         px->processing_callback = 1;

  00501	48 8b 44 24 48	 mov	 rax, QWORD PTR px$[rsp]
  00506	c7 80 d0 00 00
	00 01 00 00 00	 mov	 DWORD PTR [rax+208], 1

; 4222 : 
; 4223 :         func = (PyObject *)item->p1;

  00510	48 8b 44 24 78	 mov	 rax, QWORD PTR item$[rsp]
  00515	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00519	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR func$129234[rsp], rax

; 4224 :         args = (PyObject *)item->p2;

  00521	48 8b 44 24 78	 mov	 rax, QWORD PTR item$[rsp]
  00526	48 8b 40 28	 mov	 rax, QWORD PTR [rax+40]
  0052a	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR args$129235[rsp], rax

; 4225 :         kwds = (PyObject *)item->p3;

  00532	48 8b 44 24 78	 mov	 rax, QWORD PTR item$[rsp]
  00537	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  0053b	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR kwds$129236[rsp], rax

; 4226 :         wait = (HANDLE)item->p4;

  00543	48 8b 44 24 78	 mov	 rax, QWORD PTR item$[rsp]
  00548	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  0054c	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR wait$129233[rsp], rax

; 4227 :         c = (Context *)item->from;

  00554	48 8b 44 24 78	 mov	 rax, QWORD PTR item$[rsp]
  00559	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  0055d	48 89 44 24 60	 mov	 QWORD PTR c$[rsp], rax

; 4228 : 
; 4229 :         if (wait) {

  00562	48 83 bc 24 b0
	00 00 00 00	 cmp	 QWORD PTR wait$129233[rsp], 0
  0056b	74 1e		 je	 SHORT $LN34@async_run_

; 4230 :             InterlockedDecrement(&(px->sync_wait_pending));

  0056d	48 8b 44 24 48	 mov	 rax, QWORD PTR px$[rsp]
  00572	48 05 80 01 00
	00		 add	 rax, 384		; 00000180H
  00578	f0 ff 08	 lock dec DWORD PTR [rax]

; 4231 :             InterlockedIncrement(&(px->sync_wait_inflight));

  0057b	48 8b 44 24 48	 mov	 rax, QWORD PTR px$[rsp]
  00580	48 05 84 01 00
	00		 add	 rax, 388		; 00000184H
  00586	f0 ff 00	 lock inc DWORD PTR [rax]

; 4232 :         } else {

  00589	eb 1c		 jmp	 SHORT $LN33@async_run_
$LN34@async_run_:

; 4233 :             InterlockedDecrement(&(px->sync_nowait_pending));

  0058b	48 8b 44 24 48	 mov	 rax, QWORD PTR px$[rsp]
  00590	48 05 98 01 00
	00		 add	 rax, 408		; 00000198H
  00596	f0 ff 08	 lock dec DWORD PTR [rax]

; 4234 :             InterlockedIncrement(&(px->sync_nowait_inflight));

  00599	48 8b 44 24 48	 mov	 rax, QWORD PTR px$[rsp]
  0059e	48 05 9c 01 00
	00		 add	 rax, 412		; 0000019cH
  005a4	f0 ff 00	 lock inc DWORD PTR [rax]
$LN33@async_run_:

; 4235 :         }
; 4236 : 
; 4237 :         if (kwds)

  005a7	48 83 bc 24 a8
	00 00 00 00	 cmp	 QWORD PTR kwds$129236[rsp], 0
  005b0	74 46		 je	 SHORT $LN32@async_run_

; 4238 :             assert(PyDict_CheckExact(kwds));

  005b2	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyDict_Type
  005b9	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR kwds$129236[rsp]
  005c1	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  005c5	74 31		 je	 SHORT $LN60@async_run_
  005c7	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyDict_Type
  005ce	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR kwds$129236[rsp]
  005d6	48 39 41 38	 cmp	 QWORD PTR [rcx+56], rax
  005da	74 1c		 je	 SHORT $LN60@async_run_
  005dc	41 b8 8e 10 00
	00		 mov	 r8d, 4238		; 0000108eH
  005e2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  005e9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@EMCAHAFN@?$AAP?$AAy?$AAD?$AAi?$AAc?$AAt?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AAE?$AAx?$AAa?$AAc?$AAt?$AA?$CI?$AAk?$AAw?$AAd?$AAs?$AA?$CJ?$AA?$AA@
  005f0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  005f6	33 c0		 xor	 eax, eax
$LN60@async_run_:
$LN32@async_run_:

; 4239 : 
; 4240 :         result = PyObject_Call(func, args, kwds);

  005f8	4c 8b 84 24 a8
	00 00 00	 mov	 r8, QWORD PTR kwds$129236[rsp]
  00600	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR args$129235[rsp]
  00608	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR func$129234[rsp]
  00610	e8 00 00 00 00	 call	 PyObject_Call
  00615	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR result$129237[rsp], rax

; 4241 : 
; 4242 :         ++processed_incoming;

  0061d	8b 44 24 24	 mov	 eax, DWORD PTR processed_incoming$[rsp]
  00621	ff c0		 inc	 eax
  00623	89 44 24 24	 mov	 DWORD PTR processed_incoming$[rsp], eax

; 4243 : 
; 4244 :         if (wait) {

  00627	48 83 bc 24 b0
	00 00 00 00	 cmp	 QWORD PTR wait$129233[rsp], 0
  00630	0f 84 31 02 00
	00		 je	 $LN31@async_run_

; 4245 :             PxListItem *d;
; 4246 :             d = c->decref;

  00636	48 8b 44 24 60	 mov	 rax, QWORD PTR c$[rsp]
  0063b	48 8b 80 50 33
	00 00		 mov	 rax, QWORD PTR [rax+13136]
  00642	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR d$129251[rsp], rax

; 4247 :             assert(
; 4248 :                 d &&
; 4249 :                 d->p1 == NULL &&
; 4250 :                 d->p2 == NULL &&
; 4251 :                 d->p3 == NULL &&
; 4252 :                 d->p4 == NULL
; 4253 :             );

  0064a	48 83 bc 24 c8
	00 00 00 00	 cmp	 QWORD PTR d$129251[rsp], 0
  00653	74 3c		 je	 SHORT $LN61@async_run_
  00655	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR d$129251[rsp]
  0065d	48 83 78 20 00	 cmp	 QWORD PTR [rax+32], 0
  00662	75 2d		 jne	 SHORT $LN61@async_run_
  00664	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR d$129251[rsp]
  0066c	48 83 78 28 00	 cmp	 QWORD PTR [rax+40], 0
  00671	75 1e		 jne	 SHORT $LN61@async_run_
  00673	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR d$129251[rsp]
  0067b	48 83 78 30 00	 cmp	 QWORD PTR [rax+48], 0
  00680	75 0f		 jne	 SHORT $LN61@async_run_
  00682	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR d$129251[rsp]
  0068a	48 83 78 38 00	 cmp	 QWORD PTR [rax+56], 0
  0068f	74 1c		 je	 SHORT $LN62@async_run_
$LN61@async_run_:
  00691	41 b8 9d 10 00
	00		 mov	 r8d, 4253		; 0000109dH
  00697	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0069e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1IM@HEBAOIIC@?$AAd?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAd?$AA?9?$AA?$DO?$AAp?$AA1?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAd?$AA?9?$AA?$DO?$AAp?$AA2?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN@
  006a5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  006ab	33 c0		 xor	 eax, eax
$LN62@async_run_:

; 4254 : 
; 4255 :             if (!result) {

  006ad	48 83 bc 24 b8
	00 00 00 00	 cmp	 QWORD PTR result$129237[rsp], 0
  006b6	0f 85 30 01 00
	00		 jne	 $LN30@async_run_

; 4256 :                 PyObject *exc_type, *exc_value, *exc_tb;
; 4257 : 
; 4258 :                 assert(tstate->curexc_type);

  006bc	48 8b 44 24 40	 mov	 rax, QWORD PTR tstate$[rsp]
  006c1	48 83 78 48 00	 cmp	 QWORD PTR [rax+72], 0
  006c6	75 1c		 jne	 SHORT $LN63@async_run_
  006c8	41 b8 a2 10 00
	00		 mov	 r8d, 4258		; 000010a2H
  006ce	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  006d5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CI@IHKKEEFG@?$AAt?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAe?$AAx?$AAc?$AA_?$AAt?$AAy?$AAp?$AAe?$AA?$AA@
  006dc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  006e2	33 c0		 xor	 eax, eax
$LN63@async_run_:

; 4259 : 
; 4260 :                 PyErr_Fetch(&exc_type, &exc_value, &exc_tb);

  006e4	4c 8d 84 24 d0
	00 00 00	 lea	 r8, QWORD PTR exc_tb$129261[rsp]
  006ec	48 8d 94 24 e0
	00 00 00	 lea	 rdx, QWORD PTR exc_value$129260[rsp]
  006f4	48 8d 8c 24 d8
	00 00 00	 lea	 rcx, QWORD PTR exc_type$129259[rsp]
  006fc	e8 00 00 00 00	 call	 PyErr_Fetch

; 4261 : 
; 4262 :                 assert(exc_type);

  00701	48 83 bc 24 d8
	00 00 00 00	 cmp	 QWORD PTR exc_type$129259[rsp], 0
  0070a	75 1c		 jne	 SHORT $LN64@async_run_
  0070c	41 b8 a6 10 00
	00		 mov	 r8d, 4262		; 000010a6H
  00712	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00719	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BC@MCJEHPHF@?$AAe?$AAx?$AAc?$AA_?$AAt?$AAy?$AAp?$AAe?$AA?$AA@
  00720	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00726	33 c0		 xor	 eax, eax
$LN64@async_run_:

; 4263 :                 assert(exc_value);

  00728	48 83 bc 24 e0
	00 00 00 00	 cmp	 QWORD PTR exc_value$129260[rsp], 0
  00731	75 1c		 jne	 SHORT $LN65@async_run_
  00733	41 b8 a7 10 00
	00		 mov	 r8d, 4263		; 000010a7H
  00739	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00740	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BE@GOIKFNMH@?$AAe?$AAx?$AAc?$AA_?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?$AA@
  00747	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0074d	33 c0		 xor	 eax, eax
$LN65@async_run_:

; 4264 :                 assert(exc_tb);

  0074f	48 83 bc 24 d0
	00 00 00 00	 cmp	 QWORD PTR exc_tb$129261[rsp], 0
  00758	75 1c		 jne	 SHORT $LN66@async_run_
  0075a	41 b8 a8 10 00
	00		 mov	 r8d, 4264		; 000010a8H
  00760	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00767	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1O@LDDGLODA@?$AAe?$AAx?$AAc?$AA_?$AAt?$AAb?$AA?$AA@
  0076e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00774	33 c0		 xor	 eax, eax
$LN66@async_run_:

; 4265 : 
; 4266 :                 item->p1 = d->p1 = exc_type;

  00776	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR d$129251[rsp]
  0077e	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR exc_type$129259[rsp]
  00786	48 89 48 20	 mov	 QWORD PTR [rax+32], rcx
  0078a	48 8b 44 24 78	 mov	 rax, QWORD PTR item$[rsp]
  0078f	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR exc_type$129259[rsp]
  00797	48 89 48 20	 mov	 QWORD PTR [rax+32], rcx

; 4267 :                 item->p2 = d->p2 = exc_value;

  0079b	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR d$129251[rsp]
  007a3	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR exc_value$129260[rsp]
  007ab	48 89 48 28	 mov	 QWORD PTR [rax+40], rcx
  007af	48 8b 44 24 78	 mov	 rax, QWORD PTR item$[rsp]
  007b4	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR exc_value$129260[rsp]
  007bc	48 89 48 28	 mov	 QWORD PTR [rax+40], rcx

; 4268 :                 item->p3 = d->p3 = exc_tb;

  007c0	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR d$129251[rsp]
  007c8	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR exc_tb$129261[rsp]
  007d0	48 89 48 30	 mov	 QWORD PTR [rax+48], rcx
  007d4	48 8b 44 24 78	 mov	 rax, QWORD PTR item$[rsp]
  007d9	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR exc_tb$129261[rsp]
  007e1	48 89 48 30	 mov	 QWORD PTR [rax+48], rcx

; 4269 : 
; 4270 :                 PyErr_Clear();

  007e5	e8 00 00 00 00	 call	 PyErr_Clear

; 4271 : 
; 4272 :             } else {

  007ea	eb 3f		 jmp	 SHORT $LN29@async_run_
$LN30@async_run_:

; 4273 :                 item->p1 = NULL;

  007ec	48 8b 44 24 78	 mov	 rax, QWORD PTR item$[rsp]
  007f1	48 c7 40 20 00
	00 00 00	 mov	 QWORD PTR [rax+32], 0

; 4274 :                 item->p2 = d->p1 = result;

  007f9	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR d$129251[rsp]
  00801	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR result$129237[rsp]
  00809	48 89 48 20	 mov	 QWORD PTR [rax+32], rcx
  0080d	48 8b 44 24 78	 mov	 rax, QWORD PTR item$[rsp]
  00812	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR result$129237[rsp]
  0081a	48 89 48 28	 mov	 QWORD PTR [rax+40], rcx

; 4275 :                 item->p3 = NULL;

  0081e	48 8b 44 24 78	 mov	 rax, QWORD PTR item$[rsp]
  00823	48 c7 40 30 00
	00 00 00	 mov	 QWORD PTR [rax+48], 0
$LN29@async_run_:

; 4276 :             }
; 4277 :             PxList_Push(c->decrefs, d);

  0082b	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR d$129251[rsp]
  00833	48 8b 44 24 60	 mov	 rax, QWORD PTR c$[rsp]
  00838	48 8b 88 48 33
	00 00		 mov	 rcx, QWORD PTR [rax+13128]
  0083f	e8 00 00 00 00	 call	 PxList_Push

; 4278 :             c->decref = NULL;

  00844	48 8b 44 24 60	 mov	 rax, QWORD PTR c$[rsp]
  00849	48 c7 80 50 33
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+13136], 0

; 4279 :             SetEvent(wait);

  00854	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR wait$129233[rsp]
  0085c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SetEvent

; 4280 :         } else {

  00862	e9 06 01 00 00	 jmp	 $LN28@async_run_
$LN31@async_run_:

; 4281 :             InterlockedDecrement(&(px->sync_nowait_inflight));

  00867	48 8b 44 24 48	 mov	 rax, QWORD PTR px$[rsp]
  0086c	48 05 9c 01 00
	00		 add	 rax, 412		; 0000019cH
  00872	f0 ff 08	 lock dec DWORD PTR [rax]

; 4282 :             InterlockedIncrement64(&(px->sync_nowait_done));

  00875	48 8b 44 24 48	 mov	 rax, QWORD PTR px$[rsp]
  0087a	48 05 a0 01 00
	00		 add	 rax, 416		; 000001a0H
  00880	f0 48 ff 00	 lock inc QWORD PTR [rax]

; 4283 : 
; 4284 :             if (!result) {

  00884	48 83 bc 24 b8
	00 00 00 00	 cmp	 QWORD PTR result$129237[rsp], 0
  0088d	75 2a		 jne	 SHORT $LN27@async_run_

; 4285 :                 assert(tstate->curexc_type != NULL);

  0088f	48 8b 44 24 40	 mov	 rax, QWORD PTR tstate$[rsp]
  00894	48 83 78 48 00	 cmp	 QWORD PTR [rax+72], 0
  00899	75 1c		 jne	 SHORT $LN67@async_run_
  0089b	41 b8 bd 10 00
	00		 mov	 r8d, 4285		; 000010bdH
  008a1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  008a8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DI@EOJHILJI@?$AAt?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAe?$AAx?$AAc?$AA_?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
  008af	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  008b5	33 c0		 xor	 eax, eax
$LN67@async_run_:

; 4286 :             } else if (result != Py_None) {

  008b7	eb 3a		 jmp	 SHORT $LN26@async_run_
$LN27@async_run_:
  008b9	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  008c0	48 39 84 24 b8
	00 00 00	 cmp	 QWORD PTR result$129237[rsp], rax
  008c8	74 29		 je	 SHORT $LN25@async_run_

; 4287 :                 char *msg = "async call from main thread returned non-None";

  008ca	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0CO@NCNAFCJK@async?5call?5from?5main?5thread?5retu@
  008d1	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR msg$129281[rsp], rax

; 4288 :                 PyErr_WarnEx(PyExc_RuntimeWarning, msg, 1);

  008d9	41 b8 01 00 00
	00		 mov	 r8d, 1
  008df	48 8b 94 24 e8
	00 00 00	 mov	 rdx, QWORD PTR msg$129281[rsp]
  008e7	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeWarning
  008ee	e8 00 00 00 00	 call	 PyErr_WarnEx
$LN25@async_run_:
$LN26@async_run_:
$LN24@async_run_:

; 4289 :             }
; 4290 :             Py_XDECREF(result);

  008f3	48 83 bc 24 b8
	00 00 00 00	 cmp	 QWORD PTR result$129237[rsp], 0
  008fc	74 0d		 je	 SHORT $LN21@async_run_
  008fe	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR result$129237[rsp]
  00906	e8 00 00 00 00	 call	 _Py_DecRef
$LN21@async_run_:
  0090b	33 c0		 xor	 eax, eax
  0090d	85 c0		 test	 eax, eax
  0090f	75 e2		 jne	 SHORT $LN24@async_run_

; 4291 : 
; 4292 :             c = (Context *)item->from;

  00911	48 8b 44 24 78	 mov	 rax, QWORD PTR item$[rsp]
  00916	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  0091a	48 89 44 24 60	 mov	 QWORD PTR c$[rsp], rax

; 4293 :             /* More hacks to persist socket/IO objects. */
; 4294 :             if (c->io_obj)

  0091f	48 8b 44 24 60	 mov	 rax, QWORD PTR c$[rsp]
  00924	48 83 b8 a8 32
	00 00 00	 cmp	 QWORD PTR [rax+12968], 0
  0092c	74 05		 je	 SHORT $LN20@async_run_

; 4295 :                 continue;

  0092e	e9 af fb ff ff	 jmp	 $LN36@async_run_
$LN20@async_run_:

; 4296 : 
; 4297 :             Px_DECCTX(c);

  00933	48 8b 4c 24 60	 mov	 rcx, QWORD PTR c$[rsp]
  00938	e8 00 00 00 00	 call	 Px_DECCTX

; 4298 :             _PyHeap_Free(c, item);

  0093d	48 8b 54 24 78	 mov	 rdx, QWORD PTR item$[rsp]
  00942	48 8b 4c 24 60	 mov	 rcx, QWORD PTR c$[rsp]
  00947	e8 00 00 00 00	 call	 _PyHeap_Free

; 4299 : 
; 4300 :             if (!result) {

  0094c	48 83 bc 24 b8
	00 00 00 00	 cmp	 QWORD PTR result$129237[rsp], 0
  00955	75 16		 jne	 SHORT $LN19@async_run_

; 4301 :                 px->processing_callback = 0;

  00957	48 8b 44 24 48	 mov	 rax, QWORD PTR px$[rsp]
  0095c	c7 80 d0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+208], 0

; 4302 :                 return NULL;

  00966	33 c0		 xor	 eax, eax
  00968	e9 ae 01 00 00	 jmp	 $LN50@async_run_
$LN19@async_run_:
$LN28@async_run_:

; 4303 :             }
; 4304 :         }
; 4305 :     }

  0096d	e9 70 fb ff ff	 jmp	 $LN68@async_run_
$LN35@async_run_:

; 4306 :     px->processing_callback = 0;

  00972	48 8b 44 24 48	 mov	 rax, QWORD PTR px$[rsp]
  00977	c7 80 d0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+208], 0

; 4307 :     ((PyFrameObject *)(tstate->frame)) = old_frame;

  00981	48 8b 44 24 40	 mov	 rax, QWORD PTR tstate$[rsp]
  00986	48 8b 4c 24 28	 mov	 rcx, QWORD PTR old_frame$[rsp]
  0098b	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 4308 : 
; 4309 : 
; 4310 :     /* Process completed items. */
; 4311 :     item = PxList_Flush(px->completed_callbacks);

  0098f	48 8b 44 24 48	 mov	 rax, QWORD PTR px$[rsp]
  00994	48 8b 48 10	 mov	 rcx, QWORD PTR [rax+16]
  00998	e8 00 00 00 00	 call	 PxList_Flush
  0099d	48 89 44 24 78	 mov	 QWORD PTR item$[rsp], rax

; 4312 :     if (item) {

  009a2	48 83 7c 24 78
	00		 cmp	 QWORD PTR item$[rsp], 0
  009a8	74 30		 je	 SHORT $LN18@async_run_
$LN17@async_run_:

; 4313 :         do {
; 4314 :             /* XXX TODO: update stats. */
; 4315 :             ++processed_callbacks;

  009aa	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR processed_callbacks$[rsp]
  009b1	ff c0		 inc	 eax
  009b3	89 84 24 80 00
	00 00		 mov	 DWORD PTR processed_callbacks$[rsp], eax

; 4316 :             item = PxList_Transfer(px->finished, item);

  009ba	48 8b 54 24 78	 mov	 rdx, QWORD PTR item$[rsp]
  009bf	48 8b 44 24 48	 mov	 rax, QWORD PTR px$[rsp]
  009c4	48 8b 48 28	 mov	 rcx, QWORD PTR [rax+40]
  009c8	e8 00 00 00 00	 call	 PxList_Transfer
  009cd	48 89 44 24 78	 mov	 QWORD PTR item$[rsp], rax

; 4317 :         } while (item);

  009d2	48 83 7c 24 78
	00		 cmp	 QWORD PTR item$[rsp], 0
  009d8	75 d0		 jne	 SHORT $LN17@async_run_
$LN18@async_run_:

; 4318 :     }
; 4319 : 
; 4320 :     item = PxList_Flush(px->completed_errbacks);

  009da	48 8b 44 24 48	 mov	 rax, QWORD PTR px$[rsp]
  009df	48 8b 48 18	 mov	 rcx, QWORD PTR [rax+24]
  009e3	e8 00 00 00 00	 call	 PxList_Flush
  009e8	48 89 44 24 78	 mov	 QWORD PTR item$[rsp], rax

; 4321 :     if (item) {

  009ed	48 83 7c 24 78
	00		 cmp	 QWORD PTR item$[rsp], 0
  009f3	74 2a		 je	 SHORT $LN14@async_run_
$LN13@async_run_:

; 4322 :         do {
; 4323 :             /* XXX TODO: update stats. */
; 4324 :             ++processed_errbacks;

  009f5	8b 44 24 50	 mov	 eax, DWORD PTR processed_errbacks$[rsp]
  009f9	ff c0		 inc	 eax
  009fb	89 44 24 50	 mov	 DWORD PTR processed_errbacks$[rsp], eax

; 4325 :             item = PxList_Transfer(px->finished, item);

  009ff	48 8b 54 24 78	 mov	 rdx, QWORD PTR item$[rsp]
  00a04	48 8b 44 24 48	 mov	 rax, QWORD PTR px$[rsp]
  00a09	48 8b 48 28	 mov	 rcx, QWORD PTR [rax+40]
  00a0d	e8 00 00 00 00	 call	 PxList_Transfer
  00a12	48 89 44 24 78	 mov	 QWORD PTR item$[rsp], rax

; 4326 :         } while (item);

  00a17	48 83 7c 24 78
	00		 cmp	 QWORD PTR item$[rsp], 0
  00a1d	75 d6		 jne	 SHORT $LN13@async_run_
$LN14@async_run_:

; 4327 :     }
; 4328 : 
; 4329 :     if (px->contexts_active == 0 || purged)

  00a1f	48 8b 44 24 48	 mov	 rax, QWORD PTR px$[rsp]
  00a24	83 b8 e8 00 00
	00 00		 cmp	 DWORD PTR [rax+232], 0
  00a2b	74 07		 je	 SHORT $LN9@async_run_
  00a2d	83 7c 24 54 00	 cmp	 DWORD PTR purged$[rsp], 0
  00a32	74 18		 je	 SHORT $LN10@async_run_
$LN9@async_run_:

; 4330 :         Py_RETURN_NONE;

  00a34	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00a3b	e8 00 00 00 00	 call	 _Py_IncRef
  00a40	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00a47	e9 cf 00 00 00	 jmp	 $LN50@async_run_
$LN10@async_run_:

; 4331 : 
; 4332 :     /* Return if we've done something useful... */
; 4333 :     if (processed_errors    ||
; 4334 :         processed_finished  ||
; 4335 :         processed_incoming  ||
; 4336 :         processed_errbacks  ||
; 4337 :         processed_callbacks)

  00a4c	83 bc 24 88 00
	00 00 00	 cmp	 DWORD PTR processed_errors$[rsp], 0
  00a54	75 1f		 jne	 SHORT $LN7@async_run_
  00a56	83 7c 24 20 00	 cmp	 DWORD PTR processed_finished$[rsp], 0
  00a5b	75 18		 jne	 SHORT $LN7@async_run_
  00a5d	83 7c 24 24 00	 cmp	 DWORD PTR processed_incoming$[rsp], 0
  00a62	75 11		 jne	 SHORT $LN7@async_run_
  00a64	83 7c 24 50 00	 cmp	 DWORD PTR processed_errbacks$[rsp], 0
  00a69	75 0a		 jne	 SHORT $LN7@async_run_
  00a6b	83 bc 24 80 00
	00 00 00	 cmp	 DWORD PTR processed_callbacks$[rsp], 0
  00a73	74 18		 je	 SHORT $LN8@async_run_
$LN7@async_run_:

; 4338 :             Py_RETURN_NONE;

  00a75	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00a7c	e8 00 00 00 00	 call	 _Py_IncRef
  00a81	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00a88	e9 8e 00 00 00	 jmp	 $LN50@async_run_
$LN8@async_run_:

; 4339 : 
; 4340 :     /* ...and wait for a second if we haven't. */
; 4341 :     err = WaitForSingleObject(px->wakeup, 1000);

  00a8d	ba e8 03 00 00	 mov	 edx, 1000		; 000003e8H
  00a92	48 8b 44 24 48	 mov	 rax, QWORD PTR px$[rsp]
  00a97	48 8b 88 a0 00
	00 00		 mov	 rcx, QWORD PTR [rax+160]
  00a9e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WaitForSingleObject
  00aa4	89 44 24 70	 mov	 DWORD PTR err$[rsp], eax

; 4342 :     switch (err) {

  00aa8	8b 44 24 70	 mov	 eax, DWORD PTR err$[rsp]
  00aac	89 84 24 f8 00
	00 00		 mov	 DWORD PTR tv422[rsp], eax
  00ab3	83 bc 24 f8 00
	00 00 ff	 cmp	 DWORD PTR tv422[rsp], -1
  00abb	74 55		 je	 SHORT $LN1@async_run_
  00abd	83 bc 24 f8 00
	00 00 00	 cmp	 DWORD PTR tv422[rsp], 0
  00ac5	74 1c		 je	 SHORT $LN4@async_run_
  00ac7	81 bc 24 f8 00
	00 00 80 00 00
	00		 cmp	 DWORD PTR tv422[rsp], 128 ; 00000080H
  00ad2	74 29		 je	 SHORT $LN2@async_run_
  00ad4	81 bc 24 f8 00
	00 00 02 01 00
	00		 cmp	 DWORD PTR tv422[rsp], 258 ; 00000102H
  00adf	74 07		 je	 SHORT $LN3@async_run_
  00ae1	eb 36		 jmp	 SHORT $LN5@async_run_
$LN4@async_run_:

; 4343 :         case WAIT_OBJECT_0:
; 4344 :             goto start;

  00ae3	e9 d0 f8 ff ff	 jmp	 $start$129210
$LN3@async_run_:

; 4345 :         case WAIT_TIMEOUT:
; 4346 :             Py_RETURN_NONE;

  00ae8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00aef	e8 00 00 00 00	 call	 _Py_IncRef
  00af4	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00afb	eb 1e		 jmp	 SHORT $LN50@async_run_
$LN2@async_run_:

; 4347 :         case WAIT_ABANDONED:
; 4348 :             PyErr_SetString(PyExc_SystemError, "wait abandoned");

  00afd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0P@BLBOHJGC@wait?5abandoned?$AA@
  00b04	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SystemError
  00b0b	e8 00 00 00 00	 call	 PyErr_SetString

; 4349 :             break;

  00b10	eb 07		 jmp	 SHORT $LN5@async_run_
$LN1@async_run_:

; 4350 :         case WAIT_FAILED:
; 4351 :             PyErr_SetFromWindowsErr(0);

  00b12	33 c9		 xor	 ecx, ecx
  00b14	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
$LN5@async_run_:

; 4352 :             break;
; 4353 :     }
; 4354 :     return NULL;

  00b19	33 c0		 xor	 eax, eax
$LN50@async_run_:

; 4355 : }

  00b1b	48 81 c4 08 01
	00 00		 add	 rsp, 264		; 00000108H
  00b22	c3		 ret	 0
_async_run_once ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_async_map DD imagerel $LN3
	DD	imagerel $LN3+31
	DD	imagerel $unwind$_async_map
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_async_map DD 010e01H
	DD	0220eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _async_map
_TEXT	SEGMENT
result$ = 0
self$ = 32
args$ = 40
_async_map PROC						; COMDAT

; 4359 : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 18	 sub	 rsp, 24

; 4360 :     PyObject *result = NULL;

  0000e	48 c7 04 24 00
	00 00 00	 mov	 QWORD PTR result$[rsp], 0

; 4361 : 
; 4362 :     return result;

  00016	48 8b 04 24	 mov	 rax, QWORD PTR result$[rsp]

; 4363 : }

  0001a	48 83 c4 18	 add	 rsp, 24
  0001e	c3		 ret	 0
_async_map ENDP
_TEXT	ENDS
PUBLIC	??_C@_02HCKGKOFO@?$CI?$CJ?$AA@			; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	extract_args
;	COMDAT pdata
pdata	SEGMENT
$pdata$extract_args DD imagerel $LN9
	DD	imagerel $LN9+481
	DD	imagerel $unwind$extract_args
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$extract_args DD 010e01H
	DD	0c20eH
xdata	ENDS
;	COMDAT ??_C@_02HCKGKOFO@?$CI?$CJ?$AA@
CONST	SEGMENT
??_C@_02HCKGKOFO@?$CI?$CJ?$AA@ DB '()', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT extract_args
_TEXT	SEGMENT
tmp$129350 = 80
args$ = 112
c$ = 120
extract_args PROC					; COMDAT

; 4367 : {

$LN9:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 4368 :     if (!PyArg_UnpackTuple(
; 4369 :             args, "", 1, 5,
; 4370 :             &(c->func), &(c->args), &(c->kwds),
; 4371 :             &(c->callback), &(c->errback)))

  0000e	48 8b 44 24 78	 mov	 rax, QWORD PTR c$[rsp]
  00013	48 05 58 32 00
	00		 add	 rax, 12888		; 00003258H
  00019	48 8b 4c 24 78	 mov	 rcx, QWORD PTR c$[rsp]
  0001e	48 81 c1 50 32
	00 00		 add	 rcx, 12880		; 00003250H
  00025	48 8b 54 24 78	 mov	 rdx, QWORD PTR c$[rsp]
  0002a	48 81 c2 48 32
	00 00		 add	 rdx, 12872		; 00003248H
  00031	4c 8b 44 24 78	 mov	 r8, QWORD PTR c$[rsp]
  00036	49 81 c0 40 32
	00 00		 add	 r8, 12864		; 00003240H
  0003d	4c 8b 4c 24 78	 mov	 r9, QWORD PTR c$[rsp]
  00042	49 81 c1 38 32
	00 00		 add	 r9, 12856		; 00003238H
  00049	48 89 44 24 40	 mov	 QWORD PTR [rsp+64], rax
  0004e	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  00053	48 89 54 24 30	 mov	 QWORD PTR [rsp+48], rdx
  00058	4c 89 44 24 28	 mov	 QWORD PTR [rsp+40], r8
  0005d	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00062	41 b9 05 00 00
	00		 mov	 r9d, 5
  00068	41 b8 01 00 00
	00		 mov	 r8d, 1
  0006e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  00075	48 8b 4c 24 70	 mov	 rcx, QWORD PTR args$[rsp]
  0007a	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  0007f	85 c0		 test	 eax, eax
  00081	75 07		 jne	 SHORT $LN6@extract_ar

; 4372 :         return 0;

  00083	33 c0		 xor	 eax, eax
  00085	e9 52 01 00 00	 jmp	 $LN7@extract_ar
$LN6@extract_ar:

; 4373 : 
; 4374 :     if (c->callback == Py_None) {

  0008a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00091	48 8b 4c 24 78	 mov	 rcx, QWORD PTR c$[rsp]
  00096	48 39 81 50 32
	00 00		 cmp	 QWORD PTR [rcx+12880], rax
  0009d	75 21		 jne	 SHORT $LN5@extract_ar

; 4375 :         Py_DECREF(c->callback);

  0009f	48 8b 44 24 78	 mov	 rax, QWORD PTR c$[rsp]
  000a4	48 8b 88 50 32
	00 00		 mov	 rcx, QWORD PTR [rax+12880]
  000ab	e8 00 00 00 00	 call	 _Py_DecRef

; 4376 :         c->callback = NULL;

  000b0	48 8b 44 24 78	 mov	 rax, QWORD PTR c$[rsp]
  000b5	48 c7 80 50 32
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+12880], 0
$LN5@extract_ar:

; 4377 :     }
; 4378 : 
; 4379 :     if (c->errback == Py_None) {

  000c0	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000c7	48 8b 4c 24 78	 mov	 rcx, QWORD PTR c$[rsp]
  000cc	48 39 81 58 32
	00 00		 cmp	 QWORD PTR [rcx+12888], rax
  000d3	75 21		 jne	 SHORT $LN4@extract_ar

; 4380 :         Py_DECREF(c->errback);

  000d5	48 8b 44 24 78	 mov	 rax, QWORD PTR c$[rsp]
  000da	48 8b 88 58 32
	00 00		 mov	 rcx, QWORD PTR [rax+12888]
  000e1	e8 00 00 00 00	 call	 _Py_DecRef

; 4381 :         c->errback = NULL;

  000e6	48 8b 44 24 78	 mov	 rax, QWORD PTR c$[rsp]
  000eb	48 c7 80 58 32
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+12888], 0
$LN4@extract_ar:

; 4382 :     }
; 4383 : 
; 4384 :     if (c->args == Py_None) {

  000f6	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000fd	48 8b 4c 24 78	 mov	 rcx, QWORD PTR c$[rsp]
  00102	48 39 81 40 32
	00 00		 cmp	 QWORD PTR [rcx+12864], rax
  00109	75 29		 jne	 SHORT $LN3@extract_ar

; 4385 :         Py_DECREF(c->args);

  0010b	48 8b 44 24 78	 mov	 rax, QWORD PTR c$[rsp]
  00110	48 8b 88 40 32
	00 00		 mov	 rcx, QWORD PTR [rax+12864]
  00117	e8 00 00 00 00	 call	 _Py_DecRef

; 4386 :         c->args = Py_BuildValue("()");

  0011c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02HCKGKOFO@?$CI?$CJ?$AA@
  00123	e8 00 00 00 00	 call	 Py_BuildValue
  00128	48 8b 4c 24 78	 mov	 rcx, QWORD PTR c$[rsp]
  0012d	48 89 81 40 32
	00 00		 mov	 QWORD PTR [rcx+12864], rax
$LN3@extract_ar:

; 4387 :     }
; 4388 : 
; 4389 :     if (c->kwds == Py_None) {

  00134	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0013b	48 8b 4c 24 78	 mov	 rcx, QWORD PTR c$[rsp]
  00140	48 39 81 48 32
	00 00		 cmp	 QWORD PTR [rcx+12872], rax
  00147	75 21		 jne	 SHORT $LN2@extract_ar

; 4390 :         Py_DECREF(c->kwds);

  00149	48 8b 44 24 78	 mov	 rax, QWORD PTR c$[rsp]
  0014e	48 8b 88 48 32
	00 00		 mov	 rcx, QWORD PTR [rax+12872]
  00155	e8 00 00 00 00	 call	 _Py_DecRef

; 4391 :         c->kwds = NULL;

  0015a	48 8b 44 24 78	 mov	 rax, QWORD PTR c$[rsp]
  0015f	48 c7 80 48 32
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+12872], 0
$LN2@extract_ar:

; 4392 :     }
; 4393 : 
; 4394 :     if (c->args && !PyTuple_Check(c->args)) {

  0016a	48 8b 44 24 78	 mov	 rax, QWORD PTR c$[rsp]
  0016f	48 83 b8 40 32
	00 00 00	 cmp	 QWORD PTR [rax+12864], 0
  00177	74 5e		 je	 SHORT $LN1@extract_ar
  00179	48 8b 44 24 78	 mov	 rax, QWORD PTR c$[rsp]
  0017e	48 8b 80 40 32
	00 00		 mov	 rax, QWORD PTR [rax+12864]
  00185	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00189	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0018f	25 00 00 00 04	 and	 eax, 67108864		; 04000000H
  00194	85 c0		 test	 eax, eax
  00196	75 3f		 jne	 SHORT $LN1@extract_ar

; 4395 :         PyObject *tmp = c->args;

  00198	48 8b 44 24 78	 mov	 rax, QWORD PTR c$[rsp]
  0019d	48 8b 80 40 32
	00 00		 mov	 rax, QWORD PTR [rax+12864]
  001a4	48 89 44 24 50	 mov	 QWORD PTR tmp$129350[rsp], rax

; 4396 :         c->args = Py_BuildValue("(O)", c->args);

  001a9	48 8b 44 24 78	 mov	 rax, QWORD PTR c$[rsp]
  001ae	48 8b 90 40 32
	00 00		 mov	 rdx, QWORD PTR [rax+12864]
  001b5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03IELNPCCE@?$CIO?$CJ?$AA@
  001bc	e8 00 00 00 00	 call	 Py_BuildValue
  001c1	48 8b 4c 24 78	 mov	 rcx, QWORD PTR c$[rsp]
  001c6	48 89 81 40 32
	00 00		 mov	 QWORD PTR [rcx+12864], rax

; 4397 :         Py_DECREF(tmp);

  001cd	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tmp$129350[rsp]
  001d2	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@extract_ar:

; 4398 :     }
; 4399 : 
; 4400 :     return 1;

  001d7	b8 01 00 00 00	 mov	 eax, 1
$LN7@extract_ar:

; 4401 : }

  001dc	48 83 c4 68	 add	 rsp, 104		; 00000068H
  001e0	c3		 ret	 0
extract_args ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BL@NBIFCBCJ@non?9None?5value?5for?5timeout?$AA@ ; `string'
PUBLIC	extract_waitobj_args
;	COMDAT pdata
pdata	SEGMENT
$pdata$extract_waitobj_args DD imagerel $LN10
	DD	imagerel $LN10+640
	DD	imagerel $unwind$extract_waitobj_args
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$extract_waitobj_args DD 010e01H
	DD	0e20eH
xdata	ENDS
;	COMDAT ??_C@_0BL@NBIFCBCJ@non?9None?5value?5for?5timeout?$AA@
CONST	SEGMENT
??_C@_0BL@NBIFCBCJ@non?9None?5value?5for?5timeout?$AA@ DB 'non-None value'
	DB	' for timeout', 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT extract_waitobj_args
_TEXT	SEGMENT
tmp$129374 = 96
args$ = 128
c$ = 136
extract_waitobj_args PROC				; COMDAT

; 4405 : {

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 4406 :     if (!PyArg_UnpackTuple(
; 4407 :             args, "", 2, 7,
; 4408 :             &(c->waitobj),
; 4409 :             &(c->waitobj_timeout),
; 4410 :             &(c->func),
; 4411 :             &(c->args),
; 4412 :             &(c->kwds),
; 4413 :             &(c->callback),
; 4414 :             &(c->errback)))

  0000e	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  00016	48 05 58 32 00
	00		 add	 rax, 12888		; 00003258H
  0001c	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  00024	48 81 c1 50 32
	00 00		 add	 rcx, 12880		; 00003250H
  0002b	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR c$[rsp]
  00033	48 81 c2 48 32
	00 00		 add	 rdx, 12872		; 00003248H
  0003a	4c 8b 84 24 88
	00 00 00	 mov	 r8, QWORD PTR c$[rsp]
  00042	49 81 c0 40 32
	00 00		 add	 r8, 12864		; 00003240H
  00049	4c 8b 8c 24 88
	00 00 00	 mov	 r9, QWORD PTR c$[rsp]
  00051	49 81 c1 38 32
	00 00		 add	 r9, 12856		; 00003238H
  00058	4c 8b 94 24 88
	00 00 00	 mov	 r10, QWORD PTR c$[rsp]
  00060	49 81 c2 30 32
	00 00		 add	 r10, 12848		; 00003230H
  00067	4c 8b 9c 24 88
	00 00 00	 mov	 r11, QWORD PTR c$[rsp]
  0006f	49 81 c3 28 32
	00 00		 add	 r11, 12840		; 00003228H
  00076	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0007b	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00080	48 89 54 24 40	 mov	 QWORD PTR [rsp+64], rdx
  00085	4c 89 44 24 38	 mov	 QWORD PTR [rsp+56], r8
  0008a	4c 89 4c 24 30	 mov	 QWORD PTR [rsp+48], r9
  0008f	4c 89 54 24 28	 mov	 QWORD PTR [rsp+40], r10
  00094	4c 89 5c 24 20	 mov	 QWORD PTR [rsp+32], r11
  00099	41 b9 07 00 00
	00		 mov	 r9d, 7
  0009f	41 b8 02 00 00
	00		 mov	 r8d, 2
  000a5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  000ac	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  000b4	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  000b9	85 c0		 test	 eax, eax
  000bb	75 07		 jne	 SHORT $LN7@extract_wa

; 4415 :         return 0;

  000bd	33 c0		 xor	 eax, eax
  000bf	e9 b7 01 00 00	 jmp	 $LN8@extract_wa
$LN7@extract_wa:

; 4416 : 
; 4417 :     if (c->waitobj_timeout != Py_None) {

  000c4	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000cb	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  000d3	48 39 81 30 32
	00 00		 cmp	 QWORD PTR [rcx+12848], rax
  000da	74 1a		 je	 SHORT $LN6@extract_wa

; 4418 :         PyErr_SetString(PyExc_ValueError, "non-None value for timeout");

  000dc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BL@NBIFCBCJ@non?9None?5value?5for?5timeout?$AA@
  000e3	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  000ea	e8 00 00 00 00	 call	 PyErr_SetString

; 4419 :         return 0;

  000ef	33 c0		 xor	 eax, eax
  000f1	e9 85 01 00 00	 jmp	 $LN8@extract_wa
$LN6@extract_wa:

; 4420 :     }
; 4421 : 
; 4422 :     if (c->callback == Py_None) {

  000f6	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000fd	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  00105	48 39 81 50 32
	00 00		 cmp	 QWORD PTR [rcx+12880], rax
  0010c	75 27		 jne	 SHORT $LN5@extract_wa

; 4423 :         Py_DECREF(c->callback);

  0010e	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  00116	48 8b 88 50 32
	00 00		 mov	 rcx, QWORD PTR [rax+12880]
  0011d	e8 00 00 00 00	 call	 _Py_DecRef

; 4424 :         c->callback = NULL;

  00122	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  0012a	48 c7 80 50 32
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+12880], 0
$LN5@extract_wa:

; 4425 :     }
; 4426 : 
; 4427 :     if (c->errback == Py_None) {

  00135	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0013c	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  00144	48 39 81 58 32
	00 00		 cmp	 QWORD PTR [rcx+12888], rax
  0014b	75 27		 jne	 SHORT $LN4@extract_wa

; 4428 :         Py_DECREF(c->errback);

  0014d	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  00155	48 8b 88 58 32
	00 00		 mov	 rcx, QWORD PTR [rax+12888]
  0015c	e8 00 00 00 00	 call	 _Py_DecRef

; 4429 :         c->errback = NULL;

  00161	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  00169	48 c7 80 58 32
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+12888], 0
$LN4@extract_wa:

; 4430 :     }
; 4431 : 
; 4432 :     if (c->args == Py_None) {

  00174	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0017b	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  00183	48 39 81 40 32
	00 00		 cmp	 QWORD PTR [rcx+12864], rax
  0018a	75 2f		 jne	 SHORT $LN3@extract_wa

; 4433 :         Py_DECREF(c->args);

  0018c	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  00194	48 8b 88 40 32
	00 00		 mov	 rcx, QWORD PTR [rax+12864]
  0019b	e8 00 00 00 00	 call	 _Py_DecRef

; 4434 :         c->args = Py_BuildValue("()");

  001a0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02HCKGKOFO@?$CI?$CJ?$AA@
  001a7	e8 00 00 00 00	 call	 Py_BuildValue
  001ac	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  001b4	48 89 81 40 32
	00 00		 mov	 QWORD PTR [rcx+12864], rax
$LN3@extract_wa:

; 4435 :     }
; 4436 : 
; 4437 :     if (c->kwds == Py_None) {

  001bb	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  001c2	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  001ca	48 39 81 48 32
	00 00		 cmp	 QWORD PTR [rcx+12872], rax
  001d1	75 27		 jne	 SHORT $LN2@extract_wa

; 4438 :         Py_DECREF(c->kwds);

  001d3	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  001db	48 8b 88 48 32
	00 00		 mov	 rcx, QWORD PTR [rax+12872]
  001e2	e8 00 00 00 00	 call	 _Py_DecRef

; 4439 :         c->kwds = NULL;

  001e7	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  001ef	48 c7 80 48 32
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+12872], 0
$LN2@extract_wa:

; 4440 :     }
; 4441 : 
; 4442 :     if (c->args && !PyTuple_Check(c->args)) {

  001fa	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  00202	48 83 b8 40 32
	00 00 00	 cmp	 QWORD PTR [rax+12864], 0
  0020a	74 6a		 je	 SHORT $LN1@extract_wa
  0020c	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  00214	48 8b 80 40 32
	00 00		 mov	 rax, QWORD PTR [rax+12864]
  0021b	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0021f	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00225	25 00 00 00 04	 and	 eax, 67108864		; 04000000H
  0022a	85 c0		 test	 eax, eax
  0022c	75 48		 jne	 SHORT $LN1@extract_wa

; 4443 :         PyObject *tmp = c->args;

  0022e	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  00236	48 8b 80 40 32
	00 00		 mov	 rax, QWORD PTR [rax+12864]
  0023d	48 89 44 24 60	 mov	 QWORD PTR tmp$129374[rsp], rax

; 4444 :         c->args = Py_BuildValue("(O)", c->args);

  00242	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  0024a	48 8b 90 40 32
	00 00		 mov	 rdx, QWORD PTR [rax+12864]
  00251	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03IELNPCCE@?$CIO?$CJ?$AA@
  00258	e8 00 00 00 00	 call	 Py_BuildValue
  0025d	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  00265	48 89 81 40 32
	00 00		 mov	 QWORD PTR [rcx+12864], rax

; 4445 :         Py_DECREF(tmp);

  0026c	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tmp$129374[rsp]
  00271	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@extract_wa:

; 4446 :     }
; 4447 : 
; 4448 :     return 1;

  00276	b8 01 00 00 00	 mov	 eax, 1
$LN8@extract_wa:

; 4449 : }

  0027b	48 83 c4 78	 add	 rsp, 120		; 00000078H
  0027f	c3		 ret	 0
extract_waitobj_args ENDP
_TEXT	ENDS
PUBLIC	submit_work
EXTRN	__imp_TrySubmitThreadpoolCallback:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$submit_work DD imagerel $LN7
	DD	imagerel $LN7+149
	DD	imagerel $unwind$submit_work
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$submit_work DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT submit_work
_TEXT	SEGMENT
retval$ = 32
cb$ = 40
c$ = 64
submit_work PROC					; COMDAT

; 4454 : {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 4455 :     int retval;
; 4456 :     PTP_SIMPLE_CALLBACK cb = _PyParallel_WorkCallback;

  00009	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyParallel_WorkCallback
  00010	48 89 44 24 28	 mov	 QWORD PTR cb$[rsp], rax

; 4457 :     if (Py_PXCTX) {

  00015	e8 00 00 00 00	 call	 _Py_PXCTX
  0001a	85 c0		 test	 eax, eax
  0001c	74 49		 je	 SHORT $LN3@submit_wor

; 4458 :         assert(c->instance);

  0001e	48 8b 44 24 40	 mov	 rax, QWORD PTR c$[rsp]
  00023	48 83 b8 f0 00
	00 00 00	 cmp	 QWORD PTR [rax+240], 0
  0002b	75 1c		 jne	 SHORT $LN6@submit_wor
  0002d	41 b8 6a 11 00
	00		 mov	 r8d, 4458		; 0000116aH
  00033	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0003a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BI@ILCIELPE@?$AAc?$AA?9?$AA?$DO?$AAi?$AAn?$AAs?$AAt?$AAa?$AAn?$AAc?$AAe?$AA?$AA@
  00041	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00047	33 c0		 xor	 eax, eax
$LN6@submit_wor:

; 4459 :         cb(c->instance, c);

  00049	48 8b 54 24 40	 mov	 rdx, QWORD PTR c$[rsp]
  0004e	48 8b 44 24 40	 mov	 rax, QWORD PTR c$[rsp]
  00053	48 8b 88 f0 00
	00 00		 mov	 rcx, QWORD PTR [rax+240]
  0005a	ff 54 24 28	 call	 QWORD PTR cb$[rsp]

; 4460 :         return 1;

  0005e	b8 01 00 00 00	 mov	 eax, 1
  00063	eb 2b		 jmp	 SHORT $LN4@submit_wor

; 4461 :     } else {

  00065	eb 29		 jmp	 SHORT $LN2@submit_wor
$LN3@submit_wor:

; 4462 :         retval = TrySubmitThreadpoolCallback(cb, c, NULL);

  00067	45 33 c0	 xor	 r8d, r8d
  0006a	48 8b 54 24 40	 mov	 rdx, QWORD PTR c$[rsp]
  0006f	48 8b 4c 24 28	 mov	 rcx, QWORD PTR cb$[rsp]
  00074	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_TrySubmitThreadpoolCallback
  0007a	89 44 24 20	 mov	 DWORD PTR retval$[rsp], eax

; 4463 :         if (!retval)

  0007e	83 7c 24 20 00	 cmp	 DWORD PTR retval$[rsp], 0
  00083	75 07		 jne	 SHORT $LN1@submit_wor

; 4464 :             PyErr_SetFromWindowsErr(0);

  00085	33 c9		 xor	 ecx, ecx
  00087	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
$LN1@submit_wor:

; 4465 :         return retval;

  0008c	8b 44 24 20	 mov	 eax, DWORD PTR retval$[rsp]
$LN2@submit_wor:
$LN4@submit_wor:

; 4466 :     }
; 4467 : }

  00090	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00094	c3		 ret	 0
submit_work ENDP
_TEXT	ENDS
PUBLIC	new_context
;	COMDAT pdata
pdata	SEGMENT
$pdata$new_context DD imagerel $LN13
	DD	imagerel $LN13+1007
	DD	imagerel $unwind$new_context
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$new_context DD 010d01H
	DD	0c20dH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT new_context
_TEXT	SEGMENT
pstate$ = 32
i$ = 40
s$ = 48
px$ = 56
c$ = 64
h$129420 = 72
tv171 = 80
heapsize$ = 112
init_heap_snapshots$ = 120
new_context PROC					; COMDAT

; 4471 : {

$LN13:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 4472 :     int i;
; 4473 :     PxState  *px;
; 4474 :     Stats *s;
; 4475 :     PyThreadState *pstate;
; 4476 :     Context  *c = (Context *)malloc(sizeof(Context));

  0000d	b9 20 38 00 00	 mov	 ecx, 14368		; 00003820H
  00012	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  00018	48 89 44 24 40	 mov	 QWORD PTR c$[rsp], rax

; 4477 : 
; 4478 :     if (!c)

  0001d	48 83 7c 24 40
	00		 cmp	 QWORD PTR c$[rsp], 0
  00023	75 0a		 jne	 SHORT $LN9@new_contex

; 4479 :         return (Context *)PyErr_NoMemory();

  00025	e8 00 00 00 00	 call	 PyErr_NoMemory
  0002a	e9 bb 03 00 00	 jmp	 $LN10@new_contex
$LN9@new_contex:

; 4480 : 
; 4481 :     memset((void *)c, 0, sizeof(Context));

  0002f	41 b8 20 38 00
	00		 mov	 r8d, 14368		; 00003820H
  00035	33 d2		 xor	 edx, edx
  00037	48 8b 4c 24 40	 mov	 rcx, QWORD PTR c$[rsp]
  0003c	e8 00 00 00 00	 call	 memset

; 4482 : 
; 4483 :     c->heap_handle = HeapCreate(HEAP_NO_SERIALIZE, Px_DEFAULT_HEAP_SIZE, 0);

  00041	45 33 c0	 xor	 r8d, r8d
  00044	ba 00 00 20 00	 mov	 edx, 2097152		; 00200000H
  00049	b9 01 00 00 00	 mov	 ecx, 1
  0004e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_HeapCreate
  00054	48 8b 4c 24 40	 mov	 rcx, QWORD PTR c$[rsp]
  00059	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 4484 :     if (!c->heap_handle) {

  0005d	48 8b 44 24 40	 mov	 rax, QWORD PTR c$[rsp]
  00062	48 83 78 10 00	 cmp	 QWORD PTR [rax+16], 0
  00067	75 0c		 jne	 SHORT $LN8@new_contex

; 4485 :         PyErr_SetFromWindowsErr(0);

  00069	33 c9		 xor	 ecx, ecx
  0006b	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr

; 4486 :         goto free_context;

  00070	e9 68 03 00 00	 jmp	 $free_context$129405
$LN8@new_contex:

; 4487 :     }
; 4488 : 
; 4489 :     c->tstate = get_main_thread_state();

  00075	e8 00 00 00 00	 call	 get_main_thread_state
  0007a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR c$[rsp]
  0007f	48 89 81 e0 00
	00 00		 mov	 QWORD PTR [rcx+224], rax

; 4490 : 
; 4491 :     assert(c->tstate);

  00086	48 8b 44 24 40	 mov	 rax, QWORD PTR c$[rsp]
  0008b	48 83 b8 e0 00
	00 00 00	 cmp	 QWORD PTR [rax+224], 0
  00093	75 1c		 jne	 SHORT $LN12@new_contex
  00095	41 b8 8b 11 00
	00		 mov	 r8d, 4491		; 0000118bH
  0009b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  000a2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BE@NAEPLPEN@?$AAc?$AA?9?$AA?$DO?$AAt?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?$AA@
  000a9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000af	33 c0		 xor	 eax, eax
$LN12@new_contex:

; 4492 :     px = c->px = (PxState *)c->tstate->px;

  000b1	48 8b 44 24 40	 mov	 rax, QWORD PTR c$[rsp]
  000b6	48 8b 80 e0 00
	00 00		 mov	 rax, QWORD PTR [rax+224]
  000bd	48 8b 4c 24 40	 mov	 rcx, QWORD PTR c$[rsp]
  000c2	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  000c9	48 89 81 d8 00
	00 00		 mov	 QWORD PTR [rcx+216], rax
  000d0	48 8b 44 24 40	 mov	 rax, QWORD PTR c$[rsp]
  000d5	48 8b 80 d8 00
	00 00		 mov	 rax, QWORD PTR [rax+216]
  000dc	48 89 44 24 38	 mov	 QWORD PTR px$[rsp], rax

; 4493 : 
; 4494 :     if (!_PyHeap_Init(c, heapsize))

  000e1	48 8b 54 24 70	 mov	 rdx, QWORD PTR heapsize$[rsp]
  000e6	48 8b 4c 24 40	 mov	 rcx, QWORD PTR c$[rsp]
  000eb	e8 00 00 00 00	 call	 _PyHeap_Init
  000f0	48 85 c0	 test	 rax, rax
  000f3	75 05		 jne	 SHORT $LN7@new_contex

; 4495 :         goto free_heap;

  000f5	e9 d4 02 00 00	 jmp	 $free_heap$129409
$LN7@new_contex:

; 4496 : 
; 4497 :     c->refcnt = 1;

  000fa	48 8b 44 24 40	 mov	 rax, QWORD PTR c$[rsp]
  000ff	c7 80 58 33 00
	00 01 00 00 00	 mov	 DWORD PTR [rax+13144], 1

; 4498 :     c->ttl = px->ctx_ttl;

  00109	48 8b 44 24 40	 mov	 rax, QWORD PTR c$[rsp]
  0010e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR px$[rsp]
  00113	0f b7 89 8e 00
	00 00		 movzx	 ecx, WORD PTR [rcx+142]
  0011a	66 89 88 00 38
	00 00		 mov	 WORD PTR [rax+14336], cx

; 4499 : 
; 4500 :     pstate = (PyThreadState *)_PyHeap_Malloc(c, sizeof(PyThreadState), 0, 0);

  00121	45 33 c9	 xor	 r9d, r9d
  00124	45 33 c0	 xor	 r8d, r8d
  00127	ba b0 00 00 00	 mov	 edx, 176		; 000000b0H
  0012c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR c$[rsp]
  00131	e8 00 00 00 00	 call	 _PyHeap_Malloc
  00136	48 89 44 24 20	 mov	 QWORD PTR pstate$[rsp], rax

; 4501 :     c->pstate = pstate;

  0013b	48 8b 44 24 40	 mov	 rax, QWORD PTR c$[rsp]
  00140	48 8b 4c 24 20	 mov	 rcx, QWORD PTR pstate$[rsp]
  00145	48 89 88 e8 00
	00 00		 mov	 QWORD PTR [rax+232], rcx

; 4502 : 
; 4503 :     c->error = _PyHeap_NewListItem(c);

  0014c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR c$[rsp]
  00151	e8 00 00 00 00	 call	 _PyHeap_NewListItem
  00156	48 8b 4c 24 40	 mov	 rcx, QWORD PTR c$[rsp]
  0015b	48 89 81 28 33
	00 00		 mov	 QWORD PTR [rcx+13096], rax

; 4504 :     c->errback_completed = _PyHeap_NewListItem(c);

  00162	48 8b 4c 24 40	 mov	 rcx, QWORD PTR c$[rsp]
  00167	e8 00 00 00 00	 call	 _PyHeap_NewListItem
  0016c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR c$[rsp]
  00171	48 89 81 38 33
	00 00		 mov	 QWORD PTR [rcx+13112], rax

; 4505 :     c->callback_completed = _PyHeap_NewListItem(c);

  00178	48 8b 4c 24 40	 mov	 rcx, QWORD PTR c$[rsp]
  0017d	e8 00 00 00 00	 call	 _PyHeap_NewListItem
  00182	48 8b 4c 24 40	 mov	 rcx, QWORD PTR c$[rsp]
  00187	48 89 81 30 33
	00 00		 mov	 QWORD PTR [rcx+13104], rax

; 4506 : 
; 4507 :     c->outgoing = _PyHeap_NewList(c);

  0018e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR c$[rsp]
  00193	e8 00 00 00 00	 call	 _PyHeap_NewList
  00198	48 8b 4c 24 40	 mov	 rcx, QWORD PTR c$[rsp]
  0019d	48 89 81 40 33
	00 00		 mov	 QWORD PTR [rcx+13120], rax

; 4508 :     c->decrefs  = _PyHeap_NewList(c);

  001a4	48 8b 4c 24 40	 mov	 rcx, QWORD PTR c$[rsp]
  001a9	e8 00 00 00 00	 call	 _PyHeap_NewList
  001ae	48 8b 4c 24 40	 mov	 rcx, QWORD PTR c$[rsp]
  001b3	48 89 81 48 33
	00 00		 mov	 QWORD PTR [rcx+13128], rax

; 4509 : 
; 4510 :     if (!(c->error                &&
; 4511 :           c->pstate               &&
; 4512 :           c->decrefs              &&
; 4513 :           c->outgoing             &&
; 4514 :           c->errback_completed    &&
; 4515 :           c->callback_completed))

  001ba	48 8b 44 24 40	 mov	 rax, QWORD PTR c$[rsp]
  001bf	48 83 b8 28 33
	00 00 00	 cmp	 QWORD PTR [rax+13096], 0
  001c7	74 4b		 je	 SHORT $LN5@new_contex
  001c9	48 8b 44 24 40	 mov	 rax, QWORD PTR c$[rsp]
  001ce	48 83 b8 e8 00
	00 00 00	 cmp	 QWORD PTR [rax+232], 0
  001d6	74 3c		 je	 SHORT $LN5@new_contex
  001d8	48 8b 44 24 40	 mov	 rax, QWORD PTR c$[rsp]
  001dd	48 83 b8 48 33
	00 00 00	 cmp	 QWORD PTR [rax+13128], 0
  001e5	74 2d		 je	 SHORT $LN5@new_contex
  001e7	48 8b 44 24 40	 mov	 rax, QWORD PTR c$[rsp]
  001ec	48 83 b8 40 33
	00 00 00	 cmp	 QWORD PTR [rax+13120], 0
  001f4	74 1e		 je	 SHORT $LN5@new_contex
  001f6	48 8b 44 24 40	 mov	 rax, QWORD PTR c$[rsp]
  001fb	48 83 b8 38 33
	00 00 00	 cmp	 QWORD PTR [rax+13112], 0
  00203	74 0f		 je	 SHORT $LN5@new_contex
  00205	48 8b 44 24 40	 mov	 rax, QWORD PTR c$[rsp]
  0020a	48 83 b8 30 33
	00 00 00	 cmp	 QWORD PTR [rax+13104], 0
  00212	75 05		 jne	 SHORT $LN6@new_contex
$LN5@new_contex:

; 4516 :             goto free_heap;

  00214	e9 b5 01 00 00	 jmp	 $free_heap$129409
$LN6@new_contex:

; 4517 : 
; 4518 :     pstate->px = c;

  00219	48 8b 44 24 20	 mov	 rax, QWORD PTR pstate$[rsp]
  0021e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR c$[rsp]
  00223	48 89 88 a0 00
	00 00		 mov	 QWORD PTR [rax+160], rcx

; 4519 :     pstate->is_parallel_thread = 1;

  0022a	48 8b 44 24 20	 mov	 rax, QWORD PTR pstate$[rsp]
  0022f	c7 80 a8 00 00
	00 01 00 00 00	 mov	 DWORD PTR [rax+168], 1

; 4520 :     pstate->interp = c->tstate->interp;

  00239	48 8b 44 24 40	 mov	 rax, QWORD PTR c$[rsp]
  0023e	48 8b 80 e0 00
	00 00		 mov	 rax, QWORD PTR [rax+224]
  00245	48 8b 4c 24 20	 mov	 rcx, QWORD PTR pstate$[rsp]
  0024a	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0024e	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 4521 : 
; 4522 :     c->tbuf_next = c->tbuf_base = (void *)&(c->tbuf[0]);

  00252	48 8b 44 24 40	 mov	 rax, QWORD PTR c$[rsp]
  00257	48 05 90 33 00
	00		 add	 rax, 13200		; 00003390H
  0025d	48 89 44 24 50	 mov	 QWORD PTR tv171[rsp], rax
  00262	48 8b 44 24 40	 mov	 rax, QWORD PTR c$[rsp]
  00267	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tv171[rsp]
  0026c	48 89 88 90 37
	00 00		 mov	 QWORD PTR [rax+14224], rcx
  00273	48 8b 44 24 40	 mov	 rax, QWORD PTR c$[rsp]
  00278	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tv171[rsp]
  0027d	48 89 88 98 37
	00 00		 mov	 QWORD PTR [rax+14232], rcx

; 4523 :     c->tbuf_next_alignment = Px_GET_ALIGNMENT(c->tbuf_next);

  00284	48 8b 44 24 40	 mov	 rax, QWORD PTR c$[rsp]
  00289	48 8b 88 98 37
	00 00		 mov	 rcx, QWORD PTR [rax+14232]
  00290	e8 00 00 00 00	 call	 Px_GET_ALIGNMENT
  00295	48 8b 4c 24 40	 mov	 rcx, QWORD PTR c$[rsp]
  0029a	48 89 81 c0 37
	00 00		 mov	 QWORD PTR [rcx+14272], rax

; 4524 :     c->tbuf_remaining = _PX_TMPBUF_SIZE;

  002a1	48 8b 44 24 40	 mov	 rax, QWORD PTR c$[rsp]
  002a6	48 c7 80 b0 37
	00 00 00 04 00
	00		 mov	 QWORD PTR [rax+14256], 1024 ; 00000400H

; 4525 : 
; 4526 :     c->px->contexts_created++;

  002b1	48 8b 44 24 40	 mov	 rax, QWORD PTR c$[rsp]
  002b6	48 8b 80 d8 00
	00 00		 mov	 rax, QWORD PTR [rax+216]
  002bd	48 8b 80 d8 00
	00 00		 mov	 rax, QWORD PTR [rax+216]
  002c4	48 ff c0	 inc	 rax
  002c7	48 8b 4c 24 40	 mov	 rcx, QWORD PTR c$[rsp]
  002cc	48 8b 89 d8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+216]
  002d3	48 89 81 d8 00
	00 00		 mov	 QWORD PTR [rcx+216], rax

; 4527 :     InterlockedIncrement(&(c->px->contexts_active));

  002da	48 8b 44 24 40	 mov	 rax, QWORD PTR c$[rsp]
  002df	48 8b 80 d8 00
	00 00		 mov	 rax, QWORD PTR [rax+216]
  002e6	48 05 e8 00 00
	00		 add	 rax, 232		; 000000e8H
  002ec	f0 ff 00	 lock inc DWORD PTR [rax]

; 4528 : 
; 4529 :     if (!init_heap_snapshots)

  002ef	83 7c 24 78 00	 cmp	 DWORD PTR init_heap_snapshots$[rsp], 0
  002f4	75 05		 jne	 SHORT $LN4@new_contex

; 4530 :         goto done;

  002f6	e9 a4 00 00 00	 jmp	 $done$129416
$LN4@new_contex:

; 4531 : 
; 4532 :     InitializeCriticalSectionAndSpinCount(&c->heap_cs, TLS_BUF_SPINCOUNT);

  002fb	48 8b 44 24 40	 mov	 rax, QWORD PTR c$[rsp]
  00300	48 05 c8 01 00
	00		 add	 rax, 456		; 000001c8H
  00306	ba 08 00 00 00	 mov	 edx, 8
  0030b	48 8b c8	 mov	 rcx, rax
  0030e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_InitializeCriticalSectionAndSpinCount

; 4533 :     InitializeCriticalSectionAndSpinCount(&c->snapshots_cs, TLS_BUF_SPINCOUNT);

  00314	48 8b 44 24 40	 mov	 rax, QWORD PTR c$[rsp]
  00319	48 05 f8 01 00
	00		 add	 rax, 504		; 000001f8H
  0031f	ba 08 00 00 00	 mov	 edx, 8
  00324	48 8b c8	 mov	 rcx, rax
  00327	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_InitializeCriticalSectionAndSpinCount

; 4534 : 
; 4535 :     for (i = 0; i < Px_INTPTR_BITS; i++) {

  0032d	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00335	eb 0a		 jmp	 SHORT $LN3@new_contex
$LN2@new_contex:
  00337	8b 44 24 28	 mov	 eax, DWORD PTR i$[rsp]
  0033b	ff c0		 inc	 eax
  0033d	89 44 24 28	 mov	 DWORD PTR i$[rsp], eax
$LN3@new_contex:
  00341	83 7c 24 28 40	 cmp	 DWORD PTR i$[rsp], 64	; 00000040H
  00346	7d 47		 jge	 SHORT $LN1@new_contex

; 4536 :         Heap *h  = &c->snapshot[i];

  00348	48 63 44 24 28	 movsxd	 rax, DWORD PTR i$[rsp]
  0034d	48 69 c0 b8 00
	00 00		 imul	 rax, 184		; 000000b8H
  00354	48 8b 4c 24 40	 mov	 rcx, QWORD PTR c$[rsp]
  00359	48 8d 84 01 28
	04 00 00	 lea	 rax, QWORD PTR [rcx+rax+1064]
  00361	48 89 44 24 48	 mov	 QWORD PTR h$129420[rsp], rax

; 4537 :         h->bitmap_index  = i;

  00366	48 8b 44 24 48	 mov	 rax, QWORD PTR h$129420[rsp]
  0036b	0f b6 4c 24 28	 movzx	 ecx, BYTE PTR i$[rsp]
  00370	88 88 b0 00 00
	00		 mov	 BYTE PTR [rax+176], cl

; 4538 :         c->snapshots[i] = h;

  00376	48 63 44 24 28	 movsxd	 rax, DWORD PTR i$[rsp]
  0037b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR c$[rsp]
  00380	48 8b 54 24 48	 mov	 rdx, QWORD PTR h$129420[rsp]
  00385	48 89 94 c1 28
	02 00 00	 mov	 QWORD PTR [rcx+rax*8+552], rdx

; 4539 :     }

  0038d	eb a8		 jmp	 SHORT $LN2@new_contex
$LN1@new_contex:

; 4540 : 
; 4541 :     c->snapshots_bitmap = ~0;

  0038f	48 8b 44 24 40	 mov	 rax, QWORD PTR c$[rsp]
  00394	48 c7 80 20 02
	00 00 ff ff ff
	ff		 mov	 QWORD PTR [rax+544], -1
$done$129416:

; 4542 : 
; 4543 : done:
; 4544 :     s = &(c->stats);

  0039f	48 8b 44 24 40	 mov	 rax, QWORD PTR c$[rsp]
  003a4	48 05 00 01 00
	00		 add	 rax, 256		; 00000100H
  003aa	48 89 44 24 30	 mov	 QWORD PTR s$[rsp], rax

; 4545 :     s->startup_size = s->allocated;

  003af	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  003b4	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s$[rsp]
  003b9	48 8b 89 a0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+160]
  003c0	48 89 88 c0 00
	00 00		 mov	 QWORD PTR [rax+192], rcx

; 4546 : 
; 4547 :     return c;

  003c7	48 8b 44 24 40	 mov	 rax, QWORD PTR c$[rsp]
  003cc	eb 1c		 jmp	 SHORT $LN10@new_contex
$free_heap$129409:

; 4548 : 
; 4549 : free_heap:
; 4550 :     HeapDestroy(c->heap_handle);

  003ce	48 8b 44 24 40	 mov	 rax, QWORD PTR c$[rsp]
  003d3	48 8b 48 10	 mov	 rcx, QWORD PTR [rax+16]
  003d7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_HeapDestroy
$free_context$129405:

; 4551 : 
; 4552 : free_context:
; 4553 :     free(c);

  003dd	48 8b 4c 24 40	 mov	 rcx, QWORD PTR c$[rsp]
  003e2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 4554 : 
; 4555 :     return NULL;

  003e8	33 c0		 xor	 eax, eax
$LN10@new_contex:

; 4556 : }

  003ea	48 83 c4 68	 add	 rsp, 104		; 00000068H
  003ee	c3		 ret	 0
new_context ENDP
_TEXT	ENDS
PUBLIC	??_C@_1BA@KMOFMALJ@?$AA?$CB?$AAs?$AA?9?$AA?$DO?$AAc?$AAt?$AAx?$AA?$AA@ ; `string'
PUBLIC	new_context_for_socket
;	COMDAT pdata
pdata	SEGMENT
$pdata$new_context_for_socket DD imagerel $LN5
	DD	imagerel $LN5+179
	DD	imagerel $unwind$new_context_for_socket
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$new_context_for_socket DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_1BA@KMOFMALJ@?$AA?$CB?$AAs?$AA?9?$AA?$DO?$AAc?$AAt?$AAx?$AA?$AA@
CONST	SEGMENT
??_C@_1BA@KMOFMALJ@?$AA?$CB?$AAs?$AA?9?$AA?$DO?$AAc?$AAt?$AAx?$AA?$AA@ DB '!'
	DB	00H, 's', 00H, '-', 00H, '>', 00H, 'c', 00H, 't', 00H, 'x', 00H
	DB	00H, 00H					; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT new_context_for_socket
_TEXT	SEGMENT
heapsize$ = 32
c$ = 40
s$ = 64
new_context_for_socket PROC				; COMDAT

; 4560 : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 4561 :     size_t heapsize = s->recvbuf_size + s->sendbuf_size + (2 * Px_PAGE_SIZE);

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR s$[rsp]
  0000e	8b 80 60 02 00
	00		 mov	 eax, DWORD PTR [rax+608]
  00014	48 8b 4c 24 40	 mov	 rcx, QWORD PTR s$[rsp]
  00019	8b 89 64 02 00
	00		 mov	 ecx, DWORD PTR [rcx+612]
  0001f	8d 84 08 00 20
	00 00		 lea	 eax, DWORD PTR [rax+rcx+8192]
  00026	48 98		 cdqe
  00028	48 89 44 24 20	 mov	 QWORD PTR heapsize$[rsp], rax

; 4562 :     Context *c;
; 4563 :     assert(!s->ctx);

  0002d	48 8b 44 24 40	 mov	 rax, QWORD PTR s$[rsp]
  00032	48 83 b8 00 02
	00 00 00	 cmp	 QWORD PTR [rax+512], 0
  0003a	74 1c		 je	 SHORT $LN4@new_contex@2
  0003c	41 b8 d3 11 00
	00		 mov	 r8d, 4563		; 000011d3H
  00042	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00049	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BA@KMOFMALJ@?$AA?$CB?$AAs?$AA?9?$AA?$DO?$AAc?$AAt?$AAx?$AA?$AA@
  00050	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00056	33 c0		 xor	 eax, eax
$LN4@new_contex@2:

; 4564 :     c = new_context(heapsize, 1);

  00058	ba 01 00 00 00	 mov	 edx, 1
  0005d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR heapsize$[rsp]
  00062	e8 00 00 00 00	 call	 new_context
  00067	48 89 44 24 28	 mov	 QWORD PTR c$[rsp], rax

; 4565 :     if (!c)

  0006c	48 83 7c 24 28
	00		 cmp	 QWORD PTR c$[rsp], 0
  00072	75 04		 jne	 SHORT $LN1@new_contex@2

; 4566 :         return NULL;

  00074	33 c0		 xor	 eax, eax
  00076	eb 36		 jmp	 SHORT $LN2@new_contex@2
$LN1@new_contex@2:

; 4567 : 
; 4568 :     c->io_type = Px_IOTYPE_SOCKET;

  00078	48 8b 44 24 28	 mov	 rax, QWORD PTR c$[rsp]
  0007d	c7 80 80 32 00
	00 02 00 00 00	 mov	 DWORD PTR [rax+12928], 2

; 4569 :     /*c->context_type = Px_CTXTYPE_SOCK;*/
; 4570 :     c->io_obj = (PyObject *)s;

  00087	48 8b 44 24 28	 mov	 rax, QWORD PTR c$[rsp]
  0008c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR s$[rsp]
  00091	48 89 88 a8 32
	00 00		 mov	 QWORD PTR [rax+12968], rcx

; 4571 :     s->ctx = c;

  00098	48 8b 44 24 40	 mov	 rax, QWORD PTR s$[rsp]
  0009d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR c$[rsp]
  000a2	48 89 88 00 02
	00 00		 mov	 QWORD PTR [rax+512], rcx

; 4572 :     return c;

  000a9	48 8b 44 24 28	 mov	 rax, QWORD PTR c$[rsp]
$LN2@new_contex@2:

; 4573 : }

  000ae	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000b2	c3		 ret	 0
new_context_for_socket ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_async_submit_work DD imagerel $LN9
	DD	imagerel $LN9+407
	DD	imagerel $unwind$_async_submit_work
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_async_submit_work DD 010e01H
	DD	0820eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _async_submit_work
_TEXT	SEGMENT
px$ = 32
c$ = 40
result$ = 48
item$ = 56
self$ = 80
args$ = 88
_async_submit_work PROC					; COMDAT

; 4577 : {

$LN9:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 4578 :     PyObject *result = NULL;

  0000e	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR result$[rsp], 0

; 4579 :     Context  *c;
; 4580 :     PxState  *px;
; 4581 :     PxListItem *item;
; 4582 : 
; 4583 :     c = new_context(0, 0);

  00017	33 d2		 xor	 edx, edx
  00019	33 c9		 xor	 ecx, ecx
  0001b	e8 00 00 00 00	 call	 new_context
  00020	48 89 44 24 28	 mov	 QWORD PTR c$[rsp], rax

; 4584 :     if (!c)

  00025	48 83 7c 24 28
	00		 cmp	 QWORD PTR c$[rsp], 0
  0002b	75 07		 jne	 SHORT $LN5@async_subm

; 4585 :         return NULL;

  0002d	33 c0		 xor	 eax, eax
  0002f	e9 5e 01 00 00	 jmp	 $LN6@async_subm
$LN5@async_subm:

; 4586 : 
; 4587 :     px = c->px;

  00034	48 8b 44 24 28	 mov	 rax, QWORD PTR c$[rsp]
  00039	48 8b 80 d8 00
	00 00		 mov	 rax, QWORD PTR [rax+216]
  00040	48 89 44 24 20	 mov	 QWORD PTR px$[rsp], rax

; 4588 : 
; 4589 :     if (!extract_args(args, c))

  00045	48 8b 54 24 28	 mov	 rdx, QWORD PTR c$[rsp]
  0004a	48 8b 4c 24 58	 mov	 rcx, QWORD PTR args$[rsp]
  0004f	e8 00 00 00 00	 call	 extract_args
  00054	85 c0		 test	 eax, eax
  00056	75 05		 jne	 SHORT $LN4@async_subm

; 4590 :         goto free_context;

  00058	e9 e8 00 00 00	 jmp	 $free_context$129447
$LN4@async_subm:

; 4591 : 
; 4592 :     item = _PyHeap_NewListItem(c);

  0005d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR c$[rsp]
  00062	e8 00 00 00 00	 call	 _PyHeap_NewListItem
  00067	48 89 44 24 38	 mov	 QWORD PTR item$[rsp], rax

; 4593 :     if (!item)

  0006c	48 83 7c 24 38
	00		 cmp	 QWORD PTR item$[rsp], 0
  00072	75 05		 jne	 SHORT $LN3@async_subm

; 4594 :         goto free_context;

  00074	e9 cc 00 00 00	 jmp	 $free_context$129447
$LN3@async_subm:

; 4595 : 
; 4596 :     item->from = c;

  00079	48 8b 44 24 38	 mov	 rax, QWORD PTR item$[rsp]
  0007e	48 8b 4c 24 28	 mov	 rcx, QWORD PTR c$[rsp]
  00083	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 4597 : 
; 4598 :     InterlockedIncrement64(&(px->submitted));

  00087	48 8b 44 24 20	 mov	 rax, QWORD PTR px$[rsp]
  0008c	48 05 08 01 00
	00		 add	 rax, 264		; 00000108H
  00092	f0 48 ff 00	 lock inc QWORD PTR [rax]

; 4599 :     InterlockedIncrement(&(px->pending));

  00096	48 8b 44 24 20	 mov	 rax, QWORD PTR px$[rsp]
  0009b	48 05 10 01 00
	00		 add	 rax, 272		; 00000110H
  000a1	f0 ff 00	 lock inc DWORD PTR [rax]

; 4600 :     InterlockedIncrement(&(px->active));

  000a4	48 8b 44 24 20	 mov	 rax, QWORD PTR px$[rsp]
  000a9	48 05 f8 00 00
	00		 add	 rax, 248		; 000000f8H
  000af	f0 ff 00	 lock inc DWORD PTR [rax]

; 4601 :     c->stats.submitted = _Py_rdtsc();

  000b2	0f 31		 rdtsc
  000b4	48 c1 e2 20	 shl	 rdx, 32			; 00000020H
  000b8	48 0b c2	 or	 rax, rdx
  000bb	48 8b 4c 24 28	 mov	 rcx, QWORD PTR c$[rsp]
  000c0	48 89 81 00 01
	00 00		 mov	 QWORD PTR [rcx+256], rax

; 4602 : 
; 4603 :     if (!submit_work(c))

  000c7	48 8b 4c 24 28	 mov	 rcx, QWORD PTR c$[rsp]
  000cc	e8 00 00 00 00	 call	 submit_work
  000d1	85 c0		 test	 eax, eax
  000d3	75 02		 jne	 SHORT $LN2@async_subm

; 4604 :         goto error;

  000d5	eb 24		 jmp	 SHORT $error$129450
$LN2@async_subm:

; 4605 : 
; 4606 :     incref_args(c);

  000d7	48 8b 4c 24 28	 mov	 rcx, QWORD PTR c$[rsp]
  000dc	e8 00 00 00 00	 call	 incref_args

; 4607 : 
; 4608 :     result = (Py_INCREF(Py_None), Py_None);

  000e1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  000e8	e8 00 00 00 00	 call	 _Py_IncRef
  000ed	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000f4	48 89 44 24 30	 mov	 QWORD PTR result$[rsp], rax

; 4609 :     goto done;

  000f9	eb 64		 jmp	 SHORT $done$129452
$error$129450:

; 4610 : 
; 4611 : error:
; 4612 :     InterlockedDecrement(&(c->px->contexts_active));

  000fb	48 8b 44 24 28	 mov	 rax, QWORD PTR c$[rsp]
  00100	48 8b 80 d8 00
	00 00		 mov	 rax, QWORD PTR [rax+216]
  00107	48 05 e8 00 00
	00		 add	 rax, 232		; 000000e8H
  0010d	f0 ff 08	 lock dec DWORD PTR [rax]

; 4613 :     InterlockedDecrement(&(px->pending));

  00110	48 8b 44 24 20	 mov	 rax, QWORD PTR px$[rsp]
  00115	48 05 10 01 00
	00		 add	 rax, 272		; 00000110H
  0011b	f0 ff 08	 lock dec DWORD PTR [rax]

; 4614 :     InterlockedDecrement(&(px->active));

  0011e	48 8b 44 24 20	 mov	 rax, QWORD PTR px$[rsp]
  00123	48 05 f8 00 00
	00		 add	 rax, 248		; 000000f8H
  00129	f0 ff 08	 lock dec DWORD PTR [rax]

; 4615 :     InterlockedIncrement64(&(px->done));

  0012c	48 8b 44 24 20	 mov	 rax, QWORD PTR px$[rsp]
  00131	48 05 18 01 00
	00		 add	 rax, 280		; 00000118H
  00137	f0 48 ff 00	 lock inc QWORD PTR [rax]

; 4616 :     decref_args(c);

  0013b	48 8b 4c 24 28	 mov	 rcx, QWORD PTR c$[rsp]
  00140	e8 00 00 00 00	 call	 decref_args
$free_context$129447:

; 4617 : 
; 4618 : free_context:
; 4619 :     HeapDestroy(c->heap_handle);

  00145	48 8b 44 24 28	 mov	 rax, QWORD PTR c$[rsp]
  0014a	48 8b 48 10	 mov	 rcx, QWORD PTR [rax+16]
  0014e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_HeapDestroy

; 4620 :     free(c);

  00154	48 8b 4c 24 28	 mov	 rcx, QWORD PTR c$[rsp]
  00159	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$done$129452:

; 4621 : 
; 4622 : done:
; 4623 :     if (!result)

  0015f	48 83 7c 24 30
	00		 cmp	 QWORD PTR result$[rsp], 0
  00165	75 26		 jne	 SHORT $LN1@async_subm

; 4624 :         assert(PyErr_Occurred());

  00167	e8 00 00 00 00	 call	 PyErr_Occurred
  0016c	48 85 c0	 test	 rax, rax
  0016f	75 1c		 jne	 SHORT $LN8@async_subm
  00171	41 b8 10 12 00
	00		 mov	 r8d, 4624		; 00001210H
  00177	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0017e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CC@DNBCFJEA@?$AAP?$AAy?$AAE?$AAr?$AAr?$AA_?$AAO?$AAc?$AAc?$AAu?$AAr?$AAr?$AAe?$AAd?$AA?$CI?$AA?$CJ?$AA?$AA@
  00185	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0018b	33 c0		 xor	 eax, eax
$LN8@async_subm:
$LN1@async_subm:

; 4625 :     return result;

  0018d	48 8b 44 24 30	 mov	 rax, QWORD PTR result$[rsp]
$LN6@async_subm:

; 4626 : }

  00192	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00196	c3		 ret	 0
_async_submit_work ENDP
_TEXT	ENDS
PUBLIC	_async_enabled
; Function compile flags: /Odtp
;	COMDAT _async_enabled
_TEXT	SEGMENT
self$ = 8
args$ = 16
_async_enabled PROC					; COMDAT

; 4644 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 4645 :     /*
; 4646 :     if (!PyArg_ParseTuple(args, "O!:socket", PySocketModule.Sock_Type, &sock))
; 4647 :         return NULL;
; 4648 :         */
; 4649 :     return NULL;

  0000a	33 c0		 xor	 eax, eax

; 4650 : }

  0000c	c3		 ret	 0
_async_enabled ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CM@MCECGMBP@_async?4run?$CI?$CJ?3?5no?5more?5events?0?5re@ ; `string'
PUBLIC	??_C@_0DA@KGEAOAAG@_async?4run_once?5raised?5exception@ ; `string'
PUBLIC	??_C@_1CK@NMPGPCEH@?$AAa?$AAc?$AAt?$AAi?$AAv?$AAe?$AA_?$AAc?$AAo?$AAn?$AAt?$AAe?$AAx?$AAt?$AAs?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_0DA@BGCBCAKL@_async?4run?$CI?$CFd?$CJ?5?$FL?$CFd?1?$CFd?$FN?5?$CIhogs?3?5?$CFd@ ; `string'
EXTRN	PySys_FormatStdout:PROC
EXTRN	Py_VerboseFlag:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$_async_run DD imagerel $LN13
	DD	imagerel $LN13+332
	DD	imagerel $unwind$_async_run
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_async_run DD 010e01H
	DD	0a20eH
xdata	ENDS
;	COMDAT ??_C@_0CM@MCECGMBP@_async?4run?$CI?$CJ?3?5no?5more?5events?0?5re@
CONST	SEGMENT
??_C@_0CM@MCECGMBP@_async?4run?$CI?$CJ?3?5no?5more?5events?0?5re@ DB '_as'
	DB	'ync.run(): no more events, returning...', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@KGEAOAAG@_async?4run_once?5raised?5exception@
CONST	SEGMENT
??_C@_0DA@KGEAOAAG@_async?4run_once?5raised?5exception@ DB '_async.run_on'
	DB	'ce raised exception, returning...', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@NMPGPCEH@?$AAa?$AAc?$AAt?$AAi?$AAv?$AAe?$AA_?$AAc?$AAo?$AAn?$AAt?$AAe?$AAx?$AAt?$AAs?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1CK@NMPGPCEH@?$AAa?$AAc?$AAt?$AAi?$AAv?$AAe?$AA_?$AAc?$AAo?$AAn?$AAt?$AAe?$AAx?$AAt?$AAs?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@ DB 'a'
	DB	00H, 'c', 00H, 't', 00H, 'i', 00H, 'v', 00H, 'e', 00H, '_', 00H
	DB	'c', 00H, 'o', 00H, 'n', 00H, 't', 00H, 'e', 00H, 'x', 00H, 't'
	DB	00H, 's', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@BGCBCAKL@_async?4run?$CI?$CFd?$CJ?5?$FL?$CFd?1?$CFd?$FN?5?$CIhogs?3?5?$CFd@
CONST	SEGMENT
??_C@_0DA@BGCBCAKL@_async?4run?$CI?$CFd?$CJ?5?$FL?$CFd?1?$CFd?$FN?5?$CIhogs?3?5?$CFd@ DB '_'
	DB	'async.run(%d) [%d/%d] (hogs: %d, ioloops: %d)', 0aH, 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _async_run
_TEXT	SEGMENT
active_contexts$ = 48
i$ = 52
px$ = 56
tstate$ = 64
persisted_contexts$ = 72
self$ = 96
args$ = 104
_async_run PROC						; COMDAT

; 4664 : {

$LN13:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 4665 :     PyThreadState *tstate = get_main_thread_state();

  0000e	e8 00 00 00 00	 call	 get_main_thread_state
  00013	48 89 44 24 40	 mov	 QWORD PTR tstate$[rsp], rax

; 4666 :     PxState *px = PXSTATE();

  00018	e8 00 00 00 00	 call	 PXSTATE
  0001d	48 89 44 24 38	 mov	 QWORD PTR px$[rsp], rax

; 4667 :     int i = 0;

  00022	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0

; 4668 :     long active_contexts = 0;

  0002a	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR active_contexts$[rsp], 0

; 4669 :     long persisted_contexts = 0;

  00032	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR persisted_contexts$[rsp], 0
$LN8@async_run:

; 4670 :     do {
; 4671 :         i++;

  0003a	8b 44 24 34	 mov	 eax, DWORD PTR i$[rsp]
  0003e	ff c0		 inc	 eax
  00040	89 44 24 34	 mov	 DWORD PTR i$[rsp], eax

; 4672 :         active_contexts = px->contexts_active;

  00044	48 8b 44 24 38	 mov	 rax, QWORD PTR px$[rsp]
  00049	8b 80 e8 00 00
	00		 mov	 eax, DWORD PTR [rax+232]
  0004f	89 44 24 30	 mov	 DWORD PTR active_contexts$[rsp], eax

; 4673 :         persisted_contexts = px->contexts_persisted;

  00053	48 8b 44 24 38	 mov	 rax, QWORD PTR px$[rsp]
  00058	8b 80 ec 00 00
	00		 mov	 eax, DWORD PTR [rax+236]
  0005e	89 44 24 48	 mov	 DWORD PTR persisted_contexts$[rsp], eax

; 4674 :         if (Py_VerboseFlag)

  00062	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR Py_VerboseFlag, 0
  00069	74 2e		 je	 SHORT $LN5@async_run

; 4675 :             PySys_FormatStdout("_async.run(%d) [%d/%d] "
; 4676 :                                "(hogs: %d, ioloops: %d)\n",
; 4677 :                                i, active_contexts, persisted_contexts,
; 4678 :                                _PxSocket_ActiveHogs, _PxSocket_ActiveIOLoops);

  0006b	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR _PxSocket_ActiveIOLoops
  00071	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00075	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR _PxSocket_ActiveHogs
  0007b	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0007f	44 8b 4c 24 48	 mov	 r9d, DWORD PTR persisted_contexts$[rsp]
  00084	44 8b 44 24 30	 mov	 r8d, DWORD PTR active_contexts$[rsp]
  00089	8b 54 24 34	 mov	 edx, DWORD PTR i$[rsp]
  0008d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DA@BGCBCAKL@_async?4run?$CI?$CFd?$CJ?5?$FL?$CFd?1?$CFd?$FN?5?$CIhogs?3?5?$CFd@
  00094	e8 00 00 00 00	 call	 PySys_FormatStdout
$LN5@async_run:

; 4679 :         assert(active_contexts >= 0);

  00099	83 7c 24 30 00	 cmp	 DWORD PTR active_contexts$[rsp], 0
  0009e	7d 1c		 jge	 SHORT $LN11@async_run
  000a0	41 b8 47 12 00
	00		 mov	 r8d, 4679		; 00001247H
  000a6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  000ad	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@NMPGPCEH@?$AAa?$AAc?$AAt?$AAi?$AAv?$AAe?$AA_?$AAc?$AAo?$AAn?$AAt?$AAe?$AAx?$AAt?$AAs?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@
  000b4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000ba	33 c0		 xor	 eax, eax
$LN11@async_run:

; 4680 :         if (active_contexts == 0)

  000bc	83 7c 24 30 00	 cmp	 DWORD PTR active_contexts$[rsp], 0
  000c1	75 02		 jne	 SHORT $LN4@async_run

; 4681 :             break;

  000c3	eb 5a		 jmp	 SHORT $LN6@async_run
$LN4@async_run:

; 4682 :         if (!_async_run_once(NULL, NULL)) {

  000c5	33 d2		 xor	 edx, edx
  000c7	33 c9		 xor	 ecx, ecx
  000c9	e8 00 00 00 00	 call	 _async_run_once
  000ce	48 85 c0	 test	 rax, rax
  000d1	75 41		 jne	 SHORT $LN3@async_run

; 4683 :             assert(tstate->curexc_type != NULL);

  000d3	48 8b 44 24 40	 mov	 rax, QWORD PTR tstate$[rsp]
  000d8	48 83 78 48 00	 cmp	 QWORD PTR [rax+72], 0
  000dd	75 1c		 jne	 SHORT $LN12@async_run
  000df	41 b8 4b 12 00
	00		 mov	 r8d, 4683		; 0000124bH
  000e5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  000ec	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DI@EOJHILJI@?$AAt?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAe?$AAx?$AAc?$AA_?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
  000f3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000f9	33 c0		 xor	 eax, eax
$LN12@async_run:

; 4684 :             if (Py_VerboseFlag)

  000fb	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR Py_VerboseFlag, 0
  00102	74 0c		 je	 SHORT $LN2@async_run

; 4685 :                 PySys_FormatStdout("_async.run_once raised "
; 4686 :                                    "exception, returning...\n");

  00104	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DA@KGEAOAAG@_async?4run_once?5raised?5exception@
  0010b	e8 00 00 00 00	 call	 PySys_FormatStdout
$LN2@async_run:

; 4687 :             return NULL;

  00110	33 c0		 xor	 eax, eax
  00112	eb 33		 jmp	 SHORT $LN9@async_run
$LN3@async_run:

; 4688 :         }
; 4689 :     } while (1);

  00114	33 c0		 xor	 eax, eax
  00116	83 f8 01	 cmp	 eax, 1
  00119	0f 85 1b ff ff
	ff		 jne	 $LN8@async_run
$LN6@async_run:

; 4690 : 
; 4691 :     if (Py_VerboseFlag)

  0011f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR Py_VerboseFlag, 0
  00126	74 0c		 je	 SHORT $LN1@async_run

; 4692 :         PySys_FormatStdout("_async.run(): no more events, returning...\n");

  00128	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CM@MCECGMBP@_async?4run?$CI?$CJ?3?5no?5more?5events?0?5re@
  0012f	e8 00 00 00 00	 call	 PySys_FormatStdout
$LN1@async_run:

; 4693 :     Py_RETURN_NONE;

  00134	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  0013b	e8 00 00 00 00	 call	 _Py_IncRef
  00140	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
$LN9@async_run:

; 4694 : }

  00147	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0014b	c3		 ret	 0
_async_run ENDP
_TEXT	ENDS
EXTRN	__imp_SetThreadpoolWait:PROC
EXTRN	__imp_CreateThreadpoolWait:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_async_submit_wait DD imagerel $LN9
	DD	imagerel $LN9+432
	DD	imagerel $unwind$_async_submit_wait
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_async_submit_wait DD 010e01H
	DD	0820eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _async_submit_wait
_TEXT	SEGMENT
px$ = 32
c$ = 40
result$ = 48
cb$ = 56
self$ = 80
args$ = 88
_async_submit_wait PROC					; COMDAT

; 4698 : {

$LN9:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 4699 :     PyObject *result = NULL;

  0000e	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR result$[rsp], 0

; 4700 :     Context  *c;
; 4701 :     PxState  *px;
; 4702 :     PTP_WAIT_CALLBACK cb;
; 4703 : 
; 4704 :     c = new_context(0, 0);

  00017	33 d2		 xor	 edx, edx
  00019	33 c9		 xor	 ecx, ecx
  0001b	e8 00 00 00 00	 call	 new_context
  00020	48 89 44 24 28	 mov	 QWORD PTR c$[rsp], rax

; 4705 :     if (!c)

  00025	48 83 7c 24 28
	00		 cmp	 QWORD PTR c$[rsp], 0
  0002b	75 07		 jne	 SHORT $LN5@async_subm@2

; 4706 :         return NULL;

  0002d	33 c0		 xor	 eax, eax
  0002f	e9 77 01 00 00	 jmp	 $LN6@async_subm@2
$LN5@async_subm@2:

; 4707 : 
; 4708 :     px = c->px;

  00034	48 8b 44 24 28	 mov	 rax, QWORD PTR c$[rsp]
  00039	48 8b 80 d8 00
	00 00		 mov	 rax, QWORD PTR [rax+216]
  00040	48 89 44 24 20	 mov	 QWORD PTR px$[rsp], rax

; 4709 : 
; 4710 :     if (!extract_waitobj_args(args, c))

  00045	48 8b 54 24 28	 mov	 rdx, QWORD PTR c$[rsp]
  0004a	48 8b 4c 24 58	 mov	 rcx, QWORD PTR args$[rsp]
  0004f	e8 00 00 00 00	 call	 extract_waitobj_args
  00054	85 c0		 test	 eax, eax
  00056	75 05		 jne	 SHORT $LN4@async_subm@2

; 4711 :         goto free_context;

  00058	e9 ec 00 00 00	 jmp	 $free_context$129505
$LN4@async_subm@2:

; 4712 : 
; 4713 :     cb = _PyParallel_WaitCallback;

  0005d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyParallel_WaitCallback
  00064	48 89 44 24 38	 mov	 QWORD PTR cb$[rsp], rax

; 4714 :     c->tp_wait = CreateThreadpoolWait(cb, c, NULL);

  00069	45 33 c0	 xor	 r8d, r8d
  0006c	48 8b 54 24 28	 mov	 rdx, QWORD PTR c$[rsp]
  00071	48 8b 4c 24 38	 mov	 rcx, QWORD PTR cb$[rsp]
  00076	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateThreadpoolWait
  0007c	48 8b 4c 24 28	 mov	 rcx, QWORD PTR c$[rsp]
  00081	48 89 81 68 32
	00 00		 mov	 QWORD PTR [rcx+12904], rax

; 4715 :     if (!c->tp_wait) {

  00088	48 8b 44 24 28	 mov	 rax, QWORD PTR c$[rsp]
  0008d	48 83 b8 68 32
	00 00 00	 cmp	 QWORD PTR [rax+12904], 0
  00095	75 0c		 jne	 SHORT $LN3@async_subm@2

; 4716 :         PyErr_SetFromWindowsErr(0);

  00097	33 c9		 xor	 ecx, ecx
  00099	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr

; 4717 :         goto free_context;

  0009e	e9 a6 00 00 00	 jmp	 $free_context$129505
$LN3@async_subm@2:

; 4718 :     }
; 4719 : 
; 4720 :     if (!_PyEvent_TryCreate(c->waitobj))

  000a3	48 8b 44 24 28	 mov	 rax, QWORD PTR c$[rsp]
  000a8	48 8b 88 28 32
	00 00		 mov	 rcx, QWORD PTR [rax+12840]
  000af	e8 00 00 00 00	 call	 _PyEvent_TryCreate
  000b4	0f be c0	 movsx	 eax, al
  000b7	85 c0		 test	 eax, eax
  000b9	75 05		 jne	 SHORT $LN2@async_subm@2

; 4721 :         goto free_context;

  000bb	e9 89 00 00 00	 jmp	 $free_context$129505
$LN2@async_subm@2:

; 4722 : 
; 4723 :     SetThreadpoolWait(c->tp_wait, Py_EVENT(c->waitobj), NULL);

  000c0	48 8b 44 24 28	 mov	 rax, QWORD PTR c$[rsp]
  000c5	48 8b 80 28 32
	00 00		 mov	 rax, QWORD PTR [rax+12840]
  000cc	45 33 c0	 xor	 r8d, r8d
  000cf	48 8b 50 30	 mov	 rdx, QWORD PTR [rax+48]
  000d3	48 8b 44 24 28	 mov	 rax, QWORD PTR c$[rsp]
  000d8	48 8b 88 68 32
	00 00		 mov	 rcx, QWORD PTR [rax+12904]
  000df	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SetThreadpoolWait

; 4724 : 
; 4725 :     InterlockedIncrement64(&(px->waits_submitted));

  000e5	48 8b 44 24 20	 mov	 rax, QWORD PTR px$[rsp]
  000ea	48 05 20 01 00
	00		 add	 rax, 288		; 00000120H
  000f0	f0 48 ff 00	 lock inc QWORD PTR [rax]

; 4726 :     InterlockedIncrement(&(px->waits_pending));

  000f4	48 8b 44 24 20	 mov	 rax, QWORD PTR px$[rsp]
  000f9	48 05 28 01 00
	00		 add	 rax, 296		; 00000128H
  000ff	f0 ff 00	 lock inc DWORD PTR [rax]

; 4727 :     InterlockedIncrement(&(px->active));

  00102	48 8b 44 24 20	 mov	 rax, QWORD PTR px$[rsp]
  00107	48 05 f8 00 00
	00		 add	 rax, 248		; 000000f8H
  0010d	f0 ff 00	 lock inc DWORD PTR [rax]

; 4728 :     c->stats.submitted = _Py_rdtsc();

  00110	0f 31		 rdtsc
  00112	48 c1 e2 20	 shl	 rdx, 32			; 00000020H
  00116	48 0b c2	 or	 rax, rdx
  00119	48 8b 4c 24 28	 mov	 rcx, QWORD PTR c$[rsp]
  0011e	48 89 81 00 01
	00 00		 mov	 QWORD PTR [rcx+256], rax

; 4729 : 
; 4730 :     incref_waitobj_args(c);

  00125	48 8b 4c 24 28	 mov	 rcx, QWORD PTR c$[rsp]
  0012a	e8 00 00 00 00	 call	 incref_waitobj_args

; 4731 : 
; 4732 :     result = (Py_INCREF(Py_None), Py_None);

  0012f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00136	e8 00 00 00 00	 call	 _Py_IncRef
  0013b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00142	48 89 44 24 30	 mov	 QWORD PTR result$[rsp], rax

; 4733 :     goto done;

  00147	eb 2f		 jmp	 SHORT $done$129513
$free_context$129505:

; 4734 : 
; 4735 : free_context:
; 4736 :     InterlockedDecrement(&(c->px->contexts_active));

  00149	48 8b 44 24 28	 mov	 rax, QWORD PTR c$[rsp]
  0014e	48 8b 80 d8 00
	00 00		 mov	 rax, QWORD PTR [rax+216]
  00155	48 05 e8 00 00
	00		 add	 rax, 232		; 000000e8H
  0015b	f0 ff 08	 lock dec DWORD PTR [rax]

; 4737 :     HeapDestroy(c->heap_handle);

  0015e	48 8b 44 24 28	 mov	 rax, QWORD PTR c$[rsp]
  00163	48 8b 48 10	 mov	 rcx, QWORD PTR [rax+16]
  00167	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_HeapDestroy

; 4738 :     free(c);

  0016d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR c$[rsp]
  00172	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$done$129513:

; 4739 : 
; 4740 : done:
; 4741 :     if (!result)

  00178	48 83 7c 24 30
	00		 cmp	 QWORD PTR result$[rsp], 0
  0017e	75 26		 jne	 SHORT $LN1@async_subm@2

; 4742 :         assert(PyErr_Occurred());

  00180	e8 00 00 00 00	 call	 PyErr_Occurred
  00185	48 85 c0	 test	 rax, rax
  00188	75 1c		 jne	 SHORT $LN8@async_subm@2
  0018a	41 b8 86 12 00
	00		 mov	 r8d, 4742		; 00001286H
  00190	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00197	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CC@DNBCFJEA@?$AAP?$AAy?$AAE?$AAr?$AAr?$AA_?$AAO?$AAc?$AAc?$AAu?$AAr?$AAr?$AAe?$AAd?$AA?$CI?$AA?$CJ?$AA?$AA@
  0019e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001a4	33 c0		 xor	 eax, eax
$LN8@async_subm@2:
$LN1@async_subm@2:

; 4743 :     return result;

  001a6	48 8b 44 24 30	 mov	 rax, QWORD PTR result$[rsp]
$LN6@async_subm@2:

; 4744 : }

  001ab	48 83 c4 48	 add	 rsp, 72			; 00000048H
  001af	c3		 ret	 0
_async_submit_wait ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_async_submit_timer DD imagerel $LN3
	DD	imagerel $LN3+31
	DD	imagerel $unwind$_async_submit_timer
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_async_submit_timer DD 010e01H
	DD	0220eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _async_submit_timer
_TEXT	SEGMENT
result$ = 0
self$ = 32
args$ = 40
_async_submit_timer PROC				; COMDAT

; 4748 : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 18	 sub	 rsp, 24

; 4749 :     PyObject *result = NULL;

  0000e	48 c7 04 24 00
	00 00 00	 mov	 QWORD PTR result$[rsp], 0

; 4750 : 
; 4751 :     return result;

  00016	48 8b 04 24	 mov	 rax, QWORD PTR result$[rsp]

; 4752 : }

  0001a	48 83 c4 18	 add	 rsp, 24
  0001e	c3		 ret	 0
_async_submit_timer ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _async_submit_io
_TEXT	SEGMENT
self$ = 8
args$ = 16
_async_submit_io PROC					; COMDAT

; 4756 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 4757 :     return NULL;

  0000a	33 c0		 xor	 eax, eax

; 4758 : }

  0000c	c3		 ret	 0
_async_submit_io ENDP
_TEXT	ENDS
PUBLIC	??_C@_1EO@HBFHMDEO@?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAP?$AAy?$AA_?$AAN?$AAo?$AAn?$AAe?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAP@ ; `string'
PUBLIC	??_C@_0CE@FBLDCNGC@file?5io?5callbacks?5not?5yet?5suppor@ ; `string'
PUBLIC	??_C@_0CI@EMOJKEDA@_async?4write?$CI?$CJ?5completed?5synchro@ ; `string'
PUBLIC	??_C@_0CD@FIHGCGC@file?5io?5errbacks?5not?5yet?5support@ ; `string'
PUBLIC	??_C@_1CK@HDFNHGIH@?$AAP?$AAx?$AAI?$AAO?$AA_?$AAI?$AAS?$AA_?$AAP?$AAR?$AAE?$AAA?$AAL?$AAL?$AAO?$AAC?$AA?$CI?$AAi?$AAo?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_15CIDOHJL@?$AAi?$AAo?$AA?$AA@		; `string'
PUBLIC	??_C@_0CG@EOHNNJGF@file?5was?5not?5opened?5with?5async?4o@ ; `string'
PUBLIC	??_C@_1BA@EPAMGDKH@?$AAi?$AAs?$AA_?$AAf?$AAi?$AAl?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_0BK@EDPKIFAA@sockets?5not?5supported?5yet?$AA@ ; `string'
PUBLIC	??_C@_1DA@LIPFDLCI@?$AA?$CB?$AA?$CI?$AAi?$AAs?$AA_?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AAs?$AA_?$AAs?$AAo?$AAc?$AAk?$AAe?$AAt?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_05IHFJLCDG@Oy?$CKOO?$AA@			; `string'
EXTRN	PySys_WriteStdout:PROC
EXTRN	__imp_CancelThreadpoolIo:PROC
EXTRN	__imp_GetLastError:PROC
EXTRN	__imp_WriteFile:PROC
EXTRN	__imp_StartThreadpoolIo:PROC
EXTRN	PyBuffer_Release:PROC
EXTRN	PyErr_SetExcFromWindowsErr:PROC
EXTRN	PxList_Free:PROC
EXTRN	PxList_Malloc:PROC
EXTRN	__imp_CreateThreadpoolIo:PROC
EXTRN	PyArg_ParseTuple:PROC
_BSS	SEGMENT
PyExc_AsyncIOBuffersExhaustedError DQ 01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_async_submit_write_io DD imagerel $LN55
	DD	imagerel $LN55+2313
	DD	imagerel $unwind$_async_submit_write_io
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_async_submit_write_io DD 021101H
	DD	0250111H
xdata	ENDS
;	COMDAT ??_C@_1EO@HBFHMDEO@?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAP?$AAy?$AA_?$AAN?$AAo?$AAn?$AAe?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAP@
CONST	SEGMENT
??_C@_1EO@HBFHMDEO@?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAP?$AAy?$AA_?$AAN?$AAo?$AAn?$AAe?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAP@ DB 'r'
	DB	00H, 'e', 00H, 's', 00H, 'u', 00H, 'l', 00H, 't', 00H, ' ', 00H
	DB	'=', 00H, '=', 00H, ' ', 00H, 'P', 00H, 'y', 00H, '_', 00H, 'N'
	DB	00H, 'o', 00H, 'n', 00H, 'e', 00H, ' ', 00H, '|', 00H, '|', 00H
	DB	' ', 00H, 'r', 00H, 'e', 00H, 's', 00H, 'u', 00H, 'l', 00H, 't'
	DB	00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'P', 00H, 'y', 00H
	DB	'_', 00H, 'T', 00H, 'r', 00H, 'u', 00H, 'e', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@FBLDCNGC@file?5io?5callbacks?5not?5yet?5suppor@
CONST	SEGMENT
??_C@_0CE@FBLDCNGC@file?5io?5callbacks?5not?5yet?5suppor@ DB 'file io cal'
	DB	'lbacks not yet supported', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@EMOJKEDA@_async?4write?$CI?$CJ?5completed?5synchro@
CONST	SEGMENT
??_C@_0CI@EMOJKEDA@_async?4write?$CI?$CJ?5completed?5synchro@ DB '_async.'
	DB	'write() completed synchronously', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@FIHGCGC@file?5io?5errbacks?5not?5yet?5support@
CONST	SEGMENT
??_C@_0CD@FIHGCGC@file?5io?5errbacks?5not?5yet?5support@ DB 'file io errb'
	DB	'acks not yet supported', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@HDFNHGIH@?$AAP?$AAx?$AAI?$AAO?$AA_?$AAI?$AAS?$AA_?$AAP?$AAR?$AAE?$AAA?$AAL?$AAL?$AAO?$AAC?$AA?$CI?$AAi?$AAo?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CK@HDFNHGIH@?$AAP?$AAx?$AAI?$AAO?$AA_?$AAI?$AAS?$AA_?$AAP?$AAR?$AAE?$AAA?$AAL?$AAL?$AAO?$AAC?$AA?$CI?$AAi?$AAo?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'x', 00H, 'I', 00H, 'O', 00H, '_', 00H, 'I', 00H, 'S', 00H
	DB	'_', 00H, 'P', 00H, 'R', 00H, 'E', 00H, 'A', 00H, 'L', 00H, 'L'
	DB	00H, 'O', 00H, 'C', 00H, '(', 00H, 'i', 00H, 'o', 00H, ')', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_15CIDOHJL@?$AAi?$AAo?$AA?$AA@
CONST	SEGMENT
??_C@_15CIDOHJL@?$AAi?$AAo?$AA?$AA@ DB 'i', 00H, 'o', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@EOHNNJGF@file?5was?5not?5opened?5with?5async?4o@
CONST	SEGMENT
??_C@_0CG@EOHNNJGF@file?5was?5not?5opened?5with?5async?4o@ DB 'file was n'
	DB	'ot opened with async.open()', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1BA@EPAMGDKH@?$AAi?$AAs?$AA_?$AAf?$AAi?$AAl?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1BA@EPAMGDKH@?$AAi?$AAs?$AA_?$AAf?$AAi?$AAl?$AAe?$AA?$AA@ DB 'i', 00H
	DB	's', 00H, '_', 00H, 'f', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@EDPKIFAA@sockets?5not?5supported?5yet?$AA@
CONST	SEGMENT
??_C@_0BK@EDPKIFAA@sockets?5not?5supported?5yet?$AA@ DB 'sockets not supp'
	DB	'orted yet', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1DA@LIPFDLCI@?$AA?$CB?$AA?$CI?$AAi?$AAs?$AA_?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AAs?$AA_?$AAs?$AAo?$AAc?$AAk?$AAe?$AAt?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DA@LIPFDLCI@?$AA?$CB?$AA?$CI?$AAi?$AAs?$AA_?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AAs?$AA_?$AAs?$AAo?$AAc?$AAk?$AAe?$AAt?$AA?$CJ?$AA?$AA@ DB '!'
	DB	00H, '(', 00H, 'i', 00H, 's', 00H, '_', 00H, 'f', 00H, 'i', 00H
	DB	'l', 00H, 'e', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'i'
	DB	00H, 's', 00H, '_', 00H, 's', 00H, 'o', 00H, 'c', 00H, 'k', 00H
	DB	'e', 00H, 't', 00H, ')', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05IHFJLCDG@Oy?$CKOO?$AA@
CONST	SEGMENT
??_C@_05IHFJLCDG@Oy?$CKOO?$AA@ DB 'Oy*OO', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _async_submit_write_io
_TEXT	SEGMENT
io$ = 48
f$ = 56
is_socket$ = 64
eb$ = 72
success$ = 80
px$ = 88
buf$ = 96
pybuf$ = 112
is_file$ = 192
c$ = 200
result$ = 208
callback$ = 216
io_attempt$ = 224
cb$ = 232
o$ = 240
r$129611 = 248
last_error$129626 = 252
tv79 = 256
tv147 = 264
tv150 = 272
self$ = 304
args$ = 312
_async_submit_write_io PROC				; COMDAT

; 4810 : {

$LN55:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec 28 01
	00 00		 sub	 rsp, 296		; 00000128H

; 4811 :     PyObject *o, *cb, *eb, *result = NULL;

  00011	48 c7 84 24 d0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR result$[rsp], 0

; 4812 :     Py_buffer pybuf;
; 4813 :     fileio   *f;
; 4814 :     Context  *c;
; 4815 :     PxState  *px;
; 4816 :     PxIO     *io;
; 4817 :     char     *buf;
; 4818 :     char      success;
; 4819 :     int is_file = 0;

  0001d	c7 84 24 c0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR is_file$[rsp], 0

; 4820 :     int is_socket = 0;

  00028	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR is_socket$[rsp], 0

; 4821 :     int io_attempt = 0;

  00030	c7 84 24 e0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR io_attempt$[rsp], 0

; 4822 :     PTP_WIN32_IO_CALLBACK callback;
; 4823 : 
; 4824 :     if (!PyArg_ParseTuple(args, "Oy*OO", &o, &pybuf, &cb, &eb))

  0003b	48 8d 44 24 48	 lea	 rax, QWORD PTR eb$[rsp]
  00040	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00045	48 8d 84 24 e8
	00 00 00	 lea	 rax, QWORD PTR cb$[rsp]
  0004d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00052	4c 8d 4c 24 70	 lea	 r9, QWORD PTR pybuf$[rsp]
  00057	4c 8d 84 24 f0
	00 00 00	 lea	 r8, QWORD PTR o$[rsp]
  0005f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05IHFJLCDG@Oy?$CKOO?$AA@
  00066	48 8b 8c 24 38
	01 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  0006e	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00073	85 c0		 test	 eax, eax
  00075	75 07		 jne	 SHORT $LN38@async_subm@3

; 4825 :         return NULL;

  00077	33 c0		 xor	 eax, eax
  00079	e9 83 08 00 00	 jmp	 $LN39@async_subm@3
$LN38@async_subm@3:

; 4826 : 
; 4827 :     is_file = PyFileIO_Check(o);

  0007e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyFileIO_Type
  00085	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR o$[rsp]
  0008d	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00091	74 29		 je	 SHORT $LN41@async_subm@3
  00093	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyFileIO_Type
  0009a	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR o$[rsp]
  000a2	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  000a6	e8 00 00 00 00	 call	 PyType_IsSubtype
  000ab	85 c0		 test	 eax, eax
  000ad	75 0d		 jne	 SHORT $LN41@async_subm@3
  000af	c7 84 24 00 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv79[rsp], 0
  000ba	eb 0b		 jmp	 SHORT $LN42@async_subm@3
$LN41@async_subm@3:
  000bc	c7 84 24 00 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv79[rsp], 1
$LN42@async_subm@3:
  000c7	8b 84 24 00 01
	00 00		 mov	 eax, DWORD PTR tv79[rsp]
  000ce	89 84 24 c0 00
	00 00		 mov	 DWORD PTR is_file$[rsp], eax

; 4828 :     is_socket = PxSocketIO_Check(o);

  000d5	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR is_socket$[rsp], 0

; 4829 :     assert(!(is_file && is_socket));

  000dd	83 bc 24 c0 00
	00 00 00	 cmp	 DWORD PTR is_file$[rsp], 0
  000e5	74 23		 je	 SHORT $LN43@async_subm@3
  000e7	83 7c 24 40 00	 cmp	 DWORD PTR is_socket$[rsp], 0
  000ec	74 1c		 je	 SHORT $LN43@async_subm@3
  000ee	41 b8 dd 12 00
	00		 mov	 r8d, 4829		; 000012ddH
  000f4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  000fb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@LIPFDLCI@?$AA?$CB?$AA?$CI?$AAi?$AAs?$AA_?$AAf?$AAi?$AAl?$AAe?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi?$AAs?$AA_?$AAs?$AAo?$AAc?$AAk?$AAe?$AAt?$AA?$CJ?$AA?$AA@
  00102	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00108	33 c0		 xor	 eax, eax
$LN43@async_subm@3:

; 4830 : 
; 4831 :     if (is_socket) {

  0010a	83 7c 24 40 00	 cmp	 DWORD PTR is_socket$[rsp], 0
  0010f	74 1c		 je	 SHORT $LN37@async_subm@3

; 4832 :         PyErr_SetString(PyExc_ValueError, "sockets not supported yet");

  00111	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@EDPKIFAA@sockets?5not?5supported?5yet?$AA@
  00118	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0011f	e8 00 00 00 00	 call	 PyErr_SetString

; 4833 :         return NULL;

  00124	33 c0		 xor	 eax, eax
  00126	e9 d6 07 00 00	 jmp	 $LN39@async_subm@3

; 4834 :     } else {

  0012b	eb 5b		 jmp	 SHORT $LN36@async_subm@3
$LN37@async_subm@3:

; 4835 :         assert(is_file);

  0012d	83 bc 24 c0 00
	00 00 00	 cmp	 DWORD PTR is_file$[rsp], 0
  00135	75 1c		 jne	 SHORT $LN44@async_subm@3
  00137	41 b8 e3 12 00
	00		 mov	 r8d, 4835		; 000012e3H
  0013d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00144	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BA@EPAMGDKH@?$AAi?$AAs?$AA_?$AAf?$AAi?$AAl?$AAe?$AA?$AA@
  0014b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00151	33 c0		 xor	 eax, eax
$LN44@async_subm@3:

; 4836 :         f = (fileio *)o;

  00153	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR o$[rsp]
  0015b	48 89 44 24 38	 mov	 QWORD PTR f$[rsp], rax

; 4837 :         if (!f->native) {

  00160	48 8b 44 24 38	 mov	 rax, QWORD PTR f$[rsp]
  00165	83 b8 9c 00 00
	00 00		 cmp	 DWORD PTR [rax+156], 0
  0016c	75 1a		 jne	 SHORT $LN35@async_subm@3

; 4838 :             PyErr_SetString(PyExc_ValueError,
; 4839 :                             "file was not opened with async.open()");

  0016e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@EOHNNJGF@file?5was?5not?5opened?5with?5async?4o@
  00175	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0017c	e8 00 00 00 00	 call	 PyErr_SetString

; 4840 :             return NULL;

  00181	33 c0		 xor	 eax, eax
  00183	e9 79 07 00 00	 jmp	 $LN39@async_subm@3
$LN35@async_subm@3:
$LN36@async_subm@3:
$LN34@async_subm@3:

; 4841 :         }
; 4842 :     }
; 4843 : 
; 4844 :     Px_PROTECTION_GUARD(o);

  00188	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR o$[rsp]
  00190	e8 00 00 00 00	 call	 _protected
  00195	0f be c0	 movsx	 eax, al
  00198	85 c0		 test	 eax, eax
  0019a	75 13		 jne	 SHORT $LN31@async_subm@3
  0019c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ProtectionError
  001a3	e8 00 00 00 00	 call	 PyErr_SetNone
  001a8	33 c0		 xor	 eax, eax
  001aa	e9 52 07 00 00	 jmp	 $LN39@async_subm@3
$LN31@async_subm@3:
  001af	33 c0		 xor	 eax, eax
  001b1	85 c0		 test	 eax, eax
  001b3	75 d3		 jne	 SHORT $LN34@async_subm@3

; 4845 : 
; 4846 :     if (!_PyEvent_TryCreate(o))

  001b5	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR o$[rsp]
  001bd	e8 00 00 00 00	 call	 _PyEvent_TryCreate
  001c2	0f be c0	 movsx	 eax, al
  001c5	85 c0		 test	 eax, eax
  001c7	75 07		 jne	 SHORT $LN30@async_subm@3

; 4847 :         return NULL;

  001c9	33 c0		 xor	 eax, eax
  001cb	e9 31 07 00 00	 jmp	 $LN39@async_subm@3
$LN30@async_subm@3:

; 4848 : 
; 4849 :     c = new_context(0, 0);

  001d0	33 d2		 xor	 edx, edx
  001d2	33 c9		 xor	 ecx, ecx
  001d4	e8 00 00 00 00	 call	 new_context
  001d9	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR c$[rsp], rax

; 4850 :     if (!c)

  001e1	48 83 bc 24 c8
	00 00 00 00	 cmp	 QWORD PTR c$[rsp], 0
  001ea	75 07		 jne	 SHORT $LN29@async_subm@3

; 4851 :         return NULL;

  001ec	33 c0		 xor	 eax, eax
  001ee	e9 0e 07 00 00	 jmp	 $LN39@async_subm@3
$LN29@async_subm@3:

; 4852 : 
; 4853 :     px = c->px;

  001f3	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  001fb	48 8b 80 d8 00
	00 00		 mov	 rax, QWORD PTR [rax+216]
  00202	48 89 44 24 58	 mov	 QWORD PTR px$[rsp], rax

; 4854 : 
; 4855 :     c->callback = (cb == Py_None ? NULL : cb);

  00207	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0020e	48 39 84 24 e8
	00 00 00	 cmp	 QWORD PTR cb$[rsp], rax
  00216	75 0e		 jne	 SHORT $LN45@async_subm@3
  00218	48 c7 84 24 08
	01 00 00 00 00
	00 00		 mov	 QWORD PTR tv147[rsp], 0
  00224	eb 10		 jmp	 SHORT $LN46@async_subm@3
$LN45@async_subm@3:
  00226	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR cb$[rsp]
  0022e	48 89 84 24 08
	01 00 00	 mov	 QWORD PTR tv147[rsp], rax
$LN46@async_subm@3:
  00236	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  0023e	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR tv147[rsp]
  00246	48 89 88 50 32
	00 00		 mov	 QWORD PTR [rax+12880], rcx

; 4856 :     c->errback  = (eb == Py_None ? NULL : eb);

  0024d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00254	48 39 44 24 48	 cmp	 QWORD PTR eb$[rsp], rax
  00259	75 0e		 jne	 SHORT $LN47@async_subm@3
  0025b	48 c7 84 24 10
	01 00 00 00 00
	00 00		 mov	 QWORD PTR tv150[rsp], 0
  00267	eb 0d		 jmp	 SHORT $LN48@async_subm@3
$LN47@async_subm@3:
  00269	48 8b 44 24 48	 mov	 rax, QWORD PTR eb$[rsp]
  0026e	48 89 84 24 10
	01 00 00	 mov	 QWORD PTR tv150[rsp], rax
$LN48@async_subm@3:
  00276	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  0027e	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR tv150[rsp]
  00286	48 89 88 58 32
	00 00		 mov	 QWORD PTR [rax+12888], rcx

; 4857 :     c->func = NULL;

  0028d	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  00295	48 c7 80 38 32
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+12856], 0

; 4858 :     c->args = NULL;

  002a0	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  002a8	48 c7 80 40 32
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+12864], 0

; 4859 :     c->kwds = NULL;

  002b3	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  002bb	48 c7 80 48 32
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+12872], 0
$LN28@async_subm@3:

; 4860 : 
; 4861 :     Py_XINCREF(c->callback);

  002c6	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  002ce	48 83 b8 50 32
	00 00 00	 cmp	 QWORD PTR [rax+12880], 0
  002d6	74 14		 je	 SHORT $LN25@async_subm@3
  002d8	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  002e0	48 8b 88 50 32
	00 00		 mov	 rcx, QWORD PTR [rax+12880]
  002e7	e8 00 00 00 00	 call	 _Py_IncRef
$LN25@async_subm@3:
  002ec	33 c0		 xor	 eax, eax
  002ee	85 c0		 test	 eax, eax
  002f0	75 d4		 jne	 SHORT $LN28@async_subm@3
$LN24@async_subm@3:

; 4862 :     Py_XINCREF(c->errback);

  002f2	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  002fa	48 83 b8 58 32
	00 00 00	 cmp	 QWORD PTR [rax+12888], 0
  00302	74 14		 je	 SHORT $LN21@async_subm@3
  00304	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  0030c	48 8b 88 58 32
	00 00		 mov	 rcx, QWORD PTR [rax+12888]
  00313	e8 00 00 00 00	 call	 _Py_IncRef
$LN21@async_subm@3:
  00318	33 c0		 xor	 eax, eax
  0031a	85 c0		 test	 eax, eax
  0031c	75 d4		 jne	 SHORT $LN24@async_subm@3

; 4863 : 
; 4864 :     callback = _PyParallel_IOCallback;

  0031e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyParallel_IOCallback
  00325	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR callback$[rsp], rax

; 4865 :     c->tp_io = CreateThreadpoolIo(f->h, callback, c, NULL);

  0032d	45 33 c9	 xor	 r9d, r9d
  00330	4c 8b 84 24 c8
	00 00 00	 mov	 r8, QWORD PTR c$[rsp]
  00338	48 8b 94 24 d8
	00 00 00	 mov	 rdx, QWORD PTR callback$[rsp]
  00340	48 8b 44 24 38	 mov	 rax, QWORD PTR f$[rsp]
  00345	48 8b 88 80 00
	00 00		 mov	 rcx, QWORD PTR [rax+128]
  0034c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateThreadpoolIo
  00352	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  0035a	48 89 81 88 32
	00 00		 mov	 QWORD PTR [rcx+12936], rax

; 4866 :     if (!c->tp_io) {

  00361	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  00369	48 83 b8 88 32
	00 00 00	 cmp	 QWORD PTR [rax+12936], 0
  00371	75 0c		 jne	 SHORT $LN20@async_subm@3

; 4867 :         PyErr_SetFromWindowsErr(0);

  00373	33 c9		 xor	 ecx, ecx
  00375	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr

; 4868 :         goto free_context;

  0037a	e9 c5 04 00 00	 jmp	 $free_context$129597
$LN20@async_subm@3:

; 4869 :     }
; 4870 :     c->io_type = Px_IOTYPE_FILE;

  0037f	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  00387	c7 80 80 32 00
	00 01 00 00 00	 mov	 DWORD PTR [rax+12928], 1

; 4871 : 
; 4872 :     if (pybuf.len > PyAsync_IO_BUFSIZE) {

  00391	48 81 bc 24 80
	00 00 00 00 00
	01 00		 cmp	 QWORD PTR pybuf$[rsp+16], 65536 ; 00010000H
  0039d	7e 6f		 jle	 SHORT $LN19@async_subm@3
$alloc_io$129599:

; 4873 : alloc_io:
; 4874 :         io = (PxIO *)PxList_Malloc(sizeof(PxIO));

  0039f	b9 50 00 00 00	 mov	 ecx, 80			; 00000050H
  003a4	e8 00 00 00 00	 call	 PxList_Malloc
  003a9	48 89 44 24 30	 mov	 QWORD PTR io$[rsp], rax

; 4875 :         if (!io) {

  003ae	48 83 7c 24 30
	00		 cmp	 QWORD PTR io$[rsp], 0
  003b4	75 0a		 jne	 SHORT $LN18@async_subm@3

; 4876 :             PyErr_NoMemory();

  003b6	e8 00 00 00 00	 call	 PyErr_NoMemory

; 4877 :             goto free_context;

  003bb	e9 84 04 00 00	 jmp	 $free_context$129597
$LN18@async_subm@3:

; 4878 :         }
; 4879 :         io->flags = PxIO_ONDEMAND;

  003c0	48 8b 44 24 30	 mov	 rax, QWORD PTR io$[rsp]
  003c5	c7 40 3c 01 00
	00 00		 mov	 DWORD PTR [rax+60], 1

; 4880 :         buf = (char *)malloc(pybuf.len);

  003cc	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR pybuf$[rsp+16]
  003d4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  003da	48 89 44 24 60	 mov	 QWORD PTR buf$[rsp], rax

; 4881 :         if (!buf) {

  003df	48 83 7c 24 60
	00		 cmp	 QWORD PTR buf$[rsp], 0
  003e5	75 14		 jne	 SHORT $LN17@async_subm@3

; 4882 :             PxList_Free(io);

  003e7	48 8b 4c 24 30	 mov	 rcx, QWORD PTR io$[rsp]
  003ec	e8 00 00 00 00	 call	 PxList_Free

; 4883 :             PyErr_NoMemory();

  003f1	e8 00 00 00 00	 call	 PyErr_NoMemory

; 4884 :             goto free_context;

  003f6	e9 49 04 00 00	 jmp	 $free_context$129597
$LN17@async_subm@3:

; 4885 :         }
; 4886 :         io->buf = buf;

  003fb	48 8b 44 24 30	 mov	 rax, QWORD PTR io$[rsp]
  00400	48 8b 4c 24 60	 mov	 rcx, QWORD PTR buf$[rsp]
  00405	48 89 48 48	 mov	 QWORD PTR [rax+72], rcx

; 4887 :     } else {

  00409	e9 df 00 00 00	 jmp	 $LN16@async_subm@3
$LN19@async_subm@3:
$try_io$129606:

; 4888 : try_io:
; 4889 :         io_attempt++;

  0040e	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR io_attempt$[rsp]
  00415	ff c0		 inc	 eax
  00417	89 84 24 e0 00
	00 00		 mov	 DWORD PTR io_attempt$[rsp], eax

; 4890 :         io = (PxIO *)PxList_Pop(px->io_free);

  0041e	48 8b 44 24 58	 mov	 rax, QWORD PTR px$[rsp]
  00423	48 8b 48 48	 mov	 rcx, QWORD PTR [rax+72]
  00427	e8 00 00 00 00	 call	 PxList_Pop
  0042c	48 89 44 24 30	 mov	 QWORD PTR io$[rsp], rax

; 4891 :         if (!io) {

  00431	48 83 7c 24 30
	00		 cmp	 QWORD PTR io$[rsp], 0
  00437	75 69		 jne	 SHORT $LN15@async_subm@3

; 4892 :             if (io_attempt > 1)

  00439	83 bc 24 e0 00
	00 00 01	 cmp	 DWORD PTR io_attempt$[rsp], 1
  00441	7e 07		 jle	 SHORT $LN14@async_subm@3

; 4893 :                 goto alloc_io;

  00443	e9 57 ff ff ff	 jmp	 $alloc_io$129599

; 4894 :             else {

  00448	eb 58		 jmp	 SHORT $LN13@async_subm@3
$LN14@async_subm@3:

; 4895 :                 int r;
; 4896 :                 InterlockedIncrement64(&(px->io_stalls));

  0044a	48 8b 44 24 58	 mov	 rax, QWORD PTR px$[rsp]
  0044f	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  00455	f0 48 ff 00	 lock inc QWORD PTR [rax]

; 4897 :                 /* XXX TODO create more buffers or wait for existing buffers. */
; 4898 :                 /* xxx todo: convert to submit_wait */
; 4899 :                 r = WaitForSingleObject(px->io_free_wakeup, 100);

  00459	ba 64 00 00 00	 mov	 edx, 100		; 00000064H
  0045e	48 8b 44 24 58	 mov	 rax, QWORD PTR px$[rsp]
  00463	48 8b 48 50	 mov	 rcx, QWORD PTR [rax+80]
  00467	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WaitForSingleObject
  0046d	89 84 24 f8 00
	00 00		 mov	 DWORD PTR r$129611[rsp], eax

; 4900 :                 if (r == WAIT_OBJECT_0 || r == WAIT_TIMEOUT)

  00474	83 bc 24 f8 00
	00 00 00	 cmp	 DWORD PTR r$129611[rsp], 0
  0047c	74 0d		 je	 SHORT $LN11@async_subm@3
  0047e	81 bc 24 f8 00
	00 00 02 01 00
	00		 cmp	 DWORD PTR r$129611[rsp], 258 ; 00000102H
  00489	75 04		 jne	 SHORT $LN12@async_subm@3
$LN11@async_subm@3:

; 4901 :                     goto try_io;

  0048b	eb 81		 jmp	 SHORT $try_io$129606

; 4902 :                 else {

  0048d	eb 13		 jmp	 SHORT $LN10@async_subm@3
$LN12@async_subm@3:

; 4903 :                     PyErr_SetExcFromWindowsErr(
; 4904 :                         PyExc_AsyncIOBuffersExhaustedError, 0);

  0048f	33 d2		 xor	 edx, edx
  00491	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_AsyncIOBuffersExhaustedError
  00498	e8 00 00 00 00	 call	 PyErr_SetExcFromWindowsErr

; 4905 :                     goto free_context;

  0049d	e9 a2 03 00 00	 jmp	 $free_context$129597
$LN10@async_subm@3:
$LN13@async_subm@3:
$LN15@async_subm@3:

; 4906 :                 }
; 4907 :             }
; 4908 :         }
; 4909 :         assert(io);

  004a2	48 83 7c 24 30
	00		 cmp	 QWORD PTR io$[rsp], 0
  004a8	75 1c		 jne	 SHORT $LN49@async_subm@3
  004aa	41 b8 2d 13 00
	00		 mov	 r8d, 4909		; 0000132dH
  004b0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  004b7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_15CIDOHJL@?$AAi?$AAo?$AA?$AA@
  004be	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  004c4	33 c0		 xor	 eax, eax
$LN49@async_subm@3:

; 4910 :         assert(PxIO_IS_PREALLOC(io));

  004c6	48 8b 44 24 30	 mov	 rax, QWORD PTR io$[rsp]
  004cb	83 78 3c 00	 cmp	 DWORD PTR [rax+60], 0
  004cf	74 1c		 je	 SHORT $LN50@async_subm@3
  004d1	41 b8 2e 13 00
	00		 mov	 r8d, 4910		; 0000132eH
  004d7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  004de	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@HDFNHGIH@?$AAP?$AAx?$AAI?$AAO?$AA_?$AAI?$AAS?$AA_?$AAP?$AAR?$AAE?$AAA?$AAL?$AAL?$AAO?$AAC?$AA?$CI?$AAi?$AAo?$AA?$CJ?$AA?$AA@
  004e5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  004eb	33 c0		 xor	 eax, eax
$LN50@async_subm@3:
$LN16@async_subm@3:

; 4911 :     }
; 4912 :     assert(io);

  004ed	48 83 7c 24 30
	00		 cmp	 QWORD PTR io$[rsp], 0
  004f3	75 1c		 jne	 SHORT $LN51@async_subm@3
  004f5	41 b8 30 13 00
	00		 mov	 r8d, 4912		; 00001330H
  004fb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00502	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_15CIDOHJL@?$AAi?$AAo?$AA?$AA@
  00509	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0050f	33 c0		 xor	 eax, eax
$LN51@async_subm@3:

; 4913 : 
; 4914 :     /* Ugh.  This is ass-backwards.  Need to refactor PxIO to support
; 4915 :      * Py_buffer natively. */
; 4916 :     io->len = (ULONG)pybuf.len;

  00511	48 8b 44 24 30	 mov	 rax, QWORD PTR io$[rsp]
  00516	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR pybuf$[rsp+16]
  0051d	89 48 40	 mov	 DWORD PTR [rax+64], ecx

; 4917 :     memcpy(io->buf, pybuf.buf, pybuf.len);

  00520	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR pybuf$[rsp+16]
  00528	48 8b 54 24 70	 mov	 rdx, QWORD PTR pybuf$[rsp]
  0052d	48 8b 44 24 30	 mov	 rax, QWORD PTR io$[rsp]
  00532	48 8b 48 48	 mov	 rcx, QWORD PTR [rax+72]
  00536	e8 00 00 00 00	 call	 memcpy

; 4918 :     PyBuffer_Release(&pybuf);

  0053b	48 8d 4c 24 70	 lea	 rcx, QWORD PTR pybuf$[rsp]
  00540	e8 00 00 00 00	 call	 PyBuffer_Release

; 4919 : 
; 4920 :     io->obj = o;

  00545	48 8b 44 24 30	 mov	 rax, QWORD PTR io$[rsp]
  0054a	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR o$[rsp]
  00552	48 89 48 30	 mov	 QWORD PTR [rax+48], rcx

; 4921 :     c->io_type = PyAsync_IO_WRITE;

  00556	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  0055e	c7 80 80 32 00
	00 04 00 00 00	 mov	 DWORD PTR [rax+12928], 4

; 4922 : 
; 4923 :     Py_INCREF(io->obj);

  00568	48 8b 44 24 30	 mov	 rax, QWORD PTR io$[rsp]
  0056d	48 8b 48 30	 mov	 rcx, QWORD PTR [rax+48]
  00571	e8 00 00 00 00	 call	 _Py_IncRef

; 4924 :     _write_lock(o);

  00576	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR o$[rsp]
  0057e	e8 00 00 00 00	 call	 _write_lock

; 4925 :     io->overlapped.Offset = f->write_offset.LowPart;

  00583	48 8b 44 24 30	 mov	 rax, QWORD PTR io$[rsp]
  00588	48 8b 4c 24 38	 mov	 rcx, QWORD PTR f$[rsp]
  0058d	8b 89 c8 00 00
	00		 mov	 ecx, DWORD PTR [rcx+200]
  00593	89 48 20	 mov	 DWORD PTR [rax+32], ecx

; 4926 :     io->overlapped.OffsetHigh = f->write_offset.HighPart;

  00596	48 8b 44 24 30	 mov	 rax, QWORD PTR io$[rsp]
  0059b	48 8b 4c 24 38	 mov	 rcx, QWORD PTR f$[rsp]
  005a0	8b 89 cc 00 00
	00		 mov	 ecx, DWORD PTR [rcx+204]
  005a6	89 48 24	 mov	 DWORD PTR [rax+36], ecx

; 4927 :     f->write_offset.QuadPart += io->size;

  005a9	48 8b 44 24 30	 mov	 rax, QWORD PTR io$[rsp]
  005ae	8b 40 38	 mov	 eax, DWORD PTR [rax+56]
  005b1	48 8b 4c 24 38	 mov	 rcx, QWORD PTR f$[rsp]
  005b6	48 03 81 c8 00
	00 00		 add	 rax, QWORD PTR [rcx+200]
  005bd	48 8b 4c 24 38	 mov	 rcx, QWORD PTR f$[rsp]
  005c2	48 89 81 c8 00
	00 00		 mov	 QWORD PTR [rcx+200], rax

; 4928 :     _write_unlock(o);

  005c9	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR o$[rsp]
  005d1	e8 00 00 00 00	 call	 _write_unlock

; 4929 : 
; 4930 :     StartThreadpoolIo(c->tp_io);

  005d6	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  005de	48 8b 88 88 32
	00 00		 mov	 rcx, QWORD PTR [rax+12936]
  005e5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_StartThreadpoolIo

; 4931 : 
; 4932 :     InterlockedIncrement64(&(px->io_submitted));

  005eb	48 8b 44 24 58	 mov	 rax, QWORD PTR px$[rsp]
  005f0	48 05 50 01 00
	00		 add	 rax, 336		; 00000150H
  005f6	f0 48 ff 00	 lock inc QWORD PTR [rax]

; 4933 :     InterlockedIncrement(&(px->io_pending));

  005fa	48 8b 44 24 58	 mov	 rax, QWORD PTR px$[rsp]
  005ff	48 05 58 01 00
	00		 add	 rax, 344		; 00000158H
  00605	f0 ff 00	 lock inc DWORD PTR [rax]

; 4934 :     InterlockedIncrement(&(px->active));

  00608	48 8b 44 24 58	 mov	 rax, QWORD PTR px$[rsp]
  0060d	48 05 f8 00 00
	00		 add	 rax, 248		; 000000f8H
  00613	f0 ff 00	 lock inc DWORD PTR [rax]

; 4935 :     c->stats.submitted = _Py_rdtsc();

  00616	0f 31		 rdtsc
  00618	48 c1 e2 20	 shl	 rdx, 32			; 00000020H
  0061c	48 0b c2	 or	 rax, rdx
  0061f	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  00627	48 89 81 00 01
	00 00		 mov	 QWORD PTR [rcx+256], rax

; 4936 :     c->px->contexts_created++;

  0062e	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  00636	48 8b 80 d8 00
	00 00		 mov	 rax, QWORD PTR [rax+216]
  0063d	48 8b 80 d8 00
	00 00		 mov	 rax, QWORD PTR [rax+216]
  00644	48 ff c0	 inc	 rax
  00647	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  0064f	48 8b 89 d8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+216]
  00656	48 89 81 d8 00
	00 00		 mov	 QWORD PTR [rcx+216], rax

; 4937 :     InterlockedIncrement(&(c->px->contexts_active));

  0065d	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  00665	48 8b 80 d8 00
	00 00		 mov	 rax, QWORD PTR [rax+216]
  0066c	48 05 e8 00 00
	00		 add	 rax, 232		; 000000e8H
  00672	f0 ff 00	 lock inc DWORD PTR [rax]

; 4938 : 
; 4939 :     success = WriteFile(f->h, io->buf, io->size, NULL, &(io->overlapped));

  00675	48 8b 44 24 30	 mov	 rax, QWORD PTR io$[rsp]
  0067a	48 83 c0 10	 add	 rax, 16
  0067e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00683	45 33 c9	 xor	 r9d, r9d
  00686	48 8b 44 24 30	 mov	 rax, QWORD PTR io$[rsp]
  0068b	44 8b 40 38	 mov	 r8d, DWORD PTR [rax+56]
  0068f	48 8b 44 24 30	 mov	 rax, QWORD PTR io$[rsp]
  00694	48 8b 50 48	 mov	 rdx, QWORD PTR [rax+72]
  00698	48 8b 44 24 38	 mov	 rax, QWORD PTR f$[rsp]
  0069d	48 8b 88 80 00
	00 00		 mov	 rcx, QWORD PTR [rax+128]
  006a4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WriteFile
  006aa	88 44 24 50	 mov	 BYTE PTR success$[rsp], al

; 4940 :     if (!success) {

  006ae	0f be 44 24 50	 movsx	 eax, BYTE PTR success$[rsp]
  006b3	85 c0		 test	 eax, eax
  006b5	0f 85 ac 00 00
	00		 jne	 $LN9@async_subm@3

; 4941 :         int last_error = GetLastError();

  006bb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetLastError
  006c1	89 84 24 fc 00
	00 00		 mov	 DWORD PTR last_error$129626[rsp], eax

; 4942 :         if (last_error != ERROR_IO_PENDING) {

  006c8	81 bc 24 fc 00
	00 00 e5 03 00
	00		 cmp	 DWORD PTR last_error$129626[rsp], 997 ; 000003e5H
  006d3	74 79		 je	 SHORT $LN8@async_subm@3

; 4943 :             CancelThreadpoolIo(c->tp_io);

  006d5	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  006dd	48 8b 88 88 32
	00 00		 mov	 rcx, QWORD PTR [rax+12936]
  006e4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CancelThreadpoolIo

; 4944 :             InterlockedDecrement(&(px->io_pending));

  006ea	48 8b 44 24 58	 mov	 rax, QWORD PTR px$[rsp]
  006ef	48 05 58 01 00
	00		 add	 rax, 344		; 00000158H
  006f5	f0 ff 08	 lock dec DWORD PTR [rax]

; 4945 :             InterlockedDecrement(&(px->active));

  006f8	48 8b 44 24 58	 mov	 rax, QWORD PTR px$[rsp]
  006fd	48 05 f8 00 00
	00		 add	 rax, 248		; 000000f8H
  00703	f0 ff 08	 lock dec DWORD PTR [rax]

; 4946 :             InterlockedIncrement64(&(px->done));

  00706	48 8b 44 24 58	 mov	 rax, QWORD PTR px$[rsp]
  0070b	48 05 18 01 00
	00		 add	 rax, 280		; 00000118H
  00711	f0 48 ff 00	 lock inc QWORD PTR [rax]

; 4947 :             if (c->errback)

  00715	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  0071d	48 83 b8 58 32
	00 00 00	 cmp	 QWORD PTR [rax+12888], 0
  00725	74 19		 je	 SHORT $LN7@async_subm@3

; 4948 :                 PyErr_Warn(PyExc_RuntimeWarning,
; 4949 :                            "file io errbacks not yet supported");

  00727	41 b8 01 00 00
	00		 mov	 r8d, 1
  0072d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@FIHGCGC@file?5io?5errbacks?5not?5yet?5support@
  00734	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeWarning
  0073b	e8 00 00 00 00	 call	 PyErr_WarnEx
$LN7@async_subm@3:

; 4950 :             PyErr_SetFromWindowsErr(0);

  00740	33 c9		 xor	 ecx, ecx
  00742	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr

; 4951 :             goto free_io;

  00747	e9 d4 00 00 00	 jmp	 $free_io$129630

; 4952 :         } else {

  0074c	eb 14		 jmp	 SHORT $LN6@async_subm@3
$LN8@async_subm@3:

; 4953 :             result = Py_None;

  0074e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00755	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR result$[rsp], rax

; 4954 :             goto done;

  0075d	e9 19 01 00 00	 jmp	 $done$129632
$LN6@async_subm@3:

; 4955 :         }
; 4956 :     } else {

  00762	e9 97 00 00 00	 jmp	 $LN5@async_subm@3
$LN9@async_subm@3:

; 4957 :         CancelThreadpoolIo(c->tp_io);

  00767	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  0076f	48 8b 88 88 32
	00 00		 mov	 rcx, QWORD PTR [rax+12936]
  00776	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CancelThreadpoolIo

; 4958 :         InterlockedDecrement(&(px->io_pending));

  0077c	48 8b 44 24 58	 mov	 rax, QWORD PTR px$[rsp]
  00781	48 05 58 01 00
	00		 add	 rax, 344		; 00000158H
  00787	f0 ff 08	 lock dec DWORD PTR [rax]

; 4959 :         InterlockedDecrement(&(px->active));

  0078a	48 8b 44 24 58	 mov	 rax, QWORD PTR px$[rsp]
  0078f	48 05 f8 00 00
	00		 add	 rax, 248		; 000000f8H
  00795	f0 ff 08	 lock dec DWORD PTR [rax]

; 4960 :         InterlockedIncrement64(&(px->done));

  00798	48 8b 44 24 58	 mov	 rax, QWORD PTR px$[rsp]
  0079d	48 05 18 01 00
	00		 add	 rax, 280		; 00000118H
  007a3	f0 48 ff 00	 lock inc QWORD PTR [rax]

; 4961 :         InterlockedIncrement64(&(px->async_writes_completed_synchronously));

  007a7	48 8b 44 24 58	 mov	 rax, QWORD PTR px$[rsp]
  007ac	48 05 68 01 00
	00		 add	 rax, 360		; 00000168H
  007b2	f0 48 ff 00	 lock inc QWORD PTR [rax]

; 4962 :         PySys_WriteStdout("_async.write() completed synchronously\n");

  007b6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CI@EMOJKEDA@_async?4write?$CI?$CJ?5completed?5synchro@
  007bd	e8 00 00 00 00	 call	 PySys_WriteStdout

; 4963 :         result = Py_True;

  007c2	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  007c9	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR result$[rsp], rax

; 4964 :         if (c->callback)

  007d1	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  007d9	48 83 b8 50 32
	00 00 00	 cmp	 QWORD PTR [rax+12880], 0
  007e1	74 19		 je	 SHORT $LN4@async_subm@3

; 4965 :             PyErr_Warn(PyExc_RuntimeWarning,
; 4966 :                        "file io callbacks not yet supported");

  007e3	41 b8 01 00 00
	00		 mov	 r8d, 1
  007e9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@FBLDCNGC@file?5io?5callbacks?5not?5yet?5suppor@
  007f0	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeWarning
  007f7	e8 00 00 00 00	 call	 PyErr_WarnEx
$LN4@async_subm@3:

; 4967 :         goto free_io;

  007fc	eb 22		 jmp	 SHORT $free_io$129630
$LN5@async_subm@3:

; 4968 :     }
; 4969 : 
; 4970 :     assert(0); /* unreachable */

  007fe	33 c0		 xor	 eax, eax
  00800	85 c0		 test	 eax, eax
  00802	75 1c		 jne	 SHORT $LN52@async_subm@3
  00804	41 b8 6a 13 00
	00		 mov	 r8d, 4970		; 0000136aH
  0080a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00811	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_13COJANIEC@?$AA0?$AA?$AA@
  00818	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0081e	33 c0		 xor	 eax, eax
$LN52@async_subm@3:
$free_io$129630:

; 4971 : 
; 4972 : free_io:
; 4973 :     if (PxIO_IS_ONDEMAND(io)) {

  00820	48 8b 44 24 30	 mov	 rax, QWORD PTR io$[rsp]
  00825	83 78 3c 01	 cmp	 DWORD PTR [rax+60], 1
  00829	75 19		 jne	 SHORT $LN3@async_subm@3

; 4974 :         free(io->buf);

  0082b	48 8b 44 24 30	 mov	 rax, QWORD PTR io$[rsp]
  00830	48 8b 48 48	 mov	 rcx, QWORD PTR [rax+72]
  00834	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 4975 :         PxList_Free(io);

  0083a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR io$[rsp]
  0083f	e8 00 00 00 00	 call	 PxList_Free
$LN3@async_subm@3:
$free_context$129597:

; 4976 :     }
; 4977 : 
; 4978 : free_context:
; 4979 :     InterlockedDecrement(&(px->contexts_active));

  00844	48 8b 44 24 58	 mov	 rax, QWORD PTR px$[rsp]
  00849	48 05 e8 00 00
	00		 add	 rax, 232		; 000000e8H
  0084f	f0 ff 08	 lock dec DWORD PTR [rax]

; 4980 :     px->contexts_destroyed++;

  00852	48 8b 44 24 58	 mov	 rax, QWORD PTR px$[rsp]
  00857	48 8b 80 e0 00
	00 00		 mov	 rax, QWORD PTR [rax+224]
  0085e	48 ff c0	 inc	 rax
  00861	48 8b 4c 24 58	 mov	 rcx, QWORD PTR px$[rsp]
  00866	48 89 81 e0 00
	00 00		 mov	 QWORD PTR [rcx+224], rax

; 4981 :     free(c);

  0086d	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  00875	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$done$129632:

; 4982 : 
; 4983 : done:
; 4984 :     if (!result)

  0087b	48 83 bc 24 d0
	00 00 00 00	 cmp	 QWORD PTR result$[rsp], 0
  00884	75 28		 jne	 SHORT $LN2@async_subm@3

; 4985 :         assert(PyErr_Occurred());

  00886	e8 00 00 00 00	 call	 PyErr_Occurred
  0088b	48 85 c0	 test	 rax, rax
  0088e	75 1c		 jne	 SHORT $LN53@async_subm@3
  00890	41 b8 79 13 00
	00		 mov	 r8d, 4985		; 00001379H
  00896	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0089d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CC@DNBCFJEA@?$AAP?$AAy?$AAE?$AAr?$AAr?$AA_?$AAO?$AAc?$AAc?$AAu?$AAr?$AAr?$AAe?$AAd?$AA?$CI?$AA?$CJ?$AA?$AA@
  008a4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  008aa	33 c0		 xor	 eax, eax
$LN53@async_subm@3:

; 4986 :     else {

  008ac	eb 4b		 jmp	 SHORT $LN1@async_subm@3
$LN2@async_subm@3:

; 4987 :         assert(result == Py_None || result == Py_True);

  008ae	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  008b5	48 39 84 24 d0
	00 00 00	 cmp	 QWORD PTR result$[rsp], rax
  008bd	74 2d		 je	 SHORT $LN54@async_subm@3
  008bf	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  008c6	48 39 84 24 d0
	00 00 00	 cmp	 QWORD PTR result$[rsp], rax
  008ce	74 1c		 je	 SHORT $LN54@async_subm@3
  008d0	41 b8 7b 13 00
	00		 mov	 r8d, 4987		; 0000137bH
  008d6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  008dd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EO@HBFHMDEO@?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAP?$AAy?$AA_?$AAN?$AAo?$AAn?$AAe?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAP@
  008e4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  008ea	33 c0		 xor	 eax, eax
$LN54@async_subm@3:

; 4988 :         Py_INCREF(result);

  008ec	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR result$[rsp]
  008f4	e8 00 00 00 00	 call	 _Py_IncRef
$LN1@async_subm@3:

; 4989 :     }
; 4990 :     return result;

  008f9	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR result$[rsp]
$LN39@async_subm@3:

; 4991 : }

  00901	48 81 c4 28 01
	00 00		 add	 rsp, 296		; 00000128H
  00908	c3		 ret	 0
_async_submit_write_io ENDP
_TEXT	ENDS
PUBLIC	_async_submit_read_io
; Function compile flags: /Odtp
;	COMDAT _async_submit_read_io
_TEXT	SEGMENT
self$ = 8
args$ = 16
_async_submit_read_io PROC				; COMDAT

; 4995 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 4996 :     //return _async_submit_io(self, args, 0);
; 4997 :     return NULL;

  0000a	33 c0		 xor	 eax, eax

; 4998 : }

  0000c	c3		 ret	 0
_async_submit_read_io ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_async_submit_server DD imagerel $LN3
	DD	imagerel $LN3+31
	DD	imagerel $unwind$_async_submit_server
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_async_submit_server DD 010e01H
	DD	0220eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _async_submit_server
_TEXT	SEGMENT
result$ = 0
self$ = 32
args$ = 40
_async_submit_server PROC				; COMDAT

; 5002 : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 18	 sub	 rsp, 24

; 5003 :     PyObject *result = NULL;

  0000e	48 c7 04 24 00
	00 00 00	 mov	 QWORD PTR result$[rsp], 0

; 5004 : 
; 5005 :     return result;

  00016	48 8b 04 24	 mov	 rax, QWORD PTR result$[rsp]

; 5006 : }

  0001a	48 83 c4 18	 add	 rsp, 24
  0001e	c3		 ret	 0
_async_submit_server ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_async_submit_client DD imagerel $LN3
	DD	imagerel $LN3+31
	DD	imagerel $unwind$_async_submit_client
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_async_submit_client DD 010e01H
	DD	0220eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _async_submit_client
_TEXT	SEGMENT
result$ = 0
self$ = 32
args$ = 40
_async_submit_client PROC				; COMDAT

; 5010 : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 18	 sub	 rsp, 24

; 5011 :     PyObject *result = NULL;

  0000e	48 c7 04 24 00
	00 00 00	 mov	 QWORD PTR result$[rsp], 0

; 5012 : 
; 5013 :     return result;

  00016	48 8b 04 24	 mov	 rax, QWORD PTR result$[rsp]

; 5014 : }

  0001a	48 83 c4 18	 add	 rsp, 24
  0001e	c3		 ret	 0
_async_submit_client ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_async_submit_class DD imagerel $LN3
	DD	imagerel $LN3+31
	DD	imagerel $unwind$_async_submit_class
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_async_submit_class DD 010e01H
	DD	0220eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _async_submit_class
_TEXT	SEGMENT
result$ = 0
self$ = 32
args$ = 40
_async_submit_class PROC				; COMDAT

; 5018 : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 18	 sub	 rsp, 24

; 5019 :     PyObject *result = NULL;

  0000e	48 c7 04 24 00
	00 00 00	 mov	 QWORD PTR result$[rsp], 0

; 5020 : 
; 5021 :     return result;

  00016	48 8b 04 24	 mov	 rax, QWORD PTR result$[rsp]

; 5022 : }

  0001a	48 83 c4 18	 add	 rsp, 24
  0001e	c3		 ret	 0
_async_submit_class ENDP
_TEXT	ENDS
PUBLIC	??_C@_1CC@CBIBFGJL@?$AAi?$AAt?$AAe?$AAm?$AA?9?$AA?$DO?$AAp?$AA3?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CC@FODIAIL@?$AAi?$AAt?$AAe?$AAm?$AA?9?$AA?$DO?$AAp?$AA2?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CC@OLEPCABH@?$AAi?$AAt?$AAe?$AAm?$AA?9?$AA?$DO?$AAp?$AA1?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CK@DPEMMKCH@?$AAe?$AAr?$AAr?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAW?$AAA?$AAI?$AAT?$AA_?$AAO?$AAB?$AAJ?$AAE?$AAC?$AAT?$AA_?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CC@MAMFPAAI@?$AAi?$AAt?$AAe?$AAm?$AA?9?$AA?$DO?$AAp?$AA4?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ ; `string'
PUBLIC	??_C@_0BN@CNPPIGKC@param?53?5must?5be?5None?5or?5dict?$AA@ ; `string'
PUBLIC	??_C@_0BN@IJFAHKAB@parameter?51?5must?5be?5callable?$AA@ ; `string'
PUBLIC	??_C@_19DPFBEKIN@?$AAf?$AAu?$AAn?$AAc?$AA?$AA@	; `string'
PUBLIC	??_C@_1CE@PACILGBH@?$AAc?$AA?9?$AA?$DO?$AAd?$AAe?$AAc?$AAr?$AAe?$AAf?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DA@PKCMBNKF@?$AA?$CB?$AAc?$AA?9?$AA?$DO?$AAp?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAe?$AAx?$AAc?$AA_?$AAt?$AAy?$AAp?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_0BH@MLPLDIOI@_call_from_main_thread?$AA@	; `string'
PUBLIC	_call_from_main_thread
EXTRN	PyTuple_New:PROC
EXTRN	PyExc_TypeError:QWORD
EXTRN	PyCallable_Check:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_call_from_main_thread DD imagerel $LN40
	DD	imagerel $LN40+1697
	DD	imagerel $unwind$_call_from_main_thread
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_call_from_main_thread DD 021601H
	DD	0150116H
xdata	ENDS
;	COMDAT ??_C@_1CC@CBIBFGJL@?$AAi?$AAt?$AAe?$AAm?$AA?9?$AA?$DO?$AAp?$AA3?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
CONST	SEGMENT
??_C@_1CC@CBIBFGJL@?$AAi?$AAt?$AAe?$AAm?$AA?9?$AA?$DO?$AAp?$AA3?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ DB 'i'
	DB	00H, 't', 00H, 'e', 00H, 'm', 00H, '-', 00H, '>', 00H, 'p', 00H
	DB	'3', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'N', 00H, 'U'
	DB	00H, 'L', 00H, 'L', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1CC@FODIAIL@?$AAi?$AAt?$AAe?$AAm?$AA?9?$AA?$DO?$AAp?$AA2?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
CONST	SEGMENT
??_C@_1CC@FODIAIL@?$AAi?$AAt?$AAe?$AAm?$AA?9?$AA?$DO?$AAp?$AA2?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ DB 'i'
	DB	00H, 't', 00H, 'e', 00H, 'm', 00H, '-', 00H, '>', 00H, 'p', 00H
	DB	'2', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, 'N', 00H, 'U'
	DB	00H, 'L', 00H, 'L', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1CC@OLEPCABH@?$AAi?$AAt?$AAe?$AAm?$AA?9?$AA?$DO?$AAp?$AA1?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
CONST	SEGMENT
??_C@_1CC@OLEPCABH@?$AAi?$AAt?$AAe?$AAm?$AA?9?$AA?$DO?$AAp?$AA1?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ DB 'i'
	DB	00H, 't', 00H, 'e', 00H, 'm', 00H, '-', 00H, '>', 00H, 'p', 00H
	DB	'1', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'N', 00H, 'U'
	DB	00H, 'L', 00H, 'L', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@DPEMMKCH@?$AAe?$AAr?$AAr?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAW?$AAA?$AAI?$AAT?$AA_?$AAO?$AAB?$AAJ?$AAE?$AAC?$AAT?$AA_?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1CK@DPEMMKCH@?$AAe?$AAr?$AAr?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAW?$AAA?$AAI?$AAT?$AA_?$AAO?$AAB?$AAJ?$AAE?$AAC?$AAT?$AA_?$AA0?$AA?$AA@ DB 'e'
	DB	00H, 'r', 00H, 'r', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H
	DB	'W', 00H, 'A', 00H, 'I', 00H, 'T', 00H, '_', 00H, 'O', 00H, 'B'
	DB	00H, 'J', 00H, 'E', 00H, 'C', 00H, 'T', 00H, '_', 00H, '0', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1CC@MAMFPAAI@?$AAi?$AAt?$AAe?$AAm?$AA?9?$AA?$DO?$AAp?$AA4?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
CONST	SEGMENT
??_C@_1CC@MAMFPAAI@?$AAi?$AAt?$AAe?$AAm?$AA?9?$AA?$DO?$AAp?$AA4?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ DB 'i'
	DB	00H, 't', 00H, 'e', 00H, 'm', 00H, '-', 00H, '>', 00H, 'p', 00H
	DB	'4', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'N', 00H, 'U'
	DB	00H, 'L', 00H, 'L', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@CNPPIGKC@param?53?5must?5be?5None?5or?5dict?$AA@
CONST	SEGMENT
??_C@_0BN@CNPPIGKC@param?53?5must?5be?5None?5or?5dict?$AA@ DB 'param 3 mu'
	DB	'st be None or dict', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@IJFAHKAB@parameter?51?5must?5be?5callable?$AA@
CONST	SEGMENT
??_C@_0BN@IJFAHKAB@parameter?51?5must?5be?5callable?$AA@ DB 'parameter 1 '
	DB	'must be callable', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_19DPFBEKIN@?$AAf?$AAu?$AAn?$AAc?$AA?$AA@
CONST	SEGMENT
??_C@_19DPFBEKIN@?$AAf?$AAu?$AAn?$AAc?$AA?$AA@ DB 'f', 00H, 'u', 00H, 'n', 00H
	DB	'c', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CE@PACILGBH@?$AAc?$AA?9?$AA?$DO?$AAd?$AAe?$AAc?$AAr?$AAe?$AAf?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
CONST	SEGMENT
??_C@_1CE@PACILGBH@?$AAc?$AA?9?$AA?$DO?$AAd?$AAe?$AAc?$AAr?$AAe?$AAf?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ DB 'c'
	DB	00H, '-', 00H, '>', 00H, 'd', 00H, 'e', 00H, 'c', 00H, 'r', 00H
	DB	'e', 00H, 'f', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'N'
	DB	00H, 'U', 00H, 'L', 00H, 'L', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1DA@PKCMBNKF@?$AA?$CB?$AAc?$AA?9?$AA?$DO?$AAp?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAe?$AAx?$AAc?$AA_?$AAt?$AAy?$AAp?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1DA@PKCMBNKF@?$AA?$CB?$AAc?$AA?9?$AA?$DO?$AAp?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAe?$AAx?$AAc?$AA_?$AAt?$AAy?$AAp?$AAe?$AA?$AA@ DB '!'
	DB	00H, 'c', 00H, '-', 00H, '>', 00H, 'p', 00H, 's', 00H, 't', 00H
	DB	'a', 00H, 't', 00H, 'e', 00H, '-', 00H, '>', 00H, 'c', 00H, 'u'
	DB	00H, 'r', 00H, 'e', 00H, 'x', 00H, 'c', 00H, '_', 00H, 't', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@MLPLDIOI@_call_from_main_thread?$AA@
CONST	SEGMENT
??_C@_0BH@MLPLDIOI@_call_from_main_thread?$AA@ DB '_call_from_main_thread'
	DB	00H						; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _call_from_main_thread
_TEXT	SEGMENT
args$ = 64
arg$ = 72
tmp$ = 80
px$ = 88
kwds$ = 96
result$ = 104
c$ = 112
err$ = 120
item$ = 128
func$ = 136
tv219 = 144
self$ = 176
targs$ = 184
wait$ = 192
_call_from_main_thread PROC				; COMDAT

; 5026 : {

$LN40:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 5027 :     int err;
; 5028 :     Context *c;
; 5029 :     PyObject *result = NULL;

  00016	48 c7 44 24 68
	00 00 00 00	 mov	 QWORD PTR result$[rsp], 0

; 5030 :     PxListItem *item;
; 5031 :     PxState *px;
; 5032 :     PyObject *func, *arg, *args, *kwds, *tmp;
; 5033 : 
; 5034 :     Px_GUARD

  0001f	e8 00 00 00 00	 call	 _Py_PXCTX
  00024	85 c0		 test	 eax, eax
  00026	75 1f		 jne	 SHORT $LN28@call_from_
  00028	41 b9 01 00 00
	00		 mov	 r9d, 1
  0002e	41 b8 aa 13 00
	00		 mov	 r8d, 5034		; 000013aaH
  00034	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@PGHBGAOD@?4?4?2Python?2pyparallel?4c?$AA@
  0003b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BH@MLPLDIOI@_call_from_main_thread?$AA@
  00042	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN28@call_from_:

; 5035 : 
; 5036 :     func = arg = args = kwds = tmp = NULL;

  00047	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  00050	48 8b 44 24 50	 mov	 rax, QWORD PTR tmp$[rsp]
  00055	48 89 44 24 60	 mov	 QWORD PTR kwds$[rsp], rax
  0005a	48 8b 44 24 60	 mov	 rax, QWORD PTR kwds$[rsp]
  0005f	48 89 44 24 40	 mov	 QWORD PTR args$[rsp], rax
  00064	48 8b 44 24 40	 mov	 rax, QWORD PTR args$[rsp]
  00069	48 89 44 24 48	 mov	 QWORD PTR arg$[rsp], rax
  0006e	48 8b 44 24 48	 mov	 rax, QWORD PTR arg$[rsp]
  00073	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR func$[rsp], rax

; 5037 : 
; 5038 :     c = ctx;

  0007b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:ctx
  00080	8b c0		 mov	 eax, eax
  00082	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00088	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00091	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  00095	48 8b 04 08	 mov	 rax, QWORD PTR [rax+rcx]
  00099	48 89 44 24 70	 mov	 QWORD PTR c$[rsp], rax

; 5039 :     assert(!c->pstate->curexc_type);

  0009e	48 8b 44 24 70	 mov	 rax, QWORD PTR c$[rsp]
  000a3	48 8b 80 e8 00
	00 00		 mov	 rax, QWORD PTR [rax+232]
  000aa	48 83 78 48 00	 cmp	 QWORD PTR [rax+72], 0
  000af	74 1c		 je	 SHORT $LN31@call_from_
  000b1	41 b8 af 13 00
	00		 mov	 r8d, 5039		; 000013afH
  000b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  000be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@PKCMBNKF@?$AA?$CB?$AAc?$AA?9?$AA?$DO?$AAp?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAe?$AAx?$AAc?$AA_?$AAt?$AAy?$AAp?$AAe?$AA?$AA@
  000c5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000cb	33 c0		 xor	 eax, eax
$LN31@call_from_:

; 5040 : 
; 5041 :     item = _PyHeap_NewListItem(c);

  000cd	48 8b 4c 24 70	 mov	 rcx, QWORD PTR c$[rsp]
  000d2	e8 00 00 00 00	 call	 _PyHeap_NewListItem
  000d7	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR item$[rsp], rax

; 5042 :     if (!item)

  000df	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR item$[rsp], 0
  000e8	75 0a		 jne	 SHORT $LN27@call_from_

; 5043 :         return PyErr_NoMemory();

  000ea	e8 00 00 00 00	 call	 PyErr_NoMemory
  000ef	e9 a5 05 00 00	 jmp	 $LN29@call_from_
$LN27@call_from_:

; 5044 : 
; 5045 :     if (wait) {

  000f4	83 bc 24 c0 00
	00 00 00	 cmp	 DWORD PTR wait$[rsp], 0
  000fc	74 6f		 je	 SHORT $LN26@call_from_

; 5046 :         assert(c->decref == NULL);

  000fe	48 8b 44 24 70	 mov	 rax, QWORD PTR c$[rsp]
  00103	48 83 b8 50 33
	00 00 00	 cmp	 QWORD PTR [rax+13136], 0
  0010b	74 1c		 je	 SHORT $LN32@call_from_
  0010d	41 b8 b6 13 00
	00		 mov	 r8d, 5046		; 000013b6H
  00113	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0011a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CE@PACILGBH@?$AAc?$AA?9?$AA?$DO?$AAd?$AAe?$AAc?$AAr?$AAe?$AAf?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
  00121	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00127	33 c0		 xor	 eax, eax
$LN32@call_from_:

; 5047 :         c->decref = _PyHeap_NewListItem(c);

  00129	48 8b 4c 24 70	 mov	 rcx, QWORD PTR c$[rsp]
  0012e	e8 00 00 00 00	 call	 _PyHeap_NewListItem
  00133	48 8b 4c 24 70	 mov	 rcx, QWORD PTR c$[rsp]
  00138	48 89 81 50 33
	00 00		 mov	 QWORD PTR [rcx+13136], rax

; 5048 :         if (!c->decref) {

  0013f	48 8b 44 24 70	 mov	 rax, QWORD PTR c$[rsp]
  00144	48 83 b8 50 33
	00 00 00	 cmp	 QWORD PTR [rax+13136], 0
  0014c	75 0a		 jne	 SHORT $LN25@call_from_

; 5049 :             PyErr_NoMemory();

  0014e	e8 00 00 00 00	 call	 PyErr_NoMemory

; 5050 :             goto error;

  00153	e9 2a 05 00 00	 jmp	 $error$129709
$LN25@call_from_:

; 5051 :         }
; 5052 :         c->decref->from = c;

  00158	48 8b 44 24 70	 mov	 rax, QWORD PTR c$[rsp]
  0015d	48 8b 80 50 33
	00 00		 mov	 rax, QWORD PTR [rax+13136]
  00164	48 8b 4c 24 70	 mov	 rcx, QWORD PTR c$[rsp]
  00169	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx
$LN26@call_from_:

; 5053 :     }
; 5054 : 
; 5055 :     if (!PyArg_UnpackTuple(targs, "call_from_main_thread",
; 5056 :                            1, 3, &func, &arg, &kwds))

  0016d	48 8d 44 24 60	 lea	 rax, QWORD PTR kwds$[rsp]
  00172	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00177	48 8d 44 24 48	 lea	 rax, QWORD PTR arg$[rsp]
  0017c	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00181	48 8d 84 24 88
	00 00 00	 lea	 rax, QWORD PTR func$[rsp]
  00189	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0018e	41 b9 03 00 00
	00		 mov	 r9d, 3
  00194	41 b8 01 00 00
	00		 mov	 r8d, 1
  0019a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@GDMKOJLI@call_from_main_thread?$AA@
  001a1	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR targs$[rsp]
  001a9	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  001ae	85 c0		 test	 eax, eax
  001b0	75 05		 jne	 SHORT $LN24@call_from_

; 5057 :         goto error;

  001b2	e9 cb 04 00 00	 jmp	 $error$129709
$LN24@call_from_:

; 5058 : 
; 5059 :     assert(func);

  001b7	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR func$[rsp], 0
  001c0	75 1c		 jne	 SHORT $LN33@call_from_
  001c2	41 b8 c3 13 00
	00		 mov	 r8d, 5059		; 000013c3H
  001c8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  001cf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_19DPFBEKIN@?$AAf?$AAu?$AAn?$AAc?$AA?$AA@
  001d6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001dc	33 c0		 xor	 eax, eax
$LN33@call_from_:

; 5060 :     if (func == Py_None || !PyCallable_Check(func)) {

  001de	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  001e5	48 39 84 24 88
	00 00 00	 cmp	 QWORD PTR func$[rsp], rax
  001ed	74 11		 je	 SHORT $LN22@call_from_
  001ef	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR func$[rsp]
  001f7	e8 00 00 00 00	 call	 PyCallable_Check
  001fc	85 c0		 test	 eax, eax
  001fe	75 18		 jne	 SHORT $LN23@call_from_
$LN22@call_from_:

; 5061 :         PyErr_SetString(PyExc_TypeError, "parameter 1 must be callable");

  00200	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@IJFAHKAB@parameter?51?5must?5be?5callable?$AA@
  00207	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0020e	e8 00 00 00 00	 call	 PyErr_SetString

; 5062 :         goto error;

  00213	e9 6a 04 00 00	 jmp	 $error$129709
$LN23@call_from_:

; 5063 :     }
; 5064 : 
; 5065 :     if (kwds && kwds == Py_None)

  00218	48 83 7c 24 60
	00		 cmp	 QWORD PTR kwds$[rsp], 0
  0021e	74 17		 je	 SHORT $LN21@call_from_
  00220	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00227	48 39 44 24 60	 cmp	 QWORD PTR kwds$[rsp], rax
  0022c	75 09		 jne	 SHORT $LN21@call_from_

; 5066 :         kwds = NULL;

  0022e	48 c7 44 24 60
	00 00 00 00	 mov	 QWORD PTR kwds$[rsp], 0
$LN21@call_from_:

; 5067 : 
; 5068 :     if (kwds) {

  00237	48 83 7c 24 60
	00		 cmp	 QWORD PTR kwds$[rsp], 0
  0023d	74 3c		 je	 SHORT $LN20@call_from_

; 5069 :         if (!PyDict_CheckExact(kwds)) {

  0023f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyDict_Type
  00246	48 8b 4c 24 60	 mov	 rcx, QWORD PTR kwds$[rsp]
  0024b	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0024f	74 2a		 je	 SHORT $LN19@call_from_
  00251	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyDict_Type
  00258	48 8b 4c 24 60	 mov	 rcx, QWORD PTR kwds$[rsp]
  0025d	48 39 41 38	 cmp	 QWORD PTR [rcx+56], rax
  00261	74 18		 je	 SHORT $LN19@call_from_

; 5070 :             PyErr_SetString(PyExc_TypeError, "param 3 must be None or dict");

  00263	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@CNPPIGKC@param?53?5must?5be?5None?5or?5dict?$AA@
  0026a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00271	e8 00 00 00 00	 call	 PyErr_SetString

; 5071 :             goto error;

  00276	e9 07 04 00 00	 jmp	 $error$129709
$LN19@call_from_:
$LN20@call_from_:

; 5072 :         }
; 5073 :     }
; 5074 : 
; 5075 :     if (arg) {

  0027b	48 83 7c 24 48
	00		 cmp	 QWORD PTR arg$[rsp], 0
  00281	74 49		 je	 SHORT $LN18@call_from_

; 5076 :         if (PyTuple_Check(arg))

  00283	48 8b 44 24 48	 mov	 rax, QWORD PTR arg$[rsp]
  00288	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0028c	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00292	25 00 00 00 04	 and	 eax, 67108864		; 04000000H
  00297	85 c0		 test	 eax, eax
  00299	74 0c		 je	 SHORT $LN17@call_from_

; 5077 :             args = arg;

  0029b	48 8b 44 24 48	 mov	 rax, QWORD PTR arg$[rsp]
  002a0	48 89 44 24 40	 mov	 QWORD PTR args$[rsp], rax

; 5078 :         else {

  002a5	eb 23		 jmp	 SHORT $LN16@call_from_
$LN17@call_from_:

; 5079 :             args = Py_BuildValue("(O)", arg);

  002a7	48 8b 54 24 48	 mov	 rdx, QWORD PTR arg$[rsp]
  002ac	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03IELNPCCE@?$CIO?$CJ?$AA@
  002b3	e8 00 00 00 00	 call	 Py_BuildValue
  002b8	48 89 44 24 40	 mov	 QWORD PTR args$[rsp], rax

; 5080 :             if (!args)

  002bd	48 83 7c 24 40
	00		 cmp	 QWORD PTR args$[rsp], 0
  002c3	75 05		 jne	 SHORT $LN15@call_from_

; 5081 :                 goto error;

  002c5	e9 b8 03 00 00	 jmp	 $error$129709
$LN15@call_from_:
$LN16@call_from_:

; 5082 :         }
; 5083 :     } else {

  002ca	eb 19		 jmp	 SHORT $LN14@call_from_
$LN18@call_from_:

; 5084 :         args = PyTuple_New(0);

  002cc	33 c9		 xor	 ecx, ecx
  002ce	e8 00 00 00 00	 call	 PyTuple_New
  002d3	48 89 44 24 40	 mov	 QWORD PTR args$[rsp], rax

; 5085 :         if (!args)

  002d8	48 83 7c 24 40
	00		 cmp	 QWORD PTR args$[rsp], 0
  002de	75 05		 jne	 SHORT $LN13@call_from_

; 5086 :             goto error;

  002e0	e9 9d 03 00 00	 jmp	 $error$129709
$LN13@call_from_:
$LN14@call_from_:

; 5087 :     }
; 5088 : 
; 5089 :     item->p1 = func;

  002e5	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR item$[rsp]
  002ed	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR func$[rsp]
  002f5	48 89 48 20	 mov	 QWORD PTR [rax+32], rcx

; 5090 :     item->p2 = args;

  002f9	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR item$[rsp]
  00301	48 8b 4c 24 40	 mov	 rcx, QWORD PTR args$[rsp]
  00306	48 89 48 28	 mov	 QWORD PTR [rax+40], rcx

; 5091 :     item->p3 = kwds;

  0030a	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR item$[rsp]
  00312	48 8b 4c 24 60	 mov	 rcx, QWORD PTR kwds$[rsp]
  00317	48 89 48 30	 mov	 QWORD PTR [rax+48], rcx

; 5092 : 
; 5093 :     if (wait) {

  0031b	83 bc 24 c0 00
	00 00 00	 cmp	 DWORD PTR wait$[rsp], 0
  00323	74 39		 je	 SHORT $LN12@call_from_

; 5094 :         item->p4 = (void *)CreateEvent(NULL, FALSE, FALSE, NULL);

  00325	45 33 c9	 xor	 r9d, r9d
  00328	45 33 c0	 xor	 r8d, r8d
  0032b	33 d2		 xor	 edx, edx
  0032d	33 c9		 xor	 ecx, ecx
  0032f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateEventW
  00335	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR item$[rsp]
  0033d	48 89 41 38	 mov	 QWORD PTR [rcx+56], rax

; 5095 :         if (!item->p4) {

  00341	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR item$[rsp]
  00349	48 83 78 38 00	 cmp	 QWORD PTR [rax+56], 0
  0034e	75 0c		 jne	 SHORT $LN11@call_from_

; 5096 :             PyErr_SetFromWindowsErr(0);

  00350	33 c9		 xor	 ecx, ecx
  00352	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr

; 5097 :             goto error;

  00357	e9 26 03 00 00	 jmp	 $error$129709
$LN11@call_from_:

; 5098 :         }
; 5099 :     } else

  0035c	eb 2b		 jmp	 SHORT $LN10@call_from_
$LN12@call_from_:

; 5100 :         assert(item->p4 == NULL);

  0035e	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR item$[rsp]
  00366	48 83 78 38 00	 cmp	 QWORD PTR [rax+56], 0
  0036b	74 1c		 je	 SHORT $LN34@call_from_
  0036d	41 b8 ec 13 00
	00		 mov	 r8d, 5100		; 000013ecH
  00373	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0037a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CC@MAMFPAAI@?$AAi?$AAt?$AAe?$AAm?$AA?9?$AA?$DO?$AAp?$AA4?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
  00381	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00387	33 c0		 xor	 eax, eax
$LN34@call_from_:
$LN10@call_from_:

; 5101 : 
; 5102 :     px = c->px;

  00389	48 8b 44 24 70	 mov	 rax, QWORD PTR c$[rsp]
  0038e	48 8b 80 d8 00
	00 00		 mov	 rax, QWORD PTR [rax+216]
  00395	48 89 44 24 58	 mov	 QWORD PTR px$[rsp], rax

; 5103 : 
; 5104 :     if (wait) {

  0039a	83 bc 24 c0 00
	00 00 00	 cmp	 DWORD PTR wait$[rsp], 0
  003a2	74 1f		 je	 SHORT $LN9@call_from_

; 5105 :         InterlockedIncrement64(&(px->sync_wait_submitted));

  003a4	48 8b 44 24 58	 mov	 rax, QWORD PTR px$[rsp]
  003a9	48 05 78 01 00
	00		 add	 rax, 376		; 00000178H
  003af	f0 48 ff 00	 lock inc QWORD PTR [rax]

; 5106 :         InterlockedIncrement(&(px->sync_wait_pending));

  003b3	48 8b 44 24 58	 mov	 rax, QWORD PTR px$[rsp]
  003b8	48 05 80 01 00
	00		 add	 rax, 384		; 00000180H
  003be	f0 ff 00	 lock inc DWORD PTR [rax]

; 5107 :     } else {

  003c1	eb 40		 jmp	 SHORT $LN8@call_from_
$LN9@call_from_:

; 5108 :         Px_INCCTX(c);

  003c3	48 8b 4c 24 70	 mov	 rcx, QWORD PTR c$[rsp]
  003c8	e8 00 00 00 00	 call	 Px_INCCTX

; 5109 :         PxList_Push(c->outgoing, item);

  003cd	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR item$[rsp]
  003d5	48 8b 44 24 70	 mov	 rax, QWORD PTR c$[rsp]
  003da	48 8b 88 40 33
	00 00		 mov	 rcx, QWORD PTR [rax+13120]
  003e1	e8 00 00 00 00	 call	 PxList_Push

; 5110 :         InterlockedIncrement64(&(px->sync_nowait_submitted));

  003e6	48 8b 44 24 58	 mov	 rax, QWORD PTR px$[rsp]
  003eb	48 05 90 01 00
	00		 add	 rax, 400		; 00000190H
  003f1	f0 48 ff 00	 lock inc QWORD PTR [rax]

; 5111 :         InterlockedIncrement(&(px->sync_nowait_pending));

  003f5	48 8b 44 24 58	 mov	 rax, QWORD PTR px$[rsp]
  003fa	48 05 98 01 00
	00		 add	 rax, 408		; 00000198H
  00400	f0 ff 00	 lock inc DWORD PTR [rax]
$LN8@call_from_:

; 5112 :     }
; 5113 : 
; 5114 :     //InterlockedIncrement(&(px->active));
; 5115 :     item->from = c;

  00403	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR item$[rsp]
  0040b	48 8b 4c 24 70	 mov	 rcx, QWORD PTR c$[rsp]
  00410	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 5116 :     PxList_TimestampItem(item);

  00414	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR item$[rsp]
  0041c	e8 00 00 00 00	 call	 PxList_TimestampItem

; 5117 :     PxList_Push(px->incoming, item);

  00421	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR item$[rsp]
  00429	48 8b 44 24 58	 mov	 rax, QWORD PTR px$[rsp]
  0042e	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  00432	e8 00 00 00 00	 call	 PxList_Push

; 5118 :     SetEvent(px->wakeup);

  00437	48 8b 44 24 58	 mov	 rax, QWORD PTR px$[rsp]
  0043c	48 8b 88 a0 00
	00 00		 mov	 rcx, QWORD PTR [rax+160]
  00443	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SetEvent

; 5119 :     if (!wait)

  00449	83 bc 24 c0 00
	00 00 00	 cmp	 DWORD PTR wait$[rsp], 0
  00451	75 0c		 jne	 SHORT $LN7@call_from_

; 5120 :         return Py_None;

  00453	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0045a	e9 3a 02 00 00	 jmp	 $LN29@call_from_
$LN7@call_from_:

; 5121 : 
; 5122 :     _PyParallel_DisassociateCurrentThreadFromCallback();

  0045f	e8 00 00 00 00	 call	 _PyParallel_DisassociateCurrentThreadFromCallback

; 5123 :     err = WaitForSingleObject(item->p4, INFINITE);

  00464	ba ff ff ff ff	 mov	 edx, -1			; ffffffffH
  00469	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR item$[rsp]
  00471	48 8b 48 38	 mov	 rcx, QWORD PTR [rax+56]
  00475	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WaitForSingleObject
  0047b	89 44 24 78	 mov	 DWORD PTR err$[rsp], eax

; 5124 :     switch (err) {

  0047f	8b 44 24 78	 mov	 eax, DWORD PTR err$[rsp]
  00483	89 84 24 90 00
	00 00		 mov	 DWORD PTR tv219[rsp], eax
  0048a	83 bc 24 90 00
	00 00 ff	 cmp	 DWORD PTR tv219[rsp], -1
  00492	74 4c		 je	 SHORT $LN2@call_from_
  00494	81 bc 24 90 00
	00 00 80 00 00
	00		 cmp	 DWORD PTR tv219[rsp], 128 ; 00000080H
  0049f	74 0f		 je	 SHORT $LN4@call_from_
  004a1	81 bc 24 90 00
	00 00 02 01 00
	00		 cmp	 DWORD PTR tv219[rsp], 258 ; 00000102H
  004ac	74 1a		 je	 SHORT $LN3@call_from_
  004ae	eb 3c		 jmp	 SHORT $LN5@call_from_
$LN4@call_from_:

; 5125 :         case WAIT_ABANDONED:
; 5126 :             PyErr_SetString(PyExc_SystemError, "wait abandoned");

  004b0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0P@BLBOHJGC@wait?5abandoned?$AA@
  004b7	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SystemError
  004be	e8 00 00 00 00	 call	 PyErr_SetString

; 5127 :             goto cleanup;

  004c3	e9 50 01 00 00	 jmp	 $cleanup$129749
$LN3@call_from_:

; 5128 :         case WAIT_TIMEOUT:
; 5129 :             PyErr_SetString(PyExc_SystemError, "infinite wait timed out?");

  004c8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@IMPAOHD@infinite?5wait?5timed?5out?$DP?$AA@
  004cf	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SystemError
  004d6	e8 00 00 00 00	 call	 PyErr_SetString

; 5130 :             goto cleanup;

  004db	e9 38 01 00 00	 jmp	 $cleanup$129749
$LN2@call_from_:

; 5131 :         case WAIT_FAILED:
; 5132 :             PyErr_SetFromWindowsErr(0);

  004e0	33 c9		 xor	 ecx, ecx
  004e2	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr

; 5133 :             goto cleanup;

  004e7	e9 2c 01 00 00	 jmp	 $cleanup$129749
$LN5@call_from_:

; 5134 :     }
; 5135 :     assert(err == WAIT_OBJECT_0);

  004ec	83 7c 24 78 00	 cmp	 DWORD PTR err$[rsp], 0
  004f1	74 1c		 je	 SHORT $LN35@call_from_
  004f3	41 b8 0f 14 00
	00		 mov	 r8d, 5135		; 0000140fH
  004f9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00500	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@DPEMMKCH@?$AAe?$AAr?$AAr?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAW?$AAA?$AAI?$AAT?$AA_?$AAO?$AAB?$AAJ?$AAE?$AAC?$AAT?$AA_?$AA0?$AA?$AA@
  00507	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0050d	33 c0		 xor	 eax, eax
$LN35@call_from_:

; 5136 : 
; 5137 :     if (item->p1 && PyExceptionClass_Check((PyObject *)item->p1)) {

  0050f	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR item$[rsp]
  00517	48 83 78 20 00	 cmp	 QWORD PTR [rax+32], 0
  0051c	74 68		 je	 SHORT $LN1@call_from_
  0051e	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR item$[rsp]
  00526	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0052a	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0052e	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00534	25 00 00 00 80	 and	 eax, -2147483648	; ffffffff80000000H
  00539	85 c0		 test	 eax, eax
  0053b	74 49		 je	 SHORT $LN1@call_from_
  0053d	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR item$[rsp]
  00545	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00549	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0054f	25 00 00 00 40	 and	 eax, 1073741824		; 40000000H
  00554	85 c0		 test	 eax, eax
  00556	74 2e		 je	 SHORT $LN1@call_from_

; 5138 :         PyErr_Restore((PyObject *)item->p1,
; 5139 :                       (PyObject *)item->p2,
; 5140 :                       (PyObject *)item->p3);

  00558	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR item$[rsp]
  00560	4c 8b 40 30	 mov	 r8, QWORD PTR [rax+48]
  00564	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR item$[rsp]
  0056c	48 8b 50 28	 mov	 rdx, QWORD PTR [rax+40]
  00570	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR item$[rsp]
  00578	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  0057c	e8 00 00 00 00	 call	 PyErr_Restore

; 5141 :         goto cleanup;

  00581	e9 92 00 00 00	 jmp	 $cleanup$129749
$LN1@call_from_:

; 5142 :     }
; 5143 : 
; 5144 :     assert(item->p1 == NULL);

  00586	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR item$[rsp]
  0058e	48 83 78 20 00	 cmp	 QWORD PTR [rax+32], 0
  00593	74 1c		 je	 SHORT $LN36@call_from_
  00595	41 b8 18 14 00
	00		 mov	 r8d, 5144		; 00001418H
  0059b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  005a2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CC@OLEPCABH@?$AAi?$AAt?$AAe?$AAm?$AA?9?$AA?$DO?$AAp?$AA1?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
  005a9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  005af	33 c0		 xor	 eax, eax
$LN36@call_from_:

; 5145 :     assert(item->p2 != NULL);

  005b1	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR item$[rsp]
  005b9	48 83 78 28 00	 cmp	 QWORD PTR [rax+40], 0
  005be	75 1c		 jne	 SHORT $LN37@call_from_
  005c0	41 b8 19 14 00
	00		 mov	 r8d, 5145		; 00001419H
  005c6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  005cd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CC@FODIAIL@?$AAi?$AAt?$AAe?$AAm?$AA?9?$AA?$DO?$AAp?$AA2?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
  005d4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  005da	33 c0		 xor	 eax, eax
$LN37@call_from_:

; 5146 :     assert(item->p3 == NULL);

  005dc	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR item$[rsp]
  005e4	48 83 78 30 00	 cmp	 QWORD PTR [rax+48], 0
  005e9	74 1c		 je	 SHORT $LN38@call_from_
  005eb	41 b8 1a 14 00
	00		 mov	 r8d, 5146		; 0000141aH
  005f1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  005f8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CC@CBIBFGJL@?$AAi?$AAt?$AAe?$AAm?$AA?9?$AA?$DO?$AAp?$AA3?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
  005ff	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00605	33 c0		 xor	 eax, eax
$LN38@call_from_:

; 5147 :     result = (PyObject *)item->p2;

  00607	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR item$[rsp]
  0060f	48 8b 40 28	 mov	 rax, QWORD PTR [rax+40]
  00613	48 89 44 24 68	 mov	 QWORD PTR result$[rsp], rax
$cleanup$129749:

; 5148 : 
; 5149 : cleanup:
; 5150 :     assert(c->decref == NULL);

  00618	48 8b 44 24 70	 mov	 rax, QWORD PTR c$[rsp]
  0061d	48 83 b8 50 33
	00 00 00	 cmp	 QWORD PTR [rax+13136], 0
  00625	74 1c		 je	 SHORT $LN39@call_from_
  00627	41 b8 1e 14 00
	00		 mov	 r8d, 5150		; 0000141eH
  0062d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00634	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CE@PACILGBH@?$AAc?$AA?9?$AA?$DO?$AAd?$AAe?$AAc?$AAr?$AAe?$AAf?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
  0063b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00641	33 c0		 xor	 eax, eax
$LN39@call_from_:

; 5151 :     InterlockedDecrement(&(px->sync_wait_inflight));

  00643	48 8b 44 24 58	 mov	 rax, QWORD PTR px$[rsp]
  00648	48 05 84 01 00
	00		 add	 rax, 388		; 00000184H
  0064e	f0 ff 08	 lock dec DWORD PTR [rax]

; 5152 :     InterlockedIncrement64(&(px->sync_wait_done));

  00651	48 8b 44 24 58	 mov	 rax, QWORD PTR px$[rsp]
  00656	48 05 88 01 00
	00		 add	 rax, 392		; 00000188H
  0065c	f0 48 ff 00	 lock inc QWORD PTR [rax]

; 5153 : 
; 5154 :     CloseHandle(item->p4);

  00660	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR item$[rsp]
  00668	48 8b 48 38	 mov	 rcx, QWORD PTR [rax+56]
  0066c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CloseHandle

; 5155 :     item->p4 = NULL;

  00672	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR item$[rsp]
  0067a	48 c7 40 38 00
	00 00 00	 mov	 QWORD PTR [rax+56], 0
$error$129709:

; 5156 : error:
; 5157 :     _PyHeap_Free(c, item);

  00682	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR item$[rsp]
  0068a	48 8b 4c 24 70	 mov	 rcx, QWORD PTR c$[rsp]
  0068f	e8 00 00 00 00	 call	 _PyHeap_Free

; 5158 : 
; 5159 :     return result;

  00694	48 8b 44 24 68	 mov	 rax, QWORD PTR result$[rsp]
$LN29@call_from_:

; 5160 : }

  00699	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  006a0	c3		 ret	 0
_call_from_main_thread ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_async_call_from_main_thread DD imagerel $LN3
	DD	imagerel $LN3+37
	DD	imagerel $unwind$_async_call_from_main_thread
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_async_call_from_main_thread DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _async_call_from_main_thread
_TEXT	SEGMENT
self$ = 48
args$ = 56
_async_call_from_main_thread PROC			; COMDAT

; 5164 : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 5165 :     return _call_from_main_thread(self, args, 0);

  0000e	45 33 c0	 xor	 r8d, r8d
  00011	48 8b 54 24 38	 mov	 rdx, QWORD PTR args$[rsp]
  00016	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self$[rsp]
  0001b	e8 00 00 00 00	 call	 _call_from_main_thread

; 5166 : }

  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	c3		 ret	 0
_async_call_from_main_thread ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_async_call_from_main_thread_and_wait DD imagerel $LN3
	DD	imagerel $LN3+40
	DD	imagerel $unwind$_async_call_from_main_thread_and_wait
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_async_call_from_main_thread_and_wait DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _async_call_from_main_thread_and_wait
_TEXT	SEGMENT
self$ = 48
args$ = 56
_async_call_from_main_thread_and_wait PROC		; COMDAT

; 5170 : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 5171 :     return _call_from_main_thread(self, args, 1);

  0000e	41 b8 01 00 00
	00		 mov	 r8d, 1
  00014	48 8b 54 24 38	 mov	 rdx, QWORD PTR args$[rsp]
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self$[rsp]
  0001e	e8 00 00 00 00	 call	 _call_from_main_thread

; 5172 : }

  00023	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00027	c3		 ret	 0
_async_call_from_main_thread_and_wait ENDP
_TEXT	ENDS
PUBLIC	??_C@_02PHOHPJPD@O?$CB?$AA@			; `string'
EXTRN	__imp_SetEndOfFile:PROC
EXTRN	__imp_SetFilePointerEx:PROC
EXTRN	PyErr_SetFromWindowsErrWithUnicodeFilename:PROC
EXTRN	__imp_CreateFileW:PROC
EXTRN	_PyErr_BadInternalCall:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_async_filecloser DD imagerel $LN22
	DD	imagerel $LN22+660
	DD	imagerel $unwind$_async_filecloser
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_async_filecloser DD 010e01H
	DD	0e20eH
xdata	ENDS
;	COMDAT ??_C@_02PHOHPJPD@O?$CB?$AA@
CONST	SEGMENT
??_C@_02PHOHPJPD@O?$CB?$AA@ DB 'O!', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _async_filecloser
_TEXT	SEGMENT
f$ = 64
result$ = 72
o$ = 80
i$129814 = 88
n$129812 = 96
u$129813 = 104
self$ = 128
args$ = 136
_async_filecloser PROC					; COMDAT

; 5176 : {

$LN22:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 5177 :     fileio *f;
; 5178 :     PyObject *o, *result = NULL;

  0000e	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR result$[rsp], 0

; 5179 : 
; 5180 :     if (!PyTuple_Check(args)) {

  00017	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR args$[rsp]
  0001f	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00023	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00029	25 00 00 00 04	 and	 eax, 67108864		; 04000000H
  0002e	85 c0		 test	 eax, eax
  00030	75 18		 jne	 SHORT $LN18@async_file

; 5181 :         PyErr_BadInternalCall();

  00032	ba 3d 14 00 00	 mov	 edx, 5181		; 0000143dH
  00037	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BH@PGHBGAOD@?4?4?2Python?2pyparallel?4c?$AA@
  0003e	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 5182 :         return NULL;

  00043	33 c0		 xor	 eax, eax
  00045	e9 45 02 00 00	 jmp	 $LN19@async_file
$LN18@async_file:

; 5183 :     }
; 5184 : 
; 5185 :     if (!PyArg_ParseTuple(args, "O!", &PyFileIO_Type, &f))

  0004a	4c 8d 4c 24 40	 lea	 r9, QWORD PTR f$[rsp]
  0004f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:PyFileIO_Type
  00056	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02PHOHPJPD@O?$CB?$AA@
  0005d	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  00065	e8 00 00 00 00	 call	 PyArg_ParseTuple
  0006a	85 c0		 test	 eax, eax
  0006c	75 07		 jne	 SHORT $LN17@async_file

; 5186 :         return NULL;

  0006e	33 c0		 xor	 eax, eax
  00070	e9 1a 02 00 00	 jmp	 $LN19@async_file
$LN17@async_file:

; 5187 : 
; 5188 :     if (!f->h || f->h == INVALID_HANDLE_VALUE) {

  00075	48 8b 44 24 40	 mov	 rax, QWORD PTR f$[rsp]
  0007a	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  00082	74 0f		 je	 SHORT $LN15@async_file
  00084	48 8b 44 24 40	 mov	 rax, QWORD PTR f$[rsp]
  00089	48 83 b8 80 00
	00 00 ff	 cmp	 QWORD PTR [rax+128], -1
  00091	75 18		 jne	 SHORT $LN16@async_file
$LN15@async_file:

; 5189 :         PyErr_BadInternalCall();

  00093	ba 45 14 00 00	 mov	 edx, 5189		; 00001445H
  00098	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BH@PGHBGAOD@?4?4?2Python?2pyparallel?4c?$AA@
  0009f	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 5190 :         return NULL;

  000a4	33 c0		 xor	 eax, eax
  000a6	e9 e4 01 00 00	 jmp	 $LN19@async_file
$LN16@async_file:

; 5191 :     }
; 5192 : 
; 5193 :     o = (PyObject *)f;

  000ab	48 8b 44 24 40	 mov	 rax, QWORD PTR f$[rsp]
  000b0	48 89 44 24 50	 mov	 QWORD PTR o$[rsp], rax

; 5194 : 
; 5195 :     _write_lock(o);

  000b5	48 8b 4c 24 50	 mov	 rcx, QWORD PTR o$[rsp]
  000ba	e8 00 00 00 00	 call	 _write_lock

; 5196 :     if (f->size > 0 && f->writable) {

  000bf	48 8b 44 24 40	 mov	 rax, QWORD PTR f$[rsp]
  000c4	48 83 b8 90 00
	00 00 00	 cmp	 QWORD PTR [rax+144], 0
  000cc	0f 8e 3e 01 00
	00		 jle	 $LN14@async_file
  000d2	48 8b 44 24 40	 mov	 rax, QWORD PTR f$[rsp]
  000d7	8b 40 64	 mov	 eax, DWORD PTR [rax+100]
  000da	c1 e8 02	 shr	 eax, 2
  000dd	83 e0 01	 and	 eax, 1
  000e0	85 c0		 test	 eax, eax
  000e2	0f 84 28 01 00
	00		 je	 $LN14@async_file

; 5197 :         LPCWSTR n;
; 5198 :         Py_UNICODE *u;
; 5199 :         LARGE_INTEGER i;
; 5200 : 
; 5201 :         u = f->name;

  000e8	48 8b 44 24 40	 mov	 rax, QWORD PTR f$[rsp]
  000ed	48 8b 80 88 00
	00 00		 mov	 rax, QWORD PTR [rax+136]
  000f4	48 89 44 24 68	 mov	 QWORD PTR u$129813[rsp], rax

; 5202 :         n = (LPCWSTR)u;

  000f9	48 8b 44 24 68	 mov	 rax, QWORD PTR u$129813[rsp]
  000fe	48 89 44 24 60	 mov	 QWORD PTR n$129812[rsp], rax
$LN13@async_file:

; 5203 : 
; 5204 :         Px_PROTECTION_GUARD(o);

  00103	48 8b 4c 24 50	 mov	 rcx, QWORD PTR o$[rsp]
  00108	e8 00 00 00 00	 call	 _protected
  0010d	0f be c0	 movsx	 eax, al
  00110	85 c0		 test	 eax, eax
  00112	75 13		 jne	 SHORT $LN10@async_file
  00114	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ProtectionError
  0011b	e8 00 00 00 00	 call	 PyErr_SetNone
  00120	33 c0		 xor	 eax, eax
  00122	e9 68 01 00 00	 jmp	 $LN19@async_file
$LN10@async_file:
  00127	33 c0		 xor	 eax, eax
  00129	85 c0		 test	 eax, eax
  0012b	75 d6		 jne	 SHORT $LN13@async_file

; 5205 :         /* Close the file and re-open without FILE_FLAG_NO_BUFFERING in order
; 5206 :          * to set the EOF marker to the correct position (as opposed to the
; 5207 :          * sector-aligned position we set it to as part of _async_fileopener).
; 5208 :          */
; 5209 :         CloseHandle(f->h);

  0012d	48 8b 44 24 40	 mov	 rax, QWORD PTR f$[rsp]
  00132	48 8b 88 80 00
	00 00		 mov	 rcx, QWORD PTR [rax+128]
  00139	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CloseHandle

; 5210 :         f->h = CreateFile(n, GENERIC_WRITE,
; 5211 :                           FILE_SHARE_READ | FILE_SHARE_WRITE,
; 5212 :                           NULL, OPEN_EXISTING, 0, NULL);

  0013f	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR [rsp+48], 0
  00148	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  00150	c7 44 24 20 03
	00 00 00	 mov	 DWORD PTR [rsp+32], 3
  00158	45 33 c9	 xor	 r9d, r9d
  0015b	41 b8 03 00 00
	00		 mov	 r8d, 3
  00161	ba 00 00 00 40	 mov	 edx, 1073741824		; 40000000H
  00166	48 8b 4c 24 60	 mov	 rcx, QWORD PTR n$129812[rsp]
  0016b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateFileW
  00171	48 8b 4c 24 40	 mov	 rcx, QWORD PTR f$[rsp]
  00176	48 89 81 80 00
	00 00		 mov	 QWORD PTR [rcx+128], rax

; 5213 : 
; 5214 :         if (!f->h || f->h == INVALID_HANDLE_VALUE) {

  0017d	48 8b 44 24 40	 mov	 rax, QWORD PTR f$[rsp]
  00182	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  0018a	74 0f		 je	 SHORT $LN8@async_file
  0018c	48 8b 44 24 40	 mov	 rax, QWORD PTR f$[rsp]
  00191	48 83 b8 80 00
	00 00 ff	 cmp	 QWORD PTR [rax+128], -1
  00199	75 11		 jne	 SHORT $LN9@async_file
$LN8@async_file:

; 5215 :             PyErr_SetFromWindowsErrWithUnicodeFilename(0, u);

  0019b	48 8b 54 24 68	 mov	 rdx, QWORD PTR u$129813[rsp]
  001a0	33 c9		 xor	 ecx, ecx
  001a2	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErrWithUnicodeFilename

; 5216 :             goto done;

  001a7	e9 8e 00 00 00	 jmp	 $done$129827
$LN9@async_file:

; 5217 :         }
; 5218 : 
; 5219 :         i.QuadPart = f->size;

  001ac	48 8b 44 24 40	 mov	 rax, QWORD PTR f$[rsp]
  001b1	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  001b8	48 89 44 24 58	 mov	 QWORD PTR i$129814[rsp], rax

; 5220 :         if (!SetFilePointerEx(f->h, i, NULL, FILE_BEGIN)) {

  001bd	45 33 c9	 xor	 r9d, r9d
  001c0	45 33 c0	 xor	 r8d, r8d
  001c3	48 8b 54 24 58	 mov	 rdx, QWORD PTR i$129814[rsp]
  001c8	48 8b 44 24 40	 mov	 rax, QWORD PTR f$[rsp]
  001cd	48 8b 88 80 00
	00 00		 mov	 rcx, QWORD PTR [rax+128]
  001d4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SetFilePointerEx
  001da	85 c0		 test	 eax, eax
  001dc	75 0e		 jne	 SHORT $LN7@async_file

; 5221 :             PyErr_SetFromWindowsErrWithUnicodeFilename(0, u);

  001de	48 8b 54 24 68	 mov	 rdx, QWORD PTR u$129813[rsp]
  001e3	33 c9		 xor	 ecx, ecx
  001e5	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErrWithUnicodeFilename

; 5222 :             goto done;

  001ea	eb 4e		 jmp	 SHORT $done$129827
$LN7@async_file:

; 5223 :         }
; 5224 : 
; 5225 :         if (!SetEndOfFile(f->h)) {

  001ec	48 8b 44 24 40	 mov	 rax, QWORD PTR f$[rsp]
  001f1	48 8b 88 80 00
	00 00		 mov	 rcx, QWORD PTR [rax+128]
  001f8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SetEndOfFile
  001fe	85 c0		 test	 eax, eax
  00200	75 0e		 jne	 SHORT $LN6@async_file

; 5226 :             PyErr_SetFromWindowsErrWithUnicodeFilename(0, u);

  00202	48 8b 54 24 68	 mov	 rdx, QWORD PTR u$129813[rsp]
  00207	33 c9		 xor	 ecx, ecx
  00209	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErrWithUnicodeFilename

; 5227 :             goto done;

  0020e	eb 2a		 jmp	 SHORT $done$129827
$LN6@async_file:
$LN14@async_file:

; 5228 :         }
; 5229 :     }
; 5230 : 
; 5231 :     CloseHandle(f->h);

  00210	48 8b 44 24 40	 mov	 rax, QWORD PTR f$[rsp]
  00215	48 8b 88 80 00
	00 00		 mov	 rcx, QWORD PTR [rax+128]
  0021c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CloseHandle

; 5232 :     f->fd = -1;

  00222	48 8b 44 24 40	 mov	 rax, QWORD PTR f$[rsp]
  00227	c7 40 60 ff ff
	ff ff		 mov	 DWORD PTR [rax+96], -1

; 5233 :     result = Py_True;

  0022e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  00235	48 89 44 24 48	 mov	 QWORD PTR result$[rsp], rax
$done$129827:

; 5234 : 
; 5235 : done:
; 5236 :     _write_unlock(o);

  0023a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR o$[rsp]
  0023f	e8 00 00 00 00	 call	 _write_unlock

; 5237 :     if (!result)

  00244	48 83 7c 24 48
	00		 cmp	 QWORD PTR result$[rsp], 0
  0024a	75 26		 jne	 SHORT $LN5@async_file

; 5238 :         assert(PyErr_Occurred());

  0024c	e8 00 00 00 00	 call	 PyErr_Occurred
  00251	48 85 c0	 test	 rax, rax
  00254	75 1c		 jne	 SHORT $LN21@async_file
  00256	41 b8 76 14 00
	00		 mov	 r8d, 5238		; 00001476H
  0025c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00263	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CC@DNBCFJEA@?$AAP?$AAy?$AAE?$AAr?$AAr?$AA_?$AAO?$AAc?$AAc?$AAu?$AAr?$AAr?$AAe?$AAd?$AA?$CI?$AA?$CJ?$AA?$AA@
  0026a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00270	33 c0		 xor	 eax, eax
$LN21@async_file:
$LN5@async_file:
$LN4@async_file:

; 5239 : 
; 5240 :     Py_XINCREF(result);

  00272	48 83 7c 24 48
	00		 cmp	 QWORD PTR result$[rsp], 0
  00278	74 0a		 je	 SHORT $LN1@async_file
  0027a	48 8b 4c 24 48	 mov	 rcx, QWORD PTR result$[rsp]
  0027f	e8 00 00 00 00	 call	 _Py_IncRef
$LN1@async_file:
  00284	33 c0		 xor	 eax, eax
  00286	85 c0		 test	 eax, eax
  00288	75 e8		 jne	 SHORT $LN4@async_file

; 5241 :     return result;

  0028a	48 8b 44 24 48	 mov	 rax, QWORD PTR result$[rsp]
$LN19@async_file:

; 5242 : }

  0028f	48 83 c4 78	 add	 rsp, 120		; 00000078H
  00293	c3		 ret	 0
_async_filecloser ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_async__close DD imagerel $LN4
	DD	imagerel $LN4+141
	DD	imagerel $unwind$_async__close
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_async__close DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _async__close
_TEXT	SEGMENT
f$ = 32
self$ = 64
obj$ = 72
_async__close PROC					; COMDAT

; 5247 : {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 5248 :     fileio   *f;
; 5249 : 
; 5250 :     Py_INCREF(obj);

  0000e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR obj$[rsp]
  00013	e8 00 00 00 00	 call	 _Py_IncRef

; 5251 :     if (!PyFileIO_Check(obj)) {

  00018	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyFileIO_Type
  0001f	48 8b 4c 24 48	 mov	 rcx, QWORD PTR obj$[rsp]
  00024	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00028	74 30		 je	 SHORT $LN1@async__clo
  0002a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyFileIO_Type
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR obj$[rsp]
  00036	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  0003a	e8 00 00 00 00	 call	 PyType_IsSubtype
  0003f	85 c0		 test	 eax, eax
  00041	75 17		 jne	 SHORT $LN1@async__clo

; 5252 :         PyErr_SetString(PyExc_ValueError, "not an io file object");

  00043	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@IOLDKAG@not?5an?5io?5file?5object?$AA@
  0004a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00051	e8 00 00 00 00	 call	 PyErr_SetString

; 5253 :         return NULL;

  00056	33 c0		 xor	 eax, eax
  00058	eb 2e		 jmp	 SHORT $LN2@async__clo
$LN1@async__clo:

; 5254 :     }
; 5255 : 
; 5256 :     f = (fileio *)obj;

  0005a	48 8b 44 24 48	 mov	 rax, QWORD PTR obj$[rsp]
  0005f	48 89 44 24 20	 mov	 QWORD PTR f$[rsp], rax

; 5257 :     Py_DECREF(f->owner);

  00064	48 8b 44 24 20	 mov	 rax, QWORD PTR f$[rsp]
  00069	48 8b 88 b8 00
	00 00		 mov	 rcx, QWORD PTR [rax+184]
  00070	e8 00 00 00 00	 call	 _Py_DecRef

; 5258 : 
; 5259 :     Py_RETURN_NONE;

  00075	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  0007c	e8 00 00 00 00	 call	 _Py_IncRef
  00081	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
$LN2@async__clo:

; 5260 : }

  00088	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0008c	c3		 ret	 0
_async__close ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BN@DOPCBCGK@invalid?5caching?5behavior?3?5?$CFd?$AA@ ; `string'
PUBLIC	??_C@_0BL@NMDENEGE@unexpected?5value?5for?5flags?$AA@ ; `string'
PUBLIC	??_C@_1CI@JLGGIHGD@?$AA?$CB?$AA?$CI?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5?$AAO?$AA_?$AAA?$AAP?$AAP?$AAE?$AAN?$AAD?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_0BD@JHNIJJCC@inOu?$CDiO?3fileopener?$AA@	; `string'
EXTRN	PyLong_FromVoidPtr:PROC
EXTRN	__imp_SetFileCompletionNotificationModes:PROC
EXTRN	PyErr_SetExcFromWindowsErrWithUnicodeFilename:PROC
EXTRN	PyExc_OSError:QWORD
EXTRN	__imp_FindClose:PROC
EXTRN	__imp_FindFirstFileW:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_async_fileopener DD imagerel $LN53
	DD	imagerel $LN53+1616
	DD	imagerel $unwind$_async_fileopener
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_async_fileopener DD 021101H
	DD	0690111H
xdata	ENDS
;	COMDAT ??_C@_0BN@DOPCBCGK@invalid?5caching?5behavior?3?5?$CFd?$AA@
CONST	SEGMENT
??_C@_0BN@DOPCBCGK@invalid?5caching?5behavior?3?5?$CFd?$AA@ DB 'invalid c'
	DB	'aching behavior: %d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@NMDENEGE@unexpected?5value?5for?5flags?$AA@
CONST	SEGMENT
??_C@_0BL@NMDENEGE@unexpected?5value?5for?5flags?$AA@ DB 'unexpected valu'
	DB	'e for flags', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CI@JLGGIHGD@?$AA?$CB?$AA?$CI?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5?$AAO?$AA_?$AAA?$AAP?$AAP?$AAE?$AAN?$AAD?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CI@JLGGIHGD@?$AA?$CB?$AA?$CI?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5?$AAO?$AA_?$AAA?$AAP?$AAP?$AAE?$AAN?$AAD?$AA?$CJ?$AA?$AA@ DB '!'
	DB	00H, '(', 00H, 'f', 00H, 'l', 00H, 'a', 00H, 'g', 00H, 's', 00H
	DB	' ', 00H, '&', 00H, ' ', 00H, 'O', 00H, '_', 00H, 'A', 00H, 'P'
	DB	00H, 'P', 00H, 'E', 00H, 'N', 00H, 'D', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@JHNIJJCC@inOu?$CDiO?3fileopener?$AA@
CONST	SEGMENT
??_C@_0BD@JHNIJJCC@inOu?$CDiO?3fileopener?$AA@ DB 'inOu#iO:fileopener', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _async_fileopener
_TEXT	SEGMENT
share$ = 80
h$ = 88
templ$ = 96
flags$ = 104
uname$ = 112
caching_behavior$ = 120
f$ = 128
file_flags$ = 136
access$ = 140
namelen$ = 144
fileobj$ = 152
size$ = 160
exists$ = 168
name$ = 176
d$ = 192
result$ = 784
notif_flags$ = 792
create_flags$ = 796
i$129929 = 800
tv161 = 808
tv167 = 812
tv173 = 816
tv176 = 820
self$ = 848
args$ = 856
_async_fileopener PROC					; COMDAT

; 5264 : {

$LN53:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec 48 03
	00 00		 sub	 rsp, 840		; 00000348H

; 5265 :     LPCWSTR name;
; 5266 :     Py_UNICODE *uname;
; 5267 :     int namelen;
; 5268 :     int flags;
; 5269 :     int caching_behavior;
; 5270 : 
; 5271 :     int access = 0;

  00011	c7 84 24 8c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR access$[rsp], 0

; 5272 :     int share = 0;

  0001c	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR share$[rsp], 0

; 5273 :     char notif_flags;
; 5274 : 
; 5275 :     int create_flags = 0;

  00024	c7 84 24 1c 03
	00 00 00 00 00
	00		 mov	 DWORD PTR create_flags$[rsp], 0

; 5276 :     int file_flags = FILE_FLAG_OVERLAPPED;

  0002f	c7 84 24 88 00
	00 00 00 00 00
	40		 mov	 DWORD PTR file_flags$[rsp], 1073741824 ; 40000000H

; 5277 : 
; 5278 :     int exists = 1;

  0003a	c7 84 24 a8 00
	00 00 01 00 00
	00		 mov	 DWORD PTR exists$[rsp], 1

; 5279 : 
; 5280 :     Py_ssize_t size = 0;

  00045	48 c7 84 24 a0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR size$[rsp], 0

; 5281 : 
; 5282 :     PyObject *templ;
; 5283 :     PyObject *result = NULL;

  00051	48 c7 84 24 10
	03 00 00 00 00
	00 00		 mov	 QWORD PTR result$[rsp], 0

; 5284 :     PyObject *fileobj;
; 5285 :     fileio   *f;
; 5286 : 
; 5287 :     HANDLE h;
; 5288 :     WIN32_FIND_DATA d;
; 5289 : 
; 5290 :     if (!PyArg_ParseTuple(args, "inOu#iO:fileopener", &caching_behavior,
; 5291 :                           &size, &templ, &uname, &namelen, &flags, &fileobj))

  0005d	48 8d 84 24 98
	00 00 00	 lea	 rax, QWORD PTR fileobj$[rsp]
  00065	48 89 44 24 40	 mov	 QWORD PTR [rsp+64], rax
  0006a	48 8d 44 24 68	 lea	 rax, QWORD PTR flags$[rsp]
  0006f	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00074	48 8d 84 24 90
	00 00 00	 lea	 rax, QWORD PTR namelen$[rsp]
  0007c	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00081	48 8d 44 24 70	 lea	 rax, QWORD PTR uname$[rsp]
  00086	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0008b	48 8d 44 24 60	 lea	 rax, QWORD PTR templ$[rsp]
  00090	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00095	4c 8d 8c 24 a0
	00 00 00	 lea	 r9, QWORD PTR size$[rsp]
  0009d	4c 8d 44 24 78	 lea	 r8, QWORD PTR caching_behavior$[rsp]
  000a2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@JHNIJJCC@inOu?$CDiO?3fileopener?$AA@
  000a9	48 8b 8c 24 58
	03 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  000b1	e8 00 00 00 00	 call	 PyArg_ParseTuple
  000b6	85 c0		 test	 eax, eax
  000b8	75 07		 jne	 SHORT $LN40@async_file@2

; 5292 :         return NULL;

  000ba	33 c0		 xor	 eax, eax
  000bc	e9 6f 05 00 00	 jmp	 $LN41@async_file@2
$LN40@async_file@2:

; 5293 : 
; 5294 :     name = (LPCWSTR)uname;

  000c1	48 8b 44 24 70	 mov	 rax, QWORD PTR uname$[rsp]
  000c6	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR name$[rsp], rax

; 5295 : 
; 5296 :     h = FindFirstFile(name, &d);

  000ce	48 8d 94 24 c0
	00 00 00	 lea	 rdx, QWORD PTR d$[rsp]
  000d6	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR name$[rsp]
  000de	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FindFirstFileW
  000e4	48 89 44 24 58	 mov	 QWORD PTR h$[rsp], rax

; 5297 :     if (h && h != INVALID_HANDLE_VALUE) {

  000e9	48 83 7c 24 58
	00		 cmp	 QWORD PTR h$[rsp], 0
  000ef	74 2a		 je	 SHORT $LN39@async_file@2
  000f1	48 83 7c 24 58
	ff		 cmp	 QWORD PTR h$[rsp], -1
  000f7	74 22		 je	 SHORT $LN39@async_file@2

; 5298 :         if (!FindClose(h)) {

  000f9	48 8b 4c 24 58	 mov	 rcx, QWORD PTR h$[rsp]
  000fe	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FindClose
  00104	85 c0		 test	 eax, eax
  00106	75 11		 jne	 SHORT $LN38@async_file@2

; 5299 :             PyErr_SetFromWindowsErrWithUnicodeFilename(0, uname);

  00108	48 8b 54 24 70	 mov	 rdx, QWORD PTR uname$[rsp]
  0010d	33 c9		 xor	 ecx, ecx
  0010f	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErrWithUnicodeFilename

; 5300 :             goto done;

  00114	e9 de 04 00 00	 jmp	 $done$129887
$LN38@async_file@2:

; 5301 :         }
; 5302 :     } else

  00119	eb 0b		 jmp	 SHORT $LN37@async_file@2
$LN39@async_file@2:

; 5303 :         exists = 0;

  0011b	c7 84 24 a8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR exists$[rsp], 0
$LN37@async_file@2:

; 5304 : 
; 5305 :     if (exists && (flags & O_EXCL)) {

  00126	83 bc 24 a8 00
	00 00 00	 cmp	 DWORD PTR exists$[rsp], 0
  0012e	74 51		 je	 SHORT $LN36@async_file@2
  00130	8b 44 24 68	 mov	 eax, DWORD PTR flags$[rsp]
  00134	25 00 04 00 00	 and	 eax, 1024		; 00000400H
  00139	85 c0		 test	 eax, eax
  0013b	74 44		 je	 SHORT $LN36@async_file@2

; 5306 :         assert(!(flags & O_APPEND));

  0013d	8b 44 24 68	 mov	 eax, DWORD PTR flags$[rsp]
  00141	83 e0 08	 and	 eax, 8
  00144	85 c0		 test	 eax, eax
  00146	74 1c		 je	 SHORT $LN43@async_file@2
  00148	41 b8 ba 14 00
	00		 mov	 r8d, 5306		; 000014baH
  0014e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00155	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CI@JLGGIHGD@?$AA?$CB?$AA?$CI?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5?$AAO?$AA_?$AAA?$AAP?$AAP?$AAE?$AAN?$AAD?$AA?$CJ?$AA?$AA@
  0015c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00162	33 c0		 xor	 eax, eax
$LN43@async_file@2:

; 5307 :         PyErr_SetExcFromWindowsErrWithUnicodeFilename(
; 5308 :             PyExc_OSError,
; 5309 :             EEXIST,
; 5310 :             uname
; 5311 :         );

  00164	4c 8b 44 24 70	 mov	 r8, QWORD PTR uname$[rsp]
  00169	ba 11 00 00 00	 mov	 edx, 17
  0016e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_OSError
  00175	e8 00 00 00 00	 call	 PyErr_SetExcFromWindowsErrWithUnicodeFilename

; 5312 :         goto done;

  0017a	e9 78 04 00 00	 jmp	 $done$129887
  0017f	eb 57		 jmp	 SHORT $LN35@async_file@2
$LN36@async_file@2:

; 5313 :     } else if (!exists && (flags & O_RDONLY)) {

  00181	83 bc 24 a8 00
	00 00 00	 cmp	 DWORD PTR exists$[rsp], 0
  00189	75 4d		 jne	 SHORT $LN34@async_file@2
  0018b	8b 44 24 68	 mov	 eax, DWORD PTR flags$[rsp]
  0018f	83 e0 00	 and	 eax, 0
  00192	85 c0		 test	 eax, eax
  00194	74 42		 je	 SHORT $LN34@async_file@2

; 5314 :         assert(!(flags & O_APPEND));

  00196	8b 44 24 68	 mov	 eax, DWORD PTR flags$[rsp]
  0019a	83 e0 08	 and	 eax, 8
  0019d	85 c0		 test	 eax, eax
  0019f	74 1c		 je	 SHORT $LN44@async_file@2
  001a1	41 b8 c2 14 00
	00		 mov	 r8d, 5314		; 000014c2H
  001a7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  001ae	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CI@JLGGIHGD@?$AA?$CB?$AA?$CI?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5?$AAO?$AA_?$AAA?$AAP?$AAP?$AAE?$AAN?$AAD?$AA?$CJ?$AA?$AA@
  001b5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001bb	33 c0		 xor	 eax, eax
$LN44@async_file@2:

; 5315 :         PyErr_SetExcFromWindowsErrWithUnicodeFilename(
; 5316 :             PyExc_OSError,
; 5317 :             ENOENT,
; 5318 :             uname
; 5319 :         );

  001bd	4c 8b 44 24 70	 mov	 r8, QWORD PTR uname$[rsp]
  001c2	ba 02 00 00 00	 mov	 edx, 2
  001c7	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_OSError
  001ce	e8 00 00 00 00	 call	 PyErr_SetExcFromWindowsErrWithUnicodeFilename

; 5320 :         goto done;

  001d3	e9 1f 04 00 00	 jmp	 $done$129887
$LN34@async_file@2:
$LN35@async_file@2:

; 5321 :     }
; 5322 : 
; 5323 :     if (flags & O_RDONLY)

  001d8	8b 44 24 68	 mov	 eax, DWORD PTR flags$[rsp]
  001dc	83 e0 00	 and	 eax, 0
  001df	85 c0		 test	 eax, eax
  001e1	74 11		 je	 SHORT $LN33@async_file@2

; 5324 :         file_flags |= FILE_ATTRIBUTE_READONLY;

  001e3	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR file_flags$[rsp]
  001ea	83 c8 01	 or	 eax, 1
  001ed	89 84 24 88 00
	00 00		 mov	 DWORD PTR file_flags$[rsp], eax
$LN33@async_file@2:

; 5325 : 
; 5326 :     if (flags & (O_RDWR | O_RDONLY)) {

  001f4	8b 44 24 68	 mov	 eax, DWORD PTR flags$[rsp]
  001f8	83 e0 02	 and	 eax, 2
  001fb	85 c0		 test	 eax, eax
  001fd	74 1d		 je	 SHORT $LN32@async_file@2

; 5327 :         access |= GENERIC_READ;

  001ff	8b 84 24 8c 00
	00 00		 mov	 eax, DWORD PTR access$[rsp]
  00206	0f ba e8 1f	 bts	 eax, 31
  0020a	89 84 24 8c 00
	00 00		 mov	 DWORD PTR access$[rsp], eax

; 5328 :         share  |= FILE_SHARE_READ;

  00211	8b 44 24 50	 mov	 eax, DWORD PTR share$[rsp]
  00215	83 c8 01	 or	 eax, 1
  00218	89 44 24 50	 mov	 DWORD PTR share$[rsp], eax
$LN32@async_file@2:

; 5329 :     }
; 5330 : 
; 5331 :     if (flags & (O_RDWR | O_WRONLY)) {

  0021c	8b 44 24 68	 mov	 eax, DWORD PTR flags$[rsp]
  00220	83 e0 03	 and	 eax, 3
  00223	85 c0		 test	 eax, eax
  00225	74 1d		 je	 SHORT $LN31@async_file@2

; 5332 :         access |= GENERIC_WRITE;

  00227	8b 84 24 8c 00
	00 00		 mov	 eax, DWORD PTR access$[rsp]
  0022e	0f ba e8 1e	 bts	 eax, 30
  00232	89 84 24 8c 00
	00 00		 mov	 DWORD PTR access$[rsp], eax

; 5333 :         share  |= FILE_SHARE_WRITE;

  00239	8b 44 24 50	 mov	 eax, DWORD PTR share$[rsp]
  0023d	83 c8 02	 or	 eax, 2
  00240	89 44 24 50	 mov	 DWORD PTR share$[rsp], eax
$LN31@async_file@2:

; 5334 :     }
; 5335 : 
; 5336 :     if (flags & O_APPEND) {

  00244	8b 44 24 68	 mov	 eax, DWORD PTR flags$[rsp]
  00248	83 e0 08	 and	 eax, 8
  0024b	85 c0		 test	 eax, eax
  0024d	74 1c		 je	 SHORT $LN30@async_file@2

; 5337 :         access |= FILE_APPEND_DATA;

  0024f	8b 84 24 8c 00
	00 00		 mov	 eax, DWORD PTR access$[rsp]
  00256	83 c8 04	 or	 eax, 4
  00259	89 84 24 8c 00
	00 00		 mov	 DWORD PTR access$[rsp], eax

; 5338 :         share  |= FILE_SHARE_WRITE;

  00260	8b 44 24 50	 mov	 eax, DWORD PTR share$[rsp]
  00264	83 c8 02	 or	 eax, 2
  00267	89 44 24 50	 mov	 DWORD PTR share$[rsp], eax
$LN30@async_file@2:

; 5339 :     }
; 5340 : 
; 5341 :     /* There's not a 1:1 mapping between create flags and POSIX flags, so
; 5342 :      * the following code is a bit fiddly. */
; 5343 :     if (flags & O_RDONLY)

  0026b	8b 44 24 68	 mov	 eax, DWORD PTR flags$[rsp]
  0026f	83 e0 00	 and	 eax, 0
  00272	85 c0		 test	 eax, eax
  00274	74 10		 je	 SHORT $LN29@async_file@2

; 5344 :         create_flags = OPEN_EXISTING;

  00276	c7 84 24 1c 03
	00 00 03 00 00
	00		 mov	 DWORD PTR create_flags$[rsp], 3
  00281	e9 f7 00 00 00	 jmp	 $LN28@async_file@2
$LN29@async_file@2:

; 5345 : 
; 5346 :     else if (flags & O_WRONLY)

  00286	8b 44 24 68	 mov	 eax, DWORD PTR flags$[rsp]
  0028a	83 e0 01	 and	 eax, 1
  0028d	85 c0		 test	 eax, eax
  0028f	74 35		 je	 SHORT $LN27@async_file@2

; 5347 :         create_flags = (exists ? TRUNCATE_EXISTING : CREATE_ALWAYS);

  00291	83 bc 24 a8 00
	00 00 00	 cmp	 DWORD PTR exists$[rsp], 0
  00299	74 0d		 je	 SHORT $LN45@async_file@2
  0029b	c7 84 24 28 03
	00 00 05 00 00
	00		 mov	 DWORD PTR tv161[rsp], 5
  002a6	eb 0b		 jmp	 SHORT $LN46@async_file@2
$LN45@async_file@2:
  002a8	c7 84 24 28 03
	00 00 02 00 00
	00		 mov	 DWORD PTR tv161[rsp], 2
$LN46@async_file@2:
  002b3	8b 84 24 28 03
	00 00		 mov	 eax, DWORD PTR tv161[rsp]
  002ba	89 84 24 1c 03
	00 00		 mov	 DWORD PTR create_flags$[rsp], eax
  002c1	e9 b7 00 00 00	 jmp	 $LN26@async_file@2
$LN27@async_file@2:

; 5348 : 
; 5349 :     else if ((flags & O_RDWR) || (flags & O_APPEND))

  002c6	8b 44 24 68	 mov	 eax, DWORD PTR flags$[rsp]
  002ca	83 e0 02	 and	 eax, 2
  002cd	85 c0		 test	 eax, eax
  002cf	75 0b		 jne	 SHORT $LN24@async_file@2
  002d1	8b 44 24 68	 mov	 eax, DWORD PTR flags$[rsp]
  002d5	83 e0 08	 and	 eax, 8
  002d8	85 c0		 test	 eax, eax
  002da	74 32		 je	 SHORT $LN25@async_file@2
$LN24@async_file@2:

; 5350 :         create_flags = (exists ? OPEN_EXISTING : CREATE_ALWAYS);

  002dc	83 bc 24 a8 00
	00 00 00	 cmp	 DWORD PTR exists$[rsp], 0
  002e4	74 0d		 je	 SHORT $LN47@async_file@2
  002e6	c7 84 24 2c 03
	00 00 03 00 00
	00		 mov	 DWORD PTR tv167[rsp], 3
  002f1	eb 0b		 jmp	 SHORT $LN48@async_file@2
$LN47@async_file@2:
  002f3	c7 84 24 2c 03
	00 00 02 00 00
	00		 mov	 DWORD PTR tv167[rsp], 2
$LN48@async_file@2:
  002fe	8b 84 24 2c 03
	00 00		 mov	 eax, DWORD PTR tv167[rsp]
  00305	89 84 24 1c 03
	00 00		 mov	 DWORD PTR create_flags$[rsp], eax
  0030c	eb 6f		 jmp	 SHORT $LN23@async_file@2
$LN25@async_file@2:

; 5351 : 
; 5352 :     else if (flags & O_EXCL)

  0030e	8b 44 24 68	 mov	 eax, DWORD PTR flags$[rsp]
  00312	25 00 04 00 00	 and	 eax, 1024		; 00000400H
  00317	85 c0		 test	 eax, eax
  00319	74 0d		 je	 SHORT $LN22@async_file@2

; 5353 :         create_flags = CREATE_NEW;

  0031b	c7 84 24 1c 03
	00 00 01 00 00
	00		 mov	 DWORD PTR create_flags$[rsp], 1
  00326	eb 55		 jmp	 SHORT $LN21@async_file@2
$LN22@async_file@2:

; 5354 : 
; 5355 :     else if (flags & O_APPEND)

  00328	8b 44 24 68	 mov	 eax, DWORD PTR flags$[rsp]
  0032c	83 e0 08	 and	 eax, 8
  0032f	85 c0		 test	 eax, eax
  00331	74 32		 je	 SHORT $LN20@async_file@2

; 5356 :         create_flags = (exists ? OPEN_EXISTING : CREATE_ALWAYS);

  00333	83 bc 24 a8 00
	00 00 00	 cmp	 DWORD PTR exists$[rsp], 0
  0033b	74 0d		 je	 SHORT $LN49@async_file@2
  0033d	c7 84 24 30 03
	00 00 03 00 00
	00		 mov	 DWORD PTR tv173[rsp], 3
  00348	eb 0b		 jmp	 SHORT $LN50@async_file@2
$LN49@async_file@2:
  0034a	c7 84 24 30 03
	00 00 02 00 00
	00		 mov	 DWORD PTR tv173[rsp], 2
$LN50@async_file@2:
  00355	8b 84 24 30 03
	00 00		 mov	 eax, DWORD PTR tv173[rsp]
  0035c	89 84 24 1c 03
	00 00		 mov	 DWORD PTR create_flags$[rsp], eax

; 5357 : 
; 5358 :     else {

  00363	eb 18		 jmp	 SHORT $LN19@async_file@2
$LN20@async_file@2:

; 5359 :         PyErr_SetString(PyExc_ValueError, "unexpected value for flags");

  00365	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BL@NMDENEGE@unexpected?5value?5for?5flags?$AA@
  0036c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00373	e8 00 00 00 00	 call	 PyErr_SetString

; 5360 :         goto done;

  00378	e9 7a 02 00 00	 jmp	 $done$129887
$LN19@async_file@2:
$LN21@async_file@2:
$LN23@async_file@2:
$LN26@async_file@2:
$LN28@async_file@2:

; 5361 :     }
; 5362 : 
; 5363 :     switch (caching_behavior) {

  0037d	8b 44 24 78	 mov	 eax, DWORD PTR caching_behavior$[rsp]
  00381	89 84 24 34 03
	00 00		 mov	 DWORD PTR tv176[rsp], eax
  00388	83 bc 24 34 03
	00 00 05	 cmp	 DWORD PTR tv176[rsp], 5
  00390	0f 87 81 00 00
	00		 ja	 $LN10@async_file@2
  00396	48 63 84 24 34
	03 00 00	 movsxd	 rax, DWORD PTR tv176[rsp]
  0039e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  003a5	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN52@async_file@2[rcx+rax*4]
  003ac	48 03 c1	 add	 rax, rcx
  003af	ff e0		 jmp	 rax
$LN16@async_file@2:

; 5364 :         case PyAsync_CACHING_DEFAULT:
; 5365 :             file_flags |= FILE_FLAG_NO_BUFFERING;

  003b1	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR file_flags$[rsp]
  003b8	0f ba e8 1d	 bts	 eax, 29
  003bc	89 84 24 88 00
	00 00		 mov	 DWORD PTR file_flags$[rsp], eax

; 5366 :             break;

  003c3	eb 6f		 jmp	 SHORT $LN17@async_file@2
$LN15@async_file@2:

; 5367 : 
; 5368 :         case PyAsync_CACHING_BUFFERED:
; 5369 :             break;

  003c5	eb 6d		 jmp	 SHORT $LN17@async_file@2
$LN14@async_file@2:

; 5370 : 
; 5371 :         case PyAsync_CACHING_RANDOMACCESS:
; 5372 :             file_flags |= FILE_FLAG_RANDOM_ACCESS;

  003c7	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR file_flags$[rsp]
  003ce	0f ba e8 1c	 bts	 eax, 28
  003d2	89 84 24 88 00
	00 00		 mov	 DWORD PTR file_flags$[rsp], eax

; 5373 :             break;

  003d9	eb 59		 jmp	 SHORT $LN17@async_file@2
$LN13@async_file@2:

; 5374 : 
; 5375 :         case PyAsync_CACHING_SEQUENTIALSCAN:
; 5376 :             file_flags |= FILE_FLAG_SEQUENTIAL_SCAN;

  003db	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR file_flags$[rsp]
  003e2	0f ba e8 1b	 bts	 eax, 27
  003e6	89 84 24 88 00
	00 00		 mov	 DWORD PTR file_flags$[rsp], eax

; 5377 :             break;

  003ed	eb 45		 jmp	 SHORT $LN17@async_file@2
$LN12@async_file@2:

; 5378 : 
; 5379 :         case PyAsync_CACHING_WRITETHROUGH:
; 5380 :             file_flags |= FILE_FLAG_WRITE_THROUGH;

  003ef	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR file_flags$[rsp]
  003f6	0f ba e8 1f	 bts	 eax, 31
  003fa	89 84 24 88 00
	00 00		 mov	 DWORD PTR file_flags$[rsp], eax

; 5381 :             break;

  00401	eb 31		 jmp	 SHORT $LN17@async_file@2
$LN11@async_file@2:

; 5382 : 
; 5383 :         case PyAsync_CACHING_TEMPORARY:
; 5384 :             file_flags |= FILE_ATTRIBUTE_TEMPORARY;

  00403	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR file_flags$[rsp]
  0040a	0f ba e8 08	 bts	 eax, 8
  0040e	89 84 24 88 00
	00 00		 mov	 DWORD PTR file_flags$[rsp], eax

; 5385 :             break;

  00415	eb 1d		 jmp	 SHORT $LN17@async_file@2
$LN10@async_file@2:

; 5386 : 
; 5387 :         default:
; 5388 :             PyErr_Format(PyExc_ValueError,
; 5389 :                          "invalid caching behavior: %d",
; 5390 :                          caching_behavior);

  00417	44 8b 44 24 78	 mov	 r8d, DWORD PTR caching_behavior$[rsp]
  0041c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@DOPCBCGK@invalid?5caching?5behavior?3?5?$CFd?$AA@
  00423	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0042a	e8 00 00 00 00	 call	 PyErr_Format

; 5391 :             goto done;

  0042f	e9 c3 01 00 00	 jmp	 $done$129887
$LN17@async_file@2:

; 5392 :     }
; 5393 : 
; 5394 :     h = CreateFile(name, access, share, 0, create_flags, file_flags, 0);

  00434	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR [rsp+48], 0
  0043d	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR file_flags$[rsp]
  00444	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00448	8b 84 24 1c 03
	00 00		 mov	 eax, DWORD PTR create_flags$[rsp]
  0044f	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00453	45 33 c9	 xor	 r9d, r9d
  00456	44 8b 44 24 50	 mov	 r8d, DWORD PTR share$[rsp]
  0045b	8b 94 24 8c 00
	00 00		 mov	 edx, DWORD PTR access$[rsp]
  00462	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR name$[rsp]
  0046a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateFileW
  00470	48 89 44 24 58	 mov	 QWORD PTR h$[rsp], rax

; 5395 :     if (!h || h == INVALID_HANDLE_VALUE) {

  00475	48 83 7c 24 58
	00		 cmp	 QWORD PTR h$[rsp], 0
  0047b	74 08		 je	 SHORT $LN8@async_file@2
  0047d	48 83 7c 24 58
	ff		 cmp	 QWORD PTR h$[rsp], -1
  00483	75 16		 jne	 SHORT $LN9@async_file@2
$LN8@async_file@2:

; 5396 :         PyErr_SetFromWindowsErrWithUnicodeFilename(0, uname);

  00485	48 8b 54 24 70	 mov	 rdx, QWORD PTR uname$[rsp]
  0048a	33 c9		 xor	 ecx, ecx
  0048c	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErrWithUnicodeFilename

; 5397 :         goto done;

  00491	e9 61 01 00 00	 jmp	 $done$129887
  00496	e9 8f 00 00 00	 jmp	 $LN7@async_file@2
$LN9@async_file@2:

; 5398 :     } else if (size > 0) {

  0049b	48 83 bc 24 a0
	00 00 00 00	 cmp	 QWORD PTR size$[rsp], 0
  004a4	0f 8e 80 00 00
	00		 jle	 $LN6@async_file@2

; 5399 :         LARGE_INTEGER i;
; 5400 :         i.QuadPart = Px_PAGE_ALIGN(size);

  004aa	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR size$[rsp]
  004b2	48 05 ff 0f 00
	00		 add	 rax, 4095		; 00000fffH
  004b8	48 25 00 f0 ff
	ff		 and	 rax, -4096		; fffffffffffff000H
  004be	48 89 84 24 20
	03 00 00	 mov	 QWORD PTR i$129929[rsp], rax

; 5401 :         if (!SetFilePointerEx(h, i, NULL, FILE_BEGIN)) {

  004c6	45 33 c9	 xor	 r9d, r9d
  004c9	45 33 c0	 xor	 r8d, r8d
  004cc	48 8b 94 24 20
	03 00 00	 mov	 rdx, QWORD PTR i$129929[rsp]
  004d4	48 8b 4c 24 58	 mov	 rcx, QWORD PTR h$[rsp]
  004d9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SetFilePointerEx
  004df	85 c0		 test	 eax, eax
  004e1	75 1c		 jne	 SHORT $LN5@async_file@2

; 5402 :             CloseHandle(h);

  004e3	48 8b 4c 24 58	 mov	 rcx, QWORD PTR h$[rsp]
  004e8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CloseHandle

; 5403 :             PyErr_SetFromWindowsErrWithUnicodeFilename(0, uname);

  004ee	48 8b 54 24 70	 mov	 rdx, QWORD PTR uname$[rsp]
  004f3	33 c9		 xor	 ecx, ecx
  004f5	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErrWithUnicodeFilename

; 5404 :             goto done;

  004fa	e9 f8 00 00 00	 jmp	 $done$129887
$LN5@async_file@2:

; 5405 :         }
; 5406 :         if (!SetEndOfFile(h)) {

  004ff	48 8b 4c 24 58	 mov	 rcx, QWORD PTR h$[rsp]
  00504	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SetEndOfFile
  0050a	85 c0		 test	 eax, eax
  0050c	75 1c		 jne	 SHORT $LN4@async_file@2

; 5407 :             CloseHandle(h);

  0050e	48 8b 4c 24 58	 mov	 rcx, QWORD PTR h$[rsp]
  00513	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CloseHandle

; 5408 :             PyErr_SetFromWindowsErrWithUnicodeFilename(0, uname);

  00519	48 8b 54 24 70	 mov	 rdx, QWORD PTR uname$[rsp]
  0051e	33 c9		 xor	 ecx, ecx
  00520	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErrWithUnicodeFilename

; 5409 :             goto done;

  00525	e9 cd 00 00 00	 jmp	 $done$129887
$LN4@async_file@2:
$LN6@async_file@2:
$LN7@async_file@2:

; 5410 :         }
; 5411 :     }
; 5412 : 
; 5413 :     notif_flags = (
; 5414 :         FILE_SKIP_COMPLETION_PORT_ON_SUCCESS |
; 5415 :         FILE_SKIP_SET_EVENT_ON_HANDLE
; 5416 :     );

  0052a	c6 84 24 18 03
	00 00 03	 mov	 BYTE PTR notif_flags$[rsp], 3

; 5417 :     if (!SetFileCompletionNotificationModes(h, notif_flags)) {

  00532	0f b6 94 24 18
	03 00 00	 movzx	 edx, BYTE PTR notif_flags$[rsp]
  0053a	48 8b 4c 24 58	 mov	 rcx, QWORD PTR h$[rsp]
  0053f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SetFileCompletionNotificationModes
  00545	85 c0		 test	 eax, eax
  00547	75 17		 jne	 SHORT $LN3@async_file@2

; 5418 :         CloseHandle(h);

  00549	48 8b 4c 24 58	 mov	 rcx, QWORD PTR h$[rsp]
  0054e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CloseHandle

; 5419 :         PyErr_SetFromWindowsErrWithUnicodeFilename(0, uname);

  00554	48 8b 54 24 70	 mov	 rdx, QWORD PTR uname$[rsp]
  00559	33 c9		 xor	 ecx, ecx
  0055b	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErrWithUnicodeFilename
$LN3@async_file@2:

; 5420 :     }
; 5421 : 
; 5422 :     if (!_protect(fileobj))

  00560	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR fileobj$[rsp]
  00568	e8 00 00 00 00	 call	 _protect
  0056d	48 85 c0	 test	 rax, rax
  00570	75 05		 jne	 SHORT $LN2@async_file@2

; 5423 :         goto done;

  00572	e9 80 00 00 00	 jmp	 $done$129887
$LN2@async_file@2:

; 5424 : 
; 5425 :     f = (fileio *)fileobj;

  00577	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR fileobj$[rsp]
  0057f	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR f$[rsp], rax

; 5426 :     f->h = h;

  00587	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR f$[rsp]
  0058f	48 8b 4c 24 58	 mov	 rcx, QWORD PTR h$[rsp]
  00594	48 89 88 80 00
	00 00		 mov	 QWORD PTR [rax+128], rcx

; 5427 :     f->native = 1;

  0059b	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR f$[rsp]
  005a3	c7 80 9c 00 00
	00 01 00 00 00	 mov	 DWORD PTR [rax+156], 1

; 5428 :     f->istty = 0;

  005ad	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR f$[rsp]
  005b5	c7 80 a0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+160], 0

; 5429 :     f->name = uname;

  005bf	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR f$[rsp]
  005c7	48 8b 4c 24 70	 mov	 rcx, QWORD PTR uname$[rsp]
  005cc	48 89 88 88 00
	00 00		 mov	 QWORD PTR [rax+136], rcx

; 5430 :     f->caching = caching_behavior;

  005d3	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR f$[rsp]
  005db	8b 4c 24 78	 mov	 ecx, DWORD PTR caching_behavior$[rsp]
  005df	89 88 98 00 00
	00		 mov	 DWORD PTR [rax+152], ecx

; 5431 : 
; 5432 :     result = PyLong_FromVoidPtr(h);

  005e5	48 8b 4c 24 58	 mov	 rcx, QWORD PTR h$[rsp]
  005ea	e8 00 00 00 00	 call	 PyLong_FromVoidPtr
  005ef	48 89 84 24 10
	03 00 00	 mov	 QWORD PTR result$[rsp], rax
$done$129887:

; 5433 : done:
; 5434 :     if (!result)

  005f7	48 83 bc 24 10
	03 00 00 00	 cmp	 QWORD PTR result$[rsp], 0
  00600	75 26		 jne	 SHORT $LN1@async_file@2

; 5435 :         assert(PyErr_Occurred());

  00602	e8 00 00 00 00	 call	 PyErr_Occurred
  00607	48 85 c0	 test	 rax, rax
  0060a	75 1c		 jne	 SHORT $LN51@async_file@2
  0060c	41 b8 3b 15 00
	00		 mov	 r8d, 5435		; 0000153bH
  00612	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00619	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CC@DNBCFJEA@?$AAP?$AAy?$AAE?$AAr?$AAr?$AA_?$AAO?$AAc?$AAc?$AAu?$AAr?$AAr?$AAe?$AAd?$AA?$CI?$AA?$CJ?$AA?$AA@
  00620	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00626	33 c0		 xor	 eax, eax
$LN51@async_file@2:
$LN1@async_file@2:

; 5436 : 
; 5437 :     return result;

  00628	48 8b 84 24 10
	03 00 00	 mov	 rax, QWORD PTR result$[rsp]
$LN41@async_file@2:

; 5438 : }

  00630	48 81 c4 48 03
	00 00		 add	 rsp, 840		; 00000348H
  00637	c3		 ret	 0
$LN52@async_file@2:
  00638	00 00 00 00	 DD	 $LN16@async_file@2
  0063c	00 00 00 00	 DD	 $LN15@async_file@2
  00640	00 00 00 00	 DD	 $LN14@async_file@2
  00644	00 00 00 00	 DD	 $LN13@async_file@2
  00648	00 00 00 00	 DD	 $LN12@async_file@2
  0064c	00 00 00 00	 DD	 $LN11@async_file@2
_async_fileopener ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CK@JMPLGHEN@non?9zero?5size?5invalid?5for?5read?9o@ ; `string'
PUBLIC	??_C@_1BI@HPMFCCG@?$AAf?$AA?9?$AA?$DO?$AAw?$AAr?$AAi?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_04MLLOGHAL@Onii?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$_async__post_open DD imagerel $LN7
	DD	imagerel $LN7+229
	DD	imagerel $unwind$_async__post_open
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_async__post_open DD 010e01H
	DD	0c20eH
xdata	ENDS
;	COMDAT ??_C@_0CK@JMPLGHEN@non?9zero?5size?5invalid?5for?5read?9o@
CONST	SEGMENT
??_C@_0CK@JMPLGHEN@non?9zero?5size?5invalid?5for?5read?9o@ DB 'non-zero s'
	DB	'ize invalid for read-only files', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1BI@HPMFCCG@?$AAf?$AA?9?$AA?$DO?$AAw?$AAr?$AAi?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1BI@HPMFCCG@?$AAf?$AA?9?$AA?$DO?$AAw?$AAr?$AAi?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?$AA@ DB 'f'
	DB	00H, '-', 00H, '>', 00H, 'w', 00H, 'r', 00H, 'i', 00H, 't', 00H
	DB	'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04MLLOGHAL@Onii?$AA@
CONST	SEGMENT
??_C@_04MLLOGHAL@Onii?$AA@ DB 'Onii', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _async__post_open
_TEXT	SEGMENT
caching$ = 48
f$ = 56
is_write$ = 64
size$ = 72
o$ = 80
self$ = 112
args$ = 120
_async__post_open PROC					; COMDAT

; 5442 : {

$LN7:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 5443 :     fileio     *f;
; 5444 :     PyObject   *o;
; 5445 :     Py_ssize_t  size;
; 5446 :     int         caching;
; 5447 :     int         is_write;
; 5448 : 
; 5449 :     if (!PyArg_ParseTuple(args, "Onii", &o, &caching, &size, &is_write))

  0000e	48 8d 44 24 40	 lea	 rax, QWORD PTR is_write$[rsp]
  00013	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00018	48 8d 44 24 48	 lea	 rax, QWORD PTR size$[rsp]
  0001d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00022	4c 8d 4c 24 30	 lea	 r9, QWORD PTR caching$[rsp]
  00027	4c 8d 44 24 50	 lea	 r8, QWORD PTR o$[rsp]
  0002c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04MLLOGHAL@Onii?$AA@
  00033	48 8b 4c 24 78	 mov	 rcx, QWORD PTR args$[rsp]
  00038	e8 00 00 00 00	 call	 PyArg_ParseTuple
  0003d	85 c0		 test	 eax, eax
  0003f	75 07		 jne	 SHORT $LN3@async__pos

; 5450 :         return NULL;

  00041	33 c0		 xor	 eax, eax
  00043	e9 98 00 00 00	 jmp	 $LN4@async__pos
$LN3@async__pos:

; 5451 : 
; 5452 :     f = (fileio *)o;

  00048	48 8b 44 24 50	 mov	 rax, QWORD PTR o$[rsp]
  0004d	48 89 44 24 38	 mov	 QWORD PTR f$[rsp], rax

; 5453 :     f->size = size;

  00052	48 8b 44 24 38	 mov	 rax, QWORD PTR f$[rsp]
  00057	48 8b 4c 24 48	 mov	 rcx, QWORD PTR size$[rsp]
  0005c	48 89 88 90 00
	00 00		 mov	 QWORD PTR [rax+144], rcx

; 5454 :     f->caching = caching;

  00063	48 8b 44 24 38	 mov	 rax, QWORD PTR f$[rsp]
  00068	8b 4c 24 30	 mov	 ecx, DWORD PTR caching$[rsp]
  0006c	89 88 98 00 00
	00		 mov	 DWORD PTR [rax+152], ecx

; 5455 : 
; 5456 :     if (is_write)

  00072	83 7c 24 40 00	 cmp	 DWORD PTR is_write$[rsp], 0
  00077	74 2e		 je	 SHORT $LN2@async__pos

; 5457 :         assert(f->writable);

  00079	48 8b 44 24 38	 mov	 rax, QWORD PTR f$[rsp]
  0007e	8b 40 64	 mov	 eax, DWORD PTR [rax+100]
  00081	c1 e8 02	 shr	 eax, 2
  00084	83 e0 01	 and	 eax, 1
  00087	85 c0		 test	 eax, eax
  00089	75 1c		 jne	 SHORT $LN6@async__pos
  0008b	41 b8 51 15 00
	00		 mov	 r8d, 5457		; 00001551H
  00091	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00098	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BI@HPMFCCG@?$AAf?$AA?9?$AA?$DO?$AAw?$AAr?$AAi?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?$AA@
  0009f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000a5	33 c0		 xor	 eax, eax
$LN6@async__pos:
$LN2@async__pos:

; 5458 : 
; 5459 :     if (size > 0 && !is_write) {

  000a7	48 83 7c 24 48
	00		 cmp	 QWORD PTR size$[rsp], 0
  000ad	7e 1e		 jle	 SHORT $LN1@async__pos
  000af	83 7c 24 40 00	 cmp	 DWORD PTR is_write$[rsp], 0
  000b4	75 17		 jne	 SHORT $LN1@async__pos

; 5460 :         PyErr_SetString(PyExc_ValueError,
; 5461 :                         "non-zero size invalid for read-only files");

  000b6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CK@JMPLGHEN@non?9zero?5size?5invalid?5for?5read?9o@
  000bd	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  000c4	e8 00 00 00 00	 call	 PyErr_SetString

; 5462 :             return NULL;

  000c9	33 c0		 xor	 eax, eax
  000cb	eb 13		 jmp	 SHORT $LN4@async__pos
$LN1@async__pos:

; 5463 :     }
; 5464 : 
; 5465 :     Py_RETURN_NONE;

  000cd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  000d4	e8 00 00 00 00	 call	 _Py_IncRef
  000d9	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
$LN4@async__pos:

; 5466 : }

  000e0	48 83 c4 68	 add	 rsp, 104		; 00000068H
  000e4	c3		 ret	 0
_async__post_open ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_async__address DD imagerel $LN3
	DD	imagerel $LN3+39
	DD	imagerel $unwind$_async__address
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_async__address DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _async__address
_TEXT	SEGMENT
self$ = 48
o$ = 56
_async__address PROC					; COMDAT

; 5470 : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 5471 :     Py_INCREF(o);

  0000e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR o$[rsp]
  00013	e8 00 00 00 00	 call	 _Py_IncRef

; 5472 :     return PyLong_FromVoidPtr(o);

  00018	48 8b 4c 24 38	 mov	 rcx, QWORD PTR o$[rsp]
  0001d	e8 00 00 00 00	 call	 PyLong_FromVoidPtr

; 5473 : }

  00022	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00026	c3		 ret	 0
_async__address ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BL@CGFJPNND@address?3?50x?$CFx?0?5refcnt?3?5?$CFd?6?$AA@ ; `string'
EXTRN	PyLong_AsVoidPtr:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_async__dbg_address DD imagerel $LN3
	DD	imagerel $LN3+89
	DD	imagerel $unwind$_async__dbg_address
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_async__dbg_address DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT ??_C@_0BL@CGFJPNND@address?3?50x?$CFx?0?5refcnt?3?5?$CFd?6?$AA@
CONST	SEGMENT
??_C@_0BL@CGFJPNND@address?3?50x?$CFx?0?5refcnt?3?5?$CFd?6?$AA@ DB 'addre'
	DB	'ss: 0x%x, refcnt: %d', 0aH, 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _async__dbg_address
_TEXT	SEGMENT
o$ = 32
self$ = 64
addr$ = 72
_async__dbg_address PROC				; COMDAT

; 5477 : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 5478 :     PyObject *o;
; 5479 :     Py_INCREF(addr);

  0000e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR addr$[rsp]
  00013	e8 00 00 00 00	 call	 _Py_IncRef

; 5480 :     o = (PyObject *)PyLong_AsVoidPtr(addr);

  00018	48 8b 4c 24 48	 mov	 rcx, QWORD PTR addr$[rsp]
  0001d	e8 00 00 00 00	 call	 PyLong_AsVoidPtr
  00022	48 89 44 24 20	 mov	 QWORD PTR o$[rsp], rax

; 5481 :     PySys_FormatStdout("address: 0x%x, refcnt: %d\n", o, Py_REFCNT(o));

  00027	48 8b 44 24 20	 mov	 rax, QWORD PTR o$[rsp]
  0002c	4c 8b 40 50	 mov	 r8, QWORD PTR [rax+80]
  00030	48 8b 54 24 20	 mov	 rdx, QWORD PTR o$[rsp]
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BL@CGFJPNND@address?3?50x?$CFx?0?5refcnt?3?5?$CFd?6?$AA@
  0003c	e8 00 00 00 00	 call	 PySys_FormatStdout

; 5482 :     Py_RETURN_NONE;

  00041	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00048	e8 00 00 00 00	 call	 _Py_IncRef
  0004d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 5483 : }

  00054	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00058	c3		 ret	 0
_async__dbg_address ENDP
_TEXT	ENDS
PUBLIC	??_C@_05FPALGIFH@_wrap?$AA@			; `string'
PUBLIC	_wrap
;	COMDAT pdata
pdata	SEGMENT
$pdata$_wrap DD	imagerel $LN7
	DD	imagerel $LN7+197
	DD	imagerel $unwind$_wrap
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_wrap DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT ??_C@_05FPALGIFH@_wrap?$AA@
CONST	SEGMENT
??_C@_05FPALGIFH@_wrap?$AA@ DB '_wrap', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _wrap
_TEXT	SEGMENT
self$ = 32
tp$ = 64
args$ = 72
kwds$ = 80
_wrap	PROC						; COMDAT

; 5490 : {

$LN7:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 5491 :     PyObject *self;
; 5492 :     Py_GUARD

  00013	e8 00 00 00 00	 call	 _Py_PXCTX
  00018	85 c0		 test	 eax, eax
  0001a	74 1c		 je	 SHORT $LN4@wrap
  0001c	45 33 c9	 xor	 r9d, r9d
  0001f	41 b8 74 15 00
	00		 mov	 r8d, 5492		; 00001574H
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@PGHBGAOD@?4?4?2Python?2pyparallel?4c?$AA@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05FPALGIFH@_wrap?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN4@wrap:

; 5493 :     if (!(self = _protect(tp->tp_new(tp, args, kwds))))

  00038	4c 8b 44 24 50	 mov	 r8, QWORD PTR kwds$[rsp]
  0003d	48 8b 54 24 48	 mov	 rdx, QWORD PTR args$[rsp]
  00042	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tp$[rsp]
  00047	48 8b 44 24 40	 mov	 rax, QWORD PTR tp$[rsp]
  0004c	ff 90 90 01 00
	00		 call	 QWORD PTR [rax+400]
  00052	48 8b c8	 mov	 rcx, rax
  00055	e8 00 00 00 00	 call	 _protect
  0005a	48 89 44 24 20	 mov	 QWORD PTR self$[rsp], rax
  0005f	48 83 7c 24 20
	00		 cmp	 QWORD PTR self$[rsp], 0
  00065	75 04		 jne	 SHORT $LN3@wrap

; 5494 :         return NULL;

  00067	33 c0		 xor	 eax, eax
  00069	eb 55		 jmp	 SHORT $LN5@wrap
$LN3@wrap:

; 5495 : 
; 5496 :     if (kwds && !args)

  0006b	48 83 7c 24 50
	00		 cmp	 QWORD PTR kwds$[rsp], 0
  00071	74 14		 je	 SHORT $LN2@wrap
  00073	48 83 7c 24 48
	00		 cmp	 QWORD PTR args$[rsp], 0
  00079	75 0c		 jne	 SHORT $LN2@wrap

; 5497 :         args = PyTuple_New(0);

  0007b	33 c9		 xor	 ecx, ecx
  0007d	e8 00 00 00 00	 call	 PyTuple_New
  00082	48 89 44 24 48	 mov	 QWORD PTR args$[rsp], rax
$LN2@wrap:

; 5498 : 
; 5499 :     if (args && tp->tp_init(self, args, kwds)) {

  00087	48 83 7c 24 48
	00		 cmp	 QWORD PTR args$[rsp], 0
  0008d	74 2c		 je	 SHORT $LN1@wrap
  0008f	4c 8b 44 24 50	 mov	 r8, QWORD PTR kwds$[rsp]
  00094	48 8b 54 24 48	 mov	 rdx, QWORD PTR args$[rsp]
  00099	48 8b 4c 24 20	 mov	 rcx, QWORD PTR self$[rsp]
  0009e	48 8b 44 24 40	 mov	 rax, QWORD PTR tp$[rsp]
  000a3	ff 90 80 01 00
	00		 call	 QWORD PTR [rax+384]
  000a9	85 c0		 test	 eax, eax
  000ab	74 0e		 je	 SHORT $LN1@wrap

; 5500 :         Py_DECREF(self);

  000ad	48 8b 4c 24 20	 mov	 rcx, QWORD PTR self$[rsp]
  000b2	e8 00 00 00 00	 call	 _Py_DecRef

; 5501 :         return NULL;

  000b7	33 c0		 xor	 eax, eax
  000b9	eb 05		 jmp	 SHORT $LN5@wrap
$LN1@wrap:

; 5502 :     }
; 5503 : 
; 5504 :     return self;

  000bb	48 8b 44 24 20	 mov	 rax, QWORD PTR self$[rsp]
$LN5@wrap:

; 5505 : }

  000c0	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000c4	c3		 ret	 0
_wrap	ENDP
_TEXT	ENDS
EXTRN	PyList_Type:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$_async_list DD imagerel $LN3
	DD	imagerel $LN3+46
	DD	imagerel $unwind$_async_list
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_async_list DD 011301H
	DD	04213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _async_list
_TEXT	SEGMENT
self$ = 48
args$ = 56
kwds$ = 64
_async_list PROC					; COMDAT

; 5516 : _ASYNC_WRAP(list, PyList_Type)

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00013	4c 8b 44 24 40	 mov	 r8, QWORD PTR kwds$[rsp]
  00018	48 8b 54 24 38	 mov	 rdx, QWORD PTR args$[rsp]
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyList_Type
  00024	e8 00 00 00 00	 call	 _wrap
  00029	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002d	c3		 ret	 0
_async_list ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_async_dict DD imagerel $LN3
	DD	imagerel $LN3+46
	DD	imagerel $unwind$_async_dict
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_async_dict DD 011301H
	DD	04213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _async_dict
_TEXT	SEGMENT
self$ = 48
args$ = 56
kwds$ = 64
_async_dict PROC					; COMDAT

; 5517 : _ASYNC_WRAP(dict, PyDict_Type)

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00013	4c 8b 44 24 40	 mov	 r8, QWORD PTR kwds$[rsp]
  00018	48 8b 54 24 38	 mov	 rdx, QWORD PTR args$[rsp]
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyDict_Type
  00024	e8 00 00 00 00	 call	 _wrap
  00029	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002d	c3		 ret	 0
_async_dict ENDP
_TEXT	ENDS
PUBLIC	??_C@_1DG@HFBPBNHP@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAp?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAt?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BI@IANAJEAE@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAp?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_0BL@KKIMBCMI@_PyParallel_GetThreadState?$AA@ ; `string'
PUBLIC	_PyParallel_GetThreadState
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyParallel_GetThreadState DD imagerel $LN6
	DD	imagerel $LN6+258
	DD	imagerel $unwind$_PyParallel_GetThreadState
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyParallel_GetThreadState DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_1DG@HFBPBNHP@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAp?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAt?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1DG@HFBPBNHP@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAp?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAt?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?$AA@ DB 'c'
	DB	00H, 't', 00H, 'x', 00H, '-', 00H, '>', 00H, 'p', 00H, 's', 00H
	DB	't', 00H, 'a', 00H, 't', 00H, 'e', 00H, ' ', 00H, '!', 00H, '='
	DB	00H, ' ', 00H, 'c', 00H, 't', 00H, 'x', 00H, '-', 00H, '>', 00H
	DB	't', 00H, 's', 00H, 't', 00H, 'a', 00H, 't', 00H, 'e', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1BI@IANAJEAE@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAp?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1BI@IANAJEAE@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAp?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?$AA@ DB 'c'
	DB	00H, 't', 00H, 'x', 00H, '-', 00H, '>', 00H, 'p', 00H, 's', 00H
	DB	't', 00H, 'a', 00H, 't', 00H, 'e', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@KKIMBCMI@_PyParallel_GetThreadState?$AA@
CONST	SEGMENT
??_C@_0BL@KKIMBCMI@_PyParallel_GetThreadState?$AA@ DB '_PyParallel_GetThr'
	DB	'eadState', 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PyParallel_GetThreadState
_TEXT	SEGMENT
_PyParallel_GetThreadState PROC				; COMDAT

; 5599 : {

$LN6:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 5600 :     Px_GUARD

  00004	e8 00 00 00 00	 call	 _Py_PXCTX
  00009	85 c0		 test	 eax, eax
  0000b	75 1f		 jne	 SHORT $LN1@PyParallel@29
  0000d	41 b9 01 00 00
	00		 mov	 r9d, 1
  00013	41 b8 e0 15 00
	00		 mov	 r8d, 5600		; 000015e0H
  00019	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@PGHBGAOD@?4?4?2Python?2pyparallel?4c?$AA@
  00020	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BL@KKIMBCMI@_PyParallel_GetThreadState?$AA@
  00027	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN1@PyParallel@29:

; 5601 :     assert(ctx->pstate);

  0002c	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:ctx
  00031	8b c0		 mov	 eax, eax
  00033	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00039	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00042	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  00046	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  0004a	48 83 b8 e8 00
	00 00 00	 cmp	 QWORD PTR [rax+232], 0
  00052	75 1c		 jne	 SHORT $LN4@PyParallel@29
  00054	41 b8 e1 15 00
	00		 mov	 r8d, 5601		; 000015e1H
  0005a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00061	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BI@IANAJEAE@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAp?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?$AA@
  00068	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0006e	33 c0		 xor	 eax, eax
$LN4@PyParallel@29:

; 5602 :     assert(ctx->pstate != ctx->tstate);

  00070	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:ctx
  00075	8b c0		 mov	 eax, eax
  00077	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0007d	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00086	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  0008a	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  0008e	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:ctx
  00093	8b c9		 mov	 ecx, ecx
  00095	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _tls_index
  0009b	65 4c 8b 04 25
	58 00 00 00	 mov	 r8, QWORD PTR gs:88
  000a4	49 8b 14 d0	 mov	 rdx, QWORD PTR [r8+rdx*8]
  000a8	48 8b 0c 0a	 mov	 rcx, QWORD PTR [rdx+rcx]
  000ac	48 8b 89 e0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+224]
  000b3	48 39 88 e8 00
	00 00		 cmp	 QWORD PTR [rax+232], rcx
  000ba	75 1c		 jne	 SHORT $LN5@PyParallel@29
  000bc	41 b8 e2 15 00
	00		 mov	 r8d, 5602		; 000015e2H
  000c2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  000c9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DG@HFBPBNHP@?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAp?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAc?$AAt?$AAx?$AA?9?$AA?$DO?$AAt?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?$AA@
  000d0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000d6	33 c0		 xor	 eax, eax
$LN5@PyParallel@29:

; 5603 :     return ctx->pstate;

  000d8	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:ctx
  000dd	8b c0		 mov	 eax, eax
  000df	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  000e5	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  000ee	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  000f2	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  000f6	48 8b 80 e8 00
	00 00		 mov	 rax, QWORD PTR [rax+232]

; 5604 : }

  000fd	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00101	c3		 ret	 0
_PyParallel_GetThreadState ENDP
_TEXT	ENDS
PUBLIC	??_C@_1BI@GPFDFIDP@?$AAP?$AAy?$AA_?$AAT?$AAY?$AAP?$AAE?$AA?$CI?$AAo?$AAp?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DM@MBKCJDJN@?$AAo?$AAp?$AA?9?$AA?$DO?$AAi?$AAs?$AA_?$AAp?$AAx?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AA_?$AAN?$AAO?$AAT?$AA_?$AAP?$AAA?$AAR?$AAA?$AAL?$AAL?$AAE?$AAL?$AA?$AA@ ; `string'
PUBLIC	??_C@_0CC@BBIDHHMP@?6_Px_NewReference?3?5no?5px?5object?$CB@ ; `string'
PUBLIC	??_C@_0CL@CBNFIOBC@?6_Px_NewReference?$CIop?$CJ?5?9?$DO?5failed?5@ ; `string'
PUBLIC	??_C@_0BB@BANAMHPF@_Px_NewReference?$AA@	; `string'
PUBLIC	_Px_NewReference
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Px_NewReference DD imagerel $LN9
	DD	imagerel $LN9+362
	DD	imagerel $unwind$_Px_NewReference
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Px_NewReference DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_1BI@GPFDFIDP@?$AAP?$AAy?$AA_?$AAT?$AAY?$AAP?$AAE?$AA?$CI?$AAo?$AAp?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1BI@GPFDFIDP@?$AAP?$AAy?$AA_?$AAT?$AAY?$AAP?$AAE?$AA?$CI?$AAo?$AAp?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, '_', 00H, 'T', 00H, 'Y', 00H, 'P', 00H, 'E', 00H
	DB	'(', 00H, 'o', 00H, 'p', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DM@MBKCJDJN@?$AAo?$AAp?$AA?9?$AA?$DO?$AAi?$AAs?$AA_?$AAp?$AAx?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AA_?$AAN?$AAO?$AAT?$AA_?$AAP?$AAA?$AAR?$AAA?$AAL?$AAL?$AAE?$AAL?$AA?$AA@
CONST	SEGMENT
??_C@_1DM@MBKCJDJN@?$AAo?$AAp?$AA?9?$AA?$DO?$AAi?$AAs?$AA_?$AAp?$AAx?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AA_?$AAN?$AAO?$AAT?$AA_?$AAP?$AAA?$AAR?$AAA?$AAL?$AAL?$AAE?$AAL?$AA?$AA@ DB 'o'
	DB	00H, 'p', 00H, '-', 00H, '>', 00H, 'i', 00H, 's', 00H, '_', 00H
	DB	'p', 00H, 'x', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, '_'
	DB	00H, 'P', 00H, 'y', 00H, '_', 00H, 'N', 00H, 'O', 00H, 'T', 00H
	DB	'_', 00H, 'P', 00H, 'A', 00H, 'R', 00H, 'A', 00H, 'L', 00H, 'L'
	DB	00H, 'E', 00H, 'L', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@BBIDHHMP@?6_Px_NewReference?3?5no?5px?5object?$CB@
CONST	SEGMENT
??_C@_0CC@BBIDHHMP@?6_Px_NewReference?3?5no?5px?5object?$CB@ DB 0aH, '_Px'
	DB	'_NewReference: no px object!', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@CBNFIOBC@?6_Px_NewReference?$CIop?$CJ?5?9?$DO?5failed?5@
CONST	SEGMENT
??_C@_0CL@CBNFIOBC@?6_Px_NewReference?$CIop?$CJ?5?9?$DO?5failed?5@ DB 0aH
	DB	'_Px_NewReference(op) -> failed _Px_TEST!', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@BANAMHPF@_Px_NewReference?$AA@
CONST	SEGMENT
??_C@_0BB@BANAMHPF@_Px_NewReference?$AA@ DB '_Px_NewReference', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Px_NewReference
_TEXT	SEGMENT
op$ = 64
_Px_NewReference PROC					; COMDAT

; 5608 : {

$LN9:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 5609 :     Px_GUARD

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 1f		 jne	 SHORT $LN4@Px_NewRefe
  00012	41 b9 01 00 00
	00		 mov	 r9d, 1
  00018	41 b8 e9 15 00
	00		 mov	 r8d, 5609		; 000015e9H
  0001e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@PGHBGAOD@?4?4?2Python?2pyparallel?4c?$AA@
  00025	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@BANAMHPF@_Px_NewReference?$AA@
  0002c	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN4@Px_NewRefe:

; 5610 :     Px_GUARD_MEM(op);

  00031	c7 44 24 20 00
	04 00 00	 mov	 DWORD PTR [rsp+32], 1024 ; 00000400H
  00039	4c 8b 4c 24 40	 mov	 r9, QWORD PTR op$[rsp]
  0003e	41 b8 ea 15 00
	00		 mov	 r8d, 5610		; 000015eaH
  00044	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@PGHBGAOD@?4?4?2Python?2pyparallel?4c?$AA@
  0004b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@BANAMHPF@_Px_NewReference?$AA@
  00052	e8 00 00 00 00	 call	 _PyParallel_Guard

; 5611 : 
; 5612 : #ifdef Py_DEBUG
; 5613 :     if (!_Px_TEST(op))

  00057	48 8b 4c 24 40	 mov	 rcx, QWORD PTR op$[rsp]
  0005c	e8 00 00 00 00	 call	 _Px_TEST
  00061	85 c0		 test	 eax, eax
  00063	75 0d		 jne	 SHORT $LN3@Px_NewRefe

; 5614 :         printf("\n_Px_NewReference(op) -> failed _Px_TEST!\n");

  00065	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CL@CBNFIOBC@?6_Px_NewReference?$CIop?$CJ?5?9?$DO?5failed?5@
  0006c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_printf
$LN3@Px_NewRefe:

; 5615 :     if (!Py_ASPX(op))

  00072	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  00077	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  0007c	75 0d		 jne	 SHORT $LN2@Px_NewRefe

; 5616 :         printf("\n_Px_NewReference: no px object!\n");

  0007e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CC@BBIDHHMP@?6_Px_NewReference?3?5no?5px?5object?$CB@
  00085	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_printf
$LN2@Px_NewRefe:

; 5617 : #endif
; 5618 : 
; 5619 :     assert(op->is_px != _Py_NOT_PARALLEL);

  0008b	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  00090	48 b9 78 56 ef
	be 34 12 ad de	 mov	 rcx, -2401243008567650696 ; dead1234beef5678H
  0009a	48 39 08	 cmp	 QWORD PTR [rax], rcx
  0009d	75 1c		 jne	 SHORT $LN7@Px_NewRefe
  0009f	41 b8 f3 15 00
	00		 mov	 r8d, 5619		; 000015f3H
  000a5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  000ac	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DM@MBKCJDJN@?$AAo?$AAp?$AA?9?$AA?$DO?$AAi?$AAs?$AA_?$AAp?$AAx?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AA_?$AAN?$AAO?$AAT?$AA_?$AAP?$AAA?$AAR?$AAA?$AAL?$AAL?$AAE?$AAL?$AA?$AA@
  000b3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000b9	33 c0		 xor	 eax, eax
$LN7@Px_NewRefe:

; 5620 : 
; 5621 :     if (op->is_px != _Py_IS_PARALLEL)

  000bb	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  000c0	48 b9 ad de 32
	54 ef be 76 98	 mov	 rcx, -7460565797573566803 ; 9876beef5432deadH
  000ca	48 39 08	 cmp	 QWORD PTR [rax], rcx
  000cd	74 12		 je	 SHORT $LN1@Px_NewRefe

; 5622 :         op->is_px = _Py_IS_PARALLEL;

  000cf	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  000d4	48 b9 ad de 32
	54 ef be 76 98	 mov	 rcx, -7460565797573566803 ; 9876beef5432deadH
  000de	48 89 08	 mov	 QWORD PTR [rax], rcx
$LN1@Px_NewRefe:

; 5623 : 
; 5624 :     assert(Py_TYPE(op));

  000e1	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  000e6	48 83 78 58 00	 cmp	 QWORD PTR [rax+88], 0
  000eb	75 1c		 jne	 SHORT $LN8@Px_NewRefe
  000ed	41 b8 f8 15 00
	00		 mov	 r8d, 5624		; 000015f8H
  000f3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  000fa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BI@GPFDFIDP@?$AAP?$AAy?$AA_?$AAT?$AAY?$AAP?$AAE?$AA?$CI?$AAo?$AAp?$AA?$CJ?$AA?$AA@
  00101	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00107	33 c0		 xor	 eax, eax
$LN8@Px_NewRefe:

; 5625 : 
; 5626 :     op->ob_refcnt = 1;

  00109	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  0010e	48 c7 40 50 01
	00 00 00	 mov	 QWORD PTR [rax+80], 1

; 5627 :     ctx->stats.newrefs++;

  00116	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR _tls_index
  0011c	65 48 8b 0c 25
	58 00 00 00	 mov	 rcx, QWORD PTR gs:88
  00125	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:ctx
  0012a	8b d2		 mov	 edx, edx
  0012c	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  00130	48 8b 04 10	 mov	 rax, QWORD PTR [rax+rdx]
  00134	48 8b 80 80 01
	00 00		 mov	 rax, QWORD PTR [rax+384]
  0013b	48 ff c0	 inc	 rax
  0013e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00144	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0014d	41 b8 00 00 00
	00		 mov	 r8d, OFFSET FLAT:ctx
  00153	45 8b c0	 mov	 r8d, r8d
  00156	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  0015a	4a 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+r8]
  0015e	48 89 81 80 01
	00 00		 mov	 QWORD PTR [rcx+384], rax

; 5628 : }

  00165	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00169	c3		 ret	 0
_Px_NewReference ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BE@ECHKNDAB@_Px_ForgetReference?$AA@	; `string'
PUBLIC	_Px_ForgetReference
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Px_ForgetReference DD imagerel $LN4
	DD	imagerel $LN4+171
	DD	imagerel $unwind$_Px_ForgetReference
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Px_ForgetReference DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0BE@ECHKNDAB@_Px_ForgetReference?$AA@
CONST	SEGMENT
??_C@_0BE@ECHKNDAB@_Px_ForgetReference?$AA@ DB '_Px_ForgetReference', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Px_ForgetReference
_TEXT	SEGMENT
op$ = 64
_Px_ForgetReference PROC				; COMDAT

; 5632 : {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 5633 :     Px_GUARD_OBJ(op);

  00009	c7 44 24 20 40
	00 00 00	 mov	 DWORD PTR [rsp+32], 64	; 00000040H
  00011	4c 8b 4c 24 40	 mov	 r9, QWORD PTR op$[rsp]
  00016	41 b8 01 16 00
	00		 mov	 r8d, 5633		; 00001601H
  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@PGHBGAOD@?4?4?2Python?2pyparallel?4c?$AA@
  00023	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@ECHKNDAB@_Px_ForgetReference?$AA@
  0002a	e8 00 00 00 00	 call	 _PyParallel_Guard

; 5634 :     Px_GUARD

  0002f	e8 00 00 00 00	 call	 _Py_PXCTX
  00034	85 c0		 test	 eax, eax
  00036	75 1f		 jne	 SHORT $LN1@Px_ForgetR
  00038	41 b9 01 00 00
	00		 mov	 r9d, 1
  0003e	41 b8 02 16 00
	00		 mov	 r8d, 5634		; 00001602H
  00044	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@PGHBGAOD@?4?4?2Python?2pyparallel?4c?$AA@
  0004b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@ECHKNDAB@_Px_ForgetReference?$AA@
  00052	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN1@Px_ForgetR:

; 5635 :     ctx->stats.forgetrefs++;

  00057	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR _tls_index
  0005d	65 48 8b 0c 25
	58 00 00 00	 mov	 rcx, QWORD PTR gs:88
  00066	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:ctx
  0006b	8b d2		 mov	 edx, edx
  0006d	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  00071	48 8b 04 10	 mov	 rax, QWORD PTR [rax+rdx]
  00075	48 8b 80 88 01
	00 00		 mov	 rax, QWORD PTR [rax+392]
  0007c	48 ff c0	 inc	 rax
  0007f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00085	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0008e	41 b8 00 00 00
	00		 mov	 r8d, OFFSET FLAT:ctx
  00094	45 8b c0	 mov	 r8d, r8d
  00097	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  0009b	4a 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+r8]
  0009f	48 89 81 88 01
	00 00		 mov	 QWORD PTR [rcx+392], rax

; 5636 : }

  000a6	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000aa	c3		 ret	 0
_Px_ForgetReference ENDP
_TEXT	ENDS
PUBLIC	??_C@_1DA@PFLHLCHG@?$AAP?$AAy?$AA_?$AAA?$AAS?$AAP?$AAX?$AA?$CI?$AAo?$AAp?$AA?$CJ?$AA?9?$AA?$DO?$AAc?$AAt?$AAx?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAc?$AAt?$AAx?$AA?$AA@ ; `string'
PUBLIC	??_C@_0M@GNJGHPCG@_Px_Dealloc?$AA@		; `string'
PUBLIC	_Px_Dealloc
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Px_Dealloc DD imagerel $LN5
	DD	imagerel $LN5+330
	DD	imagerel $unwind$_Px_Dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Px_Dealloc DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_1DA@PFLHLCHG@?$AAP?$AAy?$AA_?$AAA?$AAS?$AAP?$AAX?$AA?$CI?$AAo?$AAp?$AA?$CJ?$AA?9?$AA?$DO?$AAc?$AAt?$AAx?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAc?$AAt?$AAx?$AA?$AA@
CONST	SEGMENT
??_C@_1DA@PFLHLCHG@?$AAP?$AAy?$AA_?$AAA?$AAS?$AAP?$AAX?$AA?$CI?$AAo?$AAp?$AA?$CJ?$AA?9?$AA?$DO?$AAc?$AAt?$AAx?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAc?$AAt?$AAx?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, '_', 00H, 'A', 00H, 'S', 00H, 'P', 00H, 'X', 00H
	DB	'(', 00H, 'o', 00H, 'p', 00H, ')', 00H, '-', 00H, '>', 00H, 'c'
	DB	00H, 't', 00H, 'x', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H
	DB	'c', 00H, 't', 00H, 'x', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GNJGHPCG@_Px_Dealloc?$AA@
CONST	SEGMENT
??_C@_0M@GNJGHPCG@_Px_Dealloc?$AA@ DB '_Px_Dealloc', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Px_Dealloc
_TEXT	SEGMENT
op$ = 64
_Px_Dealloc PROC					; COMDAT

; 5640 : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 5641 :     Px_GUARD_OBJ(op);

  00009	c7 44 24 20 40
	00 00 00	 mov	 DWORD PTR [rsp+32], 64	; 00000040H
  00011	4c 8b 4c 24 40	 mov	 r9, QWORD PTR op$[rsp]
  00016	41 b8 09 16 00
	00		 mov	 r8d, 5641		; 00001609H
  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@PGHBGAOD@?4?4?2Python?2pyparallel?4c?$AA@
  00023	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@GNJGHPCG@_Px_Dealloc?$AA@
  0002a	e8 00 00 00 00	 call	 _PyParallel_Guard

; 5642 :     Px_GUARD

  0002f	e8 00 00 00 00	 call	 _Py_PXCTX
  00034	85 c0		 test	 eax, eax
  00036	75 1f		 jne	 SHORT $LN1@Px_Dealloc
  00038	41 b9 01 00 00
	00		 mov	 r9d, 1
  0003e	41 b8 0a 16 00
	00		 mov	 r8d, 5642		; 0000160aH
  00044	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@PGHBGAOD@?4?4?2Python?2pyparallel?4c?$AA@
  0004b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@GNJGHPCG@_Px_Dealloc?$AA@
  00052	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN1@Px_Dealloc:

; 5643 :     assert(Py_ASPX(op)->ctx == ctx);

  00057	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  0005c	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00060	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:ctx
  00065	8b c9		 mov	 ecx, ecx
  00067	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _tls_index
  0006d	65 4c 8b 04 25
	58 00 00 00	 mov	 r8, QWORD PTR gs:88
  00076	49 8b 14 d0	 mov	 rdx, QWORD PTR [r8+rdx*8]
  0007a	48 8b 0c 11	 mov	 rcx, QWORD PTR [rcx+rdx]
  0007e	48 39 08	 cmp	 QWORD PTR [rax], rcx
  00081	74 1c		 je	 SHORT $LN4@Px_Dealloc
  00083	41 b8 0b 16 00
	00		 mov	 r8d, 5643		; 0000160bH
  00089	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00090	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@PFLHLCHG@?$AAP?$AAy?$AA_?$AAA?$AAS?$AAP?$AAX?$AA?$CI?$AAo?$AAp?$AA?$CJ?$AA?9?$AA?$DO?$AAc?$AAt?$AAx?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAc?$AAt?$AAx?$AA?$AA@
  00097	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0009d	33 c0		 xor	 eax, eax
$LN4@Px_Dealloc:

; 5644 :     ctx->h->deallocs++;

  0009f	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR _tls_index
  000a5	65 48 8b 0c 25
	58 00 00 00	 mov	 rcx, QWORD PTR gs:88
  000ae	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:ctx
  000b3	8b d2		 mov	 edx, edx
  000b5	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  000b9	48 8b 04 10	 mov	 rax, QWORD PTR [rax+rdx]
  000bd	48 8b 80 d0 00
	00 00		 mov	 rax, QWORD PTR [rax+208]
  000c4	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  000c8	48 ff c0	 inc	 rax
  000cb	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  000d1	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  000da	41 b8 00 00 00
	00		 mov	 r8d, OFFSET FLAT:ctx
  000e0	45 8b c0	 mov	 r8d, r8d
  000e3	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  000e7	4a 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+r8]
  000eb	48 8b 89 d0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+208]
  000f2	48 89 41 70	 mov	 QWORD PTR [rcx+112], rax

; 5645 :     ctx->stats.deallocs++;

  000f6	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR _tls_index
  000fc	65 48 8b 0c 25
	58 00 00 00	 mov	 rcx, QWORD PTR gs:88
  00105	ba 00 00 00 00	 mov	 edx, OFFSET FLAT:ctx
  0010a	8b d2		 mov	 edx, edx
  0010c	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  00110	48 8b 04 10	 mov	 rax, QWORD PTR [rax+rdx]
  00114	48 8b 80 58 01
	00 00		 mov	 rax, QWORD PTR [rax+344]
  0011b	48 ff c0	 inc	 rax
  0011e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00124	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0012d	41 b8 00 00 00
	00		 mov	 r8d, OFFSET FLAT:ctx
  00133	45 8b c0	 mov	 r8d, r8d
  00136	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  0013a	4a 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+r8]
  0013e	48 89 81 58 01
	00 00		 mov	 QWORD PTR [rcx+344], rax

; 5646 : }

  00145	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00149	c3		 ret	 0
_Px_Dealloc ENDP
_TEXT	ENDS
PUBLIC	_PxObject_New
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PxObject_New DD imagerel $LN3
	DD	imagerel $LN3+54
	DD	imagerel $unwind$_PxObject_New
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PxObject_New DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _PxObject_New
_TEXT	SEGMENT
tp$ = 48
_PxObject_New PROC					; COMDAT

; 5650 : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 5651 :     return Object_New(tp, ctx);

  00009	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:ctx
  0000e	8b c0		 mov	 eax, eax
  00010	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00016	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0001f	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  00023	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00027	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tp$[rsp]
  0002c	e8 00 00 00 00	 call	 Object_New

; 5652 : }

  00031	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00035	c3		 ret	 0
_PxObject_New ENDP
_TEXT	ENDS
PUBLIC	_PxObject_NewVar
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PxObject_NewVar DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$_PxObject_NewVar
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PxObject_NewVar DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _PxObject_NewVar
_TEXT	SEGMENT
tp$ = 48
nitems$ = 56
_PxObject_NewVar PROC					; COMDAT

; 5656 : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 5657 :     return VarObject_New(tp, nitems, ctx);

  0000e	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:ctx
  00013	8b c0		 mov	 eax, eax
  00015	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0001b	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00024	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  00028	4c 8b 04 01	 mov	 r8, QWORD PTR [rcx+rax]
  0002c	48 8b 54 24 38	 mov	 rdx, QWORD PTR nitems$[rsp]
  00031	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tp$[rsp]
  00036	e8 00 00 00 00	 call	 VarObject_New

; 5658 : }

  0003b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003f	c3		 ret	 0
_PxObject_NewVar ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PxObject_Init DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$_PxObject_Init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PxObject_Init DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _PxObject_Init
_TEXT	SEGMENT
op$ = 48
tp$ = 56
_PxObject_Init PROC					; COMDAT

; 5662 : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 5663 :     return Object_Init(op, tp, ctx);

  0000e	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:ctx
  00013	8b c0		 mov	 eax, eax
  00015	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0001b	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00024	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  00028	4c 8b 04 01	 mov	 r8, QWORD PTR [rcx+rax]
  0002c	48 8b 54 24 38	 mov	 rdx, QWORD PTR tp$[rsp]
  00031	48 8b 4c 24 30	 mov	 rcx, QWORD PTR op$[rsp]
  00036	e8 00 00 00 00	 call	 Object_Init

; 5664 : }

  0003b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003f	c3		 ret	 0
_PxObject_Init ENDP
_TEXT	ENDS
PUBLIC	_PxObject_InitVar
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PxObject_InitVar DD imagerel $LN3
	DD	imagerel $LN3+74
	DD	imagerel $unwind$_PxObject_InitVar
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PxObject_InitVar DD 011301H
	DD	04213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _PxObject_InitVar
_TEXT	SEGMENT
op$ = 48
tp$ = 56
nitems$ = 64
_PxObject_InitVar PROC					; COMDAT

; 5668 : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 5669 :     return VarObject_Init(op, tp, nitems, ctx);

  00013	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:ctx
  00018	8b c0		 mov	 eax, eax
  0001a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00020	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00029	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  0002d	4c 8b 0c 01	 mov	 r9, QWORD PTR [rcx+rax]
  00031	4c 8b 44 24 40	 mov	 r8, QWORD PTR nitems$[rsp]
  00036	48 8b 54 24 38	 mov	 rdx, QWORD PTR tp$[rsp]
  0003b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR op$[rsp]
  00040	e8 00 00 00 00	 call	 VarObject_Init

; 5670 : }

  00045	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00049	c3		 ret	 0
_PxObject_InitVar ENDP
_TEXT	ENDS
PUBLIC	_PxObject_Resize
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PxObject_Resize DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$_PxObject_Resize
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PxObject_Resize DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _PxObject_Resize
_TEXT	SEGMENT
op$ = 48
nitems$ = 56
_PxObject_Resize PROC					; COMDAT

; 5675 : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 5676 :     return VarObject_Resize((PyObject *)op, nitems, ctx);

  0000e	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:ctx
  00013	8b c0		 mov	 eax, eax
  00015	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0001b	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00024	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  00028	4c 8b 04 01	 mov	 r8, QWORD PTR [rcx+rax]
  0002c	48 8b 54 24 38	 mov	 rdx, QWORD PTR nitems$[rsp]
  00031	48 8b 4c 24 30	 mov	 rcx, QWORD PTR op$[rsp]
  00036	e8 00 00 00 00	 call	 VarObject_Resize

; 5677 : }

  0003b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003f	c3		 ret	 0
_PxObject_Resize ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@LJDCILKF@_PxMem_Malloc?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PxMem_Malloc DD imagerel $LN4
	DD	imagerel $LN4+100
	DD	imagerel $unwind$_PxMem_Malloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PxMem_Malloc DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT ??_C@_0O@LJDCILKF@_PxMem_Malloc?$AA@
CONST	SEGMENT
??_C@_0O@LJDCILKF@_PxMem_Malloc?$AA@ DB '_PxMem_Malloc', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PxMem_Malloc
_TEXT	SEGMENT
n$ = 48
_PxMem_Malloc PROC					; COMDAT

; 5681 : {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 5682 :     Px_GUARD

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 1f		 jne	 SHORT $LN1@PxMem_Mall
  00012	41 b9 01 00 00
	00		 mov	 r9d, 1
  00018	41 b8 32 16 00
	00		 mov	 r8d, 5682		; 00001632H
  0001e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@PGHBGAOD@?4?4?2Python?2pyparallel?4c?$AA@
  00025	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@LJDCILKF@_PxMem_Malloc?$AA@
  0002c	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN1@PxMem_Mall:

; 5683 :     return _PyHeap_Malloc(ctx, n, 0, 0);

  00031	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:ctx
  00036	8b c0		 mov	 eax, eax
  00038	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0003e	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00047	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  0004b	45 33 c9	 xor	 r9d, r9d
  0004e	45 33 c0	 xor	 r8d, r8d
  00051	48 8b 54 24 30	 mov	 rdx, QWORD PTR n$[rsp]
  00056	48 8b 0c 01	 mov	 rcx, QWORD PTR [rcx+rax]
  0005a	e8 00 00 00 00	 call	 _PyHeap_Malloc

; 5684 : }

  0005f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00063	c3		 ret	 0
_PxMem_Malloc ENDP
_TEXT	ENDS
PUBLIC	_PxMem_Realloc
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PxMem_Realloc DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$_PxMem_Realloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PxMem_Realloc DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _PxMem_Realloc
_TEXT	SEGMENT
p$ = 48
n$ = 56
_PxMem_Realloc PROC					; COMDAT

; 5688 : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 5689 :     return _PxObject_Realloc(p, n);

  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR n$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR p$[rsp]
  00018	e8 00 00 00 00	 call	 _PxObject_Realloc

; 5690 : }

  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
_PxMem_Realloc ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PxMem_Free DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$_PxMem_Free
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PxMem_Free DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _PxMem_Free
_TEXT	SEGMENT
p$ = 48
_PxMem_Free PROC					; COMDAT

; 5694 : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 5695 :     _PxObject_Free(p);

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR p$[rsp]
  0000e	e8 00 00 00 00	 call	 _PxObject_Free

; 5696 : }

  00013	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00017	c3		 ret	 0
_PxMem_Free ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CP@OMBLHGJH@?$CFs?3?$CFi?5context?5at?5?$CFp?5has?5negative@ ; `string'
PUBLIC	_Px_NegativePersistedCount
EXTRN	PyOS_snprintf:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Px_NegativePersistedCount DD imagerel $LN3
	DD	imagerel $LN3+109
	DD	imagerel $unwind$_Px_NegativePersistedCount
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Px_NegativePersistedCount DD 021a01H
	DD	02f011aH
xdata	ENDS
;	COMDAT ??_C@_0CP@OMBLHGJH@?$CFs?3?$CFi?5context?5at?5?$CFp?5has?5negative@
CONST	SEGMENT
??_C@_0CP@OMBLHGJH@?$CFs?3?$CFi?5context?5at?5?$CFp?5has?5negative@ DB '%'
	DB	's:%i context at %p has negative ref count %Id', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Px_NegativePersistedCount
_TEXT	SEGMENT
buf$ = 64
fname$ = 384
lineno$ = 392
c$ = 400
count$ = 408
_Px_NegativePersistedCount PROC				; COMDAT

; 5700 : {

$LN3:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	48 81 ec 78 01
	00 00		 sub	 rsp, 376		; 00000178H

; 5701 :     char buf[300];
; 5702 : 
; 5703 :     PyOS_snprintf(buf, sizeof(buf),
; 5704 :                   "%s:%i context at %p has negative ref count "
; 5705 :                   "%" PY_FORMAT_SIZE_T "d",
; 5706 :                   fname, lineno, c, count);

  0001a	8b 84 24 98 01
	00 00		 mov	 eax, DWORD PTR count$[rsp]
  00021	89 44 24 30	 mov	 DWORD PTR [rsp+48], eax
  00025	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR c$[rsp]
  0002d	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00032	8b 84 24 88 01
	00 00		 mov	 eax, DWORD PTR lineno$[rsp]
  00039	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0003d	4c 8b 8c 24 80
	01 00 00	 mov	 r9, QWORD PTR fname$[rsp]
  00045	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0CP@OMBLHGJH@?$CFs?3?$CFi?5context?5at?5?$CFp?5has?5negative@
  0004c	ba 2c 01 00 00	 mov	 edx, 300		; 0000012cH
  00051	48 8d 4c 24 40	 lea	 rcx, QWORD PTR buf$[rsp]
  00056	e8 00 00 00 00	 call	 PyOS_snprintf

; 5707 :     Py_FatalError(buf);

  0005b	48 8d 4c 24 40	 lea	 rcx, QWORD PTR buf$[rsp]
  00060	e8 00 00 00 00	 call	 Py_FatalError

; 5708 : }

  00065	48 81 c4 78 01
	00 00		 add	 rsp, 376		; 00000178H
  0006c	c3		 ret	 0
_Px_NegativePersistedCount ENDP
_TEXT	ENDS
PUBLIC	??_C@_1BK@NDNNNPPJ@?$AAP?$AAx?$AA_?$AAC?$AAL?$AAO?$AAN?$AAE?$AAD?$AA?$CI?$AAo?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_09EIEMFBLL@Px_DecRef?$AA@			; `string'
PUBLIC	??_C@_1EA@CFKPAEJH@?$AAP?$AAx?$AA_?$AAP?$AAE?$AAR?$AAS?$AAI?$AAS?$AAT?$AAE?$AAD?$AA?$CI?$AAo?$AA?$CJ?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAP?$AAx?$AA_?$AAC?$AAL?$AAO?$AAN?$AAE?$AAD?$AA?$CI?$AAo?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BE@MABBNFPJ@?$AA?$CB?$AAP?$AAy?$AA_?$AAP?$AAX?$AAC?$AAT?$AAX?$AA?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$Px_DecRef DD imagerel $LN17
	DD	imagerel $LN17+506
	DD	imagerel $unwind$Px_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Px_DecRef DD 010901H
	DD	0a209H
xdata	ENDS
;	COMDAT ??_C@_1BK@NDNNNPPJ@?$AAP?$AAx?$AA_?$AAC?$AAL?$AAO?$AAN?$AAE?$AAD?$AA?$CI?$AAo?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1BK@NDNNNPPJ@?$AAP?$AAx?$AA_?$AAC?$AAL?$AAO?$AAN?$AAE?$AAD?$AA?$CI?$AAo?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'x', 00H, '_', 00H, 'C', 00H, 'L', 00H, 'O', 00H, 'N', 00H
	DB	'E', 00H, 'D', 00H, '(', 00H, 'o', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09EIEMFBLL@Px_DecRef?$AA@
CONST	SEGMENT
??_C@_09EIEMFBLL@Px_DecRef?$AA@ DB 'Px_DecRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1EA@CFKPAEJH@?$AAP?$AAx?$AA_?$AAP?$AAE?$AAR?$AAS?$AAI?$AAS?$AAT?$AAE?$AAD?$AA?$CI?$AAo?$AA?$CJ?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAP?$AAx?$AA_?$AAC?$AAL?$AAO?$AAN?$AAE?$AAD?$AA?$CI?$AAo?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1EA@CFKPAEJH@?$AAP?$AAx?$AA_?$AAP?$AAE?$AAR?$AAS?$AAI?$AAS?$AAT?$AAE?$AAD?$AA?$CI?$AAo?$AA?$CJ?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAP?$AAx?$AA_?$AAC?$AAL?$AAO?$AAN?$AAE?$AAD?$AA?$CI?$AAo?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'x', 00H, '_', 00H, 'P', 00H, 'E', 00H, 'R', 00H, 'S', 00H
	DB	'I', 00H, 'S', 00H, 'T', 00H, 'E', 00H, 'D', 00H, '(', 00H, 'o'
	DB	00H, ')', 00H, ' ', 00H, '|', 00H, '|', 00H, ' ', 00H, 'P', 00H
	DB	'x', 00H, '_', 00H, 'C', 00H, 'L', 00H, 'O', 00H, 'N', 00H, 'E'
	DB	00H, 'D', 00H, '(', 00H, 'o', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BE@MABBNFPJ@?$AA?$CB?$AAP?$AAy?$AA_?$AAP?$AAX?$AAC?$AAT?$AAX?$AA?$AA@
CONST	SEGMENT
??_C@_1BE@MABBNFPJ@?$AA?$CB?$AAP?$AAy?$AA_?$AAP?$AAX?$AAC?$AAT?$AAX?$AA?$AA@ DB '!'
	DB	00H, 'P', 00H, 'y', 00H, '_', 00H, 'P', 00H, 'X', 00H, 'C', 00H
	DB	'T', 00H, 'X', 00H, 00H, 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT Px_DecRef
_TEXT	SEGMENT
count$130182 = 48
c$130179 = 56
tv85 = 64
o$ = 96
Px_DecRef PROC						; COMDAT

; 5713 : {

$LN17:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 5714 :     assert(!Py_PXCTX);

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	74 1c		 je	 SHORT $LN11@Px_DecRef
  00012	41 b8 52 16 00
	00		 mov	 r8d, 5714		; 00001652H
  00018	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0001f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BE@MABBNFPJ@?$AA?$CB?$AAP?$AAy?$AA_?$AAP?$AAX?$AAC?$AAT?$AAX?$AA?$AA@
  00026	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0002c	33 c0		 xor	 eax, eax
$LN11@Px_DecRef:

; 5715 :     assert(Px_PERSISTED(o) || Px_CLONED(o));

  0002e	48 8b 44 24 60	 mov	 rax, QWORD PTR o$[rsp]
  00033	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00037	48 83 e0 20	 and	 rax, 32			; 00000020H
  0003b	48 85 c0	 test	 rax, rax
  0003e	75 30		 jne	 SHORT $LN12@Px_DecRef
  00040	48 8b 44 24 60	 mov	 rax, QWORD PTR o$[rsp]
  00045	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00049	48 25 80 00 00
	00		 and	 rax, 128		; 00000080H
  0004f	48 85 c0	 test	 rax, rax
  00052	75 1c		 jne	 SHORT $LN12@Px_DecRef
  00054	41 b8 53 16 00
	00		 mov	 r8d, 5715		; 00001653H
  0005a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00061	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EA@CFKPAEJH@?$AAP?$AAx?$AA_?$AAP?$AAE?$AAR?$AAS?$AAI?$AAS?$AAT?$AAE?$AAD?$AA?$CI?$AAo?$AA?$CJ?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAP?$AAx?$AA_?$AAC?$AAL?$AAO?$AAN?$AAE?$AAD?$AA?$CI?$AAo?$AA?$CJ?$AA?$AA@
  00068	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0006e	33 c0		 xor	 eax, eax
$LN12@Px_DecRef:

; 5716 : 
; 5717 :     _Py_DEC_REFTOTAL;

  00070	e8 00 00 00 00	 call	 _Py_PXCTX
  00075	85 c0		 test	 eax, eax
  00077	74 02		 je	 SHORT $LN13@Px_DecRef
  00079	eb 11		 jmp	 SHORT $LN14@Px_DecRef
$LN13@Px_DecRef:
  0007b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00082	48 ff c8	 dec	 rax
  00085	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN14@Px_DecRef:

; 5718 :     if ((--((PyObject *)(o))->ob_refcnt) != 0) {

  0008c	48 8b 44 24 60	 mov	 rax, QWORD PTR o$[rsp]
  00091	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00095	48 ff c8	 dec	 rax
  00098	48 89 44 24 40	 mov	 QWORD PTR tv85[rsp], rax
  0009d	48 8b 44 24 60	 mov	 rax, QWORD PTR o$[rsp]
  000a2	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tv85[rsp]
  000a7	48 89 48 50	 mov	 QWORD PTR [rax+80], rcx
  000ab	48 83 7c 24 40
	00		 cmp	 QWORD PTR tv85[rsp], 0
  000b1	74 51		 je	 SHORT $LN8@Px_DecRef

; 5719 :         _Py_CHECK_REFCNT(o);

  000b3	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000bb	4c 8b 4c 24 60	 mov	 r9, QWORD PTR o$[rsp]
  000c0	41 b8 57 16 00
	00		 mov	 r8d, 5719		; 00001657H
  000c6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@PGHBGAOD@?4?4?2Python?2pyparallel?4c?$AA@
  000cd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09EIEMFBLL@Px_DecRef?$AA@
  000d4	e8 00 00 00 00	 call	 _PyParallel_Guard
  000d9	85 c0		 test	 eax, eax
  000db	75 22		 jne	 SHORT $LN7@Px_DecRef
  000dd	48 8b 44 24 60	 mov	 rax, QWORD PTR o$[rsp]
  000e2	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000e7	7d 16		 jge	 SHORT $LN7@Px_DecRef
  000e9	4c 8b 44 24 60	 mov	 r8, QWORD PTR o$[rsp]
  000ee	ba 57 16 00 00	 mov	 edx, 5719		; 00001657H
  000f3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BH@PGHBGAOD@?4?4?2Python?2pyparallel?4c?$AA@
  000fa	e8 00 00 00 00	 call	 _Py_NegativeRefcount
$LN7@Px_DecRef:

; 5720 :     } else {

  000ff	e9 f1 00 00 00	 jmp	 $LN6@Px_DecRef
$LN8@Px_DecRef:

; 5721 :         if (Px_PERSISTED(o)) {

  00104	48 8b 44 24 60	 mov	 rax, QWORD PTR o$[rsp]
  00109	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0010d	48 83 e0 20	 and	 rax, 32			; 00000020H
  00111	48 85 c0	 test	 rax, rax
  00114	0f 84 87 00 00
	00		 je	 $LN5@Px_DecRef

; 5722 :             Context *c = Py_ASPX(o)->ctx;

  0011a	48 8b 44 24 60	 mov	 rax, QWORD PTR o$[rsp]
  0011f	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00123	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00126	48 89 44 24 38	 mov	 QWORD PTR c$130179[rsp], rax

; 5723 :             int count = InterlockedDecrement(&(c->persisted_count));

  0012b	48 8b 44 24 38	 mov	 rax, QWORD PTR c$130179[rsp]
  00130	48 05 10 38 00
	00		 add	 rax, 14352		; 00003810H
  00136	b9 ff ff ff ff	 mov	 ecx, -1
  0013b	f0 0f c1 08	 lock xadd DWORD PTR [rax], ecx
  0013f	ff c9		 dec	 ecx
  00141	8b c1		 mov	 eax, ecx
  00143	89 44 24 30	 mov	 DWORD PTR count$130182[rsp], eax

; 5724 :             if (count < 0)

  00147	83 7c 24 30 00	 cmp	 DWORD PTR count$130182[rsp], 0
  0014c	7d 1d		 jge	 SHORT $LN4@Px_DecRef

; 5725 :                 _Px_NegativePersistedCount(__FILE__, __LINE__, c, count);

  0014e	44 8b 4c 24 30	 mov	 r9d, DWORD PTR count$130182[rsp]
  00153	4c 8b 44 24 38	 mov	 r8, QWORD PTR c$130179[rsp]
  00158	ba 5d 16 00 00	 mov	 edx, 5725		; 0000165dH
  0015d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BH@PGHBGAOD@?4?4?2Python?2pyparallel?4c?$AA@
  00164	e8 00 00 00 00	 call	 _Px_NegativePersistedCount
  00169	eb 32		 jmp	 SHORT $LN3@Px_DecRef
$LN4@Px_DecRef:

; 5726 :             else if (count == 0) {

  0016b	83 7c 24 30 00	 cmp	 DWORD PTR count$130182[rsp], 0
  00170	75 2b		 jne	 SHORT $LN2@Px_DecRef

; 5727 :                 InterlockedDecrement(&(c->px->contexts_persisted));

  00172	48 8b 44 24 38	 mov	 rax, QWORD PTR c$130179[rsp]
  00177	48 8b 80 d8 00
	00 00		 mov	 rax, QWORD PTR [rax+216]
  0017e	48 05 ec 00 00
	00		 add	 rax, 236		; 000000ecH
  00184	f0 ff 08	 lock dec DWORD PTR [rax]

; 5728 :                 _PxState_FreeContext(c->px, c);

  00187	48 8b 54 24 38	 mov	 rdx, QWORD PTR c$130179[rsp]
  0018c	48 8b 44 24 38	 mov	 rax, QWORD PTR c$130179[rsp]
  00191	48 8b 88 d8 00
	00 00		 mov	 rcx, QWORD PTR [rax+216]
  00198	e8 00 00 00 00	 call	 _PxState_FreeContext
$LN2@Px_DecRef:
$LN3@Px_DecRef:

; 5729 :             }
; 5730 :             return;

  0019d	eb 56		 jmp	 SHORT $LN9@Px_DecRef

; 5731 :         } else {

  0019f	eb 32		 jmp	 SHORT $LN1@Px_DecRef
$LN5@Px_DecRef:

; 5732 :             assert(Px_CLONED(o));

  001a1	48 8b 44 24 60	 mov	 rax, QWORD PTR o$[rsp]
  001a6	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  001aa	48 25 80 00 00
	00		 and	 rax, 128		; 00000080H
  001b0	48 85 c0	 test	 rax, rax
  001b3	75 1c		 jne	 SHORT $LN15@Px_DecRef
  001b5	41 b8 64 16 00
	00		 mov	 r8d, 5732		; 00001664H
  001bb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  001c2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BK@NDNNNPPJ@?$AAP?$AAx?$AA_?$AAC?$AAL?$AAO?$AAN?$AAE?$AAD?$AA?$CI?$AAo?$AA?$CJ?$AA?$AA@
  001c9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001cf	33 c0		 xor	 eax, eax
$LN15@Px_DecRef:

; 5733 :             /* xxx todo: decref parent's children count */
; 5734 : 
; 5735 :             return;

  001d1	eb 22		 jmp	 SHORT $LN9@Px_DecRef
$LN1@Px_DecRef:

; 5736 :         }
; 5737 : 
; 5738 :         assert(0);

  001d3	33 c0		 xor	 eax, eax
  001d5	85 c0		 test	 eax, eax
  001d7	75 1c		 jne	 SHORT $LN16@Px_DecRef
  001d9	41 b8 6a 16 00
	00		 mov	 r8d, 5738		; 0000166aH
  001df	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  001e6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_13COJANIEC@?$AA0?$AA?$AA@
  001ed	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001f3	33 c0		 xor	 eax, eax
$LN16@Px_DecRef:
$LN6@Px_DecRef:
$LN9@Px_DecRef:

; 5739 :     }
; 5740 : }

  001f5	48 83 c4 58	 add	 rsp, 88			; 00000058H
  001f9	c3		 ret	 0
Px_DecRef ENDP
_TEXT	ENDS
PUBLIC	PxSocket_GetRecvCallback
EXTRN	PyObject_IsTrue:PROC
EXTRN	PyObject_HasAttrString:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PxSocket_GetRecvCallback DD imagerel $LN7
	DD	imagerel $LN7+157
	DD	imagerel $unwind$PxSocket_GetRecvCallback
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PxSocket_GetRecvCallback DD 010901H
	DD	08209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PxSocket_GetRecvCallback
_TEXT	SEGMENT
lines_mode$ = 32
tv75 = 40
tv79 = 48
s$ = 80
PxSocket_GetRecvCallback PROC				; COMDAT

; 5790 : {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 5791 :     int lines_mode;
; 5792 :     READ_LOCK(s);

  00009	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  0000e	e8 00 00 00 00	 call	 _read_lock

; 5793 :     lines_mode = PyObject_IsTrue(PxSocket_GET_ATTR("lines_mode"));

  00013	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@JKAFEJJM@lines_mode?$AA@
  0001a	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0001f	48 8b 88 90 02
	00 00		 mov	 rcx, QWORD PTR [rax+656]
  00026	e8 00 00 00 00	 call	 PyObject_HasAttrString
  0002b	85 c0		 test	 eax, eax
  0002d	74 1f		 je	 SHORT $LN3@PxSocket_G
  0002f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@JKAFEJJM@lines_mode?$AA@
  00036	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0003b	48 8b 88 90 02
	00 00		 mov	 rcx, QWORD PTR [rax+656]
  00042	e8 00 00 00 00	 call	 PyObject_GetAttrString
  00047	48 89 44 24 28	 mov	 QWORD PTR tv75[rsp], rax
  0004c	eb 0c		 jmp	 SHORT $LN4@PxSocket_G
$LN3@PxSocket_G:
  0004e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00055	48 89 44 24 28	 mov	 QWORD PTR tv75[rsp], rax
$LN4@PxSocket_G:
  0005a	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tv75[rsp]
  0005f	e8 00 00 00 00	 call	 PyObject_IsTrue
  00064	89 44 24 20	 mov	 DWORD PTR lines_mode$[rsp], eax

; 5794 :     READ_UNLOCK(s);

  00068	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  0006d	e8 00 00 00 00	 call	 _read_unlock

; 5795 :     return (lines_mode ? "lines_received" : "data_received");

  00072	83 7c 24 20 00	 cmp	 DWORD PTR lines_mode$[rsp], 0
  00077	74 0e		 je	 SHORT $LN5@PxSocket_G
  00079	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0P@FHJFIELO@lines_received?$AA@
  00080	48 89 44 24 30	 mov	 QWORD PTR tv79[rsp], rax
  00085	eb 0c		 jmp	 SHORT $LN6@PxSocket_G
$LN5@PxSocket_G:
  00087	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0O@KHJLGLGO@data_received?$AA@
  0008e	48 89 44 24 30	 mov	 QWORD PTR tv79[rsp], rax
$LN6@PxSocket_G:
  00093	48 8b 44 24 30	 mov	 rax, QWORD PTR tv79[rsp]

; 5796 : }

  00098	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0009c	c3		 ret	 0
PxSocket_GetRecvCallback ENDP
_TEXT	ENDS
PUBLIC	??_C@_1FO@GJLFKMLD@?$AAP?$AAx?$AA_?$AAS?$AAO?$AAC?$AAK?$AAF?$AAL?$AAA?$AAG?$AAS?$AA?$CI?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?5?$AAP?$AAx?$AA_?$AAS?$AAO?$AAC?$AAK?$AAF?$AAL?$AAA?$AAG?$AAS?$AA_?$AAC@ ; `string'
PUBLIC	??_C@_0BI@MJHHLNDN@unknown?5error?5code?3?5?$CFd?6?$AA@ ; `string'
PUBLIC	??_C@_0BA@KFHPAKD@WSAEWOULDBLOCK?$CB?$AA@	; `string'
PUBLIC	??_C@_0BB@FBEBJMAM@ERROR_IO_PENDING?$AA@	; `string'
PUBLIC	??_C@_0BA@JMGJABEC@ERROR_MORE_DATA?$AA@		; `string'
PUBLIC	??_C@_1BA@NKFADEIM@?$AAs?$AAy?$AAs?$AAc?$AAa?$AAl?$AAl?$AA?$AA@ ; `string'
PUBLIC	??_C@_07GONIMADJ@WSARecv?$AA@			; `string'
PUBLIC	??_C@_1DK@MKBHPLBM@?$AAs?$AA?9?$AA?$DO?$AAi?$AAo?$AA_?$AAo?$AAp?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAP?$AAx?$AAS?$AAo?$AAc?$AAk?$AAe?$AAt?$AA_?$AAI?$AAO?$AA_?$AAR?$AAE?$AAC?$AAV?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DK@OCEKDCMD@?$AA0?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA?$CC?$AAx?$AAx?$AAx?$AA?5?$AAt?$AAo?$AAd?$AAo?$AA?3?$AA?5?$AAr?$AAe?$AAc?$AAv?$AA_?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$CC?$AA?$AA@ ; `string'
PUBLIC	??_C@_0BG@GHODDANO@xxx?5todo?3?5recv_failed?$AA@ ; `string'
PUBLIC	??_C@_0EP@FCIAAFM@data_received?$CI?$CJ?5did?5not?5return?5a@ ; `string'
PUBLIC	??_C@_1DM@OPIDLANA@?$AAP?$AAy?$AA_?$AAS?$AAI?$AAZ?$AAE?$AA?$CI?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAr?$AAe?$AAc?$AAv?$AA_?$AAn?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?$AA@ ; `string'
PUBLIC	??_C@_1O@JGBPCKCO@?$AAn?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAo?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CE@PGCKLFKB@?$AAs?$AA?9?$AA?$DO?$AAn?$AAu?$AAm?$AA_?$AAr?$AAb?$AAu?$AAf?$AAs?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA1?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CA@KANJEHAG@?$AAr?$AAe?$AAc?$AAv?$AA_?$AAn?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CG@GBGOGDPA@?$AAs?$AA?9?$AA?$DO?$AAo?$AAl?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA?$CG?$AAr?$AAb?$AAu?$AAf?$AA?9?$AA?$DO?$AAo?$AAl?$AA?$AA@ ; `string'
PUBLIC	??_C@_13CIFDLIMG@?$AAw?$AA?$AA@			; `string'
PUBLIC	??_C@_19DJKFFBEH@?$AAr?$AAb?$AAu?$AAf?$AA?$AA@	; `string'
PUBLIC	??_C@_1CA@HPDFKAIE@?$AAr?$AAe?$AAc?$AAv?$AA_?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CA@FFEMNDKF@?$AA?$CB?$AAr?$AAb?$AAu?$AAf?$AA?9?$AA?$DO?$AAs?$AAn?$AAa?$AAp?$AAs?$AAh?$AAo?$AAt?$AA?$AA@ ; `string'
PUBLIC	??_C@_15HECFBAOK@?$AA?$CB?$AAw?$AA?$AA@		; `string'
PUBLIC	??_C@_1M@CCGOGIMJ@?$AA?$CB?$AAr?$AAb?$AAu?$AAf?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CK@HCOMLKJP@?$AAP?$AAx?$AAS?$AAo?$AAc?$AAk?$AAe?$AAt?$AA_?$AAC?$AAA?$AAN?$AA_?$AAR?$AAE?$AAC?$AAV?$AA?$CI?$AAs?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CO@DLADOB@?$AA?$CB?$AAP?$AAx?$AAS?$AAo?$AAc?$AAk?$AAe?$AAt?$AA_?$AAR?$AAE?$AAC?$AAV?$AA_?$AAM?$AAO?$AAR?$AAE?$AA?$CI?$AAs?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CA@MHMFLHCC@?$AAs?$AA?9?$AA?$DO?$AAr?$AAe?$AAc?$AAv?$AA_?$AAi?$AAd?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CC@EBJGLGKP@?$AAr?$AAe?$AAc?$AAv?$AA_?$AAn?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CI@PAAOKKFG@?$AAs?$AA?9?$AA?$DO?$AAr?$AAe?$AAc?$AAv?$AA_?$AAn?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	PxServerSocket_ClientClosed
PUBLIC	??_C@_1BI@GLLDIFJC@?$AAn?$AAe?$AAx?$AAt?$AA_?$AAo?$AAp?$AAc?$AAo?$AAd?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CO@IEHJEKEM@?$AAl?$AAa?$AAs?$AAt?$AA_?$AAe?$AAr?$AAr?$AAo?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAO?$AA_?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?$AA@ ; `string'
PUBLIC	??_C@_0CC@ODEEEBEO@DisconnectEx?$CI?$CJ?5?9?$DO?5WSAEWOULDBLOCK@ ; `string'
PUBLIC	??_C@_1FC@HAOICEN@?$AA?$CB?$AA?$CI?$AAP?$AAx?$AA_?$AAS?$AAO?$AAC?$AAK?$AAF?$AAL?$AAA?$AAG?$AAS?$AA?$CI?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?5?$AAP?$AAx?$AA_?$AAS?$AAO?$AAC?$AAK?$AAF?$AAL?$AAA?$AAG?$AAS@ ; `string'
PUBLIC	??_C@_1JI@ICNBINND@?$AA?$CI?$AAP?$AAx?$AA_?$AAS?$AAO?$AAC?$AAK?$AAF?$AAL?$AAA?$AAG?$AAS?$AA?$CI?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?5?$AAP?$AAx?$AA_?$AAS?$AAO?$AAC?$AAK?$AAF?$AAL?$AAA?$AAG?$AAS?$AA_@ ; `string'
PUBLIC	??_C@_07CDJEAKAJ@WSASend?$AA@			; `string'
PUBLIC	??_C@_1DK@GDFLBMOI@?$AAs?$AA?9?$AA?$DO?$AAi?$AAo?$AA_?$AAo?$AAp?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAP?$AAx?$AAS?$AAo?$AAc?$AAk?$AAe?$AAt?$AA_?$AAI?$AAO?$AA_?$AAS?$AAE?$AAN?$AAD?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BE@IPFILOEG@?$AAw?$AAs?$AAa?$AA_?$AAe?$AAr?$AAr?$AAo?$AAr?$AA?$AA@ ; `string'
PUBLIC	??_C@_0HI@DGAEDMOP@protocol?5has?5data_received?$HMlines@ ; `string'
PUBLIC	??_C@_0KE@KPJBDGKF@protocol?8s?5connection_made?$CI?$CJ?5cal@ ; `string'
PUBLIC	??_C@_0EP@KOIIEICF@send_complete?$CI?$CJ?5did?5not?5return?5a@ ; `string'
PUBLIC	??_C@_1BO@PDILFDEN@?$AAc?$AA?9?$AA?$DO?$AAo?$AAl?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAs?$AA?9?$AA?$DO?$AAo?$AAl?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BI@BOMKPHOA@?$AAs?$AA?9?$AA?$DO?$AAo?$AAl?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAo?$AAl?$AA?$AA@ ; `string'
PUBLIC	??_C@_0BD@BIALAGNA@CreateThreadpoolIo?$AA@	; `string'
PUBLIC	??_C@_1GK@PAGBDEEJ@?$AAP?$AAx?$AA_?$AAS?$AAO?$AAC?$AAK?$AAF?$AAL?$AAA?$AAG?$AAS?$AA?$CI?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?5?$AAP?$AAx?$AA_?$AAS?$AAO?$AAC?$AAK?$AAF?$AAL?$AAA?$AAG?$AAS?$AA_?$AAS@ ; `string'
PUBLIC	PxSocketClient_Callback
PUBLIC	??_C@_19NGGHDKHJ@?$AAs?$AAb?$AAu?$AAf?$AA?$AA@	; `string'
PUBLIC	??_C@_0FB@KBEECAJI@connection_made?$CI?$CJ?5did?5not?5return@ ; `string'
PUBLIC	??_C@_0EF@NHKFODOC@data_received?5callback?5scheduled@ ; `string'
PUBLIC	??_C@_1BA@HDEGGLDD@?$AA?$CB?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CE@JKFGJBND@?$AA?$CB?$AAP?$AAy?$AAE?$AAr?$AAr?$AA_?$AAO?$AAc?$AAc?$AAu?$AAr?$AAr?$AAe?$AAd?$AA?$CI?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1HC@KNABGFPC@?$AA?$CB?$AA?$CI?$AAP?$AAx?$AA_?$AAS?$AAO?$AAC?$AAK?$AAF?$AAL?$AAA?$AAG?$AAS?$AA?$CI?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?5?$AAP?$AAx?$AA_?$AAS?$AAO?$AAC?$AAK?$AAF?$AAL?$AAA?$AAG?$AAS@ ; `string'
PUBLIC	??_C@_1IE@LDAJBBHP@?$AAs?$AA?9?$AA?$DO?$AAi?$AAo?$AA_?$AAo?$AAp?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAP?$AAx?$AAS?$AAo?$AAc?$AAk?$AAe?$AAt?$AA_?$AAI?$AAO?$AA_?$AAA?$AAC?$AAC?$AAE?$AAP?$AAT?$AA?5?$AA?$HM@ ; `string'
PUBLIC	??_C@_0DN@CMLMIFME@failed?5to?5extract?5sendable?5objec@ ; `string'
PUBLIC	PxSocket_LoadInitialBytes
PUBLIC	??_C@_1BE@IDILNNED@?$AA?$CB?$AAs?$AAn?$AAa?$AAp?$AAs?$AAh?$AAo?$AAt?$AA?$AA@ ; `string'
PUBLIC	??_C@_1HA@EJOBDFPA@?$AA?$CB?$AA?$CI?$AAP?$AAx?$AA_?$AAS?$AAO?$AAC?$AAK?$AAF?$AAL?$AAA?$AAG?$AAS?$AA?$CI?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?5?$AAP?$AAx?$AA_?$AAS?$AAO?$AAC?$AAK?$AAF?$AAL?$AAA?$AAG?$AAS@ ; `string'
PUBLIC	??_C@_1DI@LBHEJGP@?$AAP?$AAx?$AAS?$AAo?$AAc?$AAk?$AAe?$AAt?$AA_?$AAI?$AAS?$AA_?$AAS?$AAE?$AAR?$AAV?$AAE?$AAR?$AAC?$AAL?$AAI?$AAE?$AAN?$AAT?$AA?$CI?$AAs?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DO@GEPCPGHM@?$AA0?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA?$CC?$AAx?$AAx?$AAx?$AA?5?$AAt?$AAo?$AAd?$AAo?$AA?3?$AA?5?$AAs?$AAe?$AAn?$AAd?$AA_?$AAs?$AAh?$AAu?$AAt?$AAd?$AAo?$AAw?$AAn?$AA?$CC?$AA?$AA@ ; `string'
PUBLIC	??_C@_0BI@DKBKNOFI@xxx?5todo?3?5send_shutdown?$AA@ ; `string'
PUBLIC	??_C@_0BC@NEGKDJJD@shutdown?$CISD_SEND?$CJ?$AA@	; `string'
PUBLIC	??_C@_1DO@GGGCLLLD@?$AA0?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA?$CC?$AAx?$AAx?$AAx?$AA?5?$AAt?$AAo?$AAd?$AAo?$AA?3?$AA?5?$AAr?$AAe?$AAc?$AAv?$AA_?$AAs?$AAh?$AAu?$AAt?$AAd?$AAo?$AAw?$AAn?$AA?$CC?$AA?$AA@ ; `string'
PUBLIC	??_C@_0BI@MPCAEDMK@xxx?5todo?3?5recv_shutdown?$AA@ ; `string'
PUBLIC	PxSocket_HandleException
PUBLIC	??_C@_0BF@KEAFFCFE@shutdown?$CISD_RECEIVE?$CJ?$AA@ ; `string'
PUBLIC	??_C@_1BI@KAKHJKLI@?$AAs?$AA?9?$AA?$DO?$AAp?$AAr?$AAo?$AAt?$AAo?$AAc?$AAo?$AAl?$AA?$AA@ ; `string'
PUBLIC	PxSocket_IOLoop
EXTRN	__imp_closesocket:PROC
EXTRN	__imp_WSARecv:PROC
EXTRN	PyLong_FromSize_t:PROC
EXTRN	__imp_Sleep:PROC
EXTRN	__imp_WSASend:PROC
EXTRN	__imp_shutdown:PROC
_BSS	SEGMENT
PySocketModule DB 088H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PxSocket_IOLoop DD imagerel $LN346
	DD	imagerel $LN346+13800
	DD	imagerel $unwind$PxSocket_IOLoop
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PxSocket_IOLoop DD 020c01H
	DD	035010cH
xdata	ENDS
;	COMDAT ??_C@_1FO@GJLFKMLD@?$AAP?$AAx?$AA_?$AAS?$AAO?$AAC?$AAK?$AAF?$AAL?$AAA?$AAG?$AAS?$AA?$CI?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?5?$AAP?$AAx?$AA_?$AAS?$AAO?$AAC?$AAK?$AAF?$AAL?$AAA?$AAG?$AAS?$AA_?$AAC@
CONST	SEGMENT
??_C@_1FO@GJLFKMLD@?$AAP?$AAx?$AA_?$AAS?$AAO?$AAC?$AAK?$AAF?$AAL?$AAA?$AAG?$AAS?$AA?$CI?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?5?$AAP?$AAx?$AA_?$AAS?$AAO?$AAC?$AAK?$AAF?$AAL?$AAA?$AAG?$AAS?$AA_?$AAC@ DB 'P'
	DB	00H, 'x', 00H, '_', 00H, 'S', 00H, 'O', 00H, 'C', 00H, 'K', 00H
	DB	'F', 00H, 'L', 00H, 'A', 00H, 'G', 00H, 'S', 00H, '(', 00H, 's'
	DB	00H, ')', 00H, ' ', 00H, '&', 00H, ' ', 00H, 'P', 00H, 'x', 00H
	DB	'_', 00H, 'S', 00H, 'O', 00H, 'C', 00H, 'K', 00H, 'F', 00H, 'L'
	DB	00H, 'A', 00H, 'G', 00H, 'S', 00H, '_', 00H, 'C', 00H, 'L', 00H
	DB	'O', 00H, 'S', 00H, 'E', 00H, '_', 00H, 'S', 00H, 'C', 00H, 'H'
	DB	00H, 'E', 00H, 'D', 00H, 'U', 00H, 'L', 00H, 'E', 00H, 'D', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@MJHHLNDN@unknown?5error?5code?3?5?$CFd?6?$AA@
CONST	SEGMENT
??_C@_0BI@MJHHLNDN@unknown?5error?5code?3?5?$CFd?6?$AA@ DB 'unknown error'
	DB	' code: %d', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@KFHPAKD@WSAEWOULDBLOCK?$CB?$AA@
CONST	SEGMENT
??_C@_0BA@KFHPAKD@WSAEWOULDBLOCK?$CB?$AA@ DB 'WSAEWOULDBLOCK!', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FBEBJMAM@ERROR_IO_PENDING?$AA@
CONST	SEGMENT
??_C@_0BB@FBEBJMAM@ERROR_IO_PENDING?$AA@ DB 'ERROR_IO_PENDING', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JMGJABEC@ERROR_MORE_DATA?$AA@
CONST	SEGMENT
??_C@_0BA@JMGJABEC@ERROR_MORE_DATA?$AA@ DB 'ERROR_MORE_DATA', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BA@NKFADEIM@?$AAs?$AAy?$AAs?$AAc?$AAa?$AAl?$AAl?$AA?$AA@
CONST	SEGMENT
??_C@_1BA@NKFADEIM@?$AAs?$AAy?$AAs?$AAc?$AAa?$AAl?$AAl?$AA?$AA@ DB 's', 00H
	DB	'y', 00H, 's', 00H, 'c', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_07GONIMADJ@WSARecv?$AA@
CONST	SEGMENT
??_C@_07GONIMADJ@WSARecv?$AA@ DB 'WSARecv', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1DK@MKBHPLBM@?$AAs?$AA?9?$AA?$DO?$AAi?$AAo?$AA_?$AAo?$AAp?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAP?$AAx?$AAS?$AAo?$AAc?$AAk?$AAe?$AAt?$AA_?$AAI?$AAO?$AA_?$AAR?$AAE?$AAC?$AAV?$AA?$AA@
CONST	SEGMENT
??_C@_1DK@MKBHPLBM@?$AAs?$AA?9?$AA?$DO?$AAi?$AAo?$AA_?$AAo?$AAp?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAP?$AAx?$AAS?$AAo?$AAc?$AAk?$AAe?$AAt?$AA_?$AAI?$AAO?$AA_?$AAR?$AAE?$AAC?$AAV?$AA?$AA@ DB 's'
	DB	00H, '-', 00H, '>', 00H, 'i', 00H, 'o', 00H, '_', 00H, 'o', 00H
	DB	'p', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'P', 00H, 'x'
	DB	00H, 'S', 00H, 'o', 00H, 'c', 00H, 'k', 00H, 'e', 00H, 't', 00H
	DB	'_', 00H, 'I', 00H, 'O', 00H, '_', 00H, 'R', 00H, 'E', 00H, 'C'
	DB	00H, 'V', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1DK@OCEKDCMD@?$AA0?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA?$CC?$AAx?$AAx?$AAx?$AA?5?$AAt?$AAo?$AAd?$AAo?$AA?3?$AA?5?$AAr?$AAe?$AAc?$AAv?$AA_?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$CC?$AA?$AA@
CONST	SEGMENT
??_C@_1DK@OCEKDCMD@?$AA0?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA?$CC?$AAx?$AAx?$AAx?$AA?5?$AAt?$AAo?$AAd?$AAo?$AA?3?$AA?5?$AAr?$AAe?$AAc?$AAv?$AA_?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$CC?$AA?$AA@ DB '0'
	DB	00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '"', 00H, 'x', 00H
	DB	'x', 00H, 'x', 00H, ' ', 00H, 't', 00H, 'o', 00H, 'd', 00H, 'o'
	DB	00H, ':', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 'c', 00H, 'v', 00H
	DB	'_', 00H, 'f', 00H, 'a', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'd'
	DB	00H, '"', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@GHODDANO@xxx?5todo?3?5recv_failed?$AA@
CONST	SEGMENT
??_C@_0BG@GHODDANO@xxx?5todo?3?5recv_failed?$AA@ DB 'xxx todo: recv_faile'
	DB	'd', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EP@FCIAAFM@data_received?$CI?$CJ?5did?5not?5return?5a@
CONST	SEGMENT
??_C@_0EP@FCIAAFM@data_received?$CI?$CJ?5did?5not?5return?5a@ DB 'data_re'
	DB	'ceived() did not return a sendable object (bytes, bytearray o'
	DB	'r unicode)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1DM@OPIDLANA@?$AAP?$AAy?$AA_?$AAS?$AAI?$AAZ?$AAE?$AA?$CI?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAr?$AAe?$AAc?$AAv?$AA_?$AAn?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?$AA@
CONST	SEGMENT
??_C@_1DM@OPIDLANA@?$AAP?$AAy?$AA_?$AAS?$AAI?$AAZ?$AAE?$AA?$CI?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAr?$AAe?$AAc?$AAv?$AA_?$AAn?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, '_', 00H, 'S', 00H, 'I', 00H, 'Z', 00H, 'E', 00H
	DB	'(', 00H, 'b', 00H, 'y', 00H, 't', 00H, 'e', 00H, 's', 00H, ')'
	DB	00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'r', 00H, 'e', 00H
	DB	'c', 00H, 'v', 00H, '_', 00H, 'n', 00H, 'b', 00H, 'y', 00H, 't'
	DB	00H, 'e', 00H, 's', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1O@JGBPCKCO@?$AAn?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAo?$AA?$AA@
CONST	SEGMENT
??_C@_1O@JGBPCKCO@?$AAn?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAo?$AA?$AA@ DB 'n', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'o', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CE@PGCKLFKB@?$AAs?$AA?9?$AA?$DO?$AAn?$AAu?$AAm?$AA_?$AAr?$AAb?$AAu?$AAf?$AAs?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA1?$AA?$AA@
CONST	SEGMENT
??_C@_1CE@PGCKLFKB@?$AAs?$AA?9?$AA?$DO?$AAn?$AAu?$AAm?$AA_?$AAr?$AAb?$AAu?$AAf?$AAs?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA1?$AA?$AA@ DB 's'
	DB	00H, '-', 00H, '>', 00H, 'n', 00H, 'u', 00H, 'm', 00H, '_', 00H
	DB	'r', 00H, 'b', 00H, 'u', 00H, 'f', 00H, 's', 00H, ' ', 00H, '='
	DB	00H, '=', 00H, ' ', 00H, '1', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1CA@KANJEHAG@?$AAr?$AAe?$AAc?$AAv?$AA_?$AAn?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1CA@KANJEHAG@?$AAr?$AAe?$AAc?$AAv?$AA_?$AAn?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@ DB 'r'
	DB	00H, 'e', 00H, 'c', 00H, 'v', 00H, '_', 00H, 'n', 00H, 'b', 00H
	DB	'y', 00H, 't', 00H, 'e', 00H, 's', 00H, ' ', 00H, '>', 00H, ' '
	DB	00H, '0', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@GBGOGDPA@?$AAs?$AA?9?$AA?$DO?$AAo?$AAl?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA?$CG?$AAr?$AAb?$AAu?$AAf?$AA?9?$AA?$DO?$AAo?$AAl?$AA?$AA@
CONST	SEGMENT
??_C@_1CG@GBGOGDPA@?$AAs?$AA?9?$AA?$DO?$AAo?$AAl?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA?$CG?$AAr?$AAb?$AAu?$AAf?$AA?9?$AA?$DO?$AAo?$AAl?$AA?$AA@ DB 's'
	DB	00H, '-', 00H, '>', 00H, 'o', 00H, 'l', 00H, ' ', 00H, '=', 00H
	DB	'=', 00H, ' ', 00H, '&', 00H, 'r', 00H, 'b', 00H, 'u', 00H, 'f'
	DB	00H, '-', 00H, '>', 00H, 'o', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_13CIFDLIMG@?$AAw?$AA?$AA@
CONST	SEGMENT
??_C@_13CIFDLIMG@?$AAw?$AA?$AA@ DB 'w', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_19DJKFFBEH@?$AAr?$AAb?$AAu?$AAf?$AA?$AA@
CONST	SEGMENT
??_C@_19DJKFFBEH@?$AAr?$AAb?$AAu?$AAf?$AA?$AA@ DB 'r', 00H, 'b', 00H, 'u', 00H
	DB	'f', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CA@HPDFKAIE@?$AAr?$AAe?$AAc?$AAv?$AA_?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1CA@HPDFKAIE@?$AAr?$AAe?$AAc?$AAv?$AA_?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@ DB 'r'
	DB	00H, 'e', 00H, 'c', 00H, 'v', 00H, '_', 00H, 'f', 00H, 'l', 00H
	DB	'a', 00H, 'g', 00H, 's', 00H, ' ', 00H, '=', 00H, '=', 00H, ' '
	DB	00H, '0', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1CA@FFEMNDKF@?$AA?$CB?$AAr?$AAb?$AAu?$AAf?$AA?9?$AA?$DO?$AAs?$AAn?$AAa?$AAp?$AAs?$AAh?$AAo?$AAt?$AA?$AA@
CONST	SEGMENT
??_C@_1CA@FFEMNDKF@?$AA?$CB?$AAr?$AAb?$AAu?$AAf?$AA?9?$AA?$DO?$AAs?$AAn?$AAa?$AAp?$AAs?$AAh?$AAo?$AAt?$AA?$AA@ DB '!'
	DB	00H, 'r', 00H, 'b', 00H, 'u', 00H, 'f', 00H, '-', 00H, '>', 00H
	DB	's', 00H, 'n', 00H, 'a', 00H, 'p', 00H, 's', 00H, 'h', 00H, 'o'
	DB	00H, 't', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_15HECFBAOK@?$AA?$CB?$AAw?$AA?$AA@
CONST	SEGMENT
??_C@_15HECFBAOK@?$AA?$CB?$AAw?$AA?$AA@ DB '!', 00H, 'w', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1M@CCGOGIMJ@?$AA?$CB?$AAr?$AAb?$AAu?$AAf?$AA?$AA@
CONST	SEGMENT
??_C@_1M@CCGOGIMJ@?$AA?$CB?$AAr?$AAb?$AAu?$AAf?$AA?$AA@ DB '!', 00H, 'r', 00H
	DB	'b', 00H, 'u', 00H, 'f', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@HCOMLKJP@?$AAP?$AAx?$AAS?$AAo?$AAc?$AAk?$AAe?$AAt?$AA_?$AAC?$AAA?$AAN?$AA_?$AAR?$AAE?$AAC?$AAV?$AA?$CI?$AAs?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CK@HCOMLKJP@?$AAP?$AAx?$AAS?$AAo?$AAc?$AAk?$AAe?$AAt?$AA_?$AAC?$AAA?$AAN?$AA_?$AAR?$AAE?$AAC?$AAV?$AA?$CI?$AAs?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'x', 00H, 'S', 00H, 'o', 00H, 'c', 00H, 'k', 00H, 'e', 00H
	DB	't', 00H, '_', 00H, 'C', 00H, 'A', 00H, 'N', 00H, '_', 00H, 'R'
	DB	00H, 'E', 00H, 'C', 00H, 'V', 00H, '(', 00H, 's', 00H, ')', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1CO@DLADOB@?$AA?$CB?$AAP?$AAx?$AAS?$AAo?$AAc?$AAk?$AAe?$AAt?$AA_?$AAR?$AAE?$AAC?$AAV?$AA_?$AAM?$AAO?$AAR?$AAE?$AA?$CI?$AAs?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CO@DLADOB@?$AA?$CB?$AAP?$AAx?$AAS?$AAo?$AAc?$AAk?$AAe?$AAt?$AA_?$AAR?$AAE?$AAC?$AAV?$AA_?$AAM?$AAO?$AAR?$AAE?$AA?$CI?$AAs?$AA?$CJ?$AA?$AA@ DB '!'
	DB	00H, 'P', 00H, 'x', 00H, 'S', 00H, 'o', 00H, 'c', 00H, 'k', 00H
	DB	'e', 00H, 't', 00H, '_', 00H, 'R', 00H, 'E', 00H, 'C', 00H, 'V'
	DB	00H, '_', 00H, 'M', 00H, 'O', 00H, 'R', 00H, 'E', 00H, '(', 00H
	DB	's', 00H, ')', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1CA@MHMFLHCC@?$AAs?$AA?9?$AA?$DO?$AAr?$AAe?$AAc?$AAv?$AA_?$AAi?$AAd?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1CA@MHMFLHCC@?$AAs?$AA?9?$AA?$DO?$AAr?$AAe?$AAc?$AAv?$AA_?$AAi?$AAd?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@ DB 's'
	DB	00H, '-', 00H, '>', 00H, 'r', 00H, 'e', 00H, 'c', 00H, 'v', 00H
	DB	'_', 00H, 'i', 00H, 'd', 00H, ' ', 00H, '=', 00H, '=', 00H, ' '
	DB	00H, '0', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1CC@EBJGLGKP@?$AAr?$AAe?$AAc?$AAv?$AA_?$AAn?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1CC@EBJGLGKP@?$AAr?$AAe?$AAc?$AAv?$AA_?$AAn?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@ DB 'r'
	DB	00H, 'e', 00H, 'c', 00H, 'v', 00H, '_', 00H, 'n', 00H, 'b', 00H
	DB	'y', 00H, 't', 00H, 'e', 00H, 's', 00H, ' ', 00H, '=', 00H, '='
	DB	00H, ' ', 00H, '0', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1CI@PAAOKKFG@?$AAs?$AA?9?$AA?$DO?$AAr?$AAe?$AAc?$AAv?$AA_?$AAn?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1CI@PAAOKKFG@?$AAs?$AA?9?$AA?$DO?$AAr?$AAe?$AAc?$AAv?$AA_?$AAn?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@ DB 's'
	DB	00H, '-', 00H, '>', 00H, 'r', 00H, 'e', 00H, 'c', 00H, 'v', 00H
	DB	'_', 00H, 'n', 00H, 'b', 00H, 'y', 00H, 't', 00H, 'e', 00H, 's'
	DB	00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BI@GLLDIFJC@?$AAn?$AAe?$AAx?$AAt?$AA_?$AAo?$AAp?$AAc?$AAo?$AAd?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1BI@GLLDIFJC@?$AAn?$AAe?$AAx?$AAt?$AA_?$AAo?$AAp?$AAc?$AAo?$AAd?$AAe?$AA?$AA@ DB 'n'
	DB	00H, 'e', 00H, 'x', 00H, 't', 00H, '_', 00H, 'o', 00H, 'p', 00H
	DB	'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CO@IEHJEKEM@?$AAl?$AAa?$AAs?$AAt?$AA_?$AAe?$AAr?$AAr?$AAo?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAO?$AA_?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?$AA@
CONST	SEGMENT
??_C@_1CO@IEHJEKEM@?$AAl?$AAa?$AAs?$AAt?$AA_?$AAe?$AAr?$AAr?$AAo?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAO?$AA_?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?$AA@ DB 'l'
	DB	00H, 'a', 00H, 's', 00H, 't', 00H, '_', 00H, 'e', 00H, 'r', 00H
	DB	'r', 00H, 'o', 00H, 'r', 00H, ' ', 00H, '!', 00H, '=', 00H, ' '
	DB	00H, 'N', 00H, 'O', 00H, '_', 00H, 'E', 00H, 'R', 00H, 'R', 00H
	DB	'O', 00H, 'R', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@ODEEEBEO@DisconnectEx?$CI?$CJ?5?9?$DO?5WSAEWOULDBLOCK@
CONST	SEGMENT
??_C@_0CC@ODEEEBEO@DisconnectEx?$CI?$CJ?5?9?$DO?5WSAEWOULDBLOCK@ DB 'Disc'
	DB	'onnectEx() -> WSAEWOULDBLOCK!', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1FC@HAOICEN@?$AA?$CB?$AA?$CI?$AAP?$AAx?$AA_?$AAS?$AAO?$AAC?$AAK?$AAF?$AAL?$AAA?$AAG?$AAS?$AA?$CI?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?5?$AAP?$AAx?$AA_?$AAS?$AAO?$AAC?$AAK?$AAF?$AAL?$AAA?$AAG?$AAS@
CONST	SEGMENT
??_C@_1FC@HAOICEN@?$AA?$CB?$AA?$CI?$AAP?$AAx?$AA_?$AAS?$AAO?$AAC?$AAK?$AAF?$AAL?$AAA?$AAG?$AAS?$AA?$CI?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?5?$AAP?$AAx?$AA_?$AAS?$AAO?$AAC?$AAK?$AAF?$AAL?$AAA?$AAG?$AAS@ DB '!'
	DB	00H, '(', 00H, 'P', 00H, 'x', 00H, '_', 00H, 'S', 00H, 'O', 00H
	DB	'C', 00H, 'K', 00H, 'F', 00H, 'L', 00H, 'A', 00H, 'G', 00H, 'S'
	DB	00H, '(', 00H, 's', 00H, ')', 00H, ' ', 00H, '&', 00H, ' ', 00H
	DB	'P', 00H, 'x', 00H, '_', 00H, 'S', 00H, 'O', 00H, 'C', 00H, 'K'
	DB	00H, 'F', 00H, 'L', 00H, 'A', 00H, 'G', 00H, 'S', 00H, '_', 00H
	DB	'C', 00H, 'L', 00H, 'O', 00H, 'S', 00H, 'E', 00H, 'D', 00H, ')'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1JI@ICNBINND@?$AA?$CI?$AAP?$AAx?$AA_?$AAS?$AAO?$AAC?$AAK?$AAF?$AAL?$AAA?$AAG?$AAS?$AA?$CI?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?5?$AAP?$AAx?$AA_?$AAS?$AAO?$AAC?$AAK?$AAF?$AAL?$AAA?$AAG?$AAS?$AA_@
CONST	SEGMENT
??_C@_1JI@ICNBINND@?$AA?$CI?$AAP?$AAx?$AA_?$AAS?$AAO?$AAC?$AAK?$AAF?$AAL?$AAA?$AAG?$AAS?$AA?$CI?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?5?$AAP?$AAx?$AA_?$AAS?$AAO?$AAC?$AAK?$AAF?$AAL?$AAA?$AAG?$AAS?$AA_@ DB '('
	DB	00H, 'P', 00H, 'x', 00H, '_', 00H, 'S', 00H, 'O', 00H, 'C', 00H
	DB	'K', 00H, 'F', 00H, 'L', 00H, 'A', 00H, 'G', 00H, 'S', 00H, '('
	DB	00H, 's', 00H, ')', 00H, ' ', 00H, '&', 00H, ' ', 00H, 'P', 00H
	DB	'x', 00H, '_', 00H, 'S', 00H, 'O', 00H, 'C', 00H, 'K', 00H, 'F'
	DB	00H, 'L', 00H, 'A', 00H, 'G', 00H, 'S', 00H, '_', 00H, 'C', 00H
	DB	'L', 00H, 'O', 00H, 'S', 00H, 'E', 00H, '_', 00H, 'S', 00H, 'C'
	DB	00H, 'H', 00H, 'E', 00H, 'D', 00H, 'U', 00H, 'L', 00H, 'E', 00H
	DB	'D', 00H, ')', 00H, ' ', 00H, '|', 00H, '|', 00H, ' ', 00H, '('
	DB	00H, '!', 00H, 'P', 00H, 'x', 00H, 'S', 00H, 'o', 00H, 'c', 00H
	DB	'k', 00H, 'e', 00H, 't', 00H, '_', 00H, 'C', 00H, 'A', 00H, 'N'
	DB	00H, '_', 00H, 'R', 00H, 'E', 00H, 'C', 00H, 'V', 00H, '(', 00H
	DB	's', 00H, ')', 00H, ')', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07CDJEAKAJ@WSASend?$AA@
CONST	SEGMENT
??_C@_07CDJEAKAJ@WSASend?$AA@ DB 'WSASend', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1DK@GDFLBMOI@?$AAs?$AA?9?$AA?$DO?$AAi?$AAo?$AA_?$AAo?$AAp?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAP?$AAx?$AAS?$AAo?$AAc?$AAk?$AAe?$AAt?$AA_?$AAI?$AAO?$AA_?$AAS?$AAE?$AAN?$AAD?$AA?$AA@
CONST	SEGMENT
??_C@_1DK@GDFLBMOI@?$AAs?$AA?9?$AA?$DO?$AAi?$AAo?$AA_?$AAo?$AAp?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAP?$AAx?$AAS?$AAo?$AAc?$AAk?$AAe?$AAt?$AA_?$AAI?$AAO?$AA_?$AAS?$AAE?$AAN?$AAD?$AA?$AA@ DB 's'
	DB	00H, '-', 00H, '>', 00H, 'i', 00H, 'o', 00H, '_', 00H, 'o', 00H
	DB	'p', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'P', 00H, 'x'
	DB	00H, 'S', 00H, 'o', 00H, 'c', 00H, 'k', 00H, 'e', 00H, 't', 00H
	DB	'_', 00H, 'I', 00H, 'O', 00H, '_', 00H, 'S', 00H, 'E', 00H, 'N'
	DB	00H, 'D', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1BE@IPFILOEG@?$AAw?$AAs?$AAa?$AA_?$AAe?$AAr?$AAr?$AAo?$AAr?$AA?$AA@
CONST	SEGMENT
??_C@_1BE@IPFILOEG@?$AAw?$AAs?$AAa?$AA_?$AAe?$AAr?$AAr?$AAo?$AAr?$AA?$AA@ DB 'w'
	DB	00H, 's', 00H, 'a', 00H, '_', 00H, 'e', 00H, 'r', 00H, 'r', 00H
	DB	'o', 00H, 'r', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0HI@DGAEDMOP@protocol?5has?5data_received?$HMlines@
CONST	SEGMENT
??_C@_0HI@DGAEDMOP@protocol?5has?5data_received?$HMlines@ DB 'protocol ha'
	DB	's data_received|lines_received callback, but send_complete() '
	DB	'is sending more data, so it may never be called', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0KE@KPJBDGKF@protocol?8s?5connection_made?$CI?$CJ?5cal@
CONST	SEGMENT
??_C@_0KE@KPJBDGKF@protocol?8s?5connection_made?$CI?$CJ?5cal@ DB 'protoco'
	DB	'l''s connection_made() callback may never be called (because '
	DB	'send_complete() is sending more data on the back of the succe'
	DB	'ssful sending of the initial_bytes)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EP@KOIIEICF@send_complete?$CI?$CJ?5did?5not?5return?5a@
CONST	SEGMENT
??_C@_0EP@KOIIEICF@send_complete?$CI?$CJ?5did?5not?5return?5a@ DB 'send_c'
	DB	'omplete() did not return a sendable object (bytes, bytearray '
	DB	'or unicode)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1BO@PDILFDEN@?$AAc?$AA?9?$AA?$DO?$AAo?$AAl?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAs?$AA?9?$AA?$DO?$AAo?$AAl?$AA?$AA@
CONST	SEGMENT
??_C@_1BO@PDILFDEN@?$AAc?$AA?9?$AA?$DO?$AAo?$AAl?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAs?$AA?9?$AA?$DO?$AAo?$AAl?$AA?$AA@ DB 'c'
	DB	00H, '-', 00H, '>', 00H, 'o', 00H, 'l', 00H, ' ', 00H, '=', 00H
	DB	'=', 00H, ' ', 00H, 's', 00H, '-', 00H, '>', 00H, 'o', 00H, 'l'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1BI@BOMKPHOA@?$AAs?$AA?9?$AA?$DO?$AAo?$AAl?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAo?$AAl?$AA?$AA@
CONST	SEGMENT
??_C@_1BI@BOMKPHOA@?$AAs?$AA?9?$AA?$DO?$AAo?$AAl?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAo?$AAl?$AA?$AA@ DB 's'
	DB	00H, '-', 00H, '>', 00H, 'o', 00H, 'l', 00H, ' ', 00H, '=', 00H
	DB	'=', 00H, ' ', 00H, 'o', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@BIALAGNA@CreateThreadpoolIo?$AA@
CONST	SEGMENT
??_C@_0BD@BIALAGNA@CreateThreadpoolIo?$AA@ DB 'CreateThreadpoolIo', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1GK@PAGBDEEJ@?$AAP?$AAx?$AA_?$AAS?$AAO?$AAC?$AAK?$AAF?$AAL?$AAA?$AAG?$AAS?$AA?$CI?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?5?$AAP?$AAx?$AA_?$AAS?$AAO?$AAC?$AAK?$AAF?$AAL?$AAA?$AAG?$AAS?$AA_?$AAS@
CONST	SEGMENT
??_C@_1GK@PAGBDEEJ@?$AAP?$AAx?$AA_?$AAS?$AAO?$AAC?$AAK?$AAF?$AAL?$AAA?$AAG?$AAS?$AA?$CI?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?5?$AAP?$AAx?$AA_?$AAS?$AAO?$AAC?$AAK?$AAF?$AAL?$AAA?$AAG?$AAS?$AA_?$AAS@ DB 'P'
	DB	00H, 'x', 00H, '_', 00H, 'S', 00H, 'O', 00H, 'C', 00H, 'K', 00H
	DB	'F', 00H, 'L', 00H, 'A', 00H, 'G', 00H, 'S', 00H, '(', 00H, 's'
	DB	00H, ')', 00H, ' ', 00H, '&', 00H, ' ', 00H, 'P', 00H, 'x', 00H
	DB	'_', 00H, 'S', 00H, 'O', 00H, 'C', 00H, 'K', 00H, 'F', 00H, 'L'
	DB	00H, 'A', 00H, 'G', 00H, 'S', 00H, '_', 00H, 'S', 00H, 'E', 00H
	DB	'N', 00H, 'D', 00H, 'I', 00H, 'N', 00H, 'G', 00H, '_', 00H, 'I'
	DB	00H, 'N', 00H, 'I', 00H, 'T', 00H, 'I', 00H, 'A', 00H, 'L', 00H
	DB	'_', 00H, 'B', 00H, 'Y', 00H, 'T', 00H, 'E', 00H, 'S', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_19NGGHDKHJ@?$AAs?$AAb?$AAu?$AAf?$AA?$AA@
CONST	SEGMENT
??_C@_19NGGHDKHJ@?$AAs?$AAb?$AAu?$AAf?$AA?$AA@ DB 's', 00H, 'b', 00H, 'u', 00H
	DB	'f', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0FB@KBEECAJI@connection_made?$CI?$CJ?5did?5not?5return@
CONST	SEGMENT
??_C@_0FB@KBEECAJI@connection_made?$CI?$CJ?5did?5not?5return@ DB 'connect'
	DB	'ion_made() did not return a sendable object (bytes, bytearray'
	DB	' or unicode)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EF@NHKFODOC@data_received?5callback?5scheduled@
CONST	SEGMENT
??_C@_0EF@NHKFODOC@data_received?5callback?5scheduled@ DB 'data_received '
	DB	'callback scheduled sendfile but returned non-None data', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BA@HDEGGLDD@?$AA?$CB?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?$AA@
CONST	SEGMENT
??_C@_1BA@HDEGGLDD@?$AA?$CB?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?$AA@ DB '!', 00H
	DB	'r', 00H, 'e', 00H, 's', 00H, 'u', 00H, 'l', 00H, 't', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1CE@JKFGJBND@?$AA?$CB?$AAP?$AAy?$AAE?$AAr?$AAr?$AA_?$AAO?$AAc?$AAc?$AAu?$AAr?$AAr?$AAe?$AAd?$AA?$CI?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CE@JKFGJBND@?$AA?$CB?$AAP?$AAy?$AAE?$AAr?$AAr?$AA_?$AAO?$AAc?$AAc?$AAu?$AAr?$AAr?$AAe?$AAd?$AA?$CI?$AA?$CJ?$AA?$AA@ DB '!'
	DB	00H, 'P', 00H, 'y', 00H, 'E', 00H, 'r', 00H, 'r', 00H, '_', 00H
	DB	'O', 00H, 'c', 00H, 'c', 00H, 'u', 00H, 'r', 00H, 'r', 00H, 'e'
	DB	00H, 'd', 00H, '(', 00H, ')', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1HC@KNABGFPC@?$AA?$CB?$AA?$CI?$AAP?$AAx?$AA_?$AAS?$AAO?$AAC?$AAK?$AAF?$AAL?$AAA?$AAG?$AAS?$AA?$CI?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?5?$AAP?$AAx?$AA_?$AAS?$AAO?$AAC?$AAK?$AAF?$AAL?$AAA?$AAG?$AAS@
CONST	SEGMENT
??_C@_1HC@KNABGFPC@?$AA?$CB?$AA?$CI?$AAP?$AAx?$AA_?$AAS?$AAO?$AAC?$AAK?$AAF?$AAL?$AAA?$AAG?$AAS?$AA?$CI?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?5?$AAP?$AAx?$AA_?$AAS?$AAO?$AAC?$AAK?$AAF?$AAL?$AAA?$AAG?$AAS@ DB '!'
	DB	00H, '(', 00H, 'P', 00H, 'x', 00H, '_', 00H, 'S', 00H, 'O', 00H
	DB	'C', 00H, 'K', 00H, 'F', 00H, 'L', 00H, 'A', 00H, 'G', 00H, 'S'
	DB	00H, '(', 00H, 's', 00H, ')', 00H, ' ', 00H, '&', 00H, ' ', 00H
	DB	'P', 00H, 'x', 00H, '_', 00H, 'S', 00H, 'O', 00H, 'C', 00H, 'K'
	DB	00H, 'F', 00H, 'L', 00H, 'A', 00H, 'G', 00H, 'S', 00H, '_', 00H
	DB	'C', 00H, 'A', 00H, 'L', 00H, 'L', 00H, 'E', 00H, 'D', 00H, '_'
	DB	00H, 'C', 00H, 'O', 00H, 'N', 00H, 'N', 00H, 'E', 00H, 'C', 00H
	DB	'T', 00H, 'I', 00H, 'O', 00H, 'N', 00H, '_', 00H, 'M', 00H, 'A'
	DB	00H, 'D', 00H, 'E', 00H, ')', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1IE@LDAJBBHP@?$AAs?$AA?9?$AA?$DO?$AAi?$AAo?$AA_?$AAo?$AAp?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAP?$AAx?$AAS?$AAo?$AAc?$AAk?$AAe?$AAt?$AA_?$AAI?$AAO?$AA_?$AAA?$AAC?$AAC?$AAE?$AAP?$AAT?$AA?5?$AA?$HM@
CONST	SEGMENT
??_C@_1IE@LDAJBBHP@?$AAs?$AA?9?$AA?$DO?$AAi?$AAo?$AA_?$AAo?$AAp?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAP?$AAx?$AAS?$AAo?$AAc?$AAk?$AAe?$AAt?$AA_?$AAI?$AAO?$AA_?$AAA?$AAC?$AAC?$AAE?$AAP?$AAT?$AA?5?$AA?$HM@ DB 's'
	DB	00H, '-', 00H, '>', 00H, 'i', 00H, 'o', 00H, '_', 00H, 'o', 00H
	DB	'p', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'P', 00H, 'x'
	DB	00H, 'S', 00H, 'o', 00H, 'c', 00H, 'k', 00H, 'e', 00H, 't', 00H
	DB	'_', 00H, 'I', 00H, 'O', 00H, '_', 00H, 'A', 00H, 'C', 00H, 'C'
	DB	00H, 'E', 00H, 'P', 00H, 'T', 00H, ' ', 00H, '|', 00H, '|', 00H
	DB	' ', 00H, 's', 00H, '-', 00H, '>', 00H, 'i', 00H, 'o', 00H, '_'
	DB	00H, 'o', 00H, 'p', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H
	DB	'P', 00H, 'x', 00H, 'S', 00H, 'o', 00H, 'c', 00H, 'k', 00H, 'e'
	DB	00H, 't', 00H, '_', 00H, 'I', 00H, 'O', 00H, '_', 00H, 'C', 00H
	DB	'O', 00H, 'N', 00H, 'N', 00H, 'E', 00H, 'C', 00H, 'T', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0DN@CMLMIFME@failed?5to?5extract?5sendable?5objec@
CONST	SEGMENT
??_C@_0DN@CMLMIFME@failed?5to?5extract?5sendable?5objec@ DB 'failed to ex'
	DB	'tract sendable object from initial_bytes_to_send', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BE@IDILNNED@?$AA?$CB?$AAs?$AAn?$AAa?$AAp?$AAs?$AAh?$AAo?$AAt?$AA?$AA@
CONST	SEGMENT
??_C@_1BE@IDILNNED@?$AA?$CB?$AAs?$AAn?$AAa?$AAp?$AAs?$AAh?$AAo?$AAt?$AA?$AA@ DB '!'
	DB	00H, 's', 00H, 'n', 00H, 'a', 00H, 'p', 00H, 's', 00H, 'h', 00H
	DB	'o', 00H, 't', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1HA@EJOBDFPA@?$AA?$CB?$AA?$CI?$AAP?$AAx?$AA_?$AAS?$AAO?$AAC?$AAK?$AAF?$AAL?$AAA?$AAG?$AAS?$AA?$CI?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?5?$AAP?$AAx?$AA_?$AAS?$AAO?$AAC?$AAK?$AAF?$AAL?$AAA?$AAG?$AAS@
CONST	SEGMENT
??_C@_1HA@EJOBDFPA@?$AA?$CB?$AA?$CI?$AAP?$AAx?$AA_?$AAS?$AAO?$AAC?$AAK?$AAF?$AAL?$AAA?$AAG?$AAS?$AA?$CI?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?5?$AAP?$AAx?$AA_?$AAS?$AAO?$AAC?$AAK?$AAF?$AAL?$AAA?$AAG?$AAS@ DB '!'
	DB	00H, '(', 00H, 'P', 00H, 'x', 00H, '_', 00H, 'S', 00H, 'O', 00H
	DB	'C', 00H, 'K', 00H, 'F', 00H, 'L', 00H, 'A', 00H, 'G', 00H, 'S'
	DB	00H, '(', 00H, 's', 00H, ')', 00H, ' ', 00H, '&', 00H, ' ', 00H
	DB	'P', 00H, 'x', 00H, '_', 00H, 'S', 00H, 'O', 00H, 'C', 00H, 'K'
	DB	00H, 'F', 00H, 'L', 00H, 'A', 00H, 'G', 00H, 'S', 00H, '_', 00H
	DB	'S', 00H, 'E', 00H, 'N', 00H, 'D', 00H, 'I', 00H, 'N', 00H, 'G'
	DB	00H, '_', 00H, 'I', 00H, 'N', 00H, 'I', 00H, 'T', 00H, 'I', 00H
	DB	'A', 00H, 'L', 00H, '_', 00H, 'B', 00H, 'Y', 00H, 'T', 00H, 'E'
	DB	00H, 'S', 00H, ')', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1DI@LBHEJGP@?$AAP?$AAx?$AAS?$AAo?$AAc?$AAk?$AAe?$AAt?$AA_?$AAI?$AAS?$AA_?$AAS?$AAE?$AAR?$AAV?$AAE?$AAR?$AAC?$AAL?$AAI?$AAE?$AAN?$AAT?$AA?$CI?$AAs?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DI@LBHEJGP@?$AAP?$AAx?$AAS?$AAo?$AAc?$AAk?$AAe?$AAt?$AA_?$AAI?$AAS?$AA_?$AAS?$AAE?$AAR?$AAV?$AAE?$AAR?$AAC?$AAL?$AAI?$AAE?$AAN?$AAT?$AA?$CI?$AAs?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'x', 00H, 'S', 00H, 'o', 00H, 'c', 00H, 'k', 00H, 'e', 00H
	DB	't', 00H, '_', 00H, 'I', 00H, 'S', 00H, '_', 00H, 'S', 00H, 'E'
	DB	00H, 'R', 00H, 'V', 00H, 'E', 00H, 'R', 00H, 'C', 00H, 'L', 00H
	DB	'I', 00H, 'E', 00H, 'N', 00H, 'T', 00H, '(', 00H, 's', 00H, ')'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1DO@GEPCPGHM@?$AA0?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA?$CC?$AAx?$AAx?$AAx?$AA?5?$AAt?$AAo?$AAd?$AAo?$AA?3?$AA?5?$AAs?$AAe?$AAn?$AAd?$AA_?$AAs?$AAh?$AAu?$AAt?$AAd?$AAo?$AAw?$AAn?$AA?$CC?$AA?$AA@
CONST	SEGMENT
??_C@_1DO@GEPCPGHM@?$AA0?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA?$CC?$AAx?$AAx?$AAx?$AA?5?$AAt?$AAo?$AAd?$AAo?$AA?3?$AA?5?$AAs?$AAe?$AAn?$AAd?$AA_?$AAs?$AAh?$AAu?$AAt?$AAd?$AAo?$AAw?$AAn?$AA?$CC?$AA?$AA@ DB '0'
	DB	00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '"', 00H, 'x', 00H
	DB	'x', 00H, 'x', 00H, ' ', 00H, 't', 00H, 'o', 00H, 'd', 00H, 'o'
	DB	00H, ':', 00H, ' ', 00H, 's', 00H, 'e', 00H, 'n', 00H, 'd', 00H
	DB	'_', 00H, 's', 00H, 'h', 00H, 'u', 00H, 't', 00H, 'd', 00H, 'o'
	DB	00H, 'w', 00H, 'n', 00H, '"', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@DKBKNOFI@xxx?5todo?3?5send_shutdown?$AA@
CONST	SEGMENT
??_C@_0BI@DKBKNOFI@xxx?5todo?3?5send_shutdown?$AA@ DB 'xxx todo: send_shu'
	DB	'tdown', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@NEGKDJJD@shutdown?$CISD_SEND?$CJ?$AA@
CONST	SEGMENT
??_C@_0BC@NEGKDJJD@shutdown?$CISD_SEND?$CJ?$AA@ DB 'shutdown(SD_SEND)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DO@GGGCLLLD@?$AA0?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA?$CC?$AAx?$AAx?$AAx?$AA?5?$AAt?$AAo?$AAd?$AAo?$AA?3?$AA?5?$AAr?$AAe?$AAc?$AAv?$AA_?$AAs?$AAh?$AAu?$AAt?$AAd?$AAo?$AAw?$AAn?$AA?$CC?$AA?$AA@
CONST	SEGMENT
??_C@_1DO@GGGCLLLD@?$AA0?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA?$CC?$AAx?$AAx?$AAx?$AA?5?$AAt?$AAo?$AAd?$AAo?$AA?3?$AA?5?$AAr?$AAe?$AAc?$AAv?$AA_?$AAs?$AAh?$AAu?$AAt?$AAd?$AAo?$AAw?$AAn?$AA?$CC?$AA?$AA@ DB '0'
	DB	00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '"', 00H, 'x', 00H
	DB	'x', 00H, 'x', 00H, ' ', 00H, 't', 00H, 'o', 00H, 'd', 00H, 'o'
	DB	00H, ':', 00H, ' ', 00H, 'r', 00H, 'e', 00H, 'c', 00H, 'v', 00H
	DB	'_', 00H, 's', 00H, 'h', 00H, 'u', 00H, 't', 00H, 'd', 00H, 'o'
	DB	00H, 'w', 00H, 'n', 00H, '"', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@MPCAEDMK@xxx?5todo?3?5recv_shutdown?$AA@
CONST	SEGMENT
??_C@_0BI@MPCAEDMK@xxx?5todo?3?5recv_shutdown?$AA@ DB 'xxx todo: recv_shu'
	DB	'tdown', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@KEAFFCFE@shutdown?$CISD_RECEIVE?$CJ?$AA@
CONST	SEGMENT
??_C@_0BF@KEAFFCFE@shutdown?$CISD_RECEIVE?$CJ?$AA@ DB 'shutdown(SD_RECEIV'
	DB	'E)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BI@KAKHJKLI@?$AAs?$AA?9?$AA?$DO?$AAp?$AAr?$AAo?$AAt?$AAo?$AAc?$AAo?$AAl?$AA?$AA@
CONST	SEGMENT
??_C@_1BI@KAKHJKLI@?$AAs?$AA?9?$AA?$DO?$AAp?$AAr?$AAo?$AAt?$AAo?$AAc?$AAo?$AAl?$AA?$AA@ DB 's'
	DB	00H, '-', 00H, '>', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 't', 00H
	DB	'o', 00H, 'c', 00H, 'o', 00H, 'l', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PxSocket_IOLoop
_TEXT	SEGMENT
w$ = 64
wsa_error$ = 72
next_opcode$ = 76
h$ = 80
args$ = 88
recv_nbytes$ = 96
n$ = 100
i$ = 104
old_wsabuf$ = 112
is_sbuf$ = 120
snapshot$ = 128
rbuf_size$ = 136
recv_avail$ = 140
sbuf$ = 144
recv_flags$ = 152
rbuf$ = 160
buf$ = 168
bytes$ = 176
nbytes$ = 184
syscall$ = 192
tf$ = 200
ol$ = 208
err$ = 216
c$ = 224
result$ = 232
callback$ = 240
t$ = 248
fd$ = 256
func$ = 264
len$130397 = 272
cb$130473 = 280
cb$130521 = 288
msg$130578 = 296
msg$130586 = 304
error$130610 = 312
success$130609 = 316
last_error$130615 = 320
cb$130697 = 328
n$130738 = 336
tp$130740 = 344
o$130739 = 352
cb$130807 = 360
n$130831 = 368
tp$130833 = 376
o$130832 = 384
tv133 = 392
tv144 = 396
tv1539 = 400
s$ = 432
PxSocket_IOLoop PROC					; COMDAT

; 5873 : {

$LN346:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 81 ec a8 01
	00 00		 sub	 rsp, 424		; 000001a8H

; 5874 :     PyObject *func, *args, *result;
; 5875 :     PyBytesObject *bytes;
; 5876 :     int next_opcode = 0;

  0000c	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR next_opcode$[rsp], 0

; 5877 :     char *syscall;
; 5878 :     TLS *t = &tls;

  00014	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:tls
  00019	8b c0		 mov	 eax, eax
  0001b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00021	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0002a	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0002e	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR t$[rsp], rax

; 5879 :     Context *c = ctx;

  00036	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:ctx
  0003b	8b c0		 mov	 eax, eax
  0003d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00043	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0004c	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  00050	48 8b 04 08	 mov	 rax, QWORD PTR [rax+rcx]
  00054	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR c$[rsp], rax

; 5880 :     char *callback;
; 5881 :     char *buf = NULL;

  0005c	48 c7 84 24 a8
	00 00 00 00 00
	00 00		 mov	 QWORD PTR buf$[rsp], 0

; 5882 :     DWORD err, wsa_error, nbytes;
; 5883 :     SOCKET fd;
; 5884 :     HANDLE h;
; 5885 :     WSABUF *w = NULL, *old_wsabuf = NULL;

  00068	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR w$[rsp], 0
  00071	48 c7 44 24 70
	00 00 00 00	 mov	 QWORD PTR old_wsabuf$[rsp], 0

; 5886 :     SBUF *sbuf = NULL;

  0007a	48 c7 84 24 90
	00 00 00 00 00
	00 00		 mov	 QWORD PTR sbuf$[rsp], 0

; 5887 :     RBUF *rbuf = NULL;

  00086	48 c7 84 24 a0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR rbuf$[rsp], 0

; 5888 :     ULONG recv_avail = 0;

  00092	c7 84 24 8c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR recv_avail$[rsp], 0

; 5889 :     ULONG rbuf_size = 0;

  0009d	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR rbuf_size$[rsp], 0

; 5890 :     DWORD recv_flags = 0;

  000a8	c7 84 24 98 00
	00 00 00 00 00
	00		 mov	 DWORD PTR recv_flags$[rsp], 0

; 5891 :     DWORD recv_nbytes = 0;

  000b3	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR recv_nbytes$[rsp], 0

; 5892 :     OVERLAPPED *ol = NULL;

  000bb	48 c7 84 24 d0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR ol$[rsp], 0

; 5893 :     Heap *snapshot = NULL;

  000c7	48 c7 84 24 80
	00 00 00 00 00
	00 00		 mov	 QWORD PTR snapshot$[rsp], 0

; 5894 :     int i, n, is_sbuf = 0;

  000d3	c7 44 24 78 00
	00 00 00	 mov	 DWORD PTR is_sbuf$[rsp], 0

; 5895 :     TRANSMIT_FILE_BUFFERS *tf = NULL;

  000db	48 c7 84 24 c8
	00 00 00 00 00
	00 00		 mov	 QWORD PTR tf$[rsp], 0

; 5896 : 
; 5897 :     fd = s->sock_fd;

  000e7	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  000ef	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000f3	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR fd$[rsp], rax

; 5898 : 
; 5899 :     assert(s->ctx == c);

  000fb	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00103	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  0010b	48 39 88 00 02
	00 00		 cmp	 QWORD PTR [rax+512], rcx
  00112	74 1c		 je	 SHORT $LN239@PxSocket_I
  00114	41 b8 0b 17 00
	00		 mov	 r8d, 5899		; 0000170bH
  0011a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00121	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BI@FADBJKJH@?$AAs?$AA?9?$AA?$DO?$AAc?$AAt?$AAx?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAc?$AA?$AA@
  00128	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0012e	33 c0		 xor	 eax, eax
$LN239@PxSocket_I:

; 5900 :     assert(c->io_obj == (PyObject *)s);

  00130	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  00138	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  00140	48 39 88 a8 32
	00 00		 cmp	 QWORD PTR [rax+12968], rcx
  00147	74 1c		 je	 SHORT $LN240@PxSocket_I
  00149	41 b8 0c 17 00
	00		 mov	 r8d, 5900		; 0000170cH
  0014f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00156	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DG@FIOFPEII@?$AAc?$AA?9?$AA?$DO?$AAi?$AAo?$AA_?$AAo?$AAb?$AAj?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA?$CI?$AAP?$AAy?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?5?$AA?$CK?$AA?$CJ?$AAs?$AA?$AA@
  0015d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00163	33 c0		 xor	 eax, eax
$LN240@PxSocket_I:

; 5901 : 
; 5902 :     PxSocket_UpdateConnectTime(s);

  00165	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  0016d	e8 00 00 00 00	 call	 PxSocket_UpdateConnectTime

; 5903 : 
; 5904 :     InterlockedIncrement(&_PxSocket_ActiveIOLoops);

  00172	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PxSocket_ActiveIOLoops
  00179	f0 ff 00	 lock inc DWORD PTR [rax]

; 5905 : 
; 5906 :     s->last_thread_id = s->this_thread_id;

  0017c	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00184	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  0018c	8b 89 0c 02 00
	00		 mov	 ecx, DWORD PTR [rcx+524]
  00192	89 88 08 02 00
	00		 mov	 DWORD PTR [rax+520], ecx

; 5907 :     s->this_thread_id = _Py_get_current_thread_id();

  00198	65 8b 04 25 48
	00 00 00	 mov	 eax, DWORD PTR gs:72
  001a0	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  001a8	89 81 0c 02 00
	00		 mov	 DWORD PTR [rcx+524], eax

; 5908 :     s->ioloops++;

  001ae	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  001b6	8b 80 10 02 00
	00		 mov	 eax, DWORD PTR [rax+528]
  001bc	ff c0		 inc	 eax
  001be	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  001c6	89 81 10 02 00
	00		 mov	 DWORD PTR [rcx+528], eax

; 5909 : 
; 5910 :     switch (s->io_op) {

  001cc	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  001d4	8b 80 50 03 00
	00		 mov	 eax, DWORD PTR [rax+848]
  001da	89 84 24 88 01
	00 00		 mov	 DWORD PTR tv133[rsp], eax
  001e1	83 bc 24 88 01
	00 00 00	 cmp	 DWORD PTR tv133[rsp], 0
  001e9	7e 3e		 jle	 SHORT $LN230@PxSocket_I
  001eb	83 bc 24 88 01
	00 00 02	 cmp	 DWORD PTR tv133[rsp], 2
  001f3	7e 20		 jle	 SHORT $LN234@PxSocket_I
  001f5	83 bc 24 88 01
	00 00 04	 cmp	 DWORD PTR tv133[rsp], 4
  001fd	74 25		 je	 SHORT $LN231@PxSocket_I
  001ff	83 bc 24 88 01
	00 00 08	 cmp	 DWORD PTR tv133[rsp], 8
  00207	74 11		 je	 SHORT $LN233@PxSocket_I
  00209	83 bc 24 88 01
	00 00 40	 cmp	 DWORD PTR tv133[rsp], 64 ; 00000040H
  00211	74 0c		 je	 SHORT $LN232@PxSocket_I
  00213	eb 14		 jmp	 SHORT $LN230@PxSocket_I
$LN234@PxSocket_I:

; 5911 :         case PxSocket_IO_ACCEPT:
; 5912 :         case PxSocket_IO_CONNECT:
; 5913 :             goto start;

  00215	e9 a3 00 00 00	 jmp	 $start$130321
$LN233@PxSocket_I:

; 5914 : 
; 5915 :         case PxSocket_IO_SEND:
; 5916 :             goto overlapped_send_callback;

  0021a	e9 83 0f 00 00	 jmp	 $overlapped_send_callback$130323
$LN232@PxSocket_I:

; 5917 : 
; 5918 :         case PxSocket_IO_SENDFILE:
; 5919 :             goto overlapped_sendfile_callback;

  0021f	e9 18 2a 00 00	 jmp	 $overlapped_sendfile_callback$130325
$LN231@PxSocket_I:

; 5920 : 
; 5921 :         case PxSocket_IO_RECV:
; 5922 :             goto overlapped_recv_callback;

  00224	e9 70 1f 00 00	 jmp	 $overlapped_recv_callback$130327
$LN230@PxSocket_I:

; 5923 : 
; 5924 :         default:
; 5925 :             assert(0);

  00229	33 c0		 xor	 eax, eax
  0022b	85 c0		 test	 eax, eax
  0022d	75 1c		 jne	 SHORT $LN241@PxSocket_I
  0022f	41 b8 25 17 00
	00		 mov	 r8d, 5925		; 00001725H
  00235	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0023c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_13COJANIEC@?$AA0?$AA?$AA@
  00243	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00249	33 c0		 xor	 eax, eax
$LN241@PxSocket_I:

; 5926 : 
; 5927 :     }
; 5928 :     goto start;

  0024b	eb 70		 jmp	 SHORT $start$130321
$dispatch$130330:

; 5929 : 
; 5930 : dispatch:
; 5931 :     switch (next_opcode) {

  0024d	8b 44 24 4c	 mov	 eax, DWORD PTR next_opcode$[rsp]
  00251	89 84 24 8c 01
	00 00		 mov	 DWORD PTR tv144[rsp], eax
  00258	8b 84 24 8c 01
	00 00		 mov	 eax, DWORD PTR tv144[rsp]
  0025f	83 e8 02	 sub	 eax, 2
  00262	89 84 24 8c 01
	00 00		 mov	 DWORD PTR tv144[rsp], eax
  00269	83 bc 24 8c 01
	00 00 0b	 cmp	 DWORD PTR tv144[rsp], 11
  00271	77 4a		 ja	 SHORT $LN217@PxSocket_I
  00273	48 63 84 24 8c
	01 00 00	 movsxd	 rax, DWORD PTR tv144[rsp]
  0027b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  00282	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN345@PxSocket_I[rcx+rax*4]
  00289	48 03 c1	 add	 rax, rcx
  0028c	ff e0		 jmp	 rax
$LN227@PxSocket_I:

; 5932 :         TARGET(maybe_shutdown_send_or_recv);

  0028e	eb 5b		 jmp	 SHORT $maybe_shutdown_send_or_recv$130336
$LN226@PxSocket_I:

; 5933 :         TARGET(handle_error);

  00290	e9 2b 2e 00 00	 jmp	 $handle_error$130338
$LN225@PxSocket_I:

; 5934 :         TARGET(connection_made_callback);

  00295	e9 99 32 00 00	 jmp	 $connection_made_callback$130340
$LN224@PxSocket_I:

; 5935 :         TARGET(data_received_callback);

  0029a	e9 94 32 00 00	 jmp	 $data_received_callback$130342
$LN223@PxSocket_I:

; 5936 :         TARGET(send_complete_callback);

  0029f	e9 8f 32 00 00	 jmp	 $send_complete_callback$130344
$LN222@PxSocket_I:

; 5937 :         TARGET(overlapped_recv_callback);

  002a4	e9 f0 1e 00 00	 jmp	 $overlapped_recv_callback$130327
$LN221@PxSocket_I:

; 5938 :         TARGET(post_callback_that_supports_sending_retval);

  002a9	e9 85 32 00 00	 jmp	 $post_callback_that_supports_sending_retval$130347
$LN220@PxSocket_I:

; 5939 :         TARGET(post_callback_that_does_not_support_sending_retval);

  002ae	e9 80 32 00 00	 jmp	 $post_callback_that_does_not_support_sending_retval$130349
$LN219@PxSocket_I:

; 5940 :         TARGET(close_);

  002b3	e9 1e 15 00 00	 jmp	 $close_$130351
$LN218@PxSocket_I:

; 5941 :         TARGET(try_send);

  002b8	e9 76 32 00 00	 jmp	 $try_send$130353
$LN217@PxSocket_I:
$start$130321:

; 5942 : 
; 5943 :         default:
; 5944 :             break;
; 5945 :     }
; 5946 : 
; 5947 : start:
; 5948 : 
; 5949 :     assert(s->protocol);

  002bd	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  002c5	48 83 b8 90 02
	00 00 00	 cmp	 QWORD PTR [rax+656], 0
  002cd	75 1c		 jne	 SHORT $LN242@PxSocket_I
  002cf	41 b8 3d 17 00
	00		 mov	 r8d, 5949		; 0000173dH
  002d5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  002dc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BI@KAKHJKLI@?$AAs?$AA?9?$AA?$DO?$AAp?$AAr?$AAo?$AAt?$AAo?$AAc?$AAo?$AAl?$AA?$AA@
  002e3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  002e9	33 c0		 xor	 eax, eax
$LN242@PxSocket_I:
$maybe_shutdown_send_or_recv$130336:

; 5950 : 
; 5951 : maybe_shutdown_send_or_recv:
; 5952 :     if (!PxSocket_CAN_RECV(s)) {

  002eb	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  002f3	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  002f9	25 00 00 01 00	 and	 eax, 65536		; 00010000H
  002fe	85 c0		 test	 eax, eax
  00300	0f 85 a5 00 00
	00		 jne	 $LN216@PxSocket_I

; 5953 :         if (shutdown(s->sock_fd, SD_RECEIVE) == SOCKET_ERROR)

  00306	33 d2		 xor	 edx, edx
  00308	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00310	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00314	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_shutdown
  0031a	83 f8 ff	 cmp	 eax, -1
  0031d	75 32		 jne	 SHORT $LN215@PxSocket_I
$LN214@PxSocket_I:

; 5954 :             PxSocket_WSAERROR("shutdown(SD_RECEIVE)");

  0031f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WSAGetLastError
  00325	8b c8		 mov	 ecx, eax
  00327	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
  0032c	41 b8 01 00 00
	00		 mov	 r8d, 1
  00332	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BF@KEAFFCFE@shutdown?$CISD_RECEIVE?$CJ?$AA@
  00339	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  00341	e8 00 00 00 00	 call	 PxSocket_HandleException
  00346	e9 e8 31 00 00	 jmp	 $end$130364
  0034b	33 c0		 xor	 eax, eax
  0034d	85 c0		 test	 eax, eax
  0034f	75 ce		 jne	 SHORT $LN214@PxSocket_I
$LN215@PxSocket_I:

; 5955 :         Px_SOCKFLAGS(s) |= Px_SOCKFLAGS_RECV_SHUTDOWN;

  00351	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00359	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  0035f	0f ba e8 12	 bts	 eax, 18
  00363	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  0036b	89 81 f4 01 00
	00		 mov	 DWORD PTR [rcx+500], eax

; 5956 :         if (s->recv_shutdown) {

  00371	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00379	48 83 b8 b8 02
	00 00 00	 cmp	 QWORD PTR [rax+696], 0
  00381	74 28		 je	 SHORT $LN211@PxSocket_I

; 5957 :             assert(0 == "xxx todo: recv_shutdown");

  00383	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BI@MPCAEDMK@xxx?5todo?3?5recv_shutdown?$AA@
  0038a	48 85 c0	 test	 rax, rax
  0038d	74 1c		 je	 SHORT $LN243@PxSocket_I
  0038f	41 b8 45 17 00
	00		 mov	 r8d, 5957		; 00001745H
  00395	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0039c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@GGGCLLLD@?$AA0?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA?$CC?$AAx?$AAx?$AAx?$AA?5?$AAt?$AAo?$AAd?$AAo?$AA?3?$AA?5?$AAr?$AAe?$AAc?$AAv?$AA_?$AAs?$AAh?$AAu?$AAt?$AAd?$AAo?$AAw?$AAn?$AA?$CC?$AA?$AA@
  003a3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  003a9	33 c0		 xor	 eax, eax
$LN243@PxSocket_I:
$LN211@PxSocket_I:
$LN216@PxSocket_I:

; 5958 :         }
; 5959 :     }
; 5960 : 
; 5961 :     if (PxSocket_SHUTDOWN_SEND(s)) {

  003ab	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  003b3	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  003b9	25 00 80 00 00	 and	 eax, 32768		; 00008000H
  003be	85 c0		 test	 eax, eax
  003c0	0f 84 a8 00 00
	00		 je	 $LN210@PxSocket_I

; 5962 :         if (shutdown(s->sock_fd, SD_SEND) == SOCKET_ERROR)

  003c6	ba 01 00 00 00	 mov	 edx, 1
  003cb	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  003d3	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  003d7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_shutdown
  003dd	83 f8 ff	 cmp	 eax, -1
  003e0	75 32		 jne	 SHORT $LN209@PxSocket_I
$LN208@PxSocket_I:

; 5963 :             PxSocket_WSAERROR("shutdown(SD_SEND)");

  003e2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WSAGetLastError
  003e8	8b c8		 mov	 ecx, eax
  003ea	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
  003ef	41 b8 01 00 00
	00		 mov	 r8d, 1
  003f5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@NEGKDJJD@shutdown?$CISD_SEND?$CJ?$AA@
  003fc	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  00404	e8 00 00 00 00	 call	 PxSocket_HandleException
  00409	e9 25 31 00 00	 jmp	 $end$130364
  0040e	33 c0		 xor	 eax, eax
  00410	85 c0		 test	 eax, eax
  00412	75 ce		 jne	 SHORT $LN208@PxSocket_I
$LN209@PxSocket_I:

; 5964 :         Px_SOCKFLAGS(s) |= Px_SOCKFLAGS_SEND_SHUTDOWN;

  00414	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  0041c	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  00422	0f ba e8 11	 bts	 eax, 17
  00426	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  0042e	89 81 f4 01 00
	00		 mov	 DWORD PTR [rcx+500], eax

; 5965 :         if (s->send_shutdown) {

  00434	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  0043c	48 83 b8 b0 02
	00 00 00	 cmp	 QWORD PTR [rax+688], 0
  00444	74 28		 je	 SHORT $LN205@PxSocket_I

; 5966 :             assert(0 == "xxx todo: send_shutdown");

  00446	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BI@DKBKNOFI@xxx?5todo?3?5send_shutdown?$AA@
  0044d	48 85 c0	 test	 rax, rax
  00450	74 1c		 je	 SHORT $LN244@PxSocket_I
  00452	41 b8 4e 17 00
	00		 mov	 r8d, 5966		; 0000174eH
  00458	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0045f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@GEPCPGHM@?$AA0?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA?$CC?$AAx?$AAx?$AAx?$AA?5?$AAt?$AAo?$AAd?$AAo?$AA?3?$AA?5?$AAs?$AAe?$AAn?$AAd?$AA_?$AAs?$AAh?$AAu?$AAt?$AAd?$AAo?$AAw?$AAn?$AA?$CC?$AA?$AA@
  00466	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0046c	33 c0		 xor	 eax, eax
$LN244@PxSocket_I:
$LN205@PxSocket_I:
$LN210@PxSocket_I:

; 5967 :         }
; 5968 :     }
; 5969 : 
; 5970 :     if ((Px_SOCKFLAGS(s) & Px_SOCKFLAGS_RECV_SHUTDOWN) &&
; 5971 :         (Px_SOCKFLAGS(s) & Px_SOCKFLAGS_SEND_SHUTDOWN))

  0046e	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00476	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  0047c	25 00 00 04 00	 and	 eax, 262144		; 00040000H
  00481	85 c0		 test	 eax, eax
  00483	74 1c		 je	 SHORT $LN204@PxSocket_I
  00485	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  0048d	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  00493	25 00 00 02 00	 and	 eax, 131072		; 00020000H
  00498	85 c0		 test	 eax, eax
  0049a	74 05		 je	 SHORT $LN204@PxSocket_I

; 5972 :         goto definitely_close;

  0049c	e9 ec 13 00 00	 jmp	 $definitely_close$130385
$LN204@PxSocket_I:

; 5973 : 
; 5974 :     if (next_opcode)

  004a1	83 7c 24 4c 00	 cmp	 DWORD PTR next_opcode$[rsp], 0
  004a6	74 05		 je	 SHORT $LN203@PxSocket_I

; 5975 :         goto dispatch;

  004a8	e9 a0 fd ff ff	 jmp	 $dispatch$130330
$LN203@PxSocket_I:

; 5976 : 
; 5977 :     /* client and server entry point */
; 5978 :     if (PxSocket_IS_CLIENT(s))

  004ad	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  004b5	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  004bb	83 e0 01	 and	 eax, 1
  004be	85 c0		 test	 eax, eax
  004c0	74 05		 je	 SHORT $LN202@PxSocket_I

; 5979 :         goto maybe_do_connection_made;

  004c2	e9 3c 02 00 00	 jmp	 $maybe_do_connection_made$130389
$LN202@PxSocket_I:

; 5980 : 
; 5981 :     /* server entry point */
; 5982 :     assert(PxSocket_IS_SERVERCLIENT(s));

  004c7	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  004cf	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  004d5	25 80 00 00 00	 and	 eax, 128		; 00000080H
  004da	85 c0		 test	 eax, eax
  004dc	75 1c		 jne	 SHORT $LN245@PxSocket_I
  004de	41 b8 5e 17 00
	00		 mov	 r8d, 5982		; 0000175eH
  004e4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  004eb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DI@LBHEJGP@?$AAP?$AAx?$AAS?$AAo?$AAc?$AAk?$AAe?$AAt?$AA_?$AAI?$AAS?$AA_?$AAS?$AAE?$AAR?$AAV?$AAE?$AAR?$AAC?$AAL?$AAI?$AAE?$AAN?$AAT?$AA?$CI?$AAs?$AA?$CJ?$AA?$AA@
  004f2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  004f8	33 c0		 xor	 eax, eax
$LN245@PxSocket_I:

; 5983 :     assert(!(Px_SOCKFLAGS(s) & Px_SOCKFLAGS_SENDING_INITIAL_BYTES));

  004fa	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00502	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  00508	25 00 20 00 00	 and	 eax, 8192		; 00002000H
  0050d	85 c0		 test	 eax, eax
  0050f	74 1c		 je	 SHORT $LN246@PxSocket_I
  00511	41 b8 5f 17 00
	00		 mov	 r8d, 5983		; 0000175fH
  00517	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0051e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1HA@EJOBDFPA@?$AA?$CB?$AA?$CI?$AAP?$AAx?$AA_?$AAS?$AAO?$AAC?$AAK?$AAF?$AAL?$AAA?$AAG?$AAS?$AA?$CI?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?5?$AAP?$AAx?$AA_?$AAS?$AAO?$AAC?$AAK?$AAF?$AAL?$AAA?$AAG?$AAS@
  00525	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0052b	33 c0		 xor	 eax, eax
$LN246@PxSocket_I:

; 5984 : 
; 5985 :     if (s->initial_bytes_to_send) {

  0052d	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00535	48 83 b8 f0 02
	00 00 00	 cmp	 QWORD PTR [rax+752], 0
  0053d	0f 84 c0 01 00
	00		 je	 $LN201@PxSocket_I

; 5986 :         DWORD *len;
; 5987 : 
; 5988 :         assert(!snapshot);

  00543	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR snapshot$[rsp], 0
  0054c	74 1c		 je	 SHORT $LN247@PxSocket_I
  0054e	41 b8 64 17 00
	00		 mov	 r8d, 5988		; 00001764H
  00554	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0055b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BE@IDILNNED@?$AA?$CB?$AAs?$AAn?$AAa?$AAp?$AAs?$AAh?$AAo?$AAt?$AA?$AA@
  00562	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00568	33 c0		 xor	 eax, eax
$LN247@PxSocket_I:

; 5989 :         snapshot = PxContext_HeapSnapshot(c, NULL);

  0056a	33 d2		 xor	 edx, edx
  0056c	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  00574	e8 00 00 00 00	 call	 PxContext_HeapSnapshot
  00579	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR snapshot$[rsp], rax

; 5990 :         if (!PxSocket_LoadInitialBytes(s)) {

  00581	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  00589	e8 00 00 00 00	 call	 PxSocket_LoadInitialBytes
  0058e	85 c0		 test	 eax, eax
  00590	75 5d		 jne	 SHORT $LN200@PxSocket_I

; 5991 :             PxContext_RollbackHeap(c, &snapshot);

  00592	48 8d 94 24 80
	00 00 00	 lea	 rdx, QWORD PTR snapshot$[rsp]
  0059a	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  005a2	e8 00 00 00 00	 call	 PxContext_RollbackHeap
$LN199@PxSocket_I:

; 5992 :             PxSocket_EXCEPTION();

  005a7	e8 00 00 00 00	 call	 PyErr_Occurred
  005ac	48 85 c0	 test	 rax, rax
  005af	75 1c		 jne	 SHORT $LN248@PxSocket_I
  005b1	41 b8 68 17 00
	00		 mov	 r8d, 5992		; 00001768H
  005b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  005be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CC@DNBCFJEA@?$AAP?$AAy?$AAE?$AAr?$AAr?$AA_?$AAO?$AAc?$AAc?$AAu?$AAr?$AAr?$AAe?$AAd?$AA?$CI?$AA?$CJ?$AA?$AA@
  005c5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  005cb	33 c0		 xor	 eax, eax
$LN248@PxSocket_I:
  005cd	45 33 c0	 xor	 r8d, r8d
  005d0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  005d7	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  005df	e8 00 00 00 00	 call	 PxSocket_HandleException
  005e4	e9 4a 2f 00 00	 jmp	 $end$130364
  005e9	33 c0		 xor	 eax, eax
  005eb	85 c0		 test	 eax, eax
  005ed	75 b8		 jne	 SHORT $LN199@PxSocket_I
$LN200@PxSocket_I:

; 5993 :         }
; 5994 : 
; 5995 :         Px_SOCKFLAGS(s) |= Px_SOCKFLAGS_SENDING_INITIAL_BYTES;

  005ef	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  005f7	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  005fd	0f ba e8 0d	 bts	 eax, 13
  00601	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  00609	89 81 f4 01 00
	00		 mov	 DWORD PTR [rcx+500], eax

; 5996 : 
; 5997 :         w = &s->initial_bytes;

  0060f	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00617	48 05 00 03 00
	00		 add	 rax, 768		; 00000300H
  0061d	48 89 44 24 40	 mov	 QWORD PTR w$[rsp], rax

; 5998 :         len = &w->len;

  00622	48 8b 44 24 40	 mov	 rax, QWORD PTR w$[rsp]
  00627	48 89 84 24 10
	01 00 00	 mov	 QWORD PTR len$130397[rsp], rax

; 5999 : 
; 6000 :         if (!PxSocket_NEW_SBUF(c, s, snapshot, len, w->buf, 0, &sbuf, 0)) {

  0062f	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR [rsp+56], 0
  00637	48 8d 84 24 90
	00 00 00	 lea	 rax, QWORD PTR sbuf$[rsp]
  0063f	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00644	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR [rsp+40], 0
  0064d	48 8b 44 24 40	 mov	 rax, QWORD PTR w$[rsp]
  00652	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00656	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0065b	4c 8b 8c 24 10
	01 00 00	 mov	 r9, QWORD PTR len$130397[rsp]
  00663	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR snapshot$[rsp]
  0066b	48 8b 94 24 b0
	01 00 00	 mov	 rdx, QWORD PTR s$[rsp]
  00673	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  0067b	e8 00 00 00 00	 call	 PxSocket_NEW_SBUF
  00680	85 c0		 test	 eax, eax
  00682	75 7a		 jne	 SHORT $LN196@PxSocket_I

; 6001 :             PxContext_RollbackHeap(c, &snapshot);

  00684	48 8d 94 24 80
	00 00 00	 lea	 rdx, QWORD PTR snapshot$[rsp]
  0068c	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  00694	e8 00 00 00 00	 call	 PxContext_RollbackHeap

; 6002 :             if (!PyErr_Occurred())

  00699	e8 00 00 00 00	 call	 PyErr_Occurred
  0069e	48 85 c0	 test	 rax, rax
  006a1	75 13		 jne	 SHORT $LN195@PxSocket_I

; 6003 :                 PyErr_SetString(PyExc_ValueError,
; 6004 :                                 "failed to extract sendable object from "
; 6005 :                                 "initial_bytes_to_send");

  006a3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DN@CMLMIFME@failed?5to?5extract?5sendable?5objec@
  006aa	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  006b1	e8 00 00 00 00	 call	 PyErr_SetString
$LN195@PxSocket_I:
$LN194@PxSocket_I:

; 6006 :             PxSocket_EXCEPTION();

  006b6	e8 00 00 00 00	 call	 PyErr_Occurred
  006bb	48 85 c0	 test	 rax, rax
  006be	75 1c		 jne	 SHORT $LN249@PxSocket_I
  006c0	41 b8 76 17 00
	00		 mov	 r8d, 6006		; 00001776H
  006c6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  006cd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CC@DNBCFJEA@?$AAP?$AAy?$AAE?$AAr?$AAr?$AA_?$AAO?$AAc?$AAc?$AAu?$AAr?$AAr?$AAe?$AAd?$AA?$CI?$AA?$CJ?$AA?$AA@
  006d4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  006da	33 c0		 xor	 eax, eax
$LN249@PxSocket_I:
  006dc	45 33 c0	 xor	 r8d, r8d
  006df	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  006e6	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  006ee	e8 00 00 00 00	 call	 PxSocket_HandleException
  006f3	e9 3b 2e 00 00	 jmp	 $end$130364
  006f8	33 c0		 xor	 eax, eax
  006fa	85 c0		 test	 eax, eax
  006fc	75 b8		 jne	 SHORT $LN194@PxSocket_I
$LN196@PxSocket_I:

; 6007 :         }
; 6008 : 
; 6009 :         goto do_send;

  006fe	e9 8f 04 00 00	 jmp	 $do_send$130414
$LN201@PxSocket_I:
$maybe_do_connection_made$130389:

; 6010 :     }
; 6011 : 
; 6012 :     /* Intentional follow-on to maybe_do_connection_made. */
; 6013 : maybe_do_connection_made:
; 6014 :     assert(
; 6015 :         s->io_op == PxSocket_IO_ACCEPT ||
; 6016 :         s->io_op == PxSocket_IO_CONNECT
; 6017 :     );

  00703	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  0070b	83 b8 50 03 00
	00 02		 cmp	 DWORD PTR [rax+848], 2
  00712	74 2d		 je	 SHORT $LN250@PxSocket_I
  00714	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  0071c	83 b8 50 03 00
	00 01		 cmp	 DWORD PTR [rax+848], 1
  00723	74 1c		 je	 SHORT $LN250@PxSocket_I
  00725	41 b8 81 17 00
	00		 mov	 r8d, 6017		; 00001781H
  0072b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00732	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1IE@LDAJBBHP@?$AAs?$AA?9?$AA?$DO?$AAi?$AAo?$AA_?$AAo?$AAp?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAP?$AAx?$AAS?$AAo?$AAc?$AAk?$AAe?$AAt?$AA_?$AAI?$AAO?$AA_?$AAA?$AAC?$AAC?$AAE?$AAP?$AAT?$AA?5?$AA?$HM@
  00739	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0073f	33 c0		 xor	 eax, eax
$LN250@PxSocket_I:

; 6018 : 
; 6019 :     if (s->connection_made &&
; 6020 :        !(Px_SOCKFLAGS(s) & Px_SOCKFLAGS_CALLED_CONNECTION_MADE))

  00741	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00749	48 83 b8 d8 02
	00 00 00	 cmp	 QWORD PTR [rax+728], 0
  00751	74 19		 je	 SHORT $LN191@PxSocket_I
  00753	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  0075b	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  00761	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  00766	85 c0		 test	 eax, eax
  00768	75 02		 jne	 SHORT $LN191@PxSocket_I

; 6021 :         goto definitely_do_connection_made;

  0076a	eb 05		 jmp	 SHORT $definitely_do_connection_made$130419
$LN191@PxSocket_I:

; 6022 : 
; 6023 :     goto try_recv;

  0076c	e9 0c 13 00 00	 jmp	 $try_recv$130420
$definitely_do_connection_made$130419:

; 6024 : 
; 6025 : definitely_do_connection_made:
; 6026 :     assert(!(Px_SOCKFLAGS(s) & Px_SOCKFLAGS_CALLED_CONNECTION_MADE));

  00771	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00779	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  0077f	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  00784	85 c0		 test	 eax, eax
  00786	74 1c		 je	 SHORT $LN251@PxSocket_I
  00788	41 b8 8a 17 00
	00		 mov	 r8d, 6026		; 0000178aH
  0078e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00795	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1HC@KNABGFPC@?$AA?$CB?$AA?$CI?$AAP?$AAx?$AA_?$AAS?$AAO?$AAC?$AAK?$AAF?$AAL?$AAA?$AAG?$AAS?$AA?$CI?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?5?$AAP?$AAx?$AA_?$AAS?$AAO?$AAC?$AAK?$AAF?$AAL?$AAA?$AAG?$AAS@
  0079c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  007a2	33 c0		 xor	 eax, eax
$LN251@PxSocket_I:

; 6027 :     func = s->connection_made;

  007a4	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  007ac	48 8b 80 d8 02
	00 00		 mov	 rax, QWORD PTR [rax+728]
  007b3	48 89 84 24 08
	01 00 00	 mov	 QWORD PTR func$[rsp], rax

; 6028 :     assert(func);

  007bb	48 83 bc 24 08
	01 00 00 00	 cmp	 QWORD PTR func$[rsp], 0
  007c4	75 1c		 jne	 SHORT $LN252@PxSocket_I
  007c6	41 b8 8c 17 00
	00		 mov	 r8d, 6028		; 0000178cH
  007cc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  007d3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_19DPFBEKIN@?$AAf?$AAu?$AAn?$AAc?$AA?$AA@
  007da	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  007e0	33 c0		 xor	 eax, eax
$LN252@PxSocket_I:

; 6029 : 
; 6030 :     snapshot = PxContext_HeapSnapshot(c, NULL);

  007e2	33 d2		 xor	 edx, edx
  007e4	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  007ec	e8 00 00 00 00	 call	 PxContext_HeapSnapshot
  007f1	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR snapshot$[rsp], rax

; 6031 : 
; 6032 :     /* xxx todo: add peer argument */
; 6033 :     args = PyTuple_Pack(1, s);

  007f9	48 8b 94 24 b0
	01 00 00	 mov	 rdx, QWORD PTR s$[rsp]
  00801	b9 01 00 00 00	 mov	 ecx, 1
  00806	e8 00 00 00 00	 call	 PyTuple_Pack
  0080b	48 89 44 24 58	 mov	 QWORD PTR args$[rsp], rax

; 6034 :     if (!args) {

  00810	48 83 7c 24 58
	00		 cmp	 QWORD PTR args$[rsp], 0
  00816	75 60		 jne	 SHORT $LN190@PxSocket_I

; 6035 :         PxContext_RollbackHeap(c, &snapshot);

  00818	48 8d 94 24 80
	00 00 00	 lea	 rdx, QWORD PTR snapshot$[rsp]
  00820	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  00828	e8 00 00 00 00	 call	 PxContext_RollbackHeap
$LN189@PxSocket_I:

; 6036 :         PxSocket_FATAL();

  0082d	e8 00 00 00 00	 call	 PyErr_Occurred
  00832	48 85 c0	 test	 rax, rax
  00835	75 1c		 jne	 SHORT $LN253@PxSocket_I
  00837	41 b8 94 17 00
	00		 mov	 r8d, 6036		; 00001794H
  0083d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00844	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CC@DNBCFJEA@?$AAP?$AAy?$AAE?$AAr?$AAr?$AA_?$AAO?$AAc?$AAc?$AAu?$AAr?$AAr?$AAe?$AAd?$AA?$CI?$AA?$CJ?$AA?$AA@
  0084b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00851	33 c0		 xor	 eax, eax
$LN253@PxSocket_I:
  00853	41 b8 01 00 00
	00		 mov	 r8d, 1
  00859	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  00860	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  00868	e8 00 00 00 00	 call	 PxSocket_HandleException
  0086d	e9 c1 2c 00 00	 jmp	 $end$130364
  00872	33 c0		 xor	 eax, eax
  00874	85 c0		 test	 eax, eax
  00876	75 b5		 jne	 SHORT $LN189@PxSocket_I
$LN190@PxSocket_I:

; 6037 :     }
; 6038 : 
; 6039 :     result = PyObject_CallObject(func, args);

  00878	48 8b 54 24 58	 mov	 rdx, QWORD PTR args$[rsp]
  0087d	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR func$[rsp]
  00885	e8 00 00 00 00	 call	 PyObject_CallObject
  0088a	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR result$[rsp], rax

; 6040 :     if (result)

  00892	48 83 bc 24 e8
	00 00 00 00	 cmp	 QWORD PTR result$[rsp], 0
  0089b	74 26		 je	 SHORT $LN186@PxSocket_I

; 6041 :         assert(!PyErr_Occurred());

  0089d	e8 00 00 00 00	 call	 PyErr_Occurred
  008a2	48 85 c0	 test	 rax, rax
  008a5	74 1c		 je	 SHORT $LN254@PxSocket_I
  008a7	41 b8 99 17 00
	00		 mov	 r8d, 6041		; 00001799H
  008ad	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  008b4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CE@JKFGJBND@?$AA?$CB?$AAP?$AAy?$AAE?$AAr?$AAr?$AA_?$AAO?$AAc?$AAc?$AAu?$AAr?$AAr?$AAe?$AAd?$AA?$CI?$AA?$CJ?$AA?$AA@
  008bb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  008c1	33 c0		 xor	 eax, eax
$LN254@PxSocket_I:
$LN186@PxSocket_I:

; 6042 :     if (PyErr_Occurred())

  008c3	e8 00 00 00 00	 call	 PyErr_Occurred
  008c8	48 85 c0	 test	 rax, rax
  008cb	74 27		 je	 SHORT $LN185@PxSocket_I

; 6043 :         assert(!result);

  008cd	48 83 bc 24 e8
	00 00 00 00	 cmp	 QWORD PTR result$[rsp], 0
  008d6	74 1c		 je	 SHORT $LN255@PxSocket_I
  008d8	41 b8 9b 17 00
	00		 mov	 r8d, 6043		; 0000179bH
  008de	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  008e5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BA@HDEGGLDD@?$AA?$CB?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?$AA@
  008ec	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  008f2	33 c0		 xor	 eax, eax
$LN255@PxSocket_I:
$LN185@PxSocket_I:

; 6044 :     if (!result) {

  008f4	48 83 bc 24 e8
	00 00 00 00	 cmp	 QWORD PTR result$[rsp], 0
  008fd	75 5d		 jne	 SHORT $LN184@PxSocket_I

; 6045 :         PxContext_RollbackHeap(c, &snapshot);

  008ff	48 8d 94 24 80
	00 00 00	 lea	 rdx, QWORD PTR snapshot$[rsp]
  00907	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  0090f	e8 00 00 00 00	 call	 PxContext_RollbackHeap
$LN183@PxSocket_I:

; 6046 :         PxSocket_EXCEPTION();

  00914	e8 00 00 00 00	 call	 PyErr_Occurred
  00919	48 85 c0	 test	 rax, rax
  0091c	75 1c		 jne	 SHORT $LN256@PxSocket_I
  0091e	41 b8 9e 17 00
	00		 mov	 r8d, 6046		; 0000179eH
  00924	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0092b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CC@DNBCFJEA@?$AAP?$AAy?$AAE?$AAr?$AAr?$AA_?$AAO?$AAc?$AAc?$AAu?$AAr?$AAr?$AAe?$AAd?$AA?$CI?$AA?$CJ?$AA?$AA@
  00932	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00938	33 c0		 xor	 eax, eax
$LN256@PxSocket_I:
  0093a	45 33 c0	 xor	 r8d, r8d
  0093d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  00944	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  0094c	e8 00 00 00 00	 call	 PxSocket_HandleException
  00951	e9 dd 2b 00 00	 jmp	 $end$130364
  00956	33 c0		 xor	 eax, eax
  00958	85 c0		 test	 eax, eax
  0095a	75 b8		 jne	 SHORT $LN183@PxSocket_I
$LN184@PxSocket_I:

; 6047 :     }
; 6048 : 
; 6049 :     Px_SOCKFLAGS(s) |= Px_SOCKFLAGS_CALLED_CONNECTION_MADE;

  0095c	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00964	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  0096a	0f ba e8 19	 bts	 eax, 25
  0096e	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  00976	89 81 f4 01 00
	00		 mov	 DWORD PTR [rcx+500], eax

; 6050 : 
; 6051 :     if (PxSocket_IS_SENDFILE_SCHEDULED(s)) {

  0097c	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00984	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  0098a	25 00 00 00 40	 and	 eax, 1073741824		; 40000000H
  0098f	85 c0		 test	 eax, eax
  00991	74 6c		 je	 SHORT $LN180@PxSocket_I

; 6052 :         if (result != Py_None) {

  00993	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0099a	48 39 84 24 e8
	00 00 00	 cmp	 QWORD PTR result$[rsp], rax
  009a2	74 5b		 je	 SHORT $LN179@PxSocket_I

; 6053 :             PyErr_SetString(PyExc_RuntimeError,
; 6054 :                             "data_received callback scheduled sendfile but "
; 6055 :                             "returned non-None data");

  009a4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0EF@NHKFODOC@data_received?5callback?5scheduled@
  009ab	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeError
  009b2	e8 00 00 00 00	 call	 PyErr_SetString
$LN178@PxSocket_I:

; 6056 :             PxSocket_EXCEPTION();

  009b7	e8 00 00 00 00	 call	 PyErr_Occurred
  009bc	48 85 c0	 test	 rax, rax
  009bf	75 1c		 jne	 SHORT $LN257@PxSocket_I
  009c1	41 b8 a8 17 00
	00		 mov	 r8d, 6056		; 000017a8H
  009c7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  009ce	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CC@DNBCFJEA@?$AAP?$AAy?$AAE?$AAr?$AAr?$AA_?$AAO?$AAc?$AAc?$AAu?$AAr?$AAr?$AAe?$AAd?$AA?$CI?$AA?$CJ?$AA?$AA@
  009d5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  009db	33 c0		 xor	 eax, eax
$LN257@PxSocket_I:
  009dd	45 33 c0	 xor	 r8d, r8d
  009e0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  009e7	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  009ef	e8 00 00 00 00	 call	 PxSocket_HandleException
  009f4	e9 3a 2b 00 00	 jmp	 $end$130364
  009f9	33 c0		 xor	 eax, eax
  009fb	85 c0		 test	 eax, eax
  009fd	75 b8		 jne	 SHORT $LN178@PxSocket_I
$LN179@PxSocket_I:
$LN180@PxSocket_I:

; 6057 :         }
; 6058 :     }
; 6059 : 
; 6060 :     if (result == Py_None) {

  009ff	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00a06	48 39 84 24 e8
	00 00 00	 cmp	 QWORD PTR result$[rsp], rax
  00a0e	75 67		 jne	 SHORT $LN175@PxSocket_I

; 6061 :         if (PxSocket_IS_SENDFILE_SCHEDULED(s)) {

  00a10	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00a18	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  00a1e	25 00 00 00 40	 and	 eax, 1073741824		; 40000000H
  00a23	85 c0		 test	 eax, eax
  00a25	74 28		 je	 SHORT $LN174@PxSocket_I

; 6062 :             s->sendfile_snapshot = snapshot;

  00a27	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00a2f	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR snapshot$[rsp]
  00a37	48 89 88 28 03
	00 00		 mov	 QWORD PTR [rax+808], rcx

; 6063 :             snapshot = NULL;

  00a3e	48 c7 84 24 80
	00 00 00 00 00
	00 00		 mov	 QWORD PTR snapshot$[rsp], 0

; 6064 :             goto do_sendfile;

  00a4a	e9 a9 1f 00 00	 jmp	 $do_sendfile$130455
$LN174@PxSocket_I:

; 6065 :         }
; 6066 :         PxContext_RollbackHeap(c, &snapshot);

  00a4f	48 8d 94 24 80
	00 00 00	 lea	 rdx, QWORD PTR snapshot$[rsp]
  00a57	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  00a5f	e8 00 00 00 00	 call	 PxContext_RollbackHeap

; 6067 :         if (next_opcode)

  00a64	83 7c 24 4c 00	 cmp	 DWORD PTR next_opcode$[rsp], 0
  00a69	74 07		 je	 SHORT $LN173@PxSocket_I

; 6068 :             goto dispatch;

  00a6b	e9 dd f7 ff ff	 jmp	 $dispatch$130330

; 6069 :         else

  00a70	eb 05		 jmp	 SHORT $LN172@PxSocket_I
$LN173@PxSocket_I:

; 6070 :             goto try_recv;

  00a72	e9 06 10 00 00	 jmp	 $try_recv$130420
$LN172@PxSocket_I:
$LN175@PxSocket_I:

; 6071 :     }
; 6072 : 
; 6073 :     sbuf = NULL;

  00a77	48 c7 84 24 90
	00 00 00 00 00
	00 00		 mov	 QWORD PTR sbuf$[rsp], 0

; 6074 :     if (!PxSocket_NEW_SBUF(c, s, snapshot, 0, 0, result, &sbuf, 0)) {

  00a83	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR [rsp+56], 0
  00a8b	48 8d 84 24 90
	00 00 00	 lea	 rax, QWORD PTR sbuf$[rsp]
  00a93	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00a98	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR result$[rsp]
  00aa0	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00aa5	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  00aae	45 33 c9	 xor	 r9d, r9d
  00ab1	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR snapshot$[rsp]
  00ab9	48 8b 94 24 b0
	01 00 00	 mov	 rdx, QWORD PTR s$[rsp]
  00ac1	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  00ac9	e8 00 00 00 00	 call	 PxSocket_NEW_SBUF
  00ace	85 c0		 test	 eax, eax
  00ad0	75 7a		 jne	 SHORT $LN171@PxSocket_I

; 6075 :         PxContext_RollbackHeap(c, &snapshot);

  00ad2	48 8d 94 24 80
	00 00 00	 lea	 rdx, QWORD PTR snapshot$[rsp]
  00ada	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  00ae2	e8 00 00 00 00	 call	 PxContext_RollbackHeap

; 6076 :         if (!PyErr_Occurred())

  00ae7	e8 00 00 00 00	 call	 PyErr_Occurred
  00aec	48 85 c0	 test	 rax, rax
  00aef	75 13		 jne	 SHORT $LN170@PxSocket_I

; 6077 :             PyErr_SetString(PyExc_ValueError,
; 6078 :                             "connection_made() did not return a sendable "
; 6079 :                             "object (bytes, bytearray or unicode)");

  00af1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0FB@KBEECAJI@connection_made?$CI?$CJ?5did?5not?5return@
  00af8	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00aff	e8 00 00 00 00	 call	 PyErr_SetString
$LN170@PxSocket_I:
$LN169@PxSocket_I:

; 6080 :         PxSocket_EXCEPTION();

  00b04	e8 00 00 00 00	 call	 PyErr_Occurred
  00b09	48 85 c0	 test	 rax, rax
  00b0c	75 1c		 jne	 SHORT $LN258@PxSocket_I
  00b0e	41 b8 c0 17 00
	00		 mov	 r8d, 6080		; 000017c0H
  00b14	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00b1b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CC@DNBCFJEA@?$AAP?$AAy?$AAE?$AAr?$AAr?$AA_?$AAO?$AAc?$AAc?$AAu?$AAr?$AAr?$AAe?$AAd?$AA?$CI?$AA?$CJ?$AA?$AA@
  00b22	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00b28	33 c0		 xor	 eax, eax
$LN258@PxSocket_I:
  00b2a	45 33 c0	 xor	 r8d, r8d
  00b2d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  00b34	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  00b3c	e8 00 00 00 00	 call	 PxSocket_HandleException
  00b41	e9 ed 29 00 00	 jmp	 $end$130364
  00b46	33 c0		 xor	 eax, eax
  00b48	85 c0		 test	 eax, eax
  00b4a	75 b8		 jne	 SHORT $LN169@PxSocket_I
$LN171@PxSocket_I:

; 6081 :     }
; 6082 : 
; 6083 :     if (PyErr_Occurred())

  00b4c	e8 00 00 00 00	 call	 PyErr_Occurred
  00b51	48 85 c0	 test	 rax, rax
  00b54	74 20		 je	 SHORT $LN166@PxSocket_I

; 6084 :         Px_SOCKFLAGS(s) |= Px_SOCKFLAGS_CLOSE_SCHEDULED;

  00b56	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00b5e	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  00b64	0f ba e8 16	 bts	 eax, 22
  00b68	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  00b70	89 81 f4 01 00
	00		 mov	 DWORD PTR [rcx+500], eax
$LN166@PxSocket_I:

; 6085 : 
; 6086 :     if (Px_SOCKFLAGS(s) & Px_SOCKFLAGS_CLOSE_SCHEDULED)

  00b76	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00b7e	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  00b84	25 00 00 40 00	 and	 eax, 4194304		; 00400000H
  00b89	85 c0		 test	 eax, eax
  00b8b	74 05		 je	 SHORT $LN165@PxSocket_I

; 6087 :         goto definitely_close;

  00b8d	e9 fb 0c 00 00	 jmp	 $definitely_close$130385
$LN165@PxSocket_I:
$do_send$130414:

; 6088 : 
; 6089 :     /* Intentional follow-on to do_send. */
; 6090 : 
; 6091 : do_send:
; 6092 :     assert(sbuf);

  00b92	48 83 bc 24 90
	00 00 00 00	 cmp	 QWORD PTR sbuf$[rsp], 0
  00b9b	75 1c		 jne	 SHORT $LN259@PxSocket_I
  00b9d	41 b8 cc 17 00
	00		 mov	 r8d, 6092		; 000017ccH
  00ba3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00baa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_19NGGHDKHJ@?$AAs?$AAb?$AAu?$AAf?$AA?$AA@
  00bb1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00bb7	33 c0		 xor	 eax, eax
$LN259@PxSocket_I:

; 6093 :     w = &sbuf->w;

  00bb9	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR sbuf$[rsp]
  00bc1	48 83 c0 40	 add	 rax, 64			; 00000040H
  00bc5	48 89 44 24 40	 mov	 QWORD PTR w$[rsp], rax

; 6094 : 
; 6095 :     if (!s->tp_io) {

  00bca	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00bd2	48 83 b8 58 03
	00 00 00	 cmp	 QWORD PTR [rax+856], 0
  00bda	0f 85 c5 00 00
	00		 jne	 $LN164@PxSocket_I

; 6096 :         PTP_WIN32_IO_CALLBACK cb = PxSocketClient_Callback;

  00be0	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PxSocketClient_Callback
  00be7	48 89 84 24 18
	01 00 00	 mov	 QWORD PTR cb$130473[rsp], rax

; 6097 :         if (s->io_op != PxSocket_IO_ACCEPT)

  00bef	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00bf7	83 b8 50 03 00
	00 02		 cmp	 DWORD PTR [rax+848], 2
  00bfe	74 33		 je	 SHORT $LN163@PxSocket_I

; 6098 :             assert(Px_SOCKFLAGS(s) & Px_SOCKFLAGS_SENDING_INITIAL_BYTES);

  00c00	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00c08	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  00c0e	25 00 20 00 00	 and	 eax, 8192		; 00002000H
  00c13	85 c0		 test	 eax, eax
  00c15	75 1c		 jne	 SHORT $LN260@PxSocket_I
  00c17	41 b8 d2 17 00
	00		 mov	 r8d, 6098		; 000017d2H
  00c1d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00c24	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1GK@PAGBDEEJ@?$AAP?$AAx?$AA_?$AAS?$AAO?$AAC?$AAK?$AAF?$AAL?$AAA?$AAG?$AAS?$AA?$CI?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?5?$AAP?$AAx?$AA_?$AAS?$AAO?$AAC?$AAK?$AAF?$AAL?$AAA?$AAG?$AAS?$AA_?$AAS@
  00c2b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00c31	33 c0		 xor	 eax, eax
$LN260@PxSocket_I:
$LN163@PxSocket_I:

; 6099 :         s->tp_io = CreateThreadpoolIo((HANDLE)s->sock_fd, cb, c, NULL);

  00c33	45 33 c9	 xor	 r9d, r9d
  00c36	4c 8b 84 24 e0
	00 00 00	 mov	 r8, QWORD PTR c$[rsp]
  00c3e	48 8b 94 24 18
	01 00 00	 mov	 rdx, QWORD PTR cb$130473[rsp]
  00c46	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00c4e	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00c52	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateThreadpoolIo
  00c58	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  00c60	48 89 81 58 03
	00 00		 mov	 QWORD PTR [rcx+856], rax

; 6100 :         if (!s->tp_io)

  00c67	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00c6f	48 83 b8 58 03
	00 00 00	 cmp	 QWORD PTR [rax+856], 0
  00c77	75 2c		 jne	 SHORT $LN162@PxSocket_I
$LN161@PxSocket_I:

; 6101 :             PxSocket_SYSERROR("CreateThreadpoolIo");

  00c79	33 c9		 xor	 ecx, ecx
  00c7b	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
  00c80	41 b8 01 00 00
	00		 mov	 r8d, 1
  00c86	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@BIALAGNA@CreateThreadpoolIo?$AA@
  00c8d	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  00c95	e8 00 00 00 00	 call	 PxSocket_HandleException
  00c9a	e9 94 28 00 00	 jmp	 $end$130364
  00c9f	33 c0		 xor	 eax, eax
  00ca1	85 c0		 test	 eax, eax
  00ca3	75 d4		 jne	 SHORT $LN161@PxSocket_I
$LN162@PxSocket_I:
$LN164@PxSocket_I:

; 6102 :     }
; 6103 : 
; 6104 :     s->io_op = PxSocket_IO_SEND;

  00ca5	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00cad	c7 80 50 03 00
	00 08 00 00 00	 mov	 DWORD PTR [rax+848], 8

; 6105 : 
; 6106 :     if (PxSocket_THROUGHPUT(s)) {

  00cb7	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00cbf	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  00cc5	83 e0 40	 and	 eax, 64			; 00000040H
  00cc8	85 c0		 test	 eax, eax
  00cca	74 14		 je	 SHORT $LN158@PxSocket_I

; 6107 :         n = s->max_sync_send_attempts;

  00ccc	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00cd4	8b 80 10 03 00
	00		 mov	 eax, DWORD PTR [rax+784]
  00cda	89 44 24 64	 mov	 DWORD PTR n$[rsp], eax

; 6108 :         goto try_synchronous_send;

  00cde	eb 6b		 jmp	 SHORT $try_synchronous_send$130487
$LN158@PxSocket_I:

; 6109 :     }
; 6110 : 
; 6111 :     n = 1;

  00ce0	c7 44 24 64 01
	00 00 00	 mov	 DWORD PTR n$[rsp], 1

; 6112 :     if (PxSocket_IS_HOG(s) && _PxSocket_ActiveHogs >= _PyParallel_NumCPUs-1)

  00ce8	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00cf0	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  00cf6	83 e0 04	 and	 eax, 4
  00cf9	85 c0		 test	 eax, eax
  00cfb	74 19		 je	 SHORT $LN157@PxSocket_I
  00cfd	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR _PyParallel_NumCPUs
  00d03	ff c8		 dec	 eax
  00d05	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _PxSocket_ActiveHogs
  00d0b	3b c8		 cmp	 ecx, eax
  00d0d	7c 07		 jl	 SHORT $LN157@PxSocket_I

; 6113 :         goto do_async_send;

  00d0f	e9 10 02 00 00	 jmp	 $do_async_send$130490
  00d14	eb 35		 jmp	 SHORT $LN156@PxSocket_I
$LN157@PxSocket_I:

; 6114 :     else if (_PxSocket_ActiveIOLoops >= _PyParallel_NumCPUs-1)

  00d16	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR _PyParallel_NumCPUs
  00d1c	ff c8		 dec	 eax
  00d1e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _PxSocket_ActiveIOLoops
  00d24	3b c8		 cmp	 ecx, eax
  00d26	7c 07		 jl	 SHORT $LN155@PxSocket_I

; 6115 :         goto do_async_send;

  00d28	e9 f7 01 00 00	 jmp	 $do_async_send$130490
  00d2d	eb 1c		 jmp	 SHORT $LN154@PxSocket_I
$LN155@PxSocket_I:

; 6116 :     else if (PxSocket_CONCURRENCY(s))

  00d2f	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00d37	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  00d3d	25 00 08 00 00	 and	 eax, 2048		; 00000800H
  00d42	85 c0		 test	 eax, eax
  00d44	74 05		 je	 SHORT $LN153@PxSocket_I

; 6117 :         goto do_async_send;

  00d46	e9 d9 01 00 00	 jmp	 $do_async_send$130490
$LN153@PxSocket_I:
$LN154@PxSocket_I:
$LN156@PxSocket_I:
$try_synchronous_send$130487:

; 6118 : 
; 6119 : try_synchronous_send:
; 6120 :     s->send_id++;

  00d4b	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00d53	48 8b 80 68 02
	00 00		 mov	 rax, QWORD PTR [rax+616]
  00d5a	48 ff c0	 inc	 rax
  00d5d	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  00d65	48 89 81 68 02
	00 00		 mov	 QWORD PTR [rcx+616], rax

; 6121 : 
; 6122 :     /*if (s->send_id % 10000 == 0)
; 6123 :         printf("\ntrying sync send for client %d/%d\n",
; 6124 :                s->child_id, s->sock_fd);*/
; 6125 : 
; 6126 :     err = SOCKET_ERROR;

  00d6c	c7 84 24 d8 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR err$[rsp], -1	; ffffffffH

; 6127 :     wsa_error = NO_ERROR;

  00d77	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR wsa_error$[rsp], 0

; 6128 :     for (i = 1; i <= n; i++) {

  00d7f	c7 44 24 68 01
	00 00 00	 mov	 DWORD PTR i$[rsp], 1
  00d87	eb 0a		 jmp	 SHORT $LN152@PxSocket_I
$LN151@PxSocket_I:
  00d89	8b 44 24 68	 mov	 eax, DWORD PTR i$[rsp]
  00d8d	ff c0		 inc	 eax
  00d8f	89 44 24 68	 mov	 DWORD PTR i$[rsp], eax
$LN152@PxSocket_I:
  00d93	8b 44 24 64	 mov	 eax, DWORD PTR n$[rsp]
  00d97	39 44 24 68	 cmp	 DWORD PTR i$[rsp], eax
  00d9b	7f 7f		 jg	 SHORT $LN150@PxSocket_I

; 6129 :         err = WSASend(fd, w, 1, &nbytes, 0, NULL, NULL);

  00d9d	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR [rsp+48], 0
  00da6	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR [rsp+40], 0
  00daf	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR [rsp+32], 0
  00db7	4c 8d 8c 24 b8
	00 00 00	 lea	 r9, QWORD PTR nbytes$[rsp]
  00dbf	41 b8 01 00 00
	00		 mov	 r8d, 1
  00dc5	48 8b 54 24 40	 mov	 rdx, QWORD PTR w$[rsp]
  00dca	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR fd$[rsp]
  00dd2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WSASend
  00dd8	89 84 24 d8 00
	00 00		 mov	 DWORD PTR err$[rsp], eax

; 6130 :         if (err != SOCKET_ERROR)

  00ddf	83 bc 24 d8 00
	00 00 ff	 cmp	 DWORD PTR err$[rsp], -1	; ffffffffH
  00de7	74 04		 je	 SHORT $LN149@PxSocket_I

; 6131 :             break;

  00de9	eb 31		 jmp	 SHORT $LN150@PxSocket_I

; 6132 :         else {

  00deb	eb 2a		 jmp	 SHORT $LN148@PxSocket_I
$LN149@PxSocket_I:

; 6133 :             wsa_error = WSAGetLastError();

  00ded	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WSAGetLastError
  00df3	89 44 24 48	 mov	 DWORD PTR wsa_error$[rsp], eax

; 6134 :             if (wsa_error == WSAEWOULDBLOCK && i < n)

  00df7	81 7c 24 48 33
	27 00 00	 cmp	 DWORD PTR wsa_error$[rsp], 10035 ; 00002733H
  00dff	75 14		 jne	 SHORT $LN147@PxSocket_I
  00e01	8b 44 24 64	 mov	 eax, DWORD PTR n$[rsp]
  00e05	39 44 24 68	 cmp	 DWORD PTR i$[rsp], eax
  00e09	7d 0a		 jge	 SHORT $LN147@PxSocket_I

; 6135 :                 Sleep(0);

  00e0b	33 c9		 xor	 ecx, ecx
  00e0d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_Sleep

; 6136 :             else

  00e13	eb 02		 jmp	 SHORT $LN146@PxSocket_I
$LN147@PxSocket_I:

; 6137 :                 break;

  00e15	eb 05		 jmp	 SHORT $LN150@PxSocket_I
$LN146@PxSocket_I:
$LN148@PxSocket_I:

; 6138 :         }
; 6139 :     }

  00e17	e9 6d ff ff ff	 jmp	 $LN151@PxSocket_I
$LN150@PxSocket_I:

; 6140 : 
; 6141 :     if (err != SOCKET_ERROR) {

  00e1c	83 bc 24 d8 00
	00 00 ff	 cmp	 DWORD PTR err$[rsp], -1	; ffffffffH
  00e24	74 6c		 je	 SHORT $LN145@PxSocket_I

; 6142 :         /* Send completed synchronously. */
; 6143 :         s->send_nbytes += w->len;

  00e26	48 8b 44 24 40	 mov	 rax, QWORD PTR w$[rsp]
  00e2b	8b 00		 mov	 eax, DWORD PTR [rax]
  00e2d	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  00e35	48 03 81 78 02
	00 00		 add	 rax, QWORD PTR [rcx+632]
  00e3c	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  00e44	48 89 81 78 02
	00 00		 mov	 QWORD PTR [rcx+632], rax

; 6144 :         PxContext_RollbackHeap(c, &sbuf->snapshot);

  00e4b	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR sbuf$[rsp]
  00e53	48 83 c0 10	 add	 rax, 16
  00e57	48 8b d0	 mov	 rdx, rax
  00e5a	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  00e62	e8 00 00 00 00	 call	 PxContext_RollbackHeap

; 6145 :         w = NULL;

  00e67	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR w$[rsp], 0

; 6146 :         sbuf = NULL;

  00e70	48 c7 84 24 90
	00 00 00 00 00
	00 00		 mov	 QWORD PTR sbuf$[rsp], 0

; 6147 :         snapshot = NULL;

  00e7c	48 c7 84 24 80
	00 00 00 00 00
	00 00		 mov	 QWORD PTR snapshot$[rsp], 0

; 6148 :         goto send_complete;

  00e88	e9 fb 03 00 00	 jmp	 $send_complete$130509
  00e8d	e9 92 00 00 00	 jmp	 $LN144@PxSocket_I
$LN145@PxSocket_I:

; 6149 :     } else if (wsa_error == WSAEWOULDBLOCK) {

  00e92	81 7c 24 48 33
	27 00 00	 cmp	 DWORD PTR wsa_error$[rsp], 10035 ; 00002733H
  00e9a	75 25		 jne	 SHORT $LN143@PxSocket_I

; 6150 :         s->send_id--;

  00e9c	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00ea4	48 8b 80 68 02
	00 00		 mov	 rax, QWORD PTR [rax+616]
  00eab	48 ff c8	 dec	 rax
  00eae	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  00eb6	48 89 81 68 02
	00 00		 mov	 QWORD PTR [rcx+616], rax

; 6151 :         goto do_async_send;

  00ebd	eb 65		 jmp	 SHORT $do_async_send$130490

; 6152 :     } else {

  00ebf	eb 63		 jmp	 SHORT $LN142@PxSocket_I
$LN143@PxSocket_I:

; 6153 :         s->send_id--;

  00ec1	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00ec9	48 8b 80 68 02
	00 00		 mov	 rax, QWORD PTR [rax+616]
  00ed0	48 ff c8	 dec	 rax
  00ed3	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  00edb	48 89 81 68 02
	00 00		 mov	 QWORD PTR [rcx+616], rax

; 6154 :         PxContext_RollbackHeap(c, &sbuf->snapshot);

  00ee2	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR sbuf$[rsp]
  00eea	48 83 c0 10	 add	 rax, 16
  00eee	48 8b d0	 mov	 rdx, rax
  00ef1	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  00ef9	e8 00 00 00 00	 call	 PxContext_RollbackHeap

; 6155 :         w = NULL;

  00efe	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR w$[rsp], 0

; 6156 :         sbuf = NULL;

  00f07	48 c7 84 24 90
	00 00 00 00 00
	00 00		 mov	 QWORD PTR sbuf$[rsp], 0

; 6157 :         snapshot = NULL;

  00f13	48 c7 84 24 80
	00 00 00 00 00
	00 00		 mov	 QWORD PTR snapshot$[rsp], 0

; 6158 :         goto send_failed;

  00f1f	e9 0a 08 00 00	 jmp	 $send_failed$130516
$LN142@PxSocket_I:
$LN144@PxSocket_I:
$do_async_send$130490:

; 6159 :     }
; 6160 : 
; 6161 : do_async_send:
; 6162 :     /* There's some unavoidable code duplication between do_send: above and
; 6163 :      * do_async_send: below.  If you change one, check to see if you need to
; 6164 :      * change the other. */
; 6165 :     assert(sbuf);

  00f24	48 83 bc 24 90
	00 00 00 00	 cmp	 QWORD PTR sbuf$[rsp], 0
  00f2d	75 1c		 jne	 SHORT $LN261@PxSocket_I
  00f2f	41 b8 15 18 00
	00		 mov	 r8d, 6165		; 00001815H
  00f35	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00f3c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_19NGGHDKHJ@?$AAs?$AAb?$AAu?$AAf?$AA?$AA@
  00f43	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00f49	33 c0		 xor	 eax, eax
$LN261@PxSocket_I:

; 6166 :     w = &sbuf->w;

  00f4b	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR sbuf$[rsp]
  00f53	48 83 c0 40	 add	 rax, 64			; 00000040H
  00f57	48 89 44 24 40	 mov	 QWORD PTR w$[rsp], rax

; 6167 :     ol = &sbuf->ol;

  00f5c	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR sbuf$[rsp]
  00f64	48 83 c0 20	 add	 rax, 32			; 00000020H
  00f68	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR ol$[rsp], rax

; 6168 :     assert(s->ol == ol);

  00f70	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00f78	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR ol$[rsp]
  00f80	48 39 88 80 03
	00 00		 cmp	 QWORD PTR [rax+896], rcx
  00f87	74 1c		 je	 SHORT $LN262@PxSocket_I
  00f89	41 b8 18 18 00
	00		 mov	 r8d, 6168		; 00001818H
  00f8f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00f96	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BI@BOMKPHOA@?$AAs?$AA?9?$AA?$DO?$AAo?$AAl?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAo?$AAl?$AA?$AA@
  00f9d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00fa3	33 c0		 xor	 eax, eax
$LN262@PxSocket_I:

; 6169 : 
; 6170 :     if (!s->tp_io) {

  00fa5	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00fad	48 83 b8 58 03
	00 00 00	 cmp	 QWORD PTR [rax+856], 0
  00fb5	0f 85 b4 00 00
	00		 jne	 $LN141@PxSocket_I

; 6171 :         PTP_WIN32_IO_CALLBACK cb = PxSocketClient_Callback;

  00fbb	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PxSocketClient_Callback
  00fc2	48 89 84 24 20
	01 00 00	 mov	 QWORD PTR cb$130521[rsp], rax

; 6172 :         assert(Px_SOCKFLAGS(s) & Px_SOCKFLAGS_SENDING_INITIAL_BYTES);

  00fca	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00fd2	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  00fd8	25 00 20 00 00	 and	 eax, 8192		; 00002000H
  00fdd	85 c0		 test	 eax, eax
  00fdf	75 1c		 jne	 SHORT $LN263@PxSocket_I
  00fe1	41 b8 1c 18 00
	00		 mov	 r8d, 6172		; 0000181cH
  00fe7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00fee	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1GK@PAGBDEEJ@?$AAP?$AAx?$AA_?$AAS?$AAO?$AAC?$AAK?$AAF?$AAL?$AAA?$AAG?$AAS?$AA?$CI?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?5?$AAP?$AAx?$AA_?$AAS?$AAO?$AAC?$AAK?$AAF?$AAL?$AAA?$AAG?$AAS?$AA_?$AAS@
  00ff5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00ffb	33 c0		 xor	 eax, eax
$LN263@PxSocket_I:

; 6173 :         s->tp_io = CreateThreadpoolIo((HANDLE)s->sock_fd, cb, c, NULL);

  00ffd	45 33 c9	 xor	 r9d, r9d
  01000	4c 8b 84 24 e0
	00 00 00	 mov	 r8, QWORD PTR c$[rsp]
  01008	48 8b 94 24 20
	01 00 00	 mov	 rdx, QWORD PTR cb$130521[rsp]
  01010	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  01018	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  0101c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateThreadpoolIo
  01022	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  0102a	48 89 81 58 03
	00 00		 mov	 QWORD PTR [rcx+856], rax

; 6174 :         if (!s->tp_io)

  01031	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  01039	48 83 b8 58 03
	00 00 00	 cmp	 QWORD PTR [rax+856], 0
  01041	75 2c		 jne	 SHORT $LN140@PxSocket_I
$LN139@PxSocket_I:

; 6175 :             PxSocket_SYSERROR("CreateThreadpoolIo");

  01043	33 c9		 xor	 ecx, ecx
  01045	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
  0104a	41 b8 01 00 00
	00		 mov	 r8d, 1
  01050	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@BIALAGNA@CreateThreadpoolIo?$AA@
  01057	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  0105f	e8 00 00 00 00	 call	 PxSocket_HandleException
  01064	e9 ca 24 00 00	 jmp	 $end$130364
  01069	33 c0		 xor	 eax, eax
  0106b	85 c0		 test	 eax, eax
  0106d	75 d4		 jne	 SHORT $LN139@PxSocket_I
$LN140@PxSocket_I:
$LN141@PxSocket_I:

; 6176 :     }
; 6177 : 
; 6178 :     s->io_op = PxSocket_IO_SEND;

  0106f	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  01077	c7 80 50 03 00
	00 08 00 00 00	 mov	 DWORD PTR [rax+848], 8

; 6179 : 
; 6180 :     s->send_id++;

  01081	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  01089	48 8b 80 68 02
	00 00		 mov	 rax, QWORD PTR [rax+616]
  01090	48 ff c0	 inc	 rax
  01093	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  0109b	48 89 81 68 02
	00 00		 mov	 QWORD PTR [rcx+616], rax

; 6181 : 
; 6182 :     StartThreadpoolIo(s->tp_io);

  010a2	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  010aa	48 8b 88 58 03
	00 00		 mov	 rcx, QWORD PTR [rax+856]
  010b1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_StartThreadpoolIo

; 6183 :     err = WSASend(fd, w, 1, NULL, 0, ol, NULL);

  010b7	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR [rsp+48], 0
  010c0	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR ol$[rsp]
  010c8	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  010cd	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR [rsp+32], 0
  010d5	45 33 c9	 xor	 r9d, r9d
  010d8	41 b8 01 00 00
	00		 mov	 r8d, 1
  010de	48 8b 54 24 40	 mov	 rdx, QWORD PTR w$[rsp]
  010e3	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR fd$[rsp]
  010eb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WSASend
  010f1	89 84 24 d8 00
	00 00		 mov	 DWORD PTR err$[rsp], eax

; 6184 :     if (err == NO_ERROR) {

  010f8	83 bc 24 d8 00
	00 00 00	 cmp	 DWORD PTR err$[rsp], 0
  01100	75 23		 jne	 SHORT $LN136@PxSocket_I

; 6185 :         /* Send completed synchronously.  Completion packet will be queued. */
; 6186 :         PxContext_RollbackHeap(c, &sbuf->snapshot);

  01102	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR sbuf$[rsp]
  0110a	48 83 c0 10	 add	 rax, 16
  0110e	48 8b d0	 mov	 rdx, rax
  01111	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  01119	e8 00 00 00 00	 call	 PxContext_RollbackHeap

; 6187 :         goto end;

  0111e	e9 10 24 00 00	 jmp	 $end$130364

; 6188 :     } else {

  01123	eb 5b		 jmp	 SHORT $LN135@PxSocket_I
$LN136@PxSocket_I:

; 6189 :         wsa_error = WSAGetLastError();

  01125	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WSAGetLastError
  0112b	89 44 24 48	 mov	 DWORD PTR wsa_error$[rsp], eax

; 6190 :         if (wsa_error == WSA_IO_PENDING)

  0112f	81 7c 24 48 e5
	03 00 00	 cmp	 DWORD PTR wsa_error$[rsp], 997 ; 000003e5H
  01137	75 05		 jne	 SHORT $LN134@PxSocket_I

; 6191 :             /* Overlapped IO successfully initiated; completion packet will
; 6192 :              * eventually get queued (when the IO completes or an error
; 6193 :              * occurs). */
; 6194 :             goto end;

  01139	e9 f5 23 00 00	 jmp	 $end$130364
$LN134@PxSocket_I:

; 6195 : 
; 6196 :         /* The overlapped send attempt failed.  No completion packet will
; 6197 :          * ever be queued, so we need to take care of cleanup here. */
; 6198 :         PxContext_RollbackHeap(c, &sbuf->snapshot);

  0113e	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR sbuf$[rsp]
  01146	48 83 c0 10	 add	 rax, 16
  0114a	48 8b d0	 mov	 rdx, rax
  0114d	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  01155	e8 00 00 00 00	 call	 PxContext_RollbackHeap

; 6199 :         s->send_id--;

  0115a	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  01162	48 8b 80 68 02
	00 00		 mov	 rax, QWORD PTR [rax+616]
  01169	48 ff c8	 dec	 rax
  0116c	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  01174	48 89 81 68 02
	00 00		 mov	 QWORD PTR [rcx+616], rax

; 6200 :         goto send_failed;

  0117b	e9 ae 05 00 00	 jmp	 $send_failed$130516
$LN135@PxSocket_I:

; 6201 :     }
; 6202 : 
; 6203 :     assert(0);

  01180	33 c0		 xor	 eax, eax
  01182	85 c0		 test	 eax, eax
  01184	75 1c		 jne	 SHORT $LN264@PxSocket_I
  01186	41 b8 3b 18 00
	00		 mov	 r8d, 6203		; 0000183bH
  0118c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  01193	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_13COJANIEC@?$AA0?$AA?$AA@
  0119a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  011a0	33 c0		 xor	 eax, eax
$LN264@PxSocket_I:
$overlapped_send_callback$130323:

; 6204 : 
; 6205 : overlapped_send_callback:
; 6206 :     /* Entry point for an overlapped send. */
; 6207 : 
; 6208 :     sbuf = s->sbuf;

  011a2	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  011aa	48 8b 80 68 03
	00 00		 mov	 rax, QWORD PTR [rax+872]
  011b1	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR sbuf$[rsp], rax

; 6209 :     if (sbuf->snapshot)

  011b9	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR sbuf$[rsp]
  011c1	48 83 78 10 00	 cmp	 QWORD PTR [rax+16], 0
  011c6	74 1c		 je	 SHORT $LN133@PxSocket_I

; 6210 :         PxContext_RollbackHeap(c, &sbuf->snapshot);

  011c8	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR sbuf$[rsp]
  011d0	48 83 c0 10	 add	 rax, 16
  011d4	48 8b d0	 mov	 rdx, rax
  011d7	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  011df	e8 00 00 00 00	 call	 PxContext_RollbackHeap
$LN133@PxSocket_I:

; 6211 :     assert(c->ol == s->ol);

  011e4	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  011ec	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  011f4	48 8b 89 80 03
	00 00		 mov	 rcx, QWORD PTR [rcx+896]
  011fb	48 39 88 d0 32
	00 00		 cmp	 QWORD PTR [rax+13008], rcx
  01202	74 1c		 je	 SHORT $LN265@PxSocket_I
  01204	41 b8 43 18 00
	00		 mov	 r8d, 6211		; 00001843H
  0120a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  01211	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BO@PDILFDEN@?$AAc?$AA?9?$AA?$DO?$AAo?$AAl?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAs?$AA?9?$AA?$DO?$AAo?$AAl?$AA?$AA@
  01218	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0121e	33 c0		 xor	 eax, eax
$LN265@PxSocket_I:

; 6212 :     wsa_error = c->io_result;

  01220	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  01228	8b 80 94 32 00
	00		 mov	 eax, DWORD PTR [rax+12948]
  0122e	89 44 24 48	 mov	 DWORD PTR wsa_error$[rsp], eax

; 6213 : 
; 6214 :     if (wsa_error != NO_ERROR) {

  01232	83 7c 24 48 00	 cmp	 DWORD PTR wsa_error$[rsp], 0
  01237	74 26		 je	 SHORT $LN132@PxSocket_I

; 6215 :         s->send_id--;

  01239	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  01241	48 8b 80 68 02
	00 00		 mov	 rax, QWORD PTR [rax+616]
  01248	48 ff c8	 dec	 rax
  0124b	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  01253	48 89 81 68 02
	00 00		 mov	 QWORD PTR [rcx+616], rax

; 6216 :         goto send_failed;

  0125a	e9 cf 04 00 00	 jmp	 $send_failed$130516
$LN132@PxSocket_I:

; 6217 :     }
; 6218 : 
; 6219 :     s->send_nbytes += sbuf->w.len;

  0125f	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR sbuf$[rsp]
  01267	8b 40 40	 mov	 eax, DWORD PTR [rax+64]
  0126a	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  01272	48 03 81 78 02
	00 00		 add	 rax, QWORD PTR [rcx+632]
  01279	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  01281	48 89 81 78 02
	00 00		 mov	 QWORD PTR [rcx+632], rax
$send_complete$130509:

; 6220 : 
; 6221 :     /* Intentional follow-on to send_complete... */
; 6222 : 
; 6223 : send_complete:
; 6224 :     func = s->send_complete;

  01288	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  01290	48 8b 80 c0 02
	00 00		 mov	 rax, QWORD PTR [rax+704]
  01297	48 89 84 24 08
	01 00 00	 mov	 QWORD PTR func$[rsp], rax

; 6225 :     if (!func)

  0129f	48 83 bc 24 08
	01 00 00 00	 cmp	 QWORD PTR func$[rsp], 0
  012a8	75 05		 jne	 SHORT $LN131@PxSocket_I

; 6226 :         goto try_recv;

  012aa	e9 ce 07 00 00	 jmp	 $try_recv$130420
$LN131@PxSocket_I:

; 6227 : 
; 6228 :     snapshot = PxContext_HeapSnapshot(c, NULL);

  012af	33 d2		 xor	 edx, edx
  012b1	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  012b9	e8 00 00 00 00	 call	 PxContext_HeapSnapshot
  012be	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR snapshot$[rsp], rax

; 6229 : 
; 6230 :     args = PyTuple_Pack(2, s, PyLong_FromSize_t(s->send_id));

  012c6	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  012ce	48 8b 88 68 02
	00 00		 mov	 rcx, QWORD PTR [rax+616]
  012d5	e8 00 00 00 00	 call	 PyLong_FromSize_t
  012da	4c 8b c0	 mov	 r8, rax
  012dd	48 8b 94 24 b0
	01 00 00	 mov	 rdx, QWORD PTR s$[rsp]
  012e5	b9 02 00 00 00	 mov	 ecx, 2
  012ea	e8 00 00 00 00	 call	 PyTuple_Pack
  012ef	48 89 44 24 58	 mov	 QWORD PTR args$[rsp], rax

; 6231 :     if (!args) {

  012f4	48 83 7c 24 58
	00		 cmp	 QWORD PTR args$[rsp], 0
  012fa	75 60		 jne	 SHORT $LN130@PxSocket_I

; 6232 :         PxContext_RollbackHeap(c, &snapshot);

  012fc	48 8d 94 24 80
	00 00 00	 lea	 rdx, QWORD PTR snapshot$[rsp]
  01304	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  0130c	e8 00 00 00 00	 call	 PxContext_RollbackHeap
$LN129@PxSocket_I:

; 6233 :         PxSocket_FATAL();

  01311	e8 00 00 00 00	 call	 PyErr_Occurred
  01316	48 85 c0	 test	 rax, rax
  01319	75 1c		 jne	 SHORT $LN266@PxSocket_I
  0131b	41 b8 59 18 00
	00		 mov	 r8d, 6233		; 00001859H
  01321	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  01328	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CC@DNBCFJEA@?$AAP?$AAy?$AAE?$AAr?$AAr?$AA_?$AAO?$AAc?$AAc?$AAu?$AAr?$AAr?$AAe?$AAd?$AA?$CI?$AA?$CJ?$AA?$AA@
  0132f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  01335	33 c0		 xor	 eax, eax
$LN266@PxSocket_I:
  01337	41 b8 01 00 00
	00		 mov	 r8d, 1
  0133d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  01344	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  0134c	e8 00 00 00 00	 call	 PxSocket_HandleException
  01351	e9 dd 21 00 00	 jmp	 $end$130364
  01356	33 c0		 xor	 eax, eax
  01358	85 c0		 test	 eax, eax
  0135a	75 b5		 jne	 SHORT $LN129@PxSocket_I
$LN130@PxSocket_I:

; 6234 :     }
; 6235 : 
; 6236 :     result = PyObject_CallObject(func, args);

  0135c	48 8b 54 24 58	 mov	 rdx, QWORD PTR args$[rsp]
  01361	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR func$[rsp]
  01369	e8 00 00 00 00	 call	 PyObject_CallObject
  0136e	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR result$[rsp], rax

; 6237 :     if (result)

  01376	48 83 bc 24 e8
	00 00 00 00	 cmp	 QWORD PTR result$[rsp], 0
  0137f	74 26		 je	 SHORT $LN126@PxSocket_I

; 6238 :         assert(!PyErr_Occurred());

  01381	e8 00 00 00 00	 call	 PyErr_Occurred
  01386	48 85 c0	 test	 rax, rax
  01389	74 1c		 je	 SHORT $LN267@PxSocket_I
  0138b	41 b8 5e 18 00
	00		 mov	 r8d, 6238		; 0000185eH
  01391	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  01398	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CE@JKFGJBND@?$AA?$CB?$AAP?$AAy?$AAE?$AAr?$AAr?$AA_?$AAO?$AAc?$AAc?$AAu?$AAr?$AAr?$AAe?$AAd?$AA?$CI?$AA?$CJ?$AA?$AA@
  0139f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  013a5	33 c0		 xor	 eax, eax
$LN267@PxSocket_I:
$LN126@PxSocket_I:

; 6239 :     if (PyErr_Occurred())

  013a7	e8 00 00 00 00	 call	 PyErr_Occurred
  013ac	48 85 c0	 test	 rax, rax
  013af	74 27		 je	 SHORT $LN125@PxSocket_I

; 6240 :         assert(!result);

  013b1	48 83 bc 24 e8
	00 00 00 00	 cmp	 QWORD PTR result$[rsp], 0
  013ba	74 1c		 je	 SHORT $LN268@PxSocket_I
  013bc	41 b8 60 18 00
	00		 mov	 r8d, 6240		; 00001860H
  013c2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  013c9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BA@HDEGGLDD@?$AA?$CB?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?$AA@
  013d0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  013d6	33 c0		 xor	 eax, eax
$LN268@PxSocket_I:
$LN125@PxSocket_I:

; 6241 :     if (!result) {

  013d8	48 83 bc 24 e8
	00 00 00 00	 cmp	 QWORD PTR result$[rsp], 0
  013e1	75 5d		 jne	 SHORT $LN124@PxSocket_I

; 6242 :         PxContext_RollbackHeap(c, &snapshot);

  013e3	48 8d 94 24 80
	00 00 00	 lea	 rdx, QWORD PTR snapshot$[rsp]
  013eb	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  013f3	e8 00 00 00 00	 call	 PxContext_RollbackHeap
$LN123@PxSocket_I:

; 6243 :         PxSocket_EXCEPTION();

  013f8	e8 00 00 00 00	 call	 PyErr_Occurred
  013fd	48 85 c0	 test	 rax, rax
  01400	75 1c		 jne	 SHORT $LN269@PxSocket_I
  01402	41 b8 63 18 00
	00		 mov	 r8d, 6243		; 00001863H
  01408	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0140f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CC@DNBCFJEA@?$AAP?$AAy?$AAE?$AAr?$AAr?$AA_?$AAO?$AAc?$AAc?$AAu?$AAr?$AAr?$AAe?$AAd?$AA?$CI?$AA?$CJ?$AA?$AA@
  01416	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0141c	33 c0		 xor	 eax, eax
$LN269@PxSocket_I:
  0141e	45 33 c0	 xor	 r8d, r8d
  01421	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  01428	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  01430	e8 00 00 00 00	 call	 PxSocket_HandleException
  01435	e9 f9 20 00 00	 jmp	 $end$130364
  0143a	33 c0		 xor	 eax, eax
  0143c	85 c0		 test	 eax, eax
  0143e	75 b8		 jne	 SHORT $LN123@PxSocket_I
$LN124@PxSocket_I:

; 6244 :     }
; 6245 : 
; 6246 :     if (PxSocket_IS_SENDFILE_SCHEDULED(s)) {

  01440	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  01448	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  0144e	25 00 00 00 40	 and	 eax, 1073741824		; 40000000H
  01453	85 c0		 test	 eax, eax
  01455	74 6c		 je	 SHORT $LN120@PxSocket_I

; 6247 :         if (result != Py_None) {

  01457	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0145e	48 39 84 24 e8
	00 00 00	 cmp	 QWORD PTR result$[rsp], rax
  01466	74 5b		 je	 SHORT $LN119@PxSocket_I

; 6248 :             PyErr_SetString(PyExc_RuntimeError,
; 6249 :                             "data_received callback scheduled sendfile but "
; 6250 :                             "returned non-None data");

  01468	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0EF@NHKFODOC@data_received?5callback?5scheduled@
  0146f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeError
  01476	e8 00 00 00 00	 call	 PyErr_SetString
$LN118@PxSocket_I:

; 6251 :             PxSocket_EXCEPTION();

  0147b	e8 00 00 00 00	 call	 PyErr_Occurred
  01480	48 85 c0	 test	 rax, rax
  01483	75 1c		 jne	 SHORT $LN270@PxSocket_I
  01485	41 b8 6b 18 00
	00		 mov	 r8d, 6251		; 0000186bH
  0148b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  01492	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CC@DNBCFJEA@?$AAP?$AAy?$AAE?$AAr?$AAr?$AA_?$AAO?$AAc?$AAc?$AAu?$AAr?$AAr?$AAe?$AAd?$AA?$CI?$AA?$CJ?$AA?$AA@
  01499	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0149f	33 c0		 xor	 eax, eax
$LN270@PxSocket_I:
  014a1	45 33 c0	 xor	 r8d, r8d
  014a4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  014ab	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  014b3	e8 00 00 00 00	 call	 PxSocket_HandleException
  014b8	e9 76 20 00 00	 jmp	 $end$130364
  014bd	33 c0		 xor	 eax, eax
  014bf	85 c0		 test	 eax, eax
  014c1	75 b8		 jne	 SHORT $LN118@PxSocket_I
$LN119@PxSocket_I:
$LN120@PxSocket_I:

; 6252 :         }
; 6253 :     }
; 6254 : 
; 6255 :     if (result == Py_None) {

  014c3	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  014ca	48 39 84 24 e8
	00 00 00	 cmp	 QWORD PTR result$[rsp], rax
  014d2	75 59		 jne	 SHORT $LN115@PxSocket_I

; 6256 :         if (PxSocket_IS_SENDFILE_SCHEDULED(s)) {

  014d4	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  014dc	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  014e2	25 00 00 00 40	 and	 eax, 1073741824		; 40000000H
  014e7	85 c0		 test	 eax, eax
  014e9	74 28		 je	 SHORT $LN114@PxSocket_I

; 6257 :             s->sendfile_snapshot = snapshot;

  014eb	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  014f3	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR snapshot$[rsp]
  014fb	48 89 88 28 03
	00 00		 mov	 QWORD PTR [rax+808], rcx

; 6258 :             snapshot = NULL;

  01502	48 c7 84 24 80
	00 00 00 00 00
	00 00		 mov	 QWORD PTR snapshot$[rsp], 0

; 6259 :             goto do_sendfile;

  0150e	e9 e5 14 00 00	 jmp	 $do_sendfile$130455
$LN114@PxSocket_I:

; 6260 :         }
; 6261 :         PxContext_RollbackHeap(c, &snapshot);

  01513	48 8d 94 24 80
	00 00 00	 lea	 rdx, QWORD PTR snapshot$[rsp]
  0151b	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  01523	e8 00 00 00 00	 call	 PxContext_RollbackHeap

; 6262 :         goto try_recv;

  01528	e9 50 05 00 00	 jmp	 $try_recv$130420
$LN115@PxSocket_I:

; 6263 :     }
; 6264 : 
; 6265 :     sbuf = NULL;

  0152d	48 c7 84 24 90
	00 00 00 00 00
	00 00		 mov	 QWORD PTR sbuf$[rsp], 0

; 6266 :     if (!PxSocket_NEW_SBUF(c, s, snapshot, 0, 0, result, &sbuf, 0)) {

  01539	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR [rsp+56], 0
  01541	48 8d 84 24 90
	00 00 00	 lea	 rax, QWORD PTR sbuf$[rsp]
  01549	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  0154e	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR result$[rsp]
  01556	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0155b	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  01564	45 33 c9	 xor	 r9d, r9d
  01567	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR snapshot$[rsp]
  0156f	48 8b 94 24 b0
	01 00 00	 mov	 rdx, QWORD PTR s$[rsp]
  01577	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  0157f	e8 00 00 00 00	 call	 PxSocket_NEW_SBUF
  01584	85 c0		 test	 eax, eax
  01586	75 7a		 jne	 SHORT $LN113@PxSocket_I

; 6267 :         PxContext_RollbackHeap(c, &snapshot);

  01588	48 8d 94 24 80
	00 00 00	 lea	 rdx, QWORD PTR snapshot$[rsp]
  01590	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  01598	e8 00 00 00 00	 call	 PxContext_RollbackHeap

; 6268 :         if (!PyErr_Occurred())

  0159d	e8 00 00 00 00	 call	 PyErr_Occurred
  015a2	48 85 c0	 test	 rax, rax
  015a5	75 13		 jne	 SHORT $LN112@PxSocket_I

; 6269 :             PyErr_SetString(PyExc_ValueError,
; 6270 :                             "send_complete() did not return a sendable "
; 6271 :                             "object (bytes, bytearray or unicode)");

  015a7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0EP@KOIIEICF@send_complete?$CI?$CJ?5did?5not?5return?5a@
  015ae	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  015b5	e8 00 00 00 00	 call	 PyErr_SetString
$LN112@PxSocket_I:
$LN111@PxSocket_I:

; 6272 :         PxSocket_EXCEPTION();

  015ba	e8 00 00 00 00	 call	 PyErr_Occurred
  015bf	48 85 c0	 test	 rax, rax
  015c2	75 1c		 jne	 SHORT $LN271@PxSocket_I
  015c4	41 b8 80 18 00
	00		 mov	 r8d, 6272		; 00001880H
  015ca	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  015d1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CC@DNBCFJEA@?$AAP?$AAy?$AAE?$AAr?$AAr?$AA_?$AAO?$AAc?$AAc?$AAu?$AAr?$AAr?$AAe?$AAd?$AA?$CI?$AA?$CJ?$AA?$AA@
  015d8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  015de	33 c0		 xor	 eax, eax
$LN271@PxSocket_I:
  015e0	45 33 c0	 xor	 r8d, r8d
  015e3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  015ea	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  015f2	e8 00 00 00 00	 call	 PxSocket_HandleException
  015f7	e9 37 1f 00 00	 jmp	 $end$130364
  015fc	33 c0		 xor	 eax, eax
  015fe	85 c0		 test	 eax, eax
  01600	75 b8		 jne	 SHORT $LN111@PxSocket_I
$LN113@PxSocket_I:

; 6273 :     }
; 6274 : 
; 6275 :     if (Px_SOCKFLAGS(s) & Px_SOCKFLAGS_SENDING_INITIAL_BYTES) {

  01602	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  0160a	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  01610	25 00 20 00 00	 and	 eax, 8192		; 00002000H
  01615	85 c0		 test	 eax, eax
  01617	74 5b		 je	 SHORT $LN108@PxSocket_I

; 6276 :         if (s->connection_made) {

  01619	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  01621	48 83 b8 d8 02
	00 00 00	 cmp	 QWORD PTR [rax+728], 0
  01629	74 29		 je	 SHORT $LN107@PxSocket_I

; 6277 :             char *msg = "protocol's connection_made() callback "        \
; 6278 :                         "may never be called (because send_complete() " \
; 6279 :                         "is sending more data on the back of the "      \
; 6280 :                         "successful sending of the initial_bytes)";

  0162b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0KE@KPJBDGKF@protocol?8s?5connection_made?$CI?$CJ?5cal@
  01632	48 89 84 24 28
	01 00 00	 mov	 QWORD PTR msg$130578[rsp], rax

; 6281 :             PyErr_WarnEx(PyExc_RuntimeWarning, msg, 1);

  0163a	41 b8 01 00 00
	00		 mov	 r8d, 1
  01640	48 8b 94 24 28
	01 00 00	 mov	 rdx, QWORD PTR msg$130578[rsp]
  01648	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeWarning
  0164f	e8 00 00 00 00	 call	 PyErr_WarnEx
$LN107@PxSocket_I:

; 6282 :         }
; 6283 :         Px_SOCKFLAGS(s) &= ~Px_SOCKFLAGS_SENDING_INITIAL_BYTES;

  01654	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  0165c	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  01662	0f ba f0 0d	 btr	 eax, 13
  01666	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  0166e	89 81 f4 01 00
	00		 mov	 DWORD PTR [rcx+500], eax
$LN108@PxSocket_I:

; 6284 :     }
; 6285 : 
; 6286 :     if (!(Px_SOCKFLAGS(s) & Px_SOCKFLAGS_CHECKED_DR_UNREACHABLE)) {

  01674	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  0167c	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  01682	25 00 10 00 00	 and	 eax, 4096		; 00001000H
  01687	85 c0		 test	 eax, eax
  01689	75 60		 jne	 SHORT $LN106@PxSocket_I

; 6287 :         Px_SOCKFLAGS(s) |= Px_SOCKFLAGS_CHECKED_DR_UNREACHABLE;

  0168b	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  01693	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  01699	0f ba e8 0c	 bts	 eax, 12
  0169d	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  016a5	89 81 f4 01 00
	00		 mov	 DWORD PTR [rcx+500], eax

; 6288 :         if (PxSocket_CAN_RECV(s)) {

  016ab	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  016b3	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  016b9	25 00 00 01 00	 and	 eax, 65536		; 00010000H
  016be	85 c0		 test	 eax, eax
  016c0	74 29		 je	 SHORT $LN105@PxSocket_I

; 6289 :             char *msg = "protocol has data_received|lines_received " \
; 6290 :                         "callback, but send_complete() is sending " \
; 6291 :                         "more data, so it may never be called";

  016c2	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0HI@DGAEDMOP@protocol?5has?5data_received?$HMlines@
  016c9	48 89 84 24 30
	01 00 00	 mov	 QWORD PTR msg$130586[rsp], rax

; 6292 :             PyErr_WarnEx(PyExc_RuntimeWarning, msg, 1);

  016d1	41 b8 01 00 00
	00		 mov	 r8d, 1
  016d7	48 8b 94 24 30
	01 00 00	 mov	 rdx, QWORD PTR msg$130586[rsp]
  016df	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeWarning
  016e6	e8 00 00 00 00	 call	 PyErr_WarnEx
$LN105@PxSocket_I:
$LN106@PxSocket_I:

; 6293 :         }
; 6294 :     }
; 6295 : 
; 6296 :     if (!(PxSocket_IS_HOG(s))) {

  016eb	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  016f3	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  016f9	83 e0 04	 and	 eax, 4
  016fc	85 c0		 test	 eax, eax
  016fe	75 29		 jne	 SHORT $LN104@PxSocket_I

; 6297 :         Px_SOCKFLAGS(s) |= Px_SOCKFLAGS_HOG;

  01700	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  01708	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  0170e	83 c8 04	 or	 eax, 4
  01711	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  01719	89 81 f4 01 00
	00		 mov	 DWORD PTR [rcx+500], eax

; 6298 :         InterlockedIncrement(&_PxSocket_ActiveHogs);

  0171f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PxSocket_ActiveHogs
  01726	f0 ff 00	 lock inc DWORD PTR [rax]
$LN104@PxSocket_I:

; 6299 :     }
; 6300 : 
; 6301 :     goto do_send;

  01729	e9 64 f4 ff ff	 jmp	 $do_send$130414
$send_failed$130516:

; 6302 : 
; 6303 : send_failed:
; 6304 :     assert(wsa_error);

  0172e	83 7c 24 48 00	 cmp	 DWORD PTR wsa_error$[rsp], 0
  01733	75 1c		 jne	 SHORT $LN272@PxSocket_I
  01735	41 b8 a0 18 00
	00		 mov	 r8d, 6304		; 000018a0H
  0173b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  01742	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BE@IPFILOEG@?$AAw?$AAs?$AAa?$AA_?$AAe?$AAr?$AAr?$AAo?$AAr?$AA?$AA@
  01749	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0174f	33 c0		 xor	 eax, eax
$LN272@PxSocket_I:

; 6305 :     func = s->send_failed;

  01751	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  01759	48 8b 80 a0 02
	00 00		 mov	 rax, QWORD PTR [rax+672]
  01760	48 89 84 24 08
	01 00 00	 mov	 QWORD PTR func$[rsp], rax

; 6306 :     if (func) {

  01768	48 83 bc 24 08
	01 00 00 00	 cmp	 QWORD PTR func$[rsp], 0
  01771	74 22		 je	 SHORT $LN103@PxSocket_I

; 6307 :         /* xxx todo */
; 6308 :         assert(0);

  01773	33 c0		 xor	 eax, eax
  01775	85 c0		 test	 eax, eax
  01777	75 1c		 jne	 SHORT $LN273@PxSocket_I
  01779	41 b8 a4 18 00
	00		 mov	 r8d, 6308		; 000018a4H
  0177f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  01786	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_13COJANIEC@?$AA0?$AA?$AA@
  0178d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  01793	33 c0		 xor	 eax, eax
$LN273@PxSocket_I:
$LN103@PxSocket_I:

; 6309 :     }
; 6310 : 
; 6311 :     assert(s->io_op == PxSocket_IO_SEND);

  01795	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  0179d	83 b8 50 03 00
	00 08		 cmp	 DWORD PTR [rax+848], 8
  017a4	74 1c		 je	 SHORT $LN274@PxSocket_I
  017a6	41 b8 a7 18 00
	00		 mov	 r8d, 6311		; 000018a7H
  017ac	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  017b3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DK@GDFLBMOI@?$AAs?$AA?9?$AA?$DO?$AAi?$AAo?$AA_?$AAo?$AAp?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAP?$AAx?$AAS?$AAo?$AAc?$AAk?$AAe?$AAt?$AA_?$AAI?$AAO?$AA_?$AAS?$AAE?$AAN?$AAD?$AA?$AA@
  017ba	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  017c0	33 c0		 xor	 eax, eax
$LN274@PxSocket_I:

; 6312 :     syscall = "WSASend";

  017c2	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_07CDJEAKAJ@WSASend?$AA@
  017c9	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR syscall$[rsp], rax

; 6313 : 
; 6314 :     goto handle_error;

  017d1	e9 ea 18 00 00	 jmp	 $handle_error$130338
$close_$130351:

; 6315 : 
; 6316 : close_:
; 6317 :     assert(
; 6318 :         (Px_SOCKFLAGS(s) & Px_SOCKFLAGS_CLOSE_SCHEDULED) ||
; 6319 :         (!PxSocket_CAN_RECV(s))
; 6320 :     );

  017d6	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  017de	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  017e4	25 00 00 40 00	 and	 eax, 4194304		; 00400000H
  017e9	85 c0		 test	 eax, eax
  017eb	75 33		 jne	 SHORT $LN275@PxSocket_I
  017ed	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  017f5	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  017fb	25 00 00 01 00	 and	 eax, 65536		; 00010000H
  01800	85 c0		 test	 eax, eax
  01802	74 1c		 je	 SHORT $LN275@PxSocket_I
  01804	41 b8 b0 18 00
	00		 mov	 r8d, 6320		; 000018b0H
  0180a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  01811	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1JI@ICNBINND@?$AA?$CI?$AAP?$AAx?$AA_?$AAS?$AAO?$AAC?$AAK?$AAF?$AAL?$AAA?$AAG?$AAS?$AA?$CI?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?5?$AAP?$AAx?$AA_?$AAS?$AAO?$AAC?$AAK?$AAF?$AAL?$AAA?$AAG?$AAS?$AA_@
  01818	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0181e	33 c0		 xor	 eax, eax
$LN275@PxSocket_I:
$maybe_close$130602:

; 6321 : 
; 6322 : maybe_close:
; 6323 :     assert(!(Px_SOCKFLAGS(s) & Px_SOCKFLAGS_CLOSED));

  01820	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  01828	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  0182e	25 00 00 80 00	 and	 eax, 8388608		; 00800000H
  01833	85 c0		 test	 eax, eax
  01835	74 1c		 je	 SHORT $LN276@PxSocket_I
  01837	41 b8 b3 18 00
	00		 mov	 r8d, 6323		; 000018b3H
  0183d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  01844	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FC@HAOICEN@?$AA?$CB?$AA?$CI?$AAP?$AAx?$AA_?$AAS?$AAO?$AAC?$AAK?$AAF?$AAL?$AAA?$AAG?$AAS?$AA?$CI?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?5?$AAP?$AAx?$AA_?$AAS?$AAO?$AAC?$AAK?$AAF?$AAL?$AAA?$AAG?$AAS@
  0184b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  01851	33 c0		 xor	 eax, eax
$LN276@PxSocket_I:

; 6324 : 
; 6325 :     if ((Px_SOCKFLAGS(s) & Px_SOCKFLAGS_CLOSE_SCHEDULED) ||
; 6326 :         (!PxSocket_CAN_RECV(s)))

  01853	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  0185b	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  01861	25 00 00 40 00	 and	 eax, 4194304		; 00400000H
  01866	85 c0		 test	 eax, eax
  01868	75 1b		 jne	 SHORT $LN101@PxSocket_I
  0186a	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  01872	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  01878	25 00 00 01 00	 and	 eax, 65536		; 00010000H
  0187d	85 c0		 test	 eax, eax
  0187f	0f 85 f5 00 00
	00		 jne	 $LN102@PxSocket_I
$LN101@PxSocket_I:

; 6327 :     {
; 6328 :         int success;
; 6329 :         char error = 0;

  01885	c6 84 24 38 01
	00 00 00	 mov	 BYTE PTR error$130610[rsp], 0
$definitely_close$130385:

; 6330 : 
; 6331 : definitely_close:
; 6332 :         assert(!(Px_SOCKFLAGS(s) & Px_SOCKFLAGS_CLOSED));

  0188d	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  01895	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  0189b	25 00 00 80 00	 and	 eax, 8388608		; 00800000H
  018a0	85 c0		 test	 eax, eax
  018a2	74 1c		 je	 SHORT $LN277@PxSocket_I
  018a4	41 b8 bc 18 00
	00		 mov	 r8d, 6332		; 000018bcH
  018aa	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  018b1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FC@HAOICEN@?$AA?$CB?$AA?$CI?$AAP?$AAx?$AA_?$AAS?$AAO?$AAC?$AAK?$AAF?$AAL?$AAA?$AAG?$AAS?$AA?$CI?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?5?$AAP?$AAx?$AA_?$AAS?$AAO?$AAC?$AAK?$AAF?$AAL?$AAA?$AAG?$AAS@
  018b8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  018be	33 c0		 xor	 eax, eax
$LN277@PxSocket_I:

; 6333 : 
; 6334 :         s->io_op = PxSocket_IO_CLOSE;

  018c0	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  018c8	c7 80 50 03 00
	00 20 00 00 00	 mov	 DWORD PTR [rax+848], 32	; 00000020H

; 6335 : 
; 6336 :         success = DisconnectEx(s->sock_fd, NULL, 0 /*TF_REUSE_SOCKET*/, 0);

  018d2	45 33 c9	 xor	 r9d, r9d
  018d5	45 33 c0	 xor	 r8d, r8d
  018d8	33 d2		 xor	 edx, edx
  018da	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  018e2	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  018e6	ff 15 68 00 00
	00		 call	 QWORD PTR PySocketModule+104
  018ec	89 84 24 3c 01
	00 00		 mov	 DWORD PTR success$130609[rsp], eax

; 6337 :         if (!success) {

  018f3	83 bc 24 3c 01
	00 00 00	 cmp	 DWORD PTR success$130609[rsp], 0
  018fb	75 5c		 jne	 SHORT $LN100@PxSocket_I

; 6338 :             int last_error = WSAGetLastError();

  018fd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WSAGetLastError
  01903	89 84 24 40 01
	00 00		 mov	 DWORD PTR last_error$130615[rsp], eax

; 6339 :             if (last_error == WSAEWOULDBLOCK)

  0190a	81 bc 24 40 01
	00 00 33 27 00
	00		 cmp	 DWORD PTR last_error$130615[rsp], 10035 ; 00002733H
  01915	75 0e		 jne	 SHORT $LN99@PxSocket_I

; 6340 :                 Py_FatalError("DisconnectEx() -> WSAEWOULDBLOCK!");

  01917	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CC@ODEEEBEO@DisconnectEx?$CI?$CJ?5?9?$DO?5WSAEWOULDBLOCK@
  0191e	e8 00 00 00 00	 call	 Py_FatalError

; 6341 :             else {

  01923	eb 32		 jmp	 SHORT $LN98@PxSocket_I
$LN99@PxSocket_I:

; 6342 :                 assert(last_error != NO_ERROR);

  01925	83 bc 24 40 01
	00 00 00	 cmp	 DWORD PTR last_error$130615[rsp], 0
  0192d	75 1c		 jne	 SHORT $LN278@PxSocket_I
  0192f	41 b8 c6 18 00
	00		 mov	 r8d, 6342		; 000018c6H
  01935	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0193c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@IEHJEKEM@?$AAl?$AAa?$AAs?$AAt?$AA_?$AAe?$AAr?$AAr?$AAo?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAO?$AA_?$AAE?$AAR?$AAR?$AAO?$AAR?$AA?$AA@
  01943	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  01949	33 c0		 xor	 eax, eax
$LN278@PxSocket_I:

; 6343 :                 PyErr_SetFromWindowsErr(last_error);

  0194b	8b 8c 24 40 01
	00 00		 mov	 ecx, DWORD PTR last_error$130615[rsp]
  01952	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
$LN98@PxSocket_I:

; 6344 :             }
; 6345 :         } else

  01957	eb 1f		 jmp	 SHORT $LN97@PxSocket_I
$LN100@PxSocket_I:

; 6346 :             Px_SOCKFLAGS(s) |= Px_SOCKFLAGS_CLEAN_DISCONNECT;

  01959	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  01961	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  01967	83 c8 20	 or	 eax, 32			; 00000020H
  0196a	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  01972	89 81 f4 01 00
	00		 mov	 DWORD PTR [rcx+500], eax
$LN97@PxSocket_I:

; 6347 : 
; 6348 :         goto connection_closed;

  01978	eb 28		 jmp	 SHORT $connection_closed$130622
$LN102@PxSocket_I:

; 6349 : 
; 6350 :     }
; 6351 : 
; 6352 :     assert(next_opcode);

  0197a	83 7c 24 4c 00	 cmp	 DWORD PTR next_opcode$[rsp], 0
  0197f	75 1c		 jne	 SHORT $LN279@PxSocket_I
  01981	41 b8 d0 18 00
	00		 mov	 r8d, 6352		; 000018d0H
  01987	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0198e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BI@GLLDIFJC@?$AAn?$AAe?$AAx?$AAt?$AA_?$AAo?$AAp?$AAc?$AAo?$AAd?$AAe?$AA?$AA@
  01995	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0199b	33 c0		 xor	 eax, eax
$LN279@PxSocket_I:

; 6353 :     goto dispatch;

  0199d	e9 ab e8 ff ff	 jmp	 $dispatch$130330
$connection_closed$130622:

; 6354 : 
; 6355 : connection_closed:
; 6356 :     Px_SOCKFLAGS(s) &= ~Px_SOCKFLAGS_CLOSE_SCHEDULED;

  019a2	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  019aa	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  019b0	0f ba f0 16	 btr	 eax, 22
  019b4	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  019bc	89 81 f4 01 00
	00		 mov	 DWORD PTR [rcx+500], eax

; 6357 :     Px_SOCKFLAGS(s) &= ~Px_SOCKFLAGS_CONNECTED;

  019c2	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  019ca	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  019d0	83 e0 ef	 and	 eax, -17		; ffffffefH
  019d3	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  019db	89 81 f4 01 00
	00		 mov	 DWORD PTR [rcx+500], eax

; 6358 :     Px_SOCKFLAGS(s) |=  Px_SOCKFLAGS_CLOSED;

  019e1	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  019e9	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  019ef	0f ba e8 17	 bts	 eax, 23
  019f3	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  019fb	89 81 f4 01 00
	00		 mov	 DWORD PTR [rcx+500], eax

; 6359 : 
; 6360 :     if (PyErr_Occurred())

  01a01	e8 00 00 00 00	 call	 PyErr_Occurred
  01a06	48 85 c0	 test	 rax, rax
  01a09	74 05		 je	 SHORT $LN96@PxSocket_I

; 6361 :         goto handle_exception;

  01a0b	e9 db 1a 00 00	 jmp	 $handle_exception$130629
$LN96@PxSocket_I:

; 6362 : 
; 6363 :     func = s->connection_closed;

  01a10	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  01a18	48 8b 80 e0 02
	00 00		 mov	 rax, QWORD PTR [rax+736]
  01a1f	48 89 84 24 08
	01 00 00	 mov	 QWORD PTR func$[rsp], rax

; 6364 :     if (func) {

  01a27	48 83 bc 24 08
	01 00 00 00	 cmp	 QWORD PTR func$[rsp], 0
  01a30	74 22		 je	 SHORT $LN95@PxSocket_I

; 6365 :         /* xxx todo */
; 6366 :         assert(0);

  01a32	33 c0		 xor	 eax, eax
  01a34	85 c0		 test	 eax, eax
  01a36	75 1c		 jne	 SHORT $LN280@PxSocket_I
  01a38	41 b8 de 18 00
	00		 mov	 r8d, 6366		; 000018deH
  01a3e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  01a45	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_13COJANIEC@?$AA0?$AA?$AA@
  01a4c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  01a52	33 c0		 xor	 eax, eax
$LN280@PxSocket_I:
$LN95@PxSocket_I:

; 6367 :     }
; 6368 : 
; 6369 :     if (PxSocket_IS_SERVERCLIENT(s))

  01a54	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  01a5c	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  01a62	25 80 00 00 00	 and	 eax, 128		; 00000080H
  01a67	85 c0		 test	 eax, eax
  01a69	74 0d		 je	 SHORT $LN94@PxSocket_I

; 6370 :         PxServerSocket_ClientClosed(s);

  01a6b	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  01a73	e8 00 00 00 00	 call	 PxServerSocket_ClientClosed
$LN94@PxSocket_I:

; 6371 : 
; 6372 :     goto end;

  01a78	e9 b6 1a 00 00	 jmp	 $end$130364
$try_recv$130420:

; 6373 : 
; 6374 : try_recv:
; 6375 :     /*
; 6376 :     if ((Px_SOCKFLAGS(s) & Px_SOCKFLAGS_HAS_CONNECTION_MADE) &&
; 6377 :        !(Px_SOCKFLAGS(s) & Px_SOCKFLAGS_CALLED_CONNECTION_MADE))
; 6378 :     {
; 6379 :         next_opcode = pxsock_try_recv;
; 6380 :         goto definitely_do_connection_made;
; 6381 :     }
; 6382 :     */
; 6383 : 
; 6384 :     if ((Px_SOCKFLAGS(s) & Px_SOCKFLAGS_CLOSE_SCHEDULED) ||
; 6385 :         (!(PxSocket_CAN_RECV(s))))

  01a7d	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  01a85	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  01a8b	25 00 00 40 00	 and	 eax, 4194304		; 00400000H
  01a90	85 c0		 test	 eax, eax
  01a92	75 17		 jne	 SHORT $LN92@PxSocket_I
  01a94	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  01a9c	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  01aa2	25 00 00 01 00	 and	 eax, 65536		; 00010000H
  01aa7	85 c0		 test	 eax, eax
  01aa9	75 05		 jne	 SHORT $LN93@PxSocket_I
$LN92@PxSocket_I:

; 6386 :         goto definitely_close;

  01aab	e9 dd fd ff ff	 jmp	 $definitely_close$130385
$LN93@PxSocket_I:

; 6387 : 
; 6388 :     if (s->io_op == PxSocket_IO_ACCEPT && !s->initial_bytes_to_send) {

  01ab0	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  01ab8	83 b8 50 03 00
	00 02		 cmp	 DWORD PTR [rax+848], 2
  01abf	0f 85 b8 00 00
	00		 jne	 $LN91@PxSocket_I
  01ac5	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  01acd	48 83 b8 f0 02
	00 00 00	 cmp	 QWORD PTR [rax+752], 0
  01ad5	0f 85 a2 00 00
	00		 jne	 $LN91@PxSocket_I

; 6389 :         /*
; 6390 :          * This code path will cover a newly connected client that's just sent
; 6391 :          * some data.
; 6392 :          */
; 6393 :         assert(s->recv_nbytes == 0);

  01adb	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  01ae3	48 83 b8 80 02
	00 00 00	 cmp	 QWORD PTR [rax+640], 0
  01aeb	74 1c		 je	 SHORT $LN281@PxSocket_I
  01aed	41 b8 f9 18 00
	00		 mov	 r8d, 6393		; 000018f9H
  01af3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  01afa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CI@PAAOKKFG@?$AAs?$AA?9?$AA?$DO?$AAr?$AAe?$AAc?$AAv?$AA_?$AAn?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@
  01b01	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  01b07	33 c0		 xor	 eax, eax
$LN281@PxSocket_I:

; 6394 :         assert(recv_nbytes == 0);

  01b09	83 7c 24 60 00	 cmp	 DWORD PTR recv_nbytes$[rsp], 0
  01b0e	74 1c		 je	 SHORT $LN282@PxSocket_I
  01b10	41 b8 fa 18 00
	00		 mov	 r8d, 6394		; 000018faH
  01b16	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  01b1d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CC@EBJGLGKP@?$AAr?$AAe?$AAc?$AAv?$AA_?$AAn?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@
  01b24	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  01b2a	33 c0		 xor	 eax, eax
$LN282@PxSocket_I:

; 6395 :         assert(s->recv_id == 0);

  01b2c	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  01b34	48 83 b8 70 02
	00 00 00	 cmp	 QWORD PTR [rax+624], 0
  01b3c	74 1c		 je	 SHORT $LN283@PxSocket_I
  01b3e	41 b8 fb 18 00
	00		 mov	 r8d, 6395		; 000018fbH
  01b44	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  01b4b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CA@MHMFLHCC@?$AAs?$AA?9?$AA?$DO?$AAr?$AAe?$AAc?$AAv?$AA_?$AAi?$AAd?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@
  01b52	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  01b58	33 c0		 xor	 eax, eax
$LN283@PxSocket_I:

; 6396 :         recv_nbytes = (DWORD)c->overlapped.InternalHigh;

  01b5a	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  01b62	8b 80 b8 32 00
	00		 mov	 eax, DWORD PTR [rax+12984]
  01b68	89 44 24 60	 mov	 DWORD PTR recv_nbytes$[rsp], eax

; 6397 :         if (recv_nbytes == 0)

  01b6c	83 7c 24 60 00	 cmp	 DWORD PTR recv_nbytes$[rsp], 0
  01b71	75 05		 jne	 SHORT $LN90@PxSocket_I

; 6398 :             goto connection_closed;

  01b73	e9 2a fe ff ff	 jmp	 $connection_closed$130622
$LN90@PxSocket_I:

; 6399 :         goto process_data_received;

  01b78	e9 8a 07 00 00	 jmp	 $process_data_received$130647
$LN91@PxSocket_I:
$do_recv$130648:

; 6400 :     }
; 6401 : 
; 6402 : do_recv:
; 6403 :     assert(!PxSocket_RECV_MORE(s));

  01b7d	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  01b85	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  01b8b	83 e0 08	 and	 eax, 8
  01b8e	85 c0		 test	 eax, eax
  01b90	74 1c		 je	 SHORT $LN284@PxSocket_I
  01b92	41 b8 03 19 00
	00		 mov	 r8d, 6403		; 00001903H
  01b98	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  01b9f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@DLADOB@?$AA?$CB?$AAP?$AAx?$AAS?$AAo?$AAc?$AAk?$AAe?$AAt?$AA_?$AAR?$AAE?$AAC?$AAV?$AA_?$AAM?$AAO?$AAR?$AAE?$AA?$CI?$AAs?$AA?$CJ?$AA?$AA@
  01ba6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  01bac	33 c0		 xor	 eax, eax
$LN284@PxSocket_I:

; 6404 :     assert(PxSocket_CAN_RECV(s));

  01bae	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  01bb6	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  01bbc	25 00 00 01 00	 and	 eax, 65536		; 00010000H
  01bc1	85 c0		 test	 eax, eax
  01bc3	75 1c		 jne	 SHORT $LN285@PxSocket_I
  01bc5	41 b8 04 19 00
	00		 mov	 r8d, 6404		; 00001904H
  01bcb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  01bd2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@HCOMLKJP@?$AAP?$AAx?$AAS?$AAo?$AAc?$AAk?$AAe?$AAt?$AA_?$AAC?$AAA?$AAN?$AA_?$AAR?$AAE?$AAC?$AAV?$AA?$CI?$AAs?$AA?$CJ?$AA?$AA@
  01bd9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  01bdf	33 c0		 xor	 eax, eax
$LN285@PxSocket_I:

; 6405 : 
; 6406 :     assert(!rbuf);

  01be1	48 83 bc 24 a0
	00 00 00 00	 cmp	 QWORD PTR rbuf$[rsp], 0
  01bea	74 1c		 je	 SHORT $LN286@PxSocket_I
  01bec	41 b8 06 19 00
	00		 mov	 r8d, 6406		; 00001906H
  01bf2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  01bf9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1M@CCGOGIMJ@?$AA?$CB?$AAr?$AAb?$AAu?$AAf?$AA?$AA@
  01c00	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  01c06	33 c0		 xor	 eax, eax
$LN286@PxSocket_I:

; 6407 :     assert(!w);

  01c08	48 83 7c 24 40
	00		 cmp	 QWORD PTR w$[rsp], 0
  01c0e	74 1c		 je	 SHORT $LN287@PxSocket_I
  01c10	41 b8 07 19 00
	00		 mov	 r8d, 6407		; 00001907H
  01c16	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  01c1d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_15HECFBAOK@?$AA?$CB?$AAw?$AA?$AA@
  01c24	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  01c2a	33 c0		 xor	 eax, eax
$LN287@PxSocket_I:

; 6408 :     assert(!snapshot);

  01c2c	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR snapshot$[rsp], 0
  01c35	74 1c		 je	 SHORT $LN288@PxSocket_I
  01c37	41 b8 08 19 00
	00		 mov	 r8d, 6408		; 00001908H
  01c3d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  01c44	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BE@IDILNNED@?$AA?$CB?$AAs?$AAn?$AAa?$AAp?$AAs?$AAh?$AAo?$AAt?$AA?$AA@
  01c4b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  01c51	33 c0		 xor	 eax, eax
$LN288@PxSocket_I:

; 6409 : 
; 6410 :     rbuf = s->rbuf;

  01c53	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  01c5b	48 8b 80 70 03
	00 00		 mov	 rax, QWORD PTR [rax+880]
  01c62	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR rbuf$[rsp], rax

; 6411 :     assert(!rbuf->snapshot);

  01c6a	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR rbuf$[rsp]
  01c72	48 83 78 10 00	 cmp	 QWORD PTR [rax+16], 0
  01c77	74 1c		 je	 SHORT $LN289@PxSocket_I
  01c79	41 b8 0b 19 00
	00		 mov	 r8d, 6411		; 0000190bH
  01c7f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  01c86	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CA@FFEMNDKF@?$AA?$CB?$AAr?$AAb?$AAu?$AAf?$AA?9?$AA?$DO?$AAs?$AAn?$AAa?$AAp?$AAs?$AAh?$AAo?$AAt?$AA?$AA@
  01c8d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  01c93	33 c0		 xor	 eax, eax
$LN289@PxSocket_I:

; 6412 :     w = &rbuf->w;

  01c95	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR rbuf$[rsp]
  01c9d	48 83 c0 40	 add	 rax, 64			; 00000040H
  01ca1	48 89 44 24 40	 mov	 QWORD PTR w$[rsp], rax

; 6413 :     /* Reset our rbuf. */
; 6414 :     w->len = s->recvbuf_size;

  01ca6	48 8b 44 24 40	 mov	 rax, QWORD PTR w$[rsp]
  01cab	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  01cb3	8b 89 60 02 00
	00		 mov	 ecx, DWORD PTR [rcx+608]
  01cb9	89 08		 mov	 DWORD PTR [rax], ecx

; 6415 :     w->buf = (char *)rbuf->ob_sval;

  01cbb	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR rbuf$[rsp]
  01cc3	48 05 e8 00 00
	00		 add	 rax, 232		; 000000e8H
  01cc9	48 8b 4c 24 40	 mov	 rcx, QWORD PTR w$[rsp]
  01cce	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 6416 : 
; 6417 :     s->io_op = PxSocket_IO_RECV;

  01cd2	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  01cda	c7 80 50 03 00
	00 04 00 00 00	 mov	 DWORD PTR [rax+848], 4

; 6418 :     c->io_result = NO_ERROR;

  01ce4	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  01cec	c7 80 94 32 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+12948], 0

; 6419 : 
; 6420 :     if (PxSocket_THROUGHPUT(s)) {

  01cf6	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  01cfe	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  01d04	83 e0 40	 and	 eax, 64			; 00000040H
  01d07	85 c0		 test	 eax, eax
  01d09	74 14		 je	 SHORT $LN89@PxSocket_I

; 6421 :         n = s->max_sync_recv_attempts;

  01d0b	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  01d13	8b 80 14 03 00
	00		 mov	 eax, DWORD PTR [rax+788]
  01d19	89 44 24 64	 mov	 DWORD PTR n$[rsp], eax

; 6422 :         goto try_synchronous_recv;

  01d1d	eb 3d		 jmp	 SHORT $try_synchronous_recv$130665
$LN89@PxSocket_I:

; 6423 :     }
; 6424 : 
; 6425 :     n = 1;

  01d1f	c7 44 24 64 01
	00 00 00	 mov	 DWORD PTR n$[rsp], 1

; 6426 :     if (_PxSocket_ActiveIOLoops >= _PyParallel_NumCPUs-1)

  01d27	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR _PyParallel_NumCPUs
  01d2d	ff c8		 dec	 eax
  01d2f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _PxSocket_ActiveIOLoops
  01d35	3b c8		 cmp	 ecx, eax
  01d37	7c 07		 jl	 SHORT $LN88@PxSocket_I

; 6427 :         goto do_async_recv;

  01d39	e9 fc 01 00 00	 jmp	 $do_async_recv$130667
  01d3e	eb 1c		 jmp	 SHORT $LN87@PxSocket_I
$LN88@PxSocket_I:

; 6428 :     else if (PxSocket_CONCURRENCY(s))

  01d40	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  01d48	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  01d4e	25 00 08 00 00	 and	 eax, 2048		; 00000800H
  01d53	85 c0		 test	 eax, eax
  01d55	74 05		 je	 SHORT $LN86@PxSocket_I

; 6429 :         goto do_async_recv;

  01d57	e9 de 01 00 00	 jmp	 $do_async_recv$130667
$LN86@PxSocket_I:
$LN87@PxSocket_I:
$try_synchronous_recv$130665:

; 6430 : 
; 6431 : try_synchronous_recv:
; 6432 :     s->recv_id++;

  01d5c	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  01d64	48 8b 80 70 02
	00 00		 mov	 rax, QWORD PTR [rax+624]
  01d6b	48 ff c0	 inc	 rax
  01d6e	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  01d76	48 89 81 70 02
	00 00		 mov	 QWORD PTR [rcx+624], rax

; 6433 : 
; 6434 :     /*
; 6435 :      * Again, this next chunk of code reuses the same pattern employed by
; 6436 :      * try_synchronous_recv:.
; 6437 :      */
; 6438 : 
; 6439 :     assert(recv_flags == 0);

  01d7d	83 bc 24 98 00
	00 00 00	 cmp	 DWORD PTR recv_flags$[rsp], 0
  01d85	74 1c		 je	 SHORT $LN290@PxSocket_I
  01d87	41 b8 27 19 00
	00		 mov	 r8d, 6439		; 00001927H
  01d8d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  01d94	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CA@HPDFKAIE@?$AAr?$AAe?$AAc?$AAv?$AA_?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@
  01d9b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  01da1	33 c0		 xor	 eax, eax
$LN290@PxSocket_I:

; 6440 :     assert(recv_nbytes == 0);

  01da3	83 7c 24 60 00	 cmp	 DWORD PTR recv_nbytes$[rsp], 0
  01da8	74 1c		 je	 SHORT $LN291@PxSocket_I
  01daa	41 b8 28 19 00
	00		 mov	 r8d, 6440		; 00001928H
  01db0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  01db7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CC@EBJGLGKP@?$AAr?$AAe?$AAc?$AAv?$AA_?$AAn?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@
  01dbe	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  01dc4	33 c0		 xor	 eax, eax
$LN291@PxSocket_I:

; 6441 : 
; 6442 :     err = SOCKET_ERROR;

  01dc6	c7 84 24 d8 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR err$[rsp], -1	; ffffffffH

; 6443 :     wsa_error = NO_ERROR;

  01dd1	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR wsa_error$[rsp], 0

; 6444 :     for (i = 1; i <= n; i++) {

  01dd9	c7 44 24 68 01
	00 00 00	 mov	 DWORD PTR i$[rsp], 1
  01de1	eb 0a		 jmp	 SHORT $LN85@PxSocket_I
$LN84@PxSocket_I:
  01de3	8b 44 24 68	 mov	 eax, DWORD PTR i$[rsp]
  01de7	ff c0		 inc	 eax
  01de9	89 44 24 68	 mov	 DWORD PTR i$[rsp], eax
$LN85@PxSocket_I:
  01ded	8b 44 24 64	 mov	 eax, DWORD PTR n$[rsp]
  01df1	39 44 24 68	 cmp	 DWORD PTR i$[rsp], eax
  01df5	0f 8f 81 00 00
	00		 jg	 $LN83@PxSocket_I

; 6445 :         err = WSARecv(fd, w, 1, &recv_nbytes, &recv_flags, 0, 0);

  01dfb	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR [rsp+48], 0
  01e04	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR [rsp+40], 0
  01e0d	48 8d 84 24 98
	00 00 00	 lea	 rax, QWORD PTR recv_flags$[rsp]
  01e15	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01e1a	4c 8d 4c 24 60	 lea	 r9, QWORD PTR recv_nbytes$[rsp]
  01e1f	41 b8 01 00 00
	00		 mov	 r8d, 1
  01e25	48 8b 54 24 40	 mov	 rdx, QWORD PTR w$[rsp]
  01e2a	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR fd$[rsp]
  01e32	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WSARecv
  01e38	89 84 24 d8 00
	00 00		 mov	 DWORD PTR err$[rsp], eax

; 6446 :         if (err == SOCKET_ERROR) {

  01e3f	83 bc 24 d8 00
	00 00 ff	 cmp	 DWORD PTR err$[rsp], -1	; ffffffffH
  01e47	75 2c		 jne	 SHORT $LN82@PxSocket_I

; 6447 :             wsa_error = WSAGetLastError();

  01e49	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WSAGetLastError
  01e4f	89 44 24 48	 mov	 DWORD PTR wsa_error$[rsp], eax

; 6448 :             if (wsa_error == WSAEWOULDBLOCK && i < n)

  01e53	81 7c 24 48 33
	27 00 00	 cmp	 DWORD PTR wsa_error$[rsp], 10035 ; 00002733H
  01e5b	75 14		 jne	 SHORT $LN81@PxSocket_I
  01e5d	8b 44 24 64	 mov	 eax, DWORD PTR n$[rsp]
  01e61	39 44 24 68	 cmp	 DWORD PTR i$[rsp], eax
  01e65	7d 0a		 jge	 SHORT $LN81@PxSocket_I

; 6449 :                 Sleep(0);

  01e67	33 c9		 xor	 ecx, ecx
  01e69	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_Sleep

; 6450 :             else

  01e6f	eb 02		 jmp	 SHORT $LN80@PxSocket_I
$LN81@PxSocket_I:

; 6451 :                 break;

  01e71	eb 09		 jmp	 SHORT $LN83@PxSocket_I
$LN80@PxSocket_I:

; 6452 :         } else

  01e73	eb 02		 jmp	 SHORT $LN79@PxSocket_I
$LN82@PxSocket_I:

; 6453 :             break;

  01e75	eb 05		 jmp	 SHORT $LN83@PxSocket_I
$LN79@PxSocket_I:

; 6454 :     }

  01e77	e9 67 ff ff ff	 jmp	 $LN84@PxSocket_I
$LN83@PxSocket_I:

; 6455 : 
; 6456 :     if (err != SOCKET_ERROR) {

  01e7c	83 bc 24 d8 00
	00 00 ff	 cmp	 DWORD PTR err$[rsp], -1	; ffffffffH
  01e84	74 28		 je	 SHORT $LN78@PxSocket_I

; 6457 :         /* Receive completed synchronously. */
; 6458 :         if (recv_nbytes == 0)

  01e86	83 7c 24 60 00	 cmp	 DWORD PTR recv_nbytes$[rsp], 0
  01e8b	75 05		 jne	 SHORT $LN77@PxSocket_I

; 6459 :             goto connection_closed;

  01e8d	e9 10 fb ff ff	 jmp	 $connection_closed$130622
$LN77@PxSocket_I:

; 6460 :         w = NULL;

  01e92	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR w$[rsp], 0

; 6461 :         rbuf = NULL;

  01e9b	48 c7 84 24 a0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR rbuf$[rsp], 0

; 6462 :         goto process_data_received;

  01ea7	e9 5b 04 00 00	 jmp	 $process_data_received$130647
  01eac	eb 6a		 jmp	 SHORT $LN76@PxSocket_I
$LN78@PxSocket_I:

; 6463 :     } else if (wsa_error == WSAEWOULDBLOCK) {

  01eae	81 7c 24 48 33
	27 00 00	 cmp	 DWORD PTR wsa_error$[rsp], 10035 ; 00002733H
  01eb6	75 25		 jne	 SHORT $LN75@PxSocket_I

; 6464 :         s->recv_id--;

  01eb8	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  01ec0	48 8b 80 70 02
	00 00		 mov	 rax, QWORD PTR [rax+624]
  01ec7	48 ff c8	 dec	 rax
  01eca	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  01ed2	48 89 81 70 02
	00 00		 mov	 QWORD PTR [rcx+624], rax

; 6465 :         goto do_async_recv;

  01ed9	eb 5f		 jmp	 SHORT $do_async_recv$130667

; 6466 :     } else {

  01edb	eb 3b		 jmp	 SHORT $LN74@PxSocket_I
$LN75@PxSocket_I:

; 6467 :         /* xxx todo: check if we were in the middle of a multipart recv. */
; 6468 :         s->recv_id--;

  01edd	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  01ee5	48 8b 80 70 02
	00 00		 mov	 rax, QWORD PTR [rax+624]
  01eec	48 ff c8	 dec	 rax
  01eef	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  01ef7	48 89 81 70 02
	00 00		 mov	 QWORD PTR [rcx+624], rax

; 6469 :         /*
; 6470 :         assert(rbuf->snapshot);
; 6471 :         PxContext_RollbackHeap(c, &rbuf->snapshot);
; 6472 :         */
; 6473 :         w = NULL;

  01efe	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR w$[rsp], 0

; 6474 :         rbuf = NULL;

  01f07	48 c7 84 24 a0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR rbuf$[rsp], 0

; 6475 :         goto recv_failed;

  01f13	e9 ff 10 00 00	 jmp	 $recv_failed$130690
$LN74@PxSocket_I:
$LN76@PxSocket_I:

; 6476 :     }
; 6477 : 
; 6478 :     assert(0);

  01f18	33 c0		 xor	 eax, eax
  01f1a	85 c0		 test	 eax, eax
  01f1c	75 1c		 jne	 SHORT $LN292@PxSocket_I
  01f1e	41 b8 4e 19 00
	00		 mov	 r8d, 6478		; 0000194eH
  01f24	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  01f2b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_13COJANIEC@?$AA0?$AA?$AA@
  01f32	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  01f38	33 c0		 xor	 eax, eax
$LN292@PxSocket_I:
$do_async_recv$130667:

; 6479 : 
; 6480 : do_async_recv:
; 6481 :     assert(rbuf);

  01f3a	48 83 bc 24 a0
	00 00 00 00	 cmp	 QWORD PTR rbuf$[rsp], 0
  01f43	75 1c		 jne	 SHORT $LN293@PxSocket_I
  01f45	41 b8 51 19 00
	00		 mov	 r8d, 6481		; 00001951H
  01f4b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  01f52	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_19DJKFFBEH@?$AAr?$AAb?$AAu?$AAf?$AA?$AA@
  01f59	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  01f5f	33 c0		 xor	 eax, eax
$LN293@PxSocket_I:

; 6482 :     assert(w);

  01f61	48 83 7c 24 40
	00		 cmp	 QWORD PTR w$[rsp], 0
  01f67	75 1c		 jne	 SHORT $LN294@PxSocket_I
  01f69	41 b8 52 19 00
	00		 mov	 r8d, 6482		; 00001952H
  01f6f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  01f76	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_13CIFDLIMG@?$AAw?$AA?$AA@
  01f7d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  01f83	33 c0		 xor	 eax, eax
$LN294@PxSocket_I:

; 6483 : 
; 6484 :     /*if (s->recv_id % 10000 == 0)
; 6485 :         printf("\ntrying sync recv for client %d/%d\n",
; 6486 :            s->child_id, s->sock_fd);*/
; 6487 : 
; 6488 :     if (!s->tp_io) {

  01f85	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  01f8d	48 83 b8 58 03
	00 00 00	 cmp	 QWORD PTR [rax+856], 0
  01f95	0f 85 af 00 00
	00		 jne	 $LN73@PxSocket_I

; 6489 :         PTP_WIN32_IO_CALLBACK cb = PxSocketClient_Callback;

  01f9b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PxSocketClient_Callback
  01fa2	48 89 84 24 48
	01 00 00	 mov	 QWORD PTR cb$130697[rsp], rax

; 6490 :         /* I don't know off the top of my head if we need to assert any state
; 6491 :          * flags here like we do in `do_async_send:' as there are more entry
; 6492 :          * point variations for this code. */
; 6493 :         /*assert(Px_SOCKFLAGS(s) & Px_SOCKFLAGS_SENDING_INITIAL_BYTES);*/
; 6494 :         s->tp_io = CreateThreadpoolIo((HANDLE)s->sock_fd, cb, c, NULL);

  01faa	45 33 c9	 xor	 r9d, r9d
  01fad	4c 8b 84 24 e0
	00 00 00	 mov	 r8, QWORD PTR c$[rsp]
  01fb5	48 8b 94 24 48
	01 00 00	 mov	 rdx, QWORD PTR cb$130697[rsp]
  01fbd	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  01fc5	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  01fc9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateThreadpoolIo
  01fcf	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  01fd7	48 89 81 58 03
	00 00		 mov	 QWORD PTR [rcx+856], rax

; 6495 :         if (!s->tp_io) {

  01fde	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  01fe6	48 83 b8 58 03
	00 00 00	 cmp	 QWORD PTR [rax+856], 0
  01fee	75 5a		 jne	 SHORT $LN72@PxSocket_I

; 6496 :             closesocket(s->sock_fd);

  01ff0	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  01ff8	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  01ffc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_closesocket

; 6497 :             PxContext_RollbackHeap(c, &rbuf->snapshot);

  02002	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR rbuf$[rsp]
  0200a	48 83 c0 10	 add	 rax, 16
  0200e	48 8b d0	 mov	 rdx, rax
  02011	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  02019	e8 00 00 00 00	 call	 PxContext_RollbackHeap
$LN71@PxSocket_I:

; 6498 :             PxSocket_SYSERROR("CreateThreadpoolIo");

  0201e	33 c9		 xor	 ecx, ecx
  02020	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
  02025	41 b8 01 00 00
	00		 mov	 r8d, 1
  0202b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@BIALAGNA@CreateThreadpoolIo?$AA@
  02032	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  0203a	e8 00 00 00 00	 call	 PxSocket_HandleException
  0203f	e9 ef 14 00 00	 jmp	 $end$130364
  02044	33 c0		 xor	 eax, eax
  02046	85 c0		 test	 eax, eax
  02048	75 d4		 jne	 SHORT $LN71@PxSocket_I
$LN72@PxSocket_I:
$LN73@PxSocket_I:

; 6499 :         }
; 6500 :     }
; 6501 : 
; 6502 :     s->recv_id++;

  0204a	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  02052	48 8b 80 70 02
	00 00		 mov	 rax, QWORD PTR [rax+624]
  02059	48 ff c0	 inc	 rax
  0205c	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  02064	48 89 81 70 02
	00 00		 mov	 QWORD PTR [rcx+624], rax

; 6503 :     StartThreadpoolIo(s->tp_io);

  0206b	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  02073	48 8b 88 58 03
	00 00		 mov	 rcx, QWORD PTR [rax+856]
  0207a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_StartThreadpoolIo

; 6504 :     s->ol = &rbuf->ol;

  02080	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR rbuf$[rsp]
  02088	48 83 c0 20	 add	 rax, 32			; 00000020H
  0208c	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  02094	48 89 81 80 03
	00 00		 mov	 QWORD PTR [rcx+896], rax

; 6505 :     RESET_OVERLAPPED(s->ol);

  0209b	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  020a3	48 8b 88 80 03
	00 00		 mov	 rcx, QWORD PTR [rax+896]
  020aa	e8 00 00 00 00	 call	 _RESET_OVERLAPPED

; 6506 : 
; 6507 :     err = WSARecv(fd, w, 1, 0, &recv_flags, s->ol, NULL);

  020af	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR [rsp+48], 0
  020b8	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  020c0	48 8b 80 80 03
	00 00		 mov	 rax, QWORD PTR [rax+896]
  020c7	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  020cc	48 8d 84 24 98
	00 00 00	 lea	 rax, QWORD PTR recv_flags$[rsp]
  020d4	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  020d9	45 33 c9	 xor	 r9d, r9d
  020dc	41 b8 01 00 00
	00		 mov	 r8d, 1
  020e2	48 8b 54 24 40	 mov	 rdx, QWORD PTR w$[rsp]
  020e7	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR fd$[rsp]
  020ef	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WSARecv
  020f5	89 84 24 d8 00
	00 00		 mov	 DWORD PTR err$[rsp], eax

; 6508 :     if (err == NO_ERROR) {

  020fc	83 bc 24 d8 00
	00 00 00	 cmp	 DWORD PTR err$[rsp], 0
  02104	75 07		 jne	 SHORT $LN68@PxSocket_I

; 6509 :         /* Recv completed synchronously.  Completion packet will be queued. */
; 6510 :         goto end;

  02106	e9 28 14 00 00	 jmp	 $end$130364

; 6511 :     } else {

  0210b	eb 6a		 jmp	 SHORT $LN67@PxSocket_I
$LN68@PxSocket_I:

; 6512 :         wsa_error = WSAGetLastError();

  0210d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WSAGetLastError
  02113	89 44 24 48	 mov	 DWORD PTR wsa_error$[rsp], eax

; 6513 :         if (wsa_error == WSA_IO_PENDING)

  02117	81 7c 24 48 e5
	03 00 00	 cmp	 DWORD PTR wsa_error$[rsp], 997 ; 000003e5H
  0211f	75 05		 jne	 SHORT $LN66@PxSocket_I

; 6514 :             /* Overlapped IO successfully initiated; completion packet will be
; 6515 :              * queued once data is received or an error occurs. */
; 6516 :             goto end;

  02121	e9 0d 14 00 00	 jmp	 $end$130364
$LN66@PxSocket_I:

; 6517 : 
; 6518 :         /* Overlapped receive attempt failed.  No completion packet will be
; 6519 :          * queued, so we need to take care of cleanup here. */
; 6520 :         if (rbuf->snapshot)

  02126	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR rbuf$[rsp]
  0212e	48 83 78 10 00	 cmp	 QWORD PTR [rax+16], 0
  02133	74 1c		 je	 SHORT $LN65@PxSocket_I

; 6521 :             PxContext_RollbackHeap(c, &rbuf->snapshot);

  02135	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR rbuf$[rsp]
  0213d	48 83 c0 10	 add	 rax, 16
  02141	48 8b d0	 mov	 rdx, rax
  02144	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  0214c	e8 00 00 00 00	 call	 PxContext_RollbackHeap
$LN65@PxSocket_I:

; 6522 :         s->recv_id--;

  02151	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  02159	48 8b 80 70 02
	00 00		 mov	 rax, QWORD PTR [rax+624]
  02160	48 ff c8	 dec	 rax
  02163	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  0216b	48 89 81 70 02
	00 00		 mov	 QWORD PTR [rcx+624], rax

; 6523 :         goto recv_failed;

  02172	e9 a0 0e 00 00	 jmp	 $recv_failed$130690
$LN67@PxSocket_I:

; 6524 :     }
; 6525 : 
; 6526 :     assert(0);

  02177	33 c0		 xor	 eax, eax
  02179	85 c0		 test	 eax, eax
  0217b	75 1c		 jne	 SHORT $LN295@PxSocket_I
  0217d	41 b8 7e 19 00
	00		 mov	 r8d, 6526		; 0000197eH
  02183	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0218a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_13COJANIEC@?$AA0?$AA?$AA@
  02191	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  02197	33 c0		 xor	 eax, eax
$LN295@PxSocket_I:
$overlapped_recv_callback$130327:

; 6527 : 
; 6528 : overlapped_recv_callback:
; 6529 :     /* Entry point for an overlapped recv. */
; 6530 :     assert(!snapshot);

  02199	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR snapshot$[rsp], 0
  021a2	74 1c		 je	 SHORT $LN296@PxSocket_I
  021a4	41 b8 82 19 00
	00		 mov	 r8d, 6530		; 00001982H
  021aa	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  021b1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BE@IDILNNED@?$AA?$CB?$AAs?$AAn?$AAa?$AAp?$AAs?$AAh?$AAo?$AAt?$AA?$AA@
  021b8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  021be	33 c0		 xor	 eax, eax
$LN296@PxSocket_I:

; 6531 :     rbuf = s->rbuf;

  021c0	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  021c8	48 8b 80 70 03
	00 00		 mov	 rax, QWORD PTR [rax+880]
  021cf	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR rbuf$[rsp], rax

; 6532 :     assert(c->ol == s->ol);

  021d7	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  021df	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  021e7	48 8b 89 80 03
	00 00		 mov	 rcx, QWORD PTR [rcx+896]
  021ee	48 39 88 d0 32
	00 00		 cmp	 QWORD PTR [rax+13008], rcx
  021f5	74 1c		 je	 SHORT $LN297@PxSocket_I
  021f7	41 b8 84 19 00
	00		 mov	 r8d, 6532		; 00001984H
  021fd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  02204	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BO@PDILFDEN@?$AAc?$AA?9?$AA?$DO?$AAo?$AAl?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAs?$AA?9?$AA?$DO?$AAo?$AAl?$AA?$AA@
  0220b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  02211	33 c0		 xor	 eax, eax
$LN297@PxSocket_I:

; 6533 :     assert(s->ol == &rbuf->ol);

  02213	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR rbuf$[rsp]
  0221b	48 83 c0 20	 add	 rax, 32			; 00000020H
  0221f	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  02227	48 39 81 80 03
	00 00		 cmp	 QWORD PTR [rcx+896], rax
  0222e	74 1c		 je	 SHORT $LN298@PxSocket_I
  02230	41 b8 85 19 00
	00		 mov	 r8d, 6533		; 00001985H
  02236	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0223d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@GBGOGDPA@?$AAs?$AA?9?$AA?$DO?$AAo?$AAl?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA?$CG?$AAr?$AAb?$AAu?$AAf?$AA?9?$AA?$DO?$AAo?$AAl?$AA?$AA@
  02244	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0224a	33 c0		 xor	 eax, eax
$LN298@PxSocket_I:

; 6534 :     wsa_error = c->io_result;

  0224c	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  02254	8b 80 94 32 00
	00		 mov	 eax, DWORD PTR [rax+12948]
  0225a	89 44 24 48	 mov	 DWORD PTR wsa_error$[rsp], eax

; 6535 : 
; 6536 :     if (wsa_error != NO_ERROR) {

  0225e	83 7c 24 48 00	 cmp	 DWORD PTR wsa_error$[rsp], 0
  02263	74 51		 je	 SHORT $LN64@PxSocket_I

; 6537 :         s->recv_id--;

  02265	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  0226d	48 8b 80 70 02
	00 00		 mov	 rax, QWORD PTR [rax+624]
  02274	48 ff c8	 dec	 rax
  02277	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  0227f	48 89 81 70 02
	00 00		 mov	 QWORD PTR [rcx+624], rax

; 6538 :         if (rbuf->snapshot)

  02286	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR rbuf$[rsp]
  0228e	48 83 78 10 00	 cmp	 QWORD PTR [rax+16], 0
  02293	74 1c		 je	 SHORT $LN63@PxSocket_I

; 6539 :             PxContext_RollbackHeap(c, &rbuf->snapshot);

  02295	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR rbuf$[rsp]
  0229d	48 83 c0 10	 add	 rax, 16
  022a1	48 8b d0	 mov	 rdx, rax
  022a4	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  022ac	e8 00 00 00 00	 call	 PxContext_RollbackHeap
$LN63@PxSocket_I:

; 6540 :         goto recv_failed;

  022b1	e9 61 0d 00 00	 jmp	 $recv_failed$130690
$LN64@PxSocket_I:

; 6541 :     }
; 6542 :     rbuf = NULL;

  022b6	48 c7 84 24 a0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR rbuf$[rsp], 0

; 6543 : 
; 6544 :     assert(recv_nbytes == 0);

  022c2	83 7c 24 60 00	 cmp	 DWORD PTR recv_nbytes$[rsp], 0
  022c7	74 1c		 je	 SHORT $LN299@PxSocket_I
  022c9	41 b8 90 19 00
	00		 mov	 r8d, 6544		; 00001990H
  022cf	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  022d6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CC@EBJGLGKP@?$AAr?$AAe?$AAc?$AAv?$AA_?$AAn?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@
  022dd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  022e3	33 c0		 xor	 eax, eax
$LN299@PxSocket_I:

; 6545 :     recv_nbytes = (DWORD)s->ol->InternalHigh;

  022e5	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  022ed	48 8b 80 80 03
	00 00		 mov	 rax, QWORD PTR [rax+896]
  022f4	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  022f7	89 44 24 60	 mov	 DWORD PTR recv_nbytes$[rsp], eax

; 6546 :     if (recv_nbytes == 0)

  022fb	83 7c 24 60 00	 cmp	 DWORD PTR recv_nbytes$[rsp], 0
  02300	75 05		 jne	 SHORT $LN62@PxSocket_I

; 6547 :         goto connection_closed;

  02302	e9 9b f6 ff ff	 jmp	 $connection_closed$130622
$LN62@PxSocket_I:
$process_data_received$130647:

; 6548 : 
; 6549 :     /* Intentional follow-on to process_data_received... */
; 6550 : 
; 6551 : process_data_received:
; 6552 :     /*
; 6553 :      * So, this is the point where we need to check the data we've received
; 6554 :      * for the sole purpose of seeing if we need to a) receive more data, or
; 6555 :      * b) invoke the protocol's (data|line)_received callback with the data.
; 6556 :      *
; 6557 :      * The former situation will occur when receive filters have been set on
; 6558 :      * the protocol, such as 'lines_mode' (we keep recv'ing until we find a
; 6559 :      * linebreak) or one of the 'expect_*' filters (expect_command, expect_
; 6560 :      * regex etc).  Or any number of other filters that allow us to determine
; 6561 :      * within C code (i.e. within this IO loop) whether or not we've received
; 6562 :      * enough data (without the need to call back into Python).
; 6563 :      *
; 6564 :      * Now, with all that being said, none of that functionality is
; 6565 :      * implemented yet, so the code below simply unsets the 'receive more'
; 6566 :      * flag and continues on to 'do data received callback'.
; 6567 :      *
; 6568 :      * (Which is why the next two lines look retarded.)
; 6569 :      */
; 6570 :     Px_SOCKFLAGS(s) &= ~Px_SOCKFLAGS_RECV_MORE;

  02307	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  0230f	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  02315	83 e0 f7	 and	 eax, -9			; fffffff7H
  02318	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  02320	89 81 f4 01 00
	00		 mov	 DWORD PTR [rcx+500], eax
$do_data_received_callback$130722:

; 6571 : 
; 6572 :     goto do_data_received_callback;
; 6573 : 
; 6574 : do_data_received_callback:
; 6575 : 
; 6576 :     assert(recv_nbytes > 0);

  02326	83 7c 24 60 00	 cmp	 DWORD PTR recv_nbytes$[rsp], 0
  0232b	77 1c		 ja	 SHORT $LN300@PxSocket_I
  0232d	41 b8 b0 19 00
	00		 mov	 r8d, 6576		; 000019b0H
  02333	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0233a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CA@KANJEHAG@?$AAr?$AAe?$AAc?$AAv?$AA_?$AAn?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@
  02341	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  02347	33 c0		 xor	 eax, eax
$LN300@PxSocket_I:

; 6577 :     s->recv_nbytes += recv_nbytes;

  02349	8b 44 24 60	 mov	 eax, DWORD PTR recv_nbytes$[rsp]
  0234d	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  02355	48 03 81 80 02
	00 00		 add	 rax, QWORD PTR [rcx+640]
  0235c	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  02364	48 89 81 80 02
	00 00		 mov	 QWORD PTR [rcx+640], rax

; 6578 : 
; 6579 :     assert(!rbuf);

  0236b	48 83 bc 24 a0
	00 00 00 00	 cmp	 QWORD PTR rbuf$[rsp], 0
  02374	74 1c		 je	 SHORT $LN301@PxSocket_I
  02376	41 b8 b3 19 00
	00		 mov	 r8d, 6579		; 000019b3H
  0237c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  02383	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1M@CCGOGIMJ@?$AA?$CB?$AAr?$AAb?$AAu?$AAf?$AA?$AA@
  0238a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  02390	33 c0		 xor	 eax, eax
$LN301@PxSocket_I:

; 6580 :     rbuf = s->rbuf;

  02392	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  0239a	48 8b 80 70 03
	00 00		 mov	 rax, QWORD PTR [rax+880]
  023a1	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR rbuf$[rsp], rax

; 6581 :     assert(!rbuf->snapshot);

  023a9	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR rbuf$[rsp]
  023b1	48 83 78 10 00	 cmp	 QWORD PTR [rax+16], 0
  023b6	74 1c		 je	 SHORT $LN302@PxSocket_I
  023b8	41 b8 b5 19 00
	00		 mov	 r8d, 6581		; 000019b5H
  023be	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  023c5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CA@FFEMNDKF@?$AA?$CB?$AAr?$AAb?$AAu?$AAf?$AA?9?$AA?$DO?$AAs?$AAn?$AAa?$AAp?$AAs?$AAh?$AAo?$AAt?$AA?$AA@
  023cc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  023d2	33 c0		 xor	 eax, eax
$LN302@PxSocket_I:

; 6582 : 
; 6583 :     if (recv_nbytes < (DWORD)s->recvbuf_size)

  023d4	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  023dc	8b 80 60 02 00
	00		 mov	 eax, DWORD PTR [rax+608]
  023e2	39 44 24 60	 cmp	 DWORD PTR recv_nbytes$[rsp], eax
  023e6	73 14		 jae	 SHORT $LN61@PxSocket_I

; 6584 :         rbuf->ob_sval[recv_nbytes] = 0;

  023e8	8b 44 24 60	 mov	 eax, DWORD PTR recv_nbytes$[rsp]
  023ec	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR rbuf$[rsp]
  023f4	c6 84 01 e8 00
	00 00 00	 mov	 BYTE PTR [rcx+rax+232], 0
$LN61@PxSocket_I:

; 6585 : 
; 6586 :     if (PxSocket_LINES_MODE_ACTIVE(s))

  023fc	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  02404	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  0240a	25 00 40 00 00	 and	 eax, 16384		; 00004000H
  0240f	85 c0		 test	 eax, eax
  02411	74 05		 je	 SHORT $LN60@PxSocket_I

; 6587 :         goto do_lines_received_callback;

  02413	e9 78 09 00 00	 jmp	 $do_lines_received_callback$130731
$LN60@PxSocket_I:

; 6588 : 
; 6589 :     assert(!rbuf->snapshot);

  02418	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR rbuf$[rsp]
  02420	48 83 78 10 00	 cmp	 QWORD PTR [rax+16], 0
  02425	74 1c		 je	 SHORT $LN303@PxSocket_I
  02427	41 b8 bd 19 00
	00		 mov	 r8d, 6589		; 000019bdH
  0242d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  02434	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CA@FFEMNDKF@?$AA?$CB?$AAr?$AAb?$AAu?$AAf?$AA?9?$AA?$DO?$AAs?$AAn?$AAa?$AAp?$AAs?$AAh?$AAo?$AAt?$AA?$AA@
  0243b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  02441	33 c0		 xor	 eax, eax
$LN303@PxSocket_I:

; 6590 :     rbuf->snapshot = PxContext_HeapSnapshot(c, NULL);

  02443	33 d2		 xor	 edx, edx
  02445	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  0244d	e8 00 00 00 00	 call	 PxContext_HeapSnapshot
  02452	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR rbuf$[rsp]
  0245a	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 6591 : 
; 6592 :     func = s->data_received;

  0245e	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  02466	48 8b 80 c8 02
	00 00		 mov	 rax, QWORD PTR [rax+712]
  0246d	48 89 84 24 08
	01 00 00	 mov	 QWORD PTR func$[rsp], rax

; 6593 :     assert(func);

  02475	48 83 bc 24 08
	01 00 00 00	 cmp	 QWORD PTR func$[rsp], 0
  0247e	75 1c		 jne	 SHORT $LN304@PxSocket_I
  02480	41 b8 c1 19 00
	00		 mov	 r8d, 6593		; 000019c1H
  02486	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0248d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_19DPFBEKIN@?$AAf?$AAu?$AAn?$AAc?$AA?$AA@
  02494	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0249a	33 c0		 xor	 eax, eax
$LN304@PxSocket_I:

; 6594 : 
; 6595 :     /* For now, num_rbufs should only ever be 1. */
; 6596 :     assert(s->num_rbufs == 1);

  0249c	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  024a4	83 b8 78 03 00
	00 01		 cmp	 DWORD PTR [rax+888], 1
  024ab	74 1c		 je	 SHORT $LN305@PxSocket_I
  024ad	41 b8 c4 19 00
	00		 mov	 r8d, 6596		; 000019c4H
  024b3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  024ba	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CE@PGCKLFKB@?$AAs?$AA?9?$AA?$DO?$AAn?$AAu?$AAm?$AA_?$AAr?$AAb?$AAu?$AAf?$AAs?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA1?$AA?$AA@
  024c1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  024c7	33 c0		 xor	 eax, eax
$LN305@PxSocket_I:

; 6597 :     if (s->num_rbufs == 1) {

  024c9	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  024d1	83 b8 78 03 00
	00 01		 cmp	 DWORD PTR [rax+888], 1
  024d8	0f 85 5b 01 00
	00		 jne	 $LN59@PxSocket_I

; 6598 :         PyObject *n;
; 6599 :         PyObject *o;
; 6600 :         PyTypeObject *tp = &PyBytes_Type;

  024de	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyBytes_Type
  024e5	48 89 84 24 58
	01 00 00	 mov	 QWORD PTR tp$130740[rsp], rax

; 6601 :         bytes = R2B(rbuf);

  024ed	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR rbuf$[rsp]
  024f5	48 83 c0 70	 add	 rax, 112		; 00000070H
  024f9	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR bytes$[rsp], rax

; 6602 :         o = (PyObject *)bytes;

  02501	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR bytes$[rsp]
  02509	48 89 84 24 60
	01 00 00	 mov	 QWORD PTR o$130739[rsp], rax

; 6603 :         Py_PXFLAGS(bytes) = Py_PXFLAGS_MIMIC;

  02511	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR bytes$[rsp]
  02519	48 c7 40 20 00
	02 00 00	 mov	 QWORD PTR [rax+32], 512	; 00000200H

; 6604 :         n = init_object(c, o, tp, recv_nbytes);

  02521	8b 44 24 60	 mov	 eax, DWORD PTR recv_nbytes$[rsp]
  02525	44 8b c8	 mov	 r9d, eax
  02528	4c 8b 84 24 58
	01 00 00	 mov	 r8, QWORD PTR tp$130740[rsp]
  02530	48 8b 94 24 60
	01 00 00	 mov	 rdx, QWORD PTR o$130739[rsp]
  02538	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  02540	e8 00 00 00 00	 call	 init_object
  02545	48 89 84 24 50
	01 00 00	 mov	 QWORD PTR n$130738[rsp], rax

; 6605 :         assert(n == o);

  0254d	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR o$130739[rsp]
  02555	48 39 84 24 50
	01 00 00	 cmp	 QWORD PTR n$130738[rsp], rax
  0255d	74 1c		 je	 SHORT $LN306@PxSocket_I
  0255f	41 b8 cd 19 00
	00		 mov	 r8d, 6605		; 000019cdH
  02565	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0256c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1O@JGBPCKCO@?$AAn?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAo?$AA?$AA@
  02573	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  02579	33 c0		 xor	 eax, eax
$LN306@PxSocket_I:

; 6606 :         assert(Py_SIZE(bytes) == recv_nbytes);

  0257b	8b 44 24 60	 mov	 eax, DWORD PTR recv_nbytes$[rsp]
  0257f	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR bytes$[rsp]
  02587	48 39 41 60	 cmp	 QWORD PTR [rcx+96], rax
  0258b	74 1c		 je	 SHORT $LN307@PxSocket_I
  0258d	41 b8 ce 19 00
	00		 mov	 r8d, 6606		; 000019ceH
  02593	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0259a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DM@OPIDLANA@?$AAP?$AAy?$AA_?$AAS?$AAI?$AAZ?$AAE?$AA?$CI?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAr?$AAe?$AAc?$AAv?$AA_?$AAn?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?$AA@
  025a1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  025a7	33 c0		 xor	 eax, eax
$LN307@PxSocket_I:

; 6607 :         args = PyTuple_Pack(2, s, o);

  025a9	4c 8b 84 24 60
	01 00 00	 mov	 r8, QWORD PTR o$130739[rsp]
  025b1	48 8b 94 24 b0
	01 00 00	 mov	 rdx, QWORD PTR s$[rsp]
  025b9	b9 02 00 00 00	 mov	 ecx, 2
  025be	e8 00 00 00 00	 call	 PyTuple_Pack
  025c3	48 89 44 24 58	 mov	 QWORD PTR args$[rsp], rax

; 6608 :         if (!args) {

  025c8	48 83 7c 24 58
	00		 cmp	 QWORD PTR args$[rsp], 0
  025ce	75 67		 jne	 SHORT $LN58@PxSocket_I

; 6609 :             PxContext_RollbackHeap(c, &rbuf->snapshot);

  025d0	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR rbuf$[rsp]
  025d8	48 83 c0 10	 add	 rax, 16
  025dc	48 8b d0	 mov	 rdx, rax
  025df	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  025e7	e8 00 00 00 00	 call	 PxContext_RollbackHeap
$LN57@PxSocket_I:

; 6610 :             PxSocket_FATAL();

  025ec	e8 00 00 00 00	 call	 PyErr_Occurred
  025f1	48 85 c0	 test	 rax, rax
  025f4	75 1c		 jne	 SHORT $LN308@PxSocket_I
  025f6	41 b8 d2 19 00
	00		 mov	 r8d, 6610		; 000019d2H
  025fc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  02603	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CC@DNBCFJEA@?$AAP?$AAy?$AAE?$AAr?$AAr?$AA_?$AAO?$AAc?$AAc?$AAu?$AAr?$AAr?$AAe?$AAd?$AA?$CI?$AA?$CJ?$AA?$AA@
  0260a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  02610	33 c0		 xor	 eax, eax
$LN308@PxSocket_I:
  02612	41 b8 01 00 00
	00		 mov	 r8d, 1
  02618	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  0261f	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  02627	e8 00 00 00 00	 call	 PxSocket_HandleException
  0262c	e9 02 0f 00 00	 jmp	 $end$130364
  02631	33 c0		 xor	 eax, eax
  02633	85 c0		 test	 eax, eax
  02635	75 b5		 jne	 SHORT $LN57@PxSocket_I
$LN58@PxSocket_I:

; 6611 :         }
; 6612 :     } else {

  02637	eb 22		 jmp	 SHORT $LN54@PxSocket_I
$LN59@PxSocket_I:

; 6613 :         /* xxx todo */
; 6614 :         assert(0);

  02639	33 c0		 xor	 eax, eax
  0263b	85 c0		 test	 eax, eax
  0263d	75 1c		 jne	 SHORT $LN309@PxSocket_I
  0263f	41 b8 d6 19 00
	00		 mov	 r8d, 6614		; 000019d6H
  02645	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0264c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_13COJANIEC@?$AA0?$AA?$AA@
  02653	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  02659	33 c0		 xor	 eax, eax
$LN309@PxSocket_I:
$LN54@PxSocket_I:

; 6615 :     }
; 6616 : 
; 6617 :     result = PyObject_CallObject(func, args);

  0265b	48 8b 54 24 58	 mov	 rdx, QWORD PTR args$[rsp]
  02660	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR func$[rsp]
  02668	e8 00 00 00 00	 call	 PyObject_CallObject
  0266d	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR result$[rsp], rax

; 6618 :     if (result)

  02675	48 83 bc 24 e8
	00 00 00 00	 cmp	 QWORD PTR result$[rsp], 0
  0267e	74 26		 je	 SHORT $LN53@PxSocket_I

; 6619 :         assert(!PyErr_Occurred());

  02680	e8 00 00 00 00	 call	 PyErr_Occurred
  02685	48 85 c0	 test	 rax, rax
  02688	74 1c		 je	 SHORT $LN310@PxSocket_I
  0268a	41 b8 db 19 00
	00		 mov	 r8d, 6619		; 000019dbH
  02690	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  02697	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CE@JKFGJBND@?$AA?$CB?$AAP?$AAy?$AAE?$AAr?$AAr?$AA_?$AAO?$AAc?$AAc?$AAu?$AAr?$AAr?$AAe?$AAd?$AA?$CI?$AA?$CJ?$AA?$AA@
  0269e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  026a4	33 c0		 xor	 eax, eax
$LN310@PxSocket_I:
$LN53@PxSocket_I:

; 6620 :     if (PyErr_Occurred())

  026a6	e8 00 00 00 00	 call	 PyErr_Occurred
  026ab	48 85 c0	 test	 rax, rax
  026ae	74 27		 je	 SHORT $LN52@PxSocket_I

; 6621 :         assert(!result);

  026b0	48 83 bc 24 e8
	00 00 00 00	 cmp	 QWORD PTR result$[rsp], 0
  026b9	74 1c		 je	 SHORT $LN311@PxSocket_I
  026bb	41 b8 dd 19 00
	00		 mov	 r8d, 6621		; 000019ddH
  026c1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  026c8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BA@HDEGGLDD@?$AA?$CB?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?$AA@
  026cf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  026d5	33 c0		 xor	 eax, eax
$LN311@PxSocket_I:
$LN52@PxSocket_I:

; 6622 :     if (!result) {

  026d7	48 83 bc 24 e8
	00 00 00 00	 cmp	 QWORD PTR result$[rsp], 0
  026e0	75 64		 jne	 SHORT $LN51@PxSocket_I

; 6623 :         PxContext_RollbackHeap(c, &rbuf->snapshot);

  026e2	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR rbuf$[rsp]
  026ea	48 83 c0 10	 add	 rax, 16
  026ee	48 8b d0	 mov	 rdx, rax
  026f1	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  026f9	e8 00 00 00 00	 call	 PxContext_RollbackHeap
$LN50@PxSocket_I:

; 6624 :         PxSocket_EXCEPTION();

  026fe	e8 00 00 00 00	 call	 PyErr_Occurred
  02703	48 85 c0	 test	 rax, rax
  02706	75 1c		 jne	 SHORT $LN312@PxSocket_I
  02708	41 b8 e0 19 00
	00		 mov	 r8d, 6624		; 000019e0H
  0270e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  02715	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CC@DNBCFJEA@?$AAP?$AAy?$AAE?$AAr?$AAr?$AA_?$AAO?$AAc?$AAc?$AAu?$AAr?$AAr?$AAe?$AAd?$AA?$CI?$AA?$CJ?$AA?$AA@
  0271c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  02722	33 c0		 xor	 eax, eax
$LN312@PxSocket_I:
  02724	45 33 c0	 xor	 r8d, r8d
  02727	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  0272e	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  02736	e8 00 00 00 00	 call	 PxSocket_HandleException
  0273b	e9 f3 0d 00 00	 jmp	 $end$130364
  02740	33 c0		 xor	 eax, eax
  02742	85 c0		 test	 eax, eax
  02744	75 b8		 jne	 SHORT $LN50@PxSocket_I
$LN51@PxSocket_I:

; 6625 :     }
; 6626 : 
; 6627 :     if (PxSocket_IS_SENDFILE_SCHEDULED(s)) {

  02746	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  0274e	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  02754	25 00 00 00 40	 and	 eax, 1073741824		; 40000000H
  02759	85 c0		 test	 eax, eax
  0275b	74 6c		 je	 SHORT $LN47@PxSocket_I

; 6628 :         if (result != Py_None) {

  0275d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  02764	48 39 84 24 e8
	00 00 00	 cmp	 QWORD PTR result$[rsp], rax
  0276c	74 5b		 je	 SHORT $LN46@PxSocket_I

; 6629 :             PyErr_SetString(PyExc_RuntimeError,
; 6630 :                             "data_received callback scheduled sendfile but "
; 6631 :                             "returned non-None data");

  0276e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0EF@NHKFODOC@data_received?5callback?5scheduled@
  02775	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeError
  0277c	e8 00 00 00 00	 call	 PyErr_SetString
$LN45@PxSocket_I:

; 6632 :             PxSocket_EXCEPTION();

  02781	e8 00 00 00 00	 call	 PyErr_Occurred
  02786	48 85 c0	 test	 rax, rax
  02789	75 1c		 jne	 SHORT $LN313@PxSocket_I
  0278b	41 b8 e8 19 00
	00		 mov	 r8d, 6632		; 000019e8H
  02791	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  02798	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CC@DNBCFJEA@?$AAP?$AAy?$AAE?$AAr?$AAr?$AA_?$AAO?$AAc?$AAc?$AAu?$AAr?$AAr?$AAe?$AAd?$AA?$CI?$AA?$CJ?$AA?$AA@
  0279f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  027a5	33 c0		 xor	 eax, eax
$LN313@PxSocket_I:
  027a7	45 33 c0	 xor	 r8d, r8d
  027aa	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  027b1	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  027b9	e8 00 00 00 00	 call	 PxSocket_HandleException
  027be	e9 70 0d 00 00	 jmp	 $end$130364
  027c3	33 c0		 xor	 eax, eax
  027c5	85 c0		 test	 eax, eax
  027c7	75 b8		 jne	 SHORT $LN45@PxSocket_I
$LN46@PxSocket_I:
$LN47@PxSocket_I:

; 6633 :         }
; 6634 :     }
; 6635 : 
; 6636 :     if (result == Py_None) {

  027c9	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  027d0	48 39 84 24 e8
	00 00 00	 cmp	 QWORD PTR result$[rsp], rax
  027d8	0f 85 ad 00 00
	00		 jne	 $LN42@PxSocket_I

; 6637 :         if (PxSocket_IS_SENDFILE_SCHEDULED(s)) {

  027de	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  027e6	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  027ec	25 00 00 00 40	 and	 eax, 1073741824		; 40000000H
  027f1	85 c0		 test	 eax, eax
  027f3	74 30		 je	 SHORT $LN41@PxSocket_I

; 6638 :             s->sendfile_snapshot = rbuf->snapshot;

  027f5	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  027fd	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR rbuf$[rsp]
  02805	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  02809	48 89 88 28 03
	00 00		 mov	 QWORD PTR [rax+808], rcx

; 6639 :             rbuf->snapshot = NULL;

  02810	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR rbuf$[rsp]
  02818	48 c7 40 10 00
	00 00 00	 mov	 QWORD PTR [rax+16], 0

; 6640 :             goto do_sendfile;

  02820	e9 d3 01 00 00	 jmp	 $do_sendfile$130455
$LN41@PxSocket_I:

; 6641 :         }
; 6642 :         PxContext_RollbackHeap(c, &rbuf->snapshot);

  02825	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR rbuf$[rsp]
  0282d	48 83 c0 10	 add	 rax, 16
  02831	48 8b d0	 mov	 rdx, rax
  02834	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  0283c	e8 00 00 00 00	 call	 PxContext_RollbackHeap

; 6643 :         if (Px_SOCKFLAGS(s) & Px_SOCKFLAGS_CLOSE_SCHEDULED)

  02841	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  02849	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  0284f	25 00 00 40 00	 and	 eax, 4194304		; 00400000H
  02854	85 c0		 test	 eax, eax
  02856	74 05		 je	 SHORT $LN40@PxSocket_I

; 6644 :             goto definitely_close;

  02858	e9 30 f0 ff ff	 jmp	 $definitely_close$130385
$LN40@PxSocket_I:

; 6645 :         /* Nothing to send, no close requested, so try recv again. */
; 6646 :         w = NULL;

  0285d	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR w$[rsp], 0

; 6647 :         rbuf = NULL;

  02866	48 c7 84 24 a0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR rbuf$[rsp], 0

; 6648 :         snapshot = NULL;

  02872	48 c7 84 24 80
	00 00 00 00 00
	00 00		 mov	 QWORD PTR snapshot$[rsp], 0

; 6649 :         recv_nbytes = 0;

  0287e	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR recv_nbytes$[rsp], 0

; 6650 :         goto do_recv;

  02886	e9 f2 f2 ff ff	 jmp	 $do_recv$130648
$LN42@PxSocket_I:

; 6651 :     }
; 6652 : 
; 6653 :     if (Px_PTR(result) == Px_PTR(bytes)) {

  0288b	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR bytes$[rsp]
  02893	48 39 84 24 e8
	00 00 00	 cmp	 QWORD PTR result$[rsp], rax
  0289b	75 52		 jne	 SHORT $LN39@PxSocket_I

; 6654 :         /*
; 6655 :          * Special case for echo.  We can cast our rbuf back to an sbuf.
; 6656 :          * The snapshot will be rolled back after the do_send logic completes.
; 6657 :          */
; 6658 :         sbuf = (SBUF *)rbuf;

  0289d	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR rbuf$[rsp]
  028a5	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR sbuf$[rsp], rax

; 6659 :         sbuf->w.len = recv_nbytes;

  028ad	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR sbuf$[rsp]
  028b5	8b 4c 24 60	 mov	 ecx, DWORD PTR recv_nbytes$[rsp]
  028b9	89 48 40	 mov	 DWORD PTR [rax+64], ecx

; 6660 : 
; 6661 :         w = NULL;

  028bc	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR w$[rsp], 0

; 6662 :         rbuf = NULL;

  028c5	48 c7 84 24 a0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR rbuf$[rsp], 0

; 6663 :         snapshot = NULL;

  028d1	48 c7 84 24 80
	00 00 00 00 00
	00 00		 mov	 QWORD PTR snapshot$[rsp], 0

; 6664 :         recv_nbytes = 0;

  028dd	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR recv_nbytes$[rsp], 0

; 6665 :         goto do_send;

  028e5	e9 a8 e2 ff ff	 jmp	 $do_send$130414

; 6666 :     } else {

  028ea	e9 e7 00 00 00	 jmp	 $LN38@PxSocket_I
$LN39@PxSocket_I:

; 6667 :         w = &rbuf->w;

  028ef	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR rbuf$[rsp]
  028f7	48 83 c0 40	 add	 rax, 64			; 00000040H
  028fb	48 89 44 24 40	 mov	 QWORD PTR w$[rsp], rax

; 6668 :         if (!PyObject2WSABUF(result, w)) {

  02900	48 8b 54 24 40	 mov	 rdx, QWORD PTR w$[rsp]
  02905	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR result$[rsp]
  0290d	e8 00 00 00 00	 call	 PyObject2WSABUF
  02912	85 c0		 test	 eax, eax
  02914	75 5b		 jne	 SHORT $LN37@PxSocket_I

; 6669 :             PyErr_SetString(PyExc_ValueError,
; 6670 :                             "data_received() did not return a sendable "
; 6671 :                             "object (bytes, bytearray or unicode)");

  02916	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0EP@FCIAAFM@data_received?$CI?$CJ?5did?5not?5return?5a@
  0291d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  02924	e8 00 00 00 00	 call	 PyErr_SetString
$LN36@PxSocket_I:

; 6672 :             PxSocket_EXCEPTION();

  02929	e8 00 00 00 00	 call	 PyErr_Occurred
  0292e	48 85 c0	 test	 rax, rax
  02931	75 1c		 jne	 SHORT $LN314@PxSocket_I
  02933	41 b8 10 1a 00
	00		 mov	 r8d, 6672		; 00001a10H
  02939	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  02940	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CC@DNBCFJEA@?$AAP?$AAy?$AAE?$AAr?$AAr?$AA_?$AAO?$AAc?$AAc?$AAu?$AAr?$AAr?$AAe?$AAd?$AA?$CI?$AA?$CJ?$AA?$AA@
  02947	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0294d	33 c0		 xor	 eax, eax
$LN314@PxSocket_I:
  0294f	45 33 c0	 xor	 r8d, r8d
  02952	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  02959	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  02961	e8 00 00 00 00	 call	 PxSocket_HandleException
  02966	e9 c8 0b 00 00	 jmp	 $end$130364
  0296b	33 c0		 xor	 eax, eax
  0296d	85 c0		 test	 eax, eax
  0296f	75 b8		 jne	 SHORT $LN36@PxSocket_I
$LN37@PxSocket_I:

; 6673 :         }
; 6674 : 
; 6675 :         sbuf = (SBUF *)rbuf;

  02971	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR rbuf$[rsp]
  02979	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR sbuf$[rsp], rax

; 6676 :         sbuf->w.len = w->len;

  02981	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR sbuf$[rsp]
  02989	48 8b 4c 24 40	 mov	 rcx, QWORD PTR w$[rsp]
  0298e	8b 09		 mov	 ecx, DWORD PTR [rcx]
  02990	89 48 40	 mov	 DWORD PTR [rax+64], ecx

; 6677 :         sbuf->w.buf = w->buf;

  02993	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR sbuf$[rsp]
  0299b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR w$[rsp]
  029a0	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  029a4	48 89 48 48	 mov	 QWORD PTR [rax+72], rcx

; 6678 : 
; 6679 :         w = NULL;

  029a8	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR w$[rsp], 0

; 6680 :         rbuf = NULL;

  029b1	48 c7 84 24 a0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR rbuf$[rsp], 0

; 6681 :         snapshot = NULL;

  029bd	48 c7 84 24 80
	00 00 00 00 00
	00 00		 mov	 QWORD PTR snapshot$[rsp], 0

; 6682 :         recv_nbytes = 0;

  029c9	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR recv_nbytes$[rsp], 0

; 6683 :         goto do_send;

  029d1	e9 bc e1 ff ff	 jmp	 $do_send$130414
$LN38@PxSocket_I:

; 6684 :     }
; 6685 : 
; 6686 :     assert(0);

  029d6	33 c0		 xor	 eax, eax
  029d8	85 c0		 test	 eax, eax
  029da	75 1c		 jne	 SHORT $LN315@PxSocket_I
  029dc	41 b8 1e 1a 00
	00		 mov	 r8d, 6686		; 00001a1eH
  029e2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  029e9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_13COJANIEC@?$AA0?$AA?$AA@
  029f0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  029f6	33 c0		 xor	 eax, eax
$LN315@PxSocket_I:
$do_sendfile$130455:

; 6687 : 
; 6688 : do_sendfile:
; 6689 : 
; 6690 :     if (!s->tp_io) {

  029f8	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  02a00	48 83 b8 58 03
	00 00 00	 cmp	 QWORD PTR [rax+856], 0
  02a08	0f 85 81 00 00
	00		 jne	 $LN33@PxSocket_I

; 6691 :         PTP_WIN32_IO_CALLBACK cb = PxSocketClient_Callback;

  02a0e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PxSocketClient_Callback
  02a15	48 89 84 24 68
	01 00 00	 mov	 QWORD PTR cb$130807[rsp], rax

; 6692 :         s->tp_io = CreateThreadpoolIo((HANDLE)s->sock_fd, cb, c, NULL);

  02a1d	45 33 c9	 xor	 r9d, r9d
  02a20	4c 8b 84 24 e0
	00 00 00	 mov	 r8, QWORD PTR c$[rsp]
  02a28	48 8b 94 24 68
	01 00 00	 mov	 rdx, QWORD PTR cb$130807[rsp]
  02a30	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  02a38	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  02a3c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateThreadpoolIo
  02a42	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  02a4a	48 89 81 58 03
	00 00		 mov	 QWORD PTR [rcx+856], rax

; 6693 :         if (!s->tp_io)

  02a51	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  02a59	48 83 b8 58 03
	00 00 00	 cmp	 QWORD PTR [rax+856], 0
  02a61	75 2c		 jne	 SHORT $LN32@PxSocket_I
$LN31@PxSocket_I:

; 6694 :             PxSocket_SYSERROR("CreateThreadpoolIo");

  02a63	33 c9		 xor	 ecx, ecx
  02a65	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
  02a6a	41 b8 01 00 00
	00		 mov	 r8d, 1
  02a70	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@BIALAGNA@CreateThreadpoolIo?$AA@
  02a77	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  02a7f	e8 00 00 00 00	 call	 PxSocket_HandleException
  02a84	e9 aa 0a 00 00	 jmp	 $end$130364
  02a89	33 c0		 xor	 eax, eax
  02a8b	85 c0		 test	 eax, eax
  02a8d	75 d4		 jne	 SHORT $LN31@PxSocket_I
$LN32@PxSocket_I:
$LN33@PxSocket_I:

; 6695 :     }
; 6696 : 
; 6697 :     StartThreadpoolIo(s->tp_io);

  02a8f	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  02a97	48 8b 88 58 03
	00 00		 mov	 rcx, QWORD PTR [rax+856]
  02a9e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_StartThreadpoolIo

; 6698 : 
; 6699 :     err = SOCKET_ERROR;

  02aa4	c7 84 24 d8 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR err$[rsp], -1	; ffffffffH

; 6700 :     wsa_error = NO_ERROR;

  02aaf	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR wsa_error$[rsp], 0

; 6701 : 
; 6702 :     s->send_id++;

  02ab7	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  02abf	48 8b 80 68 02
	00 00		 mov	 rax, QWORD PTR [rax+616]
  02ac6	48 ff c0	 inc	 rax
  02ac9	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  02ad1	48 89 81 68 02
	00 00		 mov	 QWORD PTR [rcx+616], rax

; 6703 :     s->io_op = PxSocket_IO_SENDFILE;

  02ad8	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  02ae0	c7 80 50 03 00
	00 40 00 00 00	 mov	 DWORD PTR [rax+848], 64	; 00000040H

; 6704 : 
; 6705 :     h = s->sendfile_handle;

  02aea	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  02af2	48 8b 80 20 03
	00 00		 mov	 rax, QWORD PTR [rax+800]
  02af9	48 89 44 24 50	 mov	 QWORD PTR h$[rsp], rax

; 6706 :     tf = &s->sendfile_tfbuf;

  02afe	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  02b06	48 05 30 03 00
	00		 add	 rax, 816		; 00000330H
  02b0c	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR tf$[rsp], rax

; 6707 :     ol = &c->overlapped;

  02b14	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  02b1c	48 05 b0 32 00
	00		 add	 rax, 12976		; 000032b0H
  02b22	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR ol$[rsp], rax

; 6708 :     RESET_OVERLAPPED(ol);

  02b2a	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR ol$[rsp]
  02b32	e8 00 00 00 00	 call	 _RESET_OVERLAPPED

; 6709 :     s->ol = c->ol = ol;

  02b37	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  02b3f	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR ol$[rsp]
  02b47	48 89 88 d0 32
	00 00		 mov	 QWORD PTR [rax+13008], rcx
  02b4e	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  02b56	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR ol$[rsp]
  02b5e	48 89 88 80 03
	00 00		 mov	 QWORD PTR [rax+896], rcx

; 6710 : 
; 6711 :     if (TransmitFile(fd, h, 0, 0, ol, tf, 0)) {

  02b65	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  02b6d	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR tf$[rsp]
  02b75	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  02b7a	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR ol$[rsp]
  02b82	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  02b87	45 33 c9	 xor	 r9d, r9d
  02b8a	45 33 c0	 xor	 r8d, r8d
  02b8d	48 8b 54 24 50	 mov	 rdx, QWORD PTR h$[rsp]
  02b92	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR fd$[rsp]
  02b9a	ff 15 70 00 00
	00		 call	 QWORD PTR PySocketModule+112
  02ba0	85 c0		 test	 eax, eax
  02ba2	74 07		 je	 SHORT $LN28@PxSocket_I

; 6712 :         /* TransmitFile completed synchronously.  Completion packet will be
; 6713 :          * queued. */
; 6714 :         goto end;

  02ba4	e9 8a 09 00 00	 jmp	 $end$130364

; 6715 :     } else {

  02ba9	eb 6f		 jmp	 SHORT $LN27@PxSocket_I
$LN28@PxSocket_I:

; 6716 :         wsa_error = WSAGetLastError();

  02bab	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WSAGetLastError
  02bb1	89 44 24 48	 mov	 DWORD PTR wsa_error$[rsp], eax

; 6717 :         if (wsa_error == WSA_IO_PENDING)

  02bb5	81 7c 24 48 e5
	03 00 00	 cmp	 DWORD PTR wsa_error$[rsp], 997 ; 000003e5H
  02bbd	75 05		 jne	 SHORT $LN26@PxSocket_I

; 6718 :             /* Overlapped transmit file request successfully initiated;
; 6719 :              * completion packet will be queued once transmission completes
; 6720 :              * (or an error occurs). */
; 6721 :             goto end;

  02bbf	e9 6f 09 00 00	 jmp	 $end$130364
$LN26@PxSocket_I:

; 6722 : 
; 6723 :         /* Overlapped transmit file attempt failed.  No completion packet will
; 6724 :          * be queued, so we need to take care of cleanup ourselves. */
; 6725 :         if (s->sendfile_snapshot)

  02bc4	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  02bcc	48 83 b8 28 03
	00 00 00	 cmp	 QWORD PTR [rax+808], 0
  02bd4	74 1e		 je	 SHORT $LN25@PxSocket_I

; 6726 :             PxContext_RollbackHeap(c, &s->sendfile_snapshot);

  02bd6	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  02bde	48 05 28 03 00
	00		 add	 rax, 808		; 00000328H
  02be4	48 8b d0	 mov	 rdx, rax
  02be7	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  02bef	e8 00 00 00 00	 call	 PxContext_RollbackHeap
$LN25@PxSocket_I:

; 6727 : 
; 6728 :         s->send_id--;

  02bf4	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  02bfc	48 8b 80 68 02
	00 00		 mov	 rax, QWORD PTR [rax+616]
  02c03	48 ff c8	 dec	 rax
  02c06	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  02c0e	48 89 81 68 02
	00 00		 mov	 QWORD PTR [rcx+616], rax

; 6729 :         goto send_failed;

  02c15	e9 14 eb ff ff	 jmp	 $send_failed$130516
$LN27@PxSocket_I:

; 6730 :     }
; 6731 : 
; 6732 :     assert(0);

  02c1a	33 c0		 xor	 eax, eax
  02c1c	85 c0		 test	 eax, eax
  02c1e	75 1c		 jne	 SHORT $LN316@PxSocket_I
  02c20	41 b8 4c 1a 00
	00		 mov	 r8d, 6732		; 00001a4cH
  02c26	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  02c2d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_13COJANIEC@?$AA0?$AA?$AA@
  02c34	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  02c3a	33 c0		 xor	 eax, eax
$LN316@PxSocket_I:
$overlapped_sendfile_callback$130325:

; 6733 : 
; 6734 : overlapped_sendfile_callback:
; 6735 :     /* Entry point for an overlapped TransmitFile */
; 6736 :     if (s->sendfile_snapshot)

  02c3c	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  02c44	48 83 b8 28 03
	00 00 00	 cmp	 QWORD PTR [rax+808], 0
  02c4c	74 1e		 je	 SHORT $LN24@PxSocket_I

; 6737 :         PxContext_RollbackHeap(c, &s->sendfile_snapshot);

  02c4e	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  02c56	48 05 28 03 00
	00		 add	 rax, 808		; 00000328H
  02c5c	48 8b d0	 mov	 rdx, rax
  02c5f	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  02c67	e8 00 00 00 00	 call	 PxContext_RollbackHeap
$LN24@PxSocket_I:

; 6738 : 
; 6739 :     assert(c->ol == s->ol);

  02c6c	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  02c74	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  02c7c	48 8b 89 80 03
	00 00		 mov	 rcx, QWORD PTR [rcx+896]
  02c83	48 39 88 d0 32
	00 00		 cmp	 QWORD PTR [rax+13008], rcx
  02c8a	74 1c		 je	 SHORT $LN317@PxSocket_I
  02c8c	41 b8 53 1a 00
	00		 mov	 r8d, 6739		; 00001a53H
  02c92	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  02c99	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BO@PDILFDEN@?$AAc?$AA?9?$AA?$DO?$AAo?$AAl?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAs?$AA?9?$AA?$DO?$AAo?$AAl?$AA?$AA@
  02ca0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  02ca6	33 c0		 xor	 eax, eax
$LN317@PxSocket_I:

; 6740 :     wsa_error = c->io_result;

  02ca8	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  02cb0	8b 80 94 32 00
	00		 mov	 eax, DWORD PTR [rax+12948]
  02cb6	89 44 24 48	 mov	 DWORD PTR wsa_error$[rsp], eax

; 6741 : 
; 6742 :     if (wsa_error != NO_ERROR) {

  02cba	83 7c 24 48 00	 cmp	 DWORD PTR wsa_error$[rsp], 0
  02cbf	74 26		 je	 SHORT $LN23@PxSocket_I

; 6743 :         s->send_id--;

  02cc1	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  02cc9	48 8b 80 68 02
	00 00		 mov	 rax, QWORD PTR [rax+616]
  02cd0	48 ff c8	 dec	 rax
  02cd3	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  02cdb	48 89 81 68 02
	00 00		 mov	 QWORD PTR [rcx+616], rax

; 6744 :         goto send_failed;

  02ce2	e9 47 ea ff ff	 jmp	 $send_failed$130516
$LN23@PxSocket_I:

; 6745 :     }
; 6746 : 
; 6747 :     /* xxx todo: check s->ol->InternalHigh against expected filesize? */
; 6748 : 
; 6749 :     CloseHandle(s->sendfile_handle);

  02ce7	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  02cef	48 8b 88 20 03
	00 00		 mov	 rcx, QWORD PTR [rax+800]
  02cf6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CloseHandle

; 6750 :     s->send_nbytes += s->sendfile_nbytes;

  02cfc	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  02d04	8b 80 1c 03 00
	00		 mov	 eax, DWORD PTR [rax+796]
  02d0a	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  02d12	48 03 81 78 02
	00 00		 add	 rax, QWORD PTR [rcx+632]
  02d19	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  02d21	48 89 81 78 02
	00 00		 mov	 QWORD PTR [rcx+632], rax

; 6751 :     s->sendfile_nbytes = 0;

  02d28	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  02d30	c7 80 1c 03 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+796], 0

; 6752 :     s->sendfile_handle = 0;

  02d3a	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  02d42	48 c7 80 20 03
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+800], 0

; 6753 :     memset(&s->sendfile_tfbuf, 0, sizeof(TRANSMIT_FILE_BUFFERS));

  02d4d	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  02d55	48 05 30 03 00
	00		 add	 rax, 816		; 00000330H
  02d5b	41 b8 20 00 00
	00		 mov	 r8d, 32			; 00000020H
  02d61	33 d2		 xor	 edx, edx
  02d63	48 8b c8	 mov	 rcx, rax
  02d66	e8 00 00 00 00	 call	 memset

; 6754 :     Px_SOCKFLAGS(s) &= ~Px_SOCKFLAGS_SENDFILE_SCHEDULED;

  02d6b	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  02d73	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  02d79	0f ba f0 1e	 btr	 eax, 30
  02d7d	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  02d85	89 81 f4 01 00
	00		 mov	 DWORD PTR [rcx+500], eax

; 6755 : 
; 6756 :     goto send_complete;

  02d8b	e9 f8 e4 ff ff	 jmp	 $send_complete$130509
$do_lines_received_callback$130731:

; 6757 : 
; 6758 : do_lines_received_callback:
; 6759 :     func = s->lines_received;

  02d90	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  02d98	48 8b 80 d0 02
	00 00		 mov	 rax, QWORD PTR [rax+720]
  02d9f	48 89 84 24 08
	01 00 00	 mov	 QWORD PTR func$[rsp], rax

; 6760 :     assert(func);

  02da7	48 83 bc 24 08
	01 00 00 00	 cmp	 QWORD PTR func$[rsp], 0
  02db0	75 1c		 jne	 SHORT $LN318@PxSocket_I
  02db2	41 b8 68 1a 00
	00		 mov	 r8d, 6760		; 00001a68H
  02db8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  02dbf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_19DPFBEKIN@?$AAf?$AAu?$AAn?$AAc?$AA?$AA@
  02dc6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  02dcc	33 c0		 xor	 eax, eax
$LN318@PxSocket_I:

; 6761 : 
; 6762 :     assert(0);

  02dce	33 c0		 xor	 eax, eax
  02dd0	85 c0		 test	 eax, eax
  02dd2	75 1c		 jne	 SHORT $LN319@PxSocket_I
  02dd4	41 b8 6a 1a 00
	00		 mov	 r8d, 6762		; 00001a6aH
  02dda	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  02de1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_13COJANIEC@?$AA0?$AA?$AA@
  02de8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  02dee	33 c0		 xor	 eax, eax
$LN319@PxSocket_I:

; 6763 : 
; 6764 :     assert(!rbuf->snapshot);

  02df0	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR rbuf$[rsp]
  02df8	48 83 78 10 00	 cmp	 QWORD PTR [rax+16], 0
  02dfd	74 1c		 je	 SHORT $LN320@PxSocket_I
  02dff	41 b8 6c 1a 00
	00		 mov	 r8d, 6764		; 00001a6cH
  02e05	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  02e0c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CA@FFEMNDKF@?$AA?$CB?$AAr?$AAb?$AAu?$AAf?$AA?9?$AA?$DO?$AAs?$AAn?$AAa?$AAp?$AAs?$AAh?$AAo?$AAt?$AA?$AA@
  02e13	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  02e19	33 c0		 xor	 eax, eax
$LN320@PxSocket_I:

; 6765 :     rbuf->snapshot = PxContext_HeapSnapshot(c, NULL);

  02e1b	33 d2		 xor	 edx, edx
  02e1d	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  02e25	e8 00 00 00 00	 call	 PxContext_HeapSnapshot
  02e2a	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR rbuf$[rsp]
  02e32	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 6766 : 
; 6767 : 
; 6768 :     /* For now, num_rbufs should only ever be 1. */
; 6769 :     assert(s->num_rbufs == 1);

  02e36	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  02e3e	83 b8 78 03 00
	00 01		 cmp	 DWORD PTR [rax+888], 1
  02e45	74 1c		 je	 SHORT $LN321@PxSocket_I
  02e47	41 b8 71 1a 00
	00		 mov	 r8d, 6769		; 00001a71H
  02e4d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  02e54	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CE@PGCKLFKB@?$AAs?$AA?9?$AA?$DO?$AAn?$AAu?$AAm?$AA_?$AAr?$AAb?$AAu?$AAf?$AAs?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA1?$AA?$AA@
  02e5b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  02e61	33 c0		 xor	 eax, eax
$LN321@PxSocket_I:

; 6770 : 
; 6771 :     if (s->num_rbufs == 1) {

  02e63	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  02e6b	83 b8 78 03 00
	00 01		 cmp	 DWORD PTR [rax+888], 1
  02e72	0f 85 5b 01 00
	00		 jne	 $LN22@PxSocket_I

; 6772 :         PyObject *n;
; 6773 :         PyObject *o;
; 6774 :         PyTypeObject *tp = &PyBytes_Type;

  02e78	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyBytes_Type
  02e7f	48 89 84 24 78
	01 00 00	 mov	 QWORD PTR tp$130833[rsp], rax

; 6775 :         bytes = R2B(rbuf);

  02e87	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR rbuf$[rsp]
  02e8f	48 83 c0 70	 add	 rax, 112		; 00000070H
  02e93	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR bytes$[rsp], rax

; 6776 :         o = (PyObject *)bytes;

  02e9b	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR bytes$[rsp]
  02ea3	48 89 84 24 80
	01 00 00	 mov	 QWORD PTR o$130832[rsp], rax

; 6777 :         Py_PXFLAGS(bytes) = Py_PXFLAGS_MIMIC;

  02eab	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR bytes$[rsp]
  02eb3	48 c7 40 20 00
	02 00 00	 mov	 QWORD PTR [rax+32], 512	; 00000200H

; 6778 :         n = init_object(c, o, tp, recv_nbytes);

  02ebb	8b 44 24 60	 mov	 eax, DWORD PTR recv_nbytes$[rsp]
  02ebf	44 8b c8	 mov	 r9d, eax
  02ec2	4c 8b 84 24 78
	01 00 00	 mov	 r8, QWORD PTR tp$130833[rsp]
  02eca	48 8b 94 24 80
	01 00 00	 mov	 rdx, QWORD PTR o$130832[rsp]
  02ed2	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  02eda	e8 00 00 00 00	 call	 init_object
  02edf	48 89 84 24 70
	01 00 00	 mov	 QWORD PTR n$130831[rsp], rax

; 6779 :         assert(n == o);

  02ee7	48 8b 84 24 80
	01 00 00	 mov	 rax, QWORD PTR o$130832[rsp]
  02eef	48 39 84 24 70
	01 00 00	 cmp	 QWORD PTR n$130831[rsp], rax
  02ef7	74 1c		 je	 SHORT $LN322@PxSocket_I
  02ef9	41 b8 7b 1a 00
	00		 mov	 r8d, 6779		; 00001a7bH
  02eff	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  02f06	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1O@JGBPCKCO@?$AAn?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAo?$AA?$AA@
  02f0d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  02f13	33 c0		 xor	 eax, eax
$LN322@PxSocket_I:

; 6780 :         assert(Py_SIZE(bytes) == recv_nbytes);

  02f15	8b 44 24 60	 mov	 eax, DWORD PTR recv_nbytes$[rsp]
  02f19	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR bytes$[rsp]
  02f21	48 39 41 60	 cmp	 QWORD PTR [rcx+96], rax
  02f25	74 1c		 je	 SHORT $LN323@PxSocket_I
  02f27	41 b8 7c 1a 00
	00		 mov	 r8d, 6780		; 00001a7cH
  02f2d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  02f34	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DM@OPIDLANA@?$AAP?$AAy?$AA_?$AAS?$AAI?$AAZ?$AAE?$AA?$CI?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAr?$AAe?$AAc?$AAv?$AA_?$AAn?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?$AA@
  02f3b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  02f41	33 c0		 xor	 eax, eax
$LN323@PxSocket_I:

; 6781 :         args = PyTuple_Pack(2, s, o);

  02f43	4c 8b 84 24 80
	01 00 00	 mov	 r8, QWORD PTR o$130832[rsp]
  02f4b	48 8b 94 24 b0
	01 00 00	 mov	 rdx, QWORD PTR s$[rsp]
  02f53	b9 02 00 00 00	 mov	 ecx, 2
  02f58	e8 00 00 00 00	 call	 PyTuple_Pack
  02f5d	48 89 44 24 58	 mov	 QWORD PTR args$[rsp], rax

; 6782 :         if (!args) {

  02f62	48 83 7c 24 58
	00		 cmp	 QWORD PTR args$[rsp], 0
  02f68	75 67		 jne	 SHORT $LN21@PxSocket_I

; 6783 :             PxContext_RollbackHeap(c, &rbuf->snapshot);

  02f6a	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR rbuf$[rsp]
  02f72	48 83 c0 10	 add	 rax, 16
  02f76	48 8b d0	 mov	 rdx, rax
  02f79	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  02f81	e8 00 00 00 00	 call	 PxContext_RollbackHeap
$LN20@PxSocket_I:

; 6784 :             PxSocket_FATAL();

  02f86	e8 00 00 00 00	 call	 PyErr_Occurred
  02f8b	48 85 c0	 test	 rax, rax
  02f8e	75 1c		 jne	 SHORT $LN324@PxSocket_I
  02f90	41 b8 80 1a 00
	00		 mov	 r8d, 6784		; 00001a80H
  02f96	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  02f9d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CC@DNBCFJEA@?$AAP?$AAy?$AAE?$AAr?$AAr?$AA_?$AAO?$AAc?$AAc?$AAu?$AAr?$AAr?$AAe?$AAd?$AA?$CI?$AA?$CJ?$AA?$AA@
  02fa4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  02faa	33 c0		 xor	 eax, eax
$LN324@PxSocket_I:
  02fac	41 b8 01 00 00
	00		 mov	 r8d, 1
  02fb2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  02fb9	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  02fc1	e8 00 00 00 00	 call	 PxSocket_HandleException
  02fc6	e9 68 05 00 00	 jmp	 $end$130364
  02fcb	33 c0		 xor	 eax, eax
  02fcd	85 c0		 test	 eax, eax
  02fcf	75 b5		 jne	 SHORT $LN20@PxSocket_I
$LN21@PxSocket_I:

; 6785 :         }
; 6786 :     } else {

  02fd1	eb 22		 jmp	 SHORT $LN17@PxSocket_I
$LN22@PxSocket_I:

; 6787 :         /* xxx todo */
; 6788 :         assert(0);

  02fd3	33 c0		 xor	 eax, eax
  02fd5	85 c0		 test	 eax, eax
  02fd7	75 1c		 jne	 SHORT $LN325@PxSocket_I
  02fd9	41 b8 84 1a 00
	00		 mov	 r8d, 6788		; 00001a84H
  02fdf	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  02fe6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_13COJANIEC@?$AA0?$AA?$AA@
  02fed	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  02ff3	33 c0		 xor	 eax, eax
$LN325@PxSocket_I:
$LN17@PxSocket_I:

; 6789 :     }
; 6790 : 
; 6791 :     assert(0);

  02ff5	33 c0		 xor	 eax, eax
  02ff7	85 c0		 test	 eax, eax
  02ff9	75 1c		 jne	 SHORT $LN326@PxSocket_I
  02ffb	41 b8 87 1a 00
	00		 mov	 r8d, 6791		; 00001a87H
  03001	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  03008	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_13COJANIEC@?$AA0?$AA?$AA@
  0300f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  03015	33 c0		 xor	 eax, eax
$LN326@PxSocket_I:
$recv_failed$130690:

; 6792 : 
; 6793 : recv_failed:
; 6794 :     assert(wsa_error);

  03017	83 7c 24 48 00	 cmp	 DWORD PTR wsa_error$[rsp], 0
  0301c	75 1c		 jne	 SHORT $LN327@PxSocket_I
  0301e	41 b8 8a 1a 00
	00		 mov	 r8d, 6794		; 00001a8aH
  03024	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0302b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BE@IPFILOEG@?$AAw?$AAs?$AAa?$AA_?$AAe?$AAr?$AAr?$AAo?$AAr?$AA?$AA@
  03032	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  03038	33 c0		 xor	 eax, eax
$LN327@PxSocket_I:

; 6795 :     func = s->recv_failed;

  0303a	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  03042	48 8b 80 a8 02
	00 00		 mov	 rax, QWORD PTR [rax+680]
  03049	48 89 84 24 08
	01 00 00	 mov	 QWORD PTR func$[rsp], rax

; 6796 :     if (func) {

  03051	48 83 bc 24 08
	01 00 00 00	 cmp	 QWORD PTR func$[rsp], 0
  0305a	74 28		 je	 SHORT $LN16@PxSocket_I

; 6797 :         /* xxx todo */
; 6798 :         assert(0 == "xxx todo: recv_failed");

  0305c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BG@GHODDANO@xxx?5todo?3?5recv_failed?$AA@
  03063	48 85 c0	 test	 rax, rax
  03066	74 1c		 je	 SHORT $LN328@PxSocket_I
  03068	41 b8 8e 1a 00
	00		 mov	 r8d, 6798		; 00001a8eH
  0306e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  03075	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DK@OCEKDCMD@?$AA0?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA?$CC?$AAx?$AAx?$AAx?$AA?5?$AAt?$AAo?$AAd?$AAo?$AA?3?$AA?5?$AAr?$AAe?$AAc?$AAv?$AA_?$AAf?$AAa?$AAi?$AAl?$AAe?$AAd?$AA?$CC?$AA?$AA@
  0307c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  03082	33 c0		 xor	 eax, eax
$LN328@PxSocket_I:
$LN16@PxSocket_I:

; 6799 :     }
; 6800 :     assert(s->io_op == PxSocket_IO_RECV);

  03084	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  0308c	83 b8 50 03 00
	00 04		 cmp	 DWORD PTR [rax+848], 4
  03093	74 1c		 je	 SHORT $LN329@PxSocket_I
  03095	41 b8 90 1a 00
	00		 mov	 r8d, 6800		; 00001a90H
  0309b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  030a2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DK@MKBHPLBM@?$AAs?$AA?9?$AA?$DO?$AAi?$AAo?$AA_?$AAo?$AAp?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAP?$AAx?$AAS?$AAo?$AAc?$AAk?$AAe?$AAt?$AA_?$AAI?$AAO?$AA_?$AAR?$AAE?$AAC?$AAV?$AA?$AA@
  030a9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  030af	33 c0		 xor	 eax, eax
$LN329@PxSocket_I:

; 6801 :     syscall = "WSARecv";

  030b1	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_07GONIMADJ@WSARecv?$AA@
  030b8	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR syscall$[rsp], rax
$handle_error$130338:

; 6802 :     goto handle_error;
; 6803 : 
; 6804 : handle_error:
; 6805 :     /* inline PxSocket_HandleError() */
; 6806 :     assert(syscall);

  030c0	48 83 bc 24 c0
	00 00 00 00	 cmp	 QWORD PTR syscall$[rsp], 0
  030c9	75 1c		 jne	 SHORT $LN330@PxSocket_I
  030cb	41 b8 96 1a 00
	00		 mov	 r8d, 6806		; 00001a96H
  030d1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  030d8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BA@NKFADEIM@?$AAs?$AAy?$AAs?$AAc?$AAa?$AAl?$AAl?$AA?$AA@
  030df	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  030e5	33 c0		 xor	 eax, eax
$LN330@PxSocket_I:

; 6807 :     assert(wsa_error);

  030e7	83 7c 24 48 00	 cmp	 DWORD PTR wsa_error$[rsp], 0
  030ec	75 1c		 jne	 SHORT $LN331@PxSocket_I
  030ee	41 b8 97 1a 00
	00		 mov	 r8d, 6807		; 00001a97H
  030f4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  030fb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BE@IPFILOEG@?$AAw?$AAs?$AAa?$AA_?$AAe?$AAr?$AAr?$AAo?$AAr?$AA?$AA@
  03102	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  03108	33 c0		 xor	 eax, eax
$LN331@PxSocket_I:

; 6808 :     assert(!PyErr_Occurred());

  0310a	e8 00 00 00 00	 call	 PyErr_Occurred
  0310f	48 85 c0	 test	 rax, rax
  03112	74 1c		 je	 SHORT $LN332@PxSocket_I
  03114	41 b8 98 1a 00
	00		 mov	 r8d, 6808		; 00001a98H
  0311a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  03121	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CE@JKFGJBND@?$AA?$CB?$AAP?$AAy?$AAE?$AAr?$AAr?$AA_?$AAO?$AAc?$AAc?$AAu?$AAr?$AAr?$AAe?$AAd?$AA?$CI?$AA?$CJ?$AA?$AA@
  03128	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0312e	33 c0		 xor	 eax, eax
$LN332@PxSocket_I:

; 6809 :     callback = NULL;

  03130	48 c7 84 24 f0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR callback$[rsp], 0

; 6810 : 
; 6811 :     switch (wsa_error) {

  0313c	8b 44 24 48	 mov	 eax, DWORD PTR wsa_error$[rsp]
  03140	89 84 24 90 01
	00 00		 mov	 DWORD PTR tv1539[rsp], eax
  03147	81 bc 24 90 01
	00 00 14 27 00
	00		 cmp	 DWORD PTR tv1539[rsp], 10004 ; 00002714H
  03152	0f 87 ad 00 00
	00		 ja	 $LN337@PxSocket_I
  03158	81 bc 24 90 01
	00 00 14 27 00
	00		 cmp	 DWORD PTR tv1539[rsp], 10004 ; 00002714H
  03163	0f 84 3e 02 00
	00		 je	 $LN6@PxSocket_I
  03169	81 bc 24 90 01
	00 00 ea 00 00
	00		 cmp	 DWORD PTR tv1539[rsp], 234 ; 000000eaH
  03174	77 4e		 ja	 SHORT $LN338@PxSocket_I
  03176	81 bc 24 90 01
	00 00 ea 00 00
	00		 cmp	 DWORD PTR tv1539[rsp], 234 ; 000000eaH
  03181	0f 84 2e 02 00
	00		 je	 $LN5@PxSocket_I
  03187	83 bc 24 90 01
	00 00 06	 cmp	 DWORD PTR tv1539[rsp], 6
  0318f	0f 84 12 02 00
	00		 je	 $LN6@PxSocket_I
  03195	83 bc 24 90 01
	00 00 08	 cmp	 DWORD PTR tv1539[rsp], 8
  0319d	0f 84 04 02 00
	00		 je	 $LN6@PxSocket_I
  031a3	83 bc 24 90 01
	00 00 40	 cmp	 DWORD PTR tv1539[rsp], 64 ; 00000040H
  031ab	0f 84 97 00 00
	00		 je	 $LN13@PxSocket_I
  031b1	83 bc 24 90 01
	00 00 57	 cmp	 DWORD PTR tv1539[rsp], 87 ; 00000057H
  031b9	0f 84 e8 01 00
	00		 je	 $LN6@PxSocket_I
  031bf	e9 84 02 00 00	 jmp	 $LN2@PxSocket_I
$LN338@PxSocket_I:
  031c4	81 bc 24 90 01
	00 00 e3 03 00
	00		 cmp	 DWORD PTR tv1539[rsp], 995 ; 000003e3H
  031cf	0f 84 d2 01 00
	00		 je	 $LN6@PxSocket_I
  031d5	81 bc 24 90 01
	00 00 e5 03 00
	00		 cmp	 DWORD PTR tv1539[rsp], 997 ; 000003e5H
  031e0	0f 84 02 02 00
	00		 je	 $LN4@PxSocket_I
  031e6	81 bc 24 90 01
	00 00 d2 04 00
	00		 cmp	 DWORD PTR tv1539[rsp], 1234 ; 000004d2H
  031f1	74 55		 je	 SHORT $LN13@PxSocket_I
  031f3	81 bc 24 90 01
	00 00 d4 04 00
	00		 cmp	 DWORD PTR tv1539[rsp], 1236 ; 000004d4H
  031fe	74 48		 je	 SHORT $LN13@PxSocket_I
  03200	e9 43 02 00 00	 jmp	 $LN2@PxSocket_I
$LN337@PxSocket_I:
  03205	8b 84 24 90 01
	00 00		 mov	 eax, DWORD PTR tv1539[rsp]
  0320c	2d 1e 27 00 00	 sub	 eax, 10014		; 0000271eH
  03211	89 84 24 90 01
	00 00		 mov	 DWORD PTR tv1539[rsp], eax
  03218	83 bc 24 90 01
	00 00 57	 cmp	 DWORD PTR tv1539[rsp], 87 ; 00000057H
  03220	0f 87 22 02 00
	00		 ja	 $LN2@PxSocket_I
  03226	8b 84 24 90 01
	00 00		 mov	 eax, DWORD PTR tv1539[rsp]
  0322d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  03234	0f b6 84 01 00
	00 00 00	 movzx	 eax, BYTE PTR $LN343@PxSocket_I[rcx+rax]
  0323c	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN344@PxSocket_I[rcx+rax*4]
  03243	48 03 c1	 add	 rax, rcx
  03246	ff e0		 jmp	 rax
$LN13@PxSocket_I:

; 6812 :         case ERROR_PORT_UNREACHABLE:
; 6813 :         case ERROR_CONNECTION_ABORTED:
; 6814 :         case ERROR_NETNAME_DELETED:
; 6815 :         case WSAECONNRESET:
; 6816 :         case WSAENETDOWN:
; 6817 :         case WSAENETRESET:
; 6818 :         case WSAECONNABORTED:
; 6819 :         case WSAENOTCONN:
; 6820 :         case WSAEDISCON:
; 6821 :             Px_SOCKFLAGS(s) |= Px_SOCKFLAGS_CLOSE_SCHEDULED;

  03248	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  03250	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  03256	0f ba e8 16	 bts	 eax, 22
  0325a	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  03262	89 81 f4 01 00
	00		 mov	 DWORD PTR [rcx+500], eax

; 6822 :             break;

  03268	e9 19 02 00 00	 jmp	 $LN14@PxSocket_I
$LN12@PxSocket_I:

; 6823 : 
; 6824 :         case WSAETIMEDOUT:
; 6825 :             Px_SOCKFLAGS(s) |= Px_SOCKFLAGS_CLOSE_SCHEDULED;

  0326d	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  03275	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  0327b	0f ba e8 16	 bts	 eax, 22
  0327f	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  03287	89 81 f4 01 00
	00		 mov	 DWORD PTR [rcx+500], eax

; 6826 :             Px_SOCKFLAGS(s) |= Px_SOCKFLAGS_TIMEDOUT;

  0328d	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  03295	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  0329b	0f ba e8 18	 bts	 eax, 24
  0329f	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  032a7	89 81 f4 01 00
	00		 mov	 DWORD PTR [rcx+500], eax

; 6827 :             break;

  032ad	e9 d4 01 00 00	 jmp	 $LN14@PxSocket_I
$LN11@PxSocket_I:

; 6828 : 
; 6829 :         case WSAESHUTDOWN:
; 6830 :             if (s->io_op == PxSocket_IO_SEND) {

  032b2	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  032ba	83 b8 50 03 00
	00 08		 cmp	 DWORD PTR [rax+848], 8
  032c1	75 31		 jne	 SHORT $LN10@PxSocket_I

; 6831 :                 Px_SOCKFLAGS(s) |= Px_SOCKFLAGS_SEND_SHUTDOWN;

  032c3	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  032cb	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  032d1	0f ba e8 11	 bts	 eax, 17
  032d5	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  032dd	89 81 f4 01 00
	00		 mov	 DWORD PTR [rcx+500], eax

; 6832 :                 callback = "send_shutdown";

  032e3	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0O@IDBDAEOD@send_shutdown?$AA@
  032ea	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR callback$[rsp], rax
  032f2	eb 40		 jmp	 SHORT $LN9@PxSocket_I
$LN10@PxSocket_I:

; 6833 :             } else if (s->io_op == PxSocket_IO_RECV) {

  032f4	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  032fc	83 b8 50 03 00
	00 04		 cmp	 DWORD PTR [rax+848], 4
  03303	75 2f		 jne	 SHORT $LN8@PxSocket_I

; 6834 :                 Px_SOCKFLAGS(s) |= Px_SOCKFLAGS_RECV_SHUTDOWN;

  03305	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  0330d	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  03313	0f ba e8 12	 bts	 eax, 18
  03317	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  0331f	89 81 f4 01 00
	00		 mov	 DWORD PTR [rcx+500], eax

; 6835 :                 callback = "recv_shutdown";

  03325	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0O@HGCJJJHB@recv_shutdown?$AA@
  0332c	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR callback$[rsp], rax
$LN8@PxSocket_I:
$LN9@PxSocket_I:

; 6836 :             }
; 6837 : 
; 6838 :             if ((Px_SOCKFLAGS(s) & Px_SOCKFLAGS_SEND_SHUTDOWN) &&
; 6839 :                 (Px_SOCKFLAGS(s) & Px_SOCKFLAGS_RECV_SHUTDOWN)) {

  03334	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  0333c	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  03342	25 00 00 02 00	 and	 eax, 131072		; 00020000H
  03347	85 c0		 test	 eax, eax
  03349	74 57		 je	 SHORT $LN7@PxSocket_I
  0334b	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  03353	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  03359	25 00 00 04 00	 and	 eax, 262144		; 00040000H
  0335e	85 c0		 test	 eax, eax
  03360	74 40		 je	 SHORT $LN7@PxSocket_I

; 6840 :                 Px_SOCKFLAGS(s) |= Px_SOCKFLAGS_BOTH_SHUTDOWN;

  03362	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  0336a	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  03370	0f ba e8 13	 bts	 eax, 19
  03374	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  0337c	89 81 f4 01 00
	00		 mov	 DWORD PTR [rcx+500], eax

; 6841 :                 Px_SOCKFLAGS(s) |= Px_SOCKFLAGS_CLOSE_SCHEDULED;

  03382	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  0338a	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  03390	0f ba e8 16	 bts	 eax, 22
  03394	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  0339c	89 81 f4 01 00
	00		 mov	 DWORD PTR [rcx+500], eax
$LN7@PxSocket_I:

; 6842 :             }
; 6843 :             break;

  033a2	e9 df 00 00 00	 jmp	 $LN14@PxSocket_I
$LN6@PxSocket_I:

; 6844 : 
; 6845 :         /* (we shouldn't see any of these in normal operating conditions) */
; 6846 :         case WSAEINTR:
; 6847 :         case WSAEINVAL:
; 6848 :         case WSAEFAULT:
; 6849 :         case WSAEMSGSIZE:
; 6850 :         case WSAEOPNOTSUPP:
; 6851 :         case WSAEINPROGRESS:
; 6852 :         case WSA_OPERATION_ABORTED:
; 6853 :         case WSAENOTSOCK:
; 6854 :         case WSANOTINITIALISED:
; 6855 :         case WSAESOCKTNOSUPPORT:
; 6856 :         case WSA_NOT_ENOUGH_MEMORY:
; 6857 :         case WSA_INVALID_HANDLE:
; 6858 :         case WSA_INVALID_PARAMETER:
; 6859 :         case WSAEADDRNOTAVAIL:
; 6860 :         case WSAEADDRINUSE:
; 6861 :             PyErr_SetFromWindowsErr(wsa_error);

  033a7	8b 4c 24 48	 mov	 ecx, DWORD PTR wsa_error$[rsp]
  033ab	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr

; 6862 :             goto handle_exception;

  033b0	e9 36 01 00 00	 jmp	 $handle_exception$130629
$LN5@PxSocket_I:

; 6863 : 
; 6864 :         /* errors that indicate our socket logic is broken */
; 6865 :         case ERROR_MORE_DATA:
; 6866 :             assert(0);

  033b5	33 c0		 xor	 eax, eax
  033b7	85 c0		 test	 eax, eax
  033b9	75 1c		 jne	 SHORT $LN333@PxSocket_I
  033bb	41 b8 d2 1a 00
	00		 mov	 r8d, 6866		; 00001ad2H
  033c1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  033c8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_13COJANIEC@?$AA0?$AA?$AA@
  033cf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  033d5	33 c0		 xor	 eax, eax
$LN333@PxSocket_I:

; 6867 :             Py_FatalError("ERROR_MORE_DATA");

  033d7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@JMGJABEC@ERROR_MORE_DATA?$AA@
  033de	e8 00 00 00 00	 call	 Py_FatalError

; 6868 :             break;

  033e3	e9 9e 00 00 00	 jmp	 $LN14@PxSocket_I
$LN4@PxSocket_I:

; 6869 : 
; 6870 :         case ERROR_IO_PENDING:
; 6871 :             assert(0);

  033e8	33 c0		 xor	 eax, eax
  033ea	85 c0		 test	 eax, eax
  033ec	75 1c		 jne	 SHORT $LN334@PxSocket_I
  033ee	41 b8 d7 1a 00
	00		 mov	 r8d, 6871		; 00001ad7H
  033f4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  033fb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_13COJANIEC@?$AA0?$AA?$AA@
  03402	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  03408	33 c0		 xor	 eax, eax
$LN334@PxSocket_I:

; 6872 :             Py_FatalError("ERROR_IO_PENDING");

  0340a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@FBEBJMAM@ERROR_IO_PENDING?$AA@
  03411	e8 00 00 00 00	 call	 Py_FatalError

; 6873 :             break;

  03416	eb 6e		 jmp	 SHORT $LN14@PxSocket_I
$LN3@PxSocket_I:

; 6874 : 
; 6875 :         case WSAEWOULDBLOCK:
; 6876 :             assert(0);

  03418	33 c0		 xor	 eax, eax
  0341a	85 c0		 test	 eax, eax
  0341c	75 1c		 jne	 SHORT $LN335@PxSocket_I
  0341e	41 b8 dc 1a 00
	00		 mov	 r8d, 6876		; 00001adcH
  03424	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0342b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_13COJANIEC@?$AA0?$AA?$AA@
  03432	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  03438	33 c0		 xor	 eax, eax
$LN335@PxSocket_I:

; 6877 :             Py_FatalError("WSAEWOULDBLOCK!");

  0343a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@KFHPAKD@WSAEWOULDBLOCK?$CB?$AA@
  03441	e8 00 00 00 00	 call	 Py_FatalError

; 6878 :             break;

  03446	eb 3e		 jmp	 SHORT $LN14@PxSocket_I
$LN2@PxSocket_I:

; 6879 : 
; 6880 :         default:
; 6881 :             printf("unknown error code: %d\n", wsa_error);

  03448	8b 54 24 48	 mov	 edx, DWORD PTR wsa_error$[rsp]
  0344c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@MJHHLNDN@unknown?5error?5code?3?5?$CFd?6?$AA@
  03453	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_printf

; 6882 :             assert(0);

  03459	33 c0		 xor	 eax, eax
  0345b	85 c0		 test	 eax, eax
  0345d	75 1c		 jne	 SHORT $LN336@PxSocket_I
  0345f	41 b8 e2 1a 00
	00		 mov	 r8d, 6882		; 00001ae2H
  03465	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0346c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_13COJANIEC@?$AA0?$AA?$AA@
  03473	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  03479	33 c0		 xor	 eax, eax
$LN336@PxSocket_I:

; 6883 :             PyErr_SetFromWindowsErr(wsa_error);

  0347b	8b 4c 24 48	 mov	 ecx, DWORD PTR wsa_error$[rsp]
  0347f	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr

; 6884 :             goto handle_exception;

  03484	eb 65		 jmp	 SHORT $handle_exception$130629
$LN14@PxSocket_I:

; 6885 :     }
; 6886 : 
; 6887 :     if (callback) {

  03486	48 83 bc 24 f0
	00 00 00 00	 cmp	 QWORD PTR callback$[rsp], 0
  0348f	74 22		 je	 SHORT $LN1@PxSocket_I

; 6888 :         /* xxx todo */
; 6889 :         assert(0);

  03491	33 c0		 xor	 eax, eax
  03493	85 c0		 test	 eax, eax
  03495	75 1c		 jne	 SHORT $LN339@PxSocket_I
  03497	41 b8 e9 1a 00
	00		 mov	 r8d, 6889		; 00001ae9H
  0349d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  034a4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_13COJANIEC@?$AA0?$AA?$AA@
  034ab	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  034b1	33 c0		 xor	 eax, eax
$LN339@PxSocket_I:
$LN1@PxSocket_I:

; 6890 :     }
; 6891 : 
; 6892 :     assert(Px_SOCKFLAGS(s) & Px_SOCKFLAGS_CLOSE_SCHEDULED);

  034b3	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  034bb	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  034c1	25 00 00 40 00	 and	 eax, 4194304		; 00400000H
  034c6	85 c0		 test	 eax, eax
  034c8	75 1c		 jne	 SHORT $LN340@PxSocket_I
  034ca	41 b8 ec 1a 00
	00		 mov	 r8d, 6892		; 00001aecH
  034d0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  034d7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FO@GJLFKMLD@?$AAP?$AAx?$AA_?$AAS?$AAO?$AAC?$AAK?$AAF?$AAL?$AAA?$AAG?$AAS?$AA?$CI?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?5?$AAP?$AAx?$AA_?$AAS?$AAO?$AAC?$AAK?$AAF?$AAL?$AAA?$AAG?$AAS?$AA_?$AAC@
  034de	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  034e4	33 c0		 xor	 eax, eax
$LN340@PxSocket_I:

; 6893 :     goto close_;

  034e6	e9 eb e2 ff ff	 jmp	 $close_$130351
$handle_exception$130629:

; 6894 : 
; 6895 : handle_exception:
; 6896 :     /* Inline PxSocket_HandleException() */
; 6897 :     assert(PyErr_Occurred());

  034eb	e8 00 00 00 00	 call	 PyErr_Occurred
  034f0	48 85 c0	 test	 rax, rax
  034f3	75 1c		 jne	 SHORT $LN341@PxSocket_I
  034f5	41 b8 f1 1a 00
	00		 mov	 r8d, 6897		; 00001af1H
  034fb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  03502	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CC@DNBCFJEA@?$AAP?$AAy?$AAE?$AAr?$AAr?$AA_?$AAO?$AAc?$AAc?$AAu?$AAr?$AAr?$AAe?$AAd?$AA?$CI?$AA?$CJ?$AA?$AA@
  03509	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0350f	33 c0		 xor	 eax, eax
$LN341@PxSocket_I:

; 6898 :     /* xxx todo */
; 6899 :     assert(0);

  03511	33 c0		 xor	 eax, eax
  03513	85 c0		 test	 eax, eax
  03515	75 1c		 jne	 SHORT $LN342@PxSocket_I
  03517	41 b8 f3 1a 00
	00		 mov	 r8d, 6899		; 00001af3H
  0351d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  03524	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_13COJANIEC@?$AA0?$AA?$AA@
  0352b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  03531	33 c0		 xor	 eax, eax
$LN342@PxSocket_I:
$connection_made_callback$130340:
$data_received_callback$130342:
$send_complete_callback$130344:
$post_callback_that_supports_sending_retval$130347:
$post_callback_that_does_not_support_sending_retval$130349:
$try_send$130353:
$end$130364:

; 6900 : 
; 6901 : connection_made_callback:
; 6902 : data_received_callback:
; 6903 : send_complete_callback:
; 6904 : post_callback_that_supports_sending_retval:
; 6905 : post_callback_that_does_not_support_sending_retval:
; 6906 : try_send:
; 6907 : 
; 6908 : 
; 6909 : end:
; 6910 :     InterlockedDecrement(&_PxSocket_ActiveIOLoops);

  03533	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PxSocket_ActiveIOLoops
  0353a	f0 ff 08	 lock dec DWORD PTR [rax]

; 6911 : 
; 6912 :     return;
; 6913 : 
; 6914 : }

  0353d	48 81 c4 a8 01
	00 00		 add	 rsp, 424		; 000001a8H
  03544	c3		 ret	 0
  03545	0f 1f 00	 npad	 3
$LN345@PxSocket_I:
  03548	00 00 00 00	 DD	 $LN227@PxSocket_I
  0354c	00 00 00 00	 DD	 $LN226@PxSocket_I
  03550	00 00 00 00	 DD	 $LN225@PxSocket_I
  03554	00 00 00 00	 DD	 $LN224@PxSocket_I
  03558	00 00 00 00	 DD	 $LN223@PxSocket_I
  0355c	00 00 00 00	 DD	 $LN221@PxSocket_I
  03560	00 00 00 00	 DD	 $LN220@PxSocket_I
  03564	00 00 00 00	 DD	 $LN219@PxSocket_I
  03568	00 00 00 00	 DD	 $LN218@PxSocket_I
  0356c	00 00 00 00	 DD	 $LN217@PxSocket_I
  03570	00 00 00 00	 DD	 $LN217@PxSocket_I
  03574	00 00 00 00	 DD	 $LN222@PxSocket_I
$LN344@PxSocket_I:
  03578	00 00 00 00	 DD	 $LN6@PxSocket_I
  0357c	00 00 00 00	 DD	 $LN3@PxSocket_I
  03580	00 00 00 00	 DD	 $LN13@PxSocket_I
  03584	00 00 00 00	 DD	 $LN11@PxSocket_I
  03588	00 00 00 00	 DD	 $LN12@PxSocket_I
  0358c	00 00 00 00	 DD	 $LN2@PxSocket_I
$LN343@PxSocket_I:
  03590	00		 DB	 0
  03591	05		 DB	 5
  03592	05		 DB	 5
  03593	05		 DB	 5
  03594	05		 DB	 5
  03595	05		 DB	 5
  03596	05		 DB	 5
  03597	05		 DB	 5
  03598	00		 DB	 0
  03599	05		 DB	 5
  0359a	05		 DB	 5
  0359b	05		 DB	 5
  0359c	05		 DB	 5
  0359d	05		 DB	 5
  0359e	05		 DB	 5
  0359f	05		 DB	 5
  035a0	05		 DB	 5
  035a1	05		 DB	 5
  035a2	05		 DB	 5
  035a3	05		 DB	 5
  035a4	05		 DB	 5
  035a5	01		 DB	 1
  035a6	00		 DB	 0
  035a7	05		 DB	 5
  035a8	00		 DB	 0
  035a9	05		 DB	 5
  035aa	00		 DB	 0
  035ab	05		 DB	 5
  035ac	05		 DB	 5
  035ad	05		 DB	 5
  035ae	00		 DB	 0
  035af	00		 DB	 0
  035b0	05		 DB	 5
  035b1	05		 DB	 5
  035b2	00		 DB	 0
  035b3	00		 DB	 0
  035b4	02		 DB	 2
  035b5	05		 DB	 5
  035b6	02		 DB	 2
  035b7	02		 DB	 2
  035b8	02		 DB	 2
  035b9	05		 DB	 5
  035ba	05		 DB	 5
  035bb	02		 DB	 2
  035bc	03		 DB	 3
  035bd	05		 DB	 5
  035be	04		 DB	 4
  035bf	05		 DB	 5
  035c0	05		 DB	 5
  035c1	05		 DB	 5
  035c2	05		 DB	 5
  035c3	05		 DB	 5
  035c4	05		 DB	 5
  035c5	05		 DB	 5
  035c6	05		 DB	 5
  035c7	05		 DB	 5
  035c8	05		 DB	 5
  035c9	05		 DB	 5
  035ca	05		 DB	 5
  035cb	05		 DB	 5
  035cc	05		 DB	 5
  035cd	05		 DB	 5
  035ce	05		 DB	 5
  035cf	05		 DB	 5
  035d0	05		 DB	 5
  035d1	05		 DB	 5
  035d2	05		 DB	 5
  035d3	05		 DB	 5
  035d4	05		 DB	 5
  035d5	05		 DB	 5
  035d6	05		 DB	 5
  035d7	05		 DB	 5
  035d8	05		 DB	 5
  035d9	05		 DB	 5
  035da	05		 DB	 5
  035db	05		 DB	 5
  035dc	05		 DB	 5
  035dd	05		 DB	 5
  035de	05		 DB	 5
  035df	00		 DB	 0
  035e0	05		 DB	 5
  035e1	05		 DB	 5
  035e2	05		 DB	 5
  035e3	05		 DB	 5
  035e4	05		 DB	 5
  035e5	05		 DB	 5
  035e6	05		 DB	 5
  035e7	02		 DB	 2
PxSocket_IOLoop ENDP
_TEXT	ENDS
EXTRN	__imp_getsockopt:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PxSocket_UpdateConnectTime DD imagerel PxSocket_UpdateConnectTime
	DD	imagerel PxSocket_UpdateConnectTime+158
	DD	imagerel $unwind$PxSocket_UpdateConnectTime
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PxSocket_UpdateConnectTime DD 010901H
	DD	0c209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PxSocket_UpdateConnectTime
_TEXT	SEGMENT
n$ = 48
b$ = 56
seconds$ = 64
bytes$ = 68
result$ = 72
c$ = 80
fd$ = 88
s$ = 112
PxSocket_UpdateConnectTime PROC				; COMDAT

; 5830 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 5831 :     Context *c = s->ctx;

  00009	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  0000e	48 8b 80 00 02
	00 00		 mov	 rax, QWORD PTR [rax+512]
  00015	48 89 44 24 50	 mov	 QWORD PTR c$[rsp], rax

; 5832 :     int seconds;
; 5833 :     int bytes = sizeof(seconds);

  0001a	c7 44 24 44 04
	00 00 00	 mov	 DWORD PTR bytes$[rsp], 4

; 5834 :     int result = 0;

  00022	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR result$[rsp], 0

; 5835 :     char *b = (char *)&seconds;

  0002a	48 8d 44 24 40	 lea	 rax, QWORD PTR seconds$[rsp]
  0002f	48 89 44 24 38	 mov	 QWORD PTR b$[rsp], rax

; 5836 :     int  *n = &bytes;

  00034	48 8d 44 24 44	 lea	 rax, QWORD PTR bytes$[rsp]
  00039	48 89 44 24 30	 mov	 QWORD PTR n$[rsp], rax

; 5837 :     SOCKET fd = s->sock_fd;

  0003e	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00043	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00047	48 89 44 24 58	 mov	 QWORD PTR fd$[rsp], rax

; 5838 : 
; 5839 :     if (getsockopt(fd, SOL_SOCKET, SO_CONNECT_TIME, b, n) != NO_ERROR)

  0004c	48 8b 44 24 30	 mov	 rax, QWORD PTR n$[rsp]
  00051	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00056	4c 8b 4c 24 38	 mov	 r9, QWORD PTR b$[rsp]
  0005b	41 b8 0c 70 00
	00		 mov	 r8d, 28684		; 0000700cH
  00061	ba ff ff 00 00	 mov	 edx, 65535		; 0000ffffH
  00066	48 8b 4c 24 58	 mov	 rcx, QWORD PTR fd$[rsp]
  0006b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_getsockopt
  00071	85 c0		 test	 eax, eax
  00073	74 02		 je	 SHORT $LN2@PxSocket_U

; 5840 :         goto end;

  00075	eb 1e		 jmp	 SHORT $end$130266
$LN2@PxSocket_U:

; 5841 : 
; 5842 :     if (seconds != -1)

  00077	83 7c 24 40 ff	 cmp	 DWORD PTR seconds$[rsp], -1
  0007c	74 0f		 je	 SHORT $LN1@PxSocket_U

; 5843 :         s->connect_time = seconds;

  0007e	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00083	8b 4c 24 40	 mov	 ecx, DWORD PTR seconds$[rsp]
  00087	89 88 88 03 00
	00		 mov	 DWORD PTR [rax+904], ecx
$LN1@PxSocket_U:

; 5844 : 
; 5845 :     result = 1;

  0008d	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
$end$130266:

; 5846 : 
; 5847 : end:
; 5848 :     return result;

  00095	8b 44 24 48	 mov	 eax, DWORD PTR result$[rsp]

; 5849 : }

  00099	48 83 c4 68	 add	 rsp, 104		; 00000068H
  0009d	c3		 ret	 0
PxSocket_UpdateConnectTime ENDP
_TEXT	ENDS
PUBLIC	new_pxsocketbuf
EXTRN	PyBytes_AsString:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$new_pxsocketbuf DD imagerel $LN4
	DD	imagerel $LN4+165
	DD	imagerel $unwind$new_pxsocketbuf
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$new_pxsocketbuf DD 010e01H
	DD	0820eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT new_pxsocketbuf
_TEXT	SEGMENT
pbuf$ = 32
sbuf$ = 40
size$ = 48
c$ = 80
nbytes$ = 88
new_pxsocketbuf PROC					; COMDAT

; 6918 : {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 6919 :     size_t size;
; 6920 :     PxSocketBuf *sbuf;
; 6921 :     PyBytesObject *pbuf;
; 6922 : 
; 6923 :     size = nbytes + sizeof(PxSocketBuf);

  0000e	48 8b 44 24 58	 mov	 rax, QWORD PTR nbytes$[rsp]
  00013	48 05 b0 00 00
	00		 add	 rax, 176		; 000000b0H
  00019	48 89 44 24 30	 mov	 QWORD PTR size$[rsp], rax

; 6924 : 
; 6925 :     sbuf = (PxSocketBuf *)_PyHeap_Malloc(c, size, 0, 0);

  0001e	45 33 c9	 xor	 r9d, r9d
  00021	45 33 c0	 xor	 r8d, r8d
  00024	48 8b 54 24 30	 mov	 rdx, QWORD PTR size$[rsp]
  00029	48 8b 4c 24 50	 mov	 rcx, QWORD PTR c$[rsp]
  0002e	e8 00 00 00 00	 call	 _PyHeap_Malloc
  00033	48 89 44 24 28	 mov	 QWORD PTR sbuf$[rsp], rax

; 6926 :     if (!sbuf)

  00038	48 83 7c 24 28
	00		 cmp	 QWORD PTR sbuf$[rsp], 0
  0003e	75 04		 jne	 SHORT $LN1@new_pxsock

; 6927 :         return NULL;

  00040	33 c0		 xor	 eax, eax
  00042	eb 5c		 jmp	 SHORT $LN2@new_pxsock
$LN1@new_pxsock:

; 6928 : 
; 6929 :     pbuf = PxSocketBuf2PyBytesObject(sbuf);

  00044	48 8b 44 24 28	 mov	 rax, QWORD PTR sbuf$[rsp]
  00049	48 83 c0 30	 add	 rax, 48			; 00000030H
  0004d	48 89 44 24 20	 mov	 QWORD PTR pbuf$[rsp], rax

; 6930 :     (void)init_object(c, (PyObject *)pbuf, &PyBytes_Type, nbytes);

  00052	4c 8b 4c 24 58	 mov	 r9, QWORD PTR nbytes$[rsp]
  00057	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:PyBytes_Type
  0005e	48 8b 54 24 20	 mov	 rdx, QWORD PTR pbuf$[rsp]
  00063	48 8b 4c 24 50	 mov	 rcx, QWORD PTR c$[rsp]
  00068	e8 00 00 00 00	 call	 init_object

; 6931 : 
; 6932 :     sbuf->signature = _PxSocketBufSignature;

  0006d	48 8b 44 24 28	 mov	 rax, QWORD PTR sbuf$[rsp]
  00072	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR _PxSocketBufSignature
  00079	48 89 48 20	 mov	 QWORD PTR [rax+32], rcx

; 6933 :     sbuf->w.len = (ULONG)nbytes;

  0007d	48 8b 44 24 28	 mov	 rax, QWORD PTR sbuf$[rsp]
  00082	8b 4c 24 58	 mov	 ecx, DWORD PTR nbytes$[rsp]
  00086	89 08		 mov	 DWORD PTR [rax], ecx

; 6934 :     sbuf->w.buf = PyBytes_AsString((PyObject *)pbuf);

  00088	48 8b 4c 24 20	 mov	 rcx, QWORD PTR pbuf$[rsp]
  0008d	e8 00 00 00 00	 call	 PyBytes_AsString
  00092	48 8b 4c 24 28	 mov	 rcx, QWORD PTR sbuf$[rsp]
  00097	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 6935 :     return sbuf;

  0009b	48 8b 44 24 28	 mov	 rax, QWORD PTR sbuf$[rsp]
$LN2@new_pxsock:

; 6936 : }

  000a0	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000a4	c3		 ret	 0
new_pxsocketbuf ENDP
_TEXT	ENDS
PUBLIC	new_pxsocketbuf_from_bytes
EXTRN	PyBytes_AsStringAndSize:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$new_pxsocketbuf_from_bytes DD imagerel $LN5
	DD	imagerel $LN5+125
	DD	imagerel $unwind$new_pxsocketbuf_from_bytes
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$new_pxsocketbuf_from_bytes DD 010e01H
	DD	0820eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT new_pxsocketbuf_from_bytes
_TEXT	SEGMENT
sbuf$ = 32
size$ = 40
buf$ = 48
nbytes$ = 56
c$ = 80
o$ = 88
new_pxsocketbuf_from_bytes PROC				; COMDAT

; 6940 : {

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 6941 :     size_t size;
; 6942 :     Py_ssize_t nbytes;
; 6943 :     PxSocketBuf *sbuf;
; 6944 :     char *buf;
; 6945 : 
; 6946 :     if (PyBytes_AsStringAndSize((PyObject *)o, &buf, &nbytes) == -1)

  0000e	4c 8d 44 24 38	 lea	 r8, QWORD PTR nbytes$[rsp]
  00013	48 8d 54 24 30	 lea	 rdx, QWORD PTR buf$[rsp]
  00018	48 8b 4c 24 58	 mov	 rcx, QWORD PTR o$[rsp]
  0001d	e8 00 00 00 00	 call	 PyBytes_AsStringAndSize
  00022	83 f8 ff	 cmp	 eax, -1
  00025	75 04		 jne	 SHORT $LN2@new_pxsock@2

; 6947 :         return NULL;

  00027	33 c0		 xor	 eax, eax
  00029	eb 4d		 jmp	 SHORT $LN3@new_pxsock@2
$LN2@new_pxsock@2:

; 6948 : 
; 6949 :     size = sizeof(PxSocketBuf);

  0002b	48 c7 44 24 28
	b0 00 00 00	 mov	 QWORD PTR size$[rsp], 176 ; 000000b0H

; 6950 : 
; 6951 :     sbuf = (PxSocketBuf *)_PyHeap_Malloc(c, size, 0, 0);

  00034	45 33 c9	 xor	 r9d, r9d
  00037	45 33 c0	 xor	 r8d, r8d
  0003a	48 8b 54 24 28	 mov	 rdx, QWORD PTR size$[rsp]
  0003f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR c$[rsp]
  00044	e8 00 00 00 00	 call	 _PyHeap_Malloc
  00049	48 89 44 24 20	 mov	 QWORD PTR sbuf$[rsp], rax

; 6952 :     if (!sbuf)

  0004e	48 83 7c 24 20
	00		 cmp	 QWORD PTR sbuf$[rsp], 0
  00054	75 04		 jne	 SHORT $LN1@new_pxsock@2

; 6953 :         return NULL;

  00056	33 c0		 xor	 eax, eax
  00058	eb 1e		 jmp	 SHORT $LN3@new_pxsock@2
$LN1@new_pxsock@2:

; 6954 : 
; 6955 :     sbuf->w.len = (ULONG)nbytes;

  0005a	48 8b 44 24 20	 mov	 rax, QWORD PTR sbuf$[rsp]
  0005f	8b 4c 24 38	 mov	 ecx, DWORD PTR nbytes$[rsp]
  00063	89 08		 mov	 DWORD PTR [rax], ecx

; 6956 :     sbuf->w.buf = buf;

  00065	48 8b 44 24 20	 mov	 rax, QWORD PTR sbuf$[rsp]
  0006a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR buf$[rsp]
  0006f	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 6957 :     return sbuf;

  00073	48 8b 44 24 20	 mov	 rax, QWORD PTR sbuf$[rsp]
$LN3@new_pxsock@2:

; 6958 : }

  00078	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0007c	c3		 ret	 0
new_pxsocketbuf_from_bytes ENDP
_TEXT	ENDS
PUBLIC	new_pxsocketbuf_from_unicode
;	COMDAT pdata
pdata	SEGMENT
$pdata$new_pxsocketbuf_from_unicode DD imagerel $LN6
	DD	imagerel $LN6+168
	DD	imagerel $unwind$new_pxsocketbuf_from_unicode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$new_pxsocketbuf_from_unicode DD 010e01H
	DD	0820eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT new_pxsocketbuf_from_unicode
_TEXT	SEGMENT
sbuf$ = 32
size$ = 40
buf$ = 48
nbytes$ = 56
c$ = 80
o$ = 88
new_pxsocketbuf_from_unicode PROC			; COMDAT

; 6962 : {

$LN6:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 6963 :     size_t size;
; 6964 :     Py_ssize_t nbytes;
; 6965 :     PxSocketBuf *sbuf;
; 6966 :     char *buf;
; 6967 : 
; 6968 :     assert(!PyErr_Occurred());

  0000e	e8 00 00 00 00	 call	 PyErr_Occurred
  00013	48 85 c0	 test	 rax, rax
  00016	74 1c		 je	 SHORT $LN5@new_pxsock@3
  00018	41 b8 38 1b 00
	00		 mov	 r8d, 6968		; 00001b38H
  0001e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00025	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CE@JKFGJBND@?$AA?$CB?$AAP?$AAy?$AAE?$AAr?$AAr?$AA_?$AAO?$AAc?$AAc?$AAu?$AAr?$AAr?$AAe?$AAd?$AA?$CI?$AA?$CJ?$AA?$AA@
  0002c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00032	33 c0		 xor	 eax, eax
$LN5@new_pxsock@3:

; 6969 :     buf = PyUnicode_AsUTF8AndSize((PyObject *)o, &nbytes);

  00034	48 8d 54 24 38	 lea	 rdx, QWORD PTR nbytes$[rsp]
  00039	48 8b 4c 24 58	 mov	 rcx, QWORD PTR o$[rsp]
  0003e	e8 00 00 00 00	 call	 PyUnicode_AsUTF8AndSize
  00043	48 89 44 24 30	 mov	 QWORD PTR buf$[rsp], rax

; 6970 :     if (PyErr_Occurred())

  00048	e8 00 00 00 00	 call	 PyErr_Occurred
  0004d	48 85 c0	 test	 rax, rax
  00050	74 04		 je	 SHORT $LN2@new_pxsock@3

; 6971 :         return NULL;

  00052	33 c0		 xor	 eax, eax
  00054	eb 4d		 jmp	 SHORT $LN3@new_pxsock@3
$LN2@new_pxsock@3:

; 6972 : 
; 6973 :     size = sizeof(PxSocketBuf);

  00056	48 c7 44 24 28
	b0 00 00 00	 mov	 QWORD PTR size$[rsp], 176 ; 000000b0H

; 6974 : 
; 6975 :     sbuf = (PxSocketBuf *)_PyHeap_Malloc(c, size, 0, 0);

  0005f	45 33 c9	 xor	 r9d, r9d
  00062	45 33 c0	 xor	 r8d, r8d
  00065	48 8b 54 24 28	 mov	 rdx, QWORD PTR size$[rsp]
  0006a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR c$[rsp]
  0006f	e8 00 00 00 00	 call	 _PyHeap_Malloc
  00074	48 89 44 24 20	 mov	 QWORD PTR sbuf$[rsp], rax

; 6976 :     if (!sbuf)

  00079	48 83 7c 24 20
	00		 cmp	 QWORD PTR sbuf$[rsp], 0
  0007f	75 04		 jne	 SHORT $LN1@new_pxsock@3

; 6977 :         return NULL;

  00081	33 c0		 xor	 eax, eax
  00083	eb 1e		 jmp	 SHORT $LN3@new_pxsock@3
$LN1@new_pxsock@3:

; 6978 : 
; 6979 :     sbuf->w.len = (ULONG)nbytes;

  00085	48 8b 44 24 20	 mov	 rax, QWORD PTR sbuf$[rsp]
  0008a	8b 4c 24 38	 mov	 ecx, DWORD PTR nbytes$[rsp]
  0008e	89 08		 mov	 DWORD PTR [rax], ecx

; 6980 :     sbuf->w.buf = buf;

  00090	48 8b 44 24 20	 mov	 rax, QWORD PTR sbuf$[rsp]
  00095	48 8b 4c 24 30	 mov	 rcx, QWORD PTR buf$[rsp]
  0009a	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 6981 :     return sbuf;

  0009e	48 8b 44 24 20	 mov	 rax, QWORD PTR sbuf$[rsp]
$LN3@new_pxsock@3:

; 6982 : }

  000a3	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000a7	c3		 ret	 0
new_pxsocketbuf_from_unicode ENDP
_TEXT	ENDS
PUBLIC	PxSocket_CallbackComplete
;	COMDAT pdata
pdata	SEGMENT
$pdata$PxSocket_CallbackComplete DD imagerel $LN3
	DD	imagerel $LN3+85
	DD	imagerel $unwind$PxSocket_CallbackComplete
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PxSocket_CallbackComplete DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PxSocket_CallbackComplete
_TEXT	SEGMENT
c$ = 48
PxSocket_CallbackComplete PROC				; COMDAT

; 6986 : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 6987 :     c->callback_completed->from = c;

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR c$[rsp]
  0000e	48 8b 80 30 33
	00 00		 mov	 rax, QWORD PTR [rax+13104]
  00015	48 8b 4c 24 30	 mov	 rcx, QWORD PTR c$[rsp]
  0001a	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 6988 :     PxList_TimestampItem(c->callback_completed);

  0001e	48 8b 44 24 30	 mov	 rax, QWORD PTR c$[rsp]
  00023	48 8b 88 30 33
	00 00		 mov	 rcx, QWORD PTR [rax+13104]
  0002a	e8 00 00 00 00	 call	 PxList_TimestampItem

; 6989 :     PxList_Push(c->px->completed_callbacks, c->callback_completed);

  0002f	48 8b 44 24 30	 mov	 rax, QWORD PTR c$[rsp]
  00034	48 8b 80 d8 00
	00 00		 mov	 rax, QWORD PTR [rax+216]
  0003b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR c$[rsp]
  00040	48 8b 91 30 33
	00 00		 mov	 rdx, QWORD PTR [rcx+13104]
  00047	48 8b 48 10	 mov	 rcx, QWORD PTR [rax+16]
  0004b	e8 00 00 00 00	 call	 PxList_Push

; 6990 : }

  00050	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00054	c3		 ret	 0
PxSocket_CallbackComplete ENDP
_TEXT	ENDS
PUBLIC	PxSocket_ErrbackComplete
;	COMDAT pdata
pdata	SEGMENT
$pdata$PxSocket_ErrbackComplete DD imagerel $LN3
	DD	imagerel $LN3+85
	DD	imagerel $unwind$PxSocket_ErrbackComplete
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PxSocket_ErrbackComplete DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PxSocket_ErrbackComplete
_TEXT	SEGMENT
c$ = 48
PxSocket_ErrbackComplete PROC				; COMDAT

; 6994 : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 6995 :     c->errback_completed->from = c;

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR c$[rsp]
  0000e	48 8b 80 38 33
	00 00		 mov	 rax, QWORD PTR [rax+13112]
  00015	48 8b 4c 24 30	 mov	 rcx, QWORD PTR c$[rsp]
  0001a	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 6996 :     PxList_TimestampItem(c->errback_completed);

  0001e	48 8b 44 24 30	 mov	 rax, QWORD PTR c$[rsp]
  00023	48 8b 88 38 33
	00 00		 mov	 rcx, QWORD PTR [rax+13112]
  0002a	e8 00 00 00 00	 call	 PxList_TimestampItem

; 6997 :     PxList_Push(c->px->completed_errbacks, c->errback_completed);

  0002f	48 8b 44 24 30	 mov	 rax, QWORD PTR c$[rsp]
  00034	48 8b 80 d8 00
	00 00		 mov	 rax, QWORD PTR [rax+216]
  0003b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR c$[rsp]
  00040	48 8b 91 38 33
	00 00		 mov	 rdx, QWORD PTR [rcx+13112]
  00047	48 8b 48 18	 mov	 rcx, QWORD PTR [rax+24]
  0004b	e8 00 00 00 00	 call	 PxList_Push

; 6998 : }

  00050	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00054	c3		 ret	 0
PxSocket_ErrbackComplete ENDP
_TEXT	ENDS
PUBLIC	??_C@_05DJGLEMPL@?$CIOsO?$CJ?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$PxSocket_HandleException DD imagerel $LN12
	DD	imagerel $LN12+676
	DD	imagerel $unwind$PxSocket_HandleException
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PxSocket_HandleException DD 011301H
	DD	0e213H
xdata	ENDS
;	COMDAT ??_C@_05DJGLEMPL@?$CIOsO?$CJ?$AA@
CONST	SEGMENT
??_C@_05DJGLEMPL@?$CIOsO?$CJ?$AA@ DB '(OsO)', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PxSocket_HandleException
_TEXT	SEGMENT
args$ = 32
pstate$ = 40
s$ = 48
list$ = 56
px$ = 64
result$ = 72
exc$ = 80
item$ = 88
func$ = 96
c$ = 128
syscall$ = 136
fatal$ = 144
PxSocket_HandleException PROC				; COMDAT

; 7002 : {

$LN12:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 7003 :     PxSocket *s = (PxSocket *)c->io_obj;

  00013	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  0001b	48 8b 80 a8 32
	00 00		 mov	 rax, QWORD PTR [rax+12968]
  00022	48 89 44 24 30	 mov	 QWORD PTR s$[rsp], rax

; 7004 :     PyObject *exc, *args, *func, *result;
; 7005 :     PxState *px;
; 7006 :     PyThreadState *pstate;
; 7007 :     PxListItem *item;
; 7008 :     PxListHead *list;
; 7009 : 
; 7010 :     assert(PyErr_Occurred());

  00027	e8 00 00 00 00	 call	 PyErr_Occurred
  0002c	48 85 c0	 test	 rax, rax
  0002f	75 1c		 jne	 SHORT $LN9@PxSocket_H
  00031	41 b8 62 1b 00
	00		 mov	 r8d, 7010		; 00001b62H
  00037	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0003e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CC@DNBCFJEA@?$AAP?$AAy?$AAE?$AAr?$AAr?$AA_?$AAO?$AAc?$AAc?$AAu?$AAr?$AAr?$AAe?$AAd?$AA?$CI?$AA?$CJ?$AA?$AA@
  00045	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0004b	33 c0		 xor	 eax, eax
$LN9@PxSocket_H:

; 7011 : 
; 7012 :     pstate = c->pstate;

  0004d	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  00055	48 8b 80 e8 00
	00 00		 mov	 rax, QWORD PTR [rax+232]
  0005c	48 89 44 24 28	 mov	 QWORD PTR pstate$[rsp], rax

; 7013 :     px = c->px;

  00061	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  00069	48 8b 80 d8 00
	00 00		 mov	 rax, QWORD PTR [rax+216]
  00070	48 89 44 24 40	 mov	 QWORD PTR px$[rsp], rax

; 7014 : 
; 7015 :     if (fatal)

  00075	83 bc 24 90 00
	00 00 00	 cmp	 DWORD PTR fatal$[rsp], 0
  0007d	74 05		 je	 SHORT $LN6@PxSocket_H

; 7016 :         goto error;

  0007f	e9 18 01 00 00	 jmp	 $error$130997
$LN6@PxSocket_H:

; 7017 : 
; 7018 :     READ_LOCK(s);

  00084	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s$[rsp]
  00089	e8 00 00 00 00	 call	 _read_lock

; 7019 :     func = s->exception_handler;

  0008e	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  00093	48 8b 80 e8 02
	00 00		 mov	 rax, QWORD PTR [rax+744]
  0009a	48 89 44 24 60	 mov	 QWORD PTR func$[rsp], rax

; 7020 :     READ_UNLOCK(s);

  0009f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s$[rsp]
  000a4	e8 00 00 00 00	 call	 _read_unlock

; 7021 : 
; 7022 :     if (!func)

  000a9	48 83 7c 24 60
	00		 cmp	 QWORD PTR func$[rsp], 0
  000af	75 05		 jne	 SHORT $LN5@PxSocket_H

; 7023 :         goto error;

  000b1	e9 e6 00 00 00	 jmp	 $error$130997
$LN5@PxSocket_H:

; 7024 : 
; 7025 :     exc = PyTuple_Pack(3, pstate->curexc_type,
; 7026 :                           pstate->curexc_value,
; 7027 :                           pstate->curexc_traceback);

  000b6	48 8b 44 24 28	 mov	 rax, QWORD PTR pstate$[rsp]
  000bb	4c 8b 48 58	 mov	 r9, QWORD PTR [rax+88]
  000bf	48 8b 44 24 28	 mov	 rax, QWORD PTR pstate$[rsp]
  000c4	4c 8b 40 50	 mov	 r8, QWORD PTR [rax+80]
  000c8	48 8b 44 24 28	 mov	 rax, QWORD PTR pstate$[rsp]
  000cd	48 8b 50 48	 mov	 rdx, QWORD PTR [rax+72]
  000d1	b9 03 00 00 00	 mov	 ecx, 3
  000d6	e8 00 00 00 00	 call	 PyTuple_Pack
  000db	48 89 44 24 50	 mov	 QWORD PTR exc$[rsp], rax

; 7028 :     if (!exc)

  000e0	48 83 7c 24 50
	00		 cmp	 QWORD PTR exc$[rsp], 0
  000e6	75 05		 jne	 SHORT $LN4@PxSocket_H

; 7029 :         goto error;

  000e8	e9 af 00 00 00	 jmp	 $error$130997
$LN4@PxSocket_H:

; 7030 : 
; 7031 :     PyErr_Clear();

  000ed	e8 00 00 00 00	 call	 PyErr_Clear

; 7032 :     args = Py_BuildValue("(OsO)", s, syscall, exc);

  000f2	4c 8b 4c 24 50	 mov	 r9, QWORD PTR exc$[rsp]
  000f7	4c 8b 84 24 88
	00 00 00	 mov	 r8, QWORD PTR syscall$[rsp]
  000ff	48 8b 54 24 30	 mov	 rdx, QWORD PTR s$[rsp]
  00104	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05DJGLEMPL@?$CIOsO?$CJ?$AA@
  0010b	e8 00 00 00 00	 call	 Py_BuildValue
  00110	48 89 44 24 20	 mov	 QWORD PTR args$[rsp], rax

; 7033 :     if (!args)

  00115	48 83 7c 24 20
	00		 cmp	 QWORD PTR args$[rsp], 0
  0011b	75 02		 jne	 SHORT $LN3@PxSocket_H

; 7034 :         goto error;

  0011d	eb 7d		 jmp	 SHORT $error$130997
$LN3@PxSocket_H:

; 7035 : 
; 7036 :     result = PyObject_CallObject(func, args);

  0011f	48 8b 54 24 20	 mov	 rdx, QWORD PTR args$[rsp]
  00124	48 8b 4c 24 60	 mov	 rcx, QWORD PTR func$[rsp]
  00129	e8 00 00 00 00	 call	 PyObject_CallObject
  0012e	48 89 44 24 48	 mov	 QWORD PTR result$[rsp], rax

; 7037 :     if (null_with_exc_or_non_none_return_type(result, pstate))

  00133	48 8b 54 24 28	 mov	 rdx, QWORD PTR pstate$[rsp]
  00138	48 8b 4c 24 48	 mov	 rcx, QWORD PTR result$[rsp]
  0013d	e8 00 00 00 00	 call	 null_with_exc_or_non_none_return_type
  00142	85 c0		 test	 eax, eax
  00144	74 02		 je	 SHORT $LN2@PxSocket_H

; 7038 :         goto error;

  00146	eb 54		 jmp	 SHORT $error$130997
$LN2@PxSocket_H:

; 7039 : 
; 7040 :     assert(!pstate->curexc_type);

  00148	48 8b 44 24 28	 mov	 rax, QWORD PTR pstate$[rsp]
  0014d	48 83 78 48 00	 cmp	 QWORD PTR [rax+72], 0
  00152	74 1c		 je	 SHORT $LN10@PxSocket_H
  00154	41 b8 80 1b 00
	00		 mov	 r8d, 7040		; 00001b80H
  0015a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00161	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@NNPNEEPB@?$AA?$CB?$AAp?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAe?$AAx?$AAc?$AA_?$AAt?$AAy?$AAp?$AAe?$AA?$AA@
  00168	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0016e	33 c0		 xor	 eax, eax
$LN10@PxSocket_H:

; 7041 : 
; 7042 :     /* XXX TODO: ratify possible socket states. */
; 7043 :     goto end;

  00170	e9 2a 01 00 00	 jmp	 $end$131006

; 7044 : 
; 7045 :     list = px->completed_errbacks;

  00175	48 8b 44 24 40	 mov	 rax, QWORD PTR px$[rsp]
  0017a	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  0017e	48 89 44 24 38	 mov	 QWORD PTR list$[rsp], rax

; 7046 :     item = c->errback_completed;

  00183	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  0018b	48 8b 80 38 33
	00 00		 mov	 rax, QWORD PTR [rax+13112]
  00192	48 89 44 24 58	 mov	 QWORD PTR item$[rsp], rax

; 7047 :     goto done;

  00197	e9 b2 00 00 00	 jmp	 $done$131007
$error$130997:

; 7048 : 
; 7049 : error:
; 7050 :     assert(pstate->curexc_type);

  0019c	48 8b 44 24 28	 mov	 rax, QWORD PTR pstate$[rsp]
  001a1	48 83 78 48 00	 cmp	 QWORD PTR [rax+72], 0
  001a6	75 1c		 jne	 SHORT $LN11@PxSocket_H
  001a8	41 b8 8a 1b 00
	00		 mov	 r8d, 7050		; 00001b8aH
  001ae	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  001b5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CI@FHCLAHIJ@?$AAp?$AAs?$AAt?$AAa?$AAt?$AAe?$AA?9?$AA?$DO?$AAc?$AAu?$AAr?$AAe?$AAx?$AAc?$AA_?$AAt?$AAy?$AAp?$AAe?$AA?$AA@
  001bc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001c2	33 c0		 xor	 eax, eax
$LN11@PxSocket_H:

; 7051 :     list = px->errors;

  001c4	48 8b 44 24 40	 mov	 rax, QWORD PTR px$[rsp]
  001c9	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  001cd	48 89 44 24 38	 mov	 QWORD PTR list$[rsp], rax

; 7052 :     item = c->error;

  001d2	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  001da	48 8b 80 28 33
	00 00		 mov	 rax, QWORD PTR [rax+13096]
  001e1	48 89 44 24 58	 mov	 QWORD PTR item$[rsp], rax

; 7053 :     item->p1 = pstate->curexc_type;

  001e6	48 8b 44 24 58	 mov	 rax, QWORD PTR item$[rsp]
  001eb	48 8b 4c 24 28	 mov	 rcx, QWORD PTR pstate$[rsp]
  001f0	48 8b 49 48	 mov	 rcx, QWORD PTR [rcx+72]
  001f4	48 89 48 20	 mov	 QWORD PTR [rax+32], rcx

; 7054 :     item->p2 = pstate->curexc_value;

  001f8	48 8b 44 24 58	 mov	 rax, QWORD PTR item$[rsp]
  001fd	48 8b 4c 24 28	 mov	 rcx, QWORD PTR pstate$[rsp]
  00202	48 8b 49 50	 mov	 rcx, QWORD PTR [rcx+80]
  00206	48 89 48 28	 mov	 QWORD PTR [rax+40], rcx

; 7055 :     item->p3 = pstate->curexc_traceback;

  0020a	48 8b 44 24 58	 mov	 rax, QWORD PTR item$[rsp]
  0020f	48 8b 4c 24 28	 mov	 rcx, QWORD PTR pstate$[rsp]
  00214	48 8b 49 58	 mov	 rcx, QWORD PTR [rcx+88]
  00218	48 89 48 30	 mov	 QWORD PTR [rax+48], rcx

; 7056 : 
; 7057 :     if (fatal && s->sock_fd != -1) {

  0021c	83 bc 24 90 00
	00 00 00	 cmp	 DWORD PTR fatal$[rsp], 0
  00224	74 28		 je	 SHORT $LN1@PxSocket_H
  00226	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  0022b	48 83 78 60 ff	 cmp	 QWORD PTR [rax+96], -1
  00230	74 1c		 je	 SHORT $LN1@PxSocket_H

; 7058 :         /* xxx todo: close threadpool io here or in context cleanup? */
; 7059 :         closesocket(s->sock_fd);

  00232	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  00237	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  0023b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_closesocket

; 7060 :         s->sock_fd = -1;

  00241	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  00246	48 c7 40 60 ff
	ff ff ff	 mov	 QWORD PTR [rax+96], -1
$LN1@PxSocket_H:
$done$131007:

; 7061 :     }
; 7062 : 
; 7063 : done:
; 7064 :     InterlockedExchange(&(c->done), 1);

  0024e	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  00256	48 05 04 38 00
	00		 add	 rax, 14340		; 00003804H
  0025c	b9 01 00 00 00	 mov	 ecx, 1
  00261	87 08		 xchg	 DWORD PTR [rax], ecx

; 7065 :     item->from = c;

  00263	48 8b 44 24 58	 mov	 rax, QWORD PTR item$[rsp]
  00268	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  00270	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 7066 :     PxList_TimestampItem(item);

  00274	48 8b 4c 24 58	 mov	 rcx, QWORD PTR item$[rsp]
  00279	e8 00 00 00 00	 call	 PxList_TimestampItem

; 7067 :     PxList_Push(list, item);

  0027e	48 8b 54 24 58	 mov	 rdx, QWORD PTR item$[rsp]
  00283	48 8b 4c 24 38	 mov	 rcx, QWORD PTR list$[rsp]
  00288	e8 00 00 00 00	 call	 PxList_Push

; 7068 :     SetEvent(px->wakeup);

  0028d	48 8b 44 24 40	 mov	 rax, QWORD PTR px$[rsp]
  00292	48 8b 88 a0 00
	00 00		 mov	 rcx, QWORD PTR [rax+160]
  00299	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SetEvent
$end$131006:

; 7069 : end:
; 7070 :     return;
; 7071 : }

  0029f	48 83 c4 78	 add	 rsp, 120		; 00000078H
  002a3	c3		 ret	 0
PxSocket_HandleException ENDP
_TEXT	ENDS
PUBLIC	??_C@_19HHIIBINK@?$AAn?$AAa?$AAm?$AAe?$AA?$AA@	; `string'
PUBLIC	PxSocket_HandleError
;	COMDAT pdata
pdata	SEGMENT
$pdata$PxSocket_HandleError DD imagerel $LN58
	DD	imagerel $LN58+1584
	DD	imagerel $unwind$PxSocket_HandleError
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PxSocket_HandleError DD 011701H
	DD	0e217H
xdata	ENDS
;	COMDAT ??_C@_19HHIIBINK@?$AAn?$AAa?$AAm?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_19HHIIBINK@?$AAn?$AAa?$AAm?$AAe?$AA?$AA@ DB 'n', 00H, 'a', 00H, 'm', 00H
	DB	'e', 00H, 00H, 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PxSocket_HandleError
_TEXT	SEGMENT
args$ = 32
pstate$ = 40
s$ = 48
name$ = 56
px$ = 64
result$ = 72
func$ = 80
tv73 = 88
tv218 = 96
c$ = 128
op$ = 136
syscall$ = 144
errcode$ = 152
PxSocket_HandleError PROC				; COMDAT

; 7079 : {

$LN58:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 7080 :     PxState *px = c->px;

  00017	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  0001f	48 8b 80 d8 00
	00 00		 mov	 rax, QWORD PTR [rax+216]
  00026	48 89 44 24 40	 mov	 QWORD PTR px$[rsp], rax

; 7081 :     PxSocket *s = (PxSocket *)c->io_obj;

  0002b	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  00033	48 8b 80 a8 32
	00 00		 mov	 rax, QWORD PTR [rax+12968]
  0003a	48 89 44 24 30	 mov	 QWORD PTR s$[rsp], rax

; 7082 :     PyThreadState *pstate = c->pstate;

  0003f	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  00047	48 8b 80 e8 00
	00 00		 mov	 rax, QWORD PTR [rax+232]
  0004e	48 89 44 24 28	 mov	 QWORD PTR pstate$[rsp], rax

; 7083 :     PyObject *func, *args, *result;
; 7084 :     char *name = NULL;

  00053	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR name$[rsp], 0

; 7085 : 
; 7086 :     assert(!PyErr_Occurred());

  0005c	e8 00 00 00 00	 call	 PyErr_Occurred
  00061	48 85 c0	 test	 rax, rax
  00064	74 1c		 je	 SHORT $LN42@PxSocket_H@2
  00066	41 b8 ae 1b 00
	00		 mov	 r8d, 7086		; 00001baeH
  0006c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00073	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CE@JKFGJBND@?$AA?$CB?$AAP?$AAy?$AAE?$AAr?$AAr?$AA_?$AAO?$AAc?$AAc?$AAu?$AAr?$AAr?$AAe?$AAd?$AA?$CI?$AA?$CJ?$AA?$AA@
  0007a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00080	33 c0		 xor	 eax, eax
$LN42@PxSocket_H@2:

; 7087 : 
; 7088 :     switch (errcode) {

  00082	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR errcode$[rsp]
  00089	89 44 24 58	 mov	 DWORD PTR tv73[rsp], eax
  0008d	81 7c 24 58 14
	27 00 00	 cmp	 DWORD PTR tv73[rsp], 10004 ; 00002714H
  00095	0f 8f 88 00 00
	00		 jg	 $LN49@PxSocket_H@2
  0009b	81 7c 24 58 14
	27 00 00	 cmp	 DWORD PTR tv73[rsp], 10004 ; 00002714H
  000a3	0f 84 d5 01 00
	00		 je	 $LN30@PxSocket_H@2
  000a9	81 7c 24 58 ea
	00 00 00	 cmp	 DWORD PTR tv73[rsp], 234 ; 000000eaH
  000b1	7f 3b		 jg	 SHORT $LN50@PxSocket_H@2
  000b3	81 7c 24 58 ea
	00 00 00	 cmp	 DWORD PTR tv73[rsp], 234 ; 000000eaH
  000bb	0f 84 16 02 00
	00		 je	 $LN26@PxSocket_H@2
  000c1	83 7c 24 58 06	 cmp	 DWORD PTR tv73[rsp], 6
  000c6	0f 84 b2 01 00
	00		 je	 $LN30@PxSocket_H@2
  000cc	83 7c 24 58 08	 cmp	 DWORD PTR tv73[rsp], 8
  000d1	0f 84 a7 01 00
	00		 je	 $LN30@PxSocket_H@2
  000d7	83 7c 24 58 40	 cmp	 DWORD PTR tv73[rsp], 64	; 00000040H
  000dc	74 7d		 je	 SHORT $LN37@PxSocket_H@2
  000de	83 7c 24 58 57	 cmp	 DWORD PTR tv73[rsp], 87	; 00000057H
  000e3	0f 84 95 01 00
	00		 je	 $LN30@PxSocket_H@2
  000e9	e9 82 02 00 00	 jmp	 $LN23@PxSocket_H@2
$LN50@PxSocket_H@2:
  000ee	81 7c 24 58 e3
	03 00 00	 cmp	 DWORD PTR tv73[rsp], 995 ; 000003e3H
  000f6	0f 84 82 01 00
	00		 je	 $LN30@PxSocket_H@2
  000fc	81 7c 24 58 e5
	03 00 00	 cmp	 DWORD PTR tv73[rsp], 997 ; 000003e5H
  00104	0f 84 00 02 00
	00		 je	 $LN25@PxSocket_H@2
  0010a	81 7c 24 58 d2
	04 00 00	 cmp	 DWORD PTR tv73[rsp], 1234 ; 000004d2H
  00112	74 47		 je	 SHORT $LN37@PxSocket_H@2
  00114	81 7c 24 58 d4
	04 00 00	 cmp	 DWORD PTR tv73[rsp], 1236 ; 000004d4H
  0011c	74 3d		 je	 SHORT $LN37@PxSocket_H@2
  0011e	e9 4d 02 00 00	 jmp	 $LN23@PxSocket_H@2
$LN49@PxSocket_H@2:
  00123	8b 44 24 58	 mov	 eax, DWORD PTR tv73[rsp]
  00127	2d 1e 27 00 00	 sub	 eax, 10014		; 0000271eH
  0012c	89 44 24 58	 mov	 DWORD PTR tv73[rsp], eax
  00130	83 7c 24 58 57	 cmp	 DWORD PTR tv73[rsp], 87	; 00000057H
  00135	0f 87 35 02 00
	00		 ja	 $LN23@PxSocket_H@2
  0013b	48 63 44 24 58	 movsxd	 rax, DWORD PTR tv73[rsp]
  00140	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  00147	0f b6 84 01 00
	00 00 00	 movzx	 eax, BYTE PTR $LN56@PxSocket_H@2[rcx+rax]
  0014f	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN57@PxSocket_H@2[rcx+rax*4]
  00156	48 03 c1	 add	 rax, rcx
  00159	ff e0		 jmp	 rax
$LN37@PxSocket_H@2:

; 7089 :         case ERROR_PORT_UNREACHABLE:
; 7090 :         case ERROR_CONNECTION_ABORTED:
; 7091 :         case ERROR_NETNAME_DELETED:
; 7092 :         case WSAECONNRESET:
; 7093 :         case WSAENETDOWN:
; 7094 :         case WSAENETRESET:
; 7095 :         case WSAECONNABORTED:
; 7096 :         case WSAENOTCONN:
; 7097 :         case WSAEDISCON:
; 7098 :             Px_SOCKFLAGS(s) |= Px_SOCKFLAGS_CLOSE_SCHEDULED;

  0015b	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  00160	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  00166	0f ba e8 16	 bts	 eax, 22
  0016a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s$[rsp]
  0016f	89 81 f4 01 00
	00		 mov	 DWORD PTR [rcx+500], eax

; 7099 :             break;

  00175	e9 80 02 00 00	 jmp	 $LN38@PxSocket_H@2
$LN36@PxSocket_H@2:

; 7100 : 
; 7101 :         case WSAETIMEDOUT:
; 7102 :             Px_SOCKFLAGS(s) |= Px_SOCKFLAGS_CLOSE_SCHEDULED;

  0017a	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  0017f	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  00185	0f ba e8 16	 bts	 eax, 22
  00189	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s$[rsp]
  0018e	89 81 f4 01 00
	00		 mov	 DWORD PTR [rcx+500], eax

; 7103 :             Px_SOCKFLAGS(s) |= Px_SOCKFLAGS_TIMEDOUT;

  00194	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  00199	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  0019f	0f ba e8 18	 bts	 eax, 24
  001a3	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s$[rsp]
  001a8	89 81 f4 01 00
	00		 mov	 DWORD PTR [rcx+500], eax

; 7104 :             break;

  001ae	e9 47 02 00 00	 jmp	 $LN38@PxSocket_H@2
$LN35@PxSocket_H@2:

; 7105 : 
; 7106 :         case WSAESHUTDOWN:
; 7107 :             if (s->io_op == PxSocket_IO_SEND) {

  001b3	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  001b8	83 b8 50 03 00
	00 08		 cmp	 DWORD PTR [rax+848], 8
  001bf	75 28		 jne	 SHORT $LN34@PxSocket_H@2

; 7108 :                 Px_SOCKFLAGS(s) |= Px_SOCKFLAGS_SEND_SHUTDOWN;

  001c1	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  001c6	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  001cc	0f ba e8 11	 bts	 eax, 17
  001d0	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s$[rsp]
  001d5	89 81 f4 01 00
	00		 mov	 DWORD PTR [rcx+500], eax

; 7109 :                 name = "send_shutdown";

  001db	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0O@IDBDAEOD@send_shutdown?$AA@
  001e2	48 89 44 24 38	 mov	 QWORD PTR name$[rsp], rax
  001e7	eb 34		 jmp	 SHORT $LN33@PxSocket_H@2
$LN34@PxSocket_H@2:

; 7110 :             } else if (s->io_op == PxSocket_IO_RECV) {

  001e9	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  001ee	83 b8 50 03 00
	00 04		 cmp	 DWORD PTR [rax+848], 4
  001f5	75 26		 jne	 SHORT $LN32@PxSocket_H@2

; 7111 :                 Px_SOCKFLAGS(s) |= Px_SOCKFLAGS_RECV_SHUTDOWN;

  001f7	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  001fc	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  00202	0f ba e8 12	 bts	 eax, 18
  00206	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s$[rsp]
  0020b	89 81 f4 01 00
	00		 mov	 DWORD PTR [rcx+500], eax

; 7112 :                 name = "recv_shutdown";

  00211	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0O@HGCJJJHB@recv_shutdown?$AA@
  00218	48 89 44 24 38	 mov	 QWORD PTR name$[rsp], rax
$LN32@PxSocket_H@2:
$LN33@PxSocket_H@2:

; 7113 :             }
; 7114 : 
; 7115 :             if ((Px_SOCKFLAGS(s) & Px_SOCKFLAGS_SEND_SHUTDOWN) &&
; 7116 :                 (Px_SOCKFLAGS(s) & Px_SOCKFLAGS_RECV_SHUTDOWN)) {

  0021d	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  00222	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  00228	25 00 00 02 00	 and	 eax, 131072		; 00020000H
  0022d	85 c0		 test	 eax, eax
  0022f	74 48		 je	 SHORT $LN31@PxSocket_H@2
  00231	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  00236	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  0023c	25 00 00 04 00	 and	 eax, 262144		; 00040000H
  00241	85 c0		 test	 eax, eax
  00243	74 34		 je	 SHORT $LN31@PxSocket_H@2

; 7117 :                 Px_SOCKFLAGS(s) |= Px_SOCKFLAGS_BOTH_SHUTDOWN;

  00245	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  0024a	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  00250	0f ba e8 13	 bts	 eax, 19
  00254	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s$[rsp]
  00259	89 81 f4 01 00
	00		 mov	 DWORD PTR [rcx+500], eax

; 7118 :                 Px_SOCKFLAGS(s) |= Px_SOCKFLAGS_CLOSE_SCHEDULED;

  0025f	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  00264	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  0026a	0f ba e8 16	 bts	 eax, 22
  0026e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s$[rsp]
  00273	89 81 f4 01 00
	00		 mov	 DWORD PTR [rcx+500], eax
$LN31@PxSocket_H@2:

; 7119 :             }
; 7120 :             break;

  00279	e9 7c 01 00 00	 jmp	 $LN38@PxSocket_H@2
$LN30@PxSocket_H@2:

; 7121 : 
; 7122 :         /* (we shouldn't see any of these in normal operating conditions) */
; 7123 :         case WSAEINTR:
; 7124 :         case WSAEINVAL:
; 7125 :         case WSAEFAULT:
; 7126 :         case WSAEMSGSIZE:
; 7127 :         case WSAEOPNOTSUPP:
; 7128 :         case WSAEINPROGRESS:
; 7129 :         case WSA_OPERATION_ABORTED:
; 7130 :         case WSAENOTSOCK:
; 7131 :         case WSANOTINITIALISED:
; 7132 :         case WSAESOCKTNOSUPPORT:
; 7133 :         case WSA_NOT_ENOUGH_MEMORY:
; 7134 :         case WSA_INVALID_HANDLE:
; 7135 :         case WSA_INVALID_PARAMETER:
; 7136 :         case WSAEADDRNOTAVAIL:
; 7137 :         case WSAEADDRINUSE:
; 7138 :             PyErr_SetFromWindowsErr(errcode);

  0027e	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR errcode$[rsp]
  00285	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
$LN29@PxSocket_H@2:

; 7139 :             PxSocket_EXCEPTION();

  0028a	e8 00 00 00 00	 call	 PyErr_Occurred
  0028f	48 85 c0	 test	 rax, rax
  00292	75 1c		 jne	 SHORT $LN43@PxSocket_H@2
  00294	41 b8 e3 1b 00
	00		 mov	 r8d, 7139		; 00001be3H
  0029a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  002a1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CC@DNBCFJEA@?$AAP?$AAy?$AAE?$AAr?$AAr?$AA_?$AAO?$AAc?$AAc?$AAu?$AAr?$AAr?$AAe?$AAd?$AA?$CI?$AA?$CJ?$AA?$AA@
  002a8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  002ae	33 c0		 xor	 eax, eax
$LN43@PxSocket_H@2:
  002b0	45 33 c0	 xor	 r8d, r8d
  002b3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  002ba	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  002c2	e8 00 00 00 00	 call	 PxSocket_HandleException
  002c7	e9 ec 02 00 00	 jmp	 $end$131054
  002cc	33 c0		 xor	 eax, eax
  002ce	85 c0		 test	 eax, eax
  002d0	75 b8		 jne	 SHORT $LN29@PxSocket_H@2

; 7140 :             break;

  002d2	e9 23 01 00 00	 jmp	 $LN38@PxSocket_H@2
$LN26@PxSocket_H@2:

; 7141 : 
; 7142 :         /* errors that indicate our socket logic is broken */
; 7143 :         case ERROR_MORE_DATA:
; 7144 :             assert(0);

  002d7	33 c0		 xor	 eax, eax
  002d9	85 c0		 test	 eax, eax
  002db	75 1c		 jne	 SHORT $LN44@PxSocket_H@2
  002dd	41 b8 e8 1b 00
	00		 mov	 r8d, 7144		; 00001be8H
  002e3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  002ea	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_13COJANIEC@?$AA0?$AA?$AA@
  002f1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  002f7	33 c0		 xor	 eax, eax
$LN44@PxSocket_H@2:

; 7145 :             Py_FatalError("ERROR_MORE_DATA");

  002f9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@JMGJABEC@ERROR_MORE_DATA?$AA@
  00300	e8 00 00 00 00	 call	 Py_FatalError

; 7146 :             break;

  00305	e9 f0 00 00 00	 jmp	 $LN38@PxSocket_H@2
$LN25@PxSocket_H@2:

; 7147 : 
; 7148 :         case ERROR_IO_PENDING:
; 7149 :             assert(0);

  0030a	33 c0		 xor	 eax, eax
  0030c	85 c0		 test	 eax, eax
  0030e	75 1c		 jne	 SHORT $LN45@PxSocket_H@2
  00310	41 b8 ed 1b 00
	00		 mov	 r8d, 7149		; 00001bedH
  00316	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0031d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_13COJANIEC@?$AA0?$AA?$AA@
  00324	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0032a	33 c0		 xor	 eax, eax
$LN45@PxSocket_H@2:

; 7150 :             Py_FatalError("ERROR_IO_PENDING");

  0032c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@FBEBJMAM@ERROR_IO_PENDING?$AA@
  00333	e8 00 00 00 00	 call	 Py_FatalError

; 7151 :             break;

  00338	e9 bd 00 00 00	 jmp	 $LN38@PxSocket_H@2
$LN24@PxSocket_H@2:

; 7152 : 
; 7153 :         case WSAEWOULDBLOCK:
; 7154 :             assert(0);

  0033d	33 c0		 xor	 eax, eax
  0033f	85 c0		 test	 eax, eax
  00341	75 1c		 jne	 SHORT $LN46@PxSocket_H@2
  00343	41 b8 f2 1b 00
	00		 mov	 r8d, 7154		; 00001bf2H
  00349	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00350	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_13COJANIEC@?$AA0?$AA?$AA@
  00357	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0035d	33 c0		 xor	 eax, eax
$LN46@PxSocket_H@2:

; 7155 :             Py_FatalError("WSAEWOULDBLOCK!");

  0035f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@KFHPAKD@WSAEWOULDBLOCK?$CB?$AA@
  00366	e8 00 00 00 00	 call	 Py_FatalError

; 7156 :             break;

  0036b	e9 8a 00 00 00	 jmp	 $LN38@PxSocket_H@2
$LN23@PxSocket_H@2:

; 7157 : 
; 7158 :         default:
; 7159 :             printf("unknown error code: %d\n", errcode);

  00370	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR errcode$[rsp]
  00377	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@MJHHLNDN@unknown?5error?5code?3?5?$CFd?6?$AA@
  0037e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_printf

; 7160 :             assert(0);

  00384	33 c0		 xor	 eax, eax
  00386	85 c0		 test	 eax, eax
  00388	75 1c		 jne	 SHORT $LN47@PxSocket_H@2
  0038a	41 b8 f8 1b 00
	00		 mov	 r8d, 7160		; 00001bf8H
  00390	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00397	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_13COJANIEC@?$AA0?$AA?$AA@
  0039e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  003a4	33 c0		 xor	 eax, eax
$LN47@PxSocket_H@2:

; 7161 :             PyErr_SetFromWindowsErr(errcode);

  003a6	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR errcode$[rsp]
  003ad	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
$LN22@PxSocket_H@2:

; 7162 :             PxSocket_EXCEPTION();

  003b2	e8 00 00 00 00	 call	 PyErr_Occurred
  003b7	48 85 c0	 test	 rax, rax
  003ba	75 1c		 jne	 SHORT $LN48@PxSocket_H@2
  003bc	41 b8 fa 1b 00
	00		 mov	 r8d, 7162		; 00001bfaH
  003c2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  003c9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CC@DNBCFJEA@?$AAP?$AAy?$AAE?$AAr?$AAr?$AA_?$AAO?$AAc?$AAc?$AAu?$AAr?$AAr?$AAe?$AAd?$AA?$CI?$AA?$CJ?$AA?$AA@
  003d0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  003d6	33 c0		 xor	 eax, eax
$LN48@PxSocket_H@2:
  003d8	45 33 c0	 xor	 r8d, r8d
  003db	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  003e2	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  003ea	e8 00 00 00 00	 call	 PxSocket_HandleException
  003ef	e9 c4 01 00 00	 jmp	 $end$131054
  003f4	33 c0		 xor	 eax, eax
  003f6	85 c0		 test	 eax, eax
  003f8	75 b8		 jne	 SHORT $LN22@PxSocket_H@2
$LN38@PxSocket_H@2:
$LN19@PxSocket_H@2:

; 7163 :             break;
; 7164 :     }
; 7165 : 
; 7166 :     MAYBE_DO_SEND_FAILED();

  003fa	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s$[rsp]
  003ff	e8 00 00 00 00	 call	 _MAYBE_DO_SEND_FAILED
  00404	85 c0		 test	 eax, eax
  00406	74 05		 je	 SHORT $LN16@PxSocket_H@2
  00408	e9 ab 01 00 00	 jmp	 $end$131054
$LN16@PxSocket_H@2:
  0040d	33 c0		 xor	 eax, eax
  0040f	85 c0		 test	 eax, eax
  00411	75 e7		 jne	 SHORT $LN19@PxSocket_H@2

; 7167 : 
; 7168 :     if (!name)

  00413	48 83 7c 24 38
	00		 cmp	 QWORD PTR name$[rsp], 0
  00419	75 05		 jne	 SHORT $LN15@PxSocket_H@2

; 7169 :         goto maybe_close;

  0041b	e9 7f 01 00 00	 jmp	 $maybe_close$131072
$LN15@PxSocket_H@2:

; 7170 : 
; 7171 :     assert(name);

  00420	48 83 7c 24 38
	00		 cmp	 QWORD PTR name$[rsp], 0
  00426	75 1c		 jne	 SHORT $LN51@PxSocket_H@2
  00428	41 b8 03 1c 00
	00		 mov	 r8d, 7171		; 00001c03H
  0042e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00435	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_19HHIIBINK@?$AAn?$AAa?$AAm?$AAe?$AA?$AA@
  0043c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00442	33 c0		 xor	 eax, eax
$LN51@PxSocket_H@2:

; 7172 :     READ_LOCK(s);

  00444	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s$[rsp]
  00449	e8 00 00 00 00	 call	 _read_lock

; 7173 :     func = PxSocket_GET_ATTR(name);

  0044e	48 8b 54 24 38	 mov	 rdx, QWORD PTR name$[rsp]
  00453	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  00458	48 8b 88 90 02
	00 00		 mov	 rcx, QWORD PTR [rax+656]
  0045f	e8 00 00 00 00	 call	 PyObject_HasAttrString
  00464	85 c0		 test	 eax, eax
  00466	74 1d		 je	 SHORT $LN52@PxSocket_H@2
  00468	48 8b 54 24 38	 mov	 rdx, QWORD PTR name$[rsp]
  0046d	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  00472	48 8b 88 90 02
	00 00		 mov	 rcx, QWORD PTR [rax+656]
  00479	e8 00 00 00 00	 call	 PyObject_GetAttrString
  0047e	48 89 44 24 60	 mov	 QWORD PTR tv218[rsp], rax
  00483	eb 0c		 jmp	 SHORT $LN53@PxSocket_H@2
$LN52@PxSocket_H@2:
  00485	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0048c	48 89 44 24 60	 mov	 QWORD PTR tv218[rsp], rax
$LN53@PxSocket_H@2:
  00491	48 8b 44 24 60	 mov	 rax, QWORD PTR tv218[rsp]
  00496	48 89 44 24 50	 mov	 QWORD PTR func$[rsp], rax

; 7174 :     READ_UNLOCK(s);

  0049b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s$[rsp]
  004a0	e8 00 00 00 00	 call	 _read_unlock

; 7175 : 
; 7176 :     if (!func || func == Py_None)

  004a5	48 83 7c 24 50
	00		 cmp	 QWORD PTR func$[rsp], 0
  004ab	74 0e		 je	 SHORT $LN13@PxSocket_H@2
  004ad	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  004b4	48 39 44 24 50	 cmp	 QWORD PTR func$[rsp], rax
  004b9	75 05		 jne	 SHORT $LN14@PxSocket_H@2
$LN13@PxSocket_H@2:

; 7177 :         goto maybe_close;

  004bb	e9 df 00 00 00	 jmp	 $maybe_close$131072
$LN14@PxSocket_H@2:

; 7178 : 
; 7179 :     args = Py_BuildValue("(O)", s);

  004c0	48 8b 54 24 30	 mov	 rdx, QWORD PTR s$[rsp]
  004c5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03IELNPCCE@?$CIO?$CJ?$AA@
  004cc	e8 00 00 00 00	 call	 Py_BuildValue
  004d1	48 89 44 24 20	 mov	 QWORD PTR args$[rsp], rax

; 7180 :     if (!args)

  004d6	48 83 7c 24 20
	00		 cmp	 QWORD PTR args$[rsp], 0
  004dc	75 4b		 jne	 SHORT $LN12@PxSocket_H@2
$LN11@PxSocket_H@2:

; 7181 :         PxSocket_FATAL();

  004de	e8 00 00 00 00	 call	 PyErr_Occurred
  004e3	48 85 c0	 test	 rax, rax
  004e6	75 1c		 jne	 SHORT $LN54@PxSocket_H@2
  004e8	41 b8 0d 1c 00
	00		 mov	 r8d, 7181		; 00001c0dH
  004ee	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  004f5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CC@DNBCFJEA@?$AAP?$AAy?$AAE?$AAr?$AAr?$AA_?$AAO?$AAc?$AAc?$AAu?$AAr?$AAr?$AAe?$AAd?$AA?$CI?$AA?$CJ?$AA?$AA@
  004fc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00502	33 c0		 xor	 eax, eax
$LN54@PxSocket_H@2:
  00504	41 b8 01 00 00
	00		 mov	 r8d, 1
  0050a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  00511	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  00519	e8 00 00 00 00	 call	 PxSocket_HandleException
  0051e	e9 95 00 00 00	 jmp	 $end$131054
  00523	33 c0		 xor	 eax, eax
  00525	85 c0		 test	 eax, eax
  00527	75 b5		 jne	 SHORT $LN11@PxSocket_H@2
$LN12@PxSocket_H@2:

; 7182 : 
; 7183 :     result = PyObject_CallObject(func, args);

  00529	48 8b 54 24 20	 mov	 rdx, QWORD PTR args$[rsp]
  0052e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR func$[rsp]
  00533	e8 00 00 00 00	 call	 PyObject_CallObject
  00538	48 89 44 24 48	 mov	 QWORD PTR result$[rsp], rax

; 7184 :     if (null_with_exc_or_non_none_return_type(result, c->pstate))

  0053d	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  00545	48 8b 90 e8 00
	00 00		 mov	 rdx, QWORD PTR [rax+232]
  0054c	48 8b 4c 24 48	 mov	 rcx, QWORD PTR result$[rsp]
  00551	e8 00 00 00 00	 call	 null_with_exc_or_non_none_return_type
  00556	85 c0		 test	 eax, eax
  00558	74 45		 je	 SHORT $LN8@PxSocket_H@2
$LN7@PxSocket_H@2:

; 7185 :         PxSocket_EXCEPTION();

  0055a	e8 00 00 00 00	 call	 PyErr_Occurred
  0055f	48 85 c0	 test	 rax, rax
  00562	75 1c		 jne	 SHORT $LN55@PxSocket_H@2
  00564	41 b8 11 1c 00
	00		 mov	 r8d, 7185		; 00001c11H
  0056a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00571	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CC@DNBCFJEA@?$AAP?$AAy?$AAE?$AAr?$AAr?$AA_?$AAO?$AAc?$AAc?$AAu?$AAr?$AAr?$AAe?$AAd?$AA?$CI?$AA?$CJ?$AA?$AA@
  00578	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0057e	33 c0		 xor	 eax, eax
$LN55@PxSocket_H@2:
  00580	45 33 c0	 xor	 r8d, r8d
  00583	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  0058a	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  00592	e8 00 00 00 00	 call	 PxSocket_HandleException
  00597	eb 1f		 jmp	 SHORT $end$131054
  00599	33 c0		 xor	 eax, eax
  0059b	85 c0		 test	 eax, eax
  0059d	75 bb		 jne	 SHORT $LN7@PxSocket_H@2
$LN8@PxSocket_H@2:
$maybe_close$131072:
$LN4@PxSocket_H@2:

; 7186 : 
; 7187 : maybe_close:
; 7188 :     MAYBE_CLOSE();

  0059f	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  005a7	e8 00 00 00 00	 call	 _MAYBE_CLOSE
  005ac	85 c0		 test	 eax, eax
  005ae	74 02		 je	 SHORT $LN1@PxSocket_H@2
  005b0	eb 06		 jmp	 SHORT $end$131054
$LN1@PxSocket_H@2:
  005b2	33 c0		 xor	 eax, eax
  005b4	85 c0		 test	 eax, eax
  005b6	75 e7		 jne	 SHORT $LN4@PxSocket_H@2
$end$131054:

; 7189 : 
; 7190 : end:
; 7191 :     return;
; 7192 : }

  005b8	48 83 c4 78	 add	 rsp, 120		; 00000078H
  005bc	c3		 ret	 0
  005bd	0f 1f 00	 npad	 3
$LN57@PxSocket_H@2:
  005c0	00 00 00 00	 DD	 $LN30@PxSocket_H@2
  005c4	00 00 00 00	 DD	 $LN24@PxSocket_H@2
  005c8	00 00 00 00	 DD	 $LN37@PxSocket_H@2
  005cc	00 00 00 00	 DD	 $LN35@PxSocket_H@2
  005d0	00 00 00 00	 DD	 $LN36@PxSocket_H@2
  005d4	00 00 00 00	 DD	 $LN23@PxSocket_H@2
$LN56@PxSocket_H@2:
  005d8	00		 DB	 0
  005d9	05		 DB	 5
  005da	05		 DB	 5
  005db	05		 DB	 5
  005dc	05		 DB	 5
  005dd	05		 DB	 5
  005de	05		 DB	 5
  005df	05		 DB	 5
  005e0	00		 DB	 0
  005e1	05		 DB	 5
  005e2	05		 DB	 5
  005e3	05		 DB	 5
  005e4	05		 DB	 5
  005e5	05		 DB	 5
  005e6	05		 DB	 5
  005e7	05		 DB	 5
  005e8	05		 DB	 5
  005e9	05		 DB	 5
  005ea	05		 DB	 5
  005eb	05		 DB	 5
  005ec	05		 DB	 5
  005ed	01		 DB	 1
  005ee	00		 DB	 0
  005ef	05		 DB	 5
  005f0	00		 DB	 0
  005f1	05		 DB	 5
  005f2	00		 DB	 0
  005f3	05		 DB	 5
  005f4	05		 DB	 5
  005f5	05		 DB	 5
  005f6	00		 DB	 0
  005f7	00		 DB	 0
  005f8	05		 DB	 5
  005f9	05		 DB	 5
  005fa	00		 DB	 0
  005fb	00		 DB	 0
  005fc	02		 DB	 2
  005fd	05		 DB	 5
  005fe	02		 DB	 2
  005ff	02		 DB	 2
  00600	02		 DB	 2
  00601	05		 DB	 5
  00602	05		 DB	 5
  00603	02		 DB	 2
  00604	03		 DB	 3
  00605	05		 DB	 5
  00606	04		 DB	 4
  00607	05		 DB	 5
  00608	05		 DB	 5
  00609	05		 DB	 5
  0060a	05		 DB	 5
  0060b	05		 DB	 5
  0060c	05		 DB	 5
  0060d	05		 DB	 5
  0060e	05		 DB	 5
  0060f	05		 DB	 5
  00610	05		 DB	 5
  00611	05		 DB	 5
  00612	05		 DB	 5
  00613	05		 DB	 5
  00614	05		 DB	 5
  00615	05		 DB	 5
  00616	05		 DB	 5
  00617	05		 DB	 5
  00618	05		 DB	 5
  00619	05		 DB	 5
  0061a	05		 DB	 5
  0061b	05		 DB	 5
  0061c	05		 DB	 5
  0061d	05		 DB	 5
  0061e	05		 DB	 5
  0061f	05		 DB	 5
  00620	05		 DB	 5
  00621	05		 DB	 5
  00622	05		 DB	 5
  00623	05		 DB	 5
  00624	05		 DB	 5
  00625	05		 DB	 5
  00626	05		 DB	 5
  00627	00		 DB	 0
  00628	05		 DB	 5
  00629	05		 DB	 5
  0062a	05		 DB	 5
  0062b	05		 DB	 5
  0062c	05		 DB	 5
  0062d	05		 DB	 5
  0062e	05		 DB	 5
  0062f	02		 DB	 2
PxSocket_HandleError ENDP
_TEXT	ENDS
PUBLIC	PxSocket_HandleCallback
PUBLIC	??_C@_0N@LCHEMHG@DisconnectEx?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$_MAYBE_CLOSE DD imagerel _MAYBE_CLOSE
	DD	imagerel _MAYBE_CLOSE+380
	DD	imagerel $unwind$_MAYBE_CLOSE
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_MAYBE_CLOSE DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0N@LCHEMHG@DisconnectEx?$AA@
CONST	SEGMENT
??_C@_0N@LCHEMHG@DisconnectEx?$AA@ DB 'DisconnectEx', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _MAYBE_CLOSE
_TEXT	SEGMENT
s$ = 32
error$130201 = 40
success$130200 = 44
c$ = 64
_MAYBE_CLOSE PROC					; COMDAT

; 5746 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 5747 :     PxSocket *s = (PxSocket *)c->io_obj;

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR c$[rsp]
  0000e	48 8b 80 a8 32
	00 00		 mov	 rax, QWORD PTR [rax+12968]
  00015	48 89 44 24 20	 mov	 QWORD PTR s$[rsp], rax

; 5748 :     if ((Px_SOCKFLAGS(s) & Px_SOCKFLAGS_CLOSE_SCHEDULED) ||
; 5749 :        !(s->data_received))

  0001a	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  0001f	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  00025	25 00 00 40 00	 and	 eax, 4194304		; 00400000H
  0002a	85 c0		 test	 eax, eax
  0002c	75 13		 jne	 SHORT $LN7@MAYBE_CLOS
  0002e	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  00033	48 83 b8 c8 02
	00 00 00	 cmp	 QWORD PTR [rax+712], 0
  0003b	0f 85 34 01 00
	00		 jne	 $LN8@MAYBE_CLOS
$LN7@MAYBE_CLOS:

; 5750 :     {
; 5751 :         BOOL success;
; 5752 :         char error = 0;

  00041	c6 44 24 28 00	 mov	 BYTE PTR error$130201[rsp], 0

; 5753 : 
; 5754 :         assert(!(Px_SOCKFLAGS(s) & Px_SOCKFLAGS_CLOSED));

  00046	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  0004b	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  00051	25 00 00 80 00	 and	 eax, 8388608		; 00800000H
  00056	85 c0		 test	 eax, eax
  00058	74 1c		 je	 SHORT $LN11@MAYBE_CLOS
  0005a	41 b8 7a 16 00
	00		 mov	 r8d, 5754		; 0000167aH
  00060	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00067	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FC@HAOICEN@?$AA?$CB?$AA?$CI?$AAP?$AAx?$AA_?$AAS?$AAO?$AAC?$AAK?$AAF?$AAL?$AAA?$AAG?$AAS?$AA?$CI?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?5?$AAP?$AAx?$AA_?$AAS?$AAO?$AAC?$AAK?$AAF?$AAL?$AAA?$AAG?$AAS@
  0006e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00074	33 c0		 xor	 eax, eax
$LN11@MAYBE_CLOS:

; 5755 : 
; 5756 :         s->io_op = PxSocket_IO_CLOSE;

  00076	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  0007b	c7 80 50 03 00
	00 20 00 00 00	 mov	 DWORD PTR [rax+848], 32	; 00000020H

; 5757 : 
; 5758 :         success = DisconnectEx(s->sock_fd, NULL, 0 /*TF_REUSE_SOCKET*/, 0);

  00085	45 33 c9	 xor	 r9d, r9d
  00088	45 33 c0	 xor	 r8d, r8d
  0008b	33 d2		 xor	 edx, edx
  0008d	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  00092	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00096	ff 15 68 00 00
	00		 call	 QWORD PTR PySocketModule+104
  0009c	89 44 24 2c	 mov	 DWORD PTR success$130200[rsp], eax

; 5759 :         if (!success) {

  000a0	83 7c 24 2c 00	 cmp	 DWORD PTR success$130200[rsp], 0
  000a5	75 20		 jne	 SHORT $LN6@MAYBE_CLOS

; 5760 :             if (WSAGetLastError() == WSAEWOULDBLOCK)

  000a7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WSAGetLastError
  000ad	3d 33 27 00 00	 cmp	 eax, 10035		; 00002733H
  000b2	75 0e		 jne	 SHORT $LN5@MAYBE_CLOS

; 5761 :                 Py_FatalError("DisconnectEx() -> WSAEWOULDBLOCK!");

  000b4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CC@ODEEEBEO@DisconnectEx?$CI?$CJ?5?9?$DO?5WSAEWOULDBLOCK@
  000bb	e8 00 00 00 00	 call	 Py_FatalError

; 5762 :             else

  000c0	eb 05		 jmp	 SHORT $LN4@MAYBE_CLOS
$LN5@MAYBE_CLOS:

; 5763 :                 error = 1;

  000c2	c6 44 24 28 01	 mov	 BYTE PTR error$130201[rsp], 1
$LN4@MAYBE_CLOS:
$LN6@MAYBE_CLOS:

; 5764 :         }
; 5765 : 
; 5766 :         Px_SOCKFLAGS(s) &= ~Px_SOCKFLAGS_CLOSE_SCHEDULED;

  000c7	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  000cc	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  000d2	0f ba f0 16	 btr	 eax, 22
  000d6	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  000db	89 81 f4 01 00
	00		 mov	 DWORD PTR [rcx+500], eax

; 5767 :         Px_SOCKFLAGS(s) &= ~Px_SOCKFLAGS_CONNECTED;

  000e1	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  000e6	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  000ec	83 e0 ef	 and	 eax, -17		; ffffffefH
  000ef	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  000f4	89 81 f4 01 00
	00		 mov	 DWORD PTR [rcx+500], eax

; 5768 :         Px_SOCKFLAGS(s) |=  Px_SOCKFLAGS_CLOSED;

  000fa	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  000ff	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  00105	0f ba e8 17	 bts	 eax, 23
  00109	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  0010e	89 81 f4 01 00
	00		 mov	 DWORD PTR [rcx+500], eax

; 5769 : 
; 5770 :         if (error)

  00114	0f be 44 24 28	 movsx	 eax, BYTE PTR error$130201[rsp]
  00119	85 c0		 test	 eax, eax
  0011b	74 16		 je	 SHORT $LN3@MAYBE_CLOS

; 5771 :             PxSocket_HandleException(c, "DisconnectEx", 0);

  0011d	45 33 c0	 xor	 r8d, r8d
  00120	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@LCHEMHG@DisconnectEx?$AA@
  00127	48 8b 4c 24 40	 mov	 rcx, QWORD PTR c$[rsp]
  0012c	e8 00 00 00 00	 call	 PxSocket_HandleException

; 5772 :         else

  00131	eb 1d		 jmp	 SHORT $LN2@MAYBE_CLOS
$LN3@MAYBE_CLOS:

; 5773 :             PxSocket_HandleCallback(c, "connection_closed", "(O)", s);

  00133	4c 8b 4c 24 20	 mov	 r9, QWORD PTR s$[rsp]
  00138	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03IELNPCCE@?$CIO?$CJ?$AA@
  0013f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@PBJEBHHN@connection_closed?$AA@
  00146	48 8b 4c 24 40	 mov	 rcx, QWORD PTR c$[rsp]
  0014b	e8 00 00 00 00	 call	 PxSocket_HandleCallback
$LN2@MAYBE_CLOS:

; 5774 : 
; 5775 :         if (PxSocket_IS_SERVERCLIENT(s))

  00150	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  00155	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  0015b	25 80 00 00 00	 and	 eax, 128		; 00000080H
  00160	85 c0		 test	 eax, eax
  00162	74 0a		 je	 SHORT $LN1@MAYBE_CLOS

; 5776 :             PxServerSocket_ClientClosed(s);

  00164	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  00169	e8 00 00 00 00	 call	 PxServerSocket_ClientClosed
$LN1@MAYBE_CLOS:

; 5777 : 
; 5778 :         return 1;

  0016e	b8 01 00 00 00	 mov	 eax, 1
  00173	eb 02		 jmp	 SHORT $LN9@MAYBE_CLOS
$LN8@MAYBE_CLOS:

; 5779 :     }
; 5780 :     return 0;

  00175	33 c0		 xor	 eax, eax
$LN9@MAYBE_CLOS:

; 5781 : }

  00177	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0017b	c3		 ret	 0
_MAYBE_CLOSE ENDP
_TEXT	ENDS
PUBLIC	??_C@_05KHNIPJOL@?$CIOni?$CJ?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$_MAYBE_DO_SEND_FAILED DD imagerel _MAYBE_DO_SEND_FAILED
	DD	imagerel _MAYBE_DO_SEND_FAILED+452
	DD	imagerel $unwind$_MAYBE_DO_SEND_FAILED
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_MAYBE_DO_SEND_FAILED DD 010901H
	DD	0a209H
xdata	ENDS
;	COMDAT ??_C@_05KHNIPJOL@?$CIOni?$CJ?$AA@
CONST	SEGMENT
??_C@_05KHNIPJOL@?$CIOni?$CJ?$AA@ DB '(Oni)', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _MAYBE_DO_SEND_FAILED
_TEXT	SEGMENT
args$130235 = 32
c$130234 = 40
result$130233 = 48
func$130236 = 56
tv130 = 64
s$ = 96
_MAYBE_DO_SEND_FAILED PROC				; COMDAT

; 5802 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 5803 :     if ((s->io_op == PxSocket_IO_SEND) && PxSocket_HAS_SEND_FAILED(s))

  00009	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0000e	83 b8 50 03 00
	00 08		 cmp	 DWORD PTR [rax+848], 8
  00015	0f 85 9b 01 00
	00		 jne	 $LN9@MAYBE_DO_S
  0001b	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00020	8b 80 f8 01 00
	00		 mov	 eax, DWORD PTR [rax+504]
  00026	83 e0 01	 and	 eax, 1
  00029	85 c0		 test	 eax, eax
  0002b	0f 84 85 01 00
	00		 je	 $LN9@MAYBE_DO_S

; 5804 :     {
; 5805 :         PyObject *result;
; 5806 :         Context *c = s->ctx;

  00031	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00036	48 8b 80 00 02
	00 00		 mov	 rax, QWORD PTR [rax+512]
  0003d	48 89 44 24 28	 mov	 QWORD PTR c$130234[rsp], rax

; 5807 :         PyObject *args, *func;
; 5808 :         args = Py_BuildValue("(Oni)", s, s->send_id, c->io_result);

  00042	48 8b 44 24 28	 mov	 rax, QWORD PTR c$130234[rsp]
  00047	44 8b 88 94 32
	00 00		 mov	 r9d, DWORD PTR [rax+12948]
  0004e	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00053	4c 8b 80 68 02
	00 00		 mov	 r8, QWORD PTR [rax+616]
  0005a	48 8b 54 24 60	 mov	 rdx, QWORD PTR s$[rsp]
  0005f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05KHNIPJOL@?$CIOni?$CJ?$AA@
  00066	e8 00 00 00 00	 call	 Py_BuildValue
  0006b	48 89 44 24 20	 mov	 QWORD PTR args$130235[rsp], rax

; 5809 :         if (!args)

  00070	48 83 7c 24 20
	00		 cmp	 QWORD PTR args$130235[rsp], 0
  00076	75 45		 jne	 SHORT $LN8@MAYBE_DO_S
$LN7@MAYBE_DO_S:

; 5810 :             PxSocket_EXCEPTION();

  00078	e8 00 00 00 00	 call	 PyErr_Occurred
  0007d	48 85 c0	 test	 rax, rax
  00080	75 1c		 jne	 SHORT $LN12@MAYBE_DO_S
  00082	41 b8 b2 16 00
	00		 mov	 r8d, 5810		; 000016b2H
  00088	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0008f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CC@DNBCFJEA@?$AAP?$AAy?$AAE?$AAr?$AAr?$AA_?$AAO?$AAc?$AAc?$AAu?$AAr?$AAr?$AAe?$AAd?$AA?$CI?$AA?$CJ?$AA?$AA@
  00096	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0009c	33 c0		 xor	 eax, eax
$LN12@MAYBE_DO_S:
  0009e	45 33 c0	 xor	 r8d, r8d
  000a1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  000a8	48 8b 4c 24 28	 mov	 rcx, QWORD PTR c$130234[rsp]
  000ad	e8 00 00 00 00	 call	 PxSocket_HandleException
  000b2	e9 03 01 00 00	 jmp	 $end$130243
  000b7	33 c0		 xor	 eax, eax
  000b9	85 c0		 test	 eax, eax
  000bb	75 bb		 jne	 SHORT $LN7@MAYBE_DO_S
$LN8@MAYBE_DO_S:

; 5811 :         READ_LOCK(s);

  000bd	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  000c2	e8 00 00 00 00	 call	 _read_lock

; 5812 :         func = PxSocket_GET_ATTR("send_failed");

  000c7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@DFELAKCA@send_failed?$AA@
  000ce	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  000d3	48 8b 88 90 02
	00 00		 mov	 rcx, QWORD PTR [rax+656]
  000da	e8 00 00 00 00	 call	 PyObject_HasAttrString
  000df	85 c0		 test	 eax, eax
  000e1	74 1f		 je	 SHORT $LN13@MAYBE_DO_S
  000e3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@DFELAKCA@send_failed?$AA@
  000ea	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  000ef	48 8b 88 90 02
	00 00		 mov	 rcx, QWORD PTR [rax+656]
  000f6	e8 00 00 00 00	 call	 PyObject_GetAttrString
  000fb	48 89 44 24 40	 mov	 QWORD PTR tv130[rsp], rax
  00100	eb 0c		 jmp	 SHORT $LN14@MAYBE_DO_S
$LN13@MAYBE_DO_S:
  00102	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00109	48 89 44 24 40	 mov	 QWORD PTR tv130[rsp], rax
$LN14@MAYBE_DO_S:
  0010e	48 8b 44 24 40	 mov	 rax, QWORD PTR tv130[rsp]
  00113	48 89 44 24 38	 mov	 QWORD PTR func$130236[rsp], rax

; 5813 :         READ_UNLOCK(s);

  00118	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  0011d	e8 00 00 00 00	 call	 _read_unlock

; 5814 :         assert(func);

  00122	48 83 7c 24 38
	00		 cmp	 QWORD PTR func$130236[rsp], 0
  00128	75 1c		 jne	 SHORT $LN15@MAYBE_DO_S
  0012a	41 b8 b6 16 00
	00		 mov	 r8d, 5814		; 000016b6H
  00130	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00137	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_19DPFBEKIN@?$AAf?$AAu?$AAn?$AAc?$AA?$AA@
  0013e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00144	33 c0		 xor	 eax, eax
$LN15@MAYBE_DO_S:

; 5815 :         result = PyObject_CallObject(func, args);

  00146	48 8b 54 24 20	 mov	 rdx, QWORD PTR args$130235[rsp]
  0014b	48 8b 4c 24 38	 mov	 rcx, QWORD PTR func$130236[rsp]
  00150	e8 00 00 00 00	 call	 PyObject_CallObject
  00155	48 89 44 24 30	 mov	 QWORD PTR result$130233[rsp], rax

; 5816 :         if (null_with_exc_or_non_none_return_type(result, c->pstate))

  0015a	48 8b 44 24 28	 mov	 rax, QWORD PTR c$130234[rsp]
  0015f	48 8b 90 e8 00
	00 00		 mov	 rdx, QWORD PTR [rax+232]
  00166	48 8b 4c 24 30	 mov	 rcx, QWORD PTR result$130233[rsp]
  0016b	e8 00 00 00 00	 call	 null_with_exc_or_non_none_return_type
  00170	85 c0		 test	 eax, eax
  00172	74 42		 je	 SHORT $LN4@MAYBE_DO_S
$LN3@MAYBE_DO_S:

; 5817 :             PxSocket_EXCEPTION();

  00174	e8 00 00 00 00	 call	 PyErr_Occurred
  00179	48 85 c0	 test	 rax, rax
  0017c	75 1c		 jne	 SHORT $LN16@MAYBE_DO_S
  0017e	41 b8 b9 16 00
	00		 mov	 r8d, 5817		; 000016b9H
  00184	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0018b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CC@DNBCFJEA@?$AAP?$AAy?$AAE?$AAr?$AAr?$AA_?$AAO?$AAc?$AAc?$AAu?$AAr?$AAr?$AAe?$AAd?$AA?$CI?$AA?$CJ?$AA?$AA@
  00192	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00198	33 c0		 xor	 eax, eax
$LN16@MAYBE_DO_S:
  0019a	45 33 c0	 xor	 r8d, r8d
  0019d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  001a4	48 8b 4c 24 28	 mov	 rcx, QWORD PTR c$130234[rsp]
  001a9	e8 00 00 00 00	 call	 PxSocket_HandleException
  001ae	eb 0a		 jmp	 SHORT $end$130243
  001b0	33 c0		 xor	 eax, eax
  001b2	85 c0		 test	 eax, eax
  001b4	75 be		 jne	 SHORT $LN3@MAYBE_DO_S
$LN4@MAYBE_DO_S:
$LN9@MAYBE_DO_S:

; 5818 :     }
; 5819 : 
; 5820 :     return 0;

  001b6	33 c0		 xor	 eax, eax
  001b8	eb 05		 jmp	 SHORT $LN10@MAYBE_DO_S
$end$130243:

; 5821 : 
; 5822 : end:
; 5823 :     return 1;

  001ba	b8 01 00 00 00	 mov	 eax, 1
$LN10@MAYBE_DO_S:

; 5824 : }

  001bf	48 83 c4 58	 add	 rsp, 88			; 00000058H
  001c3	c3		 ret	 0
_MAYBE_DO_SEND_FAILED ENDP
_TEXT	ENDS
PUBLIC	??_C@_0M@EMBPJMKP@unclosed?5?$CFR?$AA@		; `string'
EXTRN	PyErr_WriteUnraisable:PROC
EXTRN	PyErr_ExceptionMatches:PROC
EXTRN	PyExc_Warning:QWORD
EXTRN	PyErr_WarnFormat:PROC
EXTRN	PyExc_ResourceWarning:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$pxsocket_dealloc DD imagerel $LN7
	DD	imagerel $LN7+238
	DD	imagerel $unwind$pxsocket_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$pxsocket_dealloc DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0M@EMBPJMKP@unclosed?5?$CFR?$AA@
CONST	SEGMENT
??_C@_0M@EMBPJMKP@unclosed?5?$CFR?$AA@ DB 'unclosed %R', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT pxsocket_dealloc
_TEXT	SEGMENT
old_refcount$131101 = 32
val$131099 = 40
tb$131100 = 48
exc$131098 = 56
s$ = 80
pxsocket_dealloc PROC					; COMDAT

; 7196 : {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 7197 :     if (s->sock_fd != -1) {

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0000e	48 83 78 60 ff	 cmp	 QWORD PTR [rax+96], -1
  00013	0f 84 98 00 00
	00		 je	 $LN4@pxsocket_d

; 7198 :         PyObject *exc, *val, *tb;
; 7199 :         Py_ssize_t old_refcount = Py_REFCNT(s);

  00019	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0001e	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00022	48 89 44 24 20	 mov	 QWORD PTR old_refcount$131101[rsp], rax

; 7200 :         /* ++Py_REFCNT(self); */
; 7201 :         Py_INCREF(s);

  00027	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  0002c	e8 00 00 00 00	 call	 _Py_IncRef

; 7202 :         PyErr_Fetch(&exc, &val, &tb);

  00031	4c 8d 44 24 30	 lea	 r8, QWORD PTR tb$131100[rsp]
  00036	48 8d 54 24 28	 lea	 rdx, QWORD PTR val$131099[rsp]
  0003b	48 8d 4c 24 38	 lea	 rcx, QWORD PTR exc$131098[rsp]
  00040	e8 00 00 00 00	 call	 PyErr_Fetch

; 7203 :         if (PyErr_WarnFormat(PyExc_ResourceWarning, 1,
; 7204 :                              "unclosed %R", s))

  00045	4c 8b 4c 24 50	 mov	 r9, QWORD PTR s$[rsp]
  0004a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0M@EMBPJMKP@unclosed?5?$CFR?$AA@
  00051	ba 01 00 00 00	 mov	 edx, 1
  00056	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ResourceWarning
  0005d	e8 00 00 00 00	 call	 PyErr_WarnFormat
  00062	85 c0		 test	 eax, eax
  00064	74 1a		 je	 SHORT $LN3@pxsocket_d

; 7205 :             /* Spurious errors can appear at shutdown */
; 7206 :             if (PyErr_ExceptionMatches(PyExc_Warning))

  00066	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_Warning
  0006d	e8 00 00 00 00	 call	 PyErr_ExceptionMatches
  00072	85 c0		 test	 eax, eax
  00074	74 0a		 je	 SHORT $LN2@pxsocket_d

; 7207 :                 PyErr_WriteUnraisable((PyObject *) s);

  00076	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  0007b	e8 00 00 00 00	 call	 PyErr_WriteUnraisable
$LN2@pxsocket_d:
$LN3@pxsocket_d:

; 7208 :         PyErr_Restore(exc, val, tb);

  00080	4c 8b 44 24 30	 mov	 r8, QWORD PTR tb$131100[rsp]
  00085	48 8b 54 24 28	 mov	 rdx, QWORD PTR val$131099[rsp]
  0008a	48 8b 4c 24 38	 mov	 rcx, QWORD PTR exc$131098[rsp]
  0008f	e8 00 00 00 00	 call	 PyErr_Restore

; 7209 :         closesocket(s->sock_fd);

  00094	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00099	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  0009d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_closesocket

; 7210 :         Py_REFCNT(s) = old_refcount;

  000a3	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  000a8	48 8b 4c 24 20	 mov	 rcx, QWORD PTR old_refcount$131101[rsp]
  000ad	48 89 48 50	 mov	 QWORD PTR [rax+80], rcx
$LN4@pxsocket_d:

; 7211 :     }
; 7212 :     if (s->ip)

  000b1	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  000b6	48 05 14 02 00
	00		 add	 rax, 532		; 00000214H
  000bc	48 85 c0	 test	 rax, rax
  000bf	74 14		 je	 SHORT $LN1@pxsocket_d

; 7213 :         free(s->ip);

  000c1	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  000c6	48 05 14 02 00
	00		 add	 rax, 532		; 00000214H
  000cc	48 8b c8	 mov	 rcx, rax
  000cf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free
$LN1@pxsocket_d:

; 7214 : 
; 7215 :     Py_TYPE(s)->tp_free((PyObject *)s);

  000d5	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  000da	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000de	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  000e3	ff 90 98 01 00
	00		 call	 QWORD PTR [rax+408]

; 7216 : }

  000e9	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000ed	c3		 ret	 0
pxsocket_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_1GI@LANPDHLO@?$AAs?$AA?9?$AA?$DO?$AAs?$AAe?$AAn?$AAd?$AAb?$AAu?$AAf?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA1?$AA0?$AA2?$AA4?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAs?$AA?9?$AA?$DO?$AAs?$AAe@ ; `string'
PUBLIC	??_C@_1GI@MCCCHGJG@?$AAs?$AA?9?$AA?$DO?$AAr?$AAe?$AAc?$AAv?$AAb?$AAu?$AAf?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA1?$AA0?$AA2?$AA4?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAs?$AA?9?$AA?$DO?$AAr?$AAe@ ; `string'
PUBLIC	??_C@_1O@EDNLHLLD@?$AA?$CB?$AAs?$AA?9?$AA?$DO?$AAi?$AAp?$AA?$AA@ ; `string'
PUBLIC	??_C@_0BF@GFODGHCG@invalid?5IPv4?5address?$AA@	; `string'
PUBLIC	??_C@_1CE@PPCGGIMK@?$AAs?$AA?9?$AA?$DO?$AAi?$AAp?$AA?$FL?$AA1?$AA5?$AA?$FN?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA?8?$AA?2?$AA0?$AA?8?$AA?$AA@ ; `string'
PUBLIC	??_C@_0O@DMHOKMA@?$CFd?4?$CFd?4?$CFd?4?$CFd?$CFc?$AA@ ; `string'
PUBLIC	??_C@_0BN@JNEAFDJK@socket?3?5port?5must?5be?50?965535?$AA@ ; `string'
PUBLIC	??_C@_0BO@OKJHCGDP@sock?5type?5must?5be?5SOCK_STREAM?$AA@ ; `string'
PUBLIC	??_C@_0BH@EPDBMOIG@family?5must?5be?5AF_INET?$AA@ ; `string'
PUBLIC	??_C@_1CO@EGEFGMAG@?$AA?$CB?$AAP?$AAx?$AAS?$AAo?$AAc?$AAk?$AAe?$AAt?$AA_?$AAI?$AAS?$AA_?$AAC?$AAL?$AAI?$AAE?$AAN?$AAT?$AA?$CI?$AAs?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CO@IECDAHBD@?$AA?$CB?$AAP?$AAx?$AAS?$AAo?$AAc?$AAk?$AAe?$AAt?$AA_?$AAI?$AAS?$AA_?$AAS?$AAE?$AAR?$AAV?$AAE?$AAR?$AA?$CI?$AAs?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	__real@bff0000000000000
PUBLIC	??_C@_1NA@NOMJPJOH@?$AA?$CI?$AA?5?$AAP?$AAx?$AAS?$AAo?$AAc?$AAk?$AAe?$AAt?$AA_?$AAI?$AAS?$AA_?$AAC?$AAL?$AAI?$AAE?$AAN?$AAT?$AA?$CI?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CB?$AAP?$AAx?$AAS?$AAo@ ; `string'
PUBLIC	??_C@_0BP@PFGPPML@client?1server?5context?5mismatch?$AA@ ; `string'
PUBLIC	??_C@_0BP@GMPLKPIL@not?5in?5an?5async?5socket?5context?$AA@ ; `string'
PUBLIC	??_C@_0CM@EKHACCDG@sockets?5cannot?5be?5created?5in?5asy@ ; `string'
PUBLIC	??_C@_1BA@EPJPGPPP@?$AA?$CB?$AAp?$AAa?$AAr?$AAe?$AAn?$AAt?$AA?$AA@ ; `string'
PUBLIC	create_pxsocket
EXTRN	__imp_ioctlsocket:PROC
EXTRN	__imp_socket:PROC
EXTRN	__imp_htons:PROC
EXTRN	__imp_htonl:PROC
EXTRN	__imp_strncpy:PROC
EXTRN	__imp_sscanf:PROC
EXTRN	PyExc_OverflowError:QWORD
EXTRN	PyArg_ParseTupleAndKeywords:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$create_pxsocket DD imagerel $LN55
	DD	imagerel $LN55+2587
	DD	imagerel $unwind$create_pxsocket
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$create_pxsocket DD 021b01H
	DD	01b011bH
xdata	ENDS
;	COMDAT ??_C@_1GI@LANPDHLO@?$AAs?$AA?9?$AA?$DO?$AAs?$AAe?$AAn?$AAd?$AAb?$AAu?$AAf?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA1?$AA0?$AA2?$AA4?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAs?$AA?9?$AA?$DO?$AAs?$AAe@
CONST	SEGMENT
??_C@_1GI@LANPDHLO@?$AAs?$AA?9?$AA?$DO?$AAs?$AAe?$AAn?$AAd?$AAb?$AAu?$AAf?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA1?$AA0?$AA2?$AA4?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAs?$AA?9?$AA?$DO?$AAs?$AAe@ DB 's'
	DB	00H, '-', 00H, '>', 00H, 's', 00H, 'e', 00H, 'n', 00H, 'd', 00H
	DB	'b', 00H, 'u', 00H, 'f', 00H, '_', 00H, 's', 00H, 'i', 00H, 'z'
	DB	00H, 'e', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '1', 00H
	DB	'0', 00H, '2', 00H, '4', 00H, ' ', 00H, '&', 00H, '&', 00H, ' '
	DB	00H, 's', 00H, '-', 00H, '>', 00H, 's', 00H, 'e', 00H, 'n', 00H
	DB	'd', 00H, 'b', 00H, 'u', 00H, 'f', 00H, '_', 00H, 's', 00H, 'i'
	DB	00H, 'z', 00H, 'e', 00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H
	DB	'6', 00H, '5', 00H, '5', 00H, '3', 00H, '6', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1GI@MCCCHGJG@?$AAs?$AA?9?$AA?$DO?$AAr?$AAe?$AAc?$AAv?$AAb?$AAu?$AAf?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA1?$AA0?$AA2?$AA4?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAs?$AA?9?$AA?$DO?$AAr?$AAe@
CONST	SEGMENT
??_C@_1GI@MCCCHGJG@?$AAs?$AA?9?$AA?$DO?$AAr?$AAe?$AAc?$AAv?$AAb?$AAu?$AAf?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA1?$AA0?$AA2?$AA4?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAs?$AA?9?$AA?$DO?$AAr?$AAe@ DB 's'
	DB	00H, '-', 00H, '>', 00H, 'r', 00H, 'e', 00H, 'c', 00H, 'v', 00H
	DB	'b', 00H, 'u', 00H, 'f', 00H, '_', 00H, 's', 00H, 'i', 00H, 'z'
	DB	00H, 'e', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '1', 00H
	DB	'0', 00H, '2', 00H, '4', 00H, ' ', 00H, '&', 00H, '&', 00H, ' '
	DB	00H, 's', 00H, '-', 00H, '>', 00H, 'r', 00H, 'e', 00H, 'c', 00H
	DB	'v', 00H, 'b', 00H, 'u', 00H, 'f', 00H, '_', 00H, 's', 00H, 'i'
	DB	00H, 'z', 00H, 'e', 00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H
	DB	'6', 00H, '5', 00H, '5', 00H, '3', 00H, '6', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1O@EDNLHLLD@?$AA?$CB?$AAs?$AA?9?$AA?$DO?$AAi?$AAp?$AA?$AA@
CONST	SEGMENT
??_C@_1O@EDNLHLLD@?$AA?$CB?$AAs?$AA?9?$AA?$DO?$AAi?$AAp?$AA?$AA@ DB '!', 00H
	DB	's', 00H, '-', 00H, '>', 00H, 'i', 00H, 'p', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@GFODGHCG@invalid?5IPv4?5address?$AA@
CONST	SEGMENT
??_C@_0BF@GFODGHCG@invalid?5IPv4?5address?$AA@ DB 'invalid IPv4 address', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CE@PPCGGIMK@?$AAs?$AA?9?$AA?$DO?$AAi?$AAp?$AA?$FL?$AA1?$AA5?$AA?$FN?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA?8?$AA?2?$AA0?$AA?8?$AA?$AA@
CONST	SEGMENT
??_C@_1CE@PPCGGIMK@?$AAs?$AA?9?$AA?$DO?$AAi?$AAp?$AA?$FL?$AA1?$AA5?$AA?$FN?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA?8?$AA?2?$AA0?$AA?8?$AA?$AA@ DB 's'
	DB	00H, '-', 00H, '>', 00H, 'i', 00H, 'p', 00H, '[', 00H, '1', 00H
	DB	'5', 00H, ']', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, ''''
	DB	00H, '\', 00H, '0', 00H, '''', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@DMHOKMA@?$CFd?4?$CFd?4?$CFd?4?$CFd?$CFc?$AA@
CONST	SEGMENT
??_C@_0O@DMHOKMA@?$CFd?4?$CFd?4?$CFd?4?$CFd?$CFc?$AA@ DB '%d.%d.%d.%d%c', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@JNEAFDJK@socket?3?5port?5must?5be?50?965535?$AA@
CONST	SEGMENT
??_C@_0BN@JNEAFDJK@socket?3?5port?5must?5be?50?965535?$AA@ DB 'socket: po'
	DB	'rt must be 0-65535', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@OKJHCGDP@sock?5type?5must?5be?5SOCK_STREAM?$AA@
CONST	SEGMENT
??_C@_0BO@OKJHCGDP@sock?5type?5must?5be?5SOCK_STREAM?$AA@ DB 'sock type m'
	DB	'ust be SOCK_STREAM', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@EPDBMOIG@family?5must?5be?5AF_INET?$AA@
CONST	SEGMENT
??_C@_0BH@EPDBMOIG@family?5must?5be?5AF_INET?$AA@ DB 'family must be AF_I'
	DB	'NET', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1CO@EGEFGMAG@?$AA?$CB?$AAP?$AAx?$AAS?$AAo?$AAc?$AAk?$AAe?$AAt?$AA_?$AAI?$AAS?$AA_?$AAC?$AAL?$AAI?$AAE?$AAN?$AAT?$AA?$CI?$AAs?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CO@EGEFGMAG@?$AA?$CB?$AAP?$AAx?$AAS?$AAo?$AAc?$AAk?$AAe?$AAt?$AA_?$AAI?$AAS?$AA_?$AAC?$AAL?$AAI?$AAE?$AAN?$AAT?$AA?$CI?$AAs?$AA?$CJ?$AA?$AA@ DB '!'
	DB	00H, 'P', 00H, 'x', 00H, 'S', 00H, 'o', 00H, 'c', 00H, 'k', 00H
	DB	'e', 00H, 't', 00H, '_', 00H, 'I', 00H, 'S', 00H, '_', 00H, 'C'
	DB	00H, 'L', 00H, 'I', 00H, 'E', 00H, 'N', 00H, 'T', 00H, '(', 00H
	DB	's', 00H, ')', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1CO@IECDAHBD@?$AA?$CB?$AAP?$AAx?$AAS?$AAo?$AAc?$AAk?$AAe?$AAt?$AA_?$AAI?$AAS?$AA_?$AAS?$AAE?$AAR?$AAV?$AAE?$AAR?$AA?$CI?$AAs?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CO@IECDAHBD@?$AA?$CB?$AAP?$AAx?$AAS?$AAo?$AAc?$AAk?$AAe?$AAt?$AA_?$AAI?$AAS?$AA_?$AAS?$AAE?$AAR?$AAV?$AAE?$AAR?$AA?$CI?$AAs?$AA?$CJ?$AA?$AA@ DB '!'
	DB	00H, 'P', 00H, 'x', 00H, 'S', 00H, 'o', 00H, 'c', 00H, 'k', 00H
	DB	'e', 00H, 't', 00H, '_', 00H, 'I', 00H, 'S', 00H, '_', 00H, 'S'
	DB	00H, 'E', 00H, 'R', 00H, 'V', 00H, 'E', 00H, 'R', 00H, '(', 00H
	DB	's', 00H, ')', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT __real@bff0000000000000
CONST	SEGMENT
__real@bff0000000000000 DQ 0bff0000000000000r	; -1
CONST	ENDS
;	COMDAT ??_C@_1NA@NOMJPJOH@?$AA?$CI?$AA?5?$AAP?$AAx?$AAS?$AAo?$AAc?$AAk?$AAe?$AAt?$AA_?$AAI?$AAS?$AA_?$AAC?$AAL?$AAI?$AAE?$AAN?$AAT?$AA?$CI?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CB?$AAP?$AAx?$AAS?$AAo@
CONST	SEGMENT
??_C@_1NA@NOMJPJOH@?$AA?$CI?$AA?5?$AAP?$AAx?$AAS?$AAo?$AAc?$AAk?$AAe?$AAt?$AA_?$AAI?$AAS?$AA_?$AAC?$AAL?$AAI?$AAE?$AAN?$AAT?$AA?$CI?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CB?$AAP?$AAx?$AAS?$AAo@ DB '('
	DB	00H, ' ', 00H, 'P', 00H, 'x', 00H, 'S', 00H, 'o', 00H, 'c', 00H
	DB	'k', 00H, 'e', 00H, 't', 00H, '_', 00H, 'I', 00H, 'S', 00H, '_'
	DB	00H, 'C', 00H, 'L', 00H, 'I', 00H, 'E', 00H, 'N', 00H, 'T', 00H
	DB	'(', 00H, 's', 00H, ')', 00H, ' ', 00H, '&', 00H, '&', 00H, ' '
	DB	00H, '!', 00H, 'P', 00H, 'x', 00H, 'S', 00H, 'o', 00H, 'c', 00H
	DB	'k', 00H, 'e', 00H, 't', 00H, '_', 00H, 'I', 00H, 'S', 00H, '_'
	DB	00H, 'S', 00H, 'E', 00H, 'R', 00H, 'V', 00H, 'E', 00H, 'R', 00H
	DB	'(', 00H, 's', 00H, ')', 00H, ')', 00H, ' ', 00H, '|', 00H, '|'
	DB	00H, ' ', 00H, '(', 00H, '!', 00H, 'P', 00H, 'x', 00H, 'S', 00H
	DB	'o', 00H, 'c', 00H, 'k', 00H, 'e', 00H, 't', 00H, '_', 00H, 'I'
	DB	00H, 'S', 00H, '_', 00H, 'C', 00H, 'L', 00H, 'I', 00H, 'E', 00H
	DB	'N', 00H, 'T', 00H, '(', 00H, 's', 00H, ')', 00H, ' ', 00H, '&'
	DB	00H, '&', 00H, ' ', 00H, 'P', 00H, 'x', 00H, 'S', 00H, 'o', 00H
	DB	'c', 00H, 'k', 00H, 'e', 00H, 't', 00H, '_', 00H, 'I', 00H, 'S'
	DB	00H, '_', 00H, 'S', 00H, 'E', 00H, 'R', 00H, 'V', 00H, 'E', 00H
	DB	'R', 00H, '(', 00H, 's', 00H, ')', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@PFGPPML@client?1server?5context?5mismatch?$AA@
CONST	SEGMENT
??_C@_0BP@PFGPPML@client?1server?5context?5mismatch?$AA@ DB 'client/serve'
	DB	'r context mismatch', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@GMPLKPIL@not?5in?5an?5async?5socket?5context?$AA@
CONST	SEGMENT
??_C@_0BP@GMPLKPIL@not?5in?5an?5async?5socket?5context?$AA@ DB 'not in an'
	DB	' async socket context', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@EKHACCDG@sockets?5cannot?5be?5created?5in?5asy@
CONST	SEGMENT
??_C@_0CM@EKHACCDG@sockets?5cannot?5be?5created?5in?5asy@ DB 'sockets can'
	DB	'not be created in async contexts', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1BA@EPJPGPPP@?$AA?$CB?$AAp?$AAa?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
CONST	SEGMENT
??_C@_1BA@EPJPGPPP@?$AA?$CB?$AAp?$AAa?$AAr?$AAe?$AAn?$AAt?$AA?$AA@ DB '!', 00H
	DB	'p', 00H, 'a', 00H, 'r', 00H, 'e', 00H, 'n', 00H, 't', 00H, 00H
	DB	00H						; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT create_pxsocket
_TEXT	SEGMENT
hostlen$ = 80
nonblock$ = 88
s$ = 96
len$ = 104
host$ = 112
val$ = 120
old_heap$ = 128
c$ = 136
tp$ = 144
fd$ = 152
mismatch$131136 = 160
d2$131195 = 164
d3$131196 = 168
ch$131198 = 172
d4$131197 = 176
d1$131194 = 180
sin$131201 = 184
len$131202 = 192
tv128 = 200
args$ = 224
kwds$ = 232
flags$ = 240
parent$ = 248
create_pxsocket PROC					; COMDAT

; 7224 : {

$LN55:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec d8 00
	00 00		 sub	 rsp, 216		; 000000d8H

; 7225 :     char *val;
; 7226 :     int len = sizeof(int);

  0001b	c7 44 24 68 04
	00 00 00	 mov	 DWORD PTR len$[rsp], 4

; 7227 :     int nonblock = 1;

  00023	c7 44 24 58 01
	00 00 00	 mov	 DWORD PTR nonblock$[rsp], 1

; 7228 :     PxSocket *s;
; 7229 :     SOCKET fd = INVALID_SOCKET;

  0002b	48 c7 84 24 98
	00 00 00 ff ff
	ff ff		 mov	 QWORD PTR fd$[rsp], -1

; 7230 :     char *host;
; 7231 :     Context *c;
; 7232 :     Heap *old_heap = NULL;

  00037	48 c7 84 24 80
	00 00 00 00 00
	00 00		 mov	 QWORD PTR old_heap$[rsp], 0

; 7233 :     Py_ssize_t hostlen;
; 7234 : 
; 7235 :     PyTypeObject *tp = &PxSocket_Type;

  00043	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PxSocket_Type
  0004a	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tp$[rsp], rax

; 7236 : 
; 7237 :     if (Py_PXCTX && (flags != Px_SOCKFLAGS_SERVERCLIENT)) {

  00052	e8 00 00 00 00	 call	 _Py_PXCTX
  00057	85 c0		 test	 eax, eax
  00059	0f 84 63 01 00
	00		 je	 $LN33@create_pxs
  0005f	81 bc 24 f0 00
	00 00 80 00 00
	00		 cmp	 DWORD PTR flags$[rsp], 128 ; 00000080H
  0006a	0f 84 52 01 00
	00		 je	 $LN33@create_pxs

; 7238 :         int mismatch;
; 7239 :         c = ctx;

  00070	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:ctx
  00075	8b c0		 mov	 eax, eax
  00077	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0007d	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00086	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  0008a	48 8b 04 08	 mov	 rax, QWORD PTR [rax+rcx]
  0008e	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR c$[rsp], rax

; 7240 :         assert(!parent);

  00096	48 83 bc 24 f8
	00 00 00 00	 cmp	 QWORD PTR parent$[rsp], 0
  0009f	74 1c		 je	 SHORT $LN36@create_pxs
  000a1	41 b8 48 1c 00
	00		 mov	 r8d, 7240		; 00001c48H
  000a7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  000ae	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BA@EPJPGPPP@?$AA?$CB?$AAp?$AAa?$AAr?$AAe?$AAn?$AAt?$AA?$AA@
  000b5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000bb	33 c0		 xor	 eax, eax
$LN36@create_pxs:

; 7241 :         if (args || kwds) {

  000bd	48 83 bc 24 e0
	00 00 00 00	 cmp	 QWORD PTR args$[rsp], 0
  000c6	75 0b		 jne	 SHORT $LN31@create_pxs
  000c8	48 83 bc 24 e8
	00 00 00 00	 cmp	 QWORD PTR kwds$[rsp], 0
  000d1	74 1a		 je	 SHORT $LN32@create_pxs
$LN31@create_pxs:

; 7242 :             PyErr_SetString(PyExc_ValueError,
; 7243 :                             "sockets cannot be created in async contexts");

  000d3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CM@EKHACCDG@sockets?5cannot?5be?5created?5in?5asy@
  000da	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  000e1	e8 00 00 00 00	 call	 PyErr_SetString

; 7244 :             return NULL;

  000e6	33 c0		 xor	 eax, eax
  000e8	e9 26 09 00 00	 jmp	 $LN34@create_pxs
$LN32@create_pxs:

; 7245 :         }
; 7246 :         s = (PxSocket *)c->io_obj;

  000ed	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  000f5	48 8b 80 a8 32
	00 00		 mov	 rax, QWORD PTR [rax+12968]
  000fc	48 89 44 24 60	 mov	 QWORD PTR s$[rsp], rax

; 7247 :         if (!s || Py_TYPE(s) != tp) {

  00101	48 83 7c 24 60
	00		 cmp	 QWORD PTR s$[rsp], 0
  00107	74 13		 je	 SHORT $LN29@create_pxs
  00109	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0010e	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR tp$[rsp]
  00116	48 39 48 58	 cmp	 QWORD PTR [rax+88], rcx
  0011a	74 1a		 je	 SHORT $LN30@create_pxs
$LN29@create_pxs:

; 7248 :             PyErr_SetString(PyExc_ValueError,
; 7249 :                             "not in an async socket context");

  0011c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BP@GMPLKPIL@not?5in?5an?5async?5socket?5context?$AA@
  00123	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0012a	e8 00 00 00 00	 call	 PyErr_SetString

; 7250 :             return NULL;

  0012f	33 c0		 xor	 eax, eax
  00131	e9 dd 08 00 00	 jmp	 $LN34@create_pxs
$LN30@create_pxs:

; 7251 :         }
; 7252 : 
; 7253 :         mismatch = (
; 7254 :             (flags == Px_SOCKFLAGS_CLIENT && !PxSocket_IS_CLIENT(s)) ||
; 7255 :             (flags == Px_SOCKFLAGS_SERVER && !PxSocket_IS_SERVER(s))
; 7256 :         );

  00136	83 bc 24 f0 00
	00 00 01	 cmp	 DWORD PTR flags$[rsp], 1
  0013e	75 12		 jne	 SHORT $LN37@create_pxs
  00140	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00145	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  0014b	83 e0 01	 and	 eax, 1
  0014e	85 c0		 test	 eax, eax
  00150	74 29		 je	 SHORT $LN39@create_pxs
$LN37@create_pxs:
  00152	83 bc 24 f0 00
	00 00 02	 cmp	 DWORD PTR flags$[rsp], 2
  0015a	75 12		 jne	 SHORT $LN38@create_pxs
  0015c	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00161	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  00167	83 e0 02	 and	 eax, 2
  0016a	85 c0		 test	 eax, eax
  0016c	74 0d		 je	 SHORT $LN39@create_pxs
$LN38@create_pxs:
  0016e	c7 84 24 c8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv128[rsp], 0
  00179	eb 0b		 jmp	 SHORT $LN40@create_pxs
$LN39@create_pxs:
  0017b	c7 84 24 c8 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv128[rsp], 1
$LN40@create_pxs:
  00186	8b 84 24 c8 00
	00 00		 mov	 eax, DWORD PTR tv128[rsp]
  0018d	89 84 24 a0 00
	00 00		 mov	 DWORD PTR mismatch$131136[rsp], eax

; 7257 :         if (mismatch) {

  00194	83 bc 24 a0 00
	00 00 00	 cmp	 DWORD PTR mismatch$131136[rsp], 0
  0019c	74 1a		 je	 SHORT $LN28@create_pxs

; 7258 :             PyErr_SetString(PyExc_ValueError,
; 7259 :                             "client/server context mismatch");

  0019e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BP@PFGPPML@client?1server?5context?5mismatch?$AA@
  001a5	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  001ac	e8 00 00 00 00	 call	 PyErr_SetString

; 7260 :             return NULL;

  001b1	33 c0		 xor	 eax, eax
  001b3	e9 5b 08 00 00	 jmp	 $LN34@create_pxs
$LN28@create_pxs:

; 7261 :         }
; 7262 :         return (PyObject *)s;

  001b8	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  001bd	e9 51 08 00 00	 jmp	 $LN34@create_pxs
$LN33@create_pxs:

; 7263 :     }
; 7264 : 
; 7265 :     /* First step is to create a new context object that'll encapsulate the
; 7266 :      * socket for its entire lifetime. */
; 7267 :     c = new_context(0, 1);

  001c2	ba 01 00 00 00	 mov	 edx, 1
  001c7	33 c9		 xor	 ecx, ecx
  001c9	e8 00 00 00 00	 call	 new_context
  001ce	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR c$[rsp], rax

; 7268 :     if (!c)

  001d6	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR c$[rsp], 0
  001df	75 07		 jne	 SHORT $LN27@create_pxs

; 7269 :         return NULL;

  001e1	33 c0		 xor	 eax, eax
  001e3	e9 2b 08 00 00	 jmp	 $LN34@create_pxs
$LN27@create_pxs:

; 7270 : 
; 7271 :     c->io_type = Px_IOTYPE_SOCKET;

  001e8	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  001f0	c7 80 80 32 00
	00 02 00 00 00	 mov	 DWORD PTR [rax+12928], 2

; 7272 : 
; 7273 :     s = (PxSocket *)_PyHeap_Malloc(c, sizeof(PxSocket), 0, 0);

  001fa	45 33 c9	 xor	 r9d, r9d
  001fd	45 33 c0	 xor	 r8d, r8d
  00200	ba 50 04 00 00	 mov	 edx, 1104		; 00000450H
  00205	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  0020d	e8 00 00 00 00	 call	 _PyHeap_Malloc
  00212	48 89 44 24 60	 mov	 QWORD PTR s$[rsp], rax

; 7274 :     if (!s)

  00217	48 83 7c 24 60
	00		 cmp	 QWORD PTR s$[rsp], 0
  0021d	75 07		 jne	 SHORT $LN26@create_pxs

; 7275 :         return NULL;

  0021f	33 c0		 xor	 eax, eax
  00221	e9 ed 07 00 00	 jmp	 $LN34@create_pxs
$LN26@create_pxs:

; 7276 : 
; 7277 :     c->io_obj = (PyObject *)s;

  00226	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  0022e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  00233	48 89 88 a8 32
	00 00		 mov	 QWORD PTR [rax+12968], rcx

; 7278 : 
; 7279 :     if (!init_object(c, c->io_obj, tp, 0))

  0023a	45 33 c9	 xor	 r9d, r9d
  0023d	4c 8b 84 24 90
	00 00 00	 mov	 r8, QWORD PTR tp$[rsp]
  00245	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  0024d	48 8b 90 a8 32
	00 00		 mov	 rdx, QWORD PTR [rax+12968]
  00254	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  0025c	e8 00 00 00 00	 call	 init_object
  00261	48 85 c0	 test	 rax, rax
  00264	75 07		 jne	 SHORT $LN25@create_pxs

; 7280 :         return NULL;

  00266	33 c0		 xor	 eax, eax
  00268	e9 a6 07 00 00	 jmp	 $LN34@create_pxs
$LN25@create_pxs:

; 7281 : 
; 7282 :     s->ctx = c;

  0026d	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00272	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  0027a	48 89 88 00 02
	00 00		 mov	 QWORD PTR [rax+512], rcx

; 7283 : 
; 7284 :     s->flags = flags;

  00281	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00286	8b 8c 24 f0 00
	00 00		 mov	 ecx, DWORD PTR flags$[rsp]
  0028d	89 88 f4 01 00
	00		 mov	 DWORD PTR [rax+500], ecx

; 7285 : 
; 7286 :     if (parent) {

  00293	48 83 bc 24 f8
	00 00 00 00	 cmp	 QWORD PTR parent$[rsp], 0
  0029c	74 32		 je	 SHORT $LN24@create_pxs

; 7287 :         assert(PxSocket_IS_SERVERCLIENT(s));

  0029e	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  002a3	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  002a9	25 80 00 00 00	 and	 eax, 128		; 00000080H
  002ae	85 c0		 test	 eax, eax
  002b0	75 1c		 jne	 SHORT $LN41@create_pxs
  002b2	41 b8 77 1c 00
	00		 mov	 r8d, 7287		; 00001c77H
  002b8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  002bf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DI@LBHEJGP@?$AAP?$AAx?$AAS?$AAo?$AAc?$AAk?$AAe?$AAt?$AA_?$AAI?$AAS?$AA_?$AAS?$AAE?$AAR?$AAV?$AAE?$AAR?$AAC?$AAL?$AAI?$AAE?$AAN?$AAT?$AA?$CI?$AAs?$AA?$CJ?$AA?$AA@
  002c6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  002cc	33 c0		 xor	 eax, eax
$LN41@create_pxs:

; 7288 :     } else {

  002ce	eb 64		 jmp	 SHORT $LN23@create_pxs
$LN24@create_pxs:

; 7289 :         assert(
; 7290 :             ( PxSocket_IS_CLIENT(s) && !PxSocket_IS_SERVER(s)) ||
; 7291 :             (!PxSocket_IS_CLIENT(s) &&  PxSocket_IS_SERVER(s))
; 7292 :         );

  002d0	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  002d5	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  002db	83 e0 01	 and	 eax, 1
  002de	85 c0		 test	 eax, eax
  002e0	74 12		 je	 SHORT $LN42@create_pxs
  002e2	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  002e7	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  002ed	83 e0 02	 and	 eax, 2
  002f0	85 c0		 test	 eax, eax
  002f2	74 40		 je	 SHORT $LN44@create_pxs
$LN42@create_pxs:
  002f4	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  002f9	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  002ff	83 e0 01	 and	 eax, 1
  00302	85 c0		 test	 eax, eax
  00304	75 12		 jne	 SHORT $LN43@create_pxs
  00306	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0030b	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  00311	83 e0 02	 and	 eax, 2
  00314	85 c0		 test	 eax, eax
  00316	75 1c		 jne	 SHORT $LN44@create_pxs
$LN43@create_pxs:
  00318	41 b8 7c 1c 00
	00		 mov	 r8d, 7292		; 00001c7cH
  0031e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00325	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1NA@NOMJPJOH@?$AA?$CI?$AA?5?$AAP?$AAx?$AAS?$AAo?$AAc?$AAk?$AAe?$AAt?$AA_?$AAI?$AAS?$AA_?$AAC?$AAL?$AAI?$AAE?$AAN?$AAT?$AA?$CI?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AA?$CB?$AAP?$AAx?$AAS?$AAo@
  0032c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00332	33 c0		 xor	 eax, eax
$LN44@create_pxs:
$LN23@create_pxs:

; 7293 :     }
; 7294 : 
; 7295 :     s->sock_fd = fd;

  00334	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00339	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR fd$[rsp]
  00341	48 89 48 60	 mov	 QWORD PTR [rax+96], rcx

; 7296 :     s->sock_timeout = -1.0;

  00345	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0034a	f2 0f 10 05 00
	00 00 00	 movsdx	 xmm0, QWORD PTR __real@bff0000000000000
  00352	f2 0f 11 80 80
	00 00 00	 movsdx	 QWORD PTR [rax+128], xmm0

; 7297 :     s->errorhandler = PySocketModule.socket_errorhandler;

  0035a	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0035f	48 8b 0d 30 00
	00 00		 mov	 rcx, QWORD PTR PySocketModule+48
  00366	48 89 48 78	 mov	 QWORD PTR [rax+120], rcx

; 7298 :     s->sock_family = AF_INET;

  0036a	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0036f	c7 40 68 02 00
	00 00		 mov	 DWORD PTR [rax+104], 2

; 7299 :     s->sock_type = SOCK_STREAM;

  00376	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0037b	c7 40 6c 01 00
	00 00		 mov	 DWORD PTR [rax+108], 1

; 7300 : 
; 7301 :     if (PxSocket_IS_SERVERCLIENT(s)) {

  00382	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00387	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  0038d	25 80 00 00 00	 and	 eax, 128		; 00000080H
  00392	85 c0		 test	 eax, eax
  00394	74 61		 je	 SHORT $LN22@create_pxs

; 7302 :         assert(!PxSocket_IS_SERVER(s));

  00396	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0039b	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  003a1	83 e0 02	 and	 eax, 2
  003a4	85 c0		 test	 eax, eax
  003a6	74 1c		 je	 SHORT $LN45@create_pxs
  003a8	41 b8 86 1c 00
	00		 mov	 r8d, 7302		; 00001c86H
  003ae	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  003b5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@IECDAHBD@?$AA?$CB?$AAP?$AAx?$AAS?$AAo?$AAc?$AAk?$AAe?$AAt?$AA_?$AAI?$AAS?$AA_?$AAS?$AAE?$AAR?$AAV?$AAE?$AAR?$AA?$CI?$AAs?$AA?$CJ?$AA?$AA@
  003bc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  003c2	33 c0		 xor	 eax, eax
$LN45@create_pxs:

; 7303 :         assert(!PxSocket_IS_CLIENT(s));

  003c4	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  003c9	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  003cf	83 e0 01	 and	 eax, 1
  003d2	85 c0		 test	 eax, eax
  003d4	74 1c		 je	 SHORT $LN46@create_pxs
  003d6	41 b8 87 1c 00
	00		 mov	 r8d, 7303		; 00001c87H
  003dc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  003e3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@EGEFGMAG@?$AA?$CB?$AAP?$AAx?$AAS?$AAo?$AAc?$AAk?$AAe?$AAt?$AA_?$AAI?$AAS?$AA_?$AAC?$AAL?$AAI?$AAE?$AAN?$AAT?$AA?$CI?$AAs?$AA?$CJ?$AA?$AA@
  003ea	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  003f0	33 c0		 xor	 eax, eax
$LN46@create_pxs:

; 7304 :         goto serverclient;

  003f2	e9 d7 03 00 00	 jmp	 $serverclient$131182
$LN22@create_pxs:

; 7305 :     }
; 7306 : 
; 7307 :     if (!PyArg_ParseTupleAndKeywords(PxSocket_PARSE_ARGS))

  003f7	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  003fc	48 83 c0 70	 add	 rax, 112		; 00000070H
  00400	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  00405	48 83 c1 6c	 add	 rcx, 108		; 0000006cH
  00409	48 8b 54 24 60	 mov	 rdx, QWORD PTR s$[rsp]
  0040e	48 83 c2 68	 add	 rdx, 104		; 00000068H
  00412	4c 8b 44 24 60	 mov	 r8, QWORD PTR s$[rsp]
  00417	49 81 c0 30 02
	00 00		 add	 r8, 560			; 00000230H
  0041e	48 89 44 24 48	 mov	 QWORD PTR [rsp+72], rax
  00423	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00428	48 89 54 24 38	 mov	 QWORD PTR [rsp+56], rdx
  0042d	4c 89 44 24 30	 mov	 QWORD PTR [rsp+48], r8
  00432	48 8d 44 24 50	 lea	 rax, QWORD PTR hostlen$[rsp]
  00437	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0043c	48 8d 44 24 70	 lea	 rax, QWORD PTR host$[rsp]
  00441	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00446	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:pxsocket_kwlist
  0044d	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR pxsocket_kwlist_formatstring
  00454	48 8b 94 24 e8
	00 00 00	 mov	 rdx, QWORD PTR kwds$[rsp]
  0045c	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  00464	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  00469	85 c0		 test	 eax, eax
  0046b	75 05		 jne	 SHORT $LN21@create_pxs

; 7308 :         goto error;

  0046d	e9 6f 05 00 00	 jmp	 $error$131185
$LN21@create_pxs:

; 7309 : 
; 7310 :     if (s->sock_family != AF_INET) {

  00472	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00477	83 78 68 02	 cmp	 DWORD PTR [rax+104], 2
  0047b	74 18		 je	 SHORT $LN20@create_pxs

; 7311 :         PyErr_SetString(PyExc_ValueError, "family must be AF_INET");

  0047d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@EPDBMOIG@family?5must?5be?5AF_INET?$AA@
  00484	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0048b	e8 00 00 00 00	 call	 PyErr_SetString

; 7312 :         goto error;

  00490	e9 4c 05 00 00	 jmp	 $error$131185
$LN20@create_pxs:

; 7313 :     }
; 7314 : 
; 7315 :     if (s->sock_type != SOCK_STREAM) {

  00495	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0049a	83 78 6c 01	 cmp	 DWORD PTR [rax+108], 1
  0049e	74 18		 je	 SHORT $LN19@create_pxs

; 7316 :         PyErr_SetString(PyExc_ValueError, "sock type must be SOCK_STREAM");

  004a0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BO@OKJHCGDP@sock?5type?5must?5be?5SOCK_STREAM?$AA@
  004a7	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  004ae	e8 00 00 00 00	 call	 PyErr_SetString

; 7317 :         goto error;

  004b3	e9 29 05 00 00	 jmp	 $error$131185
$LN19@create_pxs:

; 7318 :     }
; 7319 : 
; 7320 :     if (s->port < 0 || s->port > 0xffff) {

  004b8	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  004bd	83 b8 30 02 00
	00 00		 cmp	 DWORD PTR [rax+560], 0
  004c4	7c 11		 jl	 SHORT $LN17@create_pxs
  004c6	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  004cb	81 b8 30 02 00
	00 ff ff 00 00	 cmp	 DWORD PTR [rax+560], 65535 ; 0000ffffH
  004d5	7e 18		 jle	 SHORT $LN18@create_pxs
$LN17@create_pxs:

; 7321 :         PyErr_SetString(PyExc_OverflowError, "socket: port must be 0-65535");

  004d7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@JNEAFDJK@socket?3?5port?5must?5be?50?965535?$AA@
  004de	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_OverflowError
  004e5	e8 00 00 00 00	 call	 PyErr_SetString

; 7322 :         goto error;

  004ea	e9 f2 04 00 00	 jmp	 $error$131185
$LN18@create_pxs:

; 7323 :     }
; 7324 : 
; 7325 :     if (host[0] >= '1' && host[0] <= '9') {

  004ef	48 8b 44 24 70	 mov	 rax, QWORD PTR host$[rsp]
  004f4	0f be 00	 movsx	 eax, BYTE PTR [rax]
  004f7	83 f8 31	 cmp	 eax, 49			; 00000031H
  004fa	0f 8c 86 02 00
	00		 jl	 $LN16@create_pxs
  00500	48 8b 44 24 70	 mov	 rax, QWORD PTR host$[rsp]
  00505	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00508	83 f8 39	 cmp	 eax, 57			; 00000039H
  0050b	0f 8f 75 02 00
	00		 jg	 $LN16@create_pxs

; 7326 :         int d1, d2, d3, d4;
; 7327 :         char ch;
; 7328 : 
; 7329 :         if (sscanf(host, "%d.%d.%d.%d%c", &d1, &d2, &d3, &d4, &ch) == 4 &&
; 7330 :             0 <= d1 && d1 <= 255 && 0 <= d2 && d2 <= 255 &&
; 7331 :             0 <= d3 && d3 <= 255 && 0 <= d4 && d4 <= 255)

  00511	48 8d 84 24 ac
	00 00 00	 lea	 rax, QWORD PTR ch$131198[rsp]
  00519	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  0051e	48 8d 84 24 b0
	00 00 00	 lea	 rax, QWORD PTR d4$131197[rsp]
  00526	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0052b	48 8d 84 24 a8
	00 00 00	 lea	 rax, QWORD PTR d3$131196[rsp]
  00533	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00538	4c 8d 8c 24 a4
	00 00 00	 lea	 r9, QWORD PTR d2$131195[rsp]
  00540	4c 8d 84 24 b4
	00 00 00	 lea	 r8, QWORD PTR d1$131194[rsp]
  00548	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0O@DMHOKMA@?$CFd?4?$CFd?4?$CFd?4?$CFd?$CFc?$AA@
  0054f	48 8b 4c 24 70	 mov	 rcx, QWORD PTR host$[rsp]
  00554	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_sscanf
  0055a	83 f8 04	 cmp	 eax, 4
  0055d	0f 85 09 02 00
	00		 jne	 $LN15@create_pxs
  00563	83 bc 24 b4 00
	00 00 00	 cmp	 DWORD PTR d1$131194[rsp], 0
  0056b	0f 8c fb 01 00
	00		 jl	 $LN15@create_pxs
  00571	81 bc 24 b4 00
	00 00 ff 00 00
	00		 cmp	 DWORD PTR d1$131194[rsp], 255 ; 000000ffH
  0057c	0f 8f ea 01 00
	00		 jg	 $LN15@create_pxs
  00582	83 bc 24 a4 00
	00 00 00	 cmp	 DWORD PTR d2$131195[rsp], 0
  0058a	0f 8c dc 01 00
	00		 jl	 $LN15@create_pxs
  00590	81 bc 24 a4 00
	00 00 ff 00 00
	00		 cmp	 DWORD PTR d2$131195[rsp], 255 ; 000000ffH
  0059b	0f 8f cb 01 00
	00		 jg	 $LN15@create_pxs
  005a1	83 bc 24 a8 00
	00 00 00	 cmp	 DWORD PTR d3$131196[rsp], 0
  005a9	0f 8c bd 01 00
	00		 jl	 $LN15@create_pxs
  005af	81 bc 24 a8 00
	00 00 ff 00 00
	00		 cmp	 DWORD PTR d3$131196[rsp], 255 ; 000000ffH
  005ba	0f 8f ac 01 00
	00		 jg	 $LN15@create_pxs
  005c0	83 bc 24 b0 00
	00 00 00	 cmp	 DWORD PTR d4$131197[rsp], 0
  005c8	0f 8c 9e 01 00
	00		 jl	 $LN15@create_pxs
  005ce	81 bc 24 b0 00
	00 00 ff 00 00
	00		 cmp	 DWORD PTR d4$131197[rsp], 255 ; 000000ffH
  005d9	0f 8f 8d 01 00
	00		 jg	 $LN15@create_pxs

; 7332 :         {
; 7333 :             struct sockaddr_in *sin;
; 7334 :             int *len;
; 7335 : 
; 7336 :             /* xxx todo: now that we've switched to having a context
; 7337 :              * encapsulate the socket, we should change these char[n]
; 7338 :              * arrays into pointers that are _PyHeap_Malloc'd with the
; 7339 :              * socket's context. */
; 7340 :             memset(&s->ip[0], 0, 16);

  005df	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  005e4	48 05 14 02 00
	00		 add	 rax, 532		; 00000214H
  005ea	41 b8 10 00 00
	00		 mov	 r8d, 16
  005f0	33 d2		 xor	 edx, edx
  005f2	48 8b c8	 mov	 rcx, rax
  005f5	e8 00 00 00 00	 call	 memset

; 7341 :             strncpy(&s->ip[0], host, 15);

  005fa	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  005ff	48 05 14 02 00
	00		 add	 rax, 532		; 00000214H
  00605	41 b8 0f 00 00
	00		 mov	 r8d, 15
  0060b	48 8b 54 24 70	 mov	 rdx, QWORD PTR host$[rsp]
  00610	48 8b c8	 mov	 rcx, rax
  00613	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strncpy

; 7342 :             assert(s->ip[15] == '\0');

  00619	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0061e	0f be 80 23 02
	00 00		 movsx	 eax, BYTE PTR [rax+547]
  00625	85 c0		 test	 eax, eax
  00627	74 1c		 je	 SHORT $LN47@create_pxs
  00629	41 b8 ae 1c 00
	00		 mov	 r8d, 7342		; 00001caeH
  0062f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00636	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CE@PPCGGIMK@?$AAs?$AA?9?$AA?$DO?$AAi?$AAp?$AA?$FL?$AA1?$AA5?$AA?$FN?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA?8?$AA?2?$AA0?$AA?8?$AA?$AA@
  0063d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00643	33 c0		 xor	 eax, eax
$LN47@create_pxs:

; 7343 :             s->host = &(s->ip[0]);

  00645	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0064a	48 05 14 02 00
	00		 add	 rax, 532		; 00000214H
  00650	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  00655	48 89 81 28 02
	00 00		 mov	 QWORD PTR [rcx+552], rax

; 7344 : 
; 7345 :             if (PxSocket_IS_CLIENT(s)) {

  0065c	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00661	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  00667	83 e0 01	 and	 eax, 1
  0066a	85 c0		 test	 eax, eax
  0066c	74 28		 je	 SHORT $LN14@create_pxs

; 7346 :                 sin = &(s->remote_addr.in);

  0066e	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00673	48 05 70 01 00
	00		 add	 rax, 368		; 00000170H
  00679	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR sin$131201[rsp], rax

; 7347 :                 len = &(s->remote_addr_len);

  00681	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00686	48 05 f0 01 00
	00		 add	 rax, 496		; 000001f0H
  0068c	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR len$131202[rsp], rax
  00694	eb 5c		 jmp	 SHORT $LN13@create_pxs
$LN14@create_pxs:

; 7348 :             } else if (PxSocket_IS_SERVER(s)) {

  00696	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0069b	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  006a1	83 e0 02	 and	 eax, 2
  006a4	85 c0		 test	 eax, eax
  006a6	74 28		 je	 SHORT $LN12@create_pxs

; 7349 :                 sin = &(s->local_addr.in);

  006a8	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  006ad	48 05 e8 00 00
	00		 add	 rax, 232		; 000000e8H
  006b3	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR sin$131201[rsp], rax

; 7350 :                 len = &(s->local_addr_len);

  006bb	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  006c0	48 05 68 01 00
	00		 add	 rax, 360		; 00000168H
  006c6	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR len$131202[rsp], rax

; 7351 :             } else

  006ce	eb 22		 jmp	 SHORT $LN11@create_pxs
$LN12@create_pxs:

; 7352 :                 assert(0);

  006d0	33 c0		 xor	 eax, eax
  006d2	85 c0		 test	 eax, eax
  006d4	75 1c		 jne	 SHORT $LN48@create_pxs
  006d6	41 b8 b8 1c 00
	00		 mov	 r8d, 7352		; 00001cb8H
  006dc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  006e3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_13COJANIEC@?$AA0?$AA?$AA@
  006ea	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  006f0	33 c0		 xor	 eax, eax
$LN48@create_pxs:
$LN11@create_pxs:
$LN13@create_pxs:

; 7353 : 
; 7354 :             sin->sin_addr.s_addr = htonl(
; 7355 :                 ((long)d1 << 24) | ((long)d2 << 16) |
; 7356 :                 ((long)d3 << 8)  | ((long)d4 << 0)
; 7357 :             );

  006f2	8b 84 24 b4 00
	00 00		 mov	 eax, DWORD PTR d1$131194[rsp]
  006f9	c1 e0 18	 shl	 eax, 24
  006fc	8b 8c 24 a4 00
	00 00		 mov	 ecx, DWORD PTR d2$131195[rsp]
  00703	c1 e1 10	 shl	 ecx, 16
  00706	0b c1		 or	 eax, ecx
  00708	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR d3$131196[rsp]
  0070f	c1 e1 08	 shl	 ecx, 8
  00712	0b c1		 or	 eax, ecx
  00714	0b 84 24 b0 00
	00 00		 or	 eax, DWORD PTR d4$131197[rsp]
  0071b	8b c8		 mov	 ecx, eax
  0071d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_htonl
  00723	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR sin$131201[rsp]
  0072b	89 41 04	 mov	 DWORD PTR [rcx+4], eax

; 7358 : 
; 7359 :             sin->sin_family = AF_INET;

  0072e	b8 02 00 00 00	 mov	 eax, 2
  00733	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR sin$131201[rsp]
  0073b	66 89 01	 mov	 WORD PTR [rcx], ax

; 7360 :             sin->sin_port = htons((short)s->port);

  0073e	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00743	0f b7 88 30 02
	00 00		 movzx	 ecx, WORD PTR [rax+560]
  0074a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_htons
  00750	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR sin$131201[rsp]
  00758	66 89 41 02	 mov	 WORD PTR [rcx+2], ax

; 7361 :             *len = sizeof(*sin);

  0075c	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR len$131202[rsp]
  00764	c7 00 10 00 00
	00		 mov	 DWORD PTR [rax], 16

; 7362 :         } else {

  0076a	eb 18		 jmp	 SHORT $LN10@create_pxs
$LN15@create_pxs:

; 7363 :             PyErr_SetString(PyExc_ValueError, "invalid IPv4 address");

  0076c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BF@GFODGHCG@invalid?5IPv4?5address?$AA@
  00773	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0077a	e8 00 00 00 00	 call	 PyErr_SetString

; 7364 :             goto error;

  0077f	e9 5d 02 00 00	 jmp	 $error$131185
$LN10@create_pxs:

; 7365 :         }
; 7366 :     } else {

  00784	eb 48		 jmp	 SHORT $LN9@create_pxs
$LN16@create_pxs:

; 7367 :         strncpy(s->host, host, hostlen);

  00786	4c 8b 44 24 50	 mov	 r8, QWORD PTR hostlen$[rsp]
  0078b	48 8b 54 24 70	 mov	 rdx, QWORD PTR host$[rsp]
  00790	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00795	48 8b 88 28 02
	00 00		 mov	 rcx, QWORD PTR [rax+552]
  0079c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strncpy

; 7368 :         assert(!s->ip);

  007a2	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  007a7	48 05 14 02 00
	00		 add	 rax, 532		; 00000214H
  007ad	48 85 c0	 test	 rax, rax
  007b0	74 1c		 je	 SHORT $LN49@create_pxs
  007b2	41 b8 c8 1c 00
	00		 mov	 r8d, 7368		; 00001cc8H
  007b8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  007bf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1O@EDNLHLLD@?$AA?$CB?$AAs?$AA?9?$AA?$DO?$AAi?$AAp?$AA?$AA@
  007c6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  007cc	33 c0		 xor	 eax, eax
$LN49@create_pxs:
$LN9@create_pxs:
$serverclient$131182:

; 7369 :     }
; 7370 : 
; 7371 : serverclient:
; 7372 :     if (s->sock_fd != INVALID_SOCKET)

  007ce	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  007d3	48 83 78 60 ff	 cmp	 QWORD PTR [rax+96], -1
  007d8	74 02		 je	 SHORT $LN8@create_pxs

; 7373 :         goto setnonblock;

  007da	eb 41		 jmp	 SHORT $setnonblock$131224
$LN8@create_pxs:

; 7374 : 
; 7375 :     s->sock_fd = socket(s->sock_family, s->sock_type, s->sock_proto);

  007dc	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  007e1	44 8b 40 70	 mov	 r8d, DWORD PTR [rax+112]
  007e5	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  007ea	8b 50 6c	 mov	 edx, DWORD PTR [rax+108]
  007ed	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  007f2	8b 48 68	 mov	 ecx, DWORD PTR [rax+104]
  007f5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_socket
  007fb	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  00800	48 89 41 60	 mov	 QWORD PTR [rcx+96], rax

; 7376 :     if (s->sock_fd == INVALID_SOCKET) {

  00804	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00809	48 83 78 60 ff	 cmp	 QWORD PTR [rax+96], -1
  0080e	75 0d		 jne	 SHORT $LN7@create_pxs

; 7377 :         s->errorhandler();

  00810	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00815	ff 50 78	 call	 QWORD PTR [rax+120]

; 7378 :         goto error;

  00818	e9 c4 01 00 00	 jmp	 $error$131185
$LN7@create_pxs:
$setnonblock$131224:

; 7379 :     }
; 7380 : 
; 7381 : setnonblock:
; 7382 :     fd = s->sock_fd;

  0081d	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00822	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00826	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR fd$[rsp], rax

; 7383 :     if (ioctlsocket(fd, FIONBIO, &nonblock) == SOCKET_ERROR)

  0082e	4c 8d 44 24 58	 lea	 r8, QWORD PTR nonblock$[rsp]
  00833	ba 7e 66 04 80	 mov	 edx, -2147195266	; ffffffff8004667eH
  00838	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR fd$[rsp]
  00840	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ioctlsocket
  00846	83 f8 ff	 cmp	 eax, -1
  00849	75 05		 jne	 SHORT $LN6@create_pxs

; 7384 :         goto free_sock;

  0084b	e9 6d 01 00 00	 jmp	 $free_sock$131230
$LN6@create_pxs:

; 7385 : 
; 7386 :     val = (char *)&(s->recvbuf_size);

  00850	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00855	48 05 60 02 00
	00		 add	 rax, 608		; 00000260H
  0085b	48 89 44 24 78	 mov	 QWORD PTR val$[rsp], rax

; 7387 :     if (getsockopt(fd, SOL_SOCKET, SO_RCVBUF, val, &len) == SOCKET_ERROR)

  00860	48 8d 44 24 68	 lea	 rax, QWORD PTR len$[rsp]
  00865	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0086a	4c 8b 4c 24 78	 mov	 r9, QWORD PTR val$[rsp]
  0086f	41 b8 02 10 00
	00		 mov	 r8d, 4098		; 00001002H
  00875	ba ff ff 00 00	 mov	 edx, 65535		; 0000ffffH
  0087a	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR fd$[rsp]
  00882	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_getsockopt
  00888	83 f8 ff	 cmp	 eax, -1
  0088b	75 05		 jne	 SHORT $LN5@create_pxs

; 7388 :         goto free_sock;

  0088d	e9 2b 01 00 00	 jmp	 $free_sock$131230
$LN5@create_pxs:

; 7389 : 
; 7390 :     assert(s->recvbuf_size >= 1024 && s->recvbuf_size <= 65536);

  00892	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00897	81 b8 60 02 00
	00 00 04 00 00	 cmp	 DWORD PTR [rax+608], 1024 ; 00000400H
  008a1	7c 11		 jl	 SHORT $LN50@create_pxs
  008a3	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  008a8	81 b8 60 02 00
	00 00 00 01 00	 cmp	 DWORD PTR [rax+608], 65536 ; 00010000H
  008b2	7e 1c		 jle	 SHORT $LN51@create_pxs
$LN50@create_pxs:
  008b4	41 b8 de 1c 00
	00		 mov	 r8d, 7390		; 00001cdeH
  008ba	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  008c1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1GI@MCCCHGJG@?$AAs?$AA?9?$AA?$DO?$AAr?$AAe?$AAc?$AAv?$AAb?$AAu?$AAf?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA1?$AA0?$AA2?$AA4?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAs?$AA?9?$AA?$DO?$AAr?$AAe@
  008c8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  008ce	33 c0		 xor	 eax, eax
$LN51@create_pxs:

; 7391 : 
; 7392 :     val = (char *)&(s->sendbuf_size);

  008d0	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  008d5	48 05 64 02 00
	00		 add	 rax, 612		; 00000264H
  008db	48 89 44 24 78	 mov	 QWORD PTR val$[rsp], rax

; 7393 :     if (getsockopt(fd, SOL_SOCKET, SO_RCVBUF, val, &len) == SOCKET_ERROR)

  008e0	48 8d 44 24 68	 lea	 rax, QWORD PTR len$[rsp]
  008e5	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  008ea	4c 8b 4c 24 78	 mov	 r9, QWORD PTR val$[rsp]
  008ef	41 b8 02 10 00
	00		 mov	 r8d, 4098		; 00001002H
  008f5	ba ff ff 00 00	 mov	 edx, 65535		; 0000ffffH
  008fa	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR fd$[rsp]
  00902	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_getsockopt
  00908	83 f8 ff	 cmp	 eax, -1
  0090b	75 05		 jne	 SHORT $LN4@create_pxs

; 7394 :         goto free_sock;

  0090d	e9 ab 00 00 00	 jmp	 $free_sock$131230
$LN4@create_pxs:

; 7395 : 
; 7396 :     assert(s->sendbuf_size >= 1024 && s->sendbuf_size <= 65536);

  00912	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00917	81 b8 64 02 00
	00 00 04 00 00	 cmp	 DWORD PTR [rax+612], 1024 ; 00000400H
  00921	7c 11		 jl	 SHORT $LN52@create_pxs
  00923	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00928	81 b8 64 02 00
	00 00 00 01 00	 cmp	 DWORD PTR [rax+612], 65536 ; 00010000H
  00932	7e 1c		 jle	 SHORT $LN53@create_pxs
$LN52@create_pxs:
  00934	41 b8 e4 1c 00
	00		 mov	 r8d, 7396		; 00001ce4H
  0093a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00941	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1GI@LANPDHLO@?$AAs?$AA?9?$AA?$DO?$AAs?$AAe?$AAn?$AAd?$AAb?$AAu?$AAf?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA1?$AA0?$AA2?$AA4?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAs?$AA?9?$AA?$DO?$AAs?$AAe@
  00948	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0094e	33 c0		 xor	 eax, eax
$LN53@create_pxs:

; 7397 : 
; 7398 :     InitializeCriticalSectionAndSpinCount(&(s->cs), CS_SOCK_SPINCOUNT);

  00950	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00955	48 05 38 02 00
	00		 add	 rax, 568		; 00000238H
  0095b	ba 04 00 00 00	 mov	 edx, 4
  00960	48 8b c8	 mov	 rcx, rax
  00963	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_InitializeCriticalSectionAndSpinCount

; 7399 : 
; 7400 :     if (!PxSocket_IS_SERVERCLIENT(s))

  00969	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0096e	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  00974	25 80 00 00 00	 and	 eax, 128		; 00000080H
  00979	85 c0		 test	 eax, eax
  0097b	75 02		 jne	 SHORT $LN3@create_pxs

; 7401 :         /*_protect((PyObject *)s);*/
; 7402 :         ;
; 7403 :     else

  0097d	eb 14		 jmp	 SHORT $LN2@create_pxs
$LN3@create_pxs:

; 7404 :         s->parent = parent;

  0097f	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00984	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR parent$[rsp]
  0098c	48 89 88 30 04
	00 00		 mov	 QWORD PTR [rax+1072], rcx
$LN2@create_pxs:

; 7405 : 
; 7406 :     if (PxSocket_IS_SERVER(s))

  00993	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00998	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  0099e	83 e0 02	 and	 eax, 2
  009a1	85 c0		 test	 eax, eax
  009a3	74 11		 je	 SHORT $LN1@create_pxs

; 7407 :         s->preallocate = _PxSocketServer_PreallocatedSockets;

  009a5	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  009aa	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _PxSocketServer_PreallocatedSockets
  009b0	89 88 8c 03 00
	00		 mov	 DWORD PTR [rax+908], ecx
$LN1@create_pxs:

; 7408 : 
; 7409 :     return (PyObject *)s;

  009b6	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  009bb	eb 56		 jmp	 SHORT $LN34@create_pxs
$free_sock$131230:

; 7410 : 
; 7411 : free_sock:
; 7412 :     s->errorhandler();

  009bd	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  009c2	ff 50 78	 call	 QWORD PTR [rax+120]

; 7413 :     (void)closesocket(s->sock_fd);

  009c5	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  009ca	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  009ce	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_closesocket

; 7414 :     s->sock_fd = -1;

  009d4	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  009d9	48 c7 40 60 ff
	ff ff ff	 mov	 QWORD PTR [rax+96], -1
$error$131185:

; 7415 : 
; 7416 : error:
; 7417 :     assert(PyErr_Occurred());

  009e1	e8 00 00 00 00	 call	 PyErr_Occurred
  009e6	48 85 c0	 test	 rax, rax
  009e9	75 1c		 jne	 SHORT $LN54@create_pxs
  009eb	41 b8 f9 1c 00
	00		 mov	 r8d, 7417		; 00001cf9H
  009f1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  009f8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CC@DNBCFJEA@?$AAP?$AAy?$AAE?$AAr?$AAr?$AA_?$AAO?$AAc?$AAc?$AAu?$AAr?$AAr?$AAe?$AAd?$AA?$CI?$AA?$CJ?$AA?$AA@
  009ff	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00a05	33 c0		 xor	 eax, eax
$LN54@create_pxs:

; 7418 :     Py_DECREF(s);

  00a07	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  00a0c	e8 00 00 00 00	 call	 _Py_DecRef

; 7419 :     return NULL;

  00a11	33 c0		 xor	 eax, eax
$LN34@create_pxs:

; 7420 : }

  00a13	48 81 c4 d8 00
	00 00		 add	 rsp, 216		; 000000d8H
  00a1a	c3		 ret	 0
create_pxsocket ENDP
_TEXT	ENDS
PUBLIC	pxsocket_accept
;	COMDAT pdata
pdata	SEGMENT
$pdata$pxsocket_accept DD imagerel $LN3
	DD	imagerel $LN3+38
	DD	imagerel $unwind$pxsocket_accept
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$pxsocket_accept DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT pxsocket_accept
_TEXT	SEGMENT
s$ = 48
args$ = 56
pxsocket_accept PROC					; COMDAT

; 7431 : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 7432 :     Py_RETURN_NONE;

  0000e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00015	e8 00 00 00 00	 call	 _Py_IncRef
  0001a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 7433 : }

  00021	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00025	c3		 ret	 0
pxsocket_accept ENDP
_TEXT	ENDS
EXTRN	Py_VaBuildValue:PROC
EXTRN	strcmp:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PxSocket_HandleCallback DD imagerel $LN18
	DD	imagerel $LN18+482
	DD	imagerel $unwind$PxSocket_HandleCallback
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PxSocket_HandleCallback DD 011801H
	DD	0c218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PxSocket_HandleCallback
_TEXT	SEGMENT
args$ = 32
s$ = 40
va$ = 48
protocol$ = 56
result$ = 64
o$ = 72
func$ = 80
tv83 = 88
c$ = 112
name$ = 120
format$ = 128
PxSocket_HandleCallback PROC				; COMDAT

; 7442 : {

$LN18:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 7443 :     va_list va;
; 7444 :     PyObject *func, *args, *result;
; 7445 :     PxSocket *s = (PxSocket *)c->io_obj;

  00018	48 8b 44 24 70	 mov	 rax, QWORD PTR c$[rsp]
  0001d	48 8b 80 a8 32
	00 00		 mov	 rax, QWORD PTR [rax+12968]
  00024	48 89 44 24 28	 mov	 QWORD PTR s$[rsp], rax

; 7446 :     PyObject *o = (PyObject *)s;

  00029	48 8b 44 24 28	 mov	 rax, QWORD PTR s$[rsp]
  0002e	48 89 44 24 48	 mov	 QWORD PTR o$[rsp], rax

; 7447 :     PyObject *protocol = s->protocol;

  00033	48 8b 44 24 28	 mov	 rax, QWORD PTR s$[rsp]
  00038	48 8b 80 90 02
	00 00		 mov	 rax, QWORD PTR [rax+656]
  0003f	48 89 44 24 38	 mov	 QWORD PTR protocol$[rsp], rax

; 7448 : 
; 7449 :     if (!strcmp(name, "connection_made"))

  00044	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BA@EKHLBOND@connection_made?$AA@
  0004b	48 8b 4c 24 78	 mov	 rcx, QWORD PTR name$[rsp]
  00050	e8 00 00 00 00	 call	 strcmp
  00055	85 c0		 test	 eax, eax
  00057	75 1a		 jne	 SHORT $LN10@PxSocket_H@3

; 7450 :         Px_SOCKFLAGS(s) |= Px_SOCKFLAGS_CALLED_CONNECTION_MADE;

  00059	48 8b 44 24 28	 mov	 rax, QWORD PTR s$[rsp]
  0005e	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  00064	0f ba e8 19	 bts	 eax, 25
  00068	48 8b 4c 24 28	 mov	 rcx, QWORD PTR s$[rsp]
  0006d	89 81 f4 01 00
	00		 mov	 DWORD PTR [rcx+500], eax
$LN10@PxSocket_H@3:

; 7451 : 
; 7452 :     READ_LOCK(o);

  00073	48 8b 4c 24 48	 mov	 rcx, QWORD PTR o$[rsp]
  00078	e8 00 00 00 00	 call	 _read_lock

; 7453 :     func = PxSocket_GET_ATTR(name);

  0007d	48 8b 54 24 78	 mov	 rdx, QWORD PTR name$[rsp]
  00082	48 8b 44 24 28	 mov	 rax, QWORD PTR s$[rsp]
  00087	48 8b 88 90 02
	00 00		 mov	 rcx, QWORD PTR [rax+656]
  0008e	e8 00 00 00 00	 call	 PyObject_HasAttrString
  00093	85 c0		 test	 eax, eax
  00095	74 1d		 je	 SHORT $LN13@PxSocket_H@3
  00097	48 8b 54 24 78	 mov	 rdx, QWORD PTR name$[rsp]
  0009c	48 8b 44 24 28	 mov	 rax, QWORD PTR s$[rsp]
  000a1	48 8b 88 90 02
	00 00		 mov	 rcx, QWORD PTR [rax+656]
  000a8	e8 00 00 00 00	 call	 PyObject_GetAttrString
  000ad	48 89 44 24 58	 mov	 QWORD PTR tv83[rsp], rax
  000b2	eb 0c		 jmp	 SHORT $LN14@PxSocket_H@3
$LN13@PxSocket_H@3:
  000b4	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000bb	48 89 44 24 58	 mov	 QWORD PTR tv83[rsp], rax
$LN14@PxSocket_H@3:
  000c0	48 8b 44 24 58	 mov	 rax, QWORD PTR tv83[rsp]
  000c5	48 89 44 24 50	 mov	 QWORD PTR func$[rsp], rax

; 7454 :     READ_UNLOCK(o);

  000ca	48 8b 4c 24 48	 mov	 rcx, QWORD PTR o$[rsp]
  000cf	e8 00 00 00 00	 call	 _read_unlock

; 7455 : 
; 7456 :     if (!func || func == Py_None)

  000d4	48 83 7c 24 50
	00		 cmp	 QWORD PTR func$[rsp], 0
  000da	74 0e		 je	 SHORT $LN8@PxSocket_H@3
  000dc	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000e3	48 39 44 24 50	 cmp	 QWORD PTR func$[rsp], rax
  000e8	75 05		 jne	 SHORT $LN9@PxSocket_H@3
$LN8@PxSocket_H@3:

; 7457 :         goto end;

  000ea	e9 ee 00 00 00	 jmp	 $end$131285
$LN9@PxSocket_H@3:

; 7458 : 
; 7459 :     va_start(va, format);

  000ef	48 8d 84 24 88
	00 00 00	 lea	 rax, QWORD PTR format$[rsp+8]
  000f7	48 89 44 24 30	 mov	 QWORD PTR va$[rsp], rax

; 7460 :     args = Py_VaBuildValue(format, va);

  000fc	48 8b 54 24 30	 mov	 rdx, QWORD PTR va$[rsp]
  00101	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR format$[rsp]
  00109	e8 00 00 00 00	 call	 Py_VaBuildValue
  0010e	48 89 44 24 20	 mov	 QWORD PTR args$[rsp], rax

; 7461 :     va_end(va);

  00113	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR va$[rsp], 0

; 7462 : 
; 7463 :     /*
; 7464 :     if (!PxContext_Snapshot(c))
; 7465 :         PxSocket_EXCEPTION();
; 7466 :     */
; 7467 : 
; 7468 :     result = PyObject_CallObject(func, args);

  0011c	48 8b 54 24 20	 mov	 rdx, QWORD PTR args$[rsp]
  00121	48 8b 4c 24 50	 mov	 rcx, QWORD PTR func$[rsp]
  00126	e8 00 00 00 00	 call	 PyObject_CallObject
  0012b	48 89 44 24 40	 mov	 QWORD PTR result$[rsp], rax

; 7469 : 
; 7470 :     if (result)

  00130	48 83 7c 24 40
	00		 cmp	 QWORD PTR result$[rsp], 0
  00136	74 26		 je	 SHORT $LN7@PxSocket_H@3

; 7471 :         assert(!PyErr_Occurred());

  00138	e8 00 00 00 00	 call	 PyErr_Occurred
  0013d	48 85 c0	 test	 rax, rax
  00140	74 1c		 je	 SHORT $LN15@PxSocket_H@3
  00142	41 b8 2f 1d 00
	00		 mov	 r8d, 7471		; 00001d2fH
  00148	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0014f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CE@JKFGJBND@?$AA?$CB?$AAP?$AAy?$AAE?$AAr?$AAr?$AA_?$AAO?$AAc?$AAc?$AAu?$AAr?$AAr?$AAe?$AAd?$AA?$CI?$AA?$CJ?$AA?$AA@
  00156	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0015c	33 c0		 xor	 eax, eax
$LN15@PxSocket_H@3:
$LN7@PxSocket_H@3:

; 7472 : 
; 7473 :     if (PyErr_Occurred())

  0015e	e8 00 00 00 00	 call	 PyErr_Occurred
  00163	48 85 c0	 test	 rax, rax
  00166	74 24		 je	 SHORT $LN6@PxSocket_H@3

; 7474 :         assert(!result);

  00168	48 83 7c 24 40
	00		 cmp	 QWORD PTR result$[rsp], 0
  0016e	74 1c		 je	 SHORT $LN16@PxSocket_H@3
  00170	41 b8 32 1d 00
	00		 mov	 r8d, 7474		; 00001d32H
  00176	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0017d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BA@HDEGGLDD@?$AA?$CB?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA?$AA@
  00184	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0018a	33 c0		 xor	 eax, eax
$LN16@PxSocket_H@3:
$LN6@PxSocket_H@3:

; 7475 : 
; 7476 :     if (!result)

  0018c	48 83 7c 24 40
	00		 cmp	 QWORD PTR result$[rsp], 0
  00192	75 42		 jne	 SHORT $LN5@PxSocket_H@3
$LN4@PxSocket_H@3:

; 7477 :         PxSocket_EXCEPTION();

  00194	e8 00 00 00 00	 call	 PyErr_Occurred
  00199	48 85 c0	 test	 rax, rax
  0019c	75 1c		 jne	 SHORT $LN17@PxSocket_H@3
  0019e	41 b8 35 1d 00
	00		 mov	 r8d, 7477		; 00001d35H
  001a4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  001ab	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CC@DNBCFJEA@?$AAP?$AAy?$AAE?$AAr?$AAr?$AA_?$AAO?$AAc?$AAc?$AAu?$AAr?$AAr?$AAe?$AAd?$AA?$CI?$AA?$CJ?$AA?$AA@
  001b2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001b8	33 c0		 xor	 eax, eax
$LN17@PxSocket_H@3:
  001ba	45 33 c0	 xor	 r8d, r8d
  001bd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  001c4	48 8b 4c 24 70	 mov	 rcx, QWORD PTR c$[rsp]
  001c9	e8 00 00 00 00	 call	 PxSocket_HandleException
  001ce	eb 0d		 jmp	 SHORT $end$131285
  001d0	33 c0		 xor	 eax, eax
  001d2	85 c0		 test	 eax, eax
  001d4	75 be		 jne	 SHORT $LN4@PxSocket_H@3
$LN5@PxSocket_H@3:

; 7478 : 
; 7479 :     if (result == Py_None)

  001d6	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
$end$131285:

; 7480 :         goto end;
; 7481 : 
; 7482 : end:
; 7483 :     return;
; 7484 : }

  001dd	48 83 c4 68	 add	 rsp, 104		; 00000068H
  001e1	c3		 ret	 0
PxSocket_HandleCallback ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PxServerSocket_ClientClosed DD imagerel $LN5
	DD	imagerel $LN5+220
	DD	imagerel $unwind$PxServerSocket_ClientClosed
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PxServerSocket_ClientClosed DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PxServerSocket_ClientClosed
_TEXT	SEGMENT
x$ = 32
s$ = 40
o$ = 64
PxServerSocket_ClientClosed PROC			; COMDAT

; 7488 : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 7489 :     Context  *x = o->ctx;

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR o$[rsp]
  0000e	48 8b 80 00 02
	00 00		 mov	 rax, QWORD PTR [rax+512]
  00015	48 89 44 24 20	 mov	 QWORD PTR x$[rsp], rax

; 7490 :     PxSocket *s = o->parent;

  0001a	48 8b 44 24 40	 mov	 rax, QWORD PTR o$[rsp]
  0001f	48 8b 80 30 04
	00 00		 mov	 rax, QWORD PTR [rax+1072]
  00026	48 89 44 24 28	 mov	 QWORD PTR s$[rsp], rax

; 7491 : 
; 7492 :     x->io_obj = NULL;

  0002b	48 8b 44 24 20	 mov	 rax, QWORD PTR x$[rsp]
  00030	48 c7 80 a8 32
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+12968], 0

; 7493 : 
; 7494 :     if (PxSocket_IS_HOG(o)) {

  0003b	48 8b 44 24 40	 mov	 rax, QWORD PTR o$[rsp]
  00040	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  00046	83 e0 04	 and	 eax, 4
  00049	85 c0		 test	 eax, eax
  0004b	74 23		 je	 SHORT $LN2@PxServerSo

; 7495 :         Px_SOCKFLAGS(s) &= ~Px_SOCKFLAGS_HOG;

  0004d	48 8b 44 24 28	 mov	 rax, QWORD PTR s$[rsp]
  00052	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  00058	83 e0 fb	 and	 eax, -5			; fffffffbH
  0005b	48 8b 4c 24 28	 mov	 rcx, QWORD PTR s$[rsp]
  00060	89 81 f4 01 00
	00		 mov	 DWORD PTR [rcx+500], eax

; 7496 :         InterlockedDecrement(&_PxSocket_ActiveHogs);

  00066	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PxSocket_ActiveHogs
  0006d	f0 ff 08	 lock dec DWORD PTR [rax]
$LN2@PxServerSo:

; 7497 :     }
; 7498 : 
; 7499 :     /* temp stats for chargen */
; 7500 :     /*
; 7501 :     {
; 7502 :         size_t lines, lps;
; 7503 :         double Bs, KBs, MBs;
; 7504 :         SOCKET fd = o->sock_fd;
; 7505 : 
; 7506 :         lines = o->send_nbytes / 73;
; 7507 : 
; 7508 :         if (o->connect_time <= 0) {
; 7509 :             printf("[%d/%d/%d] client sent %d bytes (%d lines)\n",
; 7510 :                    s->nchildren, o->child_id, fd, o->send_nbytes, lines);
; 7511 :         } else {
; 7512 :             Bs = (double)o->send_nbytes / o->connect_time;
; 7513 :             KBs = Bs / 1024.0;
; 7514 :             MBs = KBs / 1024.0;
; 7515 :             lines = o->send_nbytes / 73;
; 7516 :             lps = lines / o->connect_time;
; 7517 : 
; 7518 :             printf("[%d/%d/%d] client sent %d bytes total, connect time: "
; 7519 :                    "%d seconds, %.3fb/s, %.3fKB/s, %.3fMB/s, "
; 7520 :                    "lines: %d, lps: %d\n",
; 7521 :                    s->nchildren, o->child_id, fd, o->send_nbytes,
; 7522 :                    o->connect_time, Bs, KBs, MBs, lines, lps);
; 7523 :         }
; 7524 :     }
; 7525 :     */
; 7526 : 
; 7527 :     PxSocket_CallbackComplete(x);

  00070	48 8b 4c 24 20	 mov	 rcx, QWORD PTR x$[rsp]
  00075	e8 00 00 00 00	 call	 PxSocket_CallbackComplete

; 7528 : 
; 7529 :     o->ctx = NULL;

  0007a	48 8b 44 24 40	 mov	 rax, QWORD PTR o$[rsp]
  0007f	48 c7 80 00 02
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+512], 0

; 7530 : 
; 7531 :     if (!(Px_SOCKFLAGS(s) & Px_SOCKFLAGS_CLEAN_DISCONNECT))

  0008a	48 8b 44 24 28	 mov	 rax, QWORD PTR s$[rsp]
  0008f	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  00095	83 e0 20	 and	 eax, 32			; 00000020H
  00098	85 c0		 test	 eax, eax
  0009a	75 0d		 jne	 SHORT $LN1@PxServerSo

; 7532 :         o->sock_fd = -1;

  0009c	48 8b 44 24 40	 mov	 rax, QWORD PTR o$[rsp]
  000a1	48 c7 40 60 ff
	ff ff ff	 mov	 QWORD PTR [rax+96], -1
$LN1@PxServerSo:

; 7533 : 
; 7534 :     /*PxList_PushSocket(s->freelist, o);*/
; 7535 : 
; 7536 :     InterlockedDecrement(&(s->nchildren));

  000a9	48 8b 44 24 28	 mov	 rax, QWORD PTR s$[rsp]
  000ae	48 05 20 04 00
	00		 add	 rax, 1056		; 00000420H
  000b4	f0 ff 08	 lock dec DWORD PTR [rax]

; 7537 :     InterlockedIncrement(&(s->num_accepts_wanted));

  000b7	48 8b 44 24 28	 mov	 rax, QWORD PTR s$[rsp]
  000bc	48 05 f0 03 00
	00		 add	 rax, 1008		; 000003f0H
  000c2	f0 ff 00	 lock inc DWORD PTR [rax]

; 7538 :     SetEvent(s->more_accepts);

  000c5	48 8b 44 24 28	 mov	 rax, QWORD PTR s$[rsp]
  000ca	48 8b 88 f8 03
	00 00		 mov	 rcx, QWORD PTR [rax+1016]
  000d1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SetEvent

; 7539 : }

  000d7	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000db	c3		 ret	 0
PxServerSocket_ClientClosed ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DG@FEFDODGF@call?5depth?5exceeded?5trying?5to?5ex@ ; `string'
PUBLIC	_try_extract_something_sendable_from_object
EXTRN	PyObject_Str:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_try_extract_something_sendable_from_object DD imagerel $LN18
	DD	imagerel $LN18+397
	DD	imagerel $unwind$_try_extract_something_sendable_from_object
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_try_extract_something_sendable_from_object DD 011301H
	DD	08213H
xdata	ENDS
;	COMDAT ??_C@_0DG@FEFDODGF@call?5depth?5exceeded?5trying?5to?5ex@
CONST	SEGMENT
??_C@_0DG@FEFDODGF@call?5depth?5exceeded?5trying?5to?5ex@ DB 'call depth '
	DB	'exceeded trying to extract sendable object', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _try_extract_something_sendable_from_object
_TEXT	SEGMENT
b$ = 32
r$131348 = 40
s$131352 = 48
tv75 = 56
c$ = 80
o$ = 88
depth$ = 96
_try_extract_something_sendable_from_object PROC	; COMDAT

; 7546 : {

$LN18:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 7547 :     PxSocketBuf *b;
; 7548 : 
; 7549 :     if (depth > 10) {

  00013	83 7c 24 60 0a	 cmp	 DWORD PTR depth$[rsp], 10
  00018	7e 1a		 jle	 SHORT $LN12@try_extrac

; 7550 :         PyErr_SetString(PyExc_ValueError, "call depth exceeded trying to "
; 7551 :                                           "extract sendable object");

  0001a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DG@FEFDODGF@call?5depth?5exceeded?5trying?5to?5ex@
  00021	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00028	e8 00 00 00 00	 call	 PyErr_SetString

; 7552 :         return NULL;

  0002d	33 c0		 xor	 eax, eax
  0002f	e9 54 01 00 00	 jmp	 $LN13@try_extrac
$LN12@try_extrac:

; 7553 :     }
; 7554 : 
; 7555 :     if (!o)

  00034	48 83 7c 24 58
	00		 cmp	 QWORD PTR o$[rsp], 0
  0003a	75 07		 jne	 SHORT $LN11@try_extrac

; 7556 :         return NULL;

  0003c	33 c0		 xor	 eax, eax
  0003e	e9 45 01 00 00	 jmp	 $LN13@try_extrac
$LN11@try_extrac:

; 7557 : 
; 7558 :     if (PyBytes_Check(o)) {

  00043	48 8b 44 24 58	 mov	 rax, QWORD PTR o$[rsp]
  00048	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0004c	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00052	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  00057	85 c0		 test	 eax, eax
  00059	74 56		 je	 SHORT $LN10@try_extrac

; 7559 :         b = PyBytesObject2PxSocketBuf(o);

  0005b	48 8b 44 24 58	 mov	 rax, QWORD PTR o$[rsp]
  00060	48 83 e8 30	 sub	 rax, 48			; 00000030H
  00064	48 3b 05 00 00
	00 00		 cmp	 rax, QWORD PTR _PxSocketBufSignature
  0006b	75 10		 jne	 SHORT $LN15@try_extrac
  0006d	48 8b 44 24 58	 mov	 rax, QWORD PTR o$[rsp]
  00072	48 83 e8 30	 sub	 rax, 48			; 00000030H
  00076	48 89 44 24 38	 mov	 QWORD PTR tv75[rsp], rax
  0007b	eb 09		 jmp	 SHORT $LN16@try_extrac
$LN15@try_extrac:
  0007d	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR tv75[rsp], 0
$LN16@try_extrac:
  00086	48 8b 44 24 38	 mov	 rax, QWORD PTR tv75[rsp]
  0008b	48 89 44 24 20	 mov	 QWORD PTR b$[rsp], rax

; 7560 :         if (!b)

  00090	48 83 7c 24 20
	00		 cmp	 QWORD PTR b$[rsp], 0
  00096	75 14		 jne	 SHORT $LN9@try_extrac

; 7561 :             b = new_pxsocketbuf_from_bytes(c, (PyBytesObject *)o);

  00098	48 8b 54 24 58	 mov	 rdx, QWORD PTR o$[rsp]
  0009d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR c$[rsp]
  000a2	e8 00 00 00 00	 call	 new_pxsocketbuf_from_bytes
  000a7	48 89 44 24 20	 mov	 QWORD PTR b$[rsp], rax
$LN9@try_extrac:

; 7562 : 
; 7563 :     } else if (PyUnicode_Check(o)) {

  000ac	e9 a4 00 00 00	 jmp	 $LN8@try_extrac
$LN10@try_extrac:
  000b1	48 8b 44 24 58	 mov	 rax, QWORD PTR o$[rsp]
  000b6	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000ba	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000c0	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  000c5	85 c0		 test	 eax, eax
  000c7	74 16		 je	 SHORT $LN7@try_extrac

; 7564 :         b = new_pxsocketbuf_from_unicode(c, (PyUnicodeObject *)o);

  000c9	48 8b 54 24 58	 mov	 rdx, QWORD PTR o$[rsp]
  000ce	48 8b 4c 24 50	 mov	 rcx, QWORD PTR c$[rsp]
  000d3	e8 00 00 00 00	 call	 new_pxsocketbuf_from_unicode
  000d8	48 89 44 24 20	 mov	 QWORD PTR b$[rsp], rax
  000dd	eb 76		 jmp	 SHORT $LN6@try_extrac
$LN7@try_extrac:

; 7565 : 
; 7566 :     } else if (PyCallable_Check(o)) {

  000df	48 8b 4c 24 58	 mov	 rcx, QWORD PTR o$[rsp]
  000e4	e8 00 00 00 00	 call	 PyCallable_Check
  000e9	85 c0		 test	 eax, eax
  000eb	74 38		 je	 SHORT $LN5@try_extrac

; 7567 :         PyObject *r = PyObject_CallObject(o, NULL);

  000ed	33 d2		 xor	 edx, edx
  000ef	48 8b 4c 24 58	 mov	 rcx, QWORD PTR o$[rsp]
  000f4	e8 00 00 00 00	 call	 PyObject_CallObject
  000f9	48 89 44 24 28	 mov	 QWORD PTR r$131348[rsp], rax

; 7568 :         if (r)

  000fe	48 83 7c 24 28
	00		 cmp	 QWORD PTR r$131348[rsp], 0
  00104	74 1d		 je	 SHORT $LN4@try_extrac

; 7569 :             b = _try_extract_something_sendable_from_object(c, r, depth+1);

  00106	8b 44 24 60	 mov	 eax, DWORD PTR depth$[rsp]
  0010a	ff c0		 inc	 eax
  0010c	44 8b c0	 mov	 r8d, eax
  0010f	48 8b 54 24 28	 mov	 rdx, QWORD PTR r$131348[rsp]
  00114	48 8b 4c 24 50	 mov	 rcx, QWORD PTR c$[rsp]
  00119	e8 00 00 00 00	 call	 _try_extract_something_sendable_from_object
  0011e	48 89 44 24 20	 mov	 QWORD PTR b$[rsp], rax
$LN4@try_extrac:

; 7570 :     } else {

  00123	eb 30		 jmp	 SHORT $LN3@try_extrac
$LN5@try_extrac:

; 7571 :         PyObject *s = PyObject_Str(o);

  00125	48 8b 4c 24 58	 mov	 rcx, QWORD PTR o$[rsp]
  0012a	e8 00 00 00 00	 call	 PyObject_Str
  0012f	48 89 44 24 30	 mov	 QWORD PTR s$131352[rsp], rax

; 7572 :         if (s)

  00134	48 83 7c 24 30
	00		 cmp	 QWORD PTR s$131352[rsp], 0
  0013a	74 19		 je	 SHORT $LN2@try_extrac

; 7573 :             b = _try_extract_something_sendable_from_object(c, s, depth);

  0013c	44 8b 44 24 60	 mov	 r8d, DWORD PTR depth$[rsp]
  00141	48 8b 54 24 30	 mov	 rdx, QWORD PTR s$131352[rsp]
  00146	48 8b 4c 24 50	 mov	 rcx, QWORD PTR c$[rsp]
  0014b	e8 00 00 00 00	 call	 _try_extract_something_sendable_from_object
  00150	48 89 44 24 20	 mov	 QWORD PTR b$[rsp], rax
$LN2@try_extrac:
$LN3@try_extrac:
$LN6@try_extrac:
$LN8@try_extrac:

; 7574 :     }
; 7575 : 
; 7576 :     if (!b)

  00155	48 83 7c 24 20
	00		 cmp	 QWORD PTR b$[rsp], 0
  0015b	75 26		 jne	 SHORT $LN1@try_extrac

; 7577 :         assert(PyErr_Occurred());

  0015d	e8 00 00 00 00	 call	 PyErr_Occurred
  00162	48 85 c0	 test	 rax, rax
  00165	75 1c		 jne	 SHORT $LN17@try_extrac
  00167	41 b8 99 1d 00
	00		 mov	 r8d, 7577		; 00001d99H
  0016d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00174	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CC@DNBCFJEA@?$AAP?$AAy?$AAE?$AAr?$AAr?$AA_?$AAO?$AAc?$AAc?$AAu?$AAr?$AAr?$AAe?$AAd?$AA?$CI?$AA?$CJ?$AA?$AA@
  0017b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00181	33 c0		 xor	 eax, eax
$LN17@try_extrac:
$LN1@try_extrac:

; 7578 : 
; 7579 :     return b;

  00183	48 8b 44 24 20	 mov	 rax, QWORD PTR b$[rsp]
$LN13@try_extrac:

; 7580 : }

  00188	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0018c	c3		 ret	 0
_try_extract_something_sendable_from_object ENDP
_TEXT	ENDS
PUBLIC	_pxsocket_initial_bytes_to_send
;	COMDAT pdata
pdata	SEGMENT
$pdata$_pxsocket_initial_bytes_to_send DD imagerel $LN6
	DD	imagerel $LN6+136
	DD	imagerel $unwind$_pxsocket_initial_bytes_to_send
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_pxsocket_initial_bytes_to_send DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _pxsocket_initial_bytes_to_send
_TEXT	SEGMENT
i$ = 32
tv73 = 40
c$ = 64
s$ = 72
_pxsocket_initial_bytes_to_send PROC			; COMDAT

; 7584 : {

$LN6:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 7585 :     PyObject *i = PxSocket_GET_ATTR("initial_bytes_to_send");

  0000e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@FNILJMKJ@initial_bytes_to_send?$AA@
  00015	48 8b 44 24 48	 mov	 rax, QWORD PTR s$[rsp]
  0001a	48 8b 88 90 02
	00 00		 mov	 rcx, QWORD PTR [rax+656]
  00021	e8 00 00 00 00	 call	 PyObject_HasAttrString
  00026	85 c0		 test	 eax, eax
  00028	74 1f		 je	 SHORT $LN4@pxsocket_i
  0002a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@FNILJMKJ@initial_bytes_to_send?$AA@
  00031	48 8b 44 24 48	 mov	 rax, QWORD PTR s$[rsp]
  00036	48 8b 88 90 02
	00 00		 mov	 rcx, QWORD PTR [rax+656]
  0003d	e8 00 00 00 00	 call	 PyObject_GetAttrString
  00042	48 89 44 24 28	 mov	 QWORD PTR tv73[rsp], rax
  00047	eb 0c		 jmp	 SHORT $LN5@pxsocket_i
$LN4@pxsocket_i:
  00049	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00050	48 89 44 24 28	 mov	 QWORD PTR tv73[rsp], rax
$LN5@pxsocket_i:
  00055	48 8b 44 24 28	 mov	 rax, QWORD PTR tv73[rsp]
  0005a	48 89 44 24 20	 mov	 QWORD PTR i$[rsp], rax

; 7586 :     if (i == Py_None)

  0005f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00066	48 39 44 24 20	 cmp	 QWORD PTR i$[rsp], rax
  0006b	75 04		 jne	 SHORT $LN1@pxsocket_i

; 7587 :         return NULL;

  0006d	33 c0		 xor	 eax, eax
  0006f	eb 12		 jmp	 SHORT $LN2@pxsocket_i
$LN1@pxsocket_i:

; 7588 :     return _try_extract_something_sendable_from_object(c, i, 0);

  00071	45 33 c0	 xor	 r8d, r8d
  00074	48 8b 54 24 20	 mov	 rdx, QWORD PTR i$[rsp]
  00079	48 8b 4c 24 40	 mov	 rcx, QWORD PTR c$[rsp]
  0007e	e8 00 00 00 00	 call	 _try_extract_something_sendable_from_object
$LN2@pxsocket_i:

; 7589 : }

  00083	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00087	c3		 ret	 0
_pxsocket_initial_bytes_to_send ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PxSocketClient_Callback DD imagerel $LN3
	DD	imagerel $LN3+151
	DD	imagerel $unwind$PxSocketClient_Callback
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PxSocketClient_Callback DD 011801H
	DD	08218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PxSocketClient_Callback
_TEXT	SEGMENT
s$ = 48
c$ = 56
instance$ = 80
context$ = 88
overlapped$ = 96
io_result$ = 104
nbytes$ = 112
tp_io$ = 120
PxSocketClient_Callback PROC				; COMDAT

; 7601 : {

$LN3:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 7602 :     Context *c = (Context *)context;

  00018	48 8b 44 24 58	 mov	 rax, QWORD PTR context$[rsp]
  0001d	48 89 44 24 38	 mov	 QWORD PTR c$[rsp], rax

; 7603 :     PxSocket *s = (PxSocket *)c->io_obj;

  00022	48 8b 44 24 38	 mov	 rax, QWORD PTR c$[rsp]
  00027	48 8b 80 a8 32
	00 00		 mov	 rax, QWORD PTR [rax+12968]
  0002e	48 89 44 24 30	 mov	 QWORD PTR s$[rsp], rax

; 7604 : 
; 7605 :     EnterCriticalSection(&(s->cs));

  00033	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  00038	48 05 38 02 00
	00		 add	 rax, 568		; 00000238H
  0003e	48 8b c8	 mov	 rcx, rax
  00041	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_EnterCriticalSection

; 7606 : 
; 7607 :     ENTERED_IO_CALLBACK();

  00047	48 8b 44 24 78	 mov	 rax, QWORD PTR tp_io$[rsp]
  0004c	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00051	48 8b 44 24 70	 mov	 rax, QWORD PTR nbytes$[rsp]
  00056	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0005b	44 8b 4c 24 68	 mov	 r9d, DWORD PTR io_result$[rsp]
  00060	4c 8b 44 24 60	 mov	 r8, QWORD PTR overlapped$[rsp]
  00065	48 8b 54 24 50	 mov	 rdx, QWORD PTR instance$[rsp]
  0006a	48 8b 4c 24 38	 mov	 rcx, QWORD PTR c$[rsp]
  0006f	e8 00 00 00 00	 call	 _PyParallel_EnteredIOCallback

; 7608 : 
; 7609 :     PxSocket_IOLoop(s);

  00074	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s$[rsp]
  00079	e8 00 00 00 00	 call	 PxSocket_IOLoop

; 7610 : 
; 7611 :     LeaveCriticalSection(&(s->cs));

  0007e	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  00083	48 05 38 02 00
	00		 add	 rax, 568		; 00000238H
  00089	48 8b c8	 mov	 rcx, rax
  0008c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_LeaveCriticalSection

; 7612 : }

  00092	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00096	c3		 ret	 0
PxSocketClient_Callback ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CF@MBGNEJ@setsockopt?$CISO_UPDATE_ACCEPT_CONT@ ; `string'
PUBLIC	??_C@_0N@DLDEIKGM@xxxxxxxxxx?$CB?6?$AA@		; `string'
PUBLIC	??_C@_1BO@DMDFCAE@?$AAo?$AA?9?$AA?$DO?$AAp?$AAa?$AAr?$AAe?$AAn?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAs?$AA?$AA@ ; `string'
PUBLIC	??_C@_08OACEPIAN@AcceptEx?$AA@			; `string'
PUBLIC	PxSocketServer_AcceptCallback
EXTRN	__imp_setsockopt:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PxSocketServer_AcceptCallback DD imagerel $LN18
	DD	imagerel $LN18+977
	DD	imagerel $unwind$PxSocketServer_AcceptCallback
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PxSocketServer_AcceptCallback DD 021b01H
	DD	017011bH
xdata	ENDS
;	COMDAT ??_C@_0CF@MBGNEJ@setsockopt?$CISO_UPDATE_ACCEPT_CONT@
CONST	SEGMENT
??_C@_0CF@MBGNEJ@setsockopt?$CISO_UPDATE_ACCEPT_CONT@ DB 'setsockopt(SO_U'
	DB	'PDATE_ACCEPT_CONTEXT)', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@DLDEIKGM@xxxxxxxxxx?$CB?6?$AA@
CONST	SEGMENT
??_C@_0N@DLDEIKGM@xxxxxxxxxx?$CB?6?$AA@ DB 'xxxxxxxxxx!', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BO@DMDFCAE@?$AAo?$AA?9?$AA?$DO?$AAp?$AAa?$AAr?$AAe?$AAn?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAs?$AA?$AA@
CONST	SEGMENT
??_C@_1BO@DMDFCAE@?$AAo?$AA?9?$AA?$DO?$AAp?$AAa?$AAr?$AAe?$AAn?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAs?$AA?$AA@ DB 'o'
	DB	00H, '-', 00H, '>', 00H, 'p', 00H, 'a', 00H, 'r', 00H, 'e', 00H
	DB	'n', 00H, 't', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 's'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_08OACEPIAN@AcceptEx?$AA@
CONST	SEGMENT
??_C@_08OACEPIAN@AcceptEx?$AA@ DB 'AcceptEx', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PxSocketServer_AcceptCallback
_TEXT	SEGMENT
p$ = 64
x$ = 72
llen$ = 80
s$ = 88
bufsize$ = 96
rbuf$ = 104
local$ = 112
rlen$ = 120
syscall$ = 128
c$ = 136
err$ = 144
sz$ = 148
op$ = 152
o$ = 160
remote$ = 168
instance$ = 192
context$ = 200
overlapped$ = 208
io_result$ = 216
nbytes$ = 224
tp_io$ = 232
PxSocketServer_AcceptCallback PROC			; COMDAT

; 7624 : {

$LN18:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H

; 7625 :     int err;
; 7626 :     int op = PxSocket_IO_ACCEPT;

  0001b	c7 84 24 98 00
	00 00 02 00 00
	00		 mov	 DWORD PTR op$[rsp], 2

; 7627 :     int bufsize;
; 7628 :     const char *syscall = "AcceptEx";

  00026	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_08OACEPIAN@AcceptEx?$AA@
  0002d	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR syscall$[rsp], rax

; 7629 :     void *p;
; 7630 :     LPSOCKADDR local;
; 7631 :     LPSOCKADDR remote;
; 7632 :     RBUF *rbuf;
; 7633 :     int sz = sizeof(SOCKADDR);

  00035	c7 84 24 94 00
	00 00 10 00 00
	00		 mov	 DWORD PTR sz$[rsp], 16

; 7634 :     int llen = 0;

  00040	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR llen$[rsp], 0

; 7635 :     int rlen = 0;

  00048	c7 44 24 78 00
	00 00 00	 mov	 DWORD PTR rlen$[rsp], 0

; 7636 : 
; 7637 :     Context *c = (Context *)context;

  00050	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR context$[rsp]
  00058	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR c$[rsp], rax

; 7638 :     PxSocket *s = (PxSocket *)c->io_obj;

  00060	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  00068	48 8b 80 a8 32
	00 00		 mov	 rax, QWORD PTR [rax+12968]
  0006f	48 89 44 24 58	 mov	 QWORD PTR s$[rsp], rax

; 7639 :     PxSocket *o;
; 7640 :     Context  *x = _Py_CAST_BACK(overlapped, Context *, Context, overlapped);

  00074	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR overlapped$[rsp]
  0007c	48 2d b0 32 00
	00		 sub	 rax, 12976		; 000032b0H
  00082	48 89 44 24 48	 mov	 QWORD PTR x$[rsp], rax

; 7641 : 
; 7642 :     o = (PxSocket *)x->io_obj;

  00087	48 8b 44 24 48	 mov	 rax, QWORD PTR x$[rsp]
  0008c	48 8b 80 a8 32
	00 00		 mov	 rax, QWORD PTR [rax+12968]
  00093	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR o$[rsp], rax

; 7643 :     assert(o->parent == s);

  0009b	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR o$[rsp]
  000a3	48 8b 4c 24 58	 mov	 rcx, QWORD PTR s$[rsp]
  000a8	48 39 88 30 04
	00 00		 cmp	 QWORD PTR [rax+1072], rcx
  000af	74 1c		 je	 SHORT $LN15@PxSocketSe
  000b1	41 b8 db 1d 00
	00		 mov	 r8d, 7643		; 00001ddbH
  000b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  000be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BO@DMDFCAE@?$AAo?$AA?9?$AA?$DO?$AAp?$AAa?$AAr?$AAe?$AAn?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAs?$AA?$AA@
  000c5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000cb	33 c0		 xor	 eax, eax
$LN15@PxSocketSe:

; 7644 : 
; 7645 :     s = o;

  000cd	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR o$[rsp]
  000d5	48 89 44 24 58	 mov	 QWORD PTR s$[rsp], rax

; 7646 :     c = x;

  000da	48 8b 44 24 48	 mov	 rax, QWORD PTR x$[rsp]
  000df	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR c$[rsp], rax

; 7647 : 
; 7648 :     EnterCriticalSection(&(s->cs));

  000e7	48 8b 44 24 58	 mov	 rax, QWORD PTR s$[rsp]
  000ec	48 05 38 02 00
	00		 add	 rax, 568		; 00000238H
  000f2	48 8b c8	 mov	 rcx, rax
  000f5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_EnterCriticalSection

; 7649 : 
; 7650 :     /* Reset some of the more sensitive struct members (necessary due to the
; 7651 :      * AcceptEx() socket recycling). */
; 7652 :     /*
; 7653 :     s->io_op = PxSocket_IO_ACCEPT;
; 7654 :     s->ctx = c;
; 7655 :     s->send_id = 0;
; 7656 :     s->tls_buf = 0;
; 7657 :     s->ol = 0;
; 7658 :     */
; 7659 : 
; 7660 :     ENTERED_IO_CALLBACK();

  000fb	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR tp_io$[rsp]
  00103	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00108	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR nbytes$[rsp]
  00110	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00115	44 8b 8c 24 d8
	00 00 00	 mov	 r9d, DWORD PTR io_result$[rsp]
  0011d	4c 8b 84 24 d0
	00 00 00	 mov	 r8, QWORD PTR overlapped$[rsp]
  00125	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR instance$[rsp]
  0012d	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  00135	e8 00 00 00 00	 call	 _PyParallel_EnteredIOCallback

; 7661 : 
; 7662 :     if (!(Px_SOCKFLAGS(s) & Px_SOCKFLAGS_ACCEPT_CALLBACK_SEEN)) {

  0013a	48 8b 44 24 58	 mov	 rax, QWORD PTR s$[rsp]
  0013f	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  00145	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  0014a	85 c0		 test	 eax, eax
  0014c	75 1c		 jne	 SHORT $LN12@PxSocketSe

; 7663 :         Px_SOCKFLAGS(s) |= Px_SOCKFLAGS_ACCEPT_CALLBACK_SEEN;

  0014e	48 8b 44 24 58	 mov	 rax, QWORD PTR s$[rsp]
  00153	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  00159	0f ba e8 1b	 bts	 eax, 27
  0015d	48 8b 4c 24 58	 mov	 rcx, QWORD PTR s$[rsp]
  00162	89 81 f4 01 00
	00		 mov	 DWORD PTR [rcx+500], eax

; 7664 :     } else {

  00168	eb 34		 jmp	 SHORT $LN11@PxSocketSe
$LN12@PxSocketSe:

; 7665 :         printf("xxxxxxxxxx!\n");

  0016a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@DLDEIKGM@xxxxxxxxxx?$CB?6?$AA@
  00171	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_printf

; 7666 :         goto start_io_loop;

  00177	e9 f0 01 00 00	 jmp	 $start_io_loop$131430

; 7667 :         assert(0);

  0017c	33 c0		 xor	 eax, eax
  0017e	85 c0		 test	 eax, eax
  00180	75 1c		 jne	 SHORT $LN16@PxSocketSe
  00182	41 b8 f3 1d 00
	00		 mov	 r8d, 7667		; 00001df3H
  00188	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0018f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_13COJANIEC@?$AA0?$AA?$AA@
  00196	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0019c	33 c0		 xor	 eax, eax
$LN16@PxSocketSe:
$LN11@PxSocketSe:

; 7668 : 
; 7669 :     }
; 7670 : 
; 7671 :     if (c->io_result != NO_ERROR) {

  0019e	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  001a6	83 b8 94 32 00
	00 00		 cmp	 DWORD PTR [rax+12948], 0
  001ad	74 63		 je	 SHORT $LN10@PxSocketSe

; 7672 :         PyErr_SetFromWindowsErr(c->io_result);

  001af	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  001b7	8b 88 94 32 00
	00		 mov	 ecx, DWORD PTR [rax+12948]
  001bd	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
$LN9@PxSocketSe:

; 7673 :         PxSocket_FATAL();

  001c2	e8 00 00 00 00	 call	 PyErr_Occurred
  001c7	48 85 c0	 test	 rax, rax
  001ca	75 1c		 jne	 SHORT $LN17@PxSocketSe
  001cc	41 b8 f9 1d 00
	00		 mov	 r8d, 7673		; 00001df9H
  001d2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  001d9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CC@DNBCFJEA@?$AAP?$AAy?$AAE?$AAr?$AAr?$AA_?$AAO?$AAc?$AAc?$AAu?$AAr?$AAr?$AAe?$AAd?$AA?$CI?$AA?$CJ?$AA?$AA@
  001e0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001e6	33 c0		 xor	 eax, eax
$LN17@PxSocketSe:
  001e8	41 b8 01 00 00
	00		 mov	 r8d, 1
  001ee	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  001f5	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  001fd	e8 00 00 00 00	 call	 PxSocket_HandleException
  00202	e9 ae 01 00 00	 jmp	 $end$131437
  00207	33 c0		 xor	 eax, eax
  00209	85 c0		 test	 eax, eax
  0020b	75 b5		 jne	 SHORT $LN9@PxSocketSe

; 7674 :         goto end;

  0020d	e9 a3 01 00 00	 jmp	 $end$131437
$LN10@PxSocketSe:

; 7675 :     }
; 7676 : 
; 7677 :     err = setsockopt(s->sock_fd,
; 7678 :                      SOL_SOCKET,
; 7679 :                      SO_UPDATE_ACCEPT_CONTEXT,
; 7680 :                      (char *)&(s->parent->sock_fd),
; 7681 :                      sizeof(SOCKET));

  00212	48 8b 44 24 58	 mov	 rax, QWORD PTR s$[rsp]
  00217	48 8b 80 30 04
	00 00		 mov	 rax, QWORD PTR [rax+1072]
  0021e	48 83 c0 60	 add	 rax, 96			; 00000060H
  00222	c7 44 24 20 08
	00 00 00	 mov	 DWORD PTR [rsp+32], 8
  0022a	4c 8b c8	 mov	 r9, rax
  0022d	41 b8 0b 70 00
	00		 mov	 r8d, 28683		; 0000700bH
  00233	ba ff ff 00 00	 mov	 edx, 65535		; 0000ffffH
  00238	48 8b 44 24 58	 mov	 rax, QWORD PTR s$[rsp]
  0023d	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00241	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_setsockopt
  00247	89 84 24 90 00
	00 00		 mov	 DWORD PTR err$[rsp], eax

; 7682 :     if (err == SOCKET_ERROR)

  0024e	83 bc 24 90 00
	00 00 ff	 cmp	 DWORD PTR err$[rsp], -1
  00256	75 32		 jne	 SHORT $LN6@PxSocketSe
$LN5@PxSocketSe:

; 7683 :         PxSocket_WSAERROR("setsockopt(SO_UPDATE_ACCEPT_CONTEXT)");

  00258	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WSAGetLastError
  0025e	8b c8		 mov	 ecx, eax
  00260	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
  00265	41 b8 01 00 00
	00		 mov	 r8d, 1
  0026b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CF@MBGNEJ@setsockopt?$CISO_UPDATE_ACCEPT_CONT@
  00272	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  0027a	e8 00 00 00 00	 call	 PxSocket_HandleException
  0027f	e9 31 01 00 00	 jmp	 $end$131437
  00284	33 c0		 xor	 eax, eax
  00286	85 c0		 test	 eax, eax
  00288	75 ce		 jne	 SHORT $LN5@PxSocketSe
$LN6@PxSocketSe:

; 7684 : 
; 7685 :     if (PxSocket_HAS_INITIAL_BYTES(s))

  0028a	48 8b 44 24 58	 mov	 rax, QWORD PTR s$[rsp]
  0028f	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  00295	25 00 01 00 00	 and	 eax, 256		; 00000100H
  0029a	85 c0		 test	 eax, eax
  0029c	74 0a		 je	 SHORT $LN2@PxSocketSe

; 7686 :         bufsize = 0;

  0029e	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR bufsize$[rsp], 0

; 7687 :     else

  002a6	eb 1c		 jmp	 SHORT $LN1@PxSocketSe
$LN2@PxSocketSe:

; 7688 :         bufsize = (s->recvbuf_size - (sz * 2));

  002a8	8b 84 24 94 00
	00 00		 mov	 eax, DWORD PTR sz$[rsp]
  002af	d1 e0		 shl	 eax, 1
  002b1	48 8b 4c 24 58	 mov	 rcx, QWORD PTR s$[rsp]
  002b6	8b 89 60 02 00
	00		 mov	 ecx, DWORD PTR [rcx+608]
  002bc	2b c8		 sub	 ecx, eax
  002be	8b c1		 mov	 eax, ecx
  002c0	89 44 24 60	 mov	 DWORD PTR bufsize$[rsp], eax
$LN1@PxSocketSe:

; 7689 : 
; 7690 :     rbuf = s->rbuf;

  002c4	48 8b 44 24 58	 mov	 rax, QWORD PTR s$[rsp]
  002c9	48 8b 80 70 03
	00 00		 mov	 rax, QWORD PTR [rax+880]
  002d0	48 89 44 24 68	 mov	 QWORD PTR rbuf$[rsp], rax

; 7691 :     p = rbuf->w.buf;

  002d5	48 8b 44 24 68	 mov	 rax, QWORD PTR rbuf$[rsp]
  002da	48 8b 40 48	 mov	 rax, QWORD PTR [rax+72]
  002de	48 89 44 24 40	 mov	 QWORD PTR p$[rsp], rax

; 7692 :     GetAcceptExSockaddrs(p, bufsize, sz, sz, &local, &llen, &remote, &rlen);

  002e3	48 8d 44 24 78	 lea	 rax, QWORD PTR rlen$[rsp]
  002e8	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  002ed	48 8d 84 24 a8
	00 00 00	 lea	 rax, QWORD PTR remote$[rsp]
  002f5	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  002fa	48 8d 44 24 50	 lea	 rax, QWORD PTR llen$[rsp]
  002ff	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00304	48 8d 44 24 70	 lea	 rax, QWORD PTR local$[rsp]
  00309	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0030e	44 8b 8c 24 94
	00 00 00	 mov	 r9d, DWORD PTR sz$[rsp]
  00316	44 8b 84 24 94
	00 00 00	 mov	 r8d, DWORD PTR sz$[rsp]
  0031e	8b 54 24 60	 mov	 edx, DWORD PTR bufsize$[rsp]
  00322	48 8b 4c 24 40	 mov	 rcx, QWORD PTR p$[rsp]
  00327	ff 15 80 00 00
	00		 call	 QWORD PTR PySocketModule+128

; 7693 : 
; 7694 :     memcpy(&(s->local_addr), local, llen);

  0032d	48 63 44 24 50	 movsxd	 rax, DWORD PTR llen$[rsp]
  00332	48 8b 4c 24 58	 mov	 rcx, QWORD PTR s$[rsp]
  00337	48 81 c1 e8 00
	00 00		 add	 rcx, 232		; 000000e8H
  0033e	4c 8b c0	 mov	 r8, rax
  00341	48 8b 54 24 70	 mov	 rdx, QWORD PTR local$[rsp]
  00346	e8 00 00 00 00	 call	 memcpy

; 7695 :     memcpy(&(s->remote_addr), remote, rlen);

  0034b	48 63 44 24 78	 movsxd	 rax, DWORD PTR rlen$[rsp]
  00350	48 8b 4c 24 58	 mov	 rcx, QWORD PTR s$[rsp]
  00355	48 81 c1 70 01
	00 00		 add	 rcx, 368		; 00000170H
  0035c	4c 8b c0	 mov	 r8, rax
  0035f	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR remote$[rsp]
  00367	e8 00 00 00 00	 call	 memcpy
$start_io_loop$131430:

; 7696 : 
; 7697 :     /*Px_SOCKFLAGS(s) |= Px_SOCKFLAGS_RELOAD_PROTOCOL;*/
; 7698 : start_io_loop:
; 7699 :     InterlockedIncrement(&(s->parent->nchildren));

  0036c	48 8b 44 24 58	 mov	 rax, QWORD PTR s$[rsp]
  00371	48 8b 80 30 04
	00 00		 mov	 rax, QWORD PTR [rax+1072]
  00378	48 05 20 04 00
	00		 add	 rax, 1056		; 00000420H
  0037e	f0 ff 00	 lock inc DWORD PTR [rax]

; 7700 :     s->child_id = InterlockedIncrement(&(s->parent->next_child_id));

  00381	48 8b 44 24 58	 mov	 rax, QWORD PTR s$[rsp]
  00386	48 8b 80 30 04
	00 00		 mov	 rax, QWORD PTR [rax+1072]
  0038d	48 05 24 04 00
	00		 add	 rax, 1060		; 00000424H
  00393	b9 01 00 00 00	 mov	 ecx, 1
  00398	f0 0f c1 08	 lock xadd DWORD PTR [rax], ecx
  0039c	ff c1		 inc	 ecx
  0039e	8b c1		 mov	 eax, ecx
  003a0	48 8b 4c 24 58	 mov	 rcx, QWORD PTR s$[rsp]
  003a5	89 81 28 04 00
	00		 mov	 DWORD PTR [rcx+1064], eax

; 7701 :     /*printf("child %d/%d connected\n", s->child_id, s->sock_fd);*/
; 7702 :     PxSocket_IOLoop(s);

  003ab	48 8b 4c 24 58	 mov	 rcx, QWORD PTR s$[rsp]
  003b0	e8 00 00 00 00	 call	 PxSocket_IOLoop
$end$131437:

; 7703 : 
; 7704 : end:
; 7705 :     LeaveCriticalSection(&(s->cs));

  003b5	48 8b 44 24 58	 mov	 rax, QWORD PTR s$[rsp]
  003ba	48 05 38 02 00
	00		 add	 rax, 568		; 00000238H
  003c0	48 8b c8	 mov	 rcx, rax
  003c3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_LeaveCriticalSection

; 7706 : 
; 7707 :     return;
; 7708 : }

  003c9	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  003d0	c3		 ret	 0
PxSocketServer_AcceptCallback ENDP
_TEXT	ENDS
PUBLIC	??_C@_0P@CIBLNKFF@WSAEventSelect?$AA@		; `string'
PUBLIC	PxSocketServer_AllocClientSockets
PUBLIC	??_C@_0BH@LBENJJIP@WaitForMultipleObjects?$AA@	; `string'
PUBLIC	PxSocketServer_AcceptEx
EXTRN	__imp_WSAEventSelect:PROC
EXTRN	__imp_WaitForMultipleObjects:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PxSocketServer_AcceptEx DD imagerel $LN28
	DD	imagerel $LN28+905
	DD	imagerel $unwind$PxSocketServer_AcceptEx
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PxSocketServer_AcceptEx DD 021101H
	DD	0130111H
xdata	ENDS
;	COMDAT ??_C@_0P@CIBLNKFF@WSAEventSelect?$AA@
CONST	SEGMENT
??_C@_0P@CIBLNKFF@WSAEventSelect?$AA@ DB 'WSAEventSelect', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@LBENJJIP@WaitForMultipleObjects?$AA@
CONST	SEGMENT
??_C@_0BH@LBENJJIP@WaitForMultipleObjects?$AA@ DB 'WaitForMultipleObjects'
	DB	00H						; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PxSocketServer_AcceptEx
_TEXT	SEGMENT
x$ = 64
s$ = 72
last_error$ = 80
bufsize$ = 84
success$ = 88
error$ = 92
size$ = 96
actual$ = 100
result$ = 104
c$ = 112
o$ = 120
err$131509 = 128
tv78 = 132
tv165 = 136
instance$ = 160
context$ = 168
PxSocketServer_AcceptEx PROC				; COMDAT

; 7718 : {

$LN28:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 7719 :     Context *c, *x;
; 7720 :     PxSocket *s, *o;
; 7721 :     int actual = 0;

  00011	c7 44 24 64 00
	00 00 00	 mov	 DWORD PTR actual$[rsp], 0

; 7722 :     BOOL error, success;
; 7723 :     DWORD bufsize, size, last_error, result;
; 7724 : 
; 7725 :     c = (Context *)context;

  00019	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR context$[rsp]
  00021	48 89 44 24 70	 mov	 QWORD PTR c$[rsp], rax

; 7726 :     s = (PxSocket *)c->io_obj;

  00026	48 8b 44 24 70	 mov	 rax, QWORD PTR c$[rsp]
  0002b	48 8b 80 a8 32
	00 00		 mov	 rax, QWORD PTR [rax+12968]
  00032	48 89 44 24 48	 mov	 QWORD PTR s$[rsp], rax

; 7727 : 
; 7728 :     _PyParallel_DisassociateCurrentThreadFromCallback();

  00037	e8 00 00 00 00	 call	 _PyParallel_DisassociateCurrentThreadFromCallback

; 7729 : 
; 7730 :     size = sizeof(struct sockaddr_in) + 16;

  0003c	c7 44 24 60 20
	00 00 00	 mov	 DWORD PTR size$[rsp], 32 ; 00000020H

; 7731 :     if (PxSocket_HAS_INITIAL_BYTES(s))

  00044	48 8b 44 24 48	 mov	 rax, QWORD PTR s$[rsp]
  00049	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  0004f	25 00 01 00 00	 and	 eax, 256		; 00000100H
  00054	85 c0		 test	 eax, eax
  00056	74 0a		 je	 SHORT $LN18@PxSocketSe@2

; 7732 :         bufsize = 0;

  00058	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR bufsize$[rsp], 0

; 7733 :     else

  00060	eb 19		 jmp	 SHORT $LN17@PxSocketSe@2
$LN18@PxSocketSe@2:

; 7734 :         bufsize = (DWORD)(s->recvbuf_size - (size * 2));

  00062	8b 44 24 60	 mov	 eax, DWORD PTR size$[rsp]
  00066	d1 e0		 shl	 eax, 1
  00068	48 8b 4c 24 48	 mov	 rcx, QWORD PTR s$[rsp]
  0006d	8b 89 60 02 00
	00		 mov	 ecx, DWORD PTR [rcx+608]
  00073	2b c8		 sub	 ecx, eax
  00075	8b c1		 mov	 eax, ecx
  00077	89 44 24 54	 mov	 DWORD PTR bufsize$[rsp], eax
$LN17@PxSocketSe@2:
$LN25@PxSocketSe@2:
$wait$131477:

; 7735 : 
; 7736 : wait:
; 7737 :     result = WaitForMultipleObjects(3, &(s->wait_handles[0]), 0, 5000);

  0007b	48 8b 44 24 48	 mov	 rax, QWORD PTR s$[rsp]
  00080	48 05 08 04 00
	00		 add	 rax, 1032		; 00000408H
  00086	41 b9 88 13 00
	00		 mov	 r9d, 5000		; 00001388H
  0008c	45 33 c0	 xor	 r8d, r8d
  0008f	48 8b d0	 mov	 rdx, rax
  00092	b9 03 00 00 00	 mov	 ecx, 3
  00097	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WaitForMultipleObjects
  0009d	89 44 24 68	 mov	 DWORD PTR result$[rsp], eax

; 7738 :     switch (result) {

  000a1	8b 44 24 68	 mov	 eax, DWORD PTR result$[rsp]
  000a5	89 84 24 84 00
	00 00		 mov	 DWORD PTR tv78[rsp], eax
  000ac	81 bc 24 84 00
	00 00 82 00 00
	00		 cmp	 DWORD PTR tv78[rsp], 130 ; 00000082H
  000b7	77 2d		 ja	 SHORT $LN22@PxSocketSe@2
  000b9	81 bc 24 84 00
	00 00 80 00 00
	00		 cmp	 DWORD PTR tv78[rsp], 128 ; 00000080H
  000c4	73 53		 jae	 SHORT $LN10@PxSocketSe@2
  000c6	83 bc 24 84 00
	00 00 00	 cmp	 DWORD PTR tv78[rsp], 0
  000ce	74 2f		 je	 SHORT $LN14@PxSocketSe@2
  000d0	83 bc 24 84 00
	00 00 01	 cmp	 DWORD PTR tv78[rsp], 1
  000d8	74 33		 je	 SHORT $LN13@PxSocketSe@2
  000da	83 bc 24 84 00
	00 00 02	 cmp	 DWORD PTR tv78[rsp], 2
  000e2	74 2b		 je	 SHORT $LN12@PxSocketSe@2
  000e4	eb 5b		 jmp	 SHORT $LN8@PxSocketSe@2
$LN22@PxSocketSe@2:
  000e6	81 bc 24 84 00
	00 00 02 01 00
	00		 cmp	 DWORD PTR tv78[rsp], 258 ; 00000102H
  000f1	74 21		 je	 SHORT $LN11@PxSocketSe@2
  000f3	83 bc 24 84 00
	00 00 ff	 cmp	 DWORD PTR tv78[rsp], -1	; ffffffffH
  000fb	74 21		 je	 SHORT $LN9@PxSocketSe@2
  000fd	eb 42		 jmp	 SHORT $LN8@PxSocketSe@2
$LN14@PxSocketSe@2:

; 7739 :         case WAIT_OBJECT_0:
; 7740 :             /* fd_accept */
; 7741 :             InterlockedIncrement(&(s->num_accepts_wanted));

  000ff	48 8b 44 24 48	 mov	 rax, QWORD PTR s$[rsp]
  00104	48 05 f0 03 00
	00		 add	 rax, 1008		; 000003f0H
  0010a	f0 ff 00	 lock inc DWORD PTR [rax]
$LN13@PxSocketSe@2:

; 7742 :         case WAIT_OBJECT_0 + 1:
; 7743 :             /* SetEvent(s->more_accepts) */
; 7744 :             goto more_accepts;

  0010d	eb 54		 jmp	 SHORT $more_accepts$131486
$LN12@PxSocketSe@2:

; 7745 : 
; 7746 :         case WAIT_OBJECT_0 + 2:
; 7747 :             /* shutdown event */
; 7748 :             goto end;

  0010f	e9 59 02 00 00	 jmp	 $end$131489
$LN11@PxSocketSe@2:

; 7749 : 
; 7750 :         case WAIT_TIMEOUT:
; 7751 :             goto timeout;

  00114	e9 4f 02 00 00	 jmp	 $timeout$131491
$LN10@PxSocketSe@2:

; 7752 : 
; 7753 :         case WAIT_ABANDONED_0:
; 7754 :         case WAIT_ABANDONED_0 + 1:
; 7755 :         case WAIT_ABANDONED_0 + 2:
; 7756 :             goto end;

  00119	e9 4f 02 00 00	 jmp	 $end$131489
$LN9@PxSocketSe@2:

; 7757 : 
; 7758 :         case WAIT_FAILED:
; 7759 :             PyErr_SetFromWindowsErr(0);

  0011e	33 c9		 xor	 ecx, ecx
  00120	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr

; 7760 :             PxSocket_HandleException(c, "WaitForMultipleObjects", 1);

  00125	41 b8 01 00 00
	00		 mov	 r8d, 1
  0012b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@LBENJJIP@WaitForMultipleObjects?$AA@
  00132	48 8b 4c 24 70	 mov	 rcx, QWORD PTR c$[rsp]
  00137	e8 00 00 00 00	 call	 PxSocket_HandleException

; 7761 :             goto end;

  0013c	e9 2c 02 00 00	 jmp	 $end$131489
$LN8@PxSocketSe@2:

; 7762 : 
; 7763 :         default:
; 7764 :             assert(0);

  00141	33 c0		 xor	 eax, eax
  00143	85 c0		 test	 eax, eax
  00145	75 1c		 jne	 SHORT $LN21@PxSocketSe@2
  00147	41 b8 54 1e 00
	00		 mov	 r8d, 7764		; 00001e54H
  0014d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00154	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_13COJANIEC@?$AA0?$AA?$AA@
  0015b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00161	33 c0		 xor	 eax, eax
$LN21@PxSocketSe@2:
$more_accepts$131486:
$LN27@PxSocketSe@2:
$LN26@PxSocketSe@2:
$LN7@PxSocketSe@2:

; 7765 :     }
; 7766 : 
; 7767 : more_accepts:
; 7768 :     while (s->num_accepts_wanted > 0) {

  00163	48 8b 44 24 48	 mov	 rax, QWORD PTR s$[rsp]
  00168	8b 80 f0 03 00
	00		 mov	 eax, DWORD PTR [rax+1008]
  0016e	85 c0		 test	 eax, eax
  00170	0f 8e 93 01 00
	00		 jle	 $LN6@PxSocketSe@2

; 7769 :         o = PxSocketServer_AllocClientSockets(s, 1);

  00176	ba 01 00 00 00	 mov	 edx, 1
  0017b	48 8b 4c 24 48	 mov	 rcx, QWORD PTR s$[rsp]
  00180	e8 00 00 00 00	 call	 PxSocketServer_AllocClientSockets
  00185	48 89 44 24 78	 mov	 QWORD PTR o$[rsp], rax

; 7770 :         if (!o)

  0018a	48 83 7c 24 78
	00		 cmp	 QWORD PTR o$[rsp], 0
  00190	75 14		 jne	 SHORT $LN5@PxSocketSe@2

; 7771 :             PxSocket_HandleException(c, "", 0);

  00192	45 33 c0	 xor	 r8d, r8d
  00195	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  0019c	48 8b 4c 24 70	 mov	 rcx, QWORD PTR c$[rsp]
  001a1	e8 00 00 00 00	 call	 PxSocket_HandleException
$LN5@PxSocketSe@2:

; 7772 : 
; 7773 :         InterlockedDecrement(&(s->num_accepts_wanted));

  001a6	48 8b 44 24 48	 mov	 rax, QWORD PTR s$[rsp]
  001ab	48 05 f0 03 00
	00		 add	 rax, 1008		; 000003f0H
  001b1	f0 ff 08	 lock dec DWORD PTR [rax]

; 7774 :         if (!o)

  001b4	48 83 7c 24 78
	00		 cmp	 QWORD PTR o$[rsp], 0
  001ba	75 02		 jne	 SHORT $LN4@PxSocketSe@2

; 7775 :             continue;

  001bc	eb a5		 jmp	 SHORT $LN7@PxSocketSe@2
$LN4@PxSocketSe@2:

; 7776 : 
; 7777 :         o->io_op = PxSocket_IO_ACCEPT;

  001be	48 8b 44 24 78	 mov	 rax, QWORD PTR o$[rsp]
  001c3	c7 80 50 03 00
	00 02 00 00 00	 mov	 DWORD PTR [rax+848], 2

; 7778 : 
; 7779 :         x = o->ctx;

  001cd	48 8b 44 24 78	 mov	 rax, QWORD PTR o$[rsp]
  001d2	48 8b 80 00 02
	00 00		 mov	 rax, QWORD PTR [rax+512]
  001d9	48 89 44 24 40	 mov	 QWORD PTR x$[rsp], rax

; 7780 : 
; 7781 :         StartThreadpoolIo(s->tp_io);

  001de	48 8b 44 24 48	 mov	 rax, QWORD PTR s$[rsp]
  001e3	48 8b 88 58 03
	00 00		 mov	 rcx, QWORD PTR [rax+856]
  001ea	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_StartThreadpoolIo

; 7782 :         success = AcceptEx(s->sock_fd,
; 7783 :                            o->sock_fd,
; 7784 :                            o->rbuf->w.buf,
; 7785 :                            bufsize,
; 7786 :                            size,
; 7787 :                            size,
; 7788 :                            &(o->rbytes),
; 7789 :                            &(x->overlapped));

  001f0	48 8b 44 24 40	 mov	 rax, QWORD PTR x$[rsp]
  001f5	48 05 b0 32 00
	00		 add	 rax, 12976		; 000032b0H
  001fb	48 8b 4c 24 78	 mov	 rcx, QWORD PTR o$[rsp]
  00200	48 81 c1 b8 03
	00 00		 add	 rcx, 952		; 000003b8H
  00207	48 8b 54 24 78	 mov	 rdx, QWORD PTR o$[rsp]
  0020c	48 8b 92 70 03
	00 00		 mov	 rdx, QWORD PTR [rdx+880]
  00213	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00218	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  0021d	8b 44 24 60	 mov	 eax, DWORD PTR size$[rsp]
  00221	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00225	8b 44 24 60	 mov	 eax, DWORD PTR size$[rsp]
  00229	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0022d	44 8b 4c 24 54	 mov	 r9d, DWORD PTR bufsize$[rsp]
  00232	4c 8b 42 48	 mov	 r8, QWORD PTR [rdx+72]
  00236	48 8b 44 24 78	 mov	 rax, QWORD PTR o$[rsp]
  0023b	48 8b 50 60	 mov	 rdx, QWORD PTR [rax+96]
  0023f	48 8b 44 24 48	 mov	 rax, QWORD PTR s$[rsp]
  00244	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00248	ff 15 48 00 00
	00		 call	 QWORD PTR PySocketModule+72
  0024e	89 44 24 58	 mov	 DWORD PTR success$[rsp], eax

; 7790 : 
; 7791 :         last_error = WSAGetLastError();

  00252	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WSAGetLastError
  00258	89 44 24 50	 mov	 DWORD PTR last_error$[rsp], eax

; 7792 :         error = (
; 7793 :             !success && (
; 7794 :                 (last_error != WSA_IO_PENDING) &&
; 7795 :                 (last_error != WSAECONNRESET)
; 7796 :             )
; 7797 :         );

  0025c	83 7c 24 58 00	 cmp	 DWORD PTR success$[rsp], 0
  00261	75 21		 jne	 SHORT $LN23@PxSocketSe@2
  00263	81 7c 24 50 e5
	03 00 00	 cmp	 DWORD PTR last_error$[rsp], 997 ; 000003e5H
  0026b	74 17		 je	 SHORT $LN23@PxSocketSe@2
  0026d	81 7c 24 50 46
	27 00 00	 cmp	 DWORD PTR last_error$[rsp], 10054 ; 00002746H
  00275	74 0d		 je	 SHORT $LN23@PxSocketSe@2
  00277	c7 84 24 88 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv165[rsp], 1
  00282	eb 0b		 jmp	 SHORT $LN24@PxSocketSe@2
$LN23@PxSocketSe@2:
  00284	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv165[rsp], 0
$LN24@PxSocketSe@2:
  0028f	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR tv165[rsp]
  00296	89 44 24 5c	 mov	 DWORD PTR error$[rsp], eax

; 7798 : 
; 7799 :         if (error) {

  0029a	83 7c 24 5c 00	 cmp	 DWORD PTR error$[rsp], 0
  0029f	74 22		 je	 SHORT $LN3@PxSocketSe@2

; 7800 :             /* Do we need to cancel threadpool IO here? */
; 7801 :             /*CancelThreadpoolIo(s->tp_io);*/
; 7802 :             PyErr_SetFromWindowsErr(last_error);

  002a1	8b 4c 24 50	 mov	 ecx, DWORD PTR last_error$[rsp]
  002a5	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr

; 7803 :             PxSocket_HandleException(c, "AcceptEx", 0);

  002aa	45 33 c0	 xor	 r8d, r8d
  002ad	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08OACEPIAN@AcceptEx?$AA@
  002b4	48 8b 4c 24 70	 mov	 rcx, QWORD PTR c$[rsp]
  002b9	e8 00 00 00 00	 call	 PxSocket_HandleException

; 7804 : 
; 7805 :             /* XXX TODO: release the context. */
; 7806 :             continue;

  002be	e9 a0 fe ff ff	 jmp	 $LN26@PxSocketSe@2
$LN3@PxSocketSe@2:

; 7807 :         }
; 7808 : 
; 7809 :         s->last->next = o;

  002c3	48 8b 44 24 48	 mov	 rax, QWORD PTR s$[rsp]
  002c8	48 8b 80 a8 03
	00 00		 mov	 rax, QWORD PTR [rax+936]
  002cf	48 8b 4c 24 78	 mov	 rcx, QWORD PTR o$[rsp]
  002d4	48 89 88 40 04
	00 00		 mov	 QWORD PTR [rax+1088], rcx

; 7810 :         o->prev = s->last;

  002db	48 8b 44 24 78	 mov	 rax, QWORD PTR o$[rsp]
  002e0	48 8b 4c 24 48	 mov	 rcx, QWORD PTR s$[rsp]
  002e5	48 8b 89 a8 03
	00 00		 mov	 rcx, QWORD PTR [rcx+936]
  002ec	48 89 88 38 04
	00 00		 mov	 QWORD PTR [rax+1080], rcx

; 7811 :         s->last = o;

  002f3	48 8b 44 24 48	 mov	 rax, QWORD PTR s$[rsp]
  002f8	48 8b 4c 24 78	 mov	 rcx, QWORD PTR o$[rsp]
  002fd	48 89 88 a8 03
	00 00		 mov	 QWORD PTR [rax+936], rcx

; 7812 :     }

  00304	e9 5a fe ff ff	 jmp	 $LN27@PxSocketSe@2
$LN6@PxSocketSe@2:

; 7813 : 
; 7814 :     if (result == WAIT_OBJECT_0) {

  00309	83 7c 24 68 00	 cmp	 DWORD PTR result$[rsp], 0
  0030e	75 53		 jne	 SHORT $LN2@PxSocketSe@2

; 7815 :         int err = WSAEventSelect(s->sock_fd, s->fd_accept, FD_ACCEPT);

  00310	41 b8 08 00 00
	00		 mov	 r8d, 8
  00316	48 8b 44 24 48	 mov	 rax, QWORD PTR s$[rsp]
  0031b	48 8b 90 90 03
	00 00		 mov	 rdx, QWORD PTR [rax+912]
  00322	48 8b 44 24 48	 mov	 rax, QWORD PTR s$[rsp]
  00327	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  0032b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WSAEventSelect
  00331	89 84 24 80 00
	00 00		 mov	 DWORD PTR err$131509[rsp], eax

; 7816 :         if (err == SOCKET_ERROR) {

  00338	83 bc 24 80 00
	00 00 ff	 cmp	 DWORD PTR err$131509[rsp], -1
  00340	75 21		 jne	 SHORT $LN1@PxSocketSe@2

; 7817 :             PyErr_SetFromWindowsErr(WSAGetLastError());

  00342	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WSAGetLastError
  00348	8b c8		 mov	 ecx, eax
  0034a	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr

; 7818 :             PxSocket_HandleException(c, "WSAEventSelect", 0);

  0034f	45 33 c0	 xor	 r8d, r8d
  00352	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0P@CIBLNKFF@WSAEventSelect?$AA@
  00359	48 8b 4c 24 70	 mov	 rcx, QWORD PTR c$[rsp]
  0035e	e8 00 00 00 00	 call	 PxSocket_HandleException
$LN1@PxSocketSe@2:
$LN2@PxSocketSe@2:

; 7819 :         }
; 7820 :     }
; 7821 : 
; 7822 :     goto wait;

  00363	e9 13 fd ff ff	 jmp	 $wait$131477
$timeout$131491:

; 7823 : 
; 7824 : timeout:
; 7825 :     /* xxx todo: enumerate all connected sockets and look for connections
; 7826 :      * to disconnect. */
; 7827 :     goto wait;

  00368	e9 0e fd ff ff	 jmp	 $LN25@PxSocketSe@2
$end$131489:

; 7828 : 
; 7829 : 
; 7830 : end:
; 7831 :     LeaveCriticalSection(&(s->acceptex_cs));

  0036d	48 8b 44 24 48	 mov	 rax, QWORD PTR s$[rsp]
  00372	48 05 c8 03 00
	00		 add	 rax, 968		; 000003c8H
  00378	48 8b c8	 mov	 rcx, rax
  0037b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_LeaveCriticalSection

; 7832 : }

  00381	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  00388	c3		 ret	 0
PxSocketServer_AcceptEx ENDP
_TEXT	ENDS
PUBLIC	??_C@_0EB@CLNCCCFD@protocol?5has?5?8max_sync_recv_atte@ ; `string'
PUBLIC	??_C@_0EB@CBPJEOJO@protocol?5has?5?8max_sync_send_atte@ ; `string'
PUBLIC	??_C@_0EL@IKMCLNCN@protocol?5has?5?8max_sync_recv_atte@ ; `string'
PUBLIC	??_C@_0EL@LNLIGLMC@protocol?5has?5?8max_sync_send_atte@ ; `string'
PUBLIC	??_C@_0GB@KLCBDLBD@protocol?5has?5both?5?8concurrency?8?5@ ; `string'
PUBLIC	??_C@_0EF@PBJFMCHI@protocol?5has?5?8lines_received?8?5ca@ ; `string'
PUBLIC	??_C@_0EH@DNPEGIAK@protocol?5has?5?8lines_mode?8?5set?5to@ ; `string'
PUBLIC	??_C@_0EE@DECPJFFD@protocol?5attribute?5?8initial_byte@ ; `string'
PUBLIC	??_C@_0EA@LLGMONOO@protocol?5attribute?5?8exception_ha@ ; `string'
PUBLIC	??_C@_0EA@EPMDOJAO@protocol?5attribute?5?8connection_c@ ; `string'
PUBLIC	??_C@_0DO@FJINFFFO@protocol?5attribute?5?8connection_m@ ; `string'
PUBLIC	??_C@_0DN@JMKFLCHH@protocol?5attribute?5?8lines_receiv@ ; `string'
PUBLIC	??_C@_0DM@ODJAPOOE@protocol?5attribute?5?8data_receive@ ; `string'
PUBLIC	??_C@_0DM@LEIAIEEB@protocol?5attribute?5?8send_complet@ ; `string'
PUBLIC	??_C@_0DM@CLBAOJEJ@protocol?5attribute?5?8recv_shutdow@ ; `string'
PUBLIC	??_C@_0DM@FNKAPFPD@protocol?5attribute?5?8send_shutdow@ ; `string'
PUBLIC	??_C@_0DK@JOGCBBDN@protocol?5attribute?5?8recv_failed?8@ ; `string'
PUBLIC	??_C@_0DK@MFNNLMGJ@protocol?5attribute?5?8send_failed?8@ ; `string'
PUBLIC	??_C@_0DJ@HFGAGABL@protocol?5attribute?5?8lines_mode?8?5@ ; `string'
PUBLIC	??_C@_1BK@MEECPIIM@?$AA?$CB?$AAs?$AA?9?$AA?$DO?$AAp?$AAr?$AAo?$AAt?$AAo?$AAc?$AAo?$AAl?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CC@CADBFOEC@?$AAs?$AA?9?$AA?$DO?$AAp?$AAr?$AAo?$AAt?$AAo?$AAc?$AAo?$AAl?$AA_?$AAt?$AAy?$AAp?$AAe?$AA?$AA@ ; `string'
PUBLIC	PxSocket_InitProtocol
EXTRN	PyLong_AsLong:PROC
EXTRN	_PyObject_GetAttrId:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PxSocket_InitProtocol DD imagerel $LN136
	DD	imagerel $LN136+3547
	DD	imagerel $unwind$PxSocket_InitProtocol
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PxSocket_InitProtocol DD 020c01H
	DD	01d010cH
xdata	ENDS
;	COMDAT ??_C@_0EB@CLNCCCFD@protocol?5has?5?8max_sync_recv_atte@
CONST	SEGMENT
??_C@_0EB@CLNCCCFD@protocol?5has?5?8max_sync_recv_atte@ DB 'protocol has '
	DB	'''max_sync_recv_attempts'' set to a value less than 0', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@CBPJEOJO@protocol?5has?5?8max_sync_send_atte@
CONST	SEGMENT
??_C@_0EB@CBPJEOJO@protocol?5has?5?8max_sync_send_atte@ DB 'protocol has '
	DB	'''max_sync_send_attempts'' set to a value less than 0', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EL@IKMCLNCN@protocol?5has?5?8max_sync_recv_atte@
CONST	SEGMENT
??_C@_0EL@IKMCLNCN@protocol?5has?5?8max_sync_recv_atte@ DB 'protocol has '
	DB	'''max_sync_recv_attempts'' set without ''throughput'' set to '
	DB	'True', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EL@LNLIGLMC@protocol?5has?5?8max_sync_send_atte@
CONST	SEGMENT
??_C@_0EL@LNLIGLMC@protocol?5has?5?8max_sync_send_atte@ DB 'protocol has '
	DB	'''max_sync_send_attempts'' set without ''throughput'' set to '
	DB	'True', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0GB@KLCBDLBD@protocol?5has?5both?5?8concurrency?8?5@
CONST	SEGMENT
??_C@_0GB@KLCBDLBD@protocol?5has?5both?5?8concurrency?8?5@ DB 'protocol h'
	DB	'as both ''concurrency'' and ''throughput'' set to True; only '
	DB	'one or the other is permitted', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EF@PBJFMCHI@protocol?5has?5?8lines_received?8?5ca@
CONST	SEGMENT
??_C@_0EF@PBJFMCHI@protocol?5has?5?8lines_received?8?5ca@ DB 'protocol ha'
	DB	's ''lines_received'' callback but no ''lines_mode'' attribute'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0EH@DNPEGIAK@protocol?5has?5?8lines_mode?8?5set?5to@
CONST	SEGMENT
??_C@_0EH@DNPEGIAK@protocol?5has?5?8lines_mode?8?5set?5to@ DB 'protocol h'
	DB	'as ''lines_mode'' set to True but no ''lines_received'' callb'
	DB	'ack', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EE@DECPJFFD@protocol?5attribute?5?8initial_byte@
CONST	SEGMENT
??_C@_0EE@DECPJFFD@protocol?5attribute?5?8initial_byte@ DB 'protocol attr'
	DB	'ibute ''initial_bytes_to_send'' is not a callable object', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EA@LLGMONOO@protocol?5attribute?5?8exception_ha@
CONST	SEGMENT
??_C@_0EA@LLGMONOO@protocol?5attribute?5?8exception_ha@ DB 'protocol attr'
	DB	'ibute ''exception_handler'' is not a callable object', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EA@EPMDOJAO@protocol?5attribute?5?8connection_c@
CONST	SEGMENT
??_C@_0EA@EPMDOJAO@protocol?5attribute?5?8connection_c@ DB 'protocol attr'
	DB	'ibute ''connection_closed'' is not a callable object', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DO@FJINFFFO@protocol?5attribute?5?8connection_m@
CONST	SEGMENT
??_C@_0DO@FJINFFFO@protocol?5attribute?5?8connection_m@ DB 'protocol attr'
	DB	'ibute ''connection_made'' is not a callable object', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DN@JMKFLCHH@protocol?5attribute?5?8lines_receiv@
CONST	SEGMENT
??_C@_0DN@JMKFLCHH@protocol?5attribute?5?8lines_receiv@ DB 'protocol attr'
	DB	'ibute ''lines_received'' is not a callable object', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@ODJAPOOE@protocol?5attribute?5?8data_receive@
CONST	SEGMENT
??_C@_0DM@ODJAPOOE@protocol?5attribute?5?8data_receive@ DB 'protocol attr'
	DB	'ibute ''data_received'' is not a callable object', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@LEIAIEEB@protocol?5attribute?5?8send_complet@
CONST	SEGMENT
??_C@_0DM@LEIAIEEB@protocol?5attribute?5?8send_complet@ DB 'protocol attr'
	DB	'ibute ''send_complete'' is not a callable object', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@CLBAOJEJ@protocol?5attribute?5?8recv_shutdow@
CONST	SEGMENT
??_C@_0DM@CLBAOJEJ@protocol?5attribute?5?8recv_shutdow@ DB 'protocol attr'
	DB	'ibute ''recv_shutdown'' is not a callable object', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@FNKAPFPD@protocol?5attribute?5?8send_shutdow@
CONST	SEGMENT
??_C@_0DM@FNKAPFPD@protocol?5attribute?5?8send_shutdow@ DB 'protocol attr'
	DB	'ibute ''send_shutdown'' is not a callable object', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@JOGCBBDN@protocol?5attribute?5?8recv_failed?8@
CONST	SEGMENT
??_C@_0DK@JOGCBBDN@protocol?5attribute?5?8recv_failed?8@ DB 'protocol att'
	DB	'ribute ''recv_failed'' is not a callable object', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@MFNNLMGJ@protocol?5attribute?5?8send_failed?8@
CONST	SEGMENT
??_C@_0DK@MFNNLMGJ@protocol?5attribute?5?8send_failed?8@ DB 'protocol att'
	DB	'ribute ''send_failed'' is not a callable object', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@HFGAGABL@protocol?5attribute?5?8lines_mode?8?5@
CONST	SEGMENT
??_C@_0DJ@HFGAGABL@protocol?5attribute?5?8lines_mode?8?5@ DB 'protocol at'
	DB	'tribute ''lines_mode'' is not a callable object', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BK@MEECPIIM@?$AA?$CB?$AAs?$AA?9?$AA?$DO?$AAp?$AAr?$AAo?$AAt?$AAo?$AAc?$AAo?$AAl?$AA?$AA@
CONST	SEGMENT
??_C@_1BK@MEECPIIM@?$AA?$CB?$AAs?$AA?9?$AA?$DO?$AAp?$AAr?$AAo?$AAt?$AAo?$AAc?$AAo?$AAl?$AA?$AA@ DB '!'
	DB	00H, 's', 00H, '-', 00H, '>', 00H, 'p', 00H, 'r', 00H, 'o', 00H
	DB	't', 00H, 'o', 00H, 'c', 00H, 'o', 00H, 'l', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CC@CADBFOEC@?$AAs?$AA?9?$AA?$DO?$AAp?$AAr?$AAo?$AAt?$AAo?$AAc?$AAo?$AAl?$AA_?$AAt?$AAy?$AAp?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1CC@CADBFOEC@?$AAs?$AA?9?$AA?$DO?$AAp?$AAr?$AAo?$AAt?$AAo?$AAc?$AAo?$AAl?$AA_?$AAt?$AAy?$AAp?$AAe?$AA?$AA@ DB 's'
	DB	00H, '-', 00H, '>', 00H, 'p', 00H, 'r', 00H, 'o', 00H, 't', 00H
	DB	'o', 00H, 'c', 00H, 'o', 00H, 'l', 00H, '_', 00H, 't', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, 00H, 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PxSocket_InitProtocol
_TEXT	SEGMENT
p$ = 32
o$131554 = 40
o$131562 = 48
o$131570 = 56
o$131578 = 64
o$131586 = 72
o$131594 = 80
o$131602 = 88
o$131610 = 96
o$131618 = 104
o$131626 = 112
o$131634 = 120
o$131642 = 128
b$131650 = 136
o$131651 = 144
b$131661 = 152
o$131662 = 160
b$131672 = 168
o$131673 = 176
i$131683 = 184
o$131684 = 192
i$131693 = 200
o$131694 = 208
s$ = 240
PxSocket_InitProtocol PROC				; COMDAT

; 7861 : {

$LN136:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H

; 7862 :     PyObject *p;
; 7863 :     assert(s->protocol_type);

  0000c	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00014	48 83 b8 88 02
	00 00 00	 cmp	 QWORD PTR [rax+648], 0
  0001c	75 1c		 jne	 SHORT $LN131@PxSocket_I@2
  0001e	41 b8 b7 1e 00
	00		 mov	 r8d, 7863		; 00001eb7H
  00024	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0002b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CC@CADBFOEC@?$AAs?$AA?9?$AA?$DO?$AAp?$AAr?$AAo?$AAt?$AAo?$AAc?$AAo?$AAl?$AA_?$AAt?$AAy?$AAp?$AAe?$AA?$AA@
  00032	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00038	33 c0		 xor	 eax, eax
$LN131@PxSocket_I@2:

; 7864 :     assert(!s->protocol);

  0003a	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00042	48 83 b8 90 02
	00 00 00	 cmp	 QWORD PTR [rax+656], 0
  0004a	74 1c		 je	 SHORT $LN132@PxSocket_I@2
  0004c	41 b8 b8 1e 00
	00		 mov	 r8d, 7864		; 00001eb8H
  00052	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00059	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BK@MEECPIIM@?$AA?$CB?$AAs?$AA?9?$AA?$DO?$AAp?$AAr?$AAo?$AAt?$AAo?$AAc?$AAo?$AAl?$AA?$AA@
  00060	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00066	33 c0		 xor	 eax, eax
$LN132@PxSocket_I@2:

; 7865 : 
; 7866 :     s->protocol = PyObject_CallObject(s->protocol_type, NULL);

  00068	33 d2		 xor	 edx, edx
  0006a	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00072	48 8b 88 88 02
	00 00		 mov	 rcx, QWORD PTR [rax+648]
  00079	e8 00 00 00 00	 call	 PyObject_CallObject
  0007e	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  00086	48 89 81 90 02
	00 00		 mov	 QWORD PTR [rcx+656], rax

; 7867 :     if (!s->protocol)

  0008d	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00095	48 83 b8 90 02
	00 00 00	 cmp	 QWORD PTR [rax+656], 0
  0009d	75 07		 jne	 SHORT $LN128@PxSocket_I@2

; 7868 :         return 0;

  0009f	33 c0		 xor	 eax, eax
  000a1	e9 2d 0d 00 00	 jmp	 $LN129@PxSocket_I@2
$LN128@PxSocket_I@2:

; 7869 : 
; 7870 :     p = s->protocol;

  000a6	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  000ae	48 8b 80 90 02
	00 00		 mov	 rax, QWORD PTR [rax+656]
  000b5	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax

; 7871 : 
; 7872 :     assert(!PyErr_Occurred());

  000ba	e8 00 00 00 00	 call	 PyErr_Occurred
  000bf	48 85 c0	 test	 rax, rax
  000c2	74 1c		 je	 SHORT $LN133@PxSocket_I@2
  000c4	41 b8 c0 1e 00
	00		 mov	 r8d, 7872		; 00001ec0H
  000ca	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  000d1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CE@JKFGJBND@?$AA?$CB?$AAP?$AAy?$AAE?$AAr?$AAr?$AA_?$AAO?$AAc?$AAc?$AAu?$AAr?$AAr?$AAe?$AAd?$AA?$CI?$AA?$CJ?$AA?$AA@
  000d8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000de	33 c0		 xor	 eax, eax
$LN133@PxSocket_I@2:
$LN127@PxSocket_I@2:

; 7873 : 
; 7874 : #define _PxSocket_RESOLVE_OBJECT(name) do {             \
; 7875 :     PyObject *o = _PyObject_GetAttrId(p, &PyId_##name); \
; 7876 :     if (!o)                                             \
; 7877 :         PyErr_Clear();                                  \
; 7878 :     else if (!PyCallable_Check(o)) {                    \
; 7879 :         PyErr_SetString(                                \
; 7880 :             PyExc_ValueError,                           \
; 7881 :             "protocol attribute '" #name "' "           \
; 7882 :             "is not a callable object"                  \
; 7883 :         );                                              \
; 7884 :         return 0;                                       \
; 7885 :     }                                                   \
; 7886 :     s->##name = o;                                      \
; 7887 : } while (0)
; 7888 : 
; 7889 : #define _PxSocket_RESOLVE_BOOL(name) do {               \
; 7890 :     int b = 0;                                          \
; 7891 :     PyObject *o = _PyObject_GetAttrId(p, &PyId_##name); \
; 7892 :     if (!o)                                             \
; 7893 :         PyErr_Clear();                                  \
; 7894 :     else                                                \
; 7895 :         b = PyObject_IsTrue(o);                         \
; 7896 :     if (b)                                              \
; 7897 :         Px_SOCKFLAGS(s) |= Px_SOCKFLAGS_##name;         \
; 7898 :     else                                                \
; 7899 :         Px_SOCKFLAGS(s) &= ~Px_SOCKFLAGS_##name;        \
; 7900 : } while (0)
; 7901 : 
; 7902 : #define _PxSocket_RESOLVE_INT(name) do {                \
; 7903 :     int i = 0;                                          \
; 7904 :     PyObject *o = _PyObject_GetAttrId(p, &PyId_##name); \
; 7905 :     if (!o) {                                           \
; 7906 :         PyErr_Clear();                                  \
; 7907 :         Px_SOCKFLAGS(s) &= ~Px_SOCKFLAGS_##name;        \
; 7908 :     } else {                                            \
; 7909 :         i = PyLong_AsLong(o);                           \
; 7910 :         if (PyErr_Occurred())                           \
; 7911 :             return 0;                                   \
; 7912 :         Px_SOCKFLAGS(s) |= Px_SOCKFLAGS_##name;         \
; 7913 :         s->##name = i;                                  \
; 7914 :     }                                                   \
; 7915 : } while (0)
; 7916 : 
; 7917 :     _PxSocket_RESOLVE_OBJECT(lines_mode);

  000e0	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_lines_mode
  000e5	8b c0		 mov	 eax, eax
  000e7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  000ed	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  000f6	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  000fa	48 8b d0	 mov	 rdx, rax
  000fd	48 8b 4c 24 20	 mov	 rcx, QWORD PTR p$[rsp]
  00102	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00107	48 89 44 24 28	 mov	 QWORD PTR o$131554[rsp], rax
  0010c	48 83 7c 24 28
	00		 cmp	 QWORD PTR o$131554[rsp], 0
  00112	75 07		 jne	 SHORT $LN124@PxSocket_I@2
  00114	e8 00 00 00 00	 call	 PyErr_Clear
  00119	eb 28		 jmp	 SHORT $LN123@PxSocket_I@2
$LN124@PxSocket_I@2:
  0011b	48 8b 4c 24 28	 mov	 rcx, QWORD PTR o$131554[rsp]
  00120	e8 00 00 00 00	 call	 PyCallable_Check
  00125	85 c0		 test	 eax, eax
  00127	75 1a		 jne	 SHORT $LN122@PxSocket_I@2
  00129	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DJ@HFGAGABL@protocol?5attribute?5?8lines_mode?8?5@
  00130	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00137	e8 00 00 00 00	 call	 PyErr_SetString
  0013c	33 c0		 xor	 eax, eax
  0013e	e9 90 0c 00 00	 jmp	 $LN129@PxSocket_I@2
$LN122@PxSocket_I@2:
$LN123@PxSocket_I@2:
  00143	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  0014b	48 8b 4c 24 28	 mov	 rcx, QWORD PTR o$131554[rsp]
  00150	48 89 88 98 02
	00 00		 mov	 QWORD PTR [rax+664], rcx
  00157	33 c0		 xor	 eax, eax
  00159	85 c0		 test	 eax, eax
  0015b	75 83		 jne	 SHORT $LN127@PxSocket_I@2
$LN121@PxSocket_I@2:

; 7918 :     _PxSocket_RESOLVE_OBJECT(send_failed);

  0015d	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_send_failed
  00162	8b c0		 mov	 eax, eax
  00164	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0016a	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00173	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00177	48 8b d0	 mov	 rdx, rax
  0017a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR p$[rsp]
  0017f	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00184	48 89 44 24 30	 mov	 QWORD PTR o$131562[rsp], rax
  00189	48 83 7c 24 30
	00		 cmp	 QWORD PTR o$131562[rsp], 0
  0018f	75 07		 jne	 SHORT $LN118@PxSocket_I@2
  00191	e8 00 00 00 00	 call	 PyErr_Clear
  00196	eb 28		 jmp	 SHORT $LN117@PxSocket_I@2
$LN118@PxSocket_I@2:
  00198	48 8b 4c 24 30	 mov	 rcx, QWORD PTR o$131562[rsp]
  0019d	e8 00 00 00 00	 call	 PyCallable_Check
  001a2	85 c0		 test	 eax, eax
  001a4	75 1a		 jne	 SHORT $LN116@PxSocket_I@2
  001a6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DK@MFNNLMGJ@protocol?5attribute?5?8send_failed?8@
  001ad	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  001b4	e8 00 00 00 00	 call	 PyErr_SetString
  001b9	33 c0		 xor	 eax, eax
  001bb	e9 13 0c 00 00	 jmp	 $LN129@PxSocket_I@2
$LN116@PxSocket_I@2:
$LN117@PxSocket_I@2:
  001c0	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  001c8	48 8b 4c 24 30	 mov	 rcx, QWORD PTR o$131562[rsp]
  001cd	48 89 88 a0 02
	00 00		 mov	 QWORD PTR [rax+672], rcx
  001d4	33 c0		 xor	 eax, eax
  001d6	85 c0		 test	 eax, eax
  001d8	75 83		 jne	 SHORT $LN121@PxSocket_I@2
$LN115@PxSocket_I@2:

; 7919 :     _PxSocket_RESOLVE_OBJECT(recv_failed);

  001da	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_recv_failed
  001df	8b c0		 mov	 eax, eax
  001e1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  001e7	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  001f0	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  001f4	48 8b d0	 mov	 rdx, rax
  001f7	48 8b 4c 24 20	 mov	 rcx, QWORD PTR p$[rsp]
  001fc	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00201	48 89 44 24 38	 mov	 QWORD PTR o$131570[rsp], rax
  00206	48 83 7c 24 38
	00		 cmp	 QWORD PTR o$131570[rsp], 0
  0020c	75 07		 jne	 SHORT $LN112@PxSocket_I@2
  0020e	e8 00 00 00 00	 call	 PyErr_Clear
  00213	eb 28		 jmp	 SHORT $LN111@PxSocket_I@2
$LN112@PxSocket_I@2:
  00215	48 8b 4c 24 38	 mov	 rcx, QWORD PTR o$131570[rsp]
  0021a	e8 00 00 00 00	 call	 PyCallable_Check
  0021f	85 c0		 test	 eax, eax
  00221	75 1a		 jne	 SHORT $LN110@PxSocket_I@2
  00223	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DK@JOGCBBDN@protocol?5attribute?5?8recv_failed?8@
  0022a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00231	e8 00 00 00 00	 call	 PyErr_SetString
  00236	33 c0		 xor	 eax, eax
  00238	e9 96 0b 00 00	 jmp	 $LN129@PxSocket_I@2
$LN110@PxSocket_I@2:
$LN111@PxSocket_I@2:
  0023d	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00245	48 8b 4c 24 38	 mov	 rcx, QWORD PTR o$131570[rsp]
  0024a	48 89 88 a8 02
	00 00		 mov	 QWORD PTR [rax+680], rcx
  00251	33 c0		 xor	 eax, eax
  00253	85 c0		 test	 eax, eax
  00255	75 83		 jne	 SHORT $LN115@PxSocket_I@2
$LN109@PxSocket_I@2:

; 7920 :     _PxSocket_RESOLVE_OBJECT(send_shutdown);

  00257	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_send_shutdown
  0025c	8b c0		 mov	 eax, eax
  0025e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00264	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0026d	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00271	48 8b d0	 mov	 rdx, rax
  00274	48 8b 4c 24 20	 mov	 rcx, QWORD PTR p$[rsp]
  00279	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  0027e	48 89 44 24 40	 mov	 QWORD PTR o$131578[rsp], rax
  00283	48 83 7c 24 40
	00		 cmp	 QWORD PTR o$131578[rsp], 0
  00289	75 07		 jne	 SHORT $LN106@PxSocket_I@2
  0028b	e8 00 00 00 00	 call	 PyErr_Clear
  00290	eb 28		 jmp	 SHORT $LN105@PxSocket_I@2
$LN106@PxSocket_I@2:
  00292	48 8b 4c 24 40	 mov	 rcx, QWORD PTR o$131578[rsp]
  00297	e8 00 00 00 00	 call	 PyCallable_Check
  0029c	85 c0		 test	 eax, eax
  0029e	75 1a		 jne	 SHORT $LN104@PxSocket_I@2
  002a0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DM@FNKAPFPD@protocol?5attribute?5?8send_shutdow@
  002a7	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  002ae	e8 00 00 00 00	 call	 PyErr_SetString
  002b3	33 c0		 xor	 eax, eax
  002b5	e9 19 0b 00 00	 jmp	 $LN129@PxSocket_I@2
$LN104@PxSocket_I@2:
$LN105@PxSocket_I@2:
  002ba	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  002c2	48 8b 4c 24 40	 mov	 rcx, QWORD PTR o$131578[rsp]
  002c7	48 89 88 b0 02
	00 00		 mov	 QWORD PTR [rax+688], rcx
  002ce	33 c0		 xor	 eax, eax
  002d0	85 c0		 test	 eax, eax
  002d2	75 83		 jne	 SHORT $LN109@PxSocket_I@2
$LN103@PxSocket_I@2:

; 7921 :     _PxSocket_RESOLVE_OBJECT(recv_shutdown);

  002d4	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_recv_shutdown
  002d9	8b c0		 mov	 eax, eax
  002db	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  002e1	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  002ea	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  002ee	48 8b d0	 mov	 rdx, rax
  002f1	48 8b 4c 24 20	 mov	 rcx, QWORD PTR p$[rsp]
  002f6	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  002fb	48 89 44 24 48	 mov	 QWORD PTR o$131586[rsp], rax
  00300	48 83 7c 24 48
	00		 cmp	 QWORD PTR o$131586[rsp], 0
  00306	75 07		 jne	 SHORT $LN100@PxSocket_I@2
  00308	e8 00 00 00 00	 call	 PyErr_Clear
  0030d	eb 28		 jmp	 SHORT $LN99@PxSocket_I@2
$LN100@PxSocket_I@2:
  0030f	48 8b 4c 24 48	 mov	 rcx, QWORD PTR o$131586[rsp]
  00314	e8 00 00 00 00	 call	 PyCallable_Check
  00319	85 c0		 test	 eax, eax
  0031b	75 1a		 jne	 SHORT $LN98@PxSocket_I@2
  0031d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DM@CLBAOJEJ@protocol?5attribute?5?8recv_shutdow@
  00324	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0032b	e8 00 00 00 00	 call	 PyErr_SetString
  00330	33 c0		 xor	 eax, eax
  00332	e9 9c 0a 00 00	 jmp	 $LN129@PxSocket_I@2
$LN98@PxSocket_I@2:
$LN99@PxSocket_I@2:
  00337	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  0033f	48 8b 4c 24 48	 mov	 rcx, QWORD PTR o$131586[rsp]
  00344	48 89 88 b8 02
	00 00		 mov	 QWORD PTR [rax+696], rcx
  0034b	33 c0		 xor	 eax, eax
  0034d	85 c0		 test	 eax, eax
  0034f	75 83		 jne	 SHORT $LN103@PxSocket_I@2
$LN97@PxSocket_I@2:

; 7922 :     _PxSocket_RESOLVE_OBJECT(send_complete);

  00351	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_send_complete
  00356	8b c0		 mov	 eax, eax
  00358	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0035e	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00367	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0036b	48 8b d0	 mov	 rdx, rax
  0036e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR p$[rsp]
  00373	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00378	48 89 44 24 50	 mov	 QWORD PTR o$131594[rsp], rax
  0037d	48 83 7c 24 50
	00		 cmp	 QWORD PTR o$131594[rsp], 0
  00383	75 07		 jne	 SHORT $LN94@PxSocket_I@2
  00385	e8 00 00 00 00	 call	 PyErr_Clear
  0038a	eb 28		 jmp	 SHORT $LN93@PxSocket_I@2
$LN94@PxSocket_I@2:
  0038c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR o$131594[rsp]
  00391	e8 00 00 00 00	 call	 PyCallable_Check
  00396	85 c0		 test	 eax, eax
  00398	75 1a		 jne	 SHORT $LN92@PxSocket_I@2
  0039a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DM@LEIAIEEB@protocol?5attribute?5?8send_complet@
  003a1	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  003a8	e8 00 00 00 00	 call	 PyErr_SetString
  003ad	33 c0		 xor	 eax, eax
  003af	e9 1f 0a 00 00	 jmp	 $LN129@PxSocket_I@2
$LN92@PxSocket_I@2:
$LN93@PxSocket_I@2:
  003b4	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  003bc	48 8b 4c 24 50	 mov	 rcx, QWORD PTR o$131594[rsp]
  003c1	48 89 88 c0 02
	00 00		 mov	 QWORD PTR [rax+704], rcx
  003c8	33 c0		 xor	 eax, eax
  003ca	85 c0		 test	 eax, eax
  003cc	75 83		 jne	 SHORT $LN97@PxSocket_I@2
$LN91@PxSocket_I@2:

; 7923 :     _PxSocket_RESOLVE_OBJECT(data_received);

  003ce	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_data_received
  003d3	8b c0		 mov	 eax, eax
  003d5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  003db	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  003e4	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  003e8	48 8b d0	 mov	 rdx, rax
  003eb	48 8b 4c 24 20	 mov	 rcx, QWORD PTR p$[rsp]
  003f0	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  003f5	48 89 44 24 58	 mov	 QWORD PTR o$131602[rsp], rax
  003fa	48 83 7c 24 58
	00		 cmp	 QWORD PTR o$131602[rsp], 0
  00400	75 07		 jne	 SHORT $LN88@PxSocket_I@2
  00402	e8 00 00 00 00	 call	 PyErr_Clear
  00407	eb 28		 jmp	 SHORT $LN87@PxSocket_I@2
$LN88@PxSocket_I@2:
  00409	48 8b 4c 24 58	 mov	 rcx, QWORD PTR o$131602[rsp]
  0040e	e8 00 00 00 00	 call	 PyCallable_Check
  00413	85 c0		 test	 eax, eax
  00415	75 1a		 jne	 SHORT $LN86@PxSocket_I@2
  00417	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DM@ODJAPOOE@protocol?5attribute?5?8data_receive@
  0041e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00425	e8 00 00 00 00	 call	 PyErr_SetString
  0042a	33 c0		 xor	 eax, eax
  0042c	e9 a2 09 00 00	 jmp	 $LN129@PxSocket_I@2
$LN86@PxSocket_I@2:
$LN87@PxSocket_I@2:
  00431	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00439	48 8b 4c 24 58	 mov	 rcx, QWORD PTR o$131602[rsp]
  0043e	48 89 88 c8 02
	00 00		 mov	 QWORD PTR [rax+712], rcx
  00445	33 c0		 xor	 eax, eax
  00447	85 c0		 test	 eax, eax
  00449	75 83		 jne	 SHORT $LN91@PxSocket_I@2
$LN85@PxSocket_I@2:

; 7924 :     _PxSocket_RESOLVE_OBJECT(lines_received);

  0044b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_lines_received
  00450	8b c0		 mov	 eax, eax
  00452	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00458	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00461	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00465	48 8b d0	 mov	 rdx, rax
  00468	48 8b 4c 24 20	 mov	 rcx, QWORD PTR p$[rsp]
  0046d	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00472	48 89 44 24 60	 mov	 QWORD PTR o$131610[rsp], rax
  00477	48 83 7c 24 60
	00		 cmp	 QWORD PTR o$131610[rsp], 0
  0047d	75 07		 jne	 SHORT $LN82@PxSocket_I@2
  0047f	e8 00 00 00 00	 call	 PyErr_Clear
  00484	eb 28		 jmp	 SHORT $LN81@PxSocket_I@2
$LN82@PxSocket_I@2:
  00486	48 8b 4c 24 60	 mov	 rcx, QWORD PTR o$131610[rsp]
  0048b	e8 00 00 00 00	 call	 PyCallable_Check
  00490	85 c0		 test	 eax, eax
  00492	75 1a		 jne	 SHORT $LN80@PxSocket_I@2
  00494	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DN@JMKFLCHH@protocol?5attribute?5?8lines_receiv@
  0049b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  004a2	e8 00 00 00 00	 call	 PyErr_SetString
  004a7	33 c0		 xor	 eax, eax
  004a9	e9 25 09 00 00	 jmp	 $LN129@PxSocket_I@2
$LN80@PxSocket_I@2:
$LN81@PxSocket_I@2:
  004ae	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  004b6	48 8b 4c 24 60	 mov	 rcx, QWORD PTR o$131610[rsp]
  004bb	48 89 88 d0 02
	00 00		 mov	 QWORD PTR [rax+720], rcx
  004c2	33 c0		 xor	 eax, eax
  004c4	85 c0		 test	 eax, eax
  004c6	75 83		 jne	 SHORT $LN85@PxSocket_I@2
$LN79@PxSocket_I@2:

; 7925 :     _PxSocket_RESOLVE_OBJECT(connection_made);

  004c8	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_connection_made
  004cd	8b c0		 mov	 eax, eax
  004cf	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  004d5	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  004de	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  004e2	48 8b d0	 mov	 rdx, rax
  004e5	48 8b 4c 24 20	 mov	 rcx, QWORD PTR p$[rsp]
  004ea	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  004ef	48 89 44 24 68	 mov	 QWORD PTR o$131618[rsp], rax
  004f4	48 83 7c 24 68
	00		 cmp	 QWORD PTR o$131618[rsp], 0
  004fa	75 07		 jne	 SHORT $LN76@PxSocket_I@2
  004fc	e8 00 00 00 00	 call	 PyErr_Clear
  00501	eb 28		 jmp	 SHORT $LN75@PxSocket_I@2
$LN76@PxSocket_I@2:
  00503	48 8b 4c 24 68	 mov	 rcx, QWORD PTR o$131618[rsp]
  00508	e8 00 00 00 00	 call	 PyCallable_Check
  0050d	85 c0		 test	 eax, eax
  0050f	75 1a		 jne	 SHORT $LN74@PxSocket_I@2
  00511	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DO@FJINFFFO@protocol?5attribute?5?8connection_m@
  00518	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0051f	e8 00 00 00 00	 call	 PyErr_SetString
  00524	33 c0		 xor	 eax, eax
  00526	e9 a8 08 00 00	 jmp	 $LN129@PxSocket_I@2
$LN74@PxSocket_I@2:
$LN75@PxSocket_I@2:
  0052b	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00533	48 8b 4c 24 68	 mov	 rcx, QWORD PTR o$131618[rsp]
  00538	48 89 88 d8 02
	00 00		 mov	 QWORD PTR [rax+728], rcx
  0053f	33 c0		 xor	 eax, eax
  00541	85 c0		 test	 eax, eax
  00543	75 83		 jne	 SHORT $LN79@PxSocket_I@2
$LN73@PxSocket_I@2:

; 7926 :     _PxSocket_RESOLVE_OBJECT(connection_closed);

  00545	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_connection_closed
  0054a	8b c0		 mov	 eax, eax
  0054c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00552	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0055b	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0055f	48 8b d0	 mov	 rdx, rax
  00562	48 8b 4c 24 20	 mov	 rcx, QWORD PTR p$[rsp]
  00567	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  0056c	48 89 44 24 70	 mov	 QWORD PTR o$131626[rsp], rax
  00571	48 83 7c 24 70
	00		 cmp	 QWORD PTR o$131626[rsp], 0
  00577	75 07		 jne	 SHORT $LN70@PxSocket_I@2
  00579	e8 00 00 00 00	 call	 PyErr_Clear
  0057e	eb 28		 jmp	 SHORT $LN69@PxSocket_I@2
$LN70@PxSocket_I@2:
  00580	48 8b 4c 24 70	 mov	 rcx, QWORD PTR o$131626[rsp]
  00585	e8 00 00 00 00	 call	 PyCallable_Check
  0058a	85 c0		 test	 eax, eax
  0058c	75 1a		 jne	 SHORT $LN68@PxSocket_I@2
  0058e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0EA@EPMDOJAO@protocol?5attribute?5?8connection_c@
  00595	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0059c	e8 00 00 00 00	 call	 PyErr_SetString
  005a1	33 c0		 xor	 eax, eax
  005a3	e9 2b 08 00 00	 jmp	 $LN129@PxSocket_I@2
$LN68@PxSocket_I@2:
$LN69@PxSocket_I@2:
  005a8	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  005b0	48 8b 4c 24 70	 mov	 rcx, QWORD PTR o$131626[rsp]
  005b5	48 89 88 e0 02
	00 00		 mov	 QWORD PTR [rax+736], rcx
  005bc	33 c0		 xor	 eax, eax
  005be	85 c0		 test	 eax, eax
  005c0	75 83		 jne	 SHORT $LN73@PxSocket_I@2
$LN67@PxSocket_I@2:

; 7927 :     _PxSocket_RESOLVE_OBJECT(exception_handler);

  005c2	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_exception_handler
  005c7	8b c0		 mov	 eax, eax
  005c9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  005cf	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  005d8	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  005dc	48 8b d0	 mov	 rdx, rax
  005df	48 8b 4c 24 20	 mov	 rcx, QWORD PTR p$[rsp]
  005e4	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  005e9	48 89 44 24 78	 mov	 QWORD PTR o$131634[rsp], rax
  005ee	48 83 7c 24 78
	00		 cmp	 QWORD PTR o$131634[rsp], 0
  005f4	75 07		 jne	 SHORT $LN64@PxSocket_I@2
  005f6	e8 00 00 00 00	 call	 PyErr_Clear
  005fb	eb 28		 jmp	 SHORT $LN63@PxSocket_I@2
$LN64@PxSocket_I@2:
  005fd	48 8b 4c 24 78	 mov	 rcx, QWORD PTR o$131634[rsp]
  00602	e8 00 00 00 00	 call	 PyCallable_Check
  00607	85 c0		 test	 eax, eax
  00609	75 1a		 jne	 SHORT $LN62@PxSocket_I@2
  0060b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0EA@LLGMONOO@protocol?5attribute?5?8exception_ha@
  00612	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00619	e8 00 00 00 00	 call	 PyErr_SetString
  0061e	33 c0		 xor	 eax, eax
  00620	e9 ae 07 00 00	 jmp	 $LN129@PxSocket_I@2
$LN62@PxSocket_I@2:
$LN63@PxSocket_I@2:
  00625	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  0062d	48 8b 4c 24 78	 mov	 rcx, QWORD PTR o$131634[rsp]
  00632	48 89 88 e8 02
	00 00		 mov	 QWORD PTR [rax+744], rcx
  00639	33 c0		 xor	 eax, eax
  0063b	85 c0		 test	 eax, eax
  0063d	75 83		 jne	 SHORT $LN67@PxSocket_I@2
$LN61@PxSocket_I@2:

; 7928 :     _PxSocket_RESOLVE_OBJECT(initial_bytes_to_send);

  0063f	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_initial_bytes_to_send
  00644	8b c0		 mov	 eax, eax
  00646	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0064c	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00655	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00659	48 8b d0	 mov	 rdx, rax
  0065c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR p$[rsp]
  00661	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00666	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR o$131642[rsp], rax
  0066e	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR o$131642[rsp], 0
  00677	75 07		 jne	 SHORT $LN58@PxSocket_I@2
  00679	e8 00 00 00 00	 call	 PyErr_Clear
  0067e	eb 2b		 jmp	 SHORT $LN57@PxSocket_I@2
$LN58@PxSocket_I@2:
  00680	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR o$131642[rsp]
  00688	e8 00 00 00 00	 call	 PyCallable_Check
  0068d	85 c0		 test	 eax, eax
  0068f	75 1a		 jne	 SHORT $LN56@PxSocket_I@2
  00691	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0EE@DECPJFFD@protocol?5attribute?5?8initial_byte@
  00698	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0069f	e8 00 00 00 00	 call	 PyErr_SetString
  006a4	33 c0		 xor	 eax, eax
  006a6	e9 28 07 00 00	 jmp	 $LN129@PxSocket_I@2
$LN56@PxSocket_I@2:
$LN57@PxSocket_I@2:
  006ab	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  006b3	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR o$131642[rsp]
  006bb	48 89 88 f0 02
	00 00		 mov	 QWORD PTR [rax+752], rcx
  006c2	33 c0		 xor	 eax, eax
  006c4	85 c0		 test	 eax, eax
  006c6	0f 85 73 ff ff
	ff		 jne	 $LN61@PxSocket_I@2
$LN55@PxSocket_I@2:

; 7929 : 
; 7930 :     _PxSocket_RESOLVE_BOOL(throughput);

  006cc	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR b$131650[rsp], 0
  006d7	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_throughput
  006dc	8b c0		 mov	 eax, eax
  006de	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  006e4	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  006ed	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  006f1	48 8b d0	 mov	 rdx, rax
  006f4	48 8b 4c 24 20	 mov	 rcx, QWORD PTR p$[rsp]
  006f9	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  006fe	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR o$131651[rsp], rax
  00706	48 83 bc 24 90
	00 00 00 00	 cmp	 QWORD PTR o$131651[rsp], 0
  0070f	75 07		 jne	 SHORT $LN52@PxSocket_I@2
  00711	e8 00 00 00 00	 call	 PyErr_Clear
  00716	eb 14		 jmp	 SHORT $LN51@PxSocket_I@2
$LN52@PxSocket_I@2:
  00718	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR o$131651[rsp]
  00720	e8 00 00 00 00	 call	 PyObject_IsTrue
  00725	89 84 24 88 00
	00 00		 mov	 DWORD PTR b$131650[rsp], eax
$LN51@PxSocket_I@2:
  0072c	83 bc 24 88 00
	00 00 00	 cmp	 DWORD PTR b$131650[rsp], 0
  00734	74 21		 je	 SHORT $LN50@PxSocket_I@2
  00736	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  0073e	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  00744	83 c8 40	 or	 eax, 64			; 00000040H
  00747	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  0074f	89 81 f4 01 00
	00		 mov	 DWORD PTR [rcx+500], eax
  00755	eb 1f		 jmp	 SHORT $LN49@PxSocket_I@2
$LN50@PxSocket_I@2:
  00757	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  0075f	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  00765	83 e0 bf	 and	 eax, -65		; ffffffbfH
  00768	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  00770	89 81 f4 01 00
	00		 mov	 DWORD PTR [rcx+500], eax
$LN49@PxSocket_I@2:
  00776	33 c0		 xor	 eax, eax
  00778	85 c0		 test	 eax, eax
  0077a	0f 85 4c ff ff
	ff		 jne	 $LN55@PxSocket_I@2
$LN48@PxSocket_I@2:

; 7931 :     _PxSocket_RESOLVE_BOOL(concurrency);

  00780	c7 84 24 98 00
	00 00 00 00 00
	00		 mov	 DWORD PTR b$131661[rsp], 0
  0078b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_concurrency
  00790	8b c0		 mov	 eax, eax
  00792	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00798	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  007a1	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  007a5	48 8b d0	 mov	 rdx, rax
  007a8	48 8b 4c 24 20	 mov	 rcx, QWORD PTR p$[rsp]
  007ad	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  007b2	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR o$131662[rsp], rax
  007ba	48 83 bc 24 a0
	00 00 00 00	 cmp	 QWORD PTR o$131662[rsp], 0
  007c3	75 07		 jne	 SHORT $LN45@PxSocket_I@2
  007c5	e8 00 00 00 00	 call	 PyErr_Clear
  007ca	eb 14		 jmp	 SHORT $LN44@PxSocket_I@2
$LN45@PxSocket_I@2:
  007cc	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR o$131662[rsp]
  007d4	e8 00 00 00 00	 call	 PyObject_IsTrue
  007d9	89 84 24 98 00
	00 00		 mov	 DWORD PTR b$131661[rsp], eax
$LN44@PxSocket_I@2:
  007e0	83 bc 24 98 00
	00 00 00	 cmp	 DWORD PTR b$131661[rsp], 0
  007e8	74 22		 je	 SHORT $LN43@PxSocket_I@2
  007ea	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  007f2	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  007f8	0f ba e8 0b	 bts	 eax, 11
  007fc	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  00804	89 81 f4 01 00
	00		 mov	 DWORD PTR [rcx+500], eax
  0080a	eb 20		 jmp	 SHORT $LN42@PxSocket_I@2
$LN43@PxSocket_I@2:
  0080c	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00814	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  0081a	0f ba f0 0b	 btr	 eax, 11
  0081e	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  00826	89 81 f4 01 00
	00		 mov	 DWORD PTR [rcx+500], eax
$LN42@PxSocket_I@2:
  0082c	33 c0		 xor	 eax, eax
  0082e	85 c0		 test	 eax, eax
  00830	0f 85 4a ff ff
	ff		 jne	 $LN48@PxSocket_I@2
$LN41@PxSocket_I@2:

; 7932 :     _PxSocket_RESOLVE_BOOL(shutdown_send);

  00836	c7 84 24 a8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR b$131672[rsp], 0
  00841	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_shutdown_send
  00846	8b c0		 mov	 eax, eax
  00848	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0084e	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00857	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0085b	48 8b d0	 mov	 rdx, rax
  0085e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR p$[rsp]
  00863	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00868	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR o$131673[rsp], rax
  00870	48 83 bc 24 b0
	00 00 00 00	 cmp	 QWORD PTR o$131673[rsp], 0
  00879	75 07		 jne	 SHORT $LN38@PxSocket_I@2
  0087b	e8 00 00 00 00	 call	 PyErr_Clear
  00880	eb 14		 jmp	 SHORT $LN37@PxSocket_I@2
$LN38@PxSocket_I@2:
  00882	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR o$131673[rsp]
  0088a	e8 00 00 00 00	 call	 PyObject_IsTrue
  0088f	89 84 24 a8 00
	00 00		 mov	 DWORD PTR b$131672[rsp], eax
$LN37@PxSocket_I@2:
  00896	83 bc 24 a8 00
	00 00 00	 cmp	 DWORD PTR b$131672[rsp], 0
  0089e	74 22		 je	 SHORT $LN36@PxSocket_I@2
  008a0	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  008a8	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  008ae	0f ba e8 0f	 bts	 eax, 15
  008b2	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  008ba	89 81 f4 01 00
	00		 mov	 DWORD PTR [rcx+500], eax
  008c0	eb 20		 jmp	 SHORT $LN35@PxSocket_I@2
$LN36@PxSocket_I@2:
  008c2	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  008ca	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  008d0	0f ba f0 0f	 btr	 eax, 15
  008d4	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  008dc	89 81 f4 01 00
	00		 mov	 DWORD PTR [rcx+500], eax
$LN35@PxSocket_I@2:
  008e2	33 c0		 xor	 eax, eax
  008e4	85 c0		 test	 eax, eax
  008e6	0f 85 4a ff ff
	ff		 jne	 $LN41@PxSocket_I@2
$LN34@PxSocket_I@2:

; 7933 : 
; 7934 :     _PxSocket_RESOLVE_INT(max_sync_send_attempts);

  008ec	c7 84 24 b8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR i$131683[rsp], 0
  008f7	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_max_sync_send_attempts
  008fc	8b c0		 mov	 eax, eax
  008fe	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00904	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0090d	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00911	48 8b d0	 mov	 rdx, rax
  00914	48 8b 4c 24 20	 mov	 rcx, QWORD PTR p$[rsp]
  00919	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  0091e	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR o$131684[rsp], rax
  00926	48 83 bc 24 c0
	00 00 00 00	 cmp	 QWORD PTR o$131684[rsp], 0
  0092f	75 27		 jne	 SHORT $LN31@PxSocket_I@2
  00931	e8 00 00 00 00	 call	 PyErr_Clear
  00936	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  0093e	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  00944	0f ba f0 15	 btr	 eax, 21
  00948	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  00950	89 81 f4 01 00
	00		 mov	 DWORD PTR [rcx+500], eax
  00956	eb 5a		 jmp	 SHORT $LN30@PxSocket_I@2
$LN31@PxSocket_I@2:
  00958	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR o$131684[rsp]
  00960	e8 00 00 00 00	 call	 PyLong_AsLong
  00965	89 84 24 b8 00
	00 00		 mov	 DWORD PTR i$131683[rsp], eax
  0096c	e8 00 00 00 00	 call	 PyErr_Occurred
  00971	48 85 c0	 test	 rax, rax
  00974	74 07		 je	 SHORT $LN29@PxSocket_I@2
  00976	33 c0		 xor	 eax, eax
  00978	e9 56 04 00 00	 jmp	 $LN129@PxSocket_I@2
$LN29@PxSocket_I@2:
  0097d	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00985	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  0098b	0f ba e8 15	 bts	 eax, 21
  0098f	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  00997	89 81 f4 01 00
	00		 mov	 DWORD PTR [rcx+500], eax
  0099d	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  009a5	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR i$131683[rsp]
  009ac	89 88 10 03 00
	00		 mov	 DWORD PTR [rax+784], ecx
$LN30@PxSocket_I@2:
  009b2	33 c0		 xor	 eax, eax
  009b4	85 c0		 test	 eax, eax
  009b6	0f 85 30 ff ff
	ff		 jne	 $LN34@PxSocket_I@2
$LN28@PxSocket_I@2:

; 7935 :     _PxSocket_RESOLVE_INT(max_sync_recv_attempts);

  009bc	c7 84 24 c8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR i$131693[rsp], 0
  009c7	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_max_sync_recv_attempts
  009cc	8b c0		 mov	 eax, eax
  009ce	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  009d4	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  009dd	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  009e1	48 8b d0	 mov	 rdx, rax
  009e4	48 8b 4c 24 20	 mov	 rcx, QWORD PTR p$[rsp]
  009e9	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  009ee	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR o$131694[rsp], rax
  009f6	48 83 bc 24 d0
	00 00 00 00	 cmp	 QWORD PTR o$131694[rsp], 0
  009ff	75 27		 jne	 SHORT $LN25@PxSocket_I@2
  00a01	e8 00 00 00 00	 call	 PyErr_Clear
  00a06	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00a0e	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  00a14	0f ba f0 1d	 btr	 eax, 29
  00a18	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  00a20	89 81 f4 01 00
	00		 mov	 DWORD PTR [rcx+500], eax
  00a26	eb 5a		 jmp	 SHORT $LN24@PxSocket_I@2
$LN25@PxSocket_I@2:
  00a28	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR o$131694[rsp]
  00a30	e8 00 00 00 00	 call	 PyLong_AsLong
  00a35	89 84 24 c8 00
	00 00		 mov	 DWORD PTR i$131693[rsp], eax
  00a3c	e8 00 00 00 00	 call	 PyErr_Occurred
  00a41	48 85 c0	 test	 rax, rax
  00a44	74 07		 je	 SHORT $LN23@PxSocket_I@2
  00a46	33 c0		 xor	 eax, eax
  00a48	e9 86 03 00 00	 jmp	 $LN129@PxSocket_I@2
$LN23@PxSocket_I@2:
  00a4d	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00a55	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  00a5b	0f ba e8 1d	 bts	 eax, 29
  00a5f	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  00a67	89 81 f4 01 00
	00		 mov	 DWORD PTR [rcx+500], eax
  00a6d	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00a75	8b 8c 24 c8 00
	00 00		 mov	 ecx, DWORD PTR i$131693[rsp]
  00a7c	89 88 14 03 00
	00		 mov	 DWORD PTR [rax+788], ecx
$LN24@PxSocket_I@2:
  00a82	33 c0		 xor	 eax, eax
  00a84	85 c0		 test	 eax, eax
  00a86	0f 85 30 ff ff
	ff		 jne	 $LN28@PxSocket_I@2

; 7936 : 
; 7937 :     assert(!PyErr_Occurred());

  00a8c	e8 00 00 00 00	 call	 PyErr_Occurred
  00a91	48 85 c0	 test	 rax, rax
  00a94	74 1c		 je	 SHORT $LN134@PxSocket_I@2
  00a96	41 b8 01 1f 00
	00		 mov	 r8d, 7937		; 00001f01H
  00a9c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00aa3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CE@JKFGJBND@?$AA?$CB?$AAP?$AAy?$AAE?$AAr?$AAr?$AA_?$AAO?$AAc?$AAc?$AAu?$AAr?$AAr?$AAe?$AAd?$AA?$CI?$AA?$CJ?$AA?$AA@
  00aaa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00ab0	33 c0		 xor	 eax, eax
$LN134@PxSocket_I@2:

; 7938 : 
; 7939 :     if (s->data_received || s->lines_received)

  00ab2	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00aba	48 83 b8 c8 02
	00 00 00	 cmp	 QWORD PTR [rax+712], 0
  00ac2	75 12		 jne	 SHORT $LN21@PxSocket_I@2
  00ac4	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00acc	48 83 b8 d0 02
	00 00 00	 cmp	 QWORD PTR [rax+720], 0
  00ad4	74 20		 je	 SHORT $LN22@PxSocket_I@2
$LN21@PxSocket_I@2:

; 7940 :         Px_SOCKFLAGS(s) |= Px_SOCKFLAGS_CAN_RECV;

  00ad6	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00ade	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  00ae4	0f ba e8 10	 bts	 eax, 16
  00ae8	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  00af0	89 81 f4 01 00
	00		 mov	 DWORD PTR [rcx+500], eax
$LN22@PxSocket_I@2:

; 7941 : 
; 7942 :     if (s->lines_mode && !s->lines_received) {

  00af6	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00afe	48 83 b8 98 02
	00 00 00	 cmp	 QWORD PTR [rax+664], 0
  00b06	74 2c		 je	 SHORT $LN20@PxSocket_I@2
  00b08	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00b10	48 83 b8 d0 02
	00 00 00	 cmp	 QWORD PTR [rax+720], 0
  00b18	75 1a		 jne	 SHORT $LN20@PxSocket_I@2

; 7943 :         PyErr_SetString(PyExc_ValueError,
; 7944 :                         "protocol has 'lines_mode' set to True but no "
; 7945 :                         "'lines_received' callback");

  00b1a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0EH@DNPEGIAK@protocol?5has?5?8lines_mode?8?5set?5to@
  00b21	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00b28	e8 00 00 00 00	 call	 PyErr_SetString

; 7946 :         return 0;

  00b2d	33 c0		 xor	 eax, eax
  00b2f	e9 9f 02 00 00	 jmp	 $LN129@PxSocket_I@2
$LN20@PxSocket_I@2:

; 7947 :     }
; 7948 : 
; 7949 :     if (s->lines_received && !s->lines_mode) {

  00b34	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00b3c	48 83 b8 d0 02
	00 00 00	 cmp	 QWORD PTR [rax+720], 0
  00b44	74 2c		 je	 SHORT $LN19@PxSocket_I@2
  00b46	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00b4e	48 83 b8 98 02
	00 00 00	 cmp	 QWORD PTR [rax+664], 0
  00b56	75 1a		 jne	 SHORT $LN19@PxSocket_I@2

; 7950 :         PyErr_SetString(PyExc_ValueError,
; 7951 :                         "protocol has 'lines_received' callback but "
; 7952 :                         "no 'lines_mode' attribute");

  00b58	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0EF@PBJFMCHI@protocol?5has?5?8lines_received?8?5ca@
  00b5f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00b66	e8 00 00 00 00	 call	 PyErr_SetString

; 7953 :         return 0;

  00b6b	33 c0		 xor	 eax, eax
  00b6d	e9 61 02 00 00	 jmp	 $LN129@PxSocket_I@2
$LN19@PxSocket_I@2:

; 7954 :     }
; 7955 : 
; 7956 :     assert(!PyErr_Occurred());

  00b72	e8 00 00 00 00	 call	 PyErr_Occurred
  00b77	48 85 c0	 test	 rax, rax
  00b7a	74 1c		 je	 SHORT $LN135@PxSocket_I@2
  00b7c	41 b8 14 1f 00
	00		 mov	 r8d, 7956		; 00001f14H
  00b82	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00b89	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CE@JKFGJBND@?$AA?$CB?$AAP?$AAy?$AAE?$AAr?$AAr?$AA_?$AAO?$AAc?$AAc?$AAu?$AAr?$AAr?$AAe?$AAd?$AA?$CI?$AA?$CJ?$AA?$AA@
  00b90	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00b96	33 c0		 xor	 eax, eax
$LN135@PxSocket_I@2:

; 7957 : 
; 7958 :     if (s->lines_mode && PyObject_IsTrue(s->lines_mode))

  00b98	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00ba0	48 83 b8 98 02
	00 00 00	 cmp	 QWORD PTR [rax+664], 0
  00ba8	74 3a		 je	 SHORT $LN18@PxSocket_I@2
  00baa	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00bb2	48 8b 88 98 02
	00 00		 mov	 rcx, QWORD PTR [rax+664]
  00bb9	e8 00 00 00 00	 call	 PyObject_IsTrue
  00bbe	85 c0		 test	 eax, eax
  00bc0	74 22		 je	 SHORT $LN18@PxSocket_I@2

; 7959 :         Px_SOCKFLAGS(s) |= Px_SOCKFLAGS_LINES_MODE_ACTIVE;

  00bc2	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00bca	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  00bd0	0f ba e8 0e	 bts	 eax, 14
  00bd4	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  00bdc	89 81 f4 01 00
	00		 mov	 DWORD PTR [rcx+500], eax

; 7960 :     else

  00be2	eb 20		 jmp	 SHORT $LN17@PxSocket_I@2
$LN18@PxSocket_I@2:

; 7961 :         Px_SOCKFLAGS(s) &= ~Px_SOCKFLAGS_LINES_MODE_ACTIVE;

  00be4	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00bec	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  00bf2	0f ba f0 0e	 btr	 eax, 14
  00bf6	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  00bfe	89 81 f4 01 00
	00		 mov	 DWORD PTR [rcx+500], eax
$LN17@PxSocket_I@2:

; 7962 : 
; 7963 :     if (PyErr_Occurred())

  00c04	e8 00 00 00 00	 call	 PyErr_Occurred
  00c09	48 85 c0	 test	 rax, rax
  00c0c	74 07		 je	 SHORT $LN16@PxSocket_I@2

; 7964 :         return 0;

  00c0e	33 c0		 xor	 eax, eax
  00c10	e9 be 01 00 00	 jmp	 $LN129@PxSocket_I@2
$LN16@PxSocket_I@2:

; 7965 : 
; 7966 :     if (PxSocket_CONCURRENCY(s) && PxSocket_THROUGHPUT(s)) {

  00c15	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00c1d	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  00c23	25 00 08 00 00	 and	 eax, 2048		; 00000800H
  00c28	85 c0		 test	 eax, eax
  00c2a	74 2f		 je	 SHORT $LN15@PxSocket_I@2
  00c2c	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00c34	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  00c3a	83 e0 40	 and	 eax, 64			; 00000040H
  00c3d	85 c0		 test	 eax, eax
  00c3f	74 1a		 je	 SHORT $LN15@PxSocket_I@2

; 7967 :         PyErr_SetString(PyExc_ValueError,
; 7968 :                         "protocol has both 'concurrency' and "
; 7969 :                         "'throughput' set to True; only one or "
; 7970 :                         "the other is permitted");

  00c41	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0GB@KLCBDLBD@protocol?5has?5both?5?8concurrency?8?5@
  00c48	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00c4f	e8 00 00 00 00	 call	 PyErr_SetString

; 7971 :         return 0;

  00c54	33 c0		 xor	 eax, eax
  00c56	e9 78 01 00 00	 jmp	 $LN129@PxSocket_I@2
$LN15@PxSocket_I@2:

; 7972 :     }
; 7973 : 
; 7974 :     if (!PxSocket_THROUGHPUT(s)) {

  00c5b	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00c63	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  00c69	83 e0 40	 and	 eax, 64			; 00000040H
  00c6c	85 c0		 test	 eax, eax
  00c6e	75 67		 jne	 SHORT $LN14@PxSocket_I@2

; 7975 :         if (PxSocket_MAX_SYNC_SEND_ATTEMPTS(s)) {

  00c70	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00c78	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  00c7e	25 00 00 20 00	 and	 eax, 2097152		; 00200000H
  00c83	85 c0		 test	 eax, eax
  00c85	74 1a		 je	 SHORT $LN13@PxSocket_I@2

; 7976 :             PyErr_SetString(PyExc_ValueError,
; 7977 :                             "protocol has 'max_sync_send_attempts' "
; 7978 :                             "set without 'throughput' set to True");

  00c87	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0EL@LNLIGLMC@protocol?5has?5?8max_sync_send_atte@
  00c8e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00c95	e8 00 00 00 00	 call	 PyErr_SetString

; 7979 :             return 0;

  00c9a	33 c0		 xor	 eax, eax
  00c9c	e9 32 01 00 00	 jmp	 $LN129@PxSocket_I@2
$LN13@PxSocket_I@2:

; 7980 :         }
; 7981 :         if (PxSocket_MAX_SYNC_RECV_ATTEMPTS(s)) {

  00ca1	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00ca9	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  00caf	25 00 00 00 20	 and	 eax, 536870912		; 20000000H
  00cb4	85 c0		 test	 eax, eax
  00cb6	74 1a		 je	 SHORT $LN12@PxSocket_I@2

; 7982 :             PyErr_SetString(PyExc_ValueError,
; 7983 :                             "protocol has 'max_sync_recv_attempts' "
; 7984 :                             "set without 'throughput' set to True");

  00cb8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0EL@IKMCLNCN@protocol?5has?5?8max_sync_recv_atte@
  00cbf	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00cc6	e8 00 00 00 00	 call	 PyErr_SetString

; 7985 :             return 0;

  00ccb	33 c0		 xor	 eax, eax
  00ccd	e9 01 01 00 00	 jmp	 $LN129@PxSocket_I@2
$LN12@PxSocket_I@2:

; 7986 :         }
; 7987 :     } else {

  00cd2	e9 f7 00 00 00	 jmp	 $LN11@PxSocket_I@2
$LN14@PxSocket_I@2:

; 7988 :         if (!PxSocket_MAX_SYNC_SEND_ATTEMPTS(s))

  00cd7	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00cdf	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  00ce5	25 00 00 20 00	 and	 eax, 2097152		; 00200000H
  00cea	85 c0		 test	 eax, eax
  00cec	75 16		 jne	 SHORT $LN10@PxSocket_I@2

; 7989 :             s->max_sync_send_attempts = _PxSocket_MaxSyncSendAttempts;

  00cee	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00cf6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _PxSocket_MaxSyncSendAttempts
  00cfc	89 88 10 03 00
	00		 mov	 DWORD PTR [rax+784], ecx

; 7990 :         else {

  00d02	eb 50		 jmp	 SHORT $LN9@PxSocket_I@2
$LN10@PxSocket_I@2:

; 7991 :             if (s->max_sync_send_attempts < 0) {

  00d04	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00d0c	83 b8 10 03 00
	00 00		 cmp	 DWORD PTR [rax+784], 0
  00d13	7d 1c		 jge	 SHORT $LN8@PxSocket_I@2

; 7992 :                 PyErr_SetString(PyExc_ValueError,
; 7993 :                                 "protocol has 'max_sync_send_attempts' "
; 7994 :                                 "set to a value less than 0");

  00d15	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0EB@CBPJEOJO@protocol?5has?5?8max_sync_send_atte@
  00d1c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00d23	e8 00 00 00 00	 call	 PyErr_SetString

; 7995 :                 return 0;

  00d28	33 c0		 xor	 eax, eax
  00d2a	e9 a4 00 00 00	 jmp	 $LN129@PxSocket_I@2
  00d2f	eb 23		 jmp	 SHORT $LN7@PxSocket_I@2
$LN8@PxSocket_I@2:

; 7996 :             } else if (s->max_sync_send_attempts == 0)

  00d31	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00d39	83 b8 10 03 00
	00 00		 cmp	 DWORD PTR [rax+784], 0
  00d40	75 12		 jne	 SHORT $LN6@PxSocket_I@2

; 7997 :                 s->max_sync_send_attempts = INT_MAX;

  00d42	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00d4a	c7 80 10 03 00
	00 ff ff ff 7f	 mov	 DWORD PTR [rax+784], 2147483647 ; 7fffffffH
$LN6@PxSocket_I@2:
$LN7@PxSocket_I@2:
$LN9@PxSocket_I@2:

; 7998 :         }
; 7999 : 
; 8000 :         if (!PxSocket_MAX_SYNC_RECV_ATTEMPTS(s))

  00d54	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00d5c	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  00d62	25 00 00 00 20	 and	 eax, 536870912		; 20000000H
  00d67	85 c0		 test	 eax, eax
  00d69	75 16		 jne	 SHORT $LN5@PxSocket_I@2

; 8001 :             s->max_sync_recv_attempts = _PxSocket_MaxSyncSendAttempts;

  00d6b	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00d73	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _PxSocket_MaxSyncSendAttempts
  00d79	89 88 14 03 00
	00		 mov	 DWORD PTR [rax+788], ecx

; 8002 :         else {

  00d7f	eb 4d		 jmp	 SHORT $LN4@PxSocket_I@2
$LN5@PxSocket_I@2:

; 8003 :             if (s->max_sync_recv_attempts < 0) {

  00d81	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00d89	83 b8 14 03 00
	00 00		 cmp	 DWORD PTR [rax+788], 0
  00d90	7d 19		 jge	 SHORT $LN3@PxSocket_I@2

; 8004 :                 PyErr_SetString(PyExc_ValueError,
; 8005 :                                 "protocol has 'max_sync_recv_attempts' "
; 8006 :                                 "set to a value less than 0");

  00d92	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0EB@CLNCCCFD@protocol?5has?5?8max_sync_recv_atte@
  00d99	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00da0	e8 00 00 00 00	 call	 PyErr_SetString

; 8007 :                 return 0;

  00da5	33 c0		 xor	 eax, eax
  00da7	eb 2a		 jmp	 SHORT $LN129@PxSocket_I@2
  00da9	eb 23		 jmp	 SHORT $LN2@PxSocket_I@2
$LN3@PxSocket_I@2:

; 8008 :             } else if (s->max_sync_recv_attempts == 0)

  00dab	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00db3	83 b8 14 03 00
	00 00		 cmp	 DWORD PTR [rax+788], 0
  00dba	75 12		 jne	 SHORT $LN1@PxSocket_I@2

; 8009 :                 s->max_sync_recv_attempts = INT_MAX;

  00dbc	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00dc4	c7 80 14 03 00
	00 ff ff ff 7f	 mov	 DWORD PTR [rax+788], 2147483647 ; 7fffffffH
$LN1@PxSocket_I@2:
$LN2@PxSocket_I@2:
$LN4@PxSocket_I@2:
$LN11@PxSocket_I@2:

; 8010 :         }
; 8011 :     }
; 8012 : 
; 8013 :     return 1;

  00dce	b8 01 00 00 00	 mov	 eax, 1
$LN129@PxSocket_I@2:

; 8014 : }

  00dd3	48 81 c4 e8 00
	00 00		 add	 rsp, 232		; 000000e8H
  00dda	c3		 ret	 0
PxSocket_InitProtocol ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BJ@DDIBEHJJ@protocol?5must?5be?5a?5class?$AA@ ; `string'
PUBLIC	??_C@_0BH@LCKBJMJF@missing?5protocol?5value?$AA@ ; `string'
PUBLIC	PxSocket_SetProtocolType
EXTRN	PyType_Type:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$PxSocket_SetProtocolType DD imagerel $LN5
	DD	imagerel $LN5+118
	DD	imagerel $unwind$PxSocket_SetProtocolType
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PxSocket_SetProtocolType DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT ??_C@_0BJ@DDIBEHJJ@protocol?5must?5be?5a?5class?$AA@
CONST	SEGMENT
??_C@_0BJ@DDIBEHJJ@protocol?5must?5be?5a?5class?$AA@ DB 'protocol must be'
	DB	' a class', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@LCKBJMJF@missing?5protocol?5value?$AA@
CONST	SEGMENT
??_C@_0BH@LCKBJMJF@missing?5protocol?5value?$AA@ DB 'missing protocol val'
	DB	'ue', 00H					; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PxSocket_SetProtocolType
_TEXT	SEGMENT
s$ = 48
protocol_type$ = 56
PxSocket_SetProtocolType PROC				; COMDAT

; 8020 : {

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 8021 :     if (!protocol_type) {

  0000e	48 83 7c 24 38
	00		 cmp	 QWORD PTR protocol_type$[rsp], 0
  00014	75 17		 jne	 SHORT $LN2@PxSocket_S

; 8022 :         PyErr_SetString(PyExc_ValueError, "missing protocol value");

  00016	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@LCKBJMJF@missing?5protocol?5value?$AA@
  0001d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00024	e8 00 00 00 00	 call	 PyErr_SetString

; 8023 :         return 0;

  00029	33 c0		 xor	 eax, eax
  0002b	eb 44		 jmp	 SHORT $LN3@PxSocket_S
$LN2@PxSocket_S:

; 8024 :     }
; 8025 : 
; 8026 :     if (!PyType_CheckExact(protocol_type)) {

  0002d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyType_Type
  00034	48 8b 4c 24 38	 mov	 rcx, QWORD PTR protocol_type$[rsp]
  00039	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0003d	74 17		 je	 SHORT $LN1@PxSocket_S

; 8027 :         PyErr_SetString(PyExc_ValueError, "protocol must be a class");

  0003f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@DDIBEHJJ@protocol?5must?5be?5a?5class?$AA@
  00046	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0004d	e8 00 00 00 00	 call	 PyErr_SetString

; 8028 :         return 0;

  00052	33 c0		 xor	 eax, eax
  00054	eb 1b		 jmp	 SHORT $LN3@PxSocket_S
$LN1@PxSocket_S:

; 8029 :     }
; 8030 : 
; 8031 :     s->protocol_type = protocol_type;

  00056	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  0005b	48 8b 4c 24 38	 mov	 rcx, QWORD PTR protocol_type$[rsp]
  00060	48 89 88 88 02
	00 00		 mov	 QWORD PTR [rax+648], rcx

; 8032 :     return PxSocket_InitProtocol(s);

  00067	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s$[rsp]
  0006c	e8 00 00 00 00	 call	 PxSocket_InitProtocol
$LN3@PxSocket_S:

; 8033 : }

  00071	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00075	c3		 ret	 0
PxSocket_SetProtocolType ENDP
_TEXT	ENDS
PUBLIC	??_C@_1CK@HCAJDNML@?$AAs?$AA?9?$AA?$DO?$AAi?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AA_?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?4?$AAb?$AAu?$AAf?$AA?$AA@ ; `string'
PUBLIC	??_C@_0EN@GHDIEIIK@initial_bytes_to_send?5is?5not?5a?5s@ ; `string'
PUBLIC	??_C@_1CM@HKDKFEMJ@?$AA?$CB?$AAs?$AA?9?$AA?$DO?$AAi?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AA_?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?4?$AAb?$AAu?$AAf?$AA?$AA@ ; `string'
PUBLIC	??_C@_0GA@GAKKBHFN@initial_bytes_to_send?$CI?$CJ?5callable@ ; `string'
PUBLIC	??_C@_0FF@FDKJMONG@initial_bytes_to_send?5must?5be?5on@ ; `string'
PUBLIC	??_C@_13DKOGBHCI@?$AAt?$AA?$AA@			; `string'
PUBLIC	PxSocket_InitInitialBytes
;	COMDAT pdata
pdata	SEGMENT
$pdata$PxSocket_InitInitialBytes DD imagerel $LN22
	DD	imagerel $LN22+913
	DD	imagerel $unwind$PxSocket_InitInitialBytes
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PxSocket_InitInitialBytes DD 010901H
	DD	0e209H
xdata	ENDS
;	COMDAT ??_C@_1CK@HCAJDNML@?$AAs?$AA?9?$AA?$DO?$AAi?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AA_?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?4?$AAb?$AAu?$AAf?$AA?$AA@
CONST	SEGMENT
??_C@_1CK@HCAJDNML@?$AAs?$AA?9?$AA?$DO?$AAi?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AA_?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?4?$AAb?$AAu?$AAf?$AA?$AA@ DB 's'
	DB	00H, '-', 00H, '>', 00H, 'i', 00H, 'n', 00H, 'i', 00H, 't', 00H
	DB	'i', 00H, 'a', 00H, 'l', 00H, '_', 00H, 'b', 00H, 'y', 00H, 't'
	DB	00H, 'e', 00H, 's', 00H, '.', 00H, 'b', 00H, 'u', 00H, 'f', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EN@GHDIEIIK@initial_bytes_to_send?5is?5not?5a?5s@
CONST	SEGMENT
??_C@_0EN@GHDIEIIK@initial_bytes_to_send?5is?5not?5a?5s@ DB 'initial_byte'
	DB	's_to_send is not a sendable object (bytes, bytearray or unico'
	DB	'de)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1CM@HKDKFEMJ@?$AA?$CB?$AAs?$AA?9?$AA?$DO?$AAi?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AA_?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?4?$AAb?$AAu?$AAf?$AA?$AA@
CONST	SEGMENT
??_C@_1CM@HKDKFEMJ@?$AA?$CB?$AAs?$AA?9?$AA?$DO?$AAi?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AA_?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?4?$AAb?$AAu?$AAf?$AA?$AA@ DB '!'
	DB	00H, 's', 00H, '-', 00H, '>', 00H, 'i', 00H, 'n', 00H, 'i', 00H
	DB	't', 00H, 'i', 00H, 'a', 00H, 'l', 00H, '_', 00H, 'b', 00H, 'y'
	DB	00H, 't', 00H, 'e', 00H, 's', 00H, '.', 00H, 'b', 00H, 'u', 00H
	DB	'f', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0GA@GAKKBHFN@initial_bytes_to_send?$CI?$CJ?5callable@
CONST	SEGMENT
??_C@_0GA@GAKKBHFN@initial_bytes_to_send?$CI?$CJ?5callable@ DB 'initial_b'
	DB	'ytes_to_send() callable did not return a sendable object (byt'
	DB	'es, bytearray or unicode)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0FF@FDKJMONG@initial_bytes_to_send?5must?5be?5on@
CONST	SEGMENT
??_C@_0FF@FDKJMONG@initial_bytes_to_send?5must?5be?5on@ DB 'initial_bytes'
	DB	'_to_send must be one of the following types: bytes, unicode o'
	DB	'r callable', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_13DKOGBHCI@?$AAt?$AA?$AA@
CONST	SEGMENT
??_C@_13DKOGBHCI@?$AAt?$AA?$AA@ DB 't', 00H, 00H, 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PxSocket_InitInitialBytes
_TEXT	SEGMENT
is_static$ = 32
snapshot$ = 40
c$ = 48
t$ = 56
o$ = 64
w$131782 = 72
error$131784 = 88
r$131783 = 96
tv95 = 104
s$ = 128
PxSocket_InitInitialBytes PROC				; COMDAT

; 8042 : {

$LN22:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 8043 :     Context *c = s->ctx;

  00009	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00011	48 8b 80 00 02
	00 00		 mov	 rax, QWORD PTR [rax+512]
  00018	48 89 44 24 30	 mov	 QWORD PTR c$[rsp], rax

; 8044 :     PyObject *o, *t = s->protocol;

  0001d	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00025	48 8b 80 90 02
	00 00		 mov	 rax, QWORD PTR [rax+656]
  0002c	48 89 44 24 38	 mov	 QWORD PTR t$[rsp], rax

; 8045 :     int is_static = 0;

  00031	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR is_static$[rsp], 0

; 8046 :     Heap *snapshot = NULL;

  00039	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR snapshot$[rsp], 0

; 8047 : 
; 8048 :     assert(t);

  00042	48 83 7c 24 38
	00		 cmp	 QWORD PTR t$[rsp], 0
  00048	75 1c		 jne	 SHORT $LN16@PxSocket_I@3
  0004a	41 b8 70 1f 00
	00		 mov	 r8d, 8048		; 00001f70H
  00050	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00057	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_13DKOGBHCI@?$AAt?$AA?$AA@
  0005e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00064	33 c0		 xor	 eax, eax
$LN16@PxSocket_I@3:

; 8049 :     assert(!PyErr_Occurred());

  00066	e8 00 00 00 00	 call	 PyErr_Occurred
  0006b	48 85 c0	 test	 rax, rax
  0006e	74 1c		 je	 SHORT $LN17@PxSocket_I@3
  00070	41 b8 71 1f 00
	00		 mov	 r8d, 8049		; 00001f71H
  00076	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0007d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CE@JKFGJBND@?$AA?$CB?$AAP?$AAy?$AAE?$AAr?$AAr?$AA_?$AAO?$AAc?$AAc?$AAu?$AAr?$AAr?$AAe?$AAd?$AA?$CI?$AA?$CJ?$AA?$AA@
  00084	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0008a	33 c0		 xor	 eax, eax
$LN17@PxSocket_I@3:

; 8050 : 
; 8051 :     o = s->initial_bytes_to_send;

  0008c	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00094	48 8b 80 f0 02
	00 00		 mov	 rax, QWORD PTR [rax+752]
  0009b	48 89 44 24 40	 mov	 QWORD PTR o$[rsp], rax

; 8052 : 
; 8053 :     if (!o || o == Py_None)

  000a0	48 83 7c 24 40
	00		 cmp	 QWORD PTR o$[rsp], 0
  000a6	74 0e		 je	 SHORT $LN12@PxSocket_I@3
  000a8	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000af	48 39 44 24 40	 cmp	 QWORD PTR o$[rsp], rax
  000b4	75 0a		 jne	 SHORT $LN13@PxSocket_I@3
$LN12@PxSocket_I@3:

; 8054 :         return 1;

  000b6	b8 01 00 00 00	 mov	 eax, 1
  000bb	e9 cc 02 00 00	 jmp	 $LN14@PxSocket_I@3
$LN13@PxSocket_I@3:

; 8055 : 
; 8056 :     is_static = (
; 8057 :         PyBytes_Check(o)        ||
; 8058 :         PyByteArray_Check(o)    ||
; 8059 :         PyUnicode_Check(o)
; 8060 :     );

  000c0	48 8b 44 24 40	 mov	 rax, QWORD PTR o$[rsp]
  000c5	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000c9	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000cf	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  000d4	85 c0		 test	 eax, eax
  000d6	75 4d		 jne	 SHORT $LN18@PxSocket_I@3
  000d8	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyByteArray_Type
  000df	48 8b 4c 24 40	 mov	 rcx, QWORD PTR o$[rsp]
  000e4	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  000e8	74 3b		 je	 SHORT $LN18@PxSocket_I@3
  000ea	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyByteArray_Type
  000f1	48 8b 44 24 40	 mov	 rax, QWORD PTR o$[rsp]
  000f6	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  000fa	e8 00 00 00 00	 call	 PyType_IsSubtype
  000ff	85 c0		 test	 eax, eax
  00101	75 22		 jne	 SHORT $LN18@PxSocket_I@3
  00103	48 8b 44 24 40	 mov	 rax, QWORD PTR o$[rsp]
  00108	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0010c	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00112	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00117	85 c0		 test	 eax, eax
  00119	75 0a		 jne	 SHORT $LN18@PxSocket_I@3
  0011b	c7 44 24 68 00
	00 00 00	 mov	 DWORD PTR tv95[rsp], 0
  00123	eb 08		 jmp	 SHORT $LN19@PxSocket_I@3
$LN18@PxSocket_I@3:
  00125	c7 44 24 68 01
	00 00 00	 mov	 DWORD PTR tv95[rsp], 1
$LN19@PxSocket_I@3:
  0012d	8b 44 24 68	 mov	 eax, DWORD PTR tv95[rsp]
  00131	89 44 24 20	 mov	 DWORD PTR is_static$[rsp], eax

; 8061 : 
; 8062 :     if (is_static)

  00135	83 7c 24 20 00	 cmp	 DWORD PTR is_static$[rsp], 0
  0013a	74 22		 je	 SHORT $LN11@PxSocket_I@3

; 8063 :         Px_SOCKFLAGS(s) &= ~Px_SOCKFLAGS_INITIAL_BYTES_CALLABLE;

  0013c	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00144	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  0014a	0f ba f0 0a	 btr	 eax, 10
  0014e	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  00156	89 81 f4 01 00
	00		 mov	 DWORD PTR [rcx+500], eax
  0015c	eb 4a		 jmp	 SHORT $LN10@PxSocket_I@3
$LN11@PxSocket_I@3:

; 8064 :     else if (PyCallable_Check(o))

  0015e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR o$[rsp]
  00163	e8 00 00 00 00	 call	 PyCallable_Check
  00168	85 c0		 test	 eax, eax
  0016a	74 22		 je	 SHORT $LN9@PxSocket_I@3

; 8065 :         Px_SOCKFLAGS(s) |= Px_SOCKFLAGS_INITIAL_BYTES_CALLABLE;

  0016c	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00174	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  0017a	0f ba e8 0a	 bts	 eax, 10
  0017e	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  00186	89 81 f4 01 00
	00		 mov	 DWORD PTR [rcx+500], eax

; 8066 :     else {

  0018c	eb 1a		 jmp	 SHORT $LN8@PxSocket_I@3
$LN9@PxSocket_I@3:

; 8067 :         PyErr_SetString(PyExc_ValueError, INVALID_INITIAL_BYTES);

  0018e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0FF@FDKJMONG@initial_bytes_to_send?5must?5be?5on@
  00195	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0019c	e8 00 00 00 00	 call	 PyErr_SetString

; 8068 :         return 0;

  001a1	33 c0		 xor	 eax, eax
  001a3	e9 e4 01 00 00	 jmp	 $LN14@PxSocket_I@3
$LN8@PxSocket_I@3:
$LN10@PxSocket_I@3:

; 8069 :     }
; 8070 : 
; 8071 :     snapshot = PxContext_HeapSnapshot(c, NULL);

  001a8	33 d2		 xor	 edx, edx
  001aa	48 8b 4c 24 30	 mov	 rcx, QWORD PTR c$[rsp]
  001af	e8 00 00 00 00	 call	 PxContext_HeapSnapshot
  001b4	48 89 44 24 28	 mov	 QWORD PTR snapshot$[rsp], rax

; 8072 : 
; 8073 :     if (Px_SOCKFLAGS(s) & Px_SOCKFLAGS_INITIAL_BYTES_CALLABLE) {

  001b9	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  001c1	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  001c7	25 00 04 00 00	 and	 eax, 1024		; 00000400H
  001cc	85 c0		 test	 eax, eax
  001ce	0f 84 8c 00 00
	00		 je	 $LN7@PxSocket_I@3

; 8074 :         WSABUF w;
; 8075 :         PyObject *r;
; 8076 :         int error = 0;

  001d4	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR error$131784[rsp], 0

; 8077 :         r = PyObject_CallObject(o, NULL);

  001dc	33 d2		 xor	 edx, edx
  001de	48 8b 4c 24 40	 mov	 rcx, QWORD PTR o$[rsp]
  001e3	e8 00 00 00 00	 call	 PyObject_CallObject
  001e8	48 89 44 24 60	 mov	 QWORD PTR r$131783[rsp], rax

; 8078 :         if (!r) {

  001ed	48 83 7c 24 60
	00		 cmp	 QWORD PTR r$131783[rsp], 0
  001f3	75 16		 jne	 SHORT $LN6@PxSocket_I@3

; 8079 :             PxContext_RollbackHeap(c, &snapshot);

  001f5	48 8d 54 24 28	 lea	 rdx, QWORD PTR snapshot$[rsp]
  001fa	48 8b 4c 24 30	 mov	 rcx, QWORD PTR c$[rsp]
  001ff	e8 00 00 00 00	 call	 PxContext_RollbackHeap

; 8080 :             return 0;

  00204	33 c0		 xor	 eax, eax
  00206	e9 81 01 00 00	 jmp	 $LN14@PxSocket_I@3
$LN6@PxSocket_I@3:

; 8081 :         }
; 8082 :         if (!PyObject2WSABUF(r, &w)) {

  0020b	48 8d 54 24 48	 lea	 rdx, QWORD PTR w$131782[rsp]
  00210	48 8b 4c 24 60	 mov	 rcx, QWORD PTR r$131783[rsp]
  00215	e8 00 00 00 00	 call	 PyObject2WSABUF
  0021a	85 c0		 test	 eax, eax
  0021c	75 29		 jne	 SHORT $LN5@PxSocket_I@3

; 8083 :             PxContext_RollbackHeap(c, &snapshot);

  0021e	48 8d 54 24 28	 lea	 rdx, QWORD PTR snapshot$[rsp]
  00223	48 8b 4c 24 30	 mov	 rcx, QWORD PTR c$[rsp]
  00228	e8 00 00 00 00	 call	 PxContext_RollbackHeap

; 8084 :             PyErr_SetString(PyExc_ValueError,
; 8085 :                             "initial_bytes_to_send() callable did not return "
; 8086 :                             "a sendable object (bytes, bytearray or unicode)");

  0022d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0GA@GAKKBHFN@initial_bytes_to_send?$CI?$CJ?5callable@
  00234	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0023b	e8 00 00 00 00	 call	 PyErr_SetString

; 8087 :             return 0;

  00240	33 c0		 xor	 eax, eax
  00242	e9 45 01 00 00	 jmp	 $LN14@PxSocket_I@3
$LN5@PxSocket_I@3:

; 8088 :         }
; 8089 :         s->initial_bytes_callable = o;

  00247	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  0024f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR o$[rsp]
  00254	48 89 88 f8 02
	00 00		 mov	 QWORD PTR [rax+760], rcx

; 8090 :     } else {

  0025b	e9 18 01 00 00	 jmp	 $LN4@PxSocket_I@3
$LN7@PxSocket_I@3:

; 8091 :         s->initial_bytes_callable = NULL;

  00260	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00268	48 c7 80 f8 02
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+760], 0

; 8092 :         if (!PxSocket_IS_SERVERCLIENT(s)) {

  00273	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  0027b	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  00281	25 80 00 00 00	 and	 eax, 128		; 00000080H
  00286	85 c0		 test	 eax, eax
  00288	75 78		 jne	 SHORT $LN3@PxSocket_I@3

; 8093 :             assert(!s->initial_bytes.buf);

  0028a	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00292	48 83 b8 08 03
	00 00 00	 cmp	 QWORD PTR [rax+776], 0
  0029a	74 1c		 je	 SHORT $LN20@PxSocket_I@3
  0029c	41 b8 9d 1f 00
	00		 mov	 r8d, 8093		; 00001f9dH
  002a2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  002a9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@HKDKFEMJ@?$AA?$CB?$AAs?$AA?9?$AA?$DO?$AAi?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AA_?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?4?$AAb?$AAu?$AAf?$AA?$AA@
  002b0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  002b6	33 c0		 xor	 eax, eax
$LN20@PxSocket_I@3:

; 8094 : 
; 8095 :             if (!PyObject2WSABUF(o, &s->initial_bytes)) {

  002b8	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  002c0	48 05 00 03 00
	00		 add	 rax, 768		; 00000300H
  002c6	48 8b d0	 mov	 rdx, rax
  002c9	48 8b 4c 24 40	 mov	 rcx, QWORD PTR o$[rsp]
  002ce	e8 00 00 00 00	 call	 PyObject2WSABUF
  002d3	85 c0		 test	 eax, eax
  002d5	75 29		 jne	 SHORT $LN2@PxSocket_I@3

; 8096 :                 PxContext_RollbackHeap(c, &snapshot);

  002d7	48 8d 54 24 28	 lea	 rdx, QWORD PTR snapshot$[rsp]
  002dc	48 8b 4c 24 30	 mov	 rcx, QWORD PTR c$[rsp]
  002e1	e8 00 00 00 00	 call	 PxContext_RollbackHeap

; 8097 :                 PyErr_SetString(PyExc_ValueError,
; 8098 :                                 "initial_bytes_to_send is not a sendable "
; 8099 :                                 "object (bytes, bytearray or unicode)");

  002e6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0EN@GHDIEIIK@initial_bytes_to_send?5is?5not?5a?5s@
  002ed	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  002f4	e8 00 00 00 00	 call	 PyErr_SetString

; 8100 :                 return 0;

  002f9	33 c0		 xor	 eax, eax
  002fb	e9 8c 00 00 00	 jmp	 $LN14@PxSocket_I@3
$LN2@PxSocket_I@3:

; 8101 :             }
; 8102 : 
; 8103 :         } else {

  00300	eb 48		 jmp	 SHORT $LN1@PxSocket_I@3
$LN3@PxSocket_I@3:

; 8104 :             s->initial_bytes.len = s->parent->initial_bytes.len;

  00302	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  0030a	48 8b 80 30 04
	00 00		 mov	 rax, QWORD PTR [rax+1072]
  00311	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  00319	8b 80 00 03 00
	00		 mov	 eax, DWORD PTR [rax+768]
  0031f	89 81 00 03 00
	00		 mov	 DWORD PTR [rcx+768], eax

; 8105 :             s->initial_bytes.buf = s->parent->initial_bytes.buf;

  00325	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  0032d	48 8b 80 30 04
	00 00		 mov	 rax, QWORD PTR [rax+1072]
  00334	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  0033c	48 8b 80 08 03
	00 00		 mov	 rax, QWORD PTR [rax+776]
  00343	48 89 81 08 03
	00 00		 mov	 QWORD PTR [rcx+776], rax
$LN1@PxSocket_I@3:

; 8106 :         }
; 8107 : 
; 8108 :         assert(s->initial_bytes.buf);

  0034a	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00352	48 83 b8 08 03
	00 00 00	 cmp	 QWORD PTR [rax+776], 0
  0035a	75 1c		 jne	 SHORT $LN21@PxSocket_I@3
  0035c	41 b8 ac 1f 00
	00		 mov	 r8d, 8108		; 00001facH
  00362	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00369	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@HCAJDNML@?$AAs?$AA?9?$AA?$DO?$AAi?$AAn?$AAi?$AAt?$AAi?$AAa?$AAl?$AA_?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?4?$AAb?$AAu?$AAf?$AA?$AA@
  00370	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00376	33 c0		 xor	 eax, eax
$LN21@PxSocket_I@3:
$LN4@PxSocket_I@3:

; 8109 :     }
; 8110 : 
; 8111 :     PxContext_RollbackHeap(c, &snapshot);

  00378	48 8d 54 24 28	 lea	 rdx, QWORD PTR snapshot$[rsp]
  0037d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR c$[rsp]
  00382	e8 00 00 00 00	 call	 PxContext_RollbackHeap

; 8112 : 
; 8113 :     return 1;

  00387	b8 01 00 00 00	 mov	 eax, 1
$LN14@PxSocket_I@3:

; 8114 : }

  0038c	48 83 c4 78	 add	 rsp, 120		; 00000078H
  00390	c3		 ret	 0
PxSocket_InitInitialBytes ENDP
_TEXT	ENDS
PUBLIC	??_C@_1GM@NLGOLNDG@?$AAP?$AAx?$AA_?$AAS?$AAO?$AAC?$AAK?$AAF?$AAL?$AAA?$AAG?$AAS?$AA?$CI?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?5?$AAP?$AAx?$AA_?$AAS?$AAO?$AAC?$AAK?$AAF?$AAL?$AAA?$AAG?$AAS?$AA_?$AAI@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$PxSocket_LoadInitialBytes DD imagerel $LN7
	DD	imagerel $LN7+206
	DD	imagerel $unwind$PxSocket_LoadInitialBytes
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PxSocket_LoadInitialBytes DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_1GM@NLGOLNDG@?$AAP?$AAx?$AA_?$AAS?$AAO?$AAC?$AAK?$AAF?$AAL?$AAA?$AAG?$AAS?$AA?$CI?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?5?$AAP?$AAx?$AA_?$AAS?$AAO?$AAC?$AAK?$AAF?$AAL?$AAA?$AAG?$AAS?$AA_?$AAI@
CONST	SEGMENT
??_C@_1GM@NLGOLNDG@?$AAP?$AAx?$AA_?$AAS?$AAO?$AAC?$AAK?$AAF?$AAL?$AAA?$AAG?$AAS?$AA?$CI?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?5?$AAP?$AAx?$AA_?$AAS?$AAO?$AAC?$AAK?$AAF?$AAL?$AAA?$AAG?$AAS?$AA_?$AAI@ DB 'P'
	DB	00H, 'x', 00H, '_', 00H, 'S', 00H, 'O', 00H, 'C', 00H, 'K', 00H
	DB	'F', 00H, 'L', 00H, 'A', 00H, 'G', 00H, 'S', 00H, '(', 00H, 's'
	DB	00H, ')', 00H, ' ', 00H, '&', 00H, ' ', 00H, 'P', 00H, 'x', 00H
	DB	'_', 00H, 'S', 00H, 'O', 00H, 'C', 00H, 'K', 00H, 'F', 00H, 'L'
	DB	00H, 'A', 00H, 'G', 00H, 'S', 00H, '_', 00H, 'I', 00H, 'N', 00H
	DB	'I', 00H, 'T', 00H, 'I', 00H, 'A', 00H, 'L', 00H, '_', 00H, 'B'
	DB	00H, 'Y', 00H, 'T', 00H, 'E', 00H, 'S', 00H, '_', 00H, 'C', 00H
	DB	'A', 00H, 'L', 00H, 'L', 00H, 'A', 00H, 'B', 00H, 'L', 00H, 'E'
	DB	00H, 00H, 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PxSocket_LoadInitialBytes
_TEXT	SEGMENT
r$ = 32
c$ = 40
o$ = 48
s$ = 80
PxSocket_LoadInitialBytes PROC				; COMDAT

; 8120 : {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 8121 :     Context *c = s->ctx;

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0000e	48 8b 80 00 02
	00 00		 mov	 rax, QWORD PTR [rax+512]
  00015	48 89 44 24 28	 mov	 QWORD PTR c$[rsp], rax

; 8122 :     PyObject *o, *r;
; 8123 : 
; 8124 :     if (!s->initial_bytes_callable)

  0001a	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0001f	48 83 b8 f8 02
	00 00 00	 cmp	 QWORD PTR [rax+760], 0
  00027	75 0a		 jne	 SHORT $LN3@PxSocket_L

; 8125 :         return 1;

  00029	b8 01 00 00 00	 mov	 eax, 1
  0002e	e9 96 00 00 00	 jmp	 $LN4@PxSocket_L
$LN3@PxSocket_L:

; 8126 : 
; 8127 :     assert(Px_SOCKFLAGS(s) & Px_SOCKFLAGS_INITIAL_BYTES_CALLABLE);

  00033	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00038	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  0003e	25 00 04 00 00	 and	 eax, 1024		; 00000400H
  00043	85 c0		 test	 eax, eax
  00045	75 1c		 jne	 SHORT $LN6@PxSocket_L
  00047	41 b8 bf 1f 00
	00		 mov	 r8d, 8127		; 00001fbfH
  0004d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00054	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1GM@NLGOLNDG@?$AAP?$AAx?$AA_?$AAS?$AAO?$AAC?$AAK?$AAF?$AAL?$AAA?$AAG?$AAS?$AA?$CI?$AAs?$AA?$CJ?$AA?5?$AA?$CG?$AA?5?$AAP?$AAx?$AA_?$AAS?$AAO?$AAC?$AAK?$AAF?$AAL?$AAA?$AAG?$AAS?$AA_?$AAI@
  0005b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00061	33 c0		 xor	 eax, eax
$LN6@PxSocket_L:

; 8128 :     o = s->initial_bytes_callable;

  00063	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00068	48 8b 80 f8 02
	00 00		 mov	 rax, QWORD PTR [rax+760]
  0006f	48 89 44 24 30	 mov	 QWORD PTR o$[rsp], rax

; 8129 : 
; 8130 :     r = PyObject_CallObject(o, NULL);

  00074	33 d2		 xor	 edx, edx
  00076	48 8b 4c 24 30	 mov	 rcx, QWORD PTR o$[rsp]
  0007b	e8 00 00 00 00	 call	 PyObject_CallObject
  00080	48 89 44 24 20	 mov	 QWORD PTR r$[rsp], rax

; 8131 :     if (!r)

  00085	48 83 7c 24 20
	00		 cmp	 QWORD PTR r$[rsp], 0
  0008b	75 04		 jne	 SHORT $LN2@PxSocket_L

; 8132 :         return 0;

  0008d	33 c0		 xor	 eax, eax
  0008f	eb 38		 jmp	 SHORT $LN4@PxSocket_L
$LN2@PxSocket_L:

; 8133 : 
; 8134 :     if (!PyObject2WSABUF(r, &s->initial_bytes)) {

  00091	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00096	48 05 00 03 00
	00		 add	 rax, 768		; 00000300H
  0009c	48 8b d0	 mov	 rdx, rax
  0009f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR r$[rsp]
  000a4	e8 00 00 00 00	 call	 PyObject2WSABUF
  000a9	85 c0		 test	 eax, eax
  000ab	75 17		 jne	 SHORT $LN1@PxSocket_L

; 8135 :         PyErr_SetString(PyExc_ValueError,
; 8136 :                         "initial_bytes_to_send() callable did not return "
; 8137 :                         "a sendable object (bytes, bytearray or unicode)");

  000ad	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0GA@GAKKBHFN@initial_bytes_to_send?$CI?$CJ?5callable@
  000b4	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  000bb	e8 00 00 00 00	 call	 PyErr_SetString

; 8138 :         return 0;

  000c0	33 c0		 xor	 eax, eax
  000c2	eb 05		 jmp	 SHORT $LN4@PxSocket_L
$LN1@PxSocket_L:

; 8139 :     }
; 8140 : 
; 8141 :     return 1;

  000c4	b8 01 00 00 00	 mov	 eax, 1
$LN4@PxSocket_L:

; 8142 : }

  000c9	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000cd	c3		 ret	 0
PxSocket_LoadInitialBytes ENDP
_TEXT	ENDS
PUBLIC	??_C@_1BC@NHEEOKHE@?$AAP?$AAy?$AA_?$AAP?$AAX?$AAC?$AAT?$AAX?$AA?$AA@ ; `string'
PUBLIC	PxSocket_InitExceptionHandler
;	COMDAT pdata
pdata	SEGMENT
$pdata$PxSocket_InitExceptionHandler DD imagerel $LN11
	DD	imagerel $LN11+438
	DD	imagerel $unwind$PxSocket_InitExceptionHandler
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PxSocket_InitExceptionHandler DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_1BC@NHEEOKHE@?$AAP?$AAy?$AA_?$AAP?$AAX?$AAC?$AAT?$AAX?$AA?$AA@
CONST	SEGMENT
??_C@_1BC@NHEEOKHE@?$AAP?$AAy?$AA_?$AAP?$AAX?$AAC?$AAT?$AAX?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, '_', 00H, 'P', 00H, 'X', 00H, 'C', 00H, 'T', 00H
	DB	'X', 00H, 00H, 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PxSocket_InitExceptionHandler
_TEXT	SEGMENT
c$ = 32
old_heap$ = 40
eh$ = 48
s$ = 80
PxSocket_InitExceptionHandler PROC			; COMDAT

; 8146 : {

$LN11:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 8147 :     Heap *old_heap = NULL;

  00009	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR old_heap$[rsp], 0

; 8148 :     Context *c = s->ctx;

  00012	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00017	48 8b 80 00 02
	00 00		 mov	 rax, QWORD PTR [rax+512]
  0001e	48 89 44 24 20	 mov	 QWORD PTR c$[rsp], rax

; 8149 :     PyObject *eh;
; 8150 :     assert(s->protocol);

  00023	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00028	48 83 b8 90 02
	00 00 00	 cmp	 QWORD PTR [rax+656], 0
  00030	75 1c		 jne	 SHORT $LN7@PxSocket_I@4
  00032	41 b8 d6 1f 00
	00		 mov	 r8d, 8150		; 00001fd6H
  00038	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0003f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BI@KAKHJKLI@?$AAs?$AA?9?$AA?$DO?$AAp?$AAr?$AAo?$AAt?$AAo?$AAc?$AAo?$AAl?$AA?$AA@
  00046	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0004c	33 c0		 xor	 eax, eax
$LN7@PxSocket_I@4:

; 8151 :     assert(!PyErr_Occurred());

  0004e	e8 00 00 00 00	 call	 PyErr_Occurred
  00053	48 85 c0	 test	 rax, rax
  00056	74 1c		 je	 SHORT $LN8@PxSocket_I@4
  00058	41 b8 d7 1f 00
	00		 mov	 r8d, 8151		; 00001fd7H
  0005e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00065	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CE@JKFGJBND@?$AA?$CB?$AAP?$AAy?$AAE?$AAr?$AAr?$AA_?$AAO?$AAc?$AAc?$AAu?$AAr?$AAr?$AAe?$AAd?$AA?$CI?$AA?$CJ?$AA?$AA@
  0006c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00072	33 c0		 xor	 eax, eax
$LN8@PxSocket_I@4:

; 8152 :     if (!s->exception_handler) {

  00074	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00079	48 83 b8 e8 02
	00 00 00	 cmp	 QWORD PTR [rax+744], 0
  00081	0f 85 d2 00 00
	00		 jne	 $LN4@PxSocket_I@4

; 8153 :         assert(Py_PXCTX);

  00087	e8 00 00 00 00	 call	 _Py_PXCTX
  0008c	85 c0		 test	 eax, eax
  0008e	75 1c		 jne	 SHORT $LN9@PxSocket_I@4
  00090	41 b8 d9 1f 00
	00		 mov	 r8d, 8153		; 00001fd9H
  00096	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0009d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BC@NHEEOKHE@?$AAP?$AAy?$AA_?$AAP?$AAX?$AAC?$AAT?$AAX?$AA?$AA@
  000a4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000aa	33 c0		 xor	 eax, eax
$LN9@PxSocket_I@4:

; 8154 :         old_heap = ctx->h;

  000ac	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:ctx
  000b1	8b c0		 mov	 eax, eax
  000b3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  000b9	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  000c2	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  000c6	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  000ca	48 8b 80 d0 00
	00 00		 mov	 rax, QWORD PTR [rax+208]
  000d1	48 89 44 24 28	 mov	 QWORD PTR old_heap$[rsp], rax

; 8155 :         ctx->h = s->ctx->h;

  000d6	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  000db	48 8b 80 00 02
	00 00		 mov	 rax, QWORD PTR [rax+512]
  000e2	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:ctx
  000e7	8b c9		 mov	 ecx, ecx
  000e9	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _tls_index
  000ef	65 4c 8b 04 25
	58 00 00 00	 mov	 r8, QWORD PTR gs:88
  000f8	49 8b 14 d0	 mov	 rdx, QWORD PTR [r8+rdx*8]
  000fc	48 8b 0c 0a	 mov	 rcx, QWORD PTR [rdx+rcx]
  00100	48 8b 80 d0 00
	00 00		 mov	 rax, QWORD PTR [rax+208]
  00107	48 89 81 d0 00
	00 00		 mov	 QWORD PTR [rcx+208], rax

; 8156 :         eh = PyObject_GetAttrString(s->protocol, "exception_handler");

  0010e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@KOBHOIFN@exception_handler?$AA@
  00115	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0011a	48 8b 88 90 02
	00 00		 mov	 rcx, QWORD PTR [rax+656]
  00121	e8 00 00 00 00	 call	 PyObject_GetAttrString
  00126	48 89 44 24 30	 mov	 QWORD PTR eh$[rsp], rax

; 8157 :         if (eh && eh != Py_None)

  0012b	48 83 7c 24 30
	00		 cmp	 QWORD PTR eh$[rsp], 0
  00131	74 21		 je	 SHORT $LN3@PxSocket_I@4
  00133	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0013a	48 39 44 24 30	 cmp	 QWORD PTR eh$[rsp], rax
  0013f	74 13		 je	 SHORT $LN3@PxSocket_I@4

; 8158 :             s->exception_handler = eh;

  00141	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00146	48 8b 4c 24 30	 mov	 rcx, QWORD PTR eh$[rsp]
  0014b	48 89 88 e8 02
	00 00		 mov	 QWORD PTR [rax+744], rcx

; 8159 :         else

  00152	eb 05		 jmp	 SHORT $LN2@PxSocket_I@4
$LN3@PxSocket_I@4:

; 8160 :             PyErr_Clear();

  00154	e8 00 00 00 00	 call	 PyErr_Clear
$LN2@PxSocket_I@4:
$LN4@PxSocket_I@4:

; 8161 :     }
; 8162 :     if (old_heap)

  00159	48 83 7c 24 28
	00		 cmp	 QWORD PTR old_heap$[rsp], 0
  0015f	74 2a		 je	 SHORT $LN1@PxSocket_I@4

; 8163 :         ctx->h = old_heap;

  00161	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:ctx
  00166	8b c0		 mov	 eax, eax
  00168	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0016e	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00177	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  0017b	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  0017f	48 8b 4c 24 28	 mov	 rcx, QWORD PTR old_heap$[rsp]
  00184	48 89 88 d0 00
	00 00		 mov	 QWORD PTR [rax+208], rcx
$LN1@PxSocket_I@4:

; 8164 :     assert(!PyErr_Occurred());

  0018b	e8 00 00 00 00	 call	 PyErr_Occurred
  00190	48 85 c0	 test	 rax, rax
  00193	74 1c		 je	 SHORT $LN10@PxSocket_I@4
  00195	41 b8 e4 1f 00
	00		 mov	 r8d, 8164		; 00001fe4H
  0019b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  001a2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CE@JKFGJBND@?$AA?$CB?$AAP?$AAy?$AAE?$AAr?$AAr?$AA_?$AAO?$AAc?$AAc?$AAu?$AAr?$AAr?$AAe?$AAd?$AA?$CI?$AA?$CJ?$AA?$AA@
  001a9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001af	33 c0		 xor	 eax, eax
$LN10@PxSocket_I@4:

; 8165 : }

  001b1	48 83 c4 48	 add	 rsp, 72			; 00000048H
  001b5	c3		 ret	 0
PxSocket_InitExceptionHandler ENDP
_TEXT	ENDS
PUBLIC	??_C@_09HILPIAE@ConnectEx?$AA@			; `string'
PUBLIC	??_C@_04NPNJNMMP@bind?$AA@			; `string'
PUBLIC	??_C@_0BB@MPMGBEBO@PxSocket_Connect?$AA@	; `string'
PUBLIC	PxSocket_Connect
EXTRN	__imp_bind:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PxSocket_Connect DD imagerel $LN26
	DD	imagerel $LN26+1082
	DD	imagerel $unwind$PxSocket_Connect
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PxSocket_Connect DD 021101H
	DD	0190111H
xdata	ENDS
;	COMDAT ??_C@_09HILPIAE@ConnectEx?$AA@
CONST	SEGMENT
??_C@_09HILPIAE@ConnectEx?$AA@ DB 'ConnectEx', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04NPNJNMMP@bind?$AA@
CONST	SEGMENT
??_C@_04NPNJNMMP@bind?$AA@ DB 'bind', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@MPMGBEBO@PxSocket_Connect?$AA@
CONST	SEGMENT
??_C@_0BB@MPMGBEBO@PxSocket_Connect?$AA@ DB 'PxSocket_Connect', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PxSocket_Connect
_TEXT	SEGMENT
sin$ = 64
s$ = 72
success$ = 80
size$ = 88
len$ = 96
px$ = 104
b$ = 112
sa$ = 120
cbuf$ = 128
result$ = 136
ol$ = 144
c$ = 152
fd$ = 160
cb$ = 168
i$131892 = 176
instance$ = 208
context$ = 216
PxSocket_Connect PROC					; COMDAT

; 8170 : {

$LN26:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H

; 8171 :     Context *c = (Context *)context;

  00011	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR context$[rsp]
  00019	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR c$[rsp], rax

; 8172 :     PxState *px;
; 8173 :     PTP_WIN32_IO_CALLBACK cb;
; 8174 :     BOOL success;
; 8175 :     SOCKET fd;
; 8176 :     struct sockaddr *sa;
; 8177 :     int len;
; 8178 :     PxSocketBuf *b;
; 8179 :     char *cbuf = NULL;

  00021	48 c7 84 24 80
	00 00 00 00 00
	00 00		 mov	 QWORD PTR cbuf$[rsp], 0

; 8180 :     size_t size = 0;

  0002d	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR size$[rsp], 0

; 8181 :     WSAOVERLAPPED *ol;
; 8182 :     PyObject *result = NULL;

  00036	48 c7 84 24 88
	00 00 00 00 00
	00 00		 mov	 QWORD PTR result$[rsp], 0

; 8183 :     PxSocket *s = (PxSocket *)c->io_obj;

  00042	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  0004a	48 8b 80 a8 32
	00 00		 mov	 rax, QWORD PTR [rax+12968]
  00051	48 89 44 24 48	 mov	 QWORD PTR s$[rsp], rax

; 8184 :     struct sockaddr_in *sin;
; 8185 : 
; 8186 :     Px_GUARD

  00056	e8 00 00 00 00	 call	 _Py_PXCTX
  0005b	85 c0		 test	 eax, eax
  0005d	75 1f		 jne	 SHORT $LN20@PxSocket_C
  0005f	41 b9 01 00 00
	00		 mov	 r9d, 1
  00065	41 b8 fa 1f 00
	00		 mov	 r8d, 8186		; 00001ffaH
  0006b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@PGHBGAOD@?4?4?2Python?2pyparallel?4c?$AA@
  00072	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@MPMGBEBO@PxSocket_Connect?$AA@
  00079	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN20@PxSocket_C:

; 8187 : 
; 8188 :     ENTERED_CALLBACK();

  0007e	48 8b 94 24 d0
	00 00 00	 mov	 rdx, QWORD PTR instance$[rsp]
  00086	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  0008e	e8 00 00 00 00	 call	 _PyParallel_EnteredCallback

; 8189 : 
; 8190 :     /*
; 8191 :     if (!PxSocket_InitProtocol(c))
; 8192 :         goto end;
; 8193 :     */
; 8194 : 
; 8195 :     assert(s->protocol);

  00093	48 8b 44 24 48	 mov	 rax, QWORD PTR s$[rsp]
  00098	48 83 b8 90 02
	00 00 00	 cmp	 QWORD PTR [rax+656], 0
  000a0	75 1c		 jne	 SHORT $LN23@PxSocket_C
  000a2	41 b8 03 20 00
	00		 mov	 r8d, 8195		; 00002003H
  000a8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  000af	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BI@KAKHJKLI@?$AAs?$AA?9?$AA?$DO?$AAp?$AAr?$AAo?$AAt?$AAo?$AAc?$AAo?$AAl?$AA?$AA@
  000b6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000bc	33 c0		 xor	 eax, eax
$LN23@PxSocket_C:

; 8196 :     assert(!PyErr_Occurred());

  000be	e8 00 00 00 00	 call	 PyErr_Occurred
  000c3	48 85 c0	 test	 rax, rax
  000c6	74 1c		 je	 SHORT $LN24@PxSocket_C
  000c8	41 b8 04 20 00
	00		 mov	 r8d, 8196		; 00002004H
  000ce	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  000d5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CE@JKFGJBND@?$AA?$CB?$AAP?$AAy?$AAE?$AAr?$AAr?$AA_?$AAO?$AAc?$AAc?$AAu?$AAr?$AAr?$AAe?$AAd?$AA?$CI?$AA?$CJ?$AA?$AA@
  000dc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000e2	33 c0		 xor	 eax, eax
$LN24@PxSocket_C:

; 8197 : 
; 8198 :     b = _pxsocket_initial_bytes_to_send(c, s);

  000e4	48 8b 54 24 48	 mov	 rdx, QWORD PTR s$[rsp]
  000e9	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  000f1	e8 00 00 00 00	 call	 _pxsocket_initial_bytes_to_send
  000f6	48 89 44 24 70	 mov	 QWORD PTR b$[rsp], rax

; 8199 :     if (PyErr_Occurred())

  000fb	e8 00 00 00 00	 call	 PyErr_Occurred
  00100	48 85 c0	 test	 rax, rax
  00103	74 48		 je	 SHORT $LN19@PxSocket_C
$LN18@PxSocket_C:

; 8200 :         PxSocket_EXCEPTION();

  00105	e8 00 00 00 00	 call	 PyErr_Occurred
  0010a	48 85 c0	 test	 rax, rax
  0010d	75 1c		 jne	 SHORT $LN25@PxSocket_C
  0010f	41 b8 08 20 00
	00		 mov	 r8d, 8200		; 00002008H
  00115	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0011c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CC@DNBCFJEA@?$AAP?$AAy?$AAE?$AAr?$AAr?$AA_?$AAO?$AAc?$AAc?$AAu?$AAr?$AAr?$AAe?$AAd?$AA?$CI?$AA?$CJ?$AA?$AA@
  00123	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00129	33 c0		 xor	 eax, eax
$LN25@PxSocket_C:
  0012b	45 33 c0	 xor	 r8d, r8d
  0012e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  00135	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  0013d	e8 00 00 00 00	 call	 PxSocket_HandleException
  00142	e9 eb 02 00 00	 jmp	 $end$131863
  00147	33 c0		 xor	 eax, eax
  00149	85 c0		 test	 eax, eax
  0014b	75 b8		 jne	 SHORT $LN18@PxSocket_C
$LN19@PxSocket_C:

; 8201 : 
; 8202 :     if (b) {

  0014d	48 83 7c 24 70
	00		 cmp	 QWORD PTR b$[rsp], 0
  00153	74 1d		 je	 SHORT $LN15@PxSocket_C

; 8203 :         cbuf = b->w.buf;

  00155	48 8b 44 24 70	 mov	 rax, QWORD PTR b$[rsp]
  0015a	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0015e	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR cbuf$[rsp], rax

; 8204 :         size = b->w.len;

  00166	48 8b 44 24 70	 mov	 rax, QWORD PTR b$[rsp]
  0016b	8b 00		 mov	 eax, DWORD PTR [rax]
  0016d	48 89 44 24 58	 mov	 QWORD PTR size$[rsp], rax
$LN15@PxSocket_C:

; 8205 :     }
; 8206 : 
; 8207 :     px = c->px;

  00172	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  0017a	48 8b 80 d8 00
	00 00		 mov	 rax, QWORD PTR [rax+216]
  00181	48 89 44 24 68	 mov	 QWORD PTR px$[rsp], rax

; 8208 : 
; 8209 :     sin = &(s->local_addr.in);

  00186	48 8b 44 24 48	 mov	 rax, QWORD PTR s$[rsp]
  0018b	48 05 e8 00 00
	00		 add	 rax, 232		; 000000e8H
  00191	48 89 44 24 40	 mov	 QWORD PTR sin$[rsp], rax

; 8210 :     sin->sin_family = AF_INET;

  00196	b8 02 00 00 00	 mov	 eax, 2
  0019b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR sin$[rsp]
  001a0	66 89 01	 mov	 WORD PTR [rcx], ax

; 8211 :     sin->sin_addr.s_addr = INADDR_ANY;

  001a3	48 8b 44 24 40	 mov	 rax, QWORD PTR sin$[rsp]
  001a8	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [rax+4], 0

; 8212 :     sin->sin_port = 0;

  001af	33 c0		 xor	 eax, eax
  001b1	48 8b 4c 24 40	 mov	 rcx, QWORD PTR sin$[rsp]
  001b6	66 89 41 02	 mov	 WORD PTR [rcx+2], ax

; 8213 :     if (bind(s->sock_fd, (struct sockaddr *)sin, sizeof(*sin)))

  001ba	41 b8 10 00 00
	00		 mov	 r8d, 16
  001c0	48 8b 54 24 40	 mov	 rdx, QWORD PTR sin$[rsp]
  001c5	48 8b 44 24 48	 mov	 rax, QWORD PTR s$[rsp]
  001ca	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  001ce	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_bind
  001d4	85 c0		 test	 eax, eax
  001d6	74 32		 je	 SHORT $LN14@PxSocket_C
$LN13@PxSocket_C:

; 8214 :         PxSocket_WSAERROR("bind");

  001d8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WSAGetLastError
  001de	8b c8		 mov	 ecx, eax
  001e0	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
  001e5	41 b8 01 00 00
	00		 mov	 r8d, 1
  001eb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04NPNJNMMP@bind?$AA@
  001f2	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  001fa	e8 00 00 00 00	 call	 PxSocket_HandleException
  001ff	e9 2e 02 00 00	 jmp	 $end$131863
  00204	33 c0		 xor	 eax, eax
  00206	85 c0		 test	 eax, eax
  00208	75 ce		 jne	 SHORT $LN13@PxSocket_C
$LN14@PxSocket_C:

; 8215 : 
; 8216 :     cb = PxSocketClient_Callback;

  0020a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PxSocketClient_Callback
  00211	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR cb$[rsp], rax

; 8217 :     s->tp_io = CreateThreadpoolIo((HANDLE)s->sock_fd, cb, c, NULL);

  00219	45 33 c9	 xor	 r9d, r9d
  0021c	4c 8b 84 24 98
	00 00 00	 mov	 r8, QWORD PTR c$[rsp]
  00224	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR cb$[rsp]
  0022c	48 8b 44 24 48	 mov	 rax, QWORD PTR s$[rsp]
  00231	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00235	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateThreadpoolIo
  0023b	48 8b 4c 24 48	 mov	 rcx, QWORD PTR s$[rsp]
  00240	48 89 81 58 03
	00 00		 mov	 QWORD PTR [rcx+856], rax

; 8218 :     if (!s->tp_io)

  00247	48 8b 44 24 48	 mov	 rax, QWORD PTR s$[rsp]
  0024c	48 83 b8 58 03
	00 00 00	 cmp	 QWORD PTR [rax+856], 0
  00254	75 2c		 jne	 SHORT $LN10@PxSocket_C
$LN9@PxSocket_C:

; 8219 :         PxSocket_SYSERROR("CreateThreadpoolIo");

  00256	33 c9		 xor	 ecx, ecx
  00258	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
  0025d	41 b8 01 00 00
	00		 mov	 r8d, 1
  00263	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@BIALAGNA@CreateThreadpoolIo?$AA@
  0026a	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  00272	e8 00 00 00 00	 call	 PxSocket_HandleException
  00277	e9 b6 01 00 00	 jmp	 $end$131863
  0027c	33 c0		 xor	 eax, eax
  0027e	85 c0		 test	 eax, eax
  00280	75 d4		 jne	 SHORT $LN9@PxSocket_C
$LN10@PxSocket_C:

; 8220 : 
; 8221 :     c->io_type = Px_IOTYPE_SOCKET;

  00282	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  0028a	c7 80 80 32 00
	00 02 00 00 00	 mov	 DWORD PTR [rax+12928], 2

; 8222 :     s->io_op = PxSocket_IO_CONNECT;

  00294	48 8b 44 24 48	 mov	 rax, QWORD PTR s$[rsp]
  00299	c7 80 50 03 00
	00 01 00 00 00	 mov	 DWORD PTR [rax+848], 1

; 8223 : 
; 8224 :     ol = &(c->overlapped);

  002a3	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  002ab	48 05 b0 32 00
	00		 add	 rax, 12976		; 000032b0H
  002b1	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR ol$[rsp], rax

; 8225 :     RESET_OVERLAPPED(ol);

  002b9	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR ol$[rsp]
  002c1	e8 00 00 00 00	 call	 _RESET_OVERLAPPED

; 8226 : 
; 8227 :     sa = (struct sockaddr *)&(s->remote_addr.sa);

  002c6	48 8b 44 24 48	 mov	 rax, QWORD PTR s$[rsp]
  002cb	48 05 70 01 00
	00		 add	 rax, 368		; 00000170H
  002d1	48 89 44 24 78	 mov	 QWORD PTR sa$[rsp], rax

; 8228 :     len = s->remote_addr_len;

  002d6	48 8b 44 24 48	 mov	 rax, QWORD PTR s$[rsp]
  002db	8b 80 f0 01 00
	00		 mov	 eax, DWORD PTR [rax+496]
  002e1	89 44 24 60	 mov	 DWORD PTR len$[rsp], eax

; 8229 :     fd = s->sock_fd;

  002e5	48 8b 44 24 48	 mov	 rax, QWORD PTR s$[rsp]
  002ea	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  002ee	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR fd$[rsp], rax

; 8230 : 
; 8231 :     StartThreadpoolIo(s->tp_io);

  002f6	48 8b 44 24 48	 mov	 rax, QWORD PTR s$[rsp]
  002fb	48 8b 88 58 03
	00 00		 mov	 rcx, QWORD PTR [rax+856]
  00302	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_StartThreadpoolIo

; 8232 :     PxSocket_InitExceptionHandler(s);

  00308	48 8b 4c 24 48	 mov	 rcx, QWORD PTR s$[rsp]
  0030d	e8 00 00 00 00	 call	 PxSocket_InitExceptionHandler

; 8233 :     Px_SOCKFLAGS(s) |= Px_SOCKFLAGS_CONNECTED;

  00312	48 8b 44 24 48	 mov	 rax, QWORD PTR s$[rsp]
  00317	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  0031d	83 c8 10	 or	 eax, 16
  00320	48 8b 4c 24 48	 mov	 rcx, QWORD PTR s$[rsp]
  00325	89 81 f4 01 00
	00		 mov	 DWORD PTR [rcx+500], eax

; 8234 :     success = ConnectEx(fd, sa, len, cbuf, (DWORD)size, NULL, ol);

  0032b	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR ol$[rsp]
  00333	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00338	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR [rsp+40], 0
  00341	8b 44 24 58	 mov	 eax, DWORD PTR size$[rsp]
  00345	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00349	4c 8b 8c 24 80
	00 00 00	 mov	 r9, QWORD PTR cbuf$[rsp]
  00351	44 8b 44 24 60	 mov	 r8d, DWORD PTR len$[rsp]
  00356	48 8b 54 24 78	 mov	 rdx, QWORD PTR sa$[rsp]
  0035b	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR fd$[rsp]
  00363	ff 15 50 00 00
	00		 call	 QWORD PTR PySocketModule+80
  00369	89 44 24 50	 mov	 DWORD PTR success$[rsp], eax

; 8235 :     if (!success) {

  0036d	83 7c 24 50 00	 cmp	 DWORD PTR success$[rsp], 0
  00372	75 67		 jne	 SHORT $LN6@PxSocket_C

; 8236 :         if (WSAGetLastError() != WSA_IO_PENDING) {

  00374	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WSAGetLastError
  0037a	3d e5 03 00 00	 cmp	 eax, 997		; 000003e5H
  0037f	74 58		 je	 SHORT $LN5@PxSocket_C

; 8237 :             Px_SOCKFLAGS(s) &= ~Px_SOCKFLAGS_CONNECTED;

  00381	48 8b 44 24 48	 mov	 rax, QWORD PTR s$[rsp]
  00386	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  0038c	83 e0 ef	 and	 eax, -17		; ffffffefH
  0038f	48 8b 4c 24 48	 mov	 rcx, QWORD PTR s$[rsp]
  00394	89 81 f4 01 00
	00		 mov	 DWORD PTR [rcx+500], eax

; 8238 :             s->exception_handler = NULL;

  0039a	48 8b 44 24 48	 mov	 rax, QWORD PTR s$[rsp]
  0039f	48 c7 80 e8 02
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+744], 0
$LN4@PxSocket_C:

; 8239 :             PxSocket_WSAERROR("ConnectEx");

  003aa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WSAGetLastError
  003b0	8b c8		 mov	 ecx, eax
  003b2	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
  003b7	41 b8 01 00 00
	00		 mov	 r8d, 1
  003bd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09HILPIAE@ConnectEx?$AA@
  003c4	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  003cc	e8 00 00 00 00	 call	 PxSocket_HandleException
  003d1	eb 5f		 jmp	 SHORT $end$131863
  003d3	33 c0		 xor	 eax, eax
  003d5	85 c0		 test	 eax, eax
  003d7	75 d1		 jne	 SHORT $LN4@PxSocket_C
$LN5@PxSocket_C:

; 8240 :         }
; 8241 :     } else {

  003d9	eb 57		 jmp	 SHORT $LN1@PxSocket_C
$LN6@PxSocket_C:

; 8242 :         PTP_CALLBACK_INSTANCE i = c->instance;

  003db	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  003e3	48 8b 80 f0 00
	00 00		 mov	 rax, QWORD PTR [rax+240]
  003ea	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR i$131892[rsp], rax

; 8243 :         CancelThreadpoolIo(s->tp_io);

  003f2	48 8b 44 24 48	 mov	 rax, QWORD PTR s$[rsp]
  003f7	48 8b 88 58 03
	00 00		 mov	 rcx, QWORD PTR [rax+856]
  003fe	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CancelThreadpoolIo

; 8244 :         cb(NULL, c, ol, NO_ERROR, 0, NULL);

  00404	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR [rsp+40], 0
  0040d	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  00416	45 33 c9	 xor	 r9d, r9d
  00419	4c 8b 84 24 90
	00 00 00	 mov	 r8, QWORD PTR ol$[rsp]
  00421	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR c$[rsp]
  00429	33 c9		 xor	 ecx, ecx
  0042b	ff 94 24 a8 00
	00 00		 call	 QWORD PTR cb$[rsp]
$LN1@PxSocket_C:
$end$131863:

; 8245 :     }
; 8246 : 
; 8247 : end:
; 8248 :     return;
; 8249 : }

  00432	48 81 c4 c8 00
	00 00		 add	 rsp, 200		; 000000c8H
  00439	c3		 ret	 0
PxSocket_Connect ENDP
_TEXT	ENDS
PUBLIC	??_C@_1DO@GMKNOLDA@?$AAP?$AAx?$AA_?$AAP?$AAT?$AAR?$AA?$CI?$AAx?$AA?9?$AA?$DO?$AAi?$AAo?$AA_?$AAo?$AAb?$AAj?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAP?$AAx?$AA_?$AAP?$AAT?$AAR?$AA?$CI?$AAo?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DI@HPADILIP@?$AAP?$AAx?$AAS?$AAo?$AAc?$AAk?$AAe?$AAt?$AA_?$AAI?$AAS?$AA_?$AAS?$AAE?$AAR?$AAV?$AAE?$AAR?$AAC?$AAL?$AAI?$AAE?$AAN?$AAT?$AA?$CI?$AAo?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	PxSocketServer_CreateClientSocket
;	COMDAT pdata
pdata	SEGMENT
$pdata$PxSocketServer_CreateClientSocket DD imagerel $LN16
	DD	imagerel $LN16+813
	DD	imagerel $unwind$PxSocketServer_CreateClientSocket
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PxSocketServer_CreateClientSocket DD 010901H
	DD	0c209H
xdata	ENDS
;	COMDAT ??_C@_1DO@GMKNOLDA@?$AAP?$AAx?$AA_?$AAP?$AAT?$AAR?$AA?$CI?$AAx?$AA?9?$AA?$DO?$AAi?$AAo?$AA_?$AAo?$AAb?$AAj?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAP?$AAx?$AA_?$AAP?$AAT?$AAR?$AA?$CI?$AAo?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DO@GMKNOLDA@?$AAP?$AAx?$AA_?$AAP?$AAT?$AAR?$AA?$CI?$AAx?$AA?9?$AA?$DO?$AAi?$AAo?$AA_?$AAo?$AAb?$AAj?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAP?$AAx?$AA_?$AAP?$AAT?$AAR?$AA?$CI?$AAo?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'x', 00H, '_', 00H, 'P', 00H, 'T', 00H, 'R', 00H, '(', 00H
	DB	'x', 00H, '-', 00H, '>', 00H, 'i', 00H, 'o', 00H, '_', 00H, 'o'
	DB	00H, 'b', 00H, 'j', 00H, ')', 00H, ' ', 00H, '=', 00H, '=', 00H
	DB	' ', 00H, 'P', 00H, 'x', 00H, '_', 00H, 'P', 00H, 'T', 00H, 'R'
	DB	00H, '(', 00H, 'o', 00H, ')', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1DI@HPADILIP@?$AAP?$AAx?$AAS?$AAo?$AAc?$AAk?$AAe?$AAt?$AA_?$AAI?$AAS?$AA_?$AAS?$AAE?$AAR?$AAV?$AAE?$AAR?$AAC?$AAL?$AAI?$AAE?$AAN?$AAT?$AA?$CI?$AAo?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DI@HPADILIP@?$AAP?$AAx?$AAS?$AAo?$AAc?$AAk?$AAe?$AAt?$AA_?$AAI?$AAS?$AA_?$AAS?$AAE?$AAR?$AAV?$AAE?$AAR?$AAC?$AAL?$AAI?$AAE?$AAN?$AAT?$AA?$CI?$AAo?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'x', 00H, 'S', 00H, 'o', 00H, 'c', 00H, 'k', 00H, 'e', 00H
	DB	't', 00H, '_', 00H, 'I', 00H, 'S', 00H, '_', 00H, 'S', 00H, 'E'
	DB	00H, 'R', 00H, 'V', 00H, 'E', 00H, 'R', 00H, 'C', 00H, 'L', 00H
	DB	'I', 00H, 'E', 00H, 'N', 00H, 'T', 00H, '(', 00H, 'o', 00H, ')'
	DB	00H, 00H, 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PxSocketServer_CreateClientSocket
_TEXT	SEGMENT
flags$ = 32
x$ = 40
old_context$ = 48
snapshot$ = 56
rbuf_size$ = 64
rbuf$ = 72
c$ = 80
o$ = 88
s$ = 112
PxSocketServer_CreateClientSocket PROC			; COMDAT

; 8253 : {

$LN16:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 8254 :     Context  *c = s->ctx;

  00009	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  0000e	48 8b 80 00 02
	00 00		 mov	 rax, QWORD PTR [rax+512]
  00015	48 89 44 24 50	 mov	 QWORD PTR c$[rsp], rax

; 8255 :     Context  *old_context = NULL;

  0001a	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR old_context$[rsp], 0

; 8256 :     PxSocket *o; /* client socket */
; 8257 :     Context  *x; /* client socket's context */
; 8258 :     RBUF     *rbuf;
; 8259 :     size_t    rbuf_size;
; 8260 :     Heap     *snapshot = NULL;

  00023	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR snapshot$[rsp], 0

; 8261 :     int flags = Px_SOCKFLAGS_SERVERCLIENT;

  0002c	c7 44 24 20 80
	00 00 00	 mov	 DWORD PTR flags$[rsp], 128 ; 00000080H

; 8262 : 
; 8263 :     o = (PxSocket *)create_pxsocket(NULL, NULL, flags, s);

  00034	4c 8b 4c 24 70	 mov	 r9, QWORD PTR s$[rsp]
  00039	44 8b 44 24 20	 mov	 r8d, DWORD PTR flags$[rsp]
  0003e	33 d2		 xor	 edx, edx
  00040	33 c9		 xor	 ecx, ecx
  00042	e8 00 00 00 00	 call	 create_pxsocket
  00047	48 89 44 24 58	 mov	 QWORD PTR o$[rsp], rax

; 8264 : 
; 8265 :     if (!o)

  0004c	48 83 7c 24 58
	00		 cmp	 QWORD PTR o$[rsp], 0
  00052	75 07		 jne	 SHORT $LN6@PxSocketSe@3

; 8266 :         return NULL;

  00054	33 c0		 xor	 eax, eax
  00056	e9 cd 02 00 00	 jmp	 $LN7@PxSocketSe@3
$LN6@PxSocketSe@3:

; 8267 : 
; 8268 :     assert(PxSocket_IS_SERVERCLIENT(o));

  0005b	48 8b 44 24 58	 mov	 rax, QWORD PTR o$[rsp]
  00060	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  00066	25 80 00 00 00	 and	 eax, 128		; 00000080H
  0006b	85 c0		 test	 eax, eax
  0006d	75 1c		 jne	 SHORT $LN9@PxSocketSe@3
  0006f	41 b8 4c 20 00
	00		 mov	 r8d, 8268		; 0000204cH
  00075	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0007c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DI@HPADILIP@?$AAP?$AAx?$AAS?$AAo?$AAc?$AAk?$AAe?$AAt?$AA_?$AAI?$AAS?$AA_?$AAS?$AAE?$AAR?$AAV?$AAE?$AAR?$AAC?$AAL?$AAI?$AAE?$AAN?$AAT?$AA?$CI?$AAo?$AA?$CJ?$AA?$AA@
  00083	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00089	33 c0		 xor	 eax, eax
$LN9@PxSocketSe@3:

; 8269 :     assert(s->protocol_type);

  0008b	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00090	48 83 b8 88 02
	00 00 00	 cmp	 QWORD PTR [rax+648], 0
  00098	75 1c		 jne	 SHORT $LN10@PxSocketSe@3
  0009a	41 b8 4d 20 00
	00		 mov	 r8d, 8269		; 0000204dH
  000a0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  000a7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CC@CADBFOEC@?$AAs?$AA?9?$AA?$DO?$AAp?$AAr?$AAo?$AAt?$AAo?$AAc?$AAo?$AAl?$AA_?$AAt?$AAy?$AAp?$AAe?$AA?$AA@
  000ae	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000b4	33 c0		 xor	 eax, eax
$LN10@PxSocketSe@3:

; 8270 :     assert(o->parent == s);

  000b6	48 8b 44 24 58	 mov	 rax, QWORD PTR o$[rsp]
  000bb	48 8b 4c 24 70	 mov	 rcx, QWORD PTR s$[rsp]
  000c0	48 39 88 30 04
	00 00		 cmp	 QWORD PTR [rax+1072], rcx
  000c7	74 1c		 je	 SHORT $LN11@PxSocketSe@3
  000c9	41 b8 4e 20 00
	00		 mov	 r8d, 8270		; 0000204eH
  000cf	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  000d6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BO@DMDFCAE@?$AAo?$AA?9?$AA?$DO?$AAp?$AAa?$AAr?$AAe?$AAn?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAs?$AA?$AA@
  000dd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000e3	33 c0		 xor	 eax, eax
$LN11@PxSocketSe@3:

; 8271 : 
; 8272 :     x = o->ctx;

  000e5	48 8b 44 24 58	 mov	 rax, QWORD PTR o$[rsp]
  000ea	48 8b 80 00 02
	00 00		 mov	 rax, QWORD PTR [rax+512]
  000f1	48 89 44 24 28	 mov	 QWORD PTR x$[rsp], rax

; 8273 :     assert(x);

  000f6	48 83 7c 24 28
	00		 cmp	 QWORD PTR x$[rsp], 0
  000fc	75 1c		 jne	 SHORT $LN12@PxSocketSe@3
  000fe	41 b8 51 20 00
	00		 mov	 r8d, 8273		; 00002051H
  00104	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0010b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_13HADAKIJA@?$AAx?$AA?$AA@
  00112	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00118	33 c0		 xor	 eax, eax
$LN12@PxSocketSe@3:

; 8274 :     assert(Px_PTR(x->io_obj) == Px_PTR(o));

  0011a	48 8b 44 24 28	 mov	 rax, QWORD PTR x$[rsp]
  0011f	48 8b 4c 24 58	 mov	 rcx, QWORD PTR o$[rsp]
  00124	48 39 88 a8 32
	00 00		 cmp	 QWORD PTR [rax+12968], rcx
  0012b	74 1c		 je	 SHORT $LN13@PxSocketSe@3
  0012d	41 b8 52 20 00
	00		 mov	 r8d, 8274		; 00002052H
  00133	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0013a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@GMKNOLDA@?$AAP?$AAx?$AA_?$AAP?$AAT?$AAR?$AA?$CI?$AAx?$AA?9?$AA?$DO?$AAi?$AAo?$AA_?$AAo?$AAb?$AAj?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAP?$AAx?$AA_?$AAP?$AAT?$AAR?$AA?$CI?$AAo?$AA?$CJ?$AA?$AA@
  00141	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00147	33 c0		 xor	 eax, eax
$LN13@PxSocketSe@3:

; 8275 : 
; 8276 :     /* Switch out the TLS context with the new client socket's context (we
; 8277 :      * revert it at the end of this function). */
; 8278 :     old_context = ctx;

  00149	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:ctx
  0014e	8b c0		 mov	 eax, eax
  00150	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00156	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0015f	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  00163	48 8b 04 08	 mov	 rax, QWORD PTR [rax+rcx]
  00167	48 89 44 24 30	 mov	 QWORD PTR old_context$[rsp], rax

; 8279 :     ctx = x;

  0016c	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:ctx
  00171	8b c0		 mov	 eax, eax
  00173	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00179	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00182	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  00186	48 8b 54 24 28	 mov	 rdx, QWORD PTR x$[rsp]
  0018b	48 89 14 08	 mov	 QWORD PTR [rax+rcx], rdx

; 8280 : 
; 8281 :     if (!PxSocket_SetProtocolType(o, s->protocol_type))

  0018f	48 8b 44 24 70	 mov	 rax, QWORD PTR s$[rsp]
  00194	48 8b 90 88 02
	00 00		 mov	 rdx, QWORD PTR [rax+648]
  0019b	48 8b 4c 24 58	 mov	 rcx, QWORD PTR o$[rsp]
  001a0	e8 00 00 00 00	 call	 PxSocket_SetProtocolType
  001a5	85 c0		 test	 eax, eax
  001a7	75 05		 jne	 SHORT $LN5@PxSocketSe@3

; 8282 :         goto error;

  001a9	e9 ea 00 00 00	 jmp	 $error$131925
$LN5@PxSocketSe@3:

; 8283 : 
; 8284 :     if (!PxSocket_InitInitialBytes(o))

  001ae	48 8b 4c 24 58	 mov	 rcx, QWORD PTR o$[rsp]
  001b3	e8 00 00 00 00	 call	 PxSocket_InitInitialBytes
  001b8	85 c0		 test	 eax, eax
  001ba	75 05		 jne	 SHORT $LN4@PxSocketSe@3

; 8285 :         goto error;

  001bc	e9 d7 00 00 00	 jmp	 $error$131925
$LN4@PxSocketSe@3:

; 8286 : 
; 8287 :     PxSocket_InitExceptionHandler(o);

  001c1	48 8b 4c 24 58	 mov	 rcx, QWORD PTR o$[rsp]
  001c6	e8 00 00 00 00	 call	 PxSocket_InitExceptionHandler

; 8288 : 
; 8289 :     rbuf_size = o->recvbuf_size + Px_PTR_ALIGN(sizeof(RBUF));

  001cb	48 8b 44 24 58	 mov	 rax, QWORD PTR o$[rsp]
  001d0	48 63 80 60 02
	00 00		 movsxd	 rax, DWORD PTR [rax+608]
  001d7	48 05 f0 00 00
	00		 add	 rax, 240		; 000000f0H
  001dd	48 89 44 24 40	 mov	 QWORD PTR rbuf_size$[rsp], rax

; 8290 : 
; 8291 :     rbuf = (RBUF *)_PyHeap_Malloc(x, rbuf_size, 0, 0);

  001e2	45 33 c9	 xor	 r9d, r9d
  001e5	45 33 c0	 xor	 r8d, r8d
  001e8	48 8b 54 24 40	 mov	 rdx, QWORD PTR rbuf_size$[rsp]
  001ed	48 8b 4c 24 28	 mov	 rcx, QWORD PTR x$[rsp]
  001f2	e8 00 00 00 00	 call	 _PyHeap_Malloc
  001f7	48 89 44 24 48	 mov	 QWORD PTR rbuf$[rsp], rax

; 8292 :     if (!rbuf)

  001fc	48 83 7c 24 48
	00		 cmp	 QWORD PTR rbuf$[rsp], 0
  00202	75 05		 jne	 SHORT $LN3@PxSocketSe@3

; 8293 :         goto error;

  00204	e9 8f 00 00 00	 jmp	 $error$131925
$LN3@PxSocketSe@3:

; 8294 : 
; 8295 :     o->rbuf = rbuf;

  00209	48 8b 44 24 58	 mov	 rax, QWORD PTR o$[rsp]
  0020e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR rbuf$[rsp]
  00213	48 89 88 70 03
	00 00		 mov	 QWORD PTR [rax+880], rcx

; 8296 :     rbuf->s = o;

  0021a	48 8b 44 24 48	 mov	 rax, QWORD PTR rbuf$[rsp]
  0021f	48 8b 4c 24 58	 mov	 rcx, QWORD PTR o$[rsp]
  00224	48 89 08	 mov	 QWORD PTR [rax], rcx

; 8297 :     rbuf->ctx = x;

  00227	48 8b 44 24 48	 mov	 rax, QWORD PTR rbuf$[rsp]
  0022c	48 8b 4c 24 28	 mov	 rcx, QWORD PTR x$[rsp]
  00231	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 8298 :     rbuf->w.len = o->recvbuf_size;

  00235	48 8b 44 24 48	 mov	 rax, QWORD PTR rbuf$[rsp]
  0023a	48 8b 4c 24 58	 mov	 rcx, QWORD PTR o$[rsp]
  0023f	8b 89 60 02 00
	00		 mov	 ecx, DWORD PTR [rcx+608]
  00245	89 48 40	 mov	 DWORD PTR [rax+64], ecx

; 8299 :     rbuf->w.buf = (char *)rbuf->ob_sval;

  00248	48 8b 44 24 48	 mov	 rax, QWORD PTR rbuf$[rsp]
  0024d	48 05 e8 00 00
	00		 add	 rax, 232		; 000000e8H
  00253	48 8b 4c 24 48	 mov	 rcx, QWORD PTR rbuf$[rsp]
  00258	48 89 41 48	 mov	 QWORD PTR [rcx+72], rax

; 8300 :     o->num_rbufs = 1;

  0025c	48 8b 44 24 58	 mov	 rax, QWORD PTR o$[rsp]
  00261	c7 80 78 03 00
	00 01 00 00 00	 mov	 DWORD PTR [rax+888], 1

; 8301 : 
; 8302 :     ctx = old_context;

  0026b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:ctx
  00270	8b c0		 mov	 eax, eax
  00272	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00278	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00281	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  00285	48 8b 54 24 30	 mov	 rdx, QWORD PTR old_context$[rsp]
  0028a	48 89 14 08	 mov	 QWORD PTR [rax+rcx], rdx

; 8303 : 
; 8304 :     return o;

  0028e	48 8b 44 24 58	 mov	 rax, QWORD PTR o$[rsp]
  00293	e9 90 00 00 00	 jmp	 $LN7@PxSocketSe@3
$error$131925:

; 8305 : 
; 8306 : error:
; 8307 :     assert(PyErr_Occurred());

  00298	e8 00 00 00 00	 call	 PyErr_Occurred
  0029d	48 85 c0	 test	 rax, rax
  002a0	75 1c		 jne	 SHORT $LN14@PxSocketSe@3
  002a2	41 b8 73 20 00
	00		 mov	 r8d, 8307		; 00002073H
  002a8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  002af	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CC@DNBCFJEA@?$AAP?$AAy?$AAE?$AAr?$AAr?$AA_?$AAO?$AAc?$AAc?$AAu?$AAr?$AAr?$AAe?$AAd?$AA?$CI?$AA?$CJ?$AA?$AA@
  002b6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  002bc	33 c0		 xor	 eax, eax
$LN14@PxSocketSe@3:

; 8308 : 
; 8309 :     if (old_context)

  002be	48 83 7c 24 30
	00		 cmp	 QWORD PTR old_context$[rsp], 0
  002c4	74 23		 je	 SHORT $LN2@PxSocketSe@3

; 8310 :         ctx = old_context;

  002c6	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:ctx
  002cb	8b c0		 mov	 eax, eax
  002cd	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  002d3	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  002dc	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  002e0	48 8b 54 24 30	 mov	 rdx, QWORD PTR old_context$[rsp]
  002e5	48 89 14 08	 mov	 QWORD PTR [rax+rcx], rdx
$LN2@PxSocketSe@3:

; 8311 : 
; 8312 :     if (closesocket(o->sock_fd) == SOCKET_ERROR) {

  002e9	48 8b 44 24 58	 mov	 rax, QWORD PTR o$[rsp]
  002ee	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  002f2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_closesocket

; 8313 :         /* xxx: which error is more important? */
; 8314 :         /* x->errorhandler(); */
; 8315 :     }
; 8316 : 
; 8317 :     assert(x);

  002f8	48 83 7c 24 28
	00		 cmp	 QWORD PTR x$[rsp], 0
  002fe	75 1c		 jne	 SHORT $LN15@PxSocketSe@3
  00300	41 b8 7d 20 00
	00		 mov	 r8d, 8317		; 0000207dH
  00306	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0030d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_13HADAKIJA@?$AAx?$AA?$AA@
  00314	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0031a	33 c0		 xor	 eax, eax
$LN15@PxSocketSe@3:

; 8318 :     PxSocket_CallbackComplete(x);

  0031c	48 8b 4c 24 28	 mov	 rcx, QWORD PTR x$[rsp]
  00321	e8 00 00 00 00	 call	 PxSocket_CallbackComplete

; 8319 :     return NULL;

  00326	33 c0		 xor	 eax, eax
$LN7@PxSocketSe@3:

; 8320 : }

  00328	48 83 c4 68	 add	 rsp, 104		; 00000068H
  0032c	c3		 ret	 0
PxSocketServer_CreateClientSocket ENDP
_TEXT	ENDS
PUBLIC	??_C@_1CM@ICHLLEFO@?$AAP?$AAx?$AAS?$AAo?$AAc?$AAk?$AAe?$AAt?$AA_?$AAI?$AAS?$AA_?$AAS?$AAE?$AAR?$AAV?$AAE?$AAR?$AA?$CI?$AAs?$AA?$CJ?$AA?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$PxSocketServer_AllocClientSockets DD imagerel $LN14
	DD	imagerel $LN14+321
	DD	imagerel $unwind$PxSocketServer_AllocClientSockets
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PxSocketServer_AllocClientSockets DD 010d01H
	DD	0a20dH
xdata	ENDS
;	COMDAT ??_C@_1CM@ICHLLEFO@?$AAP?$AAx?$AAS?$AAo?$AAc?$AAk?$AAe?$AAt?$AA_?$AAI?$AAS?$AA_?$AAS?$AAE?$AAR?$AAV?$AAE?$AAR?$AA?$CI?$AAs?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CM@ICHLLEFO@?$AAP?$AAx?$AAS?$AAo?$AAc?$AAk?$AAe?$AAt?$AA_?$AAI?$AAS?$AA_?$AAS?$AAE?$AAR?$AAV?$AAE?$AAR?$AA?$CI?$AAs?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'x', 00H, 'S', 00H, 'o', 00H, 'c', 00H, 'k', 00H, 'e', 00H
	DB	't', 00H, '_', 00H, 'I', 00H, 'S', 00H, '_', 00H, 'S', 00H, 'E'
	DB	00H, 'R', 00H, 'V', 00H, 'E', 00H, 'R', 00H, '(', 00H, 's', 00H
	DB	')', 00H, 00H, 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PxSocketServer_AllocClientSockets
_TEXT	SEGMENT
first$ = 32
x$ = 40
last$ = 48
i$ = 56
c$ = 64
s$ = 96
n$ = 104
PxSocketServer_AllocClientSockets PROC			; COMDAT

; 8324 : {

$LN14:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 8325 :     int i;
; 8326 :     Context  *c = s->ctx;

  0000d	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00012	48 8b 80 00 02
	00 00		 mov	 rax, QWORD PTR [rax+512]
  00019	48 89 44 24 40	 mov	 QWORD PTR c$[rsp], rax

; 8327 :     PxSocket *first = NULL;

  0001e	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR first$[rsp], 0

; 8328 :     PxSocket *last = NULL;

  00027	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR last$[rsp], 0

; 8329 :     PxSocket *x;
; 8330 : 
; 8331 :     assert(PxSocket_IS_SERVER(s));

  00030	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  00035	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  0003b	83 e0 02	 and	 eax, 2
  0003e	85 c0		 test	 eax, eax
  00040	75 1c		 jne	 SHORT $LN13@PxSocketSe@4
  00042	41 b8 8b 20 00
	00		 mov	 r8d, 8331		; 0000208bH
  00048	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0004f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@ICHLLEFO@?$AAP?$AAx?$AAS?$AAo?$AAc?$AAk?$AAe?$AAt?$AA_?$AAI?$AAS?$AA_?$AAS?$AAE?$AAR?$AAV?$AAE?$AAR?$AA?$CI?$AAs?$AA?$CJ?$AA?$AA@
  00056	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0005c	33 c0		 xor	 eax, eax
$LN13@PxSocketSe@4:

; 8332 : 
; 8333 :     if (!n)

  0005e	83 7c 24 68 00	 cmp	 DWORD PTR n$[rsp], 0
  00063	75 0f		 jne	 SHORT $LN10@PxSocketSe@4

; 8334 :         n = s->preallocate;

  00065	48 8b 44 24 60	 mov	 rax, QWORD PTR s$[rsp]
  0006a	8b 80 8c 03 00
	00		 mov	 eax, DWORD PTR [rax+908]
  00070	89 44 24 68	 mov	 DWORD PTR n$[rsp], eax
$LN10@PxSocketSe@4:

; 8335 : 
; 8336 :     for (i = 0; i < n; i++) {

  00074	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  0007c	eb 0a		 jmp	 SHORT $LN9@PxSocketSe@4
$LN8@PxSocketSe@4:
  0007e	8b 44 24 38	 mov	 eax, DWORD PTR i$[rsp]
  00082	ff c0		 inc	 eax
  00084	89 44 24 38	 mov	 DWORD PTR i$[rsp], eax
$LN9@PxSocketSe@4:
  00088	8b 44 24 68	 mov	 eax, DWORD PTR n$[rsp]
  0008c	39 44 24 38	 cmp	 DWORD PTR i$[rsp], eax
  00090	7d 6b		 jge	 SHORT $LN7@PxSocketSe@4

; 8337 :         x = PxSocketServer_CreateClientSocket(s);

  00092	48 8b 4c 24 60	 mov	 rcx, QWORD PTR s$[rsp]
  00097	e8 00 00 00 00	 call	 PxSocketServer_CreateClientSocket
  0009c	48 89 44 24 28	 mov	 QWORD PTR x$[rsp], rax

; 8338 :         if (!x)

  000a1	48 83 7c 24 28
	00		 cmp	 QWORD PTR x$[rsp], 0
  000a7	75 02		 jne	 SHORT $LN6@PxSocketSe@4

; 8339 :             goto error;

  000a9	eb 59		 jmp	 SHORT $error$131959
$LN6@PxSocketSe@4:

; 8340 : 
; 8341 :         if (!first)

  000ab	48 83 7c 24 20
	00		 cmp	 QWORD PTR first$[rsp], 0
  000b1	75 0c		 jne	 SHORT $LN5@PxSocketSe@4

; 8342 :             first = x;

  000b3	48 8b 44 24 28	 mov	 rax, QWORD PTR x$[rsp]
  000b8	48 89 44 24 20	 mov	 QWORD PTR first$[rsp], rax

; 8343 :         else

  000bd	eb 11		 jmp	 SHORT $LN4@PxSocketSe@4
$LN5@PxSocketSe@4:

; 8344 :             last->next = x;

  000bf	48 8b 44 24 30	 mov	 rax, QWORD PTR last$[rsp]
  000c4	48 8b 4c 24 28	 mov	 rcx, QWORD PTR x$[rsp]
  000c9	48 89 88 40 04
	00 00		 mov	 QWORD PTR [rax+1088], rcx
$LN4@PxSocketSe@4:

; 8345 : 
; 8346 :         x->prev = last;

  000d0	48 8b 44 24 28	 mov	 rax, QWORD PTR x$[rsp]
  000d5	48 8b 4c 24 30	 mov	 rcx, QWORD PTR last$[rsp]
  000da	48 89 88 38 04
	00 00		 mov	 QWORD PTR [rax+1080], rcx

; 8347 :         last = x;

  000e1	48 8b 44 24 28	 mov	 rax, QWORD PTR x$[rsp]
  000e6	48 89 44 24 30	 mov	 QWORD PTR last$[rsp], rax

; 8348 : 
; 8349 :         x->next = NULL;

  000eb	48 8b 44 24 28	 mov	 rax, QWORD PTR x$[rsp]
  000f0	48 c7 80 40 04
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+1088], 0

; 8350 :     }

  000fb	eb 81		 jmp	 SHORT $LN8@PxSocketSe@4
$LN7@PxSocketSe@4:

; 8351 : 
; 8352 :     return first;

  000fd	48 8b 44 24 20	 mov	 rax, QWORD PTR first$[rsp]
  00102	eb 38		 jmp	 SHORT $LN11@PxSocketSe@4
$error$131959:

; 8353 : 
; 8354 : error:
; 8355 :     for (x = first; x; x = x->next)

  00104	48 8b 44 24 20	 mov	 rax, QWORD PTR first$[rsp]
  00109	48 89 44 24 28	 mov	 QWORD PTR x$[rsp], rax
  0010e	eb 11		 jmp	 SHORT $LN3@PxSocketSe@4
$LN2@PxSocketSe@4:
  00110	48 8b 44 24 28	 mov	 rax, QWORD PTR x$[rsp]
  00115	48 8b 80 40 04
	00 00		 mov	 rax, QWORD PTR [rax+1088]
  0011c	48 89 44 24 28	 mov	 QWORD PTR x$[rsp], rax
$LN3@PxSocketSe@4:
  00121	48 83 7c 24 28
	00		 cmp	 QWORD PTR x$[rsp], 0
  00127	74 11		 je	 SHORT $LN1@PxSocketSe@4

; 8356 :         (void)closesocket(x->sock_fd);

  00129	48 8b 44 24 28	 mov	 rax, QWORD PTR x$[rsp]
  0012e	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00132	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_closesocket
  00138	eb d6		 jmp	 SHORT $LN2@PxSocketSe@4
$LN1@PxSocketSe@4:

; 8357 : 
; 8358 :     return NULL;

  0013a	33 c0		 xor	 eax, eax
$LN11@PxSocketSe@4:

; 8359 : }

  0013c	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00140	c3		 ret	 0
PxSocketServer_AllocClientSockets ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BM@MPJNDEE@TrySubmitThreadpoolCallback?$AA@ ; `string'
PUBLIC	??_C@_0P@EGNBEKMI@WSACreateEvent?$AA@		; `string'
PUBLIC	??_C@_1EE@DDJLMEAK@?$AAo?$AA?9?$AA?$DO?$AAr?$AAb?$AAu?$AAf?$AA?9?$AA?$DO?$AAw?$AA?4?$AAl?$AAe?$AAn?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAo?$AA?9?$AA?$DO?$AAr?$AAe?$AAc?$AAv?$AAb?$AAu?$AAf?$AA_?$AAs?$AAi?$AAz@ ; `string'
PUBLIC	??_C@_0M@MEDOMCAA@CreateEvent?$AA@		; `string'
PUBLIC	??_C@_06OODDLKLE@listen?$AA@			; `string'
PUBLIC	??_C@_0BF@BDJAIBDI@PxSocketServer_Start?$AA@	; `string'
PUBLIC	PxSocketServer_Start
EXTRN	__imp_WSACreateEvent:PROC
EXTRN	__imp_listen:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PxSocketServer_Start DD imagerel $LN69
	DD	imagerel $LN69+2068
	DD	imagerel $unwind$PxSocketServer_Start
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PxSocketServer_Start DD 021101H
	DD	0190111H
xdata	ENDS
;	COMDAT ??_C@_0BM@MPJNDEE@TrySubmitThreadpoolCallback?$AA@
CONST	SEGMENT
??_C@_0BM@MPJNDEE@TrySubmitThreadpoolCallback?$AA@ DB 'TrySubmitThreadpoo'
	DB	'lCallback', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@EGNBEKMI@WSACreateEvent?$AA@
CONST	SEGMENT
??_C@_0P@EGNBEKMI@WSACreateEvent?$AA@ DB 'WSACreateEvent', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EE@DDJLMEAK@?$AAo?$AA?9?$AA?$DO?$AAr?$AAb?$AAu?$AAf?$AA?9?$AA?$DO?$AAw?$AA?4?$AAl?$AAe?$AAn?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAo?$AA?9?$AA?$DO?$AAr?$AAe?$AAc?$AAv?$AAb?$AAu?$AAf?$AA_?$AAs?$AAi?$AAz@
CONST	SEGMENT
??_C@_1EE@DDJLMEAK@?$AAo?$AA?9?$AA?$DO?$AAr?$AAb?$AAu?$AAf?$AA?9?$AA?$DO?$AAw?$AA?4?$AAl?$AAe?$AAn?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAo?$AA?9?$AA?$DO?$AAr?$AAe?$AAc?$AAv?$AAb?$AAu?$AAf?$AA_?$AAs?$AAi?$AAz@ DB 'o'
	DB	00H, '-', 00H, '>', 00H, 'r', 00H, 'b', 00H, 'u', 00H, 'f', 00H
	DB	'-', 00H, '>', 00H, 'w', 00H, '.', 00H, 'l', 00H, 'e', 00H, 'n'
	DB	00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'o', 00H, '-', 00H
	DB	'>', 00H, 'r', 00H, 'e', 00H, 'c', 00H, 'v', 00H, 'b', 00H, 'u'
	DB	00H, 'f', 00H, '_', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MEDOMCAA@CreateEvent?$AA@
CONST	SEGMENT
??_C@_0M@MEDOMCAA@CreateEvent?$AA@ DB 'CreateEvent', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06OODDLKLE@listen?$AA@
CONST	SEGMENT
??_C@_06OODDLKLE@listen?$AA@ DB 'listen', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@BDJAIBDI@PxSocketServer_Start?$AA@
CONST	SEGMENT
??_C@_0BF@BDJAIBDI@PxSocketServer_Start?$AA@ DB 'PxSocketServer_Start', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PxSocketServer_Start
_TEXT	SEGMENT
x$ = 64
last$ = 72
s$ = 80
failed$ = 88
last_error$ = 92
bufsize$ = 96
success$ = 100
error$ = 104
size$ = 108
len$ = 112
px$ = 120
sa$ = 128
buf$ = 136
result$ = 144
c$ = 152
tp$ = 160
o$ = 168
cb$ = 176
tv288 = 184
instance$ = 208
context$ = 216
PxSocketServer_Start PROC				; COMDAT

; 8364 : {

$LN69:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H

; 8365 :     Context *c = (Context *)context;

  00011	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR context$[rsp]
  00019	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR c$[rsp], rax

; 8366 :     PxState *px;
; 8367 :     PTP_WIN32_IO_CALLBACK cb;
; 8368 :     BOOL error;
; 8369 :     BOOL success;
; 8370 :     char failed = 0;

  00021	c6 44 24 58 00	 mov	 BYTE PTR failed$[rsp], 0

; 8371 :     struct sockaddr *sa;
; 8372 :     int len;
; 8373 :     DWORD size, bufsize, last_error;
; 8374 :     char *buf = NULL;

  00026	48 c7 84 24 88
	00 00 00 00 00
	00 00		 mov	 QWORD PTR buf$[rsp], 0

; 8375 :     PyObject *result = NULL;

  00032	48 c7 84 24 90
	00 00 00 00 00
	00 00		 mov	 QWORD PTR result$[rsp], 0

; 8376 :     PxSocket *s = (PxSocket *)c->io_obj;

  0003e	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  00046	48 8b 80 a8 32
	00 00		 mov	 rax, QWORD PTR [rax+12968]
  0004d	48 89 44 24 50	 mov	 QWORD PTR s$[rsp], rax

; 8377 :     PxSocket *o, *last;
; 8378 :     Context  *x;
; 8379 :     PyTypeObject *tp = &PxSocket_Type;

  00052	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PxSocket_Type
  00059	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR tp$[rsp], rax

; 8380 : 
; 8381 :     Px_GUARD

  00061	e8 00 00 00 00	 call	 _Py_PXCTX
  00066	85 c0		 test	 eax, eax
  00068	75 1f		 jne	 SHORT $LN55@PxSocketSe@5
  0006a	41 b9 01 00 00
	00		 mov	 r9d, 1
  00070	41 b8 bd 20 00
	00		 mov	 r8d, 8381		; 000020bdH
  00076	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@PGHBGAOD@?4?4?2Python?2pyparallel?4c?$AA@
  0007d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@BDJAIBDI@PxSocketServer_Start?$AA@
  00084	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN55@PxSocketSe@5:

; 8382 : 
; 8383 :     ENTERED_CALLBACK();

  00089	48 8b 94 24 d0
	00 00 00	 mov	 rdx, QWORD PTR instance$[rsp]
  00091	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  00099	e8 00 00 00 00	 call	 _PyParallel_EnteredCallback

; 8384 : 
; 8385 :     assert(s->protocol_type);

  0009e	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  000a3	48 83 b8 88 02
	00 00 00	 cmp	 QWORD PTR [rax+648], 0
  000ab	75 1c		 jne	 SHORT $LN58@PxSocketSe@5
  000ad	41 b8 c1 20 00
	00		 mov	 r8d, 8385		; 000020c1H
  000b3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  000ba	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CC@CADBFOEC@?$AAs?$AA?9?$AA?$DO?$AAp?$AAr?$AAo?$AAt?$AAo?$AAc?$AAo?$AAl?$AA_?$AAt?$AAy?$AAp?$AAe?$AA?$AA@
  000c1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000c7	33 c0		 xor	 eax, eax
$LN58@PxSocketSe@5:

; 8386 :     assert(s->protocol);

  000c9	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  000ce	48 83 b8 90 02
	00 00 00	 cmp	 QWORD PTR [rax+656], 0
  000d6	75 1c		 jne	 SHORT $LN59@PxSocketSe@5
  000d8	41 b8 c2 20 00
	00		 mov	 r8d, 8386		; 000020c2H
  000de	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  000e5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BI@KAKHJKLI@?$AAs?$AA?9?$AA?$DO?$AAp?$AAr?$AAo?$AAt?$AAo?$AAc?$AAo?$AAl?$AA?$AA@
  000ec	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000f2	33 c0		 xor	 eax, eax
$LN59@PxSocketSe@5:

; 8387 : 
; 8388 :     PxSocket_InitExceptionHandler(s);

  000f4	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  000f9	e8 00 00 00 00	 call	 PxSocket_InitExceptionHandler

; 8389 : 
; 8390 :     assert(PxSocket_IS_SERVER(s));

  000fe	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00103	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  00109	83 e0 02	 and	 eax, 2
  0010c	85 c0		 test	 eax, eax
  0010e	75 1c		 jne	 SHORT $LN60@PxSocketSe@5
  00110	41 b8 c6 20 00
	00		 mov	 r8d, 8390		; 000020c6H
  00116	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0011d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@ICHLLEFO@?$AAP?$AAx?$AAS?$AAo?$AAc?$AAk?$AAe?$AAt?$AA_?$AAI?$AAS?$AA_?$AAS?$AAE?$AAR?$AAV?$AAE?$AAR?$AA?$CI?$AAs?$AA?$CJ?$AA?$AA@
  00124	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0012a	33 c0		 xor	 eax, eax
$LN60@PxSocketSe@5:

; 8391 : 
; 8392 :     assert(s->protocol);

  0012c	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00131	48 83 b8 90 02
	00 00 00	 cmp	 QWORD PTR [rax+656], 0
  00139	75 1c		 jne	 SHORT $LN61@PxSocketSe@5
  0013b	41 b8 c8 20 00
	00		 mov	 r8d, 8392		; 000020c8H
  00141	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00148	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BI@KAKHJKLI@?$AAs?$AA?9?$AA?$DO?$AAp?$AAr?$AAo?$AAt?$AAo?$AAc?$AAo?$AAl?$AA?$AA@
  0014f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00155	33 c0		 xor	 eax, eax
$LN61@PxSocketSe@5:

; 8393 :     assert(!PyErr_Occurred());

  00157	e8 00 00 00 00	 call	 PyErr_Occurred
  0015c	48 85 c0	 test	 rax, rax
  0015f	74 1c		 je	 SHORT $LN62@PxSocketSe@5
  00161	41 b8 c9 20 00
	00		 mov	 r8d, 8393		; 000020c9H
  00167	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0016e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CE@JKFGJBND@?$AA?$CB?$AAP?$AAy?$AAE?$AAr?$AAr?$AA_?$AAO?$AAc?$AAc?$AAu?$AAr?$AAr?$AAe?$AAd?$AA?$CI?$AA?$CJ?$AA?$AA@
  00175	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0017b	33 c0		 xor	 eax, eax
$LN62@PxSocketSe@5:

; 8394 : 
; 8395 :     s->freelist = _PyHeap_NewList(c);

  0017d	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  00185	e8 00 00 00 00	 call	 _PyHeap_NewList
  0018a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  0018f	48 89 81 b0 03
	00 00		 mov	 QWORD PTR [rcx+944], rax

; 8396 :     if (!s->freelist)

  00196	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0019b	48 83 b8 b0 03
	00 00 00	 cmp	 QWORD PTR [rax+944], 0
  001a3	75 4b		 jne	 SHORT $LN54@PxSocketSe@5
$LN53@PxSocketSe@5:

; 8397 :         PxSocket_FATAL();

  001a5	e8 00 00 00 00	 call	 PyErr_Occurred
  001aa	48 85 c0	 test	 rax, rax
  001ad	75 1c		 jne	 SHORT $LN63@PxSocketSe@5
  001af	41 b8 cd 20 00
	00		 mov	 r8d, 8397		; 000020cdH
  001b5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  001bc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CC@DNBCFJEA@?$AAP?$AAy?$AAE?$AAr?$AAr?$AA_?$AAO?$AAc?$AAc?$AAu?$AAr?$AAr?$AAe?$AAd?$AA?$CI?$AA?$CJ?$AA?$AA@
  001c3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001c9	33 c0		 xor	 eax, eax
$LN63@PxSocketSe@5:
  001cb	41 b8 01 00 00
	00		 mov	 r8d, 1
  001d1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  001d8	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  001e0	e8 00 00 00 00	 call	 PxSocket_HandleException
  001e5	e9 22 06 00 00	 jmp	 $end$132009
  001ea	33 c0		 xor	 eax, eax
  001ec	85 c0		 test	 eax, eax
  001ee	75 b5		 jne	 SHORT $LN53@PxSocketSe@5
$LN54@PxSocketSe@5:

; 8398 : 
; 8399 :     if (!PxSocket_InitInitialBytes(s))

  001f0	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  001f5	e8 00 00 00 00	 call	 PxSocket_InitInitialBytes
  001fa	85 c0		 test	 eax, eax
  001fc	75 4b		 jne	 SHORT $LN50@PxSocketSe@5
$LN49@PxSocketSe@5:

; 8400 :         PxSocket_FATAL();

  001fe	e8 00 00 00 00	 call	 PyErr_Occurred
  00203	48 85 c0	 test	 rax, rax
  00206	75 1c		 jne	 SHORT $LN64@PxSocketSe@5
  00208	41 b8 d0 20 00
	00		 mov	 r8d, 8400		; 000020d0H
  0020e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00215	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CC@DNBCFJEA@?$AAP?$AAy?$AAE?$AAr?$AAr?$AA_?$AAO?$AAc?$AAc?$AAu?$AAr?$AAr?$AAe?$AAd?$AA?$CI?$AA?$CJ?$AA?$AA@
  0021c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00222	33 c0		 xor	 eax, eax
$LN64@PxSocketSe@5:
  00224	41 b8 01 00 00
	00		 mov	 r8d, 1
  0022a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  00231	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  00239	e8 00 00 00 00	 call	 PxSocket_HandleException
  0023e	e9 c9 05 00 00	 jmp	 $end$132009
  00243	33 c0		 xor	 eax, eax
  00245	85 c0		 test	 eax, eax
  00247	75 b5		 jne	 SHORT $LN49@PxSocketSe@5
$LN50@PxSocketSe@5:

; 8401 : 
; 8402 :     px = c->px;

  00249	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR c$[rsp]
  00251	48 8b 80 d8 00
	00 00		 mov	 rax, QWORD PTR [rax+216]
  00258	48 89 44 24 78	 mov	 QWORD PTR px$[rsp], rax

; 8403 :     s->io_op = PxSocket_IO_ACCEPT;

  0025d	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00262	c7 80 50 03 00
	00 02 00 00 00	 mov	 DWORD PTR [rax+848], 2

; 8404 : 
; 8405 :     sa = (struct sockaddr *)&(s->local_addr.in);

  0026c	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00271	48 05 e8 00 00
	00		 add	 rax, 232		; 000000e8H
  00277	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR sa$[rsp], rax

; 8406 :     len = s->local_addr_len;

  0027f	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00284	8b 80 68 01 00
	00		 mov	 eax, DWORD PTR [rax+360]
  0028a	89 44 24 70	 mov	 DWORD PTR len$[rsp], eax

; 8407 :     if (bind(s->sock_fd, sa, len) == SOCKET_ERROR)

  0028e	44 8b 44 24 70	 mov	 r8d, DWORD PTR len$[rsp]
  00293	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR sa$[rsp]
  0029b	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  002a0	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  002a4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_bind
  002aa	83 f8 ff	 cmp	 eax, -1
  002ad	75 32		 jne	 SHORT $LN46@PxSocketSe@5
$LN45@PxSocketSe@5:

; 8408 :         PxSocket_WSAERROR("bind");

  002af	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WSAGetLastError
  002b5	8b c8		 mov	 ecx, eax
  002b7	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
  002bc	41 b8 01 00 00
	00		 mov	 r8d, 1
  002c2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04NPNJNMMP@bind?$AA@
  002c9	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  002d1	e8 00 00 00 00	 call	 PxSocket_HandleException
  002d6	e9 31 05 00 00	 jmp	 $end$132009
  002db	33 c0		 xor	 eax, eax
  002dd	85 c0		 test	 eax, eax
  002df	75 ce		 jne	 SHORT $LN45@PxSocketSe@5
$LN46@PxSocketSe@5:

; 8409 : 
; 8410 :     if (listen(s->sock_fd, SOMAXCONN) == SOCKET_ERROR)

  002e1	ba ff ff ff 7f	 mov	 edx, 2147483647		; 7fffffffH
  002e6	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  002eb	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  002ef	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_listen
  002f5	83 f8 ff	 cmp	 eax, -1
  002f8	75 32		 jne	 SHORT $LN42@PxSocketSe@5
$LN41@PxSocketSe@5:

; 8411 :         PxSocket_WSAERROR("listen");

  002fa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WSAGetLastError
  00300	8b c8		 mov	 ecx, eax
  00302	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
  00307	41 b8 01 00 00
	00		 mov	 r8d, 1
  0030d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06OODDLKLE@listen?$AA@
  00314	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  0031c	e8 00 00 00 00	 call	 PxSocket_HandleException
  00321	e9 e6 04 00 00	 jmp	 $end$132009
  00326	33 c0		 xor	 eax, eax
  00328	85 c0		 test	 eax, eax
  0032a	75 ce		 jne	 SHORT $LN41@PxSocketSe@5
$LN42@PxSocketSe@5:

; 8412 : 
; 8413 :     s->first = PxSocketServer_AllocClientSockets(s, 0);

  0032c	33 d2		 xor	 edx, edx
  0032e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  00333	e8 00 00 00 00	 call	 PxSocketServer_AllocClientSockets
  00338	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  0033d	48 89 81 a0 03
	00 00		 mov	 QWORD PTR [rcx+928], rax

; 8414 :     if (!s->first)

  00344	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00349	48 83 b8 a0 03
	00 00 00	 cmp	 QWORD PTR [rax+928], 0
  00351	75 4b		 jne	 SHORT $LN38@PxSocketSe@5
$LN37@PxSocketSe@5:

; 8415 :         PxSocket_FATAL();

  00353	e8 00 00 00 00	 call	 PyErr_Occurred
  00358	48 85 c0	 test	 rax, rax
  0035b	75 1c		 jne	 SHORT $LN65@PxSocketSe@5
  0035d	41 b8 df 20 00
	00		 mov	 r8d, 8415		; 000020dfH
  00363	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  0036a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CC@DNBCFJEA@?$AAP?$AAy?$AAE?$AAr?$AAr?$AA_?$AAO?$AAc?$AAc?$AAu?$AAr?$AAr?$AAe?$AAd?$AA?$CI?$AA?$CJ?$AA?$AA@
  00371	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00377	33 c0		 xor	 eax, eax
$LN65@PxSocketSe@5:
  00379	41 b8 01 00 00
	00		 mov	 r8d, 1
  0037f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  00386	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  0038e	e8 00 00 00 00	 call	 PxSocket_HandleException
  00393	e9 74 04 00 00	 jmp	 $end$132009
  00398	33 c0		 xor	 eax, eax
  0039a	85 c0		 test	 eax, eax
  0039c	75 b5		 jne	 SHORT $LN37@PxSocketSe@5
$LN38@PxSocketSe@5:

; 8416 : 
; 8417 :     cb = PxSocketServer_AcceptCallback;

  0039e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PxSocketServer_AcceptCallback
  003a5	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR cb$[rsp], rax

; 8418 :     s->tp_io = CreateThreadpoolIo((HANDLE)s->sock_fd, cb, c, NULL);

  003ad	45 33 c9	 xor	 r9d, r9d
  003b0	4c 8b 84 24 98
	00 00 00	 mov	 r8, QWORD PTR c$[rsp]
  003b8	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR cb$[rsp]
  003c0	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  003c5	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  003c9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateThreadpoolIo
  003cf	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  003d4	48 89 81 58 03
	00 00		 mov	 QWORD PTR [rcx+856], rax

; 8419 :     if (!s->tp_io)

  003db	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  003e0	48 83 b8 58 03
	00 00 00	 cmp	 QWORD PTR [rax+856], 0
  003e8	75 2c		 jne	 SHORT $LN34@PxSocketSe@5
$LN33@PxSocketSe@5:

; 8420 :         PxSocket_SYSERROR("CreateThreadpoolIo");

  003ea	33 c9		 xor	 ecx, ecx
  003ec	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
  003f1	41 b8 01 00 00
	00		 mov	 r8d, 1
  003f7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@BIALAGNA@CreateThreadpoolIo?$AA@
  003fe	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  00406	e8 00 00 00 00	 call	 PxSocket_HandleException
  0040b	e9 fc 03 00 00	 jmp	 $end$132009
  00410	33 c0		 xor	 eax, eax
  00412	85 c0		 test	 eax, eax
  00414	75 d4		 jne	 SHORT $LN33@PxSocketSe@5
$LN34@PxSocketSe@5:

; 8421 : 
; 8422 :     s->more_accepts = CreateEvent(0, 0, 0, 0);

  00416	45 33 c9	 xor	 r9d, r9d
  00419	45 33 c0	 xor	 r8d, r8d
  0041c	33 d2		 xor	 edx, edx
  0041e	33 c9		 xor	 ecx, ecx
  00420	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateEventW
  00426	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  0042b	48 89 81 f8 03
	00 00		 mov	 QWORD PTR [rcx+1016], rax

; 8423 :     if (!s->more_accepts)

  00432	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00437	48 83 b8 f8 03
	00 00 00	 cmp	 QWORD PTR [rax+1016], 0
  0043f	75 2c		 jne	 SHORT $LN30@PxSocketSe@5
$LN29@PxSocketSe@5:

; 8424 :         PxSocket_SYSERROR("CreateEvent");

  00441	33 c9		 xor	 ecx, ecx
  00443	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
  00448	41 b8 01 00 00
	00		 mov	 r8d, 1
  0044e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@MEDOMCAA@CreateEvent?$AA@
  00455	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  0045d	e8 00 00 00 00	 call	 PxSocket_HandleException
  00462	e9 a5 03 00 00	 jmp	 $end$132009
  00467	33 c0		 xor	 eax, eax
  00469	85 c0		 test	 eax, eax
  0046b	75 d4		 jne	 SHORT $LN29@PxSocketSe@5
$LN30@PxSocketSe@5:

; 8425 : 
; 8426 :     s->shutdown = CreateEvent(0, 0, 0, 0);

  0046d	45 33 c9	 xor	 r9d, r9d
  00470	45 33 c0	 xor	 r8d, r8d
  00473	33 d2		 xor	 edx, edx
  00475	33 c9		 xor	 ecx, ecx
  00477	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateEventW
  0047d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  00482	48 89 81 00 04
	00 00		 mov	 QWORD PTR [rcx+1024], rax

; 8427 :     if (!s->shutdown)

  00489	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0048e	48 83 b8 00 04
	00 00 00	 cmp	 QWORD PTR [rax+1024], 0
  00496	75 2c		 jne	 SHORT $LN26@PxSocketSe@5
$LN25@PxSocketSe@5:

; 8428 :         PxSocket_SYSERROR("CreateEvent");

  00498	33 c9		 xor	 ecx, ecx
  0049a	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
  0049f	41 b8 01 00 00
	00		 mov	 r8d, 1
  004a5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@MEDOMCAA@CreateEvent?$AA@
  004ac	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  004b4	e8 00 00 00 00	 call	 PxSocket_HandleException
  004b9	e9 4e 03 00 00	 jmp	 $end$132009
  004be	33 c0		 xor	 eax, eax
  004c0	85 c0		 test	 eax, eax
  004c2	75 d4		 jne	 SHORT $LN25@PxSocketSe@5
$LN26@PxSocketSe@5:

; 8429 : 
; 8430 :     size = sizeof(struct sockaddr_in) + 16;

  004c4	c7 44 24 6c 20
	00 00 00	 mov	 DWORD PTR size$[rsp], 32 ; 00000020H

; 8431 :     if (PxSocket_HAS_INITIAL_BYTES(s))

  004cc	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  004d1	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  004d7	25 00 01 00 00	 and	 eax, 256		; 00000100H
  004dc	85 c0		 test	 eax, eax
  004de	74 0a		 je	 SHORT $LN22@PxSocketSe@5

; 8432 :         bufsize = 0;

  004e0	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR bufsize$[rsp], 0

; 8433 :     else

  004e8	eb 19		 jmp	 SHORT $LN21@PxSocketSe@5
$LN22@PxSocketSe@5:

; 8434 :         bufsize = (DWORD)(s->recvbuf_size - (size * 2));

  004ea	8b 44 24 6c	 mov	 eax, DWORD PTR size$[rsp]
  004ee	d1 e0		 shl	 eax, 1
  004f0	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  004f5	8b 89 60 02 00
	00		 mov	 ecx, DWORD PTR [rcx+608]
  004fb	2b c8		 sub	 ecx, eax
  004fd	8b c1		 mov	 eax, ecx
  004ff	89 44 24 60	 mov	 DWORD PTR bufsize$[rsp], eax
$LN21@PxSocketSe@5:

; 8435 : 
; 8436 :     for (o = s->first; o; o = o->next) {

  00503	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00508	48 8b 80 a0 03
	00 00		 mov	 rax, QWORD PTR [rax+928]
  0050f	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR o$[rsp], rax
  00517	eb 17		 jmp	 SHORT $LN20@PxSocketSe@5
$LN19@PxSocketSe@5:
  00519	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR o$[rsp]
  00521	48 8b 80 40 04
	00 00		 mov	 rax, QWORD PTR [rax+1088]
  00528	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR o$[rsp], rax
$LN20@PxSocketSe@5:
  00530	48 83 bc 24 a8
	00 00 00 00	 cmp	 QWORD PTR o$[rsp], 0
  00539	0f 84 49 01 00
	00		 je	 $LN18@PxSocketSe@5

; 8437 :         o->io_op = PxSocket_IO_ACCEPT;

  0053f	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR o$[rsp]
  00547	c7 80 50 03 00
	00 02 00 00 00	 mov	 DWORD PTR [rax+848], 2

; 8438 :         x = o->ctx;

  00551	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR o$[rsp]
  00559	48 8b 80 00 02
	00 00		 mov	 rax, QWORD PTR [rax+512]
  00560	48 89 44 24 40	 mov	 QWORD PTR x$[rsp], rax

; 8439 :         assert(o->rbuf->w.len == o->recvbuf_size);

  00565	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR o$[rsp]
  0056d	48 8b 80 70 03
	00 00		 mov	 rax, QWORD PTR [rax+880]
  00574	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR o$[rsp]
  0057c	8b 89 60 02 00
	00		 mov	 ecx, DWORD PTR [rcx+608]
  00582	39 48 40	 cmp	 DWORD PTR [rax+64], ecx
  00585	74 1c		 je	 SHORT $LN66@PxSocketSe@5
  00587	41 b8 f7 20 00
	00		 mov	 r8d, 8439		; 000020f7H
  0058d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00594	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@DDJLMEAK@?$AAo?$AA?9?$AA?$DO?$AAr?$AAb?$AAu?$AAf?$AA?9?$AA?$DO?$AAw?$AA?4?$AAl?$AAe?$AAn?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAo?$AA?9?$AA?$DO?$AAr?$AAe?$AAc?$AAv?$AAb?$AAu?$AAf?$AA_?$AAs?$AAi?$AAz@
  0059b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  005a1	33 c0		 xor	 eax, eax
$LN66@PxSocketSe@5:

; 8440 : 
; 8441 :         StartThreadpoolIo(s->tp_io);

  005a3	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  005a8	48 8b 88 58 03
	00 00		 mov	 rcx, QWORD PTR [rax+856]
  005af	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_StartThreadpoolIo

; 8442 :         success = AcceptEx(s->sock_fd,
; 8443 :                            o->sock_fd,
; 8444 :                            o->rbuf->w.buf,
; 8445 :                            bufsize,
; 8446 :                            size,
; 8447 :                            size,
; 8448 :                            &(o->rbytes),
; 8449 :                            &(x->overlapped));

  005b5	48 8b 44 24 40	 mov	 rax, QWORD PTR x$[rsp]
  005ba	48 05 b0 32 00
	00		 add	 rax, 12976		; 000032b0H
  005c0	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR o$[rsp]
  005c8	48 81 c1 b8 03
	00 00		 add	 rcx, 952		; 000003b8H
  005cf	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR o$[rsp]
  005d7	48 8b 92 70 03
	00 00		 mov	 rdx, QWORD PTR [rdx+880]
  005de	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  005e3	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  005e8	8b 44 24 6c	 mov	 eax, DWORD PTR size$[rsp]
  005ec	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  005f0	8b 44 24 6c	 mov	 eax, DWORD PTR size$[rsp]
  005f4	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  005f8	44 8b 4c 24 60	 mov	 r9d, DWORD PTR bufsize$[rsp]
  005fd	4c 8b 42 48	 mov	 r8, QWORD PTR [rdx+72]
  00601	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR o$[rsp]
  00609	48 8b 50 60	 mov	 rdx, QWORD PTR [rax+96]
  0060d	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00612	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00616	ff 15 48 00 00
	00		 call	 QWORD PTR PySocketModule+72
  0061c	89 44 24 64	 mov	 DWORD PTR success$[rsp], eax

; 8450 : 
; 8451 :         last_error = WSAGetLastError();

  00620	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WSAGetLastError
  00626	89 44 24 5c	 mov	 DWORD PTR last_error$[rsp], eax

; 8452 :         error = (
; 8453 :             !success && (
; 8454 :                 (last_error != WSA_IO_PENDING) &&
; 8455 :                 (last_error != WSAECONNRESET)
; 8456 :             )
; 8457 :         );

  0062a	83 7c 24 64 00	 cmp	 DWORD PTR success$[rsp], 0
  0062f	75 21		 jne	 SHORT $LN67@PxSocketSe@5
  00631	81 7c 24 5c e5
	03 00 00	 cmp	 DWORD PTR last_error$[rsp], 997 ; 000003e5H
  00639	74 17		 je	 SHORT $LN67@PxSocketSe@5
  0063b	81 7c 24 5c 46
	27 00 00	 cmp	 DWORD PTR last_error$[rsp], 10054 ; 00002746H
  00643	74 0d		 je	 SHORT $LN67@PxSocketSe@5
  00645	c7 84 24 b8 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv288[rsp], 1
  00650	eb 0b		 jmp	 SHORT $LN68@PxSocketSe@5
$LN67@PxSocketSe@5:
  00652	c7 84 24 b8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv288[rsp], 0
$LN68@PxSocketSe@5:
  0065d	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR tv288[rsp]
  00664	89 44 24 68	 mov	 DWORD PTR error$[rsp], eax

; 8458 : 
; 8459 :         if (error) {

  00668	83 7c 24 68 00	 cmp	 DWORD PTR error$[rsp], 0
  0066d	74 07		 je	 SHORT $LN17@PxSocketSe@5

; 8460 :             failed = 1;

  0066f	c6 44 24 58 01	 mov	 BYTE PTR failed$[rsp], 1

; 8461 :             break;

  00674	eb 12		 jmp	 SHORT $LN18@PxSocketSe@5
$LN17@PxSocketSe@5:

; 8462 :         }
; 8463 :         last = o;

  00676	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR o$[rsp]
  0067e	48 89 44 24 48	 mov	 QWORD PTR last$[rsp], rax

; 8464 :     }

  00683	e9 91 fe ff ff	 jmp	 $LN19@PxSocketSe@5
$LN18@PxSocketSe@5:

; 8465 : 
; 8466 :     s->last = last;

  00688	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0068d	48 8b 4c 24 48	 mov	 rcx, QWORD PTR last$[rsp]
  00692	48 89 88 a8 03
	00 00		 mov	 QWORD PTR [rax+936], rcx

; 8467 : 
; 8468 :     if (failed)

  00699	0f be 44 24 58	 movsx	 eax, BYTE PTR failed$[rsp]
  0069e	85 c0		 test	 eax, eax
  006a0	74 32		 je	 SHORT $LN16@PxSocketSe@5
$LN15@PxSocketSe@5:

; 8469 :         PxSocket_WSAERROR("AcceptEx");

  006a2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WSAGetLastError
  006a8	8b c8		 mov	 ecx, eax
  006aa	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
  006af	41 b8 01 00 00
	00		 mov	 r8d, 1
  006b5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08OACEPIAN@AcceptEx?$AA@
  006bc	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  006c4	e8 00 00 00 00	 call	 PxSocket_HandleException
  006c9	e9 3e 01 00 00	 jmp	 $end$132009
  006ce	33 c0		 xor	 eax, eax
  006d0	85 c0		 test	 eax, eax
  006d2	75 ce		 jne	 SHORT $LN15@PxSocketSe@5
$LN16@PxSocketSe@5:

; 8470 : 
; 8471 :     s->fd_accept = WSACreateEvent();

  006d4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WSACreateEvent
  006da	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  006df	48 89 81 90 03
	00 00		 mov	 QWORD PTR [rcx+912], rax

; 8472 :     if (!s->fd_accept)

  006e6	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  006eb	48 83 b8 90 03
	00 00 00	 cmp	 QWORD PTR [rax+912], 0
  006f3	75 32		 jne	 SHORT $LN12@PxSocketSe@5
$LN11@PxSocketSe@5:

; 8473 :         PxSocket_WSAERROR("WSACreateEvent");

  006f5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WSAGetLastError
  006fb	8b c8		 mov	 ecx, eax
  006fd	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
  00702	41 b8 01 00 00
	00		 mov	 r8d, 1
  00708	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0P@EGNBEKMI@WSACreateEvent?$AA@
  0070f	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  00717	e8 00 00 00 00	 call	 PxSocket_HandleException
  0071c	e9 eb 00 00 00	 jmp	 $end$132009
  00721	33 c0		 xor	 eax, eax
  00723	85 c0		 test	 eax, eax
  00725	75 ce		 jne	 SHORT $LN11@PxSocketSe@5
$LN12@PxSocketSe@5:

; 8474 : 
; 8475 :     if (WSAEventSelect(s->sock_fd, s->fd_accept, FD_ACCEPT) == SOCKET_ERROR)

  00727	41 b8 08 00 00
	00		 mov	 r8d, 8
  0072d	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00732	48 8b 90 90 03
	00 00		 mov	 rdx, QWORD PTR [rax+912]
  00739	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0073e	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00742	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WSAEventSelect
  00748	83 f8 ff	 cmp	 eax, -1
  0074b	75 32		 jne	 SHORT $LN8@PxSocketSe@5
$LN7@PxSocketSe@5:

; 8476 :         PxSocket_WSAERROR("WSAEventSelect");

  0074d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_WSAGetLastError
  00753	8b c8		 mov	 ecx, eax
  00755	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
  0075a	41 b8 01 00 00
	00		 mov	 r8d, 1
  00760	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0P@CIBLNKFF@WSAEventSelect?$AA@
  00767	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  0076f	e8 00 00 00 00	 call	 PxSocket_HandleException
  00774	e9 93 00 00 00	 jmp	 $end$132009
  00779	33 c0		 xor	 eax, eax
  0077b	85 c0		 test	 eax, eax
  0077d	75 ce		 jne	 SHORT $LN7@PxSocketSe@5
$LN8@PxSocketSe@5:

; 8477 : 
; 8478 :     s->wait_handles[0] = s->fd_accept;

  0077f	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  00784	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  00789	48 8b 89 90 03
	00 00		 mov	 rcx, QWORD PTR [rcx+912]
  00790	48 89 88 08 04
	00 00		 mov	 QWORD PTR [rax+1032], rcx

; 8479 :     s->wait_handles[1] = s->more_accepts;

  00797	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  0079c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  007a1	48 8b 89 f8 03
	00 00		 mov	 rcx, QWORD PTR [rcx+1016]
  007a8	48 89 88 10 04
	00 00		 mov	 QWORD PTR [rax+1040], rcx

; 8480 :     s->wait_handles[2] = s->shutdown;

  007af	48 8b 44 24 50	 mov	 rax, QWORD PTR s$[rsp]
  007b4	48 8b 4c 24 50	 mov	 rcx, QWORD PTR s$[rsp]
  007b9	48 8b 89 00 04
	00 00		 mov	 rcx, QWORD PTR [rcx+1024]
  007c0	48 89 88 18 04
	00 00		 mov	 QWORD PTR [rax+1048], rcx

; 8481 : 
; 8482 :     if (!TrySubmitThreadpoolCallback(PxSocketServer_AcceptEx, c, NULL))

  007c7	45 33 c0	 xor	 r8d, r8d
  007ca	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR c$[rsp]
  007d2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PxSocketServer_AcceptEx
  007d9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_TrySubmitThreadpoolCallback
  007df	85 c0		 test	 eax, eax
  007e1	75 29		 jne	 SHORT $LN4@PxSocketSe@5
$LN3@PxSocketSe@5:

; 8483 :         PxSocket_SYSERROR("TrySubmitThreadpoolCallback");

  007e3	33 c9		 xor	 ecx, ecx
  007e5	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr
  007ea	41 b8 01 00 00
	00		 mov	 r8d, 1
  007f0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@MPJNDEE@TrySubmitThreadpoolCallback?$AA@
  007f7	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR c$[rsp]
  007ff	e8 00 00 00 00	 call	 PxSocket_HandleException
  00804	eb 06		 jmp	 SHORT $end$132009
  00806	33 c0		 xor	 eax, eax
  00808	85 c0		 test	 eax, eax
  0080a	75 d7		 jne	 SHORT $LN3@PxSocketSe@5
$LN4@PxSocketSe@5:
$end$132009:

; 8484 : 
; 8485 : end:
; 8486 :     return;
; 8487 : }

  0080c	48 81 c4 c8 00
	00 00		 add	 rsp, 200		; 000000c8H
  00813	c3		 ret	 0
PxSocketServer_Start ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$pxsocket_close DD imagerel $LN3
	DD	imagerel $LN3+84
	DD	imagerel $unwind$pxsocket_close
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$pxsocket_close DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT pxsocket_close
_TEXT	SEGMENT
s$ = 48
args$ = 56
pxsocket_close PROC					; COMDAT

; 8491 : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 8492 :     WRITE_LOCK(s);

  0000e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s$[rsp]
  00013	e8 00 00 00 00	 call	 _write_lock

; 8493 :     Px_SOCKFLAGS(s) |= Px_SOCKFLAGS_CLOSE_SCHEDULED;

  00018	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  0001d	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  00023	0f ba e8 16	 bts	 eax, 22
  00027	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s$[rsp]
  0002c	89 81 f4 01 00
	00		 mov	 DWORD PTR [rcx+500], eax

; 8494 :     WRITE_UNLOCK(s);

  00032	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s$[rsp]
  00037	e8 00 00 00 00	 call	 _write_unlock

; 8495 :     Py_RETURN_NONE;

  0003c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00043	e8 00 00 00 00	 call	 _Py_IncRef
  00048	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 8496 : }

  0004f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00053	c3		 ret	 0
pxsocket_close ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$pxsocket_next_send_id DD imagerel $LN3
	DD	imagerel $LN3+42
	DD	imagerel $unwind$pxsocket_next_send_id
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$pxsocket_next_send_id DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT pxsocket_next_send_id
_TEXT	SEGMENT
s$ = 48
args$ = 56
pxsocket_next_send_id PROC				; COMDAT

; 8502 : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 8503 :     return PyLong_FromUnsignedLongLong(s->send_id+1);

  0000e	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  00013	48 8b 80 68 02
	00 00		 mov	 rax, QWORD PTR [rax+616]
  0001a	48 ff c0	 inc	 rax
  0001d	48 8b c8	 mov	 rcx, rax
  00020	e8 00 00 00 00	 call	 PyLong_FromUnsignedLongLong

; 8504 : }

  00025	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00029	c3		 ret	 0
pxsocket_next_send_id ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CJ@KMNPLBEC@file?5is?5too?5large?5to?5send?5via?5se@ ; `string'
PUBLIC	??_C@_0BA@HPFBDNCA@z?$CDu?$CDz?$CD?3sendfile?$AA@ ; `string'
PUBLIC	??_C@_1CI@LCBFBGMG@?$AA?$CB?$AAs?$AA?9?$AA?$DO?$AAs?$AAe?$AAn?$AAd?$AAf?$AAi?$AAl?$AAe?$AA_?$AAh?$AAa?$AAn?$AAd?$AAl?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_0CN@ICCHFGKJ@sendfile?5already?5scheduled?5for?5t@ ; `string'
PUBLIC	??_C@_0BC@IMHBDANI@pxsocket_sendfile?$AA@	; `string'
EXTRN	__imp_GetFileSizeEx:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$pxsocket_sendfile DD imagerel $LN16
	DD	imagerel $LN16+883
	DD	imagerel $unwind$pxsocket_sendfile
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$pxsocket_sendfile DD 021101H
	DD	0170111H
xdata	ENDS
;	COMDAT ??_C@_0CJ@KMNPLBEC@file?5is?5too?5large?5to?5send?5via?5se@
CONST	SEGMENT
??_C@_0CJ@KMNPLBEC@file?5is?5too?5large?5to?5send?5via?5se@ DB 'file is t'
	DB	'oo large to send via sendfile()', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@HPFBDNCA@z?$CDu?$CDz?$CD?3sendfile?$AA@
CONST	SEGMENT
??_C@_0BA@HPFBDNCA@z?$CDu?$CDz?$CD?3sendfile?$AA@ DB 'z#u#z#:sendfile', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CI@LCBFBGMG@?$AA?$CB?$AAs?$AA?9?$AA?$DO?$AAs?$AAe?$AAn?$AAd?$AAf?$AAi?$AAl?$AAe?$AA_?$AAh?$AAa?$AAn?$AAd?$AAl?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1CI@LCBFBGMG@?$AA?$CB?$AAs?$AA?9?$AA?$DO?$AAs?$AAe?$AAn?$AAd?$AAf?$AAi?$AAl?$AAe?$AA_?$AAh?$AAa?$AAn?$AAd?$AAl?$AAe?$AA?$AA@ DB '!'
	DB	00H, 's', 00H, '-', 00H, '>', 00H, 's', 00H, 'e', 00H, 'n', 00H
	DB	'd', 00H, 'f', 00H, 'i', 00H, 'l', 00H, 'e', 00H, '_', 00H, 'h'
	DB	00H, 'a', 00H, 'n', 00H, 'd', 00H, 'l', 00H, 'e', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@ICCHFGKJ@sendfile?5already?5scheduled?5for?5t@
CONST	SEGMENT
??_C@_0CN@ICCHFGKJ@sendfile?5already?5scheduled?5for?5t@ DB 'sendfile alr'
	DB	'eady scheduled for this callback', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@IMHBDANI@pxsocket_sendfile?$AA@
CONST	SEGMENT
??_C@_0BC@IMHBDANI@pxsocket_sendfile?$AA@ DB 'pxsocket_sendfile', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT pxsocket_sendfile
_TEXT	SEGMENT
share$ = 64
h$ = 72
uname$ = 80
file_flags$ = 88
access$ = 92
size$ = 96
name$ = 104
after_len$ = 112
after_bytes$ = 120
before_len$ = 128
max_fsize$ = 132
tf$ = 136
name_len$ = 144
result$ = 152
before_bytes$ = 160
create_flags$ = 168
s$ = 192
args$ = 200
pxsocket_sendfile PROC					; COMDAT

; 8510 : {

$LN16:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H

; 8511 :     PyObject *result = NULL;

  00011	48 c7 84 24 98
	00 00 00 00 00
	00 00		 mov	 QWORD PTR result$[rsp], 0

; 8512 :     LPCWSTR name;
; 8513 :     Py_UNICODE *uname;
; 8514 :     int name_len;
; 8515 :     int access = GENERIC_READ;

  0001d	c7 44 24 5c 00
	00 00 80	 mov	 DWORD PTR access$[rsp], -2147483648 ; ffffffff80000000H

; 8516 :     int share = FILE_SHARE_READ;

  00025	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR share$[rsp], 1

; 8517 :     int create_flags = OPEN_EXISTING;

  0002d	c7 84 24 a8 00
	00 00 03 00 00
	00		 mov	 DWORD PTR create_flags$[rsp], 3

; 8518 :     int file_flags = (
; 8519 :         FILE_FLAG_OVERLAPPED    |
; 8520 :         FILE_ATTRIBUTE_READONLY |
; 8521 :         FILE_FLAG_SEQUENTIAL_SCAN
; 8522 :     );

  00038	c7 44 24 58 01
	00 00 48	 mov	 DWORD PTR file_flags$[rsp], 1207959553 ; 48000001H

; 8523 :     HANDLE h;
; 8524 :     LARGE_INTEGER size;
; 8525 :     TRANSMIT_FILE_BUFFERS *tf;
; 8526 : 
; 8527 :     char *before_bytes = NULL, *after_bytes = NULL;

  00040	48 c7 84 24 a0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR before_bytes$[rsp], 0
  0004c	48 c7 44 24 78
	00 00 00 00	 mov	 QWORD PTR after_bytes$[rsp], 0

; 8528 :     int before_len = 0, after_len = 0;

  00055	c7 84 24 80 00
	00 00 00 00 00
	00		 mov	 DWORD PTR before_len$[rsp], 0
  00060	c7 44 24 70 00
	00 00 00	 mov	 DWORD PTR after_len$[rsp], 0

; 8529 :     int max_fsize = INT_MAX - 1;

  00068	c7 84 24 84 00
	00 00 fe ff ff
	7f		 mov	 DWORD PTR max_fsize$[rsp], 2147483646 ; 7ffffffeH

; 8530 : 
; 8531 :     Px_GUARD

  00073	e8 00 00 00 00	 call	 _Py_PXCTX
  00078	85 c0		 test	 eax, eax
  0007a	75 1f		 jne	 SHORT $LN11@pxsocket_s
  0007c	41 b9 01 00 00
	00		 mov	 r9d, 1
  00082	41 b8 53 21 00
	00		 mov	 r8d, 8531		; 00002153H
  00088	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@PGHBGAOD@?4?4?2Python?2pyparallel?4c?$AA@
  0008f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@IMHBDANI@pxsocket_sendfile?$AA@
  00096	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN11@pxsocket_s:

; 8532 : 
; 8533 :     if (PxSocket_IS_SENDFILE_SCHEDULED(s)) {

  0009b	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  000a3	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  000a9	25 00 00 00 40	 and	 eax, 1073741824		; 40000000H
  000ae	85 c0		 test	 eax, eax
  000b0	74 18		 je	 SHORT $LN10@pxsocket_s

; 8534 :         PyErr_SetString(PyExc_RuntimeError,
; 8535 :                         "sendfile already scheduled for this callback");

  000b2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CN@ICCHFGKJ@sendfile?5already?5scheduled?5for?5t@
  000b9	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeError
  000c0	e8 00 00 00 00	 call	 PyErr_SetString

; 8536 :         goto done;

  000c5	e9 68 02 00 00	 jmp	 $done$132123
$LN10@pxsocket_s:

; 8537 :     }
; 8538 : 
; 8539 :     assert(!s->sendfile_handle);

  000ca	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  000d2	48 83 b8 20 03
	00 00 00	 cmp	 QWORD PTR [rax+800], 0
  000da	74 1c		 je	 SHORT $LN14@pxsocket_s
  000dc	41 b8 5b 21 00
	00		 mov	 r8d, 8539		; 0000215bH
  000e2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  000e9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CI@LCBFBGMG@?$AA?$CB?$AAs?$AA?9?$AA?$DO?$AAs?$AAe?$AAn?$AAd?$AAf?$AAi?$AAl?$AAe?$AA_?$AAh?$AAa?$AAn?$AAd?$AAl?$AAe?$AA?$AA@
  000f0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000f6	33 c0		 xor	 eax, eax
$LN14@pxsocket_s:

; 8540 : 
; 8541 :     if (!PyArg_ParseTuple(args, "z#u#z#:sendfile",
; 8542 :                           &before_bytes, &before_len,
; 8543 :                           &uname, &name_len,
; 8544 :                           &after_bytes, &after_len))

  000f8	48 8d 44 24 70	 lea	 rax, QWORD PTR after_len$[rsp]
  000fd	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00102	48 8d 44 24 78	 lea	 rax, QWORD PTR after_bytes$[rsp]
  00107	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  0010c	48 8d 84 24 90
	00 00 00	 lea	 rax, QWORD PTR name_len$[rsp]
  00114	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00119	48 8d 44 24 50	 lea	 rax, QWORD PTR uname$[rsp]
  0011e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00123	4c 8d 8c 24 80
	00 00 00	 lea	 r9, QWORD PTR before_len$[rsp]
  0012b	4c 8d 84 24 a0
	00 00 00	 lea	 r8, QWORD PTR before_bytes$[rsp]
  00133	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BA@HPFBDNCA@z?$CDu?$CDz?$CD?3sendfile?$AA@
  0013a	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  00142	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00147	85 c0		 test	 eax, eax
  00149	75 05		 jne	 SHORT $LN9@pxsocket_s

; 8545 :         goto done;

  0014b	e9 e2 01 00 00	 jmp	 $done$132123
$LN9@pxsocket_s:

; 8546 : 
; 8547 :     name = (LPCWSTR)uname;

  00150	48 8b 44 24 50	 mov	 rax, QWORD PTR uname$[rsp]
  00155	48 89 44 24 68	 mov	 QWORD PTR name$[rsp], rax

; 8548 : 
; 8549 :     h = CreateFile(name, access, share, 0, create_flags, file_flags, 0);

  0015a	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR [rsp+48], 0
  00163	8b 44 24 58	 mov	 eax, DWORD PTR file_flags$[rsp]
  00167	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  0016b	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR create_flags$[rsp]
  00172	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00176	45 33 c9	 xor	 r9d, r9d
  00179	44 8b 44 24 40	 mov	 r8d, DWORD PTR share$[rsp]
  0017e	8b 54 24 5c	 mov	 edx, DWORD PTR access$[rsp]
  00182	48 8b 4c 24 68	 mov	 rcx, QWORD PTR name$[rsp]
  00187	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateFileW
  0018d	48 89 44 24 48	 mov	 QWORD PTR h$[rsp], rax

; 8550 :     if (!h || (h == INVALID_HANDLE_VALUE)) {

  00192	48 83 7c 24 48
	00		 cmp	 QWORD PTR h$[rsp], 0
  00198	74 08		 je	 SHORT $LN7@pxsocket_s
  0019a	48 83 7c 24 48
	ff		 cmp	 QWORD PTR h$[rsp], -1
  001a0	75 11		 jne	 SHORT $LN8@pxsocket_s
$LN7@pxsocket_s:

; 8551 :         PyErr_SetFromWindowsErrWithUnicodeFilename(0, uname);

  001a2	48 8b 54 24 50	 mov	 rdx, QWORD PTR uname$[rsp]
  001a7	33 c9		 xor	 ecx, ecx
  001a9	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErrWithUnicodeFilename

; 8552 :         goto done;

  001ae	e9 7f 01 00 00	 jmp	 $done$132123
$LN8@pxsocket_s:

; 8553 :     }
; 8554 : 
; 8555 :     if (!GetFileSizeEx(h, &size)) {

  001b3	48 8d 54 24 60	 lea	 rdx, QWORD PTR size$[rsp]
  001b8	48 8b 4c 24 48	 mov	 rcx, QWORD PTR h$[rsp]
  001bd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetFileSizeEx
  001c3	85 c0		 test	 eax, eax
  001c5	75 1c		 jne	 SHORT $LN6@pxsocket_s

; 8556 :         CloseHandle(h);

  001c7	48 8b 4c 24 48	 mov	 rcx, QWORD PTR h$[rsp]
  001cc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CloseHandle

; 8557 :         PyErr_SetFromWindowsErrWithUnicodeFilename(0, uname);

  001d2	48 8b 54 24 50	 mov	 rdx, QWORD PTR uname$[rsp]
  001d7	33 c9		 xor	 ecx, ecx
  001d9	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErrWithUnicodeFilename

; 8558 :         goto done;

  001de	e9 4f 01 00 00	 jmp	 $done$132123
$LN6@pxsocket_s:

; 8559 :     }
; 8560 : 
; 8561 :     /* Subtract before/after buffer sizes from maximum sendable file size. */
; 8562 :     max_fsize -= before_len;

  001e3	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR before_len$[rsp]
  001ea	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR max_fsize$[rsp]
  001f1	2b c8		 sub	 ecx, eax
  001f3	8b c1		 mov	 eax, ecx
  001f5	89 84 24 84 00
	00 00		 mov	 DWORD PTR max_fsize$[rsp], eax

; 8563 :     max_fsize -= after_len;

  001fc	8b 44 24 70	 mov	 eax, DWORD PTR after_len$[rsp]
  00200	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR max_fsize$[rsp]
  00207	2b c8		 sub	 ecx, eax
  00209	8b c1		 mov	 eax, ecx
  0020b	89 84 24 84 00
	00 00		 mov	 DWORD PTR max_fsize$[rsp], eax

; 8564 : 
; 8565 :     if ((size.QuadPart > (long)INT_MAX) || (size.LowPart > max_fsize)) {

  00212	48 81 7c 24 60
	ff ff ff 7f	 cmp	 QWORD PTR size$[rsp], 2147483647 ; 7fffffffH
  0021b	7f 0d		 jg	 SHORT $LN4@pxsocket_s
  0021d	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR max_fsize$[rsp]
  00224	39 44 24 60	 cmp	 DWORD PTR size$[rsp], eax
  00228	76 23		 jbe	 SHORT $LN5@pxsocket_s
$LN4@pxsocket_s:

; 8566 :         CloseHandle(h);

  0022a	48 8b 4c 24 48	 mov	 rcx, QWORD PTR h$[rsp]
  0022f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CloseHandle

; 8567 :         PyErr_SetString(PyExc_ValueError,
; 8568 :                         "file is too large to send via sendfile()");

  00235	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CJ@KMNPLBEC@file?5is?5too?5large?5to?5send?5via?5se@
  0023c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00243	e8 00 00 00 00	 call	 PyErr_SetString

; 8569 :         goto done;

  00248	e9 e5 00 00 00	 jmp	 $done$132123
$LN5@pxsocket_s:

; 8570 :     }
; 8571 : 
; 8572 :     tf = &s->sendfile_tfbuf;

  0024d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00255	48 05 30 03 00
	00		 add	 rax, 816		; 00000330H
  0025b	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tf$[rsp], rax

; 8573 :     memset(tf, 0, sizeof(TRANSMIT_FILE_BUFFERS));

  00263	41 b8 20 00 00
	00		 mov	 r8d, 32			; 00000020H
  00269	33 d2		 xor	 edx, edx
  0026b	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR tf$[rsp]
  00273	e8 00 00 00 00	 call	 memset

; 8574 :     if (before_len) {

  00278	83 bc 24 80 00
	00 00 00	 cmp	 DWORD PTR before_len$[rsp], 0
  00280	74 25		 je	 SHORT $LN3@pxsocket_s

; 8575 :         tf->Head = before_bytes;

  00282	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR tf$[rsp]
  0028a	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR before_bytes$[rsp]
  00292	48 89 08	 mov	 QWORD PTR [rax], rcx

; 8576 :         tf->HeadLength = before_len;

  00295	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR tf$[rsp]
  0029d	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR before_len$[rsp]
  002a4	89 48 08	 mov	 DWORD PTR [rax+8], ecx
$LN3@pxsocket_s:

; 8577 :     }
; 8578 :     if (after_len) {

  002a7	83 7c 24 70 00	 cmp	 DWORD PTR after_len$[rsp], 0
  002ac	74 20		 je	 SHORT $LN2@pxsocket_s

; 8579 :         tf->Tail = after_bytes;

  002ae	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR tf$[rsp]
  002b6	48 8b 4c 24 78	 mov	 rcx, QWORD PTR after_bytes$[rsp]
  002bb	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 8580 :         tf->TailLength = after_len;

  002bf	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR tf$[rsp]
  002c7	8b 4c 24 70	 mov	 ecx, DWORD PTR after_len$[rsp]
  002cb	89 48 18	 mov	 DWORD PTR [rax+24], ecx
$LN2@pxsocket_s:

; 8581 :     }
; 8582 : 
; 8583 :     s->sendfile_nbytes = size.LowPart + before_len + after_len;

  002ce	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR before_len$[rsp]
  002d5	8b 4c 24 60	 mov	 ecx, DWORD PTR size$[rsp]
  002d9	03 c8		 add	 ecx, eax
  002db	8b c1		 mov	 eax, ecx
  002dd	03 44 24 70	 add	 eax, DWORD PTR after_len$[rsp]
  002e1	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  002e9	89 81 1c 03 00
	00		 mov	 DWORD PTR [rcx+796], eax

; 8584 :     s->sendfile_handle = h;

  002ef	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  002f7	48 8b 4c 24 48	 mov	 rcx, QWORD PTR h$[rsp]
  002fc	48 89 88 20 03
	00 00		 mov	 QWORD PTR [rax+800], rcx

; 8585 :     Px_SOCKFLAGS(s) |= Px_SOCKFLAGS_SENDFILE_SCHEDULED;

  00303	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  0030b	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  00311	0f ba e8 1e	 bts	 eax, 30
  00315	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  0031d	89 81 f4 01 00
	00		 mov	 DWORD PTR [rcx+500], eax

; 8586 :     result = Py_None;

  00323	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0032a	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR result$[rsp], rax
$done$132123:

; 8587 : 
; 8588 : done:
; 8589 :     if (!result)

  00332	48 83 bc 24 98
	00 00 00 00	 cmp	 QWORD PTR result$[rsp], 0
  0033b	75 26		 jne	 SHORT $LN1@pxsocket_s

; 8590 :         assert(PyErr_Occurred());

  0033d	e8 00 00 00 00	 call	 PyErr_Occurred
  00342	48 85 c0	 test	 rax, rax
  00345	75 1c		 jne	 SHORT $LN15@pxsocket_s
  00347	41 b8 8e 21 00
	00		 mov	 r8d, 8590		; 0000218eH
  0034d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  00354	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CC@DNBCFJEA@?$AAP?$AAy?$AAE?$AAr?$AAr?$AA_?$AAO?$AAc?$AAc?$AAu?$AAr?$AAr?$AAe?$AAd?$AA?$CI?$AA?$CJ?$AA?$AA@
  0035b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00361	33 c0		 xor	 eax, eax
$LN15@pxsocket_s:
$LN1@pxsocket_s:

; 8591 : 
; 8592 :     return result;

  00363	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR result$[rsp]

; 8593 : }

  0036b	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  00372	c3		 ret	 0
pxsocket_sendfile ENDP
_TEXT	ENDS
PUBLIC	_async_client_or_server
;	COMDAT pdata
pdata	SEGMENT
$pdata$_async_client_or_server DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$_async_client_or_server
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_async_client_or_server DD 011801H
	DD	04218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _async_client_or_server
_TEXT	SEGMENT
self$ = 48
args$ = 56
kwds$ = 64
is_client$ = 72
_async_client_or_server PROC				; COMDAT

; 8700 : {

$LN3:
  00000	44 88 4c 24 20	 mov	 BYTE PTR [rsp+32], r9b
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 8701 :     Py_RETURN_NONE;

  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  0001f	e8 00 00 00 00	 call	 _Py_IncRef
  00024	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 8702 : }

  0002b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002f	c3		 ret	 0
_async_client_or_server ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_async_client DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$_async_client
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_async_client DD 011301H
	DD	04213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _async_client
_TEXT	SEGMENT
self$ = 48
args$ = 56
kwds$ = 64
_async_client PROC					; COMDAT

; 8711 : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 8712 :     return create_pxsocket(args, kwds, Px_SOCKFLAGS_CLIENT, 0);

  00013	45 33 c9	 xor	 r9d, r9d
  00016	41 b8 01 00 00
	00		 mov	 r8d, 1
  0001c	48 8b 54 24 40	 mov	 rdx, QWORD PTR kwds$[rsp]
  00021	48 8b 4c 24 38	 mov	 rcx, QWORD PTR args$[rsp]
  00026	e8 00 00 00 00	 call	 create_pxsocket

; 8713 : }

  0002b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002f	c3		 ret	 0
_async_client ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_async_server DD imagerel $LN3
	DD	imagerel $LN3+48
	DD	imagerel $unwind$_async_server
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_async_server DD 011301H
	DD	04213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _async_server
_TEXT	SEGMENT
self$ = 48
args$ = 56
kwds$ = 64
_async_server PROC					; COMDAT

; 8717 : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 8718 :     return create_pxsocket(args, kwds, Px_SOCKFLAGS_SERVER, 0);

  00013	45 33 c9	 xor	 r9d, r9d
  00016	41 b8 02 00 00
	00		 mov	 r8d, 2
  0001c	48 8b 54 24 40	 mov	 rdx, QWORD PTR kwds$[rsp]
  00021	48 8b 4c 24 38	 mov	 rcx, QWORD PTR args$[rsp]
  00026	e8 00 00 00 00	 call	 create_pxsocket

; 8719 : }

  0002b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002f	c3		 ret	 0
_async_server ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _async_read
_TEXT	SEGMENT
self$ = 8
args$ = 16
kwds$ = 24
_async_read PROC					; COMDAT

; 8723 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 8724 :     return NULL;

  0000f	33 c0		 xor	 eax, eax

; 8725 : }

  00011	c3		 ret	 0
_async_read ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _async_write
_TEXT	SEGMENT
self$ = 8
args$ = 16
kwds$ = 24
_async_write PROC					; COMDAT

; 8729 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 8730 :     return NULL;

  0000f	33 c0		 xor	 eax, eax

; 8731 : }

  00011	c3		 ret	 0
_async_write ENDP
_TEXT	ENDS
EXTRN	PyObject_Print:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_async_print DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$_async_print
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_async_print DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _async_print
_TEXT	SEGMENT
self$ = 48
args$ = 56
_async_print PROC					; COMDAT

; 8736 : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 8737 :     PyObject_Print(args, stdout, 0);

  0000e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  00014	48 83 c0 30	 add	 rax, 48			; 00000030H
  00018	45 33 c0	 xor	 r8d, r8d
  0001b	48 8b d0	 mov	 rdx, rax
  0001e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR args$[rsp]
  00023	e8 00 00 00 00	 call	 PyObject_Print

; 8738 :     Py_RETURN_NONE;

  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  0002f	e8 00 00 00 00	 call	 _Py_IncRef
  00034	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 8739 : }

  0003b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003f	c3		 ret	 0
_async_print ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_async_stdout DD imagerel $LN3
	DD	imagerel $LN3+77
	DD	imagerel $unwind$_async_stdout
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_async_stdout DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _async_stdout
_TEXT	SEGMENT
self$ = 48
o$ = 56
_async_stdout PROC					; COMDAT

; 8744 : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 8745 :     Py_INCREF(o);

  0000e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR o$[rsp]
  00013	e8 00 00 00 00	 call	 _Py_IncRef

; 8746 :     PyObject_Print(o, stdout, Py_PRINT_RAW);

  00018	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  0001e	48 83 c0 30	 add	 rax, 48			; 00000030H
  00022	41 b8 01 00 00
	00		 mov	 r8d, 1
  00028	48 8b d0	 mov	 rdx, rax
  0002b	48 8b 4c 24 38	 mov	 rcx, QWORD PTR o$[rsp]
  00030	e8 00 00 00 00	 call	 PyObject_Print

; 8747 :     Py_RETURN_NONE;

  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  0003c	e8 00 00 00 00	 call	 _Py_IncRef
  00041	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 8748 : }

  00048	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004c	c3		 ret	 0
_async_stdout ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_async_stderr DD imagerel $LN3
	DD	imagerel $LN3+77
	DD	imagerel $unwind$_async_stderr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_async_stderr DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _async_stderr
_TEXT	SEGMENT
self$ = 48
o$ = 56
_async_stderr PROC					; COMDAT

; 8753 : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 8754 :     Py_INCREF(o);

  0000e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR o$[rsp]
  00013	e8 00 00 00 00	 call	 _Py_IncRef

; 8755 :     PyObject_Print(o, stderr, Py_PRINT_RAW);

  00018	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  0001e	48 83 c0 60	 add	 rax, 96			; 00000060H
  00022	41 b8 01 00 00
	00		 mov	 r8d, 1
  00028	48 8b d0	 mov	 rdx, rax
  0002b	48 8b 4c 24 38	 mov	 rcx, QWORD PTR o$[rsp]
  00030	e8 00 00 00 00	 call	 PyObject_Print

; 8756 :     Py_RETURN_NONE;

  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  0003c	e8 00 00 00 00	 call	 _Py_IncRef
  00041	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 8757 : }

  00048	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004c	c3		 ret	 0
_async_stderr ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BJ@JDAPMCFE@unsupported?5async?5object?$AA@ ; `string'
PUBLIC	??_C@_13PHCIHIAO@?$AAc?$AA?$AA@			; `string'
PUBLIC	??_C@_0BA@GLJJCBPJ@_async_register?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$_async_register DD imagerel $LN13
	DD	imagerel $LN13+395
	DD	imagerel $unwind$_async_register
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_async_register DD 011301H
	DD	0c213H
xdata	ENDS
;	COMDAT ??_C@_0BJ@JDAPMCFE@unsupported?5async?5object?$AA@
CONST	SEGMENT
??_C@_0BJ@JDAPMCFE@unsupported?5async?5object?$AA@ DB 'unsupported async '
	DB	'object', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_13PHCIHIAO@?$AAc?$AA?$AA@
CONST	SEGMENT
??_C@_13PHCIHIAO@?$AAc?$AA?$AA@ DB 'c', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@GLJJCBPJ@_async_register?$AA@
CONST	SEGMENT
??_C@_0BA@GLJJCBPJ@_async_register?$AA@ DB '_async_register', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _async_register
_TEXT	SEGMENT
transport$ = 48
protocol_type$ = 56
s$132319 = 64
c$132321 = 72
cb$132322 = 80
self$ = 112
args$ = 120
kwds$ = 128
_async_register PROC					; COMDAT

; 8765 : {

$LN13:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 8766 :     PyObject *transport;
; 8767 :     PyObject *protocol_type;
; 8768 : 
; 8769 :     static const char *kwlist[] = { "transport", "protocol", NULL };
; 8770 :     static const char *fmt = "OO:register";
; 8771 : 
; 8772 :     Py_GUARD

  00013	e8 00 00 00 00	 call	 _Py_PXCTX
  00018	85 c0		 test	 eax, eax
  0001a	74 1c		 je	 SHORT $LN9@async_regi
  0001c	45 33 c9	 xor	 r9d, r9d
  0001f	41 b8 44 22 00
	00		 mov	 r8d, 8772		; 00002244H
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@PGHBGAOD@?4?4?2Python?2pyparallel?4c?$AA@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@GLJJCBPJ@_async_register?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN9@async_regi:

; 8773 : 
; 8774 :     if (!PyArg_ParseTupleAndKeywords(args, kwds, fmt, (char **)kwlist,
; 8775 :                                      &transport, &protocol_type))

  00038	48 8d 44 24 38	 lea	 rax, QWORD PTR protocol_type$[rsp]
  0003d	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00042	48 8d 44 24 30	 lea	 rax, QWORD PTR transport$[rsp]
  00047	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0004c	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?kwlist@?1??_async_register@@9@9
  00053	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR ?fmt@?1??_async_register@@9@9
  0005a	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR kwds$[rsp]
  00062	48 8b 4c 24 78	 mov	 rcx, QWORD PTR args$[rsp]
  00067	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  0006c	85 c0		 test	 eax, eax
  0006e	75 07		 jne	 SHORT $LN8@async_regi

; 8776 :         return NULL;

  00070	33 c0		 xor	 eax, eax
  00072	e9 0f 01 00 00	 jmp	 $LN10@async_regi
$LN8@async_regi:

; 8777 : 
; 8778 :     if (PxSocket_Check(transport)) {

  00077	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PxSocket_Type
  0007e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR transport$[rsp]
  00083	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00087	74 16		 je	 SHORT $LN6@async_regi
  00089	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PxSocket_Type
  00090	48 8b 4c 24 30	 mov	 rcx, QWORD PTR transport$[rsp]
  00095	48 39 41 38	 cmp	 QWORD PTR [rcx+56], rax
  00099	0f 85 d2 00 00
	00		 jne	 $LN7@async_regi
$LN6@async_regi:

; 8779 :         PxSocket *s = (PxSocket *)transport;

  0009f	48 8b 44 24 30	 mov	 rax, QWORD PTR transport$[rsp]
  000a4	48 89 44 24 40	 mov	 QWORD PTR s$132319[rsp], rax

; 8780 :         Context *c = s->ctx;

  000a9	48 8b 44 24 40	 mov	 rax, QWORD PTR s$132319[rsp]
  000ae	48 8b 80 00 02
	00 00		 mov	 rax, QWORD PTR [rax+512]
  000b5	48 89 44 24 48	 mov	 QWORD PTR c$132321[rsp], rax

; 8781 :         PTP_SIMPLE_CALLBACK cb;
; 8782 : 
; 8783 :         assert(c);

  000ba	48 83 7c 24 48
	00		 cmp	 QWORD PTR c$132321[rsp], 0
  000c0	75 1c		 jne	 SHORT $LN12@async_regi
  000c2	41 b8 4f 22 00
	00		 mov	 r8d, 8783		; 0000224fH
  000c8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CO@DPMFPEGF@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?4?$AAc?$AA?$AA@
  000cf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_13PHCIHIAO@?$AAc?$AA?$AA@
  000d6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000dc	33 c0		 xor	 eax, eax
$LN12@async_regi:

; 8784 : 
; 8785 :         if (!PxSocket_SetProtocolType(s, protocol_type))

  000de	48 8b 54 24 38	 mov	 rdx, QWORD PTR protocol_type$[rsp]
  000e3	48 8b 4c 24 40	 mov	 rcx, QWORD PTR s$132319[rsp]
  000e8	e8 00 00 00 00	 call	 PxSocket_SetProtocolType
  000ed	85 c0		 test	 eax, eax
  000ef	75 07		 jne	 SHORT $LN5@async_regi

; 8786 :             return NULL;

  000f1	33 c0		 xor	 eax, eax
  000f3	e9 8e 00 00 00	 jmp	 $LN10@async_regi
$LN5@async_regi:

; 8787 : 
; 8788 :         if (PxSocket_IS_CLIENT(s))

  000f8	48 8b 44 24 40	 mov	 rax, QWORD PTR s$132319[rsp]
  000fd	8b 80 f4 01 00
	00		 mov	 eax, DWORD PTR [rax+500]
  00103	83 e0 01	 and	 eax, 1
  00106	85 c0		 test	 eax, eax
  00108	74 0e		 je	 SHORT $LN4@async_regi

; 8789 :             cb = PxSocket_Connect;

  0010a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PxSocket_Connect
  00111	48 89 44 24 50	 mov	 QWORD PTR cb$132322[rsp], rax

; 8790 :         else

  00116	eb 0c		 jmp	 SHORT $LN3@async_regi
$LN4@async_regi:

; 8791 :             cb = PxSocketServer_Start;

  00118	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PxSocketServer_Start
  0011f	48 89 44 24 50	 mov	 QWORD PTR cb$132322[rsp], rax
$LN3@async_regi:

; 8792 : 
; 8793 :         if (!TrySubmitThreadpoolCallback(cb, c, NULL)) {

  00124	45 33 c0	 xor	 r8d, r8d
  00127	48 8b 54 24 48	 mov	 rdx, QWORD PTR c$132321[rsp]
  0012c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR cb$132322[rsp]
  00131	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_TrySubmitThreadpoolCallback
  00137	85 c0		 test	 eax, eax
  00139	75 0b		 jne	 SHORT $LN2@async_regi

; 8794 :             PyErr_SetFromWindowsErr(0);

  0013b	33 c9		 xor	 ecx, ecx
  0013d	e8 00 00 00 00	 call	 PyErr_SetFromWindowsErr

; 8795 :             return NULL;

  00142	33 c0		 xor	 eax, eax
  00144	eb 40		 jmp	 SHORT $LN10@async_regi
$LN2@async_regi:

; 8796 :         }
; 8797 : 
; 8798 :         Py_INCREF(transport);

  00146	48 8b 4c 24 30	 mov	 rcx, QWORD PTR transport$[rsp]
  0014b	e8 00 00 00 00	 call	 _Py_IncRef

; 8799 :         Py_INCREF(protocol_type);

  00150	48 8b 4c 24 38	 mov	 rcx, QWORD PTR protocol_type$[rsp]
  00155	e8 00 00 00 00	 call	 _Py_IncRef

; 8800 : 
; 8801 :         Py_RETURN_NONE;

  0015a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00161	e8 00 00 00 00	 call	 _Py_IncRef
  00166	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0016d	eb 17		 jmp	 SHORT $LN10@async_regi

; 8802 : 
; 8803 :     } else {

  0016f	eb 15		 jmp	 SHORT $LN1@async_regi
$LN7@async_regi:

; 8804 :         PyErr_SetString(PyExc_ValueError, "unsupported async object");

  00171	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@JDAPMCFE@unsupported?5async?5object?$AA@
  00178	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0017f	e8 00 00 00 00	 call	 PyErr_SetString

; 8805 :         return NULL;

  00184	33 c0		 xor	 eax, eax
$LN1@async_regi:
$LN10@async_regi:

; 8806 :     }
; 8807 : }

  00186	48 83 c4 68	 add	 rsp, 104		; 00000068H
  0018a	c3		 ret	 0
_async_register ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BG@ELDPGIBF@sizeof?$CIPxSocket?$CJ?3?5?$CFd?6?$AA@ ; `string'
PUBLIC	??_C@_0BN@FDBMEIMM@AsyncIOBuffersExhaustedError?$AA@ ; `string'
PUBLIC	??_C@_0BB@OAALBBIG@WaitTimeoutError?$AA@	; `string'
PUBLIC	??_C@_09JIBFAHPJ@WaitError?$AA@			; `string'
PUBLIC	??_C@_0P@KAOKHHGA@NoWaitersError?$AA@		; `string'
PUBLIC	??_C@_0BB@PEDEHLCM@PersistenceError?$AA@	; `string'
PUBLIC	??_C@_0BA@GJOLMHBB@AssignmentError?$AA@		; `string'
PUBLIC	??_C@_0BB@IACFHLDI@UnprotectedError?$AA@	; `string'
PUBLIC	??_C@_0BA@DCBHJBKD@ProtectionError?$AA@		; `string'
PUBLIC	??_C@_0L@POMMPANG@AsyncError?$AA@		; `string'
PUBLIC	??_C@_0CE@HJBHBINJ@_async?4AsyncIOBuffersExhaustedEr@ ; `string'
PUBLIC	??_C@_0BI@FGCNPAFI@_async?4WaitTimeoutError?$AA@ ; `string'
PUBLIC	??_C@_0BB@IFOHHNGP@_async?4WaitError?$AA@	; `string'
PUBLIC	??_C@_0BG@LDACCOIK@_async?4NoWaitersError?$AA@	; `string'
PUBLIC	??_C@_0BI@ECBCJKPC@_async?4PersistenceError?$AA@ ; `string'
PUBLIC	??_C@_0BH@CJCHCECO@_async?4AssignmentError?$AA@	; `string'
PUBLIC	??_C@_0BI@DGADJKOG@_async?4UnprotectedError?$AA@ ; `string'
PUBLIC	??_C@_0BH@HCNLHCJM@_async?4ProtectionError?$AA@	; `string'
PUBLIC	??_C@_0BC@OHLNDENN@_async?4AsyncError?$AA@	; `string'
PUBLIC	??_C@_06HBELJPBO@socket?$AA@			; `string'
PUBLIC	$T136609
PUBLIC	??_C@_0N@GGBJDDFF@_socket?4CAPI?$AA@		; `string'
PUBLIC	_PyAsync_ModInit
EXTRN	PyErr_NewException:PROC
EXTRN	PyModule_AddObject:PROC
EXTRN	PyCapsule_Import:PROC
EXTRN	PyType_Ready:PROC
_BSS	SEGMENT
PyExc_PersistenceError DQ 01H DUP (?)
PyExc_UnprotectedError DQ 01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyAsync_ModInit DD imagerel $LN32
	DD	imagerel $LN32+1187
	DD	imagerel $unwind$_PyAsync_ModInit
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyAsync_ModInit DD 040a01H
	DD	019010aH
	DD	060027003H
xdata	ENDS
;	COMDAT ??_C@_0BG@ELDPGIBF@sizeof?$CIPxSocket?$CJ?3?5?$CFd?6?$AA@
CONST	SEGMENT
??_C@_0BG@ELDPGIBF@sizeof?$CIPxSocket?$CJ?3?5?$CFd?6?$AA@ DB 'sizeof(PxSo'
	DB	'cket): %d', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@FDBMEIMM@AsyncIOBuffersExhaustedError?$AA@
CONST	SEGMENT
??_C@_0BN@FDBMEIMM@AsyncIOBuffersExhaustedError?$AA@ DB 'AsyncIOBuffersEx'
	DB	'haustedError', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@OAALBBIG@WaitTimeoutError?$AA@
CONST	SEGMENT
??_C@_0BB@OAALBBIG@WaitTimeoutError?$AA@ DB 'WaitTimeoutError', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09JIBFAHPJ@WaitError?$AA@
CONST	SEGMENT
??_C@_09JIBFAHPJ@WaitError?$AA@ DB 'WaitError', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@KAOKHHGA@NoWaitersError?$AA@
CONST	SEGMENT
??_C@_0P@KAOKHHGA@NoWaitersError?$AA@ DB 'NoWaitersError', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@PEDEHLCM@PersistenceError?$AA@
CONST	SEGMENT
??_C@_0BB@PEDEHLCM@PersistenceError?$AA@ DB 'PersistenceError', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@GJOLMHBB@AssignmentError?$AA@
CONST	SEGMENT
??_C@_0BA@GJOLMHBB@AssignmentError?$AA@ DB 'AssignmentError', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@IACFHLDI@UnprotectedError?$AA@
CONST	SEGMENT
??_C@_0BB@IACFHLDI@UnprotectedError?$AA@ DB 'UnprotectedError', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@DCBHJBKD@ProtectionError?$AA@
CONST	SEGMENT
??_C@_0BA@DCBHJBKD@ProtectionError?$AA@ DB 'ProtectionError', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@POMMPANG@AsyncError?$AA@
CONST	SEGMENT
??_C@_0L@POMMPANG@AsyncError?$AA@ DB 'AsyncError', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@HJBHBINJ@_async?4AsyncIOBuffersExhaustedEr@
CONST	SEGMENT
??_C@_0CE@HJBHBINJ@_async?4AsyncIOBuffersExhaustedEr@ DB '_async.AsyncIOB'
	DB	'uffersExhaustedError', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@FGCNPAFI@_async?4WaitTimeoutError?$AA@
CONST	SEGMENT
??_C@_0BI@FGCNPAFI@_async?4WaitTimeoutError?$AA@ DB '_async.WaitTimeoutEr'
	DB	'ror', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@IFOHHNGP@_async?4WaitError?$AA@
CONST	SEGMENT
??_C@_0BB@IFOHHNGP@_async?4WaitError?$AA@ DB '_async.WaitError', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@LDACCOIK@_async?4NoWaitersError?$AA@
CONST	SEGMENT
??_C@_0BG@LDACCOIK@_async?4NoWaitersError?$AA@ DB '_async.NoWaitersError', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@ECBCJKPC@_async?4PersistenceError?$AA@
CONST	SEGMENT
??_C@_0BI@ECBCJKPC@_async?4PersistenceError?$AA@ DB '_async.PersistenceEr'
	DB	'ror', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@CJCHCECO@_async?4AssignmentError?$AA@
CONST	SEGMENT
??_C@_0BH@CJCHCECO@_async?4AssignmentError?$AA@ DB '_async.AssignmentErro'
	DB	'r', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@DGADJKOG@_async?4UnprotectedError?$AA@
CONST	SEGMENT
??_C@_0BI@DGADJKOG@_async?4UnprotectedError?$AA@ DB '_async.UnprotectedEr'
	DB	'ror', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@HCNLHCJM@_async?4ProtectionError?$AA@
CONST	SEGMENT
??_C@_0BH@HCNLHCJM@_async?4ProtectionError?$AA@ DB '_async.ProtectionErro'
	DB	'r', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@OHLNDENN@_async?4AsyncError?$AA@
CONST	SEGMENT
??_C@_0BC@OHLNDENN@_async?4AsyncError?$AA@ DB '_async.AsyncError', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06HBELJPBO@socket?$AA@
CONST	SEGMENT
??_C@_06HBELJPBO@socket?$AA@ DB 'socket', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@GGBJDDFF@_socket?4CAPI?$AA@
CONST	SEGMENT
??_C@_0N@GGBJDDFF@_socket?4CAPI?$AA@ DB '_socket.CAPI', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PyAsync_ModInit
_TEXT	SEGMENT
socket_api$ = 32
m$ = 40
$T136609 = 48
tv67 = 184
tv72 = 188
_PyAsync_ModInit PROC					; COMDAT

; 8888 : {

$LN32:
  00000	40 56		 push	 rsi
  00002	57		 push	 rdi
  00003	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H

; 8889 :     PyObject *m;
; 8890 :     PySocketModule_APIObject *socket_api;
; 8891 : 
; 8892 :     if (!PyType_Ready(&PxSocket_Type) < 0)

  0000a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PxSocket_Type
  00011	e8 00 00 00 00	 call	 PyType_Ready
  00016	85 c0		 test	 eax, eax
  00018	75 0d		 jne	 SHORT $LN28@PyAsync_Mo@2
  0001a	c7 84 24 b8 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv67[rsp], 1
  00025	eb 0b		 jmp	 SHORT $LN29@PyAsync_Mo@2
$LN28@PyAsync_Mo@2:
  00027	c7 84 24 b8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv67[rsp], 0
$LN29@PyAsync_Mo@2:
  00032	83 bc 24 b8 00
	00 00 00	 cmp	 DWORD PTR tv67[rsp], 0
  0003a	7d 07		 jge	 SHORT $LN25@PyAsync_Mo@2

; 8893 :         return NULL;

  0003c	33 c0		 xor	 eax, eax
  0003e	e9 56 04 00 00	 jmp	 $LN26@PyAsync_Mo@2
$LN25@PyAsync_Mo@2:

; 8894 : 
; 8895 :     if (!PyType_Ready(&PyXList_Type) < 0)

  00043	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyXList_Type
  0004a	e8 00 00 00 00	 call	 PyType_Ready
  0004f	85 c0		 test	 eax, eax
  00051	75 0d		 jne	 SHORT $LN30@PyAsync_Mo@2
  00053	c7 84 24 bc 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv72[rsp], 1
  0005e	eb 0b		 jmp	 SHORT $LN31@PyAsync_Mo@2
$LN30@PyAsync_Mo@2:
  00060	c7 84 24 bc 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv72[rsp], 0
$LN31@PyAsync_Mo@2:
  0006b	83 bc 24 bc 00
	00 00 00	 cmp	 DWORD PTR tv72[rsp], 0
  00073	7d 07		 jge	 SHORT $LN24@PyAsync_Mo@2

; 8896 :         return NULL;

  00075	33 c0		 xor	 eax, eax
  00077	e9 1d 04 00 00	 jmp	 $LN26@PyAsync_Mo@2
$LN24@PyAsync_Mo@2:

; 8897 : 
; 8898 :     m = PyModule_Create(&_asyncmodule);

  0007c	ba f5 03 00 00	 mov	 edx, 1013		; 000003f5H
  00081	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_asyncmodule
  00088	e8 00 00 00 00	 call	 PyModule_Create2TraceRefs
  0008d	48 89 44 24 28	 mov	 QWORD PTR m$[rsp], rax

; 8899 :     if (m == NULL)

  00092	48 83 7c 24 28
	00		 cmp	 QWORD PTR m$[rsp], 0
  00098	75 07		 jne	 SHORT $LN23@PyAsync_Mo@2

; 8900 :         return NULL;

  0009a	33 c0		 xor	 eax, eax
  0009c	e9 f8 03 00 00	 jmp	 $LN26@PyAsync_Mo@2
$LN23@PyAsync_Mo@2:

; 8901 : 
; 8902 :     socket_api = PySocketModule_ImportModuleAndAPI();

  000a1	ba 01 00 00 00	 mov	 edx, 1
  000a6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@GGBJDDFF@_socket?4CAPI?$AA@
  000ad	e8 00 00 00 00	 call	 PyCapsule_Import
  000b2	48 89 44 24 20	 mov	 QWORD PTR socket_api$[rsp], rax

; 8903 :     if (!socket_api)

  000b7	48 83 7c 24 20
	00		 cmp	 QWORD PTR socket_api$[rsp], 0
  000bd	75 07		 jne	 SHORT $LN22@PyAsync_Mo@2

; 8904 :         return NULL;

  000bf	33 c0		 xor	 eax, eax
  000c1	e9 d3 03 00 00	 jmp	 $LN26@PyAsync_Mo@2
$LN22@PyAsync_Mo@2:

; 8905 :     PySocketModule = *socket_api;

  000c6	48 8d 44 24 30	 lea	 rax, QWORD PTR $T136609[rsp]
  000cb	48 8b f8	 mov	 rdi, rax
  000ce	48 8b 74 24 20	 mov	 rsi, QWORD PTR socket_api$[rsp]
  000d3	b9 88 00 00 00	 mov	 ecx, 136		; 00000088H
  000d8	f3 a4		 rep movsb
  000da	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PySocketModule
  000e1	48 8d 4c 24 30	 lea	 rcx, QWORD PTR $T136609[rsp]
  000e6	48 8b f8	 mov	 rdi, rax
  000e9	48 8b f1	 mov	 rsi, rcx
  000ec	b9 88 00 00 00	 mov	 ecx, 136		; 00000088H
  000f1	f3 a4		 rep movsb

; 8906 : 
; 8907 :     if (PyModule_AddObject(m, "socket", (PyObject *)&PxSocket_Type))

  000f3	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:PxSocket_Type
  000fa	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06HBELJPBO@socket?$AA@
  00101	48 8b 4c 24 28	 mov	 rcx, QWORD PTR m$[rsp]
  00106	e8 00 00 00 00	 call	 PyModule_AddObject
  0010b	85 c0		 test	 eax, eax
  0010d	74 07		 je	 SHORT $LN21@PyAsync_Mo@2

; 8908 :         return NULL;

  0010f	33 c0		 xor	 eax, eax
  00111	e9 83 03 00 00	 jmp	 $LN26@PyAsync_Mo@2
$LN21@PyAsync_Mo@2:

; 8909 : 
; 8910 :     if (PyModule_AddObject(m, "xlist", (PyObject *)&PyXList_Type))

  00116	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:PyXList_Type
  0011d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05KOEEJJMO@xlist?$AA@
  00124	48 8b 4c 24 28	 mov	 rcx, QWORD PTR m$[rsp]
  00129	e8 00 00 00 00	 call	 PyModule_AddObject
  0012e	85 c0		 test	 eax, eax
  00130	74 07		 je	 SHORT $LN20@PyAsync_Mo@2

; 8911 :         return NULL;

  00132	33 c0		 xor	 eax, eax
  00134	e9 60 03 00 00	 jmp	 $LN26@PyAsync_Mo@2
$LN20@PyAsync_Mo@2:

; 8912 : 
; 8913 :     PyExc_AsyncError = PyErr_NewException("_async.AsyncError", NULL, NULL);

  00139	45 33 c0	 xor	 r8d, r8d
  0013c	33 d2		 xor	 edx, edx
  0013e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@OHLNDENN@_async?4AsyncError?$AA@
  00145	e8 00 00 00 00	 call	 PyErr_NewException
  0014a	48 89 05 00 00
	00 00		 mov	 QWORD PTR PyExc_AsyncError, rax

; 8914 :     if (!PyExc_AsyncError)

  00151	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR PyExc_AsyncError, 0
  00159	75 07		 jne	 SHORT $LN19@PyAsync_Mo@2

; 8915 :         return NULL;

  0015b	33 c0		 xor	 eax, eax
  0015d	e9 37 03 00 00	 jmp	 $LN26@PyAsync_Mo@2
$LN19@PyAsync_Mo@2:

; 8916 : 
; 8917 :     PyExc_ProtectionError = \
; 8918 :         PyErr_NewException("_async.ProtectionError", PyExc_AsyncError, NULL);

  00162	45 33 c0	 xor	 r8d, r8d
  00165	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR PyExc_AsyncError
  0016c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BH@HCNLHCJM@_async?4ProtectionError?$AA@
  00173	e8 00 00 00 00	 call	 PyErr_NewException
  00178	48 89 05 00 00
	00 00		 mov	 QWORD PTR PyExc_ProtectionError, rax

; 8919 :     if (!PyExc_ProtectionError)

  0017f	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR PyExc_ProtectionError, 0
  00187	75 07		 jne	 SHORT $LN18@PyAsync_Mo@2

; 8920 :         return NULL;

  00189	33 c0		 xor	 eax, eax
  0018b	e9 09 03 00 00	 jmp	 $LN26@PyAsync_Mo@2
$LN18@PyAsync_Mo@2:

; 8921 : 
; 8922 :     PyExc_UnprotectedError = \
; 8923 :         PyErr_NewException("_async.UnprotectedError", PyExc_AsyncError, NULL);

  00190	45 33 c0	 xor	 r8d, r8d
  00193	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR PyExc_AsyncError
  0019a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@DGADJKOG@_async?4UnprotectedError?$AA@
  001a1	e8 00 00 00 00	 call	 PyErr_NewException
  001a6	48 89 05 00 00
	00 00		 mov	 QWORD PTR PyExc_UnprotectedError, rax

; 8924 :     if (!PyExc_UnprotectedError)

  001ad	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR PyExc_UnprotectedError, 0
  001b5	75 07		 jne	 SHORT $LN17@PyAsync_Mo@2

; 8925 :         return NULL;

  001b7	33 c0		 xor	 eax, eax
  001b9	e9 db 02 00 00	 jmp	 $LN26@PyAsync_Mo@2
$LN17@PyAsync_Mo@2:

; 8926 : 
; 8927 :     PyExc_AssignmentError = \
; 8928 :         PyErr_NewException("_async.AssignmentError", PyExc_AsyncError, NULL);

  001be	45 33 c0	 xor	 r8d, r8d
  001c1	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR PyExc_AsyncError
  001c8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BH@CJCHCECO@_async?4AssignmentError?$AA@
  001cf	e8 00 00 00 00	 call	 PyErr_NewException
  001d4	48 89 05 00 00
	00 00		 mov	 QWORD PTR PyExc_AssignmentError, rax

; 8929 :     if (!PyExc_AssignmentError)

  001db	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR PyExc_AssignmentError, 0
  001e3	75 07		 jne	 SHORT $LN16@PyAsync_Mo@2

; 8930 :         return NULL;

  001e5	33 c0		 xor	 eax, eax
  001e7	e9 ad 02 00 00	 jmp	 $LN26@PyAsync_Mo@2
$LN16@PyAsync_Mo@2:

; 8931 : 
; 8932 :     PyExc_PersistenceError = \
; 8933 :         PyErr_NewException("_async.PersistenceError", PyExc_AsyncError, NULL);

  001ec	45 33 c0	 xor	 r8d, r8d
  001ef	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR PyExc_AsyncError
  001f6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@ECBCJKPC@_async?4PersistenceError?$AA@
  001fd	e8 00 00 00 00	 call	 PyErr_NewException
  00202	48 89 05 00 00
	00 00		 mov	 QWORD PTR PyExc_PersistenceError, rax

; 8934 :     if (!PyExc_PersistenceError)

  00209	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR PyExc_PersistenceError, 0
  00211	75 07		 jne	 SHORT $LN15@PyAsync_Mo@2

; 8935 :         return NULL;

  00213	33 c0		 xor	 eax, eax
  00215	e9 7f 02 00 00	 jmp	 $LN26@PyAsync_Mo@2
$LN15@PyAsync_Mo@2:

; 8936 : 
; 8937 :     PyExc_NoWaitersError = \
; 8938 :         PyErr_NewException("_async.NoWaitersError", PyExc_AsyncError, NULL);

  0021a	45 33 c0	 xor	 r8d, r8d
  0021d	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR PyExc_AsyncError
  00224	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@LDACCOIK@_async?4NoWaitersError?$AA@
  0022b	e8 00 00 00 00	 call	 PyErr_NewException
  00230	48 89 05 00 00
	00 00		 mov	 QWORD PTR PyExc_NoWaitersError, rax

; 8939 :     if (!PyExc_NoWaitersError)

  00237	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR PyExc_NoWaitersError, 0
  0023f	75 07		 jne	 SHORT $LN14@PyAsync_Mo@2

; 8940 :         return NULL;

  00241	33 c0		 xor	 eax, eax
  00243	e9 51 02 00 00	 jmp	 $LN26@PyAsync_Mo@2
$LN14@PyAsync_Mo@2:

; 8941 : 
; 8942 :     PyExc_WaitError = \
; 8943 :         PyErr_NewException("_async.WaitError", PyExc_AsyncError, NULL);

  00248	45 33 c0	 xor	 r8d, r8d
  0024b	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR PyExc_AsyncError
  00252	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@IFOHHNGP@_async?4WaitError?$AA@
  00259	e8 00 00 00 00	 call	 PyErr_NewException
  0025e	48 89 05 00 00
	00 00		 mov	 QWORD PTR PyExc_WaitError, rax

; 8944 :     if (!PyExc_WaitError)

  00265	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR PyExc_WaitError, 0
  0026d	75 07		 jne	 SHORT $LN13@PyAsync_Mo@2

; 8945 :         return NULL;

  0026f	33 c0		 xor	 eax, eax
  00271	e9 23 02 00 00	 jmp	 $LN26@PyAsync_Mo@2
$LN13@PyAsync_Mo@2:

; 8946 : 
; 8947 :     PyExc_WaitTimeoutError = \
; 8948 :         PyErr_NewException("_async.WaitTimeoutError", PyExc_AsyncError, NULL);

  00276	45 33 c0	 xor	 r8d, r8d
  00279	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR PyExc_AsyncError
  00280	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@FGCNPAFI@_async?4WaitTimeoutError?$AA@
  00287	e8 00 00 00 00	 call	 PyErr_NewException
  0028c	48 89 05 00 00
	00 00		 mov	 QWORD PTR PyExc_WaitTimeoutError, rax

; 8949 :     if (!PyExc_WaitTimeoutError)

  00293	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR PyExc_WaitTimeoutError, 0
  0029b	75 07		 jne	 SHORT $LN12@PyAsync_Mo@2

; 8950 :         return NULL;

  0029d	33 c0		 xor	 eax, eax
  0029f	e9 f5 01 00 00	 jmp	 $LN26@PyAsync_Mo@2
$LN12@PyAsync_Mo@2:

; 8951 : 
; 8952 :     PyExc_AsyncIOBuffersExhaustedError = \
; 8953 :         PyErr_NewException("_async.AsyncIOBuffersExhaustedError",
; 8954 :                            PyExc_AsyncError,
; 8955 :                            NULL);

  002a4	45 33 c0	 xor	 r8d, r8d
  002a7	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR PyExc_AsyncError
  002ae	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CE@HJBHBINJ@_async?4AsyncIOBuffersExhaustedEr@
  002b5	e8 00 00 00 00	 call	 PyErr_NewException
  002ba	48 89 05 00 00
	00 00		 mov	 QWORD PTR PyExc_AsyncIOBuffersExhaustedError, rax

; 8956 :     if (!PyExc_AsyncIOBuffersExhaustedError)

  002c1	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR PyExc_AsyncIOBuffersExhaustedError, 0
  002c9	75 07		 jne	 SHORT $LN11@PyAsync_Mo@2

; 8957 :         return NULL;

  002cb	33 c0		 xor	 eax, eax
  002cd	e9 c7 01 00 00	 jmp	 $LN26@PyAsync_Mo@2
$LN11@PyAsync_Mo@2:

; 8958 : 
; 8959 :     if (PyModule_AddObject(m, "AsyncError", PyExc_AsyncError))

  002d2	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR PyExc_AsyncError
  002d9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@POMMPANG@AsyncError?$AA@
  002e0	48 8b 4c 24 28	 mov	 rcx, QWORD PTR m$[rsp]
  002e5	e8 00 00 00 00	 call	 PyModule_AddObject
  002ea	85 c0		 test	 eax, eax
  002ec	74 07		 je	 SHORT $LN10@PyAsync_Mo@2

; 8960 :         return NULL;

  002ee	33 c0		 xor	 eax, eax
  002f0	e9 a4 01 00 00	 jmp	 $LN26@PyAsync_Mo@2
$LN10@PyAsync_Mo@2:

; 8961 : 
; 8962 :     if (PyModule_AddObject(m, "ProtectionError", PyExc_ProtectionError))

  002f5	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR PyExc_ProtectionError
  002fc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BA@DCBHJBKD@ProtectionError?$AA@
  00303	48 8b 4c 24 28	 mov	 rcx, QWORD PTR m$[rsp]
  00308	e8 00 00 00 00	 call	 PyModule_AddObject
  0030d	85 c0		 test	 eax, eax
  0030f	74 07		 je	 SHORT $LN9@PyAsync_Mo@2

; 8963 :         return NULL;

  00311	33 c0		 xor	 eax, eax
  00313	e9 81 01 00 00	 jmp	 $LN26@PyAsync_Mo@2
$LN9@PyAsync_Mo@2:

; 8964 : 
; 8965 :     if (PyModule_AddObject(m, "UnprotectedError", PyExc_UnprotectedError))

  00318	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR PyExc_UnprotectedError
  0031f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BB@IACFHLDI@UnprotectedError?$AA@
  00326	48 8b 4c 24 28	 mov	 rcx, QWORD PTR m$[rsp]
  0032b	e8 00 00 00 00	 call	 PyModule_AddObject
  00330	85 c0		 test	 eax, eax
  00332	74 07		 je	 SHORT $LN8@PyAsync_Mo@2

; 8966 :         return NULL;

  00334	33 c0		 xor	 eax, eax
  00336	e9 5e 01 00 00	 jmp	 $LN26@PyAsync_Mo@2
$LN8@PyAsync_Mo@2:

; 8967 : 
; 8968 :     if (PyModule_AddObject(m, "AssignmentError", PyExc_AssignmentError))

  0033b	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR PyExc_AssignmentError
  00342	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BA@GJOLMHBB@AssignmentError?$AA@
  00349	48 8b 4c 24 28	 mov	 rcx, QWORD PTR m$[rsp]
  0034e	e8 00 00 00 00	 call	 PyModule_AddObject
  00353	85 c0		 test	 eax, eax
  00355	74 07		 je	 SHORT $LN7@PyAsync_Mo@2

; 8969 :         return NULL;

  00357	33 c0		 xor	 eax, eax
  00359	e9 3b 01 00 00	 jmp	 $LN26@PyAsync_Mo@2
$LN7@PyAsync_Mo@2:

; 8970 : 
; 8971 :     if (PyModule_AddObject(m, "PersistenceError", PyExc_PersistenceError))

  0035e	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR PyExc_PersistenceError
  00365	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BB@PEDEHLCM@PersistenceError?$AA@
  0036c	48 8b 4c 24 28	 mov	 rcx, QWORD PTR m$[rsp]
  00371	e8 00 00 00 00	 call	 PyModule_AddObject
  00376	85 c0		 test	 eax, eax
  00378	74 07		 je	 SHORT $LN6@PyAsync_Mo@2

; 8972 :         return NULL;

  0037a	33 c0		 xor	 eax, eax
  0037c	e9 18 01 00 00	 jmp	 $LN26@PyAsync_Mo@2
$LN6@PyAsync_Mo@2:

; 8973 : 
; 8974 :     if (PyModule_AddObject(m, "NoWaitersError", PyExc_NoWaitersError))

  00381	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR PyExc_NoWaitersError
  00388	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0P@KAOKHHGA@NoWaitersError?$AA@
  0038f	48 8b 4c 24 28	 mov	 rcx, QWORD PTR m$[rsp]
  00394	e8 00 00 00 00	 call	 PyModule_AddObject
  00399	85 c0		 test	 eax, eax
  0039b	74 07		 je	 SHORT $LN5@PyAsync_Mo@2

; 8975 :         return NULL;

  0039d	33 c0		 xor	 eax, eax
  0039f	e9 f5 00 00 00	 jmp	 $LN26@PyAsync_Mo@2
$LN5@PyAsync_Mo@2:

; 8976 : 
; 8977 :     if (PyModule_AddObject(m, "WaitError", PyExc_WaitError))

  003a4	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR PyExc_WaitError
  003ab	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09JIBFAHPJ@WaitError?$AA@
  003b2	48 8b 4c 24 28	 mov	 rcx, QWORD PTR m$[rsp]
  003b7	e8 00 00 00 00	 call	 PyModule_AddObject
  003bc	85 c0		 test	 eax, eax
  003be	74 07		 je	 SHORT $LN4@PyAsync_Mo@2

; 8978 :         return NULL;

  003c0	33 c0		 xor	 eax, eax
  003c2	e9 d2 00 00 00	 jmp	 $LN26@PyAsync_Mo@2
$LN4@PyAsync_Mo@2:

; 8979 : 
; 8980 :     if (PyModule_AddObject(m, "WaitTimeoutError", PyExc_WaitTimeoutError))

  003c7	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR PyExc_WaitTimeoutError
  003ce	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BB@OAALBBIG@WaitTimeoutError?$AA@
  003d5	48 8b 4c 24 28	 mov	 rcx, QWORD PTR m$[rsp]
  003da	e8 00 00 00 00	 call	 PyModule_AddObject
  003df	85 c0		 test	 eax, eax
  003e1	74 07		 je	 SHORT $LN3@PyAsync_Mo@2

; 8981 :         return NULL;

  003e3	33 c0		 xor	 eax, eax
  003e5	e9 af 00 00 00	 jmp	 $LN26@PyAsync_Mo@2
$LN3@PyAsync_Mo@2:

; 8982 : 
; 8983 :     if (PyModule_AddObject(m, "AsyncIOBuffersExhaustedError",
; 8984 :                            PyExc_AsyncIOBuffersExhaustedError))

  003ea	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR PyExc_AsyncIOBuffersExhaustedError
  003f1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@FDBMEIMM@AsyncIOBuffersExhaustedError?$AA@
  003f8	48 8b 4c 24 28	 mov	 rcx, QWORD PTR m$[rsp]
  003fd	e8 00 00 00 00	 call	 PyModule_AddObject
  00402	85 c0		 test	 eax, eax
  00404	74 07		 je	 SHORT $LN2@PyAsync_Mo@2

; 8985 :         return NULL;

  00406	33 c0		 xor	 eax, eax
  00408	e9 8c 00 00 00	 jmp	 $LN26@PyAsync_Mo@2
$LN2@PyAsync_Mo@2:

; 8986 : 
; 8987 :     Py_INCREF(PyExc_AsyncError);

  0040d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_AsyncError
  00414	e8 00 00 00 00	 call	 _Py_IncRef

; 8988 :     Py_INCREF(PyExc_ProtectionError);

  00419	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ProtectionError
  00420	e8 00 00 00 00	 call	 _Py_IncRef

; 8989 :     Py_INCREF(PyExc_UnprotectedError);

  00425	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_UnprotectedError
  0042c	e8 00 00 00 00	 call	 _Py_IncRef

; 8990 :     Py_INCREF(PyExc_AssignmentError);

  00431	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_AssignmentError
  00438	e8 00 00 00 00	 call	 _Py_IncRef

; 8991 :     Py_INCREF(PyExc_PersistenceError);

  0043d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_PersistenceError
  00444	e8 00 00 00 00	 call	 _Py_IncRef

; 8992 :     Py_INCREF(PyExc_NoWaitersError);

  00449	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_NoWaitersError
  00450	e8 00 00 00 00	 call	 _Py_IncRef

; 8993 :     Py_INCREF(PyExc_WaitError);

  00455	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_WaitError
  0045c	e8 00 00 00 00	 call	 _Py_IncRef

; 8994 :     Py_INCREF(PyExc_WaitTimeoutError);

  00461	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_WaitTimeoutError
  00468	e8 00 00 00 00	 call	 _Py_IncRef

; 8995 :     Py_INCREF(PyExc_AsyncIOBuffersExhaustedError);

  0046d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_AsyncIOBuffersExhaustedError
  00474	e8 00 00 00 00	 call	 _Py_IncRef

; 8996 : 
; 8997 :     /* Uncomment the following (during development) as needed. */
; 8998 :     if (Py_VerboseFlag)

  00479	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR Py_VerboseFlag, 0
  00480	74 12		 je	 SHORT $LN1@PyAsync_Mo@2

; 8999 :         printf("sizeof(PxSocket): %d\n", sizeof(PxSocket));

  00482	ba 50 04 00 00	 mov	 edx, 1104		; 00000450H
  00487	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@ELDPGIBF@sizeof?$CIPxSocket?$CJ?3?5?$CFd?6?$AA@
  0048e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_printf
$LN1@PyAsync_Mo@2:

; 9000 : 
; 9001 :     return m;

  00494	48 8b 44 24 28	 mov	 rax, QWORD PTR m$[rsp]
$LN26@PyAsync_Mo@2:

; 9002 : }

  00499	48 81 c4 c8 00
	00 00		 add	 rsp, 200		; 000000c8H
  004a0	5f		 pop	 rdi
  004a1	5e		 pop	 rsi
  004a2	c3		 ret	 0
_PyAsync_ModInit ENDP
_TEXT	ENDS
END
