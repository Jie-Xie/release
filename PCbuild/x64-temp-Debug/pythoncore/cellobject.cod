; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_04GDDCBEKB@cell?$AA@			; `string'
PUBLIC	??_C@_0O@IHDFIJJ@cell_contents?$AA@		; `string'
PUBLIC	PyCell_Type
EXTRN	PyObject_GenericGetAttr:PROC
EXTRN	PyType_Type:BYTE
;	COMDAT ??_C@_04GDDCBEKB@cell?$AA@
CONST	SEGMENT
??_C@_04GDDCBEKB@cell?$AA@ DB 'cell', 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
cell_getsetlist DQ FLAT:??_C@_0O@IHDFIJJ@cell_contents?$AA@
	DQ	FLAT:cell_get_contents
	DQ	0000000000000000H
	ORG $+16
	DQ	0000000000000000H
	ORG $+32
PyCell_Type DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_04GDDCBEKB@cell?$AA@
	DQ	0000000000000070H
	DQ	0000000000000000H
	DQ	FLAT:cell_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:cell_repr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044000H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:cell_traverse
	DQ	FLAT:cell_clear
	DQ	FLAT:cell_richcompare
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:cell_getsetlist
	ORG $+136
_DATA	ENDS
;	COMDAT ??_C@_0O@IHDFIJJ@cell_contents?$AA@
CONST	SEGMENT
??_C@_0O@IHDFIJJ@cell_contents?$AA@ DB 'cell_contents', 00H ; `string'
CONST	ENDS
PUBLIC	??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@ ; `string'
PUBLIC	??_C@_0L@EFEENECG@PyCell_New?$AA@		; `string'
PUBLIC	??_C@_0BI@GCIOHBGJ@?4?4?2Objects?2cellobject?4c?$AA@ ; `string'
PUBLIC	_Py_IncRef
PUBLIC	PyCell_New
EXTRN	_PyGC_generation0:QWORD
EXTRN	Py_FatalError:PROC
EXTRN	_PyParallel_Guard:PROC
EXTRN	_PyObject_GC_New:PROC
EXTRN	_PxObject_New:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\objects\cellobject.c
pdata	SEGMENT
$pdata$PyCell_New DD imagerel $LN17
	DD	imagerel $LN17+365
	DD	imagerel $unwind$PyCell_New
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyCell_New DD 010901H
	DD	0a209H
xdata	ENDS
;	COMDAT ??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@
CONST	SEGMENT
??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@ DB 'GC object alread'
	DB	'y tracked', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@EFEENECG@PyCell_New?$AA@
CONST	SEGMENT
??_C@_0L@EFEENECG@PyCell_New?$AA@ DB 'PyCell_New', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@GCIOHBGJ@?4?4?2Objects?2cellobject?4c?$AA@
CONST	SEGMENT
??_C@_0BI@GCIOHBGJ@?4?4?2Objects?2cellobject?4c?$AA@ DB '..\Objects\cello'
	DB	'bject.c', 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyCell_New
_TEXT	SEGMENT
op$ = 48
g$20308 = 56
tv70 = 64
tv91 = 72
obj$ = 96
PyCell_New PROC						; COMDAT

; 7    : {

$LN17:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 8    :     PyCellObject *op;
; 9    : 
; 10   :     op = (PyCellObject *)PyObject_GC_New(PyCellObject, &PyCell_Type);

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	74 13		 je	 SHORT $LN13@PyCell_New
  00012	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyCell_Type
  00019	e8 00 00 00 00	 call	 _PxObject_New
  0001e	48 89 44 24 40	 mov	 QWORD PTR tv70[rsp], rax
  00023	eb 11		 jmp	 SHORT $LN14@PyCell_New
$LN13@PyCell_New:
  00025	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyCell_Type
  0002c	e8 00 00 00 00	 call	 _PyObject_GC_New
  00031	48 89 44 24 40	 mov	 QWORD PTR tv70[rsp], rax
$LN14@PyCell_New:
  00036	48 8b 44 24 40	 mov	 rax, QWORD PTR tv70[rsp]
  0003b	48 89 44 24 30	 mov	 QWORD PTR op$[rsp], rax

; 11   :     if (op == NULL)

  00040	48 83 7c 24 30
	00		 cmp	 QWORD PTR op$[rsp], 0
  00046	75 07		 jne	 SHORT $LN10@PyCell_New

; 12   :         return NULL;

  00048	33 c0		 xor	 eax, eax
  0004a	e9 19 01 00 00	 jmp	 $LN11@PyCell_New
$LN10@PyCell_New:

; 13   :     op->ob_ref = obj;

  0004f	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  00054	48 8b 4c 24 60	 mov	 rcx, QWORD PTR obj$[rsp]
  00059	48 89 48 60	 mov	 QWORD PTR [rax+96], rcx
$LN9@PyCell_New:

; 14   :     Py_XINCREF(obj);

  0005d	48 83 7c 24 60
	00		 cmp	 QWORD PTR obj$[rsp], 0
  00063	74 0a		 je	 SHORT $LN6@PyCell_New
  00065	48 8b 4c 24 60	 mov	 rcx, QWORD PTR obj$[rsp]
  0006a	e8 00 00 00 00	 call	 _Py_IncRef
$LN6@PyCell_New:
  0006f	33 c0		 xor	 eax, eax
  00071	85 c0		 test	 eax, eax
  00073	75 e8		 jne	 SHORT $LN9@PyCell_New

; 15   : 
; 16   :     _PyObject_GC_TRACK(op);

  00075	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0007d	4c 8b 4c 24 30	 mov	 r9, QWORD PTR op$[rsp]
  00082	41 b8 10 00 00
	00		 mov	 r8d, 16
  00088	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@GCIOHBGJ@?4?4?2Objects?2cellobject?4c?$AA@
  0008f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@EFEENECG@PyCell_New?$AA@
  00096	e8 00 00 00 00	 call	 _PyParallel_Guard
  0009b	85 c0		 test	 eax, eax
  0009d	0f 85 c0 00 00
	00		 jne	 $LN5@PyCell_New
$LN4@PyCell_New:
  000a3	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000ab	4c 8b 4c 24 30	 mov	 r9, QWORD PTR op$[rsp]
  000b0	41 b8 10 00 00
	00		 mov	 r8d, 16
  000b6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@GCIOHBGJ@?4?4?2Objects?2cellobject?4c?$AA@
  000bd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@EFEENECG@PyCell_New?$AA@
  000c4	e8 00 00 00 00	 call	 _PyParallel_Guard
  000c9	85 c0		 test	 eax, eax
  000cb	74 0b		 je	 SHORT $LN15@PyCell_New
  000cd	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR tv91[rsp], 0
  000d6	eb 0e		 jmp	 SHORT $LN16@PyCell_New
$LN15@PyCell_New:
  000d8	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  000dd	48 83 e8 18	 sub	 rax, 24
  000e1	48 89 44 24 48	 mov	 QWORD PTR tv91[rsp], rax
$LN16@PyCell_New:
  000e6	48 8b 44 24 48	 mov	 rax, QWORD PTR tv91[rsp]
  000eb	48 89 44 24 38	 mov	 QWORD PTR g$20308[rsp], rax
  000f0	48 8b 44 24 38	 mov	 rax, QWORD PTR g$20308[rsp]
  000f5	48 83 78 10 fe	 cmp	 QWORD PTR [rax+16], -2
  000fa	74 0c		 je	 SHORT $LN1@PyCell_New
  000fc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@
  00103	e8 00 00 00 00	 call	 Py_FatalError
$LN1@PyCell_New:
  00108	48 8b 44 24 38	 mov	 rax, QWORD PTR g$20308[rsp]
  0010d	48 c7 40 10 fd
	ff ff ff	 mov	 QWORD PTR [rax+16], -3
  00115	48 8b 44 24 38	 mov	 rax, QWORD PTR g$20308[rsp]
  0011a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR _PyGC_generation0
  00121	48 89 08	 mov	 QWORD PTR [rax], rcx
  00124	48 8b 44 24 38	 mov	 rax, QWORD PTR g$20308[rsp]
  00129	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR _PyGC_generation0
  00130	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00134	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  00138	48 8b 44 24 38	 mov	 rax, QWORD PTR g$20308[rsp]
  0013d	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00141	48 8b 4c 24 38	 mov	 rcx, QWORD PTR g$20308[rsp]
  00146	48 89 08	 mov	 QWORD PTR [rax], rcx
  00149	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyGC_generation0
  00150	48 8b 4c 24 38	 mov	 rcx, QWORD PTR g$20308[rsp]
  00155	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  00159	33 c0		 xor	 eax, eax
  0015b	85 c0		 test	 eax, eax
  0015d	0f 85 40 ff ff
	ff		 jne	 $LN4@PyCell_New
$LN5@PyCell_New:

; 17   :     return (PyObject *)op;

  00163	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
$LN11@PyCell_New:

; 18   : }

  00168	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0016c	c3		 ret	 0
PyCell_New ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
EXTRN	_Py_RefTotal:QWORD
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN7
	DD	imagerel $LN7+132
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 6d		 jne	 SHORT $LN2@Py_IncRef
  00012	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0001a	4c 8b 4c 24 40	 mov	 r9, QWORD PTR op$[rsp]
  0001f	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_Guard
  00038	85 c0		 test	 eax, eax
  0003a	75 12		 jne	 SHORT $LN1@Py_IncRef
  0003c	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  00041	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00045	48 83 e0 20	 and	 rax, 32			; 00000020H
  00049	48 85 c0	 test	 rax, rax
  0004c	74 31		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;

  0004e	e8 00 00 00 00	 call	 _Py_PXCTX
  00053	85 c0		 test	 eax, eax
  00055	74 02		 je	 SHORT $LN5@Py_IncRef
  00057	eb 11		 jmp	 SHORT $LN6@Py_IncRef
$LN5@Py_IncRef:
  00059	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00060	48 ff c0	 inc	 rax
  00063	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN6@Py_IncRef:

; 907  :         (((PyObject*)(op))->ob_refcnt++);

  0006a	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  0006f	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00073	48 ff c0	 inc	 rax
  00076	48 8b 4c 24 40	 mov	 rcx, QWORD PTR op$[rsp]
  0007b	48 89 41 50	 mov	 QWORD PTR [rcx+80], rax
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  0007f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00083	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	PyCell_Get
EXTRN	_PyErr_BadInternalCall:PROC
;	COMDAT pdata
; File c:\src\pyparallel\objects\cellobject.c
pdata	SEGMENT
$pdata$PyCell_Get DD imagerel $LN8
	DD	imagerel $LN8+94
	DD	imagerel $unwind$PyCell_Get
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyCell_Get DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyCell_Get
_TEXT	SEGMENT
op$ = 48
PyCell_Get PROC						; COMDAT

; 22   : {

$LN8:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 23   :     if (!PyCell_Check(op)) {

  00009	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyCell_Type
  00010	48 8b 4c 24 30	 mov	 rcx, QWORD PTR op$[rsp]
  00015	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00019	74 15		 je	 SHORT $LN5@PyCell_Get

; 24   :         PyErr_BadInternalCall();

  0001b	ba 18 00 00 00	 mov	 edx, 24
  00020	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@GCIOHBGJ@?4?4?2Objects?2cellobject?4c?$AA@
  00027	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 25   :         return NULL;

  0002c	33 c0		 xor	 eax, eax
  0002e	eb 29		 jmp	 SHORT $LN6@PyCell_Get
$LN5@PyCell_Get:
$LN4@PyCell_Get:

; 26   :     }
; 27   :     Py_XINCREF(((PyCellObject*)op)->ob_ref);

  00030	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  00035	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  0003a	74 0e		 je	 SHORT $LN1@PyCell_Get
  0003c	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  00041	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00045	e8 00 00 00 00	 call	 _Py_IncRef
$LN1@PyCell_Get:
  0004a	33 c0		 xor	 eax, eax
  0004c	85 c0		 test	 eax, eax
  0004e	75 e0		 jne	 SHORT $LN4@PyCell_Get

; 28   :     return PyCell_GET(op);

  00050	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  00055	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
$LN6@PyCell_Get:

; 29   : }

  00059	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0005d	c3		 ret	 0
PyCell_Get ENDP
_TEXT	ENDS
PUBLIC	_Py_DecRef
PUBLIC	PyCell_Set
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyCell_Set DD imagerel $LN12
	DD	imagerel $LN12+139
	DD	imagerel $unwind$PyCell_Set
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyCell_Set DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyCell_Set
_TEXT	SEGMENT
oldobj$ = 32
op$ = 64
obj$ = 72
PyCell_Set PROC						; COMDAT

; 33   : {

$LN12:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 34   :     PyObject* oldobj;
; 35   :     if (!PyCell_Check(op)) {

  0000e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyCell_Type
  00015	48 8b 4c 24 40	 mov	 rcx, QWORD PTR op$[rsp]
  0001a	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0001e	74 18		 je	 SHORT $LN9@PyCell_Set

; 36   :         PyErr_BadInternalCall();

  00020	ba 24 00 00 00	 mov	 edx, 36			; 00000024H
  00025	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@GCIOHBGJ@?4?4?2Objects?2cellobject?4c?$AA@
  0002c	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 37   :         return -1;

  00031	b8 ff ff ff ff	 mov	 eax, -1
  00036	eb 4e		 jmp	 SHORT $LN10@PyCell_Set
$LN9@PyCell_Set:

; 38   :     }
; 39   :     oldobj = PyCell_GET(op);

  00038	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  0003d	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00041	48 89 44 24 20	 mov	 QWORD PTR oldobj$[rsp], rax
$LN8@PyCell_Set:

; 40   :     Py_XINCREF(obj);

  00046	48 83 7c 24 48
	00		 cmp	 QWORD PTR obj$[rsp], 0
  0004c	74 0a		 je	 SHORT $LN5@PyCell_Set
  0004e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR obj$[rsp]
  00053	e8 00 00 00 00	 call	 _Py_IncRef
$LN5@PyCell_Set:
  00058	33 c0		 xor	 eax, eax
  0005a	85 c0		 test	 eax, eax
  0005c	75 e8		 jne	 SHORT $LN8@PyCell_Set

; 41   :     PyCell_SET(op, obj);

  0005e	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  00063	48 8b 4c 24 48	 mov	 rcx, QWORD PTR obj$[rsp]
  00068	48 89 48 60	 mov	 QWORD PTR [rax+96], rcx
$LN4@PyCell_Set:

; 42   :     Py_XDECREF(oldobj);

  0006c	48 83 7c 24 20
	00		 cmp	 QWORD PTR oldobj$[rsp], 0
  00072	74 0a		 je	 SHORT $LN1@PyCell_Set
  00074	48 8b 4c 24 20	 mov	 rcx, QWORD PTR oldobj$[rsp]
  00079	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@PyCell_Set:
  0007e	33 c0		 xor	 eax, eax
  00080	85 c0		 test	 eax, eax
  00082	75 e8		 jne	 SHORT $LN4@PyCell_Set

; 43   :     return 0;

  00084	33 c0		 xor	 eax, eax
$LN10@PyCell_Set:

; 44   : }

  00086	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0008a	c3		 ret	 0
PyCell_Set ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
EXTRN	_Py_Dealloc:PROC
EXTRN	_Py_NegativeRefcount:PROC
EXTRN	Px_DecRef:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN13
	DD	imagerel $LN13+257
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
tv81 = 48
op$ = 80
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN13:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	0f 85 e6 00 00
	00		 jne	 $LN8@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00016	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0001b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0001f	48 83 e0 20	 and	 rax, 32			; 00000020H
  00023	48 85 c0	 test	 rax, rax
  00026	75 14		 jne	 SHORT $LN6@Py_DecRef
  00028	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0002d	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00031	48 25 80 00 00
	00		 and	 rax, 128		; 00000080H
  00037	48 85 c0	 test	 rax, rax
  0003a	74 0f		 je	 SHORT $LN7@Py_DecRef
$LN6@Py_DecRef:

; 926  :             Px_DECREF(op);

  0003c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  00041	e8 00 00 00 00	 call	 Px_DecRef
  00046	e9 b1 00 00 00	 jmp	 $LN5@Py_DecRef
$LN7@Py_DecRef:

; 927  :         else if (!Px_ISPX(op)) {

  0004b	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00050	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00054	48 83 e0 02	 and	 rax, 2
  00058	48 85 c0	 test	 rax, rax
  0005b	0f 85 9b 00 00
	00		 jne	 $LN4@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;

  00061	e8 00 00 00 00	 call	 _Py_PXCTX
  00066	85 c0		 test	 eax, eax
  00068	74 02		 je	 SHORT $LN11@Py_DecRef
  0006a	eb 11		 jmp	 SHORT $LN12@Py_DecRef
$LN11@Py_DecRef:
  0006c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00073	48 ff c8	 dec	 rax
  00076	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN12@Py_DecRef:

; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  0007d	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00082	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00086	48 ff c8	 dec	 rax
  00089	48 89 44 24 30	 mov	 QWORD PTR tv81[rsp], rax
  0008e	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00093	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv81[rsp]
  00098	48 89 48 50	 mov	 QWORD PTR [rax+80], rcx
  0009c	48 83 7c 24 30
	00		 cmp	 QWORD PTR tv81[rsp], 0
  000a2	74 4e		 je	 SHORT $LN3@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);

  000a4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000ac	4c 8b 4c 24 50	 mov	 r9, QWORD PTR op$[rsp]
  000b1	41 b8 a2 03 00
	00		 mov	 r8d, 930		; 000003a2H
  000b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000c5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ca	85 c0		 test	 eax, eax
  000cc	75 22		 jne	 SHORT $LN2@Py_DecRef
  000ce	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  000d3	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000d8	7d 16		 jge	 SHORT $LN2@Py_DecRef
  000da	4c 8b 44 24 50	 mov	 r8, QWORD PTR op$[rsp]
  000df	ba a2 03 00 00	 mov	 edx, 930		; 000003a2H
  000e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000eb	e8 00 00 00 00	 call	 _Py_NegativeRefcount
$LN2@Py_DecRef:

; 931  :             } else

  000f0	eb 0a		 jmp	 SHORT $LN1@Py_DecRef
$LN3@Py_DecRef:

; 932  :                 _Py_Dealloc((PyObject *)(op));

  000f2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  000f7	e8 00 00 00 00	 call	 _Py_Dealloc
$LN1@Py_DecRef:
$LN4@Py_DecRef:
$LN5@Py_DecRef:
$LN8@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  000fc	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00100	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_1EM@HFMJMDDM@?$AAg?$AA?9?$AA?$DO?$AAg?$AAc?$AA?4?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AAG?$AAC?$AA_?$AAR?$AAE?$AAF?$AAS?$AA_?$AAU?$AAN?$AAT?$AAR@ ; `string'
PUBLIC	??_C@_1DA@GLODGBMH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAc?$AAe?$AAl?$AAl?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@ ; `string'
PUBLIC	??_C@_0N@KBFDANCB@cell_dealloc?$AA@		; `string'
EXTRN	PyObject_GC_Del:PROC
EXTRN	__imp__wassert:PROC
;	COMDAT pdata
; File c:\src\pyparallel\objects\cellobject.c
pdata	SEGMENT
$pdata$cell_dealloc DD imagerel cell_dealloc
	DD	imagerel cell_dealloc+295
	DD	imagerel $unwind$cell_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cell_dealloc DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_1EM@HFMJMDDM@?$AAg?$AA?9?$AA?$DO?$AAg?$AAc?$AA?4?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AAG?$AAC?$AA_?$AAR?$AAE?$AAF?$AAS?$AA_?$AAU?$AAN?$AAT?$AAR@
CONST	SEGMENT
??_C@_1EM@HFMJMDDM@?$AAg?$AA?9?$AA?$DO?$AAg?$AAc?$AA?4?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AAG?$AAC?$AA_?$AAR?$AAE?$AAF?$AAS?$AA_?$AAU?$AAN?$AAT?$AAR@ DB 'g'
	DB	00H, '-', 00H, '>', 00H, 'g', 00H, 'c', 00H, '.', 00H, 'g', 00H
	DB	'c', 00H, '_', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 's', 00H, ' '
	DB	00H, '!', 00H, '=', 00H, ' ', 00H, '_', 00H, 'P', 00H, 'y', 00H
	DB	'G', 00H, 'C', 00H, '_', 00H, 'R', 00H, 'E', 00H, 'F', 00H, 'S'
	DB	00H, '_', 00H, 'U', 00H, 'N', 00H, 'T', 00H, 'R', 00H, 'A', 00H
	DB	'C', 00H, 'K', 00H, 'E', 00H, 'D', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DA@GLODGBMH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAc?$AAe?$AAl?$AAl?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
CONST	SEGMENT
??_C@_1DA@GLODGBMH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAc?$AAe?$AAl?$AAl?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@ DB '.'
	DB	00H, '.', 00H, '\', 00H, 'O', 00H, 'b', 00H, 'j', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 's', 00H, '\', 00H, 'c', 00H, 'e', 00H, 'l'
	DB	00H, 'l', 00H, 'o', 00H, 'b', 00H, 'j', 00H, 'e', 00H, 'c', 00H
	DB	't', 00H, '.', 00H, 'c', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@KBFDANCB@cell_dealloc?$AA@
CONST	SEGMENT
??_C@_0N@KBFDANCB@cell_dealloc?$AA@ DB 'cell_dealloc', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT cell_dealloc
_TEXT	SEGMENT
g$20357 = 48
tv79 = 56
op$ = 80
cell_dealloc PROC					; COMDAT

; 48   : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 49   :     _PyObject_GC_UNTRACK(op);

  00009	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00011	4c 8b 4c 24 50	 mov	 r9, QWORD PTR op$[rsp]
  00016	41 b8 31 00 00
	00		 mov	 r8d, 49			; 00000031H
  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@GCIOHBGJ@?4?4?2Objects?2cellobject?4c?$AA@
  00023	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@KBFDANCB@cell_dealloc?$AA@
  0002a	e8 00 00 00 00	 call	 _PyParallel_Guard
  0002f	85 c0		 test	 eax, eax
  00031	0f 85 c1 00 00
	00		 jne	 $LN8@cell_deall
$LN7@cell_deall:
  00037	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0003f	4c 8b 4c 24 50	 mov	 r9, QWORD PTR op$[rsp]
  00044	41 b8 31 00 00
	00		 mov	 r8d, 49			; 00000031H
  0004a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@GCIOHBGJ@?4?4?2Objects?2cellobject?4c?$AA@
  00051	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@KBFDANCB@cell_dealloc?$AA@
  00058	e8 00 00 00 00	 call	 _PyParallel_Guard
  0005d	85 c0		 test	 eax, eax
  0005f	74 0b		 je	 SHORT $LN11@cell_deall
  00061	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR tv79[rsp], 0
  0006a	eb 0e		 jmp	 SHORT $LN12@cell_deall
$LN11@cell_deall:
  0006c	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00071	48 83 e8 18	 sub	 rax, 24
  00075	48 89 44 24 38	 mov	 QWORD PTR tv79[rsp], rax
$LN12@cell_deall:
  0007a	48 8b 44 24 38	 mov	 rax, QWORD PTR tv79[rsp]
  0007f	48 89 44 24 30	 mov	 QWORD PTR g$20357[rsp], rax
  00084	48 8b 44 24 30	 mov	 rax, QWORD PTR g$20357[rsp]
  00089	48 83 78 10 fe	 cmp	 QWORD PTR [rax+16], -2
  0008e	75 1c		 jne	 SHORT $LN13@cell_deall
  00090	41 b8 31 00 00
	00		 mov	 r8d, 49			; 00000031H
  00096	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@GLODGBMH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAc?$AAe?$AAl?$AAl?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  0009d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EM@HFMJMDDM@?$AAg?$AA?9?$AA?$DO?$AAg?$AAc?$AA?4?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AAG?$AAC?$AA_?$AAR?$AAE?$AAF?$AAS?$AA_?$AAU?$AAN?$AAT?$AAR@
  000a4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000aa	33 c0		 xor	 eax, eax
$LN13@cell_deall:
  000ac	48 8b 44 24 30	 mov	 rax, QWORD PTR g$20357[rsp]
  000b1	48 c7 40 10 fe
	ff ff ff	 mov	 QWORD PTR [rax+16], -2
  000b9	48 8b 44 24 30	 mov	 rax, QWORD PTR g$20357[rsp]
  000be	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  000c2	48 8b 4c 24 30	 mov	 rcx, QWORD PTR g$20357[rsp]
  000c7	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000ca	48 89 08	 mov	 QWORD PTR [rax], rcx
  000cd	48 8b 44 24 30	 mov	 rax, QWORD PTR g$20357[rsp]
  000d2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000d5	48 8b 4c 24 30	 mov	 rcx, QWORD PTR g$20357[rsp]
  000da	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  000de	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  000e2	48 8b 44 24 30	 mov	 rax, QWORD PTR g$20357[rsp]
  000e7	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
  000ee	33 c0		 xor	 eax, eax
  000f0	85 c0		 test	 eax, eax
  000f2	0f 85 3f ff ff
	ff		 jne	 $LN7@cell_deall
$LN8@cell_deall:
$LN4@cell_deall:

; 50   :     Py_XDECREF(op->ob_ref);

  000f8	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  000fd	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00102	74 0e		 je	 SHORT $LN1@cell_deall
  00104	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00109	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  0010d	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@cell_deall:
  00112	33 c0		 xor	 eax, eax
  00114	85 c0		 test	 eax, eax
  00116	75 e0		 jne	 SHORT $LN4@cell_deall

; 51   :     PyObject_GC_Del(op);

  00118	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  0011d	e8 00 00 00 00	 call	 PyObject_GC_Del

; 52   : }

  00122	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00126	c3		 ret	 0
cell_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_1CO@CLNPCPNE@?$AAa?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAb?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ ; `string'
EXTRN	PyErr_BadArgument:PROC
EXTRN	_Py_FalseStruct:BYTE
EXTRN	_Py_TrueStruct:BYTE
EXTRN	__ImageBase:BYTE
EXTRN	PyObject_RichCompare:PROC
EXTRN	_Py_NotImplementedStruct:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$cell_richcompare DD imagerel cell_richcompare
	DD	imagerel cell_richcompare+692
	DD	imagerel $unwind$cell_richcompare
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cell_richcompare DD 011301H
	DD	0e213H
xdata	ENDS
;	COMDAT ??_C@_1CO@CLNPCPNE@?$AAa?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAb?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
CONST	SEGMENT
??_C@_1CO@CLNPCPNE@?$AAa?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAb?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ DB 'a'
	DB	00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, 'N', 00H, 'U', 00H
	DB	'L', 00H, 'L', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'b'
	DB	00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, 'N', 00H, 'U', 00H
	DB	'L', 00H, 'L', 00H, 00H, 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT cell_richcompare
_TEXT	SEGMENT
v$ = 32
result$ = 40
tv86 = 44
tv85 = 48
tv88 = 52
tv90 = 56
tv92 = 64
tv94 = 72
tv128 = 80
tv130 = 88
tv132 = 96
a$ = 128
b$ = 136
op$ = 144
cell_richcompare PROC					; COMDAT

; 58   : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 59   :     int result;
; 60   :     PyObject *v;
; 61   : 
; 62   :     /* neither argument should be NULL, unless something's gone wrong */
; 63   :     assert(a != NULL && b != NULL);

  00013	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR a$[rsp], 0
  0001c	74 0b		 je	 SHORT $LN15@cell_richc
  0001e	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR b$[rsp], 0
  00027	75 1c		 jne	 SHORT $LN16@cell_richc
$LN15@cell_richc:
  00029	41 b8 3f 00 00
	00		 mov	 r8d, 63			; 0000003fH
  0002f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@GLODGBMH@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAc?$AAe?$AAl?$AAl?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00036	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@CLNPCPNE@?$AAa?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAb?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
  0003d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00043	33 c0		 xor	 eax, eax
$LN16@cell_richc:

; 64   : 
; 65   :     /* both arguments should be instances of PyCellObject */
; 66   :     if (!PyCell_Check(a) || !PyCell_Check(b)) {

  00045	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyCell_Type
  0004c	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR a$[rsp]
  00054	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00058	75 15		 jne	 SHORT $LN11@cell_richc
  0005a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyCell_Type
  00061	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR b$[rsp]
  00069	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0006d	74 20		 je	 SHORT $LN12@cell_richc
$LN11@cell_richc:

; 67   :         v = Py_NotImplemented;

  0006f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NotImplementedStruct
  00076	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax

; 68   :         Py_INCREF(v);

  0007b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  00080	e8 00 00 00 00	 call	 _Py_IncRef

; 69   :         return v;

  00085	48 8b 44 24 20	 mov	 rax, QWORD PTR v$[rsp]
  0008a	e9 07 02 00 00	 jmp	 $LN13@cell_richc
$LN12@cell_richc:

; 70   :     }
; 71   : 
; 72   :     /* compare cells by contents; empty cells come before anything else */
; 73   :     a = ((PyCellObject *)a)->ob_ref;

  0008f	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR a$[rsp]
  00097	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0009b	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR a$[rsp], rax

; 74   :     b = ((PyCellObject *)b)->ob_ref;

  000a3	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR b$[rsp]
  000ab	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000af	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR b$[rsp], rax

; 75   :     if (a != NULL && b != NULL)

  000b7	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR a$[rsp], 0
  000c0	74 2d		 je	 SHORT $LN10@cell_richc
  000c2	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR b$[rsp], 0
  000cb	74 22		 je	 SHORT $LN10@cell_richc

; 76   :         return PyObject_RichCompare(a, b, op);

  000cd	44 8b 84 24 90
	00 00 00	 mov	 r8d, DWORD PTR op$[rsp]
  000d5	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR b$[rsp]
  000dd	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR a$[rsp]
  000e5	e8 00 00 00 00	 call	 PyObject_RichCompare
  000ea	e9 a7 01 00 00	 jmp	 $LN13@cell_richc
$LN10@cell_richc:

; 77   : 
; 78   :     result = (b == NULL) - (a == NULL);

  000ef	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR b$[rsp], 0
  000f8	75 0a		 jne	 SHORT $LN19@cell_richc
  000fa	c7 44 24 2c 01
	00 00 00	 mov	 DWORD PTR tv86[rsp], 1
  00102	eb 08		 jmp	 SHORT $LN20@cell_richc
$LN19@cell_richc:
  00104	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR tv86[rsp], 0
$LN20@cell_richc:
  0010c	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR a$[rsp], 0
  00115	75 0a		 jne	 SHORT $LN17@cell_richc
  00117	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv85[rsp], 1
  0011f	eb 08		 jmp	 SHORT $LN18@cell_richc
$LN17@cell_richc:
  00121	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv85[rsp], 0
$LN18@cell_richc:
  00129	8b 44 24 30	 mov	 eax, DWORD PTR tv85[rsp]
  0012d	8b 4c 24 2c	 mov	 ecx, DWORD PTR tv86[rsp]
  00131	2b c8		 sub	 ecx, eax
  00133	8b c1		 mov	 eax, ecx
  00135	89 44 24 28	 mov	 DWORD PTR result$[rsp], eax

; 79   :     switch (op) {

  00139	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR op$[rsp]
  00140	89 44 24 34	 mov	 DWORD PTR tv88[rsp], eax
  00144	83 7c 24 34 05	 cmp	 DWORD PTR tv88[rsp], 5
  00149	0f 87 2f 01 00
	00		 ja	 $LN1@cell_richc
  0014f	48 63 44 24 34	 movsxd	 rax, DWORD PTR tv88[rsp]
  00154	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  0015b	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN33@cell_richc[rcx+rax*4]
  00162	48 03 c1	 add	 rax, rcx
  00165	ff e0		 jmp	 rax
$LN7@cell_richc:

; 80   :     case Py_EQ:
; 81   :         v = TEST_COND(result == 0);

  00167	83 7c 24 28 00	 cmp	 DWORD PTR result$[rsp], 0
  0016c	75 0e		 jne	 SHORT $LN21@cell_richc
  0016e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  00175	48 89 44 24 38	 mov	 QWORD PTR tv90[rsp], rax
  0017a	eb 0c		 jmp	 SHORT $LN22@cell_richc
$LN21@cell_richc:
  0017c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct
  00183	48 89 44 24 38	 mov	 QWORD PTR tv90[rsp], rax
$LN22@cell_richc:
  00188	48 8b 44 24 38	 mov	 rax, QWORD PTR tv90[rsp]
  0018d	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax

; 82   :         break;

  00192	e9 f0 00 00 00	 jmp	 $LN8@cell_richc
$LN6@cell_richc:

; 83   :     case Py_NE:
; 84   :         v = TEST_COND(result != 0);

  00197	83 7c 24 28 00	 cmp	 DWORD PTR result$[rsp], 0
  0019c	74 0e		 je	 SHORT $LN23@cell_richc
  0019e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  001a5	48 89 44 24 40	 mov	 QWORD PTR tv92[rsp], rax
  001aa	eb 0c		 jmp	 SHORT $LN24@cell_richc
$LN23@cell_richc:
  001ac	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct
  001b3	48 89 44 24 40	 mov	 QWORD PTR tv92[rsp], rax
$LN24@cell_richc:
  001b8	48 8b 44 24 40	 mov	 rax, QWORD PTR tv92[rsp]
  001bd	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax

; 85   :         break;

  001c2	e9 c0 00 00 00	 jmp	 $LN8@cell_richc
$LN5@cell_richc:

; 86   :     case Py_LE:
; 87   :         v = TEST_COND(result <= 0);

  001c7	83 7c 24 28 00	 cmp	 DWORD PTR result$[rsp], 0
  001cc	7f 0e		 jg	 SHORT $LN25@cell_richc
  001ce	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  001d5	48 89 44 24 48	 mov	 QWORD PTR tv94[rsp], rax
  001da	eb 0c		 jmp	 SHORT $LN26@cell_richc
$LN25@cell_richc:
  001dc	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct
  001e3	48 89 44 24 48	 mov	 QWORD PTR tv94[rsp], rax
$LN26@cell_richc:
  001e8	48 8b 44 24 48	 mov	 rax, QWORD PTR tv94[rsp]
  001ed	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax

; 88   :         break;

  001f2	e9 90 00 00 00	 jmp	 $LN8@cell_richc
$LN4@cell_richc:

; 89   :     case Py_GE:
; 90   :         v = TEST_COND(result >= 0);

  001f7	83 7c 24 28 00	 cmp	 DWORD PTR result$[rsp], 0
  001fc	7c 0e		 jl	 SHORT $LN27@cell_richc
  001fe	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  00205	48 89 44 24 50	 mov	 QWORD PTR tv128[rsp], rax
  0020a	eb 0c		 jmp	 SHORT $LN28@cell_richc
$LN27@cell_richc:
  0020c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct
  00213	48 89 44 24 50	 mov	 QWORD PTR tv128[rsp], rax
$LN28@cell_richc:
  00218	48 8b 44 24 50	 mov	 rax, QWORD PTR tv128[rsp]
  0021d	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax

; 91   :         break;

  00222	eb 63		 jmp	 SHORT $LN8@cell_richc
$LN3@cell_richc:

; 92   :     case Py_LT:
; 93   :         v = TEST_COND(result < 0);

  00224	83 7c 24 28 00	 cmp	 DWORD PTR result$[rsp], 0
  00229	7d 0e		 jge	 SHORT $LN29@cell_richc
  0022b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  00232	48 89 44 24 58	 mov	 QWORD PTR tv130[rsp], rax
  00237	eb 0c		 jmp	 SHORT $LN30@cell_richc
$LN29@cell_richc:
  00239	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct
  00240	48 89 44 24 58	 mov	 QWORD PTR tv130[rsp], rax
$LN30@cell_richc:
  00245	48 8b 44 24 58	 mov	 rax, QWORD PTR tv130[rsp]
  0024a	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax

; 94   :         break;

  0024f	eb 36		 jmp	 SHORT $LN8@cell_richc
$LN2@cell_richc:

; 95   :     case Py_GT:
; 96   :         v = TEST_COND(result > 0);

  00251	83 7c 24 28 00	 cmp	 DWORD PTR result$[rsp], 0
  00256	7e 0e		 jle	 SHORT $LN31@cell_richc
  00258	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  0025f	48 89 44 24 60	 mov	 QWORD PTR tv132[rsp], rax
  00264	eb 0c		 jmp	 SHORT $LN32@cell_richc
$LN31@cell_richc:
  00266	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct
  0026d	48 89 44 24 60	 mov	 QWORD PTR tv132[rsp], rax
$LN32@cell_richc:
  00272	48 8b 44 24 60	 mov	 rax, QWORD PTR tv132[rsp]
  00277	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax

; 97   :         break;

  0027c	eb 09		 jmp	 SHORT $LN8@cell_richc
$LN1@cell_richc:

; 98   :     default:
; 99   :         PyErr_BadArgument();

  0027e	e8 00 00 00 00	 call	 PyErr_BadArgument

; 100  :         return NULL;

  00283	33 c0		 xor	 eax, eax
  00285	eb 0f		 jmp	 SHORT $LN13@cell_richc
$LN8@cell_richc:

; 101  :     }
; 102  :     Py_INCREF(v);

  00287	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  0028c	e8 00 00 00 00	 call	 _Py_IncRef

; 103  :     return v;

  00291	48 8b 44 24 20	 mov	 rax, QWORD PTR v$[rsp]
$LN13@cell_richc:

; 104  : }

  00296	48 83 c4 78	 add	 rsp, 120		; 00000078H
  0029a	c3		 ret	 0
  0029b	90		 npad	 1
$LN33@cell_richc:
  0029c	00 00 00 00	 DD	 $LN3@cell_richc
  002a0	00 00 00 00	 DD	 $LN5@cell_richc
  002a4	00 00 00 00	 DD	 $LN7@cell_richc
  002a8	00 00 00 00	 DD	 $LN6@cell_richc
  002ac	00 00 00 00	 DD	 $LN2@cell_richc
  002b0	00 00 00 00	 DD	 $LN4@cell_richc
cell_richcompare ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CB@DKAOJOMA@?$DMcell?5at?5?$CFp?3?5?$CF?480s?5object?5at?5?$CFp?$DO@ ; `string'
PUBLIC	??_C@_0BE@LIFNIFNJ@?$DMcell?5at?5?$CFp?3?5empty?$DO?$AA@ ; `string'
EXTRN	PyUnicode_FromFormat:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$cell_repr DD imagerel cell_repr
	DD	imagerel cell_repr+88
	DD	imagerel $unwind$cell_repr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cell_repr DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT ??_C@_0CB@DKAOJOMA@?$DMcell?5at?5?$CFp?3?5?$CF?480s?5object?5at?5?$CFp?$DO@
CONST	SEGMENT
??_C@_0CB@DKAOJOMA@?$DMcell?5at?5?$CFp?3?5?$CF?480s?5object?5at?5?$CFp?$DO@ DB '<'
	DB	'cell at %p: %.80s object at %p>', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@LIFNIFNJ@?$DMcell?5at?5?$CFp?3?5empty?$DO?$AA@
CONST	SEGMENT
??_C@_0BE@LIFNIFNJ@?$DMcell?5at?5?$CFp?3?5empty?$DO?$AA@ DB '<cell at %p:'
	DB	' empty>', 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT cell_repr
_TEXT	SEGMENT
op$ = 48
cell_repr PROC						; COMDAT

; 108  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 109  :     if (op->ob_ref == NULL)

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  0000e	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00013	75 13		 jne	 SHORT $LN1@cell_repr

; 110  :         return PyUnicode_FromFormat("<cell at %p: empty>", op);

  00015	48 8b 54 24 30	 mov	 rdx, QWORD PTR op$[rsp]
  0001a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@LIFNIFNJ@?$DMcell?5at?5?$CFp?3?5empty?$DO?$AA@
  00021	e8 00 00 00 00	 call	 PyUnicode_FromFormat
  00026	eb 2b		 jmp	 SHORT $LN2@cell_repr
$LN1@cell_repr:

; 111  : 
; 112  :     return PyUnicode_FromFormat("<cell at %p: %.80s object at %p>",
; 113  :                                op, op->ob_ref->ob_type->tp_name,
; 114  :                                op->ob_ref);

  00028	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  0002d	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00031	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00035	48 8b 4c 24 30	 mov	 rcx, QWORD PTR op$[rsp]
  0003a	4c 8b 49 60	 mov	 r9, QWORD PTR [rcx+96]
  0003e	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  00042	48 8b 54 24 30	 mov	 rdx, QWORD PTR op$[rsp]
  00047	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CB@DKAOJOMA@?$DMcell?5at?5?$CFp?3?5?$CF?480s?5object?5at?5?$CFp?$DO@
  0004e	e8 00 00 00 00	 call	 PyUnicode_FromFormat
$LN2@cell_repr:

; 115  : }

  00053	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00057	c3		 ret	 0
cell_repr ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@JPPEMJEM@cell_traverse?$AA@		; `string'
EXTRN	_PyParallel_ContextGuardFailure:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$cell_traverse DD imagerel cell_traverse
	DD	imagerel cell_traverse+116
	DD	imagerel $unwind$cell_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cell_traverse DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT ??_C@_0O@JPPEMJEM@cell_traverse?$AA@
CONST	SEGMENT
??_C@_0O@JPPEMJEM@cell_traverse?$AA@ DB 'cell_traverse', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT cell_traverse
_TEXT	SEGMENT
vret$20443 = 32
op$ = 64
visit$ = 72
arg$ = 80
cell_traverse PROC					; COMDAT

; 119  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN6@cell_trave:

; 120  :     Py_VISIT(op->ob_ref);

  00013	e8 00 00 00 00	 call	 _Py_PXCTX
  00018	85 c0		 test	 eax, eax
  0001a	74 1c		 je	 SHORT $LN3@cell_trave
  0001c	45 33 c9	 xor	 r9d, r9d
  0001f	41 b8 78 00 00
	00		 mov	 r8d, 120		; 00000078H
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@GCIOHBGJ@?4?4?2Objects?2cellobject?4c?$AA@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@JPPEMJEM@cell_traverse?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@cell_trave:
  00038	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  0003d	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00042	74 23		 je	 SHORT $LN2@cell_trave
  00044	48 8b 54 24 50	 mov	 rdx, QWORD PTR arg$[rsp]
  00049	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  0004e	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00052	ff 54 24 48	 call	 QWORD PTR visit$[rsp]
  00056	89 44 24 20	 mov	 DWORD PTR vret$20443[rsp], eax
  0005a	83 7c 24 20 00	 cmp	 DWORD PTR vret$20443[rsp], 0
  0005f	74 06		 je	 SHORT $LN1@cell_trave
  00061	8b 44 24 20	 mov	 eax, DWORD PTR vret$20443[rsp]
  00065	eb 08		 jmp	 SHORT $LN7@cell_trave
$LN1@cell_trave:
$LN2@cell_trave:
  00067	33 c0		 xor	 eax, eax
  00069	85 c0		 test	 eax, eax
  0006b	75 a6		 jne	 SHORT $LN6@cell_trave

; 121  :     return 0;

  0006d	33 c0		 xor	 eax, eax
$LN7@cell_trave:

; 122  : }

  0006f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00073	c3		 ret	 0
cell_traverse ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@IEIHFOO@cell_clear?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$cell_clear DD imagerel cell_clear
	DD	imagerel cell_clear+117
	DD	imagerel $unwind$cell_clear
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cell_clear DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0L@IEIHFOO@cell_clear?$AA@
CONST	SEGMENT
??_C@_0L@IEIHFOO@cell_clear?$AA@ DB 'cell_clear', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT cell_clear
_TEXT	SEGMENT
_py_tmp$20455 = 48
op$ = 80
cell_clear PROC						; COMDAT

; 126  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H
$LN4@cell_clear:

; 127  :     Py_CLEAR(op->ob_ref);

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0000e	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00013	74 53		 je	 SHORT $LN1@cell_clear
  00015	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0001d	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00022	4c 8b 48 60	 mov	 r9, QWORD PTR [rax+96]
  00026	41 b8 7f 00 00
	00		 mov	 r8d, 127		; 0000007fH
  0002c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@GCIOHBGJ@?4?4?2Objects?2cellobject?4c?$AA@
  00033	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@IEIHFOO@cell_clear?$AA@
  0003a	e8 00 00 00 00	 call	 _PyParallel_Guard
  0003f	85 c0		 test	 eax, eax
  00041	75 25		 jne	 SHORT $LN1@cell_clear
  00043	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00048	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0004c	48 89 44 24 30	 mov	 QWORD PTR _py_tmp$20455[rsp], rax
  00051	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00056	48 c7 40 60 00
	00 00 00	 mov	 QWORD PTR [rax+96], 0
  0005e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _py_tmp$20455[rsp]
  00063	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@cell_clear:
  00068	33 c0		 xor	 eax, eax
  0006a	85 c0		 test	 eax, eax
  0006c	75 9b		 jne	 SHORT $LN4@cell_clear

; 128  :     return 0;

  0006e	33 c0		 xor	 eax, eax

; 129  : }

  00070	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00074	c3		 ret	 0
cell_clear ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@NKIIAMFD@Cell?5is?5empty?$AA@		; `string'
EXTRN	PyErr_SetString:PROC
EXTRN	PyExc_ValueError:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$cell_get_contents DD imagerel cell_get_contents
	DD	imagerel cell_get_contents+77
	DD	imagerel $unwind$cell_get_contents
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cell_get_contents DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT ??_C@_0O@NKIIAMFD@Cell?5is?5empty?$AA@
CONST	SEGMENT
??_C@_0O@NKIIAMFD@Cell?5is?5empty?$AA@ DB 'Cell is empty', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT cell_get_contents
_TEXT	SEGMENT
op$ = 48
closure$ = 56
cell_get_contents PROC					; COMDAT

; 133  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 134  :     if (op->ob_ref == NULL)

  0000e	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  00013	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00018	75 17		 jne	 SHORT $LN1@cell_get_c

; 135  :     {
; 136  :         PyErr_SetString(PyExc_ValueError, "Cell is empty");

  0001a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0O@NKIIAMFD@Cell?5is?5empty?$AA@
  00021	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00028	e8 00 00 00 00	 call	 PyErr_SetString

; 137  :         return NULL;

  0002d	33 c0		 xor	 eax, eax
  0002f	eb 17		 jmp	 SHORT $LN2@cell_get_c
$LN1@cell_get_c:

; 138  :     }
; 139  :     Py_INCREF(op->ob_ref);

  00031	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  00036	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  0003a	e8 00 00 00 00	 call	 _Py_IncRef

; 140  :     return op->ob_ref;

  0003f	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  00044	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
$LN2@cell_get_c:

; 141  : }

  00048	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004c	c3		 ret	 0
cell_get_contents ENDP
_TEXT	ENDS
END
