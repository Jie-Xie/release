; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_09JDLBIJMB@_warnings?$AA@			; `string'
PUBLIC	??_C@_0O@LLLELDLO@warn_explicit?$AA@		; `string'
PUBLIC	??_C@_04FNLOFOEM@warn?$AA@			; `string'
PUBLIC	??_C@_0L@BCMGLLLC@splitlines?$AA@		; `string'
PUBLIC	??_C@_0L@HNCNOLCF@get_source?$AA@		; `string'
PUBLIC	??_C@_0P@LEDAGNOO@module_globals?$AA@		; `string'
PUBLIC	??_C@_08MNOFFBHB@registry?$AA@			; `string'
PUBLIC	??_C@_06BIEEJMKO@module?$AA@			; `string'
PUBLIC	??_C@_06ILKIAHNN@lineno?$AA@			; `string'
PUBLIC	??_C@_08BABJIOEM@filename?$AA@			; `string'
PUBLIC	??_C@_0L@HHDDJAJP@stacklevel?$AA@		; `string'
PUBLIC	??_C@_08MBJIKOEN@category?$AA@			; `string'
PUBLIC	??_C@_07ONPBMBOP@message?$AA@			; `string'
PUBLIC	??_C@_08BHKDPDAA@__name__?$AA@			; `string'
PUBLIC	??_C@_05FNONLPDI@match?$AA@			; `string'
_BSS	SEGMENT
?warnings_str@?1??get_warnings_attr@@9@9 DQ 01H DUP (?)	; `get_warnings_attr'::`2'::warnings_str
?ignore_str@?1??create_filter@@9@9 DQ 01H DUP (?)	; `create_filter'::`2'::ignore_str
?error_str@?1??create_filter@@9@9 DQ 01H DUP (?)	; `create_filter'::`2'::error_str
?default_str@?1??create_filter@@9@9 DQ 01H DUP (?)	; `create_filter'::`2'::default_str
?always_str@?1??create_filter@@9@9 DQ 01H DUP (?)	; `create_filter'::`2'::always_str
_BSS	ENDS
;	COMDAT ??_C@_09JDLBIJMB@_warnings?$AA@
CONST	SEGMENT
??_C@_09JDLBIJMB@_warnings?$AA@ DB '_warnings', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@LLLELDLO@warn_explicit?$AA@
CONST	SEGMENT
??_C@_0O@LLLELDLO@warn_explicit?$AA@ DB 'warn_explicit', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04FNLOFOEM@warn?$AA@
CONST	SEGMENT
??_C@_04FNLOFOEM@warn?$AA@ DB 'warn', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@BCMGLLLC@splitlines?$AA@
CONST	SEGMENT
??_C@_0L@BCMGLLLC@splitlines?$AA@ DB 'splitlines', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HNCNOLCF@get_source?$AA@
CONST	SEGMENT
??_C@_0L@HNCNOLCF@get_source?$AA@ DB 'get_source', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@LEDAGNOO@module_globals?$AA@
CONST	SEGMENT
??_C@_0P@LEDAGNOO@module_globals?$AA@ DB 'module_globals', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08MNOFFBHB@registry?$AA@
CONST	SEGMENT
??_C@_08MNOFFBHB@registry?$AA@ DB 'registry', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06BIEEJMKO@module?$AA@
CONST	SEGMENT
??_C@_06BIEEJMKO@module?$AA@ DB 'module', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06ILKIAHNN@lineno?$AA@
CONST	SEGMENT
??_C@_06ILKIAHNN@lineno?$AA@ DB 'lineno', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08BABJIOEM@filename?$AA@
CONST	SEGMENT
??_C@_08BABJIOEM@filename?$AA@ DB 'filename', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HHDDJAJP@stacklevel?$AA@
CONST	SEGMENT
??_C@_0L@HHDDJAJP@stacklevel?$AA@ DB 'stacklevel', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08MBJIKOEN@category?$AA@
CONST	SEGMENT
??_C@_08MBJIKOEN@category?$AA@ DB 'category', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07ONPBMBOP@message?$AA@
CONST	SEGMENT
??_C@_07ONPBMBOP@message?$AA@ DB 'message', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08BHKDPDAA@__name__?$AA@
CONST	SEGMENT
??_C@_08BHKDPDAA@__name__?$AA@ DB '__name__', 00H	; `string'
CONST	ENDS
_TLS	SEGMENT
?PyId_splitlines@?2??warnings_warn_explicit@@9@9 DQ 0000000000000000H ; `warnings_warn_explicit'::`3'::PyId_splitlines
	DQ	FLAT:??_C@_0L@BCMGLLLC@splitlines?$AA@
	DQ	0000000000000000H
?PyId_get_source@?2??warnings_warn_explicit@@9@9 DQ 0000000000000000H ; `warnings_warn_explicit'::`3'::PyId_get_source
	DQ	FLAT:??_C@_0L@HNCNOLCF@get_source?$AA@
	DQ	0000000000000000H
?PyId___name__@?1??show_warning@@9@9 DQ 0000000000000000H ; `show_warning'::`2'::PyId___name__
	DQ	FLAT:??_C@_08BHKDPDAA@__name__?$AA@
	DQ	0000000000000000H
?PyId_match@?1??check_matched@@9@9 DQ 0000000000000000H	; `check_matched'::`2'::PyId_match
	DQ	FLAT:??_C@_05FNONLPDI@match?$AA@
	DQ	0000000000000000H
_TLS	ENDS
;	COMDAT ??_C@_05FNONLPDI@match?$AA@
CONST	SEGMENT
??_C@_05FNONLPDI@match?$AA@ DB 'match', 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
warnings__doc__ DB '_warnings provides basic warning filtering support.', 0aH
	DB	'It is a helper module to speed up interpreter start-up.', 00H
	ORG $+4
?kw_list@?1??warnings_warn@@9@9 DQ FLAT:??_C@_07ONPBMBOP@message?$AA@ ; `warnings_warn'::`2'::kw_list
	DQ	FLAT:??_C@_08MBJIKOEN@category?$AA@
	DQ	FLAT:??_C@_0L@HHDDJAJP@stacklevel?$AA@
	DQ	0000000000000000H
?kwd_list@?1??warnings_warn_explicit@@9@9 DQ FLAT:??_C@_07ONPBMBOP@message?$AA@ ; `warnings_warn_explicit'::`2'::kwd_list
	DQ	FLAT:??_C@_08MBJIKOEN@category?$AA@
	DQ	FLAT:??_C@_08BABJIOEM@filename?$AA@
	DQ	FLAT:??_C@_06ILKIAHNN@lineno?$AA@
	DQ	FLAT:??_C@_06BIEEJMKO@module?$AA@
	DQ	FLAT:??_C@_08MNOFFBHB@registry?$AA@
	DQ	FLAT:??_C@_0P@LEDAGNOO@module_globals?$AA@
	DQ	0000000000000000H
warn_doc DB	'Issue a warning, or maybe ignore it or raise an exceptio'
	DB	'n.', 00H
	ORG $+5
warn_explicit_doc DB 'Low-level inferface to warnings functionality.', 00H
	ORG $+1
warnings_functions DQ FLAT:??_C@_04FNLOFOEM@warn?$AA@
	DQ	FLAT:warnings_warn
	DD	03H
	ORG $+4
	DQ	FLAT:warn_doc
	DQ	FLAT:??_C@_0O@LLLELDLO@warn_explicit?$AA@
	DQ	FLAT:warnings_warn_explicit
	DD	03H
	ORG $+4
	DQ	FLAT:warn_explicit_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
warningsmodule DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_09JDLBIJMB@_warnings?$AA@
	DQ	FLAT:warnings__doc__
	DQ	0000000000000000H
	DQ	FLAT:warnings_functions
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
_DATA	ENDS
PUBLIC	??_C@_09IPOFGOPJ@O?$HMOn?3warn?$AA@		; `string'
EXTRN	PyArg_ParseTupleAndKeywords:PROC
;	COMDAT pdata
; File c:\src\pyparallel\python\_warnings.c
pdata	SEGMENT
$pdata$warnings_warn DD imagerel warnings_warn
	DD	imagerel warnings_warn+164
	DD	imagerel $unwind$warnings_warn
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$warnings_warn DD 011301H
	DD	0c213H
xdata	ENDS
;	COMDAT ??_C@_09IPOFGOPJ@O?$HMOn?3warn?$AA@
CONST	SEGMENT
??_C@_09IPOFGOPJ@O?$HMOn?3warn?$AA@ DB 'O|On:warn', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT warnings_warn
_TEXT	SEGMENT
stack_level$ = 64
category$ = 72
message$ = 80
self$ = 112
args$ = 120
kwds$ = 128
warnings_warn PROC					; COMDAT

; 624  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 625  :     static char *kw_list[] = { "message", "category", "stacklevel", 0 };
; 626  :     PyObject *message, *category = NULL;

  00013	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR category$[rsp], 0

; 627  :     Py_ssize_t stack_level = 1;

  0001c	48 c7 44 24 40
	01 00 00 00	 mov	 QWORD PTR stack_level$[rsp], 1

; 628  : 
; 629  :     if (!PyArg_ParseTupleAndKeywords(args, kwds, "O|On:warn", kw_list,
; 630  :                                      &message, &category, &stack_level))

  00025	48 8d 44 24 40	 lea	 rax, QWORD PTR stack_level$[rsp]
  0002a	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  0002f	48 8d 44 24 48	 lea	 rax, QWORD PTR category$[rsp]
  00034	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00039	48 8d 44 24 50	 lea	 rax, QWORD PTR message$[rsp]
  0003e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00043	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?kw_list@?1??warnings_warn@@9@9
  0004a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_09IPOFGOPJ@O?$HMOn?3warn?$AA@
  00051	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR kwds$[rsp]
  00059	48 8b 4c 24 78	 mov	 rcx, QWORD PTR args$[rsp]
  0005e	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  00063	85 c0		 test	 eax, eax
  00065	75 04		 jne	 SHORT $LN2@warnings_w

; 631  :         return NULL;

  00067	33 c0		 xor	 eax, eax
  00069	eb 34		 jmp	 SHORT $LN3@warnings_w
$LN2@warnings_w:

; 632  : 
; 633  :     category = get_category(message, category);

  0006b	48 8b 54 24 48	 mov	 rdx, QWORD PTR category$[rsp]
  00070	48 8b 4c 24 50	 mov	 rcx, QWORD PTR message$[rsp]
  00075	e8 00 00 00 00	 call	 get_category
  0007a	48 89 44 24 48	 mov	 QWORD PTR category$[rsp], rax

; 634  :     if (category == NULL)

  0007f	48 83 7c 24 48
	00		 cmp	 QWORD PTR category$[rsp], 0
  00085	75 04		 jne	 SHORT $LN1@warnings_w

; 635  :         return NULL;

  00087	33 c0		 xor	 eax, eax
  00089	eb 14		 jmp	 SHORT $LN3@warnings_w
$LN1@warnings_w:

; 636  :     return do_warn(message, category, stack_level);

  0008b	4c 8b 44 24 40	 mov	 r8, QWORD PTR stack_level$[rsp]
  00090	48 8b 54 24 48	 mov	 rdx, QWORD PTR category$[rsp]
  00095	48 8b 4c 24 50	 mov	 rcx, QWORD PTR message$[rsp]
  0009a	e8 00 00 00 00	 call	 do_warn
$LN3@warnings_w:

; 637  : }

  0009f	48 83 c4 68	 add	 rsp, 104		; 00000068H
  000a3	c3		 ret	 0
warnings_warn ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CG@GGKAOOKA@category?5is?5not?5a?5subclass?5of?5Wa@ ; `string'
EXTRN	PyErr_SetString:PROC
EXTRN	PyExc_ValueError:QWORD
EXTRN	PyObject_IsSubclass:PROC
EXTRN	PyExc_UserWarning:QWORD
EXTRN	PyObject_IsInstance:PROC
EXTRN	PyExc_Warning:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$get_category DD imagerel get_category
	DD	imagerel get_category+161
	DD	imagerel $unwind$get_category
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$get_category DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT ??_C@_0CG@GGKAOOKA@category?5is?5not?5a?5subclass?5of?5Wa@
CONST	SEGMENT
??_C@_0CG@GGKAOOKA@category?5is?5not?5a?5subclass?5of?5Wa@ DB 'category i'
	DB	's not a subclass of Warning', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT get_category
_TEXT	SEGMENT
rc$ = 32
message$ = 64
category$ = 72
get_category PROC					; COMDAT

; 579  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 580  :     int rc;
; 581  : 
; 582  :     /* Get category. */
; 583  :     rc = PyObject_IsInstance(message, PyExc_Warning);

  0000e	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR PyExc_Warning
  00015	48 8b 4c 24 40	 mov	 rcx, QWORD PTR message$[rsp]
  0001a	e8 00 00 00 00	 call	 PyObject_IsInstance
  0001f	89 44 24 20	 mov	 DWORD PTR rc$[rsp], eax

; 584  :     if (rc == -1)

  00023	83 7c 24 20 ff	 cmp	 DWORD PTR rc$[rsp], -1
  00028	75 04		 jne	 SHORT $LN6@get_catego

; 585  :         return NULL;

  0002a	33 c0		 xor	 eax, eax
  0002c	eb 6e		 jmp	 SHORT $LN7@get_catego
$LN6@get_catego:

; 586  : 
; 587  :     if (rc == 1)

  0002e	83 7c 24 20 01	 cmp	 DWORD PTR rc$[rsp], 1
  00033	75 10		 jne	 SHORT $LN5@get_catego

; 588  :         category = (PyObject*)message->ob_type;

  00035	48 8b 44 24 40	 mov	 rax, QWORD PTR message$[rsp]
  0003a	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0003e	48 89 44 24 48	 mov	 QWORD PTR category$[rsp], rax
  00043	eb 14		 jmp	 SHORT $LN4@get_catego
$LN5@get_catego:

; 589  :     else if (category == NULL)

  00045	48 83 7c 24 48
	00		 cmp	 QWORD PTR category$[rsp], 0
  0004b	75 0c		 jne	 SHORT $LN3@get_catego

; 590  :         category = PyExc_UserWarning;

  0004d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR PyExc_UserWarning
  00054	48 89 44 24 48	 mov	 QWORD PTR category$[rsp], rax
$LN3@get_catego:
$LN4@get_catego:

; 591  : 
; 592  :     /* Validate category. */
; 593  :     rc = PyObject_IsSubclass(category, PyExc_Warning);

  00059	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR PyExc_Warning
  00060	48 8b 4c 24 48	 mov	 rcx, QWORD PTR category$[rsp]
  00065	e8 00 00 00 00	 call	 PyObject_IsSubclass
  0006a	89 44 24 20	 mov	 DWORD PTR rc$[rsp], eax

; 594  :     if (rc == -1)

  0006e	83 7c 24 20 ff	 cmp	 DWORD PTR rc$[rsp], -1
  00073	75 04		 jne	 SHORT $LN2@get_catego

; 595  :         return NULL;

  00075	33 c0		 xor	 eax, eax
  00077	eb 23		 jmp	 SHORT $LN7@get_catego
$LN2@get_catego:

; 596  :     if (rc == 0) {

  00079	83 7c 24 20 00	 cmp	 DWORD PTR rc$[rsp], 0
  0007e	75 17		 jne	 SHORT $LN1@get_catego

; 597  :         PyErr_SetString(PyExc_ValueError,
; 598  :                         "category is not a subclass of Warning");

  00080	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@GGKAOOKA@category?5is?5not?5a?5subclass?5of?5Wa@
  00087	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0008e	e8 00 00 00 00	 call	 PyErr_SetString

; 599  :         return NULL;

  00093	33 c0		 xor	 eax, eax
  00095	eb 05		 jmp	 SHORT $LN7@get_catego
$LN1@get_catego:

; 600  :     }
; 601  : 
; 602  :     return category;

  00097	48 8b 44 24 48	 mov	 rax, QWORD PTR category$[rsp]
$LN7@get_catego:

; 603  : }

  0009c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a0	c3		 ret	 0
get_category ENDP
_TEXT	ENDS
PUBLIC	_Py_DecRef
;	COMDAT pdata
pdata	SEGMENT
$pdata$do_warn DD imagerel do_warn
	DD	imagerel do_warn+170
	DD	imagerel $unwind$do_warn
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$do_warn DD 011301H
	DD	0e213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT do_warn
_TEXT	SEGMENT
res$ = 64
lineno$ = 72
module$ = 80
registry$ = 88
filename$ = 96
message$ = 128
category$ = 136
stack_level$ = 144
do_warn	PROC						; COMDAT

; 607  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 608  :     PyObject *filename, *module, *registry, *res;
; 609  :     int lineno;
; 610  : 
; 611  :     if (!setup_context(stack_level, &filename, &lineno, &module, &registry))

  00013	48 8d 44 24 58	 lea	 rax, QWORD PTR registry$[rsp]
  00018	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0001d	4c 8d 4c 24 50	 lea	 r9, QWORD PTR module$[rsp]
  00022	4c 8d 44 24 48	 lea	 r8, QWORD PTR lineno$[rsp]
  00027	48 8d 54 24 60	 lea	 rdx, QWORD PTR filename$[rsp]
  0002c	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR stack_level$[rsp]
  00034	e8 00 00 00 00	 call	 setup_context
  00039	85 c0		 test	 eax, eax
  0003b	75 04		 jne	 SHORT $LN1@do_warn

; 612  :         return NULL;

  0003d	33 c0		 xor	 eax, eax
  0003f	eb 64		 jmp	 SHORT $LN2@do_warn
$LN1@do_warn:

; 613  : 
; 614  :     res = warn_explicit(category, message, filename, lineno, module, registry,
; 615  :                         NULL);

  00041	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR [rsp+48], 0
  0004a	48 8b 44 24 58	 mov	 rax, QWORD PTR registry$[rsp]
  0004f	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00054	48 8b 44 24 50	 mov	 rax, QWORD PTR module$[rsp]
  00059	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0005e	44 8b 4c 24 48	 mov	 r9d, DWORD PTR lineno$[rsp]
  00063	4c 8b 44 24 60	 mov	 r8, QWORD PTR filename$[rsp]
  00068	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR message$[rsp]
  00070	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR category$[rsp]
  00078	e8 00 00 00 00	 call	 warn_explicit
  0007d	48 89 44 24 40	 mov	 QWORD PTR res$[rsp], rax

; 616  :     Py_DECREF(filename);

  00082	48 8b 4c 24 60	 mov	 rcx, QWORD PTR filename$[rsp]
  00087	e8 00 00 00 00	 call	 _Py_DecRef

; 617  :     Py_DECREF(registry);

  0008c	48 8b 4c 24 58	 mov	 rcx, QWORD PTR registry$[rsp]
  00091	e8 00 00 00 00	 call	 _Py_DecRef

; 618  :     Py_DECREF(module);

  00096	48 8b 4c 24 50	 mov	 rcx, QWORD PTR module$[rsp]
  0009b	e8 00 00 00 00	 call	 _Py_DecRef

; 619  :     return res;

  000a0	48 8b 44 24 40	 mov	 rax, QWORD PTR res$[rsp]
$LN2@do_warn:

; 620  : }

  000a5	48 83 c4 78	 add	 rsp, 120		; 00000078H
  000a9	c3		 ret	 0
do_warn	ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
EXTRN	_Py_Dealloc:PROC
EXTRN	_Py_NegativeRefcount:PROC
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_RefTotal:QWORD
EXTRN	Px_DecRef:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN13
	DD	imagerel $LN13+257
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
tv81 = 48
op$ = 80
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN13:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	0f 85 e6 00 00
	00		 jne	 $LN8@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00016	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0001b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0001f	48 83 e0 20	 and	 rax, 32			; 00000020H
  00023	48 85 c0	 test	 rax, rax
  00026	75 14		 jne	 SHORT $LN6@Py_DecRef
  00028	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0002d	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00031	48 25 80 00 00
	00		 and	 rax, 128		; 00000080H
  00037	48 85 c0	 test	 rax, rax
  0003a	74 0f		 je	 SHORT $LN7@Py_DecRef
$LN6@Py_DecRef:

; 926  :             Px_DECREF(op);

  0003c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  00041	e8 00 00 00 00	 call	 Px_DecRef
  00046	e9 b1 00 00 00	 jmp	 $LN5@Py_DecRef
$LN7@Py_DecRef:

; 927  :         else if (!Px_ISPX(op)) {

  0004b	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00050	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00054	48 83 e0 02	 and	 rax, 2
  00058	48 85 c0	 test	 rax, rax
  0005b	0f 85 9b 00 00
	00		 jne	 $LN4@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;

  00061	e8 00 00 00 00	 call	 _Py_PXCTX
  00066	85 c0		 test	 eax, eax
  00068	74 02		 je	 SHORT $LN11@Py_DecRef
  0006a	eb 11		 jmp	 SHORT $LN12@Py_DecRef
$LN11@Py_DecRef:
  0006c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00073	48 ff c8	 dec	 rax
  00076	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN12@Py_DecRef:

; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  0007d	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00082	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00086	48 ff c8	 dec	 rax
  00089	48 89 44 24 30	 mov	 QWORD PTR tv81[rsp], rax
  0008e	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00093	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv81[rsp]
  00098	48 89 48 50	 mov	 QWORD PTR [rax+80], rcx
  0009c	48 83 7c 24 30
	00		 cmp	 QWORD PTR tv81[rsp], 0
  000a2	74 4e		 je	 SHORT $LN3@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);

  000a4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000ac	4c 8b 4c 24 50	 mov	 r9, QWORD PTR op$[rsp]
  000b1	41 b8 a2 03 00
	00		 mov	 r8d, 930		; 000003a2H
  000b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000c5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ca	85 c0		 test	 eax, eax
  000cc	75 22		 jne	 SHORT $LN2@Py_DecRef
  000ce	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  000d3	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000d8	7d 16		 jge	 SHORT $LN2@Py_DecRef
  000da	4c 8b 44 24 50	 mov	 r8, QWORD PTR op$[rsp]
  000df	ba a2 03 00 00	 mov	 edx, 930		; 000003a2H
  000e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000eb	e8 00 00 00 00	 call	 _Py_NegativeRefcount
$LN2@Py_DecRef:

; 931  :             } else

  000f0	eb 0a		 jmp	 SHORT $LN1@Py_DecRef
$LN3@Py_DecRef:

; 932  :                 _Py_Dealloc((PyObject *)(op));

  000f2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  000f7	e8 00 00 00 00	 call	 _Py_Dealloc
$LN1@Py_DecRef:
$LN4@Py_DecRef:
$LN5@Py_DecRef:
$LN8@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  000fc	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00100	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DB@CHJNEDCO@warnings?4showwarning?$CI?$CJ?5must?5be?5s@ ; `string'
PUBLIC	??_C@_0M@EMKAPFPF@showwarning?$AA@		; `string'
PUBLIC	??_C@_0DC@BJGCPOLD@Unrecognized?5action?5?$CI?$CFs?$CJ?5in?5warn@ ; `string'
PUBLIC	??_C@_03BBKEAIF@?$DP?$DP?$DP?$AA@		; `string'
PUBLIC	??_C@_07DLHCIBDH@default?$AA@			; `string'
PUBLIC	??_C@_04KLFNICNF@once?$AA@			; `string'
PUBLIC	??_C@_06GDPEBLPA@ignore?$AA@			; `string'
PUBLIC	??_C@_06KHDOHNKC@always?$AA@			; `string'
PUBLIC	??_C@_05KKCIMGE@error?$AA@			; `string'
PUBLIC	??_C@_01MJMHLOMK@O?$AA@				; `string'
PUBLIC	_Py_IncRef
PUBLIC	??_C@_0BK@NCCANGBJ@?8registry?8?5must?5be?5a?5dict?$AA@ ; `string'
EXTRN	PyObject_CallFunctionObjArgs:PROC
EXTRN	PyCallable_Check:PROC
EXTRN	PyErr_Occurred:PROC
EXTRN	PyErr_Format:PROC
EXTRN	PyExc_RuntimeError:QWORD
EXTRN	PyUnicode_AsUTF8:PROC
EXTRN	PyDict_SetItem:PROC
EXTRN	_Py_TrueStruct:BYTE
EXTRN	PyErr_SetObject:PROC
EXTRN	strcmp:PROC
EXTRN	PyTuple_Pack:PROC
EXTRN	PyLong_FromLong:PROC
EXTRN	PyObject_CallFunction:PROC
EXTRN	PyObject_Str:PROC
EXTRN	PyExc_TypeError:QWORD
EXTRN	_Py_NoneStruct:BYTE
;	COMDAT pdata
; File c:\src\pyparallel\python\_warnings.c
pdata	SEGMENT
$pdata$warn_explicit DD imagerel warn_explicit
	DD	imagerel warn_explicit+1568
	DD	imagerel $unwind$warn_explicit
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$warn_explicit DD 021b01H
	DD	013011bH
xdata	ENDS
;	COMDAT ??_C@_0DB@CHJNEDCO@warnings?4showwarning?$CI?$CJ?5must?5be?5s@
CONST	SEGMENT
??_C@_0DB@CHJNEDCO@warnings?4showwarning?$CI?$CJ?5must?5be?5s@ DB 'warnin'
	DB	'gs.showwarning() must be set to a callable', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@EMKAPFPF@showwarning?$AA@
CONST	SEGMENT
??_C@_0M@EMKAPFPF@showwarning?$AA@ DB 'showwarning', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@BJGCPOLD@Unrecognized?5action?5?$CI?$CFs?$CJ?5in?5warn@
CONST	SEGMENT
??_C@_0DC@BJGCPOLD@Unrecognized?5action?5?$CI?$CFs?$CJ?5in?5warn@ DB 'Unr'
	DB	'ecognized action (%s) in warnings.filters:', 0aH, ' %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03BBKEAIF@?$DP?$DP?$DP?$AA@
CONST	SEGMENT
??_C@_03BBKEAIF@?$DP?$DP?$DP?$AA@ DB '???', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07DLHCIBDH@default?$AA@
CONST	SEGMENT
??_C@_07DLHCIBDH@default?$AA@ DB 'default', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04KLFNICNF@once?$AA@
CONST	SEGMENT
??_C@_04KLFNICNF@once?$AA@ DB 'once', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GDPEBLPA@ignore?$AA@
CONST	SEGMENT
??_C@_06GDPEBLPA@ignore?$AA@ DB 'ignore', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KHDOHNKC@always?$AA@
CONST	SEGMENT
??_C@_06KHDOHNKC@always?$AA@ DB 'always', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05KKCIMGE@error?$AA@
CONST	SEGMENT
??_C@_05KKCIMGE@error?$AA@ DB 'error', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01MJMHLOMK@O?$AA@
CONST	SEGMENT
??_C@_01MJMHLOMK@O?$AA@ DB 'O', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@NCCANGBJ@?8registry?8?5must?5be?5a?5dict?$AA@
CONST	SEGMENT
??_C@_0BK@NCCANGBJ@?8registry?8?5must?5be?5a?5dict?$AA@ DB '''registry'' '
	DB	'must be a dict', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT warn_explicit
_TEXT	SEGMENT
rc$ = 48
text$ = 56
lineno_obj$ = 64
key$ = 72
action$ = 80
result$ = 88
item$ = 96
err_str$20662 = 104
to_str$20661 = 112
show_fxn$20676 = 120
res$20682 = 128
category$ = 160
message$ = 168
filename$ = 176
lineno$ = 184
module$ = 192
registry$ = 200
sourceline$ = 208
warn_explicit PROC					; COMDAT

; 296  : {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 297  :     PyObject *key = NULL, *text = NULL, *result = NULL, *lineno_obj = NULL;

  0001b	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR key$[rsp], 0
  00024	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR text$[rsp], 0
  0002d	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR result$[rsp], 0
  00036	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR lineno_obj$[rsp], 0

; 298  :     PyObject *item = Py_None;

  0003f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00046	48 89 44 24 60	 mov	 QWORD PTR item$[rsp], rax

; 299  :     const char *action;
; 300  :     int rc;
; 301  : 
; 302  :     if (registry && !PyDict_Check(registry) && (registry != Py_None)) {

  0004b	48 83 bc 24 c8
	00 00 00 00	 cmp	 QWORD PTR registry$[rsp], 0
  00054	74 46		 je	 SHORT $LN65@warn_expli
  00056	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR registry$[rsp]
  0005e	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00062	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00068	25 00 00 00 20	 and	 eax, 536870912		; 20000000H
  0006d	85 c0		 test	 eax, eax
  0006f	75 2b		 jne	 SHORT $LN65@warn_expli
  00071	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00078	48 39 84 24 c8
	00 00 00	 cmp	 QWORD PTR registry$[rsp], rax
  00080	74 1a		 je	 SHORT $LN65@warn_expli

; 303  :         PyErr_SetString(PyExc_TypeError, "'registry' must be a dict");

  00082	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@NCCANGBJ@?8registry?8?5must?5be?5a?5dict?$AA@
  00089	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00090	e8 00 00 00 00	 call	 PyErr_SetString

; 304  :         return NULL;

  00095	33 c0		 xor	 eax, eax
  00097	e9 7c 05 00 00	 jmp	 $LN66@warn_expli
$LN65@warn_expli:

; 305  :     }
; 306  : 
; 307  :     /* Normalize module. */
; 308  :     if (module == NULL) {

  0009c	48 83 bc 24 c0
	00 00 00 00	 cmp	 QWORD PTR module$[rsp], 0
  000a5	75 29		 jne	 SHORT $LN64@warn_expli

; 309  :         module = normalize_module(filename);

  000a7	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR filename$[rsp]
  000af	e8 00 00 00 00	 call	 normalize_module
  000b4	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR module$[rsp], rax

; 310  :         if (module == NULL)

  000bc	48 83 bc 24 c0
	00 00 00 00	 cmp	 QWORD PTR module$[rsp], 0
  000c5	75 07		 jne	 SHORT $LN63@warn_expli

; 311  :             return NULL;

  000c7	33 c0		 xor	 eax, eax
  000c9	e9 4a 05 00 00	 jmp	 $LN66@warn_expli
$LN63@warn_expli:

; 312  :     }
; 313  :     else

  000ce	eb 0d		 jmp	 SHORT $LN62@warn_expli
$LN64@warn_expli:

; 314  :         Py_INCREF(module);

  000d0	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR module$[rsp]
  000d8	e8 00 00 00 00	 call	 _Py_IncRef
$LN62@warn_expli:

; 315  : 
; 316  :     /* Normalize message. */
; 317  :     Py_INCREF(message);  /* DECREF'ed in cleanup. */

  000dd	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR message$[rsp]
  000e5	e8 00 00 00 00	 call	 _Py_IncRef

; 318  :     rc = PyObject_IsInstance(message, PyExc_Warning);

  000ea	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR PyExc_Warning
  000f1	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR message$[rsp]
  000f9	e8 00 00 00 00	 call	 PyObject_IsInstance
  000fe	89 44 24 30	 mov	 DWORD PTR rc$[rsp], eax

; 319  :     if (rc == -1) {

  00102	83 7c 24 30 ff	 cmp	 DWORD PTR rc$[rsp], -1
  00107	75 05		 jne	 SHORT $LN61@warn_expli

; 320  :         goto cleanup;

  00109	e9 92 04 00 00	 jmp	 $cleanup$20615
$LN61@warn_expli:

; 321  :     }
; 322  :     if (rc == 1) {

  0010e	83 7c 24 30 01	 cmp	 DWORD PTR rc$[rsp], 1
  00113	75 35		 jne	 SHORT $LN60@warn_expli

; 323  :         text = PyObject_Str(message);

  00115	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR message$[rsp]
  0011d	e8 00 00 00 00	 call	 PyObject_Str
  00122	48 89 44 24 38	 mov	 QWORD PTR text$[rsp], rax

; 324  :         if (text == NULL)

  00127	48 83 7c 24 38
	00		 cmp	 QWORD PTR text$[rsp], 0
  0012d	75 05		 jne	 SHORT $LN59@warn_expli

; 325  :             goto cleanup;

  0012f	e9 6c 04 00 00	 jmp	 $cleanup$20615
$LN59@warn_expli:

; 326  :         category = (PyObject*)message->ob_type;

  00134	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR message$[rsp]
  0013c	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00140	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR category$[rsp], rax

; 327  :     }
; 328  :     else {

  00148	eb 41		 jmp	 SHORT $LN58@warn_expli
$LN60@warn_expli:

; 329  :         text = message;

  0014a	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR message$[rsp]
  00152	48 89 44 24 38	 mov	 QWORD PTR text$[rsp], rax

; 330  :         message = PyObject_CallFunction(category, "O", message);

  00157	4c 8b 84 24 a8
	00 00 00	 mov	 r8, QWORD PTR message$[rsp]
  0015f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01MJMHLOMK@O?$AA@
  00166	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR category$[rsp]
  0016e	e8 00 00 00 00	 call	 PyObject_CallFunction
  00173	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR message$[rsp], rax

; 331  :         if (message == NULL)

  0017b	48 83 bc 24 a8
	00 00 00 00	 cmp	 QWORD PTR message$[rsp], 0
  00184	75 05		 jne	 SHORT $LN57@warn_expli

; 332  :             goto cleanup;

  00186	e9 15 04 00 00	 jmp	 $cleanup$20615
$LN57@warn_expli:
$LN58@warn_expli:

; 333  :     }
; 334  : 
; 335  :     lineno_obj = PyLong_FromLong(lineno);

  0018b	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR lineno$[rsp]
  00192	e8 00 00 00 00	 call	 PyLong_FromLong
  00197	48 89 44 24 40	 mov	 QWORD PTR lineno_obj$[rsp], rax

; 336  :     if (lineno_obj == NULL)

  0019c	48 83 7c 24 40
	00		 cmp	 QWORD PTR lineno_obj$[rsp], 0
  001a2	75 05		 jne	 SHORT $LN56@warn_expli

; 337  :         goto cleanup;

  001a4	e9 f7 03 00 00	 jmp	 $cleanup$20615
$LN56@warn_expli:

; 338  : 
; 339  :     /* Create key. */
; 340  :     key = PyTuple_Pack(3, text, category, lineno_obj);

  001a9	4c 8b 4c 24 40	 mov	 r9, QWORD PTR lineno_obj$[rsp]
  001ae	4c 8b 84 24 a0
	00 00 00	 mov	 r8, QWORD PTR category$[rsp]
  001b6	48 8b 54 24 38	 mov	 rdx, QWORD PTR text$[rsp]
  001bb	b9 03 00 00 00	 mov	 ecx, 3
  001c0	e8 00 00 00 00	 call	 PyTuple_Pack
  001c5	48 89 44 24 48	 mov	 QWORD PTR key$[rsp], rax

; 341  :     if (key == NULL)

  001ca	48 83 7c 24 48
	00		 cmp	 QWORD PTR key$[rsp], 0
  001d0	75 05		 jne	 SHORT $LN55@warn_expli

; 342  :         goto cleanup;

  001d2	e9 c9 03 00 00	 jmp	 $cleanup$20615
$LN55@warn_expli:

; 343  : 
; 344  :     if ((registry != NULL) && (registry != Py_None)) {

  001d7	48 83 bc 24 c8
	00 00 00 00	 cmp	 QWORD PTR registry$[rsp], 0
  001e0	74 44		 je	 SHORT $LN54@warn_expli
  001e2	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  001e9	48 39 84 24 c8
	00 00 00	 cmp	 QWORD PTR registry$[rsp], rax
  001f1	74 33		 je	 SHORT $LN54@warn_expli

; 345  :         rc = already_warned(registry, key, 0);

  001f3	45 33 c0	 xor	 r8d, r8d
  001f6	48 8b 54 24 48	 mov	 rdx, QWORD PTR key$[rsp]
  001fb	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR registry$[rsp]
  00203	e8 00 00 00 00	 call	 already_warned
  00208	89 44 24 30	 mov	 DWORD PTR rc$[rsp], eax

; 346  :         if (rc == -1)

  0020c	83 7c 24 30 ff	 cmp	 DWORD PTR rc$[rsp], -1
  00211	75 07		 jne	 SHORT $LN53@warn_expli

; 347  :             goto cleanup;

  00213	e9 88 03 00 00	 jmp	 $cleanup$20615
  00218	eb 0c		 jmp	 SHORT $LN52@warn_expli
$LN53@warn_expli:

; 348  :         else if (rc == 1)

  0021a	83 7c 24 30 01	 cmp	 DWORD PTR rc$[rsp], 1
  0021f	75 05		 jne	 SHORT $LN51@warn_expli

; 349  :             goto return_none;

  00221	e9 64 03 00 00	 jmp	 $return_none$20632
$LN51@warn_expli:
$LN52@warn_expli:
$LN54@warn_expli:

; 350  :         /* Else this warning hasn't been generated before. */
; 351  :     }
; 352  : 
; 353  :     action = get_filter(category, text, lineno, module, &item);

  00226	48 63 84 24 b8
	00 00 00	 movsxd	 rax, DWORD PTR lineno$[rsp]
  0022e	48 8d 4c 24 60	 lea	 rcx, QWORD PTR item$[rsp]
  00233	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00238	4c 8b 8c 24 c0
	00 00 00	 mov	 r9, QWORD PTR module$[rsp]
  00240	4c 8b c0	 mov	 r8, rax
  00243	48 8b 54 24 38	 mov	 rdx, QWORD PTR text$[rsp]
  00248	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR category$[rsp]
  00250	e8 00 00 00 00	 call	 get_filter
  00255	48 89 44 24 50	 mov	 QWORD PTR action$[rsp], rax

; 354  :     if (action == NULL)

  0025a	48 83 7c 24 50
	00		 cmp	 QWORD PTR action$[rsp], 0
  00260	75 05		 jne	 SHORT $LN50@warn_expli

; 355  :         goto cleanup;

  00262	e9 39 03 00 00	 jmp	 $cleanup$20615
$LN50@warn_expli:

; 356  : 
; 357  :     if (strcmp(action, "error") == 0) {

  00267	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05KKCIMGE@error?$AA@
  0026e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR action$[rsp]
  00273	e8 00 00 00 00	 call	 strcmp
  00278	85 c0		 test	 eax, eax
  0027a	75 1a		 jne	 SHORT $LN49@warn_expli

; 358  :         PyErr_SetObject(category, message);

  0027c	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR message$[rsp]
  00284	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR category$[rsp]
  0028c	e8 00 00 00 00	 call	 PyErr_SetObject

; 359  :         goto cleanup;

  00291	e9 0a 03 00 00	 jmp	 $cleanup$20615
$LN49@warn_expli:

; 360  :     }
; 361  : 
; 362  :     /* Store in the registry that we've been here, *except* when the action
; 363  :        is "always". */
; 364  :     rc = 0;

  00296	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR rc$[rsp], 0

; 365  :     if (strcmp(action, "always") != 0) {

  0029e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06KHDOHNKC@always?$AA@
  002a5	48 8b 4c 24 50	 mov	 rcx, QWORD PTR action$[rsp]
  002aa	e8 00 00 00 00	 call	 strcmp
  002af	85 c0		 test	 eax, eax
  002b1	0f 84 bb 01 00
	00		 je	 $LN48@warn_expli

; 366  :         if (registry != NULL && registry != Py_None &&
; 367  :                 PyDict_SetItem(registry, key, Py_True) < 0)

  002b7	48 83 bc 24 c8
	00 00 00 00	 cmp	 QWORD PTR registry$[rsp], 0
  002c0	74 38		 je	 SHORT $LN47@warn_expli
  002c2	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  002c9	48 39 84 24 c8
	00 00 00	 cmp	 QWORD PTR registry$[rsp], rax
  002d1	74 27		 je	 SHORT $LN47@warn_expli
  002d3	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:_Py_TrueStruct
  002da	48 8b 54 24 48	 mov	 rdx, QWORD PTR key$[rsp]
  002df	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR registry$[rsp]
  002e7	e8 00 00 00 00	 call	 PyDict_SetItem
  002ec	85 c0		 test	 eax, eax
  002ee	7d 0a		 jge	 SHORT $LN47@warn_expli

; 368  :             goto cleanup;

  002f0	e9 ab 02 00 00	 jmp	 $cleanup$20615
  002f5	e9 78 01 00 00	 jmp	 $LN46@warn_expli
$LN47@warn_expli:

; 369  :         else if (strcmp(action, "ignore") == 0)

  002fa	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06GDPEBLPA@ignore?$AA@
  00301	48 8b 4c 24 50	 mov	 rcx, QWORD PTR action$[rsp]
  00306	e8 00 00 00 00	 call	 strcmp
  0030b	85 c0		 test	 eax, eax
  0030d	75 0a		 jne	 SHORT $LN45@warn_expli

; 370  :             goto return_none;

  0030f	e9 76 02 00 00	 jmp	 $return_none$20632
  00314	e9 59 01 00 00	 jmp	 $LN44@warn_expli
$LN45@warn_expli:

; 371  :         else if (strcmp(action, "once") == 0) {

  00319	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04KLFNICNF@once?$AA@
  00320	48 8b 4c 24 50	 mov	 rcx, QWORD PTR action$[rsp]
  00325	e8 00 00 00 00	 call	 strcmp
  0032a	85 c0		 test	 eax, eax
  0032c	75 5f		 jne	 SHORT $LN43@warn_expli

; 372  :             if (registry == NULL || registry == Py_None) {

  0032e	48 83 bc 24 c8
	00 00 00 00	 cmp	 QWORD PTR registry$[rsp], 0
  00337	74 11		 je	 SHORT $LN41@warn_expli
  00339	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00340	48 39 84 24 c8
	00 00 00	 cmp	 QWORD PTR registry$[rsp], rax
  00348	75 1d		 jne	 SHORT $LN42@warn_expli
$LN41@warn_expli:

; 373  :                 registry = get_once_registry();

  0034a	e8 00 00 00 00	 call	 get_once_registry
  0034f	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR registry$[rsp], rax

; 374  :                 if (registry == NULL)

  00357	48 83 bc 24 c8
	00 00 00 00	 cmp	 QWORD PTR registry$[rsp], 0
  00360	75 05		 jne	 SHORT $LN40@warn_expli

; 375  :                     goto cleanup;

  00362	e9 39 02 00 00	 jmp	 $cleanup$20615
$LN40@warn_expli:
$LN42@warn_expli:

; 376  :             }
; 377  :             /* _once_registry[(text, category)] = 1 */
; 378  :             rc = update_registry(registry, text, category, 0);

  00367	45 33 c9	 xor	 r9d, r9d
  0036a	4c 8b 84 24 a0
	00 00 00	 mov	 r8, QWORD PTR category$[rsp]
  00372	48 8b 54 24 38	 mov	 rdx, QWORD PTR text$[rsp]
  00377	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR registry$[rsp]
  0037f	e8 00 00 00 00	 call	 update_registry
  00384	89 44 24 30	 mov	 DWORD PTR rc$[rsp], eax
  00388	e9 e5 00 00 00	 jmp	 $LN39@warn_expli
$LN43@warn_expli:

; 379  :         }
; 380  :         else if (strcmp(action, "module") == 0) {

  0038d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06BIEEJMKO@module?$AA@
  00394	48 8b 4c 24 50	 mov	 rcx, QWORD PTR action$[rsp]
  00399	e8 00 00 00 00	 call	 strcmp
  0039e	85 c0		 test	 eax, eax
  003a0	75 42		 jne	 SHORT $LN38@warn_expli

; 381  :             /* registry[(text, category, 0)] = 1 */
; 382  :             if (registry != NULL && registry != Py_None)

  003a2	48 83 bc 24 c8
	00 00 00 00	 cmp	 QWORD PTR registry$[rsp], 0
  003ab	74 32		 je	 SHORT $LN37@warn_expli
  003ad	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  003b4	48 39 84 24 c8
	00 00 00	 cmp	 QWORD PTR registry$[rsp], rax
  003bc	74 21		 je	 SHORT $LN37@warn_expli

; 383  :                 rc = update_registry(registry, text, category, 0);

  003be	45 33 c9	 xor	 r9d, r9d
  003c1	4c 8b 84 24 a0
	00 00 00	 mov	 r8, QWORD PTR category$[rsp]
  003c9	48 8b 54 24 38	 mov	 rdx, QWORD PTR text$[rsp]
  003ce	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR registry$[rsp]
  003d6	e8 00 00 00 00	 call	 update_registry
  003db	89 44 24 30	 mov	 DWORD PTR rc$[rsp], eax
$LN37@warn_expli:

; 384  :         }
; 385  :         else if (strcmp(action, "default") != 0) {

  003df	e9 8e 00 00 00	 jmp	 $LN36@warn_expli
$LN38@warn_expli:
  003e4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07DLHCIBDH@default?$AA@
  003eb	48 8b 4c 24 50	 mov	 rcx, QWORD PTR action$[rsp]
  003f0	e8 00 00 00 00	 call	 strcmp
  003f5	85 c0		 test	 eax, eax
  003f7	74 79		 je	 SHORT $LN35@warn_expli

; 386  :             PyObject *to_str = PyObject_Str(item);

  003f9	48 8b 4c 24 60	 mov	 rcx, QWORD PTR item$[rsp]
  003fe	e8 00 00 00 00	 call	 PyObject_Str
  00403	48 89 44 24 70	 mov	 QWORD PTR to_str$20661[rsp], rax

; 387  :             const char *err_str = "???";

  00408	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_03BBKEAIF@?$DP?$DP?$DP?$AA@
  0040f	48 89 44 24 68	 mov	 QWORD PTR err_str$20662[rsp], rax

; 388  : 
; 389  :             if (to_str != NULL) {

  00414	48 83 7c 24 70
	00		 cmp	 QWORD PTR to_str$20661[rsp], 0
  0041a	74 1c		 je	 SHORT $LN34@warn_expli

; 390  :                 err_str = _PyUnicode_AsString(to_str);

  0041c	48 8b 4c 24 70	 mov	 rcx, QWORD PTR to_str$20661[rsp]
  00421	e8 00 00 00 00	 call	 PyUnicode_AsUTF8
  00426	48 89 44 24 68	 mov	 QWORD PTR err_str$20662[rsp], rax

; 391  :                 if (err_str == NULL)

  0042b	48 83 7c 24 68
	00		 cmp	 QWORD PTR err_str$20662[rsp], 0
  00431	75 05		 jne	 SHORT $LN33@warn_expli

; 392  :                         goto cleanup;

  00433	e9 68 01 00 00	 jmp	 $cleanup$20615
$LN33@warn_expli:
$LN34@warn_expli:

; 393  :             }
; 394  :             PyErr_Format(PyExc_RuntimeError,
; 395  :                         "Unrecognized action (%s) in warnings.filters:\n %s",
; 396  :                         action, err_str);

  00438	4c 8b 4c 24 68	 mov	 r9, QWORD PTR err_str$20662[rsp]
  0043d	4c 8b 44 24 50	 mov	 r8, QWORD PTR action$[rsp]
  00442	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DC@BJGCPOLD@Unrecognized?5action?5?$CI?$CFs?$CJ?5in?5warn@
  00449	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeError
  00450	e8 00 00 00 00	 call	 PyErr_Format
$LN32@warn_expli:

; 397  :             Py_XDECREF(to_str);

  00455	48 83 7c 24 70
	00		 cmp	 QWORD PTR to_str$20661[rsp], 0
  0045b	74 0a		 je	 SHORT $LN29@warn_expli
  0045d	48 8b 4c 24 70	 mov	 rcx, QWORD PTR to_str$20661[rsp]
  00462	e8 00 00 00 00	 call	 _Py_DecRef
$LN29@warn_expli:
  00467	33 c0		 xor	 eax, eax
  00469	85 c0		 test	 eax, eax
  0046b	75 e8		 jne	 SHORT $LN32@warn_expli

; 398  :             goto cleanup;

  0046d	e9 2e 01 00 00	 jmp	 $cleanup$20615
$LN35@warn_expli:
$LN36@warn_expli:
$LN39@warn_expli:
$LN44@warn_expli:
$LN46@warn_expli:
$LN48@warn_expli:

; 399  :         }
; 400  :     }
; 401  : 
; 402  :     if (rc == 1)  /* Already warned for this module. */

  00472	83 7c 24 30 01	 cmp	 DWORD PTR rc$[rsp], 1
  00477	75 05		 jne	 SHORT $LN28@warn_expli

; 403  :         goto return_none;

  00479	e9 0c 01 00 00	 jmp	 $return_none$20632
$LN28@warn_expli:

; 404  :     if (rc == 0) {

  0047e	83 7c 24 30 00	 cmp	 DWORD PTR rc$[rsp], 0
  00483	0f 85 ff 00 00
	00		 jne	 $LN27@warn_expli

; 405  :         PyObject *show_fxn = get_warnings_attr("showwarning");

  00489	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@EMKAPFPF@showwarning?$AA@
  00490	e8 00 00 00 00	 call	 get_warnings_attr
  00495	48 89 44 24 78	 mov	 QWORD PTR show_fxn$20676[rsp], rax

; 406  :         if (show_fxn == NULL) {

  0049a	48 83 7c 24 78
	00		 cmp	 QWORD PTR show_fxn$20676[rsp], 0
  004a0	75 42		 jne	 SHORT $LN26@warn_expli

; 407  :             if (PyErr_Occurred())

  004a2	e8 00 00 00 00	 call	 PyErr_Occurred
  004a7	48 85 c0	 test	 rax, rax
  004aa	74 05		 je	 SHORT $LN25@warn_expli

; 408  :                 goto cleanup;

  004ac	e9 ef 00 00 00	 jmp	 $cleanup$20615
$LN25@warn_expli:

; 409  :             show_warning(filename, lineno, text, category, sourceline);

  004b1	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR sourceline$[rsp]
  004b9	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  004be	4c 8b 8c 24 a0
	00 00 00	 mov	 r9, QWORD PTR category$[rsp]
  004c6	4c 8b 44 24 38	 mov	 r8, QWORD PTR text$[rsp]
  004cb	8b 94 24 b8 00
	00 00		 mov	 edx, DWORD PTR lineno$[rsp]
  004d2	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR filename$[rsp]
  004da	e8 00 00 00 00	 call	 show_warning

; 410  :         }
; 411  :         else {

  004df	e9 a2 00 00 00	 jmp	 $LN24@warn_expli
$LN26@warn_expli:

; 412  :             PyObject *res;
; 413  : 
; 414  :             if (!PyCallable_Check(show_fxn)) {

  004e4	48 8b 4c 24 78	 mov	 rcx, QWORD PTR show_fxn$20676[rsp]
  004e9	e8 00 00 00 00	 call	 PyCallable_Check
  004ee	85 c0		 test	 eax, eax
  004f0	75 22		 jne	 SHORT $LN23@warn_expli

; 415  :                 PyErr_SetString(PyExc_TypeError,
; 416  :                                 "warnings.showwarning() must be set to a "
; 417  :                                 "callable");

  004f2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DB@CHJNEDCO@warnings?4showwarning?$CI?$CJ?5must?5be?5s@
  004f9	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00500	e8 00 00 00 00	 call	 PyErr_SetString

; 418  :                 Py_DECREF(show_fxn);

  00505	48 8b 4c 24 78	 mov	 rcx, QWORD PTR show_fxn$20676[rsp]
  0050a	e8 00 00 00 00	 call	 _Py_DecRef

; 419  :                 goto cleanup;

  0050f	e9 8c 00 00 00	 jmp	 $cleanup$20615
$LN23@warn_expli:

; 420  :             }
; 421  : 
; 422  :             res = PyObject_CallFunctionObjArgs(show_fxn, message, category,
; 423  :                                                 filename, lineno_obj,
; 424  :                                                 NULL);

  00514	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR [rsp+40], 0
  0051d	48 8b 44 24 40	 mov	 rax, QWORD PTR lineno_obj$[rsp]
  00522	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00527	4c 8b 8c 24 b0
	00 00 00	 mov	 r9, QWORD PTR filename$[rsp]
  0052f	4c 8b 84 24 a0
	00 00 00	 mov	 r8, QWORD PTR category$[rsp]
  00537	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR message$[rsp]
  0053f	48 8b 4c 24 78	 mov	 rcx, QWORD PTR show_fxn$20676[rsp]
  00544	e8 00 00 00 00	 call	 PyObject_CallFunctionObjArgs
  00549	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR res$20682[rsp], rax

; 425  :             Py_DECREF(show_fxn);

  00551	48 8b 4c 24 78	 mov	 rcx, QWORD PTR show_fxn$20676[rsp]
  00556	e8 00 00 00 00	 call	 _Py_DecRef
$LN22@warn_expli:

; 426  :             Py_XDECREF(res);

  0055b	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR res$20682[rsp], 0
  00564	74 0d		 je	 SHORT $LN19@warn_expli
  00566	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR res$20682[rsp]
  0056e	e8 00 00 00 00	 call	 _Py_DecRef
$LN19@warn_expli:
  00573	33 c0		 xor	 eax, eax
  00575	85 c0		 test	 eax, eax
  00577	75 e2		 jne	 SHORT $LN22@warn_expli

; 427  :             if (res == NULL)

  00579	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR res$20682[rsp], 0
  00582	75 02		 jne	 SHORT $LN18@warn_expli

; 428  :                 goto cleanup;

  00584	eb 1a		 jmp	 SHORT $cleanup$20615
$LN18@warn_expli:
$LN24@warn_expli:

; 429  :         }
; 430  :     }
; 431  :     else /* if (rc == -1) */

  00586	eb 02		 jmp	 SHORT $LN17@warn_expli
$LN27@warn_expli:

; 432  :         goto cleanup;

  00588	eb 16		 jmp	 SHORT $cleanup$20615
$LN17@warn_expli:
$return_none$20632:

; 433  : 
; 434  :  return_none:
; 435  :     result = Py_None;

  0058a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00591	48 89 44 24 58	 mov	 QWORD PTR result$[rsp], rax

; 436  :     Py_INCREF(result);

  00596	48 8b 4c 24 58	 mov	 rcx, QWORD PTR result$[rsp]
  0059b	e8 00 00 00 00	 call	 _Py_IncRef
$cleanup$20615:
$LN16@warn_expli:

; 437  : 
; 438  :  cleanup:
; 439  :     Py_XDECREF(key);

  005a0	48 83 7c 24 48
	00		 cmp	 QWORD PTR key$[rsp], 0
  005a6	74 0a		 je	 SHORT $LN13@warn_expli
  005a8	48 8b 4c 24 48	 mov	 rcx, QWORD PTR key$[rsp]
  005ad	e8 00 00 00 00	 call	 _Py_DecRef
$LN13@warn_expli:
  005b2	33 c0		 xor	 eax, eax
  005b4	85 c0		 test	 eax, eax
  005b6	75 e8		 jne	 SHORT $LN16@warn_expli
$LN12@warn_expli:

; 440  :     Py_XDECREF(text);

  005b8	48 83 7c 24 38
	00		 cmp	 QWORD PTR text$[rsp], 0
  005be	74 0a		 je	 SHORT $LN9@warn_expli
  005c0	48 8b 4c 24 38	 mov	 rcx, QWORD PTR text$[rsp]
  005c5	e8 00 00 00 00	 call	 _Py_DecRef
$LN9@warn_expli:
  005ca	33 c0		 xor	 eax, eax
  005cc	85 c0		 test	 eax, eax
  005ce	75 e8		 jne	 SHORT $LN12@warn_expli
$LN8@warn_expli:

; 441  :     Py_XDECREF(lineno_obj);

  005d0	48 83 7c 24 40
	00		 cmp	 QWORD PTR lineno_obj$[rsp], 0
  005d6	74 0a		 je	 SHORT $LN5@warn_expli
  005d8	48 8b 4c 24 40	 mov	 rcx, QWORD PTR lineno_obj$[rsp]
  005dd	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@warn_expli:
  005e2	33 c0		 xor	 eax, eax
  005e4	85 c0		 test	 eax, eax
  005e6	75 e8		 jne	 SHORT $LN8@warn_expli

; 442  :     Py_DECREF(module);

  005e8	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR module$[rsp]
  005f0	e8 00 00 00 00	 call	 _Py_DecRef
$LN4@warn_expli:

; 443  :     Py_XDECREF(message);

  005f5	48 83 bc 24 a8
	00 00 00 00	 cmp	 QWORD PTR message$[rsp], 0
  005fe	74 0d		 je	 SHORT $LN1@warn_expli
  00600	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR message$[rsp]
  00608	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@warn_expli:
  0060d	33 c0		 xor	 eax, eax
  0060f	85 c0		 test	 eax, eax
  00611	75 e2		 jne	 SHORT $LN4@warn_expli

; 444  :     return result;  /* Py_None or NULL. */

  00613	48 8b 44 24 58	 mov	 rax, QWORD PTR result$[rsp]
$LN66@warn_expli:

; 445  : }

  00618	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  0061f	c3		 ret	 0
warn_explicit ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN7
	DD	imagerel $LN7+132
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 6d		 jne	 SHORT $LN2@Py_IncRef
  00012	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0001a	4c 8b 4c 24 40	 mov	 r9, QWORD PTR op$[rsp]
  0001f	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_Guard
  00038	85 c0		 test	 eax, eax
  0003a	75 12		 jne	 SHORT $LN1@Py_IncRef
  0003c	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  00041	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00045	48 83 e0 20	 and	 rax, 32			; 00000020H
  00049	48 85 c0	 test	 rax, rax
  0004c	74 31		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;

  0004e	e8 00 00 00 00	 call	 _Py_PXCTX
  00053	85 c0		 test	 eax, eax
  00055	74 02		 je	 SHORT $LN5@Py_IncRef
  00057	eb 11		 jmp	 SHORT $LN6@Py_IncRef
$LN5@Py_IncRef:
  00059	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00060	48 ff c0	 inc	 rax
  00063	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN6@Py_IncRef:

; 907  :         (((PyObject*)(op))->ob_refcnt++);

  0006a	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  0006f	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00073	48 ff c0	 inc	 rax
  00076	48 8b 4c 24 40	 mov	 rcx, QWORD PTR op$[rsp]
  0007b	48 89 41 50	 mov	 QWORD PTR [rcx+80], rax
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  0007f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00083	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_08NOCNCINM@warnings?$AA@			; `string'
EXTRN	PyObject_GetAttrString:PROC
EXTRN	PyObject_HasAttrString:PROC
EXTRN	PyDict_GetItem:PROC
EXTRN	PyDict_Contains:PROC
EXTRN	PyImport_GetModuleDict:PROC
EXTRN	PyUnicode_InternFromString:PROC
;	COMDAT pdata
; File c:\src\pyparallel\python\_warnings.c
pdata	SEGMENT
$pdata$get_warnings_attr DD imagerel get_warnings_attr
	DD	imagerel get_warnings_attr+166
	DD	imagerel $unwind$get_warnings_attr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$get_warnings_attr DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_08NOCNCINM@warnings?$AA@
CONST	SEGMENT
??_C@_08NOCNCINM@warnings?$AA@ DB 'warnings', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT get_warnings_attr
_TEXT	SEGMENT
warnings_module$ = 32
all_modules$ = 40
result$ = 48
attr$ = 80
get_warnings_attr PROC					; COMDAT

; 41   : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 42   :     static PyObject *warnings_str = NULL;
; 43   :     PyObject *all_modules;
; 44   :     PyObject *warnings_module;
; 45   :     int result;
; 46   : 
; 47   :     if (warnings_str == NULL) {

  00009	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?warnings_str@?1??get_warnings_attr@@9@9, 0
  00011	75 21		 jne	 SHORT $LN5@get_warnin

; 48   :         warnings_str = PyUnicode_InternFromString("warnings");

  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08NOCNCINM@warnings?$AA@
  0001a	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  0001f	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?warnings_str@?1??get_warnings_attr@@9@9, rax

; 49   :         if (warnings_str == NULL)

  00026	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?warnings_str@?1??get_warnings_attr@@9@9, 0
  0002e	75 04		 jne	 SHORT $LN4@get_warnin

; 50   :             return NULL;

  00030	33 c0		 xor	 eax, eax
  00032	eb 6d		 jmp	 SHORT $LN6@get_warnin
$LN4@get_warnin:
$LN5@get_warnin:

; 51   :     }
; 52   : 
; 53   :     all_modules = PyImport_GetModuleDict();

  00034	e8 00 00 00 00	 call	 PyImport_GetModuleDict
  00039	48 89 44 24 28	 mov	 QWORD PTR all_modules$[rsp], rax

; 54   :     result = PyDict_Contains(all_modules, warnings_str);

  0003e	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR ?warnings_str@?1??get_warnings_attr@@9@9
  00045	48 8b 4c 24 28	 mov	 rcx, QWORD PTR all_modules$[rsp]
  0004a	e8 00 00 00 00	 call	 PyDict_Contains
  0004f	89 44 24 30	 mov	 DWORD PTR result$[rsp], eax

; 55   :     if (result == -1 || result == 0)

  00053	83 7c 24 30 ff	 cmp	 DWORD PTR result$[rsp], -1
  00058	74 07		 je	 SHORT $LN2@get_warnin
  0005a	83 7c 24 30 00	 cmp	 DWORD PTR result$[rsp], 0
  0005f	75 04		 jne	 SHORT $LN3@get_warnin
$LN2@get_warnin:

; 56   :         return NULL;

  00061	33 c0		 xor	 eax, eax
  00063	eb 3c		 jmp	 SHORT $LN6@get_warnin
$LN3@get_warnin:

; 57   : 
; 58   :     warnings_module = PyDict_GetItem(all_modules, warnings_str);

  00065	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR ?warnings_str@?1??get_warnings_attr@@9@9
  0006c	48 8b 4c 24 28	 mov	 rcx, QWORD PTR all_modules$[rsp]
  00071	e8 00 00 00 00	 call	 PyDict_GetItem
  00076	48 89 44 24 20	 mov	 QWORD PTR warnings_module$[rsp], rax

; 59   :     if (!PyObject_HasAttrString(warnings_module, attr))

  0007b	48 8b 54 24 50	 mov	 rdx, QWORD PTR attr$[rsp]
  00080	48 8b 4c 24 20	 mov	 rcx, QWORD PTR warnings_module$[rsp]
  00085	e8 00 00 00 00	 call	 PyObject_HasAttrString
  0008a	85 c0		 test	 eax, eax
  0008c	75 04		 jne	 SHORT $LN1@get_warnin

; 60   :             return NULL;

  0008e	33 c0		 xor	 eax, eax
  00090	eb 0f		 jmp	 SHORT $LN6@get_warnin
$LN1@get_warnin:

; 61   :     return PyObject_GetAttrString(warnings_module, attr);

  00092	48 8b 54 24 50	 mov	 rdx, QWORD PTR attr$[rsp]
  00097	48 8b 4c 24 20	 mov	 rcx, QWORD PTR warnings_module$[rsp]
  0009c	e8 00 00 00 00	 call	 PyObject_GetAttrString
$LN6@get_warnin:

; 62   : }

  000a1	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000a5	c3		 ret	 0
get_warnings_attr ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@DCIAIMCN@onceregistry?$AA@		; `string'
_BSS	SEGMENT
_once_registry DQ 01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$get_once_registry DD imagerel get_once_registry
	DD	imagerel get_once_registry+86
	DD	imagerel $unwind$get_once_registry
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$get_once_registry DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_0N@DCIAIMCN@onceregistry?$AA@
CONST	SEGMENT
??_C@_0N@DCIAIMCN@onceregistry?$AA@ DB 'onceregistry', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT get_once_registry
_TEXT	SEGMENT
registry$ = 32
get_once_registry PROC					; COMDAT

; 67   : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 68   :     PyObject *registry;
; 69   : 
; 70   :     registry = get_warnings_attr("onceregistry");

  00004	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@DCIAIMCN@onceregistry?$AA@
  0000b	e8 00 00 00 00	 call	 get_warnings_attr
  00010	48 89 44 24 20	 mov	 QWORD PTR registry$[rsp], rax

; 71   :     if (registry == NULL) {

  00015	48 83 7c 24 20
	00		 cmp	 QWORD PTR registry$[rsp], 0
  0001b	75 17		 jne	 SHORT $LN2@get_once_r

; 72   :         if (PyErr_Occurred())

  0001d	e8 00 00 00 00	 call	 PyErr_Occurred
  00022	48 85 c0	 test	 rax, rax
  00025	74 04		 je	 SHORT $LN1@get_once_r

; 73   :             return NULL;

  00027	33 c0		 xor	 eax, eax
  00029	eb 26		 jmp	 SHORT $LN3@get_once_r
$LN1@get_once_r:

; 74   :         return _once_registry;

  0002b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _once_registry
  00032	eb 1d		 jmp	 SHORT $LN3@get_once_r
$LN2@get_once_r:

; 75   :     }
; 76   :     Py_DECREF(_once_registry);

  00034	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR _once_registry
  0003b	e8 00 00 00 00	 call	 _Py_DecRef

; 77   :     _once_registry = registry;

  00040	48 8b 44 24 20	 mov	 rax, QWORD PTR registry$[rsp]
  00045	48 89 05 00 00
	00 00		 mov	 QWORD PTR _once_registry, rax

; 78   :     return registry;

  0004c	48 8b 44 24 20	 mov	 rax, QWORD PTR registry$[rsp]
$LN3@get_once_r:

; 79   : }

  00051	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00055	c3		 ret	 0
get_once_registry ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CC@OPKOKLHA@_warnings?4defaultaction?5not?5foun@ ; `string'
PUBLIC	??_C@_0CL@KHGDEOFF@_warnings?4filters?5item?5?$CFzd?5isn?8t@ ; `string'
PUBLIC	??_C@_0CB@LGIICNPJ@_warnings?4filters?5must?5be?5a?5list@ ; `string'
PUBLIC	??_C@_07LOIMJIII@filters?$AA@			; `string'
EXTRN	PyLong_AsSsize_t:PROC
EXTRN	PyTuple_Size:PROC
_BSS	SEGMENT
_filters DQ	01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$get_filter DD imagerel get_filter
	DD	imagerel get_filter+620
	DD	imagerel $unwind$get_filter
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$get_filter DD 021b01H
	DD	011011bH
xdata	ENDS
;	COMDAT ??_C@_0CC@OPKOKLHA@_warnings?4defaultaction?5not?5foun@
CONST	SEGMENT
??_C@_0CC@OPKOKLHA@_warnings?4defaultaction?5not?5foun@ DB '_warnings.def'
	DB	'aultaction not found', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@KHGDEOFF@_warnings?4filters?5item?5?$CFzd?5isn?8t@
CONST	SEGMENT
??_C@_0CL@KHGDEOFF@_warnings?4filters?5item?5?$CFzd?5isn?8t@ DB '_warning'
	DB	's.filters item %zd isn''t a 5-tuple', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@LGIICNPJ@_warnings?4filters?5must?5be?5a?5list@
CONST	SEGMENT
??_C@_0CB@LGIICNPJ@_warnings?4filters?5must?5be?5a?5list@ DB '_warnings.f'
	DB	'ilters must be a list', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07LOIMJIII@filters?$AA@
CONST	SEGMENT
??_C@_07LOIMJIII@filters?$AA@ DB 'filters', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT get_filter
_TEXT	SEGMENT
i$ = 32
warnings_filters$ = 40
action$ = 48
good_msg$20445 = 56
tmp_item$20437 = 64
is_subclass$20444 = 72
good_mod$20446 = 76
msg$20439 = 80
ln$20443 = 88
action$20438 = 96
ln_obj$20442 = 104
cat$20440 = 112
mod$20441 = 120
category$ = 144
text$ = 152
lineno$ = 160
module$ = 168
item$ = 176
get_filter PROC						; COMDAT

; 105  : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 106  :     PyObject *action;
; 107  :     Py_ssize_t i;
; 108  :     PyObject *warnings_filters;
; 109  : 
; 110  :     warnings_filters = get_warnings_attr("filters");

  0001b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07LOIMJIII@filters?$AA@
  00022	e8 00 00 00 00	 call	 get_warnings_attr
  00027	48 89 44 24 28	 mov	 QWORD PTR warnings_filters$[rsp], rax

; 111  :     if (warnings_filters == NULL) {

  0002c	48 83 7c 24 28
	00		 cmp	 QWORD PTR warnings_filters$[rsp], 0
  00032	75 13		 jne	 SHORT $LN14@get_filter

; 112  :         if (PyErr_Occurred())

  00034	e8 00 00 00 00	 call	 PyErr_Occurred
  00039	48 85 c0	 test	 rax, rax
  0003c	74 07		 je	 SHORT $LN13@get_filter

; 113  :             return NULL;

  0003e	33 c0		 xor	 eax, eax
  00040	e9 1f 02 00 00	 jmp	 $LN15@get_filter
$LN13@get_filter:

; 114  :     }
; 115  :     else {

  00045	eb 18		 jmp	 SHORT $LN12@get_filter
$LN14@get_filter:

; 116  :         Py_DECREF(_filters);

  00047	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR _filters
  0004e	e8 00 00 00 00	 call	 _Py_DecRef

; 117  :         _filters = warnings_filters;

  00053	48 8b 44 24 28	 mov	 rax, QWORD PTR warnings_filters$[rsp]
  00058	48 89 05 00 00
	00 00		 mov	 QWORD PTR _filters, rax
$LN12@get_filter:

; 118  :     }
; 119  : 
; 120  :     if (_filters == NULL || !PyList_Check(_filters)) {

  0005f	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR _filters, 0
  00067	74 1a		 je	 SHORT $LN10@get_filter
  00069	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _filters
  00070	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00074	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0007a	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  0007f	85 c0		 test	 eax, eax
  00081	75 1a		 jne	 SHORT $LN11@get_filter
$LN10@get_filter:

; 121  :         PyErr_SetString(PyExc_ValueError,
; 122  :                         MODULE_NAME ".filters must be a list");

  00083	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CB@LGIICNPJ@_warnings?4filters?5must?5be?5a?5list@
  0008a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00091	e8 00 00 00 00	 call	 PyErr_SetString

; 123  :         return NULL;

  00096	33 c0		 xor	 eax, eax
  00098	e9 c7 01 00 00	 jmp	 $LN15@get_filter
$LN11@get_filter:

; 124  :     }
; 125  : 
; 126  :     /* _filters could change while we are iterating over it. */
; 127  :     for (i = 0; i < PyList_GET_SIZE(_filters); i++) {

  0009d	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  000a6	eb 0d		 jmp	 SHORT $LN9@get_filter
$LN8@get_filter:
  000a8	48 8b 44 24 20	 mov	 rax, QWORD PTR i$[rsp]
  000ad	48 ff c0	 inc	 rax
  000b0	48 89 44 24 20	 mov	 QWORD PTR i$[rsp], rax
$LN9@get_filter:
  000b5	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _filters
  000bc	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000c0	48 39 44 24 20	 cmp	 QWORD PTR i$[rsp], rax
  000c5	0f 8d 66 01 00
	00		 jge	 $LN7@get_filter

; 128  :         PyObject *tmp_item, *action, *msg, *cat, *mod, *ln_obj;
; 129  :         Py_ssize_t ln;
; 130  :         int is_subclass, good_msg, good_mod;
; 131  : 
; 132  :         tmp_item = *item = PyList_GET_ITEM(_filters, i);

  000cb	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _filters
  000d2	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  000d6	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR item$[rsp]
  000de	48 8b 54 24 20	 mov	 rdx, QWORD PTR i$[rsp]
  000e3	48 8b 04 d0	 mov	 rax, QWORD PTR [rax+rdx*8]
  000e7	48 89 01	 mov	 QWORD PTR [rcx], rax
  000ea	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR item$[rsp]
  000f2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000f5	48 89 44 24 40	 mov	 QWORD PTR tmp_item$20437[rsp], rax

; 133  :         if (PyTuple_Size(tmp_item) != 5) {

  000fa	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tmp_item$20437[rsp]
  000ff	e8 00 00 00 00	 call	 PyTuple_Size
  00104	48 83 f8 05	 cmp	 rax, 5
  00108	74 1f		 je	 SHORT $LN6@get_filter

; 134  :             PyErr_Format(PyExc_ValueError,
; 135  :                          MODULE_NAME ".filters item %zd isn't a 5-tuple", i);

  0010a	4c 8b 44 24 20	 mov	 r8, QWORD PTR i$[rsp]
  0010f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CL@KHGDEOFF@_warnings?4filters?5item?5?$CFzd?5isn?8t@
  00116	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0011d	e8 00 00 00 00	 call	 PyErr_Format

; 136  :             return NULL;

  00122	33 c0		 xor	 eax, eax
  00124	e9 3b 01 00 00	 jmp	 $LN15@get_filter
$LN6@get_filter:

; 137  :         }
; 138  : 
; 139  :         /* Python code: action, msg, cat, mod, ln = item */
; 140  :         action = PyTuple_GET_ITEM(tmp_item, 0);

  00129	48 8b 44 24 40	 mov	 rax, QWORD PTR tmp_item$20437[rsp]
  0012e	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00132	48 89 44 24 60	 mov	 QWORD PTR action$20438[rsp], rax

; 141  :         msg = PyTuple_GET_ITEM(tmp_item, 1);

  00137	48 8b 44 24 40	 mov	 rax, QWORD PTR tmp_item$20437[rsp]
  0013c	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  00140	48 89 44 24 50	 mov	 QWORD PTR msg$20439[rsp], rax

; 142  :         cat = PyTuple_GET_ITEM(tmp_item, 2);

  00145	48 8b 44 24 40	 mov	 rax, QWORD PTR tmp_item$20437[rsp]
  0014a	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  00151	48 89 44 24 70	 mov	 QWORD PTR cat$20440[rsp], rax

; 143  :         mod = PyTuple_GET_ITEM(tmp_item, 3);

  00156	48 8b 44 24 40	 mov	 rax, QWORD PTR tmp_item$20437[rsp]
  0015b	48 8b 80 88 00
	00 00		 mov	 rax, QWORD PTR [rax+136]
  00162	48 89 44 24 78	 mov	 QWORD PTR mod$20441[rsp], rax

; 144  :         ln_obj = PyTuple_GET_ITEM(tmp_item, 4);

  00167	48 8b 44 24 40	 mov	 rax, QWORD PTR tmp_item$20437[rsp]
  0016c	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  00173	48 89 44 24 68	 mov	 QWORD PTR ln_obj$20442[rsp], rax

; 145  : 
; 146  :         good_msg = check_matched(msg, text);

  00178	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR text$[rsp]
  00180	48 8b 4c 24 50	 mov	 rcx, QWORD PTR msg$20439[rsp]
  00185	e8 00 00 00 00	 call	 check_matched
  0018a	89 44 24 38	 mov	 DWORD PTR good_msg$20445[rsp], eax

; 147  :         good_mod = check_matched(mod, module);

  0018e	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR module$[rsp]
  00196	48 8b 4c 24 78	 mov	 rcx, QWORD PTR mod$20441[rsp]
  0019b	e8 00 00 00 00	 call	 check_matched
  001a0	89 44 24 4c	 mov	 DWORD PTR good_mod$20446[rsp], eax

; 148  :         is_subclass = PyObject_IsSubclass(category, cat);

  001a4	48 8b 54 24 70	 mov	 rdx, QWORD PTR cat$20440[rsp]
  001a9	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR category$[rsp]
  001b1	e8 00 00 00 00	 call	 PyObject_IsSubclass
  001b6	89 44 24 48	 mov	 DWORD PTR is_subclass$20444[rsp], eax

; 149  :         ln = PyLong_AsSsize_t(ln_obj);

  001ba	48 8b 4c 24 68	 mov	 rcx, QWORD PTR ln_obj$20442[rsp]
  001bf	e8 00 00 00 00	 call	 PyLong_AsSsize_t
  001c4	48 89 44 24 58	 mov	 QWORD PTR ln$20443[rsp], rax

; 150  :         if (good_msg == -1 || good_mod == -1 || is_subclass == -1 ||
; 151  :             (ln == -1 && PyErr_Occurred()))

  001c9	83 7c 24 38 ff	 cmp	 DWORD PTR good_msg$20445[rsp], -1
  001ce	74 20		 je	 SHORT $LN4@get_filter
  001d0	83 7c 24 4c ff	 cmp	 DWORD PTR good_mod$20446[rsp], -1
  001d5	74 19		 je	 SHORT $LN4@get_filter
  001d7	83 7c 24 48 ff	 cmp	 DWORD PTR is_subclass$20444[rsp], -1
  001dc	74 12		 je	 SHORT $LN4@get_filter
  001de	48 83 7c 24 58
	ff		 cmp	 QWORD PTR ln$20443[rsp], -1
  001e4	75 0e		 jne	 SHORT $LN5@get_filter
  001e6	e8 00 00 00 00	 call	 PyErr_Occurred
  001eb	48 85 c0	 test	 rax, rax
  001ee	74 04		 je	 SHORT $LN5@get_filter
$LN4@get_filter:

; 152  :             return NULL;

  001f0	33 c0		 xor	 eax, eax
  001f2	eb 70		 jmp	 SHORT $LN15@get_filter
$LN5@get_filter:

; 153  : 
; 154  :         if (good_msg && is_subclass && good_mod && (ln == 0 || lineno == ln))

  001f4	83 7c 24 38 00	 cmp	 DWORD PTR good_msg$20445[rsp], 0
  001f9	74 31		 je	 SHORT $LN3@get_filter
  001fb	83 7c 24 48 00	 cmp	 DWORD PTR is_subclass$20444[rsp], 0
  00200	74 2a		 je	 SHORT $LN3@get_filter
  00202	83 7c 24 4c 00	 cmp	 DWORD PTR good_mod$20446[rsp], 0
  00207	74 23		 je	 SHORT $LN3@get_filter
  00209	48 83 7c 24 58
	00		 cmp	 QWORD PTR ln$20443[rsp], 0
  0020f	74 0f		 je	 SHORT $LN2@get_filter
  00211	48 8b 44 24 58	 mov	 rax, QWORD PTR ln$20443[rsp]
  00216	48 39 84 24 a0
	00 00 00	 cmp	 QWORD PTR lineno$[rsp], rax
  0021e	75 0c		 jne	 SHORT $LN3@get_filter
$LN2@get_filter:

; 155  :             return _PyUnicode_AsString(action);

  00220	48 8b 4c 24 60	 mov	 rcx, QWORD PTR action$20438[rsp]
  00225	e8 00 00 00 00	 call	 PyUnicode_AsUTF8
  0022a	eb 38		 jmp	 SHORT $LN15@get_filter
$LN3@get_filter:

; 156  :     }

  0022c	e9 77 fe ff ff	 jmp	 $LN8@get_filter
$LN7@get_filter:

; 157  : 
; 158  :     action = get_default_action();

  00231	e8 00 00 00 00	 call	 get_default_action
  00236	48 89 44 24 30	 mov	 QWORD PTR action$[rsp], rax

; 159  :     if (action != NULL) {

  0023b	48 83 7c 24 30
	00		 cmp	 QWORD PTR action$[rsp], 0
  00241	74 0c		 je	 SHORT $LN1@get_filter

; 160  :         return _PyUnicode_AsString(action);

  00243	48 8b 4c 24 30	 mov	 rcx, QWORD PTR action$[rsp]
  00248	e8 00 00 00 00	 call	 PyUnicode_AsUTF8
  0024d	eb 15		 jmp	 SHORT $LN15@get_filter
$LN1@get_filter:

; 161  :     }
; 162  : 
; 163  :     PyErr_SetString(PyExc_ValueError,
; 164  :                     MODULE_NAME ".defaultaction not found");

  0024f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CC@OPKOKLHA@_warnings?4defaultaction?5not?5foun@
  00256	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0025d	e8 00 00 00 00	 call	 PyErr_SetString

; 165  :     return NULL;

  00262	33 c0		 xor	 eax, eax
$LN15@get_filter:

; 166  : }

  00264	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  0026b	c3		 ret	 0
get_filter ENDP
_TEXT	ENDS
EXTRN	PyObject_IsTrue:PROC
EXTRN	_PyObject_CallMethodId:PROC
EXTRN	_tls_index:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$check_matched DD imagerel check_matched
	DD	imagerel check_matched+139
	DD	imagerel $unwind$check_matched
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$check_matched DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT check_matched
_TEXT	SEGMENT
rc$ = 32
result$ = 40
obj$ = 64
arg$ = 72
check_matched PROC					; COMDAT

; 19   : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 20   :     PyObject *result;
; 21   :     _Py_IDENTIFIER(match);
; 22   :     int rc;
; 23   : 
; 24   :     if (obj == Py_None)

  0000e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00015	48 39 44 24 40	 cmp	 QWORD PTR obj$[rsp], rax
  0001a	75 07		 jne	 SHORT $LN2@check_matc

; 25   :         return 1;

  0001c	b8 01 00 00 00	 mov	 eax, 1
  00021	eb 63		 jmp	 SHORT $LN3@check_matc
$LN2@check_matc:

; 26   :     result = _PyObject_CallMethodId(obj, &PyId_match, "O", arg);

  00023	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId_match@?1??check_matched@@9@9
  00028	8b c0		 mov	 eax, eax
  0002a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00030	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00039	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0003d	4c 8b 4c 24 48	 mov	 r9, QWORD PTR arg$[rsp]
  00042	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01MJMHLOMK@O?$AA@
  00049	48 8b d0	 mov	 rdx, rax
  0004c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR obj$[rsp]
  00051	e8 00 00 00 00	 call	 _PyObject_CallMethodId
  00056	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax

; 27   :     if (result == NULL)

  0005b	48 83 7c 24 28
	00		 cmp	 QWORD PTR result$[rsp], 0
  00061	75 07		 jne	 SHORT $LN1@check_matc

; 28   :         return -1;

  00063	b8 ff ff ff ff	 mov	 eax, -1
  00068	eb 1c		 jmp	 SHORT $LN3@check_matc
$LN1@check_matc:

; 29   : 
; 30   :     rc = PyObject_IsTrue(result);

  0006a	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  0006f	e8 00 00 00 00	 call	 PyObject_IsTrue
  00074	89 44 24 20	 mov	 DWORD PTR rc$[rsp], eax

; 31   :     Py_DECREF(result);

  00078	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  0007d	e8 00 00 00 00	 call	 _Py_DecRef

; 32   :     return rc;

  00082	8b 44 24 20	 mov	 eax, DWORD PTR rc$[rsp]
$LN3@check_matc:

; 33   : }

  00086	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0008a	c3		 ret	 0
check_matched ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@CNNJMCEG@defaultaction?$AA@		; `string'
_BSS	SEGMENT
_default_action DQ 01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$get_default_action DD imagerel get_default_action
	DD	imagerel get_default_action+86
	DD	imagerel $unwind$get_default_action
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$get_default_action DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_0O@CNNJMCEG@defaultaction?$AA@
CONST	SEGMENT
??_C@_0O@CNNJMCEG@defaultaction?$AA@ DB 'defaultaction', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT get_default_action
_TEXT	SEGMENT
default_action$ = 32
get_default_action PROC					; COMDAT

; 84   : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 85   :     PyObject *default_action;
; 86   : 
; 87   :     default_action = get_warnings_attr("defaultaction");

  00004	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@CNNJMCEG@defaultaction?$AA@
  0000b	e8 00 00 00 00	 call	 get_warnings_attr
  00010	48 89 44 24 20	 mov	 QWORD PTR default_action$[rsp], rax

; 88   :     if (default_action == NULL) {

  00015	48 83 7c 24 20
	00		 cmp	 QWORD PTR default_action$[rsp], 0
  0001b	75 17		 jne	 SHORT $LN2@get_defaul

; 89   :         if (PyErr_Occurred()) {

  0001d	e8 00 00 00 00	 call	 PyErr_Occurred
  00022	48 85 c0	 test	 rax, rax
  00025	74 04		 je	 SHORT $LN1@get_defaul

; 90   :             return NULL;

  00027	33 c0		 xor	 eax, eax
  00029	eb 26		 jmp	 SHORT $LN3@get_defaul
$LN1@get_defaul:

; 91   :         }
; 92   :         return _default_action;

  0002b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _default_action
  00032	eb 1d		 jmp	 SHORT $LN3@get_defaul
$LN2@get_defaul:

; 93   :     }
; 94   : 
; 95   :     Py_DECREF(_default_action);

  00034	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR _default_action
  0003b	e8 00 00 00 00	 call	 _Py_DecRef

; 96   :     _default_action = default_action;

  00040	48 8b 44 24 20	 mov	 rax, QWORD PTR default_action$[rsp]
  00045	48 89 05 00 00
	00 00		 mov	 QWORD PTR _default_action, rax

; 97   :     return default_action;

  0004c	48 8b 44 24 20	 mov	 rax, QWORD PTR default_action$[rsp]
$LN3@get_defaul:

; 98   : }

  00051	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00055	c3		 ret	 0
get_default_action ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$already_warned DD imagerel already_warned
	DD	imagerel already_warned+127
	DD	imagerel $unwind$already_warned
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$already_warned DD 011301H
	DD	06213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT already_warned
_TEXT	SEGMENT
already_warned$ = 32
rc$20478 = 40
registry$ = 64
key$ = 72
should_set$ = 80
already_warned PROC					; COMDAT

; 171  : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 172  :     PyObject *already_warned;
; 173  : 
; 174  :     if (key == NULL)

  00013	48 83 7c 24 48
	00		 cmp	 QWORD PTR key$[rsp], 0
  00019	75 07		 jne	 SHORT $LN4@already_wa

; 175  :         return -1;

  0001b	b8 ff ff ff ff	 mov	 eax, -1
  00020	eb 58		 jmp	 SHORT $LN5@already_wa
$LN4@already_wa:

; 176  : 
; 177  :     already_warned = PyDict_GetItem(registry, key);

  00022	48 8b 54 24 48	 mov	 rdx, QWORD PTR key$[rsp]
  00027	48 8b 4c 24 40	 mov	 rcx, QWORD PTR registry$[rsp]
  0002c	e8 00 00 00 00	 call	 PyDict_GetItem
  00031	48 89 44 24 20	 mov	 QWORD PTR already_warned$[rsp], rax

; 178  :     if (already_warned != NULL) {

  00036	48 83 7c 24 20
	00		 cmp	 QWORD PTR already_warned$[rsp], 0
  0003c	74 1b		 je	 SHORT $LN3@already_wa

; 179  :         int rc = PyObject_IsTrue(already_warned);

  0003e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR already_warned$[rsp]
  00043	e8 00 00 00 00	 call	 PyObject_IsTrue
  00048	89 44 24 28	 mov	 DWORD PTR rc$20478[rsp], eax

; 180  :         if (rc != 0)

  0004c	83 7c 24 28 00	 cmp	 DWORD PTR rc$20478[rsp], 0
  00051	74 06		 je	 SHORT $LN2@already_wa

; 181  :             return rc;

  00053	8b 44 24 28	 mov	 eax, DWORD PTR rc$20478[rsp]
  00057	eb 21		 jmp	 SHORT $LN5@already_wa
$LN2@already_wa:
$LN3@already_wa:

; 182  :     }
; 183  : 
; 184  :     /* This warning wasn't found in the registry, set it. */
; 185  :     if (should_set)

  00059	83 7c 24 50 00	 cmp	 DWORD PTR should_set$[rsp], 0
  0005e	74 18		 je	 SHORT $LN1@already_wa

; 186  :         return PyDict_SetItem(registry, key, Py_True);

  00060	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:_Py_TrueStruct
  00067	48 8b 54 24 48	 mov	 rdx, QWORD PTR key$[rsp]
  0006c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR registry$[rsp]
  00071	e8 00 00 00 00	 call	 PyDict_SetItem
  00076	eb 02		 jmp	 SHORT $LN5@already_wa
$LN1@already_wa:

; 187  :     return 0;

  00078	33 c0		 xor	 eax, eax
$LN5@already_wa:

; 188  : }

  0007a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0007e	c3		 ret	 0
already_warned ENDP
_TEXT	ENDS
PUBLIC	??_C@_03DEFKFCAB@?4py?$AA@			; `string'
PUBLIC	??_C@_09EEKGDCPH@?$DMunknown?$DO?$AA@		; `string'
EXTRN	PyUnicode_Substring:PROC
EXTRN	__imp_strncmp:PROC
EXTRN	PyUnicode_GetLength:PROC
EXTRN	PyUnicode_FromString:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$normalize_module DD imagerel normalize_module
	DD	imagerel normalize_module+230
	DD	imagerel $unwind$normalize_module
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$normalize_module DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_03DEFKFCAB@?4py?$AA@
CONST	SEGMENT
??_C@_03DEFKFCAB@?4py?$AA@ DB '.py', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09EEKGDCPH@?$DMunknown?$DO?$AA@
CONST	SEGMENT
??_C@_09EEKGDCPH@?$DMunknown?$DO?$AA@ DB '<unknown>', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT normalize_module
_TEXT	SEGMENT
rc$ = 32
mod_str$ = 40
len$ = 48
module$ = 56
filename$ = 80
normalize_module PROC					; COMDAT

; 193  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 194  :     PyObject *module;
; 195  :     const char *mod_str;
; 196  :     Py_ssize_t len;
; 197  : 
; 198  :     int rc = PyObject_IsTrue(filename);

  00009	48 8b 4c 24 50	 mov	 rcx, QWORD PTR filename$[rsp]
  0000e	e8 00 00 00 00	 call	 PyObject_IsTrue
  00013	89 44 24 20	 mov	 DWORD PTR rc$[rsp], eax

; 199  :     if (rc == -1)

  00017	83 7c 24 20 ff	 cmp	 DWORD PTR rc$[rsp], -1
  0001c	75 09		 jne	 SHORT $LN7@normalize_

; 200  :         return NULL;

  0001e	33 c0		 xor	 eax, eax
  00020	e9 bc 00 00 00	 jmp	 $LN8@normalize_
  00025	eb 18		 jmp	 SHORT $LN6@normalize_
$LN7@normalize_:

; 201  :     else if (rc == 0)

  00027	83 7c 24 20 00	 cmp	 DWORD PTR rc$[rsp], 0
  0002c	75 11		 jne	 SHORT $LN5@normalize_

; 202  :         return PyUnicode_FromString("<unknown>");

  0002e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09EEKGDCPH@?$DMunknown?$DO?$AA@
  00035	e8 00 00 00 00	 call	 PyUnicode_FromString
  0003a	e9 a2 00 00 00	 jmp	 $LN8@normalize_
$LN5@normalize_:
$LN6@normalize_:

; 203  : 
; 204  :     mod_str = _PyUnicode_AsString(filename);

  0003f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR filename$[rsp]
  00044	e8 00 00 00 00	 call	 PyUnicode_AsUTF8
  00049	48 89 44 24 28	 mov	 QWORD PTR mod_str$[rsp], rax

; 205  :     if (mod_str == NULL)

  0004e	48 83 7c 24 28
	00		 cmp	 QWORD PTR mod_str$[rsp], 0
  00054	75 07		 jne	 SHORT $LN4@normalize_

; 206  :         return NULL;

  00056	33 c0		 xor	 eax, eax
  00058	e9 84 00 00 00	 jmp	 $LN8@normalize_
$LN4@normalize_:

; 207  :     len = PyUnicode_GetLength(filename);

  0005d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR filename$[rsp]
  00062	e8 00 00 00 00	 call	 PyUnicode_GetLength
  00067	48 89 44 24 30	 mov	 QWORD PTR len$[rsp], rax

; 208  :     if (len < 0)

  0006c	48 83 7c 24 30
	00		 cmp	 QWORD PTR len$[rsp], 0
  00072	7d 04		 jge	 SHORT $LN3@normalize_

; 209  :         return NULL;

  00074	33 c0		 xor	 eax, eax
  00076	eb 69		 jmp	 SHORT $LN8@normalize_
$LN3@normalize_:

; 210  :     if (len >= 3 &&
; 211  :         strncmp(mod_str + (len - 3), ".py", 3) == 0) {

  00078	48 83 7c 24 30
	03		 cmp	 QWORD PTR len$[rsp], 3
  0007e	7c 48		 jl	 SHORT $LN2@normalize_
  00080	48 8b 44 24 28	 mov	 rax, QWORD PTR mod_str$[rsp]
  00085	48 8b 4c 24 30	 mov	 rcx, QWORD PTR len$[rsp]
  0008a	48 8d 44 08 fd	 lea	 rax, QWORD PTR [rax+rcx-3]
  0008f	41 b8 03 00 00
	00		 mov	 r8d, 3
  00095	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03DEFKFCAB@?4py?$AA@
  0009c	48 8b c8	 mov	 rcx, rax
  0009f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strncmp
  000a5	85 c0		 test	 eax, eax
  000a7	75 1f		 jne	 SHORT $LN2@normalize_

; 212  :         module = PyUnicode_Substring(filename, 0, len-3);

  000a9	48 8b 44 24 30	 mov	 rax, QWORD PTR len$[rsp]
  000ae	48 83 e8 03	 sub	 rax, 3
  000b2	4c 8b c0	 mov	 r8, rax
  000b5	33 d2		 xor	 edx, edx
  000b7	48 8b 4c 24 50	 mov	 rcx, QWORD PTR filename$[rsp]
  000bc	e8 00 00 00 00	 call	 PyUnicode_Substring
  000c1	48 89 44 24 38	 mov	 QWORD PTR module$[rsp], rax

; 213  :     }
; 214  :     else {

  000c6	eb 14		 jmp	 SHORT $LN1@normalize_
$LN2@normalize_:

; 215  :         module = filename;

  000c8	48 8b 44 24 50	 mov	 rax, QWORD PTR filename$[rsp]
  000cd	48 89 44 24 38	 mov	 QWORD PTR module$[rsp], rax

; 216  :         Py_INCREF(module);

  000d2	48 8b 4c 24 38	 mov	 rcx, QWORD PTR module$[rsp]
  000d7	e8 00 00 00 00	 call	 _Py_IncRef
$LN1@normalize_:

; 217  :     }
; 218  :     return module;

  000dc	48 8b 44 24 38	 mov	 rax, QWORD PTR module$[rsp]
$LN8@normalize_:

; 219  : }

  000e1	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e5	c3		 ret	 0
normalize_module ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$update_registry DD imagerel update_registry
	DD	imagerel update_registry+209
	DD	imagerel $unwind$update_registry
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$update_registry DD 011801H
	DD	08218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT update_registry
_TEXT	SEGMENT
rc$ = 32
zero$ = 40
altkey$ = 48
registry$ = 80
text$ = 88
category$ = 96
add_zero$ = 104
update_registry PROC					; COMDAT

; 224  : {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 225  :     PyObject *altkey, *zero = NULL;

  00018	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR zero$[rsp], 0

; 226  :     int rc;
; 227  : 
; 228  :     if (add_zero) {

  00021	83 7c 24 68 00	 cmp	 DWORD PTR add_zero$[rsp], 0
  00026	74 3e		 je	 SHORT $LN11@update_reg

; 229  :         zero = PyLong_FromLong(0);

  00028	33 c9		 xor	 ecx, ecx
  0002a	e8 00 00 00 00	 call	 PyLong_FromLong
  0002f	48 89 44 24 28	 mov	 QWORD PTR zero$[rsp], rax

; 230  :         if (zero == NULL)

  00034	48 83 7c 24 28
	00		 cmp	 QWORD PTR zero$[rsp], 0
  0003a	75 0a		 jne	 SHORT $LN10@update_reg

; 231  :             return -1;

  0003c	b8 ff ff ff ff	 mov	 eax, -1
  00041	e9 86 00 00 00	 jmp	 $LN12@update_reg
$LN10@update_reg:

; 232  :         altkey = PyTuple_Pack(3, text, category, zero);

  00046	4c 8b 4c 24 28	 mov	 r9, QWORD PTR zero$[rsp]
  0004b	4c 8b 44 24 60	 mov	 r8, QWORD PTR category$[rsp]
  00050	48 8b 54 24 58	 mov	 rdx, QWORD PTR text$[rsp]
  00055	b9 03 00 00 00	 mov	 ecx, 3
  0005a	e8 00 00 00 00	 call	 PyTuple_Pack
  0005f	48 89 44 24 30	 mov	 QWORD PTR altkey$[rsp], rax

; 233  :     }
; 234  :     else

  00064	eb 19		 jmp	 SHORT $LN9@update_reg
$LN11@update_reg:

; 235  :         altkey = PyTuple_Pack(2, text, category);

  00066	4c 8b 44 24 60	 mov	 r8, QWORD PTR category$[rsp]
  0006b	48 8b 54 24 58	 mov	 rdx, QWORD PTR text$[rsp]
  00070	b9 02 00 00 00	 mov	 ecx, 2
  00075	e8 00 00 00 00	 call	 PyTuple_Pack
  0007a	48 89 44 24 30	 mov	 QWORD PTR altkey$[rsp], rax
$LN9@update_reg:

; 236  : 
; 237  :     rc = already_warned(registry, altkey, 1);

  0007f	41 b8 01 00 00
	00		 mov	 r8d, 1
  00085	48 8b 54 24 30	 mov	 rdx, QWORD PTR altkey$[rsp]
  0008a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR registry$[rsp]
  0008f	e8 00 00 00 00	 call	 already_warned
  00094	89 44 24 20	 mov	 DWORD PTR rc$[rsp], eax
$LN8@update_reg:

; 238  :     Py_XDECREF(zero);

  00098	48 83 7c 24 28
	00		 cmp	 QWORD PTR zero$[rsp], 0
  0009e	74 0a		 je	 SHORT $LN5@update_reg
  000a0	48 8b 4c 24 28	 mov	 rcx, QWORD PTR zero$[rsp]
  000a5	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@update_reg:
  000aa	33 c0		 xor	 eax, eax
  000ac	85 c0		 test	 eax, eax
  000ae	75 e8		 jne	 SHORT $LN8@update_reg
$LN4@update_reg:

; 239  :     Py_XDECREF(altkey);

  000b0	48 83 7c 24 30
	00		 cmp	 QWORD PTR altkey$[rsp], 0
  000b6	74 0a		 je	 SHORT $LN1@update_reg
  000b8	48 8b 4c 24 30	 mov	 rcx, QWORD PTR altkey$[rsp]
  000bd	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@update_reg:
  000c2	33 c0		 xor	 eax, eax
  000c4	85 c0		 test	 eax, eax
  000c6	75 e8		 jne	 SHORT $LN4@update_reg

; 240  :     return rc;

  000c8	8b 44 24 20	 mov	 eax, DWORD PTR rc$[rsp]
$LN12@update_reg:

; 241  : }

  000cc	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000d0	c3		 ret	 0
update_registry ENDP
_TEXT	ENDS
PUBLIC	??_C@_01EEMJAFIK@?6?$AA@			; `string'
PUBLIC	??_C@_02LMMGGCAJ@?3?5?$AA@			; `string'
PUBLIC	??_C@_0BB@CFMPKPJP@lost?5sys?4stderr?6?$AA@	; `string'
PUBLIC	??_C@_06FJGNEBG@stderr?$AA@			; `string'
PUBLIC	??_C@_05OKMBPOFD@?3?$CFd?3?5?$AA@		; `string'
EXTRN	PyErr_Clear:PROC
EXTRN	_Py_DisplaySourceLine:PROC
EXTRN	PyFile_WriteString:PROC
EXTRN	PyFile_WriteObject:PROC
EXTRN	__imp_fprintf:PROC
EXTRN	__imp___iob_func:PROC
EXTRN	PySys_GetObject:PROC
EXTRN	_PyObject_GetAttrId:PROC
EXTRN	PyOS_snprintf:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$show_warning DD imagerel show_warning
	DD	imagerel show_warning+551
	DD	imagerel $unwind$show_warning
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$show_warning DD 021a01H
	DD	019011aH
xdata	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6?$AA@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6?$AA@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02LMMGGCAJ@?3?5?$AA@
CONST	SEGMENT
??_C@_02LMMGGCAJ@?3?5?$AA@ DB ': ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@CFMPKPJP@lost?5sys?4stderr?6?$AA@
CONST	SEGMENT
??_C@_0BB@CFMPKPJP@lost?5sys?4stderr?6?$AA@ DB 'lost sys.stderr', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06FJGNEBG@stderr?$AA@
CONST	SEGMENT
??_C@_06FJGNEBG@stderr?$AA@ DB 'stderr', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05OKMBPOFD@?3?$CFd?3?5?$AA@
CONST	SEGMENT
??_C@_05OKMBPOFD@?3?$CFd?3?5?$AA@ DB ':%d: ', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT show_warning
_TEXT	SEGMENT
f_stderr$ = 32
lineno_str$ = 48
name$ = 176
source_line_str$20566 = 184
filename$ = 208
lineno$ = 216
text$ = 224
category$ = 232
sourceline$ = 240
show_warning PROC					; COMDAT

; 246  : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H

; 247  :     PyObject *f_stderr;
; 248  :     PyObject *name;
; 249  :     char lineno_str[128];
; 250  :     _Py_IDENTIFIER(__name__);
; 251  : 
; 252  :     PyOS_snprintf(lineno_str, sizeof(lineno_str), ":%d: ", lineno);

  0001a	44 8b 8c 24 d8
	00 00 00	 mov	 r9d, DWORD PTR lineno$[rsp]
  00022	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_05OKMBPOFD@?3?$CFd?3?5?$AA@
  00029	ba 80 00 00 00	 mov	 edx, 128		; 00000080H
  0002e	48 8d 4c 24 30	 lea	 rcx, QWORD PTR lineno_str$[rsp]
  00033	e8 00 00 00 00	 call	 PyOS_snprintf

; 253  : 
; 254  :     name = _PyObject_GetAttrId(category, &PyId___name__);

  00038	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId___name__@?1??show_warning@@9@9
  0003d	8b c0		 mov	 eax, eax
  0003f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00045	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0004e	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00052	48 8b d0	 mov	 rdx, rax
  00055	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR category$[rsp]
  0005d	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00062	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR name$[rsp], rax

; 255  :     if (name == NULL)  /* XXX Can an object lack a '__name__' attribute? */

  0006a	48 83 bc 24 b0
	00 00 00 00	 cmp	 QWORD PTR name$[rsp], 0
  00073	75 05		 jne	 SHORT $LN13@show_warni

; 256  :         return;

  00075	e9 a5 01 00 00	 jmp	 $LN14@show_warni
$LN13@show_warni:

; 257  : 
; 258  :     f_stderr = PySys_GetObject("stderr");

  0007a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06FJGNEBG@stderr?$AA@
  00081	e8 00 00 00 00	 call	 PySys_GetObject
  00086	48 89 44 24 20	 mov	 QWORD PTR f_stderr$[rsp], rax

; 259  :     if (f_stderr == NULL) {

  0008b	48 83 7c 24 20
	00		 cmp	 QWORD PTR f_stderr$[rsp], 0
  00091	75 2c		 jne	 SHORT $LN12@show_warni

; 260  :         fprintf(stderr, "lost sys.stderr\n");

  00093	ff 15 00 00 00
	00		 call	 QWORD PTR __imp___iob_func
  00099	48 83 c0 60	 add	 rax, 96			; 00000060H
  0009d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BB@CFMPKPJP@lost?5sys?4stderr?6?$AA@
  000a4	48 8b c8	 mov	 rcx, rax
  000a7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fprintf

; 261  :         Py_DECREF(name);

  000ad	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR name$[rsp]
  000b5	e8 00 00 00 00	 call	 _Py_DecRef

; 262  :         return;

  000ba	e9 60 01 00 00	 jmp	 $LN14@show_warni
$LN12@show_warni:

; 263  :     }
; 264  : 
; 265  :     /* Print "filename:lineno: category: text\n" */
; 266  :     PyFile_WriteObject(filename, f_stderr, Py_PRINT_RAW);

  000bf	41 b8 01 00 00
	00		 mov	 r8d, 1
  000c5	48 8b 54 24 20	 mov	 rdx, QWORD PTR f_stderr$[rsp]
  000ca	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR filename$[rsp]
  000d2	e8 00 00 00 00	 call	 PyFile_WriteObject

; 267  :     PyFile_WriteString(lineno_str, f_stderr);

  000d7	48 8b 54 24 20	 mov	 rdx, QWORD PTR f_stderr$[rsp]
  000dc	48 8d 4c 24 30	 lea	 rcx, QWORD PTR lineno_str$[rsp]
  000e1	e8 00 00 00 00	 call	 PyFile_WriteString

; 268  :     PyFile_WriteObject(name, f_stderr, Py_PRINT_RAW);

  000e6	41 b8 01 00 00
	00		 mov	 r8d, 1
  000ec	48 8b 54 24 20	 mov	 rdx, QWORD PTR f_stderr$[rsp]
  000f1	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR name$[rsp]
  000f9	e8 00 00 00 00	 call	 PyFile_WriteObject

; 269  :     PyFile_WriteString(": ", f_stderr);

  000fe	48 8b 54 24 20	 mov	 rdx, QWORD PTR f_stderr$[rsp]
  00103	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02LMMGGCAJ@?3?5?$AA@
  0010a	e8 00 00 00 00	 call	 PyFile_WriteString

; 270  :     PyFile_WriteObject(text, f_stderr, Py_PRINT_RAW);

  0010f	41 b8 01 00 00
	00		 mov	 r8d, 1
  00115	48 8b 54 24 20	 mov	 rdx, QWORD PTR f_stderr$[rsp]
  0011a	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR text$[rsp]
  00122	e8 00 00 00 00	 call	 PyFile_WriteObject

; 271  :     PyFile_WriteString("\n", f_stderr);

  00127	48 8b 54 24 20	 mov	 rdx, QWORD PTR f_stderr$[rsp]
  0012c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01EEMJAFIK@?6?$AA@
  00133	e8 00 00 00 00	 call	 PyFile_WriteString
$LN11@show_warni:

; 272  :     Py_XDECREF(name);

  00138	48 83 bc 24 b0
	00 00 00 00	 cmp	 QWORD PTR name$[rsp], 0
  00141	74 0d		 je	 SHORT $LN8@show_warni
  00143	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR name$[rsp]
  0014b	e8 00 00 00 00	 call	 _Py_DecRef
$LN8@show_warni:
  00150	33 c0		 xor	 eax, eax
  00152	85 c0		 test	 eax, eax
  00154	75 e2		 jne	 SHORT $LN11@show_warni

; 273  : 
; 274  :     /* Print "  source_line\n" */
; 275  :     if (sourceline) {

  00156	48 83 bc 24 f0
	00 00 00 00	 cmp	 QWORD PTR sourceline$[rsp], 0
  0015f	0f 84 8f 00 00
	00		 je	 $LN7@show_warni

; 276  :         char *source_line_str = _PyUnicode_AsString(sourceline);

  00165	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR sourceline$[rsp]
  0016d	e8 00 00 00 00	 call	 PyUnicode_AsUTF8
  00172	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR source_line_str$20566[rsp], rax

; 277  :         if (source_line_str == NULL)

  0017a	48 83 bc 24 b8
	00 00 00 00	 cmp	 QWORD PTR source_line_str$20566[rsp], 0
  00183	75 05		 jne	 SHORT $LN6@show_warni

; 278  :                 return;

  00185	e9 95 00 00 00	 jmp	 $LN14@show_warni
$LN6@show_warni:
$LN5@show_warni:

; 279  :         while (*source_line_str == ' ' || *source_line_str == '\t' ||
; 280  :                 *source_line_str == '\014')

  0018a	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR source_line_str$20566[rsp]
  00192	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00195	83 f8 20	 cmp	 eax, 32			; 00000020H
  00198	74 20		 je	 SHORT $LN3@show_warni
  0019a	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR source_line_str$20566[rsp]
  001a2	0f be 00	 movsx	 eax, BYTE PTR [rax]
  001a5	83 f8 09	 cmp	 eax, 9
  001a8	74 10		 je	 SHORT $LN3@show_warni
  001aa	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR source_line_str$20566[rsp]
  001b2	0f be 00	 movsx	 eax, BYTE PTR [rax]
  001b5	83 f8 0c	 cmp	 eax, 12
  001b8	75 15		 jne	 SHORT $LN4@show_warni
$LN3@show_warni:

; 281  :             source_line_str++;

  001ba	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR source_line_str$20566[rsp]
  001c2	48 ff c0	 inc	 rax
  001c5	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR source_line_str$20566[rsp], rax
  001cd	eb bb		 jmp	 SHORT $LN5@show_warni
$LN4@show_warni:

; 282  : 
; 283  :         PyFile_WriteString(source_line_str, f_stderr);

  001cf	48 8b 54 24 20	 mov	 rdx, QWORD PTR f_stderr$[rsp]
  001d4	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR source_line_str$20566[rsp]
  001dc	e8 00 00 00 00	 call	 PyFile_WriteString

; 284  :         PyFile_WriteString("\n", f_stderr);

  001e1	48 8b 54 24 20	 mov	 rdx, QWORD PTR f_stderr$[rsp]
  001e6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01EEMJAFIK@?6?$AA@
  001ed	e8 00 00 00 00	 call	 PyFile_WriteString

; 285  :     }
; 286  :     else

  001f2	eb 26		 jmp	 SHORT $LN2@show_warni
$LN7@show_warni:

; 287  :         if (_Py_DisplaySourceLine(f_stderr, filename, lineno, 2) < 0)

  001f4	41 b9 02 00 00
	00		 mov	 r9d, 2
  001fa	44 8b 84 24 d8
	00 00 00	 mov	 r8d, DWORD PTR lineno$[rsp]
  00202	48 8b 94 24 d0
	00 00 00	 mov	 rdx, QWORD PTR filename$[rsp]
  0020a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR f_stderr$[rsp]
  0020f	e8 00 00 00 00	 call	 _Py_DisplaySourceLine
  00214	85 c0		 test	 eax, eax
  00216	7d 02		 jge	 SHORT $LN1@show_warni

; 288  :                 return;

  00218	eb 05		 jmp	 SHORT $LN14@show_warni
$LN1@show_warni:
$LN2@show_warni:

; 289  :     PyErr_Clear();

  0021a	e8 00 00 00 00	 call	 PyErr_Clear
$LN14@show_warni:

; 290  : }

  0021f	48 81 c4 c8 00
	00 00		 add	 rsp, 200		; 000000c8H
  00226	c3		 ret	 0
show_warning ENDP
_TEXT	ENDS
PUBLIC	??_C@_04GIEEDNNN@argv?$AA@			; `string'
PUBLIC	??_C@_08EMKMIFM@__main__?$AA@			; `string'
PUBLIC	??_C@_1FE@CFIKOGKL@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CK?$AAf?$AAi?$AAl?$AAe?$AAn?$AAa?$AAm?$AAe?$AA?$CJ?$AA?$CJ?$AA?9@ ; `string'
PUBLIC	??_C@_1DM@DGJPOJHD@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CK?$AAf?$AAi?$AAl?$AAe?$AAn?$AAa?$AAm?$AAe?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DG@CLLMLHHA@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CK?$AAf?$AAi?$AAl?$AAe?$AAn?$AAa?$AAm?$AAe?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_08PFHPBGLK@__file__?$AA@			; `string'
PUBLIC	??_C@_08OOGHEFMC@?$DMstring?$DO?$AA@		; `string'
PUBLIC	??_C@_0BE@BHHDGDE@__warningregistry__?$AA@	; `string'
PUBLIC	??_C@_1CM@FNEJBKGC@?$AAP?$AAy?$AAD?$AAi?$AAc?$AAt?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAg?$AAl?$AAo?$AAb?$AAa?$AAl?$AAs?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CA@GHOOIIIN@?$AAg?$AAl?$AAo?$AAb?$AAa?$AAl?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CM@LGNEAMGI@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AA_?$AAw?$AAa?$AAr?$AAn?$AAi?$AAn?$AAg?$AAs?$AA?4?$AAc?$AA?$AA@ ; `string'
EXTRN	PyList_GetItem:PROC
EXTRN	PyList_Size:PROC
EXTRN	_Py_ctype_tolower:BYTE
EXTRN	_PyUnicode_Ready:PROC
EXTRN	PyDict_SetItemString:PROC
EXTRN	PyDict_New:PROC
EXTRN	PyDict_GetItemString:PROC
EXTRN	__imp__wassert:PROC
EXTRN	PyFrame_GetLineNumber:PROC
EXTRN	PyThreadState_Get:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$setup_context DD imagerel setup_context
	DD	imagerel setup_context+3100
	DD	imagerel $unwind$setup_context
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$setup_context DD 021b01H
	DD	01b011bH
xdata	ENDS
;	COMDAT ??_C@_04GIEEDNNN@argv?$AA@
CONST	SEGMENT
??_C@_04GIEEDNNN@argv?$AA@ DB 'argv', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08EMKMIFM@__main__?$AA@
CONST	SEGMENT
??_C@_08EMKMIFM@__main__?$AA@ DB '__main__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1FE@CFIKOGKL@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CK?$AAf?$AAi?$AAl?$AAe?$AAn?$AAa?$AAm?$AAe?$AA?$CJ?$AA?$CJ?$AA?9@
CONST	SEGMENT
??_C@_1FE@CFIKOGKL@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CK?$AAf?$AAi?$AAl?$AAe?$AAn?$AAa?$AAm?$AAe?$AA?$CJ?$AA?$CJ?$AA?9@ DB '('
	DB	00H, '(', 00H, 'P', 00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H
	DB	'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'O', 00H, 'b', 00H, 'j'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, '*', 00H, ')', 00H, '(', 00H
	DB	'*', 00H, 'f', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'n', 00H, 'a'
	DB	00H, 'm', 00H, 'e', 00H, ')', 00H, ')', 00H, '-', 00H, '>', 00H
	DB	'd', 00H, 'a', 00H, 't', 00H, 'a', 00H, '.', 00H, 'a', 00H, 'n'
	DB	00H, 'y', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1DM@DGJPOJHD@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CK?$AAf?$AAi?$AAl?$AAe?$AAn?$AAa?$AAm?$AAe?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DM@DGJPOJHD@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CK?$AAf?$AAi?$AAl?$AAe?$AAn?$AAa?$AAm?$AAe?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'I', 00H, 'S', 00H, '_', 00H, 'R'
	DB	00H, 'E', 00H, 'A', 00H, 'D', 00H, 'Y', 00H, '(', 00H, '*', 00H
	DB	'f', 00H, 'i', 00H, 'l', 00H, 'e', 00H, 'n', 00H, 'a', 00H, 'm'
	DB	00H, 'e', 00H, ')', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1DG@CLLMLHHA@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CK?$AAf?$AAi?$AAl?$AAe?$AAn?$AAa?$AAm?$AAe?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DG@CLLMLHHA@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CK?$AAf?$AAi?$AAl?$AAe?$AAn?$AAa?$AAm?$AAe?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, '*', 00H, 'f', 00H, 'i', 00H, 'l', 00H
	DB	'e', 00H, 'n', 00H, 'a', 00H, 'm', 00H, 'e', 00H, ')', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_08PFHPBGLK@__file__?$AA@
CONST	SEGMENT
??_C@_08PFHPBGLK@__file__?$AA@ DB '__file__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08OOGHEFMC@?$DMstring?$DO?$AA@
CONST	SEGMENT
??_C@_08OOGHEFMC@?$DMstring?$DO?$AA@ DB '<string>', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@BHHDGDE@__warningregistry__?$AA@
CONST	SEGMENT
??_C@_0BE@BHHDGDE@__warningregistry__?$AA@ DB '__warningregistry__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CM@FNEJBKGC@?$AAP?$AAy?$AAD?$AAi?$AAc?$AAt?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAg?$AAl?$AAo?$AAb?$AAa?$AAl?$AAs?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CM@FNEJBKGC@?$AAP?$AAy?$AAD?$AAi?$AAc?$AAt?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAg?$AAl?$AAo?$AAb?$AAa?$AAl?$AAs?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'D', 00H, 'i', 00H, 'c', 00H, 't', 00H, '_', 00H
	DB	'C', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, '(', 00H, 'g'
	DB	00H, 'l', 00H, 'o', 00H, 'b', 00H, 'a', 00H, 'l', 00H, 's', 00H
	DB	')', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CA@GHOOIIIN@?$AAg?$AAl?$AAo?$AAb?$AAa?$AAl?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
CONST	SEGMENT
??_C@_1CA@GHOOIIIN@?$AAg?$AAl?$AAo?$AAb?$AAa?$AAl?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ DB 'g'
	DB	00H, 'l', 00H, 'o', 00H, 'b', 00H, 'a', 00H, 'l', 00H, 's', 00H
	DB	' ', 00H, '!', 00H, '=', 00H, ' ', 00H, 'N', 00H, 'U', 00H, 'L'
	DB	00H, 'L', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1CM@LGNEAMGI@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AA_?$AAw?$AAa?$AAr?$AAn?$AAi?$AAn?$AAg?$AAs?$AA?4?$AAc?$AA?$AA@
CONST	SEGMENT
??_C@_1CM@LGNEAMGI@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AA_?$AAw?$AAa?$AAr?$AAn?$AAi?$AAn?$AAg?$AAs?$AA?4?$AAc?$AA?$AA@ DB '.'
	DB	00H, '.', 00H, '\', 00H, 'P', 00H, 'y', 00H, 't', 00H, 'h', 00H
	DB	'o', 00H, 'n', 00H, '\', 00H, '_', 00H, 'w', 00H, 'a', 00H, 'r'
	DB	00H, 'n', 00H, 'i', 00H, 'n', 00H, 'g', 00H, 's', 00H, '.', 00H
	DB	'c', 00H, 00H, 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT setup_context
_TEXT	SEGMENT
globals$ = 32
f$ = 40
rc$20750 = 48
kind$20769 = 52
len$20768 = 56
data$20770 = 64
module_str$20852 = 72
argv$20858 = 80
is_true$20862 = 88
tv164 = 92
tv220 = 96
tv229 = 104
tv244 = 112
tv243 = 116
tv259 = 120
tv258 = 124
tv274 = 128
tv273 = 132
tv280 = 136
tv295 = 140
tv294 = 144
tv310 = 148
tv309 = 152
tv316 = 156
tv331 = 160
tv330 = 164
tv346 = 168
tv345 = 172
tv352 = 176
tv367 = 180
tv366 = 184
tv382 = 188
tv381 = 192
tv388 = 196
stack_level$ = 224
filename$ = 232
lineno$ = 240
module$ = 248
registry$ = 256
setup_context PROC					; COMDAT

; 452  : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec d8 00
	00 00		 sub	 rsp, 216		; 000000d8H

; 453  :     PyObject *globals;
; 454  : 
; 455  :     /* Setup globals and lineno. */
; 456  :     PyFrameObject *f = PyThreadState_GET()->frame;

  0001b	e8 00 00 00 00	 call	 PyThreadState_Get
  00020	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00024	48 89 44 24 28	 mov	 QWORD PTR f$[rsp], rax
$LN36@setup_cont:

; 457  :     while (--stack_level > 0 && f != NULL)

  00029	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR stack_level$[rsp]
  00031	48 ff c8	 dec	 rax
  00034	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR stack_level$[rsp], rax
  0003c	48 83 bc 24 e0
	00 00 00 00	 cmp	 QWORD PTR stack_level$[rsp], 0
  00045	7e 18		 jle	 SHORT $LN35@setup_cont
  00047	48 83 7c 24 28
	00		 cmp	 QWORD PTR f$[rsp], 0
  0004d	74 10		 je	 SHORT $LN35@setup_cont

; 458  :         f = f->f_back;

  0004f	48 8b 44 24 28	 mov	 rax, QWORD PTR f$[rsp]
  00054	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00058	48 89 44 24 28	 mov	 QWORD PTR f$[rsp], rax
  0005d	eb ca		 jmp	 SHORT $LN36@setup_cont
$LN35@setup_cont:

; 459  : 
; 460  :     if (f == NULL) {

  0005f	48 83 7c 24 28
	00		 cmp	 QWORD PTR f$[rsp], 0
  00065	75 22		 jne	 SHORT $LN34@setup_cont

; 461  :         globals = PyThreadState_Get()->interp->sysdict;

  00067	e8 00 00 00 00	 call	 PyThreadState_Get
  0006c	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00070	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00074	48 89 44 24 20	 mov	 QWORD PTR globals$[rsp], rax

; 462  :         *lineno = 1;

  00079	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR lineno$[rsp]
  00081	c7 00 01 00 00
	00		 mov	 DWORD PTR [rax], 1

; 463  :     }
; 464  :     else {

  00087	eb 25		 jmp	 SHORT $LN33@setup_cont
$LN34@setup_cont:

; 465  :         globals = f->f_globals;

  00089	48 8b 44 24 28	 mov	 rax, QWORD PTR f$[rsp]
  0008e	48 8b 80 88 00
	00 00		 mov	 rax, QWORD PTR [rax+136]
  00095	48 89 44 24 20	 mov	 QWORD PTR globals$[rsp], rax

; 466  :         *lineno = PyFrame_GetLineNumber(f);

  0009a	48 8b 4c 24 28	 mov	 rcx, QWORD PTR f$[rsp]
  0009f	e8 00 00 00 00	 call	 PyFrame_GetLineNumber
  000a4	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR lineno$[rsp]
  000ac	89 01		 mov	 DWORD PTR [rcx], eax
$LN33@setup_cont:

; 467  :     }
; 468  : 
; 469  :     *module = NULL;

  000ae	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR module$[rsp]
  000b6	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 470  : 
; 471  :     /* Setup registry. */
; 472  :     assert(globals != NULL);

  000bd	48 83 7c 24 20
	00		 cmp	 QWORD PTR globals$[rsp], 0
  000c3	75 1c		 jne	 SHORT $LN39@setup_cont
  000c5	41 b8 d8 01 00
	00		 mov	 r8d, 472		; 000001d8H
  000cb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CM@LGNEAMGI@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AA_?$AAw?$AAa?$AAr?$AAn?$AAi?$AAn?$AAg?$AAs?$AA?4?$AAc?$AA?$AA@
  000d2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CA@GHOOIIIN@?$AAg?$AAl?$AAo?$AAb?$AAa?$AAl?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
  000d9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000df	33 c0		 xor	 eax, eax
$LN39@setup_cont:

; 473  :     assert(PyDict_Check(globals));

  000e1	48 8b 44 24 20	 mov	 rax, QWORD PTR globals$[rsp]
  000e6	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000ea	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000f0	25 00 00 00 20	 and	 eax, 536870912		; 20000000H
  000f5	85 c0		 test	 eax, eax
  000f7	75 1c		 jne	 SHORT $LN40@setup_cont
  000f9	41 b8 d9 01 00
	00		 mov	 r8d, 473		; 000001d9H
  000ff	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CM@LGNEAMGI@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AA_?$AAw?$AAa?$AAr?$AAn?$AAi?$AAn?$AAg?$AAs?$AA?4?$AAc?$AA?$AA@
  00106	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@FNEJBKGC@?$AAP?$AAy?$AAD?$AAi?$AAc?$AAt?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAg?$AAl?$AAo?$AAb?$AAa?$AAl?$AAs?$AA?$CJ?$AA?$AA@
  0010d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00113	33 c0		 xor	 eax, eax
$LN40@setup_cont:

; 474  :     *registry = PyDict_GetItemString(globals, "__warningregistry__");

  00115	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@BHHDGDE@__warningregistry__?$AA@
  0011c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR globals$[rsp]
  00121	e8 00 00 00 00	 call	 PyDict_GetItemString
  00126	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR registry$[rsp]
  0012e	48 89 01	 mov	 QWORD PTR [rcx], rax

; 475  :     if (*registry == NULL) {

  00131	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR registry$[rsp]
  00139	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0013d	75 53		 jne	 SHORT $LN32@setup_cont

; 476  :         int rc;
; 477  : 
; 478  :         *registry = PyDict_New();

  0013f	e8 00 00 00 00	 call	 PyDict_New
  00144	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR registry$[rsp]
  0014c	48 89 01	 mov	 QWORD PTR [rcx], rax

; 479  :         if (*registry == NULL)

  0014f	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR registry$[rsp]
  00157	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0015b	75 07		 jne	 SHORT $LN31@setup_cont

; 480  :             return 0;

  0015d	33 c0		 xor	 eax, eax
  0015f	e9 b0 0a 00 00	 jmp	 $LN37@setup_cont
$LN31@setup_cont:

; 481  : 
; 482  :          rc = PyDict_SetItemString(globals, "__warningregistry__", *registry);

  00164	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR registry$[rsp]
  0016c	4c 8b 00	 mov	 r8, QWORD PTR [rax]
  0016f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@BHHDGDE@__warningregistry__?$AA@
  00176	48 8b 4c 24 20	 mov	 rcx, QWORD PTR globals$[rsp]
  0017b	e8 00 00 00 00	 call	 PyDict_SetItemString
  00180	89 44 24 30	 mov	 DWORD PTR rc$20750[rsp], eax

; 483  :          if (rc < 0)

  00184	83 7c 24 30 00	 cmp	 DWORD PTR rc$20750[rsp], 0
  00189	7d 05		 jge	 SHORT $LN30@setup_cont

; 484  :             goto handle_error;

  0018b	e9 3a 0a 00 00	 jmp	 $handle_error$20754
$LN30@setup_cont:

; 485  :     }
; 486  :     else

  00190	eb 10		 jmp	 SHORT $LN29@setup_cont
$LN32@setup_cont:

; 487  :         Py_INCREF(*registry);

  00192	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR registry$[rsp]
  0019a	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0019d	e8 00 00 00 00	 call	 _Py_IncRef
$LN29@setup_cont:

; 488  : 
; 489  :     /* Setup module. */
; 490  :     *module = PyDict_GetItemString(globals, "__name__");

  001a2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08BHKDPDAA@__name__?$AA@
  001a9	48 8b 4c 24 20	 mov	 rcx, QWORD PTR globals$[rsp]
  001ae	e8 00 00 00 00	 call	 PyDict_GetItemString
  001b3	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR module$[rsp]
  001bb	48 89 01	 mov	 QWORD PTR [rcx], rax

; 491  :     if (*module == NULL) {

  001be	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR module$[rsp]
  001c6	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  001ca	75 2c		 jne	 SHORT $LN28@setup_cont

; 492  :         *module = PyUnicode_FromString("<string>");

  001cc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08OOGHEFMC@?$DMstring?$DO?$AA@
  001d3	e8 00 00 00 00	 call	 PyUnicode_FromString
  001d8	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR module$[rsp]
  001e0	48 89 01	 mov	 QWORD PTR [rcx], rax

; 493  :         if (*module == NULL)

  001e3	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR module$[rsp]
  001eb	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  001ef	75 05		 jne	 SHORT $LN27@setup_cont

; 494  :             goto handle_error;

  001f1	e9 d4 09 00 00	 jmp	 $handle_error$20754
$LN27@setup_cont:

; 495  :     }
; 496  :     else

  001f6	eb 10		 jmp	 SHORT $LN26@setup_cont
$LN28@setup_cont:

; 497  :         Py_INCREF(*module);

  001f8	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR module$[rsp]
  00200	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00203	e8 00 00 00 00	 call	 _Py_IncRef
$LN26@setup_cont:

; 498  : 
; 499  :     /* Setup filename. */
; 500  :     *filename = PyDict_GetItemString(globals, "__file__");

  00208	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08PFHPBGLK@__file__?$AA@
  0020f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR globals$[rsp]
  00214	e8 00 00 00 00	 call	 PyDict_GetItemString
  00219	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR filename$[rsp]
  00221	48 89 01	 mov	 QWORD PTR [rcx], rax

; 501  :     if (*filename != NULL && PyUnicode_Check(*filename)) {

  00224	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR filename$[rsp]
  0022c	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00230	0f 84 1f 08 00
	00		 je	 $LN25@setup_cont
  00236	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR filename$[rsp]
  0023e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00241	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00245	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0024b	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00250	85 c0		 test	 eax, eax
  00252	0f 84 fd 07 00
	00		 je	 $LN25@setup_cont

; 502  :         Py_ssize_t len;
; 503  :         int kind;
; 504  :         void *data;
; 505  : 
; 506  :         if (PyUnicode_READY(*filename))

  00258	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR filename$[rsp]
  00260	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00263	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00267	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0026d	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00272	85 c0		 test	 eax, eax
  00274	75 1c		 jne	 SHORT $LN41@setup_cont
  00276	41 b8 fa 01 00
	00		 mov	 r8d, 506		; 000001faH
  0027c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CM@LGNEAMGI@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AA_?$AAw?$AAa?$AAr?$AAn?$AAi?$AAn?$AAg?$AAs?$AA?4?$AAc?$AA?$AA@
  00283	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DG@CLLMLHHA@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CK?$AAf?$AAi?$AAl?$AAe?$AAn?$AAa?$AAm?$AAe?$AA?$CJ?$AA?$AA@
  0028a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00290	33 c0		 xor	 eax, eax
$LN41@setup_cont:
  00292	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR filename$[rsp]
  0029a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0029d	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  002a0	c1 e8 07	 shr	 eax, 7
  002a3	83 e0 01	 and	 eax, 1
  002a6	85 c0		 test	 eax, eax
  002a8	74 0a		 je	 SHORT $LN42@setup_cont
  002aa	c7 44 24 5c 00
	00 00 00	 mov	 DWORD PTR tv164[rsp], 0
  002b2	eb 14		 jmp	 SHORT $LN43@setup_cont
$LN42@setup_cont:
  002b4	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR filename$[rsp]
  002bc	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  002bf	e8 00 00 00 00	 call	 _PyUnicode_Ready
  002c4	89 44 24 5c	 mov	 DWORD PTR tv164[rsp], eax
$LN43@setup_cont:
  002c8	83 7c 24 5c 00	 cmp	 DWORD PTR tv164[rsp], 0
  002cd	74 05		 je	 SHORT $LN24@setup_cont

; 507  :             goto handle_error;

  002cf	e9 f6 08 00 00	 jmp	 $handle_error$20754
$LN24@setup_cont:

; 508  : 
; 509  :         len = PyUnicode_GetLength(*filename);

  002d4	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR filename$[rsp]
  002dc	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  002df	e8 00 00 00 00	 call	 PyUnicode_GetLength
  002e4	48 89 44 24 38	 mov	 QWORD PTR len$20768[rsp], rax

; 510  :         kind = PyUnicode_KIND(*filename);

  002e9	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR filename$[rsp]
  002f1	48 8b 00	 mov	 rax, QWORD PTR [rax]
  002f4	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  002f8	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  002fe	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00303	85 c0		 test	 eax, eax
  00305	75 1c		 jne	 SHORT $LN44@setup_cont
  00307	41 b8 fe 01 00
	00		 mov	 r8d, 510		; 000001feH
  0030d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CM@LGNEAMGI@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AA_?$AAw?$AAa?$AAr?$AAn?$AAi?$AAn?$AAg?$AAs?$AA?4?$AAc?$AA?$AA@
  00314	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DG@CLLMLHHA@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CK?$AAf?$AAi?$AAl?$AAe?$AAn?$AAa?$AAm?$AAe?$AA?$CJ?$AA?$AA@
  0031b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00321	33 c0		 xor	 eax, eax
$LN44@setup_cont:
  00323	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR filename$[rsp]
  0032b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0032e	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00331	c1 e8 07	 shr	 eax, 7
  00334	83 e0 01	 and	 eax, 1
  00337	85 c0		 test	 eax, eax
  00339	75 1c		 jne	 SHORT $LN45@setup_cont
  0033b	41 b8 fe 01 00
	00		 mov	 r8d, 510		; 000001feH
  00341	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CM@LGNEAMGI@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AA_?$AAw?$AAa?$AAr?$AAn?$AAi?$AAn?$AAg?$AAs?$AA?4?$AAc?$AA?$AA@
  00348	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DM@DGJPOJHD@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CK?$AAf?$AAi?$AAl?$AAe?$AAn?$AAa?$AAm?$AAe?$AA?$CJ?$AA?$AA@
  0034f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00355	33 c0		 xor	 eax, eax
$LN45@setup_cont:
  00357	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR filename$[rsp]
  0035f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00362	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00365	c1 e8 02	 shr	 eax, 2
  00368	83 e0 07	 and	 eax, 7
  0036b	89 44 24 34	 mov	 DWORD PTR kind$20769[rsp], eax

; 511  :         data = PyUnicode_DATA(*filename);

  0036f	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR filename$[rsp]
  00377	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0037a	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0037e	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00384	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00389	85 c0		 test	 eax, eax
  0038b	75 1c		 jne	 SHORT $LN46@setup_cont
  0038d	41 b8 ff 01 00
	00		 mov	 r8d, 511		; 000001ffH
  00393	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CM@LGNEAMGI@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AA_?$AAw?$AAa?$AAr?$AAn?$AAi?$AAn?$AAg?$AAs?$AA?4?$AAc?$AA?$AA@
  0039a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DG@CLLMLHHA@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CK?$AAf?$AAi?$AAl?$AAe?$AAn?$AAa?$AAm?$AAe?$AA?$CJ?$AA?$AA@
  003a1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  003a7	33 c0		 xor	 eax, eax
$LN46@setup_cont:
  003a9	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR filename$[rsp]
  003b1	48 8b 00	 mov	 rax, QWORD PTR [rax]
  003b4	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  003b7	c1 e8 05	 shr	 eax, 5
  003ba	83 e0 01	 and	 eax, 1
  003bd	85 c0		 test	 eax, eax
  003bf	0f 84 c0 00 00
	00		 je	 $LN52@setup_cont
  003c5	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR filename$[rsp]
  003cd	48 8b 00	 mov	 rax, QWORD PTR [rax]
  003d0	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  003d4	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  003da	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  003df	85 c0		 test	 eax, eax
  003e1	75 1c		 jne	 SHORT $LN47@setup_cont
  003e3	41 b8 ff 01 00
	00		 mov	 r8d, 511		; 000001ffH
  003e9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CM@LGNEAMGI@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AA_?$AAw?$AAa?$AAr?$AAn?$AAi?$AAn?$AAg?$AAs?$AA?4?$AAc?$AA?$AA@
  003f0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DG@CLLMLHHA@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CK?$AAf?$AAi?$AAl?$AAe?$AAn?$AAa?$AAm?$AAe?$AA?$CJ?$AA?$AA@
  003f7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  003fd	33 c0		 xor	 eax, eax
$LN47@setup_cont:
  003ff	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR filename$[rsp]
  00407	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0040a	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0040d	c1 e8 07	 shr	 eax, 7
  00410	83 e0 01	 and	 eax, 1
  00413	85 c0		 test	 eax, eax
  00415	75 1c		 jne	 SHORT $LN48@setup_cont
  00417	41 b8 ff 01 00
	00		 mov	 r8d, 511		; 000001ffH
  0041d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CM@LGNEAMGI@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AA_?$AAw?$AAa?$AAr?$AAn?$AAi?$AAn?$AAg?$AAs?$AA?4?$AAc?$AA?$AA@
  00424	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DM@DGJPOJHD@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CK?$AAf?$AAi?$AAl?$AAe?$AAn?$AAa?$AAm?$AAe?$AA?$CJ?$AA?$AA@
  0042b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00431	33 c0		 xor	 eax, eax
$LN48@setup_cont:
  00433	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR filename$[rsp]
  0043b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0043e	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00441	c1 e8 06	 shr	 eax, 6
  00444	83 e0 01	 and	 eax, 1
  00447	85 c0		 test	 eax, eax
  00449	74 18		 je	 SHORT $LN49@setup_cont
  0044b	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR filename$[rsp]
  00453	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00456	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  0045c	48 89 44 24 60	 mov	 QWORD PTR tv220[rsp], rax
  00461	eb 16		 jmp	 SHORT $LN50@setup_cont
$LN49@setup_cont:
  00463	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR filename$[rsp]
  0046b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0046e	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  00474	48 89 44 24 60	 mov	 QWORD PTR tv220[rsp], rax
$LN50@setup_cont:
  00479	48 8b 44 24 60	 mov	 rax, QWORD PTR tv220[rsp]
  0047e	48 89 44 24 68	 mov	 QWORD PTR tv229[rsp], rax
  00483	eb 48		 jmp	 SHORT $LN53@setup_cont
$LN52@setup_cont:
  00485	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR filename$[rsp]
  0048d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00490	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  00498	75 1c		 jne	 SHORT $LN51@setup_cont
  0049a	41 b8 ff 01 00
	00		 mov	 r8d, 511		; 000001ffH
  004a0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CM@LGNEAMGI@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AA_?$AAw?$AAa?$AAr?$AAn?$AAi?$AAn?$AAg?$AAs?$AA?4?$AAc?$AA?$AA@
  004a7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FE@CFIKOGKL@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CK?$AAf?$AAi?$AAl?$AAe?$AAn?$AAa?$AAm?$AAe?$AA?$CJ?$AA?$CJ?$AA?9@
  004ae	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  004b4	33 c0		 xor	 eax, eax
$LN51@setup_cont:
  004b6	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR filename$[rsp]
  004be	48 8b 00	 mov	 rax, QWORD PTR [rax]
  004c1	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  004c8	48 89 44 24 68	 mov	 QWORD PTR tv229[rsp], rax
$LN53@setup_cont:
  004cd	48 8b 44 24 68	 mov	 rax, QWORD PTR tv229[rsp]
  004d2	48 89 44 24 40	 mov	 QWORD PTR data$20770[rsp], rax

; 512  : 
; 513  : #define ascii_lower(c) ((c <= 127) ? Py_TOLOWER(c) : 0)
; 514  :         /* if filename.lower().endswith((".pyc", ".pyo")): */
; 515  :         if (len >= 4 &&
; 516  :             PyUnicode_READ(kind, data, len-4) == '.' &&
; 517  :             ascii_lower(PyUnicode_READ(kind, data, len-3)) == 'p' &&
; 518  :             ascii_lower(PyUnicode_READ(kind, data, len-2)) == 'y' &&
; 519  :             (ascii_lower(PyUnicode_READ(kind, data, len-1)) == 'c' ||
; 520  :                 ascii_lower(PyUnicode_READ(kind, data, len-1)) == 'o'))

  004d7	48 83 7c 24 38
	04		 cmp	 QWORD PTR len$20768[rsp], 4
  004dd	0f 8c 5d 05 00
	00		 jl	 $LN23@setup_cont
  004e3	83 7c 24 34 01	 cmp	 DWORD PTR kind$20769[rsp], 1
  004e8	75 1a		 jne	 SHORT $LN56@setup_cont
  004ea	48 8b 44 24 38	 mov	 rax, QWORD PTR len$20768[rsp]
  004ef	48 8b 4c 24 40	 mov	 rcx, QWORD PTR data$20770[rsp]
  004f4	48 03 c8	 add	 rcx, rax
  004f7	48 8b c1	 mov	 rax, rcx
  004fa	0f b6 40 fc	 movzx	 eax, BYTE PTR [rax-4]
  004fe	89 44 24 70	 mov	 DWORD PTR tv244[rsp], eax
  00502	eb 36		 jmp	 SHORT $LN57@setup_cont
$LN56@setup_cont:
  00504	83 7c 24 34 02	 cmp	 DWORD PTR kind$20769[rsp], 2
  00509	75 15		 jne	 SHORT $LN54@setup_cont
  0050b	48 8b 44 24 40	 mov	 rax, QWORD PTR data$20770[rsp]
  00510	48 8b 4c 24 38	 mov	 rcx, QWORD PTR len$20768[rsp]
  00515	0f b7 44 48 f8	 movzx	 eax, WORD PTR [rax+rcx*2-8]
  0051a	89 44 24 74	 mov	 DWORD PTR tv243[rsp], eax
  0051e	eb 12		 jmp	 SHORT $LN55@setup_cont
$LN54@setup_cont:
  00520	48 8b 44 24 40	 mov	 rax, QWORD PTR data$20770[rsp]
  00525	48 8b 4c 24 38	 mov	 rcx, QWORD PTR len$20768[rsp]
  0052a	8b 44 88 f0	 mov	 eax, DWORD PTR [rax+rcx*4-16]
  0052e	89 44 24 74	 mov	 DWORD PTR tv243[rsp], eax
$LN55@setup_cont:
  00532	8b 44 24 74	 mov	 eax, DWORD PTR tv243[rsp]
  00536	89 44 24 70	 mov	 DWORD PTR tv244[rsp], eax
$LN57@setup_cont:
  0053a	83 7c 24 70 2e	 cmp	 DWORD PTR tv244[rsp], 46 ; 0000002eH
  0053f	0f 85 fb 04 00
	00		 jne	 $LN23@setup_cont
  00545	83 7c 24 34 01	 cmp	 DWORD PTR kind$20769[rsp], 1
  0054a	75 1a		 jne	 SHORT $LN60@setup_cont
  0054c	48 8b 44 24 38	 mov	 rax, QWORD PTR len$20768[rsp]
  00551	48 8b 4c 24 40	 mov	 rcx, QWORD PTR data$20770[rsp]
  00556	48 03 c8	 add	 rcx, rax
  00559	48 8b c1	 mov	 rax, rcx
  0055c	0f b6 40 fd	 movzx	 eax, BYTE PTR [rax-3]
  00560	89 44 24 78	 mov	 DWORD PTR tv259[rsp], eax
  00564	eb 36		 jmp	 SHORT $LN61@setup_cont
$LN60@setup_cont:
  00566	83 7c 24 34 02	 cmp	 DWORD PTR kind$20769[rsp], 2
  0056b	75 15		 jne	 SHORT $LN58@setup_cont
  0056d	48 8b 44 24 40	 mov	 rax, QWORD PTR data$20770[rsp]
  00572	48 8b 4c 24 38	 mov	 rcx, QWORD PTR len$20768[rsp]
  00577	0f b7 44 48 fa	 movzx	 eax, WORD PTR [rax+rcx*2-6]
  0057c	89 44 24 7c	 mov	 DWORD PTR tv258[rsp], eax
  00580	eb 12		 jmp	 SHORT $LN59@setup_cont
$LN58@setup_cont:
  00582	48 8b 44 24 40	 mov	 rax, QWORD PTR data$20770[rsp]
  00587	48 8b 4c 24 38	 mov	 rcx, QWORD PTR len$20768[rsp]
  0058c	8b 44 88 f4	 mov	 eax, DWORD PTR [rax+rcx*4-12]
  00590	89 44 24 7c	 mov	 DWORD PTR tv258[rsp], eax
$LN59@setup_cont:
  00594	8b 44 24 7c	 mov	 eax, DWORD PTR tv258[rsp]
  00598	89 44 24 78	 mov	 DWORD PTR tv259[rsp], eax
$LN61@setup_cont:
  0059c	83 7c 24 78 7f	 cmp	 DWORD PTR tv259[rsp], 127 ; 0000007fH
  005a1	0f 87 89 00 00
	00		 ja	 $LN66@setup_cont
  005a7	83 7c 24 34 01	 cmp	 DWORD PTR kind$20769[rsp], 1
  005ac	75 1d		 jne	 SHORT $LN64@setup_cont
  005ae	48 8b 44 24 38	 mov	 rax, QWORD PTR len$20768[rsp]
  005b3	48 8b 4c 24 40	 mov	 rcx, QWORD PTR data$20770[rsp]
  005b8	48 03 c8	 add	 rcx, rax
  005bb	48 8b c1	 mov	 rax, rcx
  005be	0f b6 40 fd	 movzx	 eax, BYTE PTR [rax-3]
  005c2	89 84 24 80 00
	00 00		 mov	 DWORD PTR tv274[rsp], eax
  005c9	eb 42		 jmp	 SHORT $LN65@setup_cont
$LN64@setup_cont:
  005cb	83 7c 24 34 02	 cmp	 DWORD PTR kind$20769[rsp], 2
  005d0	75 18		 jne	 SHORT $LN62@setup_cont
  005d2	48 8b 44 24 40	 mov	 rax, QWORD PTR data$20770[rsp]
  005d7	48 8b 4c 24 38	 mov	 rcx, QWORD PTR len$20768[rsp]
  005dc	0f b7 44 48 fa	 movzx	 eax, WORD PTR [rax+rcx*2-6]
  005e1	89 84 24 84 00
	00 00		 mov	 DWORD PTR tv273[rsp], eax
  005e8	eb 15		 jmp	 SHORT $LN63@setup_cont
$LN62@setup_cont:
  005ea	48 8b 44 24 40	 mov	 rax, QWORD PTR data$20770[rsp]
  005ef	48 8b 4c 24 38	 mov	 rcx, QWORD PTR len$20768[rsp]
  005f4	8b 44 88 f4	 mov	 eax, DWORD PTR [rax+rcx*4-12]
  005f8	89 84 24 84 00
	00 00		 mov	 DWORD PTR tv273[rsp], eax
$LN63@setup_cont:
  005ff	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR tv273[rsp]
  00606	89 84 24 80 00
	00 00		 mov	 DWORD PTR tv274[rsp], eax
$LN65@setup_cont:
  0060d	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR tv274[rsp]
  00614	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00619	0f b6 c0	 movzx	 eax, al
  0061c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_ctype_tolower
  00623	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00627	89 84 24 88 00
	00 00		 mov	 DWORD PTR tv280[rsp], eax
  0062e	eb 0b		 jmp	 SHORT $LN67@setup_cont
$LN66@setup_cont:
  00630	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv280[rsp], 0
$LN67@setup_cont:
  0063b	83 bc 24 88 00
	00 00 70	 cmp	 DWORD PTR tv280[rsp], 112 ; 00000070H
  00643	0f 85 f7 03 00
	00		 jne	 $LN23@setup_cont
  00649	83 7c 24 34 01	 cmp	 DWORD PTR kind$20769[rsp], 1
  0064e	75 1d		 jne	 SHORT $LN70@setup_cont
  00650	48 8b 44 24 38	 mov	 rax, QWORD PTR len$20768[rsp]
  00655	48 8b 4c 24 40	 mov	 rcx, QWORD PTR data$20770[rsp]
  0065a	48 03 c8	 add	 rcx, rax
  0065d	48 8b c1	 mov	 rax, rcx
  00660	0f b6 40 fe	 movzx	 eax, BYTE PTR [rax-2]
  00664	89 84 24 8c 00
	00 00		 mov	 DWORD PTR tv295[rsp], eax
  0066b	eb 42		 jmp	 SHORT $LN71@setup_cont
$LN70@setup_cont:
  0066d	83 7c 24 34 02	 cmp	 DWORD PTR kind$20769[rsp], 2
  00672	75 18		 jne	 SHORT $LN68@setup_cont
  00674	48 8b 44 24 40	 mov	 rax, QWORD PTR data$20770[rsp]
  00679	48 8b 4c 24 38	 mov	 rcx, QWORD PTR len$20768[rsp]
  0067e	0f b7 44 48 fc	 movzx	 eax, WORD PTR [rax+rcx*2-4]
  00683	89 84 24 90 00
	00 00		 mov	 DWORD PTR tv294[rsp], eax
  0068a	eb 15		 jmp	 SHORT $LN69@setup_cont
$LN68@setup_cont:
  0068c	48 8b 44 24 40	 mov	 rax, QWORD PTR data$20770[rsp]
  00691	48 8b 4c 24 38	 mov	 rcx, QWORD PTR len$20768[rsp]
  00696	8b 44 88 f8	 mov	 eax, DWORD PTR [rax+rcx*4-8]
  0069a	89 84 24 90 00
	00 00		 mov	 DWORD PTR tv294[rsp], eax
$LN69@setup_cont:
  006a1	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR tv294[rsp]
  006a8	89 84 24 8c 00
	00 00		 mov	 DWORD PTR tv295[rsp], eax
$LN71@setup_cont:
  006af	83 bc 24 8c 00
	00 00 7f	 cmp	 DWORD PTR tv295[rsp], 127 ; 0000007fH
  006b7	0f 87 89 00 00
	00		 ja	 $LN76@setup_cont
  006bd	83 7c 24 34 01	 cmp	 DWORD PTR kind$20769[rsp], 1
  006c2	75 1d		 jne	 SHORT $LN74@setup_cont
  006c4	48 8b 44 24 38	 mov	 rax, QWORD PTR len$20768[rsp]
  006c9	48 8b 4c 24 40	 mov	 rcx, QWORD PTR data$20770[rsp]
  006ce	48 03 c8	 add	 rcx, rax
  006d1	48 8b c1	 mov	 rax, rcx
  006d4	0f b6 40 fe	 movzx	 eax, BYTE PTR [rax-2]
  006d8	89 84 24 94 00
	00 00		 mov	 DWORD PTR tv310[rsp], eax
  006df	eb 42		 jmp	 SHORT $LN75@setup_cont
$LN74@setup_cont:
  006e1	83 7c 24 34 02	 cmp	 DWORD PTR kind$20769[rsp], 2
  006e6	75 18		 jne	 SHORT $LN72@setup_cont
  006e8	48 8b 44 24 40	 mov	 rax, QWORD PTR data$20770[rsp]
  006ed	48 8b 4c 24 38	 mov	 rcx, QWORD PTR len$20768[rsp]
  006f2	0f b7 44 48 fc	 movzx	 eax, WORD PTR [rax+rcx*2-4]
  006f7	89 84 24 98 00
	00 00		 mov	 DWORD PTR tv309[rsp], eax
  006fe	eb 15		 jmp	 SHORT $LN73@setup_cont
$LN72@setup_cont:
  00700	48 8b 44 24 40	 mov	 rax, QWORD PTR data$20770[rsp]
  00705	48 8b 4c 24 38	 mov	 rcx, QWORD PTR len$20768[rsp]
  0070a	8b 44 88 f8	 mov	 eax, DWORD PTR [rax+rcx*4-8]
  0070e	89 84 24 98 00
	00 00		 mov	 DWORD PTR tv309[rsp], eax
$LN73@setup_cont:
  00715	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR tv309[rsp]
  0071c	89 84 24 94 00
	00 00		 mov	 DWORD PTR tv310[rsp], eax
$LN75@setup_cont:
  00723	8b 84 24 94 00
	00 00		 mov	 eax, DWORD PTR tv310[rsp]
  0072a	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0072f	0f b6 c0	 movzx	 eax, al
  00732	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_ctype_tolower
  00739	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0073d	89 84 24 9c 00
	00 00		 mov	 DWORD PTR tv316[rsp], eax
  00744	eb 0b		 jmp	 SHORT $LN77@setup_cont
$LN76@setup_cont:
  00746	c7 84 24 9c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv316[rsp], 0
$LN77@setup_cont:
  00751	83 bc 24 9c 00
	00 00 79	 cmp	 DWORD PTR tv316[rsp], 121 ; 00000079H
  00759	0f 85 e1 02 00
	00		 jne	 $LN23@setup_cont
  0075f	83 7c 24 34 01	 cmp	 DWORD PTR kind$20769[rsp], 1
  00764	75 1d		 jne	 SHORT $LN80@setup_cont
  00766	48 8b 44 24 38	 mov	 rax, QWORD PTR len$20768[rsp]
  0076b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR data$20770[rsp]
  00770	48 03 c8	 add	 rcx, rax
  00773	48 8b c1	 mov	 rax, rcx
  00776	0f b6 40 ff	 movzx	 eax, BYTE PTR [rax-1]
  0077a	89 84 24 a0 00
	00 00		 mov	 DWORD PTR tv331[rsp], eax
  00781	eb 42		 jmp	 SHORT $LN81@setup_cont
$LN80@setup_cont:
  00783	83 7c 24 34 02	 cmp	 DWORD PTR kind$20769[rsp], 2
  00788	75 18		 jne	 SHORT $LN78@setup_cont
  0078a	48 8b 44 24 40	 mov	 rax, QWORD PTR data$20770[rsp]
  0078f	48 8b 4c 24 38	 mov	 rcx, QWORD PTR len$20768[rsp]
  00794	0f b7 44 48 fe	 movzx	 eax, WORD PTR [rax+rcx*2-2]
  00799	89 84 24 a4 00
	00 00		 mov	 DWORD PTR tv330[rsp], eax
  007a0	eb 15		 jmp	 SHORT $LN79@setup_cont
$LN78@setup_cont:
  007a2	48 8b 44 24 40	 mov	 rax, QWORD PTR data$20770[rsp]
  007a7	48 8b 4c 24 38	 mov	 rcx, QWORD PTR len$20768[rsp]
  007ac	8b 44 88 fc	 mov	 eax, DWORD PTR [rax+rcx*4-4]
  007b0	89 84 24 a4 00
	00 00		 mov	 DWORD PTR tv330[rsp], eax
$LN79@setup_cont:
  007b7	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR tv330[rsp]
  007be	89 84 24 a0 00
	00 00		 mov	 DWORD PTR tv331[rsp], eax
$LN81@setup_cont:
  007c5	83 bc 24 a0 00
	00 00 7f	 cmp	 DWORD PTR tv331[rsp], 127 ; 0000007fH
  007cd	0f 87 89 00 00
	00		 ja	 $LN86@setup_cont
  007d3	83 7c 24 34 01	 cmp	 DWORD PTR kind$20769[rsp], 1
  007d8	75 1d		 jne	 SHORT $LN84@setup_cont
  007da	48 8b 44 24 38	 mov	 rax, QWORD PTR len$20768[rsp]
  007df	48 8b 4c 24 40	 mov	 rcx, QWORD PTR data$20770[rsp]
  007e4	48 03 c8	 add	 rcx, rax
  007e7	48 8b c1	 mov	 rax, rcx
  007ea	0f b6 40 ff	 movzx	 eax, BYTE PTR [rax-1]
  007ee	89 84 24 a8 00
	00 00		 mov	 DWORD PTR tv346[rsp], eax
  007f5	eb 42		 jmp	 SHORT $LN85@setup_cont
$LN84@setup_cont:
  007f7	83 7c 24 34 02	 cmp	 DWORD PTR kind$20769[rsp], 2
  007fc	75 18		 jne	 SHORT $LN82@setup_cont
  007fe	48 8b 44 24 40	 mov	 rax, QWORD PTR data$20770[rsp]
  00803	48 8b 4c 24 38	 mov	 rcx, QWORD PTR len$20768[rsp]
  00808	0f b7 44 48 fe	 movzx	 eax, WORD PTR [rax+rcx*2-2]
  0080d	89 84 24 ac 00
	00 00		 mov	 DWORD PTR tv345[rsp], eax
  00814	eb 15		 jmp	 SHORT $LN83@setup_cont
$LN82@setup_cont:
  00816	48 8b 44 24 40	 mov	 rax, QWORD PTR data$20770[rsp]
  0081b	48 8b 4c 24 38	 mov	 rcx, QWORD PTR len$20768[rsp]
  00820	8b 44 88 fc	 mov	 eax, DWORD PTR [rax+rcx*4-4]
  00824	89 84 24 ac 00
	00 00		 mov	 DWORD PTR tv345[rsp], eax
$LN83@setup_cont:
  0082b	8b 84 24 ac 00
	00 00		 mov	 eax, DWORD PTR tv345[rsp]
  00832	89 84 24 a8 00
	00 00		 mov	 DWORD PTR tv346[rsp], eax
$LN85@setup_cont:
  00839	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR tv346[rsp]
  00840	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  00845	0f b6 c0	 movzx	 eax, al
  00848	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_ctype_tolower
  0084f	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00853	89 84 24 b0 00
	00 00		 mov	 DWORD PTR tv352[rsp], eax
  0085a	eb 0b		 jmp	 SHORT $LN87@setup_cont
$LN86@setup_cont:
  0085c	c7 84 24 b0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv352[rsp], 0
$LN87@setup_cont:
  00867	83 bc 24 b0 00
	00 00 63	 cmp	 DWORD PTR tv352[rsp], 99 ; 00000063H
  0086f	0f 84 16 01 00
	00		 je	 $LN22@setup_cont
  00875	83 7c 24 34 01	 cmp	 DWORD PTR kind$20769[rsp], 1
  0087a	75 1d		 jne	 SHORT $LN90@setup_cont
  0087c	48 8b 44 24 38	 mov	 rax, QWORD PTR len$20768[rsp]
  00881	48 8b 4c 24 40	 mov	 rcx, QWORD PTR data$20770[rsp]
  00886	48 03 c8	 add	 rcx, rax
  00889	48 8b c1	 mov	 rax, rcx
  0088c	0f b6 40 ff	 movzx	 eax, BYTE PTR [rax-1]
  00890	89 84 24 b4 00
	00 00		 mov	 DWORD PTR tv367[rsp], eax
  00897	eb 42		 jmp	 SHORT $LN91@setup_cont
$LN90@setup_cont:
  00899	83 7c 24 34 02	 cmp	 DWORD PTR kind$20769[rsp], 2
  0089e	75 18		 jne	 SHORT $LN88@setup_cont
  008a0	48 8b 44 24 40	 mov	 rax, QWORD PTR data$20770[rsp]
  008a5	48 8b 4c 24 38	 mov	 rcx, QWORD PTR len$20768[rsp]
  008aa	0f b7 44 48 fe	 movzx	 eax, WORD PTR [rax+rcx*2-2]
  008af	89 84 24 b8 00
	00 00		 mov	 DWORD PTR tv366[rsp], eax
  008b6	eb 15		 jmp	 SHORT $LN89@setup_cont
$LN88@setup_cont:
  008b8	48 8b 44 24 40	 mov	 rax, QWORD PTR data$20770[rsp]
  008bd	48 8b 4c 24 38	 mov	 rcx, QWORD PTR len$20768[rsp]
  008c2	8b 44 88 fc	 mov	 eax, DWORD PTR [rax+rcx*4-4]
  008c6	89 84 24 b8 00
	00 00		 mov	 DWORD PTR tv366[rsp], eax
$LN89@setup_cont:
  008cd	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR tv366[rsp]
  008d4	89 84 24 b4 00
	00 00		 mov	 DWORD PTR tv367[rsp], eax
$LN91@setup_cont:
  008db	83 bc 24 b4 00
	00 00 7f	 cmp	 DWORD PTR tv367[rsp], 127 ; 0000007fH
  008e3	0f 87 89 00 00
	00		 ja	 $LN96@setup_cont
  008e9	83 7c 24 34 01	 cmp	 DWORD PTR kind$20769[rsp], 1
  008ee	75 1d		 jne	 SHORT $LN94@setup_cont
  008f0	48 8b 44 24 38	 mov	 rax, QWORD PTR len$20768[rsp]
  008f5	48 8b 4c 24 40	 mov	 rcx, QWORD PTR data$20770[rsp]
  008fa	48 03 c8	 add	 rcx, rax
  008fd	48 8b c1	 mov	 rax, rcx
  00900	0f b6 40 ff	 movzx	 eax, BYTE PTR [rax-1]
  00904	89 84 24 bc 00
	00 00		 mov	 DWORD PTR tv382[rsp], eax
  0090b	eb 42		 jmp	 SHORT $LN95@setup_cont
$LN94@setup_cont:
  0090d	83 7c 24 34 02	 cmp	 DWORD PTR kind$20769[rsp], 2
  00912	75 18		 jne	 SHORT $LN92@setup_cont
  00914	48 8b 44 24 40	 mov	 rax, QWORD PTR data$20770[rsp]
  00919	48 8b 4c 24 38	 mov	 rcx, QWORD PTR len$20768[rsp]
  0091e	0f b7 44 48 fe	 movzx	 eax, WORD PTR [rax+rcx*2-2]
  00923	89 84 24 c0 00
	00 00		 mov	 DWORD PTR tv381[rsp], eax
  0092a	eb 15		 jmp	 SHORT $LN93@setup_cont
$LN92@setup_cont:
  0092c	48 8b 44 24 40	 mov	 rax, QWORD PTR data$20770[rsp]
  00931	48 8b 4c 24 38	 mov	 rcx, QWORD PTR len$20768[rsp]
  00936	8b 44 88 fc	 mov	 eax, DWORD PTR [rax+rcx*4-4]
  0093a	89 84 24 c0 00
	00 00		 mov	 DWORD PTR tv381[rsp], eax
$LN93@setup_cont:
  00941	8b 84 24 c0 00
	00 00		 mov	 eax, DWORD PTR tv381[rsp]
  00948	89 84 24 bc 00
	00 00		 mov	 DWORD PTR tv382[rsp], eax
$LN95@setup_cont:
  0094f	8b 84 24 bc 00
	00 00		 mov	 eax, DWORD PTR tv382[rsp]
  00956	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0095b	0f b6 c0	 movzx	 eax, al
  0095e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_ctype_tolower
  00965	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00969	89 84 24 c4 00
	00 00		 mov	 DWORD PTR tv388[rsp], eax
  00970	eb 0b		 jmp	 SHORT $LN97@setup_cont
$LN96@setup_cont:
  00972	c7 84 24 c4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv388[rsp], 0
$LN97@setup_cont:
  0097d	83 bc 24 c4 00
	00 00 6f	 cmp	 DWORD PTR tv388[rsp], 111 ; 0000006fH
  00985	0f 85 b5 00 00
	00		 jne	 $LN23@setup_cont
$LN22@setup_cont:

; 521  :         {
; 522  :             *filename = PyUnicode_Substring(*filename, 0,
; 523  :                                             PyUnicode_GET_LENGTH(*filename)-1);

  0098b	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR filename$[rsp]
  00993	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00996	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0099a	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  009a0	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  009a5	85 c0		 test	 eax, eax
  009a7	75 1c		 jne	 SHORT $LN98@setup_cont
  009a9	41 b8 0b 02 00
	00		 mov	 r8d, 523		; 0000020bH
  009af	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CM@LGNEAMGI@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AA_?$AAw?$AAa?$AAr?$AAn?$AAi?$AAn?$AAg?$AAs?$AA?4?$AAc?$AA?$AA@
  009b6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DG@CLLMLHHA@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CK?$AAf?$AAi?$AAl?$AAe?$AAn?$AAa?$AAm?$AAe?$AA?$CJ?$AA?$AA@
  009bd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  009c3	33 c0		 xor	 eax, eax
$LN98@setup_cont:
  009c5	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR filename$[rsp]
  009cd	48 8b 00	 mov	 rax, QWORD PTR [rax]
  009d0	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  009d3	c1 e8 07	 shr	 eax, 7
  009d6	83 e0 01	 and	 eax, 1
  009d9	85 c0		 test	 eax, eax
  009db	75 1c		 jne	 SHORT $LN99@setup_cont
  009dd	41 b8 0b 02 00
	00		 mov	 r8d, 523		; 0000020bH
  009e3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CM@LGNEAMGI@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AA_?$AAw?$AAa?$AAr?$AAn?$AAi?$AAn?$AAg?$AAs?$AA?4?$AAc?$AA?$AA@
  009ea	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DM@DGJPOJHD@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CK?$AAf?$AAi?$AAl?$AAe?$AAn?$AAa?$AAm?$AAe?$AA?$CJ?$AA?$AA@
  009f1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  009f7	33 c0		 xor	 eax, eax
$LN99@setup_cont:
  009f9	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR filename$[rsp]
  00a01	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00a04	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00a08	48 ff c8	 dec	 rax
  00a0b	4c 8b c0	 mov	 r8, rax
  00a0e	33 d2		 xor	 edx, edx
  00a10	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR filename$[rsp]
  00a18	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00a1b	e8 00 00 00 00	 call	 PyUnicode_Substring
  00a20	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR filename$[rsp]
  00a28	48 89 01	 mov	 QWORD PTR [rcx], rax

; 524  :             if (*filename == NULL)

  00a2b	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR filename$[rsp]
  00a33	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00a37	75 05		 jne	 SHORT $LN21@setup_cont

; 525  :                 goto handle_error;

  00a39	e9 8c 01 00 00	 jmp	 $handle_error$20754
$LN21@setup_cont:

; 526  :         }
; 527  :         else

  00a3e	eb 10		 jmp	 SHORT $LN20@setup_cont
$LN23@setup_cont:

; 528  :             Py_INCREF(*filename);

  00a40	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR filename$[rsp]
  00a48	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00a4b	e8 00 00 00 00	 call	 _Py_IncRef
$LN20@setup_cont:

; 529  :     }
; 530  :     else {

  00a50	e9 6e 01 00 00	 jmp	 $LN19@setup_cont
$LN25@setup_cont:

; 531  :         const char *module_str = _PyUnicode_AsString(*module);

  00a55	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR module$[rsp]
  00a5d	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00a60	e8 00 00 00 00	 call	 PyUnicode_AsUTF8
  00a65	48 89 44 24 48	 mov	 QWORD PTR module_str$20852[rsp], rax

; 532  :         *filename = NULL;

  00a6a	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR filename$[rsp]
  00a72	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 533  :         if (module_str == NULL)

  00a79	48 83 7c 24 48
	00		 cmp	 QWORD PTR module_str$20852[rsp], 0
  00a7f	75 05		 jne	 SHORT $LN18@setup_cont

; 534  :                 goto handle_error;

  00a81	e9 44 01 00 00	 jmp	 $handle_error$20754
$LN18@setup_cont:

; 535  :         if (strcmp(module_str, "__main__") == 0) {

  00a86	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08EMKMIFM@__main__?$AA@
  00a8d	48 8b 4c 24 48	 mov	 rcx, QWORD PTR module_str$20852[rsp]
  00a92	e8 00 00 00 00	 call	 strcmp
  00a97	85 c0		 test	 eax, eax
  00a99	0f 85 f0 00 00
	00		 jne	 $LN17@setup_cont

; 536  :             PyObject *argv = PySys_GetObject("argv");

  00a9f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04GIEEDNNN@argv?$AA@
  00aa6	e8 00 00 00 00	 call	 PySys_GetObject
  00aab	48 89 44 24 50	 mov	 QWORD PTR argv$20858[rsp], rax

; 537  :             if (argv != NULL && PyList_Size(argv) > 0) {

  00ab0	48 83 7c 24 50
	00		 cmp	 QWORD PTR argv$20858[rsp], 0
  00ab6	0f 84 ac 00 00
	00		 je	 $LN16@setup_cont
  00abc	48 8b 4c 24 50	 mov	 rcx, QWORD PTR argv$20858[rsp]
  00ac1	e8 00 00 00 00	 call	 PyList_Size
  00ac6	48 85 c0	 test	 rax, rax
  00ac9	0f 8e 99 00 00
	00		 jle	 $LN16@setup_cont

; 538  :                 int is_true;
; 539  :                 *filename = PyList_GetItem(argv, 0);

  00acf	33 d2		 xor	 edx, edx
  00ad1	48 8b 4c 24 50	 mov	 rcx, QWORD PTR argv$20858[rsp]
  00ad6	e8 00 00 00 00	 call	 PyList_GetItem
  00adb	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR filename$[rsp]
  00ae3	48 89 01	 mov	 QWORD PTR [rcx], rax

; 540  :                 Py_INCREF(*filename);

  00ae6	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR filename$[rsp]
  00aee	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00af1	e8 00 00 00 00	 call	 _Py_IncRef

; 541  :                 /* If sys.argv[0] is false, then use '__main__'. */
; 542  :                 is_true = PyObject_IsTrue(*filename);

  00af6	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR filename$[rsp]
  00afe	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00b01	e8 00 00 00 00	 call	 PyObject_IsTrue
  00b06	89 44 24 58	 mov	 DWORD PTR is_true$20862[rsp], eax

; 543  :                 if (is_true < 0) {

  00b0a	83 7c 24 58 00	 cmp	 DWORD PTR is_true$20862[rsp], 0
  00b0f	7d 17		 jge	 SHORT $LN15@setup_cont

; 544  :                     Py_DECREF(*filename);

  00b11	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR filename$[rsp]
  00b19	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00b1c	e8 00 00 00 00	 call	 _Py_DecRef

; 545  :                     goto handle_error;

  00b21	e9 a4 00 00 00	 jmp	 $handle_error$20754
  00b26	eb 3e		 jmp	 SHORT $LN14@setup_cont
$LN15@setup_cont:

; 546  :                 }
; 547  :                 else if (!is_true) {

  00b28	83 7c 24 58 00	 cmp	 DWORD PTR is_true$20862[rsp], 0
  00b2d	75 37		 jne	 SHORT $LN13@setup_cont

; 548  :                     Py_DECREF(*filename);

  00b2f	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR filename$[rsp]
  00b37	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00b3a	e8 00 00 00 00	 call	 _Py_DecRef

; 549  :                     *filename = PyUnicode_FromString("__main__");

  00b3f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08EMKMIFM@__main__?$AA@
  00b46	e8 00 00 00 00	 call	 PyUnicode_FromString
  00b4b	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR filename$[rsp]
  00b53	48 89 01	 mov	 QWORD PTR [rcx], rax

; 550  :                     if (*filename == NULL)

  00b56	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR filename$[rsp]
  00b5e	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00b62	75 02		 jne	 SHORT $LN12@setup_cont

; 551  :                         goto handle_error;

  00b64	eb 64		 jmp	 SHORT $handle_error$20754
$LN12@setup_cont:
$LN13@setup_cont:
$LN14@setup_cont:

; 552  :                 }
; 553  :             }
; 554  :             else {

  00b66	eb 27		 jmp	 SHORT $LN11@setup_cont
$LN16@setup_cont:

; 555  :                 /* embedded interpreters don't have sys.argv, see bug #839151 */
; 556  :                 *filename = PyUnicode_FromString("__main__");

  00b68	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08EMKMIFM@__main__?$AA@
  00b6f	e8 00 00 00 00	 call	 PyUnicode_FromString
  00b74	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR filename$[rsp]
  00b7c	48 89 01	 mov	 QWORD PTR [rcx], rax

; 557  :                     if (*filename == NULL)

  00b7f	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR filename$[rsp]
  00b87	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00b8b	75 02		 jne	 SHORT $LN10@setup_cont

; 558  :                         goto handle_error;

  00b8d	eb 3b		 jmp	 SHORT $handle_error$20754
$LN10@setup_cont:
$LN11@setup_cont:
$LN17@setup_cont:

; 559  :             }
; 560  :         }
; 561  :         if (*filename == NULL) {

  00b8f	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR filename$[rsp]
  00b97	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00b9b	75 26		 jne	 SHORT $LN9@setup_cont

; 562  :             *filename = *module;

  00b9d	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR filename$[rsp]
  00ba5	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR module$[rsp]
  00bad	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00bb0	48 89 08	 mov	 QWORD PTR [rax], rcx

; 563  :             Py_INCREF(*filename);

  00bb3	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR filename$[rsp]
  00bbb	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00bbe	e8 00 00 00 00	 call	 _Py_IncRef
$LN9@setup_cont:
$LN19@setup_cont:

; 564  :         }
; 565  :     }
; 566  : 
; 567  :     return 1;

  00bc3	b8 01 00 00 00	 mov	 eax, 1
  00bc8	eb 4a		 jmp	 SHORT $LN37@setup_cont
$handle_error$20754:
$LN8@setup_cont:

; 568  : 
; 569  :  handle_error:
; 570  :     /* filename not XDECREF'ed here as there is no way to jump here with a
; 571  :        dangling reference. */
; 572  :     Py_XDECREF(*registry);

  00bca	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR registry$[rsp]
  00bd2	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00bd6	74 10		 je	 SHORT $LN5@setup_cont
  00bd8	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR registry$[rsp]
  00be0	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00be3	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@setup_cont:
  00be8	33 c0		 xor	 eax, eax
  00bea	85 c0		 test	 eax, eax
  00bec	75 dc		 jne	 SHORT $LN8@setup_cont
$LN4@setup_cont:

; 573  :     Py_XDECREF(*module);

  00bee	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR module$[rsp]
  00bf6	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00bfa	74 10		 je	 SHORT $LN1@setup_cont
  00bfc	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR module$[rsp]
  00c04	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00c07	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@setup_cont:
  00c0c	33 c0		 xor	 eax, eax
  00c0e	85 c0		 test	 eax, eax
  00c10	75 dc		 jne	 SHORT $LN4@setup_cont

; 574  :     return 0;

  00c12	33 c0		 xor	 eax, eax
$LN37@setup_cont:

; 575  : }

  00c14	48 81 c4 d8 00
	00 00		 add	 rsp, 216		; 000000d8H
  00c1b	c3		 ret	 0
setup_context ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@PADOMILC@__loader__?$AA@		; `string'
PUBLIC	??_C@_0BH@FGPALGEL@OOOi?$HMOOO?3warn_explicit?$AA@ ; `string'
EXTRN	PyObject_CallMethodObjArgs:PROC
EXTRN	_PyObject_HasAttrId:PROC
EXTRN	_PyUnicode_FromId:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$warnings_warn_explicit DD imagerel warnings_warn_explicit
	DD	imagerel warnings_warn_explicit+872
	DD	imagerel $unwind$warnings_warn_explicit
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$warnings_warn_explicit DD 021601H
	DD	01b0116H
xdata	ENDS
;	COMDAT ??_C@_0L@PADOMILC@__loader__?$AA@
CONST	SEGMENT
??_C@_0L@PADOMILC@__loader__?$AA@ DB '__loader__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@FGPALGEL@OOOi?$HMOOO?3warn_explicit?$AA@
CONST	SEGMENT
??_C@_0BH@FGPALGEL@OOOi?$HMOOO?3warn_explicit?$AA@ DB 'OOOi|OOO:warn_expl'
	DB	'icit', 00H					; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT warnings_warn_explicit
_TEXT	SEGMENT
lineno$ = 96
module_globals$ = 104
category$ = 112
module$ = 120
registry$ = 128
message$ = 136
filename$ = 144
source_line$20987 = 152
returned$20988 = 160
tmp$20982 = 168
source_list$20986 = 176
module_name$20984 = 184
loader$20983 = 192
source$20985 = 200
self$ = 224
args$ = 232
kwds$ = 240
warnings_warn_explicit PROC				; COMDAT

; 641  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 81 ec d8 00
	00 00		 sub	 rsp, 216		; 000000d8H

; 642  :     static char *kwd_list[] = {"message", "category", "filename", "lineno",
; 643  :                                 "module", "registry", "module_globals", 0};
; 644  :     PyObject *message;
; 645  :     PyObject *category;
; 646  :     PyObject *filename;
; 647  :     int lineno;
; 648  :     PyObject *module = NULL;

  00016	48 c7 44 24 78
	00 00 00 00	 mov	 QWORD PTR module$[rsp], 0

; 649  :     PyObject *registry = NULL;

  0001f	48 c7 84 24 80
	00 00 00 00 00
	00 00		 mov	 QWORD PTR registry$[rsp], 0

; 650  :     PyObject *module_globals = NULL;

  0002b	48 c7 44 24 68
	00 00 00 00	 mov	 QWORD PTR module_globals$[rsp], 0

; 651  : 
; 652  :     if (!PyArg_ParseTupleAndKeywords(args, kwds, "OOOi|OOO:warn_explicit",
; 653  :                 kwd_list, &message, &category, &filename, &lineno, &module,
; 654  :                 &registry, &module_globals))

  00034	48 8d 44 24 68	 lea	 rax, QWORD PTR module_globals$[rsp]
  00039	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0003e	48 8d 84 24 80
	00 00 00	 lea	 rax, QWORD PTR registry$[rsp]
  00046	48 89 44 24 48	 mov	 QWORD PTR [rsp+72], rax
  0004b	48 8d 44 24 78	 lea	 rax, QWORD PTR module$[rsp]
  00050	48 89 44 24 40	 mov	 QWORD PTR [rsp+64], rax
  00055	48 8d 44 24 60	 lea	 rax, QWORD PTR lineno$[rsp]
  0005a	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  0005f	48 8d 84 24 90
	00 00 00	 lea	 rax, QWORD PTR filename$[rsp]
  00067	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  0006c	48 8d 44 24 70	 lea	 rax, QWORD PTR category$[rsp]
  00071	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00076	48 8d 84 24 88
	00 00 00	 lea	 rax, QWORD PTR message$[rsp]
  0007e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00083	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?kwd_list@?1??warnings_warn_explicit@@9@9
  0008a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BH@FGPALGEL@OOOi?$HMOOO?3warn_explicit?$AA@
  00091	48 8b 94 24 f0
	00 00 00	 mov	 rdx, QWORD PTR kwds$[rsp]
  00099	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  000a1	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  000a6	85 c0		 test	 eax, eax
  000a8	75 07		 jne	 SHORT $LN12@warnings_w@2

; 655  :         return NULL;

  000aa	33 c0		 xor	 eax, eax
  000ac	e9 af 02 00 00	 jmp	 $LN13@warnings_w@2
$LN12@warnings_w@2:

; 656  : 
; 657  :     if (module_globals) {

  000b1	48 83 7c 24 68
	00		 cmp	 QWORD PTR module_globals$[rsp], 0
  000b7	0f 84 64 02 00
	00		 je	 $LN11@warnings_w@2

; 658  :         _Py_IDENTIFIER(get_source);
; 659  :         _Py_IDENTIFIER(splitlines);
; 660  :         PyObject *tmp;
; 661  :         PyObject *loader;
; 662  :         PyObject *module_name;
; 663  :         PyObject *source;
; 664  :         PyObject *source_list;
; 665  :         PyObject *source_line;
; 666  :         PyObject *returned;
; 667  : 
; 668  :         if ((tmp = _PyUnicode_FromId(&PyId_get_source)) == NULL)

  000bd	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId_get_source@?2??warnings_warn_explicit@@9@9
  000c2	8b c0		 mov	 eax, eax
  000c4	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  000ca	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  000d3	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  000d7	48 8b c8	 mov	 rcx, rax
  000da	e8 00 00 00 00	 call	 _PyUnicode_FromId
  000df	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR tmp$20982[rsp], rax
  000e7	48 83 bc 24 a8
	00 00 00 00	 cmp	 QWORD PTR tmp$20982[rsp], 0
  000f0	75 07		 jne	 SHORT $LN10@warnings_w@2

; 669  :             return NULL;

  000f2	33 c0		 xor	 eax, eax
  000f4	e9 67 02 00 00	 jmp	 $LN13@warnings_w@2
$LN10@warnings_w@2:

; 670  :         if ((tmp = _PyUnicode_FromId(&PyId_splitlines)) == NULL)

  000f9	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId_splitlines@?2??warnings_warn_explicit@@9@9
  000fe	8b c0		 mov	 eax, eax
  00100	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00106	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0010f	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00113	48 8b c8	 mov	 rcx, rax
  00116	e8 00 00 00 00	 call	 _PyUnicode_FromId
  0011b	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR tmp$20982[rsp], rax
  00123	48 83 bc 24 a8
	00 00 00 00	 cmp	 QWORD PTR tmp$20982[rsp], 0
  0012c	75 07		 jne	 SHORT $LN9@warnings_w@2

; 671  :             return NULL;

  0012e	33 c0		 xor	 eax, eax
  00130	e9 2b 02 00 00	 jmp	 $LN13@warnings_w@2
$LN9@warnings_w@2:

; 672  : 
; 673  :         /* Check/get the requisite pieces needed for the loader. */
; 674  :         loader = PyDict_GetItemString(module_globals, "__loader__");

  00135	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@PADOMILC@__loader__?$AA@
  0013c	48 8b 4c 24 68	 mov	 rcx, QWORD PTR module_globals$[rsp]
  00141	e8 00 00 00 00	 call	 PyDict_GetItemString
  00146	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR loader$20983[rsp], rax

; 675  :         module_name = PyDict_GetItemString(module_globals, "__name__");

  0014e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08BHKDPDAA@__name__?$AA@
  00155	48 8b 4c 24 68	 mov	 rcx, QWORD PTR module_globals$[rsp]
  0015a	e8 00 00 00 00	 call	 PyDict_GetItemString
  0015f	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR module_name$20984[rsp], rax

; 676  : 
; 677  :         if (loader == NULL || module_name == NULL)

  00167	48 83 bc 24 c0
	00 00 00 00	 cmp	 QWORD PTR loader$20983[rsp], 0
  00170	74 0b		 je	 SHORT $LN7@warnings_w@2
  00172	48 83 bc 24 b8
	00 00 00 00	 cmp	 QWORD PTR module_name$20984[rsp], 0
  0017b	75 05		 jne	 SHORT $LN8@warnings_w@2
$LN7@warnings_w@2:

; 678  :             goto standard_call;

  0017d	e9 9f 01 00 00	 jmp	 $standard_call$21000
$LN8@warnings_w@2:

; 679  : 
; 680  :         /* Make sure the loader implements the optional get_source() method. */
; 681  :         if (!_PyObject_HasAttrId(loader, &PyId_get_source))

  00182	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId_get_source@?2??warnings_warn_explicit@@9@9
  00187	8b c0		 mov	 eax, eax
  00189	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0018f	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00198	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0019c	48 8b d0	 mov	 rdx, rax
  0019f	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR loader$20983[rsp]
  001a7	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  001ac	85 c0		 test	 eax, eax
  001ae	75 05		 jne	 SHORT $LN6@warnings_w@2

; 682  :                 goto standard_call;

  001b0	e9 6c 01 00 00	 jmp	 $standard_call$21000
$LN6@warnings_w@2:

; 683  :         /* Call get_source() to get the source code. */
; 684  :         source = PyObject_CallMethodObjArgs(loader, PyId_get_source.object,
; 685  :                                             module_name, NULL);

  001b5	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId_get_source@?2??warnings_warn_explicit@@9@9
  001ba	8b c0		 mov	 eax, eax
  001bc	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  001c2	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  001cb	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  001cf	45 33 c9	 xor	 r9d, r9d
  001d2	4c 8b 84 24 b8
	00 00 00	 mov	 r8, QWORD PTR module_name$20984[rsp]
  001da	48 8b 54 01 10	 mov	 rdx, QWORD PTR [rcx+rax+16]
  001df	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR loader$20983[rsp]
  001e7	e8 00 00 00 00	 call	 PyObject_CallMethodObjArgs
  001ec	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR source$20985[rsp], rax

; 686  :         if (!source)

  001f4	48 83 bc 24 c8
	00 00 00 00	 cmp	 QWORD PTR source$20985[rsp], 0
  001fd	75 09		 jne	 SHORT $LN5@warnings_w@2

; 687  :             return NULL;

  001ff	33 c0		 xor	 eax, eax
  00201	e9 5a 01 00 00	 jmp	 $LN13@warnings_w@2
  00206	eb 22		 jmp	 SHORT $LN4@warnings_w@2
$LN5@warnings_w@2:

; 688  :         else if (source == Py_None) {

  00208	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0020f	48 39 84 24 c8
	00 00 00	 cmp	 QWORD PTR source$20985[rsp], rax
  00217	75 11		 jne	 SHORT $LN3@warnings_w@2

; 689  :             Py_DECREF(Py_None);

  00219	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00220	e8 00 00 00 00	 call	 _Py_DecRef

; 690  :             goto standard_call;

  00225	e9 f7 00 00 00	 jmp	 $standard_call$21000
$LN3@warnings_w@2:
$LN4@warnings_w@2:

; 691  :         }
; 692  : 
; 693  :         /* Split the source into lines. */
; 694  :         source_list = PyObject_CallMethodObjArgs(source,
; 695  :                                                  PyId_splitlines.object,
; 696  :                                                  NULL);

  0022a	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId_splitlines@?2??warnings_warn_explicit@@9@9
  0022f	8b c0		 mov	 eax, eax
  00231	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00237	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00240	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  00244	45 33 c0	 xor	 r8d, r8d
  00247	48 8b 54 01 10	 mov	 rdx, QWORD PTR [rcx+rax+16]
  0024c	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR source$20985[rsp]
  00254	e8 00 00 00 00	 call	 PyObject_CallMethodObjArgs
  00259	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR source_list$20986[rsp], rax

; 697  :         Py_DECREF(source);

  00261	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR source$20985[rsp]
  00269	e8 00 00 00 00	 call	 _Py_DecRef

; 698  :         if (!source_list)

  0026e	48 83 bc 24 b0
	00 00 00 00	 cmp	 QWORD PTR source_list$20986[rsp], 0
  00277	75 07		 jne	 SHORT $LN2@warnings_w@2

; 699  :             return NULL;

  00279	33 c0		 xor	 eax, eax
  0027b	e9 e0 00 00 00	 jmp	 $LN13@warnings_w@2
$LN2@warnings_w@2:

; 700  : 
; 701  :         /* Get the source line. */
; 702  :         source_line = PyList_GetItem(source_list, lineno-1);

  00280	8b 44 24 60	 mov	 eax, DWORD PTR lineno$[rsp]
  00284	ff c8		 dec	 eax
  00286	48 98		 cdqe
  00288	48 8b d0	 mov	 rdx, rax
  0028b	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR source_list$20986[rsp]
  00293	e8 00 00 00 00	 call	 PyList_GetItem
  00298	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR source_line$20987[rsp], rax

; 703  :         if (!source_line) {

  002a0	48 83 bc 24 98
	00 00 00 00	 cmp	 QWORD PTR source_line$20987[rsp], 0
  002a9	75 14		 jne	 SHORT $LN1@warnings_w@2

; 704  :             Py_DECREF(source_list);

  002ab	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR source_list$20986[rsp]
  002b3	e8 00 00 00 00	 call	 _Py_DecRef

; 705  :             return NULL;

  002b8	33 c0		 xor	 eax, eax
  002ba	e9 a1 00 00 00	 jmp	 $LN13@warnings_w@2
$LN1@warnings_w@2:

; 706  :         }
; 707  : 
; 708  :         /* Handle the warning. */
; 709  :         returned = warn_explicit(category, message, filename, lineno, module,
; 710  :                             registry, source_line);

  002bf	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR source_line$20987[rsp]
  002c7	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  002cc	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR registry$[rsp]
  002d4	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  002d9	48 8b 44 24 78	 mov	 rax, QWORD PTR module$[rsp]
  002de	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  002e3	44 8b 4c 24 60	 mov	 r9d, DWORD PTR lineno$[rsp]
  002e8	4c 8b 84 24 90
	00 00 00	 mov	 r8, QWORD PTR filename$[rsp]
  002f0	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR message$[rsp]
  002f8	48 8b 4c 24 70	 mov	 rcx, QWORD PTR category$[rsp]
  002fd	e8 00 00 00 00	 call	 warn_explicit
  00302	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR returned$20988[rsp], rax

; 711  :         Py_DECREF(source_list);

  0030a	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR source_list$20986[rsp]
  00312	e8 00 00 00 00	 call	 _Py_DecRef

; 712  :         return returned;

  00317	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR returned$20988[rsp]
  0031f	eb 3f		 jmp	 SHORT $LN13@warnings_w@2
$LN11@warnings_w@2:
$standard_call$21000:

; 713  :     }
; 714  : 
; 715  :  standard_call:
; 716  :     return warn_explicit(category, message, filename, lineno, module,
; 717  :                                 registry, NULL);

  00321	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR [rsp+48], 0
  0032a	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR registry$[rsp]
  00332	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00337	48 8b 44 24 78	 mov	 rax, QWORD PTR module$[rsp]
  0033c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00341	44 8b 4c 24 60	 mov	 r9d, DWORD PTR lineno$[rsp]
  00346	4c 8b 84 24 90
	00 00 00	 mov	 r8, QWORD PTR filename$[rsp]
  0034e	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR message$[rsp]
  00356	48 8b 4c 24 70	 mov	 rcx, QWORD PTR category$[rsp]
  0035b	e8 00 00 00 00	 call	 warn_explicit
$LN13@warnings_w@2:

; 718  : }

  00360	48 81 c4 d8 00
	00 00		 add	 rsp, 216		; 000000d8H
  00367	c3		 ret	 0
warnings_warn_explicit ENDP
_TEXT	ENDS
PUBLIC	PyErr_WarnFormat
EXTRN	PyUnicode_FromFormatV:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyErr_WarnFormat DD imagerel $LN5
	DD	imagerel $LN5+124
	DD	imagerel $unwind$PyErr_WarnFormat
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyErr_WarnFormat DD 011801H
	DD	08218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyErr_WarnFormat
_TEXT	SEGMENT
vargs$ = 32
ret$ = 40
message$ = 48
category$ = 80
stack_level$ = 88
format$ = 96
PyErr_WarnFormat PROC					; COMDAT

; 743  : {

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 744  :     int ret;
; 745  :     PyObject *message;
; 746  :     va_list vargs;
; 747  : 
; 748  : #ifdef HAVE_STDARG_PROTOTYPES
; 749  :     va_start(vargs, format);

  00018	48 8d 44 24 68	 lea	 rax, QWORD PTR format$[rsp+8]
  0001d	48 89 44 24 20	 mov	 QWORD PTR vargs$[rsp], rax

; 750  : #else
; 751  :     va_start(vargs);
; 752  : #endif
; 753  :     message = PyUnicode_FromFormatV(format, vargs);

  00022	48 8b 54 24 20	 mov	 rdx, QWORD PTR vargs$[rsp]
  00027	48 8b 4c 24 60	 mov	 rcx, QWORD PTR format$[rsp]
  0002c	e8 00 00 00 00	 call	 PyUnicode_FromFormatV
  00031	48 89 44 24 30	 mov	 QWORD PTR message$[rsp], rax

; 754  :     if (message != NULL) {

  00036	48 83 7c 24 30
	00		 cmp	 QWORD PTR message$[rsp], 0
  0003c	74 24		 je	 SHORT $LN2@PyErr_Warn

; 755  :         ret = warn_unicode(category, message, stack_level);

  0003e	4c 8b 44 24 58	 mov	 r8, QWORD PTR stack_level$[rsp]
  00043	48 8b 54 24 30	 mov	 rdx, QWORD PTR message$[rsp]
  00048	48 8b 4c 24 50	 mov	 rcx, QWORD PTR category$[rsp]
  0004d	e8 00 00 00 00	 call	 warn_unicode
  00052	89 44 24 28	 mov	 DWORD PTR ret$[rsp], eax

; 756  :         Py_DECREF(message);

  00056	48 8b 4c 24 30	 mov	 rcx, QWORD PTR message$[rsp]
  0005b	e8 00 00 00 00	 call	 _Py_DecRef

; 757  :     }
; 758  :     else

  00060	eb 08		 jmp	 SHORT $LN1@PyErr_Warn
$LN2@PyErr_Warn:

; 759  :         ret = -1;

  00062	c7 44 24 28 ff
	ff ff ff	 mov	 DWORD PTR ret$[rsp], -1
$LN1@PyErr_Warn:

; 760  :     va_end(vargs);

  0006a	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR vargs$[rsp], 0

; 761  :     return ret;

  00073	8b 44 24 28	 mov	 eax, DWORD PTR ret$[rsp]

; 762  : }

  00077	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0007b	c3		 ret	 0
PyErr_WarnFormat ENDP
_TEXT	ENDS
EXTRN	PyExc_RuntimeWarning:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$warn_unicode DD imagerel warn_unicode
	DD	imagerel warn_unicode+96
	DD	imagerel $unwind$warn_unicode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$warn_unicode DD 011301H
	DD	06213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT warn_unicode
_TEXT	SEGMENT
res$ = 32
category$ = 64
message$ = 72
stack_level$ = 80
warn_unicode PROC					; COMDAT

; 726  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 727  :     PyObject *res;
; 728  : 
; 729  :     if (category == NULL)

  00013	48 83 7c 24 40
	00		 cmp	 QWORD PTR category$[rsp], 0
  00019	75 0c		 jne	 SHORT $LN2@warn_unico

; 730  :         category = PyExc_RuntimeWarning;

  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR PyExc_RuntimeWarning
  00022	48 89 44 24 40	 mov	 QWORD PTR category$[rsp], rax
$LN2@warn_unico:

; 731  : 
; 732  :     res = do_warn(message, category, stack_level);

  00027	4c 8b 44 24 50	 mov	 r8, QWORD PTR stack_level$[rsp]
  0002c	48 8b 54 24 40	 mov	 rdx, QWORD PTR category$[rsp]
  00031	48 8b 4c 24 48	 mov	 rcx, QWORD PTR message$[rsp]
  00036	e8 00 00 00 00	 call	 do_warn
  0003b	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax

; 733  :     if (res == NULL)

  00040	48 83 7c 24 20
	00		 cmp	 QWORD PTR res$[rsp], 0
  00046	75 07		 jne	 SHORT $LN1@warn_unico

; 734  :         return -1;

  00048	b8 ff ff ff ff	 mov	 eax, -1
  0004d	eb 0c		 jmp	 SHORT $LN3@warn_unico
$LN1@warn_unico:

; 735  :     Py_DECREF(res);

  0004f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR res$[rsp]
  00054	e8 00 00 00 00	 call	 _Py_DecRef

; 736  : 
; 737  :     return 0;

  00059	33 c0		 xor	 eax, eax
$LN3@warn_unico:

; 738  : }

  0005b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0005f	c3		 ret	 0
warn_unicode ENDP
_TEXT	ENDS
PUBLIC	PyErr_WarnEx
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyErr_WarnEx DD imagerel $LN4
	DD	imagerel $LN4+92
	DD	imagerel $unwind$PyErr_WarnEx
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyErr_WarnEx DD 011301H
	DD	06213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyErr_WarnEx
_TEXT	SEGMENT
ret$ = 32
message$ = 40
category$ = 64
text$ = 72
stack_level$ = 80
PyErr_WarnEx PROC					; COMDAT

; 766  : {

$LN4:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 767  :     int ret;
; 768  :     PyObject *message = PyUnicode_FromString(text);

  00013	48 8b 4c 24 48	 mov	 rcx, QWORD PTR text$[rsp]
  00018	e8 00 00 00 00	 call	 PyUnicode_FromString
  0001d	48 89 44 24 28	 mov	 QWORD PTR message$[rsp], rax

; 769  :     if (message == NULL)

  00022	48 83 7c 24 28
	00		 cmp	 QWORD PTR message$[rsp], 0
  00028	75 07		 jne	 SHORT $LN1@PyErr_Warn@2

; 770  :         return -1;

  0002a	b8 ff ff ff ff	 mov	 eax, -1
  0002f	eb 26		 jmp	 SHORT $LN2@PyErr_Warn@2
$LN1@PyErr_Warn@2:

; 771  :     ret = warn_unicode(category, message, stack_level);

  00031	4c 8b 44 24 50	 mov	 r8, QWORD PTR stack_level$[rsp]
  00036	48 8b 54 24 28	 mov	 rdx, QWORD PTR message$[rsp]
  0003b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR category$[rsp]
  00040	e8 00 00 00 00	 call	 warn_unicode
  00045	89 44 24 20	 mov	 DWORD PTR ret$[rsp], eax

; 772  :     Py_DECREF(message);

  00049	48 8b 4c 24 28	 mov	 rcx, QWORD PTR message$[rsp]
  0004e	e8 00 00 00 00	 call	 _Py_DecRef

; 773  :     return ret;

  00053	8b 44 24 20	 mov	 eax, DWORD PTR ret$[rsp]
$LN2@PyErr_Warn@2:

; 774  : }

  00057	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0005b	c3		 ret	 0
PyErr_WarnEx ENDP
_TEXT	ENDS
PUBLIC	PyErr_Warn
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyErr_Warn DD imagerel $LN3
	DD	imagerel $LN3+40
	DD	imagerel $unwind$PyErr_Warn
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyErr_Warn DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyErr_Warn
_TEXT	SEGMENT
category$ = 48
text$ = 56
PyErr_Warn PROC						; COMDAT

; 783  : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 784  :     return PyErr_WarnEx(category, text, 1);

  0000e	41 b8 01 00 00
	00		 mov	 r8d, 1
  00014	48 8b 54 24 38	 mov	 rdx, QWORD PTR text$[rsp]
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR category$[rsp]
  0001e	e8 00 00 00 00	 call	 PyErr_WarnEx

; 785  : }

  00023	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00027	c3		 ret	 0
PyErr_Warn ENDP
_TEXT	ENDS
PUBLIC	PyErr_WarnExplicit
EXTRN	PyUnicode_DecodeFSDefault:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyErr_WarnExplicit DD imagerel $LN21
	DD	imagerel $LN21+340
	DD	imagerel $unwind$PyErr_WarnExplicit
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyErr_WarnExplicit DD 011801H
	DD	0e218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyErr_WarnExplicit
_TEXT	SEGMENT
res$ = 64
module$ = 72
ret$ = 80
message$ = 88
filename$ = 96
category$ = 128
text$ = 136
filename_str$ = 144
lineno$ = 152
module_str$ = 160
registry$ = 168
PyErr_WarnExplicit PROC					; COMDAT

; 792  : {

$LN21:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 793  :     PyObject *res;
; 794  :     PyObject *message = PyUnicode_FromString(text);

  00018	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR text$[rsp]
  00020	e8 00 00 00 00	 call	 PyUnicode_FromString
  00025	48 89 44 24 58	 mov	 QWORD PTR message$[rsp], rax

; 795  :     PyObject *filename = PyUnicode_DecodeFSDefault(filename_str);

  0002a	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR filename_str$[rsp]
  00032	e8 00 00 00 00	 call	 PyUnicode_DecodeFSDefault
  00037	48 89 44 24 60	 mov	 QWORD PTR filename$[rsp], rax

; 796  :     PyObject *module = NULL;

  0003c	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR module$[rsp], 0

; 797  :     int ret = -1;

  00045	c7 44 24 50 ff
	ff ff ff	 mov	 DWORD PTR ret$[rsp], -1

; 798  : 
; 799  :     if (message == NULL || filename == NULL)

  0004d	48 83 7c 24 58
	00		 cmp	 QWORD PTR message$[rsp], 0
  00053	74 08		 je	 SHORT $LN17@PyErr_Warn@3
  00055	48 83 7c 24 60
	00		 cmp	 QWORD PTR filename$[rsp], 0
  0005b	75 05		 jne	 SHORT $LN18@PyErr_Warn@3
$LN17@PyErr_Warn@3:

; 800  :         goto exit;

  0005d	e9 a1 00 00 00	 jmp	 $exit$21088
$LN18@PyErr_Warn@3:

; 801  :     if (module_str != NULL) {

  00062	48 83 bc 24 a0
	00 00 00 00	 cmp	 QWORD PTR module_str$[rsp], 0
  0006b	74 1c		 je	 SHORT $LN16@PyErr_Warn@3

; 802  :         module = PyUnicode_FromString(module_str);

  0006d	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR module_str$[rsp]
  00075	e8 00 00 00 00	 call	 PyUnicode_FromString
  0007a	48 89 44 24 48	 mov	 QWORD PTR module$[rsp], rax

; 803  :             if (module == NULL)

  0007f	48 83 7c 24 48
	00		 cmp	 QWORD PTR module$[rsp], 0
  00085	75 02		 jne	 SHORT $LN15@PyErr_Warn@3

; 804  :                 goto exit;

  00087	eb 7a		 jmp	 SHORT $exit$21088
$LN15@PyErr_Warn@3:
$LN16@PyErr_Warn@3:

; 805  :     }
; 806  : 
; 807  :     if (category == NULL)

  00089	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR category$[rsp], 0
  00092	75 0f		 jne	 SHORT $LN14@PyErr_Warn@3

; 808  :         category = PyExc_RuntimeWarning;

  00094	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR PyExc_RuntimeWarning
  0009b	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR category$[rsp], rax
$LN14@PyErr_Warn@3:

; 809  :     res = warn_explicit(category, message, filename, lineno, module, registry,
; 810  :                         NULL);

  000a3	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR [rsp+48], 0
  000ac	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR registry$[rsp]
  000b4	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000b9	48 8b 44 24 48	 mov	 rax, QWORD PTR module$[rsp]
  000be	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000c3	44 8b 8c 24 98
	00 00 00	 mov	 r9d, DWORD PTR lineno$[rsp]
  000cb	4c 8b 44 24 60	 mov	 r8, QWORD PTR filename$[rsp]
  000d0	48 8b 54 24 58	 mov	 rdx, QWORD PTR message$[rsp]
  000d5	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR category$[rsp]
  000dd	e8 00 00 00 00	 call	 warn_explicit
  000e2	48 89 44 24 40	 mov	 QWORD PTR res$[rsp], rax

; 811  :     if (res == NULL)

  000e7	48 83 7c 24 40
	00		 cmp	 QWORD PTR res$[rsp], 0
  000ed	75 02		 jne	 SHORT $LN13@PyErr_Warn@3

; 812  :         goto exit;

  000ef	eb 12		 jmp	 SHORT $exit$21088
$LN13@PyErr_Warn@3:

; 813  :     Py_DECREF(res);

  000f1	48 8b 4c 24 40	 mov	 rcx, QWORD PTR res$[rsp]
  000f6	e8 00 00 00 00	 call	 _Py_DecRef

; 814  :     ret = 0;

  000fb	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR ret$[rsp], 0
$exit$21088:
$LN12@PyErr_Warn@3:

; 815  : 
; 816  :  exit:
; 817  :     Py_XDECREF(message);

  00103	48 83 7c 24 58
	00		 cmp	 QWORD PTR message$[rsp], 0
  00109	74 0a		 je	 SHORT $LN9@PyErr_Warn@3
  0010b	48 8b 4c 24 58	 mov	 rcx, QWORD PTR message$[rsp]
  00110	e8 00 00 00 00	 call	 _Py_DecRef
$LN9@PyErr_Warn@3:
  00115	33 c0		 xor	 eax, eax
  00117	85 c0		 test	 eax, eax
  00119	75 e8		 jne	 SHORT $LN12@PyErr_Warn@3
$LN8@PyErr_Warn@3:

; 818  :     Py_XDECREF(module);

  0011b	48 83 7c 24 48
	00		 cmp	 QWORD PTR module$[rsp], 0
  00121	74 0a		 je	 SHORT $LN5@PyErr_Warn@3
  00123	48 8b 4c 24 48	 mov	 rcx, QWORD PTR module$[rsp]
  00128	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@PyErr_Warn@3:
  0012d	33 c0		 xor	 eax, eax
  0012f	85 c0		 test	 eax, eax
  00131	75 e8		 jne	 SHORT $LN8@PyErr_Warn@3
$LN4@PyErr_Warn@3:

; 819  :     Py_XDECREF(filename);

  00133	48 83 7c 24 60
	00		 cmp	 QWORD PTR filename$[rsp], 0
  00139	74 0a		 je	 SHORT $LN1@PyErr_Warn@3
  0013b	48 8b 4c 24 60	 mov	 rcx, QWORD PTR filename$[rsp]
  00140	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@PyErr_Warn@3:
  00145	33 c0		 xor	 eax, eax
  00147	85 c0		 test	 eax, eax
  00149	75 e8		 jne	 SHORT $LN4@PyErr_Warn@3

; 820  :     return ret;

  0014b	8b 44 24 50	 mov	 eax, DWORD PTR ret$[rsp]

; 821  : }

  0014f	48 83 c4 78	 add	 rsp, 120		; 00000078H
  00153	c3		 ret	 0
PyErr_WarnExplicit ENDP
_TEXT	ENDS
PUBLIC	??_C@_0P@PBKAJPMJ@_defaultaction?$AA@		; `string'
PUBLIC	??_C@_0O@JNNAMMAD@_onceregistry?$AA@		; `string'
PUBLIC	_PyWarnings_Init
EXTRN	PyModule_AddObject:PROC
EXTRN	PyModule_Create2TraceRefs:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyWarnings_Init DD imagerel $LN13
	DD	imagerel $LN13+307
	DD	imagerel $unwind$_PyWarnings_Init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyWarnings_Init DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_0P@PBKAJPMJ@_defaultaction?$AA@
CONST	SEGMENT
??_C@_0P@PBKAJPMJ@_defaultaction?$AA@ DB '_defaultaction', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@JNNAMMAD@_onceregistry?$AA@
CONST	SEGMENT
??_C@_0O@JNNAMMAD@_onceregistry?$AA@ DB '_onceregistry', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PyWarnings_Init
_TEXT	SEGMENT
m$ = 32
_PyWarnings_Init PROC					; COMDAT

; 954  : {

$LN13:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 955  :     PyObject *m;
; 956  : 
; 957  :     m = PyModule_Create(&warningsmodule);

  00004	ba f5 03 00 00	 mov	 edx, 1013		; 000003f5H
  00009	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:warningsmodule
  00010	e8 00 00 00 00	 call	 PyModule_Create2TraceRefs
  00015	48 89 44 24 20	 mov	 QWORD PTR m$[rsp], rax

; 958  :     if (m == NULL)

  0001a	48 83 7c 24 20
	00		 cmp	 QWORD PTR m$[rsp], 0
  00020	75 07		 jne	 SHORT $LN10@PyWarnings

; 959  :         return NULL;

  00022	33 c0		 xor	 eax, eax
  00024	e9 05 01 00 00	 jmp	 $LN11@PyWarnings
$LN10@PyWarnings:

; 960  : 
; 961  :     if (_filters == NULL) {

  00029	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR _filters, 0
  00031	75 1d		 jne	 SHORT $LN9@PyWarnings

; 962  :         _filters = init_filters();

  00033	e8 00 00 00 00	 call	 init_filters
  00038	48 89 05 00 00
	00 00		 mov	 QWORD PTR _filters, rax

; 963  :         if (_filters == NULL)

  0003f	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR _filters, 0
  00047	75 07		 jne	 SHORT $LN8@PyWarnings

; 964  :             return NULL;

  00049	33 c0		 xor	 eax, eax
  0004b	e9 de 00 00 00	 jmp	 $LN11@PyWarnings
$LN8@PyWarnings:
$LN9@PyWarnings:

; 965  :     }
; 966  :     Py_INCREF(_filters);

  00050	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR _filters
  00057	e8 00 00 00 00	 call	 _Py_IncRef

; 967  :     if (PyModule_AddObject(m, "filters", _filters) < 0)

  0005c	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR _filters
  00063	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07LOIMJIII@filters?$AA@
  0006a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR m$[rsp]
  0006f	e8 00 00 00 00	 call	 PyModule_AddObject
  00074	85 c0		 test	 eax, eax
  00076	7d 07		 jge	 SHORT $LN7@PyWarnings

; 968  :         return NULL;

  00078	33 c0		 xor	 eax, eax
  0007a	e9 af 00 00 00	 jmp	 $LN11@PyWarnings
$LN7@PyWarnings:

; 969  : 
; 970  :     if (_once_registry == NULL) {

  0007f	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR _once_registry, 0
  00087	75 1d		 jne	 SHORT $LN6@PyWarnings

; 971  :         _once_registry = PyDict_New();

  00089	e8 00 00 00 00	 call	 PyDict_New
  0008e	48 89 05 00 00
	00 00		 mov	 QWORD PTR _once_registry, rax

; 972  :         if (_once_registry == NULL)

  00095	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR _once_registry, 0
  0009d	75 07		 jne	 SHORT $LN5@PyWarnings

; 973  :             return NULL;

  0009f	33 c0		 xor	 eax, eax
  000a1	e9 88 00 00 00	 jmp	 $LN11@PyWarnings
$LN5@PyWarnings:
$LN6@PyWarnings:

; 974  :     }
; 975  :     Py_INCREF(_once_registry);

  000a6	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR _once_registry
  000ad	e8 00 00 00 00	 call	 _Py_IncRef

; 976  :     if (PyModule_AddObject(m, "_onceregistry", _once_registry) < 0)

  000b2	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR _once_registry
  000b9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0O@JNNAMMAD@_onceregistry?$AA@
  000c0	48 8b 4c 24 20	 mov	 rcx, QWORD PTR m$[rsp]
  000c5	e8 00 00 00 00	 call	 PyModule_AddObject
  000ca	85 c0		 test	 eax, eax
  000cc	7d 04		 jge	 SHORT $LN4@PyWarnings

; 977  :         return NULL;

  000ce	33 c0		 xor	 eax, eax
  000d0	eb 5c		 jmp	 SHORT $LN11@PyWarnings
$LN4@PyWarnings:

; 978  : 
; 979  :     if (_default_action == NULL) {

  000d2	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR _default_action, 0
  000da	75 21		 jne	 SHORT $LN3@PyWarnings

; 980  :         _default_action = PyUnicode_FromString("default");

  000dc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07DLHCIBDH@default?$AA@
  000e3	e8 00 00 00 00	 call	 PyUnicode_FromString
  000e8	48 89 05 00 00
	00 00		 mov	 QWORD PTR _default_action, rax

; 981  :         if (_default_action == NULL)

  000ef	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR _default_action, 0
  000f7	75 04		 jne	 SHORT $LN2@PyWarnings

; 982  :             return NULL;

  000f9	33 c0		 xor	 eax, eax
  000fb	eb 31		 jmp	 SHORT $LN11@PyWarnings
$LN2@PyWarnings:
$LN3@PyWarnings:

; 983  :     }
; 984  :     Py_INCREF(_default_action);

  000fd	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR _default_action
  00104	e8 00 00 00 00	 call	 _Py_IncRef

; 985  :     if (PyModule_AddObject(m, "_defaultaction", _default_action) < 0)

  00109	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR _default_action
  00110	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0P@PBKAJPMJ@_defaultaction?$AA@
  00117	48 8b 4c 24 20	 mov	 rcx, QWORD PTR m$[rsp]
  0011c	e8 00 00 00 00	 call	 PyModule_AddObject
  00121	85 c0		 test	 eax, eax
  00123	7d 04		 jge	 SHORT $LN1@PyWarnings

; 986  :         return NULL;

  00125	33 c0		 xor	 eax, eax
  00127	eb 05		 jmp	 SHORT $LN11@PyWarnings
$LN1@PyWarnings:

; 987  :     return m;

  00129	48 8b 44 24 20	 mov	 rax, QWORD PTR m$[rsp]
$LN11@PyWarnings:

; 988  : }

  0012e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00132	c3		 ret	 0
_PyWarnings_Init ENDP
_TEXT	ENDS
EXTRN	PyExc_ResourceWarning:QWORD
EXTRN	PyExc_BytesWarning:QWORD
EXTRN	Py_BytesWarningFlag:DWORD
EXTRN	PyExc_ImportWarning:QWORD
EXTRN	PyExc_PendingDeprecationWarning:QWORD
EXTRN	PyExc_DeprecationWarning:QWORD
EXTRN	PyList_New:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$init_filters DD imagerel init_filters
	DD	imagerel init_filters+414
	DD	imagerel $unwind$init_filters
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$init_filters DD 010401H
	DD	0a204H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT init_filters
_TEXT	SEGMENT
bytes_action$ = 32
resource_action$ = 40
x$ = 48
filters$ = 56
pos$ = 64
init_filters PROC					; COMDAT

; 898  : {

  00000	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 899  :     PyObject *filters = PyList_New(5);

  00004	b9 05 00 00 00	 mov	 ecx, 5
  00009	e8 00 00 00 00	 call	 PyList_New
  0000e	48 89 44 24 38	 mov	 QWORD PTR filters$[rsp], rax

; 900  :     unsigned int pos = 0;  /* Post-incremented in each use. */

  00013	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR pos$[rsp], 0

; 901  :     unsigned int x;
; 902  :     const char *bytes_action, *resource_action;
; 903  : 
; 904  :     if (filters == NULL)

  0001b	48 83 7c 24 38
	00		 cmp	 QWORD PTR filters$[rsp], 0
  00021	75 07		 jne	 SHORT $LN9@init_filte

; 905  :         return NULL;

  00023	33 c0		 xor	 eax, eax
  00025	e9 6f 01 00 00	 jmp	 $LN10@init_filte
$LN9@init_filte:

; 906  : 
; 907  :     PyList_SET_ITEM(filters, pos++,
; 908  :                     create_filter(PyExc_DeprecationWarning, "ignore"));

  0002a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06GDPEBLPA@ignore?$AA@
  00031	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_DeprecationWarning
  00038	e8 00 00 00 00	 call	 create_filter
  0003d	8b 4c 24 40	 mov	 ecx, DWORD PTR pos$[rsp]
  00041	48 8b 54 24 38	 mov	 rdx, QWORD PTR filters$[rsp]
  00046	48 8b 52 70	 mov	 rdx, QWORD PTR [rdx+112]
  0004a	48 89 04 ca	 mov	 QWORD PTR [rdx+rcx*8], rax
  0004e	8b 44 24 40	 mov	 eax, DWORD PTR pos$[rsp]
  00052	ff c0		 inc	 eax
  00054	89 44 24 40	 mov	 DWORD PTR pos$[rsp], eax

; 909  :     PyList_SET_ITEM(filters, pos++,
; 910  :                     create_filter(PyExc_PendingDeprecationWarning, "ignore"));

  00058	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06GDPEBLPA@ignore?$AA@
  0005f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_PendingDeprecationWarning
  00066	e8 00 00 00 00	 call	 create_filter
  0006b	8b 4c 24 40	 mov	 ecx, DWORD PTR pos$[rsp]
  0006f	48 8b 54 24 38	 mov	 rdx, QWORD PTR filters$[rsp]
  00074	48 8b 52 70	 mov	 rdx, QWORD PTR [rdx+112]
  00078	48 89 04 ca	 mov	 QWORD PTR [rdx+rcx*8], rax
  0007c	8b 44 24 40	 mov	 eax, DWORD PTR pos$[rsp]
  00080	ff c0		 inc	 eax
  00082	89 44 24 40	 mov	 DWORD PTR pos$[rsp], eax

; 911  :     PyList_SET_ITEM(filters, pos++,
; 912  :                     create_filter(PyExc_ImportWarning, "ignore"));

  00086	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06GDPEBLPA@ignore?$AA@
  0008d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ImportWarning
  00094	e8 00 00 00 00	 call	 create_filter
  00099	8b 4c 24 40	 mov	 ecx, DWORD PTR pos$[rsp]
  0009d	48 8b 54 24 38	 mov	 rdx, QWORD PTR filters$[rsp]
  000a2	48 8b 52 70	 mov	 rdx, QWORD PTR [rdx+112]
  000a6	48 89 04 ca	 mov	 QWORD PTR [rdx+rcx*8], rax
  000aa	8b 44 24 40	 mov	 eax, DWORD PTR pos$[rsp]
  000ae	ff c0		 inc	 eax
  000b0	89 44 24 40	 mov	 DWORD PTR pos$[rsp], eax

; 913  :     if (Py_BytesWarningFlag > 1)

  000b4	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR Py_BytesWarningFlag, 1
  000bb	7e 0e		 jle	 SHORT $LN8@init_filte

; 914  :         bytes_action = "error";

  000bd	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_05KKCIMGE@error?$AA@
  000c4	48 89 44 24 20	 mov	 QWORD PTR bytes_action$[rsp], rax
  000c9	eb 23		 jmp	 SHORT $LN7@init_filte
$LN8@init_filte:

; 915  :     else if (Py_BytesWarningFlag)

  000cb	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR Py_BytesWarningFlag, 0
  000d2	74 0e		 je	 SHORT $LN6@init_filte

; 916  :         bytes_action = "default";

  000d4	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_07DLHCIBDH@default?$AA@
  000db	48 89 44 24 20	 mov	 QWORD PTR bytes_action$[rsp], rax

; 917  :     else

  000e0	eb 0c		 jmp	 SHORT $LN5@init_filte
$LN6@init_filte:

; 918  :         bytes_action = "ignore";

  000e2	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_06GDPEBLPA@ignore?$AA@
  000e9	48 89 44 24 20	 mov	 QWORD PTR bytes_action$[rsp], rax
$LN5@init_filte:
$LN7@init_filte:

; 919  :     PyList_SET_ITEM(filters, pos++, create_filter(PyExc_BytesWarning,
; 920  :                     bytes_action));

  000ee	48 8b 54 24 20	 mov	 rdx, QWORD PTR bytes_action$[rsp]
  000f3	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_BytesWarning
  000fa	e8 00 00 00 00	 call	 create_filter
  000ff	8b 4c 24 40	 mov	 ecx, DWORD PTR pos$[rsp]
  00103	48 8b 54 24 38	 mov	 rdx, QWORD PTR filters$[rsp]
  00108	48 8b 52 70	 mov	 rdx, QWORD PTR [rdx+112]
  0010c	48 89 04 ca	 mov	 QWORD PTR [rdx+rcx*8], rax
  00110	8b 44 24 40	 mov	 eax, DWORD PTR pos$[rsp]
  00114	ff c0		 inc	 eax
  00116	89 44 24 40	 mov	 DWORD PTR pos$[rsp], eax

; 921  :     /* resource usage warnings are enabled by default in pydebug mode */
; 922  : #ifdef Py_DEBUG
; 923  :     resource_action = "always";

  0011a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_06KHDOHNKC@always?$AA@
  00121	48 89 44 24 28	 mov	 QWORD PTR resource_action$[rsp], rax

; 924  : #else
; 925  :     resource_action = "ignore";
; 926  : #endif
; 927  :     PyList_SET_ITEM(filters, pos++, create_filter(PyExc_ResourceWarning,
; 928  :                     resource_action));

  00126	48 8b 54 24 28	 mov	 rdx, QWORD PTR resource_action$[rsp]
  0012b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ResourceWarning
  00132	e8 00 00 00 00	 call	 create_filter
  00137	8b 4c 24 40	 mov	 ecx, DWORD PTR pos$[rsp]
  0013b	48 8b 54 24 38	 mov	 rdx, QWORD PTR filters$[rsp]
  00140	48 8b 52 70	 mov	 rdx, QWORD PTR [rdx+112]
  00144	48 89 04 ca	 mov	 QWORD PTR [rdx+rcx*8], rax
  00148	8b 44 24 40	 mov	 eax, DWORD PTR pos$[rsp]
  0014c	ff c0		 inc	 eax
  0014e	89 44 24 40	 mov	 DWORD PTR pos$[rsp], eax

; 929  :     for (x = 0; x < pos; x += 1) {

  00152	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR x$[rsp], 0
  0015a	eb 0a		 jmp	 SHORT $LN4@init_filte
$LN3@init_filte:
  0015c	8b 44 24 30	 mov	 eax, DWORD PTR x$[rsp]
  00160	ff c0		 inc	 eax
  00162	89 44 24 30	 mov	 DWORD PTR x$[rsp], eax
$LN4@init_filte:
  00166	8b 44 24 40	 mov	 eax, DWORD PTR pos$[rsp]
  0016a	39 44 24 30	 cmp	 DWORD PTR x$[rsp], eax
  0016e	73 24		 jae	 SHORT $LN2@init_filte

; 930  :         if (PyList_GET_ITEM(filters, x) == NULL) {

  00170	8b 44 24 30	 mov	 eax, DWORD PTR x$[rsp]
  00174	48 8b 4c 24 38	 mov	 rcx, QWORD PTR filters$[rsp]
  00179	48 8b 49 70	 mov	 rcx, QWORD PTR [rcx+112]
  0017d	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  00182	75 0e		 jne	 SHORT $LN1@init_filte

; 931  :             Py_DECREF(filters);

  00184	48 8b 4c 24 38	 mov	 rcx, QWORD PTR filters$[rsp]
  00189	e8 00 00 00 00	 call	 _Py_DecRef

; 932  :             return NULL;

  0018e	33 c0		 xor	 eax, eax
  00190	eb 07		 jmp	 SHORT $LN10@init_filte
$LN1@init_filte:

; 933  :         }
; 934  :     }

  00192	eb c8		 jmp	 SHORT $LN3@init_filte
$LN2@init_filte:

; 935  : 
; 936  :     return filters;

  00194	48 8b 44 24 38	 mov	 rax, QWORD PTR filters$[rsp]
$LN10@init_filte:

; 937  : }

  00199	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0019d	c3		 ret	 0
init_filters ENDP
_TEXT	ENDS
PUBLIC	??_C@_0P@JJKOFCBF@unknown?5action?$AA@		; `string'
EXTRN	Py_FatalError:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$create_filter DD imagerel create_filter
	DD	imagerel create_filter+460
	DD	imagerel $unwind$create_filter
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$create_filter DD 010e01H
	DD	0a20eH
xdata	ENDS
;	COMDAT ??_C@_0P@JJKOFCBF@unknown?5action?$AA@
CONST	SEGMENT
??_C@_0P@JJKOFCBF@unknown?5action?$AA@ DB 'unknown action', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT create_filter
_TEXT	SEGMENT
lineno$ = 48
result$ = 56
action_obj$ = 64
category$ = 96
action$ = 104
create_filter PROC					; COMDAT

; 843  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 844  :     static PyObject *ignore_str = NULL;
; 845  :     static PyObject *error_str = NULL;
; 846  :     static PyObject *default_str = NULL;
; 847  :     static PyObject *always_str = NULL;
; 848  :     PyObject *action_obj = NULL;

  0000e	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR action_obj$[rsp], 0

; 849  :     PyObject *lineno, *result;
; 850  : 
; 851  :     if (!strcmp(action, "ignore")) {

  00017	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06GDPEBLPA@ignore?$AA@
  0001e	48 8b 4c 24 68	 mov	 rcx, QWORD PTR action$[rsp]
  00023	e8 00 00 00 00	 call	 strcmp
  00028	85 c0		 test	 eax, eax
  0002a	75 3f		 jne	 SHORT $LN17@create_fil

; 852  :         if (ignore_str == NULL) {

  0002c	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?ignore_str@?1??create_filter@@9@9, 0
  00034	75 24		 jne	 SHORT $LN16@create_fil

; 853  :             ignore_str = PyUnicode_InternFromString("ignore");

  00036	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06GDPEBLPA@ignore?$AA@
  0003d	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  00042	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?ignore_str@?1??create_filter@@9@9, rax

; 854  :             if (ignore_str == NULL)

  00049	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?ignore_str@?1??create_filter@@9@9, 0
  00051	75 07		 jne	 SHORT $LN15@create_fil

; 855  :                 return NULL;

  00053	33 c0		 xor	 eax, eax
  00055	e9 6d 01 00 00	 jmp	 $LN18@create_fil
$LN15@create_fil:
$LN16@create_fil:

; 856  :         }
; 857  :         action_obj = ignore_str;

  0005a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?ignore_str@?1??create_filter@@9@9
  00061	48 89 44 24 40	 mov	 QWORD PTR action_obj$[rsp], rax
  00066	e9 ff 00 00 00	 jmp	 $LN14@create_fil
$LN17@create_fil:

; 858  :     }
; 859  :     else if (!strcmp(action, "error")) {

  0006b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05KKCIMGE@error?$AA@
  00072	48 8b 4c 24 68	 mov	 rcx, QWORD PTR action$[rsp]
  00077	e8 00 00 00 00	 call	 strcmp
  0007c	85 c0		 test	 eax, eax
  0007e	75 3f		 jne	 SHORT $LN13@create_fil

; 860  :         if (error_str == NULL) {

  00080	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?error_str@?1??create_filter@@9@9, 0
  00088	75 24		 jne	 SHORT $LN12@create_fil

; 861  :             error_str = PyUnicode_InternFromString("error");

  0008a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05KKCIMGE@error?$AA@
  00091	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  00096	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?error_str@?1??create_filter@@9@9, rax

; 862  :             if (error_str == NULL)

  0009d	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?error_str@?1??create_filter@@9@9, 0
  000a5	75 07		 jne	 SHORT $LN11@create_fil

; 863  :                 return NULL;

  000a7	33 c0		 xor	 eax, eax
  000a9	e9 19 01 00 00	 jmp	 $LN18@create_fil
$LN11@create_fil:
$LN12@create_fil:

; 864  :         }
; 865  :         action_obj = error_str;

  000ae	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?error_str@?1??create_filter@@9@9
  000b5	48 89 44 24 40	 mov	 QWORD PTR action_obj$[rsp], rax
  000ba	e9 ab 00 00 00	 jmp	 $LN10@create_fil
$LN13@create_fil:

; 866  :     }
; 867  :     else if (!strcmp(action, "default")) {

  000bf	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07DLHCIBDH@default?$AA@
  000c6	48 8b 4c 24 68	 mov	 rcx, QWORD PTR action$[rsp]
  000cb	e8 00 00 00 00	 call	 strcmp
  000d0	85 c0		 test	 eax, eax
  000d2	75 3c		 jne	 SHORT $LN9@create_fil

; 868  :         if (default_str == NULL) {

  000d4	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?default_str@?1??create_filter@@9@9, 0
  000dc	75 24		 jne	 SHORT $LN8@create_fil

; 869  :             default_str = PyUnicode_InternFromString("default");

  000de	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07DLHCIBDH@default?$AA@
  000e5	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  000ea	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?default_str@?1??create_filter@@9@9, rax

; 870  :             if (default_str == NULL)

  000f1	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?default_str@?1??create_filter@@9@9, 0
  000f9	75 07		 jne	 SHORT $LN7@create_fil

; 871  :                 return NULL;

  000fb	33 c0		 xor	 eax, eax
  000fd	e9 c5 00 00 00	 jmp	 $LN18@create_fil
$LN7@create_fil:
$LN8@create_fil:

; 872  :         }
; 873  :         action_obj = default_str;

  00102	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?default_str@?1??create_filter@@9@9
  00109	48 89 44 24 40	 mov	 QWORD PTR action_obj$[rsp], rax
  0010e	eb 5a		 jmp	 SHORT $LN6@create_fil
$LN9@create_fil:

; 874  :     }
; 875  :     else if (!strcmp(action, "always")) {

  00110	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06KHDOHNKC@always?$AA@
  00117	48 8b 4c 24 68	 mov	 rcx, QWORD PTR action$[rsp]
  0011c	e8 00 00 00 00	 call	 strcmp
  00121	85 c0		 test	 eax, eax
  00123	75 39		 jne	 SHORT $LN5@create_fil

; 876  :         if (always_str == NULL) {

  00125	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?always_str@?1??create_filter@@9@9, 0
  0012d	75 21		 jne	 SHORT $LN4@create_fil

; 877  :             always_str = PyUnicode_InternFromString("always");

  0012f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06KHDOHNKC@always?$AA@
  00136	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  0013b	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?always_str@?1??create_filter@@9@9, rax

; 878  :             if (always_str == NULL)

  00142	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?always_str@?1??create_filter@@9@9, 0
  0014a	75 04		 jne	 SHORT $LN3@create_fil

; 879  :                 return NULL;

  0014c	33 c0		 xor	 eax, eax
  0014e	eb 77		 jmp	 SHORT $LN18@create_fil
$LN3@create_fil:
$LN4@create_fil:

; 880  :         }
; 881  :         action_obj = always_str;

  00150	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?always_str@?1??create_filter@@9@9
  00157	48 89 44 24 40	 mov	 QWORD PTR action_obj$[rsp], rax

; 882  :     }
; 883  :     else {

  0015c	eb 0c		 jmp	 SHORT $LN2@create_fil
$LN5@create_fil:

; 884  :         Py_FatalError("unknown action");

  0015e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@JJKOFCBF@unknown?5action?$AA@
  00165	e8 00 00 00 00	 call	 Py_FatalError
$LN2@create_fil:
$LN6@create_fil:
$LN10@create_fil:
$LN14@create_fil:

; 885  :     }
; 886  : 
; 887  :     /* This assumes the line number is zero for now. */
; 888  :     lineno = PyLong_FromLong(0);

  0016a	33 c9		 xor	 ecx, ecx
  0016c	e8 00 00 00 00	 call	 PyLong_FromLong
  00171	48 89 44 24 30	 mov	 QWORD PTR lineno$[rsp], rax

; 889  :     if (lineno == NULL)

  00176	48 83 7c 24 30
	00		 cmp	 QWORD PTR lineno$[rsp], 0
  0017c	75 04		 jne	 SHORT $LN1@create_fil

; 890  :         return NULL;

  0017e	33 c0		 xor	 eax, eax
  00180	eb 45		 jmp	 SHORT $LN18@create_fil
$LN1@create_fil:

; 891  :     result = PyTuple_Pack(5, action_obj, Py_None, category, Py_None, lineno);

  00182	48 8b 44 24 30	 mov	 rax, QWORD PTR lineno$[rsp]
  00187	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0018c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00193	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00198	4c 8b 4c 24 60	 mov	 r9, QWORD PTR category$[rsp]
  0019d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:_Py_NoneStruct
  001a4	48 8b 54 24 40	 mov	 rdx, QWORD PTR action_obj$[rsp]
  001a9	b9 05 00 00 00	 mov	 ecx, 5
  001ae	e8 00 00 00 00	 call	 PyTuple_Pack
  001b3	48 89 44 24 38	 mov	 QWORD PTR result$[rsp], rax

; 892  :     Py_DECREF(lineno);

  001b8	48 8b 4c 24 30	 mov	 rcx, QWORD PTR lineno$[rsp]
  001bd	e8 00 00 00 00	 call	 _Py_DecRef

; 893  :     return result;

  001c2	48 8b 44 24 38	 mov	 rax, QWORD PTR result$[rsp]
$LN18@create_fil:

; 894  : }

  001c7	48 83 c4 58	 add	 rsp, 88			; 00000058H
  001cb	c3		 ret	 0
create_filter ENDP
_TEXT	ENDS
END
