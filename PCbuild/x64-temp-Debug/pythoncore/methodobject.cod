; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	PyCFunction_Call
PUBLIC	??_C@_0BL@DMMHINFJ@builtin_function_or_method?$AA@ ; `string'
PUBLIC	??_C@_0L@LNCJCPDP@__module__?$AA@		; `string'
PUBLIC	??_C@_08KFOOMKEG@__self__?$AA@			; `string'
PUBLIC	??_C@_08BHKDPDAA@__name__?$AA@			; `string'
PUBLIC	??_C@_07DIBBIFIJ@__doc__?$AA@			; `string'
PUBLIC	??_C@_0N@FMLGAKCE@__qualname__?$AA@		; `string'
PUBLIC	PyCFunction_Type
EXTRN	PyObject_GenericGetAttr:PROC
EXTRN	PyType_Type:BYTE
_BSS	SEGMENT
free_list DQ	01H DUP (?)
numfree	DD	01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_0BL@DMMHINFJ@builtin_function_or_method?$AA@
CONST	SEGMENT
??_C@_0BL@DMMHINFJ@builtin_function_or_method?$AA@ DB 'builtin_function_o'
	DB	'r_method', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@LNCJCPDP@__module__?$AA@
CONST	SEGMENT
??_C@_0L@LNCJCPDP@__module__?$AA@ DB '__module__', 00H	; `string'
CONST	ENDS
_DATA	SEGMENT
meth_getsets DQ	FLAT:??_C@_07DIBBIFIJ@__doc__?$AA@
	DQ	FLAT:meth_get__doc__
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_08BHKDPDAA@__name__?$AA@
	DQ	FLAT:meth_get__name__
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0N@FMLGAKCE@__qualname__?$AA@
	DQ	FLAT:meth_get__qualname__
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_08KFOOMKEG@__self__?$AA@
	DQ	FLAT:meth_get__self__
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000000H
	ORG $+32
	ORG $+8
meth_members DQ	FLAT:??_C@_0L@LNCJCPDP@__module__?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000070H
	DD	04H
	ORG $+4
	ORG $+8
	DQ	0000000000000000H
	ORG $+32
PyCFunction_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0BL@DMMHINFJ@builtin_function_or_method?$AA@
	DQ	0000000000000080H
	DQ	0000000000000000H
	DQ	FLAT:meth_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:meth_repr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:meth_hash
	DQ	FLAT:PyCFunction_Call
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044000H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:meth_traverse
	DQ	0000000000000000H
	DQ	FLAT:meth_richcompare
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:meth_members
	DQ	FLAT:meth_getsets
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+120
_DATA	ENDS
;	COMDAT ??_C@_08KFOOMKEG@__self__?$AA@
CONST	SEGMENT
??_C@_08KFOOMKEG@__self__?$AA@ DB '__self__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08BHKDPDAA@__name__?$AA@
CONST	SEGMENT
??_C@_08BHKDPDAA@__name__?$AA@ DB '__name__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07DIBBIFIJ@__doc__?$AA@
CONST	SEGMENT
??_C@_07DIBBIFIJ@__doc__?$AA@ DB '__doc__', 00H		; `string'
CONST	ENDS
_TLS	SEGMENT
?PyId___qualname__@?1??meth_get__qualname__@@9@9 DQ 0000000000000000H ; `meth_get__qualname__'::`2'::PyId___qualname__
	DQ	FLAT:??_C@_0N@FMLGAKCE@__qualname__?$AA@
	DQ	0000000000000000H
_TLS	ENDS
;	COMDAT ??_C@_0N@FMLGAKCE@__qualname__?$AA@
CONST	SEGMENT
??_C@_0N@FMLGAKCE@__qualname__?$AA@ DB '__qualname__', 00H ; `string'
CONST	ENDS
PUBLIC	??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@ ; `string'
PUBLIC	??_C@_0BC@NAJKNCGF@PyCFunction_NewEx?$AA@	; `string'
PUBLIC	??_C@_0BK@JCLMKNNL@?4?4?2Objects?2methodobject?4c?$AA@ ; `string'
PUBLIC	_Py_IncRef
PUBLIC	PyCFunction_NewEx
EXTRN	_PyGC_generation0:QWORD
EXTRN	Py_FatalError:PROC
EXTRN	_PyParallel_Guard:PROC
EXTRN	_PyObject_GC_New:PROC
EXTRN	_PxObject_New:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\objects\methodobject.c
pdata	SEGMENT
$pdata$PyCFunction_NewEx DD imagerel $LN25
	DD	imagerel $LN25+535
	DD	imagerel $unwind$PyCFunction_NewEx
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyCFunction_NewEx DD 011301H
	DD	0c213H
xdata	ENDS
;	COMDAT ??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@
CONST	SEGMENT
??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@ DB 'GC object alread'
	DB	'y tracked', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@NAJKNCGF@PyCFunction_NewEx?$AA@
CONST	SEGMENT
??_C@_0BC@NAJKNCGF@PyCFunction_NewEx?$AA@ DB 'PyCFunction_NewEx', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@JCLMKNNL@?4?4?2Objects?2methodobject?4c?$AA@
CONST	SEGMENT
??_C@_0BK@JCLMKNNL@?4?4?2Objects?2methodobject?4c?$AA@ DB '..\Objects\met'
	DB	'hodobject.c', 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyCFunction_NewEx
_TEXT	SEGMENT
op$ = 48
g$20364 = 56
tv66 = 64
tv78 = 72
tv136 = 80
ml$ = 112
self$ = 120
module$ = 128
PyCFunction_NewEx PROC					; COMDAT

; 18   : {

$LN25:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 19   :     PyCFunctionObject *op;
; 20   :     op = (Py_PXCTX ? 0 : free_list);

  00013	e8 00 00 00 00	 call	 _Py_PXCTX
  00018	85 c0		 test	 eax, eax
  0001a	74 0b		 je	 SHORT $LN19@PyCFunctio
  0001c	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR tv66[rsp], 0
  00025	eb 0c		 jmp	 SHORT $LN20@PyCFunctio
$LN19@PyCFunctio:
  00027	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR free_list
  0002e	48 89 44 24 40	 mov	 QWORD PTR tv66[rsp], rax
$LN20@PyCFunctio:
  00033	48 8b 44 24 40	 mov	 rax, QWORD PTR tv66[rsp]
  00038	48 89 44 24 30	 mov	 QWORD PTR op$[rsp], rax

; 21   :     if (op != NULL) {

  0003d	48 83 7c 24 30
	00		 cmp	 QWORD PTR op$[rsp], 0
  00043	74 31		 je	 SHORT $LN16@PyCFunctio

; 22   :         free_list = (PyCFunctionObject *)(op->m_self);

  00045	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  0004a	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0004e	48 89 05 00 00
	00 00		 mov	 QWORD PTR free_list, rax

; 23   :         PyObject_INIT((PyObject *)op, &PyCFunction_Type);

  00055	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyCFunction_Type
  0005c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR op$[rsp]
  00061	e8 00 00 00 00	 call	 PyObject_INIT

; 24   :         numfree--;

  00066	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR numfree
  0006c	ff c8		 dec	 eax
  0006e	89 05 00 00 00
	00		 mov	 DWORD PTR numfree, eax

; 25   :     }
; 26   :     else {

  00074	eb 46		 jmp	 SHORT $LN15@PyCFunctio
$LN16@PyCFunctio:

; 27   :         op = PyObject_GC_New(PyCFunctionObject, &PyCFunction_Type);

  00076	e8 00 00 00 00	 call	 _Py_PXCTX
  0007b	85 c0		 test	 eax, eax
  0007d	74 13		 je	 SHORT $LN21@PyCFunctio
  0007f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyCFunction_Type
  00086	e8 00 00 00 00	 call	 _PxObject_New
  0008b	48 89 44 24 48	 mov	 QWORD PTR tv78[rsp], rax
  00090	eb 11		 jmp	 SHORT $LN22@PyCFunctio
$LN21@PyCFunctio:
  00092	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyCFunction_Type
  00099	e8 00 00 00 00	 call	 _PyObject_GC_New
  0009e	48 89 44 24 48	 mov	 QWORD PTR tv78[rsp], rax
$LN22@PyCFunctio:
  000a3	48 8b 44 24 48	 mov	 rax, QWORD PTR tv78[rsp]
  000a8	48 89 44 24 30	 mov	 QWORD PTR op$[rsp], rax

; 28   :         if (op == NULL)

  000ad	48 83 7c 24 30
	00		 cmp	 QWORD PTR op$[rsp], 0
  000b3	75 07		 jne	 SHORT $LN14@PyCFunctio

; 29   :             return NULL;

  000b5	33 c0		 xor	 eax, eax
  000b7	e9 56 01 00 00	 jmp	 $LN17@PyCFunctio
$LN14@PyCFunctio:
$LN15@PyCFunctio:

; 30   :     }
; 31   :     op->m_ml = ml;

  000bc	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  000c1	48 8b 4c 24 70	 mov	 rcx, QWORD PTR ml$[rsp]
  000c6	48 89 48 60	 mov	 QWORD PTR [rax+96], rcx
$LN13@PyCFunctio:

; 32   :     Py_XINCREF(self);

  000ca	48 83 7c 24 78
	00		 cmp	 QWORD PTR self$[rsp], 0
  000d0	74 0a		 je	 SHORT $LN10@PyCFunctio
  000d2	48 8b 4c 24 78	 mov	 rcx, QWORD PTR self$[rsp]
  000d7	e8 00 00 00 00	 call	 _Py_IncRef
$LN10@PyCFunctio:
  000dc	33 c0		 xor	 eax, eax
  000de	85 c0		 test	 eax, eax
  000e0	75 e8		 jne	 SHORT $LN13@PyCFunctio

; 33   :     op->m_self = self;

  000e2	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  000e7	48 8b 4c 24 78	 mov	 rcx, QWORD PTR self$[rsp]
  000ec	48 89 48 68	 mov	 QWORD PTR [rax+104], rcx
$LN9@PyCFunctio:

; 34   :     Py_XINCREF(module);

  000f0	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR module$[rsp], 0
  000f9	74 0d		 je	 SHORT $LN6@PyCFunctio
  000fb	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR module$[rsp]
  00103	e8 00 00 00 00	 call	 _Py_IncRef
$LN6@PyCFunctio:
  00108	33 c0		 xor	 eax, eax
  0010a	85 c0		 test	 eax, eax
  0010c	75 e2		 jne	 SHORT $LN9@PyCFunctio

; 35   :     op->m_module = module;

  0010e	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  00113	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR module$[rsp]
  0011b	48 89 48 70	 mov	 QWORD PTR [rax+112], rcx

; 36   :     _PyObject_GC_TRACK(op);

  0011f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00127	4c 8b 4c 24 30	 mov	 r9, QWORD PTR op$[rsp]
  0012c	41 b8 24 00 00
	00		 mov	 r8d, 36			; 00000024H
  00132	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@JCLMKNNL@?4?4?2Objects?2methodobject?4c?$AA@
  00139	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@NAJKNCGF@PyCFunction_NewEx?$AA@
  00140	e8 00 00 00 00	 call	 _PyParallel_Guard
  00145	85 c0		 test	 eax, eax
  00147	0f 85 c0 00 00
	00		 jne	 $LN5@PyCFunctio
$LN4@PyCFunctio:
  0014d	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00155	4c 8b 4c 24 30	 mov	 r9, QWORD PTR op$[rsp]
  0015a	41 b8 24 00 00
	00		 mov	 r8d, 36			; 00000024H
  00160	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@JCLMKNNL@?4?4?2Objects?2methodobject?4c?$AA@
  00167	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@NAJKNCGF@PyCFunction_NewEx?$AA@
  0016e	e8 00 00 00 00	 call	 _PyParallel_Guard
  00173	85 c0		 test	 eax, eax
  00175	74 0b		 je	 SHORT $LN23@PyCFunctio
  00177	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR tv136[rsp], 0
  00180	eb 0e		 jmp	 SHORT $LN24@PyCFunctio
$LN23@PyCFunctio:
  00182	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  00187	48 83 e8 18	 sub	 rax, 24
  0018b	48 89 44 24 50	 mov	 QWORD PTR tv136[rsp], rax
$LN24@PyCFunctio:
  00190	48 8b 44 24 50	 mov	 rax, QWORD PTR tv136[rsp]
  00195	48 89 44 24 38	 mov	 QWORD PTR g$20364[rsp], rax
  0019a	48 8b 44 24 38	 mov	 rax, QWORD PTR g$20364[rsp]
  0019f	48 83 78 10 fe	 cmp	 QWORD PTR [rax+16], -2
  001a4	74 0c		 je	 SHORT $LN1@PyCFunctio
  001a6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@
  001ad	e8 00 00 00 00	 call	 Py_FatalError
$LN1@PyCFunctio:
  001b2	48 8b 44 24 38	 mov	 rax, QWORD PTR g$20364[rsp]
  001b7	48 c7 40 10 fd
	ff ff ff	 mov	 QWORD PTR [rax+16], -3
  001bf	48 8b 44 24 38	 mov	 rax, QWORD PTR g$20364[rsp]
  001c4	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR _PyGC_generation0
  001cb	48 89 08	 mov	 QWORD PTR [rax], rcx
  001ce	48 8b 44 24 38	 mov	 rax, QWORD PTR g$20364[rsp]
  001d3	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR _PyGC_generation0
  001da	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  001de	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  001e2	48 8b 44 24 38	 mov	 rax, QWORD PTR g$20364[rsp]
  001e7	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  001eb	48 8b 4c 24 38	 mov	 rcx, QWORD PTR g$20364[rsp]
  001f0	48 89 08	 mov	 QWORD PTR [rax], rcx
  001f3	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyGC_generation0
  001fa	48 8b 4c 24 38	 mov	 rcx, QWORD PTR g$20364[rsp]
  001ff	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  00203	33 c0		 xor	 eax, eax
  00205	85 c0		 test	 eax, eax
  00207	0f 85 40 ff ff
	ff		 jne	 $LN4@PyCFunctio
$LN5@PyCFunctio:

; 37   :     return (PyObject *)op;

  0020d	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
$LN17@PyCFunctio:

; 38   : }

  00212	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00216	c3		 ret	 0
PyCFunction_NewEx ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
EXTRN	_Py_RefTotal:QWORD
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN7
	DD	imagerel $LN7+132
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 6d		 jne	 SHORT $LN2@Py_IncRef
  00012	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0001a	4c 8b 4c 24 40	 mov	 r9, QWORD PTR op$[rsp]
  0001f	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_Guard
  00038	85 c0		 test	 eax, eax
  0003a	75 12		 jne	 SHORT $LN1@Py_IncRef
  0003c	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  00041	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00045	48 83 e0 20	 and	 rax, 32			; 00000020H
  00049	48 85 c0	 test	 rax, rax
  0004c	74 31		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;

  0004e	e8 00 00 00 00	 call	 _Py_PXCTX
  00053	85 c0		 test	 eax, eax
  00055	74 02		 je	 SHORT $LN5@Py_IncRef
  00057	eb 11		 jmp	 SHORT $LN6@Py_IncRef
$LN5@Py_IncRef:
  00059	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00060	48 ff c0	 inc	 rax
  00063	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN6@Py_IncRef:

; 907  :         (((PyObject*)(op))->ob_refcnt++);

  0006a	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  0006f	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00073	48 ff c0	 inc	 rax
  00076	48 8b 4c 24 40	 mov	 rcx, QWORD PTR op$[rsp]
  0007b	48 89 41 50	 mov	 QWORD PTR [rcx+80], rax
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  0007f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00083	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
EXTRN	_Py_NewReference:PROC
EXTRN	_PxObject_Init:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\objimpl.h
pdata	SEGMENT
$pdata$PyObject_INIT DD imagerel PyObject_INIT
	DD	imagerel PyObject_INIT+84
	DD	imagerel $unwind$PyObject_INIT
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyObject_INIT DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyObject_INIT
_TEXT	SEGMENT
op$ = 48
tp$ = 56
PyObject_INIT PROC					; COMDAT

; 236  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 237  :     Px_RETURN(_PxObject_Init(op, tp))

  0000e	e8 00 00 00 00	 call	 _Py_PXCTX
  00013	85 c0		 test	 eax, eax
  00015	74 11		 je	 SHORT $LN1@PyObject_I
  00017	48 8b 54 24 38	 mov	 rdx, QWORD PTR tp$[rsp]
  0001c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR op$[rsp]
  00021	e8 00 00 00 00	 call	 _PxObject_Init
  00026	eb 27		 jmp	 SHORT $LN2@PyObject_I
$LN1@PyObject_I:

; 238  :     Py_TYPE(op) = tp;

  00028	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  0002d	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tp$[rsp]
  00032	48 89 48 58	 mov	 QWORD PTR [rax+88], rcx

; 239  :     _PyObject_InitHead(op);

  00036	48 8b 4c 24 30	 mov	 rcx, QWORD PTR op$[rsp]
  0003b	e8 00 00 00 00	 call	 _PyObject_InitHead

; 240  :     _Py_NewReference(op);

  00040	48 8b 4c 24 30	 mov	 rcx, QWORD PTR op$[rsp]
  00045	e8 00 00 00 00	 call	 _Py_NewReference

; 241  :     return op;

  0004a	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
$LN2@PyObject_I:

; 242  : }

  0004f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00053	c3		 ret	 0
PyObject_INIT ENDP
_TEXT	ENDS
PUBLIC	??_C@_1BI@GPFDFIDP@?$AAP?$AAy?$AA_?$AAT?$AAY?$AAP?$AAE?$AA?$CI?$AAo?$AAp?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1EI@MBCBHLGB@?$AAc?$AA?3?$AA?2?$AAs?$AAr?$AAc?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?2?$AAi?$AAn?$AAc?$AAl?$AAu?$AAd?$AAe?$AA?2?$AAo?$AAb?$AAj?$AAi?$AAm?$AAp@ ; `string'
EXTRN	__imp__wassert:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyObject_InitHead DD imagerel _PyObject_InitHead
	DD	imagerel _PyObject_InitHead+182
	DD	imagerel $unwind$_PyObject_InitHead
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyObject_InitHead DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT ??_C@_1BI@GPFDFIDP@?$AAP?$AAy?$AA_?$AAT?$AAY?$AAP?$AAE?$AA?$CI?$AAo?$AAp?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1BI@GPFDFIDP@?$AAP?$AAy?$AA_?$AAT?$AAY?$AAP?$AAE?$AA?$CI?$AAo?$AAp?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, '_', 00H, 'T', 00H, 'Y', 00H, 'P', 00H, 'E', 00H
	DB	'(', 00H, 'o', 00H, 'p', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EI@MBCBHLGB@?$AAc?$AA?3?$AA?2?$AAs?$AAr?$AAc?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?2?$AAi?$AAn?$AAc?$AAl?$AAu?$AAd?$AAe?$AA?2?$AAo?$AAb?$AAj?$AAi?$AAm?$AAp@
CONST	SEGMENT
??_C@_1EI@MBCBHLGB@?$AAc?$AA?3?$AA?2?$AAs?$AAr?$AAc?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?2?$AAi?$AAn?$AAc?$AAl?$AAu?$AAd?$AAe?$AA?2?$AAo?$AAb?$AAj?$AAi?$AAm?$AAp@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H
	DB	'p', 00H, 'y', 00H, 'p', 00H, 'a', 00H, 'r', 00H, 'a', 00H, 'l'
	DB	00H, 'l', 00H, 'e', 00H, 'l', 00H, '\', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'o'
	DB	00H, 'b', 00H, 'j', 00H, 'i', 00H, 'm', 00H, 'p', 00H, 'l', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PyObject_InitHead
_TEXT	SEGMENT
op$ = 48
_PyObject_InitHead PROC					; COMDAT

; 215  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 216  :     assert(Py_TYPE(op));

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  0000e	48 83 78 58 00	 cmp	 QWORD PTR [rax+88], 0
  00013	75 1c		 jne	 SHORT $LN3@PyObject_I@2
  00015	41 b8 d8 00 00
	00		 mov	 r8d, 216		; 000000d8H
  0001b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EI@MBCBHLGB@?$AAc?$AA?3?$AA?2?$AAs?$AAr?$AAc?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?2?$AAi?$AAn?$AAc?$AAl?$AAu?$AAd?$AAe?$AA?2?$AAo?$AAb?$AAj?$AAi?$AAm?$AAp@
  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BI@GPFDFIDP@?$AAP?$AAy?$AA_?$AAT?$AAY?$AAP?$AAE?$AA?$CI?$AAo?$AAp?$AA?$CJ?$AA?$AA@
  00029	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0002f	33 c0		 xor	 eax, eax
$LN3@PyObject_I@2:

; 217  :     op->is_px = _Py_NOT_PARALLEL;

  00031	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  00036	48 b9 78 56 ef
	be 34 12 ad de	 mov	 rcx, -2401243008567650696 ; dead1234beef5678H
  00040	48 89 08	 mov	 QWORD PTR [rax], rcx

; 218  :     op->px    = _Py_NOT_PARALLEL;

  00043	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  00048	48 b9 78 56 ef
	be 34 12 ad de	 mov	 rcx, -2401243008567650696 ; dead1234beef5678H
  00052	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 219  :     op->slist_entry.Next = NULL;

  00056	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  0005b	48 c7 40 10 00
	00 00 00	 mov	 QWORD PTR [rax+16], 0

; 220  :     op->px_flags  = Py_PXFLAGS_ISPY;

  00063	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  00068	48 c7 40 20 01
	00 00 00	 mov	 QWORD PTR [rax+32], 1

; 221  :     op->srw_lock  = NULL;

  00070	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  00075	48 c7 40 28 00
	00 00 00	 mov	 QWORD PTR [rax+40], 0

; 222  :     op->event     = NULL;

  0007d	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  00082	48 c7 40 30 00
	00 00 00	 mov	 QWORD PTR [rax+48], 0

; 223  :     op->orig_type = NULL;

  0008a	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  0008f	48 c7 40 38 00
	00 00 00	 mov	 QWORD PTR [rax+56], 0

; 224  : #ifdef Py_TRACE_REFS
; 225  :     op->_ob_next = NULL;

  00097	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  0009c	48 c7 40 40 00
	00 00 00	 mov	 QWORD PTR [rax+64], 0

; 226  :     op->_ob_prev = NULL;

  000a4	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  000a9	48 c7 40 48 00
	00 00 00	 mov	 QWORD PTR [rax+72], 0

; 227  : #else
; 228  :     op->_ob_next = _Py_NOT_PARALLEL;
; 229  :     op->_ob_prev = _Py_NOT_PARALLEL;
; 230  : #endif
; 231  : }

  000b1	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000b5	c3		 ret	 0
_PyObject_InitHead ENDP
_TEXT	ENDS
PUBLIC	PyCFunction_GetFunction
EXTRN	_PyErr_BadInternalCall:PROC
;	COMDAT pdata
; File c:\src\pyparallel\objects\methodobject.c
pdata	SEGMENT
$pdata$PyCFunction_GetFunction DD imagerel $LN4
	DD	imagerel $LN4+66
	DD	imagerel $unwind$PyCFunction_GetFunction
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyCFunction_GetFunction DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyCFunction_GetFunction
_TEXT	SEGMENT
op$ = 48
PyCFunction_GetFunction PROC				; COMDAT

; 42   : {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 43   :     if (!PyCFunction_Check(op)) {

  00009	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyCFunction_Type
  00010	48 8b 4c 24 30	 mov	 rcx, QWORD PTR op$[rsp]
  00015	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00019	74 15		 je	 SHORT $LN1@PyCFunctio@2

; 44   :         PyErr_BadInternalCall();

  0001b	ba 2c 00 00 00	 mov	 edx, 44			; 0000002cH
  00020	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@JCLMKNNL@?4?4?2Objects?2methodobject?4c?$AA@
  00027	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 45   :         return NULL;

  0002c	33 c0		 xor	 eax, eax
  0002e	eb 0d		 jmp	 SHORT $LN2@PyCFunctio@2
$LN1@PyCFunctio@2:

; 46   :     }
; 47   :     return PyCFunction_GET_FUNCTION(op);

  00030	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  00035	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00039	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
$LN2@PyCFunctio@2:

; 48   : }

  0003d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00041	c3		 ret	 0
PyCFunction_GetFunction ENDP
_TEXT	ENDS
PUBLIC	PyCFunction_GetSelf
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyCFunction_GetSelf DD imagerel $LN6
	DD	imagerel $LN6+102
	DD	imagerel $unwind$PyCFunction_GetSelf
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyCFunction_GetSelf DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyCFunction_GetSelf
_TEXT	SEGMENT
tv73 = 32
op$ = 64
PyCFunction_GetSelf PROC				; COMDAT

; 52   : {

$LN6:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 53   :     if (!PyCFunction_Check(op)) {

  00009	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyCFunction_Type
  00010	48 8b 4c 24 40	 mov	 rcx, QWORD PTR op$[rsp]
  00015	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00019	74 15		 je	 SHORT $LN1@PyCFunctio@3

; 54   :         PyErr_BadInternalCall();

  0001b	ba 36 00 00 00	 mov	 edx, 54			; 00000036H
  00020	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@JCLMKNNL@?4?4?2Objects?2methodobject?4c?$AA@
  00027	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 55   :         return NULL;

  0002c	33 c0		 xor	 eax, eax
  0002e	eb 31		 jmp	 SHORT $LN2@PyCFunctio@3
$LN1@PyCFunctio@3:

; 56   :     }
; 57   :     return PyCFunction_GET_SELF(op);

  00030	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  00035	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00039	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
  0003c	83 e0 20	 and	 eax, 32			; 00000020H
  0003f	85 c0		 test	 eax, eax
  00041	74 0b		 je	 SHORT $LN4@PyCFunctio@3
  00043	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR tv73[rsp], 0
  0004c	eb 0e		 jmp	 SHORT $LN5@PyCFunctio@3
$LN4@PyCFunctio@3:
  0004e	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  00053	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00057	48 89 44 24 20	 mov	 QWORD PTR tv73[rsp], rax
$LN5@PyCFunctio@3:
  0005c	48 8b 44 24 20	 mov	 rax, QWORD PTR tv73[rsp]
$LN2@PyCFunctio@3:

; 58   : }

  00061	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00065	c3		 ret	 0
PyCFunction_GetSelf ENDP
_TEXT	ENDS
PUBLIC	PyCFunction_GetFlags
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyCFunction_GetFlags DD imagerel $LN4
	DD	imagerel $LN4+68
	DD	imagerel $unwind$PyCFunction_GetFlags
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyCFunction_GetFlags DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyCFunction_GetFlags
_TEXT	SEGMENT
op$ = 48
PyCFunction_GetFlags PROC				; COMDAT

; 62   : {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 63   :     if (!PyCFunction_Check(op)) {

  00009	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyCFunction_Type
  00010	48 8b 4c 24 30	 mov	 rcx, QWORD PTR op$[rsp]
  00015	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00019	74 18		 je	 SHORT $LN1@PyCFunctio@4

; 64   :         PyErr_BadInternalCall();

  0001b	ba 40 00 00 00	 mov	 edx, 64			; 00000040H
  00020	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@JCLMKNNL@?4?4?2Objects?2methodobject?4c?$AA@
  00027	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 65   :         return -1;

  0002c	b8 ff ff ff ff	 mov	 eax, -1
  00031	eb 0c		 jmp	 SHORT $LN2@PyCFunctio@4
$LN1@PyCFunctio@4:

; 66   :     }
; 67   :     return PyCFunction_GET_FLAGS(op);

  00033	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  00038	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0003c	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
$LN2@PyCFunctio@4:

; 68   : }

  0003f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00043	c3		 ret	 0
PyCFunction_GetFlags ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CE@NIOJMLLF@?$CF?4200s?$CI?$CJ?5takes?5no?5keyword?5argume@ ; `string'
PUBLIC	??_C@_0EJ@HBEDIBIN@Bad?5call?5flags?5in?5PyCFunction_Ca@ ; `string'
PUBLIC	??_C@_0DA@MJAFCLG@?$CF?4200s?$CI?$CJ?5takes?5exactly?5one?5argum@ ; `string'
PUBLIC	??_C@_0CI@PIHKOAGH@?$CF?4200s?$CI?$CJ?5takes?5no?5arguments?5?$CI?$CFzd@ ; `string'
EXTRN	PyErr_SetString:PROC
EXTRN	PyExc_SystemError:QWORD
EXTRN	PyErr_Format:PROC
EXTRN	PyExc_TypeError:QWORD
EXTRN	PyDict_Size:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyCFunction_Call DD imagerel $LN20
	DD	imagerel $LN20+505
	DD	imagerel $unwind$PyCFunction_Call
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyCFunction_Call DD 011301H
	DD	0a213H
xdata	ENDS
;	COMDAT ??_C@_0CE@NIOJMLLF@?$CF?4200s?$CI?$CJ?5takes?5no?5keyword?5argume@
CONST	SEGMENT
??_C@_0CE@NIOJMLLF@?$CF?4200s?$CI?$CJ?5takes?5no?5keyword?5argume@ DB '%.'
	DB	'200s() takes no keyword arguments', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EJ@HBEDIBIN@Bad?5call?5flags?5in?5PyCFunction_Ca@
CONST	SEGMENT
??_C@_0EJ@HBEDIBIN@Bad?5call?5flags?5in?5PyCFunction_Ca@ DB 'Bad call fla'
	DB	'gs in PyCFunction_Call. METH_OLDARGS is no longer supported!', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@MJAFCLG@?$CF?4200s?$CI?$CJ?5takes?5exactly?5one?5argum@
CONST	SEGMENT
??_C@_0DA@MJAFCLG@?$CF?4200s?$CI?$CJ?5takes?5exactly?5one?5argum@ DB '%.2'
	DB	'00s() takes exactly one argument (%zd given)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@PIHKOAGH@?$CF?4200s?$CI?$CJ?5takes?5no?5arguments?5?$CI?$CFzd@
CONST	SEGMENT
??_C@_0CI@PIHKOAGH@?$CF?4200s?$CI?$CJ?5takes?5no?5arguments?5?$CI?$CFzd@ DB '%'
	DB	'.200s() takes no arguments (%zd given)', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyCFunction_Call
_TEXT	SEGMENT
f$ = 32
self$ = 40
size$ = 48
meth$ = 56
tv71 = 64
tv75 = 72
func$ = 96
arg$ = 104
kw$ = 112
PyCFunction_Call PROC					; COMDAT

; 72   : {

$LN20:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 73   :     PyCFunctionObject* f = (PyCFunctionObject*)func;

  00013	48 8b 44 24 60	 mov	 rax, QWORD PTR func$[rsp]
  00018	48 89 44 24 20	 mov	 QWORD PTR f$[rsp], rax

; 74   :     PyCFunction meth = PyCFunction_GET_FUNCTION(func);

  0001d	48 8b 44 24 60	 mov	 rax, QWORD PTR func$[rsp]
  00022	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00026	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0002a	48 89 44 24 38	 mov	 QWORD PTR meth$[rsp], rax

; 75   :     PyObject *self = PyCFunction_GET_SELF(func);

  0002f	48 8b 44 24 60	 mov	 rax, QWORD PTR func$[rsp]
  00034	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00038	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
  0003b	83 e0 20	 and	 eax, 32			; 00000020H
  0003e	85 c0		 test	 eax, eax
  00040	74 0b		 je	 SHORT $LN18@PyCFunctio@5
  00042	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR tv71[rsp], 0
  0004b	eb 0e		 jmp	 SHORT $LN19@PyCFunctio@5
$LN18@PyCFunctio@5:
  0004d	48 8b 44 24 60	 mov	 rax, QWORD PTR func$[rsp]
  00052	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00056	48 89 44 24 40	 mov	 QWORD PTR tv71[rsp], rax
$LN19@PyCFunctio@5:
  0005b	48 8b 44 24 40	 mov	 rax, QWORD PTR tv71[rsp]
  00060	48 89 44 24 28	 mov	 QWORD PTR self$[rsp], rax

; 76   :     Py_ssize_t size;
; 77   : 
; 78   :     switch (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST)) {

  00065	48 8b 44 24 60	 mov	 rax, QWORD PTR func$[rsp]
  0006a	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0006e	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
  00071	83 e0 8f	 and	 eax, -113		; ffffffffffffff8fH
  00074	89 44 24 48	 mov	 DWORD PTR tv75[rsp], eax
  00078	83 7c 24 48 01	 cmp	 DWORD PTR tv75[rsp], 1
  0007d	74 1e		 je	 SHORT $LN13@PyCFunctio@5
  0007f	83 7c 24 48 03	 cmp	 DWORD PTR tv75[rsp], 3
  00084	74 46		 je	 SHORT $LN10@PyCFunctio@5
  00086	83 7c 24 48 04	 cmp	 DWORD PTR tv75[rsp], 4
  0008b	74 57		 je	 SHORT $LN9@PyCFunctio@5
  0008d	83 7c 24 48 08	 cmp	 DWORD PTR tv75[rsp], 8
  00092	0f 84 b9 00 00
	00		 je	 $LN5@PyCFunctio@5
  00098	e9 1f 01 00 00	 jmp	 $LN1@PyCFunctio@5
$LN13@PyCFunctio@5:

; 79   :     case METH_VARARGS:
; 80   :         if (kw == NULL || PyDict_Size(kw) == 0)

  0009d	48 83 7c 24 70
	00		 cmp	 QWORD PTR kw$[rsp], 0
  000a3	74 0f		 je	 SHORT $LN11@PyCFunctio@5
  000a5	48 8b 4c 24 70	 mov	 rcx, QWORD PTR kw$[rsp]
  000aa	e8 00 00 00 00	 call	 PyDict_Size
  000af	48 85 c0	 test	 rax, rax
  000b2	75 13		 jne	 SHORT $LN12@PyCFunctio@5
$LN11@PyCFunctio@5:

; 81   :             return (*meth)(self, arg);

  000b4	48 8b 54 24 68	 mov	 rdx, QWORD PTR arg$[rsp]
  000b9	48 8b 4c 24 28	 mov	 rcx, QWORD PTR self$[rsp]
  000be	ff 54 24 38	 call	 QWORD PTR meth$[rsp]
  000c2	e9 2d 01 00 00	 jmp	 $LN16@PyCFunctio@5
$LN12@PyCFunctio@5:

; 82   :         break;

  000c7	e9 07 01 00 00	 jmp	 $LN14@PyCFunctio@5
$LN10@PyCFunctio@5:

; 83   :     case METH_VARARGS | METH_KEYWORDS:
; 84   :         return (*(PyCFunctionWithKeywords)meth)(self, arg, kw);

  000cc	4c 8b 44 24 70	 mov	 r8, QWORD PTR kw$[rsp]
  000d1	48 8b 54 24 68	 mov	 rdx, QWORD PTR arg$[rsp]
  000d6	48 8b 4c 24 28	 mov	 rcx, QWORD PTR self$[rsp]
  000db	ff 54 24 38	 call	 QWORD PTR meth$[rsp]
  000df	e9 10 01 00 00	 jmp	 $LN16@PyCFunctio@5
$LN9@PyCFunctio@5:

; 85   :     case METH_NOARGS:
; 86   :         if (kw == NULL || PyDict_Size(kw) == 0) {

  000e4	48 83 7c 24 70
	00		 cmp	 QWORD PTR kw$[rsp], 0
  000ea	74 0f		 je	 SHORT $LN7@PyCFunctio@5
  000ec	48 8b 4c 24 70	 mov	 rcx, QWORD PTR kw$[rsp]
  000f1	e8 00 00 00 00	 call	 PyDict_Size
  000f6	48 85 c0	 test	 rax, rax
  000f9	75 51		 jne	 SHORT $LN8@PyCFunctio@5
$LN7@PyCFunctio@5:

; 87   :             size = PyTuple_GET_SIZE(arg);

  000fb	48 8b 44 24 68	 mov	 rax, QWORD PTR arg$[rsp]
  00100	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00104	48 89 44 24 30	 mov	 QWORD PTR size$[rsp], rax

; 88   :             if (size == 0)

  00109	48 83 7c 24 30
	00		 cmp	 QWORD PTR size$[rsp], 0
  0010f	75 10		 jne	 SHORT $LN6@PyCFunctio@5

; 89   :                 return (*meth)(self, NULL);

  00111	33 d2		 xor	 edx, edx
  00113	48 8b 4c 24 28	 mov	 rcx, QWORD PTR self$[rsp]
  00118	ff 54 24 38	 call	 QWORD PTR meth$[rsp]
  0011c	e9 d3 00 00 00	 jmp	 $LN16@PyCFunctio@5
$LN6@PyCFunctio@5:

; 90   :             PyErr_Format(PyExc_TypeError,
; 91   :                 "%.200s() takes no arguments (%zd given)",
; 92   :                 f->m_ml->ml_name, size);

  00121	48 8b 44 24 20	 mov	 rax, QWORD PTR f$[rsp]
  00126	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0012a	4c 8b 4c 24 30	 mov	 r9, QWORD PTR size$[rsp]
  0012f	4c 8b 00	 mov	 r8, QWORD PTR [rax]
  00132	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CI@PIHKOAGH@?$CF?4200s?$CI?$CJ?5takes?5no?5arguments?5?$CI?$CFzd@
  00139	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00140	e8 00 00 00 00	 call	 PyErr_Format

; 93   :             return NULL;

  00145	33 c0		 xor	 eax, eax
  00147	e9 a8 00 00 00	 jmp	 $LN16@PyCFunctio@5
$LN8@PyCFunctio@5:

; 94   :         }
; 95   :         break;

  0014c	e9 82 00 00 00	 jmp	 $LN14@PyCFunctio@5
$LN5@PyCFunctio@5:

; 96   :     case METH_O:
; 97   :         if (kw == NULL || PyDict_Size(kw) == 0) {

  00151	48 83 7c 24 70
	00		 cmp	 QWORD PTR kw$[rsp], 0
  00157	74 0f		 je	 SHORT $LN3@PyCFunctio@5
  00159	48 8b 4c 24 70	 mov	 rcx, QWORD PTR kw$[rsp]
  0015e	e8 00 00 00 00	 call	 PyDict_Size
  00163	48 85 c0	 test	 rax, rax
  00166	75 52		 jne	 SHORT $LN4@PyCFunctio@5
$LN3@PyCFunctio@5:

; 98   :             size = PyTuple_GET_SIZE(arg);

  00168	48 8b 44 24 68	 mov	 rax, QWORD PTR arg$[rsp]
  0016d	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00171	48 89 44 24 30	 mov	 QWORD PTR size$[rsp], rax

; 99   :             if (size == 1)

  00176	48 83 7c 24 30
	01		 cmp	 QWORD PTR size$[rsp], 1
  0017c	75 14		 jne	 SHORT $LN2@PyCFunctio@5

; 100  :                 return (*meth)(self, PyTuple_GET_ITEM(arg, 0));

  0017e	48 8b 44 24 68	 mov	 rax, QWORD PTR arg$[rsp]
  00183	48 8b 50 70	 mov	 rdx, QWORD PTR [rax+112]
  00187	48 8b 4c 24 28	 mov	 rcx, QWORD PTR self$[rsp]
  0018c	ff 54 24 38	 call	 QWORD PTR meth$[rsp]
  00190	eb 62		 jmp	 SHORT $LN16@PyCFunctio@5
$LN2@PyCFunctio@5:

; 101  :             PyErr_Format(PyExc_TypeError,
; 102  :                 "%.200s() takes exactly one argument (%zd given)",
; 103  :                 f->m_ml->ml_name, size);

  00192	48 8b 44 24 20	 mov	 rax, QWORD PTR f$[rsp]
  00197	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0019b	4c 8b 4c 24 30	 mov	 r9, QWORD PTR size$[rsp]
  001a0	4c 8b 00	 mov	 r8, QWORD PTR [rax]
  001a3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DA@MJAFCLG@?$CF?4200s?$CI?$CJ?5takes?5exactly?5one?5argum@
  001aa	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  001b1	e8 00 00 00 00	 call	 PyErr_Format

; 104  :             return NULL;

  001b6	33 c0		 xor	 eax, eax
  001b8	eb 3a		 jmp	 SHORT $LN16@PyCFunctio@5
$LN4@PyCFunctio@5:

; 105  :         }
; 106  :         break;

  001ba	eb 17		 jmp	 SHORT $LN14@PyCFunctio@5
$LN1@PyCFunctio@5:

; 107  :     default:
; 108  :         PyErr_SetString(PyExc_SystemError, "Bad call flags in "
; 109  :                         "PyCFunction_Call. METH_OLDARGS is no "
; 110  :                         "longer supported!");

  001bc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0EJ@HBEDIBIN@Bad?5call?5flags?5in?5PyCFunction_Ca@
  001c3	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SystemError
  001ca	e8 00 00 00 00	 call	 PyErr_SetString

; 111  : 
; 112  :         return NULL;

  001cf	33 c0		 xor	 eax, eax
  001d1	eb 21		 jmp	 SHORT $LN16@PyCFunctio@5
$LN14@PyCFunctio@5:

; 113  :     }
; 114  :     PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
; 115  :                  f->m_ml->ml_name);

  001d3	48 8b 44 24 20	 mov	 rax, QWORD PTR f$[rsp]
  001d8	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  001dc	4c 8b 00	 mov	 r8, QWORD PTR [rax]
  001df	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@NIOJMLLF@?$CF?4200s?$CI?$CJ?5takes?5no?5keyword?5argume@
  001e6	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  001ed	e8 00 00 00 00	 call	 PyErr_Format

; 116  :     return NULL;

  001f2	33 c0		 xor	 eax, eax
$LN16@PyCFunctio@5:

; 117  : }

  001f4	48 83 c4 58	 add	 rsp, 88			; 00000058H
  001f8	c3		 ret	 0
PyCFunction_Call ENDP
_TEXT	ENDS
PUBLIC	_Py_DecRef
PUBLIC	??_C@_1EM@HFMJMDDM@?$AAg?$AA?9?$AA?$DO?$AAg?$AAc?$AA?4?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AAG?$AAC?$AA_?$AAR?$AAE?$AAF?$AAS?$AA_?$AAU?$AAN?$AAT?$AAR@ ; `string'
PUBLIC	??_C@_1DE@IHDBABOA@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAm?$AAe?$AAt?$AAh?$AAo?$AAd?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@ ; `string'
PUBLIC	??_C@_0N@EGGLIEGF@meth_dealloc?$AA@		; `string'
EXTRN	PyObject_GC_Del:PROC
EXTRN	_PyParallel_ContextGuardFailure:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$meth_dealloc DD imagerel meth_dealloc
	DD	imagerel meth_dealloc+420
	DD	imagerel $unwind$meth_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$meth_dealloc DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_1EM@HFMJMDDM@?$AAg?$AA?9?$AA?$DO?$AAg?$AAc?$AA?4?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AAG?$AAC?$AA_?$AAR?$AAE?$AAF?$AAS?$AA_?$AAU?$AAN?$AAT?$AAR@
CONST	SEGMENT
??_C@_1EM@HFMJMDDM@?$AAg?$AA?9?$AA?$DO?$AAg?$AAc?$AA?4?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AAG?$AAC?$AA_?$AAR?$AAE?$AAF?$AAS?$AA_?$AAU?$AAN?$AAT?$AAR@ DB 'g'
	DB	00H, '-', 00H, '>', 00H, 'g', 00H, 'c', 00H, '.', 00H, 'g', 00H
	DB	'c', 00H, '_', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 's', 00H, ' '
	DB	00H, '!', 00H, '=', 00H, ' ', 00H, '_', 00H, 'P', 00H, 'y', 00H
	DB	'G', 00H, 'C', 00H, '_', 00H, 'R', 00H, 'E', 00H, 'F', 00H, 'S'
	DB	00H, '_', 00H, 'U', 00H, 'N', 00H, 'T', 00H, 'R', 00H, 'A', 00H
	DB	'C', 00H, 'K', 00H, 'E', 00H, 'D', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DE@IHDBABOA@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAm?$AAe?$AAt?$AAh?$AAo?$AAd?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
CONST	SEGMENT
??_C@_1DE@IHDBABOA@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAm?$AAe?$AAt?$AAh?$AAo?$AAd?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@ DB '.'
	DB	00H, '.', 00H, '\', 00H, 'O', 00H, 'b', 00H, 'j', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 's', 00H, '\', 00H, 'm', 00H, 'e', 00H, 't'
	DB	00H, 'h', 00H, 'o', 00H, 'd', 00H, 'o', 00H, 'b', 00H, 'j', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, '.', 00H, 'c', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@EGGLIEGF@meth_dealloc?$AA@
CONST	SEGMENT
??_C@_0N@EGGLIEGF@meth_dealloc?$AA@ DB 'meth_dealloc', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT meth_dealloc
_TEXT	SEGMENT
g$20452 = 48
tv85 = 56
m$ = 80
meth_dealloc PROC					; COMDAT

; 123  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 124  :     Py_GUARD

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	74 1c		 je	 SHORT $LN15@meth_deall
  00012	45 33 c9	 xor	 r9d, r9d
  00015	41 b8 7c 00 00
	00		 mov	 r8d, 124		; 0000007cH
  0001b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@JCLMKNNL@?4?4?2Objects?2methodobject?4c?$AA@
  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@EGGLIEGF@meth_dealloc?$AA@
  00029	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN15@meth_deall:

; 125  :     _PyObject_GC_UNTRACK(m);

  0002e	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00036	4c 8b 4c 24 50	 mov	 r9, QWORD PTR m$[rsp]
  0003b	41 b8 7d 00 00
	00		 mov	 r8d, 125		; 0000007dH
  00041	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@JCLMKNNL@?4?4?2Objects?2methodobject?4c?$AA@
  00048	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@EGGLIEGF@meth_dealloc?$AA@
  0004f	e8 00 00 00 00	 call	 _PyParallel_Guard
  00054	85 c0		 test	 eax, eax
  00056	0f 85 c1 00 00
	00		 jne	 $LN14@meth_deall
$LN13@meth_deall:
  0005c	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00064	4c 8b 4c 24 50	 mov	 r9, QWORD PTR m$[rsp]
  00069	41 b8 7d 00 00
	00		 mov	 r8d, 125		; 0000007dH
  0006f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@JCLMKNNL@?4?4?2Objects?2methodobject?4c?$AA@
  00076	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@EGGLIEGF@meth_dealloc?$AA@
  0007d	e8 00 00 00 00	 call	 _PyParallel_Guard
  00082	85 c0		 test	 eax, eax
  00084	74 0b		 je	 SHORT $LN18@meth_deall
  00086	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR tv85[rsp], 0
  0008f	eb 0e		 jmp	 SHORT $LN19@meth_deall
$LN18@meth_deall:
  00091	48 8b 44 24 50	 mov	 rax, QWORD PTR m$[rsp]
  00096	48 83 e8 18	 sub	 rax, 24
  0009a	48 89 44 24 38	 mov	 QWORD PTR tv85[rsp], rax
$LN19@meth_deall:
  0009f	48 8b 44 24 38	 mov	 rax, QWORD PTR tv85[rsp]
  000a4	48 89 44 24 30	 mov	 QWORD PTR g$20452[rsp], rax
  000a9	48 8b 44 24 30	 mov	 rax, QWORD PTR g$20452[rsp]
  000ae	48 83 78 10 fe	 cmp	 QWORD PTR [rax+16], -2
  000b3	75 1c		 jne	 SHORT $LN20@meth_deall
  000b5	41 b8 7d 00 00
	00		 mov	 r8d, 125		; 0000007dH
  000bb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DE@IHDBABOA@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAm?$AAe?$AAt?$AAh?$AAo?$AAd?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  000c2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EM@HFMJMDDM@?$AAg?$AA?9?$AA?$DO?$AAg?$AAc?$AA?4?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AAG?$AAC?$AA_?$AAR?$AAE?$AAF?$AAS?$AA_?$AAU?$AAN?$AAT?$AAR@
  000c9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000cf	33 c0		 xor	 eax, eax
$LN20@meth_deall:
  000d1	48 8b 44 24 30	 mov	 rax, QWORD PTR g$20452[rsp]
  000d6	48 c7 40 10 fe
	ff ff ff	 mov	 QWORD PTR [rax+16], -2
  000de	48 8b 44 24 30	 mov	 rax, QWORD PTR g$20452[rsp]
  000e3	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  000e7	48 8b 4c 24 30	 mov	 rcx, QWORD PTR g$20452[rsp]
  000ec	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000ef	48 89 08	 mov	 QWORD PTR [rax], rcx
  000f2	48 8b 44 24 30	 mov	 rax, QWORD PTR g$20452[rsp]
  000f7	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000fa	48 8b 4c 24 30	 mov	 rcx, QWORD PTR g$20452[rsp]
  000ff	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00103	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  00107	48 8b 44 24 30	 mov	 rax, QWORD PTR g$20452[rsp]
  0010c	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
  00113	33 c0		 xor	 eax, eax
  00115	85 c0		 test	 eax, eax
  00117	0f 85 3f ff ff
	ff		 jne	 $LN13@meth_deall
$LN14@meth_deall:
$LN10@meth_deall:

; 126  :     Py_XDECREF(m->m_self);

  0011d	48 8b 44 24 50	 mov	 rax, QWORD PTR m$[rsp]
  00122	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  00127	74 0e		 je	 SHORT $LN7@meth_deall
  00129	48 8b 44 24 50	 mov	 rax, QWORD PTR m$[rsp]
  0012e	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  00132	e8 00 00 00 00	 call	 _Py_DecRef
$LN7@meth_deall:
  00137	33 c0		 xor	 eax, eax
  00139	85 c0		 test	 eax, eax
  0013b	75 e0		 jne	 SHORT $LN10@meth_deall
$LN6@meth_deall:

; 127  :     Py_XDECREF(m->m_module);

  0013d	48 8b 44 24 50	 mov	 rax, QWORD PTR m$[rsp]
  00142	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  00147	74 0e		 je	 SHORT $LN3@meth_deall
  00149	48 8b 44 24 50	 mov	 rax, QWORD PTR m$[rsp]
  0014e	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  00152	e8 00 00 00 00	 call	 _Py_DecRef
$LN3@meth_deall:
  00157	33 c0		 xor	 eax, eax
  00159	85 c0		 test	 eax, eax
  0015b	75 e0		 jne	 SHORT $LN6@meth_deall

; 128  :     if (numfree < PyCFunction_MAXFREELIST) {

  0015d	81 3d 00 00 00
	00 00 01 00 00	 cmp	 DWORD PTR numfree, 256	; 00000100H
  00167	7d 2c		 jge	 SHORT $LN2@meth_deall

; 129  :         m->m_self = (PyObject *)free_list;

  00169	48 8b 44 24 50	 mov	 rax, QWORD PTR m$[rsp]
  0016e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR free_list
  00175	48 89 48 68	 mov	 QWORD PTR [rax+104], rcx

; 130  :         free_list = m;

  00179	48 8b 44 24 50	 mov	 rax, QWORD PTR m$[rsp]
  0017e	48 89 05 00 00
	00 00		 mov	 QWORD PTR free_list, rax

; 131  :         numfree++;

  00185	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR numfree
  0018b	ff c0		 inc	 eax
  0018d	89 05 00 00 00
	00		 mov	 DWORD PTR numfree, eax

; 132  :     }
; 133  :     else {

  00193	eb 0a		 jmp	 SHORT $LN1@meth_deall
$LN2@meth_deall:

; 134  :         PyObject_GC_Del(m);

  00195	48 8b 4c 24 50	 mov	 rcx, QWORD PTR m$[rsp]
  0019a	e8 00 00 00 00	 call	 PyObject_GC_Del
$LN1@meth_deall:

; 135  :     }
; 136  : }

  0019f	48 83 c4 48	 add	 rsp, 72			; 00000048H
  001a3	c3		 ret	 0
meth_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
EXTRN	_Py_Dealloc:PROC
EXTRN	_Py_NegativeRefcount:PROC
EXTRN	Px_DecRef:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN13
	DD	imagerel $LN13+257
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
tv81 = 48
op$ = 80
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN13:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	0f 85 e6 00 00
	00		 jne	 $LN8@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00016	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0001b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0001f	48 83 e0 20	 and	 rax, 32			; 00000020H
  00023	48 85 c0	 test	 rax, rax
  00026	75 14		 jne	 SHORT $LN6@Py_DecRef
  00028	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0002d	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00031	48 25 80 00 00
	00		 and	 rax, 128		; 00000080H
  00037	48 85 c0	 test	 rax, rax
  0003a	74 0f		 je	 SHORT $LN7@Py_DecRef
$LN6@Py_DecRef:

; 926  :             Px_DECREF(op);

  0003c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  00041	e8 00 00 00 00	 call	 Px_DecRef
  00046	e9 b1 00 00 00	 jmp	 $LN5@Py_DecRef
$LN7@Py_DecRef:

; 927  :         else if (!Px_ISPX(op)) {

  0004b	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00050	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00054	48 83 e0 02	 and	 rax, 2
  00058	48 85 c0	 test	 rax, rax
  0005b	0f 85 9b 00 00
	00		 jne	 $LN4@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;

  00061	e8 00 00 00 00	 call	 _Py_PXCTX
  00066	85 c0		 test	 eax, eax
  00068	74 02		 je	 SHORT $LN11@Py_DecRef
  0006a	eb 11		 jmp	 SHORT $LN12@Py_DecRef
$LN11@Py_DecRef:
  0006c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00073	48 ff c8	 dec	 rax
  00076	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN12@Py_DecRef:

; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  0007d	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00082	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00086	48 ff c8	 dec	 rax
  00089	48 89 44 24 30	 mov	 QWORD PTR tv81[rsp], rax
  0008e	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00093	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv81[rsp]
  00098	48 89 48 50	 mov	 QWORD PTR [rax+80], rcx
  0009c	48 83 7c 24 30
	00		 cmp	 QWORD PTR tv81[rsp], 0
  000a2	74 4e		 je	 SHORT $LN3@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);

  000a4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000ac	4c 8b 4c 24 50	 mov	 r9, QWORD PTR op$[rsp]
  000b1	41 b8 a2 03 00
	00		 mov	 r8d, 930		; 000003a2H
  000b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000c5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ca	85 c0		 test	 eax, eax
  000cc	75 22		 jne	 SHORT $LN2@Py_DecRef
  000ce	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  000d3	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000d8	7d 16		 jge	 SHORT $LN2@Py_DecRef
  000da	4c 8b 44 24 50	 mov	 r8, QWORD PTR op$[rsp]
  000df	ba a2 03 00 00	 mov	 edx, 930		; 000003a2H
  000e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000eb	e8 00 00 00 00	 call	 _Py_NegativeRefcount
$LN2@Py_DecRef:

; 931  :             } else

  000f0	eb 0a		 jmp	 SHORT $LN1@Py_DecRef
$LN3@Py_DecRef:

; 932  :                 _Py_Dealloc((PyObject *)(op));

  000f2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  000f7	e8 00 00 00 00	 call	 _Py_Dealloc
$LN1@Py_DecRef:
$LN4@Py_DecRef:
$LN5@Py_DecRef:
$LN8@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  000fc	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00100	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
EXTRN	_Py_NoneStruct:BYTE
EXTRN	PyUnicode_FromString:PROC
;	COMDAT pdata
; File c:\src\pyparallel\objects\methodobject.c
pdata	SEGMENT
$pdata$meth_get__doc__ DD imagerel meth_get__doc__
	DD	imagerel meth_get__doc__+76
	DD	imagerel $unwind$meth_get__doc__
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$meth_get__doc__ DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT meth_get__doc__
_TEXT	SEGMENT
doc$ = 32
m$ = 64
closure$ = 72
meth_get__doc__ PROC					; COMDAT

; 140  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 141  :     const char *doc = m->m_ml->ml_doc;

  0000e	48 8b 44 24 40	 mov	 rax, QWORD PTR m$[rsp]
  00013	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00017	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  0001b	48 89 44 24 20	 mov	 QWORD PTR doc$[rsp], rax

; 142  : 
; 143  :     if (doc != NULL)

  00020	48 83 7c 24 20
	00		 cmp	 QWORD PTR doc$[rsp], 0
  00026	74 0c		 je	 SHORT $LN1@meth_get__

; 144  :         return PyUnicode_FromString(doc);

  00028	48 8b 4c 24 20	 mov	 rcx, QWORD PTR doc$[rsp]
  0002d	e8 00 00 00 00	 call	 PyUnicode_FromString
  00032	eb 13		 jmp	 SHORT $LN2@meth_get__
$LN1@meth_get__:

; 145  :     Py_INCREF(Py_None);

  00034	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  0003b	e8 00 00 00 00	 call	 _Py_IncRef

; 146  :     return Py_None;

  00040	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
$LN2@meth_get__:

; 147  : }

  00047	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004b	c3		 ret	 0
meth_get__doc__ ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$meth_get__name__ DD imagerel meth_get__name__
	DD	imagerel meth_get__name__+36
	DD	imagerel $unwind$meth_get__name__
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$meth_get__name__ DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT meth_get__name__
_TEXT	SEGMENT
m$ = 48
closure$ = 56
meth_get__name__ PROC					; COMDAT

; 151  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 152  :     return PyUnicode_FromString(m->m_ml->ml_name);

  0000e	48 8b 44 24 30	 mov	 rax, QWORD PTR m$[rsp]
  00013	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00017	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0001a	e8 00 00 00 00	 call	 PyUnicode_FromString

; 153  : }

  0001f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00023	c3		 ret	 0
meth_get__name__ ENDP
_TEXT	ENDS
PUBLIC	??_C@_05BMJGAJPB@?$CFS?4?$CFs?$AA@		; `string'
PUBLIC	??_C@_0DI@HJOCGJPC@?$DMmethod?$DO?4__class__?4__qualname__?5@ ; `string'
EXTRN	PyUnicode_FromFormat:PROC
EXTRN	_PyObject_GetAttrId:PROC
EXTRN	PyType_IsSubtype:PROC
EXTRN	PyModule_Type:BYTE
EXTRN	_tls_index:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$meth_get__qualname__ DD imagerel meth_get__qualname__
	DD	imagerel meth_get__qualname__+352
	DD	imagerel $unwind$meth_get__qualname__
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$meth_get__qualname__ DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_05BMJGAJPB@?$CFS?4?$CFs?$AA@
CONST	SEGMENT
??_C@_05BMJGAJPB@?$CFS?4?$CFs?$AA@ DB '%S.%s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@HJOCGJPC@?$DMmethod?$DO?4__class__?4__qualname__?5@
CONST	SEGMENT
??_C@_0DI@HJOCGJPC@?$DMmethod?$DO?4__class__?4__qualname__?5@ DB '<method'
	DB	'>.__class__.__qualname__ is not a unicode object', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT meth_get__qualname__
_TEXT	SEGMENT
res$ = 32
type_qualname$ = 40
type$ = 48
tv87 = 56
m$ = 80
closure$ = 88
meth_get__qualname__ PROC				; COMDAT

; 157  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 158  :     /* If __self__ is a module or NULL, return m.__name__
; 159  :        (e.g. len.__qualname__ == 'len')
; 160  : 
; 161  :        If __self__ is a type, return m.__self__.__qualname__ + '.' + m.__name__
; 162  :        (e.g. dict.fromkeys.__qualname__ == 'dict.fromkeys')
; 163  : 
; 164  :        Otherwise return type(m.__self__).__qualname__ + '.' + m.__name__
; 165  :        (e.g. [].append.__qualname__ == 'list.append') */
; 166  :     PyObject *type, *type_qualname, *res;
; 167  :     _Py_IDENTIFIER(__qualname__);
; 168  : 
; 169  :     if (m->m_self == NULL || PyModule_Check(m->m_self))

  0000e	48 8b 44 24 50	 mov	 rax, QWORD PTR m$[rsp]
  00013	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  00018	74 33		 je	 SHORT $LN8@meth_get__@2
  0001a	48 8b 44 24 50	 mov	 rax, QWORD PTR m$[rsp]
  0001f	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00023	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyModule_Type
  0002a	48 39 48 58	 cmp	 QWORD PTR [rax+88], rcx
  0002e	74 1d		 je	 SHORT $LN7@meth_get__@2
  00030	48 8b 44 24 50	 mov	 rax, QWORD PTR m$[rsp]
  00035	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00039	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyModule_Type
  00040	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  00044	e8 00 00 00 00	 call	 PyType_IsSubtype
  00049	85 c0		 test	 eax, eax
  0004b	74 16		 je	 SHORT $LN9@meth_get__@2
$LN7@meth_get__@2:
$LN8@meth_get__@2:

; 170  :         return PyUnicode_FromString(m->m_ml->ml_name);

  0004d	48 8b 44 24 50	 mov	 rax, QWORD PTR m$[rsp]
  00052	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00056	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00059	e8 00 00 00 00	 call	 PyUnicode_FromString
  0005e	e9 f8 00 00 00	 jmp	 $LN10@meth_get__@2
$LN9@meth_get__@2:

; 171  : 
; 172  :     type = PyType_Check(m->m_self) ? m->m_self : (PyObject*)Py_TYPE(m->m_self);

  00063	48 8b 44 24 50	 mov	 rax, QWORD PTR m$[rsp]
  00068	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0006c	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00070	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00076	25 00 00 00 80	 and	 eax, -2147483648	; ffffffff80000000H
  0007b	85 c0		 test	 eax, eax
  0007d	74 10		 je	 SHORT $LN12@meth_get__@2
  0007f	48 8b 44 24 50	 mov	 rax, QWORD PTR m$[rsp]
  00084	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00088	48 89 44 24 38	 mov	 QWORD PTR tv87[rsp], rax
  0008d	eb 12		 jmp	 SHORT $LN13@meth_get__@2
$LN12@meth_get__@2:
  0008f	48 8b 44 24 50	 mov	 rax, QWORD PTR m$[rsp]
  00094	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00098	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0009c	48 89 44 24 38	 mov	 QWORD PTR tv87[rsp], rax
$LN13@meth_get__@2:
  000a1	48 8b 44 24 38	 mov	 rax, QWORD PTR tv87[rsp]
  000a6	48 89 44 24 30	 mov	 QWORD PTR type$[rsp], rax

; 173  : 
; 174  :     type_qualname = _PyObject_GetAttrId(type, &PyId___qualname__);

  000ab	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId___qualname__@?1??meth_get__qualname__@@9@9
  000b0	8b c0		 mov	 eax, eax
  000b2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  000b8	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  000c1	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  000c5	48 8b d0	 mov	 rdx, rax
  000c8	48 8b 4c 24 30	 mov	 rcx, QWORD PTR type$[rsp]
  000cd	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  000d2	48 89 44 24 28	 mov	 QWORD PTR type_qualname$[rsp], rax

; 175  :     if (type_qualname == NULL)

  000d7	48 83 7c 24 28
	00		 cmp	 QWORD PTR type_qualname$[rsp], 0
  000dd	75 04		 jne	 SHORT $LN6@meth_get__@2

; 176  :         return NULL;

  000df	33 c0		 xor	 eax, eax
  000e1	eb 78		 jmp	 SHORT $LN10@meth_get__@2
$LN6@meth_get__@2:

; 177  : 
; 178  :     if (!PyUnicode_Check(type_qualname)) {

  000e3	48 8b 44 24 28	 mov	 rax, QWORD PTR type_qualname$[rsp]
  000e8	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000ec	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000f2	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  000f7	85 c0		 test	 eax, eax
  000f9	75 2f		 jne	 SHORT $LN5@meth_get__@2

; 179  :         PyErr_SetString(PyExc_TypeError, "<method>.__class__."
; 180  :                         "__qualname__ is not a unicode object");

  000fb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DI@HJOCGJPC@?$DMmethod?$DO?4__class__?4__qualname__?5@
  00102	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00109	e8 00 00 00 00	 call	 PyErr_SetString
$LN4@meth_get__@2:

; 181  :         Py_XDECREF(type_qualname);

  0010e	48 83 7c 24 28
	00		 cmp	 QWORD PTR type_qualname$[rsp], 0
  00114	74 0a		 je	 SHORT $LN1@meth_get__@2
  00116	48 8b 4c 24 28	 mov	 rcx, QWORD PTR type_qualname$[rsp]
  0011b	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@meth_get__@2:
  00120	33 c0		 xor	 eax, eax
  00122	85 c0		 test	 eax, eax
  00124	75 e8		 jne	 SHORT $LN4@meth_get__@2

; 182  :         return NULL;

  00126	33 c0		 xor	 eax, eax
  00128	eb 31		 jmp	 SHORT $LN10@meth_get__@2
$LN5@meth_get__@2:

; 183  :     }
; 184  : 
; 185  :     res = PyUnicode_FromFormat("%S.%s", type_qualname, m->m_ml->ml_name);

  0012a	48 8b 44 24 50	 mov	 rax, QWORD PTR m$[rsp]
  0012f	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00133	4c 8b 00	 mov	 r8, QWORD PTR [rax]
  00136	48 8b 54 24 28	 mov	 rdx, QWORD PTR type_qualname$[rsp]
  0013b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05BMJGAJPB@?$CFS?4?$CFs?$AA@
  00142	e8 00 00 00 00	 call	 PyUnicode_FromFormat
  00147	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax

; 186  :     Py_DECREF(type_qualname);

  0014c	48 8b 4c 24 28	 mov	 rcx, QWORD PTR type_qualname$[rsp]
  00151	e8 00 00 00 00	 call	 _Py_DecRef

; 187  :     return res;

  00156	48 8b 44 24 20	 mov	 rax, QWORD PTR res$[rsp]
$LN10@meth_get__@2:

; 188  : }

  0015b	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0015f	c3		 ret	 0
meth_get__qualname__ ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@OOKCHEEM@meth_traverse?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$meth_traverse DD imagerel meth_traverse
	DD	imagerel meth_traverse+206
	DD	imagerel $unwind$meth_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$meth_traverse DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT ??_C@_0O@OOKCHEEM@meth_traverse?$AA@
CONST	SEGMENT
??_C@_0O@OOKCHEEM@meth_traverse?$AA@ DB 'meth_traverse', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT meth_traverse
_TEXT	SEGMENT
vret$20537 = 32
vret$20545 = 36
m$ = 64
visit$ = 72
arg$ = 80
meth_traverse PROC					; COMDAT

; 192  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN12@meth_trave:

; 193  :     Py_VISIT(m->m_self);

  00013	e8 00 00 00 00	 call	 _Py_PXCTX
  00018	85 c0		 test	 eax, eax
  0001a	74 1c		 je	 SHORT $LN9@meth_trave
  0001c	45 33 c9	 xor	 r9d, r9d
  0001f	41 b8 c1 00 00
	00		 mov	 r8d, 193		; 000000c1H
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@JCLMKNNL@?4?4?2Objects?2methodobject?4c?$AA@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@OOKCHEEM@meth_traverse?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN9@meth_trave:
  00038	48 8b 44 24 40	 mov	 rax, QWORD PTR m$[rsp]
  0003d	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  00042	74 23		 je	 SHORT $LN8@meth_trave
  00044	48 8b 54 24 50	 mov	 rdx, QWORD PTR arg$[rsp]
  00049	48 8b 44 24 40	 mov	 rax, QWORD PTR m$[rsp]
  0004e	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  00052	ff 54 24 48	 call	 QWORD PTR visit$[rsp]
  00056	89 44 24 20	 mov	 DWORD PTR vret$20537[rsp], eax
  0005a	83 7c 24 20 00	 cmp	 DWORD PTR vret$20537[rsp], 0
  0005f	74 06		 je	 SHORT $LN7@meth_trave
  00061	8b 44 24 20	 mov	 eax, DWORD PTR vret$20537[rsp]
  00065	eb 62		 jmp	 SHORT $LN13@meth_trave
$LN7@meth_trave:
$LN8@meth_trave:
  00067	33 c0		 xor	 eax, eax
  00069	85 c0		 test	 eax, eax
  0006b	75 a6		 jne	 SHORT $LN12@meth_trave
$LN6@meth_trave:

; 194  :     Py_VISIT(m->m_module);

  0006d	e8 00 00 00 00	 call	 _Py_PXCTX
  00072	85 c0		 test	 eax, eax
  00074	74 1c		 je	 SHORT $LN3@meth_trave
  00076	45 33 c9	 xor	 r9d, r9d
  00079	41 b8 c2 00 00
	00		 mov	 r8d, 194		; 000000c2H
  0007f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@JCLMKNNL@?4?4?2Objects?2methodobject?4c?$AA@
  00086	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@OOKCHEEM@meth_traverse?$AA@
  0008d	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@meth_trave:
  00092	48 8b 44 24 40	 mov	 rax, QWORD PTR m$[rsp]
  00097	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  0009c	74 23		 je	 SHORT $LN2@meth_trave
  0009e	48 8b 54 24 50	 mov	 rdx, QWORD PTR arg$[rsp]
  000a3	48 8b 44 24 40	 mov	 rax, QWORD PTR m$[rsp]
  000a8	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  000ac	ff 54 24 48	 call	 QWORD PTR visit$[rsp]
  000b0	89 44 24 24	 mov	 DWORD PTR vret$20545[rsp], eax
  000b4	83 7c 24 24 00	 cmp	 DWORD PTR vret$20545[rsp], 0
  000b9	74 06		 je	 SHORT $LN1@meth_trave
  000bb	8b 44 24 24	 mov	 eax, DWORD PTR vret$20545[rsp]
  000bf	eb 08		 jmp	 SHORT $LN13@meth_trave
$LN1@meth_trave:
$LN2@meth_trave:
  000c1	33 c0		 xor	 eax, eax
  000c3	85 c0		 test	 eax, eax
  000c5	75 a6		 jne	 SHORT $LN6@meth_trave

; 195  :     return 0;

  000c7	33 c0		 xor	 eax, eax
$LN13@meth_trave:

; 196  : }

  000c9	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000cd	c3		 ret	 0
meth_traverse ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$meth_get__self__ DD imagerel meth_get__self__
	DD	imagerel meth_get__self__+108
	DD	imagerel $unwind$meth_get__self__
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$meth_get__self__ DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT meth_get__self__
_TEXT	SEGMENT
self$ = 32
tv69 = 40
m$ = 64
closure$ = 72
meth_get__self__ PROC					; COMDAT

; 200  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 201  :     PyObject *self;
; 202  : 
; 203  :     self = PyCFunction_GET_SELF(m);

  0000e	48 8b 44 24 40	 mov	 rax, QWORD PTR m$[rsp]
  00013	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00017	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
  0001a	83 e0 20	 and	 eax, 32			; 00000020H
  0001d	85 c0		 test	 eax, eax
  0001f	74 0b		 je	 SHORT $LN4@meth_get__@3
  00021	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR tv69[rsp], 0
  0002a	eb 0e		 jmp	 SHORT $LN5@meth_get__@3
$LN4@meth_get__@3:
  0002c	48 8b 44 24 40	 mov	 rax, QWORD PTR m$[rsp]
  00031	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00035	48 89 44 24 28	 mov	 QWORD PTR tv69[rsp], rax
$LN5@meth_get__@3:
  0003a	48 8b 44 24 28	 mov	 rax, QWORD PTR tv69[rsp]
  0003f	48 89 44 24 20	 mov	 QWORD PTR self$[rsp], rax

; 204  :     if (self == NULL)

  00044	48 83 7c 24 20
	00		 cmp	 QWORD PTR self$[rsp], 0
  0004a	75 0c		 jne	 SHORT $LN1@meth_get__@3

; 205  :         self = Py_None;

  0004c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00053	48 89 44 24 20	 mov	 QWORD PTR self$[rsp], rax
$LN1@meth_get__@3:

; 206  :     Py_INCREF(self);

  00058	48 8b 4c 24 20	 mov	 rcx, QWORD PTR self$[rsp]
  0005d	e8 00 00 00 00	 call	 _Py_IncRef

; 207  :     return self;

  00062	48 8b 44 24 20	 mov	 rax, QWORD PTR self$[rsp]

; 208  : }

  00067	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0006b	c3		 ret	 0
meth_get__self__ ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CI@LNKKCIDJ@?$DMbuilt?9in?5method?5?$CFs?5of?5?$CFs?5object@ ; `string'
PUBLIC	??_C@_0BH@CFEIOCIE@?$DMbuilt?9in?5function?5?$CFs?$DO?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$meth_repr DD imagerel meth_repr
	DD	imagerel meth_repr+153
	DD	imagerel $unwind$meth_repr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$meth_repr DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT ??_C@_0CI@LNKKCIDJ@?$DMbuilt?9in?5method?5?$CFs?5of?5?$CFs?5object@
CONST	SEGMENT
??_C@_0CI@LNKKCIDJ@?$DMbuilt?9in?5method?5?$CFs?5of?5?$CFs?5object@ DB '<'
	DB	'built-in method %s of %s object at %p>', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@CFEIOCIE@?$DMbuilt?9in?5function?5?$CFs?$DO?$AA@
CONST	SEGMENT
??_C@_0BH@CFEIOCIE@?$DMbuilt?9in?5function?5?$CFs?$DO?$AA@ DB '<built-in '
	DB	'function %s>', 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT meth_repr
_TEXT	SEGMENT
m$ = 48
meth_repr PROC						; COMDAT

; 227  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 228  :     if (m->m_self == NULL || PyModule_Check(m->m_self))

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR m$[rsp]
  0000e	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  00013	74 33		 je	 SHORT $LN2@meth_repr
  00015	48 8b 44 24 30	 mov	 rax, QWORD PTR m$[rsp]
  0001a	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyModule_Type
  00025	48 39 48 58	 cmp	 QWORD PTR [rax+88], rcx
  00029	74 1d		 je	 SHORT $LN1@meth_repr
  0002b	48 8b 44 24 30	 mov	 rax, QWORD PTR m$[rsp]
  00030	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00034	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyModule_Type
  0003b	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  0003f	e8 00 00 00 00	 call	 PyType_IsSubtype
  00044	85 c0		 test	 eax, eax
  00046	74 1a		 je	 SHORT $LN3@meth_repr
$LN1@meth_repr:
$LN2@meth_repr:

; 229  :         return PyUnicode_FromFormat("<built-in function %s>",
; 230  :                                    m->m_ml->ml_name);

  00048	48 8b 44 24 30	 mov	 rax, QWORD PTR m$[rsp]
  0004d	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00051	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00054	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BH@CFEIOCIE@?$DMbuilt?9in?5function?5?$CFs?$DO?$AA@
  0005b	e8 00 00 00 00	 call	 PyUnicode_FromFormat
  00060	eb 32		 jmp	 SHORT $LN4@meth_repr
$LN3@meth_repr:

; 231  :     return PyUnicode_FromFormat("<built-in method %s of %s object at %p>",
; 232  :                                m->m_ml->ml_name,
; 233  :                                m->m_self->ob_type->tp_name,
; 234  :                                m->m_self);

  00062	48 8b 44 24 30	 mov	 rax, QWORD PTR m$[rsp]
  00067	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0006b	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0006f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR m$[rsp]
  00074	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  00078	48 8b 54 24 30	 mov	 rdx, QWORD PTR m$[rsp]
  0007d	4c 8b 4a 68	 mov	 r9, QWORD PTR [rdx+104]
  00081	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  00085	48 8b 11	 mov	 rdx, QWORD PTR [rcx]
  00088	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CI@LNKKCIDJ@?$DMbuilt?9in?5method?5?$CFs?5of?5?$CFs?5object@
  0008f	e8 00 00 00 00	 call	 PyUnicode_FromFormat
$LN4@meth_repr:

; 235  : }

  00094	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00098	c3		 ret	 0
meth_repr ENDP
_TEXT	ENDS
EXTRN	_Py_FalseStruct:BYTE
EXTRN	_Py_TrueStruct:BYTE
EXTRN	_Py_NotImplementedStruct:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$meth_richcompare DD imagerel meth_richcompare
	DD	imagerel meth_richcompare+344
	DD	imagerel $unwind$meth_richcompare
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$meth_richcompare DD 011301H
	DD	0c213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT meth_richcompare
_TEXT	SEGMENT
res$ = 32
a$ = 40
b$ = 48
eq$ = 56
tv74 = 60
tv81 = 64
tv84 = 72
tv86 = 80
self$ = 112
other$ = 120
op$ = 128
meth_richcompare PROC					; COMDAT

; 239  : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 240  :     PyCFunctionObject *a, *b;
; 241  :     PyObject *res;
; 242  :     int eq;
; 243  : 
; 244  :     if ((op != Py_EQ && op != Py_NE) ||
; 245  :         !PyCFunction_Check(self) ||
; 246  :         !PyCFunction_Check(other))

  00013	83 bc 24 80 00
	00 00 02	 cmp	 DWORD PTR op$[rsp], 2
  0001b	74 0a		 je	 SHORT $LN4@meth_richc
  0001d	83 bc 24 80 00
	00 00 03	 cmp	 DWORD PTR op$[rsp], 3
  00025	75 24		 jne	 SHORT $LN5@meth_richc
$LN4@meth_richc:
  00027	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyCFunction_Type
  0002e	48 8b 4c 24 70	 mov	 rcx, QWORD PTR self$[rsp]
  00033	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00037	75 12		 jne	 SHORT $LN5@meth_richc
  00039	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyCFunction_Type
  00040	48 8b 4c 24 78	 mov	 rcx, QWORD PTR other$[rsp]
  00045	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00049	74 18		 je	 SHORT $LN6@meth_richc
$LN5@meth_richc:

; 247  :     {
; 248  :         Py_RETURN_NOTIMPLEMENTED;

  0004b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NotImplementedStruct
  00052	e8 00 00 00 00	 call	 _Py_IncRef
  00057	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NotImplementedStruct
  0005e	e9 f0 00 00 00	 jmp	 $LN7@meth_richc
$LN6@meth_richc:

; 249  :     }
; 250  :     a = (PyCFunctionObject *)self;

  00063	48 8b 44 24 70	 mov	 rax, QWORD PTR self$[rsp]
  00068	48 89 44 24 28	 mov	 QWORD PTR a$[rsp], rax

; 251  :     b = (PyCFunctionObject *)other;

  0006d	48 8b 44 24 78	 mov	 rax, QWORD PTR other$[rsp]
  00072	48 89 44 24 30	 mov	 QWORD PTR b$[rsp], rax

; 252  :     eq = a->m_self == b->m_self;

  00077	48 8b 44 24 28	 mov	 rax, QWORD PTR a$[rsp]
  0007c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR b$[rsp]
  00081	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]
  00085	48 39 48 68	 cmp	 QWORD PTR [rax+104], rcx
  00089	75 0a		 jne	 SHORT $LN9@meth_richc
  0008b	c7 44 24 3c 01
	00 00 00	 mov	 DWORD PTR tv74[rsp], 1
  00093	eb 08		 jmp	 SHORT $LN10@meth_richc
$LN9@meth_richc:
  00095	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR tv74[rsp], 0
$LN10@meth_richc:
  0009d	8b 44 24 3c	 mov	 eax, DWORD PTR tv74[rsp]
  000a1	89 44 24 38	 mov	 DWORD PTR eq$[rsp], eax

; 253  :     if (eq)

  000a5	83 7c 24 38 00	 cmp	 DWORD PTR eq$[rsp], 0
  000aa	74 36		 je	 SHORT $LN3@meth_richc

; 254  :         eq = a->m_ml->ml_meth == b->m_ml->ml_meth;

  000ac	48 8b 44 24 28	 mov	 rax, QWORD PTR a$[rsp]
  000b1	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000b5	48 8b 4c 24 30	 mov	 rcx, QWORD PTR b$[rsp]
  000ba	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  000be	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  000c2	48 39 48 08	 cmp	 QWORD PTR [rax+8], rcx
  000c6	75 0a		 jne	 SHORT $LN11@meth_richc
  000c8	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv81[rsp], 1
  000d0	eb 08		 jmp	 SHORT $LN12@meth_richc
$LN11@meth_richc:
  000d2	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv81[rsp], 0
$LN12@meth_richc:
  000da	8b 44 24 40	 mov	 eax, DWORD PTR tv81[rsp]
  000de	89 44 24 38	 mov	 DWORD PTR eq$[rsp], eax
$LN3@meth_richc:

; 255  :     if (op == Py_EQ)

  000e2	83 bc 24 80 00
	00 00 02	 cmp	 DWORD PTR op$[rsp], 2
  000ea	75 2d		 jne	 SHORT $LN2@meth_richc

; 256  :         res = eq ? Py_True : Py_False;

  000ec	83 7c 24 38 00	 cmp	 DWORD PTR eq$[rsp], 0
  000f1	74 0e		 je	 SHORT $LN13@meth_richc
  000f3	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  000fa	48 89 44 24 48	 mov	 QWORD PTR tv84[rsp], rax
  000ff	eb 0c		 jmp	 SHORT $LN14@meth_richc
$LN13@meth_richc:
  00101	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct
  00108	48 89 44 24 48	 mov	 QWORD PTR tv84[rsp], rax
$LN14@meth_richc:
  0010d	48 8b 44 24 48	 mov	 rax, QWORD PTR tv84[rsp]
  00112	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax

; 257  :     else

  00117	eb 2b		 jmp	 SHORT $LN1@meth_richc
$LN2@meth_richc:

; 258  :         res = eq ? Py_False : Py_True;

  00119	83 7c 24 38 00	 cmp	 DWORD PTR eq$[rsp], 0
  0011e	74 0e		 je	 SHORT $LN15@meth_richc
  00120	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct
  00127	48 89 44 24 50	 mov	 QWORD PTR tv86[rsp], rax
  0012c	eb 0c		 jmp	 SHORT $LN16@meth_richc
$LN15@meth_richc:
  0012e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  00135	48 89 44 24 50	 mov	 QWORD PTR tv86[rsp], rax
$LN16@meth_richc:
  0013a	48 8b 44 24 50	 mov	 rax, QWORD PTR tv86[rsp]
  0013f	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax
$LN1@meth_richc:

; 259  :     Py_INCREF(res);

  00144	48 8b 4c 24 20	 mov	 rcx, QWORD PTR res$[rsp]
  00149	e8 00 00 00 00	 call	 _Py_IncRef

; 260  :     return res;

  0014e	48 8b 44 24 20	 mov	 rax, QWORD PTR res$[rsp]
$LN7@meth_richc:

; 261  : }

  00153	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00157	c3		 ret	 0
meth_richcompare ENDP
_TEXT	ENDS
EXTRN	_Py_HashPointer:PROC
EXTRN	PyObject_Hash:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$meth_hash DD imagerel meth_hash
	DD	imagerel meth_hash+156
	DD	imagerel $unwind$meth_hash
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$meth_hash DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT meth_hash
_TEXT	SEGMENT
y$ = 32
x$ = 40
a$ = 64
meth_hash PROC						; COMDAT

; 265  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 266  :     Py_hash_t x, y;
; 267  :     if (a->m_self == NULL)

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR a$[rsp]
  0000e	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  00013	75 0b		 jne	 SHORT $LN5@meth_hash

; 268  :         x = 0;

  00015	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR x$[rsp], 0

; 269  :     else {

  0001e	eb 24		 jmp	 SHORT $LN4@meth_hash
$LN5@meth_hash:

; 270  :         x = PyObject_Hash(a->m_self);

  00020	48 8b 44 24 40	 mov	 rax, QWORD PTR a$[rsp]
  00025	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  00029	e8 00 00 00 00	 call	 PyObject_Hash
  0002e	48 89 44 24 28	 mov	 QWORD PTR x$[rsp], rax

; 271  :         if (x == -1)

  00033	48 83 7c 24 28
	ff		 cmp	 QWORD PTR x$[rsp], -1
  00039	75 09		 jne	 SHORT $LN3@meth_hash

; 272  :             return -1;

  0003b	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1
  00042	eb 53		 jmp	 SHORT $LN6@meth_hash
$LN3@meth_hash:
$LN4@meth_hash:

; 273  :     }
; 274  :     y = _Py_HashPointer((void*)(a->m_ml->ml_meth));

  00044	48 8b 44 24 40	 mov	 rax, QWORD PTR a$[rsp]
  00049	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0004d	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00051	e8 00 00 00 00	 call	 _Py_HashPointer
  00056	48 89 44 24 20	 mov	 QWORD PTR y$[rsp], rax

; 275  :     if (y == -1)

  0005b	48 83 7c 24 20
	ff		 cmp	 QWORD PTR y$[rsp], -1
  00061	75 09		 jne	 SHORT $LN2@meth_hash

; 276  :         return -1;

  00063	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1
  0006a	eb 2b		 jmp	 SHORT $LN6@meth_hash
$LN2@meth_hash:

; 277  :     x ^= y;

  0006c	48 8b 44 24 20	 mov	 rax, QWORD PTR y$[rsp]
  00071	48 8b 4c 24 28	 mov	 rcx, QWORD PTR x$[rsp]
  00076	48 33 c8	 xor	 rcx, rax
  00079	48 8b c1	 mov	 rax, rcx
  0007c	48 89 44 24 28	 mov	 QWORD PTR x$[rsp], rax

; 278  :     if (x == -1)

  00081	48 83 7c 24 28
	ff		 cmp	 QWORD PTR x$[rsp], -1
  00087	75 09		 jne	 SHORT $LN1@meth_hash

; 279  :         x = -2;

  00089	48 c7 44 24 28
	fe ff ff ff	 mov	 QWORD PTR x$[rsp], -2
$LN1@meth_hash:

; 280  :     return x;

  00092	48 8b 44 24 28	 mov	 rax, QWORD PTR x$[rsp]
$LN6@meth_hash:

; 281  : }

  00097	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0009b	c3		 ret	 0
meth_hash ENDP
_TEXT	ENDS
PUBLIC	??_C@_1BK@MODMMMIB@?$AAn?$AAu?$AAm?$AAf?$AAr?$AAe?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	PyCFunction_ClearFreeList
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyCFunction_ClearFreeList DD imagerel $LN7
	DD	imagerel $LN7+137
	DD	imagerel $unwind$PyCFunction_ClearFreeList
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyCFunction_ClearFreeList DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_1BK@MODMMMIB@?$AAn?$AAu?$AAm?$AAf?$AAr?$AAe?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1BK@MODMMMIB@?$AAn?$AAu?$AAm?$AAf?$AAr?$AAe?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@ DB 'n'
	DB	00H, 'u', 00H, 'm', 00H, 'f', 00H, 'r', 00H, 'e', 00H, 'e', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyCFunction_ClearFreeList
_TEXT	SEGMENT
freelist_size$ = 32
v$20662 = 40
PyCFunction_ClearFreeList PROC				; COMDAT

; 323  : {

$LN7:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 324  :     int freelist_size = numfree;

  00004	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR numfree
  0000a	89 44 24 20	 mov	 DWORD PTR freelist_size$[rsp], eax

; 325  : 
; 326  :     if (Py_PXCTX)

  0000e	e8 00 00 00 00	 call	 _Py_PXCTX
  00013	85 c0		 test	 eax, eax
  00015	74 04		 je	 SHORT $LN3@PyCFunctio@6

; 327  :         return 0;

  00017	33 c0		 xor	 eax, eax
  00019	eb 69		 jmp	 SHORT $LN4@PyCFunctio@6
$LN3@PyCFunctio@6:
$LN2@PyCFunctio@6:

; 328  : 
; 329  :     while (free_list) {

  0001b	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR free_list, 0
  00023	74 36		 je	 SHORT $LN1@PyCFunctio@6

; 330  :         PyCFunctionObject *v = free_list;

  00025	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR free_list
  0002c	48 89 44 24 28	 mov	 QWORD PTR v$20662[rsp], rax

; 331  :         free_list = (PyCFunctionObject *)(v->m_self);

  00031	48 8b 44 24 28	 mov	 rax, QWORD PTR v$20662[rsp]
  00036	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0003a	48 89 05 00 00
	00 00		 mov	 QWORD PTR free_list, rax

; 332  :         PyObject_GC_Del(v);

  00041	48 8b 4c 24 28	 mov	 rcx, QWORD PTR v$20662[rsp]
  00046	e8 00 00 00 00	 call	 PyObject_GC_Del

; 333  :         numfree--;

  0004b	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR numfree
  00051	ff c8		 dec	 eax
  00053	89 05 00 00 00
	00		 mov	 DWORD PTR numfree, eax

; 334  :     }

  00059	eb c0		 jmp	 SHORT $LN2@PyCFunctio@6
$LN1@PyCFunctio@6:

; 335  :     assert(numfree == 0);

  0005b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR numfree, 0
  00062	74 1c		 je	 SHORT $LN6@PyCFunctio@6
  00064	41 b8 4f 01 00
	00		 mov	 r8d, 335		; 0000014fH
  0006a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DE@IHDBABOA@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAm?$AAe?$AAt?$AAh?$AAo?$AAd?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00071	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BK@MODMMMIB@?$AAn?$AAu?$AAm?$AAf?$AAr?$AAe?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@
  00078	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0007e	33 c0		 xor	 eax, eax
$LN6@PyCFunctio@6:

; 336  :     return freelist_size;

  00080	8b 44 24 20	 mov	 eax, DWORD PTR freelist_size$[rsp]
$LN4@PyCFunctio@6:

; 337  : }

  00084	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00088	c3		 ret	 0
PyCFunction_ClearFreeList ENDP
_TEXT	ENDS
PUBLIC	PyCFunction_Fini
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyCFunction_Fini DD imagerel $LN3
	DD	imagerel $LN3+14
	DD	imagerel $unwind$PyCFunction_Fini
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyCFunction_Fini DD 010401H
	DD	04204H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyCFunction_Fini
_TEXT	SEGMENT
PyCFunction_Fini PROC					; COMDAT

; 341  : {

$LN3:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 342  :     (void)PyCFunction_ClearFreeList();

  00004	e8 00 00 00 00	 call	 PyCFunction_ClearFreeList

; 343  : }

  00009	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0000d	c3		 ret	 0
PyCFunction_Fini ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BH@NJDHPBHJ@free?5PyCFunctionObject?$AA@	; `string'
PUBLIC	_PyCFunction_DebugMallocStats
EXTRN	_PyDebugAllocatorStats:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyCFunction_DebugMallocStats DD imagerel $LN3
	DD	imagerel $LN3+44
	DD	imagerel $unwind$_PyCFunction_DebugMallocStats
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyCFunction_DebugMallocStats DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT ??_C@_0BH@NJDHPBHJ@free?5PyCFunctionObject?$AA@
CONST	SEGMENT
??_C@_0BH@NJDHPBHJ@free?5PyCFunctionObject?$AA@ DB 'free PyCFunctionObjec'
	DB	't', 00H					; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PyCFunction_DebugMallocStats
_TEXT	SEGMENT
out$ = 48
_PyCFunction_DebugMallocStats PROC			; COMDAT

; 348  : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 349  :     _PyDebugAllocatorStats(out,
; 350  :                            "free PyCFunctionObject",
; 351  :                            numfree, sizeof(PyCFunctionObject));

  00009	41 b9 80 00 00
	00		 mov	 r9d, 128		; 00000080H
  0000f	44 8b 05 00 00
	00 00		 mov	 r8d, DWORD PTR numfree
  00016	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@NJDHPBHJ@free?5PyCFunctionObject?$AA@
  0001d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR out$[rsp]
  00022	e8 00 00 00 00	 call	 _PyDebugAllocatorStats

; 352  : }

  00027	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002b	c3		 ret	 0
_PyCFunction_DebugMallocStats ENDP
_TEXT	ENDS
PUBLIC	PyCFunction_New
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyCFunction_New DD imagerel $LN3
	DD	imagerel $LN3+37
	DD	imagerel $unwind$PyCFunction_New
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyCFunction_New DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyCFunction_New
_TEXT	SEGMENT
ml$ = 48
self$ = 56
PyCFunction_New PROC					; COMDAT

; 364  : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 365  :     return PyCFunction_NewEx(ml, self, NULL);

  0000e	45 33 c0	 xor	 r8d, r8d
  00011	48 8b 54 24 38	 mov	 rdx, QWORD PTR self$[rsp]
  00016	48 8b 4c 24 30	 mov	 rcx, QWORD PTR ml$[rsp]
  0001b	e8 00 00 00 00	 call	 PyCFunction_NewEx

; 366  : }

  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	c3		 ret	 0
PyCFunction_New ENDP
_TEXT	ENDS
END
