; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	PyType_GenericNew
PUBLIC	??_C@_05MKJDPMKP@super?$AA@			; `string'
PUBLIC	??_C@_0DH@MEJKBCJN@the?5type?5of?5the?5instance?5invokin@ ; `string'
PUBLIC	??_C@_0P@FDFALBKM@__self_class__?$AA@		; `string'
PUBLIC	??_C@_0CL@OAHEPBOJ@the?5instance?5invoking?5super?$CI?$CJ?$DL?5m@ ; `string'
PUBLIC	??_C@_08KFOOMKEG@__self__?$AA@			; `string'
PUBLIC	??_C@_0BL@NCAHCDDF@the?5class?5invoking?5super?$CI?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0O@BEEHOGAG@__thisclass__?$AA@		; `string'
PUBLIC	??_C@_0BO@NHHBFPJ@x?4__contains__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5y?5in?5x?$AA@ ; `string'
PUBLIC	??_C@_0BH@FMFFBHMG@x?4__rmul__?$CIn?$CJ?5?$DM?$DN?$DN?$DO?5n?$CKx?$AA@ ; `string'
PUBLIC	??_C@_0BG@FOCCMDEC@x?4__mul__?$CIn?$CJ?5?$DM?$DN?$DN?$DO?5x?$CKn?$AA@ ; `string'
PUBLIC	??_C@_0BP@HKMFPPHC@x?4__delitem__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5del?5x?$FLy?$FN?$AA@ ; `string'
PUBLIC	??_C@_0CA@GAOMDJJJ@x?4__setitem__?$CIi?0?5y?$CJ?5?$DM?$DN?$DN?$DO?5x?$FLi?$FN?$DNy?$AA@ ; `string'
PUBLIC	??_C@_0BL@MOLOBEHD@x?4__getitem__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?$FLy?$FN?$AA@ ; `string'
PUBLIC	??_C@_0BI@LJFJONPL@x?4__len__?$CI?$CJ?5?$DM?$DN?$DN?$DO?5len?$CIx?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0CL@DOCBMFDB@x?$FLy?3z?$FN?5?$DM?$DN?$DN?$DO?5x?$FLy?4__index__?$CI?$CJ?3z?4__@ ; `string'
PUBLIC	??_C@_0BL@NHAJGPKM@x?4__itruediv__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?1y?$AA@ ; `string'
PUBLIC	??_C@_0BN@KGGFDMPH@x?4__ifloordiv__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?1?1y?$AA@ ; `string'
PUBLIC	??_C@_0BL@BIAMFNP@x?4__rtruediv__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5y?1x?$AA@ ; `string'
PUBLIC	??_C@_0BK@KJLHHIEM@x?4__truediv__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?1y?$AA@ ; `string'
PUBLIC	??_C@_0BN@MDOPCGIM@x?4__rfloordiv__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5y?1?1x?$AA@ ; `string'
PUBLIC	??_C@_0BM@HLMIDEGC@x?4__floordiv__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?1?1y?$AA@ ; `string'
PUBLIC	??_C@_0BH@KMKCFFEL@x?4__ior__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?$HM?$DNy?$AA@ ; `string'
PUBLIC	??_C@_0BI@KNFBDEPM@x?4__ixor__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?$FO?$DNy?$AA@ ; `string'
PUBLIC	??_C@_0BI@JBOMICMM@x?4__iand__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?$CG?$DNy?$AA@ ; `string'
PUBLIC	??_C@_0BM@OEGAKNLC@x?4__irshift__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?$DO?$DO?$DNy?$AA@ ; `string'
PUBLIC	??_C@_0BM@NIKIIBEJ@x?4__ilshift__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?$DM?$DM?$DNy?$AA@ ; `string'
PUBLIC	??_C@_0BJ@IFHFJGNM@x?4__ipow__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?$CK?$CK?$DNy?$AA@ ; `string'
PUBLIC	??_C@_0BI@IMMCILKE@x?4__imod__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?$CF?$DNy?$AA@ ; `string'
PUBLIC	??_C@_0BI@OJHENPL@x?4__imul__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?$CK?$DNy?$AA@ ; `string'
PUBLIC	??_C@_0BI@FFFLKAEI@x?4__isub__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?9?$DNy?$AA@ ; `string'
PUBLIC	??_C@_0BI@HBADJPJO@x?4__iadd__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?$CL?$DNy?$AA@ ; `string'
PUBLIC	??_C@_0BM@HEPIFLMJ@x?4__float__?$CI?$CJ?5?$DM?$DN?$DN?$DO?5float?$CIx?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0BI@BGKNGPBI@x?4__int__?$CI?$CJ?5?$DM?$DN?$DN?$DO?5int?$CIx?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0BG@NBLDDBOA@x?4__ror__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5y?$HMx?$AA@ ; `string'
PUBLIC	??_C@_0BF@IGCMIDJE@x?4__or__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?$HMy?$AA@ ; `string'
PUBLIC	??_C@_0BH@JDGCAPPB@x?4__rxor__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5y?$FOx?$AA@ ; `string'
PUBLIC	??_C@_0BG@FJFIDAMF@x?4__xor__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?$FOy?$AA@ ; `string'
PUBLIC	??_C@_0BH@CNDAOONF@x?4__rand__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5y?$CGx?$AA@ ; `string'
PUBLIC	??_C@_0BG@OHAKNBOB@x?4__and__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?$CGy?$AA@ ; `string'
PUBLIC	??_C@_0BL@IAPLBOLD@x?4__rrshift__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5y?$DO?$DOx?$AA@ ; `string'
PUBLIC	??_C@_0BK@KNBAONPF@x?4__rshift__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?$DO?$DOy?$AA@ ; `string'
PUBLIC	??_C@_0BL@ELDDDEJH@x?4__rlshift__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5y?$DM?$DMx?$AA@ ; `string'
PUBLIC	??_C@_0BK@GGNIMHNB@x?4__lshift__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?$DM?$DMy?$AA@ ; `string'
PUBLIC	??_C@_0BH@MNOEIHBG@x?4__invert__?$CI?$CJ?5?$DM?$DN?$DN?$DO?5?$HOx?$AA@ ; `string'
PUBLIC	??_C@_0BJ@NDLGPPDN@x?4__bool__?$CI?$CJ?5?$DM?$DN?$DN?$DO?5x?5?$CB?$DN?50?$AA@ ; `string'
PUBLIC	??_C@_0BI@HMJMPBKF@x?4__abs__?$CI?$CJ?5?$DM?$DN?$DN?$DO?5abs?$CIx?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0BE@CMMOLCI@x?4__pos__?$CI?$CJ?5?$DM?$DN?$DN?$DO?5?$CLx?$AA@ ; `string'
PUBLIC	??_C@_0BE@NIPFJBMO@x?4__neg__?$CI?$CJ?5?$DM?$DN?$DN?$DO?5?9x?$AA@ ; `string'
PUBLIC	??_C@_0CH@EKLFEJDK@y?4__rpow__?$CIx?$FL?0?5z?$FN?$CJ?5?$DM?$DN?$DN?$DO?5pow?$CIx?0?5y@ ; `string'
PUBLIC	??_C@_0CG@GMODBFLE@x?4__pow__?$CIy?$FL?0?5z?$FN?$CJ?5?$DM?$DN?$DN?$DO?5pow?$CIx?0?5y?$FL@ ; `string'
PUBLIC	??_C@_0CD@IFNHNEOL@x?4__rdivmod__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5divmod?$CIy?0?5@ ; `string'
PUBLIC	??_C@_0CC@ICKLDEBI@x?4__divmod__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5divmod?$CIx?0?5y@ ; `string'
PUBLIC	??_C@_0BH@LECJOCMF@x?4__rmod__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5y?$CFx?$AA@ ; `string'
PUBLIC	??_C@_0BG@HOBDNNPB@x?4__mod__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?$CFy?$AA@ ; `string'
PUBLIC	??_C@_0BH@OJBLHMJD@x?4__rmul__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5y?$CKx?$AA@ ; `string'
PUBLIC	??_C@_0BG@CDCBEDKH@x?4__mul__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?$CKy?$AA@ ; `string'
PUBLIC	??_C@_0BH@PLFINCCM@x?4__rsub__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5y?9x?$AA@ ; `string'
PUBLIC	??_C@_0BG@DBGCONBI@x?4__sub__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?9y?$AA@ ; `string'
PUBLIC	??_C@_0BH@BHMEKCNP@x?4__radd__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5y?$CLx?$AA@ ; `string'
PUBLIC	??_C@_0BG@NNPOJNOL@x?4__add__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?$CLy?$AA@ ; `string'
PUBLIC	??_C@_0DP@PEBGGFGF@x?4__init__?$CI?4?4?4?$CJ?5initializes?5x?$DL?5s@ ; `string'
PUBLIC	??_C@_0BG@GKILFGMF@descr?4__delete__?$CIobj?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0BK@HNGNCDND@descr?4__set__?$CIobj?0?5value?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0CE@IDHMMHDD@descr?4__get__?$CIobj?$FL?0?5type?$FN?$CJ?5?9?$DO?5va@ ; `string'
PUBLIC	??_C@_0BK@EKPAAGNF@x?4__next__?$CI?$CJ?5?$DM?$DN?$DN?$DO?5next?$CIx?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0BK@MLDIHFPK@x?4__iter__?$CI?$CJ?5?$DM?$DN?$DN?$DO?5iter?$CIx?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0BG@GPAFEHPB@x?4__ge__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?$DO?$DNy?$AA@ ; `string'
PUBLIC	??_C@_0BF@EALDPMEA@x?4__gt__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?$DOy?$AA@ ; `string'
PUBLIC	??_C@_0BG@JPHMBINF@x?4__ne__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?$CB?$DNy?$AA@ ; `string'
PUBLIC	??_C@_0BG@BMDNDNCO@x?4__eq__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?$DN?$DNy?$AA@ ; `string'
PUBLIC	??_C@_0BG@DINLPMBE@x?4__le__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?$DM?$DNy?$AA@ ; `string'
PUBLIC	??_C@_0BF@PGLNDMDE@x?4__lt__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?$DMy?$AA@ ; `string'
PUBLIC	??_C@_0CG@LPHBAOH@x?4__delattr__?$CI?8name?8?$CJ?5?$DM?$DN?$DN?$DO?5del?5x@ ; `string'
PUBLIC	??_C@_0DB@GBCEKDDL@x?4__setattr__?$CI?8name?8?0?5value?$CJ?5?$DM?$DN?$DN@ ; `string'
PUBLIC	??_C@_0CH@MJEJMFHD@x?4__getattribute__?$CI?8name?8?$CJ?5?$DM?$DN?$DN?$DO?5@ ; `string'
PUBLIC	??_C@_0BI@CPPGOPCF@x?4__str__?$CI?$CJ?5?$DM?$DN?$DN?$DO?5str?$CIx?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0BM@OCNACKJL@x?4__call__?$CI?4?4?4?$CJ?5?$DM?$DN?$DN?$DO?5x?$CI?4?4?4?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0BK@BGPGEPCP@x?4__hash__?$CI?$CJ?5?$DM?$DN?$DN?$DO?5hash?$CIx?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0BK@EOOFHHJM@x?4__repr__?$CI?$CJ?5?$DM?$DN?$DN?$DO?5repr?$CIx?$CJ?$AA@ ; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_C@_07CKMCINHO@__del__?$AA@			; `string'
PUBLIC	??_C@_08DOHHOJGB@__init__?$AA@			; `string'
PUBLIC	??_C@_07KBLMMACN@__set__?$AA@			; `string'
PUBLIC	??_C@_0L@OAODBFBD@__delete__?$AA@		; `string'
PUBLIC	??_C@_07DJPLIAKA@__get__?$AA@			; `string'
PUBLIC	??_C@_08MMJHJJBO@__next__?$AA@			; `string'
PUBLIC	??_C@_08HMKBHKEB@__iter__?$AA@			; `string'
PUBLIC	??_C@_06DHPPIHIH@__ge__?$AA@			; `string'
PUBLIC	??_C@_06NPFKLHHN@__gt__?$AA@			; `string'
PUBLIC	??_C@_06DKOPOFPG@__ne__?$AA@			; `string'
PUBLIC	??_C@_06EACPLGJG@__le__?$AA@			; `string'
PUBLIC	??_C@_06KIIKIGGM@__lt__?$AA@			; `string'
PUBLIC	??_C@_0M@CIMGLOJN@__setattr__?$AA@		; `string'
PUBLIC	??_C@_0M@ECOKAOJC@__delattr__?$AA@		; `string'
PUBLIC	??_C@_0M@GIDJPAP@__getattr__?$AA@		; `string'
PUBLIC	??_C@_08DGBMPEPK@__call__?$AA@			; `string'
PUBLIC	??_C@_07NJFHCBMD@__str__?$AA@			; `string'
PUBLIC	??_C@_08HJPCHLLJ@__repr__?$AA@			; `string'
PUBLIC	??_C@_0N@LEBOILNI@__itruediv__?$AA@		; `string'
PUBLIC	??_C@_0O@FFFGEHEN@__ifloordiv__?$AA@		; `string'
PUBLIC	??_C@_0N@DJMJMIFH@__rtruediv__?$AA@		; `string'
PUBLIC	??_C@_0M@COJKGICO@__truediv__?$AA@		; `string'
PUBLIC	??_C@_0O@CINMAOLP@__rfloordiv__?$AA@		; `string'
PUBLIC	??_C@_0N@BBCJEIH@__floordiv__?$AA@		; `string'
PUBLIC	??_C@_07GMCKKGKN@__ior__?$AA@			; `string'
PUBLIC	??_C@_08EBNDKCJL@__ixor__?$AA@			; `string'
PUBLIC	??_C@_08CNBINADL@__iand__?$AA@			; `string'
PUBLIC	??_C@_0M@MPLFEGLF@__irshift__?$AA@		; `string'
PUBLIC	??_C@_0M@KLLHNPFG@__ilshift__?$AA@		; `string'
PUBLIC	??_C@_08JKFONAME@__ipow__?$AA@			; `string'
PUBLIC	??_C@_08GHLKDJPA@__imod__?$AA@			; `string'
PUBLIC	??_C@_08IIFOJODM@__imul__?$AA@			; `string'
PUBLIC	??_C@_08FBFNIKOE@__isub__?$AA@			; `string'
PUBLIC	??_C@_08GHKIMIJK@__iadd__?$AA@			; `string'
PUBLIC	??_C@_09EAHNLHOJ@__float__?$AA@			; `string'
PUBLIC	??_C@_07HECBNAMB@__int__?$AA@			; `string'
PUBLIC	??_C@_07FDLFEPF@__ror__?$AA@			; `string'
PUBLIC	??_C@_06MKEBKDGA@__or__?$AA@			; `string'
PUBLIC	??_C@_08CEAKGKKP@__rxor__?$AA@			; `string'
PUBLIC	??_C@_07KEKAHHJD@__xor__?$AA@			; `string'
PUBLIC	??_C@_08EIMBBIAP@__rand__?$AA@			; `string'
PUBLIC	??_C@_07MIGLAFDD@__and__?$AA@			; `string'
PUBLIC	??_C@_0M@BAPLDMKK@__rrshift__?$AA@		; `string'
PUBLIC	??_C@_0L@PEOFAGDE@__rshift__?$AA@		; `string'
PUBLIC	??_C@_0M@HEPJKFEJ@__rlshift__?$AA@		; `string'
PUBLIC	??_C@_0L@JAOHJPNH@__lshift__?$AA@		; `string'
PUBLIC	??_C@_0L@OIINOIMI@__invert__?$AA@		; `string'
PUBLIC	??_C@_09NLFDFNNH@__index__?$AA@			; `string'
PUBLIC	??_C@_08ONMBOEOO@__bool__?$AA@			; `string'
PUBLIC	??_C@_07MAFFIHBE@__abs__?$AA@			; `string'
PUBLIC	??_C@_07PAEPJCJL@__pos__?$AA@			; `string'
PUBLIC	??_C@_07FMFICJBJ@__neg__?$AA@			; `string'
PUBLIC	??_C@_08PPIHBIPA@__rpow__?$AA@			; `string'
PUBLIC	??_C@_07HPCNAFMM@__pow__?$AA@			; `string'
PUBLIC	??_C@_0M@NDCDLKNJ@__rdivmod__?$AA@		; `string'
PUBLIC	??_C@_0L@DHDNIAEH@__divmod__?$AA@		; `string'
PUBLIC	??_C@_08CGDPBME@__rmod__?$AA@			; `string'
PUBLIC	??_C@_07ICMJOMPI@__mod__?$AA@			; `string'
PUBLIC	??_C@_08ONIHFGAI@__rmul__?$AA@			; `string'
PUBLIC	??_C@_07GNCNELDE@__mul__?$AA@			; `string'
PUBLIC	??_C@_08DEIEECNA@__rsub__?$AA@			; `string'
PUBLIC	??_C@_07LECOFPOM@__sub__?$AA@			; `string'
PUBLIC	??_C@_08CHBAAKO@__radd__?$AA@			; `string'
PUBLIC	??_C@_07ICNLBNJC@__add__?$AA@			; `string'
PUBLIC	??_C@_0N@MCIOADFH@__contains__?$AA@		; `string'
PUBLIC	??_C@_0M@EONDAJAB@__setitem__?$AA@		; `string'
PUBLIC	??_C@_0M@CEPPLJAO@__delitem__?$AA@		; `string'
PUBLIC	??_C@_07GMJIMHJI@__len__?$AA@			; `string'
PUBLIC	??_C@_0DO@MFNFNJKD@T?4__new__?$CIS?0?5?4?4?4?$CJ?5?9?$DO?5a?5new?5objec@ ; `string'
PUBLIC	??_C@_06JCEEBECP@__eq__?$AA@			; `string'
PUBLIC	PyType_GenericAlloc
PUBLIC	??_C@_0BD@EEFIMND@The?5most?5base?5type?$AA@	; `string'
PUBLIC	??_C@_06IEOJBDIK@object?$AA@			; `string'
PUBLIC	??_C@_0CP@DOIFJKJG@__dir__?$CI?$CJ?5?9?$DO?5list?6default?5dir?$CI?$CJ?5@ ; `string'
PUBLIC	??_C@_0DH@GGNPGAHM@__sizeof__?$CI?$CJ?5?9?$DO?5int?6size?5of?5obje@ ; `string'
PUBLIC	??_C@_0BJ@OLCCKPLB@default?5object?5formatter?$AA@ ; `string'
PUBLIC	??_C@_0L@MEMCGMKL@__format__?$AA@		; `string'
PUBLIC	??_C@_0BB@NHNPNHAH@__subclasshook__?$AA@	; `string'
PUBLIC	??_C@_0BC@KKCCEOPP@helper?5for?5pickle?$AA@	; `string'
PUBLIC	??_C@_0O@CFEDDKPG@__reduce_ex__?$AA@		; `string'
PUBLIC	??_C@_0L@NNMACJIG@__reduce__?$AA@		; `string'
PUBLIC	??_C@_05CFHBDDLG@items?$AA@			; `string'
PUBLIC	??_C@_0L@GEMAGKL@__newobj__?$AA@		; `string'
PUBLIC	??_C@_0N@NAMJJHIO@__getstate__?$AA@		; `string'
PUBLIC	??_C@_0P@BCBHENLA@__getnewargs__?$AA@		; `string'
PUBLIC	??_C@_0L@NMBFFBAC@_slotnames?$AA@		; `string'
PUBLIC	??_C@_0O@NLMJLHMN@__slotnames__?$AA@		; `string'
PUBLIC	??_C@_07ODDBKIAB@copyreg?$AA@			; `string'
PUBLIC	??_C@_0BD@BFBMEIMB@the?5object?8s?5class?$AA@	; `string'
PUBLIC	??_C@_06GOHDHELE@sorted?$AA@			; `string'
PUBLIC	??_C@_02KEGNLNML@?0?5?$AA@			; `string'
PUBLIC	??_C@_04GPMDFGEJ@type?$AA@			; `string'
PUBLIC	??_C@_0EB@IFDKCHCE@__sizeof__?$CI?$CJ?5?9?$DO?5int?6return?5memor@ ; `string'
PUBLIC	??_C@_0L@HOGGIPGN@__sizeof__?$AA@		; `string'
PUBLIC	??_C@_0DP@LCGOHIAJ@__dir__?$CI?$CJ?5?9?$DO?5list?6specialized?5__@ ; `string'
PUBLIC	??_C@_07FPPEEAND@__dir__?$AA@			; `string'
PUBLIC	??_C@_0DL@PBOIKCPL@__subclasscheck__?$CI?$CJ?5?9?$DO?5bool?6chec@ ; `string'
PUBLIC	??_C@_0BC@NFPPCOGG@__subclasscheck__?$AA@	; `string'
PUBLIC	??_C@_0DO@KLHIJGEM@__instancecheck__?$CI?$CJ?5?9?$DO?5bool?6chec@ ; `string'
PUBLIC	??_C@_0BC@JKBHKBMG@__instancecheck__?$AA@	; `string'
PUBLIC	??_C@_0EL@GOMGOOLM@__prepare__?$CI?$CJ?5?9?$DO?5dict?6used?5to?5cr@ ; `string'
PUBLIC	??_C@_0M@GLHNIFEH@__prepare__?$AA@		; `string'
PUBLIC	??_C@_0DB@NPEDHMIB@__subclasses__?$CI?$CJ?5?9?$DO?5list?5of?5imme@ ; `string'
PUBLIC	??_C@_0P@IOKGGKON@__subclasses__?$AA@		; `string'
PUBLIC	??_C@_0DG@EJDLFMM@mro?$CI?$CJ?5?9?$DO?5list?6return?5a?5type?8s?5me@ ; `string'
PUBLIC	??_C@_09EBPBKION@__slots__?$AA@			; `string'
PUBLIC	??_C@_04BCIDKIGN@dict?$AA@			; `string'
PUBLIC	??_C@_05JMNHICHM@bases?$AA@			; `string'
PUBLIC	??_C@_04MEMAJGDJ@name?$AA@			; `string'
PUBLIC	??_C@_0DD@DKNNDAFM@list?5of?5weak?5references?5to?5the?5o@ ; `string'
PUBLIC	??_C@_0M@OFKEODAB@__weakref__?$AA@		; `string'
PUBLIC	??_C@_0CP@GPHMLMIJ@dictionary?5for?5instance?5variable@ ; `string'
PUBLIC	??_C@_03KCOHMEGL@mro?$AA@			; `string'
PUBLIC	??_C@_0BE@EMDECJMP@__abstractmethods__?$AA@	; `string'
PUBLIC	??_C@_09LJKDIEEK@__bases__?$AA@			; `string'
PUBLIC	??_C@_0N@FMLGAKCE@__qualname__?$AA@		; `string'
PUBLIC	??_C@_07MNLIDIMK@__mro__?$AA@			; `string'
PUBLIC	??_C@_0P@NBEFJBEP@__dictoffset__?$AA@		; `string'
PUBLIC	??_C@_08PNDLAJH@__base__?$AA@			; `string'
PUBLIC	??_C@_0BC@PHCHJLGH@__weakrefoffset__?$AA@	; `string'
PUBLIC	??_C@_09GIOABLIA@__flags__?$AA@			; `string'
PUBLIC	??_C@_0N@OJNCBPH@__itemsize__?$AA@		; `string'
PUBLIC	??_C@_0O@IAOKENCJ@__basicsize__?$AA@		; `string'
PUBLIC	??_C@_07MEBHOIG@__new__?$AA@			; `string'
PUBLIC	??_C@_08BHKDPDAA@__name__?$AA@			; `string'
PUBLIC	??_C@_0L@LNCJCPDP@__module__?$AA@		; `string'
PUBLIC	??_C@_08FJMJDHAE@__hash__?$AA@			; `string'
PUBLIC	??_C@_0BB@FJMKAPEO@__getattribute__?$AA@	; `string'
PUBLIC	??_C@_0M@GAJGCIJD@__getitem__?$AA@		; `string'
PUBLIC	??_C@_07DIBBIFIJ@__doc__?$AA@			; `string'
PUBLIC	??_C@_08IBFKALI@__dict__?$AA@			; `string'
PUBLIC	??_C@_09LFGACEKG@__class__?$AA@			; `string'
PUBLIC	PyType_Type
PUBLIC	PyBaseObject_Type
PUBLIC	PySuper_Type
EXTRN	_PyObject_DebugFree:PROC
EXTRN	PyObject_GenericSetAttr:PROC
EXTRN	PyObject_GenericGetAttr:PROC
EXTRN	_Py_HashPointer:PROC
EXTRN	PyObject_GC_Del:PROC
_BSS	SEGMENT
next_version_tag DD 01H DUP (?)
?initialized@?1??init_slotdefs@@9@9 DD 01H DUP (?)	; `init_slotdefs'::`2'::initialized
_BSS	ENDS
;	COMDAT ??_C@_05MKJDPMKP@super?$AA@
CONST	SEGMENT
??_C@_05MKJDPMKP@super?$AA@ DB 'super', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@MEJKBCJN@the?5type?5of?5the?5instance?5invokin@
CONST	SEGMENT
??_C@_0DH@MEJKBCJN@the?5type?5of?5the?5instance?5invokin@ DB 'the type of'
	DB	' the instance invoking super(); may be None', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@FDFALBKM@__self_class__?$AA@
CONST	SEGMENT
??_C@_0P@FDFALBKM@__self_class__?$AA@ DB '__self_class__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@OAHEPBOJ@the?5instance?5invoking?5super?$CI?$CJ?$DL?5m@
CONST	SEGMENT
??_C@_0CL@OAHEPBOJ@the?5instance?5invoking?5super?$CI?$CJ?$DL?5m@ DB 'the'
	DB	' instance invoking super(); may be None', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08KFOOMKEG@__self__?$AA@
CONST	SEGMENT
??_C@_08KFOOMKEG@__self__?$AA@ DB '__self__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@NCAHCDDF@the?5class?5invoking?5super?$CI?$CJ?$AA@
CONST	SEGMENT
??_C@_0BL@NCAHCDDF@the?5class?5invoking?5super?$CI?$CJ?$AA@ DB 'the class'
	DB	' invoking super()', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@BEEHOGAG@__thisclass__?$AA@
CONST	SEGMENT
??_C@_0O@BEEHOGAG@__thisclass__?$AA@ DB '__thisclass__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@NHHBFPJ@x?4__contains__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5y?5in?5x?$AA@
CONST	SEGMENT
??_C@_0BO@NHHBFPJ@x?4__contains__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5y?5in?5x?$AA@ DB 'x'
	DB	'.__contains__(y) <==> y in x', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@FMFFBHMG@x?4__rmul__?$CIn?$CJ?5?$DM?$DN?$DN?$DO?5n?$CKx?$AA@
CONST	SEGMENT
??_C@_0BH@FMFFBHMG@x?4__rmul__?$CIn?$CJ?5?$DM?$DN?$DN?$DO?5n?$CKx?$AA@ DB 'x'
	DB	'.__rmul__(n) <==> n*x', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@FOCCMDEC@x?4__mul__?$CIn?$CJ?5?$DM?$DN?$DN?$DO?5x?$CKn?$AA@
CONST	SEGMENT
??_C@_0BG@FOCCMDEC@x?4__mul__?$CIn?$CJ?5?$DM?$DN?$DN?$DO?5x?$CKn?$AA@ DB 'x'
	DB	'.__mul__(n) <==> x*n', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@HKMFPPHC@x?4__delitem__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5del?5x?$FLy?$FN?$AA@
CONST	SEGMENT
??_C@_0BP@HKMFPPHC@x?4__delitem__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5del?5x?$FLy?$FN?$AA@ DB 'x'
	DB	'.__delitem__(y) <==> del x[y]', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@GAOMDJJJ@x?4__setitem__?$CIi?0?5y?$CJ?5?$DM?$DN?$DN?$DO?5x?$FLi?$FN?$DNy?$AA@
CONST	SEGMENT
??_C@_0CA@GAOMDJJJ@x?4__setitem__?$CIi?0?5y?$CJ?5?$DM?$DN?$DN?$DO?5x?$FLi?$FN?$DNy?$AA@ DB 'x'
	DB	'.__setitem__(i, y) <==> x[i]=y', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@MOLOBEHD@x?4__getitem__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?$FLy?$FN?$AA@
CONST	SEGMENT
??_C@_0BL@MOLOBEHD@x?4__getitem__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?$FLy?$FN?$AA@ DB 'x'
	DB	'.__getitem__(y) <==> x[y]', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@LJFJONPL@x?4__len__?$CI?$CJ?5?$DM?$DN?$DN?$DO?5len?$CIx?$CJ?$AA@
CONST	SEGMENT
??_C@_0BI@LJFJONPL@x?4__len__?$CI?$CJ?5?$DM?$DN?$DN?$DO?5len?$CIx?$CJ?$AA@ DB 'x'
	DB	'.__len__() <==> len(x)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@DOCBMFDB@x?$FLy?3z?$FN?5?$DM?$DN?$DN?$DO?5x?$FLy?4__index__?$CI?$CJ?3z?4__@
CONST	SEGMENT
??_C@_0CL@DOCBMFDB@x?$FLy?3z?$FN?5?$DM?$DN?$DN?$DO?5x?$FLy?4__index__?$CI?$CJ?3z?4__@ DB 'x'
	DB	'[y:z] <==> x[y.__index__():z.__index__()]', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@NHAJGPKM@x?4__itruediv__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?1y?$AA@
CONST	SEGMENT
??_C@_0BL@NHAJGPKM@x?4__itruediv__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?1y?$AA@ DB 'x'
	DB	'.__itruediv__(y) <==> x/y', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@KGGFDMPH@x?4__ifloordiv__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?1?1y?$AA@
CONST	SEGMENT
??_C@_0BN@KGGFDMPH@x?4__ifloordiv__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?1?1y?$AA@ DB 'x'
	DB	'.__ifloordiv__(y) <==> x//y', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@BIAMFNP@x?4__rtruediv__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5y?1x?$AA@
CONST	SEGMENT
??_C@_0BL@BIAMFNP@x?4__rtruediv__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5y?1x?$AA@ DB 'x'
	DB	'.__rtruediv__(y) <==> y/x', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@KJLHHIEM@x?4__truediv__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?1y?$AA@
CONST	SEGMENT
??_C@_0BK@KJLHHIEM@x?4__truediv__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?1y?$AA@ DB 'x'
	DB	'.__truediv__(y) <==> x/y', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@MDOPCGIM@x?4__rfloordiv__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5y?1?1x?$AA@
CONST	SEGMENT
??_C@_0BN@MDOPCGIM@x?4__rfloordiv__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5y?1?1x?$AA@ DB 'x'
	DB	'.__rfloordiv__(y) <==> y//x', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@HLMIDEGC@x?4__floordiv__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?1?1y?$AA@
CONST	SEGMENT
??_C@_0BM@HLMIDEGC@x?4__floordiv__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?1?1y?$AA@ DB 'x'
	DB	'.__floordiv__(y) <==> x//y', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@KMKCFFEL@x?4__ior__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?$HM?$DNy?$AA@
CONST	SEGMENT
??_C@_0BH@KMKCFFEL@x?4__ior__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?$HM?$DNy?$AA@ DB 'x'
	DB	'.__ior__(y) <==> x|=y', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@KNFBDEPM@x?4__ixor__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?$FO?$DNy?$AA@
CONST	SEGMENT
??_C@_0BI@KNFBDEPM@x?4__ixor__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?$FO?$DNy?$AA@ DB 'x'
	DB	'.__ixor__(y) <==> x^=y', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@JBOMICMM@x?4__iand__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?$CG?$DNy?$AA@
CONST	SEGMENT
??_C@_0BI@JBOMICMM@x?4__iand__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?$CG?$DNy?$AA@ DB 'x'
	DB	'.__iand__(y) <==> x&=y', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@OEGAKNLC@x?4__irshift__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?$DO?$DO?$DNy?$AA@
CONST	SEGMENT
??_C@_0BM@OEGAKNLC@x?4__irshift__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?$DO?$DO?$DNy?$AA@ DB 'x'
	DB	'.__irshift__(y) <==> x>>=y', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@NIKIIBEJ@x?4__ilshift__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?$DM?$DM?$DNy?$AA@
CONST	SEGMENT
??_C@_0BM@NIKIIBEJ@x?4__ilshift__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?$DM?$DM?$DNy?$AA@ DB 'x'
	DB	'.__ilshift__(y) <==> x<<=y', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@IFHFJGNM@x?4__ipow__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?$CK?$CK?$DNy?$AA@
CONST	SEGMENT
??_C@_0BJ@IFHFJGNM@x?4__ipow__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?$CK?$CK?$DNy?$AA@ DB 'x'
	DB	'.__ipow__(y) <==> x**=y', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@IMMCILKE@x?4__imod__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?$CF?$DNy?$AA@
CONST	SEGMENT
??_C@_0BI@IMMCILKE@x?4__imod__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?$CF?$DNy?$AA@ DB 'x'
	DB	'.__imod__(y) <==> x%=y', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@OJHENPL@x?4__imul__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?$CK?$DNy?$AA@
CONST	SEGMENT
??_C@_0BI@OJHENPL@x?4__imul__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?$CK?$DNy?$AA@ DB 'x'
	DB	'.__imul__(y) <==> x*=y', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@FFFLKAEI@x?4__isub__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?9?$DNy?$AA@
CONST	SEGMENT
??_C@_0BI@FFFLKAEI@x?4__isub__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?9?$DNy?$AA@ DB 'x'
	DB	'.__isub__(y) <==> x-=y', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@HBADJPJO@x?4__iadd__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?$CL?$DNy?$AA@
CONST	SEGMENT
??_C@_0BI@HBADJPJO@x?4__iadd__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?$CL?$DNy?$AA@ DB 'x'
	DB	'.__iadd__(y) <==> x+=y', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@HEPIFLMJ@x?4__float__?$CI?$CJ?5?$DM?$DN?$DN?$DO?5float?$CIx?$CJ?$AA@
CONST	SEGMENT
??_C@_0BM@HEPIFLMJ@x?4__float__?$CI?$CJ?5?$DM?$DN?$DN?$DO?5float?$CIx?$CJ?$AA@ DB 'x'
	DB	'.__float__() <==> float(x)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@BGKNGPBI@x?4__int__?$CI?$CJ?5?$DM?$DN?$DN?$DO?5int?$CIx?$CJ?$AA@
CONST	SEGMENT
??_C@_0BI@BGKNGPBI@x?4__int__?$CI?$CJ?5?$DM?$DN?$DN?$DO?5int?$CIx?$CJ?$AA@ DB 'x'
	DB	'.__int__() <==> int(x)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@NBLDDBOA@x?4__ror__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5y?$HMx?$AA@
CONST	SEGMENT
??_C@_0BG@NBLDDBOA@x?4__ror__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5y?$HMx?$AA@ DB 'x'
	DB	'.__ror__(y) <==> y|x', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@IGCMIDJE@x?4__or__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?$HMy?$AA@
CONST	SEGMENT
??_C@_0BF@IGCMIDJE@x?4__or__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?$HMy?$AA@ DB 'x'
	DB	'.__or__(y) <==> x|y', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@JDGCAPPB@x?4__rxor__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5y?$FOx?$AA@
CONST	SEGMENT
??_C@_0BH@JDGCAPPB@x?4__rxor__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5y?$FOx?$AA@ DB 'x'
	DB	'.__rxor__(y) <==> y^x', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@FJFIDAMF@x?4__xor__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?$FOy?$AA@
CONST	SEGMENT
??_C@_0BG@FJFIDAMF@x?4__xor__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?$FOy?$AA@ DB 'x'
	DB	'.__xor__(y) <==> x^y', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@CNDAOONF@x?4__rand__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5y?$CGx?$AA@
CONST	SEGMENT
??_C@_0BH@CNDAOONF@x?4__rand__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5y?$CGx?$AA@ DB 'x'
	DB	'.__rand__(y) <==> y&x', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@OHAKNBOB@x?4__and__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?$CGy?$AA@
CONST	SEGMENT
??_C@_0BG@OHAKNBOB@x?4__and__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?$CGy?$AA@ DB 'x'
	DB	'.__and__(y) <==> x&y', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@IAPLBOLD@x?4__rrshift__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5y?$DO?$DOx?$AA@
CONST	SEGMENT
??_C@_0BL@IAPLBOLD@x?4__rrshift__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5y?$DO?$DOx?$AA@ DB 'x'
	DB	'.__rrshift__(y) <==> y>>x', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@KNBAONPF@x?4__rshift__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?$DO?$DOy?$AA@
CONST	SEGMENT
??_C@_0BK@KNBAONPF@x?4__rshift__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?$DO?$DOy?$AA@ DB 'x'
	DB	'.__rshift__(y) <==> x>>y', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@ELDDDEJH@x?4__rlshift__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5y?$DM?$DMx?$AA@
CONST	SEGMENT
??_C@_0BL@ELDDDEJH@x?4__rlshift__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5y?$DM?$DMx?$AA@ DB 'x'
	DB	'.__rlshift__(y) <==> y<<x', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@GGNIMHNB@x?4__lshift__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?$DM?$DMy?$AA@
CONST	SEGMENT
??_C@_0BK@GGNIMHNB@x?4__lshift__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?$DM?$DMy?$AA@ DB 'x'
	DB	'.__lshift__(y) <==> x<<y', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@MNOEIHBG@x?4__invert__?$CI?$CJ?5?$DM?$DN?$DN?$DO?5?$HOx?$AA@
CONST	SEGMENT
??_C@_0BH@MNOEIHBG@x?4__invert__?$CI?$CJ?5?$DM?$DN?$DN?$DO?5?$HOx?$AA@ DB 'x'
	DB	'.__invert__() <==> ~x', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@NDLGPPDN@x?4__bool__?$CI?$CJ?5?$DM?$DN?$DN?$DO?5x?5?$CB?$DN?50?$AA@
CONST	SEGMENT
??_C@_0BJ@NDLGPPDN@x?4__bool__?$CI?$CJ?5?$DM?$DN?$DN?$DO?5x?5?$CB?$DN?50?$AA@ DB 'x'
	DB	'.__bool__() <==> x != 0', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@HMJMPBKF@x?4__abs__?$CI?$CJ?5?$DM?$DN?$DN?$DO?5abs?$CIx?$CJ?$AA@
CONST	SEGMENT
??_C@_0BI@HMJMPBKF@x?4__abs__?$CI?$CJ?5?$DM?$DN?$DN?$DO?5abs?$CIx?$CJ?$AA@ DB 'x'
	DB	'.__abs__() <==> abs(x)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@CMMOLCI@x?4__pos__?$CI?$CJ?5?$DM?$DN?$DN?$DO?5?$CLx?$AA@
CONST	SEGMENT
??_C@_0BE@CMMOLCI@x?4__pos__?$CI?$CJ?5?$DM?$DN?$DN?$DO?5?$CLx?$AA@ DB 'x.'
	DB	'__pos__() <==> +x', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@NIPFJBMO@x?4__neg__?$CI?$CJ?5?$DM?$DN?$DN?$DO?5?9x?$AA@
CONST	SEGMENT
??_C@_0BE@NIPFJBMO@x?4__neg__?$CI?$CJ?5?$DM?$DN?$DN?$DO?5?9x?$AA@ DB 'x._'
	DB	'_neg__() <==> -x', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@EKLFEJDK@y?4__rpow__?$CIx?$FL?0?5z?$FN?$CJ?5?$DM?$DN?$DN?$DO?5pow?$CIx?0?5y@
CONST	SEGMENT
??_C@_0CH@EKLFEJDK@y?4__rpow__?$CIx?$FL?0?5z?$FN?$CJ?5?$DM?$DN?$DN?$DO?5pow?$CIx?0?5y@ DB 'y'
	DB	'.__rpow__(x[, z]) <==> pow(x, y[, z])', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@GMODBFLE@x?4__pow__?$CIy?$FL?0?5z?$FN?$CJ?5?$DM?$DN?$DN?$DO?5pow?$CIx?0?5y?$FL@
CONST	SEGMENT
??_C@_0CG@GMODBFLE@x?4__pow__?$CIy?$FL?0?5z?$FN?$CJ?5?$DM?$DN?$DN?$DO?5pow?$CIx?0?5y?$FL@ DB 'x'
	DB	'.__pow__(y[, z]) <==> pow(x, y[, z])', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@IFNHNEOL@x?4__rdivmod__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5divmod?$CIy?0?5@
CONST	SEGMENT
??_C@_0CD@IFNHNEOL@x?4__rdivmod__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5divmod?$CIy?0?5@ DB 'x'
	DB	'.__rdivmod__(y) <==> divmod(y, x)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@ICKLDEBI@x?4__divmod__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5divmod?$CIx?0?5y@
CONST	SEGMENT
??_C@_0CC@ICKLDEBI@x?4__divmod__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5divmod?$CIx?0?5y@ DB 'x'
	DB	'.__divmod__(y) <==> divmod(x, y)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@LECJOCMF@x?4__rmod__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5y?$CFx?$AA@
CONST	SEGMENT
??_C@_0BH@LECJOCMF@x?4__rmod__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5y?$CFx?$AA@ DB 'x'
	DB	'.__rmod__(y) <==> y%x', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@HOBDNNPB@x?4__mod__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?$CFy?$AA@
CONST	SEGMENT
??_C@_0BG@HOBDNNPB@x?4__mod__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?$CFy?$AA@ DB 'x'
	DB	'.__mod__(y) <==> x%y', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@OJBLHMJD@x?4__rmul__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5y?$CKx?$AA@
CONST	SEGMENT
??_C@_0BH@OJBLHMJD@x?4__rmul__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5y?$CKx?$AA@ DB 'x'
	DB	'.__rmul__(y) <==> y*x', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@CDCBEDKH@x?4__mul__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?$CKy?$AA@
CONST	SEGMENT
??_C@_0BG@CDCBEDKH@x?4__mul__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?$CKy?$AA@ DB 'x'
	DB	'.__mul__(y) <==> x*y', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@PLFINCCM@x?4__rsub__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5y?9x?$AA@
CONST	SEGMENT
??_C@_0BH@PLFINCCM@x?4__rsub__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5y?9x?$AA@ DB 'x'
	DB	'.__rsub__(y) <==> y-x', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@DBGCONBI@x?4__sub__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?9y?$AA@
CONST	SEGMENT
??_C@_0BG@DBGCONBI@x?4__sub__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?9y?$AA@ DB 'x'
	DB	'.__sub__(y) <==> x-y', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@BHMEKCNP@x?4__radd__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5y?$CLx?$AA@
CONST	SEGMENT
??_C@_0BH@BHMEKCNP@x?4__radd__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5y?$CLx?$AA@ DB 'x'
	DB	'.__radd__(y) <==> y+x', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@NNPOJNOL@x?4__add__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?$CLy?$AA@
CONST	SEGMENT
??_C@_0BG@NNPOJNOL@x?4__add__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?$CLy?$AA@ DB 'x'
	DB	'.__add__(y) <==> x+y', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DP@PEBGGFGF@x?4__init__?$CI?4?4?4?$CJ?5initializes?5x?$DL?5s@
CONST	SEGMENT
??_C@_0DP@PEBGGFGF@x?4__init__?$CI?4?4?4?$CJ?5initializes?5x?$DL?5s@ DB 'x'
	DB	'.__init__(...) initializes x; see help(type(x)) for signature'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@GKILFGMF@descr?4__delete__?$CIobj?$CJ?$AA@
CONST	SEGMENT
??_C@_0BG@GKILFGMF@descr?4__delete__?$CIobj?$CJ?$AA@ DB 'descr.__delete__'
	DB	'(obj)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@HNGNCDND@descr?4__set__?$CIobj?0?5value?$CJ?$AA@
CONST	SEGMENT
??_C@_0BK@HNGNCDND@descr?4__set__?$CIobj?0?5value?$CJ?$AA@ DB 'descr.__se'
	DB	't__(obj, value)', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@IDHMMHDD@descr?4__get__?$CIobj?$FL?0?5type?$FN?$CJ?5?9?$DO?5va@
CONST	SEGMENT
??_C@_0CE@IDHMMHDD@descr?4__get__?$CIobj?$FL?0?5type?$FN?$CJ?5?9?$DO?5va@ DB 'd'
	DB	'escr.__get__(obj[, type]) -> value', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@EKPAAGNF@x?4__next__?$CI?$CJ?5?$DM?$DN?$DN?$DO?5next?$CIx?$CJ?$AA@
CONST	SEGMENT
??_C@_0BK@EKPAAGNF@x?4__next__?$CI?$CJ?5?$DM?$DN?$DN?$DO?5next?$CIx?$CJ?$AA@ DB 'x'
	DB	'.__next__() <==> next(x)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@MLDIHFPK@x?4__iter__?$CI?$CJ?5?$DM?$DN?$DN?$DO?5iter?$CIx?$CJ?$AA@
CONST	SEGMENT
??_C@_0BK@MLDIHFPK@x?4__iter__?$CI?$CJ?5?$DM?$DN?$DN?$DO?5iter?$CIx?$CJ?$AA@ DB 'x'
	DB	'.__iter__() <==> iter(x)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@GPAFEHPB@x?4__ge__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?$DO?$DNy?$AA@
CONST	SEGMENT
??_C@_0BG@GPAFEHPB@x?4__ge__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?$DO?$DNy?$AA@ DB 'x'
	DB	'.__ge__(y) <==> x>=y', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@EALDPMEA@x?4__gt__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?$DOy?$AA@
CONST	SEGMENT
??_C@_0BF@EALDPMEA@x?4__gt__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?$DOy?$AA@ DB 'x'
	DB	'.__gt__(y) <==> x>y', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@JPHMBINF@x?4__ne__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?$CB?$DNy?$AA@
CONST	SEGMENT
??_C@_0BG@JPHMBINF@x?4__ne__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?$CB?$DNy?$AA@ DB 'x'
	DB	'.__ne__(y) <==> x!=y', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@BMDNDNCO@x?4__eq__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?$DN?$DNy?$AA@
CONST	SEGMENT
??_C@_0BG@BMDNDNCO@x?4__eq__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?$DN?$DNy?$AA@ DB 'x'
	DB	'.__eq__(y) <==> x==y', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@DINLPMBE@x?4__le__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?$DM?$DNy?$AA@
CONST	SEGMENT
??_C@_0BG@DINLPMBE@x?4__le__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?$DM?$DNy?$AA@ DB 'x'
	DB	'.__le__(y) <==> x<=y', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@PGLNDMDE@x?4__lt__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?$DMy?$AA@
CONST	SEGMENT
??_C@_0BF@PGLNDMDE@x?4__lt__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?$DMy?$AA@ DB 'x'
	DB	'.__lt__(y) <==> x<y', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@LPHBAOH@x?4__delattr__?$CI?8name?8?$CJ?5?$DM?$DN?$DN?$DO?5del?5x@
CONST	SEGMENT
??_C@_0CG@LPHBAOH@x?4__delattr__?$CI?8name?8?$CJ?5?$DM?$DN?$DN?$DO?5del?5x@ DB 'x'
	DB	'.__delattr__(''name'') <==> del x.name', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@GBCEKDDL@x?4__setattr__?$CI?8name?8?0?5value?$CJ?5?$DM?$DN?$DN@
CONST	SEGMENT
??_C@_0DB@GBCEKDDL@x?4__setattr__?$CI?8name?8?0?5value?$CJ?5?$DM?$DN?$DN@ DB 'x'
	DB	'.__setattr__(''name'', value) <==> x.name = value', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@MJEJMFHD@x?4__getattribute__?$CI?8name?8?$CJ?5?$DM?$DN?$DN?$DO?5@
CONST	SEGMENT
??_C@_0CH@MJEJMFHD@x?4__getattribute__?$CI?8name?8?$CJ?5?$DM?$DN?$DN?$DO?5@ DB 'x'
	DB	'.__getattribute__(''name'') <==> x.name', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CPPGOPCF@x?4__str__?$CI?$CJ?5?$DM?$DN?$DN?$DO?5str?$CIx?$CJ?$AA@
CONST	SEGMENT
??_C@_0BI@CPPGOPCF@x?4__str__?$CI?$CJ?5?$DM?$DN?$DN?$DO?5str?$CIx?$CJ?$AA@ DB 'x'
	DB	'.__str__() <==> str(x)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@OCNACKJL@x?4__call__?$CI?4?4?4?$CJ?5?$DM?$DN?$DN?$DO?5x?$CI?4?4?4?$CJ?$AA@
CONST	SEGMENT
??_C@_0BM@OCNACKJL@x?4__call__?$CI?4?4?4?$CJ?5?$DM?$DN?$DN?$DO?5x?$CI?4?4?4?$CJ?$AA@ DB 'x'
	DB	'.__call__(...) <==> x(...)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@BGPGEPCP@x?4__hash__?$CI?$CJ?5?$DM?$DN?$DN?$DO?5hash?$CIx?$CJ?$AA@
CONST	SEGMENT
??_C@_0BK@BGPGEPCP@x?4__hash__?$CI?$CJ?5?$DM?$DN?$DN?$DO?5hash?$CIx?$CJ?$AA@ DB 'x'
	DB	'.__hash__() <==> hash(x)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@EOOFHHJM@x?4__repr__?$CI?$CJ?5?$DM?$DN?$DN?$DO?5repr?$CIx?$CJ?$AA@
CONST	SEGMENT
??_C@_0BK@EOOFHHJM@x?4__repr__?$CI?$CJ?5?$DM?$DN?$DN?$DO?5repr?$CIx?$CJ?$AA@ DB 'x'
	DB	'.__repr__() <==> repr(x)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_07CKMCINHO@__del__?$AA@
CONST	SEGMENT
??_C@_07CKMCINHO@__del__?$AA@ DB '__del__', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08DOHHOJGB@__init__?$AA@
CONST	SEGMENT
??_C@_08DOHHOJGB@__init__?$AA@ DB '__init__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07KBLMMACN@__set__?$AA@
CONST	SEGMENT
??_C@_07KBLMMACN@__set__?$AA@ DB '__set__', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@OAODBFBD@__delete__?$AA@
CONST	SEGMENT
??_C@_0L@OAODBFBD@__delete__?$AA@ DB '__delete__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07DJPLIAKA@__get__?$AA@
CONST	SEGMENT
??_C@_07DJPLIAKA@__get__?$AA@ DB '__get__', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08MMJHJJBO@__next__?$AA@
CONST	SEGMENT
??_C@_08MMJHJJBO@__next__?$AA@ DB '__next__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08HMKBHKEB@__iter__?$AA@
CONST	SEGMENT
??_C@_08HMKBHKEB@__iter__?$AA@ DB '__iter__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06DHPPIHIH@__ge__?$AA@
CONST	SEGMENT
??_C@_06DHPPIHIH@__ge__?$AA@ DB '__ge__', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06NPFKLHHN@__gt__?$AA@
CONST	SEGMENT
??_C@_06NPFKLHHN@__gt__?$AA@ DB '__gt__', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DKOPOFPG@__ne__?$AA@
CONST	SEGMENT
??_C@_06DKOPOFPG@__ne__?$AA@ DB '__ne__', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EACPLGJG@__le__?$AA@
CONST	SEGMENT
??_C@_06EACPLGJG@__le__?$AA@ DB '__le__', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KIIKIGGM@__lt__?$AA@
CONST	SEGMENT
??_C@_06KIIKIGGM@__lt__?$AA@ DB '__lt__', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@CIMGLOJN@__setattr__?$AA@
CONST	SEGMENT
??_C@_0M@CIMGLOJN@__setattr__?$AA@ DB '__setattr__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@ECOKAOJC@__delattr__?$AA@
CONST	SEGMENT
??_C@_0M@ECOKAOJC@__delattr__?$AA@ DB '__delattr__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GIDJPAP@__getattr__?$AA@
CONST	SEGMENT
??_C@_0M@GIDJPAP@__getattr__?$AA@ DB '__getattr__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08DGBMPEPK@__call__?$AA@
CONST	SEGMENT
??_C@_08DGBMPEPK@__call__?$AA@ DB '__call__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07NJFHCBMD@__str__?$AA@
CONST	SEGMENT
??_C@_07NJFHCBMD@__str__?$AA@ DB '__str__', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08HJPCHLLJ@__repr__?$AA@
CONST	SEGMENT
??_C@_08HJPCHLLJ@__repr__?$AA@ DB '__repr__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LEBOILNI@__itruediv__?$AA@
CONST	SEGMENT
??_C@_0N@LEBOILNI@__itruediv__?$AA@ DB '__itruediv__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@FFFGEHEN@__ifloordiv__?$AA@
CONST	SEGMENT
??_C@_0O@FFFGEHEN@__ifloordiv__?$AA@ DB '__ifloordiv__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@DJMJMIFH@__rtruediv__?$AA@
CONST	SEGMENT
??_C@_0N@DJMJMIFH@__rtruediv__?$AA@ DB '__rtruediv__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@COJKGICO@__truediv__?$AA@
CONST	SEGMENT
??_C@_0M@COJKGICO@__truediv__?$AA@ DB '__truediv__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@CINMAOLP@__rfloordiv__?$AA@
CONST	SEGMENT
??_C@_0O@CINMAOLP@__rfloordiv__?$AA@ DB '__rfloordiv__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@BBCJEIH@__floordiv__?$AA@
CONST	SEGMENT
??_C@_0N@BBCJEIH@__floordiv__?$AA@ DB '__floordiv__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07GMCKKGKN@__ior__?$AA@
CONST	SEGMENT
??_C@_07GMCKKGKN@__ior__?$AA@ DB '__ior__', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08EBNDKCJL@__ixor__?$AA@
CONST	SEGMENT
??_C@_08EBNDKCJL@__ixor__?$AA@ DB '__ixor__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08CNBINADL@__iand__?$AA@
CONST	SEGMENT
??_C@_08CNBINADL@__iand__?$AA@ DB '__iand__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MPLFEGLF@__irshift__?$AA@
CONST	SEGMENT
??_C@_0M@MPLFEGLF@__irshift__?$AA@ DB '__irshift__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@KLLHNPFG@__ilshift__?$AA@
CONST	SEGMENT
??_C@_0M@KLLHNPFG@__ilshift__?$AA@ DB '__ilshift__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08JKFONAME@__ipow__?$AA@
CONST	SEGMENT
??_C@_08JKFONAME@__ipow__?$AA@ DB '__ipow__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08GHLKDJPA@__imod__?$AA@
CONST	SEGMENT
??_C@_08GHLKDJPA@__imod__?$AA@ DB '__imod__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08IIFOJODM@__imul__?$AA@
CONST	SEGMENT
??_C@_08IIFOJODM@__imul__?$AA@ DB '__imul__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08FBFNIKOE@__isub__?$AA@
CONST	SEGMENT
??_C@_08FBFNIKOE@__isub__?$AA@ DB '__isub__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08GHKIMIJK@__iadd__?$AA@
CONST	SEGMENT
??_C@_08GHKIMIJK@__iadd__?$AA@ DB '__iadd__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09EAHNLHOJ@__float__?$AA@
CONST	SEGMENT
??_C@_09EAHNLHOJ@__float__?$AA@ DB '__float__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07HECBNAMB@__int__?$AA@
CONST	SEGMENT
??_C@_07HECBNAMB@__int__?$AA@ DB '__int__', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07FDLFEPF@__ror__?$AA@
CONST	SEGMENT
??_C@_07FDLFEPF@__ror__?$AA@ DB '__ror__', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MKEBKDGA@__or__?$AA@
CONST	SEGMENT
??_C@_06MKEBKDGA@__or__?$AA@ DB '__or__', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08CEAKGKKP@__rxor__?$AA@
CONST	SEGMENT
??_C@_08CEAKGKKP@__rxor__?$AA@ DB '__rxor__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07KEKAHHJD@__xor__?$AA@
CONST	SEGMENT
??_C@_07KEKAHHJD@__xor__?$AA@ DB '__xor__', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08EIMBBIAP@__rand__?$AA@
CONST	SEGMENT
??_C@_08EIMBBIAP@__rand__?$AA@ DB '__rand__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07MIGLAFDD@__and__?$AA@
CONST	SEGMENT
??_C@_07MIGLAFDD@__and__?$AA@ DB '__and__', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@BAPLDMKK@__rrshift__?$AA@
CONST	SEGMENT
??_C@_0M@BAPLDMKK@__rrshift__?$AA@ DB '__rrshift__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@PEOFAGDE@__rshift__?$AA@
CONST	SEGMENT
??_C@_0L@PEOFAGDE@__rshift__?$AA@ DB '__rshift__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@HEPJKFEJ@__rlshift__?$AA@
CONST	SEGMENT
??_C@_0M@HEPJKFEJ@__rlshift__?$AA@ DB '__rlshift__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JAOHJPNH@__lshift__?$AA@
CONST	SEGMENT
??_C@_0L@JAOHJPNH@__lshift__?$AA@ DB '__lshift__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@OIINOIMI@__invert__?$AA@
CONST	SEGMENT
??_C@_0L@OIINOIMI@__invert__?$AA@ DB '__invert__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09NLFDFNNH@__index__?$AA@
CONST	SEGMENT
??_C@_09NLFDFNNH@__index__?$AA@ DB '__index__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08ONMBOEOO@__bool__?$AA@
CONST	SEGMENT
??_C@_08ONMBOEOO@__bool__?$AA@ DB '__bool__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07MAFFIHBE@__abs__?$AA@
CONST	SEGMENT
??_C@_07MAFFIHBE@__abs__?$AA@ DB '__abs__', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07PAEPJCJL@__pos__?$AA@
CONST	SEGMENT
??_C@_07PAEPJCJL@__pos__?$AA@ DB '__pos__', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07FMFICJBJ@__neg__?$AA@
CONST	SEGMENT
??_C@_07FMFICJBJ@__neg__?$AA@ DB '__neg__', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08PPIHBIPA@__rpow__?$AA@
CONST	SEGMENT
??_C@_08PPIHBIPA@__rpow__?$AA@ DB '__rpow__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07HPCNAFMM@__pow__?$AA@
CONST	SEGMENT
??_C@_07HPCNAFMM@__pow__?$AA@ DB '__pow__', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@NDCDLKNJ@__rdivmod__?$AA@
CONST	SEGMENT
??_C@_0M@NDCDLKNJ@__rdivmod__?$AA@ DB '__rdivmod__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DHDNIAEH@__divmod__?$AA@
CONST	SEGMENT
??_C@_0L@DHDNIAEH@__divmod__?$AA@ DB '__divmod__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08CGDPBME@__rmod__?$AA@
CONST	SEGMENT
??_C@_08CGDPBME@__rmod__?$AA@ DB '__rmod__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07ICMJOMPI@__mod__?$AA@
CONST	SEGMENT
??_C@_07ICMJOMPI@__mod__?$AA@ DB '__mod__', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08ONIHFGAI@__rmul__?$AA@
CONST	SEGMENT
??_C@_08ONIHFGAI@__rmul__?$AA@ DB '__rmul__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07GNCNELDE@__mul__?$AA@
CONST	SEGMENT
??_C@_07GNCNELDE@__mul__?$AA@ DB '__mul__', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08DEIEECNA@__rsub__?$AA@
CONST	SEGMENT
??_C@_08DEIEECNA@__rsub__?$AA@ DB '__rsub__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07LECOFPOM@__sub__?$AA@
CONST	SEGMENT
??_C@_07LECOFPOM@__sub__?$AA@ DB '__sub__', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08CHBAAKO@__radd__?$AA@
CONST	SEGMENT
??_C@_08CHBAAKO@__radd__?$AA@ DB '__radd__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07ICNLBNJC@__add__?$AA@
CONST	SEGMENT
??_C@_07ICNLBNJC@__add__?$AA@ DB '__add__', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MCIOADFH@__contains__?$AA@
CONST	SEGMENT
??_C@_0N@MCIOADFH@__contains__?$AA@ DB '__contains__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@EONDAJAB@__setitem__?$AA@
CONST	SEGMENT
??_C@_0M@EONDAJAB@__setitem__?$AA@ DB '__setitem__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@CEPPLJAO@__delitem__?$AA@
CONST	SEGMENT
??_C@_0M@CEPPLJAO@__delitem__?$AA@ DB '__delitem__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07GMJIMHJI@__len__?$AA@
CONST	SEGMENT
??_C@_07GMJIMHJI@__len__?$AA@ DB '__len__', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DO@MFNFNJKD@T?4__new__?$CIS?0?5?4?4?4?$CJ?5?9?$DO?5a?5new?5objec@
CONST	SEGMENT
??_C@_0DO@MFNFNJKD@T?4__new__?$CIS?0?5?4?4?4?$CJ?5?9?$DO?5a?5new?5objec@ DB 'T'
	DB	'.__new__(S, ...) -> a new object with type S, a subtype of T', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06JCEEBECP@__eq__?$AA@
CONST	SEGMENT
??_C@_06JCEEBECP@__eq__?$AA@ DB '__eq__', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@EEFIMND@The?5most?5base?5type?$AA@
CONST	SEGMENT
??_C@_0BD@EEFIMND@The?5most?5base?5type?$AA@ DB 'The most base type', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06IEOJBDIK@object?$AA@
CONST	SEGMENT
??_C@_06IEOJBDIK@object?$AA@ DB 'object', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@DOIFJKJG@__dir__?$CI?$CJ?5?9?$DO?5list?6default?5dir?$CI?$CJ?5@
CONST	SEGMENT
??_C@_0CP@DOIFJKJG@__dir__?$CI?$CJ?5?9?$DO?5list?6default?5dir?$CI?$CJ?5@ DB '_'
	DB	'_dir__() -> list', 0aH, 'default dir() implementation', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@GGNPGAHM@__sizeof__?$CI?$CJ?5?9?$DO?5int?6size?5of?5obje@
CONST	SEGMENT
??_C@_0DH@GGNPGAHM@__sizeof__?$CI?$CJ?5?9?$DO?5int?6size?5of?5obje@ DB '_'
	DB	'_sizeof__() -> int', 0aH, 'size of object in memory, in bytes'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@OLCCKPLB@default?5object?5formatter?$AA@
CONST	SEGMENT
??_C@_0BJ@OLCCKPLB@default?5object?5formatter?$AA@ DB 'default object for'
	DB	'matter', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MEMCGMKL@__format__?$AA@
CONST	SEGMENT
??_C@_0L@MEMCGMKL@__format__?$AA@ DB '__format__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@NHNPNHAH@__subclasshook__?$AA@
CONST	SEGMENT
??_C@_0BB@NHNPNHAH@__subclasshook__?$AA@ DB '__subclasshook__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@KKCCEOPP@helper?5for?5pickle?$AA@
CONST	SEGMENT
??_C@_0BC@KKCCEOPP@helper?5for?5pickle?$AA@ DB 'helper for pickle', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@CFEDDKPG@__reduce_ex__?$AA@
CONST	SEGMENT
??_C@_0O@CFEDDKPG@__reduce_ex__?$AA@ DB '__reduce_ex__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NNMACJIG@__reduce__?$AA@
CONST	SEGMENT
??_C@_0L@NNMACJIG@__reduce__?$AA@ DB '__reduce__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05CFHBDDLG@items?$AA@
CONST	SEGMENT
??_C@_05CFHBDDLG@items?$AA@ DB 'items', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@GEMAGKL@__newobj__?$AA@
CONST	SEGMENT
??_C@_0L@GEMAGKL@__newobj__?$AA@ DB '__newobj__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NAMJJHIO@__getstate__?$AA@
CONST	SEGMENT
??_C@_0N@NAMJJHIO@__getstate__?$AA@ DB '__getstate__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BCBHENLA@__getnewargs__?$AA@
CONST	SEGMENT
??_C@_0P@BCBHENLA@__getnewargs__?$AA@ DB '__getnewargs__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NMBFFBAC@_slotnames?$AA@
CONST	SEGMENT
??_C@_0L@NMBFFBAC@_slotnames?$AA@ DB '_slotnames', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@NLMJLHMN@__slotnames__?$AA@
CONST	SEGMENT
??_C@_0O@NLMJLHMN@__slotnames__?$AA@ DB '__slotnames__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07ODDBKIAB@copyreg?$AA@
CONST	SEGMENT
??_C@_07ODDBKIAB@copyreg?$AA@ DB 'copyreg', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@BFBMEIMB@the?5object?8s?5class?$AA@
CONST	SEGMENT
??_C@_0BD@BFBMEIMB@the?5object?8s?5class?$AA@ DB 'the object''s class', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06GOHDHELE@sorted?$AA@
CONST	SEGMENT
??_C@_06GOHDHELE@sorted?$AA@ DB 'sorted', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02KEGNLNML@?0?5?$AA@
CONST	SEGMENT
??_C@_02KEGNLNML@?0?5?$AA@ DB ', ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04GPMDFGEJ@type?$AA@
CONST	SEGMENT
??_C@_04GPMDFGEJ@type?$AA@ DB 'type', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@IFDKCHCE@__sizeof__?$CI?$CJ?5?9?$DO?5int?6return?5memor@
CONST	SEGMENT
??_C@_0EB@IFDKCHCE@__sizeof__?$CI?$CJ?5?9?$DO?5int?6return?5memor@ DB '__'
	DB	'sizeof__() -> int', 0aH, 'return memory consumption of the ty'
	DB	'pe object', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HOGGIPGN@__sizeof__?$AA@
CONST	SEGMENT
??_C@_0L@HOGGIPGN@__sizeof__?$AA@ DB '__sizeof__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DP@LCGOHIAJ@__dir__?$CI?$CJ?5?9?$DO?5list?6specialized?5__@
CONST	SEGMENT
??_C@_0DP@LCGOHIAJ@__dir__?$CI?$CJ?5?9?$DO?5list?6specialized?5__@ DB '__'
	DB	'dir__() -> list', 0aH, 'specialized __dir__ implementation fo'
	DB	'r types', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_07FPPEEAND@__dir__?$AA@
CONST	SEGMENT
??_C@_07FPPEEAND@__dir__?$AA@ DB '__dir__', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DL@PBOIKCPL@__subclasscheck__?$CI?$CJ?5?9?$DO?5bool?6chec@
CONST	SEGMENT
??_C@_0DL@PBOIKCPL@__subclasscheck__?$CI?$CJ?5?9?$DO?5bool?6chec@ DB '__s'
	DB	'ubclasscheck__() -> bool', 0aH, 'check if a class is a subcla'
	DB	'ss', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@NFPPCOGG@__subclasscheck__?$AA@
CONST	SEGMENT
??_C@_0BC@NFPPCOGG@__subclasscheck__?$AA@ DB '__subclasscheck__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DO@KLHIJGEM@__instancecheck__?$CI?$CJ?5?9?$DO?5bool?6chec@
CONST	SEGMENT
??_C@_0DO@KLHIJGEM@__instancecheck__?$CI?$CJ?5?9?$DO?5bool?6chec@ DB '__i'
	DB	'nstancecheck__() -> bool', 0aH, 'check if an object is an ins'
	DB	'tance', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@JKBHKBMG@__instancecheck__?$AA@
CONST	SEGMENT
??_C@_0BC@JKBHKBMG@__instancecheck__?$AA@ DB '__instancecheck__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EL@GOMGOOLM@__prepare__?$CI?$CJ?5?9?$DO?5dict?6used?5to?5cr@
CONST	SEGMENT
??_C@_0EL@GOMGOOLM@__prepare__?$CI?$CJ?5?9?$DO?5dict?6used?5to?5cr@ DB '_'
	DB	'_prepare__() -> dict', 0aH, 'used to create the namespace for'
	DB	' the class statement', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GLHNIFEH@__prepare__?$AA@
CONST	SEGMENT
??_C@_0M@GLHNIFEH@__prepare__?$AA@ DB '__prepare__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@NPEDHMIB@__subclasses__?$CI?$CJ?5?9?$DO?5list?5of?5imme@
CONST	SEGMENT
??_C@_0DB@NPEDHMIB@__subclasses__?$CI?$CJ?5?9?$DO?5list?5of?5imme@ DB '__'
	DB	'subclasses__() -> list of immediate subclasses', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@IOKGGKON@__subclasses__?$AA@
CONST	SEGMENT
??_C@_0P@IOKGGKON@__subclasses__?$AA@ DB '__subclasses__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@EJDLFMM@mro?$CI?$CJ?5?9?$DO?5list?6return?5a?5type?8s?5me@
CONST	SEGMENT
??_C@_0DG@EJDLFMM@mro?$CI?$CJ?5?9?$DO?5list?6return?5a?5type?8s?5me@ DB 'm'
	DB	'ro() -> list', 0aH, 'return a type''s method resolution order'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_09EBPBKION@__slots__?$AA@
CONST	SEGMENT
??_C@_09EBPBKION@__slots__?$AA@ DB '__slots__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04BCIDKIGN@dict?$AA@
CONST	SEGMENT
??_C@_04BCIDKIGN@dict?$AA@ DB 'dict', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05JMNHICHM@bases?$AA@
CONST	SEGMENT
??_C@_05JMNHICHM@bases?$AA@ DB 'bases', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04MEMAJGDJ@name?$AA@
CONST	SEGMENT
??_C@_04MEMAJGDJ@name?$AA@ DB 'name', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@DKNNDAFM@list?5of?5weak?5references?5to?5the?5o@
CONST	SEGMENT
??_C@_0DD@DKNNDAFM@list?5of?5weak?5references?5to?5the?5o@ DB 'list of we'
	DB	'ak references to the object (if defined)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@OFKEODAB@__weakref__?$AA@
CONST	SEGMENT
??_C@_0M@OFKEODAB@__weakref__?$AA@ DB '__weakref__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@GPHMLMIJ@dictionary?5for?5instance?5variable@
CONST	SEGMENT
??_C@_0CP@GPHMLMIJ@dictionary?5for?5instance?5variable@ DB 'dictionary fo'
	DB	'r instance variables (if defined)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03KCOHMEGL@mro?$AA@
CONST	SEGMENT
??_C@_03KCOHMEGL@mro?$AA@ DB 'mro', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@EMDECJMP@__abstractmethods__?$AA@
CONST	SEGMENT
??_C@_0BE@EMDECJMP@__abstractmethods__?$AA@ DB '__abstractmethods__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09LJKDIEEK@__bases__?$AA@
CONST	SEGMENT
??_C@_09LJKDIEEK@__bases__?$AA@ DB '__bases__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@FMLGAKCE@__qualname__?$AA@
CONST	SEGMENT
??_C@_0N@FMLGAKCE@__qualname__?$AA@ DB '__qualname__', 00H ; `string'
CONST	ENDS
_DATA	SEGMENT
type_members DQ	FLAT:??_C@_0O@IAOKENCJ@__basicsize__?$AA@
	DD	013H
	ORG $+4
	DQ	0000000000000078H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0N@OJNCBPH@__itemsize__?$AA@
	DD	013H
	ORG $+4
	DQ	0000000000000080H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_09GIOABLIA@__flags__?$AA@
	DD	02H
	ORG $+4
	DQ	0000000000000100H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0BC@PHCHJLGH@__weakrefoffset__?$AA@
	DD	02H
	ORG $+4
	DQ	0000000000000128H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_08PNDLAJH@__base__?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000158H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0P@NBEFJBEP@__dictoffset__?$AA@
	DD	02H
	ORG $+4
	DQ	0000000000000178H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_07MNLIDIMK@__mro__?$AA@
	DD	06H
	ORG $+4
	DQ	00000000000001b0H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	0000000000000000H
	ORG $+32
type_getsets DQ	FLAT:??_C@_08BHKDPDAA@__name__?$AA@
	DQ	FLAT:type_name
	DQ	FLAT:type_set_name
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0N@FMLGAKCE@__qualname__?$AA@
	DQ	FLAT:type_qualname
	DQ	FLAT:type_set_qualname
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_09LJKDIEEK@__bases__?$AA@
	DQ	FLAT:type_get_bases
	DQ	FLAT:type_set_bases
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0L@LNCJCPDP@__module__?$AA@
	DQ	FLAT:type_module
	DQ	FLAT:type_set_module
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0BE@EMDECJMP@__abstractmethods__?$AA@
	DQ	FLAT:type_abstractmethods
	DQ	FLAT:type_set_abstractmethods
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_08IBFKALI@__dict__?$AA@
	DQ	FLAT:type_dict
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_07DIBBIFIJ@__doc__?$AA@
	DQ	FLAT:type_get_doc
	DQ	FLAT:type_set_doc
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000000H
	ORG $+32
subtype_getsets_full DQ FLAT:??_C@_08IBFKALI@__dict__?$AA@
	DQ	FLAT:subtype_dict
	DQ	FLAT:subtype_setdict
	DQ	FLAT:??_C@_0CP@GPHMLMIJ@dictionary?5for?5instance?5variable@
	ORG $+8
	DQ	FLAT:??_C@_0M@OFKEODAB@__weakref__?$AA@
	DQ	FLAT:subtype_getweakref
	DQ	0000000000000000H
	DQ	FLAT:??_C@_0DD@DKNNDAFM@list?5of?5weak?5references?5to?5the?5o@
	ORG $+8
	DQ	0000000000000000H
	ORG $+32
	ORG $+8
subtype_getsets_dict_only DQ FLAT:??_C@_08IBFKALI@__dict__?$AA@
	DQ	FLAT:subtype_dict
	DQ	FLAT:subtype_setdict
	DQ	FLAT:??_C@_0CP@GPHMLMIJ@dictionary?5for?5instance?5variable@
	ORG $+8
	DQ	0000000000000000H
	ORG $+32
subtype_getsets_weakref_only DQ FLAT:??_C@_0M@OFKEODAB@__weakref__?$AA@
	DQ	FLAT:subtype_getweakref
	DQ	0000000000000000H
	DQ	FLAT:??_C@_0DD@DKNNDAFM@list?5of?5weak?5references?5to?5the?5o@
	ORG $+8
	DQ	0000000000000000H
	ORG $+32
?kwlist@?1??type_new@@9@9 DQ FLAT:??_C@_04MEMAJGDJ@name?$AA@ ; `type_new'::`2'::kwlist
	DQ	FLAT:??_C@_05JMNHICHM@bases?$AA@
	DQ	FLAT:??_C@_04BCIDKIGN@dict?$AA@
	DQ	0000000000000000H
slotoffsets DW	0ffffH
	DW	00H
	DW	00H
	DW	0300H
	DW	02f0H
	DW	02f8H
	DW	0220H
	DW	01e0H
	DW	0248H
	DW	0228H
	DW	0200H
	DW	0270H
	DW	02c8H
	DW	02e8H
	DW	0278H
	DW	02b0H
	DW	02d8H
	DW	02a0H
	DW	0288H
	DW	02c0H
	DW	0298H
	DW	0290H
	DW	02a8H
	DW	0280H
	DW	02e0H
	DW	02b8H
	DW	0260H
	DW	0230H
	DW	0238H
	DW	01f0H
	DW	0210H
	DW	0258H
	DW	0218H
	DW	0208H
	DW	01f8H
	DW	0240H
	DW	01e8H
	DW	02d0H
	DW	0250H
	DW	0330H
	DW	0310H
	DW	0340H
	DW	0348H
	DW	0350H
	DW	0320H
	DW	0308H
	DW	0318H
	DW	0188H
	DW	0158H
	DW	01a8H
	DW	0d8H
	DW	0118H
	DW	088H
	DW	01d0H
	DW	0168H
	DW	0170H
	DW	0108H
	DW	098H
	DW	0e8H
	DW	0d0H
	DW	0180H
	DW	01a0H
	DW	0130H
	DW	0138H
	DW	0140H
	DW	0190H
	DW	0b0H
	DW	0120H
	DW	0a0H
	DW	0f0H
	DW	0e0H
	DW	0110H
	DW	0148H
	DW	0150H
	DW	0198H
	ORG $+10
type_methods DQ	FLAT:??_C@_03KCOHMEGL@mro?$AA@
	DQ	FLAT:mro_external
	DD	04H
	ORG $+4
	DQ	FLAT:??_C@_0DG@EJDLFMM@mro?$CI?$CJ?5?9?$DO?5list?6return?5a?5type?8s?5me@
	DQ	FLAT:??_C@_0P@IOKGGKON@__subclasses__?$AA@
	DQ	FLAT:type_subclasses
	DD	04H
	ORG $+4
	DQ	FLAT:??_C@_0DB@NPEDHMIB@__subclasses__?$CI?$CJ?5?9?$DO?5list?5of?5imme@
	DQ	FLAT:??_C@_0M@GLHNIFEH@__prepare__?$AA@
	DQ	FLAT:type_prepare
	DD	013H
	ORG $+4
	DQ	FLAT:??_C@_0EL@GOMGOOLM@__prepare__?$CI?$CJ?5?9?$DO?5dict?6used?5to?5cr@
	DQ	FLAT:??_C@_0BC@JKBHKBMG@__instancecheck__?$AA@
	DQ	FLAT:type___instancecheck__
	DD	08H
	ORG $+4
	DQ	FLAT:??_C@_0DO@KLHIJGEM@__instancecheck__?$CI?$CJ?5?9?$DO?5bool?6chec@
	DQ	FLAT:??_C@_0BC@NFPPCOGG@__subclasscheck__?$AA@
	DQ	FLAT:type___subclasscheck__
	DD	08H
	ORG $+4
	DQ	FLAT:??_C@_0DL@PBOIKCPL@__subclasscheck__?$CI?$CJ?5?9?$DO?5bool?6chec@
	DQ	FLAT:??_C@_07FPPEEAND@__dir__?$AA@
	DQ	FLAT:type_dir
	DD	04H
	ORG $+4
	DQ	FLAT:??_C@_0DP@LCGOHIAJ@__dir__?$CI?$CJ?5?9?$DO?5list?6specialized?5__@
	DQ	FLAT:??_C@_0L@HOGGIPGN@__sizeof__?$AA@
	DQ	FLAT:type_sizeof
	DD	04H
	ORG $+4
	DQ	FLAT:??_C@_0EB@IFDKCHCE@__sizeof__?$CI?$CJ?5?9?$DO?5int?6return?5memor@
	DQ	0000000000000000H
	ORG $+24
type_doc DB	'type(object) -> the object''s type', 0aH, 'type(name, ba'
	DB	'ses, dict) -> a new type', 00H
	ORG $+8
PyType_Type DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_04GPMDFGEJ@type?$AA@
	DQ	0000000000000390H
	DQ	0000000000000028H
	DQ	FLAT:type_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:type_repr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:type_call
	DQ	0000000000000000H
	DQ	FLAT:type_getattro
	DQ	FLAT:type_setattro
	DQ	0000000000000000H
	DD	080044400H
	ORG $+4
	DQ	FLAT:type_doc
	DQ	FLAT:type_traverse
	DQ	FLAT:type_clear
	DQ	0000000000000000H
	DQ	00000000000001c8H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:type_methods
	DQ	FLAT:type_members
	DQ	FLAT:type_getsets
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000160H
	DQ	FLAT:type_init
	DQ	0000000000000000H
	DQ	FLAT:type_new
	DQ	FLAT:PyObject_GC_Del
	DQ	FLAT:type_is_gc
	ORG $+56
object_getsets DQ FLAT:??_C@_09LFGACEKG@__class__?$AA@
	DQ	FLAT:object_get_class
	DQ	FLAT:object_set_class
	DQ	FLAT:??_C@_0BD@BFBMEIMB@the?5object?8s?5class?$AA@
	ORG $+8
	DQ	0000000000000000H
	ORG $+32
object_subclasshook_doc DB 'Abstract classes can override this to customi'
	DB	'ze issubclass().', 0aH, 0aH, 'This is invoked early on by abc'
	DB	'.ABCMeta.__subclasscheck__().', 0aH, 'It should return True, '
	DB	'False or NotImplemented.  If it returns', 0aH, 'NotImplemente'
	DB	'd, the normal algorithm is used.  Otherwise, it', 0aH, 'overr'
	DB	'ides the normal algorithm (and the outcome is cached).', 0aH, 00H
	ORG $+11
object_methods DQ FLAT:??_C@_0O@CFEDDKPG@__reduce_ex__?$AA@
	DQ	FLAT:object_reduce_ex
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0BC@KKCCEOPP@helper?5for?5pickle?$AA@
	DQ	FLAT:??_C@_0L@NNMACJIG@__reduce__?$AA@
	DQ	FLAT:object_reduce
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0BC@KKCCEOPP@helper?5for?5pickle?$AA@
	DQ	FLAT:??_C@_0BB@NHNPNHAH@__subclasshook__?$AA@
	DQ	FLAT:object_subclasshook
	DD	011H
	ORG $+4
	DQ	FLAT:object_subclasshook_doc
	DQ	FLAT:??_C@_0L@MEMCGMKL@__format__?$AA@
	DQ	FLAT:object_format
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0BJ@OLCCKPLB@default?5object?5formatter?$AA@
	DQ	FLAT:??_C@_0L@HOGGIPGN@__sizeof__?$AA@
	DQ	FLAT:object_sizeof
	DD	04H
	ORG $+4
	DQ	FLAT:??_C@_0DH@GGNPGAHM@__sizeof__?$CI?$CJ?5?9?$DO?5int?6size?5of?5obje@
	DQ	FLAT:??_C@_07FPPEEAND@__dir__?$AA@
	DQ	FLAT:object_dir
	DD	04H
	ORG $+4
	DQ	FLAT:??_C@_0CP@DOIFJKJG@__dir__?$CI?$CJ?5?9?$DO?5list?6default?5dir?$CI?$CJ?5@
	DQ	0000000000000000H
	ORG $+24
PyBaseObject_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_06IEOJBDIK@object?$AA@
	DQ	0000000000000060H
	DQ	0000000000000000H
	DQ	FLAT:object_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:object_repr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:_Py_HashPointer
	DQ	0000000000000000H
	DQ	FLAT:object_str
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	FLAT:PyObject_GenericSetAttr
	DQ	0000000000000000H
	DD	040400H
	ORG $+4
	DQ	FLAT:??_C@_0BD@EEFIMND@The?5most?5base?5type?$AA@
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:object_richcompare
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:object_methods
	DQ	0000000000000000H
	DQ	FLAT:object_getsets
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:object_init
	DQ	FLAT:PyType_GenericAlloc
	DQ	FLAT:object_new
	DQ	FLAT:_PyObject_DebugFree
	ORG $+64
tp_new_methoddef DQ FLAT:??_C@_07MEBHOIG@__new__?$AA@
	DQ	FLAT:tp_new_wrapper
	DD	03H
	ORG $+4
	DQ	FLAT:??_C@_0DO@MFNFNJKD@T?4__new__?$CIS?0?5?4?4?4?$CJ?5?9?$DO?5a?5new?5objec@
	DQ	0000000000000000H
	ORG $+24
name_op	DQ	0000000000000000H
	DQ	FLAT:??_C@_06KIIKIGGM@__lt__?$AA@
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:??_C@_06EACPLGJG@__le__?$AA@
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:??_C@_06JCEEBECP@__eq__?$AA@
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:??_C@_06DKOPOFPG@__ne__?$AA@
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:??_C@_06NPFKLHHN@__gt__?$AA@
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:??_C@_06DHPPIHIH@__ge__?$AA@
	DQ	0000000000000000H
slotdefs DQ	FLAT:??_C@_0BB@FJMKAPEO@__getattribute__?$AA@
	DD	098H
	ORG $+4
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:??_C@_00CNPNBAHC@?$AA@
	ORG $+16
	DQ	FLAT:??_C@_0M@GIDJPAP@__getattr__?$AA@
	DD	098H
	ORG $+4
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:??_C@_00CNPNBAHC@?$AA@
	ORG $+16
	DQ	FLAT:??_C@_0M@CIMGLOJN@__setattr__?$AA@
	DD	0a0H
	ORG $+4
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:??_C@_00CNPNBAHC@?$AA@
	ORG $+16
	DQ	FLAT:??_C@_0M@ECOKAOJC@__delattr__?$AA@
	DD	0a0H
	ORG $+4
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:??_C@_00CNPNBAHC@?$AA@
	ORG $+16
	DQ	FLAT:??_C@_08HJPCHLLJ@__repr__?$AA@
	DD	0b0H
	ORG $+4
	DQ	FLAT:slot_tp_repr
	DQ	FLAT:wrap_unaryfunc
	DQ	FLAT:??_C@_0BK@EOOFHHJM@x?4__repr__?$CI?$CJ?5?$DM?$DN?$DN?$DO?5repr?$CIx?$CJ?$AA@
	ORG $+16
	DQ	FLAT:??_C@_08FJMJDHAE@__hash__?$AA@
	DD	0d0H
	ORG $+4
	DQ	FLAT:slot_tp_hash
	DQ	FLAT:wrap_hashfunc
	DQ	FLAT:??_C@_0BK@BGPGEPCP@x?4__hash__?$CI?$CJ?5?$DM?$DN?$DN?$DO?5hash?$CIx?$CJ?$AA@
	ORG $+16
	DQ	FLAT:??_C@_08DGBMPEPK@__call__?$AA@
	DD	0d8H
	ORG $+4
	DQ	FLAT:slot_tp_call
	DQ	FLAT:wrap_call
	DQ	FLAT:??_C@_0BM@OCNACKJL@x?4__call__?$CI?4?4?4?$CJ?5?$DM?$DN?$DN?$DO?5x?$CI?4?4?4?$CJ?$AA@
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_07NJFHCBMD@__str__?$AA@
	DD	0e0H
	ORG $+4
	DQ	FLAT:slot_tp_str
	DQ	FLAT:wrap_unaryfunc
	DQ	FLAT:??_C@_0BI@CPPGOPCF@x?4__str__?$CI?$CJ?5?$DM?$DN?$DN?$DO?5str?$CIx?$CJ?$AA@
	ORG $+16
	DQ	FLAT:??_C@_0BB@FJMKAPEO@__getattribute__?$AA@
	DD	0e8H
	ORG $+4
	DQ	FLAT:slot_tp_getattr_hook
	DQ	FLAT:wrap_binaryfunc
	DQ	FLAT:??_C@_0CH@MJEJMFHD@x?4__getattribute__?$CI?8name?8?$CJ?5?$DM?$DN?$DN?$DO?5@
	ORG $+16
	DQ	FLAT:??_C@_0M@GIDJPAP@__getattr__?$AA@
	DD	0e8H
	ORG $+4
	DQ	FLAT:slot_tp_getattr_hook
	DQ	0000000000000000H
	DQ	FLAT:??_C@_00CNPNBAHC@?$AA@
	ORG $+16
	DQ	FLAT:??_C@_0M@CIMGLOJN@__setattr__?$AA@
	DD	0f0H
	ORG $+4
	DQ	FLAT:slot_tp_setattro
	DQ	FLAT:wrap_setattr
	DQ	FLAT:??_C@_0DB@GBCEKDDL@x?4__setattr__?$CI?8name?8?0?5value?$CJ?5?$DM?$DN?$DN@
	ORG $+16
	DQ	FLAT:??_C@_0M@ECOKAOJC@__delattr__?$AA@
	DD	0f0H
	ORG $+4
	DQ	FLAT:slot_tp_setattro
	DQ	FLAT:wrap_delattr
	DQ	FLAT:??_C@_0CG@LPHBAOH@x?4__delattr__?$CI?8name?8?$CJ?5?$DM?$DN?$DN?$DO?5del?5x@
	ORG $+16
	DQ	FLAT:??_C@_06KIIKIGGM@__lt__?$AA@
	DD	0120H
	ORG $+4
	DQ	FLAT:slot_tp_richcompare
	DQ	FLAT:richcmp_lt
	DQ	FLAT:??_C@_0BF@PGLNDMDE@x?4__lt__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?$DMy?$AA@
	ORG $+16
	DQ	FLAT:??_C@_06EACPLGJG@__le__?$AA@
	DD	0120H
	ORG $+4
	DQ	FLAT:slot_tp_richcompare
	DQ	FLAT:richcmp_le
	DQ	FLAT:??_C@_0BG@DINLPMBE@x?4__le__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?$DM?$DNy?$AA@
	ORG $+16
	DQ	FLAT:??_C@_06JCEEBECP@__eq__?$AA@
	DD	0120H
	ORG $+4
	DQ	FLAT:slot_tp_richcompare
	DQ	FLAT:richcmp_eq
	DQ	FLAT:??_C@_0BG@BMDNDNCO@x?4__eq__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?$DN?$DNy?$AA@
	ORG $+16
	DQ	FLAT:??_C@_06DKOPOFPG@__ne__?$AA@
	DD	0120H
	ORG $+4
	DQ	FLAT:slot_tp_richcompare
	DQ	FLAT:richcmp_ne
	DQ	FLAT:??_C@_0BG@JPHMBINF@x?4__ne__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?$CB?$DNy?$AA@
	ORG $+16
	DQ	FLAT:??_C@_06NPFKLHHN@__gt__?$AA@
	DD	0120H
	ORG $+4
	DQ	FLAT:slot_tp_richcompare
	DQ	FLAT:richcmp_gt
	DQ	FLAT:??_C@_0BF@EALDPMEA@x?4__gt__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?$DOy?$AA@
	ORG $+16
	DQ	FLAT:??_C@_06DHPPIHIH@__ge__?$AA@
	DD	0120H
	ORG $+4
	DQ	FLAT:slot_tp_richcompare
	DQ	FLAT:richcmp_ge
	DQ	FLAT:??_C@_0BG@GPAFEHPB@x?4__ge__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?$DO?$DNy?$AA@
	ORG $+16
	DQ	FLAT:??_C@_08HMKBHKEB@__iter__?$AA@
	DD	0130H
	ORG $+4
	DQ	FLAT:slot_tp_iter
	DQ	FLAT:wrap_unaryfunc
	DQ	FLAT:??_C@_0BK@MLDIHFPK@x?4__iter__?$CI?$CJ?5?$DM?$DN?$DN?$DO?5iter?$CIx?$CJ?$AA@
	ORG $+16
	DQ	FLAT:??_C@_08MMJHJJBO@__next__?$AA@
	DD	0138H
	ORG $+4
	DQ	FLAT:slot_tp_iternext
	DQ	FLAT:wrap_next
	DQ	FLAT:??_C@_0BK@EKPAAGNF@x?4__next__?$CI?$CJ?5?$DM?$DN?$DN?$DO?5next?$CIx?$CJ?$AA@
	ORG $+16
	DQ	FLAT:??_C@_07DJPLIAKA@__get__?$AA@
	DD	0168H
	ORG $+4
	DQ	FLAT:slot_tp_descr_get
	DQ	FLAT:wrap_descr_get
	DQ	FLAT:??_C@_0CE@IDHMMHDD@descr?4__get__?$CIobj?$FL?0?5type?$FN?$CJ?5?9?$DO?5va@
	ORG $+16
	DQ	FLAT:??_C@_07KBLMMACN@__set__?$AA@
	DD	0170H
	ORG $+4
	DQ	FLAT:slot_tp_descr_set
	DQ	FLAT:wrap_descr_set
	DQ	FLAT:??_C@_0BK@HNGNCDND@descr?4__set__?$CIobj?0?5value?$CJ?$AA@
	ORG $+16
	DQ	FLAT:??_C@_0L@OAODBFBD@__delete__?$AA@
	DD	0170H
	ORG $+4
	DQ	FLAT:slot_tp_descr_set
	DQ	FLAT:wrap_descr_delete
	DQ	FLAT:??_C@_0BG@GKILFGMF@descr?4__delete__?$CIobj?$CJ?$AA@
	ORG $+16
	DQ	FLAT:??_C@_08DOHHOJGB@__init__?$AA@
	DD	0180H
	ORG $+4
	DQ	FLAT:slot_tp_init
	DQ	FLAT:wrap_init
	DQ	FLAT:??_C@_0DP@PEBGGFGF@x?4__init__?$CI?4?4?4?$CJ?5initializes?5x?$DL?5s@
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_07MEBHOIG@__new__?$AA@
	DD	0190H
	ORG $+4
	DQ	FLAT:slot_tp_new
	DQ	0000000000000000H
	DQ	FLAT:??_C@_00CNPNBAHC@?$AA@
	ORG $+16
	DQ	FLAT:??_C@_07CKMCINHO@__del__?$AA@
	DD	01d0H
	ORG $+4
	DQ	FLAT:slot_tp_del
	DQ	0000000000000000H
	DQ	FLAT:??_C@_00CNPNBAHC@?$AA@
	ORG $+16
	DQ	FLAT:??_C@_07ICNLBNJC@__add__?$AA@
	DD	01e0H
	ORG $+4
	DQ	FLAT:slot_nb_add
	DQ	FLAT:wrap_binaryfunc_l
	DQ	FLAT:??_C@_0BG@NNPOJNOL@x?4__add__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?$CLy?$AA@
	ORG $+16
	DQ	FLAT:??_C@_08CHBAAKO@__radd__?$AA@
	DD	01e0H
	ORG $+4
	DQ	FLAT:slot_nb_add
	DQ	FLAT:wrap_binaryfunc_r
	DQ	FLAT:??_C@_0BH@BHMEKCNP@x?4__radd__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5y?$CLx?$AA@
	ORG $+16
	DQ	FLAT:??_C@_07LECOFPOM@__sub__?$AA@
	DD	01e8H
	ORG $+4
	DQ	FLAT:slot_nb_subtract
	DQ	FLAT:wrap_binaryfunc_l
	DQ	FLAT:??_C@_0BG@DBGCONBI@x?4__sub__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?9y?$AA@
	ORG $+16
	DQ	FLAT:??_C@_08DEIEECNA@__rsub__?$AA@
	DD	01e8H
	ORG $+4
	DQ	FLAT:slot_nb_subtract
	DQ	FLAT:wrap_binaryfunc_r
	DQ	FLAT:??_C@_0BH@PLFINCCM@x?4__rsub__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5y?9x?$AA@
	ORG $+16
	DQ	FLAT:??_C@_07GNCNELDE@__mul__?$AA@
	DD	01f0H
	ORG $+4
	DQ	FLAT:slot_nb_multiply
	DQ	FLAT:wrap_binaryfunc_l
	DQ	FLAT:??_C@_0BG@CDCBEDKH@x?4__mul__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?$CKy?$AA@
	ORG $+16
	DQ	FLAT:??_C@_08ONIHFGAI@__rmul__?$AA@
	DD	01f0H
	ORG $+4
	DQ	FLAT:slot_nb_multiply
	DQ	FLAT:wrap_binaryfunc_r
	DQ	FLAT:??_C@_0BH@OJBLHMJD@x?4__rmul__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5y?$CKx?$AA@
	ORG $+16
	DQ	FLAT:??_C@_07ICMJOMPI@__mod__?$AA@
	DD	01f8H
	ORG $+4
	DQ	FLAT:slot_nb_remainder
	DQ	FLAT:wrap_binaryfunc_l
	DQ	FLAT:??_C@_0BG@HOBDNNPB@x?4__mod__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?$CFy?$AA@
	ORG $+16
	DQ	FLAT:??_C@_08CGDPBME@__rmod__?$AA@
	DD	01f8H
	ORG $+4
	DQ	FLAT:slot_nb_remainder
	DQ	FLAT:wrap_binaryfunc_r
	DQ	FLAT:??_C@_0BH@LECJOCMF@x?4__rmod__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5y?$CFx?$AA@
	ORG $+16
	DQ	FLAT:??_C@_0L@DHDNIAEH@__divmod__?$AA@
	DD	0200H
	ORG $+4
	DQ	FLAT:slot_nb_divmod
	DQ	FLAT:wrap_binaryfunc_l
	DQ	FLAT:??_C@_0CC@ICKLDEBI@x?4__divmod__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5divmod?$CIx?0?5y@
	ORG $+16
	DQ	FLAT:??_C@_0M@NDCDLKNJ@__rdivmod__?$AA@
	DD	0200H
	ORG $+4
	DQ	FLAT:slot_nb_divmod
	DQ	FLAT:wrap_binaryfunc_r
	DQ	FLAT:??_C@_0CD@IFNHNEOL@x?4__rdivmod__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5divmod?$CIy?0?5@
	ORG $+16
	DQ	FLAT:??_C@_07HPCNAFMM@__pow__?$AA@
	DD	0208H
	ORG $+4
	DQ	FLAT:slot_nb_power
	DQ	FLAT:wrap_ternaryfunc
	DQ	FLAT:??_C@_0CG@GMODBFLE@x?4__pow__?$CIy?$FL?0?5z?$FN?$CJ?5?$DM?$DN?$DN?$DO?5pow?$CIx?0?5y?$FL@
	ORG $+16
	DQ	FLAT:??_C@_08PPIHBIPA@__rpow__?$AA@
	DD	0208H
	ORG $+4
	DQ	FLAT:slot_nb_power
	DQ	FLAT:wrap_ternaryfunc_r
	DQ	FLAT:??_C@_0CH@EKLFEJDK@y?4__rpow__?$CIx?$FL?0?5z?$FN?$CJ?5?$DM?$DN?$DN?$DO?5pow?$CIx?0?5y@
	ORG $+16
	DQ	FLAT:??_C@_07FMFICJBJ@__neg__?$AA@
	DD	0210H
	ORG $+4
	DQ	FLAT:slot_nb_negative
	DQ	FLAT:wrap_unaryfunc
	DQ	FLAT:??_C@_0BE@NIPFJBMO@x?4__neg__?$CI?$CJ?5?$DM?$DN?$DN?$DO?5?9x?$AA@
	ORG $+16
	DQ	FLAT:??_C@_07PAEPJCJL@__pos__?$AA@
	DD	0218H
	ORG $+4
	DQ	FLAT:slot_nb_positive
	DQ	FLAT:wrap_unaryfunc
	DQ	FLAT:??_C@_0BE@CMMOLCI@x?4__pos__?$CI?$CJ?5?$DM?$DN?$DN?$DO?5?$CLx?$AA@
	ORG $+16
	DQ	FLAT:??_C@_07MAFFIHBE@__abs__?$AA@
	DD	0220H
	ORG $+4
	DQ	FLAT:slot_nb_absolute
	DQ	FLAT:wrap_unaryfunc
	DQ	FLAT:??_C@_0BI@HMJMPBKF@x?4__abs__?$CI?$CJ?5?$DM?$DN?$DN?$DO?5abs?$CIx?$CJ?$AA@
	ORG $+16
	DQ	FLAT:??_C@_08ONMBOEOO@__bool__?$AA@
	DD	0228H
	ORG $+4
	DQ	FLAT:slot_nb_bool
	DQ	FLAT:wrap_inquirypred
	DQ	FLAT:??_C@_0BJ@NDLGPPDN@x?4__bool__?$CI?$CJ?5?$DM?$DN?$DN?$DO?5x?5?$CB?$DN?50?$AA@
	ORG $+16
	DQ	FLAT:??_C@_0L@OIINOIMI@__invert__?$AA@
	DD	0230H
	ORG $+4
	DQ	FLAT:slot_nb_invert
	DQ	FLAT:wrap_unaryfunc
	DQ	FLAT:??_C@_0BH@MNOEIHBG@x?4__invert__?$CI?$CJ?5?$DM?$DN?$DN?$DO?5?$HOx?$AA@
	ORG $+16
	DQ	FLAT:??_C@_0L@JAOHJPNH@__lshift__?$AA@
	DD	0238H
	ORG $+4
	DQ	FLAT:slot_nb_lshift
	DQ	FLAT:wrap_binaryfunc_l
	DQ	FLAT:??_C@_0BK@GGNIMHNB@x?4__lshift__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?$DM?$DMy?$AA@
	ORG $+16
	DQ	FLAT:??_C@_0M@HEPJKFEJ@__rlshift__?$AA@
	DD	0238H
	ORG $+4
	DQ	FLAT:slot_nb_lshift
	DQ	FLAT:wrap_binaryfunc_r
	DQ	FLAT:??_C@_0BL@ELDDDEJH@x?4__rlshift__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5y?$DM?$DMx?$AA@
	ORG $+16
	DQ	FLAT:??_C@_0L@PEOFAGDE@__rshift__?$AA@
	DD	0240H
	ORG $+4
	DQ	FLAT:slot_nb_rshift
	DQ	FLAT:wrap_binaryfunc_l
	DQ	FLAT:??_C@_0BK@KNBAONPF@x?4__rshift__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?$DO?$DOy?$AA@
	ORG $+16
	DQ	FLAT:??_C@_0M@BAPLDMKK@__rrshift__?$AA@
	DD	0240H
	ORG $+4
	DQ	FLAT:slot_nb_rshift
	DQ	FLAT:wrap_binaryfunc_r
	DQ	FLAT:??_C@_0BL@IAPLBOLD@x?4__rrshift__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5y?$DO?$DOx?$AA@
	ORG $+16
	DQ	FLAT:??_C@_07MIGLAFDD@__and__?$AA@
	DD	0248H
	ORG $+4
	DQ	FLAT:slot_nb_and
	DQ	FLAT:wrap_binaryfunc_l
	DQ	FLAT:??_C@_0BG@OHAKNBOB@x?4__and__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?$CGy?$AA@
	ORG $+16
	DQ	FLAT:??_C@_08EIMBBIAP@__rand__?$AA@
	DD	0248H
	ORG $+4
	DQ	FLAT:slot_nb_and
	DQ	FLAT:wrap_binaryfunc_r
	DQ	FLAT:??_C@_0BH@CNDAOONF@x?4__rand__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5y?$CGx?$AA@
	ORG $+16
	DQ	FLAT:??_C@_07KEKAHHJD@__xor__?$AA@
	DD	0250H
	ORG $+4
	DQ	FLAT:slot_nb_xor
	DQ	FLAT:wrap_binaryfunc_l
	DQ	FLAT:??_C@_0BG@FJFIDAMF@x?4__xor__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?$FOy?$AA@
	ORG $+16
	DQ	FLAT:??_C@_08CEAKGKKP@__rxor__?$AA@
	DD	0250H
	ORG $+4
	DQ	FLAT:slot_nb_xor
	DQ	FLAT:wrap_binaryfunc_r
	DQ	FLAT:??_C@_0BH@JDGCAPPB@x?4__rxor__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5y?$FOx?$AA@
	ORG $+16
	DQ	FLAT:??_C@_06MKEBKDGA@__or__?$AA@
	DD	0258H
	ORG $+4
	DQ	FLAT:slot_nb_or
	DQ	FLAT:wrap_binaryfunc_l
	DQ	FLAT:??_C@_0BF@IGCMIDJE@x?4__or__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?$HMy?$AA@
	ORG $+16
	DQ	FLAT:??_C@_07FDLFEPF@__ror__?$AA@
	DD	0258H
	ORG $+4
	DQ	FLAT:slot_nb_or
	DQ	FLAT:wrap_binaryfunc_r
	DQ	FLAT:??_C@_0BG@NBLDDBOA@x?4__ror__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5y?$HMx?$AA@
	ORG $+16
	DQ	FLAT:??_C@_07HECBNAMB@__int__?$AA@
	DD	0260H
	ORG $+4
	DQ	FLAT:slot_nb_int
	DQ	FLAT:wrap_unaryfunc
	DQ	FLAT:??_C@_0BI@BGKNGPBI@x?4__int__?$CI?$CJ?5?$DM?$DN?$DN?$DO?5int?$CIx?$CJ?$AA@
	ORG $+16
	DQ	FLAT:??_C@_09EAHNLHOJ@__float__?$AA@
	DD	0270H
	ORG $+4
	DQ	FLAT:slot_nb_float
	DQ	FLAT:wrap_unaryfunc
	DQ	FLAT:??_C@_0BM@HEPIFLMJ@x?4__float__?$CI?$CJ?5?$DM?$DN?$DN?$DO?5float?$CIx?$CJ?$AA@
	ORG $+16
	DQ	FLAT:??_C@_08GHKIMIJK@__iadd__?$AA@
	DD	0278H
	ORG $+4
	DQ	FLAT:slot_nb_inplace_add
	DQ	FLAT:wrap_binaryfunc
	DQ	FLAT:??_C@_0BI@HBADJPJO@x?4__iadd__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?$CL?$DNy?$AA@
	ORG $+16
	DQ	FLAT:??_C@_08FBFNIKOE@__isub__?$AA@
	DD	0280H
	ORG $+4
	DQ	FLAT:slot_nb_inplace_subtract
	DQ	FLAT:wrap_binaryfunc
	DQ	FLAT:??_C@_0BI@FFFLKAEI@x?4__isub__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?9?$DNy?$AA@
	ORG $+16
	DQ	FLAT:??_C@_08IIFOJODM@__imul__?$AA@
	DD	0288H
	ORG $+4
	DQ	FLAT:slot_nb_inplace_multiply
	DQ	FLAT:wrap_binaryfunc
	DQ	FLAT:??_C@_0BI@OJHENPL@x?4__imul__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?$CK?$DNy?$AA@
	ORG $+16
	DQ	FLAT:??_C@_08GHLKDJPA@__imod__?$AA@
	DD	0290H
	ORG $+4
	DQ	FLAT:slot_nb_inplace_remainder
	DQ	FLAT:wrap_binaryfunc
	DQ	FLAT:??_C@_0BI@IMMCILKE@x?4__imod__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?$CF?$DNy?$AA@
	ORG $+16
	DQ	FLAT:??_C@_08JKFONAME@__ipow__?$AA@
	DD	0298H
	ORG $+4
	DQ	FLAT:slot_nb_inplace_power
	DQ	FLAT:wrap_binaryfunc
	DQ	FLAT:??_C@_0BJ@IFHFJGNM@x?4__ipow__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?$CK?$CK?$DNy?$AA@
	ORG $+16
	DQ	FLAT:??_C@_0M@KLLHNPFG@__ilshift__?$AA@
	DD	02a0H
	ORG $+4
	DQ	FLAT:slot_nb_inplace_lshift
	DQ	FLAT:wrap_binaryfunc
	DQ	FLAT:??_C@_0BM@NIKIIBEJ@x?4__ilshift__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?$DM?$DM?$DNy?$AA@
	ORG $+16
	DQ	FLAT:??_C@_0M@MPLFEGLF@__irshift__?$AA@
	DD	02a8H
	ORG $+4
	DQ	FLAT:slot_nb_inplace_rshift
	DQ	FLAT:wrap_binaryfunc
	DQ	FLAT:??_C@_0BM@OEGAKNLC@x?4__irshift__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?$DO?$DO?$DNy?$AA@
	ORG $+16
	DQ	FLAT:??_C@_08CNBINADL@__iand__?$AA@
	DD	02b0H
	ORG $+4
	DQ	FLAT:slot_nb_inplace_and
	DQ	FLAT:wrap_binaryfunc
	DQ	FLAT:??_C@_0BI@JBOMICMM@x?4__iand__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?$CG?$DNy?$AA@
	ORG $+16
	DQ	FLAT:??_C@_08EBNDKCJL@__ixor__?$AA@
	DD	02b8H
	ORG $+4
	DQ	FLAT:slot_nb_inplace_xor
	DQ	FLAT:wrap_binaryfunc
	DQ	FLAT:??_C@_0BI@KNFBDEPM@x?4__ixor__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?$FO?$DNy?$AA@
	ORG $+16
	DQ	FLAT:??_C@_07GMCKKGKN@__ior__?$AA@
	DD	02c0H
	ORG $+4
	DQ	FLAT:slot_nb_inplace_or
	DQ	FLAT:wrap_binaryfunc
	DQ	FLAT:??_C@_0BH@KMKCFFEL@x?4__ior__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?$HM?$DNy?$AA@
	ORG $+16
	DQ	FLAT:??_C@_0N@BBCJEIH@__floordiv__?$AA@
	DD	02c8H
	ORG $+4
	DQ	FLAT:slot_nb_floor_divide
	DQ	FLAT:wrap_binaryfunc_l
	DQ	FLAT:??_C@_0BM@HLMIDEGC@x?4__floordiv__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?1?1y?$AA@
	ORG $+16
	DQ	FLAT:??_C@_0O@CINMAOLP@__rfloordiv__?$AA@
	DD	02c8H
	ORG $+4
	DQ	FLAT:slot_nb_floor_divide
	DQ	FLAT:wrap_binaryfunc_r
	DQ	FLAT:??_C@_0BN@MDOPCGIM@x?4__rfloordiv__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5y?1?1x?$AA@
	ORG $+16
	DQ	FLAT:??_C@_0M@COJKGICO@__truediv__?$AA@
	DD	02d0H
	ORG $+4
	DQ	FLAT:slot_nb_true_divide
	DQ	FLAT:wrap_binaryfunc_l
	DQ	FLAT:??_C@_0BK@KJLHHIEM@x?4__truediv__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?1y?$AA@
	ORG $+16
	DQ	FLAT:??_C@_0N@DJMJMIFH@__rtruediv__?$AA@
	DD	02d0H
	ORG $+4
	DQ	FLAT:slot_nb_true_divide
	DQ	FLAT:wrap_binaryfunc_r
	DQ	FLAT:??_C@_0BL@BIAMFNP@x?4__rtruediv__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5y?1x?$AA@
	ORG $+16
	DQ	FLAT:??_C@_0O@FFFGEHEN@__ifloordiv__?$AA@
	DD	02d8H
	ORG $+4
	DQ	FLAT:slot_nb_inplace_floor_divide
	DQ	FLAT:wrap_binaryfunc
	DQ	FLAT:??_C@_0BN@KGGFDMPH@x?4__ifloordiv__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?1?1y?$AA@
	ORG $+16
	DQ	FLAT:??_C@_0N@LEBOILNI@__itruediv__?$AA@
	DD	02e0H
	ORG $+4
	DQ	FLAT:slot_nb_inplace_true_divide
	DQ	FLAT:wrap_binaryfunc
	DQ	FLAT:??_C@_0BL@NHAJGPKM@x?4__itruediv__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?1y?$AA@
	ORG $+16
	DQ	FLAT:??_C@_09NLFDFNNH@__index__?$AA@
	DD	02e8H
	ORG $+4
	DQ	FLAT:slot_nb_index
	DQ	FLAT:wrap_unaryfunc
	DQ	FLAT:??_C@_0CL@DOCBMFDB@x?$FLy?3z?$FN?5?$DM?$DN?$DN?$DO?5x?$FLy?4__index__?$CI?$CJ?3z?4__@
	ORG $+16
	DQ	FLAT:??_C@_07GMJIMHJI@__len__?$AA@
	DD	02f0H
	ORG $+4
	DQ	FLAT:slot_sq_length
	DQ	FLAT:wrap_lenfunc
	DQ	FLAT:??_C@_0BI@LJFJONPL@x?4__len__?$CI?$CJ?5?$DM?$DN?$DN?$DO?5len?$CIx?$CJ?$AA@
	ORG $+16
	DQ	FLAT:??_C@_0M@GAJGCIJD@__getitem__?$AA@
	DD	02f8H
	ORG $+4
	DQ	FLAT:slot_mp_subscript
	DQ	FLAT:wrap_binaryfunc
	DQ	FLAT:??_C@_0BL@MOLOBEHD@x?4__getitem__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?$FLy?$FN?$AA@
	ORG $+16
	DQ	FLAT:??_C@_0M@EONDAJAB@__setitem__?$AA@
	DD	0300H
	ORG $+4
	DQ	FLAT:slot_mp_ass_subscript
	DQ	FLAT:wrap_objobjargproc
	DQ	FLAT:??_C@_0CA@GAOMDJJJ@x?4__setitem__?$CIi?0?5y?$CJ?5?$DM?$DN?$DN?$DO?5x?$FLi?$FN?$DNy?$AA@
	ORG $+16
	DQ	FLAT:??_C@_0M@CEPPLJAO@__delitem__?$AA@
	DD	0300H
	ORG $+4
	DQ	FLAT:slot_mp_ass_subscript
	DQ	FLAT:wrap_delitem
	DQ	FLAT:??_C@_0BP@HKMFPPHC@x?4__delitem__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5del?5x?$FLy?$FN?$AA@
	ORG $+16
	DQ	FLAT:??_C@_07GMJIMHJI@__len__?$AA@
	DD	0308H
	ORG $+4
	DQ	FLAT:slot_sq_length
	DQ	FLAT:wrap_lenfunc
	DQ	FLAT:??_C@_0BI@LJFJONPL@x?4__len__?$CI?$CJ?5?$DM?$DN?$DN?$DO?5len?$CIx?$CJ?$AA@
	ORG $+16
	DQ	FLAT:??_C@_07ICNLBNJC@__add__?$AA@
	DD	0310H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:wrap_binaryfunc
	DQ	FLAT:??_C@_0BG@NNPOJNOL@x?4__add__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?$CLy?$AA@
	ORG $+16
	DQ	FLAT:??_C@_07GNCNELDE@__mul__?$AA@
	DD	0318H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:wrap_indexargfunc
	DQ	FLAT:??_C@_0BG@FOCCMDEC@x?4__mul__?$CIn?$CJ?5?$DM?$DN?$DN?$DO?5x?$CKn?$AA@
	ORG $+16
	DQ	FLAT:??_C@_08ONIHFGAI@__rmul__?$AA@
	DD	0318H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:wrap_indexargfunc
	DQ	FLAT:??_C@_0BH@FMFFBHMG@x?4__rmul__?$CIn?$CJ?5?$DM?$DN?$DN?$DO?5n?$CKx?$AA@
	ORG $+16
	DQ	FLAT:??_C@_0M@GAJGCIJD@__getitem__?$AA@
	DD	0320H
	ORG $+4
	DQ	FLAT:slot_sq_item
	DQ	FLAT:wrap_sq_item
	DQ	FLAT:??_C@_0BL@MOLOBEHD@x?4__getitem__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?$FLy?$FN?$AA@
	ORG $+16
	DQ	FLAT:??_C@_0M@EONDAJAB@__setitem__?$AA@
	DD	0330H
	ORG $+4
	DQ	FLAT:slot_sq_ass_item
	DQ	FLAT:wrap_sq_setitem
	DQ	FLAT:??_C@_0CA@GAOMDJJJ@x?4__setitem__?$CIi?0?5y?$CJ?5?$DM?$DN?$DN?$DO?5x?$FLi?$FN?$DNy?$AA@
	ORG $+16
	DQ	FLAT:??_C@_0M@CEPPLJAO@__delitem__?$AA@
	DD	0330H
	ORG $+4
	DQ	FLAT:slot_sq_ass_item
	DQ	FLAT:wrap_sq_delitem
	DQ	FLAT:??_C@_0BP@HKMFPPHC@x?4__delitem__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5del?5x?$FLy?$FN?$AA@
	ORG $+16
	DQ	FLAT:??_C@_0N@MCIOADFH@__contains__?$AA@
	DD	0340H
	ORG $+4
	DQ	FLAT:slot_sq_contains
	DQ	FLAT:wrap_objobjproc
	DQ	FLAT:??_C@_0BO@NHHBFPJ@x?4__contains__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5y?5in?5x?$AA@
	ORG $+16
	DQ	FLAT:??_C@_08GHKIMIJK@__iadd__?$AA@
	DD	0348H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:wrap_binaryfunc
	DQ	FLAT:??_C@_0BI@HBADJPJO@x?4__iadd__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?$CL?$DNy?$AA@
	ORG $+16
	DQ	FLAT:??_C@_08IIFOJODM@__imul__?$AA@
	DD	0350H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:wrap_indexargfunc
	DQ	FLAT:??_C@_0BI@OJHENPL@x?4__imul__?$CIy?$CJ?5?$DM?$DN?$DN?$DO?5x?$CK?$DNy?$AA@
	ORG $+16
	DQ	0000000000000000H
	ORG $+48
	ORG $+8
super_members DQ FLAT:??_C@_0O@BEEHOGAG@__thisclass__?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000060H
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0BL@NCAHCDDF@the?5class?5invoking?5super?$CI?$CJ?$AA@
	DQ	FLAT:??_C@_08KFOOMKEG@__self__?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000068H
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0CL@OAHEPBOJ@the?5instance?5invoking?5super?$CI?$CJ?$DL?5m@
	DQ	FLAT:??_C@_0P@FDFALBKM@__self_class__?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000070H
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0DH@MEJKBCJN@the?5type?5of?5the?5instance?5invokin@
	DQ	0000000000000000H
	ORG $+32
super_doc DB	'super() -> same as super(__class__, <first argument>)', 0aH
	DB	'super(type) -> unbound super object', 0aH, 'super(type, obj) '
	DB	'-> bound super object; requires isinstance(obj, type)', 0aH, 's'
	DB	'uper(type, type2) -> bound super object; requires issubclass('
	DB	'type2, type)', 0aH, 'Typical use to call a cooperative superc'
	DB	'lass method:', 0aH, 'class C(B):', 0aH, '    def meth(self, a'
	DB	'rg):', 0aH, '        super().meth(arg)', 0aH, 'This works for'
	DB	' class methods too:', 0aH, 'class C(B):', 0aH, '    @classmet'
	DB	'hod', 0aH, '    def cmeth(cls, arg):', 0aH, '        super().'
	DB	'cmeth(arg)', 0aH, 00H
	ORG $+12
PySuper_Type DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_05MKJDPMKP@super?$AA@
	DQ	0000000000000080H
	DQ	0000000000000000H
	DQ	FLAT:super_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:super_repr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:super_getattro
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044400H
	ORG $+4
	DQ	FLAT:super_doc
	DQ	FLAT:super_traverse
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:super_members
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:super_descr_get
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:super_init
	DQ	FLAT:PyType_GenericAlloc
	DQ	FLAT:PyType_GenericNew
	DQ	FLAT:PyObject_GC_Del
	ORG $+64
_DATA	ENDS
;	COMDAT ??_C@_07MNLIDIMK@__mro__?$AA@
CONST	SEGMENT
??_C@_07MNLIDIMK@__mro__?$AA@ DB '__mro__', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@NBEFJBEP@__dictoffset__?$AA@
CONST	SEGMENT
??_C@_0P@NBEFJBEP@__dictoffset__?$AA@ DB '__dictoffset__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08PNDLAJH@__base__?$AA@
CONST	SEGMENT
??_C@_08PNDLAJH@__base__?$AA@ DB '__base__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@PHCHJLGH@__weakrefoffset__?$AA@
CONST	SEGMENT
??_C@_0BC@PHCHJLGH@__weakrefoffset__?$AA@ DB '__weakrefoffset__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09GIOABLIA@__flags__?$AA@
CONST	SEGMENT
??_C@_09GIOABLIA@__flags__?$AA@ DB '__flags__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@OJNCBPH@__itemsize__?$AA@
CONST	SEGMENT
??_C@_0N@OJNCBPH@__itemsize__?$AA@ DB '__itemsize__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@IAOKENCJ@__basicsize__?$AA@
CONST	SEGMENT
??_C@_0O@IAOKENCJ@__basicsize__?$AA@ DB '__basicsize__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07MEBHOIG@__new__?$AA@
CONST	SEGMENT
??_C@_07MEBHOIG@__new__?$AA@ DB '__new__', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08BHKDPDAA@__name__?$AA@
CONST	SEGMENT
??_C@_08BHKDPDAA@__name__?$AA@ DB '__name__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@LNCJCPDP@__module__?$AA@
CONST	SEGMENT
??_C@_0L@LNCJCPDP@__module__?$AA@ DB '__module__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08FJMJDHAE@__hash__?$AA@
CONST	SEGMENT
??_C@_08FJMJDHAE@__hash__?$AA@ DB '__hash__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FJMKAPEO@__getattribute__?$AA@
CONST	SEGMENT
??_C@_0BB@FJMKAPEO@__getattribute__?$AA@ DB '__getattribute__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GAJGCIJD@__getitem__?$AA@
CONST	SEGMENT
??_C@_0M@GAJGCIJD@__getitem__?$AA@ DB '__getitem__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DIBBIFIJ@__doc__?$AA@
CONST	SEGMENT
??_C@_07DIBBIFIJ@__doc__?$AA@ DB '__doc__', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08IBFKALI@__dict__?$AA@
CONST	SEGMENT
??_C@_08IBFKALI@__dict__?$AA@ DB '__dict__', 00H	; `string'
CONST	ENDS
_TLS	SEGMENT
?PyId___del__@?1??slot_tp_del@@9@9 DQ 0000000000000000H	; `slot_tp_del'::`2'::PyId___del__
	DQ	FLAT:??_C@_07CKMCINHO@__del__?$AA@
	DQ	0000000000000000H
?PyId___new__@?1??slot_tp_new@@9@9 DQ 0000000000000000H	; `slot_tp_new'::`2'::PyId___new__
	DQ	FLAT:??_C@_07MEBHOIG@__new__?$AA@
	DQ	0000000000000000H
?PyId___init__@?1??slot_tp_init@@9@9 DQ 0000000000000000H ; `slot_tp_init'::`2'::PyId___init__
	DQ	FLAT:??_C@_08DOHHOJGB@__init__?$AA@
	DQ	0000000000000000H
?PyId___set__@?1??slot_tp_descr_set@@9@9 DQ 0000000000000000H ; `slot_tp_descr_set'::`2'::PyId___set__
	DQ	FLAT:??_C@_07KBLMMACN@__set__?$AA@
	DQ	0000000000000000H
?PyId___delete__@?1??slot_tp_descr_set@@9@9 DQ 0000000000000000H ; `slot_tp_descr_set'::`2'::PyId___delete__
	DQ	FLAT:??_C@_0L@OAODBFBD@__delete__?$AA@
	DQ	0000000000000000H
?PyId___get__@?1??slot_tp_descr_get@@9@9 DQ 0000000000000000H ; `slot_tp_descr_get'::`2'::PyId___get__
	DQ	FLAT:??_C@_07DJPLIAKA@__get__?$AA@
	DQ	0000000000000000H
?PyId___next__@?1??slot_tp_iternext@@9@9 DQ 0000000000000000H ; `slot_tp_iternext'::`2'::PyId___next__
	DQ	FLAT:??_C@_08MMJHJJBO@__next__?$AA@
	DQ	0000000000000000H
?PyId___iter__@?1??slot_tp_iter@@9@9 DQ 0000000000000000H ; `slot_tp_iter'::`2'::PyId___iter__
	DQ	FLAT:??_C@_08HMKBHKEB@__iter__?$AA@
	DQ	0000000000000000H
?PyId___setattr__@?1??slot_tp_setattro@@9@9 DQ 0000000000000000H ; `slot_tp_setattro'::`2'::PyId___setattr__
	DQ	FLAT:??_C@_0M@CIMGLOJN@__setattr__?$AA@
	DQ	0000000000000000H
?PyId___delattr__@?1??slot_tp_setattro@@9@9 DQ 0000000000000000H ; `slot_tp_setattro'::`2'::PyId___delattr__
	DQ	FLAT:??_C@_0M@ECOKAOJC@__delattr__?$AA@
	DQ	0000000000000000H
?PyId___getattr__@?1??slot_tp_getattr_hook@@9@9 DQ 0000000000000000H ; `slot_tp_getattr_hook'::`2'::PyId___getattr__
	DQ	FLAT:??_C@_0M@GIDJPAP@__getattr__?$AA@
	DQ	0000000000000000H
?PyId___call__@?1??slot_tp_call@@9@9 DQ 0000000000000000H ; `slot_tp_call'::`2'::PyId___call__
	DQ	FLAT:??_C@_08DGBMPEPK@__call__?$AA@
	DQ	0000000000000000H
?PyId___str__@?1??slot_tp_str@@9@9 DQ 0000000000000000H	; `slot_tp_str'::`2'::PyId___str__
	DQ	FLAT:??_C@_07NJFHCBMD@__str__?$AA@
	DQ	0000000000000000H
?PyId___repr__@?1??slot_tp_repr@@9@9 DQ 0000000000000000H ; `slot_tp_repr'::`2'::PyId___repr__
	DQ	FLAT:??_C@_08HJPCHLLJ@__repr__?$AA@
	DQ	0000000000000000H
?id@?1??slot_nb_inplace_true_divide@@9@9 DQ 0000000000000000H ; `slot_nb_inplace_true_divide'::`2'::id
	DQ	FLAT:??_C@_0N@LEBOILNI@__itruediv__?$AA@
	DQ	0000000000000000H
?id@?1??slot_nb_inplace_floor_divide@@9@9 DQ 0000000000000000H ; `slot_nb_inplace_floor_divide'::`2'::id
	DQ	FLAT:??_C@_0O@FFFGEHEN@__ifloordiv__?$AA@
	DQ	0000000000000000H
?rop_id@?1??slot_nb_true_divide@@9@9 DQ 0000000000000000H ; `slot_nb_true_divide'::`2'::rop_id
	DQ	FLAT:??_C@_0N@DJMJMIFH@__rtruediv__?$AA@
	DQ	0000000000000000H
?op_id@?1??slot_nb_true_divide@@9@9 DQ 0000000000000000H ; `slot_nb_true_divide'::`2'::op_id
	DQ	FLAT:??_C@_0M@COJKGICO@__truediv__?$AA@
	DQ	0000000000000000H
?rop_id@?1??slot_nb_floor_divide@@9@9 DQ 0000000000000000H ; `slot_nb_floor_divide'::`2'::rop_id
	DQ	FLAT:??_C@_0O@CINMAOLP@__rfloordiv__?$AA@
	DQ	0000000000000000H
?op_id@?1??slot_nb_floor_divide@@9@9 DQ 0000000000000000H ; `slot_nb_floor_divide'::`2'::op_id
	DQ	FLAT:??_C@_0N@BBCJEIH@__floordiv__?$AA@
	DQ	0000000000000000H
?id@?1??slot_nb_inplace_or@@9@9 DQ 0000000000000000H	; `slot_nb_inplace_or'::`2'::id
	DQ	FLAT:??_C@_07GMCKKGKN@__ior__?$AA@
	DQ	0000000000000000H
?id@?1??slot_nb_inplace_xor@@9@9 DQ 0000000000000000H	; `slot_nb_inplace_xor'::`2'::id
	DQ	FLAT:??_C@_08EBNDKCJL@__ixor__?$AA@
	DQ	0000000000000000H
?id@?1??slot_nb_inplace_and@@9@9 DQ 0000000000000000H	; `slot_nb_inplace_and'::`2'::id
	DQ	FLAT:??_C@_08CNBINADL@__iand__?$AA@
	DQ	0000000000000000H
?id@?1??slot_nb_inplace_rshift@@9@9 DQ 0000000000000000H ; `slot_nb_inplace_rshift'::`2'::id
	DQ	FLAT:??_C@_0M@MPLFEGLF@__irshift__?$AA@
	DQ	0000000000000000H
?id@?1??slot_nb_inplace_lshift@@9@9 DQ 0000000000000000H ; `slot_nb_inplace_lshift'::`2'::id
	DQ	FLAT:??_C@_0M@KLLHNPFG@__ilshift__?$AA@
	DQ	0000000000000000H
?PyId___ipow__@?1??slot_nb_inplace_power@@9@9 DQ 0000000000000000H ; `slot_nb_inplace_power'::`2'::PyId___ipow__
	DQ	FLAT:??_C@_08JKFONAME@__ipow__?$AA@
	DQ	0000000000000000H
?id@?1??slot_nb_inplace_remainder@@9@9 DQ 0000000000000000H ; `slot_nb_inplace_remainder'::`2'::id
	DQ	FLAT:??_C@_08GHLKDJPA@__imod__?$AA@
	DQ	0000000000000000H
?id@?1??slot_nb_inplace_multiply@@9@9 DQ 0000000000000000H ; `slot_nb_inplace_multiply'::`2'::id
	DQ	FLAT:??_C@_08IIFOJODM@__imul__?$AA@
	DQ	0000000000000000H
?id@?1??slot_nb_inplace_subtract@@9@9 DQ 0000000000000000H ; `slot_nb_inplace_subtract'::`2'::id
	DQ	FLAT:??_C@_08FBFNIKOE@__isub__?$AA@
	DQ	0000000000000000H
?id@?1??slot_nb_inplace_add@@9@9 DQ 0000000000000000H	; `slot_nb_inplace_add'::`2'::id
	DQ	FLAT:??_C@_08GHKIMIJK@__iadd__?$AA@
	DQ	0000000000000000H
?id@?1??slot_nb_float@@9@9 DQ 0000000000000000H		; `slot_nb_float'::`2'::id
	DQ	FLAT:??_C@_09EAHNLHOJ@__float__?$AA@
	DQ	0000000000000000H
?id@?1??slot_nb_int@@9@9 DQ 0000000000000000H		; `slot_nb_int'::`2'::id
	DQ	FLAT:??_C@_07HECBNAMB@__int__?$AA@
	DQ	0000000000000000H
?rop_id@?1??slot_nb_or@@9@9 DQ 0000000000000000H	; `slot_nb_or'::`2'::rop_id
	DQ	FLAT:??_C@_07FDLFEPF@__ror__?$AA@
	DQ	0000000000000000H
?op_id@?1??slot_nb_or@@9@9 DQ 0000000000000000H		; `slot_nb_or'::`2'::op_id
	DQ	FLAT:??_C@_06MKEBKDGA@__or__?$AA@
	DQ	0000000000000000H
?rop_id@?1??slot_nb_xor@@9@9 DQ 0000000000000000H	; `slot_nb_xor'::`2'::rop_id
	DQ	FLAT:??_C@_08CEAKGKKP@__rxor__?$AA@
	DQ	0000000000000000H
?op_id@?1??slot_nb_xor@@9@9 DQ 0000000000000000H	; `slot_nb_xor'::`2'::op_id
	DQ	FLAT:??_C@_07KEKAHHJD@__xor__?$AA@
	DQ	0000000000000000H
?rop_id@?1??slot_nb_and@@9@9 DQ 0000000000000000H	; `slot_nb_and'::`2'::rop_id
	DQ	FLAT:??_C@_08EIMBBIAP@__rand__?$AA@
	DQ	0000000000000000H
?op_id@?1??slot_nb_and@@9@9 DQ 0000000000000000H	; `slot_nb_and'::`2'::op_id
	DQ	FLAT:??_C@_07MIGLAFDD@__and__?$AA@
	DQ	0000000000000000H
?rop_id@?1??slot_nb_rshift@@9@9 DQ 0000000000000000H	; `slot_nb_rshift'::`2'::rop_id
	DQ	FLAT:??_C@_0M@BAPLDMKK@__rrshift__?$AA@
	DQ	0000000000000000H
?op_id@?1??slot_nb_rshift@@9@9 DQ 0000000000000000H	; `slot_nb_rshift'::`2'::op_id
	DQ	FLAT:??_C@_0L@PEOFAGDE@__rshift__?$AA@
	DQ	0000000000000000H
?rop_id@?1??slot_nb_lshift@@9@9 DQ 0000000000000000H	; `slot_nb_lshift'::`2'::rop_id
	DQ	FLAT:??_C@_0M@HEPJKFEJ@__rlshift__?$AA@
	DQ	0000000000000000H
?op_id@?1??slot_nb_lshift@@9@9 DQ 0000000000000000H	; `slot_nb_lshift'::`2'::op_id
	DQ	FLAT:??_C@_0L@JAOHJPNH@__lshift__?$AA@
	DQ	0000000000000000H
?id@?1??slot_nb_invert@@9@9 DQ 0000000000000000H	; `slot_nb_invert'::`2'::id
	DQ	FLAT:??_C@_0L@OIINOIMI@__invert__?$AA@
	DQ	0000000000000000H
?PyId___index__@?1??slot_nb_index@@9@9 DQ 0000000000000000H ; `slot_nb_index'::`2'::PyId___index__
	DQ	FLAT:??_C@_09NLFDFNNH@__index__?$AA@
	DQ	0000000000000000H
?PyId___bool__@?1??slot_nb_bool@@9@9 DQ 0000000000000000H ; `slot_nb_bool'::`2'::PyId___bool__
	DQ	FLAT:??_C@_08ONMBOEOO@__bool__?$AA@
	DQ	0000000000000000H
?PyId___len__@?1??slot_nb_bool@@9@9 DQ 0000000000000000H ; `slot_nb_bool'::`2'::PyId___len__
	DQ	FLAT:??_C@_07GMJIMHJI@__len__?$AA@
	DQ	0000000000000000H
?id@?1??slot_nb_absolute@@9@9 DQ 0000000000000000H	; `slot_nb_absolute'::`2'::id
	DQ	FLAT:??_C@_07MAFFIHBE@__abs__?$AA@
	DQ	0000000000000000H
?id@?1??slot_nb_positive@@9@9 DQ 0000000000000000H	; `slot_nb_positive'::`2'::id
	DQ	FLAT:??_C@_07PAEPJCJL@__pos__?$AA@
	DQ	0000000000000000H
?id@?1??slot_nb_negative@@9@9 DQ 0000000000000000H	; `slot_nb_negative'::`2'::id
	DQ	FLAT:??_C@_07FMFICJBJ@__neg__?$AA@
	DQ	0000000000000000H
?PyId___pow__@?1??slot_nb_power@@9@9 DQ 0000000000000000H ; `slot_nb_power'::`2'::PyId___pow__
	DQ	FLAT:??_C@_07HPCNAFMM@__pow__?$AA@
	DQ	0000000000000000H
?rop_id@?1??slot_nb_power_binary@@9@9 DQ 0000000000000000H ; `slot_nb_power_binary'::`2'::rop_id
	DQ	FLAT:??_C@_08PPIHBIPA@__rpow__?$AA@
	DQ	0000000000000000H
?op_id@?1??slot_nb_power_binary@@9@9 DQ 0000000000000000H ; `slot_nb_power_binary'::`2'::op_id
	DQ	FLAT:??_C@_07HPCNAFMM@__pow__?$AA@
	DQ	0000000000000000H
?rop_id@?1??slot_nb_divmod@@9@9 DQ 0000000000000000H	; `slot_nb_divmod'::`2'::rop_id
	DQ	FLAT:??_C@_0M@NDCDLKNJ@__rdivmod__?$AA@
	DQ	0000000000000000H
?op_id@?1??slot_nb_divmod@@9@9 DQ 0000000000000000H	; `slot_nb_divmod'::`2'::op_id
	DQ	FLAT:??_C@_0L@DHDNIAEH@__divmod__?$AA@
	DQ	0000000000000000H
?rop_id@?1??slot_nb_remainder@@9@9 DQ 0000000000000000H	; `slot_nb_remainder'::`2'::rop_id
	DQ	FLAT:??_C@_08CGDPBME@__rmod__?$AA@
	DQ	0000000000000000H
?op_id@?1??slot_nb_remainder@@9@9 DQ 0000000000000000H	; `slot_nb_remainder'::`2'::op_id
	DQ	FLAT:??_C@_07ICMJOMPI@__mod__?$AA@
	DQ	0000000000000000H
?rop_id@?1??slot_nb_multiply@@9@9 DQ 0000000000000000H	; `slot_nb_multiply'::`2'::rop_id
	DQ	FLAT:??_C@_08ONIHFGAI@__rmul__?$AA@
	DQ	0000000000000000H
?op_id@?1??slot_nb_multiply@@9@9 DQ 0000000000000000H	; `slot_nb_multiply'::`2'::op_id
	DQ	FLAT:??_C@_07GNCNELDE@__mul__?$AA@
	DQ	0000000000000000H
?rop_id@?1??slot_nb_subtract@@9@9 DQ 0000000000000000H	; `slot_nb_subtract'::`2'::rop_id
	DQ	FLAT:??_C@_08DEIEECNA@__rsub__?$AA@
	DQ	0000000000000000H
?op_id@?1??slot_nb_subtract@@9@9 DQ 0000000000000000H	; `slot_nb_subtract'::`2'::op_id
	DQ	FLAT:??_C@_07LECOFPOM@__sub__?$AA@
	DQ	0000000000000000H
?rop_id@?1??slot_nb_add@@9@9 DQ 0000000000000000H	; `slot_nb_add'::`2'::rop_id
	DQ	FLAT:??_C@_08CHBAAKO@__radd__?$AA@
	DQ	0000000000000000H
?op_id@?1??slot_nb_add@@9@9 DQ 0000000000000000H	; `slot_nb_add'::`2'::op_id
	DQ	FLAT:??_C@_07ICNLBNJC@__add__?$AA@
	DQ	0000000000000000H
?PyId___setitem__@?1??slot_mp_ass_subscript@@9@9 DQ 0000000000000000H ; `slot_mp_ass_subscript'::`2'::PyId___setitem__
	DQ	FLAT:??_C@_0M@EONDAJAB@__setitem__?$AA@
	DQ	0000000000000000H
?PyId___delitem__@?1??slot_mp_ass_subscript@@9@9 DQ 0000000000000000H ; `slot_mp_ass_subscript'::`2'::PyId___delitem__
	DQ	FLAT:??_C@_0M@CEPPLJAO@__delitem__?$AA@
	DQ	0000000000000000H
?id@?1??slot_mp_subscript@@9@9 DQ 0000000000000000H	; `slot_mp_subscript'::`2'::id
	DQ	FLAT:??_C@_0M@GAJGCIJD@__getitem__?$AA@
	DQ	0000000000000000H
?PyId___contains__@?1??slot_sq_contains@@9@9 DQ 0000000000000000H ; `slot_sq_contains'::`2'::PyId___contains__
	DQ	FLAT:??_C@_0N@MCIOADFH@__contains__?$AA@
	DQ	0000000000000000H
?PyId___setitem__@?1??slot_sq_ass_item@@9@9 DQ 0000000000000000H ; `slot_sq_ass_item'::`2'::PyId___setitem__
	DQ	FLAT:??_C@_0M@EONDAJAB@__setitem__?$AA@
	DQ	0000000000000000H
?PyId___delitem__@?1??slot_sq_ass_item@@9@9 DQ 0000000000000000H ; `slot_sq_ass_item'::`2'::PyId___delitem__
	DQ	FLAT:??_C@_0M@CEPPLJAO@__delitem__?$AA@
	DQ	0000000000000000H
?PyId___len__@?1??slot_sq_length@@9@9 DQ 0000000000000000H ; `slot_sq_length'::`2'::PyId___len__
	DQ	FLAT:??_C@_07GMJIMHJI@__len__?$AA@
	DQ	0000000000000000H
?PyId___eq__@?1??overrides_hash@@9@9 DQ 0000000000000000H ; `overrides_hash'::`2'::PyId___eq__
	DQ	FLAT:??_C@_06JCEEBECP@__eq__?$AA@
	DQ	0000000000000000H
?PyId___reduce__@?1??object_reduce_ex@@9@9 DQ 0000000000000000H ; `object_reduce_ex'::`2'::PyId___reduce__
	DQ	FLAT:??_C@_0L@NNMACJIG@__reduce__?$AA@
	DQ	0000000000000000H
?PyId_items@?P@??reduce_2@@9@9 DQ 0000000000000000H	; `reduce_2'::`15'::PyId_items
	DQ	FLAT:??_C@_05CFHBDDLG@items?$AA@
	DQ	0000000000000000H
?PyId___newobj__@?1??reduce_2@@9@9 DQ 0000000000000000H	; `reduce_2'::`2'::PyId___newobj__
	DQ	FLAT:??_C@_0L@GEMAGKL@__newobj__?$AA@
	DQ	0000000000000000H
?PyId___getstate__@?1??reduce_2@@9@9 DQ 0000000000000000H ; `reduce_2'::`2'::PyId___getstate__
	DQ	FLAT:??_C@_0N@NAMJJHIO@__getstate__?$AA@
	DQ	0000000000000000H
?PyId___getnewargs__@?1??reduce_2@@9@9 DQ 0000000000000000H ; `reduce_2'::`2'::PyId___getnewargs__
	DQ	FLAT:??_C@_0P@BCBHENLA@__getnewargs__?$AA@
	DQ	0000000000000000H
?PyId__slotnames@?1??slotnames@@9@9 DQ 0000000000000000H ; `slotnames'::`2'::PyId__slotnames
	DQ	FLAT:??_C@_0L@NMBFFBAC@_slotnames?$AA@
	DQ	0000000000000000H
?PyId___slotnames__@?1??slotnames@@9@9 DQ 0000000000000000H ; `slotnames'::`2'::PyId___slotnames__
	DQ	FLAT:??_C@_0O@NLMJLHMN@__slotnames__?$AA@
	DQ	0000000000000000H
?PyId_copyreg@?1??import_copyreg@@9@9 DQ 0000000000000000H ; `import_copyreg'::`2'::PyId_copyreg
	DQ	FLAT:??_C@_07ODDBKIAB@copyreg?$AA@
	DQ	0000000000000000H
?PyId_sorted@?3??object_new@@9@9 DQ 0000000000000000H	; `object_new'::`4'::PyId_sorted
	DQ	FLAT:??_C@_06GOHDHELE@sorted?$AA@
	DQ	0000000000000000H
?comma_id@?3??object_new@@9@9 DQ 0000000000000000H	; `object_new'::`4'::comma_id
	DQ	FLAT:??_C@_02KEGNLNML@?0?5?$AA@
	DQ	0000000000000000H
?PyId___bases__@?1??merge_class_dict@@9@9 DQ 0000000000000000H ; `merge_class_dict'::`2'::PyId___bases__
	DQ	FLAT:??_C@_09LJKDIEEK@__bases__?$AA@
	DQ	0000000000000000H
?PyId___slots__@?1??type_new@@9@9 DQ 0000000000000000H	; `type_new'::`2'::PyId___slots__
	DQ	FLAT:??_C@_09EBPBKION@__slots__?$AA@
	DQ	0000000000000000H
?PyId___qualname__@?1??type_new@@9@9 DQ 0000000000000000H ; `type_new'::`2'::PyId___qualname__
	DQ	FLAT:??_C@_0N@FMLGAKCE@__qualname__?$AA@
	DQ	0000000000000000H
?PyId_mro@?3??mro_internal@@9@9 DQ 0000000000000000H	; `mro_internal'::`4'::PyId_mro
	DQ	FLAT:??_C@_03KCOHMEGL@mro?$AA@
	DQ	0000000000000000H
PyId___new__ DQ	0000000000000000H
	DQ	FLAT:??_C@_07MEBHOIG@__new__?$AA@
	DQ	0000000000000000H
PyId___name__ DQ 0000000000000000H
	DQ	FLAT:??_C@_08BHKDPDAA@__name__?$AA@
	DQ	0000000000000000H
PyId___module__ DQ 0000000000000000H
	DQ	FLAT:??_C@_0L@LNCJCPDP@__module__?$AA@
	DQ	0000000000000000H
PyId___hash__ DQ 0000000000000000H
	DQ	FLAT:??_C@_08FJMJDHAE@__hash__?$AA@
	DQ	0000000000000000H
PyId___getattribute__ DQ 0000000000000000H
	DQ	FLAT:??_C@_0BB@FJMKAPEO@__getattribute__?$AA@
	DQ	0000000000000000H
PyId___getitem__ DQ 0000000000000000H
	DQ	FLAT:??_C@_0M@GAJGCIJD@__getitem__?$AA@
	DQ	0000000000000000H
PyId___doc__ DQ	0000000000000000H
	DQ	FLAT:??_C@_07DIBBIFIJ@__doc__?$AA@
	DQ	0000000000000000H
PyId___dict__ DQ 0000000000000000H
	DQ	FLAT:??_C@_08IBFKALI@__dict__?$AA@
	DQ	0000000000000000H
PyId___class__ DQ 0000000000000000H
	DQ	FLAT:??_C@_09LFGACEKG@__class__?$AA@
	DQ	0000000000000000H
_TLS	ENDS
;	COMDAT ??_C@_09LFGACEKG@__class__?$AA@
CONST	SEGMENT
??_C@_09LFGACEKG@__class__?$AA@ DB '__class__', 00H	; `string'
CONST	ENDS
PUBLIC	PyType_Modified
PUBLIC	_Py_DecRef
PUBLIC	??_C@_0BC@HNKCEFEF@PyType_ClearCache?$AA@	; `string'
PUBLIC	??_C@_0BI@PKBBAMFA@?4?4?2Objects?2typeobject?4c?$AA@ ; `string'
PUBLIC	PyType_ClearCache
EXTRN	_PyParallel_Guard:PROC
EXTRN	_PyParallel_ContextGuardFailure:PROC
EXTRN	_Py_PXCTX:PROC
_BSS	SEGMENT
method_cache DB	03000H DUP (?)
_BSS	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\objects\typeobject.c
pdata	SEGMENT
$pdata$PyType_ClearCache DD imagerel $LN11
	DD	imagerel $LN11+329
	DD	imagerel $unwind$PyType_ClearCache
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyType_ClearCache DD 010401H
	DD	0a204H
xdata	ENDS
;	COMDAT ??_C@_0BC@HNKCEFEF@PyType_ClearCache?$AA@
CONST	SEGMENT
??_C@_0BC@HNKCEFEF@PyType_ClearCache?$AA@ DB 'PyType_ClearCache', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@PKBBAMFA@?4?4?2Objects?2typeobject?4c?$AA@
CONST	SEGMENT
??_C@_0BI@PKBBAMFA@?4?4?2Objects?2typeobject?4c?$AA@ DB '..\Objects\typeo'
	DB	'bject.c', 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyType_ClearCache
_TEXT	SEGMENT
i$ = 48
cur_version_tag$ = 56
_py_tmp$20432 = 64
PyType_ClearCache PROC					; COMDAT

; 53   : {

$LN11:
  00000	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 54   :     Py_ssize_t i;
; 55   :     unsigned int cur_version_tag = next_version_tag - 1;

  00004	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR next_version_tag
  0000a	ff c8		 dec	 eax
  0000c	89 44 24 38	 mov	 DWORD PTR cur_version_tag$[rsp], eax

; 56   :     Py_GUARD

  00010	e8 00 00 00 00	 call	 _Py_PXCTX
  00015	85 c0		 test	 eax, eax
  00017	74 1c		 je	 SHORT $LN8@PyType_Cle
  00019	45 33 c9	 xor	 r9d, r9d
  0001c	41 b8 38 00 00
	00		 mov	 r8d, 56			; 00000038H
  00022	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@PKBBAMFA@?4?4?2Objects?2typeobject?4c?$AA@
  00029	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@HNKCEFEF@PyType_ClearCache?$AA@
  00030	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN8@PyType_Cle:

; 57   : 
; 58   :     for (i = 0; i < (1 << MCACHE_SIZE_EXP); i++) {

  00035	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  0003e	eb 0d		 jmp	 SHORT $LN7@PyType_Cle
$LN6@PyType_Cle:
  00040	48 8b 44 24 30	 mov	 rax, QWORD PTR i$[rsp]
  00045	48 ff c0	 inc	 rax
  00048	48 89 44 24 30	 mov	 QWORD PTR i$[rsp], rax
$LN7@PyType_Cle:
  0004d	48 81 7c 24 30
	00 02 00 00	 cmp	 QWORD PTR i$[rsp], 512	; 00000200H
  00056	0f 8d ce 00 00
	00		 jge	 $LN5@PyType_Cle

; 59   :         method_cache[i].version = 0;

  0005c	48 8b 44 24 30	 mov	 rax, QWORD PTR i$[rsp]
  00061	48 6b c0 18	 imul	 rax, 24
  00065	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:method_cache
  0006c	c7 04 01 00 00
	00 00		 mov	 DWORD PTR [rcx+rax], 0
$LN4@PyType_Cle:

; 60   :         Py_CLEAR(method_cache[i].name);

  00073	48 8b 44 24 30	 mov	 rax, QWORD PTR i$[rsp]
  00078	48 6b c0 18	 imul	 rax, 24
  0007c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:method_cache
  00083	48 83 7c 01 08
	00		 cmp	 QWORD PTR [rcx+rax+8], 0
  00089	74 77		 je	 SHORT $LN1@PyType_Cle
  0008b	48 8b 44 24 30	 mov	 rax, QWORD PTR i$[rsp]
  00090	48 6b c0 18	 imul	 rax, 24
  00094	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:method_cache
  0009b	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000a3	4c 8b 4c 01 08	 mov	 r9, QWORD PTR [rcx+rax+8]
  000a8	41 b8 3c 00 00
	00		 mov	 r8d, 60			; 0000003cH
  000ae	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@PKBBAMFA@?4?4?2Objects?2typeobject?4c?$AA@
  000b5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@HNKCEFEF@PyType_ClearCache?$AA@
  000bc	e8 00 00 00 00	 call	 _PyParallel_Guard
  000c1	85 c0		 test	 eax, eax
  000c3	75 3d		 jne	 SHORT $LN1@PyType_Cle
  000c5	48 8b 44 24 30	 mov	 rax, QWORD PTR i$[rsp]
  000ca	48 6b c0 18	 imul	 rax, 24
  000ce	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:method_cache
  000d5	48 8b 44 01 08	 mov	 rax, QWORD PTR [rcx+rax+8]
  000da	48 89 44 24 40	 mov	 QWORD PTR _py_tmp$20432[rsp], rax
  000df	48 8b 44 24 30	 mov	 rax, QWORD PTR i$[rsp]
  000e4	48 6b c0 18	 imul	 rax, 24
  000e8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:method_cache
  000ef	48 c7 44 01 08
	00 00 00 00	 mov	 QWORD PTR [rcx+rax+8], 0
  000f8	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _py_tmp$20432[rsp]
  000fd	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@PyType_Cle:
  00102	33 c0		 xor	 eax, eax
  00104	85 c0		 test	 eax, eax
  00106	0f 85 67 ff ff
	ff		 jne	 $LN4@PyType_Cle

; 61   :         method_cache[i].value = NULL;

  0010c	48 8b 44 24 30	 mov	 rax, QWORD PTR i$[rsp]
  00111	48 6b c0 18	 imul	 rax, 24
  00115	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:method_cache
  0011c	48 c7 44 01 10
	00 00 00 00	 mov	 QWORD PTR [rcx+rax+16], 0

; 62   :     }

  00125	e9 16 ff ff ff	 jmp	 $LN6@PyType_Cle
$LN5@PyType_Cle:

; 63   :     next_version_tag = 0;

  0012a	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR next_version_tag, 0

; 64   :     /* mark all version tags as invalid */
; 65   :     PyType_Modified(&PyBaseObject_Type);

  00134	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyBaseObject_Type
  0013b	e8 00 00 00 00	 call	 PyType_Modified

; 66   :     return cur_version_tag;

  00140	8b 44 24 38	 mov	 eax, DWORD PTR cur_version_tag$[rsp]

; 67   : }

  00144	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00148	c3		 ret	 0
PyType_ClearCache ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
EXTRN	_Py_Dealloc:PROC
EXTRN	_Py_NegativeRefcount:PROC
EXTRN	_Py_RefTotal:QWORD
EXTRN	Px_DecRef:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN13
	DD	imagerel $LN13+257
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
tv81 = 48
op$ = 80
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN13:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	0f 85 e6 00 00
	00		 jne	 $LN8@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00016	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0001b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0001f	48 83 e0 20	 and	 rax, 32			; 00000020H
  00023	48 85 c0	 test	 rax, rax
  00026	75 14		 jne	 SHORT $LN6@Py_DecRef
  00028	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0002d	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00031	48 25 80 00 00
	00		 and	 rax, 128		; 00000080H
  00037	48 85 c0	 test	 rax, rax
  0003a	74 0f		 je	 SHORT $LN7@Py_DecRef
$LN6@Py_DecRef:

; 926  :             Px_DECREF(op);

  0003c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  00041	e8 00 00 00 00	 call	 Px_DecRef
  00046	e9 b1 00 00 00	 jmp	 $LN5@Py_DecRef
$LN7@Py_DecRef:

; 927  :         else if (!Px_ISPX(op)) {

  0004b	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00050	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00054	48 83 e0 02	 and	 rax, 2
  00058	48 85 c0	 test	 rax, rax
  0005b	0f 85 9b 00 00
	00		 jne	 $LN4@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;

  00061	e8 00 00 00 00	 call	 _Py_PXCTX
  00066	85 c0		 test	 eax, eax
  00068	74 02		 je	 SHORT $LN11@Py_DecRef
  0006a	eb 11		 jmp	 SHORT $LN12@Py_DecRef
$LN11@Py_DecRef:
  0006c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00073	48 ff c8	 dec	 rax
  00076	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN12@Py_DecRef:

; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  0007d	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00082	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00086	48 ff c8	 dec	 rax
  00089	48 89 44 24 30	 mov	 QWORD PTR tv81[rsp], rax
  0008e	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00093	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv81[rsp]
  00098	48 89 48 50	 mov	 QWORD PTR [rax+80], rcx
  0009c	48 83 7c 24 30
	00		 cmp	 QWORD PTR tv81[rsp], 0
  000a2	74 4e		 je	 SHORT $LN3@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);

  000a4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000ac	4c 8b 4c 24 50	 mov	 r9, QWORD PTR op$[rsp]
  000b1	41 b8 a2 03 00
	00		 mov	 r8d, 930		; 000003a2H
  000b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000c5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ca	85 c0		 test	 eax, eax
  000cc	75 22		 jne	 SHORT $LN2@Py_DecRef
  000ce	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  000d3	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000d8	7d 16		 jge	 SHORT $LN2@Py_DecRef
  000da	4c 8b 44 24 50	 mov	 r8, QWORD PTR op$[rsp]
  000df	ba a2 03 00 00	 mov	 edx, 930		; 000003a2H
  000e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000eb	e8 00 00 00 00	 call	 _Py_NegativeRefcount
$LN2@Py_DecRef:

; 931  :             } else

  000f0	eb 0a		 jmp	 SHORT $LN1@Py_DecRef
$LN3@Py_DecRef:

; 932  :                 _Py_Dealloc((PyObject *)(op));

  000f2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  000f7	e8 00 00 00 00	 call	 _Py_Dealloc
$LN1@Py_DecRef:
$LN4@Py_DecRef:
$LN5@Py_DecRef:
$LN8@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  000fc	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00100	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
PUBLIC	_PyType_Fini
;	COMDAT pdata
; File c:\src\pyparallel\objects\typeobject.c
pdata	SEGMENT
$pdata$_PyType_Fini DD imagerel $LN3
	DD	imagerel $LN3+14
	DD	imagerel $unwind$_PyType_Fini
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyType_Fini DD 010401H
	DD	04204H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _PyType_Fini
_TEXT	SEGMENT
_PyType_Fini PROC					; COMDAT

; 71   : {

$LN3:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 72   :     PyType_ClearCache();

  00004	e8 00 00 00 00	 call	 PyType_ClearCache

; 73   : }

  00009	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0000d	c3		 ret	 0
_PyType_Fini ENDP
_TEXT	ENDS
EXTRN	_Py_NoneStruct:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyType_Modified DD imagerel $LN11
	DD	imagerel $LN11+247
	DD	imagerel $unwind$PyType_Modified
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyType_Modified DD 010901H
	DD	0a209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyType_Modified
_TEXT	SEGMENT
n$ = 32
i$ = 40
raw$ = 48
ref$ = 56
tv79 = 64
type$ = 96
PyType_Modified PROC					; COMDAT

; 77   : {

$LN11:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 78   :     /* Invalidate any cached data for the specified type and all
; 79   :        subclasses.  This function is called after the base
; 80   :        classes, mro, or attributes of the type are altered.
; 81   : 
; 82   :        Invariants:
; 83   : 
; 84   :        - Py_TPFLAGS_VALID_VERSION_TAG is never set if
; 85   :          Py_TPFLAGS_HAVE_VERSION_TAG is not set (e.g. on type
; 86   :          objects coming from non-recompiled extension modules)
; 87   : 
; 88   :        - before Py_TPFLAGS_VALID_VERSION_TAG can be set on a type,
; 89   :          it must first be set on all super types.
; 90   : 
; 91   :        This function clears the Py_TPFLAGS_VALID_VERSION_TAG of a
; 92   :        type (so it must first clear it on all subclasses).  The
; 93   :        tp_version_tag value is meaningless unless this flag is set.
; 94   :        We don't assign new version tags eagerly, but only as
; 95   :        needed.
; 96   :      */
; 97   :     PyObject *raw, *ref;
; 98   :     Py_ssize_t i, n;
; 99   : 
; 100  :     if (!PyType_HasFeature(type, Py_TPFLAGS_VALID_VERSION_TAG))

  00009	48 8b 44 24 60	 mov	 rax, QWORD PTR type$[rsp]
  0000e	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00014	25 00 00 08 00	 and	 eax, 524288		; 00080000H
  00019	85 c0		 test	 eax, eax
  0001b	75 05		 jne	 SHORT $LN6@PyType_Mod

; 101  :         return;

  0001d	e9 d0 00 00 00	 jmp	 $LN7@PyType_Mod
$LN6@PyType_Mod:

; 102  : 
; 103  :     raw = type->tp_subclasses;

  00022	48 8b 44 24 60	 mov	 rax, QWORD PTR type$[rsp]
  00027	48 8b 80 c0 01
	00 00		 mov	 rax, QWORD PTR [rax+448]
  0002e	48 89 44 24 30	 mov	 QWORD PTR raw$[rsp], rax

; 104  :     if (raw != NULL) {

  00033	48 83 7c 24 30
	00		 cmp	 QWORD PTR raw$[rsp], 0
  00039	0f 84 99 00 00
	00		 je	 $LN5@PyType_Mod

; 105  :         n = PyList_GET_SIZE(raw);

  0003f	48 8b 44 24 30	 mov	 rax, QWORD PTR raw$[rsp]
  00044	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00048	48 89 44 24 20	 mov	 QWORD PTR n$[rsp], rax

; 106  :         for (i = 0; i < n; i++) {

  0004d	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  00056	eb 0d		 jmp	 SHORT $LN4@PyType_Mod
$LN3@PyType_Mod:
  00058	48 8b 44 24 28	 mov	 rax, QWORD PTR i$[rsp]
  0005d	48 ff c0	 inc	 rax
  00060	48 89 44 24 28	 mov	 QWORD PTR i$[rsp], rax
$LN4@PyType_Mod:
  00065	48 8b 44 24 20	 mov	 rax, QWORD PTR n$[rsp]
  0006a	48 39 44 24 28	 cmp	 QWORD PTR i$[rsp], rax
  0006f	7d 67		 jge	 SHORT $LN2@PyType_Mod

; 107  :             ref = PyList_GET_ITEM(raw, i);

  00071	48 8b 44 24 30	 mov	 rax, QWORD PTR raw$[rsp]
  00076	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  0007a	48 8b 4c 24 28	 mov	 rcx, QWORD PTR i$[rsp]
  0007f	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  00083	48 89 44 24 38	 mov	 QWORD PTR ref$[rsp], rax

; 108  :             ref = PyWeakref_GET_OBJECT(ref);

  00088	48 8b 44 24 38	 mov	 rax, QWORD PTR ref$[rsp]
  0008d	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00091	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00096	7e 10		 jle	 SHORT $LN9@PyType_Mod
  00098	48 8b 44 24 38	 mov	 rax, QWORD PTR ref$[rsp]
  0009d	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000a1	48 89 44 24 40	 mov	 QWORD PTR tv79[rsp], rax
  000a6	eb 0c		 jmp	 SHORT $LN10@PyType_Mod
$LN9@PyType_Mod:
  000a8	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000af	48 89 44 24 40	 mov	 QWORD PTR tv79[rsp], rax
$LN10@PyType_Mod:
  000b4	48 8b 44 24 40	 mov	 rax, QWORD PTR tv79[rsp]
  000b9	48 89 44 24 38	 mov	 QWORD PTR ref$[rsp], rax

; 109  :             if (ref != Py_None) {

  000be	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000c5	48 39 44 24 38	 cmp	 QWORD PTR ref$[rsp], rax
  000ca	74 0a		 je	 SHORT $LN1@PyType_Mod

; 110  :                 PyType_Modified((PyTypeObject *)ref);

  000cc	48 8b 4c 24 38	 mov	 rcx, QWORD PTR ref$[rsp]
  000d1	e8 00 00 00 00	 call	 PyType_Modified
$LN1@PyType_Mod:

; 111  :             }
; 112  :         }

  000d6	eb 80		 jmp	 SHORT $LN3@PyType_Mod
$LN2@PyType_Mod:
$LN5@PyType_Mod:

; 113  :     }
; 114  :     type->tp_flags &= ~Py_TPFLAGS_VALID_VERSION_TAG;

  000d8	48 8b 44 24 60	 mov	 rax, QWORD PTR type$[rsp]
  000dd	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000e3	0f ba f0 13	 btr	 eax, 19
  000e7	48 8b 4c 24 60	 mov	 rcx, QWORD PTR type$[rsp]
  000ec	89 81 00 01 00
	00		 mov	 DWORD PTR [rcx+256], eax
$LN7@PyType_Mod:

; 115  : }

  000f2	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000f6	c3		 ret	 0
PyType_Modified ENDP
_TEXT	ENDS
PUBLIC	_Py_IncRef
EXTRN	PyUnicode_FromString:PROC
EXTRN	__imp_strrchr:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$type_name DD imagerel type_name
	DD	imagerel type_name+154
	DD	imagerel $unwind$type_name
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$type_name DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT type_name
_TEXT	SEGMENT
s$ = 32
et$20566 = 40
type$ = 64
context$ = 72
type_name PROC						; COMDAT

; 238  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 239  :     const char *s;
; 240  : 
; 241  :     if (type->tp_flags & Py_TPFLAGS_HEAPTYPE) {

  0000e	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  00013	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00019	25 00 02 00 00	 and	 eax, 512		; 00000200H
  0001e	85 c0		 test	 eax, eax
  00020	74 2b		 je	 SHORT $LN4@type_name

; 242  :         PyHeapTypeObject* et = (PyHeapTypeObject*)type;

  00022	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  00027	48 89 44 24 28	 mov	 QWORD PTR et$20566[rsp], rax

; 243  : 
; 244  :         Py_INCREF(et->ht_name);

  0002c	48 8b 44 24 28	 mov	 rax, QWORD PTR et$20566[rsp]
  00031	48 8b 88 68 03
	00 00		 mov	 rcx, QWORD PTR [rax+872]
  00038	e8 00 00 00 00	 call	 _Py_IncRef

; 245  :         return et->ht_name;

  0003d	48 8b 44 24 28	 mov	 rax, QWORD PTR et$20566[rsp]
  00042	48 8b 80 68 03
	00 00		 mov	 rax, QWORD PTR [rax+872]
  00049	eb 4a		 jmp	 SHORT $LN5@type_name

; 246  :     }
; 247  :     else {

  0004b	eb 48		 jmp	 SHORT $LN3@type_name
$LN4@type_name:

; 248  :         s = strrchr(type->tp_name, '.');

  0004d	ba 2e 00 00 00	 mov	 edx, 46			; 0000002eH
  00052	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  00057	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  0005b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strrchr
  00061	48 89 44 24 20	 mov	 QWORD PTR s$[rsp], rax

; 249  :         if (s == NULL)

  00066	48 83 7c 24 20
	00		 cmp	 QWORD PTR s$[rsp], 0
  0006c	75 10		 jne	 SHORT $LN2@type_name

; 250  :             s = type->tp_name;

  0006e	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  00073	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00077	48 89 44 24 20	 mov	 QWORD PTR s$[rsp], rax

; 251  :         else

  0007c	eb 0d		 jmp	 SHORT $LN1@type_name
$LN2@type_name:

; 252  :             s++;

  0007e	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  00083	48 ff c0	 inc	 rax
  00086	48 89 44 24 20	 mov	 QWORD PTR s$[rsp], rax
$LN1@type_name:

; 253  :         return PyUnicode_FromString(s);

  0008b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  00090	e8 00 00 00 00	 call	 PyUnicode_FromString
$LN3@type_name:
$LN5@type_name:

; 254  :     }
; 255  : }

  00095	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00099	c3		 ret	 0
type_name ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN7
	DD	imagerel $LN7+132
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 6d		 jne	 SHORT $LN2@Py_IncRef
  00012	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0001a	4c 8b 4c 24 40	 mov	 r9, QWORD PTR op$[rsp]
  0001f	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_Guard
  00038	85 c0		 test	 eax, eax
  0003a	75 12		 jne	 SHORT $LN1@Py_IncRef
  0003c	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  00041	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00045	48 83 e0 20	 and	 rax, 32			; 00000020H
  00049	48 85 c0	 test	 rax, rax
  0004c	74 31		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;

  0004e	e8 00 00 00 00	 call	 _Py_PXCTX
  00053	85 c0		 test	 eax, eax
  00055	74 02		 je	 SHORT $LN5@Py_IncRef
  00057	eb 11		 jmp	 SHORT $LN6@Py_IncRef
$LN5@Py_IncRef:
  00059	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00060	48 ff c0	 inc	 rax
  00063	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN6@Py_IncRef:

; 907  :         (((PyObject*)(op))->ob_refcnt++);

  0006a	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  0006f	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00073	48 ff c0	 inc	 rax
  00076	48 8b 4c 24 40	 mov	 rcx, QWORD PTR op$[rsp]
  0007b	48 89 41 50	 mov	 QWORD PTR [rcx+80], rax
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  0007f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00083	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\objects\typeobject.c
pdata	SEGMENT
$pdata$type_qualname DD imagerel type_qualname
	DD	imagerel type_qualname+97
	DD	imagerel $unwind$type_qualname
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$type_qualname DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT type_qualname
_TEXT	SEGMENT
et$20580 = 32
type$ = 64
context$ = 72
type_qualname PROC					; COMDAT

; 259  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 260  :     if (type->tp_flags & Py_TPFLAGS_HEAPTYPE) {

  0000e	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  00013	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00019	25 00 02 00 00	 and	 eax, 512		; 00000200H
  0001e	85 c0		 test	 eax, eax
  00020	74 2b		 je	 SHORT $LN2@type_qualn

; 261  :         PyHeapTypeObject* et = (PyHeapTypeObject*)type;

  00022	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  00027	48 89 44 24 20	 mov	 QWORD PTR et$20580[rsp], rax

; 262  :         Py_INCREF(et->ht_qualname);

  0002c	48 8b 44 24 20	 mov	 rax, QWORD PTR et$20580[rsp]
  00031	48 8b 88 78 03
	00 00		 mov	 rcx, QWORD PTR [rax+888]
  00038	e8 00 00 00 00	 call	 _Py_IncRef

; 263  :         return et->ht_qualname;

  0003d	48 8b 44 24 20	 mov	 rax, QWORD PTR et$20580[rsp]
  00042	48 8b 80 78 03
	00 00		 mov	 rax, QWORD PTR [rax+888]
  00049	eb 11		 jmp	 SHORT $LN3@type_qualn

; 264  :     }
; 265  :     else {

  0004b	eb 0f		 jmp	 SHORT $LN1@type_qualn
$LN2@type_qualn:

; 266  :         return type_name(type, context);

  0004d	48 8b 54 24 48	 mov	 rdx, QWORD PTR context$[rsp]
  00052	48 8b 4c 24 40	 mov	 rcx, QWORD PTR type$[rsp]
  00057	e8 00 00 00 00	 call	 type_name
$LN1@type_qualn:
$LN3@type_qualn:

; 267  :     }
; 268  : }

  0005c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00060	c3		 ret	 0
type_qualname ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CF@CHHLCICM@__name__?5must?5not?5contain?5null?5b@ ; `string'
PUBLIC	??_C@_01LOCGONAA@?$AA?$AA@			; `string'
PUBLIC	??_C@_0DA@PFEBGGEN@can?5only?5assign?5string?5to?5?$CFs?4__n@ ; `string'
EXTRN	PyUnicode_AsUTF8:PROC
EXTRN	PyExc_ValueError:QWORD
EXTRN	PyUnicode_Contains:PROC
EXTRN	PyUnicode_FromStringAndSize:PROC
EXTRN	PyErr_Format:PROC
EXTRN	PyExc_TypeError:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$type_set_name DD imagerel type_set_name
	DD	imagerel type_set_name+350
	DD	imagerel $unwind$type_set_name
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$type_set_name DD 011301H
	DD	08213H
xdata	ENDS
;	COMDAT ??_C@_0CF@CHHLCICM@__name__?5must?5not?5contain?5null?5b@
CONST	SEGMENT
??_C@_0CF@CHHLCICM@__name__?5must?5not?5contain?5null?5b@ DB '__name__ mu'
	DB	'st not contain null bytes', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01LOCGONAA@?$AA?$AA@
CONST	SEGMENT
??_C@_01LOCGONAA@?$AA?$AA@ DB 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@PFEBGGEN@can?5only?5assign?5string?5to?5?$CFs?4__n@
CONST	SEGMENT
??_C@_0DA@PFEBGGEN@can?5only?5assign?5string?5to?5?$CFs?4__n@ DB 'can onl'
	DB	'y assign string to %s.__name__, not ''%s''', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT type_set_name
_TEXT	SEGMENT
et$ = 32
tmp$ = 40
tp_name$ = 48
type$ = 80
value$ = 88
context$ = 96
type_set_name PROC					; COMDAT

; 272  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 273  :     PyHeapTypeObject* et;
; 274  :     char *tp_name;
; 275  :     PyObject *tmp;
; 276  : 
; 277  :     if (!check_set_special_type_attr(type, value, "__name__"))

  00013	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_08BHKDPDAA@__name__?$AA@
  0001a	48 8b 54 24 58	 mov	 rdx, QWORD PTR value$[rsp]
  0001f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR type$[rsp]
  00024	e8 00 00 00 00	 call	 check_set_special_type_attr
  00029	85 c0		 test	 eax, eax
  0002b	75 0a		 jne	 SHORT $LN5@type_set_n

; 278  :         return -1;

  0002d	b8 ff ff ff ff	 mov	 eax, -1
  00032	e9 22 01 00 00	 jmp	 $LN6@type_set_n
$LN5@type_set_n:

; 279  :     if (!PyUnicode_Check(value)) {

  00037	48 8b 44 24 58	 mov	 rax, QWORD PTR value$[rsp]
  0003c	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00040	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00046	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0004b	85 c0		 test	 eax, eax
  0004d	75 33		 jne	 SHORT $LN4@type_set_n

; 280  :         PyErr_Format(PyExc_TypeError,
; 281  :                      "can only assign string to %s.__name__, not '%s'",
; 282  :                      type->tp_name, Py_TYPE(value)->tp_name);

  0004f	48 8b 44 24 58	 mov	 rax, QWORD PTR value$[rsp]
  00054	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00058	4c 8b 48 70	 mov	 r9, QWORD PTR [rax+112]
  0005c	48 8b 44 24 50	 mov	 rax, QWORD PTR type$[rsp]
  00061	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  00065	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DA@PFEBGGEN@can?5only?5assign?5string?5to?5?$CFs?4__n@
  0006c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00073	e8 00 00 00 00	 call	 PyErr_Format

; 283  :         return -1;

  00078	b8 ff ff ff ff	 mov	 eax, -1
  0007d	e9 d7 00 00 00	 jmp	 $LN6@type_set_n
$LN4@type_set_n:

; 284  :     }
; 285  : 
; 286  :     /* Check absence of null characters */
; 287  :     tmp = PyUnicode_FromStringAndSize("\0", 1);

  00082	ba 01 00 00 00	 mov	 edx, 1
  00087	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01LOCGONAA@?$AA?$AA@
  0008e	e8 00 00 00 00	 call	 PyUnicode_FromStringAndSize
  00093	48 89 44 24 28	 mov	 QWORD PTR tmp$[rsp], rax

; 288  :     if (tmp == NULL)

  00098	48 83 7c 24 28
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  0009e	75 0a		 jne	 SHORT $LN3@type_set_n

; 289  :         return -1;

  000a0	b8 ff ff ff ff	 mov	 eax, -1
  000a5	e9 af 00 00 00	 jmp	 $LN6@type_set_n
$LN3@type_set_n:

; 290  :     if (PyUnicode_Contains(value, tmp) != 0) {

  000aa	48 8b 54 24 28	 mov	 rdx, QWORD PTR tmp$[rsp]
  000af	48 8b 4c 24 58	 mov	 rcx, QWORD PTR value$[rsp]
  000b4	e8 00 00 00 00	 call	 PyUnicode_Contains
  000b9	85 c0		 test	 eax, eax
  000bb	74 24		 je	 SHORT $LN2@type_set_n

; 291  :         Py_DECREF(tmp);

  000bd	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tmp$[rsp]
  000c2	e8 00 00 00 00	 call	 _Py_DecRef

; 292  :         PyErr_Format(PyExc_ValueError,
; 293  :                      "__name__ must not contain null bytes");

  000c7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CF@CHHLCICM@__name__?5must?5not?5contain?5null?5b@
  000ce	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  000d5	e8 00 00 00 00	 call	 PyErr_Format

; 294  :         return -1;

  000da	b8 ff ff ff ff	 mov	 eax, -1
  000df	eb 78		 jmp	 SHORT $LN6@type_set_n
$LN2@type_set_n:

; 295  :     }
; 296  :     Py_DECREF(tmp);

  000e1	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tmp$[rsp]
  000e6	e8 00 00 00 00	 call	 _Py_DecRef

; 297  : 
; 298  :     tp_name = _PyUnicode_AsString(value);

  000eb	48 8b 4c 24 58	 mov	 rcx, QWORD PTR value$[rsp]
  000f0	e8 00 00 00 00	 call	 PyUnicode_AsUTF8
  000f5	48 89 44 24 30	 mov	 QWORD PTR tp_name$[rsp], rax

; 299  :     if (tp_name == NULL)

  000fa	48 83 7c 24 30
	00		 cmp	 QWORD PTR tp_name$[rsp], 0
  00100	75 07		 jne	 SHORT $LN1@type_set_n

; 300  :         return -1;

  00102	b8 ff ff ff ff	 mov	 eax, -1
  00107	eb 50		 jmp	 SHORT $LN6@type_set_n
$LN1@type_set_n:

; 301  : 
; 302  :     et = (PyHeapTypeObject*)type;

  00109	48 8b 44 24 50	 mov	 rax, QWORD PTR type$[rsp]
  0010e	48 89 44 24 20	 mov	 QWORD PTR et$[rsp], rax

; 303  : 
; 304  :     Py_INCREF(value);

  00113	48 8b 4c 24 58	 mov	 rcx, QWORD PTR value$[rsp]
  00118	e8 00 00 00 00	 call	 _Py_IncRef

; 305  : 
; 306  :     /* Wait until et is a sane state before Py_DECREF'ing the old et->ht_name
; 307  :        value.  (Bug #16447.)  */
; 308  :     tmp = et->ht_name;

  0011d	48 8b 44 24 20	 mov	 rax, QWORD PTR et$[rsp]
  00122	48 8b 80 68 03
	00 00		 mov	 rax, QWORD PTR [rax+872]
  00129	48 89 44 24 28	 mov	 QWORD PTR tmp$[rsp], rax

; 309  :     et->ht_name = value;

  0012e	48 8b 44 24 20	 mov	 rax, QWORD PTR et$[rsp]
  00133	48 8b 4c 24 58	 mov	 rcx, QWORD PTR value$[rsp]
  00138	48 89 88 68 03
	00 00		 mov	 QWORD PTR [rax+872], rcx

; 310  : 
; 311  :     type->tp_name = tp_name;

  0013f	48 8b 44 24 50	 mov	 rax, QWORD PTR type$[rsp]
  00144	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tp_name$[rsp]
  00149	48 89 48 70	 mov	 QWORD PTR [rax+112], rcx

; 312  :     Py_DECREF(tmp);

  0014d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tmp$[rsp]
  00152	e8 00 00 00 00	 call	 _Py_DecRef

; 313  : 
; 314  :     return 0;

  00157	33 c0		 xor	 eax, eax
$LN6@type_set_n:

; 315  : }

  00159	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0015d	c3		 ret	 0
type_set_name ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BD@GNPKCBL@can?8t?5delete?5?$CFs?4?$CFs?$AA@ ; `string'
PUBLIC	??_C@_0BA@KPNEJFKD@can?8t?5set?5?$CFs?4?$CFs?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$check_set_special_type_attr DD imagerel check_set_special_type_attr
	DD	imagerel check_set_special_type_attr+131
	DD	imagerel $unwind$check_set_special_type_attr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$check_set_special_type_attr DD 011301H
	DD	04213H
xdata	ENDS
;	COMDAT ??_C@_0BD@GNPKCBL@can?8t?5delete?5?$CFs?4?$CFs?$AA@
CONST	SEGMENT
??_C@_0BD@GNPKCBL@can?8t?5delete?5?$CFs?4?$CFs?$AA@ DB 'can''t delete %s.'
	DB	'%s', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@KPNEJFKD@can?8t?5set?5?$CFs?4?$CFs?$AA@
CONST	SEGMENT
??_C@_0BA@KPNEJFKD@can?8t?5set?5?$CFs?4?$CFs?$AA@ DB 'can''t set %s.%s', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT check_set_special_type_attr
_TEXT	SEGMENT
type$ = 48
value$ = 56
name$ = 64
check_set_special_type_attr PROC			; COMDAT

; 222  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 223  :     if (!(type->tp_flags & Py_TPFLAGS_HEAPTYPE)) {

  00013	48 8b 44 24 30	 mov	 rax, QWORD PTR type$[rsp]
  00018	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0001e	25 00 02 00 00	 and	 eax, 512		; 00000200H
  00023	85 c0		 test	 eax, eax
  00025	75 25		 jne	 SHORT $LN2@check_set_

; 224  :         PyErr_Format(PyExc_TypeError,
; 225  :                      "can't set %s.%s", type->tp_name, name);

  00027	4c 8b 4c 24 40	 mov	 r9, QWORD PTR name$[rsp]
  0002c	48 8b 44 24 30	 mov	 rax, QWORD PTR type$[rsp]
  00031	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  00035	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BA@KPNEJFKD@can?8t?5set?5?$CFs?4?$CFs?$AA@
  0003c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00043	e8 00 00 00 00	 call	 PyErr_Format

; 226  :         return 0;

  00048	33 c0		 xor	 eax, eax
  0004a	eb 32		 jmp	 SHORT $LN3@check_set_
$LN2@check_set_:

; 227  :     }
; 228  :     if (!value) {

  0004c	48 83 7c 24 38
	00		 cmp	 QWORD PTR value$[rsp], 0
  00052	75 25		 jne	 SHORT $LN1@check_set_

; 229  :         PyErr_Format(PyExc_TypeError,
; 230  :                      "can't delete %s.%s", type->tp_name, name);

  00054	4c 8b 4c 24 40	 mov	 r9, QWORD PTR name$[rsp]
  00059	48 8b 44 24 30	 mov	 rax, QWORD PTR type$[rsp]
  0005e	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  00062	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@GNPKCBL@can?8t?5delete?5?$CFs?4?$CFs?$AA@
  00069	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00070	e8 00 00 00 00	 call	 PyErr_Format

; 231  :         return 0;

  00075	33 c0		 xor	 eax, eax
  00077	eb 05		 jmp	 SHORT $LN3@check_set_
$LN1@check_set_:

; 232  :     }
; 233  :     return 1;

  00079	b8 01 00 00 00	 mov	 eax, 1
$LN3@check_set_:

; 234  : }

  0007e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00082	c3		 ret	 0
check_set_special_type_attr ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DE@BPFPODOA@can?5only?5assign?5string?5to?5?$CFs?4__q@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$type_set_qualname DD imagerel type_set_qualname
	DD	imagerel type_set_qualname+188
	DD	imagerel $unwind$type_set_qualname
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$type_set_qualname DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT ??_C@_0DE@BPFPODOA@can?5only?5assign?5string?5to?5?$CFs?4__q@
CONST	SEGMENT
??_C@_0DE@BPFPODOA@can?5only?5assign?5string?5to?5?$CFs?4__q@ DB 'can onl'
	DB	'y assign string to %s.__qualname__, not ''%s''', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT type_set_qualname
_TEXT	SEGMENT
et$ = 32
type$ = 64
value$ = 72
context$ = 80
type_set_qualname PROC					; COMDAT

; 319  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 320  :     PyHeapTypeObject* et;
; 321  : 
; 322  :     if (!check_set_special_type_attr(type, value, "__qualname__"))

  00013	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0N@FMLGAKCE@__qualname__?$AA@
  0001a	48 8b 54 24 48	 mov	 rdx, QWORD PTR value$[rsp]
  0001f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR type$[rsp]
  00024	e8 00 00 00 00	 call	 check_set_special_type_attr
  00029	85 c0		 test	 eax, eax
  0002b	75 0a		 jne	 SHORT $LN2@type_set_q

; 323  :         return -1;

  0002d	b8 ff ff ff ff	 mov	 eax, -1
  00032	e9 80 00 00 00	 jmp	 $LN3@type_set_q
$LN2@type_set_q:

; 324  :     if (!PyUnicode_Check(value)) {

  00037	48 8b 44 24 48	 mov	 rax, QWORD PTR value$[rsp]
  0003c	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00040	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00046	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0004b	85 c0		 test	 eax, eax
  0004d	75 30		 jne	 SHORT $LN1@type_set_q

; 325  :         PyErr_Format(PyExc_TypeError,
; 326  :                      "can only assign string to %s.__qualname__, not '%s'",
; 327  :                      type->tp_name, Py_TYPE(value)->tp_name);

  0004f	48 8b 44 24 48	 mov	 rax, QWORD PTR value$[rsp]
  00054	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00058	4c 8b 48 70	 mov	 r9, QWORD PTR [rax+112]
  0005c	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  00061	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  00065	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DE@BPFPODOA@can?5only?5assign?5string?5to?5?$CFs?4__q@
  0006c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00073	e8 00 00 00 00	 call	 PyErr_Format

; 328  :         return -1;

  00078	b8 ff ff ff ff	 mov	 eax, -1
  0007d	eb 38		 jmp	 SHORT $LN3@type_set_q
$LN1@type_set_q:

; 329  :     }
; 330  : 
; 331  :     et = (PyHeapTypeObject*)type;

  0007f	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  00084	48 89 44 24 20	 mov	 QWORD PTR et$[rsp], rax

; 332  :     Py_INCREF(value);

  00089	48 8b 4c 24 48	 mov	 rcx, QWORD PTR value$[rsp]
  0008e	e8 00 00 00 00	 call	 _Py_IncRef

; 333  :     Py_DECREF(et->ht_qualname);

  00093	48 8b 44 24 20	 mov	 rax, QWORD PTR et$[rsp]
  00098	48 8b 88 78 03
	00 00		 mov	 rcx, QWORD PTR [rax+888]
  0009f	e8 00 00 00 00	 call	 _Py_DecRef

; 334  :     et->ht_qualname = value;

  000a4	48 8b 44 24 20	 mov	 rax, QWORD PTR et$[rsp]
  000a9	48 8b 4c 24 48	 mov	 rcx, QWORD PTR value$[rsp]
  000ae	48 89 88 78 03
	00 00		 mov	 QWORD PTR [rax+888], rcx

; 335  :     return 0;

  000b5	33 c0		 xor	 eax, eax
$LN3@type_set_q:

; 336  : }

  000b7	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000bb	c3		 ret	 0
type_set_qualname ENDP
_TEXT	ENDS
PUBLIC	??_C@_08OCOMCJAJ@builtins?$AA@			; `string'
EXTRN	PyExc_AttributeError:QWORD
EXTRN	_PyDict_GetItemId:PROC
EXTRN	_tls_index:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$type_module DD imagerel type_module
	DD	imagerel type_module+238
	DD	imagerel $unwind$type_module
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$type_module DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT ??_C@_08OCOMCJAJ@builtins?$AA@
CONST	SEGMENT
??_C@_08OCOMCJAJ@builtins?$AA@ DB 'builtins', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT type_module
_TEXT	SEGMENT
s$ = 32
mod$ = 40
type$ = 64
context$ = 72
type_module PROC					; COMDAT

; 340  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 341  :     PyObject *mod;
; 342  :     char *s;
; 343  : 
; 344  :     if (type->tp_flags & Py_TPFLAGS_HEAPTYPE) {

  0000e	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  00013	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00019	25 00 02 00 00	 and	 eax, 512		; 00000200H
  0001e	85 c0		 test	 eax, eax
  00020	74 73		 je	 SHORT $LN8@type_modul

; 345  :         mod = _PyDict_GetItemId(type->tp_dict, &PyId___module__);

  00022	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId___module__
  00027	8b c0		 mov	 eax, eax
  00029	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0002f	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00038	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0003c	48 8b d0	 mov	 rdx, rax
  0003f	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  00044	48 8b 88 60 01
	00 00		 mov	 rcx, QWORD PTR [rax+352]
  0004b	e8 00 00 00 00	 call	 _PyDict_GetItemId
  00050	48 89 44 24 28	 mov	 QWORD PTR mod$[rsp], rax

; 346  :         if (!mod) {

  00055	48 83 7c 24 28
	00		 cmp	 QWORD PTR mod$[rsp], 0
  0005b	75 17		 jne	 SHORT $LN7@type_modul

; 347  :             PyErr_Format(PyExc_AttributeError, "__module__");

  0005d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@LNCJCPDP@__module__?$AA@
  00064	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_AttributeError
  0006b	e8 00 00 00 00	 call	 PyErr_Format

; 348  :             return 0;

  00070	33 c0		 xor	 eax, eax
  00072	eb 75		 jmp	 SHORT $LN9@type_modul
$LN7@type_modul:
$LN6@type_modul:

; 349  :         }
; 350  :         Py_XINCREF(mod);

  00074	48 83 7c 24 28
	00		 cmp	 QWORD PTR mod$[rsp], 0
  0007a	74 0a		 je	 SHORT $LN3@type_modul
  0007c	48 8b 4c 24 28	 mov	 rcx, QWORD PTR mod$[rsp]
  00081	e8 00 00 00 00	 call	 _Py_IncRef
$LN3@type_modul:
  00086	33 c0		 xor	 eax, eax
  00088	85 c0		 test	 eax, eax
  0008a	75 e8		 jne	 SHORT $LN6@type_modul

; 351  :         return mod;

  0008c	48 8b 44 24 28	 mov	 rax, QWORD PTR mod$[rsp]
  00091	eb 56		 jmp	 SHORT $LN9@type_modul

; 352  :     }
; 353  :     else {

  00093	eb 54		 jmp	 SHORT $LN2@type_modul
$LN8@type_modul:

; 354  :         s = strrchr(type->tp_name, '.');

  00095	ba 2e 00 00 00	 mov	 edx, 46			; 0000002eH
  0009a	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  0009f	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  000a3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strrchr
  000a9	48 89 44 24 20	 mov	 QWORD PTR s$[rsp], rax

; 355  :         if (s != NULL)

  000ae	48 83 7c 24 20
	00		 cmp	 QWORD PTR s$[rsp], 0
  000b4	74 27		 je	 SHORT $LN1@type_modul

; 356  :             return PyUnicode_FromStringAndSize(
; 357  :                 type->tp_name, (Py_ssize_t)(s - type->tp_name));

  000b6	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  000bb	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  000bf	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  000c4	48 2b c8	 sub	 rcx, rax
  000c7	48 8b c1	 mov	 rax, rcx
  000ca	48 8b d0	 mov	 rdx, rax
  000cd	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  000d2	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  000d6	e8 00 00 00 00	 call	 PyUnicode_FromStringAndSize
  000db	eb 0c		 jmp	 SHORT $LN9@type_modul
$LN1@type_modul:

; 358  :         return PyUnicode_FromString("builtins");

  000dd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08OCOMCJAJ@builtins?$AA@
  000e4	e8 00 00 00 00	 call	 PyUnicode_FromString
$LN2@type_modul:
$LN9@type_modul:

; 359  :     }
; 360  : }

  000e9	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000ed	c3		 ret	 0
type_module ENDP
_TEXT	ENDS
EXTRN	_PyDict_SetItemId:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$type_set_module DD imagerel type_set_module
	DD	imagerel type_set_module+118
	DD	imagerel $unwind$type_set_module
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$type_set_module DD 011301H
	DD	04213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT type_set_module
_TEXT	SEGMENT
type$ = 48
value$ = 56
context$ = 64
type_set_module PROC					; COMDAT

; 364  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 365  :     if (!check_set_special_type_attr(type, value, "__module__"))

  00013	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0L@LNCJCPDP@__module__?$AA@
  0001a	48 8b 54 24 38	 mov	 rdx, QWORD PTR value$[rsp]
  0001f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR type$[rsp]
  00024	e8 00 00 00 00	 call	 check_set_special_type_attr
  00029	85 c0		 test	 eax, eax
  0002b	75 07		 jne	 SHORT $LN1@type_set_m

; 366  :         return -1;

  0002d	b8 ff ff ff ff	 mov	 eax, -1
  00032	eb 3d		 jmp	 SHORT $LN2@type_set_m
$LN1@type_set_m:

; 367  : 
; 368  :     PyType_Modified(type);

  00034	48 8b 4c 24 30	 mov	 rcx, QWORD PTR type$[rsp]
  00039	e8 00 00 00 00	 call	 PyType_Modified

; 369  : 
; 370  :     return _PyDict_SetItemId(type->tp_dict, &PyId___module__, value);

  0003e	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId___module__
  00043	8b c0		 mov	 eax, eax
  00045	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0004b	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00054	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00058	4c 8b 44 24 38	 mov	 r8, QWORD PTR value$[rsp]
  0005d	48 8b d0	 mov	 rdx, rax
  00060	48 8b 44 24 30	 mov	 rax, QWORD PTR type$[rsp]
  00065	48 8b 88 60 01
	00 00		 mov	 rcx, QWORD PTR [rax+352]
  0006c	e8 00 00 00 00	 call	 _PyDict_SetItemId
$LN2@type_set_m:

; 371  : }

  00071	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00075	c3		 ret	 0
type_set_module ENDP
_TEXT	ENDS
EXTRN	PyErr_SetString:PROC
EXTRN	PyDict_GetItemString:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$type_abstractmethods DD imagerel type_abstractmethods
	DD	imagerel type_abstractmethods+131
	DD	imagerel $unwind$type_abstractmethods
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$type_abstractmethods DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT type_abstractmethods
_TEXT	SEGMENT
mod$ = 32
type$ = 64
context$ = 72
type_abstractmethods PROC				; COMDAT

; 375  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 376  :     PyObject *mod = NULL;

  0000e	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR mod$[rsp], 0

; 377  :     /* type itself has an __abstractmethods__ descriptor (this). Don't return
; 378  :        that. */
; 379  :     if (type != &PyType_Type)

  00017	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyType_Type
  0001e	48 39 44 24 40	 cmp	 QWORD PTR type$[rsp], rax
  00023	74 1d		 je	 SHORT $LN6@type_abstr

; 380  :         mod = PyDict_GetItemString(type->tp_dict, "__abstractmethods__");

  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@EMDECJMP@__abstractmethods__?$AA@
  0002c	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  00031	48 8b 88 60 01
	00 00		 mov	 rcx, QWORD PTR [rax+352]
  00038	e8 00 00 00 00	 call	 PyDict_GetItemString
  0003d	48 89 44 24 20	 mov	 QWORD PTR mod$[rsp], rax
$LN6@type_abstr:

; 381  :     if (!mod) {

  00042	48 83 7c 24 20
	00		 cmp	 QWORD PTR mod$[rsp], 0
  00048	75 17		 jne	 SHORT $LN5@type_abstr

; 382  :         PyErr_SetString(PyExc_AttributeError, "__abstractmethods__");

  0004a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@EMDECJMP@__abstractmethods__?$AA@
  00051	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_AttributeError
  00058	e8 00 00 00 00	 call	 PyErr_SetString

; 383  :         return NULL;

  0005d	33 c0		 xor	 eax, eax
  0005f	eb 1d		 jmp	 SHORT $LN7@type_abstr
$LN5@type_abstr:
$LN4@type_abstr:

; 384  :     }
; 385  :     Py_XINCREF(mod);

  00061	48 83 7c 24 20
	00		 cmp	 QWORD PTR mod$[rsp], 0
  00067	74 0a		 je	 SHORT $LN1@type_abstr
  00069	48 8b 4c 24 20	 mov	 rcx, QWORD PTR mod$[rsp]
  0006e	e8 00 00 00 00	 call	 _Py_IncRef
$LN1@type_abstr:
  00073	33 c0		 xor	 eax, eax
  00075	85 c0		 test	 eax, eax
  00077	75 e8		 jne	 SHORT $LN4@type_abstr

; 386  :     return mod;

  00079	48 8b 44 24 20	 mov	 rax, QWORD PTR mod$[rsp]
$LN7@type_abstr:

; 387  : }

  0007e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00082	c3		 ret	 0
type_abstractmethods ENDP
_TEXT	ENDS
EXTRN	PyErr_ExceptionMatches:PROC
EXTRN	PyExc_KeyError:QWORD
EXTRN	PyDict_DelItemString:PROC
EXTRN	PyDict_SetItemString:PROC
EXTRN	PyObject_IsTrue:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$type_set_abstractmethods DD imagerel type_set_abstractmethods
	DD	imagerel type_set_abstractmethods+265
	DD	imagerel $unwind$type_set_abstractmethods
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$type_set_abstractmethods DD 011301H
	DD	06213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT type_set_abstractmethods
_TEXT	SEGMENT
res$ = 32
abstract$ = 36
type$ = 64
value$ = 72
context$ = 80
type_set_abstractmethods PROC				; COMDAT

; 391  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 392  :     /* __abstractmethods__ should only be set once on a type, in
; 393  :        abc.ABCMeta.__new__, so this function doesn't do anything
; 394  :        special to update subclasses.
; 395  :     */
; 396  :     int abstract, res;
; 397  :     if (value != NULL) {

  00013	48 83 7c 24 48
	00		 cmp	 QWORD PTR value$[rsp], 0
  00019	74 42		 je	 SHORT $LN7@type_set_a

; 398  :         abstract = PyObject_IsTrue(value);

  0001b	48 8b 4c 24 48	 mov	 rcx, QWORD PTR value$[rsp]
  00020	e8 00 00 00 00	 call	 PyObject_IsTrue
  00025	89 44 24 24	 mov	 DWORD PTR abstract$[rsp], eax

; 399  :         if (abstract < 0)

  00029	83 7c 24 24 00	 cmp	 DWORD PTR abstract$[rsp], 0
  0002e	7d 0a		 jge	 SHORT $LN6@type_set_a

; 400  :             return -1;

  00030	b8 ff ff ff ff	 mov	 eax, -1
  00035	e9 ca 00 00 00	 jmp	 $LN8@type_set_a
$LN6@type_set_a:

; 401  :         res = PyDict_SetItemString(type->tp_dict, "__abstractmethods__", value);

  0003a	4c 8b 44 24 48	 mov	 r8, QWORD PTR value$[rsp]
  0003f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@EMDECJMP@__abstractmethods__?$AA@
  00046	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  0004b	48 8b 88 60 01
	00 00		 mov	 rcx, QWORD PTR [rax+352]
  00052	e8 00 00 00 00	 call	 PyDict_SetItemString
  00057	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 402  :     }
; 403  :     else {

  0005b	eb 55		 jmp	 SHORT $LN5@type_set_a
$LN7@type_set_a:

; 404  :         abstract = 0;

  0005d	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR abstract$[rsp], 0

; 405  :         res = PyDict_DelItemString(type->tp_dict, "__abstractmethods__");

  00065	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@EMDECJMP@__abstractmethods__?$AA@
  0006c	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  00071	48 8b 88 60 01
	00 00		 mov	 rcx, QWORD PTR [rax+352]
  00078	e8 00 00 00 00	 call	 PyDict_DelItemString
  0007d	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 406  :         if (res && PyErr_ExceptionMatches(PyExc_KeyError)) {

  00081	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  00086	74 2a		 je	 SHORT $LN4@type_set_a
  00088	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_KeyError
  0008f	e8 00 00 00 00	 call	 PyErr_ExceptionMatches
  00094	85 c0		 test	 eax, eax
  00096	74 1a		 je	 SHORT $LN4@type_set_a

; 407  :             PyErr_SetString(PyExc_AttributeError, "__abstractmethods__");

  00098	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@EMDECJMP@__abstractmethods__?$AA@
  0009f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_AttributeError
  000a6	e8 00 00 00 00	 call	 PyErr_SetString

; 408  :             return -1;

  000ab	b8 ff ff ff ff	 mov	 eax, -1
  000b0	eb 52		 jmp	 SHORT $LN8@type_set_a
$LN4@type_set_a:
$LN5@type_set_a:

; 409  :         }
; 410  :     }
; 411  :     if (res == 0) {

  000b2	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  000b7	75 47		 jne	 SHORT $LN3@type_set_a

; 412  :         PyType_Modified(type);

  000b9	48 8b 4c 24 40	 mov	 rcx, QWORD PTR type$[rsp]
  000be	e8 00 00 00 00	 call	 PyType_Modified

; 413  :         if (abstract)

  000c3	83 7c 24 24 00	 cmp	 DWORD PTR abstract$[rsp], 0
  000c8	74 1c		 je	 SHORT $LN2@type_set_a

; 414  :             type->tp_flags |= Py_TPFLAGS_IS_ABSTRACT;

  000ca	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  000cf	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000d5	0f ba e8 14	 bts	 eax, 20
  000d9	48 8b 4c 24 40	 mov	 rcx, QWORD PTR type$[rsp]
  000de	89 81 00 01 00
	00		 mov	 DWORD PTR [rcx+256], eax

; 415  :         else

  000e4	eb 1a		 jmp	 SHORT $LN1@type_set_a
$LN2@type_set_a:

; 416  :             type->tp_flags &= ~Py_TPFLAGS_IS_ABSTRACT;

  000e6	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  000eb	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000f1	0f ba f0 14	 btr	 eax, 20
  000f5	48 8b 4c 24 40	 mov	 rcx, QWORD PTR type$[rsp]
  000fa	89 81 00 01 00
	00		 mov	 DWORD PTR [rcx+256], eax
$LN1@type_set_a:
$LN3@type_set_a:

; 417  :     }
; 418  :     return res;

  00100	8b 44 24 20	 mov	 eax, DWORD PTR res$[rsp]
$LN8@type_set_a:

; 419  : }

  00104	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00108	c3		 ret	 0
type_set_abstractmethods ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$type_get_bases DD imagerel type_get_bases
	DD	imagerel type_get_bases+48
	DD	imagerel $unwind$type_get_bases
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$type_get_bases DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT type_get_bases
_TEXT	SEGMENT
type$ = 48
context$ = 56
type_get_bases PROC					; COMDAT

; 423  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 424  :     Py_INCREF(type->tp_bases);

  0000e	48 8b 44 24 30	 mov	 rax, QWORD PTR type$[rsp]
  00013	48 8b 88 a8 01
	00 00		 mov	 rcx, QWORD PTR [rax+424]
  0001a	e8 00 00 00 00	 call	 _Py_IncRef

; 425  :     return type->tp_bases;

  0001f	48 8b 44 24 30	 mov	 rax, QWORD PTR type$[rsp]
  00024	48 8b 80 a8 01
	00 00		 mov	 rax, QWORD PTR [rax+424]

; 426  : }

  0002b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002f	c3		 ret	 0
type_get_bases ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CN@FHOLHLPH@a?5__bases__?5item?5causes?5an?5inher@ ; `string'
PUBLIC	PyType_IsSubtype
PUBLIC	??_C@_0DA@KMPAJIL@?$CFs?4__bases__?5must?5be?5tuple?5of?5cl@ ; `string'
PUBLIC	??_C@_0DI@HBHDIBPC@can?5only?5assign?5non?9empty?5tuple?5@ ; `string'
PUBLIC	??_C@_0CO@NIHOFPCP@can?5only?5assign?5tuple?5to?5?$CFs?4__ba@ ; `string'
EXTRN	PyArg_UnpackTuple:PROC
EXTRN	PyList_Size:PROC
EXTRN	PyList_New:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$type_set_bases DD imagerel type_set_bases
	DD	imagerel type_set_bases+1324
	DD	imagerel $unwind$type_set_bases
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$type_set_bases DD 021601H
	DD	0110116H
xdata	ENDS
;	COMDAT ??_C@_0CN@FHOLHLPH@a?5__bases__?5item?5causes?5an?5inher@
CONST	SEGMENT
??_C@_0CN@FHOLHLPH@a?5__bases__?5item?5causes?5an?5inher@ DB 'a __bases__'
	DB	' item causes an inheritance cycle', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@KMPAJIL@?$CFs?4__bases__?5must?5be?5tuple?5of?5cl@
CONST	SEGMENT
??_C@_0DA@KMPAJIL@?$CFs?4__bases__?5must?5be?5tuple?5of?5cl@ DB '%s.__bas'
	DB	'es__ must be tuple of classes, not ''%s''', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@HBHDIBPC@can?5only?5assign?5non?9empty?5tuple?5@
CONST	SEGMENT
??_C@_0DI@HBHDIBPC@can?5only?5assign?5non?9empty?5tuple?5@ DB 'can only a'
	DB	'ssign non-empty tuple to %s.__bases__, not ()', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@NIHOFPCP@can?5only?5assign?5tuple?5to?5?$CFs?4__ba@
CONST	SEGMENT
??_C@_0CO@NIHOFPCP@can?5only?5assign?5tuple?5to?5?$CFs?4__ba@ DB 'can onl'
	DB	'y assign tuple to %s.__bases__, not %s', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT type_set_bases
_TEXT	SEGMENT
old_bases$ = 48
i$ = 56
old_mro$ = 64
temp$ = 72
ob$ = 80
new_base$ = 88
r$ = 96
old_base$ = 104
mro$20833 = 112
cls$20832 = 120
type$ = 144
value$ = 152
context$ = 160
type_set_bases PROC					; COMDAT

; 484  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 485  :     Py_ssize_t i;
; 486  :     int r = 0;

  00016	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR r$[rsp], 0

; 487  :     PyObject *ob, *temp;
; 488  :     PyTypeObject *new_base, *old_base;
; 489  :     PyObject *old_bases, *old_mro;
; 490  : 
; 491  :     if (!check_set_special_type_attr(type, value, "__bases__"))

  0001e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_09LJKDIEEK@__bases__?$AA@
  00025	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR value$[rsp]
  0002d	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR type$[rsp]
  00035	e8 00 00 00 00	 call	 check_set_special_type_attr
  0003a	85 c0		 test	 eax, eax
  0003c	75 0a		 jne	 SHORT $LN26@type_set_b

; 492  :         return -1;

  0003e	b8 ff ff ff ff	 mov	 eax, -1
  00043	e9 dc 04 00 00	 jmp	 $LN27@type_set_b
$LN26@type_set_b:

; 493  :     if (!PyTuple_Check(value)) {

  00048	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR value$[rsp]
  00050	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00054	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0005a	25 00 00 00 04	 and	 eax, 67108864		; 04000000H
  0005f	85 c0		 test	 eax, eax
  00061	75 39		 jne	 SHORT $LN25@type_set_b

; 494  :         PyErr_Format(PyExc_TypeError,
; 495  :              "can only assign tuple to %s.__bases__, not %s",
; 496  :                  type->tp_name, Py_TYPE(value)->tp_name);

  00063	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR value$[rsp]
  0006b	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0006f	4c 8b 48 70	 mov	 r9, QWORD PTR [rax+112]
  00073	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  0007b	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  0007f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CO@NIHOFPCP@can?5only?5assign?5tuple?5to?5?$CFs?4__ba@
  00086	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0008d	e8 00 00 00 00	 call	 PyErr_Format

; 497  :         return -1;

  00092	b8 ff ff ff ff	 mov	 eax, -1
  00097	e9 88 04 00 00	 jmp	 $LN27@type_set_b
$LN25@type_set_b:

; 498  :     }
; 499  :     if (PyTuple_GET_SIZE(value) == 0) {

  0009c	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR value$[rsp]
  000a4	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  000a9	75 29		 jne	 SHORT $LN24@type_set_b

; 500  :         PyErr_Format(PyExc_TypeError,
; 501  :              "can only assign non-empty tuple to %s.__bases__, not ()",
; 502  :                  type->tp_name);

  000ab	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  000b3	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  000b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DI@HBHDIBPC@can?5only?5assign?5non?9empty?5tuple?5@
  000be	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000c5	e8 00 00 00 00	 call	 PyErr_Format

; 503  :         return -1;

  000ca	b8 ff ff ff ff	 mov	 eax, -1
  000cf	e9 50 04 00 00	 jmp	 $LN27@type_set_b
$LN24@type_set_b:

; 504  :     }
; 505  :     for (i = 0; i < PyTuple_GET_SIZE(value); i++) {

  000d4	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  000dd	eb 0d		 jmp	 SHORT $LN23@type_set_b
$LN22@type_set_b:
  000df	48 8b 44 24 38	 mov	 rax, QWORD PTR i$[rsp]
  000e4	48 ff c0	 inc	 rax
  000e7	48 89 44 24 38	 mov	 QWORD PTR i$[rsp], rax
$LN23@type_set_b:
  000ec	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR value$[rsp]
  000f4	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000f8	48 39 44 24 38	 cmp	 QWORD PTR i$[rsp], rax
  000fd	0f 8d 9d 00 00
	00		 jge	 $LN21@type_set_b

; 506  :         ob = PyTuple_GET_ITEM(value, i);

  00103	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR value$[rsp]
  0010b	48 8b 4c 24 38	 mov	 rcx, QWORD PTR i$[rsp]
  00110	48 8b 44 c8 70	 mov	 rax, QWORD PTR [rax+rcx*8+112]
  00115	48 89 44 24 50	 mov	 QWORD PTR ob$[rsp], rax

; 507  :         if (!PyType_Check(ob)) {

  0011a	48 8b 44 24 50	 mov	 rax, QWORD PTR ob$[rsp]
  0011f	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00123	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00129	25 00 00 00 80	 and	 eax, -2147483648	; ffffffff80000000H
  0012e	85 c0		 test	 eax, eax
  00130	75 36		 jne	 SHORT $LN20@type_set_b

; 508  :             PyErr_Format(PyExc_TypeError,
; 509  :                          "%s.__bases__ must be tuple of classes, not '%s'",
; 510  :                          type->tp_name, Py_TYPE(ob)->tp_name);

  00132	48 8b 44 24 50	 mov	 rax, QWORD PTR ob$[rsp]
  00137	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0013b	4c 8b 48 70	 mov	 r9, QWORD PTR [rax+112]
  0013f	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  00147	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  0014b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DA@KMPAJIL@?$CFs?4__bases__?5must?5be?5tuple?5of?5cl@
  00152	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00159	e8 00 00 00 00	 call	 PyErr_Format

; 511  :             return -1;

  0015e	b8 ff ff ff ff	 mov	 eax, -1
  00163	e9 bc 03 00 00	 jmp	 $LN27@type_set_b
$LN20@type_set_b:

; 512  :         }
; 513  :         if (PyType_IsSubtype((PyTypeObject*)ob, type)) {

  00168	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR type$[rsp]
  00170	48 8b 4c 24 50	 mov	 rcx, QWORD PTR ob$[rsp]
  00175	e8 00 00 00 00	 call	 PyType_IsSubtype
  0017a	85 c0		 test	 eax, eax
  0017c	74 1d		 je	 SHORT $LN19@type_set_b

; 514  :             PyErr_SetString(PyExc_TypeError,
; 515  :                             "a __bases__ item causes an inheritance cycle");

  0017e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CN@FHOLHLPH@a?5__bases__?5item?5causes?5an?5inher@
  00185	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0018c	e8 00 00 00 00	 call	 PyErr_SetString

; 516  :             return -1;

  00191	b8 ff ff ff ff	 mov	 eax, -1
  00196	e9 89 03 00 00	 jmp	 $LN27@type_set_b
$LN19@type_set_b:

; 517  :         }
; 518  :     }

  0019b	e9 3f ff ff ff	 jmp	 $LN22@type_set_b
$LN21@type_set_b:

; 519  : 
; 520  :     new_base = best_base(value);

  001a0	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR value$[rsp]
  001a8	e8 00 00 00 00	 call	 best_base
  001ad	48 89 44 24 58	 mov	 QWORD PTR new_base$[rsp], rax

; 521  : 
; 522  :     if (!new_base)

  001b2	48 83 7c 24 58
	00		 cmp	 QWORD PTR new_base$[rsp], 0
  001b8	75 0a		 jne	 SHORT $LN18@type_set_b

; 523  :         return -1;

  001ba	b8 ff ff ff ff	 mov	 eax, -1
  001bf	e9 60 03 00 00	 jmp	 $LN27@type_set_b
$LN18@type_set_b:

; 524  : 
; 525  :     if (!compatible_for_assignment(type->tp_base, new_base, "__bases__"))

  001c4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_09LJKDIEEK@__bases__?$AA@
  001cb	48 8b 54 24 58	 mov	 rdx, QWORD PTR new_base$[rsp]
  001d0	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  001d8	48 8b 88 58 01
	00 00		 mov	 rcx, QWORD PTR [rax+344]
  001df	e8 00 00 00 00	 call	 compatible_for_assignment
  001e4	85 c0		 test	 eax, eax
  001e6	75 0a		 jne	 SHORT $LN17@type_set_b

; 526  :         return -1;

  001e8	b8 ff ff ff ff	 mov	 eax, -1
  001ed	e9 32 03 00 00	 jmp	 $LN27@type_set_b
$LN17@type_set_b:

; 527  : 
; 528  :     Py_INCREF(new_base);

  001f2	48 8b 4c 24 58	 mov	 rcx, QWORD PTR new_base$[rsp]
  001f7	e8 00 00 00 00	 call	 _Py_IncRef

; 529  :     Py_INCREF(value);

  001fc	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR value$[rsp]
  00204	e8 00 00 00 00	 call	 _Py_IncRef

; 530  : 
; 531  :     old_bases = type->tp_bases;

  00209	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  00211	48 8b 80 a8 01
	00 00		 mov	 rax, QWORD PTR [rax+424]
  00218	48 89 44 24 30	 mov	 QWORD PTR old_bases$[rsp], rax

; 532  :     old_base = type->tp_base;

  0021d	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  00225	48 8b 80 58 01
	00 00		 mov	 rax, QWORD PTR [rax+344]
  0022c	48 89 44 24 68	 mov	 QWORD PTR old_base$[rsp], rax

; 533  :     old_mro = type->tp_mro;

  00231	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  00239	48 8b 80 b0 01
	00 00		 mov	 rax, QWORD PTR [rax+432]
  00240	48 89 44 24 40	 mov	 QWORD PTR old_mro$[rsp], rax

; 534  : 
; 535  :     type->tp_bases = value;

  00245	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  0024d	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR value$[rsp]
  00255	48 89 88 a8 01
	00 00		 mov	 QWORD PTR [rax+424], rcx

; 536  :     type->tp_base = new_base;

  0025c	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  00264	48 8b 4c 24 58	 mov	 rcx, QWORD PTR new_base$[rsp]
  00269	48 89 88 58 01
	00 00		 mov	 QWORD PTR [rax+344], rcx

; 537  : 
; 538  :     if (mro_internal(type) < 0) {

  00270	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR type$[rsp]
  00278	e8 00 00 00 00	 call	 mro_internal
  0027d	85 c0		 test	 eax, eax
  0027f	7d 05		 jge	 SHORT $LN16@type_set_b

; 539  :         goto bail;

  00281	e9 0b 02 00 00	 jmp	 $bail$20826
$LN16@type_set_b:

; 540  :     }
; 541  : 
; 542  :     temp = PyList_New(0);

  00286	33 c9		 xor	 ecx, ecx
  00288	e8 00 00 00 00	 call	 PyList_New
  0028d	48 89 44 24 48	 mov	 QWORD PTR temp$[rsp], rax

; 543  :     if (!temp)

  00292	48 83 7c 24 48
	00		 cmp	 QWORD PTR temp$[rsp], 0
  00298	75 05		 jne	 SHORT $LN15@type_set_b

; 544  :         goto bail;

  0029a	e9 f2 01 00 00	 jmp	 $bail$20826
$LN15@type_set_b:

; 545  : 
; 546  :     r = mro_subclasses(type, temp);

  0029f	48 8b 54 24 48	 mov	 rdx, QWORD PTR temp$[rsp]
  002a4	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR type$[rsp]
  002ac	e8 00 00 00 00	 call	 mro_subclasses
  002b1	89 44 24 60	 mov	 DWORD PTR r$[rsp], eax

; 547  : 
; 548  :     if (r < 0) {

  002b5	83 7c 24 60 00	 cmp	 DWORD PTR r$[rsp], 0
  002ba	0f 8d b1 00 00
	00		 jge	 $LN14@type_set_b

; 549  :         for (i = 0; i < PyList_Size(temp); i++) {

  002c0	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  002c9	eb 0d		 jmp	 SHORT $LN13@type_set_b
$LN12@type_set_b:
  002cb	48 8b 44 24 38	 mov	 rax, QWORD PTR i$[rsp]
  002d0	48 ff c0	 inc	 rax
  002d3	48 89 44 24 38	 mov	 QWORD PTR i$[rsp], rax
$LN13@type_set_b:
  002d8	48 8b 4c 24 48	 mov	 rcx, QWORD PTR temp$[rsp]
  002dd	e8 00 00 00 00	 call	 PyList_Size
  002e2	48 39 44 24 38	 cmp	 QWORD PTR i$[rsp], rax
  002e7	7d 79		 jge	 SHORT $LN11@type_set_b

; 550  :             PyTypeObject* cls;
; 551  :             PyObject* mro;
; 552  :             PyArg_UnpackTuple(PyList_GET_ITEM(temp, i),
; 553  :                              "", 2, 2, &cls, &mro);

  002e9	48 8b 44 24 48	 mov	 rax, QWORD PTR temp$[rsp]
  002ee	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  002f2	48 8d 4c 24 70	 lea	 rcx, QWORD PTR mro$20833[rsp]
  002f7	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  002fc	48 8d 4c 24 78	 lea	 rcx, QWORD PTR cls$20832[rsp]
  00301	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00306	41 b9 02 00 00
	00		 mov	 r9d, 2
  0030c	41 b8 02 00 00
	00		 mov	 r8d, 2
  00312	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  00319	48 8b 4c 24 38	 mov	 rcx, QWORD PTR i$[rsp]
  0031e	48 8b 0c c8	 mov	 rcx, QWORD PTR [rax+rcx*8]
  00322	e8 00 00 00 00	 call	 PyArg_UnpackTuple

; 554  :             Py_INCREF(mro);

  00327	48 8b 4c 24 70	 mov	 rcx, QWORD PTR mro$20833[rsp]
  0032c	e8 00 00 00 00	 call	 _Py_IncRef

; 555  :             ob = cls->tp_mro;

  00331	48 8b 44 24 78	 mov	 rax, QWORD PTR cls$20832[rsp]
  00336	48 8b 80 b0 01
	00 00		 mov	 rax, QWORD PTR [rax+432]
  0033d	48 89 44 24 50	 mov	 QWORD PTR ob$[rsp], rax

; 556  :             cls->tp_mro = mro;

  00342	48 8b 44 24 78	 mov	 rax, QWORD PTR cls$20832[rsp]
  00347	48 8b 4c 24 70	 mov	 rcx, QWORD PTR mro$20833[rsp]
  0034c	48 89 88 b0 01
	00 00		 mov	 QWORD PTR [rax+432], rcx

; 557  :             Py_DECREF(ob);

  00353	48 8b 4c 24 50	 mov	 rcx, QWORD PTR ob$[rsp]
  00358	e8 00 00 00 00	 call	 _Py_DecRef

; 558  :         }

  0035d	e9 69 ff ff ff	 jmp	 $LN12@type_set_b
$LN11@type_set_b:

; 559  :         Py_DECREF(temp);

  00362	48 8b 4c 24 48	 mov	 rcx, QWORD PTR temp$[rsp]
  00367	e8 00 00 00 00	 call	 _Py_DecRef

; 560  :         goto bail;

  0036c	e9 20 01 00 00	 jmp	 $bail$20826
$LN14@type_set_b:

; 561  :     }
; 562  : 
; 563  :     Py_DECREF(temp);

  00371	48 8b 4c 24 48	 mov	 rcx, QWORD PTR temp$[rsp]
  00376	e8 00 00 00 00	 call	 _Py_DecRef

; 564  : 
; 565  :     /* any base that was in __bases__ but now isn't, we
; 566  :        need to remove |type| from its tp_subclasses.
; 567  :        conversely, any class now in __bases__ that wasn't
; 568  :        needs to have |type| added to its subclasses. */
; 569  : 
; 570  :     /* for now, sod that: just remove from all old_bases,
; 571  :        add to all new_bases */
; 572  : 
; 573  :     for (i = PyTuple_GET_SIZE(old_bases) - 1; i >= 0; i--) {

  0037b	48 8b 44 24 30	 mov	 rax, QWORD PTR old_bases$[rsp]
  00380	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00384	48 ff c8	 dec	 rax
  00387	48 89 44 24 38	 mov	 QWORD PTR i$[rsp], rax
  0038c	eb 0d		 jmp	 SHORT $LN10@type_set_b
$LN9@type_set_b:
  0038e	48 8b 44 24 38	 mov	 rax, QWORD PTR i$[rsp]
  00393	48 ff c8	 dec	 rax
  00396	48 89 44 24 38	 mov	 QWORD PTR i$[rsp], rax
$LN10@type_set_b:
  0039b	48 83 7c 24 38
	00		 cmp	 QWORD PTR i$[rsp], 0
  003a1	7c 40		 jl	 SHORT $LN8@type_set_b

; 574  :         ob = PyTuple_GET_ITEM(old_bases, i);

  003a3	48 8b 44 24 30	 mov	 rax, QWORD PTR old_bases$[rsp]
  003a8	48 8b 4c 24 38	 mov	 rcx, QWORD PTR i$[rsp]
  003ad	48 8b 44 c8 70	 mov	 rax, QWORD PTR [rax+rcx*8+112]
  003b2	48 89 44 24 50	 mov	 QWORD PTR ob$[rsp], rax

; 575  :         if (PyType_Check(ob)) {

  003b7	48 8b 44 24 50	 mov	 rax, QWORD PTR ob$[rsp]
  003bc	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  003c0	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  003c6	25 00 00 00 80	 and	 eax, -2147483648	; ffffffff80000000H
  003cb	85 c0		 test	 eax, eax
  003cd	74 12		 je	 SHORT $LN7@type_set_b

; 576  :             remove_subclass(
; 577  :                 (PyTypeObject*)ob, type);

  003cf	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR type$[rsp]
  003d7	48 8b 4c 24 50	 mov	 rcx, QWORD PTR ob$[rsp]
  003dc	e8 00 00 00 00	 call	 remove_subclass
$LN7@type_set_b:

; 578  :         }
; 579  :     }

  003e1	eb ab		 jmp	 SHORT $LN9@type_set_b
$LN8@type_set_b:

; 580  : 
; 581  :     for (i = PyTuple_GET_SIZE(value) - 1; i >= 0; i--) {

  003e3	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR value$[rsp]
  003eb	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  003ef	48 ff c8	 dec	 rax
  003f2	48 89 44 24 38	 mov	 QWORD PTR i$[rsp], rax
  003f7	eb 0d		 jmp	 SHORT $LN6@type_set_b
$LN5@type_set_b:
  003f9	48 8b 44 24 38	 mov	 rax, QWORD PTR i$[rsp]
  003fe	48 ff c8	 dec	 rax
  00401	48 89 44 24 38	 mov	 QWORD PTR i$[rsp], rax
$LN6@type_set_b:
  00406	48 83 7c 24 38
	00		 cmp	 QWORD PTR i$[rsp], 0
  0040c	7c 4f		 jl	 SHORT $LN4@type_set_b

; 582  :         ob = PyTuple_GET_ITEM(value, i);

  0040e	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR value$[rsp]
  00416	48 8b 4c 24 38	 mov	 rcx, QWORD PTR i$[rsp]
  0041b	48 8b 44 c8 70	 mov	 rax, QWORD PTR [rax+rcx*8+112]
  00420	48 89 44 24 50	 mov	 QWORD PTR ob$[rsp], rax

; 583  :         if (PyType_Check(ob)) {

  00425	48 8b 44 24 50	 mov	 rax, QWORD PTR ob$[rsp]
  0042a	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0042e	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00434	25 00 00 00 80	 and	 eax, -2147483648	; ffffffff80000000H
  00439	85 c0		 test	 eax, eax
  0043b	74 1e		 je	 SHORT $LN3@type_set_b

; 584  :             if (add_subclass((PyTypeObject*)ob, type) < 0)

  0043d	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR type$[rsp]
  00445	48 8b 4c 24 50	 mov	 rcx, QWORD PTR ob$[rsp]
  0044a	e8 00 00 00 00	 call	 add_subclass
  0044f	85 c0		 test	 eax, eax
  00451	7d 08		 jge	 SHORT $LN2@type_set_b

; 585  :                 r = -1;

  00453	c7 44 24 60 ff
	ff ff ff	 mov	 DWORD PTR r$[rsp], -1
$LN2@type_set_b:
$LN3@type_set_b:

; 586  :         }
; 587  :     }

  0045b	eb 9c		 jmp	 SHORT $LN5@type_set_b
$LN4@type_set_b:

; 588  : 
; 589  :     update_all_slots(type);

  0045d	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR type$[rsp]
  00465	e8 00 00 00 00	 call	 update_all_slots

; 590  : 
; 591  :     Py_DECREF(old_bases);

  0046a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR old_bases$[rsp]
  0046f	e8 00 00 00 00	 call	 _Py_DecRef

; 592  :     Py_DECREF(old_base);

  00474	48 8b 4c 24 68	 mov	 rcx, QWORD PTR old_base$[rsp]
  00479	e8 00 00 00 00	 call	 _Py_DecRef

; 593  :     Py_DECREF(old_mro);

  0047e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR old_mro$[rsp]
  00483	e8 00 00 00 00	 call	 _Py_DecRef

; 594  : 
; 595  :     return r;

  00488	8b 44 24 60	 mov	 eax, DWORD PTR r$[rsp]
  0048c	e9 93 00 00 00	 jmp	 $LN27@type_set_b
$bail$20826:

; 596  : 
; 597  :   bail:
; 598  :     Py_DECREF(type->tp_bases);

  00491	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  00499	48 8b 88 a8 01
	00 00		 mov	 rcx, QWORD PTR [rax+424]
  004a0	e8 00 00 00 00	 call	 _Py_DecRef

; 599  :     Py_DECREF(type->tp_base);

  004a5	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  004ad	48 8b 88 58 01
	00 00		 mov	 rcx, QWORD PTR [rax+344]
  004b4	e8 00 00 00 00	 call	 _Py_DecRef

; 600  :     if (type->tp_mro != old_mro) {

  004b9	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  004c1	48 8b 4c 24 40	 mov	 rcx, QWORD PTR old_mro$[rsp]
  004c6	48 39 88 b0 01
	00 00		 cmp	 QWORD PTR [rax+432], rcx
  004cd	74 14		 je	 SHORT $LN1@type_set_b

; 601  :         Py_DECREF(type->tp_mro);

  004cf	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  004d7	48 8b 88 b0 01
	00 00		 mov	 rcx, QWORD PTR [rax+432]
  004de	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@type_set_b:

; 602  :     }
; 603  : 
; 604  :     type->tp_bases = old_bases;

  004e3	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  004eb	48 8b 4c 24 30	 mov	 rcx, QWORD PTR old_bases$[rsp]
  004f0	48 89 88 a8 01
	00 00		 mov	 QWORD PTR [rax+424], rcx

; 605  :     type->tp_base = old_base;

  004f7	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  004ff	48 8b 4c 24 68	 mov	 rcx, QWORD PTR old_base$[rsp]
  00504	48 89 88 58 01
	00 00		 mov	 QWORD PTR [rax+344], rcx

; 606  :     type->tp_mro = old_mro;

  0050b	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  00513	48 8b 4c 24 40	 mov	 rcx, QWORD PTR old_mro$[rsp]
  00518	48 89 88 b0 01
	00 00		 mov	 QWORD PTR [rax+432], rcx

; 607  : 
; 608  :     return -1;

  0051f	b8 ff ff ff ff	 mov	 eax, -1
$LN27@type_set_b:

; 609  : }

  00524	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  0052b	c3		 ret	 0
type_set_bases ENDP
_TEXT	ENDS
PUBLIC	??_C@_1CO@DGKDGEJI@?$AAP?$AAy?$AAT?$AAy?$AAp?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAu?$AAb?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CC@CKFLIHGE@?$AAs?$AAu?$AAb?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DA@IHEHGJMP@?$AAP?$AAy?$AAW?$AAe?$AAa?$AAk?$AAr?$AAe?$AAf?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AAR?$AAe?$AAf?$AA?$CI?$AAr?$AAe?$AAf?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DC@CGHPHOHK@?$AAP?$AAy?$AAL?$AAi?$AAs?$AAt?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAu?$AAb?$AAc?$AAl?$AAa?$AAs?$AAs?$AAe?$AAs?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DA@GJLLIOPA@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAt?$AAy?$AAp?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@ ; `string'
EXTRN	PyList_Append:PROC
EXTRN	PyTuple_Pack:PROC
EXTRN	_PyWeakref_RefType:BYTE
EXTRN	__imp__wassert:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$mro_subclasses DD imagerel mro_subclasses
	DD	imagerel mro_subclasses+588
	DD	imagerel $unwind$mro_subclasses
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mro_subclasses DD 010e01H
	DD	0c20eH
xdata	ENDS
;	COMDAT ??_C@_1CO@DGKDGEJI@?$AAP?$AAy?$AAT?$AAy?$AAp?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAu?$AAb?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CO@DGKDGEJI@?$AAP?$AAy?$AAT?$AAy?$AAp?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAu?$AAb?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'T', 00H, 'y', 00H, 'p', 00H, 'e', 00H, '_', 00H
	DB	'C', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, '(', 00H, 's'
	DB	00H, 'u', 00H, 'b', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H
	DB	's', 00H, ')', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1CC@CKFLIHGE@?$AAs?$AAu?$AAb?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
CONST	SEGMENT
??_C@_1CC@CKFLIHGE@?$AAs?$AAu?$AAb?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ DB 's'
	DB	00H, 'u', 00H, 'b', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H
	DB	's', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, 'N', 00H, 'U'
	DB	00H, 'L', 00H, 'L', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1DA@IHEHGJMP@?$AAP?$AAy?$AAW?$AAe?$AAa?$AAk?$AAr?$AAe?$AAf?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AAR?$AAe?$AAf?$AA?$CI?$AAr?$AAe?$AAf?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DA@IHEHGJMP@?$AAP?$AAy?$AAW?$AAe?$AAa?$AAk?$AAr?$AAe?$AAf?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AAR?$AAe?$AAf?$AA?$CI?$AAr?$AAe?$AAf?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'W', 00H, 'e', 00H, 'a', 00H, 'k', 00H, 'r', 00H
	DB	'e', 00H, 'f', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, 'R', 00H, 'e', 00H, 'f', 00H, '(', 00H, 'r', 00H
	DB	'e', 00H, 'f', 00H, ')', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1DC@CGHPHOHK@?$AAP?$AAy?$AAL?$AAi?$AAs?$AAt?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAu?$AAb?$AAc?$AAl?$AAa?$AAs?$AAs?$AAe?$AAs?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DC@CGHPHOHK@?$AAP?$AAy?$AAL?$AAi?$AAs?$AAt?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAu?$AAb?$AAc?$AAl?$AAa?$AAs?$AAs?$AAe?$AAs?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'L', 00H, 'i', 00H, 's', 00H, 't', 00H, '_', 00H
	DB	'C', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, '(', 00H, 's'
	DB	00H, 'u', 00H, 'b', 00H, 'c', 00H, 'l', 00H, 'a', 00H, 's', 00H
	DB	's', 00H, 'e', 00H, 's', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DA@GJLLIOPA@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAt?$AAy?$AAp?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
CONST	SEGMENT
??_C@_1DA@GJLLIOPA@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAt?$AAy?$AAp?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@ DB '.'
	DB	00H, '.', 00H, '\', 00H, 'O', 00H, 'b', 00H, 'j', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 's', 00H, '\', 00H, 't', 00H, 'y', 00H, 'p'
	DB	00H, 'e', 00H, 'o', 00H, 'b', 00H, 'j', 00H, 'e', 00H, 'c', 00H
	DB	't', 00H, '.', 00H, 'c', 00H, 00H, 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT mro_subclasses
_TEXT	SEGMENT
n$ = 32
i$ = 40
subclass$ = 48
old_mro$ = 56
ref$ = 64
subclasses$ = 72
tuple$20778 = 80
tv95 = 88
type$ = 112
temp$ = 120
mro_subclasses PROC					; COMDAT

; 443  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 444  :     PyTypeObject *subclass;
; 445  :     PyObject *ref, *subclasses, *old_mro;
; 446  :     Py_ssize_t i, n;
; 447  : 
; 448  :     subclasses = type->tp_subclasses;

  0000e	48 8b 44 24 70	 mov	 rax, QWORD PTR type$[rsp]
  00013	48 8b 80 c0 01
	00 00		 mov	 rax, QWORD PTR [rax+448]
  0001a	48 89 44 24 48	 mov	 QWORD PTR subclasses$[rsp], rax

; 449  :     if (subclasses == NULL)

  0001f	48 83 7c 24 48
	00		 cmp	 QWORD PTR subclasses$[rsp], 0
  00025	75 07		 jne	 SHORT $LN10@mro_subcla

; 450  :         return 0;

  00027	33 c0		 xor	 eax, eax
  00029	e9 19 02 00 00	 jmp	 $LN11@mro_subcla
$LN10@mro_subcla:

; 451  :     assert(PyList_Check(subclasses));

  0002e	48 8b 44 24 48	 mov	 rax, QWORD PTR subclasses$[rsp]
  00033	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00037	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0003d	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  00042	85 c0		 test	 eax, eax
  00044	75 1c		 jne	 SHORT $LN13@mro_subcla
  00046	41 b8 c3 01 00
	00		 mov	 r8d, 451		; 000001c3H
  0004c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@GJLLIOPA@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAt?$AAy?$AAp?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00053	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DC@CGHPHOHK@?$AAP?$AAy?$AAL?$AAi?$AAs?$AAt?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAu?$AAb?$AAc?$AAl?$AAa?$AAs?$AAs?$AAe?$AAs?$AA?$CJ?$AA?$AA@
  0005a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00060	33 c0		 xor	 eax, eax
$LN13@mro_subcla:

; 452  :     n = PyList_GET_SIZE(subclasses);

  00062	48 8b 44 24 48	 mov	 rax, QWORD PTR subclasses$[rsp]
  00067	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0006b	48 89 44 24 20	 mov	 QWORD PTR n$[rsp], rax

; 453  :     for (i = 0; i < n; i++) {

  00070	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  00079	eb 0d		 jmp	 SHORT $LN9@mro_subcla
$LN8@mro_subcla:
  0007b	48 8b 44 24 28	 mov	 rax, QWORD PTR i$[rsp]
  00080	48 ff c0	 inc	 rax
  00083	48 89 44 24 28	 mov	 QWORD PTR i$[rsp], rax
$LN9@mro_subcla:
  00088	48 8b 44 24 20	 mov	 rax, QWORD PTR n$[rsp]
  0008d	48 39 44 24 28	 cmp	 QWORD PTR i$[rsp], rax
  00092	0f 8d ad 01 00
	00		 jge	 $LN7@mro_subcla

; 454  :         ref = PyList_GET_ITEM(subclasses, i);

  00098	48 8b 44 24 48	 mov	 rax, QWORD PTR subclasses$[rsp]
  0009d	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  000a1	48 8b 4c 24 28	 mov	 rcx, QWORD PTR i$[rsp]
  000a6	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  000aa	48 89 44 24 40	 mov	 QWORD PTR ref$[rsp], rax

; 455  :         assert(PyWeakref_CheckRef(ref));

  000af	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_RefType
  000b6	48 8b 4c 24 40	 mov	 rcx, QWORD PTR ref$[rsp]
  000bb	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  000bf	74 35		 je	 SHORT $LN14@mro_subcla
  000c1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_PyWeakref_RefType
  000c8	48 8b 44 24 40	 mov	 rax, QWORD PTR ref$[rsp]
  000cd	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  000d1	e8 00 00 00 00	 call	 PyType_IsSubtype
  000d6	85 c0		 test	 eax, eax
  000d8	75 1c		 jne	 SHORT $LN14@mro_subcla
  000da	41 b8 c7 01 00
	00		 mov	 r8d, 455		; 000001c7H
  000e0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@GJLLIOPA@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAt?$AAy?$AAp?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  000e7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@IHEHGJMP@?$AAP?$AAy?$AAW?$AAe?$AAa?$AAk?$AAr?$AAe?$AAf?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AAR?$AAe?$AAf?$AA?$CI?$AAr?$AAe?$AAf?$AA?$CJ?$AA?$AA@
  000ee	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000f4	33 c0		 xor	 eax, eax
$LN14@mro_subcla:

; 456  :         subclass = (PyTypeObject *)PyWeakref_GET_OBJECT(ref);

  000f6	48 8b 44 24 40	 mov	 rax, QWORD PTR ref$[rsp]
  000fb	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000ff	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00104	7e 10		 jle	 SHORT $LN15@mro_subcla
  00106	48 8b 44 24 40	 mov	 rax, QWORD PTR ref$[rsp]
  0010b	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0010f	48 89 44 24 58	 mov	 QWORD PTR tv95[rsp], rax
  00114	eb 0c		 jmp	 SHORT $LN16@mro_subcla
$LN15@mro_subcla:
  00116	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0011d	48 89 44 24 58	 mov	 QWORD PTR tv95[rsp], rax
$LN16@mro_subcla:
  00122	48 8b 44 24 58	 mov	 rax, QWORD PTR tv95[rsp]
  00127	48 89 44 24 30	 mov	 QWORD PTR subclass$[rsp], rax

; 457  :         assert(subclass != NULL);

  0012c	48 83 7c 24 30
	00		 cmp	 QWORD PTR subclass$[rsp], 0
  00132	75 1c		 jne	 SHORT $LN17@mro_subcla
  00134	41 b8 c9 01 00
	00		 mov	 r8d, 457		; 000001c9H
  0013a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@GJLLIOPA@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAt?$AAy?$AAp?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00141	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CC@CKFLIHGE@?$AAs?$AAu?$AAb?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
  00148	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0014e	33 c0		 xor	 eax, eax
$LN17@mro_subcla:

; 458  :         if ((PyObject *)subclass == Py_None)

  00150	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00157	48 39 44 24 30	 cmp	 QWORD PTR subclass$[rsp], rax
  0015c	75 05		 jne	 SHORT $LN6@mro_subcla

; 459  :             continue;

  0015e	e9 18 ff ff ff	 jmp	 $LN8@mro_subcla
$LN6@mro_subcla:

; 460  :         assert(PyType_Check(subclass));

  00163	48 8b 44 24 30	 mov	 rax, QWORD PTR subclass$[rsp]
  00168	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0016c	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00172	25 00 00 00 80	 and	 eax, -2147483648	; ffffffff80000000H
  00177	85 c0		 test	 eax, eax
  00179	75 1c		 jne	 SHORT $LN18@mro_subcla
  0017b	41 b8 cc 01 00
	00		 mov	 r8d, 460		; 000001ccH
  00181	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@GJLLIOPA@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAt?$AAy?$AAp?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00188	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@DGKDGEJI@?$AAP?$AAy?$AAT?$AAy?$AAp?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAu?$AAb?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?$CJ?$AA?$AA@
  0018f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00195	33 c0		 xor	 eax, eax
$LN18@mro_subcla:

; 461  :         old_mro = subclass->tp_mro;

  00197	48 8b 44 24 30	 mov	 rax, QWORD PTR subclass$[rsp]
  0019c	48 8b 80 b0 01
	00 00		 mov	 rax, QWORD PTR [rax+432]
  001a3	48 89 44 24 38	 mov	 QWORD PTR old_mro$[rsp], rax

; 462  :         if (mro_internal(subclass) < 0) {

  001a8	48 8b 4c 24 30	 mov	 rcx, QWORD PTR subclass$[rsp]
  001ad	e8 00 00 00 00	 call	 mro_internal
  001b2	85 c0		 test	 eax, eax
  001b4	7d 1a		 jge	 SHORT $LN5@mro_subcla

; 463  :             subclass->tp_mro = old_mro;

  001b6	48 8b 44 24 30	 mov	 rax, QWORD PTR subclass$[rsp]
  001bb	48 8b 4c 24 38	 mov	 rcx, QWORD PTR old_mro$[rsp]
  001c0	48 89 88 b0 01
	00 00		 mov	 QWORD PTR [rax+432], rcx

; 464  :             return -1;

  001c7	b8 ff ff ff ff	 mov	 eax, -1
  001cc	eb 79		 jmp	 SHORT $LN11@mro_subcla

; 465  :         }
; 466  :         else {

  001ce	eb 56		 jmp	 SHORT $LN4@mro_subcla
$LN5@mro_subcla:

; 467  :             PyObject* tuple;
; 468  :             tuple = PyTuple_Pack(2, subclass, old_mro);

  001d0	4c 8b 44 24 38	 mov	 r8, QWORD PTR old_mro$[rsp]
  001d5	48 8b 54 24 30	 mov	 rdx, QWORD PTR subclass$[rsp]
  001da	b9 02 00 00 00	 mov	 ecx, 2
  001df	e8 00 00 00 00	 call	 PyTuple_Pack
  001e4	48 89 44 24 50	 mov	 QWORD PTR tuple$20778[rsp], rax

; 469  :             Py_DECREF(old_mro);

  001e9	48 8b 4c 24 38	 mov	 rcx, QWORD PTR old_mro$[rsp]
  001ee	e8 00 00 00 00	 call	 _Py_DecRef

; 470  :             if (!tuple)

  001f3	48 83 7c 24 50
	00		 cmp	 QWORD PTR tuple$20778[rsp], 0
  001f9	75 07		 jne	 SHORT $LN3@mro_subcla

; 471  :                 return -1;

  001fb	b8 ff ff ff ff	 mov	 eax, -1
  00200	eb 45		 jmp	 SHORT $LN11@mro_subcla
$LN3@mro_subcla:

; 472  :             if (PyList_Append(temp, tuple) < 0)

  00202	48 8b 54 24 50	 mov	 rdx, QWORD PTR tuple$20778[rsp]
  00207	48 8b 4c 24 78	 mov	 rcx, QWORD PTR temp$[rsp]
  0020c	e8 00 00 00 00	 call	 PyList_Append
  00211	85 c0		 test	 eax, eax
  00213	7d 07		 jge	 SHORT $LN2@mro_subcla

; 473  :                 return -1;

  00215	b8 ff ff ff ff	 mov	 eax, -1
  0021a	eb 2b		 jmp	 SHORT $LN11@mro_subcla
$LN2@mro_subcla:

; 474  :             Py_DECREF(tuple);

  0021c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tuple$20778[rsp]
  00221	e8 00 00 00 00	 call	 _Py_DecRef
$LN4@mro_subcla:

; 475  :         }
; 476  :         if (mro_subclasses(subclass, temp) < 0)

  00226	48 8b 54 24 78	 mov	 rdx, QWORD PTR temp$[rsp]
  0022b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR subclass$[rsp]
  00230	e8 00 00 00 00	 call	 mro_subclasses
  00235	85 c0		 test	 eax, eax
  00237	7d 07		 jge	 SHORT $LN1@mro_subcla

; 477  :             return -1;

  00239	b8 ff ff ff ff	 mov	 eax, -1
  0023e	eb 07		 jmp	 SHORT $LN11@mro_subcla
$LN1@mro_subcla:

; 478  :     }

  00240	e9 36 fe ff ff	 jmp	 $LN8@mro_subcla
$LN7@mro_subcla:

; 479  :     return 0;

  00245	33 c0		 xor	 eax, eax
$LN11@mro_subcla:

; 480  : }

  00247	48 83 c4 68	 add	 rsp, 104		; 00000068H
  0024b	c3		 ret	 0
mro_subclasses ENDP
_TEXT	ENDS
EXTRN	PyDictProxy_New:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$type_dict DD imagerel type_dict
	DD	imagerel type_dict+72
	DD	imagerel $unwind$type_dict
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$type_dict DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT type_dict
_TEXT	SEGMENT
type$ = 48
context$ = 56
type_dict PROC						; COMDAT

; 613  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 614  :     if (type->tp_dict == NULL) {

  0000e	48 8b 44 24 30	 mov	 rax, QWORD PTR type$[rsp]
  00013	48 83 b8 60 01
	00 00 00	 cmp	 QWORD PTR [rax+352], 0
  0001b	75 15		 jne	 SHORT $LN1@type_dict

; 615  :         Py_INCREF(Py_None);

  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00024	e8 00 00 00 00	 call	 _Py_IncRef

; 616  :         return Py_None;

  00029	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00030	eb 11		 jmp	 SHORT $LN2@type_dict
$LN1@type_dict:

; 617  :     }
; 618  :     return PyDictProxy_New(type->tp_dict);

  00032	48 8b 44 24 30	 mov	 rax, QWORD PTR type$[rsp]
  00037	48 8b 88 60 01
	00 00		 mov	 rcx, QWORD PTR [rax+352]
  0003e	e8 00 00 00 00	 call	 PyDictProxy_New
$LN2@type_dict:

; 619  : }

  00043	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00047	c3		 ret	 0
type_dict ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$type_get_doc DD imagerel type_get_doc
	DD	imagerel type_get_doc+227
	DD	imagerel $unwind$type_get_doc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$type_get_doc DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT type_get_doc
_TEXT	SEGMENT
result$ = 32
type$ = 64
context$ = 72
type_get_doc PROC					; COMDAT

; 623  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 624  :     PyObject *result;
; 625  :     if (!(type->tp_flags & Py_TPFLAGS_HEAPTYPE) && type->tp_doc != NULL)

  0000e	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  00013	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00019	25 00 02 00 00	 and	 eax, 512		; 00000200H
  0001e	85 c0		 test	 eax, eax
  00020	75 25		 jne	 SHORT $LN5@type_get_d
  00022	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  00027	48 83 b8 08 01
	00 00 00	 cmp	 QWORD PTR [rax+264], 0
  0002f	74 16		 je	 SHORT $LN5@type_get_d

; 626  :         return PyUnicode_FromString(type->tp_doc);

  00031	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  00036	48 8b 88 08 01
	00 00		 mov	 rcx, QWORD PTR [rax+264]
  0003d	e8 00 00 00 00	 call	 PyUnicode_FromString
  00042	e9 97 00 00 00	 jmp	 $LN6@type_get_d
$LN5@type_get_d:

; 627  :     result = _PyDict_GetItemId(type->tp_dict, &PyId___doc__);

  00047	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId___doc__
  0004c	8b c0		 mov	 eax, eax
  0004e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00054	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0005d	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00061	48 8b d0	 mov	 rdx, rax
  00064	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  00069	48 8b 88 60 01
	00 00		 mov	 rcx, QWORD PTR [rax+352]
  00070	e8 00 00 00 00	 call	 _PyDict_GetItemId
  00075	48 89 44 24 20	 mov	 QWORD PTR result$[rsp], rax

; 628  :     if (result == NULL) {

  0007a	48 83 7c 24 20
	00		 cmp	 QWORD PTR result$[rsp], 0
  00080	75 18		 jne	 SHORT $LN4@type_get_d

; 629  :         result = Py_None;

  00082	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00089	48 89 44 24 20	 mov	 QWORD PTR result$[rsp], rax

; 630  :         Py_INCREF(result);

  0008e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR result$[rsp]
  00093	e8 00 00 00 00	 call	 _Py_IncRef
  00098	eb 3f		 jmp	 SHORT $LN3@type_get_d
$LN4@type_get_d:

; 631  :     }
; 632  :     else if (Py_TYPE(result)->tp_descr_get) {

  0009a	48 8b 44 24 20	 mov	 rax, QWORD PTR result$[rsp]
  0009f	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000a3	48 83 b8 68 01
	00 00 00	 cmp	 QWORD PTR [rax+360], 0
  000ab	74 22		 je	 SHORT $LN2@type_get_d

; 633  :         result = Py_TYPE(result)->tp_descr_get(result, NULL,
; 634  :                                                (PyObject *)type);

  000ad	48 8b 44 24 20	 mov	 rax, QWORD PTR result$[rsp]
  000b2	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000b6	4c 8b 44 24 40	 mov	 r8, QWORD PTR type$[rsp]
  000bb	33 d2		 xor	 edx, edx
  000bd	48 8b 4c 24 20	 mov	 rcx, QWORD PTR result$[rsp]
  000c2	ff 90 68 01 00
	00		 call	 QWORD PTR [rax+360]
  000c8	48 89 44 24 20	 mov	 QWORD PTR result$[rsp], rax

; 635  :     }
; 636  :     else {

  000cd	eb 0a		 jmp	 SHORT $LN1@type_get_d
$LN2@type_get_d:

; 637  :         Py_INCREF(result);

  000cf	48 8b 4c 24 20	 mov	 rcx, QWORD PTR result$[rsp]
  000d4	e8 00 00 00 00	 call	 _Py_IncRef
$LN1@type_get_d:
$LN3@type_get_d:

; 638  :     }
; 639  :     return result;

  000d9	48 8b 44 24 20	 mov	 rax, QWORD PTR result$[rsp]
$LN6@type_get_d:

; 640  : }

  000de	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000e2	c3		 ret	 0
type_get_doc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@DPJMDBLL@type_set_doc?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$type_set_doc DD imagerel type_set_doc
	DD	imagerel type_set_doc+155
	DD	imagerel $unwind$type_set_doc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$type_set_doc DD 011301H
	DD	04213H
xdata	ENDS
;	COMDAT ??_C@_0N@DPJMDBLL@type_set_doc?$AA@
CONST	SEGMENT
??_C@_0N@DPJMDBLL@type_set_doc?$AA@ DB 'type_set_doc', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT type_set_doc
_TEXT	SEGMENT
type$ = 48
value$ = 56
context$ = 64
type_set_doc PROC					; COMDAT

; 644  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 645  :     Py_GUARD

  00013	e8 00 00 00 00	 call	 _Py_PXCTX
  00018	85 c0		 test	 eax, eax
  0001a	74 1c		 je	 SHORT $LN2@type_set_d
  0001c	45 33 c9	 xor	 r9d, r9d
  0001f	41 b8 85 02 00
	00		 mov	 r8d, 645		; 00000285H
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@PKBBAMFA@?4?4?2Objects?2typeobject?4c?$AA@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@DPJMDBLL@type_set_doc?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN2@type_set_d:

; 646  :     if (!check_set_special_type_attr(type, value, "__doc__"))

  00038	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_07DIBBIFIJ@__doc__?$AA@
  0003f	48 8b 54 24 38	 mov	 rdx, QWORD PTR value$[rsp]
  00044	48 8b 4c 24 30	 mov	 rcx, QWORD PTR type$[rsp]
  00049	e8 00 00 00 00	 call	 check_set_special_type_attr
  0004e	85 c0		 test	 eax, eax
  00050	75 07		 jne	 SHORT $LN1@type_set_d

; 647  :         return -1;

  00052	b8 ff ff ff ff	 mov	 eax, -1
  00057	eb 3d		 jmp	 SHORT $LN3@type_set_d
$LN1@type_set_d:

; 648  :     PyType_Modified(type);

  00059	48 8b 4c 24 30	 mov	 rcx, QWORD PTR type$[rsp]
  0005e	e8 00 00 00 00	 call	 PyType_Modified

; 649  :     return _PyDict_SetItemId(type->tp_dict, &PyId___doc__, value);

  00063	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId___doc__
  00068	8b c0		 mov	 eax, eax
  0006a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00070	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00079	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0007d	4c 8b 44 24 38	 mov	 r8, QWORD PTR value$[rsp]
  00082	48 8b d0	 mov	 rdx, rax
  00085	48 8b 44 24 30	 mov	 rax, QWORD PTR type$[rsp]
  0008a	48 8b 88 60 01
	00 00		 mov	 rcx, QWORD PTR [rax+352]
  00091	e8 00 00 00 00	 call	 _PyDict_SetItemId
$LN3@type_set_d:

; 650  : }

  00096	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0009a	c3		 ret	 0
type_set_doc ENDP
_TEXT	ENDS
EXTRN	_Py_TrueStruct:BYTE
EXTRN	_Py_FalseStruct:BYTE
EXTRN	_PyObject_RealIsInstance:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$type___instancecheck__ DD imagerel type___instancecheck__
	DD	imagerel type___instancecheck__+98
	DD	imagerel $unwind$type___instancecheck__
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$type___instancecheck__ DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT type___instancecheck__
_TEXT	SEGMENT
tv67 = 32
type$ = 64
inst$ = 72
type___instancecheck__ PROC				; COMDAT

; 654  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 655  :     switch (_PyObject_RealIsInstance(inst, type)) {

  0000e	48 8b 54 24 40	 mov	 rdx, QWORD PTR type$[rsp]
  00013	48 8b 4c 24 48	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 _PyObject_RealIsInstance
  0001d	89 44 24 20	 mov	 DWORD PTR tv67[rsp], eax
  00021	83 7c 24 20 ff	 cmp	 DWORD PTR tv67[rsp], -1
  00026	74 09		 je	 SHORT $LN3@type___ins
  00028	83 7c 24 20 00	 cmp	 DWORD PTR tv67[rsp], 0
  0002d	74 06		 je	 SHORT $LN2@type___ins
  0002f	eb 19		 jmp	 SHORT $LN1@type___ins
$LN3@type___ins:

; 656  :     case -1:
; 657  :         return NULL;

  00031	33 c0		 xor	 eax, eax
  00033	eb 28		 jmp	 SHORT $LN6@type___ins
$LN2@type___ins:

; 658  :     case 0:
; 659  :         Py_RETURN_FALSE;

  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_FalseStruct
  0003c	e8 00 00 00 00	 call	 _Py_IncRef
  00041	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct
  00048	eb 13		 jmp	 SHORT $LN6@type___ins
$LN1@type___ins:

; 660  :     default:
; 661  :         Py_RETURN_TRUE;

  0004a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_TrueStruct
  00051	e8 00 00 00 00	 call	 _Py_IncRef
  00056	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
$LN6@type___ins:

; 662  :     }
; 663  : }

  0005d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00061	c3		 ret	 0
type___instancecheck__ ENDP
_TEXT	ENDS
EXTRN	_PyObject_RealIsSubclass:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$type___subclasscheck__ DD imagerel type___subclasscheck__
	DD	imagerel type___subclasscheck__+98
	DD	imagerel $unwind$type___subclasscheck__
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$type___subclasscheck__ DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT type___subclasscheck__
_TEXT	SEGMENT
tv67 = 32
type$ = 64
inst$ = 72
type___subclasscheck__ PROC				; COMDAT

; 668  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 669  :     switch (_PyObject_RealIsSubclass(inst, type)) {

  0000e	48 8b 54 24 40	 mov	 rdx, QWORD PTR type$[rsp]
  00013	48 8b 4c 24 48	 mov	 rcx, QWORD PTR inst$[rsp]
  00018	e8 00 00 00 00	 call	 _PyObject_RealIsSubclass
  0001d	89 44 24 20	 mov	 DWORD PTR tv67[rsp], eax
  00021	83 7c 24 20 ff	 cmp	 DWORD PTR tv67[rsp], -1
  00026	74 09		 je	 SHORT $LN3@type___sub
  00028	83 7c 24 20 00	 cmp	 DWORD PTR tv67[rsp], 0
  0002d	74 06		 je	 SHORT $LN2@type___sub
  0002f	eb 19		 jmp	 SHORT $LN1@type___sub
$LN3@type___sub:

; 670  :     case -1:
; 671  :         return NULL;

  00031	33 c0		 xor	 eax, eax
  00033	eb 28		 jmp	 SHORT $LN6@type___sub
$LN2@type___sub:

; 672  :     case 0:
; 673  :         Py_RETURN_FALSE;

  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_FalseStruct
  0003c	e8 00 00 00 00	 call	 _Py_IncRef
  00041	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct
  00048	eb 13		 jmp	 SHORT $LN6@type___sub
$LN1@type___sub:

; 674  :     default:
; 675  :         Py_RETURN_TRUE;

  0004a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_TrueStruct
  00051	e8 00 00 00 00	 call	 _Py_IncRef
  00056	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
$LN6@type___sub:

; 676  :     }
; 677  : }

  0005d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00061	c3		 ret	 0
type___subclasscheck__ ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@GEOGLJIP@?$DMclass?5?8?$CFs?8?$DO?$AA@	; `string'
PUBLIC	??_C@_0BA@IKEBEBBA@?$DMclass?5?8?$CFU?4?$CFU?8?$DO?$AA@ ; `string'
EXTRN	PyUnicode_FromFormat:PROC
EXTRN	PyUnicode_CompareWithASCIIString:PROC
EXTRN	PyErr_Clear:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$type_repr DD imagerel type_repr
	DD	imagerel type_repr+265
	DD	imagerel $unwind$type_repr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$type_repr DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0N@GEOGLJIP@?$DMclass?5?8?$CFs?8?$DO?$AA@
CONST	SEGMENT
??_C@_0N@GEOGLJIP@?$DMclass?5?8?$CFs?8?$DO?$AA@ DB '<class ''%s''>', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@IKEBEBBA@?$DMclass?5?8?$CFU?4?$CFU?8?$DO?$AA@
CONST	SEGMENT
??_C@_0BA@IKEBEBBA@?$DMclass?5?8?$CFU?4?$CFU?8?$DO?$AA@ DB '<class ''%U.%'
	DB	'U''>', 00H					; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT type_repr
_TEXT	SEGMENT
name$ = 32
rtn$ = 40
mod$ = 48
type$ = 80
type_repr PROC						; COMDAT

; 694  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 695  :     PyObject *mod, *name, *rtn;
; 696  : 
; 697  :     mod = type_module(type, NULL);

  00009	33 d2		 xor	 edx, edx
  0000b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR type$[rsp]
  00010	e8 00 00 00 00	 call	 type_module
  00015	48 89 44 24 30	 mov	 QWORD PTR mod$[rsp], rax

; 698  :     if (mod == NULL)

  0001a	48 83 7c 24 30
	00		 cmp	 QWORD PTR mod$[rsp], 0
  00020	75 07		 jne	 SHORT $LN14@type_repr

; 699  :         PyErr_Clear();

  00022	e8 00 00 00 00	 call	 PyErr_Clear
  00027	eb 2b		 jmp	 SHORT $LN13@type_repr
$LN14@type_repr:

; 700  :     else if (!PyUnicode_Check(mod)) {

  00029	48 8b 44 24 30	 mov	 rax, QWORD PTR mod$[rsp]
  0002e	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00032	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00038	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0003d	85 c0		 test	 eax, eax
  0003f	75 13		 jne	 SHORT $LN12@type_repr

; 701  :         Py_DECREF(mod);

  00041	48 8b 4c 24 30	 mov	 rcx, QWORD PTR mod$[rsp]
  00046	e8 00 00 00 00	 call	 _Py_DecRef

; 702  :         mod = NULL;

  0004b	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR mod$[rsp], 0
$LN12@type_repr:
$LN13@type_repr:

; 703  :     }
; 704  :     name = type_qualname(type, NULL);

  00054	33 d2		 xor	 edx, edx
  00056	48 8b 4c 24 50	 mov	 rcx, QWORD PTR type$[rsp]
  0005b	e8 00 00 00 00	 call	 type_qualname
  00060	48 89 44 24 20	 mov	 QWORD PTR name$[rsp], rax

; 705  :     if (name == NULL) {

  00065	48 83 7c 24 20
	00		 cmp	 QWORD PTR name$[rsp], 0
  0006b	75 1c		 jne	 SHORT $LN11@type_repr
$LN10@type_repr:

; 706  :         Py_XDECREF(mod);

  0006d	48 83 7c 24 30
	00		 cmp	 QWORD PTR mod$[rsp], 0
  00073	74 0a		 je	 SHORT $LN7@type_repr
  00075	48 8b 4c 24 30	 mov	 rcx, QWORD PTR mod$[rsp]
  0007a	e8 00 00 00 00	 call	 _Py_DecRef
$LN7@type_repr:
  0007f	33 c0		 xor	 eax, eax
  00081	85 c0		 test	 eax, eax
  00083	75 e8		 jne	 SHORT $LN10@type_repr

; 707  :         return NULL;

  00085	33 c0		 xor	 eax, eax
  00087	eb 7b		 jmp	 SHORT $LN15@type_repr
$LN11@type_repr:

; 708  :     }
; 709  : 
; 710  :     if (mod != NULL && PyUnicode_CompareWithASCIIString(mod, "builtins"))

  00089	48 83 7c 24 30
	00		 cmp	 QWORD PTR mod$[rsp], 0
  0008f	74 32		 je	 SHORT $LN6@type_repr
  00091	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08OCOMCJAJ@builtins?$AA@
  00098	48 8b 4c 24 30	 mov	 rcx, QWORD PTR mod$[rsp]
  0009d	e8 00 00 00 00	 call	 PyUnicode_CompareWithASCIIString
  000a2	85 c0		 test	 eax, eax
  000a4	74 1d		 je	 SHORT $LN6@type_repr

; 711  :         rtn = PyUnicode_FromFormat("<class '%U.%U'>", mod, name);

  000a6	4c 8b 44 24 20	 mov	 r8, QWORD PTR name$[rsp]
  000ab	48 8b 54 24 30	 mov	 rdx, QWORD PTR mod$[rsp]
  000b0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@IKEBEBBA@?$DMclass?5?8?$CFU?4?$CFU?8?$DO?$AA@
  000b7	e8 00 00 00 00	 call	 PyUnicode_FromFormat
  000bc	48 89 44 24 28	 mov	 QWORD PTR rtn$[rsp], rax

; 712  :     else

  000c1	eb 1a		 jmp	 SHORT $LN5@type_repr
$LN6@type_repr:

; 713  :         rtn = PyUnicode_FromFormat("<class '%s'>", type->tp_name);

  000c3	48 8b 44 24 50	 mov	 rax, QWORD PTR type$[rsp]
  000c8	48 8b 50 70	 mov	 rdx, QWORD PTR [rax+112]
  000cc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@GEOGLJIP@?$DMclass?5?8?$CFs?8?$DO?$AA@
  000d3	e8 00 00 00 00	 call	 PyUnicode_FromFormat
  000d8	48 89 44 24 28	 mov	 QWORD PTR rtn$[rsp], rax
$LN5@type_repr:
$LN4@type_repr:

; 714  : 
; 715  :     Py_XDECREF(mod);

  000dd	48 83 7c 24 30
	00		 cmp	 QWORD PTR mod$[rsp], 0
  000e3	74 0a		 je	 SHORT $LN1@type_repr
  000e5	48 8b 4c 24 30	 mov	 rcx, QWORD PTR mod$[rsp]
  000ea	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@type_repr:
  000ef	33 c0		 xor	 eax, eax
  000f1	85 c0		 test	 eax, eax
  000f3	75 e8		 jne	 SHORT $LN4@type_repr

; 716  :     Py_DECREF(name);

  000f5	48 8b 4c 24 20	 mov	 rcx, QWORD PTR name$[rsp]
  000fa	e8 00 00 00 00	 call	 _Py_DecRef

; 717  :     return rtn;

  000ff	48 8b 44 24 28	 mov	 rax, QWORD PTR rtn$[rsp]
$LN15@type_repr:

; 718  : }

  00104	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00108	c3		 ret	 0
type_repr ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CB@DBBFJFOD@cannot?5create?5?8?$CF?4100s?8?5instances@ ; `string'
EXTRN	PyDict_Size:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$type_call DD imagerel type_call
	DD	imagerel type_call+334
	DD	imagerel $unwind$type_call
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$type_call DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT ??_C@_0CB@DBBFJFOD@cannot?5create?5?8?$CF?4100s?8?5instances@
CONST	SEGMENT
??_C@_0CB@DBBFJFOD@cannot?5create?5?8?$CF?4100s?8?5instances@ DB 'cannot '
	DB	'create ''%.100s'' instances', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT type_call
_TEXT	SEGMENT
obj$ = 32
type$ = 64
args$ = 72
kwds$ = 80
type_call PROC						; COMDAT

; 722  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 723  :     PyObject *obj;
; 724  : 
; 725  :     if (type->tp_new == NULL) {

  00013	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  00018	48 83 b8 90 01
	00 00 00	 cmp	 QWORD PTR [rax+400], 0
  00020	75 23		 jne	 SHORT $LN6@type_call

; 726  :         PyErr_Format(PyExc_TypeError,
; 727  :                      "cannot create '%.100s' instances",
; 728  :                      type->tp_name);

  00022	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  00027	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  0002b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CB@DBBFJFOD@cannot?5create?5?8?$CF?4100s?8?5instances@
  00032	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00039	e8 00 00 00 00	 call	 PyErr_Format

; 729  :         return NULL;

  0003e	33 c0		 xor	 eax, eax
  00040	e9 04 01 00 00	 jmp	 $LN7@type_call
$LN6@type_call:

; 730  :     }
; 731  : 
; 732  :     obj = type->tp_new(type, args, kwds);

  00045	4c 8b 44 24 50	 mov	 r8, QWORD PTR kwds$[rsp]
  0004a	48 8b 54 24 48	 mov	 rdx, QWORD PTR args$[rsp]
  0004f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR type$[rsp]
  00054	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  00059	ff 90 90 01 00
	00		 call	 QWORD PTR [rax+400]
  0005f	48 89 44 24 20	 mov	 QWORD PTR obj$[rsp], rax

; 733  :     if (obj != NULL) {

  00064	48 83 7c 24 20
	00		 cmp	 QWORD PTR obj$[rsp], 0
  0006a	0f 84 d4 00 00
	00		 je	 $LN5@type_call

; 734  :         /* Ugly exception: when the call was type(something),
; 735  :            don't call tp_init on the result. */
; 736  :         if (type == &PyType_Type &&
; 737  :             PyTuple_Check(args) && PyTuple_GET_SIZE(args) == 1 &&
; 738  :             (kwds == NULL ||
; 739  :              (PyDict_Check(kwds) && PyDict_Size(kwds) == 0)))

  00070	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyType_Type
  00077	48 39 44 24 40	 cmp	 QWORD PTR type$[rsp], rax
  0007c	75 5a		 jne	 SHORT $LN4@type_call
  0007e	48 8b 44 24 48	 mov	 rax, QWORD PTR args$[rsp]
  00083	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00087	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0008d	25 00 00 00 04	 and	 eax, 67108864		; 04000000H
  00092	85 c0		 test	 eax, eax
  00094	74 42		 je	 SHORT $LN4@type_call
  00096	48 8b 44 24 48	 mov	 rax, QWORD PTR args$[rsp]
  0009b	48 83 78 60 01	 cmp	 QWORD PTR [rax+96], 1
  000a0	75 36		 jne	 SHORT $LN4@type_call
  000a2	48 83 7c 24 50
	00		 cmp	 QWORD PTR kwds$[rsp], 0
  000a8	74 27		 je	 SHORT $LN3@type_call
  000aa	48 8b 44 24 50	 mov	 rax, QWORD PTR kwds$[rsp]
  000af	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000b3	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000b9	25 00 00 00 20	 and	 eax, 536870912		; 20000000H
  000be	85 c0		 test	 eax, eax
  000c0	74 16		 je	 SHORT $LN4@type_call
  000c2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR kwds$[rsp]
  000c7	e8 00 00 00 00	 call	 PyDict_Size
  000cc	48 85 c0	 test	 rax, rax
  000cf	75 07		 jne	 SHORT $LN4@type_call
$LN3@type_call:

; 740  :             return obj;

  000d1	48 8b 44 24 20	 mov	 rax, QWORD PTR obj$[rsp]
  000d6	eb 71		 jmp	 SHORT $LN7@type_call
$LN4@type_call:

; 741  :         /* If the returned object is not an instance of type,
; 742  :            it won't be initialized. */
; 743  :         if (!PyType_IsSubtype(Py_TYPE(obj), type))

  000d8	48 8b 54 24 40	 mov	 rdx, QWORD PTR type$[rsp]
  000dd	48 8b 44 24 20	 mov	 rax, QWORD PTR obj$[rsp]
  000e2	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  000e6	e8 00 00 00 00	 call	 PyType_IsSubtype
  000eb	85 c0		 test	 eax, eax
  000ed	75 07		 jne	 SHORT $LN2@type_call

; 744  :             return obj;

  000ef	48 8b 44 24 20	 mov	 rax, QWORD PTR obj$[rsp]
  000f4	eb 53		 jmp	 SHORT $LN7@type_call
$LN2@type_call:

; 745  :         type = Py_TYPE(obj);

  000f6	48 8b 44 24 20	 mov	 rax, QWORD PTR obj$[rsp]
  000fb	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000ff	48 89 44 24 40	 mov	 QWORD PTR type$[rsp], rax

; 746  :         if (type->tp_init != NULL &&
; 747  :             type->tp_init(obj, args, kwds) < 0) {

  00104	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  00109	48 83 b8 80 01
	00 00 00	 cmp	 QWORD PTR [rax+384], 0
  00111	74 31		 je	 SHORT $LN1@type_call
  00113	4c 8b 44 24 50	 mov	 r8, QWORD PTR kwds$[rsp]
  00118	48 8b 54 24 48	 mov	 rdx, QWORD PTR args$[rsp]
  0011d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR obj$[rsp]
  00122	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  00127	ff 90 80 01 00
	00		 call	 QWORD PTR [rax+384]
  0012d	85 c0		 test	 eax, eax
  0012f	7d 13		 jge	 SHORT $LN1@type_call

; 748  :             Py_DECREF(obj);

  00131	48 8b 4c 24 20	 mov	 rcx, QWORD PTR obj$[rsp]
  00136	e8 00 00 00 00	 call	 _Py_DecRef

; 749  :             obj = NULL;

  0013b	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR obj$[rsp], 0
$LN1@type_call:
$LN5@type_call:

; 750  :         }
; 751  :     }
; 752  :     return obj;

  00144	48 8b 44 24 20	 mov	 rax, QWORD PTR obj$[rsp]
$LN7@type_call:

; 753  : }

  00149	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0014d	c3		 ret	 0
type_call ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@ ; `string'
PUBLIC	??_C@_0BE@MMPMJCHN@PyType_GenericAlloc?$AA@	; `string'
EXTRN	_PyGC_generation0:QWORD
EXTRN	Py_FatalError:PROC
EXTRN	memset:PROC
EXTRN	PyErr_NoMemory:PROC
EXTRN	_PyObject_DebugMalloc:PROC
EXTRN	_PyObject_GC_Malloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyType_GenericAlloc DD imagerel $LN25
	DD	imagerel $LN25+603
	DD	imagerel $unwind$PyType_GenericAlloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyType_GenericAlloc DD 010e01H
	DD	0c20eH
xdata	ENDS
;	COMDAT ??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@
CONST	SEGMENT
??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@ DB 'GC object alread'
	DB	'y tracked', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@MMPMJCHN@PyType_GenericAlloc?$AA@
CONST	SEGMENT
??_C@_0BE@MMPMJCHN@PyType_GenericAlloc?$AA@ DB 'PyType_GenericAlloc', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyType_GenericAlloc
_TEXT	SEGMENT
size$ = 48
obj$ = 56
g$21056 = 64
tv77 = 72
tv75 = 76
tv137 = 80
tv135 = 84
tv154 = 88
type$ = 112
nitems$ = 120
PyType_GenericAlloc PROC				; COMDAT

; 757  : {

$LN25:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 758  :     PyObject *obj;
; 759  :     const size_t size = _PyObject_VAR_SIZE(type, nitems+1);

  0000e	48 8b 44 24 78	 mov	 rax, QWORD PTR nitems$[rsp]
  00013	48 ff c0	 inc	 rax
  00016	48 8b 4c 24 70	 mov	 rcx, QWORD PTR type$[rsp]
  0001b	48 0f af 81 80
	00 00 00	 imul	 rax, QWORD PTR [rcx+128]
  00023	48 8b 4c 24 70	 mov	 rcx, QWORD PTR type$[rsp]
  00028	48 8b 49 78	 mov	 rcx, QWORD PTR [rcx+120]
  0002c	48 8d 44 01 07	 lea	 rax, QWORD PTR [rcx+rax+7]
  00031	48 83 e0 f8	 and	 rax, -8
  00035	48 89 44 24 30	 mov	 QWORD PTR size$[rsp], rax

; 760  :     /* note that we need to add one, for the sentinel */
; 761  : 
; 762  :     if (PyType_IS_GC(type))

  0003a	e8 00 00 00 00	 call	 _Py_PXCTX
  0003f	85 c0		 test	 eax, eax
  00041	74 0a		 je	 SHORT $LN17@PyType_Gen
  00043	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv77[rsp], 0
  0004b	eb 2e		 jmp	 SHORT $LN18@PyType_Gen
$LN17@PyType_Gen:
  0004d	48 8b 44 24 70	 mov	 rax, QWORD PTR type$[rsp]
  00052	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00058	25 00 40 00 00	 and	 eax, 16384		; 00004000H
  0005d	85 c0		 test	 eax, eax
  0005f	74 0a		 je	 SHORT $LN15@PyType_Gen
  00061	c7 44 24 4c 01
	00 00 00	 mov	 DWORD PTR tv75[rsp], 1
  00069	eb 08		 jmp	 SHORT $LN16@PyType_Gen
$LN15@PyType_Gen:
  0006b	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR tv75[rsp], 0
$LN16@PyType_Gen:
  00073	8b 44 24 4c	 mov	 eax, DWORD PTR tv75[rsp]
  00077	89 44 24 48	 mov	 DWORD PTR tv77[rsp], eax
$LN18@PyType_Gen:
  0007b	83 7c 24 48 00	 cmp	 DWORD PTR tv77[rsp], 0
  00080	74 11		 je	 SHORT $LN12@PyType_Gen

; 763  :         obj = _PyObject_GC_Malloc(size);

  00082	48 8b 4c 24 30	 mov	 rcx, QWORD PTR size$[rsp]
  00087	e8 00 00 00 00	 call	 _PyObject_GC_Malloc
  0008c	48 89 44 24 38	 mov	 QWORD PTR obj$[rsp], rax

; 764  :     else

  00091	eb 0f		 jmp	 SHORT $LN11@PyType_Gen
$LN12@PyType_Gen:

; 765  :         obj = (PyObject *)PyObject_MALLOC(size);

  00093	48 8b 4c 24 30	 mov	 rcx, QWORD PTR size$[rsp]
  00098	e8 00 00 00 00	 call	 _PyObject_DebugMalloc
  0009d	48 89 44 24 38	 mov	 QWORD PTR obj$[rsp], rax
$LN11@PyType_Gen:

; 766  : 
; 767  :     if (obj == NULL)

  000a2	48 83 7c 24 38
	00		 cmp	 QWORD PTR obj$[rsp], 0
  000a8	75 0a		 jne	 SHORT $LN10@PyType_Gen

; 768  :         return PyErr_NoMemory();

  000aa	e8 00 00 00 00	 call	 PyErr_NoMemory
  000af	e9 a2 01 00 00	 jmp	 $LN13@PyType_Gen
$LN10@PyType_Gen:

; 769  : 
; 770  :     memset(obj, '\0', size);

  000b4	4c 8b 44 24 30	 mov	 r8, QWORD PTR size$[rsp]
  000b9	33 d2		 xor	 edx, edx
  000bb	48 8b 4c 24 38	 mov	 rcx, QWORD PTR obj$[rsp]
  000c0	e8 00 00 00 00	 call	 memset

; 771  : 
; 772  :     if (type->tp_flags & Py_TPFLAGS_HEAPTYPE)

  000c5	48 8b 44 24 70	 mov	 rax, QWORD PTR type$[rsp]
  000ca	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000d0	25 00 02 00 00	 and	 eax, 512		; 00000200H
  000d5	85 c0		 test	 eax, eax
  000d7	74 0a		 je	 SHORT $LN9@PyType_Gen

; 773  :         Py_INCREF(type);

  000d9	48 8b 4c 24 70	 mov	 rcx, QWORD PTR type$[rsp]
  000de	e8 00 00 00 00	 call	 _Py_IncRef
$LN9@PyType_Gen:

; 774  : 
; 775  :     if (type->tp_itemsize == 0)

  000e3	48 8b 44 24 70	 mov	 rax, QWORD PTR type$[rsp]
  000e8	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  000f0	75 11		 jne	 SHORT $LN8@PyType_Gen

; 776  :         PyObject_INIT(obj, type);

  000f2	48 8b 54 24 70	 mov	 rdx, QWORD PTR type$[rsp]
  000f7	48 8b 4c 24 38	 mov	 rcx, QWORD PTR obj$[rsp]
  000fc	e8 00 00 00 00	 call	 PyObject_INIT

; 777  :     else

  00101	eb 14		 jmp	 SHORT $LN7@PyType_Gen
$LN8@PyType_Gen:

; 778  :         (void) PyObject_INIT_VAR((PyVarObject *)obj, type, nitems);

  00103	4c 8b 44 24 78	 mov	 r8, QWORD PTR nitems$[rsp]
  00108	48 8b 54 24 70	 mov	 rdx, QWORD PTR type$[rsp]
  0010d	48 8b 4c 24 38	 mov	 rcx, QWORD PTR obj$[rsp]
  00112	e8 00 00 00 00	 call	 PyObject_INIT_VAR
$LN7@PyType_Gen:

; 779  : 
; 780  :     if (PyType_IS_GC(type))

  00117	e8 00 00 00 00	 call	 _Py_PXCTX
  0011c	85 c0		 test	 eax, eax
  0011e	74 0a		 je	 SHORT $LN21@PyType_Gen
  00120	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR tv137[rsp], 0
  00128	eb 2e		 jmp	 SHORT $LN22@PyType_Gen
$LN21@PyType_Gen:
  0012a	48 8b 44 24 70	 mov	 rax, QWORD PTR type$[rsp]
  0012f	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00135	25 00 40 00 00	 and	 eax, 16384		; 00004000H
  0013a	85 c0		 test	 eax, eax
  0013c	74 0a		 je	 SHORT $LN19@PyType_Gen
  0013e	c7 44 24 54 01
	00 00 00	 mov	 DWORD PTR tv135[rsp], 1
  00146	eb 08		 jmp	 SHORT $LN20@PyType_Gen
$LN19@PyType_Gen:
  00148	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR tv135[rsp], 0
$LN20@PyType_Gen:
  00150	8b 44 24 54	 mov	 eax, DWORD PTR tv135[rsp]
  00154	89 44 24 50	 mov	 DWORD PTR tv137[rsp], eax
$LN22@PyType_Gen:
  00158	83 7c 24 50 00	 cmp	 DWORD PTR tv137[rsp], 0
  0015d	0f 84 ee 00 00
	00		 je	 $LN6@PyType_Gen

; 781  :         _PyObject_GC_TRACK(obj);

  00163	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0016b	4c 8b 4c 24 38	 mov	 r9, QWORD PTR obj$[rsp]
  00170	41 b8 0d 03 00
	00		 mov	 r8d, 781		; 0000030dH
  00176	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@PKBBAMFA@?4?4?2Objects?2typeobject?4c?$AA@
  0017d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@MMPMJCHN@PyType_GenericAlloc?$AA@
  00184	e8 00 00 00 00	 call	 _PyParallel_Guard
  00189	85 c0		 test	 eax, eax
  0018b	0f 85 c0 00 00
	00		 jne	 $LN5@PyType_Gen
$LN4@PyType_Gen:
  00191	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00199	4c 8b 4c 24 38	 mov	 r9, QWORD PTR obj$[rsp]
  0019e	41 b8 0d 03 00
	00		 mov	 r8d, 781		; 0000030dH
  001a4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@PKBBAMFA@?4?4?2Objects?2typeobject?4c?$AA@
  001ab	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@MMPMJCHN@PyType_GenericAlloc?$AA@
  001b2	e8 00 00 00 00	 call	 _PyParallel_Guard
  001b7	85 c0		 test	 eax, eax
  001b9	74 0b		 je	 SHORT $LN23@PyType_Gen
  001bb	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR tv154[rsp], 0
  001c4	eb 0e		 jmp	 SHORT $LN24@PyType_Gen
$LN23@PyType_Gen:
  001c6	48 8b 44 24 38	 mov	 rax, QWORD PTR obj$[rsp]
  001cb	48 83 e8 18	 sub	 rax, 24
  001cf	48 89 44 24 58	 mov	 QWORD PTR tv154[rsp], rax
$LN24@PyType_Gen:
  001d4	48 8b 44 24 58	 mov	 rax, QWORD PTR tv154[rsp]
  001d9	48 89 44 24 40	 mov	 QWORD PTR g$21056[rsp], rax
  001de	48 8b 44 24 40	 mov	 rax, QWORD PTR g$21056[rsp]
  001e3	48 83 78 10 fe	 cmp	 QWORD PTR [rax+16], -2
  001e8	74 0c		 je	 SHORT $LN1@PyType_Gen
  001ea	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@
  001f1	e8 00 00 00 00	 call	 Py_FatalError
$LN1@PyType_Gen:
  001f6	48 8b 44 24 40	 mov	 rax, QWORD PTR g$21056[rsp]
  001fb	48 c7 40 10 fd
	ff ff ff	 mov	 QWORD PTR [rax+16], -3
  00203	48 8b 44 24 40	 mov	 rax, QWORD PTR g$21056[rsp]
  00208	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR _PyGC_generation0
  0020f	48 89 08	 mov	 QWORD PTR [rax], rcx
  00212	48 8b 44 24 40	 mov	 rax, QWORD PTR g$21056[rsp]
  00217	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR _PyGC_generation0
  0021e	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00222	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  00226	48 8b 44 24 40	 mov	 rax, QWORD PTR g$21056[rsp]
  0022b	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0022f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR g$21056[rsp]
  00234	48 89 08	 mov	 QWORD PTR [rax], rcx
  00237	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyGC_generation0
  0023e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR g$21056[rsp]
  00243	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  00247	33 c0		 xor	 eax, eax
  00249	85 c0		 test	 eax, eax
  0024b	0f 85 40 ff ff
	ff		 jne	 $LN4@PyType_Gen
$LN5@PyType_Gen:
$LN6@PyType_Gen:

; 782  :     return obj;

  00251	48 8b 44 24 38	 mov	 rax, QWORD PTR obj$[rsp]
$LN13@PyType_Gen:

; 783  : }

  00256	48 83 c4 68	 add	 rsp, 104		; 00000068H
  0025a	c3		 ret	 0
PyType_GenericAlloc ENDP
_TEXT	ENDS
EXTRN	_Py_NewReference:PROC
EXTRN	_PxObject_Init:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\objimpl.h
pdata	SEGMENT
$pdata$PyObject_INIT DD imagerel PyObject_INIT
	DD	imagerel PyObject_INIT+84
	DD	imagerel $unwind$PyObject_INIT
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyObject_INIT DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyObject_INIT
_TEXT	SEGMENT
op$ = 48
tp$ = 56
PyObject_INIT PROC					; COMDAT

; 236  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 237  :     Px_RETURN(_PxObject_Init(op, tp))

  0000e	e8 00 00 00 00	 call	 _Py_PXCTX
  00013	85 c0		 test	 eax, eax
  00015	74 11		 je	 SHORT $LN1@PyObject_I
  00017	48 8b 54 24 38	 mov	 rdx, QWORD PTR tp$[rsp]
  0001c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR op$[rsp]
  00021	e8 00 00 00 00	 call	 _PxObject_Init
  00026	eb 27		 jmp	 SHORT $LN2@PyObject_I
$LN1@PyObject_I:

; 238  :     Py_TYPE(op) = tp;

  00028	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  0002d	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tp$[rsp]
  00032	48 89 48 58	 mov	 QWORD PTR [rax+88], rcx

; 239  :     _PyObject_InitHead(op);

  00036	48 8b 4c 24 30	 mov	 rcx, QWORD PTR op$[rsp]
  0003b	e8 00 00 00 00	 call	 _PyObject_InitHead

; 240  :     _Py_NewReference(op);

  00040	48 8b 4c 24 30	 mov	 rcx, QWORD PTR op$[rsp]
  00045	e8 00 00 00 00	 call	 _Py_NewReference

; 241  :     return op;

  0004a	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
$LN2@PyObject_I:

; 242  : }

  0004f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00053	c3		 ret	 0
PyObject_INIT ENDP
_TEXT	ENDS
PUBLIC	??_C@_1BI@GPFDFIDP@?$AAP?$AAy?$AA_?$AAT?$AAY?$AAP?$AAE?$AA?$CI?$AAo?$AAp?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1EI@MBCBHLGB@?$AAc?$AA?3?$AA?2?$AAs?$AAr?$AAc?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?2?$AAi?$AAn?$AAc?$AAl?$AAu?$AAd?$AAe?$AA?2?$AAo?$AAb?$AAj?$AAi?$AAm?$AAp@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyObject_InitHead DD imagerel _PyObject_InitHead
	DD	imagerel _PyObject_InitHead+182
	DD	imagerel $unwind$_PyObject_InitHead
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyObject_InitHead DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT ??_C@_1BI@GPFDFIDP@?$AAP?$AAy?$AA_?$AAT?$AAY?$AAP?$AAE?$AA?$CI?$AAo?$AAp?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1BI@GPFDFIDP@?$AAP?$AAy?$AA_?$AAT?$AAY?$AAP?$AAE?$AA?$CI?$AAo?$AAp?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, '_', 00H, 'T', 00H, 'Y', 00H, 'P', 00H, 'E', 00H
	DB	'(', 00H, 'o', 00H, 'p', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EI@MBCBHLGB@?$AAc?$AA?3?$AA?2?$AAs?$AAr?$AAc?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?2?$AAi?$AAn?$AAc?$AAl?$AAu?$AAd?$AAe?$AA?2?$AAo?$AAb?$AAj?$AAi?$AAm?$AAp@
CONST	SEGMENT
??_C@_1EI@MBCBHLGB@?$AAc?$AA?3?$AA?2?$AAs?$AAr?$AAc?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?2?$AAi?$AAn?$AAc?$AAl?$AAu?$AAd?$AAe?$AA?2?$AAo?$AAb?$AAj?$AAi?$AAm?$AAp@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H
	DB	'p', 00H, 'y', 00H, 'p', 00H, 'a', 00H, 'r', 00H, 'a', 00H, 'l'
	DB	00H, 'l', 00H, 'e', 00H, 'l', 00H, '\', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'o'
	DB	00H, 'b', 00H, 'j', 00H, 'i', 00H, 'm', 00H, 'p', 00H, 'l', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PyObject_InitHead
_TEXT	SEGMENT
op$ = 48
_PyObject_InitHead PROC					; COMDAT

; 215  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 216  :     assert(Py_TYPE(op));

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  0000e	48 83 78 58 00	 cmp	 QWORD PTR [rax+88], 0
  00013	75 1c		 jne	 SHORT $LN3@PyObject_I@2
  00015	41 b8 d8 00 00
	00		 mov	 r8d, 216		; 000000d8H
  0001b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EI@MBCBHLGB@?$AAc?$AA?3?$AA?2?$AAs?$AAr?$AAc?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?2?$AAi?$AAn?$AAc?$AAl?$AAu?$AAd?$AAe?$AA?2?$AAo?$AAb?$AAj?$AAi?$AAm?$AAp@
  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BI@GPFDFIDP@?$AAP?$AAy?$AA_?$AAT?$AAY?$AAP?$AAE?$AA?$CI?$AAo?$AAp?$AA?$CJ?$AA?$AA@
  00029	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0002f	33 c0		 xor	 eax, eax
$LN3@PyObject_I@2:

; 217  :     op->is_px = _Py_NOT_PARALLEL;

  00031	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  00036	48 b9 78 56 ef
	be 34 12 ad de	 mov	 rcx, -2401243008567650696 ; dead1234beef5678H
  00040	48 89 08	 mov	 QWORD PTR [rax], rcx

; 218  :     op->px    = _Py_NOT_PARALLEL;

  00043	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  00048	48 b9 78 56 ef
	be 34 12 ad de	 mov	 rcx, -2401243008567650696 ; dead1234beef5678H
  00052	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 219  :     op->slist_entry.Next = NULL;

  00056	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  0005b	48 c7 40 10 00
	00 00 00	 mov	 QWORD PTR [rax+16], 0

; 220  :     op->px_flags  = Py_PXFLAGS_ISPY;

  00063	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  00068	48 c7 40 20 01
	00 00 00	 mov	 QWORD PTR [rax+32], 1

; 221  :     op->srw_lock  = NULL;

  00070	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  00075	48 c7 40 28 00
	00 00 00	 mov	 QWORD PTR [rax+40], 0

; 222  :     op->event     = NULL;

  0007d	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  00082	48 c7 40 30 00
	00 00 00	 mov	 QWORD PTR [rax+48], 0

; 223  :     op->orig_type = NULL;

  0008a	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  0008f	48 c7 40 38 00
	00 00 00	 mov	 QWORD PTR [rax+56], 0

; 224  : #ifdef Py_TRACE_REFS
; 225  :     op->_ob_next = NULL;

  00097	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  0009c	48 c7 40 40 00
	00 00 00	 mov	 QWORD PTR [rax+64], 0

; 226  :     op->_ob_prev = NULL;

  000a4	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  000a9	48 c7 40 48 00
	00 00 00	 mov	 QWORD PTR [rax+72], 0

; 227  : #else
; 228  :     op->_ob_next = _Py_NOT_PARALLEL;
; 229  :     op->_ob_prev = _Py_NOT_PARALLEL;
; 230  : #endif
; 231  : }

  000b1	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000b5	c3		 ret	 0
_PyObject_InitHead ENDP
_TEXT	ENDS
EXTRN	_PxObject_InitVar:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyObject_INIT_VAR DD imagerel PyObject_INIT_VAR
	DD	imagerel PyObject_INIT_VAR+108
	DD	imagerel $unwind$PyObject_INIT_VAR
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyObject_INIT_VAR DD 011301H
	DD	04213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyObject_INIT_VAR
_TEXT	SEGMENT
op$ = 48
tp$ = 56
n$ = 64
PyObject_INIT_VAR PROC					; COMDAT

; 247  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 248  :     Px_RETURN(_PxObject_InitVar(op, tp, n))

  00013	e8 00 00 00 00	 call	 _Py_PXCTX
  00018	85 c0		 test	 eax, eax
  0001a	74 16		 je	 SHORT $LN1@PyObject_I@3
  0001c	4c 8b 44 24 40	 mov	 r8, QWORD PTR n$[rsp]
  00021	48 8b 54 24 38	 mov	 rdx, QWORD PTR tp$[rsp]
  00026	48 8b 4c 24 30	 mov	 rcx, QWORD PTR op$[rsp]
  0002b	e8 00 00 00 00	 call	 _PxObject_InitVar
  00030	eb 35		 jmp	 SHORT $LN2@PyObject_I@3
$LN1@PyObject_I@3:

; 249  :     Py_SIZE(op) = n;

  00032	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  00037	48 8b 4c 24 40	 mov	 rcx, QWORD PTR n$[rsp]
  0003c	48 89 48 60	 mov	 QWORD PTR [rax+96], rcx

; 250  :     Py_TYPE(op) = tp;

  00040	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  00045	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tp$[rsp]
  0004a	48 89 48 58	 mov	 QWORD PTR [rax+88], rcx

; 251  :     _PyObject_InitHead((PyObject *)op);

  0004e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR op$[rsp]
  00053	e8 00 00 00 00	 call	 _PyObject_InitHead

; 252  :     _Py_NewReference((PyObject *)op);

  00058	48 8b 4c 24 30	 mov	 rcx, QWORD PTR op$[rsp]
  0005d	e8 00 00 00 00	 call	 _Py_NewReference

; 253  :     return op;

  00062	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
$LN2@PyObject_I@3:

; 254  : }

  00067	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006b	c3		 ret	 0
PyObject_INIT_VAR ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\objects\typeobject.c
pdata	SEGMENT
$pdata$PyType_GenericNew DD imagerel $LN3
	DD	imagerel $LN3+42
	DD	imagerel $unwind$PyType_GenericNew
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyType_GenericNew DD 011301H
	DD	04213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyType_GenericNew
_TEXT	SEGMENT
type$ = 48
args$ = 56
kwds$ = 64
PyType_GenericNew PROC					; COMDAT

; 787  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 788  :     return type->tp_alloc(type, 0);

  00013	33 d2		 xor	 edx, edx
  00015	48 8b 4c 24 30	 mov	 rcx, QWORD PTR type$[rsp]
  0001a	48 8b 44 24 30	 mov	 rax, QWORD PTR type$[rsp]
  0001f	ff 90 88 01 00
	00		 call	 QWORD PTR [rax+392]

; 789  : }

  00025	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00029	c3		 ret	 0
PyType_GenericNew ENDP
_TEXT	ENDS
PUBLIC	??_C@_1CG@DAMEHKMF@?$AAP?$AAy?$AAT?$AAu?$AAp?$AAl?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAm?$AAr?$AAo?$AA?$CJ?$AA?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyType_IsSubtype DD imagerel $LN16
	DD	imagerel $LN16+267
	DD	imagerel $unwind$PyType_IsSubtype
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyType_IsSubtype DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_1CG@DAMEHKMF@?$AAP?$AAy?$AAT?$AAu?$AAp?$AAl?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAm?$AAr?$AAo?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CG@DAMEHKMF@?$AAP?$AAy?$AAT?$AAu?$AAp?$AAl?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAm?$AAr?$AAo?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'T', 00H, 'u', 00H, 'p', 00H, 'l', 00H, 'e', 00H
	DB	'_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, '('
	DB	00H, 'm', 00H, 'r', 00H, 'o', 00H, ')', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyType_IsSubtype
_TEXT	SEGMENT
mro$ = 32
n$21306 = 40
i$21305 = 48
tv85 = 56
a$ = 80
b$ = 88
PyType_IsSubtype PROC					; COMDAT

; 1149 : {

$LN16:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1150 :     PyObject *mro;
; 1151 : 
; 1152 :     mro = a->tp_mro;

  0000e	48 8b 44 24 50	 mov	 rax, QWORD PTR a$[rsp]
  00013	48 8b 80 b0 01
	00 00		 mov	 rax, QWORD PTR [rax+432]
  0001a	48 89 44 24 20	 mov	 QWORD PTR mro$[rsp], rax

; 1153 :     if (mro != NULL) {

  0001f	48 83 7c 24 20
	00		 cmp	 QWORD PTR mro$[rsp], 0
  00025	0f 84 8b 00 00
	00		 je	 $LN10@PyType_IsS

; 1154 :         /* Deal with multiple inheritance without recursion
; 1155 :            by walking the MRO tuple */
; 1156 :         Py_ssize_t i, n;
; 1157 :         assert(PyTuple_Check(mro));

  0002b	48 8b 44 24 20	 mov	 rax, QWORD PTR mro$[rsp]
  00030	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00034	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0003a	25 00 00 00 04	 and	 eax, 67108864		; 04000000H
  0003f	85 c0		 test	 eax, eax
  00041	75 1c		 jne	 SHORT $LN13@PyType_IsS
  00043	41 b8 85 04 00
	00		 mov	 r8d, 1157		; 00000485H
  00049	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@GJLLIOPA@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAt?$AAy?$AAp?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00050	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@DAMEHKMF@?$AAP?$AAy?$AAT?$AAu?$AAp?$AAl?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAm?$AAr?$AAo?$AA?$CJ?$AA?$AA@
  00057	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0005d	33 c0		 xor	 eax, eax
$LN13@PyType_IsS:

; 1158 :         n = PyTuple_GET_SIZE(mro);

  0005f	48 8b 44 24 20	 mov	 rax, QWORD PTR mro$[rsp]
  00064	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00068	48 89 44 24 28	 mov	 QWORD PTR n$21306[rsp], rax

; 1159 :         for (i = 0; i < n; i++) {

  0006d	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR i$21305[rsp], 0
  00076	eb 0d		 jmp	 SHORT $LN9@PyType_IsS
$LN8@PyType_IsS:
  00078	48 8b 44 24 30	 mov	 rax, QWORD PTR i$21305[rsp]
  0007d	48 ff c0	 inc	 rax
  00080	48 89 44 24 30	 mov	 QWORD PTR i$21305[rsp], rax
$LN9@PyType_IsS:
  00085	48 8b 44 24 28	 mov	 rax, QWORD PTR n$21306[rsp]
  0008a	48 39 44 24 30	 cmp	 QWORD PTR i$21305[rsp], rax
  0008f	7d 1f		 jge	 SHORT $LN7@PyType_IsS

; 1160 :             if (PyTuple_GET_ITEM(mro, i) == (PyObject *)b)

  00091	48 8b 44 24 20	 mov	 rax, QWORD PTR mro$[rsp]
  00096	48 8b 4c 24 30	 mov	 rcx, QWORD PTR i$21305[rsp]
  0009b	48 8b 54 24 58	 mov	 rdx, QWORD PTR b$[rsp]
  000a0	48 39 54 c8 70	 cmp	 QWORD PTR [rax+rcx*8+112], rdx
  000a5	75 07		 jne	 SHORT $LN6@PyType_IsS

; 1161 :                 return 1;

  000a7	b8 01 00 00 00	 mov	 eax, 1
  000ac	eb 58		 jmp	 SHORT $LN11@PyType_IsS
$LN6@PyType_IsS:

; 1162 :         }

  000ae	eb c8		 jmp	 SHORT $LN8@PyType_IsS
$LN7@PyType_IsS:

; 1163 :         return 0;

  000b0	33 c0		 xor	 eax, eax
  000b2	eb 52		 jmp	 SHORT $LN11@PyType_IsS

; 1164 :     }
; 1165 :     else {

  000b4	eb 50		 jmp	 SHORT $LN5@PyType_IsS
$LN10@PyType_IsS:
$LN4@PyType_IsS:

; 1166 :         /* a is not completely initilized yet; follow tp_base */
; 1167 :         do {
; 1168 :             if (a == b)

  000b6	48 8b 44 24 58	 mov	 rax, QWORD PTR b$[rsp]
  000bb	48 39 44 24 50	 cmp	 QWORD PTR a$[rsp], rax
  000c0	75 07		 jne	 SHORT $LN1@PyType_IsS

; 1169 :                 return 1;

  000c2	b8 01 00 00 00	 mov	 eax, 1
  000c7	eb 3d		 jmp	 SHORT $LN11@PyType_IsS
$LN1@PyType_IsS:

; 1170 :             a = a->tp_base;

  000c9	48 8b 44 24 50	 mov	 rax, QWORD PTR a$[rsp]
  000ce	48 8b 80 58 01
	00 00		 mov	 rax, QWORD PTR [rax+344]
  000d5	48 89 44 24 50	 mov	 QWORD PTR a$[rsp], rax

; 1171 :         } while (a != NULL);

  000da	48 83 7c 24 50
	00		 cmp	 QWORD PTR a$[rsp], 0
  000e0	75 d4		 jne	 SHORT $LN4@PyType_IsS

; 1172 :         return b == &PyBaseObject_Type;

  000e2	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyBaseObject_Type
  000e9	48 39 44 24 58	 cmp	 QWORD PTR b$[rsp], rax
  000ee	75 0a		 jne	 SHORT $LN14@PyType_IsS
  000f0	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR tv85[rsp], 1
  000f8	eb 08		 jmp	 SHORT $LN15@PyType_IsS
$LN14@PyType_IsS:
  000fa	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv85[rsp], 0
$LN15@PyType_IsS:
  00102	8b 44 24 38	 mov	 eax, DWORD PTR tv85[rsp]
$LN5@PyType_IsS:
$LN11@PyType_IsS:

; 1173 :     }
; 1174 : }

  00106	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0010a	c3		 ret	 0
PyType_IsSubtype ENDP
_TEXT	ENDS
PUBLIC	_PyObject_LookupSpecial
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyObject_LookupSpecial DD imagerel $LN3
	DD	imagerel $LN3+34
	DD	imagerel $unwind$_PyObject_LookupSpecial
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyObject_LookupSpecial DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _PyObject_LookupSpecial
_TEXT	SEGMENT
self$ = 48
attrid$ = 56
_PyObject_LookupSpecial PROC				; COMDAT

; 1220 : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1221 :     return lookup_maybe(self, attrid);

  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR attrid$[rsp]
  00013	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self$[rsp]
  00018	e8 00 00 00 00	 call	 lookup_maybe

; 1222 : }

  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
_PyObject_LookupSpecial ENDP
_TEXT	ENDS
PUBLIC	_PyType_LookupId
;	COMDAT pdata
pdata	SEGMENT
$pdata$lookup_maybe DD imagerel lookup_maybe
	DD	imagerel lookup_maybe+125
	DD	imagerel $unwind$lookup_maybe
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$lookup_maybe DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT lookup_maybe
_TEXT	SEGMENT
res$ = 32
f$21333 = 40
self$ = 64
attrid$ = 72
lookup_maybe PROC					; COMDAT

; 1195 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1196 :     PyObject *res;
; 1197 : 
; 1198 :     res = _PyType_LookupId(Py_TYPE(self), attrid);

  0000e	48 8b 54 24 48	 mov	 rdx, QWORD PTR attrid$[rsp]
  00013	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00018	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  0001c	e8 00 00 00 00	 call	 _PyType_LookupId
  00021	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax

; 1199 :     if (res != NULL) {

  00026	48 83 7c 24 20
	00		 cmp	 QWORD PTR res$[rsp], 0
  0002c	74 45		 je	 SHORT $LN3@lookup_may

; 1200 :         descrgetfunc f;
; 1201 :         if ((f = Py_TYPE(res)->tp_descr_get) == NULL)

  0002e	48 8b 44 24 20	 mov	 rax, QWORD PTR res$[rsp]
  00033	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00037	48 8b 80 68 01
	00 00		 mov	 rax, QWORD PTR [rax+360]
  0003e	48 89 44 24 28	 mov	 QWORD PTR f$21333[rsp], rax
  00043	48 83 7c 24 28
	00		 cmp	 QWORD PTR f$21333[rsp], 0
  00049	75 0c		 jne	 SHORT $LN2@lookup_may

; 1202 :             Py_INCREF(res);

  0004b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR res$[rsp]
  00050	e8 00 00 00 00	 call	 _Py_IncRef

; 1203 :         else

  00055	eb 1c		 jmp	 SHORT $LN1@lookup_may
$LN2@lookup_may:

; 1204 :             res = f(res, self, (PyObject *)(Py_TYPE(self)));

  00057	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0005c	4c 8b 40 58	 mov	 r8, QWORD PTR [rax+88]
  00060	48 8b 54 24 40	 mov	 rdx, QWORD PTR self$[rsp]
  00065	48 8b 4c 24 20	 mov	 rcx, QWORD PTR res$[rsp]
  0006a	ff 54 24 28	 call	 QWORD PTR f$21333[rsp]
  0006e	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax
$LN1@lookup_may:
$LN3@lookup_may:

; 1205 :     }
; 1206 :     return res;

  00073	48 8b 44 24 20	 mov	 rax, QWORD PTR res$[rsp]

; 1207 : }

  00078	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0007c	c3		 ret	 0
lookup_maybe ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$mro_external DD imagerel mro_external
	DD	imagerel mro_external+34
	DD	imagerel $unwind$mro_external
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mro_external DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT mro_external
_TEXT	SEGMENT
type$ = 32
self$ = 64
mro_external PROC					; COMDAT

; 1580 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1581 :     PyTypeObject *type = (PyTypeObject *)self;

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0000e	48 89 44 24 20	 mov	 QWORD PTR type$[rsp], rax

; 1582 : 
; 1583 :     return mro_implementation(type);

  00013	48 8b 4c 24 20	 mov	 rcx, QWORD PTR type$[rsp]
  00018	e8 00 00 00 00	 call	 mro_implementation

; 1584 : }

  0001d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00021	c3		 ret	 0
mro_external ENDP
_TEXT	ENDS
PUBLIC	??_C@_03LGGEEBKE@?$FLO?$FN?$AA@			; `string'
PUBLIC	PyType_Ready
EXTRN	Py_BuildValue:PROC
EXTRN	PySequence_List:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$mro_implementation DD imagerel mro_implementation
	DD	imagerel mro_implementation+457
	DD	imagerel $unwind$mro_implementation
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mro_implementation DD 010901H
	DD	0e209H
xdata	ENDS
;	COMDAT ??_C@_03LGGEEBKE@?$FLO?$FN?$AA@
CONST	SEGMENT
??_C@_03LGGEEBKE@?$FLO?$FN?$AA@ DB '[O]', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT mro_implementation
_TEXT	SEGMENT
ok$ = 32
n$ = 40
i$ = 48
bases$ = 56
result$ = 64
bases_aslist$ = 72
to_merge$ = 80
parentMRO$21595 = 88
base$21593 = 96
type$ = 128
mro_implementation PROC					; COMDAT

; 1510 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 1511 :     Py_ssize_t i, n;
; 1512 :     int ok;
; 1513 :     PyObject *bases, *result;
; 1514 :     PyObject *to_merge, *bases_aslist;
; 1515 : 
; 1516 :     if (type->tp_dict == NULL) {

  00009	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  00011	48 83 b8 60 01
	00 00 00	 cmp	 QWORD PTR [rax+352], 0
  00019	75 18		 jne	 SHORT $LN11@mro_implem

; 1517 :         if (PyType_Ready(type) < 0)

  0001b	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR type$[rsp]
  00023	e8 00 00 00 00	 call	 PyType_Ready
  00028	85 c0		 test	 eax, eax
  0002a	7d 07		 jge	 SHORT $LN10@mro_implem

; 1518 :             return NULL;

  0002c	33 c0		 xor	 eax, eax
  0002e	e9 91 01 00 00	 jmp	 $LN12@mro_implem
$LN10@mro_implem:
$LN11@mro_implem:

; 1519 :     }
; 1520 : 
; 1521 :     /* Find a superclass linearization that honors the constraints
; 1522 :        of the explicit lists of bases and the constraints implied by
; 1523 :        each base class.
; 1524 : 
; 1525 :        to_merge is a list of lists, where each list is a superclass
; 1526 :        linearization implied by a base class.  The last element of
; 1527 :        to_merge is the declared list of bases.
; 1528 :     */
; 1529 : 
; 1530 :     bases = type->tp_bases;

  00033	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  0003b	48 8b 80 a8 01
	00 00		 mov	 rax, QWORD PTR [rax+424]
  00042	48 89 44 24 38	 mov	 QWORD PTR bases$[rsp], rax

; 1531 :     n = PyTuple_GET_SIZE(bases);

  00047	48 8b 44 24 38	 mov	 rax, QWORD PTR bases$[rsp]
  0004c	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00050	48 89 44 24 28	 mov	 QWORD PTR n$[rsp], rax

; 1532 : 
; 1533 :     to_merge = PyList_New(n+1);

  00055	48 8b 44 24 28	 mov	 rax, QWORD PTR n$[rsp]
  0005a	48 ff c0	 inc	 rax
  0005d	48 8b c8	 mov	 rcx, rax
  00060	e8 00 00 00 00	 call	 PyList_New
  00065	48 89 44 24 50	 mov	 QWORD PTR to_merge$[rsp], rax

; 1534 :     if (to_merge == NULL)

  0006a	48 83 7c 24 50
	00		 cmp	 QWORD PTR to_merge$[rsp], 0
  00070	75 07		 jne	 SHORT $LN9@mro_implem

; 1535 :         return NULL;

  00072	33 c0		 xor	 eax, eax
  00074	e9 4b 01 00 00	 jmp	 $LN12@mro_implem
$LN9@mro_implem:

; 1536 : 
; 1537 :     for (i = 0; i < n; i++) {

  00079	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  00082	eb 0d		 jmp	 SHORT $LN8@mro_implem
$LN7@mro_implem:
  00084	48 8b 44 24 30	 mov	 rax, QWORD PTR i$[rsp]
  00089	48 ff c0	 inc	 rax
  0008c	48 89 44 24 30	 mov	 QWORD PTR i$[rsp], rax
$LN8@mro_implem:
  00091	48 8b 44 24 28	 mov	 rax, QWORD PTR n$[rsp]
  00096	48 39 44 24 30	 cmp	 QWORD PTR i$[rsp], rax
  0009b	7d 5c		 jge	 SHORT $LN6@mro_implem

; 1538 :         PyObject *base = PyTuple_GET_ITEM(bases, i);

  0009d	48 8b 44 24 38	 mov	 rax, QWORD PTR bases$[rsp]
  000a2	48 8b 4c 24 30	 mov	 rcx, QWORD PTR i$[rsp]
  000a7	48 8b 44 c8 70	 mov	 rax, QWORD PTR [rax+rcx*8+112]
  000ac	48 89 44 24 60	 mov	 QWORD PTR base$21593[rsp], rax

; 1539 :         PyObject *parentMRO;
; 1540 :         parentMRO = PySequence_List(((PyTypeObject*)base)->tp_mro);

  000b1	48 8b 44 24 60	 mov	 rax, QWORD PTR base$21593[rsp]
  000b6	48 8b 88 b0 01
	00 00		 mov	 rcx, QWORD PTR [rax+432]
  000bd	e8 00 00 00 00	 call	 PySequence_List
  000c2	48 89 44 24 58	 mov	 QWORD PTR parentMRO$21595[rsp], rax

; 1541 :         if (parentMRO == NULL) {

  000c7	48 83 7c 24 58
	00		 cmp	 QWORD PTR parentMRO$21595[rsp], 0
  000cd	75 11		 jne	 SHORT $LN5@mro_implem

; 1542 :             Py_DECREF(to_merge);

  000cf	48 8b 4c 24 50	 mov	 rcx, QWORD PTR to_merge$[rsp]
  000d4	e8 00 00 00 00	 call	 _Py_DecRef

; 1543 :             return NULL;

  000d9	33 c0		 xor	 eax, eax
  000db	e9 e4 00 00 00	 jmp	 $LN12@mro_implem
$LN5@mro_implem:

; 1544 :         }
; 1545 : 
; 1546 :         PyList_SET_ITEM(to_merge, i, parentMRO);

  000e0	48 8b 44 24 50	 mov	 rax, QWORD PTR to_merge$[rsp]
  000e5	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  000e9	48 8b 4c 24 30	 mov	 rcx, QWORD PTR i$[rsp]
  000ee	48 8b 54 24 58	 mov	 rdx, QWORD PTR parentMRO$21595[rsp]
  000f3	48 89 14 c8	 mov	 QWORD PTR [rax+rcx*8], rdx

; 1547 :     }

  000f7	eb 8b		 jmp	 SHORT $LN7@mro_implem
$LN6@mro_implem:

; 1548 : 
; 1549 :     bases_aslist = PySequence_List(bases);

  000f9	48 8b 4c 24 38	 mov	 rcx, QWORD PTR bases$[rsp]
  000fe	e8 00 00 00 00	 call	 PySequence_List
  00103	48 89 44 24 48	 mov	 QWORD PTR bases_aslist$[rsp], rax

; 1550 :     if (bases_aslist == NULL) {

  00108	48 83 7c 24 48
	00		 cmp	 QWORD PTR bases_aslist$[rsp], 0
  0010e	75 11		 jne	 SHORT $LN4@mro_implem

; 1551 :         Py_DECREF(to_merge);

  00110	48 8b 4c 24 50	 mov	 rcx, QWORD PTR to_merge$[rsp]
  00115	e8 00 00 00 00	 call	 _Py_DecRef

; 1552 :         return NULL;

  0011a	33 c0		 xor	 eax, eax
  0011c	e9 a3 00 00 00	 jmp	 $LN12@mro_implem
$LN4@mro_implem:

; 1553 :     }
; 1554 :     /* This is just a basic sanity check. */
; 1555 :     if (check_duplicates(bases_aslist) < 0) {

  00121	48 8b 4c 24 48	 mov	 rcx, QWORD PTR bases_aslist$[rsp]
  00126	e8 00 00 00 00	 call	 check_duplicates
  0012b	85 c0		 test	 eax, eax
  0012d	7d 18		 jge	 SHORT $LN3@mro_implem

; 1556 :         Py_DECREF(to_merge);

  0012f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR to_merge$[rsp]
  00134	e8 00 00 00 00	 call	 _Py_DecRef

; 1557 :         Py_DECREF(bases_aslist);

  00139	48 8b 4c 24 48	 mov	 rcx, QWORD PTR bases_aslist$[rsp]
  0013e	e8 00 00 00 00	 call	 _Py_DecRef

; 1558 :         return NULL;

  00143	33 c0		 xor	 eax, eax
  00145	eb 7d		 jmp	 SHORT $LN12@mro_implem
$LN3@mro_implem:

; 1559 :     }
; 1560 :     PyList_SET_ITEM(to_merge, n, bases_aslist);

  00147	48 8b 44 24 50	 mov	 rax, QWORD PTR to_merge$[rsp]
  0014c	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00150	48 8b 4c 24 28	 mov	 rcx, QWORD PTR n$[rsp]
  00155	48 8b 54 24 48	 mov	 rdx, QWORD PTR bases_aslist$[rsp]
  0015a	48 89 14 c8	 mov	 QWORD PTR [rax+rcx*8], rdx

; 1561 : 
; 1562 :     result = Py_BuildValue("[O]", (PyObject *)type);

  0015e	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR type$[rsp]
  00166	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03LGGEEBKE@?$FLO?$FN?$AA@
  0016d	e8 00 00 00 00	 call	 Py_BuildValue
  00172	48 89 44 24 40	 mov	 QWORD PTR result$[rsp], rax

; 1563 :     if (result == NULL) {

  00177	48 83 7c 24 40
	00		 cmp	 QWORD PTR result$[rsp], 0
  0017d	75 0e		 jne	 SHORT $LN2@mro_implem

; 1564 :         Py_DECREF(to_merge);

  0017f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR to_merge$[rsp]
  00184	e8 00 00 00 00	 call	 _Py_DecRef

; 1565 :         return NULL;

  00189	33 c0		 xor	 eax, eax
  0018b	eb 37		 jmp	 SHORT $LN12@mro_implem
$LN2@mro_implem:

; 1566 :     }
; 1567 : 
; 1568 :     ok = pmerge(result, to_merge);

  0018d	48 8b 54 24 50	 mov	 rdx, QWORD PTR to_merge$[rsp]
  00192	48 8b 4c 24 40	 mov	 rcx, QWORD PTR result$[rsp]
  00197	e8 00 00 00 00	 call	 pmerge
  0019c	89 44 24 20	 mov	 DWORD PTR ok$[rsp], eax

; 1569 :     Py_DECREF(to_merge);

  001a0	48 8b 4c 24 50	 mov	 rcx, QWORD PTR to_merge$[rsp]
  001a5	e8 00 00 00 00	 call	 _Py_DecRef

; 1570 :     if (ok < 0) {

  001aa	83 7c 24 20 00	 cmp	 DWORD PTR ok$[rsp], 0
  001af	7d 0e		 jge	 SHORT $LN1@mro_implem

; 1571 :         Py_DECREF(result);

  001b1	48 8b 4c 24 40	 mov	 rcx, QWORD PTR result$[rsp]
  001b6	e8 00 00 00 00	 call	 _Py_DecRef

; 1572 :         return NULL;

  001bb	33 c0		 xor	 eax, eax
  001bd	eb 05		 jmp	 SHORT $LN12@mro_implem
$LN1@mro_implem:

; 1573 :     }
; 1574 : 
; 1575 :     return result;

  001bf	48 8b 44 24 40	 mov	 rax, QWORD PTR result$[rsp]
$LN12@mro_implem:

; 1576 : }

  001c4	48 83 c4 78	 add	 rsp, 120		; 00000078H
  001c8	c3		 ret	 0
mro_implementation ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BF@CDGJEON@duplicate?5base?5class?$AA@	; `string'
PUBLIC	??_C@_0BI@CCNFBLFC@duplicate?5base?5class?5?$CFU?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$check_duplicates DD imagerel check_duplicates
	DD	imagerel check_duplicates+253
	DD	imagerel $unwind$check_duplicates
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$check_duplicates DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0BF@CDGJEON@duplicate?5base?5class?$AA@
CONST	SEGMENT
??_C@_0BF@CDGJEON@duplicate?5base?5class?$AA@ DB 'duplicate base class', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CCNFBLFC@duplicate?5base?5class?5?$CFU?$AA@
CONST	SEGMENT
??_C@_0BI@CCNFBLFC@duplicate?5base?5class?5?$CFU?$AA@ DB 'duplicate base '
	DB	'class %U', 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT check_duplicates
_TEXT	SEGMENT
n$ = 32
i$ = 40
j$ = 48
o$21461 = 56
list$ = 80
check_duplicates PROC					; COMDAT

; 1358 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1359 :     Py_ssize_t i, j, n;
; 1360 :     /* Let's use a quadratic time algorithm,
; 1361 :        assuming that the bases lists is short.
; 1362 :     */
; 1363 :     n = PyList_GET_SIZE(list);

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR list$[rsp]
  0000e	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00012	48 89 44 24 20	 mov	 QWORD PTR n$[rsp], rax

; 1364 :     for (i = 0; i < n; i++) {

  00017	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  00020	eb 0d		 jmp	 SHORT $LN9@check_dupl
$LN8@check_dupl:
  00022	48 8b 44 24 28	 mov	 rax, QWORD PTR i$[rsp]
  00027	48 ff c0	 inc	 rax
  0002a	48 89 44 24 28	 mov	 QWORD PTR i$[rsp], rax
$LN9@check_dupl:
  0002f	48 8b 44 24 20	 mov	 rax, QWORD PTR n$[rsp]
  00034	48 39 44 24 28	 cmp	 QWORD PTR i$[rsp], rax
  00039	0f 8d b7 00 00
	00		 jge	 $LN7@check_dupl

; 1365 :         PyObject *o = PyList_GET_ITEM(list, i);

  0003f	48 8b 44 24 50	 mov	 rax, QWORD PTR list$[rsp]
  00044	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00048	48 8b 4c 24 28	 mov	 rcx, QWORD PTR i$[rsp]
  0004d	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  00051	48 89 44 24 38	 mov	 QWORD PTR o$21461[rsp], rax

; 1366 :         for (j = i + 1; j < n; j++) {

  00056	48 8b 44 24 28	 mov	 rax, QWORD PTR i$[rsp]
  0005b	48 ff c0	 inc	 rax
  0005e	48 89 44 24 30	 mov	 QWORD PTR j$[rsp], rax
  00063	eb 0d		 jmp	 SHORT $LN6@check_dupl
$LN5@check_dupl:
  00065	48 8b 44 24 30	 mov	 rax, QWORD PTR j$[rsp]
  0006a	48 ff c0	 inc	 rax
  0006d	48 89 44 24 30	 mov	 QWORD PTR j$[rsp], rax
$LN6@check_dupl:
  00072	48 8b 44 24 20	 mov	 rax, QWORD PTR n$[rsp]
  00077	48 39 44 24 30	 cmp	 QWORD PTR j$[rsp], rax
  0007c	7d 73		 jge	 SHORT $LN4@check_dupl

; 1367 :             if (PyList_GET_ITEM(list, j) == o) {

  0007e	48 8b 44 24 50	 mov	 rax, QWORD PTR list$[rsp]
  00083	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00087	48 8b 4c 24 30	 mov	 rcx, QWORD PTR j$[rsp]
  0008c	48 8b 54 24 38	 mov	 rdx, QWORD PTR o$21461[rsp]
  00091	48 39 14 c8	 cmp	 QWORD PTR [rax+rcx*8], rdx
  00095	75 55		 jne	 SHORT $LN3@check_dupl

; 1368 :                 o = class_name(o);

  00097	48 8b 4c 24 38	 mov	 rcx, QWORD PTR o$21461[rsp]
  0009c	e8 00 00 00 00	 call	 class_name
  000a1	48 89 44 24 38	 mov	 QWORD PTR o$21461[rsp], rax

; 1369 :                 if (o != NULL) {

  000a6	48 83 7c 24 38
	00		 cmp	 QWORD PTR o$21461[rsp], 0
  000ac	74 24		 je	 SHORT $LN2@check_dupl

; 1370 :                     PyErr_Format(PyExc_TypeError,
; 1371 :                                  "duplicate base class %U",
; 1372 :                                  o);

  000ae	4c 8b 44 24 38	 mov	 r8, QWORD PTR o$21461[rsp]
  000b3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@CCNFBLFC@duplicate?5base?5class?5?$CFU?$AA@
  000ba	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000c1	e8 00 00 00 00	 call	 PyErr_Format

; 1373 :                     Py_DECREF(o);

  000c6	48 8b 4c 24 38	 mov	 rcx, QWORD PTR o$21461[rsp]
  000cb	e8 00 00 00 00	 call	 _Py_DecRef

; 1374 :                 } else {

  000d0	eb 13		 jmp	 SHORT $LN1@check_dupl
$LN2@check_dupl:

; 1375 :                     PyErr_SetString(PyExc_TypeError,
; 1376 :                                  "duplicate base class");

  000d2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BF@CDGJEON@duplicate?5base?5class?$AA@
  000d9	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000e0	e8 00 00 00 00	 call	 PyErr_SetString
$LN1@check_dupl:

; 1377 :                 }
; 1378 :                 return -1;

  000e5	b8 ff ff ff ff	 mov	 eax, -1
  000ea	eb 0c		 jmp	 SHORT $LN10@check_dupl
$LN3@check_dupl:

; 1379 :             }
; 1380 :         }

  000ec	e9 74 ff ff ff	 jmp	 $LN5@check_dupl
$LN4@check_dupl:

; 1381 :     }

  000f1	e9 2c ff ff ff	 jmp	 $LN8@check_dupl
$LN7@check_dupl:

; 1382 :     return 0;

  000f6	33 c0		 xor	 eax, eax
$LN10@check_dupl:

; 1383 : }

  000f8	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000fc	c3		 ret	 0
check_duplicates ENDP
_TEXT	ENDS
EXTRN	PyObject_Repr:PROC
EXTRN	_PyObject_GetAttrId:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$class_name DD imagerel class_name
	DD	imagerel class_name+165
	DD	imagerel $unwind$class_name
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$class_name DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT class_name
_TEXT	SEGMENT
name$ = 32
cls$ = 64
class_name PROC						; COMDAT

; 1340 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1341 :     PyObject *name = _PyObject_GetAttrId(cls, &PyId___name__);

  00009	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId___name__
  0000e	8b c0		 mov	 eax, eax
  00010	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00016	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0001f	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00023	48 8b d0	 mov	 rdx, rax
  00026	48 8b 4c 24 40	 mov	 rcx, QWORD PTR cls$[rsp]
  0002b	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00030	48 89 44 24 20	 mov	 QWORD PTR name$[rsp], rax

; 1342 :     if (name == NULL) {

  00035	48 83 7c 24 20
	00		 cmp	 QWORD PTR name$[rsp], 0
  0003b	75 2c		 jne	 SHORT $LN7@class_name

; 1343 :         PyErr_Clear();

  0003d	e8 00 00 00 00	 call	 PyErr_Clear
$LN6@class_name:

; 1344 :         Py_XDECREF(name);

  00042	48 83 7c 24 20
	00		 cmp	 QWORD PTR name$[rsp], 0
  00048	74 0a		 je	 SHORT $LN3@class_name
  0004a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR name$[rsp]
  0004f	e8 00 00 00 00	 call	 _Py_DecRef
$LN3@class_name:
  00054	33 c0		 xor	 eax, eax
  00056	85 c0		 test	 eax, eax
  00058	75 e8		 jne	 SHORT $LN6@class_name

; 1345 :         name = PyObject_Repr(cls);

  0005a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR cls$[rsp]
  0005f	e8 00 00 00 00	 call	 PyObject_Repr
  00064	48 89 44 24 20	 mov	 QWORD PTR name$[rsp], rax
$LN7@class_name:

; 1346 :     }
; 1347 :     if (name == NULL)

  00069	48 83 7c 24 20
	00		 cmp	 QWORD PTR name$[rsp], 0
  0006f	75 04		 jne	 SHORT $LN2@class_name

; 1348 :         return NULL;

  00071	33 c0		 xor	 eax, eax
  00073	eb 2b		 jmp	 SHORT $LN8@class_name
$LN2@class_name:

; 1349 :     if (!PyUnicode_Check(name)) {

  00075	48 8b 44 24 20	 mov	 rax, QWORD PTR name$[rsp]
  0007a	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0007e	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00084	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00089	85 c0		 test	 eax, eax
  0008b	75 0e		 jne	 SHORT $LN1@class_name

; 1350 :         Py_DECREF(name);

  0008d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR name$[rsp]
  00092	e8 00 00 00 00	 call	 _Py_DecRef

; 1351 :         return NULL;

  00097	33 c0		 xor	 eax, eax
  00099	eb 05		 jmp	 SHORT $LN8@class_name
$LN1@class_name:

; 1352 :     }
; 1353 :     return name;

  0009b	48 8b 44 24 20	 mov	 rax, QWORD PTR name$[rsp]
$LN8@class_name:

; 1354 : }

  000a0	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a4	c3		 ret	 0
class_name ENDP
_TEXT	ENDS
EXTRN	_PyMem_DebugFree:PROC
EXTRN	_PxMem_Free:PROC
EXTRN	PyMem_Free:PROC
EXTRN	_PyMem_DebugMalloc:PROC
EXTRN	_PxMem_Malloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$pmerge DD imagerel pmerge
	DD	imagerel pmerge+774
	DD	imagerel $unwind$pmerge
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$pmerge DD 021101H
	DD	0110111H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT pmerge
_TEXT	SEGMENT
ok$ = 32
to_merge_size$ = 40
i$ = 48
remain$ = 56
empty_cnt$ = 64
j$ = 72
cur_list$21549 = 80
candidate$21548 = 88
j_lst$21557 = 96
j_lst$21565 = 104
tv73 = 112
tv174 = 120
tv181 = 124
acc$ = 144
to_merge$ = 152
pmerge	PROC						; COMDAT

; 1440 : pmerge(PyObject *acc, PyObject* to_merge) {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 1441 :     Py_ssize_t i, j, to_merge_size, empty_cnt;
; 1442 :     int *remain;
; 1443 :     int ok;
; 1444 : 
; 1445 :     to_merge_size = PyList_GET_SIZE(to_merge);

  00011	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR to_merge$[rsp]
  00019	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0001d	48 89 44 24 28	 mov	 QWORD PTR to_merge_size$[rsp], rax

; 1446 : 
; 1447 :     /* remain stores an index into each sublist of to_merge.
; 1448 :        remain[i] is the index of the next base in to_merge[i]
; 1449 :        that is not included in acc.
; 1450 :     */
; 1451 :     remain = (int *)PyMem_MALLOC(SIZEOF_INT*to_merge_size);

  00022	e8 00 00 00 00	 call	 _Py_PXCTX
  00027	85 c0		 test	 eax, eax
  00029	74 18		 je	 SHORT $LN21@pmerge
  0002b	48 8b 44 24 28	 mov	 rax, QWORD PTR to_merge_size$[rsp]
  00030	48 c1 e0 02	 shl	 rax, 2
  00034	48 8b c8	 mov	 rcx, rax
  00037	e8 00 00 00 00	 call	 _PxMem_Malloc
  0003c	48 89 44 24 70	 mov	 QWORD PTR tv73[rsp], rax
  00041	eb 16		 jmp	 SHORT $LN22@pmerge
$LN21@pmerge:
  00043	48 8b 44 24 28	 mov	 rax, QWORD PTR to_merge_size$[rsp]
  00048	48 c1 e0 02	 shl	 rax, 2
  0004c	48 8b c8	 mov	 rcx, rax
  0004f	e8 00 00 00 00	 call	 _PyMem_DebugMalloc
  00054	48 89 44 24 70	 mov	 QWORD PTR tv73[rsp], rax
$LN22@pmerge:
  00059	48 8b 44 24 70	 mov	 rax, QWORD PTR tv73[rsp]
  0005e	48 89 44 24 38	 mov	 QWORD PTR remain$[rsp], rax

; 1452 :     if (remain == NULL)

  00063	48 83 7c 24 38
	00		 cmp	 QWORD PTR remain$[rsp], 0
  00069	75 0a		 jne	 SHORT $LN18@pmerge

; 1453 :         return -1;

  0006b	b8 ff ff ff ff	 mov	 eax, -1
  00070	e9 89 02 00 00	 jmp	 $LN19@pmerge
$LN18@pmerge:

; 1454 :     for (i = 0; i < to_merge_size; i++)

  00075	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  0007e	eb 0d		 jmp	 SHORT $LN17@pmerge
$LN16@pmerge:
  00080	48 8b 44 24 30	 mov	 rax, QWORD PTR i$[rsp]
  00085	48 ff c0	 inc	 rax
  00088	48 89 44 24 30	 mov	 QWORD PTR i$[rsp], rax
$LN17@pmerge:
  0008d	48 8b 44 24 28	 mov	 rax, QWORD PTR to_merge_size$[rsp]
  00092	48 39 44 24 30	 cmp	 QWORD PTR i$[rsp], rax
  00097	7d 13		 jge	 SHORT $LN15@pmerge

; 1455 :         remain[i] = 0;

  00099	48 8b 44 24 38	 mov	 rax, QWORD PTR remain$[rsp]
  0009e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR i$[rsp]
  000a3	c7 04 88 00 00
	00 00		 mov	 DWORD PTR [rax+rcx*4], 0
  000aa	eb d4		 jmp	 SHORT $LN16@pmerge
$LN15@pmerge:
$again$21544:

; 1456 : 
; 1457 :   again:
; 1458 :     empty_cnt = 0;

  000ac	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR empty_cnt$[rsp], 0

; 1459 :     for (i = 0; i < to_merge_size; i++) {

  000b5	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  000be	eb 0d		 jmp	 SHORT $LN14@pmerge
$LN13@pmerge:
  000c0	48 8b 44 24 30	 mov	 rax, QWORD PTR i$[rsp]
  000c5	48 ff c0	 inc	 rax
  000c8	48 89 44 24 30	 mov	 QWORD PTR i$[rsp], rax
$LN14@pmerge:
  000cd	48 8b 44 24 28	 mov	 rax, QWORD PTR to_merge_size$[rsp]
  000d2	48 39 44 24 30	 cmp	 QWORD PTR i$[rsp], rax
  000d7	0f 8d 9c 01 00
	00		 jge	 $LN12@pmerge

; 1460 :         PyObject *candidate;
; 1461 : 
; 1462 :         PyObject *cur_list = PyList_GET_ITEM(to_merge, i);

  000dd	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR to_merge$[rsp]
  000e5	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  000e9	48 8b 4c 24 30	 mov	 rcx, QWORD PTR i$[rsp]
  000ee	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  000f2	48 89 44 24 50	 mov	 QWORD PTR cur_list$21549[rsp], rax

; 1463 : 
; 1464 :         if (remain[i] >= PyList_GET_SIZE(cur_list)) {

  000f7	48 8b 44 24 38	 mov	 rax, QWORD PTR remain$[rsp]
  000fc	48 8b 4c 24 30	 mov	 rcx, QWORD PTR i$[rsp]
  00101	48 63 04 88	 movsxd	 rax, DWORD PTR [rax+rcx*4]
  00105	48 8b 4c 24 50	 mov	 rcx, QWORD PTR cur_list$21549[rsp]
  0010a	48 3b 41 60	 cmp	 rax, QWORD PTR [rcx+96]
  0010e	7c 0f		 jl	 SHORT $LN11@pmerge

; 1465 :             empty_cnt++;

  00110	48 8b 44 24 40	 mov	 rax, QWORD PTR empty_cnt$[rsp]
  00115	48 ff c0	 inc	 rax
  00118	48 89 44 24 40	 mov	 QWORD PTR empty_cnt$[rsp], rax

; 1466 :             continue;

  0011d	eb a1		 jmp	 SHORT $LN13@pmerge
$LN11@pmerge:

; 1467 :         }
; 1468 : 
; 1469 :         /* Choose next candidate for MRO.
; 1470 : 
; 1471 :            The input sequences alone can determine the choice.
; 1472 :            If not, choose the class which appears in the MRO
; 1473 :            of the earliest direct superclass of the new class.
; 1474 :         */
; 1475 : 
; 1476 :         candidate = PyList_GET_ITEM(cur_list, remain[i]);

  0011f	48 8b 44 24 38	 mov	 rax, QWORD PTR remain$[rsp]
  00124	48 8b 4c 24 30	 mov	 rcx, QWORD PTR i$[rsp]
  00129	48 63 04 88	 movsxd	 rax, DWORD PTR [rax+rcx*4]
  0012d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR cur_list$21549[rsp]
  00132	48 8b 49 70	 mov	 rcx, QWORD PTR [rcx+112]
  00136	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  0013a	48 89 44 24 58	 mov	 QWORD PTR candidate$21548[rsp], rax

; 1477 :         for (j = 0; j < to_merge_size; j++) {

  0013f	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR j$[rsp], 0
  00148	eb 0d		 jmp	 SHORT $LN10@pmerge
$LN9@pmerge:
  0014a	48 8b 44 24 48	 mov	 rax, QWORD PTR j$[rsp]
  0014f	48 ff c0	 inc	 rax
  00152	48 89 44 24 48	 mov	 QWORD PTR j$[rsp], rax
$LN10@pmerge:
  00157	48 8b 44 24 28	 mov	 rax, QWORD PTR to_merge_size$[rsp]
  0015c	48 39 44 24 48	 cmp	 QWORD PTR j$[rsp], rax
  00161	7d 41		 jge	 SHORT $LN8@pmerge

; 1478 :             PyObject *j_lst = PyList_GET_ITEM(to_merge, j);

  00163	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR to_merge$[rsp]
  0016b	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  0016f	48 8b 4c 24 48	 mov	 rcx, QWORD PTR j$[rsp]
  00174	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  00178	48 89 44 24 60	 mov	 QWORD PTR j_lst$21557[rsp], rax

; 1479 :             if (tail_contains(j_lst, remain[j], candidate)) {

  0017d	4c 8b 44 24 58	 mov	 r8, QWORD PTR candidate$21548[rsp]
  00182	48 8b 44 24 38	 mov	 rax, QWORD PTR remain$[rsp]
  00187	48 8b 4c 24 48	 mov	 rcx, QWORD PTR j$[rsp]
  0018c	8b 14 88	 mov	 edx, DWORD PTR [rax+rcx*4]
  0018f	48 8b 4c 24 60	 mov	 rcx, QWORD PTR j_lst$21557[rsp]
  00194	e8 00 00 00 00	 call	 tail_contains
  00199	85 c0		 test	 eax, eax
  0019b	74 05		 je	 SHORT $LN7@pmerge

; 1480 :                 goto skip; /* continue outer loop */

  0019d	e9 d2 00 00 00	 jmp	 $skip$21560
$LN7@pmerge:

; 1481 :             }
; 1482 :         }

  001a2	eb a6		 jmp	 SHORT $LN9@pmerge
$LN8@pmerge:

; 1483 :         ok = PyList_Append(acc, candidate);

  001a4	48 8b 54 24 58	 mov	 rdx, QWORD PTR candidate$21548[rsp]
  001a9	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR acc$[rsp]
  001b1	e8 00 00 00 00	 call	 PyList_Append
  001b6	89 44 24 20	 mov	 DWORD PTR ok$[rsp], eax

; 1484 :         if (ok < 0) {

  001ba	83 7c 24 20 00	 cmp	 DWORD PTR ok$[rsp], 0
  001bf	7d 14		 jge	 SHORT $LN6@pmerge

; 1485 :             PyMem_Free(remain);

  001c1	48 8b 4c 24 38	 mov	 rcx, QWORD PTR remain$[rsp]
  001c6	e8 00 00 00 00	 call	 PyMem_Free

; 1486 :             return -1;

  001cb	b8 ff ff ff ff	 mov	 eax, -1
  001d0	e9 29 01 00 00	 jmp	 $LN19@pmerge
$LN6@pmerge:

; 1487 :         }
; 1488 :         for (j = 0; j < to_merge_size; j++) {

  001d5	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR j$[rsp], 0
  001de	eb 0d		 jmp	 SHORT $LN5@pmerge
$LN4@pmerge:
  001e0	48 8b 44 24 48	 mov	 rax, QWORD PTR j$[rsp]
  001e5	48 ff c0	 inc	 rax
  001e8	48 89 44 24 48	 mov	 QWORD PTR j$[rsp], rax
$LN5@pmerge:
  001ed	48 8b 44 24 28	 mov	 rax, QWORD PTR to_merge_size$[rsp]
  001f2	48 39 44 24 48	 cmp	 QWORD PTR j$[rsp], rax
  001f7	7d 76		 jge	 SHORT $LN3@pmerge

; 1489 :             PyObject *j_lst = PyList_GET_ITEM(to_merge, j);

  001f9	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR to_merge$[rsp]
  00201	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00205	48 8b 4c 24 48	 mov	 rcx, QWORD PTR j$[rsp]
  0020a	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  0020e	48 89 44 24 68	 mov	 QWORD PTR j_lst$21565[rsp], rax

; 1490 :             if (remain[j] < PyList_GET_SIZE(j_lst) &&
; 1491 :                 PyList_GET_ITEM(j_lst, remain[j]) == candidate) {

  00213	48 8b 44 24 38	 mov	 rax, QWORD PTR remain$[rsp]
  00218	48 8b 4c 24 48	 mov	 rcx, QWORD PTR j$[rsp]
  0021d	48 63 04 88	 movsxd	 rax, DWORD PTR [rax+rcx*4]
  00221	48 8b 4c 24 68	 mov	 rcx, QWORD PTR j_lst$21565[rsp]
  00226	48 3b 41 60	 cmp	 rax, QWORD PTR [rcx+96]
  0022a	7d 3e		 jge	 SHORT $LN2@pmerge
  0022c	48 8b 44 24 38	 mov	 rax, QWORD PTR remain$[rsp]
  00231	48 8b 4c 24 48	 mov	 rcx, QWORD PTR j$[rsp]
  00236	48 63 04 88	 movsxd	 rax, DWORD PTR [rax+rcx*4]
  0023a	48 8b 4c 24 68	 mov	 rcx, QWORD PTR j_lst$21565[rsp]
  0023f	48 8b 49 70	 mov	 rcx, QWORD PTR [rcx+112]
  00243	48 8b 54 24 58	 mov	 rdx, QWORD PTR candidate$21548[rsp]
  00248	48 39 14 c1	 cmp	 QWORD PTR [rcx+rax*8], rdx
  0024c	75 1c		 jne	 SHORT $LN2@pmerge

; 1492 :                 remain[j]++;

  0024e	48 8b 44 24 38	 mov	 rax, QWORD PTR remain$[rsp]
  00253	48 8b 4c 24 48	 mov	 rcx, QWORD PTR j$[rsp]
  00258	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  0025b	ff c0		 inc	 eax
  0025d	48 8b 4c 24 38	 mov	 rcx, QWORD PTR remain$[rsp]
  00262	48 8b 54 24 48	 mov	 rdx, QWORD PTR j$[rsp]
  00267	89 04 91	 mov	 DWORD PTR [rcx+rdx*4], eax
$LN2@pmerge:

; 1493 :             }
; 1494 :         }

  0026a	e9 71 ff ff ff	 jmp	 $LN4@pmerge
$LN3@pmerge:

; 1495 :         goto again;

  0026f	e9 38 fe ff ff	 jmp	 $again$21544
$skip$21560:

; 1496 :       skip: ;
; 1497 :     }

  00274	e9 47 fe ff ff	 jmp	 $LN13@pmerge
$LN12@pmerge:

; 1498 : 
; 1499 :     if (empty_cnt == to_merge_size) {

  00279	48 8b 44 24 28	 mov	 rax, QWORD PTR to_merge_size$[rsp]
  0027e	48 39 44 24 40	 cmp	 QWORD PTR empty_cnt$[rsp], rax
  00283	75 33		 jne	 SHORT $LN1@pmerge

; 1500 :         PyMem_FREE(remain);

  00285	e8 00 00 00 00	 call	 _Py_PXCTX
  0028a	85 c0		 test	 eax, eax
  0028c	74 14		 je	 SHORT $LN23@pmerge
  0028e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR remain$[rsp]
  00293	e8 00 00 00 00	 call	 _PxMem_Free
  00298	c7 44 24 78 00
	00 00 00	 mov	 DWORD PTR tv174[rsp], 0
  002a0	eb 12		 jmp	 SHORT $LN24@pmerge
$LN23@pmerge:
  002a2	48 8b 4c 24 38	 mov	 rcx, QWORD PTR remain$[rsp]
  002a7	e8 00 00 00 00	 call	 _PyMem_DebugFree
  002ac	c7 44 24 78 00
	00 00 00	 mov	 DWORD PTR tv174[rsp], 0
$LN24@pmerge:

; 1501 :         return 0;

  002b4	33 c0		 xor	 eax, eax
  002b6	eb 46		 jmp	 SHORT $LN19@pmerge
$LN1@pmerge:

; 1502 :     }
; 1503 :     set_mro_error(to_merge, remain);

  002b8	48 8b 54 24 38	 mov	 rdx, QWORD PTR remain$[rsp]
  002bd	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR to_merge$[rsp]
  002c5	e8 00 00 00 00	 call	 set_mro_error

; 1504 :     PyMem_FREE(remain);

  002ca	e8 00 00 00 00	 call	 _Py_PXCTX
  002cf	85 c0		 test	 eax, eax
  002d1	74 14		 je	 SHORT $LN25@pmerge
  002d3	48 8b 4c 24 38	 mov	 rcx, QWORD PTR remain$[rsp]
  002d8	e8 00 00 00 00	 call	 _PxMem_Free
  002dd	c7 44 24 7c 00
	00 00 00	 mov	 DWORD PTR tv181[rsp], 0
  002e5	eb 12		 jmp	 SHORT $LN26@pmerge
$LN25@pmerge:
  002e7	48 8b 4c 24 38	 mov	 rcx, QWORD PTR remain$[rsp]
  002ec	e8 00 00 00 00	 call	 _PyMem_DebugFree
  002f1	c7 44 24 7c 00
	00 00 00	 mov	 DWORD PTR tv181[rsp], 0
$LN26@pmerge:

; 1505 :     return -1;

  002f9	b8 ff ff ff ff	 mov	 eax, -1
$LN19@pmerge:

; 1506 : }

  002fe	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  00305	c3		 ret	 0
pmerge	ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$tail_contains DD imagerel tail_contains
	DD	imagerel tail_contains+111
	DD	imagerel $unwind$tail_contains
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$tail_contains DD 011201H
	DD	02212H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT tail_contains
_TEXT	SEGMENT
size$ = 0
j$ = 8
list$ = 32
whence$ = 40
o$ = 48
tail_contains PROC					; COMDAT

; 1327 : tail_contains(PyObject *list, int whence, PyObject *o) {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 18	 sub	 rsp, 24

; 1328 :     Py_ssize_t j, size;
; 1329 :     size = PyList_GET_SIZE(list);

  00012	48 8b 44 24 20	 mov	 rax, QWORD PTR list$[rsp]
  00017	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0001b	48 89 04 24	 mov	 QWORD PTR size$[rsp], rax

; 1330 : 
; 1331 :     for (j = whence+1; j < size; j++) {

  0001f	8b 44 24 28	 mov	 eax, DWORD PTR whence$[rsp]
  00023	ff c0		 inc	 eax
  00025	48 98		 cdqe
  00027	48 89 44 24 08	 mov	 QWORD PTR j$[rsp], rax
  0002c	eb 0d		 jmp	 SHORT $LN4@tail_conta
$LN3@tail_conta:
  0002e	48 8b 44 24 08	 mov	 rax, QWORD PTR j$[rsp]
  00033	48 ff c0	 inc	 rax
  00036	48 89 44 24 08	 mov	 QWORD PTR j$[rsp], rax
$LN4@tail_conta:
  0003b	48 8b 04 24	 mov	 rax, QWORD PTR size$[rsp]
  0003f	48 39 44 24 08	 cmp	 QWORD PTR j$[rsp], rax
  00044	7d 22		 jge	 SHORT $LN2@tail_conta

; 1332 :         if (PyList_GET_ITEM(list, j) == o)

  00046	48 8b 44 24 20	 mov	 rax, QWORD PTR list$[rsp]
  0004b	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  0004f	48 8b 4c 24 08	 mov	 rcx, QWORD PTR j$[rsp]
  00054	48 8b 54 24 30	 mov	 rdx, QWORD PTR o$[rsp]
  00059	48 39 14 c8	 cmp	 QWORD PTR [rax+rcx*8], rdx
  0005d	75 07		 jne	 SHORT $LN1@tail_conta

; 1333 :             return 1;

  0005f	b8 01 00 00 00	 mov	 eax, 1
  00064	eb 04		 jmp	 SHORT $LN5@tail_conta
$LN1@tail_conta:

; 1334 :     }

  00066	eb c6		 jmp	 SHORT $LN3@tail_conta
$LN2@tail_conta:

; 1335 :     return 0;

  00068	33 c0		 xor	 eax, eax
$LN5@tail_conta:

; 1336 : }

  0006a	48 83 c4 18	 add	 rsp, 24
  0006e	c3		 ret	 0
tail_contains ENDP
_TEXT	ENDS
PUBLIC	??_C@_03EEBNCBOD@?5?$CFs?$AA@			; `string'
PUBLIC	??_C@_01OGPIMHDM@?$DP?$AA@			; `string'
PUBLIC	??_C@_0ED@INELAAJC@Cannot?5create?5a?5consistent?5metho@ ; `string'
EXTRN	PyDict_Next:PROC
EXTRN	PyOS_snprintf:PROC
EXTRN	PyDict_SetItem:PROC
EXTRN	PyDict_New:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$set_mro_error DD imagerel set_mro_error
	DD	imagerel set_mro_error+648
	DD	imagerel $unwind$set_mro_error
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$set_mro_error DD 021101H
	DD	08f0111H
xdata	ENDS
;	COMDAT ??_C@_03EEBNCBOD@?5?$CFs?$AA@
CONST	SEGMENT
??_C@_03EEBNCBOD@?5?$CFs?$AA@ DB ' %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01OGPIMHDM@?$DP?$AA@
CONST	SEGMENT
??_C@_01OGPIMHDM@?$DP?$AA@ DB '?', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0ED@INELAAJC@Cannot?5create?5a?5consistent?5metho@
CONST	SEGMENT
??_C@_0ED@INELAAJC@Cannot?5create?5a?5consistent?5metho@ DB 'Cannot creat'
	DB	'e a consistent method resolution', 0aH, 'order (MRO) for base'
	DB	's', 00H					; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT set_mro_error
_TEXT	SEGMENT
v$ = 32
set$ = 40
to_merge_size$ = 48
n$ = 56
i$ = 64
off$ = 72
buf$ = 80
k$ = 1088
L$21493 = 1096
c$21497 = 1104
name$21506 = 1112
name_str$21507 = 1120
to_merge$ = 1152
remain$ = 1160
set_mro_error PROC					; COMDAT

; 1396 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec 78 04
	00 00		 sub	 rsp, 1144		; 00000478H

; 1397 :     Py_ssize_t i, n, off, to_merge_size;
; 1398 :     char buf[1000];
; 1399 :     PyObject *k, *v;
; 1400 :     PyObject *set = PyDict_New();

  00011	e8 00 00 00 00	 call	 PyDict_New
  00016	48 89 44 24 28	 mov	 QWORD PTR set$[rsp], rax

; 1401 :     if (!set) return;

  0001b	48 83 7c 24 28
	00		 cmp	 QWORD PTR set$[rsp], 0
  00021	75 05		 jne	 SHORT $LN16@set_mro_er
  00023	e9 58 02 00 00	 jmp	 $LN17@set_mro_er
$LN16@set_mro_er:

; 1402 : 
; 1403 :     to_merge_size = PyList_GET_SIZE(to_merge);

  00028	48 8b 84 24 80
	04 00 00	 mov	 rax, QWORD PTR to_merge$[rsp]
  00030	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00034	48 89 44 24 30	 mov	 QWORD PTR to_merge_size$[rsp], rax

; 1404 :     for (i = 0; i < to_merge_size; i++) {

  00039	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  00042	eb 0d		 jmp	 SHORT $LN15@set_mro_er
$LN14@set_mro_er:
  00044	48 8b 44 24 40	 mov	 rax, QWORD PTR i$[rsp]
  00049	48 ff c0	 inc	 rax
  0004c	48 89 44 24 40	 mov	 QWORD PTR i$[rsp], rax
$LN15@set_mro_er:
  00051	48 8b 44 24 30	 mov	 rax, QWORD PTR to_merge_size$[rsp]
  00056	48 39 44 24 40	 cmp	 QWORD PTR i$[rsp], rax
  0005b	0f 8d 96 00 00
	00		 jge	 $LN13@set_mro_er

; 1405 :         PyObject *L = PyList_GET_ITEM(to_merge, i);

  00061	48 8b 84 24 80
	04 00 00	 mov	 rax, QWORD PTR to_merge$[rsp]
  00069	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  0006d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR i$[rsp]
  00072	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  00076	48 89 84 24 48
	04 00 00	 mov	 QWORD PTR L$21493[rsp], rax

; 1406 :         if (remain[i] < PyList_GET_SIZE(L)) {

  0007e	48 8b 84 24 88
	04 00 00	 mov	 rax, QWORD PTR remain$[rsp]
  00086	48 8b 4c 24 40	 mov	 rcx, QWORD PTR i$[rsp]
  0008b	48 63 04 88	 movsxd	 rax, DWORD PTR [rax+rcx*4]
  0008f	48 8b 8c 24 48
	04 00 00	 mov	 rcx, QWORD PTR L$21493[rsp]
  00097	48 3b 41 60	 cmp	 rax, QWORD PTR [rcx+96]
  0009b	7d 55		 jge	 SHORT $LN12@set_mro_er

; 1407 :             PyObject *c = PyList_GET_ITEM(L, remain[i]);

  0009d	48 8b 84 24 88
	04 00 00	 mov	 rax, QWORD PTR remain$[rsp]
  000a5	48 8b 4c 24 40	 mov	 rcx, QWORD PTR i$[rsp]
  000aa	48 63 04 88	 movsxd	 rax, DWORD PTR [rax+rcx*4]
  000ae	48 8b 8c 24 48
	04 00 00	 mov	 rcx, QWORD PTR L$21493[rsp]
  000b6	48 8b 49 70	 mov	 rcx, QWORD PTR [rcx+112]
  000ba	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  000be	48 89 84 24 50
	04 00 00	 mov	 QWORD PTR c$21497[rsp], rax

; 1408 :             if (PyDict_SetItem(set, c, Py_None) < 0) {

  000c6	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:_Py_NoneStruct
  000cd	48 8b 94 24 50
	04 00 00	 mov	 rdx, QWORD PTR c$21497[rsp]
  000d5	48 8b 4c 24 28	 mov	 rcx, QWORD PTR set$[rsp]
  000da	e8 00 00 00 00	 call	 PyDict_SetItem
  000df	85 c0		 test	 eax, eax
  000e1	7d 0f		 jge	 SHORT $LN11@set_mro_er

; 1409 :                 Py_DECREF(set);

  000e3	48 8b 4c 24 28	 mov	 rcx, QWORD PTR set$[rsp]
  000e8	e8 00 00 00 00	 call	 _Py_DecRef

; 1410 :                 return;

  000ed	e9 8e 01 00 00	 jmp	 $LN17@set_mro_er
$LN11@set_mro_er:
$LN12@set_mro_er:

; 1411 :             }
; 1412 :         }
; 1413 :     }

  000f2	e9 4d ff ff ff	 jmp	 $LN14@set_mro_er
$LN13@set_mro_er:

; 1414 :     n = PyDict_Size(set);

  000f7	48 8b 4c 24 28	 mov	 rcx, QWORD PTR set$[rsp]
  000fc	e8 00 00 00 00	 call	 PyDict_Size
  00101	48 89 44 24 38	 mov	 QWORD PTR n$[rsp], rax

; 1415 : 
; 1416 :     off = PyOS_snprintf(buf, sizeof(buf), "Cannot create a \
; 1417 : consistent method resolution\norder (MRO) for bases");

  00106	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0ED@INELAAJC@Cannot?5create?5a?5consistent?5metho@
  0010d	ba e8 03 00 00	 mov	 edx, 1000		; 000003e8H
  00112	48 8d 4c 24 50	 lea	 rcx, QWORD PTR buf$[rsp]
  00117	e8 00 00 00 00	 call	 PyOS_snprintf
  0011c	48 98		 cdqe
  0011e	48 89 44 24 48	 mov	 QWORD PTR off$[rsp], rax

; 1418 :     i = 0;

  00123	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
$LN10@set_mro_er:

; 1419 :     while (PyDict_Next(set, &i, &k, &v) && (size_t)off < sizeof(buf)) {

  0012c	4c 8d 4c 24 20	 lea	 r9, QWORD PTR v$[rsp]
  00131	4c 8d 84 24 40
	04 00 00	 lea	 r8, QWORD PTR k$[rsp]
  00139	48 8d 54 24 40	 lea	 rdx, QWORD PTR i$[rsp]
  0013e	48 8b 4c 24 28	 mov	 rcx, QWORD PTR set$[rsp]
  00143	e8 00 00 00 00	 call	 PyDict_Next
  00148	85 c0		 test	 eax, eax
  0014a	0f 84 15 01 00
	00		 je	 $LN9@set_mro_er
  00150	48 81 7c 24 48
	e8 03 00 00	 cmp	 QWORD PTR off$[rsp], 1000 ; 000003e8H
  00159	0f 83 06 01 00
	00		 jae	 $LN9@set_mro_er

; 1420 :         PyObject *name = class_name(k);

  0015f	48 8b 8c 24 40
	04 00 00	 mov	 rcx, QWORD PTR k$[rsp]
  00167	e8 00 00 00 00	 call	 class_name
  0016c	48 89 84 24 58
	04 00 00	 mov	 QWORD PTR name$21506[rsp], rax

; 1421 :         char *name_str;
; 1422 :         if (name != NULL) {

  00174	48 83 bc 24 58
	04 00 00 00	 cmp	 QWORD PTR name$21506[rsp], 0
  0017d	74 31		 je	 SHORT $LN8@set_mro_er

; 1423 :             name_str = _PyUnicode_AsString(name);

  0017f	48 8b 8c 24 58
	04 00 00	 mov	 rcx, QWORD PTR name$21506[rsp]
  00187	e8 00 00 00 00	 call	 PyUnicode_AsUTF8
  0018c	48 89 84 24 60
	04 00 00	 mov	 QWORD PTR name_str$21507[rsp], rax

; 1424 :             if (name_str == NULL)

  00194	48 83 bc 24 60
	04 00 00 00	 cmp	 QWORD PTR name_str$21507[rsp], 0
  0019d	75 0f		 jne	 SHORT $LN7@set_mro_er

; 1425 :                 name_str = "?";

  0019f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_01OGPIMHDM@?$DP?$AA@
  001a6	48 89 84 24 60
	04 00 00	 mov	 QWORD PTR name_str$21507[rsp], rax
$LN7@set_mro_er:

; 1426 :         } else

  001ae	eb 0f		 jmp	 SHORT $LN6@set_mro_er
$LN8@set_mro_er:

; 1427 :             name_str = "?";

  001b0	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_01OGPIMHDM@?$DP?$AA@
  001b7	48 89 84 24 60
	04 00 00	 mov	 QWORD PTR name_str$21507[rsp], rax
$LN6@set_mro_er:

; 1428 :         off += PyOS_snprintf(buf + off, sizeof(buf) - off, " %s", name_str);

  001bf	b8 e8 03 00 00	 mov	 eax, 1000		; 000003e8H
  001c4	48 2b 44 24 48	 sub	 rax, QWORD PTR off$[rsp]
  001c9	48 8b 4c 24 48	 mov	 rcx, QWORD PTR off$[rsp]
  001ce	48 8d 4c 0c 50	 lea	 rcx, QWORD PTR buf$[rsp+rcx]
  001d3	4c 8b 8c 24 60
	04 00 00	 mov	 r9, QWORD PTR name_str$21507[rsp]
  001db	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03EEBNCBOD@?5?$CFs?$AA@
  001e2	48 8b d0	 mov	 rdx, rax
  001e5	e8 00 00 00 00	 call	 PyOS_snprintf
  001ea	48 98		 cdqe
  001ec	48 8b 4c 24 48	 mov	 rcx, QWORD PTR off$[rsp]
  001f1	48 03 c8	 add	 rcx, rax
  001f4	48 8b c1	 mov	 rax, rcx
  001f7	48 89 44 24 48	 mov	 QWORD PTR off$[rsp], rax
$LN5@set_mro_er:

; 1429 :         Py_XDECREF(name);

  001fc	48 83 bc 24 58
	04 00 00 00	 cmp	 QWORD PTR name$21506[rsp], 0
  00205	74 0d		 je	 SHORT $LN2@set_mro_er
  00207	48 8b 8c 24 58
	04 00 00	 mov	 rcx, QWORD PTR name$21506[rsp]
  0020f	e8 00 00 00 00	 call	 _Py_DecRef
$LN2@set_mro_er:
  00214	33 c0		 xor	 eax, eax
  00216	85 c0		 test	 eax, eax
  00218	75 e2		 jne	 SHORT $LN5@set_mro_er

; 1430 :         if (--n && (size_t)(off+1) < sizeof(buf)) {

  0021a	48 8b 44 24 38	 mov	 rax, QWORD PTR n$[rsp]
  0021f	48 ff c8	 dec	 rax
  00222	48 89 44 24 38	 mov	 QWORD PTR n$[rsp], rax
  00227	48 83 7c 24 38
	00		 cmp	 QWORD PTR n$[rsp], 0
  0022d	74 31		 je	 SHORT $LN1@set_mro_er
  0022f	48 8b 44 24 48	 mov	 rax, QWORD PTR off$[rsp]
  00234	48 ff c0	 inc	 rax
  00237	48 3d e8 03 00
	00		 cmp	 rax, 1000		; 000003e8H
  0023d	73 21		 jae	 SHORT $LN1@set_mro_er

; 1431 :             buf[off++] = ',';

  0023f	48 8b 44 24 48	 mov	 rax, QWORD PTR off$[rsp]
  00244	c6 44 04 50 2c	 mov	 BYTE PTR buf$[rsp+rax], 44 ; 0000002cH
  00249	48 8b 44 24 48	 mov	 rax, QWORD PTR off$[rsp]
  0024e	48 ff c0	 inc	 rax
  00251	48 89 44 24 48	 mov	 QWORD PTR off$[rsp], rax

; 1432 :             buf[off] = '\0';

  00256	48 8b 44 24 48	 mov	 rax, QWORD PTR off$[rsp]
  0025b	c6 44 04 50 00	 mov	 BYTE PTR buf$[rsp+rax], 0
$LN1@set_mro_er:

; 1433 :         }
; 1434 :     }

  00260	e9 c7 fe ff ff	 jmp	 $LN10@set_mro_er
$LN9@set_mro_er:

; 1435 :     PyErr_SetString(PyExc_TypeError, buf);

  00265	48 8d 54 24 50	 lea	 rdx, QWORD PTR buf$[rsp]
  0026a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00271	e8 00 00 00 00	 call	 PyErr_SetString

; 1436 :     Py_DECREF(set);

  00276	48 8b 4c 24 28	 mov	 rcx, QWORD PTR set$[rsp]
  0027b	e8 00 00 00 00	 call	 _Py_DecRef
$LN17@set_mro_er:

; 1437 : }

  00280	48 81 c4 78 04
	00 00		 add	 rsp, 1144		; 00000478H
  00287	c3		 ret	 0
set_mro_error ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DG@JNNGGHAI@mro?$CI?$CJ?5returned?5base?5with?5unsuita@ ; `string'
PUBLIC	??_C@_0CG@JPMDLIMJ@mro?$CI?$CJ?5returned?5a?5non?9class?5?$CI?8?$CF?45@ ; `string'
EXTRN	PySequence_Tuple:PROC
EXTRN	PyObject_CallObject:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$mro_internal DD imagerel mro_internal
	DD	imagerel mro_internal+581
	DD	imagerel $unwind$mro_internal
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mro_internal DD 010901H
	DD	0e209H
xdata	ENDS
;	COMDAT ??_C@_0DG@JNNGGHAI@mro?$CI?$CJ?5returned?5base?5with?5unsuita@
CONST	SEGMENT
??_C@_0DG@JNNGGHAI@mro?$CI?$CJ?5returned?5base?5with?5unsuita@ DB 'mro() '
	DB	'returned base with unsuitable layout (''%.500s'')', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@JPMDLIMJ@mro?$CI?$CJ?5returned?5a?5non?9class?5?$CI?8?$CF?45@
CONST	SEGMENT
??_C@_0CG@JPMDLIMJ@mro?$CI?$CJ?5returned?5a?5non?9class?5?$CI?8?$CF?45@ DB 'm'
	DB	'ro() returned a non-class (''%.500s'')', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT mro_internal
_TEXT	SEGMENT
mro$ = 32
tuple$ = 40
checkit$ = 48
result$ = 56
i$21651 = 64
cls$21653 = 72
len$21652 = 80
solid$21654 = 88
t$21659 = 96
type$ = 128
mro_internal PROC					; COMDAT

; 1588 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 1589 :     PyObject *mro, *result, *tuple;
; 1590 :     int checkit = 0;

  00009	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR checkit$[rsp], 0

; 1591 : 
; 1592 :     if (Py_TYPE(type) == &PyType_Type) {

  00011	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyType_Type
  00018	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR type$[rsp]
  00020	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00024	75 14		 jne	 SHORT $LN11@mro_intern

; 1593 :         result = mro_implementation(type);

  00026	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR type$[rsp]
  0002e	e8 00 00 00 00	 call	 mro_implementation
  00033	48 89 44 24 38	 mov	 QWORD PTR result$[rsp], rax

; 1594 :     }
; 1595 :     else {

  00038	eb 64		 jmp	 SHORT $LN10@mro_intern
$LN11@mro_intern:

; 1596 :         _Py_IDENTIFIER(mro);
; 1597 :         checkit = 1;

  0003a	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR checkit$[rsp], 1

; 1598 :         mro = lookup_method((PyObject *)type, &PyId_mro);

  00042	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId_mro@?3??mro_internal@@9@9
  00047	8b c0		 mov	 eax, eax
  00049	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0004f	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00058	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0005c	48 8b d0	 mov	 rdx, rax
  0005f	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR type$[rsp]
  00067	e8 00 00 00 00	 call	 lookup_method
  0006c	48 89 44 24 20	 mov	 QWORD PTR mro$[rsp], rax

; 1599 :         if (mro == NULL)

  00071	48 83 7c 24 20
	00		 cmp	 QWORD PTR mro$[rsp], 0
  00077	75 0a		 jne	 SHORT $LN9@mro_intern

; 1600 :             return -1;

  00079	b8 ff ff ff ff	 mov	 eax, -1
  0007e	e9 bd 01 00 00	 jmp	 $LN12@mro_intern
$LN9@mro_intern:

; 1601 :         result = PyObject_CallObject(mro, NULL);

  00083	33 d2		 xor	 edx, edx
  00085	48 8b 4c 24 20	 mov	 rcx, QWORD PTR mro$[rsp]
  0008a	e8 00 00 00 00	 call	 PyObject_CallObject
  0008f	48 89 44 24 38	 mov	 QWORD PTR result$[rsp], rax

; 1602 :         Py_DECREF(mro);

  00094	48 8b 4c 24 20	 mov	 rcx, QWORD PTR mro$[rsp]
  00099	e8 00 00 00 00	 call	 _Py_DecRef
$LN10@mro_intern:

; 1603 :     }
; 1604 :     if (result == NULL)

  0009e	48 83 7c 24 38
	00		 cmp	 QWORD PTR result$[rsp], 0
  000a4	75 0a		 jne	 SHORT $LN8@mro_intern

; 1605 :         return -1;

  000a6	b8 ff ff ff ff	 mov	 eax, -1
  000ab	e9 90 01 00 00	 jmp	 $LN12@mro_intern
$LN8@mro_intern:

; 1606 :     tuple = PySequence_Tuple(result);

  000b0	48 8b 4c 24 38	 mov	 rcx, QWORD PTR result$[rsp]
  000b5	e8 00 00 00 00	 call	 PySequence_Tuple
  000ba	48 89 44 24 28	 mov	 QWORD PTR tuple$[rsp], rax

; 1607 :     Py_DECREF(result);

  000bf	48 8b 4c 24 38	 mov	 rcx, QWORD PTR result$[rsp]
  000c4	e8 00 00 00 00	 call	 _Py_DecRef

; 1608 :     if (tuple == NULL)

  000c9	48 83 7c 24 28
	00		 cmp	 QWORD PTR tuple$[rsp], 0
  000cf	75 0a		 jne	 SHORT $LN7@mro_intern

; 1609 :         return -1;

  000d1	b8 ff ff ff ff	 mov	 eax, -1
  000d6	e9 65 01 00 00	 jmp	 $LN12@mro_intern
$LN7@mro_intern:

; 1610 :     if (checkit) {

  000db	83 7c 24 30 00	 cmp	 DWORD PTR checkit$[rsp], 0
  000e0	0f 84 ff 00 00
	00		 je	 $LN6@mro_intern

; 1611 :         Py_ssize_t i, len;
; 1612 :         PyObject *cls;
; 1613 :         PyTypeObject *solid;
; 1614 : 
; 1615 :         solid = solid_base(type);

  000e6	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR type$[rsp]
  000ee	e8 00 00 00 00	 call	 solid_base
  000f3	48 89 44 24 58	 mov	 QWORD PTR solid$21654[rsp], rax

; 1616 : 
; 1617 :         len = PyTuple_GET_SIZE(tuple);

  000f8	48 8b 44 24 28	 mov	 rax, QWORD PTR tuple$[rsp]
  000fd	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00101	48 89 44 24 50	 mov	 QWORD PTR len$21652[rsp], rax

; 1618 : 
; 1619 :         for (i = 0; i < len; i++) {

  00106	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR i$21651[rsp], 0
  0010f	eb 0d		 jmp	 SHORT $LN5@mro_intern
$LN4@mro_intern:
  00111	48 8b 44 24 40	 mov	 rax, QWORD PTR i$21651[rsp]
  00116	48 ff c0	 inc	 rax
  00119	48 89 44 24 40	 mov	 QWORD PTR i$21651[rsp], rax
$LN5@mro_intern:
  0011e	48 8b 44 24 50	 mov	 rax, QWORD PTR len$21652[rsp]
  00123	48 39 44 24 40	 cmp	 QWORD PTR i$21651[rsp], rax
  00128	0f 8d b7 00 00
	00		 jge	 $LN3@mro_intern

; 1620 :             PyTypeObject *t;
; 1621 :             cls = PyTuple_GET_ITEM(tuple, i);

  0012e	48 8b 44 24 28	 mov	 rax, QWORD PTR tuple$[rsp]
  00133	48 8b 4c 24 40	 mov	 rcx, QWORD PTR i$21651[rsp]
  00138	48 8b 44 c8 70	 mov	 rax, QWORD PTR [rax+rcx*8+112]
  0013d	48 89 44 24 48	 mov	 QWORD PTR cls$21653[rsp], rax

; 1622 :             if (!PyType_Check(cls)) {

  00142	48 8b 44 24 48	 mov	 rax, QWORD PTR cls$21653[rsp]
  00147	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0014b	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00151	25 00 00 00 80	 and	 eax, -2147483648	; ffffffff80000000H
  00156	85 c0		 test	 eax, eax
  00158	75 34		 jne	 SHORT $LN2@mro_intern

; 1623 :                 PyErr_Format(PyExc_TypeError,
; 1624 :                  "mro() returned a non-class ('%.500s')",
; 1625 :                                  Py_TYPE(cls)->tp_name);

  0015a	48 8b 44 24 48	 mov	 rax, QWORD PTR cls$21653[rsp]
  0015f	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00163	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  00167	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@JPMDLIMJ@mro?$CI?$CJ?5returned?5a?5non?9class?5?$CI?8?$CF?45@
  0016e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00175	e8 00 00 00 00	 call	 PyErr_Format

; 1626 :                 Py_DECREF(tuple);

  0017a	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tuple$[rsp]
  0017f	e8 00 00 00 00	 call	 _Py_DecRef

; 1627 :                 return -1;

  00184	b8 ff ff ff ff	 mov	 eax, -1
  00189	e9 b2 00 00 00	 jmp	 $LN12@mro_intern
$LN2@mro_intern:

; 1628 :             }
; 1629 :             t = (PyTypeObject*)cls;

  0018e	48 8b 44 24 48	 mov	 rax, QWORD PTR cls$21653[rsp]
  00193	48 89 44 24 60	 mov	 QWORD PTR t$21659[rsp], rax

; 1630 :             if (!PyType_IsSubtype(solid, solid_base(t))) {

  00198	48 8b 4c 24 60	 mov	 rcx, QWORD PTR t$21659[rsp]
  0019d	e8 00 00 00 00	 call	 solid_base
  001a2	48 8b d0	 mov	 rdx, rax
  001a5	48 8b 4c 24 58	 mov	 rcx, QWORD PTR solid$21654[rsp]
  001aa	e8 00 00 00 00	 call	 PyType_IsSubtype
  001af	85 c0		 test	 eax, eax
  001b1	75 2d		 jne	 SHORT $LN1@mro_intern

; 1631 :                 PyErr_Format(PyExc_TypeError,
; 1632 :              "mro() returned base with unsuitable layout ('%.500s')",
; 1633 :                                      t->tp_name);

  001b3	48 8b 44 24 60	 mov	 rax, QWORD PTR t$21659[rsp]
  001b8	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  001bc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DG@JNNGGHAI@mro?$CI?$CJ?5returned?5base?5with?5unsuita@
  001c3	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  001ca	e8 00 00 00 00	 call	 PyErr_Format

; 1634 :                         Py_DECREF(tuple);

  001cf	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tuple$[rsp]
  001d4	e8 00 00 00 00	 call	 _Py_DecRef

; 1635 :                         return -1;

  001d9	b8 ff ff ff ff	 mov	 eax, -1
  001de	eb 60		 jmp	 SHORT $LN12@mro_intern
$LN1@mro_intern:

; 1636 :             }
; 1637 :         }

  001e0	e9 2c ff ff ff	 jmp	 $LN4@mro_intern
$LN3@mro_intern:
$LN6@mro_intern:

; 1638 :     }
; 1639 :     type->tp_mro = tuple;

  001e5	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  001ed	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tuple$[rsp]
  001f2	48 89 88 b0 01
	00 00		 mov	 QWORD PTR [rax+432], rcx

; 1640 : 
; 1641 :     type_mro_modified(type, type->tp_mro);

  001f9	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  00201	48 8b 90 b0 01
	00 00		 mov	 rdx, QWORD PTR [rax+432]
  00208	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR type$[rsp]
  00210	e8 00 00 00 00	 call	 type_mro_modified

; 1642 :     /* corner case: the super class might have been hidden
; 1643 :        from the custom MRO */
; 1644 :     type_mro_modified(type, type->tp_bases);

  00215	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  0021d	48 8b 90 a8 01
	00 00		 mov	 rdx, QWORD PTR [rax+424]
  00224	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR type$[rsp]
  0022c	e8 00 00 00 00	 call	 type_mro_modified

; 1645 : 
; 1646 :     PyType_Modified(type);

  00231	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR type$[rsp]
  00239	e8 00 00 00 00	 call	 PyType_Modified

; 1647 : 
; 1648 :     return 0;

  0023e	33 c0		 xor	 eax, eax
$LN12@mro_intern:

; 1649 : }

  00240	48 83 c4 78	 add	 rsp, 120		; 00000078H
  00244	c3		 ret	 0
mro_internal ENDP
_TEXT	ENDS
PUBLIC	??_C@_1CA@PBFFDLKP@?$AAP?$AAy?$AAT?$AAy?$AAp?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AA?$CJ?$AA?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$type_mro_modified DD imagerel type_mro_modified
	DD	imagerel type_mro_modified+276
	DD	imagerel $unwind$type_mro_modified
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$type_mro_modified DD 010e01H
	DD	0a20eH
xdata	ENDS
;	COMDAT ??_C@_1CA@PBFFDLKP@?$AAP?$AAy?$AAT?$AAy?$AAp?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CA@PBFFDLKP@?$AAP?$AAy?$AAT?$AAy?$AAp?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'T', 00H, 'y', 00H, 'p', 00H, 'e', 00H, '_', 00H
	DB	'C', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, '(', 00H, 'b'
	DB	00H, ')', 00H, 00H, 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT type_mro_modified
_TEXT	SEGMENT
n$ = 32
i$ = 40
clear$ = 48
cls$20475 = 56
b$20473 = 64
type$ = 96
bases$ = 104
type_mro_modified PROC					; COMDAT

; 118  : type_mro_modified(PyTypeObject *type, PyObject *bases) {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 119  :     /*
; 120  :        Check that all base classes or elements of the MRO of type are
; 121  :        able to be cached.  This function is called after the base
; 122  :        classes or mro of the type are altered.
; 123  : 
; 124  :        Unset HAVE_VERSION_TAG and VALID_VERSION_TAG if the type
; 125  :        has a custom MRO that includes a type which is not officially
; 126  :        super type.
; 127  : 
; 128  :        Called from mro_internal, which will subsequently be called on
; 129  :        each subclass when their mro is recursively updated.
; 130  :      */
; 131  :     Py_ssize_t i, n;
; 132  :     int clear = 0;

  0000e	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR clear$[rsp], 0

; 133  : 
; 134  :     if (!PyType_HasFeature(type, Py_TPFLAGS_HAVE_VERSION_TAG))

  00016	48 8b 44 24 60	 mov	 rax, QWORD PTR type$[rsp]
  0001b	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00021	25 00 00 04 00	 and	 eax, 262144		; 00040000H
  00026	85 c0		 test	 eax, eax
  00028	75 05		 jne	 SHORT $LN7@type_mro_m

; 135  :         return;

  0002a	e9 e0 00 00 00	 jmp	 $LN8@type_mro_m
$LN7@type_mro_m:

; 136  : 
; 137  :     n = PyTuple_GET_SIZE(bases);

  0002f	48 8b 44 24 68	 mov	 rax, QWORD PTR bases$[rsp]
  00034	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00038	48 89 44 24 20	 mov	 QWORD PTR n$[rsp], rax

; 138  :     for (i = 0; i < n; i++) {

  0003d	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  00046	eb 0d		 jmp	 SHORT $LN6@type_mro_m
$LN5@type_mro_m:
  00048	48 8b 44 24 28	 mov	 rax, QWORD PTR i$[rsp]
  0004d	48 ff c0	 inc	 rax
  00050	48 89 44 24 28	 mov	 QWORD PTR i$[rsp], rax
$LN6@type_mro_m:
  00055	48 8b 44 24 20	 mov	 rax, QWORD PTR n$[rsp]
  0005a	48 39 44 24 28	 cmp	 QWORD PTR i$[rsp], rax
  0005f	0f 8d 88 00 00
	00		 jge	 $LN4@type_mro_m

; 139  :         PyObject *b = PyTuple_GET_ITEM(bases, i);

  00065	48 8b 44 24 68	 mov	 rax, QWORD PTR bases$[rsp]
  0006a	48 8b 4c 24 28	 mov	 rcx, QWORD PTR i$[rsp]
  0006f	48 8b 44 c8 70	 mov	 rax, QWORD PTR [rax+rcx*8+112]
  00074	48 89 44 24 40	 mov	 QWORD PTR b$20473[rsp], rax

; 140  :         PyTypeObject *cls;
; 141  : 
; 142  :         assert(PyType_Check(b));

  00079	48 8b 44 24 40	 mov	 rax, QWORD PTR b$20473[rsp]
  0007e	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00082	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00088	25 00 00 00 80	 and	 eax, -2147483648	; ffffffff80000000H
  0008d	85 c0		 test	 eax, eax
  0008f	75 1c		 jne	 SHORT $LN10@type_mro_m
  00091	41 b8 8e 00 00
	00		 mov	 r8d, 142		; 0000008eH
  00097	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@GJLLIOPA@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAt?$AAy?$AAp?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  0009e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CA@PBFFDLKP@?$AAP?$AAy?$AAT?$AAy?$AAp?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AA?$CJ?$AA?$AA@
  000a5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000ab	33 c0		 xor	 eax, eax
$LN10@type_mro_m:

; 143  :         cls = (PyTypeObject *)b;

  000ad	48 8b 44 24 40	 mov	 rax, QWORD PTR b$20473[rsp]
  000b2	48 89 44 24 38	 mov	 QWORD PTR cls$20475[rsp], rax

; 144  : 
; 145  :         if (!PyType_HasFeature(cls, Py_TPFLAGS_HAVE_VERSION_TAG) ||
; 146  :             !PyType_IsSubtype(type, cls)) {

  000b7	48 8b 44 24 38	 mov	 rax, QWORD PTR cls$20475[rsp]
  000bc	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000c2	25 00 00 04 00	 and	 eax, 262144		; 00040000H
  000c7	85 c0		 test	 eax, eax
  000c9	74 13		 je	 SHORT $LN2@type_mro_m
  000cb	48 8b 54 24 38	 mov	 rdx, QWORD PTR cls$20475[rsp]
  000d0	48 8b 4c 24 60	 mov	 rcx, QWORD PTR type$[rsp]
  000d5	e8 00 00 00 00	 call	 PyType_IsSubtype
  000da	85 c0		 test	 eax, eax
  000dc	75 0a		 jne	 SHORT $LN3@type_mro_m
$LN2@type_mro_m:

; 147  :             clear = 1;

  000de	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR clear$[rsp], 1

; 148  :             break;

  000e6	eb 05		 jmp	 SHORT $LN4@type_mro_m
$LN3@type_mro_m:

; 149  :         }
; 150  :     }

  000e8	e9 5b ff ff ff	 jmp	 $LN5@type_mro_m
$LN4@type_mro_m:

; 151  : 
; 152  :     if (clear)

  000ed	83 7c 24 30 00	 cmp	 DWORD PTR clear$[rsp], 0
  000f2	74 1b		 je	 SHORT $LN1@type_mro_m

; 153  :         type->tp_flags &= ~(Py_TPFLAGS_HAVE_VERSION_TAG|
; 154  :                             Py_TPFLAGS_VALID_VERSION_TAG);

  000f4	48 8b 44 24 60	 mov	 rax, QWORD PTR type$[rsp]
  000f9	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000ff	25 ff ff f3 ff	 and	 eax, -786433		; fffffffffff3ffffH
  00104	48 8b 4c 24 60	 mov	 rcx, QWORD PTR type$[rsp]
  00109	89 81 00 01 00
	00		 mov	 DWORD PTR [rcx+256], eax
$LN1@type_mro_m:
$LN8@type_mro_m:

; 155  : }

  0010f	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00113	c3		 ret	 0
type_mro_modified ENDP
_TEXT	ENDS
EXTRN	PyErr_SetObject:PROC
EXTRN	PyErr_Occurred:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$lookup_method DD imagerel lookup_method
	DD	imagerel lookup_method+83
	DD	imagerel $unwind$lookup_method
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$lookup_method DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT lookup_method
_TEXT	SEGMENT
res$ = 32
self$ = 64
attrid$ = 72
lookup_method PROC					; COMDAT

; 1211 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1212 :     PyObject *res = lookup_maybe(self, attrid);

  0000e	48 8b 54 24 48	 mov	 rdx, QWORD PTR attrid$[rsp]
  00013	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  00018	e8 00 00 00 00	 call	 lookup_maybe
  0001d	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax

; 1213 :     if (res == NULL && !PyErr_Occurred())

  00022	48 83 7c 24 20
	00		 cmp	 QWORD PTR res$[rsp], 0
  00028	75 1f		 jne	 SHORT $LN1@lookup_met
  0002a	e8 00 00 00 00	 call	 PyErr_Occurred
  0002f	48 85 c0	 test	 rax, rax
  00032	75 15		 jne	 SHORT $LN1@lookup_met

; 1214 :         PyErr_SetObject(PyExc_AttributeError, attrid->object);

  00034	48 8b 44 24 48	 mov	 rax, QWORD PTR attrid$[rsp]
  00039	48 8b 50 10	 mov	 rdx, QWORD PTR [rax+16]
  0003d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_AttributeError
  00044	e8 00 00 00 00	 call	 PyErr_SetObject
$LN1@lookup_met:

; 1215 :     return res;

  00049	48 8b 44 24 20	 mov	 rax, QWORD PTR res$[rsp]

; 1216 : }

  0004e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00052	c3		 ret	 0
lookup_method ENDP
_TEXT	ENDS
PUBLIC	??_C@_1BK@FFEIJADH@?$AAb?$AAa?$AAs?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ ; `string'
PUBLIC	??_C@_0CO@LJBIILHK@multiple?5bases?5have?5instance?5lay@ ; `string'
PUBLIC	??_C@_0BE@NNKNACHA@bases?5must?5be?5types?$AA@	; `string'
PUBLIC	??_C@_1M@GNNEDJIO@?$AAn?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CK@KPIEHDLB@?$AAP?$AAy?$AAT?$AAu?$AAp?$AAl?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AAa?$AAs?$AAe?$AAs?$AA?$CJ?$AA?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$best_base DD imagerel best_base
	DD	imagerel best_base+466
	DD	imagerel $unwind$best_base
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$best_base DD 010901H
	DD	0c209H
xdata	ENDS
;	COMDAT ??_C@_1BK@FFEIJADH@?$AAb?$AAa?$AAs?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
CONST	SEGMENT
??_C@_1BK@FFEIJADH@?$AAb?$AAa?$AAs?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ DB 'b'
	DB	00H, 'a', 00H, 's', 00H, 'e', 00H, ' ', 00H, '!', 00H, '=', 00H
	DB	' ', 00H, 'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@LJBIILHK@multiple?5bases?5have?5instance?5lay@
CONST	SEGMENT
??_C@_0CO@LJBIILHK@multiple?5bases?5have?5instance?5lay@ DB 'multiple bas'
	DB	'es have instance lay-out conflict', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@NNKNACHA@bases?5must?5be?5types?$AA@
CONST	SEGMENT
??_C@_0BE@NNKNACHA@bases?5must?5be?5types?$AA@ DB 'bases must be types', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1M@GNNEDJIO@?$AAn?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1M@GNNEDJIO@?$AAn?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@ DB 'n', 00H, ' '
	DB	00H, '>', 00H, ' ', 00H, '0', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@KPIEHDLB@?$AAP?$AAy?$AAT?$AAu?$AAp?$AAl?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AAa?$AAs?$AAe?$AAs?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CK@KPIEHDLB@?$AAP?$AAy?$AAT?$AAu?$AAp?$AAl?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AAa?$AAs?$AAe?$AAs?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'T', 00H, 'u', 00H, 'p', 00H, 'l', 00H, 'e', 00H
	DB	'_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, '('
	DB	00H, 'b', 00H, 'a', 00H, 's', 00H, 'e', 00H, 's', 00H, ')', 00H
	DB	00H, 00H					; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT best_base
_TEXT	SEGMENT
n$ = 32
i$ = 40
winner$ = 48
base$ = 56
base_proto$ = 64
base_i$ = 72
candidate$ = 80
bases$ = 112
best_base PROC						; COMDAT

; 1657 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 1658 :     Py_ssize_t i, n;
; 1659 :     PyTypeObject *base, *winner, *candidate, *base_i;
; 1660 :     PyObject *base_proto;
; 1661 : 
; 1662 :     assert(PyTuple_Check(bases));

  00009	48 8b 44 24 70	 mov	 rax, QWORD PTR bases$[rsp]
  0000e	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00012	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00018	25 00 00 00 04	 and	 eax, 67108864		; 04000000H
  0001d	85 c0		 test	 eax, eax
  0001f	75 1c		 jne	 SHORT $LN15@best_base
  00021	41 b8 7e 06 00
	00		 mov	 r8d, 1662		; 0000067eH
  00027	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@GJLLIOPA@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAt?$AAy?$AAp?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  0002e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@KPIEHDLB@?$AAP?$AAy?$AAT?$AAu?$AAp?$AAl?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AAa?$AAs?$AAe?$AAs?$AA?$CJ?$AA?$AA@
  00035	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0003b	33 c0		 xor	 eax, eax
$LN15@best_base:

; 1663 :     n = PyTuple_GET_SIZE(bases);

  0003d	48 8b 44 24 70	 mov	 rax, QWORD PTR bases$[rsp]
  00042	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00046	48 89 44 24 20	 mov	 QWORD PTR n$[rsp], rax

; 1664 :     assert(n > 0);

  0004b	48 83 7c 24 20
	00		 cmp	 QWORD PTR n$[rsp], 0
  00051	7f 1c		 jg	 SHORT $LN16@best_base
  00053	41 b8 80 06 00
	00		 mov	 r8d, 1664		; 00000680H
  00059	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@GJLLIOPA@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAt?$AAy?$AAp?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00060	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1M@GNNEDJIO@?$AAn?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@
  00067	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0006d	33 c0		 xor	 eax, eax
$LN16@best_base:

; 1665 :     base = NULL;

  0006f	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR base$[rsp], 0

; 1666 :     winner = NULL;

  00078	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR winner$[rsp], 0

; 1667 :     for (i = 0; i < n; i++) {

  00081	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  0008a	eb 0d		 jmp	 SHORT $LN12@best_base
$LN11@best_base:
  0008c	48 8b 44 24 28	 mov	 rax, QWORD PTR i$[rsp]
  00091	48 ff c0	 inc	 rax
  00094	48 89 44 24 28	 mov	 QWORD PTR i$[rsp], rax
$LN12@best_base:
  00099	48 8b 44 24 20	 mov	 rax, QWORD PTR n$[rsp]
  0009e	48 39 44 24 28	 cmp	 QWORD PTR i$[rsp], rax
  000a3	0f 8d fb 00 00
	00		 jge	 $LN10@best_base

; 1668 :         base_proto = PyTuple_GET_ITEM(bases, i);

  000a9	48 8b 44 24 70	 mov	 rax, QWORD PTR bases$[rsp]
  000ae	48 8b 4c 24 28	 mov	 rcx, QWORD PTR i$[rsp]
  000b3	48 8b 44 c8 70	 mov	 rax, QWORD PTR [rax+rcx*8+112]
  000b8	48 89 44 24 40	 mov	 QWORD PTR base_proto$[rsp], rax

; 1669 :         if (!PyType_Check(base_proto)) {

  000bd	48 8b 44 24 40	 mov	 rax, QWORD PTR base_proto$[rsp]
  000c2	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000c6	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000cc	25 00 00 00 80	 and	 eax, -2147483648	; ffffffff80000000H
  000d1	85 c0		 test	 eax, eax
  000d3	75 1a		 jne	 SHORT $LN9@best_base

; 1670 :             PyErr_SetString(
; 1671 :                 PyExc_TypeError,
; 1672 :                 "bases must be types");

  000d5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@NNKNACHA@bases?5must?5be?5types?$AA@
  000dc	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000e3	e8 00 00 00 00	 call	 PyErr_SetString

; 1673 :             return NULL;

  000e8	33 c0		 xor	 eax, eax
  000ea	e9 de 00 00 00	 jmp	 $LN13@best_base
$LN9@best_base:

; 1674 :         }
; 1675 :         base_i = (PyTypeObject *)base_proto;

  000ef	48 8b 44 24 40	 mov	 rax, QWORD PTR base_proto$[rsp]
  000f4	48 89 44 24 48	 mov	 QWORD PTR base_i$[rsp], rax

; 1676 :         if (base_i->tp_dict == NULL) {

  000f9	48 8b 44 24 48	 mov	 rax, QWORD PTR base_i$[rsp]
  000fe	48 83 b8 60 01
	00 00 00	 cmp	 QWORD PTR [rax+352], 0
  00106	75 15		 jne	 SHORT $LN8@best_base

; 1677 :             if (PyType_Ready(base_i) < 0)

  00108	48 8b 4c 24 48	 mov	 rcx, QWORD PTR base_i$[rsp]
  0010d	e8 00 00 00 00	 call	 PyType_Ready
  00112	85 c0		 test	 eax, eax
  00114	7d 07		 jge	 SHORT $LN7@best_base

; 1678 :                 return NULL;

  00116	33 c0		 xor	 eax, eax
  00118	e9 b0 00 00 00	 jmp	 $LN13@best_base
$LN7@best_base:
$LN8@best_base:

; 1679 :         }
; 1680 :         candidate = solid_base(base_i);

  0011d	48 8b 4c 24 48	 mov	 rcx, QWORD PTR base_i$[rsp]
  00122	e8 00 00 00 00	 call	 solid_base
  00127	48 89 44 24 50	 mov	 QWORD PTR candidate$[rsp], rax

; 1681 :         if (winner == NULL) {

  0012c	48 83 7c 24 30
	00		 cmp	 QWORD PTR winner$[rsp], 0
  00132	75 16		 jne	 SHORT $LN6@best_base

; 1682 :             winner = candidate;

  00134	48 8b 44 24 50	 mov	 rax, QWORD PTR candidate$[rsp]
  00139	48 89 44 24 30	 mov	 QWORD PTR winner$[rsp], rax

; 1683 :             base = base_i;

  0013e	48 8b 44 24 48	 mov	 rax, QWORD PTR base_i$[rsp]
  00143	48 89 44 24 38	 mov	 QWORD PTR base$[rsp], rax
  00148	eb 55		 jmp	 SHORT $LN5@best_base
$LN6@best_base:

; 1684 :         }
; 1685 :         else if (PyType_IsSubtype(winner, candidate))

  0014a	48 8b 54 24 50	 mov	 rdx, QWORD PTR candidate$[rsp]
  0014f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR winner$[rsp]
  00154	e8 00 00 00 00	 call	 PyType_IsSubtype
  00159	85 c0		 test	 eax, eax
  0015b	74 02		 je	 SHORT $LN4@best_base
  0015d	eb 40		 jmp	 SHORT $LN3@best_base
$LN4@best_base:

; 1686 :             ;
; 1687 :         else if (PyType_IsSubtype(candidate, winner)) {

  0015f	48 8b 54 24 30	 mov	 rdx, QWORD PTR winner$[rsp]
  00164	48 8b 4c 24 50	 mov	 rcx, QWORD PTR candidate$[rsp]
  00169	e8 00 00 00 00	 call	 PyType_IsSubtype
  0016e	85 c0		 test	 eax, eax
  00170	74 16		 je	 SHORT $LN2@best_base

; 1688 :             winner = candidate;

  00172	48 8b 44 24 50	 mov	 rax, QWORD PTR candidate$[rsp]
  00177	48 89 44 24 30	 mov	 QWORD PTR winner$[rsp], rax

; 1689 :             base = base_i;

  0017c	48 8b 44 24 48	 mov	 rax, QWORD PTR base_i$[rsp]
  00181	48 89 44 24 38	 mov	 QWORD PTR base$[rsp], rax

; 1690 :         }
; 1691 :         else {

  00186	eb 17		 jmp	 SHORT $LN1@best_base
$LN2@best_base:

; 1692 :             PyErr_SetString(
; 1693 :                 PyExc_TypeError,
; 1694 :                 "multiple bases have "
; 1695 :                 "instance lay-out conflict");

  00188	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CO@LJBIILHK@multiple?5bases?5have?5instance?5lay@
  0018f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00196	e8 00 00 00 00	 call	 PyErr_SetString

; 1696 :             return NULL;

  0019b	33 c0		 xor	 eax, eax
  0019d	eb 2e		 jmp	 SHORT $LN13@best_base
$LN1@best_base:
$LN3@best_base:
$LN5@best_base:

; 1697 :         }
; 1698 :     }

  0019f	e9 e8 fe ff ff	 jmp	 $LN11@best_base
$LN10@best_base:

; 1699 :     assert (base != NULL);

  001a4	48 83 7c 24 38
	00		 cmp	 QWORD PTR base$[rsp], 0
  001aa	75 1c		 jne	 SHORT $LN17@best_base
  001ac	41 b8 a3 06 00
	00		 mov	 r8d, 1699		; 000006a3H
  001b2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@GJLLIOPA@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAt?$AAy?$AAp?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  001b9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BK@FFEIJADH@?$AAb?$AAa?$AAs?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
  001c0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001c6	33 c0		 xor	 eax, eax
$LN17@best_base:

; 1700 : 
; 1701 :     return base;

  001c8	48 8b 44 24 38	 mov	 rax, QWORD PTR base$[rsp]
$LN13@best_base:

; 1702 : }

  001cd	48 83 c4 68	 add	 rsp, 104		; 00000068H
  001d1	c3		 ret	 0
best_base ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$solid_base DD imagerel solid_base
	DD	imagerel solid_base+98
	DD	imagerel $unwind$solid_base
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$solid_base DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT solid_base
_TEXT	SEGMENT
base$ = 32
type$ = 64
solid_base PROC						; COMDAT

; 1730 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1731 :     PyTypeObject *base;
; 1732 : 
; 1733 :     if (type->tp_base)

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  0000e	48 83 b8 58 01
	00 00 00	 cmp	 QWORD PTR [rax+344], 0
  00016	74 18		 je	 SHORT $LN4@solid_base

; 1734 :         base = solid_base(type->tp_base);

  00018	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  0001d	48 8b 88 58 01
	00 00		 mov	 rcx, QWORD PTR [rax+344]
  00024	e8 00 00 00 00	 call	 solid_base
  00029	48 89 44 24 20	 mov	 QWORD PTR base$[rsp], rax

; 1735 :     else

  0002e	eb 0c		 jmp	 SHORT $LN3@solid_base
$LN4@solid_base:

; 1736 :         base = &PyBaseObject_Type;

  00030	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyBaseObject_Type
  00037	48 89 44 24 20	 mov	 QWORD PTR base$[rsp], rax
$LN3@solid_base:

; 1737 :     if (extra_ivars(type, base))

  0003c	48 8b 54 24 20	 mov	 rdx, QWORD PTR base$[rsp]
  00041	48 8b 4c 24 40	 mov	 rcx, QWORD PTR type$[rsp]
  00046	e8 00 00 00 00	 call	 extra_ivars
  0004b	85 c0		 test	 eax, eax
  0004d	74 09		 je	 SHORT $LN2@solid_base

; 1738 :         return type;

  0004f	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  00054	eb 07		 jmp	 SHORT $LN5@solid_base

; 1739 :     else

  00056	eb 05		 jmp	 SHORT $LN1@solid_base
$LN2@solid_base:

; 1740 :         return base;

  00058	48 8b 44 24 20	 mov	 rax, QWORD PTR base$[rsp]
$LN1@solid_base:
$LN5@solid_base:

; 1741 : }

  0005d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00061	c3		 ret	 0
solid_base ENDP
_TEXT	ENDS
PUBLIC	??_C@_1CC@EHEKELHE@?$AAt?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAb?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$extra_ivars DD imagerel extra_ivars
	DD	imagerel extra_ivars+390
	DD	imagerel $unwind$extra_ivars
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$extra_ivars DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_1CC@EHEKELHE@?$AAt?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAb?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1CC@EHEKELHE@?$AAt?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAb?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?$AA@ DB 't'
	DB	00H, '_', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, ' ', 00H
	DB	'>', 00H, '=', 00H, ' ', 00H, 'b', 00H, '_', 00H, 's', 00H, 'i'
	DB	00H, 'z', 00H, 'e', 00H, 00H, 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT extra_ivars
_TEXT	SEGMENT
b_size$ = 32
t_size$ = 40
tv79 = 48
tv135 = 52
type$ = 80
base$ = 88
extra_ivars PROC					; COMDAT

; 1706 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1707 :     size_t t_size = type->tp_basicsize;

  0000e	48 8b 44 24 50	 mov	 rax, QWORD PTR type$[rsp]
  00013	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  00017	48 89 44 24 28	 mov	 QWORD PTR t_size$[rsp], rax

; 1708 :     size_t b_size = base->tp_basicsize;

  0001c	48 8b 44 24 58	 mov	 rax, QWORD PTR base$[rsp]
  00021	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  00025	48 89 44 24 20	 mov	 QWORD PTR b_size$[rsp], rax

; 1709 : 
; 1710 :     assert(t_size >= b_size); /* Else type smaller than base! */

  0002a	48 8b 44 24 20	 mov	 rax, QWORD PTR b_size$[rsp]
  0002f	48 39 44 24 28	 cmp	 QWORD PTR t_size$[rsp], rax
  00034	73 1c		 jae	 SHORT $LN7@extra_ivar
  00036	41 b8 ae 06 00
	00		 mov	 r8d, 1710		; 000006aeH
  0003c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@GJLLIOPA@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAt?$AAy?$AAp?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00043	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CC@EHEKELHE@?$AAt?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAb?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?$AA@
  0004a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00050	33 c0		 xor	 eax, eax
$LN7@extra_ivar:

; 1711 :     if (type->tp_itemsize || base->tp_itemsize) {

  00052	48 8b 44 24 50	 mov	 rax, QWORD PTR type$[rsp]
  00057	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  0005f	75 0f		 jne	 SHORT $LN3@extra_ivar
  00061	48 8b 44 24 58	 mov	 rax, QWORD PTR base$[rsp]
  00066	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  0006e	74 41		 je	 SHORT $LN4@extra_ivar
$LN3@extra_ivar:

; 1712 :         /* If itemsize is involved, stricter rules */
; 1713 :         return t_size != b_size ||
; 1714 :             type->tp_itemsize != base->tp_itemsize;

  00070	48 8b 44 24 20	 mov	 rax, QWORD PTR b_size$[rsp]
  00075	48 39 44 24 28	 cmp	 QWORD PTR t_size$[rsp], rax
  0007a	75 24		 jne	 SHORT $LN8@extra_ivar
  0007c	48 8b 44 24 50	 mov	 rax, QWORD PTR type$[rsp]
  00081	48 8b 4c 24 58	 mov	 rcx, QWORD PTR base$[rsp]
  00086	48 8b 89 80 00
	00 00		 mov	 rcx, QWORD PTR [rcx+128]
  0008d	48 39 88 80 00
	00 00		 cmp	 QWORD PTR [rax+128], rcx
  00094	75 0a		 jne	 SHORT $LN8@extra_ivar
  00096	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv79[rsp], 0
  0009e	eb 08		 jmp	 SHORT $LN9@extra_ivar
$LN8@extra_ivar:
  000a0	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv79[rsp], 1
$LN9@extra_ivar:
  000a8	8b 44 24 30	 mov	 eax, DWORD PTR tv79[rsp]
  000ac	e9 d0 00 00 00	 jmp	 $LN5@extra_ivar
$LN4@extra_ivar:

; 1715 :     }
; 1716 :     if (type->tp_weaklistoffset && base->tp_weaklistoffset == 0 &&
; 1717 :         type->tp_weaklistoffset + sizeof(PyObject *) == t_size &&
; 1718 :         type->tp_flags & Py_TPFLAGS_HEAPTYPE)

  000b1	48 8b 44 24 50	 mov	 rax, QWORD PTR type$[rsp]
  000b6	48 83 b8 28 01
	00 00 00	 cmp	 QWORD PTR [rax+296], 0
  000be	74 48		 je	 SHORT $LN2@extra_ivar
  000c0	48 8b 44 24 58	 mov	 rax, QWORD PTR base$[rsp]
  000c5	48 83 b8 28 01
	00 00 00	 cmp	 QWORD PTR [rax+296], 0
  000cd	75 39		 jne	 SHORT $LN2@extra_ivar
  000cf	48 8b 44 24 50	 mov	 rax, QWORD PTR type$[rsp]
  000d4	48 8b 80 28 01
	00 00		 mov	 rax, QWORD PTR [rax+296]
  000db	48 83 c0 08	 add	 rax, 8
  000df	48 3b 44 24 28	 cmp	 rax, QWORD PTR t_size$[rsp]
  000e4	75 22		 jne	 SHORT $LN2@extra_ivar
  000e6	48 8b 44 24 50	 mov	 rax, QWORD PTR type$[rsp]
  000eb	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000f1	25 00 02 00 00	 and	 eax, 512		; 00000200H
  000f6	85 c0		 test	 eax, eax
  000f8	74 0e		 je	 SHORT $LN2@extra_ivar

; 1719 :         t_size -= sizeof(PyObject *);

  000fa	48 8b 44 24 28	 mov	 rax, QWORD PTR t_size$[rsp]
  000ff	48 83 e8 08	 sub	 rax, 8
  00103	48 89 44 24 28	 mov	 QWORD PTR t_size$[rsp], rax
$LN2@extra_ivar:

; 1720 :     if (type->tp_dictoffset && base->tp_dictoffset == 0 &&
; 1721 :         type->tp_dictoffset + sizeof(PyObject *) == t_size &&
; 1722 :         type->tp_flags & Py_TPFLAGS_HEAPTYPE)

  00108	48 8b 44 24 50	 mov	 rax, QWORD PTR type$[rsp]
  0010d	48 83 b8 78 01
	00 00 00	 cmp	 QWORD PTR [rax+376], 0
  00115	74 48		 je	 SHORT $LN1@extra_ivar
  00117	48 8b 44 24 58	 mov	 rax, QWORD PTR base$[rsp]
  0011c	48 83 b8 78 01
	00 00 00	 cmp	 QWORD PTR [rax+376], 0
  00124	75 39		 jne	 SHORT $LN1@extra_ivar
  00126	48 8b 44 24 50	 mov	 rax, QWORD PTR type$[rsp]
  0012b	48 8b 80 78 01
	00 00		 mov	 rax, QWORD PTR [rax+376]
  00132	48 83 c0 08	 add	 rax, 8
  00136	48 3b 44 24 28	 cmp	 rax, QWORD PTR t_size$[rsp]
  0013b	75 22		 jne	 SHORT $LN1@extra_ivar
  0013d	48 8b 44 24 50	 mov	 rax, QWORD PTR type$[rsp]
  00142	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00148	25 00 02 00 00	 and	 eax, 512		; 00000200H
  0014d	85 c0		 test	 eax, eax
  0014f	74 0e		 je	 SHORT $LN1@extra_ivar

; 1723 :         t_size -= sizeof(PyObject *);

  00151	48 8b 44 24 28	 mov	 rax, QWORD PTR t_size$[rsp]
  00156	48 83 e8 08	 sub	 rax, 8
  0015a	48 89 44 24 28	 mov	 QWORD PTR t_size$[rsp], rax
$LN1@extra_ivar:

; 1724 : 
; 1725 :     return t_size != b_size;

  0015f	48 8b 44 24 20	 mov	 rax, QWORD PTR b_size$[rsp]
  00164	48 39 44 24 28	 cmp	 QWORD PTR t_size$[rsp], rax
  00169	74 0a		 je	 SHORT $LN10@extra_ivar
  0016b	c7 44 24 34 01
	00 00 00	 mov	 DWORD PTR tv135[rsp], 1
  00173	eb 08		 jmp	 SHORT $LN11@extra_ivar
$LN10@extra_ivar:
  00175	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR tv135[rsp], 0
$LN11@extra_ivar:
  0017d	8b 44 24 34	 mov	 eax, DWORD PTR tv135[rsp]
$LN5@extra_ivar:

; 1726 : }

  00181	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00185	c3		 ret	 0
extra_ivars ENDP
_TEXT	ENDS
EXTRN	PyObject_GenericGetDict:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$subtype_dict DD imagerel subtype_dict
	DD	imagerel subtype_dict+166
	DD	imagerel $unwind$subtype_dict
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$subtype_dict DD 010e01H
	DD	0820eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT subtype_dict
_TEXT	SEGMENT
base$ = 32
descr$21788 = 40
func$21787 = 48
obj$ = 80
context$ = 88
subtype_dict PROC					; COMDAT

; 1787 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1788 :     PyTypeObject *base;
; 1789 : 
; 1790 :     base = get_builtin_base_with_dict(Py_TYPE(obj));

  0000e	48 8b 44 24 50	 mov	 rax, QWORD PTR obj$[rsp]
  00013	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  00017	e8 00 00 00 00	 call	 get_builtin_base_with_dict
  0001c	48 89 44 24 20	 mov	 QWORD PTR base$[rsp], rax

; 1791 :     if (base != NULL) {

  00021	48 83 7c 24 20
	00		 cmp	 QWORD PTR base$[rsp], 0
  00027	74 69		 je	 SHORT $LN3@subtype_di

; 1792 :         descrgetfunc func;
; 1793 :         PyObject *descr = get_dict_descriptor(base);

  00029	48 8b 4c 24 20	 mov	 rcx, QWORD PTR base$[rsp]
  0002e	e8 00 00 00 00	 call	 get_dict_descriptor
  00033	48 89 44 24 28	 mov	 QWORD PTR descr$21788[rsp], rax

; 1794 :         if (descr == NULL) {

  00038	48 83 7c 24 28
	00		 cmp	 QWORD PTR descr$21788[rsp], 0
  0003e	75 0e		 jne	 SHORT $LN2@subtype_di

; 1795 :             raise_dict_descr_error(obj);

  00040	48 8b 4c 24 50	 mov	 rcx, QWORD PTR obj$[rsp]
  00045	e8 00 00 00 00	 call	 raise_dict_descr_error

; 1796 :             return NULL;

  0004a	33 c0		 xor	 eax, eax
  0004c	eb 53		 jmp	 SHORT $LN4@subtype_di
$LN2@subtype_di:

; 1797 :         }
; 1798 :         func = Py_TYPE(descr)->tp_descr_get;

  0004e	48 8b 44 24 28	 mov	 rax, QWORD PTR descr$21788[rsp]
  00053	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00057	48 8b 80 68 01
	00 00		 mov	 rax, QWORD PTR [rax+360]
  0005e	48 89 44 24 30	 mov	 QWORD PTR func$21787[rsp], rax

; 1799 :         if (func == NULL) {

  00063	48 83 7c 24 30
	00		 cmp	 QWORD PTR func$21787[rsp], 0
  00069	75 0e		 jne	 SHORT $LN1@subtype_di

; 1800 :             raise_dict_descr_error(obj);

  0006b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR obj$[rsp]
  00070	e8 00 00 00 00	 call	 raise_dict_descr_error

; 1801 :             return NULL;

  00075	33 c0		 xor	 eax, eax
  00077	eb 28		 jmp	 SHORT $LN4@subtype_di
$LN1@subtype_di:

; 1802 :         }
; 1803 :         return func(descr, obj, (PyObject *)(Py_TYPE(obj)));

  00079	48 8b 44 24 50	 mov	 rax, QWORD PTR obj$[rsp]
  0007e	4c 8b 40 58	 mov	 r8, QWORD PTR [rax+88]
  00082	48 8b 54 24 50	 mov	 rdx, QWORD PTR obj$[rsp]
  00087	48 8b 4c 24 28	 mov	 rcx, QWORD PTR descr$21788[rsp]
  0008c	ff 54 24 30	 call	 QWORD PTR func$21787[rsp]
  00090	eb 0f		 jmp	 SHORT $LN4@subtype_di
$LN3@subtype_di:

; 1804 :     }
; 1805 :     return PyObject_GenericGetDict(obj, context);

  00092	48 8b 54 24 58	 mov	 rdx, QWORD PTR context$[rsp]
  00097	48 8b 4c 24 50	 mov	 rcx, QWORD PTR obj$[rsp]
  0009c	e8 00 00 00 00	 call	 PyObject_GenericGetDict
$LN4@subtype_di:

; 1806 : }

  000a1	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000a5	c3		 ret	 0
subtype_dict ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT get_builtin_base_with_dict
_TEXT	SEGMENT
type$ = 8
get_builtin_base_with_dict PROC				; COMDAT

; 1755 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
$LN3@get_builti:

; 1756 :     while (type->tp_base != NULL) {

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR type$[rsp]
  0000a	48 83 b8 58 01
	00 00 00	 cmp	 QWORD PTR [rax+344], 0
  00012	74 3d		 je	 SHORT $LN2@get_builti

; 1757 :         if (type->tp_dictoffset != 0 &&
; 1758 :             !(type->tp_flags & Py_TPFLAGS_HEAPTYPE))

  00014	48 8b 44 24 08	 mov	 rax, QWORD PTR type$[rsp]
  00019	48 83 b8 78 01
	00 00 00	 cmp	 QWORD PTR [rax+376], 0
  00021	74 1b		 je	 SHORT $LN1@get_builti
  00023	48 8b 44 24 08	 mov	 rax, QWORD PTR type$[rsp]
  00028	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0002e	25 00 02 00 00	 and	 eax, 512		; 00000200H
  00033	85 c0		 test	 eax, eax
  00035	75 07		 jne	 SHORT $LN1@get_builti

; 1759 :             return type;

  00037	48 8b 44 24 08	 mov	 rax, QWORD PTR type$[rsp]
  0003c	eb 15		 jmp	 SHORT $LN4@get_builti
$LN1@get_builti:

; 1760 :         type = type->tp_base;

  0003e	48 8b 44 24 08	 mov	 rax, QWORD PTR type$[rsp]
  00043	48 8b 80 58 01
	00 00		 mov	 rax, QWORD PTR [rax+344]
  0004a	48 89 44 24 08	 mov	 QWORD PTR type$[rsp], rax

; 1761 :     }

  0004f	eb b4		 jmp	 SHORT $LN3@get_builti
$LN2@get_builti:

; 1762 :     return NULL;

  00051	33 c0		 xor	 eax, eax
$LN4@get_builti:

; 1763 : }

  00053	f3 c3		 fatret	 0
get_builtin_base_with_dict ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$get_dict_descriptor DD imagerel get_dict_descriptor
	DD	imagerel get_dict_descriptor+94
	DD	imagerel $unwind$get_dict_descriptor
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$get_dict_descriptor DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT get_dict_descriptor
_TEXT	SEGMENT
descr$ = 32
type$ = 64
get_dict_descriptor PROC				; COMDAT

; 1767 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1768 :     PyObject *descr;
; 1769 : 
; 1770 :     descr = _PyType_LookupId(type, &PyId___dict__);

  00009	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId___dict__
  0000e	8b c0		 mov	 eax, eax
  00010	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00016	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0001f	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00023	48 8b d0	 mov	 rdx, rax
  00026	48 8b 4c 24 40	 mov	 rcx, QWORD PTR type$[rsp]
  0002b	e8 00 00 00 00	 call	 _PyType_LookupId
  00030	48 89 44 24 20	 mov	 QWORD PTR descr$[rsp], rax

; 1771 :     if (descr == NULL || !PyDescr_IsData(descr))

  00035	48 83 7c 24 20
	00		 cmp	 QWORD PTR descr$[rsp], 0
  0003b	74 13		 je	 SHORT $LN1@get_dict_d
  0003d	48 8b 44 24 20	 mov	 rax, QWORD PTR descr$[rsp]
  00042	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00046	48 83 b8 70 01
	00 00 00	 cmp	 QWORD PTR [rax+368], 0
  0004e	75 04		 jne	 SHORT $LN2@get_dict_d
$LN1@get_dict_d:

; 1772 :         return NULL;

  00050	33 c0		 xor	 eax, eax
  00052	eb 05		 jmp	 SHORT $LN3@get_dict_d
$LN2@get_dict_d:

; 1773 : 
; 1774 :     return descr;

  00054	48 8b 44 24 20	 mov	 rax, QWORD PTR descr$[rsp]
$LN3@get_dict_d:

; 1775 : }

  00059	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0005d	c3		 ret	 0
get_dict_descriptor ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DL@MECENEFN@this?5__dict__?5descriptor?5does?5no@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$raise_dict_descr_error DD imagerel raise_dict_descr_error
	DD	imagerel raise_dict_descr_error+46
	DD	imagerel $unwind$raise_dict_descr_error
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$raise_dict_descr_error DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT ??_C@_0DL@MECENEFN@this?5__dict__?5descriptor?5does?5no@
CONST	SEGMENT
??_C@_0DL@MECENEFN@this?5__dict__?5descriptor?5does?5no@ DB 'this __dict_'
	DB	'_ descriptor does not support ''%.200s'' objects', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT raise_dict_descr_error
_TEXT	SEGMENT
obj$ = 48
raise_dict_descr_error PROC				; COMDAT

; 1779 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1780 :     PyErr_Format(PyExc_TypeError,
; 1781 :                  "this __dict__ descriptor does not support "
; 1782 :                  "'%.200s' objects", Py_TYPE(obj)->tp_name);

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR obj$[rsp]
  0000e	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00012	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  00016	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DL@MECENEFN@this?5__dict__?5descriptor?5does?5no@
  0001d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00024	e8 00 00 00 00	 call	 PyErr_Format

; 1783 : }

  00029	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002d	c3		 ret	 0
raise_dict_descr_error ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DF@NPFGEKPJ@__dict__?5must?5be?5set?5to?5a?5dictio@ ; `string'
PUBLIC	??_C@_0BM@OFDEHIMA@This?5object?5has?5no?5__dict__?$AA@ ; `string'
EXTRN	_PyObject_GetDictPtr:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$subtype_setdict DD imagerel subtype_setdict
	DD	imagerel subtype_setdict+366
	DD	imagerel $unwind$subtype_setdict
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$subtype_setdict DD 011301H
	DD	0a213H
xdata	ENDS
;	COMDAT ??_C@_0DF@NPFGEKPJ@__dict__?5must?5be?5set?5to?5a?5dictio@
CONST	SEGMENT
??_C@_0DF@NPFGEKPJ@__dict__?5must?5be?5set?5to?5a?5dictio@ DB '__dict__ m'
	DB	'ust be set to a dictionary, not a ''%.200s''', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@OFDEHIMA@This?5object?5has?5no?5__dict__?$AA@
CONST	SEGMENT
??_C@_0BM@OFDEHIMA@This?5object?5has?5no?5__dict__?$AA@ DB 'This object h'
	DB	'as no __dict__', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT subtype_setdict
_TEXT	SEGMENT
base$ = 32
dict$ = 40
dictptr$ = 48
descr$21813 = 56
func$21812 = 64
obj$ = 96
value$ = 104
context$ = 112
subtype_setdict PROC					; COMDAT

; 1810 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 1811 :     PyObject *dict, **dictptr;
; 1812 :     PyTypeObject *base;
; 1813 : 
; 1814 :     base = get_builtin_base_with_dict(Py_TYPE(obj));

  00013	48 8b 44 24 60	 mov	 rax, QWORD PTR obj$[rsp]
  00018	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  0001c	e8 00 00 00 00	 call	 get_builtin_base_with_dict
  00021	48 89 44 24 20	 mov	 QWORD PTR base$[rsp], rax

; 1815 :     if (base != NULL) {

  00026	48 83 7c 24 20
	00		 cmp	 QWORD PTR base$[rsp], 0
  0002c	74 74		 je	 SHORT $LN13@subtype_se

; 1816 :         descrsetfunc func;
; 1817 :         PyObject *descr = get_dict_descriptor(base);

  0002e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR base$[rsp]
  00033	e8 00 00 00 00	 call	 get_dict_descriptor
  00038	48 89 44 24 38	 mov	 QWORD PTR descr$21813[rsp], rax

; 1818 :         if (descr == NULL) {

  0003d	48 83 7c 24 38
	00		 cmp	 QWORD PTR descr$21813[rsp], 0
  00043	75 14		 jne	 SHORT $LN12@subtype_se

; 1819 :             raise_dict_descr_error(obj);

  00045	48 8b 4c 24 60	 mov	 rcx, QWORD PTR obj$[rsp]
  0004a	e8 00 00 00 00	 call	 raise_dict_descr_error

; 1820 :             return -1;

  0004f	b8 ff ff ff ff	 mov	 eax, -1
  00054	e9 10 01 00 00	 jmp	 $LN14@subtype_se
$LN12@subtype_se:

; 1821 :         }
; 1822 :         func = Py_TYPE(descr)->tp_descr_set;

  00059	48 8b 44 24 38	 mov	 rax, QWORD PTR descr$21813[rsp]
  0005e	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00062	48 8b 80 70 01
	00 00		 mov	 rax, QWORD PTR [rax+368]
  00069	48 89 44 24 40	 mov	 QWORD PTR func$21812[rsp], rax

; 1823 :         if (func == NULL) {

  0006e	48 83 7c 24 40
	00		 cmp	 QWORD PTR func$21812[rsp], 0
  00074	75 14		 jne	 SHORT $LN11@subtype_se

; 1824 :             raise_dict_descr_error(obj);

  00076	48 8b 4c 24 60	 mov	 rcx, QWORD PTR obj$[rsp]
  0007b	e8 00 00 00 00	 call	 raise_dict_descr_error

; 1825 :             return -1;

  00080	b8 ff ff ff ff	 mov	 eax, -1
  00085	e9 df 00 00 00	 jmp	 $LN14@subtype_se
$LN11@subtype_se:

; 1826 :         }
; 1827 :         return func(descr, obj, value);

  0008a	4c 8b 44 24 68	 mov	 r8, QWORD PTR value$[rsp]
  0008f	48 8b 54 24 60	 mov	 rdx, QWORD PTR obj$[rsp]
  00094	48 8b 4c 24 38	 mov	 rcx, QWORD PTR descr$21813[rsp]
  00099	ff 54 24 40	 call	 QWORD PTR func$21812[rsp]
  0009d	e9 c7 00 00 00	 jmp	 $LN14@subtype_se
$LN13@subtype_se:

; 1828 :     }
; 1829 :     /* Almost like PyObject_GenericSetDict, but allow __dict__ to be deleted. */
; 1830 :     dictptr = _PyObject_GetDictPtr(obj);

  000a2	48 8b 4c 24 60	 mov	 rcx, QWORD PTR obj$[rsp]
  000a7	e8 00 00 00 00	 call	 _PyObject_GetDictPtr
  000ac	48 89 44 24 30	 mov	 QWORD PTR dictptr$[rsp], rax

; 1831 :     if (dictptr == NULL) {

  000b1	48 83 7c 24 30
	00		 cmp	 QWORD PTR dictptr$[rsp], 0
  000b7	75 1d		 jne	 SHORT $LN10@subtype_se

; 1832 :         PyErr_SetString(PyExc_AttributeError,
; 1833 :                         "This object has no __dict__");

  000b9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@OFDEHIMA@This?5object?5has?5no?5__dict__?$AA@
  000c0	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_AttributeError
  000c7	e8 00 00 00 00	 call	 PyErr_SetString

; 1834 :         return -1;

  000cc	b8 ff ff ff ff	 mov	 eax, -1
  000d1	e9 93 00 00 00	 jmp	 $LN14@subtype_se
$LN10@subtype_se:

; 1835 :     }
; 1836 :     if (value != NULL && !PyDict_Check(value)) {

  000d6	48 83 7c 24 68
	00		 cmp	 QWORD PTR value$[rsp], 0
  000dc	74 3f		 je	 SHORT $LN9@subtype_se
  000de	48 8b 44 24 68	 mov	 rax, QWORD PTR value$[rsp]
  000e3	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000e7	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000ed	25 00 00 00 20	 and	 eax, 536870912		; 20000000H
  000f2	85 c0		 test	 eax, eax
  000f4	75 27		 jne	 SHORT $LN9@subtype_se

; 1837 :         PyErr_Format(PyExc_TypeError,
; 1838 :                      "__dict__ must be set to a dictionary, "
; 1839 :                      "not a '%.200s'", Py_TYPE(value)->tp_name);

  000f6	48 8b 44 24 68	 mov	 rax, QWORD PTR value$[rsp]
  000fb	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000ff	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  00103	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DF@NPFGEKPJ@__dict__?5must?5be?5set?5to?5a?5dictio@
  0010a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00111	e8 00 00 00 00	 call	 PyErr_Format

; 1840 :         return -1;

  00116	b8 ff ff ff ff	 mov	 eax, -1
  0011b	eb 4c		 jmp	 SHORT $LN14@subtype_se
$LN9@subtype_se:

; 1841 :     }
; 1842 :     dict = *dictptr;

  0011d	48 8b 44 24 30	 mov	 rax, QWORD PTR dictptr$[rsp]
  00122	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00125	48 89 44 24 28	 mov	 QWORD PTR dict$[rsp], rax
$LN8@subtype_se:

; 1843 :     Py_XINCREF(value);

  0012a	48 83 7c 24 68
	00		 cmp	 QWORD PTR value$[rsp], 0
  00130	74 0a		 je	 SHORT $LN5@subtype_se
  00132	48 8b 4c 24 68	 mov	 rcx, QWORD PTR value$[rsp]
  00137	e8 00 00 00 00	 call	 _Py_IncRef
$LN5@subtype_se:
  0013c	33 c0		 xor	 eax, eax
  0013e	85 c0		 test	 eax, eax
  00140	75 e8		 jne	 SHORT $LN8@subtype_se

; 1844 :     *dictptr = value;

  00142	48 8b 44 24 30	 mov	 rax, QWORD PTR dictptr$[rsp]
  00147	48 8b 4c 24 68	 mov	 rcx, QWORD PTR value$[rsp]
  0014c	48 89 08	 mov	 QWORD PTR [rax], rcx
$LN4@subtype_se:

; 1845 :     Py_XDECREF(dict);

  0014f	48 83 7c 24 28
	00		 cmp	 QWORD PTR dict$[rsp], 0
  00155	74 0a		 je	 SHORT $LN1@subtype_se
  00157	48 8b 4c 24 28	 mov	 rcx, QWORD PTR dict$[rsp]
  0015c	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@subtype_se:
  00161	33 c0		 xor	 eax, eax
  00163	85 c0		 test	 eax, eax
  00165	75 e8		 jne	 SHORT $LN4@subtype_se

; 1846 :     return 0;

  00167	33 c0		 xor	 eax, eax
$LN14@subtype_se:

; 1847 : }

  00169	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0016d	c3		 ret	 0
subtype_setdict ENDP
_TEXT	ENDS
PUBLIC	??_C@_1LK@CDNPIPJD@?$AAP?$AAy?$AA_?$AAT?$AAY?$AAP?$AAE?$AA?$CI?$AAo?$AAb?$AAj?$AA?$CJ?$AA?9?$AA?$DO?$AAt?$AAp?$AA_?$AAw?$AAe?$AAa?$AAk?$AAl?$AAi?$AAs?$AAt?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5@ ; `string'
PUBLIC	??_C@_1EI@BENAFAHC@?$AAP?$AAy?$AA_?$AAT?$AAY?$AAP?$AAE?$AA?$CI?$AAo?$AAb?$AAj?$AA?$CJ?$AA?9?$AA?$DO?$AAt?$AAp?$AA_?$AAw?$AAe?$AAa?$AAk?$AAl?$AAi?$AAs?$AAt?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5@ ; `string'
PUBLIC	??_C@_0BP@LKMOIFEN@This?5object?5has?5no?5__weakref__?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$subtype_getweakref DD imagerel subtype_getweakref
	DD	imagerel subtype_getweakref+259
	DD	imagerel $unwind$subtype_getweakref
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$subtype_getweakref DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT ??_C@_1LK@CDNPIPJD@?$AAP?$AAy?$AA_?$AAT?$AAY?$AAP?$AAE?$AA?$CI?$AAo?$AAb?$AAj?$AA?$CJ?$AA?9?$AA?$DO?$AAt?$AAp?$AA_?$AAw?$AAe?$AAa?$AAk?$AAl?$AAi?$AAs?$AAt?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5@
CONST	SEGMENT
??_C@_1LK@CDNPIPJD@?$AAP?$AAy?$AA_?$AAT?$AAY?$AAP?$AAE?$AA?$CI?$AAo?$AAb?$AAj?$AA?$CJ?$AA?9?$AA?$DO?$AAt?$AAp?$AA_?$AAw?$AAe?$AAa?$AAk?$AAl?$AAi?$AAs?$AAt?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5@ DB 'P'
	DB	00H, 'y', 00H, '_', 00H, 'T', 00H, 'Y', 00H, 'P', 00H, 'E', 00H
	DB	'(', 00H, 'o', 00H, 'b', 00H, 'j', 00H, ')', 00H, '-', 00H, '>'
	DB	00H, 't', 00H, 'p', 00H, '_', 00H, 'w', 00H, 'e', 00H, 'a', 00H
	DB	'k', 00H, 'l', 00H, 'i', 00H, 's', 00H, 't', 00H, 'o', 00H, 'f'
	DB	00H, 'f', 00H, 's', 00H, 'e', 00H, 't', 00H, ' ', 00H, '+', 00H
	DB	' ', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, 'o', 00H, 'f'
	DB	00H, '(', 00H, 'P', 00H, 'y', 00H, 'O', 00H, 'b', 00H, 'j', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, ' ', 00H, '*', 00H, ')', 00H, ' '
	DB	00H, '<', 00H, '=', 00H, ' ', 00H, '(', 00H, 's', 00H, 'i', 00H
	DB	'z', 00H, 'e', 00H, '_', 00H, 't', 00H, ')', 00H, '(', 00H, 'P'
	DB	00H, 'y', 00H, '_', 00H, 'T', 00H, 'Y', 00H, 'P', 00H, 'E', 00H
	DB	'(', 00H, 'o', 00H, 'b', 00H, 'j', 00H, ')', 00H, '-', 00H, '>'
	DB	00H, 't', 00H, 'p', 00H, '_', 00H, 'b', 00H, 'a', 00H, 's', 00H
	DB	'i', 00H, 'c', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, ')'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1EI@BENAFAHC@?$AAP?$AAy?$AA_?$AAT?$AAY?$AAP?$AAE?$AA?$CI?$AAo?$AAb?$AAj?$AA?$CJ?$AA?9?$AA?$DO?$AAt?$AAp?$AA_?$AAw?$AAe?$AAa?$AAk?$AAl?$AAi?$AAs?$AAt?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5@
CONST	SEGMENT
??_C@_1EI@BENAFAHC@?$AAP?$AAy?$AA_?$AAT?$AAY?$AAP?$AAE?$AA?$CI?$AAo?$AAb?$AAj?$AA?$CJ?$AA?9?$AA?$DO?$AAt?$AAp?$AA_?$AAw?$AAe?$AAa?$AAk?$AAl?$AAi?$AAs?$AAt?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5@ DB 'P'
	DB	00H, 'y', 00H, '_', 00H, 'T', 00H, 'Y', 00H, 'P', 00H, 'E', 00H
	DB	'(', 00H, 'o', 00H, 'b', 00H, 'j', 00H, ')', 00H, '-', 00H, '>'
	DB	00H, 't', 00H, 'p', 00H, '_', 00H, 'w', 00H, 'e', 00H, 'a', 00H
	DB	'k', 00H, 'l', 00H, 'i', 00H, 's', 00H, 't', 00H, 'o', 00H, 'f'
	DB	00H, 'f', 00H, 's', 00H, 'e', 00H, 't', 00H, ' ', 00H, '>', 00H
	DB	' ', 00H, '0', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@LKMOIFEN@This?5object?5has?5no?5__weakref__?$AA@
CONST	SEGMENT
??_C@_0BP@LKMOIFEN@This?5object?5has?5no?5__weakref__?$AA@ DB 'This objec'
	DB	't has no __weakref__', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT subtype_getweakref
_TEXT	SEGMENT
weaklistptr$ = 32
result$ = 40
obj$ = 64
context$ = 72
subtype_getweakref PROC					; COMDAT

; 1851 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1852 :     PyObject **weaklistptr;
; 1853 :     PyObject *result;
; 1854 : 
; 1855 :     if (Py_TYPE(obj)->tp_weaklistoffset == 0) {

  0000e	48 8b 44 24 40	 mov	 rax, QWORD PTR obj$[rsp]
  00013	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00017	48 83 b8 28 01
	00 00 00	 cmp	 QWORD PTR [rax+296], 0
  0001f	75 1a		 jne	 SHORT $LN3@subtype_ge

; 1856 :         PyErr_SetString(PyExc_AttributeError,
; 1857 :                         "This object has no __weakref__");

  00021	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BP@LKMOIFEN@This?5object?5has?5no?5__weakref__?$AA@
  00028	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_AttributeError
  0002f	e8 00 00 00 00	 call	 PyErr_SetString

; 1858 :         return NULL;

  00034	33 c0		 xor	 eax, eax
  00036	e9 c3 00 00 00	 jmp	 $LN4@subtype_ge
$LN3@subtype_ge:

; 1859 :     }
; 1860 :     assert(Py_TYPE(obj)->tp_weaklistoffset > 0);

  0003b	48 8b 44 24 40	 mov	 rax, QWORD PTR obj$[rsp]
  00040	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00044	48 83 b8 28 01
	00 00 00	 cmp	 QWORD PTR [rax+296], 0
  0004c	7f 1c		 jg	 SHORT $LN6@subtype_ge
  0004e	41 b8 44 07 00
	00		 mov	 r8d, 1860		; 00000744H
  00054	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@GJLLIOPA@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAt?$AAy?$AAp?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  0005b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EI@BENAFAHC@?$AAP?$AAy?$AA_?$AAT?$AAY?$AAP?$AAE?$AA?$CI?$AAo?$AAb?$AAj?$AA?$CJ?$AA?9?$AA?$DO?$AAt?$AAp?$AA_?$AAw?$AAe?$AAa?$AAk?$AAl?$AAi?$AAs?$AAt?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5@
  00062	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00068	33 c0		 xor	 eax, eax
$LN6@subtype_ge:

; 1861 :     assert(Py_TYPE(obj)->tp_weaklistoffset + sizeof(PyObject *) <=
; 1862 :            (size_t)(Py_TYPE(obj)->tp_basicsize));

  0006a	48 8b 44 24 40	 mov	 rax, QWORD PTR obj$[rsp]
  0006f	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00073	48 8b 80 28 01
	00 00		 mov	 rax, QWORD PTR [rax+296]
  0007a	48 83 c0 08	 add	 rax, 8
  0007e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR obj$[rsp]
  00083	48 8b 49 58	 mov	 rcx, QWORD PTR [rcx+88]
  00087	48 3b 41 78	 cmp	 rax, QWORD PTR [rcx+120]
  0008b	76 1c		 jbe	 SHORT $LN7@subtype_ge
  0008d	41 b8 46 07 00
	00		 mov	 r8d, 1862		; 00000746H
  00093	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@GJLLIOPA@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAt?$AAy?$AAp?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  0009a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1LK@CDNPIPJD@?$AAP?$AAy?$AA_?$AAT?$AAY?$AAP?$AAE?$AA?$CI?$AAo?$AAb?$AAj?$AA?$CJ?$AA?9?$AA?$DO?$AAt?$AAp?$AA_?$AAw?$AAe?$AAa?$AAk?$AAl?$AAi?$AAs?$AAt?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5@
  000a1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000a7	33 c0		 xor	 eax, eax
$LN7@subtype_ge:

; 1863 :     weaklistptr = (PyObject **)
; 1864 :         ((char *)obj + Py_TYPE(obj)->tp_weaklistoffset);

  000a9	48 8b 44 24 40	 mov	 rax, QWORD PTR obj$[rsp]
  000ae	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000b2	48 8b 80 28 01
	00 00		 mov	 rax, QWORD PTR [rax+296]
  000b9	48 8b 4c 24 40	 mov	 rcx, QWORD PTR obj$[rsp]
  000be	48 03 c8	 add	 rcx, rax
  000c1	48 8b c1	 mov	 rax, rcx
  000c4	48 89 44 24 20	 mov	 QWORD PTR weaklistptr$[rsp], rax

; 1865 :     if (*weaklistptr == NULL)

  000c9	48 8b 44 24 20	 mov	 rax, QWORD PTR weaklistptr$[rsp]
  000ce	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  000d2	75 0e		 jne	 SHORT $LN2@subtype_ge

; 1866 :         result = Py_None;

  000d4	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000db	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax

; 1867 :     else

  000e0	eb 0d		 jmp	 SHORT $LN1@subtype_ge
$LN2@subtype_ge:

; 1868 :         result = *weaklistptr;

  000e2	48 8b 44 24 20	 mov	 rax, QWORD PTR weaklistptr$[rsp]
  000e7	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000ea	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax
$LN1@subtype_ge:

; 1869 :     Py_INCREF(result);

  000ef	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  000f4	e8 00 00 00 00	 call	 _Py_IncRef

; 1870 :     return result;

  000f9	48 8b 44 24 28	 mov	 rax, QWORD PTR result$[rsp]
$LN4@subtype_ge:

; 1871 : }

  000fe	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00102	c3		 ret	 0
subtype_getweakref ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CH@NJLOGGPG@type?4__init__?$CI?$CJ?5takes?51?5or?53?5arg@ ; `string'
PUBLIC	??_C@_0CL@FELHNPNO@type?4__init__?$CI?$CJ?5takes?5no?5keyword@ ; `string'
PUBLIC	??_C@_1EG@CODBJLKK@?$AAk?$AAw?$AAd?$AAs?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAP?$AAy?$AAD?$AAi?$AAc?$AAt?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAk?$AAw?$AAd@ ; `string'
PUBLIC	??_C@_1EI@LAEDPDD@?$AAa?$AAr?$AAg?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAP?$AAy?$AAT?$AAu?$AAp?$AAl?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAa?$AAr@ ; `string'
EXTRN	PyTuple_GetSlice:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$type_init DD imagerel type_init
	DD	imagerel type_init+358
	DD	imagerel $unwind$type_init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$type_init DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT ??_C@_0CH@NJLOGGPG@type?4__init__?$CI?$CJ?5takes?51?5or?53?5arg@
CONST	SEGMENT
??_C@_0CH@NJLOGGPG@type?4__init__?$CI?$CJ?5takes?51?5or?53?5arg@ DB 'type'
	DB	'.__init__() takes 1 or 3 arguments', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@FELHNPNO@type?4__init__?$CI?$CJ?5takes?5no?5keyword@
CONST	SEGMENT
??_C@_0CL@FELHNPNO@type?4__init__?$CI?$CJ?5takes?5no?5keyword@ DB 'type._'
	DB	'_init__() takes no keyword arguments', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1EG@CODBJLKK@?$AAk?$AAw?$AAd?$AAs?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAP?$AAy?$AAD?$AAi?$AAc?$AAt?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAk?$AAw?$AAd@
CONST	SEGMENT
??_C@_1EG@CODBJLKK@?$AAk?$AAw?$AAd?$AAs?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAP?$AAy?$AAD?$AAi?$AAc?$AAt?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAk?$AAw?$AAd@ DB 'k'
	DB	00H, 'w', 00H, 'd', 00H, 's', 00H, ' ', 00H, '=', 00H, '=', 00H
	DB	' ', 00H, 'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H, ' ', 00H, '|'
	DB	00H, '|', 00H, ' ', 00H, 'P', 00H, 'y', 00H, 'D', 00H, 'i', 00H
	DB	'c', 00H, 't', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, 'k', 00H, 'w', 00H, 'd', 00H, 's', 00H
	DB	')', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1EI@LAEDPDD@?$AAa?$AAr?$AAg?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAP?$AAy?$AAT?$AAu?$AAp?$AAl?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAa?$AAr@
CONST	SEGMENT
??_C@_1EI@LAEDPDD@?$AAa?$AAr?$AAg?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAP?$AAy?$AAT?$AAu?$AAp?$AAl?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAa?$AAr@ DB 'a'
	DB	00H, 'r', 00H, 'g', 00H, 's', 00H, ' ', 00H, '!', 00H, '=', 00H
	DB	' ', 00H, 'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H, ' ', 00H, '&'
	DB	00H, '&', 00H, ' ', 00H, 'P', 00H, 'y', 00H, 'T', 00H, 'u', 00H
	DB	'p', 00H, 'l', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e'
	DB	00H, 'c', 00H, 'k', 00H, '(', 00H, 'a', 00H, 'r', 00H, 'g', 00H
	DB	's', 00H, ')', 00H, 00H, 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT type_init
_TEXT	SEGMENT
res$ = 32
cls$ = 64
args$ = 72
kwds$ = 80
type_init PROC						; COMDAT

; 1918 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1919 :     int res;
; 1920 : 
; 1921 :     assert(args != NULL && PyTuple_Check(args));

  00013	48 83 7c 24 48
	00		 cmp	 QWORD PTR args$[rsp], 0
  00019	74 18		 je	 SHORT $LN5@type_init
  0001b	48 8b 44 24 48	 mov	 rax, QWORD PTR args$[rsp]
  00020	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00024	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0002a	25 00 00 00 04	 and	 eax, 67108864		; 04000000H
  0002f	85 c0		 test	 eax, eax
  00031	75 1c		 jne	 SHORT $LN6@type_init
$LN5@type_init:
  00033	41 b8 81 07 00
	00		 mov	 r8d, 1921		; 00000781H
  00039	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@GJLLIOPA@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAt?$AAy?$AAp?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00040	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EI@LAEDPDD@?$AAa?$AAr?$AAg?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAP?$AAy?$AAT?$AAu?$AAp?$AAl?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAa?$AAr@
  00047	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0004d	33 c0		 xor	 eax, eax
$LN6@type_init:

; 1922 :     assert(kwds == NULL || PyDict_Check(kwds));

  0004f	48 83 7c 24 50
	00		 cmp	 QWORD PTR kwds$[rsp], 0
  00055	74 34		 je	 SHORT $LN7@type_init
  00057	48 8b 44 24 50	 mov	 rax, QWORD PTR kwds$[rsp]
  0005c	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00060	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00066	25 00 00 00 20	 and	 eax, 536870912		; 20000000H
  0006b	85 c0		 test	 eax, eax
  0006d	75 1c		 jne	 SHORT $LN7@type_init
  0006f	41 b8 82 07 00
	00		 mov	 r8d, 1922		; 00000782H
  00075	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@GJLLIOPA@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAt?$AAy?$AAp?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  0007c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EG@CODBJLKK@?$AAk?$AAw?$AAd?$AAs?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAP?$AAy?$AAD?$AAi?$AAc?$AAt?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAk?$AAw?$AAd@
  00083	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00089	33 c0		 xor	 eax, eax
$LN7@type_init:

; 1923 : 
; 1924 :     if (kwds != NULL && PyDict_Check(kwds) && PyDict_Size(kwds) != 0) {

  0008b	48 83 7c 24 50
	00		 cmp	 QWORD PTR kwds$[rsp], 0
  00091	74 44		 je	 SHORT $LN2@type_init
  00093	48 8b 44 24 50	 mov	 rax, QWORD PTR kwds$[rsp]
  00098	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0009c	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000a2	25 00 00 00 20	 and	 eax, 536870912		; 20000000H
  000a7	85 c0		 test	 eax, eax
  000a9	74 2c		 je	 SHORT $LN2@type_init
  000ab	48 8b 4c 24 50	 mov	 rcx, QWORD PTR kwds$[rsp]
  000b0	e8 00 00 00 00	 call	 PyDict_Size
  000b5	48 85 c0	 test	 rax, rax
  000b8	74 1d		 je	 SHORT $LN2@type_init

; 1925 :         PyErr_SetString(PyExc_TypeError,
; 1926 :                         "type.__init__() takes no keyword arguments");

  000ba	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CL@FELHNPNO@type?4__init__?$CI?$CJ?5takes?5no?5keyword@
  000c1	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000c8	e8 00 00 00 00	 call	 PyErr_SetString

; 1927 :         return -1;

  000cd	b8 ff ff ff ff	 mov	 eax, -1
  000d2	e9 8a 00 00 00	 jmp	 $LN3@type_init
$LN2@type_init:

; 1928 :     }
; 1929 : 
; 1930 :     if (args != NULL && PyTuple_Check(args) &&
; 1931 :         (PyTuple_GET_SIZE(args) != 1 && PyTuple_GET_SIZE(args) != 3)) {

  000d7	48 83 7c 24 48
	00		 cmp	 QWORD PTR args$[rsp], 0
  000dd	74 4a		 je	 SHORT $LN1@type_init
  000df	48 8b 44 24 48	 mov	 rax, QWORD PTR args$[rsp]
  000e4	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000e8	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000ee	25 00 00 00 04	 and	 eax, 67108864		; 04000000H
  000f3	85 c0		 test	 eax, eax
  000f5	74 32		 je	 SHORT $LN1@type_init
  000f7	48 8b 44 24 48	 mov	 rax, QWORD PTR args$[rsp]
  000fc	48 83 78 60 01	 cmp	 QWORD PTR [rax+96], 1
  00101	74 26		 je	 SHORT $LN1@type_init
  00103	48 8b 44 24 48	 mov	 rax, QWORD PTR args$[rsp]
  00108	48 83 78 60 03	 cmp	 QWORD PTR [rax+96], 3
  0010d	74 1a		 je	 SHORT $LN1@type_init

; 1932 :         PyErr_SetString(PyExc_TypeError,
; 1933 :                         "type.__init__() takes 1 or 3 arguments");

  0010f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CH@NJLOGGPG@type?4__init__?$CI?$CJ?5takes?51?5or?53?5arg@
  00116	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0011d	e8 00 00 00 00	 call	 PyErr_SetString

; 1934 :         return -1;

  00122	b8 ff ff ff ff	 mov	 eax, -1
  00127	eb 38		 jmp	 SHORT $LN3@type_init
$LN1@type_init:

; 1935 :     }
; 1936 : 
; 1937 :     /* Call object.__init__(self) now. */
; 1938 :     /* XXX Could call super(type, cls).__init__() but what's the point? */
; 1939 :     args = PyTuple_GetSlice(args, 0, 0);

  00129	45 33 c0	 xor	 r8d, r8d
  0012c	33 d2		 xor	 edx, edx
  0012e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR args$[rsp]
  00133	e8 00 00 00 00	 call	 PyTuple_GetSlice
  00138	48 89 44 24 48	 mov	 QWORD PTR args$[rsp], rax

; 1940 :     res = object_init(cls, args, NULL);

  0013d	45 33 c0	 xor	 r8d, r8d
  00140	48 8b 54 24 48	 mov	 rdx, QWORD PTR args$[rsp]
  00145	48 8b 4c 24 40	 mov	 rcx, QWORD PTR cls$[rsp]
  0014a	e8 00 00 00 00	 call	 object_init
  0014f	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 1941 :     Py_DECREF(args);

  00153	48 8b 4c 24 48	 mov	 rcx, QWORD PTR args$[rsp]
  00158	e8 00 00 00 00	 call	 _Py_DecRef

; 1942 :     return res;

  0015d	8b 44 24 20	 mov	 eax, DWORD PTR res$[rsp]
$LN3@type_init:

; 1943 : }

  00161	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00165	c3		 ret	 0
type_init ENDP
_TEXT	ENDS
PUBLIC	PyType_GetFlags
; Function compile flags: /Odtp
;	COMDAT PyType_GetFlags
_TEXT	SEGMENT
type$ = 8
PyType_GetFlags PROC					; COMDAT

; 1947 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 1948 :     return type->tp_flags;

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR type$[rsp]
  0000a	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]

; 1949 : }

  00010	c3		 ret	 0
PyType_GetFlags ENDP
_TEXT	ENDS
PUBLIC	??_C@_0HJ@LMIOILHN@metaclass?5conflict?3?5the?5metaclas@ ; `string'
PUBLIC	_PyType_CalculateMetaclass
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyType_CalculateMetaclass DD imagerel $LN8
	DD	imagerel $LN8+198
	DD	imagerel $unwind$_PyType_CalculateMetaclass
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyType_CalculateMetaclass DD 010e01H
	DD	0a20eH
xdata	ENDS
;	COMDAT ??_C@_0HJ@LMIOILHN@metaclass?5conflict?3?5the?5metaclas@
CONST	SEGMENT
??_C@_0HJ@LMIOILHN@metaclass?5conflict?3?5the?5metaclas@ DB 'metaclass co'
	DB	'nflict: the metaclass of a derived class must be a (non-stric'
	DB	't) subclass of the metaclasses of all its bases', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PyType_CalculateMetaclass
_TEXT	SEGMENT
tmptype$ = 32
nbases$ = 40
i$ = 48
winner$ = 56
tmp$ = 64
metatype$ = 96
bases$ = 104
_PyType_CalculateMetaclass PROC				; COMDAT

; 1954 : {

$LN8:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 1955 :     Py_ssize_t i, nbases;
; 1956 :     PyTypeObject *winner;
; 1957 :     PyObject *tmp;
; 1958 :     PyTypeObject *tmptype;
; 1959 : 
; 1960 :     /* Determine the proper metatype to deal with this,
; 1961 :        and check for metatype conflicts while we're at it.
; 1962 :        Note that if some other metatype wins to contract,
; 1963 :        it's possible that its instances are not types. */
; 1964 : 
; 1965 :     nbases = PyTuple_GET_SIZE(bases);

  0000e	48 8b 44 24 68	 mov	 rax, QWORD PTR bases$[rsp]
  00013	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00017	48 89 44 24 28	 mov	 QWORD PTR nbases$[rsp], rax

; 1966 :     winner = metatype;

  0001c	48 8b 44 24 60	 mov	 rax, QWORD PTR metatype$[rsp]
  00021	48 89 44 24 38	 mov	 QWORD PTR winner$[rsp], rax

; 1967 :     for (i = 0; i < nbases; i++) {

  00026	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  0002f	eb 0d		 jmp	 SHORT $LN5@PyType_Cal
$LN4@PyType_Cal:
  00031	48 8b 44 24 30	 mov	 rax, QWORD PTR i$[rsp]
  00036	48 ff c0	 inc	 rax
  00039	48 89 44 24 30	 mov	 QWORD PTR i$[rsp], rax
$LN5@PyType_Cal:
  0003e	48 8b 44 24 28	 mov	 rax, QWORD PTR nbases$[rsp]
  00043	48 39 44 24 30	 cmp	 QWORD PTR i$[rsp], rax
  00048	7d 72		 jge	 SHORT $LN3@PyType_Cal

; 1968 :         tmp = PyTuple_GET_ITEM(bases, i);

  0004a	48 8b 44 24 68	 mov	 rax, QWORD PTR bases$[rsp]
  0004f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR i$[rsp]
  00054	48 8b 44 c8 70	 mov	 rax, QWORD PTR [rax+rcx*8+112]
  00059	48 89 44 24 40	 mov	 QWORD PTR tmp$[rsp], rax

; 1969 :         tmptype = Py_TYPE(tmp);

  0005e	48 8b 44 24 40	 mov	 rax, QWORD PTR tmp$[rsp]
  00063	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00067	48 89 44 24 20	 mov	 QWORD PTR tmptype$[rsp], rax

; 1970 :         if (PyType_IsSubtype(winner, tmptype))

  0006c	48 8b 54 24 20	 mov	 rdx, QWORD PTR tmptype$[rsp]
  00071	48 8b 4c 24 38	 mov	 rcx, QWORD PTR winner$[rsp]
  00076	e8 00 00 00 00	 call	 PyType_IsSubtype
  0007b	85 c0		 test	 eax, eax
  0007d	74 02		 je	 SHORT $LN2@PyType_Cal

; 1971 :             continue;

  0007f	eb b0		 jmp	 SHORT $LN4@PyType_Cal
$LN2@PyType_Cal:

; 1972 :         if (PyType_IsSubtype(tmptype, winner)) {

  00081	48 8b 54 24 38	 mov	 rdx, QWORD PTR winner$[rsp]
  00086	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tmptype$[rsp]
  0008b	e8 00 00 00 00	 call	 PyType_IsSubtype
  00090	85 c0		 test	 eax, eax
  00092	74 0c		 je	 SHORT $LN1@PyType_Cal

; 1973 :             winner = tmptype;

  00094	48 8b 44 24 20	 mov	 rax, QWORD PTR tmptype$[rsp]
  00099	48 89 44 24 38	 mov	 QWORD PTR winner$[rsp], rax

; 1974 :             continue;

  0009e	eb 91		 jmp	 SHORT $LN4@PyType_Cal
$LN1@PyType_Cal:

; 1975 :         }
; 1976 :         /* else: */
; 1977 :         PyErr_SetString(PyExc_TypeError,
; 1978 :                         "metaclass conflict: "
; 1979 :                         "the metaclass of a derived class "
; 1980 :                         "must be a (non-strict) subclass "
; 1981 :                         "of the metaclasses of all its bases");

  000a0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0HJ@LMIOILHN@metaclass?5conflict?3?5the?5metaclas@
  000a7	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000ae	e8 00 00 00 00	 call	 PyErr_SetString

; 1982 :         return NULL;

  000b3	33 c0		 xor	 eax, eax
  000b5	eb 0a		 jmp	 SHORT $LN6@PyType_Cal

; 1983 :     }

  000b7	e9 75 ff ff ff	 jmp	 $LN4@PyType_Cal
$LN3@PyType_Cal:

; 1984 :     return winner;

  000bc	48 8b 44 24 38	 mov	 rax, QWORD PTR winner$[rsp]
$LN6@PyType_Cal:

; 1985 : }

  000c1	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000c5	c3		 ret	 0
_PyType_CalculateMetaclass ENDP
_TEXT	ENDS
PUBLIC	??_C@_1CG@PGCGEHOP@?$AA?$CB?$AAb?$AAa?$AAs?$AAe?$AA?9?$AA?$DO?$AAt?$AAp?$AA_?$AAi?$AAt?$AAe?$AAm?$AAs?$AAi?$AAz?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1EK@BMOIOALC@?$AAs?$AAt?$AAr?$AAc?$AAm?$AAp?$AA?$CI?$AAm?$AAp?$AA?9?$AA?$DO?$AAn?$AAa?$AAm?$AAe?$AA?0?$AA?5?$AA?$CC?$AA_?$AA_?$AAw?$AAe?$AAa?$AAk?$AAr?$AAe?$AAf?$AA_?$AA_?$AA?$CC?$AA?$CJ?$AA?5@ ; `string'
PUBLIC	??_C@_1EE@GNMLHAJK@?$AAs?$AAt?$AAr?$AAc?$AAm?$AAp?$AA?$CI?$AAm?$AAp?$AA?9?$AA?$DO?$AAn?$AAa?$AAm?$AAe?$AA?0?$AA?5?$AA?$CC?$AA_?$AA_?$AAd?$AAi?$AAc?$AAt?$AA_?$AA_?$AA?$CC?$AA?$CJ?$AA?5?$AA?$CB?$AA?$DN?$AA?5@ ; `string'
PUBLIC	??_C@_0CI@INBJKNKC@type?5__qualname__?5must?5be?5a?5str?0@ ; `string'
PUBLIC	??_C@_1CE@GBDPLIHE@?$AAP?$AAy?$AAT?$AAy?$AAp?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAt?$AAm?$AAp?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_08PMCPIDCB@type_new?$AA@			; `string'
PUBLIC	??_C@_1EE@HPMKFMKN@?$AAj?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAn?$AAs?$AAl?$AAo?$AAt?$AAs?$AA?5?$AA?9?$AA?5?$AAa?$AAd?$AAd?$AA_?$AAd?$AAi?$AAc?$AAt?$AA?5?$AA?9?$AA?5?$AAa?$AAd?$AAd?$AA_?$AAw?$AAe?$AAa@ ; `string'
PUBLIC	??_C@_0CO@KNOILAEF@?$CFR?5in?5__slots__?5conflicts?5with?5c@ ; `string'
PUBLIC	??_C@_0EN@DKLGOPEO@__weakref__?5slot?5disallowed?3?5eit@ ; `string'
PUBLIC	??_C@_0CN@HEEOHDAA@__dict__?5slot?5disallowed?3?5we?5alr@ ; `string'
PUBLIC	??_C@_1CK@BPGMFFC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAt?$AAm?$AAp?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_0DF@HBKAGDPD@nonempty?5__slots__?5not?5supported@ ; `string'
PUBLIC	??_C@_1CK@EHBFPPJG@?$AAP?$AAy?$AAT?$AAu?$AAp?$AAl?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAl?$AAo?$AAt?$AAs?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_0CN@NKNOGCEG@type?5?8?$CF?4100s?8?5is?5not?5an?5acceptab@ ; `string'
PUBLIC	??_C@_0L@NCCGNLB@UO?$CBO?$CB?3type?$AA@		; `string'
PUBLIC	??_C@_0BO@MDBCPHPL@type?$CI?$CJ?5takes?51?5or?53?5arguments?$AA@ ; `string'
EXTRN	_PyDict_NewKeysForClass:PROC
EXTRN	strcmp:PROC
EXTRN	PyStaticMethod_New:PROC
EXTRN	PyFunction_Type:BYTE
EXTRN	memcpy:PROC
EXTRN	strlen:PROC
EXTRN	PyDict_DelItem:PROC
EXTRN	PyEval_GetGlobals:PROC
EXTRN	PyList_AsTuple:PROC
EXTRN	PyList_Sort:PROC
EXTRN	PyDict_GetItem:PROC
EXTRN	_Py_Mangle:PROC
EXTRN	PyDict_Copy:PROC
EXTRN	PyArg_ParseTupleAndKeywords:PROC
EXTRN	PyTuple_Type:BYTE
EXTRN	PyDict_Type:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$type_new DD imagerel type_new
	DD	imagerel type_new+5596
	DD	imagerel $unwind$type_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$type_new DD 021601H
	DD	02f0116H
xdata	ENDS
;	COMDAT ??_C@_1CG@PGCGEHOP@?$AA?$CB?$AAb?$AAa?$AAs?$AAe?$AA?9?$AA?$DO?$AAt?$AAp?$AA_?$AAi?$AAt?$AAe?$AAm?$AAs?$AAi?$AAz?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1CG@PGCGEHOP@?$AA?$CB?$AAb?$AAa?$AAs?$AAe?$AA?9?$AA?$DO?$AAt?$AAp?$AA_?$AAi?$AAt?$AAe?$AAm?$AAs?$AAi?$AAz?$AAe?$AA?$AA@ DB '!'
	DB	00H, 'b', 00H, 'a', 00H, 's', 00H, 'e', 00H, '-', 00H, '>', 00H
	DB	't', 00H, 'p', 00H, '_', 00H, 'i', 00H, 't', 00H, 'e', 00H, 'm'
	DB	00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EK@BMOIOALC@?$AAs?$AAt?$AAr?$AAc?$AAm?$AAp?$AA?$CI?$AAm?$AAp?$AA?9?$AA?$DO?$AAn?$AAa?$AAm?$AAe?$AA?0?$AA?5?$AA?$CC?$AA_?$AA_?$AAw?$AAe?$AAa?$AAk?$AAr?$AAe?$AAf?$AA_?$AA_?$AA?$CC?$AA?$CJ?$AA?5@
CONST	SEGMENT
??_C@_1EK@BMOIOALC@?$AAs?$AAt?$AAr?$AAc?$AAm?$AAp?$AA?$CI?$AAm?$AAp?$AA?9?$AA?$DO?$AAn?$AAa?$AAm?$AAe?$AA?0?$AA?5?$AA?$CC?$AA_?$AA_?$AAw?$AAe?$AAa?$AAk?$AAr?$AAe?$AAf?$AA_?$AA_?$AA?$CC?$AA?$CJ?$AA?5@ DB 's'
	DB	00H, 't', 00H, 'r', 00H, 'c', 00H, 'm', 00H, 'p', 00H, '(', 00H
	DB	'm', 00H, 'p', 00H, '-', 00H, '>', 00H, 'n', 00H, 'a', 00H, 'm'
	DB	00H, 'e', 00H, ',', 00H, ' ', 00H, '"', 00H, '_', 00H, '_', 00H
	DB	'w', 00H, 'e', 00H, 'a', 00H, 'k', 00H, 'r', 00H, 'e', 00H, 'f'
	DB	00H, '_', 00H, '_', 00H, '"', 00H, ')', 00H, ' ', 00H, '!', 00H
	DB	'=', 00H, ' ', 00H, '0', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1EE@GNMLHAJK@?$AAs?$AAt?$AAr?$AAc?$AAm?$AAp?$AA?$CI?$AAm?$AAp?$AA?9?$AA?$DO?$AAn?$AAa?$AAm?$AAe?$AA?0?$AA?5?$AA?$CC?$AA_?$AA_?$AAd?$AAi?$AAc?$AAt?$AA_?$AA_?$AA?$CC?$AA?$CJ?$AA?5?$AA?$CB?$AA?$DN?$AA?5@
CONST	SEGMENT
??_C@_1EE@GNMLHAJK@?$AAs?$AAt?$AAr?$AAc?$AAm?$AAp?$AA?$CI?$AAm?$AAp?$AA?9?$AA?$DO?$AAn?$AAa?$AAm?$AAe?$AA?0?$AA?5?$AA?$CC?$AA_?$AA_?$AAd?$AAi?$AAc?$AAt?$AA_?$AA_?$AA?$CC?$AA?$CJ?$AA?5?$AA?$CB?$AA?$DN?$AA?5@ DB 's'
	DB	00H, 't', 00H, 'r', 00H, 'c', 00H, 'm', 00H, 'p', 00H, '(', 00H
	DB	'm', 00H, 'p', 00H, '-', 00H, '>', 00H, 'n', 00H, 'a', 00H, 'm'
	DB	00H, 'e', 00H, ',', 00H, ' ', 00H, '"', 00H, '_', 00H, '_', 00H
	DB	'd', 00H, 'i', 00H, 'c', 00H, 't', 00H, '_', 00H, '_', 00H, '"'
	DB	00H, ')', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, '0', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@INBJKNKC@type?5__qualname__?5must?5be?5a?5str?0@
CONST	SEGMENT
??_C@_0CI@INBJKNKC@type?5__qualname__?5must?5be?5a?5str?0@ DB 'type __qua'
	DB	'lname__ must be a str, not %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1CE@GBDPLIHE@?$AAP?$AAy?$AAT?$AAy?$AAp?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAt?$AAm?$AAp?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CE@GBDPLIHE@?$AAP?$AAy?$AAT?$AAy?$AAp?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAt?$AAm?$AAp?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'T', 00H, 'y', 00H, 'p', 00H, 'e', 00H, '_', 00H
	DB	'C', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, '(', 00H, 't'
	DB	00H, 'm', 00H, 'p', 00H, ')', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08PMCPIDCB@type_new?$AA@
CONST	SEGMENT
??_C@_08PMCPIDCB@type_new?$AA@ DB 'type_new', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1EE@HPMKFMKN@?$AAj?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAn?$AAs?$AAl?$AAo?$AAt?$AAs?$AA?5?$AA?9?$AA?5?$AAa?$AAd?$AAd?$AA_?$AAd?$AAi?$AAc?$AAt?$AA?5?$AA?9?$AA?5?$AAa?$AAd?$AAd?$AA_?$AAw?$AAe?$AAa@
CONST	SEGMENT
??_C@_1EE@HPMKFMKN@?$AAj?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAn?$AAs?$AAl?$AAo?$AAt?$AAs?$AA?5?$AA?9?$AA?5?$AAa?$AAd?$AAd?$AA_?$AAd?$AAi?$AAc?$AAt?$AA?5?$AA?9?$AA?5?$AAa?$AAd?$AAd?$AA_?$AAw?$AAe?$AAa@ DB 'j'
	DB	00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'n', 00H, 's', 00H
	DB	'l', 00H, 'o', 00H, 't', 00H, 's', 00H, ' ', 00H, '-', 00H, ' '
	DB	00H, 'a', 00H, 'd', 00H, 'd', 00H, '_', 00H, 'd', 00H, 'i', 00H
	DB	'c', 00H, 't', 00H, ' ', 00H, '-', 00H, ' ', 00H, 'a', 00H, 'd'
	DB	00H, 'd', 00H, '_', 00H, 'w', 00H, 'e', 00H, 'a', 00H, 'k', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@KNOILAEF@?$CFR?5in?5__slots__?5conflicts?5with?5c@
CONST	SEGMENT
??_C@_0CO@KNOILAEF@?$CFR?5in?5__slots__?5conflicts?5with?5c@ DB '%R in __'
	DB	'slots__ conflicts with class variable', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EN@DKLGOPEO@__weakref__?5slot?5disallowed?3?5eit@
CONST	SEGMENT
??_C@_0EN@DKLGOPEO@__weakref__?5slot?5disallowed?3?5eit@ DB '__weakref__ '
	DB	'slot disallowed: either we already got one, or __itemsize__ !'
	DB	'= 0', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@HEEOHDAA@__dict__?5slot?5disallowed?3?5we?5alr@
CONST	SEGMENT
??_C@_0CN@HEEOHDAA@__dict__?5slot?5disallowed?3?5we?5alr@ DB '__dict__ sl'
	DB	'ot disallowed: we already got one', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@BPGMFFC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAt?$AAm?$AAp?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CK@BPGMFFC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAt?$AAm?$AAp?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, 't', 00H, 'm', 00H, 'p', 00H, ')', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@HBKAGDPD@nonempty?5__slots__?5not?5supported@
CONST	SEGMENT
??_C@_0DF@HBKAGDPD@nonempty?5__slots__?5not?5supported@ DB 'nonempty __sl'
	DB	'ots__ not supported for subtype of ''%s''', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@EHBFPPJG@?$AAP?$AAy?$AAT?$AAu?$AAp?$AAl?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAl?$AAo?$AAt?$AAs?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CK@EHBFPPJG@?$AAP?$AAy?$AAT?$AAu?$AAp?$AAl?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAl?$AAo?$AAt?$AAs?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'T', 00H, 'u', 00H, 'p', 00H, 'l', 00H, 'e', 00H
	DB	'_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, '('
	DB	00H, 's', 00H, 'l', 00H, 'o', 00H, 't', 00H, 's', 00H, ')', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@NKNOGCEG@type?5?8?$CF?4100s?8?5is?5not?5an?5acceptab@
CONST	SEGMENT
??_C@_0CN@NKNOGCEG@type?5?8?$CF?4100s?8?5is?5not?5an?5acceptab@ DB 'type '
	DB	'''%.100s'' is not an acceptable base type', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NCCGNLB@UO?$CBO?$CB?3type?$AA@
CONST	SEGMENT
??_C@_0L@NCCGNLB@UO?$CBO?$CB?3type?$AA@ DB 'UO!O!:type', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@MDBCPHPL@type?$CI?$CJ?5takes?51?5or?53?5arguments?$AA@
CONST	SEGMENT
??_C@_0BO@MDBCPHPL@type?$CI?$CJ?5takes?51?5or?53?5arguments?$AA@ DB 'type'
	DB	'() takes 1 or 3 arguments', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT type_new
_TEXT	SEGMENT
tmptype$ = 80
add_weak$ = 88
add_dict$ = 96
may_add_dict$ = 104
nbases$ = 112
et$ = 120
i$ = 128
winner$ = 136
base$ = 144
type$ = 152
dict$ = 160
bases$ = 168
mp$ = 176
newslots$ = 184
slots$ = 192
orig_dict$ = 200
tmp$ = 208
name$ = 216
slotoffset$ = 224
may_add_weak$ = 232
qualname$ = 240
j$ = 248
nslots$ = 256
nargs$21992 = 264
nkwds$21994 = 272
x$21998 = 280
tmp$22047 = 288
_py_tmp$22083 = 296
doc$22136 = 304
tp_doc$22142 = 312
doc_str$22141 = 320
len$22140 = 328
tv86 = 336
tv186 = 344
tv191 = 348
tv444 = 352
metatype$ = 384
args$ = 392
kwds$ = 400
type_new PROC						; COMDAT

; 1989 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 81 ec 78 01
	00 00		 sub	 rsp, 376		; 00000178H

; 1990 :     PyObject *name, *bases = NULL, *orig_dict, *dict = NULL;

  00016	48 c7 84 24 a8
	00 00 00 00 00
	00 00		 mov	 QWORD PTR bases$[rsp], 0
  00022	48 c7 84 24 a0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR dict$[rsp], 0

; 1991 :     static char *kwlist[] = {"name", "bases", "dict", 0};
; 1992 :     PyObject *qualname, *slots = NULL, *tmp, *newslots;

  0002e	48 c7 84 24 c0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR slots$[rsp], 0

; 1993 :     PyTypeObject *type = NULL, *base, *tmptype, *winner;

  0003a	48 c7 84 24 98
	00 00 00 00 00
	00 00		 mov	 QWORD PTR type$[rsp], 0

; 1994 :     PyHeapTypeObject *et;
; 1995 :     PyMemberDef *mp;
; 1996 :     Py_ssize_t i, nbases, nslots, slotoffset, add_dict, add_weak;
; 1997 :     int j, may_add_dict, may_add_weak;
; 1998 :     _Py_IDENTIFIER(__qualname__);
; 1999 :     _Py_IDENTIFIER(__slots__);
; 2000 : 
; 2001 :     assert(args != NULL && PyTuple_Check(args));

  00046	48 83 bc 24 88
	01 00 00 00	 cmp	 QWORD PTR args$[rsp], 0
  0004f	74 1b		 je	 SHORT $LN116@type_new
  00051	48 8b 84 24 88
	01 00 00	 mov	 rax, QWORD PTR args$[rsp]
  00059	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0005d	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00063	25 00 00 00 04	 and	 eax, 67108864		; 04000000H
  00068	85 c0		 test	 eax, eax
  0006a	75 1c		 jne	 SHORT $LN117@type_new
$LN116@type_new:
  0006c	41 b8 d1 07 00
	00		 mov	 r8d, 2001		; 000007d1H
  00072	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@GJLLIOPA@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAt?$AAy?$AAp?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00079	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EI@LAEDPDD@?$AAa?$AAr?$AAg?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAP?$AAy?$AAT?$AAu?$AAp?$AAl?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAa?$AAr@
  00080	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00086	33 c0		 xor	 eax, eax
$LN117@type_new:

; 2002 :     assert(kwds == NULL || PyDict_Check(kwds));

  00088	48 83 bc 24 90
	01 00 00 00	 cmp	 QWORD PTR kwds$[rsp], 0
  00091	74 37		 je	 SHORT $LN118@type_new
  00093	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR kwds$[rsp]
  0009b	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0009f	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000a5	25 00 00 00 20	 and	 eax, 536870912		; 20000000H
  000aa	85 c0		 test	 eax, eax
  000ac	75 1c		 jne	 SHORT $LN118@type_new
  000ae	41 b8 d2 07 00
	00		 mov	 r8d, 2002		; 000007d2H
  000b4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@GJLLIOPA@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAt?$AAy?$AAp?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  000bb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EG@CODBJLKK@?$AAk?$AAw?$AAd?$AAs?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAP?$AAy?$AAD?$AAi?$AAc?$AAt?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAk?$AAw?$AAd@
  000c2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000c8	33 c0		 xor	 eax, eax
$LN118@type_new:

; 2003 : 
; 2004 :     /* Special case: type(x) should return x->ob_type */
; 2005 :     {
; 2006 :         const Py_ssize_t nargs = PyTuple_GET_SIZE(args);

  000ca	48 8b 84 24 88
	01 00 00	 mov	 rax, QWORD PTR args$[rsp]
  000d2	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000d6	48 89 84 24 08
	01 00 00	 mov	 QWORD PTR nargs$21992[rsp], rax

; 2007 :         const Py_ssize_t nkwds = kwds == NULL ? 0 : PyDict_Size(kwds);

  000de	48 83 bc 24 90
	01 00 00 00	 cmp	 QWORD PTR kwds$[rsp], 0
  000e7	75 0e		 jne	 SHORT $LN119@type_new
  000e9	48 c7 84 24 50
	01 00 00 00 00
	00 00		 mov	 QWORD PTR tv86[rsp], 0
  000f5	eb 15		 jmp	 SHORT $LN120@type_new
$LN119@type_new:
  000f7	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR kwds$[rsp]
  000ff	e8 00 00 00 00	 call	 PyDict_Size
  00104	48 89 84 24 50
	01 00 00	 mov	 QWORD PTR tv86[rsp], rax
$LN120@type_new:
  0010c	48 8b 84 24 50
	01 00 00	 mov	 rax, QWORD PTR tv86[rsp]
  00114	48 89 84 24 10
	01 00 00	 mov	 QWORD PTR nkwds$21994[rsp], rax

; 2008 : 
; 2009 :         if (PyType_CheckExact(metatype) && nargs == 1 && nkwds == 0) {

  0011c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyType_Type
  00123	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR metatype$[rsp]
  0012b	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0012f	75 4c		 jne	 SHORT $LN113@type_new
  00131	48 83 bc 24 08
	01 00 00 01	 cmp	 QWORD PTR nargs$21992[rsp], 1
  0013a	75 41		 jne	 SHORT $LN113@type_new
  0013c	48 83 bc 24 10
	01 00 00 00	 cmp	 QWORD PTR nkwds$21994[rsp], 0
  00145	75 36		 jne	 SHORT $LN113@type_new

; 2010 :             PyObject *x = PyTuple_GET_ITEM(args, 0);

  00147	48 8b 84 24 88
	01 00 00	 mov	 rax, QWORD PTR args$[rsp]
  0014f	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00153	48 89 84 24 18
	01 00 00	 mov	 QWORD PTR x$21998[rsp], rax

; 2011 :             Py_INCREF(Py_TYPE(x));

  0015b	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR x$21998[rsp]
  00163	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  00167	e8 00 00 00 00	 call	 _Py_IncRef

; 2012 :             return (PyObject *) Py_TYPE(x);

  0016c	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR x$21998[rsp]
  00174	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00178	e9 57 14 00 00	 jmp	 $LN114@type_new
$LN113@type_new:

; 2013 :         }
; 2014 : 
; 2015 :         /* SF bug 475327 -- if that didn't trigger, we need 3
; 2016 :            arguments. but PyArg_ParseTupleAndKeywords below may give
; 2017 :            a msg saying type() needs exactly 3. */
; 2018 :         if (nargs + nkwds != 3) {

  0017d	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR nkwds$21994[rsp]
  00185	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR nargs$21992[rsp]
  0018d	48 03 c8	 add	 rcx, rax
  00190	48 8b c1	 mov	 rax, rcx
  00193	48 83 f8 03	 cmp	 rax, 3
  00197	74 1a		 je	 SHORT $LN112@type_new

; 2019 :             PyErr_SetString(PyExc_TypeError,
; 2020 :                             "type() takes 1 or 3 arguments");

  00199	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BO@MDBCPHPL@type?$CI?$CJ?5takes?51?5or?53?5arguments?$AA@
  001a0	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  001a7	e8 00 00 00 00	 call	 PyErr_SetString

; 2021 :             return NULL;

  001ac	33 c0		 xor	 eax, eax
  001ae	e9 21 14 00 00	 jmp	 $LN114@type_new
$LN112@type_new:

; 2022 :         }
; 2023 :     }
; 2024 : 
; 2025 :     /* Check arguments: (name, bases, dict) */
; 2026 :     if (!PyArg_ParseTupleAndKeywords(args, kwds, "UO!O!:type", kwlist,
; 2027 :                                      &name,
; 2028 :                                      &PyTuple_Type, &bases,
; 2029 :                                      &PyDict_Type, &orig_dict))

  001b3	48 8d 84 24 c8
	00 00 00	 lea	 rax, QWORD PTR orig_dict$[rsp]
  001bb	48 89 44 24 40	 mov	 QWORD PTR [rsp+64], rax
  001c0	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyDict_Type
  001c7	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  001cc	48 8d 84 24 a8
	00 00 00	 lea	 rax, QWORD PTR bases$[rsp]
  001d4	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  001d9	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyTuple_Type
  001e0	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  001e5	48 8d 84 24 d8
	00 00 00	 lea	 rax, QWORD PTR name$[rsp]
  001ed	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001f2	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?kwlist@?1??type_new@@9@9
  001f9	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0L@NCCGNLB@UO?$CBO?$CB?3type?$AA@
  00200	48 8b 94 24 90
	01 00 00	 mov	 rdx, QWORD PTR kwds$[rsp]
  00208	48 8b 8c 24 88
	01 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  00210	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  00215	85 c0		 test	 eax, eax
  00217	75 07		 jne	 SHORT $LN111@type_new

; 2030 :         return NULL;

  00219	33 c0		 xor	 eax, eax
  0021b	e9 b4 13 00 00	 jmp	 $LN114@type_new
$LN111@type_new:

; 2031 : 
; 2032 :     /* Determine the proper metatype to deal with this: */
; 2033 :     winner = _PyType_CalculateMetaclass(metatype, bases);

  00220	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR bases$[rsp]
  00228	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR metatype$[rsp]
  00230	e8 00 00 00 00	 call	 _PyType_CalculateMetaclass
  00235	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR winner$[rsp], rax

; 2034 :     if (winner == NULL) {

  0023d	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR winner$[rsp], 0
  00246	75 07		 jne	 SHORT $LN110@type_new

; 2035 :         return NULL;

  00248	33 c0		 xor	 eax, eax
  0024a	e9 85 13 00 00	 jmp	 $LN114@type_new
$LN110@type_new:

; 2036 :     }
; 2037 : 
; 2038 :     if (winner != metatype) {

  0024f	48 8b 84 24 80
	01 00 00	 mov	 rax, QWORD PTR metatype$[rsp]
  00257	48 39 84 24 88
	00 00 00	 cmp	 QWORD PTR winner$[rsp], rax
  0025f	74 53		 je	 SHORT $LN109@type_new

; 2039 :         if (winner->tp_new != type_new) /* Pass it to the winner */

  00261	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR winner$[rsp]
  00269	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:type_new
  00270	48 39 88 90 01
	00 00		 cmp	 QWORD PTR [rax+400], rcx
  00277	74 2b		 je	 SHORT $LN108@type_new

; 2040 :             return winner->tp_new(winner, args, kwds);

  00279	4c 8b 84 24 90
	01 00 00	 mov	 r8, QWORD PTR kwds$[rsp]
  00281	48 8b 94 24 88
	01 00 00	 mov	 rdx, QWORD PTR args$[rsp]
  00289	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR winner$[rsp]
  00291	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR winner$[rsp]
  00299	ff 90 90 01 00
	00		 call	 QWORD PTR [rax+400]
  0029f	e9 30 13 00 00	 jmp	 $LN114@type_new
$LN108@type_new:

; 2041 :         metatype = winner;

  002a4	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR winner$[rsp]
  002ac	48 89 84 24 80
	01 00 00	 mov	 QWORD PTR metatype$[rsp], rax
$LN109@type_new:

; 2042 :     }
; 2043 : 
; 2044 :     /* Adjust for empty tuple bases */
; 2045 :     nbases = PyTuple_GET_SIZE(bases);

  002b4	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR bases$[rsp]
  002bc	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  002c0	48 89 44 24 70	 mov	 QWORD PTR nbases$[rsp], rax

; 2046 :     if (nbases == 0) {

  002c5	48 83 7c 24 70
	00		 cmp	 QWORD PTR nbases$[rsp], 0
  002cb	75 34		 jne	 SHORT $LN107@type_new

; 2047 :         bases = PyTuple_Pack(1, &PyBaseObject_Type);

  002cd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyBaseObject_Type
  002d4	b9 01 00 00 00	 mov	 ecx, 1
  002d9	e8 00 00 00 00	 call	 PyTuple_Pack
  002de	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR bases$[rsp], rax

; 2048 :         if (bases == NULL)

  002e6	48 83 bc 24 a8
	00 00 00 00	 cmp	 QWORD PTR bases$[rsp], 0
  002ef	75 05		 jne	 SHORT $LN106@type_new

; 2049 :             goto error;

  002f1	e9 64 12 00 00	 jmp	 $error$22019
$LN106@type_new:

; 2050 :         nbases = 1;

  002f6	48 c7 44 24 70
	01 00 00 00	 mov	 QWORD PTR nbases$[rsp], 1

; 2051 :     }
; 2052 :     else

  002ff	eb 0d		 jmp	 SHORT $LN105@type_new
$LN107@type_new:

; 2053 :         Py_INCREF(bases);

  00301	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR bases$[rsp]
  00309	e8 00 00 00 00	 call	 _Py_IncRef
$LN105@type_new:

; 2054 : 
; 2055 :     /* Calculate best base, and check that all bases are type objects */
; 2056 :     base = best_base(bases);

  0030e	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR bases$[rsp]
  00316	e8 00 00 00 00	 call	 best_base
  0031b	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR base$[rsp], rax

; 2057 :     if (base == NULL) {

  00323	48 83 bc 24 90
	00 00 00 00	 cmp	 QWORD PTR base$[rsp], 0
  0032c	75 05		 jne	 SHORT $LN104@type_new

; 2058 :         goto error;

  0032e	e9 27 12 00 00	 jmp	 $error$22019
$LN104@type_new:

; 2059 :     }
; 2060 :     if (!PyType_HasFeature(base, Py_TPFLAGS_BASETYPE)) {

  00333	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR base$[rsp]
  0033b	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00341	25 00 04 00 00	 and	 eax, 1024		; 00000400H
  00346	85 c0		 test	 eax, eax
  00348	75 24		 jne	 SHORT $LN103@type_new

; 2061 :         PyErr_Format(PyExc_TypeError,
; 2062 :                      "type '%.100s' is not an acceptable base type",
; 2063 :                      base->tp_name);

  0034a	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR base$[rsp]
  00352	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  00356	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CN@NKNOGCEG@type?5?8?$CF?4100s?8?5is?5not?5an?5acceptab@
  0035d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00364	e8 00 00 00 00	 call	 PyErr_Format

; 2064 :         goto error;

  00369	e9 ec 11 00 00	 jmp	 $error$22019
$LN103@type_new:

; 2065 :     }
; 2066 : 
; 2067 :     dict = PyDict_Copy(orig_dict);

  0036e	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR orig_dict$[rsp]
  00376	e8 00 00 00 00	 call	 PyDict_Copy
  0037b	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR dict$[rsp], rax

; 2068 :     if (dict == NULL)

  00383	48 83 bc 24 a0
	00 00 00 00	 cmp	 QWORD PTR dict$[rsp], 0
  0038c	75 05		 jne	 SHORT $LN102@type_new

; 2069 :         goto error;

  0038e	e9 c7 11 00 00	 jmp	 $error$22019
$LN102@type_new:

; 2070 : 
; 2071 :     /* Check for a __slots__ sequence variable in dict, and count it */
; 2072 :     slots = _PyDict_GetItemId(dict, &PyId___slots__);

  00393	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId___slots__@?1??type_new@@9@9
  00398	8b c0		 mov	 eax, eax
  0039a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  003a0	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  003a9	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  003ad	48 8b d0	 mov	 rdx, rax
  003b0	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR dict$[rsp]
  003b8	e8 00 00 00 00	 call	 _PyDict_GetItemId
  003bd	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR slots$[rsp], rax

; 2073 :     nslots = 0;

  003c5	48 c7 84 24 00
	01 00 00 00 00
	00 00		 mov	 QWORD PTR nslots$[rsp], 0

; 2074 :     add_dict = 0;

  003d1	48 c7 44 24 60
	00 00 00 00	 mov	 QWORD PTR add_dict$[rsp], 0

; 2075 :     add_weak = 0;

  003da	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR add_weak$[rsp], 0

; 2076 :     may_add_dict = base->tp_dictoffset == 0;

  003e3	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR base$[rsp]
  003eb	48 83 b8 78 01
	00 00 00	 cmp	 QWORD PTR [rax+376], 0
  003f3	75 0d		 jne	 SHORT $LN121@type_new
  003f5	c7 84 24 58 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv186[rsp], 1
  00400	eb 0b		 jmp	 SHORT $LN122@type_new
$LN121@type_new:
  00402	c7 84 24 58 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv186[rsp], 0
$LN122@type_new:
  0040d	8b 84 24 58 01
	00 00		 mov	 eax, DWORD PTR tv186[rsp]
  00414	89 44 24 68	 mov	 DWORD PTR may_add_dict$[rsp], eax

; 2077 :     may_add_weak = base->tp_weaklistoffset == 0 && base->tp_itemsize == 0;

  00418	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR base$[rsp]
  00420	48 83 b8 28 01
	00 00 00	 cmp	 QWORD PTR [rax+296], 0
  00428	75 1f		 jne	 SHORT $LN123@type_new
  0042a	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR base$[rsp]
  00432	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  0043a	75 0d		 jne	 SHORT $LN123@type_new
  0043c	c7 84 24 5c 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv191[rsp], 1
  00447	eb 0b		 jmp	 SHORT $LN124@type_new
$LN123@type_new:
  00449	c7 84 24 5c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv191[rsp], 0
$LN124@type_new:
  00454	8b 84 24 5c 01
	00 00		 mov	 eax, DWORD PTR tv191[rsp]
  0045b	89 84 24 e8 00
	00 00		 mov	 DWORD PTR may_add_weak$[rsp], eax

; 2078 :     if (slots == NULL) {

  00462	48 83 bc 24 c0
	00 00 00 00	 cmp	 QWORD PTR slots$[rsp], 0
  0046b	75 30		 jne	 SHORT $LN101@type_new

; 2079 :         if (may_add_dict) {

  0046d	83 7c 24 68 00	 cmp	 DWORD PTR may_add_dict$[rsp], 0
  00472	74 0d		 je	 SHORT $LN100@type_new

; 2080 :             add_dict++;

  00474	48 8b 44 24 60	 mov	 rax, QWORD PTR add_dict$[rsp]
  00479	48 ff c0	 inc	 rax
  0047c	48 89 44 24 60	 mov	 QWORD PTR add_dict$[rsp], rax
$LN100@type_new:

; 2081 :         }
; 2082 :         if (may_add_weak) {

  00481	83 bc 24 e8 00
	00 00 00	 cmp	 DWORD PTR may_add_weak$[rsp], 0
  00489	74 0d		 je	 SHORT $LN99@type_new

; 2083 :             add_weak++;

  0048b	48 8b 44 24 58	 mov	 rax, QWORD PTR add_weak$[rsp]
  00490	48 ff c0	 inc	 rax
  00493	48 89 44 24 58	 mov	 QWORD PTR add_weak$[rsp], rax
$LN99@type_new:

; 2084 :         }
; 2085 :     }
; 2086 :     else {

  00498	e9 36 06 00 00	 jmp	 $LN98@type_new
$LN101@type_new:

; 2087 :         /* Have slots */
; 2088 : 
; 2089 :         /* Make it into a tuple */
; 2090 :         if (PyUnicode_Check(slots))

  0049d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR slots$[rsp]
  004a5	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  004a9	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  004af	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  004b4	85 c0		 test	 eax, eax
  004b6	74 1c		 je	 SHORT $LN97@type_new

; 2091 :             slots = PyTuple_Pack(1, slots);

  004b8	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR slots$[rsp]
  004c0	b9 01 00 00 00	 mov	 ecx, 1
  004c5	e8 00 00 00 00	 call	 PyTuple_Pack
  004ca	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR slots$[rsp], rax

; 2092 :         else

  004d2	eb 15		 jmp	 SHORT $LN96@type_new
$LN97@type_new:

; 2093 :             slots = PySequence_Tuple(slots);

  004d4	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR slots$[rsp]
  004dc	e8 00 00 00 00	 call	 PySequence_Tuple
  004e1	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR slots$[rsp], rax
$LN96@type_new:

; 2094 :         if (slots == NULL)

  004e9	48 83 bc 24 c0
	00 00 00 00	 cmp	 QWORD PTR slots$[rsp], 0
  004f2	75 05		 jne	 SHORT $LN95@type_new

; 2095 :             goto error;

  004f4	e9 61 10 00 00	 jmp	 $error$22019
$LN95@type_new:

; 2096 :         assert(PyTuple_Check(slots));

  004f9	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR slots$[rsp]
  00501	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00505	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0050b	25 00 00 00 04	 and	 eax, 67108864		; 04000000H
  00510	85 c0		 test	 eax, eax
  00512	75 1c		 jne	 SHORT $LN125@type_new
  00514	41 b8 30 08 00
	00		 mov	 r8d, 2096		; 00000830H
  0051a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@GJLLIOPA@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAt?$AAy?$AAp?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00521	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@EHBFPPJG@?$AAP?$AAy?$AAT?$AAu?$AAp?$AAl?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAl?$AAo?$AAt?$AAs?$AA?$CJ?$AA?$AA@
  00528	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0052e	33 c0		 xor	 eax, eax
$LN125@type_new:

; 2097 : 
; 2098 :         /* Are slots allowed? */
; 2099 :         nslots = PyTuple_GET_SIZE(slots);

  00530	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR slots$[rsp]
  00538	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0053c	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR nslots$[rsp], rax

; 2100 :         if (nslots > 0 && base->tp_itemsize != 0) {

  00544	48 83 bc 24 00
	01 00 00 00	 cmp	 QWORD PTR nslots$[rsp], 0
  0054d	7e 36		 jle	 SHORT $LN94@type_new
  0054f	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR base$[rsp]
  00557	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  0055f	74 24		 je	 SHORT $LN94@type_new

; 2101 :             PyErr_Format(PyExc_TypeError,
; 2102 :                          "nonempty __slots__ "
; 2103 :                          "not supported for subtype of '%s'",
; 2104 :                          base->tp_name);

  00561	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR base$[rsp]
  00569	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  0056d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DF@HBKAGDPD@nonempty?5__slots__?5not?5supported@
  00574	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0057b	e8 00 00 00 00	 call	 PyErr_Format

; 2105 :             goto error;

  00580	e9 d5 0f 00 00	 jmp	 $error$22019
$LN94@type_new:

; 2106 :         }
; 2107 : 
; 2108 :         /* Check for valid slot names and two special cases */
; 2109 :         for (i = 0; i < nslots; i++) {

  00585	48 c7 84 24 80
	00 00 00 00 00
	00 00		 mov	 QWORD PTR i$[rsp], 0
  00591	eb 13		 jmp	 SHORT $LN93@type_new
$LN92@type_new:
  00593	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  0059b	48 ff c0	 inc	 rax
  0059e	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR i$[rsp], rax
$LN93@type_new:
  005a6	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR nslots$[rsp]
  005ae	48 39 84 24 80
	00 00 00	 cmp	 QWORD PTR i$[rsp], rax
  005b6	0f 8d 0a 01 00
	00		 jge	 $LN91@type_new

; 2110 :             PyObject *tmp = PyTuple_GET_ITEM(slots, i);

  005bc	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR slots$[rsp]
  005c4	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR i$[rsp]
  005cc	48 8b 44 c8 70	 mov	 rax, QWORD PTR [rax+rcx*8+112]
  005d1	48 89 84 24 20
	01 00 00	 mov	 QWORD PTR tmp$22047[rsp], rax

; 2111 :             if (!valid_identifier(tmp))

  005d9	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR tmp$22047[rsp]
  005e1	e8 00 00 00 00	 call	 valid_identifier
  005e6	85 c0		 test	 eax, eax
  005e8	75 05		 jne	 SHORT $LN90@type_new

; 2112 :                 goto error;

  005ea	e9 6b 0f 00 00	 jmp	 $error$22019
$LN90@type_new:

; 2113 :             assert(PyUnicode_Check(tmp));

  005ef	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR tmp$22047[rsp]
  005f7	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  005fb	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00601	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00606	85 c0		 test	 eax, eax
  00608	75 1c		 jne	 SHORT $LN126@type_new
  0060a	41 b8 41 08 00
	00		 mov	 r8d, 2113		; 00000841H
  00610	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@GJLLIOPA@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAt?$AAy?$AAp?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00617	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@BPGMFFC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAt?$AAm?$AAp?$AA?$CJ?$AA?$AA@
  0061e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00624	33 c0		 xor	 eax, eax
$LN126@type_new:

; 2114 :             if (PyUnicode_CompareWithASCIIString(tmp, "__dict__") == 0) {

  00626	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08IBFKALI@__dict__?$AA@
  0062d	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR tmp$22047[rsp]
  00635	e8 00 00 00 00	 call	 PyUnicode_CompareWithASCIIString
  0063a	85 c0		 test	 eax, eax
  0063c	75 34		 jne	 SHORT $LN89@type_new

; 2115 :                 if (!may_add_dict || add_dict) {

  0063e	83 7c 24 68 00	 cmp	 DWORD PTR may_add_dict$[rsp], 0
  00643	74 08		 je	 SHORT $LN87@type_new
  00645	48 83 7c 24 60
	00		 cmp	 QWORD PTR add_dict$[rsp], 0
  0064b	74 18		 je	 SHORT $LN88@type_new
$LN87@type_new:

; 2116 :                     PyErr_SetString(PyExc_TypeError,
; 2117 :                         "__dict__ slot disallowed: "
; 2118 :                         "we already got one");

  0064d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CN@HEEOHDAA@__dict__?5slot?5disallowed?3?5we?5alr@
  00654	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0065b	e8 00 00 00 00	 call	 PyErr_SetString

; 2119 :                     goto error;

  00660	e9 f5 0e 00 00	 jmp	 $error$22019
$LN88@type_new:

; 2120 :                 }
; 2121 :                 add_dict++;

  00665	48 8b 44 24 60	 mov	 rax, QWORD PTR add_dict$[rsp]
  0066a	48 ff c0	 inc	 rax
  0066d	48 89 44 24 60	 mov	 QWORD PTR add_dict$[rsp], rax
$LN89@type_new:

; 2122 :             }
; 2123 :             if (PyUnicode_CompareWithASCIIString(tmp, "__weakref__") == 0) {

  00672	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@OFKEODAB@__weakref__?$AA@
  00679	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR tmp$22047[rsp]
  00681	e8 00 00 00 00	 call	 PyUnicode_CompareWithASCIIString
  00686	85 c0		 test	 eax, eax
  00688	75 37		 jne	 SHORT $LN86@type_new

; 2124 :                 if (!may_add_weak || add_weak) {

  0068a	83 bc 24 e8 00
	00 00 00	 cmp	 DWORD PTR may_add_weak$[rsp], 0
  00692	74 08		 je	 SHORT $LN84@type_new
  00694	48 83 7c 24 58
	00		 cmp	 QWORD PTR add_weak$[rsp], 0
  0069a	74 18		 je	 SHORT $LN85@type_new
$LN84@type_new:

; 2125 :                     PyErr_SetString(PyExc_TypeError,
; 2126 :                         "__weakref__ slot disallowed: "
; 2127 :                         "either we already got one, "
; 2128 :                         "or __itemsize__ != 0");

  0069c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0EN@DKLGOPEO@__weakref__?5slot?5disallowed?3?5eit@
  006a3	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  006aa	e8 00 00 00 00	 call	 PyErr_SetString

; 2129 :                     goto error;

  006af	e9 a6 0e 00 00	 jmp	 $error$22019
$LN85@type_new:

; 2130 :                 }
; 2131 :                 add_weak++;

  006b4	48 8b 44 24 58	 mov	 rax, QWORD PTR add_weak$[rsp]
  006b9	48 ff c0	 inc	 rax
  006bc	48 89 44 24 58	 mov	 QWORD PTR add_weak$[rsp], rax
$LN86@type_new:

; 2132 :             }
; 2133 :         }

  006c1	e9 cd fe ff ff	 jmp	 $LN92@type_new
$LN91@type_new:

; 2134 : 
; 2135 :         /* Copy slots into a list, mangle names and sort them.
; 2136 :            Sorted names are needed for __class__ assignment.
; 2137 :            Convert them back to tuple at the end.
; 2138 :         */
; 2139 :         newslots = PyList_New(nslots - add_dict - add_weak);

  006c6	48 8b 44 24 60	 mov	 rax, QWORD PTR add_dict$[rsp]
  006cb	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR nslots$[rsp]
  006d3	48 2b c8	 sub	 rcx, rax
  006d6	48 8b c1	 mov	 rax, rcx
  006d9	48 2b 44 24 58	 sub	 rax, QWORD PTR add_weak$[rsp]
  006de	48 8b c8	 mov	 rcx, rax
  006e1	e8 00 00 00 00	 call	 PyList_New
  006e6	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR newslots$[rsp], rax

; 2140 :         if (newslots == NULL)

  006ee	48 83 bc 24 b8
	00 00 00 00	 cmp	 QWORD PTR newslots$[rsp], 0
  006f7	75 05		 jne	 SHORT $LN83@type_new

; 2141 :             goto error;

  006f9	e9 5c 0e 00 00	 jmp	 $error$22019
$LN83@type_new:

; 2142 :         for (i = j = 0; i < nslots; i++) {

  006fe	c7 84 24 f8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR j$[rsp], 0
  00709	48 63 84 24 f8
	00 00 00	 movsxd	 rax, DWORD PTR j$[rsp]
  00711	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR i$[rsp], rax
  00719	eb 13		 jmp	 SHORT $LN82@type_new
$LN81@type_new:
  0071b	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  00723	48 ff c0	 inc	 rax
  00726	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR i$[rsp], rax
$LN82@type_new:
  0072e	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR nslots$[rsp]
  00736	48 39 84 24 80
	00 00 00	 cmp	 QWORD PTR i$[rsp], rax
  0073e	0f 8d 18 01 00
	00		 jge	 $LN80@type_new

; 2143 :             tmp = PyTuple_GET_ITEM(slots, i);

  00744	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR slots$[rsp]
  0074c	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR i$[rsp]
  00754	48 8b 44 c8 70	 mov	 rax, QWORD PTR [rax+rcx*8+112]
  00759	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR tmp$[rsp], rax

; 2144 :             if ((add_dict &&
; 2145 :                  PyUnicode_CompareWithASCIIString(tmp, "__dict__") == 0) ||
; 2146 :                 (add_weak &&
; 2147 :                  PyUnicode_CompareWithASCIIString(tmp, "__weakref__") == 0))

  00761	48 83 7c 24 60
	00		 cmp	 QWORD PTR add_dict$[rsp], 0
  00767	74 18		 je	 SHORT $LN77@type_new
  00769	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08IBFKALI@__dict__?$AA@
  00770	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR tmp$[rsp]
  00778	e8 00 00 00 00	 call	 PyUnicode_CompareWithASCIIString
  0077d	85 c0		 test	 eax, eax
  0077f	74 20		 je	 SHORT $LN78@type_new
$LN77@type_new:
  00781	48 83 7c 24 58
	00		 cmp	 QWORD PTR add_weak$[rsp], 0
  00787	74 1d		 je	 SHORT $LN79@type_new
  00789	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@OFKEODAB@__weakref__?$AA@
  00790	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR tmp$[rsp]
  00798	e8 00 00 00 00	 call	 PyUnicode_CompareWithASCIIString
  0079d	85 c0		 test	 eax, eax
  0079f	75 05		 jne	 SHORT $LN79@type_new
$LN78@type_new:

; 2148 :                 continue;

  007a1	e9 75 ff ff ff	 jmp	 $LN81@type_new
$LN79@type_new:

; 2149 :             tmp =_Py_Mangle(name, tmp);

  007a6	48 8b 94 24 d0
	00 00 00	 mov	 rdx, QWORD PTR tmp$[rsp]
  007ae	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR name$[rsp]
  007b6	e8 00 00 00 00	 call	 _Py_Mangle
  007bb	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR tmp$[rsp], rax

; 2150 :             if (!tmp) {

  007c3	48 83 bc 24 d0
	00 00 00 00	 cmp	 QWORD PTR tmp$[rsp], 0
  007cc	75 12		 jne	 SHORT $LN76@type_new

; 2151 :                 Py_DECREF(newslots);

  007ce	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR newslots$[rsp]
  007d6	e8 00 00 00 00	 call	 _Py_DecRef

; 2152 :                 goto error;

  007db	e9 7a 0d 00 00	 jmp	 $error$22019
$LN76@type_new:

; 2153 :             }
; 2154 :             PyList_SET_ITEM(newslots, j, tmp);

  007e0	48 63 84 24 f8
	00 00 00	 movsxd	 rax, DWORD PTR j$[rsp]
  007e8	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR newslots$[rsp]
  007f0	48 8b 49 70	 mov	 rcx, QWORD PTR [rcx+112]
  007f4	48 8b 94 24 d0
	00 00 00	 mov	 rdx, QWORD PTR tmp$[rsp]
  007fc	48 89 14 c1	 mov	 QWORD PTR [rcx+rax*8], rdx

; 2155 :             if (PyDict_GetItem(dict, tmp)) {

  00800	48 8b 94 24 d0
	00 00 00	 mov	 rdx, QWORD PTR tmp$[rsp]
  00808	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR dict$[rsp]
  00810	e8 00 00 00 00	 call	 PyDict_GetItem
  00815	48 85 c0	 test	 rax, rax
  00818	74 2d		 je	 SHORT $LN75@type_new

; 2156 :                 PyErr_Format(PyExc_ValueError,
; 2157 :                              "%R in __slots__ conflicts with class variable",
; 2158 :                              tmp);

  0081a	4c 8b 84 24 d0
	00 00 00	 mov	 r8, QWORD PTR tmp$[rsp]
  00822	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CO@KNOILAEF@?$CFR?5in?5__slots__?5conflicts?5with?5c@
  00829	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00830	e8 00 00 00 00	 call	 PyErr_Format

; 2159 :                 Py_DECREF(newslots);

  00835	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR newslots$[rsp]
  0083d	e8 00 00 00 00	 call	 _Py_DecRef

; 2160 :                 goto error;

  00842	e9 13 0d 00 00	 jmp	 $error$22019
$LN75@type_new:

; 2161 :             }
; 2162 :             j++;

  00847	8b 84 24 f8 00
	00 00		 mov	 eax, DWORD PTR j$[rsp]
  0084e	ff c0		 inc	 eax
  00850	89 84 24 f8 00
	00 00		 mov	 DWORD PTR j$[rsp], eax

; 2163 :         }

  00857	e9 bf fe ff ff	 jmp	 $LN81@type_new
$LN80@type_new:

; 2164 :         assert(j == nslots - add_dict - add_weak);

  0085c	48 63 84 24 f8
	00 00 00	 movsxd	 rax, DWORD PTR j$[rsp]
  00864	48 8b 4c 24 60	 mov	 rcx, QWORD PTR add_dict$[rsp]
  00869	48 8b 94 24 00
	01 00 00	 mov	 rdx, QWORD PTR nslots$[rsp]
  00871	48 2b d1	 sub	 rdx, rcx
  00874	48 8b ca	 mov	 rcx, rdx
  00877	48 2b 4c 24 58	 sub	 rcx, QWORD PTR add_weak$[rsp]
  0087c	48 3b c1	 cmp	 rax, rcx
  0087f	74 1c		 je	 SHORT $LN127@type_new
  00881	41 b8 74 08 00
	00		 mov	 r8d, 2164		; 00000874H
  00887	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@GJLLIOPA@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAt?$AAy?$AAp?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  0088e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@HPMKFMKN@?$AAj?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAn?$AAs?$AAl?$AAo?$AAt?$AAs?$AA?5?$AA?9?$AA?5?$AAa?$AAd?$AAd?$AA_?$AAd?$AAi?$AAc?$AAt?$AA?5?$AA?9?$AA?5?$AAa?$AAd?$AAd?$AA_?$AAw?$AAe?$AAa@
  00895	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0089b	33 c0		 xor	 eax, eax
$LN127@type_new:

; 2165 :         nslots = j;

  0089d	48 63 84 24 f8
	00 00 00	 movsxd	 rax, DWORD PTR j$[rsp]
  008a5	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR nslots$[rsp], rax
$LN74@type_new:

; 2166 :         Py_CLEAR(slots);

  008ad	48 83 bc 24 c0
	00 00 00 00	 cmp	 QWORD PTR slots$[rsp], 0
  008b6	74 56		 je	 SHORT $LN71@type_new
  008b8	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  008c0	4c 8b 8c 24 c0
	00 00 00	 mov	 r9, QWORD PTR slots$[rsp]
  008c8	41 b8 76 08 00
	00		 mov	 r8d, 2166		; 00000876H
  008ce	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@PKBBAMFA@?4?4?2Objects?2typeobject?4c?$AA@
  008d5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08PMCPIDCB@type_new?$AA@
  008dc	e8 00 00 00 00	 call	 _PyParallel_Guard
  008e1	85 c0		 test	 eax, eax
  008e3	75 29		 jne	 SHORT $LN71@type_new
  008e5	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR slots$[rsp]
  008ed	48 89 84 24 28
	01 00 00	 mov	 QWORD PTR _py_tmp$22083[rsp], rax
  008f5	48 c7 84 24 c0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR slots$[rsp], 0
  00901	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR _py_tmp$22083[rsp]
  00909	e8 00 00 00 00	 call	 _Py_DecRef
$LN71@type_new:
  0090e	33 c0		 xor	 eax, eax
  00910	85 c0		 test	 eax, eax
  00912	75 99		 jne	 SHORT $LN74@type_new

; 2167 :         if (PyList_Sort(newslots) == -1) {

  00914	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR newslots$[rsp]
  0091c	e8 00 00 00 00	 call	 PyList_Sort
  00921	83 f8 ff	 cmp	 eax, -1
  00924	75 12		 jne	 SHORT $LN70@type_new

; 2168 :             Py_DECREF(newslots);

  00926	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR newslots$[rsp]
  0092e	e8 00 00 00 00	 call	 _Py_DecRef

; 2169 :             goto error;

  00933	e9 22 0c 00 00	 jmp	 $error$22019
$LN70@type_new:

; 2170 :         }
; 2171 :         slots = PyList_AsTuple(newslots);

  00938	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR newslots$[rsp]
  00940	e8 00 00 00 00	 call	 PyList_AsTuple
  00945	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR slots$[rsp], rax

; 2172 :         Py_DECREF(newslots);

  0094d	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR newslots$[rsp]
  00955	e8 00 00 00 00	 call	 _Py_DecRef

; 2173 :         if (slots == NULL)

  0095a	48 83 bc 24 c0
	00 00 00 00	 cmp	 QWORD PTR slots$[rsp], 0
  00963	75 05		 jne	 SHORT $LN69@type_new

; 2174 :             goto error;

  00965	e9 f0 0b 00 00	 jmp	 $error$22019
$LN69@type_new:

; 2175 : 
; 2176 :         /* Secondary bases may provide weakrefs or dict */
; 2177 :         if (nbases > 1 &&
; 2178 :             ((may_add_dict && !add_dict) ||
; 2179 :              (may_add_weak && !add_weak))) {

  0096a	48 83 7c 24 70
	01		 cmp	 QWORD PTR nbases$[rsp], 1
  00970	0f 8e 5d 01 00
	00		 jle	 $LN68@type_new
  00976	83 7c 24 68 00	 cmp	 DWORD PTR may_add_dict$[rsp], 0
  0097b	74 08		 je	 SHORT $LN66@type_new
  0097d	48 83 7c 24 60
	00		 cmp	 QWORD PTR add_dict$[rsp], 0
  00983	74 1a		 je	 SHORT $LN67@type_new
$LN66@type_new:
  00985	83 bc 24 e8 00
	00 00 00	 cmp	 DWORD PTR may_add_weak$[rsp], 0
  0098d	0f 84 40 01 00
	00		 je	 $LN68@type_new
  00993	48 83 7c 24 58
	00		 cmp	 QWORD PTR add_weak$[rsp], 0
  00999	0f 85 34 01 00
	00		 jne	 $LN68@type_new
$LN67@type_new:

; 2180 :             for (i = 0; i < nbases; i++) {

  0099f	48 c7 84 24 80
	00 00 00 00 00
	00 00		 mov	 QWORD PTR i$[rsp], 0
  009ab	eb 13		 jmp	 SHORT $LN65@type_new
$LN64@type_new:
  009ad	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  009b5	48 ff c0	 inc	 rax
  009b8	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR i$[rsp], rax
$LN65@type_new:
  009c0	48 8b 44 24 70	 mov	 rax, QWORD PTR nbases$[rsp]
  009c5	48 39 84 24 80
	00 00 00	 cmp	 QWORD PTR i$[rsp], rax
  009cd	0f 8d 00 01 00
	00		 jge	 $LN63@type_new

; 2181 :                 tmp = PyTuple_GET_ITEM(bases, i);

  009d3	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR bases$[rsp]
  009db	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR i$[rsp]
  009e3	48 8b 44 c8 70	 mov	 rax, QWORD PTR [rax+rcx*8+112]
  009e8	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR tmp$[rsp], rax

; 2182 :                 if (tmp == (PyObject *)base)

  009f0	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR base$[rsp]
  009f8	48 39 84 24 d0
	00 00 00	 cmp	 QWORD PTR tmp$[rsp], rax
  00a00	75 02		 jne	 SHORT $LN62@type_new

; 2183 :                     continue; /* Skip primary base */

  00a02	eb a9		 jmp	 SHORT $LN64@type_new
$LN62@type_new:

; 2184 :                 assert(PyType_Check(tmp));

  00a04	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR tmp$[rsp]
  00a0c	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00a10	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00a16	25 00 00 00 80	 and	 eax, -2147483648	; ffffffff80000000H
  00a1b	85 c0		 test	 eax, eax
  00a1d	75 1c		 jne	 SHORT $LN128@type_new
  00a1f	41 b8 88 08 00
	00		 mov	 r8d, 2184		; 00000888H
  00a25	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@GJLLIOPA@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAt?$AAy?$AAp?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00a2c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CE@GBDPLIHE@?$AAP?$AAy?$AAT?$AAy?$AAp?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAt?$AAm?$AAp?$AA?$CJ?$AA?$AA@
  00a33	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00a39	33 c0		 xor	 eax, eax
$LN128@type_new:

; 2185 :                 tmptype = (PyTypeObject *)tmp;

  00a3b	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR tmp$[rsp]
  00a43	48 89 44 24 50	 mov	 QWORD PTR tmptype$[rsp], rax

; 2186 :                 if (may_add_dict && !add_dict &&
; 2187 :                     tmptype->tp_dictoffset != 0)

  00a48	83 7c 24 68 00	 cmp	 DWORD PTR may_add_dict$[rsp], 0
  00a4d	74 24		 je	 SHORT $LN61@type_new
  00a4f	48 83 7c 24 60
	00		 cmp	 QWORD PTR add_dict$[rsp], 0
  00a55	75 1c		 jne	 SHORT $LN61@type_new
  00a57	48 8b 44 24 50	 mov	 rax, QWORD PTR tmptype$[rsp]
  00a5c	48 83 b8 78 01
	00 00 00	 cmp	 QWORD PTR [rax+376], 0
  00a64	74 0d		 je	 SHORT $LN61@type_new

; 2188 :                     add_dict++;

  00a66	48 8b 44 24 60	 mov	 rax, QWORD PTR add_dict$[rsp]
  00a6b	48 ff c0	 inc	 rax
  00a6e	48 89 44 24 60	 mov	 QWORD PTR add_dict$[rsp], rax
$LN61@type_new:

; 2189 :                 if (may_add_weak && !add_weak &&
; 2190 :                     tmptype->tp_weaklistoffset != 0)

  00a73	83 bc 24 e8 00
	00 00 00	 cmp	 DWORD PTR may_add_weak$[rsp], 0
  00a7b	74 24		 je	 SHORT $LN60@type_new
  00a7d	48 83 7c 24 58
	00		 cmp	 QWORD PTR add_weak$[rsp], 0
  00a83	75 1c		 jne	 SHORT $LN60@type_new
  00a85	48 8b 44 24 50	 mov	 rax, QWORD PTR tmptype$[rsp]
  00a8a	48 83 b8 28 01
	00 00 00	 cmp	 QWORD PTR [rax+296], 0
  00a92	74 0d		 je	 SHORT $LN60@type_new

; 2191 :                     add_weak++;

  00a94	48 8b 44 24 58	 mov	 rax, QWORD PTR add_weak$[rsp]
  00a99	48 ff c0	 inc	 rax
  00a9c	48 89 44 24 58	 mov	 QWORD PTR add_weak$[rsp], rax
$LN60@type_new:

; 2192 :                 if (may_add_dict && !add_dict)

  00aa1	83 7c 24 68 00	 cmp	 DWORD PTR may_add_dict$[rsp], 0
  00aa6	74 0d		 je	 SHORT $LN59@type_new
  00aa8	48 83 7c 24 60
	00		 cmp	 QWORD PTR add_dict$[rsp], 0
  00aae	75 05		 jne	 SHORT $LN59@type_new

; 2193 :                     continue;

  00ab0	e9 f8 fe ff ff	 jmp	 $LN64@type_new
$LN59@type_new:

; 2194 :                 if (may_add_weak && !add_weak)

  00ab5	83 bc 24 e8 00
	00 00 00	 cmp	 DWORD PTR may_add_weak$[rsp], 0
  00abd	74 0d		 je	 SHORT $LN58@type_new
  00abf	48 83 7c 24 58
	00		 cmp	 QWORD PTR add_weak$[rsp], 0
  00ac5	75 05		 jne	 SHORT $LN58@type_new

; 2195 :                     continue;

  00ac7	e9 e1 fe ff ff	 jmp	 $LN64@type_new
$LN58@type_new:

; 2196 :                 /* Nothing more to check */
; 2197 :                 break;

  00acc	eb 05		 jmp	 SHORT $LN63@type_new

; 2198 :             }

  00ace	e9 da fe ff ff	 jmp	 $LN64@type_new
$LN63@type_new:
$LN68@type_new:
$LN98@type_new:

; 2199 :         }
; 2200 :     }
; 2201 : 
; 2202 :     /* Allocate the type object */
; 2203 :     type = (PyTypeObject *)metatype->tp_alloc(metatype, nslots);

  00ad3	48 8b 94 24 00
	01 00 00	 mov	 rdx, QWORD PTR nslots$[rsp]
  00adb	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR metatype$[rsp]
  00ae3	48 8b 84 24 80
	01 00 00	 mov	 rax, QWORD PTR metatype$[rsp]
  00aeb	ff 90 88 01 00
	00		 call	 QWORD PTR [rax+392]
  00af1	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR type$[rsp], rax

; 2204 :     if (type == NULL)

  00af9	48 83 bc 24 98
	00 00 00 00	 cmp	 QWORD PTR type$[rsp], 0
  00b02	75 05		 jne	 SHORT $LN57@type_new

; 2205 :         goto error;

  00b04	e9 51 0a 00 00	 jmp	 $error$22019
$LN57@type_new:

; 2206 : 
; 2207 :     /* Keep name and slots alive in the extended type object */
; 2208 :     et = (PyHeapTypeObject *)type;

  00b09	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  00b11	48 89 44 24 78	 mov	 QWORD PTR et$[rsp], rax

; 2209 :     Py_INCREF(name);

  00b16	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR name$[rsp]
  00b1e	e8 00 00 00 00	 call	 _Py_IncRef

; 2210 :     et->ht_name = name;

  00b23	48 8b 44 24 78	 mov	 rax, QWORD PTR et$[rsp]
  00b28	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR name$[rsp]
  00b30	48 89 88 68 03
	00 00		 mov	 QWORD PTR [rax+872], rcx

; 2211 :     et->ht_slots = slots;

  00b37	48 8b 44 24 78	 mov	 rax, QWORD PTR et$[rsp]
  00b3c	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR slots$[rsp]
  00b44	48 89 88 70 03
	00 00		 mov	 QWORD PTR [rax+880], rcx

; 2212 :     slots = NULL;

  00b4b	48 c7 84 24 c0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR slots$[rsp], 0

; 2213 : 
; 2214 :     /* Initialize tp_flags */
; 2215 :     type->tp_flags = Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HEAPTYPE |
; 2216 :         Py_TPFLAGS_BASETYPE;

  00b57	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  00b5f	c7 80 00 01 00
	00 00 06 04 00	 mov	 DWORD PTR [rax+256], 263680 ; 00040600H

; 2217 :     if (base->tp_flags & Py_TPFLAGS_HAVE_GC)

  00b69	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR base$[rsp]
  00b71	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00b77	25 00 40 00 00	 and	 eax, 16384		; 00004000H
  00b7c	85 c0		 test	 eax, eax
  00b7e	74 20		 je	 SHORT $LN56@type_new

; 2218 :         type->tp_flags |= Py_TPFLAGS_HAVE_GC;

  00b80	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  00b88	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00b8e	0f ba e8 0e	 bts	 eax, 14
  00b92	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR type$[rsp]
  00b9a	89 81 00 01 00
	00		 mov	 DWORD PTR [rcx+256], eax
$LN56@type_new:

; 2219 : 
; 2220 :     /* Initialize essential fields */
; 2221 :     type->tp_as_number = &et->as_number;

  00ba0	48 8b 44 24 78	 mov	 rax, QWORD PTR et$[rsp]
  00ba5	48 05 e0 01 00
	00		 add	 rax, 480		; 000001e0H
  00bab	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR type$[rsp]
  00bb3	48 89 81 b8 00
	00 00		 mov	 QWORD PTR [rcx+184], rax

; 2222 :     type->tp_as_sequence = &et->as_sequence;

  00bba	48 8b 44 24 78	 mov	 rax, QWORD PTR et$[rsp]
  00bbf	48 05 08 03 00
	00		 add	 rax, 776		; 00000308H
  00bc5	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR type$[rsp]
  00bcd	48 89 81 c0 00
	00 00		 mov	 QWORD PTR [rcx+192], rax

; 2223 :     type->tp_as_mapping = &et->as_mapping;

  00bd4	48 8b 44 24 78	 mov	 rax, QWORD PTR et$[rsp]
  00bd9	48 05 f0 02 00
	00		 add	 rax, 752		; 000002f0H
  00bdf	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR type$[rsp]
  00be7	48 89 81 c8 00
	00 00		 mov	 QWORD PTR [rcx+200], rax

; 2224 :     type->tp_as_buffer = &et->as_buffer;

  00bee	48 8b 44 24 78	 mov	 rax, QWORD PTR et$[rsp]
  00bf3	48 05 58 03 00
	00		 add	 rax, 856		; 00000358H
  00bf9	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR type$[rsp]
  00c01	48 89 81 f8 00
	00 00		 mov	 QWORD PTR [rcx+248], rax

; 2225 :     type->tp_name = _PyUnicode_AsString(name);

  00c08	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR name$[rsp]
  00c10	e8 00 00 00 00	 call	 PyUnicode_AsUTF8
  00c15	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR type$[rsp]
  00c1d	48 89 41 70	 mov	 QWORD PTR [rcx+112], rax

; 2226 :     if (!type->tp_name)

  00c21	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  00c29	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  00c2e	75 05		 jne	 SHORT $LN55@type_new

; 2227 :         goto error;

  00c30	e9 25 09 00 00	 jmp	 $error$22019
$LN55@type_new:

; 2228 : 
; 2229 :     /* Set tp_base and tp_bases */
; 2230 :     type->tp_bases = bases;

  00c35	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  00c3d	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR bases$[rsp]
  00c45	48 89 88 a8 01
	00 00		 mov	 QWORD PTR [rax+424], rcx

; 2231 :     bases = NULL;

  00c4c	48 c7 84 24 a8
	00 00 00 00 00
	00 00		 mov	 QWORD PTR bases$[rsp], 0

; 2232 :     Py_INCREF(base);

  00c58	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR base$[rsp]
  00c60	e8 00 00 00 00	 call	 _Py_IncRef

; 2233 :     type->tp_base = base;

  00c65	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  00c6d	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR base$[rsp]
  00c75	48 89 88 58 01
	00 00		 mov	 QWORD PTR [rax+344], rcx

; 2234 : 
; 2235 :     /* Initialize tp_dict from passed-in dict */
; 2236 :     Py_INCREF(dict);

  00c7c	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR dict$[rsp]
  00c84	e8 00 00 00 00	 call	 _Py_IncRef

; 2237 :     type->tp_dict = dict;

  00c89	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  00c91	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR dict$[rsp]
  00c99	48 89 88 60 01
	00 00		 mov	 QWORD PTR [rax+352], rcx

; 2238 : 
; 2239 :     /* Set __module__ in the dict */
; 2240 :     if (_PyDict_GetItemId(dict, &PyId___module__) == NULL) {

  00ca0	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId___module__
  00ca5	8b c0		 mov	 eax, eax
  00ca7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00cad	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00cb6	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00cba	48 8b d0	 mov	 rdx, rax
  00cbd	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR dict$[rsp]
  00cc5	e8 00 00 00 00	 call	 _PyDict_GetItemId
  00cca	48 85 c0	 test	 rax, rax
  00ccd	0f 85 90 00 00
	00		 jne	 $LN54@type_new

; 2241 :         tmp = PyEval_GetGlobals();

  00cd3	e8 00 00 00 00	 call	 PyEval_GetGlobals
  00cd8	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR tmp$[rsp], rax

; 2242 :         if (tmp != NULL) {

  00ce0	48 83 bc 24 d0
	00 00 00 00	 cmp	 QWORD PTR tmp$[rsp], 0
  00ce9	74 78		 je	 SHORT $LN53@type_new

; 2243 :             tmp = _PyDict_GetItemId(tmp, &PyId___name__);

  00ceb	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId___name__
  00cf0	8b c0		 mov	 eax, eax
  00cf2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00cf8	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00d01	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00d05	48 8b d0	 mov	 rdx, rax
  00d08	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR tmp$[rsp]
  00d10	e8 00 00 00 00	 call	 _PyDict_GetItemId
  00d15	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR tmp$[rsp], rax

; 2244 :             if (tmp != NULL) {

  00d1d	48 83 bc 24 d0
	00 00 00 00	 cmp	 QWORD PTR tmp$[rsp], 0
  00d26	74 3b		 je	 SHORT $LN52@type_new

; 2245 :                 if (_PyDict_SetItemId(dict, &PyId___module__,
; 2246 :                                       tmp) < 0)

  00d28	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId___module__
  00d2d	8b c0		 mov	 eax, eax
  00d2f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00d35	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00d3e	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00d42	4c 8b 84 24 d0
	00 00 00	 mov	 r8, QWORD PTR tmp$[rsp]
  00d4a	48 8b d0	 mov	 rdx, rax
  00d4d	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR dict$[rsp]
  00d55	e8 00 00 00 00	 call	 _PyDict_SetItemId
  00d5a	85 c0		 test	 eax, eax
  00d5c	7d 05		 jge	 SHORT $LN51@type_new

; 2247 :                     goto error;

  00d5e	e9 f7 07 00 00	 jmp	 $error$22019
$LN51@type_new:
$LN52@type_new:
$LN53@type_new:
$LN54@type_new:

; 2248 :             }
; 2249 :         }
; 2250 :     }
; 2251 : 
; 2252 :     /* Set ht_qualname to dict['__qualname__'] if available, else to
; 2253 :        __name__.  The __qualname__ accessor will look for ht_qualname.
; 2254 :     */
; 2255 :     qualname = _PyDict_GetItemId(dict, &PyId___qualname__);

  00d63	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId___qualname__@?1??type_new@@9@9
  00d68	8b c0		 mov	 eax, eax
  00d6a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00d70	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00d79	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00d7d	48 8b d0	 mov	 rdx, rax
  00d80	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR dict$[rsp]
  00d88	e8 00 00 00 00	 call	 _PyDict_GetItemId
  00d8d	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR qualname$[rsp], rax

; 2256 :     if (qualname != NULL) {

  00d95	48 83 bc 24 f0
	00 00 00 00	 cmp	 QWORD PTR qualname$[rsp], 0
  00d9e	74 43		 je	 SHORT $LN50@type_new

; 2257 :         if (!PyUnicode_Check(qualname)) {

  00da0	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR qualname$[rsp]
  00da8	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00dac	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00db2	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00db7	85 c0		 test	 eax, eax
  00db9	75 28		 jne	 SHORT $LN49@type_new

; 2258 :             PyErr_Format(PyExc_TypeError,
; 2259 :                          "type __qualname__ must be a str, not %s",
; 2260 :                          Py_TYPE(qualname)->tp_name);

  00dbb	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR qualname$[rsp]
  00dc3	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00dc7	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  00dcb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CI@INBJKNKC@type?5__qualname__?5must?5be?5a?5str?0@
  00dd2	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00dd9	e8 00 00 00 00	 call	 PyErr_Format

; 2261 :             goto error;

  00dde	e9 77 07 00 00	 jmp	 $error$22019
$LN49@type_new:
$LN50@type_new:

; 2262 :         }
; 2263 :     }
; 2264 :     et->ht_qualname = qualname ? qualname : et->ht_name;

  00de3	48 83 bc 24 f0
	00 00 00 00	 cmp	 QWORD PTR qualname$[rsp], 0
  00dec	74 12		 je	 SHORT $LN129@type_new
  00dee	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR qualname$[rsp]
  00df6	48 89 84 24 60
	01 00 00	 mov	 QWORD PTR tv444[rsp], rax
  00dfe	eb 14		 jmp	 SHORT $LN130@type_new
$LN129@type_new:
  00e00	48 8b 44 24 78	 mov	 rax, QWORD PTR et$[rsp]
  00e05	48 8b 80 68 03
	00 00		 mov	 rax, QWORD PTR [rax+872]
  00e0c	48 89 84 24 60
	01 00 00	 mov	 QWORD PTR tv444[rsp], rax
$LN130@type_new:
  00e14	48 8b 44 24 78	 mov	 rax, QWORD PTR et$[rsp]
  00e19	48 8b 8c 24 60
	01 00 00	 mov	 rcx, QWORD PTR tv444[rsp]
  00e21	48 89 88 78 03
	00 00		 mov	 QWORD PTR [rax+888], rcx

; 2265 :     Py_INCREF(et->ht_qualname);

  00e28	48 8b 44 24 78	 mov	 rax, QWORD PTR et$[rsp]
  00e2d	48 8b 88 78 03
	00 00		 mov	 rcx, QWORD PTR [rax+888]
  00e34	e8 00 00 00 00	 call	 _Py_IncRef

; 2266 :     if (qualname != NULL && PyDict_DelItem(dict, PyId___qualname__.object) < 0)

  00e39	48 83 bc 24 f0
	00 00 00 00	 cmp	 QWORD PTR qualname$[rsp], 0
  00e42	74 35		 je	 SHORT $LN48@type_new
  00e44	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId___qualname__@?1??type_new@@9@9
  00e49	8b c0		 mov	 eax, eax
  00e4b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00e51	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00e5a	48 8b 0c ca	 mov	 rcx, QWORD PTR [rdx+rcx*8]
  00e5e	48 8b 54 01 10	 mov	 rdx, QWORD PTR [rcx+rax+16]
  00e63	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR dict$[rsp]
  00e6b	e8 00 00 00 00	 call	 PyDict_DelItem
  00e70	85 c0		 test	 eax, eax
  00e72	7d 05		 jge	 SHORT $LN48@type_new

; 2267 :         goto error;

  00e74	e9 e1 06 00 00	 jmp	 $error$22019
$LN48@type_new:

; 2268 : 
; 2269 :     /* Set tp_doc to a copy of dict['__doc__'], if the latter is there
; 2270 :        and is a string.  The __doc__ accessor will first look for tp_doc;
; 2271 :        if that fails, it will still look into __dict__.
; 2272 :     */
; 2273 :     {
; 2274 :         PyObject *doc = _PyDict_GetItemId(dict, &PyId___doc__);

  00e79	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId___doc__
  00e7e	8b c0		 mov	 eax, eax
  00e80	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00e86	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00e8f	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00e93	48 8b d0	 mov	 rdx, rax
  00e96	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR dict$[rsp]
  00e9e	e8 00 00 00 00	 call	 _PyDict_GetItemId
  00ea3	48 89 84 24 30
	01 00 00	 mov	 QWORD PTR doc$22136[rsp], rax

; 2275 :         if (doc != NULL && PyUnicode_Check(doc)) {

  00eab	48 83 bc 24 30
	01 00 00 00	 cmp	 QWORD PTR doc$22136[rsp], 0
  00eb4	0f 84 be 00 00
	00		 je	 $LN47@type_new
  00eba	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR doc$22136[rsp]
  00ec2	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00ec6	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00ecc	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00ed1	85 c0		 test	 eax, eax
  00ed3	0f 84 9f 00 00
	00		 je	 $LN47@type_new

; 2276 :             Py_ssize_t len;
; 2277 :             char *doc_str;
; 2278 :             char *tp_doc;
; 2279 : 
; 2280 :             doc_str = _PyUnicode_AsString(doc);

  00ed9	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR doc$22136[rsp]
  00ee1	e8 00 00 00 00	 call	 PyUnicode_AsUTF8
  00ee6	48 89 84 24 40
	01 00 00	 mov	 QWORD PTR doc_str$22141[rsp], rax

; 2281 :             if (doc_str == NULL)

  00eee	48 83 bc 24 40
	01 00 00 00	 cmp	 QWORD PTR doc_str$22141[rsp], 0
  00ef7	75 05		 jne	 SHORT $LN46@type_new

; 2282 :                 goto error;

  00ef9	e9 5c 06 00 00	 jmp	 $error$22019
$LN46@type_new:

; 2283 :             /* Silently truncate the docstring if it contains null bytes. */
; 2284 :             len = strlen(doc_str);

  00efe	48 8b 8c 24 40
	01 00 00	 mov	 rcx, QWORD PTR doc_str$22141[rsp]
  00f06	e8 00 00 00 00	 call	 strlen
  00f0b	48 89 84 24 48
	01 00 00	 mov	 QWORD PTR len$22140[rsp], rax

; 2285 :             tp_doc = (char *)PyObject_MALLOC(len + 1);

  00f13	48 8b 84 24 48
	01 00 00	 mov	 rax, QWORD PTR len$22140[rsp]
  00f1b	48 ff c0	 inc	 rax
  00f1e	48 8b c8	 mov	 rcx, rax
  00f21	e8 00 00 00 00	 call	 _PyObject_DebugMalloc
  00f26	48 89 84 24 38
	01 00 00	 mov	 QWORD PTR tp_doc$22142[rsp], rax

; 2286 :             if (tp_doc == NULL)

  00f2e	48 83 bc 24 38
	01 00 00 00	 cmp	 QWORD PTR tp_doc$22142[rsp], 0
  00f37	75 05		 jne	 SHORT $LN45@type_new

; 2287 :                 goto error;

  00f39	e9 1c 06 00 00	 jmp	 $error$22019
$LN45@type_new:

; 2288 :             memcpy(tp_doc, doc_str, len + 1);

  00f3e	48 8b 84 24 48
	01 00 00	 mov	 rax, QWORD PTR len$22140[rsp]
  00f46	48 ff c0	 inc	 rax
  00f49	4c 8b c0	 mov	 r8, rax
  00f4c	48 8b 94 24 40
	01 00 00	 mov	 rdx, QWORD PTR doc_str$22141[rsp]
  00f54	48 8b 8c 24 38
	01 00 00	 mov	 rcx, QWORD PTR tp_doc$22142[rsp]
  00f5c	e8 00 00 00 00	 call	 memcpy

; 2289 :             type->tp_doc = tp_doc;

  00f61	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  00f69	48 8b 8c 24 38
	01 00 00	 mov	 rcx, QWORD PTR tp_doc$22142[rsp]
  00f71	48 89 88 08 01
	00 00		 mov	 QWORD PTR [rax+264], rcx
$LN47@type_new:

; 2290 :         }
; 2291 :     }
; 2292 : 
; 2293 :     /* Special-case __new__: if it's a plain function,
; 2294 :        make it a static function */
; 2295 :     tmp = _PyDict_GetItemId(dict, &PyId___new__);

  00f78	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId___new__
  00f7d	8b c0		 mov	 eax, eax
  00f7f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00f85	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00f8e	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00f92	48 8b d0	 mov	 rdx, rax
  00f95	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR dict$[rsp]
  00f9d	e8 00 00 00 00	 call	 _PyDict_GetItemId
  00fa2	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR tmp$[rsp], rax

; 2296 :     if (tmp != NULL && PyFunction_Check(tmp)) {

  00faa	48 83 bc 24 d0
	00 00 00 00	 cmp	 QWORD PTR tmp$[rsp], 0
  00fb3	0f 84 82 00 00
	00		 je	 $LN44@type_new
  00fb9	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyFunction_Type
  00fc0	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR tmp$[rsp]
  00fc8	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00fcc	75 6d		 jne	 SHORT $LN44@type_new

; 2297 :         tmp = PyStaticMethod_New(tmp);

  00fce	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR tmp$[rsp]
  00fd6	e8 00 00 00 00	 call	 PyStaticMethod_New
  00fdb	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR tmp$[rsp], rax

; 2298 :         if (tmp == NULL)

  00fe3	48 83 bc 24 d0
	00 00 00 00	 cmp	 QWORD PTR tmp$[rsp], 0
  00fec	75 05		 jne	 SHORT $LN43@type_new

; 2299 :             goto error;

  00fee	e9 67 05 00 00	 jmp	 $error$22019
$LN43@type_new:

; 2300 :         if (_PyDict_SetItemId(dict, &PyId___new__, tmp) < 0)

  00ff3	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId___new__
  00ff8	8b c0		 mov	 eax, eax
  00ffa	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  01000	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  01009	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0100d	4c 8b 84 24 d0
	00 00 00	 mov	 r8, QWORD PTR tmp$[rsp]
  01015	48 8b d0	 mov	 rdx, rax
  01018	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR dict$[rsp]
  01020	e8 00 00 00 00	 call	 _PyDict_SetItemId
  01025	85 c0		 test	 eax, eax
  01027	7d 05		 jge	 SHORT $LN42@type_new

; 2301 :             goto error;

  01029	e9 2c 05 00 00	 jmp	 $error$22019
$LN42@type_new:

; 2302 :         Py_DECREF(tmp);

  0102e	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR tmp$[rsp]
  01036	e8 00 00 00 00	 call	 _Py_DecRef
$LN44@type_new:

; 2303 :     }
; 2304 : 
; 2305 :     /* Add descriptors for custom slots from __slots__, or for __dict__ */
; 2306 :     mp = PyHeapType_GET_MEMBERS(et);

  0103b	48 8b 44 24 78	 mov	 rax, QWORD PTR et$[rsp]
  01040	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  01044	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  01048	48 8b 4c 24 78	 mov	 rcx, QWORD PTR et$[rsp]
  0104d	48 03 c8	 add	 rcx, rax
  01050	48 8b c1	 mov	 rax, rcx
  01053	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR mp$[rsp], rax

; 2307 :     slotoffset = base->tp_basicsize;

  0105b	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR base$[rsp]
  01063	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  01067	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR slotoffset$[rsp], rax

; 2308 :     if (et->ht_slots != NULL) {

  0106f	48 8b 44 24 78	 mov	 rax, QWORD PTR et$[rsp]
  01074	48 83 b8 70 03
	00 00 00	 cmp	 QWORD PTR [rax+880], 0
  0107c	0f 84 31 01 00
	00		 je	 $LN41@type_new

; 2309 :         for (i = 0; i < nslots; i++, mp++) {

  01082	48 c7 84 24 80
	00 00 00 00 00
	00 00		 mov	 QWORD PTR i$[rsp], 0
  0108e	eb 27		 jmp	 SHORT $LN40@type_new
$LN39@type_new:
  01090	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR i$[rsp]
  01098	48 ff c0	 inc	 rax
  0109b	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR i$[rsp], rax
  010a3	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR mp$[rsp]
  010ab	48 83 c0 28	 add	 rax, 40			; 00000028H
  010af	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR mp$[rsp], rax
$LN40@type_new:
  010b7	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR nslots$[rsp]
  010bf	48 39 84 24 80
	00 00 00	 cmp	 QWORD PTR i$[rsp], rax
  010c7	0f 8d e6 00 00
	00		 jge	 $LN38@type_new

; 2310 :             mp->name = _PyUnicode_AsString(
; 2311 :                 PyTuple_GET_ITEM(et->ht_slots, i));

  010cd	48 8b 44 24 78	 mov	 rax, QWORD PTR et$[rsp]
  010d2	48 8b 80 70 03
	00 00		 mov	 rax, QWORD PTR [rax+880]
  010d9	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR i$[rsp]
  010e1	48 8b 4c c8 70	 mov	 rcx, QWORD PTR [rax+rcx*8+112]
  010e6	e8 00 00 00 00	 call	 PyUnicode_AsUTF8
  010eb	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR mp$[rsp]
  010f3	48 89 01	 mov	 QWORD PTR [rcx], rax

; 2312 :             if (mp->name == NULL)

  010f6	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR mp$[rsp]
  010fe	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  01102	75 05		 jne	 SHORT $LN37@type_new

; 2313 :                 goto error;

  01104	e9 51 04 00 00	 jmp	 $error$22019
$LN37@type_new:

; 2314 :             mp->type = T_OBJECT_EX;

  01109	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR mp$[rsp]
  01111	c7 40 08 10 00
	00 00		 mov	 DWORD PTR [rax+8], 16

; 2315 :             mp->offset = slotoffset;

  01118	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR mp$[rsp]
  01120	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR slotoffset$[rsp]
  01128	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 2316 : 
; 2317 :             /* __dict__ and __weakref__ are already filtered out */
; 2318 :             assert(strcmp(mp->name, "__dict__") != 0);

  0112c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08IBFKALI@__dict__?$AA@
  01133	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR mp$[rsp]
  0113b	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0113e	e8 00 00 00 00	 call	 strcmp
  01143	85 c0		 test	 eax, eax
  01145	75 1c		 jne	 SHORT $LN131@type_new
  01147	41 b8 0e 09 00
	00		 mov	 r8d, 2318		; 0000090eH
  0114d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@GJLLIOPA@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAt?$AAy?$AAp?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  01154	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@GNMLHAJK@?$AAs?$AAt?$AAr?$AAc?$AAm?$AAp?$AA?$CI?$AAm?$AAp?$AA?9?$AA?$DO?$AAn?$AAa?$AAm?$AAe?$AA?0?$AA?5?$AA?$CC?$AA_?$AA_?$AAd?$AAi?$AAc?$AAt?$AA_?$AA_?$AA?$CC?$AA?$CJ?$AA?5?$AA?$CB?$AA?$DN?$AA?5@
  0115b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  01161	33 c0		 xor	 eax, eax
$LN131@type_new:

; 2319 :             assert(strcmp(mp->name, "__weakref__") != 0);

  01163	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@OFKEODAB@__weakref__?$AA@
  0116a	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR mp$[rsp]
  01172	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  01175	e8 00 00 00 00	 call	 strcmp
  0117a	85 c0		 test	 eax, eax
  0117c	75 1c		 jne	 SHORT $LN132@type_new
  0117e	41 b8 0f 09 00
	00		 mov	 r8d, 2319		; 0000090fH
  01184	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@GJLLIOPA@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAt?$AAy?$AAp?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  0118b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EK@BMOIOALC@?$AAs?$AAt?$AAr?$AAc?$AAm?$AAp?$AA?$CI?$AAm?$AAp?$AA?9?$AA?$DO?$AAn?$AAa?$AAm?$AAe?$AA?0?$AA?5?$AA?$CC?$AA_?$AA_?$AAw?$AAe?$AAa?$AAk?$AAr?$AAe?$AAf?$AA_?$AA_?$AA?$CC?$AA?$CJ?$AA?5@
  01192	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  01198	33 c0		 xor	 eax, eax
$LN132@type_new:

; 2320 : 
; 2321 :             slotoffset += sizeof(PyObject *);

  0119a	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR slotoffset$[rsp]
  011a2	48 83 c0 08	 add	 rax, 8
  011a6	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR slotoffset$[rsp], rax

; 2322 :         }

  011ae	e9 dd fe ff ff	 jmp	 $LN39@type_new
$LN38@type_new:
$LN41@type_new:

; 2323 :     }
; 2324 :     if (add_dict) {

  011b3	48 83 7c 24 60
	00		 cmp	 QWORD PTR add_dict$[rsp], 0
  011b9	74 52		 je	 SHORT $LN36@type_new

; 2325 :         if (base->tp_itemsize)

  011bb	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR base$[rsp]
  011c3	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  011cb	74 15		 je	 SHORT $LN35@type_new

; 2326 :             type->tp_dictoffset = -(long)sizeof(PyObject *);

  011cd	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  011d5	48 c7 80 78 01
	00 00 f8 ff ff
	ff		 mov	 QWORD PTR [rax+376], -8

; 2327 :         else

  011e0	eb 17		 jmp	 SHORT $LN34@type_new
$LN35@type_new:

; 2328 :             type->tp_dictoffset = slotoffset;

  011e2	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  011ea	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR slotoffset$[rsp]
  011f2	48 89 88 78 01
	00 00		 mov	 QWORD PTR [rax+376], rcx
$LN34@type_new:

; 2329 :         slotoffset += sizeof(PyObject *);

  011f9	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR slotoffset$[rsp]
  01201	48 83 c0 08	 add	 rax, 8
  01205	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR slotoffset$[rsp], rax
$LN36@type_new:

; 2330 :     }
; 2331 :     if (type->tp_dictoffset) {

  0120d	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  01215	48 83 b8 78 01
	00 00 00	 cmp	 QWORD PTR [rax+376], 0
  0121d	74 11		 je	 SHORT $LN33@type_new

; 2332 :         et->ht_cached_keys = _PyDict_NewKeysForClass();

  0121f	e8 00 00 00 00	 call	 _PyDict_NewKeysForClass
  01224	48 8b 4c 24 78	 mov	 rcx, QWORD PTR et$[rsp]
  01229	48 89 81 80 03
	00 00		 mov	 QWORD PTR [rcx+896], rax
$LN33@type_new:

; 2333 :     }
; 2334 :     if (add_weak) {

  01230	48 83 7c 24 58
	00		 cmp	 QWORD PTR add_weak$[rsp], 0
  01236	74 59		 je	 SHORT $LN32@type_new

; 2335 :         assert(!base->tp_itemsize);

  01238	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR base$[rsp]
  01240	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  01248	74 1c		 je	 SHORT $LN133@type_new
  0124a	41 b8 1f 09 00
	00		 mov	 r8d, 2335		; 0000091fH
  01250	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@GJLLIOPA@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAt?$AAy?$AAp?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  01257	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@PGCGEHOP@?$AA?$CB?$AAb?$AAa?$AAs?$AAe?$AA?9?$AA?$DO?$AAt?$AAp?$AA_?$AAi?$AAt?$AAe?$AAm?$AAs?$AAi?$AAz?$AAe?$AA?$AA@
  0125e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  01264	33 c0		 xor	 eax, eax
$LN133@type_new:

; 2336 :         type->tp_weaklistoffset = slotoffset;

  01266	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  0126e	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR slotoffset$[rsp]
  01276	48 89 88 28 01
	00 00		 mov	 QWORD PTR [rax+296], rcx

; 2337 :         slotoffset += sizeof(PyObject *);

  0127d	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR slotoffset$[rsp]
  01285	48 83 c0 08	 add	 rax, 8
  01289	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR slotoffset$[rsp], rax
$LN32@type_new:

; 2338 :     }
; 2339 :     type->tp_basicsize = slotoffset;

  01291	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  01299	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR slotoffset$[rsp]
  012a1	48 89 48 78	 mov	 QWORD PTR [rax+120], rcx

; 2340 :     type->tp_itemsize = base->tp_itemsize;

  012a5	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  012ad	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR base$[rsp]
  012b5	48 8b 89 80 00
	00 00		 mov	 rcx, QWORD PTR [rcx+128]
  012bc	48 89 88 80 00
	00 00		 mov	 QWORD PTR [rax+128], rcx

; 2341 :     type->tp_members = PyHeapType_GET_MEMBERS(et);

  012c3	48 8b 44 24 78	 mov	 rax, QWORD PTR et$[rsp]
  012c8	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  012cc	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  012d0	48 8b 4c 24 78	 mov	 rcx, QWORD PTR et$[rsp]
  012d5	48 03 c8	 add	 rcx, rax
  012d8	48 8b c1	 mov	 rax, rcx
  012db	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR type$[rsp]
  012e3	48 89 81 48 01
	00 00		 mov	 QWORD PTR [rcx+328], rax

; 2342 : 
; 2343 :     if (type->tp_weaklistoffset && type->tp_dictoffset)

  012ea	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  012f2	48 83 b8 28 01
	00 00 00	 cmp	 QWORD PTR [rax+296], 0
  012fa	74 2d		 je	 SHORT $LN31@type_new
  012fc	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  01304	48 83 b8 78 01
	00 00 00	 cmp	 QWORD PTR [rax+376], 0
  0130c	74 1b		 je	 SHORT $LN31@type_new

; 2344 :         type->tp_getset = subtype_getsets_full;

  0130e	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  01316	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:subtype_getsets_full
  0131d	48 89 88 50 01
	00 00		 mov	 QWORD PTR [rax+336], rcx
  01324	e9 8b 00 00 00	 jmp	 $LN30@type_new
$LN31@type_new:

; 2345 :     else if (type->tp_weaklistoffset && !type->tp_dictoffset)

  01329	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  01331	48 83 b8 28 01
	00 00 00	 cmp	 QWORD PTR [rax+296], 0
  01339	74 2a		 je	 SHORT $LN29@type_new
  0133b	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  01343	48 83 b8 78 01
	00 00 00	 cmp	 QWORD PTR [rax+376], 0
  0134b	75 18		 jne	 SHORT $LN29@type_new

; 2346 :         type->tp_getset = subtype_getsets_weakref_only;

  0134d	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  01355	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:subtype_getsets_weakref_only
  0135c	48 89 88 50 01
	00 00		 mov	 QWORD PTR [rax+336], rcx
  01363	eb 4f		 jmp	 SHORT $LN28@type_new
$LN29@type_new:

; 2347 :     else if (!type->tp_weaklistoffset && type->tp_dictoffset)

  01365	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  0136d	48 83 b8 28 01
	00 00 00	 cmp	 QWORD PTR [rax+296], 0
  01375	75 2a		 jne	 SHORT $LN27@type_new
  01377	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  0137f	48 83 b8 78 01
	00 00 00	 cmp	 QWORD PTR [rax+376], 0
  01387	74 18		 je	 SHORT $LN27@type_new

; 2348 :         type->tp_getset = subtype_getsets_dict_only;

  01389	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  01391	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:subtype_getsets_dict_only
  01398	48 89 88 50 01
	00 00		 mov	 QWORD PTR [rax+336], rcx

; 2349 :     else

  0139f	eb 13		 jmp	 SHORT $LN26@type_new
$LN27@type_new:

; 2350 :         type->tp_getset = NULL;

  013a1	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  013a9	48 c7 80 50 01
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+336], 0
$LN26@type_new:
$LN28@type_new:
$LN30@type_new:

; 2351 : 
; 2352 :     /* Special case some slots */
; 2353 :     if (type->tp_dictoffset != 0 || nslots > 0) {

  013b4	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  013bc	48 83 b8 78 01
	00 00 00	 cmp	 QWORD PTR [rax+376], 0
  013c4	75 0b		 jne	 SHORT $LN24@type_new
  013c6	48 83 bc 24 00
	01 00 00 00	 cmp	 QWORD PTR nslots$[rsp], 0
  013cf	7e 74		 jle	 SHORT $LN25@type_new
$LN24@type_new:

; 2354 :         if (base->tp_getattr == NULL && base->tp_getattro == NULL)

  013d1	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR base$[rsp]
  013d9	48 83 b8 98 00
	00 00 00	 cmp	 QWORD PTR [rax+152], 0
  013e1	75 28		 jne	 SHORT $LN23@type_new
  013e3	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR base$[rsp]
  013eb	48 83 b8 e8 00
	00 00 00	 cmp	 QWORD PTR [rax+232], 0
  013f3	75 16		 jne	 SHORT $LN23@type_new

; 2355 :             type->tp_getattro = PyObject_GenericGetAttr;

  013f5	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  013fd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyObject_GenericGetAttr
  01404	48 89 88 e8 00
	00 00		 mov	 QWORD PTR [rax+232], rcx
$LN23@type_new:

; 2356 :         if (base->tp_setattr == NULL && base->tp_setattro == NULL)

  0140b	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR base$[rsp]
  01413	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  0141b	75 28		 jne	 SHORT $LN22@type_new
  0141d	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR base$[rsp]
  01425	48 83 b8 f0 00
	00 00 00	 cmp	 QWORD PTR [rax+240], 0
  0142d	75 16		 jne	 SHORT $LN22@type_new

; 2357 :             type->tp_setattro = PyObject_GenericSetAttr;

  0142f	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  01437	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyObject_GenericSetAttr
  0143e	48 89 88 f0 00
	00 00		 mov	 QWORD PTR [rax+240], rcx
$LN22@type_new:
$LN25@type_new:

; 2358 :     }
; 2359 :     type->tp_dealloc = subtype_dealloc;

  01445	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  0144d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:subtype_dealloc
  01454	48 89 88 88 00
	00 00		 mov	 QWORD PTR [rax+136], rcx

; 2360 : 
; 2361 :     /* Enable GC unless there are really no instance variables possible */
; 2362 :     if (!(type->tp_basicsize == sizeof(PyObject) &&
; 2363 :           type->tp_itemsize == 0))

  0145b	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  01463	48 83 78 78 60	 cmp	 QWORD PTR [rax+120], 96	; 00000060H
  01468	75 12		 jne	 SHORT $LN20@type_new
  0146a	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  01472	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  0147a	74 20		 je	 SHORT $LN21@type_new
$LN20@type_new:

; 2364 :         type->tp_flags |= Py_TPFLAGS_HAVE_GC;

  0147c	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  01484	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0148a	0f ba e8 0e	 bts	 eax, 14
  0148e	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR type$[rsp]
  01496	89 81 00 01 00
	00		 mov	 DWORD PTR [rcx+256], eax
$LN21@type_new:

; 2365 : 
; 2366 :     /* Always override allocation strategy to use regular heap */
; 2367 :     type->tp_alloc = PyType_GenericAlloc;

  0149c	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  014a4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyType_GenericAlloc
  014ab	48 89 88 88 01
	00 00		 mov	 QWORD PTR [rax+392], rcx

; 2368 :     if (type->tp_flags & Py_TPFLAGS_HAVE_GC) {

  014b2	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  014ba	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  014c0	25 00 40 00 00	 and	 eax, 16384		; 00004000H
  014c5	85 c0		 test	 eax, eax
  014c7	74 44		 je	 SHORT $LN19@type_new

; 2369 :         type->tp_free = PyObject_GC_Del;

  014c9	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  014d1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyObject_GC_Del
  014d8	48 89 88 98 01
	00 00		 mov	 QWORD PTR [rax+408], rcx

; 2370 :         type->tp_traverse = subtype_traverse;

  014df	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  014e7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:subtype_traverse
  014ee	48 89 88 10 01
	00 00		 mov	 QWORD PTR [rax+272], rcx

; 2371 :         type->tp_clear = subtype_clear;

  014f5	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  014fd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:subtype_clear
  01504	48 89 88 18 01
	00 00		 mov	 QWORD PTR [rax+280], rcx

; 2372 :     }
; 2373 :     else

  0150b	eb 16		 jmp	 SHORT $LN18@type_new
$LN19@type_new:

; 2374 :         type->tp_free = PyObject_Del;

  0150d	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  01515	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_PyObject_DebugFree
  0151c	48 89 88 98 01
	00 00		 mov	 QWORD PTR [rax+408], rcx
$LN18@type_new:

; 2375 : 
; 2376 :     /* Initialize the rest */
; 2377 :     if (PyType_Ready(type) < 0)

  01523	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR type$[rsp]
  0152b	e8 00 00 00 00	 call	 PyType_Ready
  01530	85 c0		 test	 eax, eax
  01532	7d 02		 jge	 SHORT $LN17@type_new

; 2378 :         goto error;

  01534	eb 24		 jmp	 SHORT $error$22019
$LN17@type_new:

; 2379 : 
; 2380 :     /* Put the proper slots in place */
; 2381 :     fixup_slot_dispatchers(type);

  01536	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR type$[rsp]
  0153e	e8 00 00 00 00	 call	 fixup_slot_dispatchers

; 2382 : 
; 2383 :     Py_DECREF(dict);

  01543	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR dict$[rsp]
  0154b	e8 00 00 00 00	 call	 _Py_DecRef

; 2384 :     return (PyObject *)type;

  01550	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  01558	eb 7a		 jmp	 SHORT $LN114@type_new
$error$22019:
$LN16@type_new:

; 2385 : 
; 2386 : error:
; 2387 :     Py_XDECREF(dict);

  0155a	48 83 bc 24 a0
	00 00 00 00	 cmp	 QWORD PTR dict$[rsp], 0
  01563	74 0d		 je	 SHORT $LN13@type_new
  01565	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR dict$[rsp]
  0156d	e8 00 00 00 00	 call	 _Py_DecRef
$LN13@type_new:
  01572	33 c0		 xor	 eax, eax
  01574	85 c0		 test	 eax, eax
  01576	75 e2		 jne	 SHORT $LN16@type_new
$LN12@type_new:

; 2388 :     Py_XDECREF(bases);

  01578	48 83 bc 24 a8
	00 00 00 00	 cmp	 QWORD PTR bases$[rsp], 0
  01581	74 0d		 je	 SHORT $LN9@type_new
  01583	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR bases$[rsp]
  0158b	e8 00 00 00 00	 call	 _Py_DecRef
$LN9@type_new:
  01590	33 c0		 xor	 eax, eax
  01592	85 c0		 test	 eax, eax
  01594	75 e2		 jne	 SHORT $LN12@type_new
$LN8@type_new:

; 2389 :     Py_XDECREF(slots);

  01596	48 83 bc 24 c0
	00 00 00 00	 cmp	 QWORD PTR slots$[rsp], 0
  0159f	74 0d		 je	 SHORT $LN5@type_new
  015a1	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR slots$[rsp]
  015a9	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@type_new:
  015ae	33 c0		 xor	 eax, eax
  015b0	85 c0		 test	 eax, eax
  015b2	75 e2		 jne	 SHORT $LN8@type_new
$LN4@type_new:

; 2390 :     Py_XDECREF(type);

  015b4	48 83 bc 24 98
	00 00 00 00	 cmp	 QWORD PTR type$[rsp], 0
  015bd	74 0d		 je	 SHORT $LN1@type_new
  015bf	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR type$[rsp]
  015c7	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@type_new:
  015cc	33 c0		 xor	 eax, eax
  015ce	85 c0		 test	 eax, eax
  015d0	75 e2		 jne	 SHORT $LN4@type_new

; 2391 :     return NULL;

  015d2	33 c0		 xor	 eax, eax
$LN114@type_new:

; 2392 : }

  015d4	48 81 c4 78 01
	00 00		 add	 rsp, 376		; 00000178H
  015db	c3		 ret	 0
type_new ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BB@KAJEFJMJ@subtype_traverse?$AA@	; `string'
PUBLIC	??_C@_19FEGIJLLP@?$AAb?$AAa?$AAs?$AAe?$AA?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$subtype_traverse DD imagerel subtype_traverse
	DD	imagerel subtype_traverse+478
	DD	imagerel $unwind$subtype_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$subtype_traverse DD 011301H
	DD	0a213H
xdata	ENDS
;	COMDAT ??_C@_0BB@KAJEFJMJ@subtype_traverse?$AA@
CONST	SEGMENT
??_C@_0BB@KAJEFJMJ@subtype_traverse?$AA@ DB 'subtype_traverse', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_19FEGIJLLP@?$AAb?$AAa?$AAs?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_19FEGIJLLP@?$AAb?$AAa?$AAs?$AAe?$AA?$AA@ DB 'b', 00H, 'a', 00H, 's', 00H
	DB	'e', 00H, 00H, 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT subtype_traverse
_TEXT	SEGMENT
base$ = 32
type$ = 40
basetraverse$ = 48
err$21116 = 56
dictptr$21121 = 64
vret$21129 = 72
vret$21138 = 76
self$ = 96
visit$ = 104
arg$ = 112
subtype_traverse PROC					; COMDAT

; 817  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 818  :     PyTypeObject *type, *base;
; 819  :     traverseproc basetraverse;
; 820  : 
; 821  :     /* Find the nearest base with a different tp_traverse,
; 822  :        and traverse slots while we're at it */
; 823  :     type = Py_TYPE(self);

  00013	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00018	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0001c	48 89 44 24 28	 mov	 QWORD PTR type$[rsp], rax

; 824  :     base = type;

  00021	48 8b 44 24 28	 mov	 rax, QWORD PTR type$[rsp]
  00026	48 89 44 24 20	 mov	 QWORD PTR base$[rsp], rax
$LN20@subtype_tr:

; 825  :     while ((basetraverse = base->tp_traverse) == subtype_traverse) {

  0002b	48 8b 44 24 20	 mov	 rax, QWORD PTR base$[rsp]
  00030	48 8b 80 10 01
	00 00		 mov	 rax, QWORD PTR [rax+272]
  00037	48 89 44 24 30	 mov	 QWORD PTR basetraverse$[rsp], rax
  0003c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:subtype_traverse
  00043	48 39 44 24 30	 cmp	 QWORD PTR basetraverse$[rsp], rax
  00048	75 73		 jne	 SHORT $LN19@subtype_tr

; 826  :         if (Py_SIZE(base)) {

  0004a	48 8b 44 24 20	 mov	 rax, QWORD PTR base$[rsp]
  0004f	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00054	74 2d		 je	 SHORT $LN18@subtype_tr

; 827  :             int err = traverse_slots(base, self, visit, arg);

  00056	4c 8b 4c 24 70	 mov	 r9, QWORD PTR arg$[rsp]
  0005b	4c 8b 44 24 68	 mov	 r8, QWORD PTR visit$[rsp]
  00060	48 8b 54 24 60	 mov	 rdx, QWORD PTR self$[rsp]
  00065	48 8b 4c 24 20	 mov	 rcx, QWORD PTR base$[rsp]
  0006a	e8 00 00 00 00	 call	 traverse_slots
  0006f	89 44 24 38	 mov	 DWORD PTR err$21116[rsp], eax

; 828  :             if (err)

  00073	83 7c 24 38 00	 cmp	 DWORD PTR err$21116[rsp], 0
  00078	74 09		 je	 SHORT $LN17@subtype_tr

; 829  :                 return err;

  0007a	8b 44 24 38	 mov	 eax, DWORD PTR err$21116[rsp]
  0007e	e9 56 01 00 00	 jmp	 $LN21@subtype_tr
$LN17@subtype_tr:
$LN18@subtype_tr:

; 830  :         }
; 831  :         base = base->tp_base;

  00083	48 8b 44 24 20	 mov	 rax, QWORD PTR base$[rsp]
  00088	48 8b 80 58 01
	00 00		 mov	 rax, QWORD PTR [rax+344]
  0008f	48 89 44 24 20	 mov	 QWORD PTR base$[rsp], rax

; 832  :         assert(base);

  00094	48 83 7c 24 20
	00		 cmp	 QWORD PTR base$[rsp], 0
  0009a	75 1c		 jne	 SHORT $LN23@subtype_tr
  0009c	41 b8 40 03 00
	00		 mov	 r8d, 832		; 00000340H
  000a2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@GJLLIOPA@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAt?$AAy?$AAp?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  000a9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_19FEGIJLLP@?$AAb?$AAa?$AAs?$AAe?$AA?$AA@
  000b0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000b6	33 c0		 xor	 eax, eax
$LN23@subtype_tr:

; 833  :     }

  000b8	e9 6e ff ff ff	 jmp	 $LN20@subtype_tr
$LN19@subtype_tr:

; 834  : 
; 835  :     if (type->tp_dictoffset != base->tp_dictoffset) {

  000bd	48 8b 44 24 28	 mov	 rax, QWORD PTR type$[rsp]
  000c2	48 8b 4c 24 20	 mov	 rcx, QWORD PTR base$[rsp]
  000c7	48 8b 89 78 01
	00 00		 mov	 rcx, QWORD PTR [rcx+376]
  000ce	48 39 88 78 01
	00 00		 cmp	 QWORD PTR [rax+376], rcx
  000d5	74 7d		 je	 SHORT $LN16@subtype_tr

; 836  :         PyObject **dictptr = _PyObject_GetDictPtr(self);

  000d7	48 8b 4c 24 60	 mov	 rcx, QWORD PTR self$[rsp]
  000dc	e8 00 00 00 00	 call	 _PyObject_GetDictPtr
  000e1	48 89 44 24 40	 mov	 QWORD PTR dictptr$21121[rsp], rax

; 837  :         if (dictptr && *dictptr)

  000e6	48 83 7c 24 40
	00		 cmp	 QWORD PTR dictptr$21121[rsp], 0
  000ec	74 66		 je	 SHORT $LN15@subtype_tr
  000ee	48 8b 44 24 40	 mov	 rax, QWORD PTR dictptr$21121[rsp]
  000f3	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  000f7	74 5b		 je	 SHORT $LN15@subtype_tr
$LN14@subtype_tr:

; 838  :             Py_VISIT(*dictptr);

  000f9	e8 00 00 00 00	 call	 _Py_PXCTX
  000fe	85 c0		 test	 eax, eax
  00100	74 1c		 je	 SHORT $LN11@subtype_tr
  00102	45 33 c9	 xor	 r9d, r9d
  00105	41 b8 46 03 00
	00		 mov	 r8d, 838		; 00000346H
  0010b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@PKBBAMFA@?4?4?2Objects?2typeobject?4c?$AA@
  00112	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@KAJEFJMJ@subtype_traverse?$AA@
  00119	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN11@subtype_tr:
  0011e	48 8b 44 24 40	 mov	 rax, QWORD PTR dictptr$21121[rsp]
  00123	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00127	74 25		 je	 SHORT $LN10@subtype_tr
  00129	48 8b 54 24 70	 mov	 rdx, QWORD PTR arg$[rsp]
  0012e	48 8b 44 24 40	 mov	 rax, QWORD PTR dictptr$21121[rsp]
  00133	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00136	ff 54 24 68	 call	 QWORD PTR visit$[rsp]
  0013a	89 44 24 48	 mov	 DWORD PTR vret$21129[rsp], eax
  0013e	83 7c 24 48 00	 cmp	 DWORD PTR vret$21129[rsp], 0
  00143	74 09		 je	 SHORT $LN9@subtype_tr
  00145	8b 44 24 48	 mov	 eax, DWORD PTR vret$21129[rsp]
  00149	e9 8b 00 00 00	 jmp	 $LN21@subtype_tr
$LN9@subtype_tr:
$LN10@subtype_tr:
  0014e	33 c0		 xor	 eax, eax
  00150	85 c0		 test	 eax, eax
  00152	75 a5		 jne	 SHORT $LN14@subtype_tr
$LN15@subtype_tr:
$LN16@subtype_tr:

; 839  :     }
; 840  : 
; 841  :     if (type->tp_flags & Py_TPFLAGS_HEAPTYPE)

  00154	48 8b 44 24 28	 mov	 rax, QWORD PTR type$[rsp]
  00159	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0015f	25 00 02 00 00	 and	 eax, 512		; 00000200H
  00164	85 c0		 test	 eax, eax
  00166	74 52		 je	 SHORT $LN8@subtype_tr
$LN7@subtype_tr:

; 842  :         /* For a heaptype, the instances count as references
; 843  :            to the type.          Traverse the type so the collector
; 844  :            can find cycles involving this link. */
; 845  :         Py_VISIT(type);

  00168	e8 00 00 00 00	 call	 _Py_PXCTX
  0016d	85 c0		 test	 eax, eax
  0016f	74 1c		 je	 SHORT $LN4@subtype_tr
  00171	45 33 c9	 xor	 r9d, r9d
  00174	41 b8 4d 03 00
	00		 mov	 r8d, 845		; 0000034dH
  0017a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@PKBBAMFA@?4?4?2Objects?2typeobject?4c?$AA@
  00181	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@KAJEFJMJ@subtype_traverse?$AA@
  00188	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN4@subtype_tr:
  0018d	48 83 7c 24 28
	00		 cmp	 QWORD PTR type$[rsp], 0
  00193	74 1f		 je	 SHORT $LN3@subtype_tr
  00195	48 8b 54 24 70	 mov	 rdx, QWORD PTR arg$[rsp]
  0019a	48 8b 4c 24 28	 mov	 rcx, QWORD PTR type$[rsp]
  0019f	ff 54 24 68	 call	 QWORD PTR visit$[rsp]
  001a3	89 44 24 4c	 mov	 DWORD PTR vret$21138[rsp], eax
  001a7	83 7c 24 4c 00	 cmp	 DWORD PTR vret$21138[rsp], 0
  001ac	74 06		 je	 SHORT $LN2@subtype_tr
  001ae	8b 44 24 4c	 mov	 eax, DWORD PTR vret$21138[rsp]
  001b2	eb 25		 jmp	 SHORT $LN21@subtype_tr
$LN2@subtype_tr:
$LN3@subtype_tr:
  001b4	33 c0		 xor	 eax, eax
  001b6	85 c0		 test	 eax, eax
  001b8	75 ae		 jne	 SHORT $LN7@subtype_tr
$LN8@subtype_tr:

; 846  : 
; 847  :     if (basetraverse)

  001ba	48 83 7c 24 30
	00		 cmp	 QWORD PTR basetraverse$[rsp], 0
  001c0	74 15		 je	 SHORT $LN1@subtype_tr

; 848  :         return basetraverse(self, visit, arg);

  001c2	4c 8b 44 24 70	 mov	 r8, QWORD PTR arg$[rsp]
  001c7	48 8b 54 24 68	 mov	 rdx, QWORD PTR visit$[rsp]
  001cc	48 8b 4c 24 60	 mov	 rcx, QWORD PTR self$[rsp]
  001d1	ff 54 24 30	 call	 QWORD PTR basetraverse$[rsp]
  001d5	eb 02		 jmp	 SHORT $LN21@subtype_tr
$LN1@subtype_tr:

; 849  :     return 0;

  001d7	33 c0		 xor	 eax, eax
$LN21@subtype_tr:

; 850  : }

  001d9	48 83 c4 58	 add	 rsp, 88			; 00000058H
  001dd	c3		 ret	 0
subtype_traverse ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$traverse_slots DD imagerel traverse_slots
	DD	imagerel traverse_slots+217
	DD	imagerel $unwind$traverse_slots
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$traverse_slots DD 011801H
	DD	0a218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT traverse_slots
_TEXT	SEGMENT
n$ = 32
i$ = 40
mp$ = 48
obj$21093 = 56
addr$21091 = 64
err$21097 = 72
type$ = 96
self$ = 104
visit$ = 112
arg$ = 120
traverse_slots PROC					; COMDAT

; 795  : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 796  :     Py_ssize_t i, n;
; 797  :     PyMemberDef *mp;
; 798  : 
; 799  :     n = Py_SIZE(type);

  00018	48 8b 44 24 60	 mov	 rax, QWORD PTR type$[rsp]
  0001d	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00021	48 89 44 24 20	 mov	 QWORD PTR n$[rsp], rax

; 800  :     mp = PyHeapType_GET_MEMBERS((PyHeapTypeObject *)type);

  00026	48 8b 44 24 60	 mov	 rax, QWORD PTR type$[rsp]
  0002b	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0002f	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  00033	48 8b 4c 24 60	 mov	 rcx, QWORD PTR type$[rsp]
  00038	48 03 c8	 add	 rcx, rax
  0003b	48 8b c1	 mov	 rax, rcx
  0003e	48 89 44 24 30	 mov	 QWORD PTR mp$[rsp], rax

; 801  :     for (i = 0; i < n; i++, mp++) {

  00043	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  0004c	eb 1b		 jmp	 SHORT $LN6@traverse_s
$LN5@traverse_s:
  0004e	48 8b 44 24 28	 mov	 rax, QWORD PTR i$[rsp]
  00053	48 ff c0	 inc	 rax
  00056	48 89 44 24 28	 mov	 QWORD PTR i$[rsp], rax
  0005b	48 8b 44 24 30	 mov	 rax, QWORD PTR mp$[rsp]
  00060	48 83 c0 28	 add	 rax, 40			; 00000028H
  00064	48 89 44 24 30	 mov	 QWORD PTR mp$[rsp], rax
$LN6@traverse_s:
  00069	48 8b 44 24 20	 mov	 rax, QWORD PTR n$[rsp]
  0006e	48 39 44 24 28	 cmp	 QWORD PTR i$[rsp], rax
  00073	7d 5d		 jge	 SHORT $LN4@traverse_s

; 802  :         if (mp->type == T_OBJECT_EX) {

  00075	48 8b 44 24 30	 mov	 rax, QWORD PTR mp$[rsp]
  0007a	83 78 08 10	 cmp	 DWORD PTR [rax+8], 16
  0007e	75 4d		 jne	 SHORT $LN3@traverse_s

; 803  :             char *addr = (char *)self + mp->offset;

  00080	48 8b 44 24 30	 mov	 rax, QWORD PTR mp$[rsp]
  00085	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00089	48 8b 4c 24 68	 mov	 rcx, QWORD PTR self$[rsp]
  0008e	48 03 c8	 add	 rcx, rax
  00091	48 8b c1	 mov	 rax, rcx
  00094	48 89 44 24 40	 mov	 QWORD PTR addr$21091[rsp], rax

; 804  :             PyObject *obj = *(PyObject **)addr;

  00099	48 8b 44 24 40	 mov	 rax, QWORD PTR addr$21091[rsp]
  0009e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000a1	48 89 44 24 38	 mov	 QWORD PTR obj$21093[rsp], rax

; 805  :             if (obj != NULL) {

  000a6	48 83 7c 24 38
	00		 cmp	 QWORD PTR obj$21093[rsp], 0
  000ac	74 1f		 je	 SHORT $LN2@traverse_s

; 806  :                 int err = visit(obj, arg);

  000ae	48 8b 54 24 78	 mov	 rdx, QWORD PTR arg$[rsp]
  000b3	48 8b 4c 24 38	 mov	 rcx, QWORD PTR obj$21093[rsp]
  000b8	ff 54 24 70	 call	 QWORD PTR visit$[rsp]
  000bc	89 44 24 48	 mov	 DWORD PTR err$21097[rsp], eax

; 807  :                 if (err)

  000c0	83 7c 24 48 00	 cmp	 DWORD PTR err$21097[rsp], 0
  000c5	74 06		 je	 SHORT $LN1@traverse_s

; 808  :                     return err;

  000c7	8b 44 24 48	 mov	 eax, DWORD PTR err$21097[rsp]
  000cb	eb 07		 jmp	 SHORT $LN7@traverse_s
$LN1@traverse_s:
$LN2@traverse_s:
$LN3@traverse_s:

; 809  :             }
; 810  :         }
; 811  :     }

  000cd	e9 7c ff ff ff	 jmp	 $LN5@traverse_s
$LN4@traverse_s:

; 812  :     return 0;

  000d2	33 c0		 xor	 eax, eax
$LN7@traverse_s:

; 813  : }

  000d4	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000d8	c3		 ret	 0
traverse_slots ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@KICMAMDL@subtype_clear?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$subtype_clear DD imagerel subtype_clear
	DD	imagerel subtype_clear+333
	DD	imagerel $unwind$subtype_clear
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$subtype_clear DD 010901H
	DD	0c209H
xdata	ENDS
;	COMDAT ??_C@_0O@KICMAMDL@subtype_clear?$AA@
CONST	SEGMENT
??_C@_0O@KICMAMDL@subtype_clear?$AA@ DB 'subtype_clear', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT subtype_clear
_TEXT	SEGMENT
base$ = 48
type$ = 56
baseclear$ = 64
dictptr$21185 = 72
_py_tmp$21192 = 80
self$ = 112
subtype_clear PROC					; COMDAT

; 874  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 875  :     PyTypeObject *type, *base;
; 876  :     inquiry baseclear;
; 877  : 
; 878  :     /* Find the nearest base with a different tp_clear
; 879  :        and clear slots while we're at it */
; 880  :     type = Py_TYPE(self);

  00009	48 8b 44 24 70	 mov	 rax, QWORD PTR self$[rsp]
  0000e	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00012	48 89 44 24 38	 mov	 QWORD PTR type$[rsp], rax

; 881  :     base = type;

  00017	48 8b 44 24 38	 mov	 rax, QWORD PTR type$[rsp]
  0001c	48 89 44 24 30	 mov	 QWORD PTR base$[rsp], rax
$LN10@subtype_cl:

; 882  :     while ((baseclear = base->tp_clear) == subtype_clear) {

  00021	48 8b 44 24 30	 mov	 rax, QWORD PTR base$[rsp]
  00026	48 8b 80 18 01
	00 00		 mov	 rax, QWORD PTR [rax+280]
  0002d	48 89 44 24 40	 mov	 QWORD PTR baseclear$[rsp], rax
  00032	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:subtype_clear
  00039	48 39 44 24 40	 cmp	 QWORD PTR baseclear$[rsp], rax
  0003e	75 52		 jne	 SHORT $LN9@subtype_cl

; 883  :         if (Py_SIZE(base))

  00040	48 8b 44 24 30	 mov	 rax, QWORD PTR base$[rsp]
  00045	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  0004a	74 0f		 je	 SHORT $LN8@subtype_cl

; 884  :             clear_slots(base, self);

  0004c	48 8b 54 24 70	 mov	 rdx, QWORD PTR self$[rsp]
  00051	48 8b 4c 24 30	 mov	 rcx, QWORD PTR base$[rsp]
  00056	e8 00 00 00 00	 call	 clear_slots
$LN8@subtype_cl:

; 885  :         base = base->tp_base;

  0005b	48 8b 44 24 30	 mov	 rax, QWORD PTR base$[rsp]
  00060	48 8b 80 58 01
	00 00		 mov	 rax, QWORD PTR [rax+344]
  00067	48 89 44 24 30	 mov	 QWORD PTR base$[rsp], rax

; 886  :         assert(base);

  0006c	48 83 7c 24 30
	00		 cmp	 QWORD PTR base$[rsp], 0
  00072	75 1c		 jne	 SHORT $LN13@subtype_cl
  00074	41 b8 76 03 00
	00		 mov	 r8d, 886		; 00000376H
  0007a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@GJLLIOPA@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAt?$AAy?$AAp?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00081	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_19FEGIJLLP@?$AAb?$AAa?$AAs?$AAe?$AA?$AA@
  00088	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0008e	33 c0		 xor	 eax, eax
$LN13@subtype_cl:

; 887  :     }

  00090	eb 8f		 jmp	 SHORT $LN10@subtype_cl
$LN9@subtype_cl:

; 888  : 
; 889  :     /* Clear the instance dict (if any), to break cycles involving only
; 890  :        __dict__ slots (as in the case 'self.__dict__ is self'). */
; 891  :     if (type->tp_dictoffset != base->tp_dictoffset) {

  00092	48 8b 44 24 38	 mov	 rax, QWORD PTR type$[rsp]
  00097	48 8b 4c 24 30	 mov	 rcx, QWORD PTR base$[rsp]
  0009c	48 8b 89 78 01
	00 00		 mov	 rcx, QWORD PTR [rcx+376]
  000a3	48 39 88 78 01
	00 00		 cmp	 QWORD PTR [rax+376], rcx
  000aa	0f 84 83 00 00
	00		 je	 $LN7@subtype_cl

; 892  :         PyObject **dictptr = _PyObject_GetDictPtr(self);

  000b0	48 8b 4c 24 70	 mov	 rcx, QWORD PTR self$[rsp]
  000b5	e8 00 00 00 00	 call	 _PyObject_GetDictPtr
  000ba	48 89 44 24 48	 mov	 QWORD PTR dictptr$21185[rsp], rax

; 893  :         if (dictptr && *dictptr)

  000bf	48 83 7c 24 48
	00		 cmp	 QWORD PTR dictptr$21185[rsp], 0
  000c5	74 6c		 je	 SHORT $LN6@subtype_cl
  000c7	48 8b 44 24 48	 mov	 rax, QWORD PTR dictptr$21185[rsp]
  000cc	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  000d0	74 61		 je	 SHORT $LN6@subtype_cl
$LN5@subtype_cl:

; 894  :             Py_CLEAR(*dictptr);

  000d2	48 8b 44 24 48	 mov	 rax, QWORD PTR dictptr$21185[rsp]
  000d7	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  000db	74 50		 je	 SHORT $LN2@subtype_cl
  000dd	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000e5	48 8b 44 24 48	 mov	 rax, QWORD PTR dictptr$21185[rsp]
  000ea	4c 8b 08	 mov	 r9, QWORD PTR [rax]
  000ed	41 b8 7e 03 00
	00		 mov	 r8d, 894		; 0000037eH
  000f3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@PKBBAMFA@?4?4?2Objects?2typeobject?4c?$AA@
  000fa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@KICMAMDL@subtype_clear?$AA@
  00101	e8 00 00 00 00	 call	 _PyParallel_Guard
  00106	85 c0		 test	 eax, eax
  00108	75 23		 jne	 SHORT $LN2@subtype_cl
  0010a	48 8b 44 24 48	 mov	 rax, QWORD PTR dictptr$21185[rsp]
  0010f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00112	48 89 44 24 50	 mov	 QWORD PTR _py_tmp$21192[rsp], rax
  00117	48 8b 44 24 48	 mov	 rax, QWORD PTR dictptr$21185[rsp]
  0011c	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
  00123	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _py_tmp$21192[rsp]
  00128	e8 00 00 00 00	 call	 _Py_DecRef
$LN2@subtype_cl:
  0012d	33 c0		 xor	 eax, eax
  0012f	85 c0		 test	 eax, eax
  00131	75 9f		 jne	 SHORT $LN5@subtype_cl
$LN6@subtype_cl:
$LN7@subtype_cl:

; 895  :     }
; 896  : 
; 897  :     if (baseclear)

  00133	48 83 7c 24 40
	00		 cmp	 QWORD PTR baseclear$[rsp], 0
  00139	74 0b		 je	 SHORT $LN1@subtype_cl

; 898  :         return baseclear(self);

  0013b	48 8b 4c 24 70	 mov	 rcx, QWORD PTR self$[rsp]
  00140	ff 54 24 40	 call	 QWORD PTR baseclear$[rsp]
  00144	eb 02		 jmp	 SHORT $LN11@subtype_cl
$LN1@subtype_cl:

; 899  :     return 0;

  00146	33 c0		 xor	 eax, eax
$LN11@subtype_cl:

; 900  : }

  00148	48 83 c4 68	 add	 rsp, 104		; 00000068H
  0014c	c3		 ret	 0
subtype_clear ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$clear_slots DD imagerel clear_slots
	DD	imagerel clear_slots+211
	DD	imagerel $unwind$clear_slots
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$clear_slots DD 010e01H
	DD	0a20eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT clear_slots
_TEXT	SEGMENT
n$ = 32
i$ = 40
mp$ = 48
obj$21163 = 56
addr$21161 = 64
type$ = 96
self$ = 104
clear_slots PROC					; COMDAT

; 854  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 855  :     Py_ssize_t i, n;
; 856  :     PyMemberDef *mp;
; 857  : 
; 858  :     n = Py_SIZE(type);

  0000e	48 8b 44 24 60	 mov	 rax, QWORD PTR type$[rsp]
  00013	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00017	48 89 44 24 20	 mov	 QWORD PTR n$[rsp], rax

; 859  :     mp = PyHeapType_GET_MEMBERS((PyHeapTypeObject *)type);

  0001c	48 8b 44 24 60	 mov	 rax, QWORD PTR type$[rsp]
  00021	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00025	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  00029	48 8b 4c 24 60	 mov	 rcx, QWORD PTR type$[rsp]
  0002e	48 03 c8	 add	 rcx, rax
  00031	48 8b c1	 mov	 rax, rcx
  00034	48 89 44 24 30	 mov	 QWORD PTR mp$[rsp], rax

; 860  :     for (i = 0; i < n; i++, mp++) {

  00039	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  00042	eb 1b		 jmp	 SHORT $LN5@clear_slot
$LN4@clear_slot:
  00044	48 8b 44 24 28	 mov	 rax, QWORD PTR i$[rsp]
  00049	48 ff c0	 inc	 rax
  0004c	48 89 44 24 28	 mov	 QWORD PTR i$[rsp], rax
  00051	48 8b 44 24 30	 mov	 rax, QWORD PTR mp$[rsp]
  00056	48 83 c0 28	 add	 rax, 40			; 00000028H
  0005a	48 89 44 24 30	 mov	 QWORD PTR mp$[rsp], rax
$LN5@clear_slot:
  0005f	48 8b 44 24 20	 mov	 rax, QWORD PTR n$[rsp]
  00064	48 39 44 24 28	 cmp	 QWORD PTR i$[rsp], rax
  00069	7d 63		 jge	 SHORT $LN3@clear_slot

; 861  :         if (mp->type == T_OBJECT_EX && !(mp->flags & READONLY)) {

  0006b	48 8b 44 24 30	 mov	 rax, QWORD PTR mp$[rsp]
  00070	83 78 08 10	 cmp	 DWORD PTR [rax+8], 16
  00074	75 53		 jne	 SHORT $LN2@clear_slot
  00076	48 8b 44 24 30	 mov	 rax, QWORD PTR mp$[rsp]
  0007b	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  0007e	83 e0 01	 and	 eax, 1
  00081	85 c0		 test	 eax, eax
  00083	75 44		 jne	 SHORT $LN2@clear_slot

; 862  :             char *addr = (char *)self + mp->offset;

  00085	48 8b 44 24 30	 mov	 rax, QWORD PTR mp$[rsp]
  0008a	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0008e	48 8b 4c 24 68	 mov	 rcx, QWORD PTR self$[rsp]
  00093	48 03 c8	 add	 rcx, rax
  00096	48 8b c1	 mov	 rax, rcx
  00099	48 89 44 24 40	 mov	 QWORD PTR addr$21161[rsp], rax

; 863  :             PyObject *obj = *(PyObject **)addr;

  0009e	48 8b 44 24 40	 mov	 rax, QWORD PTR addr$21161[rsp]
  000a3	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000a6	48 89 44 24 38	 mov	 QWORD PTR obj$21163[rsp], rax

; 864  :             if (obj != NULL) {

  000ab	48 83 7c 24 38
	00		 cmp	 QWORD PTR obj$21163[rsp], 0
  000b1	74 16		 je	 SHORT $LN1@clear_slot

; 865  :                 *(PyObject **)addr = NULL;

  000b3	48 8b 44 24 40	 mov	 rax, QWORD PTR addr$21161[rsp]
  000b8	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 866  :                 Py_DECREF(obj);

  000bf	48 8b 4c 24 38	 mov	 rcx, QWORD PTR obj$21163[rsp]
  000c4	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@clear_slot:
$LN2@clear_slot:

; 867  :             }
; 868  :         }
; 869  :     }

  000c9	e9 76 ff ff ff	 jmp	 $LN4@clear_slot
$LN3@clear_slot:

; 870  : }

  000ce	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000d2	c3		 ret	 0
clear_slots ENDP
_TEXT	ENDS
PUBLIC	??_C@_1EM@HFMJMDDM@?$AAg?$AA?9?$AA?$DO?$AAg?$AAc?$AA?4?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AAG?$AAC?$AA_?$AAR?$AAE?$AAF?$AAS?$AA_?$AAU?$AAN?$AAT?$AAR@ ; `string'
PUBLIC	??_C@_0BA@HEMFFFIH@subtype_dealloc?$AA@		; `string'
PUBLIC	??_C@_1BI@KBPLCDNF@?$AAb?$AAa?$AAs?$AAe?$AAd?$AAe?$AAa?$AAl?$AAl?$AAo?$AAc?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CG@FNCGNEAP@?$AAP?$AAy?$AA_?$AAS?$AAI?$AAZ?$AAE?$AA?$CI?$AAb?$AAa?$AAs?$AAe?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_1EK@NBJBBGDH@?$AAt?$AAy?$AAp?$AAe?$AA?9?$AA?$DO?$AAt?$AAp?$AA_?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5?$AAP?$AAy?$AA_?$AAT?$AAP?$AAF?$AAL?$AAA?$AAG?$AAS?$AA_?$AAH?$AAE?$AAA?$AAP@ ; `string'
EXTRN	_PyTrash_thread_deposit_object:PROC
EXTRN	_PyTrash_thread_destroy_chain:PROC
EXTRN	_PyWeakref_ClearRef:PROC
EXTRN	PyObject_ClearWeakRefs:PROC
EXTRN	_PyTrash_delete_nesting:DWORD
EXTRN	PyObject_GC_UnTrack:PROC
EXTRN	PyThreadState_Get:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$subtype_dealloc DD imagerel subtype_dealloc
	DD	imagerel subtype_dealloc+2232
	DD	imagerel $unwind$subtype_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$subtype_dealloc DD 020c01H
	DD	017010cH
xdata	ENDS
;	COMDAT ??_C@_1EM@HFMJMDDM@?$AAg?$AA?9?$AA?$DO?$AAg?$AAc?$AA?4?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AAG?$AAC?$AA_?$AAR?$AAE?$AAF?$AAS?$AA_?$AAU?$AAN?$AAT?$AAR@
CONST	SEGMENT
??_C@_1EM@HFMJMDDM@?$AAg?$AA?9?$AA?$DO?$AAg?$AAc?$AA?4?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AAG?$AAC?$AA_?$AAR?$AAE?$AAF?$AAS?$AA_?$AAU?$AAN?$AAT?$AAR@ DB 'g'
	DB	00H, '-', 00H, '>', 00H, 'g', 00H, 'c', 00H, '.', 00H, 'g', 00H
	DB	'c', 00H, '_', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 's', 00H, ' '
	DB	00H, '!', 00H, '=', 00H, ' ', 00H, '_', 00H, 'P', 00H, 'y', 00H
	DB	'G', 00H, 'C', 00H, '_', 00H, 'R', 00H, 'E', 00H, 'F', 00H, 'S'
	DB	00H, '_', 00H, 'U', 00H, 'N', 00H, 'T', 00H, 'R', 00H, 'A', 00H
	DB	'C', 00H, 'K', 00H, 'E', 00H, 'D', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@HEMFFFIH@subtype_dealloc?$AA@
CONST	SEGMENT
??_C@_0BA@HEMFFFIH@subtype_dealloc?$AA@ DB 'subtype_dealloc', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BI@KBPLCDNF@?$AAb?$AAa?$AAs?$AAe?$AAd?$AAe?$AAa?$AAl?$AAl?$AAo?$AAc?$AA?$AA@
CONST	SEGMENT
??_C@_1BI@KBPLCDNF@?$AAb?$AAa?$AAs?$AAe?$AAd?$AAe?$AAa?$AAl?$AAl?$AAo?$AAc?$AA?$AA@ DB 'b'
	DB	00H, 'a', 00H, 's', 00H, 'e', 00H, 'd', 00H, 'e', 00H, 'a', 00H
	DB	'l', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@FNCGNEAP@?$AAP?$AAy?$AA_?$AAS?$AAI?$AAZ?$AAE?$AA?$CI?$AAb?$AAa?$AAs?$AAe?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1CG@FNCGNEAP@?$AAP?$AAy?$AA_?$AAS?$AAI?$AAZ?$AAE?$AA?$CI?$AAb?$AAa?$AAs?$AAe?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, '_', 00H, 'S', 00H, 'I', 00H, 'Z', 00H, 'E', 00H
	DB	'(', 00H, 'b', 00H, 'a', 00H, 's', 00H, 'e', 00H, ')', 00H, ' '
	DB	00H, '=', 00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EK@NBJBBGDH@?$AAt?$AAy?$AAp?$AAe?$AA?9?$AA?$DO?$AAt?$AAp?$AA_?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5?$AAP?$AAy?$AA_?$AAT?$AAP?$AAF?$AAL?$AAA?$AAG?$AAS?$AA_?$AAH?$AAE?$AAA?$AAP@
CONST	SEGMENT
??_C@_1EK@NBJBBGDH@?$AAt?$AAy?$AAp?$AAe?$AA?9?$AA?$DO?$AAt?$AAp?$AA_?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5?$AAP?$AAy?$AA_?$AAT?$AAP?$AAF?$AAL?$AAA?$AAG?$AAS?$AA_?$AAH?$AAE?$AAA?$AAP@ DB 't'
	DB	00H, 'y', 00H, 'p', 00H, 'e', 00H, '-', 00H, '>', 00H, 't', 00H
	DB	'p', 00H, '_', 00H, 'f', 00H, 'l', 00H, 'a', 00H, 'g', 00H, 's'
	DB	00H, ' ', 00H, '&', 00H, ' ', 00H, 'P', 00H, 'y', 00H, '_', 00H
	DB	'T', 00H, 'P', 00H, 'F', 00H, 'L', 00H, 'A', 00H, 'G', 00H, 'S'
	DB	00H, '_', 00H, 'H', 00H, 'E', 00H, 'A', 00H, 'P', 00H, 'T', 00H
	DB	'Y', 00H, 'P', 00H, 'E', 00H, 00H, 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT subtype_dealloc
_TEXT	SEGMENT
basedealloc$ = 48
base$ = 56
type$ = 64
tstate$ = 72
_tstate$21225 = 80
g$21238 = 88
g$21249 = 96
list$21256 = 104
dictptr$21271 = 112
dict$21274 = 120
g$21285 = 128
tv79 = 136
tv77 = 140
tv186 = 144
tv216 = 152
tv266 = 160
tv264 = 164
tv283 = 168
self$ = 192
subtype_dealloc PROC					; COMDAT

; 904  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H

; 905  :     PyTypeObject *type, *base;
; 906  :     destructor basedealloc;
; 907  :     PyThreadState *tstate = PyThreadState_GET();

  0000c	e8 00 00 00 00	 call	 PyThreadState_Get
  00011	48 89 44 24 48	 mov	 QWORD PTR tstate$[rsp], rax

; 908  : 
; 909  :     /* Extract the type; we expect it to be a heap type */
; 910  :     type = Py_TYPE(self);

  00016	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0001e	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00022	48 89 44 24 40	 mov	 QWORD PTR type$[rsp], rax

; 911  :     assert(type->tp_flags & Py_TPFLAGS_HEAPTYPE);

  00027	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  0002c	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00032	25 00 02 00 00	 and	 eax, 512		; 00000200H
  00037	85 c0		 test	 eax, eax
  00039	75 1c		 jne	 SHORT $LN44@subtype_de
  0003b	41 b8 8f 03 00
	00		 mov	 r8d, 911		; 0000038fH
  00041	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@GJLLIOPA@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAt?$AAy?$AAp?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00048	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EK@NBJBBGDH@?$AAt?$AAy?$AAp?$AAe?$AA?9?$AA?$DO?$AAt?$AAp?$AA_?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5?$AAP?$AAy?$AA_?$AAT?$AAP?$AAF?$AAL?$AAA?$AAG?$AAS?$AA_?$AAH?$AAE?$AAA?$AAP@
  0004f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00055	33 c0		 xor	 eax, eax
$LN44@subtype_de:

; 912  : 
; 913  :     /* Test whether the type has GC exactly once */
; 914  : 
; 915  :     if (!PyType_IS_GC(type)) {

  00057	e8 00 00 00 00	 call	 _Py_PXCTX
  0005c	85 c0		 test	 eax, eax
  0005e	74 0d		 je	 SHORT $LN47@subtype_de
  00060	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv79[rsp], 0
  0006b	eb 3a		 jmp	 SHORT $LN48@subtype_de
$LN47@subtype_de:
  0006d	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  00072	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00078	25 00 40 00 00	 and	 eax, 16384		; 00004000H
  0007d	85 c0		 test	 eax, eax
  0007f	74 0d		 je	 SHORT $LN45@subtype_de
  00081	c7 84 24 8c 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv77[rsp], 1
  0008c	eb 0b		 jmp	 SHORT $LN46@subtype_de
$LN45@subtype_de:
  0008e	c7 84 24 8c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv77[rsp], 0
$LN46@subtype_de:
  00099	8b 84 24 8c 00
	00 00		 mov	 eax, DWORD PTR tv77[rsp]
  000a0	89 84 24 88 00
	00 00		 mov	 DWORD PTR tv79[rsp], eax
$LN48@subtype_de:
  000a7	83 bc 24 88 00
	00 00 00	 cmp	 DWORD PTR tv79[rsp], 0
  000af	0f 85 0e 01 00
	00		 jne	 $LN41@subtype_de

; 916  :         /* It's really rare to find a dynamic type that doesn't have
; 917  :            GC; it can only happen when deriving from 'object' and not
; 918  :            adding any slots or instance variables.  This allows
; 919  :            certain simplifications: there's no need to call
; 920  :            clear_slots(), or DECREF the dict, or clear weakrefs. */
; 921  : 
; 922  :         /* Maybe call finalizer; exit early if resurrected */
; 923  :         if (type->tp_del) {

  000b5	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  000ba	48 83 b8 d0 01
	00 00 00	 cmp	 QWORD PTR [rax+464], 0
  000c2	74 27		 je	 SHORT $LN40@subtype_de

; 924  :             type->tp_del(self);

  000c4	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  000cc	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  000d1	ff 90 d0 01 00
	00		 call	 QWORD PTR [rax+464]

; 925  :             if (self->ob_refcnt > 0)

  000d7	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  000df	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000e4	7e 05		 jle	 SHORT $LN39@subtype_de

; 926  :                 return;

  000e6	e9 c5 07 00 00	 jmp	 $LN42@subtype_de
$LN39@subtype_de:
$LN40@subtype_de:

; 927  :         }
; 928  : 
; 929  :         /* Find the nearest base with a different tp_dealloc */
; 930  :         base = type;

  000eb	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  000f0	48 89 44 24 38	 mov	 QWORD PTR base$[rsp], rax
$LN38@subtype_de:

; 931  :         while ((basedealloc = base->tp_dealloc) == subtype_dealloc) {

  000f5	48 8b 44 24 38	 mov	 rax, QWORD PTR base$[rsp]
  000fa	48 8b 80 88 00
	00 00		 mov	 rax, QWORD PTR [rax+136]
  00101	48 89 44 24 30	 mov	 QWORD PTR basedealloc$[rsp], rax
  00106	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:subtype_dealloc
  0010d	48 39 44 24 30	 cmp	 QWORD PTR basedealloc$[rsp], rax
  00112	75 5f		 jne	 SHORT $LN37@subtype_de

; 932  :             assert(Py_SIZE(base) == 0);

  00114	48 8b 44 24 38	 mov	 rax, QWORD PTR base$[rsp]
  00119	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  0011e	74 1c		 je	 SHORT $LN49@subtype_de
  00120	41 b8 a4 03 00
	00		 mov	 r8d, 932		; 000003a4H
  00126	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@GJLLIOPA@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAt?$AAy?$AAp?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  0012d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@FNCGNEAP@?$AAP?$AAy?$AA_?$AAS?$AAI?$AAZ?$AAE?$AA?$CI?$AAb?$AAa?$AAs?$AAe?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@
  00134	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0013a	33 c0		 xor	 eax, eax
$LN49@subtype_de:

; 933  :             base = base->tp_base;

  0013c	48 8b 44 24 38	 mov	 rax, QWORD PTR base$[rsp]
  00141	48 8b 80 58 01
	00 00		 mov	 rax, QWORD PTR [rax+344]
  00148	48 89 44 24 38	 mov	 QWORD PTR base$[rsp], rax

; 934  :             assert(base);

  0014d	48 83 7c 24 38
	00		 cmp	 QWORD PTR base$[rsp], 0
  00153	75 1c		 jne	 SHORT $LN50@subtype_de
  00155	41 b8 a6 03 00
	00		 mov	 r8d, 934		; 000003a6H
  0015b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@GJLLIOPA@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAt?$AAy?$AAp?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00162	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_19FEGIJLLP@?$AAb?$AAa?$AAs?$AAe?$AA?$AA@
  00169	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0016f	33 c0		 xor	 eax, eax
$LN50@subtype_de:

; 935  :         }

  00171	eb 82		 jmp	 SHORT $LN38@subtype_de
$LN37@subtype_de:

; 936  : 
; 937  :         /* Extract the type again; tp_del may have changed it */
; 938  :         type = Py_TYPE(self);

  00173	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0017b	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0017f	48 89 44 24 40	 mov	 QWORD PTR type$[rsp], rax

; 939  : 
; 940  :         /* Call the base tp_dealloc() */
; 941  :         assert(basedealloc);

  00184	48 83 7c 24 30
	00		 cmp	 QWORD PTR basedealloc$[rsp], 0
  0018a	75 1c		 jne	 SHORT $LN51@subtype_de
  0018c	41 b8 ad 03 00
	00		 mov	 r8d, 941		; 000003adH
  00192	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@GJLLIOPA@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAt?$AAy?$AAp?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00199	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BI@KBPLCDNF@?$AAb?$AAa?$AAs?$AAe?$AAd?$AAe?$AAa?$AAl?$AAl?$AAo?$AAc?$AA?$AA@
  001a0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001a6	33 c0		 xor	 eax, eax
$LN51@subtype_de:

; 942  :         basedealloc(self);

  001a8	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  001b0	ff 54 24 30	 call	 QWORD PTR basedealloc$[rsp]

; 943  : 
; 944  :         /* Can't reference self beyond this point */
; 945  :         Py_DECREF(type);

  001b4	48 8b 4c 24 40	 mov	 rcx, QWORD PTR type$[rsp]
  001b9	e8 00 00 00 00	 call	 _Py_DecRef

; 946  : 
; 947  :         /* Done */
; 948  :         return;

  001be	e9 ed 06 00 00	 jmp	 $LN42@subtype_de
$LN41@subtype_de:

; 949  :     }
; 950  : 
; 951  :     /* We get here only if the type has GC */
; 952  : 
; 953  :     /* UnTrack and re-Track around the trashcan macro, alas */
; 954  :     /* See explanation at end of function for full disclosure */
; 955  :     PyObject_GC_UnTrack(self);

  001c3	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  001cb	e8 00 00 00 00	 call	 PyObject_GC_UnTrack

; 956  :     ++_PyTrash_delete_nesting;

  001d0	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR _PyTrash_delete_nesting
  001d6	ff c0		 inc	 eax
  001d8	89 05 00 00 00
	00		 mov	 DWORD PTR _PyTrash_delete_nesting, eax

; 957  :     ++ tstate->trash_delete_nesting;

  001de	48 8b 44 24 48	 mov	 rax, QWORD PTR tstate$[rsp]
  001e3	8b 80 94 00 00
	00		 mov	 eax, DWORD PTR [rax+148]
  001e9	ff c0		 inc	 eax
  001eb	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tstate$[rsp]
  001f0	89 81 94 00 00
	00		 mov	 DWORD PTR [rcx+148], eax
$LN36@subtype_de:

; 958  :     Py_TRASHCAN_SAFE_BEGIN(self);

  001f6	e8 00 00 00 00	 call	 PyThreadState_Get
  001fb	48 89 44 24 50	 mov	 QWORD PTR _tstate$21225[rsp], rax
  00200	48 8b 44 24 50	 mov	 rax, QWORD PTR _tstate$21225[rsp]
  00205	83 b8 94 00 00
	00 32		 cmp	 DWORD PTR [rax+148], 50	; 00000032H
  0020c	0f 8d 61 06 00
	00		 jge	 $LN33@subtype_de
  00212	48 8b 44 24 50	 mov	 rax, QWORD PTR _tstate$21225[rsp]
  00217	8b 80 94 00 00
	00		 mov	 eax, DWORD PTR [rax+148]
  0021d	ff c0		 inc	 eax
  0021f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _tstate$21225[rsp]
  00224	89 81 94 00 00
	00		 mov	 DWORD PTR [rcx+148], eax

; 959  :     --_PyTrash_delete_nesting;

  0022a	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR _PyTrash_delete_nesting
  00230	ff c8		 dec	 eax
  00232	89 05 00 00 00
	00		 mov	 DWORD PTR _PyTrash_delete_nesting, eax

; 960  :     -- tstate->trash_delete_nesting;

  00238	48 8b 44 24 48	 mov	 rax, QWORD PTR tstate$[rsp]
  0023d	8b 80 94 00 00
	00		 mov	 eax, DWORD PTR [rax+148]
  00243	ff c8		 dec	 eax
  00245	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tstate$[rsp]
  0024a	89 81 94 00 00
	00		 mov	 DWORD PTR [rcx+148], eax

; 961  :     /* DO NOT restore GC tracking at this point.  weakref callbacks
; 962  :      * (if any, and whether directly here or indirectly in something we
; 963  :      * call) may trigger GC, and if self is tracked at that point, it
; 964  :      * will look like trash to GC and GC will try to delete self again.
; 965  :      */
; 966  : 
; 967  :     /* Find the nearest base with a different tp_dealloc */
; 968  :     base = type;

  00250	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  00255	48 89 44 24 38	 mov	 QWORD PTR base$[rsp], rax
$LN32@subtype_de:

; 969  :     while ((/*basedealloc =*/ base->tp_dealloc) == subtype_dealloc) {

  0025a	48 8b 44 24 38	 mov	 rax, QWORD PTR base$[rsp]
  0025f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:subtype_dealloc
  00266	48 39 88 88 00
	00 00		 cmp	 QWORD PTR [rax+136], rcx
  0026d	75 37		 jne	 SHORT $LN31@subtype_de

; 970  :         base = base->tp_base;

  0026f	48 8b 44 24 38	 mov	 rax, QWORD PTR base$[rsp]
  00274	48 8b 80 58 01
	00 00		 mov	 rax, QWORD PTR [rax+344]
  0027b	48 89 44 24 38	 mov	 QWORD PTR base$[rsp], rax

; 971  :         assert(base);

  00280	48 83 7c 24 38
	00		 cmp	 QWORD PTR base$[rsp], 0
  00286	75 1c		 jne	 SHORT $LN52@subtype_de
  00288	41 b8 cb 03 00
	00		 mov	 r8d, 971		; 000003cbH
  0028e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@GJLLIOPA@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAt?$AAy?$AAp?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00295	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_19FEGIJLLP@?$AAb?$AAa?$AAs?$AAe?$AA?$AA@
  0029c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  002a2	33 c0		 xor	 eax, eax
$LN52@subtype_de:

; 972  :     }

  002a4	eb b4		 jmp	 SHORT $LN32@subtype_de
$LN31@subtype_de:

; 973  : 
; 974  :     /* If we added a weaklist, we clear it.      Do this *before* calling
; 975  :        the finalizer (__del__), clearing slots, or clearing the instance
; 976  :        dict. */
; 977  : 
; 978  :     if (type->tp_weaklistoffset && !base->tp_weaklistoffset)

  002a6	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  002ab	48 83 b8 28 01
	00 00 00	 cmp	 QWORD PTR [rax+296], 0
  002b3	74 1c		 je	 SHORT $LN30@subtype_de
  002b5	48 8b 44 24 38	 mov	 rax, QWORD PTR base$[rsp]
  002ba	48 83 b8 28 01
	00 00 00	 cmp	 QWORD PTR [rax+296], 0
  002c2	75 0d		 jne	 SHORT $LN30@subtype_de

; 979  :         PyObject_ClearWeakRefs(self);

  002c4	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  002cc	e8 00 00 00 00	 call	 PyObject_ClearWeakRefs
$LN30@subtype_de:

; 980  : 
; 981  :     /* Maybe call finalizer; exit early if resurrected */
; 982  :     if (type->tp_del) {

  002d1	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  002d6	48 83 b8 d0 01
	00 00 00	 cmp	 QWORD PTR [rax+464], 0
  002de	0f 84 8b 02 00
	00		 je	 $LN29@subtype_de

; 983  :         _PyObject_GC_TRACK(self);

  002e4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  002ec	4c 8b 8c 24 c0
	00 00 00	 mov	 r9, QWORD PTR self$[rsp]
  002f4	41 b8 d7 03 00
	00		 mov	 r8d, 983		; 000003d7H
  002fa	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@PKBBAMFA@?4?4?2Objects?2typeobject?4c?$AA@
  00301	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@HEMFFFIH@subtype_dealloc?$AA@
  00308	e8 00 00 00 00	 call	 _PyParallel_Guard
  0030d	85 c0		 test	 eax, eax
  0030f	0f 85 cf 00 00
	00		 jne	 $LN28@subtype_de
$LN27@subtype_de:
  00315	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0031d	4c 8b 8c 24 c0
	00 00 00	 mov	 r9, QWORD PTR self$[rsp]
  00325	41 b8 d7 03 00
	00		 mov	 r8d, 983		; 000003d7H
  0032b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@PKBBAMFA@?4?4?2Objects?2typeobject?4c?$AA@
  00332	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@HEMFFFIH@subtype_dealloc?$AA@
  00339	e8 00 00 00 00	 call	 _PyParallel_Guard
  0033e	85 c0		 test	 eax, eax
  00340	74 0e		 je	 SHORT $LN53@subtype_de
  00342	48 c7 84 24 90
	00 00 00 00 00
	00 00		 mov	 QWORD PTR tv186[rsp], 0
  0034e	eb 14		 jmp	 SHORT $LN54@subtype_de
$LN53@subtype_de:
  00350	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00358	48 83 e8 18	 sub	 rax, 24
  0035c	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv186[rsp], rax
$LN54@subtype_de:
  00364	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR tv186[rsp]
  0036c	48 89 44 24 58	 mov	 QWORD PTR g$21238[rsp], rax
  00371	48 8b 44 24 58	 mov	 rax, QWORD PTR g$21238[rsp]
  00376	48 83 78 10 fe	 cmp	 QWORD PTR [rax+16], -2
  0037b	74 0c		 je	 SHORT $LN24@subtype_de
  0037d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@
  00384	e8 00 00 00 00	 call	 Py_FatalError
$LN24@subtype_de:
  00389	48 8b 44 24 58	 mov	 rax, QWORD PTR g$21238[rsp]
  0038e	48 c7 40 10 fd
	ff ff ff	 mov	 QWORD PTR [rax+16], -3
  00396	48 8b 44 24 58	 mov	 rax, QWORD PTR g$21238[rsp]
  0039b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR _PyGC_generation0
  003a2	48 89 08	 mov	 QWORD PTR [rax], rcx
  003a5	48 8b 44 24 58	 mov	 rax, QWORD PTR g$21238[rsp]
  003aa	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR _PyGC_generation0
  003b1	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  003b5	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  003b9	48 8b 44 24 58	 mov	 rax, QWORD PTR g$21238[rsp]
  003be	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  003c2	48 8b 4c 24 58	 mov	 rcx, QWORD PTR g$21238[rsp]
  003c7	48 89 08	 mov	 QWORD PTR [rax], rcx
  003ca	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyGC_generation0
  003d1	48 8b 4c 24 58	 mov	 rcx, QWORD PTR g$21238[rsp]
  003d6	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  003da	33 c0		 xor	 eax, eax
  003dc	85 c0		 test	 eax, eax
  003de	0f 85 31 ff ff
	ff		 jne	 $LN27@subtype_de
$LN28@subtype_de:

; 984  :         type->tp_del(self);

  003e4	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  003ec	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  003f1	ff 90 d0 01 00
	00		 call	 QWORD PTR [rax+464]

; 985  :         if (self->ob_refcnt > 0)

  003f7	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  003ff	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00404	7e 0a		 jle	 SHORT $LN23@subtype_de

; 986  :             goto endlabel;              /* resurrected */

  00406	e9 06 04 00 00	 jmp	 $endlabel$21243

; 987  :         else

  0040b	e9 01 01 00 00	 jmp	 $LN22@subtype_de
$LN23@subtype_de:

; 988  :             _PyObject_GC_UNTRACK(self);

  00410	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00418	4c 8b 8c 24 c0
	00 00 00	 mov	 r9, QWORD PTR self$[rsp]
  00420	41 b8 dc 03 00
	00		 mov	 r8d, 988		; 000003dcH
  00426	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@PKBBAMFA@?4?4?2Objects?2typeobject?4c?$AA@
  0042d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@HEMFFFIH@subtype_dealloc?$AA@
  00434	e8 00 00 00 00	 call	 _PyParallel_Guard
  00439	85 c0		 test	 eax, eax
  0043b	0f 85 d0 00 00
	00		 jne	 $LN21@subtype_de
$LN20@subtype_de:
  00441	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00449	4c 8b 8c 24 c0
	00 00 00	 mov	 r9, QWORD PTR self$[rsp]
  00451	41 b8 dc 03 00
	00		 mov	 r8d, 988		; 000003dcH
  00457	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@PKBBAMFA@?4?4?2Objects?2typeobject?4c?$AA@
  0045e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@HEMFFFIH@subtype_dealloc?$AA@
  00465	e8 00 00 00 00	 call	 _PyParallel_Guard
  0046a	85 c0		 test	 eax, eax
  0046c	74 0e		 je	 SHORT $LN55@subtype_de
  0046e	48 c7 84 24 98
	00 00 00 00 00
	00 00		 mov	 QWORD PTR tv216[rsp], 0
  0047a	eb 14		 jmp	 SHORT $LN56@subtype_de
$LN55@subtype_de:
  0047c	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00484	48 83 e8 18	 sub	 rax, 24
  00488	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR tv216[rsp], rax
$LN56@subtype_de:
  00490	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR tv216[rsp]
  00498	48 89 44 24 60	 mov	 QWORD PTR g$21249[rsp], rax
  0049d	48 8b 44 24 60	 mov	 rax, QWORD PTR g$21249[rsp]
  004a2	48 83 78 10 fe	 cmp	 QWORD PTR [rax+16], -2
  004a7	75 1c		 jne	 SHORT $LN57@subtype_de
  004a9	41 b8 dc 03 00
	00		 mov	 r8d, 988		; 000003dcH
  004af	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@GJLLIOPA@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAt?$AAy?$AAp?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  004b6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EM@HFMJMDDM@?$AAg?$AA?9?$AA?$DO?$AAg?$AAc?$AA?4?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AAG?$AAC?$AA_?$AAR?$AAE?$AAF?$AAS?$AA_?$AAU?$AAN?$AAT?$AAR@
  004bd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  004c3	33 c0		 xor	 eax, eax
$LN57@subtype_de:
  004c5	48 8b 44 24 60	 mov	 rax, QWORD PTR g$21249[rsp]
  004ca	48 c7 40 10 fe
	ff ff ff	 mov	 QWORD PTR [rax+16], -2
  004d2	48 8b 44 24 60	 mov	 rax, QWORD PTR g$21249[rsp]
  004d7	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  004db	48 8b 4c 24 60	 mov	 rcx, QWORD PTR g$21249[rsp]
  004e0	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  004e3	48 89 08	 mov	 QWORD PTR [rax], rcx
  004e6	48 8b 44 24 60	 mov	 rax, QWORD PTR g$21249[rsp]
  004eb	48 8b 00	 mov	 rax, QWORD PTR [rax]
  004ee	48 8b 4c 24 60	 mov	 rcx, QWORD PTR g$21249[rsp]
  004f3	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  004f7	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  004fb	48 8b 44 24 60	 mov	 rax, QWORD PTR g$21249[rsp]
  00500	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
  00507	33 c0		 xor	 eax, eax
  00509	85 c0		 test	 eax, eax
  0050b	0f 85 30 ff ff
	ff		 jne	 $LN20@subtype_de
$LN21@subtype_de:
$LN22@subtype_de:

; 989  :         /* New weakrefs could be created during the finalizer call.
; 990  :             If this occurs, clear them out without calling their
; 991  :             finalizers since they might rely on part of the object
; 992  :             being finalized that has already been destroyed. */
; 993  :         if (type->tp_weaklistoffset && !base->tp_weaklistoffset) {

  00511	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  00516	48 83 b8 28 01
	00 00 00	 cmp	 QWORD PTR [rax+296], 0
  0051e	74 4f		 je	 SHORT $LN17@subtype_de
  00520	48 8b 44 24 38	 mov	 rax, QWORD PTR base$[rsp]
  00525	48 83 b8 28 01
	00 00 00	 cmp	 QWORD PTR [rax+296], 0
  0052d	75 40		 jne	 SHORT $LN17@subtype_de

; 994  :             /* Modeled after GET_WEAKREFS_LISTPTR() */
; 995  :             PyWeakReference **list = (PyWeakReference **) \
; 996  :                 PyObject_GET_WEAKREFS_LISTPTR(self);

  0052f	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00537	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0053b	48 8b 80 28 01
	00 00		 mov	 rax, QWORD PTR [rax+296]
  00542	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  0054a	48 03 c8	 add	 rcx, rax
  0054d	48 8b c1	 mov	 rax, rcx
  00550	48 89 44 24 68	 mov	 QWORD PTR list$21256[rsp], rax
$LN16@subtype_de:

; 997  :             while (*list)

  00555	48 8b 44 24 68	 mov	 rax, QWORD PTR list$21256[rsp]
  0055a	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0055e	74 0f		 je	 SHORT $LN15@subtype_de

; 998  :                 _PyWeakref_ClearRef(*list);

  00560	48 8b 44 24 68	 mov	 rax, QWORD PTR list$21256[rsp]
  00565	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00568	e8 00 00 00 00	 call	 _PyWeakref_ClearRef
  0056d	eb e6		 jmp	 SHORT $LN16@subtype_de
$LN15@subtype_de:
$LN17@subtype_de:
$LN29@subtype_de:

; 999  :         }
; 1000 :     }
; 1001 : 
; 1002 :     /*  Clear slots up to the nearest base with a different tp_dealloc */
; 1003 :     base = type;

  0056f	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  00574	48 89 44 24 38	 mov	 QWORD PTR base$[rsp], rax
$LN14@subtype_de:

; 1004 :     while ((basedealloc = base->tp_dealloc) == subtype_dealloc) {

  00579	48 8b 44 24 38	 mov	 rax, QWORD PTR base$[rsp]
  0057e	48 8b 80 88 00
	00 00		 mov	 rax, QWORD PTR [rax+136]
  00585	48 89 44 24 30	 mov	 QWORD PTR basedealloc$[rsp], rax
  0058a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:subtype_dealloc
  00591	48 39 44 24 30	 cmp	 QWORD PTR basedealloc$[rsp], rax
  00596	75 55		 jne	 SHORT $LN13@subtype_de

; 1005 :         if (Py_SIZE(base))

  00598	48 8b 44 24 38	 mov	 rax, QWORD PTR base$[rsp]
  0059d	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  005a2	74 12		 je	 SHORT $LN12@subtype_de

; 1006 :             clear_slots(base, self);

  005a4	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR self$[rsp]
  005ac	48 8b 4c 24 38	 mov	 rcx, QWORD PTR base$[rsp]
  005b1	e8 00 00 00 00	 call	 clear_slots
$LN12@subtype_de:

; 1007 :         base = base->tp_base;

  005b6	48 8b 44 24 38	 mov	 rax, QWORD PTR base$[rsp]
  005bb	48 8b 80 58 01
	00 00		 mov	 rax, QWORD PTR [rax+344]
  005c2	48 89 44 24 38	 mov	 QWORD PTR base$[rsp], rax

; 1008 :         assert(base);

  005c7	48 83 7c 24 38
	00		 cmp	 QWORD PTR base$[rsp], 0
  005cd	75 1c		 jne	 SHORT $LN58@subtype_de
  005cf	41 b8 f0 03 00
	00		 mov	 r8d, 1008		; 000003f0H
  005d5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@GJLLIOPA@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAt?$AAy?$AAp?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  005dc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_19FEGIJLLP@?$AAb?$AAa?$AAs?$AAe?$AA?$AA@
  005e3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  005e9	33 c0		 xor	 eax, eax
$LN58@subtype_de:

; 1009 :     }

  005eb	eb 8c		 jmp	 SHORT $LN14@subtype_de
$LN13@subtype_de:

; 1010 : 
; 1011 :     /* If we added a dict, DECREF it */
; 1012 :     if (type->tp_dictoffset && !base->tp_dictoffset) {

  005ed	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  005f2	48 83 b8 78 01
	00 00 00	 cmp	 QWORD PTR [rax+376], 0
  005fa	74 54		 je	 SHORT $LN11@subtype_de
  005fc	48 8b 44 24 38	 mov	 rax, QWORD PTR base$[rsp]
  00601	48 83 b8 78 01
	00 00 00	 cmp	 QWORD PTR [rax+376], 0
  00609	75 45		 jne	 SHORT $LN11@subtype_de

; 1013 :         PyObject **dictptr = _PyObject_GetDictPtr(self);

  0060b	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00613	e8 00 00 00 00	 call	 _PyObject_GetDictPtr
  00618	48 89 44 24 70	 mov	 QWORD PTR dictptr$21271[rsp], rax

; 1014 :         if (dictptr != NULL) {

  0061d	48 83 7c 24 70
	00		 cmp	 QWORD PTR dictptr$21271[rsp], 0
  00623	74 2b		 je	 SHORT $LN10@subtype_de

; 1015 :             PyObject *dict = *dictptr;

  00625	48 8b 44 24 70	 mov	 rax, QWORD PTR dictptr$21271[rsp]
  0062a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0062d	48 89 44 24 78	 mov	 QWORD PTR dict$21274[rsp], rax

; 1016 :             if (dict != NULL) {

  00632	48 83 7c 24 78
	00		 cmp	 QWORD PTR dict$21274[rsp], 0
  00638	74 16		 je	 SHORT $LN9@subtype_de

; 1017 :                 Py_DECREF(dict);

  0063a	48 8b 4c 24 78	 mov	 rcx, QWORD PTR dict$21274[rsp]
  0063f	e8 00 00 00 00	 call	 _Py_DecRef

; 1018 :                 *dictptr = NULL;

  00644	48 8b 44 24 70	 mov	 rax, QWORD PTR dictptr$21271[rsp]
  00649	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
$LN9@subtype_de:
$LN10@subtype_de:
$LN11@subtype_de:

; 1019 :             }
; 1020 :         }
; 1021 :     }
; 1022 : 
; 1023 :     /* Extract the type again; tp_del may have changed it */
; 1024 :     type = Py_TYPE(self);

  00650	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00658	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0065c	48 89 44 24 40	 mov	 QWORD PTR type$[rsp], rax

; 1025 : 
; 1026 :     /* Call the base tp_dealloc(); first retrack self if
; 1027 :      * basedealloc knows about gc.
; 1028 :      */
; 1029 :     if (PyType_IS_GC(base))

  00661	e8 00 00 00 00	 call	 _Py_PXCTX
  00666	85 c0		 test	 eax, eax
  00668	74 0d		 je	 SHORT $LN61@subtype_de
  0066a	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv266[rsp], 0
  00675	eb 3a		 jmp	 SHORT $LN62@subtype_de
$LN61@subtype_de:
  00677	48 8b 44 24 38	 mov	 rax, QWORD PTR base$[rsp]
  0067c	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00682	25 00 40 00 00	 and	 eax, 16384		; 00004000H
  00687	85 c0		 test	 eax, eax
  00689	74 0d		 je	 SHORT $LN59@subtype_de
  0068b	c7 84 24 a4 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv264[rsp], 1
  00696	eb 0b		 jmp	 SHORT $LN60@subtype_de
$LN59@subtype_de:
  00698	c7 84 24 a4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv264[rsp], 0
$LN60@subtype_de:
  006a3	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR tv264[rsp]
  006aa	89 84 24 a0 00
	00 00		 mov	 DWORD PTR tv266[rsp], eax
$LN62@subtype_de:
  006b1	83 bc 24 a0 00
	00 00 00	 cmp	 DWORD PTR tv266[rsp], 0
  006b9	0f 84 18 01 00
	00		 je	 $LN8@subtype_de

; 1030 :         _PyObject_GC_TRACK(self);

  006bf	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  006c7	4c 8b 8c 24 c0
	00 00 00	 mov	 r9, QWORD PTR self$[rsp]
  006cf	41 b8 06 04 00
	00		 mov	 r8d, 1030		; 00000406H
  006d5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@PKBBAMFA@?4?4?2Objects?2typeobject?4c?$AA@
  006dc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@HEMFFFIH@subtype_dealloc?$AA@
  006e3	e8 00 00 00 00	 call	 _PyParallel_Guard
  006e8	85 c0		 test	 eax, eax
  006ea	0f 85 e7 00 00
	00		 jne	 $LN7@subtype_de
$LN6@subtype_de:
  006f0	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  006f8	4c 8b 8c 24 c0
	00 00 00	 mov	 r9, QWORD PTR self$[rsp]
  00700	41 b8 06 04 00
	00		 mov	 r8d, 1030		; 00000406H
  00706	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@PKBBAMFA@?4?4?2Objects?2typeobject?4c?$AA@
  0070d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@HEMFFFIH@subtype_dealloc?$AA@
  00714	e8 00 00 00 00	 call	 _PyParallel_Guard
  00719	85 c0		 test	 eax, eax
  0071b	74 0e		 je	 SHORT $LN63@subtype_de
  0071d	48 c7 84 24 a8
	00 00 00 00 00
	00 00		 mov	 QWORD PTR tv283[rsp], 0
  00729	eb 14		 jmp	 SHORT $LN64@subtype_de
$LN63@subtype_de:
  0072b	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00733	48 83 e8 18	 sub	 rax, 24
  00737	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR tv283[rsp], rax
$LN64@subtype_de:
  0073f	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR tv283[rsp]
  00747	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR g$21285[rsp], rax
  0074f	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR g$21285[rsp]
  00757	48 83 78 10 fe	 cmp	 QWORD PTR [rax+16], -2
  0075c	74 0c		 je	 SHORT $LN3@subtype_de
  0075e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@
  00765	e8 00 00 00 00	 call	 Py_FatalError
$LN3@subtype_de:
  0076a	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR g$21285[rsp]
  00772	48 c7 40 10 fd
	ff ff ff	 mov	 QWORD PTR [rax+16], -3
  0077a	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR g$21285[rsp]
  00782	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR _PyGC_generation0
  00789	48 89 08	 mov	 QWORD PTR [rax], rcx
  0078c	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR g$21285[rsp]
  00794	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR _PyGC_generation0
  0079b	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  0079f	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  007a3	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR g$21285[rsp]
  007ab	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  007af	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR g$21285[rsp]
  007b7	48 89 08	 mov	 QWORD PTR [rax], rcx
  007ba	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyGC_generation0
  007c1	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR g$21285[rsp]
  007c9	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  007cd	33 c0		 xor	 eax, eax
  007cf	85 c0		 test	 eax, eax
  007d1	0f 85 19 ff ff
	ff		 jne	 $LN6@subtype_de
$LN7@subtype_de:
$LN8@subtype_de:

; 1031 :     assert(basedealloc);

  007d7	48 83 7c 24 30
	00		 cmp	 QWORD PTR basedealloc$[rsp], 0
  007dd	75 1c		 jne	 SHORT $LN65@subtype_de
  007df	41 b8 07 04 00
	00		 mov	 r8d, 1031		; 00000407H
  007e5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@GJLLIOPA@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAt?$AAy?$AAp?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  007ec	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BI@KBPLCDNF@?$AAb?$AAa?$AAs?$AAe?$AAd?$AAe?$AAa?$AAl?$AAl?$AAo?$AAc?$AA?$AA@
  007f3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  007f9	33 c0		 xor	 eax, eax
$LN65@subtype_de:

; 1032 :     basedealloc(self);

  007fb	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00803	ff 54 24 30	 call	 QWORD PTR basedealloc$[rsp]

; 1033 : 
; 1034 :     /* Can't reference self beyond this point */
; 1035 :     Py_DECREF(type);

  00807	48 8b 4c 24 40	 mov	 rcx, QWORD PTR type$[rsp]
  0080c	e8 00 00 00 00	 call	 _Py_DecRef
$endlabel$21243:

; 1036 : 
; 1037 :   endlabel:
; 1038 :     ++_PyTrash_delete_nesting;

  00811	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR _PyTrash_delete_nesting
  00817	ff c0		 inc	 eax
  00819	89 05 00 00 00
	00		 mov	 DWORD PTR _PyTrash_delete_nesting, eax

; 1039 :     ++ tstate->trash_delete_nesting;

  0081f	48 8b 44 24 48	 mov	 rax, QWORD PTR tstate$[rsp]
  00824	8b 80 94 00 00
	00		 mov	 eax, DWORD PTR [rax+148]
  0082a	ff c0		 inc	 eax
  0082c	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tstate$[rsp]
  00831	89 81 94 00 00
	00		 mov	 DWORD PTR [rcx+148], eax

; 1040 :     Py_TRASHCAN_SAFE_END(self);

  00837	48 8b 44 24 50	 mov	 rax, QWORD PTR _tstate$21225[rsp]
  0083c	8b 80 94 00 00
	00		 mov	 eax, DWORD PTR [rax+148]
  00842	ff c8		 dec	 eax
  00844	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _tstate$21225[rsp]
  00849	89 81 94 00 00
	00		 mov	 DWORD PTR [rcx+148], eax
  0084f	48 8b 44 24 50	 mov	 rax, QWORD PTR _tstate$21225[rsp]
  00854	48 83 b8 98 00
	00 00 00	 cmp	 QWORD PTR [rax+152], 0
  0085c	74 13		 je	 SHORT $LN2@subtype_de
  0085e	48 8b 44 24 50	 mov	 rax, QWORD PTR _tstate$21225[rsp]
  00863	83 b8 94 00 00
	00 00		 cmp	 DWORD PTR [rax+148], 0
  0086a	7f 05		 jg	 SHORT $LN2@subtype_de
  0086c	e8 00 00 00 00	 call	 _PyTrash_thread_destroy_chain
$LN2@subtype_de:
  00871	eb 0d		 jmp	 SHORT $LN1@subtype_de
$LN33@subtype_de:
  00873	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  0087b	e8 00 00 00 00	 call	 _PyTrash_thread_deposit_object
$LN1@subtype_de:
  00880	33 c0		 xor	 eax, eax
  00882	85 c0		 test	 eax, eax
  00884	0f 85 6c f9 ff
	ff		 jne	 $LN36@subtype_de

; 1041 :     --_PyTrash_delete_nesting;

  0088a	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR _PyTrash_delete_nesting
  00890	ff c8		 dec	 eax
  00892	89 05 00 00 00
	00		 mov	 DWORD PTR _PyTrash_delete_nesting, eax

; 1042 :     -- tstate->trash_delete_nesting;

  00898	48 8b 44 24 48	 mov	 rax, QWORD PTR tstate$[rsp]
  0089d	8b 80 94 00 00
	00		 mov	 eax, DWORD PTR [rax+148]
  008a3	ff c8		 dec	 eax
  008a5	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tstate$[rsp]
  008aa	89 81 94 00 00
	00		 mov	 DWORD PTR [rcx+148], eax
$LN42@subtype_de:

; 1043 : 
; 1044 :     /* Explanation of the weirdness around the trashcan macros:
; 1045 : 
; 1046 :        Q. What do the trashcan macros do?
; 1047 : 
; 1048 :        A. Read the comment titled "Trashcan mechanism" in object.h.
; 1049 :           For one, this explains why there must be a call to GC-untrack
; 1050 :           before the trashcan begin macro.      Without understanding the
; 1051 :           trashcan code, the answers to the following questions don't make
; 1052 :           sense.
; 1053 : 
; 1054 :        Q. Why do we GC-untrack before the trashcan and then immediately
; 1055 :           GC-track again afterward?
; 1056 : 
; 1057 :        A. In the case that the base class is GC-aware, the base class
; 1058 :           probably GC-untracks the object.      If it does that using the
; 1059 :           UNTRACK macro, this will crash when the object is already
; 1060 :           untracked.  Because we don't know what the base class does, the
; 1061 :           only safe thing is to make sure the object is tracked when we
; 1062 :           call the base class dealloc.  But...  The trashcan begin macro
; 1063 :           requires that the object is *untracked* before it is called.  So
; 1064 :           the dance becomes:
; 1065 : 
; 1066 :          GC untrack
; 1067 :          trashcan begin
; 1068 :          GC track
; 1069 : 
; 1070 :        Q. Why did the last question say "immediately GC-track again"?
; 1071 :           It's nowhere near immediately.
; 1072 : 
; 1073 :        A. Because the code *used* to re-track immediately.      Bad Idea.
; 1074 :           self has a refcount of 0, and if gc ever gets its hands on it
; 1075 :           (which can happen if any weakref callback gets invoked), it
; 1076 :           looks like trash to gc too, and gc also tries to delete self
; 1077 :           then.  But we're already deleting self.  Double deallocation is
; 1078 :           a subtle disaster.
; 1079 : 
; 1080 :        Q. Why the bizarre (net-zero) manipulation of
; 1081 :           _PyTrash_delete_nesting around the trashcan macros?
; 1082 : 
; 1083 :        A. Some base classes (e.g. list) also use the trashcan mechanism.
; 1084 :           The following scenario used to be possible:
; 1085 : 
; 1086 :           - suppose the trashcan level is one below the trashcan limit
; 1087 : 
; 1088 :           - subtype_dealloc() is called
; 1089 : 
; 1090 :           - the trashcan limit is not yet reached, so the trashcan level
; 1091 :         is incremented and the code between trashcan begin and end is
; 1092 :         executed
; 1093 : 
; 1094 :           - this destroys much of the object's contents, including its
; 1095 :         slots and __dict__
; 1096 : 
; 1097 :           - basedealloc() is called; this is really list_dealloc(), or
; 1098 :         some other type which also uses the trashcan macros
; 1099 : 
; 1100 :           - the trashcan limit is now reached, so the object is put on the
; 1101 :         trashcan's to-be-deleted-later list
; 1102 : 
; 1103 :           - basedealloc() returns
; 1104 : 
; 1105 :           - subtype_dealloc() decrefs the object's type
; 1106 : 
; 1107 :           - subtype_dealloc() returns
; 1108 : 
; 1109 :           - later, the trashcan code starts deleting the objects from its
; 1110 :         to-be-deleted-later list
; 1111 : 
; 1112 :           - subtype_dealloc() is called *AGAIN* for the same object
; 1113 : 
; 1114 :           - at the very least (if the destroyed slots and __dict__ don't
; 1115 :         cause problems) the object's type gets decref'ed a second
; 1116 :         time, which is *BAD*!!!
; 1117 : 
; 1118 :           The remedy is to make sure that if the code between trashcan
; 1119 :           begin and end in subtype_dealloc() is called, the code between
; 1120 :           trashcan begin and end in basedealloc() will also be called.
; 1121 :           This is done by decrementing the level after passing into the
; 1122 :           trashcan block, and incrementing it just before leaving the
; 1123 :           block.
; 1124 : 
; 1125 :           But now it's possible that a chain of objects consisting solely
; 1126 :           of objects whose deallocator is subtype_dealloc() will defeat
; 1127 :           the trashcan mechanism completely: the decremented level means
; 1128 :           that the effective level never reaches the limit.      Therefore, we
; 1129 :           *increment* the level *before* entering the trashcan block, and
; 1130 :           matchingly decrement it after leaving.  This means the trashcan
; 1131 :           code will trigger a little early, but that's no big deal.
; 1132 : 
; 1133 :        Q. Are there any live examples of code in need of all this
; 1134 :           complexity?
; 1135 : 
; 1136 :        A. Yes.  See SF bug 668433 for code that crashed (when Python was
; 1137 :           compiled in debug mode) before the trashcan level manipulations
; 1138 :           were added.  For more discussion, see SF patches 581742, 575073
; 1139 :           and bug 574207.
; 1140 :     */
; 1141 : }

  008b0	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  008b7	c3		 ret	 0
subtype_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BO@PKJAMNDC@__slots__?5must?5be?5identifiers?$AA@ ; `string'
PUBLIC	??_C@_0CO@MJHHCBKP@__slots__?5items?5must?5be?5strings?0@ ; `string'
EXTRN	PyUnicode_IsIdentifier:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$valid_identifier DD imagerel valid_identifier
	DD	imagerel valid_identifier+116
	DD	imagerel $unwind$valid_identifier
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$valid_identifier DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT ??_C@_0BO@PKJAMNDC@__slots__?5must?5be?5identifiers?$AA@
CONST	SEGMENT
??_C@_0BO@PKJAMNDC@__slots__?5must?5be?5identifiers?$AA@ DB '__slots__ mu'
	DB	'st be identifiers', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@MJHHCBKP@__slots__?5items?5must?5be?5strings?0@
CONST	SEGMENT
??_C@_0CO@MJHHCBKP@__slots__?5items?5must?5be?5strings?0@ DB '__slots__ i'
	DB	'tems must be strings, not ''%.200s''', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT valid_identifier
_TEXT	SEGMENT
s$ = 48
valid_identifier PROC					; COMDAT

; 1897 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1898 :     if (!PyUnicode_Check(s)) {

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  0000e	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00012	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00018	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0001d	85 c0		 test	 eax, eax
  0001f	75 24		 jne	 SHORT $LN2@valid_iden

; 1899 :         PyErr_Format(PyExc_TypeError,
; 1900 :                      "__slots__ items must be strings, not '%.200s'",
; 1901 :                      Py_TYPE(s)->tp_name);

  00021	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  00026	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0002a	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  0002e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CO@MJHHCBKP@__slots__?5items?5must?5be?5strings?0@
  00035	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0003c	e8 00 00 00 00	 call	 PyErr_Format

; 1902 :         return 0;

  00041	33 c0		 xor	 eax, eax
  00043	eb 2a		 jmp	 SHORT $LN3@valid_iden
$LN2@valid_iden:

; 1903 :     }
; 1904 :     if (!PyUnicode_IsIdentifier(s)) {

  00045	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s$[rsp]
  0004a	e8 00 00 00 00	 call	 PyUnicode_IsIdentifier
  0004f	85 c0		 test	 eax, eax
  00051	75 17		 jne	 SHORT $LN1@valid_iden

; 1905 :         PyErr_SetString(PyExc_TypeError,
; 1906 :                         "__slots__ must be identifiers");

  00053	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BO@PKJAMNDC@__slots__?5must?5be?5identifiers?$AA@
  0005a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00061	e8 00 00 00 00	 call	 PyErr_SetString

; 1907 :         return 0;

  00066	33 c0		 xor	 eax, eax
  00068	eb 05		 jmp	 SHORT $LN3@valid_iden
$LN1@valid_iden:

; 1908 :     }
; 1909 :     return 1;

  0006a	b8 01 00 00 00	 mov	 eax, 1
$LN3@valid_iden:

; 1910 : }

  0006f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00073	c3		 ret	 0
valid_identifier ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BE@NDDPBGNB@invalid?5slot?5offset?$AA@	; `string'
PUBLIC	PyType_FromSpecWithBases
EXTRN	PyExc_RuntimeError:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyType_FromSpecWithBases DD imagerel $LN32
	DD	imagerel $LN32+1182
	DD	imagerel $unwind$PyType_FromSpecWithBases
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyType_FromSpecWithBases DD 010e01H
	DD	0c20eH
xdata	ENDS
;	COMDAT ??_C@_0BE@NDDPBGNB@invalid?5slot?5offset?$AA@
CONST	SEGMENT
??_C@_0BE@NDDPBGNB@invalid?5slot?5offset?$AA@ DB 'invalid slot offset', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyType_FromSpecWithBases
_TEXT	SEGMENT
res$ = 32
s$ = 40
base$ = 48
type$ = 56
res_start$ = 64
slot$ = 72
tp_doc$22498 = 80
len$22497 = 88
spec$ = 112
bases$ = 120
PyType_FromSpecWithBases PROC				; COMDAT

; 2401 : {

$LN32:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 2402 :     PyHeapTypeObject *res = (PyHeapTypeObject*)PyType_GenericAlloc(&PyType_Type, 0);

  0000e	33 d2		 xor	 edx, edx
  00010	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyType_Type
  00017	e8 00 00 00 00	 call	 PyType_GenericAlloc
  0001c	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax

; 2403 :     PyTypeObject *type, *base;
; 2404 :     char *s;
; 2405 :     char *res_start = (char*)res;

  00021	48 8b 44 24 20	 mov	 rax, QWORD PTR res$[rsp]
  00026	48 89 44 24 40	 mov	 QWORD PTR res_start$[rsp], rax

; 2406 :     PyType_Slot *slot;
; 2407 :     
; 2408 :     /* Set the type name and qualname */
; 2409 :     s = strrchr(spec->name, '.');

  0002b	ba 2e 00 00 00	 mov	 edx, 46			; 0000002eH
  00030	48 8b 44 24 70	 mov	 rax, QWORD PTR spec$[rsp]
  00035	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00038	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strrchr
  0003e	48 89 44 24 28	 mov	 QWORD PTR s$[rsp], rax

; 2410 :     if (s == NULL)

  00043	48 83 7c 24 28
	00		 cmp	 QWORD PTR s$[rsp], 0
  00049	75 0f		 jne	 SHORT $LN29@PyType_Fro

; 2411 :         s = (char*)spec->name;

  0004b	48 8b 44 24 70	 mov	 rax, QWORD PTR spec$[rsp]
  00050	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00053	48 89 44 24 28	 mov	 QWORD PTR s$[rsp], rax

; 2412 :     else

  00058	eb 0d		 jmp	 SHORT $LN28@PyType_Fro
$LN29@PyType_Fro:

; 2413 :         s++;

  0005a	48 8b 44 24 28	 mov	 rax, QWORD PTR s$[rsp]
  0005f	48 ff c0	 inc	 rax
  00062	48 89 44 24 28	 mov	 QWORD PTR s$[rsp], rax
$LN28@PyType_Fro:

; 2414 : 
; 2415 :     if (res == NULL)

  00067	48 83 7c 24 20
	00		 cmp	 QWORD PTR res$[rsp], 0
  0006d	75 07		 jne	 SHORT $LN27@PyType_Fro

; 2416 :         return NULL;

  0006f	33 c0		 xor	 eax, eax
  00071	e9 23 04 00 00	 jmp	 $LN30@PyType_Fro
$LN27@PyType_Fro:

; 2417 :     type = &res->ht_type;

  00076	48 8b 44 24 20	 mov	 rax, QWORD PTR res$[rsp]
  0007b	48 89 44 24 38	 mov	 QWORD PTR type$[rsp], rax

; 2418 :     /* The flags must be initialized early, before the GC traverses us */
; 2419 :     type->tp_flags = spec->flags | Py_TPFLAGS_HEAPTYPE;

  00080	48 8b 44 24 70	 mov	 rax, QWORD PTR spec$[rsp]
  00085	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
  00088	0f ba e8 09	 bts	 eax, 9
  0008c	48 8b 4c 24 38	 mov	 rcx, QWORD PTR type$[rsp]
  00091	89 81 00 01 00
	00		 mov	 DWORD PTR [rcx+256], eax

; 2420 :     res->ht_name = PyUnicode_FromString(s);

  00097	48 8b 4c 24 28	 mov	 rcx, QWORD PTR s$[rsp]
  0009c	e8 00 00 00 00	 call	 PyUnicode_FromString
  000a1	48 8b 4c 24 20	 mov	 rcx, QWORD PTR res$[rsp]
  000a6	48 89 81 68 03
	00 00		 mov	 QWORD PTR [rcx+872], rax

; 2421 :     if (!res->ht_name)

  000ad	48 8b 44 24 20	 mov	 rax, QWORD PTR res$[rsp]
  000b2	48 83 b8 68 03
	00 00 00	 cmp	 QWORD PTR [rax+872], 0
  000ba	75 05		 jne	 SHORT $LN26@PyType_Fro

; 2422 :         goto fail;

  000bc	e9 cc 03 00 00	 jmp	 $fail$22468
$LN26@PyType_Fro:

; 2423 :     res->ht_qualname = res->ht_name;

  000c1	48 8b 44 24 20	 mov	 rax, QWORD PTR res$[rsp]
  000c6	48 8b 4c 24 20	 mov	 rcx, QWORD PTR res$[rsp]
  000cb	48 8b 89 68 03
	00 00		 mov	 rcx, QWORD PTR [rcx+872]
  000d2	48 89 88 78 03
	00 00		 mov	 QWORD PTR [rax+888], rcx

; 2424 :     Py_INCREF(res->ht_qualname);

  000d9	48 8b 44 24 20	 mov	 rax, QWORD PTR res$[rsp]
  000de	48 8b 88 78 03
	00 00		 mov	 rcx, QWORD PTR [rax+888]
  000e5	e8 00 00 00 00	 call	 _Py_IncRef

; 2425 :     type->tp_name = spec->name;

  000ea	48 8b 44 24 38	 mov	 rax, QWORD PTR type$[rsp]
  000ef	48 8b 4c 24 70	 mov	 rcx, QWORD PTR spec$[rsp]
  000f4	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000f7	48 89 48 70	 mov	 QWORD PTR [rax+112], rcx

; 2426 :     if (!type->tp_name)

  000fb	48 8b 44 24 38	 mov	 rax, QWORD PTR type$[rsp]
  00100	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  00105	75 05		 jne	 SHORT $LN25@PyType_Fro

; 2427 :         goto fail;

  00107	e9 81 03 00 00	 jmp	 $fail$22468
$LN25@PyType_Fro:

; 2428 :     
; 2429 :     /* Adjust for empty tuple bases */
; 2430 :     if (!bases) {

  0010c	48 83 7c 24 78
	00		 cmp	 QWORD PTR bases$[rsp], 0
  00112	0f 85 9d 00 00
	00		 jne	 $LN24@PyType_Fro

; 2431 :         base = &PyBaseObject_Type;

  00118	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyBaseObject_Type
  0011f	48 89 44 24 30	 mov	 QWORD PTR base$[rsp], rax

; 2432 :         /* See whether Py_tp_base(s) was specified */
; 2433 :         for (slot = spec->slots; slot->slot; slot++) {

  00124	48 8b 44 24 70	 mov	 rax, QWORD PTR spec$[rsp]
  00129	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  0012d	48 89 44 24 48	 mov	 QWORD PTR slot$[rsp], rax
  00132	eb 0e		 jmp	 SHORT $LN23@PyType_Fro
$LN22@PyType_Fro:
  00134	48 8b 44 24 48	 mov	 rax, QWORD PTR slot$[rsp]
  00139	48 83 c0 10	 add	 rax, 16
  0013d	48 89 44 24 48	 mov	 QWORD PTR slot$[rsp], rax
$LN23@PyType_Fro:
  00142	48 8b 44 24 48	 mov	 rax, QWORD PTR slot$[rsp]
  00147	83 38 00	 cmp	 DWORD PTR [rax], 0
  0014a	74 3e		 je	 SHORT $LN21@PyType_Fro

; 2434 :             if (slot->slot == Py_tp_base)

  0014c	48 8b 44 24 48	 mov	 rax, QWORD PTR slot$[rsp]
  00151	83 38 30	 cmp	 DWORD PTR [rax], 48	; 00000030H
  00154	75 10		 jne	 SHORT $LN20@PyType_Fro

; 2435 :                 base = slot->pfunc;

  00156	48 8b 44 24 48	 mov	 rax, QWORD PTR slot$[rsp]
  0015b	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0015f	48 89 44 24 30	 mov	 QWORD PTR base$[rsp], rax
  00164	eb 22		 jmp	 SHORT $LN19@PyType_Fro
$LN20@PyType_Fro:

; 2436 :             else if (slot->slot == Py_tp_bases) {

  00166	48 8b 44 24 48	 mov	 rax, QWORD PTR slot$[rsp]
  0016b	83 38 31	 cmp	 DWORD PTR [rax], 49	; 00000031H
  0016e	75 18		 jne	 SHORT $LN18@PyType_Fro

; 2437 :                 bases = slot->pfunc;

  00170	48 8b 44 24 48	 mov	 rax, QWORD PTR slot$[rsp]
  00175	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00179	48 89 44 24 78	 mov	 QWORD PTR bases$[rsp], rax

; 2438 :                 Py_INCREF(bases);

  0017e	48 8b 4c 24 78	 mov	 rcx, QWORD PTR bases$[rsp]
  00183	e8 00 00 00 00	 call	 _Py_IncRef
$LN18@PyType_Fro:
$LN19@PyType_Fro:

; 2439 :             }
; 2440 :         }

  00188	eb aa		 jmp	 SHORT $LN22@PyType_Fro
$LN21@PyType_Fro:

; 2441 :         if (!bases)

  0018a	48 83 7c 24 78
	00		 cmp	 QWORD PTR bases$[rsp], 0
  00190	75 14		 jne	 SHORT $LN17@PyType_Fro

; 2442 :             bases = PyTuple_Pack(1, base);

  00192	48 8b 54 24 30	 mov	 rdx, QWORD PTR base$[rsp]
  00197	b9 01 00 00 00	 mov	 ecx, 1
  0019c	e8 00 00 00 00	 call	 PyTuple_Pack
  001a1	48 89 44 24 78	 mov	 QWORD PTR bases$[rsp], rax
$LN17@PyType_Fro:

; 2443 :         if (!bases)

  001a6	48 83 7c 24 78
	00		 cmp	 QWORD PTR bases$[rsp], 0
  001ac	75 05		 jne	 SHORT $LN16@PyType_Fro

; 2444 :             goto fail;

  001ae	e9 da 02 00 00	 jmp	 $fail$22468
$LN16@PyType_Fro:

; 2445 :     }
; 2446 :     else

  001b3	eb 0a		 jmp	 SHORT $LN15@PyType_Fro
$LN24@PyType_Fro:

; 2447 :         Py_INCREF(bases);

  001b5	48 8b 4c 24 78	 mov	 rcx, QWORD PTR bases$[rsp]
  001ba	e8 00 00 00 00	 call	 _Py_IncRef
$LN15@PyType_Fro:

; 2448 : 
; 2449 :     /* Calculate best base, and check that all bases are type objects */
; 2450 :     base = best_base(bases);

  001bf	48 8b 4c 24 78	 mov	 rcx, QWORD PTR bases$[rsp]
  001c4	e8 00 00 00 00	 call	 best_base
  001c9	48 89 44 24 30	 mov	 QWORD PTR base$[rsp], rax

; 2451 :     if (base == NULL) {

  001ce	48 83 7c 24 30
	00		 cmp	 QWORD PTR base$[rsp], 0
  001d4	75 05		 jne	 SHORT $LN14@PyType_Fro

; 2452 :         goto fail;

  001d6	e9 b2 02 00 00	 jmp	 $fail$22468
$LN14@PyType_Fro:

; 2453 :     }
; 2454 :     if (!PyType_HasFeature(base, Py_TPFLAGS_BASETYPE)) {

  001db	48 8b 44 24 30	 mov	 rax, QWORD PTR base$[rsp]
  001e0	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  001e6	25 00 04 00 00	 and	 eax, 1024		; 00000400H
  001eb	85 c0		 test	 eax, eax
  001ed	75 21		 jne	 SHORT $LN13@PyType_Fro

; 2455 :         PyErr_Format(PyExc_TypeError,
; 2456 :                      "type '%.100s' is not an acceptable base type",
; 2457 :                      base->tp_name);

  001ef	48 8b 44 24 30	 mov	 rax, QWORD PTR base$[rsp]
  001f4	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  001f8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CN@NKNOGCEG@type?5?8?$CF?4100s?8?5is?5not?5an?5acceptab@
  001ff	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00206	e8 00 00 00 00	 call	 PyErr_Format

; 2458 :         goto fail;

  0020b	e9 7d 02 00 00	 jmp	 $fail$22468
$LN13@PyType_Fro:

; 2459 :     }
; 2460 : 
; 2461 :     /* Initialize essential fields */
; 2462 :     type->tp_as_number = &res->as_number;

  00210	48 8b 44 24 20	 mov	 rax, QWORD PTR res$[rsp]
  00215	48 05 e0 01 00
	00		 add	 rax, 480		; 000001e0H
  0021b	48 8b 4c 24 38	 mov	 rcx, QWORD PTR type$[rsp]
  00220	48 89 81 b8 00
	00 00		 mov	 QWORD PTR [rcx+184], rax

; 2463 :     type->tp_as_sequence = &res->as_sequence;

  00227	48 8b 44 24 20	 mov	 rax, QWORD PTR res$[rsp]
  0022c	48 05 08 03 00
	00		 add	 rax, 776		; 00000308H
  00232	48 8b 4c 24 38	 mov	 rcx, QWORD PTR type$[rsp]
  00237	48 89 81 c0 00
	00 00		 mov	 QWORD PTR [rcx+192], rax

; 2464 :     type->tp_as_mapping = &res->as_mapping;

  0023e	48 8b 44 24 20	 mov	 rax, QWORD PTR res$[rsp]
  00243	48 05 f0 02 00
	00		 add	 rax, 752		; 000002f0H
  00249	48 8b 4c 24 38	 mov	 rcx, QWORD PTR type$[rsp]
  0024e	48 89 81 c8 00
	00 00		 mov	 QWORD PTR [rcx+200], rax

; 2465 :     type->tp_as_buffer = &res->as_buffer;

  00255	48 8b 44 24 20	 mov	 rax, QWORD PTR res$[rsp]
  0025a	48 05 58 03 00
	00		 add	 rax, 856		; 00000358H
  00260	48 8b 4c 24 38	 mov	 rcx, QWORD PTR type$[rsp]
  00265	48 89 81 f8 00
	00 00		 mov	 QWORD PTR [rcx+248], rax

; 2466 :     /* Set tp_base and tp_bases */
; 2467 :     type->tp_bases = bases;

  0026c	48 8b 44 24 38	 mov	 rax, QWORD PTR type$[rsp]
  00271	48 8b 4c 24 78	 mov	 rcx, QWORD PTR bases$[rsp]
  00276	48 89 88 a8 01
	00 00		 mov	 QWORD PTR [rax+424], rcx

; 2468 :     bases = NULL;

  0027d	48 c7 44 24 78
	00 00 00 00	 mov	 QWORD PTR bases$[rsp], 0

; 2469 :     Py_INCREF(base);

  00286	48 8b 4c 24 30	 mov	 rcx, QWORD PTR base$[rsp]
  0028b	e8 00 00 00 00	 call	 _Py_IncRef

; 2470 :     type->tp_base = base;

  00290	48 8b 44 24 38	 mov	 rax, QWORD PTR type$[rsp]
  00295	48 8b 4c 24 30	 mov	 rcx, QWORD PTR base$[rsp]
  0029a	48 89 88 58 01
	00 00		 mov	 QWORD PTR [rax+344], rcx

; 2471 : 
; 2472 :     type->tp_basicsize = spec->basicsize;

  002a1	48 8b 44 24 70	 mov	 rax, QWORD PTR spec$[rsp]
  002a6	48 63 40 08	 movsxd	 rax, DWORD PTR [rax+8]
  002aa	48 8b 4c 24 38	 mov	 rcx, QWORD PTR type$[rsp]
  002af	48 89 41 78	 mov	 QWORD PTR [rcx+120], rax

; 2473 :     type->tp_itemsize = spec->itemsize;

  002b3	48 8b 44 24 70	 mov	 rax, QWORD PTR spec$[rsp]
  002b8	48 63 40 0c	 movsxd	 rax, DWORD PTR [rax+12]
  002bc	48 8b 4c 24 38	 mov	 rcx, QWORD PTR type$[rsp]
  002c1	48 89 81 80 00
	00 00		 mov	 QWORD PTR [rcx+128], rax

; 2474 : 
; 2475 :     for (slot = spec->slots; slot->slot; slot++) {

  002c8	48 8b 44 24 70	 mov	 rax, QWORD PTR spec$[rsp]
  002cd	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  002d1	48 89 44 24 48	 mov	 QWORD PTR slot$[rsp], rax
  002d6	eb 0e		 jmp	 SHORT $LN12@PyType_Fro
$LN11@PyType_Fro:
  002d8	48 8b 44 24 48	 mov	 rax, QWORD PTR slot$[rsp]
  002dd	48 83 c0 10	 add	 rax, 16
  002e1	48 89 44 24 48	 mov	 QWORD PTR slot$[rsp], rax
$LN12@PyType_Fro:
  002e6	48 8b 44 24 48	 mov	 rax, QWORD PTR slot$[rsp]
  002eb	83 38 00	 cmp	 DWORD PTR [rax], 0
  002ee	0f 84 cc 00 00
	00		 je	 $LN10@PyType_Fro

; 2476 :         if (slot->slot >= Py_ARRAY_LENGTH(slotoffsets)) {

  002f4	48 8b 44 24 48	 mov	 rax, QWORD PTR slot$[rsp]
  002f9	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  002fc	48 83 f8 4b	 cmp	 rax, 75			; 0000004bH
  00300	72 18		 jb	 SHORT $LN9@PyType_Fro

; 2477 :             PyErr_SetString(PyExc_RuntimeError, "invalid slot offset");

  00302	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@NDDPBGNB@invalid?5slot?5offset?$AA@
  00309	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeError
  00310	e8 00 00 00 00	 call	 PyErr_SetString

; 2478 :             goto fail;

  00315	e9 73 01 00 00	 jmp	 $fail$22468
$LN9@PyType_Fro:

; 2479 :         }
; 2480 :         if (slot->slot == Py_tp_base || slot->slot == Py_tp_bases)

  0031a	48 8b 44 24 48	 mov	 rax, QWORD PTR slot$[rsp]
  0031f	83 38 30	 cmp	 DWORD PTR [rax], 48	; 00000030H
  00322	74 0a		 je	 SHORT $LN7@PyType_Fro
  00324	48 8b 44 24 48	 mov	 rax, QWORD PTR slot$[rsp]
  00329	83 38 31	 cmp	 DWORD PTR [rax], 49	; 00000031H
  0032c	75 02		 jne	 SHORT $LN8@PyType_Fro
$LN7@PyType_Fro:

; 2481 :             /* Processed above */
; 2482 :             continue;

  0032e	eb a8		 jmp	 SHORT $LN11@PyType_Fro
$LN8@PyType_Fro:

; 2483 :         *(void**)(res_start + slotoffsets[slot->slot]) = slot->pfunc;

  00330	48 8b 44 24 48	 mov	 rax, QWORD PTR slot$[rsp]
  00335	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  00338	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:slotoffsets
  0033f	48 0f bf 04 41	 movsx	 rax, WORD PTR [rcx+rax*2]
  00344	48 8b 4c 24 40	 mov	 rcx, QWORD PTR res_start$[rsp]
  00349	48 8b 54 24 48	 mov	 rdx, QWORD PTR slot$[rsp]
  0034e	48 8b 52 08	 mov	 rdx, QWORD PTR [rdx+8]
  00352	48 89 14 01	 mov	 QWORD PTR [rcx+rax], rdx

; 2484 : 
; 2485 :         /* need to make a copy of the docstring slot, which usually
; 2486 :            points to a static string literal */
; 2487 :         if (slot->slot == Py_tp_doc) {

  00356	48 8b 44 24 48	 mov	 rax, QWORD PTR slot$[rsp]
  0035b	83 38 38	 cmp	 DWORD PTR [rax], 56	; 00000038H
  0035e	75 5b		 jne	 SHORT $LN6@PyType_Fro

; 2488 :             size_t len = strlen(slot->pfunc)+1;

  00360	48 8b 44 24 48	 mov	 rax, QWORD PTR slot$[rsp]
  00365	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00369	e8 00 00 00 00	 call	 strlen
  0036e	48 ff c0	 inc	 rax
  00371	48 89 44 24 58	 mov	 QWORD PTR len$22497[rsp], rax

; 2489 :             char *tp_doc = PyObject_MALLOC(len);

  00376	48 8b 4c 24 58	 mov	 rcx, QWORD PTR len$22497[rsp]
  0037b	e8 00 00 00 00	 call	 _PyObject_DebugMalloc
  00380	48 89 44 24 50	 mov	 QWORD PTR tp_doc$22498[rsp], rax

; 2490 :             if (tp_doc == NULL)

  00385	48 83 7c 24 50
	00		 cmp	 QWORD PTR tp_doc$22498[rsp], 0
  0038b	75 05		 jne	 SHORT $LN5@PyType_Fro

; 2491 :                 goto fail;

  0038d	e9 fb 00 00 00	 jmp	 $fail$22468
$LN5@PyType_Fro:

; 2492 :             memcpy(tp_doc, slot->pfunc, len);

  00392	4c 8b 44 24 58	 mov	 r8, QWORD PTR len$22497[rsp]
  00397	48 8b 44 24 48	 mov	 rax, QWORD PTR slot$[rsp]
  0039c	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  003a0	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tp_doc$22498[rsp]
  003a5	e8 00 00 00 00	 call	 memcpy

; 2493 :             type->tp_doc = tp_doc;

  003aa	48 8b 44 24 38	 mov	 rax, QWORD PTR type$[rsp]
  003af	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tp_doc$22498[rsp]
  003b4	48 89 88 08 01
	00 00		 mov	 QWORD PTR [rax+264], rcx
$LN6@PyType_Fro:

; 2494 :         }
; 2495 :     }

  003bb	e9 18 ff ff ff	 jmp	 $LN11@PyType_Fro
$LN10@PyType_Fro:

; 2496 :     if (type->tp_dictoffset) {

  003c0	48 8b 44 24 38	 mov	 rax, QWORD PTR type$[rsp]
  003c5	48 83 b8 78 01
	00 00 00	 cmp	 QWORD PTR [rax+376], 0
  003cd	74 11		 je	 SHORT $LN4@PyType_Fro

; 2497 :         res->ht_cached_keys = _PyDict_NewKeysForClass();

  003cf	e8 00 00 00 00	 call	 _PyDict_NewKeysForClass
  003d4	48 8b 4c 24 20	 mov	 rcx, QWORD PTR res$[rsp]
  003d9	48 89 81 80 03
	00 00		 mov	 QWORD PTR [rcx+896], rax
$LN4@PyType_Fro:

; 2498 :     }
; 2499 :     if (type->tp_dealloc == NULL) {

  003e0	48 8b 44 24 38	 mov	 rax, QWORD PTR type$[rsp]
  003e5	48 83 b8 88 00
	00 00 00	 cmp	 QWORD PTR [rax+136], 0
  003ed	75 13		 jne	 SHORT $LN3@PyType_Fro

; 2500 :         /* It's a heap type, so needs the heap types' dealloc.
; 2501 :            subtype_dealloc will call the base type's tp_dealloc, if
; 2502 :            necessary. */
; 2503 :         type->tp_dealloc = subtype_dealloc;

  003ef	48 8b 44 24 38	 mov	 rax, QWORD PTR type$[rsp]
  003f4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:subtype_dealloc
  003fb	48 89 88 88 00
	00 00		 mov	 QWORD PTR [rax+136], rcx
$LN3@PyType_Fro:

; 2504 :     }
; 2505 : 
; 2506 :     if (PyType_Ready(type) < 0)

  00402	48 8b 4c 24 38	 mov	 rcx, QWORD PTR type$[rsp]
  00407	e8 00 00 00 00	 call	 PyType_Ready
  0040c	85 c0		 test	 eax, eax
  0040e	7d 02		 jge	 SHORT $LN2@PyType_Fro

; 2507 :         goto fail;

  00410	eb 7b		 jmp	 SHORT $fail$22468
$LN2@PyType_Fro:

; 2508 : 
; 2509 :     /* Set type.__module__ */
; 2510 :     s = strrchr(spec->name, '.');

  00412	ba 2e 00 00 00	 mov	 edx, 46			; 0000002eH
  00417	48 8b 44 24 70	 mov	 rax, QWORD PTR spec$[rsp]
  0041c	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0041f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strrchr
  00425	48 89 44 24 28	 mov	 QWORD PTR s$[rsp], rax

; 2511 :     if (s != NULL)

  0042a	48 83 7c 24 28
	00		 cmp	 QWORD PTR s$[rsp], 0
  00430	74 54		 je	 SHORT $LN1@PyType_Fro

; 2512 :         _PyDict_SetItemId(type->tp_dict, &PyId___module__, 
; 2513 :             PyUnicode_FromStringAndSize(
; 2514 :                 spec->name, (Py_ssize_t)(s - spec->name)));

  00432	48 8b 44 24 70	 mov	 rax, QWORD PTR spec$[rsp]
  00437	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0043a	48 8b 4c 24 28	 mov	 rcx, QWORD PTR s$[rsp]
  0043f	48 2b c8	 sub	 rcx, rax
  00442	48 8b c1	 mov	 rax, rcx
  00445	48 8b d0	 mov	 rdx, rax
  00448	48 8b 44 24 70	 mov	 rax, QWORD PTR spec$[rsp]
  0044d	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00450	e8 00 00 00 00	 call	 PyUnicode_FromStringAndSize
  00455	b9 00 00 00 00	 mov	 ecx, OFFSET FLAT:PyId___module__
  0045a	8b c9		 mov	 ecx, ecx
  0045c	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR _tls_index
  00462	65 4c 8b 04 25
	58 00 00 00	 mov	 r8, QWORD PTR gs:88
  0046b	49 03 0c d0	 add	 rcx, QWORD PTR [r8+rdx*8]
  0046f	4c 8b c0	 mov	 r8, rax
  00472	48 8b d1	 mov	 rdx, rcx
  00475	48 8b 44 24 38	 mov	 rax, QWORD PTR type$[rsp]
  0047a	48 8b 88 60 01
	00 00		 mov	 rcx, QWORD PTR [rax+352]
  00481	e8 00 00 00 00	 call	 _PyDict_SetItemId
$LN1@PyType_Fro:

; 2515 : 
; 2516 :     return (PyObject*)res;

  00486	48 8b 44 24 20	 mov	 rax, QWORD PTR res$[rsp]
  0048b	eb 0c		 jmp	 SHORT $LN30@PyType_Fro
$fail$22468:

; 2517 : 
; 2518 :  fail:
; 2519 :     Py_DECREF(res);

  0048d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR res$[rsp]
  00492	e8 00 00 00 00	 call	 _Py_DecRef

; 2520 :     return NULL;

  00497	33 c0		 xor	 eax, eax
$LN30@PyType_Fro:

; 2521 : }

  00499	48 83 c4 68	 add	 rsp, 104		; 00000068H
  0049d	c3		 ret	 0
PyType_FromSpecWithBases ENDP
_TEXT	ENDS
PUBLIC	PyType_FromSpec
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyType_FromSpec DD imagerel $LN3
	DD	imagerel $LN3+26
	DD	imagerel $unwind$PyType_FromSpec
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyType_FromSpec DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyType_FromSpec
_TEXT	SEGMENT
spec$ = 48
PyType_FromSpec PROC					; COMDAT

; 2525 : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2526 :     return PyType_FromSpecWithBases(spec, NULL);

  00009	33 d2		 xor	 edx, edx
  0000b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR spec$[rsp]
  00010	e8 00 00 00 00	 call	 PyType_FromSpecWithBases

; 2527 : }

  00015	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00019	c3		 ret	 0
PyType_FromSpec ENDP
_TEXT	ENDS
PUBLIC	??_C@_1DG@CDEPIBHE@?$AAd?$AAi?$AAc?$AAt?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAP?$AAy?$AAD?$AAi?$AAc?$AAt?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAd?$AAi?$AAc?$AAt?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CG@FMNPGDKB@?$AAP?$AAy?$AAT?$AAy?$AAp?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AAa?$AAs?$AAe?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DC@BCOPIKLM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAn?$AAa?$AAm?$AAe?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CM@NNIOODFF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAn?$AAa?$AAm?$AAe?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	_PyType_Lookup
EXTRN	_PyUnicode_Ready:PROC
EXTRN	PyUnicode_Type:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyType_Lookup DD imagerel $LN26
	DD	imagerel $LN26+1165
	DD	imagerel $unwind$_PyType_Lookup
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyType_Lookup DD 010e01H
	DD	0c20eH
xdata	ENDS
;	COMDAT ??_C@_1DG@CDEPIBHE@?$AAd?$AAi?$AAc?$AAt?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAP?$AAy?$AAD?$AAi?$AAc?$AAt?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAd?$AAi?$AAc?$AAt?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DG@CDEPIBHE@?$AAd?$AAi?$AAc?$AAt?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAP?$AAy?$AAD?$AAi?$AAc?$AAt?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAd?$AAi?$AAc?$AAt?$AA?$CJ?$AA?$AA@ DB 'd'
	DB	00H, 'i', 00H, 'c', 00H, 't', 00H, ' ', 00H, '&', 00H, '&', 00H
	DB	' ', 00H, 'P', 00H, 'y', 00H, 'D', 00H, 'i', 00H, 'c', 00H, 't'
	DB	00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H
	DB	'(', 00H, 'd', 00H, 'i', 00H, 'c', 00H, 't', 00H, ')', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@FMNPGDKB@?$AAP?$AAy?$AAT?$AAy?$AAp?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AAa?$AAs?$AAe?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CG@FMNPGDKB@?$AAP?$AAy?$AAT?$AAy?$AAp?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AAa?$AAs?$AAe?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'T', 00H, 'y', 00H, 'p', 00H, 'e', 00H, '_', 00H
	DB	'C', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, '(', 00H, 'b'
	DB	00H, 'a', 00H, 's', 00H, 'e', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DC@BCOPIKLM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAn?$AAa?$AAm?$AAe?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DC@BCOPIKLM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAn?$AAa?$AAm?$AAe?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'I', 00H, 'S', 00H, '_', 00H, 'R'
	DB	00H, 'E', 00H, 'A', 00H, 'D', 00H, 'Y', 00H, '(', 00H, 'n', 00H
	DB	'a', 00H, 'm', 00H, 'e', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CM@NNIOODFF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAn?$AAa?$AAm?$AAe?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CM@NNIOODFF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAn?$AAa?$AAm?$AAe?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, 'n', 00H, 'a', 00H, 'm', 00H, 'e', 00H
	DB	')', 00H, 00H, 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PyType_Lookup
_TEXT	SEGMENT
h$ = 32
res$ = 40
mro$ = 48
n$ = 56
i$ = 64
dict$ = 72
base$ = 80
tv80 = 88
tv211 = 92
type$ = 112
name$ = 120
_PyType_Lookup PROC					; COMDAT

; 2534 : {

$LN26:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 2535 :     Py_ssize_t i, n;
; 2536 :     PyObject *mro, *res, *base, *dict;
; 2537 :     unsigned int h;
; 2538 : 
; 2539 :     if (MCACHE_CACHEABLE_NAME(name) &&
; 2540 :         PyType_HasFeature(type, Py_TPFLAGS_VALID_VERSION_TAG)) {

  0000e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyUnicode_Type
  00015	48 8b 4c 24 78	 mov	 rcx, QWORD PTR name$[rsp]
  0001a	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0001e	0f 85 5d 01 00
	00		 jne	 $LN9@PyType_Loo
  00024	48 8b 44 24 78	 mov	 rax, QWORD PTR name$[rsp]
  00029	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0002d	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00033	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00038	85 c0		 test	 eax, eax
  0003a	75 1c		 jne	 SHORT $LN12@PyType_Loo
  0003c	41 b8 eb 09 00
	00		 mov	 r8d, 2539		; 000009ebH
  00042	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@GJLLIOPA@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAt?$AAy?$AAp?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00049	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@NNIOODFF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAn?$AAa?$AAm?$AAe?$AA?$CJ?$AA?$AA@
  00050	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00056	33 c0		 xor	 eax, eax
$LN12@PyType_Loo:
  00058	48 8b 44 24 78	 mov	 rax, QWORD PTR name$[rsp]
  0005d	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00060	c1 e8 07	 shr	 eax, 7
  00063	83 e0 01	 and	 eax, 1
  00066	85 c0		 test	 eax, eax
  00068	74 0a		 je	 SHORT $LN13@PyType_Loo
  0006a	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR tv80[rsp], 0
  00072	eb 0e		 jmp	 SHORT $LN14@PyType_Loo
$LN13@PyType_Loo:
  00074	48 8b 4c 24 78	 mov	 rcx, QWORD PTR name$[rsp]
  00079	e8 00 00 00 00	 call	 _PyUnicode_Ready
  0007e	89 44 24 58	 mov	 DWORD PTR tv80[rsp], eax
$LN14@PyType_Loo:
  00082	83 7c 24 58 ff	 cmp	 DWORD PTR tv80[rsp], -1
  00087	0f 84 f4 00 00
	00		 je	 $LN9@PyType_Loo
  0008d	48 8b 44 24 78	 mov	 rax, QWORD PTR name$[rsp]
  00092	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00096	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0009c	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  000a1	85 c0		 test	 eax, eax
  000a3	75 1c		 jne	 SHORT $LN15@PyType_Loo
  000a5	41 b8 eb 09 00
	00		 mov	 r8d, 2539		; 000009ebH
  000ab	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@GJLLIOPA@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAt?$AAy?$AAp?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  000b2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@NNIOODFF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAn?$AAa?$AAm?$AAe?$AA?$CJ?$AA?$AA@
  000b9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000bf	33 c0		 xor	 eax, eax
$LN15@PyType_Loo:
  000c1	48 8b 44 24 78	 mov	 rax, QWORD PTR name$[rsp]
  000c6	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  000c9	c1 e8 07	 shr	 eax, 7
  000cc	83 e0 01	 and	 eax, 1
  000cf	85 c0		 test	 eax, eax
  000d1	75 1c		 jne	 SHORT $LN16@PyType_Loo
  000d3	41 b8 eb 09 00
	00		 mov	 r8d, 2539		; 000009ebH
  000d9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@GJLLIOPA@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAt?$AAy?$AAp?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  000e0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DC@BCOPIKLM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAn?$AAa?$AAm?$AAe?$AA?$CJ?$AA?$AA@
  000e7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000ed	33 c0		 xor	 eax, eax
$LN16@PyType_Loo:
  000ef	48 8b 44 24 78	 mov	 rax, QWORD PTR name$[rsp]
  000f4	48 83 78 60 64	 cmp	 QWORD PTR [rax+96], 100	; 00000064H
  000f9	0f 8f 82 00 00
	00		 jg	 $LN9@PyType_Loo
  000ff	48 8b 44 24 70	 mov	 rax, QWORD PTR type$[rsp]
  00104	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0010a	25 00 00 08 00	 and	 eax, 524288		; 00080000H
  0010f	85 c0		 test	 eax, eax
  00111	74 6e		 je	 SHORT $LN9@PyType_Loo

; 2541 :         /* fast path */
; 2542 :         h = MCACHE_HASH_METHOD(type, name);

  00113	48 8b 44 24 70	 mov	 rax, QWORD PTR type$[rsp]
  00118	48 8b 4c 24 78	 mov	 rcx, QWORD PTR name$[rsp]
  0011d	8b 80 d8 01 00
	00		 mov	 eax, DWORD PTR [rax+472]
  00123	0f af 41 68	 imul	 eax, DWORD PTR [rcx+104]
  00127	c1 e8 17	 shr	 eax, 23
  0012a	89 44 24 20	 mov	 DWORD PTR h$[rsp], eax

; 2543 :         if (method_cache[h].version == type->tp_version_tag &&
; 2544 :             method_cache[h].name == name)

  0012e	8b 44 24 20	 mov	 eax, DWORD PTR h$[rsp]
  00132	48 6b c0 18	 imul	 rax, 24
  00136	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:method_cache
  0013d	48 8b 54 24 70	 mov	 rdx, QWORD PTR type$[rsp]
  00142	8b 92 d8 01 00
	00		 mov	 edx, DWORD PTR [rdx+472]
  00148	39 14 01	 cmp	 DWORD PTR [rcx+rax], edx
  0014b	75 34		 jne	 SHORT $LN8@PyType_Loo
  0014d	8b 44 24 20	 mov	 eax, DWORD PTR h$[rsp]
  00151	48 6b c0 18	 imul	 rax, 24
  00155	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:method_cache
  0015c	48 8b 54 24 78	 mov	 rdx, QWORD PTR name$[rsp]
  00161	48 39 54 01 08	 cmp	 QWORD PTR [rcx+rax+8], rdx
  00166	75 19		 jne	 SHORT $LN8@PyType_Loo

; 2545 :             return method_cache[h].value;

  00168	8b 44 24 20	 mov	 eax, DWORD PTR h$[rsp]
  0016c	48 6b c0 18	 imul	 rax, 24
  00170	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:method_cache
  00177	48 8b 44 01 10	 mov	 rax, QWORD PTR [rcx+rax+16]
  0017c	e9 07 03 00 00	 jmp	 $LN10@PyType_Loo
$LN8@PyType_Loo:
$LN9@PyType_Loo:

; 2546 :     }
; 2547 : 
; 2548 :     /* Look in tp_dict of types in MRO */
; 2549 :     mro = type->tp_mro;

  00181	48 8b 44 24 70	 mov	 rax, QWORD PTR type$[rsp]
  00186	48 8b 80 b0 01
	00 00		 mov	 rax, QWORD PTR [rax+432]
  0018d	48 89 44 24 30	 mov	 QWORD PTR mro$[rsp], rax

; 2550 : 
; 2551 :     /* If mro is NULL, the type is either not yet initialized
; 2552 :        by PyType_Ready(), or already cleared by type_clear().
; 2553 :        Either way the safest thing to do is to return NULL. */
; 2554 :     if (mro == NULL)

  00192	48 83 7c 24 30
	00		 cmp	 QWORD PTR mro$[rsp], 0
  00198	75 07		 jne	 SHORT $LN7@PyType_Loo

; 2555 :         return NULL;

  0019a	33 c0		 xor	 eax, eax
  0019c	e9 e7 02 00 00	 jmp	 $LN10@PyType_Loo
$LN7@PyType_Loo:

; 2556 : 
; 2557 :     res = NULL;

  001a1	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR res$[rsp], 0

; 2558 :     /* keep a strong reference to mro because type->tp_mro can be replaced
; 2559 :        during PyDict_GetItem(dict, name)  */
; 2560 :     Py_INCREF(mro);

  001aa	48 8b 4c 24 30	 mov	 rcx, QWORD PTR mro$[rsp]
  001af	e8 00 00 00 00	 call	 _Py_IncRef

; 2561 :     assert(PyTuple_Check(mro));

  001b4	48 8b 44 24 30	 mov	 rax, QWORD PTR mro$[rsp]
  001b9	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  001bd	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  001c3	25 00 00 00 04	 and	 eax, 67108864		; 04000000H
  001c8	85 c0		 test	 eax, eax
  001ca	75 1c		 jne	 SHORT $LN17@PyType_Loo
  001cc	41 b8 01 0a 00
	00		 mov	 r8d, 2561		; 00000a01H
  001d2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@GJLLIOPA@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAt?$AAy?$AAp?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  001d9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@DAMEHKMF@?$AAP?$AAy?$AAT?$AAu?$AAp?$AAl?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAm?$AAr?$AAo?$AA?$CJ?$AA?$AA@
  001e0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001e6	33 c0		 xor	 eax, eax
$LN17@PyType_Loo:

; 2562 :     n = PyTuple_GET_SIZE(mro);

  001e8	48 8b 44 24 30	 mov	 rax, QWORD PTR mro$[rsp]
  001ed	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  001f1	48 89 44 24 38	 mov	 QWORD PTR n$[rsp], rax

; 2563 :     for (i = 0; i < n; i++) {

  001f6	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  001ff	eb 0d		 jmp	 SHORT $LN6@PyType_Loo
$LN5@PyType_Loo:
  00201	48 8b 44 24 40	 mov	 rax, QWORD PTR i$[rsp]
  00206	48 ff c0	 inc	 rax
  00209	48 89 44 24 40	 mov	 QWORD PTR i$[rsp], rax
$LN6@PyType_Loo:
  0020e	48 8b 44 24 38	 mov	 rax, QWORD PTR n$[rsp]
  00213	48 39 44 24 40	 cmp	 QWORD PTR i$[rsp], rax
  00218	0f 8d b8 00 00
	00		 jge	 $LN4@PyType_Loo

; 2564 :         base = PyTuple_GET_ITEM(mro, i);

  0021e	48 8b 44 24 30	 mov	 rax, QWORD PTR mro$[rsp]
  00223	48 8b 4c 24 40	 mov	 rcx, QWORD PTR i$[rsp]
  00228	48 8b 44 c8 70	 mov	 rax, QWORD PTR [rax+rcx*8+112]
  0022d	48 89 44 24 50	 mov	 QWORD PTR base$[rsp], rax

; 2565 :         assert(PyType_Check(base));

  00232	48 8b 44 24 50	 mov	 rax, QWORD PTR base$[rsp]
  00237	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0023b	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00241	25 00 00 00 80	 and	 eax, -2147483648	; ffffffff80000000H
  00246	85 c0		 test	 eax, eax
  00248	75 1c		 jne	 SHORT $LN18@PyType_Loo
  0024a	41 b8 05 0a 00
	00		 mov	 r8d, 2565		; 00000a05H
  00250	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@GJLLIOPA@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAt?$AAy?$AAp?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00257	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@FMNPGDKB@?$AAP?$AAy?$AAT?$AAy?$AAp?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AAa?$AAs?$AAe?$AA?$CJ?$AA?$AA@
  0025e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00264	33 c0		 xor	 eax, eax
$LN18@PyType_Loo:

; 2566 :         dict = ((PyTypeObject *)base)->tp_dict;

  00266	48 8b 44 24 50	 mov	 rax, QWORD PTR base$[rsp]
  0026b	48 8b 80 60 01
	00 00		 mov	 rax, QWORD PTR [rax+352]
  00272	48 89 44 24 48	 mov	 QWORD PTR dict$[rsp], rax

; 2567 :         assert(dict && PyDict_Check(dict));

  00277	48 83 7c 24 48
	00		 cmp	 QWORD PTR dict$[rsp], 0
  0027d	74 18		 je	 SHORT $LN19@PyType_Loo
  0027f	48 8b 44 24 48	 mov	 rax, QWORD PTR dict$[rsp]
  00284	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00288	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0028e	25 00 00 00 20	 and	 eax, 536870912		; 20000000H
  00293	85 c0		 test	 eax, eax
  00295	75 1c		 jne	 SHORT $LN20@PyType_Loo
$LN19@PyType_Loo:
  00297	41 b8 07 0a 00
	00		 mov	 r8d, 2567		; 00000a07H
  0029d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@GJLLIOPA@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAt?$AAy?$AAp?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  002a4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DG@CDEPIBHE@?$AAd?$AAi?$AAc?$AAt?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAP?$AAy?$AAD?$AAi?$AAc?$AAt?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAd?$AAi?$AAc?$AAt?$AA?$CJ?$AA?$AA@
  002ab	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  002b1	33 c0		 xor	 eax, eax
$LN20@PyType_Loo:

; 2568 :         res = PyDict_GetItem(dict, name);

  002b3	48 8b 54 24 78	 mov	 rdx, QWORD PTR name$[rsp]
  002b8	48 8b 4c 24 48	 mov	 rcx, QWORD PTR dict$[rsp]
  002bd	e8 00 00 00 00	 call	 PyDict_GetItem
  002c2	48 89 44 24 28	 mov	 QWORD PTR res$[rsp], rax

; 2569 :         if (res != NULL)

  002c7	48 83 7c 24 28
	00		 cmp	 QWORD PTR res$[rsp], 0
  002cd	74 02		 je	 SHORT $LN3@PyType_Loo

; 2570 :             break;

  002cf	eb 05		 jmp	 SHORT $LN4@PyType_Loo
$LN3@PyType_Loo:

; 2571 :     }

  002d1	e9 2b ff ff ff	 jmp	 $LN5@PyType_Loo
$LN4@PyType_Loo:

; 2572 :     Py_DECREF(mro);

  002d6	48 8b 4c 24 30	 mov	 rcx, QWORD PTR mro$[rsp]
  002db	e8 00 00 00 00	 call	 _Py_DecRef

; 2573 : 
; 2574 :     Px_RETURN(res);

  002e0	e8 00 00 00 00	 call	 _Py_PXCTX
  002e5	85 c0		 test	 eax, eax
  002e7	74 0a		 je	 SHORT $LN2@PyType_Loo
  002e9	48 8b 44 24 28	 mov	 rax, QWORD PTR res$[rsp]
  002ee	e9 95 01 00 00	 jmp	 $LN10@PyType_Loo
$LN2@PyType_Loo:

; 2575 : 
; 2576 :     if (MCACHE_CACHEABLE_NAME(name) && assign_version_tag(type)) {

  002f3	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyUnicode_Type
  002fa	48 8b 4c 24 78	 mov	 rcx, QWORD PTR name$[rsp]
  002ff	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00303	0f 85 7a 01 00
	00		 jne	 $LN1@PyType_Loo
  00309	48 8b 44 24 78	 mov	 rax, QWORD PTR name$[rsp]
  0030e	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00312	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00318	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0031d	85 c0		 test	 eax, eax
  0031f	75 1c		 jne	 SHORT $LN21@PyType_Loo
  00321	41 b8 10 0a 00
	00		 mov	 r8d, 2576		; 00000a10H
  00327	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@GJLLIOPA@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAt?$AAy?$AAp?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  0032e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@NNIOODFF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAn?$AAa?$AAm?$AAe?$AA?$CJ?$AA?$AA@
  00335	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0033b	33 c0		 xor	 eax, eax
$LN21@PyType_Loo:
  0033d	48 8b 44 24 78	 mov	 rax, QWORD PTR name$[rsp]
  00342	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00345	c1 e8 07	 shr	 eax, 7
  00348	83 e0 01	 and	 eax, 1
  0034b	85 c0		 test	 eax, eax
  0034d	74 0a		 je	 SHORT $LN22@PyType_Loo
  0034f	c7 44 24 5c 00
	00 00 00	 mov	 DWORD PTR tv211[rsp], 0
  00357	eb 0e		 jmp	 SHORT $LN23@PyType_Loo
$LN22@PyType_Loo:
  00359	48 8b 4c 24 78	 mov	 rcx, QWORD PTR name$[rsp]
  0035e	e8 00 00 00 00	 call	 _PyUnicode_Ready
  00363	89 44 24 5c	 mov	 DWORD PTR tv211[rsp], eax
$LN23@PyType_Loo:
  00367	83 7c 24 5c ff	 cmp	 DWORD PTR tv211[rsp], -1
  0036c	0f 84 11 01 00
	00		 je	 $LN1@PyType_Loo
  00372	48 8b 44 24 78	 mov	 rax, QWORD PTR name$[rsp]
  00377	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0037b	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00381	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00386	85 c0		 test	 eax, eax
  00388	75 1c		 jne	 SHORT $LN24@PyType_Loo
  0038a	41 b8 10 0a 00
	00		 mov	 r8d, 2576		; 00000a10H
  00390	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@GJLLIOPA@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAt?$AAy?$AAp?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00397	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@NNIOODFF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAn?$AAa?$AAm?$AAe?$AA?$CJ?$AA?$AA@
  0039e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  003a4	33 c0		 xor	 eax, eax
$LN24@PyType_Loo:
  003a6	48 8b 44 24 78	 mov	 rax, QWORD PTR name$[rsp]
  003ab	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  003ae	c1 e8 07	 shr	 eax, 7
  003b1	83 e0 01	 and	 eax, 1
  003b4	85 c0		 test	 eax, eax
  003b6	75 1c		 jne	 SHORT $LN25@PyType_Loo
  003b8	41 b8 10 0a 00
	00		 mov	 r8d, 2576		; 00000a10H
  003be	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@GJLLIOPA@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAt?$AAy?$AAp?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  003c5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DC@BCOPIKLM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAn?$AAa?$AAm?$AAe?$AA?$CJ?$AA?$AA@
  003cc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  003d2	33 c0		 xor	 eax, eax
$LN25@PyType_Loo:
  003d4	48 8b 44 24 78	 mov	 rax, QWORD PTR name$[rsp]
  003d9	48 83 78 60 64	 cmp	 QWORD PTR [rax+96], 100	; 00000064H
  003de	0f 8f 9f 00 00
	00		 jg	 $LN1@PyType_Loo
  003e4	48 8b 4c 24 70	 mov	 rcx, QWORD PTR type$[rsp]
  003e9	e8 00 00 00 00	 call	 assign_version_tag
  003ee	85 c0		 test	 eax, eax
  003f0	0f 84 8d 00 00
	00		 je	 $LN1@PyType_Loo

; 2577 :         h = MCACHE_HASH_METHOD(type, name);

  003f6	48 8b 44 24 70	 mov	 rax, QWORD PTR type$[rsp]
  003fb	48 8b 4c 24 78	 mov	 rcx, QWORD PTR name$[rsp]
  00400	8b 80 d8 01 00
	00		 mov	 eax, DWORD PTR [rax+472]
  00406	0f af 41 68	 imul	 eax, DWORD PTR [rcx+104]
  0040a	c1 e8 17	 shr	 eax, 23
  0040d	89 44 24 20	 mov	 DWORD PTR h$[rsp], eax

; 2578 :         method_cache[h].version = type->tp_version_tag;

  00411	8b 44 24 20	 mov	 eax, DWORD PTR h$[rsp]
  00415	48 6b c0 18	 imul	 rax, 24
  00419	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:method_cache
  00420	48 8b 54 24 70	 mov	 rdx, QWORD PTR type$[rsp]
  00425	8b 92 d8 01 00
	00		 mov	 edx, DWORD PTR [rdx+472]
  0042b	89 14 01	 mov	 DWORD PTR [rcx+rax], edx

; 2579 :         method_cache[h].value = res;  /* borrowed */

  0042e	8b 44 24 20	 mov	 eax, DWORD PTR h$[rsp]
  00432	48 6b c0 18	 imul	 rax, 24
  00436	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:method_cache
  0043d	48 8b 54 24 28	 mov	 rdx, QWORD PTR res$[rsp]
  00442	48 89 54 01 10	 mov	 QWORD PTR [rcx+rax+16], rdx

; 2580 :         Py_INCREF(name);

  00447	48 8b 4c 24 78	 mov	 rcx, QWORD PTR name$[rsp]
  0044c	e8 00 00 00 00	 call	 _Py_IncRef

; 2581 :         Py_DECREF(method_cache[h].name);

  00451	8b 44 24 20	 mov	 eax, DWORD PTR h$[rsp]
  00455	48 6b c0 18	 imul	 rax, 24
  00459	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:method_cache
  00460	48 8b 4c 01 08	 mov	 rcx, QWORD PTR [rcx+rax+8]
  00465	e8 00 00 00 00	 call	 _Py_DecRef

; 2582 :         method_cache[h].name = name;

  0046a	8b 44 24 20	 mov	 eax, DWORD PTR h$[rsp]
  0046e	48 6b c0 18	 imul	 rax, 24
  00472	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:method_cache
  00479	48 8b 54 24 78	 mov	 rdx, QWORD PTR name$[rsp]
  0047e	48 89 54 01 08	 mov	 QWORD PTR [rcx+rax+8], rdx
$LN1@PyType_Loo:

; 2583 :     }
; 2584 :     return res;

  00483	48 8b 44 24 28	 mov	 rax, QWORD PTR res$[rsp]
$LN10@PyType_Loo:

; 2585 : }

  00488	48 83 c4 68	 add	 rsp, 104		; 00000068H
  0048c	c3		 ret	 0
_PyType_Lookup ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BD@LFJFGPKP@assign_version_tag?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$assign_version_tag DD imagerel assign_version_tag
	DD	imagerel assign_version_tag+557
	DD	imagerel $unwind$assign_version_tag
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$assign_version_tag DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0BD@LFJFGPKP@assign_version_tag?$AA@
CONST	SEGMENT
??_C@_0BD@LFJFGPKP@assign_version_tag?$AA@ DB 'assign_version_tag', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT assign_version_tag
_TEXT	SEGMENT
n$ = 32
i$ = 40
bases$ = 48
b$20511 = 56
type$ = 80
assign_version_tag PROC					; COMDAT

; 159  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 160  :     /* Ensure that the tp_version_tag is valid and set
; 161  :        Py_TPFLAGS_VALID_VERSION_TAG.  To respect the invariant, this
; 162  :        must first be done on all super classes.  Return 0 if this
; 163  :        cannot be done, 1 if Py_TPFLAGS_VALID_VERSION_TAG.
; 164  :     */
; 165  :     Py_ssize_t i, n;
; 166  :     PyObject *bases;
; 167  :     Py_GUARD

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	74 1c		 je	 SHORT $LN16@assign_ver
  00012	45 33 c9	 xor	 r9d, r9d
  00015	41 b8 a7 00 00
	00		 mov	 r8d, 167		; 000000a7H
  0001b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@PKBBAMFA@?4?4?2Objects?2typeobject?4c?$AA@
  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@LFJFGPKP@assign_version_tag?$AA@
  00029	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN16@assign_ver:

; 168  : 
; 169  :     if (PyType_HasFeature(type, Py_TPFLAGS_VALID_VERSION_TAG))

  0002e	48 8b 44 24 50	 mov	 rax, QWORD PTR type$[rsp]
  00033	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00039	25 00 00 08 00	 and	 eax, 524288		; 00080000H
  0003e	85 c0		 test	 eax, eax
  00040	74 0a		 je	 SHORT $LN15@assign_ver

; 170  :         return 1;

  00042	b8 01 00 00 00	 mov	 eax, 1
  00047	e9 dc 01 00 00	 jmp	 $LN17@assign_ver
$LN15@assign_ver:

; 171  :     if (!PyType_HasFeature(type, Py_TPFLAGS_HAVE_VERSION_TAG))

  0004c	48 8b 44 24 50	 mov	 rax, QWORD PTR type$[rsp]
  00051	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00057	25 00 00 04 00	 and	 eax, 262144		; 00040000H
  0005c	85 c0		 test	 eax, eax
  0005e	75 07		 jne	 SHORT $LN14@assign_ver

; 172  :         return 0;

  00060	33 c0		 xor	 eax, eax
  00062	e9 c1 01 00 00	 jmp	 $LN17@assign_ver
$LN14@assign_ver:

; 173  :     if (!PyType_HasFeature(type, Py_TPFLAGS_READY))

  00067	48 8b 44 24 50	 mov	 rax, QWORD PTR type$[rsp]
  0006c	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00072	25 00 10 00 00	 and	 eax, 4096		; 00001000H
  00077	85 c0		 test	 eax, eax
  00079	75 07		 jne	 SHORT $LN13@assign_ver

; 174  :         return 0;

  0007b	33 c0		 xor	 eax, eax
  0007d	e9 a6 01 00 00	 jmp	 $LN17@assign_ver
$LN13@assign_ver:

; 175  : 
; 176  :     type->tp_version_tag = next_version_tag++;

  00082	48 8b 44 24 50	 mov	 rax, QWORD PTR type$[rsp]
  00087	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR next_version_tag
  0008d	89 88 d8 01 00
	00		 mov	 DWORD PTR [rax+472], ecx
  00093	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR next_version_tag
  00099	ff c0		 inc	 eax
  0009b	89 05 00 00 00
	00		 mov	 DWORD PTR next_version_tag, eax

; 177  :     /* for stress-testing: next_version_tag &= 0xFF; */
; 178  : 
; 179  :     if (type->tp_version_tag == 0) {

  000a1	48 8b 44 24 50	 mov	 rax, QWORD PTR type$[rsp]
  000a6	83 b8 d8 01 00
	00 00		 cmp	 DWORD PTR [rax+472], 0
  000ad	0f 85 b7 00 00
	00		 jne	 $LN12@assign_ver

; 180  :         /* wrap-around or just starting Python - clear the whole
; 181  :            cache by filling names with references to Py_None.
; 182  :            Values are also set to NULL for added protection, as they
; 183  :            are borrowed reference */
; 184  :         for (i = 0; i < (1 << MCACHE_SIZE_EXP); i++) {

  000b3	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  000bc	eb 0d		 jmp	 SHORT $LN11@assign_ver
$LN10@assign_ver:
  000be	48 8b 44 24 28	 mov	 rax, QWORD PTR i$[rsp]
  000c3	48 ff c0	 inc	 rax
  000c6	48 89 44 24 28	 mov	 QWORD PTR i$[rsp], rax
$LN11@assign_ver:
  000cb	48 81 7c 24 28
	00 02 00 00	 cmp	 QWORD PTR i$[rsp], 512	; 00000200H
  000d4	7d 7e		 jge	 SHORT $LN9@assign_ver

; 185  :             method_cache[i].value = NULL;

  000d6	48 8b 44 24 28	 mov	 rax, QWORD PTR i$[rsp]
  000db	48 6b c0 18	 imul	 rax, 24
  000df	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:method_cache
  000e6	48 c7 44 01 10
	00 00 00 00	 mov	 QWORD PTR [rcx+rax+16], 0
$LN8@assign_ver:

; 186  :             Py_XDECREF(method_cache[i].name);

  000ef	48 8b 44 24 28	 mov	 rax, QWORD PTR i$[rsp]
  000f4	48 6b c0 18	 imul	 rax, 24
  000f8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:method_cache
  000ff	48 83 7c 01 08
	00		 cmp	 QWORD PTR [rcx+rax+8], 0
  00105	74 1a		 je	 SHORT $LN5@assign_ver
  00107	48 8b 44 24 28	 mov	 rax, QWORD PTR i$[rsp]
  0010c	48 6b c0 18	 imul	 rax, 24
  00110	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:method_cache
  00117	48 8b 4c 01 08	 mov	 rcx, QWORD PTR [rcx+rax+8]
  0011c	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@assign_ver:
  00121	33 c0		 xor	 eax, eax
  00123	85 c0		 test	 eax, eax
  00125	75 c8		 jne	 SHORT $LN8@assign_ver

; 187  :             method_cache[i].name = Py_None;

  00127	48 8b 44 24 28	 mov	 rax, QWORD PTR i$[rsp]
  0012c	48 6b c0 18	 imul	 rax, 24
  00130	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:method_cache
  00137	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_Py_NoneStruct
  0013e	48 89 54 01 08	 mov	 QWORD PTR [rcx+rax+8], rdx

; 188  :             Py_INCREF(Py_None);

  00143	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  0014a	e8 00 00 00 00	 call	 _Py_IncRef

; 189  :         }

  0014f	e9 6a ff ff ff	 jmp	 $LN10@assign_ver
$LN9@assign_ver:

; 190  :         /* mark all version tags as invalid */
; 191  :         PyType_Modified(&PyBaseObject_Type);

  00154	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyBaseObject_Type
  0015b	e8 00 00 00 00	 call	 PyType_Modified

; 192  :         return 1;

  00160	b8 01 00 00 00	 mov	 eax, 1
  00165	e9 be 00 00 00	 jmp	 $LN17@assign_ver
$LN12@assign_ver:

; 193  :     }
; 194  :     bases = type->tp_bases;

  0016a	48 8b 44 24 50	 mov	 rax, QWORD PTR type$[rsp]
  0016f	48 8b 80 a8 01
	00 00		 mov	 rax, QWORD PTR [rax+424]
  00176	48 89 44 24 30	 mov	 QWORD PTR bases$[rsp], rax

; 195  :     n = PyTuple_GET_SIZE(bases);

  0017b	48 8b 44 24 30	 mov	 rax, QWORD PTR bases$[rsp]
  00180	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00184	48 89 44 24 20	 mov	 QWORD PTR n$[rsp], rax

; 196  :     for (i = 0; i < n; i++) {

  00189	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  00192	eb 0d		 jmp	 SHORT $LN4@assign_ver
$LN3@assign_ver:
  00194	48 8b 44 24 28	 mov	 rax, QWORD PTR i$[rsp]
  00199	48 ff c0	 inc	 rax
  0019c	48 89 44 24 28	 mov	 QWORD PTR i$[rsp], rax
$LN4@assign_ver:
  001a1	48 8b 44 24 20	 mov	 rax, QWORD PTR n$[rsp]
  001a6	48 39 44 24 28	 cmp	 QWORD PTR i$[rsp], rax
  001ab	7d 5c		 jge	 SHORT $LN2@assign_ver

; 197  :         PyObject *b = PyTuple_GET_ITEM(bases, i);

  001ad	48 8b 44 24 30	 mov	 rax, QWORD PTR bases$[rsp]
  001b2	48 8b 4c 24 28	 mov	 rcx, QWORD PTR i$[rsp]
  001b7	48 8b 44 c8 70	 mov	 rax, QWORD PTR [rax+rcx*8+112]
  001bc	48 89 44 24 38	 mov	 QWORD PTR b$20511[rsp], rax

; 198  :         assert(PyType_Check(b));

  001c1	48 8b 44 24 38	 mov	 rax, QWORD PTR b$20511[rsp]
  001c6	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  001ca	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  001d0	25 00 00 00 80	 and	 eax, -2147483648	; ffffffff80000000H
  001d5	85 c0		 test	 eax, eax
  001d7	75 1c		 jne	 SHORT $LN19@assign_ver
  001d9	41 b8 c6 00 00
	00		 mov	 r8d, 198		; 000000c6H
  001df	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@GJLLIOPA@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAt?$AAy?$AAp?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  001e6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CA@PBFFDLKP@?$AAP?$AAy?$AAT?$AAy?$AAp?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AA?$CJ?$AA?$AA@
  001ed	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001f3	33 c0		 xor	 eax, eax
$LN19@assign_ver:

; 199  :         if (!assign_version_tag((PyTypeObject *)b))

  001f5	48 8b 4c 24 38	 mov	 rcx, QWORD PTR b$20511[rsp]
  001fa	e8 00 00 00 00	 call	 assign_version_tag
  001ff	85 c0		 test	 eax, eax
  00201	75 04		 jne	 SHORT $LN1@assign_ver

; 200  :             return 0;

  00203	33 c0		 xor	 eax, eax
  00205	eb 21		 jmp	 SHORT $LN17@assign_ver
$LN1@assign_ver:

; 201  :     }

  00207	eb 8b		 jmp	 SHORT $LN3@assign_ver
$LN2@assign_ver:

; 202  :     type->tp_flags |= Py_TPFLAGS_VALID_VERSION_TAG;

  00209	48 8b 44 24 50	 mov	 rax, QWORD PTR type$[rsp]
  0020e	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00214	0f ba e8 13	 bts	 eax, 19
  00218	48 8b 4c 24 50	 mov	 rcx, QWORD PTR type$[rsp]
  0021d	89 81 00 01 00
	00		 mov	 DWORD PTR [rcx+256], eax

; 203  :     return 1;

  00223	b8 01 00 00 00	 mov	 eax, 1
$LN17@assign_ver:

; 204  : }

  00228	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0022c	c3		 ret	 0
assign_version_tag ENDP
_TEXT	ENDS
EXTRN	_PyUnicode_FromId:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyType_LookupId DD imagerel $LN4
	DD	imagerel $LN4+61
	DD	imagerel $unwind$_PyType_LookupId
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyType_LookupId DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _PyType_LookupId
_TEXT	SEGMENT
oname$ = 32
type$ = 64
name$ = 72
_PyType_LookupId PROC					; COMDAT

; 2589 : {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2590 :     PyObject *oname;
; 2591 :     oname = _PyUnicode_FromId(name);   /* borrowed */

  0000e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR name$[rsp]
  00013	e8 00 00 00 00	 call	 _PyUnicode_FromId
  00018	48 89 44 24 20	 mov	 QWORD PTR oname$[rsp], rax

; 2592 :     if (oname == NULL)

  0001d	48 83 7c 24 20
	00		 cmp	 QWORD PTR oname$[rsp], 0
  00023	75 04		 jne	 SHORT $LN1@PyType_Loo@2

; 2593 :         return NULL;

  00025	33 c0		 xor	 eax, eax
  00027	eb 0f		 jmp	 SHORT $LN2@PyType_Loo@2
$LN1@PyType_Loo@2:

; 2594 :     return _PyType_Lookup(type, oname);

  00029	48 8b 54 24 20	 mov	 rdx, QWORD PTR oname$[rsp]
  0002e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR type$[rsp]
  00033	e8 00 00 00 00	 call	 _PyType_Lookup
$LN2@PyType_Loo@2:

; 2595 : }

  00038	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003c	c3		 ret	 0
_PyType_LookupId ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CK@FCBLAPIP@type?5object?5?8?$CF?450s?8?5has?5no?5attri@ ; `string'
PUBLIC	??_C@_0CM@IFFJPMHG@attribute?5name?5must?5be?5string?0?5n@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$type_getattro DD imagerel type_getattro
	DD	imagerel type_getattro+466
	DD	imagerel $unwind$type_getattro
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$type_getattro DD 010e01H
	DD	0a20eH
xdata	ENDS
;	COMDAT ??_C@_0CK@FCBLAPIP@type?5object?5?8?$CF?450s?8?5has?5no?5attri@
CONST	SEGMENT
??_C@_0CK@FCBLAPIP@type?5object?5?8?$CF?450s?8?5has?5no?5attri@ DB 'type '
	DB	'object ''%.50s'' has no attribute ''%U''', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@IFFJPMHG@attribute?5name?5must?5be?5string?0?5n@
CONST	SEGMENT
??_C@_0CM@IFFJPMHG@attribute?5name?5must?5be?5string?0?5n@ DB 'attribute '
	DB	'name must be string, not ''%.200s''', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT type_getattro
_TEXT	SEGMENT
meta_attribute$ = 32
meta_get$ = 40
attribute$ = 48
metatype$ = 56
local_get$22626 = 64
res$22641 = 72
type$ = 96
name$ = 104
type_getattro PROC					; COMDAT

; 2601 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 2602 :     PyTypeObject *metatype = Py_TYPE(type);

  0000e	48 8b 44 24 60	 mov	 rax, QWORD PTR type$[rsp]
  00013	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00017	48 89 44 24 38	 mov	 QWORD PTR metatype$[rsp], rax

; 2603 :     PyObject *meta_attribute, *attribute;
; 2604 :     descrgetfunc meta_get;
; 2605 : 
; 2606 :     if (!PyUnicode_Check(name)) {

  0001c	48 8b 44 24 68	 mov	 rax, QWORD PTR name$[rsp]
  00021	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00025	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0002b	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00030	85 c0		 test	 eax, eax
  00032	75 27		 jne	 SHORT $LN13@type_getat

; 2607 :         PyErr_Format(PyExc_TypeError,
; 2608 :                      "attribute name must be string, not '%.200s'",
; 2609 :                      name->ob_type->tp_name);

  00034	48 8b 44 24 68	 mov	 rax, QWORD PTR name$[rsp]
  00039	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0003d	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  00041	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CM@IFFJPMHG@attribute?5name?5must?5be?5string?0?5n@
  00048	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0004f	e8 00 00 00 00	 call	 PyErr_Format

; 2610 :         return NULL;

  00054	33 c0		 xor	 eax, eax
  00056	e9 72 01 00 00	 jmp	 $LN14@type_getat
$LN13@type_getat:

; 2611 :     }
; 2612 : 
; 2613 :     /* Initialize this type (we'll assume the metatype is initialized) */
; 2614 :     if (type->tp_dict == NULL) {

  0005b	48 8b 44 24 60	 mov	 rax, QWORD PTR type$[rsp]
  00060	48 83 b8 60 01
	00 00 00	 cmp	 QWORD PTR [rax+352], 0
  00068	75 15		 jne	 SHORT $LN12@type_getat

; 2615 :         if (PyType_Ready(type) < 0)

  0006a	48 8b 4c 24 60	 mov	 rcx, QWORD PTR type$[rsp]
  0006f	e8 00 00 00 00	 call	 PyType_Ready
  00074	85 c0		 test	 eax, eax
  00076	7d 07		 jge	 SHORT $LN11@type_getat

; 2616 :             return NULL;

  00078	33 c0		 xor	 eax, eax
  0007a	e9 4e 01 00 00	 jmp	 $LN14@type_getat
$LN11@type_getat:
$LN12@type_getat:

; 2617 :     }
; 2618 : 
; 2619 :     /* No readable descriptor found yet */
; 2620 :     meta_get = NULL;

  0007f	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR meta_get$[rsp], 0

; 2621 : 
; 2622 :     /* Look for the attribute in the metatype */
; 2623 :     meta_attribute = _PyType_Lookup(metatype, name);

  00088	48 8b 54 24 68	 mov	 rdx, QWORD PTR name$[rsp]
  0008d	48 8b 4c 24 38	 mov	 rcx, QWORD PTR metatype$[rsp]
  00092	e8 00 00 00 00	 call	 _PyType_Lookup
  00097	48 89 44 24 20	 mov	 QWORD PTR meta_attribute$[rsp], rax

; 2624 : 
; 2625 :     if (meta_attribute != NULL) {

  0009c	48 83 7c 24 20
	00		 cmp	 QWORD PTR meta_attribute$[rsp], 0
  000a2	74 52		 je	 SHORT $LN10@type_getat

; 2626 :         meta_get = Py_TYPE(meta_attribute)->tp_descr_get;

  000a4	48 8b 44 24 20	 mov	 rax, QWORD PTR meta_attribute$[rsp]
  000a9	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000ad	48 8b 80 68 01
	00 00		 mov	 rax, QWORD PTR [rax+360]
  000b4	48 89 44 24 28	 mov	 QWORD PTR meta_get$[rsp], rax

; 2627 : 
; 2628 :         if (meta_get != NULL && PyDescr_IsData(meta_attribute)) {

  000b9	48 83 7c 24 28
	00		 cmp	 QWORD PTR meta_get$[rsp], 0
  000bf	74 2b		 je	 SHORT $LN9@type_getat
  000c1	48 8b 44 24 20	 mov	 rax, QWORD PTR meta_attribute$[rsp]
  000c6	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000ca	48 83 b8 70 01
	00 00 00	 cmp	 QWORD PTR [rax+368], 0
  000d2	74 18		 je	 SHORT $LN9@type_getat

; 2629 :             /* Data descriptors implement tp_descr_set to intercept
; 2630 :              * writes. Assume the attribute is not overridden in
; 2631 :              * type's tp_dict (and bases): call the descriptor now.
; 2632 :              */
; 2633 :             return meta_get(meta_attribute, (PyObject *)type,
; 2634 :                             (PyObject *)metatype);

  000d4	4c 8b 44 24 38	 mov	 r8, QWORD PTR metatype$[rsp]
  000d9	48 8b 54 24 60	 mov	 rdx, QWORD PTR type$[rsp]
  000de	48 8b 4c 24 20	 mov	 rcx, QWORD PTR meta_attribute$[rsp]
  000e3	ff 54 24 28	 call	 QWORD PTR meta_get$[rsp]
  000e7	e9 e1 00 00 00	 jmp	 $LN14@type_getat
$LN9@type_getat:

; 2635 :         }
; 2636 :         Py_INCREF(meta_attribute);

  000ec	48 8b 4c 24 20	 mov	 rcx, QWORD PTR meta_attribute$[rsp]
  000f1	e8 00 00 00 00	 call	 _Py_IncRef
$LN10@type_getat:

; 2637 :     }
; 2638 : 
; 2639 :     /* No data descriptor found on metatype. Look in tp_dict of this
; 2640 :      * type and its bases */
; 2641 :     attribute = _PyType_Lookup(type, name);

  000f6	48 8b 54 24 68	 mov	 rdx, QWORD PTR name$[rsp]
  000fb	48 8b 4c 24 60	 mov	 rcx, QWORD PTR type$[rsp]
  00100	e8 00 00 00 00	 call	 _PyType_Lookup
  00105	48 89 44 24 30	 mov	 QWORD PTR attribute$[rsp], rax

; 2642 :     if (attribute != NULL) {

  0010a	48 83 7c 24 30
	00		 cmp	 QWORD PTR attribute$[rsp], 0
  00110	74 58		 je	 SHORT $LN8@type_getat

; 2643 :         /* Implement descriptor functionality, if any */
; 2644 :         descrgetfunc local_get = Py_TYPE(attribute)->tp_descr_get;

  00112	48 8b 44 24 30	 mov	 rax, QWORD PTR attribute$[rsp]
  00117	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0011b	48 8b 80 68 01
	00 00		 mov	 rax, QWORD PTR [rax+360]
  00122	48 89 44 24 40	 mov	 QWORD PTR local_get$22626[rsp], rax
$LN7@type_getat:

; 2645 : 
; 2646 :         Py_XDECREF(meta_attribute);

  00127	48 83 7c 24 20
	00		 cmp	 QWORD PTR meta_attribute$[rsp], 0
  0012d	74 0a		 je	 SHORT $LN4@type_getat
  0012f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR meta_attribute$[rsp]
  00134	e8 00 00 00 00	 call	 _Py_DecRef
$LN4@type_getat:
  00139	33 c0		 xor	 eax, eax
  0013b	85 c0		 test	 eax, eax
  0013d	75 e8		 jne	 SHORT $LN7@type_getat

; 2647 : 
; 2648 :         if (local_get != NULL) {

  0013f	48 83 7c 24 40
	00		 cmp	 QWORD PTR local_get$22626[rsp], 0
  00145	74 12		 je	 SHORT $LN3@type_getat

; 2649 :             /* NULL 2nd argument indicates the descriptor was
; 2650 :              * found on the target object itself (or a base)  */
; 2651 :             return local_get(attribute, (PyObject *)NULL,
; 2652 :                              (PyObject *)type);

  00147	4c 8b 44 24 60	 mov	 r8, QWORD PTR type$[rsp]
  0014c	33 d2		 xor	 edx, edx
  0014e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR attribute$[rsp]
  00153	ff 54 24 40	 call	 QWORD PTR local_get$22626[rsp]
  00157	eb 74		 jmp	 SHORT $LN14@type_getat
$LN3@type_getat:

; 2653 :         }
; 2654 : 
; 2655 :         Py_INCREF(attribute);

  00159	48 8b 4c 24 30	 mov	 rcx, QWORD PTR attribute$[rsp]
  0015e	e8 00 00 00 00	 call	 _Py_IncRef

; 2656 :         return attribute;

  00163	48 8b 44 24 30	 mov	 rax, QWORD PTR attribute$[rsp]
  00168	eb 63		 jmp	 SHORT $LN14@type_getat
$LN8@type_getat:

; 2657 :     }
; 2658 : 
; 2659 :     /* No attribute found in local __dict__ (or bases): use the
; 2660 :      * descriptor from the metatype, if any */
; 2661 :     if (meta_get != NULL) {

  0016a	48 83 7c 24 28
	00		 cmp	 QWORD PTR meta_get$[rsp], 0
  00170	74 29		 je	 SHORT $LN2@type_getat

; 2662 :         PyObject *res;
; 2663 :         res = meta_get(meta_attribute, (PyObject *)type,
; 2664 :                        (PyObject *)metatype);

  00172	4c 8b 44 24 38	 mov	 r8, QWORD PTR metatype$[rsp]
  00177	48 8b 54 24 60	 mov	 rdx, QWORD PTR type$[rsp]
  0017c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR meta_attribute$[rsp]
  00181	ff 54 24 28	 call	 QWORD PTR meta_get$[rsp]
  00185	48 89 44 24 48	 mov	 QWORD PTR res$22641[rsp], rax

; 2665 :         Py_DECREF(meta_attribute);

  0018a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR meta_attribute$[rsp]
  0018f	e8 00 00 00 00	 call	 _Py_DecRef

; 2666 :         return res;

  00194	48 8b 44 24 48	 mov	 rax, QWORD PTR res$22641[rsp]
  00199	eb 32		 jmp	 SHORT $LN14@type_getat
$LN2@type_getat:

; 2667 :     }
; 2668 : 
; 2669 :     /* If an ordinary attribute was found on the metatype, return it now */
; 2670 :     if (meta_attribute != NULL) {

  0019b	48 83 7c 24 20
	00		 cmp	 QWORD PTR meta_attribute$[rsp], 0
  001a1	74 07		 je	 SHORT $LN1@type_getat

; 2671 :         return meta_attribute;

  001a3	48 8b 44 24 20	 mov	 rax, QWORD PTR meta_attribute$[rsp]
  001a8	eb 23		 jmp	 SHORT $LN14@type_getat
$LN1@type_getat:

; 2672 :     }
; 2673 : 
; 2674 :     /* Give up */
; 2675 :     PyErr_Format(PyExc_AttributeError,
; 2676 :                  "type object '%.50s' has no attribute '%U'",
; 2677 :                  type->tp_name, name);

  001aa	4c 8b 4c 24 68	 mov	 r9, QWORD PTR name$[rsp]
  001af	48 8b 44 24 60	 mov	 rax, QWORD PTR type$[rsp]
  001b4	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  001b8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CK@FCBLAPIP@type?5object?5?8?$CF?450s?8?5has?5no?5attri@
  001bf	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_AttributeError
  001c6	e8 00 00 00 00	 call	 PyErr_Format

; 2678 :     return NULL;

  001cb	33 c0		 xor	 eax, eax
$LN14@type_getat:

; 2679 : }

  001cd	48 83 c4 58	 add	 rsp, 88			; 00000058H
  001d1	c3		 ret	 0
type_getattro ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DF@KKPAOPLB@can?8t?5set?5attributes?5of?5built?9in@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$type_setattro DD imagerel type_setattro
	DD	imagerel type_setattro+125
	DD	imagerel $unwind$type_setattro
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$type_setattro DD 011301H
	DD	04213H
xdata	ENDS
;	COMDAT ??_C@_0DF@KKPAOPLB@can?8t?5set?5attributes?5of?5built?9in@
CONST	SEGMENT
??_C@_0DF@KKPAOPLB@can?8t?5set?5attributes?5of?5built?9in@ DB 'can''t set'
	DB	' attributes of built-in/extension type ''%s''', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT type_setattro
_TEXT	SEGMENT
type$ = 48
name$ = 56
value$ = 64
type_setattro PROC					; COMDAT

; 2683 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2684 :     if (!(type->tp_flags & Py_TPFLAGS_HEAPTYPE)) {

  00013	48 8b 44 24 30	 mov	 rax, QWORD PTR type$[rsp]
  00018	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0001e	25 00 02 00 00	 and	 eax, 512		; 00000200H
  00023	85 c0		 test	 eax, eax
  00025	75 23		 jne	 SHORT $LN2@type_setat

; 2685 :         PyErr_Format(
; 2686 :             PyExc_TypeError,
; 2687 :             "can't set attributes of built-in/extension type '%s'",
; 2688 :             type->tp_name);

  00027	48 8b 44 24 30	 mov	 rax, QWORD PTR type$[rsp]
  0002c	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  00030	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DF@KKPAOPLB@can?8t?5set?5attributes?5of?5built?9in@
  00037	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0003e	e8 00 00 00 00	 call	 PyErr_Format

; 2689 :         return -1;

  00043	b8 ff ff ff ff	 mov	 eax, -1
  00048	eb 2e		 jmp	 SHORT $LN3@type_setat
$LN2@type_setat:

; 2690 :     }
; 2691 :     if (PyObject_GenericSetAttr((PyObject *)type, name, value) < 0)

  0004a	4c 8b 44 24 40	 mov	 r8, QWORD PTR value$[rsp]
  0004f	48 8b 54 24 38	 mov	 rdx, QWORD PTR name$[rsp]
  00054	48 8b 4c 24 30	 mov	 rcx, QWORD PTR type$[rsp]
  00059	e8 00 00 00 00	 call	 PyObject_GenericSetAttr
  0005e	85 c0		 test	 eax, eax
  00060	7d 07		 jge	 SHORT $LN1@type_setat

; 2692 :         return -1;

  00062	b8 ff ff ff ff	 mov	 eax, -1
  00067	eb 0f		 jmp	 SHORT $LN3@type_setat
$LN1@type_setat:

; 2693 :     return update_slot(type, name);

  00069	48 8b 54 24 38	 mov	 rdx, QWORD PTR name$[rsp]
  0006e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR type$[rsp]
  00073	e8 00 00 00 00	 call	 update_slot
$LN3@type_setat:

; 2694 : }

  00078	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0007c	c3		 ret	 0
type_setattro ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@DJMMHABI@type_dealloc?$AA@		; `string'
EXTRN	_PyDictKeys_DecRef:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$type_dealloc DD imagerel type_dealloc
	DD	imagerel type_dealloc+732
	DD	imagerel $unwind$type_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$type_dealloc DD 010901H
	DD	0a209H
xdata	ENDS
;	COMDAT ??_C@_0N@DJMMHABI@type_dealloc?$AA@
CONST	SEGMENT
??_C@_0N@DJMMHABI@type_dealloc?$AA@ DB 'type_dealloc', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT type_dealloc
_TEXT	SEGMENT
et$ = 48
g$22675 = 56
tv86 = 64
type$ = 96
type_dealloc PROC					; COMDAT

; 2701 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 2702 :     PyHeapTypeObject *et;
; 2703 : 
; 2704 :     /* Assert this is a heap-allocated type object */
; 2705 :     assert(type->tp_flags & Py_TPFLAGS_HEAPTYPE);

  00009	48 8b 44 24 60	 mov	 rax, QWORD PTR type$[rsp]
  0000e	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00014	25 00 02 00 00	 and	 eax, 512		; 00000200H
  00019	85 c0		 test	 eax, eax
  0001b	75 1c		 jne	 SHORT $LN44@type_deall
  0001d	41 b8 91 0a 00
	00		 mov	 r8d, 2705		; 00000a91H
  00023	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@GJLLIOPA@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAt?$AAy?$AAp?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EK@NBJBBGDH@?$AAt?$AAy?$AAp?$AAe?$AA?9?$AA?$DO?$AAt?$AAp?$AA_?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5?$AAP?$AAy?$AA_?$AAT?$AAP?$AAF?$AAL?$AAA?$AAG?$AAS?$AA_?$AAH?$AAE?$AAA?$AAP@
  00031	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00037	33 c0		 xor	 eax, eax
$LN44@type_deall:

; 2706 :     _PyObject_GC_UNTRACK(type);

  00039	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00041	4c 8b 4c 24 60	 mov	 r9, QWORD PTR type$[rsp]
  00046	41 b8 92 0a 00
	00		 mov	 r8d, 2706		; 00000a92H
  0004c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@PKBBAMFA@?4?4?2Objects?2typeobject?4c?$AA@
  00053	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@DJMMHABI@type_dealloc?$AA@
  0005a	e8 00 00 00 00	 call	 _PyParallel_Guard
  0005f	85 c0		 test	 eax, eax
  00061	0f 85 c1 00 00
	00		 jne	 $LN41@type_deall
$LN40@type_deall:
  00067	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0006f	4c 8b 4c 24 60	 mov	 r9, QWORD PTR type$[rsp]
  00074	41 b8 92 0a 00
	00		 mov	 r8d, 2706		; 00000a92H
  0007a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@PKBBAMFA@?4?4?2Objects?2typeobject?4c?$AA@
  00081	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@DJMMHABI@type_dealloc?$AA@
  00088	e8 00 00 00 00	 call	 _PyParallel_Guard
  0008d	85 c0		 test	 eax, eax
  0008f	74 0b		 je	 SHORT $LN45@type_deall
  00091	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR tv86[rsp], 0
  0009a	eb 0e		 jmp	 SHORT $LN46@type_deall
$LN45@type_deall:
  0009c	48 8b 44 24 60	 mov	 rax, QWORD PTR type$[rsp]
  000a1	48 83 e8 18	 sub	 rax, 24
  000a5	48 89 44 24 40	 mov	 QWORD PTR tv86[rsp], rax
$LN46@type_deall:
  000aa	48 8b 44 24 40	 mov	 rax, QWORD PTR tv86[rsp]
  000af	48 89 44 24 38	 mov	 QWORD PTR g$22675[rsp], rax
  000b4	48 8b 44 24 38	 mov	 rax, QWORD PTR g$22675[rsp]
  000b9	48 83 78 10 fe	 cmp	 QWORD PTR [rax+16], -2
  000be	75 1c		 jne	 SHORT $LN47@type_deall
  000c0	41 b8 92 0a 00
	00		 mov	 r8d, 2706		; 00000a92H
  000c6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@GJLLIOPA@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAt?$AAy?$AAp?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  000cd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EM@HFMJMDDM@?$AAg?$AA?9?$AA?$DO?$AAg?$AAc?$AA?4?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AAG?$AAC?$AA_?$AAR?$AAE?$AAF?$AAS?$AA_?$AAU?$AAN?$AAT?$AAR@
  000d4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000da	33 c0		 xor	 eax, eax
$LN47@type_deall:
  000dc	48 8b 44 24 38	 mov	 rax, QWORD PTR g$22675[rsp]
  000e1	48 c7 40 10 fe
	ff ff ff	 mov	 QWORD PTR [rax+16], -2
  000e9	48 8b 44 24 38	 mov	 rax, QWORD PTR g$22675[rsp]
  000ee	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  000f2	48 8b 4c 24 38	 mov	 rcx, QWORD PTR g$22675[rsp]
  000f7	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000fa	48 89 08	 mov	 QWORD PTR [rax], rcx
  000fd	48 8b 44 24 38	 mov	 rax, QWORD PTR g$22675[rsp]
  00102	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00105	48 8b 4c 24 38	 mov	 rcx, QWORD PTR g$22675[rsp]
  0010a	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  0010e	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  00112	48 8b 44 24 38	 mov	 rax, QWORD PTR g$22675[rsp]
  00117	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
  0011e	33 c0		 xor	 eax, eax
  00120	85 c0		 test	 eax, eax
  00122	0f 85 3f ff ff
	ff		 jne	 $LN40@type_deall
$LN41@type_deall:

; 2707 :     PyObject_ClearWeakRefs((PyObject *)type);

  00128	48 8b 4c 24 60	 mov	 rcx, QWORD PTR type$[rsp]
  0012d	e8 00 00 00 00	 call	 PyObject_ClearWeakRefs

; 2708 :     et = (PyHeapTypeObject *)type;

  00132	48 8b 44 24 60	 mov	 rax, QWORD PTR type$[rsp]
  00137	48 89 44 24 30	 mov	 QWORD PTR et$[rsp], rax
$LN37@type_deall:

; 2709 :     Py_XDECREF(type->tp_base);

  0013c	48 8b 44 24 60	 mov	 rax, QWORD PTR type$[rsp]
  00141	48 83 b8 58 01
	00 00 00	 cmp	 QWORD PTR [rax+344], 0
  00149	74 11		 je	 SHORT $LN34@type_deall
  0014b	48 8b 44 24 60	 mov	 rax, QWORD PTR type$[rsp]
  00150	48 8b 88 58 01
	00 00		 mov	 rcx, QWORD PTR [rax+344]
  00157	e8 00 00 00 00	 call	 _Py_DecRef
$LN34@type_deall:
  0015c	33 c0		 xor	 eax, eax
  0015e	85 c0		 test	 eax, eax
  00160	75 da		 jne	 SHORT $LN37@type_deall
$LN33@type_deall:

; 2710 :     Py_XDECREF(type->tp_dict);

  00162	48 8b 44 24 60	 mov	 rax, QWORD PTR type$[rsp]
  00167	48 83 b8 60 01
	00 00 00	 cmp	 QWORD PTR [rax+352], 0
  0016f	74 11		 je	 SHORT $LN30@type_deall
  00171	48 8b 44 24 60	 mov	 rax, QWORD PTR type$[rsp]
  00176	48 8b 88 60 01
	00 00		 mov	 rcx, QWORD PTR [rax+352]
  0017d	e8 00 00 00 00	 call	 _Py_DecRef
$LN30@type_deall:
  00182	33 c0		 xor	 eax, eax
  00184	85 c0		 test	 eax, eax
  00186	75 da		 jne	 SHORT $LN33@type_deall
$LN29@type_deall:

; 2711 :     Py_XDECREF(type->tp_bases);

  00188	48 8b 44 24 60	 mov	 rax, QWORD PTR type$[rsp]
  0018d	48 83 b8 a8 01
	00 00 00	 cmp	 QWORD PTR [rax+424], 0
  00195	74 11		 je	 SHORT $LN26@type_deall
  00197	48 8b 44 24 60	 mov	 rax, QWORD PTR type$[rsp]
  0019c	48 8b 88 a8 01
	00 00		 mov	 rcx, QWORD PTR [rax+424]
  001a3	e8 00 00 00 00	 call	 _Py_DecRef
$LN26@type_deall:
  001a8	33 c0		 xor	 eax, eax
  001aa	85 c0		 test	 eax, eax
  001ac	75 da		 jne	 SHORT $LN29@type_deall
$LN25@type_deall:

; 2712 :     Py_XDECREF(type->tp_mro);

  001ae	48 8b 44 24 60	 mov	 rax, QWORD PTR type$[rsp]
  001b3	48 83 b8 b0 01
	00 00 00	 cmp	 QWORD PTR [rax+432], 0
  001bb	74 11		 je	 SHORT $LN22@type_deall
  001bd	48 8b 44 24 60	 mov	 rax, QWORD PTR type$[rsp]
  001c2	48 8b 88 b0 01
	00 00		 mov	 rcx, QWORD PTR [rax+432]
  001c9	e8 00 00 00 00	 call	 _Py_DecRef
$LN22@type_deall:
  001ce	33 c0		 xor	 eax, eax
  001d0	85 c0		 test	 eax, eax
  001d2	75 da		 jne	 SHORT $LN25@type_deall
$LN21@type_deall:

; 2713 :     Py_XDECREF(type->tp_cache);

  001d4	48 8b 44 24 60	 mov	 rax, QWORD PTR type$[rsp]
  001d9	48 83 b8 b8 01
	00 00 00	 cmp	 QWORD PTR [rax+440], 0
  001e1	74 11		 je	 SHORT $LN18@type_deall
  001e3	48 8b 44 24 60	 mov	 rax, QWORD PTR type$[rsp]
  001e8	48 8b 88 b8 01
	00 00		 mov	 rcx, QWORD PTR [rax+440]
  001ef	e8 00 00 00 00	 call	 _Py_DecRef
$LN18@type_deall:
  001f4	33 c0		 xor	 eax, eax
  001f6	85 c0		 test	 eax, eax
  001f8	75 da		 jne	 SHORT $LN21@type_deall
$LN17@type_deall:

; 2714 :     Py_XDECREF(type->tp_subclasses);

  001fa	48 8b 44 24 60	 mov	 rax, QWORD PTR type$[rsp]
  001ff	48 83 b8 c0 01
	00 00 00	 cmp	 QWORD PTR [rax+448], 0
  00207	74 11		 je	 SHORT $LN14@type_deall
  00209	48 8b 44 24 60	 mov	 rax, QWORD PTR type$[rsp]
  0020e	48 8b 88 c0 01
	00 00		 mov	 rcx, QWORD PTR [rax+448]
  00215	e8 00 00 00 00	 call	 _Py_DecRef
$LN14@type_deall:
  0021a	33 c0		 xor	 eax, eax
  0021c	85 c0		 test	 eax, eax
  0021e	75 da		 jne	 SHORT $LN17@type_deall

; 2715 :     /* A type's tp_doc is heap allocated, unlike the tp_doc slots
; 2716 :      * of most other objects.  It's okay to cast it to char *.
; 2717 :      */
; 2718 :     PyObject_Free((char *)type->tp_doc);

  00220	48 8b 44 24 60	 mov	 rax, QWORD PTR type$[rsp]
  00225	48 8b 88 08 01
	00 00		 mov	 rcx, QWORD PTR [rax+264]
  0022c	e8 00 00 00 00	 call	 _PyObject_DebugFree
$LN13@type_deall:

; 2719 :     Py_XDECREF(et->ht_name);

  00231	48 8b 44 24 30	 mov	 rax, QWORD PTR et$[rsp]
  00236	48 83 b8 68 03
	00 00 00	 cmp	 QWORD PTR [rax+872], 0
  0023e	74 11		 je	 SHORT $LN10@type_deall
  00240	48 8b 44 24 30	 mov	 rax, QWORD PTR et$[rsp]
  00245	48 8b 88 68 03
	00 00		 mov	 rcx, QWORD PTR [rax+872]
  0024c	e8 00 00 00 00	 call	 _Py_DecRef
$LN10@type_deall:
  00251	33 c0		 xor	 eax, eax
  00253	85 c0		 test	 eax, eax
  00255	75 da		 jne	 SHORT $LN13@type_deall
$LN9@type_deall:

; 2720 :     Py_XDECREF(et->ht_qualname);

  00257	48 8b 44 24 30	 mov	 rax, QWORD PTR et$[rsp]
  0025c	48 83 b8 78 03
	00 00 00	 cmp	 QWORD PTR [rax+888], 0
  00264	74 11		 je	 SHORT $LN6@type_deall
  00266	48 8b 44 24 30	 mov	 rax, QWORD PTR et$[rsp]
  0026b	48 8b 88 78 03
	00 00		 mov	 rcx, QWORD PTR [rax+888]
  00272	e8 00 00 00 00	 call	 _Py_DecRef
$LN6@type_deall:
  00277	33 c0		 xor	 eax, eax
  00279	85 c0		 test	 eax, eax
  0027b	75 da		 jne	 SHORT $LN9@type_deall
$LN5@type_deall:

; 2721 :     Py_XDECREF(et->ht_slots);

  0027d	48 8b 44 24 30	 mov	 rax, QWORD PTR et$[rsp]
  00282	48 83 b8 70 03
	00 00 00	 cmp	 QWORD PTR [rax+880], 0
  0028a	74 11		 je	 SHORT $LN2@type_deall
  0028c	48 8b 44 24 30	 mov	 rax, QWORD PTR et$[rsp]
  00291	48 8b 88 70 03
	00 00		 mov	 rcx, QWORD PTR [rax+880]
  00298	e8 00 00 00 00	 call	 _Py_DecRef
$LN2@type_deall:
  0029d	33 c0		 xor	 eax, eax
  0029f	85 c0		 test	 eax, eax
  002a1	75 da		 jne	 SHORT $LN5@type_deall

; 2722 :     if (et->ht_cached_keys)

  002a3	48 8b 44 24 30	 mov	 rax, QWORD PTR et$[rsp]
  002a8	48 83 b8 80 03
	00 00 00	 cmp	 QWORD PTR [rax+896], 0
  002b0	74 11		 je	 SHORT $LN1@type_deall

; 2723 :         _PyDictKeys_DecRef(et->ht_cached_keys);

  002b2	48 8b 44 24 30	 mov	 rax, QWORD PTR et$[rsp]
  002b7	48 8b 88 80 03
	00 00		 mov	 rcx, QWORD PTR [rax+896]
  002be	e8 00 00 00 00	 call	 _PyDictKeys_DecRef
$LN1@type_deall:

; 2724 :     Py_TYPE(type)->tp_free((PyObject *)type);

  002c3	48 8b 44 24 60	 mov	 rax, QWORD PTR type$[rsp]
  002c8	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  002cc	48 8b 4c 24 60	 mov	 rcx, QWORD PTR type$[rsp]
  002d1	ff 90 98 01 00
	00		 call	 QWORD PTR [rax+408]

; 2725 : }

  002d7	48 83 c4 58	 add	 rsp, 88			; 00000058H
  002db	c3		 ret	 0
type_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_1CE@OHLLHBLD@?$AAP?$AAy?$AAL?$AAi?$AAs?$AAt?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAr?$AAa?$AAw?$AA?$CJ?$AA?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$type_subclasses DD imagerel type_subclasses
	DD	imagerel type_subclasses+392
	DD	imagerel $unwind$type_subclasses
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$type_subclasses DD 010e01H
	DD	0a20eH
xdata	ENDS
;	COMDAT ??_C@_1CE@OHLLHBLD@?$AAP?$AAy?$AAL?$AAi?$AAs?$AAt?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAr?$AAa?$AAw?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CE@OHLLHBLD@?$AAP?$AAy?$AAL?$AAi?$AAs?$AAt?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAr?$AAa?$AAw?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'L', 00H, 'i', 00H, 's', 00H, 't', 00H, '_', 00H
	DB	'C', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, '(', 00H, 'r'
	DB	00H, 'a', 00H, 'w', 00H, ')', 00H, 00H, 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT type_subclasses
_TEXT	SEGMENT
n$ = 32
i$ = 40
raw$ = 48
ref$ = 56
list$ = 64
tv130 = 72
type$ = 96
args_ignored$ = 104
type_subclasses PROC					; COMDAT

; 2729 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 2730 :     PyObject *list, *raw, *ref;
; 2731 :     Py_ssize_t i, n;
; 2732 : 
; 2733 :     list = PyList_New(0);

  0000e	33 c9		 xor	 ecx, ecx
  00010	e8 00 00 00 00	 call	 PyList_New
  00015	48 89 44 24 40	 mov	 QWORD PTR list$[rsp], rax

; 2734 :     if (list == NULL)

  0001a	48 83 7c 24 40
	00		 cmp	 QWORD PTR list$[rsp], 0
  00020	75 07		 jne	 SHORT $LN7@type_subcl

; 2735 :         return NULL;

  00022	33 c0		 xor	 eax, eax
  00024	e9 5a 01 00 00	 jmp	 $LN8@type_subcl
$LN7@type_subcl:

; 2736 :     raw = type->tp_subclasses;

  00029	48 8b 44 24 60	 mov	 rax, QWORD PTR type$[rsp]
  0002e	48 8b 80 c0 01
	00 00		 mov	 rax, QWORD PTR [rax+448]
  00035	48 89 44 24 30	 mov	 QWORD PTR raw$[rsp], rax

; 2737 :     if (raw == NULL)

  0003a	48 83 7c 24 30
	00		 cmp	 QWORD PTR raw$[rsp], 0
  00040	75 0a		 jne	 SHORT $LN6@type_subcl

; 2738 :         return list;

  00042	48 8b 44 24 40	 mov	 rax, QWORD PTR list$[rsp]
  00047	e9 37 01 00 00	 jmp	 $LN8@type_subcl
$LN6@type_subcl:

; 2739 :     assert(PyList_Check(raw));

  0004c	48 8b 44 24 30	 mov	 rax, QWORD PTR raw$[rsp]
  00051	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00055	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0005b	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  00060	85 c0		 test	 eax, eax
  00062	75 1c		 jne	 SHORT $LN10@type_subcl
  00064	41 b8 b3 0a 00
	00		 mov	 r8d, 2739		; 00000ab3H
  0006a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@GJLLIOPA@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAt?$AAy?$AAp?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00071	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CE@OHLLHBLD@?$AAP?$AAy?$AAL?$AAi?$AAs?$AAt?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAr?$AAa?$AAw?$AA?$CJ?$AA?$AA@
  00078	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0007e	33 c0		 xor	 eax, eax
$LN10@type_subcl:

; 2740 :     n = PyList_GET_SIZE(raw);

  00080	48 8b 44 24 30	 mov	 rax, QWORD PTR raw$[rsp]
  00085	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00089	48 89 44 24 20	 mov	 QWORD PTR n$[rsp], rax

; 2741 :     for (i = 0; i < n; i++) {

  0008e	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  00097	eb 0d		 jmp	 SHORT $LN5@type_subcl
$LN4@type_subcl:
  00099	48 8b 44 24 28	 mov	 rax, QWORD PTR i$[rsp]
  0009e	48 ff c0	 inc	 rax
  000a1	48 89 44 24 28	 mov	 QWORD PTR i$[rsp], rax
$LN5@type_subcl:
  000a6	48 8b 44 24 20	 mov	 rax, QWORD PTR n$[rsp]
  000ab	48 39 44 24 28	 cmp	 QWORD PTR i$[rsp], rax
  000b0	0f 8d c8 00 00
	00		 jge	 $LN3@type_subcl

; 2742 :         ref = PyList_GET_ITEM(raw, i);

  000b6	48 8b 44 24 30	 mov	 rax, QWORD PTR raw$[rsp]
  000bb	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  000bf	48 8b 4c 24 28	 mov	 rcx, QWORD PTR i$[rsp]
  000c4	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  000c8	48 89 44 24 38	 mov	 QWORD PTR ref$[rsp], rax

; 2743 :         assert(PyWeakref_CheckRef(ref));

  000cd	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_RefType
  000d4	48 8b 4c 24 38	 mov	 rcx, QWORD PTR ref$[rsp]
  000d9	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  000dd	74 35		 je	 SHORT $LN11@type_subcl
  000df	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_PyWeakref_RefType
  000e6	48 8b 44 24 38	 mov	 rax, QWORD PTR ref$[rsp]
  000eb	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  000ef	e8 00 00 00 00	 call	 PyType_IsSubtype
  000f4	85 c0		 test	 eax, eax
  000f6	75 1c		 jne	 SHORT $LN11@type_subcl
  000f8	41 b8 b7 0a 00
	00		 mov	 r8d, 2743		; 00000ab7H
  000fe	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@GJLLIOPA@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAt?$AAy?$AAp?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00105	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@IHEHGJMP@?$AAP?$AAy?$AAW?$AAe?$AAa?$AAk?$AAr?$AAe?$AAf?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AAR?$AAe?$AAf?$AA?$CI?$AAr?$AAe?$AAf?$AA?$CJ?$AA?$AA@
  0010c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00112	33 c0		 xor	 eax, eax
$LN11@type_subcl:

; 2744 :         ref = PyWeakref_GET_OBJECT(ref);

  00114	48 8b 44 24 38	 mov	 rax, QWORD PTR ref$[rsp]
  00119	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0011d	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00122	7e 10		 jle	 SHORT $LN12@type_subcl
  00124	48 8b 44 24 38	 mov	 rax, QWORD PTR ref$[rsp]
  00129	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0012d	48 89 44 24 48	 mov	 QWORD PTR tv130[rsp], rax
  00132	eb 0c		 jmp	 SHORT $LN13@type_subcl
$LN12@type_subcl:
  00134	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0013b	48 89 44 24 48	 mov	 QWORD PTR tv130[rsp], rax
$LN13@type_subcl:
  00140	48 8b 44 24 48	 mov	 rax, QWORD PTR tv130[rsp]
  00145	48 89 44 24 38	 mov	 QWORD PTR ref$[rsp], rax

; 2745 :         if (ref != Py_None) {

  0014a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00151	48 39 44 24 38	 cmp	 QWORD PTR ref$[rsp], rax
  00156	74 21		 je	 SHORT $LN2@type_subcl

; 2746 :             if (PyList_Append(list, ref) < 0) {

  00158	48 8b 54 24 38	 mov	 rdx, QWORD PTR ref$[rsp]
  0015d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR list$[rsp]
  00162	e8 00 00 00 00	 call	 PyList_Append
  00167	85 c0		 test	 eax, eax
  00169	7d 0e		 jge	 SHORT $LN1@type_subcl

; 2747 :                 Py_DECREF(list);

  0016b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR list$[rsp]
  00170	e8 00 00 00 00	 call	 _Py_DecRef

; 2748 :                 return NULL;

  00175	33 c0		 xor	 eax, eax
  00177	eb 0a		 jmp	 SHORT $LN8@type_subcl
$LN1@type_subcl:
$LN2@type_subcl:

; 2749 :             }
; 2750 :         }
; 2751 :     }

  00179	e9 1b ff ff ff	 jmp	 $LN4@type_subcl
$LN3@type_subcl:

; 2752 :     return list;

  0017e	48 8b 44 24 40	 mov	 rax, QWORD PTR list$[rsp]
$LN8@type_subcl:

; 2753 : }

  00183	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00187	c3		 ret	 0
type_subclasses ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$type_prepare DD imagerel type_prepare
	DD	imagerel type_prepare+29
	DD	imagerel $unwind$type_prepare
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$type_prepare DD 011301H
	DD	04213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT type_prepare
_TEXT	SEGMENT
self$ = 48
args$ = 56
kwds$ = 64
type_prepare PROC					; COMDAT

; 2757 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2758 :     return PyDict_New();

  00013	e8 00 00 00 00	 call	 PyDict_New

; 2759 : }

  00018	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001c	c3		 ret	 0
type_prepare ENDP
_TEXT	ENDS
EXTRN	PyDict_Keys:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$type_dir DD imagerel type_dir
	DD	imagerel type_dir+109
	DD	imagerel $unwind$type_dir
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$type_dir DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT type_dir
_TEXT	SEGMENT
dict$ = 32
result$ = 40
self$ = 64
args$ = 72
type_dir PROC						; COMDAT

; 2827 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2828 :     PyObject *result = NULL;

  0000e	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR result$[rsp], 0

; 2829 :     PyObject *dict = PyDict_New();

  00017	e8 00 00 00 00	 call	 PyDict_New
  0001c	48 89 44 24 20	 mov	 QWORD PTR dict$[rsp], rax

; 2830 : 
; 2831 :     if (dict != NULL && merge_class_dict(dict, self) == 0)

  00021	48 83 7c 24 20
	00		 cmp	 QWORD PTR dict$[rsp], 0
  00027	74 22		 je	 SHORT $LN5@type_dir
  00029	48 8b 54 24 40	 mov	 rdx, QWORD PTR self$[rsp]
  0002e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR dict$[rsp]
  00033	e8 00 00 00 00	 call	 merge_class_dict
  00038	85 c0		 test	 eax, eax
  0003a	75 0f		 jne	 SHORT $LN5@type_dir

; 2832 :         result = PyDict_Keys(dict);

  0003c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR dict$[rsp]
  00041	e8 00 00 00 00	 call	 PyDict_Keys
  00046	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax
$LN5@type_dir:
$LN4@type_dir:

; 2833 : 
; 2834 :     Py_XDECREF(dict);

  0004b	48 83 7c 24 20
	00		 cmp	 QWORD PTR dict$[rsp], 0
  00051	74 0a		 je	 SHORT $LN1@type_dir
  00053	48 8b 4c 24 20	 mov	 rcx, QWORD PTR dict$[rsp]
  00058	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@type_dir:
  0005d	33 c0		 xor	 eax, eax
  0005f	85 c0		 test	 eax, eax
  00061	75 e8		 jne	 SHORT $LN4@type_dir

; 2835 :     return result;

  00063	48 8b 44 24 28	 mov	 rax, QWORD PTR result$[rsp]

; 2836 : }

  00068	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0006c	c3		 ret	 0
type_dir ENDP
_TEXT	ENDS
PUBLIC	??_C@_1O@EDPMGCFJ@?$AAa?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CG@CEMCEDN@?$AAP?$AAy?$AAD?$AAi?$AAc?$AAt?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAd?$AAi?$AAc?$AAt?$AA?$CJ?$AA?$AA@ ; `string'
EXTRN	PySequence_GetItem:PROC
EXTRN	PySequence_Size:PROC
EXTRN	PyDict_Update:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$merge_class_dict DD imagerel merge_class_dict
	DD	imagerel merge_class_dict+455
	DD	imagerel $unwind$merge_class_dict
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$merge_class_dict DD 010e01H
	DD	0c20eH
xdata	ENDS
;	COMDAT ??_C@_1O@EDPMGCFJ@?$AAa?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?$AA@
CONST	SEGMENT
??_C@_1O@EDPMGCFJ@?$AAa?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?$AA@ DB 'a', 00H, 'c'
	DB	00H, 'l', 00H, 'a', 00H, 's', 00H, 's', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@CEMCEDN@?$AAP?$AAy?$AAD?$AAi?$AAc?$AAt?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAd?$AAi?$AAc?$AAt?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CG@CEMCEDN@?$AAP?$AAy?$AAD?$AAi?$AAc?$AAt?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAd?$AAi?$AAc?$AAt?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'D', 00H, 'i', 00H, 'c', 00H, 't', 00H, '_', 00H
	DB	'C', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, '(', 00H, 'd'
	DB	00H, 'i', 00H, 'c', 00H, 't', 00H, ')', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT merge_class_dict
_TEXT	SEGMENT
classdict$ = 32
bases$ = 40
status$22791 = 48
n$22798 = 56
i$22797 = 64
base$22805 = 72
status$22804 = 80
dict$ = 112
aclass$ = 120
merge_class_dict PROC					; COMDAT

; 2771 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 2772 :     PyObject *classdict;
; 2773 :     PyObject *bases;
; 2774 :     _Py_IDENTIFIER(__bases__);
; 2775 : 
; 2776 :     assert(PyDict_Check(dict));

  0000e	48 8b 44 24 70	 mov	 rax, QWORD PTR dict$[rsp]
  00013	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00017	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0001d	25 00 00 00 20	 and	 eax, 536870912		; 20000000H
  00022	85 c0		 test	 eax, eax
  00024	75 1c		 jne	 SHORT $LN15@merge_clas
  00026	41 b8 d8 0a 00
	00		 mov	 r8d, 2776		; 00000ad8H
  0002c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@GJLLIOPA@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAt?$AAy?$AAp?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00033	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@CEMCEDN@?$AAP?$AAy?$AAD?$AAi?$AAc?$AAt?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAd?$AAi?$AAc?$AAt?$AA?$CJ?$AA?$AA@
  0003a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00040	33 c0		 xor	 eax, eax
$LN15@merge_clas:

; 2777 :     assert(aclass);

  00042	48 83 7c 24 78
	00		 cmp	 QWORD PTR aclass$[rsp], 0
  00048	75 1c		 jne	 SHORT $LN16@merge_clas
  0004a	41 b8 d9 0a 00
	00		 mov	 r8d, 2777		; 00000ad9H
  00050	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@GJLLIOPA@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAt?$AAy?$AAp?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00057	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1O@EDPMGCFJ@?$AAa?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?$AA@
  0005e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00064	33 c0		 xor	 eax, eax
$LN16@merge_clas:

; 2778 : 
; 2779 :     /* Merge in the type's dict (if any). */
; 2780 :     classdict = _PyObject_GetAttrId(aclass, &PyId___dict__);

  00066	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId___dict__
  0006b	8b c0		 mov	 eax, eax
  0006d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00073	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0007c	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00080	48 8b d0	 mov	 rdx, rax
  00083	48 8b 4c 24 78	 mov	 rcx, QWORD PTR aclass$[rsp]
  00088	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  0008d	48 89 44 24 20	 mov	 QWORD PTR classdict$[rsp], rax

; 2781 :     if (classdict == NULL)

  00092	48 83 7c 24 20
	00		 cmp	 QWORD PTR classdict$[rsp], 0
  00098	75 07		 jne	 SHORT $LN12@merge_clas

; 2782 :         PyErr_Clear();

  0009a	e8 00 00 00 00	 call	 PyErr_Clear

; 2783 :     else {

  0009f	eb 2e		 jmp	 SHORT $LN11@merge_clas
$LN12@merge_clas:

; 2784 :         int status = PyDict_Update(dict, classdict);

  000a1	48 8b 54 24 20	 mov	 rdx, QWORD PTR classdict$[rsp]
  000a6	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dict$[rsp]
  000ab	e8 00 00 00 00	 call	 PyDict_Update
  000b0	89 44 24 30	 mov	 DWORD PTR status$22791[rsp], eax

; 2785 :         Py_DECREF(classdict);

  000b4	48 8b 4c 24 20	 mov	 rcx, QWORD PTR classdict$[rsp]
  000b9	e8 00 00 00 00	 call	 _Py_DecRef

; 2786 :         if (status < 0)

  000be	83 7c 24 30 00	 cmp	 DWORD PTR status$22791[rsp], 0
  000c3	7d 0a		 jge	 SHORT $LN10@merge_clas

; 2787 :             return -1;

  000c5	b8 ff ff ff ff	 mov	 eax, -1
  000ca	e9 f3 00 00 00	 jmp	 $LN13@merge_clas
$LN10@merge_clas:
$LN11@merge_clas:

; 2788 :     }
; 2789 : 
; 2790 :     /* Recursively merge in the base types' (if any) dicts. */
; 2791 :     bases = _PyObject_GetAttrId(aclass, &PyId___bases__);

  000cf	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId___bases__@?1??merge_class_dict@@9@9
  000d4	8b c0		 mov	 eax, eax
  000d6	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  000dc	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  000e5	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  000e9	48 8b d0	 mov	 rdx, rax
  000ec	48 8b 4c 24 78	 mov	 rcx, QWORD PTR aclass$[rsp]
  000f1	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  000f6	48 89 44 24 28	 mov	 QWORD PTR bases$[rsp], rax

; 2792 :     if (bases == NULL)

  000fb	48 83 7c 24 28
	00		 cmp	 QWORD PTR bases$[rsp], 0
  00101	75 0a		 jne	 SHORT $LN9@merge_clas

; 2793 :         PyErr_Clear();

  00103	e8 00 00 00 00	 call	 PyErr_Clear

; 2794 :     else {

  00108	e9 b3 00 00 00	 jmp	 $LN8@merge_clas
$LN9@merge_clas:

; 2795 :         /* We have no guarantee that bases is a real tuple */
; 2796 :         Py_ssize_t i, n;
; 2797 :         n = PySequence_Size(bases); /* This better be right */

  0010d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR bases$[rsp]
  00112	e8 00 00 00 00	 call	 PySequence_Size
  00117	48 89 44 24 38	 mov	 QWORD PTR n$22798[rsp], rax

; 2798 :         if (n < 0)

  0011c	48 83 7c 24 38
	00		 cmp	 QWORD PTR n$22798[rsp], 0
  00122	7d 0a		 jge	 SHORT $LN7@merge_clas

; 2799 :             PyErr_Clear();

  00124	e8 00 00 00 00	 call	 PyErr_Clear

; 2800 :         else {

  00129	e9 88 00 00 00	 jmp	 $LN6@merge_clas
$LN7@merge_clas:

; 2801 :             for (i = 0; i < n; i++) {

  0012e	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR i$22797[rsp], 0
  00137	eb 0d		 jmp	 SHORT $LN5@merge_clas
$LN4@merge_clas:
  00139	48 8b 44 24 40	 mov	 rax, QWORD PTR i$22797[rsp]
  0013e	48 ff c0	 inc	 rax
  00141	48 89 44 24 40	 mov	 QWORD PTR i$22797[rsp], rax
$LN5@merge_clas:
  00146	48 8b 44 24 38	 mov	 rax, QWORD PTR n$22798[rsp]
  0014b	48 39 44 24 40	 cmp	 QWORD PTR i$22797[rsp], rax
  00150	7d 64		 jge	 SHORT $LN3@merge_clas

; 2802 :                 int status;
; 2803 :                 PyObject *base = PySequence_GetItem(bases, i);

  00152	48 8b 54 24 40	 mov	 rdx, QWORD PTR i$22797[rsp]
  00157	48 8b 4c 24 28	 mov	 rcx, QWORD PTR bases$[rsp]
  0015c	e8 00 00 00 00	 call	 PySequence_GetItem
  00161	48 89 44 24 48	 mov	 QWORD PTR base$22805[rsp], rax

; 2804 :                 if (base == NULL) {

  00166	48 83 7c 24 48
	00		 cmp	 QWORD PTR base$22805[rsp], 0
  0016c	75 11		 jne	 SHORT $LN2@merge_clas

; 2805 :                     Py_DECREF(bases);

  0016e	48 8b 4c 24 28	 mov	 rcx, QWORD PTR bases$[rsp]
  00173	e8 00 00 00 00	 call	 _Py_DecRef

; 2806 :                     return -1;

  00178	b8 ff ff ff ff	 mov	 eax, -1
  0017d	eb 43		 jmp	 SHORT $LN13@merge_clas
$LN2@merge_clas:

; 2807 :                 }
; 2808 :                 status = merge_class_dict(dict, base);

  0017f	48 8b 54 24 48	 mov	 rdx, QWORD PTR base$22805[rsp]
  00184	48 8b 4c 24 70	 mov	 rcx, QWORD PTR dict$[rsp]
  00189	e8 00 00 00 00	 call	 merge_class_dict
  0018e	89 44 24 50	 mov	 DWORD PTR status$22804[rsp], eax

; 2809 :                 Py_DECREF(base);

  00192	48 8b 4c 24 48	 mov	 rcx, QWORD PTR base$22805[rsp]
  00197	e8 00 00 00 00	 call	 _Py_DecRef

; 2810 :                 if (status < 0) {

  0019c	83 7c 24 50 00	 cmp	 DWORD PTR status$22804[rsp], 0
  001a1	7d 11		 jge	 SHORT $LN1@merge_clas

; 2811 :                     Py_DECREF(bases);

  001a3	48 8b 4c 24 28	 mov	 rcx, QWORD PTR bases$[rsp]
  001a8	e8 00 00 00 00	 call	 _Py_DecRef

; 2812 :                     return -1;

  001ad	b8 ff ff ff ff	 mov	 eax, -1
  001b2	eb 0e		 jmp	 SHORT $LN13@merge_clas
$LN1@merge_clas:

; 2813 :                 }
; 2814 :             }

  001b4	eb 83		 jmp	 SHORT $LN4@merge_clas
$LN3@merge_clas:
$LN6@merge_clas:

; 2815 :         }
; 2816 :         Py_DECREF(bases);

  001b6	48 8b 4c 24 28	 mov	 rcx, QWORD PTR bases$[rsp]
  001bb	e8 00 00 00 00	 call	 _Py_DecRef
$LN8@merge_clas:

; 2817 :     }
; 2818 :     return 0;

  001c0	33 c0		 xor	 eax, eax
$LN13@merge_clas:

; 2819 : }

  001c2	48 83 c4 68	 add	 rsp, 104		; 00000068H
  001c6	c3		 ret	 0
merge_class_dict ENDP
_TEXT	ENDS
EXTRN	PyLong_FromSsize_t:PROC
EXTRN	_PyDict_KeysSize:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$type_sizeof DD imagerel type_sizeof
	DD	imagerel type_sizeof+137
	DD	imagerel $unwind$type_sizeof
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$type_sizeof DD 010e01H
	DD	0820eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT type_sizeof
_TEXT	SEGMENT
type$ = 32
size$ = 40
et$22839 = 48
self$ = 80
args_unused$ = 88
type_sizeof PROC					; COMDAT

; 2840 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 2841 :     Py_ssize_t size;
; 2842 :     PyTypeObject *type = (PyTypeObject*)self;

  0000e	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00013	48 89 44 24 20	 mov	 QWORD PTR type$[rsp], rax

; 2843 :     if (type->tp_flags & Py_TPFLAGS_HEAPTYPE) {

  00018	48 8b 44 24 20	 mov	 rax, QWORD PTR type$[rsp]
  0001d	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00023	25 00 02 00 00	 and	 eax, 512		; 00000200H
  00028	85 c0		 test	 eax, eax
  0002a	74 45		 je	 SHORT $LN3@type_sizeo

; 2844 :         PyHeapTypeObject* et = (PyHeapTypeObject*)type;

  0002c	48 8b 44 24 20	 mov	 rax, QWORD PTR type$[rsp]
  00031	48 89 44 24 30	 mov	 QWORD PTR et$22839[rsp], rax

; 2845 :         size = sizeof(PyHeapTypeObject);

  00036	48 c7 44 24 28
	90 03 00 00	 mov	 QWORD PTR size$[rsp], 912 ; 00000390H

; 2846 :         if (et->ht_cached_keys)

  0003f	48 8b 44 24 30	 mov	 rax, QWORD PTR et$22839[rsp]
  00044	48 83 b8 80 03
	00 00 00	 cmp	 QWORD PTR [rax+896], 0
  0004c	74 21		 je	 SHORT $LN2@type_sizeo

; 2847 :             size += _PyDict_KeysSize(et->ht_cached_keys);

  0004e	48 8b 44 24 30	 mov	 rax, QWORD PTR et$22839[rsp]
  00053	48 8b 88 80 03
	00 00		 mov	 rcx, QWORD PTR [rax+896]
  0005a	e8 00 00 00 00	 call	 _PyDict_KeysSize
  0005f	48 8b 4c 24 28	 mov	 rcx, QWORD PTR size$[rsp]
  00064	48 03 c8	 add	 rcx, rax
  00067	48 8b c1	 mov	 rax, rcx
  0006a	48 89 44 24 28	 mov	 QWORD PTR size$[rsp], rax
$LN2@type_sizeo:

; 2848 :     }
; 2849 :     else

  0006f	eb 09		 jmp	 SHORT $LN1@type_sizeo
$LN3@type_sizeo:

; 2850 :         size = sizeof(PyTypeObject);

  00071	48 c7 44 24 28
	e0 01 00 00	 mov	 QWORD PTR size$[rsp], 480 ; 000001e0H
$LN1@type_sizeo:

; 2851 :     return PyLong_FromSsize_t(size);

  0007a	48 8b 4c 24 28	 mov	 rcx, QWORD PTR size$[rsp]
  0007f	e8 00 00 00 00	 call	 PyLong_FromSsize_t

; 2852 : }

  00084	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00088	c3		 ret	 0
type_sizeof ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@MAGJNODJ@type_traverse?$AA@		; `string'
PUBLIC	??_C@_0DC@IIFMCDJF@type_traverse?$CI?$CJ?5called?5for?5non?9h@ ; `string'
EXTRN	__imp_sprintf:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$type_traverse DD imagerel type_traverse
	DD	imagerel type_traverse+689
	DD	imagerel $unwind$type_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$type_traverse DD 021601H
	DD	0230116H
xdata	ENDS
;	COMDAT ??_C@_0O@MAGJNODJ@type_traverse?$AA@
CONST	SEGMENT
??_C@_0O@MAGJNODJ@type_traverse?$AA@ DB 'type_traverse', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@IIFMCDJF@type_traverse?$CI?$CJ?5called?5for?5non?9h@
CONST	SEGMENT
??_C@_0DC@IIFMCDJF@type_traverse?$CI?$CJ?5called?5for?5non?9h@ DB 'type_t'
	DB	'raverse() called for non-heap type ''%.100s''', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT type_traverse
_TEXT	SEGMENT
msg$22872 = 32
vret$22880 = 240
vret$22888 = 244
vret$22896 = 248
vret$22904 = 252
vret$22912 = 256
type$ = 288
visit$ = 296
arg$ = 304
type_traverse PROC					; COMDAT

; 2880 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 81 ec 18 01
	00 00		 sub	 rsp, 280		; 00000118H

; 2881 :     /* Because of type_is_gc(), the collector only calls this
; 2882 :        for heaptypes. */
; 2883 :     if (!(type->tp_flags & Py_TPFLAGS_HEAPTYPE)) {

  00016	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR type$[rsp]
  0001e	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00024	25 00 02 00 00	 and	 eax, 512		; 00000200H
  00029	85 c0		 test	 eax, eax
  0002b	75 28		 jne	 SHORT $LN31@type_trave

; 2884 :         char msg[200];
; 2885 :         sprintf(msg, "type_traverse() called for non-heap type '%.100s'",
; 2886 :                 type->tp_name);

  0002d	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR type$[rsp]
  00035	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  00039	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DC@IIFMCDJF@type_traverse?$CI?$CJ?5called?5for?5non?9h@
  00040	48 8d 4c 24 20	 lea	 rcx, QWORD PTR msg$22872[rsp]
  00045	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_sprintf

; 2887 :         Py_FatalError(msg);

  0004b	48 8d 4c 24 20	 lea	 rcx, QWORD PTR msg$22872[rsp]
  00050	e8 00 00 00 00	 call	 Py_FatalError
$LN31@type_trave:
$LN30@type_trave:

; 2888 :     }
; 2889 : 
; 2890 :     Py_VISIT(type->tp_dict);

  00055	e8 00 00 00 00	 call	 _Py_PXCTX
  0005a	85 c0		 test	 eax, eax
  0005c	74 1c		 je	 SHORT $LN27@type_trave
  0005e	45 33 c9	 xor	 r9d, r9d
  00061	41 b8 4a 0b 00
	00		 mov	 r8d, 2890		; 00000b4aH
  00067	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@PKBBAMFA@?4?4?2Objects?2typeobject?4c?$AA@
  0006e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@MAGJNODJ@type_traverse?$AA@
  00075	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN27@type_trave:
  0007a	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR type$[rsp]
  00082	48 83 b8 60 01
	00 00 00	 cmp	 QWORD PTR [rax+352], 0
  0008a	74 3b		 je	 SHORT $LN26@type_trave
  0008c	48 8b 94 24 30
	01 00 00	 mov	 rdx, QWORD PTR arg$[rsp]
  00094	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR type$[rsp]
  0009c	48 8b 88 60 01
	00 00		 mov	 rcx, QWORD PTR [rax+352]
  000a3	ff 94 24 28 01
	00 00		 call	 QWORD PTR visit$[rsp]
  000aa	89 84 24 f0 00
	00 00		 mov	 DWORD PTR vret$22880[rsp], eax
  000b1	83 bc 24 f0 00
	00 00 00	 cmp	 DWORD PTR vret$22880[rsp], 0
  000b9	74 0c		 je	 SHORT $LN25@type_trave
  000bb	8b 84 24 f0 00
	00 00		 mov	 eax, DWORD PTR vret$22880[rsp]
  000c2	e9 e2 01 00 00	 jmp	 $LN32@type_trave
$LN25@type_trave:
$LN26@type_trave:
  000c7	33 c0		 xor	 eax, eax
  000c9	85 c0		 test	 eax, eax
  000cb	75 88		 jne	 SHORT $LN30@type_trave
$LN24@type_trave:

; 2891 :     Py_VISIT(type->tp_cache);

  000cd	e8 00 00 00 00	 call	 _Py_PXCTX
  000d2	85 c0		 test	 eax, eax
  000d4	74 1c		 je	 SHORT $LN21@type_trave
  000d6	45 33 c9	 xor	 r9d, r9d
  000d9	41 b8 4b 0b 00
	00		 mov	 r8d, 2891		; 00000b4bH
  000df	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@PKBBAMFA@?4?4?2Objects?2typeobject?4c?$AA@
  000e6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@MAGJNODJ@type_traverse?$AA@
  000ed	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN21@type_trave:
  000f2	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR type$[rsp]
  000fa	48 83 b8 b8 01
	00 00 00	 cmp	 QWORD PTR [rax+440], 0
  00102	74 3b		 je	 SHORT $LN20@type_trave
  00104	48 8b 94 24 30
	01 00 00	 mov	 rdx, QWORD PTR arg$[rsp]
  0010c	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR type$[rsp]
  00114	48 8b 88 b8 01
	00 00		 mov	 rcx, QWORD PTR [rax+440]
  0011b	ff 94 24 28 01
	00 00		 call	 QWORD PTR visit$[rsp]
  00122	89 84 24 f4 00
	00 00		 mov	 DWORD PTR vret$22888[rsp], eax
  00129	83 bc 24 f4 00
	00 00 00	 cmp	 DWORD PTR vret$22888[rsp], 0
  00131	74 0c		 je	 SHORT $LN19@type_trave
  00133	8b 84 24 f4 00
	00 00		 mov	 eax, DWORD PTR vret$22888[rsp]
  0013a	e9 6a 01 00 00	 jmp	 $LN32@type_trave
$LN19@type_trave:
$LN20@type_trave:
  0013f	33 c0		 xor	 eax, eax
  00141	85 c0		 test	 eax, eax
  00143	75 88		 jne	 SHORT $LN24@type_trave
$LN18@type_trave:

; 2892 :     Py_VISIT(type->tp_mro);

  00145	e8 00 00 00 00	 call	 _Py_PXCTX
  0014a	85 c0		 test	 eax, eax
  0014c	74 1c		 je	 SHORT $LN15@type_trave
  0014e	45 33 c9	 xor	 r9d, r9d
  00151	41 b8 4c 0b 00
	00		 mov	 r8d, 2892		; 00000b4cH
  00157	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@PKBBAMFA@?4?4?2Objects?2typeobject?4c?$AA@
  0015e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@MAGJNODJ@type_traverse?$AA@
  00165	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN15@type_trave:
  0016a	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR type$[rsp]
  00172	48 83 b8 b0 01
	00 00 00	 cmp	 QWORD PTR [rax+432], 0
  0017a	74 3b		 je	 SHORT $LN14@type_trave
  0017c	48 8b 94 24 30
	01 00 00	 mov	 rdx, QWORD PTR arg$[rsp]
  00184	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR type$[rsp]
  0018c	48 8b 88 b0 01
	00 00		 mov	 rcx, QWORD PTR [rax+432]
  00193	ff 94 24 28 01
	00 00		 call	 QWORD PTR visit$[rsp]
  0019a	89 84 24 f8 00
	00 00		 mov	 DWORD PTR vret$22896[rsp], eax
  001a1	83 bc 24 f8 00
	00 00 00	 cmp	 DWORD PTR vret$22896[rsp], 0
  001a9	74 0c		 je	 SHORT $LN13@type_trave
  001ab	8b 84 24 f8 00
	00 00		 mov	 eax, DWORD PTR vret$22896[rsp]
  001b2	e9 f2 00 00 00	 jmp	 $LN32@type_trave
$LN13@type_trave:
$LN14@type_trave:
  001b7	33 c0		 xor	 eax, eax
  001b9	85 c0		 test	 eax, eax
  001bb	75 88		 jne	 SHORT $LN18@type_trave
$LN12@type_trave:

; 2893 :     Py_VISIT(type->tp_bases);

  001bd	e8 00 00 00 00	 call	 _Py_PXCTX
  001c2	85 c0		 test	 eax, eax
  001c4	74 1c		 je	 SHORT $LN9@type_trave
  001c6	45 33 c9	 xor	 r9d, r9d
  001c9	41 b8 4d 0b 00
	00		 mov	 r8d, 2893		; 00000b4dH
  001cf	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@PKBBAMFA@?4?4?2Objects?2typeobject?4c?$AA@
  001d6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@MAGJNODJ@type_traverse?$AA@
  001dd	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN9@type_trave:
  001e2	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR type$[rsp]
  001ea	48 83 b8 a8 01
	00 00 00	 cmp	 QWORD PTR [rax+424], 0
  001f2	74 38		 je	 SHORT $LN8@type_trave
  001f4	48 8b 94 24 30
	01 00 00	 mov	 rdx, QWORD PTR arg$[rsp]
  001fc	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR type$[rsp]
  00204	48 8b 88 a8 01
	00 00		 mov	 rcx, QWORD PTR [rax+424]
  0020b	ff 94 24 28 01
	00 00		 call	 QWORD PTR visit$[rsp]
  00212	89 84 24 fc 00
	00 00		 mov	 DWORD PTR vret$22904[rsp], eax
  00219	83 bc 24 fc 00
	00 00 00	 cmp	 DWORD PTR vret$22904[rsp], 0
  00221	74 09		 je	 SHORT $LN7@type_trave
  00223	8b 84 24 fc 00
	00 00		 mov	 eax, DWORD PTR vret$22904[rsp]
  0022a	eb 7d		 jmp	 SHORT $LN32@type_trave
$LN7@type_trave:
$LN8@type_trave:
  0022c	33 c0		 xor	 eax, eax
  0022e	85 c0		 test	 eax, eax
  00230	75 8b		 jne	 SHORT $LN12@type_trave
$LN6@type_trave:

; 2894 :     Py_VISIT(type->tp_base);

  00232	e8 00 00 00 00	 call	 _Py_PXCTX
  00237	85 c0		 test	 eax, eax
  00239	74 1c		 je	 SHORT $LN3@type_trave
  0023b	45 33 c9	 xor	 r9d, r9d
  0023e	41 b8 4e 0b 00
	00		 mov	 r8d, 2894		; 00000b4eH
  00244	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@PKBBAMFA@?4?4?2Objects?2typeobject?4c?$AA@
  0024b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@MAGJNODJ@type_traverse?$AA@
  00252	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@type_trave:
  00257	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR type$[rsp]
  0025f	48 83 b8 58 01
	00 00 00	 cmp	 QWORD PTR [rax+344], 0
  00267	74 38		 je	 SHORT $LN2@type_trave
  00269	48 8b 94 24 30
	01 00 00	 mov	 rdx, QWORD PTR arg$[rsp]
  00271	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR type$[rsp]
  00279	48 8b 88 58 01
	00 00		 mov	 rcx, QWORD PTR [rax+344]
  00280	ff 94 24 28 01
	00 00		 call	 QWORD PTR visit$[rsp]
  00287	89 84 24 00 01
	00 00		 mov	 DWORD PTR vret$22912[rsp], eax
  0028e	83 bc 24 00 01
	00 00 00	 cmp	 DWORD PTR vret$22912[rsp], 0
  00296	74 09		 je	 SHORT $LN1@type_trave
  00298	8b 84 24 00 01
	00 00		 mov	 eax, DWORD PTR vret$22912[rsp]
  0029f	eb 08		 jmp	 SHORT $LN32@type_trave
$LN1@type_trave:
$LN2@type_trave:
  002a1	33 c0		 xor	 eax, eax
  002a3	85 c0		 test	 eax, eax
  002a5	75 8b		 jne	 SHORT $LN6@type_trave

; 2895 : 
; 2896 :     /* There's no need to visit type->tp_subclasses or
; 2897 :        ((PyHeapTypeObject *)type)->ht_slots, because they can't be involved
; 2898 :        in cycles; tp_subclasses is a list of weak references,
; 2899 :        and slots is a tuple of strings. */
; 2900 : 
; 2901 :     return 0;

  002a7	33 c0		 xor	 eax, eax
$LN32@type_trave:

; 2902 : }

  002a9	48 81 c4 18 01
	00 00		 add	 rsp, 280		; 00000118H
  002b0	c3		 ret	 0
type_traverse ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@OHKMGPIO@type_clear?$AA@		; `string'
EXTRN	PyDict_Clear:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$type_clear DD imagerel type_clear
	DD	imagerel type_clear+270
	DD	imagerel $unwind$type_clear
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$type_clear DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0L@OHKMGPIO@type_clear?$AA@
CONST	SEGMENT
??_C@_0L@OHKMGPIO@type_clear?$AA@ DB 'type_clear', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT type_clear
_TEXT	SEGMENT
cached_keys$ = 48
_py_tmp$22932 = 56
type$ = 80
type_clear PROC						; COMDAT

; 2906 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 2907 :     PyDictKeysObject *cached_keys;
; 2908 :     /* Because of type_is_gc(), the collector only calls this
; 2909 :        for heaptypes. */
; 2910 :     assert(type->tp_flags & Py_TPFLAGS_HEAPTYPE);

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR type$[rsp]
  0000e	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00014	25 00 02 00 00	 and	 eax, 512		; 00000200H
  00019	85 c0		 test	 eax, eax
  0001b	75 1c		 jne	 SHORT $LN9@type_clear
  0001d	41 b8 5e 0b 00
	00		 mov	 r8d, 2910		; 00000b5eH
  00023	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@GJLLIOPA@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAt?$AAy?$AAp?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EK@NBJBBGDH@?$AAt?$AAy?$AAp?$AAe?$AA?9?$AA?$DO?$AAt?$AAp?$AA_?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5?$AAP?$AAy?$AA_?$AAT?$AAP?$AAF?$AAL?$AAA?$AAG?$AAS?$AA_?$AAH?$AAE?$AAA?$AAP@
  00031	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00037	33 c0		 xor	 eax, eax
$LN9@type_clear:

; 2911 : 
; 2912 :     /* We need to invalidate the method cache carefully before clearing
; 2913 :        the dict, so that other objects caught in a reference cycle
; 2914 :        don't start calling destroyed methods.
; 2915 : 
; 2916 :        Otherwise, the only field we need to clear is tp_mro, which is
; 2917 :        part of a hard cycle (its first element is the class itself) that
; 2918 :        won't be broken otherwise (it's a tuple and tuples don't have a
; 2919 :        tp_clear handler).  None of the other fields need to be
; 2920 :        cleared, and here's why:
; 2921 : 
; 2922 :        tp_cache:
; 2923 :            Not used; if it were, it would be a dict.
; 2924 : 
; 2925 :        tp_bases, tp_base:
; 2926 :            If these are involved in a cycle, there must be at least
; 2927 :            one other, mutable object in the cycle, e.g. a base
; 2928 :            class's dict; the cycle will be broken that way.
; 2929 : 
; 2930 :        tp_subclasses:
; 2931 :            A list of weak references can't be part of a cycle; and
; 2932 :            lists have their own tp_clear.
; 2933 : 
; 2934 :        slots (in PyHeapTypeObject):
; 2935 :            A tuple of strings can't be part of a cycle.
; 2936 :     */
; 2937 : 
; 2938 :     PyType_Modified(type);

  00039	48 8b 4c 24 50	 mov	 rcx, QWORD PTR type$[rsp]
  0003e	e8 00 00 00 00	 call	 PyType_Modified

; 2939 :     cached_keys = ((PyHeapTypeObject *)type)->ht_cached_keys;

  00043	48 8b 44 24 50	 mov	 rax, QWORD PTR type$[rsp]
  00048	48 8b 80 80 03
	00 00		 mov	 rax, QWORD PTR [rax+896]
  0004f	48 89 44 24 30	 mov	 QWORD PTR cached_keys$[rsp], rax

; 2940 :     if (cached_keys != NULL) {

  00054	48 83 7c 24 30
	00		 cmp	 QWORD PTR cached_keys$[rsp], 0
  0005a	74 1a		 je	 SHORT $LN6@type_clear

; 2941 :         ((PyHeapTypeObject *)type)->ht_cached_keys = NULL;

  0005c	48 8b 44 24 50	 mov	 rax, QWORD PTR type$[rsp]
  00061	48 c7 80 80 03
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+896], 0

; 2942 :         _PyDictKeys_DecRef(cached_keys);

  0006c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR cached_keys$[rsp]
  00071	e8 00 00 00 00	 call	 _PyDictKeys_DecRef
$LN6@type_clear:

; 2943 :     }
; 2944 :     if (type->tp_dict)

  00076	48 8b 44 24 50	 mov	 rax, QWORD PTR type$[rsp]
  0007b	48 83 b8 60 01
	00 00 00	 cmp	 QWORD PTR [rax+352], 0
  00083	74 11		 je	 SHORT $LN5@type_clear

; 2945 :         PyDict_Clear(type->tp_dict);

  00085	48 8b 44 24 50	 mov	 rax, QWORD PTR type$[rsp]
  0008a	48 8b 88 60 01
	00 00		 mov	 rcx, QWORD PTR [rax+352]
  00091	e8 00 00 00 00	 call	 PyDict_Clear
$LN5@type_clear:
$LN4@type_clear:

; 2946 :     Py_CLEAR(type->tp_mro);

  00096	48 8b 44 24 50	 mov	 rax, QWORD PTR type$[rsp]
  0009b	48 83 b8 b0 01
	00 00 00	 cmp	 QWORD PTR [rax+432], 0
  000a3	74 5c		 je	 SHORT $LN1@type_clear
  000a5	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000ad	48 8b 44 24 50	 mov	 rax, QWORD PTR type$[rsp]
  000b2	4c 8b 88 b0 01
	00 00		 mov	 r9, QWORD PTR [rax+432]
  000b9	41 b8 82 0b 00
	00		 mov	 r8d, 2946		; 00000b82H
  000bf	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@PKBBAMFA@?4?4?2Objects?2typeobject?4c?$AA@
  000c6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@OHKMGPIO@type_clear?$AA@
  000cd	e8 00 00 00 00	 call	 _PyParallel_Guard
  000d2	85 c0		 test	 eax, eax
  000d4	75 2b		 jne	 SHORT $LN1@type_clear
  000d6	48 8b 44 24 50	 mov	 rax, QWORD PTR type$[rsp]
  000db	48 8b 80 b0 01
	00 00		 mov	 rax, QWORD PTR [rax+432]
  000e2	48 89 44 24 38	 mov	 QWORD PTR _py_tmp$22932[rsp], rax
  000e7	48 8b 44 24 50	 mov	 rax, QWORD PTR type$[rsp]
  000ec	48 c7 80 b0 01
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+432], 0
  000f7	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _py_tmp$22932[rsp]
  000fc	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@type_clear:
  00101	33 c0		 xor	 eax, eax
  00103	85 c0		 test	 eax, eax
  00105	75 8f		 jne	 SHORT $LN4@type_clear

; 2947 : 
; 2948 :     return 0;

  00107	33 c0		 xor	 eax, eax

; 2949 : }

  00109	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0010d	c3		 ret	 0
type_clear ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT type_is_gc
_TEXT	SEGMENT
type$ = 8
type_is_gc PROC						; COMDAT

; 2953 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 2954 :     return type->tp_flags & Py_TPFLAGS_HEAPTYPE;

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR type$[rsp]
  0000a	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00010	25 00 02 00 00	 and	 eax, 512		; 00000200H

; 2955 : }

  00015	c3		 ret	 0
type_is_gc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CG@NDEKFCCG@object?4__init__?$CI?$CJ?5takes?5no?5param@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$object_init DD imagerel object_init
	DD	imagerel object_init+138
	DD	imagerel $unwind$object_init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$object_init DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT ??_C@_0CG@NDEKFCCG@object?4__init__?$CI?$CJ?5takes?5no?5param@
CONST	SEGMENT
??_C@_0CG@NDEKFCCG@object?4__init__?$CI?$CJ?5takes?5no?5param@ DB 'object'
	DB	'.__init__() takes no parameters', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT object_init
_TEXT	SEGMENT
type$ = 32
err$ = 40
self$ = 64
args$ = 72
kwds$ = 80
object_init PROC					; COMDAT

; 3057 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 3058 :     int err = 0;

  00013	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR err$[rsp], 0

; 3059 :     PyTypeObject *type = Py_TYPE(self);

  0001b	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00020	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00024	48 89 44 24 20	 mov	 QWORD PTR type$[rsp], rax

; 3060 :     if (excess_args(args, kwds) &&
; 3061 :         (type->tp_new == object_new || type->tp_init != object_init)) {

  00029	48 8b 54 24 50	 mov	 rdx, QWORD PTR kwds$[rsp]
  0002e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR args$[rsp]
  00033	e8 00 00 00 00	 call	 excess_args
  00038	85 c0		 test	 eax, eax
  0003a	74 45		 je	 SHORT $LN2@object_ini
  0003c	48 8b 44 24 20	 mov	 rax, QWORD PTR type$[rsp]
  00041	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:object_new
  00048	48 39 88 90 01
	00 00		 cmp	 QWORD PTR [rax+400], rcx
  0004f	74 15		 je	 SHORT $LN1@object_ini
  00051	48 8b 44 24 20	 mov	 rax, QWORD PTR type$[rsp]
  00056	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:object_init
  0005d	48 39 88 80 01
	00 00		 cmp	 QWORD PTR [rax+384], rcx
  00064	74 1b		 je	 SHORT $LN2@object_ini
$LN1@object_ini:

; 3062 :         PyErr_SetString(PyExc_TypeError, "object.__init__() takes no parameters");

  00066	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@NDEKFCCG@object?4__init__?$CI?$CJ?5takes?5no?5param@
  0006d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00074	e8 00 00 00 00	 call	 PyErr_SetString

; 3063 :         err = -1;

  00079	c7 44 24 28 ff
	ff ff ff	 mov	 DWORD PTR err$[rsp], -1
$LN2@object_ini:

; 3064 :     }
; 3065 :     return err;

  00081	8b 44 24 28	 mov	 eax, DWORD PTR err$[rsp]

; 3066 : }

  00085	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00089	c3		 ret	 0
object_init ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$excess_args DD imagerel excess_args
	DD	imagerel excess_args+100
	DD	imagerel $unwind$excess_args
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$excess_args DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT excess_args
_TEXT	SEGMENT
tv74 = 32
args$ = 64
kwds$ = 72
excess_args PROC					; COMDAT

; 3050 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 3051 :     return PyTuple_GET_SIZE(args) ||
; 3052 :         (kwds && PyDict_Check(kwds) && PyDict_Size(kwds));

  0000e	48 8b 44 24 40	 mov	 rax, QWORD PTR args$[rsp]
  00013	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00018	75 39		 jne	 SHORT $LN4@excess_arg
  0001a	48 83 7c 24 48
	00		 cmp	 QWORD PTR kwds$[rsp], 0
  00020	74 27		 je	 SHORT $LN3@excess_arg
  00022	48 8b 44 24 48	 mov	 rax, QWORD PTR kwds$[rsp]
  00027	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0002b	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00031	25 00 00 00 20	 and	 eax, 536870912		; 20000000H
  00036	85 c0		 test	 eax, eax
  00038	74 0f		 je	 SHORT $LN3@excess_arg
  0003a	48 8b 4c 24 48	 mov	 rcx, QWORD PTR kwds$[rsp]
  0003f	e8 00 00 00 00	 call	 PyDict_Size
  00044	48 85 c0	 test	 rax, rax
  00047	75 0a		 jne	 SHORT $LN4@excess_arg
$LN3@excess_arg:
  00049	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv74[rsp], 0
  00051	eb 08		 jmp	 SHORT $LN5@excess_arg
$LN4@excess_arg:
  00053	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv74[rsp], 1
$LN5@excess_arg:
  0005b	8b 44 24 20	 mov	 eax, DWORD PTR tv74[rsp]

; 3053 : }

  0005f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00063	c3		 ret	 0
excess_args ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DN@EFMEECOC@Can?8t?5instantiate?5abstract?5class@ ; `string'
PUBLIC	??_C@_0BN@NPFLIDJG@object?$CI?$CJ?5takes?5no?5parameters?$AA@ ; `string'
EXTRN	PyUnicode_Join:PROC
EXTRN	PyObject_CallFunctionObjArgs:PROC
EXTRN	PyEval_GetBuiltins:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$object_new DD imagerel object_new
	DD	imagerel object_new+511
	DD	imagerel $unwind$object_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$object_new DD 011301H
	DD	0a213H
xdata	ENDS
;	COMDAT ??_C@_0DN@EFMEECOC@Can?8t?5instantiate?5abstract?5class@
CONST	SEGMENT
??_C@_0DN@EFMEECOC@Can?8t?5instantiate?5abstract?5class@ DB 'Can''t insta'
	DB	'ntiate abstract class %s with abstract methods %U', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@NPFLIDJG@object?$CI?$CJ?5takes?5no?5parameters?$AA@
CONST	SEGMENT
??_C@_0BN@NPFLIDJG@object?$CI?$CJ?5takes?5no?5parameters?$AA@ DB 'object('
	DB	') takes no parameters', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT object_new
_TEXT	SEGMENT
sorted$23012 = 32
sorted_methods$23013 = 40
abstract_methods$23009 = 48
joined$23015 = 56
builtins$23011 = 64
comma$23017 = 72
type$ = 96
args$ = 104
kwds$ = 112
object_new PROC						; COMDAT

; 3070 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 3071 :     if (excess_args(args, kwds) &&
; 3072 :         (type->tp_init == object_init || type->tp_new != object_new)) {

  00013	48 8b 54 24 70	 mov	 rdx, QWORD PTR kwds$[rsp]
  00018	48 8b 4c 24 68	 mov	 rcx, QWORD PTR args$[rsp]
  0001d	e8 00 00 00 00	 call	 excess_args
  00022	85 c0		 test	 eax, eax
  00024	74 44		 je	 SHORT $LN21@object_new
  00026	48 8b 44 24 60	 mov	 rax, QWORD PTR type$[rsp]
  0002b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:object_init
  00032	48 39 88 80 01
	00 00		 cmp	 QWORD PTR [rax+384], rcx
  00039	74 15		 je	 SHORT $LN20@object_new
  0003b	48 8b 44 24 60	 mov	 rax, QWORD PTR type$[rsp]
  00040	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:object_new
  00047	48 39 88 90 01
	00 00		 cmp	 QWORD PTR [rax+400], rcx
  0004e	74 1a		 je	 SHORT $LN21@object_new
$LN20@object_new:

; 3073 :         PyErr_SetString(PyExc_TypeError, "object() takes no parameters");

  00050	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@NPFLIDJG@object?$CI?$CJ?5takes?5no?5parameters?$AA@
  00057	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0005e	e8 00 00 00 00	 call	 PyErr_SetString

; 3074 :         return NULL;

  00063	33 c0		 xor	 eax, eax
  00065	e9 90 01 00 00	 jmp	 $LN22@object_new
$LN21@object_new:

; 3075 :     }
; 3076 : 
; 3077 :     if (type->tp_flags & Py_TPFLAGS_IS_ABSTRACT) {

  0006a	48 8b 44 24 60	 mov	 rax, QWORD PTR type$[rsp]
  0006f	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00075	25 00 00 10 00	 and	 eax, 1048576		; 00100000H
  0007a	85 c0		 test	 eax, eax
  0007c	0f 84 66 01 00
	00		 je	 $LN19@object_new

; 3078 :         PyObject *abstract_methods = NULL;

  00082	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR abstract_methods$23009[rsp], 0

; 3079 :         PyObject *builtins;
; 3080 :         PyObject *sorted;
; 3081 :         PyObject *sorted_methods = NULL;

  0008b	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR sorted_methods$23013[rsp], 0

; 3082 :         PyObject *joined = NULL;

  00094	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR joined$23015[rsp], 0

; 3083 :         PyObject *comma;
; 3084 :         _Py_static_string(comma_id, ", ");
; 3085 :         _Py_IDENTIFIER(sorted);
; 3086 : 
; 3087 :         /* Compute ", ".join(sorted(type.__abstractmethods__))
; 3088 :            into joined. */
; 3089 :         abstract_methods = type_abstractmethods(type, NULL);

  0009d	33 d2		 xor	 edx, edx
  0009f	48 8b 4c 24 60	 mov	 rcx, QWORD PTR type$[rsp]
  000a4	e8 00 00 00 00	 call	 type_abstractmethods
  000a9	48 89 44 24 30	 mov	 QWORD PTR abstract_methods$23009[rsp], rax

; 3090 :         if (abstract_methods == NULL)

  000ae	48 83 7c 24 30
	00		 cmp	 QWORD PTR abstract_methods$23009[rsp], 0
  000b4	75 05		 jne	 SHORT $LN18@object_new

; 3091 :             goto error;

  000b6	e9 e1 00 00 00	 jmp	 $error$23027
$LN18@object_new:

; 3092 :         builtins = PyEval_GetBuiltins();

  000bb	e8 00 00 00 00	 call	 PyEval_GetBuiltins
  000c0	48 89 44 24 40	 mov	 QWORD PTR builtins$23011[rsp], rax

; 3093 :         if (builtins == NULL)

  000c5	48 83 7c 24 40
	00		 cmp	 QWORD PTR builtins$23011[rsp], 0
  000cb	75 05		 jne	 SHORT $LN17@object_new

; 3094 :             goto error;

  000cd	e9 ca 00 00 00	 jmp	 $error$23027
$LN17@object_new:

; 3095 :         sorted = _PyDict_GetItemId(builtins, &PyId_sorted);

  000d2	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId_sorted@?3??object_new@@9@9
  000d7	8b c0		 mov	 eax, eax
  000d9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  000df	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  000e8	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  000ec	48 8b d0	 mov	 rdx, rax
  000ef	48 8b 4c 24 40	 mov	 rcx, QWORD PTR builtins$23011[rsp]
  000f4	e8 00 00 00 00	 call	 _PyDict_GetItemId
  000f9	48 89 44 24 20	 mov	 QWORD PTR sorted$23012[rsp], rax

; 3096 :         if (sorted == NULL)

  000fe	48 83 7c 24 20
	00		 cmp	 QWORD PTR sorted$23012[rsp], 0
  00104	75 05		 jne	 SHORT $LN16@object_new

; 3097 :             goto error;

  00106	e9 91 00 00 00	 jmp	 $error$23027
$LN16@object_new:

; 3098 :         sorted_methods = PyObject_CallFunctionObjArgs(sorted,
; 3099 :                                                       abstract_methods,
; 3100 :                                                       NULL);

  0010b	45 33 c0	 xor	 r8d, r8d
  0010e	48 8b 54 24 30	 mov	 rdx, QWORD PTR abstract_methods$23009[rsp]
  00113	48 8b 4c 24 20	 mov	 rcx, QWORD PTR sorted$23012[rsp]
  00118	e8 00 00 00 00	 call	 PyObject_CallFunctionObjArgs
  0011d	48 89 44 24 28	 mov	 QWORD PTR sorted_methods$23013[rsp], rax

; 3101 :         if (sorted_methods == NULL)

  00122	48 83 7c 24 28
	00		 cmp	 QWORD PTR sorted_methods$23013[rsp], 0
  00128	75 02		 jne	 SHORT $LN15@object_new

; 3102 :             goto error;

  0012a	eb 70		 jmp	 SHORT $error$23027
$LN15@object_new:

; 3103 :         comma = _PyUnicode_FromId(&comma_id);

  0012c	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?comma_id@?3??object_new@@9@9
  00131	8b c0		 mov	 eax, eax
  00133	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00139	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00142	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00146	48 8b c8	 mov	 rcx, rax
  00149	e8 00 00 00 00	 call	 _PyUnicode_FromId
  0014e	48 89 44 24 48	 mov	 QWORD PTR comma$23017[rsp], rax

; 3104 :         if (comma == NULL)

  00153	48 83 7c 24 48
	00		 cmp	 QWORD PTR comma$23017[rsp], 0
  00159	75 02		 jne	 SHORT $LN14@object_new

; 3105 :             goto error;

  0015b	eb 3f		 jmp	 SHORT $error$23027
$LN14@object_new:

; 3106 :         joined = PyUnicode_Join(comma, sorted_methods);

  0015d	48 8b 54 24 28	 mov	 rdx, QWORD PTR sorted_methods$23013[rsp]
  00162	48 8b 4c 24 48	 mov	 rcx, QWORD PTR comma$23017[rsp]
  00167	e8 00 00 00 00	 call	 PyUnicode_Join
  0016c	48 89 44 24 38	 mov	 QWORD PTR joined$23015[rsp], rax

; 3107 :         if (joined == NULL)

  00171	48 83 7c 24 38
	00		 cmp	 QWORD PTR joined$23015[rsp], 0
  00177	75 02		 jne	 SHORT $LN13@object_new

; 3108 :             goto error;

  00179	eb 21		 jmp	 SHORT $error$23027
$LN13@object_new:

; 3109 : 
; 3110 :         PyErr_Format(PyExc_TypeError,
; 3111 :                      "Can't instantiate abstract class %s "
; 3112 :                      "with abstract methods %U",
; 3113 :                      type->tp_name,
; 3114 :                      joined);

  0017b	4c 8b 4c 24 38	 mov	 r9, QWORD PTR joined$23015[rsp]
  00180	48 8b 44 24 60	 mov	 rax, QWORD PTR type$[rsp]
  00185	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  00189	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DN@EFMEECOC@Can?8t?5instantiate?5abstract?5class@
  00190	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00197	e8 00 00 00 00	 call	 PyErr_Format
$error$23027:
$LN12@object_new:

; 3115 :     error:
; 3116 :         Py_XDECREF(joined);

  0019c	48 83 7c 24 38
	00		 cmp	 QWORD PTR joined$23015[rsp], 0
  001a2	74 0a		 je	 SHORT $LN9@object_new
  001a4	48 8b 4c 24 38	 mov	 rcx, QWORD PTR joined$23015[rsp]
  001a9	e8 00 00 00 00	 call	 _Py_DecRef
$LN9@object_new:
  001ae	33 c0		 xor	 eax, eax
  001b0	85 c0		 test	 eax, eax
  001b2	75 e8		 jne	 SHORT $LN12@object_new
$LN8@object_new:

; 3117 :         Py_XDECREF(sorted_methods);

  001b4	48 83 7c 24 28
	00		 cmp	 QWORD PTR sorted_methods$23013[rsp], 0
  001ba	74 0a		 je	 SHORT $LN5@object_new
  001bc	48 8b 4c 24 28	 mov	 rcx, QWORD PTR sorted_methods$23013[rsp]
  001c1	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@object_new:
  001c6	33 c0		 xor	 eax, eax
  001c8	85 c0		 test	 eax, eax
  001ca	75 e8		 jne	 SHORT $LN8@object_new
$LN4@object_new:

; 3118 :         Py_XDECREF(abstract_methods);

  001cc	48 83 7c 24 30
	00		 cmp	 QWORD PTR abstract_methods$23009[rsp], 0
  001d2	74 0a		 je	 SHORT $LN1@object_new
  001d4	48 8b 4c 24 30	 mov	 rcx, QWORD PTR abstract_methods$23009[rsp]
  001d9	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@object_new:
  001de	33 c0		 xor	 eax, eax
  001e0	85 c0		 test	 eax, eax
  001e2	75 e8		 jne	 SHORT $LN4@object_new

; 3119 :         return NULL;

  001e4	33 c0		 xor	 eax, eax
  001e6	eb 12		 jmp	 SHORT $LN22@object_new
$LN19@object_new:

; 3120 :     }
; 3121 :     return type->tp_alloc(type, 0);

  001e8	33 d2		 xor	 edx, edx
  001ea	48 8b 4c 24 60	 mov	 rcx, QWORD PTR type$[rsp]
  001ef	48 8b 44 24 60	 mov	 rax, QWORD PTR type$[rsp]
  001f4	ff 90 88 01 00
	00		 call	 QWORD PTR [rax+392]
$LN22@object_new:

; 3122 : }

  001fa	48 83 c4 58	 add	 rsp, 88			; 00000058H
  001fe	c3		 ret	 0
object_new ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$object_dealloc DD imagerel object_dealloc
	DD	imagerel object_dealloc+34
	DD	imagerel $unwind$object_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$object_dealloc DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT object_dealloc
_TEXT	SEGMENT
self$ = 48
object_dealloc PROC					; COMDAT

; 3126 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 3127 :     Py_TYPE(self)->tp_free(self);

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  0000e	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00012	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self$[rsp]
  00017	ff 90 98 01 00
	00		 call	 QWORD PTR [rax+408]

; 3128 : }

  0001d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00021	c3		 ret	 0
object_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BC@JEBMOEBF@?$DM?$CFs?5object?5at?5?$CFp?$DO?$AA@ ; `string'
PUBLIC	??_C@_0BF@GHELCLKE@?$DM?$CFU?4?$CFU?5object?5at?5?$CFp?$DO?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$object_repr DD imagerel object_repr
	DD	imagerel object_repr+292
	DD	imagerel $unwind$object_repr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$object_repr DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0BC@JEBMOEBF@?$DM?$CFs?5object?5at?5?$CFp?$DO?$AA@
CONST	SEGMENT
??_C@_0BC@JEBMOEBF@?$DM?$CFs?5object?5at?5?$CFp?$DO?$AA@ DB '<%s object a'
	DB	't %p>', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@GHELCLKE@?$DM?$CFU?4?$CFU?5object?5at?5?$CFp?$DO?$AA@
CONST	SEGMENT
??_C@_0BF@GHELCLKE@?$DM?$CFU?4?$CFU?5object?5at?5?$CFp?$DO?$AA@ DB '<%U.%'
	DB	'U object at %p>', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT object_repr
_TEXT	SEGMENT
type$ = 32
name$ = 40
rtn$ = 48
mod$ = 56
self$ = 80
object_repr PROC					; COMDAT

; 3132 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 3133 :     PyTypeObject *type;
; 3134 :     PyObject *mod, *name, *rtn;
; 3135 : 
; 3136 :     type = Py_TYPE(self);

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  0000e	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00012	48 89 44 24 20	 mov	 QWORD PTR type$[rsp], rax

; 3137 :     mod = type_module(type, NULL);

  00017	33 d2		 xor	 edx, edx
  00019	48 8b 4c 24 20	 mov	 rcx, QWORD PTR type$[rsp]
  0001e	e8 00 00 00 00	 call	 type_module
  00023	48 89 44 24 38	 mov	 QWORD PTR mod$[rsp], rax

; 3138 :     if (mod == NULL)

  00028	48 83 7c 24 38
	00		 cmp	 QWORD PTR mod$[rsp], 0
  0002e	75 07		 jne	 SHORT $LN14@object_rep

; 3139 :         PyErr_Clear();

  00030	e8 00 00 00 00	 call	 PyErr_Clear
  00035	eb 2b		 jmp	 SHORT $LN13@object_rep
$LN14@object_rep:

; 3140 :     else if (!PyUnicode_Check(mod)) {

  00037	48 8b 44 24 38	 mov	 rax, QWORD PTR mod$[rsp]
  0003c	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00040	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00046	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0004b	85 c0		 test	 eax, eax
  0004d	75 13		 jne	 SHORT $LN12@object_rep

; 3141 :         Py_DECREF(mod);

  0004f	48 8b 4c 24 38	 mov	 rcx, QWORD PTR mod$[rsp]
  00054	e8 00 00 00 00	 call	 _Py_DecRef

; 3142 :         mod = NULL;

  00059	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR mod$[rsp], 0
$LN12@object_rep:
$LN13@object_rep:

; 3143 :     }
; 3144 :     name = type_qualname(type, NULL);

  00062	33 d2		 xor	 edx, edx
  00064	48 8b 4c 24 20	 mov	 rcx, QWORD PTR type$[rsp]
  00069	e8 00 00 00 00	 call	 type_qualname
  0006e	48 89 44 24 28	 mov	 QWORD PTR name$[rsp], rax

; 3145 :     if (name == NULL) {

  00073	48 83 7c 24 28
	00		 cmp	 QWORD PTR name$[rsp], 0
  00079	75 1f		 jne	 SHORT $LN11@object_rep
$LN10@object_rep:

; 3146 :         Py_XDECREF(mod);

  0007b	48 83 7c 24 38
	00		 cmp	 QWORD PTR mod$[rsp], 0
  00081	74 0a		 je	 SHORT $LN7@object_rep
  00083	48 8b 4c 24 38	 mov	 rcx, QWORD PTR mod$[rsp]
  00088	e8 00 00 00 00	 call	 _Py_DecRef
$LN7@object_rep:
  0008d	33 c0		 xor	 eax, eax
  0008f	85 c0		 test	 eax, eax
  00091	75 e8		 jne	 SHORT $LN10@object_rep

; 3147 :         return NULL;

  00093	33 c0		 xor	 eax, eax
  00095	e9 85 00 00 00	 jmp	 $LN15@object_rep
$LN11@object_rep:

; 3148 :     }
; 3149 :     if (mod != NULL && PyUnicode_CompareWithASCIIString(mod, "builtins"))

  0009a	48 83 7c 24 38
	00		 cmp	 QWORD PTR mod$[rsp], 0
  000a0	74 37		 je	 SHORT $LN6@object_rep
  000a2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08OCOMCJAJ@builtins?$AA@
  000a9	48 8b 4c 24 38	 mov	 rcx, QWORD PTR mod$[rsp]
  000ae	e8 00 00 00 00	 call	 PyUnicode_CompareWithASCIIString
  000b3	85 c0		 test	 eax, eax
  000b5	74 22		 je	 SHORT $LN6@object_rep

; 3150 :         rtn = PyUnicode_FromFormat("<%U.%U object at %p>", mod, name, self);

  000b7	4c 8b 4c 24 50	 mov	 r9, QWORD PTR self$[rsp]
  000bc	4c 8b 44 24 28	 mov	 r8, QWORD PTR name$[rsp]
  000c1	48 8b 54 24 38	 mov	 rdx, QWORD PTR mod$[rsp]
  000c6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@GHELCLKE@?$DM?$CFU?4?$CFU?5object?5at?5?$CFp?$DO?$AA@
  000cd	e8 00 00 00 00	 call	 PyUnicode_FromFormat
  000d2	48 89 44 24 30	 mov	 QWORD PTR rtn$[rsp], rax

; 3151 :     else

  000d7	eb 1f		 jmp	 SHORT $LN5@object_rep
$LN6@object_rep:

; 3152 :         rtn = PyUnicode_FromFormat("<%s object at %p>",
; 3153 :                                   type->tp_name, self);

  000d9	4c 8b 44 24 50	 mov	 r8, QWORD PTR self$[rsp]
  000de	48 8b 44 24 20	 mov	 rax, QWORD PTR type$[rsp]
  000e3	48 8b 50 70	 mov	 rdx, QWORD PTR [rax+112]
  000e7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@JEBMOEBF@?$DM?$CFs?5object?5at?5?$CFp?$DO?$AA@
  000ee	e8 00 00 00 00	 call	 PyUnicode_FromFormat
  000f3	48 89 44 24 30	 mov	 QWORD PTR rtn$[rsp], rax
$LN5@object_rep:
$LN4@object_rep:

; 3154 :     Py_XDECREF(mod);

  000f8	48 83 7c 24 38
	00		 cmp	 QWORD PTR mod$[rsp], 0
  000fe	74 0a		 je	 SHORT $LN1@object_rep
  00100	48 8b 4c 24 38	 mov	 rcx, QWORD PTR mod$[rsp]
  00105	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@object_rep:
  0010a	33 c0		 xor	 eax, eax
  0010c	85 c0		 test	 eax, eax
  0010e	75 e8		 jne	 SHORT $LN4@object_rep

; 3155 :     Py_DECREF(name);

  00110	48 8b 4c 24 28	 mov	 rcx, QWORD PTR name$[rsp]
  00115	e8 00 00 00 00	 call	 _Py_DecRef

; 3156 :     return rtn;

  0011a	48 8b 44 24 30	 mov	 rax, QWORD PTR rtn$[rsp]
$LN15@object_rep:

; 3157 : }

  0011f	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00123	c3		 ret	 0
object_repr ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$object_str DD imagerel object_str
	DD	imagerel object_str+64
	DD	imagerel $unwind$object_str
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$object_str DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT object_str
_TEXT	SEGMENT
f$ = 32
self$ = 64
object_str PROC						; COMDAT

; 3161 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 3162 :     unaryfunc f;
; 3163 : 
; 3164 :     f = Py_TYPE(self)->tp_repr;

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0000e	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00012	48 8b 80 b0 00
	00 00		 mov	 rax, QWORD PTR [rax+176]
  00019	48 89 44 24 20	 mov	 QWORD PTR f$[rsp], rax

; 3165 :     if (f == NULL)

  0001e	48 83 7c 24 20
	00		 cmp	 QWORD PTR f$[rsp], 0
  00024	75 0c		 jne	 SHORT $LN1@object_str

; 3166 :         f = object_repr;

  00026	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:object_repr
  0002d	48 89 44 24 20	 mov	 QWORD PTR f$[rsp], rax
$LN1@object_str:

; 3167 :     return f(self);

  00032	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  00037	ff 54 24 20	 call	 QWORD PTR f$[rsp]

; 3168 : }

  0003b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003f	c3		 ret	 0
object_str ENDP
_TEXT	ENDS
EXTRN	PyObject_RichCompare:PROC
EXTRN	_Py_NotImplementedStruct:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$object_richcompare DD imagerel object_richcompare
	DD	imagerel object_richcompare+276
	DD	imagerel $unwind$object_richcompare
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$object_richcompare DD 011301H
	DD	08213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT object_richcompare
_TEXT	SEGMENT
res$ = 32
ok$23124 = 40
tv64 = 44
tv66 = 48
self$ = 80
other$ = 88
op$ = 96
object_richcompare PROC					; COMDAT

; 3172 : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 3173 :     PyObject *res;
; 3174 : 
; 3175 :     switch (op) {

  00013	8b 44 24 60	 mov	 eax, DWORD PTR op$[rsp]
  00017	89 44 24 2c	 mov	 DWORD PTR tv64[rsp], eax
  0001b	83 7c 24 2c 02	 cmp	 DWORD PTR tv64[rsp], 2
  00020	74 0c		 je	 SHORT $LN8@object_ric
  00022	83 7c 24 2c 03	 cmp	 DWORD PTR tv64[rsp], 3
  00027	74 44		 je	 SHORT $LN7@object_ric
  00029	e9 c6 00 00 00	 jmp	 $LN1@object_ric
$LN8@object_ric:

; 3176 : 
; 3177 :     case Py_EQ:
; 3178 :         /* Return NotImplemented instead of False, so if two
; 3179 :            objects are compared, both get a chance at the
; 3180 :            comparison.  See issue #1393. */
; 3181 :         res = (self == other) ? Py_True : Py_NotImplemented;

  0002e	48 8b 44 24 58	 mov	 rax, QWORD PTR other$[rsp]
  00033	48 39 44 24 50	 cmp	 QWORD PTR self$[rsp], rax
  00038	75 0e		 jne	 SHORT $LN13@object_ric
  0003a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  00041	48 89 44 24 30	 mov	 QWORD PTR tv66[rsp], rax
  00046	eb 0c		 jmp	 SHORT $LN14@object_ric
$LN13@object_ric:
  00048	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NotImplementedStruct
  0004f	48 89 44 24 30	 mov	 QWORD PTR tv66[rsp], rax
$LN14@object_ric:
  00054	48 8b 44 24 30	 mov	 rax, QWORD PTR tv66[rsp]
  00059	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax

; 3182 :         Py_INCREF(res);

  0005e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR res$[rsp]
  00063	e8 00 00 00 00	 call	 _Py_IncRef

; 3183 :         break;

  00068	e9 9d 00 00 00	 jmp	 $LN9@object_ric
$LN7@object_ric:

; 3184 : 
; 3185 :     case Py_NE:
; 3186 :         /* By default, != returns the opposite of ==,
; 3187 :            unless the latter returns NotImplemented. */
; 3188 :         res = PyObject_RichCompare(self, other, Py_EQ);

  0006d	41 b8 02 00 00
	00		 mov	 r8d, 2
  00073	48 8b 54 24 58	 mov	 rdx, QWORD PTR other$[rsp]
  00078	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  0007d	e8 00 00 00 00	 call	 PyObject_RichCompare
  00082	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax

; 3189 :         if (res != NULL && res != Py_NotImplemented) {

  00087	48 83 7c 24 20
	00		 cmp	 QWORD PTR res$[rsp], 0
  0008d	74 63		 je	 SHORT $LN6@object_ric
  0008f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NotImplementedStruct
  00096	48 39 44 24 20	 cmp	 QWORD PTR res$[rsp], rax
  0009b	74 55		 je	 SHORT $LN6@object_ric

; 3190 :             int ok = PyObject_IsTrue(res);

  0009d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR res$[rsp]
  000a2	e8 00 00 00 00	 call	 PyObject_IsTrue
  000a7	89 44 24 28	 mov	 DWORD PTR ok$23124[rsp], eax

; 3191 :             Py_DECREF(res);

  000ab	48 8b 4c 24 20	 mov	 rcx, QWORD PTR res$[rsp]
  000b0	e8 00 00 00 00	 call	 _Py_DecRef

; 3192 :             if (ok < 0)

  000b5	83 7c 24 28 00	 cmp	 DWORD PTR ok$23124[rsp], 0
  000ba	7d 0b		 jge	 SHORT $LN5@object_ric

; 3193 :                 res = NULL;

  000bc	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR res$[rsp], 0

; 3194 :             else {

  000c5	eb 2b		 jmp	 SHORT $LN4@object_ric
$LN5@object_ric:

; 3195 :                 if (ok)

  000c7	83 7c 24 28 00	 cmp	 DWORD PTR ok$23124[rsp], 0
  000cc	74 0e		 je	 SHORT $LN3@object_ric

; 3196 :                     res = Py_False;

  000ce	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct
  000d5	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax

; 3197 :                 else

  000da	eb 0c		 jmp	 SHORT $LN2@object_ric
$LN3@object_ric:

; 3198 :                     res = Py_True;

  000dc	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  000e3	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax
$LN2@object_ric:

; 3199 :                 Py_INCREF(res);

  000e8	48 8b 4c 24 20	 mov	 rcx, QWORD PTR res$[rsp]
  000ed	e8 00 00 00 00	 call	 _Py_IncRef
$LN4@object_ric:
$LN6@object_ric:

; 3200 :             }
; 3201 :         }
; 3202 :         break;

  000f2	eb 16		 jmp	 SHORT $LN9@object_ric
$LN1@object_ric:

; 3203 : 
; 3204 :     default:
; 3205 :         res = Py_NotImplemented;

  000f4	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NotImplementedStruct
  000fb	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax

; 3206 :         Py_INCREF(res);

  00100	48 8b 4c 24 20	 mov	 rcx, QWORD PTR res$[rsp]
  00105	e8 00 00 00 00	 call	 _Py_IncRef
$LN9@object_ric:

; 3207 :         break;
; 3208 :     }
; 3209 : 
; 3210 :     return res;

  0010a	48 8b 44 24 20	 mov	 rax, QWORD PTR res$[rsp]

; 3211 : }

  0010f	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00113	c3		 ret	 0
object_richcompare ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$object_get_class DD imagerel object_get_class
	DD	imagerel object_get_class+42
	DD	imagerel $unwind$object_get_class
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$object_get_class DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT object_get_class
_TEXT	SEGMENT
self$ = 48
closure$ = 56
object_get_class PROC					; COMDAT

; 3215 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 3216 :     Py_INCREF(Py_TYPE(self));

  0000e	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00013	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  00017	e8 00 00 00 00	 call	 _Py_IncRef

; 3217 :     return (PyObject *)(Py_TYPE(self));

  0001c	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00021	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]

; 3218 : }

  00025	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00029	c3		 ret	 0
object_get_class ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DE@OBFNLFFK@?$CFs?5assignment?3?5?8?$CFs?8?5object?5layou@ ; `string'
PUBLIC	??_C@_0DC@KBBFLPNI@?$CFs?5assignment?3?5?8?$CFs?8?5deallocator?5@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$compatible_for_assignment DD imagerel compatible_for_assignment
	DD	imagerel compatible_for_assignment+353
	DD	imagerel $unwind$compatible_for_assignment
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$compatible_for_assignment DD 011301H
	DD	08213H
xdata	ENDS
;	COMDAT ??_C@_0DE@OBFNLFFK@?$CFs?5assignment?3?5?8?$CFs?8?5object?5layou@
CONST	SEGMENT
??_C@_0DE@OBFNLFFK@?$CFs?5assignment?3?5?8?$CFs?8?5object?5layou@ DB '%s '
	DB	'assignment: ''%s'' object layout differs from ''%s''', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@KBBFLPNI@?$CFs?5assignment?3?5?8?$CFs?8?5deallocator?5@
CONST	SEGMENT
??_C@_0DC@KBBFLPNI@?$CFs?5assignment?3?5?8?$CFs?8?5deallocator?5@ DB '%s '
	DB	'assignment: ''%s'' deallocator differs from ''%s''', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT compatible_for_assignment
_TEXT	SEGMENT
oldbase$ = 48
newbase$ = 56
oldto$ = 80
newto$ = 88
attr$ = 96
compatible_for_assignment PROC				; COMDAT

; 3261 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 3262 :     PyTypeObject *newbase, *oldbase;
; 3263 : 
; 3264 :     if (newto->tp_dealloc != oldto->tp_dealloc ||
; 3265 :         newto->tp_free != oldto->tp_free)

  00013	48 8b 44 24 58	 mov	 rax, QWORD PTR newto$[rsp]
  00018	48 8b 4c 24 50	 mov	 rcx, QWORD PTR oldto$[rsp]
  0001d	48 8b 89 88 00
	00 00		 mov	 rcx, QWORD PTR [rcx+136]
  00024	48 39 88 88 00
	00 00		 cmp	 QWORD PTR [rax+136], rcx
  0002b	75 1a		 jne	 SHORT $LN7@compatible
  0002d	48 8b 44 24 58	 mov	 rax, QWORD PTR newto$[rsp]
  00032	48 8b 4c 24 50	 mov	 rcx, QWORD PTR oldto$[rsp]
  00037	48 8b 89 98 01
	00 00		 mov	 rcx, QWORD PTR [rcx+408]
  0003e	48 39 88 98 01
	00 00		 cmp	 QWORD PTR [rax+408], rcx
  00045	74 36		 je	 SHORT $LN8@compatible
$LN7@compatible:

; 3266 :     {
; 3267 :         PyErr_Format(PyExc_TypeError,
; 3268 :                      "%s assignment: "
; 3269 :                      "'%s' deallocator differs from '%s'",
; 3270 :                      attr,
; 3271 :                      newto->tp_name,
; 3272 :                      oldto->tp_name);

  00047	48 8b 44 24 50	 mov	 rax, QWORD PTR oldto$[rsp]
  0004c	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00050	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00055	48 8b 44 24 58	 mov	 rax, QWORD PTR newto$[rsp]
  0005a	4c 8b 48 70	 mov	 r9, QWORD PTR [rax+112]
  0005e	4c 8b 44 24 60	 mov	 r8, QWORD PTR attr$[rsp]
  00063	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DC@KBBFLPNI@?$CFs?5assignment?3?5?8?$CFs?8?5deallocator?5@
  0006a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00071	e8 00 00 00 00	 call	 PyErr_Format

; 3273 :         return 0;

  00076	33 c0		 xor	 eax, eax
  00078	e9 df 00 00 00	 jmp	 $LN9@compatible
$LN8@compatible:

; 3274 :     }
; 3275 :     newbase = newto;

  0007d	48 8b 44 24 58	 mov	 rax, QWORD PTR newto$[rsp]
  00082	48 89 44 24 38	 mov	 QWORD PTR newbase$[rsp], rax

; 3276 :     oldbase = oldto;

  00087	48 8b 44 24 50	 mov	 rax, QWORD PTR oldto$[rsp]
  0008c	48 89 44 24 30	 mov	 QWORD PTR oldbase$[rsp], rax
$LN6@compatible:

; 3277 :     while (equiv_structs(newbase, newbase->tp_base))

  00091	48 8b 44 24 38	 mov	 rax, QWORD PTR newbase$[rsp]
  00096	48 8b 90 58 01
	00 00		 mov	 rdx, QWORD PTR [rax+344]
  0009d	48 8b 4c 24 38	 mov	 rcx, QWORD PTR newbase$[rsp]
  000a2	e8 00 00 00 00	 call	 equiv_structs
  000a7	85 c0		 test	 eax, eax
  000a9	74 13		 je	 SHORT $LN5@compatible

; 3278 :         newbase = newbase->tp_base;

  000ab	48 8b 44 24 38	 mov	 rax, QWORD PTR newbase$[rsp]
  000b0	48 8b 80 58 01
	00 00		 mov	 rax, QWORD PTR [rax+344]
  000b7	48 89 44 24 38	 mov	 QWORD PTR newbase$[rsp], rax
  000bc	eb d3		 jmp	 SHORT $LN6@compatible
$LN5@compatible:
$LN4@compatible:

; 3279 :     while (equiv_structs(oldbase, oldbase->tp_base))

  000be	48 8b 44 24 30	 mov	 rax, QWORD PTR oldbase$[rsp]
  000c3	48 8b 90 58 01
	00 00		 mov	 rdx, QWORD PTR [rax+344]
  000ca	48 8b 4c 24 30	 mov	 rcx, QWORD PTR oldbase$[rsp]
  000cf	e8 00 00 00 00	 call	 equiv_structs
  000d4	85 c0		 test	 eax, eax
  000d6	74 13		 je	 SHORT $LN3@compatible

; 3280 :         oldbase = oldbase->tp_base;

  000d8	48 8b 44 24 30	 mov	 rax, QWORD PTR oldbase$[rsp]
  000dd	48 8b 80 58 01
	00 00		 mov	 rax, QWORD PTR [rax+344]
  000e4	48 89 44 24 30	 mov	 QWORD PTR oldbase$[rsp], rax
  000e9	eb d3		 jmp	 SHORT $LN4@compatible
$LN3@compatible:

; 3281 :     if (newbase != oldbase &&
; 3282 :         (newbase->tp_base != oldbase->tp_base ||
; 3283 :          !same_slots_added(newbase, oldbase))) {

  000eb	48 8b 44 24 30	 mov	 rax, QWORD PTR oldbase$[rsp]
  000f0	48 39 44 24 38	 cmp	 QWORD PTR newbase$[rsp], rax
  000f5	74 60		 je	 SHORT $LN2@compatible
  000f7	48 8b 44 24 38	 mov	 rax, QWORD PTR newbase$[rsp]
  000fc	48 8b 4c 24 30	 mov	 rcx, QWORD PTR oldbase$[rsp]
  00101	48 8b 89 58 01
	00 00		 mov	 rcx, QWORD PTR [rcx+344]
  00108	48 39 88 58 01
	00 00		 cmp	 QWORD PTR [rax+344], rcx
  0010f	75 13		 jne	 SHORT $LN1@compatible
  00111	48 8b 54 24 30	 mov	 rdx, QWORD PTR oldbase$[rsp]
  00116	48 8b 4c 24 38	 mov	 rcx, QWORD PTR newbase$[rsp]
  0011b	e8 00 00 00 00	 call	 same_slots_added
  00120	85 c0		 test	 eax, eax
  00122	75 33		 jne	 SHORT $LN2@compatible
$LN1@compatible:

; 3284 :         PyErr_Format(PyExc_TypeError,
; 3285 :                      "%s assignment: "
; 3286 :                      "'%s' object layout differs from '%s'",
; 3287 :                      attr,
; 3288 :                      newto->tp_name,
; 3289 :                      oldto->tp_name);

  00124	48 8b 44 24 50	 mov	 rax, QWORD PTR oldto$[rsp]
  00129	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  0012d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00132	48 8b 44 24 58	 mov	 rax, QWORD PTR newto$[rsp]
  00137	4c 8b 48 70	 mov	 r9, QWORD PTR [rax+112]
  0013b	4c 8b 44 24 60	 mov	 r8, QWORD PTR attr$[rsp]
  00140	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DE@OBFNLFFK@?$CFs?5assignment?3?5?8?$CFs?8?5object?5layou@
  00147	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0014e	e8 00 00 00 00	 call	 PyErr_Format

; 3290 :         return 0;

  00153	33 c0		 xor	 eax, eax
  00155	eb 05		 jmp	 SHORT $LN9@compatible
$LN2@compatible:

; 3291 :     }
; 3292 : 
; 3293 :     return 1;

  00157	b8 01 00 00 00	 mov	 eax, 1
$LN9@compatible:

; 3294 : }

  0015c	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00160	c3		 ret	 0
compatible_for_assignment ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$equiv_structs DD imagerel equiv_structs
	DD	imagerel equiv_structs+213
	DD	imagerel $unwind$equiv_structs
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$equiv_structs DD 010e01H
	DD	0220eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT equiv_structs
_TEXT	SEGMENT
tv84 = 0
a$ = 32
b$ = 40
equiv_structs PROC					; COMDAT

; 3222 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 18	 sub	 rsp, 24

; 3223 :     return a == b ||
; 3224 :            (a != NULL &&
; 3225 :         b != NULL &&
; 3226 :         a->tp_basicsize == b->tp_basicsize &&
; 3227 :         a->tp_itemsize == b->tp_itemsize &&
; 3228 :         a->tp_dictoffset == b->tp_dictoffset &&
; 3229 :         a->tp_weaklistoffset == b->tp_weaklistoffset &&
; 3230 :         ((a->tp_flags & Py_TPFLAGS_HAVE_GC) ==
; 3231 :          (b->tp_flags & Py_TPFLAGS_HAVE_GC)));

  0000e	48 8b 44 24 28	 mov	 rax, QWORD PTR b$[rsp]
  00013	48 39 44 24 20	 cmp	 QWORD PTR a$[rsp], rax
  00018	0f 84 a8 00 00
	00		 je	 $LN4@equiv_stru
  0001e	48 83 7c 24 20
	00		 cmp	 QWORD PTR a$[rsp], 0
  00024	0f 84 93 00 00
	00		 je	 $LN3@equiv_stru
  0002a	48 83 7c 24 28
	00		 cmp	 QWORD PTR b$[rsp], 0
  00030	0f 84 87 00 00
	00		 je	 $LN3@equiv_stru
  00036	48 8b 44 24 20	 mov	 rax, QWORD PTR a$[rsp]
  0003b	48 8b 4c 24 28	 mov	 rcx, QWORD PTR b$[rsp]
  00040	48 8b 49 78	 mov	 rcx, QWORD PTR [rcx+120]
  00044	48 39 48 78	 cmp	 QWORD PTR [rax+120], rcx
  00048	75 73		 jne	 SHORT $LN3@equiv_stru
  0004a	48 8b 44 24 20	 mov	 rax, QWORD PTR a$[rsp]
  0004f	48 8b 4c 24 28	 mov	 rcx, QWORD PTR b$[rsp]
  00054	48 8b 89 80 00
	00 00		 mov	 rcx, QWORD PTR [rcx+128]
  0005b	48 39 88 80 00
	00 00		 cmp	 QWORD PTR [rax+128], rcx
  00062	75 59		 jne	 SHORT $LN3@equiv_stru
  00064	48 8b 44 24 20	 mov	 rax, QWORD PTR a$[rsp]
  00069	48 8b 4c 24 28	 mov	 rcx, QWORD PTR b$[rsp]
  0006e	48 8b 89 78 01
	00 00		 mov	 rcx, QWORD PTR [rcx+376]
  00075	48 39 88 78 01
	00 00		 cmp	 QWORD PTR [rax+376], rcx
  0007c	75 3f		 jne	 SHORT $LN3@equiv_stru
  0007e	48 8b 44 24 20	 mov	 rax, QWORD PTR a$[rsp]
  00083	48 8b 4c 24 28	 mov	 rcx, QWORD PTR b$[rsp]
  00088	48 8b 89 28 01
	00 00		 mov	 rcx, QWORD PTR [rcx+296]
  0008f	48 39 88 28 01
	00 00		 cmp	 QWORD PTR [rax+296], rcx
  00096	75 25		 jne	 SHORT $LN3@equiv_stru
  00098	48 8b 44 24 20	 mov	 rax, QWORD PTR a$[rsp]
  0009d	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000a3	25 00 40 00 00	 and	 eax, 16384		; 00004000H
  000a8	48 8b 4c 24 28	 mov	 rcx, QWORD PTR b$[rsp]
  000ad	8b 89 00 01 00
	00		 mov	 ecx, DWORD PTR [rcx+256]
  000b3	81 e1 00 40 00
	00		 and	 ecx, 16384		; 00004000H
  000b9	3b c1		 cmp	 eax, ecx
  000bb	74 09		 je	 SHORT $LN4@equiv_stru
$LN3@equiv_stru:
  000bd	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv84[rsp], 0
  000c4	eb 07		 jmp	 SHORT $LN5@equiv_stru
$LN4@equiv_stru:
  000c6	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv84[rsp], 1
$LN5@equiv_stru:
  000cd	8b 04 24	 mov	 eax, DWORD PTR tv84[rsp]

; 3232 : }

  000d0	48 83 c4 18	 add	 rsp, 24
  000d4	c3		 ret	 0
equiv_structs ENDP
_TEXT	ENDS
PUBLIC	??_C@_1CG@IBGHFFNO@?$AAb?$AAa?$AAs?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAb?$AA?9?$AA?$DO?$AAt?$AAp?$AA_?$AAb?$AAa?$AAs?$AAe?$AA?$AA@ ; `string'
EXTRN	PyObject_RichCompareBool:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$same_slots_added DD imagerel same_slots_added
	DD	imagerel same_slots_added+358
	DD	imagerel $unwind$same_slots_added
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$same_slots_added DD 010e01H
	DD	0a20eH
xdata	ENDS
;	COMDAT ??_C@_1CG@IBGHFFNO@?$AAb?$AAa?$AAs?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAb?$AA?9?$AA?$DO?$AAt?$AAp?$AA_?$AAb?$AAa?$AAs?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1CG@IBGHFFNO@?$AAb?$AAa?$AAs?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAb?$AA?9?$AA?$DO?$AAt?$AAp?$AA_?$AAb?$AAa?$AAs?$AAe?$AA?$AA@ DB 'b'
	DB	00H, 'a', 00H, 's', 00H, 'e', 00H, ' ', 00H, '=', 00H, '=', 00H
	DB	' ', 00H, 'b', 00H, '-', 00H, '>', 00H, 't', 00H, 'p', 00H, '_'
	DB	00H, 'b', 00H, 'a', 00H, 's', 00H, 'e', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT same_slots_added
_TEXT	SEGMENT
base$ = 32
slots_b$ = 40
size$ = 48
slots_a$ = 56
tv130 = 64
a$ = 96
b$ = 104
same_slots_added PROC					; COMDAT

; 3236 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 3237 :     PyTypeObject *base = a->tp_base;

  0000e	48 8b 44 24 60	 mov	 rax, QWORD PTR a$[rsp]
  00013	48 8b 80 58 01
	00 00		 mov	 rax, QWORD PTR [rax+344]
  0001a	48 89 44 24 20	 mov	 QWORD PTR base$[rsp], rax

; 3238 :     Py_ssize_t size;
; 3239 :     PyObject *slots_a, *slots_b;
; 3240 : 
; 3241 :     assert(base == b->tp_base);

  0001f	48 8b 44 24 68	 mov	 rax, QWORD PTR b$[rsp]
  00024	48 8b 80 58 01
	00 00		 mov	 rax, QWORD PTR [rax+344]
  0002b	48 39 44 24 20	 cmp	 QWORD PTR base$[rsp], rax
  00030	74 1c		 je	 SHORT $LN7@same_slots
  00032	41 b8 a9 0c 00
	00		 mov	 r8d, 3241		; 00000ca9H
  00038	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@GJLLIOPA@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAt?$AAy?$AAp?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  0003f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@IBGHFFNO@?$AAb?$AAa?$AAs?$AAe?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAb?$AA?9?$AA?$DO?$AAt?$AAp?$AA_?$AAb?$AAa?$AAs?$AAe?$AA?$AA@
  00046	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0004c	33 c0		 xor	 eax, eax
$LN7@same_slots:

; 3242 :     size = base->tp_basicsize;

  0004e	48 8b 44 24 20	 mov	 rax, QWORD PTR base$[rsp]
  00053	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  00057	48 89 44 24 30	 mov	 QWORD PTR size$[rsp], rax

; 3243 :     if (a->tp_dictoffset == size && b->tp_dictoffset == size)

  0005c	48 8b 44 24 60	 mov	 rax, QWORD PTR a$[rsp]
  00061	48 8b 4c 24 30	 mov	 rcx, QWORD PTR size$[rsp]
  00066	48 39 88 78 01
	00 00		 cmp	 QWORD PTR [rax+376], rcx
  0006d	75 21		 jne	 SHORT $LN4@same_slots
  0006f	48 8b 44 24 68	 mov	 rax, QWORD PTR b$[rsp]
  00074	48 8b 4c 24 30	 mov	 rcx, QWORD PTR size$[rsp]
  00079	48 39 88 78 01
	00 00		 cmp	 QWORD PTR [rax+376], rcx
  00080	75 0e		 jne	 SHORT $LN4@same_slots

; 3244 :         size += sizeof(PyObject *);

  00082	48 8b 44 24 30	 mov	 rax, QWORD PTR size$[rsp]
  00087	48 83 c0 08	 add	 rax, 8
  0008b	48 89 44 24 30	 mov	 QWORD PTR size$[rsp], rax
$LN4@same_slots:

; 3245 :     if (a->tp_weaklistoffset == size && b->tp_weaklistoffset == size)

  00090	48 8b 44 24 60	 mov	 rax, QWORD PTR a$[rsp]
  00095	48 8b 4c 24 30	 mov	 rcx, QWORD PTR size$[rsp]
  0009a	48 39 88 28 01
	00 00		 cmp	 QWORD PTR [rax+296], rcx
  000a1	75 21		 jne	 SHORT $LN3@same_slots
  000a3	48 8b 44 24 68	 mov	 rax, QWORD PTR b$[rsp]
  000a8	48 8b 4c 24 30	 mov	 rcx, QWORD PTR size$[rsp]
  000ad	48 39 88 28 01
	00 00		 cmp	 QWORD PTR [rax+296], rcx
  000b4	75 0e		 jne	 SHORT $LN3@same_slots

; 3246 :         size += sizeof(PyObject *);

  000b6	48 8b 44 24 30	 mov	 rax, QWORD PTR size$[rsp]
  000bb	48 83 c0 08	 add	 rax, 8
  000bf	48 89 44 24 30	 mov	 QWORD PTR size$[rsp], rax
$LN3@same_slots:

; 3247 : 
; 3248 :     /* Check slots compliance */
; 3249 :     slots_a = ((PyHeapTypeObject *)a)->ht_slots;

  000c4	48 8b 44 24 60	 mov	 rax, QWORD PTR a$[rsp]
  000c9	48 8b 80 70 03
	00 00		 mov	 rax, QWORD PTR [rax+880]
  000d0	48 89 44 24 38	 mov	 QWORD PTR slots_a$[rsp], rax

; 3250 :     slots_b = ((PyHeapTypeObject *)b)->ht_slots;

  000d5	48 8b 44 24 68	 mov	 rax, QWORD PTR b$[rsp]
  000da	48 8b 80 70 03
	00 00		 mov	 rax, QWORD PTR [rax+880]
  000e1	48 89 44 24 28	 mov	 QWORD PTR slots_b$[rsp], rax

; 3251 :     if (slots_a && slots_b) {

  000e6	48 83 7c 24 38
	00		 cmp	 QWORD PTR slots_a$[rsp], 0
  000ec	74 3d		 je	 SHORT $LN2@same_slots
  000ee	48 83 7c 24 28
	00		 cmp	 QWORD PTR slots_b$[rsp], 0
  000f4	74 35		 je	 SHORT $LN2@same_slots

; 3252 :         if (PyObject_RichCompareBool(slots_a, slots_b, Py_EQ) != 1)

  000f6	41 b8 02 00 00
	00		 mov	 r8d, 2
  000fc	48 8b 54 24 28	 mov	 rdx, QWORD PTR slots_b$[rsp]
  00101	48 8b 4c 24 38	 mov	 rcx, QWORD PTR slots_a$[rsp]
  00106	e8 00 00 00 00	 call	 PyObject_RichCompareBool
  0010b	83 f8 01	 cmp	 eax, 1
  0010e	74 04		 je	 SHORT $LN1@same_slots

; 3253 :             return 0;

  00110	33 c0		 xor	 eax, eax
  00112	eb 4d		 jmp	 SHORT $LN5@same_slots
$LN1@same_slots:

; 3254 :         size += sizeof(PyObject *) * PyTuple_GET_SIZE(slots_a);

  00114	48 8b 44 24 38	 mov	 rax, QWORD PTR slots_a$[rsp]
  00119	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0011d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR size$[rsp]
  00122	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00126	48 89 44 24 30	 mov	 QWORD PTR size$[rsp], rax
$LN2@same_slots:

; 3255 :     }
; 3256 :     return size == a->tp_basicsize && size == b->tp_basicsize;

  0012b	48 8b 44 24 60	 mov	 rax, QWORD PTR a$[rsp]
  00130	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  00134	48 39 44 24 30	 cmp	 QWORD PTR size$[rsp], rax
  00139	75 1a		 jne	 SHORT $LN8@same_slots
  0013b	48 8b 44 24 68	 mov	 rax, QWORD PTR b$[rsp]
  00140	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  00144	48 39 44 24 30	 cmp	 QWORD PTR size$[rsp], rax
  00149	75 0a		 jne	 SHORT $LN8@same_slots
  0014b	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv130[rsp], 1
  00153	eb 08		 jmp	 SHORT $LN9@same_slots
$LN8@same_slots:
  00155	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv130[rsp], 0
$LN9@same_slots:
  0015d	8b 44 24 40	 mov	 eax, DWORD PTR tv130[rsp]
$LN5@same_slots:

; 3257 : }

  00161	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00165	c3		 ret	 0
same_slots_added ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CK@PPLOJBJJ@__class__?5assignment?3?5only?5for?5h@ ; `string'
PUBLIC	??_C@_0DC@BPCOACP@__class__?5must?5be?5set?5to?5a?5class@ ; `string'
PUBLIC	??_C@_0CB@KKCPDMPJ@can?8t?5delete?5__class__?5attribute@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$object_set_class DD imagerel object_set_class
	DD	imagerel object_set_class+288
	DD	imagerel $unwind$object_set_class
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$object_set_class DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT ??_C@_0CK@PPLOJBJJ@__class__?5assignment?3?5only?5for?5h@
CONST	SEGMENT
??_C@_0CK@PPLOJBJJ@__class__?5assignment?3?5only?5for?5h@ DB '__class__ a'
	DB	'ssignment: only for heap types', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@BPCOACP@__class__?5must?5be?5set?5to?5a?5class@
CONST	SEGMENT
??_C@_0DC@BPCOACP@__class__?5must?5be?5set?5to?5a?5class@ DB '__class__ m'
	DB	'ust be set to a class, not ''%s'' object', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@KKCPDMPJ@can?8t?5delete?5__class__?5attribute@
CONST	SEGMENT
??_C@_0CB@KKCPDMPJ@can?8t?5delete?5__class__?5attribute@ DB 'can''t delet'
	DB	'e __class__ attribute', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT object_set_class
_TEXT	SEGMENT
newto$ = 32
oldto$ = 40
self$ = 64
value$ = 72
closure$ = 80
object_set_class PROC					; COMDAT

; 3298 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 3299 :     PyTypeObject *oldto = Py_TYPE(self);

  00013	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00018	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0001c	48 89 44 24 28	 mov	 QWORD PTR oldto$[rsp], rax

; 3300 :     PyTypeObject *newto;
; 3301 : 
; 3302 :     if (value == NULL) {

  00021	48 83 7c 24 48
	00		 cmp	 QWORD PTR value$[rsp], 0
  00027	75 1d		 jne	 SHORT $LN6@object_set

; 3303 :         PyErr_SetString(PyExc_TypeError,
; 3304 :                         "can't delete __class__ attribute");

  00029	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CB@KKCPDMPJ@can?8t?5delete?5__class__?5attribute@
  00030	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00037	e8 00 00 00 00	 call	 PyErr_SetString

; 3305 :         return -1;

  0003c	b8 ff ff ff ff	 mov	 eax, -1
  00041	e9 d5 00 00 00	 jmp	 $LN7@object_set
$LN6@object_set:

; 3306 :     }
; 3307 :     if (!PyType_Check(value)) {

  00046	48 8b 44 24 48	 mov	 rax, QWORD PTR value$[rsp]
  0004b	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0004f	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00055	25 00 00 00 80	 and	 eax, -2147483648	; ffffffff80000000H
  0005a	85 c0		 test	 eax, eax
  0005c	75 2a		 jne	 SHORT $LN5@object_set

; 3308 :         PyErr_Format(PyExc_TypeError,
; 3309 :           "__class__ must be set to a class, not '%s' object",
; 3310 :           Py_TYPE(value)->tp_name);

  0005e	48 8b 44 24 48	 mov	 rax, QWORD PTR value$[rsp]
  00063	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00067	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  0006b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DC@BPCOACP@__class__?5must?5be?5set?5to?5a?5class@
  00072	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00079	e8 00 00 00 00	 call	 PyErr_Format

; 3311 :         return -1;

  0007e	b8 ff ff ff ff	 mov	 eax, -1
  00083	e9 93 00 00 00	 jmp	 $LN7@object_set
$LN5@object_set:

; 3312 :     }
; 3313 :     newto = (PyTypeObject *)value;

  00088	48 8b 44 24 48	 mov	 rax, QWORD PTR value$[rsp]
  0008d	48 89 44 24 20	 mov	 QWORD PTR newto$[rsp], rax

; 3314 :     if (!(newto->tp_flags & Py_TPFLAGS_HEAPTYPE) ||
; 3315 :         !(oldto->tp_flags & Py_TPFLAGS_HEAPTYPE))

  00092	48 8b 44 24 20	 mov	 rax, QWORD PTR newto$[rsp]
  00097	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0009d	25 00 02 00 00	 and	 eax, 512		; 00000200H
  000a2	85 c0		 test	 eax, eax
  000a4	74 14		 je	 SHORT $LN3@object_set
  000a6	48 8b 44 24 28	 mov	 rax, QWORD PTR oldto$[rsp]
  000ab	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000b1	25 00 02 00 00	 and	 eax, 512		; 00000200H
  000b6	85 c0		 test	 eax, eax
  000b8	75 1a		 jne	 SHORT $LN4@object_set
$LN3@object_set:

; 3316 :     {
; 3317 :         PyErr_Format(PyExc_TypeError,
; 3318 :                      "__class__ assignment: only for heap types");

  000ba	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CK@PPLOJBJJ@__class__?5assignment?3?5only?5for?5h@
  000c1	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000c8	e8 00 00 00 00	 call	 PyErr_Format

; 3319 :         return -1;

  000cd	b8 ff ff ff ff	 mov	 eax, -1
  000d2	eb 47		 jmp	 SHORT $LN7@object_set
$LN4@object_set:

; 3320 :     }
; 3321 :     if (compatible_for_assignment(newto, oldto, "__class__")) {

  000d4	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_09LFGACEKG@__class__?$AA@
  000db	48 8b 54 24 28	 mov	 rdx, QWORD PTR oldto$[rsp]
  000e0	48 8b 4c 24 20	 mov	 rcx, QWORD PTR newto$[rsp]
  000e5	e8 00 00 00 00	 call	 compatible_for_assignment
  000ea	85 c0		 test	 eax, eax
  000ec	74 28		 je	 SHORT $LN2@object_set

; 3322 :         Py_INCREF(newto);

  000ee	48 8b 4c 24 20	 mov	 rcx, QWORD PTR newto$[rsp]
  000f3	e8 00 00 00 00	 call	 _Py_IncRef

; 3323 :         Py_TYPE(self) = newto;

  000f8	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  000fd	48 8b 4c 24 20	 mov	 rcx, QWORD PTR newto$[rsp]
  00102	48 89 48 58	 mov	 QWORD PTR [rax+88], rcx

; 3324 :         Py_DECREF(oldto);

  00106	48 8b 4c 24 28	 mov	 rcx, QWORD PTR oldto$[rsp]
  0010b	e8 00 00 00 00	 call	 _Py_DecRef

; 3325 :         return 0;

  00110	33 c0		 xor	 eax, eax
  00112	eb 07		 jmp	 SHORT $LN7@object_set

; 3326 :     }
; 3327 :     else {

  00114	eb 05		 jmp	 SHORT $LN1@object_set
$LN2@object_set:

; 3328 :         return -1;

  00116	b8 ff ff ff ff	 mov	 eax, -1
$LN1@object_set:
$LN7@object_set:

; 3329 :     }
; 3330 : }

  0011b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011f	c3		 ret	 0
object_set_class ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@NABOMNBG@?$HMi?3__reduce__?$AA@	; `string'
EXTRN	PyArg_ParseTuple:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$object_reduce DD imagerel object_reduce
	DD	imagerel object_reduce+71
	DD	imagerel $unwind$object_reduce
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$object_reduce DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT ??_C@_0O@NABOMNBG@?$HMi?3__reduce__?$AA@
CONST	SEGMENT
??_C@_0O@NABOMNBG@?$HMi?3__reduce__?$AA@ DB '|i:__reduce__', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT object_reduce
_TEXT	SEGMENT
proto$ = 32
self$ = 64
args$ = 72
object_reduce PROC					; COMDAT

; 3587 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 3588 :     int proto = 0;

  0000e	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR proto$[rsp], 0

; 3589 : 
; 3590 :     if (!PyArg_ParseTuple(args, "|i:__reduce__", &proto))

  00016	4c 8d 44 24 20	 lea	 r8, QWORD PTR proto$[rsp]
  0001b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0O@NABOMNBG@?$HMi?3__reduce__?$AA@
  00022	48 8b 4c 24 48	 mov	 rcx, QWORD PTR args$[rsp]
  00027	e8 00 00 00 00	 call	 PyArg_ParseTuple
  0002c	85 c0		 test	 eax, eax
  0002e	75 04		 jne	 SHORT $LN1@object_red@2

; 3591 :         return NULL;

  00030	33 c0		 xor	 eax, eax
  00032	eb 0e		 jmp	 SHORT $LN2@object_red@2
$LN1@object_red@2:

; 3592 : 
; 3593 :     return _common_reduce(self, proto);

  00034	8b 54 24 20	 mov	 edx, DWORD PTR proto$[rsp]
  00038	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  0003d	e8 00 00 00 00	 call	 _common_reduce
$LN2@object_red@2:

; 3594 : }

  00042	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00046	c3		 ret	 0
object_reduce ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@JEKBMHHK@_reduce_ex?$AA@		; `string'
PUBLIC	??_C@_04IFLELAI@?$CIOi?$CJ?$AA@			; `string'
EXTRN	PyEval_CallMethod:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_common_reduce DD imagerel _common_reduce
	DD	imagerel _common_reduce+116
	DD	imagerel $unwind$_common_reduce
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_common_reduce DD 010d01H
	DD	0820dH
xdata	ENDS
;	COMDAT ??_C@_0L@JEKBMHHK@_reduce_ex?$AA@
CONST	SEGMENT
??_C@_0L@JEKBMHHK@_reduce_ex?$AA@ DB '_reduce_ex', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04IFLELAI@?$CIOi?$CJ?$AA@
CONST	SEGMENT
??_C@_04IFLELAI@?$CIOi?$CJ?$AA@ DB '(Oi)', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _common_reduce
_TEXT	SEGMENT
copyreg$ = 48
res$ = 56
self$ = 80
proto$ = 88
_common_reduce PROC					; COMDAT

; 3569 : {

  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 3570 :     PyObject *copyreg, *res;
; 3571 : 
; 3572 :     if (proto >= 2)

  0000d	83 7c 24 58 02	 cmp	 DWORD PTR proto$[rsp], 2
  00012	7c 0c		 jl	 SHORT $LN2@common_red

; 3573 :         return reduce_2(self);

  00014	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  00019	e8 00 00 00 00	 call	 reduce_2
  0001e	eb 4f		 jmp	 SHORT $LN3@common_red
$LN2@common_red:

; 3574 : 
; 3575 :     copyreg = import_copyreg();

  00020	e8 00 00 00 00	 call	 import_copyreg
  00025	48 89 44 24 30	 mov	 QWORD PTR copyreg$[rsp], rax

; 3576 :     if (!copyreg)

  0002a	48 83 7c 24 30
	00		 cmp	 QWORD PTR copyreg$[rsp], 0
  00030	75 04		 jne	 SHORT $LN1@common_red

; 3577 :         return NULL;

  00032	33 c0		 xor	 eax, eax
  00034	eb 39		 jmp	 SHORT $LN3@common_red
$LN1@common_red:

; 3578 : 
; 3579 :     res = PyEval_CallMethod(copyreg, "_reduce_ex", "(Oi)", self, proto);

  00036	8b 44 24 58	 mov	 eax, DWORD PTR proto$[rsp]
  0003a	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0003e	4c 8b 4c 24 50	 mov	 r9, QWORD PTR self$[rsp]
  00043	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_04IFLELAI@?$CIOi?$CJ?$AA@
  0004a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@JEKBMHHK@_reduce_ex?$AA@
  00051	48 8b 4c 24 30	 mov	 rcx, QWORD PTR copyreg$[rsp]
  00056	e8 00 00 00 00	 call	 PyEval_CallMethod
  0005b	48 89 44 24 38	 mov	 QWORD PTR res$[rsp], rax

; 3580 :     Py_DECREF(copyreg);

  00060	48 8b 4c 24 30	 mov	 rcx, QWORD PTR copyreg$[rsp]
  00065	e8 00 00 00 00	 call	 _Py_DecRef

; 3581 : 
; 3582 :     return res;

  0006a	48 8b 44 24 38	 mov	 rax, QWORD PTR res$[rsp]
$LN3@common_red:

; 3583 : }

  0006f	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00073	c3		 ret	 0
_common_reduce ENDP
_TEXT	ENDS
EXTRN	PyImport_Import:PROC
EXTRN	PyDict_GetItemWithError:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$import_copyreg DD imagerel import_copyreg
	DD	imagerel import_copyreg+147
	DD	imagerel $unwind$import_copyreg
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$import_copyreg DD 010401H
	DD	08204H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT import_copyreg
_TEXT	SEGMENT
copyreg_str$ = 32
interp$ = 40
copyreg_module$ = 48
import_copyreg PROC					; COMDAT

; 3348 : {

  00000	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 3349 :     PyObject *copyreg_str;
; 3350 :     PyObject *copyreg_module;
; 3351 :     PyInterpreterState *interp = PyThreadState_GET()->interp;

  00004	e8 00 00 00 00	 call	 PyThreadState_Get
  00009	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0000d	48 89 44 24 28	 mov	 QWORD PTR interp$[rsp], rax

; 3352 :     _Py_IDENTIFIER(copyreg);
; 3353 : 
; 3354 :     copyreg_str = _PyUnicode_FromId(&PyId_copyreg);

  00012	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId_copyreg@?1??import_copyreg@@9@9
  00017	8b c0		 mov	 eax, eax
  00019	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0001f	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00028	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0002c	48 8b c8	 mov	 rcx, rax
  0002f	e8 00 00 00 00	 call	 _PyUnicode_FromId
  00034	48 89 44 24 20	 mov	 QWORD PTR copyreg_str$[rsp], rax

; 3355 :     if (copyreg_str == NULL) {

  00039	48 83 7c 24 20
	00		 cmp	 QWORD PTR copyreg_str$[rsp], 0
  0003f	75 04		 jne	 SHORT $LN3@import_cop

; 3356 :         return NULL;

  00041	33 c0		 xor	 eax, eax
  00043	eb 49		 jmp	 SHORT $LN4@import_cop
$LN3@import_cop:

; 3357 :     }
; 3358 :     /* Try to fetch cached copy of copyreg from sys.modules first in an
; 3359 :        attempt to avoid the import overhead. Previously this was implemented
; 3360 :        by storing a reference to the cached module in a static variable, but
; 3361 :        this broke when multiple embeded interpreters were in use (see issue
; 3362 :        #17408 and #19088). */
; 3363 :     copyreg_module = PyDict_GetItemWithError(interp->modules, copyreg_str);

  00045	48 8b 54 24 20	 mov	 rdx, QWORD PTR copyreg_str$[rsp]
  0004a	48 8b 44 24 28	 mov	 rax, QWORD PTR interp$[rsp]
  0004f	48 8b 48 10	 mov	 rcx, QWORD PTR [rax+16]
  00053	e8 00 00 00 00	 call	 PyDict_GetItemWithError
  00058	48 89 44 24 30	 mov	 QWORD PTR copyreg_module$[rsp], rax

; 3364 :     if (copyreg_module != NULL) {

  0005d	48 83 7c 24 30
	00		 cmp	 QWORD PTR copyreg_module$[rsp], 0
  00063	74 11		 je	 SHORT $LN2@import_cop

; 3365 :         Py_INCREF(copyreg_module);

  00065	48 8b 4c 24 30	 mov	 rcx, QWORD PTR copyreg_module$[rsp]
  0006a	e8 00 00 00 00	 call	 _Py_IncRef

; 3366 :         return copyreg_module;

  0006f	48 8b 44 24 30	 mov	 rax, QWORD PTR copyreg_module$[rsp]
  00074	eb 18		 jmp	 SHORT $LN4@import_cop
$LN2@import_cop:

; 3367 :     }
; 3368 :     if (PyErr_Occurred()) {

  00076	e8 00 00 00 00	 call	 PyErr_Occurred
  0007b	48 85 c0	 test	 rax, rax
  0007e	74 04		 je	 SHORT $LN1@import_cop

; 3369 :         return NULL;

  00080	33 c0		 xor	 eax, eax
  00082	eb 0a		 jmp	 SHORT $LN4@import_cop
$LN1@import_cop:

; 3370 :     }
; 3371 :     return PyImport_Import(copyreg_str);

  00084	48 8b 4c 24 20	 mov	 rcx, QWORD PTR copyreg_str$[rsp]
  00089	e8 00 00 00 00	 call	 PyImport_Import
$LN4@import_cop:

; 3372 : }

  0008e	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00092	c3		 ret	 0
import_copyreg ENDP
_TEXT	ENDS
PUBLIC	??_C@_04IMCHBGDP@?$CINO?$CJ?$AA@		; `string'
PUBLIC	??_C@_1CI@DBNOBHKC@?$AAP?$AAy?$AAL?$AAi?$AAs?$AAt?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAn?$AAa?$AAm?$AAe?$AAs?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_0DD@ENMFPKMH@__getnewargs__?5should?5return?5a?5t@ ; `string'
EXTRN	_PyObject_CallMethodId:PROC
EXTRN	PyObject_GetIter:PROC
EXTRN	PyObject_GetAttr:PROC
EXTRN	PyTuple_New:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$reduce_2 DD imagerel reduce_2
	DD	imagerel reduce_2+1784
	DD	imagerel $unwind$reduce_2
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$reduce_2 DD 020c01H
	DD	01d010cH
xdata	ENDS
;	COMDAT ??_C@_04IMCHBGDP@?$CINO?$CJ?$AA@
CONST	SEGMENT
??_C@_04IMCHBGDP@?$CINO?$CJ?$AA@ DB '(NO)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1CI@DBNOBHKC@?$AAP?$AAy?$AAL?$AAi?$AAs?$AAt?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAn?$AAa?$AAm?$AAe?$AAs?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CI@DBNOBHKC@?$AAP?$AAy?$AAL?$AAi?$AAs?$AAt?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAn?$AAa?$AAm?$AAe?$AAs?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'L', 00H, 'i', 00H, 's', 00H, 't', 00H, '_', 00H
	DB	'C', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, '(', 00H, 'n'
	DB	00H, 'a', 00H, 'm', 00H, 'e', 00H, 's', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@ENMFPKMH@__getnewargs__?5should?5return?5a?5t@
CONST	SEGMENT
??_C@_0DD@ENMFPKMH@__getnewargs__?5should?5return?5a?5t@ DB '__getnewargs'
	DB	'__ should return a tuple, not ''%.200s''', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT reduce_2
_TEXT	SEGMENT
copyreg$ = 48
getnewargs$ = 56
res$ = 64
listitems$ = 72
args$ = 80
n$ = 88
i$ = 96
getstate$ = 104
slots$ = 112
names$ = 120
cls$ = 128
args2$ = 136
dictitems$ = 144
newobj$ = 152
state$ = 160
dict$23333 = 168
value$23351 = 176
name$23350 = 184
err$23356 = 192
items$23376 = 200
v$23394 = 208
obj$ = 240
reduce_2 PROC						; COMDAT

; 3411 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 81 ec e8 00
	00 00		 sub	 rsp, 232		; 000000e8H

; 3412 :     PyObject *cls, *getnewargs;
; 3413 :     PyObject *args = NULL, *args2 = NULL;

  0000c	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR args$[rsp], 0
  00015	48 c7 84 24 88
	00 00 00 00 00
	00 00		 mov	 QWORD PTR args2$[rsp], 0

; 3414 :     PyObject *getstate = NULL, *state = NULL, *names = NULL;

  00021	48 c7 44 24 68
	00 00 00 00	 mov	 QWORD PTR getstate$[rsp], 0
  0002a	48 c7 84 24 a0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR state$[rsp], 0
  00036	48 c7 44 24 78
	00 00 00 00	 mov	 QWORD PTR names$[rsp], 0

; 3415 :     PyObject *slots = NULL, *listitems = NULL, *dictitems = NULL;

  0003f	48 c7 44 24 70
	00 00 00 00	 mov	 QWORD PTR slots$[rsp], 0
  00048	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR listitems$[rsp], 0
  00051	48 c7 84 24 90
	00 00 00 00 00
	00 00		 mov	 QWORD PTR dictitems$[rsp], 0

; 3416 :     PyObject *copyreg = NULL, *newobj = NULL, *res = NULL;

  0005d	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR copyreg$[rsp], 0
  00066	48 c7 84 24 98
	00 00 00 00 00
	00 00		 mov	 QWORD PTR newobj$[rsp], 0
  00072	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR res$[rsp], 0

; 3417 :     Py_ssize_t i, n;
; 3418 :     _Py_IDENTIFIER(__getnewargs__);
; 3419 :     _Py_IDENTIFIER(__getstate__);
; 3420 :     _Py_IDENTIFIER(__newobj__);
; 3421 : 
; 3422 :     cls = (PyObject *) Py_TYPE(obj);

  0007b	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR obj$[rsp]
  00083	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00087	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR cls$[rsp], rax

; 3423 : 
; 3424 :     getnewargs = _PyObject_GetAttrId(obj, &PyId___getnewargs__);

  0008f	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId___getnewargs__@?1??reduce_2@@9@9
  00094	8b c0		 mov	 eax, eax
  00096	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0009c	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  000a5	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  000a9	48 8b d0	 mov	 rdx, rax
  000ac	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  000b4	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  000b9	48 89 44 24 38	 mov	 QWORD PTR getnewargs$[rsp], rax

; 3425 :     if (getnewargs != NULL) {

  000be	48 83 7c 24 38
	00		 cmp	 QWORD PTR getnewargs$[rsp], 0
  000c4	74 62		 je	 SHORT $LN69@reduce_2

; 3426 :         args = PyObject_CallObject(getnewargs, NULL);

  000c6	33 d2		 xor	 edx, edx
  000c8	48 8b 4c 24 38	 mov	 rcx, QWORD PTR getnewargs$[rsp]
  000cd	e8 00 00 00 00	 call	 PyObject_CallObject
  000d2	48 89 44 24 50	 mov	 QWORD PTR args$[rsp], rax

; 3427 :         Py_DECREF(getnewargs);

  000d7	48 8b 4c 24 38	 mov	 rcx, QWORD PTR getnewargs$[rsp]
  000dc	e8 00 00 00 00	 call	 _Py_DecRef

; 3428 :         if (args != NULL && !PyTuple_Check(args)) {

  000e1	48 83 7c 24 50
	00		 cmp	 QWORD PTR args$[rsp], 0
  000e7	74 3d		 je	 SHORT $LN68@reduce_2
  000e9	48 8b 44 24 50	 mov	 rax, QWORD PTR args$[rsp]
  000ee	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000f2	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000f8	25 00 00 00 04	 and	 eax, 67108864		; 04000000H
  000fd	85 c0		 test	 eax, eax
  000ff	75 25		 jne	 SHORT $LN68@reduce_2

; 3429 :             PyErr_Format(PyExc_TypeError,
; 3430 :                 "__getnewargs__ should return a tuple, "
; 3431 :                 "not '%.200s'", Py_TYPE(args)->tp_name);

  00101	48 8b 44 24 50	 mov	 rax, QWORD PTR args$[rsp]
  00106	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0010a	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  0010e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DD@ENMFPKMH@__getnewargs__?5should?5return?5a?5t@
  00115	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0011c	e8 00 00 00 00	 call	 PyErr_Format

; 3432 :             goto end;

  00121	e9 d5 04 00 00	 jmp	 $end$23322
$LN68@reduce_2:

; 3433 :         }
; 3434 :     }
; 3435 :     else {

  00126	eb 11		 jmp	 SHORT $LN67@reduce_2
$LN69@reduce_2:

; 3436 :         PyErr_Clear();

  00128	e8 00 00 00 00	 call	 PyErr_Clear

; 3437 :         args = PyTuple_New(0);

  0012d	33 c9		 xor	 ecx, ecx
  0012f	e8 00 00 00 00	 call	 PyTuple_New
  00134	48 89 44 24 50	 mov	 QWORD PTR args$[rsp], rax
$LN67@reduce_2:

; 3438 :     }
; 3439 :     if (args == NULL)

  00139	48 83 7c 24 50
	00		 cmp	 QWORD PTR args$[rsp], 0
  0013f	75 05		 jne	 SHORT $LN66@reduce_2

; 3440 :         goto end;

  00141	e9 b5 04 00 00	 jmp	 $end$23322
$LN66@reduce_2:

; 3441 : 
; 3442 :     getstate = _PyObject_GetAttrId(obj, &PyId___getstate__);

  00146	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId___getstate__@?1??reduce_2@@9@9
  0014b	8b c0		 mov	 eax, eax
  0014d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00153	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0015c	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00160	48 8b d0	 mov	 rdx, rax
  00163	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  0016b	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00170	48 89 44 24 68	 mov	 QWORD PTR getstate$[rsp], rax

; 3443 :     if (getstate != NULL) {

  00175	48 83 7c 24 68
	00		 cmp	 QWORD PTR getstate$[rsp], 0
  0017b	74 33		 je	 SHORT $LN65@reduce_2

; 3444 :         state = PyObject_CallObject(getstate, NULL);

  0017d	33 d2		 xor	 edx, edx
  0017f	48 8b 4c 24 68	 mov	 rcx, QWORD PTR getstate$[rsp]
  00184	e8 00 00 00 00	 call	 PyObject_CallObject
  00189	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR state$[rsp], rax

; 3445 :         Py_DECREF(getstate);

  00191	48 8b 4c 24 68	 mov	 rcx, QWORD PTR getstate$[rsp]
  00196	e8 00 00 00 00	 call	 _Py_DecRef

; 3446 :         if (state == NULL)

  0019b	48 83 bc 24 a0
	00 00 00 00	 cmp	 QWORD PTR state$[rsp], 0
  001a4	75 05		 jne	 SHORT $LN64@reduce_2

; 3447 :             goto end;

  001a6	e9 50 04 00 00	 jmp	 $end$23322
$LN64@reduce_2:

; 3448 :     }
; 3449 :     else {

  001ab	e9 f6 01 00 00	 jmp	 $LN63@reduce_2
$LN65@reduce_2:

; 3450 :         PyObject **dict;
; 3451 :         PyErr_Clear();

  001b0	e8 00 00 00 00	 call	 PyErr_Clear

; 3452 :         dict = _PyObject_GetDictPtr(obj);

  001b5	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  001bd	e8 00 00 00 00	 call	 _PyObject_GetDictPtr
  001c2	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR dict$23333[rsp], rax

; 3453 :         if (dict && *dict)

  001ca	48 83 bc 24 a8
	00 00 00 00	 cmp	 QWORD PTR dict$23333[rsp], 0
  001d3	74 23		 je	 SHORT $LN62@reduce_2
  001d5	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR dict$23333[rsp]
  001dd	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  001e1	74 15		 je	 SHORT $LN62@reduce_2

; 3454 :             state = *dict;

  001e3	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR dict$23333[rsp]
  001eb	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001ee	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR state$[rsp], rax

; 3455 :         else

  001f6	eb 0f		 jmp	 SHORT $LN61@reduce_2
$LN62@reduce_2:

; 3456 :             state = Py_None;

  001f8	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  001ff	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR state$[rsp], rax
$LN61@reduce_2:

; 3457 :         Py_INCREF(state);

  00207	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR state$[rsp]
  0020f	e8 00 00 00 00	 call	 _Py_IncRef

; 3458 :         names = slotnames(cls);

  00214	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR cls$[rsp]
  0021c	e8 00 00 00 00	 call	 slotnames
  00221	48 89 44 24 78	 mov	 QWORD PTR names$[rsp], rax

; 3459 :         if (names == NULL)

  00226	48 83 7c 24 78
	00		 cmp	 QWORD PTR names$[rsp], 0
  0022c	75 05		 jne	 SHORT $LN60@reduce_2

; 3460 :             goto end;

  0022e	e9 c8 03 00 00	 jmp	 $end$23322
$LN60@reduce_2:

; 3461 :         if (names != Py_None && PyList_GET_SIZE(names) > 0) {

  00233	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0023a	48 39 44 24 78	 cmp	 QWORD PTR names$[rsp], rax
  0023f	0f 84 61 01 00
	00		 je	 $LN59@reduce_2
  00245	48 8b 44 24 78	 mov	 rax, QWORD PTR names$[rsp]
  0024a	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  0024f	0f 8e 51 01 00
	00		 jle	 $LN59@reduce_2

; 3462 :             assert(PyList_Check(names));

  00255	48 8b 44 24 78	 mov	 rax, QWORD PTR names$[rsp]
  0025a	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0025e	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00264	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  00269	85 c0		 test	 eax, eax
  0026b	75 1c		 jne	 SHORT $LN72@reduce_2
  0026d	41 b8 86 0d 00
	00		 mov	 r8d, 3462		; 00000d86H
  00273	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@GJLLIOPA@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAt?$AAy?$AAp?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  0027a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CI@DBNOBHKC@?$AAP?$AAy?$AAL?$AAi?$AAs?$AAt?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAn?$AAa?$AAm?$AAe?$AAs?$AA?$CJ?$AA?$AA@
  00281	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00287	33 c0		 xor	 eax, eax
$LN72@reduce_2:

; 3463 :             slots = PyDict_New();

  00289	e8 00 00 00 00	 call	 PyDict_New
  0028e	48 89 44 24 70	 mov	 QWORD PTR slots$[rsp], rax

; 3464 :             if (slots == NULL)

  00293	48 83 7c 24 70
	00		 cmp	 QWORD PTR slots$[rsp], 0
  00299	75 05		 jne	 SHORT $LN58@reduce_2

; 3465 :                 goto end;

  0029b	e9 5b 03 00 00	 jmp	 $end$23322
$LN58@reduce_2:

; 3466 :             n = 0;

  002a0	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR n$[rsp], 0

; 3467 :             /* Can't pre-compute the list size; the list
; 3468 :                is stored on the class so accessible to other
; 3469 :                threads, which may be run by DECREF */
; 3470 :             for (i = 0; i < PyList_GET_SIZE(names); i++) {

  002a9	48 c7 44 24 60
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  002b2	eb 0d		 jmp	 SHORT $LN57@reduce_2
$LN56@reduce_2:
  002b4	48 8b 44 24 60	 mov	 rax, QWORD PTR i$[rsp]
  002b9	48 ff c0	 inc	 rax
  002bc	48 89 44 24 60	 mov	 QWORD PTR i$[rsp], rax
$LN57@reduce_2:
  002c1	48 8b 44 24 78	 mov	 rax, QWORD PTR names$[rsp]
  002c6	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  002ca	48 39 44 24 60	 cmp	 QWORD PTR i$[rsp], rax
  002cf	0f 8d 98 00 00
	00		 jge	 $LN55@reduce_2

; 3471 :                 PyObject *name, *value;
; 3472 :                 name = PyList_GET_ITEM(names, i);

  002d5	48 8b 44 24 78	 mov	 rax, QWORD PTR names$[rsp]
  002da	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  002de	48 8b 4c 24 60	 mov	 rcx, QWORD PTR i$[rsp]
  002e3	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  002e7	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR name$23350[rsp], rax

; 3473 :                 value = PyObject_GetAttr(obj, name);

  002ef	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR name$23350[rsp]
  002f7	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  002ff	e8 00 00 00 00	 call	 PyObject_GetAttr
  00304	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR value$23351[rsp], rax

; 3474 :                 if (value == NULL)

  0030c	48 83 bc 24 b0
	00 00 00 00	 cmp	 QWORD PTR value$23351[rsp], 0
  00315	75 07		 jne	 SHORT $LN54@reduce_2

; 3475 :                     PyErr_Clear();

  00317	e8 00 00 00 00	 call	 PyErr_Clear

; 3476 :                 else {

  0031c	eb 4a		 jmp	 SHORT $LN53@reduce_2
$LN54@reduce_2:

; 3477 :                     int err = PyDict_SetItem(slots, name,
; 3478 :                                              value);

  0031e	4c 8b 84 24 b0
	00 00 00	 mov	 r8, QWORD PTR value$23351[rsp]
  00326	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR name$23350[rsp]
  0032e	48 8b 4c 24 70	 mov	 rcx, QWORD PTR slots$[rsp]
  00333	e8 00 00 00 00	 call	 PyDict_SetItem
  00338	89 84 24 c0 00
	00 00		 mov	 DWORD PTR err$23356[rsp], eax

; 3479 :                     Py_DECREF(value);

  0033f	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR value$23351[rsp]
  00347	e8 00 00 00 00	 call	 _Py_DecRef

; 3480 :                     if (err)

  0034c	83 bc 24 c0 00
	00 00 00	 cmp	 DWORD PTR err$23356[rsp], 0
  00354	74 05		 je	 SHORT $LN52@reduce_2

; 3481 :                         goto end;

  00356	e9 a0 02 00 00	 jmp	 $end$23322
$LN52@reduce_2:

; 3482 :                     n++;

  0035b	48 8b 44 24 58	 mov	 rax, QWORD PTR n$[rsp]
  00360	48 ff c0	 inc	 rax
  00363	48 89 44 24 58	 mov	 QWORD PTR n$[rsp], rax
$LN53@reduce_2:

; 3483 :                 }
; 3484 :             }

  00368	e9 47 ff ff ff	 jmp	 $LN56@reduce_2
$LN55@reduce_2:

; 3485 :             if (n) {

  0036d	48 83 7c 24 58
	00		 cmp	 QWORD PTR n$[rsp], 0
  00373	74 31		 je	 SHORT $LN51@reduce_2

; 3486 :                 state = Py_BuildValue("(NO)", state, slots);

  00375	4c 8b 44 24 70	 mov	 r8, QWORD PTR slots$[rsp]
  0037a	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR state$[rsp]
  00382	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04IMCHBGDP@?$CINO?$CJ?$AA@
  00389	e8 00 00 00 00	 call	 Py_BuildValue
  0038e	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR state$[rsp], rax

; 3487 :                 if (state == NULL)

  00396	48 83 bc 24 a0
	00 00 00 00	 cmp	 QWORD PTR state$[rsp], 0
  0039f	75 05		 jne	 SHORT $LN50@reduce_2

; 3488 :                     goto end;

  003a1	e9 55 02 00 00	 jmp	 $end$23322
$LN50@reduce_2:
$LN51@reduce_2:
$LN59@reduce_2:
$LN63@reduce_2:

; 3489 :             }
; 3490 :         }
; 3491 :     }
; 3492 : 
; 3493 :     if (!PyList_Check(obj)) {

  003a6	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR obj$[rsp]
  003ae	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  003b2	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  003b8	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  003bd	85 c0		 test	 eax, eax
  003bf	75 18		 jne	 SHORT $LN49@reduce_2

; 3494 :         listitems = Py_None;

  003c1	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  003c8	48 89 44 24 48	 mov	 QWORD PTR listitems$[rsp], rax

; 3495 :         Py_INCREF(listitems);

  003cd	48 8b 4c 24 48	 mov	 rcx, QWORD PTR listitems$[rsp]
  003d2	e8 00 00 00 00	 call	 _Py_IncRef

; 3496 :     }
; 3497 :     else {

  003d7	eb 1f		 jmp	 SHORT $LN48@reduce_2
$LN49@reduce_2:

; 3498 :         listitems = PyObject_GetIter(obj);

  003d9	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  003e1	e8 00 00 00 00	 call	 PyObject_GetIter
  003e6	48 89 44 24 48	 mov	 QWORD PTR listitems$[rsp], rax

; 3499 :         if (listitems == NULL)

  003eb	48 83 7c 24 48
	00		 cmp	 QWORD PTR listitems$[rsp], 0
  003f1	75 05		 jne	 SHORT $LN47@reduce_2

; 3500 :             goto end;

  003f3	e9 03 02 00 00	 jmp	 $end$23322
$LN47@reduce_2:
$LN48@reduce_2:

; 3501 :     }
; 3502 : 
; 3503 :     if (!PyDict_Check(obj)) {

  003f8	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR obj$[rsp]
  00400	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00404	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0040a	25 00 00 00 20	 and	 eax, 536870912		; 20000000H
  0040f	85 c0		 test	 eax, eax
  00411	75 1e		 jne	 SHORT $LN46@reduce_2

; 3504 :         dictitems = Py_None;

  00413	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0041a	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dictitems$[rsp], rax

; 3505 :         Py_INCREF(dictitems);

  00422	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dictitems$[rsp]
  0042a	e8 00 00 00 00	 call	 _Py_IncRef

; 3506 :     }
; 3507 :     else {

  0042f	eb 7b		 jmp	 SHORT $LN45@reduce_2
$LN46@reduce_2:

; 3508 :         _Py_IDENTIFIER(items);
; 3509 :         PyObject *items = _PyObject_CallMethodId(obj, &PyId_items, "");

  00431	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId_items@?P@??reduce_2@@9@9
  00436	8b c0		 mov	 eax, eax
  00438	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0043e	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00447	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0044b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  00452	48 8b d0	 mov	 rdx, rax
  00455	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  0045d	e8 00 00 00 00	 call	 _PyObject_CallMethodId
  00462	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR items$23376[rsp], rax

; 3510 :         if (items == NULL)

  0046a	48 83 bc 24 c8
	00 00 00 00	 cmp	 QWORD PTR items$23376[rsp], 0
  00473	75 05		 jne	 SHORT $LN44@reduce_2

; 3511 :             goto end;

  00475	e9 81 01 00 00	 jmp	 $end$23322
$LN44@reduce_2:

; 3512 :         dictitems = PyObject_GetIter(items);

  0047a	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR items$23376[rsp]
  00482	e8 00 00 00 00	 call	 PyObject_GetIter
  00487	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR dictitems$[rsp], rax

; 3513 :         Py_DECREF(items);

  0048f	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR items$23376[rsp]
  00497	e8 00 00 00 00	 call	 _Py_DecRef

; 3514 :         if (dictitems == NULL)

  0049c	48 83 bc 24 90
	00 00 00 00	 cmp	 QWORD PTR dictitems$[rsp], 0
  004a5	75 05		 jne	 SHORT $LN43@reduce_2

; 3515 :             goto end;

  004a7	e9 4f 01 00 00	 jmp	 $end$23322
$LN43@reduce_2:
$LN45@reduce_2:

; 3516 :     }
; 3517 : 
; 3518 :     copyreg = import_copyreg();

  004ac	e8 00 00 00 00	 call	 import_copyreg
  004b1	48 89 44 24 30	 mov	 QWORD PTR copyreg$[rsp], rax

; 3519 :     if (copyreg == NULL)

  004b6	48 83 7c 24 30
	00		 cmp	 QWORD PTR copyreg$[rsp], 0
  004bc	75 05		 jne	 SHORT $LN42@reduce_2

; 3520 :         goto end;

  004be	e9 38 01 00 00	 jmp	 $end$23322
$LN42@reduce_2:

; 3521 :     newobj = _PyObject_GetAttrId(copyreg, &PyId___newobj__);

  004c3	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId___newobj__@?1??reduce_2@@9@9
  004c8	8b c0		 mov	 eax, eax
  004ca	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  004d0	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  004d9	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  004dd	48 8b d0	 mov	 rdx, rax
  004e0	48 8b 4c 24 30	 mov	 rcx, QWORD PTR copyreg$[rsp]
  004e5	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  004ea	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR newobj$[rsp], rax

; 3522 :     if (newobj == NULL)

  004f2	48 83 bc 24 98
	00 00 00 00	 cmp	 QWORD PTR newobj$[rsp], 0
  004fb	75 05		 jne	 SHORT $LN41@reduce_2

; 3523 :         goto end;

  004fd	e9 f9 00 00 00	 jmp	 $end$23322
$LN41@reduce_2:

; 3524 : 
; 3525 :     n = PyTuple_GET_SIZE(args);

  00502	48 8b 44 24 50	 mov	 rax, QWORD PTR args$[rsp]
  00507	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0050b	48 89 44 24 58	 mov	 QWORD PTR n$[rsp], rax

; 3526 :     args2 = PyTuple_New(n+1);

  00510	48 8b 44 24 58	 mov	 rax, QWORD PTR n$[rsp]
  00515	48 ff c0	 inc	 rax
  00518	48 8b c8	 mov	 rcx, rax
  0051b	e8 00 00 00 00	 call	 PyTuple_New
  00520	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR args2$[rsp], rax

; 3527 :     if (args2 == NULL)

  00528	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR args2$[rsp], 0
  00531	75 05		 jne	 SHORT $LN40@reduce_2

; 3528 :         goto end;

  00533	e9 c3 00 00 00	 jmp	 $end$23322
$LN40@reduce_2:

; 3529 :     Py_INCREF(cls);

  00538	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR cls$[rsp]
  00540	e8 00 00 00 00	 call	 _Py_IncRef

; 3530 :     PyTuple_SET_ITEM(args2, 0, cls);

  00545	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR args2$[rsp]
  0054d	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR cls$[rsp]
  00555	48 89 48 70	 mov	 QWORD PTR [rax+112], rcx

; 3531 :     for (i = 0; i < n; i++) {

  00559	48 c7 44 24 60
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  00562	eb 0d		 jmp	 SHORT $LN39@reduce_2
$LN38@reduce_2:
  00564	48 8b 44 24 60	 mov	 rax, QWORD PTR i$[rsp]
  00569	48 ff c0	 inc	 rax
  0056c	48 89 44 24 60	 mov	 QWORD PTR i$[rsp], rax
$LN39@reduce_2:
  00571	48 8b 44 24 58	 mov	 rax, QWORD PTR n$[rsp]
  00576	48 39 44 24 60	 cmp	 QWORD PTR i$[rsp], rax
  0057b	7d 40		 jge	 SHORT $LN37@reduce_2

; 3532 :         PyObject *v = PyTuple_GET_ITEM(args, i);

  0057d	48 8b 44 24 50	 mov	 rax, QWORD PTR args$[rsp]
  00582	48 8b 4c 24 60	 mov	 rcx, QWORD PTR i$[rsp]
  00587	48 8b 44 c8 70	 mov	 rax, QWORD PTR [rax+rcx*8+112]
  0058c	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR v$23394[rsp], rax

; 3533 :         Py_INCREF(v);

  00594	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR v$23394[rsp]
  0059c	e8 00 00 00 00	 call	 _Py_IncRef

; 3534 :         PyTuple_SET_ITEM(args2, i+1, v);

  005a1	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR args2$[rsp]
  005a9	48 8b 4c 24 60	 mov	 rcx, QWORD PTR i$[rsp]
  005ae	48 8b 94 24 d0
	00 00 00	 mov	 rdx, QWORD PTR v$23394[rsp]
  005b6	48 89 54 c8 78	 mov	 QWORD PTR [rax+rcx*8+120], rdx

; 3535 :     }

  005bb	eb a7		 jmp	 SHORT $LN38@reduce_2
$LN37@reduce_2:

; 3536 : 
; 3537 :     res = PyTuple_Pack(5, newobj, args2, state, listitems, dictitems);

  005bd	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR dictitems$[rsp]
  005c5	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  005ca	48 8b 44 24 48	 mov	 rax, QWORD PTR listitems$[rsp]
  005cf	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  005d4	4c 8b 8c 24 a0
	00 00 00	 mov	 r9, QWORD PTR state$[rsp]
  005dc	4c 8b 84 24 88
	00 00 00	 mov	 r8, QWORD PTR args2$[rsp]
  005e4	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR newobj$[rsp]
  005ec	b9 05 00 00 00	 mov	 ecx, 5
  005f1	e8 00 00 00 00	 call	 PyTuple_Pack
  005f6	48 89 44 24 40	 mov	 QWORD PTR res$[rsp], rax
$end$23322:
$LN36@reduce_2:

; 3538 : 
; 3539 :   end:
; 3540 :     Py_XDECREF(args);

  005fb	48 83 7c 24 50
	00		 cmp	 QWORD PTR args$[rsp], 0
  00601	74 0a		 je	 SHORT $LN33@reduce_2
  00603	48 8b 4c 24 50	 mov	 rcx, QWORD PTR args$[rsp]
  00608	e8 00 00 00 00	 call	 _Py_DecRef
$LN33@reduce_2:
  0060d	33 c0		 xor	 eax, eax
  0060f	85 c0		 test	 eax, eax
  00611	75 e8		 jne	 SHORT $LN36@reduce_2
$LN32@reduce_2:

; 3541 :     Py_XDECREF(args2);

  00613	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR args2$[rsp], 0
  0061c	74 0d		 je	 SHORT $LN29@reduce_2
  0061e	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR args2$[rsp]
  00626	e8 00 00 00 00	 call	 _Py_DecRef
$LN29@reduce_2:
  0062b	33 c0		 xor	 eax, eax
  0062d	85 c0		 test	 eax, eax
  0062f	75 e2		 jne	 SHORT $LN32@reduce_2
$LN28@reduce_2:

; 3542 :     Py_XDECREF(slots);

  00631	48 83 7c 24 70
	00		 cmp	 QWORD PTR slots$[rsp], 0
  00637	74 0a		 je	 SHORT $LN25@reduce_2
  00639	48 8b 4c 24 70	 mov	 rcx, QWORD PTR slots$[rsp]
  0063e	e8 00 00 00 00	 call	 _Py_DecRef
$LN25@reduce_2:
  00643	33 c0		 xor	 eax, eax
  00645	85 c0		 test	 eax, eax
  00647	75 e8		 jne	 SHORT $LN28@reduce_2
$LN24@reduce_2:

; 3543 :     Py_XDECREF(state);

  00649	48 83 bc 24 a0
	00 00 00 00	 cmp	 QWORD PTR state$[rsp], 0
  00652	74 0d		 je	 SHORT $LN21@reduce_2
  00654	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR state$[rsp]
  0065c	e8 00 00 00 00	 call	 _Py_DecRef
$LN21@reduce_2:
  00661	33 c0		 xor	 eax, eax
  00663	85 c0		 test	 eax, eax
  00665	75 e2		 jne	 SHORT $LN24@reduce_2
$LN20@reduce_2:

; 3544 :     Py_XDECREF(names);

  00667	48 83 7c 24 78
	00		 cmp	 QWORD PTR names$[rsp], 0
  0066d	74 0a		 je	 SHORT $LN17@reduce_2
  0066f	48 8b 4c 24 78	 mov	 rcx, QWORD PTR names$[rsp]
  00674	e8 00 00 00 00	 call	 _Py_DecRef
$LN17@reduce_2:
  00679	33 c0		 xor	 eax, eax
  0067b	85 c0		 test	 eax, eax
  0067d	75 e8		 jne	 SHORT $LN20@reduce_2
$LN16@reduce_2:

; 3545 :     Py_XDECREF(listitems);

  0067f	48 83 7c 24 48
	00		 cmp	 QWORD PTR listitems$[rsp], 0
  00685	74 0a		 je	 SHORT $LN13@reduce_2
  00687	48 8b 4c 24 48	 mov	 rcx, QWORD PTR listitems$[rsp]
  0068c	e8 00 00 00 00	 call	 _Py_DecRef
$LN13@reduce_2:
  00691	33 c0		 xor	 eax, eax
  00693	85 c0		 test	 eax, eax
  00695	75 e8		 jne	 SHORT $LN16@reduce_2
$LN12@reduce_2:

; 3546 :     Py_XDECREF(dictitems);

  00697	48 83 bc 24 90
	00 00 00 00	 cmp	 QWORD PTR dictitems$[rsp], 0
  006a0	74 0d		 je	 SHORT $LN9@reduce_2
  006a2	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR dictitems$[rsp]
  006aa	e8 00 00 00 00	 call	 _Py_DecRef
$LN9@reduce_2:
  006af	33 c0		 xor	 eax, eax
  006b1	85 c0		 test	 eax, eax
  006b3	75 e2		 jne	 SHORT $LN12@reduce_2
$LN8@reduce_2:

; 3547 :     Py_XDECREF(copyreg);

  006b5	48 83 7c 24 30
	00		 cmp	 QWORD PTR copyreg$[rsp], 0
  006bb	74 0a		 je	 SHORT $LN5@reduce_2
  006bd	48 8b 4c 24 30	 mov	 rcx, QWORD PTR copyreg$[rsp]
  006c2	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@reduce_2:
  006c7	33 c0		 xor	 eax, eax
  006c9	85 c0		 test	 eax, eax
  006cb	75 e8		 jne	 SHORT $LN8@reduce_2
$LN4@reduce_2:

; 3548 :     Py_XDECREF(newobj);

  006cd	48 83 bc 24 98
	00 00 00 00	 cmp	 QWORD PTR newobj$[rsp], 0
  006d6	74 0d		 je	 SHORT $LN1@reduce_2
  006d8	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR newobj$[rsp]
  006e0	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@reduce_2:
  006e5	33 c0		 xor	 eax, eax
  006e7	85 c0		 test	 eax, eax
  006e9	75 e2		 jne	 SHORT $LN4@reduce_2

; 3549 :     return res;

  006eb	48 8b 44 24 40	 mov	 rax, QWORD PTR res$[rsp]

; 3550 : }

  006f0	48 81 c4 e8 00
	00 00		 add	 rsp, 232		; 000000e8H
  006f7	c3		 ret	 0
reduce_2 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DA@ELALBNKF@copyreg?4_slotnames?5didn?8t?5return@ ; `string'
PUBLIC	??_C@_01MJMHLOMK@O?$AA@				; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$slotnames DD imagerel slotnames
	DD	imagerel slotnames+307
	DD	imagerel $unwind$slotnames
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$slotnames DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0DA@ELALBNKF@copyreg?4_slotnames?5didn?8t?5return@
CONST	SEGMENT
??_C@_0DA@ELALBNKF@copyreg?4_slotnames?5didn?8t?5return@ DB 'copyreg._slo'
	DB	'tnames didn''t return a list or None', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01MJMHLOMK@O?$AA@
CONST	SEGMENT
??_C@_01MJMHLOMK@O?$AA@ DB 'O', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT slotnames
_TEXT	SEGMENT
copyreg$ = 32
clsdict$ = 40
slotnames$ = 48
cls$ = 80
slotnames PROC						; COMDAT

; 3376 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 3377 :     PyObject *clsdict;
; 3378 :     PyObject *copyreg;
; 3379 :     PyObject *slotnames;
; 3380 :     _Py_IDENTIFIER(__slotnames__);
; 3381 :     _Py_IDENTIFIER(_slotnames);
; 3382 : 
; 3383 :     clsdict = ((PyTypeObject *)cls)->tp_dict;

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR cls$[rsp]
  0000e	48 8b 80 60 01
	00 00		 mov	 rax, QWORD PTR [rax+352]
  00015	48 89 44 24 28	 mov	 QWORD PTR clsdict$[rsp], rax

; 3384 :     slotnames = _PyDict_GetItemId(clsdict, &PyId___slotnames__);

  0001a	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId___slotnames__@?1??slotnames@@9@9
  0001f	8b c0		 mov	 eax, eax
  00021	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00027	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00030	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00034	48 8b d0	 mov	 rdx, rax
  00037	48 8b 4c 24 28	 mov	 rcx, QWORD PTR clsdict$[rsp]
  0003c	e8 00 00 00 00	 call	 _PyDict_GetItemId
  00041	48 89 44 24 30	 mov	 QWORD PTR slotnames$[rsp], rax

; 3385 :     if (slotnames != NULL && PyList_Check(slotnames)) {

  00046	48 83 7c 24 30
	00		 cmp	 QWORD PTR slotnames$[rsp], 0
  0004c	74 2c		 je	 SHORT $LN3@slotnames
  0004e	48 8b 44 24 30	 mov	 rax, QWORD PTR slotnames$[rsp]
  00053	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00057	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0005d	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  00062	85 c0		 test	 eax, eax
  00064	74 14		 je	 SHORT $LN3@slotnames

; 3386 :         Py_INCREF(slotnames);

  00066	48 8b 4c 24 30	 mov	 rcx, QWORD PTR slotnames$[rsp]
  0006b	e8 00 00 00 00	 call	 _Py_IncRef

; 3387 :         return slotnames;

  00070	48 8b 44 24 30	 mov	 rax, QWORD PTR slotnames$[rsp]
  00075	e9 b4 00 00 00	 jmp	 $LN4@slotnames
$LN3@slotnames:

; 3388 :     }
; 3389 : 
; 3390 :     copyreg = import_copyreg();

  0007a	e8 00 00 00 00	 call	 import_copyreg
  0007f	48 89 44 24 20	 mov	 QWORD PTR copyreg$[rsp], rax

; 3391 :     if (copyreg == NULL)

  00084	48 83 7c 24 20
	00		 cmp	 QWORD PTR copyreg$[rsp], 0
  0008a	75 07		 jne	 SHORT $LN2@slotnames

; 3392 :         return NULL;

  0008c	33 c0		 xor	 eax, eax
  0008e	e9 9b 00 00 00	 jmp	 $LN4@slotnames
$LN2@slotnames:

; 3393 : 
; 3394 :     slotnames = _PyObject_CallMethodId(copyreg, &PyId__slotnames, "O", cls);

  00093	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId__slotnames@?1??slotnames@@9@9
  00098	8b c0		 mov	 eax, eax
  0009a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  000a0	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  000a9	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  000ad	4c 8b 4c 24 50	 mov	 r9, QWORD PTR cls$[rsp]
  000b2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01MJMHLOMK@O?$AA@
  000b9	48 8b d0	 mov	 rdx, rax
  000bc	48 8b 4c 24 20	 mov	 rcx, QWORD PTR copyreg$[rsp]
  000c1	e8 00 00 00 00	 call	 _PyObject_CallMethodId
  000c6	48 89 44 24 30	 mov	 QWORD PTR slotnames$[rsp], rax

; 3395 :     Py_DECREF(copyreg);

  000cb	48 8b 4c 24 20	 mov	 rcx, QWORD PTR copyreg$[rsp]
  000d0	e8 00 00 00 00	 call	 _Py_DecRef

; 3396 :     if (slotnames != NULL &&
; 3397 :         slotnames != Py_None &&
; 3398 :         !PyList_Check(slotnames))

  000d5	48 83 7c 24 30
	00		 cmp	 QWORD PTR slotnames$[rsp], 0
  000db	74 4c		 je	 SHORT $LN1@slotnames
  000dd	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000e4	48 39 44 24 30	 cmp	 QWORD PTR slotnames$[rsp], rax
  000e9	74 3e		 je	 SHORT $LN1@slotnames
  000eb	48 8b 44 24 30	 mov	 rax, QWORD PTR slotnames$[rsp]
  000f0	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000f4	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000fa	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  000ff	85 c0		 test	 eax, eax
  00101	75 26		 jne	 SHORT $LN1@slotnames

; 3399 :     {
; 3400 :         PyErr_SetString(PyExc_TypeError,
; 3401 :             "copyreg._slotnames didn't return a list or None");

  00103	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DA@ELALBNKF@copyreg?4_slotnames?5didn?8t?5return@
  0010a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00111	e8 00 00 00 00	 call	 PyErr_SetString

; 3402 :         Py_DECREF(slotnames);

  00116	48 8b 4c 24 30	 mov	 rcx, QWORD PTR slotnames$[rsp]
  0011b	e8 00 00 00 00	 call	 _Py_DecRef

; 3403 :         slotnames = NULL;

  00120	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR slotnames$[rsp], 0
$LN1@slotnames:

; 3404 :     }
; 3405 : 
; 3406 :     return slotnames;

  00129	48 8b 44 24 30	 mov	 rax, QWORD PTR slotnames$[rsp]
$LN4@slotnames:

; 3407 : }

  0012e	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00132	c3		 ret	 0
slotnames ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BB@IDCJELDA@?$HMi?3__reduce_ex__?$AA@	; `string'
_BSS	SEGMENT
?objreduce@?1??object_reduce_ex@@9@9 DQ 01H DUP (?)	; `object_reduce_ex'::`2'::objreduce
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$object_reduce_ex DD imagerel object_reduce_ex
	DD	imagerel object_reduce_ex+394
	DD	imagerel $unwind$object_reduce_ex
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$object_reduce_ex DD 010e01H
	DD	0c20eH
xdata	ENDS
;	COMDAT ??_C@_0BB@IDCJELDA@?$HMi?3__reduce_ex__?$AA@
CONST	SEGMENT
??_C@_0BB@IDCJELDA@?$HMi?3__reduce_ex__?$AA@ DB '|i:__reduce_ex__', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT object_reduce_ex
_TEXT	SEGMENT
res$ = 32
proto$ = 40
reduce$ = 48
override$23494 = 56
cls$23492 = 64
clsreduce$23493 = 72
tv135 = 80
self$ = 112
args$ = 120
object_reduce_ex PROC					; COMDAT

; 3598 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 3599 :     static PyObject *objreduce;
; 3600 :     PyObject *reduce, *res;
; 3601 :     int proto = 0;

  0000e	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR proto$[rsp], 0

; 3602 :     _Py_IDENTIFIER(__reduce__);
; 3603 : 
; 3604 :     if (!PyArg_ParseTuple(args, "|i:__reduce_ex__", &proto))

  00016	4c 8d 44 24 28	 lea	 r8, QWORD PTR proto$[rsp]
  0001b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BB@IDCJELDA@?$HMi?3__reduce_ex__?$AA@
  00022	48 8b 4c 24 78	 mov	 rcx, QWORD PTR args$[rsp]
  00027	e8 00 00 00 00	 call	 PyArg_ParseTuple
  0002c	85 c0		 test	 eax, eax
  0002e	75 07		 jne	 SHORT $LN8@object_red@3

; 3605 :         return NULL;

  00030	33 c0		 xor	 eax, eax
  00032	e9 4e 01 00 00	 jmp	 $LN9@object_red@3
$LN8@object_red@3:

; 3606 : 
; 3607 :     if (objreduce == NULL) {

  00037	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?objreduce@?1??object_reduce_ex@@9@9, 0
  0003f	75 41		 jne	 SHORT $LN7@object_red@3

; 3608 :         objreduce = _PyDict_GetItemId(PyBaseObject_Type.tp_dict,
; 3609 :                                       &PyId___reduce__);

  00041	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId___reduce__@?1??object_reduce_ex@@9@9
  00046	8b c0		 mov	 eax, eax
  00048	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0004e	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00057	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0005b	48 8b d0	 mov	 rdx, rax
  0005e	48 8b 0d 60 01
	00 00		 mov	 rcx, QWORD PTR PyBaseObject_Type+352
  00065	e8 00 00 00 00	 call	 _PyDict_GetItemId
  0006a	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?objreduce@?1??object_reduce_ex@@9@9, rax

; 3610 :         if (objreduce == NULL)

  00071	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?objreduce@?1??object_reduce_ex@@9@9, 0
  00079	75 07		 jne	 SHORT $LN6@object_red@3

; 3611 :             return NULL;

  0007b	33 c0		 xor	 eax, eax
  0007d	e9 03 01 00 00	 jmp	 $LN9@object_red@3
$LN6@object_red@3:
$LN7@object_red@3:

; 3612 :     }
; 3613 : 
; 3614 :     reduce = _PyObject_GetAttrId(self, &PyId___reduce__);

  00082	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId___reduce__@?1??object_reduce_ex@@9@9
  00087	8b c0		 mov	 eax, eax
  00089	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0008f	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00098	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0009c	48 8b d0	 mov	 rdx, rax
  0009f	48 8b 4c 24 70	 mov	 rcx, QWORD PTR self$[rsp]
  000a4	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  000a9	48 89 44 24 30	 mov	 QWORD PTR reduce$[rsp], rax

; 3615 :     if (reduce == NULL)

  000ae	48 83 7c 24 30
	00		 cmp	 QWORD PTR reduce$[rsp], 0
  000b4	75 0a		 jne	 SHORT $LN5@object_red@3

; 3616 :         PyErr_Clear();

  000b6	e8 00 00 00 00	 call	 PyErr_Clear

; 3617 :     else {

  000bb	e9 b7 00 00 00	 jmp	 $LN4@object_red@3
$LN5@object_red@3:

; 3618 :         PyObject *cls, *clsreduce;
; 3619 :         int override;
; 3620 : 
; 3621 :         cls = (PyObject *) Py_TYPE(self);

  000c0	48 8b 44 24 70	 mov	 rax, QWORD PTR self$[rsp]
  000c5	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000c9	48 89 44 24 40	 mov	 QWORD PTR cls$23492[rsp], rax

; 3622 :         clsreduce = _PyObject_GetAttrId(cls, &PyId___reduce__);

  000ce	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId___reduce__@?1??object_reduce_ex@@9@9
  000d3	8b c0		 mov	 eax, eax
  000d5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  000db	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  000e4	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  000e8	48 8b d0	 mov	 rdx, rax
  000eb	48 8b 4c 24 40	 mov	 rcx, QWORD PTR cls$23492[rsp]
  000f0	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  000f5	48 89 44 24 48	 mov	 QWORD PTR clsreduce$23493[rsp], rax

; 3623 :         if (clsreduce == NULL) {

  000fa	48 83 7c 24 48
	00		 cmp	 QWORD PTR clsreduce$23493[rsp], 0
  00100	75 0e		 jne	 SHORT $LN3@object_red@3

; 3624 :             Py_DECREF(reduce);

  00102	48 8b 4c 24 30	 mov	 rcx, QWORD PTR reduce$[rsp]
  00107	e8 00 00 00 00	 call	 _Py_DecRef

; 3625 :             return NULL;

  0010c	33 c0		 xor	 eax, eax
  0010e	eb 75		 jmp	 SHORT $LN9@object_red@3
$LN3@object_red@3:

; 3626 :         }
; 3627 :         override = (clsreduce != objreduce);

  00110	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?objreduce@?1??object_reduce_ex@@9@9
  00117	48 39 44 24 48	 cmp	 QWORD PTR clsreduce$23493[rsp], rax
  0011c	74 0a		 je	 SHORT $LN11@object_red@3
  0011e	c7 44 24 50 01
	00 00 00	 mov	 DWORD PTR tv135[rsp], 1
  00126	eb 08		 jmp	 SHORT $LN12@object_red@3
$LN11@object_red@3:
  00128	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR tv135[rsp], 0
$LN12@object_red@3:
  00130	8b 44 24 50	 mov	 eax, DWORD PTR tv135[rsp]
  00134	89 44 24 38	 mov	 DWORD PTR override$23494[rsp], eax

; 3628 :         Py_DECREF(clsreduce);

  00138	48 8b 4c 24 48	 mov	 rcx, QWORD PTR clsreduce$23493[rsp]
  0013d	e8 00 00 00 00	 call	 _Py_DecRef

; 3629 :         if (override) {

  00142	83 7c 24 38 00	 cmp	 DWORD PTR override$23494[rsp], 0
  00147	74 24		 je	 SHORT $LN2@object_red@3

; 3630 :             res = PyObject_CallObject(reduce, NULL);

  00149	33 d2		 xor	 edx, edx
  0014b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR reduce$[rsp]
  00150	e8 00 00 00 00	 call	 PyObject_CallObject
  00155	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax

; 3631 :             Py_DECREF(reduce);

  0015a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR reduce$[rsp]
  0015f	e8 00 00 00 00	 call	 _Py_DecRef

; 3632 :             return res;

  00164	48 8b 44 24 20	 mov	 rax, QWORD PTR res$[rsp]
  00169	eb 1a		 jmp	 SHORT $LN9@object_red@3

; 3633 :         }
; 3634 :         else

  0016b	eb 0a		 jmp	 SHORT $LN1@object_red@3
$LN2@object_red@3:

; 3635 :             Py_DECREF(reduce);

  0016d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR reduce$[rsp]
  00172	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@object_red@3:
$LN4@object_red@3:

; 3636 :     }
; 3637 : 
; 3638 :     return _common_reduce(self, proto);

  00177	8b 54 24 28	 mov	 edx, DWORD PTR proto$[rsp]
  0017b	48 8b 4c 24 70	 mov	 rcx, QWORD PTR self$[rsp]
  00180	e8 00 00 00 00	 call	 _common_reduce
$LN9@object_red@3:

; 3639 : }

  00185	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00189	c3		 ret	 0
object_reduce_ex ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$object_subclasshook DD imagerel object_subclasshook
	DD	imagerel object_subclasshook+38
	DD	imagerel $unwind$object_subclasshook
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$object_subclasshook DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT object_subclasshook
_TEXT	SEGMENT
cls$ = 48
args$ = 56
object_subclasshook PROC				; COMDAT

; 3643 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 3644 :     Py_RETURN_NOTIMPLEMENTED;

  0000e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NotImplementedStruct
  00015	e8 00 00 00 00	 call	 _Py_IncRef
  0001a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NotImplementedStruct

; 3645 : }

  00021	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00025	c3		 ret	 0
object_subclasshook ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DP@MPDCLJEC@object?4__format__?5with?5a?5non?9emp@ ; `string'
PUBLIC	??_C@_1EA@DCIJOEKC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DK@JLLBFDEO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_0N@EKIKMBMC@U?3__format__?$AA@		; `string'
EXTRN	PyObject_Format:PROC
EXTRN	PyErr_WarnEx:PROC
EXTRN	PyExc_DeprecationWarning:QWORD
EXTRN	PyObject_Str:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$object_format DD imagerel object_format
	DD	imagerel object_format+287
	DD	imagerel $unwind$object_format
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$object_format DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_0DP@MPDCLJEC@object?4__format__?5with?5a?5non?9emp@
CONST	SEGMENT
??_C@_0DP@MPDCLJEC@object?4__format__?5with?5a?5non?9emp@ DB 'object.__fo'
	DB	'rmat__ with a non-empty format string is deprecated', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EA@DCIJOEKC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1EA@DCIJOEKC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'I', 00H, 'S', 00H, '_', 00H, 'R'
	DB	00H, 'E', 00H, 'A', 00H, 'D', 00H, 'Y', 00H, '(', 00H, 'f', 00H
	DB	'o', 00H, 'r', 00H, 'm', 00H, 'a', 00H, 't', 00H, '_', 00H, 's'
	DB	00H, 'p', 00H, 'e', 00H, 'c', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DK@JLLBFDEO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DK@JLLBFDEO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, 'f', 00H, 'o', 00H, 'r', 00H, 'm', 00H
	DB	'a', 00H, 't', 00H, '_', 00H, 's', 00H, 'p', 00H, 'e', 00H, 'c'
	DB	00H, ')', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@EKIKMBMC@U?3__format__?$AA@
CONST	SEGMENT
??_C@_0N@EKIKMBMC@U?3__format__?$AA@ DB 'U:__format__', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT object_format
_TEXT	SEGMENT
format_spec$ = 32
result$ = 40
self_as_str$ = 48
self$ = 80
args$ = 88
object_format PROC					; COMDAT

; 3664 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 3665 :     PyObject *format_spec;
; 3666 :     PyObject *self_as_str = NULL;

  0000e	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR self_as_str$[rsp], 0

; 3667 :     PyObject *result = NULL;

  00017	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR result$[rsp], 0

; 3668 : 
; 3669 :     if (!PyArg_ParseTuple(args, "U:__format__", &format_spec))

  00020	4c 8d 44 24 20	 lea	 r8, QWORD PTR format_spec$[rsp]
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@EKIKMBMC@U?3__format__?$AA@
  0002c	48 8b 4c 24 58	 mov	 rcx, QWORD PTR args$[rsp]
  00031	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00036	85 c0		 test	 eax, eax
  00038	75 07		 jne	 SHORT $LN8@object_for

; 3670 :         return NULL;

  0003a	33 c0		 xor	 eax, eax
  0003c	e9 d9 00 00 00	 jmp	 $LN9@object_for
$LN8@object_for:

; 3671 : 
; 3672 :     self_as_str = PyObject_Str(self);

  00041	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  00046	e8 00 00 00 00	 call	 PyObject_Str
  0004b	48 89 44 24 30	 mov	 QWORD PTR self_as_str$[rsp], rax

; 3673 :     if (self_as_str != NULL) {

  00050	48 83 7c 24 30
	00		 cmp	 QWORD PTR self_as_str$[rsp], 0
  00056	0f 84 a1 00 00
	00		 je	 $LN7@object_for

; 3674 :         /* Issue 7994: If we're converting to a string, we
; 3675 :            should reject format specifications */
; 3676 :         if (PyUnicode_GET_LENGTH(format_spec) > 0) {

  0005c	48 8b 44 24 20	 mov	 rax, QWORD PTR format_spec$[rsp]
  00061	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00065	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0006b	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00070	85 c0		 test	 eax, eax
  00072	75 1c		 jne	 SHORT $LN11@object_for
  00074	41 b8 5c 0e 00
	00		 mov	 r8d, 3676		; 00000e5cH
  0007a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@GJLLIOPA@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAt?$AAy?$AAp?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00081	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DK@JLLBFDEO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$AA@
  00088	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0008e	33 c0		 xor	 eax, eax
$LN11@object_for:
  00090	48 8b 44 24 20	 mov	 rax, QWORD PTR format_spec$[rsp]
  00095	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00098	c1 e8 07	 shr	 eax, 7
  0009b	83 e0 01	 and	 eax, 1
  0009e	85 c0		 test	 eax, eax
  000a0	75 1c		 jne	 SHORT $LN12@object_for
  000a2	41 b8 5c 0e 00
	00		 mov	 r8d, 3676		; 00000e5cH
  000a8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@GJLLIOPA@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAt?$AAy?$AAp?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  000af	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EA@DCIJOEKC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$AA@
  000b6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000bc	33 c0		 xor	 eax, eax
$LN12@object_for:
  000be	48 8b 44 24 20	 mov	 rax, QWORD PTR format_spec$[rsp]
  000c3	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  000c8	7e 1f		 jle	 SHORT $LN6@object_for

; 3677 :             if (PyErr_WarnEx(PyExc_DeprecationWarning,
; 3678 :                              "object.__format__ with a non-empty format "
; 3679 :                              "string is deprecated", 1) < 0) {

  000ca	41 b8 01 00 00
	00		 mov	 r8d, 1
  000d0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DP@MPDCLJEC@object?4__format__?5with?5a?5non?9emp@
  000d7	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_DeprecationWarning
  000de	e8 00 00 00 00	 call	 PyErr_WarnEx
  000e3	85 c0		 test	 eax, eax
  000e5	7d 02		 jge	 SHORT $LN5@object_for

; 3680 :               goto done;

  000e7	eb 14		 jmp	 SHORT $done$23541
$LN5@object_for:
$LN6@object_for:

; 3681 :             }
; 3682 :             /* Eventually this will become an error:
; 3683 :                PyErr_Format(PyExc_TypeError,
; 3684 :                "non-empty format string passed to object.__format__");
; 3685 :                goto done;
; 3686 :             */
; 3687 :         }
; 3688 : 
; 3689 :         result = PyObject_Format(self_as_str, format_spec);

  000e9	48 8b 54 24 20	 mov	 rdx, QWORD PTR format_spec$[rsp]
  000ee	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self_as_str$[rsp]
  000f3	e8 00 00 00 00	 call	 PyObject_Format
  000f8	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax
$LN7@object_for:
$done$23541:
$LN4@object_for:

; 3690 :     }
; 3691 : 
; 3692 : done:
; 3693 :     Py_XDECREF(self_as_str);

  000fd	48 83 7c 24 30
	00		 cmp	 QWORD PTR self_as_str$[rsp], 0
  00103	74 0a		 je	 SHORT $LN1@object_for
  00105	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self_as_str$[rsp]
  0010a	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@object_for:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 e8		 jne	 SHORT $LN4@object_for

; 3694 : 
; 3695 :     return result;

  00115	48 8b 44 24 28	 mov	 rax, QWORD PTR result$[rsp]
$LN9@object_for:

; 3696 : }

  0011a	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0011e	c3		 ret	 0
object_format ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$object_sizeof DD imagerel object_sizeof
	DD	imagerel object_sizeof+120
	DD	imagerel $unwind$object_sizeof
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$object_sizeof DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT object_sizeof
_TEXT	SEGMENT
res$ = 32
isize$ = 40
self$ = 64
args$ = 72
object_sizeof PROC					; COMDAT

; 3700 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 3701 :     Py_ssize_t res, isize;
; 3702 : 
; 3703 :     res = 0;

  0000e	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR res$[rsp], 0

; 3704 :     isize = self->ob_type->tp_itemsize;

  00017	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0001c	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00020	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  00027	48 89 44 24 28	 mov	 QWORD PTR isize$[rsp], rax

; 3705 :     if (isize > 0)

  0002c	48 83 7c 24 28
	00		 cmp	 QWORD PTR isize$[rsp], 0
  00032	7e 18		 jle	 SHORT $LN1@object_siz

; 3706 :         res = Py_SIZE(self->ob_type) * isize;

  00034	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00039	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0003d	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00041	48 0f af 44 24
	28		 imul	 rax, QWORD PTR isize$[rsp]
  00047	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax
$LN1@object_siz:

; 3707 :     res += self->ob_type->tp_basicsize;

  0004c	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00051	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00055	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  00059	48 8b 4c 24 20	 mov	 rcx, QWORD PTR res$[rsp]
  0005e	48 03 c8	 add	 rcx, rax
  00061	48 8b c1	 mov	 rax, rcx
  00064	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax

; 3708 : 
; 3709 :     return PyLong_FromSsize_t(res);

  00069	48 8b 4c 24 20	 mov	 rcx, QWORD PTR res$[rsp]
  0006e	e8 00 00 00 00	 call	 PyLong_FromSsize_t

; 3710 : }

  00073	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00077	c3		 ret	 0
object_sizeof ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$object_dir DD imagerel object_dir
	DD	imagerel object_dir+354
	DD	imagerel $unwind$object_dir
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$object_dir DD 010e01H
	DD	0820eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT object_dir
_TEXT	SEGMENT
dict$ = 32
itsclass$ = 40
result$ = 48
temp$23576 = 56
self$ = 80
args$ = 88
object_dir PROC						; COMDAT

; 3717 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 3718 :     PyObject *result = NULL;

  0000e	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR result$[rsp], 0

; 3719 :     PyObject *dict = NULL;

  00017	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR dict$[rsp], 0

; 3720 :     PyObject *itsclass = NULL;

  00020	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR itsclass$[rsp], 0

; 3721 : 
; 3722 :     /* Get __dict__ (which may or may not be a real dict...) */
; 3723 :     dict = _PyObject_GetAttrId(self, &PyId___dict__);

  00029	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId___dict__
  0002e	8b c0		 mov	 eax, eax
  00030	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00036	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0003f	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00043	48 8b d0	 mov	 rdx, rax
  00046	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  0004b	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00050	48 89 44 24 20	 mov	 QWORD PTR dict$[rsp], rax

; 3724 :     if (dict == NULL) {

  00055	48 83 7c 24 20
	00		 cmp	 QWORD PTR dict$[rsp], 0
  0005b	75 11		 jne	 SHORT $LN16@object_dir

; 3725 :         PyErr_Clear();

  0005d	e8 00 00 00 00	 call	 PyErr_Clear

; 3726 :         dict = PyDict_New();

  00062	e8 00 00 00 00	 call	 PyDict_New
  00067	48 89 44 24 20	 mov	 QWORD PTR dict$[rsp], rax
  0006c	eb 51		 jmp	 SHORT $LN15@object_dir
$LN16@object_dir:

; 3727 :     }
; 3728 :     else if (!PyDict_Check(dict)) {

  0006e	48 8b 44 24 20	 mov	 rax, QWORD PTR dict$[rsp]
  00073	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00077	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0007d	25 00 00 00 20	 and	 eax, 536870912		; 20000000H
  00082	85 c0		 test	 eax, eax
  00084	75 16		 jne	 SHORT $LN14@object_dir

; 3729 :         Py_DECREF(dict);

  00086	48 8b 4c 24 20	 mov	 rcx, QWORD PTR dict$[rsp]
  0008b	e8 00 00 00 00	 call	 _Py_DecRef

; 3730 :         dict = PyDict_New();

  00090	e8 00 00 00 00	 call	 PyDict_New
  00095	48 89 44 24 20	 mov	 QWORD PTR dict$[rsp], rax

; 3731 :     }
; 3732 :     else {

  0009a	eb 23		 jmp	 SHORT $LN13@object_dir
$LN14@object_dir:

; 3733 :         /* Copy __dict__ to avoid mutating it. */
; 3734 :         PyObject *temp = PyDict_Copy(dict);

  0009c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR dict$[rsp]
  000a1	e8 00 00 00 00	 call	 PyDict_Copy
  000a6	48 89 44 24 38	 mov	 QWORD PTR temp$23576[rsp], rax

; 3735 :         Py_DECREF(dict);

  000ab	48 8b 4c 24 20	 mov	 rcx, QWORD PTR dict$[rsp]
  000b0	e8 00 00 00 00	 call	 _Py_DecRef

; 3736 :         dict = temp;

  000b5	48 8b 44 24 38	 mov	 rax, QWORD PTR temp$23576[rsp]
  000ba	48 89 44 24 20	 mov	 QWORD PTR dict$[rsp], rax
$LN13@object_dir:
$LN15@object_dir:

; 3737 :     }
; 3738 : 
; 3739 :     if (dict == NULL)

  000bf	48 83 7c 24 20
	00		 cmp	 QWORD PTR dict$[rsp], 0
  000c5	75 02		 jne	 SHORT $LN12@object_dir

; 3740 :         goto error;

  000c7	eb 5f		 jmp	 SHORT $error$23580
$LN12@object_dir:

; 3741 : 
; 3742 :     /* Merge in attrs reachable from its class. */
; 3743 :     itsclass = _PyObject_GetAttrId(self, &PyId___class__);

  000c9	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId___class__
  000ce	8b c0		 mov	 eax, eax
  000d0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  000d6	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  000df	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  000e3	48 8b d0	 mov	 rdx, rax
  000e6	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  000eb	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  000f0	48 89 44 24 28	 mov	 QWORD PTR itsclass$[rsp], rax

; 3744 :     if (itsclass == NULL)

  000f5	48 83 7c 24 28
	00		 cmp	 QWORD PTR itsclass$[rsp], 0
  000fb	75 07		 jne	 SHORT $LN11@object_dir

; 3745 :         /* XXX(tomer): Perhaps fall back to obj->ob_type if no
; 3746 :                        __class__ exists? */
; 3747 :         PyErr_Clear();

  000fd	e8 00 00 00 00	 call	 PyErr_Clear
  00102	eb 15		 jmp	 SHORT $LN10@object_dir
$LN11@object_dir:

; 3748 :     else if (merge_class_dict(dict, itsclass) != 0)

  00104	48 8b 54 24 28	 mov	 rdx, QWORD PTR itsclass$[rsp]
  00109	48 8b 4c 24 20	 mov	 rcx, QWORD PTR dict$[rsp]
  0010e	e8 00 00 00 00	 call	 merge_class_dict
  00113	85 c0		 test	 eax, eax
  00115	74 02		 je	 SHORT $LN9@object_dir

; 3749 :         goto error;

  00117	eb 0f		 jmp	 SHORT $error$23580
$LN9@object_dir:
$LN10@object_dir:

; 3750 : 
; 3751 :     result = PyDict_Keys(dict);

  00119	48 8b 4c 24 20	 mov	 rcx, QWORD PTR dict$[rsp]
  0011e	e8 00 00 00 00	 call	 PyDict_Keys
  00123	48 89 44 24 30	 mov	 QWORD PTR result$[rsp], rax
$error$23580:
$LN8@object_dir:

; 3752 :     /* fall through */
; 3753 : error:
; 3754 :     Py_XDECREF(itsclass);

  00128	48 83 7c 24 28
	00		 cmp	 QWORD PTR itsclass$[rsp], 0
  0012e	74 0a		 je	 SHORT $LN5@object_dir
  00130	48 8b 4c 24 28	 mov	 rcx, QWORD PTR itsclass$[rsp]
  00135	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@object_dir:
  0013a	33 c0		 xor	 eax, eax
  0013c	85 c0		 test	 eax, eax
  0013e	75 e8		 jne	 SHORT $LN8@object_dir
$LN4@object_dir:

; 3755 :     Py_XDECREF(dict);

  00140	48 83 7c 24 20
	00		 cmp	 QWORD PTR dict$[rsp], 0
  00146	74 0a		 je	 SHORT $LN1@object_dir
  00148	48 8b 4c 24 20	 mov	 rcx, QWORD PTR dict$[rsp]
  0014d	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@object_dir:
  00152	33 c0		 xor	 eax, eax
  00154	85 c0		 test	 eax, eax
  00156	75 e8		 jne	 SHORT $LN4@object_dir

; 3756 :     return result;

  00158	48 8b 44 24 30	 mov	 rax, QWORD PTR result$[rsp]

; 3757 : }

  0015d	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00161	c3		 ret	 0
object_dir ENDP
_TEXT	ENDS
PUBLIC	??_C@_0HG@JFHEBFHK@Type?5?$CF?4100s?5defines?5tp_reserved?5@ ; `string'
PUBLIC	??_C@_0FH@BCBGLIHM@type?5?8?$CF?4100s?8?5participates?5in?5gc@ ; `string'
PUBLIC	??_C@_1BM@MJJLDPMN@?$AAb?$AAa?$AAs?$AAe?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ ; `string'
PUBLIC	??_C@_1FI@CICNBING@?$AA?$CI?$AAt?$AAy?$AAp?$AAe?$AA?9?$AA?$DO?$AAt?$AAp?$AA_?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5?$AAP?$AAy?$AA_?$AAT?$AAP?$AAF?$AAL?$AAA?$AAG?$AAS?$AA_?$AAR?$AAE?$AAA@ ; `string'
PUBLIC	??_C@_1CM@OEIGCHFN@?$AAt?$AAy?$AAp?$AAe?$AA?9?$AA?$DO?$AAt?$AAp?$AA_?$AAd?$AAi?$AAc?$AAt?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ ; `string'
EXTRN	PyErr_WarnFormat:PROC
EXTRN	PyObject_HashNotImplemented:PROC
EXTRN	_Py_AddToAllObjects:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyType_Ready DD imagerel $LN56
	DD	imagerel $LN56+2160
	DD	imagerel $unwind$PyType_Ready
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyType_Ready DD 010901H
	DD	0e209H
xdata	ENDS
;	COMDAT ??_C@_0HG@JFHEBFHK@Type?5?$CF?4100s?5defines?5tp_reserved?5@
CONST	SEGMENT
??_C@_0HG@JFHEBFHK@Type?5?$CF?4100s?5defines?5tp_reserved?5@ DB 'Type %.1'
	DB	'00s defines tp_reserved (formerly tp_compare) but not tp_rich'
	DB	'compare. Comparisons may not behave as intended.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FH@BCBGLIHM@type?5?8?$CF?4100s?8?5participates?5in?5gc@
CONST	SEGMENT
??_C@_0FH@BCBGLIHM@type?5?8?$CF?4100s?8?5participates?5in?5gc@ DB 'type '''
	DB	'%.100s'' participates in gc and is a base type but has inappr'
	DB	'opriate tp_free slot', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1BM@MJJLDPMN@?$AAb?$AAa?$AAs?$AAe?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
CONST	SEGMENT
??_C@_1BM@MJJLDPMN@?$AAb?$AAa?$AAs?$AAe?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ DB 'b'
	DB	00H, 'a', 00H, 's', 00H, 'e', 00H, 's', 00H, ' ', 00H, '!', 00H
	DB	'=', 00H, ' ', 00H, 'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1FI@CICNBING@?$AA?$CI?$AAt?$AAy?$AAp?$AAe?$AA?9?$AA?$DO?$AAt?$AAp?$AA_?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5?$AAP?$AAy?$AA_?$AAT?$AAP?$AAF?$AAL?$AAA?$AAG?$AAS?$AA_?$AAR?$AAE?$AAA@
CONST	SEGMENT
??_C@_1FI@CICNBING@?$AA?$CI?$AAt?$AAy?$AAp?$AAe?$AA?9?$AA?$DO?$AAt?$AAp?$AA_?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5?$AAP?$AAy?$AA_?$AAT?$AAP?$AAF?$AAL?$AAA?$AAG?$AAS?$AA_?$AAR?$AAE?$AAA@ DB '('
	DB	00H, 't', 00H, 'y', 00H, 'p', 00H, 'e', 00H, '-', 00H, '>', 00H
	DB	't', 00H, 'p', 00H, '_', 00H, 'f', 00H, 'l', 00H, 'a', 00H, 'g'
	DB	00H, 's', 00H, ' ', 00H, '&', 00H, ' ', 00H, 'P', 00H, 'y', 00H
	DB	'_', 00H, 'T', 00H, 'P', 00H, 'F', 00H, 'L', 00H, 'A', 00H, 'G'
	DB	00H, 'S', 00H, '_', 00H, 'R', 00H, 'E', 00H, 'A', 00H, 'D', 00H
	DB	'Y', 00H, 'I', 00H, 'N', 00H, 'G', 00H, ')', 00H, ' ', 00H, '='
	DB	00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1CM@OEIGCHFN@?$AAt?$AAy?$AAp?$AAe?$AA?9?$AA?$DO?$AAt?$AAp?$AA_?$AAd?$AAi?$AAc?$AAt?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
CONST	SEGMENT
??_C@_1CM@OEIGCHFN@?$AAt?$AAy?$AAp?$AAe?$AA?9?$AA?$DO?$AAt?$AAp?$AA_?$AAd?$AAi?$AAc?$AAt?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ DB 't'
	DB	00H, 'y', 00H, 'p', 00H, 'e', 00H, '-', 00H, '>', 00H, 't', 00H
	DB	'p', 00H, '_', 00H, 'd', 00H, 'i', 00H, 'c', 00H, 't', 00H, ' '
	DB	00H, '!', 00H, '=', 00H, ' ', 00H, 'N', 00H, 'U', 00H, 'L', 00H
	DB	'L', 00H, 00H, 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyType_Ready
_TEXT	SEGMENT
n$ = 32
i$ = 40
base$ = 48
bases$ = 56
dict$ = 64
b$24025 = 72
doc$24038 = 80
b$24062 = 88
error$24068 = 96
tv213 = 100
tv211 = 104
type$ = 128
PyType_Ready PROC					; COMDAT

; 4136 : {

$LN56:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 4137 :     PyObject *dict, *bases;
; 4138 :     PyTypeObject *base;
; 4139 :     Py_ssize_t i, n;
; 4140 : 
; 4141 :     if (type->tp_flags & Py_TPFLAGS_READY) {

  00009	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  00011	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00017	25 00 10 00 00	 and	 eax, 4096		; 00001000H
  0001c	85 c0		 test	 eax, eax
  0001e	74 35		 je	 SHORT $LN44@PyType_Rea

; 4142 :         assert(type->tp_dict != NULL);

  00020	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  00028	48 83 b8 60 01
	00 00 00	 cmp	 QWORD PTR [rax+352], 0
  00030	75 1c		 jne	 SHORT $LN47@PyType_Rea
  00032	41 b8 2e 10 00
	00		 mov	 r8d, 4142		; 0000102eH
  00038	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@GJLLIOPA@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAt?$AAy?$AAp?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  0003f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@OEIGCHFN@?$AAt?$AAy?$AAp?$AAe?$AA?9?$AA?$DO?$AAt?$AAp?$AA_?$AAd?$AAi?$AAc?$AAt?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
  00046	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0004c	33 c0		 xor	 eax, eax
$LN47@PyType_Rea:

; 4143 :         return 0;

  0004e	33 c0		 xor	 eax, eax
  00050	e9 16 08 00 00	 jmp	 $LN45@PyType_Rea
$LN44@PyType_Rea:

; 4144 :     }
; 4145 :     assert((type->tp_flags & Py_TPFLAGS_READYING) == 0);

  00055	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  0005d	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00063	25 00 20 00 00	 and	 eax, 8192		; 00002000H
  00068	85 c0		 test	 eax, eax
  0006a	74 1c		 je	 SHORT $LN48@PyType_Rea
  0006c	41 b8 31 10 00
	00		 mov	 r8d, 4145		; 00001031H
  00072	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@GJLLIOPA@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAt?$AAy?$AAp?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00079	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FI@CICNBING@?$AA?$CI?$AAt?$AAy?$AAp?$AAe?$AA?9?$AA?$DO?$AAt?$AAp?$AA_?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5?$AAP?$AAy?$AA_?$AAT?$AAP?$AAF?$AAL?$AAA?$AAG?$AAS?$AA_?$AAR?$AAE?$AAA@
  00080	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00086	33 c0		 xor	 eax, eax
$LN48@PyType_Rea:

; 4146 : 
; 4147 :     type->tp_flags |= Py_TPFLAGS_READYING;

  00088	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  00090	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00096	0f ba e8 0d	 bts	 eax, 13
  0009a	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR type$[rsp]
  000a2	89 81 00 01 00
	00		 mov	 DWORD PTR [rcx+256], eax

; 4148 : 
; 4149 : #ifdef Py_TRACE_REFS
; 4150 :     /* PyType_Ready is the closest thing we have to a choke point
; 4151 :      * for type objects, so is the best place I can think of to try
; 4152 :      * to get type objects into the doubly-linked list of all objects.
; 4153 :      * Still, not all type objects go thru PyType_Ready.
; 4154 :      */
; 4155 :     _Py_AddToAllObjects((PyObject *)type, 0);

  000a8	33 d2		 xor	 edx, edx
  000aa	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR type$[rsp]
  000b2	e8 00 00 00 00	 call	 _Py_AddToAllObjects

; 4156 : #endif
; 4157 : 
; 4158 :     /* Initialize tp_base (defaults to BaseObject unless that's us) */
; 4159 :     base = type->tp_base;

  000b7	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  000bf	48 8b 80 58 01
	00 00		 mov	 rax, QWORD PTR [rax+344]
  000c6	48 89 44 24 30	 mov	 QWORD PTR base$[rsp], rax

; 4160 :     if (base == NULL && type != &PyBaseObject_Type) {

  000cb	48 83 7c 24 30
	00		 cmp	 QWORD PTR base$[rsp], 0
  000d1	75 45		 jne	 SHORT $LN43@PyType_Rea
  000d3	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyBaseObject_Type
  000da	48 39 84 24 80
	00 00 00	 cmp	 QWORD PTR type$[rsp], rax
  000e2	74 34		 je	 SHORT $LN43@PyType_Rea

; 4161 :         base = type->tp_base = &PyBaseObject_Type;

  000e4	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  000ec	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyBaseObject_Type
  000f3	48 89 88 58 01
	00 00		 mov	 QWORD PTR [rax+344], rcx
  000fa	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  00102	48 8b 80 58 01
	00 00		 mov	 rax, QWORD PTR [rax+344]
  00109	48 89 44 24 30	 mov	 QWORD PTR base$[rsp], rax

; 4162 :         Py_INCREF(base);

  0010e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR base$[rsp]
  00113	e8 00 00 00 00	 call	 _Py_IncRef
$LN43@PyType_Rea:

; 4163 :     }
; 4164 : 
; 4165 :     /* Now the only way base can still be NULL is if type is
; 4166 :      * &PyBaseObject_Type.
; 4167 :      */
; 4168 : 
; 4169 :     /* Initialize the base class */
; 4170 :     if (base != NULL && base->tp_dict == NULL) {

  00118	48 83 7c 24 30
	00		 cmp	 QWORD PTR base$[rsp], 0
  0011e	74 22		 je	 SHORT $LN42@PyType_Rea
  00120	48 8b 44 24 30	 mov	 rax, QWORD PTR base$[rsp]
  00125	48 83 b8 60 01
	00 00 00	 cmp	 QWORD PTR [rax+352], 0
  0012d	75 13		 jne	 SHORT $LN42@PyType_Rea

; 4171 :         if (PyType_Ready(base) < 0)

  0012f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR base$[rsp]
  00134	e8 00 00 00 00	 call	 PyType_Ready
  00139	85 c0		 test	 eax, eax
  0013b	7d 05		 jge	 SHORT $LN41@PyType_Rea

; 4172 :             goto error;

  0013d	e9 04 07 00 00	 jmp	 $error$23985
$LN41@PyType_Rea:
$LN42@PyType_Rea:

; 4173 :     }
; 4174 : 
; 4175 :     /* Initialize ob_type if NULL.      This means extensions that want to be
; 4176 :        compilable separately on Windows can call PyType_Ready() instead of
; 4177 :        initializing the ob_type field of their type objects. */
; 4178 :     /* The test for base != NULL is really unnecessary, since base is only
; 4179 :        NULL when type is &PyBaseObject_Type, and we know its ob_type is
; 4180 :        not NULL (it's initialized to &PyType_Type).      But coverity doesn't
; 4181 :        know that. */
; 4182 :     if (Py_TYPE(type) == NULL && base != NULL)

  00142	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  0014a	48 83 78 58 00	 cmp	 QWORD PTR [rax+88], 0
  0014f	75 1d		 jne	 SHORT $LN40@PyType_Rea
  00151	48 83 7c 24 30
	00		 cmp	 QWORD PTR base$[rsp], 0
  00157	74 15		 je	 SHORT $LN40@PyType_Rea

; 4183 :         Py_TYPE(type) = Py_TYPE(base);

  00159	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  00161	48 8b 4c 24 30	 mov	 rcx, QWORD PTR base$[rsp]
  00166	48 8b 49 58	 mov	 rcx, QWORD PTR [rcx+88]
  0016a	48 89 48 58	 mov	 QWORD PTR [rax+88], rcx
$LN40@PyType_Rea:

; 4184 : 
; 4185 :     /* Initialize tp_bases */
; 4186 :     bases = type->tp_bases;

  0016e	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  00176	48 8b 80 a8 01
	00 00		 mov	 rax, QWORD PTR [rax+424]
  0017d	48 89 44 24 38	 mov	 QWORD PTR bases$[rsp], rax

; 4187 :     if (bases == NULL) {

  00182	48 83 7c 24 38
	00		 cmp	 QWORD PTR bases$[rsp], 0
  00188	75 4b		 jne	 SHORT $LN39@PyType_Rea

; 4188 :         if (base == NULL)

  0018a	48 83 7c 24 30
	00		 cmp	 QWORD PTR base$[rsp], 0
  00190	75 0e		 jne	 SHORT $LN38@PyType_Rea

; 4189 :             bases = PyTuple_New(0);

  00192	33 c9		 xor	 ecx, ecx
  00194	e8 00 00 00 00	 call	 PyTuple_New
  00199	48 89 44 24 38	 mov	 QWORD PTR bases$[rsp], rax

; 4190 :         else

  0019e	eb 14		 jmp	 SHORT $LN37@PyType_Rea
$LN38@PyType_Rea:

; 4191 :             bases = PyTuple_Pack(1, base);

  001a0	48 8b 54 24 30	 mov	 rdx, QWORD PTR base$[rsp]
  001a5	b9 01 00 00 00	 mov	 ecx, 1
  001aa	e8 00 00 00 00	 call	 PyTuple_Pack
  001af	48 89 44 24 38	 mov	 QWORD PTR bases$[rsp], rax
$LN37@PyType_Rea:

; 4192 :         if (bases == NULL)

  001b4	48 83 7c 24 38
	00		 cmp	 QWORD PTR bases$[rsp], 0
  001ba	75 05		 jne	 SHORT $LN36@PyType_Rea

; 4193 :             goto error;

  001bc	e9 85 06 00 00	 jmp	 $error$23985
$LN36@PyType_Rea:

; 4194 :         type->tp_bases = bases;

  001c1	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  001c9	48 8b 4c 24 38	 mov	 rcx, QWORD PTR bases$[rsp]
  001ce	48 89 88 a8 01
	00 00		 mov	 QWORD PTR [rax+424], rcx
$LN39@PyType_Rea:

; 4195 :     }
; 4196 : 
; 4197 :     /* Initialize tp_dict */
; 4198 :     dict = type->tp_dict;

  001d5	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  001dd	48 8b 80 60 01
	00 00		 mov	 rax, QWORD PTR [rax+352]
  001e4	48 89 44 24 40	 mov	 QWORD PTR dict$[rsp], rax

; 4199 :     if (dict == NULL) {

  001e9	48 83 7c 24 40
	00		 cmp	 QWORD PTR dict$[rsp], 0
  001ef	75 2b		 jne	 SHORT $LN35@PyType_Rea

; 4200 :         dict = PyDict_New();

  001f1	e8 00 00 00 00	 call	 PyDict_New
  001f6	48 89 44 24 40	 mov	 QWORD PTR dict$[rsp], rax

; 4201 :         if (dict == NULL)

  001fb	48 83 7c 24 40
	00		 cmp	 QWORD PTR dict$[rsp], 0
  00201	75 05		 jne	 SHORT $LN34@PyType_Rea

; 4202 :             goto error;

  00203	e9 3e 06 00 00	 jmp	 $error$23985
$LN34@PyType_Rea:

; 4203 :         type->tp_dict = dict;

  00208	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  00210	48 8b 4c 24 40	 mov	 rcx, QWORD PTR dict$[rsp]
  00215	48 89 88 60 01
	00 00		 mov	 QWORD PTR [rax+352], rcx
$LN35@PyType_Rea:

; 4204 :     }
; 4205 : 
; 4206 :     /* Add type-specific descriptors to tp_dict */
; 4207 :     if (add_operators(type) < 0)

  0021c	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR type$[rsp]
  00224	e8 00 00 00 00	 call	 add_operators
  00229	85 c0		 test	 eax, eax
  0022b	7d 05		 jge	 SHORT $LN33@PyType_Rea

; 4208 :         goto error;

  0022d	e9 14 06 00 00	 jmp	 $error$23985
$LN33@PyType_Rea:

; 4209 :     if (type->tp_methods != NULL) {

  00232	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  0023a	48 83 b8 40 01
	00 00 00	 cmp	 QWORD PTR [rax+320], 0
  00242	74 25		 je	 SHORT $LN32@PyType_Rea

; 4210 :         if (add_methods(type, type->tp_methods) < 0)

  00244	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  0024c	48 8b 90 40 01
	00 00		 mov	 rdx, QWORD PTR [rax+320]
  00253	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR type$[rsp]
  0025b	e8 00 00 00 00	 call	 add_methods
  00260	85 c0		 test	 eax, eax
  00262	7d 05		 jge	 SHORT $LN31@PyType_Rea

; 4211 :             goto error;

  00264	e9 dd 05 00 00	 jmp	 $error$23985
$LN31@PyType_Rea:
$LN32@PyType_Rea:

; 4212 :     }
; 4213 :     if (type->tp_members != NULL) {

  00269	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  00271	48 83 b8 48 01
	00 00 00	 cmp	 QWORD PTR [rax+328], 0
  00279	74 25		 je	 SHORT $LN30@PyType_Rea

; 4214 :         if (add_members(type, type->tp_members) < 0)

  0027b	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  00283	48 8b 90 48 01
	00 00		 mov	 rdx, QWORD PTR [rax+328]
  0028a	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR type$[rsp]
  00292	e8 00 00 00 00	 call	 add_members
  00297	85 c0		 test	 eax, eax
  00299	7d 05		 jge	 SHORT $LN29@PyType_Rea

; 4215 :             goto error;

  0029b	e9 a6 05 00 00	 jmp	 $error$23985
$LN29@PyType_Rea:
$LN30@PyType_Rea:

; 4216 :     }
; 4217 :     if (type->tp_getset != NULL) {

  002a0	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  002a8	48 83 b8 50 01
	00 00 00	 cmp	 QWORD PTR [rax+336], 0
  002b0	74 25		 je	 SHORT $LN28@PyType_Rea

; 4218 :         if (add_getset(type, type->tp_getset) < 0)

  002b2	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  002ba	48 8b 90 50 01
	00 00		 mov	 rdx, QWORD PTR [rax+336]
  002c1	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR type$[rsp]
  002c9	e8 00 00 00 00	 call	 add_getset
  002ce	85 c0		 test	 eax, eax
  002d0	7d 05		 jge	 SHORT $LN27@PyType_Rea

; 4219 :             goto error;

  002d2	e9 6f 05 00 00	 jmp	 $error$23985
$LN27@PyType_Rea:
$LN28@PyType_Rea:

; 4220 :     }
; 4221 : 
; 4222 :     /* Calculate method resolution order */
; 4223 :     if (mro_internal(type) < 0) {

  002d7	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR type$[rsp]
  002df	e8 00 00 00 00	 call	 mro_internal
  002e4	85 c0		 test	 eax, eax
  002e6	7d 05		 jge	 SHORT $LN26@PyType_Rea

; 4224 :         goto error;

  002e8	e9 59 05 00 00	 jmp	 $error$23985
$LN26@PyType_Rea:

; 4225 :     }
; 4226 : 
; 4227 :     /* Inherit special flags from dominant base */
; 4228 :     if (type->tp_base != NULL)

  002ed	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  002f5	48 83 b8 58 01
	00 00 00	 cmp	 QWORD PTR [rax+344], 0
  002fd	74 1c		 je	 SHORT $LN25@PyType_Rea

; 4229 :         inherit_special(type, type->tp_base);

  002ff	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  00307	48 8b 90 58 01
	00 00		 mov	 rdx, QWORD PTR [rax+344]
  0030e	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR type$[rsp]
  00316	e8 00 00 00 00	 call	 inherit_special
$LN25@PyType_Rea:

; 4230 : 
; 4231 :     /* Initialize tp_dict properly */
; 4232 :     bases = type->tp_mro;

  0031b	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  00323	48 8b 80 b0 01
	00 00		 mov	 rax, QWORD PTR [rax+432]
  0032a	48 89 44 24 38	 mov	 QWORD PTR bases$[rsp], rax

; 4233 :     assert(bases != NULL);

  0032f	48 83 7c 24 38
	00		 cmp	 QWORD PTR bases$[rsp], 0
  00335	75 1c		 jne	 SHORT $LN49@PyType_Rea
  00337	41 b8 89 10 00
	00		 mov	 r8d, 4233		; 00001089H
  0033d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@GJLLIOPA@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAt?$AAy?$AAp?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00344	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BM@MJJLDPMN@?$AAb?$AAa?$AAs?$AAe?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
  0034b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00351	33 c0		 xor	 eax, eax
$LN49@PyType_Rea:

; 4234 :     assert(PyTuple_Check(bases));

  00353	48 8b 44 24 38	 mov	 rax, QWORD PTR bases$[rsp]
  00358	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0035c	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00362	25 00 00 00 04	 and	 eax, 67108864		; 04000000H
  00367	85 c0		 test	 eax, eax
  00369	75 1c		 jne	 SHORT $LN50@PyType_Rea
  0036b	41 b8 8a 10 00
	00		 mov	 r8d, 4234		; 0000108aH
  00371	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@GJLLIOPA@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAt?$AAy?$AAp?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00378	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@KPIEHDLB@?$AAP?$AAy?$AAT?$AAu?$AAp?$AAl?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AAa?$AAs?$AAe?$AAs?$AA?$CJ?$AA?$AA@
  0037f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00385	33 c0		 xor	 eax, eax
$LN50@PyType_Rea:

; 4235 :     n = PyTuple_GET_SIZE(bases);

  00387	48 8b 44 24 38	 mov	 rax, QWORD PTR bases$[rsp]
  0038c	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00390	48 89 44 24 20	 mov	 QWORD PTR n$[rsp], rax

; 4236 :     for (i = 1; i < n; i++) {

  00395	48 c7 44 24 28
	01 00 00 00	 mov	 QWORD PTR i$[rsp], 1
  0039e	eb 0d		 jmp	 SHORT $LN24@PyType_Rea
$LN23@PyType_Rea:
  003a0	48 8b 44 24 28	 mov	 rax, QWORD PTR i$[rsp]
  003a5	48 ff c0	 inc	 rax
  003a8	48 89 44 24 28	 mov	 QWORD PTR i$[rsp], rax
$LN24@PyType_Rea:
  003ad	48 8b 44 24 20	 mov	 rax, QWORD PTR n$[rsp]
  003b2	48 39 44 24 28	 cmp	 QWORD PTR i$[rsp], rax
  003b7	7d 40		 jge	 SHORT $LN22@PyType_Rea

; 4237 :         PyObject *b = PyTuple_GET_ITEM(bases, i);

  003b9	48 8b 44 24 38	 mov	 rax, QWORD PTR bases$[rsp]
  003be	48 8b 4c 24 28	 mov	 rcx, QWORD PTR i$[rsp]
  003c3	48 8b 44 c8 70	 mov	 rax, QWORD PTR [rax+rcx*8+112]
  003c8	48 89 44 24 48	 mov	 QWORD PTR b$24025[rsp], rax

; 4238 :         if (PyType_Check(b))

  003cd	48 8b 44 24 48	 mov	 rax, QWORD PTR b$24025[rsp]
  003d2	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  003d6	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  003dc	25 00 00 00 80	 and	 eax, -2147483648	; ffffffff80000000H
  003e1	85 c0		 test	 eax, eax
  003e3	74 12		 je	 SHORT $LN21@PyType_Rea

; 4239 :             inherit_slots(type, (PyTypeObject *)b);

  003e5	48 8b 54 24 48	 mov	 rdx, QWORD PTR b$24025[rsp]
  003ea	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR type$[rsp]
  003f2	e8 00 00 00 00	 call	 inherit_slots
$LN21@PyType_Rea:

; 4240 :     }

  003f7	eb a7		 jmp	 SHORT $LN23@PyType_Rea
$LN22@PyType_Rea:

; 4241 : 
; 4242 :     /* Sanity check for tp_free. */
; 4243 :     if (PyType_IS_GC(type) && (type->tp_flags & Py_TPFLAGS_BASETYPE) &&
; 4244 :         (type->tp_free == NULL || type->tp_free == PyObject_Del)) {

  003f9	e8 00 00 00 00	 call	 _Py_PXCTX
  003fe	85 c0		 test	 eax, eax
  00400	74 0a		 je	 SHORT $LN53@PyType_Rea
  00402	c7 44 24 64 00
	00 00 00	 mov	 DWORD PTR tv213[rsp], 0
  0040a	eb 31		 jmp	 SHORT $LN54@PyType_Rea
$LN53@PyType_Rea:
  0040c	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  00414	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0041a	25 00 40 00 00	 and	 eax, 16384		; 00004000H
  0041f	85 c0		 test	 eax, eax
  00421	74 0a		 je	 SHORT $LN51@PyType_Rea
  00423	c7 44 24 68 01
	00 00 00	 mov	 DWORD PTR tv211[rsp], 1
  0042b	eb 08		 jmp	 SHORT $LN52@PyType_Rea
$LN51@PyType_Rea:
  0042d	c7 44 24 68 00
	00 00 00	 mov	 DWORD PTR tv211[rsp], 0
$LN52@PyType_Rea:
  00435	8b 44 24 68	 mov	 eax, DWORD PTR tv211[rsp]
  00439	89 44 24 64	 mov	 DWORD PTR tv213[rsp], eax
$LN54@PyType_Rea:
  0043d	83 7c 24 64 00	 cmp	 DWORD PTR tv213[rsp], 0
  00442	74 65		 je	 SHORT $LN20@PyType_Rea
  00444	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  0044c	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00452	25 00 04 00 00	 and	 eax, 1024		; 00000400H
  00457	85 c0		 test	 eax, eax
  00459	74 4e		 je	 SHORT $LN20@PyType_Rea
  0045b	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  00463	48 83 b8 98 01
	00 00 00	 cmp	 QWORD PTR [rax+408], 0
  0046b	74 18		 je	 SHORT $LN19@PyType_Rea
  0046d	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  00475	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_PyObject_DebugFree
  0047c	48 39 88 98 01
	00 00		 cmp	 QWORD PTR [rax+408], rcx
  00483	75 24		 jne	 SHORT $LN20@PyType_Rea
$LN19@PyType_Rea:

; 4245 :         /* This base class needs to call tp_free, but doesn't have
; 4246 :          * one, or its tp_free is for non-gc'ed objects.
; 4247 :          */
; 4248 :         PyErr_Format(PyExc_TypeError, "type '%.100s' participates in "
; 4249 :                      "gc and is a base type but has inappropriate "
; 4250 :                      "tp_free slot",
; 4251 :                      type->tp_name);

  00485	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  0048d	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  00491	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0FH@BCBGLIHM@type?5?8?$CF?4100s?8?5participates?5in?5gc@
  00498	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0049f	e8 00 00 00 00	 call	 PyErr_Format

; 4252 :         goto error;

  004a4	e9 9d 03 00 00	 jmp	 $error$23985
$LN20@PyType_Rea:

; 4253 :     }
; 4254 : 
; 4255 :     /* if the type dictionary doesn't contain a __doc__, set it from
; 4256 :        the tp_doc slot.
; 4257 :      */
; 4258 :     if (_PyDict_GetItemId(type->tp_dict, &PyId___doc__) == NULL) {

  004a9	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId___doc__
  004ae	8b c0		 mov	 eax, eax
  004b0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  004b6	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  004bf	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  004c3	48 8b d0	 mov	 rdx, rax
  004c6	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  004ce	48 8b 88 60 01
	00 00		 mov	 rcx, QWORD PTR [rax+352]
  004d5	e8 00 00 00 00	 call	 _PyDict_GetItemId
  004da	48 85 c0	 test	 rax, rax
  004dd	0f 85 b2 00 00
	00		 jne	 $LN18@PyType_Rea

; 4259 :         if (type->tp_doc != NULL) {

  004e3	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  004eb	48 83 b8 08 01
	00 00 00	 cmp	 QWORD PTR [rax+264], 0
  004f3	74 68		 je	 SHORT $LN17@PyType_Rea

; 4260 :             PyObject *doc = PyUnicode_FromString(type->tp_doc);

  004f5	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  004fd	48 8b 88 08 01
	00 00		 mov	 rcx, QWORD PTR [rax+264]
  00504	e8 00 00 00 00	 call	 PyUnicode_FromString
  00509	48 89 44 24 50	 mov	 QWORD PTR doc$24038[rsp], rax

; 4261 :             if (doc == NULL)

  0050e	48 83 7c 24 50
	00		 cmp	 QWORD PTR doc$24038[rsp], 0
  00514	75 05		 jne	 SHORT $LN16@PyType_Rea

; 4262 :                 goto error;

  00516	e9 2b 03 00 00	 jmp	 $error$23985
$LN16@PyType_Rea:

; 4263 :             _PyDict_SetItemId(type->tp_dict, &PyId___doc__, doc);

  0051b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId___doc__
  00520	8b c0		 mov	 eax, eax
  00522	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00528	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00531	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00535	4c 8b 44 24 50	 mov	 r8, QWORD PTR doc$24038[rsp]
  0053a	48 8b d0	 mov	 rdx, rax
  0053d	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  00545	48 8b 88 60 01
	00 00		 mov	 rcx, QWORD PTR [rax+352]
  0054c	e8 00 00 00 00	 call	 _PyDict_SetItemId

; 4264 :             Py_DECREF(doc);

  00551	48 8b 4c 24 50	 mov	 rcx, QWORD PTR doc$24038[rsp]
  00556	e8 00 00 00 00	 call	 _Py_DecRef

; 4265 :         } else {

  0055b	eb 38		 jmp	 SHORT $LN15@PyType_Rea
$LN17@PyType_Rea:

; 4266 :             _PyDict_SetItemId(type->tp_dict,
; 4267 :                               &PyId___doc__, Py_None);

  0055d	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId___doc__
  00562	8b c0		 mov	 eax, eax
  00564	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0056a	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00573	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00577	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:_Py_NoneStruct
  0057e	48 8b d0	 mov	 rdx, rax
  00581	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  00589	48 8b 88 60 01
	00 00		 mov	 rcx, QWORD PTR [rax+352]
  00590	e8 00 00 00 00	 call	 _PyDict_SetItemId
$LN15@PyType_Rea:
$LN18@PyType_Rea:

; 4268 :         }
; 4269 :     }
; 4270 : 
; 4271 :     /* Hack for tp_hash and __hash__.
; 4272 :        If after all that, tp_hash is still NULL, and __hash__ is not in
; 4273 :        tp_dict, set tp_hash to PyObject_HashNotImplemented and
; 4274 :        tp_dict['__hash__'] equal to None.
; 4275 :        This signals that __hash__ is not inherited.
; 4276 :      */
; 4277 :     if (type->tp_hash == NULL) {

  00595	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  0059d	48 83 b8 d0 00
	00 00 00	 cmp	 QWORD PTR [rax+208], 0
  005a5	0f 85 8d 00 00
	00		 jne	 $LN14@PyType_Rea

; 4278 :         if (_PyDict_GetItemId(type->tp_dict, &PyId___hash__) == NULL) {

  005ab	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId___hash__
  005b0	8b c0		 mov	 eax, eax
  005b2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  005b8	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  005c1	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  005c5	48 8b d0	 mov	 rdx, rax
  005c8	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  005d0	48 8b 88 60 01
	00 00		 mov	 rcx, QWORD PTR [rax+352]
  005d7	e8 00 00 00 00	 call	 _PyDict_GetItemId
  005dc	48 85 c0	 test	 rax, rax
  005df	75 57		 jne	 SHORT $LN13@PyType_Rea

; 4279 :             if (_PyDict_SetItemId(type->tp_dict, &PyId___hash__, Py_None) < 0)

  005e1	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId___hash__
  005e6	8b c0		 mov	 eax, eax
  005e8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  005ee	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  005f7	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  005fb	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:_Py_NoneStruct
  00602	48 8b d0	 mov	 rdx, rax
  00605	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  0060d	48 8b 88 60 01
	00 00		 mov	 rcx, QWORD PTR [rax+352]
  00614	e8 00 00 00 00	 call	 _PyDict_SetItemId
  00619	85 c0		 test	 eax, eax
  0061b	7d 05		 jge	 SHORT $LN12@PyType_Rea

; 4280 :                 goto error;

  0061d	e9 24 02 00 00	 jmp	 $error$23985
$LN12@PyType_Rea:

; 4281 :             type->tp_hash = PyObject_HashNotImplemented;

  00622	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  0062a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyObject_HashNotImplemented
  00631	48 89 88 d0 00
	00 00		 mov	 QWORD PTR [rax+208], rcx
$LN13@PyType_Rea:
$LN14@PyType_Rea:

; 4282 :         }
; 4283 :     }
; 4284 : 
; 4285 :     /* Some more special stuff */
; 4286 :     base = type->tp_base;

  00638	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  00640	48 8b 80 58 01
	00 00		 mov	 rax, QWORD PTR [rax+344]
  00647	48 89 44 24 30	 mov	 QWORD PTR base$[rsp], rax

; 4287 :     if (base != NULL) {

  0064c	48 83 7c 24 30
	00		 cmp	 QWORD PTR base$[rsp], 0
  00652	0f 84 b4 00 00
	00		 je	 $LN11@PyType_Rea

; 4288 :         if (type->tp_as_number == NULL)

  00658	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  00660	48 83 b8 b8 00
	00 00 00	 cmp	 QWORD PTR [rax+184], 0
  00668	75 1b		 jne	 SHORT $LN10@PyType_Rea

; 4289 :             type->tp_as_number = base->tp_as_number;

  0066a	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  00672	48 8b 4c 24 30	 mov	 rcx, QWORD PTR base$[rsp]
  00677	48 8b 89 b8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+184]
  0067e	48 89 88 b8 00
	00 00		 mov	 QWORD PTR [rax+184], rcx
$LN10@PyType_Rea:

; 4290 :         if (type->tp_as_sequence == NULL)

  00685	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  0068d	48 83 b8 c0 00
	00 00 00	 cmp	 QWORD PTR [rax+192], 0
  00695	75 1b		 jne	 SHORT $LN9@PyType_Rea

; 4291 :             type->tp_as_sequence = base->tp_as_sequence;

  00697	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  0069f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR base$[rsp]
  006a4	48 8b 89 c0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+192]
  006ab	48 89 88 c0 00
	00 00		 mov	 QWORD PTR [rax+192], rcx
$LN9@PyType_Rea:

; 4292 :         if (type->tp_as_mapping == NULL)

  006b2	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  006ba	48 83 b8 c8 00
	00 00 00	 cmp	 QWORD PTR [rax+200], 0
  006c2	75 1b		 jne	 SHORT $LN8@PyType_Rea

; 4293 :             type->tp_as_mapping = base->tp_as_mapping;

  006c4	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  006cc	48 8b 4c 24 30	 mov	 rcx, QWORD PTR base$[rsp]
  006d1	48 8b 89 c8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+200]
  006d8	48 89 88 c8 00
	00 00		 mov	 QWORD PTR [rax+200], rcx
$LN8@PyType_Rea:

; 4294 :         if (type->tp_as_buffer == NULL)

  006df	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  006e7	48 83 b8 f8 00
	00 00 00	 cmp	 QWORD PTR [rax+248], 0
  006ef	75 1b		 jne	 SHORT $LN7@PyType_Rea

; 4295 :             type->tp_as_buffer = base->tp_as_buffer;

  006f1	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  006f9	48 8b 4c 24 30	 mov	 rcx, QWORD PTR base$[rsp]
  006fe	48 8b 89 f8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+248]
  00705	48 89 88 f8 00
	00 00		 mov	 QWORD PTR [rax+248], rcx
$LN7@PyType_Rea:
$LN11@PyType_Rea:

; 4296 :     }
; 4297 : 
; 4298 :     /* Link into each base class's list of subclasses */
; 4299 :     bases = type->tp_bases;

  0070c	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  00714	48 8b 80 a8 01
	00 00		 mov	 rax, QWORD PTR [rax+424]
  0071b	48 89 44 24 38	 mov	 QWORD PTR bases$[rsp], rax

; 4300 :     n = PyTuple_GET_SIZE(bases);

  00720	48 8b 44 24 38	 mov	 rax, QWORD PTR bases$[rsp]
  00725	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00729	48 89 44 24 20	 mov	 QWORD PTR n$[rsp], rax

; 4301 :     for (i = 0; i < n; i++) {

  0072e	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  00737	eb 0d		 jmp	 SHORT $LN6@PyType_Rea
$LN5@PyType_Rea:
  00739	48 8b 44 24 28	 mov	 rax, QWORD PTR i$[rsp]
  0073e	48 ff c0	 inc	 rax
  00741	48 89 44 24 28	 mov	 QWORD PTR i$[rsp], rax
$LN6@PyType_Rea:
  00746	48 8b 44 24 20	 mov	 rax, QWORD PTR n$[rsp]
  0074b	48 39 44 24 28	 cmp	 QWORD PTR i$[rsp], rax
  00750	7d 49		 jge	 SHORT $LN4@PyType_Rea

; 4302 :         PyObject *b = PyTuple_GET_ITEM(bases, i);

  00752	48 8b 44 24 38	 mov	 rax, QWORD PTR bases$[rsp]
  00757	48 8b 4c 24 28	 mov	 rcx, QWORD PTR i$[rsp]
  0075c	48 8b 44 c8 70	 mov	 rax, QWORD PTR [rax+rcx*8+112]
  00761	48 89 44 24 58	 mov	 QWORD PTR b$24062[rsp], rax

; 4303 :         if (PyType_Check(b) &&
; 4304 :             add_subclass((PyTypeObject *)b, type) < 0)

  00766	48 8b 44 24 58	 mov	 rax, QWORD PTR b$24062[rsp]
  0076b	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0076f	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00775	25 00 00 00 80	 and	 eax, -2147483648	; ffffffff80000000H
  0077a	85 c0		 test	 eax, eax
  0077c	74 1b		 je	 SHORT $LN3@PyType_Rea
  0077e	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR type$[rsp]
  00786	48 8b 4c 24 58	 mov	 rcx, QWORD PTR b$24062[rsp]
  0078b	e8 00 00 00 00	 call	 add_subclass
  00790	85 c0		 test	 eax, eax
  00792	7d 05		 jge	 SHORT $LN3@PyType_Rea

; 4305 :             goto error;

  00794	e9 ad 00 00 00	 jmp	 $error$23985
$LN3@PyType_Rea:

; 4306 :     }

  00799	eb 9e		 jmp	 SHORT $LN5@PyType_Rea
$LN4@PyType_Rea:

; 4307 : 
; 4308 :     /* Warn for a type that implements tp_compare (now known as
; 4309 :        tp_reserved) but not tp_richcompare. */
; 4310 :     if (type->tp_reserved && !type->tp_richcompare) {

  0079b	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  007a3	48 83 b8 a8 00
	00 00 00	 cmp	 QWORD PTR [rax+168], 0
  007ab	74 43		 je	 SHORT $LN2@PyType_Rea
  007ad	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  007b5	48 83 b8 20 01
	00 00 00	 cmp	 QWORD PTR [rax+288], 0
  007bd	75 31		 jne	 SHORT $LN2@PyType_Rea

; 4311 :         int error;
; 4312 :         error = PyErr_WarnFormat(PyExc_DeprecationWarning, 1,
; 4313 :             "Type %.100s defines tp_reserved (formerly tp_compare) "
; 4314 :             "but not tp_richcompare. Comparisons may not behave as intended.",
; 4315 :             type->tp_name);

  007bf	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  007c7	4c 8b 48 70	 mov	 r9, QWORD PTR [rax+112]
  007cb	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0HG@JFHEBFHK@Type?5?$CF?4100s?5defines?5tp_reserved?5@
  007d2	ba 01 00 00 00	 mov	 edx, 1
  007d7	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_DeprecationWarning
  007de	e8 00 00 00 00	 call	 PyErr_WarnFormat
  007e3	89 44 24 60	 mov	 DWORD PTR error$24068[rsp], eax

; 4316 :         if (error == -1)

  007e7	83 7c 24 60 ff	 cmp	 DWORD PTR error$24068[rsp], -1
  007ec	75 02		 jne	 SHORT $LN1@PyType_Rea

; 4317 :             goto error;

  007ee	eb 56		 jmp	 SHORT $error$23985
$LN1@PyType_Rea:
$LN2@PyType_Rea:

; 4318 :     }
; 4319 : 
; 4320 :     /* All done -- set the ready flag */
; 4321 :     assert(type->tp_dict != NULL);

  007f0	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  007f8	48 83 b8 60 01
	00 00 00	 cmp	 QWORD PTR [rax+352], 0
  00800	75 1c		 jne	 SHORT $LN55@PyType_Rea
  00802	41 b8 e1 10 00
	00		 mov	 r8d, 4321		; 000010e1H
  00808	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@GJLLIOPA@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAt?$AAy?$AAp?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  0080f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@OEIGCHFN@?$AAt?$AAy?$AAp?$AAe?$AA?9?$AA?$DO?$AAt?$AAp?$AA_?$AAd?$AAi?$AAc?$AAt?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
  00816	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0081c	33 c0		 xor	 eax, eax
$LN55@PyType_Rea:

; 4322 :     type->tp_flags =
; 4323 :         (type->tp_flags & ~Py_TPFLAGS_READYING) | Py_TPFLAGS_READY;

  0081e	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  00826	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0082c	0f ba f0 0d	 btr	 eax, 13
  00830	0f ba e8 0c	 bts	 eax, 12
  00834	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR type$[rsp]
  0083c	89 81 00 01 00
	00		 mov	 DWORD PTR [rcx+256], eax

; 4324 :     return 0;

  00842	33 c0		 xor	 eax, eax
  00844	eb 25		 jmp	 SHORT $LN45@PyType_Rea
$error$23985:

; 4325 : 
; 4326 :   error:
; 4327 :     type->tp_flags &= ~Py_TPFLAGS_READYING;

  00846	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  0084e	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00854	0f ba f0 0d	 btr	 eax, 13
  00858	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR type$[rsp]
  00860	89 81 00 01 00
	00		 mov	 DWORD PTR [rcx+256], eax

; 4328 :     return -1;

  00866	b8 ff ff ff ff	 mov	 eax, -1
$LN45@PyType_Rea:

; 4329 : }

  0086b	48 83 c4 78	 add	 rsp, 120		; 00000078H
  0086f	c3		 ret	 0
PyType_Ready ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CH@HIIJJPBB@method?5cannot?5be?5both?5class?5and?5@ ; `string'
EXTRN	PyDescr_NewMethod:PROC
EXTRN	PyCFunction_NewEx:PROC
EXTRN	PyDescr_NewClassMethod:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$add_methods DD imagerel add_methods
	DD	imagerel add_methods+361
	DD	imagerel $unwind$add_methods
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$add_methods DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_0CH@HIIJJPBB@method?5cannot?5be?5both?5class?5and?5@
CONST	SEGMENT
??_C@_0CH@HIIJJPBB@method?5cannot?5be?5both?5class?5and?5@ DB 'method can'
	DB	'not be both class and static', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT add_methods
_TEXT	SEGMENT
dict$ = 32
descr$23630 = 40
err$23631 = 48
cfunc$23638 = 56
type$ = 80
meth$ = 88
add_methods PROC					; COMDAT

; 3823 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 3824 :     PyObject *dict = type->tp_dict;

  0000e	48 8b 44 24 50	 mov	 rax, QWORD PTR type$[rsp]
  00013	48 8b 80 60 01
	00 00		 mov	 rax, QWORD PTR [rax+352]
  0001a	48 89 44 24 20	 mov	 QWORD PTR dict$[rsp], rax

; 3825 : 
; 3826 :     for (; meth->ml_name != NULL; meth++) {

  0001f	eb 0e		 jmp	 SHORT $LN12@add_method
$LN11@add_method:
  00021	48 8b 44 24 58	 mov	 rax, QWORD PTR meth$[rsp]
  00026	48 83 c0 20	 add	 rax, 32			; 00000020H
  0002a	48 89 44 24 58	 mov	 QWORD PTR meth$[rsp], rax
$LN12@add_method:
  0002f	48 8b 44 24 58	 mov	 rax, QWORD PTR meth$[rsp]
  00034	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00038	0f 84 24 01 00
	00		 je	 $LN10@add_method

; 3827 :         PyObject *descr;
; 3828 :         int err;
; 3829 :         if (PyDict_GetItemString(dict, meth->ml_name) &&
; 3830 :             !(meth->ml_flags & METH_COEXIST))

  0003e	48 8b 44 24 58	 mov	 rax, QWORD PTR meth$[rsp]
  00043	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00046	48 8b 4c 24 20	 mov	 rcx, QWORD PTR dict$[rsp]
  0004b	e8 00 00 00 00	 call	 PyDict_GetItemString
  00050	48 85 c0	 test	 rax, rax
  00053	74 11		 je	 SHORT $LN9@add_method
  00055	48 8b 44 24 58	 mov	 rax, QWORD PTR meth$[rsp]
  0005a	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
  0005d	83 e0 40	 and	 eax, 64			; 00000040H
  00060	85 c0		 test	 eax, eax
  00062	75 02		 jne	 SHORT $LN9@add_method

; 3831 :                 continue;

  00064	eb bb		 jmp	 SHORT $LN11@add_method
$LN9@add_method:

; 3832 :         if (meth->ml_flags & METH_CLASS) {

  00066	48 8b 44 24 58	 mov	 rax, QWORD PTR meth$[rsp]
  0006b	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
  0006e	83 e0 10	 and	 eax, 16
  00071	85 c0		 test	 eax, eax
  00073	74 42		 je	 SHORT $LN8@add_method

; 3833 :             if (meth->ml_flags & METH_STATIC) {

  00075	48 8b 44 24 58	 mov	 rax, QWORD PTR meth$[rsp]
  0007a	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
  0007d	83 e0 20	 and	 eax, 32			; 00000020H
  00080	85 c0		 test	 eax, eax
  00082	74 1d		 je	 SHORT $LN7@add_method

; 3834 :                 PyErr_SetString(PyExc_ValueError,
; 3835 :                      "method cannot be both class and static");

  00084	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CH@HIIJJPBB@method?5cannot?5be?5both?5class?5and?5@
  0008b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00092	e8 00 00 00 00	 call	 PyErr_SetString

; 3836 :                 return -1;

  00097	b8 ff ff ff ff	 mov	 eax, -1
  0009c	e9 c3 00 00 00	 jmp	 $LN13@add_method
$LN7@add_method:

; 3837 :             }
; 3838 :             descr = PyDescr_NewClassMethod(type, meth);

  000a1	48 8b 54 24 58	 mov	 rdx, QWORD PTR meth$[rsp]
  000a6	48 8b 4c 24 50	 mov	 rcx, QWORD PTR type$[rsp]
  000ab	e8 00 00 00 00	 call	 PyDescr_NewClassMethod
  000b0	48 89 44 24 28	 mov	 QWORD PTR descr$23630[rsp], rax
  000b5	eb 64		 jmp	 SHORT $LN6@add_method
$LN8@add_method:

; 3839 :         }
; 3840 :         else if (meth->ml_flags & METH_STATIC) {

  000b7	48 8b 44 24 58	 mov	 rax, QWORD PTR meth$[rsp]
  000bc	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
  000bf	83 e0 20	 and	 eax, 32			; 00000020H
  000c2	85 c0		 test	 eax, eax
  000c4	74 41		 je	 SHORT $LN5@add_method

; 3841 :             PyObject *cfunc = PyCFunction_New(meth, (PyObject*)type);

  000c6	45 33 c0	 xor	 r8d, r8d
  000c9	48 8b 54 24 50	 mov	 rdx, QWORD PTR type$[rsp]
  000ce	48 8b 4c 24 58	 mov	 rcx, QWORD PTR meth$[rsp]
  000d3	e8 00 00 00 00	 call	 PyCFunction_NewEx
  000d8	48 89 44 24 38	 mov	 QWORD PTR cfunc$23638[rsp], rax

; 3842 :             if (cfunc == NULL)

  000dd	48 83 7c 24 38
	00		 cmp	 QWORD PTR cfunc$23638[rsp], 0
  000e3	75 07		 jne	 SHORT $LN4@add_method

; 3843 :                 return -1;

  000e5	b8 ff ff ff ff	 mov	 eax, -1
  000ea	eb 78		 jmp	 SHORT $LN13@add_method
$LN4@add_method:

; 3844 :             descr = PyStaticMethod_New(cfunc);

  000ec	48 8b 4c 24 38	 mov	 rcx, QWORD PTR cfunc$23638[rsp]
  000f1	e8 00 00 00 00	 call	 PyStaticMethod_New
  000f6	48 89 44 24 28	 mov	 QWORD PTR descr$23630[rsp], rax

; 3845 :             Py_DECREF(cfunc);

  000fb	48 8b 4c 24 38	 mov	 rcx, QWORD PTR cfunc$23638[rsp]
  00100	e8 00 00 00 00	 call	 _Py_DecRef

; 3846 :         }
; 3847 :         else {

  00105	eb 14		 jmp	 SHORT $LN3@add_method
$LN5@add_method:

; 3848 :             descr = PyDescr_NewMethod(type, meth);

  00107	48 8b 54 24 58	 mov	 rdx, QWORD PTR meth$[rsp]
  0010c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR type$[rsp]
  00111	e8 00 00 00 00	 call	 PyDescr_NewMethod
  00116	48 89 44 24 28	 mov	 QWORD PTR descr$23630[rsp], rax
$LN3@add_method:
$LN6@add_method:

; 3849 :         }
; 3850 :         if (descr == NULL)

  0011b	48 83 7c 24 28
	00		 cmp	 QWORD PTR descr$23630[rsp], 0
  00121	75 07		 jne	 SHORT $LN2@add_method

; 3851 :             return -1;

  00123	b8 ff ff ff ff	 mov	 eax, -1
  00128	eb 3a		 jmp	 SHORT $LN13@add_method
$LN2@add_method:

; 3852 :         err = PyDict_SetItemString(dict, meth->ml_name, descr);

  0012a	4c 8b 44 24 28	 mov	 r8, QWORD PTR descr$23630[rsp]
  0012f	48 8b 44 24 58	 mov	 rax, QWORD PTR meth$[rsp]
  00134	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00137	48 8b 4c 24 20	 mov	 rcx, QWORD PTR dict$[rsp]
  0013c	e8 00 00 00 00	 call	 PyDict_SetItemString
  00141	89 44 24 30	 mov	 DWORD PTR err$23631[rsp], eax

; 3853 :         Py_DECREF(descr);

  00145	48 8b 4c 24 28	 mov	 rcx, QWORD PTR descr$23630[rsp]
  0014a	e8 00 00 00 00	 call	 _Py_DecRef

; 3854 :         if (err < 0)

  0014f	83 7c 24 30 00	 cmp	 DWORD PTR err$23631[rsp], 0
  00154	7d 07		 jge	 SHORT $LN1@add_method

; 3855 :             return -1;

  00156	b8 ff ff ff ff	 mov	 eax, -1
  0015b	eb 07		 jmp	 SHORT $LN13@add_method
$LN1@add_method:

; 3856 :     }

  0015d	e9 bf fe ff ff	 jmp	 $LN11@add_method
$LN10@add_method:

; 3857 :     return 0;

  00162	33 c0		 xor	 eax, eax
$LN13@add_method:

; 3858 : }

  00164	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00168	c3		 ret	 0
add_methods ENDP
_TEXT	ENDS
EXTRN	PyDescr_NewMember:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$add_members DD imagerel add_members
	DD	imagerel add_members+174
	DD	imagerel $unwind$add_members
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$add_members DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT add_members
_TEXT	SEGMENT
dict$ = 32
descr$23660 = 40
type$ = 64
memb$ = 72
add_members PROC					; COMDAT

; 3862 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 3863 :     PyObject *dict = type->tp_dict;

  0000e	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  00013	48 8b 80 60 01
	00 00		 mov	 rax, QWORD PTR [rax+352]
  0001a	48 89 44 24 20	 mov	 QWORD PTR dict$[rsp], rax

; 3864 : 
; 3865 :     for (; memb->name != NULL; memb++) {

  0001f	eb 0e		 jmp	 SHORT $LN6@add_member
$LN5@add_member:
  00021	48 8b 44 24 48	 mov	 rax, QWORD PTR memb$[rsp]
  00026	48 83 c0 28	 add	 rax, 40			; 00000028H
  0002a	48 89 44 24 48	 mov	 QWORD PTR memb$[rsp], rax
$LN6@add_member:
  0002f	48 8b 44 24 48	 mov	 rax, QWORD PTR memb$[rsp]
  00034	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00038	74 6d		 je	 SHORT $LN4@add_member

; 3866 :         PyObject *descr;
; 3867 :         if (PyDict_GetItemString(dict, memb->name))

  0003a	48 8b 44 24 48	 mov	 rax, QWORD PTR memb$[rsp]
  0003f	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00042	48 8b 4c 24 20	 mov	 rcx, QWORD PTR dict$[rsp]
  00047	e8 00 00 00 00	 call	 PyDict_GetItemString
  0004c	48 85 c0	 test	 rax, rax
  0004f	74 02		 je	 SHORT $LN3@add_member

; 3868 :             continue;

  00051	eb ce		 jmp	 SHORT $LN5@add_member
$LN3@add_member:

; 3869 :         descr = PyDescr_NewMember(type, memb);

  00053	48 8b 54 24 48	 mov	 rdx, QWORD PTR memb$[rsp]
  00058	48 8b 4c 24 40	 mov	 rcx, QWORD PTR type$[rsp]
  0005d	e8 00 00 00 00	 call	 PyDescr_NewMember
  00062	48 89 44 24 28	 mov	 QWORD PTR descr$23660[rsp], rax

; 3870 :         if (descr == NULL)

  00067	48 83 7c 24 28
	00		 cmp	 QWORD PTR descr$23660[rsp], 0
  0006d	75 07		 jne	 SHORT $LN2@add_member

; 3871 :             return -1;

  0006f	b8 ff ff ff ff	 mov	 eax, -1
  00074	eb 33		 jmp	 SHORT $LN7@add_member
$LN2@add_member:

; 3872 :         if (PyDict_SetItemString(dict, memb->name, descr) < 0)

  00076	4c 8b 44 24 28	 mov	 r8, QWORD PTR descr$23660[rsp]
  0007b	48 8b 44 24 48	 mov	 rax, QWORD PTR memb$[rsp]
  00080	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00083	48 8b 4c 24 20	 mov	 rcx, QWORD PTR dict$[rsp]
  00088	e8 00 00 00 00	 call	 PyDict_SetItemString
  0008d	85 c0		 test	 eax, eax
  0008f	7d 07		 jge	 SHORT $LN1@add_member

; 3873 :             return -1;

  00091	b8 ff ff ff ff	 mov	 eax, -1
  00096	eb 11		 jmp	 SHORT $LN7@add_member
$LN1@add_member:

; 3874 :         Py_DECREF(descr);

  00098	48 8b 4c 24 28	 mov	 rcx, QWORD PTR descr$23660[rsp]
  0009d	e8 00 00 00 00	 call	 _Py_DecRef

; 3875 :     }

  000a2	e9 7a ff ff ff	 jmp	 $LN5@add_member
$LN4@add_member:

; 3876 :     return 0;

  000a7	33 c0		 xor	 eax, eax
$LN7@add_member:

; 3877 : }

  000a9	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000ad	c3		 ret	 0
add_members ENDP
_TEXT	ENDS
EXTRN	PyDescr_NewGetSet:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$add_getset DD imagerel add_getset
	DD	imagerel add_getset+174
	DD	imagerel $unwind$add_getset
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$add_getset DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT add_getset
_TEXT	SEGMENT
dict$ = 32
descr$23677 = 40
type$ = 64
gsp$ = 72
add_getset PROC						; COMDAT

; 3881 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 3882 :     PyObject *dict = type->tp_dict;

  0000e	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  00013	48 8b 80 60 01
	00 00		 mov	 rax, QWORD PTR [rax+352]
  0001a	48 89 44 24 20	 mov	 QWORD PTR dict$[rsp], rax

; 3883 : 
; 3884 :     for (; gsp->name != NULL; gsp++) {

  0001f	eb 0e		 jmp	 SHORT $LN6@add_getset
$LN5@add_getset:
  00021	48 8b 44 24 48	 mov	 rax, QWORD PTR gsp$[rsp]
  00026	48 83 c0 28	 add	 rax, 40			; 00000028H
  0002a	48 89 44 24 48	 mov	 QWORD PTR gsp$[rsp], rax
$LN6@add_getset:
  0002f	48 8b 44 24 48	 mov	 rax, QWORD PTR gsp$[rsp]
  00034	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00038	74 6d		 je	 SHORT $LN4@add_getset

; 3885 :         PyObject *descr;
; 3886 :         if (PyDict_GetItemString(dict, gsp->name))

  0003a	48 8b 44 24 48	 mov	 rax, QWORD PTR gsp$[rsp]
  0003f	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00042	48 8b 4c 24 20	 mov	 rcx, QWORD PTR dict$[rsp]
  00047	e8 00 00 00 00	 call	 PyDict_GetItemString
  0004c	48 85 c0	 test	 rax, rax
  0004f	74 02		 je	 SHORT $LN3@add_getset

; 3887 :             continue;

  00051	eb ce		 jmp	 SHORT $LN5@add_getset
$LN3@add_getset:

; 3888 :         descr = PyDescr_NewGetSet(type, gsp);

  00053	48 8b 54 24 48	 mov	 rdx, QWORD PTR gsp$[rsp]
  00058	48 8b 4c 24 40	 mov	 rcx, QWORD PTR type$[rsp]
  0005d	e8 00 00 00 00	 call	 PyDescr_NewGetSet
  00062	48 89 44 24 28	 mov	 QWORD PTR descr$23677[rsp], rax

; 3889 : 
; 3890 :         if (descr == NULL)

  00067	48 83 7c 24 28
	00		 cmp	 QWORD PTR descr$23677[rsp], 0
  0006d	75 07		 jne	 SHORT $LN2@add_getset

; 3891 :             return -1;

  0006f	b8 ff ff ff ff	 mov	 eax, -1
  00074	eb 33		 jmp	 SHORT $LN7@add_getset
$LN2@add_getset:

; 3892 :         if (PyDict_SetItemString(dict, gsp->name, descr) < 0)

  00076	4c 8b 44 24 28	 mov	 r8, QWORD PTR descr$23677[rsp]
  0007b	48 8b 44 24 48	 mov	 rax, QWORD PTR gsp$[rsp]
  00080	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00083	48 8b 4c 24 20	 mov	 rcx, QWORD PTR dict$[rsp]
  00088	e8 00 00 00 00	 call	 PyDict_SetItemString
  0008d	85 c0		 test	 eax, eax
  0008f	7d 07		 jge	 SHORT $LN1@add_getset

; 3893 :             return -1;

  00091	b8 ff ff ff ff	 mov	 eax, -1
  00096	eb 11		 jmp	 SHORT $LN7@add_getset
$LN1@add_getset:

; 3894 :         Py_DECREF(descr);

  00098	48 8b 4c 24 28	 mov	 rcx, QWORD PTR descr$23677[rsp]
  0009d	e8 00 00 00 00	 call	 _Py_DecRef

; 3895 :     }

  000a2	e9 7a ff ff ff	 jmp	 $LN5@add_getset
$LN4@add_getset:

; 3896 :     return 0;

  000a7	33 c0		 xor	 eax, eax
$LN7@add_getset:

; 3897 : }

  000a9	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000ad	c3		 ret	 0
add_getset ENDP
_TEXT	ENDS
EXTRN	PyList_Type:BYTE
EXTRN	PyBytes_Type:BYTE
EXTRN	PyLong_Type:BYTE
EXTRN	PyExc_BaseException:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$inherit_special DD imagerel inherit_special
	DD	imagerel inherit_special+827
	DD	imagerel $unwind$inherit_special
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$inherit_special DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT inherit_special
_TEXT	SEGMENT
type$ = 48
base$ = 56
inherit_special PROC					; COMDAT

; 3901 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 3902 : 
; 3903 :     /* Copying basicsize is connected to the GC flags */
; 3904 :     if (!(type->tp_flags & Py_TPFLAGS_HAVE_GC) &&
; 3905 :         (base->tp_flags & Py_TPFLAGS_HAVE_GC) &&
; 3906 :         (!type->tp_traverse && !type->tp_clear)) {

  0000e	48 8b 44 24 30	 mov	 rax, QWORD PTR type$[rsp]
  00013	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00019	25 00 40 00 00	 and	 eax, 16384		; 00004000H
  0001e	85 c0		 test	 eax, eax
  00020	0f 85 9e 00 00
	00		 jne	 $LN25@inherit_sp
  00026	48 8b 44 24 38	 mov	 rax, QWORD PTR base$[rsp]
  0002b	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00031	25 00 40 00 00	 and	 eax, 16384		; 00004000H
  00036	85 c0		 test	 eax, eax
  00038	0f 84 86 00 00
	00		 je	 $LN25@inherit_sp
  0003e	48 8b 44 24 30	 mov	 rax, QWORD PTR type$[rsp]
  00043	48 83 b8 10 01
	00 00 00	 cmp	 QWORD PTR [rax+272], 0
  0004b	75 77		 jne	 SHORT $LN25@inherit_sp
  0004d	48 8b 44 24 30	 mov	 rax, QWORD PTR type$[rsp]
  00052	48 83 b8 18 01
	00 00 00	 cmp	 QWORD PTR [rax+280], 0
  0005a	75 68		 jne	 SHORT $LN25@inherit_sp

; 3907 :         type->tp_flags |= Py_TPFLAGS_HAVE_GC;

  0005c	48 8b 44 24 30	 mov	 rax, QWORD PTR type$[rsp]
  00061	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00067	0f ba e8 0e	 bts	 eax, 14
  0006b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR type$[rsp]
  00070	89 81 00 01 00
	00		 mov	 DWORD PTR [rcx+256], eax

; 3908 :         if (type->tp_traverse == NULL)

  00076	48 8b 44 24 30	 mov	 rax, QWORD PTR type$[rsp]
  0007b	48 83 b8 10 01
	00 00 00	 cmp	 QWORD PTR [rax+272], 0
  00083	75 18		 jne	 SHORT $LN24@inherit_sp

; 3909 :             type->tp_traverse = base->tp_traverse;

  00085	48 8b 44 24 30	 mov	 rax, QWORD PTR type$[rsp]
  0008a	48 8b 4c 24 38	 mov	 rcx, QWORD PTR base$[rsp]
  0008f	48 8b 89 10 01
	00 00		 mov	 rcx, QWORD PTR [rcx+272]
  00096	48 89 88 10 01
	00 00		 mov	 QWORD PTR [rax+272], rcx
$LN24@inherit_sp:

; 3910 :         if (type->tp_clear == NULL)

  0009d	48 8b 44 24 30	 mov	 rax, QWORD PTR type$[rsp]
  000a2	48 83 b8 18 01
	00 00 00	 cmp	 QWORD PTR [rax+280], 0
  000aa	75 18		 jne	 SHORT $LN23@inherit_sp

; 3911 :             type->tp_clear = base->tp_clear;

  000ac	48 8b 44 24 30	 mov	 rax, QWORD PTR type$[rsp]
  000b1	48 8b 4c 24 38	 mov	 rcx, QWORD PTR base$[rsp]
  000b6	48 8b 89 18 01
	00 00		 mov	 rcx, QWORD PTR [rcx+280]
  000bd	48 89 88 18 01
	00 00		 mov	 QWORD PTR [rax+280], rcx
$LN23@inherit_sp:
$LN25@inherit_sp:

; 3912 :     }
; 3913 :     {
; 3914 :         /* The condition below could use some explanation.
; 3915 :            It appears that tp_new is not inherited for static types
; 3916 :            whose base class is 'object'; this seems to be a precaution
; 3917 :            so that old extension types don't suddenly become
; 3918 :            callable (object.__new__ wouldn't insure the invariants
; 3919 :            that the extension type's own factory function ensures).
; 3920 :            Heap types, of course, are under our control, so they do
; 3921 :            inherit tp_new; static extension types that specify some
; 3922 :            other built-in type as the default also
; 3923 :            inherit object.__new__. */
; 3924 :         if (base != &PyBaseObject_Type ||
; 3925 :             (type->tp_flags & Py_TPFLAGS_HEAPTYPE)) {

  000c4	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyBaseObject_Type
  000cb	48 39 44 24 38	 cmp	 QWORD PTR base$[rsp], rax
  000d0	75 14		 jne	 SHORT $LN21@inherit_sp
  000d2	48 8b 44 24 30	 mov	 rax, QWORD PTR type$[rsp]
  000d7	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000dd	25 00 02 00 00	 and	 eax, 512		; 00000200H
  000e2	85 c0		 test	 eax, eax
  000e4	74 27		 je	 SHORT $LN22@inherit_sp
$LN21@inherit_sp:

; 3926 :             if (type->tp_new == NULL)

  000e6	48 8b 44 24 30	 mov	 rax, QWORD PTR type$[rsp]
  000eb	48 83 b8 90 01
	00 00 00	 cmp	 QWORD PTR [rax+400], 0
  000f3	75 18		 jne	 SHORT $LN20@inherit_sp

; 3927 :                 type->tp_new = base->tp_new;

  000f5	48 8b 44 24 30	 mov	 rax, QWORD PTR type$[rsp]
  000fa	48 8b 4c 24 38	 mov	 rcx, QWORD PTR base$[rsp]
  000ff	48 8b 89 90 01
	00 00		 mov	 rcx, QWORD PTR [rcx+400]
  00106	48 89 88 90 01
	00 00		 mov	 QWORD PTR [rax+400], rcx
$LN20@inherit_sp:
$LN22@inherit_sp:

; 3928 :         }
; 3929 :     }
; 3930 :     if (type->tp_basicsize == 0)

  0010d	48 8b 44 24 30	 mov	 rax, QWORD PTR type$[rsp]
  00112	48 83 78 78 00	 cmp	 QWORD PTR [rax+120], 0
  00117	75 12		 jne	 SHORT $LN19@inherit_sp

; 3931 :         type->tp_basicsize = base->tp_basicsize;

  00119	48 8b 44 24 30	 mov	 rax, QWORD PTR type$[rsp]
  0011e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR base$[rsp]
  00123	48 8b 49 78	 mov	 rcx, QWORD PTR [rcx+120]
  00127	48 89 48 78	 mov	 QWORD PTR [rax+120], rcx
$LN19@inherit_sp:

; 3932 : 
; 3933 :     /* Copy other non-function slots */
; 3934 : 
; 3935 : #undef COPYVAL
; 3936 : #define COPYVAL(SLOT) \
; 3937 :     if (type->SLOT == 0) type->SLOT = base->SLOT
; 3938 : 
; 3939 :     COPYVAL(tp_itemsize);

  0012b	48 8b 44 24 30	 mov	 rax, QWORD PTR type$[rsp]
  00130	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  00138	75 18		 jne	 SHORT $LN18@inherit_sp
  0013a	48 8b 44 24 30	 mov	 rax, QWORD PTR type$[rsp]
  0013f	48 8b 4c 24 38	 mov	 rcx, QWORD PTR base$[rsp]
  00144	48 8b 89 80 00
	00 00		 mov	 rcx, QWORD PTR [rcx+128]
  0014b	48 89 88 80 00
	00 00		 mov	 QWORD PTR [rax+128], rcx
$LN18@inherit_sp:

; 3940 :     COPYVAL(tp_weaklistoffset);

  00152	48 8b 44 24 30	 mov	 rax, QWORD PTR type$[rsp]
  00157	48 83 b8 28 01
	00 00 00	 cmp	 QWORD PTR [rax+296], 0
  0015f	75 18		 jne	 SHORT $LN17@inherit_sp
  00161	48 8b 44 24 30	 mov	 rax, QWORD PTR type$[rsp]
  00166	48 8b 4c 24 38	 mov	 rcx, QWORD PTR base$[rsp]
  0016b	48 8b 89 28 01
	00 00		 mov	 rcx, QWORD PTR [rcx+296]
  00172	48 89 88 28 01
	00 00		 mov	 QWORD PTR [rax+296], rcx
$LN17@inherit_sp:

; 3941 :     COPYVAL(tp_dictoffset);

  00179	48 8b 44 24 30	 mov	 rax, QWORD PTR type$[rsp]
  0017e	48 83 b8 78 01
	00 00 00	 cmp	 QWORD PTR [rax+376], 0
  00186	75 18		 jne	 SHORT $LN16@inherit_sp
  00188	48 8b 44 24 30	 mov	 rax, QWORD PTR type$[rsp]
  0018d	48 8b 4c 24 38	 mov	 rcx, QWORD PTR base$[rsp]
  00192	48 8b 89 78 01
	00 00		 mov	 rcx, QWORD PTR [rcx+376]
  00199	48 89 88 78 01
	00 00		 mov	 QWORD PTR [rax+376], rcx
$LN16@inherit_sp:

; 3942 : 
; 3943 :     /* Setup fast subclass flags */
; 3944 :     if (PyType_IsSubtype(base, (PyTypeObject*)PyExc_BaseException))

  001a0	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR PyExc_BaseException
  001a7	48 8b 4c 24 38	 mov	 rcx, QWORD PTR base$[rsp]
  001ac	e8 00 00 00 00	 call	 PyType_IsSubtype
  001b1	85 c0		 test	 eax, eax
  001b3	74 1f		 je	 SHORT $LN15@inherit_sp

; 3945 :         type->tp_flags |= Py_TPFLAGS_BASE_EXC_SUBCLASS;

  001b5	48 8b 44 24 30	 mov	 rax, QWORD PTR type$[rsp]
  001ba	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  001c0	0f ba e8 1e	 bts	 eax, 30
  001c4	48 8b 4c 24 30	 mov	 rcx, QWORD PTR type$[rsp]
  001c9	89 81 00 01 00
	00		 mov	 DWORD PTR [rcx+256], eax
  001cf	e9 62 01 00 00	 jmp	 $LN14@inherit_sp
$LN15@inherit_sp:

; 3946 :     else if (PyType_IsSubtype(base, &PyType_Type))

  001d4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyType_Type
  001db	48 8b 4c 24 38	 mov	 rcx, QWORD PTR base$[rsp]
  001e0	e8 00 00 00 00	 call	 PyType_IsSubtype
  001e5	85 c0		 test	 eax, eax
  001e7	74 20		 je	 SHORT $LN13@inherit_sp

; 3947 :         type->tp_flags |= Py_TPFLAGS_TYPE_SUBCLASS;

  001e9	48 8b 44 24 30	 mov	 rax, QWORD PTR type$[rsp]
  001ee	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  001f4	0d 00 00 00 80	 or	 eax, -2147483648	; ffffffff80000000H
  001f9	48 8b 4c 24 30	 mov	 rcx, QWORD PTR type$[rsp]
  001fe	89 81 00 01 00
	00		 mov	 DWORD PTR [rcx+256], eax
  00204	e9 2d 01 00 00	 jmp	 $LN12@inherit_sp
$LN13@inherit_sp:

; 3948 :     else if (PyType_IsSubtype(base, &PyLong_Type))

  00209	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyLong_Type
  00210	48 8b 4c 24 38	 mov	 rcx, QWORD PTR base$[rsp]
  00215	e8 00 00 00 00	 call	 PyType_IsSubtype
  0021a	85 c0		 test	 eax, eax
  0021c	74 1f		 je	 SHORT $LN11@inherit_sp

; 3949 :         type->tp_flags |= Py_TPFLAGS_LONG_SUBCLASS;

  0021e	48 8b 44 24 30	 mov	 rax, QWORD PTR type$[rsp]
  00223	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00229	0f ba e8 18	 bts	 eax, 24
  0022d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR type$[rsp]
  00232	89 81 00 01 00
	00		 mov	 DWORD PTR [rcx+256], eax
  00238	e9 f9 00 00 00	 jmp	 $LN10@inherit_sp
$LN11@inherit_sp:

; 3950 :     else if (PyType_IsSubtype(base, &PyBytes_Type))

  0023d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyBytes_Type
  00244	48 8b 4c 24 38	 mov	 rcx, QWORD PTR base$[rsp]
  00249	e8 00 00 00 00	 call	 PyType_IsSubtype
  0024e	85 c0		 test	 eax, eax
  00250	74 1f		 je	 SHORT $LN9@inherit_sp

; 3951 :         type->tp_flags |= Py_TPFLAGS_BYTES_SUBCLASS;

  00252	48 8b 44 24 30	 mov	 rax, QWORD PTR type$[rsp]
  00257	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0025d	0f ba e8 1b	 bts	 eax, 27
  00261	48 8b 4c 24 30	 mov	 rcx, QWORD PTR type$[rsp]
  00266	89 81 00 01 00
	00		 mov	 DWORD PTR [rcx+256], eax
  0026c	e9 c5 00 00 00	 jmp	 $LN8@inherit_sp
$LN9@inherit_sp:

; 3952 :     else if (PyType_IsSubtype(base, &PyUnicode_Type))

  00271	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyUnicode_Type
  00278	48 8b 4c 24 38	 mov	 rcx, QWORD PTR base$[rsp]
  0027d	e8 00 00 00 00	 call	 PyType_IsSubtype
  00282	85 c0		 test	 eax, eax
  00284	74 1f		 je	 SHORT $LN7@inherit_sp

; 3953 :         type->tp_flags |= Py_TPFLAGS_UNICODE_SUBCLASS;

  00286	48 8b 44 24 30	 mov	 rax, QWORD PTR type$[rsp]
  0028b	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00291	0f ba e8 1c	 bts	 eax, 28
  00295	48 8b 4c 24 30	 mov	 rcx, QWORD PTR type$[rsp]
  0029a	89 81 00 01 00
	00		 mov	 DWORD PTR [rcx+256], eax
  002a0	e9 91 00 00 00	 jmp	 $LN6@inherit_sp
$LN7@inherit_sp:

; 3954 :     else if (PyType_IsSubtype(base, &PyTuple_Type))

  002a5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyTuple_Type
  002ac	48 8b 4c 24 38	 mov	 rcx, QWORD PTR base$[rsp]
  002b1	e8 00 00 00 00	 call	 PyType_IsSubtype
  002b6	85 c0		 test	 eax, eax
  002b8	74 1c		 je	 SHORT $LN5@inherit_sp

; 3955 :         type->tp_flags |= Py_TPFLAGS_TUPLE_SUBCLASS;

  002ba	48 8b 44 24 30	 mov	 rax, QWORD PTR type$[rsp]
  002bf	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  002c5	0f ba e8 1a	 bts	 eax, 26
  002c9	48 8b 4c 24 30	 mov	 rcx, QWORD PTR type$[rsp]
  002ce	89 81 00 01 00
	00		 mov	 DWORD PTR [rcx+256], eax
  002d4	eb 60		 jmp	 SHORT $LN4@inherit_sp
$LN5@inherit_sp:

; 3956 :     else if (PyType_IsSubtype(base, &PyList_Type))

  002d6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyList_Type
  002dd	48 8b 4c 24 38	 mov	 rcx, QWORD PTR base$[rsp]
  002e2	e8 00 00 00 00	 call	 PyType_IsSubtype
  002e7	85 c0		 test	 eax, eax
  002e9	74 1c		 je	 SHORT $LN3@inherit_sp

; 3957 :         type->tp_flags |= Py_TPFLAGS_LIST_SUBCLASS;

  002eb	48 8b 44 24 30	 mov	 rax, QWORD PTR type$[rsp]
  002f0	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  002f6	0f ba e8 19	 bts	 eax, 25
  002fa	48 8b 4c 24 30	 mov	 rcx, QWORD PTR type$[rsp]
  002ff	89 81 00 01 00
	00		 mov	 DWORD PTR [rcx+256], eax
  00305	eb 2f		 jmp	 SHORT $LN2@inherit_sp
$LN3@inherit_sp:

; 3958 :     else if (PyType_IsSubtype(base, &PyDict_Type))

  00307	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyDict_Type
  0030e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR base$[rsp]
  00313	e8 00 00 00 00	 call	 PyType_IsSubtype
  00318	85 c0		 test	 eax, eax
  0031a	74 1a		 je	 SHORT $LN1@inherit_sp

; 3959 :         type->tp_flags |= Py_TPFLAGS_DICT_SUBCLASS;

  0031c	48 8b 44 24 30	 mov	 rax, QWORD PTR type$[rsp]
  00321	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00327	0f ba e8 1d	 bts	 eax, 29
  0032b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR type$[rsp]
  00330	89 81 00 01 00
	00		 mov	 DWORD PTR [rcx+256], eax
$LN1@inherit_sp:
$LN2@inherit_sp:
$LN4@inherit_sp:
$LN6@inherit_sp:
$LN8@inherit_sp:
$LN10@inherit_sp:
$LN12@inherit_sp:
$LN14@inherit_sp:

; 3960 : }

  00336	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0033a	c3		 ret	 0
inherit_special ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$inherit_slots DD imagerel inherit_slots
	DD	imagerel inherit_slots+7292
	DD	imagerel $unwind$inherit_slots
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$inherit_slots DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT inherit_slots
_TEXT	SEGMENT
basebase$ = 32
type$ = 64
base$ = 72
inherit_slots PROC					; COMDAT

; 3978 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 3979 :     PyTypeObject *basebase;
; 3980 : 
; 3981 : #undef SLOTDEFINED
; 3982 : #undef COPYSLOT
; 3983 : #undef COPYNUM
; 3984 : #undef COPYSEQ
; 3985 : #undef COPYMAP
; 3986 : #undef COPYBUF
; 3987 : 
; 3988 : #define SLOTDEFINED(SLOT) \
; 3989 :     (base->SLOT != 0 && \
; 3990 :      (basebase == NULL || base->SLOT != basebase->SLOT))
; 3991 : 
; 3992 : #define COPYSLOT(SLOT) \
; 3993 :     if (!type->SLOT && SLOTDEFINED(SLOT)) type->SLOT = base->SLOT
; 3994 : 
; 3995 : #define COPYNUM(SLOT) COPYSLOT(tp_as_number->SLOT)
; 3996 : #define COPYSEQ(SLOT) COPYSLOT(tp_as_sequence->SLOT)
; 3997 : #define COPYMAP(SLOT) COPYSLOT(tp_as_mapping->SLOT)
; 3998 : #define COPYBUF(SLOT) COPYSLOT(tp_as_buffer->SLOT)
; 3999 : 
; 4000 :     /* This won't inherit indirect slots (from tp_as_number etc.)
; 4001 :        if type doesn't provide the space. */
; 4002 : 
; 4003 :     if (type->tp_as_number != NULL && base->tp_as_number != NULL) {

  0000e	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  00013	48 83 b8 b8 00
	00 00 00	 cmp	 QWORD PTR [rax+184], 0
  0001b	0f 84 d8 0f 00
	00		 je	 $LN132@inherit_sl
  00021	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  00026	48 83 b8 b8 00
	00 00 00	 cmp	 QWORD PTR [rax+184], 0
  0002e	0f 84 c5 0f 00
	00		 je	 $LN132@inherit_sl

; 4004 :         basebase = base->tp_base;

  00034	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  00039	48 8b 80 58 01
	00 00		 mov	 rax, QWORD PTR [rax+344]
  00040	48 89 44 24 20	 mov	 QWORD PTR basebase$[rsp], rax

; 4005 :         if (basebase->tp_as_number == NULL)

  00045	48 8b 44 24 20	 mov	 rax, QWORD PTR basebase$[rsp]
  0004a	48 83 b8 b8 00
	00 00 00	 cmp	 QWORD PTR [rax+184], 0
  00052	75 09		 jne	 SHORT $LN131@inherit_sl

; 4006 :             basebase = NULL;

  00054	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR basebase$[rsp], 0
$LN131@inherit_sl:

; 4007 :         COPYNUM(nb_add);

  0005d	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  00062	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00069	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0006d	75 58		 jne	 SHORT $LN130@inherit_sl
  0006f	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  00074	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  0007b	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0007f	74 46		 je	 SHORT $LN130@inherit_sl
  00081	48 83 7c 24 20
	00		 cmp	 QWORD PTR basebase$[rsp], 0
  00087	74 20		 je	 SHORT $LN129@inherit_sl
  00089	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  0008e	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00095	48 8b 4c 24 20	 mov	 rcx, QWORD PTR basebase$[rsp]
  0009a	48 8b 89 b8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+184]
  000a1	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000a4	48 39 08	 cmp	 QWORD PTR [rax], rcx
  000a7	74 1e		 je	 SHORT $LN130@inherit_sl
$LN129@inherit_sl:
  000a9	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  000ae	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  000b5	48 8b 4c 24 40	 mov	 rcx, QWORD PTR type$[rsp]
  000ba	48 8b 89 b8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+184]
  000c1	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000c4	48 89 01	 mov	 QWORD PTR [rcx], rax
$LN130@inherit_sl:

; 4008 :         COPYNUM(nb_subtract);

  000c7	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  000cc	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  000d3	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  000d8	75 5d		 jne	 SHORT $LN128@inherit_sl
  000da	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  000df	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  000e6	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  000eb	74 4a		 je	 SHORT $LN128@inherit_sl
  000ed	48 83 7c 24 20
	00		 cmp	 QWORD PTR basebase$[rsp], 0
  000f3	74 22		 je	 SHORT $LN127@inherit_sl
  000f5	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  000fa	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00101	48 8b 4c 24 20	 mov	 rcx, QWORD PTR basebase$[rsp]
  00106	48 8b 89 b8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+184]
  0010d	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00111	48 39 48 08	 cmp	 QWORD PTR [rax+8], rcx
  00115	74 20		 je	 SHORT $LN128@inherit_sl
$LN127@inherit_sl:
  00117	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  0011c	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00123	48 8b 4c 24 40	 mov	 rcx, QWORD PTR type$[rsp]
  00128	48 8b 89 b8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+184]
  0012f	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00133	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
$LN128@inherit_sl:

; 4009 :         COPYNUM(nb_multiply);

  00137	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  0013c	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00143	48 83 78 10 00	 cmp	 QWORD PTR [rax+16], 0
  00148	75 5d		 jne	 SHORT $LN126@inherit_sl
  0014a	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  0014f	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00156	48 83 78 10 00	 cmp	 QWORD PTR [rax+16], 0
  0015b	74 4a		 je	 SHORT $LN126@inherit_sl
  0015d	48 83 7c 24 20
	00		 cmp	 QWORD PTR basebase$[rsp], 0
  00163	74 22		 je	 SHORT $LN125@inherit_sl
  00165	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  0016a	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00171	48 8b 4c 24 20	 mov	 rcx, QWORD PTR basebase$[rsp]
  00176	48 8b 89 b8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+184]
  0017d	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  00181	48 39 48 10	 cmp	 QWORD PTR [rax+16], rcx
  00185	74 20		 je	 SHORT $LN126@inherit_sl
$LN125@inherit_sl:
  00187	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  0018c	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00193	48 8b 4c 24 40	 mov	 rcx, QWORD PTR type$[rsp]
  00198	48 8b 89 b8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+184]
  0019f	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  001a3	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax
$LN126@inherit_sl:

; 4010 :         COPYNUM(nb_remainder);

  001a7	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  001ac	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  001b3	48 83 78 18 00	 cmp	 QWORD PTR [rax+24], 0
  001b8	75 5d		 jne	 SHORT $LN124@inherit_sl
  001ba	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  001bf	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  001c6	48 83 78 18 00	 cmp	 QWORD PTR [rax+24], 0
  001cb	74 4a		 je	 SHORT $LN124@inherit_sl
  001cd	48 83 7c 24 20
	00		 cmp	 QWORD PTR basebase$[rsp], 0
  001d3	74 22		 je	 SHORT $LN123@inherit_sl
  001d5	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  001da	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  001e1	48 8b 4c 24 20	 mov	 rcx, QWORD PTR basebase$[rsp]
  001e6	48 8b 89 b8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+184]
  001ed	48 8b 49 18	 mov	 rcx, QWORD PTR [rcx+24]
  001f1	48 39 48 18	 cmp	 QWORD PTR [rax+24], rcx
  001f5	74 20		 je	 SHORT $LN124@inherit_sl
$LN123@inherit_sl:
  001f7	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  001fc	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00203	48 8b 4c 24 40	 mov	 rcx, QWORD PTR type$[rsp]
  00208	48 8b 89 b8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+184]
  0020f	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  00213	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax
$LN124@inherit_sl:

; 4011 :         COPYNUM(nb_divmod);

  00217	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  0021c	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00223	48 83 78 20 00	 cmp	 QWORD PTR [rax+32], 0
  00228	75 5d		 jne	 SHORT $LN122@inherit_sl
  0022a	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  0022f	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00236	48 83 78 20 00	 cmp	 QWORD PTR [rax+32], 0
  0023b	74 4a		 je	 SHORT $LN122@inherit_sl
  0023d	48 83 7c 24 20
	00		 cmp	 QWORD PTR basebase$[rsp], 0
  00243	74 22		 je	 SHORT $LN121@inherit_sl
  00245	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  0024a	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00251	48 8b 4c 24 20	 mov	 rcx, QWORD PTR basebase$[rsp]
  00256	48 8b 89 b8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+184]
  0025d	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  00261	48 39 48 20	 cmp	 QWORD PTR [rax+32], rcx
  00265	74 20		 je	 SHORT $LN122@inherit_sl
$LN121@inherit_sl:
  00267	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  0026c	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00273	48 8b 4c 24 40	 mov	 rcx, QWORD PTR type$[rsp]
  00278	48 8b 89 b8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+184]
  0027f	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00283	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax
$LN122@inherit_sl:

; 4012 :         COPYNUM(nb_power);

  00287	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  0028c	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00293	48 83 78 28 00	 cmp	 QWORD PTR [rax+40], 0
  00298	75 5d		 jne	 SHORT $LN120@inherit_sl
  0029a	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  0029f	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  002a6	48 83 78 28 00	 cmp	 QWORD PTR [rax+40], 0
  002ab	74 4a		 je	 SHORT $LN120@inherit_sl
  002ad	48 83 7c 24 20
	00		 cmp	 QWORD PTR basebase$[rsp], 0
  002b3	74 22		 je	 SHORT $LN119@inherit_sl
  002b5	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  002ba	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  002c1	48 8b 4c 24 20	 mov	 rcx, QWORD PTR basebase$[rsp]
  002c6	48 8b 89 b8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+184]
  002cd	48 8b 49 28	 mov	 rcx, QWORD PTR [rcx+40]
  002d1	48 39 48 28	 cmp	 QWORD PTR [rax+40], rcx
  002d5	74 20		 je	 SHORT $LN120@inherit_sl
$LN119@inherit_sl:
  002d7	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  002dc	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  002e3	48 8b 4c 24 40	 mov	 rcx, QWORD PTR type$[rsp]
  002e8	48 8b 89 b8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+184]
  002ef	48 8b 40 28	 mov	 rax, QWORD PTR [rax+40]
  002f3	48 89 41 28	 mov	 QWORD PTR [rcx+40], rax
$LN120@inherit_sl:

; 4013 :         COPYNUM(nb_negative);

  002f7	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  002fc	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00303	48 83 78 30 00	 cmp	 QWORD PTR [rax+48], 0
  00308	75 5d		 jne	 SHORT $LN118@inherit_sl
  0030a	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  0030f	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00316	48 83 78 30 00	 cmp	 QWORD PTR [rax+48], 0
  0031b	74 4a		 je	 SHORT $LN118@inherit_sl
  0031d	48 83 7c 24 20
	00		 cmp	 QWORD PTR basebase$[rsp], 0
  00323	74 22		 je	 SHORT $LN117@inherit_sl
  00325	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  0032a	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00331	48 8b 4c 24 20	 mov	 rcx, QWORD PTR basebase$[rsp]
  00336	48 8b 89 b8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+184]
  0033d	48 8b 49 30	 mov	 rcx, QWORD PTR [rcx+48]
  00341	48 39 48 30	 cmp	 QWORD PTR [rax+48], rcx
  00345	74 20		 je	 SHORT $LN118@inherit_sl
$LN117@inherit_sl:
  00347	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  0034c	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00353	48 8b 4c 24 40	 mov	 rcx, QWORD PTR type$[rsp]
  00358	48 8b 89 b8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+184]
  0035f	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  00363	48 89 41 30	 mov	 QWORD PTR [rcx+48], rax
$LN118@inherit_sl:

; 4014 :         COPYNUM(nb_positive);

  00367	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  0036c	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00373	48 83 78 38 00	 cmp	 QWORD PTR [rax+56], 0
  00378	75 5d		 jne	 SHORT $LN116@inherit_sl
  0037a	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  0037f	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00386	48 83 78 38 00	 cmp	 QWORD PTR [rax+56], 0
  0038b	74 4a		 je	 SHORT $LN116@inherit_sl
  0038d	48 83 7c 24 20
	00		 cmp	 QWORD PTR basebase$[rsp], 0
  00393	74 22		 je	 SHORT $LN115@inherit_sl
  00395	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  0039a	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  003a1	48 8b 4c 24 20	 mov	 rcx, QWORD PTR basebase$[rsp]
  003a6	48 8b 89 b8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+184]
  003ad	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  003b1	48 39 48 38	 cmp	 QWORD PTR [rax+56], rcx
  003b5	74 20		 je	 SHORT $LN116@inherit_sl
$LN115@inherit_sl:
  003b7	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  003bc	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  003c3	48 8b 4c 24 40	 mov	 rcx, QWORD PTR type$[rsp]
  003c8	48 8b 89 b8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+184]
  003cf	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  003d3	48 89 41 38	 mov	 QWORD PTR [rcx+56], rax
$LN116@inherit_sl:

; 4015 :         COPYNUM(nb_absolute);

  003d7	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  003dc	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  003e3	48 83 78 40 00	 cmp	 QWORD PTR [rax+64], 0
  003e8	75 5d		 jne	 SHORT $LN114@inherit_sl
  003ea	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  003ef	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  003f6	48 83 78 40 00	 cmp	 QWORD PTR [rax+64], 0
  003fb	74 4a		 je	 SHORT $LN114@inherit_sl
  003fd	48 83 7c 24 20
	00		 cmp	 QWORD PTR basebase$[rsp], 0
  00403	74 22		 je	 SHORT $LN113@inherit_sl
  00405	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  0040a	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00411	48 8b 4c 24 20	 mov	 rcx, QWORD PTR basebase$[rsp]
  00416	48 8b 89 b8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+184]
  0041d	48 8b 49 40	 mov	 rcx, QWORD PTR [rcx+64]
  00421	48 39 48 40	 cmp	 QWORD PTR [rax+64], rcx
  00425	74 20		 je	 SHORT $LN114@inherit_sl
$LN113@inherit_sl:
  00427	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  0042c	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00433	48 8b 4c 24 40	 mov	 rcx, QWORD PTR type$[rsp]
  00438	48 8b 89 b8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+184]
  0043f	48 8b 40 40	 mov	 rax, QWORD PTR [rax+64]
  00443	48 89 41 40	 mov	 QWORD PTR [rcx+64], rax
$LN114@inherit_sl:

; 4016 :         COPYNUM(nb_bool);

  00447	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  0044c	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00453	48 83 78 48 00	 cmp	 QWORD PTR [rax+72], 0
  00458	75 5d		 jne	 SHORT $LN112@inherit_sl
  0045a	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  0045f	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00466	48 83 78 48 00	 cmp	 QWORD PTR [rax+72], 0
  0046b	74 4a		 je	 SHORT $LN112@inherit_sl
  0046d	48 83 7c 24 20
	00		 cmp	 QWORD PTR basebase$[rsp], 0
  00473	74 22		 je	 SHORT $LN111@inherit_sl
  00475	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  0047a	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00481	48 8b 4c 24 20	 mov	 rcx, QWORD PTR basebase$[rsp]
  00486	48 8b 89 b8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+184]
  0048d	48 8b 49 48	 mov	 rcx, QWORD PTR [rcx+72]
  00491	48 39 48 48	 cmp	 QWORD PTR [rax+72], rcx
  00495	74 20		 je	 SHORT $LN112@inherit_sl
$LN111@inherit_sl:
  00497	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  0049c	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  004a3	48 8b 4c 24 40	 mov	 rcx, QWORD PTR type$[rsp]
  004a8	48 8b 89 b8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+184]
  004af	48 8b 40 48	 mov	 rax, QWORD PTR [rax+72]
  004b3	48 89 41 48	 mov	 QWORD PTR [rcx+72], rax
$LN112@inherit_sl:

; 4017 :         COPYNUM(nb_invert);

  004b7	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  004bc	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  004c3	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  004c8	75 5d		 jne	 SHORT $LN110@inherit_sl
  004ca	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  004cf	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  004d6	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  004db	74 4a		 je	 SHORT $LN110@inherit_sl
  004dd	48 83 7c 24 20
	00		 cmp	 QWORD PTR basebase$[rsp], 0
  004e3	74 22		 je	 SHORT $LN109@inherit_sl
  004e5	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  004ea	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  004f1	48 8b 4c 24 20	 mov	 rcx, QWORD PTR basebase$[rsp]
  004f6	48 8b 89 b8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+184]
  004fd	48 8b 49 50	 mov	 rcx, QWORD PTR [rcx+80]
  00501	48 39 48 50	 cmp	 QWORD PTR [rax+80], rcx
  00505	74 20		 je	 SHORT $LN110@inherit_sl
$LN109@inherit_sl:
  00507	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  0050c	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00513	48 8b 4c 24 40	 mov	 rcx, QWORD PTR type$[rsp]
  00518	48 8b 89 b8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+184]
  0051f	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00523	48 89 41 50	 mov	 QWORD PTR [rcx+80], rax
$LN110@inherit_sl:

; 4018 :         COPYNUM(nb_lshift);

  00527	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  0052c	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00533	48 83 78 58 00	 cmp	 QWORD PTR [rax+88], 0
  00538	75 5d		 jne	 SHORT $LN108@inherit_sl
  0053a	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  0053f	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00546	48 83 78 58 00	 cmp	 QWORD PTR [rax+88], 0
  0054b	74 4a		 je	 SHORT $LN108@inherit_sl
  0054d	48 83 7c 24 20
	00		 cmp	 QWORD PTR basebase$[rsp], 0
  00553	74 22		 je	 SHORT $LN107@inherit_sl
  00555	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  0055a	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00561	48 8b 4c 24 20	 mov	 rcx, QWORD PTR basebase$[rsp]
  00566	48 8b 89 b8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+184]
  0056d	48 8b 49 58	 mov	 rcx, QWORD PTR [rcx+88]
  00571	48 39 48 58	 cmp	 QWORD PTR [rax+88], rcx
  00575	74 20		 je	 SHORT $LN108@inherit_sl
$LN107@inherit_sl:
  00577	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  0057c	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00583	48 8b 4c 24 40	 mov	 rcx, QWORD PTR type$[rsp]
  00588	48 8b 89 b8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+184]
  0058f	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00593	48 89 41 58	 mov	 QWORD PTR [rcx+88], rax
$LN108@inherit_sl:

; 4019 :         COPYNUM(nb_rshift);

  00597	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  0059c	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  005a3	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  005a8	75 5d		 jne	 SHORT $LN106@inherit_sl
  005aa	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  005af	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  005b6	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  005bb	74 4a		 je	 SHORT $LN106@inherit_sl
  005bd	48 83 7c 24 20
	00		 cmp	 QWORD PTR basebase$[rsp], 0
  005c3	74 22		 je	 SHORT $LN105@inherit_sl
  005c5	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  005ca	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  005d1	48 8b 4c 24 20	 mov	 rcx, QWORD PTR basebase$[rsp]
  005d6	48 8b 89 b8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+184]
  005dd	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  005e1	48 39 48 60	 cmp	 QWORD PTR [rax+96], rcx
  005e5	74 20		 je	 SHORT $LN106@inherit_sl
$LN105@inherit_sl:
  005e7	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  005ec	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  005f3	48 8b 4c 24 40	 mov	 rcx, QWORD PTR type$[rsp]
  005f8	48 8b 89 b8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+184]
  005ff	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00603	48 89 41 60	 mov	 QWORD PTR [rcx+96], rax
$LN106@inherit_sl:

; 4020 :         COPYNUM(nb_and);

  00607	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  0060c	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00613	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  00618	75 5d		 jne	 SHORT $LN104@inherit_sl
  0061a	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  0061f	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00626	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  0062b	74 4a		 je	 SHORT $LN104@inherit_sl
  0062d	48 83 7c 24 20
	00		 cmp	 QWORD PTR basebase$[rsp], 0
  00633	74 22		 je	 SHORT $LN103@inherit_sl
  00635	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  0063a	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00641	48 8b 4c 24 20	 mov	 rcx, QWORD PTR basebase$[rsp]
  00646	48 8b 89 b8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+184]
  0064d	48 8b 49 68	 mov	 rcx, QWORD PTR [rcx+104]
  00651	48 39 48 68	 cmp	 QWORD PTR [rax+104], rcx
  00655	74 20		 je	 SHORT $LN104@inherit_sl
$LN103@inherit_sl:
  00657	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  0065c	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00663	48 8b 4c 24 40	 mov	 rcx, QWORD PTR type$[rsp]
  00668	48 8b 89 b8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+184]
  0066f	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00673	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax
$LN104@inherit_sl:

; 4021 :         COPYNUM(nb_xor);

  00677	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  0067c	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00683	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  00688	75 5d		 jne	 SHORT $LN102@inherit_sl
  0068a	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  0068f	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00696	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  0069b	74 4a		 je	 SHORT $LN102@inherit_sl
  0069d	48 83 7c 24 20
	00		 cmp	 QWORD PTR basebase$[rsp], 0
  006a3	74 22		 je	 SHORT $LN101@inherit_sl
  006a5	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  006aa	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  006b1	48 8b 4c 24 20	 mov	 rcx, QWORD PTR basebase$[rsp]
  006b6	48 8b 89 b8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+184]
  006bd	48 8b 49 70	 mov	 rcx, QWORD PTR [rcx+112]
  006c1	48 39 48 70	 cmp	 QWORD PTR [rax+112], rcx
  006c5	74 20		 je	 SHORT $LN102@inherit_sl
$LN101@inherit_sl:
  006c7	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  006cc	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  006d3	48 8b 4c 24 40	 mov	 rcx, QWORD PTR type$[rsp]
  006d8	48 8b 89 b8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+184]
  006df	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  006e3	48 89 41 70	 mov	 QWORD PTR [rcx+112], rax
$LN102@inherit_sl:

; 4022 :         COPYNUM(nb_or);

  006e7	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  006ec	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  006f3	48 83 78 78 00	 cmp	 QWORD PTR [rax+120], 0
  006f8	75 5d		 jne	 SHORT $LN100@inherit_sl
  006fa	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  006ff	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00706	48 83 78 78 00	 cmp	 QWORD PTR [rax+120], 0
  0070b	74 4a		 je	 SHORT $LN100@inherit_sl
  0070d	48 83 7c 24 20
	00		 cmp	 QWORD PTR basebase$[rsp], 0
  00713	74 22		 je	 SHORT $LN99@inherit_sl
  00715	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  0071a	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00721	48 8b 4c 24 20	 mov	 rcx, QWORD PTR basebase$[rsp]
  00726	48 8b 89 b8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+184]
  0072d	48 8b 49 78	 mov	 rcx, QWORD PTR [rcx+120]
  00731	48 39 48 78	 cmp	 QWORD PTR [rax+120], rcx
  00735	74 20		 je	 SHORT $LN100@inherit_sl
$LN99@inherit_sl:
  00737	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  0073c	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00743	48 8b 4c 24 40	 mov	 rcx, QWORD PTR type$[rsp]
  00748	48 8b 89 b8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+184]
  0074f	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  00753	48 89 41 78	 mov	 QWORD PTR [rcx+120], rax
$LN100@inherit_sl:

; 4023 :         COPYNUM(nb_int);

  00757	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  0075c	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00763	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  0076b	75 6c		 jne	 SHORT $LN98@inherit_sl
  0076d	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  00772	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00779	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  00781	74 56		 je	 SHORT $LN98@inherit_sl
  00783	48 83 7c 24 20
	00		 cmp	 QWORD PTR basebase$[rsp], 0
  00789	74 28		 je	 SHORT $LN97@inherit_sl
  0078b	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  00790	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00797	48 8b 4c 24 20	 mov	 rcx, QWORD PTR basebase$[rsp]
  0079c	48 8b 89 b8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+184]
  007a3	48 8b 89 80 00
	00 00		 mov	 rcx, QWORD PTR [rcx+128]
  007aa	48 39 88 80 00
	00 00		 cmp	 QWORD PTR [rax+128], rcx
  007b1	74 26		 je	 SHORT $LN98@inherit_sl
$LN97@inherit_sl:
  007b3	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  007b8	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  007bf	48 8b 4c 24 40	 mov	 rcx, QWORD PTR type$[rsp]
  007c4	48 8b 89 b8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+184]
  007cb	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  007d2	48 89 81 80 00
	00 00		 mov	 QWORD PTR [rcx+128], rax
$LN98@inherit_sl:

; 4024 :         COPYNUM(nb_float);

  007d9	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  007de	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  007e5	48 83 b8 90 00
	00 00 00	 cmp	 QWORD PTR [rax+144], 0
  007ed	75 6c		 jne	 SHORT $LN96@inherit_sl
  007ef	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  007f4	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  007fb	48 83 b8 90 00
	00 00 00	 cmp	 QWORD PTR [rax+144], 0
  00803	74 56		 je	 SHORT $LN96@inherit_sl
  00805	48 83 7c 24 20
	00		 cmp	 QWORD PTR basebase$[rsp], 0
  0080b	74 28		 je	 SHORT $LN95@inherit_sl
  0080d	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  00812	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00819	48 8b 4c 24 20	 mov	 rcx, QWORD PTR basebase$[rsp]
  0081e	48 8b 89 b8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+184]
  00825	48 8b 89 90 00
	00 00		 mov	 rcx, QWORD PTR [rcx+144]
  0082c	48 39 88 90 00
	00 00		 cmp	 QWORD PTR [rax+144], rcx
  00833	74 26		 je	 SHORT $LN96@inherit_sl
$LN95@inherit_sl:
  00835	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  0083a	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00841	48 8b 4c 24 40	 mov	 rcx, QWORD PTR type$[rsp]
  00846	48 8b 89 b8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+184]
  0084d	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  00854	48 89 81 90 00
	00 00		 mov	 QWORD PTR [rcx+144], rax
$LN96@inherit_sl:

; 4025 :         COPYNUM(nb_inplace_add);

  0085b	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  00860	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00867	48 83 b8 98 00
	00 00 00	 cmp	 QWORD PTR [rax+152], 0
  0086f	75 6c		 jne	 SHORT $LN94@inherit_sl
  00871	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  00876	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  0087d	48 83 b8 98 00
	00 00 00	 cmp	 QWORD PTR [rax+152], 0
  00885	74 56		 je	 SHORT $LN94@inherit_sl
  00887	48 83 7c 24 20
	00		 cmp	 QWORD PTR basebase$[rsp], 0
  0088d	74 28		 je	 SHORT $LN93@inherit_sl
  0088f	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  00894	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  0089b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR basebase$[rsp]
  008a0	48 8b 89 b8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+184]
  008a7	48 8b 89 98 00
	00 00		 mov	 rcx, QWORD PTR [rcx+152]
  008ae	48 39 88 98 00
	00 00		 cmp	 QWORD PTR [rax+152], rcx
  008b5	74 26		 je	 SHORT $LN94@inherit_sl
$LN93@inherit_sl:
  008b7	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  008bc	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  008c3	48 8b 4c 24 40	 mov	 rcx, QWORD PTR type$[rsp]
  008c8	48 8b 89 b8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+184]
  008cf	48 8b 80 98 00
	00 00		 mov	 rax, QWORD PTR [rax+152]
  008d6	48 89 81 98 00
	00 00		 mov	 QWORD PTR [rcx+152], rax
$LN94@inherit_sl:

; 4026 :         COPYNUM(nb_inplace_subtract);

  008dd	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  008e2	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  008e9	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  008f1	75 6c		 jne	 SHORT $LN92@inherit_sl
  008f3	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  008f8	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  008ff	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  00907	74 56		 je	 SHORT $LN92@inherit_sl
  00909	48 83 7c 24 20
	00		 cmp	 QWORD PTR basebase$[rsp], 0
  0090f	74 28		 je	 SHORT $LN91@inherit_sl
  00911	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  00916	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  0091d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR basebase$[rsp]
  00922	48 8b 89 b8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+184]
  00929	48 8b 89 a0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+160]
  00930	48 39 88 a0 00
	00 00		 cmp	 QWORD PTR [rax+160], rcx
  00937	74 26		 je	 SHORT $LN92@inherit_sl
$LN91@inherit_sl:
  00939	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  0093e	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00945	48 8b 4c 24 40	 mov	 rcx, QWORD PTR type$[rsp]
  0094a	48 8b 89 b8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+184]
  00951	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  00958	48 89 81 a0 00
	00 00		 mov	 QWORD PTR [rcx+160], rax
$LN92@inherit_sl:

; 4027 :         COPYNUM(nb_inplace_multiply);

  0095f	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  00964	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  0096b	48 83 b8 a8 00
	00 00 00	 cmp	 QWORD PTR [rax+168], 0
  00973	75 6c		 jne	 SHORT $LN90@inherit_sl
  00975	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  0097a	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00981	48 83 b8 a8 00
	00 00 00	 cmp	 QWORD PTR [rax+168], 0
  00989	74 56		 je	 SHORT $LN90@inherit_sl
  0098b	48 83 7c 24 20
	00		 cmp	 QWORD PTR basebase$[rsp], 0
  00991	74 28		 je	 SHORT $LN89@inherit_sl
  00993	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  00998	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  0099f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR basebase$[rsp]
  009a4	48 8b 89 b8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+184]
  009ab	48 8b 89 a8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+168]
  009b2	48 39 88 a8 00
	00 00		 cmp	 QWORD PTR [rax+168], rcx
  009b9	74 26		 je	 SHORT $LN90@inherit_sl
$LN89@inherit_sl:
  009bb	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  009c0	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  009c7	48 8b 4c 24 40	 mov	 rcx, QWORD PTR type$[rsp]
  009cc	48 8b 89 b8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+184]
  009d3	48 8b 80 a8 00
	00 00		 mov	 rax, QWORD PTR [rax+168]
  009da	48 89 81 a8 00
	00 00		 mov	 QWORD PTR [rcx+168], rax
$LN90@inherit_sl:

; 4028 :         COPYNUM(nb_inplace_remainder);

  009e1	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  009e6	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  009ed	48 83 b8 b0 00
	00 00 00	 cmp	 QWORD PTR [rax+176], 0
  009f5	75 6c		 jne	 SHORT $LN88@inherit_sl
  009f7	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  009fc	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00a03	48 83 b8 b0 00
	00 00 00	 cmp	 QWORD PTR [rax+176], 0
  00a0b	74 56		 je	 SHORT $LN88@inherit_sl
  00a0d	48 83 7c 24 20
	00		 cmp	 QWORD PTR basebase$[rsp], 0
  00a13	74 28		 je	 SHORT $LN87@inherit_sl
  00a15	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  00a1a	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00a21	48 8b 4c 24 20	 mov	 rcx, QWORD PTR basebase$[rsp]
  00a26	48 8b 89 b8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+184]
  00a2d	48 8b 89 b0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+176]
  00a34	48 39 88 b0 00
	00 00		 cmp	 QWORD PTR [rax+176], rcx
  00a3b	74 26		 je	 SHORT $LN88@inherit_sl
$LN87@inherit_sl:
  00a3d	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  00a42	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00a49	48 8b 4c 24 40	 mov	 rcx, QWORD PTR type$[rsp]
  00a4e	48 8b 89 b8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+184]
  00a55	48 8b 80 b0 00
	00 00		 mov	 rax, QWORD PTR [rax+176]
  00a5c	48 89 81 b0 00
	00 00		 mov	 QWORD PTR [rcx+176], rax
$LN88@inherit_sl:

; 4029 :         COPYNUM(nb_inplace_power);

  00a63	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  00a68	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00a6f	48 83 b8 b8 00
	00 00 00	 cmp	 QWORD PTR [rax+184], 0
  00a77	75 6c		 jne	 SHORT $LN86@inherit_sl
  00a79	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  00a7e	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00a85	48 83 b8 b8 00
	00 00 00	 cmp	 QWORD PTR [rax+184], 0
  00a8d	74 56		 je	 SHORT $LN86@inherit_sl
  00a8f	48 83 7c 24 20
	00		 cmp	 QWORD PTR basebase$[rsp], 0
  00a95	74 28		 je	 SHORT $LN85@inherit_sl
  00a97	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  00a9c	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00aa3	48 8b 4c 24 20	 mov	 rcx, QWORD PTR basebase$[rsp]
  00aa8	48 8b 89 b8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+184]
  00aaf	48 8b 89 b8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+184]
  00ab6	48 39 88 b8 00
	00 00		 cmp	 QWORD PTR [rax+184], rcx
  00abd	74 26		 je	 SHORT $LN86@inherit_sl
$LN85@inherit_sl:
  00abf	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  00ac4	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00acb	48 8b 4c 24 40	 mov	 rcx, QWORD PTR type$[rsp]
  00ad0	48 8b 89 b8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+184]
  00ad7	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00ade	48 89 81 b8 00
	00 00		 mov	 QWORD PTR [rcx+184], rax
$LN86@inherit_sl:

; 4030 :         COPYNUM(nb_inplace_lshift);

  00ae5	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  00aea	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00af1	48 83 b8 c0 00
	00 00 00	 cmp	 QWORD PTR [rax+192], 0
  00af9	75 6c		 jne	 SHORT $LN84@inherit_sl
  00afb	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  00b00	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00b07	48 83 b8 c0 00
	00 00 00	 cmp	 QWORD PTR [rax+192], 0
  00b0f	74 56		 je	 SHORT $LN84@inherit_sl
  00b11	48 83 7c 24 20
	00		 cmp	 QWORD PTR basebase$[rsp], 0
  00b17	74 28		 je	 SHORT $LN83@inherit_sl
  00b19	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  00b1e	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00b25	48 8b 4c 24 20	 mov	 rcx, QWORD PTR basebase$[rsp]
  00b2a	48 8b 89 b8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+184]
  00b31	48 8b 89 c0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+192]
  00b38	48 39 88 c0 00
	00 00		 cmp	 QWORD PTR [rax+192], rcx
  00b3f	74 26		 je	 SHORT $LN84@inherit_sl
$LN83@inherit_sl:
  00b41	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  00b46	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00b4d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR type$[rsp]
  00b52	48 8b 89 b8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+184]
  00b59	48 8b 80 c0 00
	00 00		 mov	 rax, QWORD PTR [rax+192]
  00b60	48 89 81 c0 00
	00 00		 mov	 QWORD PTR [rcx+192], rax
$LN84@inherit_sl:

; 4031 :         COPYNUM(nb_inplace_rshift);

  00b67	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  00b6c	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00b73	48 83 b8 c8 00
	00 00 00	 cmp	 QWORD PTR [rax+200], 0
  00b7b	75 6c		 jne	 SHORT $LN82@inherit_sl
  00b7d	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  00b82	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00b89	48 83 b8 c8 00
	00 00 00	 cmp	 QWORD PTR [rax+200], 0
  00b91	74 56		 je	 SHORT $LN82@inherit_sl
  00b93	48 83 7c 24 20
	00		 cmp	 QWORD PTR basebase$[rsp], 0
  00b99	74 28		 je	 SHORT $LN81@inherit_sl
  00b9b	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  00ba0	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00ba7	48 8b 4c 24 20	 mov	 rcx, QWORD PTR basebase$[rsp]
  00bac	48 8b 89 b8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+184]
  00bb3	48 8b 89 c8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+200]
  00bba	48 39 88 c8 00
	00 00		 cmp	 QWORD PTR [rax+200], rcx
  00bc1	74 26		 je	 SHORT $LN82@inherit_sl
$LN81@inherit_sl:
  00bc3	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  00bc8	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00bcf	48 8b 4c 24 40	 mov	 rcx, QWORD PTR type$[rsp]
  00bd4	48 8b 89 b8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+184]
  00bdb	48 8b 80 c8 00
	00 00		 mov	 rax, QWORD PTR [rax+200]
  00be2	48 89 81 c8 00
	00 00		 mov	 QWORD PTR [rcx+200], rax
$LN82@inherit_sl:

; 4032 :         COPYNUM(nb_inplace_and);

  00be9	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  00bee	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00bf5	48 83 b8 d0 00
	00 00 00	 cmp	 QWORD PTR [rax+208], 0
  00bfd	75 6c		 jne	 SHORT $LN80@inherit_sl
  00bff	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  00c04	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00c0b	48 83 b8 d0 00
	00 00 00	 cmp	 QWORD PTR [rax+208], 0
  00c13	74 56		 je	 SHORT $LN80@inherit_sl
  00c15	48 83 7c 24 20
	00		 cmp	 QWORD PTR basebase$[rsp], 0
  00c1b	74 28		 je	 SHORT $LN79@inherit_sl
  00c1d	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  00c22	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00c29	48 8b 4c 24 20	 mov	 rcx, QWORD PTR basebase$[rsp]
  00c2e	48 8b 89 b8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+184]
  00c35	48 8b 89 d0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+208]
  00c3c	48 39 88 d0 00
	00 00		 cmp	 QWORD PTR [rax+208], rcx
  00c43	74 26		 je	 SHORT $LN80@inherit_sl
$LN79@inherit_sl:
  00c45	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  00c4a	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00c51	48 8b 4c 24 40	 mov	 rcx, QWORD PTR type$[rsp]
  00c56	48 8b 89 b8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+184]
  00c5d	48 8b 80 d0 00
	00 00		 mov	 rax, QWORD PTR [rax+208]
  00c64	48 89 81 d0 00
	00 00		 mov	 QWORD PTR [rcx+208], rax
$LN80@inherit_sl:

; 4033 :         COPYNUM(nb_inplace_xor);

  00c6b	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  00c70	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00c77	48 83 b8 d8 00
	00 00 00	 cmp	 QWORD PTR [rax+216], 0
  00c7f	75 6c		 jne	 SHORT $LN78@inherit_sl
  00c81	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  00c86	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00c8d	48 83 b8 d8 00
	00 00 00	 cmp	 QWORD PTR [rax+216], 0
  00c95	74 56		 je	 SHORT $LN78@inherit_sl
  00c97	48 83 7c 24 20
	00		 cmp	 QWORD PTR basebase$[rsp], 0
  00c9d	74 28		 je	 SHORT $LN77@inherit_sl
  00c9f	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  00ca4	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00cab	48 8b 4c 24 20	 mov	 rcx, QWORD PTR basebase$[rsp]
  00cb0	48 8b 89 b8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+184]
  00cb7	48 8b 89 d8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+216]
  00cbe	48 39 88 d8 00
	00 00		 cmp	 QWORD PTR [rax+216], rcx
  00cc5	74 26		 je	 SHORT $LN78@inherit_sl
$LN77@inherit_sl:
  00cc7	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  00ccc	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00cd3	48 8b 4c 24 40	 mov	 rcx, QWORD PTR type$[rsp]
  00cd8	48 8b 89 b8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+184]
  00cdf	48 8b 80 d8 00
	00 00		 mov	 rax, QWORD PTR [rax+216]
  00ce6	48 89 81 d8 00
	00 00		 mov	 QWORD PTR [rcx+216], rax
$LN78@inherit_sl:

; 4034 :         COPYNUM(nb_inplace_or);

  00ced	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  00cf2	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00cf9	48 83 b8 e0 00
	00 00 00	 cmp	 QWORD PTR [rax+224], 0
  00d01	75 6c		 jne	 SHORT $LN76@inherit_sl
  00d03	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  00d08	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00d0f	48 83 b8 e0 00
	00 00 00	 cmp	 QWORD PTR [rax+224], 0
  00d17	74 56		 je	 SHORT $LN76@inherit_sl
  00d19	48 83 7c 24 20
	00		 cmp	 QWORD PTR basebase$[rsp], 0
  00d1f	74 28		 je	 SHORT $LN75@inherit_sl
  00d21	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  00d26	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00d2d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR basebase$[rsp]
  00d32	48 8b 89 b8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+184]
  00d39	48 8b 89 e0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+224]
  00d40	48 39 88 e0 00
	00 00		 cmp	 QWORD PTR [rax+224], rcx
  00d47	74 26		 je	 SHORT $LN76@inherit_sl
$LN75@inherit_sl:
  00d49	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  00d4e	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00d55	48 8b 4c 24 40	 mov	 rcx, QWORD PTR type$[rsp]
  00d5a	48 8b 89 b8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+184]
  00d61	48 8b 80 e0 00
	00 00		 mov	 rax, QWORD PTR [rax+224]
  00d68	48 89 81 e0 00
	00 00		 mov	 QWORD PTR [rcx+224], rax
$LN76@inherit_sl:

; 4035 :         COPYNUM(nb_true_divide);

  00d6f	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  00d74	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00d7b	48 83 b8 f0 00
	00 00 00	 cmp	 QWORD PTR [rax+240], 0
  00d83	75 6c		 jne	 SHORT $LN74@inherit_sl
  00d85	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  00d8a	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00d91	48 83 b8 f0 00
	00 00 00	 cmp	 QWORD PTR [rax+240], 0
  00d99	74 56		 je	 SHORT $LN74@inherit_sl
  00d9b	48 83 7c 24 20
	00		 cmp	 QWORD PTR basebase$[rsp], 0
  00da1	74 28		 je	 SHORT $LN73@inherit_sl
  00da3	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  00da8	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00daf	48 8b 4c 24 20	 mov	 rcx, QWORD PTR basebase$[rsp]
  00db4	48 8b 89 b8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+184]
  00dbb	48 8b 89 f0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+240]
  00dc2	48 39 88 f0 00
	00 00		 cmp	 QWORD PTR [rax+240], rcx
  00dc9	74 26		 je	 SHORT $LN74@inherit_sl
$LN73@inherit_sl:
  00dcb	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  00dd0	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00dd7	48 8b 4c 24 40	 mov	 rcx, QWORD PTR type$[rsp]
  00ddc	48 8b 89 b8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+184]
  00de3	48 8b 80 f0 00
	00 00		 mov	 rax, QWORD PTR [rax+240]
  00dea	48 89 81 f0 00
	00 00		 mov	 QWORD PTR [rcx+240], rax
$LN74@inherit_sl:

; 4036 :         COPYNUM(nb_floor_divide);

  00df1	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  00df6	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00dfd	48 83 b8 e8 00
	00 00 00	 cmp	 QWORD PTR [rax+232], 0
  00e05	75 6c		 jne	 SHORT $LN72@inherit_sl
  00e07	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  00e0c	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00e13	48 83 b8 e8 00
	00 00 00	 cmp	 QWORD PTR [rax+232], 0
  00e1b	74 56		 je	 SHORT $LN72@inherit_sl
  00e1d	48 83 7c 24 20
	00		 cmp	 QWORD PTR basebase$[rsp], 0
  00e23	74 28		 je	 SHORT $LN71@inherit_sl
  00e25	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  00e2a	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00e31	48 8b 4c 24 20	 mov	 rcx, QWORD PTR basebase$[rsp]
  00e36	48 8b 89 b8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+184]
  00e3d	48 8b 89 e8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+232]
  00e44	48 39 88 e8 00
	00 00		 cmp	 QWORD PTR [rax+232], rcx
  00e4b	74 26		 je	 SHORT $LN72@inherit_sl
$LN71@inherit_sl:
  00e4d	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  00e52	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00e59	48 8b 4c 24 40	 mov	 rcx, QWORD PTR type$[rsp]
  00e5e	48 8b 89 b8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+184]
  00e65	48 8b 80 e8 00
	00 00		 mov	 rax, QWORD PTR [rax+232]
  00e6c	48 89 81 e8 00
	00 00		 mov	 QWORD PTR [rcx+232], rax
$LN72@inherit_sl:

; 4037 :         COPYNUM(nb_inplace_true_divide);

  00e73	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  00e78	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00e7f	48 83 b8 00 01
	00 00 00	 cmp	 QWORD PTR [rax+256], 0
  00e87	75 6c		 jne	 SHORT $LN70@inherit_sl
  00e89	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  00e8e	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00e95	48 83 b8 00 01
	00 00 00	 cmp	 QWORD PTR [rax+256], 0
  00e9d	74 56		 je	 SHORT $LN70@inherit_sl
  00e9f	48 83 7c 24 20
	00		 cmp	 QWORD PTR basebase$[rsp], 0
  00ea5	74 28		 je	 SHORT $LN69@inherit_sl
  00ea7	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  00eac	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00eb3	48 8b 4c 24 20	 mov	 rcx, QWORD PTR basebase$[rsp]
  00eb8	48 8b 89 b8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+184]
  00ebf	48 8b 89 00 01
	00 00		 mov	 rcx, QWORD PTR [rcx+256]
  00ec6	48 39 88 00 01
	00 00		 cmp	 QWORD PTR [rax+256], rcx
  00ecd	74 26		 je	 SHORT $LN70@inherit_sl
$LN69@inherit_sl:
  00ecf	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  00ed4	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00edb	48 8b 4c 24 40	 mov	 rcx, QWORD PTR type$[rsp]
  00ee0	48 8b 89 b8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+184]
  00ee7	48 8b 80 00 01
	00 00		 mov	 rax, QWORD PTR [rax+256]
  00eee	48 89 81 00 01
	00 00		 mov	 QWORD PTR [rcx+256], rax
$LN70@inherit_sl:

; 4038 :         COPYNUM(nb_inplace_floor_divide);

  00ef5	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  00efa	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00f01	48 83 b8 f8 00
	00 00 00	 cmp	 QWORD PTR [rax+248], 0
  00f09	75 6c		 jne	 SHORT $LN68@inherit_sl
  00f0b	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  00f10	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00f17	48 83 b8 f8 00
	00 00 00	 cmp	 QWORD PTR [rax+248], 0
  00f1f	74 56		 je	 SHORT $LN68@inherit_sl
  00f21	48 83 7c 24 20
	00		 cmp	 QWORD PTR basebase$[rsp], 0
  00f27	74 28		 je	 SHORT $LN67@inherit_sl
  00f29	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  00f2e	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00f35	48 8b 4c 24 20	 mov	 rcx, QWORD PTR basebase$[rsp]
  00f3a	48 8b 89 b8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+184]
  00f41	48 8b 89 f8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+248]
  00f48	48 39 88 f8 00
	00 00		 cmp	 QWORD PTR [rax+248], rcx
  00f4f	74 26		 je	 SHORT $LN68@inherit_sl
$LN67@inherit_sl:
  00f51	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  00f56	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00f5d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR type$[rsp]
  00f62	48 8b 89 b8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+184]
  00f69	48 8b 80 f8 00
	00 00		 mov	 rax, QWORD PTR [rax+248]
  00f70	48 89 81 f8 00
	00 00		 mov	 QWORD PTR [rcx+248], rax
$LN68@inherit_sl:

; 4039 :         COPYNUM(nb_index);

  00f77	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  00f7c	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00f83	48 83 b8 08 01
	00 00 00	 cmp	 QWORD PTR [rax+264], 0
  00f8b	75 6c		 jne	 SHORT $LN66@inherit_sl
  00f8d	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  00f92	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00f99	48 83 b8 08 01
	00 00 00	 cmp	 QWORD PTR [rax+264], 0
  00fa1	74 56		 je	 SHORT $LN66@inherit_sl
  00fa3	48 83 7c 24 20
	00		 cmp	 QWORD PTR basebase$[rsp], 0
  00fa9	74 28		 je	 SHORT $LN65@inherit_sl
  00fab	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  00fb0	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00fb7	48 8b 4c 24 20	 mov	 rcx, QWORD PTR basebase$[rsp]
  00fbc	48 8b 89 b8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+184]
  00fc3	48 8b 89 08 01
	00 00		 mov	 rcx, QWORD PTR [rcx+264]
  00fca	48 39 88 08 01
	00 00		 cmp	 QWORD PTR [rax+264], rcx
  00fd1	74 26		 je	 SHORT $LN66@inherit_sl
$LN65@inherit_sl:
  00fd3	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  00fd8	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00fdf	48 8b 4c 24 40	 mov	 rcx, QWORD PTR type$[rsp]
  00fe4	48 8b 89 b8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+184]
  00feb	48 8b 80 08 01
	00 00		 mov	 rax, QWORD PTR [rax+264]
  00ff2	48 89 81 08 01
	00 00		 mov	 QWORD PTR [rcx+264], rax
$LN66@inherit_sl:
$LN132@inherit_sl:

; 4040 :     }
; 4041 : 
; 4042 :     if (type->tp_as_sequence != NULL && base->tp_as_sequence != NULL) {

  00ff9	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  00ffe	48 83 b8 c0 00
	00 00 00	 cmp	 QWORD PTR [rax+192], 0
  01006	0f 84 b6 03 00
	00		 je	 $LN64@inherit_sl
  0100c	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  01011	48 83 b8 c0 00
	00 00 00	 cmp	 QWORD PTR [rax+192], 0
  01019	0f 84 a3 03 00
	00		 je	 $LN64@inherit_sl

; 4043 :         basebase = base->tp_base;

  0101f	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  01024	48 8b 80 58 01
	00 00		 mov	 rax, QWORD PTR [rax+344]
  0102b	48 89 44 24 20	 mov	 QWORD PTR basebase$[rsp], rax

; 4044 :         if (basebase->tp_as_sequence == NULL)

  01030	48 8b 44 24 20	 mov	 rax, QWORD PTR basebase$[rsp]
  01035	48 83 b8 c0 00
	00 00 00	 cmp	 QWORD PTR [rax+192], 0
  0103d	75 09		 jne	 SHORT $LN63@inherit_sl

; 4045 :             basebase = NULL;

  0103f	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR basebase$[rsp], 0
$LN63@inherit_sl:

; 4046 :         COPYSEQ(sq_length);

  01048	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  0104d	48 8b 80 c0 00
	00 00		 mov	 rax, QWORD PTR [rax+192]
  01054	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  01058	75 58		 jne	 SHORT $LN62@inherit_sl
  0105a	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  0105f	48 8b 80 c0 00
	00 00		 mov	 rax, QWORD PTR [rax+192]
  01066	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0106a	74 46		 je	 SHORT $LN62@inherit_sl
  0106c	48 83 7c 24 20
	00		 cmp	 QWORD PTR basebase$[rsp], 0
  01072	74 20		 je	 SHORT $LN61@inherit_sl
  01074	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  01079	48 8b 80 c0 00
	00 00		 mov	 rax, QWORD PTR [rax+192]
  01080	48 8b 4c 24 20	 mov	 rcx, QWORD PTR basebase$[rsp]
  01085	48 8b 89 c0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+192]
  0108c	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0108f	48 39 08	 cmp	 QWORD PTR [rax], rcx
  01092	74 1e		 je	 SHORT $LN62@inherit_sl
$LN61@inherit_sl:
  01094	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  01099	48 8b 80 c0 00
	00 00		 mov	 rax, QWORD PTR [rax+192]
  010a0	48 8b 4c 24 40	 mov	 rcx, QWORD PTR type$[rsp]
  010a5	48 8b 89 c0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+192]
  010ac	48 8b 00	 mov	 rax, QWORD PTR [rax]
  010af	48 89 01	 mov	 QWORD PTR [rcx], rax
$LN62@inherit_sl:

; 4047 :         COPYSEQ(sq_concat);

  010b2	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  010b7	48 8b 80 c0 00
	00 00		 mov	 rax, QWORD PTR [rax+192]
  010be	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  010c3	75 5d		 jne	 SHORT $LN60@inherit_sl
  010c5	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  010ca	48 8b 80 c0 00
	00 00		 mov	 rax, QWORD PTR [rax+192]
  010d1	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  010d6	74 4a		 je	 SHORT $LN60@inherit_sl
  010d8	48 83 7c 24 20
	00		 cmp	 QWORD PTR basebase$[rsp], 0
  010de	74 22		 je	 SHORT $LN59@inherit_sl
  010e0	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  010e5	48 8b 80 c0 00
	00 00		 mov	 rax, QWORD PTR [rax+192]
  010ec	48 8b 4c 24 20	 mov	 rcx, QWORD PTR basebase$[rsp]
  010f1	48 8b 89 c0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+192]
  010f8	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  010fc	48 39 48 08	 cmp	 QWORD PTR [rax+8], rcx
  01100	74 20		 je	 SHORT $LN60@inherit_sl
$LN59@inherit_sl:
  01102	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  01107	48 8b 80 c0 00
	00 00		 mov	 rax, QWORD PTR [rax+192]
  0110e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR type$[rsp]
  01113	48 8b 89 c0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+192]
  0111a	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0111e	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
$LN60@inherit_sl:

; 4048 :         COPYSEQ(sq_repeat);

  01122	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  01127	48 8b 80 c0 00
	00 00		 mov	 rax, QWORD PTR [rax+192]
  0112e	48 83 78 10 00	 cmp	 QWORD PTR [rax+16], 0
  01133	75 5d		 jne	 SHORT $LN58@inherit_sl
  01135	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  0113a	48 8b 80 c0 00
	00 00		 mov	 rax, QWORD PTR [rax+192]
  01141	48 83 78 10 00	 cmp	 QWORD PTR [rax+16], 0
  01146	74 4a		 je	 SHORT $LN58@inherit_sl
  01148	48 83 7c 24 20
	00		 cmp	 QWORD PTR basebase$[rsp], 0
  0114e	74 22		 je	 SHORT $LN57@inherit_sl
  01150	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  01155	48 8b 80 c0 00
	00 00		 mov	 rax, QWORD PTR [rax+192]
  0115c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR basebase$[rsp]
  01161	48 8b 89 c0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+192]
  01168	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  0116c	48 39 48 10	 cmp	 QWORD PTR [rax+16], rcx
  01170	74 20		 je	 SHORT $LN58@inherit_sl
$LN57@inherit_sl:
  01172	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  01177	48 8b 80 c0 00
	00 00		 mov	 rax, QWORD PTR [rax+192]
  0117e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR type$[rsp]
  01183	48 8b 89 c0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+192]
  0118a	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0118e	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax
$LN58@inherit_sl:

; 4049 :         COPYSEQ(sq_item);

  01192	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  01197	48 8b 80 c0 00
	00 00		 mov	 rax, QWORD PTR [rax+192]
  0119e	48 83 78 18 00	 cmp	 QWORD PTR [rax+24], 0
  011a3	75 5d		 jne	 SHORT $LN56@inherit_sl
  011a5	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  011aa	48 8b 80 c0 00
	00 00		 mov	 rax, QWORD PTR [rax+192]
  011b1	48 83 78 18 00	 cmp	 QWORD PTR [rax+24], 0
  011b6	74 4a		 je	 SHORT $LN56@inherit_sl
  011b8	48 83 7c 24 20
	00		 cmp	 QWORD PTR basebase$[rsp], 0
  011be	74 22		 je	 SHORT $LN55@inherit_sl
  011c0	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  011c5	48 8b 80 c0 00
	00 00		 mov	 rax, QWORD PTR [rax+192]
  011cc	48 8b 4c 24 20	 mov	 rcx, QWORD PTR basebase$[rsp]
  011d1	48 8b 89 c0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+192]
  011d8	48 8b 49 18	 mov	 rcx, QWORD PTR [rcx+24]
  011dc	48 39 48 18	 cmp	 QWORD PTR [rax+24], rcx
  011e0	74 20		 je	 SHORT $LN56@inherit_sl
$LN55@inherit_sl:
  011e2	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  011e7	48 8b 80 c0 00
	00 00		 mov	 rax, QWORD PTR [rax+192]
  011ee	48 8b 4c 24 40	 mov	 rcx, QWORD PTR type$[rsp]
  011f3	48 8b 89 c0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+192]
  011fa	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  011fe	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax
$LN56@inherit_sl:

; 4050 :         COPYSEQ(sq_ass_item);

  01202	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  01207	48 8b 80 c0 00
	00 00		 mov	 rax, QWORD PTR [rax+192]
  0120e	48 83 78 28 00	 cmp	 QWORD PTR [rax+40], 0
  01213	75 5d		 jne	 SHORT $LN54@inherit_sl
  01215	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  0121a	48 8b 80 c0 00
	00 00		 mov	 rax, QWORD PTR [rax+192]
  01221	48 83 78 28 00	 cmp	 QWORD PTR [rax+40], 0
  01226	74 4a		 je	 SHORT $LN54@inherit_sl
  01228	48 83 7c 24 20
	00		 cmp	 QWORD PTR basebase$[rsp], 0
  0122e	74 22		 je	 SHORT $LN53@inherit_sl
  01230	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  01235	48 8b 80 c0 00
	00 00		 mov	 rax, QWORD PTR [rax+192]
  0123c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR basebase$[rsp]
  01241	48 8b 89 c0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+192]
  01248	48 8b 49 28	 mov	 rcx, QWORD PTR [rcx+40]
  0124c	48 39 48 28	 cmp	 QWORD PTR [rax+40], rcx
  01250	74 20		 je	 SHORT $LN54@inherit_sl
$LN53@inherit_sl:
  01252	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  01257	48 8b 80 c0 00
	00 00		 mov	 rax, QWORD PTR [rax+192]
  0125e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR type$[rsp]
  01263	48 8b 89 c0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+192]
  0126a	48 8b 40 28	 mov	 rax, QWORD PTR [rax+40]
  0126e	48 89 41 28	 mov	 QWORD PTR [rcx+40], rax
$LN54@inherit_sl:

; 4051 :         COPYSEQ(sq_contains);

  01272	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  01277	48 8b 80 c0 00
	00 00		 mov	 rax, QWORD PTR [rax+192]
  0127e	48 83 78 38 00	 cmp	 QWORD PTR [rax+56], 0
  01283	75 5d		 jne	 SHORT $LN52@inherit_sl
  01285	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  0128a	48 8b 80 c0 00
	00 00		 mov	 rax, QWORD PTR [rax+192]
  01291	48 83 78 38 00	 cmp	 QWORD PTR [rax+56], 0
  01296	74 4a		 je	 SHORT $LN52@inherit_sl
  01298	48 83 7c 24 20
	00		 cmp	 QWORD PTR basebase$[rsp], 0
  0129e	74 22		 je	 SHORT $LN51@inherit_sl
  012a0	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  012a5	48 8b 80 c0 00
	00 00		 mov	 rax, QWORD PTR [rax+192]
  012ac	48 8b 4c 24 20	 mov	 rcx, QWORD PTR basebase$[rsp]
  012b1	48 8b 89 c0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+192]
  012b8	48 8b 49 38	 mov	 rcx, QWORD PTR [rcx+56]
  012bc	48 39 48 38	 cmp	 QWORD PTR [rax+56], rcx
  012c0	74 20		 je	 SHORT $LN52@inherit_sl
$LN51@inherit_sl:
  012c2	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  012c7	48 8b 80 c0 00
	00 00		 mov	 rax, QWORD PTR [rax+192]
  012ce	48 8b 4c 24 40	 mov	 rcx, QWORD PTR type$[rsp]
  012d3	48 8b 89 c0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+192]
  012da	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  012de	48 89 41 38	 mov	 QWORD PTR [rcx+56], rax
$LN52@inherit_sl:

; 4052 :         COPYSEQ(sq_inplace_concat);

  012e2	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  012e7	48 8b 80 c0 00
	00 00		 mov	 rax, QWORD PTR [rax+192]
  012ee	48 83 78 40 00	 cmp	 QWORD PTR [rax+64], 0
  012f3	75 5d		 jne	 SHORT $LN50@inherit_sl
  012f5	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  012fa	48 8b 80 c0 00
	00 00		 mov	 rax, QWORD PTR [rax+192]
  01301	48 83 78 40 00	 cmp	 QWORD PTR [rax+64], 0
  01306	74 4a		 je	 SHORT $LN50@inherit_sl
  01308	48 83 7c 24 20
	00		 cmp	 QWORD PTR basebase$[rsp], 0
  0130e	74 22		 je	 SHORT $LN49@inherit_sl
  01310	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  01315	48 8b 80 c0 00
	00 00		 mov	 rax, QWORD PTR [rax+192]
  0131c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR basebase$[rsp]
  01321	48 8b 89 c0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+192]
  01328	48 8b 49 40	 mov	 rcx, QWORD PTR [rcx+64]
  0132c	48 39 48 40	 cmp	 QWORD PTR [rax+64], rcx
  01330	74 20		 je	 SHORT $LN50@inherit_sl
$LN49@inherit_sl:
  01332	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  01337	48 8b 80 c0 00
	00 00		 mov	 rax, QWORD PTR [rax+192]
  0133e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR type$[rsp]
  01343	48 8b 89 c0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+192]
  0134a	48 8b 40 40	 mov	 rax, QWORD PTR [rax+64]
  0134e	48 89 41 40	 mov	 QWORD PTR [rcx+64], rax
$LN50@inherit_sl:

; 4053 :         COPYSEQ(sq_inplace_repeat);

  01352	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  01357	48 8b 80 c0 00
	00 00		 mov	 rax, QWORD PTR [rax+192]
  0135e	48 83 78 48 00	 cmp	 QWORD PTR [rax+72], 0
  01363	75 5d		 jne	 SHORT $LN48@inherit_sl
  01365	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  0136a	48 8b 80 c0 00
	00 00		 mov	 rax, QWORD PTR [rax+192]
  01371	48 83 78 48 00	 cmp	 QWORD PTR [rax+72], 0
  01376	74 4a		 je	 SHORT $LN48@inherit_sl
  01378	48 83 7c 24 20
	00		 cmp	 QWORD PTR basebase$[rsp], 0
  0137e	74 22		 je	 SHORT $LN47@inherit_sl
  01380	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  01385	48 8b 80 c0 00
	00 00		 mov	 rax, QWORD PTR [rax+192]
  0138c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR basebase$[rsp]
  01391	48 8b 89 c0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+192]
  01398	48 8b 49 48	 mov	 rcx, QWORD PTR [rcx+72]
  0139c	48 39 48 48	 cmp	 QWORD PTR [rax+72], rcx
  013a0	74 20		 je	 SHORT $LN48@inherit_sl
$LN47@inherit_sl:
  013a2	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  013a7	48 8b 80 c0 00
	00 00		 mov	 rax, QWORD PTR [rax+192]
  013ae	48 8b 4c 24 40	 mov	 rcx, QWORD PTR type$[rsp]
  013b3	48 8b 89 c0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+192]
  013ba	48 8b 40 48	 mov	 rax, QWORD PTR [rax+72]
  013be	48 89 41 48	 mov	 QWORD PTR [rcx+72], rax
$LN48@inherit_sl:
$LN64@inherit_sl:

; 4054 :     }
; 4055 : 
; 4056 :     if (type->tp_as_mapping != NULL && base->tp_as_mapping != NULL) {

  013c2	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  013c7	48 83 b8 c8 00
	00 00 00	 cmp	 QWORD PTR [rax+200], 0
  013cf	0f 84 86 01 00
	00		 je	 $LN46@inherit_sl
  013d5	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  013da	48 83 b8 c8 00
	00 00 00	 cmp	 QWORD PTR [rax+200], 0
  013e2	0f 84 73 01 00
	00		 je	 $LN46@inherit_sl

; 4057 :         basebase = base->tp_base;

  013e8	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  013ed	48 8b 80 58 01
	00 00		 mov	 rax, QWORD PTR [rax+344]
  013f4	48 89 44 24 20	 mov	 QWORD PTR basebase$[rsp], rax

; 4058 :         if (basebase->tp_as_mapping == NULL)

  013f9	48 8b 44 24 20	 mov	 rax, QWORD PTR basebase$[rsp]
  013fe	48 83 b8 c8 00
	00 00 00	 cmp	 QWORD PTR [rax+200], 0
  01406	75 09		 jne	 SHORT $LN45@inherit_sl

; 4059 :             basebase = NULL;

  01408	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR basebase$[rsp], 0
$LN45@inherit_sl:

; 4060 :         COPYMAP(mp_length);

  01411	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  01416	48 8b 80 c8 00
	00 00		 mov	 rax, QWORD PTR [rax+200]
  0141d	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  01421	75 58		 jne	 SHORT $LN44@inherit_sl
  01423	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  01428	48 8b 80 c8 00
	00 00		 mov	 rax, QWORD PTR [rax+200]
  0142f	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  01433	74 46		 je	 SHORT $LN44@inherit_sl
  01435	48 83 7c 24 20
	00		 cmp	 QWORD PTR basebase$[rsp], 0
  0143b	74 20		 je	 SHORT $LN43@inherit_sl
  0143d	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  01442	48 8b 80 c8 00
	00 00		 mov	 rax, QWORD PTR [rax+200]
  01449	48 8b 4c 24 20	 mov	 rcx, QWORD PTR basebase$[rsp]
  0144e	48 8b 89 c8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+200]
  01455	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  01458	48 39 08	 cmp	 QWORD PTR [rax], rcx
  0145b	74 1e		 je	 SHORT $LN44@inherit_sl
$LN43@inherit_sl:
  0145d	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  01462	48 8b 80 c8 00
	00 00		 mov	 rax, QWORD PTR [rax+200]
  01469	48 8b 4c 24 40	 mov	 rcx, QWORD PTR type$[rsp]
  0146e	48 8b 89 c8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+200]
  01475	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01478	48 89 01	 mov	 QWORD PTR [rcx], rax
$LN44@inherit_sl:

; 4061 :         COPYMAP(mp_subscript);

  0147b	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  01480	48 8b 80 c8 00
	00 00		 mov	 rax, QWORD PTR [rax+200]
  01487	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  0148c	75 5d		 jne	 SHORT $LN42@inherit_sl
  0148e	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  01493	48 8b 80 c8 00
	00 00		 mov	 rax, QWORD PTR [rax+200]
  0149a	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  0149f	74 4a		 je	 SHORT $LN42@inherit_sl
  014a1	48 83 7c 24 20
	00		 cmp	 QWORD PTR basebase$[rsp], 0
  014a7	74 22		 je	 SHORT $LN41@inherit_sl
  014a9	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  014ae	48 8b 80 c8 00
	00 00		 mov	 rax, QWORD PTR [rax+200]
  014b5	48 8b 4c 24 20	 mov	 rcx, QWORD PTR basebase$[rsp]
  014ba	48 8b 89 c8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+200]
  014c1	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  014c5	48 39 48 08	 cmp	 QWORD PTR [rax+8], rcx
  014c9	74 20		 je	 SHORT $LN42@inherit_sl
$LN41@inherit_sl:
  014cb	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  014d0	48 8b 80 c8 00
	00 00		 mov	 rax, QWORD PTR [rax+200]
  014d7	48 8b 4c 24 40	 mov	 rcx, QWORD PTR type$[rsp]
  014dc	48 8b 89 c8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+200]
  014e3	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  014e7	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
$LN42@inherit_sl:

; 4062 :         COPYMAP(mp_ass_subscript);

  014eb	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  014f0	48 8b 80 c8 00
	00 00		 mov	 rax, QWORD PTR [rax+200]
  014f7	48 83 78 10 00	 cmp	 QWORD PTR [rax+16], 0
  014fc	75 5d		 jne	 SHORT $LN40@inherit_sl
  014fe	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  01503	48 8b 80 c8 00
	00 00		 mov	 rax, QWORD PTR [rax+200]
  0150a	48 83 78 10 00	 cmp	 QWORD PTR [rax+16], 0
  0150f	74 4a		 je	 SHORT $LN40@inherit_sl
  01511	48 83 7c 24 20
	00		 cmp	 QWORD PTR basebase$[rsp], 0
  01517	74 22		 je	 SHORT $LN39@inherit_sl
  01519	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  0151e	48 8b 80 c8 00
	00 00		 mov	 rax, QWORD PTR [rax+200]
  01525	48 8b 4c 24 20	 mov	 rcx, QWORD PTR basebase$[rsp]
  0152a	48 8b 89 c8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+200]
  01531	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  01535	48 39 48 10	 cmp	 QWORD PTR [rax+16], rcx
  01539	74 20		 je	 SHORT $LN40@inherit_sl
$LN39@inherit_sl:
  0153b	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  01540	48 8b 80 c8 00
	00 00		 mov	 rax, QWORD PTR [rax+200]
  01547	48 8b 4c 24 40	 mov	 rcx, QWORD PTR type$[rsp]
  0154c	48 8b 89 c8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+200]
  01553	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  01557	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax
$LN40@inherit_sl:
$LN46@inherit_sl:

; 4063 :     }
; 4064 : 
; 4065 :     if (type->tp_as_buffer != NULL && base->tp_as_buffer != NULL) {

  0155b	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  01560	48 83 b8 f8 00
	00 00 00	 cmp	 QWORD PTR [rax+248], 0
  01568	0f 84 16 01 00
	00		 je	 $LN38@inherit_sl
  0156e	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  01573	48 83 b8 f8 00
	00 00 00	 cmp	 QWORD PTR [rax+248], 0
  0157b	0f 84 03 01 00
	00		 je	 $LN38@inherit_sl

; 4066 :         basebase = base->tp_base;

  01581	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  01586	48 8b 80 58 01
	00 00		 mov	 rax, QWORD PTR [rax+344]
  0158d	48 89 44 24 20	 mov	 QWORD PTR basebase$[rsp], rax

; 4067 :         if (basebase->tp_as_buffer == NULL)

  01592	48 8b 44 24 20	 mov	 rax, QWORD PTR basebase$[rsp]
  01597	48 83 b8 f8 00
	00 00 00	 cmp	 QWORD PTR [rax+248], 0
  0159f	75 09		 jne	 SHORT $LN37@inherit_sl

; 4068 :             basebase = NULL;

  015a1	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR basebase$[rsp], 0
$LN37@inherit_sl:

; 4069 :         COPYBUF(bf_getbuffer);

  015aa	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  015af	48 8b 80 f8 00
	00 00		 mov	 rax, QWORD PTR [rax+248]
  015b6	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  015ba	75 58		 jne	 SHORT $LN36@inherit_sl
  015bc	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  015c1	48 8b 80 f8 00
	00 00		 mov	 rax, QWORD PTR [rax+248]
  015c8	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  015cc	74 46		 je	 SHORT $LN36@inherit_sl
  015ce	48 83 7c 24 20
	00		 cmp	 QWORD PTR basebase$[rsp], 0
  015d4	74 20		 je	 SHORT $LN35@inherit_sl
  015d6	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  015db	48 8b 80 f8 00
	00 00		 mov	 rax, QWORD PTR [rax+248]
  015e2	48 8b 4c 24 20	 mov	 rcx, QWORD PTR basebase$[rsp]
  015e7	48 8b 89 f8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+248]
  015ee	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  015f1	48 39 08	 cmp	 QWORD PTR [rax], rcx
  015f4	74 1e		 je	 SHORT $LN36@inherit_sl
$LN35@inherit_sl:
  015f6	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  015fb	48 8b 80 f8 00
	00 00		 mov	 rax, QWORD PTR [rax+248]
  01602	48 8b 4c 24 40	 mov	 rcx, QWORD PTR type$[rsp]
  01607	48 8b 89 f8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+248]
  0160e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01611	48 89 01	 mov	 QWORD PTR [rcx], rax
$LN36@inherit_sl:

; 4070 :         COPYBUF(bf_releasebuffer);

  01614	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  01619	48 8b 80 f8 00
	00 00		 mov	 rax, QWORD PTR [rax+248]
  01620	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  01625	75 5d		 jne	 SHORT $LN34@inherit_sl
  01627	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  0162c	48 8b 80 f8 00
	00 00		 mov	 rax, QWORD PTR [rax+248]
  01633	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  01638	74 4a		 je	 SHORT $LN34@inherit_sl
  0163a	48 83 7c 24 20
	00		 cmp	 QWORD PTR basebase$[rsp], 0
  01640	74 22		 je	 SHORT $LN33@inherit_sl
  01642	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  01647	48 8b 80 f8 00
	00 00		 mov	 rax, QWORD PTR [rax+248]
  0164e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR basebase$[rsp]
  01653	48 8b 89 f8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+248]
  0165a	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  0165e	48 39 48 08	 cmp	 QWORD PTR [rax+8], rcx
  01662	74 20		 je	 SHORT $LN34@inherit_sl
$LN33@inherit_sl:
  01664	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  01669	48 8b 80 f8 00
	00 00		 mov	 rax, QWORD PTR [rax+248]
  01670	48 8b 4c 24 40	 mov	 rcx, QWORD PTR type$[rsp]
  01675	48 8b 89 f8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+248]
  0167c	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  01680	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
$LN34@inherit_sl:
$LN38@inherit_sl:

; 4071 :     }
; 4072 : 
; 4073 :     basebase = base->tp_base;

  01684	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  01689	48 8b 80 58 01
	00 00		 mov	 rax, QWORD PTR [rax+344]
  01690	48 89 44 24 20	 mov	 QWORD PTR basebase$[rsp], rax

; 4074 : 
; 4075 :     COPYSLOT(tp_dealloc);

  01695	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  0169a	48 83 b8 88 00
	00 00 00	 cmp	 QWORD PTR [rax+136], 0
  016a2	75 49		 jne	 SHORT $LN32@inherit_sl
  016a4	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  016a9	48 83 b8 88 00
	00 00 00	 cmp	 QWORD PTR [rax+136], 0
  016b1	74 3a		 je	 SHORT $LN32@inherit_sl
  016b3	48 83 7c 24 20
	00		 cmp	 QWORD PTR basebase$[rsp], 0
  016b9	74 1a		 je	 SHORT $LN31@inherit_sl
  016bb	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  016c0	48 8b 4c 24 20	 mov	 rcx, QWORD PTR basebase$[rsp]
  016c5	48 8b 89 88 00
	00 00		 mov	 rcx, QWORD PTR [rcx+136]
  016cc	48 39 88 88 00
	00 00		 cmp	 QWORD PTR [rax+136], rcx
  016d3	74 18		 je	 SHORT $LN32@inherit_sl
$LN31@inherit_sl:
  016d5	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  016da	48 8b 4c 24 48	 mov	 rcx, QWORD PTR base$[rsp]
  016df	48 8b 89 88 00
	00 00		 mov	 rcx, QWORD PTR [rcx+136]
  016e6	48 89 88 88 00
	00 00		 mov	 QWORD PTR [rax+136], rcx
$LN32@inherit_sl:

; 4076 :     if (type->tp_getattr == NULL && type->tp_getattro == NULL) {

  016ed	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  016f2	48 83 b8 98 00
	00 00 00	 cmp	 QWORD PTR [rax+152], 0
  016fa	75 3f		 jne	 SHORT $LN30@inherit_sl
  016fc	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  01701	48 83 b8 e8 00
	00 00 00	 cmp	 QWORD PTR [rax+232], 0
  01709	75 30		 jne	 SHORT $LN30@inherit_sl

; 4077 :         type->tp_getattr = base->tp_getattr;

  0170b	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  01710	48 8b 4c 24 48	 mov	 rcx, QWORD PTR base$[rsp]
  01715	48 8b 89 98 00
	00 00		 mov	 rcx, QWORD PTR [rcx+152]
  0171c	48 89 88 98 00
	00 00		 mov	 QWORD PTR [rax+152], rcx

; 4078 :         type->tp_getattro = base->tp_getattro;

  01723	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  01728	48 8b 4c 24 48	 mov	 rcx, QWORD PTR base$[rsp]
  0172d	48 8b 89 e8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+232]
  01734	48 89 88 e8 00
	00 00		 mov	 QWORD PTR [rax+232], rcx
$LN30@inherit_sl:

; 4079 :     }
; 4080 :     if (type->tp_setattr == NULL && type->tp_setattro == NULL) {

  0173b	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  01740	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  01748	75 3f		 jne	 SHORT $LN29@inherit_sl
  0174a	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  0174f	48 83 b8 f0 00
	00 00 00	 cmp	 QWORD PTR [rax+240], 0
  01757	75 30		 jne	 SHORT $LN29@inherit_sl

; 4081 :         type->tp_setattr = base->tp_setattr;

  01759	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  0175e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR base$[rsp]
  01763	48 8b 89 a0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+160]
  0176a	48 89 88 a0 00
	00 00		 mov	 QWORD PTR [rax+160], rcx

; 4082 :         type->tp_setattro = base->tp_setattro;

  01771	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  01776	48 8b 4c 24 48	 mov	 rcx, QWORD PTR base$[rsp]
  0177b	48 8b 89 f0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+240]
  01782	48 89 88 f0 00
	00 00		 mov	 QWORD PTR [rax+240], rcx
$LN29@inherit_sl:

; 4083 :     }
; 4084 :     /* tp_reserved is ignored */
; 4085 :     COPYSLOT(tp_repr);

  01789	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  0178e	48 83 b8 b0 00
	00 00 00	 cmp	 QWORD PTR [rax+176], 0
  01796	75 49		 jne	 SHORT $LN28@inherit_sl
  01798	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  0179d	48 83 b8 b0 00
	00 00 00	 cmp	 QWORD PTR [rax+176], 0
  017a5	74 3a		 je	 SHORT $LN28@inherit_sl
  017a7	48 83 7c 24 20
	00		 cmp	 QWORD PTR basebase$[rsp], 0
  017ad	74 1a		 je	 SHORT $LN27@inherit_sl
  017af	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  017b4	48 8b 4c 24 20	 mov	 rcx, QWORD PTR basebase$[rsp]
  017b9	48 8b 89 b0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+176]
  017c0	48 39 88 b0 00
	00 00		 cmp	 QWORD PTR [rax+176], rcx
  017c7	74 18		 je	 SHORT $LN28@inherit_sl
$LN27@inherit_sl:
  017c9	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  017ce	48 8b 4c 24 48	 mov	 rcx, QWORD PTR base$[rsp]
  017d3	48 8b 89 b0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+176]
  017da	48 89 88 b0 00
	00 00		 mov	 QWORD PTR [rax+176], rcx
$LN28@inherit_sl:

; 4086 :     /* tp_hash see tp_richcompare */
; 4087 :     COPYSLOT(tp_call);

  017e1	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  017e6	48 83 b8 d8 00
	00 00 00	 cmp	 QWORD PTR [rax+216], 0
  017ee	75 49		 jne	 SHORT $LN26@inherit_sl
  017f0	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  017f5	48 83 b8 d8 00
	00 00 00	 cmp	 QWORD PTR [rax+216], 0
  017fd	74 3a		 je	 SHORT $LN26@inherit_sl
  017ff	48 83 7c 24 20
	00		 cmp	 QWORD PTR basebase$[rsp], 0
  01805	74 1a		 je	 SHORT $LN25@inherit_sl
  01807	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  0180c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR basebase$[rsp]
  01811	48 8b 89 d8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+216]
  01818	48 39 88 d8 00
	00 00		 cmp	 QWORD PTR [rax+216], rcx
  0181f	74 18		 je	 SHORT $LN26@inherit_sl
$LN25@inherit_sl:
  01821	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  01826	48 8b 4c 24 48	 mov	 rcx, QWORD PTR base$[rsp]
  0182b	48 8b 89 d8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+216]
  01832	48 89 88 d8 00
	00 00		 mov	 QWORD PTR [rax+216], rcx
$LN26@inherit_sl:

; 4088 :     COPYSLOT(tp_str);

  01839	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  0183e	48 83 b8 e0 00
	00 00 00	 cmp	 QWORD PTR [rax+224], 0
  01846	75 49		 jne	 SHORT $LN24@inherit_sl
  01848	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  0184d	48 83 b8 e0 00
	00 00 00	 cmp	 QWORD PTR [rax+224], 0
  01855	74 3a		 je	 SHORT $LN24@inherit_sl
  01857	48 83 7c 24 20
	00		 cmp	 QWORD PTR basebase$[rsp], 0
  0185d	74 1a		 je	 SHORT $LN23@inherit_sl
  0185f	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  01864	48 8b 4c 24 20	 mov	 rcx, QWORD PTR basebase$[rsp]
  01869	48 8b 89 e0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+224]
  01870	48 39 88 e0 00
	00 00		 cmp	 QWORD PTR [rax+224], rcx
  01877	74 18		 je	 SHORT $LN24@inherit_sl
$LN23@inherit_sl:
  01879	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  0187e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR base$[rsp]
  01883	48 8b 89 e0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+224]
  0188a	48 89 88 e0 00
	00 00		 mov	 QWORD PTR [rax+224], rcx
$LN24@inherit_sl:

; 4089 :     {
; 4090 :         /* Copy comparison-related slots only when
; 4091 :            not overriding them anywhere */
; 4092 :         if (type->tp_richcompare == NULL &&
; 4093 :             type->tp_hash == NULL &&
; 4094 :             !overrides_hash(type))

  01891	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  01896	48 83 b8 20 01
	00 00 00	 cmp	 QWORD PTR [rax+288], 0
  0189e	75 4d		 jne	 SHORT $LN22@inherit_sl
  018a0	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  018a5	48 83 b8 d0 00
	00 00 00	 cmp	 QWORD PTR [rax+208], 0
  018ad	75 3e		 jne	 SHORT $LN22@inherit_sl
  018af	48 8b 4c 24 40	 mov	 rcx, QWORD PTR type$[rsp]
  018b4	e8 00 00 00 00	 call	 overrides_hash
  018b9	85 c0		 test	 eax, eax
  018bb	75 30		 jne	 SHORT $LN22@inherit_sl

; 4095 :         {
; 4096 :             type->tp_richcompare = base->tp_richcompare;

  018bd	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  018c2	48 8b 4c 24 48	 mov	 rcx, QWORD PTR base$[rsp]
  018c7	48 8b 89 20 01
	00 00		 mov	 rcx, QWORD PTR [rcx+288]
  018ce	48 89 88 20 01
	00 00		 mov	 QWORD PTR [rax+288], rcx

; 4097 :             type->tp_hash = base->tp_hash;

  018d5	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  018da	48 8b 4c 24 48	 mov	 rcx, QWORD PTR base$[rsp]
  018df	48 8b 89 d0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+208]
  018e6	48 89 88 d0 00
	00 00		 mov	 QWORD PTR [rax+208], rcx
$LN22@inherit_sl:

; 4098 :         }
; 4099 :     }
; 4100 :     {
; 4101 :         COPYSLOT(tp_iter);

  018ed	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  018f2	48 83 b8 30 01
	00 00 00	 cmp	 QWORD PTR [rax+304], 0
  018fa	75 49		 jne	 SHORT $LN21@inherit_sl
  018fc	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  01901	48 83 b8 30 01
	00 00 00	 cmp	 QWORD PTR [rax+304], 0
  01909	74 3a		 je	 SHORT $LN21@inherit_sl
  0190b	48 83 7c 24 20
	00		 cmp	 QWORD PTR basebase$[rsp], 0
  01911	74 1a		 je	 SHORT $LN20@inherit_sl
  01913	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  01918	48 8b 4c 24 20	 mov	 rcx, QWORD PTR basebase$[rsp]
  0191d	48 8b 89 30 01
	00 00		 mov	 rcx, QWORD PTR [rcx+304]
  01924	48 39 88 30 01
	00 00		 cmp	 QWORD PTR [rax+304], rcx
  0192b	74 18		 je	 SHORT $LN21@inherit_sl
$LN20@inherit_sl:
  0192d	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  01932	48 8b 4c 24 48	 mov	 rcx, QWORD PTR base$[rsp]
  01937	48 8b 89 30 01
	00 00		 mov	 rcx, QWORD PTR [rcx+304]
  0193e	48 89 88 30 01
	00 00		 mov	 QWORD PTR [rax+304], rcx
$LN21@inherit_sl:

; 4102 :         COPYSLOT(tp_iternext);

  01945	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  0194a	48 83 b8 38 01
	00 00 00	 cmp	 QWORD PTR [rax+312], 0
  01952	75 49		 jne	 SHORT $LN19@inherit_sl
  01954	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  01959	48 83 b8 38 01
	00 00 00	 cmp	 QWORD PTR [rax+312], 0
  01961	74 3a		 je	 SHORT $LN19@inherit_sl
  01963	48 83 7c 24 20
	00		 cmp	 QWORD PTR basebase$[rsp], 0
  01969	74 1a		 je	 SHORT $LN18@inherit_sl
  0196b	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  01970	48 8b 4c 24 20	 mov	 rcx, QWORD PTR basebase$[rsp]
  01975	48 8b 89 38 01
	00 00		 mov	 rcx, QWORD PTR [rcx+312]
  0197c	48 39 88 38 01
	00 00		 cmp	 QWORD PTR [rax+312], rcx
  01983	74 18		 je	 SHORT $LN19@inherit_sl
$LN18@inherit_sl:
  01985	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  0198a	48 8b 4c 24 48	 mov	 rcx, QWORD PTR base$[rsp]
  0198f	48 8b 89 38 01
	00 00		 mov	 rcx, QWORD PTR [rcx+312]
  01996	48 89 88 38 01
	00 00		 mov	 QWORD PTR [rax+312], rcx
$LN19@inherit_sl:

; 4103 :     }
; 4104 :     {
; 4105 :         COPYSLOT(tp_descr_get);

  0199d	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  019a2	48 83 b8 68 01
	00 00 00	 cmp	 QWORD PTR [rax+360], 0
  019aa	75 49		 jne	 SHORT $LN17@inherit_sl
  019ac	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  019b1	48 83 b8 68 01
	00 00 00	 cmp	 QWORD PTR [rax+360], 0
  019b9	74 3a		 je	 SHORT $LN17@inherit_sl
  019bb	48 83 7c 24 20
	00		 cmp	 QWORD PTR basebase$[rsp], 0
  019c1	74 1a		 je	 SHORT $LN16@inherit_sl
  019c3	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  019c8	48 8b 4c 24 20	 mov	 rcx, QWORD PTR basebase$[rsp]
  019cd	48 8b 89 68 01
	00 00		 mov	 rcx, QWORD PTR [rcx+360]
  019d4	48 39 88 68 01
	00 00		 cmp	 QWORD PTR [rax+360], rcx
  019db	74 18		 je	 SHORT $LN17@inherit_sl
$LN16@inherit_sl:
  019dd	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  019e2	48 8b 4c 24 48	 mov	 rcx, QWORD PTR base$[rsp]
  019e7	48 8b 89 68 01
	00 00		 mov	 rcx, QWORD PTR [rcx+360]
  019ee	48 89 88 68 01
	00 00		 mov	 QWORD PTR [rax+360], rcx
$LN17@inherit_sl:

; 4106 :         COPYSLOT(tp_descr_set);

  019f5	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  019fa	48 83 b8 70 01
	00 00 00	 cmp	 QWORD PTR [rax+368], 0
  01a02	75 49		 jne	 SHORT $LN15@inherit_sl
  01a04	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  01a09	48 83 b8 70 01
	00 00 00	 cmp	 QWORD PTR [rax+368], 0
  01a11	74 3a		 je	 SHORT $LN15@inherit_sl
  01a13	48 83 7c 24 20
	00		 cmp	 QWORD PTR basebase$[rsp], 0
  01a19	74 1a		 je	 SHORT $LN14@inherit_sl
  01a1b	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  01a20	48 8b 4c 24 20	 mov	 rcx, QWORD PTR basebase$[rsp]
  01a25	48 8b 89 70 01
	00 00		 mov	 rcx, QWORD PTR [rcx+368]
  01a2c	48 39 88 70 01
	00 00		 cmp	 QWORD PTR [rax+368], rcx
  01a33	74 18		 je	 SHORT $LN15@inherit_sl
$LN14@inherit_sl:
  01a35	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  01a3a	48 8b 4c 24 48	 mov	 rcx, QWORD PTR base$[rsp]
  01a3f	48 8b 89 70 01
	00 00		 mov	 rcx, QWORD PTR [rcx+368]
  01a46	48 89 88 70 01
	00 00		 mov	 QWORD PTR [rax+368], rcx
$LN15@inherit_sl:

; 4107 :         COPYSLOT(tp_dictoffset);

  01a4d	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  01a52	48 83 b8 78 01
	00 00 00	 cmp	 QWORD PTR [rax+376], 0
  01a5a	75 49		 jne	 SHORT $LN13@inherit_sl
  01a5c	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  01a61	48 83 b8 78 01
	00 00 00	 cmp	 QWORD PTR [rax+376], 0
  01a69	74 3a		 je	 SHORT $LN13@inherit_sl
  01a6b	48 83 7c 24 20
	00		 cmp	 QWORD PTR basebase$[rsp], 0
  01a71	74 1a		 je	 SHORT $LN12@inherit_sl
  01a73	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  01a78	48 8b 4c 24 20	 mov	 rcx, QWORD PTR basebase$[rsp]
  01a7d	48 8b 89 78 01
	00 00		 mov	 rcx, QWORD PTR [rcx+376]
  01a84	48 39 88 78 01
	00 00		 cmp	 QWORD PTR [rax+376], rcx
  01a8b	74 18		 je	 SHORT $LN13@inherit_sl
$LN12@inherit_sl:
  01a8d	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  01a92	48 8b 4c 24 48	 mov	 rcx, QWORD PTR base$[rsp]
  01a97	48 8b 89 78 01
	00 00		 mov	 rcx, QWORD PTR [rcx+376]
  01a9e	48 89 88 78 01
	00 00		 mov	 QWORD PTR [rax+376], rcx
$LN13@inherit_sl:

; 4108 :         COPYSLOT(tp_init);

  01aa5	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  01aaa	48 83 b8 80 01
	00 00 00	 cmp	 QWORD PTR [rax+384], 0
  01ab2	75 49		 jne	 SHORT $LN11@inherit_sl
  01ab4	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  01ab9	48 83 b8 80 01
	00 00 00	 cmp	 QWORD PTR [rax+384], 0
  01ac1	74 3a		 je	 SHORT $LN11@inherit_sl
  01ac3	48 83 7c 24 20
	00		 cmp	 QWORD PTR basebase$[rsp], 0
  01ac9	74 1a		 je	 SHORT $LN10@inherit_sl
  01acb	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  01ad0	48 8b 4c 24 20	 mov	 rcx, QWORD PTR basebase$[rsp]
  01ad5	48 8b 89 80 01
	00 00		 mov	 rcx, QWORD PTR [rcx+384]
  01adc	48 39 88 80 01
	00 00		 cmp	 QWORD PTR [rax+384], rcx
  01ae3	74 18		 je	 SHORT $LN11@inherit_sl
$LN10@inherit_sl:
  01ae5	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  01aea	48 8b 4c 24 48	 mov	 rcx, QWORD PTR base$[rsp]
  01aef	48 8b 89 80 01
	00 00		 mov	 rcx, QWORD PTR [rcx+384]
  01af6	48 89 88 80 01
	00 00		 mov	 QWORD PTR [rax+384], rcx
$LN11@inherit_sl:

; 4109 :         COPYSLOT(tp_alloc);

  01afd	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  01b02	48 83 b8 88 01
	00 00 00	 cmp	 QWORD PTR [rax+392], 0
  01b0a	75 49		 jne	 SHORT $LN9@inherit_sl
  01b0c	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  01b11	48 83 b8 88 01
	00 00 00	 cmp	 QWORD PTR [rax+392], 0
  01b19	74 3a		 je	 SHORT $LN9@inherit_sl
  01b1b	48 83 7c 24 20
	00		 cmp	 QWORD PTR basebase$[rsp], 0
  01b21	74 1a		 je	 SHORT $LN8@inherit_sl
  01b23	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  01b28	48 8b 4c 24 20	 mov	 rcx, QWORD PTR basebase$[rsp]
  01b2d	48 8b 89 88 01
	00 00		 mov	 rcx, QWORD PTR [rcx+392]
  01b34	48 39 88 88 01
	00 00		 cmp	 QWORD PTR [rax+392], rcx
  01b3b	74 18		 je	 SHORT $LN9@inherit_sl
$LN8@inherit_sl:
  01b3d	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  01b42	48 8b 4c 24 48	 mov	 rcx, QWORD PTR base$[rsp]
  01b47	48 8b 89 88 01
	00 00		 mov	 rcx, QWORD PTR [rcx+392]
  01b4e	48 89 88 88 01
	00 00		 mov	 QWORD PTR [rax+392], rcx
$LN9@inherit_sl:

; 4110 :         COPYSLOT(tp_is_gc);

  01b55	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  01b5a	48 83 b8 a0 01
	00 00 00	 cmp	 QWORD PTR [rax+416], 0
  01b62	75 49		 jne	 SHORT $LN7@inherit_sl
  01b64	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  01b69	48 83 b8 a0 01
	00 00 00	 cmp	 QWORD PTR [rax+416], 0
  01b71	74 3a		 je	 SHORT $LN7@inherit_sl
  01b73	48 83 7c 24 20
	00		 cmp	 QWORD PTR basebase$[rsp], 0
  01b79	74 1a		 je	 SHORT $LN6@inherit_sl
  01b7b	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  01b80	48 8b 4c 24 20	 mov	 rcx, QWORD PTR basebase$[rsp]
  01b85	48 8b 89 a0 01
	00 00		 mov	 rcx, QWORD PTR [rcx+416]
  01b8c	48 39 88 a0 01
	00 00		 cmp	 QWORD PTR [rax+416], rcx
  01b93	74 18		 je	 SHORT $LN7@inherit_sl
$LN6@inherit_sl:
  01b95	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  01b9a	48 8b 4c 24 48	 mov	 rcx, QWORD PTR base$[rsp]
  01b9f	48 8b 89 a0 01
	00 00		 mov	 rcx, QWORD PTR [rcx+416]
  01ba6	48 89 88 a0 01
	00 00		 mov	 QWORD PTR [rax+416], rcx
$LN7@inherit_sl:

; 4111 :         if ((type->tp_flags & Py_TPFLAGS_HAVE_GC) ==
; 4112 :             (base->tp_flags & Py_TPFLAGS_HAVE_GC)) {

  01bad	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  01bb2	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  01bb8	25 00 40 00 00	 and	 eax, 16384		; 00004000H
  01bbd	48 8b 4c 24 48	 mov	 rcx, QWORD PTR base$[rsp]
  01bc2	8b 89 00 01 00
	00		 mov	 ecx, DWORD PTR [rcx+256]
  01bc8	81 e1 00 40 00
	00		 and	 ecx, 16384		; 00004000H
  01bce	3b c1		 cmp	 eax, ecx
  01bd0	75 5a		 jne	 SHORT $LN5@inherit_sl

; 4113 :             /* They agree about gc. */
; 4114 :             COPYSLOT(tp_free);

  01bd2	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  01bd7	48 83 b8 98 01
	00 00 00	 cmp	 QWORD PTR [rax+408], 0
  01bdf	75 49		 jne	 SHORT $LN4@inherit_sl
  01be1	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  01be6	48 83 b8 98 01
	00 00 00	 cmp	 QWORD PTR [rax+408], 0
  01bee	74 3a		 je	 SHORT $LN4@inherit_sl
  01bf0	48 83 7c 24 20
	00		 cmp	 QWORD PTR basebase$[rsp], 0
  01bf6	74 1a		 je	 SHORT $LN3@inherit_sl
  01bf8	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  01bfd	48 8b 4c 24 20	 mov	 rcx, QWORD PTR basebase$[rsp]
  01c02	48 8b 89 98 01
	00 00		 mov	 rcx, QWORD PTR [rcx+408]
  01c09	48 39 88 98 01
	00 00		 cmp	 QWORD PTR [rax+408], rcx
  01c10	74 18		 je	 SHORT $LN4@inherit_sl
$LN3@inherit_sl:
  01c12	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  01c17	48 8b 4c 24 48	 mov	 rcx, QWORD PTR base$[rsp]
  01c1c	48 8b 89 98 01
	00 00		 mov	 rcx, QWORD PTR [rcx+408]
  01c23	48 89 88 98 01
	00 00		 mov	 QWORD PTR [rax+408], rcx
$LN4@inherit_sl:

; 4115 :         }
; 4116 :         else if ((type->tp_flags & Py_TPFLAGS_HAVE_GC) &&

  01c2a	eb 4b		 jmp	 SHORT $LN2@inherit_sl
$LN5@inherit_sl:

; 4117 :                  type->tp_free == NULL &&
; 4118 :                  base->tp_free == PyObject_Free) {

  01c2c	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  01c31	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  01c37	25 00 40 00 00	 and	 eax, 16384		; 00004000H
  01c3c	85 c0		 test	 eax, eax
  01c3e	74 37		 je	 SHORT $LN1@inherit_sl
  01c40	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  01c45	48 83 b8 98 01
	00 00 00	 cmp	 QWORD PTR [rax+408], 0
  01c4d	75 28		 jne	 SHORT $LN1@inherit_sl
  01c4f	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  01c54	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_PyObject_DebugFree
  01c5b	48 39 88 98 01
	00 00		 cmp	 QWORD PTR [rax+408], rcx
  01c62	75 13		 jne	 SHORT $LN1@inherit_sl

; 4119 :             /* A bit of magic to plug in the correct default
; 4120 :              * tp_free function when a derived class adds gc,
; 4121 :              * didn't define tp_free, and the base uses the
; 4122 :              * default non-gc tp_free.
; 4123 :              */
; 4124 :             type->tp_free = PyObject_GC_Del;

  01c64	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  01c69	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyObject_GC_Del
  01c70	48 89 88 98 01
	00 00		 mov	 QWORD PTR [rax+408], rcx
$LN1@inherit_sl:
$LN2@inherit_sl:

; 4125 :         }
; 4126 :         /* else they didn't agree about gc, and there isn't something
; 4127 :          * obvious to be done -- the type is on its own.
; 4128 :          */
; 4129 :     }
; 4130 : }

  01c77	48 83 c4 38	 add	 rsp, 56			; 00000038H
  01c7b	c3		 ret	 0
inherit_slots ENDP
_TEXT	ENDS
PUBLIC	??_C@_1BK@JEMNKLBK@?$AAd?$AAi?$AAc?$AAt?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$overrides_hash DD imagerel overrides_hash
	DD	imagerel overrides_hash+171
	DD	imagerel $unwind$overrides_hash
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$overrides_hash DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_1BK@JEMNKLBK@?$AAd?$AAi?$AAc?$AAt?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
CONST	SEGMENT
??_C@_1BK@JEMNKLBK@?$AAd?$AAi?$AAc?$AAt?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ DB 'd'
	DB	00H, 'i', 00H, 'c', 00H, 't', 00H, ' ', 00H, '!', 00H, '=', 00H
	DB	' ', 00H, 'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT overrides_hash
_TEXT	SEGMENT
dict$ = 32
type$ = 64
overrides_hash PROC					; COMDAT

; 3964 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 3965 :     PyObject *dict = type->tp_dict;

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  0000e	48 8b 80 60 01
	00 00		 mov	 rax, QWORD PTR [rax+352]
  00015	48 89 44 24 20	 mov	 QWORD PTR dict$[rsp], rax

; 3966 :     _Py_IDENTIFIER(__eq__);
; 3967 : 
; 3968 :     assert(dict != NULL);

  0001a	48 83 7c 24 20
	00		 cmp	 QWORD PTR dict$[rsp], 0
  00020	75 1c		 jne	 SHORT $LN5@overrides_
  00022	41 b8 80 0f 00
	00		 mov	 r8d, 3968		; 00000f80H
  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@GJLLIOPA@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAt?$AAy?$AAp?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BK@JEMNKLBK@?$AAd?$AAi?$AAc?$AAt?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
  00036	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0003c	33 c0		 xor	 eax, eax
$LN5@overrides_:

; 3969 :     if (_PyDict_GetItemId(dict, &PyId___eq__) != NULL)

  0003e	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId___eq__@?1??overrides_hash@@9@9
  00043	8b c0		 mov	 eax, eax
  00045	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0004b	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00054	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00058	48 8b d0	 mov	 rdx, rax
  0005b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR dict$[rsp]
  00060	e8 00 00 00 00	 call	 _PyDict_GetItemId
  00065	48 85 c0	 test	 rax, rax
  00068	74 07		 je	 SHORT $LN2@overrides_

; 3970 :         return 1;

  0006a	b8 01 00 00 00	 mov	 eax, 1
  0006f	eb 35		 jmp	 SHORT $LN3@overrides_
$LN2@overrides_:

; 3971 :     if (_PyDict_GetItemId(dict, &PyId___hash__) != NULL)

  00071	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId___hash__
  00076	8b c0		 mov	 eax, eax
  00078	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0007e	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00087	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0008b	48 8b d0	 mov	 rdx, rax
  0008e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR dict$[rsp]
  00093	e8 00 00 00 00	 call	 _PyDict_GetItemId
  00098	48 85 c0	 test	 rax, rax
  0009b	74 07		 je	 SHORT $LN1@overrides_

; 3972 :         return 1;

  0009d	b8 01 00 00 00	 mov	 eax, 1
  000a2	eb 02		 jmp	 SHORT $LN3@overrides_
$LN1@overrides_:

; 3973 :     return 0;

  000a4	33 c0		 xor	 eax, eax
$LN3@overrides_:

; 3974 : }

  000a6	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000aa	c3		 ret	 0
overrides_hash ENDP
_TEXT	ENDS
PUBLIC	??_C@_1CG@PHHENABL@?$AAP?$AAy?$AAL?$AAi?$AAs?$AAt?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAl?$AAi?$AAs?$AAt?$AA?$CJ?$AA?$AA@ ; `string'
EXTRN	PyList_SetItem:PROC
EXTRN	PyWeakref_NewRef:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$add_subclass DD imagerel add_subclass
	DD	imagerel add_subclass+411
	DD	imagerel $unwind$add_subclass
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$add_subclass DD 010e01H
	DD	0a20eH
xdata	ENDS
;	COMDAT ??_C@_1CG@PHHENABL@?$AAP?$AAy?$AAL?$AAi?$AAs?$AAt?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAl?$AAi?$AAs?$AAt?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CG@PHHENABL@?$AAP?$AAy?$AAL?$AAi?$AAs?$AAt?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAl?$AAi?$AAs?$AAt?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'L', 00H, 'i', 00H, 's', 00H, 't', 00H, '_', 00H
	DB	'C', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, '(', 00H, 'l'
	DB	00H, 'i', 00H, 's', 00H, 't', 00H, ')', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT add_subclass
_TEXT	SEGMENT
i$ = 32
ref$ = 40
list$ = 48
result$ = 56
newobj$ = 64
tv134 = 72
base$ = 96
type$ = 104
add_subclass PROC					; COMDAT

; 4333 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 4334 :     Py_ssize_t i;
; 4335 :     int result;
; 4336 :     PyObject *list, *ref, *newobj;
; 4337 : 
; 4338 :     list = base->tp_subclasses;

  0000e	48 8b 44 24 60	 mov	 rax, QWORD PTR base$[rsp]
  00013	48 8b 80 c0 01
	00 00		 mov	 rax, QWORD PTR [rax+448]
  0001a	48 89 44 24 30	 mov	 QWORD PTR list$[rsp], rax

; 4339 :     if (list == NULL) {

  0001f	48 83 7c 24 30
	00		 cmp	 QWORD PTR list$[rsp], 0
  00025	75 2f		 jne	 SHORT $LN5@add_subcla

; 4340 :         base->tp_subclasses = list = PyList_New(0);

  00027	33 c9		 xor	 ecx, ecx
  00029	e8 00 00 00 00	 call	 PyList_New
  0002e	48 89 44 24 30	 mov	 QWORD PTR list$[rsp], rax
  00033	48 8b 44 24 60	 mov	 rax, QWORD PTR base$[rsp]
  00038	48 8b 4c 24 30	 mov	 rcx, QWORD PTR list$[rsp]
  0003d	48 89 88 c0 01
	00 00		 mov	 QWORD PTR [rax+448], rcx

; 4341 :         if (list == NULL)

  00044	48 83 7c 24 30
	00		 cmp	 QWORD PTR list$[rsp], 0
  0004a	75 0a		 jne	 SHORT $LN4@add_subcla

; 4342 :             return -1;

  0004c	b8 ff ff ff ff	 mov	 eax, -1
  00051	e9 40 01 00 00	 jmp	 $LN6@add_subcla
$LN4@add_subcla:
$LN5@add_subcla:

; 4343 :     }
; 4344 :     assert(PyList_Check(list));

  00056	48 8b 44 24 30	 mov	 rax, QWORD PTR list$[rsp]
  0005b	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0005f	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00065	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  0006a	85 c0		 test	 eax, eax
  0006c	75 1c		 jne	 SHORT $LN8@add_subcla
  0006e	41 b8 f8 10 00
	00		 mov	 r8d, 4344		; 000010f8H
  00074	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@GJLLIOPA@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAt?$AAy?$AAp?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  0007b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@PHHENABL@?$AAP?$AAy?$AAL?$AAi?$AAs?$AAt?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAl?$AAi?$AAs?$AAt?$AA?$CJ?$AA?$AA@
  00082	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00088	33 c0		 xor	 eax, eax
$LN8@add_subcla:

; 4345 :     newobj = PyWeakref_NewRef((PyObject *)type, NULL);

  0008a	33 d2		 xor	 edx, edx
  0008c	48 8b 4c 24 68	 mov	 rcx, QWORD PTR type$[rsp]
  00091	e8 00 00 00 00	 call	 PyWeakref_NewRef
  00096	48 89 44 24 40	 mov	 QWORD PTR newobj$[rsp], rax

; 4346 :     i = PyList_GET_SIZE(list);

  0009b	48 8b 44 24 30	 mov	 rax, QWORD PTR list$[rsp]
  000a0	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000a4	48 89 44 24 20	 mov	 QWORD PTR i$[rsp], rax
$LN3@add_subcla:

; 4347 :     while (--i >= 0) {

  000a9	48 8b 44 24 20	 mov	 rax, QWORD PTR i$[rsp]
  000ae	48 ff c8	 dec	 rax
  000b1	48 89 44 24 20	 mov	 QWORD PTR i$[rsp], rax
  000b6	48 83 7c 24 20
	00		 cmp	 QWORD PTR i$[rsp], 0
  000bc	0f 8c b3 00 00
	00		 jl	 $LN2@add_subcla

; 4348 :         ref = PyList_GET_ITEM(list, i);

  000c2	48 8b 44 24 30	 mov	 rax, QWORD PTR list$[rsp]
  000c7	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  000cb	48 8b 4c 24 20	 mov	 rcx, QWORD PTR i$[rsp]
  000d0	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  000d4	48 89 44 24 28	 mov	 QWORD PTR ref$[rsp], rax

; 4349 :         assert(PyWeakref_CheckRef(ref));

  000d9	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_RefType
  000e0	48 8b 4c 24 28	 mov	 rcx, QWORD PTR ref$[rsp]
  000e5	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  000e9	74 35		 je	 SHORT $LN9@add_subcla
  000eb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_PyWeakref_RefType
  000f2	48 8b 44 24 28	 mov	 rax, QWORD PTR ref$[rsp]
  000f7	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  000fb	e8 00 00 00 00	 call	 PyType_IsSubtype
  00100	85 c0		 test	 eax, eax
  00102	75 1c		 jne	 SHORT $LN9@add_subcla
  00104	41 b8 fd 10 00
	00		 mov	 r8d, 4349		; 000010fdH
  0010a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@GJLLIOPA@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAt?$AAy?$AAp?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00111	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@IHEHGJMP@?$AAP?$AAy?$AAW?$AAe?$AAa?$AAk?$AAr?$AAe?$AAf?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AAR?$AAe?$AAf?$AA?$CI?$AAr?$AAe?$AAf?$AA?$CJ?$AA?$AA@
  00118	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0011e	33 c0		 xor	 eax, eax
$LN9@add_subcla:

; 4350 :         if (PyWeakref_GET_OBJECT(ref) == Py_None)

  00120	48 8b 44 24 28	 mov	 rax, QWORD PTR ref$[rsp]
  00125	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00129	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  0012e	7e 10		 jle	 SHORT $LN10@add_subcla
  00130	48 8b 44 24 28	 mov	 rax, QWORD PTR ref$[rsp]
  00135	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00139	48 89 44 24 48	 mov	 QWORD PTR tv134[rsp], rax
  0013e	eb 0c		 jmp	 SHORT $LN11@add_subcla
$LN10@add_subcla:
  00140	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00147	48 89 44 24 48	 mov	 QWORD PTR tv134[rsp], rax
$LN11@add_subcla:
  0014c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00153	48 39 44 24 48	 cmp	 QWORD PTR tv134[rsp], rax
  00158	75 16		 jne	 SHORT $LN1@add_subcla

; 4351 :             return PyList_SetItem(list, i, newobj);

  0015a	4c 8b 44 24 40	 mov	 r8, QWORD PTR newobj$[rsp]
  0015f	48 8b 54 24 20	 mov	 rdx, QWORD PTR i$[rsp]
  00164	48 8b 4c 24 30	 mov	 rcx, QWORD PTR list$[rsp]
  00169	e8 00 00 00 00	 call	 PyList_SetItem
  0016e	eb 26		 jmp	 SHORT $LN6@add_subcla
$LN1@add_subcla:

; 4352 :     }

  00170	e9 34 ff ff ff	 jmp	 $LN3@add_subcla
$LN2@add_subcla:

; 4353 :     result = PyList_Append(list, newobj);

  00175	48 8b 54 24 40	 mov	 rdx, QWORD PTR newobj$[rsp]
  0017a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR list$[rsp]
  0017f	e8 00 00 00 00	 call	 PyList_Append
  00184	89 44 24 38	 mov	 DWORD PTR result$[rsp], eax

; 4354 :     Py_DECREF(newobj);

  00188	48 8b 4c 24 40	 mov	 rcx, QWORD PTR newobj$[rsp]
  0018d	e8 00 00 00 00	 call	 _Py_DecRef

; 4355 :     return result;

  00192	8b 44 24 38	 mov	 eax, DWORD PTR result$[rsp]
$LN6@add_subcla:

; 4356 : }

  00196	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0019a	c3		 ret	 0
add_subclass ENDP
_TEXT	ENDS
EXTRN	PySequence_DelItem:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$remove_subclass DD imagerel remove_subclass
	DD	imagerel remove_subclass+312
	DD	imagerel $unwind$remove_subclass
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$remove_subclass DD 010e01H
	DD	0820eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT remove_subclass
_TEXT	SEGMENT
i$ = 32
ref$ = 40
list$ = 48
tv95 = 56
base$ = 80
type$ = 88
remove_subclass PROC					; COMDAT

; 4360 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 4361 :     Py_ssize_t i;
; 4362 :     PyObject *list, *ref;
; 4363 : 
; 4364 :     list = base->tp_subclasses;

  0000e	48 8b 44 24 50	 mov	 rax, QWORD PTR base$[rsp]
  00013	48 8b 80 c0 01
	00 00		 mov	 rax, QWORD PTR [rax+448]
  0001a	48 89 44 24 30	 mov	 QWORD PTR list$[rsp], rax

; 4365 :     if (list == NULL) {

  0001f	48 83 7c 24 30
	00		 cmp	 QWORD PTR list$[rsp], 0
  00025	75 05		 jne	 SHORT $LN4@remove_sub

; 4366 :         return;

  00027	e9 07 01 00 00	 jmp	 $LN5@remove_sub
$LN4@remove_sub:

; 4367 :     }
; 4368 :     assert(PyList_Check(list));

  0002c	48 8b 44 24 30	 mov	 rax, QWORD PTR list$[rsp]
  00031	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00035	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0003b	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  00040	85 c0		 test	 eax, eax
  00042	75 1c		 jne	 SHORT $LN7@remove_sub
  00044	41 b8 10 11 00
	00		 mov	 r8d, 4368		; 00001110H
  0004a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@GJLLIOPA@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAt?$AAy?$AAp?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00051	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@PHHENABL@?$AAP?$AAy?$AAL?$AAi?$AAs?$AAt?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAl?$AAi?$AAs?$AAt?$AA?$CJ?$AA?$AA@
  00058	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0005e	33 c0		 xor	 eax, eax
$LN7@remove_sub:

; 4369 :     i = PyList_GET_SIZE(list);

  00060	48 8b 44 24 30	 mov	 rax, QWORD PTR list$[rsp]
  00065	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00069	48 89 44 24 20	 mov	 QWORD PTR i$[rsp], rax
$LN3@remove_sub:

; 4370 :     while (--i >= 0) {

  0006e	48 8b 44 24 20	 mov	 rax, QWORD PTR i$[rsp]
  00073	48 ff c8	 dec	 rax
  00076	48 89 44 24 20	 mov	 QWORD PTR i$[rsp], rax
  0007b	48 83 7c 24 20
	00		 cmp	 QWORD PTR i$[rsp], 0
  00081	0f 8c ac 00 00
	00		 jl	 $LN2@remove_sub

; 4371 :         ref = PyList_GET_ITEM(list, i);

  00087	48 8b 44 24 30	 mov	 rax, QWORD PTR list$[rsp]
  0008c	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00090	48 8b 4c 24 20	 mov	 rcx, QWORD PTR i$[rsp]
  00095	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  00099	48 89 44 24 28	 mov	 QWORD PTR ref$[rsp], rax

; 4372 :         assert(PyWeakref_CheckRef(ref));

  0009e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_RefType
  000a5	48 8b 4c 24 28	 mov	 rcx, QWORD PTR ref$[rsp]
  000aa	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  000ae	74 35		 je	 SHORT $LN8@remove_sub
  000b0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_PyWeakref_RefType
  000b7	48 8b 44 24 28	 mov	 rax, QWORD PTR ref$[rsp]
  000bc	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  000c0	e8 00 00 00 00	 call	 PyType_IsSubtype
  000c5	85 c0		 test	 eax, eax
  000c7	75 1c		 jne	 SHORT $LN8@remove_sub
  000c9	41 b8 14 11 00
	00		 mov	 r8d, 4372		; 00001114H
  000cf	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@GJLLIOPA@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAt?$AAy?$AAp?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  000d6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@IHEHGJMP@?$AAP?$AAy?$AAW?$AAe?$AAa?$AAk?$AAr?$AAe?$AAf?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AAR?$AAe?$AAf?$AA?$CI?$AAr?$AAe?$AAf?$AA?$CJ?$AA?$AA@
  000dd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000e3	33 c0		 xor	 eax, eax
$LN8@remove_sub:

; 4373 :         if (PyWeakref_GET_OBJECT(ref) == (PyObject*)type) {

  000e5	48 8b 44 24 28	 mov	 rax, QWORD PTR ref$[rsp]
  000ea	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000ee	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000f3	7e 10		 jle	 SHORT $LN9@remove_sub
  000f5	48 8b 44 24 28	 mov	 rax, QWORD PTR ref$[rsp]
  000fa	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000fe	48 89 44 24 38	 mov	 QWORD PTR tv95[rsp], rax
  00103	eb 0c		 jmp	 SHORT $LN10@remove_sub
$LN9@remove_sub:
  00105	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0010c	48 89 44 24 38	 mov	 QWORD PTR tv95[rsp], rax
$LN10@remove_sub:
  00111	48 8b 44 24 58	 mov	 rax, QWORD PTR type$[rsp]
  00116	48 39 44 24 38	 cmp	 QWORD PTR tv95[rsp], rax
  0011b	75 11		 jne	 SHORT $LN1@remove_sub

; 4374 :             /* this can't fail, right? */
; 4375 :             PySequence_DelItem(list, i);

  0011d	48 8b 54 24 20	 mov	 rdx, QWORD PTR i$[rsp]
  00122	48 8b 4c 24 30	 mov	 rcx, QWORD PTR list$[rsp]
  00127	e8 00 00 00 00	 call	 PySequence_DelItem

; 4376 :             return;

  0012c	eb 05		 jmp	 SHORT $LN5@remove_sub
$LN1@remove_sub:

; 4377 :         }
; 4378 :     }

  0012e	e9 3b ff ff ff	 jmp	 $LN3@remove_sub
$LN2@remove_sub:
$LN5@remove_sub:

; 4379 : }

  00133	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00137	c3		 ret	 0
remove_subclass ENDP
_TEXT	ENDS
EXTRN	PyLong_FromLong:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$wrap_lenfunc DD imagerel wrap_lenfunc
	DD	imagerel wrap_lenfunc+99
	DD	imagerel $unwind$wrap_lenfunc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$wrap_lenfunc DD 011301H
	DD	06213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT wrap_lenfunc
_TEXT	SEGMENT
res$ = 32
func$ = 40
self$ = 64
args$ = 72
wrapped$ = 80
wrap_lenfunc PROC					; COMDAT

; 4407 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 4408 :     lenfunc func = (lenfunc)wrapped;

  00013	48 8b 44 24 50	 mov	 rax, QWORD PTR wrapped$[rsp]
  00018	48 89 44 24 28	 mov	 QWORD PTR func$[rsp], rax

; 4409 :     Py_ssize_t res;
; 4410 : 
; 4411 :     if (!check_num_args(args, 0))

  0001d	33 d2		 xor	 edx, edx
  0001f	48 8b 4c 24 48	 mov	 rcx, QWORD PTR args$[rsp]
  00024	e8 00 00 00 00	 call	 check_num_args
  00029	85 c0		 test	 eax, eax
  0002b	75 04		 jne	 SHORT $LN2@wrap_lenfu

; 4412 :         return NULL;

  0002d	33 c0		 xor	 eax, eax
  0002f	eb 2d		 jmp	 SHORT $LN3@wrap_lenfu
$LN2@wrap_lenfu:

; 4413 :     res = (*func)(self);

  00031	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  00036	ff 54 24 28	 call	 QWORD PTR func$[rsp]
  0003a	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax

; 4414 :     if (res == -1 && PyErr_Occurred())

  0003f	48 83 7c 24 20
	ff		 cmp	 QWORD PTR res$[rsp], -1
  00045	75 0e		 jne	 SHORT $LN1@wrap_lenfu
  00047	e8 00 00 00 00	 call	 PyErr_Occurred
  0004c	48 85 c0	 test	 rax, rax
  0004f	74 04		 je	 SHORT $LN1@wrap_lenfu

; 4415 :         return NULL;

  00051	33 c0		 xor	 eax, eax
  00053	eb 09		 jmp	 SHORT $LN3@wrap_lenfu
$LN1@wrap_lenfu:

; 4416 :     return PyLong_FromLong((long)res);

  00055	8b 4c 24 20	 mov	 ecx, DWORD PTR res$[rsp]
  00059	e8 00 00 00 00	 call	 PyLong_FromLong
$LN3@wrap_lenfu:

; 4417 : }

  0005e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00062	c3		 ret	 0
wrap_lenfunc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BP@CCDHHOFN@expected?5?$CFd?5arguments?0?5got?5?$CFzd?$AA@ ; `string'
PUBLIC	??_C@_0DB@DAGMFCDN@PyArg_UnpackTuple?$CI?$CJ?5argument?5lis@ ; `string'
EXTRN	PyExc_SystemError:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$check_num_args DD imagerel check_num_args
	DD	imagerel check_num_args+117
	DD	imagerel $unwind$check_num_args
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$check_num_args DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT ??_C@_0BP@CCDHHOFN@expected?5?$CFd?5arguments?0?5got?5?$CFzd?$AA@
CONST	SEGMENT
??_C@_0BP@CCDHHOFN@expected?5?$CFd?5arguments?0?5got?5?$CFzd?$AA@ DB 'exp'
	DB	'ected %d arguments, got %zd', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@DAGMFCDN@PyArg_UnpackTuple?$CI?$CJ?5argument?5lis@
CONST	SEGMENT
??_C@_0DB@DAGMFCDN@PyArg_UnpackTuple?$CI?$CJ?5argument?5lis@ DB 'PyArg_Un'
	DB	'packTuple() argument list is not a tuple', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT check_num_args
_TEXT	SEGMENT
ob$ = 48
n$ = 56
check_num_args PROC					; COMDAT

; 4383 : {

  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 4384 :     if (!PyTuple_CheckExact(ob)) {

  0000d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyTuple_Type
  00014	48 8b 4c 24 30	 mov	 rcx, QWORD PTR ob$[rsp]
  00019	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0001d	74 17		 je	 SHORT $LN2@check_num_

; 4385 :         PyErr_SetString(PyExc_SystemError,
; 4386 :             "PyArg_UnpackTuple() argument list is not a tuple");

  0001f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DB@DAGMFCDN@PyArg_UnpackTuple?$CI?$CJ?5argument?5lis@
  00026	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SystemError
  0002d	e8 00 00 00 00	 call	 PyErr_SetString

; 4387 :         return 0;

  00032	33 c0		 xor	 eax, eax
  00034	eb 3a		 jmp	 SHORT $LN3@check_num_
$LN2@check_num_:

; 4388 :     }
; 4389 :     if (n == PyTuple_GET_SIZE(ob))

  00036	48 63 44 24 38	 movsxd	 rax, DWORD PTR n$[rsp]
  0003b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR ob$[rsp]
  00040	48 3b 41 60	 cmp	 rax, QWORD PTR [rcx+96]
  00044	75 07		 jne	 SHORT $LN1@check_num_

; 4390 :         return 1;

  00046	b8 01 00 00 00	 mov	 eax, 1
  0004b	eb 23		 jmp	 SHORT $LN3@check_num_
$LN1@check_num_:

; 4391 :     PyErr_Format(
; 4392 :         PyExc_TypeError,
; 4393 :         "expected %d arguments, got %zd", n, PyTuple_GET_SIZE(ob));

  0004d	48 8b 44 24 30	 mov	 rax, QWORD PTR ob$[rsp]
  00052	4c 8b 48 60	 mov	 r9, QWORD PTR [rax+96]
  00056	44 8b 44 24 38	 mov	 r8d, DWORD PTR n$[rsp]
  0005b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BP@CCDHHOFN@expected?5?$CFd?5arguments?0?5got?5?$CFzd?$AA@
  00062	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00069	e8 00 00 00 00	 call	 PyErr_Format

; 4394 :     return 0;

  0006e	33 c0		 xor	 eax, eax
$LN3@check_num_:

; 4395 : }

  00070	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00074	c3		 ret	 0
check_num_args ENDP
_TEXT	ENDS
EXTRN	PyBool_FromLong:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$wrap_inquirypred DD imagerel wrap_inquirypred
	DD	imagerel wrap_inquirypred+97
	DD	imagerel $unwind$wrap_inquirypred
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$wrap_inquirypred DD 011301H
	DD	06213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT wrap_inquirypred
_TEXT	SEGMENT
res$ = 32
func$ = 40
self$ = 64
args$ = 72
wrapped$ = 80
wrap_inquirypred PROC					; COMDAT

; 4421 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 4422 :     inquiry func = (inquiry)wrapped;

  00013	48 8b 44 24 50	 mov	 rax, QWORD PTR wrapped$[rsp]
  00018	48 89 44 24 28	 mov	 QWORD PTR func$[rsp], rax

; 4423 :     int res;
; 4424 : 
; 4425 :     if (!check_num_args(args, 0))

  0001d	33 d2		 xor	 edx, edx
  0001f	48 8b 4c 24 48	 mov	 rcx, QWORD PTR args$[rsp]
  00024	e8 00 00 00 00	 call	 check_num_args
  00029	85 c0		 test	 eax, eax
  0002b	75 04		 jne	 SHORT $LN2@wrap_inqui

; 4426 :         return NULL;

  0002d	33 c0		 xor	 eax, eax
  0002f	eb 2b		 jmp	 SHORT $LN3@wrap_inqui
$LN2@wrap_inqui:

; 4427 :     res = (*func)(self);

  00031	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  00036	ff 54 24 28	 call	 QWORD PTR func$[rsp]
  0003a	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 4428 :     if (res == -1 && PyErr_Occurred())

  0003e	83 7c 24 20 ff	 cmp	 DWORD PTR res$[rsp], -1
  00043	75 0e		 jne	 SHORT $LN1@wrap_inqui
  00045	e8 00 00 00 00	 call	 PyErr_Occurred
  0004a	48 85 c0	 test	 rax, rax
  0004d	74 04		 je	 SHORT $LN1@wrap_inqui

; 4429 :         return NULL;

  0004f	33 c0		 xor	 eax, eax
  00051	eb 09		 jmp	 SHORT $LN3@wrap_inqui
$LN1@wrap_inqui:

; 4430 :     return PyBool_FromLong((long)res);

  00053	8b 4c 24 20	 mov	 ecx, DWORD PTR res$[rsp]
  00057	e8 00 00 00 00	 call	 PyBool_FromLong
$LN3@wrap_inqui:

; 4431 : }

  0005c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00060	c3		 ret	 0
wrap_inquirypred ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$wrap_binaryfunc DD imagerel wrap_binaryfunc
	DD	imagerel wrap_binaryfunc+85
	DD	imagerel $unwind$wrap_binaryfunc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$wrap_binaryfunc DD 011301H
	DD	06213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT wrap_binaryfunc
_TEXT	SEGMENT
other$ = 32
func$ = 40
self$ = 64
args$ = 72
wrapped$ = 80
wrap_binaryfunc PROC					; COMDAT

; 4435 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 4436 :     binaryfunc func = (binaryfunc)wrapped;

  00013	48 8b 44 24 50	 mov	 rax, QWORD PTR wrapped$[rsp]
  00018	48 89 44 24 28	 mov	 QWORD PTR func$[rsp], rax

; 4437 :     PyObject *other;
; 4438 : 
; 4439 :     if (!check_num_args(args, 1))

  0001d	ba 01 00 00 00	 mov	 edx, 1
  00022	48 8b 4c 24 48	 mov	 rcx, QWORD PTR args$[rsp]
  00027	e8 00 00 00 00	 call	 check_num_args
  0002c	85 c0		 test	 eax, eax
  0002e	75 04		 jne	 SHORT $LN1@wrap_binar

; 4440 :         return NULL;

  00030	33 c0		 xor	 eax, eax
  00032	eb 1c		 jmp	 SHORT $LN2@wrap_binar
$LN1@wrap_binar:

; 4441 :     other = PyTuple_GET_ITEM(args, 0);

  00034	48 8b 44 24 48	 mov	 rax, QWORD PTR args$[rsp]
  00039	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  0003d	48 89 44 24 20	 mov	 QWORD PTR other$[rsp], rax

; 4442 :     return (*func)(self, other);

  00042	48 8b 54 24 20	 mov	 rdx, QWORD PTR other$[rsp]
  00047	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  0004c	ff 54 24 28	 call	 QWORD PTR func$[rsp]
$LN2@wrap_binar:

; 4443 : }

  00050	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00054	c3		 ret	 0
wrap_binaryfunc ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$wrap_binaryfunc_l DD imagerel wrap_binaryfunc_l
	DD	imagerel wrap_binaryfunc_l+85
	DD	imagerel $unwind$wrap_binaryfunc_l
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$wrap_binaryfunc_l DD 011301H
	DD	06213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT wrap_binaryfunc_l
_TEXT	SEGMENT
other$ = 32
func$ = 40
self$ = 64
args$ = 72
wrapped$ = 80
wrap_binaryfunc_l PROC					; COMDAT

; 4447 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 4448 :     binaryfunc func = (binaryfunc)wrapped;

  00013	48 8b 44 24 50	 mov	 rax, QWORD PTR wrapped$[rsp]
  00018	48 89 44 24 28	 mov	 QWORD PTR func$[rsp], rax

; 4449 :     PyObject *other;
; 4450 : 
; 4451 :     if (!check_num_args(args, 1))

  0001d	ba 01 00 00 00	 mov	 edx, 1
  00022	48 8b 4c 24 48	 mov	 rcx, QWORD PTR args$[rsp]
  00027	e8 00 00 00 00	 call	 check_num_args
  0002c	85 c0		 test	 eax, eax
  0002e	75 04		 jne	 SHORT $LN1@wrap_binar@2

; 4452 :         return NULL;

  00030	33 c0		 xor	 eax, eax
  00032	eb 1c		 jmp	 SHORT $LN2@wrap_binar@2
$LN1@wrap_binar@2:

; 4453 :     other = PyTuple_GET_ITEM(args, 0);

  00034	48 8b 44 24 48	 mov	 rax, QWORD PTR args$[rsp]
  00039	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  0003d	48 89 44 24 20	 mov	 QWORD PTR other$[rsp], rax

; 4454 :     return (*func)(self, other);

  00042	48 8b 54 24 20	 mov	 rdx, QWORD PTR other$[rsp]
  00047	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  0004c	ff 54 24 28	 call	 QWORD PTR func$[rsp]
$LN2@wrap_binar@2:

; 4455 : }

  00050	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00054	c3		 ret	 0
wrap_binaryfunc_l ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$wrap_binaryfunc_r DD imagerel wrap_binaryfunc_r
	DD	imagerel wrap_binaryfunc_r+85
	DD	imagerel $unwind$wrap_binaryfunc_r
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$wrap_binaryfunc_r DD 011301H
	DD	06213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT wrap_binaryfunc_r
_TEXT	SEGMENT
other$ = 32
func$ = 40
self$ = 64
args$ = 72
wrapped$ = 80
wrap_binaryfunc_r PROC					; COMDAT

; 4459 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 4460 :     binaryfunc func = (binaryfunc)wrapped;

  00013	48 8b 44 24 50	 mov	 rax, QWORD PTR wrapped$[rsp]
  00018	48 89 44 24 28	 mov	 QWORD PTR func$[rsp], rax

; 4461 :     PyObject *other;
; 4462 : 
; 4463 :     if (!check_num_args(args, 1))

  0001d	ba 01 00 00 00	 mov	 edx, 1
  00022	48 8b 4c 24 48	 mov	 rcx, QWORD PTR args$[rsp]
  00027	e8 00 00 00 00	 call	 check_num_args
  0002c	85 c0		 test	 eax, eax
  0002e	75 04		 jne	 SHORT $LN1@wrap_binar@3

; 4464 :         return NULL;

  00030	33 c0		 xor	 eax, eax
  00032	eb 1c		 jmp	 SHORT $LN2@wrap_binar@3
$LN1@wrap_binar@3:

; 4465 :     other = PyTuple_GET_ITEM(args, 0);

  00034	48 8b 44 24 48	 mov	 rax, QWORD PTR args$[rsp]
  00039	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  0003d	48 89 44 24 20	 mov	 QWORD PTR other$[rsp], rax

; 4466 :     return (*func)(other, self);

  00042	48 8b 54 24 40	 mov	 rdx, QWORD PTR self$[rsp]
  00047	48 8b 4c 24 20	 mov	 rcx, QWORD PTR other$[rsp]
  0004c	ff 54 24 28	 call	 QWORD PTR func$[rsp]
$LN2@wrap_binar@3:

; 4467 : }

  00050	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00054	c3		 ret	 0
wrap_binaryfunc_r ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$wrap_ternaryfunc DD imagerel wrap_ternaryfunc
	DD	imagerel wrap_ternaryfunc+122
	DD	imagerel $unwind$wrap_ternaryfunc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$wrap_ternaryfunc DD 011301H
	DD	0a213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT wrap_ternaryfunc
_TEXT	SEGMENT
third$ = 48
other$ = 56
func$ = 64
self$ = 96
args$ = 104
wrapped$ = 112
wrap_ternaryfunc PROC					; COMDAT

; 4471 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 4472 :     ternaryfunc func = (ternaryfunc)wrapped;

  00013	48 8b 44 24 70	 mov	 rax, QWORD PTR wrapped$[rsp]
  00018	48 89 44 24 40	 mov	 QWORD PTR func$[rsp], rax

; 4473 :     PyObject *other;
; 4474 :     PyObject *third = Py_None;

  0001d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00024	48 89 44 24 30	 mov	 QWORD PTR third$[rsp], rax

; 4475 : 
; 4476 :     /* Note: This wrapper only works for __pow__() */
; 4477 : 
; 4478 :     if (!PyArg_UnpackTuple(args, "", 1, 2, &other, &third))

  00029	48 8d 44 24 30	 lea	 rax, QWORD PTR third$[rsp]
  0002e	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00033	48 8d 44 24 38	 lea	 rax, QWORD PTR other$[rsp]
  00038	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0003d	41 b9 02 00 00
	00		 mov	 r9d, 2
  00043	41 b8 01 00 00
	00		 mov	 r8d, 1
  00049	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  00050	48 8b 4c 24 68	 mov	 rcx, QWORD PTR args$[rsp]
  00055	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  0005a	85 c0		 test	 eax, eax
  0005c	75 04		 jne	 SHORT $LN1@wrap_terna

; 4479 :         return NULL;

  0005e	33 c0		 xor	 eax, eax
  00060	eb 13		 jmp	 SHORT $LN2@wrap_terna
$LN1@wrap_terna:

; 4480 :     return (*func)(self, other, third);

  00062	4c 8b 44 24 30	 mov	 r8, QWORD PTR third$[rsp]
  00067	48 8b 54 24 38	 mov	 rdx, QWORD PTR other$[rsp]
  0006c	48 8b 4c 24 60	 mov	 rcx, QWORD PTR self$[rsp]
  00071	ff 54 24 40	 call	 QWORD PTR func$[rsp]
$LN2@wrap_terna:

; 4481 : }

  00075	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00079	c3		 ret	 0
wrap_ternaryfunc ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$wrap_ternaryfunc_r DD imagerel wrap_ternaryfunc_r
	DD	imagerel wrap_ternaryfunc_r+122
	DD	imagerel $unwind$wrap_ternaryfunc_r
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$wrap_ternaryfunc_r DD 011301H
	DD	0a213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT wrap_ternaryfunc_r
_TEXT	SEGMENT
third$ = 48
other$ = 56
func$ = 64
self$ = 96
args$ = 104
wrapped$ = 112
wrap_ternaryfunc_r PROC					; COMDAT

; 4485 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 4486 :     ternaryfunc func = (ternaryfunc)wrapped;

  00013	48 8b 44 24 70	 mov	 rax, QWORD PTR wrapped$[rsp]
  00018	48 89 44 24 40	 mov	 QWORD PTR func$[rsp], rax

; 4487 :     PyObject *other;
; 4488 :     PyObject *third = Py_None;

  0001d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00024	48 89 44 24 30	 mov	 QWORD PTR third$[rsp], rax

; 4489 : 
; 4490 :     /* Note: This wrapper only works for __pow__() */
; 4491 : 
; 4492 :     if (!PyArg_UnpackTuple(args, "", 1, 2, &other, &third))

  00029	48 8d 44 24 30	 lea	 rax, QWORD PTR third$[rsp]
  0002e	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00033	48 8d 44 24 38	 lea	 rax, QWORD PTR other$[rsp]
  00038	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0003d	41 b9 02 00 00
	00		 mov	 r9d, 2
  00043	41 b8 01 00 00
	00		 mov	 r8d, 1
  00049	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  00050	48 8b 4c 24 68	 mov	 rcx, QWORD PTR args$[rsp]
  00055	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  0005a	85 c0		 test	 eax, eax
  0005c	75 04		 jne	 SHORT $LN1@wrap_terna@2

; 4493 :         return NULL;

  0005e	33 c0		 xor	 eax, eax
  00060	eb 13		 jmp	 SHORT $LN2@wrap_terna@2
$LN1@wrap_terna@2:

; 4494 :     return (*func)(other, self, third);

  00062	4c 8b 44 24 30	 mov	 r8, QWORD PTR third$[rsp]
  00067	48 8b 54 24 60	 mov	 rdx, QWORD PTR self$[rsp]
  0006c	48 8b 4c 24 38	 mov	 rcx, QWORD PTR other$[rsp]
  00071	ff 54 24 40	 call	 QWORD PTR func$[rsp]
$LN2@wrap_terna@2:

; 4495 : }

  00075	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00079	c3		 ret	 0
wrap_ternaryfunc_r ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$wrap_unaryfunc DD imagerel wrap_unaryfunc
	DD	imagerel wrap_unaryfunc+63
	DD	imagerel $unwind$wrap_unaryfunc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$wrap_unaryfunc DD 011301H
	DD	06213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT wrap_unaryfunc
_TEXT	SEGMENT
func$ = 32
self$ = 64
args$ = 72
wrapped$ = 80
wrap_unaryfunc PROC					; COMDAT

; 4499 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 4500 :     unaryfunc func = (unaryfunc)wrapped;

  00013	48 8b 44 24 50	 mov	 rax, QWORD PTR wrapped$[rsp]
  00018	48 89 44 24 20	 mov	 QWORD PTR func$[rsp], rax

; 4501 : 
; 4502 :     if (!check_num_args(args, 0))

  0001d	33 d2		 xor	 edx, edx
  0001f	48 8b 4c 24 48	 mov	 rcx, QWORD PTR args$[rsp]
  00024	e8 00 00 00 00	 call	 check_num_args
  00029	85 c0		 test	 eax, eax
  0002b	75 04		 jne	 SHORT $LN1@wrap_unary

; 4503 :         return NULL;

  0002d	33 c0		 xor	 eax, eax
  0002f	eb 09		 jmp	 SHORT $LN2@wrap_unary
$LN1@wrap_unary:

; 4504 :     return (*func)(self);

  00031	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  00036	ff 54 24 20	 call	 QWORD PTR func$[rsp]
$LN2@wrap_unary:

; 4505 : }

  0003a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003e	c3		 ret	 0
wrap_unaryfunc ENDP
_TEXT	ENDS
EXTRN	PyNumber_AsSsize_t:PROC
EXTRN	PyExc_OverflowError:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$wrap_indexargfunc DD imagerel wrap_indexargfunc
	DD	imagerel wrap_indexargfunc+139
	DD	imagerel $unwind$wrap_indexargfunc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$wrap_indexargfunc DD 011301H
	DD	0a213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT wrap_indexargfunc
_TEXT	SEGMENT
i$ = 48
o$ = 56
func$ = 64
self$ = 96
args$ = 104
wrapped$ = 112
wrap_indexargfunc PROC					; COMDAT

; 4509 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 4510 :     ssizeargfunc func = (ssizeargfunc)wrapped;

  00013	48 8b 44 24 70	 mov	 rax, QWORD PTR wrapped$[rsp]
  00018	48 89 44 24 40	 mov	 QWORD PTR func$[rsp], rax

; 4511 :     PyObject* o;
; 4512 :     Py_ssize_t i;
; 4513 : 
; 4514 :     if (!PyArg_UnpackTuple(args, "", 1, 1, &o))

  0001d	48 8d 44 24 38	 lea	 rax, QWORD PTR o$[rsp]
  00022	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00027	41 b9 01 00 00
	00		 mov	 r9d, 1
  0002d	41 b8 01 00 00
	00		 mov	 r8d, 1
  00033	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  0003a	48 8b 4c 24 68	 mov	 rcx, QWORD PTR args$[rsp]
  0003f	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00044	85 c0		 test	 eax, eax
  00046	75 04		 jne	 SHORT $LN2@wrap_index

; 4515 :         return NULL;

  00048	33 c0		 xor	 eax, eax
  0004a	eb 3a		 jmp	 SHORT $LN3@wrap_index
$LN2@wrap_index:

; 4516 :     i = PyNumber_AsSsize_t(o, PyExc_OverflowError);

  0004c	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR PyExc_OverflowError
  00053	48 8b 4c 24 38	 mov	 rcx, QWORD PTR o$[rsp]
  00058	e8 00 00 00 00	 call	 PyNumber_AsSsize_t
  0005d	48 89 44 24 30	 mov	 QWORD PTR i$[rsp], rax

; 4517 :     if (i == -1 && PyErr_Occurred())

  00062	48 83 7c 24 30
	ff		 cmp	 QWORD PTR i$[rsp], -1
  00068	75 0e		 jne	 SHORT $LN1@wrap_index
  0006a	e8 00 00 00 00	 call	 PyErr_Occurred
  0006f	48 85 c0	 test	 rax, rax
  00072	74 04		 je	 SHORT $LN1@wrap_index

; 4518 :         return NULL;

  00074	33 c0		 xor	 eax, eax
  00076	eb 0e		 jmp	 SHORT $LN3@wrap_index
$LN1@wrap_index:

; 4519 :     return (*func)(self, i);

  00078	48 8b 54 24 30	 mov	 rdx, QWORD PTR i$[rsp]
  0007d	48 8b 4c 24 60	 mov	 rcx, QWORD PTR self$[rsp]
  00082	ff 54 24 40	 call	 QWORD PTR func$[rsp]
$LN3@wrap_index:

; 4520 : }

  00086	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0008a	c3		 ret	 0
wrap_indexargfunc ENDP
_TEXT	ENDS
PUBLIC	??_C@_1CC@DNBCFJEA@?$AAP?$AAy?$AAE?$AAr?$AAr?$AA_?$AAO?$AAc?$AAc?$AAu?$AAr?$AAr?$AAe?$AAd?$AA?$CI?$AA?$CJ?$AA?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$wrap_sq_item DD imagerel wrap_sq_item
	DD	imagerel wrap_sq_item+173
	DD	imagerel $unwind$wrap_sq_item
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$wrap_sq_item DD 011301H
	DD	08213H
xdata	ENDS
;	COMDAT ??_C@_1CC@DNBCFJEA@?$AAP?$AAy?$AAE?$AAr?$AAr?$AA_?$AAO?$AAc?$AAc?$AAu?$AAr?$AAr?$AAe?$AAd?$AA?$CI?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CC@DNBCFJEA@?$AAP?$AAy?$AAE?$AAr?$AAr?$AA_?$AAO?$AAc?$AAc?$AAu?$AAr?$AAr?$AAe?$AAd?$AA?$CI?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'E', 00H, 'r', 00H, 'r', 00H, '_', 00H, 'O', 00H
	DB	'c', 00H, 'c', 00H, 'u', 00H, 'r', 00H, 'r', 00H, 'e', 00H, 'd'
	DB	00H, '(', 00H, ')', 00H, 00H, 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT wrap_sq_item
_TEXT	SEGMENT
i$ = 32
arg$ = 40
func$ = 48
self$ = 80
args$ = 88
wrapped$ = 96
wrap_sq_item PROC					; COMDAT

; 4544 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 4545 :     ssizeargfunc func = (ssizeargfunc)wrapped;

  00013	48 8b 44 24 60	 mov	 rax, QWORD PTR wrapped$[rsp]
  00018	48 89 44 24 30	 mov	 QWORD PTR func$[rsp], rax

; 4546 :     PyObject *arg;
; 4547 :     Py_ssize_t i;
; 4548 : 
; 4549 :     if (PyTuple_GET_SIZE(args) == 1) {

  0001d	48 8b 44 24 58	 mov	 rax, QWORD PTR args$[rsp]
  00022	48 83 78 60 01	 cmp	 QWORD PTR [rax+96], 1
  00027	75 48		 jne	 SHORT $LN2@wrap_sq_it

; 4550 :         arg = PyTuple_GET_ITEM(args, 0);

  00029	48 8b 44 24 58	 mov	 rax, QWORD PTR args$[rsp]
  0002e	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00032	48 89 44 24 28	 mov	 QWORD PTR arg$[rsp], rax

; 4551 :         i = getindex(self, arg);

  00037	48 8b 54 24 28	 mov	 rdx, QWORD PTR arg$[rsp]
  0003c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  00041	e8 00 00 00 00	 call	 getindex
  00046	48 89 44 24 20	 mov	 QWORD PTR i$[rsp], rax

; 4552 :         if (i == -1 && PyErr_Occurred())

  0004b	48 83 7c 24 20
	ff		 cmp	 QWORD PTR i$[rsp], -1
  00051	75 0e		 jne	 SHORT $LN1@wrap_sq_it
  00053	e8 00 00 00 00	 call	 PyErr_Occurred
  00058	48 85 c0	 test	 rax, rax
  0005b	74 04		 je	 SHORT $LN1@wrap_sq_it

; 4553 :             return NULL;

  0005d	33 c0		 xor	 eax, eax
  0005f	eb 47		 jmp	 SHORT $LN3@wrap_sq_it
$LN1@wrap_sq_it:

; 4554 :         return (*func)(self, i);

  00061	48 8b 54 24 20	 mov	 rdx, QWORD PTR i$[rsp]
  00066	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  0006b	ff 54 24 30	 call	 QWORD PTR func$[rsp]
  0006f	eb 37		 jmp	 SHORT $LN3@wrap_sq_it
$LN2@wrap_sq_it:

; 4555 :     }
; 4556 :     check_num_args(args, 1);

  00071	ba 01 00 00 00	 mov	 edx, 1
  00076	48 8b 4c 24 58	 mov	 rcx, QWORD PTR args$[rsp]
  0007b	e8 00 00 00 00	 call	 check_num_args

; 4557 :     assert(PyErr_Occurred());

  00080	e8 00 00 00 00	 call	 PyErr_Occurred
  00085	48 85 c0	 test	 rax, rax
  00088	75 1c		 jne	 SHORT $LN5@wrap_sq_it
  0008a	41 b8 cd 11 00
	00		 mov	 r8d, 4557		; 000011cdH
  00090	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@GJLLIOPA@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAt?$AAy?$AAp?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00097	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CC@DNBCFJEA@?$AAP?$AAy?$AAE?$AAr?$AAr?$AA_?$AAO?$AAc?$AAc?$AAu?$AAr?$AAr?$AAe?$AAd?$AA?$CI?$AA?$CJ?$AA?$AA@
  0009e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000a4	33 c0		 xor	 eax, eax
$LN5@wrap_sq_it:

; 4558 :     return NULL;

  000a6	33 c0		 xor	 eax, eax
$LN3@wrap_sq_it:

; 4559 : }

  000a8	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000ac	c3		 ret	 0
wrap_sq_item ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$getindex DD imagerel getindex
	DD	imagerel getindex+176
	DD	imagerel $unwind$getindex
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$getindex DD 010e01H
	DD	0820eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT getindex
_TEXT	SEGMENT
i$ = 32
sq$24282 = 40
n$24285 = 48
self$ = 80
arg$ = 88
getindex PROC						; COMDAT

; 4524 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 4525 :     Py_ssize_t i;
; 4526 : 
; 4527 :     i = PyNumber_AsSsize_t(arg, PyExc_OverflowError);

  0000e	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR PyExc_OverflowError
  00015	48 8b 4c 24 58	 mov	 rcx, QWORD PTR arg$[rsp]
  0001a	e8 00 00 00 00	 call	 PyNumber_AsSsize_t
  0001f	48 89 44 24 20	 mov	 QWORD PTR i$[rsp], rax

; 4528 :     if (i == -1 && PyErr_Occurred())

  00024	48 83 7c 24 20
	ff		 cmp	 QWORD PTR i$[rsp], -1
  0002a	75 13		 jne	 SHORT $LN4@getindex
  0002c	e8 00 00 00 00	 call	 PyErr_Occurred
  00031	48 85 c0	 test	 rax, rax
  00034	74 09		 je	 SHORT $LN4@getindex

; 4529 :         return -1;

  00036	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1
  0003d	eb 6c		 jmp	 SHORT $LN5@getindex
$LN4@getindex:

; 4530 :     if (i < 0) {

  0003f	48 83 7c 24 20
	00		 cmp	 QWORD PTR i$[rsp], 0
  00045	7d 5f		 jge	 SHORT $LN3@getindex

; 4531 :         PySequenceMethods *sq = Py_TYPE(self)->tp_as_sequence;

  00047	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  0004c	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00050	48 8b 80 c0 00
	00 00		 mov	 rax, QWORD PTR [rax+192]
  00057	48 89 44 24 28	 mov	 QWORD PTR sq$24282[rsp], rax

; 4532 :         if (sq && sq->sq_length) {

  0005c	48 83 7c 24 28
	00		 cmp	 QWORD PTR sq$24282[rsp], 0
  00062	74 42		 je	 SHORT $LN2@getindex
  00064	48 8b 44 24 28	 mov	 rax, QWORD PTR sq$24282[rsp]
  00069	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0006d	74 37		 je	 SHORT $LN2@getindex

; 4533 :             Py_ssize_t n = (*sq->sq_length)(self);

  0006f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  00074	48 8b 44 24 28	 mov	 rax, QWORD PTR sq$24282[rsp]
  00079	ff 10		 call	 QWORD PTR [rax]
  0007b	48 89 44 24 30	 mov	 QWORD PTR n$24285[rsp], rax

; 4534 :             if (n < 0)

  00080	48 83 7c 24 30
	00		 cmp	 QWORD PTR n$24285[rsp], 0
  00086	7d 09		 jge	 SHORT $LN1@getindex

; 4535 :                 return -1;

  00088	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1
  0008f	eb 1a		 jmp	 SHORT $LN5@getindex
$LN1@getindex:

; 4536 :             i += n;

  00091	48 8b 44 24 30	 mov	 rax, QWORD PTR n$24285[rsp]
  00096	48 8b 4c 24 20	 mov	 rcx, QWORD PTR i$[rsp]
  0009b	48 03 c8	 add	 rcx, rax
  0009e	48 8b c1	 mov	 rax, rcx
  000a1	48 89 44 24 20	 mov	 QWORD PTR i$[rsp], rax
$LN2@getindex:
$LN3@getindex:

; 4537 :         }
; 4538 :     }
; 4539 :     return i;

  000a6	48 8b 44 24 20	 mov	 rax, QWORD PTR i$[rsp]
$LN5@getindex:

; 4540 : }

  000ab	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000af	c3		 ret	 0
getindex ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$wrap_sq_setitem DD imagerel wrap_sq_setitem
	DD	imagerel wrap_sq_setitem+199
	DD	imagerel $unwind$wrap_sq_setitem
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$wrap_sq_setitem DD 011301H
	DD	0c213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT wrap_sq_setitem
_TEXT	SEGMENT
value$ = 48
res$ = 56
arg$ = 64
i$ = 72
func$ = 80
self$ = 112
args$ = 120
wrapped$ = 128
wrap_sq_setitem PROC					; COMDAT

; 4563 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 4564 :     ssizeobjargproc func = (ssizeobjargproc)wrapped;

  00013	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR wrapped$[rsp]
  0001b	48 89 44 24 50	 mov	 QWORD PTR func$[rsp], rax

; 4565 :     Py_ssize_t i;
; 4566 :     int res;
; 4567 :     PyObject *arg, *value;
; 4568 : 
; 4569 :     if (!PyArg_UnpackTuple(args, "", 2, 2, &arg, &value))

  00020	48 8d 44 24 30	 lea	 rax, QWORD PTR value$[rsp]
  00025	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0002a	48 8d 44 24 40	 lea	 rax, QWORD PTR arg$[rsp]
  0002f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00034	41 b9 02 00 00
	00		 mov	 r9d, 2
  0003a	41 b8 02 00 00
	00		 mov	 r8d, 2
  00040	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  00047	48 8b 4c 24 78	 mov	 rcx, QWORD PTR args$[rsp]
  0004c	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00051	85 c0		 test	 eax, eax
  00053	75 04		 jne	 SHORT $LN3@wrap_sq_se

; 4570 :         return NULL;

  00055	33 c0		 xor	 eax, eax
  00057	eb 69		 jmp	 SHORT $LN4@wrap_sq_se
$LN3@wrap_sq_se:

; 4571 :     i = getindex(self, arg);

  00059	48 8b 54 24 40	 mov	 rdx, QWORD PTR arg$[rsp]
  0005e	48 8b 4c 24 70	 mov	 rcx, QWORD PTR self$[rsp]
  00063	e8 00 00 00 00	 call	 getindex
  00068	48 89 44 24 48	 mov	 QWORD PTR i$[rsp], rax

; 4572 :     if (i == -1 && PyErr_Occurred())

  0006d	48 83 7c 24 48
	ff		 cmp	 QWORD PTR i$[rsp], -1
  00073	75 0e		 jne	 SHORT $LN2@wrap_sq_se
  00075	e8 00 00 00 00	 call	 PyErr_Occurred
  0007a	48 85 c0	 test	 rax, rax
  0007d	74 04		 je	 SHORT $LN2@wrap_sq_se

; 4573 :         return NULL;

  0007f	33 c0		 xor	 eax, eax
  00081	eb 3f		 jmp	 SHORT $LN4@wrap_sq_se
$LN2@wrap_sq_se:

; 4574 :     res = (*func)(self, i, value);

  00083	4c 8b 44 24 30	 mov	 r8, QWORD PTR value$[rsp]
  00088	48 8b 54 24 48	 mov	 rdx, QWORD PTR i$[rsp]
  0008d	48 8b 4c 24 70	 mov	 rcx, QWORD PTR self$[rsp]
  00092	ff 54 24 50	 call	 QWORD PTR func$[rsp]
  00096	89 44 24 38	 mov	 DWORD PTR res$[rsp], eax

; 4575 :     if (res == -1 && PyErr_Occurred())

  0009a	83 7c 24 38 ff	 cmp	 DWORD PTR res$[rsp], -1
  0009f	75 0e		 jne	 SHORT $LN1@wrap_sq_se
  000a1	e8 00 00 00 00	 call	 PyErr_Occurred
  000a6	48 85 c0	 test	 rax, rax
  000a9	74 04		 je	 SHORT $LN1@wrap_sq_se

; 4576 :         return NULL;

  000ab	33 c0		 xor	 eax, eax
  000ad	eb 13		 jmp	 SHORT $LN4@wrap_sq_se
$LN1@wrap_sq_se:

; 4577 :     Py_INCREF(Py_None);

  000af	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  000b6	e8 00 00 00 00	 call	 _Py_IncRef

; 4578 :     return Py_None;

  000bb	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
$LN4@wrap_sq_se:

; 4579 : }

  000c2	48 83 c4 68	 add	 rsp, 104		; 00000068H
  000c6	c3		 ret	 0
wrap_sq_setitem ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$wrap_sq_delitem DD imagerel wrap_sq_delitem
	DD	imagerel wrap_sq_delitem+174
	DD	imagerel $unwind$wrap_sq_delitem
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$wrap_sq_delitem DD 011301H
	DD	08213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT wrap_sq_delitem
_TEXT	SEGMENT
res$ = 32
arg$ = 40
i$ = 48
func$ = 56
self$ = 80
args$ = 88
wrapped$ = 96
wrap_sq_delitem PROC					; COMDAT

; 4583 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 4584 :     ssizeobjargproc func = (ssizeobjargproc)wrapped;

  00013	48 8b 44 24 60	 mov	 rax, QWORD PTR wrapped$[rsp]
  00018	48 89 44 24 38	 mov	 QWORD PTR func$[rsp], rax

; 4585 :     Py_ssize_t i;
; 4586 :     int res;
; 4587 :     PyObject *arg;
; 4588 : 
; 4589 :     if (!check_num_args(args, 1))

  0001d	ba 01 00 00 00	 mov	 edx, 1
  00022	48 8b 4c 24 58	 mov	 rcx, QWORD PTR args$[rsp]
  00027	e8 00 00 00 00	 call	 check_num_args
  0002c	85 c0		 test	 eax, eax
  0002e	75 04		 jne	 SHORT $LN3@wrap_sq_de

; 4590 :         return NULL;

  00030	33 c0		 xor	 eax, eax
  00032	eb 75		 jmp	 SHORT $LN4@wrap_sq_de
$LN3@wrap_sq_de:

; 4591 :     arg = PyTuple_GET_ITEM(args, 0);

  00034	48 8b 44 24 58	 mov	 rax, QWORD PTR args$[rsp]
  00039	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  0003d	48 89 44 24 28	 mov	 QWORD PTR arg$[rsp], rax

; 4592 :     i = getindex(self, arg);

  00042	48 8b 54 24 28	 mov	 rdx, QWORD PTR arg$[rsp]
  00047	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  0004c	e8 00 00 00 00	 call	 getindex
  00051	48 89 44 24 30	 mov	 QWORD PTR i$[rsp], rax

; 4593 :     if (i == -1 && PyErr_Occurred())

  00056	48 83 7c 24 30
	ff		 cmp	 QWORD PTR i$[rsp], -1
  0005c	75 0e		 jne	 SHORT $LN2@wrap_sq_de
  0005e	e8 00 00 00 00	 call	 PyErr_Occurred
  00063	48 85 c0	 test	 rax, rax
  00066	74 04		 je	 SHORT $LN2@wrap_sq_de

; 4594 :         return NULL;

  00068	33 c0		 xor	 eax, eax
  0006a	eb 3d		 jmp	 SHORT $LN4@wrap_sq_de
$LN2@wrap_sq_de:

; 4595 :     res = (*func)(self, i, NULL);

  0006c	45 33 c0	 xor	 r8d, r8d
  0006f	48 8b 54 24 30	 mov	 rdx, QWORD PTR i$[rsp]
  00074	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  00079	ff 54 24 38	 call	 QWORD PTR func$[rsp]
  0007d	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 4596 :     if (res == -1 && PyErr_Occurred())

  00081	83 7c 24 20 ff	 cmp	 DWORD PTR res$[rsp], -1
  00086	75 0e		 jne	 SHORT $LN1@wrap_sq_de
  00088	e8 00 00 00 00	 call	 PyErr_Occurred
  0008d	48 85 c0	 test	 rax, rax
  00090	74 04		 je	 SHORT $LN1@wrap_sq_de

; 4597 :         return NULL;

  00092	33 c0		 xor	 eax, eax
  00094	eb 13		 jmp	 SHORT $LN4@wrap_sq_de
$LN1@wrap_sq_de:

; 4598 :     Py_INCREF(Py_None);

  00096	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  0009d	e8 00 00 00 00	 call	 _Py_IncRef

; 4599 :     return Py_None;

  000a2	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
$LN4@wrap_sq_de:

; 4600 : }

  000a9	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000ad	c3		 ret	 0
wrap_sq_delitem ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$wrap_objobjproc DD imagerel wrap_objobjproc
	DD	imagerel wrap_objobjproc+121
	DD	imagerel $unwind$wrap_objobjproc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$wrap_objobjproc DD 011301H
	DD	08213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT wrap_objobjproc
_TEXT	SEGMENT
value$ = 32
res$ = 40
func$ = 48
self$ = 80
args$ = 88
wrapped$ = 96
wrap_objobjproc PROC					; COMDAT

; 4605 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 4606 :     objobjproc func = (objobjproc)wrapped;

  00013	48 8b 44 24 60	 mov	 rax, QWORD PTR wrapped$[rsp]
  00018	48 89 44 24 30	 mov	 QWORD PTR func$[rsp], rax

; 4607 :     int res;
; 4608 :     PyObject *value;
; 4609 : 
; 4610 :     if (!check_num_args(args, 1))

  0001d	ba 01 00 00 00	 mov	 edx, 1
  00022	48 8b 4c 24 58	 mov	 rcx, QWORD PTR args$[rsp]
  00027	e8 00 00 00 00	 call	 check_num_args
  0002c	85 c0		 test	 eax, eax
  0002e	75 04		 jne	 SHORT $LN3@wrap_objob

; 4611 :         return NULL;

  00030	33 c0		 xor	 eax, eax
  00032	eb 40		 jmp	 SHORT $LN4@wrap_objob
$LN3@wrap_objob:

; 4612 :     value = PyTuple_GET_ITEM(args, 0);

  00034	48 8b 44 24 58	 mov	 rax, QWORD PTR args$[rsp]
  00039	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  0003d	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 4613 :     res = (*func)(self, value);

  00042	48 8b 54 24 20	 mov	 rdx, QWORD PTR value$[rsp]
  00047	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  0004c	ff 54 24 30	 call	 QWORD PTR func$[rsp]
  00050	89 44 24 28	 mov	 DWORD PTR res$[rsp], eax

; 4614 :     if (res == -1 && PyErr_Occurred())

  00054	83 7c 24 28 ff	 cmp	 DWORD PTR res$[rsp], -1
  00059	75 10		 jne	 SHORT $LN2@wrap_objob
  0005b	e8 00 00 00 00	 call	 PyErr_Occurred
  00060	48 85 c0	 test	 rax, rax
  00063	74 06		 je	 SHORT $LN2@wrap_objob

; 4615 :         return NULL;

  00065	33 c0		 xor	 eax, eax
  00067	eb 0b		 jmp	 SHORT $LN4@wrap_objob

; 4616 :     else

  00069	eb 09		 jmp	 SHORT $LN1@wrap_objob
$LN2@wrap_objob:

; 4617 :         return PyBool_FromLong(res);

  0006b	8b 4c 24 28	 mov	 ecx, DWORD PTR res$[rsp]
  0006f	e8 00 00 00 00	 call	 PyBool_FromLong
$LN1@wrap_objob:
$LN4@wrap_objob:

; 4618 : }

  00074	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00078	c3		 ret	 0
wrap_objobjproc ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$wrap_objobjargproc DD imagerel wrap_objobjargproc
	DD	imagerel wrap_objobjargproc+154
	DD	imagerel $unwind$wrap_objobjargproc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$wrap_objobjargproc DD 011301H
	DD	0a213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT wrap_objobjargproc
_TEXT	SEGMENT
value$ = 48
res$ = 56
key$ = 64
func$ = 72
self$ = 96
args$ = 104
wrapped$ = 112
wrap_objobjargproc PROC					; COMDAT

; 4622 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 4623 :     objobjargproc func = (objobjargproc)wrapped;

  00013	48 8b 44 24 70	 mov	 rax, QWORD PTR wrapped$[rsp]
  00018	48 89 44 24 48	 mov	 QWORD PTR func$[rsp], rax

; 4624 :     int res;
; 4625 :     PyObject *key, *value;
; 4626 : 
; 4627 :     if (!PyArg_UnpackTuple(args, "", 2, 2, &key, &value))

  0001d	48 8d 44 24 30	 lea	 rax, QWORD PTR value$[rsp]
  00022	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00027	48 8d 44 24 40	 lea	 rax, QWORD PTR key$[rsp]
  0002c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00031	41 b9 02 00 00
	00		 mov	 r9d, 2
  00037	41 b8 02 00 00
	00		 mov	 r8d, 2
  0003d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  00044	48 8b 4c 24 68	 mov	 rcx, QWORD PTR args$[rsp]
  00049	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  0004e	85 c0		 test	 eax, eax
  00050	75 04		 jne	 SHORT $LN2@wrap_objob@2

; 4628 :         return NULL;

  00052	33 c0		 xor	 eax, eax
  00054	eb 3f		 jmp	 SHORT $LN3@wrap_objob@2
$LN2@wrap_objob@2:

; 4629 :     res = (*func)(self, key, value);

  00056	4c 8b 44 24 30	 mov	 r8, QWORD PTR value$[rsp]
  0005b	48 8b 54 24 40	 mov	 rdx, QWORD PTR key$[rsp]
  00060	48 8b 4c 24 60	 mov	 rcx, QWORD PTR self$[rsp]
  00065	ff 54 24 48	 call	 QWORD PTR func$[rsp]
  00069	89 44 24 38	 mov	 DWORD PTR res$[rsp], eax

; 4630 :     if (res == -1 && PyErr_Occurred())

  0006d	83 7c 24 38 ff	 cmp	 DWORD PTR res$[rsp], -1
  00072	75 0e		 jne	 SHORT $LN1@wrap_objob@2
  00074	e8 00 00 00 00	 call	 PyErr_Occurred
  00079	48 85 c0	 test	 rax, rax
  0007c	74 04		 je	 SHORT $LN1@wrap_objob@2

; 4631 :         return NULL;

  0007e	33 c0		 xor	 eax, eax
  00080	eb 13		 jmp	 SHORT $LN3@wrap_objob@2
$LN1@wrap_objob@2:

; 4632 :     Py_INCREF(Py_None);

  00082	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00089	e8 00 00 00 00	 call	 _Py_IncRef

; 4633 :     return Py_None;

  0008e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
$LN3@wrap_objob@2:

; 4634 : }

  00095	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00099	c3		 ret	 0
wrap_objobjargproc ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$wrap_delitem DD imagerel wrap_delitem
	DD	imagerel wrap_delitem+132
	DD	imagerel $unwind$wrap_delitem
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$wrap_delitem DD 011301H
	DD	08213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT wrap_delitem
_TEXT	SEGMENT
res$ = 32
key$ = 40
func$ = 48
self$ = 80
args$ = 88
wrapped$ = 96
wrap_delitem PROC					; COMDAT

; 4638 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 4639 :     objobjargproc func = (objobjargproc)wrapped;

  00013	48 8b 44 24 60	 mov	 rax, QWORD PTR wrapped$[rsp]
  00018	48 89 44 24 30	 mov	 QWORD PTR func$[rsp], rax

; 4640 :     int res;
; 4641 :     PyObject *key;
; 4642 : 
; 4643 :     if (!check_num_args(args, 1))

  0001d	ba 01 00 00 00	 mov	 edx, 1
  00022	48 8b 4c 24 58	 mov	 rcx, QWORD PTR args$[rsp]
  00027	e8 00 00 00 00	 call	 check_num_args
  0002c	85 c0		 test	 eax, eax
  0002e	75 04		 jne	 SHORT $LN2@wrap_delit

; 4644 :         return NULL;

  00030	33 c0		 xor	 eax, eax
  00032	eb 4b		 jmp	 SHORT $LN3@wrap_delit
$LN2@wrap_delit:

; 4645 :     key = PyTuple_GET_ITEM(args, 0);

  00034	48 8b 44 24 58	 mov	 rax, QWORD PTR args$[rsp]
  00039	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  0003d	48 89 44 24 28	 mov	 QWORD PTR key$[rsp], rax

; 4646 :     res = (*func)(self, key, NULL);

  00042	45 33 c0	 xor	 r8d, r8d
  00045	48 8b 54 24 28	 mov	 rdx, QWORD PTR key$[rsp]
  0004a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  0004f	ff 54 24 30	 call	 QWORD PTR func$[rsp]
  00053	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 4647 :     if (res == -1 && PyErr_Occurred())

  00057	83 7c 24 20 ff	 cmp	 DWORD PTR res$[rsp], -1
  0005c	75 0e		 jne	 SHORT $LN1@wrap_delit
  0005e	e8 00 00 00 00	 call	 PyErr_Occurred
  00063	48 85 c0	 test	 rax, rax
  00066	74 04		 je	 SHORT $LN1@wrap_delit

; 4648 :         return NULL;

  00068	33 c0		 xor	 eax, eax
  0006a	eb 13		 jmp	 SHORT $LN3@wrap_delit
$LN1@wrap_delit:

; 4649 :     Py_INCREF(Py_None);

  0006c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00073	e8 00 00 00 00	 call	 _Py_IncRef

; 4650 :     return Py_None;

  00078	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
$LN3@wrap_delit:

; 4651 : }

  0007f	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00083	c3		 ret	 0
wrap_delitem ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$wrap_setattr DD imagerel wrap_setattr
	DD	imagerel wrap_setattr+174
	DD	imagerel $unwind$wrap_setattr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$wrap_setattr DD 011301H
	DD	0a213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT wrap_setattr
_TEXT	SEGMENT
value$ = 48
res$ = 56
name$ = 64
func$ = 72
self$ = 96
args$ = 104
wrapped$ = 112
wrap_setattr PROC					; COMDAT

; 4675 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 4676 :     setattrofunc func = (setattrofunc)wrapped;

  00013	48 8b 44 24 70	 mov	 rax, QWORD PTR wrapped$[rsp]
  00018	48 89 44 24 48	 mov	 QWORD PTR func$[rsp], rax

; 4677 :     int res;
; 4678 :     PyObject *name, *value;
; 4679 : 
; 4680 :     if (!PyArg_UnpackTuple(args, "", 2, 2, &name, &value))

  0001d	48 8d 44 24 30	 lea	 rax, QWORD PTR value$[rsp]
  00022	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00027	48 8d 44 24 40	 lea	 rax, QWORD PTR name$[rsp]
  0002c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00031	41 b9 02 00 00
	00		 mov	 r9d, 2
  00037	41 b8 02 00 00
	00		 mov	 r8d, 2
  0003d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  00044	48 8b 4c 24 68	 mov	 rcx, QWORD PTR args$[rsp]
  00049	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  0004e	85 c0		 test	 eax, eax
  00050	75 04		 jne	 SHORT $LN3@wrap_setat

; 4681 :         return NULL;

  00052	33 c0		 xor	 eax, eax
  00054	eb 53		 jmp	 SHORT $LN4@wrap_setat
$LN3@wrap_setat:

; 4682 :     if (!hackcheck(self, func, "__setattr__"))

  00056	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0M@CIMGLOJN@__setattr__?$AA@
  0005d	48 8b 54 24 48	 mov	 rdx, QWORD PTR func$[rsp]
  00062	48 8b 4c 24 60	 mov	 rcx, QWORD PTR self$[rsp]
  00067	e8 00 00 00 00	 call	 hackcheck
  0006c	85 c0		 test	 eax, eax
  0006e	75 04		 jne	 SHORT $LN2@wrap_setat

; 4683 :         return NULL;

  00070	33 c0		 xor	 eax, eax
  00072	eb 35		 jmp	 SHORT $LN4@wrap_setat
$LN2@wrap_setat:

; 4684 :     res = (*func)(self, name, value);

  00074	4c 8b 44 24 30	 mov	 r8, QWORD PTR value$[rsp]
  00079	48 8b 54 24 40	 mov	 rdx, QWORD PTR name$[rsp]
  0007e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR self$[rsp]
  00083	ff 54 24 48	 call	 QWORD PTR func$[rsp]
  00087	89 44 24 38	 mov	 DWORD PTR res$[rsp], eax

; 4685 :     if (res < 0)

  0008b	83 7c 24 38 00	 cmp	 DWORD PTR res$[rsp], 0
  00090	7d 04		 jge	 SHORT $LN1@wrap_setat

; 4686 :         return NULL;

  00092	33 c0		 xor	 eax, eax
  00094	eb 13		 jmp	 SHORT $LN4@wrap_setat
$LN1@wrap_setat:

; 4687 :     Py_INCREF(Py_None);

  00096	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  0009d	e8 00 00 00 00	 call	 _Py_IncRef

; 4688 :     return Py_None;

  000a2	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
$LN4@wrap_setat:

; 4689 : }

  000a9	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000ad	c3		 ret	 0
wrap_setattr ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CB@HJHEGLIK@can?8t?5apply?5this?5?$CFs?5to?5?$CFs?5object@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$hackcheck DD imagerel hackcheck
	DD	imagerel hackcheck+154
	DD	imagerel $unwind$hackcheck
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$hackcheck DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT ??_C@_0CB@HJHEGLIK@can?8t?5apply?5this?5?$CFs?5to?5?$CFs?5object@
CONST	SEGMENT
??_C@_0CB@HJHEGLIK@can?8t?5apply?5this?5?$CFs?5to?5?$CFs?5object@ DB 'can'
	DB	'''t apply this %s to %s object', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT hackcheck
_TEXT	SEGMENT
type$ = 32
self$ = 64
func$ = 72
what$ = 80
hackcheck PROC						; COMDAT

; 4657 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 4658 :     PyTypeObject *type = Py_TYPE(self);

  00013	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00018	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0001c	48 89 44 24 20	 mov	 QWORD PTR type$[rsp], rax
$LN3@hackcheck:

; 4659 :     while (type && type->tp_flags & Py_TPFLAGS_HEAPTYPE)

  00021	48 83 7c 24 20
	00		 cmp	 QWORD PTR type$[rsp], 0
  00027	74 27		 je	 SHORT $LN2@hackcheck
  00029	48 8b 44 24 20	 mov	 rax, QWORD PTR type$[rsp]
  0002e	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00034	25 00 02 00 00	 and	 eax, 512		; 00000200H
  00039	85 c0		 test	 eax, eax
  0003b	74 13		 je	 SHORT $LN2@hackcheck

; 4660 :         type = type->tp_base;

  0003d	48 8b 44 24 20	 mov	 rax, QWORD PTR type$[rsp]
  00042	48 8b 80 58 01
	00 00		 mov	 rax, QWORD PTR [rax+344]
  00049	48 89 44 24 20	 mov	 QWORD PTR type$[rsp], rax
  0004e	eb d1		 jmp	 SHORT $LN3@hackcheck
$LN2@hackcheck:

; 4661 :     /* If type is NULL now, this is a really weird type.
; 4662 :        In the spirit of backwards compatibility (?), just shut up. */
; 4663 :     if (type && type->tp_setattro != func) {

  00050	48 83 7c 24 20
	00		 cmp	 QWORD PTR type$[rsp], 0
  00056	74 38		 je	 SHORT $LN1@hackcheck
  00058	48 8b 44 24 20	 mov	 rax, QWORD PTR type$[rsp]
  0005d	48 8b 4c 24 48	 mov	 rcx, QWORD PTR func$[rsp]
  00062	48 39 88 f0 00
	00 00		 cmp	 QWORD PTR [rax+240], rcx
  00069	74 25		 je	 SHORT $LN1@hackcheck

; 4664 :         PyErr_Format(PyExc_TypeError,
; 4665 :                      "can't apply this %s to %s object",
; 4666 :                      what,
; 4667 :                      type->tp_name);

  0006b	48 8b 44 24 20	 mov	 rax, QWORD PTR type$[rsp]
  00070	4c 8b 48 70	 mov	 r9, QWORD PTR [rax+112]
  00074	4c 8b 44 24 50	 mov	 r8, QWORD PTR what$[rsp]
  00079	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CB@HJHEGLIK@can?8t?5apply?5this?5?$CFs?5to?5?$CFs?5object@
  00080	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00087	e8 00 00 00 00	 call	 PyErr_Format

; 4668 :         return 0;

  0008c	33 c0		 xor	 eax, eax
  0008e	eb 05		 jmp	 SHORT $LN4@hackcheck
$LN1@hackcheck:

; 4669 :     }
; 4670 :     return 1;

  00090	b8 01 00 00 00	 mov	 eax, 1
$LN4@hackcheck:

; 4671 : }

  00095	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00099	c3		 ret	 0
hackcheck ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$wrap_delattr DD imagerel wrap_delattr
	DD	imagerel wrap_delattr+152
	DD	imagerel $unwind$wrap_delattr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$wrap_delattr DD 011301H
	DD	08213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT wrap_delattr
_TEXT	SEGMENT
res$ = 32
name$ = 40
func$ = 48
self$ = 80
args$ = 88
wrapped$ = 96
wrap_delattr PROC					; COMDAT

; 4693 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 4694 :     setattrofunc func = (setattrofunc)wrapped;

  00013	48 8b 44 24 60	 mov	 rax, QWORD PTR wrapped$[rsp]
  00018	48 89 44 24 30	 mov	 QWORD PTR func$[rsp], rax

; 4695 :     int res;
; 4696 :     PyObject *name;
; 4697 : 
; 4698 :     if (!check_num_args(args, 1))

  0001d	ba 01 00 00 00	 mov	 edx, 1
  00022	48 8b 4c 24 58	 mov	 rcx, QWORD PTR args$[rsp]
  00027	e8 00 00 00 00	 call	 check_num_args
  0002c	85 c0		 test	 eax, eax
  0002e	75 04		 jne	 SHORT $LN3@wrap_delat

; 4699 :         return NULL;

  00030	33 c0		 xor	 eax, eax
  00032	eb 5f		 jmp	 SHORT $LN4@wrap_delat
$LN3@wrap_delat:

; 4700 :     name = PyTuple_GET_ITEM(args, 0);

  00034	48 8b 44 24 58	 mov	 rax, QWORD PTR args$[rsp]
  00039	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  0003d	48 89 44 24 28	 mov	 QWORD PTR name$[rsp], rax

; 4701 :     if (!hackcheck(self, func, "__delattr__"))

  00042	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0M@ECOKAOJC@__delattr__?$AA@
  00049	48 8b 54 24 30	 mov	 rdx, QWORD PTR func$[rsp]
  0004e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  00053	e8 00 00 00 00	 call	 hackcheck
  00058	85 c0		 test	 eax, eax
  0005a	75 04		 jne	 SHORT $LN2@wrap_delat

; 4702 :         return NULL;

  0005c	33 c0		 xor	 eax, eax
  0005e	eb 33		 jmp	 SHORT $LN4@wrap_delat
$LN2@wrap_delat:

; 4703 :     res = (*func)(self, name, NULL);

  00060	45 33 c0	 xor	 r8d, r8d
  00063	48 8b 54 24 28	 mov	 rdx, QWORD PTR name$[rsp]
  00068	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  0006d	ff 54 24 30	 call	 QWORD PTR func$[rsp]
  00071	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 4704 :     if (res < 0)

  00075	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  0007a	7d 04		 jge	 SHORT $LN1@wrap_delat

; 4705 :         return NULL;

  0007c	33 c0		 xor	 eax, eax
  0007e	eb 13		 jmp	 SHORT $LN4@wrap_delat
$LN1@wrap_delat:

; 4706 :     Py_INCREF(Py_None);

  00080	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00087	e8 00 00 00 00	 call	 _Py_IncRef

; 4707 :     return Py_None;

  0008c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
$LN4@wrap_delat:

; 4708 : }

  00093	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00097	c3		 ret	 0
wrap_delattr ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$wrap_hashfunc DD imagerel wrap_hashfunc
	DD	imagerel wrap_hashfunc+100
	DD	imagerel $unwind$wrap_hashfunc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$wrap_hashfunc DD 011301H
	DD	06213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT wrap_hashfunc
_TEXT	SEGMENT
res$ = 32
func$ = 40
self$ = 64
args$ = 72
wrapped$ = 80
wrap_hashfunc PROC					; COMDAT

; 4712 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 4713 :     hashfunc func = (hashfunc)wrapped;

  00013	48 8b 44 24 50	 mov	 rax, QWORD PTR wrapped$[rsp]
  00018	48 89 44 24 28	 mov	 QWORD PTR func$[rsp], rax

; 4714 :     Py_hash_t res;
; 4715 : 
; 4716 :     if (!check_num_args(args, 0))

  0001d	33 d2		 xor	 edx, edx
  0001f	48 8b 4c 24 48	 mov	 rcx, QWORD PTR args$[rsp]
  00024	e8 00 00 00 00	 call	 check_num_args
  00029	85 c0		 test	 eax, eax
  0002b	75 04		 jne	 SHORT $LN2@wrap_hashf

; 4717 :         return NULL;

  0002d	33 c0		 xor	 eax, eax
  0002f	eb 2e		 jmp	 SHORT $LN3@wrap_hashf
$LN2@wrap_hashf:

; 4718 :     res = (*func)(self);

  00031	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  00036	ff 54 24 28	 call	 QWORD PTR func$[rsp]
  0003a	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax

; 4719 :     if (res == -1 && PyErr_Occurred())

  0003f	48 83 7c 24 20
	ff		 cmp	 QWORD PTR res$[rsp], -1
  00045	75 0e		 jne	 SHORT $LN1@wrap_hashf
  00047	e8 00 00 00 00	 call	 PyErr_Occurred
  0004c	48 85 c0	 test	 rax, rax
  0004f	74 04		 je	 SHORT $LN1@wrap_hashf

; 4720 :         return NULL;

  00051	33 c0		 xor	 eax, eax
  00053	eb 0a		 jmp	 SHORT $LN3@wrap_hashf
$LN1@wrap_hashf:

; 4721 :     return PyLong_FromSsize_t(res);

  00055	48 8b 4c 24 20	 mov	 rcx, QWORD PTR res$[rsp]
  0005a	e8 00 00 00 00	 call	 PyLong_FromSsize_t
$LN3@wrap_hashf:

; 4722 : }

  0005f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00063	c3		 ret	 0
wrap_hashfunc ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$wrap_call DD imagerel wrap_call
	DD	imagerel wrap_call+58
	DD	imagerel $unwind$wrap_call
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$wrap_call DD 011801H
	DD	06218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT wrap_call
_TEXT	SEGMENT
func$ = 32
self$ = 64
args$ = 72
wrapped$ = 80
kwds$ = 88
wrap_call PROC						; COMDAT

; 4726 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 4727 :     ternaryfunc func = (ternaryfunc)wrapped;

  00018	48 8b 44 24 50	 mov	 rax, QWORD PTR wrapped$[rsp]
  0001d	48 89 44 24 20	 mov	 QWORD PTR func$[rsp], rax

; 4728 : 
; 4729 :     return (*func)(self, args, kwds);

  00022	4c 8b 44 24 58	 mov	 r8, QWORD PTR kwds$[rsp]
  00027	48 8b 54 24 48	 mov	 rdx, QWORD PTR args$[rsp]
  0002c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  00031	ff 54 24 20	 call	 QWORD PTR func$[rsp]

; 4730 : }

  00035	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00039	c3		 ret	 0
wrap_call ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$richcmp_lt DD imagerel richcmp_lt
	DD	imagerel richcmp_lt+47
	DD	imagerel $unwind$richcmp_lt
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$richcmp_lt DD 011301H
	DD	04213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT richcmp_lt
_TEXT	SEGMENT
self$ = 48
args$ = 56
wrapped$ = 64
richcmp_lt PROC						; COMDAT

; 4752 : RICHCMP_WRAPPER(lt, Py_LT)

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00013	45 33 c9	 xor	 r9d, r9d
  00016	4c 8b 44 24 40	 mov	 r8, QWORD PTR wrapped$[rsp]
  0001b	48 8b 54 24 38	 mov	 rdx, QWORD PTR args$[rsp]
  00020	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self$[rsp]
  00025	e8 00 00 00 00	 call	 wrap_richcmpfunc
  0002a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002e	c3		 ret	 0
richcmp_lt ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$wrap_richcmpfunc DD imagerel wrap_richcmpfunc
	DD	imagerel wrap_richcmpfunc+95
	DD	imagerel $unwind$wrap_richcmpfunc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$wrap_richcmpfunc DD 011801H
	DD	06218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT wrap_richcmpfunc
_TEXT	SEGMENT
other$ = 32
func$ = 40
self$ = 64
args$ = 72
wrapped$ = 80
op$ = 88
wrap_richcmpfunc PROC					; COMDAT

; 4734 : {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 4735 :     richcmpfunc func = (richcmpfunc)wrapped;

  00018	48 8b 44 24 50	 mov	 rax, QWORD PTR wrapped$[rsp]
  0001d	48 89 44 24 28	 mov	 QWORD PTR func$[rsp], rax

; 4736 :     PyObject *other;
; 4737 : 
; 4738 :     if (!check_num_args(args, 1))

  00022	ba 01 00 00 00	 mov	 edx, 1
  00027	48 8b 4c 24 48	 mov	 rcx, QWORD PTR args$[rsp]
  0002c	e8 00 00 00 00	 call	 check_num_args
  00031	85 c0		 test	 eax, eax
  00033	75 04		 jne	 SHORT $LN1@wrap_richc

; 4739 :         return NULL;

  00035	33 c0		 xor	 eax, eax
  00037	eb 21		 jmp	 SHORT $LN2@wrap_richc
$LN1@wrap_richc:

; 4740 :     other = PyTuple_GET_ITEM(args, 0);

  00039	48 8b 44 24 48	 mov	 rax, QWORD PTR args$[rsp]
  0003e	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00042	48 89 44 24 20	 mov	 QWORD PTR other$[rsp], rax

; 4741 :     return (*func)(self, other, op);

  00047	44 8b 44 24 58	 mov	 r8d, DWORD PTR op$[rsp]
  0004c	48 8b 54 24 20	 mov	 rdx, QWORD PTR other$[rsp]
  00051	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  00056	ff 54 24 28	 call	 QWORD PTR func$[rsp]
$LN2@wrap_richc:

; 4742 : }

  0005a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0005e	c3		 ret	 0
wrap_richcmpfunc ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$richcmp_le DD imagerel richcmp_le
	DD	imagerel richcmp_le+50
	DD	imagerel $unwind$richcmp_le
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$richcmp_le DD 011301H
	DD	04213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT richcmp_le
_TEXT	SEGMENT
self$ = 48
args$ = 56
wrapped$ = 64
richcmp_le PROC						; COMDAT

; 4753 : RICHCMP_WRAPPER(le, Py_LE)

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00013	41 b9 01 00 00
	00		 mov	 r9d, 1
  00019	4c 8b 44 24 40	 mov	 r8, QWORD PTR wrapped$[rsp]
  0001e	48 8b 54 24 38	 mov	 rdx, QWORD PTR args$[rsp]
  00023	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self$[rsp]
  00028	e8 00 00 00 00	 call	 wrap_richcmpfunc
  0002d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00031	c3		 ret	 0
richcmp_le ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$richcmp_eq DD imagerel richcmp_eq
	DD	imagerel richcmp_eq+50
	DD	imagerel $unwind$richcmp_eq
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$richcmp_eq DD 011301H
	DD	04213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT richcmp_eq
_TEXT	SEGMENT
self$ = 48
args$ = 56
wrapped$ = 64
richcmp_eq PROC						; COMDAT

; 4754 : RICHCMP_WRAPPER(eq, Py_EQ)

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00013	41 b9 02 00 00
	00		 mov	 r9d, 2
  00019	4c 8b 44 24 40	 mov	 r8, QWORD PTR wrapped$[rsp]
  0001e	48 8b 54 24 38	 mov	 rdx, QWORD PTR args$[rsp]
  00023	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self$[rsp]
  00028	e8 00 00 00 00	 call	 wrap_richcmpfunc
  0002d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00031	c3		 ret	 0
richcmp_eq ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$richcmp_ne DD imagerel richcmp_ne
	DD	imagerel richcmp_ne+50
	DD	imagerel $unwind$richcmp_ne
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$richcmp_ne DD 011301H
	DD	04213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT richcmp_ne
_TEXT	SEGMENT
self$ = 48
args$ = 56
wrapped$ = 64
richcmp_ne PROC						; COMDAT

; 4755 : RICHCMP_WRAPPER(ne, Py_NE)

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00013	41 b9 03 00 00
	00		 mov	 r9d, 3
  00019	4c 8b 44 24 40	 mov	 r8, QWORD PTR wrapped$[rsp]
  0001e	48 8b 54 24 38	 mov	 rdx, QWORD PTR args$[rsp]
  00023	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self$[rsp]
  00028	e8 00 00 00 00	 call	 wrap_richcmpfunc
  0002d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00031	c3		 ret	 0
richcmp_ne ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$richcmp_gt DD imagerel richcmp_gt
	DD	imagerel richcmp_gt+50
	DD	imagerel $unwind$richcmp_gt
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$richcmp_gt DD 011301H
	DD	04213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT richcmp_gt
_TEXT	SEGMENT
self$ = 48
args$ = 56
wrapped$ = 64
richcmp_gt PROC						; COMDAT

; 4756 : RICHCMP_WRAPPER(gt, Py_GT)

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00013	41 b9 04 00 00
	00		 mov	 r9d, 4
  00019	4c 8b 44 24 40	 mov	 r8, QWORD PTR wrapped$[rsp]
  0001e	48 8b 54 24 38	 mov	 rdx, QWORD PTR args$[rsp]
  00023	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self$[rsp]
  00028	e8 00 00 00 00	 call	 wrap_richcmpfunc
  0002d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00031	c3		 ret	 0
richcmp_gt ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$richcmp_ge DD imagerel richcmp_ge
	DD	imagerel richcmp_ge+50
	DD	imagerel $unwind$richcmp_ge
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$richcmp_ge DD 011301H
	DD	04213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT richcmp_ge
_TEXT	SEGMENT
self$ = 48
args$ = 56
wrapped$ = 64
richcmp_ge PROC						; COMDAT

; 4757 : RICHCMP_WRAPPER(ge, Py_GE)

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00013	41 b9 05 00 00
	00		 mov	 r9d, 5
  00019	4c 8b 44 24 40	 mov	 r8, QWORD PTR wrapped$[rsp]
  0001e	48 8b 54 24 38	 mov	 rdx, QWORD PTR args$[rsp]
  00023	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self$[rsp]
  00028	e8 00 00 00 00	 call	 wrap_richcmpfunc
  0002d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00031	c3		 ret	 0
richcmp_ge ENDP
_TEXT	ENDS
EXTRN	PyErr_SetNone:PROC
EXTRN	PyExc_StopIteration:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$wrap_next DD imagerel wrap_next
	DD	imagerel wrap_next+103
	DD	imagerel $unwind$wrap_next
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$wrap_next DD 011301H
	DD	06213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT wrap_next
_TEXT	SEGMENT
res$ = 32
func$ = 40
self$ = 64
args$ = 72
wrapped$ = 80
wrap_next PROC						; COMDAT

; 4761 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 4762 :     unaryfunc func = (unaryfunc)wrapped;

  00013	48 8b 44 24 50	 mov	 rax, QWORD PTR wrapped$[rsp]
  00018	48 89 44 24 28	 mov	 QWORD PTR func$[rsp], rax

; 4763 :     PyObject *res;
; 4764 : 
; 4765 :     if (!check_num_args(args, 0))

  0001d	33 d2		 xor	 edx, edx
  0001f	48 8b 4c 24 48	 mov	 rcx, QWORD PTR args$[rsp]
  00024	e8 00 00 00 00	 call	 check_num_args
  00029	85 c0		 test	 eax, eax
  0002b	75 04		 jne	 SHORT $LN2@wrap_next

; 4766 :         return NULL;

  0002d	33 c0		 xor	 eax, eax
  0002f	eb 31		 jmp	 SHORT $LN3@wrap_next
$LN2@wrap_next:

; 4767 :     res = (*func)(self);

  00031	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  00036	ff 54 24 28	 call	 QWORD PTR func$[rsp]
  0003a	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax

; 4768 :     if (res == NULL && !PyErr_Occurred())

  0003f	48 83 7c 24 20
	00		 cmp	 QWORD PTR res$[rsp], 0
  00045	75 16		 jne	 SHORT $LN1@wrap_next
  00047	e8 00 00 00 00	 call	 PyErr_Occurred
  0004c	48 85 c0	 test	 rax, rax
  0004f	75 0c		 jne	 SHORT $LN1@wrap_next

; 4769 :         PyErr_SetNone(PyExc_StopIteration);

  00051	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_StopIteration
  00058	e8 00 00 00 00	 call	 PyErr_SetNone
$LN1@wrap_next:

; 4770 :     return res;

  0005d	48 8b 44 24 20	 mov	 rax, QWORD PTR res$[rsp]
$LN3@wrap_next:

; 4771 : }

  00062	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00066	c3		 ret	 0
wrap_next ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BP@LLJHLDPJ@__get__?$CINone?0?5None?$CJ?5is?5invalid?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$wrap_descr_get DD imagerel wrap_descr_get
	DD	imagerel wrap_descr_get+204
	DD	imagerel $unwind$wrap_descr_get
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$wrap_descr_get DD 011301H
	DD	0a213H
xdata	ENDS
;	COMDAT ??_C@_0BP@LLJHLDPJ@__get__?$CINone?0?5None?$CJ?5is?5invalid?$AA@
CONST	SEGMENT
??_C@_0BP@LLJHLDPJ@__get__?$CINone?0?5None?$CJ?5is?5invalid?$AA@ DB '__ge'
	DB	't__(None, None) is invalid', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT wrap_descr_get
_TEXT	SEGMENT
type$ = 48
obj$ = 56
func$ = 64
self$ = 96
args$ = 104
wrapped$ = 112
wrap_descr_get PROC					; COMDAT

; 4775 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 4776 :     descrgetfunc func = (descrgetfunc)wrapped;

  00013	48 8b 44 24 70	 mov	 rax, QWORD PTR wrapped$[rsp]
  00018	48 89 44 24 40	 mov	 QWORD PTR func$[rsp], rax

; 4777 :     PyObject *obj;
; 4778 :     PyObject *type = NULL;

  0001d	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR type$[rsp], 0

; 4779 : 
; 4780 :     if (!PyArg_UnpackTuple(args, "", 1, 2, &obj, &type))

  00026	48 8d 44 24 30	 lea	 rax, QWORD PTR type$[rsp]
  0002b	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00030	48 8d 44 24 38	 lea	 rax, QWORD PTR obj$[rsp]
  00035	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0003a	41 b9 02 00 00
	00		 mov	 r9d, 2
  00040	41 b8 01 00 00
	00		 mov	 r8d, 1
  00046	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  0004d	48 8b 4c 24 68	 mov	 rcx, QWORD PTR args$[rsp]
  00052	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00057	85 c0		 test	 eax, eax
  00059	75 04		 jne	 SHORT $LN4@wrap_descr

; 4781 :         return NULL;

  0005b	33 c0		 xor	 eax, eax
  0005d	eb 68		 jmp	 SHORT $LN5@wrap_descr
$LN4@wrap_descr:

; 4782 :     if (obj == Py_None)

  0005f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00066	48 39 44 24 38	 cmp	 QWORD PTR obj$[rsp], rax
  0006b	75 09		 jne	 SHORT $LN3@wrap_descr

; 4783 :         obj = NULL;

  0006d	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR obj$[rsp], 0
$LN3@wrap_descr:

; 4784 :     if (type == Py_None)

  00076	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0007d	48 39 44 24 30	 cmp	 QWORD PTR type$[rsp], rax
  00082	75 09		 jne	 SHORT $LN2@wrap_descr

; 4785 :         type = NULL;

  00084	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR type$[rsp], 0
$LN2@wrap_descr:

; 4786 :     if (type == NULL &&obj == NULL) {

  0008d	48 83 7c 24 30
	00		 cmp	 QWORD PTR type$[rsp], 0
  00093	75 1f		 jne	 SHORT $LN1@wrap_descr
  00095	48 83 7c 24 38
	00		 cmp	 QWORD PTR obj$[rsp], 0
  0009b	75 17		 jne	 SHORT $LN1@wrap_descr

; 4787 :         PyErr_SetString(PyExc_TypeError,
; 4788 :                         "__get__(None, None) is invalid");

  0009d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BP@LLJHLDPJ@__get__?$CINone?0?5None?$CJ?5is?5invalid?$AA@
  000a4	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000ab	e8 00 00 00 00	 call	 PyErr_SetString

; 4789 :         return NULL;

  000b0	33 c0		 xor	 eax, eax
  000b2	eb 13		 jmp	 SHORT $LN5@wrap_descr
$LN1@wrap_descr:

; 4790 :     }
; 4791 :     return (*func)(self, obj, type);

  000b4	4c 8b 44 24 30	 mov	 r8, QWORD PTR type$[rsp]
  000b9	48 8b 54 24 38	 mov	 rdx, QWORD PTR obj$[rsp]
  000be	48 8b 4c 24 60	 mov	 rcx, QWORD PTR self$[rsp]
  000c3	ff 54 24 40	 call	 QWORD PTR func$[rsp]
$LN5@wrap_descr:

; 4792 : }

  000c7	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000cb	c3		 ret	 0
wrap_descr_get ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$wrap_descr_set DD imagerel wrap_descr_set
	DD	imagerel wrap_descr_set+144
	DD	imagerel $unwind$wrap_descr_set
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$wrap_descr_set DD 011301H
	DD	0a213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT wrap_descr_set
_TEXT	SEGMENT
value$ = 48
ret$ = 56
obj$ = 64
func$ = 72
self$ = 96
args$ = 104
wrapped$ = 112
wrap_descr_set PROC					; COMDAT

; 4796 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 4797 :     descrsetfunc func = (descrsetfunc)wrapped;

  00013	48 8b 44 24 70	 mov	 rax, QWORD PTR wrapped$[rsp]
  00018	48 89 44 24 48	 mov	 QWORD PTR func$[rsp], rax

; 4798 :     PyObject *obj, *value;
; 4799 :     int ret;
; 4800 : 
; 4801 :     if (!PyArg_UnpackTuple(args, "", 2, 2, &obj, &value))

  0001d	48 8d 44 24 30	 lea	 rax, QWORD PTR value$[rsp]
  00022	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00027	48 8d 44 24 40	 lea	 rax, QWORD PTR obj$[rsp]
  0002c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00031	41 b9 02 00 00
	00		 mov	 r9d, 2
  00037	41 b8 02 00 00
	00		 mov	 r8d, 2
  0003d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  00044	48 8b 4c 24 68	 mov	 rcx, QWORD PTR args$[rsp]
  00049	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  0004e	85 c0		 test	 eax, eax
  00050	75 04		 jne	 SHORT $LN2@wrap_descr@2

; 4802 :         return NULL;

  00052	33 c0		 xor	 eax, eax
  00054	eb 35		 jmp	 SHORT $LN3@wrap_descr@2
$LN2@wrap_descr@2:

; 4803 :     ret = (*func)(self, obj, value);

  00056	4c 8b 44 24 30	 mov	 r8, QWORD PTR value$[rsp]
  0005b	48 8b 54 24 40	 mov	 rdx, QWORD PTR obj$[rsp]
  00060	48 8b 4c 24 60	 mov	 rcx, QWORD PTR self$[rsp]
  00065	ff 54 24 48	 call	 QWORD PTR func$[rsp]
  00069	89 44 24 38	 mov	 DWORD PTR ret$[rsp], eax

; 4804 :     if (ret < 0)

  0006d	83 7c 24 38 00	 cmp	 DWORD PTR ret$[rsp], 0
  00072	7d 04		 jge	 SHORT $LN1@wrap_descr@2

; 4805 :         return NULL;

  00074	33 c0		 xor	 eax, eax
  00076	eb 13		 jmp	 SHORT $LN3@wrap_descr@2
$LN1@wrap_descr@2:

; 4806 :     Py_INCREF(Py_None);

  00078	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  0007f	e8 00 00 00 00	 call	 _Py_IncRef

; 4807 :     return Py_None;

  00084	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
$LN3@wrap_descr@2:

; 4808 : }

  0008b	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0008f	c3		 ret	 0
wrap_descr_set ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$wrap_descr_delete DD imagerel wrap_descr_delete
	DD	imagerel wrap_descr_delete+122
	DD	imagerel $unwind$wrap_descr_delete
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$wrap_descr_delete DD 011301H
	DD	08213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT wrap_descr_delete
_TEXT	SEGMENT
ret$ = 32
obj$ = 40
func$ = 48
self$ = 80
args$ = 88
wrapped$ = 96
wrap_descr_delete PROC					; COMDAT

; 4812 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 4813 :     descrsetfunc func = (descrsetfunc)wrapped;

  00013	48 8b 44 24 60	 mov	 rax, QWORD PTR wrapped$[rsp]
  00018	48 89 44 24 30	 mov	 QWORD PTR func$[rsp], rax

; 4814 :     PyObject *obj;
; 4815 :     int ret;
; 4816 : 
; 4817 :     if (!check_num_args(args, 1))

  0001d	ba 01 00 00 00	 mov	 edx, 1
  00022	48 8b 4c 24 58	 mov	 rcx, QWORD PTR args$[rsp]
  00027	e8 00 00 00 00	 call	 check_num_args
  0002c	85 c0		 test	 eax, eax
  0002e	75 04		 jne	 SHORT $LN2@wrap_descr@3

; 4818 :         return NULL;

  00030	33 c0		 xor	 eax, eax
  00032	eb 41		 jmp	 SHORT $LN3@wrap_descr@3
$LN2@wrap_descr@3:

; 4819 :     obj = PyTuple_GET_ITEM(args, 0);

  00034	48 8b 44 24 58	 mov	 rax, QWORD PTR args$[rsp]
  00039	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  0003d	48 89 44 24 28	 mov	 QWORD PTR obj$[rsp], rax

; 4820 :     ret = (*func)(self, obj, NULL);

  00042	45 33 c0	 xor	 r8d, r8d
  00045	48 8b 54 24 28	 mov	 rdx, QWORD PTR obj$[rsp]
  0004a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  0004f	ff 54 24 30	 call	 QWORD PTR func$[rsp]
  00053	89 44 24 20	 mov	 DWORD PTR ret$[rsp], eax

; 4821 :     if (ret < 0)

  00057	83 7c 24 20 00	 cmp	 DWORD PTR ret$[rsp], 0
  0005c	7d 04		 jge	 SHORT $LN1@wrap_descr@3

; 4822 :         return NULL;

  0005e	33 c0		 xor	 eax, eax
  00060	eb 13		 jmp	 SHORT $LN3@wrap_descr@3
$LN1@wrap_descr@3:

; 4823 :     Py_INCREF(Py_None);

  00062	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00069	e8 00 00 00 00	 call	 _Py_IncRef

; 4824 :     return Py_None;

  0006e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
$LN3@wrap_descr@3:

; 4825 : }

  00075	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00079	c3		 ret	 0
wrap_descr_delete ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$wrap_init DD imagerel wrap_init
	DD	imagerel wrap_init+85
	DD	imagerel $unwind$wrap_init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$wrap_init DD 011801H
	DD	06218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT wrap_init
_TEXT	SEGMENT
func$ = 32
self$ = 64
args$ = 72
wrapped$ = 80
kwds$ = 88
wrap_init PROC						; COMDAT

; 4829 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 4830 :     initproc func = (initproc)wrapped;

  00018	48 8b 44 24 50	 mov	 rax, QWORD PTR wrapped$[rsp]
  0001d	48 89 44 24 20	 mov	 QWORD PTR func$[rsp], rax

; 4831 : 
; 4832 :     if (func(self, args, kwds) < 0)

  00022	4c 8b 44 24 58	 mov	 r8, QWORD PTR kwds$[rsp]
  00027	48 8b 54 24 48	 mov	 rdx, QWORD PTR args$[rsp]
  0002c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  00031	ff 54 24 20	 call	 QWORD PTR func$[rsp]
  00035	85 c0		 test	 eax, eax
  00037	7d 04		 jge	 SHORT $LN1@wrap_init

; 4833 :         return NULL;

  00039	33 c0		 xor	 eax, eax
  0003b	eb 13		 jmp	 SHORT $LN2@wrap_init
$LN1@wrap_init:

; 4834 :     Py_INCREF(Py_None);

  0003d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00044	e8 00 00 00 00	 call	 _Py_IncRef

; 4835 :     return Py_None;

  00049	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
$LN2@wrap_init:

; 4836 : }

  00050	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00054	c3		 ret	 0
wrap_init ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CN@MPLIKKOK@?$CFs?4__new__?$CI?$CFs?$CJ?5is?5not?5safe?0?5use?5@ ; `string'
PUBLIC	??_C@_0CK@JKGADFBI@?$CFs?4__new__?$CI?$CFs?$CJ?3?5?$CFs?5is?5not?5a?5subt@ ; `string'
PUBLIC	??_C@_0CL@OJLAAAPD@?$CFs?4__new__?$CIX?$CJ?3?5X?5is?5not?5a?5type?5o@ ; `string'
PUBLIC	??_C@_0CD@LLBIFAAG@?$CFs?4__new__?$CI?$CJ?3?5not?5enough?5argumen@ ; `string'
PUBLIC	??_C@_0CG@LMPOEJHA@__new__?$CI?$CJ?5called?5with?5non?9type?5?8@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$tp_new_wrapper DD imagerel tp_new_wrapper
	DD	imagerel tp_new_wrapper+605
	DD	imagerel $unwind$tp_new_wrapper
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$tp_new_wrapper DD 011301H
	DD	0c213H
xdata	ENDS
;	COMDAT ??_C@_0CN@MPLIKKOK@?$CFs?4__new__?$CI?$CFs?$CJ?5is?5not?5safe?0?5use?5@
CONST	SEGMENT
??_C@_0CN@MPLIKKOK@?$CFs?4__new__?$CI?$CFs?$CJ?5is?5not?5safe?0?5use?5@ DB '%'
	DB	's.__new__(%s) is not safe, use %s.__new__()', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@JKGADFBI@?$CFs?4__new__?$CI?$CFs?$CJ?3?5?$CFs?5is?5not?5a?5subt@
CONST	SEGMENT
??_C@_0CK@JKGADFBI@?$CFs?4__new__?$CI?$CFs?$CJ?3?5?$CFs?5is?5not?5a?5subt@ DB '%'
	DB	's.__new__(%s): %s is not a subtype of %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@OJLAAAPD@?$CFs?4__new__?$CIX?$CJ?3?5X?5is?5not?5a?5type?5o@
CONST	SEGMENT
??_C@_0CL@OJLAAAPD@?$CFs?4__new__?$CIX?$CJ?3?5X?5is?5not?5a?5type?5o@ DB '%'
	DB	's.__new__(X): X is not a type object (%s)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@LLBIFAAG@?$CFs?4__new__?$CI?$CJ?3?5not?5enough?5argumen@
CONST	SEGMENT
??_C@_0CD@LLBIFAAG@?$CFs?4__new__?$CI?$CJ?3?5not?5enough?5argumen@ DB '%s'
	DB	'.__new__(): not enough arguments', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@LMPOEJHA@__new__?$CI?$CJ?5called?5with?5non?9type?5?8@
CONST	SEGMENT
??_C@_0CG@LMPOEJHA@__new__?$CI?$CJ?5called?5with?5non?9type?5?8@ DB '__ne'
	DB	'w__() called with non-type ''self''', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT tp_new_wrapper
_TEXT	SEGMENT
staticbase$ = 48
res$ = 56
type$ = 64
arg0$ = 72
subtype$ = 80
tv150 = 88
self$ = 112
args$ = 120
kwds$ = 128
tp_new_wrapper PROC					; COMDAT

; 4840 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 4841 :     PyTypeObject *type, *subtype, *staticbase;
; 4842 :     PyObject *arg0, *res;
; 4843 : 
; 4844 :     if (self == NULL || !PyType_Check(self))

  00013	48 83 7c 24 70
	00		 cmp	 QWORD PTR self$[rsp], 0
  00019	74 18		 je	 SHORT $LN9@tp_new_wra
  0001b	48 8b 44 24 70	 mov	 rax, QWORD PTR self$[rsp]
  00020	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00024	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0002a	25 00 00 00 80	 and	 eax, -2147483648	; ffffffff80000000H
  0002f	85 c0		 test	 eax, eax
  00031	75 0c		 jne	 SHORT $LN10@tp_new_wra
$LN9@tp_new_wra:

; 4845 :         Py_FatalError("__new__() called with non-type 'self'");

  00033	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CG@LMPOEJHA@__new__?$CI?$CJ?5called?5with?5non?9type?5?8@
  0003a	e8 00 00 00 00	 call	 Py_FatalError
$LN10@tp_new_wra:

; 4846 :     type = (PyTypeObject *)self;

  0003f	48 8b 44 24 70	 mov	 rax, QWORD PTR self$[rsp]
  00044	48 89 44 24 40	 mov	 QWORD PTR type$[rsp], rax

; 4847 :     if (!PyTuple_Check(args) || PyTuple_GET_SIZE(args) < 1) {

  00049	48 8b 44 24 78	 mov	 rax, QWORD PTR args$[rsp]
  0004e	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00052	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00058	25 00 00 00 04	 and	 eax, 67108864		; 04000000H
  0005d	85 c0		 test	 eax, eax
  0005f	74 0c		 je	 SHORT $LN7@tp_new_wra
  00061	48 8b 44 24 78	 mov	 rax, QWORD PTR args$[rsp]
  00066	48 83 78 60 01	 cmp	 QWORD PTR [rax+96], 1
  0006b	7d 23		 jge	 SHORT $LN8@tp_new_wra
$LN7@tp_new_wra:

; 4848 :         PyErr_Format(PyExc_TypeError,
; 4849 :                      "%s.__new__(): not enough arguments",
; 4850 :                      type->tp_name);

  0006d	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  00072	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  00076	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@LLBIFAAG@?$CFs?4__new__?$CI?$CJ?3?5not?5enough?5argumen@
  0007d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00084	e8 00 00 00 00	 call	 PyErr_Format

; 4851 :         return NULL;

  00089	33 c0		 xor	 eax, eax
  0008b	e9 c8 01 00 00	 jmp	 $LN11@tp_new_wra
$LN8@tp_new_wra:

; 4852 :     }
; 4853 :     arg0 = PyTuple_GET_ITEM(args, 0);

  00090	48 8b 44 24 78	 mov	 rax, QWORD PTR args$[rsp]
  00095	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00099	48 89 44 24 48	 mov	 QWORD PTR arg0$[rsp], rax

; 4854 :     if (!PyType_Check(arg0)) {

  0009e	48 8b 44 24 48	 mov	 rax, QWORD PTR arg0$[rsp]
  000a3	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000a7	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000ad	25 00 00 00 80	 and	 eax, -2147483648	; ffffffff80000000H
  000b2	85 c0		 test	 eax, eax
  000b4	75 30		 jne	 SHORT $LN6@tp_new_wra

; 4855 :         PyErr_Format(PyExc_TypeError,
; 4856 :                      "%s.__new__(X): X is not a type object (%s)",
; 4857 :                      type->tp_name,
; 4858 :                      Py_TYPE(arg0)->tp_name);

  000b6	48 8b 44 24 48	 mov	 rax, QWORD PTR arg0$[rsp]
  000bb	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000bf	4c 8b 48 70	 mov	 r9, QWORD PTR [rax+112]
  000c3	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  000c8	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  000cc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CL@OJLAAAPD@?$CFs?4__new__?$CIX?$CJ?3?5X?5is?5not?5a?5type?5o@
  000d3	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000da	e8 00 00 00 00	 call	 PyErr_Format

; 4859 :         return NULL;

  000df	33 c0		 xor	 eax, eax
  000e1	e9 72 01 00 00	 jmp	 $LN11@tp_new_wra
$LN6@tp_new_wra:

; 4860 :     }
; 4861 :     subtype = (PyTypeObject *)arg0;

  000e6	48 8b 44 24 48	 mov	 rax, QWORD PTR arg0$[rsp]
  000eb	48 89 44 24 50	 mov	 QWORD PTR subtype$[rsp], rax

; 4862 :     if (!PyType_IsSubtype(subtype, type)) {

  000f0	48 8b 54 24 40	 mov	 rdx, QWORD PTR type$[rsp]
  000f5	48 8b 4c 24 50	 mov	 rcx, QWORD PTR subtype$[rsp]
  000fa	e8 00 00 00 00	 call	 PyType_IsSubtype
  000ff	85 c0		 test	 eax, eax
  00101	75 48		 jne	 SHORT $LN5@tp_new_wra

; 4863 :         PyErr_Format(PyExc_TypeError,
; 4864 :                      "%s.__new__(%s): %s is not a subtype of %s",
; 4865 :                      type->tp_name,
; 4866 :                      subtype->tp_name,
; 4867 :                      subtype->tp_name,
; 4868 :                      type->tp_name);

  00103	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  00108	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  0010c	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00111	48 8b 44 24 50	 mov	 rax, QWORD PTR subtype$[rsp]
  00116	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  0011a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0011f	48 8b 44 24 50	 mov	 rax, QWORD PTR subtype$[rsp]
  00124	4c 8b 48 70	 mov	 r9, QWORD PTR [rax+112]
  00128	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  0012d	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  00131	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CK@JKGADFBI@?$CFs?4__new__?$CI?$CFs?$CJ?3?5?$CFs?5is?5not?5a?5subt@
  00138	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0013f	e8 00 00 00 00	 call	 PyErr_Format

; 4869 :         return NULL;

  00144	33 c0		 xor	 eax, eax
  00146	e9 0d 01 00 00	 jmp	 $LN11@tp_new_wra
$LN5@tp_new_wra:

; 4870 :     }
; 4871 : 
; 4872 :     /* Check that the use doesn't do something silly and unsafe like
; 4873 :        object.__new__(dict).  To do this, we check that the
; 4874 :        most derived base that's not a heap type is this type. */
; 4875 :     staticbase = subtype;

  0014b	48 8b 44 24 50	 mov	 rax, QWORD PTR subtype$[rsp]
  00150	48 89 44 24 30	 mov	 QWORD PTR staticbase$[rsp], rax
$LN4@tp_new_wra:

; 4876 :     while (staticbase && (staticbase->tp_new == slot_tp_new))

  00155	48 83 7c 24 30
	00		 cmp	 QWORD PTR staticbase$[rsp], 0
  0015b	74 28		 je	 SHORT $LN3@tp_new_wra
  0015d	48 8b 44 24 30	 mov	 rax, QWORD PTR staticbase$[rsp]
  00162	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:slot_tp_new
  00169	48 39 88 90 01
	00 00		 cmp	 QWORD PTR [rax+400], rcx
  00170	75 13		 jne	 SHORT $LN3@tp_new_wra

; 4877 :         staticbase = staticbase->tp_base;

  00172	48 8b 44 24 30	 mov	 rax, QWORD PTR staticbase$[rsp]
  00177	48 8b 80 58 01
	00 00		 mov	 rax, QWORD PTR [rax+344]
  0017e	48 89 44 24 30	 mov	 QWORD PTR staticbase$[rsp], rax
  00183	eb d0		 jmp	 SHORT $LN4@tp_new_wra
$LN3@tp_new_wra:

; 4878 :     /* If staticbase is NULL now, it is a really weird type.
; 4879 :        In the spirit of backwards compatibility (?), just shut up. */
; 4880 :     if (staticbase && staticbase->tp_new != type->tp_new) {

  00185	48 83 7c 24 30
	00		 cmp	 QWORD PTR staticbase$[rsp], 0
  0018b	74 71		 je	 SHORT $LN2@tp_new_wra
  0018d	48 8b 44 24 30	 mov	 rax, QWORD PTR staticbase$[rsp]
  00192	48 8b 4c 24 40	 mov	 rcx, QWORD PTR type$[rsp]
  00197	48 8b 89 90 01
	00 00		 mov	 rcx, QWORD PTR [rcx+400]
  0019e	48 39 88 90 01
	00 00		 cmp	 QWORD PTR [rax+400], rcx
  001a5	74 57		 je	 SHORT $LN2@tp_new_wra

; 4881 :         PyErr_Format(PyExc_TypeError,
; 4882 :                      "%s.__new__(%s) is not safe, use %s.__new__()",
; 4883 :                      type->tp_name,
; 4884 :                      subtype->tp_name,
; 4885 :                      staticbase == NULL ? "?" : staticbase->tp_name);

  001a7	48 83 7c 24 30
	00		 cmp	 QWORD PTR staticbase$[rsp], 0
  001ad	75 0e		 jne	 SHORT $LN13@tp_new_wra
  001af	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_01OGPIMHDM@?$DP?$AA@
  001b6	48 89 44 24 58	 mov	 QWORD PTR tv150[rsp], rax
  001bb	eb 0e		 jmp	 SHORT $LN14@tp_new_wra
$LN13@tp_new_wra:
  001bd	48 8b 44 24 30	 mov	 rax, QWORD PTR staticbase$[rsp]
  001c2	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  001c6	48 89 44 24 58	 mov	 QWORD PTR tv150[rsp], rax
$LN14@tp_new_wra:
  001cb	48 8b 44 24 58	 mov	 rax, QWORD PTR tv150[rsp]
  001d0	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001d5	48 8b 44 24 50	 mov	 rax, QWORD PTR subtype$[rsp]
  001da	4c 8b 48 70	 mov	 r9, QWORD PTR [rax+112]
  001de	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  001e3	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  001e7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CN@MPLIKKOK@?$CFs?4__new__?$CI?$CFs?$CJ?5is?5not?5safe?0?5use?5@
  001ee	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  001f5	e8 00 00 00 00	 call	 PyErr_Format

; 4886 :         return NULL;

  001fa	33 c0		 xor	 eax, eax
  001fc	eb 5a		 jmp	 SHORT $LN11@tp_new_wra
$LN2@tp_new_wra:

; 4887 :     }
; 4888 : 
; 4889 :     args = PyTuple_GetSlice(args, 1, PyTuple_GET_SIZE(args));

  001fe	48 8b 44 24 78	 mov	 rax, QWORD PTR args$[rsp]
  00203	4c 8b 40 60	 mov	 r8, QWORD PTR [rax+96]
  00207	ba 01 00 00 00	 mov	 edx, 1
  0020c	48 8b 4c 24 78	 mov	 rcx, QWORD PTR args$[rsp]
  00211	e8 00 00 00 00	 call	 PyTuple_GetSlice
  00216	48 89 44 24 78	 mov	 QWORD PTR args$[rsp], rax

; 4890 :     if (args == NULL)

  0021b	48 83 7c 24 78
	00		 cmp	 QWORD PTR args$[rsp], 0
  00221	75 04		 jne	 SHORT $LN1@tp_new_wra

; 4891 :         return NULL;

  00223	33 c0		 xor	 eax, eax
  00225	eb 31		 jmp	 SHORT $LN11@tp_new_wra
$LN1@tp_new_wra:

; 4892 :     res = type->tp_new(subtype, args, kwds);

  00227	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR kwds$[rsp]
  0022f	48 8b 54 24 78	 mov	 rdx, QWORD PTR args$[rsp]
  00234	48 8b 4c 24 50	 mov	 rcx, QWORD PTR subtype$[rsp]
  00239	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  0023e	ff 90 90 01 00
	00		 call	 QWORD PTR [rax+400]
  00244	48 89 44 24 38	 mov	 QWORD PTR res$[rsp], rax

; 4893 :     Py_DECREF(args);

  00249	48 8b 4c 24 78	 mov	 rcx, QWORD PTR args$[rsp]
  0024e	e8 00 00 00 00	 call	 _Py_DecRef

; 4894 :     return res;

  00253	48 8b 44 24 38	 mov	 rax, QWORD PTR res$[rsp]
$LN11@tp_new_wra:

; 4895 : }

  00258	48 83 c4 68	 add	 rsp, 104		; 00000068H
  0025c	c3		 ret	 0
tp_new_wrapper ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BN@OBBJFMLI@__len__?$CI?$CJ?5should?5return?5?$DO?$DN?50?$AA@ ; `string'
PUBLIC	??_C@_02HCKGKOFO@?$CI?$CJ?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$slot_sq_length DD imagerel slot_sq_length
	DD	imagerel slot_sq_length+165
	DD	imagerel $unwind$slot_sq_length
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$slot_sq_length DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0BN@OBBJFMLI@__len__?$CI?$CJ?5should?5return?5?$DO?$DN?50?$AA@
CONST	SEGMENT
??_C@_0BN@OBBJFMLI@__len__?$CI?$CJ?5should?5return?5?$DO?$DN?50?$AA@ DB '_'
	DB	'_len__() should return >= 0', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02HCKGKOFO@?$CI?$CJ?$AA@
CONST	SEGMENT
??_C@_02HCKGKOFO@?$CI?$CJ?$AA@ DB '()', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT slot_sq_length
_TEXT	SEGMENT
res$ = 32
len$ = 40
self$ = 64
slot_sq_length PROC					; COMDAT

; 5022 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 5023 :     _Py_IDENTIFIER(__len__);
; 5024 :     PyObject *res = call_method(self, &PyId___len__, "()");

  00009	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId___len__@?1??slot_sq_length@@9@9
  0000e	8b c0		 mov	 eax, eax
  00010	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00016	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0001f	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00023	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_02HCKGKOFO@?$CI?$CJ?$AA@
  0002a	48 8b d0	 mov	 rdx, rax
  0002d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  00032	e8 00 00 00 00	 call	 call_method
  00037	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax

; 5025 :     Py_ssize_t len;
; 5026 : 
; 5027 :     if (res == NULL)

  0003c	48 83 7c 24 20
	00		 cmp	 QWORD PTR res$[rsp], 0
  00042	75 09		 jne	 SHORT $LN3@slot_sq_le

; 5028 :         return -1;

  00044	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1
  0004b	eb 53		 jmp	 SHORT $LN4@slot_sq_le
$LN3@slot_sq_le:

; 5029 :     len = PyNumber_AsSsize_t(res, PyExc_OverflowError);

  0004d	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR PyExc_OverflowError
  00054	48 8b 4c 24 20	 mov	 rcx, QWORD PTR res$[rsp]
  00059	e8 00 00 00 00	 call	 PyNumber_AsSsize_t
  0005e	48 89 44 24 28	 mov	 QWORD PTR len$[rsp], rax

; 5030 :     Py_DECREF(res);

  00063	48 8b 4c 24 20	 mov	 rcx, QWORD PTR res$[rsp]
  00068	e8 00 00 00 00	 call	 _Py_DecRef

; 5031 :     if (len < 0) {

  0006d	48 83 7c 24 28
	00		 cmp	 QWORD PTR len$[rsp], 0
  00073	7d 26		 jge	 SHORT $LN2@slot_sq_le

; 5032 :         if (!PyErr_Occurred())

  00075	e8 00 00 00 00	 call	 PyErr_Occurred
  0007a	48 85 c0	 test	 rax, rax
  0007d	75 13		 jne	 SHORT $LN1@slot_sq_le

; 5033 :             PyErr_SetString(PyExc_ValueError,
; 5034 :                             "__len__() should return >= 0");

  0007f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@OBBJFMLI@__len__?$CI?$CJ?5should?5return?5?$DO?$DN?50?$AA@
  00086	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0008d	e8 00 00 00 00	 call	 PyErr_SetString
$LN1@slot_sq_le:

; 5035 :         return -1;

  00092	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1
  00099	eb 05		 jmp	 SHORT $LN4@slot_sq_le
$LN2@slot_sq_le:

; 5036 :     }
; 5037 :     return len;

  0009b	48 8b 44 24 28	 mov	 rax, QWORD PTR len$[rsp]
$LN4@slot_sq_le:

; 5038 : }

  000a0	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a4	c3		 ret	 0
slot_sq_length ENDP
_TEXT	ENDS
PUBLIC	??_C@_1CI@KAJNBGPM@?$AAP?$AAy?$AAT?$AAu?$AAp?$AAl?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAa?$AAr?$AAg?$AAs?$AA?$CJ?$AA?$AA@ ; `string'
EXTRN	PyObject_Call:PROC
EXTRN	Py_VaBuildValue:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$call_method DD imagerel call_method
	DD	imagerel call_method+298
	DD	imagerel $unwind$call_method
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$call_method DD 011801H
	DD	08218H
xdata	ENDS
;	COMDAT ??_C@_1CI@KAJNBGPM@?$AAP?$AAy?$AAT?$AAu?$AAp?$AAl?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAa?$AAr?$AAg?$AAs?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CI@KAJNBGPM@?$AAP?$AAy?$AAT?$AAu?$AAp?$AAl?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAa?$AAr?$AAg?$AAs?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'T', 00H, 'u', 00H, 'p', 00H, 'l', 00H, 'e', 00H
	DB	'_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, '('
	DB	00H, 'a', 00H, 'r', 00H, 'g', 00H, 's', 00H, ')', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT call_method
_TEXT	SEGMENT
args$ = 32
retval$ = 40
va$ = 48
func$ = 56
o$ = 80
nameid$ = 88
format$ = 96
call_method PROC					; COMDAT

; 1230 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1231 :     va_list va;
; 1232 :     PyObject *args, *func = 0, *retval;

  00018	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR func$[rsp], 0

; 1233 :     va_start(va, format);

  00021	48 8d 44 24 68	 lea	 rax, QWORD PTR format$[rsp+8]
  00026	48 89 44 24 30	 mov	 QWORD PTR va$[rsp], rax

; 1234 : 
; 1235 :     func = lookup_maybe(o, nameid);

  0002b	48 8b 54 24 58	 mov	 rdx, QWORD PTR nameid$[rsp]
  00030	48 8b 4c 24 50	 mov	 rcx, QWORD PTR o$[rsp]
  00035	e8 00 00 00 00	 call	 lookup_maybe
  0003a	48 89 44 24 38	 mov	 QWORD PTR func$[rsp], rax

; 1236 :     if (func == NULL) {

  0003f	48 83 7c 24 38
	00		 cmp	 QWORD PTR func$[rsp], 0
  00045	75 2f		 jne	 SHORT $LN5@call_metho

; 1237 :         va_end(va);

  00047	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR va$[rsp], 0

; 1238 :         if (!PyErr_Occurred())

  00050	e8 00 00 00 00	 call	 PyErr_Occurred
  00055	48 85 c0	 test	 rax, rax
  00058	75 15		 jne	 SHORT $LN4@call_metho

; 1239 :             PyErr_SetObject(PyExc_AttributeError, nameid->object);

  0005a	48 8b 44 24 58	 mov	 rax, QWORD PTR nameid$[rsp]
  0005f	48 8b 50 10	 mov	 rdx, QWORD PTR [rax+16]
  00063	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_AttributeError
  0006a	e8 00 00 00 00	 call	 PyErr_SetObject
$LN4@call_metho:

; 1240 :         return NULL;

  0006f	33 c0		 xor	 eax, eax
  00071	e9 af 00 00 00	 jmp	 $LN6@call_metho
$LN5@call_metho:

; 1241 :     }
; 1242 : 
; 1243 :     if (format && *format)

  00076	48 83 7c 24 60
	00		 cmp	 QWORD PTR format$[rsp], 0
  0007c	74 22		 je	 SHORT $LN3@call_metho
  0007e	48 8b 44 24 60	 mov	 rax, QWORD PTR format$[rsp]
  00083	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00086	85 c0		 test	 eax, eax
  00088	74 16		 je	 SHORT $LN3@call_metho

; 1244 :         args = Py_VaBuildValue(format, va);

  0008a	48 8b 54 24 30	 mov	 rdx, QWORD PTR va$[rsp]
  0008f	48 8b 4c 24 60	 mov	 rcx, QWORD PTR format$[rsp]
  00094	e8 00 00 00 00	 call	 Py_VaBuildValue
  00099	48 89 44 24 20	 mov	 QWORD PTR args$[rsp], rax

; 1245 :     else

  0009e	eb 0c		 jmp	 SHORT $LN2@call_metho
$LN3@call_metho:

; 1246 :         args = PyTuple_New(0);

  000a0	33 c9		 xor	 ecx, ecx
  000a2	e8 00 00 00 00	 call	 PyTuple_New
  000a7	48 89 44 24 20	 mov	 QWORD PTR args$[rsp], rax
$LN2@call_metho:

; 1247 : 
; 1248 :     va_end(va);

  000ac	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR va$[rsp], 0

; 1249 : 
; 1250 :     if (args == NULL)

  000b5	48 83 7c 24 20
	00		 cmp	 QWORD PTR args$[rsp], 0
  000bb	75 04		 jne	 SHORT $LN1@call_metho

; 1251 :         return NULL;

  000bd	33 c0		 xor	 eax, eax
  000bf	eb 64		 jmp	 SHORT $LN6@call_metho
$LN1@call_metho:

; 1252 : 
; 1253 :     assert(PyTuple_Check(args));

  000c1	48 8b 44 24 20	 mov	 rax, QWORD PTR args$[rsp]
  000c6	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000ca	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000d0	25 00 00 00 04	 and	 eax, 67108864		; 04000000H
  000d5	85 c0		 test	 eax, eax
  000d7	75 1c		 jne	 SHORT $LN8@call_metho
  000d9	41 b8 e5 04 00
	00		 mov	 r8d, 1253		; 000004e5H
  000df	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@GJLLIOPA@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAt?$AAy?$AAp?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  000e6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CI@KAJNBGPM@?$AAP?$AAy?$AAT?$AAu?$AAp?$AAl?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAa?$AAr?$AAg?$AAs?$AA?$CJ?$AA?$AA@
  000ed	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000f3	33 c0		 xor	 eax, eax
$LN8@call_metho:

; 1254 :     retval = PyObject_Call(func, args, NULL);

  000f5	45 33 c0	 xor	 r8d, r8d
  000f8	48 8b 54 24 20	 mov	 rdx, QWORD PTR args$[rsp]
  000fd	48 8b 4c 24 38	 mov	 rcx, QWORD PTR func$[rsp]
  00102	e8 00 00 00 00	 call	 PyObject_Call
  00107	48 89 44 24 28	 mov	 QWORD PTR retval$[rsp], rax

; 1255 : 
; 1256 :     Py_DECREF(args);

  0010c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR args$[rsp]
  00111	e8 00 00 00 00	 call	 _Py_DecRef

; 1257 :     Py_DECREF(func);

  00116	48 8b 4c 24 38	 mov	 rcx, QWORD PTR func$[rsp]
  0011b	e8 00 00 00 00	 call	 _Py_DecRef

; 1258 : 
; 1259 :     return retval;

  00120	48 8b 44 24 28	 mov	 rax, QWORD PTR retval$[rsp]
$LN6@call_metho:

; 1260 : }

  00125	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00129	c3		 ret	 0
call_method ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$slot_sq_item DD imagerel slot_sq_item
	DD	imagerel slot_sq_item+463
	DD	imagerel $unwind$slot_sq_item
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$slot_sq_item DD 010e01H
	DD	0a20eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT slot_sq_item
_TEXT	SEGMENT
args$ = 32
retval$ = 40
f$ = 48
ival$ = 56
func$ = 64
getitem_str$24798 = 72
self$ = 96
i$ = 104
slot_sq_item PROC					; COMDAT

; 5044 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 5045 :     PyObject *func, *args = NULL, *ival = NULL, *retval = NULL;

  0000e	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR args$[rsp], 0
  00017	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR ival$[rsp], 0
  00020	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR retval$[rsp], 0

; 5046 :     descrgetfunc f;
; 5047 : 
; 5048 :     func = _PyType_LookupId(Py_TYPE(self), &PyId___getitem__);

  00029	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId___getitem__
  0002e	8b c0		 mov	 eax, eax
  00030	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00036	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0003f	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00043	48 8b d0	 mov	 rdx, rax
  00046	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  0004b	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  0004f	e8 00 00 00 00	 call	 _PyType_LookupId
  00054	48 89 44 24 40	 mov	 QWORD PTR func$[rsp], rax

; 5049 :     if (func != NULL) {

  00059	48 83 7c 24 40
	00		 cmp	 QWORD PTR func$[rsp], 0
  0005f	0f 84 e3 00 00
	00		 je	 $LN27@slot_sq_it

; 5050 :         if ((f = Py_TYPE(func)->tp_descr_get) == NULL)

  00065	48 8b 44 24 40	 mov	 rax, QWORD PTR func$[rsp]
  0006a	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0006e	48 8b 80 68 01
	00 00		 mov	 rax, QWORD PTR [rax+360]
  00075	48 89 44 24 30	 mov	 QWORD PTR f$[rsp], rax
  0007a	48 83 7c 24 30
	00		 cmp	 QWORD PTR f$[rsp], 0
  00080	75 0c		 jne	 SHORT $LN26@slot_sq_it

; 5051 :             Py_INCREF(func);

  00082	48 8b 4c 24 40	 mov	 rcx, QWORD PTR func$[rsp]
  00087	e8 00 00 00 00	 call	 _Py_IncRef

; 5052 :         else {

  0008c	eb 2b		 jmp	 SHORT $LN25@slot_sq_it
$LN26@slot_sq_it:

; 5053 :             func = f(func, self, (PyObject *)(Py_TYPE(self)));

  0008e	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00093	4c 8b 40 58	 mov	 r8, QWORD PTR [rax+88]
  00097	48 8b 54 24 60	 mov	 rdx, QWORD PTR self$[rsp]
  0009c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR func$[rsp]
  000a1	ff 54 24 30	 call	 QWORD PTR f$[rsp]
  000a5	48 89 44 24 40	 mov	 QWORD PTR func$[rsp], rax

; 5054 :             if (func == NULL) {

  000aa	48 83 7c 24 40
	00		 cmp	 QWORD PTR func$[rsp], 0
  000b0	75 07		 jne	 SHORT $LN24@slot_sq_it

; 5055 :                 return NULL;

  000b2	33 c0		 xor	 eax, eax
  000b4	e9 11 01 00 00	 jmp	 $LN28@slot_sq_it
$LN24@slot_sq_it:
$LN25@slot_sq_it:

; 5056 :             }
; 5057 :         }
; 5058 :         ival = PyLong_FromSsize_t(i);

  000b9	48 8b 4c 24 68	 mov	 rcx, QWORD PTR i$[rsp]
  000be	e8 00 00 00 00	 call	 PyLong_FromSsize_t
  000c3	48 89 44 24 38	 mov	 QWORD PTR ival$[rsp], rax

; 5059 :         if (ival != NULL) {

  000c8	48 83 7c 24 38
	00		 cmp	 QWORD PTR ival$[rsp], 0
  000ce	74 76		 je	 SHORT $LN23@slot_sq_it

; 5060 :             args = PyTuple_New(1);

  000d0	b9 01 00 00 00	 mov	 ecx, 1
  000d5	e8 00 00 00 00	 call	 PyTuple_New
  000da	48 89 44 24 20	 mov	 QWORD PTR args$[rsp], rax

; 5061 :             if (args != NULL) {

  000df	48 83 7c 24 20
	00		 cmp	 QWORD PTR args$[rsp], 0
  000e5	74 5f		 je	 SHORT $LN22@slot_sq_it

; 5062 :                 PyTuple_SET_ITEM(args, 0, ival);

  000e7	48 8b 44 24 20	 mov	 rax, QWORD PTR args$[rsp]
  000ec	48 8b 4c 24 38	 mov	 rcx, QWORD PTR ival$[rsp]
  000f1	48 89 48 70	 mov	 QWORD PTR [rax+112], rcx

; 5063 :                 retval = PyObject_Call(func, args, NULL);

  000f5	45 33 c0	 xor	 r8d, r8d
  000f8	48 8b 54 24 20	 mov	 rdx, QWORD PTR args$[rsp]
  000fd	48 8b 4c 24 40	 mov	 rcx, QWORD PTR func$[rsp]
  00102	e8 00 00 00 00	 call	 PyObject_Call
  00107	48 89 44 24 28	 mov	 QWORD PTR retval$[rsp], rax
$LN21@slot_sq_it:

; 5064 :                 Py_XDECREF(args);

  0010c	48 83 7c 24 20
	00		 cmp	 QWORD PTR args$[rsp], 0
  00112	74 0a		 je	 SHORT $LN18@slot_sq_it
  00114	48 8b 4c 24 20	 mov	 rcx, QWORD PTR args$[rsp]
  00119	e8 00 00 00 00	 call	 _Py_DecRef
$LN18@slot_sq_it:
  0011e	33 c0		 xor	 eax, eax
  00120	85 c0		 test	 eax, eax
  00122	75 e8		 jne	 SHORT $LN21@slot_sq_it
$LN17@slot_sq_it:

; 5065 :                 Py_XDECREF(func);

  00124	48 83 7c 24 40
	00		 cmp	 QWORD PTR func$[rsp], 0
  0012a	74 0a		 je	 SHORT $LN14@slot_sq_it
  0012c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR func$[rsp]
  00131	e8 00 00 00 00	 call	 _Py_DecRef
$LN14@slot_sq_it:
  00136	33 c0		 xor	 eax, eax
  00138	85 c0		 test	 eax, eax
  0013a	75 e8		 jne	 SHORT $LN17@slot_sq_it

; 5066 :                 return retval;

  0013c	48 8b 44 24 28	 mov	 rax, QWORD PTR retval$[rsp]
  00141	e9 84 00 00 00	 jmp	 $LN28@slot_sq_it
$LN22@slot_sq_it:
$LN23@slot_sq_it:

; 5067 :             }
; 5068 :         }
; 5069 :     }
; 5070 :     else {

  00146	eb 38		 jmp	 SHORT $LN13@slot_sq_it
$LN27@slot_sq_it:

; 5071 :         PyObject *getitem_str = _PyUnicode_FromId(&PyId___getitem__);

  00148	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId___getitem__
  0014d	8b c0		 mov	 eax, eax
  0014f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00155	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0015e	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00162	48 8b c8	 mov	 rcx, rax
  00165	e8 00 00 00 00	 call	 _PyUnicode_FromId
  0016a	48 89 44 24 48	 mov	 QWORD PTR getitem_str$24798[rsp], rax

; 5072 :         PyErr_SetObject(PyExc_AttributeError, getitem_str);

  0016f	48 8b 54 24 48	 mov	 rdx, QWORD PTR getitem_str$24798[rsp]
  00174	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_AttributeError
  0017b	e8 00 00 00 00	 call	 PyErr_SetObject
$LN13@slot_sq_it:
$LN12@slot_sq_it:

; 5073 :     }
; 5074 :     Py_XDECREF(args);

  00180	48 83 7c 24 20
	00		 cmp	 QWORD PTR args$[rsp], 0
  00186	74 0a		 je	 SHORT $LN9@slot_sq_it
  00188	48 8b 4c 24 20	 mov	 rcx, QWORD PTR args$[rsp]
  0018d	e8 00 00 00 00	 call	 _Py_DecRef
$LN9@slot_sq_it:
  00192	33 c0		 xor	 eax, eax
  00194	85 c0		 test	 eax, eax
  00196	75 e8		 jne	 SHORT $LN12@slot_sq_it
$LN8@slot_sq_it:

; 5075 :     Py_XDECREF(ival);

  00198	48 83 7c 24 38
	00		 cmp	 QWORD PTR ival$[rsp], 0
  0019e	74 0a		 je	 SHORT $LN5@slot_sq_it
  001a0	48 8b 4c 24 38	 mov	 rcx, QWORD PTR ival$[rsp]
  001a5	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@slot_sq_it:
  001aa	33 c0		 xor	 eax, eax
  001ac	85 c0		 test	 eax, eax
  001ae	75 e8		 jne	 SHORT $LN8@slot_sq_it
$LN4@slot_sq_it:

; 5076 :     Py_XDECREF(func);

  001b0	48 83 7c 24 40
	00		 cmp	 QWORD PTR func$[rsp], 0
  001b6	74 0a		 je	 SHORT $LN1@slot_sq_it
  001b8	48 8b 4c 24 40	 mov	 rcx, QWORD PTR func$[rsp]
  001bd	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@slot_sq_it:
  001c2	33 c0		 xor	 eax, eax
  001c4	85 c0		 test	 eax, eax
  001c6	75 e8		 jne	 SHORT $LN4@slot_sq_it

; 5077 :     return NULL;

  001c8	33 c0		 xor	 eax, eax
$LN28@slot_sq_it:

; 5078 : }

  001ca	48 83 c4 58	 add	 rsp, 88			; 00000058H
  001ce	c3		 ret	 0
slot_sq_item ENDP
_TEXT	ENDS
PUBLIC	??_C@_04CMBFLJAB@?$CInO?$CJ?$AA@		; `string'
PUBLIC	??_C@_03LNDCNOPD@?$CIn?$CJ?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$slot_sq_ass_item DD imagerel slot_sq_ass_item
	DD	imagerel slot_sq_ass_item+183
	DD	imagerel $unwind$slot_sq_ass_item
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$slot_sq_ass_item DD 011301H
	DD	08213H
xdata	ENDS
;	COMDAT ??_C@_04CMBFLJAB@?$CInO?$CJ?$AA@
CONST	SEGMENT
??_C@_04CMBFLJAB@?$CInO?$CJ?$AA@ DB '(nO)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03LNDCNOPD@?$CIn?$CJ?$AA@
CONST	SEGMENT
??_C@_03LNDCNOPD@?$CIn?$CJ?$AA@ DB '(n)', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT slot_sq_ass_item
_TEXT	SEGMENT
res$ = 48
self$ = 80
index$ = 88
value$ = 96
slot_sq_ass_item PROC					; COMDAT

; 5082 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 5083 :     PyObject *res;
; 5084 :     _Py_IDENTIFIER(__delitem__);
; 5085 :     _Py_IDENTIFIER(__setitem__);
; 5086 : 
; 5087 :     if (value == NULL)

  00013	48 83 7c 24 60
	00		 cmp	 QWORD PTR value$[rsp], 0
  00019	75 3a		 jne	 SHORT $LN3@slot_sq_as

; 5088 :         res = call_method(self, &PyId___delitem__, "(n)", index);

  0001b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId___delitem__@?1??slot_sq_ass_item@@9@9
  00020	8b c0		 mov	 eax, eax
  00022	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00028	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00031	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00035	4c 8b 4c 24 58	 mov	 r9, QWORD PTR index$[rsp]
  0003a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03LNDCNOPD@?$CIn?$CJ?$AA@
  00041	48 8b d0	 mov	 rdx, rax
  00044	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  00049	e8 00 00 00 00	 call	 call_method
  0004e	48 89 44 24 30	 mov	 QWORD PTR res$[rsp], rax

; 5089 :     else

  00053	eb 42		 jmp	 SHORT $LN2@slot_sq_as
$LN3@slot_sq_as:

; 5090 :         res = call_method(self, &PyId___setitem__, "(nO)", index, value);

  00055	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId___setitem__@?1??slot_sq_ass_item@@9@9
  0005a	8b c0		 mov	 eax, eax
  0005c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00062	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0006b	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0006f	48 8b 4c 24 60	 mov	 rcx, QWORD PTR value$[rsp]
  00074	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00079	4c 8b 4c 24 58	 mov	 r9, QWORD PTR index$[rsp]
  0007e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_04CMBFLJAB@?$CInO?$CJ?$AA@
  00085	48 8b d0	 mov	 rdx, rax
  00088	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  0008d	e8 00 00 00 00	 call	 call_method
  00092	48 89 44 24 30	 mov	 QWORD PTR res$[rsp], rax
$LN2@slot_sq_as:

; 5091 :     if (res == NULL)

  00097	48 83 7c 24 30
	00		 cmp	 QWORD PTR res$[rsp], 0
  0009d	75 07		 jne	 SHORT $LN1@slot_sq_as

; 5092 :         return -1;

  0009f	b8 ff ff ff ff	 mov	 eax, -1
  000a4	eb 0c		 jmp	 SHORT $LN4@slot_sq_as
$LN1@slot_sq_as:

; 5093 :     Py_DECREF(res);

  000a6	48 8b 4c 24 30	 mov	 rcx, QWORD PTR res$[rsp]
  000ab	e8 00 00 00 00	 call	 _Py_DecRef

; 5094 :     return 0;

  000b0	33 c0		 xor	 eax, eax
$LN4@slot_sq_as:

; 5095 : }

  000b2	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000b6	c3		 ret	 0
slot_sq_ass_item ENDP
_TEXT	ENDS
EXTRN	_PySequence_IterSearch:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$slot_sq_contains DD imagerel slot_sq_contains
	DD	imagerel slot_sq_contains+234
	DD	imagerel $unwind$slot_sq_contains
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$slot_sq_contains DD 010e01H
	DD	0820eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT slot_sq_contains
_TEXT	SEGMENT
args$ = 32
res$ = 40
result$ = 48
func$ = 56
self$ = 80
value$ = 88
slot_sq_contains PROC					; COMDAT

; 5099 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 5100 :     PyObject *func, *res, *args;
; 5101 :     int result = -1;

  0000e	c7 44 24 30 ff
	ff ff ff	 mov	 DWORD PTR result$[rsp], -1

; 5102 :     _Py_IDENTIFIER(__contains__);
; 5103 : 
; 5104 :     func = lookup_maybe(self, &PyId___contains__);

  00016	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId___contains__@?1??slot_sq_contains@@9@9
  0001b	8b c0		 mov	 eax, eax
  0001d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00023	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0002c	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00030	48 8b d0	 mov	 rdx, rax
  00033	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  00038	e8 00 00 00 00	 call	 lookup_maybe
  0003d	48 89 44 24 38	 mov	 QWORD PTR func$[rsp], rax

; 5105 :     if (func != NULL) {

  00042	48 83 7c 24 38
	00		 cmp	 QWORD PTR func$[rsp], 0
  00048	74 74		 je	 SHORT $LN6@slot_sq_co

; 5106 :         args = PyTuple_Pack(1, value);

  0004a	48 8b 54 24 58	 mov	 rdx, QWORD PTR value$[rsp]
  0004f	b9 01 00 00 00	 mov	 ecx, 1
  00054	e8 00 00 00 00	 call	 PyTuple_Pack
  00059	48 89 44 24 20	 mov	 QWORD PTR args$[rsp], rax

; 5107 :         if (args == NULL)

  0005e	48 83 7c 24 20
	00		 cmp	 QWORD PTR args$[rsp], 0
  00064	75 0b		 jne	 SHORT $LN5@slot_sq_co

; 5108 :             res = NULL;

  00066	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR res$[rsp], 0

; 5109 :         else {

  0006f	eb 21		 jmp	 SHORT $LN4@slot_sq_co
$LN5@slot_sq_co:

; 5110 :             res = PyObject_Call(func, args, NULL);

  00071	45 33 c0	 xor	 r8d, r8d
  00074	48 8b 54 24 20	 mov	 rdx, QWORD PTR args$[rsp]
  00079	48 8b 4c 24 38	 mov	 rcx, QWORD PTR func$[rsp]
  0007e	e8 00 00 00 00	 call	 PyObject_Call
  00083	48 89 44 24 28	 mov	 QWORD PTR res$[rsp], rax

; 5111 :             Py_DECREF(args);

  00088	48 8b 4c 24 20	 mov	 rcx, QWORD PTR args$[rsp]
  0008d	e8 00 00 00 00	 call	 _Py_DecRef
$LN4@slot_sq_co:

; 5112 :         }
; 5113 :         Py_DECREF(func);

  00092	48 8b 4c 24 38	 mov	 rcx, QWORD PTR func$[rsp]
  00097	e8 00 00 00 00	 call	 _Py_DecRef

; 5114 :         if (res != NULL) {

  0009c	48 83 7c 24 28
	00		 cmp	 QWORD PTR res$[rsp], 0
  000a2	74 18		 je	 SHORT $LN3@slot_sq_co

; 5115 :             result = PyObject_IsTrue(res);

  000a4	48 8b 4c 24 28	 mov	 rcx, QWORD PTR res$[rsp]
  000a9	e8 00 00 00 00	 call	 PyObject_IsTrue
  000ae	89 44 24 30	 mov	 DWORD PTR result$[rsp], eax

; 5116 :             Py_DECREF(res);

  000b2	48 8b 4c 24 28	 mov	 rcx, QWORD PTR res$[rsp]
  000b7	e8 00 00 00 00	 call	 _Py_DecRef
$LN3@slot_sq_co:

; 5117 :         }

  000bc	eb 23		 jmp	 SHORT $LN2@slot_sq_co
$LN6@slot_sq_co:

; 5118 :     }
; 5119 :     else if (! PyErr_Occurred()) {

  000be	e8 00 00 00 00	 call	 PyErr_Occurred
  000c3	48 85 c0	 test	 rax, rax
  000c6	75 19		 jne	 SHORT $LN1@slot_sq_co

; 5120 :         /* Possible results: -1 and 1 */
; 5121 :         result = (int)_PySequence_IterSearch(self, value,
; 5122 :                                          PY_ITERSEARCH_CONTAINS);

  000c8	41 b8 03 00 00
	00		 mov	 r8d, 3
  000ce	48 8b 54 24 58	 mov	 rdx, QWORD PTR value$[rsp]
  000d3	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  000d8	e8 00 00 00 00	 call	 _PySequence_IterSearch
  000dd	89 44 24 30	 mov	 DWORD PTR result$[rsp], eax
$LN1@slot_sq_co:
$LN2@slot_sq_co:

; 5123 :     }
; 5124 :     return result;

  000e1	8b 44 24 30	 mov	 eax, DWORD PTR result$[rsp]

; 5125 : }

  000e5	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e9	c3		 ret	 0
slot_sq_contains ENDP
_TEXT	ENDS
PUBLIC	??_C@_03IELNPCCE@?$CIO?$CJ?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$slot_mp_subscript DD imagerel slot_mp_subscript
	DD	imagerel slot_mp_subscript+70
	DD	imagerel $unwind$slot_mp_subscript
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$slot_mp_subscript DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT ??_C@_03IELNPCCE@?$CIO?$CJ?$AA@
CONST	SEGMENT
??_C@_03IELNPCCE@?$CIO?$CJ?$AA@ DB '(O)', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT slot_mp_subscript
_TEXT	SEGMENT
self$ = 48
arg1$ = 56
slot_mp_subscript PROC					; COMDAT

; 5129 : SLOT1(slot_mp_subscript, "__getitem__", PyObject *, "O")

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?id@?1??slot_mp_subscript@@9@9
  00013	8b c0		 mov	 eax, eax
  00015	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0001b	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00024	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00028	4c 8b 4c 24 38	 mov	 r9, QWORD PTR arg1$[rsp]
  0002d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03IELNPCCE@?$CIO?$CJ?$AA@
  00034	48 8b d0	 mov	 rdx, rax
  00037	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self$[rsp]
  0003c	e8 00 00 00 00	 call	 call_method
  00041	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00045	c3		 ret	 0
slot_mp_subscript ENDP
_TEXT	ENDS
PUBLIC	??_C@_04DEJLHBFK@?$CIOO?$CJ?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$slot_mp_ass_subscript DD imagerel slot_mp_ass_subscript
	DD	imagerel slot_mp_ass_subscript+183
	DD	imagerel $unwind$slot_mp_ass_subscript
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$slot_mp_ass_subscript DD 011301H
	DD	08213H
xdata	ENDS
;	COMDAT ??_C@_04DEJLHBFK@?$CIOO?$CJ?$AA@
CONST	SEGMENT
??_C@_04DEJLHBFK@?$CIOO?$CJ?$AA@ DB '(OO)', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT slot_mp_ass_subscript
_TEXT	SEGMENT
res$ = 48
self$ = 80
key$ = 88
value$ = 96
slot_mp_ass_subscript PROC				; COMDAT

; 5133 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 5134 :     PyObject *res;
; 5135 :     _Py_IDENTIFIER(__delitem__);
; 5136 :     _Py_IDENTIFIER(__setitem__);
; 5137 : 
; 5138 :     if (value == NULL)

  00013	48 83 7c 24 60
	00		 cmp	 QWORD PTR value$[rsp], 0
  00019	75 3a		 jne	 SHORT $LN3@slot_mp_as

; 5139 :         res = call_method(self, &PyId___delitem__, "(O)", key);

  0001b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId___delitem__@?1??slot_mp_ass_subscript@@9@9
  00020	8b c0		 mov	 eax, eax
  00022	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00028	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00031	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00035	4c 8b 4c 24 58	 mov	 r9, QWORD PTR key$[rsp]
  0003a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03IELNPCCE@?$CIO?$CJ?$AA@
  00041	48 8b d0	 mov	 rdx, rax
  00044	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  00049	e8 00 00 00 00	 call	 call_method
  0004e	48 89 44 24 30	 mov	 QWORD PTR res$[rsp], rax

; 5140 :     else

  00053	eb 42		 jmp	 SHORT $LN2@slot_mp_as
$LN3@slot_mp_as:

; 5141 :         res = call_method(self, &PyId___setitem__, "(OO)", key, value);

  00055	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId___setitem__@?1??slot_mp_ass_subscript@@9@9
  0005a	8b c0		 mov	 eax, eax
  0005c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00062	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0006b	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0006f	48 8b 4c 24 60	 mov	 rcx, QWORD PTR value$[rsp]
  00074	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00079	4c 8b 4c 24 58	 mov	 r9, QWORD PTR key$[rsp]
  0007e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_04DEJLHBFK@?$CIOO?$CJ?$AA@
  00085	48 8b d0	 mov	 rdx, rax
  00088	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  0008d	e8 00 00 00 00	 call	 call_method
  00092	48 89 44 24 30	 mov	 QWORD PTR res$[rsp], rax
$LN2@slot_mp_as:

; 5142 : 
; 5143 :     if (res == NULL)

  00097	48 83 7c 24 30
	00		 cmp	 QWORD PTR res$[rsp], 0
  0009d	75 07		 jne	 SHORT $LN1@slot_mp_as

; 5144 :         return -1;

  0009f	b8 ff ff ff ff	 mov	 eax, -1
  000a4	eb 0c		 jmp	 SHORT $LN4@slot_mp_as
$LN1@slot_mp_as:

; 5145 :     Py_DECREF(res);

  000a6	48 8b 4c 24 30	 mov	 rcx, QWORD PTR res$[rsp]
  000ab	e8 00 00 00 00	 call	 _Py_DecRef

; 5146 :     return 0;

  000b0	33 c0		 xor	 eax, eax
$LN4@slot_mp_as:

; 5147 : }

  000b2	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000b6	c3		 ret	 0
slot_mp_ass_subscript ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$slot_nb_add DD imagerel slot_nb_add
	DD	imagerel slot_nb_add+541
	DD	imagerel $unwind$slot_nb_add
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$slot_nb_add DD 010e01H
	DD	0820eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT slot_nb_add
_TEXT	SEGMENT
do_other$ = 32
r$24918 = 40
tv74 = 48
self$ = 80
other$ = 88
slot_nb_add PROC					; COMDAT

; 5149 : SLOT1BIN(slot_nb_add, nb_add, "__add__", "__radd__")

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  0000e	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00013	48 8b 4c 24 58	 mov	 rcx, QWORD PTR other$[rsp]
  00018	48 8b 49 58	 mov	 rcx, QWORD PTR [rcx+88]
  0001c	48 39 48 58	 cmp	 QWORD PTR [rax+88], rcx
  00020	74 39		 je	 SHORT $LN9@slot_nb_ad
  00022	48 8b 44 24 58	 mov	 rax, QWORD PTR other$[rsp]
  00027	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0002b	48 83 b8 b8 00
	00 00 00	 cmp	 QWORD PTR [rax+184], 0
  00033	74 26		 je	 SHORT $LN9@slot_nb_ad
  00035	48 8b 44 24 58	 mov	 rax, QWORD PTR other$[rsp]
  0003a	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0003e	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00045	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:slot_nb_add
  0004c	48 39 08	 cmp	 QWORD PTR [rax], rcx
  0004f	75 0a		 jne	 SHORT $LN9@slot_nb_ad
  00051	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv74[rsp], 1
  00059	eb 08		 jmp	 SHORT $LN10@slot_nb_ad
$LN9@slot_nb_ad:
  0005b	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv74[rsp], 0
$LN10@slot_nb_ad:
  00063	8b 44 24 30	 mov	 eax, DWORD PTR tv74[rsp]
  00067	89 44 24 20	 mov	 DWORD PTR do_other$[rsp], eax
  0006b	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00070	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00074	48 83 b8 b8 00
	00 00 00	 cmp	 QWORD PTR [rax+184], 0
  0007c	0f 84 47 01 00
	00		 je	 $LN6@slot_nb_ad
  00082	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00087	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0008b	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00092	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:slot_nb_add
  00099	48 39 08	 cmp	 QWORD PTR [rax], rcx
  0009c	0f 85 27 01 00
	00		 jne	 $LN6@slot_nb_ad
  000a2	83 7c 24 20 00	 cmp	 DWORD PTR do_other$[rsp], 0
  000a7	0f 84 b1 00 00
	00		 je	 $LN5@slot_nb_ad
  000ad	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  000b2	48 8b 50 58	 mov	 rdx, QWORD PTR [rax+88]
  000b6	48 8b 44 24 58	 mov	 rax, QWORD PTR other$[rsp]
  000bb	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  000bf	e8 00 00 00 00	 call	 PyType_IsSubtype
  000c4	85 c0		 test	 eax, eax
  000c6	0f 84 92 00 00
	00		 je	 $LN5@slot_nb_ad
  000cc	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?rop_id@?1??slot_nb_add@@9@9
  000d1	8b c0		 mov	 eax, eax
  000d3	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  000d9	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  000e2	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  000e6	4c 8b c0	 mov	 r8, rax
  000e9	48 8b 54 24 58	 mov	 rdx, QWORD PTR other$[rsp]
  000ee	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  000f3	e8 00 00 00 00	 call	 method_is_overloaded
  000f8	85 c0		 test	 eax, eax
  000fa	74 62		 je	 SHORT $LN5@slot_nb_ad
  000fc	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?rop_id@?1??slot_nb_add@@9@9
  00101	8b c0		 mov	 eax, eax
  00103	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00109	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00112	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00116	4c 8b 4c 24 50	 mov	 r9, QWORD PTR self$[rsp]
  0011b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03IELNPCCE@?$CIO?$CJ?$AA@
  00122	48 8b d0	 mov	 rdx, rax
  00125	48 8b 4c 24 58	 mov	 rcx, QWORD PTR other$[rsp]
  0012a	e8 00 00 00 00	 call	 call_maybe
  0012f	48 89 44 24 28	 mov	 QWORD PTR r$24918[rsp], rax
  00134	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NotImplementedStruct
  0013b	48 39 44 24 28	 cmp	 QWORD PTR r$24918[rsp], rax
  00140	74 0a		 je	 SHORT $LN4@slot_nb_ad
  00142	48 8b 44 24 28	 mov	 rax, QWORD PTR r$24918[rsp]
  00147	e9 cc 00 00 00	 jmp	 $LN7@slot_nb_ad
$LN4@slot_nb_ad:
  0014c	48 8b 4c 24 28	 mov	 rcx, QWORD PTR r$24918[rsp]
  00151	e8 00 00 00 00	 call	 _Py_DecRef
  00156	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR do_other$[rsp], 0
$LN5@slot_nb_ad:
  0015e	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?op_id@?1??slot_nb_add@@9@9
  00163	8b c0		 mov	 eax, eax
  00165	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0016b	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00174	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00178	4c 8b 4c 24 58	 mov	 r9, QWORD PTR other$[rsp]
  0017d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03IELNPCCE@?$CIO?$CJ?$AA@
  00184	48 8b d0	 mov	 rdx, rax
  00187	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  0018c	e8 00 00 00 00	 call	 call_maybe
  00191	48 89 44 24 28	 mov	 QWORD PTR r$24918[rsp], rax
  00196	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NotImplementedStruct
  0019d	48 39 44 24 28	 cmp	 QWORD PTR r$24918[rsp], rax
  001a2	75 14		 jne	 SHORT $LN2@slot_nb_ad
  001a4	48 8b 44 24 58	 mov	 rax, QWORD PTR other$[rsp]
  001a9	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  001ae	48 8b 49 58	 mov	 rcx, QWORD PTR [rcx+88]
  001b2	48 39 48 58	 cmp	 QWORD PTR [rax+88], rcx
  001b6	75 07		 jne	 SHORT $LN3@slot_nb_ad
$LN2@slot_nb_ad:
  001b8	48 8b 44 24 28	 mov	 rax, QWORD PTR r$24918[rsp]
  001bd	eb 59		 jmp	 SHORT $LN7@slot_nb_ad
$LN3@slot_nb_ad:
  001bf	48 8b 4c 24 28	 mov	 rcx, QWORD PTR r$24918[rsp]
  001c4	e8 00 00 00 00	 call	 _Py_DecRef
$LN6@slot_nb_ad:
  001c9	83 7c 24 20 00	 cmp	 DWORD PTR do_other$[rsp], 0
  001ce	74 35		 je	 SHORT $LN1@slot_nb_ad
  001d0	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?rop_id@?1??slot_nb_add@@9@9
  001d5	8b c0		 mov	 eax, eax
  001d7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  001dd	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  001e6	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  001ea	4c 8b 4c 24 50	 mov	 r9, QWORD PTR self$[rsp]
  001ef	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03IELNPCCE@?$CIO?$CJ?$AA@
  001f6	48 8b d0	 mov	 rdx, rax
  001f9	48 8b 4c 24 58	 mov	 rcx, QWORD PTR other$[rsp]
  001fe	e8 00 00 00 00	 call	 call_maybe
  00203	eb 13		 jmp	 SHORT $LN7@slot_nb_ad
$LN1@slot_nb_ad:
  00205	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NotImplementedStruct
  0020c	e8 00 00 00 00	 call	 _Py_IncRef
  00211	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NotImplementedStruct
$LN7@slot_nb_ad:
  00218	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0021c	c3		 ret	 0
slot_nb_add ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$call_maybe DD imagerel call_maybe
	DD	imagerel call_maybe+301
	DD	imagerel $unwind$call_maybe
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$call_maybe DD 011801H
	DD	08218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT call_maybe
_TEXT	SEGMENT
args$ = 32
retval$ = 40
va$ = 48
func$ = 56
o$ = 80
nameid$ = 88
format$ = 96
call_maybe PROC						; COMDAT

; 1266 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1267 :     va_list va;
; 1268 :     PyObject *args, *func = 0, *retval;

  00018	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR func$[rsp], 0

; 1269 :     va_start(va, format);

  00021	48 8d 44 24 68	 lea	 rax, QWORD PTR format$[rsp+8]
  00026	48 89 44 24 30	 mov	 QWORD PTR va$[rsp], rax

; 1270 : 
; 1271 :     func = lookup_maybe(o, nameid);

  0002b	48 8b 54 24 58	 mov	 rdx, QWORD PTR nameid$[rsp]
  00030	48 8b 4c 24 50	 mov	 rcx, QWORD PTR o$[rsp]
  00035	e8 00 00 00 00	 call	 lookup_maybe
  0003a	48 89 44 24 38	 mov	 QWORD PTR func$[rsp], rax

; 1272 :     if (func == NULL) {

  0003f	48 83 7c 24 38
	00		 cmp	 QWORD PTR func$[rsp], 0
  00045	75 32		 jne	 SHORT $LN5@call_maybe

; 1273 :         va_end(va);

  00047	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR va$[rsp], 0

; 1274 :         if (!PyErr_Occurred())

  00050	e8 00 00 00 00	 call	 PyErr_Occurred
  00055	48 85 c0	 test	 rax, rax
  00058	75 18		 jne	 SHORT $LN4@call_maybe

; 1275 :             Py_RETURN_NOTIMPLEMENTED;

  0005a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NotImplementedStruct
  00061	e8 00 00 00 00	 call	 _Py_IncRef
  00066	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NotImplementedStruct
  0006d	e9 b6 00 00 00	 jmp	 $LN6@call_maybe
$LN4@call_maybe:

; 1276 :         return NULL;

  00072	33 c0		 xor	 eax, eax
  00074	e9 af 00 00 00	 jmp	 $LN6@call_maybe
$LN5@call_maybe:

; 1277 :     }
; 1278 : 
; 1279 :     if (format && *format)

  00079	48 83 7c 24 60
	00		 cmp	 QWORD PTR format$[rsp], 0
  0007f	74 22		 je	 SHORT $LN3@call_maybe
  00081	48 8b 44 24 60	 mov	 rax, QWORD PTR format$[rsp]
  00086	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00089	85 c0		 test	 eax, eax
  0008b	74 16		 je	 SHORT $LN3@call_maybe

; 1280 :         args = Py_VaBuildValue(format, va);

  0008d	48 8b 54 24 30	 mov	 rdx, QWORD PTR va$[rsp]
  00092	48 8b 4c 24 60	 mov	 rcx, QWORD PTR format$[rsp]
  00097	e8 00 00 00 00	 call	 Py_VaBuildValue
  0009c	48 89 44 24 20	 mov	 QWORD PTR args$[rsp], rax

; 1281 :     else

  000a1	eb 0c		 jmp	 SHORT $LN2@call_maybe
$LN3@call_maybe:

; 1282 :         args = PyTuple_New(0);

  000a3	33 c9		 xor	 ecx, ecx
  000a5	e8 00 00 00 00	 call	 PyTuple_New
  000aa	48 89 44 24 20	 mov	 QWORD PTR args$[rsp], rax
$LN2@call_maybe:

; 1283 : 
; 1284 :     va_end(va);

  000af	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR va$[rsp], 0

; 1285 : 
; 1286 :     if (args == NULL)

  000b8	48 83 7c 24 20
	00		 cmp	 QWORD PTR args$[rsp], 0
  000be	75 04		 jne	 SHORT $LN1@call_maybe

; 1287 :         return NULL;

  000c0	33 c0		 xor	 eax, eax
  000c2	eb 64		 jmp	 SHORT $LN6@call_maybe
$LN1@call_maybe:

; 1288 : 
; 1289 :     assert(PyTuple_Check(args));

  000c4	48 8b 44 24 20	 mov	 rax, QWORD PTR args$[rsp]
  000c9	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000cd	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000d3	25 00 00 00 04	 and	 eax, 67108864		; 04000000H
  000d8	85 c0		 test	 eax, eax
  000da	75 1c		 jne	 SHORT $LN8@call_maybe
  000dc	41 b8 09 05 00
	00		 mov	 r8d, 1289		; 00000509H
  000e2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@GJLLIOPA@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAt?$AAy?$AAp?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  000e9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CI@KAJNBGPM@?$AAP?$AAy?$AAT?$AAu?$AAp?$AAl?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAa?$AAr?$AAg?$AAs?$AA?$CJ?$AA?$AA@
  000f0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000f6	33 c0		 xor	 eax, eax
$LN8@call_maybe:

; 1290 :     retval = PyObject_Call(func, args, NULL);

  000f8	45 33 c0	 xor	 r8d, r8d
  000fb	48 8b 54 24 20	 mov	 rdx, QWORD PTR args$[rsp]
  00100	48 8b 4c 24 38	 mov	 rcx, QWORD PTR func$[rsp]
  00105	e8 00 00 00 00	 call	 PyObject_Call
  0010a	48 89 44 24 28	 mov	 QWORD PTR retval$[rsp], rax

; 1291 : 
; 1292 :     Py_DECREF(args);

  0010f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR args$[rsp]
  00114	e8 00 00 00 00	 call	 _Py_DecRef

; 1293 :     Py_DECREF(func);

  00119	48 8b 4c 24 38	 mov	 rcx, QWORD PTR func$[rsp]
  0011e	e8 00 00 00 00	 call	 _Py_DecRef

; 1294 : 
; 1295 :     return retval;

  00123	48 8b 44 24 28	 mov	 rax, QWORD PTR retval$[rsp]
$LN6@call_maybe:

; 1296 : }

  00128	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0012c	c3		 ret	 0
call_maybe ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$method_is_overloaded DD imagerel method_is_overloaded
	DD	imagerel method_is_overloaded+184
	DD	imagerel $unwind$method_is_overloaded
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$method_is_overloaded DD 011301H
	DD	08213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT method_is_overloaded
_TEXT	SEGMENT
a$ = 32
ok$ = 40
b$ = 48
left$ = 80
right$ = 88
name$ = 96
method_is_overloaded PROC				; COMDAT

; 4945 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 4946 :     PyObject *a, *b;
; 4947 :     int ok;
; 4948 : 
; 4949 :     b = _PyObject_GetAttrId((PyObject *)(Py_TYPE(right)), name);

  00013	48 8b 54 24 60	 mov	 rdx, QWORD PTR name$[rsp]
  00018	48 8b 44 24 58	 mov	 rax, QWORD PTR right$[rsp]
  0001d	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  00021	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00026	48 89 44 24 30	 mov	 QWORD PTR b$[rsp], rax

; 4950 :     if (b == NULL) {

  0002b	48 83 7c 24 30
	00		 cmp	 QWORD PTR b$[rsp], 0
  00031	75 09		 jne	 SHORT $LN3@method_is_

; 4951 :         PyErr_Clear();

  00033	e8 00 00 00 00	 call	 PyErr_Clear

; 4952 :         /* If right doesn't have it, it's not overloaded */
; 4953 :         return 0;

  00038	33 c0		 xor	 eax, eax
  0003a	eb 77		 jmp	 SHORT $LN4@method_is_
$LN3@method_is_:

; 4954 :     }
; 4955 : 
; 4956 :     a = _PyObject_GetAttrId((PyObject *)(Py_TYPE(left)), name);

  0003c	48 8b 54 24 60	 mov	 rdx, QWORD PTR name$[rsp]
  00041	48 8b 44 24 50	 mov	 rax, QWORD PTR left$[rsp]
  00046	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  0004a	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  0004f	48 89 44 24 20	 mov	 QWORD PTR a$[rsp], rax

; 4957 :     if (a == NULL) {

  00054	48 83 7c 24 20
	00		 cmp	 QWORD PTR a$[rsp], 0
  0005a	75 16		 jne	 SHORT $LN2@method_is_

; 4958 :         PyErr_Clear();

  0005c	e8 00 00 00 00	 call	 PyErr_Clear

; 4959 :         Py_DECREF(b);

  00061	48 8b 4c 24 30	 mov	 rcx, QWORD PTR b$[rsp]
  00066	e8 00 00 00 00	 call	 _Py_DecRef

; 4960 :         /* If right has it but left doesn't, it's overloaded */
; 4961 :         return 1;

  0006b	b8 01 00 00 00	 mov	 eax, 1
  00070	eb 41		 jmp	 SHORT $LN4@method_is_
$LN2@method_is_:

; 4962 :     }
; 4963 : 
; 4964 :     ok = PyObject_RichCompareBool(a, b, Py_NE);

  00072	41 b8 03 00 00
	00		 mov	 r8d, 3
  00078	48 8b 54 24 30	 mov	 rdx, QWORD PTR b$[rsp]
  0007d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR a$[rsp]
  00082	e8 00 00 00 00	 call	 PyObject_RichCompareBool
  00087	89 44 24 28	 mov	 DWORD PTR ok$[rsp], eax

; 4965 :     Py_DECREF(a);

  0008b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR a$[rsp]
  00090	e8 00 00 00 00	 call	 _Py_DecRef

; 4966 :     Py_DECREF(b);

  00095	48 8b 4c 24 30	 mov	 rcx, QWORD PTR b$[rsp]
  0009a	e8 00 00 00 00	 call	 _Py_DecRef

; 4967 :     if (ok < 0) {

  0009f	83 7c 24 28 00	 cmp	 DWORD PTR ok$[rsp], 0
  000a4	7d 09		 jge	 SHORT $LN1@method_is_

; 4968 :         PyErr_Clear();

  000a6	e8 00 00 00 00	 call	 PyErr_Clear

; 4969 :         return 0;

  000ab	33 c0		 xor	 eax, eax
  000ad	eb 04		 jmp	 SHORT $LN4@method_is_
$LN1@method_is_:

; 4970 :     }
; 4971 : 
; 4972 :     return ok;

  000af	8b 44 24 28	 mov	 eax, DWORD PTR ok$[rsp]
$LN4@method_is_:

; 4973 : }

  000b3	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000b7	c3		 ret	 0
method_is_overloaded ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$slot_nb_subtract DD imagerel slot_nb_subtract
	DD	imagerel slot_nb_subtract+543
	DD	imagerel $unwind$slot_nb_subtract
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$slot_nb_subtract DD 010e01H
	DD	0820eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT slot_nb_subtract
_TEXT	SEGMENT
do_other$ = 32
r$24953 = 40
tv74 = 48
self$ = 80
other$ = 88
slot_nb_subtract PROC					; COMDAT

; 5150 : SLOT1BIN(slot_nb_subtract, nb_subtract, "__sub__", "__rsub__")

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  0000e	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00013	48 8b 4c 24 58	 mov	 rcx, QWORD PTR other$[rsp]
  00018	48 8b 49 58	 mov	 rcx, QWORD PTR [rcx+88]
  0001c	48 39 48 58	 cmp	 QWORD PTR [rax+88], rcx
  00020	74 3a		 je	 SHORT $LN9@slot_nb_su
  00022	48 8b 44 24 58	 mov	 rax, QWORD PTR other$[rsp]
  00027	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0002b	48 83 b8 b8 00
	00 00 00	 cmp	 QWORD PTR [rax+184], 0
  00033	74 27		 je	 SHORT $LN9@slot_nb_su
  00035	48 8b 44 24 58	 mov	 rax, QWORD PTR other$[rsp]
  0003a	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0003e	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00045	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:slot_nb_subtract
  0004c	48 39 48 08	 cmp	 QWORD PTR [rax+8], rcx
  00050	75 0a		 jne	 SHORT $LN9@slot_nb_su
  00052	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv74[rsp], 1
  0005a	eb 08		 jmp	 SHORT $LN10@slot_nb_su
$LN9@slot_nb_su:
  0005c	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv74[rsp], 0
$LN10@slot_nb_su:
  00064	8b 44 24 30	 mov	 eax, DWORD PTR tv74[rsp]
  00068	89 44 24 20	 mov	 DWORD PTR do_other$[rsp], eax
  0006c	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00071	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00075	48 83 b8 b8 00
	00 00 00	 cmp	 QWORD PTR [rax+184], 0
  0007d	0f 84 48 01 00
	00		 je	 $LN6@slot_nb_su
  00083	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00088	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0008c	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00093	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:slot_nb_subtract
  0009a	48 39 48 08	 cmp	 QWORD PTR [rax+8], rcx
  0009e	0f 85 27 01 00
	00		 jne	 $LN6@slot_nb_su
  000a4	83 7c 24 20 00	 cmp	 DWORD PTR do_other$[rsp], 0
  000a9	0f 84 b1 00 00
	00		 je	 $LN5@slot_nb_su
  000af	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  000b4	48 8b 50 58	 mov	 rdx, QWORD PTR [rax+88]
  000b8	48 8b 44 24 58	 mov	 rax, QWORD PTR other$[rsp]
  000bd	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  000c1	e8 00 00 00 00	 call	 PyType_IsSubtype
  000c6	85 c0		 test	 eax, eax
  000c8	0f 84 92 00 00
	00		 je	 $LN5@slot_nb_su
  000ce	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?rop_id@?1??slot_nb_subtract@@9@9
  000d3	8b c0		 mov	 eax, eax
  000d5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  000db	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  000e4	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  000e8	4c 8b c0	 mov	 r8, rax
  000eb	48 8b 54 24 58	 mov	 rdx, QWORD PTR other$[rsp]
  000f0	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  000f5	e8 00 00 00 00	 call	 method_is_overloaded
  000fa	85 c0		 test	 eax, eax
  000fc	74 62		 je	 SHORT $LN5@slot_nb_su
  000fe	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?rop_id@?1??slot_nb_subtract@@9@9
  00103	8b c0		 mov	 eax, eax
  00105	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0010b	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00114	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00118	4c 8b 4c 24 50	 mov	 r9, QWORD PTR self$[rsp]
  0011d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03IELNPCCE@?$CIO?$CJ?$AA@
  00124	48 8b d0	 mov	 rdx, rax
  00127	48 8b 4c 24 58	 mov	 rcx, QWORD PTR other$[rsp]
  0012c	e8 00 00 00 00	 call	 call_maybe
  00131	48 89 44 24 28	 mov	 QWORD PTR r$24953[rsp], rax
  00136	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NotImplementedStruct
  0013d	48 39 44 24 28	 cmp	 QWORD PTR r$24953[rsp], rax
  00142	74 0a		 je	 SHORT $LN4@slot_nb_su
  00144	48 8b 44 24 28	 mov	 rax, QWORD PTR r$24953[rsp]
  00149	e9 cc 00 00 00	 jmp	 $LN7@slot_nb_su
$LN4@slot_nb_su:
  0014e	48 8b 4c 24 28	 mov	 rcx, QWORD PTR r$24953[rsp]
  00153	e8 00 00 00 00	 call	 _Py_DecRef
  00158	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR do_other$[rsp], 0
$LN5@slot_nb_su:
  00160	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?op_id@?1??slot_nb_subtract@@9@9
  00165	8b c0		 mov	 eax, eax
  00167	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0016d	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00176	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0017a	4c 8b 4c 24 58	 mov	 r9, QWORD PTR other$[rsp]
  0017f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03IELNPCCE@?$CIO?$CJ?$AA@
  00186	48 8b d0	 mov	 rdx, rax
  00189	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  0018e	e8 00 00 00 00	 call	 call_maybe
  00193	48 89 44 24 28	 mov	 QWORD PTR r$24953[rsp], rax
  00198	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NotImplementedStruct
  0019f	48 39 44 24 28	 cmp	 QWORD PTR r$24953[rsp], rax
  001a4	75 14		 jne	 SHORT $LN2@slot_nb_su
  001a6	48 8b 44 24 58	 mov	 rax, QWORD PTR other$[rsp]
  001ab	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  001b0	48 8b 49 58	 mov	 rcx, QWORD PTR [rcx+88]
  001b4	48 39 48 58	 cmp	 QWORD PTR [rax+88], rcx
  001b8	75 07		 jne	 SHORT $LN3@slot_nb_su
$LN2@slot_nb_su:
  001ba	48 8b 44 24 28	 mov	 rax, QWORD PTR r$24953[rsp]
  001bf	eb 59		 jmp	 SHORT $LN7@slot_nb_su
$LN3@slot_nb_su:
  001c1	48 8b 4c 24 28	 mov	 rcx, QWORD PTR r$24953[rsp]
  001c6	e8 00 00 00 00	 call	 _Py_DecRef
$LN6@slot_nb_su:
  001cb	83 7c 24 20 00	 cmp	 DWORD PTR do_other$[rsp], 0
  001d0	74 35		 je	 SHORT $LN1@slot_nb_su
  001d2	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?rop_id@?1??slot_nb_subtract@@9@9
  001d7	8b c0		 mov	 eax, eax
  001d9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  001df	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  001e8	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  001ec	4c 8b 4c 24 50	 mov	 r9, QWORD PTR self$[rsp]
  001f1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03IELNPCCE@?$CIO?$CJ?$AA@
  001f8	48 8b d0	 mov	 rdx, rax
  001fb	48 8b 4c 24 58	 mov	 rcx, QWORD PTR other$[rsp]
  00200	e8 00 00 00 00	 call	 call_maybe
  00205	eb 13		 jmp	 SHORT $LN7@slot_nb_su
$LN1@slot_nb_su:
  00207	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NotImplementedStruct
  0020e	e8 00 00 00 00	 call	 _Py_IncRef
  00213	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NotImplementedStruct
$LN7@slot_nb_su:
  0021a	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0021e	c3		 ret	 0
slot_nb_subtract ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$slot_nb_multiply DD imagerel slot_nb_multiply
	DD	imagerel slot_nb_multiply+543
	DD	imagerel $unwind$slot_nb_multiply
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$slot_nb_multiply DD 010e01H
	DD	0820eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT slot_nb_multiply
_TEXT	SEGMENT
do_other$ = 32
r$24988 = 40
tv74 = 48
self$ = 80
other$ = 88
slot_nb_multiply PROC					; COMDAT

; 5151 : SLOT1BIN(slot_nb_multiply, nb_multiply, "__mul__", "__rmul__")

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  0000e	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00013	48 8b 4c 24 58	 mov	 rcx, QWORD PTR other$[rsp]
  00018	48 8b 49 58	 mov	 rcx, QWORD PTR [rcx+88]
  0001c	48 39 48 58	 cmp	 QWORD PTR [rax+88], rcx
  00020	74 3a		 je	 SHORT $LN9@slot_nb_mu
  00022	48 8b 44 24 58	 mov	 rax, QWORD PTR other$[rsp]
  00027	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0002b	48 83 b8 b8 00
	00 00 00	 cmp	 QWORD PTR [rax+184], 0
  00033	74 27		 je	 SHORT $LN9@slot_nb_mu
  00035	48 8b 44 24 58	 mov	 rax, QWORD PTR other$[rsp]
  0003a	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0003e	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00045	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:slot_nb_multiply
  0004c	48 39 48 10	 cmp	 QWORD PTR [rax+16], rcx
  00050	75 0a		 jne	 SHORT $LN9@slot_nb_mu
  00052	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv74[rsp], 1
  0005a	eb 08		 jmp	 SHORT $LN10@slot_nb_mu
$LN9@slot_nb_mu:
  0005c	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv74[rsp], 0
$LN10@slot_nb_mu:
  00064	8b 44 24 30	 mov	 eax, DWORD PTR tv74[rsp]
  00068	89 44 24 20	 mov	 DWORD PTR do_other$[rsp], eax
  0006c	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00071	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00075	48 83 b8 b8 00
	00 00 00	 cmp	 QWORD PTR [rax+184], 0
  0007d	0f 84 48 01 00
	00		 je	 $LN6@slot_nb_mu
  00083	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00088	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0008c	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00093	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:slot_nb_multiply
  0009a	48 39 48 10	 cmp	 QWORD PTR [rax+16], rcx
  0009e	0f 85 27 01 00
	00		 jne	 $LN6@slot_nb_mu
  000a4	83 7c 24 20 00	 cmp	 DWORD PTR do_other$[rsp], 0
  000a9	0f 84 b1 00 00
	00		 je	 $LN5@slot_nb_mu
  000af	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  000b4	48 8b 50 58	 mov	 rdx, QWORD PTR [rax+88]
  000b8	48 8b 44 24 58	 mov	 rax, QWORD PTR other$[rsp]
  000bd	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  000c1	e8 00 00 00 00	 call	 PyType_IsSubtype
  000c6	85 c0		 test	 eax, eax
  000c8	0f 84 92 00 00
	00		 je	 $LN5@slot_nb_mu
  000ce	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?rop_id@?1??slot_nb_multiply@@9@9
  000d3	8b c0		 mov	 eax, eax
  000d5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  000db	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  000e4	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  000e8	4c 8b c0	 mov	 r8, rax
  000eb	48 8b 54 24 58	 mov	 rdx, QWORD PTR other$[rsp]
  000f0	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  000f5	e8 00 00 00 00	 call	 method_is_overloaded
  000fa	85 c0		 test	 eax, eax
  000fc	74 62		 je	 SHORT $LN5@slot_nb_mu
  000fe	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?rop_id@?1??slot_nb_multiply@@9@9
  00103	8b c0		 mov	 eax, eax
  00105	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0010b	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00114	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00118	4c 8b 4c 24 50	 mov	 r9, QWORD PTR self$[rsp]
  0011d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03IELNPCCE@?$CIO?$CJ?$AA@
  00124	48 8b d0	 mov	 rdx, rax
  00127	48 8b 4c 24 58	 mov	 rcx, QWORD PTR other$[rsp]
  0012c	e8 00 00 00 00	 call	 call_maybe
  00131	48 89 44 24 28	 mov	 QWORD PTR r$24988[rsp], rax
  00136	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NotImplementedStruct
  0013d	48 39 44 24 28	 cmp	 QWORD PTR r$24988[rsp], rax
  00142	74 0a		 je	 SHORT $LN4@slot_nb_mu
  00144	48 8b 44 24 28	 mov	 rax, QWORD PTR r$24988[rsp]
  00149	e9 cc 00 00 00	 jmp	 $LN7@slot_nb_mu
$LN4@slot_nb_mu:
  0014e	48 8b 4c 24 28	 mov	 rcx, QWORD PTR r$24988[rsp]
  00153	e8 00 00 00 00	 call	 _Py_DecRef
  00158	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR do_other$[rsp], 0
$LN5@slot_nb_mu:
  00160	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?op_id@?1??slot_nb_multiply@@9@9
  00165	8b c0		 mov	 eax, eax
  00167	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0016d	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00176	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0017a	4c 8b 4c 24 58	 mov	 r9, QWORD PTR other$[rsp]
  0017f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03IELNPCCE@?$CIO?$CJ?$AA@
  00186	48 8b d0	 mov	 rdx, rax
  00189	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  0018e	e8 00 00 00 00	 call	 call_maybe
  00193	48 89 44 24 28	 mov	 QWORD PTR r$24988[rsp], rax
  00198	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NotImplementedStruct
  0019f	48 39 44 24 28	 cmp	 QWORD PTR r$24988[rsp], rax
  001a4	75 14		 jne	 SHORT $LN2@slot_nb_mu
  001a6	48 8b 44 24 58	 mov	 rax, QWORD PTR other$[rsp]
  001ab	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  001b0	48 8b 49 58	 mov	 rcx, QWORD PTR [rcx+88]
  001b4	48 39 48 58	 cmp	 QWORD PTR [rax+88], rcx
  001b8	75 07		 jne	 SHORT $LN3@slot_nb_mu
$LN2@slot_nb_mu:
  001ba	48 8b 44 24 28	 mov	 rax, QWORD PTR r$24988[rsp]
  001bf	eb 59		 jmp	 SHORT $LN7@slot_nb_mu
$LN3@slot_nb_mu:
  001c1	48 8b 4c 24 28	 mov	 rcx, QWORD PTR r$24988[rsp]
  001c6	e8 00 00 00 00	 call	 _Py_DecRef
$LN6@slot_nb_mu:
  001cb	83 7c 24 20 00	 cmp	 DWORD PTR do_other$[rsp], 0
  001d0	74 35		 je	 SHORT $LN1@slot_nb_mu
  001d2	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?rop_id@?1??slot_nb_multiply@@9@9
  001d7	8b c0		 mov	 eax, eax
  001d9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  001df	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  001e8	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  001ec	4c 8b 4c 24 50	 mov	 r9, QWORD PTR self$[rsp]
  001f1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03IELNPCCE@?$CIO?$CJ?$AA@
  001f8	48 8b d0	 mov	 rdx, rax
  001fb	48 8b 4c 24 58	 mov	 rcx, QWORD PTR other$[rsp]
  00200	e8 00 00 00 00	 call	 call_maybe
  00205	eb 13		 jmp	 SHORT $LN7@slot_nb_mu
$LN1@slot_nb_mu:
  00207	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NotImplementedStruct
  0020e	e8 00 00 00 00	 call	 _Py_IncRef
  00213	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NotImplementedStruct
$LN7@slot_nb_mu:
  0021a	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0021e	c3		 ret	 0
slot_nb_multiply ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$slot_nb_remainder DD imagerel slot_nb_remainder
	DD	imagerel slot_nb_remainder+543
	DD	imagerel $unwind$slot_nb_remainder
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$slot_nb_remainder DD 010e01H
	DD	0820eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT slot_nb_remainder
_TEXT	SEGMENT
do_other$ = 32
r$25023 = 40
tv74 = 48
self$ = 80
other$ = 88
slot_nb_remainder PROC					; COMDAT

; 5152 : SLOT1BIN(slot_nb_remainder, nb_remainder, "__mod__", "__rmod__")

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  0000e	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00013	48 8b 4c 24 58	 mov	 rcx, QWORD PTR other$[rsp]
  00018	48 8b 49 58	 mov	 rcx, QWORD PTR [rcx+88]
  0001c	48 39 48 58	 cmp	 QWORD PTR [rax+88], rcx
  00020	74 3a		 je	 SHORT $LN9@slot_nb_re
  00022	48 8b 44 24 58	 mov	 rax, QWORD PTR other$[rsp]
  00027	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0002b	48 83 b8 b8 00
	00 00 00	 cmp	 QWORD PTR [rax+184], 0
  00033	74 27		 je	 SHORT $LN9@slot_nb_re
  00035	48 8b 44 24 58	 mov	 rax, QWORD PTR other$[rsp]
  0003a	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0003e	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00045	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:slot_nb_remainder
  0004c	48 39 48 18	 cmp	 QWORD PTR [rax+24], rcx
  00050	75 0a		 jne	 SHORT $LN9@slot_nb_re
  00052	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv74[rsp], 1
  0005a	eb 08		 jmp	 SHORT $LN10@slot_nb_re
$LN9@slot_nb_re:
  0005c	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv74[rsp], 0
$LN10@slot_nb_re:
  00064	8b 44 24 30	 mov	 eax, DWORD PTR tv74[rsp]
  00068	89 44 24 20	 mov	 DWORD PTR do_other$[rsp], eax
  0006c	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00071	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00075	48 83 b8 b8 00
	00 00 00	 cmp	 QWORD PTR [rax+184], 0
  0007d	0f 84 48 01 00
	00		 je	 $LN6@slot_nb_re
  00083	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00088	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0008c	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00093	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:slot_nb_remainder
  0009a	48 39 48 18	 cmp	 QWORD PTR [rax+24], rcx
  0009e	0f 85 27 01 00
	00		 jne	 $LN6@slot_nb_re
  000a4	83 7c 24 20 00	 cmp	 DWORD PTR do_other$[rsp], 0
  000a9	0f 84 b1 00 00
	00		 je	 $LN5@slot_nb_re
  000af	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  000b4	48 8b 50 58	 mov	 rdx, QWORD PTR [rax+88]
  000b8	48 8b 44 24 58	 mov	 rax, QWORD PTR other$[rsp]
  000bd	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  000c1	e8 00 00 00 00	 call	 PyType_IsSubtype
  000c6	85 c0		 test	 eax, eax
  000c8	0f 84 92 00 00
	00		 je	 $LN5@slot_nb_re
  000ce	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?rop_id@?1??slot_nb_remainder@@9@9
  000d3	8b c0		 mov	 eax, eax
  000d5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  000db	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  000e4	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  000e8	4c 8b c0	 mov	 r8, rax
  000eb	48 8b 54 24 58	 mov	 rdx, QWORD PTR other$[rsp]
  000f0	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  000f5	e8 00 00 00 00	 call	 method_is_overloaded
  000fa	85 c0		 test	 eax, eax
  000fc	74 62		 je	 SHORT $LN5@slot_nb_re
  000fe	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?rop_id@?1??slot_nb_remainder@@9@9
  00103	8b c0		 mov	 eax, eax
  00105	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0010b	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00114	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00118	4c 8b 4c 24 50	 mov	 r9, QWORD PTR self$[rsp]
  0011d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03IELNPCCE@?$CIO?$CJ?$AA@
  00124	48 8b d0	 mov	 rdx, rax
  00127	48 8b 4c 24 58	 mov	 rcx, QWORD PTR other$[rsp]
  0012c	e8 00 00 00 00	 call	 call_maybe
  00131	48 89 44 24 28	 mov	 QWORD PTR r$25023[rsp], rax
  00136	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NotImplementedStruct
  0013d	48 39 44 24 28	 cmp	 QWORD PTR r$25023[rsp], rax
  00142	74 0a		 je	 SHORT $LN4@slot_nb_re
  00144	48 8b 44 24 28	 mov	 rax, QWORD PTR r$25023[rsp]
  00149	e9 cc 00 00 00	 jmp	 $LN7@slot_nb_re
$LN4@slot_nb_re:
  0014e	48 8b 4c 24 28	 mov	 rcx, QWORD PTR r$25023[rsp]
  00153	e8 00 00 00 00	 call	 _Py_DecRef
  00158	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR do_other$[rsp], 0
$LN5@slot_nb_re:
  00160	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?op_id@?1??slot_nb_remainder@@9@9
  00165	8b c0		 mov	 eax, eax
  00167	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0016d	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00176	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0017a	4c 8b 4c 24 58	 mov	 r9, QWORD PTR other$[rsp]
  0017f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03IELNPCCE@?$CIO?$CJ?$AA@
  00186	48 8b d0	 mov	 rdx, rax
  00189	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  0018e	e8 00 00 00 00	 call	 call_maybe
  00193	48 89 44 24 28	 mov	 QWORD PTR r$25023[rsp], rax
  00198	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NotImplementedStruct
  0019f	48 39 44 24 28	 cmp	 QWORD PTR r$25023[rsp], rax
  001a4	75 14		 jne	 SHORT $LN2@slot_nb_re
  001a6	48 8b 44 24 58	 mov	 rax, QWORD PTR other$[rsp]
  001ab	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  001b0	48 8b 49 58	 mov	 rcx, QWORD PTR [rcx+88]
  001b4	48 39 48 58	 cmp	 QWORD PTR [rax+88], rcx
  001b8	75 07		 jne	 SHORT $LN3@slot_nb_re
$LN2@slot_nb_re:
  001ba	48 8b 44 24 28	 mov	 rax, QWORD PTR r$25023[rsp]
  001bf	eb 59		 jmp	 SHORT $LN7@slot_nb_re
$LN3@slot_nb_re:
  001c1	48 8b 4c 24 28	 mov	 rcx, QWORD PTR r$25023[rsp]
  001c6	e8 00 00 00 00	 call	 _Py_DecRef
$LN6@slot_nb_re:
  001cb	83 7c 24 20 00	 cmp	 DWORD PTR do_other$[rsp], 0
  001d0	74 35		 je	 SHORT $LN1@slot_nb_re
  001d2	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?rop_id@?1??slot_nb_remainder@@9@9
  001d7	8b c0		 mov	 eax, eax
  001d9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  001df	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  001e8	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  001ec	4c 8b 4c 24 50	 mov	 r9, QWORD PTR self$[rsp]
  001f1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03IELNPCCE@?$CIO?$CJ?$AA@
  001f8	48 8b d0	 mov	 rdx, rax
  001fb	48 8b 4c 24 58	 mov	 rcx, QWORD PTR other$[rsp]
  00200	e8 00 00 00 00	 call	 call_maybe
  00205	eb 13		 jmp	 SHORT $LN7@slot_nb_re
$LN1@slot_nb_re:
  00207	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NotImplementedStruct
  0020e	e8 00 00 00 00	 call	 _Py_IncRef
  00213	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NotImplementedStruct
$LN7@slot_nb_re:
  0021a	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0021e	c3		 ret	 0
slot_nb_remainder ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$slot_nb_divmod DD imagerel slot_nb_divmod
	DD	imagerel slot_nb_divmod+543
	DD	imagerel $unwind$slot_nb_divmod
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$slot_nb_divmod DD 010e01H
	DD	0820eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT slot_nb_divmod
_TEXT	SEGMENT
do_other$ = 32
r$25058 = 40
tv74 = 48
self$ = 80
other$ = 88
slot_nb_divmod PROC					; COMDAT

; 5153 : SLOT1BIN(slot_nb_divmod, nb_divmod, "__divmod__", "__rdivmod__")

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  0000e	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00013	48 8b 4c 24 58	 mov	 rcx, QWORD PTR other$[rsp]
  00018	48 8b 49 58	 mov	 rcx, QWORD PTR [rcx+88]
  0001c	48 39 48 58	 cmp	 QWORD PTR [rax+88], rcx
  00020	74 3a		 je	 SHORT $LN9@slot_nb_di
  00022	48 8b 44 24 58	 mov	 rax, QWORD PTR other$[rsp]
  00027	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0002b	48 83 b8 b8 00
	00 00 00	 cmp	 QWORD PTR [rax+184], 0
  00033	74 27		 je	 SHORT $LN9@slot_nb_di
  00035	48 8b 44 24 58	 mov	 rax, QWORD PTR other$[rsp]
  0003a	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0003e	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00045	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:slot_nb_divmod
  0004c	48 39 48 20	 cmp	 QWORD PTR [rax+32], rcx
  00050	75 0a		 jne	 SHORT $LN9@slot_nb_di
  00052	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv74[rsp], 1
  0005a	eb 08		 jmp	 SHORT $LN10@slot_nb_di
$LN9@slot_nb_di:
  0005c	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv74[rsp], 0
$LN10@slot_nb_di:
  00064	8b 44 24 30	 mov	 eax, DWORD PTR tv74[rsp]
  00068	89 44 24 20	 mov	 DWORD PTR do_other$[rsp], eax
  0006c	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00071	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00075	48 83 b8 b8 00
	00 00 00	 cmp	 QWORD PTR [rax+184], 0
  0007d	0f 84 48 01 00
	00		 je	 $LN6@slot_nb_di
  00083	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00088	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0008c	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00093	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:slot_nb_divmod
  0009a	48 39 48 20	 cmp	 QWORD PTR [rax+32], rcx
  0009e	0f 85 27 01 00
	00		 jne	 $LN6@slot_nb_di
  000a4	83 7c 24 20 00	 cmp	 DWORD PTR do_other$[rsp], 0
  000a9	0f 84 b1 00 00
	00		 je	 $LN5@slot_nb_di
  000af	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  000b4	48 8b 50 58	 mov	 rdx, QWORD PTR [rax+88]
  000b8	48 8b 44 24 58	 mov	 rax, QWORD PTR other$[rsp]
  000bd	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  000c1	e8 00 00 00 00	 call	 PyType_IsSubtype
  000c6	85 c0		 test	 eax, eax
  000c8	0f 84 92 00 00
	00		 je	 $LN5@slot_nb_di
  000ce	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?rop_id@?1??slot_nb_divmod@@9@9
  000d3	8b c0		 mov	 eax, eax
  000d5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  000db	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  000e4	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  000e8	4c 8b c0	 mov	 r8, rax
  000eb	48 8b 54 24 58	 mov	 rdx, QWORD PTR other$[rsp]
  000f0	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  000f5	e8 00 00 00 00	 call	 method_is_overloaded
  000fa	85 c0		 test	 eax, eax
  000fc	74 62		 je	 SHORT $LN5@slot_nb_di
  000fe	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?rop_id@?1??slot_nb_divmod@@9@9
  00103	8b c0		 mov	 eax, eax
  00105	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0010b	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00114	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00118	4c 8b 4c 24 50	 mov	 r9, QWORD PTR self$[rsp]
  0011d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03IELNPCCE@?$CIO?$CJ?$AA@
  00124	48 8b d0	 mov	 rdx, rax
  00127	48 8b 4c 24 58	 mov	 rcx, QWORD PTR other$[rsp]
  0012c	e8 00 00 00 00	 call	 call_maybe
  00131	48 89 44 24 28	 mov	 QWORD PTR r$25058[rsp], rax
  00136	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NotImplementedStruct
  0013d	48 39 44 24 28	 cmp	 QWORD PTR r$25058[rsp], rax
  00142	74 0a		 je	 SHORT $LN4@slot_nb_di
  00144	48 8b 44 24 28	 mov	 rax, QWORD PTR r$25058[rsp]
  00149	e9 cc 00 00 00	 jmp	 $LN7@slot_nb_di
$LN4@slot_nb_di:
  0014e	48 8b 4c 24 28	 mov	 rcx, QWORD PTR r$25058[rsp]
  00153	e8 00 00 00 00	 call	 _Py_DecRef
  00158	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR do_other$[rsp], 0
$LN5@slot_nb_di:
  00160	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?op_id@?1??slot_nb_divmod@@9@9
  00165	8b c0		 mov	 eax, eax
  00167	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0016d	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00176	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0017a	4c 8b 4c 24 58	 mov	 r9, QWORD PTR other$[rsp]
  0017f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03IELNPCCE@?$CIO?$CJ?$AA@
  00186	48 8b d0	 mov	 rdx, rax
  00189	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  0018e	e8 00 00 00 00	 call	 call_maybe
  00193	48 89 44 24 28	 mov	 QWORD PTR r$25058[rsp], rax
  00198	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NotImplementedStruct
  0019f	48 39 44 24 28	 cmp	 QWORD PTR r$25058[rsp], rax
  001a4	75 14		 jne	 SHORT $LN2@slot_nb_di
  001a6	48 8b 44 24 58	 mov	 rax, QWORD PTR other$[rsp]
  001ab	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  001b0	48 8b 49 58	 mov	 rcx, QWORD PTR [rcx+88]
  001b4	48 39 48 58	 cmp	 QWORD PTR [rax+88], rcx
  001b8	75 07		 jne	 SHORT $LN3@slot_nb_di
$LN2@slot_nb_di:
  001ba	48 8b 44 24 28	 mov	 rax, QWORD PTR r$25058[rsp]
  001bf	eb 59		 jmp	 SHORT $LN7@slot_nb_di
$LN3@slot_nb_di:
  001c1	48 8b 4c 24 28	 mov	 rcx, QWORD PTR r$25058[rsp]
  001c6	e8 00 00 00 00	 call	 _Py_DecRef
$LN6@slot_nb_di:
  001cb	83 7c 24 20 00	 cmp	 DWORD PTR do_other$[rsp], 0
  001d0	74 35		 je	 SHORT $LN1@slot_nb_di
  001d2	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?rop_id@?1??slot_nb_divmod@@9@9
  001d7	8b c0		 mov	 eax, eax
  001d9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  001df	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  001e8	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  001ec	4c 8b 4c 24 50	 mov	 r9, QWORD PTR self$[rsp]
  001f1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03IELNPCCE@?$CIO?$CJ?$AA@
  001f8	48 8b d0	 mov	 rdx, rax
  001fb	48 8b 4c 24 58	 mov	 rcx, QWORD PTR other$[rsp]
  00200	e8 00 00 00 00	 call	 call_maybe
  00205	eb 13		 jmp	 SHORT $LN7@slot_nb_di
$LN1@slot_nb_di:
  00207	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NotImplementedStruct
  0020e	e8 00 00 00 00	 call	 _Py_IncRef
  00213	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NotImplementedStruct
$LN7@slot_nb_di:
  0021a	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0021e	c3		 ret	 0
slot_nb_divmod ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$slot_nb_power DD imagerel slot_nb_power
	DD	imagerel slot_nb_power+188
	DD	imagerel $unwind$slot_nb_power
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$slot_nb_power DD 011301H
	DD	06213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT slot_nb_power
_TEXT	SEGMENT
self$ = 64
other$ = 72
modulus$ = 80
slot_nb_power PROC					; COMDAT

; 5162 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 5163 :     _Py_IDENTIFIER(__pow__);
; 5164 : 
; 5165 :     if (modulus == Py_None)

  00013	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0001a	48 39 44 24 50	 cmp	 QWORD PTR modulus$[rsp], rax
  0001f	75 14		 jne	 SHORT $LN2@slot_nb_po

; 5166 :         return slot_nb_power_binary(self, other);

  00021	48 8b 54 24 48	 mov	 rdx, QWORD PTR other$[rsp]
  00026	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  0002b	e8 00 00 00 00	 call	 slot_nb_power_binary
  00030	e9 82 00 00 00	 jmp	 $LN3@slot_nb_po
$LN2@slot_nb_po:

; 5167 :     /* Three-arg power doesn't use __rpow__.  But ternary_op
; 5168 :        can call this when the second argument's type uses
; 5169 :        slot_nb_power, so check before calling self.__pow__. */
; 5170 :     if (Py_TYPE(self)->tp_as_number != NULL &&
; 5171 :         Py_TYPE(self)->tp_as_number->nb_power == slot_nb_power) {

  00035	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0003a	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0003e	48 83 b8 b8 00
	00 00 00	 cmp	 QWORD PTR [rax+184], 0
  00046	74 5c		 je	 SHORT $LN1@slot_nb_po
  00048	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0004d	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00051	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00058	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:slot_nb_power
  0005f	48 39 48 28	 cmp	 QWORD PTR [rax+40], rcx
  00063	75 3f		 jne	 SHORT $LN1@slot_nb_po

; 5172 :         return call_method(self, &PyId___pow__, "(OO)", other, modulus);

  00065	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId___pow__@?1??slot_nb_power@@9@9
  0006a	8b c0		 mov	 eax, eax
  0006c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00072	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0007b	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0007f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR modulus$[rsp]
  00084	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00089	4c 8b 4c 24 48	 mov	 r9, QWORD PTR other$[rsp]
  0008e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_04DEJLHBFK@?$CIOO?$CJ?$AA@
  00095	48 8b d0	 mov	 rdx, rax
  00098	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  0009d	e8 00 00 00 00	 call	 call_method
  000a2	eb 13		 jmp	 SHORT $LN3@slot_nb_po
$LN1@slot_nb_po:

; 5173 :     }
; 5174 :     Py_RETURN_NOTIMPLEMENTED;

  000a4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NotImplementedStruct
  000ab	e8 00 00 00 00	 call	 _Py_IncRef
  000b0	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NotImplementedStruct
$LN3@slot_nb_po:

; 5175 : }

  000b7	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000bb	c3		 ret	 0
slot_nb_power ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$slot_nb_power_binary DD imagerel slot_nb_power_binary
	DD	imagerel slot_nb_power_binary+543
	DD	imagerel $unwind$slot_nb_power_binary
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$slot_nb_power_binary DD 010e01H
	DD	0820eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT slot_nb_power_binary
_TEXT	SEGMENT
do_other$ = 32
r$25097 = 40
tv74 = 48
self$ = 80
other$ = 88
slot_nb_power_binary PROC				; COMDAT

; 5158 :              nb_power, "__pow__", "__rpow__")

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  0000e	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00013	48 8b 4c 24 58	 mov	 rcx, QWORD PTR other$[rsp]
  00018	48 8b 49 58	 mov	 rcx, QWORD PTR [rcx+88]
  0001c	48 39 48 58	 cmp	 QWORD PTR [rax+88], rcx
  00020	74 3a		 je	 SHORT $LN9@slot_nb_po@2
  00022	48 8b 44 24 58	 mov	 rax, QWORD PTR other$[rsp]
  00027	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0002b	48 83 b8 b8 00
	00 00 00	 cmp	 QWORD PTR [rax+184], 0
  00033	74 27		 je	 SHORT $LN9@slot_nb_po@2
  00035	48 8b 44 24 58	 mov	 rax, QWORD PTR other$[rsp]
  0003a	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0003e	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00045	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:slot_nb_power
  0004c	48 39 48 28	 cmp	 QWORD PTR [rax+40], rcx
  00050	75 0a		 jne	 SHORT $LN9@slot_nb_po@2
  00052	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv74[rsp], 1
  0005a	eb 08		 jmp	 SHORT $LN10@slot_nb_po@2
$LN9@slot_nb_po@2:
  0005c	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv74[rsp], 0
$LN10@slot_nb_po@2:
  00064	8b 44 24 30	 mov	 eax, DWORD PTR tv74[rsp]
  00068	89 44 24 20	 mov	 DWORD PTR do_other$[rsp], eax
  0006c	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00071	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00075	48 83 b8 b8 00
	00 00 00	 cmp	 QWORD PTR [rax+184], 0
  0007d	0f 84 48 01 00
	00		 je	 $LN6@slot_nb_po@2
  00083	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00088	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0008c	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00093	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:slot_nb_power
  0009a	48 39 48 28	 cmp	 QWORD PTR [rax+40], rcx
  0009e	0f 85 27 01 00
	00		 jne	 $LN6@slot_nb_po@2
  000a4	83 7c 24 20 00	 cmp	 DWORD PTR do_other$[rsp], 0
  000a9	0f 84 b1 00 00
	00		 je	 $LN5@slot_nb_po@2
  000af	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  000b4	48 8b 50 58	 mov	 rdx, QWORD PTR [rax+88]
  000b8	48 8b 44 24 58	 mov	 rax, QWORD PTR other$[rsp]
  000bd	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  000c1	e8 00 00 00 00	 call	 PyType_IsSubtype
  000c6	85 c0		 test	 eax, eax
  000c8	0f 84 92 00 00
	00		 je	 $LN5@slot_nb_po@2
  000ce	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?rop_id@?1??slot_nb_power_binary@@9@9
  000d3	8b c0		 mov	 eax, eax
  000d5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  000db	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  000e4	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  000e8	4c 8b c0	 mov	 r8, rax
  000eb	48 8b 54 24 58	 mov	 rdx, QWORD PTR other$[rsp]
  000f0	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  000f5	e8 00 00 00 00	 call	 method_is_overloaded
  000fa	85 c0		 test	 eax, eax
  000fc	74 62		 je	 SHORT $LN5@slot_nb_po@2
  000fe	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?rop_id@?1??slot_nb_power_binary@@9@9
  00103	8b c0		 mov	 eax, eax
  00105	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0010b	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00114	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00118	4c 8b 4c 24 50	 mov	 r9, QWORD PTR self$[rsp]
  0011d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03IELNPCCE@?$CIO?$CJ?$AA@
  00124	48 8b d0	 mov	 rdx, rax
  00127	48 8b 4c 24 58	 mov	 rcx, QWORD PTR other$[rsp]
  0012c	e8 00 00 00 00	 call	 call_maybe
  00131	48 89 44 24 28	 mov	 QWORD PTR r$25097[rsp], rax
  00136	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NotImplementedStruct
  0013d	48 39 44 24 28	 cmp	 QWORD PTR r$25097[rsp], rax
  00142	74 0a		 je	 SHORT $LN4@slot_nb_po@2
  00144	48 8b 44 24 28	 mov	 rax, QWORD PTR r$25097[rsp]
  00149	e9 cc 00 00 00	 jmp	 $LN7@slot_nb_po@2
$LN4@slot_nb_po@2:
  0014e	48 8b 4c 24 28	 mov	 rcx, QWORD PTR r$25097[rsp]
  00153	e8 00 00 00 00	 call	 _Py_DecRef
  00158	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR do_other$[rsp], 0
$LN5@slot_nb_po@2:
  00160	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?op_id@?1??slot_nb_power_binary@@9@9
  00165	8b c0		 mov	 eax, eax
  00167	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0016d	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00176	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0017a	4c 8b 4c 24 58	 mov	 r9, QWORD PTR other$[rsp]
  0017f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03IELNPCCE@?$CIO?$CJ?$AA@
  00186	48 8b d0	 mov	 rdx, rax
  00189	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  0018e	e8 00 00 00 00	 call	 call_maybe
  00193	48 89 44 24 28	 mov	 QWORD PTR r$25097[rsp], rax
  00198	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NotImplementedStruct
  0019f	48 39 44 24 28	 cmp	 QWORD PTR r$25097[rsp], rax
  001a4	75 14		 jne	 SHORT $LN2@slot_nb_po@2
  001a6	48 8b 44 24 58	 mov	 rax, QWORD PTR other$[rsp]
  001ab	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  001b0	48 8b 49 58	 mov	 rcx, QWORD PTR [rcx+88]
  001b4	48 39 48 58	 cmp	 QWORD PTR [rax+88], rcx
  001b8	75 07		 jne	 SHORT $LN3@slot_nb_po@2
$LN2@slot_nb_po@2:
  001ba	48 8b 44 24 28	 mov	 rax, QWORD PTR r$25097[rsp]
  001bf	eb 59		 jmp	 SHORT $LN7@slot_nb_po@2
$LN3@slot_nb_po@2:
  001c1	48 8b 4c 24 28	 mov	 rcx, QWORD PTR r$25097[rsp]
  001c6	e8 00 00 00 00	 call	 _Py_DecRef
$LN6@slot_nb_po@2:
  001cb	83 7c 24 20 00	 cmp	 DWORD PTR do_other$[rsp], 0
  001d0	74 35		 je	 SHORT $LN1@slot_nb_po@2
  001d2	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?rop_id@?1??slot_nb_power_binary@@9@9
  001d7	8b c0		 mov	 eax, eax
  001d9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  001df	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  001e8	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  001ec	4c 8b 4c 24 50	 mov	 r9, QWORD PTR self$[rsp]
  001f1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03IELNPCCE@?$CIO?$CJ?$AA@
  001f8	48 8b d0	 mov	 rdx, rax
  001fb	48 8b 4c 24 58	 mov	 rcx, QWORD PTR other$[rsp]
  00200	e8 00 00 00 00	 call	 call_maybe
  00205	eb 13		 jmp	 SHORT $LN7@slot_nb_po@2
$LN1@slot_nb_po@2:
  00207	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NotImplementedStruct
  0020e	e8 00 00 00 00	 call	 _Py_IncRef
  00213	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NotImplementedStruct
$LN7@slot_nb_po@2:
  0021a	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0021e	c3		 ret	 0
slot_nb_power_binary ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$slot_nb_negative DD imagerel slot_nb_negative
	DD	imagerel slot_nb_negative+60
	DD	imagerel $unwind$slot_nb_negative
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$slot_nb_negative DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT slot_nb_negative
_TEXT	SEGMENT
self$ = 48
slot_nb_negative PROC					; COMDAT

; 5177 : SLOT0(slot_nb_negative, "__neg__")

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?id@?1??slot_nb_negative@@9@9
  0000e	8b c0		 mov	 eax, eax
  00010	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00016	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0001f	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00023	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_02HCKGKOFO@?$CI?$CJ?$AA@
  0002a	48 8b d0	 mov	 rdx, rax
  0002d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self$[rsp]
  00032	e8 00 00 00 00	 call	 call_method
  00037	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003b	c3		 ret	 0
slot_nb_negative ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$slot_nb_positive DD imagerel slot_nb_positive
	DD	imagerel slot_nb_positive+60
	DD	imagerel $unwind$slot_nb_positive
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$slot_nb_positive DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT slot_nb_positive
_TEXT	SEGMENT
self$ = 48
slot_nb_positive PROC					; COMDAT

; 5178 : SLOT0(slot_nb_positive, "__pos__")

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?id@?1??slot_nb_positive@@9@9
  0000e	8b c0		 mov	 eax, eax
  00010	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00016	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0001f	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00023	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_02HCKGKOFO@?$CI?$CJ?$AA@
  0002a	48 8b d0	 mov	 rdx, rax
  0002d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self$[rsp]
  00032	e8 00 00 00 00	 call	 call_method
  00037	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003b	c3		 ret	 0
slot_nb_positive ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$slot_nb_absolute DD imagerel slot_nb_absolute
	DD	imagerel slot_nb_absolute+60
	DD	imagerel $unwind$slot_nb_absolute
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$slot_nb_absolute DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT slot_nb_absolute
_TEXT	SEGMENT
self$ = 48
slot_nb_absolute PROC					; COMDAT

; 5179 : SLOT0(slot_nb_absolute, "__abs__")

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?id@?1??slot_nb_absolute@@9@9
  0000e	8b c0		 mov	 eax, eax
  00010	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00016	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0001f	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00023	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_02HCKGKOFO@?$CI?$CJ?$AA@
  0002a	48 8b d0	 mov	 rdx, rax
  0002d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self$[rsp]
  00032	e8 00 00 00 00	 call	 call_method
  00037	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003b	c3		 ret	 0
slot_nb_absolute ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CJ@KHBICFOO@__bool__?5should?5return?5bool?0?5ret@ ; `string'
EXTRN	PyBool_Type:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$slot_nb_bool DD imagerel slot_nb_bool
	DD	imagerel slot_nb_bool+385
	DD	imagerel $unwind$slot_nb_bool
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$slot_nb_bool DD 010901H
	DD	0a209H
xdata	ENDS
;	COMDAT ??_C@_0CJ@KHBICFOO@__bool__?5should?5return?5bool?0?5ret@
CONST	SEGMENT
??_C@_0CJ@KHBICFOO@__bool__?5should?5return?5bool?0?5ret@ DB '__bool__ sh'
	DB	'ould return bool, returned %s', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT slot_nb_bool
_TEXT	SEGMENT
args$ = 32
result$ = 40
using_len$ = 44
func$ = 48
temp$25166 = 56
tv88 = 64
self$ = 96
slot_nb_bool PROC					; COMDAT

; 5183 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 5184 :     PyObject *func, *args;
; 5185 :     int result = -1;

  00009	c7 44 24 28 ff
	ff ff ff	 mov	 DWORD PTR result$[rsp], -1

; 5186 :     int using_len = 0;

  00011	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR using_len$[rsp], 0

; 5187 :     _Py_IDENTIFIER(__len__);
; 5188 :     _Py_IDENTIFIER(__bool__);
; 5189 : 
; 5190 :     func = lookup_maybe(self, &PyId___bool__);

  00019	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId___bool__@?1??slot_nb_bool@@9@9
  0001e	8b c0		 mov	 eax, eax
  00020	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00026	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0002f	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00033	48 8b d0	 mov	 rdx, rax
  00036	48 8b 4c 24 60	 mov	 rcx, QWORD PTR self$[rsp]
  0003b	e8 00 00 00 00	 call	 lookup_maybe
  00040	48 89 44 24 30	 mov	 QWORD PTR func$[rsp], rax

; 5191 :     if (func == NULL) {

  00045	48 83 7c 24 30
	00		 cmp	 QWORD PTR func$[rsp], 0
  0004b	75 75		 jne	 SHORT $LN9@slot_nb_bo

; 5192 :         if (PyErr_Occurred())

  0004d	e8 00 00 00 00	 call	 PyErr_Occurred
  00052	48 85 c0	 test	 rax, rax
  00055	74 0a		 je	 SHORT $LN8@slot_nb_bo

; 5193 :             return -1;

  00057	b8 ff ff ff ff	 mov	 eax, -1
  0005c	e9 1b 01 00 00	 jmp	 $LN10@slot_nb_bo
$LN8@slot_nb_bo:

; 5194 :         func = lookup_maybe(self, &PyId___len__);

  00061	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId___len__@?1??slot_nb_bool@@9@9
  00066	8b c0		 mov	 eax, eax
  00068	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0006e	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00077	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0007b	48 8b d0	 mov	 rdx, rax
  0007e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR self$[rsp]
  00083	e8 00 00 00 00	 call	 lookup_maybe
  00088	48 89 44 24 30	 mov	 QWORD PTR func$[rsp], rax

; 5195 :         if (func == NULL)

  0008d	48 83 7c 24 30
	00		 cmp	 QWORD PTR func$[rsp], 0
  00093	75 25		 jne	 SHORT $LN7@slot_nb_bo

; 5196 :             return PyErr_Occurred() ? -1 : 1;

  00095	e8 00 00 00 00	 call	 PyErr_Occurred
  0009a	48 85 c0	 test	 rax, rax
  0009d	74 0a		 je	 SHORT $LN12@slot_nb_bo
  0009f	c7 44 24 40 ff
	ff ff ff	 mov	 DWORD PTR tv88[rsp], -1
  000a7	eb 08		 jmp	 SHORT $LN13@slot_nb_bo
$LN12@slot_nb_bo:
  000a9	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv88[rsp], 1
$LN13@slot_nb_bo:
  000b1	8b 44 24 40	 mov	 eax, DWORD PTR tv88[rsp]
  000b5	e9 c2 00 00 00	 jmp	 $LN10@slot_nb_bo
$LN7@slot_nb_bo:

; 5197 :         using_len = 1;

  000ba	c7 44 24 2c 01
	00 00 00	 mov	 DWORD PTR using_len$[rsp], 1
$LN9@slot_nb_bo:

; 5198 :     }
; 5199 :     args = PyTuple_New(0);

  000c2	33 c9		 xor	 ecx, ecx
  000c4	e8 00 00 00 00	 call	 PyTuple_New
  000c9	48 89 44 24 20	 mov	 QWORD PTR args$[rsp], rax

; 5200 :     if (args != NULL) {

  000ce	48 83 7c 24 20
	00		 cmp	 QWORD PTR args$[rsp], 0
  000d4	0f 84 94 00 00
	00		 je	 $LN6@slot_nb_bo

; 5201 :         PyObject *temp = PyObject_Call(func, args, NULL);

  000da	45 33 c0	 xor	 r8d, r8d
  000dd	48 8b 54 24 20	 mov	 rdx, QWORD PTR args$[rsp]
  000e2	48 8b 4c 24 30	 mov	 rcx, QWORD PTR func$[rsp]
  000e7	e8 00 00 00 00	 call	 PyObject_Call
  000ec	48 89 44 24 38	 mov	 QWORD PTR temp$25166[rsp], rax

; 5202 :         Py_DECREF(args);

  000f1	48 8b 4c 24 20	 mov	 rcx, QWORD PTR args$[rsp]
  000f6	e8 00 00 00 00	 call	 _Py_DecRef

; 5203 :         if (temp != NULL) {

  000fb	48 83 7c 24 38
	00		 cmp	 QWORD PTR temp$25166[rsp], 0
  00101	74 6b		 je	 SHORT $LN5@slot_nb_bo

; 5204 :             if (using_len) {

  00103	83 7c 24 2c 00	 cmp	 DWORD PTR using_len$[rsp], 0
  00108	74 10		 je	 SHORT $LN4@slot_nb_bo

; 5205 :                 /* enforced by slot_nb_len */
; 5206 :                 result = PyObject_IsTrue(temp);

  0010a	48 8b 4c 24 38	 mov	 rcx, QWORD PTR temp$25166[rsp]
  0010f	e8 00 00 00 00	 call	 PyObject_IsTrue
  00114	89 44 24 28	 mov	 DWORD PTR result$[rsp], eax
  00118	eb 4a		 jmp	 SHORT $LN3@slot_nb_bo
$LN4@slot_nb_bo:

; 5207 :             }
; 5208 :             else if (PyBool_Check(temp)) {

  0011a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyBool_Type
  00121	48 8b 4c 24 38	 mov	 rcx, QWORD PTR temp$25166[rsp]
  00126	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0012a	75 10		 jne	 SHORT $LN2@slot_nb_bo

; 5209 :                 result = PyObject_IsTrue(temp);

  0012c	48 8b 4c 24 38	 mov	 rcx, QWORD PTR temp$25166[rsp]
  00131	e8 00 00 00 00	 call	 PyObject_IsTrue
  00136	89 44 24 28	 mov	 DWORD PTR result$[rsp], eax

; 5210 :             }
; 5211 :             else {

  0013a	eb 28		 jmp	 SHORT $LN1@slot_nb_bo
$LN2@slot_nb_bo:

; 5212 :                 PyErr_Format(PyExc_TypeError,
; 5213 :                              "__bool__ should return "
; 5214 :                              "bool, returned %s",
; 5215 :                              Py_TYPE(temp)->tp_name);

  0013c	48 8b 44 24 38	 mov	 rax, QWORD PTR temp$25166[rsp]
  00141	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00145	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  00149	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CJ@KHBICFOO@__bool__?5should?5return?5bool?0?5ret@
  00150	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00157	e8 00 00 00 00	 call	 PyErr_Format

; 5216 :                 result = -1;

  0015c	c7 44 24 28 ff
	ff ff ff	 mov	 DWORD PTR result$[rsp], -1
$LN1@slot_nb_bo:
$LN3@slot_nb_bo:

; 5217 :             }
; 5218 :             Py_DECREF(temp);

  00164	48 8b 4c 24 38	 mov	 rcx, QWORD PTR temp$25166[rsp]
  00169	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@slot_nb_bo:
$LN6@slot_nb_bo:

; 5219 :         }
; 5220 :     }
; 5221 :     Py_DECREF(func);

  0016e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR func$[rsp]
  00173	e8 00 00 00 00	 call	 _Py_DecRef

; 5222 :     return result;

  00178	8b 44 24 28	 mov	 eax, DWORD PTR result$[rsp]
$LN10@slot_nb_bo:

; 5223 : }

  0017c	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00180	c3		 ret	 0
slot_nb_bool ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$slot_nb_index DD imagerel slot_nb_index
	DD	imagerel slot_nb_index+60
	DD	imagerel $unwind$slot_nb_index
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$slot_nb_index DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT slot_nb_index
_TEXT	SEGMENT
self$ = 48
slot_nb_index PROC					; COMDAT

; 5228 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 5229 :     _Py_IDENTIFIER(__index__);
; 5230 :     return call_method(self, &PyId___index__, "()");

  00009	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId___index__@?1??slot_nb_index@@9@9
  0000e	8b c0		 mov	 eax, eax
  00010	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00016	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0001f	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00023	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_02HCKGKOFO@?$CI?$CJ?$AA@
  0002a	48 8b d0	 mov	 rdx, rax
  0002d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self$[rsp]
  00032	e8 00 00 00 00	 call	 call_method

; 5231 : }

  00037	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003b	c3		 ret	 0
slot_nb_index ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$slot_nb_invert DD imagerel slot_nb_invert
	DD	imagerel slot_nb_invert+60
	DD	imagerel $unwind$slot_nb_invert
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$slot_nb_invert DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT slot_nb_invert
_TEXT	SEGMENT
self$ = 48
slot_nb_invert PROC					; COMDAT

; 5234 : SLOT0(slot_nb_invert, "__invert__")

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?id@?1??slot_nb_invert@@9@9
  0000e	8b c0		 mov	 eax, eax
  00010	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00016	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0001f	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00023	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_02HCKGKOFO@?$CI?$CJ?$AA@
  0002a	48 8b d0	 mov	 rdx, rax
  0002d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self$[rsp]
  00032	e8 00 00 00 00	 call	 call_method
  00037	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003b	c3		 ret	 0
slot_nb_invert ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$slot_nb_lshift DD imagerel slot_nb_lshift
	DD	imagerel slot_nb_lshift+543
	DD	imagerel $unwind$slot_nb_lshift
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$slot_nb_lshift DD 010e01H
	DD	0820eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT slot_nb_lshift
_TEXT	SEGMENT
do_other$ = 32
r$25216 = 40
tv74 = 48
self$ = 80
other$ = 88
slot_nb_lshift PROC					; COMDAT

; 5235 : SLOT1BIN(slot_nb_lshift, nb_lshift, "__lshift__", "__rlshift__")

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  0000e	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00013	48 8b 4c 24 58	 mov	 rcx, QWORD PTR other$[rsp]
  00018	48 8b 49 58	 mov	 rcx, QWORD PTR [rcx+88]
  0001c	48 39 48 58	 cmp	 QWORD PTR [rax+88], rcx
  00020	74 3a		 je	 SHORT $LN9@slot_nb_ls
  00022	48 8b 44 24 58	 mov	 rax, QWORD PTR other$[rsp]
  00027	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0002b	48 83 b8 b8 00
	00 00 00	 cmp	 QWORD PTR [rax+184], 0
  00033	74 27		 je	 SHORT $LN9@slot_nb_ls
  00035	48 8b 44 24 58	 mov	 rax, QWORD PTR other$[rsp]
  0003a	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0003e	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00045	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:slot_nb_lshift
  0004c	48 39 48 58	 cmp	 QWORD PTR [rax+88], rcx
  00050	75 0a		 jne	 SHORT $LN9@slot_nb_ls
  00052	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv74[rsp], 1
  0005a	eb 08		 jmp	 SHORT $LN10@slot_nb_ls
$LN9@slot_nb_ls:
  0005c	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv74[rsp], 0
$LN10@slot_nb_ls:
  00064	8b 44 24 30	 mov	 eax, DWORD PTR tv74[rsp]
  00068	89 44 24 20	 mov	 DWORD PTR do_other$[rsp], eax
  0006c	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00071	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00075	48 83 b8 b8 00
	00 00 00	 cmp	 QWORD PTR [rax+184], 0
  0007d	0f 84 48 01 00
	00		 je	 $LN6@slot_nb_ls
  00083	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00088	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0008c	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00093	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:slot_nb_lshift
  0009a	48 39 48 58	 cmp	 QWORD PTR [rax+88], rcx
  0009e	0f 85 27 01 00
	00		 jne	 $LN6@slot_nb_ls
  000a4	83 7c 24 20 00	 cmp	 DWORD PTR do_other$[rsp], 0
  000a9	0f 84 b1 00 00
	00		 je	 $LN5@slot_nb_ls
  000af	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  000b4	48 8b 50 58	 mov	 rdx, QWORD PTR [rax+88]
  000b8	48 8b 44 24 58	 mov	 rax, QWORD PTR other$[rsp]
  000bd	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  000c1	e8 00 00 00 00	 call	 PyType_IsSubtype
  000c6	85 c0		 test	 eax, eax
  000c8	0f 84 92 00 00
	00		 je	 $LN5@slot_nb_ls
  000ce	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?rop_id@?1??slot_nb_lshift@@9@9
  000d3	8b c0		 mov	 eax, eax
  000d5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  000db	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  000e4	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  000e8	4c 8b c0	 mov	 r8, rax
  000eb	48 8b 54 24 58	 mov	 rdx, QWORD PTR other$[rsp]
  000f0	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  000f5	e8 00 00 00 00	 call	 method_is_overloaded
  000fa	85 c0		 test	 eax, eax
  000fc	74 62		 je	 SHORT $LN5@slot_nb_ls
  000fe	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?rop_id@?1??slot_nb_lshift@@9@9
  00103	8b c0		 mov	 eax, eax
  00105	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0010b	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00114	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00118	4c 8b 4c 24 50	 mov	 r9, QWORD PTR self$[rsp]
  0011d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03IELNPCCE@?$CIO?$CJ?$AA@
  00124	48 8b d0	 mov	 rdx, rax
  00127	48 8b 4c 24 58	 mov	 rcx, QWORD PTR other$[rsp]
  0012c	e8 00 00 00 00	 call	 call_maybe
  00131	48 89 44 24 28	 mov	 QWORD PTR r$25216[rsp], rax
  00136	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NotImplementedStruct
  0013d	48 39 44 24 28	 cmp	 QWORD PTR r$25216[rsp], rax
  00142	74 0a		 je	 SHORT $LN4@slot_nb_ls
  00144	48 8b 44 24 28	 mov	 rax, QWORD PTR r$25216[rsp]
  00149	e9 cc 00 00 00	 jmp	 $LN7@slot_nb_ls
$LN4@slot_nb_ls:
  0014e	48 8b 4c 24 28	 mov	 rcx, QWORD PTR r$25216[rsp]
  00153	e8 00 00 00 00	 call	 _Py_DecRef
  00158	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR do_other$[rsp], 0
$LN5@slot_nb_ls:
  00160	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?op_id@?1??slot_nb_lshift@@9@9
  00165	8b c0		 mov	 eax, eax
  00167	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0016d	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00176	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0017a	4c 8b 4c 24 58	 mov	 r9, QWORD PTR other$[rsp]
  0017f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03IELNPCCE@?$CIO?$CJ?$AA@
  00186	48 8b d0	 mov	 rdx, rax
  00189	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  0018e	e8 00 00 00 00	 call	 call_maybe
  00193	48 89 44 24 28	 mov	 QWORD PTR r$25216[rsp], rax
  00198	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NotImplementedStruct
  0019f	48 39 44 24 28	 cmp	 QWORD PTR r$25216[rsp], rax
  001a4	75 14		 jne	 SHORT $LN2@slot_nb_ls
  001a6	48 8b 44 24 58	 mov	 rax, QWORD PTR other$[rsp]
  001ab	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  001b0	48 8b 49 58	 mov	 rcx, QWORD PTR [rcx+88]
  001b4	48 39 48 58	 cmp	 QWORD PTR [rax+88], rcx
  001b8	75 07		 jne	 SHORT $LN3@slot_nb_ls
$LN2@slot_nb_ls:
  001ba	48 8b 44 24 28	 mov	 rax, QWORD PTR r$25216[rsp]
  001bf	eb 59		 jmp	 SHORT $LN7@slot_nb_ls
$LN3@slot_nb_ls:
  001c1	48 8b 4c 24 28	 mov	 rcx, QWORD PTR r$25216[rsp]
  001c6	e8 00 00 00 00	 call	 _Py_DecRef
$LN6@slot_nb_ls:
  001cb	83 7c 24 20 00	 cmp	 DWORD PTR do_other$[rsp], 0
  001d0	74 35		 je	 SHORT $LN1@slot_nb_ls
  001d2	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?rop_id@?1??slot_nb_lshift@@9@9
  001d7	8b c0		 mov	 eax, eax
  001d9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  001df	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  001e8	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  001ec	4c 8b 4c 24 50	 mov	 r9, QWORD PTR self$[rsp]
  001f1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03IELNPCCE@?$CIO?$CJ?$AA@
  001f8	48 8b d0	 mov	 rdx, rax
  001fb	48 8b 4c 24 58	 mov	 rcx, QWORD PTR other$[rsp]
  00200	e8 00 00 00 00	 call	 call_maybe
  00205	eb 13		 jmp	 SHORT $LN7@slot_nb_ls
$LN1@slot_nb_ls:
  00207	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NotImplementedStruct
  0020e	e8 00 00 00 00	 call	 _Py_IncRef
  00213	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NotImplementedStruct
$LN7@slot_nb_ls:
  0021a	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0021e	c3		 ret	 0
slot_nb_lshift ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$slot_nb_rshift DD imagerel slot_nb_rshift
	DD	imagerel slot_nb_rshift+543
	DD	imagerel $unwind$slot_nb_rshift
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$slot_nb_rshift DD 010e01H
	DD	0820eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT slot_nb_rshift
_TEXT	SEGMENT
do_other$ = 32
r$25251 = 40
tv74 = 48
self$ = 80
other$ = 88
slot_nb_rshift PROC					; COMDAT

; 5236 : SLOT1BIN(slot_nb_rshift, nb_rshift, "__rshift__", "__rrshift__")

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  0000e	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00013	48 8b 4c 24 58	 mov	 rcx, QWORD PTR other$[rsp]
  00018	48 8b 49 58	 mov	 rcx, QWORD PTR [rcx+88]
  0001c	48 39 48 58	 cmp	 QWORD PTR [rax+88], rcx
  00020	74 3a		 je	 SHORT $LN9@slot_nb_rs
  00022	48 8b 44 24 58	 mov	 rax, QWORD PTR other$[rsp]
  00027	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0002b	48 83 b8 b8 00
	00 00 00	 cmp	 QWORD PTR [rax+184], 0
  00033	74 27		 je	 SHORT $LN9@slot_nb_rs
  00035	48 8b 44 24 58	 mov	 rax, QWORD PTR other$[rsp]
  0003a	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0003e	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00045	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:slot_nb_rshift
  0004c	48 39 48 60	 cmp	 QWORD PTR [rax+96], rcx
  00050	75 0a		 jne	 SHORT $LN9@slot_nb_rs
  00052	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv74[rsp], 1
  0005a	eb 08		 jmp	 SHORT $LN10@slot_nb_rs
$LN9@slot_nb_rs:
  0005c	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv74[rsp], 0
$LN10@slot_nb_rs:
  00064	8b 44 24 30	 mov	 eax, DWORD PTR tv74[rsp]
  00068	89 44 24 20	 mov	 DWORD PTR do_other$[rsp], eax
  0006c	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00071	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00075	48 83 b8 b8 00
	00 00 00	 cmp	 QWORD PTR [rax+184], 0
  0007d	0f 84 48 01 00
	00		 je	 $LN6@slot_nb_rs
  00083	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00088	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0008c	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00093	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:slot_nb_rshift
  0009a	48 39 48 60	 cmp	 QWORD PTR [rax+96], rcx
  0009e	0f 85 27 01 00
	00		 jne	 $LN6@slot_nb_rs
  000a4	83 7c 24 20 00	 cmp	 DWORD PTR do_other$[rsp], 0
  000a9	0f 84 b1 00 00
	00		 je	 $LN5@slot_nb_rs
  000af	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  000b4	48 8b 50 58	 mov	 rdx, QWORD PTR [rax+88]
  000b8	48 8b 44 24 58	 mov	 rax, QWORD PTR other$[rsp]
  000bd	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  000c1	e8 00 00 00 00	 call	 PyType_IsSubtype
  000c6	85 c0		 test	 eax, eax
  000c8	0f 84 92 00 00
	00		 je	 $LN5@slot_nb_rs
  000ce	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?rop_id@?1??slot_nb_rshift@@9@9
  000d3	8b c0		 mov	 eax, eax
  000d5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  000db	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  000e4	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  000e8	4c 8b c0	 mov	 r8, rax
  000eb	48 8b 54 24 58	 mov	 rdx, QWORD PTR other$[rsp]
  000f0	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  000f5	e8 00 00 00 00	 call	 method_is_overloaded
  000fa	85 c0		 test	 eax, eax
  000fc	74 62		 je	 SHORT $LN5@slot_nb_rs
  000fe	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?rop_id@?1??slot_nb_rshift@@9@9
  00103	8b c0		 mov	 eax, eax
  00105	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0010b	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00114	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00118	4c 8b 4c 24 50	 mov	 r9, QWORD PTR self$[rsp]
  0011d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03IELNPCCE@?$CIO?$CJ?$AA@
  00124	48 8b d0	 mov	 rdx, rax
  00127	48 8b 4c 24 58	 mov	 rcx, QWORD PTR other$[rsp]
  0012c	e8 00 00 00 00	 call	 call_maybe
  00131	48 89 44 24 28	 mov	 QWORD PTR r$25251[rsp], rax
  00136	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NotImplementedStruct
  0013d	48 39 44 24 28	 cmp	 QWORD PTR r$25251[rsp], rax
  00142	74 0a		 je	 SHORT $LN4@slot_nb_rs
  00144	48 8b 44 24 28	 mov	 rax, QWORD PTR r$25251[rsp]
  00149	e9 cc 00 00 00	 jmp	 $LN7@slot_nb_rs
$LN4@slot_nb_rs:
  0014e	48 8b 4c 24 28	 mov	 rcx, QWORD PTR r$25251[rsp]
  00153	e8 00 00 00 00	 call	 _Py_DecRef
  00158	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR do_other$[rsp], 0
$LN5@slot_nb_rs:
  00160	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?op_id@?1??slot_nb_rshift@@9@9
  00165	8b c0		 mov	 eax, eax
  00167	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0016d	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00176	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0017a	4c 8b 4c 24 58	 mov	 r9, QWORD PTR other$[rsp]
  0017f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03IELNPCCE@?$CIO?$CJ?$AA@
  00186	48 8b d0	 mov	 rdx, rax
  00189	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  0018e	e8 00 00 00 00	 call	 call_maybe
  00193	48 89 44 24 28	 mov	 QWORD PTR r$25251[rsp], rax
  00198	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NotImplementedStruct
  0019f	48 39 44 24 28	 cmp	 QWORD PTR r$25251[rsp], rax
  001a4	75 14		 jne	 SHORT $LN2@slot_nb_rs
  001a6	48 8b 44 24 58	 mov	 rax, QWORD PTR other$[rsp]
  001ab	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  001b0	48 8b 49 58	 mov	 rcx, QWORD PTR [rcx+88]
  001b4	48 39 48 58	 cmp	 QWORD PTR [rax+88], rcx
  001b8	75 07		 jne	 SHORT $LN3@slot_nb_rs
$LN2@slot_nb_rs:
  001ba	48 8b 44 24 28	 mov	 rax, QWORD PTR r$25251[rsp]
  001bf	eb 59		 jmp	 SHORT $LN7@slot_nb_rs
$LN3@slot_nb_rs:
  001c1	48 8b 4c 24 28	 mov	 rcx, QWORD PTR r$25251[rsp]
  001c6	e8 00 00 00 00	 call	 _Py_DecRef
$LN6@slot_nb_rs:
  001cb	83 7c 24 20 00	 cmp	 DWORD PTR do_other$[rsp], 0
  001d0	74 35		 je	 SHORT $LN1@slot_nb_rs
  001d2	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?rop_id@?1??slot_nb_rshift@@9@9
  001d7	8b c0		 mov	 eax, eax
  001d9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  001df	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  001e8	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  001ec	4c 8b 4c 24 50	 mov	 r9, QWORD PTR self$[rsp]
  001f1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03IELNPCCE@?$CIO?$CJ?$AA@
  001f8	48 8b d0	 mov	 rdx, rax
  001fb	48 8b 4c 24 58	 mov	 rcx, QWORD PTR other$[rsp]
  00200	e8 00 00 00 00	 call	 call_maybe
  00205	eb 13		 jmp	 SHORT $LN7@slot_nb_rs
$LN1@slot_nb_rs:
  00207	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NotImplementedStruct
  0020e	e8 00 00 00 00	 call	 _Py_IncRef
  00213	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NotImplementedStruct
$LN7@slot_nb_rs:
  0021a	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0021e	c3		 ret	 0
slot_nb_rshift ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$slot_nb_and DD imagerel slot_nb_and
	DD	imagerel slot_nb_and+543
	DD	imagerel $unwind$slot_nb_and
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$slot_nb_and DD 010e01H
	DD	0820eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT slot_nb_and
_TEXT	SEGMENT
do_other$ = 32
r$25286 = 40
tv74 = 48
self$ = 80
other$ = 88
slot_nb_and PROC					; COMDAT

; 5237 : SLOT1BIN(slot_nb_and, nb_and, "__and__", "__rand__")

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  0000e	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00013	48 8b 4c 24 58	 mov	 rcx, QWORD PTR other$[rsp]
  00018	48 8b 49 58	 mov	 rcx, QWORD PTR [rcx+88]
  0001c	48 39 48 58	 cmp	 QWORD PTR [rax+88], rcx
  00020	74 3a		 je	 SHORT $LN9@slot_nb_an
  00022	48 8b 44 24 58	 mov	 rax, QWORD PTR other$[rsp]
  00027	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0002b	48 83 b8 b8 00
	00 00 00	 cmp	 QWORD PTR [rax+184], 0
  00033	74 27		 je	 SHORT $LN9@slot_nb_an
  00035	48 8b 44 24 58	 mov	 rax, QWORD PTR other$[rsp]
  0003a	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0003e	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00045	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:slot_nb_and
  0004c	48 39 48 68	 cmp	 QWORD PTR [rax+104], rcx
  00050	75 0a		 jne	 SHORT $LN9@slot_nb_an
  00052	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv74[rsp], 1
  0005a	eb 08		 jmp	 SHORT $LN10@slot_nb_an
$LN9@slot_nb_an:
  0005c	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv74[rsp], 0
$LN10@slot_nb_an:
  00064	8b 44 24 30	 mov	 eax, DWORD PTR tv74[rsp]
  00068	89 44 24 20	 mov	 DWORD PTR do_other$[rsp], eax
  0006c	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00071	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00075	48 83 b8 b8 00
	00 00 00	 cmp	 QWORD PTR [rax+184], 0
  0007d	0f 84 48 01 00
	00		 je	 $LN6@slot_nb_an
  00083	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00088	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0008c	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00093	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:slot_nb_and
  0009a	48 39 48 68	 cmp	 QWORD PTR [rax+104], rcx
  0009e	0f 85 27 01 00
	00		 jne	 $LN6@slot_nb_an
  000a4	83 7c 24 20 00	 cmp	 DWORD PTR do_other$[rsp], 0
  000a9	0f 84 b1 00 00
	00		 je	 $LN5@slot_nb_an
  000af	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  000b4	48 8b 50 58	 mov	 rdx, QWORD PTR [rax+88]
  000b8	48 8b 44 24 58	 mov	 rax, QWORD PTR other$[rsp]
  000bd	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  000c1	e8 00 00 00 00	 call	 PyType_IsSubtype
  000c6	85 c0		 test	 eax, eax
  000c8	0f 84 92 00 00
	00		 je	 $LN5@slot_nb_an
  000ce	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?rop_id@?1??slot_nb_and@@9@9
  000d3	8b c0		 mov	 eax, eax
  000d5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  000db	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  000e4	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  000e8	4c 8b c0	 mov	 r8, rax
  000eb	48 8b 54 24 58	 mov	 rdx, QWORD PTR other$[rsp]
  000f0	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  000f5	e8 00 00 00 00	 call	 method_is_overloaded
  000fa	85 c0		 test	 eax, eax
  000fc	74 62		 je	 SHORT $LN5@slot_nb_an
  000fe	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?rop_id@?1??slot_nb_and@@9@9
  00103	8b c0		 mov	 eax, eax
  00105	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0010b	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00114	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00118	4c 8b 4c 24 50	 mov	 r9, QWORD PTR self$[rsp]
  0011d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03IELNPCCE@?$CIO?$CJ?$AA@
  00124	48 8b d0	 mov	 rdx, rax
  00127	48 8b 4c 24 58	 mov	 rcx, QWORD PTR other$[rsp]
  0012c	e8 00 00 00 00	 call	 call_maybe
  00131	48 89 44 24 28	 mov	 QWORD PTR r$25286[rsp], rax
  00136	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NotImplementedStruct
  0013d	48 39 44 24 28	 cmp	 QWORD PTR r$25286[rsp], rax
  00142	74 0a		 je	 SHORT $LN4@slot_nb_an
  00144	48 8b 44 24 28	 mov	 rax, QWORD PTR r$25286[rsp]
  00149	e9 cc 00 00 00	 jmp	 $LN7@slot_nb_an
$LN4@slot_nb_an:
  0014e	48 8b 4c 24 28	 mov	 rcx, QWORD PTR r$25286[rsp]
  00153	e8 00 00 00 00	 call	 _Py_DecRef
  00158	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR do_other$[rsp], 0
$LN5@slot_nb_an:
  00160	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?op_id@?1??slot_nb_and@@9@9
  00165	8b c0		 mov	 eax, eax
  00167	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0016d	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00176	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0017a	4c 8b 4c 24 58	 mov	 r9, QWORD PTR other$[rsp]
  0017f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03IELNPCCE@?$CIO?$CJ?$AA@
  00186	48 8b d0	 mov	 rdx, rax
  00189	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  0018e	e8 00 00 00 00	 call	 call_maybe
  00193	48 89 44 24 28	 mov	 QWORD PTR r$25286[rsp], rax
  00198	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NotImplementedStruct
  0019f	48 39 44 24 28	 cmp	 QWORD PTR r$25286[rsp], rax
  001a4	75 14		 jne	 SHORT $LN2@slot_nb_an
  001a6	48 8b 44 24 58	 mov	 rax, QWORD PTR other$[rsp]
  001ab	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  001b0	48 8b 49 58	 mov	 rcx, QWORD PTR [rcx+88]
  001b4	48 39 48 58	 cmp	 QWORD PTR [rax+88], rcx
  001b8	75 07		 jne	 SHORT $LN3@slot_nb_an
$LN2@slot_nb_an:
  001ba	48 8b 44 24 28	 mov	 rax, QWORD PTR r$25286[rsp]
  001bf	eb 59		 jmp	 SHORT $LN7@slot_nb_an
$LN3@slot_nb_an:
  001c1	48 8b 4c 24 28	 mov	 rcx, QWORD PTR r$25286[rsp]
  001c6	e8 00 00 00 00	 call	 _Py_DecRef
$LN6@slot_nb_an:
  001cb	83 7c 24 20 00	 cmp	 DWORD PTR do_other$[rsp], 0
  001d0	74 35		 je	 SHORT $LN1@slot_nb_an
  001d2	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?rop_id@?1??slot_nb_and@@9@9
  001d7	8b c0		 mov	 eax, eax
  001d9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  001df	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  001e8	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  001ec	4c 8b 4c 24 50	 mov	 r9, QWORD PTR self$[rsp]
  001f1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03IELNPCCE@?$CIO?$CJ?$AA@
  001f8	48 8b d0	 mov	 rdx, rax
  001fb	48 8b 4c 24 58	 mov	 rcx, QWORD PTR other$[rsp]
  00200	e8 00 00 00 00	 call	 call_maybe
  00205	eb 13		 jmp	 SHORT $LN7@slot_nb_an
$LN1@slot_nb_an:
  00207	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NotImplementedStruct
  0020e	e8 00 00 00 00	 call	 _Py_IncRef
  00213	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NotImplementedStruct
$LN7@slot_nb_an:
  0021a	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0021e	c3		 ret	 0
slot_nb_and ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$slot_nb_xor DD imagerel slot_nb_xor
	DD	imagerel slot_nb_xor+543
	DD	imagerel $unwind$slot_nb_xor
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$slot_nb_xor DD 010e01H
	DD	0820eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT slot_nb_xor
_TEXT	SEGMENT
do_other$ = 32
r$25321 = 40
tv74 = 48
self$ = 80
other$ = 88
slot_nb_xor PROC					; COMDAT

; 5238 : SLOT1BIN(slot_nb_xor, nb_xor, "__xor__", "__rxor__")

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  0000e	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00013	48 8b 4c 24 58	 mov	 rcx, QWORD PTR other$[rsp]
  00018	48 8b 49 58	 mov	 rcx, QWORD PTR [rcx+88]
  0001c	48 39 48 58	 cmp	 QWORD PTR [rax+88], rcx
  00020	74 3a		 je	 SHORT $LN9@slot_nb_xo
  00022	48 8b 44 24 58	 mov	 rax, QWORD PTR other$[rsp]
  00027	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0002b	48 83 b8 b8 00
	00 00 00	 cmp	 QWORD PTR [rax+184], 0
  00033	74 27		 je	 SHORT $LN9@slot_nb_xo
  00035	48 8b 44 24 58	 mov	 rax, QWORD PTR other$[rsp]
  0003a	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0003e	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00045	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:slot_nb_xor
  0004c	48 39 48 70	 cmp	 QWORD PTR [rax+112], rcx
  00050	75 0a		 jne	 SHORT $LN9@slot_nb_xo
  00052	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv74[rsp], 1
  0005a	eb 08		 jmp	 SHORT $LN10@slot_nb_xo
$LN9@slot_nb_xo:
  0005c	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv74[rsp], 0
$LN10@slot_nb_xo:
  00064	8b 44 24 30	 mov	 eax, DWORD PTR tv74[rsp]
  00068	89 44 24 20	 mov	 DWORD PTR do_other$[rsp], eax
  0006c	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00071	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00075	48 83 b8 b8 00
	00 00 00	 cmp	 QWORD PTR [rax+184], 0
  0007d	0f 84 48 01 00
	00		 je	 $LN6@slot_nb_xo
  00083	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00088	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0008c	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00093	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:slot_nb_xor
  0009a	48 39 48 70	 cmp	 QWORD PTR [rax+112], rcx
  0009e	0f 85 27 01 00
	00		 jne	 $LN6@slot_nb_xo
  000a4	83 7c 24 20 00	 cmp	 DWORD PTR do_other$[rsp], 0
  000a9	0f 84 b1 00 00
	00		 je	 $LN5@slot_nb_xo
  000af	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  000b4	48 8b 50 58	 mov	 rdx, QWORD PTR [rax+88]
  000b8	48 8b 44 24 58	 mov	 rax, QWORD PTR other$[rsp]
  000bd	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  000c1	e8 00 00 00 00	 call	 PyType_IsSubtype
  000c6	85 c0		 test	 eax, eax
  000c8	0f 84 92 00 00
	00		 je	 $LN5@slot_nb_xo
  000ce	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?rop_id@?1??slot_nb_xor@@9@9
  000d3	8b c0		 mov	 eax, eax
  000d5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  000db	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  000e4	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  000e8	4c 8b c0	 mov	 r8, rax
  000eb	48 8b 54 24 58	 mov	 rdx, QWORD PTR other$[rsp]
  000f0	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  000f5	e8 00 00 00 00	 call	 method_is_overloaded
  000fa	85 c0		 test	 eax, eax
  000fc	74 62		 je	 SHORT $LN5@slot_nb_xo
  000fe	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?rop_id@?1??slot_nb_xor@@9@9
  00103	8b c0		 mov	 eax, eax
  00105	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0010b	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00114	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00118	4c 8b 4c 24 50	 mov	 r9, QWORD PTR self$[rsp]
  0011d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03IELNPCCE@?$CIO?$CJ?$AA@
  00124	48 8b d0	 mov	 rdx, rax
  00127	48 8b 4c 24 58	 mov	 rcx, QWORD PTR other$[rsp]
  0012c	e8 00 00 00 00	 call	 call_maybe
  00131	48 89 44 24 28	 mov	 QWORD PTR r$25321[rsp], rax
  00136	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NotImplementedStruct
  0013d	48 39 44 24 28	 cmp	 QWORD PTR r$25321[rsp], rax
  00142	74 0a		 je	 SHORT $LN4@slot_nb_xo
  00144	48 8b 44 24 28	 mov	 rax, QWORD PTR r$25321[rsp]
  00149	e9 cc 00 00 00	 jmp	 $LN7@slot_nb_xo
$LN4@slot_nb_xo:
  0014e	48 8b 4c 24 28	 mov	 rcx, QWORD PTR r$25321[rsp]
  00153	e8 00 00 00 00	 call	 _Py_DecRef
  00158	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR do_other$[rsp], 0
$LN5@slot_nb_xo:
  00160	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?op_id@?1??slot_nb_xor@@9@9
  00165	8b c0		 mov	 eax, eax
  00167	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0016d	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00176	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0017a	4c 8b 4c 24 58	 mov	 r9, QWORD PTR other$[rsp]
  0017f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03IELNPCCE@?$CIO?$CJ?$AA@
  00186	48 8b d0	 mov	 rdx, rax
  00189	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  0018e	e8 00 00 00 00	 call	 call_maybe
  00193	48 89 44 24 28	 mov	 QWORD PTR r$25321[rsp], rax
  00198	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NotImplementedStruct
  0019f	48 39 44 24 28	 cmp	 QWORD PTR r$25321[rsp], rax
  001a4	75 14		 jne	 SHORT $LN2@slot_nb_xo
  001a6	48 8b 44 24 58	 mov	 rax, QWORD PTR other$[rsp]
  001ab	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  001b0	48 8b 49 58	 mov	 rcx, QWORD PTR [rcx+88]
  001b4	48 39 48 58	 cmp	 QWORD PTR [rax+88], rcx
  001b8	75 07		 jne	 SHORT $LN3@slot_nb_xo
$LN2@slot_nb_xo:
  001ba	48 8b 44 24 28	 mov	 rax, QWORD PTR r$25321[rsp]
  001bf	eb 59		 jmp	 SHORT $LN7@slot_nb_xo
$LN3@slot_nb_xo:
  001c1	48 8b 4c 24 28	 mov	 rcx, QWORD PTR r$25321[rsp]
  001c6	e8 00 00 00 00	 call	 _Py_DecRef
$LN6@slot_nb_xo:
  001cb	83 7c 24 20 00	 cmp	 DWORD PTR do_other$[rsp], 0
  001d0	74 35		 je	 SHORT $LN1@slot_nb_xo
  001d2	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?rop_id@?1??slot_nb_xor@@9@9
  001d7	8b c0		 mov	 eax, eax
  001d9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  001df	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  001e8	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  001ec	4c 8b 4c 24 50	 mov	 r9, QWORD PTR self$[rsp]
  001f1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03IELNPCCE@?$CIO?$CJ?$AA@
  001f8	48 8b d0	 mov	 rdx, rax
  001fb	48 8b 4c 24 58	 mov	 rcx, QWORD PTR other$[rsp]
  00200	e8 00 00 00 00	 call	 call_maybe
  00205	eb 13		 jmp	 SHORT $LN7@slot_nb_xo
$LN1@slot_nb_xo:
  00207	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NotImplementedStruct
  0020e	e8 00 00 00 00	 call	 _Py_IncRef
  00213	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NotImplementedStruct
$LN7@slot_nb_xo:
  0021a	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0021e	c3		 ret	 0
slot_nb_xor ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$slot_nb_or DD imagerel slot_nb_or
	DD	imagerel slot_nb_or+543
	DD	imagerel $unwind$slot_nb_or
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$slot_nb_or DD 010e01H
	DD	0820eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT slot_nb_or
_TEXT	SEGMENT
do_other$ = 32
r$25356 = 40
tv74 = 48
self$ = 80
other$ = 88
slot_nb_or PROC						; COMDAT

; 5239 : SLOT1BIN(slot_nb_or, nb_or, "__or__", "__ror__")

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  0000e	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00013	48 8b 4c 24 58	 mov	 rcx, QWORD PTR other$[rsp]
  00018	48 8b 49 58	 mov	 rcx, QWORD PTR [rcx+88]
  0001c	48 39 48 58	 cmp	 QWORD PTR [rax+88], rcx
  00020	74 3a		 je	 SHORT $LN9@slot_nb_or
  00022	48 8b 44 24 58	 mov	 rax, QWORD PTR other$[rsp]
  00027	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0002b	48 83 b8 b8 00
	00 00 00	 cmp	 QWORD PTR [rax+184], 0
  00033	74 27		 je	 SHORT $LN9@slot_nb_or
  00035	48 8b 44 24 58	 mov	 rax, QWORD PTR other$[rsp]
  0003a	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0003e	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00045	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:slot_nb_or
  0004c	48 39 48 78	 cmp	 QWORD PTR [rax+120], rcx
  00050	75 0a		 jne	 SHORT $LN9@slot_nb_or
  00052	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv74[rsp], 1
  0005a	eb 08		 jmp	 SHORT $LN10@slot_nb_or
$LN9@slot_nb_or:
  0005c	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv74[rsp], 0
$LN10@slot_nb_or:
  00064	8b 44 24 30	 mov	 eax, DWORD PTR tv74[rsp]
  00068	89 44 24 20	 mov	 DWORD PTR do_other$[rsp], eax
  0006c	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00071	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00075	48 83 b8 b8 00
	00 00 00	 cmp	 QWORD PTR [rax+184], 0
  0007d	0f 84 48 01 00
	00		 je	 $LN6@slot_nb_or
  00083	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00088	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0008c	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00093	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:slot_nb_or
  0009a	48 39 48 78	 cmp	 QWORD PTR [rax+120], rcx
  0009e	0f 85 27 01 00
	00		 jne	 $LN6@slot_nb_or
  000a4	83 7c 24 20 00	 cmp	 DWORD PTR do_other$[rsp], 0
  000a9	0f 84 b1 00 00
	00		 je	 $LN5@slot_nb_or
  000af	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  000b4	48 8b 50 58	 mov	 rdx, QWORD PTR [rax+88]
  000b8	48 8b 44 24 58	 mov	 rax, QWORD PTR other$[rsp]
  000bd	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  000c1	e8 00 00 00 00	 call	 PyType_IsSubtype
  000c6	85 c0		 test	 eax, eax
  000c8	0f 84 92 00 00
	00		 je	 $LN5@slot_nb_or
  000ce	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?rop_id@?1??slot_nb_or@@9@9
  000d3	8b c0		 mov	 eax, eax
  000d5	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  000db	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  000e4	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  000e8	4c 8b c0	 mov	 r8, rax
  000eb	48 8b 54 24 58	 mov	 rdx, QWORD PTR other$[rsp]
  000f0	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  000f5	e8 00 00 00 00	 call	 method_is_overloaded
  000fa	85 c0		 test	 eax, eax
  000fc	74 62		 je	 SHORT $LN5@slot_nb_or
  000fe	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?rop_id@?1??slot_nb_or@@9@9
  00103	8b c0		 mov	 eax, eax
  00105	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0010b	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00114	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00118	4c 8b 4c 24 50	 mov	 r9, QWORD PTR self$[rsp]
  0011d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03IELNPCCE@?$CIO?$CJ?$AA@
  00124	48 8b d0	 mov	 rdx, rax
  00127	48 8b 4c 24 58	 mov	 rcx, QWORD PTR other$[rsp]
  0012c	e8 00 00 00 00	 call	 call_maybe
  00131	48 89 44 24 28	 mov	 QWORD PTR r$25356[rsp], rax
  00136	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NotImplementedStruct
  0013d	48 39 44 24 28	 cmp	 QWORD PTR r$25356[rsp], rax
  00142	74 0a		 je	 SHORT $LN4@slot_nb_or
  00144	48 8b 44 24 28	 mov	 rax, QWORD PTR r$25356[rsp]
  00149	e9 cc 00 00 00	 jmp	 $LN7@slot_nb_or
$LN4@slot_nb_or:
  0014e	48 8b 4c 24 28	 mov	 rcx, QWORD PTR r$25356[rsp]
  00153	e8 00 00 00 00	 call	 _Py_DecRef
  00158	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR do_other$[rsp], 0
$LN5@slot_nb_or:
  00160	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?op_id@?1??slot_nb_or@@9@9
  00165	8b c0		 mov	 eax, eax
  00167	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0016d	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00176	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0017a	4c 8b 4c 24 58	 mov	 r9, QWORD PTR other$[rsp]
  0017f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03IELNPCCE@?$CIO?$CJ?$AA@
  00186	48 8b d0	 mov	 rdx, rax
  00189	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  0018e	e8 00 00 00 00	 call	 call_maybe
  00193	48 89 44 24 28	 mov	 QWORD PTR r$25356[rsp], rax
  00198	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NotImplementedStruct
  0019f	48 39 44 24 28	 cmp	 QWORD PTR r$25356[rsp], rax
  001a4	75 14		 jne	 SHORT $LN2@slot_nb_or
  001a6	48 8b 44 24 58	 mov	 rax, QWORD PTR other$[rsp]
  001ab	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  001b0	48 8b 49 58	 mov	 rcx, QWORD PTR [rcx+88]
  001b4	48 39 48 58	 cmp	 QWORD PTR [rax+88], rcx
  001b8	75 07		 jne	 SHORT $LN3@slot_nb_or
$LN2@slot_nb_or:
  001ba	48 8b 44 24 28	 mov	 rax, QWORD PTR r$25356[rsp]
  001bf	eb 59		 jmp	 SHORT $LN7@slot_nb_or
$LN3@slot_nb_or:
  001c1	48 8b 4c 24 28	 mov	 rcx, QWORD PTR r$25356[rsp]
  001c6	e8 00 00 00 00	 call	 _Py_DecRef
$LN6@slot_nb_or:
  001cb	83 7c 24 20 00	 cmp	 DWORD PTR do_other$[rsp], 0
  001d0	74 35		 je	 SHORT $LN1@slot_nb_or
  001d2	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?rop_id@?1??slot_nb_or@@9@9
  001d7	8b c0		 mov	 eax, eax
  001d9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  001df	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  001e8	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  001ec	4c 8b 4c 24 50	 mov	 r9, QWORD PTR self$[rsp]
  001f1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03IELNPCCE@?$CIO?$CJ?$AA@
  001f8	48 8b d0	 mov	 rdx, rax
  001fb	48 8b 4c 24 58	 mov	 rcx, QWORD PTR other$[rsp]
  00200	e8 00 00 00 00	 call	 call_maybe
  00205	eb 13		 jmp	 SHORT $LN7@slot_nb_or
$LN1@slot_nb_or:
  00207	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NotImplementedStruct
  0020e	e8 00 00 00 00	 call	 _Py_IncRef
  00213	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NotImplementedStruct
$LN7@slot_nb_or:
  0021a	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0021e	c3		 ret	 0
slot_nb_or ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$slot_nb_int DD imagerel slot_nb_int
	DD	imagerel slot_nb_int+60
	DD	imagerel $unwind$slot_nb_int
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$slot_nb_int DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT slot_nb_int
_TEXT	SEGMENT
self$ = 48
slot_nb_int PROC					; COMDAT

; 5241 : SLOT0(slot_nb_int, "__int__")

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?id@?1??slot_nb_int@@9@9
  0000e	8b c0		 mov	 eax, eax
  00010	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00016	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0001f	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00023	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_02HCKGKOFO@?$CI?$CJ?$AA@
  0002a	48 8b d0	 mov	 rdx, rax
  0002d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self$[rsp]
  00032	e8 00 00 00 00	 call	 call_method
  00037	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003b	c3		 ret	 0
slot_nb_int ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$slot_nb_float DD imagerel slot_nb_float
	DD	imagerel slot_nb_float+60
	DD	imagerel $unwind$slot_nb_float
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$slot_nb_float DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT slot_nb_float
_TEXT	SEGMENT
self$ = 48
slot_nb_float PROC					; COMDAT

; 5242 : SLOT0(slot_nb_float, "__float__")

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  00009	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?id@?1??slot_nb_float@@9@9
  0000e	8b c0		 mov	 eax, eax
  00010	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00016	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0001f	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00023	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_02HCKGKOFO@?$CI?$CJ?$AA@
  0002a	48 8b d0	 mov	 rdx, rax
  0002d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self$[rsp]
  00032	e8 00 00 00 00	 call	 call_method
  00037	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003b	c3		 ret	 0
slot_nb_float ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$slot_nb_inplace_add DD imagerel slot_nb_inplace_add
	DD	imagerel slot_nb_inplace_add+70
	DD	imagerel $unwind$slot_nb_inplace_add
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$slot_nb_inplace_add DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT slot_nb_inplace_add
_TEXT	SEGMENT
self$ = 48
arg1$ = 56
slot_nb_inplace_add PROC				; COMDAT

; 5243 : SLOT1(slot_nb_inplace_add, "__iadd__", PyObject *, "O")

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?id@?1??slot_nb_inplace_add@@9@9
  00013	8b c0		 mov	 eax, eax
  00015	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0001b	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00024	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00028	4c 8b 4c 24 38	 mov	 r9, QWORD PTR arg1$[rsp]
  0002d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03IELNPCCE@?$CIO?$CJ?$AA@
  00034	48 8b d0	 mov	 rdx, rax
  00037	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self$[rsp]
  0003c	e8 00 00 00 00	 call	 call_method
  00041	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00045	c3		 ret	 0
slot_nb_inplace_add ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$slot_nb_inplace_subtract DD imagerel slot_nb_inplace_subtract
	DD	imagerel slot_nb_inplace_subtract+70
	DD	imagerel $unwind$slot_nb_inplace_subtract
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$slot_nb_inplace_subtract DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT slot_nb_inplace_subtract
_TEXT	SEGMENT
self$ = 48
arg1$ = 56
slot_nb_inplace_subtract PROC				; COMDAT

; 5244 : SLOT1(slot_nb_inplace_subtract, "__isub__", PyObject *, "O")

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?id@?1??slot_nb_inplace_subtract@@9@9
  00013	8b c0		 mov	 eax, eax
  00015	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0001b	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00024	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00028	4c 8b 4c 24 38	 mov	 r9, QWORD PTR arg1$[rsp]
  0002d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03IELNPCCE@?$CIO?$CJ?$AA@
  00034	48 8b d0	 mov	 rdx, rax
  00037	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self$[rsp]
  0003c	e8 00 00 00 00	 call	 call_method
  00041	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00045	c3		 ret	 0
slot_nb_inplace_subtract ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$slot_nb_inplace_multiply DD imagerel slot_nb_inplace_multiply
	DD	imagerel slot_nb_inplace_multiply+70
	DD	imagerel $unwind$slot_nb_inplace_multiply
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$slot_nb_inplace_multiply DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT slot_nb_inplace_multiply
_TEXT	SEGMENT
self$ = 48
arg1$ = 56
slot_nb_inplace_multiply PROC				; COMDAT

; 5245 : SLOT1(slot_nb_inplace_multiply, "__imul__", PyObject *, "O")

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?id@?1??slot_nb_inplace_multiply@@9@9
  00013	8b c0		 mov	 eax, eax
  00015	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0001b	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00024	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00028	4c 8b 4c 24 38	 mov	 r9, QWORD PTR arg1$[rsp]
  0002d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03IELNPCCE@?$CIO?$CJ?$AA@
  00034	48 8b d0	 mov	 rdx, rax
  00037	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self$[rsp]
  0003c	e8 00 00 00 00	 call	 call_method
  00041	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00045	c3		 ret	 0
slot_nb_inplace_multiply ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$slot_nb_inplace_remainder DD imagerel slot_nb_inplace_remainder
	DD	imagerel slot_nb_inplace_remainder+70
	DD	imagerel $unwind$slot_nb_inplace_remainder
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$slot_nb_inplace_remainder DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT slot_nb_inplace_remainder
_TEXT	SEGMENT
self$ = 48
arg1$ = 56
slot_nb_inplace_remainder PROC				; COMDAT

; 5246 : SLOT1(slot_nb_inplace_remainder, "__imod__", PyObject *, "O")

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?id@?1??slot_nb_inplace_remainder@@9@9
  00013	8b c0		 mov	 eax, eax
  00015	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0001b	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00024	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00028	4c 8b 4c 24 38	 mov	 r9, QWORD PTR arg1$[rsp]
  0002d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03IELNPCCE@?$CIO?$CJ?$AA@
  00034	48 8b d0	 mov	 rdx, rax
  00037	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self$[rsp]
  0003c	e8 00 00 00 00	 call	 call_method
  00041	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00045	c3		 ret	 0
slot_nb_inplace_remainder ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$slot_nb_inplace_power DD imagerel slot_nb_inplace_power
	DD	imagerel slot_nb_inplace_power+75
	DD	imagerel $unwind$slot_nb_inplace_power
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$slot_nb_inplace_power DD 011301H
	DD	04213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT slot_nb_inplace_power
_TEXT	SEGMENT
self$ = 48
arg1$ = 56
arg2$ = 64
slot_nb_inplace_power PROC				; COMDAT

; 5250 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 5251 :     _Py_IDENTIFIER(__ipow__);
; 5252 :     return call_method(self, &PyId___ipow__, "(" "O" ")", arg1);

  00013	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId___ipow__@?1??slot_nb_inplace_power@@9@9
  00018	8b c0		 mov	 eax, eax
  0001a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00020	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00029	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0002d	4c 8b 4c 24 38	 mov	 r9, QWORD PTR arg1$[rsp]
  00032	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03IELNPCCE@?$CIO?$CJ?$AA@
  00039	48 8b d0	 mov	 rdx, rax
  0003c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self$[rsp]
  00041	e8 00 00 00 00	 call	 call_method

; 5253 : }

  00046	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004a	c3		 ret	 0
slot_nb_inplace_power ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$slot_nb_inplace_lshift DD imagerel slot_nb_inplace_lshift
	DD	imagerel slot_nb_inplace_lshift+70
	DD	imagerel $unwind$slot_nb_inplace_lshift
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$slot_nb_inplace_lshift DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT slot_nb_inplace_lshift
_TEXT	SEGMENT
self$ = 48
arg1$ = 56
slot_nb_inplace_lshift PROC				; COMDAT

; 5254 : SLOT1(slot_nb_inplace_lshift, "__ilshift__", PyObject *, "O")

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?id@?1??slot_nb_inplace_lshift@@9@9
  00013	8b c0		 mov	 eax, eax
  00015	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0001b	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00024	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00028	4c 8b 4c 24 38	 mov	 r9, QWORD PTR arg1$[rsp]
  0002d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03IELNPCCE@?$CIO?$CJ?$AA@
  00034	48 8b d0	 mov	 rdx, rax
  00037	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self$[rsp]
  0003c	e8 00 00 00 00	 call	 call_method
  00041	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00045	c3		 ret	 0
slot_nb_inplace_lshift ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$slot_nb_inplace_rshift DD imagerel slot_nb_inplace_rshift
	DD	imagerel slot_nb_inplace_rshift+70
	DD	imagerel $unwind$slot_nb_inplace_rshift
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$slot_nb_inplace_rshift DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT slot_nb_inplace_rshift
_TEXT	SEGMENT
self$ = 48
arg1$ = 56
slot_nb_inplace_rshift PROC				; COMDAT

; 5255 : SLOT1(slot_nb_inplace_rshift, "__irshift__", PyObject *, "O")

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?id@?1??slot_nb_inplace_rshift@@9@9
  00013	8b c0		 mov	 eax, eax
  00015	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0001b	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00024	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00028	4c 8b 4c 24 38	 mov	 r9, QWORD PTR arg1$[rsp]
  0002d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03IELNPCCE@?$CIO?$CJ?$AA@
  00034	48 8b d0	 mov	 rdx, rax
  00037	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self$[rsp]
  0003c	e8 00 00 00 00	 call	 call_method
  00041	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00045	c3		 ret	 0
slot_nb_inplace_rshift ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$slot_nb_inplace_and DD imagerel slot_nb_inplace_and
	DD	imagerel slot_nb_inplace_and+70
	DD	imagerel $unwind$slot_nb_inplace_and
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$slot_nb_inplace_and DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT slot_nb_inplace_and
_TEXT	SEGMENT
self$ = 48
arg1$ = 56
slot_nb_inplace_and PROC				; COMDAT

; 5256 : SLOT1(slot_nb_inplace_and, "__iand__", PyObject *, "O")

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?id@?1??slot_nb_inplace_and@@9@9
  00013	8b c0		 mov	 eax, eax
  00015	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0001b	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00024	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00028	4c 8b 4c 24 38	 mov	 r9, QWORD PTR arg1$[rsp]
  0002d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03IELNPCCE@?$CIO?$CJ?$AA@
  00034	48 8b d0	 mov	 rdx, rax
  00037	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self$[rsp]
  0003c	e8 00 00 00 00	 call	 call_method
  00041	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00045	c3		 ret	 0
slot_nb_inplace_and ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$slot_nb_inplace_xor DD imagerel slot_nb_inplace_xor
	DD	imagerel slot_nb_inplace_xor+70
	DD	imagerel $unwind$slot_nb_inplace_xor
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$slot_nb_inplace_xor DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT slot_nb_inplace_xor
_TEXT	SEGMENT
self$ = 48
arg1$ = 56
slot_nb_inplace_xor PROC				; COMDAT

; 5257 : SLOT1(slot_nb_inplace_xor, "__ixor__", PyObject *, "O")

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?id@?1??slot_nb_inplace_xor@@9@9
  00013	8b c0		 mov	 eax, eax
  00015	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0001b	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00024	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00028	4c 8b 4c 24 38	 mov	 r9, QWORD PTR arg1$[rsp]
  0002d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03IELNPCCE@?$CIO?$CJ?$AA@
  00034	48 8b d0	 mov	 rdx, rax
  00037	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self$[rsp]
  0003c	e8 00 00 00 00	 call	 call_method
  00041	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00045	c3		 ret	 0
slot_nb_inplace_xor ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$slot_nb_inplace_or DD imagerel slot_nb_inplace_or
	DD	imagerel slot_nb_inplace_or+70
	DD	imagerel $unwind$slot_nb_inplace_or
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$slot_nb_inplace_or DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT slot_nb_inplace_or
_TEXT	SEGMENT
self$ = 48
arg1$ = 56
slot_nb_inplace_or PROC					; COMDAT

; 5258 : SLOT1(slot_nb_inplace_or, "__ior__", PyObject *, "O")

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?id@?1??slot_nb_inplace_or@@9@9
  00013	8b c0		 mov	 eax, eax
  00015	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0001b	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00024	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00028	4c 8b 4c 24 38	 mov	 r9, QWORD PTR arg1$[rsp]
  0002d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03IELNPCCE@?$CIO?$CJ?$AA@
  00034	48 8b d0	 mov	 rdx, rax
  00037	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self$[rsp]
  0003c	e8 00 00 00 00	 call	 call_method
  00041	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00045	c3		 ret	 0
slot_nb_inplace_or ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$slot_nb_floor_divide DD imagerel slot_nb_floor_divide
	DD	imagerel slot_nb_floor_divide+549
	DD	imagerel $unwind$slot_nb_floor_divide
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$slot_nb_floor_divide DD 010e01H
	DD	0820eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT slot_nb_floor_divide
_TEXT	SEGMENT
do_other$ = 32
r$25497 = 40
tv74 = 48
self$ = 80
other$ = 88
slot_nb_floor_divide PROC				; COMDAT

; 5260 :          "__floordiv__", "__rfloordiv__")

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  0000e	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00013	48 8b 4c 24 58	 mov	 rcx, QWORD PTR other$[rsp]
  00018	48 8b 49 58	 mov	 rcx, QWORD PTR [rcx+88]
  0001c	48 39 48 58	 cmp	 QWORD PTR [rax+88], rcx
  00020	74 3d		 je	 SHORT $LN9@slot_nb_fl
  00022	48 8b 44 24 58	 mov	 rax, QWORD PTR other$[rsp]
  00027	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0002b	48 83 b8 b8 00
	00 00 00	 cmp	 QWORD PTR [rax+184], 0
  00033	74 2a		 je	 SHORT $LN9@slot_nb_fl
  00035	48 8b 44 24 58	 mov	 rax, QWORD PTR other$[rsp]
  0003a	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0003e	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00045	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:slot_nb_floor_divide
  0004c	48 39 88 e8 00
	00 00		 cmp	 QWORD PTR [rax+232], rcx
  00053	75 0a		 jne	 SHORT $LN9@slot_nb_fl
  00055	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv74[rsp], 1
  0005d	eb 08		 jmp	 SHORT $LN10@slot_nb_fl
$LN9@slot_nb_fl:
  0005f	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv74[rsp], 0
$LN10@slot_nb_fl:
  00067	8b 44 24 30	 mov	 eax, DWORD PTR tv74[rsp]
  0006b	89 44 24 20	 mov	 DWORD PTR do_other$[rsp], eax
  0006f	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00074	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00078	48 83 b8 b8 00
	00 00 00	 cmp	 QWORD PTR [rax+184], 0
  00080	0f 84 4b 01 00
	00		 je	 $LN6@slot_nb_fl
  00086	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  0008b	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0008f	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00096	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:slot_nb_floor_divide
  0009d	48 39 88 e8 00
	00 00		 cmp	 QWORD PTR [rax+232], rcx
  000a4	0f 85 27 01 00
	00		 jne	 $LN6@slot_nb_fl
  000aa	83 7c 24 20 00	 cmp	 DWORD PTR do_other$[rsp], 0
  000af	0f 84 b1 00 00
	00		 je	 $LN5@slot_nb_fl
  000b5	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  000ba	48 8b 50 58	 mov	 rdx, QWORD PTR [rax+88]
  000be	48 8b 44 24 58	 mov	 rax, QWORD PTR other$[rsp]
  000c3	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  000c7	e8 00 00 00 00	 call	 PyType_IsSubtype
  000cc	85 c0		 test	 eax, eax
  000ce	0f 84 92 00 00
	00		 je	 $LN5@slot_nb_fl
  000d4	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?rop_id@?1??slot_nb_floor_divide@@9@9
  000d9	8b c0		 mov	 eax, eax
  000db	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  000e1	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  000ea	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  000ee	4c 8b c0	 mov	 r8, rax
  000f1	48 8b 54 24 58	 mov	 rdx, QWORD PTR other$[rsp]
  000f6	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  000fb	e8 00 00 00 00	 call	 method_is_overloaded
  00100	85 c0		 test	 eax, eax
  00102	74 62		 je	 SHORT $LN5@slot_nb_fl
  00104	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?rop_id@?1??slot_nb_floor_divide@@9@9
  00109	8b c0		 mov	 eax, eax
  0010b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00111	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0011a	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0011e	4c 8b 4c 24 50	 mov	 r9, QWORD PTR self$[rsp]
  00123	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03IELNPCCE@?$CIO?$CJ?$AA@
  0012a	48 8b d0	 mov	 rdx, rax
  0012d	48 8b 4c 24 58	 mov	 rcx, QWORD PTR other$[rsp]
  00132	e8 00 00 00 00	 call	 call_maybe
  00137	48 89 44 24 28	 mov	 QWORD PTR r$25497[rsp], rax
  0013c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NotImplementedStruct
  00143	48 39 44 24 28	 cmp	 QWORD PTR r$25497[rsp], rax
  00148	74 0a		 je	 SHORT $LN4@slot_nb_fl
  0014a	48 8b 44 24 28	 mov	 rax, QWORD PTR r$25497[rsp]
  0014f	e9 cc 00 00 00	 jmp	 $LN7@slot_nb_fl
$LN4@slot_nb_fl:
  00154	48 8b 4c 24 28	 mov	 rcx, QWORD PTR r$25497[rsp]
  00159	e8 00 00 00 00	 call	 _Py_DecRef
  0015e	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR do_other$[rsp], 0
$LN5@slot_nb_fl:
  00166	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?op_id@?1??slot_nb_floor_divide@@9@9
  0016b	8b c0		 mov	 eax, eax
  0016d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00173	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0017c	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00180	4c 8b 4c 24 58	 mov	 r9, QWORD PTR other$[rsp]
  00185	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03IELNPCCE@?$CIO?$CJ?$AA@
  0018c	48 8b d0	 mov	 rdx, rax
  0018f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  00194	e8 00 00 00 00	 call	 call_maybe
  00199	48 89 44 24 28	 mov	 QWORD PTR r$25497[rsp], rax
  0019e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NotImplementedStruct
  001a5	48 39 44 24 28	 cmp	 QWORD PTR r$25497[rsp], rax
  001aa	75 14		 jne	 SHORT $LN2@slot_nb_fl
  001ac	48 8b 44 24 58	 mov	 rax, QWORD PTR other$[rsp]
  001b1	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  001b6	48 8b 49 58	 mov	 rcx, QWORD PTR [rcx+88]
  001ba	48 39 48 58	 cmp	 QWORD PTR [rax+88], rcx
  001be	75 07		 jne	 SHORT $LN3@slot_nb_fl
$LN2@slot_nb_fl:
  001c0	48 8b 44 24 28	 mov	 rax, QWORD PTR r$25497[rsp]
  001c5	eb 59		 jmp	 SHORT $LN7@slot_nb_fl
$LN3@slot_nb_fl:
  001c7	48 8b 4c 24 28	 mov	 rcx, QWORD PTR r$25497[rsp]
  001cc	e8 00 00 00 00	 call	 _Py_DecRef
$LN6@slot_nb_fl:
  001d1	83 7c 24 20 00	 cmp	 DWORD PTR do_other$[rsp], 0
  001d6	74 35		 je	 SHORT $LN1@slot_nb_fl
  001d8	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?rop_id@?1??slot_nb_floor_divide@@9@9
  001dd	8b c0		 mov	 eax, eax
  001df	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  001e5	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  001ee	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  001f2	4c 8b 4c 24 50	 mov	 r9, QWORD PTR self$[rsp]
  001f7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03IELNPCCE@?$CIO?$CJ?$AA@
  001fe	48 8b d0	 mov	 rdx, rax
  00201	48 8b 4c 24 58	 mov	 rcx, QWORD PTR other$[rsp]
  00206	e8 00 00 00 00	 call	 call_maybe
  0020b	eb 13		 jmp	 SHORT $LN7@slot_nb_fl
$LN1@slot_nb_fl:
  0020d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NotImplementedStruct
  00214	e8 00 00 00 00	 call	 _Py_IncRef
  00219	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NotImplementedStruct
$LN7@slot_nb_fl:
  00220	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00224	c3		 ret	 0
slot_nb_floor_divide ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$slot_nb_true_divide DD imagerel slot_nb_true_divide
	DD	imagerel slot_nb_true_divide+549
	DD	imagerel $unwind$slot_nb_true_divide
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$slot_nb_true_divide DD 010e01H
	DD	0820eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT slot_nb_true_divide
_TEXT	SEGMENT
do_other$ = 32
r$25532 = 40
tv74 = 48
self$ = 80
other$ = 88
slot_nb_true_divide PROC				; COMDAT

; 5261 : SLOT1BIN(slot_nb_true_divide, nb_true_divide, "__truediv__", "__rtruediv__")

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H
  0000e	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00013	48 8b 4c 24 58	 mov	 rcx, QWORD PTR other$[rsp]
  00018	48 8b 49 58	 mov	 rcx, QWORD PTR [rcx+88]
  0001c	48 39 48 58	 cmp	 QWORD PTR [rax+88], rcx
  00020	74 3d		 je	 SHORT $LN9@slot_nb_tr
  00022	48 8b 44 24 58	 mov	 rax, QWORD PTR other$[rsp]
  00027	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0002b	48 83 b8 b8 00
	00 00 00	 cmp	 QWORD PTR [rax+184], 0
  00033	74 2a		 je	 SHORT $LN9@slot_nb_tr
  00035	48 8b 44 24 58	 mov	 rax, QWORD PTR other$[rsp]
  0003a	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0003e	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00045	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:slot_nb_true_divide
  0004c	48 39 88 f0 00
	00 00		 cmp	 QWORD PTR [rax+240], rcx
  00053	75 0a		 jne	 SHORT $LN9@slot_nb_tr
  00055	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR tv74[rsp], 1
  0005d	eb 08		 jmp	 SHORT $LN10@slot_nb_tr
$LN9@slot_nb_tr:
  0005f	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv74[rsp], 0
$LN10@slot_nb_tr:
  00067	8b 44 24 30	 mov	 eax, DWORD PTR tv74[rsp]
  0006b	89 44 24 20	 mov	 DWORD PTR do_other$[rsp], eax
  0006f	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00074	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00078	48 83 b8 b8 00
	00 00 00	 cmp	 QWORD PTR [rax+184], 0
  00080	0f 84 4b 01 00
	00		 je	 $LN6@slot_nb_tr
  00086	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  0008b	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0008f	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00096	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:slot_nb_true_divide
  0009d	48 39 88 f0 00
	00 00		 cmp	 QWORD PTR [rax+240], rcx
  000a4	0f 85 27 01 00
	00		 jne	 $LN6@slot_nb_tr
  000aa	83 7c 24 20 00	 cmp	 DWORD PTR do_other$[rsp], 0
  000af	0f 84 b1 00 00
	00		 je	 $LN5@slot_nb_tr
  000b5	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  000ba	48 8b 50 58	 mov	 rdx, QWORD PTR [rax+88]
  000be	48 8b 44 24 58	 mov	 rax, QWORD PTR other$[rsp]
  000c3	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  000c7	e8 00 00 00 00	 call	 PyType_IsSubtype
  000cc	85 c0		 test	 eax, eax
  000ce	0f 84 92 00 00
	00		 je	 $LN5@slot_nb_tr
  000d4	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?rop_id@?1??slot_nb_true_divide@@9@9
  000d9	8b c0		 mov	 eax, eax
  000db	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  000e1	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  000ea	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  000ee	4c 8b c0	 mov	 r8, rax
  000f1	48 8b 54 24 58	 mov	 rdx, QWORD PTR other$[rsp]
  000f6	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  000fb	e8 00 00 00 00	 call	 method_is_overloaded
  00100	85 c0		 test	 eax, eax
  00102	74 62		 je	 SHORT $LN5@slot_nb_tr
  00104	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?rop_id@?1??slot_nb_true_divide@@9@9
  00109	8b c0		 mov	 eax, eax
  0010b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00111	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0011a	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0011e	4c 8b 4c 24 50	 mov	 r9, QWORD PTR self$[rsp]
  00123	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03IELNPCCE@?$CIO?$CJ?$AA@
  0012a	48 8b d0	 mov	 rdx, rax
  0012d	48 8b 4c 24 58	 mov	 rcx, QWORD PTR other$[rsp]
  00132	e8 00 00 00 00	 call	 call_maybe
  00137	48 89 44 24 28	 mov	 QWORD PTR r$25532[rsp], rax
  0013c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NotImplementedStruct
  00143	48 39 44 24 28	 cmp	 QWORD PTR r$25532[rsp], rax
  00148	74 0a		 je	 SHORT $LN4@slot_nb_tr
  0014a	48 8b 44 24 28	 mov	 rax, QWORD PTR r$25532[rsp]
  0014f	e9 cc 00 00 00	 jmp	 $LN7@slot_nb_tr
$LN4@slot_nb_tr:
  00154	48 8b 4c 24 28	 mov	 rcx, QWORD PTR r$25532[rsp]
  00159	e8 00 00 00 00	 call	 _Py_DecRef
  0015e	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR do_other$[rsp], 0
$LN5@slot_nb_tr:
  00166	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?op_id@?1??slot_nb_true_divide@@9@9
  0016b	8b c0		 mov	 eax, eax
  0016d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00173	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0017c	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00180	4c 8b 4c 24 58	 mov	 r9, QWORD PTR other$[rsp]
  00185	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03IELNPCCE@?$CIO?$CJ?$AA@
  0018c	48 8b d0	 mov	 rdx, rax
  0018f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  00194	e8 00 00 00 00	 call	 call_maybe
  00199	48 89 44 24 28	 mov	 QWORD PTR r$25532[rsp], rax
  0019e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NotImplementedStruct
  001a5	48 39 44 24 28	 cmp	 QWORD PTR r$25532[rsp], rax
  001aa	75 14		 jne	 SHORT $LN2@slot_nb_tr
  001ac	48 8b 44 24 58	 mov	 rax, QWORD PTR other$[rsp]
  001b1	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  001b6	48 8b 49 58	 mov	 rcx, QWORD PTR [rcx+88]
  001ba	48 39 48 58	 cmp	 QWORD PTR [rax+88], rcx
  001be	75 07		 jne	 SHORT $LN3@slot_nb_tr
$LN2@slot_nb_tr:
  001c0	48 8b 44 24 28	 mov	 rax, QWORD PTR r$25532[rsp]
  001c5	eb 59		 jmp	 SHORT $LN7@slot_nb_tr
$LN3@slot_nb_tr:
  001c7	48 8b 4c 24 28	 mov	 rcx, QWORD PTR r$25532[rsp]
  001cc	e8 00 00 00 00	 call	 _Py_DecRef
$LN6@slot_nb_tr:
  001d1	83 7c 24 20 00	 cmp	 DWORD PTR do_other$[rsp], 0
  001d6	74 35		 je	 SHORT $LN1@slot_nb_tr
  001d8	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?rop_id@?1??slot_nb_true_divide@@9@9
  001dd	8b c0		 mov	 eax, eax
  001df	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  001e5	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  001ee	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  001f2	4c 8b 4c 24 50	 mov	 r9, QWORD PTR self$[rsp]
  001f7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03IELNPCCE@?$CIO?$CJ?$AA@
  001fe	48 8b d0	 mov	 rdx, rax
  00201	48 8b 4c 24 58	 mov	 rcx, QWORD PTR other$[rsp]
  00206	e8 00 00 00 00	 call	 call_maybe
  0020b	eb 13		 jmp	 SHORT $LN7@slot_nb_tr
$LN1@slot_nb_tr:
  0020d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NotImplementedStruct
  00214	e8 00 00 00 00	 call	 _Py_IncRef
  00219	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NotImplementedStruct
$LN7@slot_nb_tr:
  00220	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00224	c3		 ret	 0
slot_nb_true_divide ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$slot_nb_inplace_floor_divide DD imagerel slot_nb_inplace_floor_divide
	DD	imagerel slot_nb_inplace_floor_divide+70
	DD	imagerel $unwind$slot_nb_inplace_floor_divide
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$slot_nb_inplace_floor_divide DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT slot_nb_inplace_floor_divide
_TEXT	SEGMENT
self$ = 48
arg1$ = 56
slot_nb_inplace_floor_divide PROC			; COMDAT

; 5262 : SLOT1(slot_nb_inplace_floor_divide, "__ifloordiv__", PyObject *, "O")

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?id@?1??slot_nb_inplace_floor_divide@@9@9
  00013	8b c0		 mov	 eax, eax
  00015	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0001b	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00024	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00028	4c 8b 4c 24 38	 mov	 r9, QWORD PTR arg1$[rsp]
  0002d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03IELNPCCE@?$CIO?$CJ?$AA@
  00034	48 8b d0	 mov	 rdx, rax
  00037	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self$[rsp]
  0003c	e8 00 00 00 00	 call	 call_method
  00041	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00045	c3		 ret	 0
slot_nb_inplace_floor_divide ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$slot_nb_inplace_true_divide DD imagerel slot_nb_inplace_true_divide
	DD	imagerel slot_nb_inplace_true_divide+70
	DD	imagerel $unwind$slot_nb_inplace_true_divide
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$slot_nb_inplace_true_divide DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT slot_nb_inplace_true_divide
_TEXT	SEGMENT
self$ = 48
arg1$ = 56
slot_nb_inplace_true_divide PROC			; COMDAT

; 5263 : SLOT1(slot_nb_inplace_true_divide, "__itruediv__", PyObject *, "O")

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H
  0000e	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?id@?1??slot_nb_inplace_true_divide@@9@9
  00013	8b c0		 mov	 eax, eax
  00015	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0001b	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00024	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00028	4c 8b 4c 24 38	 mov	 r9, QWORD PTR arg1$[rsp]
  0002d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03IELNPCCE@?$CIO?$CJ?$AA@
  00034	48 8b d0	 mov	 rdx, rax
  00037	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self$[rsp]
  0003c	e8 00 00 00 00	 call	 call_method
  00041	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00045	c3		 ret	 0
slot_nb_inplace_true_divide ENDP
_TEXT	ENDS
EXTRN	PyEval_CallObjectWithKeywords:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$slot_tp_repr DD imagerel slot_tp_repr
	DD	imagerel slot_tp_repr+138
	DD	imagerel $unwind$slot_tp_repr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$slot_tp_repr DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT slot_tp_repr
_TEXT	SEGMENT
res$ = 32
func$ = 40
self$ = 64
slot_tp_repr PROC					; COMDAT

; 5267 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 5268 :     PyObject *func, *res;
; 5269 :     _Py_IDENTIFIER(__repr__);
; 5270 : 
; 5271 :     func = lookup_method(self, &PyId___repr__);

  00009	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId___repr__@?1??slot_tp_repr@@9@9
  0000e	8b c0		 mov	 eax, eax
  00010	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00016	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0001f	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00023	48 8b d0	 mov	 rdx, rax
  00026	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  0002b	e8 00 00 00 00	 call	 lookup_method
  00030	48 89 44 24 28	 mov	 QWORD PTR func$[rsp], rax

; 5272 :     if (func != NULL) {

  00035	48 83 7c 24 28
	00		 cmp	 QWORD PTR func$[rsp], 0
  0003b	74 25		 je	 SHORT $LN1@slot_tp_re

; 5273 :         res = PyEval_CallObject(func, NULL);

  0003d	45 33 c0	 xor	 r8d, r8d
  00040	33 d2		 xor	 edx, edx
  00042	48 8b 4c 24 28	 mov	 rcx, QWORD PTR func$[rsp]
  00047	e8 00 00 00 00	 call	 PyEval_CallObjectWithKeywords
  0004c	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax

; 5274 :         Py_DECREF(func);

  00051	48 8b 4c 24 28	 mov	 rcx, QWORD PTR func$[rsp]
  00056	e8 00 00 00 00	 call	 _Py_DecRef

; 5275 :         return res;

  0005b	48 8b 44 24 20	 mov	 rax, QWORD PTR res$[rsp]
  00060	eb 23		 jmp	 SHORT $LN2@slot_tp_re
$LN1@slot_tp_re:

; 5276 :     }
; 5277 :     PyErr_Clear();

  00062	e8 00 00 00 00	 call	 PyErr_Clear

; 5278 :     return PyUnicode_FromFormat("<%s object at %p>",
; 5279 :                                Py_TYPE(self)->tp_name, self);

  00067	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0006c	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00070	4c 8b 44 24 40	 mov	 r8, QWORD PTR self$[rsp]
  00075	48 8b 50 70	 mov	 rdx, QWORD PTR [rax+112]
  00079	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@JEBMOEBF@?$DM?$CFs?5object?5at?5?$CFp?$DO?$AA@
  00080	e8 00 00 00 00	 call	 PyUnicode_FromFormat
$LN2@slot_tp_re:

; 5280 : }

  00085	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00089	c3		 ret	 0
slot_tp_repr ENDP
_TEXT	ENDS
PUBLIC	??_C@_13COJANIEC@?$AA0?$AA?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$slot_tp_str DD imagerel slot_tp_str
	DD	imagerel slot_tp_str+176
	DD	imagerel $unwind$slot_tp_str
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$slot_tp_str DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_13COJANIEC@?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_13COJANIEC@?$AA0?$AA?$AA@ DB '0', 00H, 00H, 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT slot_tp_str
_TEXT	SEGMENT
res$ = 32
func$ = 40
self$ = 64
slot_tp_str PROC					; COMDAT

; 5284 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 5285 :     PyObject *func, *res;
; 5286 :     _Py_IDENTIFIER(__str__);
; 5287 : 
; 5288 :     func = lookup_method(self, &PyId___str__);

  00009	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId___str__@?1??slot_tp_str@@9@9
  0000e	8b c0		 mov	 eax, eax
  00010	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00016	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0001f	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00023	48 8b d0	 mov	 rdx, rax
  00026	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  0002b	e8 00 00 00 00	 call	 lookup_method
  00030	48 89 44 24 28	 mov	 QWORD PTR func$[rsp], rax

; 5289 :     if (func != NULL) {

  00035	48 83 7c 24 28
	00		 cmp	 QWORD PTR func$[rsp], 0
  0003b	74 27		 je	 SHORT $LN3@slot_tp_st

; 5290 :         res = PyEval_CallObject(func, NULL);

  0003d	45 33 c0	 xor	 r8d, r8d
  00040	33 d2		 xor	 edx, edx
  00042	48 8b 4c 24 28	 mov	 rcx, QWORD PTR func$[rsp]
  00047	e8 00 00 00 00	 call	 PyEval_CallObjectWithKeywords
  0004c	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax

; 5291 :         Py_DECREF(func);

  00051	48 8b 4c 24 28	 mov	 rcx, QWORD PTR func$[rsp]
  00056	e8 00 00 00 00	 call	 _Py_DecRef

; 5292 :         return res;

  0005b	48 8b 44 24 20	 mov	 rax, QWORD PTR res$[rsp]
  00060	eb 49		 jmp	 SHORT $LN4@slot_tp_st

; 5293 :     }
; 5294 :     else {

  00062	eb 47		 jmp	 SHORT $LN2@slot_tp_st
$LN3@slot_tp_st:

; 5295 :         /* PyObject *ress; */
; 5296 :         PyErr_Clear();

  00064	e8 00 00 00 00	 call	 PyErr_Clear

; 5297 :         res = slot_tp_repr(self);

  00069	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  0006e	e8 00 00 00 00	 call	 slot_tp_repr
  00073	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax

; 5298 :         if (!res)

  00078	48 83 7c 24 20
	00		 cmp	 QWORD PTR res$[rsp], 0
  0007e	75 04		 jne	 SHORT $LN1@slot_tp_st

; 5299 :             return NULL;

  00080	33 c0		 xor	 eax, eax
  00082	eb 27		 jmp	 SHORT $LN4@slot_tp_st
$LN1@slot_tp_st:

; 5300 :         /* XXX this is non-sensical. Why should we return
; 5301 :            a bytes object from __str__. Is this code even
; 5302 :            used? - mvl */
; 5303 :         assert(0);

  00084	33 c0		 xor	 eax, eax
  00086	85 c0		 test	 eax, eax
  00088	75 1c		 jne	 SHORT $LN6@slot_tp_st
  0008a	41 b8 b7 14 00
	00		 mov	 r8d, 5303		; 000014b7H
  00090	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@GJLLIOPA@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAt?$AAy?$AAp?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00097	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_13COJANIEC@?$AA0?$AA?$AA@
  0009e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000a4	33 c0		 xor	 eax, eax
$LN6@slot_tp_st:

; 5304 :         return res;

  000a6	48 8b 44 24 20	 mov	 rax, QWORD PTR res$[rsp]
$LN2@slot_tp_st:
$LN4@slot_tp_st:

; 5305 :         /*
; 5306 :         ress = _PyUnicode_AsDefaultEncodedString(res);
; 5307 :         Py_DECREF(res);
; 5308 :         return ress;
; 5309 :         */
; 5310 :     }
; 5311 : }

  000ab	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000af	c3		 ret	 0
slot_tp_str ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CJ@MNKAHADD@__hash__?5method?5should?5return?5an@ ; `string'
EXTRN	PyLong_AsSsize_t:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$slot_tp_hash DD imagerel slot_tp_hash
	DD	imagerel slot_tp_hash+302
	DD	imagerel $unwind$slot_tp_hash
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$slot_tp_hash DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0CJ@MNKAHADD@__hash__?5method?5should?5return?5an@
CONST	SEGMENT
??_C@_0CJ@MNKAHADD@__hash__?5method?5should?5return?5an@ DB '__hash__ met'
	DB	'hod should return an integer', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT slot_tp_hash
_TEXT	SEGMENT
h$ = 32
res$ = 40
func$ = 48
self$ = 80
slot_tp_hash PROC					; COMDAT

; 5315 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 5316 :     PyObject *func, *res;
; 5317 :     Py_ssize_t h;
; 5318 : 
; 5319 :     func = lookup_method(self, &PyId___hash__);

  00009	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId___hash__
  0000e	8b c0		 mov	 eax, eax
  00010	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00016	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0001f	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00023	48 8b d0	 mov	 rdx, rax
  00026	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  0002b	e8 00 00 00 00	 call	 lookup_method
  00030	48 89 44 24 30	 mov	 QWORD PTR func$[rsp], rax

; 5320 : 
; 5321 :     if (func == Py_None) {

  00035	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0003c	48 39 44 24 30	 cmp	 QWORD PTR func$[rsp], rax
  00041	75 13		 jne	 SHORT $LN6@slot_tp_ha

; 5322 :         Py_DECREF(func);

  00043	48 8b 4c 24 30	 mov	 rcx, QWORD PTR func$[rsp]
  00048	e8 00 00 00 00	 call	 _Py_DecRef

; 5323 :         func = NULL;

  0004d	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR func$[rsp], 0
$LN6@slot_tp_ha:

; 5324 :     }
; 5325 : 
; 5326 :     if (func == NULL) {

  00056	48 83 7c 24 30
	00		 cmp	 QWORD PTR func$[rsp], 0
  0005c	75 0f		 jne	 SHORT $LN5@slot_tp_ha

; 5327 :         return PyObject_HashNotImplemented(self);

  0005e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  00063	e8 00 00 00 00	 call	 PyObject_HashNotImplemented
  00068	e9 bc 00 00 00	 jmp	 $LN7@slot_tp_ha
$LN5@slot_tp_ha:

; 5328 :     }
; 5329 : 
; 5330 :     res = PyEval_CallObject(func, NULL);

  0006d	45 33 c0	 xor	 r8d, r8d
  00070	33 d2		 xor	 edx, edx
  00072	48 8b 4c 24 30	 mov	 rcx, QWORD PTR func$[rsp]
  00077	e8 00 00 00 00	 call	 PyEval_CallObjectWithKeywords
  0007c	48 89 44 24 28	 mov	 QWORD PTR res$[rsp], rax

; 5331 :     Py_DECREF(func);

  00081	48 8b 4c 24 30	 mov	 rcx, QWORD PTR func$[rsp]
  00086	e8 00 00 00 00	 call	 _Py_DecRef

; 5332 :     if (res == NULL)

  0008b	48 83 7c 24 28
	00		 cmp	 QWORD PTR res$[rsp], 0
  00091	75 0c		 jne	 SHORT $LN4@slot_tp_ha

; 5333 :         return -1;

  00093	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1
  0009a	e9 8a 00 00 00	 jmp	 $LN7@slot_tp_ha
$LN4@slot_tp_ha:

; 5334 : 
; 5335 :     if (!PyLong_Check(res)) {

  0009f	48 8b 44 24 28	 mov	 rax, QWORD PTR res$[rsp]
  000a4	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000a8	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000ae	25 00 00 00 01	 and	 eax, 16777216		; 01000000H
  000b3	85 c0		 test	 eax, eax
  000b5	75 1c		 jne	 SHORT $LN3@slot_tp_ha

; 5336 :         PyErr_SetString(PyExc_TypeError,
; 5337 :                         "__hash__ method should return an integer");

  000b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CJ@MNKAHADD@__hash__?5method?5should?5return?5an@
  000be	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000c5	e8 00 00 00 00	 call	 PyErr_SetString

; 5338 :         return -1;

  000ca	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1
  000d1	eb 56		 jmp	 SHORT $LN7@slot_tp_ha
$LN3@slot_tp_ha:

; 5339 :     }
; 5340 :     /* Transform the PyLong `res` to a Py_hash_t `h`.  For an existing
; 5341 :        hashable Python object x, hash(x) will always lie within the range of
; 5342 :        Py_hash_t.  Therefore our transformation must preserve values that
; 5343 :        already lie within this range, to ensure that if x.__hash__() returns
; 5344 :        hash(y) then hash(x) == hash(y). */
; 5345 :     h = PyLong_AsSsize_t(res);

  000d3	48 8b 4c 24 28	 mov	 rcx, QWORD PTR res$[rsp]
  000d8	e8 00 00 00 00	 call	 PyLong_AsSsize_t
  000dd	48 89 44 24 20	 mov	 QWORD PTR h$[rsp], rax

; 5346 :     if (h == -1 && PyErr_Occurred()) {

  000e2	48 83 7c 24 20
	ff		 cmp	 QWORD PTR h$[rsp], -1
  000e8	75 1f		 jne	 SHORT $LN2@slot_tp_ha
  000ea	e8 00 00 00 00	 call	 PyErr_Occurred
  000ef	48 85 c0	 test	 rax, rax
  000f2	74 15		 je	 SHORT $LN2@slot_tp_ha

; 5347 :         /* res was not within the range of a Py_hash_t, so we're free to
; 5348 :            use any sufficiently bit-mixing transformation;
; 5349 :            long.__hash__ will do nicely. */
; 5350 :         PyErr_Clear();

  000f4	e8 00 00 00 00	 call	 PyErr_Clear

; 5351 :         h = PyLong_Type.tp_hash(res);

  000f9	48 8b 4c 24 28	 mov	 rcx, QWORD PTR res$[rsp]
  000fe	ff 15 d0 00 00
	00		 call	 QWORD PTR PyLong_Type+208
  00104	48 89 44 24 20	 mov	 QWORD PTR h$[rsp], rax
$LN2@slot_tp_ha:

; 5352 :     }
; 5353 :     /* -1 is reserved for errors. */
; 5354 :     if (h == -1)

  00109	48 83 7c 24 20
	ff		 cmp	 QWORD PTR h$[rsp], -1
  0010f	75 09		 jne	 SHORT $LN1@slot_tp_ha

; 5355 :         h = -2;

  00111	48 c7 44 24 20
	fe ff ff ff	 mov	 QWORD PTR h$[rsp], -2
$LN1@slot_tp_ha:

; 5356 :     Py_DECREF(res);

  0011a	48 8b 4c 24 28	 mov	 rcx, QWORD PTR res$[rsp]
  0011f	e8 00 00 00 00	 call	 _Py_DecRef

; 5357 :     return h;

  00124	48 8b 44 24 20	 mov	 rax, QWORD PTR h$[rsp]
$LN7@slot_tp_ha:

; 5358 : }

  00129	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0012d	c3		 ret	 0
slot_tp_hash ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$slot_tp_call DD imagerel slot_tp_call
	DD	imagerel slot_tp_call+120
	DD	imagerel $unwind$slot_tp_call
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$slot_tp_call DD 011301H
	DD	06213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT slot_tp_call
_TEXT	SEGMENT
res$ = 32
meth$ = 40
self$ = 64
args$ = 72
kwds$ = 80
slot_tp_call PROC					; COMDAT

; 5362 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 5363 :     _Py_IDENTIFIER(__call__);
; 5364 :     PyObject *meth = lookup_method(self, &PyId___call__);

  00013	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId___call__@?1??slot_tp_call@@9@9
  00018	8b c0		 mov	 eax, eax
  0001a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00020	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00029	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0002d	48 8b d0	 mov	 rdx, rax
  00030	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  00035	e8 00 00 00 00	 call	 lookup_method
  0003a	48 89 44 24 28	 mov	 QWORD PTR meth$[rsp], rax

; 5365 :     PyObject *res;
; 5366 : 
; 5367 :     if (meth == NULL)

  0003f	48 83 7c 24 28
	00		 cmp	 QWORD PTR meth$[rsp], 0
  00045	75 04		 jne	 SHORT $LN1@slot_tp_ca

; 5368 :         return NULL;

  00047	33 c0		 xor	 eax, eax
  00049	eb 28		 jmp	 SHORT $LN2@slot_tp_ca
$LN1@slot_tp_ca:

; 5369 : 
; 5370 :     res = PyObject_Call(meth, args, kwds);

  0004b	4c 8b 44 24 50	 mov	 r8, QWORD PTR kwds$[rsp]
  00050	48 8b 54 24 48	 mov	 rdx, QWORD PTR args$[rsp]
  00055	48 8b 4c 24 28	 mov	 rcx, QWORD PTR meth$[rsp]
  0005a	e8 00 00 00 00	 call	 PyObject_Call
  0005f	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax

; 5371 : 
; 5372 :     Py_DECREF(meth);

  00064	48 8b 4c 24 28	 mov	 rcx, QWORD PTR meth$[rsp]
  00069	e8 00 00 00 00	 call	 _Py_DecRef

; 5373 :     return res;

  0006e	48 8b 44 24 20	 mov	 rax, QWORD PTR res$[rsp]
$LN2@slot_tp_ca:

; 5374 : }

  00073	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00077	c3		 ret	 0
slot_tp_call ENDP
_TEXT	ENDS
EXTRN	PyWrapperDescr_Type:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$slot_tp_getattr_hook DD imagerel slot_tp_getattr_hook
	DD	imagerel slot_tp_getattr_hook+361
	DD	imagerel $unwind$slot_tp_getattr_hook
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$slot_tp_getattr_hook DD 010e01H
	DD	0820eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT slot_tp_getattr_hook
_TEXT	SEGMENT
getattribute$ = 32
res$ = 40
getattr$ = 48
tp$ = 56
self$ = 80
name$ = 88
slot_tp_getattr_hook PROC				; COMDAT

; 5413 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 5414 :     PyTypeObject *tp = Py_TYPE(self);

  0000e	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00013	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00017	48 89 44 24 38	 mov	 QWORD PTR tp$[rsp], rax

; 5415 :     PyObject *getattr, *getattribute, *res;
; 5416 :     _Py_IDENTIFIER(__getattr__);
; 5417 : 
; 5418 :     /* speed hack: we could use lookup_maybe, but that would resolve the
; 5419 :        method fully for each attribute lookup for classes with
; 5420 :        __getattr__, even when the attribute is present. So we use
; 5421 :        _PyType_Lookup and create the method only when needed, with
; 5422 :        call_attribute. */
; 5423 :     getattr = _PyType_LookupId(tp, &PyId___getattr__);

  0001c	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId___getattr__@?1??slot_tp_getattr_hook@@9@9
  00021	8b c0		 mov	 eax, eax
  00023	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00029	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00032	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00036	48 8b d0	 mov	 rdx, rax
  00039	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tp$[rsp]
  0003e	e8 00 00 00 00	 call	 _PyType_LookupId
  00043	48 89 44 24 30	 mov	 QWORD PTR getattr$[rsp], rax

; 5424 :     if (getattr == NULL) {

  00048	48 83 7c 24 30
	00		 cmp	 QWORD PTR getattr$[rsp], 0
  0004e	75 27		 jne	 SHORT $LN5@slot_tp_ge

; 5425 :         /* No __getattr__ hook: use a simpler dispatcher */
; 5426 :         tp->tp_getattro = slot_tp_getattro;

  00050	48 8b 44 24 38	 mov	 rax, QWORD PTR tp$[rsp]
  00055	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:slot_tp_getattro
  0005c	48 89 88 e8 00
	00 00		 mov	 QWORD PTR [rax+232], rcx

; 5427 :         return slot_tp_getattro(self, name);

  00063	48 8b 54 24 58	 mov	 rdx, QWORD PTR name$[rsp]
  00068	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  0006d	e8 00 00 00 00	 call	 slot_tp_getattro
  00072	e9 ed 00 00 00	 jmp	 $LN6@slot_tp_ge
$LN5@slot_tp_ge:

; 5428 :     }
; 5429 :     Py_INCREF(getattr);

  00077	48 8b 4c 24 30	 mov	 rcx, QWORD PTR getattr$[rsp]
  0007c	e8 00 00 00 00	 call	 _Py_IncRef

; 5430 :     /* speed hack: we could use lookup_maybe, but that would resolve the
; 5431 :        method fully for each attribute lookup for classes with
; 5432 :        __getattr__, even when self has the default __getattribute__
; 5433 :        method. So we use _PyType_Lookup and create the method only when
; 5434 :        needed, with call_attribute. */
; 5435 :     getattribute = _PyType_LookupId(tp, &PyId___getattribute__);

  00081	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId___getattribute__
  00086	8b c0		 mov	 eax, eax
  00088	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0008e	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00097	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0009b	48 8b d0	 mov	 rdx, rax
  0009e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tp$[rsp]
  000a3	e8 00 00 00 00	 call	 _PyType_LookupId
  000a8	48 89 44 24 20	 mov	 QWORD PTR getattribute$[rsp], rax

; 5436 :     if (getattribute == NULL ||
; 5437 :         (Py_TYPE(getattribute) == &PyWrapperDescr_Type &&
; 5438 :          ((PyWrapperDescrObject *)getattribute)->d_wrapped ==
; 5439 :          (void *)PyObject_GenericGetAttr))

  000ad	48 83 7c 24 20
	00		 cmp	 QWORD PTR getattribute$[rsp], 0
  000b3	74 27		 je	 SHORT $LN3@slot_tp_ge
  000b5	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyWrapperDescr_Type
  000bc	48 8b 4c 24 20	 mov	 rcx, QWORD PTR getattribute$[rsp]
  000c1	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  000c5	75 2b		 jne	 SHORT $LN4@slot_tp_ge
  000c7	48 8b 44 24 20	 mov	 rax, QWORD PTR getattribute$[rsp]
  000cc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyObject_GenericGetAttr
  000d3	48 39 88 88 00
	00 00		 cmp	 QWORD PTR [rax+136], rcx
  000da	75 16		 jne	 SHORT $LN4@slot_tp_ge
$LN3@slot_tp_ge:

; 5440 :         res = PyObject_GenericGetAttr(self, name);

  000dc	48 8b 54 24 58	 mov	 rdx, QWORD PTR name$[rsp]
  000e1	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  000e6	e8 00 00 00 00	 call	 PyObject_GenericGetAttr
  000eb	48 89 44 24 28	 mov	 QWORD PTR res$[rsp], rax

; 5441 :     else {

  000f0	eb 2d		 jmp	 SHORT $LN2@slot_tp_ge
$LN4@slot_tp_ge:

; 5442 :         Py_INCREF(getattribute);

  000f2	48 8b 4c 24 20	 mov	 rcx, QWORD PTR getattribute$[rsp]
  000f7	e8 00 00 00 00	 call	 _Py_IncRef

; 5443 :         res = call_attribute(self, getattribute, name);

  000fc	4c 8b 44 24 58	 mov	 r8, QWORD PTR name$[rsp]
  00101	48 8b 54 24 20	 mov	 rdx, QWORD PTR getattribute$[rsp]
  00106	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  0010b	e8 00 00 00 00	 call	 call_attribute
  00110	48 89 44 24 28	 mov	 QWORD PTR res$[rsp], rax

; 5444 :         Py_DECREF(getattribute);

  00115	48 8b 4c 24 20	 mov	 rcx, QWORD PTR getattribute$[rsp]
  0011a	e8 00 00 00 00	 call	 _Py_DecRef
$LN2@slot_tp_ge:

; 5445 :     }
; 5446 :     if (res == NULL && PyErr_ExceptionMatches(PyExc_AttributeError)) {

  0011f	48 83 7c 24 28
	00		 cmp	 QWORD PTR res$[rsp], 0
  00125	75 2e		 jne	 SHORT $LN1@slot_tp_ge
  00127	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_AttributeError
  0012e	e8 00 00 00 00	 call	 PyErr_ExceptionMatches
  00133	85 c0		 test	 eax, eax
  00135	74 1e		 je	 SHORT $LN1@slot_tp_ge

; 5447 :         PyErr_Clear();

  00137	e8 00 00 00 00	 call	 PyErr_Clear

; 5448 :         res = call_attribute(self, getattr, name);

  0013c	4c 8b 44 24 58	 mov	 r8, QWORD PTR name$[rsp]
  00141	48 8b 54 24 30	 mov	 rdx, QWORD PTR getattr$[rsp]
  00146	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  0014b	e8 00 00 00 00	 call	 call_attribute
  00150	48 89 44 24 28	 mov	 QWORD PTR res$[rsp], rax
$LN1@slot_tp_ge:

; 5449 :     }
; 5450 :     Py_DECREF(getattr);

  00155	48 8b 4c 24 30	 mov	 rcx, QWORD PTR getattr$[rsp]
  0015a	e8 00 00 00 00	 call	 _Py_DecRef

; 5451 :     return res;

  0015f	48 8b 44 24 28	 mov	 rax, QWORD PTR res$[rsp]
$LN6@slot_tp_ge:

; 5452 : }

  00164	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00168	c3		 ret	 0
slot_tp_getattr_hook ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$slot_tp_getattro DD imagerel slot_tp_getattro
	DD	imagerel slot_tp_getattro+70
	DD	imagerel $unwind$slot_tp_getattro
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$slot_tp_getattro DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT slot_tp_getattro
_TEXT	SEGMENT
self$ = 48
name$ = 56
slot_tp_getattro PROC					; COMDAT

; 5389 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 5390 :     return call_method(self, &PyId___getattribute__, "(O)", name);

  0000e	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId___getattribute__
  00013	8b c0		 mov	 eax, eax
  00015	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0001b	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00024	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00028	4c 8b 4c 24 38	 mov	 r9, QWORD PTR name$[rsp]
  0002d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03IELNPCCE@?$CIO?$CJ?$AA@
  00034	48 8b d0	 mov	 rdx, rax
  00037	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self$[rsp]
  0003c	e8 00 00 00 00	 call	 call_method

; 5391 : }

  00041	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00045	c3		 ret	 0
slot_tp_getattro ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$call_attribute DD imagerel call_attribute
	DD	imagerel call_attribute+166
	DD	imagerel $unwind$call_attribute
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$call_attribute DD 011301H
	DD	08213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT call_attribute
_TEXT	SEGMENT
res$ = 32
descr$ = 40
f$ = 48
self$ = 80
attr$ = 88
name$ = 96
call_attribute PROC					; COMDAT

; 5395 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 5396 :     PyObject *res, *descr = NULL;

  00013	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR descr$[rsp], 0

; 5397 :     descrgetfunc f = Py_TYPE(attr)->tp_descr_get;

  0001c	48 8b 44 24 58	 mov	 rax, QWORD PTR attr$[rsp]
  00021	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00025	48 8b 80 68 01
	00 00		 mov	 rax, QWORD PTR [rax+360]
  0002c	48 89 44 24 30	 mov	 QWORD PTR f$[rsp], rax

; 5398 : 
; 5399 :     if (f != NULL) {

  00031	48 83 7c 24 30
	00		 cmp	 QWORD PTR f$[rsp], 0
  00037	74 34		 je	 SHORT $LN7@call_attri

; 5400 :         descr = f(attr, self, (PyObject *)(Py_TYPE(self)));

  00039	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  0003e	4c 8b 40 58	 mov	 r8, QWORD PTR [rax+88]
  00042	48 8b 54 24 50	 mov	 rdx, QWORD PTR self$[rsp]
  00047	48 8b 4c 24 58	 mov	 rcx, QWORD PTR attr$[rsp]
  0004c	ff 54 24 30	 call	 QWORD PTR f$[rsp]
  00050	48 89 44 24 28	 mov	 QWORD PTR descr$[rsp], rax

; 5401 :         if (descr == NULL)

  00055	48 83 7c 24 28
	00		 cmp	 QWORD PTR descr$[rsp], 0
  0005b	75 06		 jne	 SHORT $LN6@call_attri

; 5402 :             return NULL;

  0005d	33 c0		 xor	 eax, eax
  0005f	eb 40		 jmp	 SHORT $LN8@call_attri

; 5403 :         else

  00061	eb 0a		 jmp	 SHORT $LN5@call_attri
$LN6@call_attri:

; 5404 :             attr = descr;

  00063	48 8b 44 24 28	 mov	 rax, QWORD PTR descr$[rsp]
  00068	48 89 44 24 58	 mov	 QWORD PTR attr$[rsp], rax
$LN5@call_attri:
$LN7@call_attri:

; 5405 :     }
; 5406 :     res = PyObject_CallFunctionObjArgs(attr, name, NULL);

  0006d	45 33 c0	 xor	 r8d, r8d
  00070	48 8b 54 24 60	 mov	 rdx, QWORD PTR name$[rsp]
  00075	48 8b 4c 24 58	 mov	 rcx, QWORD PTR attr$[rsp]
  0007a	e8 00 00 00 00	 call	 PyObject_CallFunctionObjArgs
  0007f	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax
$LN4@call_attri:

; 5407 :     Py_XDECREF(descr);

  00084	48 83 7c 24 28
	00		 cmp	 QWORD PTR descr$[rsp], 0
  0008a	74 0a		 je	 SHORT $LN1@call_attri
  0008c	48 8b 4c 24 28	 mov	 rcx, QWORD PTR descr$[rsp]
  00091	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@call_attri:
  00096	33 c0		 xor	 eax, eax
  00098	85 c0		 test	 eax, eax
  0009a	75 e8		 jne	 SHORT $LN4@call_attri

; 5408 :     return res;

  0009c	48 8b 44 24 20	 mov	 rax, QWORD PTR res$[rsp]
$LN8@call_attri:

; 5409 : }

  000a1	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000a5	c3		 ret	 0
call_attribute ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$slot_tp_setattro DD imagerel slot_tp_setattro
	DD	imagerel slot_tp_setattro+183
	DD	imagerel $unwind$slot_tp_setattro
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$slot_tp_setattro DD 011301H
	DD	08213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT slot_tp_setattro
_TEXT	SEGMENT
res$ = 48
self$ = 80
name$ = 88
value$ = 96
slot_tp_setattro PROC					; COMDAT

; 5456 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 5457 :     PyObject *res;
; 5458 :     _Py_IDENTIFIER(__delattr__);
; 5459 :     _Py_IDENTIFIER(__setattr__);
; 5460 : 
; 5461 :     if (value == NULL)

  00013	48 83 7c 24 60
	00		 cmp	 QWORD PTR value$[rsp], 0
  00019	75 3a		 jne	 SHORT $LN3@slot_tp_se

; 5462 :         res = call_method(self, &PyId___delattr__, "(O)", name);

  0001b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId___delattr__@?1??slot_tp_setattro@@9@9
  00020	8b c0		 mov	 eax, eax
  00022	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00028	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00031	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00035	4c 8b 4c 24 58	 mov	 r9, QWORD PTR name$[rsp]
  0003a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03IELNPCCE@?$CIO?$CJ?$AA@
  00041	48 8b d0	 mov	 rdx, rax
  00044	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  00049	e8 00 00 00 00	 call	 call_method
  0004e	48 89 44 24 30	 mov	 QWORD PTR res$[rsp], rax

; 5463 :     else

  00053	eb 42		 jmp	 SHORT $LN2@slot_tp_se
$LN3@slot_tp_se:

; 5464 :         res = call_method(self, &PyId___setattr__, "(OO)", name, value);

  00055	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId___setattr__@?1??slot_tp_setattro@@9@9
  0005a	8b c0		 mov	 eax, eax
  0005c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00062	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0006b	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0006f	48 8b 4c 24 60	 mov	 rcx, QWORD PTR value$[rsp]
  00074	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00079	4c 8b 4c 24 58	 mov	 r9, QWORD PTR name$[rsp]
  0007e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_04DEJLHBFK@?$CIOO?$CJ?$AA@
  00085	48 8b d0	 mov	 rdx, rax
  00088	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  0008d	e8 00 00 00 00	 call	 call_method
  00092	48 89 44 24 30	 mov	 QWORD PTR res$[rsp], rax
$LN2@slot_tp_se:

; 5465 :     if (res == NULL)

  00097	48 83 7c 24 30
	00		 cmp	 QWORD PTR res$[rsp], 0
  0009d	75 07		 jne	 SHORT $LN1@slot_tp_se

; 5466 :         return -1;

  0009f	b8 ff ff ff ff	 mov	 eax, -1
  000a4	eb 0c		 jmp	 SHORT $LN4@slot_tp_se
$LN1@slot_tp_se:

; 5467 :     Py_DECREF(res);

  000a6	48 8b 4c 24 30	 mov	 rcx, QWORD PTR res$[rsp]
  000ab	e8 00 00 00 00	 call	 _Py_DecRef

; 5468 :     return 0;

  000b0	33 c0		 xor	 eax, eax
$LN4@slot_tp_se:

; 5469 : }

  000b2	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000b6	c3		 ret	 0
slot_tp_setattro ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$slot_tp_richcompare DD imagerel slot_tp_richcompare
	DD	imagerel slot_tp_richcompare+185
	DD	imagerel $unwind$slot_tp_richcompare
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$slot_tp_richcompare DD 011301H
	DD	08213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT slot_tp_richcompare
_TEXT	SEGMENT
res$ = 32
args$ = 40
func$ = 48
self$ = 80
other$ = 88
op$ = 96
slot_tp_richcompare PROC				; COMDAT

; 5482 : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 5483 :     PyObject *func, *args, *res;
; 5484 : 
; 5485 :     func = lookup_method(self, &name_op[op]);

  00013	48 63 44 24 60	 movsxd	 rax, DWORD PTR op$[rsp]
  00018	48 6b c0 18	 imul	 rax, 24
  0001c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:name_op
  00023	48 03 c8	 add	 rcx, rax
  00026	48 8b c1	 mov	 rax, rcx
  00029	48 8b d0	 mov	 rdx, rax
  0002c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  00031	e8 00 00 00 00	 call	 lookup_method
  00036	48 89 44 24 30	 mov	 QWORD PTR func$[rsp], rax

; 5486 :     if (func == NULL) {

  0003b	48 83 7c 24 30
	00		 cmp	 QWORD PTR func$[rsp], 0
  00041	75 1a		 jne	 SHORT $LN3@slot_tp_ri

; 5487 :         PyErr_Clear();

  00043	e8 00 00 00 00	 call	 PyErr_Clear

; 5488 :         Py_RETURN_NOTIMPLEMENTED;

  00048	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NotImplementedStruct
  0004f	e8 00 00 00 00	 call	 _Py_IncRef
  00054	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NotImplementedStruct
  0005b	eb 57		 jmp	 SHORT $LN4@slot_tp_ri
$LN3@slot_tp_ri:

; 5489 :     }
; 5490 :     args = PyTuple_Pack(1, other);

  0005d	48 8b 54 24 58	 mov	 rdx, QWORD PTR other$[rsp]
  00062	b9 01 00 00 00	 mov	 ecx, 1
  00067	e8 00 00 00 00	 call	 PyTuple_Pack
  0006c	48 89 44 24 28	 mov	 QWORD PTR args$[rsp], rax

; 5491 :     if (args == NULL)

  00071	48 83 7c 24 28
	00		 cmp	 QWORD PTR args$[rsp], 0
  00077	75 0b		 jne	 SHORT $LN2@slot_tp_ri

; 5492 :         res = NULL;

  00079	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR res$[rsp], 0

; 5493 :     else {

  00082	eb 21		 jmp	 SHORT $LN1@slot_tp_ri
$LN2@slot_tp_ri:

; 5494 :         res = PyObject_Call(func, args, NULL);

  00084	45 33 c0	 xor	 r8d, r8d
  00087	48 8b 54 24 28	 mov	 rdx, QWORD PTR args$[rsp]
  0008c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR func$[rsp]
  00091	e8 00 00 00 00	 call	 PyObject_Call
  00096	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax

; 5495 :         Py_DECREF(args);

  0009b	48 8b 4c 24 28	 mov	 rcx, QWORD PTR args$[rsp]
  000a0	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@slot_tp_ri:

; 5496 :     }
; 5497 :     Py_DECREF(func);

  000a5	48 8b 4c 24 30	 mov	 rcx, QWORD PTR func$[rsp]
  000aa	e8 00 00 00 00	 call	 _Py_DecRef

; 5498 :     return res;

  000af	48 8b 44 24 20	 mov	 rax, QWORD PTR res$[rsp]
$LN4@slot_tp_ri:

; 5499 : }

  000b4	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000b8	c3		 ret	 0
slot_tp_richcompare ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CA@OJDKODEI@?8?$CF?4200s?8?5object?5is?5not?5iterable?$AA@ ; `string'
EXTRN	PySeqIter_New:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$slot_tp_iter DD imagerel slot_tp_iter
	DD	imagerel slot_tp_iter+259
	DD	imagerel $unwind$slot_tp_iter
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$slot_tp_iter DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0CA@OJDKODEI@?8?$CF?4200s?8?5object?5is?5not?5iterable?$AA@
CONST	SEGMENT
??_C@_0CA@OJDKODEI@?8?$CF?4200s?8?5object?5is?5not?5iterable?$AA@ DB '''%'
	DB	'.200s'' object is not iterable', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT slot_tp_iter
_TEXT	SEGMENT
res$ = 32
func$ = 40
args$25759 = 48
self$ = 80
slot_tp_iter PROC					; COMDAT

; 5503 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 5504 :     PyObject *func, *res;
; 5505 :     _Py_IDENTIFIER(__iter__);
; 5506 : 
; 5507 :     func = lookup_method(self, &PyId___iter__);

  00009	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId___iter__@?1??slot_tp_iter@@9@9
  0000e	8b c0		 mov	 eax, eax
  00010	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00016	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0001f	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00023	48 8b d0	 mov	 rdx, rax
  00026	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  0002b	e8 00 00 00 00	 call	 lookup_method
  00030	48 89 44 24 28	 mov	 QWORD PTR func$[rsp], rax

; 5508 :     if (func != NULL) {

  00035	48 83 7c 24 28
	00		 cmp	 QWORD PTR func$[rsp], 0
  0003b	74 50		 je	 SHORT $LN3@slot_tp_it

; 5509 :         PyObject *args;
; 5510 :         args = res = PyTuple_New(0);

  0003d	33 c9		 xor	 ecx, ecx
  0003f	e8 00 00 00 00	 call	 PyTuple_New
  00044	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax
  00049	48 8b 44 24 20	 mov	 rax, QWORD PTR res$[rsp]
  0004e	48 89 44 24 30	 mov	 QWORD PTR args$25759[rsp], rax

; 5511 :         if (args != NULL) {

  00053	48 83 7c 24 30
	00		 cmp	 QWORD PTR args$25759[rsp], 0
  00059	74 21		 je	 SHORT $LN2@slot_tp_it

; 5512 :             res = PyObject_Call(func, args, NULL);

  0005b	45 33 c0	 xor	 r8d, r8d
  0005e	48 8b 54 24 30	 mov	 rdx, QWORD PTR args$25759[rsp]
  00063	48 8b 4c 24 28	 mov	 rcx, QWORD PTR func$[rsp]
  00068	e8 00 00 00 00	 call	 PyObject_Call
  0006d	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax

; 5513 :             Py_DECREF(args);

  00072	48 8b 4c 24 30	 mov	 rcx, QWORD PTR args$25759[rsp]
  00077	e8 00 00 00 00	 call	 _Py_DecRef
$LN2@slot_tp_it:

; 5514 :         }
; 5515 :         Py_DECREF(func);

  0007c	48 8b 4c 24 28	 mov	 rcx, QWORD PTR func$[rsp]
  00081	e8 00 00 00 00	 call	 _Py_DecRef

; 5516 :         return res;

  00086	48 8b 44 24 20	 mov	 rax, QWORD PTR res$[rsp]
  0008b	eb 71		 jmp	 SHORT $LN4@slot_tp_it
$LN3@slot_tp_it:

; 5517 :     }
; 5518 :     PyErr_Clear();

  0008d	e8 00 00 00 00	 call	 PyErr_Clear

; 5519 :     func = lookup_method(self, &PyId___getitem__);

  00092	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId___getitem__
  00097	8b c0		 mov	 eax, eax
  00099	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0009f	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  000a8	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  000ac	48 8b d0	 mov	 rdx, rax
  000af	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  000b4	e8 00 00 00 00	 call	 lookup_method
  000b9	48 89 44 24 28	 mov	 QWORD PTR func$[rsp], rax

; 5520 :     if (func == NULL) {

  000be	48 83 7c 24 28
	00		 cmp	 QWORD PTR func$[rsp], 0
  000c4	75 24		 jne	 SHORT $LN1@slot_tp_it

; 5521 :         PyErr_Format(PyExc_TypeError,
; 5522 :                      "'%.200s' object is not iterable",
; 5523 :                      Py_TYPE(self)->tp_name);

  000c6	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  000cb	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000cf	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  000d3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CA@OJDKODEI@?8?$CF?4200s?8?5object?5is?5not?5iterable?$AA@
  000da	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000e1	e8 00 00 00 00	 call	 PyErr_Format

; 5524 :         return NULL;

  000e6	33 c0		 xor	 eax, eax
  000e8	eb 14		 jmp	 SHORT $LN4@slot_tp_it
$LN1@slot_tp_it:

; 5525 :     }
; 5526 :     Py_DECREF(func);

  000ea	48 8b 4c 24 28	 mov	 rcx, QWORD PTR func$[rsp]
  000ef	e8 00 00 00 00	 call	 _Py_DecRef

; 5527 :     return PySeqIter_New(self);

  000f4	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  000f9	e8 00 00 00 00	 call	 PySeqIter_New
$LN4@slot_tp_it:

; 5528 : }

  000fe	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00102	c3		 ret	 0
slot_tp_iter ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$slot_tp_iternext DD imagerel slot_tp_iternext
	DD	imagerel slot_tp_iternext+60
	DD	imagerel $unwind$slot_tp_iternext
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$slot_tp_iternext DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT slot_tp_iternext
_TEXT	SEGMENT
self$ = 48
slot_tp_iternext PROC					; COMDAT

; 5532 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 5533 :     _Py_IDENTIFIER(__next__);
; 5534 :     return call_method(self, &PyId___next__, "()");

  00009	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId___next__@?1??slot_tp_iternext@@9@9
  0000e	8b c0		 mov	 eax, eax
  00010	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00016	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0001f	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00023	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_02HCKGKOFO@?$CI?$CJ?$AA@
  0002a	48 8b d0	 mov	 rdx, rax
  0002d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self$[rsp]
  00032	e8 00 00 00 00	 call	 call_method

; 5535 : }

  00037	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003b	c3		 ret	 0
slot_tp_iternext ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$slot_tp_descr_get DD imagerel slot_tp_descr_get
	DD	imagerel slot_tp_descr_get+218
	DD	imagerel $unwind$slot_tp_descr_get
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$slot_tp_descr_get DD 011301H
	DD	08213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT slot_tp_descr_get
_TEXT	SEGMENT
get$ = 48
tp$ = 56
self$ = 80
obj$ = 88
type$ = 96
slot_tp_descr_get PROC					; COMDAT

; 5539 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 5540 :     PyTypeObject *tp = Py_TYPE(self);

  00013	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00018	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0001c	48 89 44 24 38	 mov	 QWORD PTR tp$[rsp], rax

; 5541 :     PyObject *get;
; 5542 :     _Py_IDENTIFIER(__get__);
; 5543 : 
; 5544 :     get = _PyType_LookupId(tp, &PyId___get__);

  00021	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId___get__@?1??slot_tp_descr_get@@9@9
  00026	8b c0		 mov	 eax, eax
  00028	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0002e	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00037	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0003b	48 8b d0	 mov	 rdx, rax
  0003e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tp$[rsp]
  00043	e8 00 00 00 00	 call	 _PyType_LookupId
  00048	48 89 44 24 30	 mov	 QWORD PTR get$[rsp], rax

; 5545 :     if (get == NULL) {

  0004d	48 83 7c 24 30
	00		 cmp	 QWORD PTR get$[rsp], 0
  00053	75 36		 jne	 SHORT $LN4@slot_tp_de

; 5546 :         /* Avoid further slowdowns */
; 5547 :         if (tp->tp_descr_get == slot_tp_descr_get)

  00055	48 8b 44 24 38	 mov	 rax, QWORD PTR tp$[rsp]
  0005a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:slot_tp_descr_get
  00061	48 39 88 68 01
	00 00		 cmp	 QWORD PTR [rax+360], rcx
  00068	75 10		 jne	 SHORT $LN3@slot_tp_de

; 5548 :             tp->tp_descr_get = NULL;

  0006a	48 8b 44 24 38	 mov	 rax, QWORD PTR tp$[rsp]
  0006f	48 c7 80 68 01
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+360], 0
$LN3@slot_tp_de:

; 5549 :         Py_INCREF(self);

  0007a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  0007f	e8 00 00 00 00	 call	 _Py_IncRef

; 5550 :         return self;

  00084	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00089	eb 4a		 jmp	 SHORT $LN5@slot_tp_de
$LN4@slot_tp_de:

; 5551 :     }
; 5552 :     if (obj == NULL)

  0008b	48 83 7c 24 58
	00		 cmp	 QWORD PTR obj$[rsp], 0
  00091	75 0c		 jne	 SHORT $LN2@slot_tp_de

; 5553 :         obj = Py_None;

  00093	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0009a	48 89 44 24 58	 mov	 QWORD PTR obj$[rsp], rax
$LN2@slot_tp_de:

; 5554 :     if (type == NULL)

  0009f	48 83 7c 24 60
	00		 cmp	 QWORD PTR type$[rsp], 0
  000a5	75 0c		 jne	 SHORT $LN1@slot_tp_de

; 5555 :         type = Py_None;

  000a7	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000ae	48 89 44 24 60	 mov	 QWORD PTR type$[rsp], rax
$LN1@slot_tp_de:

; 5556 :     return PyObject_CallFunctionObjArgs(get, self, obj, type, NULL);

  000b3	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  000bc	4c 8b 4c 24 60	 mov	 r9, QWORD PTR type$[rsp]
  000c1	4c 8b 44 24 58	 mov	 r8, QWORD PTR obj$[rsp]
  000c6	48 8b 54 24 50	 mov	 rdx, QWORD PTR self$[rsp]
  000cb	48 8b 4c 24 30	 mov	 rcx, QWORD PTR get$[rsp]
  000d0	e8 00 00 00 00	 call	 PyObject_CallFunctionObjArgs
$LN5@slot_tp_de:

; 5557 : }

  000d5	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000d9	c3		 ret	 0
slot_tp_descr_get ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$slot_tp_descr_set DD imagerel slot_tp_descr_set
	DD	imagerel slot_tp_descr_set+183
	DD	imagerel $unwind$slot_tp_descr_set
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$slot_tp_descr_set DD 011301H
	DD	08213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT slot_tp_descr_set
_TEXT	SEGMENT
res$ = 48
self$ = 80
target$ = 88
value$ = 96
slot_tp_descr_set PROC					; COMDAT

; 5561 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 5562 :     PyObject *res;
; 5563 :     _Py_IDENTIFIER(__delete__);
; 5564 :     _Py_IDENTIFIER(__set__);
; 5565 : 
; 5566 :     if (value == NULL)

  00013	48 83 7c 24 60
	00		 cmp	 QWORD PTR value$[rsp], 0
  00019	75 3a		 jne	 SHORT $LN3@slot_tp_de@2

; 5567 :         res = call_method(self, &PyId___delete__, "(O)", target);

  0001b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId___delete__@?1??slot_tp_descr_set@@9@9
  00020	8b c0		 mov	 eax, eax
  00022	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00028	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00031	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00035	4c 8b 4c 24 58	 mov	 r9, QWORD PTR target$[rsp]
  0003a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03IELNPCCE@?$CIO?$CJ?$AA@
  00041	48 8b d0	 mov	 rdx, rax
  00044	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  00049	e8 00 00 00 00	 call	 call_method
  0004e	48 89 44 24 30	 mov	 QWORD PTR res$[rsp], rax

; 5568 :     else

  00053	eb 42		 jmp	 SHORT $LN2@slot_tp_de@2
$LN3@slot_tp_de@2:

; 5569 :         res = call_method(self, &PyId___set__, "(OO)", target, value);

  00055	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId___set__@?1??slot_tp_descr_set@@9@9
  0005a	8b c0		 mov	 eax, eax
  0005c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00062	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0006b	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0006f	48 8b 4c 24 60	 mov	 rcx, QWORD PTR value$[rsp]
  00074	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00079	4c 8b 4c 24 58	 mov	 r9, QWORD PTR target$[rsp]
  0007e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_04DEJLHBFK@?$CIOO?$CJ?$AA@
  00085	48 8b d0	 mov	 rdx, rax
  00088	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  0008d	e8 00 00 00 00	 call	 call_method
  00092	48 89 44 24 30	 mov	 QWORD PTR res$[rsp], rax
$LN2@slot_tp_de@2:

; 5570 :     if (res == NULL)

  00097	48 83 7c 24 30
	00		 cmp	 QWORD PTR res$[rsp], 0
  0009d	75 07		 jne	 SHORT $LN1@slot_tp_de@2

; 5571 :         return -1;

  0009f	b8 ff ff ff ff	 mov	 eax, -1
  000a4	eb 0c		 jmp	 SHORT $LN4@slot_tp_de@2
$LN1@slot_tp_de@2:

; 5572 :     Py_DECREF(res);

  000a6	48 8b 4c 24 30	 mov	 rcx, QWORD PTR res$[rsp]
  000ab	e8 00 00 00 00	 call	 _Py_DecRef

; 5573 :     return 0;

  000b0	33 c0		 xor	 eax, eax
$LN4@slot_tp_de@2:

; 5574 : }

  000b2	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000b6	c3		 ret	 0
slot_tp_descr_set ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CM@HKPEOANK@__init__?$CI?$CJ?5should?5return?5None?0?5n@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$slot_tp_init DD imagerel slot_tp_init
	DD	imagerel slot_tp_init+208
	DD	imagerel $unwind$slot_tp_init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$slot_tp_init DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT ??_C@_0CM@HKPEOANK@__init__?$CI?$CJ?5should?5return?5None?0?5n@
CONST	SEGMENT
??_C@_0CM@HKPEOANK@__init__?$CI?$CJ?5should?5return?5None?0?5n@ DB '__ini'
	DB	't__() should return None, not ''%.200s''', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT slot_tp_init
_TEXT	SEGMENT
res$ = 32
meth$ = 40
self$ = 64
args$ = 72
kwds$ = 80
slot_tp_init PROC					; COMDAT

; 5578 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 5579 :     _Py_IDENTIFIER(__init__);
; 5580 :     PyObject *meth = lookup_method(self, &PyId___init__);

  00013	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId___init__@?1??slot_tp_init@@9@9
  00018	8b c0		 mov	 eax, eax
  0001a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00020	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00029	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0002d	48 8b d0	 mov	 rdx, rax
  00030	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  00035	e8 00 00 00 00	 call	 lookup_method
  0003a	48 89 44 24 28	 mov	 QWORD PTR meth$[rsp], rax

; 5581 :     PyObject *res;
; 5582 : 
; 5583 :     if (meth == NULL)

  0003f	48 83 7c 24 28
	00		 cmp	 QWORD PTR meth$[rsp], 0
  00045	75 07		 jne	 SHORT $LN3@slot_tp_in

; 5584 :         return -1;

  00047	b8 ff ff ff ff	 mov	 eax, -1
  0004c	eb 7d		 jmp	 SHORT $LN4@slot_tp_in
$LN3@slot_tp_in:

; 5585 :     res = PyObject_Call(meth, args, kwds);

  0004e	4c 8b 44 24 50	 mov	 r8, QWORD PTR kwds$[rsp]
  00053	48 8b 54 24 48	 mov	 rdx, QWORD PTR args$[rsp]
  00058	48 8b 4c 24 28	 mov	 rcx, QWORD PTR meth$[rsp]
  0005d	e8 00 00 00 00	 call	 PyObject_Call
  00062	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax

; 5586 :     Py_DECREF(meth);

  00067	48 8b 4c 24 28	 mov	 rcx, QWORD PTR meth$[rsp]
  0006c	e8 00 00 00 00	 call	 _Py_DecRef

; 5587 :     if (res == NULL)

  00071	48 83 7c 24 20
	00		 cmp	 QWORD PTR res$[rsp], 0
  00077	75 07		 jne	 SHORT $LN2@slot_tp_in

; 5588 :         return -1;

  00079	b8 ff ff ff ff	 mov	 eax, -1
  0007e	eb 4b		 jmp	 SHORT $LN4@slot_tp_in
$LN2@slot_tp_in:

; 5589 :     if (res != Py_None) {

  00080	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00087	48 39 44 24 20	 cmp	 QWORD PTR res$[rsp], rax
  0008c	74 31		 je	 SHORT $LN1@slot_tp_in

; 5590 :         PyErr_Format(PyExc_TypeError,
; 5591 :                      "__init__() should return None, not '%.200s'",
; 5592 :                      Py_TYPE(res)->tp_name);

  0008e	48 8b 44 24 20	 mov	 rax, QWORD PTR res$[rsp]
  00093	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00097	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  0009b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CM@HKPEOANK@__init__?$CI?$CJ?5should?5return?5None?0?5n@
  000a2	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000a9	e8 00 00 00 00	 call	 PyErr_Format

; 5593 :         Py_DECREF(res);

  000ae	48 8b 4c 24 20	 mov	 rcx, QWORD PTR res$[rsp]
  000b3	e8 00 00 00 00	 call	 _Py_DecRef

; 5594 :         return -1;

  000b8	b8 ff ff ff ff	 mov	 eax, -1
  000bd	eb 0c		 jmp	 SHORT $LN4@slot_tp_in
$LN1@slot_tp_in:

; 5595 :     }
; 5596 :     Py_DECREF(res);

  000bf	48 8b 4c 24 20	 mov	 rcx, QWORD PTR res$[rsp]
  000c4	e8 00 00 00 00	 call	 _Py_DecRef

; 5597 :     return 0;

  000c9	33 c0		 xor	 eax, eax
$LN4@slot_tp_in:

; 5598 : }

  000cb	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000cf	c3		 ret	 0
slot_tp_init ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$slot_tp_new DD imagerel slot_tp_new
	DD	imagerel slot_tp_new+347
	DD	imagerel $unwind$slot_tp_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$slot_tp_new DD 011301H
	DD	0a213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT slot_tp_new
_TEXT	SEGMENT
newargs$ = 32
x$ = 40
n$ = 48
i$ = 56
func$ = 64
type$ = 96
args$ = 104
kwds$ = 112
slot_tp_new PROC					; COMDAT

; 5602 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 5603 :     PyObject *func;
; 5604 :     PyObject *newargs, *x;
; 5605 :     Py_ssize_t i, n;
; 5606 :     _Py_IDENTIFIER(__new__);
; 5607 : 
; 5608 :     func = _PyObject_GetAttrId((PyObject *)type, &PyId___new__);

  00013	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId___new__@?1??slot_tp_new@@9@9
  00018	8b c0		 mov	 eax, eax
  0001a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00020	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00029	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0002d	48 8b d0	 mov	 rdx, rax
  00030	48 8b 4c 24 60	 mov	 rcx, QWORD PTR type$[rsp]
  00035	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  0003a	48 89 44 24 40	 mov	 QWORD PTR func$[rsp], rax

; 5609 :     if (func == NULL)

  0003f	48 83 7c 24 40
	00		 cmp	 QWORD PTR func$[rsp], 0
  00045	75 07		 jne	 SHORT $LN5@slot_tp_ne

; 5610 :         return NULL;

  00047	33 c0		 xor	 eax, eax
  00049	e9 08 01 00 00	 jmp	 $LN6@slot_tp_ne
$LN5@slot_tp_ne:

; 5611 :     assert(PyTuple_Check(args));

  0004e	48 8b 44 24 68	 mov	 rax, QWORD PTR args$[rsp]
  00053	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00057	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0005d	25 00 00 00 04	 and	 eax, 67108864		; 04000000H
  00062	85 c0		 test	 eax, eax
  00064	75 1c		 jne	 SHORT $LN8@slot_tp_ne
  00066	41 b8 eb 15 00
	00		 mov	 r8d, 5611		; 000015ebH
  0006c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@GJLLIOPA@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAt?$AAy?$AAp?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00073	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CI@KAJNBGPM@?$AAP?$AAy?$AAT?$AAu?$AAp?$AAl?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAa?$AAr?$AAg?$AAs?$AA?$CJ?$AA?$AA@
  0007a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00080	33 c0		 xor	 eax, eax
$LN8@slot_tp_ne:

; 5612 :     n = PyTuple_GET_SIZE(args);

  00082	48 8b 44 24 68	 mov	 rax, QWORD PTR args$[rsp]
  00087	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0008b	48 89 44 24 30	 mov	 QWORD PTR n$[rsp], rax

; 5613 :     newargs = PyTuple_New(n+1);

  00090	48 8b 44 24 30	 mov	 rax, QWORD PTR n$[rsp]
  00095	48 ff c0	 inc	 rax
  00098	48 8b c8	 mov	 rcx, rax
  0009b	e8 00 00 00 00	 call	 PyTuple_New
  000a0	48 89 44 24 20	 mov	 QWORD PTR newargs$[rsp], rax

; 5614 :     if (newargs == NULL)

  000a5	48 83 7c 24 20
	00		 cmp	 QWORD PTR newargs$[rsp], 0
  000ab	75 07		 jne	 SHORT $LN4@slot_tp_ne

; 5615 :         return NULL;

  000ad	33 c0		 xor	 eax, eax
  000af	e9 a2 00 00 00	 jmp	 $LN6@slot_tp_ne
$LN4@slot_tp_ne:

; 5616 :     Py_INCREF(type);

  000b4	48 8b 4c 24 60	 mov	 rcx, QWORD PTR type$[rsp]
  000b9	e8 00 00 00 00	 call	 _Py_IncRef

; 5617 :     PyTuple_SET_ITEM(newargs, 0, (PyObject *)type);

  000be	48 8b 44 24 20	 mov	 rax, QWORD PTR newargs$[rsp]
  000c3	48 8b 4c 24 60	 mov	 rcx, QWORD PTR type$[rsp]
  000c8	48 89 48 70	 mov	 QWORD PTR [rax+112], rcx

; 5618 :     for (i = 0; i < n; i++) {

  000cc	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  000d5	eb 0d		 jmp	 SHORT $LN3@slot_tp_ne
$LN2@slot_tp_ne:
  000d7	48 8b 44 24 38	 mov	 rax, QWORD PTR i$[rsp]
  000dc	48 ff c0	 inc	 rax
  000df	48 89 44 24 38	 mov	 QWORD PTR i$[rsp], rax
$LN3@slot_tp_ne:
  000e4	48 8b 44 24 30	 mov	 rax, QWORD PTR n$[rsp]
  000e9	48 39 44 24 38	 cmp	 QWORD PTR i$[rsp], rax
  000ee	7d 34		 jge	 SHORT $LN1@slot_tp_ne

; 5619 :         x = PyTuple_GET_ITEM(args, i);

  000f0	48 8b 44 24 68	 mov	 rax, QWORD PTR args$[rsp]
  000f5	48 8b 4c 24 38	 mov	 rcx, QWORD PTR i$[rsp]
  000fa	48 8b 44 c8 70	 mov	 rax, QWORD PTR [rax+rcx*8+112]
  000ff	48 89 44 24 28	 mov	 QWORD PTR x$[rsp], rax

; 5620 :         Py_INCREF(x);

  00104	48 8b 4c 24 28	 mov	 rcx, QWORD PTR x$[rsp]
  00109	e8 00 00 00 00	 call	 _Py_IncRef

; 5621 :         PyTuple_SET_ITEM(newargs, i+1, x);

  0010e	48 8b 44 24 20	 mov	 rax, QWORD PTR newargs$[rsp]
  00113	48 8b 4c 24 38	 mov	 rcx, QWORD PTR i$[rsp]
  00118	48 8b 54 24 28	 mov	 rdx, QWORD PTR x$[rsp]
  0011d	48 89 54 c8 78	 mov	 QWORD PTR [rax+rcx*8+120], rdx

; 5622 :     }

  00122	eb b3		 jmp	 SHORT $LN2@slot_tp_ne
$LN1@slot_tp_ne:

; 5623 :     x = PyObject_Call(func, newargs, kwds);

  00124	4c 8b 44 24 70	 mov	 r8, QWORD PTR kwds$[rsp]
  00129	48 8b 54 24 20	 mov	 rdx, QWORD PTR newargs$[rsp]
  0012e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR func$[rsp]
  00133	e8 00 00 00 00	 call	 PyObject_Call
  00138	48 89 44 24 28	 mov	 QWORD PTR x$[rsp], rax

; 5624 :     Py_DECREF(newargs);

  0013d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR newargs$[rsp]
  00142	e8 00 00 00 00	 call	 _Py_DecRef

; 5625 :     Py_DECREF(func);

  00147	48 8b 4c 24 40	 mov	 rcx, QWORD PTR func$[rsp]
  0014c	e8 00 00 00 00	 call	 _Py_DecRef

; 5626 :     return x;

  00151	48 8b 44 24 28	 mov	 rax, QWORD PTR x$[rsp]
$LN6@slot_tp_ne:

; 5627 : }

  00156	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0015a	c3		 ret	 0
slot_tp_new ENDP
_TEXT	ENDS
PUBLIC	??_C@_1KI@PLNEMBJP@?$AA?$CB?$AAP?$AAy?$AAT?$AAy?$AAp?$AAe?$AA_?$AAI?$AAS?$AA_?$AAG?$AAC?$AA?$CI?$AAP?$AAy?$AA_?$AAT?$AAY?$AAP?$AAE?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?$CJ?$AA?$CJ?$AA?5?$AA?$HM?$AA?$HM?$AA?5@ ; `string'
PUBLIC	??_C@_0M@BGMDKOPC@slot_tp_del?$AA@		; `string'
PUBLIC	??_C@_1CI@JJIGMCON@?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAo?$AAb?$AA_?$AAr?$AAe?$AAf?$AAc?$AAn?$AAt?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CK@GBMONCHI@?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAo?$AAb?$AA_?$AAr?$AAe?$AAf?$AAc?$AAn?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@ ; `string'
EXTRN	PyErr_Restore:PROC
EXTRN	PyErr_WriteUnraisable:PROC
EXTRN	PyErr_Fetch:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$slot_tp_del DD imagerel slot_tp_del
	DD	imagerel slot_tp_del+594
	DD	imagerel $unwind$slot_tp_del
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$slot_tp_del DD 020c01H
	DD	011010cH
xdata	ENDS
;	COMDAT ??_C@_1KI@PLNEMBJP@?$AA?$CB?$AAP?$AAy?$AAT?$AAy?$AAp?$AAe?$AA_?$AAI?$AAS?$AA_?$AAG?$AAC?$AA?$CI?$AAP?$AAy?$AA_?$AAT?$AAY?$AAP?$AAE?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?$CJ?$AA?$CJ?$AA?5?$AA?$HM?$AA?$HM?$AA?5@
CONST	SEGMENT
??_C@_1KI@PLNEMBJP@?$AA?$CB?$AAP?$AAy?$AAT?$AAy?$AAp?$AAe?$AA_?$AAI?$AAS?$AA_?$AAG?$AAC?$AA?$CI?$AAP?$AAy?$AA_?$AAT?$AAY?$AAP?$AAE?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?$CJ?$AA?$CJ?$AA?5?$AA?$HM?$AA?$HM?$AA?5@ DB '!'
	DB	00H, 'P', 00H, 'y', 00H, 'T', 00H, 'y', 00H, 'p', 00H, 'e', 00H
	DB	'_', 00H, 'I', 00H, 'S', 00H, '_', 00H, 'G', 00H, 'C', 00H, '('
	DB	00H, 'P', 00H, 'y', 00H, '_', 00H, 'T', 00H, 'Y', 00H, 'P', 00H
	DB	'E', 00H, '(', 00H, 's', 00H, 'e', 00H, 'l', 00H, 'f', 00H, ')'
	DB	00H, ')', 00H, ' ', 00H, '|', 00H, '|', 00H, ' ', 00H, '_', 00H
	DB	'P', 00H, 'y', 00H, '_', 00H, 'A', 00H, 'S', 00H, '_', 00H, 'G'
	DB	00H, 'C', 00H, '(', 00H, 's', 00H, 'e', 00H, 'l', 00H, 'f', 00H
	DB	')', 00H, '-', 00H, '>', 00H, 'g', 00H, 'c', 00H, '.', 00H, 'g'
	DB	00H, 'c', 00H, '_', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 's', 00H
	DB	' ', 00H, '!', 00H, '=', 00H, ' ', 00H, '_', 00H, 'P', 00H, 'y'
	DB	00H, 'G', 00H, 'C', 00H, '_', 00H, 'R', 00H, 'E', 00H, 'F', 00H
	DB	'S', 00H, '_', 00H, 'U', 00H, 'N', 00H, 'T', 00H, 'R', 00H, 'A'
	DB	00H, 'C', 00H, 'K', 00H, 'E', 00H, 'D', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@BGMDKOPC@slot_tp_del?$AA@
CONST	SEGMENT
??_C@_0M@BGMDKOPC@slot_tp_del?$AA@ DB 'slot_tp_del', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CI@JJIGMCON@?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAo?$AAb?$AA_?$AAr?$AAe?$AAf?$AAc?$AAn?$AAt?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1CI@JJIGMCON@?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAo?$AAb?$AA_?$AAr?$AAe?$AAf?$AAc?$AAn?$AAt?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@ DB 's'
	DB	00H, 'e', 00H, 'l', 00H, 'f', 00H, '-', 00H, '>', 00H, 'o', 00H
	DB	'b', 00H, '_', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'c', 00H, 'n'
	DB	00H, 't', 00H, ' ', 00H, '>', 00H, ' ', 00H, '0', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@GBMONCHI@?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAo?$AAb?$AA_?$AAr?$AAe?$AAf?$AAc?$AAn?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1CK@GBMONCHI@?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAo?$AAb?$AA_?$AAr?$AAe?$AAf?$AAc?$AAn?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@ DB 's'
	DB	00H, 'e', 00H, 'l', 00H, 'f', 00H, '-', 00H, '>', 00H, 'o', 00H
	DB	'b', 00H, '_', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 'c', 00H, 'n'
	DB	00H, 't', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '0', 00H
	DB	00H, 00H					; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT slot_tp_del
_TEXT	SEGMENT
error_type$ = 48
res$ = 56
error_value$ = 64
del$ = 72
error_traceback$ = 80
refcnt$25908 = 88
tv135 = 96
tv147 = 104
tv145 = 108
tv157 = 112
self$ = 144
slot_tp_del PROC					; COMDAT

; 5631 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 5632 :     _Py_IDENTIFIER(__del__);
; 5633 :     PyObject *del, *res;
; 5634 :     PyObject *error_type, *error_value, *error_traceback;
; 5635 : 
; 5636 :     /* Temporarily resurrect the object. */
; 5637 :     assert(self->ob_refcnt == 0);

  0000c	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00014	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  00019	74 1c		 je	 SHORT $LN7@slot_tp_de@3
  0001b	41 b8 05 16 00
	00		 mov	 r8d, 5637		; 00001605H
  00021	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@GJLLIOPA@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAt?$AAy?$AAp?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@GBMONCHI@?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAo?$AAb?$AA_?$AAr?$AAe?$AAf?$AAc?$AAn?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@
  0002f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00035	33 c0		 xor	 eax, eax
$LN7@slot_tp_de@3:

; 5638 :     self->ob_refcnt = 1;

  00037	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0003f	48 c7 40 50 01
	00 00 00	 mov	 QWORD PTR [rax+80], 1

; 5639 : 
; 5640 :     /* Save the current exception, if any. */
; 5641 :     PyErr_Fetch(&error_type, &error_value, &error_traceback);

  00047	4c 8d 44 24 50	 lea	 r8, QWORD PTR error_traceback$[rsp]
  0004c	48 8d 54 24 40	 lea	 rdx, QWORD PTR error_value$[rsp]
  00051	48 8d 4c 24 30	 lea	 rcx, QWORD PTR error_type$[rsp]
  00056	e8 00 00 00 00	 call	 PyErr_Fetch

; 5642 : 
; 5643 :     /* Execute __del__ method, if any. */
; 5644 :     del = lookup_maybe(self, &PyId___del__);

  0005b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId___del__@?1??slot_tp_del@@9@9
  00060	8b c0		 mov	 eax, eax
  00062	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00068	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00071	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00075	48 8b d0	 mov	 rdx, rax
  00078	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00080	e8 00 00 00 00	 call	 lookup_maybe
  00085	48 89 44 24 48	 mov	 QWORD PTR del$[rsp], rax

; 5645 :     if (del != NULL) {

  0008a	48 83 7c 24 48
	00		 cmp	 QWORD PTR del$[rsp], 0
  00090	74 3c		 je	 SHORT $LN4@slot_tp_de@3

; 5646 :         res = PyEval_CallObject(del, NULL);

  00092	45 33 c0	 xor	 r8d, r8d
  00095	33 d2		 xor	 edx, edx
  00097	48 8b 4c 24 48	 mov	 rcx, QWORD PTR del$[rsp]
  0009c	e8 00 00 00 00	 call	 PyEval_CallObjectWithKeywords
  000a1	48 89 44 24 38	 mov	 QWORD PTR res$[rsp], rax

; 5647 :         if (res == NULL)

  000a6	48 83 7c 24 38
	00		 cmp	 QWORD PTR res$[rsp], 0
  000ac	75 0c		 jne	 SHORT $LN3@slot_tp_de@3

; 5648 :             PyErr_WriteUnraisable(del);

  000ae	48 8b 4c 24 48	 mov	 rcx, QWORD PTR del$[rsp]
  000b3	e8 00 00 00 00	 call	 PyErr_WriteUnraisable

; 5649 :         else

  000b8	eb 0a		 jmp	 SHORT $LN2@slot_tp_de@3
$LN3@slot_tp_de@3:

; 5650 :             Py_DECREF(res);

  000ba	48 8b 4c 24 38	 mov	 rcx, QWORD PTR res$[rsp]
  000bf	e8 00 00 00 00	 call	 _Py_DecRef
$LN2@slot_tp_de@3:

; 5651 :         Py_DECREF(del);

  000c4	48 8b 4c 24 48	 mov	 rcx, QWORD PTR del$[rsp]
  000c9	e8 00 00 00 00	 call	 _Py_DecRef
$LN4@slot_tp_de@3:

; 5652 :     }
; 5653 : 
; 5654 :     /* Restore the saved exception. */
; 5655 :     PyErr_Restore(error_type, error_value, error_traceback);

  000ce	4c 8b 44 24 50	 mov	 r8, QWORD PTR error_traceback$[rsp]
  000d3	48 8b 54 24 40	 mov	 rdx, QWORD PTR error_value$[rsp]
  000d8	48 8b 4c 24 30	 mov	 rcx, QWORD PTR error_type$[rsp]
  000dd	e8 00 00 00 00	 call	 PyErr_Restore

; 5656 : 
; 5657 :     /* Undo the temporary resurrection; can't use DECREF here, it would
; 5658 :      * cause a recursive call.
; 5659 :      */
; 5660 :     assert(self->ob_refcnt > 0);

  000e2	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  000ea	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000ef	7f 1c		 jg	 SHORT $LN8@slot_tp_de@3
  000f1	41 b8 1c 16 00
	00		 mov	 r8d, 5660		; 0000161cH
  000f7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@GJLLIOPA@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAt?$AAy?$AAp?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  000fe	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CI@JJIGMCON@?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAo?$AAb?$AA_?$AAr?$AAe?$AAf?$AAc?$AAn?$AAt?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@
  00105	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0010b	33 c0		 xor	 eax, eax
$LN8@slot_tp_de@3:

; 5661 :     if (--self->ob_refcnt == 0)

  0010d	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00115	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00119	48 ff c8	 dec	 rax
  0011c	48 89 44 24 60	 mov	 QWORD PTR tv135[rsp], rax
  00121	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00129	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tv135[rsp]
  0012e	48 89 48 50	 mov	 QWORD PTR [rax+80], rcx
  00132	48 83 7c 24 60
	00		 cmp	 QWORD PTR tv135[rsp], 0
  00138	75 05		 jne	 SHORT $LN1@slot_tp_de@3

; 5662 :         return;         /* this is the normal path out */

  0013a	e9 0b 01 00 00	 jmp	 $LN5@slot_tp_de@3
$LN1@slot_tp_de@3:

; 5663 : 
; 5664 :     /* __del__ resurrected it!  Make it look like the original Py_DECREF
; 5665 :      * never happened.
; 5666 :      */
; 5667 :     {
; 5668 :         Py_ssize_t refcnt = self->ob_refcnt;

  0013f	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00147	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  0014b	48 89 44 24 58	 mov	 QWORD PTR refcnt$25908[rsp], rax

; 5669 :         _Py_NewReference(self);

  00150	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00158	e8 00 00 00 00	 call	 _Py_NewReference

; 5670 :         self->ob_refcnt = refcnt;

  0015d	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00165	48 8b 4c 24 58	 mov	 rcx, QWORD PTR refcnt$25908[rsp]
  0016a	48 89 48 50	 mov	 QWORD PTR [rax+80], rcx

; 5671 :     }
; 5672 :     assert(!PyType_IS_GC(Py_TYPE(self)) ||
; 5673 :            _Py_AS_GC(self)->gc.gc_refs != _PyGC_REFS_UNTRACKED);

  0016e	e8 00 00 00 00	 call	 _Py_PXCTX
  00173	85 c0		 test	 eax, eax
  00175	74 0a		 je	 SHORT $LN11@slot_tp_de@3
  00177	c7 44 24 68 00
	00 00 00	 mov	 DWORD PTR tv147[rsp], 0
  0017f	eb 35		 jmp	 SHORT $LN12@slot_tp_de@3
$LN11@slot_tp_de@3:
  00181	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00189	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0018d	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00193	25 00 40 00 00	 and	 eax, 16384		; 00004000H
  00198	85 c0		 test	 eax, eax
  0019a	74 0a		 je	 SHORT $LN9@slot_tp_de@3
  0019c	c7 44 24 6c 01
	00 00 00	 mov	 DWORD PTR tv145[rsp], 1
  001a4	eb 08		 jmp	 SHORT $LN10@slot_tp_de@3
$LN9@slot_tp_de@3:
  001a6	c7 44 24 6c 00
	00 00 00	 mov	 DWORD PTR tv145[rsp], 0
$LN10@slot_tp_de@3:
  001ae	8b 44 24 6c	 mov	 eax, DWORD PTR tv145[rsp]
  001b2	89 44 24 68	 mov	 DWORD PTR tv147[rsp], eax
$LN12@slot_tp_de@3:
  001b6	83 7c 24 68 00	 cmp	 DWORD PTR tv147[rsp], 0
  001bb	74 71		 je	 SHORT $LN15@slot_tp_de@3
  001bd	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  001c5	4c 8b 8c 24 90
	00 00 00	 mov	 r9, QWORD PTR self$[rsp]
  001cd	41 b8 29 16 00
	00		 mov	 r8d, 5673		; 00001629H
  001d3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@PKBBAMFA@?4?4?2Objects?2typeobject?4c?$AA@
  001da	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@BGMDKOPC@slot_tp_del?$AA@
  001e1	e8 00 00 00 00	 call	 _PyParallel_Guard
  001e6	85 c0		 test	 eax, eax
  001e8	74 0b		 je	 SHORT $LN13@slot_tp_de@3
  001ea	48 c7 44 24 70
	00 00 00 00	 mov	 QWORD PTR tv157[rsp], 0
  001f3	eb 11		 jmp	 SHORT $LN14@slot_tp_de@3
$LN13@slot_tp_de@3:
  001f5	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  001fd	48 83 e8 18	 sub	 rax, 24
  00201	48 89 44 24 70	 mov	 QWORD PTR tv157[rsp], rax
$LN14@slot_tp_de@3:
  00206	48 8b 44 24 70	 mov	 rax, QWORD PTR tv157[rsp]
  0020b	48 83 78 10 fe	 cmp	 QWORD PTR [rax+16], -2
  00210	75 1c		 jne	 SHORT $LN15@slot_tp_de@3
  00212	41 b8 29 16 00
	00		 mov	 r8d, 5673		; 00001629H
  00218	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@GJLLIOPA@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAt?$AAy?$AAp?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  0021f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1KI@PLNEMBJP@?$AA?$CB?$AAP?$AAy?$AAT?$AAy?$AAp?$AAe?$AA_?$AAI?$AAS?$AA_?$AAG?$AAC?$AA?$CI?$AAP?$AAy?$AA_?$AAT?$AAY?$AAP?$AAE?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?$CJ?$AA?$CJ?$AA?5?$AA?$HM?$AA?$HM?$AA?5@
  00226	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0022c	33 c0		 xor	 eax, eax
$LN15@slot_tp_de@3:

; 5674 :     /* If Py_REF_DEBUG, _Py_NewReference bumped _Py_RefTotal, so
; 5675 :      * we need to undo that. */
; 5676 :     _Py_DEC_REFTOTAL;

  0022e	e8 00 00 00 00	 call	 _Py_PXCTX
  00233	85 c0		 test	 eax, eax
  00235	74 02		 je	 SHORT $LN16@slot_tp_de@3
  00237	eb 11		 jmp	 SHORT $LN17@slot_tp_de@3
$LN16@slot_tp_de@3:
  00239	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00240	48 ff c8	 dec	 rax
  00243	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN17@slot_tp_de@3:
$LN5@slot_tp_de@3:

; 5677 :     /* If Py_TRACE_REFS, _Py_NewReference re-added self to the object
; 5678 :      * chain, so no more to do there.
; 5679 :      * If COUNT_ALLOCS, the original decref bumped tp_frees, and
; 5680 :      * _Py_NewReference bumped tp_allocs:  both of those need to be
; 5681 :      * undone.
; 5682 :      */
; 5683 : #ifdef COUNT_ALLOCS
; 5684 :     --Py_TYPE(self)->tp_frees;
; 5685 :     --Py_TYPE(self)->tp_allocs;
; 5686 : #endif
; 5687 : }

  0024a	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  00251	c3		 ret	 0
slot_tp_del ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$update_slot DD imagerel update_slot
	DD	imagerel update_slot+360
	DD	imagerel $unwind$update_slot
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$update_slot DD 021101H
	DD	0130111H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT update_slot
_TEXT	SEGMENT
p$ = 32
ptrs$ = 48
pp$ = 128
offset$ = 136
type$ = 160
name$ = 168
update_slot PROC					; COMDAT

; 6114 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 6115 :     slotdef *ptrs[MAX_EQUIV];
; 6116 :     slotdef *p;
; 6117 :     slotdef **pp;
; 6118 :     int offset;
; 6119 : 
; 6120 :     /* Clear the VALID_VERSION flag of 'type' and all its
; 6121 :        subclasses.  This could possibly be unified with the
; 6122 :        update_subclasses() recursion below, but carefully:
; 6123 :        they each have their own conditions on which to stop
; 6124 :        recursing into subclasses. */
; 6125 :     PyType_Modified(type);

  00011	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR type$[rsp]
  00019	e8 00 00 00 00	 call	 PyType_Modified

; 6126 : 
; 6127 :     init_slotdefs();

  0001e	e8 00 00 00 00	 call	 init_slotdefs

; 6128 :     pp = ptrs;

  00023	48 8d 44 24 30	 lea	 rax, QWORD PTR ptrs$[rsp]
  00028	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR pp$[rsp], rax

; 6129 :     for (p = slotdefs; p->name; p++) {

  00030	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:slotdefs
  00037	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax
  0003c	eb 0e		 jmp	 SHORT $LN10@update_slo
$LN9@update_slo:
  0003e	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00043	48 83 c0 38	 add	 rax, 56			; 00000038H
  00047	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax
$LN10@update_slo:
  0004c	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00051	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00055	74 39		 je	 SHORT $LN8@update_slo

; 6130 :         /* XXX assume name is interned! */
; 6131 :         if (p->name_strobj == name)

  00057	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0005c	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR name$[rsp]
  00064	48 39 48 30	 cmp	 QWORD PTR [rax+48], rcx
  00068	75 24		 jne	 SHORT $LN7@update_slo

; 6132 :             *pp++ = p;

  0006a	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR pp$[rsp]
  00072	48 8b 4c 24 20	 mov	 rcx, QWORD PTR p$[rsp]
  00077	48 89 08	 mov	 QWORD PTR [rax], rcx
  0007a	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR pp$[rsp]
  00082	48 83 c0 08	 add	 rax, 8
  00086	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR pp$[rsp], rax
$LN7@update_slo:

; 6133 :     }

  0008e	eb ae		 jmp	 SHORT $LN9@update_slo
$LN8@update_slo:

; 6134 :     *pp = NULL;

  00090	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR pp$[rsp]
  00098	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 6135 :     for (pp = ptrs; *pp; pp++) {

  0009f	48 8d 44 24 30	 lea	 rax, QWORD PTR ptrs$[rsp]
  000a4	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR pp$[rsp], rax
  000ac	eb 14		 jmp	 SHORT $LN6@update_slo
$LN5@update_slo:
  000ae	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR pp$[rsp]
  000b6	48 83 c0 08	 add	 rax, 8
  000ba	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR pp$[rsp], rax
$LN6@update_slo:
  000c2	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR pp$[rsp]
  000ca	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  000ce	74 63		 je	 SHORT $LN4@update_slo

; 6136 :         p = *pp;

  000d0	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR pp$[rsp]
  000d8	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000db	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax

; 6137 :         offset = p->offset;

  000e0	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  000e5	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  000e8	89 84 24 88 00
	00 00		 mov	 DWORD PTR offset$[rsp], eax
$LN3@update_slo:

; 6138 :         while (p > slotdefs && (p-1)->offset == offset)

  000ef	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:slotdefs
  000f6	48 39 44 24 20	 cmp	 QWORD PTR p$[rsp], rax
  000fb	76 21		 jbe	 SHORT $LN2@update_slo
  000fd	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00102	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR offset$[rsp]
  00109	39 48 d0	 cmp	 DWORD PTR [rax-48], ecx
  0010c	75 10		 jne	 SHORT $LN2@update_slo

; 6139 :             --p;

  0010e	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00113	48 83 e8 38	 sub	 rax, 56			; 00000038H
  00117	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax
  0011c	eb d1		 jmp	 SHORT $LN3@update_slo
$LN2@update_slo:

; 6140 :         *pp = p;

  0011e	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR pp$[rsp]
  00126	48 8b 4c 24 20	 mov	 rcx, QWORD PTR p$[rsp]
  0012b	48 89 08	 mov	 QWORD PTR [rax], rcx

; 6141 :     }

  0012e	e9 7b ff ff ff	 jmp	 $LN5@update_slo
$LN4@update_slo:

; 6142 :     if (ptrs[0] == NULL)

  00133	48 83 7c 24 30
	00		 cmp	 QWORD PTR ptrs$[rsp], 0
  00139	75 04		 jne	 SHORT $LN1@update_slo

; 6143 :         return 0; /* Not an attribute that affects any slots */

  0013b	33 c0		 xor	 eax, eax
  0013d	eb 21		 jmp	 SHORT $LN11@update_slo
$LN1@update_slo:

; 6144 :     return update_subclasses(type, name,
; 6145 :                              update_slots_callback, (void *)ptrs);

  0013f	4c 8d 4c 24 30	 lea	 r9, QWORD PTR ptrs$[rsp]
  00144	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:update_slots_callback
  0014b	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR name$[rsp]
  00153	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR type$[rsp]
  0015b	e8 00 00 00 00	 call	 update_subclasses
$LN11@update_slo:

; 6146 : }

  00160	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  00167	c3		 ret	 0
update_slot ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$update_slots_callback DD imagerel update_slots_callback
	DD	imagerel update_slots_callback+78
	DD	imagerel $unwind$update_slots_callback
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$update_slots_callback DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT update_slots_callback
_TEXT	SEGMENT
pp$ = 32
type$ = 64
data$ = 72
update_slots_callback PROC				; COMDAT

; 6083 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 6084 :     slotdef **pp = (slotdef **)data;

  0000e	48 8b 44 24 48	 mov	 rax, QWORD PTR data$[rsp]
  00013	48 89 44 24 20	 mov	 QWORD PTR pp$[rsp], rax

; 6085 : 
; 6086 :     for (; *pp; pp++)

  00018	eb 0e		 jmp	 SHORT $LN3@update_slo@2
$LN2@update_slo@2:
  0001a	48 8b 44 24 20	 mov	 rax, QWORD PTR pp$[rsp]
  0001f	48 83 c0 08	 add	 rax, 8
  00023	48 89 44 24 20	 mov	 QWORD PTR pp$[rsp], rax
$LN3@update_slo@2:
  00028	48 8b 44 24 20	 mov	 rax, QWORD PTR pp$[rsp]
  0002d	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00031	74 14		 je	 SHORT $LN1@update_slo@2

; 6087 :         update_one_slot(type, *pp);

  00033	48 8b 44 24 20	 mov	 rax, QWORD PTR pp$[rsp]
  00038	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  0003b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR type$[rsp]
  00040	e8 00 00 00 00	 call	 update_one_slot
  00045	eb d3		 jmp	 SHORT $LN2@update_slo@2
$LN1@update_slo@2:

; 6088 :     return 0;

  00047	33 c0		 xor	 eax, eax

; 6089 : }

  00049	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004d	c3		 ret	 0
update_slots_callback ENDP
_TEXT	ENDS
EXTRN	PyCFunction_Type:BYTE
EXTRN	_PyObject_NextNotImplemented:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$update_one_slot DD imagerel update_one_slot
	DD	imagerel update_one_slot+644
	DD	imagerel $unwind$update_one_slot
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$update_one_slot DD 010e01H
	DD	0c20eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT update_one_slot
_TEXT	SEGMENT
descr$ = 32
specific$ = 40
ptr$ = 48
generic$ = 56
use_generic$ = 64
offset$ = 68
d$ = 72
tptr$26478 = 80
type$ = 112
p$ = 120
update_one_slot PROC					; COMDAT

; 6000 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 6001 :     PyObject *descr;
; 6002 :     PyWrapperDescrObject *d;
; 6003 :     void *generic = NULL, *specific = NULL;

  0000e	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR generic$[rsp], 0
  00017	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR specific$[rsp], 0

; 6004 :     int use_generic = 0;

  00020	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR use_generic$[rsp], 0

; 6005 :     int offset = p->offset;

  00028	48 8b 44 24 78	 mov	 rax, QWORD PTR p$[rsp]
  0002d	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00030	89 44 24 44	 mov	 DWORD PTR offset$[rsp], eax

; 6006 :     void **ptr = slotptr(type, offset);

  00034	8b 54 24 44	 mov	 edx, DWORD PTR offset$[rsp]
  00038	48 8b 4c 24 70	 mov	 rcx, QWORD PTR type$[rsp]
  0003d	e8 00 00 00 00	 call	 slotptr
  00042	48 89 44 24 30	 mov	 QWORD PTR ptr$[rsp], rax

; 6007 : 
; 6008 :     if (ptr == NULL) {

  00047	48 83 7c 24 30
	00		 cmp	 QWORD PTR ptr$[rsp], 0
  0004d	75 26		 jne	 SHORT $LN23@update_one
$LN22@update_one:

; 6009 :         do {
; 6010 :             ++p;

  0004f	48 8b 44 24 78	 mov	 rax, QWORD PTR p$[rsp]
  00054	48 83 c0 38	 add	 rax, 56			; 00000038H
  00058	48 89 44 24 78	 mov	 QWORD PTR p$[rsp], rax

; 6011 :         } while (p->offset == offset);

  0005d	48 8b 44 24 78	 mov	 rax, QWORD PTR p$[rsp]
  00062	8b 4c 24 44	 mov	 ecx, DWORD PTR offset$[rsp]
  00066	39 48 08	 cmp	 DWORD PTR [rax+8], ecx
  00069	74 e4		 je	 SHORT $LN22@update_one

; 6012 :         return p;

  0006b	48 8b 44 24 78	 mov	 rax, QWORD PTR p$[rsp]
  00070	e9 0a 02 00 00	 jmp	 $LN24@update_one
$LN23@update_one:
$LN19@update_one:

; 6013 :     }
; 6014 :     do {
; 6015 :         descr = _PyType_Lookup(type, p->name_strobj);

  00075	48 8b 44 24 78	 mov	 rax, QWORD PTR p$[rsp]
  0007a	48 8b 50 30	 mov	 rdx, QWORD PTR [rax+48]
  0007e	48 8b 4c 24 70	 mov	 rcx, QWORD PTR type$[rsp]
  00083	e8 00 00 00 00	 call	 _PyType_Lookup
  00088	48 89 44 24 20	 mov	 QWORD PTR descr$[rsp], rax

; 6016 :         if (descr == NULL) {

  0008d	48 83 7c 24 20
	00		 cmp	 QWORD PTR descr$[rsp], 0
  00093	75 23		 jne	 SHORT $LN16@update_one

; 6017 :             if (ptr == (void**)&type->tp_iternext) {

  00095	48 8b 44 24 70	 mov	 rax, QWORD PTR type$[rsp]
  0009a	48 05 38 01 00
	00		 add	 rax, 312		; 00000138H
  000a0	48 39 44 24 30	 cmp	 QWORD PTR ptr$[rsp], rax
  000a5	75 0c		 jne	 SHORT $LN15@update_one

; 6018 :                 specific = (void *)_PyObject_NextNotImplemented;

  000a7	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyObject_NextNotImplemented
  000ae	48 89 44 24 28	 mov	 QWORD PTR specific$[rsp], rax
$LN15@update_one:

; 6019 :             }
; 6020 :             continue;

  000b3	e9 77 01 00 00	 jmp	 $LN18@update_one
$LN16@update_one:

; 6021 :         }
; 6022 :         if (Py_TYPE(descr) == &PyWrapperDescr_Type &&
; 6023 :             ((PyWrapperDescrObject *)descr)->d_base->name_strobj == p->name_strobj) {

  000b8	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyWrapperDescr_Type
  000bf	48 8b 4c 24 20	 mov	 rcx, QWORD PTR descr$[rsp]
  000c4	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  000c8	0f 85 d0 00 00
	00		 jne	 $LN14@update_one
  000ce	48 8b 44 24 20	 mov	 rax, QWORD PTR descr$[rsp]
  000d3	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  000da	48 8b 4c 24 78	 mov	 rcx, QWORD PTR p$[rsp]
  000df	48 8b 49 30	 mov	 rcx, QWORD PTR [rcx+48]
  000e3	48 39 48 30	 cmp	 QWORD PTR [rax+48], rcx
  000e7	0f 85 b1 00 00
	00		 jne	 $LN14@update_one

; 6024 :             void **tptr = resolve_slotdups(type, p->name_strobj);

  000ed	48 8b 44 24 78	 mov	 rax, QWORD PTR p$[rsp]
  000f2	48 8b 50 30	 mov	 rdx, QWORD PTR [rax+48]
  000f6	48 8b 4c 24 70	 mov	 rcx, QWORD PTR type$[rsp]
  000fb	e8 00 00 00 00	 call	 resolve_slotdups
  00100	48 89 44 24 50	 mov	 QWORD PTR tptr$26478[rsp], rax

; 6025 :             if (tptr == NULL || tptr == ptr)

  00105	48 83 7c 24 50
	00		 cmp	 QWORD PTR tptr$26478[rsp], 0
  0010b	74 0c		 je	 SHORT $LN12@update_one
  0010d	48 8b 44 24 30	 mov	 rax, QWORD PTR ptr$[rsp]
  00112	48 39 44 24 50	 cmp	 QWORD PTR tptr$26478[rsp], rax
  00117	75 0e		 jne	 SHORT $LN13@update_one
$LN12@update_one:

; 6026 :                 generic = p->function;

  00119	48 8b 44 24 78	 mov	 rax, QWORD PTR p$[rsp]
  0011e	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00122	48 89 44 24 38	 mov	 QWORD PTR generic$[rsp], rax
$LN13@update_one:

; 6027 :             d = (PyWrapperDescrObject *)descr;

  00127	48 8b 44 24 20	 mov	 rax, QWORD PTR descr$[rsp]
  0012c	48 89 44 24 48	 mov	 QWORD PTR d$[rsp], rax

; 6028 :             if (d->d_base->wrapper == p->wrapper &&
; 6029 :                 PyType_IsSubtype(type, PyDescr_TYPE(d)))

  00131	48 8b 44 24 48	 mov	 rax, QWORD PTR d$[rsp]
  00136	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  0013d	48 8b 4c 24 78	 mov	 rcx, QWORD PTR p$[rsp]
  00142	48 8b 49 18	 mov	 rcx, QWORD PTR [rcx+24]
  00146	48 39 48 18	 cmp	 QWORD PTR [rax+24], rcx
  0014a	75 4d		 jne	 SHORT $LN11@update_one
  0014c	48 8b 44 24 48	 mov	 rax, QWORD PTR d$[rsp]
  00151	48 8b 50 60	 mov	 rdx, QWORD PTR [rax+96]
  00155	48 8b 4c 24 70	 mov	 rcx, QWORD PTR type$[rsp]
  0015a	e8 00 00 00 00	 call	 PyType_IsSubtype
  0015f	85 c0		 test	 eax, eax
  00161	74 36		 je	 SHORT $LN11@update_one

; 6030 :             {
; 6031 :                 if (specific == NULL ||
; 6032 :                     specific == d->d_wrapped)

  00163	48 83 7c 24 28
	00		 cmp	 QWORD PTR specific$[rsp], 0
  00169	74 13		 je	 SHORT $LN9@update_one
  0016b	48 8b 44 24 48	 mov	 rax, QWORD PTR d$[rsp]
  00170	48 8b 80 88 00
	00 00		 mov	 rax, QWORD PTR [rax+136]
  00177	48 39 44 24 28	 cmp	 QWORD PTR specific$[rsp], rax
  0017c	75 13		 jne	 SHORT $LN10@update_one
$LN9@update_one:

; 6033 :                     specific = d->d_wrapped;

  0017e	48 8b 44 24 48	 mov	 rax, QWORD PTR d$[rsp]
  00183	48 8b 80 88 00
	00 00		 mov	 rax, QWORD PTR [rax+136]
  0018a	48 89 44 24 28	 mov	 QWORD PTR specific$[rsp], rax

; 6034 :                 else

  0018f	eb 08		 jmp	 SHORT $LN8@update_one
$LN10@update_one:

; 6035 :                     use_generic = 1;

  00191	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR use_generic$[rsp], 1
$LN8@update_one:
$LN11@update_one:

; 6036 :             }
; 6037 :         }
; 6038 :         else if (Py_TYPE(descr) == &PyCFunction_Type &&

  00199	e9 91 00 00 00	 jmp	 $LN7@update_one
$LN14@update_one:

; 6039 :                  PyCFunction_GET_FUNCTION(descr) ==
; 6040 :                  (PyCFunction)tp_new_wrapper &&
; 6041 :                  ptr == (void**)&type->tp_new)

  0019e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyCFunction_Type
  001a5	48 8b 4c 24 20	 mov	 rcx, QWORD PTR descr$[rsp]
  001aa	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  001ae	75 3b		 jne	 SHORT $LN6@update_one
  001b0	48 8b 44 24 20	 mov	 rax, QWORD PTR descr$[rsp]
  001b5	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  001b9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:tp_new_wrapper
  001c0	48 39 48 08	 cmp	 QWORD PTR [rax+8], rcx
  001c4	75 25		 jne	 SHORT $LN6@update_one
  001c6	48 8b 44 24 70	 mov	 rax, QWORD PTR type$[rsp]
  001cb	48 05 90 01 00
	00		 add	 rax, 400		; 00000190H
  001d1	48 39 44 24 30	 cmp	 QWORD PTR ptr$[rsp], rax
  001d6	75 13		 jne	 SHORT $LN6@update_one

; 6042 :         {
; 6043 :             /* The __new__ wrapper is not a wrapper descriptor,
; 6044 :                so must be special-cased differently.
; 6045 :                If we don't do this, creating an instance will
; 6046 :                always use slot_tp_new which will look up
; 6047 :                __new__ in the MRO which will call tp_new_wrapper
; 6048 :                which will look through the base classes looking
; 6049 :                for a static base and call its tp_new (usually
; 6050 :                PyType_GenericNew), after performing various
; 6051 :                sanity checks and constructing a new argument
; 6052 :                list.  Cut all that nonsense short -- this speeds
; 6053 :                up instance creation tremendously. */
; 6054 :             specific = (void *)type->tp_new;

  001d8	48 8b 44 24 70	 mov	 rax, QWORD PTR type$[rsp]
  001dd	48 8b 80 90 01
	00 00		 mov	 rax, QWORD PTR [rax+400]
  001e4	48 89 44 24 28	 mov	 QWORD PTR specific$[rsp], rax

; 6055 :             /* XXX I'm not 100% sure that there isn't a hole
; 6056 :                in this reasoning that requires additional
; 6057 :                sanity checks.  I'll buy the first person to
; 6058 :                point out a bug in this reasoning a beer. */
; 6059 :         }
; 6060 :         else if (descr == Py_None &&

  001e9	eb 44		 jmp	 SHORT $LN5@update_one
$LN6@update_one:

; 6061 :                  ptr == (void**)&type->tp_hash) {

  001eb	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  001f2	48 39 44 24 20	 cmp	 QWORD PTR descr$[rsp], rax
  001f7	75 20		 jne	 SHORT $LN4@update_one
  001f9	48 8b 44 24 70	 mov	 rax, QWORD PTR type$[rsp]
  001fe	48 05 d0 00 00
	00		 add	 rax, 208		; 000000d0H
  00204	48 39 44 24 30	 cmp	 QWORD PTR ptr$[rsp], rax
  00209	75 0e		 jne	 SHORT $LN4@update_one

; 6062 :             /* We specifically allow __hash__ to be set to None
; 6063 :                to prevent inheritance of the default
; 6064 :                implementation from object.__hash__ */
; 6065 :             specific = (void *)PyObject_HashNotImplemented;

  0020b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyObject_HashNotImplemented
  00212	48 89 44 24 28	 mov	 QWORD PTR specific$[rsp], rax

; 6066 :         }
; 6067 :         else {

  00217	eb 16		 jmp	 SHORT $LN3@update_one
$LN4@update_one:

; 6068 :             use_generic = 1;

  00219	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR use_generic$[rsp], 1

; 6069 :             generic = p->function;

  00221	48 8b 44 24 78	 mov	 rax, QWORD PTR p$[rsp]
  00226	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0022a	48 89 44 24 38	 mov	 QWORD PTR generic$[rsp], rax
$LN3@update_one:
$LN5@update_one:
$LN7@update_one:
$LN18@update_one:

; 6070 :         }
; 6071 :     } while ((++p)->offset == offset);

  0022f	48 8b 44 24 78	 mov	 rax, QWORD PTR p$[rsp]
  00234	48 83 c0 38	 add	 rax, 56			; 00000038H
  00238	48 89 44 24 78	 mov	 QWORD PTR p$[rsp], rax
  0023d	48 8b 44 24 78	 mov	 rax, QWORD PTR p$[rsp]
  00242	8b 4c 24 44	 mov	 ecx, DWORD PTR offset$[rsp]
  00246	39 48 08	 cmp	 DWORD PTR [rax+8], ecx
  00249	0f 84 26 fe ff
	ff		 je	 $LN19@update_one

; 6072 :     if (specific && !use_generic)

  0024f	48 83 7c 24 28
	00		 cmp	 QWORD PTR specific$[rsp], 0
  00255	74 16		 je	 SHORT $LN2@update_one
  00257	83 7c 24 40 00	 cmp	 DWORD PTR use_generic$[rsp], 0
  0025c	75 0f		 jne	 SHORT $LN2@update_one

; 6073 :         *ptr = specific;

  0025e	48 8b 44 24 30	 mov	 rax, QWORD PTR ptr$[rsp]
  00263	48 8b 4c 24 28	 mov	 rcx, QWORD PTR specific$[rsp]
  00268	48 89 08	 mov	 QWORD PTR [rax], rcx

; 6074 :     else

  0026b	eb 0d		 jmp	 SHORT $LN1@update_one
$LN2@update_one:

; 6075 :         *ptr = generic;

  0026d	48 8b 44 24 30	 mov	 rax, QWORD PTR ptr$[rsp]
  00272	48 8b 4c 24 38	 mov	 rcx, QWORD PTR generic$[rsp]
  00277	48 89 08	 mov	 QWORD PTR [rax], rcx
$LN1@update_one:

; 6076 :     return p;

  0027a	48 8b 44 24 78	 mov	 rax, QWORD PTR p$[rsp]
$LN24@update_one:

; 6077 : }

  0027f	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00283	c3		 ret	 0
update_one_slot ENDP
_TEXT	ENDS
PUBLIC	??_C@_1GO@JGOFDCDD@?$AA?$CI?$AAs?$AAi?$AAz?$AAe?$AA_?$AAt?$AA?$CJ?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AA?$DM?$AA?5?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AAo?$AAf?$AA?$CI?$AAP?$AAy?$AAH?$AAe?$AAa?$AAp@ ; `string'
PUBLIC	??_C@_1BI@OIFHELDI@?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$slotptr DD imagerel slotptr
	DD	imagerel slotptr+287
	DD	imagerel $unwind$slotptr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$slotptr DD 010d01H
	DD	0620dH
xdata	ENDS
;	COMDAT ??_C@_1GO@JGOFDCDD@?$AA?$CI?$AAs?$AAi?$AAz?$AAe?$AA_?$AAt?$AA?$CJ?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AA?$DM?$AA?5?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AAo?$AAf?$AA?$CI?$AAP?$AAy?$AAH?$AAe?$AAa?$AAp@
CONST	SEGMENT
??_C@_1GO@JGOFDCDD@?$AA?$CI?$AAs?$AAi?$AAz?$AAe?$AA_?$AAt?$AA?$CJ?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AA?$DM?$AA?5?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AAo?$AAf?$AA?$CI?$AAP?$AAy?$AAH?$AAe?$AAa?$AAp@ DB '('
	DB	00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, '_', 00H, 't', 00H
	DB	')', 00H, 'o', 00H, 'f', 00H, 'f', 00H, 's', 00H, 'e', 00H, 't'
	DB	00H, ' ', 00H, '<', 00H, ' ', 00H, 'o', 00H, 'f', 00H, 'f', 00H
	DB	's', 00H, 'e', 00H, 't', 00H, 'o', 00H, 'f', 00H, '(', 00H, 'P'
	DB	00H, 'y', 00H, 'H', 00H, 'e', 00H, 'a', 00H, 'p', 00H, 'T', 00H
	DB	'y', 00H, 'p', 00H, 'e', 00H, 'O', 00H, 'b', 00H, 'j', 00H, 'e'
	DB	00H, 'c', 00H, 't', 00H, ',', 00H, ' ', 00H, 'a', 00H, 's', 00H
	DB	'_', 00H, 'b', 00H, 'u', 00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r'
	DB	00H, ')', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1BI@OIFHELDI@?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1BI@OIFHELDI@?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@ DB 'o'
	DB	00H, 'f', 00H, 'f', 00H, 's', 00H, 'e', 00H, 't', 00H, ' ', 00H
	DB	'>', 00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT slotptr
_TEXT	SEGMENT
ptr$ = 32
offset$ = 40
type$ = 64
ioffset$ = 72
slotptr	PROC						; COMDAT

; 5921 : {

  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 5922 :     char *ptr;
; 5923 :     long offset = ioffset;

  0000d	8b 44 24 48	 mov	 eax, DWORD PTR ioffset$[rsp]
  00011	89 44 24 28	 mov	 DWORD PTR offset$[rsp], eax

; 5924 : 
; 5925 :     /* Note: this depends on the order of the members of PyHeapTypeObject! */
; 5926 :     assert(offset >= 0);

  00015	83 7c 24 28 00	 cmp	 DWORD PTR offset$[rsp], 0
  0001a	7d 1c		 jge	 SHORT $LN10@slotptr
  0001c	41 b8 26 17 00
	00		 mov	 r8d, 5926		; 00001726H
  00022	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@GJLLIOPA@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAt?$AAy?$AAp?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00029	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BI@OIFHELDI@?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@
  00030	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00036	33 c0		 xor	 eax, eax
$LN10@slotptr:

; 5927 :     assert((size_t)offset < offsetof(PyHeapTypeObject, as_buffer));

  00038	48 63 44 24 28	 movsxd	 rax, DWORD PTR offset$[rsp]
  0003d	48 3d 58 03 00
	00		 cmp	 rax, 856		; 00000358H
  00043	72 1c		 jb	 SHORT $LN11@slotptr
  00045	41 b8 27 17 00
	00		 mov	 r8d, 5927		; 00001727H
  0004b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@GJLLIOPA@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAt?$AAy?$AAp?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00052	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1GO@JGOFDCDD@?$AA?$CI?$AAs?$AAi?$AAz?$AAe?$AA_?$AAt?$AA?$CJ?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AA?$DM?$AA?5?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AAo?$AAf?$AA?$CI?$AAP?$AAy?$AAH?$AAe?$AAa?$AAp@
  00059	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0005f	33 c0		 xor	 eax, eax
$LN11@slotptr:

; 5928 :     if ((size_t)offset >= offsetof(PyHeapTypeObject, as_sequence)) {

  00061	48 63 44 24 28	 movsxd	 rax, DWORD PTR offset$[rsp]
  00066	48 3d 08 03 00
	00		 cmp	 rax, 776		; 00000308H
  0006c	72 22		 jb	 SHORT $LN7@slotptr

; 5929 :         ptr = (char *)type->tp_as_sequence;

  0006e	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  00073	48 8b 80 c0 00
	00 00		 mov	 rax, QWORD PTR [rax+192]
  0007a	48 89 44 24 20	 mov	 QWORD PTR ptr$[rsp], rax

; 5930 :         offset -= offsetof(PyHeapTypeObject, as_sequence);

  0007f	48 63 44 24 28	 movsxd	 rax, DWORD PTR offset$[rsp]
  00084	48 2d 08 03 00
	00		 sub	 rax, 776		; 00000308H
  0008a	89 44 24 28	 mov	 DWORD PTR offset$[rsp], eax
  0008e	eb 68		 jmp	 SHORT $LN6@slotptr
$LN7@slotptr:

; 5931 :     }
; 5932 :     else if ((size_t)offset >= offsetof(PyHeapTypeObject, as_mapping)) {

  00090	48 63 44 24 28	 movsxd	 rax, DWORD PTR offset$[rsp]
  00095	48 3d f0 02 00
	00		 cmp	 rax, 752		; 000002f0H
  0009b	72 22		 jb	 SHORT $LN5@slotptr

; 5933 :         ptr = (char *)type->tp_as_mapping;

  0009d	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  000a2	48 8b 80 c8 00
	00 00		 mov	 rax, QWORD PTR [rax+200]
  000a9	48 89 44 24 20	 mov	 QWORD PTR ptr$[rsp], rax

; 5934 :         offset -= offsetof(PyHeapTypeObject, as_mapping);

  000ae	48 63 44 24 28	 movsxd	 rax, DWORD PTR offset$[rsp]
  000b3	48 2d f0 02 00
	00		 sub	 rax, 752		; 000002f0H
  000b9	89 44 24 28	 mov	 DWORD PTR offset$[rsp], eax
  000bd	eb 39		 jmp	 SHORT $LN4@slotptr
$LN5@slotptr:

; 5935 :     }
; 5936 :     else if ((size_t)offset >= offsetof(PyHeapTypeObject, as_number)) {

  000bf	48 63 44 24 28	 movsxd	 rax, DWORD PTR offset$[rsp]
  000c4	48 3d e0 01 00
	00		 cmp	 rax, 480		; 000001e0H
  000ca	72 22		 jb	 SHORT $LN3@slotptr

; 5937 :         ptr = (char *)type->tp_as_number;

  000cc	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  000d1	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  000d8	48 89 44 24 20	 mov	 QWORD PTR ptr$[rsp], rax

; 5938 :         offset -= offsetof(PyHeapTypeObject, as_number);

  000dd	48 63 44 24 28	 movsxd	 rax, DWORD PTR offset$[rsp]
  000e2	48 2d e0 01 00
	00		 sub	 rax, 480		; 000001e0H
  000e8	89 44 24 28	 mov	 DWORD PTR offset$[rsp], eax

; 5939 :     }
; 5940 :     else {

  000ec	eb 0a		 jmp	 SHORT $LN2@slotptr
$LN3@slotptr:

; 5941 :         ptr = (char *)type;

  000ee	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  000f3	48 89 44 24 20	 mov	 QWORD PTR ptr$[rsp], rax
$LN2@slotptr:
$LN4@slotptr:
$LN6@slotptr:

; 5942 :     }
; 5943 :     if (ptr != NULL)

  000f8	48 83 7c 24 20
	00		 cmp	 QWORD PTR ptr$[rsp], 0
  000fe	74 15		 je	 SHORT $LN1@slotptr

; 5944 :         ptr += offset;

  00100	48 63 44 24 28	 movsxd	 rax, DWORD PTR offset$[rsp]
  00105	48 8b 4c 24 20	 mov	 rcx, QWORD PTR ptr$[rsp]
  0010a	48 03 c8	 add	 rcx, rax
  0010d	48 8b c1	 mov	 rax, rcx
  00110	48 89 44 24 20	 mov	 QWORD PTR ptr$[rsp], rax
$LN1@slotptr:

; 5945 :     return (void **)ptr;

  00115	48 8b 44 24 20	 mov	 rax, QWORD PTR ptr$[rsp]

; 5946 : }

  0011a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0011e	c3		 ret	 0
slotptr	ENDP
_TEXT	ENDS
_BSS	SEGMENT
?ptrs@?1??resolve_slotdups@@9@9 DQ 0aH DUP (?)		; `resolve_slotdups'::`2'::ptrs
?pname@?1??resolve_slotdups@@9@9 DQ 01H DUP (?)		; `resolve_slotdups'::`2'::pname
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$resolve_slotdups DD imagerel resolve_slotdups
	DD	imagerel resolve_slotdups+278
	DD	imagerel $unwind$resolve_slotdups
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$resolve_slotdups DD 010e01H
	DD	0820eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT resolve_slotdups
_TEXT	SEGMENT
p$ = 32
res$ = 40
pp$ = 48
ptr$ = 56
type$ = 80
name$ = 88
resolve_slotdups PROC					; COMDAT

; 5958 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 5959 :     /* XXX Maybe this could be optimized more -- but is it worth it? */
; 5960 : 
; 5961 :     /* pname and ptrs act as a little cache */
; 5962 :     static PyObject *pname;
; 5963 :     static slotdef *ptrs[MAX_EQUIV];
; 5964 :     slotdef *p, **pp;
; 5965 :     void **res, **ptr;
; 5966 : 
; 5967 :     if (pname != name) {

  0000e	48 8b 44 24 58	 mov	 rax, QWORD PTR name$[rsp]
  00013	48 39 05 00 00
	00 00		 cmp	 QWORD PTR ?pname@?1??resolve_slotdups@@9@9, rax
  0001a	74 79		 je	 SHORT $LN11@resolve_sl

; 5968 :         /* Collect all slotdefs that match name into ptrs. */
; 5969 :         pname = name;

  0001c	48 8b 44 24 58	 mov	 rax, QWORD PTR name$[rsp]
  00021	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?pname@?1??resolve_slotdups@@9@9, rax

; 5970 :         pp = ptrs;

  00028	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?ptrs@?1??resolve_slotdups@@9@9
  0002f	48 89 44 24 30	 mov	 QWORD PTR pp$[rsp], rax

; 5971 :         for (p = slotdefs; p->name_strobj; p++) {

  00034	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:slotdefs
  0003b	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax
  00040	eb 0e		 jmp	 SHORT $LN10@resolve_sl
$LN9@resolve_sl:
  00042	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00047	48 83 c0 38	 add	 rax, 56			; 00000038H
  0004b	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax
$LN10@resolve_sl:
  00050	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00055	48 83 78 30 00	 cmp	 QWORD PTR [rax+48], 0
  0005a	74 2d		 je	 SHORT $LN8@resolve_sl

; 5972 :             if (p->name_strobj == name)

  0005c	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00061	48 8b 4c 24 58	 mov	 rcx, QWORD PTR name$[rsp]
  00066	48 39 48 30	 cmp	 QWORD PTR [rax+48], rcx
  0006a	75 1b		 jne	 SHORT $LN7@resolve_sl

; 5973 :                 *pp++ = p;

  0006c	48 8b 44 24 30	 mov	 rax, QWORD PTR pp$[rsp]
  00071	48 8b 4c 24 20	 mov	 rcx, QWORD PTR p$[rsp]
  00076	48 89 08	 mov	 QWORD PTR [rax], rcx
  00079	48 8b 44 24 30	 mov	 rax, QWORD PTR pp$[rsp]
  0007e	48 83 c0 08	 add	 rax, 8
  00082	48 89 44 24 30	 mov	 QWORD PTR pp$[rsp], rax
$LN7@resolve_sl:

; 5974 :         }

  00087	eb b9		 jmp	 SHORT $LN9@resolve_sl
$LN8@resolve_sl:

; 5975 :         *pp = NULL;

  00089	48 8b 44 24 30	 mov	 rax, QWORD PTR pp$[rsp]
  0008e	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
$LN11@resolve_sl:

; 5976 :     }
; 5977 : 
; 5978 :     /* Look in all matching slots of the type; if exactly one of these has
; 5979 :        a filled-in slot, return its value.      Otherwise return NULL. */
; 5980 :     res = NULL;

  00095	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR res$[rsp], 0

; 5981 :     for (pp = ptrs; *pp; pp++) {

  0009e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?ptrs@?1??resolve_slotdups@@9@9
  000a5	48 89 44 24 30	 mov	 QWORD PTR pp$[rsp], rax
  000aa	eb 0e		 jmp	 SHORT $LN6@resolve_sl
$LN5@resolve_sl:
  000ac	48 8b 44 24 30	 mov	 rax, QWORD PTR pp$[rsp]
  000b1	48 83 c0 08	 add	 rax, 8
  000b5	48 89 44 24 30	 mov	 QWORD PTR pp$[rsp], rax
$LN6@resolve_sl:
  000ba	48 8b 44 24 30	 mov	 rax, QWORD PTR pp$[rsp]
  000bf	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  000c3	74 47		 je	 SHORT $LN4@resolve_sl

; 5982 :         ptr = slotptr(type, (*pp)->offset);

  000c5	48 8b 44 24 30	 mov	 rax, QWORD PTR pp$[rsp]
  000ca	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000cd	8b 50 08	 mov	 edx, DWORD PTR [rax+8]
  000d0	48 8b 4c 24 50	 mov	 rcx, QWORD PTR type$[rsp]
  000d5	e8 00 00 00 00	 call	 slotptr
  000da	48 89 44 24 38	 mov	 QWORD PTR ptr$[rsp], rax

; 5983 :         if (ptr == NULL || *ptr == NULL)

  000df	48 83 7c 24 38
	00		 cmp	 QWORD PTR ptr$[rsp], 0
  000e5	74 0b		 je	 SHORT $LN2@resolve_sl
  000e7	48 8b 44 24 38	 mov	 rax, QWORD PTR ptr$[rsp]
  000ec	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  000f0	75 02		 jne	 SHORT $LN3@resolve_sl
$LN2@resolve_sl:

; 5984 :             continue;

  000f2	eb b8		 jmp	 SHORT $LN5@resolve_sl
$LN3@resolve_sl:

; 5985 :         if (res != NULL)

  000f4	48 83 7c 24 28
	00		 cmp	 QWORD PTR res$[rsp], 0
  000fa	74 04		 je	 SHORT $LN1@resolve_sl

; 5986 :             return NULL;

  000fc	33 c0		 xor	 eax, eax
  000fe	eb 11		 jmp	 SHORT $LN12@resolve_sl
$LN1@resolve_sl:

; 5987 :         res = ptr;

  00100	48 8b 44 24 38	 mov	 rax, QWORD PTR ptr$[rsp]
  00105	48 89 44 24 28	 mov	 QWORD PTR res$[rsp], rax

; 5988 :     }

  0010a	eb a0		 jmp	 SHORT $LN5@resolve_sl
$LN4@resolve_sl:

; 5989 :     return res;

  0010c	48 8b 44 24 28	 mov	 rax, QWORD PTR res$[rsp]
$LN12@resolve_sl:

; 5990 : }

  00111	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00115	c3		 ret	 0
resolve_slotdups ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CG@DNPIJCCM@Out?5of?5memory?5interning?5slotdef?5@ ; `string'
PUBLIC	??_C@_1EO@FPDNNCOP@?$AA?$CB?$AAp?$AA?$FL?$AA1?$AA?$FN?$AA?4?$AAn?$AAa?$AAm?$AAe?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAp?$AA?9?$AA?$DO?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAp?$AA?$FL?$AA1?$AA?$FN?$AA?4@ ; `string'
EXTRN	PyUnicode_InternFromString:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$init_slotdefs DD imagerel init_slotdefs
	DD	imagerel init_slotdefs+181
	DD	imagerel $unwind$init_slotdefs
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$init_slotdefs DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_0CG@DNPIJCCM@Out?5of?5memory?5interning?5slotdef?5@
CONST	SEGMENT
??_C@_0CG@DNPIJCCM@Out?5of?5memory?5interning?5slotdef?5@ DB 'Out of memo'
	DB	'ry interning slotdef names', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1EO@FPDNNCOP@?$AA?$CB?$AAp?$AA?$FL?$AA1?$AA?$FN?$AA?4?$AAn?$AAa?$AAm?$AAe?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAp?$AA?9?$AA?$DO?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAp?$AA?$FL?$AA1?$AA?$FN?$AA?4@
CONST	SEGMENT
??_C@_1EO@FPDNNCOP@?$AA?$CB?$AAp?$AA?$FL?$AA1?$AA?$FN?$AA?4?$AAn?$AAa?$AAm?$AAe?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAp?$AA?9?$AA?$DO?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAp?$AA?$FL?$AA1?$AA?$FN?$AA?4@ DB '!'
	DB	00H, 'p', 00H, '[', 00H, '1', 00H, ']', 00H, '.', 00H, 'n', 00H
	DB	'a', 00H, 'm', 00H, 'e', 00H, ' ', 00H, '|', 00H, '|', 00H, ' '
	DB	00H, 'p', 00H, '-', 00H, '>', 00H, 'o', 00H, 'f', 00H, 'f', 00H
	DB	's', 00H, 'e', 00H, 't', 00H, ' ', 00H, '<', 00H, '=', 00H, ' '
	DB	00H, 'p', 00H, '[', 00H, '1', 00H, ']', 00H, '.', 00H, 'o', 00H
	DB	'f', 00H, 'f', 00H, 's', 00H, 'e', 00H, 't', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT init_slotdefs
_TEXT	SEGMENT
p$ = 32
init_slotdefs PROC					; COMDAT

; 6095 : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 6096 :     slotdef *p;
; 6097 :     static int initialized = 0;
; 6098 : 
; 6099 :     if (initialized)

  00004	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?initialized@?1??init_slotdefs@@9@9, 0
  0000b	74 05		 je	 SHORT $LN5@init_slotd

; 6100 :         return;

  0000d	e9 9e 00 00 00	 jmp	 $LN6@init_slotd
$LN5@init_slotd:

; 6101 :     for (p = slotdefs; p->name; p++) {

  00012	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:slotdefs
  00019	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax
  0001e	eb 0e		 jmp	 SHORT $LN4@init_slotd
$LN3@init_slotd:
  00020	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00025	48 83 c0 38	 add	 rax, 56			; 00000038H
  00029	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax
$LN4@init_slotd:
  0002e	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00033	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00037	74 6d		 je	 SHORT $LN2@init_slotd

; 6102 :         /* Slots must be ordered by their offset in the PyHeapTypeObject. */
; 6103 :         assert(!p[1].name || p->offset <= p[1].offset);

  00039	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0003e	48 83 78 38 00	 cmp	 QWORD PTR [rax+56], 0
  00043	74 2e		 je	 SHORT $LN8@init_slotd
  00045	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0004a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR p$[rsp]
  0004f	8b 49 40	 mov	 ecx, DWORD PTR [rcx+64]
  00052	39 48 08	 cmp	 DWORD PTR [rax+8], ecx
  00055	7e 1c		 jle	 SHORT $LN8@init_slotd
  00057	41 b8 d7 17 00
	00		 mov	 r8d, 6103		; 000017d7H
  0005d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@GJLLIOPA@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAt?$AAy?$AAp?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00064	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EO@FPDNNCOP@?$AA?$CB?$AAp?$AA?$FL?$AA1?$AA?$FN?$AA?4?$AAn?$AAa?$AAm?$AAe?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAp?$AA?9?$AA?$DO?$AAo?$AAf?$AAf?$AAs?$AAe?$AAt?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAp?$AA?$FL?$AA1?$AA?$FN?$AA?4@
  0006b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00071	33 c0		 xor	 eax, eax
$LN8@init_slotd:

; 6104 :         p->name_strobj = PyUnicode_InternFromString(p->name);

  00073	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00078	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0007b	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  00080	48 8b 4c 24 20	 mov	 rcx, QWORD PTR p$[rsp]
  00085	48 89 41 30	 mov	 QWORD PTR [rcx+48], rax

; 6105 :         if (!p->name_strobj)

  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0008e	48 83 78 30 00	 cmp	 QWORD PTR [rax+48], 0
  00093	75 0c		 jne	 SHORT $LN1@init_slotd

; 6106 :             Py_FatalError("Out of memory interning slotdef names");

  00095	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CG@DNPIJCCM@Out?5of?5memory?5interning?5slotdef?5@
  0009c	e8 00 00 00 00	 call	 Py_FatalError
$LN1@init_slotd:

; 6107 :     }

  000a1	e9 7a ff ff ff	 jmp	 $LN3@init_slotd
$LN2@init_slotd:

; 6108 :     initialized = 1;

  000a6	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?initialized@?1??init_slotdefs@@9@9, 1
$LN6@init_slotd:

; 6109 : }

  000b0	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000b4	c3		 ret	 0
init_slotdefs ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$fixup_slot_dispatchers DD imagerel fixup_slot_dispatchers
	DD	imagerel fixup_slot_dispatchers+64
	DD	imagerel $unwind$fixup_slot_dispatchers
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$fixup_slot_dispatchers DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT fixup_slot_dispatchers
_TEXT	SEGMENT
p$ = 32
type$ = 64
fixup_slot_dispatchers PROC				; COMDAT

; 6153 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 6154 :     slotdef *p;
; 6155 : 
; 6156 :     init_slotdefs();

  00009	e8 00 00 00 00	 call	 init_slotdefs

; 6157 :     for (p = slotdefs; p->name; )

  0000e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:slotdefs
  00015	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax
$LN2@fixup_slot:
  0001a	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0001f	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00023	74 16		 je	 SHORT $LN1@fixup_slot

; 6158 :         p = update_one_slot(type, p);

  00025	48 8b 54 24 20	 mov	 rdx, QWORD PTR p$[rsp]
  0002a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR type$[rsp]
  0002f	e8 00 00 00 00	 call	 update_one_slot
  00034	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax
  00039	eb df		 jmp	 SHORT $LN2@fixup_slot
$LN1@fixup_slot:

; 6159 : }

  0003b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003f	c3		 ret	 0
fixup_slot_dispatchers ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$update_all_slots DD imagerel update_all_slots
	DD	imagerel update_all_slots+79
	DD	imagerel $unwind$update_all_slots
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$update_all_slots DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT update_all_slots
_TEXT	SEGMENT
p$ = 32
type$ = 64
update_all_slots PROC					; COMDAT

; 6163 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 6164 :     slotdef *p;
; 6165 : 
; 6166 :     init_slotdefs();

  00009	e8 00 00 00 00	 call	 init_slotdefs

; 6167 :     for (p = slotdefs; p->name; p++) {

  0000e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:slotdefs
  00015	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax
  0001a	eb 0e		 jmp	 SHORT $LN3@update_all
$LN2@update_all:
  0001c	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00021	48 83 c0 38	 add	 rax, 56			; 00000038H
  00025	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax
$LN3@update_all:
  0002a	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0002f	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00033	74 15		 je	 SHORT $LN1@update_all

; 6168 :         /* update_slot returns int but can't actually fail */
; 6169 :         update_slot(type, p->name_strobj);

  00035	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0003a	48 8b 50 30	 mov	 rdx, QWORD PTR [rax+48]
  0003e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR type$[rsp]
  00043	e8 00 00 00 00	 call	 update_slot

; 6170 :     }

  00048	eb d2		 jmp	 SHORT $LN2@update_all
$LN1@update_all:

; 6171 : }

  0004a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004e	c3		 ret	 0
update_all_slots ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$update_subclasses DD imagerel update_subclasses
	DD	imagerel update_subclasses+79
	DD	imagerel $unwind$update_subclasses
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$update_subclasses DD 011801H
	DD	04218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT update_subclasses
_TEXT	SEGMENT
type$ = 48
name$ = 56
callback$ = 64
data$ = 72
update_subclasses PROC					; COMDAT

; 6180 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 6181 :     if (callback(type, data) < 0)

  00018	48 8b 54 24 48	 mov	 rdx, QWORD PTR data$[rsp]
  0001d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR type$[rsp]
  00022	ff 54 24 40	 call	 QWORD PTR callback$[rsp]
  00026	85 c0		 test	 eax, eax
  00028	7d 07		 jge	 SHORT $LN1@update_sub

; 6182 :         return -1;

  0002a	b8 ff ff ff ff	 mov	 eax, -1
  0002f	eb 19		 jmp	 SHORT $LN2@update_sub
$LN1@update_sub:

; 6183 :     return recurse_down_subclasses(type, name, callback, data);

  00031	4c 8b 4c 24 48	 mov	 r9, QWORD PTR data$[rsp]
  00036	4c 8b 44 24 40	 mov	 r8, QWORD PTR callback$[rsp]
  0003b	48 8b 54 24 38	 mov	 rdx, QWORD PTR name$[rsp]
  00040	48 8b 4c 24 30	 mov	 rcx, QWORD PTR type$[rsp]
  00045	e8 00 00 00 00	 call	 recurse_down_subclasses
$LN2@update_sub:

; 6184 : }

  0004a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004e	c3		 ret	 0
update_subclasses ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$recurse_down_subclasses DD imagerel recurse_down_subclasses
	DD	imagerel recurse_down_subclasses+545
	DD	imagerel $unwind$recurse_down_subclasses
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$recurse_down_subclasses DD 011801H
	DD	0c218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT recurse_down_subclasses
_TEXT	SEGMENT
n$ = 32
i$ = 40
subclass$ = 48
dict$ = 56
ref$ = 64
subclasses$ = 72
tv95 = 80
type$ = 112
name$ = 120
callback$ = 128
data$ = 136
recurse_down_subclasses PROC				; COMDAT

; 6189 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 6190 :     PyTypeObject *subclass;
; 6191 :     PyObject *ref, *subclasses, *dict;
; 6192 :     Py_ssize_t i, n;
; 6193 : 
; 6194 :     subclasses = type->tp_subclasses;

  00018	48 8b 44 24 70	 mov	 rax, QWORD PTR type$[rsp]
  0001d	48 8b 80 c0 01
	00 00		 mov	 rax, QWORD PTR [rax+448]
  00024	48 89 44 24 48	 mov	 QWORD PTR subclasses$[rsp], rax

; 6195 :     if (subclasses == NULL)

  00029	48 83 7c 24 48
	00		 cmp	 QWORD PTR subclasses$[rsp], 0
  0002f	75 07		 jne	 SHORT $LN7@recurse_do

; 6196 :         return 0;

  00031	33 c0		 xor	 eax, eax
  00033	e9 e4 01 00 00	 jmp	 $LN8@recurse_do
$LN7@recurse_do:

; 6197 :     assert(PyList_Check(subclasses));

  00038	48 8b 44 24 48	 mov	 rax, QWORD PTR subclasses$[rsp]
  0003d	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00041	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00047	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  0004c	85 c0		 test	 eax, eax
  0004e	75 1c		 jne	 SHORT $LN10@recurse_do
  00050	41 b8 35 18 00
	00		 mov	 r8d, 6197		; 00001835H
  00056	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@GJLLIOPA@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAt?$AAy?$AAp?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  0005d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DC@CGHPHOHK@?$AAP?$AAy?$AAL?$AAi?$AAs?$AAt?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAu?$AAb?$AAc?$AAl?$AAa?$AAs?$AAs?$AAe?$AAs?$AA?$CJ?$AA?$AA@
  00064	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0006a	33 c0		 xor	 eax, eax
$LN10@recurse_do:

; 6198 :     n = PyList_GET_SIZE(subclasses);

  0006c	48 8b 44 24 48	 mov	 rax, QWORD PTR subclasses$[rsp]
  00071	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00075	48 89 44 24 20	 mov	 QWORD PTR n$[rsp], rax

; 6199 :     for (i = 0; i < n; i++) {

  0007a	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  00083	eb 0d		 jmp	 SHORT $LN6@recurse_do
$LN5@recurse_do:
  00085	48 8b 44 24 28	 mov	 rax, QWORD PTR i$[rsp]
  0008a	48 ff c0	 inc	 rax
  0008d	48 89 44 24 28	 mov	 QWORD PTR i$[rsp], rax
$LN6@recurse_do:
  00092	48 8b 44 24 20	 mov	 rax, QWORD PTR n$[rsp]
  00097	48 39 44 24 28	 cmp	 QWORD PTR i$[rsp], rax
  0009c	0f 8d 78 01 00
	00		 jge	 $LN4@recurse_do

; 6200 :         ref = PyList_GET_ITEM(subclasses, i);

  000a2	48 8b 44 24 48	 mov	 rax, QWORD PTR subclasses$[rsp]
  000a7	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  000ab	48 8b 4c 24 28	 mov	 rcx, QWORD PTR i$[rsp]
  000b0	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  000b4	48 89 44 24 40	 mov	 QWORD PTR ref$[rsp], rax

; 6201 :         assert(PyWeakref_CheckRef(ref));

  000b9	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_RefType
  000c0	48 8b 4c 24 40	 mov	 rcx, QWORD PTR ref$[rsp]
  000c5	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  000c9	74 35		 je	 SHORT $LN11@recurse_do
  000cb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_PyWeakref_RefType
  000d2	48 8b 44 24 40	 mov	 rax, QWORD PTR ref$[rsp]
  000d7	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  000db	e8 00 00 00 00	 call	 PyType_IsSubtype
  000e0	85 c0		 test	 eax, eax
  000e2	75 1c		 jne	 SHORT $LN11@recurse_do
  000e4	41 b8 39 18 00
	00		 mov	 r8d, 6201		; 00001839H
  000ea	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@GJLLIOPA@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAt?$AAy?$AAp?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  000f1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@IHEHGJMP@?$AAP?$AAy?$AAW?$AAe?$AAa?$AAk?$AAr?$AAe?$AAf?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AAR?$AAe?$AAf?$AA?$CI?$AAr?$AAe?$AAf?$AA?$CJ?$AA?$AA@
  000f8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000fe	33 c0		 xor	 eax, eax
$LN11@recurse_do:

; 6202 :         subclass = (PyTypeObject *)PyWeakref_GET_OBJECT(ref);

  00100	48 8b 44 24 40	 mov	 rax, QWORD PTR ref$[rsp]
  00105	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00109	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  0010e	7e 10		 jle	 SHORT $LN12@recurse_do
  00110	48 8b 44 24 40	 mov	 rax, QWORD PTR ref$[rsp]
  00115	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00119	48 89 44 24 50	 mov	 QWORD PTR tv95[rsp], rax
  0011e	eb 0c		 jmp	 SHORT $LN13@recurse_do
$LN12@recurse_do:
  00120	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00127	48 89 44 24 50	 mov	 QWORD PTR tv95[rsp], rax
$LN13@recurse_do:
  0012c	48 8b 44 24 50	 mov	 rax, QWORD PTR tv95[rsp]
  00131	48 89 44 24 30	 mov	 QWORD PTR subclass$[rsp], rax

; 6203 :         assert(subclass != NULL);

  00136	48 83 7c 24 30
	00		 cmp	 QWORD PTR subclass$[rsp], 0
  0013c	75 1c		 jne	 SHORT $LN14@recurse_do
  0013e	41 b8 3b 18 00
	00		 mov	 r8d, 6203		; 0000183bH
  00144	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@GJLLIOPA@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAt?$AAy?$AAp?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  0014b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CC@CKFLIHGE@?$AAs?$AAu?$AAb?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
  00152	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00158	33 c0		 xor	 eax, eax
$LN14@recurse_do:

; 6204 :         if ((PyObject *)subclass == Py_None)

  0015a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00161	48 39 44 24 30	 cmp	 QWORD PTR subclass$[rsp], rax
  00166	75 05		 jne	 SHORT $LN3@recurse_do

; 6205 :             continue;

  00168	e9 18 ff ff ff	 jmp	 $LN5@recurse_do
$LN3@recurse_do:

; 6206 :         assert(PyType_Check(subclass));

  0016d	48 8b 44 24 30	 mov	 rax, QWORD PTR subclass$[rsp]
  00172	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00176	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0017c	25 00 00 00 80	 and	 eax, -2147483648	; ffffffff80000000H
  00181	85 c0		 test	 eax, eax
  00183	75 1c		 jne	 SHORT $LN15@recurse_do
  00185	41 b8 3e 18 00
	00		 mov	 r8d, 6206		; 0000183eH
  0018b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@GJLLIOPA@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAt?$AAy?$AAp?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00192	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@DGKDGEJI@?$AAP?$AAy?$AAT?$AAy?$AAp?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAu?$AAb?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?$CJ?$AA?$AA@
  00199	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0019f	33 c0		 xor	 eax, eax
$LN15@recurse_do:

; 6207 :         /* Avoid recursing down into unaffected classes */
; 6208 :         dict = subclass->tp_dict;

  001a1	48 8b 44 24 30	 mov	 rax, QWORD PTR subclass$[rsp]
  001a6	48 8b 80 60 01
	00 00		 mov	 rax, QWORD PTR [rax+352]
  001ad	48 89 44 24 38	 mov	 QWORD PTR dict$[rsp], rax

; 6209 :         if (dict != NULL && PyDict_Check(dict) &&
; 6210 :             PyDict_GetItem(dict, name) != NULL)

  001b2	48 83 7c 24 38
	00		 cmp	 QWORD PTR dict$[rsp], 0
  001b8	74 31		 je	 SHORT $LN2@recurse_do
  001ba	48 8b 44 24 38	 mov	 rax, QWORD PTR dict$[rsp]
  001bf	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  001c3	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  001c9	25 00 00 00 20	 and	 eax, 536870912		; 20000000H
  001ce	85 c0		 test	 eax, eax
  001d0	74 19		 je	 SHORT $LN2@recurse_do
  001d2	48 8b 54 24 78	 mov	 rdx, QWORD PTR name$[rsp]
  001d7	48 8b 4c 24 38	 mov	 rcx, QWORD PTR dict$[rsp]
  001dc	e8 00 00 00 00	 call	 PyDict_GetItem
  001e1	48 85 c0	 test	 rax, rax
  001e4	74 05		 je	 SHORT $LN2@recurse_do

; 6211 :             continue;

  001e6	e9 9a fe ff ff	 jmp	 $LN5@recurse_do
$LN2@recurse_do:

; 6212 :         if (update_subclasses(subclass, name, callback, data) < 0)

  001eb	4c 8b 8c 24 88
	00 00 00	 mov	 r9, QWORD PTR data$[rsp]
  001f3	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR callback$[rsp]
  001fb	48 8b 54 24 78	 mov	 rdx, QWORD PTR name$[rsp]
  00200	48 8b 4c 24 30	 mov	 rcx, QWORD PTR subclass$[rsp]
  00205	e8 00 00 00 00	 call	 update_subclasses
  0020a	85 c0		 test	 eax, eax
  0020c	7d 07		 jge	 SHORT $LN1@recurse_do

; 6213 :             return -1;

  0020e	b8 ff ff ff ff	 mov	 eax, -1
  00213	eb 07		 jmp	 SHORT $LN8@recurse_do
$LN1@recurse_do:

; 6214 :     }

  00215	e9 6b fe ff ff	 jmp	 $LN5@recurse_do
$LN4@recurse_do:

; 6215 :     return 0;

  0021a	33 c0		 xor	 eax, eax
$LN8@recurse_do:

; 6216 : }

  0021c	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00220	c3		 ret	 0
recurse_down_subclasses ENDP
_TEXT	ENDS
EXTRN	PyDescr_NewWrapper:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$add_operators DD imagerel add_operators
	DD	imagerel add_operators+353
	DD	imagerel $unwind$add_operators
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$add_operators DD 010901H
	DD	08209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT add_operators
_TEXT	SEGMENT
p$ = 32
descr$ = 40
dict$ = 48
ptr$ = 56
type$ = 80
add_operators PROC					; COMDAT

; 6250 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 6251 :     PyObject *dict = type->tp_dict;

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR type$[rsp]
  0000e	48 8b 80 60 01
	00 00		 mov	 rax, QWORD PTR [rax+352]
  00015	48 89 44 24 30	 mov	 QWORD PTR dict$[rsp], rax

; 6252 :     slotdef *p;
; 6253 :     PyObject *descr;
; 6254 :     void **ptr;
; 6255 : 
; 6256 :     init_slotdefs();

  0001a	e8 00 00 00 00	 call	 init_slotdefs

; 6257 :     for (p = slotdefs; p->name; p++) {

  0001f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:slotdefs
  00026	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax
  0002b	eb 0e		 jmp	 SHORT $LN14@add_operat
$LN13@add_operat:
  0002d	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00032	48 83 c0 38	 add	 rax, 56			; 00000038H
  00036	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax
$LN14@add_operat:
  0003b	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00040	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00044	0f 84 ec 00 00
	00		 je	 $LN12@add_operat

; 6258 :         if (p->wrapper == NULL)

  0004a	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0004f	48 83 78 18 00	 cmp	 QWORD PTR [rax+24], 0
  00054	75 02		 jne	 SHORT $LN11@add_operat

; 6259 :             continue;

  00056	eb d5		 jmp	 SHORT $LN13@add_operat
$LN11@add_operat:

; 6260 :         ptr = slotptr(type, p->offset);

  00058	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0005d	8b 50 08	 mov	 edx, DWORD PTR [rax+8]
  00060	48 8b 4c 24 50	 mov	 rcx, QWORD PTR type$[rsp]
  00065	e8 00 00 00 00	 call	 slotptr
  0006a	48 89 44 24 38	 mov	 QWORD PTR ptr$[rsp], rax

; 6261 :         if (!ptr || !*ptr)

  0006f	48 83 7c 24 38
	00		 cmp	 QWORD PTR ptr$[rsp], 0
  00075	74 0b		 je	 SHORT $LN9@add_operat
  00077	48 8b 44 24 38	 mov	 rax, QWORD PTR ptr$[rsp]
  0007c	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00080	75 02		 jne	 SHORT $LN10@add_operat
$LN9@add_operat:

; 6262 :             continue;

  00082	eb a9		 jmp	 SHORT $LN13@add_operat
$LN10@add_operat:

; 6263 :         if (PyDict_GetItem(dict, p->name_strobj))

  00084	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00089	48 8b 50 30	 mov	 rdx, QWORD PTR [rax+48]
  0008d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR dict$[rsp]
  00092	e8 00 00 00 00	 call	 PyDict_GetItem
  00097	48 85 c0	 test	 rax, rax
  0009a	74 02		 je	 SHORT $LN8@add_operat

; 6264 :             continue;

  0009c	eb 8f		 jmp	 SHORT $LN13@add_operat
$LN8@add_operat:

; 6265 :         if (*ptr == (void *)PyObject_HashNotImplemented) {

  0009e	48 8b 44 24 38	 mov	 rax, QWORD PTR ptr$[rsp]
  000a3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyObject_HashNotImplemented
  000aa	48 39 08	 cmp	 QWORD PTR [rax], rcx
  000ad	75 2a		 jne	 SHORT $LN7@add_operat

; 6266 :             /* Classes may prevent the inheritance of the tp_hash
; 6267 :                slot by storing PyObject_HashNotImplemented in it. Make it
; 6268 :                visible as a None value for the __hash__ attribute. */
; 6269 :             if (PyDict_SetItem(dict, p->name_strobj, Py_None) < 0)

  000af	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:_Py_NoneStruct
  000b6	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  000bb	48 8b 50 30	 mov	 rdx, QWORD PTR [rax+48]
  000bf	48 8b 4c 24 30	 mov	 rcx, QWORD PTR dict$[rsp]
  000c4	e8 00 00 00 00	 call	 PyDict_SetItem
  000c9	85 c0		 test	 eax, eax
  000cb	7d 0a		 jge	 SHORT $LN6@add_operat

; 6270 :                 return -1;

  000cd	b8 ff ff ff ff	 mov	 eax, -1
  000d2	e9 85 00 00 00	 jmp	 $LN15@add_operat
$LN6@add_operat:

; 6271 :         }
; 6272 :         else {

  000d7	eb 58		 jmp	 SHORT $LN5@add_operat
$LN7@add_operat:

; 6273 :             descr = PyDescr_NewWrapper(type, p, *ptr);

  000d9	48 8b 44 24 38	 mov	 rax, QWORD PTR ptr$[rsp]
  000de	4c 8b 00	 mov	 r8, QWORD PTR [rax]
  000e1	48 8b 54 24 20	 mov	 rdx, QWORD PTR p$[rsp]
  000e6	48 8b 4c 24 50	 mov	 rcx, QWORD PTR type$[rsp]
  000eb	e8 00 00 00 00	 call	 PyDescr_NewWrapper
  000f0	48 89 44 24 28	 mov	 QWORD PTR descr$[rsp], rax

; 6274 :             if (descr == NULL)

  000f5	48 83 7c 24 28
	00		 cmp	 QWORD PTR descr$[rsp], 0
  000fb	75 07		 jne	 SHORT $LN4@add_operat

; 6275 :                 return -1;

  000fd	b8 ff ff ff ff	 mov	 eax, -1
  00102	eb 58		 jmp	 SHORT $LN15@add_operat
$LN4@add_operat:

; 6276 :             if (PyDict_SetItem(dict, p->name_strobj, descr) < 0)

  00104	4c 8b 44 24 28	 mov	 r8, QWORD PTR descr$[rsp]
  00109	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0010e	48 8b 50 30	 mov	 rdx, QWORD PTR [rax+48]
  00112	48 8b 4c 24 30	 mov	 rcx, QWORD PTR dict$[rsp]
  00117	e8 00 00 00 00	 call	 PyDict_SetItem
  0011c	85 c0		 test	 eax, eax
  0011e	7d 07		 jge	 SHORT $LN3@add_operat

; 6277 :                 return -1;

  00120	b8 ff ff ff ff	 mov	 eax, -1
  00125	eb 35		 jmp	 SHORT $LN15@add_operat
$LN3@add_operat:

; 6278 :             Py_DECREF(descr);

  00127	48 8b 4c 24 28	 mov	 rcx, QWORD PTR descr$[rsp]
  0012c	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@add_operat:

; 6279 :         }
; 6280 :     }

  00131	e9 f7 fe ff ff	 jmp	 $LN13@add_operat
$LN12@add_operat:

; 6281 :     if (type->tp_new != NULL) {

  00136	48 8b 44 24 50	 mov	 rax, QWORD PTR type$[rsp]
  0013b	48 83 b8 90 01
	00 00 00	 cmp	 QWORD PTR [rax+400], 0
  00143	74 15		 je	 SHORT $LN2@add_operat

; 6282 :         if (add_tp_new_wrapper(type) < 0)

  00145	48 8b 4c 24 50	 mov	 rcx, QWORD PTR type$[rsp]
  0014a	e8 00 00 00 00	 call	 add_tp_new_wrapper
  0014f	85 c0		 test	 eax, eax
  00151	7d 07		 jge	 SHORT $LN1@add_operat

; 6283 :             return -1;

  00153	b8 ff ff ff ff	 mov	 eax, -1
  00158	eb 02		 jmp	 SHORT $LN15@add_operat
$LN1@add_operat:
$LN2@add_operat:

; 6284 :     }
; 6285 :     return 0;

  0015a	33 c0		 xor	 eax, eax
$LN15@add_operat:

; 6286 : }

  0015c	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00160	c3		 ret	 0
add_operators ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$add_tp_new_wrapper DD imagerel add_tp_new_wrapper
	DD	imagerel add_tp_new_wrapper+193
	DD	imagerel $unwind$add_tp_new_wrapper
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$add_tp_new_wrapper DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT add_tp_new_wrapper
_TEXT	SEGMENT
func$ = 32
type$ = 64
add_tp_new_wrapper PROC					; COMDAT

; 4906 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 4907 :     PyObject *func;
; 4908 : 
; 4909 :     if (_PyDict_GetItemId(type->tp_dict, &PyId___new__) != NULL)

  00009	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId___new__
  0000e	8b c0		 mov	 eax, eax
  00010	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00016	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0001f	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00023	48 8b d0	 mov	 rdx, rax
  00026	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  0002b	48 8b 88 60 01
	00 00		 mov	 rcx, QWORD PTR [rax+352]
  00032	e8 00 00 00 00	 call	 _PyDict_GetItemId
  00037	48 85 c0	 test	 rax, rax
  0003a	74 04		 je	 SHORT $LN3@add_tp_new

; 4910 :         return 0;

  0003c	33 c0		 xor	 eax, eax
  0003e	eb 7c		 jmp	 SHORT $LN4@add_tp_new
$LN3@add_tp_new:

; 4911 :     func = PyCFunction_New(tp_new_methoddef, (PyObject *)type);

  00040	45 33 c0	 xor	 r8d, r8d
  00043	48 8b 54 24 40	 mov	 rdx, QWORD PTR type$[rsp]
  00048	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:tp_new_methoddef
  0004f	e8 00 00 00 00	 call	 PyCFunction_NewEx
  00054	48 89 44 24 20	 mov	 QWORD PTR func$[rsp], rax

; 4912 :     if (func == NULL)

  00059	48 83 7c 24 20
	00		 cmp	 QWORD PTR func$[rsp], 0
  0005f	75 07		 jne	 SHORT $LN2@add_tp_new

; 4913 :         return -1;

  00061	b8 ff ff ff ff	 mov	 eax, -1
  00066	eb 54		 jmp	 SHORT $LN4@add_tp_new
$LN2@add_tp_new:

; 4914 :     if (_PyDict_SetItemId(type->tp_dict, &PyId___new__, func)) {

  00068	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId___new__
  0006d	8b c0		 mov	 eax, eax
  0006f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00075	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0007e	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00082	4c 8b 44 24 20	 mov	 r8, QWORD PTR func$[rsp]
  00087	48 8b d0	 mov	 rdx, rax
  0008a	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  0008f	48 8b 88 60 01
	00 00		 mov	 rcx, QWORD PTR [rax+352]
  00096	e8 00 00 00 00	 call	 _PyDict_SetItemId
  0009b	85 c0		 test	 eax, eax
  0009d	74 11		 je	 SHORT $LN1@add_tp_new

; 4915 :         Py_DECREF(func);

  0009f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR func$[rsp]
  000a4	e8 00 00 00 00	 call	 _Py_DecRef

; 4916 :         return -1;

  000a9	b8 ff ff ff ff	 mov	 eax, -1
  000ae	eb 0c		 jmp	 SHORT $LN4@add_tp_new
$LN1@add_tp_new:

; 4917 :     }
; 4918 :     Py_DECREF(func);

  000b0	48 8b 4c 24 20	 mov	 rcx, QWORD PTR func$[rsp]
  000b5	e8 00 00 00 00	 call	 _Py_DecRef

; 4919 :     return 0;

  000ba	33 c0		 xor	 eax, eax
$LN4@add_tp_new:

; 4920 : }

  000bc	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000c0	c3		 ret	 0
add_tp_new_wrapper ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@CLOBMIMP@super_dealloc?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$super_dealloc DD imagerel super_dealloc
	DD	imagerel super_dealloc+379
	DD	imagerel $unwind$super_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$super_dealloc DD 010901H
	DD	0a209H
xdata	ENDS
;	COMDAT ??_C@_0O@CLOBMIMP@super_dealloc?$AA@
CONST	SEGMENT
??_C@_0O@CLOBMIMP@super_dealloc?$AA@ DB 'super_dealloc', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT super_dealloc
_TEXT	SEGMENT
su$ = 48
g$26676 = 56
tv79 = 64
self$ = 96
super_dealloc PROC					; COMDAT

; 6310 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 6311 :     superobject *su = (superobject *)self;

  00009	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  0000e	48 89 44 24 30	 mov	 QWORD PTR su$[rsp], rax

; 6312 : 
; 6313 :     _PyObject_GC_UNTRACK(self);

  00013	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0001b	4c 8b 4c 24 60	 mov	 r9, QWORD PTR self$[rsp]
  00020	41 b8 a9 18 00
	00		 mov	 r8d, 6313		; 000018a9H
  00026	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@PKBBAMFA@?4?4?2Objects?2typeobject?4c?$AA@
  0002d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@CLOBMIMP@super_dealloc?$AA@
  00034	e8 00 00 00 00	 call	 _PyParallel_Guard
  00039	85 c0		 test	 eax, eax
  0003b	0f 85 c1 00 00
	00		 jne	 $LN16@super_deal
$LN15@super_deal:
  00041	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00049	4c 8b 4c 24 60	 mov	 r9, QWORD PTR self$[rsp]
  0004e	41 b8 a9 18 00
	00		 mov	 r8d, 6313		; 000018a9H
  00054	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@PKBBAMFA@?4?4?2Objects?2typeobject?4c?$AA@
  0005b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@CLOBMIMP@super_dealloc?$AA@
  00062	e8 00 00 00 00	 call	 _PyParallel_Guard
  00067	85 c0		 test	 eax, eax
  00069	74 0b		 je	 SHORT $LN19@super_deal
  0006b	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR tv79[rsp], 0
  00074	eb 0e		 jmp	 SHORT $LN20@super_deal
$LN19@super_deal:
  00076	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  0007b	48 83 e8 18	 sub	 rax, 24
  0007f	48 89 44 24 40	 mov	 QWORD PTR tv79[rsp], rax
$LN20@super_deal:
  00084	48 8b 44 24 40	 mov	 rax, QWORD PTR tv79[rsp]
  00089	48 89 44 24 38	 mov	 QWORD PTR g$26676[rsp], rax
  0008e	48 8b 44 24 38	 mov	 rax, QWORD PTR g$26676[rsp]
  00093	48 83 78 10 fe	 cmp	 QWORD PTR [rax+16], -2
  00098	75 1c		 jne	 SHORT $LN21@super_deal
  0009a	41 b8 a9 18 00
	00		 mov	 r8d, 6313		; 000018a9H
  000a0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@GJLLIOPA@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAt?$AAy?$AAp?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  000a7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EM@HFMJMDDM@?$AAg?$AA?9?$AA?$DO?$AAg?$AAc?$AA?4?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AAG?$AAC?$AA_?$AAR?$AAE?$AAF?$AAS?$AA_?$AAU?$AAN?$AAT?$AAR@
  000ae	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000b4	33 c0		 xor	 eax, eax
$LN21@super_deal:
  000b6	48 8b 44 24 38	 mov	 rax, QWORD PTR g$26676[rsp]
  000bb	48 c7 40 10 fe
	ff ff ff	 mov	 QWORD PTR [rax+16], -2
  000c3	48 8b 44 24 38	 mov	 rax, QWORD PTR g$26676[rsp]
  000c8	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  000cc	48 8b 4c 24 38	 mov	 rcx, QWORD PTR g$26676[rsp]
  000d1	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000d4	48 89 08	 mov	 QWORD PTR [rax], rcx
  000d7	48 8b 44 24 38	 mov	 rax, QWORD PTR g$26676[rsp]
  000dc	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000df	48 8b 4c 24 38	 mov	 rcx, QWORD PTR g$26676[rsp]
  000e4	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  000e8	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  000ec	48 8b 44 24 38	 mov	 rax, QWORD PTR g$26676[rsp]
  000f1	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
  000f8	33 c0		 xor	 eax, eax
  000fa	85 c0		 test	 eax, eax
  000fc	0f 85 3f ff ff
	ff		 jne	 $LN15@super_deal
$LN16@super_deal:
$LN12@super_deal:

; 6314 :     Py_XDECREF(su->obj);

  00102	48 8b 44 24 30	 mov	 rax, QWORD PTR su$[rsp]
  00107	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  0010c	74 0e		 je	 SHORT $LN9@super_deal
  0010e	48 8b 44 24 30	 mov	 rax, QWORD PTR su$[rsp]
  00113	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  00117	e8 00 00 00 00	 call	 _Py_DecRef
$LN9@super_deal:
  0011c	33 c0		 xor	 eax, eax
  0011e	85 c0		 test	 eax, eax
  00120	75 e0		 jne	 SHORT $LN12@super_deal
$LN8@super_deal:

; 6315 :     Py_XDECREF(su->type);

  00122	48 8b 44 24 30	 mov	 rax, QWORD PTR su$[rsp]
  00127	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  0012c	74 0e		 je	 SHORT $LN5@super_deal
  0012e	48 8b 44 24 30	 mov	 rax, QWORD PTR su$[rsp]
  00133	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00137	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@super_deal:
  0013c	33 c0		 xor	 eax, eax
  0013e	85 c0		 test	 eax, eax
  00140	75 e0		 jne	 SHORT $LN8@super_deal
$LN4@super_deal:

; 6316 :     Py_XDECREF(su->obj_type);

  00142	48 8b 44 24 30	 mov	 rax, QWORD PTR su$[rsp]
  00147	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  0014c	74 0e		 je	 SHORT $LN1@super_deal
  0014e	48 8b 44 24 30	 mov	 rax, QWORD PTR su$[rsp]
  00153	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  00157	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@super_deal:
  0015c	33 c0		 xor	 eax, eax
  0015e	85 c0		 test	 eax, eax
  00160	75 e0		 jne	 SHORT $LN4@super_deal

; 6317 :     Py_TYPE(self)->tp_free(self);

  00162	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00167	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0016b	48 8b 4c 24 60	 mov	 rcx, QWORD PTR self$[rsp]
  00170	ff 90 98 01 00
	00		 call	 QWORD PTR [rax+408]

; 6318 : }

  00176	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0017a	c3		 ret	 0
super_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BM@MCAPHNNK@?$DMsuper?3?5?$DMclass?5?8?$CFs?8?$DO?0?5NULL?$DO?$AA@ ; `string'
PUBLIC	??_C@_0CD@LNFHHGFH@?$DMsuper?3?5?$DMclass?5?8?$CFs?8?$DO?0?5?$DM?$CFs?5object@ ; `string'
PUBLIC	??_C@_04HIBGFPH@NULL?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$super_repr DD imagerel super_repr
	DD	imagerel super_repr+175
	DD	imagerel $unwind$super_repr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$super_repr DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0BM@MCAPHNNK@?$DMsuper?3?5?$DMclass?5?8?$CFs?8?$DO?0?5NULL?$DO?$AA@
CONST	SEGMENT
??_C@_0BM@MCAPHNNK@?$DMsuper?3?5?$DMclass?5?8?$CFs?8?$DO?0?5NULL?$DO?$AA@ DB '<'
	DB	'super: <class ''%s''>, NULL>', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@LNFHHGFH@?$DMsuper?3?5?$DMclass?5?8?$CFs?8?$DO?0?5?$DM?$CFs?5object@
CONST	SEGMENT
??_C@_0CD@LNFHHGFH@?$DMsuper?3?5?$DMclass?5?8?$CFs?8?$DO?0?5?$DM?$CFs?5object@ DB '<'
	DB	'super: <class ''%s''>, <%s object>>', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04HIBGFPH@NULL?$AA@
CONST	SEGMENT
??_C@_04HIBGFPH@NULL?$AA@ DB 'NULL', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT super_repr
_TEXT	SEGMENT
su$ = 32
tv74 = 40
tv82 = 48
self$ = 80
super_repr PROC						; COMDAT

; 6322 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 6323 :     superobject *su = (superobject *)self;

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  0000e	48 89 44 24 20	 mov	 QWORD PTR su$[rsp], rax

; 6324 : 
; 6325 :     if (su->obj_type)

  00013	48 8b 44 24 20	 mov	 rax, QWORD PTR su$[rsp]
  00018	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  0001d	74 4e		 je	 SHORT $LN2@super_repr

; 6326 :         return PyUnicode_FromFormat(
; 6327 :             "<super: <class '%s'>, <%s object>>",
; 6328 :             su->type ? su->type->tp_name : "NULL",
; 6329 :             su->obj_type->tp_name);

  0001f	48 8b 44 24 20	 mov	 rax, QWORD PTR su$[rsp]
  00024	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00029	74 14		 je	 SHORT $LN5@super_repr
  0002b	48 8b 44 24 20	 mov	 rax, QWORD PTR su$[rsp]
  00030	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00034	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00038	48 89 44 24 28	 mov	 QWORD PTR tv74[rsp], rax
  0003d	eb 0c		 jmp	 SHORT $LN6@super_repr
$LN5@super_repr:
  0003f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04HIBGFPH@NULL?$AA@
  00046	48 89 44 24 28	 mov	 QWORD PTR tv74[rsp], rax
$LN6@super_repr:
  0004b	48 8b 44 24 20	 mov	 rax, QWORD PTR su$[rsp]
  00050	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00054	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  00058	48 8b 54 24 28	 mov	 rdx, QWORD PTR tv74[rsp]
  0005d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CD@LNFHHGFH@?$DMsuper?3?5?$DMclass?5?8?$CFs?8?$DO?0?5?$DM?$CFs?5object@
  00064	e8 00 00 00 00	 call	 PyUnicode_FromFormat
  00069	eb 3f		 jmp	 SHORT $LN3@super_repr

; 6330 :     else

  0006b	eb 3d		 jmp	 SHORT $LN1@super_repr
$LN2@super_repr:

; 6331 :         return PyUnicode_FromFormat(
; 6332 :             "<super: <class '%s'>, NULL>",
; 6333 :             su->type ? su->type->tp_name : "NULL");

  0006d	48 8b 44 24 20	 mov	 rax, QWORD PTR su$[rsp]
  00072	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00077	74 14		 je	 SHORT $LN7@super_repr
  00079	48 8b 44 24 20	 mov	 rax, QWORD PTR su$[rsp]
  0007e	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00082	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00086	48 89 44 24 30	 mov	 QWORD PTR tv82[rsp], rax
  0008b	eb 0c		 jmp	 SHORT $LN8@super_repr
$LN7@super_repr:
  0008d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_04HIBGFPH@NULL?$AA@
  00094	48 89 44 24 30	 mov	 QWORD PTR tv82[rsp], rax
$LN8@super_repr:
  00099	48 8b 54 24 30	 mov	 rdx, QWORD PTR tv82[rsp]
  0009e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BM@MCAPHNNK@?$DMsuper?3?5?$DMclass?5?8?$CFs?8?$DO?0?5NULL?$DO?$AA@
  000a5	e8 00 00 00 00	 call	 PyUnicode_FromFormat
$LN1@super_repr:
$LN3@super_repr:

; 6334 : }

  000aa	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000ae	c3		 ret	 0
super_repr ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$super_getattro DD imagerel super_getattro
	DD	imagerel super_getattro+824
	DD	imagerel $unwind$super_getattro
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$super_getattro DD 021101H
	DD	0110111H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT super_getattro
_TEXT	SEGMENT
skip$ = 32
su$ = 40
res$26727 = 48
n$26733 = 56
i$26732 = 64
mro$26726 = 72
dict$26729 = 80
f$26731 = 88
tmp$26728 = 96
starttype$26730 = 104
tv66 = 112
tv94 = 116
tv173 = 120
self$ = 144
name$ = 152
super_getattro PROC					; COMDAT

; 6338 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 6339 :     superobject *su = (superobject *)self;

  00011	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00019	48 89 44 24 28	 mov	 QWORD PTR su$[rsp], rax

; 6340 :     int skip = su->obj_type == NULL;

  0001e	48 8b 44 24 28	 mov	 rax, QWORD PTR su$[rsp]
  00023	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  00028	75 0a		 jne	 SHORT $LN18@super_geta
  0002a	c7 44 24 70 01
	00 00 00	 mov	 DWORD PTR tv66[rsp], 1
  00032	eb 08		 jmp	 SHORT $LN19@super_geta
$LN18@super_geta:
  00034	c7 44 24 70 00
	00 00 00	 mov	 DWORD PTR tv66[rsp], 0
$LN19@super_geta:
  0003c	8b 44 24 70	 mov	 eax, DWORD PTR tv66[rsp]
  00040	89 44 24 20	 mov	 DWORD PTR skip$[rsp], eax

; 6341 : 
; 6342 :     if (!skip) {

  00044	83 7c 24 20 00	 cmp	 DWORD PTR skip$[rsp], 0
  00049	0f 85 c8 00 00
	00		 jne	 $LN15@super_geta

; 6343 :         /* We want __class__ to return the class of the super object
; 6344 :            (i.e. super, or a subclass), not the class of su->obj. */
; 6345 :         skip = (PyUnicode_Check(name) &&
; 6346 :             PyUnicode_GET_LENGTH(name) == 9 &&
; 6347 :             PyUnicode_CompareWithASCIIString(name, "__class__") == 0);

  0004f	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR name$[rsp]
  00057	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0005b	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00061	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00066	85 c0		 test	 eax, eax
  00068	0f 84 99 00 00
	00		 je	 $LN22@super_geta
  0006e	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR name$[rsp]
  00076	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0007a	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00080	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00085	85 c0		 test	 eax, eax
  00087	75 1c		 jne	 SHORT $LN20@super_geta
  00089	41 b8 ca 18 00
	00		 mov	 r8d, 6346		; 000018caH
  0008f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@GJLLIOPA@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAt?$AAy?$AAp?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00096	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@NNIOODFF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAn?$AAa?$AAm?$AAe?$AA?$CJ?$AA?$AA@
  0009d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000a3	33 c0		 xor	 eax, eax
$LN20@super_geta:
  000a5	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR name$[rsp]
  000ad	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  000b0	c1 e8 07	 shr	 eax, 7
  000b3	83 e0 01	 and	 eax, 1
  000b6	85 c0		 test	 eax, eax
  000b8	75 1c		 jne	 SHORT $LN21@super_geta
  000ba	41 b8 ca 18 00
	00		 mov	 r8d, 6346		; 000018caH
  000c0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@GJLLIOPA@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAt?$AAy?$AAp?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  000c7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DC@BCOPIKLM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAn?$AAa?$AAm?$AAe?$AA?$CJ?$AA?$AA@
  000ce	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000d4	33 c0		 xor	 eax, eax
$LN21@super_geta:
  000d6	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR name$[rsp]
  000de	48 83 78 60 09	 cmp	 QWORD PTR [rax+96], 9
  000e3	75 22		 jne	 SHORT $LN22@super_geta
  000e5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09LFGACEKG@__class__?$AA@
  000ec	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR name$[rsp]
  000f4	e8 00 00 00 00	 call	 PyUnicode_CompareWithASCIIString
  000f9	85 c0		 test	 eax, eax
  000fb	75 0a		 jne	 SHORT $LN22@super_geta
  000fd	c7 44 24 74 01
	00 00 00	 mov	 DWORD PTR tv94[rsp], 1
  00105	eb 08		 jmp	 SHORT $LN23@super_geta
$LN22@super_geta:
  00107	c7 44 24 74 00
	00 00 00	 mov	 DWORD PTR tv94[rsp], 0
$LN23@super_geta:
  0010f	8b 44 24 74	 mov	 eax, DWORD PTR tv94[rsp]
  00113	89 44 24 20	 mov	 DWORD PTR skip$[rsp], eax
$LN15@super_geta:

; 6348 :     }
; 6349 : 
; 6350 :     if (!skip) {

  00117	83 7c 24 20 00	 cmp	 DWORD PTR skip$[rsp], 0
  0011c	0f 85 f9 01 00
	00		 jne	 $LN14@super_geta

; 6351 :         PyObject *mro, *res, *tmp, *dict;
; 6352 :         PyTypeObject *starttype;
; 6353 :         descrgetfunc f;
; 6354 :         Py_ssize_t i, n;
; 6355 : 
; 6356 :         starttype = su->obj_type;

  00122	48 8b 44 24 28	 mov	 rax, QWORD PTR su$[rsp]
  00127	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  0012b	48 89 44 24 68	 mov	 QWORD PTR starttype$26730[rsp], rax

; 6357 :         mro = starttype->tp_mro;

  00130	48 8b 44 24 68	 mov	 rax, QWORD PTR starttype$26730[rsp]
  00135	48 8b 80 b0 01
	00 00		 mov	 rax, QWORD PTR [rax+432]
  0013c	48 89 44 24 48	 mov	 QWORD PTR mro$26726[rsp], rax

; 6358 : 
; 6359 :         if (mro == NULL)

  00141	48 83 7c 24 48
	00		 cmp	 QWORD PTR mro$26726[rsp], 0
  00147	75 0b		 jne	 SHORT $LN13@super_geta

; 6360 :             n = 0;

  00149	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR n$26733[rsp], 0

; 6361 :         else {

  00152	eb 42		 jmp	 SHORT $LN12@super_geta
$LN13@super_geta:

; 6362 :             assert(PyTuple_Check(mro));

  00154	48 8b 44 24 48	 mov	 rax, QWORD PTR mro$26726[rsp]
  00159	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0015d	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00163	25 00 00 00 04	 and	 eax, 67108864		; 04000000H
  00168	85 c0		 test	 eax, eax
  0016a	75 1c		 jne	 SHORT $LN24@super_geta
  0016c	41 b8 da 18 00
	00		 mov	 r8d, 6362		; 000018daH
  00172	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@GJLLIOPA@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAt?$AAy?$AAp?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00179	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@DAMEHKMF@?$AAP?$AAy?$AAT?$AAu?$AAp?$AAl?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAm?$AAr?$AAo?$AA?$CJ?$AA?$AA@
  00180	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00186	33 c0		 xor	 eax, eax
$LN24@super_geta:

; 6363 :             n = PyTuple_GET_SIZE(mro);

  00188	48 8b 44 24 48	 mov	 rax, QWORD PTR mro$26726[rsp]
  0018d	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00191	48 89 44 24 38	 mov	 QWORD PTR n$26733[rsp], rax
$LN12@super_geta:

; 6364 :         }
; 6365 :         for (i = 0; i < n; i++) {

  00196	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR i$26732[rsp], 0
  0019f	eb 0d		 jmp	 SHORT $LN11@super_geta
$LN10@super_geta:
  001a1	48 8b 44 24 40	 mov	 rax, QWORD PTR i$26732[rsp]
  001a6	48 ff c0	 inc	 rax
  001a9	48 89 44 24 40	 mov	 QWORD PTR i$26732[rsp], rax
$LN11@super_geta:
  001ae	48 8b 44 24 38	 mov	 rax, QWORD PTR n$26733[rsp]
  001b3	48 39 44 24 40	 cmp	 QWORD PTR i$26732[rsp], rax
  001b8	7d 1e		 jge	 SHORT $LN9@super_geta

; 6366 :             if ((PyObject *)(su->type) == PyTuple_GET_ITEM(mro, i))

  001ba	48 8b 44 24 28	 mov	 rax, QWORD PTR su$[rsp]
  001bf	48 8b 4c 24 48	 mov	 rcx, QWORD PTR mro$26726[rsp]
  001c4	48 8b 54 24 40	 mov	 rdx, QWORD PTR i$26732[rsp]
  001c9	48 8b 4c d1 70	 mov	 rcx, QWORD PTR [rcx+rdx*8+112]
  001ce	48 39 48 60	 cmp	 QWORD PTR [rax+96], rcx
  001d2	75 02		 jne	 SHORT $LN8@super_geta

; 6367 :                 break;

  001d4	eb 02		 jmp	 SHORT $LN9@super_geta
$LN8@super_geta:

; 6368 :         }

  001d6	eb c9		 jmp	 SHORT $LN10@super_geta
$LN9@super_geta:

; 6369 :         i++;

  001d8	48 8b 44 24 40	 mov	 rax, QWORD PTR i$26732[rsp]
  001dd	48 ff c0	 inc	 rax
  001e0	48 89 44 24 40	 mov	 QWORD PTR i$26732[rsp], rax

; 6370 :         res = NULL;

  001e5	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR res$26727[rsp], 0

; 6371 :         /* keep a strong reference to mro because starttype->tp_mro can be
; 6372 :            replaced during PyDict_GetItem(dict, name)  */
; 6373 :         Py_INCREF(mro);

  001ee	48 8b 4c 24 48	 mov	 rcx, QWORD PTR mro$26726[rsp]
  001f3	e8 00 00 00 00	 call	 _Py_IncRef

; 6374 :         for (; i < n; i++) {

  001f8	eb 0d		 jmp	 SHORT $LN7@super_geta
$LN6@super_geta:
  001fa	48 8b 44 24 40	 mov	 rax, QWORD PTR i$26732[rsp]
  001ff	48 ff c0	 inc	 rax
  00202	48 89 44 24 40	 mov	 QWORD PTR i$26732[rsp], rax
$LN7@super_geta:
  00207	48 8b 44 24 38	 mov	 rax, QWORD PTR n$26733[rsp]
  0020c	48 39 44 24 40	 cmp	 QWORD PTR i$26732[rsp], rax
  00211	0f 8d fa 00 00
	00		 jge	 $LN5@super_geta

; 6375 :             tmp = PyTuple_GET_ITEM(mro, i);

  00217	48 8b 44 24 48	 mov	 rax, QWORD PTR mro$26726[rsp]
  0021c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR i$26732[rsp]
  00221	48 8b 44 c8 70	 mov	 rax, QWORD PTR [rax+rcx*8+112]
  00226	48 89 44 24 60	 mov	 QWORD PTR tmp$26728[rsp], rax

; 6376 :             if (PyType_Check(tmp))

  0022b	48 8b 44 24 60	 mov	 rax, QWORD PTR tmp$26728[rsp]
  00230	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00234	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0023a	25 00 00 00 80	 and	 eax, -2147483648	; ffffffff80000000H
  0023f	85 c0		 test	 eax, eax
  00241	74 13		 je	 SHORT $LN4@super_geta

; 6377 :                 dict = ((PyTypeObject *)tmp)->tp_dict;

  00243	48 8b 44 24 60	 mov	 rax, QWORD PTR tmp$26728[rsp]
  00248	48 8b 80 60 01
	00 00		 mov	 rax, QWORD PTR [rax+352]
  0024f	48 89 44 24 50	 mov	 QWORD PTR dict$26729[rsp], rax

; 6378 :             else

  00254	eb 02		 jmp	 SHORT $LN3@super_geta
$LN4@super_geta:

; 6379 :                 continue;

  00256	eb a2		 jmp	 SHORT $LN6@super_geta
$LN3@super_geta:

; 6380 :             res = PyDict_GetItem(dict, name);

  00258	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR name$[rsp]
  00260	48 8b 4c 24 50	 mov	 rcx, QWORD PTR dict$26729[rsp]
  00265	e8 00 00 00 00	 call	 PyDict_GetItem
  0026a	48 89 44 24 30	 mov	 QWORD PTR res$26727[rsp], rax

; 6381 :             if (res != NULL) {

  0026f	48 83 7c 24 30
	00		 cmp	 QWORD PTR res$26727[rsp], 0
  00275	0f 84 91 00 00
	00		 je	 $LN2@super_geta

; 6382 :                 Py_INCREF(res);

  0027b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR res$26727[rsp]
  00280	e8 00 00 00 00	 call	 _Py_IncRef

; 6383 :                 f = Py_TYPE(res)->tp_descr_get;

  00285	48 8b 44 24 30	 mov	 rax, QWORD PTR res$26727[rsp]
  0028a	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0028e	48 8b 80 68 01
	00 00		 mov	 rax, QWORD PTR [rax+360]
  00295	48 89 44 24 58	 mov	 QWORD PTR f$26731[rsp], rax

; 6384 :                 if (f != NULL) {

  0029a	48 83 7c 24 58
	00		 cmp	 QWORD PTR f$26731[rsp], 0
  002a0	74 59		 je	 SHORT $LN1@super_geta

; 6385 :                     tmp = f(res,
; 6386 :                         /* Only pass 'obj' param if
; 6387 :                            this is instance-mode super
; 6388 :                            (See SF ID #743627)
; 6389 :                         */
; 6390 :                         (su->obj == (PyObject *)
; 6391 :                                     su->obj_type
; 6392 :                             ? (PyObject *)NULL
; 6393 :                             : su->obj),
; 6394 :                         (PyObject *)starttype);

  002a2	48 8b 44 24 28	 mov	 rax, QWORD PTR su$[rsp]
  002a7	48 8b 4c 24 28	 mov	 rcx, QWORD PTR su$[rsp]
  002ac	48 8b 49 70	 mov	 rcx, QWORD PTR [rcx+112]
  002b0	48 39 48 68	 cmp	 QWORD PTR [rax+104], rcx
  002b4	75 0b		 jne	 SHORT $LN25@super_geta
  002b6	48 c7 44 24 78
	00 00 00 00	 mov	 QWORD PTR tv173[rsp], 0
  002bf	eb 0e		 jmp	 SHORT $LN26@super_geta
$LN25@super_geta:
  002c1	48 8b 44 24 28	 mov	 rax, QWORD PTR su$[rsp]
  002c6	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  002ca	48 89 44 24 78	 mov	 QWORD PTR tv173[rsp], rax
$LN26@super_geta:
  002cf	4c 8b 44 24 68	 mov	 r8, QWORD PTR starttype$26730[rsp]
  002d4	48 8b 54 24 78	 mov	 rdx, QWORD PTR tv173[rsp]
  002d9	48 8b 4c 24 30	 mov	 rcx, QWORD PTR res$26727[rsp]
  002de	ff 54 24 58	 call	 QWORD PTR f$26731[rsp]
  002e2	48 89 44 24 60	 mov	 QWORD PTR tmp$26728[rsp], rax

; 6395 :                     Py_DECREF(res);

  002e7	48 8b 4c 24 30	 mov	 rcx, QWORD PTR res$26727[rsp]
  002ec	e8 00 00 00 00	 call	 _Py_DecRef

; 6396 :                     res = tmp;

  002f1	48 8b 44 24 60	 mov	 rax, QWORD PTR tmp$26728[rsp]
  002f6	48 89 44 24 30	 mov	 QWORD PTR res$26727[rsp], rax
$LN1@super_geta:

; 6397 :                 }
; 6398 :                 Py_DECREF(mro);

  002fb	48 8b 4c 24 48	 mov	 rcx, QWORD PTR mro$26726[rsp]
  00300	e8 00 00 00 00	 call	 _Py_DecRef

; 6399 :                 return res;

  00305	48 8b 44 24 30	 mov	 rax, QWORD PTR res$26727[rsp]
  0030a	eb 24		 jmp	 SHORT $LN16@super_geta
$LN2@super_geta:

; 6400 :             }
; 6401 :         }

  0030c	e9 e9 fe ff ff	 jmp	 $LN6@super_geta
$LN5@super_geta:

; 6402 :         Py_DECREF(mro);

  00311	48 8b 4c 24 48	 mov	 rcx, QWORD PTR mro$26726[rsp]
  00316	e8 00 00 00 00	 call	 _Py_DecRef
$LN14@super_geta:

; 6403 :     }
; 6404 :     return PyObject_GenericGetAttr(self, name);

  0031b	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR name$[rsp]
  00323	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  0032b	e8 00 00 00 00	 call	 PyObject_GenericGetAttr
$LN16@super_geta:

; 6405 : }

  00330	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  00337	c3		 ret	 0
super_getattro ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$super_descr_get DD imagerel super_descr_get
	DD	imagerel super_descr_get+293
	DD	imagerel $unwind$super_descr_get
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$super_descr_get DD 011301H
	DD	08213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT super_descr_get
_TEXT	SEGMENT
su$ = 32
newobj$ = 40
obj_type$26824 = 48
self$ = 80
obj$ = 88
type$ = 96
super_descr_get PROC					; COMDAT

; 6465 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 6466 :     superobject *su = (superobject *)self;

  00013	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00018	48 89 44 24 20	 mov	 QWORD PTR su$[rsp], rax

; 6467 :     superobject *newobj;
; 6468 : 
; 6469 :     if (obj == NULL || obj == Py_None || su->obj != NULL) {

  0001d	48 83 7c 24 58
	00		 cmp	 QWORD PTR obj$[rsp], 0
  00023	74 1a		 je	 SHORT $LN5@super_desc
  00025	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0002c	48 39 44 24 58	 cmp	 QWORD PTR obj$[rsp], rax
  00031	74 0c		 je	 SHORT $LN5@super_desc
  00033	48 8b 44 24 20	 mov	 rax, QWORD PTR su$[rsp]
  00038	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  0003d	74 14		 je	 SHORT $LN6@super_desc
$LN5@super_desc:

; 6470 :         /* Not binding to an object, or already bound */
; 6471 :         Py_INCREF(self);

  0003f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  00044	e8 00 00 00 00	 call	 _Py_IncRef

; 6472 :         return self;

  00049	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  0004e	e9 cd 00 00 00	 jmp	 $LN7@super_desc
$LN6@super_desc:

; 6473 :     }
; 6474 :     if (Py_TYPE(su) != &PySuper_Type)

  00053	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PySuper_Type
  0005a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR su$[rsp]
  0005f	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00063	74 29		 je	 SHORT $LN4@super_desc

; 6475 :         /* If su is an instance of a (strict) subclass of super,
; 6476 :            call its type */
; 6477 :         return PyObject_CallFunctionObjArgs((PyObject *)Py_TYPE(su),
; 6478 :                                             su->type, obj, NULL);

  00065	45 33 c9	 xor	 r9d, r9d
  00068	4c 8b 44 24 58	 mov	 r8, QWORD PTR obj$[rsp]
  0006d	48 8b 44 24 20	 mov	 rax, QWORD PTR su$[rsp]
  00072	48 8b 50 60	 mov	 rdx, QWORD PTR [rax+96]
  00076	48 8b 44 24 20	 mov	 rax, QWORD PTR su$[rsp]
  0007b	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  0007f	e8 00 00 00 00	 call	 PyObject_CallFunctionObjArgs
  00084	e9 97 00 00 00	 jmp	 $LN7@super_desc

; 6479 :     else {

  00089	e9 92 00 00 00	 jmp	 $LN3@super_desc
$LN4@super_desc:

; 6480 :         /* Inline the common case */
; 6481 :         PyTypeObject *obj_type = supercheck(su->type, obj);

  0008e	48 8b 54 24 58	 mov	 rdx, QWORD PTR obj$[rsp]
  00093	48 8b 44 24 20	 mov	 rax, QWORD PTR su$[rsp]
  00098	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  0009c	e8 00 00 00 00	 call	 supercheck
  000a1	48 89 44 24 30	 mov	 QWORD PTR obj_type$26824[rsp], rax

; 6482 :         if (obj_type == NULL)

  000a6	48 83 7c 24 30
	00		 cmp	 QWORD PTR obj_type$26824[rsp], 0
  000ac	75 04		 jne	 SHORT $LN2@super_desc

; 6483 :             return NULL;

  000ae	33 c0		 xor	 eax, eax
  000b0	eb 6e		 jmp	 SHORT $LN7@super_desc
$LN2@super_desc:

; 6484 :         newobj = (superobject *)PySuper_Type.tp_new(&PySuper_Type,
; 6485 :                                                  NULL, NULL);

  000b2	45 33 c0	 xor	 r8d, r8d
  000b5	33 d2		 xor	 edx, edx
  000b7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PySuper_Type
  000be	ff 15 90 01 00
	00		 call	 QWORD PTR PySuper_Type+400
  000c4	48 89 44 24 28	 mov	 QWORD PTR newobj$[rsp], rax

; 6486 :         if (newobj == NULL)

  000c9	48 83 7c 24 28
	00		 cmp	 QWORD PTR newobj$[rsp], 0
  000cf	75 04		 jne	 SHORT $LN1@super_desc

; 6487 :             return NULL;

  000d1	33 c0		 xor	 eax, eax
  000d3	eb 4b		 jmp	 SHORT $LN7@super_desc
$LN1@super_desc:

; 6488 :         Py_INCREF(su->type);

  000d5	48 8b 44 24 20	 mov	 rax, QWORD PTR su$[rsp]
  000da	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  000de	e8 00 00 00 00	 call	 _Py_IncRef

; 6489 :         Py_INCREF(obj);

  000e3	48 8b 4c 24 58	 mov	 rcx, QWORD PTR obj$[rsp]
  000e8	e8 00 00 00 00	 call	 _Py_IncRef

; 6490 :         newobj->type = su->type;

  000ed	48 8b 44 24 28	 mov	 rax, QWORD PTR newobj$[rsp]
  000f2	48 8b 4c 24 20	 mov	 rcx, QWORD PTR su$[rsp]
  000f7	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  000fb	48 89 48 60	 mov	 QWORD PTR [rax+96], rcx

; 6491 :         newobj->obj = obj;

  000ff	48 8b 44 24 28	 mov	 rax, QWORD PTR newobj$[rsp]
  00104	48 8b 4c 24 58	 mov	 rcx, QWORD PTR obj$[rsp]
  00109	48 89 48 68	 mov	 QWORD PTR [rax+104], rcx

; 6492 :         newobj->obj_type = obj_type;

  0010d	48 8b 44 24 28	 mov	 rax, QWORD PTR newobj$[rsp]
  00112	48 8b 4c 24 30	 mov	 rcx, QWORD PTR obj_type$26824[rsp]
  00117	48 89 48 70	 mov	 QWORD PTR [rax+112], rcx

; 6493 :         return (PyObject *)newobj;

  0011b	48 8b 44 24 28	 mov	 rax, QWORD PTR newobj$[rsp]
$LN3@super_desc:
$LN7@super_desc:

; 6494 :     }
; 6495 : }

  00120	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00124	c3		 ret	 0
super_descr_get ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DN@MCJHLACM@super?$CItype?0?5obj?$CJ?3?5obj?5must?5be?5an@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$supercheck DD imagerel supercheck
	DD	imagerel supercheck+309
	DD	imagerel $unwind$supercheck
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$supercheck DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT ??_C@_0DN@MCJHLACM@super?$CItype?0?5obj?$CJ?3?5obj?5must?5be?5an@
CONST	SEGMENT
??_C@_0DN@MCJHLACM@super?$CItype?0?5obj?$CJ?3?5obj?5must?5be?5an@ DB 'sup'
	DB	'er(type, obj): obj must be an instance or subtype of type', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT supercheck
_TEXT	SEGMENT
class_attr$26786 = 32
ok$26792 = 40
type$ = 64
obj$ = 72
supercheck PROC						; COMDAT

; 6409 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 6410 :     /* Check that a super() call makes sense.  Return a type object.
; 6411 : 
; 6412 :        obj can be a class, or an instance of one:
; 6413 : 
; 6414 :        - If it is a class, it must be a subclass of 'type'.      This case is
; 6415 :          used for class methods; the return value is obj.
; 6416 : 
; 6417 :        - If it is an instance, it must be an instance of 'type'.  This is
; 6418 :          the normal case; the return value is obj.__class__.
; 6419 : 
; 6420 :        But... when obj is an instance, we want to allow for the case where
; 6421 :        Py_TYPE(obj) is not a subclass of type, but obj.__class__ is!
; 6422 :        This will allow using super() with a proxy for obj.
; 6423 :     */
; 6424 : 
; 6425 :     /* Check for first bullet above (special case) */
; 6426 :     if (PyType_Check(obj) && PyType_IsSubtype((PyTypeObject *)obj, type)) {

  0000e	48 8b 44 24 48	 mov	 rax, QWORD PTR obj$[rsp]
  00013	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00017	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0001d	25 00 00 00 80	 and	 eax, -2147483648	; ffffffff80000000H
  00022	85 c0		 test	 eax, eax
  00024	74 27		 je	 SHORT $LN7@supercheck
  00026	48 8b 54 24 40	 mov	 rdx, QWORD PTR type$[rsp]
  0002b	48 8b 4c 24 48	 mov	 rcx, QWORD PTR obj$[rsp]
  00030	e8 00 00 00 00	 call	 PyType_IsSubtype
  00035	85 c0		 test	 eax, eax
  00037	74 14		 je	 SHORT $LN7@supercheck

; 6427 :         Py_INCREF(obj);

  00039	48 8b 4c 24 48	 mov	 rcx, QWORD PTR obj$[rsp]
  0003e	e8 00 00 00 00	 call	 _Py_IncRef

; 6428 :         return (PyTypeObject *)obj;

  00043	48 8b 44 24 48	 mov	 rax, QWORD PTR obj$[rsp]
  00048	e9 e3 00 00 00	 jmp	 $LN8@supercheck
$LN7@supercheck:

; 6429 :     }
; 6430 : 
; 6431 :     /* Normal case */
; 6432 :     if (PyType_IsSubtype(Py_TYPE(obj), type)) {

  0004d	48 8b 54 24 40	 mov	 rdx, QWORD PTR type$[rsp]
  00052	48 8b 44 24 48	 mov	 rax, QWORD PTR obj$[rsp]
  00057	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  0005b	e8 00 00 00 00	 call	 PyType_IsSubtype
  00060	85 c0		 test	 eax, eax
  00062	74 21		 je	 SHORT $LN6@supercheck

; 6433 :         Py_INCREF(Py_TYPE(obj));

  00064	48 8b 44 24 48	 mov	 rax, QWORD PTR obj$[rsp]
  00069	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  0006d	e8 00 00 00 00	 call	 _Py_IncRef

; 6434 :         return Py_TYPE(obj);

  00072	48 8b 44 24 48	 mov	 rax, QWORD PTR obj$[rsp]
  00077	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0007b	e9 b0 00 00 00	 jmp	 $LN8@supercheck

; 6435 :     }
; 6436 :     else {

  00080	e9 96 00 00 00	 jmp	 $LN5@supercheck
$LN6@supercheck:

; 6437 :         /* Try the slow way */
; 6438 :         PyObject *class_attr;
; 6439 : 
; 6440 :         class_attr = _PyObject_GetAttrId(obj, &PyId___class__);

  00085	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId___class__
  0008a	8b c0		 mov	 eax, eax
  0008c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00092	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0009b	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0009f	48 8b d0	 mov	 rdx, rax
  000a2	48 8b 4c 24 48	 mov	 rcx, QWORD PTR obj$[rsp]
  000a7	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  000ac	48 89 44 24 20	 mov	 QWORD PTR class_attr$26786[rsp], rax

; 6441 :         if (class_attr != NULL &&
; 6442 :             PyType_Check(class_attr) &&
; 6443 :             (PyTypeObject *)class_attr != Py_TYPE(obj))

  000b1	48 83 7c 24 20
	00		 cmp	 QWORD PTR class_attr$26786[rsp], 0
  000b7	74 49		 je	 SHORT $LN4@supercheck
  000b9	48 8b 44 24 20	 mov	 rax, QWORD PTR class_attr$26786[rsp]
  000be	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000c2	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000c8	25 00 00 00 80	 and	 eax, -2147483648	; ffffffff80000000H
  000cd	85 c0		 test	 eax, eax
  000cf	74 31		 je	 SHORT $LN4@supercheck
  000d1	48 8b 44 24 48	 mov	 rax, QWORD PTR obj$[rsp]
  000d6	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000da	48 39 44 24 20	 cmp	 QWORD PTR class_attr$26786[rsp], rax
  000df	74 21		 je	 SHORT $LN4@supercheck

; 6444 :         {
; 6445 :             int ok = PyType_IsSubtype(
; 6446 :                 (PyTypeObject *)class_attr, type);

  000e1	48 8b 54 24 40	 mov	 rdx, QWORD PTR type$[rsp]
  000e6	48 8b 4c 24 20	 mov	 rcx, QWORD PTR class_attr$26786[rsp]
  000eb	e8 00 00 00 00	 call	 PyType_IsSubtype
  000f0	89 44 24 28	 mov	 DWORD PTR ok$26792[rsp], eax

; 6447 :             if (ok)

  000f4	83 7c 24 28 00	 cmp	 DWORD PTR ok$26792[rsp], 0
  000f9	74 07		 je	 SHORT $LN3@supercheck

; 6448 :                 return (PyTypeObject *)class_attr;

  000fb	48 8b 44 24 20	 mov	 rax, QWORD PTR class_attr$26786[rsp]
  00100	eb 2e		 jmp	 SHORT $LN8@supercheck
$LN3@supercheck:
$LN4@supercheck:

; 6449 :         }
; 6450 : 
; 6451 :         if (class_attr == NULL)

  00102	48 83 7c 24 20
	00		 cmp	 QWORD PTR class_attr$26786[rsp], 0
  00108	75 07		 jne	 SHORT $LN2@supercheck

; 6452 :             PyErr_Clear();

  0010a	e8 00 00 00 00	 call	 PyErr_Clear

; 6453 :         else

  0010f	eb 0a		 jmp	 SHORT $LN1@supercheck
$LN2@supercheck:

; 6454 :             Py_DECREF(class_attr);

  00111	48 8b 4c 24 20	 mov	 rcx, QWORD PTR class_attr$26786[rsp]
  00116	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@supercheck:
$LN5@supercheck:

; 6455 :     }
; 6456 : 
; 6457 :     PyErr_SetString(PyExc_TypeError,
; 6458 :                     "super(type, obj): "
; 6459 :                     "obj must be an instance or subtype of type");

  0011b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DN@MCJHLACM@super?$CItype?0?5obj?$CJ?3?5obj?5must?5be?5an@
  00122	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00129	e8 00 00 00 00	 call	 PyErr_SetString

; 6460 :     return NULL;

  0012e	33 c0		 xor	 eax, eax
$LN8@supercheck:

; 6461 : }

  00130	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00134	c3		 ret	 0
supercheck ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CC@MOBJHGCC@super?$CI?$CJ?3?5__class__?5cell?5not?5foun@ ; `string'
PUBLIC	??_C@_0CG@NNBMGMFD@super?$CI?$CJ?3?5__class__?5is?5not?5a?5type@ ; `string'
PUBLIC	??_C@_0BO@HJPNCDNH@super?$CI?$CJ?3?5empty?5__class__?5cell?$AA@ ; `string'
PUBLIC	??_C@_0BM@OPAPJHIO@super?$CI?$CJ?3?5bad?5__class__?5cell?$AA@ ; `string'
PUBLIC	??_C@_1DO@BCANCKAC@?$AAP?$AAy?$AAT?$AAu?$AAp?$AAl?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAc?$AAo?$AA?9?$AA?$DO?$AAc?$AAo?$AA_?$AAf?$AAr?$AAe?$AAe?$AAv?$AAa?$AAr?$AAs?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_0BI@IIFFKHKI@super?$CI?$CJ?3?5arg?$FL0?$FN?5deleted?$AA@ ; `string'
PUBLIC	??_C@_1CG@KMPIKIJL@?$AAP?$AAy?$AAC?$AAe?$AAl?$AAl?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAc?$AAe?$AAl?$AAl?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_0BG@NHMPAMBE@super?$CI?$CJ?3?5no?5arguments?$AA@ ; `string'
PUBLIC	??_C@_0BI@CDPMACLC@super?$CI?$CJ?3?5no?5code?5object?$AA@ ; `string'
PUBLIC	??_C@_0L@OCHLMMEE@?$HMO?$CBO?3super?$AA@	; `string'
EXTRN	PyCell_Type:BYTE
EXTRN	_PyArg_NoKeywords:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$super_init DD imagerel super_init
	DD	imagerel super_init+1215
	DD	imagerel $unwind$super_init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$super_init DD 021601H
	DD	0130116H
xdata	ENDS
;	COMDAT ??_C@_0CC@MOBJHGCC@super?$CI?$CJ?3?5__class__?5cell?5not?5foun@
CONST	SEGMENT
??_C@_0CC@MOBJHGCC@super?$CI?$CJ?3?5__class__?5cell?5not?5foun@ DB 'super'
	DB	'(): __class__ cell not found', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@NNBMGMFD@super?$CI?$CJ?3?5__class__?5is?5not?5a?5type@
CONST	SEGMENT
??_C@_0CG@NNBMGMFD@super?$CI?$CJ?3?5__class__?5is?5not?5a?5type@ DB 'supe'
	DB	'r(): __class__ is not a type (%s)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@HJPNCDNH@super?$CI?$CJ?3?5empty?5__class__?5cell?$AA@
CONST	SEGMENT
??_C@_0BO@HJPNCDNH@super?$CI?$CJ?3?5empty?5__class__?5cell?$AA@ DB 'super'
	DB	'(): empty __class__ cell', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@OPAPJHIO@super?$CI?$CJ?3?5bad?5__class__?5cell?$AA@
CONST	SEGMENT
??_C@_0BM@OPAPJHIO@super?$CI?$CJ?3?5bad?5__class__?5cell?$AA@ DB 'super()'
	DB	': bad __class__ cell', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1DO@BCANCKAC@?$AAP?$AAy?$AAT?$AAu?$AAp?$AAl?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAc?$AAo?$AA?9?$AA?$DO?$AAc?$AAo?$AA_?$AAf?$AAr?$AAe?$AAe?$AAv?$AAa?$AAr?$AAs?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DO@BCANCKAC@?$AAP?$AAy?$AAT?$AAu?$AAp?$AAl?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAc?$AAo?$AA?9?$AA?$DO?$AAc?$AAo?$AA_?$AAf?$AAr?$AAe?$AAe?$AAv?$AAa?$AAr?$AAs?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'T', 00H, 'u', 00H, 'p', 00H, 'l', 00H, 'e', 00H
	DB	'_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, '('
	DB	00H, 'c', 00H, 'o', 00H, '-', 00H, '>', 00H, 'c', 00H, 'o', 00H
	DB	'_', 00H, 'f', 00H, 'r', 00H, 'e', 00H, 'e', 00H, 'v', 00H, 'a'
	DB	00H, 'r', 00H, 's', 00H, ')', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@IIFFKHKI@super?$CI?$CJ?3?5arg?$FL0?$FN?5deleted?$AA@
CONST	SEGMENT
??_C@_0BI@IIFFKHKI@super?$CI?$CJ?3?5arg?$FL0?$FN?5deleted?$AA@ DB 'super('
	DB	'): arg[0] deleted', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@KMPIKIJL@?$AAP?$AAy?$AAC?$AAe?$AAl?$AAl?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAc?$AAe?$AAl?$AAl?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CG@KMPIKIJL@?$AAP?$AAy?$AAC?$AAe?$AAl?$AAl?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAc?$AAe?$AAl?$AAl?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'C', 00H, 'e', 00H, 'l', 00H, 'l', 00H, '_', 00H
	DB	'C', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, '(', 00H, 'c'
	DB	00H, 'e', 00H, 'l', 00H, 'l', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@NHMPAMBE@super?$CI?$CJ?3?5no?5arguments?$AA@
CONST	SEGMENT
??_C@_0BG@NHMPAMBE@super?$CI?$CJ?3?5no?5arguments?$AA@ DB 'super(): no ar'
	DB	'guments', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@CDPMACLC@super?$CI?$CJ?3?5no?5code?5object?$AA@
CONST	SEGMENT
??_C@_0BI@CDPMACLC@super?$CI?$CJ?3?5no?5code?5object?$AA@ DB 'super(): no'
	DB	' code object', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@OCHLMMEE@?$HMO?$CBO?3super?$AA@
CONST	SEGMENT
??_C@_0L@OCHLMMEE@?$HMO?$CBO?3super?$AA@ DB '|O!O:super', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT super_init
_TEXT	SEGMENT
type$ = 48
su$ = 56
obj_type$ = 64
obj$ = 72
n$26862 = 80
i$26861 = 88
f$26859 = 96
co$26860 = 104
cell$26875 = 112
name$26893 = 120
index$26898 = 128
cell$26900 = 136
self$ = 160
args$ = 168
kwds$ = 176
super_init PROC						; COMDAT

; 6499 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 6500 :     superobject *su = (superobject *)self;

  00016	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0001e	48 89 44 24 38	 mov	 QWORD PTR su$[rsp], rax

; 6501 :     PyTypeObject *type = NULL;

  00023	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR type$[rsp], 0

; 6502 :     PyObject *obj = NULL;

  0002c	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR obj$[rsp], 0

; 6503 :     PyTypeObject *obj_type = NULL;

  00035	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR obj_type$[rsp], 0

; 6504 : 
; 6505 :     if (!_PyArg_NoKeywords("super", kwds))

  0003e	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR kwds$[rsp]
  00046	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05MKJDPMKP@super?$AA@
  0004d	e8 00 00 00 00	 call	 _PyArg_NoKeywords
  00052	85 c0		 test	 eax, eax
  00054	75 0a		 jne	 SHORT $LN25@super_init

; 6506 :         return -1;

  00056	b8 ff ff ff ff	 mov	 eax, -1
  0005b	e9 57 04 00 00	 jmp	 $LN26@super_init
$LN25@super_init:

; 6507 :     if (!PyArg_ParseTuple(args, "|O!O:super", &PyType_Type, &type, &obj))

  00060	48 8d 44 24 48	 lea	 rax, QWORD PTR obj$[rsp]
  00065	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0006a	4c 8d 4c 24 30	 lea	 r9, QWORD PTR type$[rsp]
  0006f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:PyType_Type
  00076	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@OCHLMMEE@?$HMO?$CBO?3super?$AA@
  0007d	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  00085	e8 00 00 00 00	 call	 PyArg_ParseTuple
  0008a	85 c0		 test	 eax, eax
  0008c	75 0a		 jne	 SHORT $LN24@super_init

; 6508 :         return -1;

  0008e	b8 ff ff ff ff	 mov	 eax, -1
  00093	e9 1f 04 00 00	 jmp	 $LN26@super_init
$LN24@super_init:

; 6509 : 
; 6510 :     if (type == NULL) {

  00098	48 83 7c 24 30
	00		 cmp	 QWORD PTR type$[rsp], 0
  0009e	0f 85 91 03 00
	00		 jne	 $LN23@super_init

; 6511 :         /* Call super(), without args -- fill in from __class__
; 6512 :            and first local variable on the stack. */
; 6513 :         PyFrameObject *f = PyThreadState_GET()->frame;

  000a4	e8 00 00 00 00	 call	 PyThreadState_Get
  000a9	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000ad	48 89 44 24 60	 mov	 QWORD PTR f$26859[rsp], rax

; 6514 :         PyCodeObject *co = f->f_code;

  000b2	48 8b 44 24 60	 mov	 rax, QWORD PTR f$26859[rsp]
  000b7	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  000bb	48 89 44 24 68	 mov	 QWORD PTR co$26860[rsp], rax

; 6515 :         Py_ssize_t i, n;
; 6516 :         if (co == NULL) {

  000c0	48 83 7c 24 68
	00		 cmp	 QWORD PTR co$26860[rsp], 0
  000c6	75 1d		 jne	 SHORT $LN22@super_init

; 6517 :             PyErr_SetString(PyExc_RuntimeError,
; 6518 :                             "super(): no code object");

  000c8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@CDPMACLC@super?$CI?$CJ?3?5no?5code?5object?$AA@
  000cf	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeError
  000d6	e8 00 00 00 00	 call	 PyErr_SetString

; 6519 :             return -1;

  000db	b8 ff ff ff ff	 mov	 eax, -1
  000e0	e9 d2 03 00 00	 jmp	 $LN26@super_init
$LN22@super_init:

; 6520 :         }
; 6521 :         if (co->co_argcount == 0) {

  000e5	48 8b 44 24 68	 mov	 rax, QWORD PTR co$26860[rsp]
  000ea	83 78 60 00	 cmp	 DWORD PTR [rax+96], 0
  000ee	75 1d		 jne	 SHORT $LN21@super_init

; 6522 :             PyErr_SetString(PyExc_RuntimeError,
; 6523 :                             "super(): no arguments");

  000f0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@NHMPAMBE@super?$CI?$CJ?3?5no?5arguments?$AA@
  000f7	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeError
  000fe	e8 00 00 00 00	 call	 PyErr_SetString

; 6524 :             return -1;

  00103	b8 ff ff ff ff	 mov	 eax, -1
  00108	e9 aa 03 00 00	 jmp	 $LN26@super_init
$LN21@super_init:

; 6525 :         }
; 6526 :         obj = f->f_localsplus[0];

  0010d	48 8b 44 24 60	 mov	 rax, QWORD PTR f$26859[rsp]
  00112	48 8b 80 d0 01
	00 00		 mov	 rax, QWORD PTR [rax+464]
  00119	48 89 44 24 48	 mov	 QWORD PTR obj$[rsp], rax

; 6527 :         if (obj == NULL && co->co_cell2arg) {

  0011e	48 83 7c 24 48
	00		 cmp	 QWORD PTR obj$[rsp], 0
  00124	0f 85 c8 00 00
	00		 jne	 $LN20@super_init
  0012a	48 8b 44 24 68	 mov	 rax, QWORD PTR co$26860[rsp]
  0012f	48 83 b8 a8 00
	00 00 00	 cmp	 QWORD PTR [rax+168], 0
  00137	0f 84 b5 00 00
	00		 je	 $LN20@super_init

; 6528 :             /* The first argument might be a cell. */
; 6529 :             n = PyTuple_GET_SIZE(co->co_cellvars);

  0013d	48 8b 44 24 68	 mov	 rax, QWORD PTR co$26860[rsp]
  00142	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  00149	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0014d	48 89 44 24 50	 mov	 QWORD PTR n$26862[rsp], rax

; 6530 :             for (i = 0; i < n; i++) {

  00152	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR i$26861[rsp], 0
  0015b	eb 0d		 jmp	 SHORT $LN19@super_init
$LN18@super_init:
  0015d	48 8b 44 24 58	 mov	 rax, QWORD PTR i$26861[rsp]
  00162	48 ff c0	 inc	 rax
  00165	48 89 44 24 58	 mov	 QWORD PTR i$26861[rsp], rax
$LN19@super_init:
  0016a	48 8b 44 24 50	 mov	 rax, QWORD PTR n$26862[rsp]
  0016f	48 39 44 24 58	 cmp	 QWORD PTR i$26861[rsp], rax
  00174	7d 7c		 jge	 SHORT $LN17@super_init

; 6531 :                 if (co->co_cell2arg[i] == 0) {

  00176	48 8b 44 24 68	 mov	 rax, QWORD PTR co$26860[rsp]
  0017b	48 8b 80 a8 00
	00 00		 mov	 rax, QWORD PTR [rax+168]
  00182	48 8b 4c 24 58	 mov	 rcx, QWORD PTR i$26861[rsp]
  00187	0f b6 04 08	 movzx	 eax, BYTE PTR [rax+rcx]
  0018b	85 c0		 test	 eax, eax
  0018d	75 5e		 jne	 SHORT $LN16@super_init

; 6532 :                     PyObject *cell = f->f_localsplus[co->co_nlocals + i];

  0018f	48 8b 44 24 68	 mov	 rax, QWORD PTR co$26860[rsp]
  00194	48 63 40 68	 movsxd	 rax, DWORD PTR [rax+104]
  00198	48 03 44 24 58	 add	 rax, QWORD PTR i$26861[rsp]
  0019d	48 8b 4c 24 60	 mov	 rcx, QWORD PTR f$26859[rsp]
  001a2	48 8b 84 c1 d0
	01 00 00	 mov	 rax, QWORD PTR [rcx+rax*8+464]
  001aa	48 89 44 24 70	 mov	 QWORD PTR cell$26875[rsp], rax

; 6533 :                     assert(PyCell_Check(cell));

  001af	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyCell_Type
  001b6	48 8b 4c 24 70	 mov	 rcx, QWORD PTR cell$26875[rsp]
  001bb	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  001bf	74 1c		 je	 SHORT $LN28@super_init
  001c1	41 b8 85 19 00
	00		 mov	 r8d, 6533		; 00001985H
  001c7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@GJLLIOPA@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAt?$AAy?$AAp?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  001ce	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@KMPIKIJL@?$AAP?$AAy?$AAC?$AAe?$AAl?$AAl?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAc?$AAe?$AAl?$AAl?$AA?$CJ?$AA?$AA@
  001d5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001db	33 c0		 xor	 eax, eax
$LN28@super_init:

; 6534 :                     obj = PyCell_GET(cell);

  001dd	48 8b 44 24 70	 mov	 rax, QWORD PTR cell$26875[rsp]
  001e2	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  001e6	48 89 44 24 48	 mov	 QWORD PTR obj$[rsp], rax

; 6535 :                     break;

  001eb	eb 05		 jmp	 SHORT $LN17@super_init
$LN16@super_init:

; 6536 :                 }
; 6537 :             }

  001ed	e9 6b ff ff ff	 jmp	 $LN18@super_init
$LN17@super_init:
$LN20@super_init:

; 6538 :         }
; 6539 :         if (obj == NULL) {

  001f2	48 83 7c 24 48
	00		 cmp	 QWORD PTR obj$[rsp], 0
  001f8	75 1d		 jne	 SHORT $LN15@super_init

; 6540 :             PyErr_SetString(PyExc_RuntimeError,
; 6541 :                             "super(): arg[0] deleted");

  001fa	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@IIFFKHKI@super?$CI?$CJ?3?5arg?$FL0?$FN?5deleted?$AA@
  00201	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeError
  00208	e8 00 00 00 00	 call	 PyErr_SetString

; 6542 :             return -1;

  0020d	b8 ff ff ff ff	 mov	 eax, -1
  00212	e9 a0 02 00 00	 jmp	 $LN26@super_init
$LN15@super_init:

; 6543 :         }
; 6544 :         if (co->co_freevars == NULL)

  00217	48 8b 44 24 68	 mov	 rax, QWORD PTR co$26860[rsp]
  0021c	48 83 b8 98 00
	00 00 00	 cmp	 QWORD PTR [rax+152], 0
  00224	75 0b		 jne	 SHORT $LN14@super_init

; 6545 :             n = 0;

  00226	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR n$26862[rsp], 0

; 6546 :         else {

  0022f	eb 50		 jmp	 SHORT $LN13@super_init
$LN14@super_init:

; 6547 :             assert(PyTuple_Check(co->co_freevars));

  00231	48 8b 44 24 68	 mov	 rax, QWORD PTR co$26860[rsp]
  00236	48 8b 80 98 00
	00 00		 mov	 rax, QWORD PTR [rax+152]
  0023d	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00241	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00247	25 00 00 00 04	 and	 eax, 67108864		; 04000000H
  0024c	85 c0		 test	 eax, eax
  0024e	75 1c		 jne	 SHORT $LN29@super_init
  00250	41 b8 93 19 00
	00		 mov	 r8d, 6547		; 00001993H
  00256	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@GJLLIOPA@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAt?$AAy?$AAp?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  0025d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@BCANCKAC@?$AAP?$AAy?$AAT?$AAu?$AAp?$AAl?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAc?$AAo?$AA?9?$AA?$DO?$AAc?$AAo?$AA_?$AAf?$AAr?$AAe?$AAe?$AAv?$AAa?$AAr?$AAs?$AA?$CJ?$AA?$AA@
  00264	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0026a	33 c0		 xor	 eax, eax
$LN29@super_init:

; 6548 :             n = PyTuple_GET_SIZE(co->co_freevars);

  0026c	48 8b 44 24 68	 mov	 rax, QWORD PTR co$26860[rsp]
  00271	48 8b 80 98 00
	00 00		 mov	 rax, QWORD PTR [rax+152]
  00278	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0027c	48 89 44 24 50	 mov	 QWORD PTR n$26862[rsp], rax
$LN13@super_init:

; 6549 :         }
; 6550 :         for (i = 0; i < n; i++) {

  00281	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR i$26861[rsp], 0
  0028a	eb 0d		 jmp	 SHORT $LN12@super_init
$LN11@super_init:
  0028c	48 8b 44 24 58	 mov	 rax, QWORD PTR i$26861[rsp]
  00291	48 ff c0	 inc	 rax
  00294	48 89 44 24 58	 mov	 QWORD PTR i$26861[rsp], rax
$LN12@super_init:
  00299	48 8b 44 24 50	 mov	 rax, QWORD PTR n$26862[rsp]
  0029e	48 39 44 24 58	 cmp	 QWORD PTR i$26861[rsp], rax
  002a3	0f 8d 67 01 00
	00		 jge	 $LN10@super_init

; 6551 :             PyObject *name = PyTuple_GET_ITEM(co->co_freevars, i);

  002a9	48 8b 44 24 68	 mov	 rax, QWORD PTR co$26860[rsp]
  002ae	48 8b 80 98 00
	00 00		 mov	 rax, QWORD PTR [rax+152]
  002b5	48 8b 4c 24 58	 mov	 rcx, QWORD PTR i$26861[rsp]
  002ba	48 8b 44 c8 70	 mov	 rax, QWORD PTR [rax+rcx*8+112]
  002bf	48 89 44 24 78	 mov	 QWORD PTR name$26893[rsp], rax

; 6552 :             assert(PyUnicode_Check(name));

  002c4	48 8b 44 24 78	 mov	 rax, QWORD PTR name$26893[rsp]
  002c9	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  002cd	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  002d3	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  002d8	85 c0		 test	 eax, eax
  002da	75 1c		 jne	 SHORT $LN30@super_init
  002dc	41 b8 98 19 00
	00		 mov	 r8d, 6552		; 00001998H
  002e2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@GJLLIOPA@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAt?$AAy?$AAp?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  002e9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@NNIOODFF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAn?$AAa?$AAm?$AAe?$AA?$CJ?$AA?$AA@
  002f0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  002f6	33 c0		 xor	 eax, eax
$LN30@super_init:

; 6553 :             if (!PyUnicode_CompareWithASCIIString(name,
; 6554 :                                                   "__class__")) {

  002f8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09LFGACEKG@__class__?$AA@
  002ff	48 8b 4c 24 78	 mov	 rcx, QWORD PTR name$26893[rsp]
  00304	e8 00 00 00 00	 call	 PyUnicode_CompareWithASCIIString
  00309	85 c0		 test	 eax, eax
  0030b	0f 85 fa 00 00
	00		 jne	 $LN9@super_init

; 6555 :                 Py_ssize_t index = co->co_nlocals +
; 6556 :                     PyTuple_GET_SIZE(co->co_cellvars) + i;

  00311	48 8b 44 24 68	 mov	 rax, QWORD PTR co$26860[rsp]
  00316	48 63 40 68	 movsxd	 rax, DWORD PTR [rax+104]
  0031a	48 8b 4c 24 68	 mov	 rcx, QWORD PTR co$26860[rsp]
  0031f	48 8b 89 a0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+160]
  00326	48 03 41 60	 add	 rax, QWORD PTR [rcx+96]
  0032a	48 03 44 24 58	 add	 rax, QWORD PTR i$26861[rsp]
  0032f	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR index$26898[rsp], rax

; 6557 :                 PyObject *cell = f->f_localsplus[index];

  00337	48 8b 44 24 60	 mov	 rax, QWORD PTR f$26859[rsp]
  0033c	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR index$26898[rsp]
  00344	48 8b 84 c8 d0
	01 00 00	 mov	 rax, QWORD PTR [rax+rcx*8+464]
  0034c	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR cell$26900[rsp], rax

; 6558 :                 if (cell == NULL || !PyCell_Check(cell)) {

  00354	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR cell$26900[rsp], 0
  0035d	74 15		 je	 SHORT $LN7@super_init
  0035f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyCell_Type
  00366	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR cell$26900[rsp]
  0036e	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00372	74 1d		 je	 SHORT $LN8@super_init
$LN7@super_init:

; 6559 :                     PyErr_SetString(PyExc_RuntimeError,
; 6560 :                       "super(): bad __class__ cell");

  00374	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@OPAPJHIO@super?$CI?$CJ?3?5bad?5__class__?5cell?$AA@
  0037b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeError
  00382	e8 00 00 00 00	 call	 PyErr_SetString

; 6561 :                     return -1;

  00387	b8 ff ff ff ff	 mov	 eax, -1
  0038c	e9 26 01 00 00	 jmp	 $LN26@super_init
$LN8@super_init:

; 6562 :                 }
; 6563 :                 type = (PyTypeObject *) PyCell_GET(cell);

  00391	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR cell$26900[rsp]
  00399	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0039d	48 89 44 24 30	 mov	 QWORD PTR type$[rsp], rax

; 6564 :                 if (type == NULL) {

  003a2	48 83 7c 24 30
	00		 cmp	 QWORD PTR type$[rsp], 0
  003a8	75 1d		 jne	 SHORT $LN6@super_init

; 6565 :                     PyErr_SetString(PyExc_RuntimeError,
; 6566 :                       "super(): empty __class__ cell");

  003aa	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BO@HJPNCDNH@super?$CI?$CJ?3?5empty?5__class__?5cell?$AA@
  003b1	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeError
  003b8	e8 00 00 00 00	 call	 PyErr_SetString

; 6567 :                     return -1;

  003bd	b8 ff ff ff ff	 mov	 eax, -1
  003c2	e9 f0 00 00 00	 jmp	 $LN26@super_init
$LN6@super_init:

; 6568 :                 }
; 6569 :                 if (!PyType_Check(type)) {

  003c7	48 8b 44 24 30	 mov	 rax, QWORD PTR type$[rsp]
  003cc	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  003d0	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  003d6	25 00 00 00 80	 and	 eax, -2147483648	; ffffffff80000000H
  003db	85 c0		 test	 eax, eax
  003dd	75 2a		 jne	 SHORT $LN5@super_init

; 6570 :                     PyErr_Format(PyExc_RuntimeError,
; 6571 :                       "super(): __class__ is not a type (%s)",
; 6572 :                       Py_TYPE(type)->tp_name);

  003df	48 8b 44 24 30	 mov	 rax, QWORD PTR type$[rsp]
  003e4	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  003e8	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  003ec	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@NNBMGMFD@super?$CI?$CJ?3?5__class__?5is?5not?5a?5type@
  003f3	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeError
  003fa	e8 00 00 00 00	 call	 PyErr_Format

; 6573 :                     return -1;

  003ff	b8 ff ff ff ff	 mov	 eax, -1
  00404	e9 ae 00 00 00	 jmp	 $LN26@super_init
$LN5@super_init:

; 6574 :                 }
; 6575 :                 break;

  00409	eb 05		 jmp	 SHORT $LN10@super_init
$LN9@super_init:

; 6576 :             }
; 6577 :         }

  0040b	e9 7c fe ff ff	 jmp	 $LN11@super_init
$LN10@super_init:

; 6578 :         if (type == NULL) {

  00410	48 83 7c 24 30
	00		 cmp	 QWORD PTR type$[rsp], 0
  00416	75 1d		 jne	 SHORT $LN4@super_init

; 6579 :             PyErr_SetString(PyExc_RuntimeError,
; 6580 :                             "super(): __class__ cell not found");

  00418	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CC@MOBJHGCC@super?$CI?$CJ?3?5__class__?5cell?5not?5foun@
  0041f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeError
  00426	e8 00 00 00 00	 call	 PyErr_SetString

; 6581 :             return -1;

  0042b	b8 ff ff ff ff	 mov	 eax, -1
  00430	e9 82 00 00 00	 jmp	 $LN26@super_init
$LN4@super_init:
$LN23@super_init:

; 6582 :         }
; 6583 :     }
; 6584 : 
; 6585 :     if (obj == Py_None)

  00435	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0043c	48 39 44 24 48	 cmp	 QWORD PTR obj$[rsp], rax
  00441	75 09		 jne	 SHORT $LN3@super_init

; 6586 :         obj = NULL;

  00443	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR obj$[rsp], 0
$LN3@super_init:

; 6587 :     if (obj != NULL) {

  0044c	48 83 7c 24 48
	00		 cmp	 QWORD PTR obj$[rsp], 0
  00452	74 2d		 je	 SHORT $LN2@super_init

; 6588 :         obj_type = supercheck(type, obj);

  00454	48 8b 54 24 48	 mov	 rdx, QWORD PTR obj$[rsp]
  00459	48 8b 4c 24 30	 mov	 rcx, QWORD PTR type$[rsp]
  0045e	e8 00 00 00 00	 call	 supercheck
  00463	48 89 44 24 40	 mov	 QWORD PTR obj_type$[rsp], rax

; 6589 :         if (obj_type == NULL)

  00468	48 83 7c 24 40
	00		 cmp	 QWORD PTR obj_type$[rsp], 0
  0046e	75 07		 jne	 SHORT $LN1@super_init

; 6590 :             return -1;

  00470	b8 ff ff ff ff	 mov	 eax, -1
  00475	eb 40		 jmp	 SHORT $LN26@super_init
$LN1@super_init:

; 6591 :         Py_INCREF(obj);

  00477	48 8b 4c 24 48	 mov	 rcx, QWORD PTR obj$[rsp]
  0047c	e8 00 00 00 00	 call	 _Py_IncRef
$LN2@super_init:

; 6592 :     }
; 6593 :     Py_INCREF(type);

  00481	48 8b 4c 24 30	 mov	 rcx, QWORD PTR type$[rsp]
  00486	e8 00 00 00 00	 call	 _Py_IncRef

; 6594 :     su->type = type;

  0048b	48 8b 44 24 38	 mov	 rax, QWORD PTR su$[rsp]
  00490	48 8b 4c 24 30	 mov	 rcx, QWORD PTR type$[rsp]
  00495	48 89 48 60	 mov	 QWORD PTR [rax+96], rcx

; 6595 :     su->obj = obj;

  00499	48 8b 44 24 38	 mov	 rax, QWORD PTR su$[rsp]
  0049e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR obj$[rsp]
  004a3	48 89 48 68	 mov	 QWORD PTR [rax+104], rcx

; 6596 :     su->obj_type = obj_type;

  004a7	48 8b 44 24 38	 mov	 rax, QWORD PTR su$[rsp]
  004ac	48 8b 4c 24 40	 mov	 rcx, QWORD PTR obj_type$[rsp]
  004b1	48 89 48 70	 mov	 QWORD PTR [rax+112], rcx

; 6597 :     return 0;

  004b5	33 c0		 xor	 eax, eax
$LN26@super_init:

; 6598 : }

  004b7	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  004be	c3		 ret	 0
super_init ENDP
_TEXT	ENDS
PUBLIC	??_C@_0P@NIMMLEPG@super_traverse?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$super_traverse DD imagerel super_traverse
	DD	imagerel super_traverse+309
	DD	imagerel $unwind$super_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$super_traverse DD 011301H
	DD	08213H
xdata	ENDS
;	COMDAT ??_C@_0P@NIMMLEPG@super_traverse?$AA@
CONST	SEGMENT
??_C@_0P@NIMMLEPG@super_traverse?$AA@ DB 'super_traverse', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT super_traverse
_TEXT	SEGMENT
su$ = 32
vret$26943 = 40
vret$26951 = 44
vret$26959 = 48
self$ = 80
visit$ = 88
arg$ = 96
super_traverse PROC					; COMDAT

; 6617 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 6618 :     superobject *su = (superobject *)self;

  00013	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00018	48 89 44 24 20	 mov	 QWORD PTR su$[rsp], rax
$LN18@super_trav:

; 6619 : 
; 6620 :     Py_VISIT(su->obj);

  0001d	e8 00 00 00 00	 call	 _Py_PXCTX
  00022	85 c0		 test	 eax, eax
  00024	74 1c		 je	 SHORT $LN15@super_trav
  00026	45 33 c9	 xor	 r9d, r9d
  00029	41 b8 dc 19 00
	00		 mov	 r8d, 6620		; 000019dcH
  0002f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@PKBBAMFA@?4?4?2Objects?2typeobject?4c?$AA@
  00036	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@NIMMLEPG@super_traverse?$AA@
  0003d	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN15@super_trav:
  00042	48 8b 44 24 20	 mov	 rax, QWORD PTR su$[rsp]
  00047	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  0004c	74 26		 je	 SHORT $LN14@super_trav
  0004e	48 8b 54 24 60	 mov	 rdx, QWORD PTR arg$[rsp]
  00053	48 8b 44 24 20	 mov	 rax, QWORD PTR su$[rsp]
  00058	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  0005c	ff 54 24 58	 call	 QWORD PTR visit$[rsp]
  00060	89 44 24 28	 mov	 DWORD PTR vret$26943[rsp], eax
  00064	83 7c 24 28 00	 cmp	 DWORD PTR vret$26943[rsp], 0
  00069	74 09		 je	 SHORT $LN13@super_trav
  0006b	8b 44 24 28	 mov	 eax, DWORD PTR vret$26943[rsp]
  0006f	e9 bc 00 00 00	 jmp	 $LN19@super_trav
$LN13@super_trav:
$LN14@super_trav:
  00074	33 c0		 xor	 eax, eax
  00076	85 c0		 test	 eax, eax
  00078	75 a3		 jne	 SHORT $LN18@super_trav
$LN12@super_trav:

; 6621 :     Py_VISIT(su->type);

  0007a	e8 00 00 00 00	 call	 _Py_PXCTX
  0007f	85 c0		 test	 eax, eax
  00081	74 1c		 je	 SHORT $LN9@super_trav
  00083	45 33 c9	 xor	 r9d, r9d
  00086	41 b8 dd 19 00
	00		 mov	 r8d, 6621		; 000019ddH
  0008c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@PKBBAMFA@?4?4?2Objects?2typeobject?4c?$AA@
  00093	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@NIMMLEPG@super_traverse?$AA@
  0009a	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN9@super_trav:
  0009f	48 8b 44 24 20	 mov	 rax, QWORD PTR su$[rsp]
  000a4	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  000a9	74 23		 je	 SHORT $LN8@super_trav
  000ab	48 8b 54 24 60	 mov	 rdx, QWORD PTR arg$[rsp]
  000b0	48 8b 44 24 20	 mov	 rax, QWORD PTR su$[rsp]
  000b5	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  000b9	ff 54 24 58	 call	 QWORD PTR visit$[rsp]
  000bd	89 44 24 2c	 mov	 DWORD PTR vret$26951[rsp], eax
  000c1	83 7c 24 2c 00	 cmp	 DWORD PTR vret$26951[rsp], 0
  000c6	74 06		 je	 SHORT $LN7@super_trav
  000c8	8b 44 24 2c	 mov	 eax, DWORD PTR vret$26951[rsp]
  000cc	eb 62		 jmp	 SHORT $LN19@super_trav
$LN7@super_trav:
$LN8@super_trav:
  000ce	33 c0		 xor	 eax, eax
  000d0	85 c0		 test	 eax, eax
  000d2	75 a6		 jne	 SHORT $LN12@super_trav
$LN6@super_trav:

; 6622 :     Py_VISIT(su->obj_type);

  000d4	e8 00 00 00 00	 call	 _Py_PXCTX
  000d9	85 c0		 test	 eax, eax
  000db	74 1c		 je	 SHORT $LN3@super_trav
  000dd	45 33 c9	 xor	 r9d, r9d
  000e0	41 b8 de 19 00
	00		 mov	 r8d, 6622		; 000019deH
  000e6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@PKBBAMFA@?4?4?2Objects?2typeobject?4c?$AA@
  000ed	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@NIMMLEPG@super_traverse?$AA@
  000f4	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@super_trav:
  000f9	48 8b 44 24 20	 mov	 rax, QWORD PTR su$[rsp]
  000fe	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  00103	74 23		 je	 SHORT $LN2@super_trav
  00105	48 8b 54 24 60	 mov	 rdx, QWORD PTR arg$[rsp]
  0010a	48 8b 44 24 20	 mov	 rax, QWORD PTR su$[rsp]
  0010f	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  00113	ff 54 24 58	 call	 QWORD PTR visit$[rsp]
  00117	89 44 24 30	 mov	 DWORD PTR vret$26959[rsp], eax
  0011b	83 7c 24 30 00	 cmp	 DWORD PTR vret$26959[rsp], 0
  00120	74 06		 je	 SHORT $LN1@super_trav
  00122	8b 44 24 30	 mov	 eax, DWORD PTR vret$26959[rsp]
  00126	eb 08		 jmp	 SHORT $LN19@super_trav
$LN1@super_trav:
$LN2@super_trav:
  00128	33 c0		 xor	 eax, eax
  0012a	85 c0		 test	 eax, eax
  0012c	75 a6		 jne	 SHORT $LN6@super_trav

; 6623 : 
; 6624 :     return 0;

  0012e	33 c0		 xor	 eax, eax
$LN19@super_trav:

; 6625 : }

  00130	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00134	c3		 ret	 0
super_traverse ENDP
_TEXT	ENDS
END
