; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_04KKIAMJPE@_imp?$AA@			; `string'
PUBLIC	??_C@_0BB@MOMFFMBI@_fix_co_filename?$AA@	; `string'
PUBLIC	??_C@_0N@KBNOKGIP@load_dynamic?$AA@		; `string'
PUBLIC	??_C@_09HAKBJMNK@is_frozen?$AA@			; `string'
PUBLIC	??_C@_0L@IPGELEL@is_builtin?$AA@		; `string'
PUBLIC	??_C@_0M@DLMGLEKN@init_frozen?$AA@		; `string'
PUBLIC	??_C@_0N@MGNMMIPM@init_builtin?$AA@		; `string'
PUBLIC	??_C@_0BC@OFHOFPH@is_frozen_package?$AA@	; `string'
PUBLIC	??_C@_0BC@OJODCCAI@get_frozen_object?$AA@	; `string'
PUBLIC	??_C@_0N@EJFMMAJJ@release_lock?$AA@		; `string'
PUBLIC	??_C@_0N@JKBCAFMP@acquire_lock?$AA@		; `string'
PUBLIC	??_C@_09JLJPJPDN@lock_held?$AA@			; `string'
PUBLIC	??_C@_0BD@DBMAGBIO@extension_suffixes?$AA@	; `string'
PUBLIC	??_C@_06DGFOANMH@reload?$AA@			; `string'
PUBLIC	??_C@_01LFCBOECM@?4?$AA@			; `string'
PUBLIC	??_C@_0BE@DMBEMBOC@_lock_unlock_module?$AA@	; `string'
PUBLIC	??_C@_0BB@MJEKOHPP@_handle_fromlist?$AA@	; `string'
PUBLIC	??_C@_0P@BNGOMPOA@_find_and_load?$AA@		; `string'
PUBLIC	??_C@_08BHKDPDAA@__name__?$AA@			; `string'
PUBLIC	??_C@_08LPNIDJLN@__path__?$AA@			; `string'
PUBLIC	??_C@_0M@PFIGCCLC@__package__?$AA@		; `string'
PUBLIC	??_C@_0BB@PMIKHNPM@__initializing__?$AA@	; `string'
PUBLIC	??_C@_0L@KEEJPJHH@__import__?$AA@		; `string'
PUBLIC	??_C@_0BA@EIAFEHAN@_get_sourcefile?$AA@		; `string'
PUBLIC	??_C@_0L@OJDCNPPP@__stderr__?$AA@		; `string'
PUBLIC	??_C@_06FJGNEBG@stderr?$AA@			; `string'
PUBLIC	??_C@_0L@NPOCHPFF@__stdout__?$AA@		; `string'
PUBLIC	??_C@_06DJDOIFHB@stdout?$AA@			; `string'
PUBLIC	??_C@_09EFAEFGPG@__stdin__?$AA@			; `string'
PUBLIC	??_C@_05MHOFLBOO@stdin?$AA@			; `string'
PUBLIC	??_C@_0L@HMECADCK@float_info?$AA@		; `string'
PUBLIC	??_C@_05GECEPKB@flags?$AA@			; `string'
PUBLIC	??_C@_09FCAPOPDB@meta_path?$AA@			; `string'
PUBLIC	??_C@_0BE@FEEGIILL@path_importer_cache?$AA@	; `string'
PUBLIC	??_C@_0L@PDLDEHCN@path_hooks?$AA@		; `string'
PUBLIC	??_C@_0P@IGCACIDI@last_traceback?$AA@		; `string'
PUBLIC	??_C@_0L@IGFDBBEF@last_value?$AA@		; `string'
PUBLIC	??_C@_09NIIGAFC@last_type?$AA@			; `string'
PUBLIC	??_C@_03OEDACAH@ps2?$AA@			; `string'
PUBLIC	??_C@_03CFGOFBME@ps1?$AA@			; `string'
PUBLIC	??_C@_04GIEEDNNN@argv?$AA@			; `string'
PUBLIC	??_C@_04LNEJFJGI@path?$AA@			; `string'
PUBLIC	??_C@_0M@NDJAEMK@zipimporter?$AA@		; `string'
PUBLIC	PyImport_Inittab
EXTRN	_PyImport_Inittab:BYTE
_BSS	SEGMENT
extensions DQ	01H DUP (?)
initstr	DQ	01H DUP (?)
import_lock DQ	01H DUP (?)
import_lock_level DD 01H DUP (?)
	ALIGN	8

?silly_list@?1??PyImport_Import@@9@9 DQ 01H DUP (?)	; `PyImport_Import'::`2'::silly_list
?builtins_str@?1??PyImport_Import@@9@9 DQ 01H DUP (?)	; `PyImport_Import'::`2'::builtins_str
?import_str@?1??PyImport_Import@@9@9 DQ 01H DUP (?)	; `PyImport_Import'::`2'::import_str
?our_copy@?1??PyImport_ExtendInittab@@9@9 DQ 01H DUP (?) ; `PyImport_ExtendInittab'::`2'::our_copy
_BSS	ENDS
;	COMDAT ??_C@_04KKIAMJPE@_imp?$AA@
CONST	SEGMENT
??_C@_04KKIAMJPE@_imp?$AA@ DB '_imp', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@MOMFFMBI@_fix_co_filename?$AA@
CONST	SEGMENT
??_C@_0BB@MOMFFMBI@_fix_co_filename?$AA@ DB '_fix_co_filename', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@KBNOKGIP@load_dynamic?$AA@
CONST	SEGMENT
??_C@_0N@KBNOKGIP@load_dynamic?$AA@ DB 'load_dynamic', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09HAKBJMNK@is_frozen?$AA@
CONST	SEGMENT
??_C@_09HAKBJMNK@is_frozen?$AA@ DB 'is_frozen', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@IPGELEL@is_builtin?$AA@
CONST	SEGMENT
??_C@_0L@IPGELEL@is_builtin?$AA@ DB 'is_builtin', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@DLMGLEKN@init_frozen?$AA@
CONST	SEGMENT
??_C@_0M@DLMGLEKN@init_frozen?$AA@ DB 'init_frozen', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MGNMMIPM@init_builtin?$AA@
CONST	SEGMENT
??_C@_0N@MGNMMIPM@init_builtin?$AA@ DB 'init_builtin', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@OFHOFPH@is_frozen_package?$AA@
CONST	SEGMENT
??_C@_0BC@OFHOFPH@is_frozen_package?$AA@ DB 'is_frozen_package', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@OJODCCAI@get_frozen_object?$AA@
CONST	SEGMENT
??_C@_0BC@OJODCCAI@get_frozen_object?$AA@ DB 'get_frozen_object', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@EJFMMAJJ@release_lock?$AA@
CONST	SEGMENT
??_C@_0N@EJFMMAJJ@release_lock?$AA@ DB 'release_lock', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@JKBCAFMP@acquire_lock?$AA@
CONST	SEGMENT
??_C@_0N@JKBCAFMP@acquire_lock?$AA@ DB 'acquire_lock', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09JLJPJPDN@lock_held?$AA@
CONST	SEGMENT
??_C@_09JLJPJPDN@lock_held?$AA@ DB 'lock_held', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@DBMAGBIO@extension_suffixes?$AA@
CONST	SEGMENT
??_C@_0BD@DBMAGBIO@extension_suffixes?$AA@ DB 'extension_suffixes', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06DGFOANMH@reload?$AA@
CONST	SEGMENT
??_C@_06DGFOANMH@reload?$AA@ DB 'reload', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01LFCBOECM@?4?$AA@
CONST	SEGMENT
??_C@_01LFCBOECM@?4?$AA@ DB '.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@DMBEMBOC@_lock_unlock_module?$AA@
CONST	SEGMENT
??_C@_0BE@DMBEMBOC@_lock_unlock_module?$AA@ DB '_lock_unlock_module', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@MJEKOHPP@_handle_fromlist?$AA@
CONST	SEGMENT
??_C@_0BB@MJEKOHPP@_handle_fromlist?$AA@ DB '_handle_fromlist', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BNGOMPOA@_find_and_load?$AA@
CONST	SEGMENT
??_C@_0P@BNGOMPOA@_find_and_load?$AA@ DB '_find_and_load', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08BHKDPDAA@__name__?$AA@
CONST	SEGMENT
??_C@_08BHKDPDAA@__name__?$AA@ DB '__name__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08LPNIDJLN@__path__?$AA@
CONST	SEGMENT
??_C@_08LPNIDJLN@__path__?$AA@ DB '__path__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@PFIGCCLC@__package__?$AA@
CONST	SEGMENT
??_C@_0M@PFIGCCLC@__package__?$AA@ DB '__package__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@PMIKHNPM@__initializing__?$AA@
CONST	SEGMENT
??_C@_0BB@PMIKHNPM@__initializing__?$AA@ DB '__initializing__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@KEEJPJHH@__import__?$AA@
CONST	SEGMENT
??_C@_0L@KEEJPJHH@__import__?$AA@ DB '__import__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@EIAFEHAN@_get_sourcefile?$AA@
CONST	SEGMENT
??_C@_0BA@EIAFEHAN@_get_sourcefile?$AA@ DB '_get_sourcefile', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@OJDCNPPP@__stderr__?$AA@
CONST	SEGMENT
??_C@_0L@OJDCNPPP@__stderr__?$AA@ DB '__stderr__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06FJGNEBG@stderr?$AA@
CONST	SEGMENT
??_C@_06FJGNEBG@stderr?$AA@ DB 'stderr', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NPOCHPFF@__stdout__?$AA@
CONST	SEGMENT
??_C@_0L@NPOCHPFF@__stdout__?$AA@ DB '__stdout__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06DJDOIFHB@stdout?$AA@
CONST	SEGMENT
??_C@_06DJDOIFHB@stdout?$AA@ DB 'stdout', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09EFAEFGPG@__stdin__?$AA@
CONST	SEGMENT
??_C@_09EFAEFGPG@__stdin__?$AA@ DB '__stdin__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05MHOFLBOO@stdin?$AA@
CONST	SEGMENT
??_C@_05MHOFLBOO@stdin?$AA@ DB 'stdin', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HMECADCK@float_info?$AA@
CONST	SEGMENT
??_C@_0L@HMECADCK@float_info?$AA@ DB 'float_info', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05GECEPKB@flags?$AA@
CONST	SEGMENT
??_C@_05GECEPKB@flags?$AA@ DB 'flags', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09FCAPOPDB@meta_path?$AA@
CONST	SEGMENT
??_C@_09FCAPOPDB@meta_path?$AA@ DB 'meta_path', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@FEEGIILL@path_importer_cache?$AA@
CONST	SEGMENT
??_C@_0BE@FEEGIILL@path_importer_cache?$AA@ DB 'path_importer_cache', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@PDLDEHCN@path_hooks?$AA@
CONST	SEGMENT
??_C@_0L@PDLDEHCN@path_hooks?$AA@ DB 'path_hooks', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@IGCACIDI@last_traceback?$AA@
CONST	SEGMENT
??_C@_0P@IGCACIDI@last_traceback?$AA@ DB 'last_traceback', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@IGFDBBEF@last_value?$AA@
CONST	SEGMENT
??_C@_0L@IGFDBBEF@last_value?$AA@ DB 'last_value', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09NIIGAFC@last_type?$AA@
CONST	SEGMENT
??_C@_09NIIGAFC@last_type?$AA@ DB 'last_type', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03OEDACAH@ps2?$AA@
CONST	SEGMENT
??_C@_03OEDACAH@ps2?$AA@ DB 'ps2', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03CFGOFBME@ps1?$AA@
CONST	SEGMENT
??_C@_03CFGOFBME@ps1?$AA@ DB 'ps1', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04GIEEDNNN@argv?$AA@
CONST	SEGMENT
??_C@_04GIEEDNNN@argv?$AA@ DB 'argv', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04LNEJFJGI@path?$AA@
CONST	SEGMENT
??_C@_04LNEJFJGI@path?$AA@ DB 'path', 00H		; `string'
CONST	ENDS
_TLS	SEGMENT
?PyId_reload@?1??PyImport_ReloadModule@@9@9 DQ 0000000000000000H ; `PyImport_ReloadModule'::`2'::PyId_reload
	DQ	FLAT:??_C@_06DGFOANMH@reload?$AA@
	DQ	0000000000000000H
?single_dot@?1??PyImport_ImportModuleLevelObject@@9@9 DQ 0000000000000000H ; `PyImport_ImportModuleLevelObject'::`2'::single_dot
	DQ	FLAT:??_C@_01LFCBOECM@?4?$AA@
	DQ	0000000000000000H
?PyId__lock_unlock_module@?1??PyImport_ImportModuleLevelObject@@9@9 DQ 0000000000000000H ; `PyImport_ImportModuleLevelObject'::`2'::PyId__lock_unlock_module
	DQ	FLAT:??_C@_0BE@DMBEMBOC@_lock_unlock_module?$AA@
	DQ	0000000000000000H
?PyId__handle_fromlist@?1??PyImport_ImportModuleLevelObject@@9@9 DQ 0000000000000000H ; `PyImport_ImportModuleLevelObject'::`2'::PyId__handle_fromlist
	DQ	FLAT:??_C@_0BB@MJEKOHPP@_handle_fromlist?$AA@
	DQ	0000000000000000H
?PyId__find_and_load@?1??PyImport_ImportModuleLevelObject@@9@9 DQ 0000000000000000H ; `PyImport_ImportModuleLevelObject'::`2'::PyId__find_and_load
	DQ	FLAT:??_C@_0P@BNGOMPOA@_find_and_load?$AA@
	DQ	0000000000000000H
?PyId___name__@?1??PyImport_ImportModuleLevelObject@@9@9 DQ 0000000000000000H ; `PyImport_ImportModuleLevelObject'::`2'::PyId___name__
	DQ	FLAT:??_C@_08BHKDPDAA@__name__?$AA@
	DQ	0000000000000000H
?PyId___path__@?1??PyImport_ImportModuleLevelObject@@9@9 DQ 0000000000000000H ; `PyImport_ImportModuleLevelObject'::`2'::PyId___path__
	DQ	FLAT:??_C@_08LPNIDJLN@__path__?$AA@
	DQ	0000000000000000H
?PyId___package__@?1??PyImport_ImportModuleLevelObject@@9@9 DQ 0000000000000000H ; `PyImport_ImportModuleLevelObject'::`2'::PyId___package__
	DQ	FLAT:??_C@_0M@PFIGCCLC@__package__?$AA@
	DQ	0000000000000000H
?PyId___initializing__@?1??PyImport_ImportModuleLevelObject@@9@9 DQ 0000000000000000H ; `PyImport_ImportModuleLevelObject'::`2'::PyId___initializing__
	DQ	FLAT:??_C@_0BB@PMIKHNPM@__initializing__?$AA@
	DQ	0000000000000000H
?PyId___import__@?1??PyImport_ImportModuleLevelObject@@9@9 DQ 0000000000000000H ; `PyImport_ImportModuleLevelObject'::`2'::PyId___import__
	DQ	FLAT:??_C@_0L@KEEJPJHH@__import__?$AA@
	DQ	0000000000000000H
?PyId__get_sourcefile@?4??PyImport_ExecCodeModuleWithPathnames@@9@9 DQ 0000000000000000H ; `PyImport_ExecCodeModuleWithPathnames'::`5'::PyId__get_sourcefile
	DQ	FLAT:??_C@_0BA@EIAFEHAN@_get_sourcefile?$AA@
	DQ	0000000000000000H
?PyId_zipimporter@?3??_PyImportZip_Init@@9@9 DQ 0000000000000000H ; `_PyImportZip_Init'::`4'::PyId_zipimporter
	DQ	FLAT:??_C@_0M@NDJAEMK@zipimporter?$AA@
	DQ	0000000000000000H
_TLS	ENDS
;	COMDAT ??_C@_0M@NDJAEMK@zipimporter?$AA@
CONST	SEGMENT
??_C@_0M@NDJAEMK@zipimporter?$AA@ DB 'zipimporter', 00H	; `string'
CONST	ENDS
_DATA	SEGMENT
PyImport_Inittab DQ FLAT:_PyImport_Inittab
import_lock_thread DD 0ffffffffH
	ORG $+4
sys_deletes DQ	FLAT:??_C@_04LNEJFJGI@path?$AA@
	DQ	FLAT:??_C@_04GIEEDNNN@argv?$AA@
	DQ	FLAT:??_C@_03CFGOFBME@ps1?$AA@
	DQ	FLAT:??_C@_03OEDACAH@ps2?$AA@
	DQ	FLAT:??_C@_09NIIGAFC@last_type?$AA@
	DQ	FLAT:??_C@_0L@IGFDBBEF@last_value?$AA@
	DQ	FLAT:??_C@_0P@IGCACIDI@last_traceback?$AA@
	DQ	FLAT:??_C@_0L@PDLDEHCN@path_hooks?$AA@
	DQ	FLAT:??_C@_0BE@FEEGIILL@path_importer_cache?$AA@
	DQ	FLAT:??_C@_09FCAPOPDB@meta_path?$AA@
	DQ	FLAT:??_C@_05GECEPKB@flags?$AA@
	DQ	FLAT:??_C@_0L@HMECADCK@float_info?$AA@
	DQ	0000000000000000H
sys_files DQ	FLAT:??_C@_05MHOFLBOO@stdin?$AA@
	DQ	FLAT:??_C@_09EFAEFGPG@__stdin__?$AA@
	DQ	FLAT:??_C@_06DJDOIFHB@stdout?$AA@
	DQ	FLAT:??_C@_0L@NPOCHPFF@__stdout__?$AA@
	DQ	FLAT:??_C@_06FJGNEBG@stderr?$AA@
	DQ	FLAT:??_C@_0L@OJDCNPPP@__stderr__?$AA@
	DQ	0000000000000000H
doc_imp	DB	'(Extremely) low-level import machinery bits as used by i'
	DB	'mportlib and imp.', 00H
	ORG $+6
doc_extension_suffixes DB 'extension_suffixes() -> list of strings', 0aH, 'R'
	DB	'eturns the list of file suffixes used to identify extension m'
	DB	'odules.', 00H
	ORG $+2
doc_lock_held DB 'lock_held() -> boolean', 0aH, 'Return True if the impor'
	DB	't lock is currently held, else False.', 0aH, 'On platforms wi'
	DB	'thout threads, return False.', 00H
	ORG $+15
doc_acquire_lock DB 'acquire_lock() -> None', 0aH, 'Acquires the interpre'
	DB	'ter''s import lock for the current thread.', 0aH, 'This lock '
	DB	'should be used by import hooks to ensure thread-safety', 0aH, 'w'
	DB	'hen importing modules.', 0aH, 'On platforms without threads, '
	DB	'this function does nothing.', 00H
	ORG $+7
doc_release_lock DB 'release_lock() -> None', 0aH, 'Release the interpret'
	DB	'er''s import lock.', 0aH, 'On platforms without threads, this'
	DB	' function does nothing.', 00H
	ORG $+8
imp_methods DQ	FLAT:??_C@_0BD@DBMAGBIO@extension_suffixes?$AA@
	DQ	FLAT:imp_extension_suffixes
	DD	04H
	ORG $+4
	DQ	FLAT:doc_extension_suffixes
	DQ	FLAT:??_C@_09JLJPJPDN@lock_held?$AA@
	DQ	FLAT:imp_lock_held
	DD	04H
	ORG $+4
	DQ	FLAT:doc_lock_held
	DQ	FLAT:??_C@_0N@JKBCAFMP@acquire_lock?$AA@
	DQ	FLAT:imp_acquire_lock
	DD	04H
	ORG $+4
	DQ	FLAT:doc_acquire_lock
	DQ	FLAT:??_C@_0N@EJFMMAJJ@release_lock?$AA@
	DQ	FLAT:imp_release_lock
	DD	04H
	ORG $+4
	DQ	FLAT:doc_release_lock
	DQ	FLAT:??_C@_0BC@OJODCCAI@get_frozen_object?$AA@
	DQ	FLAT:imp_get_frozen_object
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0BC@OFHOFPH@is_frozen_package?$AA@
	DQ	FLAT:imp_is_frozen_package
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0N@MGNMMIPM@init_builtin?$AA@
	DQ	FLAT:imp_init_builtin
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0M@DLMGLEKN@init_frozen?$AA@
	DQ	FLAT:imp_init_frozen
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0L@IPGELEL@is_builtin?$AA@
	DQ	FLAT:imp_is_builtin
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_09HAKBJMNK@is_frozen?$AA@
	DQ	FLAT:imp_is_frozen
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0N@KBNOKGIP@load_dynamic?$AA@
	DQ	FLAT:imp_load_dynamic
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0BB@MOMFFMBI@_fix_co_filename?$AA@
	DQ	FLAT:imp_fix_co_filename
	DD	01H
	ORG $+4
	ORG $+8
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
impmodule DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_04KKIAMJPE@_imp?$AA@
	DQ	FLAT:doc_imp
	DQ	0000000000000000H
	DQ	FLAT:imp_methods
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
_DATA	ENDS
PUBLIC	??_C@_0CC@OPKNGKNI@Can?8t?5initialize?5import?5variable@ ; `string'
PUBLIC	??_C@_08DOHHOJGB@__init__?$AA@			; `string'
PUBLIC	_PyImport_Init
EXTRN	Py_FatalError:PROC
EXTRN	PyUnicode_InternFromString:PROC
;	COMDAT pdata
; File c:\src\pyparallel\python\import.c
pdata	SEGMENT
$pdata$_PyImport_Init DD imagerel $LN4
	DD	imagerel $LN4+50
	DD	imagerel $unwind$_PyImport_Init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyImport_Init DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0CC@OPKNGKNI@Can?8t?5initialize?5import?5variable@
CONST	SEGMENT
??_C@_0CC@OPKNGKNI@Can?8t?5initialize?5import?5variable@ DB 'Can''t initi'
	DB	'alize import variables', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08DOHHOJGB@__init__?$AA@
CONST	SEGMENT
??_C@_08DOHHOJGB@__init__?$AA@ DB '__init__', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PyImport_Init
_TEXT	SEGMENT
_PyImport_Init PROC					; COMDAT

; 49   : {

$LN4:
  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 50   :     initstr = PyUnicode_InternFromString("__init__");

  00004	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08DOHHOJGB@__init__?$AA@
  0000b	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  00010	48 89 05 00 00
	00 00		 mov	 QWORD PTR initstr, rax

; 51   :     if (initstr == NULL)

  00017	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR initstr, 0
  0001f	75 0c		 jne	 SHORT $LN1@PyImport_I

; 52   :         Py_FatalError("Can't initialize import variables");

  00021	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CC@OPKNGKNI@Can?8t?5initialize?5import?5variable@
  00028	e8 00 00 00 00	 call	 Py_FatalError
$LN1@PyImport_I:

; 53   : }

  0002d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00031	c3		 ret	 0
_PyImport_Init ENDP
_TEXT	ENDS
PUBLIC	??_C@_0EK@NMNNOLCG@initializing?5sys?4meta_path?0?5sys?4@ ; `string'
PUBLIC	_Py_DecRef
PUBLIC	_PyImportHooks_Init
EXTRN	PyErr_Print:PROC
EXTRN	PyDict_New:PROC
EXTRN	PySys_SetObject:PROC
EXTRN	PyList_New:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyImportHooks_Init DD imagerel $LN9
	DD	imagerel $LN9+228
	DD	imagerel $unwind$_PyImportHooks_Init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyImportHooks_Init DD 010401H
	DD	08204H
xdata	ENDS
;	COMDAT ??_C@_0EK@NMNNOLCG@initializing?5sys?4meta_path?0?5sys?4@
CONST	SEGMENT
??_C@_0EK@NMNNOLCG@initializing?5sys?4meta_path?0?5sys?4@ DB 'initializin'
	DB	'g sys.meta_path, sys.path_hooks, or path_importer_cache faile'
	DB	'd', 00H					; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PyImportHooks_Init
_TEXT	SEGMENT
v$ = 32
path_hooks$ = 40
err$ = 48
_PyImportHooks_Init PROC				; COMDAT

; 57   : {

$LN9:
  00000	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 58   :     PyObject *v, *path_hooks = NULL;

  00004	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR path_hooks$[rsp], 0

; 59   :     int err = 0;

  0000d	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR err$[rsp], 0

; 60   : 
; 61   :     /* adding sys.path_hooks and sys.path_importer_cache */
; 62   :     v = PyList_New(0);

  00015	33 c9		 xor	 ecx, ecx
  00017	e8 00 00 00 00	 call	 PyList_New
  0001c	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax

; 63   :     if (v == NULL)

  00021	48 83 7c 24 20
	00		 cmp	 QWORD PTR v$[rsp], 0
  00027	75 05		 jne	 SHORT $LN6@PyImportHo

; 64   :         goto error;

  00029	e9 96 00 00 00	 jmp	 $error$121735
$LN6@PyImportHo:

; 65   :     err = PySys_SetObject("meta_path", v);

  0002e	48 8b 54 24 20	 mov	 rdx, QWORD PTR v$[rsp]
  00033	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09FCAPOPDB@meta_path?$AA@
  0003a	e8 00 00 00 00	 call	 PySys_SetObject
  0003f	89 44 24 30	 mov	 DWORD PTR err$[rsp], eax

; 66   :     Py_DECREF(v);

  00043	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  00048	e8 00 00 00 00	 call	 _Py_DecRef

; 67   :     if (err)

  0004d	83 7c 24 30 00	 cmp	 DWORD PTR err$[rsp], 0
  00052	74 02		 je	 SHORT $LN5@PyImportHo

; 68   :         goto error;

  00054	eb 6e		 jmp	 SHORT $error$121735
$LN5@PyImportHo:

; 69   :     v = PyDict_New();

  00056	e8 00 00 00 00	 call	 PyDict_New
  0005b	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax

; 70   :     if (v == NULL)

  00060	48 83 7c 24 20
	00		 cmp	 QWORD PTR v$[rsp], 0
  00066	75 02		 jne	 SHORT $LN4@PyImportHo

; 71   :         goto error;

  00068	eb 5a		 jmp	 SHORT $error$121735
$LN4@PyImportHo:

; 72   :     err = PySys_SetObject("path_importer_cache", v);

  0006a	48 8b 54 24 20	 mov	 rdx, QWORD PTR v$[rsp]
  0006f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@FEEGIILL@path_importer_cache?$AA@
  00076	e8 00 00 00 00	 call	 PySys_SetObject
  0007b	89 44 24 30	 mov	 DWORD PTR err$[rsp], eax

; 73   :     Py_DECREF(v);

  0007f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  00084	e8 00 00 00 00	 call	 _Py_DecRef

; 74   :     if (err)

  00089	83 7c 24 30 00	 cmp	 DWORD PTR err$[rsp], 0
  0008e	74 02		 je	 SHORT $LN3@PyImportHo

; 75   :         goto error;

  00090	eb 32		 jmp	 SHORT $error$121735
$LN3@PyImportHo:

; 76   :     path_hooks = PyList_New(0);

  00092	33 c9		 xor	 ecx, ecx
  00094	e8 00 00 00 00	 call	 PyList_New
  00099	48 89 44 24 28	 mov	 QWORD PTR path_hooks$[rsp], rax

; 77   :     if (path_hooks == NULL)

  0009e	48 83 7c 24 28
	00		 cmp	 QWORD PTR path_hooks$[rsp], 0
  000a4	75 02		 jne	 SHORT $LN2@PyImportHo

; 78   :         goto error;

  000a6	eb 1c		 jmp	 SHORT $error$121735
$LN2@PyImportHo:

; 79   :     err = PySys_SetObject("path_hooks", path_hooks);

  000a8	48 8b 54 24 28	 mov	 rdx, QWORD PTR path_hooks$[rsp]
  000ad	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@PDLDEHCN@path_hooks?$AA@
  000b4	e8 00 00 00 00	 call	 PySys_SetObject
  000b9	89 44 24 30	 mov	 DWORD PTR err$[rsp], eax

; 80   :     if (err) {

  000bd	83 7c 24 30 00	 cmp	 DWORD PTR err$[rsp], 0
  000c2	74 11		 je	 SHORT $LN1@PyImportHo
$error$121735:

; 81   :   error:
; 82   :     PyErr_Print();

  000c4	e8 00 00 00 00	 call	 PyErr_Print

; 83   :     Py_FatalError("initializing sys.meta_path, sys.path_hooks, "
; 84   :                   "or path_importer_cache failed");

  000c9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0EK@NMNNOLCG@initializing?5sys?4meta_path?0?5sys?4@
  000d0	e8 00 00 00 00	 call	 Py_FatalError
$LN1@PyImportHo:

; 85   :     }
; 86   :     Py_DECREF(path_hooks);

  000d5	48 8b 4c 24 28	 mov	 rcx, QWORD PTR path_hooks$[rsp]
  000da	e8 00 00 00 00	 call	 _Py_DecRef

; 87   : }

  000df	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e3	c3		 ret	 0
_PyImportHooks_Init ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
EXTRN	_Py_Dealloc:PROC
EXTRN	_Py_NegativeRefcount:PROC
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_RefTotal:QWORD
EXTRN	Px_DecRef:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN13
	DD	imagerel $LN13+257
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
tv81 = 48
op$ = 80
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN13:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	0f 85 e6 00 00
	00		 jne	 $LN8@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00016	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0001b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0001f	48 83 e0 20	 and	 rax, 32			; 00000020H
  00023	48 85 c0	 test	 rax, rax
  00026	75 14		 jne	 SHORT $LN6@Py_DecRef
  00028	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0002d	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00031	48 25 80 00 00
	00		 and	 rax, 128		; 00000080H
  00037	48 85 c0	 test	 rax, rax
  0003a	74 0f		 je	 SHORT $LN7@Py_DecRef
$LN6@Py_DecRef:

; 926  :             Px_DECREF(op);

  0003c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  00041	e8 00 00 00 00	 call	 Px_DecRef
  00046	e9 b1 00 00 00	 jmp	 $LN5@Py_DecRef
$LN7@Py_DecRef:

; 927  :         else if (!Px_ISPX(op)) {

  0004b	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00050	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00054	48 83 e0 02	 and	 rax, 2
  00058	48 85 c0	 test	 rax, rax
  0005b	0f 85 9b 00 00
	00		 jne	 $LN4@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;

  00061	e8 00 00 00 00	 call	 _Py_PXCTX
  00066	85 c0		 test	 eax, eax
  00068	74 02		 je	 SHORT $LN11@Py_DecRef
  0006a	eb 11		 jmp	 SHORT $LN12@Py_DecRef
$LN11@Py_DecRef:
  0006c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00073	48 ff c8	 dec	 rax
  00076	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN12@Py_DecRef:

; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  0007d	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00082	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00086	48 ff c8	 dec	 rax
  00089	48 89 44 24 30	 mov	 QWORD PTR tv81[rsp], rax
  0008e	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00093	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv81[rsp]
  00098	48 89 48 50	 mov	 QWORD PTR [rax+80], rcx
  0009c	48 83 7c 24 30
	00		 cmp	 QWORD PTR tv81[rsp], 0
  000a2	74 4e		 je	 SHORT $LN3@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);

  000a4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000ac	4c 8b 4c 24 50	 mov	 r9, QWORD PTR op$[rsp]
  000b1	41 b8 a2 03 00
	00		 mov	 r8d, 930		; 000003a2H
  000b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000c5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ca	85 c0		 test	 eax, eax
  000cc	75 22		 jne	 SHORT $LN2@Py_DecRef
  000ce	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  000d3	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000d8	7d 16		 jge	 SHORT $LN2@Py_DecRef
  000da	4c 8b 44 24 50	 mov	 r8, QWORD PTR op$[rsp]
  000df	ba a2 03 00 00	 mov	 edx, 930		; 000003a2H
  000e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000eb	e8 00 00 00 00	 call	 _Py_NegativeRefcount
$LN2@Py_DecRef:

; 931  :             } else

  000f0	eb 0a		 jmp	 SHORT $LN1@Py_DecRef
$LN3@Py_DecRef:

; 932  :                 _Py_Dealloc((PyObject *)(op));

  000f2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  000f7	e8 00 00 00 00	 call	 _Py_Dealloc
$LN1@Py_DecRef:
$LN4@Py_DecRef:
$LN5@Py_DecRef:
$LN8@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  000fc	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00100	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BO@LDAODFLF@initializing?5zipimport?5failed?$AA@ ; `string'
PUBLIC	??_C@_0BM@NOACPIFF@?$CD?5installed?5zipimport?5hook?6?$AA@ ; `string'
PUBLIC	??_C@_0CG@MBDJJEAL@?$CD?5can?8t?5import?5zipimport?4zipimpo@ ; `string'
PUBLIC	??_C@_0BK@BDFGNOJH@?$CD?5can?8t?5import?5zipimport?6?$AA@ ; `string'
PUBLIC	PyImport_ImportModule
PUBLIC	??_C@_09INHLDGFD@zipimport?$AA@			; `string'
PUBLIC	??_C@_0BN@OKCAPEKD@?$CD?5installing?5zipimport?5hook?6?$AA@ ; `string'
PUBLIC	_PyImportZip_Init
EXTRN	PyList_Insert:PROC
EXTRN	_PyObject_GetAttrId:PROC
EXTRN	PyErr_Clear:PROC
EXTRN	PySys_WriteStderr:PROC
EXTRN	Py_VerboseFlag:DWORD
EXTRN	PySys_GetObject:PROC
EXTRN	_tls_index:DWORD
;	COMDAT pdata
; File c:\src\pyparallel\python\import.c
pdata	SEGMENT
$pdata$_PyImportZip_Init DD imagerel $LN13
	DD	imagerel $LN13+294
	DD	imagerel $unwind$_PyImportZip_Init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyImportZip_Init DD 010401H
	DD	08204H
xdata	ENDS
;	COMDAT ??_C@_0BO@LDAODFLF@initializing?5zipimport?5failed?$AA@
CONST	SEGMENT
??_C@_0BO@LDAODFLF@initializing?5zipimport?5failed?$AA@ DB 'initializing '
	DB	'zipimport failed', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@NOACPIFF@?$CD?5installed?5zipimport?5hook?6?$AA@
CONST	SEGMENT
??_C@_0BM@NOACPIFF@?$CD?5installed?5zipimport?5hook?6?$AA@ DB '# installe'
	DB	'd zipimport hook', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@MBDJJEAL@?$CD?5can?8t?5import?5zipimport?4zipimpo@
CONST	SEGMENT
??_C@_0CG@MBDJJEAL@?$CD?5can?8t?5import?5zipimport?4zipimpo@ DB '# can''t'
	DB	' import zipimport.zipimporter', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@BDFGNOJH@?$CD?5can?8t?5import?5zipimport?6?$AA@
CONST	SEGMENT
??_C@_0BK@BDFGNOJH@?$CD?5can?8t?5import?5zipimport?6?$AA@ DB '# can''t im'
	DB	'port zipimport', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09INHLDGFD@zipimport?$AA@
CONST	SEGMENT
??_C@_09INHLDGFD@zipimport?$AA@ DB 'zipimport', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@OKCAPEKD@?$CD?5installing?5zipimport?5hook?6?$AA@
CONST	SEGMENT
??_C@_0BN@OKCAPEKD@?$CD?5installing?5zipimport?5hook?6?$AA@ DB '# install'
	DB	'ing zipimport hook', 0aH, 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PyImportZip_Init
_TEXT	SEGMENT
path_hooks$ = 32
err$ = 40
zimpimport$ = 48
zipimporter$121769 = 56
_PyImportZip_Init PROC					; COMDAT

; 91   : {

$LN13:
  00000	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 92   :     PyObject *path_hooks, *zimpimport;
; 93   :     int err = 0;

  00004	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR err$[rsp], 0

; 94   : 
; 95   :     path_hooks = PySys_GetObject("path_hooks");

  0000c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@PDLDEHCN@path_hooks?$AA@
  00013	e8 00 00 00 00	 call	 PySys_GetObject
  00018	48 89 44 24 20	 mov	 QWORD PTR path_hooks$[rsp], rax

; 96   :     if (path_hooks == NULL)

  0001d	48 83 7c 24 20
	00		 cmp	 QWORD PTR path_hooks$[rsp], 0
  00023	75 05		 jne	 SHORT $LN10@PyImportZi

; 97   :         goto error;

  00025	e9 e6 00 00 00	 jmp	 $error$121757
$LN10@PyImportZi:

; 98   : 
; 99   :     if (Py_VerboseFlag)

  0002a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR Py_VerboseFlag, 0
  00031	74 0c		 je	 SHORT $LN9@PyImportZi

; 100  :         PySys_WriteStderr("# installing zipimport hook\n");

  00033	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BN@OKCAPEKD@?$CD?5installing?5zipimport?5hook?6?$AA@
  0003a	e8 00 00 00 00	 call	 PySys_WriteStderr
$LN9@PyImportZi:

; 101  : 
; 102  :     zimpimport = PyImport_ImportModule("zipimport");

  0003f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09INHLDGFD@zipimport?$AA@
  00046	e8 00 00 00 00	 call	 PyImport_ImportModule
  0004b	48 89 44 24 30	 mov	 QWORD PTR zimpimport$[rsp], rax

; 103  :     if (zimpimport == NULL) {

  00050	48 83 7c 24 30
	00		 cmp	 QWORD PTR zimpimport$[rsp], 0
  00056	75 1f		 jne	 SHORT $LN8@PyImportZi

; 104  :         PyErr_Clear(); /* No zip import module -- okay */

  00058	e8 00 00 00 00	 call	 PyErr_Clear

; 105  :         if (Py_VerboseFlag)

  0005d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR Py_VerboseFlag, 0
  00064	74 0c		 je	 SHORT $LN7@PyImportZi

; 106  :             PySys_WriteStderr("# can't import zipimport\n");

  00066	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@BDFGNOJH@?$CD?5can?8t?5import?5zipimport?6?$AA@
  0006d	e8 00 00 00 00	 call	 PySys_WriteStderr
$LN7@PyImportZi:

; 107  :     }
; 108  :     else {

  00072	e9 97 00 00 00	 jmp	 $LN6@PyImportZi
$LN8@PyImportZi:

; 109  :         _Py_IDENTIFIER(zipimporter);
; 110  :         PyObject *zipimporter = _PyObject_GetAttrId(zimpimport,
; 111  :                                                     &PyId_zipimporter);

  00077	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId_zipimporter@?3??_PyImportZip_Init@@9@9
  0007c	8b c0		 mov	 eax, eax
  0007e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00084	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0008d	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00091	48 8b d0	 mov	 rdx, rax
  00094	48 8b 4c 24 30	 mov	 rcx, QWORD PTR zimpimport$[rsp]
  00099	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  0009e	48 89 44 24 38	 mov	 QWORD PTR zipimporter$121769[rsp], rax

; 112  :         Py_DECREF(zimpimport);

  000a3	48 8b 4c 24 30	 mov	 rcx, QWORD PTR zimpimport$[rsp]
  000a8	e8 00 00 00 00	 call	 _Py_DecRef

; 113  :         if (zipimporter == NULL) {

  000ad	48 83 7c 24 38
	00		 cmp	 QWORD PTR zipimporter$121769[rsp], 0
  000b3	75 1c		 jne	 SHORT $LN5@PyImportZi

; 114  :             PyErr_Clear(); /* No zipimporter object -- okay */

  000b5	e8 00 00 00 00	 call	 PyErr_Clear

; 115  :             if (Py_VerboseFlag)

  000ba	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR Py_VerboseFlag, 0
  000c1	74 0c		 je	 SHORT $LN4@PyImportZi

; 116  :                 PySys_WriteStderr(
; 117  :                     "# can't import zipimport.zipimporter\n");

  000c3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CG@MBDJJEAL@?$CD?5can?8t?5import?5zipimport?4zipimpo@
  000ca	e8 00 00 00 00	 call	 PySys_WriteStderr
$LN4@PyImportZi:

; 118  :         }
; 119  :         else {

  000cf	eb 3d		 jmp	 SHORT $LN3@PyImportZi
$LN5@PyImportZi:

; 120  :             /* sys.path_hooks.insert(0, zipimporter) */
; 121  :             err = PyList_Insert(path_hooks, 0, zipimporter);

  000d1	4c 8b 44 24 38	 mov	 r8, QWORD PTR zipimporter$121769[rsp]
  000d6	33 d2		 xor	 edx, edx
  000d8	48 8b 4c 24 20	 mov	 rcx, QWORD PTR path_hooks$[rsp]
  000dd	e8 00 00 00 00	 call	 PyList_Insert
  000e2	89 44 24 28	 mov	 DWORD PTR err$[rsp], eax

; 122  :             Py_DECREF(zipimporter);

  000e6	48 8b 4c 24 38	 mov	 rcx, QWORD PTR zipimporter$121769[rsp]
  000eb	e8 00 00 00 00	 call	 _Py_DecRef

; 123  :             if (err < 0) {

  000f0	83 7c 24 28 00	 cmp	 DWORD PTR err$[rsp], 0
  000f5	7d 02		 jge	 SHORT $LN2@PyImportZi

; 124  :                 goto error;

  000f7	eb 17		 jmp	 SHORT $error$121757
$LN2@PyImportZi:

; 125  :             }
; 126  :             if (Py_VerboseFlag)

  000f9	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR Py_VerboseFlag, 0
  00100	74 0c		 je	 SHORT $LN1@PyImportZi

; 127  :                 PySys_WriteStderr(
; 128  :                     "# installed zipimport hook\n");

  00102	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BM@NOACPIFF@?$CD?5installed?5zipimport?5hook?6?$AA@
  00109	e8 00 00 00 00	 call	 PySys_WriteStderr
$LN1@PyImportZi:
$LN3@PyImportZi:
$LN6@PyImportZi:

; 129  :         }
; 130  :     }
; 131  : 
; 132  :     return;

  0010e	eb 11		 jmp	 SHORT $LN11@PyImportZi
$error$121757:

; 133  : 
; 134  :   error:
; 135  :     PyErr_Print();

  00110	e8 00 00 00 00	 call	 PyErr_Print

; 136  :     Py_FatalError("initializing zipimport failed");

  00115	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BO@LDAODFLF@initializing?5zipimport?5failed?$AA@
  0011c	e8 00 00 00 00	 call	 Py_FatalError
$LN11@PyImportZi:

; 137  : }

  00121	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00125	c3		 ret	 0
_PyImportZip_Init ENDP
_TEXT	ENDS
PUBLIC	??_C@_1CO@GLGBBFB@?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA_?$AAl?$AAo?$AAc?$AAk?$AA_?$AAl?$AAe?$AAv?$AAe?$AAl?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CG@NNAILCKC@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@ ; `string'
PUBLIC	_PyImport_AcquireLock
EXTRN	__imp__wassert:PROC
EXTRN	PyEval_RestoreThread:PROC
EXTRN	PyEval_SaveThread:PROC
EXTRN	PyThread_acquire_lock:PROC
EXTRN	PyThread_allocate_lock:PROC
EXTRN	PyThread_get_thread_ident:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyImport_AcquireLock DD imagerel $LN10
	DD	imagerel $LN10+216
	DD	imagerel $unwind$_PyImport_AcquireLock
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyImport_AcquireLock DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_1CO@GLGBBFB@?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA_?$AAl?$AAo?$AAc?$AAk?$AA_?$AAl?$AAe?$AAv?$AAe?$AAl?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1CO@GLGBBFB@?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA_?$AAl?$AAo?$AAc?$AAk?$AA_?$AAl?$AAe?$AAv?$AAe?$AAl?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@ DB 'i'
	DB	00H, 'm', 00H, 'p', 00H, 'o', 00H, 'r', 00H, 't', 00H, '_', 00H
	DB	'l', 00H, 'o', 00H, 'c', 00H, 'k', 00H, '_', 00H, 'l', 00H, 'e'
	DB	00H, 'v', 00H, 'e', 00H, 'l', 00H, ' ', 00H, '=', 00H, '=', 00H
	DB	' ', 00H, '0', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@NNAILCKC@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@
CONST	SEGMENT
??_C@_1CG@NNAILCKC@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@ DB '.'
	DB	00H, '.', 00H, '\', 00H, 'P', 00H, 'y', 00H, 't', 00H, 'h', 00H
	DB	'o', 00H, 'n', 00H, '\', 00H, 'i', 00H, 'm', 00H, 'p', 00H, 'o'
	DB	00H, 'r', 00H, 't', 00H, '.', 00H, 'c', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PyImport_AcquireLock
_TEXT	SEGMENT
me$ = 32
tstate$121854 = 40
_PyImport_AcquireLock PROC				; COMDAT

; 153  : {

$LN10:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 154  :     long me = PyThread_get_thread_ident();

  00004	e8 00 00 00 00	 call	 PyThread_get_thread_ident
  00009	89 44 24 20	 mov	 DWORD PTR me$[rsp], eax

; 155  :     if (me == -1)

  0000d	83 7c 24 20 ff	 cmp	 DWORD PTR me$[rsp], -1
  00012	75 05		 jne	 SHORT $LN6@PyImport_A

; 156  :         return; /* Too bad */

  00014	e9 ba 00 00 00	 jmp	 $LN7@PyImport_A
$LN6@PyImport_A:

; 157  :     if (import_lock == NULL) {

  00019	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR import_lock, 0
  00021	75 1b		 jne	 SHORT $LN5@PyImport_A

; 158  :         import_lock = PyThread_allocate_lock();

  00023	e8 00 00 00 00	 call	 PyThread_allocate_lock
  00028	48 89 05 00 00
	00 00		 mov	 QWORD PTR import_lock, rax

; 159  :         if (import_lock == NULL)

  0002f	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR import_lock, 0
  00037	75 05		 jne	 SHORT $LN4@PyImport_A

; 160  :             return;  /* Nothing much we can do. */

  00039	e9 95 00 00 00	 jmp	 $LN7@PyImport_A
$LN4@PyImport_A:
$LN5@PyImport_A:

; 161  :     }
; 162  :     if (import_lock_thread == me) {

  0003e	8b 44 24 20	 mov	 eax, DWORD PTR me$[rsp]
  00042	39 05 00 00 00
	00		 cmp	 DWORD PTR import_lock_thread, eax
  00048	75 10		 jne	 SHORT $LN3@PyImport_A

; 163  :         import_lock_level++;

  0004a	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR import_lock_level
  00050	ff c0		 inc	 eax
  00052	89 05 00 00 00
	00		 mov	 DWORD PTR import_lock_level, eax

; 164  :         return;

  00058	eb 79		 jmp	 SHORT $LN7@PyImport_A
$LN3@PyImport_A:

; 165  :     }
; 166  :     if (import_lock_thread != -1 || !PyThread_acquire_lock(import_lock, 0))

  0005a	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR import_lock_thread, -1
  00061	75 12		 jne	 SHORT $LN1@PyImport_A
  00063	33 d2		 xor	 edx, edx
  00065	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR import_lock
  0006c	e8 00 00 00 00	 call	 PyThread_acquire_lock
  00071	85 c0		 test	 eax, eax
  00073	75 25		 jne	 SHORT $LN2@PyImport_A
$LN1@PyImport_A:

; 167  :     {
; 168  :         PyThreadState *tstate = PyEval_SaveThread();

  00075	e8 00 00 00 00	 call	 PyEval_SaveThread
  0007a	48 89 44 24 28	 mov	 QWORD PTR tstate$121854[rsp], rax

; 169  :         PyThread_acquire_lock(import_lock, 1);

  0007f	ba 01 00 00 00	 mov	 edx, 1
  00084	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR import_lock
  0008b	e8 00 00 00 00	 call	 PyThread_acquire_lock

; 170  :         PyEval_RestoreThread(tstate);

  00090	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tstate$121854[rsp]
  00095	e8 00 00 00 00	 call	 PyEval_RestoreThread
$LN2@PyImport_A:

; 171  :     }
; 172  :     assert(import_lock_level == 0);

  0009a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR import_lock_level, 0
  000a1	74 1c		 je	 SHORT $LN9@PyImport_A
  000a3	41 b8 ac 00 00
	00		 mov	 r8d, 172		; 000000acH
  000a9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@NNAILCKC@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@
  000b0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@GLGBBFB@?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA_?$AAl?$AAo?$AAc?$AAk?$AA_?$AAl?$AAe?$AAv?$AAe?$AAl?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA0?$AA?$AA@
  000b7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000bd	33 c0		 xor	 eax, eax
$LN9@PyImport_A:

; 173  :     import_lock_thread = me;

  000bf	8b 44 24 20	 mov	 eax, DWORD PTR me$[rsp]
  000c3	89 05 00 00 00
	00		 mov	 DWORD PTR import_lock_thread, eax

; 174  :     import_lock_level = 1;

  000c9	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR import_lock_level, 1
$LN7@PyImport_A:

; 175  : }

  000d3	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000d7	c3		 ret	 0
_PyImport_AcquireLock ENDP
_TEXT	ENDS
PUBLIC	??_C@_1CO@ONIBKKFC@?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA_?$AAl?$AAo?$AAc?$AAk?$AA_?$AAl?$AAe?$AAv?$AAe?$AAl?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	_PyImport_ReleaseLock
EXTRN	PyThread_release_lock:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyImport_ReleaseLock DD imagerel $LN8
	DD	imagerel $LN8+145
	DD	imagerel $unwind$_PyImport_ReleaseLock
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyImport_ReleaseLock DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_1CO@ONIBKKFC@?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA_?$AAl?$AAo?$AAc?$AAk?$AA_?$AAl?$AAe?$AAv?$AAe?$AAl?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1CO@ONIBKKFC@?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA_?$AAl?$AAo?$AAc?$AAk?$AA_?$AAl?$AAe?$AAv?$AAe?$AAl?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@ DB 'i'
	DB	00H, 'm', 00H, 'p', 00H, 'o', 00H, 'r', 00H, 't', 00H, '_', 00H
	DB	'l', 00H, 'o', 00H, 'c', 00H, 'k', 00H, '_', 00H, 'l', 00H, 'e'
	DB	00H, 'v', 00H, 'e', 00H, 'l', 00H, ' ', 00H, '>', 00H, '=', 00H
	DB	' ', 00H, '0', 00H, 00H, 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PyImport_ReleaseLock
_TEXT	SEGMENT
me$ = 32
_PyImport_ReleaseLock PROC				; COMDAT

; 179  : {

$LN8:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 180  :     long me = PyThread_get_thread_ident();

  00004	e8 00 00 00 00	 call	 PyThread_get_thread_ident
  00009	89 44 24 20	 mov	 DWORD PTR me$[rsp], eax

; 181  :     if (me == -1 || import_lock == NULL)

  0000d	83 7c 24 20 ff	 cmp	 DWORD PTR me$[rsp], -1
  00012	74 0a		 je	 SHORT $LN3@PyImport_R
  00014	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR import_lock, 0
  0001c	75 04		 jne	 SHORT $LN4@PyImport_R
$LN3@PyImport_R:

; 182  :         return 0; /* Too bad */

  0001e	33 c0		 xor	 eax, eax
  00020	eb 6a		 jmp	 SHORT $LN5@PyImport_R
$LN4@PyImport_R:

; 183  :     if (import_lock_thread != me)

  00022	8b 44 24 20	 mov	 eax, DWORD PTR me$[rsp]
  00026	39 05 00 00 00
	00		 cmp	 DWORD PTR import_lock_thread, eax
  0002c	74 07		 je	 SHORT $LN2@PyImport_R

; 184  :         return -1;

  0002e	b8 ff ff ff ff	 mov	 eax, -1
  00033	eb 57		 jmp	 SHORT $LN5@PyImport_R
$LN2@PyImport_R:

; 185  :     import_lock_level--;

  00035	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR import_lock_level
  0003b	ff c8		 dec	 eax
  0003d	89 05 00 00 00
	00		 mov	 DWORD PTR import_lock_level, eax

; 186  :     assert(import_lock_level >= 0);

  00043	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR import_lock_level, 0
  0004a	7d 1c		 jge	 SHORT $LN7@PyImport_R
  0004c	41 b8 ba 00 00
	00		 mov	 r8d, 186		; 000000baH
  00052	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@NNAILCKC@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@
  00059	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@ONIBKKFC@?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA_?$AAl?$AAo?$AAc?$AAk?$AA_?$AAl?$AAe?$AAv?$AAe?$AAl?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?$AA@
  00060	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00066	33 c0		 xor	 eax, eax
$LN7@PyImport_R:

; 187  :     if (import_lock_level == 0) {

  00068	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR import_lock_level, 0
  0006f	75 16		 jne	 SHORT $LN1@PyImport_R

; 188  :         import_lock_thread = -1;

  00071	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR import_lock_thread, -1

; 189  :         PyThread_release_lock(import_lock);

  0007b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR import_lock
  00082	e8 00 00 00 00	 call	 PyThread_release_lock
$LN1@PyImport_R:

; 190  :     }
; 191  :     return 1;

  00087	b8 01 00 00 00	 mov	 eax, 1
$LN5@PyImport_R:

; 192  : }

  0008c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00090	c3		 ret	 0
_PyImport_ReleaseLock ENDP
_TEXT	ENDS
PUBLIC	_PyImport_ReInitLock
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyImport_ReInitLock DD imagerel $LN6
	DD	imagerel $LN6+109
	DD	imagerel $unwind$_PyImport_ReInitLock
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyImport_ReInitLock DD 010401H
	DD	06204H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _PyImport_ReInitLock
_TEXT	SEGMENT
me$121873 = 32
_PyImport_ReInitLock PROC				; COMDAT

; 201  : {

$LN6:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 202  :     if (import_lock != NULL)

  00004	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR import_lock, 0
  0000c	74 0c		 je	 SHORT $LN3@PyImport_R@2

; 203  :         import_lock = PyThread_allocate_lock();

  0000e	e8 00 00 00 00	 call	 PyThread_allocate_lock
  00013	48 89 05 00 00
	00 00		 mov	 QWORD PTR import_lock, rax
$LN3@PyImport_R@2:

; 204  :     if (import_lock_level > 1) {

  0001a	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR import_lock_level, 1
  00021	7e 31		 jle	 SHORT $LN2@PyImport_R@2

; 205  :         /* Forked as a side effect of import */
; 206  :         long me = PyThread_get_thread_ident();

  00023	e8 00 00 00 00	 call	 PyThread_get_thread_ident
  00028	89 44 24 20	 mov	 DWORD PTR me$121873[rsp], eax

; 207  :         PyThread_acquire_lock(import_lock, 0);

  0002c	33 d2		 xor	 edx, edx
  0002e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR import_lock
  00035	e8 00 00 00 00	 call	 PyThread_acquire_lock

; 208  :         /* XXX: can the previous line fail? */
; 209  :         import_lock_thread = me;

  0003a	8b 44 24 20	 mov	 eax, DWORD PTR me$121873[rsp]
  0003e	89 05 00 00 00
	00		 mov	 DWORD PTR import_lock_thread, eax

; 210  :         import_lock_level--;

  00044	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR import_lock_level
  0004a	ff c8		 dec	 eax
  0004c	89 05 00 00 00
	00		 mov	 DWORD PTR import_lock_level, eax

; 211  :     } else {

  00052	eb 14		 jmp	 SHORT $LN1@PyImport_R@2
$LN2@PyImport_R@2:

; 212  :         import_lock_thread = -1;

  00054	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR import_lock_thread, -1

; 213  :         import_lock_level = 0;

  0005e	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR import_lock_level, 0
$LN1@PyImport_R@2:

; 214  :     }
; 215  : }

  00068	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0006c	c3		 ret	 0
_PyImport_ReInitLock ENDP
_TEXT	ENDS
EXTRN	PyBool_FromLong:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$imp_lock_held DD imagerel imp_lock_held
	DD	imagerel imp_lock_held+55
	DD	imagerel $unwind$imp_lock_held
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$imp_lock_held DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT imp_lock_held
_TEXT	SEGMENT
tv66 = 32
self$ = 64
noargs$ = 72
imp_lock_held PROC					; COMDAT

; 221  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 222  : #ifdef WITH_THREAD
; 223  :     return PyBool_FromLong(import_lock_thread != -1);

  0000e	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR import_lock_thread, -1
  00015	74 0a		 je	 SHORT $LN3@imp_lock_h
  00017	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv66[rsp], 1
  0001f	eb 08		 jmp	 SHORT $LN4@imp_lock_h
$LN3@imp_lock_h:
  00021	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv66[rsp], 0
$LN4@imp_lock_h:
  00029	8b 4c 24 20	 mov	 ecx, DWORD PTR tv66[rsp]
  0002d	e8 00 00 00 00	 call	 PyBool_FromLong

; 224  : #else
; 225  :     return PyBool_FromLong(0);
; 226  : #endif
; 227  : }

  00032	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00036	c3		 ret	 0
imp_lock_held ENDP
_TEXT	ENDS
PUBLIC	_Py_IncRef
EXTRN	_Py_NoneStruct:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$imp_acquire_lock DD imagerel imp_acquire_lock
	DD	imagerel imp_acquire_lock+43
	DD	imagerel $unwind$imp_acquire_lock
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$imp_acquire_lock DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT imp_acquire_lock
_TEXT	SEGMENT
self$ = 48
noargs$ = 56
imp_acquire_lock PROC					; COMDAT

; 231  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 232  : #ifdef WITH_THREAD
; 233  :     _PyImport_AcquireLock();

  0000e	e8 00 00 00 00	 call	 _PyImport_AcquireLock

; 234  : #endif
; 235  :     Py_INCREF(Py_None);

  00013	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  0001a	e8 00 00 00 00	 call	 _Py_IncRef

; 236  :     return Py_None;

  0001f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 237  : }

  00026	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002a	c3		 ret	 0
imp_acquire_lock ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN7
	DD	imagerel $LN7+132
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 6d		 jne	 SHORT $LN2@Py_IncRef
  00012	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0001a	4c 8b 4c 24 40	 mov	 r9, QWORD PTR op$[rsp]
  0001f	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_Guard
  00038	85 c0		 test	 eax, eax
  0003a	75 12		 jne	 SHORT $LN1@Py_IncRef
  0003c	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  00041	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00045	48 83 e0 20	 and	 rax, 32			; 00000020H
  00049	48 85 c0	 test	 rax, rax
  0004c	74 31		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;

  0004e	e8 00 00 00 00	 call	 _Py_PXCTX
  00053	85 c0		 test	 eax, eax
  00055	74 02		 je	 SHORT $LN5@Py_IncRef
  00057	eb 11		 jmp	 SHORT $LN6@Py_IncRef
$LN5@Py_IncRef:
  00059	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00060	48 ff c0	 inc	 rax
  00063	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN6@Py_IncRef:

; 907  :         (((PyObject*)(op))->ob_refcnt++);

  0006a	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  0006f	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00073	48 ff c0	 inc	 rax
  00076	48 8b 4c 24 40	 mov	 rcx, QWORD PTR op$[rsp]
  0007b	48 89 41 50	 mov	 QWORD PTR [rcx+80], rax
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  0007f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00083	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BM@JAELALKO@not?5holding?5the?5import?5lock?$AA@ ; `string'
EXTRN	PyErr_SetString:PROC
EXTRN	PyExc_RuntimeError:QWORD
;	COMDAT pdata
; File c:\src\pyparallel\python\import.c
pdata	SEGMENT
$pdata$imp_release_lock DD imagerel imp_release_lock
	DD	imagerel imp_release_lock+70
	DD	imagerel $unwind$imp_release_lock
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$imp_release_lock DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT ??_C@_0BM@JAELALKO@not?5holding?5the?5import?5lock?$AA@
CONST	SEGMENT
??_C@_0BM@JAELALKO@not?5holding?5the?5import?5lock?$AA@ DB 'not holding t'
	DB	'he import lock', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT imp_release_lock
_TEXT	SEGMENT
self$ = 48
noargs$ = 56
imp_release_lock PROC					; COMDAT

; 241  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 242  : #ifdef WITH_THREAD
; 243  :     if (_PyImport_ReleaseLock() < 0) {

  0000e	e8 00 00 00 00	 call	 _PyImport_ReleaseLock
  00013	85 c0		 test	 eax, eax
  00015	7d 17		 jge	 SHORT $LN1@imp_releas

; 244  :         PyErr_SetString(PyExc_RuntimeError,
; 245  :                         "not holding the import lock");

  00017	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@JAELALKO@not?5holding?5the?5import?5lock?$AA@
  0001e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeError
  00025	e8 00 00 00 00	 call	 PyErr_SetString

; 246  :         return NULL;

  0002a	33 c0		 xor	 eax, eax
  0002c	eb 13		 jmp	 SHORT $LN2@imp_releas
$LN1@imp_releas:

; 247  :     }
; 248  : #endif
; 249  :     Py_INCREF(Py_None);

  0002e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00035	e8 00 00 00 00	 call	 _Py_IncRef

; 250  :     return Py_None;

  0003a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
$LN2@imp_releas:

; 251  : }

  00041	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00045	c3		 ret	 0
imp_release_lock ENDP
_TEXT	ENDS
PUBLIC	??_C@_0P@MHCPAAKG@_PyImport_Fini?$AA@		; `string'
PUBLIC	??_C@_0BD@FNMKEIOD@?4?4?2Python?2import?4c?$AA@	; `string'
PUBLIC	_PyImport_Fini
EXTRN	PyThread_free_lock:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyImport_Fini DD imagerel $LN8
	DD	imagerel $LN8+135
	DD	imagerel $unwind$_PyImport_Fini
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyImport_Fini DD 010401H
	DD	08204H
xdata	ENDS
;	COMDAT ??_C@_0P@MHCPAAKG@_PyImport_Fini?$AA@
CONST	SEGMENT
??_C@_0P@MHCPAAKG@_PyImport_Fini?$AA@ DB '_PyImport_Fini', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FNMKEIOD@?4?4?2Python?2import?4c?$AA@
CONST	SEGMENT
??_C@_0BD@FNMKEIOD@?4?4?2Python?2import?4c?$AA@ DB '..\Python\import.c', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PyImport_Fini
_TEXT	SEGMENT
_py_tmp$121906 = 48
_PyImport_Fini PROC					; COMDAT

; 255  : {

$LN8:
  00000	48 83 ec 48	 sub	 rsp, 72			; 00000048H
$LN5@PyImport_F:

; 256  :     Py_CLEAR(extensions);

  00004	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR extensions, 0
  0000c	74 4d		 je	 SHORT $LN2@PyImport_F
  0000e	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00016	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR extensions
  0001d	41 b8 00 01 00
	00		 mov	 r8d, 256		; 00000100H
  00023	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@FNMKEIOD@?4?4?2Python?2import?4c?$AA@
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@MHCPAAKG@_PyImport_Fini?$AA@
  00031	e8 00 00 00 00	 call	 _PyParallel_Guard
  00036	85 c0		 test	 eax, eax
  00038	75 21		 jne	 SHORT $LN2@PyImport_F
  0003a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR extensions
  00041	48 89 44 24 30	 mov	 QWORD PTR _py_tmp$121906[rsp], rax
  00046	48 c7 05 00 00
	00 00 00 00 00
	00		 mov	 QWORD PTR extensions, 0
  00051	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _py_tmp$121906[rsp]
  00056	e8 00 00 00 00	 call	 _Py_DecRef
$LN2@PyImport_F:
  0005b	33 c0		 xor	 eax, eax
  0005d	85 c0		 test	 eax, eax
  0005f	75 a3		 jne	 SHORT $LN5@PyImport_F

; 257  : #ifdef WITH_THREAD
; 258  :     if (import_lock != NULL) {

  00061	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR import_lock, 0
  00069	74 17		 je	 SHORT $LN1@PyImport_F

; 259  :         PyThread_free_lock(import_lock);

  0006b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR import_lock
  00072	e8 00 00 00 00	 call	 PyThread_free_lock

; 260  :         import_lock = NULL;

  00077	48 c7 05 00 00
	00 00 00 00 00
	00		 mov	 QWORD PTR import_lock, 0
$LN1@PyImport_F:

; 261  :     }
; 262  : #endif
; 263  : }

  00082	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00086	c3		 ret	 0
_PyImport_Fini ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CO@CGEEKKNL@PyImport_GetModuleDict?3?5no?5modul@ ; `string'
PUBLIC	PyImport_GetModuleDict
EXTRN	PyThreadState_Get:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyImport_GetModuleDict DD imagerel $LN4
	DD	imagerel $LN4+56
	DD	imagerel $unwind$PyImport_GetModuleDict
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyImport_GetModuleDict DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_0CO@CGEEKKNL@PyImport_GetModuleDict?3?5no?5modul@
CONST	SEGMENT
??_C@_0CO@CGEEKKNL@PyImport_GetModuleDict?3?5no?5modul@ DB 'PyImport_GetM'
	DB	'oduleDict: no module dictionary!', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyImport_GetModuleDict
_TEXT	SEGMENT
interp$ = 32
PyImport_GetModuleDict PROC				; COMDAT

; 269  : {

$LN4:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 270  :     PyInterpreterState *interp = PyThreadState_GET()->interp;

  00004	e8 00 00 00 00	 call	 PyThreadState_Get
  00009	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0000d	48 89 44 24 20	 mov	 QWORD PTR interp$[rsp], rax

; 271  :     if (interp->modules == NULL)

  00012	48 8b 44 24 20	 mov	 rax, QWORD PTR interp$[rsp]
  00017	48 83 78 10 00	 cmp	 QWORD PTR [rax+16], 0
  0001c	75 0c		 jne	 SHORT $LN1@PyImport_G

; 272  :         Py_FatalError("PyImport_GetModuleDict: no module dictionary!");

  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CO@CGEEKKNL@PyImport_GetModuleDict?3?5no?5modul@
  00025	e8 00 00 00 00	 call	 Py_FatalError
$LN1@PyImport_G:

; 273  :     return interp->modules;

  0002a	48 8b 44 24 20	 mov	 rax, QWORD PTR interp$[rsp]
  0002f	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]

; 274  : }

  00033	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00037	c3		 ret	 0
PyImport_GetModuleDict ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BE@ONHJNLMD@?$CD?5cleanup?5builtins?6?$AA@ ; `string'
PUBLIC	??_C@_0P@GCPPEJFP@?$CD?5cleanup?5sys?6?$AA@	; `string'
PUBLIC	??_C@_0BB@KKCCGANJ@?$CD?5cleanup?$FL2?$FN?5?$CFU?6?$AA@ ; `string'
PUBLIC	??_C@_0BB@JLMKHKEE@?$CD?5cleanup?$FL1?$FN?5?$CFU?6?$AA@ ; `string'
PUBLIC	??_C@_0BE@PGJOFIFJ@?$CD?5cleanup?5__main__?6?$AA@ ; `string'
PUBLIC	??_C@_08EMKMIFM@__main__?$AA@			; `string'
PUBLIC	??_C@_0BC@BONAFDFG@?$CD?5restore?5sys?4?$CFs?6?$AA@ ; `string'
PUBLIC	??_C@_0BA@DLJIFAE@?$CD?5clear?5sys?4?$CFs?6?$AA@ ; `string'
PUBLIC	??_C@_03PIADFGHL@sys?$AA@			; `string'
PUBLIC	??_C@_01IDAFKMJL@_?$AA@				; `string'
PUBLIC	??_C@_0BE@DDAKLNAC@?$CD?5clear?5builtins?4_?6?$AA@ ; `string'
PUBLIC	??_C@_08OCOMCJAJ@builtins?$AA@			; `string'
PUBLIC	PyImport_Cleanup
EXTRN	PyDict_Clear:PROC
EXTRN	PyDict_SetItem:PROC
EXTRN	PySys_FormatStderr:PROC
EXTRN	PyUnicode_CompareWithASCIIString:PROC
EXTRN	PyDict_Next:PROC
EXTRN	_PyModule_Clear:PROC
EXTRN	PyDict_SetItemString:PROC
EXTRN	PyModule_GetDict:PROC
EXTRN	PyType_IsSubtype:PROC
EXTRN	PyModule_Type:BYTE
EXTRN	PyDict_GetItemString:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyImport_Cleanup DD imagerel $LN50
	DD	imagerel $LN50+1429
	DD	imagerel $unwind$PyImport_Cleanup
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyImport_Cleanup DD 010401H
	DD	0e204H
xdata	ENDS
;	COMDAT ??_C@_0BE@ONHJNLMD@?$CD?5cleanup?5builtins?6?$AA@
CONST	SEGMENT
??_C@_0BE@ONHJNLMD@?$CD?5cleanup?5builtins?6?$AA@ DB '# cleanup builtins', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@GCPPEJFP@?$CD?5cleanup?5sys?6?$AA@
CONST	SEGMENT
??_C@_0P@GCPPEJFP@?$CD?5cleanup?5sys?6?$AA@ DB '# cleanup sys', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@KKCCGANJ@?$CD?5cleanup?$FL2?$FN?5?$CFU?6?$AA@
CONST	SEGMENT
??_C@_0BB@KKCCGANJ@?$CD?5cleanup?$FL2?$FN?5?$CFU?6?$AA@ DB '# cleanup[2] '
	DB	'%U', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@JLMKHKEE@?$CD?5cleanup?$FL1?$FN?5?$CFU?6?$AA@
CONST	SEGMENT
??_C@_0BB@JLMKHKEE@?$CD?5cleanup?$FL1?$FN?5?$CFU?6?$AA@ DB '# cleanup[1] '
	DB	'%U', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@PGJOFIFJ@?$CD?5cleanup?5__main__?6?$AA@
CONST	SEGMENT
??_C@_0BE@PGJOFIFJ@?$CD?5cleanup?5__main__?6?$AA@ DB '# cleanup __main__', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_08EMKMIFM@__main__?$AA@
CONST	SEGMENT
??_C@_08EMKMIFM@__main__?$AA@ DB '__main__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@BONAFDFG@?$CD?5restore?5sys?4?$CFs?6?$AA@
CONST	SEGMENT
??_C@_0BC@BONAFDFG@?$CD?5restore?5sys?4?$CFs?6?$AA@ DB '# restore sys.%s', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@DLJIFAE@?$CD?5clear?5sys?4?$CFs?6?$AA@
CONST	SEGMENT
??_C@_0BA@DLJIFAE@?$CD?5clear?5sys?4?$CFs?6?$AA@ DB '# clear sys.%s', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_03PIADFGHL@sys?$AA@
CONST	SEGMENT
??_C@_03PIADFGHL@sys?$AA@ DB 'sys', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01IDAFKMJL@_?$AA@
CONST	SEGMENT
??_C@_01IDAFKMJL@_?$AA@ DB '_', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@DDAKLNAC@?$CD?5clear?5builtins?4_?6?$AA@
CONST	SEGMENT
??_C@_0BE@DDAKLNAC@?$CD?5clear?5builtins?4_?6?$AA@ DB '# clear builtins._'
	DB	0aH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_08OCOMCJAJ@builtins?$AA@
CONST	SEGMENT
??_C@_08OCOMCJAJ@builtins?$AA@ DB 'builtins', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyImport_Cleanup
_TEXT	SEGMENT
value$ = 32
dict$ = 40
key$ = 48
interp$ = 56
modules$ = 64
ndone$ = 72
pos$ = 80
p$121964 = 88
v$121965 = 96
PyImport_Cleanup PROC					; COMDAT

; 299  : {

$LN50:
  00000	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 300  :     Py_ssize_t pos, ndone;
; 301  :     PyObject *key, *value, *dict;
; 302  :     PyInterpreterState *interp = PyThreadState_GET()->interp;

  00004	e8 00 00 00 00	 call	 PyThreadState_Get
  00009	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0000d	48 89 44 24 38	 mov	 QWORD PTR interp$[rsp], rax

; 303  :     PyObject *modules = interp->modules;

  00012	48 8b 44 24 38	 mov	 rax, QWORD PTR interp$[rsp]
  00017	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0001b	48 89 44 24 40	 mov	 QWORD PTR modules$[rsp], rax

; 304  : 
; 305  :     if (modules == NULL)

  00020	48 83 7c 24 40
	00		 cmp	 QWORD PTR modules$[rsp], 0
  00026	75 05		 jne	 SHORT $LN42@PyImport_C

; 306  :         return; /* Already done */

  00028	e9 63 05 00 00	 jmp	 $LN43@PyImport_C
$LN42@PyImport_C:

; 307  : 
; 308  :     /* Delete some special variables first.  These are common
; 309  :        places where user values hide and people complain when their
; 310  :        destructors fail.  Since the modules containing them are
; 311  :        deleted *last* of all, they would come too late in the normal
; 312  :        destruction order.  Sigh. */
; 313  : 
; 314  :     value = PyDict_GetItemString(modules, "builtins");

  0002d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08OCOMCJAJ@builtins?$AA@
  00034	48 8b 4c 24 40	 mov	 rcx, QWORD PTR modules$[rsp]
  00039	e8 00 00 00 00	 call	 PyDict_GetItemString
  0003e	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 315  :     if (value != NULL && PyModule_Check(value)) {

  00043	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  00049	74 67		 je	 SHORT $LN41@PyImport_C
  0004b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyModule_Type
  00052	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  00057	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0005b	74 19		 je	 SHORT $LN40@PyImport_C
  0005d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyModule_Type
  00064	48 8b 44 24 20	 mov	 rax, QWORD PTR value$[rsp]
  00069	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  0006d	e8 00 00 00 00	 call	 PyType_IsSubtype
  00072	85 c0		 test	 eax, eax
  00074	74 3c		 je	 SHORT $LN41@PyImport_C
$LN40@PyImport_C:

; 316  :         dict = PyModule_GetDict(value);

  00076	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  0007b	e8 00 00 00 00	 call	 PyModule_GetDict
  00080	48 89 44 24 28	 mov	 QWORD PTR dict$[rsp], rax

; 317  :         if (Py_VerboseFlag)

  00085	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR Py_VerboseFlag, 0
  0008c	74 0c		 je	 SHORT $LN39@PyImport_C

; 318  :             PySys_WriteStderr("# clear builtins._\n");

  0008e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@DDAKLNAC@?$CD?5clear?5builtins?4_?6?$AA@
  00095	e8 00 00 00 00	 call	 PySys_WriteStderr
$LN39@PyImport_C:

; 319  :         PyDict_SetItemString(dict, "_", Py_None);

  0009a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:_Py_NoneStruct
  000a1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01IDAFKMJL@_?$AA@
  000a8	48 8b 4c 24 28	 mov	 rcx, QWORD PTR dict$[rsp]
  000ad	e8 00 00 00 00	 call	 PyDict_SetItemString
$LN41@PyImport_C:

; 320  :     }
; 321  :     value = PyDict_GetItemString(modules, "sys");

  000b2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03PIADFGHL@sys?$AA@
  000b9	48 8b 4c 24 40	 mov	 rcx, QWORD PTR modules$[rsp]
  000be	e8 00 00 00 00	 call	 PyDict_GetItemString
  000c3	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 322  :     if (value != NULL && PyModule_Check(value)) {

  000c8	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  000ce	0f 84 26 01 00
	00		 je	 $LN38@PyImport_C
  000d4	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyModule_Type
  000db	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  000e0	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  000e4	74 1d		 je	 SHORT $LN37@PyImport_C
  000e6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyModule_Type
  000ed	48 8b 44 24 20	 mov	 rax, QWORD PTR value$[rsp]
  000f2	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  000f6	e8 00 00 00 00	 call	 PyType_IsSubtype
  000fb	85 c0		 test	 eax, eax
  000fd	0f 84 f7 00 00
	00		 je	 $LN38@PyImport_C
$LN37@PyImport_C:

; 323  :         char **p;
; 324  :         PyObject *v;
; 325  :         dict = PyModule_GetDict(value);

  00103	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  00108	e8 00 00 00 00	 call	 PyModule_GetDict
  0010d	48 89 44 24 28	 mov	 QWORD PTR dict$[rsp], rax

; 326  :         for (p = sys_deletes; *p != NULL; p++) {

  00112	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:sys_deletes
  00119	48 89 44 24 58	 mov	 QWORD PTR p$121964[rsp], rax
  0011e	eb 0e		 jmp	 SHORT $LN36@PyImport_C
$LN35@PyImport_C:
  00120	48 8b 44 24 58	 mov	 rax, QWORD PTR p$121964[rsp]
  00125	48 83 c0 08	 add	 rax, 8
  00129	48 89 44 24 58	 mov	 QWORD PTR p$121964[rsp], rax
$LN36@PyImport_C:
  0012e	48 8b 44 24 58	 mov	 rax, QWORD PTR p$121964[rsp]
  00133	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00137	74 38		 je	 SHORT $LN34@PyImport_C

; 327  :             if (Py_VerboseFlag)

  00139	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR Py_VerboseFlag, 0
  00140	74 14		 je	 SHORT $LN33@PyImport_C

; 328  :                 PySys_WriteStderr("# clear sys.%s\n", *p);

  00142	48 8b 44 24 58	 mov	 rax, QWORD PTR p$121964[rsp]
  00147	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  0014a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@DLJIFAE@?$CD?5clear?5sys?4?$CFs?6?$AA@
  00151	e8 00 00 00 00	 call	 PySys_WriteStderr
$LN33@PyImport_C:

; 329  :             PyDict_SetItemString(dict, *p, Py_None);

  00156	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:_Py_NoneStruct
  0015d	48 8b 44 24 58	 mov	 rax, QWORD PTR p$121964[rsp]
  00162	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00165	48 8b 4c 24 28	 mov	 rcx, QWORD PTR dict$[rsp]
  0016a	e8 00 00 00 00	 call	 PyDict_SetItemString

; 330  :         }

  0016f	eb af		 jmp	 SHORT $LN35@PyImport_C
$LN34@PyImport_C:

; 331  :         for (p = sys_files; *p != NULL; p+=2) {

  00171	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:sys_files
  00178	48 89 44 24 58	 mov	 QWORD PTR p$121964[rsp], rax
  0017d	eb 0e		 jmp	 SHORT $LN32@PyImport_C
$LN31@PyImport_C:
  0017f	48 8b 44 24 58	 mov	 rax, QWORD PTR p$121964[rsp]
  00184	48 83 c0 10	 add	 rax, 16
  00188	48 89 44 24 58	 mov	 QWORD PTR p$121964[rsp], rax
$LN32@PyImport_C:
  0018d	48 8b 44 24 58	 mov	 rax, QWORD PTR p$121964[rsp]
  00192	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00196	74 62		 je	 SHORT $LN30@PyImport_C

; 332  :             if (Py_VerboseFlag)

  00198	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR Py_VerboseFlag, 0
  0019f	74 14		 je	 SHORT $LN29@PyImport_C

; 333  :                 PySys_WriteStderr("# restore sys.%s\n", *p);

  001a1	48 8b 44 24 58	 mov	 rax, QWORD PTR p$121964[rsp]
  001a6	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  001a9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@BONAFDFG@?$CD?5restore?5sys?4?$CFs?6?$AA@
  001b0	e8 00 00 00 00	 call	 PySys_WriteStderr
$LN29@PyImport_C:

; 334  :             v = PyDict_GetItemString(dict, *(p+1));

  001b5	48 8b 44 24 58	 mov	 rax, QWORD PTR p$121964[rsp]
  001ba	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  001be	48 8b 4c 24 28	 mov	 rcx, QWORD PTR dict$[rsp]
  001c3	e8 00 00 00 00	 call	 PyDict_GetItemString
  001c8	48 89 44 24 60	 mov	 QWORD PTR v$121965[rsp], rax

; 335  :             if (v == NULL)

  001cd	48 83 7c 24 60
	00		 cmp	 QWORD PTR v$121965[rsp], 0
  001d3	75 0c		 jne	 SHORT $LN28@PyImport_C

; 336  :                 v = Py_None;

  001d5	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  001dc	48 89 44 24 60	 mov	 QWORD PTR v$121965[rsp], rax
$LN28@PyImport_C:

; 337  :             PyDict_SetItemString(dict, *p, v);

  001e1	4c 8b 44 24 60	 mov	 r8, QWORD PTR v$121965[rsp]
  001e6	48 8b 44 24 58	 mov	 rax, QWORD PTR p$121964[rsp]
  001eb	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  001ee	48 8b 4c 24 28	 mov	 rcx, QWORD PTR dict$[rsp]
  001f3	e8 00 00 00 00	 call	 PyDict_SetItemString

; 338  :         }

  001f8	eb 85		 jmp	 SHORT $LN31@PyImport_C
$LN30@PyImport_C:
$LN38@PyImport_C:

; 339  :     }
; 340  : 
; 341  :     /* First, delete __main__ */
; 342  :     value = PyDict_GetItemString(modules, "__main__");

  001fa	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08EMKMIFM@__main__?$AA@
  00201	48 8b 4c 24 40	 mov	 rcx, QWORD PTR modules$[rsp]
  00206	e8 00 00 00 00	 call	 PyDict_GetItemString
  0020b	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 343  :     if (value != NULL && PyModule_Check(value)) {

  00210	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  00216	74 62		 je	 SHORT $LN27@PyImport_C
  00218	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyModule_Type
  0021f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  00224	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00228	74 19		 je	 SHORT $LN26@PyImport_C
  0022a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyModule_Type
  00231	48 8b 44 24 20	 mov	 rax, QWORD PTR value$[rsp]
  00236	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  0023a	e8 00 00 00 00	 call	 PyType_IsSubtype
  0023f	85 c0		 test	 eax, eax
  00241	74 37		 je	 SHORT $LN27@PyImport_C
$LN26@PyImport_C:

; 344  :         if (Py_VerboseFlag)

  00243	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR Py_VerboseFlag, 0
  0024a	74 0c		 je	 SHORT $LN25@PyImport_C

; 345  :             PySys_WriteStderr("# cleanup __main__\n");

  0024c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@PGJOFIFJ@?$CD?5cleanup?5__main__?6?$AA@
  00253	e8 00 00 00 00	 call	 PySys_WriteStderr
$LN25@PyImport_C:

; 346  :         _PyModule_Clear(value);

  00258	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  0025d	e8 00 00 00 00	 call	 _PyModule_Clear

; 347  :         PyDict_SetItemString(modules, "__main__", Py_None);

  00262	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:_Py_NoneStruct
  00269	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08EMKMIFM@__main__?$AA@
  00270	48 8b 4c 24 40	 mov	 rcx, QWORD PTR modules$[rsp]
  00275	e8 00 00 00 00	 call	 PyDict_SetItemString
$LN27@PyImport_C:
$LN24@PyImport_C:

; 348  :     }
; 349  : 
; 350  :     /* The special treatment of "builtins" here is because even
; 351  :        when it's not referenced as a module, its dictionary is
; 352  :        referenced by almost every module's __builtins__.  Since
; 353  :        deleting a module clears its dictionary (even if there are
; 354  :        references left to it), we need to delete the "builtins"
; 355  :        module last.  Likewise, we don't delete sys until the very
; 356  :        end because it is implicitly referenced (e.g. by print).
; 357  : 
; 358  :        Also note that we 'delete' modules by replacing their entry
; 359  :        in the modules dict with None, rather than really deleting
; 360  :        them; this avoids a rehash of the modules dictionary and
; 361  :        also marks them as "non existent" so they won't be
; 362  :        re-imported. */
; 363  : 
; 364  :     /* Next, repeatedly delete modules with a reference count of
; 365  :        one (skipping builtins and sys) and delete them */
; 366  :     do {
; 367  :         ndone = 0;

  0027a	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR ndone$[rsp], 0

; 368  :         pos = 0;

  00283	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR pos$[rsp], 0
$LN47@PyImport_C:
$LN46@PyImport_C:
$LN45@PyImport_C:
$LN21@PyImport_C:

; 369  :         while (PyDict_Next(modules, &pos, &key, &value)) {

  0028c	4c 8d 4c 24 20	 lea	 r9, QWORD PTR value$[rsp]
  00291	4c 8d 44 24 30	 lea	 r8, QWORD PTR key$[rsp]
  00296	48 8d 54 24 50	 lea	 rdx, QWORD PTR pos$[rsp]
  0029b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR modules$[rsp]
  002a0	e8 00 00 00 00	 call	 PyDict_Next
  002a5	85 c0		 test	 eax, eax
  002a7	0f 84 d5 00 00
	00		 je	 $LN20@PyImport_C

; 370  :             if (value->ob_refcnt != 1)

  002ad	48 8b 44 24 20	 mov	 rax, QWORD PTR value$[rsp]
  002b2	48 83 78 50 01	 cmp	 QWORD PTR [rax+80], 1
  002b7	74 02		 je	 SHORT $LN19@PyImport_C

; 371  :                 continue;

  002b9	eb d1		 jmp	 SHORT $LN21@PyImport_C
$LN19@PyImport_C:

; 372  :             if (PyUnicode_Check(key) && PyModule_Check(value)) {

  002bb	48 8b 44 24 30	 mov	 rax, QWORD PTR key$[rsp]
  002c0	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  002c4	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  002ca	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  002cf	85 c0		 test	 eax, eax
  002d1	0f 84 a6 00 00
	00		 je	 $LN18@PyImport_C
  002d7	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyModule_Type
  002de	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  002e3	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  002e7	74 19		 je	 SHORT $LN17@PyImport_C
  002e9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyModule_Type
  002f0	48 8b 44 24 20	 mov	 rax, QWORD PTR value$[rsp]
  002f5	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  002f9	e8 00 00 00 00	 call	 PyType_IsSubtype
  002fe	85 c0		 test	 eax, eax
  00300	74 7b		 je	 SHORT $LN18@PyImport_C
$LN17@PyImport_C:

; 373  :                 if (PyUnicode_CompareWithASCIIString(key, "builtins") == 0)

  00302	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08OCOMCJAJ@builtins?$AA@
  00309	48 8b 4c 24 30	 mov	 rcx, QWORD PTR key$[rsp]
  0030e	e8 00 00 00 00	 call	 PyUnicode_CompareWithASCIIString
  00313	85 c0		 test	 eax, eax
  00315	75 05		 jne	 SHORT $LN16@PyImport_C

; 374  :                     continue;

  00317	e9 70 ff ff ff	 jmp	 $LN45@PyImport_C
$LN16@PyImport_C:

; 375  :                 if (PyUnicode_CompareWithASCIIString(key, "sys") == 0)

  0031c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03PIADFGHL@sys?$AA@
  00323	48 8b 4c 24 30	 mov	 rcx, QWORD PTR key$[rsp]
  00328	e8 00 00 00 00	 call	 PyUnicode_CompareWithASCIIString
  0032d	85 c0		 test	 eax, eax
  0032f	75 05		 jne	 SHORT $LN15@PyImport_C

; 376  :                     continue;

  00331	e9 56 ff ff ff	 jmp	 $LN46@PyImport_C
$LN15@PyImport_C:

; 377  :                 if (Py_VerboseFlag)

  00336	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR Py_VerboseFlag, 0
  0033d	74 11		 je	 SHORT $LN14@PyImport_C

; 378  :                     PySys_FormatStderr(
; 379  :                         "# cleanup[1] %U\n", key);

  0033f	48 8b 54 24 30	 mov	 rdx, QWORD PTR key$[rsp]
  00344	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@JLMKHKEE@?$CD?5cleanup?$FL1?$FN?5?$CFU?6?$AA@
  0034b	e8 00 00 00 00	 call	 PySys_FormatStderr
$LN14@PyImport_C:

; 380  :                 _PyModule_Clear(value);

  00350	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  00355	e8 00 00 00 00	 call	 _PyModule_Clear

; 381  :                 PyDict_SetItem(modules, key, Py_None);

  0035a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:_Py_NoneStruct
  00361	48 8b 54 24 30	 mov	 rdx, QWORD PTR key$[rsp]
  00366	48 8b 4c 24 40	 mov	 rcx, QWORD PTR modules$[rsp]
  0036b	e8 00 00 00 00	 call	 PyDict_SetItem

; 382  :                 ndone++;

  00370	48 8b 44 24 48	 mov	 rax, QWORD PTR ndone$[rsp]
  00375	48 ff c0	 inc	 rax
  00378	48 89 44 24 48	 mov	 QWORD PTR ndone$[rsp], rax
$LN18@PyImport_C:

; 383  :             }
; 384  :         }

  0037d	e9 0a ff ff ff	 jmp	 $LN47@PyImport_C
$LN20@PyImport_C:

; 385  :     } while (ndone > 0);

  00382	48 83 7c 24 48
	00		 cmp	 QWORD PTR ndone$[rsp], 0
  00388	0f 8f ec fe ff
	ff		 jg	 $LN24@PyImport_C

; 386  : 
; 387  :     /* Next, delete all modules (still skipping builtins and sys) */
; 388  :     pos = 0;

  0038e	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR pos$[rsp], 0
$LN49@PyImport_C:
$LN48@PyImport_C:
$LN13@PyImport_C:

; 389  :     while (PyDict_Next(modules, &pos, &key, &value)) {

  00397	4c 8d 4c 24 20	 lea	 r9, QWORD PTR value$[rsp]
  0039c	4c 8d 44 24 30	 lea	 r8, QWORD PTR key$[rsp]
  003a1	48 8d 54 24 50	 lea	 rdx, QWORD PTR pos$[rsp]
  003a6	48 8b 4c 24 40	 mov	 rcx, QWORD PTR modules$[rsp]
  003ab	e8 00 00 00 00	 call	 PyDict_Next
  003b0	85 c0		 test	 eax, eax
  003b2	0f 84 b7 00 00
	00		 je	 $LN12@PyImport_C

; 390  :         if (PyUnicode_Check(key) && PyModule_Check(value)) {

  003b8	48 8b 44 24 30	 mov	 rax, QWORD PTR key$[rsp]
  003bd	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  003c1	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  003c7	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  003cc	85 c0		 test	 eax, eax
  003ce	0f 84 96 00 00
	00		 je	 $LN11@PyImport_C
  003d4	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyModule_Type
  003db	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  003e0	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  003e4	74 19		 je	 SHORT $LN10@PyImport_C
  003e6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyModule_Type
  003ed	48 8b 44 24 20	 mov	 rax, QWORD PTR value$[rsp]
  003f2	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  003f6	e8 00 00 00 00	 call	 PyType_IsSubtype
  003fb	85 c0		 test	 eax, eax
  003fd	74 6b		 je	 SHORT $LN11@PyImport_C
$LN10@PyImport_C:

; 391  :             if (PyUnicode_CompareWithASCIIString(key, "builtins") == 0)

  003ff	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08OCOMCJAJ@builtins?$AA@
  00406	48 8b 4c 24 30	 mov	 rcx, QWORD PTR key$[rsp]
  0040b	e8 00 00 00 00	 call	 PyUnicode_CompareWithASCIIString
  00410	85 c0		 test	 eax, eax
  00412	75 02		 jne	 SHORT $LN9@PyImport_C

; 392  :                 continue;

  00414	eb 81		 jmp	 SHORT $LN13@PyImport_C
$LN9@PyImport_C:

; 393  :             if (PyUnicode_CompareWithASCIIString(key, "sys") == 0)

  00416	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03PIADFGHL@sys?$AA@
  0041d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR key$[rsp]
  00422	e8 00 00 00 00	 call	 PyUnicode_CompareWithASCIIString
  00427	85 c0		 test	 eax, eax
  00429	75 05		 jne	 SHORT $LN8@PyImport_C

; 394  :                 continue;

  0042b	e9 67 ff ff ff	 jmp	 $LN48@PyImport_C
$LN8@PyImport_C:

; 395  :             if (Py_VerboseFlag)

  00430	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR Py_VerboseFlag, 0
  00437	74 11		 je	 SHORT $LN7@PyImport_C

; 396  :                 PySys_FormatStderr("# cleanup[2] %U\n", key);

  00439	48 8b 54 24 30	 mov	 rdx, QWORD PTR key$[rsp]
  0043e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@KKCCGANJ@?$CD?5cleanup?$FL2?$FN?5?$CFU?6?$AA@
  00445	e8 00 00 00 00	 call	 PySys_FormatStderr
$LN7@PyImport_C:

; 397  :             _PyModule_Clear(value);

  0044a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  0044f	e8 00 00 00 00	 call	 _PyModule_Clear

; 398  :             PyDict_SetItem(modules, key, Py_None);

  00454	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:_Py_NoneStruct
  0045b	48 8b 54 24 30	 mov	 rdx, QWORD PTR key$[rsp]
  00460	48 8b 4c 24 40	 mov	 rcx, QWORD PTR modules$[rsp]
  00465	e8 00 00 00 00	 call	 PyDict_SetItem
$LN11@PyImport_C:

; 399  :         }
; 400  :     }

  0046a	e9 28 ff ff ff	 jmp	 $LN49@PyImport_C
$LN12@PyImport_C:

; 401  : 
; 402  :     /* Next, delete sys and builtins (in that order) */
; 403  :     value = PyDict_GetItemString(modules, "sys");

  0046f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03PIADFGHL@sys?$AA@
  00476	48 8b 4c 24 40	 mov	 rcx, QWORD PTR modules$[rsp]
  0047b	e8 00 00 00 00	 call	 PyDict_GetItemString
  00480	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 404  :     if (value != NULL && PyModule_Check(value)) {

  00485	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  0048b	74 62		 je	 SHORT $LN6@PyImport_C
  0048d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyModule_Type
  00494	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  00499	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0049d	74 19		 je	 SHORT $LN5@PyImport_C
  0049f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyModule_Type
  004a6	48 8b 44 24 20	 mov	 rax, QWORD PTR value$[rsp]
  004ab	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  004af	e8 00 00 00 00	 call	 PyType_IsSubtype
  004b4	85 c0		 test	 eax, eax
  004b6	74 37		 je	 SHORT $LN6@PyImport_C
$LN5@PyImport_C:

; 405  :         if (Py_VerboseFlag)

  004b8	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR Py_VerboseFlag, 0
  004bf	74 0c		 je	 SHORT $LN4@PyImport_C

; 406  :             PySys_WriteStderr("# cleanup sys\n");

  004c1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@GCPPEJFP@?$CD?5cleanup?5sys?6?$AA@
  004c8	e8 00 00 00 00	 call	 PySys_WriteStderr
$LN4@PyImport_C:

; 407  :         _PyModule_Clear(value);

  004cd	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  004d2	e8 00 00 00 00	 call	 _PyModule_Clear

; 408  :         PyDict_SetItemString(modules, "sys", Py_None);

  004d7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:_Py_NoneStruct
  004de	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03PIADFGHL@sys?$AA@
  004e5	48 8b 4c 24 40	 mov	 rcx, QWORD PTR modules$[rsp]
  004ea	e8 00 00 00 00	 call	 PyDict_SetItemString
$LN6@PyImport_C:

; 409  :     }
; 410  :     value = PyDict_GetItemString(modules, "builtins");

  004ef	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08OCOMCJAJ@builtins?$AA@
  004f6	48 8b 4c 24 40	 mov	 rcx, QWORD PTR modules$[rsp]
  004fb	e8 00 00 00 00	 call	 PyDict_GetItemString
  00500	48 89 44 24 20	 mov	 QWORD PTR value$[rsp], rax

; 411  :     if (value != NULL && PyModule_Check(value)) {

  00505	48 83 7c 24 20
	00		 cmp	 QWORD PTR value$[rsp], 0
  0050b	74 62		 je	 SHORT $LN3@PyImport_C
  0050d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyModule_Type
  00514	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  00519	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0051d	74 19		 je	 SHORT $LN2@PyImport_C
  0051f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyModule_Type
  00526	48 8b 44 24 20	 mov	 rax, QWORD PTR value$[rsp]
  0052b	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  0052f	e8 00 00 00 00	 call	 PyType_IsSubtype
  00534	85 c0		 test	 eax, eax
  00536	74 37		 je	 SHORT $LN3@PyImport_C
$LN2@PyImport_C:

; 412  :         if (Py_VerboseFlag)

  00538	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR Py_VerboseFlag, 0
  0053f	74 0c		 je	 SHORT $LN1@PyImport_C

; 413  :             PySys_WriteStderr("# cleanup builtins\n");

  00541	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@ONHJNLMD@?$CD?5cleanup?5builtins?6?$AA@
  00548	e8 00 00 00 00	 call	 PySys_WriteStderr
$LN1@PyImport_C:

; 414  :         _PyModule_Clear(value);

  0054d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR value$[rsp]
  00552	e8 00 00 00 00	 call	 _PyModule_Clear

; 415  :         PyDict_SetItemString(modules, "builtins", Py_None);

  00557	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:_Py_NoneStruct
  0055e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08OCOMCJAJ@builtins?$AA@
  00565	48 8b 4c 24 40	 mov	 rcx, QWORD PTR modules$[rsp]
  0056a	e8 00 00 00 00	 call	 PyDict_SetItemString
$LN3@PyImport_C:

; 416  :     }
; 417  : 
; 418  :     /* Finally, clear and delete the modules directory */
; 419  :     PyDict_Clear(modules);

  0056f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR modules$[rsp]
  00574	e8 00 00 00 00	 call	 PyDict_Clear

; 420  :     interp->modules = NULL;

  00579	48 8b 44 24 38	 mov	 rax, QWORD PTR interp$[rsp]
  0057e	48 c7 40 10 00
	00 00 00	 mov	 QWORD PTR [rax+16], 0

; 421  :     Py_DECREF(modules);

  00586	48 8b 4c 24 40	 mov	 rcx, QWORD PTR modules$[rsp]
  0058b	e8 00 00 00 00	 call	 _Py_DecRef
$LN43@PyImport_C:

; 422  : }

  00590	48 83 c4 78	 add	 rsp, 120		; 00000078H
  00594	c3		 ret	 0
PyImport_Cleanup ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BC@PIDIPD@_RAW_MAGIC_NUMBER?$AA@		; `string'
PUBLIC	PyImport_GetMagicNumber
EXTRN	PyLong_AsLong:PROC
EXTRN	PyObject_GetAttrString:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyImport_GetMagicNumber DD imagerel $LN4
	DD	imagerel $LN4+92
	DD	imagerel $unwind$PyImport_GetMagicNumber
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyImport_GetMagicNumber DD 010401H
	DD	08204H
xdata	ENDS
;	COMDAT ??_C@_0BC@PIDIPD@_RAW_MAGIC_NUMBER?$AA@
CONST	SEGMENT
??_C@_0BC@PIDIPD@_RAW_MAGIC_NUMBER?$AA@ DB '_RAW_MAGIC_NUMBER', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyImport_GetMagicNumber
_TEXT	SEGMENT
res$ = 32
pyc_magic$ = 40
interp$ = 48
PyImport_GetMagicNumber PROC				; COMDAT

; 429  : {

$LN4:
  00000	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 430  :     long res;
; 431  :     PyInterpreterState *interp = PyThreadState_Get()->interp;

  00004	e8 00 00 00 00	 call	 PyThreadState_Get
  00009	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0000d	48 89 44 24 30	 mov	 QWORD PTR interp$[rsp], rax

; 432  :     PyObject *pyc_magic = PyObject_GetAttrString(interp->importlib,
; 433  :                                                  "_RAW_MAGIC_NUMBER");

  00012	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@PIDIPD@_RAW_MAGIC_NUMBER?$AA@
  00019	48 8b 44 24 30	 mov	 rax, QWORD PTR interp$[rsp]
  0001e	48 8b 48 30	 mov	 rcx, QWORD PTR [rax+48]
  00022	e8 00 00 00 00	 call	 PyObject_GetAttrString
  00027	48 89 44 24 28	 mov	 QWORD PTR pyc_magic$[rsp], rax

; 434  :     if (pyc_magic == NULL)

  0002c	48 83 7c 24 28
	00		 cmp	 QWORD PTR pyc_magic$[rsp], 0
  00032	75 07		 jne	 SHORT $LN1@PyImport_G@2

; 435  :         return -1;

  00034	b8 ff ff ff ff	 mov	 eax, -1
  00039	eb 1c		 jmp	 SHORT $LN2@PyImport_G@2
$LN1@PyImport_G@2:

; 436  :     res = PyLong_AsLong(pyc_magic);

  0003b	48 8b 4c 24 28	 mov	 rcx, QWORD PTR pyc_magic$[rsp]
  00040	e8 00 00 00 00	 call	 PyLong_AsLong
  00045	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 437  :     Py_DECREF(pyc_magic);

  00049	48 8b 4c 24 28	 mov	 rcx, QWORD PTR pyc_magic$[rsp]
  0004e	e8 00 00 00 00	 call	 _Py_DecRef

; 438  :     return res;

  00053	8b 44 24 20	 mov	 eax, DWORD PTR res$[rsp]
$LN2@PyImport_G@2:

; 439  : }

  00057	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0005b	c3		 ret	 0
PyImport_GetMagicNumber ENDP
_TEXT	ENDS
PUBLIC	PyImport_GetMagicTag
EXTRN	_PySys_ImplCacheTag:QWORD
; Function compile flags: /Odtp
;	COMDAT PyImport_GetMagicTag
_TEXT	SEGMENT
PyImport_GetMagicTag PROC				; COMDAT

; 447  :     return _PySys_ImplCacheTag;

  00000	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PySys_ImplCacheTag

; 448  : }

  00007	c3		 ret	 0
PyImport_GetMagicTag ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BP@KCIHGADO@_PyImport_FixupExtensionObject?$AA@ ; `string'
PUBLIC	_PyImport_FixupExtensionObject
EXTRN	PyDict_Copy:PROC
EXTRN	PyDict_DelItem:PROC
EXTRN	_PyState_AddModule:PROC
EXTRN	PyModule_GetDef:PROC
EXTRN	_PyErr_BadInternalCall:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyImport_FixupExtensionObject DD imagerel $LN18
	DD	imagerel $LN18+506
	DD	imagerel $unwind$_PyImport_FixupExtensionObject
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyImport_FixupExtensionObject DD 011301H
	DD	0a213H
xdata	ENDS
;	COMDAT ??_C@_0BP@KCIHGADO@_PyImport_FixupExtensionObject?$AA@
CONST	SEGMENT
??_C@_0BP@KCIHGADO@_PyImport_FixupExtensionObject?$AA@ DB '_PyImport_Fixu'
	DB	'pExtensionObject', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PyImport_FixupExtensionObject
_TEXT	SEGMENT
dict$ = 48
modules$ = 56
def$ = 64
_py_tmp$122073 = 72
mod$ = 96
name$ = 104
filename$ = 112
_PyImport_FixupExtensionObject PROC			; COMDAT

; 470  : {

$LN18:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 471  :     PyObject *modules, *dict;
; 472  :     struct PyModuleDef *def;
; 473  :     if (extensions == NULL) {

  00013	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR extensions, 0
  0001b	75 20		 jne	 SHORT $LN15@PyImport_F@2

; 474  :         extensions = PyDict_New();

  0001d	e8 00 00 00 00	 call	 PyDict_New
  00022	48 89 05 00 00
	00 00		 mov	 QWORD PTR extensions, rax

; 475  :         if (extensions == NULL)

  00029	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR extensions, 0
  00031	75 0a		 jne	 SHORT $LN14@PyImport_F@2

; 476  :             return -1;

  00033	b8 ff ff ff ff	 mov	 eax, -1
  00038	e9 b8 01 00 00	 jmp	 $LN16@PyImport_F@2
$LN14@PyImport_F@2:
$LN15@PyImport_F@2:

; 477  :     }
; 478  :     if (mod == NULL || !PyModule_Check(mod)) {

  0003d	48 83 7c 24 60
	00		 cmp	 QWORD PTR mod$[rsp], 0
  00043	74 2b		 je	 SHORT $LN12@PyImport_F@2
  00045	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyModule_Type
  0004c	48 8b 4c 24 60	 mov	 rcx, QWORD PTR mod$[rsp]
  00051	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00055	74 34		 je	 SHORT $LN13@PyImport_F@2
  00057	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyModule_Type
  0005e	48 8b 44 24 60	 mov	 rax, QWORD PTR mod$[rsp]
  00063	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  00067	e8 00 00 00 00	 call	 PyType_IsSubtype
  0006c	85 c0		 test	 eax, eax
  0006e	75 1b		 jne	 SHORT $LN13@PyImport_F@2
$LN12@PyImport_F@2:

; 479  :         PyErr_BadInternalCall();

  00070	ba df 01 00 00	 mov	 edx, 479		; 000001dfH
  00075	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@FNMKEIOD@?4?4?2Python?2import?4c?$AA@
  0007c	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 480  :         return -1;

  00081	b8 ff ff ff ff	 mov	 eax, -1
  00086	e9 6a 01 00 00	 jmp	 $LN16@PyImport_F@2
$LN13@PyImport_F@2:

; 481  :     }
; 482  :     def = PyModule_GetDef(mod);

  0008b	48 8b 4c 24 60	 mov	 rcx, QWORD PTR mod$[rsp]
  00090	e8 00 00 00 00	 call	 PyModule_GetDef
  00095	48 89 44 24 40	 mov	 QWORD PTR def$[rsp], rax

; 483  :     if (!def) {

  0009a	48 83 7c 24 40
	00		 cmp	 QWORD PTR def$[rsp], 0
  000a0	75 1b		 jne	 SHORT $LN11@PyImport_F@2

; 484  :         PyErr_BadInternalCall();

  000a2	ba e4 01 00 00	 mov	 edx, 484		; 000001e4H
  000a7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@FNMKEIOD@?4?4?2Python?2import?4c?$AA@
  000ae	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 485  :         return -1;

  000b3	b8 ff ff ff ff	 mov	 eax, -1
  000b8	e9 38 01 00 00	 jmp	 $LN16@PyImport_F@2
$LN11@PyImport_F@2:

; 486  :     }
; 487  :     modules = PyImport_GetModuleDict();

  000bd	e8 00 00 00 00	 call	 PyImport_GetModuleDict
  000c2	48 89 44 24 38	 mov	 QWORD PTR modules$[rsp], rax

; 488  :     if (PyDict_SetItem(modules, name, mod) < 0)

  000c7	4c 8b 44 24 60	 mov	 r8, QWORD PTR mod$[rsp]
  000cc	48 8b 54 24 68	 mov	 rdx, QWORD PTR name$[rsp]
  000d1	48 8b 4c 24 38	 mov	 rcx, QWORD PTR modules$[rsp]
  000d6	e8 00 00 00 00	 call	 PyDict_SetItem
  000db	85 c0		 test	 eax, eax
  000dd	7d 0a		 jge	 SHORT $LN10@PyImport_F@2

; 489  :         return -1;

  000df	b8 ff ff ff ff	 mov	 eax, -1
  000e4	e9 0c 01 00 00	 jmp	 $LN16@PyImport_F@2
$LN10@PyImport_F@2:

; 490  :     if (_PyState_AddModule(mod, def) < 0) {

  000e9	48 8b 54 24 40	 mov	 rdx, QWORD PTR def$[rsp]
  000ee	48 8b 4c 24 60	 mov	 rcx, QWORD PTR mod$[rsp]
  000f3	e8 00 00 00 00	 call	 _PyState_AddModule
  000f8	85 c0		 test	 eax, eax
  000fa	7d 19		 jge	 SHORT $LN9@PyImport_F@2

; 491  :         PyDict_DelItem(modules, name);

  000fc	48 8b 54 24 68	 mov	 rdx, QWORD PTR name$[rsp]
  00101	48 8b 4c 24 38	 mov	 rcx, QWORD PTR modules$[rsp]
  00106	e8 00 00 00 00	 call	 PyDict_DelItem

; 492  :         return -1;

  0010b	b8 ff ff ff ff	 mov	 eax, -1
  00110	e9 e0 00 00 00	 jmp	 $LN16@PyImport_F@2
$LN9@PyImport_F@2:

; 493  :     }
; 494  :     if (def->m_size == -1) {

  00115	48 8b 44 24 40	 mov	 rax, QWORD PTR def$[rsp]
  0011a	48 83 b8 90 00
	00 00 ff	 cmp	 QWORD PTR [rax+144], -1
  00122	0f 85 b5 00 00
	00		 jne	 $LN8@PyImport_F@2

; 495  :         if (def->m_base.m_copy) {

  00128	48 8b 44 24 40	 mov	 rax, QWORD PTR def$[rsp]
  0012d	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  00132	74 65		 je	 SHORT $LN7@PyImport_F@2
$LN6@PyImport_F@2:

; 496  :             /* Somebody already imported the module,
; 497  :                likely under a different name.
; 498  :                XXX this should really not happen. */
; 499  :             Py_CLEAR(def->m_base.m_copy);

  00134	48 8b 44 24 40	 mov	 rax, QWORD PTR def$[rsp]
  00139	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  0013e	74 53		 je	 SHORT $LN3@PyImport_F@2
  00140	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00148	48 8b 44 24 40	 mov	 rax, QWORD PTR def$[rsp]
  0014d	4c 8b 48 70	 mov	 r9, QWORD PTR [rax+112]
  00151	41 b8 f3 01 00
	00		 mov	 r8d, 499		; 000001f3H
  00157	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@FNMKEIOD@?4?4?2Python?2import?4c?$AA@
  0015e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BP@KCIHGADO@_PyImport_FixupExtensionObject?$AA@
  00165	e8 00 00 00 00	 call	 _PyParallel_Guard
  0016a	85 c0		 test	 eax, eax
  0016c	75 25		 jne	 SHORT $LN3@PyImport_F@2
  0016e	48 8b 44 24 40	 mov	 rax, QWORD PTR def$[rsp]
  00173	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00177	48 89 44 24 48	 mov	 QWORD PTR _py_tmp$122073[rsp], rax
  0017c	48 8b 44 24 40	 mov	 rax, QWORD PTR def$[rsp]
  00181	48 c7 40 70 00
	00 00 00	 mov	 QWORD PTR [rax+112], 0
  00189	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _py_tmp$122073[rsp]
  0018e	e8 00 00 00 00	 call	 _Py_DecRef
$LN3@PyImport_F@2:
  00193	33 c0		 xor	 eax, eax
  00195	85 c0		 test	 eax, eax
  00197	75 9b		 jne	 SHORT $LN6@PyImport_F@2
$LN7@PyImport_F@2:

; 500  :         }
; 501  :         dict = PyModule_GetDict(mod);

  00199	48 8b 4c 24 60	 mov	 rcx, QWORD PTR mod$[rsp]
  0019e	e8 00 00 00 00	 call	 PyModule_GetDict
  001a3	48 89 44 24 30	 mov	 QWORD PTR dict$[rsp], rax

; 502  :         if (dict == NULL)

  001a8	48 83 7c 24 30
	00		 cmp	 QWORD PTR dict$[rsp], 0
  001ae	75 07		 jne	 SHORT $LN2@PyImport_F@2

; 503  :             return -1;

  001b0	b8 ff ff ff ff	 mov	 eax, -1
  001b5	eb 3e		 jmp	 SHORT $LN16@PyImport_F@2
$LN2@PyImport_F@2:

; 504  :         def->m_base.m_copy = PyDict_Copy(dict);

  001b7	48 8b 4c 24 30	 mov	 rcx, QWORD PTR dict$[rsp]
  001bc	e8 00 00 00 00	 call	 PyDict_Copy
  001c1	48 8b 4c 24 40	 mov	 rcx, QWORD PTR def$[rsp]
  001c6	48 89 41 70	 mov	 QWORD PTR [rcx+112], rax

; 505  :         if (def->m_base.m_copy == NULL)

  001ca	48 8b 44 24 40	 mov	 rax, QWORD PTR def$[rsp]
  001cf	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  001d4	75 07		 jne	 SHORT $LN1@PyImport_F@2

; 506  :             return -1;

  001d6	b8 ff ff ff ff	 mov	 eax, -1
  001db	eb 18		 jmp	 SHORT $LN16@PyImport_F@2
$LN1@PyImport_F@2:
$LN8@PyImport_F@2:

; 507  :     }
; 508  :     PyDict_SetItem(extensions, filename, (PyObject*)def);

  001dd	4c 8b 44 24 40	 mov	 r8, QWORD PTR def$[rsp]
  001e2	48 8b 54 24 70	 mov	 rdx, QWORD PTR filename$[rsp]
  001e7	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR extensions
  001ee	e8 00 00 00 00	 call	 PyDict_SetItem

; 509  :     return 0;

  001f3	33 c0		 xor	 eax, eax
$LN16@PyImport_F@2:

; 510  : }

  001f5	48 83 c4 58	 add	 rsp, 88			; 00000058H
  001f9	c3		 ret	 0
_PyImport_FixupExtensionObject ENDP
_TEXT	ENDS
PUBLIC	_PyImport_FixupBuiltin
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyImport_FixupBuiltin DD imagerel $LN4
	DD	imagerel $LN4+87
	DD	imagerel $unwind$_PyImport_FixupBuiltin
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyImport_FixupBuiltin DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _PyImport_FixupBuiltin
_TEXT	SEGMENT
res$ = 32
nameobj$ = 40
mod$ = 64
name$ = 72
_PyImport_FixupBuiltin PROC				; COMDAT

; 514  : {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 515  :     int res;
; 516  :     PyObject *nameobj;
; 517  :     nameobj = PyUnicode_InternFromString(name);

  0000e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR name$[rsp]
  00013	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  00018	48 89 44 24 28	 mov	 QWORD PTR nameobj$[rsp], rax

; 518  :     if (nameobj == NULL)

  0001d	48 83 7c 24 28
	00		 cmp	 QWORD PTR nameobj$[rsp], 0
  00023	75 07		 jne	 SHORT $LN1@PyImport_F@3

; 519  :         return -1;

  00025	b8 ff ff ff ff	 mov	 eax, -1
  0002a	eb 26		 jmp	 SHORT $LN2@PyImport_F@3
$LN1@PyImport_F@3:

; 520  :     res = _PyImport_FixupExtensionObject(mod, nameobj, nameobj);

  0002c	4c 8b 44 24 28	 mov	 r8, QWORD PTR nameobj$[rsp]
  00031	48 8b 54 24 28	 mov	 rdx, QWORD PTR nameobj$[rsp]
  00036	48 8b 4c 24 40	 mov	 rcx, QWORD PTR mod$[rsp]
  0003b	e8 00 00 00 00	 call	 _PyImport_FixupExtensionObject
  00040	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 521  :     Py_DECREF(nameobj);

  00044	48 8b 4c 24 28	 mov	 rcx, QWORD PTR nameobj$[rsp]
  00049	e8 00 00 00 00	 call	 _Py_DecRef

; 522  :     return res;

  0004e	8b 44 24 20	 mov	 eax, DWORD PTR res$[rsp]
$LN2@PyImport_F@3:

; 523  : }

  00052	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00056	c3		 ret	 0
_PyImport_FixupBuiltin ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CE@KMHPOANN@import?5?$CFU?5?$CD?5previously?5loaded?5?$CI?$CF@ ; `string'
PUBLIC	PyImport_AddModuleObject
PUBLIC	_PyImport_FindExtensionObject
EXTRN	PyDict_Update:PROC
EXTRN	PyDict_GetItem:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyImport_FindExtensionObject DD imagerel $LN16
	DD	imagerel $LN16+385
	DD	imagerel $unwind$_PyImport_FindExtensionObject
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyImport_FindExtensionObject DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_0CE@KMHPOANN@import?5?$CFU?5?$CD?5previously?5loaded?5?$CI?$CF@
CONST	SEGMENT
??_C@_0CE@KMHPOANN@import?5?$CFU?5?$CD?5previously?5loaded?5?$CI?$CF@ DB 'i'
	DB	'mport %U # previously loaded (%R)', 0aH, 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PyImport_FindExtensionObject
_TEXT	SEGMENT
mdict$ = 32
def$ = 40
mod$ = 48
name$ = 80
filename$ = 88
_PyImport_FindExtensionObject PROC			; COMDAT

; 527  : {

$LN16:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 528  :     PyObject *mod, *mdict;
; 529  :     PyModuleDef* def;
; 530  :     if (extensions == NULL)

  0000e	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR extensions, 0
  00016	75 07		 jne	 SHORT $LN13@PyImport_F@4

; 531  :         return NULL;

  00018	33 c0		 xor	 eax, eax
  0001a	e9 5d 01 00 00	 jmp	 $LN14@PyImport_F@4
$LN13@PyImport_F@4:

; 532  :     def = (PyModuleDef*)PyDict_GetItem(extensions, filename);

  0001f	48 8b 54 24 58	 mov	 rdx, QWORD PTR filename$[rsp]
  00024	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR extensions
  0002b	e8 00 00 00 00	 call	 PyDict_GetItem
  00030	48 89 44 24 28	 mov	 QWORD PTR def$[rsp], rax

; 533  :     if (def == NULL)

  00035	48 83 7c 24 28
	00		 cmp	 QWORD PTR def$[rsp], 0
  0003b	75 07		 jne	 SHORT $LN12@PyImport_F@4

; 534  :         return NULL;

  0003d	33 c0		 xor	 eax, eax
  0003f	e9 38 01 00 00	 jmp	 $LN14@PyImport_F@4
$LN12@PyImport_F@4:

; 535  :     if (def->m_size == -1) {

  00044	48 8b 44 24 28	 mov	 rax, QWORD PTR def$[rsp]
  00049	48 83 b8 90 00
	00 00 ff	 cmp	 QWORD PTR [rax+144], -1
  00051	75 6f		 jne	 SHORT $LN11@PyImport_F@4

; 536  :         /* Module does not support repeated initialization */
; 537  :         if (def->m_base.m_copy == NULL)

  00053	48 8b 44 24 28	 mov	 rax, QWORD PTR def$[rsp]
  00058	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  0005d	75 07		 jne	 SHORT $LN10@PyImport_F@4

; 538  :             return NULL;

  0005f	33 c0		 xor	 eax, eax
  00061	e9 16 01 00 00	 jmp	 $LN14@PyImport_F@4
$LN10@PyImport_F@4:

; 539  :         mod = PyImport_AddModuleObject(name);

  00066	48 8b 4c 24 50	 mov	 rcx, QWORD PTR name$[rsp]
  0006b	e8 00 00 00 00	 call	 PyImport_AddModuleObject
  00070	48 89 44 24 30	 mov	 QWORD PTR mod$[rsp], rax

; 540  :         if (mod == NULL)

  00075	48 83 7c 24 30
	00		 cmp	 QWORD PTR mod$[rsp], 0
  0007b	75 07		 jne	 SHORT $LN9@PyImport_F@4

; 541  :             return NULL;

  0007d	33 c0		 xor	 eax, eax
  0007f	e9 f8 00 00 00	 jmp	 $LN14@PyImport_F@4
$LN9@PyImport_F@4:

; 542  :         mdict = PyModule_GetDict(mod);

  00084	48 8b 4c 24 30	 mov	 rcx, QWORD PTR mod$[rsp]
  00089	e8 00 00 00 00	 call	 PyModule_GetDict
  0008e	48 89 44 24 20	 mov	 QWORD PTR mdict$[rsp], rax

; 543  :         if (mdict == NULL)

  00093	48 83 7c 24 20
	00		 cmp	 QWORD PTR mdict$[rsp], 0
  00099	75 07		 jne	 SHORT $LN8@PyImport_F@4

; 544  :             return NULL;

  0009b	33 c0		 xor	 eax, eax
  0009d	e9 da 00 00 00	 jmp	 $LN14@PyImport_F@4
$LN8@PyImport_F@4:

; 545  :         if (PyDict_Update(mdict, def->m_base.m_copy))

  000a2	48 8b 44 24 28	 mov	 rax, QWORD PTR def$[rsp]
  000a7	48 8b 50 70	 mov	 rdx, QWORD PTR [rax+112]
  000ab	48 8b 4c 24 20	 mov	 rcx, QWORD PTR mdict$[rsp]
  000b0	e8 00 00 00 00	 call	 PyDict_Update
  000b5	85 c0		 test	 eax, eax
  000b7	74 07		 je	 SHORT $LN7@PyImport_F@4

; 546  :             return NULL;

  000b9	33 c0		 xor	 eax, eax
  000bb	e9 bc 00 00 00	 jmp	 $LN14@PyImport_F@4
$LN7@PyImport_F@4:

; 547  :     }
; 548  :     else {

  000c0	eb 63		 jmp	 SHORT $LN6@PyImport_F@4
$LN11@PyImport_F@4:

; 549  :         if (def->m_base.m_init == NULL)

  000c2	48 8b 44 24 28	 mov	 rax, QWORD PTR def$[rsp]
  000c7	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  000cc	75 07		 jne	 SHORT $LN5@PyImport_F@4

; 550  :             return NULL;

  000ce	33 c0		 xor	 eax, eax
  000d0	e9 a7 00 00 00	 jmp	 $LN14@PyImport_F@4
$LN5@PyImport_F@4:

; 551  :         mod = def->m_base.m_init();

  000d5	48 8b 44 24 28	 mov	 rax, QWORD PTR def$[rsp]
  000da	ff 50 60	 call	 QWORD PTR [rax+96]
  000dd	48 89 44 24 30	 mov	 QWORD PTR mod$[rsp], rax

; 552  :         if (mod == NULL)

  000e2	48 83 7c 24 30
	00		 cmp	 QWORD PTR mod$[rsp], 0
  000e8	75 07		 jne	 SHORT $LN4@PyImport_F@4

; 553  :             return NULL;

  000ea	33 c0		 xor	 eax, eax
  000ec	e9 8b 00 00 00	 jmp	 $LN14@PyImport_F@4
$LN4@PyImport_F@4:

; 554  :         if (PyDict_SetItem(PyImport_GetModuleDict(), name, mod) == -1) {

  000f1	e8 00 00 00 00	 call	 PyImport_GetModuleDict
  000f6	4c 8b 44 24 30	 mov	 r8, QWORD PTR mod$[rsp]
  000fb	48 8b 54 24 50	 mov	 rdx, QWORD PTR name$[rsp]
  00100	48 8b c8	 mov	 rcx, rax
  00103	e8 00 00 00 00	 call	 PyDict_SetItem
  00108	83 f8 ff	 cmp	 eax, -1
  0010b	75 0e		 jne	 SHORT $LN3@PyImport_F@4

; 555  :             Py_DECREF(mod);

  0010d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR mod$[rsp]
  00112	e8 00 00 00 00	 call	 _Py_DecRef

; 556  :             return NULL;

  00117	33 c0		 xor	 eax, eax
  00119	eb 61		 jmp	 SHORT $LN14@PyImport_F@4
$LN3@PyImport_F@4:

; 557  :         }
; 558  :         Py_DECREF(mod);

  0011b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR mod$[rsp]
  00120	e8 00 00 00 00	 call	 _Py_DecRef
$LN6@PyImport_F@4:

; 559  :     }
; 560  :     if (_PyState_AddModule(mod, def) < 0) {

  00125	48 8b 54 24 28	 mov	 rdx, QWORD PTR def$[rsp]
  0012a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR mod$[rsp]
  0012f	e8 00 00 00 00	 call	 _PyState_AddModule
  00134	85 c0		 test	 eax, eax
  00136	7d 20		 jge	 SHORT $LN2@PyImport_F@4

; 561  :         PyDict_DelItem(PyImport_GetModuleDict(), name);

  00138	e8 00 00 00 00	 call	 PyImport_GetModuleDict
  0013d	48 8b 54 24 50	 mov	 rdx, QWORD PTR name$[rsp]
  00142	48 8b c8	 mov	 rcx, rax
  00145	e8 00 00 00 00	 call	 PyDict_DelItem

; 562  :         Py_DECREF(mod);

  0014a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR mod$[rsp]
  0014f	e8 00 00 00 00	 call	 _Py_DecRef

; 563  :         return NULL;

  00154	33 c0		 xor	 eax, eax
  00156	eb 24		 jmp	 SHORT $LN14@PyImport_F@4
$LN2@PyImport_F@4:

; 564  :     }
; 565  :     if (Py_VerboseFlag)

  00158	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR Py_VerboseFlag, 0
  0015f	74 16		 je	 SHORT $LN1@PyImport_F@4

; 566  :         PySys_FormatStderr("import %U # previously loaded (%R)\n",
; 567  :                           name, filename);

  00161	4c 8b 44 24 58	 mov	 r8, QWORD PTR filename$[rsp]
  00166	48 8b 54 24 50	 mov	 rdx, QWORD PTR name$[rsp]
  0016b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CE@KMHPOANN@import?5?$CFU?5?$CD?5previously?5loaded?5?$CI?$CF@
  00172	e8 00 00 00 00	 call	 PySys_FormatStderr
$LN1@PyImport_F@4:

; 568  :     return mod;

  00177	48 8b 44 24 30	 mov	 rax, QWORD PTR mod$[rsp]
$LN14@PyImport_F@4:

; 569  : 
; 570  : }

  0017c	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00180	c3		 ret	 0
_PyImport_FindExtensionObject ENDP
_TEXT	ENDS
PUBLIC	_PyImport_FindBuiltin
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyImport_FindBuiltin DD imagerel $LN4
	DD	imagerel $LN4+76
	DD	imagerel $unwind$_PyImport_FindBuiltin
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyImport_FindBuiltin DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _PyImport_FindBuiltin
_TEXT	SEGMENT
res$ = 32
nameobj$ = 40
name$ = 64
_PyImport_FindBuiltin PROC				; COMDAT

; 574  : {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 575  :     PyObject *res, *nameobj;
; 576  :     nameobj = PyUnicode_InternFromString(name);

  00009	48 8b 4c 24 40	 mov	 rcx, QWORD PTR name$[rsp]
  0000e	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  00013	48 89 44 24 28	 mov	 QWORD PTR nameobj$[rsp], rax

; 577  :     if (nameobj == NULL)

  00018	48 83 7c 24 28
	00		 cmp	 QWORD PTR nameobj$[rsp], 0
  0001e	75 04		 jne	 SHORT $LN1@PyImport_F@5

; 578  :         return NULL;

  00020	33 c0		 xor	 eax, eax
  00022	eb 23		 jmp	 SHORT $LN2@PyImport_F@5
$LN1@PyImport_F@5:

; 579  :     res = _PyImport_FindExtensionObject(nameobj, nameobj);

  00024	48 8b 54 24 28	 mov	 rdx, QWORD PTR nameobj$[rsp]
  00029	48 8b 4c 24 28	 mov	 rcx, QWORD PTR nameobj$[rsp]
  0002e	e8 00 00 00 00	 call	 _PyImport_FindExtensionObject
  00033	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax

; 580  :     Py_DECREF(nameobj);

  00038	48 8b 4c 24 28	 mov	 rcx, QWORD PTR nameobj$[rsp]
  0003d	e8 00 00 00 00	 call	 _Py_DecRef

; 581  :     return res;

  00042	48 8b 44 24 20	 mov	 rax, QWORD PTR res$[rsp]
$LN2@PyImport_F@5:

; 582  : }

  00047	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004b	c3		 ret	 0
_PyImport_FindBuiltin ENDP
_TEXT	ENDS
EXTRN	PyModule_NewObject:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyImport_AddModuleObject DD imagerel $LN7
	DD	imagerel $LN7+182
	DD	imagerel $unwind$PyImport_AddModuleObject
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyImport_AddModuleObject DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyImport_AddModuleObject
_TEXT	SEGMENT
modules$ = 32
m$ = 40
name$ = 64
PyImport_AddModuleObject PROC				; COMDAT

; 592  : {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 593  :     PyObject *modules = PyImport_GetModuleDict();

  00009	e8 00 00 00 00	 call	 PyImport_GetModuleDict
  0000e	48 89 44 24 20	 mov	 QWORD PTR modules$[rsp], rax

; 594  :     PyObject *m;
; 595  : 
; 596  :     if ((m = PyDict_GetItem(modules, name)) != NULL &&
; 597  :         PyModule_Check(m))

  00013	48 8b 54 24 40	 mov	 rdx, QWORD PTR name$[rsp]
  00018	48 8b 4c 24 20	 mov	 rcx, QWORD PTR modules$[rsp]
  0001d	e8 00 00 00 00	 call	 PyDict_GetItem
  00022	48 89 44 24 28	 mov	 QWORD PTR m$[rsp], rax
  00027	48 83 7c 24 28
	00		 cmp	 QWORD PTR m$[rsp], 0
  0002d	74 32		 je	 SHORT $LN4@PyImport_A@2
  0002f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyModule_Type
  00036	48 8b 4c 24 28	 mov	 rcx, QWORD PTR m$[rsp]
  0003b	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0003f	74 19		 je	 SHORT $LN3@PyImport_A@2
  00041	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyModule_Type
  00048	48 8b 44 24 28	 mov	 rax, QWORD PTR m$[rsp]
  0004d	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  00051	e8 00 00 00 00	 call	 PyType_IsSubtype
  00056	85 c0		 test	 eax, eax
  00058	74 07		 je	 SHORT $LN4@PyImport_A@2
$LN3@PyImport_A@2:

; 598  :         return m;

  0005a	48 8b 44 24 28	 mov	 rax, QWORD PTR m$[rsp]
  0005f	eb 50		 jmp	 SHORT $LN5@PyImport_A@2
$LN4@PyImport_A@2:

; 599  :     m = PyModule_NewObject(name);

  00061	48 8b 4c 24 40	 mov	 rcx, QWORD PTR name$[rsp]
  00066	e8 00 00 00 00	 call	 PyModule_NewObject
  0006b	48 89 44 24 28	 mov	 QWORD PTR m$[rsp], rax

; 600  :     if (m == NULL)

  00070	48 83 7c 24 28
	00		 cmp	 QWORD PTR m$[rsp], 0
  00076	75 04		 jne	 SHORT $LN2@PyImport_A@2

; 601  :         return NULL;

  00078	33 c0		 xor	 eax, eax
  0007a	eb 35		 jmp	 SHORT $LN5@PyImport_A@2
$LN2@PyImport_A@2:

; 602  :     if (PyDict_SetItem(modules, name, m) != 0) {

  0007c	4c 8b 44 24 28	 mov	 r8, QWORD PTR m$[rsp]
  00081	48 8b 54 24 40	 mov	 rdx, QWORD PTR name$[rsp]
  00086	48 8b 4c 24 20	 mov	 rcx, QWORD PTR modules$[rsp]
  0008b	e8 00 00 00 00	 call	 PyDict_SetItem
  00090	85 c0		 test	 eax, eax
  00092	74 0e		 je	 SHORT $LN1@PyImport_A@2

; 603  :         Py_DECREF(m);

  00094	48 8b 4c 24 28	 mov	 rcx, QWORD PTR m$[rsp]
  00099	e8 00 00 00 00	 call	 _Py_DecRef

; 604  :         return NULL;

  0009e	33 c0		 xor	 eax, eax
  000a0	eb 0f		 jmp	 SHORT $LN5@PyImport_A@2
$LN1@PyImport_A@2:

; 605  :     }
; 606  :     Py_DECREF(m); /* Yes, it still exists, in modules! */

  000a2	48 8b 4c 24 28	 mov	 rcx, QWORD PTR m$[rsp]
  000a7	e8 00 00 00 00	 call	 _Py_DecRef

; 607  : 
; 608  :     return m;

  000ac	48 8b 44 24 28	 mov	 rax, QWORD PTR m$[rsp]
$LN5@PyImport_A@2:

; 609  : }

  000b1	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000b5	c3		 ret	 0
PyImport_AddModuleObject ENDP
_TEXT	ENDS
PUBLIC	PyImport_AddModule
EXTRN	PyUnicode_FromString:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyImport_AddModule DD imagerel $LN4
	DD	imagerel $LN4+71
	DD	imagerel $unwind$PyImport_AddModule
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyImport_AddModule DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyImport_AddModule
_TEXT	SEGMENT
nameobj$ = 32
module$ = 40
name$ = 64
PyImport_AddModule PROC					; COMDAT

; 613  : {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 614  :     PyObject *nameobj, *module;
; 615  :     nameobj = PyUnicode_FromString(name);

  00009	48 8b 4c 24 40	 mov	 rcx, QWORD PTR name$[rsp]
  0000e	e8 00 00 00 00	 call	 PyUnicode_FromString
  00013	48 89 44 24 20	 mov	 QWORD PTR nameobj$[rsp], rax

; 616  :     if (nameobj == NULL)

  00018	48 83 7c 24 20
	00		 cmp	 QWORD PTR nameobj$[rsp], 0
  0001e	75 04		 jne	 SHORT $LN1@PyImport_A@3

; 617  :         return NULL;

  00020	33 c0		 xor	 eax, eax
  00022	eb 1e		 jmp	 SHORT $LN2@PyImport_A@3
$LN1@PyImport_A@3:

; 618  :     module = PyImport_AddModuleObject(nameobj);

  00024	48 8b 4c 24 20	 mov	 rcx, QWORD PTR nameobj$[rsp]
  00029	e8 00 00 00 00	 call	 PyImport_AddModuleObject
  0002e	48 89 44 24 28	 mov	 QWORD PTR module$[rsp], rax

; 619  :     Py_DECREF(nameobj);

  00033	48 8b 4c 24 20	 mov	 rcx, QWORD PTR nameobj$[rsp]
  00038	e8 00 00 00 00	 call	 _Py_DecRef

; 620  :     return module;

  0003d	48 8b 44 24 28	 mov	 rax, QWORD PTR module$[rsp]
$LN2@PyImport_A@3:

; 621  : }

  00042	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00046	c3		 ret	 0
PyImport_AddModule ENDP
_TEXT	ENDS
PUBLIC	PyImport_ExecCodeModuleWithPathnames
PUBLIC	PyImport_ExecCodeModule
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyImport_ExecCodeModule DD imagerel $LN3
	DD	imagerel $LN3+40
	DD	imagerel $unwind$PyImport_ExecCodeModule
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyImport_ExecCodeModule DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyImport_ExecCodeModule
_TEXT	SEGMENT
name$ = 48
co$ = 56
PyImport_ExecCodeModule PROC				; COMDAT

; 649  : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 650  :     return PyImport_ExecCodeModuleWithPathnames(
; 651  :         name, co, (char *)NULL, (char *)NULL);

  0000e	45 33 c9	 xor	 r9d, r9d
  00011	45 33 c0	 xor	 r8d, r8d
  00014	48 8b 54 24 38	 mov	 rdx, QWORD PTR co$[rsp]
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR name$[rsp]
  0001e	e8 00 00 00 00	 call	 PyImport_ExecCodeModuleWithPathnames

; 652  : }

  00023	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00027	c3		 ret	 0
PyImport_ExecCodeModule ENDP
_TEXT	ENDS
PUBLIC	PyImport_ExecCodeModuleEx
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyImport_ExecCodeModuleEx DD imagerel $LN3
	DD	imagerel $LN3+47
	DD	imagerel $unwind$PyImport_ExecCodeModuleEx
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyImport_ExecCodeModuleEx DD 011301H
	DD	04213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyImport_ExecCodeModuleEx
_TEXT	SEGMENT
name$ = 48
co$ = 56
pathname$ = 64
PyImport_ExecCodeModuleEx PROC				; COMDAT

; 656  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 657  :     return PyImport_ExecCodeModuleWithPathnames(
; 658  :         name, co, pathname, (char *)NULL);

  00013	45 33 c9	 xor	 r9d, r9d
  00016	4c 8b 44 24 40	 mov	 r8, QWORD PTR pathname$[rsp]
  0001b	48 8b 54 24 38	 mov	 rdx, QWORD PTR co$[rsp]
  00020	48 8b 4c 24 30	 mov	 rcx, QWORD PTR name$[rsp]
  00025	e8 00 00 00 00	 call	 PyImport_ExecCodeModuleWithPathnames

; 659  : }

  0002a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002e	c3		 ret	 0
PyImport_ExecCodeModuleEx ENDP
_TEXT	ENDS
PUBLIC	PyImport_ExecCodeModuleObject
PUBLIC	??_C@_0DG@HNOFNCNF@PyImport_ExecCodeModuleWithPathn@ ; `string'
EXTRN	_PyObject_CallMethodObjIdArgs:PROC
EXTRN	PyUnicode_DecodeFSDefault:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyImport_ExecCodeModuleWithPathnames DD imagerel $LN22
	DD	imagerel $LN22+386
	DD	imagerel $unwind$PyImport_ExecCodeModuleWithPathnames
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyImport_ExecCodeModuleWithPathnames DD 011801H
	DD	0a218H
xdata	ENDS
;	COMDAT ??_C@_0DG@HNOFNCNF@PyImport_ExecCodeModuleWithPathn@
CONST	SEGMENT
??_C@_0DG@HNOFNCNF@PyImport_ExecCodeModuleWithPathn@ DB 'PyImport_ExecCod'
	DB	'eModuleWithPathnames: no interpreter!', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyImport_ExecCodeModuleWithPathnames
_TEXT	SEGMENT
cpathobj$ = 32
pathobj$ = 40
nameobj$ = 48
m$ = 56
interp$122230 = 64
name$ = 96
co$ = 104
pathname$ = 112
cpathname$ = 120
PyImport_ExecCodeModuleWithPathnames PROC		; COMDAT

; 664  : {

$LN22:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 665  :     PyObject *m = NULL;

  00018	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR m$[rsp], 0

; 666  :     PyObject *nameobj, *pathobj = NULL, *cpathobj = NULL;

  00021	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR pathobj$[rsp], 0
  0002a	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR cpathobj$[rsp], 0

; 667  : 
; 668  :     nameobj = PyUnicode_FromString(name);

  00033	48 8b 4c 24 60	 mov	 rcx, QWORD PTR name$[rsp]
  00038	e8 00 00 00 00	 call	 PyUnicode_FromString
  0003d	48 89 44 24 30	 mov	 QWORD PTR nameobj$[rsp], rax

; 669  :     if (nameobj == NULL)

  00042	48 83 7c 24 30
	00		 cmp	 QWORD PTR nameobj$[rsp], 0
  00048	75 07		 jne	 SHORT $LN19@PyImport_E

; 670  :         return NULL;

  0004a	33 c0		 xor	 eax, eax
  0004c	e9 2c 01 00 00	 jmp	 $LN20@PyImport_E
$LN19@PyImport_E:

; 671  : 
; 672  :     if (cpathname != NULL) {

  00051	48 83 7c 24 78
	00		 cmp	 QWORD PTR cpathname$[rsp], 0
  00057	74 1e		 je	 SHORT $LN18@PyImport_E

; 673  :         cpathobj = PyUnicode_DecodeFSDefault(cpathname);

  00059	48 8b 4c 24 78	 mov	 rcx, QWORD PTR cpathname$[rsp]
  0005e	e8 00 00 00 00	 call	 PyUnicode_DecodeFSDefault
  00063	48 89 44 24 20	 mov	 QWORD PTR cpathobj$[rsp], rax

; 674  :         if (cpathobj == NULL)

  00068	48 83 7c 24 20
	00		 cmp	 QWORD PTR cpathobj$[rsp], 0
  0006e	75 05		 jne	 SHORT $LN17@PyImport_E

; 675  :             goto error;

  00070	e9 c9 00 00 00	 jmp	 $error$122220
$LN17@PyImport_E:

; 676  :     }
; 677  :     else

  00075	eb 09		 jmp	 SHORT $LN16@PyImport_E
$LN18@PyImport_E:

; 678  :         cpathobj = NULL;

  00077	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR cpathobj$[rsp], 0
$LN16@PyImport_E:

; 679  : 
; 680  :     if (pathname != NULL) {

  00080	48 83 7c 24 70
	00		 cmp	 QWORD PTR pathname$[rsp], 0
  00086	74 1e		 je	 SHORT $LN15@PyImport_E

; 681  :         pathobj = PyUnicode_DecodeFSDefault(pathname);

  00088	48 8b 4c 24 70	 mov	 rcx, QWORD PTR pathname$[rsp]
  0008d	e8 00 00 00 00	 call	 PyUnicode_DecodeFSDefault
  00092	48 89 44 24 28	 mov	 QWORD PTR pathobj$[rsp], rax

; 682  :         if (pathobj == NULL)

  00097	48 83 7c 24 28
	00		 cmp	 QWORD PTR pathobj$[rsp], 0
  0009d	75 05		 jne	 SHORT $LN14@PyImport_E

; 683  :             goto error;

  0009f	e9 9a 00 00 00	 jmp	 $error$122220
$LN14@PyImport_E:

; 684  :     }
; 685  :     else if (cpathobj != NULL) {

  000a4	eb 7a		 jmp	 SHORT $LN13@PyImport_E
$LN15@PyImport_E:
  000a6	48 83 7c 24 20
	00		 cmp	 QWORD PTR cpathobj$[rsp], 0
  000ac	74 69		 je	 SHORT $LN12@PyImport_E

; 686  :         PyInterpreterState *interp = PyThreadState_GET()->interp;

  000ae	e8 00 00 00 00	 call	 PyThreadState_Get
  000b3	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  000b7	48 89 44 24 40	 mov	 QWORD PTR interp$122230[rsp], rax

; 687  :         _Py_IDENTIFIER(_get_sourcefile);
; 688  : 
; 689  :         if (interp == NULL) {

  000bc	48 83 7c 24 40
	00		 cmp	 QWORD PTR interp$122230[rsp], 0
  000c2	75 0c		 jne	 SHORT $LN11@PyImport_E

; 690  :             Py_FatalError("PyImport_ExecCodeModuleWithPathnames: "
; 691  :                           "no interpreter!");

  000c4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DG@HNOFNCNF@PyImport_ExecCodeModuleWithPathn@
  000cb	e8 00 00 00 00	 call	 Py_FatalError
$LN11@PyImport_E:

; 692  :         }
; 693  : 
; 694  :         pathobj = _PyObject_CallMethodObjIdArgs(interp->importlib,
; 695  :                                                 &PyId__get_sourcefile, cpathobj,
; 696  :                                                 NULL);

  000d0	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId__get_sourcefile@?4??PyImport_ExecCodeModuleWithPathnames@@9@9
  000d5	8b c0		 mov	 eax, eax
  000d7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  000dd	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  000e6	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  000ea	45 33 c9	 xor	 r9d, r9d
  000ed	4c 8b 44 24 20	 mov	 r8, QWORD PTR cpathobj$[rsp]
  000f2	48 8b d0	 mov	 rdx, rax
  000f5	48 8b 44 24 40	 mov	 rax, QWORD PTR interp$122230[rsp]
  000fa	48 8b 48 30	 mov	 rcx, QWORD PTR [rax+48]
  000fe	e8 00 00 00 00	 call	 _PyObject_CallMethodObjIdArgs
  00103	48 89 44 24 28	 mov	 QWORD PTR pathobj$[rsp], rax

; 697  :         if (pathobj == NULL)

  00108	48 83 7c 24 28
	00		 cmp	 QWORD PTR pathobj$[rsp], 0
  0010e	75 05		 jne	 SHORT $LN10@PyImport_E

; 698  :             PyErr_Clear();

  00110	e8 00 00 00 00	 call	 PyErr_Clear
$LN10@PyImport_E:

; 699  :     }
; 700  :     else

  00115	eb 09		 jmp	 SHORT $LN9@PyImport_E
$LN12@PyImport_E:

; 701  :         pathobj = NULL;

  00117	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR pathobj$[rsp], 0
$LN9@PyImport_E:
$LN13@PyImport_E:

; 702  : 
; 703  :     m = PyImport_ExecCodeModuleObject(nameobj, co, pathobj, cpathobj);

  00120	4c 8b 4c 24 20	 mov	 r9, QWORD PTR cpathobj$[rsp]
  00125	4c 8b 44 24 28	 mov	 r8, QWORD PTR pathobj$[rsp]
  0012a	48 8b 54 24 68	 mov	 rdx, QWORD PTR co$[rsp]
  0012f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR nameobj$[rsp]
  00134	e8 00 00 00 00	 call	 PyImport_ExecCodeModuleObject
  00139	48 89 44 24 38	 mov	 QWORD PTR m$[rsp], rax
$error$122220:

; 704  : error:
; 705  :     Py_DECREF(nameobj);

  0013e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR nameobj$[rsp]
  00143	e8 00 00 00 00	 call	 _Py_DecRef
$LN8@PyImport_E:

; 706  :     Py_XDECREF(pathobj);

  00148	48 83 7c 24 28
	00		 cmp	 QWORD PTR pathobj$[rsp], 0
  0014e	74 0a		 je	 SHORT $LN5@PyImport_E
  00150	48 8b 4c 24 28	 mov	 rcx, QWORD PTR pathobj$[rsp]
  00155	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@PyImport_E:
  0015a	33 c0		 xor	 eax, eax
  0015c	85 c0		 test	 eax, eax
  0015e	75 e8		 jne	 SHORT $LN8@PyImport_E
$LN4@PyImport_E:

; 707  :     Py_XDECREF(cpathobj);

  00160	48 83 7c 24 20
	00		 cmp	 QWORD PTR cpathobj$[rsp], 0
  00166	74 0a		 je	 SHORT $LN1@PyImport_E
  00168	48 8b 4c 24 20	 mov	 rcx, QWORD PTR cpathobj$[rsp]
  0016d	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@PyImport_E:
  00172	33 c0		 xor	 eax, eax
  00174	85 c0		 test	 eax, eax
  00176	75 e8		 jne	 SHORT $LN4@PyImport_E

; 708  :     return m;

  00178	48 8b 44 24 38	 mov	 rax, QWORD PTR m$[rsp]
$LN20@PyImport_E:

; 709  : }

  0017d	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00181	c3		 ret	 0
PyImport_ExecCodeModuleWithPathnames ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CK@DLABBGBK@Loaded?5module?5?$CFR?5not?5found?5in?5sy@ ; `string'
PUBLIC	??_C@_0L@KPCCMMEA@__cached__?$AA@		; `string'
PUBLIC	??_C@_08PFHPBGLK@__file__?$AA@			; `string'
PUBLIC	??_C@_0N@MNFFDJII@__builtins__?$AA@		; `string'
EXTRN	PyErr_Format:PROC
EXTRN	PyExc_ImportError:QWORD
EXTRN	PyEval_EvalCode:PROC
EXTRN	PyEval_GetBuiltins:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyImport_ExecCodeModuleObject DD imagerel $LN14
	DD	imagerel $LN14+421
	DD	imagerel $unwind$PyImport_ExecCodeModuleObject
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyImport_ExecCodeModuleObject DD 011801H
	DD	08218H
xdata	ENDS
;	COMDAT ??_C@_0CK@DLABBGBK@Loaded?5module?5?$CFR?5not?5found?5in?5sy@
CONST	SEGMENT
??_C@_0CK@DLABBGBK@Loaded?5module?5?$CFR?5not?5found?5in?5sy@ DB 'Loaded '
	DB	'module %R not found in sys.modules', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@KPCCMMEA@__cached__?$AA@
CONST	SEGMENT
??_C@_0L@KPCCMMEA@__cached__?$AA@ DB '__cached__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08PFHPBGLK@__file__?$AA@
CONST	SEGMENT
??_C@_08PFHPBGLK@__file__?$AA@ DB '__file__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MNFFDJII@__builtins__?$AA@
CONST	SEGMENT
??_C@_0N@MNFFDJII@__builtins__?$AA@ DB '__builtins__', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyImport_ExecCodeModuleObject
_TEXT	SEGMENT
v$ = 32
modules$ = 40
d$ = 48
m$ = 56
name$ = 80
co$ = 88
pathname$ = 96
cpathname$ = 104
PyImport_ExecCodeModuleObject PROC			; COMDAT

; 714  : {

$LN14:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 715  :     PyObject *modules = PyImport_GetModuleDict();

  00018	e8 00 00 00 00	 call	 PyImport_GetModuleDict
  0001d	48 89 44 24 28	 mov	 QWORD PTR modules$[rsp], rax

; 716  :     PyObject *m, *d, *v;
; 717  : 
; 718  :     m = PyImport_AddModuleObject(name);

  00022	48 8b 4c 24 50	 mov	 rcx, QWORD PTR name$[rsp]
  00027	e8 00 00 00 00	 call	 PyImport_AddModuleObject
  0002c	48 89 44 24 38	 mov	 QWORD PTR m$[rsp], rax

; 719  :     if (m == NULL)

  00031	48 83 7c 24 38
	00		 cmp	 QWORD PTR m$[rsp], 0
  00037	75 07		 jne	 SHORT $LN11@PyImport_E@2

; 720  :         return NULL;

  00039	33 c0		 xor	 eax, eax
  0003b	e9 60 01 00 00	 jmp	 $LN12@PyImport_E@2
$LN11@PyImport_E@2:

; 721  :     /* If the module is being reloaded, we get the old module back
; 722  :        and re-use its dict to exec the new code. */
; 723  :     d = PyModule_GetDict(m);

  00040	48 8b 4c 24 38	 mov	 rcx, QWORD PTR m$[rsp]
  00045	e8 00 00 00 00	 call	 PyModule_GetDict
  0004a	48 89 44 24 30	 mov	 QWORD PTR d$[rsp], rax

; 724  :     if (PyDict_GetItemString(d, "__builtins__") == NULL) {

  0004f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@MNFFDJII@__builtins__?$AA@
  00056	48 8b 4c 24 30	 mov	 rcx, QWORD PTR d$[rsp]
  0005b	e8 00 00 00 00	 call	 PyDict_GetItemString
  00060	48 85 c0	 test	 rax, rax
  00063	75 22		 jne	 SHORT $LN10@PyImport_E@2

; 725  :         if (PyDict_SetItemString(d, "__builtins__",
; 726  :                                  PyEval_GetBuiltins()) != 0)

  00065	e8 00 00 00 00	 call	 PyEval_GetBuiltins
  0006a	4c 8b c0	 mov	 r8, rax
  0006d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@MNFFDJII@__builtins__?$AA@
  00074	48 8b 4c 24 30	 mov	 rcx, QWORD PTR d$[rsp]
  00079	e8 00 00 00 00	 call	 PyDict_SetItemString
  0007e	85 c0		 test	 eax, eax
  00080	74 05		 je	 SHORT $LN9@PyImport_E@2

; 727  :             goto error;

  00082	e9 0d 01 00 00	 jmp	 $error$122273
$LN9@PyImport_E@2:
$LN10@PyImport_E@2:

; 728  :     }
; 729  :     if (pathname != NULL) {

  00087	48 83 7c 24 60
	00		 cmp	 QWORD PTR pathname$[rsp], 0
  0008d	74 0c		 je	 SHORT $LN8@PyImport_E@2

; 730  :         v = pathname;

  0008f	48 8b 44 24 60	 mov	 rax, QWORD PTR pathname$[rsp]
  00094	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax

; 731  :     }
; 732  :     else {

  00099	eb 11		 jmp	 SHORT $LN7@PyImport_E@2
$LN8@PyImport_E@2:

; 733  :         v = ((PyCodeObject *)co)->co_filename;

  0009b	48 8b 44 24 58	 mov	 rax, QWORD PTR co$[rsp]
  000a0	48 8b 80 b0 00
	00 00		 mov	 rax, QWORD PTR [rax+176]
  000a7	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax
$LN7@PyImport_E@2:

; 734  :     }
; 735  :     Py_INCREF(v);

  000ac	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  000b1	e8 00 00 00 00	 call	 _Py_IncRef

; 736  :     if (PyDict_SetItemString(d, "__file__", v) != 0)

  000b6	4c 8b 44 24 20	 mov	 r8, QWORD PTR v$[rsp]
  000bb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08PFHPBGLK@__file__?$AA@
  000c2	48 8b 4c 24 30	 mov	 rcx, QWORD PTR d$[rsp]
  000c7	e8 00 00 00 00	 call	 PyDict_SetItemString
  000cc	85 c0		 test	 eax, eax
  000ce	74 05		 je	 SHORT $LN6@PyImport_E@2

; 737  :         PyErr_Clear(); /* Not important enough to report */

  000d0	e8 00 00 00 00	 call	 PyErr_Clear
$LN6@PyImport_E@2:

; 738  :     Py_DECREF(v);

  000d5	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  000da	e8 00 00 00 00	 call	 _Py_DecRef

; 739  : 
; 740  :     /* Remember the pyc path name as the __cached__ attribute. */
; 741  :     if (cpathname != NULL)

  000df	48 83 7c 24 68
	00		 cmp	 QWORD PTR cpathname$[rsp], 0
  000e5	74 0c		 je	 SHORT $LN5@PyImport_E@2

; 742  :         v = cpathname;

  000e7	48 8b 44 24 68	 mov	 rax, QWORD PTR cpathname$[rsp]
  000ec	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax

; 743  :     else

  000f1	eb 0c		 jmp	 SHORT $LN4@PyImport_E@2
$LN5@PyImport_E@2:

; 744  :         v = Py_None;

  000f3	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000fa	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax
$LN4@PyImport_E@2:

; 745  :     if (PyDict_SetItemString(d, "__cached__", v) != 0)

  000ff	4c 8b 44 24 20	 mov	 r8, QWORD PTR v$[rsp]
  00104	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@KPCCMMEA@__cached__?$AA@
  0010b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR d$[rsp]
  00110	e8 00 00 00 00	 call	 PyDict_SetItemString
  00115	85 c0		 test	 eax, eax
  00117	74 05		 je	 SHORT $LN3@PyImport_E@2

; 746  :         PyErr_Clear(); /* Not important enough to report */

  00119	e8 00 00 00 00	 call	 PyErr_Clear
$LN3@PyImport_E@2:

; 747  : 
; 748  :     v = PyEval_EvalCode(co, d, d);

  0011e	4c 8b 44 24 30	 mov	 r8, QWORD PTR d$[rsp]
  00123	48 8b 54 24 30	 mov	 rdx, QWORD PTR d$[rsp]
  00128	48 8b 4c 24 58	 mov	 rcx, QWORD PTR co$[rsp]
  0012d	e8 00 00 00 00	 call	 PyEval_EvalCode
  00132	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax

; 749  :     if (v == NULL)

  00137	48 83 7c 24 20
	00		 cmp	 QWORD PTR v$[rsp], 0
  0013d	75 02		 jne	 SHORT $LN2@PyImport_E@2

; 750  :         goto error;

  0013f	eb 53		 jmp	 SHORT $error$122273
$LN2@PyImport_E@2:

; 751  :     Py_DECREF(v);

  00141	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  00146	e8 00 00 00 00	 call	 _Py_DecRef

; 752  : 
; 753  :     if ((m = PyDict_GetItem(modules, name)) == NULL) {

  0014b	48 8b 54 24 50	 mov	 rdx, QWORD PTR name$[rsp]
  00150	48 8b 4c 24 28	 mov	 rcx, QWORD PTR modules$[rsp]
  00155	e8 00 00 00 00	 call	 PyDict_GetItem
  0015a	48 89 44 24 38	 mov	 QWORD PTR m$[rsp], rax
  0015f	48 83 7c 24 38
	00		 cmp	 QWORD PTR m$[rsp], 0
  00165	75 1c		 jne	 SHORT $LN1@PyImport_E@2

; 754  :         PyErr_Format(PyExc_ImportError,
; 755  :                      "Loaded module %R not found in sys.modules",
; 756  :                      name);

  00167	4c 8b 44 24 50	 mov	 r8, QWORD PTR name$[rsp]
  0016c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CK@DLABBGBK@Loaded?5module?5?$CFR?5not?5found?5in?5sy@
  00173	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ImportError
  0017a	e8 00 00 00 00	 call	 PyErr_Format

; 757  :         return NULL;

  0017f	33 c0		 xor	 eax, eax
  00181	eb 1d		 jmp	 SHORT $LN12@PyImport_E@2
$LN1@PyImport_E@2:

; 758  :     }
; 759  : 
; 760  :     Py_INCREF(m);

  00183	48 8b 4c 24 38	 mov	 rcx, QWORD PTR m$[rsp]
  00188	e8 00 00 00 00	 call	 _Py_IncRef

; 761  : 
; 762  :     return m;

  0018d	48 8b 44 24 38	 mov	 rax, QWORD PTR m$[rsp]
  00192	eb 0c		 jmp	 SHORT $LN12@PyImport_E@2
$error$122273:

; 763  : 
; 764  :   error:
; 765  :     remove_module(name);

  00194	48 8b 4c 24 50	 mov	 rcx, QWORD PTR name$[rsp]
  00199	e8 00 00 00 00	 call	 remove_module

; 766  :     return NULL;

  0019e	33 c0		 xor	 eax, eax
$LN12@PyImport_E@2:

; 767  : }

  001a0	48 83 c4 48	 add	 rsp, 72			; 00000048H
  001a4	c3		 ret	 0
PyImport_ExecCodeModuleObject ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DE@CAIFCDP@import?3?5?5deleting?5existing?5key?5i@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$remove_module DD imagerel remove_module
	DD	imagerel remove_module+77
	DD	imagerel $unwind$remove_module
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$remove_module DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0DE@CAIFCDP@import?3?5?5deleting?5existing?5key?5i@
CONST	SEGMENT
??_C@_0DE@CAIFCDP@import?3?5?5deleting?5existing?5key?5i@ DB 'import:  de'
	DB	'leting existing key insys.modules failed', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT remove_module
_TEXT	SEGMENT
modules$ = 32
name$ = 64
remove_module PROC					; COMDAT

; 627  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 628  :     PyObject *modules = PyImport_GetModuleDict();

  00009	e8 00 00 00 00	 call	 PyImport_GetModuleDict
  0000e	48 89 44 24 20	 mov	 QWORD PTR modules$[rsp], rax

; 629  :     if (PyDict_GetItem(modules, name) == NULL)

  00013	48 8b 54 24 40	 mov	 rdx, QWORD PTR name$[rsp]
  00018	48 8b 4c 24 20	 mov	 rcx, QWORD PTR modules$[rsp]
  0001d	e8 00 00 00 00	 call	 PyDict_GetItem
  00022	48 85 c0	 test	 rax, rax
  00025	75 02		 jne	 SHORT $LN2@remove_mod

; 630  :         return;

  00027	eb 1f		 jmp	 SHORT $LN3@remove_mod
$LN2@remove_mod:

; 631  :     if (PyDict_DelItem(modules, name) < 0)

  00029	48 8b 54 24 40	 mov	 rdx, QWORD PTR name$[rsp]
  0002e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR modules$[rsp]
  00033	e8 00 00 00 00	 call	 PyDict_DelItem
  00038	85 c0		 test	 eax, eax
  0003a	7d 0c		 jge	 SHORT $LN1@remove_mod

; 632  :         Py_FatalError("import:  deleting existing key in"
; 633  :                       "sys.modules failed");

  0003c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DE@CAIFCDP@import?3?5?5deleting?5existing?5key?5i@
  00043	e8 00 00 00 00	 call	 Py_FatalError
$LN1@remove_mod:
$LN3@remove_mod:

; 634  : }

  00048	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004c	c3		 ret	 0
remove_module ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CB@LEMEMCMD@second?5argument?5must?5be?5a?5string@ ; `string'
PUBLIC	??_C@_0CF@FOIIOMOP@first?5argument?5must?5be?5a?5code?5ob@ ; `string'
PUBLIC	??_C@_0BE@COGPLNFO@OO?3_fix_co_filename?$AA@	; `string'
EXTRN	PyExc_TypeError:QWORD
EXTRN	PyCode_Type:BYTE
EXTRN	PyArg_ParseTuple:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$imp_fix_co_filename DD imagerel imp_fix_co_filename
	DD	imagerel imp_fix_co_filename+176
	DD	imagerel $unwind$imp_fix_co_filename
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$imp_fix_co_filename DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT ??_C@_0CB@LEMEMCMD@second?5argument?5must?5be?5a?5string@
CONST	SEGMENT
??_C@_0CB@LEMEMCMD@second?5argument?5must?5be?5a?5string@ DB 'second argu'
	DB	'ment must be a string', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@FOIIOMOP@first?5argument?5must?5be?5a?5code?5ob@
CONST	SEGMENT
??_C@_0CF@FOIIOMOP@first?5argument?5must?5be?5a?5code?5ob@ DB 'first argu'
	DB	'ment must be a code object', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@COGPLNFO@OO?3_fix_co_filename?$AA@
CONST	SEGMENT
??_C@_0BE@COGPLNFO@OO?3_fix_co_filename?$AA@ DB 'OO:_fix_co_filename', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT imp_fix_co_filename
_TEXT	SEGMENT
file_path$ = 32
co$ = 40
self$ = 64
args$ = 72
imp_fix_co_filename PROC				; COMDAT

; 810  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 811  :     PyObject *co;
; 812  :     PyObject *file_path;
; 813  : 
; 814  :     if (!PyArg_ParseTuple(args, "OO:_fix_co_filename", &co, &file_path))

  0000e	4c 8d 4c 24 20	 lea	 r9, QWORD PTR file_path$[rsp]
  00013	4c 8d 44 24 28	 lea	 r8, QWORD PTR co$[rsp]
  00018	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@COGPLNFO@OO?3_fix_co_filename?$AA@
  0001f	48 8b 4c 24 48	 mov	 rcx, QWORD PTR args$[rsp]
  00024	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00029	85 c0		 test	 eax, eax
  0002b	75 04		 jne	 SHORT $LN3@imp_fix_co

; 815  :         return NULL;

  0002d	33 c0		 xor	 eax, eax
  0002f	eb 7a		 jmp	 SHORT $LN4@imp_fix_co
$LN3@imp_fix_co:

; 816  : 
; 817  :     if (!PyCode_Check(co)) {

  00031	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyCode_Type
  00038	48 8b 4c 24 28	 mov	 rcx, QWORD PTR co$[rsp]
  0003d	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00041	74 17		 je	 SHORT $LN2@imp_fix_co

; 818  :         PyErr_SetString(PyExc_TypeError,
; 819  :                         "first argument must be a code object");

  00043	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CF@FOIIOMOP@first?5argument?5must?5be?5a?5code?5ob@
  0004a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00051	e8 00 00 00 00	 call	 PyErr_SetString

; 820  :         return NULL;

  00056	33 c0		 xor	 eax, eax
  00058	eb 51		 jmp	 SHORT $LN4@imp_fix_co
$LN2@imp_fix_co:

; 821  :     }
; 822  : 
; 823  :     if (!PyUnicode_Check(file_path)) {

  0005a	48 8b 44 24 20	 mov	 rax, QWORD PTR file_path$[rsp]
  0005f	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00063	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00069	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0006e	85 c0		 test	 eax, eax
  00070	75 17		 jne	 SHORT $LN1@imp_fix_co

; 824  :         PyErr_SetString(PyExc_TypeError,
; 825  :                         "second argument must be a string");

  00072	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CB@LEMEMCMD@second?5argument?5must?5be?5a?5string@
  00079	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00080	e8 00 00 00 00	 call	 PyErr_SetString

; 826  :         return NULL;

  00085	33 c0		 xor	 eax, eax
  00087	eb 22		 jmp	 SHORT $LN4@imp_fix_co
$LN1@imp_fix_co:

; 827  :     }
; 828  : 
; 829  :     update_compiled_module((PyCodeObject*)co, file_path);

  00089	48 8b 54 24 20	 mov	 rdx, QWORD PTR file_path$[rsp]
  0008e	48 8b 4c 24 28	 mov	 rcx, QWORD PTR co$[rsp]
  00093	e8 00 00 00 00	 call	 update_compiled_module

; 830  : 
; 831  :     Py_RETURN_NONE;

  00098	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  0009f	e8 00 00 00 00	 call	 _Py_IncRef
  000a4	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
$LN4@imp_fix_co:

; 832  : }

  000ab	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000af	c3		 ret	 0
imp_fix_co_filename ENDP
_TEXT	ENDS
EXTRN	PyUnicode_Compare:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$update_compiled_module DD imagerel update_compiled_module
	DD	imagerel update_compiled_module+104
	DD	imagerel $unwind$update_compiled_module
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$update_compiled_module DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT update_compiled_module
_TEXT	SEGMENT
oldname$ = 32
co$ = 64
newname$ = 72
update_compiled_module PROC				; COMDAT

; 796  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 797  :     PyObject *oldname;
; 798  : 
; 799  :     if (PyUnicode_Compare(co->co_filename, newname) == 0)

  0000e	48 8b 54 24 48	 mov	 rdx, QWORD PTR newname$[rsp]
  00013	48 8b 44 24 40	 mov	 rax, QWORD PTR co$[rsp]
  00018	48 8b 88 b0 00
	00 00		 mov	 rcx, QWORD PTR [rax+176]
  0001f	e8 00 00 00 00	 call	 PyUnicode_Compare
  00024	85 c0		 test	 eax, eax
  00026	75 02		 jne	 SHORT $LN1@update_com

; 800  :         return;

  00028	eb 39		 jmp	 SHORT $LN2@update_com
$LN1@update_com:

; 801  : 
; 802  :     oldname = co->co_filename;

  0002a	48 8b 44 24 40	 mov	 rax, QWORD PTR co$[rsp]
  0002f	48 8b 80 b0 00
	00 00		 mov	 rax, QWORD PTR [rax+176]
  00036	48 89 44 24 20	 mov	 QWORD PTR oldname$[rsp], rax

; 803  :     Py_INCREF(oldname);

  0003b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR oldname$[rsp]
  00040	e8 00 00 00 00	 call	 _Py_IncRef

; 804  :     update_code_filenames(co, oldname, newname);

  00045	4c 8b 44 24 48	 mov	 r8, QWORD PTR newname$[rsp]
  0004a	48 8b 54 24 20	 mov	 rdx, QWORD PTR oldname$[rsp]
  0004f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR co$[rsp]
  00054	e8 00 00 00 00	 call	 update_code_filenames

; 805  :     Py_DECREF(oldname);

  00059	48 8b 4c 24 20	 mov	 rcx, QWORD PTR oldname$[rsp]
  0005e	e8 00 00 00 00	 call	 _Py_DecRef
$LN2@update_com:

; 806  : }

  00063	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00067	c3		 ret	 0
update_compiled_module ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$update_code_filenames DD imagerel update_code_filenames
	DD	imagerel update_code_filenames+243
	DD	imagerel $unwind$update_code_filenames
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$update_code_filenames DD 011301H
	DD	08213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT update_code_filenames
_TEXT	SEGMENT
n$ = 32
i$ = 40
tmp$ = 48
constants$ = 56
co$ = 80
oldname$ = 88
newname$ = 96
update_code_filenames PROC				; COMDAT

; 772  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 773  :     PyObject *constants, *tmp;
; 774  :     Py_ssize_t i, n;
; 775  : 
; 776  :     if (PyUnicode_Compare(co->co_filename, oldname))

  00013	48 8b 54 24 58	 mov	 rdx, QWORD PTR oldname$[rsp]
  00018	48 8b 44 24 50	 mov	 rax, QWORD PTR co$[rsp]
  0001d	48 8b 88 b0 00
	00 00		 mov	 rcx, QWORD PTR [rax+176]
  00024	e8 00 00 00 00	 call	 PyUnicode_Compare
  00029	85 c0		 test	 eax, eax
  0002b	74 05		 je	 SHORT $LN5@update_cod

; 777  :         return;

  0002d	e9 bc 00 00 00	 jmp	 $LN6@update_cod
$LN5@update_cod:

; 778  : 
; 779  :     tmp = co->co_filename;

  00032	48 8b 44 24 50	 mov	 rax, QWORD PTR co$[rsp]
  00037	48 8b 80 b0 00
	00 00		 mov	 rax, QWORD PTR [rax+176]
  0003e	48 89 44 24 30	 mov	 QWORD PTR tmp$[rsp], rax

; 780  :     co->co_filename = newname;

  00043	48 8b 44 24 50	 mov	 rax, QWORD PTR co$[rsp]
  00048	48 8b 4c 24 60	 mov	 rcx, QWORD PTR newname$[rsp]
  0004d	48 89 88 b0 00
	00 00		 mov	 QWORD PTR [rax+176], rcx

; 781  :     Py_INCREF(co->co_filename);

  00054	48 8b 44 24 50	 mov	 rax, QWORD PTR co$[rsp]
  00059	48 8b 88 b0 00
	00 00		 mov	 rcx, QWORD PTR [rax+176]
  00060	e8 00 00 00 00	 call	 _Py_IncRef

; 782  :     Py_DECREF(tmp);

  00065	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tmp$[rsp]
  0006a	e8 00 00 00 00	 call	 _Py_DecRef

; 783  : 
; 784  :     constants = co->co_consts;

  0006f	48 8b 44 24 50	 mov	 rax, QWORD PTR co$[rsp]
  00074	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  0007b	48 89 44 24 38	 mov	 QWORD PTR constants$[rsp], rax

; 785  :     n = PyTuple_GET_SIZE(constants);

  00080	48 8b 44 24 38	 mov	 rax, QWORD PTR constants$[rsp]
  00085	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00089	48 89 44 24 20	 mov	 QWORD PTR n$[rsp], rax

; 786  :     for (i = 0; i < n; i++) {

  0008e	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  00097	eb 0d		 jmp	 SHORT $LN4@update_cod
$LN3@update_cod:
  00099	48 8b 44 24 28	 mov	 rax, QWORD PTR i$[rsp]
  0009e	48 ff c0	 inc	 rax
  000a1	48 89 44 24 28	 mov	 QWORD PTR i$[rsp], rax
$LN4@update_cod:
  000a6	48 8b 44 24 20	 mov	 rax, QWORD PTR n$[rsp]
  000ab	48 39 44 24 28	 cmp	 QWORD PTR i$[rsp], rax
  000b0	7d 3c		 jge	 SHORT $LN2@update_cod

; 787  :         tmp = PyTuple_GET_ITEM(constants, i);

  000b2	48 8b 44 24 38	 mov	 rax, QWORD PTR constants$[rsp]
  000b7	48 8b 4c 24 28	 mov	 rcx, QWORD PTR i$[rsp]
  000bc	48 8b 44 c8 70	 mov	 rax, QWORD PTR [rax+rcx*8+112]
  000c1	48 89 44 24 30	 mov	 QWORD PTR tmp$[rsp], rax

; 788  :         if (PyCode_Check(tmp))

  000c6	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyCode_Type
  000cd	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tmp$[rsp]
  000d2	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  000d6	75 14		 jne	 SHORT $LN1@update_cod

; 789  :             update_code_filenames((PyCodeObject *)tmp,
; 790  :                                   oldname, newname);

  000d8	4c 8b 44 24 60	 mov	 r8, QWORD PTR newname$[rsp]
  000dd	48 8b 54 24 58	 mov	 rdx, QWORD PTR oldname$[rsp]
  000e2	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tmp$[rsp]
  000e7	e8 00 00 00 00	 call	 update_code_filenames
$LN1@update_cod:

; 791  :     }

  000ec	eb ab		 jmp	 SHORT $LN3@update_cod
$LN2@update_cod:
$LN6@update_cod:

; 792  : }

  000ee	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000f2	c3		 ret	 0
update_code_filenames ENDP
_TEXT	ENDS
PUBLIC	PyImport_GetImporter
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyImport_GetImporter DD imagerel $LN9
	DD	imagerel $LN9+145
	DD	imagerel $unwind$PyImport_GetImporter
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyImport_GetImporter DD 010901H
	DD	08209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyImport_GetImporter
_TEXT	SEGMENT
path_importer_cache$ = 32
path_hooks$ = 40
importer$ = 48
path$ = 80
PyImport_GetImporter PROC				; COMDAT

; 915  : PyImport_GetImporter(PyObject *path) {

$LN9:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 916  :     PyObject *importer=NULL, *path_importer_cache=NULL, *path_hooks=NULL;

  00009	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR importer$[rsp], 0
  00012	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR path_importer_cache$[rsp], 0
  0001b	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR path_hooks$[rsp], 0

; 917  : 
; 918  :     if ((path_importer_cache = PySys_GetObject("path_importer_cache"))) {

  00024	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@FEEGIILL@path_importer_cache?$AA@
  0002b	e8 00 00 00 00	 call	 PySys_GetObject
  00030	48 89 44 24 20	 mov	 QWORD PTR path_importer_cache$[rsp], rax
  00035	48 83 7c 24 20
	00		 cmp	 QWORD PTR path_importer_cache$[rsp], 0
  0003b	74 32		 je	 SHORT $LN6@PyImport_G@3

; 919  :         if ((path_hooks = PySys_GetObject("path_hooks"))) {

  0003d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@PDLDEHCN@path_hooks?$AA@
  00044	e8 00 00 00 00	 call	 PySys_GetObject
  00049	48 89 44 24 28	 mov	 QWORD PTR path_hooks$[rsp], rax
  0004e	48 83 7c 24 28
	00		 cmp	 QWORD PTR path_hooks$[rsp], 0
  00054	74 19		 je	 SHORT $LN5@PyImport_G@3

; 920  :             importer = get_path_importer(path_importer_cache,
; 921  :                                          path_hooks, path);

  00056	4c 8b 44 24 50	 mov	 r8, QWORD PTR path$[rsp]
  0005b	48 8b 54 24 28	 mov	 rdx, QWORD PTR path_hooks$[rsp]
  00060	48 8b 4c 24 20	 mov	 rcx, QWORD PTR path_importer_cache$[rsp]
  00065	e8 00 00 00 00	 call	 get_path_importer
  0006a	48 89 44 24 30	 mov	 QWORD PTR importer$[rsp], rax
$LN5@PyImport_G@3:
$LN6@PyImport_G@3:
$LN4@PyImport_G@3:

; 922  :         }
; 923  :     }
; 924  :     Py_XINCREF(importer); /* get_path_importer returns a borrowed reference */

  0006f	48 83 7c 24 30
	00		 cmp	 QWORD PTR importer$[rsp], 0
  00075	74 0a		 je	 SHORT $LN1@PyImport_G@3
  00077	48 8b 4c 24 30	 mov	 rcx, QWORD PTR importer$[rsp]
  0007c	e8 00 00 00 00	 call	 _Py_IncRef
$LN1@PyImport_G@3:
  00081	33 c0		 xor	 eax, eax
  00083	85 c0		 test	 eax, eax
  00085	75 e8		 jne	 SHORT $LN4@PyImport_G@3

; 925  :     return importer;

  00087	48 8b 44 24 30	 mov	 rax, QWORD PTR importer$[rsp]

; 926  : }

  0008c	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00090	c3		 ret	 0
PyImport_GetImporter ENDP
_TEXT	ENDS
PUBLIC	??_C@_1EE@JIHBLLDG@?$AAP?$AAy?$AAD?$AAi?$AAc?$AAt?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAp?$AAa?$AAt?$AAh?$AA_?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AAe?$AAr?$AA_?$AAc?$AAa?$AAc?$AAh?$AAe@ ; `string'
PUBLIC	??_C@_1DC@EFIJJGPF@?$AAP?$AAy?$AAL?$AAi?$AAs?$AAt?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAp?$AAa?$AAt?$AAh?$AA_?$AAh?$AAo?$AAo?$AAk?$AAs?$AA?$CJ?$AA?$AA@ ; `string'
EXTRN	PyErr_ExceptionMatches:PROC
EXTRN	PyObject_CallFunctionObjArgs:PROC
EXTRN	PyList_GetItem:PROC
EXTRN	PyList_Size:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$get_path_importer DD imagerel get_path_importer
	DD	imagerel get_path_importer+435
	DD	imagerel $unwind$get_path_importer
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$get_path_importer DD 011301H
	DD	0a213H
xdata	ENDS
;	COMDAT ??_C@_1EE@JIHBLLDG@?$AAP?$AAy?$AAD?$AAi?$AAc?$AAt?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAp?$AAa?$AAt?$AAh?$AA_?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AAe?$AAr?$AA_?$AAc?$AAa?$AAc?$AAh?$AAe@
CONST	SEGMENT
??_C@_1EE@JIHBLLDG@?$AAP?$AAy?$AAD?$AAi?$AAc?$AAt?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAp?$AAa?$AAt?$AAh?$AA_?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AAe?$AAr?$AA_?$AAc?$AAa?$AAc?$AAh?$AAe@ DB 'P'
	DB	00H, 'y', 00H, 'D', 00H, 'i', 00H, 'c', 00H, 't', 00H, '_', 00H
	DB	'C', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, '(', 00H, 'p'
	DB	00H, 'a', 00H, 't', 00H, 'h', 00H, '_', 00H, 'i', 00H, 'm', 00H
	DB	'p', 00H, 'o', 00H, 'r', 00H, 't', 00H, 'e', 00H, 'r', 00H, '_'
	DB	00H, 'c', 00H, 'a', 00H, 'c', 00H, 'h', 00H, 'e', 00H, ')', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1DC@EFIJJGPF@?$AAP?$AAy?$AAL?$AAi?$AAs?$AAt?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAp?$AAa?$AAt?$AAh?$AA_?$AAh?$AAo?$AAo?$AAk?$AAs?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DC@EFIJJGPF@?$AAP?$AAy?$AAL?$AAi?$AAs?$AAt?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAp?$AAa?$AAt?$AAh?$AA_?$AAh?$AAo?$AAo?$AAk?$AAs?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'L', 00H, 'i', 00H, 's', 00H, 't', 00H, '_', 00H
	DB	'C', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, '(', 00H, 'p'
	DB	00H, 'a', 00H, 't', 00H, 'h', 00H, '_', 00H, 'h', 00H, 'o', 00H
	DB	'o', 00H, 'k', 00H, 's', 00H, ')', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT get_path_importer
_TEXT	SEGMENT
nhooks$ = 32
importer$ = 40
j$ = 48
hook$122392 = 56
err$122405 = 64
path_importer_cache$ = 96
path_hooks$ = 104
p$ = 112
get_path_importer PROC					; COMDAT

; 869  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 870  :     PyObject *importer;
; 871  :     Py_ssize_t j, nhooks;
; 872  : 
; 873  :     /* These conditions are the caller's responsibility: */
; 874  :     assert(PyList_Check(path_hooks));

  00013	48 8b 44 24 68	 mov	 rax, QWORD PTR path_hooks$[rsp]
  00018	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0001c	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00022	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  00027	85 c0		 test	 eax, eax
  00029	75 1c		 jne	 SHORT $LN15@get_path_i
  0002b	41 b8 6a 03 00
	00		 mov	 r8d, 874		; 0000036aH
  00031	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@NNAILCKC@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DC@EFIJJGPF@?$AAP?$AAy?$AAL?$AAi?$AAs?$AAt?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAp?$AAa?$AAt?$AAh?$AA_?$AAh?$AAo?$AAo?$AAk?$AAs?$AA?$CJ?$AA?$AA@
  0003f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00045	33 c0		 xor	 eax, eax
$LN15@get_path_i:

; 875  :     assert(PyDict_Check(path_importer_cache));

  00047	48 8b 44 24 60	 mov	 rax, QWORD PTR path_importer_cache$[rsp]
  0004c	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00050	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00056	25 00 00 00 20	 and	 eax, 536870912		; 20000000H
  0005b	85 c0		 test	 eax, eax
  0005d	75 1c		 jne	 SHORT $LN16@get_path_i
  0005f	41 b8 6b 03 00
	00		 mov	 r8d, 875		; 0000036bH
  00065	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@NNAILCKC@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@
  0006c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@JIHBLLDG@?$AAP?$AAy?$AAD?$AAi?$AAc?$AAt?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAp?$AAa?$AAt?$AAh?$AA_?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AAe?$AAr?$AA_?$AAc?$AAa?$AAc?$AAh?$AAe@
  00073	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00079	33 c0		 xor	 eax, eax
$LN16@get_path_i:

; 876  : 
; 877  :     nhooks = PyList_Size(path_hooks);

  0007b	48 8b 4c 24 68	 mov	 rcx, QWORD PTR path_hooks$[rsp]
  00080	e8 00 00 00 00	 call	 PyList_Size
  00085	48 89 44 24 20	 mov	 QWORD PTR nhooks$[rsp], rax

; 878  :     if (nhooks < 0)

  0008a	48 83 7c 24 20
	00		 cmp	 QWORD PTR nhooks$[rsp], 0
  00090	7d 07		 jge	 SHORT $LN12@get_path_i

; 879  :         return NULL; /* Shouldn't happen */

  00092	33 c0		 xor	 eax, eax
  00094	e9 15 01 00 00	 jmp	 $LN13@get_path_i
$LN12@get_path_i:

; 880  : 
; 881  :     importer = PyDict_GetItem(path_importer_cache, p);

  00099	48 8b 54 24 70	 mov	 rdx, QWORD PTR p$[rsp]
  0009e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR path_importer_cache$[rsp]
  000a3	e8 00 00 00 00	 call	 PyDict_GetItem
  000a8	48 89 44 24 28	 mov	 QWORD PTR importer$[rsp], rax

; 882  :     if (importer != NULL)

  000ad	48 83 7c 24 28
	00		 cmp	 QWORD PTR importer$[rsp], 0
  000b3	74 0a		 je	 SHORT $LN11@get_path_i

; 883  :         return importer;

  000b5	48 8b 44 24 28	 mov	 rax, QWORD PTR importer$[rsp]
  000ba	e9 ef 00 00 00	 jmp	 $LN13@get_path_i
$LN11@get_path_i:

; 884  : 
; 885  :     /* set path_importer_cache[p] to None to avoid recursion */
; 886  :     if (PyDict_SetItem(path_importer_cache, p, Py_None) != 0)

  000bf	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:_Py_NoneStruct
  000c6	48 8b 54 24 70	 mov	 rdx, QWORD PTR p$[rsp]
  000cb	48 8b 4c 24 60	 mov	 rcx, QWORD PTR path_importer_cache$[rsp]
  000d0	e8 00 00 00 00	 call	 PyDict_SetItem
  000d5	85 c0		 test	 eax, eax
  000d7	74 07		 je	 SHORT $LN10@get_path_i

; 887  :         return NULL;

  000d9	33 c0		 xor	 eax, eax
  000db	e9 ce 00 00 00	 jmp	 $LN13@get_path_i
$LN10@get_path_i:

; 888  : 
; 889  :     for (j = 0; j < nhooks; j++) {

  000e0	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR j$[rsp], 0
  000e9	eb 0d		 jmp	 SHORT $LN9@get_path_i
$LN8@get_path_i:
  000eb	48 8b 44 24 30	 mov	 rax, QWORD PTR j$[rsp]
  000f0	48 ff c0	 inc	 rax
  000f3	48 89 44 24 30	 mov	 QWORD PTR j$[rsp], rax
$LN9@get_path_i:
  000f8	48 8b 44 24 20	 mov	 rax, QWORD PTR nhooks$[rsp]
  000fd	48 39 44 24 30	 cmp	 QWORD PTR j$[rsp], rax
  00102	7d 5f		 jge	 SHORT $LN7@get_path_i

; 890  :         PyObject *hook = PyList_GetItem(path_hooks, j);

  00104	48 8b 54 24 30	 mov	 rdx, QWORD PTR j$[rsp]
  00109	48 8b 4c 24 68	 mov	 rcx, QWORD PTR path_hooks$[rsp]
  0010e	e8 00 00 00 00	 call	 PyList_GetItem
  00113	48 89 44 24 38	 mov	 QWORD PTR hook$122392[rsp], rax

; 891  :         if (hook == NULL)

  00118	48 83 7c 24 38
	00		 cmp	 QWORD PTR hook$122392[rsp], 0
  0011e	75 07		 jne	 SHORT $LN6@get_path_i

; 892  :             return NULL;

  00120	33 c0		 xor	 eax, eax
  00122	e9 87 00 00 00	 jmp	 $LN13@get_path_i
$LN6@get_path_i:

; 893  :         importer = PyObject_CallFunctionObjArgs(hook, p, NULL);

  00127	45 33 c0	 xor	 r8d, r8d
  0012a	48 8b 54 24 70	 mov	 rdx, QWORD PTR p$[rsp]
  0012f	48 8b 4c 24 38	 mov	 rcx, QWORD PTR hook$122392[rsp]
  00134	e8 00 00 00 00	 call	 PyObject_CallFunctionObjArgs
  00139	48 89 44 24 28	 mov	 QWORD PTR importer$[rsp], rax

; 894  :         if (importer != NULL)

  0013e	48 83 7c 24 28
	00		 cmp	 QWORD PTR importer$[rsp], 0
  00144	74 02		 je	 SHORT $LN5@get_path_i

; 895  :             break;

  00146	eb 1b		 jmp	 SHORT $LN7@get_path_i
$LN5@get_path_i:

; 896  : 
; 897  :         if (!PyErr_ExceptionMatches(PyExc_ImportError)) {

  00148	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ImportError
  0014f	e8 00 00 00 00	 call	 PyErr_ExceptionMatches
  00154	85 c0		 test	 eax, eax
  00156	75 04		 jne	 SHORT $LN4@get_path_i

; 898  :             return NULL;

  00158	33 c0		 xor	 eax, eax
  0015a	eb 52		 jmp	 SHORT $LN13@get_path_i
$LN4@get_path_i:

; 899  :         }
; 900  :         PyErr_Clear();

  0015c	e8 00 00 00 00	 call	 PyErr_Clear

; 901  :     }

  00161	eb 88		 jmp	 SHORT $LN8@get_path_i
$LN7@get_path_i:

; 902  :     if (importer == NULL) {

  00163	48 83 7c 24 28
	00		 cmp	 QWORD PTR importer$[rsp], 0
  00169	75 09		 jne	 SHORT $LN3@get_path_i

; 903  :         return Py_None;

  0016b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00172	eb 3a		 jmp	 SHORT $LN13@get_path_i
$LN3@get_path_i:

; 904  :     }
; 905  :     if (importer != NULL) {

  00174	48 83 7c 24 28
	00		 cmp	 QWORD PTR importer$[rsp], 0
  0017a	74 2d		 je	 SHORT $LN2@get_path_i

; 906  :         int err = PyDict_SetItem(path_importer_cache, p, importer);

  0017c	4c 8b 44 24 28	 mov	 r8, QWORD PTR importer$[rsp]
  00181	48 8b 54 24 70	 mov	 rdx, QWORD PTR p$[rsp]
  00186	48 8b 4c 24 60	 mov	 rcx, QWORD PTR path_importer_cache$[rsp]
  0018b	e8 00 00 00 00	 call	 PyDict_SetItem
  00190	89 44 24 40	 mov	 DWORD PTR err$122405[rsp], eax

; 907  :         Py_DECREF(importer);

  00194	48 8b 4c 24 28	 mov	 rcx, QWORD PTR importer$[rsp]
  00199	e8 00 00 00 00	 call	 _Py_DecRef

; 908  :         if (err != 0)

  0019e	83 7c 24 40 00	 cmp	 DWORD PTR err$122405[rsp], 0
  001a3	74 04		 je	 SHORT $LN1@get_path_i

; 909  :             return NULL;

  001a5	33 c0		 xor	 eax, eax
  001a7	eb 05		 jmp	 SHORT $LN13@get_path_i
$LN1@get_path_i:
$LN2@get_path_i:

; 910  :     }
; 911  :     return importer;

  001a9	48 8b 44 24 28	 mov	 rax, QWORD PTR importer$[rsp]
$LN13@get_path_i:

; 912  : }

  001ae	48 83 c4 58	 add	 rsp, 88			; 00000058H
  001b2	c3		 ret	 0
get_path_importer ENDP
_TEXT	ENDS
PUBLIC	??_C@_08PJDEAPCO@?$DMfrozen?$DO?$AA@		; `string'
PUBLIC	??_C@_0CG@NOHGDGK@frozen?5object?5?$CFR?5is?5not?5a?5code?5o@ ; `string'
PUBLIC	??_C@_0CA@MFBBGHEA@Excluded?5frozen?5object?5named?5?$CFR?$AA@ ; `string'
PUBLIC	PyImport_ImportFrozenModuleObject
EXTRN	PyMarshal_ReadObjectFromString:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyImport_ImportFrozenModuleObject DD imagerel $LN16
	DD	imagerel $LN16+536
	DD	imagerel $unwind$PyImport_ImportFrozenModuleObject
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyImport_ImportFrozenModuleObject DD 010901H
	DD	0e209H
xdata	ENDS
;	COMDAT ??_C@_08PJDEAPCO@?$DMfrozen?$DO?$AA@
CONST	SEGMENT
??_C@_08PJDEAPCO@?$DMfrozen?$DO?$AA@ DB '<frozen>', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@NOHGDGK@frozen?5object?5?$CFR?5is?5not?5a?5code?5o@
CONST	SEGMENT
??_C@_0CG@NOHGDGK@frozen?5object?5?$CFR?5is?5not?5a?5code?5o@ DB 'frozen '
	DB	'object %R is not a code object', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@MFBBGHEA@Excluded?5frozen?5object?5named?5?$CFR?$AA@
CONST	SEGMENT
??_C@_0CA@MFBBGHEA@Excluded?5frozen?5object?5named?5?$CFR?$AA@ DB 'Exclud'
	DB	'ed frozen object named %R', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyImport_ImportFrozenModuleObject
_TEXT	SEGMENT
ispackage$ = 32
p$ = 40
size$ = 48
co$ = 56
path$ = 64
m$ = 72
l$122516 = 80
err$122517 = 88
d$122515 = 96
tv74 = 104
name$ = 128
PyImport_ImportFrozenModuleObject PROC			; COMDAT

; 1043 : {

$LN16:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 1044 :     struct _frozen *p;
; 1045 :     PyObject *co, *m, *path;
; 1046 :     int ispackage;
; 1047 :     int size;
; 1048 : 
; 1049 :     p = find_frozen(name);

  00009	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR name$[rsp]
  00011	e8 00 00 00 00	 call	 find_frozen
  00016	48 89 44 24 28	 mov	 QWORD PTR p$[rsp], rax

; 1050 : 
; 1051 :     if (p == NULL)

  0001b	48 83 7c 24 28
	00		 cmp	 QWORD PTR p$[rsp], 0
  00021	75 07		 jne	 SHORT $LN11@PyImport_I@2

; 1052 :         return 0;

  00023	33 c0		 xor	 eax, eax
  00025	e9 e9 01 00 00	 jmp	 $LN12@PyImport_I@2
$LN11@PyImport_I@2:

; 1053 :     if (p->code == NULL) {

  0002a	48 8b 44 24 28	 mov	 rax, QWORD PTR p$[rsp]
  0002f	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00034	75 25		 jne	 SHORT $LN10@PyImport_I@2

; 1054 :         PyErr_Format(PyExc_ImportError,
; 1055 :                      "Excluded frozen object named %R",
; 1056 :                      name);

  00036	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR name$[rsp]
  0003e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CA@MFBBGHEA@Excluded?5frozen?5object?5named?5?$CFR?$AA@
  00045	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ImportError
  0004c	e8 00 00 00 00	 call	 PyErr_Format

; 1057 :         return -1;

  00051	b8 ff ff ff ff	 mov	 eax, -1
  00056	e9 b8 01 00 00	 jmp	 $LN12@PyImport_I@2
$LN10@PyImport_I@2:

; 1058 :     }
; 1059 :     size = p->size;

  0005b	48 8b 44 24 28	 mov	 rax, QWORD PTR p$[rsp]
  00060	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
  00063	89 44 24 30	 mov	 DWORD PTR size$[rsp], eax

; 1060 :     ispackage = (size < 0);

  00067	83 7c 24 30 00	 cmp	 DWORD PTR size$[rsp], 0
  0006c	7d 0a		 jge	 SHORT $LN14@PyImport_I@2
  0006e	c7 44 24 68 01
	00 00 00	 mov	 DWORD PTR tv74[rsp], 1
  00076	eb 08		 jmp	 SHORT $LN15@PyImport_I@2
$LN14@PyImport_I@2:
  00078	c7 44 24 68 00
	00 00 00	 mov	 DWORD PTR tv74[rsp], 0
$LN15@PyImport_I@2:
  00080	8b 44 24 68	 mov	 eax, DWORD PTR tv74[rsp]
  00084	89 44 24 20	 mov	 DWORD PTR ispackage$[rsp], eax

; 1061 :     if (ispackage)

  00088	83 7c 24 20 00	 cmp	 DWORD PTR ispackage$[rsp], 0
  0008d	74 0a		 je	 SHORT $LN9@PyImport_I@2

; 1062 :         size = -size;

  0008f	8b 44 24 30	 mov	 eax, DWORD PTR size$[rsp]
  00093	f7 d8		 neg	 eax
  00095	89 44 24 30	 mov	 DWORD PTR size$[rsp], eax
$LN9@PyImport_I@2:

; 1063 :     co = PyMarshal_ReadObjectFromString((char *)p->code, size);

  00099	48 63 44 24 30	 movsxd	 rax, DWORD PTR size$[rsp]
  0009e	48 8b d0	 mov	 rdx, rax
  000a1	48 8b 44 24 28	 mov	 rax, QWORD PTR p$[rsp]
  000a6	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  000aa	e8 00 00 00 00	 call	 PyMarshal_ReadObjectFromString
  000af	48 89 44 24 38	 mov	 QWORD PTR co$[rsp], rax

; 1064 :     if (co == NULL)

  000b4	48 83 7c 24 38
	00		 cmp	 QWORD PTR co$[rsp], 0
  000ba	75 0a		 jne	 SHORT $LN8@PyImport_I@2

; 1065 :         return -1;

  000bc	b8 ff ff ff ff	 mov	 eax, -1
  000c1	e9 4d 01 00 00	 jmp	 $LN12@PyImport_I@2
$LN8@PyImport_I@2:

; 1066 :     if (!PyCode_Check(co)) {

  000c6	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyCode_Type
  000cd	48 8b 4c 24 38	 mov	 rcx, QWORD PTR co$[rsp]
  000d2	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  000d6	74 20		 je	 SHORT $LN7@PyImport_I@2

; 1067 :         PyErr_Format(PyExc_TypeError,
; 1068 :                      "frozen object %R is not a code object",
; 1069 :                      name);

  000d8	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR name$[rsp]
  000e0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@NOHGDGK@frozen?5object?5?$CFR?5is?5not?5a?5code?5o@
  000e7	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000ee	e8 00 00 00 00	 call	 PyErr_Format

; 1070 :         goto err_return;

  000f3	e9 0c 01 00 00	 jmp	 $err_return$122513
$LN7@PyImport_I@2:

; 1071 :     }
; 1072 :     if (ispackage) {

  000f8	83 7c 24 20 00	 cmp	 DWORD PTR ispackage$[rsp], 0
  000fd	0f 84 98 00 00
	00		 je	 $LN6@PyImport_I@2

; 1073 :         /* Set __path__ to the package name */
; 1074 :         PyObject *d, *l;
; 1075 :         int err;
; 1076 :         m = PyImport_AddModuleObject(name);

  00103	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR name$[rsp]
  0010b	e8 00 00 00 00	 call	 PyImport_AddModuleObject
  00110	48 89 44 24 48	 mov	 QWORD PTR m$[rsp], rax

; 1077 :         if (m == NULL)

  00115	48 83 7c 24 48
	00		 cmp	 QWORD PTR m$[rsp], 0
  0011b	75 05		 jne	 SHORT $LN5@PyImport_I@2

; 1078 :             goto err_return;

  0011d	e9 e2 00 00 00	 jmp	 $err_return$122513
$LN5@PyImport_I@2:

; 1079 :         d = PyModule_GetDict(m);

  00122	48 8b 4c 24 48	 mov	 rcx, QWORD PTR m$[rsp]
  00127	e8 00 00 00 00	 call	 PyModule_GetDict
  0012c	48 89 44 24 60	 mov	 QWORD PTR d$122515[rsp], rax

; 1080 :         l = PyList_New(1);

  00131	b9 01 00 00 00	 mov	 ecx, 1
  00136	e8 00 00 00 00	 call	 PyList_New
  0013b	48 89 44 24 50	 mov	 QWORD PTR l$122516[rsp], rax

; 1081 :         if (l == NULL) {

  00140	48 83 7c 24 50
	00		 cmp	 QWORD PTR l$122516[rsp], 0
  00146	75 05		 jne	 SHORT $LN4@PyImport_I@2

; 1082 :             goto err_return;

  00148	e9 b7 00 00 00	 jmp	 $err_return$122513
$LN4@PyImport_I@2:

; 1083 :         }
; 1084 :         Py_INCREF(name);

  0014d	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR name$[rsp]
  00155	e8 00 00 00 00	 call	 _Py_IncRef

; 1085 :         PyList_SET_ITEM(l, 0, name);

  0015a	48 8b 44 24 50	 mov	 rax, QWORD PTR l$122516[rsp]
  0015f	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00163	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR name$[rsp]
  0016b	48 89 08	 mov	 QWORD PTR [rax], rcx

; 1086 :         err = PyDict_SetItemString(d, "__path__", l);

  0016e	4c 8b 44 24 50	 mov	 r8, QWORD PTR l$122516[rsp]
  00173	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08LPNIDJLN@__path__?$AA@
  0017a	48 8b 4c 24 60	 mov	 rcx, QWORD PTR d$122515[rsp]
  0017f	e8 00 00 00 00	 call	 PyDict_SetItemString
  00184	89 44 24 58	 mov	 DWORD PTR err$122517[rsp], eax

; 1087 :         Py_DECREF(l);

  00188	48 8b 4c 24 50	 mov	 rcx, QWORD PTR l$122516[rsp]
  0018d	e8 00 00 00 00	 call	 _Py_DecRef

; 1088 :         if (err != 0)

  00192	83 7c 24 58 00	 cmp	 DWORD PTR err$122517[rsp], 0
  00197	74 02		 je	 SHORT $LN3@PyImport_I@2

; 1089 :             goto err_return;

  00199	eb 69		 jmp	 SHORT $err_return$122513
$LN3@PyImport_I@2:
$LN6@PyImport_I@2:

; 1090 :     }
; 1091 :     path = PyUnicode_FromString("<frozen>");

  0019b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08PJDEAPCO@?$DMfrozen?$DO?$AA@
  001a2	e8 00 00 00 00	 call	 PyUnicode_FromString
  001a7	48 89 44 24 40	 mov	 QWORD PTR path$[rsp], rax

; 1092 :     if (path == NULL)

  001ac	48 83 7c 24 40
	00		 cmp	 QWORD PTR path$[rsp], 0
  001b2	75 02		 jne	 SHORT $LN2@PyImport_I@2

; 1093 :         goto err_return;

  001b4	eb 4e		 jmp	 SHORT $err_return$122513
$LN2@PyImport_I@2:

; 1094 :     m = PyImport_ExecCodeModuleObject(name, co, path, NULL);

  001b6	45 33 c9	 xor	 r9d, r9d
  001b9	4c 8b 44 24 40	 mov	 r8, QWORD PTR path$[rsp]
  001be	48 8b 54 24 38	 mov	 rdx, QWORD PTR co$[rsp]
  001c3	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR name$[rsp]
  001cb	e8 00 00 00 00	 call	 PyImport_ExecCodeModuleObject
  001d0	48 89 44 24 48	 mov	 QWORD PTR m$[rsp], rax

; 1095 :     Py_DECREF(path);

  001d5	48 8b 4c 24 40	 mov	 rcx, QWORD PTR path$[rsp]
  001da	e8 00 00 00 00	 call	 _Py_DecRef

; 1096 :     if (m == NULL)

  001df	48 83 7c 24 48
	00		 cmp	 QWORD PTR m$[rsp], 0
  001e5	75 02		 jne	 SHORT $LN1@PyImport_I@2

; 1097 :         goto err_return;

  001e7	eb 1b		 jmp	 SHORT $err_return$122513
$LN1@PyImport_I@2:

; 1098 :     Py_DECREF(co);

  001e9	48 8b 4c 24 38	 mov	 rcx, QWORD PTR co$[rsp]
  001ee	e8 00 00 00 00	 call	 _Py_DecRef

; 1099 :     Py_DECREF(m);

  001f3	48 8b 4c 24 48	 mov	 rcx, QWORD PTR m$[rsp]
  001f8	e8 00 00 00 00	 call	 _Py_DecRef

; 1100 :     return 1;

  001fd	b8 01 00 00 00	 mov	 eax, 1
  00202	eb 0f		 jmp	 SHORT $LN12@PyImport_I@2
$err_return$122513:

; 1101 : err_return:
; 1102 :     Py_DECREF(co);

  00204	48 8b 4c 24 38	 mov	 rcx, QWORD PTR co$[rsp]
  00209	e8 00 00 00 00	 call	 _Py_DecRef

; 1103 :     return -1;

  0020e	b8 ff ff ff ff	 mov	 eax, -1
$LN12@PyImport_I@2:

; 1104 : }

  00213	48 83 c4 78	 add	 rsp, 120		; 00000078H
  00217	c3		 ret	 0
PyImport_ImportFrozenModuleObject ENDP
_TEXT	ENDS
EXTRN	PyImport_FrozenModules:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$find_frozen DD imagerel find_frozen
	DD	imagerel find_frozen+100
	DD	imagerel $unwind$find_frozen
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$find_frozen DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT find_frozen
_TEXT	SEGMENT
p$ = 32
name$ = 64
find_frozen PROC					; COMDAT

; 975  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 976  :     struct _frozen *p;
; 977  : 
; 978  :     if (name == NULL)

  00009	48 83 7c 24 40
	00		 cmp	 QWORD PTR name$[rsp], 0
  0000f	75 04		 jne	 SHORT $LN6@find_froze

; 979  :         return NULL;

  00011	33 c0		 xor	 eax, eax
  00013	eb 4a		 jmp	 SHORT $LN7@find_froze
$LN6@find_froze:

; 980  : 
; 981  :     for (p = PyImport_FrozenModules; ; p++) {

  00015	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR PyImport_FrozenModules
  0001c	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax
  00021	eb 0e		 jmp	 SHORT $LN5@find_froze
$LN4@find_froze:
  00023	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00028	48 83 c0 18	 add	 rax, 24
  0002c	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax
$LN5@find_froze:

; 982  :         if (p->name == NULL)

  00031	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00036	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0003a	75 04		 jne	 SHORT $LN2@find_froze

; 983  :             return NULL;

  0003c	33 c0		 xor	 eax, eax
  0003e	eb 1f		 jmp	 SHORT $LN7@find_froze
$LN2@find_froze:

; 984  :         if (PyUnicode_CompareWithASCIIString(name, p->name) == 0)

  00040	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00045	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00048	48 8b 4c 24 40	 mov	 rcx, QWORD PTR name$[rsp]
  0004d	e8 00 00 00 00	 call	 PyUnicode_CompareWithASCIIString
  00052	85 c0		 test	 eax, eax
  00054	75 02		 jne	 SHORT $LN1@find_froze

; 985  :             break;

  00056	eb 02		 jmp	 SHORT $LN3@find_froze
$LN1@find_froze:

; 986  :     }

  00058	eb c9		 jmp	 SHORT $LN4@find_froze
$LN3@find_froze:

; 987  :     return p;

  0005a	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
$LN7@find_froze:

; 988  : }

  0005f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00063	c3		 ret	 0
find_frozen ENDP
_TEXT	ENDS
PUBLIC	PyImport_ImportFrozenModule
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyImport_ImportFrozenModule DD imagerel $LN4
	DD	imagerel $LN4+72
	DD	imagerel $unwind$PyImport_ImportFrozenModule
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyImport_ImportFrozenModule DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyImport_ImportFrozenModule
_TEXT	SEGMENT
nameobj$ = 32
ret$ = 40
name$ = 64
PyImport_ImportFrozenModule PROC			; COMDAT

; 1108 : {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1109 :     PyObject *nameobj;
; 1110 :     int ret;
; 1111 :     nameobj = PyUnicode_InternFromString(name);

  00009	48 8b 4c 24 40	 mov	 rcx, QWORD PTR name$[rsp]
  0000e	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  00013	48 89 44 24 20	 mov	 QWORD PTR nameobj$[rsp], rax

; 1112 :     if (nameobj == NULL)

  00018	48 83 7c 24 20
	00		 cmp	 QWORD PTR nameobj$[rsp], 0
  0001e	75 07		 jne	 SHORT $LN1@PyImport_I@3

; 1113 :         return -1;

  00020	b8 ff ff ff ff	 mov	 eax, -1
  00025	eb 1c		 jmp	 SHORT $LN2@PyImport_I@3
$LN1@PyImport_I@3:

; 1114 :     ret = PyImport_ImportFrozenModuleObject(nameobj);

  00027	48 8b 4c 24 20	 mov	 rcx, QWORD PTR nameobj$[rsp]
  0002c	e8 00 00 00 00	 call	 PyImport_ImportFrozenModuleObject
  00031	89 44 24 28	 mov	 DWORD PTR ret$[rsp], eax

; 1115 :     Py_DECREF(nameobj);

  00035	48 8b 4c 24 20	 mov	 rcx, QWORD PTR nameobj$[rsp]
  0003a	e8 00 00 00 00	 call	 _Py_DecRef

; 1116 :     return ret;

  0003f	8b 44 24 28	 mov	 eax, DWORD PTR ret$[rsp]
$LN2@PyImport_I@3:

; 1117 : }

  00043	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00047	c3		 ret	 0
PyImport_ImportFrozenModule ENDP
_TEXT	ENDS
PUBLIC	PyImport_Import
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyImport_ImportModule DD imagerel $LN4
	DD	imagerel $LN4+71
	DD	imagerel $unwind$PyImport_ImportModule
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyImport_ImportModule DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyImport_ImportModule
_TEXT	SEGMENT
pname$ = 32
result$ = 40
name$ = 64
PyImport_ImportModule PROC				; COMDAT

; 1125 : {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1126 :     PyObject *pname;
; 1127 :     PyObject *result;
; 1128 : 
; 1129 :     pname = PyUnicode_FromString(name);

  00009	48 8b 4c 24 40	 mov	 rcx, QWORD PTR name$[rsp]
  0000e	e8 00 00 00 00	 call	 PyUnicode_FromString
  00013	48 89 44 24 20	 mov	 QWORD PTR pname$[rsp], rax

; 1130 :     if (pname == NULL)

  00018	48 83 7c 24 20
	00		 cmp	 QWORD PTR pname$[rsp], 0
  0001e	75 04		 jne	 SHORT $LN1@PyImport_I@4

; 1131 :         return NULL;

  00020	33 c0		 xor	 eax, eax
  00022	eb 1e		 jmp	 SHORT $LN2@PyImport_I@4
$LN1@PyImport_I@4:

; 1132 :     result = PyImport_Import(pname);

  00024	48 8b 4c 24 20	 mov	 rcx, QWORD PTR pname$[rsp]
  00029	e8 00 00 00 00	 call	 PyImport_Import
  0002e	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax

; 1133 :     Py_DECREF(pname);

  00033	48 8b 4c 24 20	 mov	 rcx, QWORD PTR pname$[rsp]
  00038	e8 00 00 00 00	 call	 _Py_DecRef

; 1134 :     return result;

  0003d	48 8b 44 24 28	 mov	 rax, QWORD PTR result$[rsp]
$LN2@PyImport_I@4:

; 1135 : }

  00042	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00046	c3		 ret	 0
PyImport_ImportModule ENDP
_TEXT	ENDS
PUBLIC	PyImport_ImportModuleNoBlock
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyImport_ImportModuleNoBlock DD imagerel $LN3
	DD	imagerel $LN3+24
	DD	imagerel $unwind$PyImport_ImportModuleNoBlock
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyImport_ImportModuleNoBlock DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyImport_ImportModuleNoBlock
_TEXT	SEGMENT
name$ = 48
PyImport_ImportModuleNoBlock PROC			; COMDAT

; 1148 : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1149 :     return PyImport_ImportModule(name);

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR name$[rsp]
  0000e	e8 00 00 00 00	 call	 PyImport_ImportModule

; 1150 : }

  00013	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00017	c3		 ret	 0
PyImport_ImportModuleNoBlock ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CC@JFELPEKG@?$CFR?5not?5in?5sys?4modules?5as?5expecte@ ; `string'
PUBLIC	??_C@_1DK@MNGDBKLO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAa?$AAb?$AAs?$AA_?$AAn?$AAa?$AAm?$AAe?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DE@OHDPIODH@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAa?$AAb?$AAs?$AA_?$AAn?$AAa?$AAm?$AAe?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DE@DJHHIPKJ@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAf?$AAr?$AAo?$AAn?$AAt?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CO@ICKFNBJB@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAf?$AAr?$AAo?$AAn?$AAt?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1IC@PBKHDADN@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAT?$AAu?$AAp?$AAl?$AAe?$AAO?$AAb?$AAj@ ; `string'
PUBLIC	??_C@_1HM@DNOECPBB@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAT?$AAu?$AAp?$AAl?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt@ ; `string'
PUBLIC	??_C@_0CJ@FDDAKFLB@import?5of?5?$CFR?5halted?$DL?5None?5in?5sys@ ; `string'
PUBLIC	??_C@_0BF@FMMPICPA@__import__?5not?5found?$AA@	; `string'
PUBLIC	??_C@_0DD@GKODJAFA@attempted?5relative?5import?5beyond@ ; `string'
PUBLIC	??_C@_1DI@MAIEAFOJ@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAp?$AAa?$AAc?$AAk?$AAa?$AAg?$AAe?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DC@HMIEBLIE@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAp?$AAa?$AAc?$AAk?$AAa?$AAg?$AAe?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DC@BCOPIKLM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAn?$AAa?$AAm?$AAe?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_0DM@IPEKCNMG@Parent?5module?5?$CFR?5not?5loaded?0?5can@ ; `string'
PUBLIC	??_C@_0BK@EIIOJEDD@__name__?5must?5be?5a?5string?$AA@ ; `string'
PUBLIC	??_C@_0BK@JBIMDHBD@?8__name__?8?5not?5in?5globals?$AA@ ; `string'
PUBLIC	??_C@_0BJ@POADJCGB@package?5must?5be?5a?5string?$AA@ ; `string'
PUBLIC	??_C@_0BD@LPKGOAAE@level?5must?5be?5?$DO?$DN?50?$AA@ ; `string'
PUBLIC	??_C@_1CM@NNIOODFF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAn?$AAa?$AAm?$AAe?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_0BN@KONBMHIP@module?5name?5must?5be?5a?5string?$AA@ ; `string'
PUBLIC	??_C@_0BC@LAFLLONM@Empty?5module?5name?$AA@	; `string'
PUBLIC	??_C@_0BH@LLPACJFC@globals?5must?5be?5a?5dict?$AA@ ; `string'
PUBLIC	PyImport_ImportModuleLevelObject
EXTRN	PyUnicode_Partition:PROC
EXTRN	PyObject_Not:PROC
EXTRN	PyObject_IsTrue:PROC
EXTRN	PyErr_SetImportError:PROC
EXTRN	PyUnicode_FromFormat:PROC
EXTRN	PyUnicode_Join:PROC
EXTRN	PyTuple_Pack:PROC
EXTRN	PyUnicode_Substring:PROC
EXTRN	PyUnicode_FindChar:PROC
EXTRN	PyExc_SystemError:QWORD
EXTRN	PyUnicode_RPartition:PROC
EXTRN	_PyUnicode_FromId:PROC
EXTRN	PyExc_KeyError:QWORD
EXTRN	_PyDict_GetItemId:PROC
EXTRN	_PyUnicode_Ready:PROC
EXTRN	PyExc_ValueError:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyImport_ImportModuleLevelObject DD imagerel $LN116
	DD	imagerel $LN116+3913
	DD	imagerel $unwind$PyImport_ImportModuleLevelObject
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyImport_ImportModuleLevelObject DD 021b01H
	DD	021011bH
xdata	ENDS
;	COMDAT ??_C@_0CC@JFELPEKG@?$CFR?5not?5in?5sys?4modules?5as?5expecte@
CONST	SEGMENT
??_C@_0CC@JFELPEKG@?$CFR?5not?5in?5sys?4modules?5as?5expecte@ DB '%R not '
	DB	'in sys.modules as expected', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1DK@MNGDBKLO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAa?$AAb?$AAs?$AA_?$AAn?$AAa?$AAm?$AAe?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DK@MNGDBKLO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAa?$AAb?$AAs?$AA_?$AAn?$AAa?$AAm?$AAe?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'I', 00H, 'S', 00H, '_', 00H, 'R'
	DB	00H, 'E', 00H, 'A', 00H, 'D', 00H, 'Y', 00H, '(', 00H, 'a', 00H
	DB	'b', 00H, 's', 00H, '_', 00H, 'n', 00H, 'a', 00H, 'm', 00H, 'e'
	DB	00H, ')', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1DE@OHDPIODH@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAa?$AAb?$AAs?$AA_?$AAn?$AAa?$AAm?$AAe?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DE@OHDPIODH@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAa?$AAb?$AAs?$AA_?$AAn?$AAa?$AAm?$AAe?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, 'a', 00H, 'b', 00H, 's', 00H, '_', 00H
	DB	'n', 00H, 'a', 00H, 'm', 00H, 'e', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DE@DJHHIPKJ@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAf?$AAr?$AAo?$AAn?$AAt?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DE@DJHHIPKJ@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAf?$AAr?$AAo?$AAn?$AAt?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'I', 00H, 'S', 00H, '_', 00H, 'R'
	DB	00H, 'E', 00H, 'A', 00H, 'D', 00H, 'Y', 00H, '(', 00H, 'f', 00H
	DB	'r', 00H, 'o', 00H, 'n', 00H, 't', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CO@ICKFNBJB@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAf?$AAr?$AAo?$AAn?$AAt?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CO@ICKFNBJB@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAf?$AAr?$AAo?$AAn?$AAt?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, 'f', 00H, 'r', 00H, 'o', 00H, 'n', 00H
	DB	't', 00H, ')', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1IC@PBKHDADN@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAT?$AAu?$AAp?$AAl?$AAe?$AAO?$AAb?$AAj@
CONST	SEGMENT
??_C@_1IC@PBKHDADN@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAT?$AAu?$AAp?$AAl?$AAe?$AAO?$AAb?$AAj@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'I', 00H, 'S', 00H, '_', 00H, 'R'
	DB	00H, 'E', 00H, 'A', 00H, 'D', 00H, 'Y', 00H, '(', 00H, '(', 00H
	DB	'(', 00H, '(', 00H, 'P', 00H, 'y', 00H, 'T', 00H, 'u', 00H, 'p'
	DB	00H, 'l', 00H, 'e', 00H, 'O', 00H, 'b', 00H, 'j', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, ' ', 00H, '*', 00H, ')', 00H, '(', 00H, 'p'
	DB	00H, 'a', 00H, 'r', 00H, 't', 00H, 'i', 00H, 't', 00H, 'i', 00H
	DB	'o', 00H, 'n', 00H, ')', 00H, ')', 00H, '-', 00H, '>', 00H, 'o'
	DB	00H, 'b', 00H, '_', 00H, 'i', 00H, 't', 00H, 'e', 00H, 'm', 00H
	DB	'[', 00H, '1', 00H, ']', 00H, ')', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1HM@DNOECPBB@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAT?$AAu?$AAp?$AAl?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt@
CONST	SEGMENT
??_C@_1HM@DNOECPBB@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAT?$AAu?$AAp?$AAl?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, '(', 00H, '(', 00H, '(', 00H, 'P', 00H
	DB	'y', 00H, 'T', 00H, 'u', 00H, 'p', 00H, 'l', 00H, 'e', 00H, 'O'
	DB	00H, 'b', 00H, 'j', 00H, 'e', 00H, 'c', 00H, 't', 00H, ' ', 00H
	DB	'*', 00H, ')', 00H, '(', 00H, 'p', 00H, 'a', 00H, 'r', 00H, 't'
	DB	00H, 'i', 00H, 't', 00H, 'i', 00H, 'o', 00H, 'n', 00H, ')', 00H
	DB	')', 00H, '-', 00H, '>', 00H, 'o', 00H, 'b', 00H, '_', 00H, 'i'
	DB	00H, 't', 00H, 'e', 00H, 'm', 00H, '[', 00H, '1', 00H, ']', 00H
	DB	')', 00H, ')', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@FDDAKFLB@import?5of?5?$CFR?5halted?$DL?5None?5in?5sys@
CONST	SEGMENT
??_C@_0CJ@FDDAKFLB@import?5of?5?$CFR?5halted?$DL?5None?5in?5sys@ DB 'impo'
	DB	'rt of %R halted; None in sys.modules', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@FMMPICPA@__import__?5not?5found?$AA@
CONST	SEGMENT
??_C@_0BF@FMMPICPA@__import__?5not?5found?$AA@ DB '__import__ not found', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@GKODJAFA@attempted?5relative?5import?5beyond@
CONST	SEGMENT
??_C@_0DD@GKODJAFA@attempted?5relative?5import?5beyond@ DB 'attempted rel'
	DB	'ative import beyond top-level package', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1DI@MAIEAFOJ@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAp?$AAa?$AAc?$AAk?$AAa?$AAg?$AAe?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DI@MAIEAFOJ@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAp?$AAa?$AAc?$AAk?$AAa?$AAg?$AAe?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'I', 00H, 'S', 00H, '_', 00H, 'R'
	DB	00H, 'E', 00H, 'A', 00H, 'D', 00H, 'Y', 00H, '(', 00H, 'p', 00H
	DB	'a', 00H, 'c', 00H, 'k', 00H, 'a', 00H, 'g', 00H, 'e', 00H, ')'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1DC@HMIEBLIE@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAp?$AAa?$AAc?$AAk?$AAa?$AAg?$AAe?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DC@HMIEBLIE@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAp?$AAa?$AAc?$AAk?$AAa?$AAg?$AAe?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, 'p', 00H, 'a', 00H, 'c', 00H, 'k', 00H
	DB	'a', 00H, 'g', 00H, 'e', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DC@BCOPIKLM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAn?$AAa?$AAm?$AAe?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DC@BCOPIKLM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAn?$AAa?$AAm?$AAe?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'I', 00H, 'S', 00H, '_', 00H, 'R'
	DB	00H, 'E', 00H, 'A', 00H, 'D', 00H, 'Y', 00H, '(', 00H, 'n', 00H
	DB	'a', 00H, 'm', 00H, 'e', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@IPEKCNMG@Parent?5module?5?$CFR?5not?5loaded?0?5can@
CONST	SEGMENT
??_C@_0DM@IPEKCNMG@Parent?5module?5?$CFR?5not?5loaded?0?5can@ DB 'Parent '
	DB	'module %R not loaded, cannot perform relative import', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@EIIOJEDD@__name__?5must?5be?5a?5string?$AA@
CONST	SEGMENT
??_C@_0BK@EIIOJEDD@__name__?5must?5be?5a?5string?$AA@ DB '__name__ must b'
	DB	'e a string', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@JBIMDHBD@?8__name__?8?5not?5in?5globals?$AA@
CONST	SEGMENT
??_C@_0BK@JBIMDHBD@?8__name__?8?5not?5in?5globals?$AA@ DB '''__name__'' n'
	DB	'ot in globals', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@POADJCGB@package?5must?5be?5a?5string?$AA@
CONST	SEGMENT
??_C@_0BJ@POADJCGB@package?5must?5be?5a?5string?$AA@ DB 'package must be '
	DB	'a string', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@LPKGOAAE@level?5must?5be?5?$DO?$DN?50?$AA@
CONST	SEGMENT
??_C@_0BD@LPKGOAAE@level?5must?5be?5?$DO?$DN?50?$AA@ DB 'level must be >='
	DB	' 0', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1CM@NNIOODFF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAn?$AAa?$AAm?$AAe?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CM@NNIOODFF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAn?$AAa?$AAm?$AAe?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, 'n', 00H, 'a', 00H, 'm', 00H, 'e', 00H
	DB	')', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@KONBMHIP@module?5name?5must?5be?5a?5string?$AA@
CONST	SEGMENT
??_C@_0BN@KONBMHIP@module?5name?5must?5be?5a?5string?$AA@ DB 'module name'
	DB	' must be a string', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@LAFLLONM@Empty?5module?5name?$AA@
CONST	SEGMENT
??_C@_0BC@LAFLLONM@Empty?5module?5name?$AA@ DB 'Empty module name', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@LLPACJFC@globals?5must?5be?5a?5dict?$AA@
CONST	SEGMENT
??_C@_0BH@LLPACJFC@globals?5must?5be?5a?5dict?$AA@ DB 'globals must be a '
	DB	'dict', 00H					; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyImport_ImportModuleLevelObject
_TEXT	SEGMENT
globals$ = 48
package$ = 56
abs_name$ = 64
interp$ = 72
fromlist$ = 80
builtins_import$ = 88
final_mod$ = 96
mod$ = 104
partition$122707 = 112
borrowed_dot$122709 = 120
level_up$122741 = 128
base$122739 = 136
last_dot$122731 = 144
borrowed_dot$122755 = 152
seq$122756 = 160
msg$122779 = 168
value$122789 = 176
initializing$122790 = 184
partition$122818 = 192
borrowed_dot$122820 = 200
front$122816 = 208
to_return$122866 = 216
abs_name_len$122858 = 224
cut_off$122845 = 232
tv137 = 240
name$ = 272
given_globals$ = 280
locals$ = 288
given_fromlist$ = 296
level$ = 304
PyImport_ImportModuleLevelObject PROC			; COMDAT

; 1219 : {

$LN116:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H

; 1220 :     _Py_IDENTIFIER(__import__);
; 1221 :     _Py_IDENTIFIER(__initializing__);
; 1222 :     _Py_IDENTIFIER(__package__);
; 1223 :     _Py_IDENTIFIER(__path__);
; 1224 :     _Py_IDENTIFIER(__name__);
; 1225 :     _Py_IDENTIFIER(_find_and_load);
; 1226 :     _Py_IDENTIFIER(_handle_fromlist);
; 1227 :     _Py_IDENTIFIER(_lock_unlock_module);
; 1228 :     _Py_static_string(single_dot, ".");
; 1229 :     PyObject *abs_name = NULL;

  0001b	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR abs_name$[rsp], 0

; 1230 :     PyObject *builtins_import = NULL;

  00024	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR builtins_import$[rsp], 0

; 1231 :     PyObject *final_mod = NULL;

  0002d	48 c7 44 24 60
	00 00 00 00	 mov	 QWORD PTR final_mod$[rsp], 0

; 1232 :     PyObject *mod = NULL;

  00036	48 c7 44 24 68
	00 00 00 00	 mov	 QWORD PTR mod$[rsp], 0

; 1233 :     PyObject *package = NULL;

  0003f	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR package$[rsp], 0

; 1234 :     PyObject *globals = NULL;

  00048	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR globals$[rsp], 0

; 1235 :     PyObject *fromlist = NULL;

  00051	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR fromlist$[rsp], 0

; 1236 :     PyInterpreterState *interp = PyThreadState_GET()->interp;

  0005a	e8 00 00 00 00	 call	 PyThreadState_Get
  0005f	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00063	48 89 44 24 48	 mov	 QWORD PTR interp$[rsp], rax

; 1237 : 
; 1238 :     /* Make sure to use default values so as to not have
; 1239 :        PyObject_CallMethodObjArgs() truncate the parameter list because of a
; 1240 :        NULL argument. */
; 1241 :     if (given_globals == NULL) {

  00068	48 83 bc 24 18
	01 00 00 00	 cmp	 QWORD PTR given_globals$[rsp], 0
  00071	75 19		 jne	 SHORT $LN94@PyImport_I@5

; 1242 :         globals = PyDict_New();

  00073	e8 00 00 00 00	 call	 PyDict_New
  00078	48 89 44 24 30	 mov	 QWORD PTR globals$[rsp], rax

; 1243 :         if (globals == NULL) {

  0007d	48 83 7c 24 30
	00		 cmp	 QWORD PTR globals$[rsp], 0
  00083	75 05		 jne	 SHORT $LN93@PyImport_I@5

; 1244 :             goto error;

  00085	e9 15 0e 00 00	 jmp	 $error$122661
$LN93@PyImport_I@5:

; 1245 :         }
; 1246 :     }
; 1247 :     else {

  0008a	eb 54		 jmp	 SHORT $LN92@PyImport_I@5
$LN94@PyImport_I@5:

; 1248 :         /* Only have to care what given_globals is if it will be used
; 1249 :            for something. */
; 1250 :         if (level > 0 && !PyDict_Check(given_globals)) {

  0008c	83 bc 24 30 01
	00 00 00	 cmp	 DWORD PTR level$[rsp], 0
  00094	7e 33		 jle	 SHORT $LN91@PyImport_I@5
  00096	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR given_globals$[rsp]
  0009e	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000a2	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000a8	25 00 00 00 20	 and	 eax, 536870912		; 20000000H
  000ad	85 c0		 test	 eax, eax
  000af	75 18		 jne	 SHORT $LN91@PyImport_I@5

; 1251 :             PyErr_SetString(PyExc_TypeError, "globals must be a dict");

  000b1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@LLPACJFC@globals?5must?5be?5a?5dict?$AA@
  000b8	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000bf	e8 00 00 00 00	 call	 PyErr_SetString

; 1252 :             goto error;

  000c4	e9 d6 0d 00 00	 jmp	 $error$122661
$LN91@PyImport_I@5:

; 1253 :         }
; 1254 :         globals = given_globals;

  000c9	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR given_globals$[rsp]
  000d1	48 89 44 24 30	 mov	 QWORD PTR globals$[rsp], rax

; 1255 :         Py_INCREF(globals);

  000d6	48 8b 4c 24 30	 mov	 rcx, QWORD PTR globals$[rsp]
  000db	e8 00 00 00 00	 call	 _Py_IncRef
$LN92@PyImport_I@5:

; 1256 :     }
; 1257 : 
; 1258 :     if (given_fromlist == NULL) {

  000e0	48 83 bc 24 28
	01 00 00 00	 cmp	 QWORD PTR given_fromlist$[rsp], 0
  000e9	75 1b		 jne	 SHORT $LN90@PyImport_I@5

; 1259 :         fromlist = PyList_New(0);

  000eb	33 c9		 xor	 ecx, ecx
  000ed	e8 00 00 00 00	 call	 PyList_New
  000f2	48 89 44 24 50	 mov	 QWORD PTR fromlist$[rsp], rax

; 1260 :         if (fromlist == NULL) {

  000f7	48 83 7c 24 50
	00		 cmp	 QWORD PTR fromlist$[rsp], 0
  000fd	75 05		 jne	 SHORT $LN89@PyImport_I@5

; 1261 :             goto error;

  000ff	e9 9b 0d 00 00	 jmp	 $error$122661
$LN89@PyImport_I@5:

; 1262 :         }
; 1263 :     }
; 1264 :     else {

  00104	eb 17		 jmp	 SHORT $LN88@PyImport_I@5
$LN90@PyImport_I@5:

; 1265 :         fromlist = given_fromlist;

  00106	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR given_fromlist$[rsp]
  0010e	48 89 44 24 50	 mov	 QWORD PTR fromlist$[rsp], rax

; 1266 :         Py_INCREF(fromlist);

  00113	48 8b 4c 24 50	 mov	 rcx, QWORD PTR fromlist$[rsp]
  00118	e8 00 00 00 00	 call	 _Py_IncRef
$LN88@PyImport_I@5:

; 1267 :     }
; 1268 :     if (name == NULL) {

  0011d	48 83 bc 24 10
	01 00 00 00	 cmp	 QWORD PTR name$[rsp], 0
  00126	75 18		 jne	 SHORT $LN87@PyImport_I@5

; 1269 :         PyErr_SetString(PyExc_ValueError, "Empty module name");

  00128	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@LAFLLONM@Empty?5module?5name?$AA@
  0012f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00136	e8 00 00 00 00	 call	 PyErr_SetString

; 1270 :         goto error;

  0013b	e9 5f 0d 00 00	 jmp	 $error$122661
$LN87@PyImport_I@5:

; 1271 :     }
; 1272 : 
; 1273 :     /* The below code is importlib.__import__() & _gcd_import(), ported to C
; 1274 :        for added performance. */
; 1275 : 
; 1276 :     if (!PyUnicode_Check(name)) {

  00140	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR name$[rsp]
  00148	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0014c	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00152	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00157	85 c0		 test	 eax, eax
  00159	75 1a		 jne	 SHORT $LN86@PyImport_I@5

; 1277 :         PyErr_SetString(PyExc_TypeError, "module name must be a string");

  0015b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@KONBMHIP@module?5name?5must?5be?5a?5string?$AA@
  00162	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00169	e8 00 00 00 00	 call	 PyErr_SetString

; 1278 :         goto error;

  0016e	e9 2c 0d 00 00	 jmp	 $error$122661
  00173	eb 7c		 jmp	 SHORT $LN85@PyImport_I@5
$LN86@PyImport_I@5:

; 1279 :     }
; 1280 :     else if (PyUnicode_READY(name) < 0) {

  00175	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR name$[rsp]
  0017d	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00181	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00187	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0018c	85 c0		 test	 eax, eax
  0018e	75 1c		 jne	 SHORT $LN97@PyImport_I@5
  00190	41 b8 00 05 00
	00		 mov	 r8d, 1280		; 00000500H
  00196	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@NNAILCKC@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@
  0019d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@NNIOODFF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAn?$AAa?$AAm?$AAe?$AA?$CJ?$AA?$AA@
  001a4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001aa	33 c0		 xor	 eax, eax
$LN97@PyImport_I@5:
  001ac	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR name$[rsp]
  001b4	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  001b7	c1 e8 07	 shr	 eax, 7
  001ba	83 e0 01	 and	 eax, 1
  001bd	85 c0		 test	 eax, eax
  001bf	74 0d		 je	 SHORT $LN98@PyImport_I@5
  001c1	c7 84 24 f0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv137[rsp], 0
  001cc	eb 14		 jmp	 SHORT $LN99@PyImport_I@5
$LN98@PyImport_I@5:
  001ce	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR name$[rsp]
  001d6	e8 00 00 00 00	 call	 _PyUnicode_Ready
  001db	89 84 24 f0 00
	00 00		 mov	 DWORD PTR tv137[rsp], eax
$LN99@PyImport_I@5:
  001e2	83 bc 24 f0 00
	00 00 00	 cmp	 DWORD PTR tv137[rsp], 0
  001ea	7d 05		 jge	 SHORT $LN84@PyImport_I@5

; 1281 :         goto error;

  001ec	e9 ae 0c 00 00	 jmp	 $error$122661
$LN84@PyImport_I@5:
$LN85@PyImport_I@5:

; 1282 :     }
; 1283 :     if (level < 0) {

  001f1	83 bc 24 30 01
	00 00 00	 cmp	 DWORD PTR level$[rsp], 0
  001f9	7d 1d		 jge	 SHORT $LN83@PyImport_I@5

; 1284 :         PyErr_SetString(PyExc_ValueError, "level must be >= 0");

  001fb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@LPKGOAAE@level?5must?5be?5?$DO?$DN?50?$AA@
  00202	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00209	e8 00 00 00 00	 call	 PyErr_SetString

; 1285 :         goto error;

  0020e	e9 8c 0c 00 00	 jmp	 $error$122661
  00213	e9 ab 02 00 00	 jmp	 $LN82@PyImport_I@5
$LN83@PyImport_I@5:

; 1286 :     }
; 1287 :     else if (level > 0) {

  00218	83 bc 24 30 01
	00 00 00	 cmp	 DWORD PTR level$[rsp], 0
  00220	0f 8e f8 01 00
	00		 jle	 $LN81@PyImport_I@5

; 1288 :         package = _PyDict_GetItemId(globals, &PyId___package__);

  00226	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId___package__@?1??PyImport_ImportModuleLevelObject@@9@9
  0022b	8b c0		 mov	 eax, eax
  0022d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00233	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0023c	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00240	48 8b d0	 mov	 rdx, rax
  00243	48 8b 4c 24 30	 mov	 rcx, QWORD PTR globals$[rsp]
  00248	e8 00 00 00 00	 call	 _PyDict_GetItemId
  0024d	48 89 44 24 38	 mov	 QWORD PTR package$[rsp], rax

; 1289 :         if (package != NULL && package != Py_None) {

  00252	48 83 7c 24 38
	00		 cmp	 QWORD PTR package$[rsp], 0
  00258	74 4d		 je	 SHORT $LN80@PyImport_I@5
  0025a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00261	48 39 44 24 38	 cmp	 QWORD PTR package$[rsp], rax
  00266	74 3f		 je	 SHORT $LN80@PyImport_I@5

; 1290 :             Py_INCREF(package);

  00268	48 8b 4c 24 38	 mov	 rcx, QWORD PTR package$[rsp]
  0026d	e8 00 00 00 00	 call	 _Py_IncRef

; 1291 :             if (!PyUnicode_Check(package)) {

  00272	48 8b 44 24 38	 mov	 rax, QWORD PTR package$[rsp]
  00277	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0027b	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00281	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00286	85 c0		 test	 eax, eax
  00288	75 18		 jne	 SHORT $LN79@PyImport_I@5

; 1292 :                 PyErr_SetString(PyExc_TypeError, "package must be a string");

  0028a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@POADJCGB@package?5must?5be?5a?5string?$AA@
  00291	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00298	e8 00 00 00 00	 call	 PyErr_SetString

; 1293 :                 goto error;

  0029d	e9 fd 0b 00 00	 jmp	 $error$122661
$LN79@PyImport_I@5:

; 1294 :             }
; 1295 :         }
; 1296 :         else {

  002a2	e9 3d 01 00 00	 jmp	 $LN78@PyImport_I@5
$LN80@PyImport_I@5:

; 1297 :             package = _PyDict_GetItemId(globals, &PyId___name__);

  002a7	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId___name__@?1??PyImport_ImportModuleLevelObject@@9@9
  002ac	8b c0		 mov	 eax, eax
  002ae	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  002b4	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  002bd	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  002c1	48 8b d0	 mov	 rdx, rax
  002c4	48 8b 4c 24 30	 mov	 rcx, QWORD PTR globals$[rsp]
  002c9	e8 00 00 00 00	 call	 _PyDict_GetItemId
  002ce	48 89 44 24 38	 mov	 QWORD PTR package$[rsp], rax

; 1298 :             if (package == NULL) {

  002d3	48 83 7c 24 38
	00		 cmp	 QWORD PTR package$[rsp], 0
  002d9	75 1a		 jne	 SHORT $LN77@PyImport_I@5

; 1299 :                 PyErr_SetString(PyExc_KeyError, "'__name__' not in globals");

  002db	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@JBIMDHBD@?8__name__?8?5not?5in?5globals?$AA@
  002e2	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_KeyError
  002e9	e8 00 00 00 00	 call	 PyErr_SetString

; 1300 :                 goto error;

  002ee	e9 ac 0b 00 00	 jmp	 $error$122661
  002f3	eb 2b		 jmp	 SHORT $LN76@PyImport_I@5
$LN77@PyImport_I@5:

; 1301 :             }
; 1302 :             else if (!PyUnicode_Check(package)) {

  002f5	48 8b 44 24 38	 mov	 rax, QWORD PTR package$[rsp]
  002fa	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  002fe	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00304	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00309	85 c0		 test	 eax, eax
  0030b	75 13		 jne	 SHORT $LN75@PyImport_I@5

; 1303 :                 PyErr_SetString(PyExc_TypeError, "__name__ must be a string");

  0030d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@EIIOJEDD@__name__?5must?5be?5a?5string?$AA@
  00314	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0031b	e8 00 00 00 00	 call	 PyErr_SetString
$LN75@PyImport_I@5:
$LN76@PyImport_I@5:

; 1304 :             }
; 1305 :             Py_INCREF(package);

  00320	48 8b 4c 24 38	 mov	 rcx, QWORD PTR package$[rsp]
  00325	e8 00 00 00 00	 call	 _Py_IncRef

; 1306 : 
; 1307 :             if (_PyDict_GetItemId(globals, &PyId___path__) == NULL) {

  0032a	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId___path__@?1??PyImport_ImportModuleLevelObject@@9@9
  0032f	8b c0		 mov	 eax, eax
  00331	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00337	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00340	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00344	48 8b d0	 mov	 rdx, rax
  00347	48 8b 4c 24 30	 mov	 rcx, QWORD PTR globals$[rsp]
  0034c	e8 00 00 00 00	 call	 _PyDict_GetItemId
  00351	48 85 c0	 test	 rax, rax
  00354	0f 85 8a 00 00
	00		 jne	 $LN74@PyImport_I@5

; 1308 :                 PyObject *partition = NULL;

  0035a	48 c7 44 24 70
	00 00 00 00	 mov	 QWORD PTR partition$122707[rsp], 0

; 1309 :                 PyObject *borrowed_dot = _PyUnicode_FromId(&single_dot);

  00363	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?single_dot@?1??PyImport_ImportModuleLevelObject@@9@9
  00368	8b c0		 mov	 eax, eax
  0036a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00370	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00379	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0037d	48 8b c8	 mov	 rcx, rax
  00380	e8 00 00 00 00	 call	 _PyUnicode_FromId
  00385	48 89 44 24 78	 mov	 QWORD PTR borrowed_dot$122709[rsp], rax

; 1310 :                 if (borrowed_dot == NULL) {

  0038a	48 83 7c 24 78
	00		 cmp	 QWORD PTR borrowed_dot$122709[rsp], 0
  00390	75 05		 jne	 SHORT $LN73@PyImport_I@5

; 1311 :                     goto error;

  00392	e9 08 0b 00 00	 jmp	 $error$122661
$LN73@PyImport_I@5:

; 1312 :                 }
; 1313 :                 partition = PyUnicode_RPartition(package, borrowed_dot);

  00397	48 8b 54 24 78	 mov	 rdx, QWORD PTR borrowed_dot$122709[rsp]
  0039c	48 8b 4c 24 38	 mov	 rcx, QWORD PTR package$[rsp]
  003a1	e8 00 00 00 00	 call	 PyUnicode_RPartition
  003a6	48 89 44 24 70	 mov	 QWORD PTR partition$122707[rsp], rax

; 1314 :                 Py_DECREF(package);

  003ab	48 8b 4c 24 38	 mov	 rcx, QWORD PTR package$[rsp]
  003b0	e8 00 00 00 00	 call	 _Py_DecRef

; 1315 :                 if (partition == NULL) {

  003b5	48 83 7c 24 70
	00		 cmp	 QWORD PTR partition$122707[rsp], 0
  003bb	75 05		 jne	 SHORT $LN72@PyImport_I@5

; 1316 :                     goto error;

  003bd	e9 dd 0a 00 00	 jmp	 $error$122661
$LN72@PyImport_I@5:

; 1317 :                 }
; 1318 :                 package = PyTuple_GET_ITEM(partition, 0);

  003c2	48 8b 44 24 70	 mov	 rax, QWORD PTR partition$122707[rsp]
  003c7	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  003cb	48 89 44 24 38	 mov	 QWORD PTR package$[rsp], rax

; 1319 :                 Py_INCREF(package);

  003d0	48 8b 4c 24 38	 mov	 rcx, QWORD PTR package$[rsp]
  003d5	e8 00 00 00 00	 call	 _Py_IncRef

; 1320 :                 Py_DECREF(partition);

  003da	48 8b 4c 24 70	 mov	 rcx, QWORD PTR partition$122707[rsp]
  003df	e8 00 00 00 00	 call	 _Py_DecRef
$LN74@PyImport_I@5:
$LN78@PyImport_I@5:

; 1321 :             }
; 1322 :         }
; 1323 : 
; 1324 :         if (PyDict_GetItem(interp->modules, package) == NULL) {

  003e4	48 8b 54 24 38	 mov	 rdx, QWORD PTR package$[rsp]
  003e9	48 8b 44 24 48	 mov	 rax, QWORD PTR interp$[rsp]
  003ee	48 8b 48 10	 mov	 rcx, QWORD PTR [rax+16]
  003f2	e8 00 00 00 00	 call	 PyDict_GetItem
  003f7	48 85 c0	 test	 rax, rax
  003fa	75 1d		 jne	 SHORT $LN71@PyImport_I@5

; 1325 :             PyErr_Format(PyExc_SystemError,
; 1326 :                     "Parent module %R not loaded, cannot perform relative "
; 1327 :                     "import", package);

  003fc	4c 8b 44 24 38	 mov	 r8, QWORD PTR package$[rsp]
  00401	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DM@IPEKCNMG@Parent?5module?5?$CFR?5not?5loaded?0?5can@
  00408	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SystemError
  0040f	e8 00 00 00 00	 call	 PyErr_Format

; 1328 :             goto error;

  00414	e9 86 0a 00 00	 jmp	 $error$122661
$LN71@PyImport_I@5:

; 1329 :         }
; 1330 :     }
; 1331 :     else {  /* level == 0 */

  00419	e9 a5 00 00 00	 jmp	 $LN70@PyImport_I@5
$LN81@PyImport_I@5:

; 1332 :         if (PyUnicode_GET_LENGTH(name) == 0) {

  0041e	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR name$[rsp]
  00426	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0042a	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00430	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00435	85 c0		 test	 eax, eax
  00437	75 1c		 jne	 SHORT $LN100@PyImport_I@5
  00439	41 b8 34 05 00
	00		 mov	 r8d, 1332		; 00000534H
  0043f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@NNAILCKC@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@
  00446	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@NNIOODFF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAn?$AAa?$AAm?$AAe?$AA?$CJ?$AA?$AA@
  0044d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00453	33 c0		 xor	 eax, eax
$LN100@PyImport_I@5:
  00455	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR name$[rsp]
  0045d	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00460	c1 e8 07	 shr	 eax, 7
  00463	83 e0 01	 and	 eax, 1
  00466	85 c0		 test	 eax, eax
  00468	75 1c		 jne	 SHORT $LN101@PyImport_I@5
  0046a	41 b8 34 05 00
	00		 mov	 r8d, 1332		; 00000534H
  00470	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@NNAILCKC@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@
  00477	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DC@BCOPIKLM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAn?$AAa?$AAm?$AAe?$AA?$CJ?$AA?$AA@
  0047e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00484	33 c0		 xor	 eax, eax
$LN101@PyImport_I@5:
  00486	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR name$[rsp]
  0048e	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00493	75 18		 jne	 SHORT $LN69@PyImport_I@5

; 1333 :             PyErr_SetString(PyExc_ValueError, "Empty module name");

  00495	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@LAFLLONM@Empty?5module?5name?$AA@
  0049c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  004a3	e8 00 00 00 00	 call	 PyErr_SetString

; 1334 :             goto error;

  004a8	e9 f2 09 00 00	 jmp	 $error$122661
$LN69@PyImport_I@5:

; 1335 :         }
; 1336 :         package = Py_None;

  004ad	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  004b4	48 89 44 24 38	 mov	 QWORD PTR package$[rsp], rax

; 1337 :         Py_INCREF(package);

  004b9	48 8b 4c 24 38	 mov	 rcx, QWORD PTR package$[rsp]
  004be	e8 00 00 00 00	 call	 _Py_IncRef
$LN70@PyImport_I@5:
$LN82@PyImport_I@5:

; 1338 :     }
; 1339 : 
; 1340 :     if (level > 0) {

  004c3	83 bc 24 30 01
	00 00 00	 cmp	 DWORD PTR level$[rsp], 0
  004cb	0f 8e 77 02 00
	00		 jle	 $LN68@PyImport_I@5

; 1341 :         Py_ssize_t last_dot = PyUnicode_GET_LENGTH(package);

  004d1	48 8b 44 24 38	 mov	 rax, QWORD PTR package$[rsp]
  004d6	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  004da	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  004e0	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  004e5	85 c0		 test	 eax, eax
  004e7	75 1c		 jne	 SHORT $LN102@PyImport_I@5
  004e9	41 b8 3d 05 00
	00		 mov	 r8d, 1341		; 0000053dH
  004ef	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@NNAILCKC@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@
  004f6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DC@HMIEBLIE@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAp?$AAa?$AAc?$AAk?$AAa?$AAg?$AAe?$AA?$CJ?$AA?$AA@
  004fd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00503	33 c0		 xor	 eax, eax
$LN102@PyImport_I@5:
  00505	48 8b 44 24 38	 mov	 rax, QWORD PTR package$[rsp]
  0050a	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0050d	c1 e8 07	 shr	 eax, 7
  00510	83 e0 01	 and	 eax, 1
  00513	85 c0		 test	 eax, eax
  00515	75 1c		 jne	 SHORT $LN103@PyImport_I@5
  00517	41 b8 3d 05 00
	00		 mov	 r8d, 1341		; 0000053dH
  0051d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@NNAILCKC@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@
  00524	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DI@MAIEAFOJ@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAp?$AAa?$AAc?$AAk?$AAa?$AAg?$AAe?$AA?$CJ?$AA?$AA@
  0052b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00531	33 c0		 xor	 eax, eax
$LN103@PyImport_I@5:
  00533	48 8b 44 24 38	 mov	 rax, QWORD PTR package$[rsp]
  00538	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0053c	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR last_dot$122731[rsp], rax

; 1342 :         PyObject *base = NULL;

  00544	48 c7 84 24 88
	00 00 00 00 00
	00 00		 mov	 QWORD PTR base$122739[rsp], 0

; 1343 :         int level_up = 1;

  00550	c7 84 24 80 00
	00 00 01 00 00
	00		 mov	 DWORD PTR level_up$122741[rsp], 1

; 1344 : 
; 1345 :         for (level_up = 1; level_up < level; level_up += 1) {

  0055b	c7 84 24 80 00
	00 00 01 00 00
	00		 mov	 DWORD PTR level_up$122741[rsp], 1
  00566	eb 10		 jmp	 SHORT $LN67@PyImport_I@5
$LN66@PyImport_I@5:
  00568	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR level_up$122741[rsp]
  0056f	ff c0		 inc	 eax
  00571	89 84 24 80 00
	00 00		 mov	 DWORD PTR level_up$122741[rsp], eax
$LN67@PyImport_I@5:
  00578	8b 84 24 30 01
	00 00		 mov	 eax, DWORD PTR level$[rsp]
  0057f	39 84 24 80 00
	00 00		 cmp	 DWORD PTR level_up$122741[rsp], eax
  00586	7d 64		 jge	 SHORT $LN65@PyImport_I@5

; 1346 :             last_dot = PyUnicode_FindChar(package, '.', 0, last_dot, -1);

  00588	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR [rsp+32], -1
  00590	4c 8b 8c 24 90
	00 00 00	 mov	 r9, QWORD PTR last_dot$122731[rsp]
  00598	45 33 c0	 xor	 r8d, r8d
  0059b	ba 2e 00 00 00	 mov	 edx, 46			; 0000002eH
  005a0	48 8b 4c 24 38	 mov	 rcx, QWORD PTR package$[rsp]
  005a5	e8 00 00 00 00	 call	 PyUnicode_FindChar
  005aa	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR last_dot$122731[rsp], rax

; 1347 :             if (last_dot == -2) {

  005b2	48 83 bc 24 90
	00 00 00 fe	 cmp	 QWORD PTR last_dot$122731[rsp], -2
  005bb	75 07		 jne	 SHORT $LN64@PyImport_I@5

; 1348 :                 goto error;

  005bd	e9 dd 08 00 00	 jmp	 $error$122661
  005c2	eb 23		 jmp	 SHORT $LN63@PyImport_I@5
$LN64@PyImport_I@5:

; 1349 :             }
; 1350 :             else if (last_dot == -1) {

  005c4	48 83 bc 24 90
	00 00 00 ff	 cmp	 QWORD PTR last_dot$122731[rsp], -1
  005cd	75 18		 jne	 SHORT $LN62@PyImport_I@5

; 1351 :                 PyErr_SetString(PyExc_ValueError,
; 1352 :                                 "attempted relative import beyond top-level "
; 1353 :                                 "package");

  005cf	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DD@GKODJAFA@attempted?5relative?5import?5beyond@
  005d6	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  005dd	e8 00 00 00 00	 call	 PyErr_SetString

; 1354 :                 goto error;

  005e2	e9 b8 08 00 00	 jmp	 $error$122661
$LN62@PyImport_I@5:
$LN63@PyImport_I@5:

; 1355 :             }
; 1356 :         }

  005e7	e9 7c ff ff ff	 jmp	 $LN66@PyImport_I@5
$LN65@PyImport_I@5:

; 1357 :         base = PyUnicode_Substring(package, 0, last_dot);

  005ec	4c 8b 84 24 90
	00 00 00	 mov	 r8, QWORD PTR last_dot$122731[rsp]
  005f4	33 d2		 xor	 edx, edx
  005f6	48 8b 4c 24 38	 mov	 rcx, QWORD PTR package$[rsp]
  005fb	e8 00 00 00 00	 call	 PyUnicode_Substring
  00600	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR base$122739[rsp], rax

; 1358 :         if (PyUnicode_GET_LENGTH(name) > 0) {

  00608	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR name$[rsp]
  00610	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00614	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0061a	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0061f	85 c0		 test	 eax, eax
  00621	75 1c		 jne	 SHORT $LN104@PyImport_I@5
  00623	41 b8 4e 05 00
	00		 mov	 r8d, 1358		; 0000054eH
  00629	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@NNAILCKC@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@
  00630	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@NNIOODFF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAn?$AAa?$AAm?$AAe?$AA?$CJ?$AA?$AA@
  00637	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0063d	33 c0		 xor	 eax, eax
$LN104@PyImport_I@5:
  0063f	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR name$[rsp]
  00647	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0064a	c1 e8 07	 shr	 eax, 7
  0064d	83 e0 01	 and	 eax, 1
  00650	85 c0		 test	 eax, eax
  00652	75 1c		 jne	 SHORT $LN105@PyImport_I@5
  00654	41 b8 4e 05 00
	00		 mov	 r8d, 1358		; 0000054eH
  0065a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@NNAILCKC@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@
  00661	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DC@BCOPIKLM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAn?$AAa?$AAm?$AAe?$AA?$CJ?$AA?$AA@
  00668	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0066e	33 c0		 xor	 eax, eax
$LN105@PyImport_I@5:
  00670	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR name$[rsp]
  00678	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  0067d	0f 8e b6 00 00
	00		 jle	 $LN61@PyImport_I@5

; 1359 :             PyObject *borrowed_dot, *seq = NULL;

  00683	48 c7 84 24 a0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR seq$122756[rsp], 0

; 1360 : 
; 1361 :             borrowed_dot = _PyUnicode_FromId(&single_dot);

  0068f	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?single_dot@?1??PyImport_ImportModuleLevelObject@@9@9
  00694	8b c0		 mov	 eax, eax
  00696	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0069c	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  006a5	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  006a9	48 8b c8	 mov	 rcx, rax
  006ac	e8 00 00 00 00	 call	 _PyUnicode_FromId
  006b1	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR borrowed_dot$122755[rsp], rax

; 1362 :             seq = PyTuple_Pack(2, base, name);

  006b9	4c 8b 84 24 10
	01 00 00	 mov	 r8, QWORD PTR name$[rsp]
  006c1	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR base$122739[rsp]
  006c9	b9 02 00 00 00	 mov	 ecx, 2
  006ce	e8 00 00 00 00	 call	 PyTuple_Pack
  006d3	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR seq$122756[rsp], rax

; 1363 :             Py_DECREF(base);

  006db	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR base$122739[rsp]
  006e3	e8 00 00 00 00	 call	 _Py_DecRef

; 1364 :             if (borrowed_dot == NULL || seq == NULL) {

  006e8	48 83 bc 24 98
	00 00 00 00	 cmp	 QWORD PTR borrowed_dot$122755[rsp], 0
  006f1	74 0b		 je	 SHORT $LN59@PyImport_I@5
  006f3	48 83 bc 24 a0
	00 00 00 00	 cmp	 QWORD PTR seq$122756[rsp], 0
  006fc	75 05		 jne	 SHORT $LN60@PyImport_I@5
$LN59@PyImport_I@5:

; 1365 :                 goto error;

  006fe	e9 9c 07 00 00	 jmp	 $error$122661
$LN60@PyImport_I@5:

; 1366 :             }
; 1367 : 
; 1368 :             abs_name = PyUnicode_Join(borrowed_dot, seq);

  00703	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR seq$122756[rsp]
  0070b	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR borrowed_dot$122755[rsp]
  00713	e8 00 00 00 00	 call	 PyUnicode_Join
  00718	48 89 44 24 40	 mov	 QWORD PTR abs_name$[rsp], rax

; 1369 :             Py_DECREF(seq);

  0071d	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR seq$122756[rsp]
  00725	e8 00 00 00 00	 call	 _Py_DecRef

; 1370 :             if (abs_name == NULL) {

  0072a	48 83 7c 24 40
	00		 cmp	 QWORD PTR abs_name$[rsp], 0
  00730	75 05		 jne	 SHORT $LN58@PyImport_I@5

; 1371 :                 goto error;

  00732	e9 68 07 00 00	 jmp	 $error$122661
$LN58@PyImport_I@5:

; 1372 :             }
; 1373 :         }
; 1374 :         else {

  00737	eb 0d		 jmp	 SHORT $LN57@PyImport_I@5
$LN61@PyImport_I@5:

; 1375 :             abs_name = base;

  00739	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR base$122739[rsp]
  00741	48 89 44 24 40	 mov	 QWORD PTR abs_name$[rsp], rax
$LN57@PyImport_I@5:

; 1376 :         }
; 1377 :     }
; 1378 :     else {

  00746	eb 17		 jmp	 SHORT $LN56@PyImport_I@5
$LN68@PyImport_I@5:

; 1379 :         abs_name = name;

  00748	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR name$[rsp]
  00750	48 89 44 24 40	 mov	 QWORD PTR abs_name$[rsp], rax

; 1380 :         Py_INCREF(abs_name);

  00755	48 8b 4c 24 40	 mov	 rcx, QWORD PTR abs_name$[rsp]
  0075a	e8 00 00 00 00	 call	 _Py_IncRef
$LN56@PyImport_I@5:

; 1381 :     }
; 1382 : 
; 1383 : #ifdef WITH_THREAD
; 1384 :     _PyImport_AcquireLock();

  0075f	e8 00 00 00 00	 call	 _PyImport_AcquireLock

; 1385 : #endif
; 1386 :    /* From this point forward, goto error_with_unlock! */
; 1387 :     if (PyDict_Check(globals)) {

  00764	48 8b 44 24 30	 mov	 rax, QWORD PTR globals$[rsp]
  00769	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0076d	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00773	25 00 00 00 20	 and	 eax, 536870912		; 20000000H
  00778	85 c0		 test	 eax, eax
  0077a	74 2c		 je	 SHORT $LN55@PyImport_I@5

; 1388 :         builtins_import = _PyDict_GetItemId(globals, &PyId___import__);

  0077c	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId___import__@?1??PyImport_ImportModuleLevelObject@@9@9
  00781	8b c0		 mov	 eax, eax
  00783	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00789	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00792	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00796	48 8b d0	 mov	 rdx, rax
  00799	48 8b 4c 24 30	 mov	 rcx, QWORD PTR globals$[rsp]
  0079e	e8 00 00 00 00	 call	 _PyDict_GetItemId
  007a3	48 89 44 24 58	 mov	 QWORD PTR builtins_import$[rsp], rax
$LN55@PyImport_I@5:

; 1389 :     }
; 1390 :     if (builtins_import == NULL) {

  007a8	48 83 7c 24 58
	00		 cmp	 QWORD PTR builtins_import$[rsp], 0
  007ae	75 50		 jne	 SHORT $LN54@PyImport_I@5

; 1391 :         builtins_import = _PyDict_GetItemId(interp->builtins, &PyId___import__);

  007b0	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId___import__@?1??PyImport_ImportModuleLevelObject@@9@9
  007b5	8b c0		 mov	 eax, eax
  007b7	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  007bd	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  007c6	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  007ca	48 8b d0	 mov	 rdx, rax
  007cd	48 8b 44 24 48	 mov	 rax, QWORD PTR interp$[rsp]
  007d2	48 8b 48 28	 mov	 rcx, QWORD PTR [rax+40]
  007d6	e8 00 00 00 00	 call	 _PyDict_GetItemId
  007db	48 89 44 24 58	 mov	 QWORD PTR builtins_import$[rsp], rax

; 1392 :         if (builtins_import == NULL) {

  007e0	48 83 7c 24 58
	00		 cmp	 QWORD PTR builtins_import$[rsp], 0
  007e6	75 18		 jne	 SHORT $LN53@PyImport_I@5

; 1393 :             PyErr_SetString(PyExc_ImportError, "__import__ not found");

  007e8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BF@FMMPICPA@__import__?5not?5found?$AA@
  007ef	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ImportError
  007f6	e8 00 00 00 00	 call	 PyErr_SetString

; 1394 :             goto error_with_unlock;

  007fb	e9 83 06 00 00	 jmp	 $error_with_unlock$122776
$LN53@PyImport_I@5:
$LN54@PyImport_I@5:

; 1395 :         }
; 1396 :     }
; 1397 :     Py_INCREF(builtins_import);

  00800	48 8b 4c 24 58	 mov	 rcx, QWORD PTR builtins_import$[rsp]
  00805	e8 00 00 00 00	 call	 _Py_IncRef

; 1398 : 
; 1399 :     mod = PyDict_GetItem(interp->modules, abs_name);

  0080a	48 8b 54 24 40	 mov	 rdx, QWORD PTR abs_name$[rsp]
  0080f	48 8b 44 24 48	 mov	 rax, QWORD PTR interp$[rsp]
  00814	48 8b 48 10	 mov	 rcx, QWORD PTR [rax+16]
  00818	e8 00 00 00 00	 call	 PyDict_GetItem
  0081d	48 89 44 24 68	 mov	 QWORD PTR mod$[rsp], rax

; 1400 :     if (mod == Py_None) {

  00822	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00829	48 39 44 24 68	 cmp	 QWORD PTR mod$[rsp], rax
  0082e	75 59		 jne	 SHORT $LN52@PyImport_I@5

; 1401 :         PyObject *msg = PyUnicode_FromFormat("import of %R halted; "
; 1402 :                                              "None in sys.modules", abs_name);

  00830	48 8b 54 24 40	 mov	 rdx, QWORD PTR abs_name$[rsp]
  00835	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CJ@FDDAKFLB@import?5of?5?$CFR?5halted?$DL?5None?5in?5sys@
  0083c	e8 00 00 00 00	 call	 PyUnicode_FromFormat
  00841	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR msg$122779[rsp], rax

; 1403 :         if (msg != NULL) {

  00849	48 83 bc 24 a8
	00 00 00 00	 cmp	 QWORD PTR msg$122779[rsp], 0
  00852	74 22		 je	 SHORT $LN51@PyImport_I@5

; 1404 :             PyErr_SetImportError(msg, abs_name, NULL);

  00854	45 33 c0	 xor	 r8d, r8d
  00857	48 8b 54 24 40	 mov	 rdx, QWORD PTR abs_name$[rsp]
  0085c	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR msg$122779[rsp]
  00864	e8 00 00 00 00	 call	 PyErr_SetImportError

; 1405 :             Py_DECREF(msg);

  00869	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR msg$122779[rsp]
  00871	e8 00 00 00 00	 call	 _Py_DecRef
$LN51@PyImport_I@5:

; 1406 :         }
; 1407 :         mod = NULL;

  00876	48 c7 44 24 68
	00 00 00 00	 mov	 QWORD PTR mod$[rsp], 0

; 1408 :         goto error_with_unlock;

  0087f	e9 ff 05 00 00	 jmp	 $error_with_unlock$122776
  00884	e9 69 01 00 00	 jmp	 $LN50@PyImport_I@5
$LN52@PyImport_I@5:

; 1409 :     }
; 1410 :     else if (mod != NULL) {

  00889	48 83 7c 24 68
	00		 cmp	 QWORD PTR mod$[rsp], 0
  0088f	0f 84 0d 01 00
	00		 je	 $LN49@PyImport_I@5

; 1411 :         PyObject *value;
; 1412 :         int initializing = 0;

  00895	c7 84 24 b8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR initializing$122790[rsp], 0

; 1413 : 
; 1414 :         Py_INCREF(mod);

  008a0	48 8b 4c 24 68	 mov	 rcx, QWORD PTR mod$[rsp]
  008a5	e8 00 00 00 00	 call	 _Py_IncRef

; 1415 :         /* Optimization: only call _bootstrap._lock_unlock_module() if
; 1416 :            __initializing__ is true.
; 1417 :            NOTE: because of this, __initializing__ must be set *before*
; 1418 :            stuffing the new module in sys.modules.
; 1419 :          */
; 1420 :         value = _PyObject_GetAttrId(mod, &PyId___initializing__);

  008aa	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId___initializing__@?1??PyImport_ImportModuleLevelObject@@9@9
  008af	8b c0		 mov	 eax, eax
  008b1	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  008b7	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  008c0	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  008c4	48 8b d0	 mov	 rdx, rax
  008c7	48 8b 4c 24 68	 mov	 rcx, QWORD PTR mod$[rsp]
  008cc	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  008d1	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR value$122789[rsp], rax

; 1421 :         if (value == NULL)

  008d9	48 83 bc 24 b0
	00 00 00 00	 cmp	 QWORD PTR value$122789[rsp], 0
  008e2	75 07		 jne	 SHORT $LN48@PyImport_I@5

; 1422 :             PyErr_Clear();

  008e4	e8 00 00 00 00	 call	 PyErr_Clear

; 1423 :         else {

  008e9	eb 30		 jmp	 SHORT $LN47@PyImport_I@5
$LN48@PyImport_I@5:

; 1424 :             initializing = PyObject_IsTrue(value);

  008eb	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR value$122789[rsp]
  008f3	e8 00 00 00 00	 call	 PyObject_IsTrue
  008f8	89 84 24 b8 00
	00 00		 mov	 DWORD PTR initializing$122790[rsp], eax

; 1425 :             Py_DECREF(value);

  008ff	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR value$122789[rsp]
  00907	e8 00 00 00 00	 call	 _Py_DecRef

; 1426 :             if (initializing == -1)

  0090c	83 bc 24 b8 00
	00 00 ff	 cmp	 DWORD PTR initializing$122790[rsp], -1
  00914	75 05		 jne	 SHORT $LN46@PyImport_I@5

; 1427 :                 PyErr_Clear();

  00916	e8 00 00 00 00	 call	 PyErr_Clear
$LN46@PyImport_I@5:
$LN47@PyImport_I@5:

; 1428 :         }
; 1429 :         if (initializing > 0) {

  0091b	83 bc 24 b8 00
	00 00 00	 cmp	 DWORD PTR initializing$122790[rsp], 0
  00923	7e 5a		 jle	 SHORT $LN45@PyImport_I@5

; 1430 :             /* _bootstrap._lock_unlock_module() releases the import lock */
; 1431 :             value = _PyObject_CallMethodObjIdArgs(interp->importlib,
; 1432 :                                             &PyId__lock_unlock_module, abs_name,
; 1433 :                                             NULL);

  00925	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId__lock_unlock_module@?1??PyImport_ImportModuleLevelObject@@9@9
  0092a	8b c0		 mov	 eax, eax
  0092c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00932	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0093b	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0093f	45 33 c9	 xor	 r9d, r9d
  00942	4c 8b 44 24 40	 mov	 r8, QWORD PTR abs_name$[rsp]
  00947	48 8b d0	 mov	 rdx, rax
  0094a	48 8b 44 24 48	 mov	 rax, QWORD PTR interp$[rsp]
  0094f	48 8b 48 30	 mov	 rcx, QWORD PTR [rax+48]
  00953	e8 00 00 00 00	 call	 _PyObject_CallMethodObjIdArgs
  00958	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR value$122789[rsp], rax

; 1434 :             if (value == NULL)

  00960	48 83 bc 24 b0
	00 00 00 00	 cmp	 QWORD PTR value$122789[rsp], 0
  00969	75 05		 jne	 SHORT $LN44@PyImport_I@5

; 1435 :                 goto error;

  0096b	e9 2f 05 00 00	 jmp	 $error$122661
$LN44@PyImport_I@5:

; 1436 :             Py_DECREF(value);

  00970	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR value$122789[rsp]
  00978	e8 00 00 00 00	 call	 _Py_DecRef

; 1437 :         }
; 1438 :         else {

  0097d	eb 21		 jmp	 SHORT $LN43@PyImport_I@5
$LN45@PyImport_I@5:

; 1439 : #ifdef WITH_THREAD
; 1440 :             if (_PyImport_ReleaseLock() < 0) {

  0097f	e8 00 00 00 00	 call	 _PyImport_ReleaseLock
  00984	85 c0		 test	 eax, eax
  00986	7d 18		 jge	 SHORT $LN42@PyImport_I@5

; 1441 :                 PyErr_SetString(PyExc_RuntimeError, "not holding the import lock");

  00988	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@JAELALKO@not?5holding?5the?5import?5lock?$AA@
  0098f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeError
  00996	e8 00 00 00 00	 call	 PyErr_SetString

; 1442 :                 goto error;

  0099b	e9 ff 04 00 00	 jmp	 $error$122661
$LN42@PyImport_I@5:
$LN43@PyImport_I@5:

; 1443 :             }
; 1444 : #endif
; 1445 :         }
; 1446 :     }
; 1447 :     else {

  009a0	eb 50		 jmp	 SHORT $LN41@PyImport_I@5
$LN49@PyImport_I@5:

; 1448 :         /* _bootstrap._find_and_load() releases the import lock */
; 1449 :         mod = _PyObject_CallMethodObjIdArgs(interp->importlib,
; 1450 :                                             &PyId__find_and_load, abs_name,
; 1451 :                                             builtins_import, NULL);

  009a2	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId__find_and_load@?1??PyImport_ImportModuleLevelObject@@9@9
  009a7	8b c0		 mov	 eax, eax
  009a9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  009af	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  009b8	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  009bc	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  009c5	4c 8b 4c 24 58	 mov	 r9, QWORD PTR builtins_import$[rsp]
  009ca	4c 8b 44 24 40	 mov	 r8, QWORD PTR abs_name$[rsp]
  009cf	48 8b d0	 mov	 rdx, rax
  009d2	48 8b 44 24 48	 mov	 rax, QWORD PTR interp$[rsp]
  009d7	48 8b 48 30	 mov	 rcx, QWORD PTR [rax+48]
  009db	e8 00 00 00 00	 call	 _PyObject_CallMethodObjIdArgs
  009e0	48 89 44 24 68	 mov	 QWORD PTR mod$[rsp], rax

; 1452 :         if (mod == NULL) {

  009e5	48 83 7c 24 68
	00		 cmp	 QWORD PTR mod$[rsp], 0
  009eb	75 05		 jne	 SHORT $LN40@PyImport_I@5

; 1453 :             goto error;

  009ed	e9 ad 04 00 00	 jmp	 $error$122661
$LN40@PyImport_I@5:
$LN41@PyImport_I@5:
$LN50@PyImport_I@5:

; 1454 :         }
; 1455 :     }
; 1456 :     /* From now on we don't hold the import lock anymore. */
; 1457 : 
; 1458 :     if (PyObject_Not(fromlist)) {

  009f2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR fromlist$[rsp]
  009f7	e8 00 00 00 00	 call	 PyObject_Not
  009fc	85 c0		 test	 eax, eax
  009fe	0f 84 30 04 00
	00		 je	 $LN39@PyImport_I@5

; 1459 :         if (level == 0 || PyUnicode_GET_LENGTH(name) > 0) {

  00a04	83 bc 24 30 01
	00 00 00	 cmp	 DWORD PTR level$[rsp], 0
  00a0c	74 7b		 je	 SHORT $LN37@PyImport_I@5
  00a0e	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR name$[rsp]
  00a16	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00a1a	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00a20	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00a25	85 c0		 test	 eax, eax
  00a27	75 1c		 jne	 SHORT $LN106@PyImport_I@5
  00a29	41 b8 b3 05 00
	00		 mov	 r8d, 1459		; 000005b3H
  00a2f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@NNAILCKC@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@
  00a36	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@NNIOODFF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAn?$AAa?$AAm?$AAe?$AA?$CJ?$AA?$AA@
  00a3d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00a43	33 c0		 xor	 eax, eax
$LN106@PyImport_I@5:
  00a45	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR name$[rsp]
  00a4d	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00a50	c1 e8 07	 shr	 eax, 7
  00a53	83 e0 01	 and	 eax, 1
  00a56	85 c0		 test	 eax, eax
  00a58	75 1c		 jne	 SHORT $LN107@PyImport_I@5
  00a5a	41 b8 b3 05 00
	00		 mov	 r8d, 1459		; 000005b3H
  00a60	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@NNAILCKC@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@
  00a67	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DC@BCOPIKLM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAn?$AAa?$AAm?$AAe?$AA?$CJ?$AA?$AA@
  00a6e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00a74	33 c0		 xor	 eax, eax
$LN107@PyImport_I@5:
  00a76	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR name$[rsp]
  00a7e	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00a83	0f 8e 95 03 00
	00		 jle	 $LN38@PyImport_I@5
$LN37@PyImport_I@5:

; 1460 :             PyObject *front = NULL;

  00a89	48 c7 84 24 d0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR front$122816[rsp], 0

; 1461 :             PyObject *partition = NULL;

  00a95	48 c7 84 24 c0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR partition$122818[rsp], 0

; 1462 :             PyObject *borrowed_dot = _PyUnicode_FromId(&single_dot);

  00aa1	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?single_dot@?1??PyImport_ImportModuleLevelObject@@9@9
  00aa6	8b c0		 mov	 eax, eax
  00aa8	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00aae	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00ab7	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00abb	48 8b c8	 mov	 rcx, rax
  00abe	e8 00 00 00 00	 call	 _PyUnicode_FromId
  00ac3	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR borrowed_dot$122820[rsp], rax

; 1463 : 
; 1464 :             if (borrowed_dot == NULL) {

  00acb	48 83 bc 24 c8
	00 00 00 00	 cmp	 QWORD PTR borrowed_dot$122820[rsp], 0
  00ad4	75 05		 jne	 SHORT $LN36@PyImport_I@5

; 1465 :                 goto error;

  00ad6	e9 c4 03 00 00	 jmp	 $error$122661
$LN36@PyImport_I@5:

; 1466 :             }
; 1467 : 
; 1468 :             partition = PyUnicode_Partition(name, borrowed_dot);

  00adb	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR borrowed_dot$122820[rsp]
  00ae3	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR name$[rsp]
  00aeb	e8 00 00 00 00	 call	 PyUnicode_Partition
  00af0	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR partition$122818[rsp], rax

; 1469 :             if (partition == NULL) {

  00af8	48 83 bc 24 c0
	00 00 00 00	 cmp	 QWORD PTR partition$122818[rsp], 0
  00b01	75 05		 jne	 SHORT $LN35@PyImport_I@5

; 1470 :                 goto error;

  00b03	e9 97 03 00 00	 jmp	 $error$122661
$LN35@PyImport_I@5:

; 1471 :             }
; 1472 : 
; 1473 :             if (PyUnicode_GET_LENGTH(PyTuple_GET_ITEM(partition, 1)) == 0) {

  00b08	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR partition$122818[rsp]
  00b10	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  00b14	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00b18	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00b1e	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00b23	85 c0		 test	 eax, eax
  00b25	75 1c		 jne	 SHORT $LN108@PyImport_I@5
  00b27	41 b8 c1 05 00
	00		 mov	 r8d, 1473		; 000005c1H
  00b2d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@NNAILCKC@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@
  00b34	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1HM@DNOECPBB@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAT?$AAu?$AAp?$AAl?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt@
  00b3b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00b41	33 c0		 xor	 eax, eax
$LN108@PyImport_I@5:
  00b43	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR partition$122818[rsp]
  00b4b	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  00b4f	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00b52	c1 e8 07	 shr	 eax, 7
  00b55	83 e0 01	 and	 eax, 1
  00b58	85 c0		 test	 eax, eax
  00b5a	75 1c		 jne	 SHORT $LN109@PyImport_I@5
  00b5c	41 b8 c1 05 00
	00		 mov	 r8d, 1473		; 000005c1H
  00b62	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@NNAILCKC@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@
  00b69	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1IC@PBKHDADN@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAT?$AAu?$AAp?$AAl?$AAe?$AAO?$AAb?$AAj@
  00b70	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00b76	33 c0		 xor	 eax, eax
$LN109@PyImport_I@5:
  00b78	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR partition$122818[rsp]
  00b80	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  00b84	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00b89	75 26		 jne	 SHORT $LN34@PyImport_I@5

; 1474 :                 /* No dot in module name, simple exit */
; 1475 :                 Py_DECREF(partition);

  00b8b	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR partition$122818[rsp]
  00b93	e8 00 00 00 00	 call	 _Py_DecRef

; 1476 :                 final_mod = mod;

  00b98	48 8b 44 24 68	 mov	 rax, QWORD PTR mod$[rsp]
  00b9d	48 89 44 24 60	 mov	 QWORD PTR final_mod$[rsp], rax

; 1477 :                 Py_INCREF(mod);

  00ba2	48 8b 4c 24 68	 mov	 rcx, QWORD PTR mod$[rsp]
  00ba7	e8 00 00 00 00	 call	 _Py_IncRef

; 1478 :                 goto error;

  00bac	e9 ee 02 00 00	 jmp	 $error$122661
$LN34@PyImport_I@5:

; 1479 :             }
; 1480 : 
; 1481 :             front = PyTuple_GET_ITEM(partition, 0);

  00bb1	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR partition$122818[rsp]
  00bb9	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00bbd	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR front$122816[rsp], rax

; 1482 :             Py_INCREF(front);

  00bc5	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR front$122816[rsp]
  00bcd	e8 00 00 00 00	 call	 _Py_IncRef

; 1483 :             Py_DECREF(partition);

  00bd2	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR partition$122818[rsp]
  00bda	e8 00 00 00 00	 call	 _Py_DecRef

; 1484 : 
; 1485 :             if (level == 0) {

  00bdf	83 bc 24 30 01
	00 00 00	 cmp	 DWORD PTR level$[rsp], 0
  00be7	75 2c		 jne	 SHORT $LN33@PyImport_I@5

; 1486 :                 final_mod = PyObject_CallFunctionObjArgs(builtins_import, front, NULL);

  00be9	45 33 c0	 xor	 r8d, r8d
  00bec	48 8b 94 24 d0
	00 00 00	 mov	 rdx, QWORD PTR front$122816[rsp]
  00bf4	48 8b 4c 24 58	 mov	 rcx, QWORD PTR builtins_import$[rsp]
  00bf9	e8 00 00 00 00	 call	 PyObject_CallFunctionObjArgs
  00bfe	48 89 44 24 60	 mov	 QWORD PTR final_mod$[rsp], rax

; 1487 :                 Py_DECREF(front);

  00c03	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR front$122816[rsp]
  00c0b	e8 00 00 00 00	 call	 _Py_DecRef

; 1488 :             }
; 1489 :             else {

  00c10	e9 07 02 00 00	 jmp	 $LN32@PyImport_I@5
$LN33@PyImport_I@5:

; 1490 :                 Py_ssize_t cut_off = PyUnicode_GET_LENGTH(name) -
; 1491 :                                         PyUnicode_GET_LENGTH(front);

  00c15	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR name$[rsp]
  00c1d	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00c21	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00c27	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00c2c	85 c0		 test	 eax, eax
  00c2e	75 1c		 jne	 SHORT $LN110@PyImport_I@5
  00c30	41 b8 d2 05 00
	00		 mov	 r8d, 1490		; 000005d2H
  00c36	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@NNAILCKC@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@
  00c3d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@NNIOODFF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAn?$AAa?$AAm?$AAe?$AA?$CJ?$AA?$AA@
  00c44	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00c4a	33 c0		 xor	 eax, eax
$LN110@PyImport_I@5:
  00c4c	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR name$[rsp]
  00c54	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00c57	c1 e8 07	 shr	 eax, 7
  00c5a	83 e0 01	 and	 eax, 1
  00c5d	85 c0		 test	 eax, eax
  00c5f	75 1c		 jne	 SHORT $LN111@PyImport_I@5
  00c61	41 b8 d2 05 00
	00		 mov	 r8d, 1490		; 000005d2H
  00c67	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@NNAILCKC@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@
  00c6e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DC@BCOPIKLM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAn?$AAa?$AAm?$AAe?$AA?$CJ?$AA?$AA@
  00c75	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00c7b	33 c0		 xor	 eax, eax
$LN111@PyImport_I@5:
  00c7d	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR front$122816[rsp]
  00c85	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00c89	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00c8f	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00c94	85 c0		 test	 eax, eax
  00c96	75 1c		 jne	 SHORT $LN112@PyImport_I@5
  00c98	41 b8 d3 05 00
	00		 mov	 r8d, 1491		; 000005d3H
  00c9e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@NNAILCKC@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@
  00ca5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@ICKFNBJB@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAf?$AAr?$AAo?$AAn?$AAt?$AA?$CJ?$AA?$AA@
  00cac	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00cb2	33 c0		 xor	 eax, eax
$LN112@PyImport_I@5:
  00cb4	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR front$122816[rsp]
  00cbc	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00cbf	c1 e8 07	 shr	 eax, 7
  00cc2	83 e0 01	 and	 eax, 1
  00cc5	85 c0		 test	 eax, eax
  00cc7	75 1c		 jne	 SHORT $LN113@PyImport_I@5
  00cc9	41 b8 d3 05 00
	00		 mov	 r8d, 1491		; 000005d3H
  00ccf	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@NNAILCKC@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@
  00cd6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@DJHHIPKJ@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAf?$AAr?$AAo?$AAn?$AAt?$AA?$CJ?$AA?$AA@
  00cdd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00ce3	33 c0		 xor	 eax, eax
$LN113@PyImport_I@5:
  00ce5	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR name$[rsp]
  00ced	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR front$122816[rsp]
  00cf5	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  00cf9	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00cfd	48 2b c1	 sub	 rax, rcx
  00d00	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR cut_off$122845[rsp], rax

; 1492 :                 Py_ssize_t abs_name_len = PyUnicode_GET_LENGTH(abs_name);

  00d08	48 8b 44 24 40	 mov	 rax, QWORD PTR abs_name$[rsp]
  00d0d	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00d11	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00d17	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00d1c	85 c0		 test	 eax, eax
  00d1e	75 1c		 jne	 SHORT $LN114@PyImport_I@5
  00d20	41 b8 d4 05 00
	00		 mov	 r8d, 1492		; 000005d4H
  00d26	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@NNAILCKC@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@
  00d2d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@OHDPIODH@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAa?$AAb?$AAs?$AA_?$AAn?$AAa?$AAm?$AAe?$AA?$CJ?$AA?$AA@
  00d34	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00d3a	33 c0		 xor	 eax, eax
$LN114@PyImport_I@5:
  00d3c	48 8b 44 24 40	 mov	 rax, QWORD PTR abs_name$[rsp]
  00d41	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00d44	c1 e8 07	 shr	 eax, 7
  00d47	83 e0 01	 and	 eax, 1
  00d4a	85 c0		 test	 eax, eax
  00d4c	75 1c		 jne	 SHORT $LN115@PyImport_I@5
  00d4e	41 b8 d4 05 00
	00		 mov	 r8d, 1492		; 000005d4H
  00d54	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@NNAILCKC@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@
  00d5b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DK@MNGDBKLO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAa?$AAb?$AAs?$AA_?$AAn?$AAa?$AAm?$AAe?$AA?$CJ?$AA?$AA@
  00d62	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00d68	33 c0		 xor	 eax, eax
$LN115@PyImport_I@5:
  00d6a	48 8b 44 24 40	 mov	 rax, QWORD PTR abs_name$[rsp]
  00d6f	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00d73	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR abs_name_len$122858[rsp], rax

; 1493 :                 PyObject *to_return = PyUnicode_Substring(abs_name, 0,
; 1494 :                                                         abs_name_len - cut_off);

  00d7b	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR cut_off$122845[rsp]
  00d83	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR abs_name_len$122858[rsp]
  00d8b	48 2b c8	 sub	 rcx, rax
  00d8e	48 8b c1	 mov	 rax, rcx
  00d91	4c 8b c0	 mov	 r8, rax
  00d94	33 d2		 xor	 edx, edx
  00d96	48 8b 4c 24 40	 mov	 rcx, QWORD PTR abs_name$[rsp]
  00d9b	e8 00 00 00 00	 call	 PyUnicode_Substring
  00da0	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR to_return$122866[rsp], rax

; 1495 :                 Py_DECREF(front);

  00da8	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR front$122816[rsp]
  00db0	e8 00 00 00 00	 call	 _Py_DecRef

; 1496 :                 if (to_return == NULL) {

  00db5	48 83 bc 24 d8
	00 00 00 00	 cmp	 QWORD PTR to_return$122866[rsp], 0
  00dbe	75 05		 jne	 SHORT $LN31@PyImport_I@5

; 1497 :                     goto error;

  00dc0	e9 da 00 00 00	 jmp	 $error$122661
$LN31@PyImport_I@5:

; 1498 :                 }
; 1499 : 
; 1500 :                 final_mod = PyDict_GetItem(interp->modules, to_return);

  00dc5	48 8b 94 24 d8
	00 00 00	 mov	 rdx, QWORD PTR to_return$122866[rsp]
  00dcd	48 8b 44 24 48	 mov	 rax, QWORD PTR interp$[rsp]
  00dd2	48 8b 48 10	 mov	 rcx, QWORD PTR [rax+16]
  00dd6	e8 00 00 00 00	 call	 PyDict_GetItem
  00ddb	48 89 44 24 60	 mov	 QWORD PTR final_mod$[rsp], rax

; 1501 :                 if (final_mod == NULL) {

  00de0	48 83 7c 24 60
	00		 cmp	 QWORD PTR final_mod$[rsp], 0
  00de6	75 1d		 jne	 SHORT $LN30@PyImport_I@5

; 1502 :                     PyErr_Format(PyExc_KeyError,
; 1503 :                                  "%R not in sys.modules as expected",
; 1504 :                                  to_return);

  00de8	4c 8b 84 24 d8
	00 00 00	 mov	 r8, QWORD PTR to_return$122866[rsp]
  00df0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CC@JFELPEKG@?$CFR?5not?5in?5sys?4modules?5as?5expecte@
  00df7	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_KeyError
  00dfe	e8 00 00 00 00	 call	 PyErr_Format

; 1505 :                 }
; 1506 :                 else {

  00e03	eb 0a		 jmp	 SHORT $LN29@PyImport_I@5
$LN30@PyImport_I@5:

; 1507 :                     Py_INCREF(final_mod);

  00e05	48 8b 4c 24 60	 mov	 rcx, QWORD PTR final_mod$[rsp]
  00e0a	e8 00 00 00 00	 call	 _Py_IncRef
$LN29@PyImport_I@5:

; 1508 :                 }
; 1509 :                 Py_DECREF(to_return);

  00e0f	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR to_return$122866[rsp]
  00e17	e8 00 00 00 00	 call	 _Py_DecRef
$LN32@PyImport_I@5:

; 1510 :             }
; 1511 :         }
; 1512 :         else {

  00e1c	eb 14		 jmp	 SHORT $LN28@PyImport_I@5
$LN38@PyImport_I@5:

; 1513 :             final_mod = mod;

  00e1e	48 8b 44 24 68	 mov	 rax, QWORD PTR mod$[rsp]
  00e23	48 89 44 24 60	 mov	 QWORD PTR final_mod$[rsp], rax

; 1514 :             Py_INCREF(mod);

  00e28	48 8b 4c 24 68	 mov	 rcx, QWORD PTR mod$[rsp]
  00e2d	e8 00 00 00 00	 call	 _Py_IncRef
$LN28@PyImport_I@5:

; 1515 :         }
; 1516 :     }
; 1517 :     else {

  00e32	eb 4d		 jmp	 SHORT $LN27@PyImport_I@5
$LN39@PyImport_I@5:

; 1518 :         final_mod = _PyObject_CallMethodObjIdArgs(interp->importlib,
; 1519 :                                                   &PyId__handle_fromlist, mod,
; 1520 :                                                   fromlist, builtins_import,
; 1521 :                                                   NULL);

  00e34	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId__handle_fromlist@?1??PyImport_ImportModuleLevelObject@@9@9
  00e39	8b c0		 mov	 eax, eax
  00e3b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00e41	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00e4a	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00e4e	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR [rsp+40], 0
  00e57	48 8b 4c 24 58	 mov	 rcx, QWORD PTR builtins_import$[rsp]
  00e5c	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00e61	4c 8b 4c 24 50	 mov	 r9, QWORD PTR fromlist$[rsp]
  00e66	4c 8b 44 24 68	 mov	 r8, QWORD PTR mod$[rsp]
  00e6b	48 8b d0	 mov	 rdx, rax
  00e6e	48 8b 44 24 48	 mov	 rax, QWORD PTR interp$[rsp]
  00e73	48 8b 48 30	 mov	 rcx, QWORD PTR [rax+48]
  00e77	e8 00 00 00 00	 call	 _PyObject_CallMethodObjIdArgs
  00e7c	48 89 44 24 60	 mov	 QWORD PTR final_mod$[rsp], rax
$LN27@PyImport_I@5:

; 1522 :     }
; 1523 :     goto error;

  00e81	eb 1c		 jmp	 SHORT $error$122661
$error_with_unlock$122776:

; 1524 : 
; 1525 :   error_with_unlock:
; 1526 : #ifdef WITH_THREAD
; 1527 :     if (_PyImport_ReleaseLock() < 0) {

  00e83	e8 00 00 00 00	 call	 _PyImport_ReleaseLock
  00e88	85 c0		 test	 eax, eax
  00e8a	7d 13		 jge	 SHORT $LN26@PyImport_I@5

; 1528 :         PyErr_SetString(PyExc_RuntimeError, "not holding the import lock");

  00e8c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@JAELALKO@not?5holding?5the?5import?5lock?$AA@
  00e93	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeError
  00e9a	e8 00 00 00 00	 call	 PyErr_SetString
$LN26@PyImport_I@5:
$error$122661:
$LN25@PyImport_I@5:

; 1529 :     }
; 1530 : #endif
; 1531 :   error:
; 1532 :     Py_XDECREF(abs_name);

  00e9f	48 83 7c 24 40
	00		 cmp	 QWORD PTR abs_name$[rsp], 0
  00ea5	74 0a		 je	 SHORT $LN22@PyImport_I@5
  00ea7	48 8b 4c 24 40	 mov	 rcx, QWORD PTR abs_name$[rsp]
  00eac	e8 00 00 00 00	 call	 _Py_DecRef
$LN22@PyImport_I@5:
  00eb1	33 c0		 xor	 eax, eax
  00eb3	85 c0		 test	 eax, eax
  00eb5	75 e8		 jne	 SHORT $LN25@PyImport_I@5
$LN21@PyImport_I@5:

; 1533 :     Py_XDECREF(builtins_import);

  00eb7	48 83 7c 24 58
	00		 cmp	 QWORD PTR builtins_import$[rsp], 0
  00ebd	74 0a		 je	 SHORT $LN18@PyImport_I@5
  00ebf	48 8b 4c 24 58	 mov	 rcx, QWORD PTR builtins_import$[rsp]
  00ec4	e8 00 00 00 00	 call	 _Py_DecRef
$LN18@PyImport_I@5:
  00ec9	33 c0		 xor	 eax, eax
  00ecb	85 c0		 test	 eax, eax
  00ecd	75 e8		 jne	 SHORT $LN21@PyImport_I@5
$LN17@PyImport_I@5:

; 1534 :     Py_XDECREF(mod);

  00ecf	48 83 7c 24 68
	00		 cmp	 QWORD PTR mod$[rsp], 0
  00ed5	74 0a		 je	 SHORT $LN14@PyImport_I@5
  00ed7	48 8b 4c 24 68	 mov	 rcx, QWORD PTR mod$[rsp]
  00edc	e8 00 00 00 00	 call	 _Py_DecRef
$LN14@PyImport_I@5:
  00ee1	33 c0		 xor	 eax, eax
  00ee3	85 c0		 test	 eax, eax
  00ee5	75 e8		 jne	 SHORT $LN17@PyImport_I@5
$LN13@PyImport_I@5:

; 1535 :     Py_XDECREF(package);

  00ee7	48 83 7c 24 38
	00		 cmp	 QWORD PTR package$[rsp], 0
  00eed	74 0a		 je	 SHORT $LN10@PyImport_I@5
  00eef	48 8b 4c 24 38	 mov	 rcx, QWORD PTR package$[rsp]
  00ef4	e8 00 00 00 00	 call	 _Py_DecRef
$LN10@PyImport_I@5:
  00ef9	33 c0		 xor	 eax, eax
  00efb	85 c0		 test	 eax, eax
  00efd	75 e8		 jne	 SHORT $LN13@PyImport_I@5
$LN9@PyImport_I@5:

; 1536 :     Py_XDECREF(globals);

  00eff	48 83 7c 24 30
	00		 cmp	 QWORD PTR globals$[rsp], 0
  00f05	74 0a		 je	 SHORT $LN6@PyImport_I@5
  00f07	48 8b 4c 24 30	 mov	 rcx, QWORD PTR globals$[rsp]
  00f0c	e8 00 00 00 00	 call	 _Py_DecRef
$LN6@PyImport_I@5:
  00f11	33 c0		 xor	 eax, eax
  00f13	85 c0		 test	 eax, eax
  00f15	75 e8		 jne	 SHORT $LN9@PyImport_I@5
$LN5@PyImport_I@5:

; 1537 :     Py_XDECREF(fromlist);

  00f17	48 83 7c 24 50
	00		 cmp	 QWORD PTR fromlist$[rsp], 0
  00f1d	74 0a		 je	 SHORT $LN2@PyImport_I@5
  00f1f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR fromlist$[rsp]
  00f24	e8 00 00 00 00	 call	 _Py_DecRef
$LN2@PyImport_I@5:
  00f29	33 c0		 xor	 eax, eax
  00f2b	85 c0		 test	 eax, eax
  00f2d	75 e8		 jne	 SHORT $LN5@PyImport_I@5

; 1538 :     if (final_mod == NULL)

  00f2f	48 83 7c 24 60
	00		 cmp	 QWORD PTR final_mod$[rsp], 0
  00f35	75 05		 jne	 SHORT $LN1@PyImport_I@5

; 1539 :         remove_importlib_frames();

  00f37	e8 00 00 00 00	 call	 remove_importlib_frames
$LN1@PyImport_I@5:

; 1540 :     return final_mod;

  00f3c	48 8b 44 24 60	 mov	 rax, QWORD PTR final_mod$[rsp]

; 1541 : }

  00f41	48 81 c4 08 01
	00 00		 add	 rsp, 264		; 00000108H
  00f48	c3		 ret	 0
PyImport_ImportModuleLevelObject ENDP
_TEXT	ENDS
PUBLIC	??_C@_1CM@BFDDHKOF@?$AAP?$AAy?$AAT?$AAr?$AAa?$AAc?$AAe?$AAB?$AAa?$AAc?$AAk?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAt?$AAb?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_0BK@LPHFHGP@_call_with_frames_removed?$AA@ ; `string'
PUBLIC	??_C@_0BO@JHFECBGD@?$DMfrozen?5importlib?4_bootstrap?$DO?$AA@ ; `string'
EXTRN	PyErr_Restore:PROC
EXTRN	PyTraceBack_Type:BYTE
EXTRN	PyErr_Fetch:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$remove_importlib_frames DD imagerel remove_importlib_frames
	DD	imagerel remove_importlib_frames+552
	DD	imagerel $unwind$remove_importlib_frames
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$remove_importlib_frames DD 020701H
	DD	0170107H
xdata	ENDS
;	COMDAT ??_C@_1CM@BFDDHKOF@?$AAP?$AAy?$AAT?$AAr?$AAa?$AAc?$AAe?$AAB?$AAa?$AAc?$AAk?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAt?$AAb?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CM@BFDDHKOF@?$AAP?$AAy?$AAT?$AAr?$AAa?$AAc?$AAe?$AAB?$AAa?$AAc?$AAk?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAt?$AAb?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'T', 00H, 'r', 00H, 'a', 00H, 'c', 00H, 'e', 00H
	DB	'B', 00H, 'a', 00H, 'c', 00H, 'k', 00H, '_', 00H, 'C', 00H, 'h'
	DB	00H, 'e', 00H, 'c', 00H, 'k', 00H, '(', 00H, 't', 00H, 'b', 00H
	DB	')', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@LPHFHGP@_call_with_frames_removed?$AA@
CONST	SEGMENT
??_C@_0BK@LPHFHGP@_call_with_frames_removed?$AA@ DB '_call_with_frames_re'
	DB	'moved', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@JHFECBGD@?$DMfrozen?5importlib?4_bootstrap?$DO?$AA@
CONST	SEGMENT
??_C@_0BO@JHFECBGD@?$DMfrozen?5importlib?4_bootstrap?$DO?$AA@ DB '<frozen'
	DB	' importlib._bootstrap>', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT remove_importlib_frames
_TEXT	SEGMENT
in_importlib$ = 32
value$ = 40
always_trim$ = 48
prev_link$ = 56
outer_link$ = 64
exception$ = 72
base_tb$ = 80
tb$ = 88
remove_frames$ = 96
importlib_filename$ = 104
code$122588 = 112
next$122585 = 120
now_in_importlib$122589 = 128
traceback$122583 = 136
frame$122587 = 144
tmp$122596 = 152
tv88 = 160
remove_importlib_frames PROC				; COMDAT

; 1157 : {

  00000	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H

; 1158 :     const char *importlib_filename = "<frozen importlib._bootstrap>";

  00007	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BO@JHFECBGD@?$DMfrozen?5importlib?4_bootstrap?$DO?$AA@
  0000e	48 89 44 24 68	 mov	 QWORD PTR importlib_filename$[rsp], rax

; 1159 :     const char *remove_frames = "_call_with_frames_removed";

  00013	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BK@LPHFHGP@_call_with_frames_removed?$AA@
  0001a	48 89 44 24 60	 mov	 QWORD PTR remove_frames$[rsp], rax

; 1160 :     int always_trim = 0;

  0001f	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR always_trim$[rsp], 0

; 1161 :     int in_importlib = 0;

  00027	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR in_importlib$[rsp], 0

; 1162 :     PyObject *exception, *value, *base_tb, *tb;
; 1163 :     PyObject **prev_link, **outer_link = NULL;

  0002f	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR outer_link$[rsp], 0

; 1164 : 
; 1165 :     /* Synopsis: if it's an ImportError, we trim all importlib chunks
; 1166 :        from the traceback. We always trim chunks
; 1167 :        which end with a call to "_call_with_frames_removed". */
; 1168 : 
; 1169 :     PyErr_Fetch(&exception, &value, &base_tb);

  00038	4c 8d 44 24 50	 lea	 r8, QWORD PTR base_tb$[rsp]
  0003d	48 8d 54 24 28	 lea	 rdx, QWORD PTR value$[rsp]
  00042	48 8d 4c 24 48	 lea	 rcx, QWORD PTR exception$[rsp]
  00047	e8 00 00 00 00	 call	 PyErr_Fetch

; 1170 :     if (!exception || Py_VerboseFlag)

  0004c	48 83 7c 24 48
	00		 cmp	 QWORD PTR exception$[rsp], 0
  00052	74 09		 je	 SHORT $LN12@remove_imp
  00054	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR Py_VerboseFlag, 0
  0005b	74 05		 je	 SHORT $LN13@remove_imp
$LN12@remove_imp:

; 1171 :         goto done;

  0005d	e9 aa 01 00 00	 jmp	 $done$122575
$LN13@remove_imp:

; 1172 :     if (PyType_IsSubtype((PyTypeObject *) exception,
; 1173 :                          (PyTypeObject *) PyExc_ImportError))

  00062	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR PyExc_ImportError
  00069	48 8b 4c 24 48	 mov	 rcx, QWORD PTR exception$[rsp]
  0006e	e8 00 00 00 00	 call	 PyType_IsSubtype
  00073	85 c0		 test	 eax, eax
  00075	74 08		 je	 SHORT $LN11@remove_imp

; 1174 :         always_trim = 1;

  00077	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR always_trim$[rsp], 1
$LN11@remove_imp:

; 1175 : 
; 1176 :     prev_link = &base_tb;

  0007f	48 8d 44 24 50	 lea	 rax, QWORD PTR base_tb$[rsp]
  00084	48 89 44 24 38	 mov	 QWORD PTR prev_link$[rsp], rax

; 1177 :     tb = base_tb;

  00089	48 8b 44 24 50	 mov	 rax, QWORD PTR base_tb$[rsp]
  0008e	48 89 44 24 58	 mov	 QWORD PTR tb$[rsp], rax
$LN10@remove_imp:

; 1178 :     while (tb != NULL) {

  00093	48 83 7c 24 58
	00		 cmp	 QWORD PTR tb$[rsp], 0
  00099	0f 84 6d 01 00
	00		 je	 $LN9@remove_imp

; 1179 :         PyTracebackObject *traceback = (PyTracebackObject *)tb;

  0009f	48 8b 44 24 58	 mov	 rax, QWORD PTR tb$[rsp]
  000a4	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR traceback$122583[rsp], rax

; 1180 :         PyObject *next = (PyObject *) traceback->tb_next;

  000ac	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR traceback$122583[rsp]
  000b4	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000b8	48 89 44 24 78	 mov	 QWORD PTR next$122585[rsp], rax

; 1181 :         PyFrameObject *frame = traceback->tb_frame;

  000bd	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR traceback$122583[rsp]
  000c5	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000c9	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR frame$122587[rsp], rax

; 1182 :         PyCodeObject *code = frame->f_code;

  000d1	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR frame$122587[rsp]
  000d9	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  000dd	48 89 44 24 70	 mov	 QWORD PTR code$122588[rsp], rax

; 1183 :         int now_in_importlib;
; 1184 : 
; 1185 :         assert(PyTraceBack_Check(tb));

  000e2	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyTraceBack_Type
  000e9	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tb$[rsp]
  000ee	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  000f2	74 1c		 je	 SHORT $LN16@remove_imp
  000f4	41 b8 a1 04 00
	00		 mov	 r8d, 1185		; 000004a1H
  000fa	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@NNAILCKC@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAi?$AAm?$AAp?$AAo?$AAr?$AAt?$AA?4?$AAc?$AA?$AA@
  00101	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@BFDDHKOF@?$AAP?$AAy?$AAT?$AAr?$AAa?$AAc?$AAe?$AAB?$AAa?$AAc?$AAk?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAt?$AAb?$AA?$CJ?$AA?$AA@
  00108	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0010e	33 c0		 xor	 eax, eax
$LN16@remove_imp:

; 1186 :         now_in_importlib = (PyUnicode_CompareWithASCIIString(
; 1187 :                                 code->co_filename,
; 1188 :                                 importlib_filename) == 0);

  00110	48 8b 54 24 68	 mov	 rdx, QWORD PTR importlib_filename$[rsp]
  00115	48 8b 44 24 70	 mov	 rax, QWORD PTR code$122588[rsp]
  0011a	48 8b 88 b0 00
	00 00		 mov	 rcx, QWORD PTR [rax+176]
  00121	e8 00 00 00 00	 call	 PyUnicode_CompareWithASCIIString
  00126	85 c0		 test	 eax, eax
  00128	75 0d		 jne	 SHORT $LN17@remove_imp
  0012a	c7 84 24 a0 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv88[rsp], 1
  00135	eb 0b		 jmp	 SHORT $LN18@remove_imp
$LN17@remove_imp:
  00137	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv88[rsp], 0
$LN18@remove_imp:
  00142	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR tv88[rsp]
  00149	89 84 24 80 00
	00 00		 mov	 DWORD PTR now_in_importlib$122589[rsp], eax

; 1189 :         if (now_in_importlib && !in_importlib) {

  00150	83 bc 24 80 00
	00 00 00	 cmp	 DWORD PTR now_in_importlib$122589[rsp], 0
  00158	74 11		 je	 SHORT $LN8@remove_imp
  0015a	83 7c 24 20 00	 cmp	 DWORD PTR in_importlib$[rsp], 0
  0015f	75 0a		 jne	 SHORT $LN8@remove_imp

; 1190 :             /* This is the link to this chunk of importlib tracebacks */
; 1191 :             outer_link = prev_link;

  00161	48 8b 44 24 38	 mov	 rax, QWORD PTR prev_link$[rsp]
  00166	48 89 44 24 40	 mov	 QWORD PTR outer_link$[rsp], rax
$LN8@remove_imp:

; 1192 :         }
; 1193 :         in_importlib = now_in_importlib;

  0016b	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR now_in_importlib$122589[rsp]
  00172	89 44 24 20	 mov	 DWORD PTR in_importlib$[rsp], eax

; 1194 : 
; 1195 :         if (in_importlib &&
; 1196 :             (always_trim ||
; 1197 :              PyUnicode_CompareWithASCIIString(code->co_name,
; 1198 :                                               remove_frames) == 0)) {

  00176	83 7c 24 20 00	 cmp	 DWORD PTR in_importlib$[rsp], 0
  0017b	74 6f		 je	 SHORT $LN7@remove_imp
  0017d	83 7c 24 30 00	 cmp	 DWORD PTR always_trim$[rsp], 0
  00182	75 1a		 jne	 SHORT $LN6@remove_imp
  00184	48 8b 54 24 60	 mov	 rdx, QWORD PTR remove_frames$[rsp]
  00189	48 8b 44 24 70	 mov	 rax, QWORD PTR code$122588[rsp]
  0018e	48 8b 88 b8 00
	00 00		 mov	 rcx, QWORD PTR [rax+184]
  00195	e8 00 00 00 00	 call	 PyUnicode_CompareWithASCIIString
  0019a	85 c0		 test	 eax, eax
  0019c	75 4e		 jne	 SHORT $LN7@remove_imp
$LN6@remove_imp:

; 1199 :             PyObject *tmp = *outer_link;

  0019e	48 8b 44 24 40	 mov	 rax, QWORD PTR outer_link$[rsp]
  001a3	48 8b 00	 mov	 rax, QWORD PTR [rax]
  001a6	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR tmp$122596[rsp], rax

; 1200 :             *outer_link = next;

  001ae	48 8b 44 24 40	 mov	 rax, QWORD PTR outer_link$[rsp]
  001b3	48 8b 4c 24 78	 mov	 rcx, QWORD PTR next$122585[rsp]
  001b8	48 89 08	 mov	 QWORD PTR [rax], rcx
$LN5@remove_imp:

; 1201 :             Py_XINCREF(next);

  001bb	48 83 7c 24 78
	00		 cmp	 QWORD PTR next$122585[rsp], 0
  001c1	74 0a		 je	 SHORT $LN2@remove_imp
  001c3	48 8b 4c 24 78	 mov	 rcx, QWORD PTR next$122585[rsp]
  001c8	e8 00 00 00 00	 call	 _Py_IncRef
$LN2@remove_imp:
  001cd	33 c0		 xor	 eax, eax
  001cf	85 c0		 test	 eax, eax
  001d1	75 e8		 jne	 SHORT $LN5@remove_imp

; 1202 :             Py_DECREF(tmp);

  001d3	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR tmp$122596[rsp]
  001db	e8 00 00 00 00	 call	 _Py_DecRef

; 1203 :             prev_link = outer_link;

  001e0	48 8b 44 24 40	 mov	 rax, QWORD PTR outer_link$[rsp]
  001e5	48 89 44 24 38	 mov	 QWORD PTR prev_link$[rsp], rax

; 1204 :         }
; 1205 :         else {

  001ea	eb 11		 jmp	 SHORT $LN1@remove_imp
$LN7@remove_imp:

; 1206 :             prev_link = (PyObject **) &traceback->tb_next;

  001ec	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR traceback$122583[rsp]
  001f4	48 83 c0 60	 add	 rax, 96			; 00000060H
  001f8	48 89 44 24 38	 mov	 QWORD PTR prev_link$[rsp], rax
$LN1@remove_imp:

; 1207 :         }
; 1208 :         tb = next;

  001fd	48 8b 44 24 78	 mov	 rax, QWORD PTR next$122585[rsp]
  00202	48 89 44 24 58	 mov	 QWORD PTR tb$[rsp], rax

; 1209 :     }

  00207	e9 87 fe ff ff	 jmp	 $LN10@remove_imp
$LN9@remove_imp:
$done$122575:

; 1210 : done:
; 1211 :     PyErr_Restore(exception, value, base_tb);

  0020c	4c 8b 44 24 50	 mov	 r8, QWORD PTR base_tb$[rsp]
  00211	48 8b 54 24 28	 mov	 rdx, QWORD PTR value$[rsp]
  00216	48 8b 4c 24 48	 mov	 rcx, QWORD PTR exception$[rsp]
  0021b	e8 00 00 00 00	 call	 PyErr_Restore

; 1212 : }

  00220	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  00227	c3		 ret	 0
remove_importlib_frames ENDP
_TEXT	ENDS
PUBLIC	PyImport_ImportModuleLevel
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyImport_ImportModuleLevel DD imagerel $LN4
	DD	imagerel $LN4+109
	DD	imagerel $unwind$PyImport_ImportModuleLevel
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyImport_ImportModuleLevel DD 011801H
	DD	08218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyImport_ImportModuleLevel
_TEXT	SEGMENT
nameobj$ = 48
mod$ = 56
name$ = 80
globals$ = 88
locals$ = 96
fromlist$ = 104
level$ = 112
PyImport_ImportModuleLevel PROC				; COMDAT

; 1546 : {

$LN4:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1547 :     PyObject *nameobj, *mod;
; 1548 :     nameobj = PyUnicode_FromString(name);

  00018	48 8b 4c 24 50	 mov	 rcx, QWORD PTR name$[rsp]
  0001d	e8 00 00 00 00	 call	 PyUnicode_FromString
  00022	48 89 44 24 30	 mov	 QWORD PTR nameobj$[rsp], rax

; 1549 :     if (nameobj == NULL)

  00027	48 83 7c 24 30
	00		 cmp	 QWORD PTR nameobj$[rsp], 0
  0002d	75 04		 jne	 SHORT $LN1@PyImport_I@6

; 1550 :         return NULL;

  0002f	33 c0		 xor	 eax, eax
  00031	eb 35		 jmp	 SHORT $LN2@PyImport_I@6
$LN1@PyImport_I@6:

; 1551 :     mod = PyImport_ImportModuleLevelObject(nameobj, globals, locals,
; 1552 :                                            fromlist, level);

  00033	8b 44 24 70	 mov	 eax, DWORD PTR level$[rsp]
  00037	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0003b	4c 8b 4c 24 68	 mov	 r9, QWORD PTR fromlist$[rsp]
  00040	4c 8b 44 24 60	 mov	 r8, QWORD PTR locals$[rsp]
  00045	48 8b 54 24 58	 mov	 rdx, QWORD PTR globals$[rsp]
  0004a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR nameobj$[rsp]
  0004f	e8 00 00 00 00	 call	 PyImport_ImportModuleLevelObject
  00054	48 89 44 24 38	 mov	 QWORD PTR mod$[rsp], rax

; 1553 :     Py_DECREF(nameobj);

  00059	48 8b 4c 24 30	 mov	 rcx, QWORD PTR nameobj$[rsp]
  0005e	e8 00 00 00 00	 call	 _Py_DecRef

; 1554 :     return mod;

  00063	48 8b 44 24 38	 mov	 rax, QWORD PTR mod$[rsp]
$LN2@PyImport_I@6:

; 1555 : }

  00068	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0006c	c3		 ret	 0
PyImport_ImportModuleLevel ENDP
_TEXT	ENDS
PUBLIC	??_C@_01MJMHLOMK@O?$AA@				; `string'
PUBLIC	??_C@_03PHKFLJOP@imp?$AA@			; `string'
PUBLIC	PyImport_ReloadModule
EXTRN	_PyObject_CallMethodId:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyImport_ReloadModule DD imagerel $LN6
	DD	imagerel $LN6+175
	DD	imagerel $unwind$PyImport_ReloadModule
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyImport_ReloadModule DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_01MJMHLOMK@O?$AA@
CONST	SEGMENT
??_C@_01MJMHLOMK@O?$AA@ DB 'O', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03PHKFLJOP@imp?$AA@
CONST	SEGMENT
??_C@_03PHKFLJOP@imp?$AA@ DB 'imp', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyImport_ReloadModule
_TEXT	SEGMENT
modules$ = 32
imp$ = 40
reloaded_module$ = 48
m$ = 80
PyImport_ReloadModule PROC				; COMDAT

; 1563 : {

$LN6:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1564 :     _Py_IDENTIFIER(reload);
; 1565 :     PyObject *reloaded_module = NULL;

  00009	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR reloaded_module$[rsp], 0

; 1566 :     PyObject *modules = PyImport_GetModuleDict();

  00012	e8 00 00 00 00	 call	 PyImport_GetModuleDict
  00017	48 89 44 24 20	 mov	 QWORD PTR modules$[rsp], rax

; 1567 :     PyObject *imp = PyDict_GetItemString(modules, "imp");

  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03PHKFLJOP@imp?$AA@
  00023	48 8b 4c 24 20	 mov	 rcx, QWORD PTR modules$[rsp]
  00028	e8 00 00 00 00	 call	 PyDict_GetItemString
  0002d	48 89 44 24 28	 mov	 QWORD PTR imp$[rsp], rax

; 1568 :     if (imp == NULL) {

  00032	48 83 7c 24 28
	00		 cmp	 QWORD PTR imp$[rsp], 0
  00038	75 1f		 jne	 SHORT $LN3@PyImport_R@3

; 1569 :         imp = PyImport_ImportModule("imp");

  0003a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03PHKFLJOP@imp?$AA@
  00041	e8 00 00 00 00	 call	 PyImport_ImportModule
  00046	48 89 44 24 28	 mov	 QWORD PTR imp$[rsp], rax

; 1570 :         if (imp == NULL) {

  0004b	48 83 7c 24 28
	00		 cmp	 QWORD PTR imp$[rsp], 0
  00051	75 04		 jne	 SHORT $LN2@PyImport_R@3

; 1571 :             return NULL;

  00053	33 c0		 xor	 eax, eax
  00055	eb 53		 jmp	 SHORT $LN4@PyImport_R@3
$LN2@PyImport_R@3:

; 1572 :         }
; 1573 :     }
; 1574 :     else {

  00057	eb 0a		 jmp	 SHORT $LN1@PyImport_R@3
$LN3@PyImport_R@3:

; 1575 :         Py_INCREF(imp);

  00059	48 8b 4c 24 28	 mov	 rcx, QWORD PTR imp$[rsp]
  0005e	e8 00 00 00 00	 call	 _Py_IncRef
$LN1@PyImport_R@3:

; 1576 :     }
; 1577 : 
; 1578 :     reloaded_module = _PyObject_CallMethodId(imp, &PyId_reload, "O", m);

  00063	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId_reload@?1??PyImport_ReloadModule@@9@9
  00068	8b c0		 mov	 eax, eax
  0006a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00070	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00079	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0007d	4c 8b 4c 24 50	 mov	 r9, QWORD PTR m$[rsp]
  00082	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01MJMHLOMK@O?$AA@
  00089	48 8b d0	 mov	 rdx, rax
  0008c	48 8b 4c 24 28	 mov	 rcx, QWORD PTR imp$[rsp]
  00091	e8 00 00 00 00	 call	 _PyObject_CallMethodId
  00096	48 89 44 24 30	 mov	 QWORD PTR reloaded_module$[rsp], rax

; 1579 :     Py_DECREF(imp);

  0009b	48 8b 4c 24 28	 mov	 rcx, QWORD PTR imp$[rsp]
  000a0	e8 00 00 00 00	 call	 _Py_DecRef

; 1580 :     return reloaded_module;

  000a5	48 8b 44 24 30	 mov	 rax, QWORD PTR reloaded_module$[rsp]
$LN4@PyImport_R@3:

; 1581 : }

  000aa	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000ae	c3		 ret	 0
PyImport_ReloadModule ENDP
_TEXT	ENDS
PUBLIC	??_C@_05GGBOHLAF@OOOOi?$AA@			; `string'
PUBLIC	??_C@_04JFPPFMBB@?$HLOO?$HN?$AA@		; `string'
EXTRN	PyObject_CallFunction:PROC
EXTRN	PyObject_GetAttr:PROC
EXTRN	PyErr_SetObject:PROC
EXTRN	Py_BuildValue:PROC
EXTRN	PyObject_GetItem:PROC
EXTRN	PyEval_GetGlobals:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyImport_Import DD imagerel $LN30
	DD	imagerel $LN30+660
	DD	imagerel $unwind$PyImport_Import
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyImport_Import DD 010901H
	DD	0e209H
xdata	ENDS
;	COMDAT ??_C@_05GGBOHLAF@OOOOi?$AA@
CONST	SEGMENT
??_C@_05GGBOHLAF@OOOOi?$AA@ DB 'OOOOi', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04JFPPFMBB@?$HLOO?$HN?$AA@
CONST	SEGMENT
??_C@_04JFPPFMBB@?$HLOO?$HN?$AA@ DB '{OO}', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyImport_Import
_TEXT	SEGMENT
globals$ = 64
import$ = 72
builtins$ = 80
modules$ = 88
r$ = 96
module_name$ = 128
PyImport_Import PROC					; COMDAT

; 1595 : {

$LN30:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 1596 :     static PyObject *silly_list = NULL;
; 1597 :     static PyObject *builtins_str = NULL;
; 1598 :     static PyObject *import_str = NULL;
; 1599 :     PyObject *globals = NULL;

  00009	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR globals$[rsp], 0

; 1600 :     PyObject *import = NULL;

  00012	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR import$[rsp], 0

; 1601 :     PyObject *builtins = NULL;

  0001b	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR builtins$[rsp], 0

; 1602 :     PyObject *modules = NULL;

  00024	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR modules$[rsp], 0

; 1603 :     PyObject *r = NULL;

  0002d	48 c7 44 24 60
	00 00 00 00	 mov	 QWORD PTR r$[rsp], 0

; 1604 : 
; 1605 :     /* Initialize constant string objects */
; 1606 :     if (silly_list == NULL) {

  00036	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?silly_list@?1??PyImport_Import@@9@9, 0
  0003e	75 67		 jne	 SHORT $LN27@PyImport_I@7

; 1607 :         import_str = PyUnicode_InternFromString("__import__");

  00040	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@KEEJPJHH@__import__?$AA@
  00047	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  0004c	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?import_str@?1??PyImport_Import@@9@9, rax

; 1608 :         if (import_str == NULL)

  00053	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?import_str@?1??PyImport_Import@@9@9, 0
  0005b	75 07		 jne	 SHORT $LN26@PyImport_I@7

; 1609 :             return NULL;

  0005d	33 c0		 xor	 eax, eax
  0005f	e9 2b 02 00 00	 jmp	 $LN28@PyImport_I@7
$LN26@PyImport_I@7:

; 1610 :         builtins_str = PyUnicode_InternFromString("__builtins__");

  00064	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@MNFFDJII@__builtins__?$AA@
  0006b	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  00070	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?builtins_str@?1??PyImport_Import@@9@9, rax

; 1611 :         if (builtins_str == NULL)

  00077	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?builtins_str@?1??PyImport_Import@@9@9, 0
  0007f	75 07		 jne	 SHORT $LN25@PyImport_I@7

; 1612 :             return NULL;

  00081	33 c0		 xor	 eax, eax
  00083	e9 07 02 00 00	 jmp	 $LN28@PyImport_I@7
$LN25@PyImport_I@7:

; 1613 :         silly_list = PyList_New(0);

  00088	33 c9		 xor	 ecx, ecx
  0008a	e8 00 00 00 00	 call	 PyList_New
  0008f	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?silly_list@?1??PyImport_Import@@9@9, rax

; 1614 :         if (silly_list == NULL)

  00096	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?silly_list@?1??PyImport_Import@@9@9, 0
  0009e	75 07		 jne	 SHORT $LN24@PyImport_I@7

; 1615 :             return NULL;

  000a0	33 c0		 xor	 eax, eax
  000a2	e9 e8 01 00 00	 jmp	 $LN28@PyImport_I@7
$LN24@PyImport_I@7:
$LN27@PyImport_I@7:

; 1616 :     }
; 1617 : 
; 1618 :     /* Get the builtins from current globals */
; 1619 :     globals = PyEval_GetGlobals();

  000a7	e8 00 00 00 00	 call	 PyEval_GetGlobals
  000ac	48 89 44 24 40	 mov	 QWORD PTR globals$[rsp], rax

; 1620 :     if (globals != NULL) {

  000b1	48 83 7c 24 40
	00		 cmp	 QWORD PTR globals$[rsp], 0
  000b7	74 2f		 je	 SHORT $LN23@PyImport_I@7

; 1621 :         Py_INCREF(globals);

  000b9	48 8b 4c 24 40	 mov	 rcx, QWORD PTR globals$[rsp]
  000be	e8 00 00 00 00	 call	 _Py_IncRef

; 1622 :         builtins = PyObject_GetItem(globals, builtins_str);

  000c3	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR ?builtins_str@?1??PyImport_Import@@9@9
  000ca	48 8b 4c 24 40	 mov	 rcx, QWORD PTR globals$[rsp]
  000cf	e8 00 00 00 00	 call	 PyObject_GetItem
  000d4	48 89 44 24 50	 mov	 QWORD PTR builtins$[rsp], rax

; 1623 :         if (builtins == NULL)

  000d9	48 83 7c 24 50
	00		 cmp	 QWORD PTR builtins$[rsp], 0
  000df	75 05		 jne	 SHORT $LN22@PyImport_I@7

; 1624 :             goto err;

  000e1	e9 5c 01 00 00	 jmp	 $err$122988
$LN22@PyImport_I@7:

; 1625 :     }
; 1626 :     else {

  000e6	eb 5a		 jmp	 SHORT $LN21@PyImport_I@7
$LN23@PyImport_I@7:

; 1627 :         /* No globals -- use standard builtins, and fake globals */
; 1628 :         builtins = PyImport_ImportModuleLevel("builtins",
; 1629 :                                               NULL, NULL, NULL, 0);

  000e8	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR [rsp+32], 0
  000f0	45 33 c9	 xor	 r9d, r9d
  000f3	45 33 c0	 xor	 r8d, r8d
  000f6	33 d2		 xor	 edx, edx
  000f8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08OCOMCJAJ@builtins?$AA@
  000ff	e8 00 00 00 00	 call	 PyImport_ImportModuleLevel
  00104	48 89 44 24 50	 mov	 QWORD PTR builtins$[rsp], rax

; 1630 :         if (builtins == NULL)

  00109	48 83 7c 24 50
	00		 cmp	 QWORD PTR builtins$[rsp], 0
  0010f	75 07		 jne	 SHORT $LN20@PyImport_I@7

; 1631 :             return NULL;

  00111	33 c0		 xor	 eax, eax
  00113	e9 77 01 00 00	 jmp	 $LN28@PyImport_I@7
$LN20@PyImport_I@7:

; 1632 :         globals = Py_BuildValue("{OO}", builtins_str, builtins);

  00118	4c 8b 44 24 50	 mov	 r8, QWORD PTR builtins$[rsp]
  0011d	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR ?builtins_str@?1??PyImport_Import@@9@9
  00124	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04JFPPFMBB@?$HLOO?$HN?$AA@
  0012b	e8 00 00 00 00	 call	 Py_BuildValue
  00130	48 89 44 24 40	 mov	 QWORD PTR globals$[rsp], rax

; 1633 :         if (globals == NULL)

  00135	48 83 7c 24 40
	00		 cmp	 QWORD PTR globals$[rsp], 0
  0013b	75 05		 jne	 SHORT $LN19@PyImport_I@7

; 1634 :             goto err;

  0013d	e9 00 01 00 00	 jmp	 $err$122988
$LN19@PyImport_I@7:
$LN21@PyImport_I@7:

; 1635 :     }
; 1636 : 
; 1637 :     /* Get the __import__ function from the builtins */
; 1638 :     if (PyDict_Check(builtins)) {

  00142	48 8b 44 24 50	 mov	 rax, QWORD PTR builtins$[rsp]
  00147	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0014b	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00151	25 00 00 00 20	 and	 eax, 536870912		; 20000000H
  00156	85 c0		 test	 eax, eax
  00158	74 33		 je	 SHORT $LN18@PyImport_I@7

; 1639 :         import = PyObject_GetItem(builtins, import_str);

  0015a	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR ?import_str@?1??PyImport_Import@@9@9
  00161	48 8b 4c 24 50	 mov	 rcx, QWORD PTR builtins$[rsp]
  00166	e8 00 00 00 00	 call	 PyObject_GetItem
  0016b	48 89 44 24 48	 mov	 QWORD PTR import$[rsp], rax

; 1640 :         if (import == NULL)

  00170	48 83 7c 24 48
	00		 cmp	 QWORD PTR import$[rsp], 0
  00176	75 13		 jne	 SHORT $LN17@PyImport_I@7

; 1641 :             PyErr_SetObject(PyExc_KeyError, import_str);

  00178	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR ?import_str@?1??PyImport_Import@@9@9
  0017f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_KeyError
  00186	e8 00 00 00 00	 call	 PyErr_SetObject
$LN17@PyImport_I@7:

; 1642 :     }
; 1643 :     else

  0018b	eb 16		 jmp	 SHORT $LN16@PyImport_I@7
$LN18@PyImport_I@7:

; 1644 :         import = PyObject_GetAttr(builtins, import_str);

  0018d	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR ?import_str@?1??PyImport_Import@@9@9
  00194	48 8b 4c 24 50	 mov	 rcx, QWORD PTR builtins$[rsp]
  00199	e8 00 00 00 00	 call	 PyObject_GetAttr
  0019e	48 89 44 24 48	 mov	 QWORD PTR import$[rsp], rax
$LN16@PyImport_I@7:

; 1645 :     if (import == NULL)

  001a3	48 83 7c 24 48
	00		 cmp	 QWORD PTR import$[rsp], 0
  001a9	75 05		 jne	 SHORT $LN15@PyImport_I@7

; 1646 :         goto err;

  001ab	e9 92 00 00 00	 jmp	 $err$122988
$LN15@PyImport_I@7:

; 1647 : 
; 1648 :     /* Call the __import__ function with the proper argument list
; 1649 :        Always use absolute import here.
; 1650 :        Calling for side-effect of import. */
; 1651 :     r = PyObject_CallFunction(import, "OOOOi", module_name, globals,
; 1652 :                               globals, silly_list, 0, NULL);

  001b0	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR [rsp+56], 0
  001b9	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR [rsp+48], 0
  001c2	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?silly_list@?1??PyImport_Import@@9@9
  001c9	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  001ce	48 8b 44 24 40	 mov	 rax, QWORD PTR globals$[rsp]
  001d3	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001d8	4c 8b 4c 24 40	 mov	 r9, QWORD PTR globals$[rsp]
  001dd	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR module_name$[rsp]
  001e5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05GGBOHLAF@OOOOi?$AA@
  001ec	48 8b 4c 24 48	 mov	 rcx, QWORD PTR import$[rsp]
  001f1	e8 00 00 00 00	 call	 PyObject_CallFunction
  001f6	48 89 44 24 60	 mov	 QWORD PTR r$[rsp], rax

; 1653 :     if (r == NULL)

  001fb	48 83 7c 24 60
	00		 cmp	 QWORD PTR r$[rsp], 0
  00201	75 02		 jne	 SHORT $LN14@PyImport_I@7

; 1654 :         goto err;

  00203	eb 3d		 jmp	 SHORT $err$122988
$LN14@PyImport_I@7:

; 1655 :     Py_DECREF(r);

  00205	48 8b 4c 24 60	 mov	 rcx, QWORD PTR r$[rsp]
  0020a	e8 00 00 00 00	 call	 _Py_DecRef

; 1656 : 
; 1657 :     modules = PyImport_GetModuleDict();

  0020f	e8 00 00 00 00	 call	 PyImport_GetModuleDict
  00214	48 89 44 24 58	 mov	 QWORD PTR modules$[rsp], rax

; 1658 :     r = PyDict_GetItem(modules, module_name);

  00219	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR module_name$[rsp]
  00221	48 8b 4c 24 58	 mov	 rcx, QWORD PTR modules$[rsp]
  00226	e8 00 00 00 00	 call	 PyDict_GetItem
  0022b	48 89 44 24 60	 mov	 QWORD PTR r$[rsp], rax

; 1659 :     if (r != NULL)

  00230	48 83 7c 24 60
	00		 cmp	 QWORD PTR r$[rsp], 0
  00236	74 0a		 je	 SHORT $LN13@PyImport_I@7

; 1660 :         Py_INCREF(r);

  00238	48 8b 4c 24 60	 mov	 rcx, QWORD PTR r$[rsp]
  0023d	e8 00 00 00 00	 call	 _Py_IncRef
$LN13@PyImport_I@7:
$err$122988:
$LN12@PyImport_I@7:

; 1661 : 
; 1662 :   err:
; 1663 :     Py_XDECREF(globals);

  00242	48 83 7c 24 40
	00		 cmp	 QWORD PTR globals$[rsp], 0
  00248	74 0a		 je	 SHORT $LN9@PyImport_I@7
  0024a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR globals$[rsp]
  0024f	e8 00 00 00 00	 call	 _Py_DecRef
$LN9@PyImport_I@7:
  00254	33 c0		 xor	 eax, eax
  00256	85 c0		 test	 eax, eax
  00258	75 e8		 jne	 SHORT $LN12@PyImport_I@7
$LN8@PyImport_I@7:

; 1664 :     Py_XDECREF(builtins);

  0025a	48 83 7c 24 50
	00		 cmp	 QWORD PTR builtins$[rsp], 0
  00260	74 0a		 je	 SHORT $LN5@PyImport_I@7
  00262	48 8b 4c 24 50	 mov	 rcx, QWORD PTR builtins$[rsp]
  00267	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@PyImport_I@7:
  0026c	33 c0		 xor	 eax, eax
  0026e	85 c0		 test	 eax, eax
  00270	75 e8		 jne	 SHORT $LN8@PyImport_I@7
$LN4@PyImport_I@7:

; 1665 :     Py_XDECREF(import);

  00272	48 83 7c 24 48
	00		 cmp	 QWORD PTR import$[rsp], 0
  00278	74 0a		 je	 SHORT $LN1@PyImport_I@7
  0027a	48 8b 4c 24 48	 mov	 rcx, QWORD PTR import$[rsp]
  0027f	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@PyImport_I@7:
  00284	33 c0		 xor	 eax, eax
  00286	85 c0		 test	 eax, eax
  00288	75 e8		 jne	 SHORT $LN4@PyImport_I@7

; 1666 : 
; 1667 :     return r;

  0028a	48 8b 44 24 60	 mov	 rax, QWORD PTR r$[rsp]
$LN28@PyImport_I@7:

; 1668 : }

  0028f	48 83 c4 78	 add	 rsp, 120		; 00000078H
  00293	c3		 ret	 0
PyImport_Import ENDP
_TEXT	ENDS
EXTRN	PyList_Append:PROC
EXTRN	_PyImport_DynLoadFiletab:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$imp_extension_suffixes DD imagerel imp_extension_suffixes
	DD	imagerel imp_extension_suffixes+192
	DD	imagerel $unwind$imp_extension_suffixes
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$imp_extension_suffixes DD 010e01H
	DD	0820eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT imp_extension_suffixes
_TEXT	SEGMENT
index$ = 32
list$ = 40
suffix$ = 48
item$123044 = 56
self$ = 80
noargs$ = 88
imp_extension_suffixes PROC				; COMDAT

; 1672 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1673 :     PyObject *list;
; 1674 :     const char *suffix;
; 1675 :     unsigned int index = 0;

  0000e	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR index$[rsp], 0

; 1676 : 
; 1677 :     list = PyList_New(0);

  00016	33 c9		 xor	 ecx, ecx
  00018	e8 00 00 00 00	 call	 PyList_New
  0001d	48 89 44 24 28	 mov	 QWORD PTR list$[rsp], rax

; 1678 :     if (list == NULL)

  00022	48 83 7c 24 28
	00		 cmp	 QWORD PTR list$[rsp], 0
  00028	75 07		 jne	 SHORT $LN5@imp_extens

; 1679 :         return NULL;

  0002a	33 c0		 xor	 eax, eax
  0002c	e9 8a 00 00 00	 jmp	 $LN6@imp_extens
$LN5@imp_extens:
$LN4@imp_extens:

; 1680 : #ifdef HAVE_DYNAMIC_LOADING
; 1681 :     while ((suffix = _PyImport_DynLoadFiletab[index])) {

  00031	8b 44 24 20	 mov	 eax, DWORD PTR index$[rsp]
  00035	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_PyImport_DynLoadFiletab
  0003c	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  00040	48 89 44 24 30	 mov	 QWORD PTR suffix$[rsp], rax
  00045	48 83 7c 24 30
	00		 cmp	 QWORD PTR suffix$[rsp], 0
  0004b	74 69		 je	 SHORT $LN3@imp_extens

; 1682 :         PyObject *item = PyUnicode_FromString(suffix);

  0004d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR suffix$[rsp]
  00052	e8 00 00 00 00	 call	 PyUnicode_FromString
  00057	48 89 44 24 38	 mov	 QWORD PTR item$123044[rsp], rax

; 1683 :         if (item == NULL) {

  0005c	48 83 7c 24 38
	00		 cmp	 QWORD PTR item$123044[rsp], 0
  00062	75 0e		 jne	 SHORT $LN2@imp_extens

; 1684 :             Py_DECREF(list);

  00064	48 8b 4c 24 28	 mov	 rcx, QWORD PTR list$[rsp]
  00069	e8 00 00 00 00	 call	 _Py_DecRef

; 1685 :             return NULL;

  0006e	33 c0		 xor	 eax, eax
  00070	eb 49		 jmp	 SHORT $LN6@imp_extens
$LN2@imp_extens:

; 1686 :         }
; 1687 :         if (PyList_Append(list, item) < 0) {

  00072	48 8b 54 24 38	 mov	 rdx, QWORD PTR item$123044[rsp]
  00077	48 8b 4c 24 28	 mov	 rcx, QWORD PTR list$[rsp]
  0007c	e8 00 00 00 00	 call	 PyList_Append
  00081	85 c0		 test	 eax, eax
  00083	7d 18		 jge	 SHORT $LN1@imp_extens

; 1688 :             Py_DECREF(list);

  00085	48 8b 4c 24 28	 mov	 rcx, QWORD PTR list$[rsp]
  0008a	e8 00 00 00 00	 call	 _Py_DecRef

; 1689 :             Py_DECREF(item);

  0008f	48 8b 4c 24 38	 mov	 rcx, QWORD PTR item$123044[rsp]
  00094	e8 00 00 00 00	 call	 _Py_DecRef

; 1690 :             return NULL;

  00099	33 c0		 xor	 eax, eax
  0009b	eb 1e		 jmp	 SHORT $LN6@imp_extens
$LN1@imp_extens:

; 1691 :         }
; 1692 :         Py_DECREF(item);

  0009d	48 8b 4c 24 38	 mov	 rcx, QWORD PTR item$123044[rsp]
  000a2	e8 00 00 00 00	 call	 _Py_DecRef

; 1693 :         index += 1;

  000a7	8b 44 24 20	 mov	 eax, DWORD PTR index$[rsp]
  000ab	ff c0		 inc	 eax
  000ad	89 44 24 20	 mov	 DWORD PTR index$[rsp], eax

; 1694 :     }

  000b1	e9 7b ff ff ff	 jmp	 $LN4@imp_extens
$LN3@imp_extens:

; 1695 : #endif
; 1696 :     return list;

  000b6	48 8b 44 24 28	 mov	 rax, QWORD PTR list$[rsp]
$LN6@imp_extens:

; 1697 : }

  000bb	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000bf	c3		 ret	 0
imp_extension_suffixes ENDP
_TEXT	ENDS
PUBLIC	??_C@_0P@NKIEEJAP@U?3init_builtin?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$imp_init_builtin DD imagerel imp_init_builtin
	DD	imagerel imp_init_builtin+146
	DD	imagerel $unwind$imp_init_builtin
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$imp_init_builtin DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_0P@NKIEEJAP@U?3init_builtin?$AA@
CONST	SEGMENT
??_C@_0P@NKIEEJAP@U?3init_builtin?$AA@ DB 'U:init_builtin', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT imp_init_builtin
_TEXT	SEGMENT
name$ = 32
ret$ = 40
m$ = 48
self$ = 80
args$ = 88
imp_init_builtin PROC					; COMDAT

; 1701 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1702 :     PyObject *name;
; 1703 :     int ret;
; 1704 :     PyObject *m;
; 1705 :     if (!PyArg_ParseTuple(args, "U:init_builtin", &name))

  0000e	4c 8d 44 24 20	 lea	 r8, QWORD PTR name$[rsp]
  00013	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0P@NKIEEJAP@U?3init_builtin?$AA@
  0001a	48 8b 4c 24 58	 mov	 rcx, QWORD PTR args$[rsp]
  0001f	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00024	85 c0		 test	 eax, eax
  00026	75 04		 jne	 SHORT $LN7@imp_init_b

; 1706 :         return NULL;

  00028	33 c0		 xor	 eax, eax
  0002a	eb 61		 jmp	 SHORT $LN8@imp_init_b
$LN7@imp_init_b:

; 1707 :     ret = init_builtin(name);

  0002c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR name$[rsp]
  00031	e8 00 00 00 00	 call	 init_builtin
  00036	89 44 24 28	 mov	 DWORD PTR ret$[rsp], eax

; 1708 :     if (ret < 0)

  0003a	83 7c 24 28 00	 cmp	 DWORD PTR ret$[rsp], 0
  0003f	7d 04		 jge	 SHORT $LN6@imp_init_b

; 1709 :         return NULL;

  00041	33 c0		 xor	 eax, eax
  00043	eb 48		 jmp	 SHORT $LN8@imp_init_b
$LN6@imp_init_b:

; 1710 :     if (ret == 0) {

  00045	83 7c 24 28 00	 cmp	 DWORD PTR ret$[rsp], 0
  0004a	75 15		 jne	 SHORT $LN5@imp_init_b

; 1711 :         Py_INCREF(Py_None);

  0004c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00053	e8 00 00 00 00	 call	 _Py_IncRef

; 1712 :         return Py_None;

  00058	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0005f	eb 2c		 jmp	 SHORT $LN8@imp_init_b
$LN5@imp_init_b:

; 1713 :     }
; 1714 :     m = PyImport_AddModuleObject(name);

  00061	48 8b 4c 24 20	 mov	 rcx, QWORD PTR name$[rsp]
  00066	e8 00 00 00 00	 call	 PyImport_AddModuleObject
  0006b	48 89 44 24 30	 mov	 QWORD PTR m$[rsp], rax
$LN4@imp_init_b:

; 1715 :     Py_XINCREF(m);

  00070	48 83 7c 24 30
	00		 cmp	 QWORD PTR m$[rsp], 0
  00076	74 0a		 je	 SHORT $LN1@imp_init_b
  00078	48 8b 4c 24 30	 mov	 rcx, QWORD PTR m$[rsp]
  0007d	e8 00 00 00 00	 call	 _Py_IncRef
$LN1@imp_init_b:
  00082	33 c0		 xor	 eax, eax
  00084	85 c0		 test	 eax, eax
  00086	75 e8		 jne	 SHORT $LN4@imp_init_b

; 1716 :     return m;

  00088	48 8b 44 24 30	 mov	 rax, QWORD PTR m$[rsp]
$LN8@imp_init_b:

; 1717 : }

  0008d	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00091	c3		 ret	 0
imp_init_builtin ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CC@MKJJHIGO@Cannot?5re?9init?5internal?5module?5?$CF@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$init_builtin DD imagerel init_builtin
	DD	imagerel init_builtin+272
	DD	imagerel $unwind$init_builtin
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$init_builtin DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0CC@MKJJHIGO@Cannot?5re?9init?5internal?5module?5?$CF@
CONST	SEGMENT
??_C@_0CC@MKJJHIGO@Cannot?5re?9init?5internal?5module?5?$CF@ DB 'Cannot r'
	DB	'e-init internal module %R', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT init_builtin
_TEXT	SEGMENT
p$ = 32
def$122438 = 40
mod$122437 = 48
name$ = 80
init_builtin PROC					; COMDAT

; 937  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 938  :     struct _inittab *p;
; 939  : 
; 940  :     if (_PyImport_FindExtensionObject(name, name) != NULL)

  00009	48 8b 54 24 50	 mov	 rdx, QWORD PTR name$[rsp]
  0000e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR name$[rsp]
  00013	e8 00 00 00 00	 call	 _PyImport_FindExtensionObject
  00018	48 85 c0	 test	 rax, rax
  0001b	74 0a		 je	 SHORT $LN8@init_built

; 941  :         return 1;

  0001d	b8 01 00 00 00	 mov	 eax, 1
  00022	e9 e4 00 00 00	 jmp	 $LN9@init_built
$LN8@init_built:

; 942  : 
; 943  :     for (p = PyImport_Inittab; p->name != NULL; p++) {

  00027	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR PyImport_Inittab
  0002e	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax
  00033	eb 0e		 jmp	 SHORT $LN7@init_built
$LN6@init_built:
  00035	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0003a	48 83 c0 10	 add	 rax, 16
  0003e	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax
$LN7@init_built:
  00043	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00048	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0004c	0f 84 b7 00 00
	00		 je	 $LN5@init_built

; 944  :         PyObject *mod;
; 945  :         PyModuleDef *def;
; 946  :         if (PyUnicode_CompareWithASCIIString(name, p->name) == 0) {

  00052	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00057	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  0005a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR name$[rsp]
  0005f	e8 00 00 00 00	 call	 PyUnicode_CompareWithASCIIString
  00064	85 c0		 test	 eax, eax
  00066	0f 85 98 00 00
	00		 jne	 $LN4@init_built

; 947  :             if (p->initfunc == NULL) {

  0006c	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00071	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00076	75 1f		 jne	 SHORT $LN3@init_built

; 948  :                 PyErr_Format(PyExc_ImportError,
; 949  :                     "Cannot re-init internal module %R",
; 950  :                     name);

  00078	4c 8b 44 24 50	 mov	 r8, QWORD PTR name$[rsp]
  0007d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CC@MKJJHIGO@Cannot?5re?9init?5internal?5module?5?$CF@
  00084	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ImportError
  0008b	e8 00 00 00 00	 call	 PyErr_Format

; 951  :                 return -1;

  00090	b8 ff ff ff ff	 mov	 eax, -1
  00095	eb 74		 jmp	 SHORT $LN9@init_built
$LN3@init_built:

; 952  :             }
; 953  :             mod = (*p->initfunc)();

  00097	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0009c	ff 50 08	 call	 QWORD PTR [rax+8]
  0009f	48 89 44 24 30	 mov	 QWORD PTR mod$122437[rsp], rax

; 954  :             if (mod == 0)

  000a4	48 83 7c 24 30
	00		 cmp	 QWORD PTR mod$122437[rsp], 0
  000aa	75 07		 jne	 SHORT $LN2@init_built

; 955  :                 return -1;

  000ac	b8 ff ff ff ff	 mov	 eax, -1
  000b1	eb 58		 jmp	 SHORT $LN9@init_built
$LN2@init_built:

; 956  :             /* Remember pointer to module init function. */
; 957  :             def = PyModule_GetDef(mod);

  000b3	48 8b 4c 24 30	 mov	 rcx, QWORD PTR mod$122437[rsp]
  000b8	e8 00 00 00 00	 call	 PyModule_GetDef
  000bd	48 89 44 24 28	 mov	 QWORD PTR def$122438[rsp], rax

; 958  :             def->m_base.m_init = p->initfunc;

  000c2	48 8b 44 24 28	 mov	 rax, QWORD PTR def$122438[rsp]
  000c7	48 8b 4c 24 20	 mov	 rcx, QWORD PTR p$[rsp]
  000cc	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  000d0	48 89 48 60	 mov	 QWORD PTR [rax+96], rcx

; 959  :             if (_PyImport_FixupExtensionObject(mod, name, name) < 0)

  000d4	4c 8b 44 24 50	 mov	 r8, QWORD PTR name$[rsp]
  000d9	48 8b 54 24 50	 mov	 rdx, QWORD PTR name$[rsp]
  000de	48 8b 4c 24 30	 mov	 rcx, QWORD PTR mod$122437[rsp]
  000e3	e8 00 00 00 00	 call	 _PyImport_FixupExtensionObject
  000e8	85 c0		 test	 eax, eax
  000ea	7d 07		 jge	 SHORT $LN1@init_built

; 960  :                 return -1;

  000ec	b8 ff ff ff ff	 mov	 eax, -1
  000f1	eb 18		 jmp	 SHORT $LN9@init_built
$LN1@init_built:

; 961  :             /* FixupExtension has put the module into sys.modules,
; 962  :                so we can release our own reference. */
; 963  :             Py_DECREF(mod);

  000f3	48 8b 4c 24 30	 mov	 rcx, QWORD PTR mod$122437[rsp]
  000f8	e8 00 00 00 00	 call	 _Py_DecRef

; 964  :             return 1;

  000fd	b8 01 00 00 00	 mov	 eax, 1
  00102	eb 07		 jmp	 SHORT $LN9@init_built
$LN4@init_built:

; 965  :         }
; 966  :     }

  00104	e9 2c ff ff ff	 jmp	 $LN6@init_built
$LN5@init_built:

; 967  :     return 0;

  00109	33 c0		 xor	 eax, eax
$LN9@init_built:

; 968  : }

  0010b	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0010f	c3		 ret	 0
init_builtin ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@PCGCFPM@U?3init_frozen?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$imp_init_frozen DD imagerel imp_init_frozen
	DD	imagerel imp_init_frozen+146
	DD	imagerel $unwind$imp_init_frozen
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$imp_init_frozen DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_0O@PCGCFPM@U?3init_frozen?$AA@
CONST	SEGMENT
??_C@_0O@PCGCFPM@U?3init_frozen?$AA@ DB 'U:init_frozen', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT imp_init_frozen
_TEXT	SEGMENT
name$ = 32
ret$ = 40
m$ = 48
self$ = 80
args$ = 88
imp_init_frozen PROC					; COMDAT

; 1721 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1722 :     PyObject *name;
; 1723 :     int ret;
; 1724 :     PyObject *m;
; 1725 :     if (!PyArg_ParseTuple(args, "U:init_frozen", &name))

  0000e	4c 8d 44 24 20	 lea	 r8, QWORD PTR name$[rsp]
  00013	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0O@PCGCFPM@U?3init_frozen?$AA@
  0001a	48 8b 4c 24 58	 mov	 rcx, QWORD PTR args$[rsp]
  0001f	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00024	85 c0		 test	 eax, eax
  00026	75 04		 jne	 SHORT $LN7@imp_init_f

; 1726 :         return NULL;

  00028	33 c0		 xor	 eax, eax
  0002a	eb 61		 jmp	 SHORT $LN8@imp_init_f
$LN7@imp_init_f:

; 1727 :     ret = PyImport_ImportFrozenModuleObject(name);

  0002c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR name$[rsp]
  00031	e8 00 00 00 00	 call	 PyImport_ImportFrozenModuleObject
  00036	89 44 24 28	 mov	 DWORD PTR ret$[rsp], eax

; 1728 :     if (ret < 0)

  0003a	83 7c 24 28 00	 cmp	 DWORD PTR ret$[rsp], 0
  0003f	7d 04		 jge	 SHORT $LN6@imp_init_f

; 1729 :         return NULL;

  00041	33 c0		 xor	 eax, eax
  00043	eb 48		 jmp	 SHORT $LN8@imp_init_f
$LN6@imp_init_f:

; 1730 :     if (ret == 0) {

  00045	83 7c 24 28 00	 cmp	 DWORD PTR ret$[rsp], 0
  0004a	75 15		 jne	 SHORT $LN5@imp_init_f

; 1731 :         Py_INCREF(Py_None);

  0004c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00053	e8 00 00 00 00	 call	 _Py_IncRef

; 1732 :         return Py_None;

  00058	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0005f	eb 2c		 jmp	 SHORT $LN8@imp_init_f
$LN5@imp_init_f:

; 1733 :     }
; 1734 :     m = PyImport_AddModuleObject(name);

  00061	48 8b 4c 24 20	 mov	 rcx, QWORD PTR name$[rsp]
  00066	e8 00 00 00 00	 call	 PyImport_AddModuleObject
  0006b	48 89 44 24 30	 mov	 QWORD PTR m$[rsp], rax
$LN4@imp_init_f:

; 1735 :     Py_XINCREF(m);

  00070	48 83 7c 24 30
	00		 cmp	 QWORD PTR m$[rsp], 0
  00076	74 0a		 je	 SHORT $LN1@imp_init_f
  00078	48 8b 4c 24 30	 mov	 rcx, QWORD PTR m$[rsp]
  0007d	e8 00 00 00 00	 call	 _Py_IncRef
$LN1@imp_init_f:
  00082	33 c0		 xor	 eax, eax
  00084	85 c0		 test	 eax, eax
  00086	75 e8		 jne	 SHORT $LN4@imp_init_f

; 1736 :     return m;

  00088	48 8b 44 24 30	 mov	 rax, QWORD PTR m$[rsp]
$LN8@imp_init_f:

; 1737 : }

  0008d	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00091	c3		 ret	 0
imp_init_frozen ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BE@DHEKPLIO@U?3get_frozen_object?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$imp_get_frozen_object DD imagerel imp_get_frozen_object
	DD	imagerel imp_get_frozen_object+59
	DD	imagerel $unwind$imp_get_frozen_object
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$imp_get_frozen_object DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT ??_C@_0BE@DHEKPLIO@U?3get_frozen_object?$AA@
CONST	SEGMENT
??_C@_0BE@DHEKPLIO@U?3get_frozen_object?$AA@ DB 'U:get_frozen_object', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT imp_get_frozen_object
_TEXT	SEGMENT
name$ = 32
self$ = 64
args$ = 72
imp_get_frozen_object PROC				; COMDAT

; 1741 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1742 :     PyObject *name;
; 1743 : 
; 1744 :     if (!PyArg_ParseTuple(args, "U:get_frozen_object", &name))

  0000e	4c 8d 44 24 20	 lea	 r8, QWORD PTR name$[rsp]
  00013	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@DHEKPLIO@U?3get_frozen_object?$AA@
  0001a	48 8b 4c 24 48	 mov	 rcx, QWORD PTR args$[rsp]
  0001f	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00024	85 c0		 test	 eax, eax
  00026	75 04		 jne	 SHORT $LN1@imp_get_fr

; 1745 :         return NULL;

  00028	33 c0		 xor	 eax, eax
  0002a	eb 0a		 jmp	 SHORT $LN2@imp_get_fr
$LN1@imp_get_fr:

; 1746 :     return get_frozen_object(name);

  0002c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR name$[rsp]
  00031	e8 00 00 00 00	 call	 get_frozen_object
$LN2@imp_get_fr:

; 1747 : }

  00036	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003a	c3		 ret	 0
imp_get_frozen_object ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BP@BEFPGIMM@No?5such?5frozen?5object?5named?5?$CFR?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$get_frozen_object DD imagerel get_frozen_object
	DD	imagerel get_frozen_object+156
	DD	imagerel $unwind$get_frozen_object
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$get_frozen_object DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0BP@BEFPGIMM@No?5such?5frozen?5object?5named?5?$CFR?$AA@
CONST	SEGMENT
??_C@_0BP@BEFPGIMM@No?5such?5frozen?5object?5named?5?$CFR?$AA@ DB 'No suc'
	DB	'h frozen object named %R', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT get_frozen_object
_TEXT	SEGMENT
p$ = 32
size$ = 40
name$ = 64
get_frozen_object PROC					; COMDAT

; 992  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 993  :     struct _frozen *p = find_frozen(name);

  00009	48 8b 4c 24 40	 mov	 rcx, QWORD PTR name$[rsp]
  0000e	e8 00 00 00 00	 call	 find_frozen
  00013	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax

; 994  :     int size;
; 995  : 
; 996  :     if (p == NULL) {

  00018	48 83 7c 24 20
	00		 cmp	 QWORD PTR p$[rsp], 0
  0001e	75 1c		 jne	 SHORT $LN3@get_frozen

; 997  :         PyErr_Format(PyExc_ImportError,
; 998  :                      "No such frozen object named %R",
; 999  :                      name);

  00020	4c 8b 44 24 40	 mov	 r8, QWORD PTR name$[rsp]
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BP@BEFPGIMM@No?5such?5frozen?5object?5named?5?$CFR?$AA@
  0002c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ImportError
  00033	e8 00 00 00 00	 call	 PyErr_Format

; 1000 :         return NULL;

  00038	33 c0		 xor	 eax, eax
  0003a	eb 5b		 jmp	 SHORT $LN4@get_frozen
$LN3@get_frozen:

; 1001 :     }
; 1002 :     if (p->code == NULL) {

  0003c	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00041	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00046	75 1c		 jne	 SHORT $LN2@get_frozen

; 1003 :         PyErr_Format(PyExc_ImportError,
; 1004 :                      "Excluded frozen object named %R",
; 1005 :                      name);

  00048	4c 8b 44 24 40	 mov	 r8, QWORD PTR name$[rsp]
  0004d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CA@MFBBGHEA@Excluded?5frozen?5object?5named?5?$CFR?$AA@
  00054	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ImportError
  0005b	e8 00 00 00 00	 call	 PyErr_Format

; 1006 :         return NULL;

  00060	33 c0		 xor	 eax, eax
  00062	eb 33		 jmp	 SHORT $LN4@get_frozen
$LN2@get_frozen:

; 1007 :     }
; 1008 :     size = p->size;

  00064	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00069	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
  0006c	89 44 24 28	 mov	 DWORD PTR size$[rsp], eax

; 1009 :     if (size < 0)

  00070	83 7c 24 28 00	 cmp	 DWORD PTR size$[rsp], 0
  00075	7d 0a		 jge	 SHORT $LN1@get_frozen

; 1010 :         size = -size;

  00077	8b 44 24 28	 mov	 eax, DWORD PTR size$[rsp]
  0007b	f7 d8		 neg	 eax
  0007d	89 44 24 28	 mov	 DWORD PTR size$[rsp], eax
$LN1@get_frozen:

; 1011 :     return PyMarshal_ReadObjectFromString((char *)p->code, size);

  00081	48 63 44 24 28	 movsxd	 rax, DWORD PTR size$[rsp]
  00086	48 8b d0	 mov	 rdx, rax
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0008e	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00092	e8 00 00 00 00	 call	 PyMarshal_ReadObjectFromString
$LN4@get_frozen:

; 1012 : }

  00097	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0009b	c3		 ret	 0
get_frozen_object ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BE@NAPODMHB@U?3is_frozen_package?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$imp_is_frozen_package DD imagerel imp_is_frozen_package
	DD	imagerel imp_is_frozen_package+59
	DD	imagerel $unwind$imp_is_frozen_package
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$imp_is_frozen_package DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT ??_C@_0BE@NAPODMHB@U?3is_frozen_package?$AA@
CONST	SEGMENT
??_C@_0BE@NAPODMHB@U?3is_frozen_package?$AA@ DB 'U:is_frozen_package', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT imp_is_frozen_package
_TEXT	SEGMENT
name$ = 32
self$ = 64
args$ = 72
imp_is_frozen_package PROC				; COMDAT

; 1751 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1752 :     PyObject *name;
; 1753 : 
; 1754 :     if (!PyArg_ParseTuple(args, "U:is_frozen_package", &name))

  0000e	4c 8d 44 24 20	 lea	 r8, QWORD PTR name$[rsp]
  00013	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@NAPODMHB@U?3is_frozen_package?$AA@
  0001a	48 8b 4c 24 48	 mov	 rcx, QWORD PTR args$[rsp]
  0001f	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00024	85 c0		 test	 eax, eax
  00026	75 04		 jne	 SHORT $LN1@imp_is_fro

; 1755 :         return NULL;

  00028	33 c0		 xor	 eax, eax
  0002a	eb 0a		 jmp	 SHORT $LN2@imp_is_fro
$LN1@imp_is_fro:

; 1756 :     return is_frozen_package(name);

  0002c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR name$[rsp]
  00031	e8 00 00 00 00	 call	 is_frozen_package
$LN2@imp_is_fro:

; 1757 : }

  00036	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003a	c3		 ret	 0
imp_is_frozen_package ENDP
_TEXT	ENDS
EXTRN	_Py_FalseStruct:BYTE
EXTRN	_Py_TrueStruct:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$is_frozen_package DD imagerel is_frozen_package
	DD	imagerel is_frozen_package+126
	DD	imagerel $unwind$is_frozen_package
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$is_frozen_package DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT is_frozen_package
_TEXT	SEGMENT
p$ = 32
size$ = 40
name$ = 64
is_frozen_package PROC					; COMDAT

; 1016 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1017 :     struct _frozen *p = find_frozen(name);

  00009	48 8b 4c 24 40	 mov	 rcx, QWORD PTR name$[rsp]
  0000e	e8 00 00 00 00	 call	 find_frozen
  00013	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax

; 1018 :     int size;
; 1019 : 
; 1020 :     if (p == NULL) {

  00018	48 83 7c 24 20
	00		 cmp	 QWORD PTR p$[rsp], 0
  0001e	75 1c		 jne	 SHORT $LN3@is_frozen_

; 1021 :         PyErr_Format(PyExc_ImportError,
; 1022 :                      "No such frozen object named %R",
; 1023 :                      name);

  00020	4c 8b 44 24 40	 mov	 r8, QWORD PTR name$[rsp]
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BP@BEFPGIMM@No?5such?5frozen?5object?5named?5?$CFR?$AA@
  0002c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ImportError
  00033	e8 00 00 00 00	 call	 PyErr_Format

; 1024 :         return NULL;

  00038	33 c0		 xor	 eax, eax
  0003a	eb 3d		 jmp	 SHORT $LN4@is_frozen_
$LN3@is_frozen_:

; 1025 :     }
; 1026 : 
; 1027 :     size = p->size;

  0003c	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00041	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
  00044	89 44 24 28	 mov	 DWORD PTR size$[rsp], eax

; 1028 : 
; 1029 :     if (size < 0)

  00048	83 7c 24 28 00	 cmp	 DWORD PTR size$[rsp], 0
  0004d	7d 17		 jge	 SHORT $LN2@is_frozen_

; 1030 :         Py_RETURN_TRUE;

  0004f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_TrueStruct
  00056	e8 00 00 00 00	 call	 _Py_IncRef
  0005b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  00062	eb 15		 jmp	 SHORT $LN4@is_frozen_

; 1031 :     else

  00064	eb 13		 jmp	 SHORT $LN1@is_frozen_
$LN2@is_frozen_:

; 1032 :         Py_RETURN_FALSE;

  00066	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_FalseStruct
  0006d	e8 00 00 00 00	 call	 _Py_IncRef
  00072	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct
$LN1@is_frozen_:
$LN4@is_frozen_:

; 1033 : }

  00079	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0007d	c3		 ret	 0
is_frozen_package ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@IGLOOGCC@U?3is_builtin?$AA@		; `string'
EXTRN	PyLong_FromLong:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$imp_is_builtin DD imagerel imp_is_builtin
	DD	imagerel imp_is_builtin+66
	DD	imagerel $unwind$imp_is_builtin
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$imp_is_builtin DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT ??_C@_0N@IGLOOGCC@U?3is_builtin?$AA@
CONST	SEGMENT
??_C@_0N@IGLOOGCC@U?3is_builtin?$AA@ DB 'U:is_builtin', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT imp_is_builtin
_TEXT	SEGMENT
name$ = 32
self$ = 64
args$ = 72
imp_is_builtin PROC					; COMDAT

; 1761 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1762 :     PyObject *name;
; 1763 :     if (!PyArg_ParseTuple(args, "U:is_builtin", &name))

  0000e	4c 8d 44 24 20	 lea	 r8, QWORD PTR name$[rsp]
  00013	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@IGLOOGCC@U?3is_builtin?$AA@
  0001a	48 8b 4c 24 48	 mov	 rcx, QWORD PTR args$[rsp]
  0001f	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00024	85 c0		 test	 eax, eax
  00026	75 04		 jne	 SHORT $LN1@imp_is_bui

; 1764 :         return NULL;

  00028	33 c0		 xor	 eax, eax
  0002a	eb 11		 jmp	 SHORT $LN2@imp_is_bui
$LN1@imp_is_bui:

; 1765 :     return PyLong_FromLong(is_builtin(name));

  0002c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR name$[rsp]
  00031	e8 00 00 00 00	 call	 is_builtin
  00036	8b c8		 mov	 ecx, eax
  00038	e8 00 00 00 00	 call	 PyLong_FromLong
$LN2@imp_is_bui:

; 1766 : }

  0003d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00041	c3		 ret	 0
imp_is_builtin ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$is_builtin DD imagerel is_builtin
	DD	imagerel is_builtin+142
	DD	imagerel $unwind$is_builtin
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$is_builtin DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT is_builtin
_TEXT	SEGMENT
i$ = 32
cmp$ = 36
name$ = 64
is_builtin PROC						; COMDAT

; 843  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 844  :     int i, cmp;
; 845  :     for (i = 0; PyImport_Inittab[i].name != NULL; i++) {

  00009	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00011	eb 0a		 jmp	 SHORT $LN6@is_builtin
$LN5@is_builtin:
  00013	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  00017	ff c0		 inc	 eax
  00019	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN6@is_builtin:
  0001d	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  00022	48 6b c0 10	 imul	 rax, 16
  00026	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyImport_Inittab
  0002d	48 83 3c 01 00	 cmp	 QWORD PTR [rcx+rax], 0
  00032	74 53		 je	 SHORT $LN4@is_builtin

; 846  :         cmp = PyUnicode_CompareWithASCIIString(name, PyImport_Inittab[i].name);

  00034	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  00039	48 6b c0 10	 imul	 rax, 16
  0003d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyImport_Inittab
  00044	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00048	48 8b 4c 24 40	 mov	 rcx, QWORD PTR name$[rsp]
  0004d	e8 00 00 00 00	 call	 PyUnicode_CompareWithASCIIString
  00052	89 44 24 24	 mov	 DWORD PTR cmp$[rsp], eax

; 847  :         if (cmp == 0) {

  00056	83 7c 24 24 00	 cmp	 DWORD PTR cmp$[rsp], 0
  0005b	75 28		 jne	 SHORT $LN3@is_builtin

; 848  :             if (PyImport_Inittab[i].initfunc == NULL)

  0005d	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  00062	48 6b c0 10	 imul	 rax, 16
  00066	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyImport_Inittab
  0006d	48 83 7c 01 08
	00		 cmp	 QWORD PTR [rcx+rax+8], 0
  00073	75 09		 jne	 SHORT $LN2@is_builtin

; 849  :                 return -1;

  00075	b8 ff ff ff ff	 mov	 eax, -1
  0007a	eb 0d		 jmp	 SHORT $LN7@is_builtin

; 850  :             else

  0007c	eb 07		 jmp	 SHORT $LN1@is_builtin
$LN2@is_builtin:

; 851  :                 return 1;

  0007e	b8 01 00 00 00	 mov	 eax, 1
  00083	eb 04		 jmp	 SHORT $LN7@is_builtin
$LN1@is_builtin:
$LN3@is_builtin:

; 852  :         }
; 853  :     }

  00085	eb 8c		 jmp	 SHORT $LN5@is_builtin
$LN4@is_builtin:

; 854  :     return 0;

  00087	33 c0		 xor	 eax, eax
$LN7@is_builtin:

; 855  : }

  00089	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0008d	c3		 ret	 0
is_builtin ENDP
_TEXT	ENDS
PUBLIC	??_C@_0M@IGODAMEH@U?3is_frozen?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$imp_is_frozen DD imagerel imp_is_frozen
	DD	imagerel imp_is_frozen+103
	DD	imagerel $unwind$imp_is_frozen
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$imp_is_frozen DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_0M@IGODAMEH@U?3is_frozen?$AA@
CONST	SEGMENT
??_C@_0M@IGODAMEH@U?3is_frozen?$AA@ DB 'U:is_frozen', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT imp_is_frozen
_TEXT	SEGMENT
p$ = 32
name$ = 40
tv74 = 48
self$ = 80
args$ = 88
imp_is_frozen PROC					; COMDAT

; 1770 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1771 :     PyObject *name;
; 1772 :     struct _frozen *p;
; 1773 :     if (!PyArg_ParseTuple(args, "U:is_frozen", &name))

  0000e	4c 8d 44 24 28	 lea	 r8, QWORD PTR name$[rsp]
  00013	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@IGODAMEH@U?3is_frozen?$AA@
  0001a	48 8b 4c 24 58	 mov	 rcx, QWORD PTR args$[rsp]
  0001f	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00024	85 c0		 test	 eax, eax
  00026	75 04		 jne	 SHORT $LN1@imp_is_fro@2

; 1774 :         return NULL;

  00028	33 c0		 xor	 eax, eax
  0002a	eb 36		 jmp	 SHORT $LN2@imp_is_fro@2
$LN1@imp_is_fro@2:

; 1775 :     p = find_frozen(name);

  0002c	48 8b 4c 24 28	 mov	 rcx, QWORD PTR name$[rsp]
  00031	e8 00 00 00 00	 call	 find_frozen
  00036	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax

; 1776 :     return PyBool_FromLong((long) (p == NULL ? 0 : p->size));

  0003b	48 83 7c 24 20
	00		 cmp	 QWORD PTR p$[rsp], 0
  00041	75 0a		 jne	 SHORT $LN4@imp_is_fro@2
  00043	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR tv74[rsp], 0
  0004b	eb 0c		 jmp	 SHORT $LN5@imp_is_fro@2
$LN4@imp_is_fro@2:
  0004d	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  00052	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
  00055	89 44 24 30	 mov	 DWORD PTR tv74[rsp], eax
$LN5@imp_is_fro@2:
  00059	8b 4c 24 30	 mov	 ecx, DWORD PTR tv74[rsp]
  0005d	e8 00 00 00 00	 call	 PyBool_FromLong
$LN2@imp_is_fro@2:

; 1777 : }

  00062	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00066	c3		 ret	 0
imp_is_frozen ENDP
_TEXT	ENDS
PUBLIC	??_C@_01KDCPPGHE@r?$AA@				; `string'
PUBLIC	??_C@_0BD@EONBGEBO@UO?$CG?$HMO?3load_dynamic?$AA@ ; `string'
EXTRN	__imp_fclose:PROC
EXTRN	_PyImport_LoadDynamicModule:PROC
EXTRN	PyErr_SetFromErrno:PROC
EXTRN	PyExc_IOError:QWORD
EXTRN	PyErr_Occurred:PROC
EXTRN	_Py_fopen:PROC
EXTRN	PyUnicode_FSDecoder:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$imp_load_dynamic DD imagerel imp_load_dynamic
	DD	imagerel imp_load_dynamic+232
	DD	imagerel $unwind$imp_load_dynamic
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$imp_load_dynamic DD 010e01H
	DD	0c20eH
xdata	ENDS
;	COMDAT ??_C@_01KDCPPGHE@r?$AA@
CONST	SEGMENT
??_C@_01KDCPPGHE@r?$AA@ DB 'r', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@EONBGEBO@UO?$CG?$HMO?3load_dynamic?$AA@
CONST	SEGMENT
??_C@_0BD@EONBGEBO@UO?$CG?$HMO?3load_dynamic?$AA@ DB 'UO&|O:load_dynamic', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT imp_load_dynamic
_TEXT	SEGMENT
fp$ = 48
pathname$ = 56
name$ = 64
mod$ = 72
fob$ = 80
self$ = 112
args$ = 120
imp_load_dynamic PROC					; COMDAT

; 1783 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 1784 :     PyObject *name, *pathname, *fob = NULL, *mod;

  0000e	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR fob$[rsp], 0

; 1785 :     FILE *fp;
; 1786 : 
; 1787 :     if (!PyArg_ParseTuple(args, "UO&|O:load_dynamic",
; 1788 :                           &name, PyUnicode_FSDecoder, &pathname, &fob))

  00017	48 8d 44 24 50	 lea	 rax, QWORD PTR fob$[rsp]
  0001c	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00021	48 8d 44 24 38	 lea	 rax, QWORD PTR pathname$[rsp]
  00026	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0002b	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:PyUnicode_FSDecoder
  00032	4c 8d 44 24 40	 lea	 r8, QWORD PTR name$[rsp]
  00037	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@EONBGEBO@UO?$CG?$HMO?3load_dynamic?$AA@
  0003e	48 8b 4c 24 78	 mov	 rcx, QWORD PTR args$[rsp]
  00043	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00048	85 c0		 test	 eax, eax
  0004a	75 07		 jne	 SHORT $LN6@imp_load_d

; 1789 :         return NULL;

  0004c	33 c0		 xor	 eax, eax
  0004e	e9 90 00 00 00	 jmp	 $LN7@imp_load_d
$LN6@imp_load_d:

; 1790 :     if (fob != NULL) {

  00053	48 83 7c 24 50
	00		 cmp	 QWORD PTR fob$[rsp], 0
  00059	74 44		 je	 SHORT $LN5@imp_load_d

; 1791 :         fp = _Py_fopen(pathname, "r");

  0005b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01KDCPPGHE@r?$AA@
  00062	48 8b 4c 24 38	 mov	 rcx, QWORD PTR pathname$[rsp]
  00067	e8 00 00 00 00	 call	 _Py_fopen
  0006c	48 89 44 24 30	 mov	 QWORD PTR fp$[rsp], rax

; 1792 :         if (fp == NULL) {

  00071	48 83 7c 24 30
	00		 cmp	 QWORD PTR fp$[rsp], 0
  00077	75 24		 jne	 SHORT $LN4@imp_load_d

; 1793 :             Py_DECREF(pathname);

  00079	48 8b 4c 24 38	 mov	 rcx, QWORD PTR pathname$[rsp]
  0007e	e8 00 00 00 00	 call	 _Py_DecRef

; 1794 :             if (!PyErr_Occurred())

  00083	e8 00 00 00 00	 call	 PyErr_Occurred
  00088	48 85 c0	 test	 rax, rax
  0008b	75 0c		 jne	 SHORT $LN3@imp_load_d

; 1795 :                 PyErr_SetFromErrno(PyExc_IOError);

  0008d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_IOError
  00094	e8 00 00 00 00	 call	 PyErr_SetFromErrno
$LN3@imp_load_d:

; 1796 :             return NULL;

  00099	33 c0		 xor	 eax, eax
  0009b	eb 46		 jmp	 SHORT $LN7@imp_load_d
$LN4@imp_load_d:

; 1797 :         }
; 1798 :     }
; 1799 :     else

  0009d	eb 09		 jmp	 SHORT $LN2@imp_load_d
$LN5@imp_load_d:

; 1800 :         fp = NULL;

  0009f	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR fp$[rsp], 0
$LN2@imp_load_d:

; 1801 :     mod = _PyImport_LoadDynamicModule(name, pathname, fp);

  000a8	4c 8b 44 24 30	 mov	 r8, QWORD PTR fp$[rsp]
  000ad	48 8b 54 24 38	 mov	 rdx, QWORD PTR pathname$[rsp]
  000b2	48 8b 4c 24 40	 mov	 rcx, QWORD PTR name$[rsp]
  000b7	e8 00 00 00 00	 call	 _PyImport_LoadDynamicModule
  000bc	48 89 44 24 48	 mov	 QWORD PTR mod$[rsp], rax

; 1802 :     Py_DECREF(pathname);

  000c1	48 8b 4c 24 38	 mov	 rcx, QWORD PTR pathname$[rsp]
  000c6	e8 00 00 00 00	 call	 _Py_DecRef

; 1803 :     if (fp)

  000cb	48 83 7c 24 30
	00		 cmp	 QWORD PTR fp$[rsp], 0
  000d1	74 0b		 je	 SHORT $LN1@imp_load_d

; 1804 :         fclose(fp);

  000d3	48 8b 4c 24 30	 mov	 rcx, QWORD PTR fp$[rsp]
  000d8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_fclose
$LN1@imp_load_d:

; 1805 :     return mod;

  000de	48 8b 44 24 48	 mov	 rax, QWORD PTR mod$[rsp]
$LN7@imp_load_d:

; 1806 : }

  000e3	48 83 c4 68	 add	 rsp, 104		; 00000068H
  000e7	c3		 ret	 0
imp_load_dynamic ENDP
_TEXT	ENDS
PUBLIC	PyInit_imp
EXTRN	PyModule_Create2TraceRefs:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyInit_imp DD imagerel $LN9
	DD	imagerel $LN9+99
	DD	imagerel $unwind$PyInit_imp
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyInit_imp DD 010401H
	DD	06204H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyInit_imp
_TEXT	SEGMENT
d$ = 32
m$ = 40
PyInit_imp PROC						; COMDAT

; 1871 : {

$LN9:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1872 :     PyObject *m, *d;
; 1873 : 
; 1874 :     m = PyModule_Create(&impmodule);

  00004	ba f5 03 00 00	 mov	 edx, 1013		; 000003f5H
  00009	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:impmodule
  00010	e8 00 00 00 00	 call	 PyModule_Create2TraceRefs
  00015	48 89 44 24 28	 mov	 QWORD PTR m$[rsp], rax

; 1875 :     if (m == NULL)

  0001a	48 83 7c 24 28
	00		 cmp	 QWORD PTR m$[rsp], 0
  00020	75 02		 jne	 SHORT $LN6@PyInit_imp

; 1876 :         goto failure;

  00022	eb 20		 jmp	 SHORT $failure$123213
$LN6@PyInit_imp:

; 1877 :     d = PyModule_GetDict(m);

  00024	48 8b 4c 24 28	 mov	 rcx, QWORD PTR m$[rsp]
  00029	e8 00 00 00 00	 call	 PyModule_GetDict
  0002e	48 89 44 24 20	 mov	 QWORD PTR d$[rsp], rax

; 1878 :     if (d == NULL)

  00033	48 83 7c 24 20
	00		 cmp	 QWORD PTR d$[rsp], 0
  00039	75 02		 jne	 SHORT $LN5@PyInit_imp

; 1879 :         goto failure;

  0003b	eb 07		 jmp	 SHORT $failure$123213
$LN5@PyInit_imp:

; 1880 : 
; 1881 :     return m;

  0003d	48 8b 44 24 28	 mov	 rax, QWORD PTR m$[rsp]
  00042	eb 1a		 jmp	 SHORT $LN7@PyInit_imp
$failure$123213:
$LN4@PyInit_imp:

; 1882 :   failure:
; 1883 :     Py_XDECREF(m);

  00044	48 83 7c 24 28
	00		 cmp	 QWORD PTR m$[rsp], 0
  0004a	74 0a		 je	 SHORT $LN1@PyInit_imp
  0004c	48 8b 4c 24 28	 mov	 rcx, QWORD PTR m$[rsp]
  00051	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@PyInit_imp:
  00056	33 c0		 xor	 eax, eax
  00058	85 c0		 test	 eax, eax
  0005a	75 e8		 jne	 SHORT $LN4@PyInit_imp

; 1884 :     return NULL;

  0005c	33 c0		 xor	 eax, eax
$LN7@PyInit_imp:

; 1885 : }

  0005e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00062	c3		 ret	 0
PyInit_imp ENDP
_TEXT	ENDS
PUBLIC	PyImport_ExtendInittab
EXTRN	memcpy:PROC
EXTRN	_PyMem_DebugRealloc:PROC
EXTRN	_PxMem_Realloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyImport_ExtendInittab DD imagerel $LN16
	DD	imagerel $LN16+407
	DD	imagerel $unwind$PyImport_ExtendInittab
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyImport_ExtendInittab DD 010901H
	DD	08209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyImport_ExtendInittab
_TEXT	SEGMENT
p$ = 32
n$ = 40
i$ = 44
tv128 = 48
tv95 = 56
newtab$ = 80
PyImport_ExtendInittab PROC				; COMDAT

; 1897 : {

$LN16:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1898 :     static struct _inittab *our_copy = NULL;
; 1899 :     struct _inittab *p;
; 1900 :     int i, n;
; 1901 : 
; 1902 :     /* Count the number of entries in both tables */
; 1903 :     for (n = 0; newtab[n].name != NULL; n++)

  00009	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR n$[rsp], 0
  00011	eb 0a		 jmp	 SHORT $LN9@PyImport_E@3
$LN8@PyImport_E@3:
  00013	8b 44 24 28	 mov	 eax, DWORD PTR n$[rsp]
  00017	ff c0		 inc	 eax
  00019	89 44 24 28	 mov	 DWORD PTR n$[rsp], eax
$LN9@PyImport_E@3:
  0001d	48 63 44 24 28	 movsxd	 rax, DWORD PTR n$[rsp]
  00022	48 6b c0 10	 imul	 rax, 16
  00026	48 8b 4c 24 50	 mov	 rcx, QWORD PTR newtab$[rsp]
  0002b	48 83 3c 01 00	 cmp	 QWORD PTR [rcx+rax], 0
  00030	74 02		 je	 SHORT $LN7@PyImport_E@3

; 1904 :         ;

  00032	eb df		 jmp	 SHORT $LN8@PyImport_E@3
$LN7@PyImport_E@3:

; 1905 :     if (n == 0)

  00034	83 7c 24 28 00	 cmp	 DWORD PTR n$[rsp], 0
  00039	75 07		 jne	 SHORT $LN6@PyImport_E@3

; 1906 :         return 0; /* Nothing to do */

  0003b	33 c0		 xor	 eax, eax
  0003d	e9 50 01 00 00	 jmp	 $LN10@PyImport_E@3
$LN6@PyImport_E@3:

; 1907 :     for (i = 0; PyImport_Inittab[i].name != NULL; i++)

  00042	c7 44 24 2c 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  0004a	eb 0a		 jmp	 SHORT $LN5@PyImport_E@3
$LN4@PyImport_E@3:
  0004c	8b 44 24 2c	 mov	 eax, DWORD PTR i$[rsp]
  00050	ff c0		 inc	 eax
  00052	89 44 24 2c	 mov	 DWORD PTR i$[rsp], eax
$LN5@PyImport_E@3:
  00056	48 63 44 24 2c	 movsxd	 rax, DWORD PTR i$[rsp]
  0005b	48 6b c0 10	 imul	 rax, 16
  0005f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyImport_Inittab
  00066	48 83 3c 01 00	 cmp	 QWORD PTR [rcx+rax], 0
  0006b	74 02		 je	 SHORT $LN3@PyImport_E@3

; 1908 :         ;

  0006d	eb dd		 jmp	 SHORT $LN4@PyImport_E@3
$LN3@PyImport_E@3:

; 1909 : 
; 1910 :     /* Allocate new memory for the combined table */
; 1911 :     p = our_copy;

  0006f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?our_copy@?1??PyImport_ExtendInittab@@9@9
  00076	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax

; 1912 :     PyMem_RESIZE(p, struct _inittab, i+n+1);

  0007b	8b 44 24 2c	 mov	 eax, DWORD PTR i$[rsp]
  0007f	8b 4c 24 28	 mov	 ecx, DWORD PTR n$[rsp]
  00083	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  00087	48 98		 cdqe
  00089	48 b9 ff ff ff
	ff ff ff ff 07	 mov	 rcx, 576460752303423487	; 07ffffffffffffffH
  00093	48 3b c1	 cmp	 rax, rcx
  00096	76 0b		 jbe	 SHORT $LN14@PyImport_E@3
  00098	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR tv128[rsp], 0
  000a1	eb 5d		 jmp	 SHORT $LN15@PyImport_E@3
$LN14@PyImport_E@3:
  000a3	e8 00 00 00 00	 call	 _Py_PXCTX
  000a8	85 c0		 test	 eax, eax
  000aa	74 26		 je	 SHORT $LN12@PyImport_E@3
  000ac	8b 44 24 2c	 mov	 eax, DWORD PTR i$[rsp]
  000b0	8b 4c 24 28	 mov	 ecx, DWORD PTR n$[rsp]
  000b4	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  000b8	48 98		 cdqe
  000ba	48 6b c0 10	 imul	 rax, 16
  000be	48 8b d0	 mov	 rdx, rax
  000c1	48 8b 4c 24 20	 mov	 rcx, QWORD PTR p$[rsp]
  000c6	e8 00 00 00 00	 call	 _PxMem_Realloc
  000cb	48 89 44 24 38	 mov	 QWORD PTR tv95[rsp], rax
  000d0	eb 24		 jmp	 SHORT $LN13@PyImport_E@3
$LN12@PyImport_E@3:
  000d2	8b 44 24 2c	 mov	 eax, DWORD PTR i$[rsp]
  000d6	8b 4c 24 28	 mov	 ecx, DWORD PTR n$[rsp]
  000da	8d 44 08 01	 lea	 eax, DWORD PTR [rax+rcx+1]
  000de	48 98		 cdqe
  000e0	48 6b c0 10	 imul	 rax, 16
  000e4	48 8b d0	 mov	 rdx, rax
  000e7	48 8b 4c 24 20	 mov	 rcx, QWORD PTR p$[rsp]
  000ec	e8 00 00 00 00	 call	 _PyMem_DebugRealloc
  000f1	48 89 44 24 38	 mov	 QWORD PTR tv95[rsp], rax
$LN13@PyImport_E@3:
  000f6	48 8b 44 24 38	 mov	 rax, QWORD PTR tv95[rsp]
  000fb	48 89 44 24 30	 mov	 QWORD PTR tv128[rsp], rax
$LN15@PyImport_E@3:
  00100	48 8b 44 24 30	 mov	 rax, QWORD PTR tv128[rsp]
  00105	48 89 44 24 20	 mov	 QWORD PTR p$[rsp], rax

; 1913 :     if (p == NULL)

  0010a	48 83 7c 24 20
	00		 cmp	 QWORD PTR p$[rsp], 0
  00110	75 07		 jne	 SHORT $LN2@PyImport_E@3

; 1914 :         return -1;

  00112	b8 ff ff ff ff	 mov	 eax, -1
  00117	eb 79		 jmp	 SHORT $LN10@PyImport_E@3
$LN2@PyImport_E@3:

; 1915 : 
; 1916 :     /* Copy the tables into the new memory */
; 1917 :     if (our_copy != PyImport_Inittab)

  00119	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR PyImport_Inittab
  00120	48 39 05 00 00
	00 00		 cmp	 QWORD PTR ?our_copy@?1??PyImport_ExtendInittab@@9@9, rax
  00127	74 20		 je	 SHORT $LN1@PyImport_E@3

; 1918 :         memcpy(p, PyImport_Inittab, (i+1) * sizeof(struct _inittab));

  00129	8b 44 24 2c	 mov	 eax, DWORD PTR i$[rsp]
  0012d	ff c0		 inc	 eax
  0012f	48 98		 cdqe
  00131	48 6b c0 10	 imul	 rax, 16
  00135	4c 8b c0	 mov	 r8, rax
  00138	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR PyImport_Inittab
  0013f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR p$[rsp]
  00144	e8 00 00 00 00	 call	 memcpy
$LN1@PyImport_E@3:

; 1919 :     PyImport_Inittab = our_copy = p;

  00149	48 8b 44 24 20	 mov	 rax, QWORD PTR p$[rsp]
  0014e	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?our_copy@?1??PyImport_ExtendInittab@@9@9, rax
  00155	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?our_copy@?1??PyImport_ExtendInittab@@9@9
  0015c	48 89 05 00 00
	00 00		 mov	 QWORD PTR PyImport_Inittab, rax

; 1920 :     memcpy(p+i, newtab, (n+1) * sizeof(struct _inittab));

  00163	8b 44 24 28	 mov	 eax, DWORD PTR n$[rsp]
  00167	ff c0		 inc	 eax
  00169	48 98		 cdqe
  0016b	48 6b c0 10	 imul	 rax, 16
  0016f	48 63 4c 24 2c	 movsxd	 rcx, DWORD PTR i$[rsp]
  00174	48 6b c9 10	 imul	 rcx, 16
  00178	48 8b 54 24 20	 mov	 rdx, QWORD PTR p$[rsp]
  0017d	48 03 d1	 add	 rdx, rcx
  00180	48 8b ca	 mov	 rcx, rdx
  00183	4c 8b c0	 mov	 r8, rax
  00186	48 8b 54 24 50	 mov	 rdx, QWORD PTR newtab$[rsp]
  0018b	e8 00 00 00 00	 call	 memcpy

; 1921 : 
; 1922 :     return 0;

  00190	33 c0		 xor	 eax, eax
$LN10@PyImport_E@3:

; 1923 : }

  00192	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00196	c3		 ret	 0
PyImport_ExtendInittab ENDP
_TEXT	ENDS
PUBLIC	PyImport_AppendInittab
EXTRN	memset:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyImport_AppendInittab DD imagerel $LN3
	DD	imagerel $LN3+67
	DD	imagerel $unwind$PyImport_AppendInittab
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyImport_AppendInittab DD 010e01H
	DD	0820eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyImport_AppendInittab
_TEXT	SEGMENT
newtab$ = 32
name$ = 80
initfunc$ = 88
PyImport_AppendInittab PROC				; COMDAT

; 1929 : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1930 :     struct _inittab newtab[2];
; 1931 : 
; 1932 :     memset(newtab, '\0', sizeof newtab);

  0000e	41 b8 20 00 00
	00		 mov	 r8d, 32			; 00000020H
  00014	33 d2		 xor	 edx, edx
  00016	48 8d 4c 24 20	 lea	 rcx, QWORD PTR newtab$[rsp]
  0001b	e8 00 00 00 00	 call	 memset

; 1933 : 
; 1934 :     newtab[0].name = (char *)name;

  00020	48 8b 44 24 50	 mov	 rax, QWORD PTR name$[rsp]
  00025	48 89 44 24 20	 mov	 QWORD PTR newtab$[rsp], rax

; 1935 :     newtab[0].initfunc = initfunc;

  0002a	48 8b 44 24 58	 mov	 rax, QWORD PTR initfunc$[rsp]
  0002f	48 89 44 24 28	 mov	 QWORD PTR newtab$[rsp+8], rax

; 1936 : 
; 1937 :     return PyImport_ExtendInittab(newtab);

  00034	48 8d 4c 24 20	 lea	 rcx, QWORD PTR newtab$[rsp]
  00039	e8 00 00 00 00	 call	 PyImport_ExtendInittab

; 1938 : }

  0003e	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00042	c3		 ret	 0
PyImport_AppendInittab ENDP
_TEXT	ENDS
END
