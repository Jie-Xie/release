; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_08EMBNBNLN@property?$AA@			; `string'
PUBLIC	??_C@_0BF@LPKCECDC@__isabstractmethod__?$AA@	; `string'
PUBLIC	??_C@_03GHKEPEMO@doc?$AA@			; `string'
PUBLIC	??_C@_07IOFOPPPN@deleter?$AA@			; `string'
PUBLIC	??_C@_06FMDABHKF@setter?$AA@			; `string'
PUBLIC	??_C@_06MPKBKPHI@getter?$AA@			; `string'
PUBLIC	??_C@_04BMLPMHDL@fdel?$AA@			; `string'
PUBLIC	??_C@_04FDGKDAEE@fset?$AA@			; `string'
PUBLIC	??_C@_04IMBBPAIM@fget?$AA@			; `string'
PUBLIC	??_C@_0P@HNNNFCMP@method?9wrapper?$AA@		; `string'
PUBLIC	??_C@_08KFOOMKEG@__self__?$AA@			; `string'
PUBLIC	??_C@_0N@DGBCKBCA@mappingproxy?$AA@		; `string'
PUBLIC	??_C@_07CANJJMGA@mapping?$AA@			; `string'
PUBLIC	??_C@_0CA@HBGKPNPI@D?4copy?$CI?$CJ?5?9?$DO?5a?5shallow?5copy?5of?5D?$AA@ ; `string'
PUBLIC	??_C@_0DJ@ECJIPPMK@D?4items?$CI?$CJ?5?9?$DO?5list?5of?5D?8s?5?$CIkey?0?5v@ ; `string'
PUBLIC	??_C@_0CB@OLGABDBL@D?4values?$CI?$CJ?5?9?$DO?5list?5of?5D?8s?5values@ ; `string'
PUBLIC	??_C@_0BN@CLLBPHEO@D?4keys?$CI?$CJ?5?9?$DO?5list?5of?5D?8s?5keys?$AA@ ; `string'
PUBLIC	??_C@_0DN@OBDGOCKE@D?4get?$CIk?$FL?0d?$FN?$CJ?5?9?$DO?5D?$FLk?$FN?5if?5k?5in?5D?0?5@ ; `string'
PUBLIC	??_C@_04COAGEIMF@copy?$AA@			; `string'
PUBLIC	??_C@_05CFHBDDLG@items?$AA@			; `string'
PUBLIC	??_C@_06GEKOPAHD@values?$AA@			; `string'
PUBLIC	??_C@_04IEPFDAGF@keys?$AA@			; `string'
PUBLIC	??_C@_03HNAFFKGA@get?$AA@			; `string'
PUBLIC	??_C@_0BD@DNHDFGBD@wrapper_descriptor?$AA@	; `string'
PUBLIC	??_C@_0BC@GOGIJJFP@getset_descriptor?$AA@	; `string'
PUBLIC	??_C@_0BC@BKMNPHOK@member_descriptor?$AA@	; `string'
PUBLIC	??_C@_0BH@EAJAAGC@classmethod_descriptor?$AA@	; `string'
PUBLIC	??_C@_0BC@IAELBJCA@method_descriptor?$AA@	; `string'
PUBLIC	??_C@_07DIBBIFIJ@__doc__?$AA@			; `string'
PUBLIC	??_C@_08BHKDPDAA@__name__?$AA@			; `string'
PUBLIC	??_C@_0N@DAMMDIA@__objclass__?$AA@		; `string'
PUBLIC	??_C@_0N@FMLGAKCE@__qualname__?$AA@		; `string'
PUBLIC	PyMethodDescr_Type
PUBLIC	PyClassMethodDescr_Type
PUBLIC	PyMemberDescr_Type
PUBLIC	PyGetSetDescr_Type
PUBLIC	PyWrapperDescr_Type
PUBLIC	PyDictProxy_Type
PUBLIC	_PyMethodWrapper_Type
PUBLIC	PyProperty_Type
EXTRN	PyObject_GC_Del:PROC
EXTRN	PyType_GenericNew:PROC
EXTRN	PyType_GenericAlloc:PROC
EXTRN	PyObject_GenericGetAttr:PROC
EXTRN	PyType_Type:BYTE
;	COMDAT ??_C@_08EMBNBNLN@property?$AA@
CONST	SEGMENT
??_C@_08EMBNBNLN@property?$AA@ DB 'property', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@LPKCECDC@__isabstractmethod__?$AA@
CONST	SEGMENT
??_C@_0BF@LPKCECDC@__isabstractmethod__?$AA@ DB '__isabstractmethod__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03GHKEPEMO@doc?$AA@
CONST	SEGMENT
??_C@_03GHKEPEMO@doc?$AA@ DB 'doc', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07IOFOPPPN@deleter?$AA@
CONST	SEGMENT
??_C@_07IOFOPPPN@deleter?$AA@ DB 'deleter', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FMDABHKF@setter?$AA@
CONST	SEGMENT
??_C@_06FMDABHKF@setter?$AA@ DB 'setter', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MPKBKPHI@getter?$AA@
CONST	SEGMENT
??_C@_06MPKBKPHI@getter?$AA@ DB 'getter', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04BMLPMHDL@fdel?$AA@
CONST	SEGMENT
??_C@_04BMLPMHDL@fdel?$AA@ DB 'fdel', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04FDGKDAEE@fset?$AA@
CONST	SEGMENT
??_C@_04FDGKDAEE@fset?$AA@ DB 'fset', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04IMBBPAIM@fget?$AA@
CONST	SEGMENT
??_C@_04IMBBPAIM@fget?$AA@ DB 'fget', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@HNNNFCMP@method?9wrapper?$AA@
CONST	SEGMENT
??_C@_0P@HNNNFCMP@method?9wrapper?$AA@ DB 'method-wrapper', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08KFOOMKEG@__self__?$AA@
CONST	SEGMENT
??_C@_08KFOOMKEG@__self__?$AA@ DB '__self__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@DGBCKBCA@mappingproxy?$AA@
CONST	SEGMENT
??_C@_0N@DGBCKBCA@mappingproxy?$AA@ DB 'mappingproxy', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07CANJJMGA@mapping?$AA@
CONST	SEGMENT
??_C@_07CANJJMGA@mapping?$AA@ DB 'mapping', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@HBGKPNPI@D?4copy?$CI?$CJ?5?9?$DO?5a?5shallow?5copy?5of?5D?$AA@
CONST	SEGMENT
??_C@_0CA@HBGKPNPI@D?4copy?$CI?$CJ?5?9?$DO?5a?5shallow?5copy?5of?5D?$AA@ DB 'D'
	DB	'.copy() -> a shallow copy of D', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@ECJIPPMK@D?4items?$CI?$CJ?5?9?$DO?5list?5of?5D?8s?5?$CIkey?0?5v@
CONST	SEGMENT
??_C@_0DJ@ECJIPPMK@D?4items?$CI?$CJ?5?9?$DO?5list?5of?5D?8s?5?$CIkey?0?5v@ DB 'D'
	DB	'.items() -> list of D''s (key, value) pairs, as 2-tuples', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@OLGABDBL@D?4values?$CI?$CJ?5?9?$DO?5list?5of?5D?8s?5values@
CONST	SEGMENT
??_C@_0CB@OLGABDBL@D?4values?$CI?$CJ?5?9?$DO?5list?5of?5D?8s?5values@ DB 'D'
	DB	'.values() -> list of D''s values', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@CLLBPHEO@D?4keys?$CI?$CJ?5?9?$DO?5list?5of?5D?8s?5keys?$AA@
CONST	SEGMENT
??_C@_0BN@CLLBPHEO@D?4keys?$CI?$CJ?5?9?$DO?5list?5of?5D?8s?5keys?$AA@ DB 'D'
	DB	'.keys() -> list of D''s keys', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DN@OBDGOCKE@D?4get?$CIk?$FL?0d?$FN?$CJ?5?9?$DO?5D?$FLk?$FN?5if?5k?5in?5D?0?5@
CONST	SEGMENT
??_C@_0DN@OBDGOCKE@D?4get?$CIk?$FL?0d?$FN?$CJ?5?9?$DO?5D?$FLk?$FN?5if?5k?5in?5D?0?5@ DB 'D'
	DB	'.get(k[,d]) -> D[k] if k in D, else d.  d defaults to None.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04COAGEIMF@copy?$AA@
CONST	SEGMENT
??_C@_04COAGEIMF@copy?$AA@ DB 'copy', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05CFHBDDLG@items?$AA@
CONST	SEGMENT
??_C@_05CFHBDDLG@items?$AA@ DB 'items', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GEKOPAHD@values?$AA@
CONST	SEGMENT
??_C@_06GEKOPAHD@values?$AA@ DB 'values', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04IEPFDAGF@keys?$AA@
CONST	SEGMENT
??_C@_04IEPFDAGF@keys?$AA@ DB 'keys', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03HNAFFKGA@get?$AA@
CONST	SEGMENT
??_C@_03HNAFFKGA@get?$AA@ DB 'get', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@DNHDFGBD@wrapper_descriptor?$AA@
CONST	SEGMENT
??_C@_0BD@DNHDFGBD@wrapper_descriptor?$AA@ DB 'wrapper_descriptor', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@GOGIJJFP@getset_descriptor?$AA@
CONST	SEGMENT
??_C@_0BC@GOGIJJFP@getset_descriptor?$AA@ DB 'getset_descriptor', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@BKMNPHOK@member_descriptor?$AA@
CONST	SEGMENT
??_C@_0BC@BKMNPHOK@member_descriptor?$AA@ DB 'member_descriptor', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@EAJAAGC@classmethod_descriptor?$AA@
CONST	SEGMENT
??_C@_0BH@EAJAAGC@classmethod_descriptor?$AA@ DB 'classmethod_descriptor', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@IAELBJCA@method_descriptor?$AA@
CONST	SEGMENT
??_C@_0BC@IAELBJCA@method_descriptor?$AA@ DB 'method_descriptor', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DIBBIFIJ@__doc__?$AA@
CONST	SEGMENT
??_C@_07DIBBIFIJ@__doc__?$AA@ DB '__doc__', 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
descr_members DQ FLAT:??_C@_0N@DAMMDIA@__objclass__?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000060H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_08BHKDPDAA@__name__?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000068H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	0000000000000000H
	ORG $+32
mappingproxy_as_mapping DQ FLAT:mappingproxy_len
	DQ	FLAT:mappingproxy_getitem
	DQ	0000000000000000H
method_getset DQ FLAT:??_C@_07DIBBIFIJ@__doc__?$AA@
	DQ	FLAT:method_get_doc
	ORG $+24
	DQ	FLAT:??_C@_0N@FMLGAKCE@__qualname__?$AA@
	DQ	FLAT:descr_get_qualname
	ORG $+24
	DQ	0000000000000000H
	ORG $+32
?kwlist@?1??property_init@@9@9 DQ FLAT:??_C@_04IMBBPAIM@fget?$AA@ ; `property_init'::`2'::kwlist
	DQ	FLAT:??_C@_04FDGKDAEE@fset?$AA@
	DQ	FLAT:??_C@_04BMLPMHDL@fdel?$AA@
	DQ	FLAT:??_C@_03GHKEPEMO@doc?$AA@
	DQ	0000000000000000H
member_getset DQ FLAT:??_C@_07DIBBIFIJ@__doc__?$AA@
	DQ	FLAT:member_get_doc
	ORG $+24
	DQ	FLAT:??_C@_0N@FMLGAKCE@__qualname__?$AA@
	DQ	FLAT:descr_get_qualname
	ORG $+24
	DQ	0000000000000000H
	ORG $+32
	ORG $+8
getset_getset DQ FLAT:??_C@_07DIBBIFIJ@__doc__?$AA@
	DQ	FLAT:getset_get_doc
	ORG $+24
	DQ	FLAT:??_C@_0N@FMLGAKCE@__qualname__?$AA@
	DQ	FLAT:descr_get_qualname
	ORG $+24
	DQ	0000000000000000H
	ORG $+32
	ORG $+8
wrapperdescr_getset DQ FLAT:??_C@_07DIBBIFIJ@__doc__?$AA@
	DQ	FLAT:wrapperdescr_get_doc
	ORG $+24
	DQ	FLAT:??_C@_0N@FMLGAKCE@__qualname__?$AA@
	DQ	FLAT:descr_get_qualname
	ORG $+24
	DQ	0000000000000000H
	ORG $+32
	ORG $+8
PyMethodDescr_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0BC@IAELBJCA@method_descriptor?$AA@
	DQ	0000000000000090H
	DQ	0000000000000000H
	DQ	FLAT:descr_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:method_repr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:methoddescr_call
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044000H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:descr_traverse
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:descr_members
	DQ	FLAT:method_getset
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:method_get
	DQ	0000000000000000H
	ORG $+104
PyClassMethodDescr_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0BH@EAJAAGC@classmethod_descriptor?$AA@
	DQ	0000000000000090H
	DQ	0000000000000000H
	DQ	FLAT:descr_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:method_repr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:classmethoddescr_call
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044000H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:descr_traverse
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:descr_members
	DQ	FLAT:method_getset
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:classmethod_get
	DQ	0000000000000000H
	ORG $+104
PyMemberDescr_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0BC@BKMNPHOK@member_descriptor?$AA@
	DQ	0000000000000090H
	DQ	0000000000000000H
	DQ	FLAT:descr_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:member_repr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044000H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:descr_traverse
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:descr_members
	DQ	FLAT:member_getset
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:member_get
	DQ	FLAT:member_set
	ORG $+104
PyGetSetDescr_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0BC@GOGIJJFP@getset_descriptor?$AA@
	DQ	0000000000000090H
	DQ	0000000000000000H
	DQ	FLAT:descr_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:getset_repr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044000H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:descr_traverse
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:descr_members
	DQ	FLAT:getset_getset
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:getset_get
	DQ	FLAT:getset_set
	ORG $+104
PyWrapperDescr_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0BD@DNHDFGBD@wrapper_descriptor?$AA@
	DQ	0000000000000090H
	DQ	0000000000000000H
	DQ	FLAT:descr_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:wrapperdescr_repr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:wrapperdescr_call
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044000H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:descr_traverse
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:descr_members
	DQ	FLAT:wrapperdescr_getset
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:wrapperdescr_get
	DQ	0000000000000000H
	ORG $+104
mappingproxy_as_sequence DQ 0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:mappingproxy_contains
	DQ	0000000000000000H
	DQ	0000000000000000H
mappingproxy_methods DQ FLAT:??_C@_03HNAFFKGA@get?$AA@
	DQ	FLAT:mappingproxy_get
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0DN@OBDGOCKE@D?4get?$CIk?$FL?0d?$FN?$CJ?5?9?$DO?5D?$FLk?$FN?5if?5k?5in?5D?0?5@
	DQ	FLAT:??_C@_04IEPFDAGF@keys?$AA@
	DQ	FLAT:mappingproxy_keys
	DD	04H
	ORG $+4
	DQ	FLAT:??_C@_0BN@CLLBPHEO@D?4keys?$CI?$CJ?5?9?$DO?5list?5of?5D?8s?5keys?$AA@
	DQ	FLAT:??_C@_06GEKOPAHD@values?$AA@
	DQ	FLAT:mappingproxy_values
	DD	04H
	ORG $+4
	DQ	FLAT:??_C@_0CB@OLGABDBL@D?4values?$CI?$CJ?5?9?$DO?5list?5of?5D?8s?5values@
	DQ	FLAT:??_C@_05CFHBDDLG@items?$AA@
	DQ	FLAT:mappingproxy_items
	DD	04H
	ORG $+4
	DQ	FLAT:??_C@_0DJ@ECJIPPMK@D?4items?$CI?$CJ?5?9?$DO?5list?5of?5D?8s?5?$CIkey?0?5v@
	DQ	FLAT:??_C@_04COAGEIMF@copy?$AA@
	DQ	FLAT:mappingproxy_copy
	DD	04H
	ORG $+4
	DQ	FLAT:??_C@_0CA@HBGKPNPI@D?4copy?$CI?$CJ?5?9?$DO?5a?5shallow?5copy?5of?5D?$AA@
	DQ	0000000000000000H
	ORG $+24
?kwlist@?1??mappingproxy_new@@9@9 DQ FLAT:??_C@_07CANJJMGA@mapping?$AA@ ; `mappingproxy_new'::`2'::kwlist
	DQ	0000000000000000H
PyDictProxy_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0N@DGBCKBCA@mappingproxy?$AA@
	DQ	0000000000000070H
	DQ	0000000000000000H
	DQ	FLAT:mappingproxy_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:mappingproxy_repr
	DQ	0000000000000000H
	DQ	FLAT:mappingproxy_as_sequence
	DQ	FLAT:mappingproxy_as_mapping
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:mappingproxy_str
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044000H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:mappingproxy_traverse
	DQ	0000000000000000H
	DQ	FLAT:mappingproxy_richcompare
	DQ	0000000000000000H
	DQ	FLAT:mappingproxy_getiter
	DQ	0000000000000000H
	DQ	FLAT:mappingproxy_methods
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:mappingproxy_new
	ORG $+72
wrapper_members DQ FLAT:??_C@_08KFOOMKEG@__self__?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000068H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	0000000000000000H
	ORG $+32
wrapper_getsets DQ FLAT:??_C@_0N@DAMMDIA@__objclass__?$AA@
	DQ	FLAT:wrapper_objclass
	ORG $+24
	DQ	FLAT:??_C@_08BHKDPDAA@__name__?$AA@
	DQ	FLAT:wrapper_name
	ORG $+24
	DQ	FLAT:??_C@_0N@FMLGAKCE@__qualname__?$AA@
	DQ	FLAT:wrapper_qualname
	ORG $+24
	DQ	FLAT:??_C@_07DIBBIFIJ@__doc__?$AA@
	DQ	FLAT:wrapper_doc
	ORG $+24
	DQ	0000000000000000H
	ORG $+32
	ORG $+8
_PyMethodWrapper_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0P@HNNNFCMP@method?9wrapper?$AA@
	DQ	0000000000000070H
	DQ	0000000000000000H
	DQ	FLAT:wrapper_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:wrapper_repr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:wrapper_hash
	DQ	FLAT:wrapper_call
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044000H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:wrapper_traverse
	DQ	0000000000000000H
	DQ	FLAT:wrapper_richcompare
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:wrapper_members
	DQ	FLAT:wrapper_getsets
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+104
property_members DQ FLAT:??_C@_04IMBBPAIM@fget?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000060H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_04FDGKDAEE@fset?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000068H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_04BMLPMHDL@fdel?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000070H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_07DIBBIFIJ@__doc__?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000078H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	0000000000000000H
	ORG $+32
getter_doc DB	'Descriptor to change the getter on a property.', 00H
	ORG $+1
setter_doc DB	'Descriptor to change the setter on a property.', 00H
	ORG $+1
deleter_doc DB	'Descriptor to change the deleter on a property.', 00H
	ORG $+8
property_methods DQ FLAT:??_C@_06MPKBKPHI@getter?$AA@
	DQ	FLAT:property_getter
	DD	08H
	ORG $+4
	DQ	FLAT:getter_doc
	DQ	FLAT:??_C@_06FMDABHKF@setter?$AA@
	DQ	FLAT:property_setter
	DD	08H
	ORG $+4
	DQ	FLAT:setter_doc
	DQ	FLAT:??_C@_07IOFOPPPN@deleter?$AA@
	DQ	FLAT:property_deleter
	DD	08H
	ORG $+4
	DQ	FLAT:deleter_doc
	DQ	0000000000000000H
	ORG $+24
property_getsetlist DQ FLAT:??_C@_0BF@LPKCECDC@__isabstractmethod__?$AA@
	DQ	FLAT:property_get___isabstractmethod__
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+32
property_doc DB	'property(fget=None, fset=None, fdel=None, doc=None) -> p'
	DB	'roperty attribute', 0aH, 0aH, 'fget is a function to be used '
	DB	'for getting an attribute value, and likewise', 0aH, 'fset is '
	DB	'a function for setting, and fdel a function for del''ing, an', 0aH
	DB	'attribute.  Typical use is to define a managed attribute x:', 0aH
	DB	0aH, 'class C(object):', 0aH, '    def getx(self): return self'
	DB	'._x', 0aH, '    def setx(self, value): self._x = value', 0aH, ' '
	DB	'   def delx(self): del self._x', 0aH, '    x = property(getx,'
	DB	' setx, delx, "I''m the ''x'' property.")', 0aH, 0aH, 'Decorat'
	DB	'ors make defining new properties or modifying existing ones e'
	DB	'asy:', 0aH, 0aH, 'class C(object):', 0aH, '    @property', 0aH
	DB	'    def x(self):', 0aH, '        "I am the ''x'' property."', 0aH
	DB	'        return self._x', 0aH, '    @x.setter', 0aH, '    def '
	DB	'x(self, value):', 0aH, '        self._x = value', 0aH, '    @'
	DB	'x.deleter', 0aH, '    def x(self):', 0aH, '        del self._'
	DB	'x', 0aH, 00H
	ORG $+8
PyProperty_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_08EMBNBNLN@property?$AA@
	DQ	0000000000000090H
	DQ	0000000000000000H
	DQ	FLAT:property_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044400H
	ORG $+4
	DQ	FLAT:property_doc
	DQ	FLAT:property_traverse
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:property_methods
	DQ	FLAT:property_members
	DQ	FLAT:property_getsetlist
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:property_descr_get
	DQ	FLAT:property_descr_set
	DQ	0000000000000000H
	DQ	FLAT:property_init
	DQ	FLAT:PyType_GenericAlloc
	DQ	FLAT:PyType_GenericNew
	DQ	FLAT:PyObject_GC_Del
	ORG $+64
_DATA	ENDS
;	COMDAT ??_C@_08BHKDPDAA@__name__?$AA@
CONST	SEGMENT
??_C@_08BHKDPDAA@__name__?$AA@ DB '__name__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@DAMMDIA@__objclass__?$AA@
CONST	SEGMENT
??_C@_0N@DAMMDIA@__objclass__?$AA@ DB '__objclass__', 00H ; `string'
CONST	ENDS
_TLS	SEGMENT
?PyId___doc__@?6??property_init@@9@9 DQ 0000000000000000H ; `property_init'::`7'::PyId___doc__
	DQ	FLAT:??_C@_07DIBBIFIJ@__doc__?$AA@
	DQ	0000000000000000H
?PyId_copy@?1??mappingproxy_copy@@9@9 DQ 0000000000000000H ; `mappingproxy_copy'::`2'::PyId_copy
	DQ	FLAT:??_C@_04COAGEIMF@copy?$AA@
	DQ	0000000000000000H
?PyId_items@?1??mappingproxy_items@@9@9 DQ 0000000000000000H ; `mappingproxy_items'::`2'::PyId_items
	DQ	FLAT:??_C@_05CFHBDDLG@items?$AA@
	DQ	0000000000000000H
?PyId_values@?1??mappingproxy_values@@9@9 DQ 0000000000000000H ; `mappingproxy_values'::`2'::PyId_values
	DQ	FLAT:??_C@_06GEKOPAHD@values?$AA@
	DQ	0000000000000000H
?PyId_keys@?1??mappingproxy_keys@@9@9 DQ 0000000000000000H ; `mappingproxy_keys'::`2'::PyId_keys
	DQ	FLAT:??_C@_04IEPFDAGF@keys?$AA@
	DQ	0000000000000000H
?PyId_get@?1??mappingproxy_get@@9@9 DQ 0000000000000000H ; `mappingproxy_get'::`2'::PyId_get
	DQ	FLAT:??_C@_03HNAFFKGA@get?$AA@
	DQ	0000000000000000H
?PyId___qualname__@?1??calculate_qualname@@9@9 DQ 0000000000000000H ; `calculate_qualname'::`2'::PyId___qualname__
	DQ	FLAT:??_C@_0N@FMLGAKCE@__qualname__?$AA@
	DQ	0000000000000000H
_TLS	ENDS
;	COMDAT ??_C@_0N@FMLGAKCE@__qualname__?$AA@
CONST	SEGMENT
??_C@_0N@FMLGAKCE@__qualname__?$AA@ DB '__qualname__', 00H ; `string'
CONST	ENDS
PUBLIC	_Py_DecRef
PUBLIC	??_C@_1EM@HFMJMDDM@?$AAg?$AA?9?$AA?$DO?$AAg?$AAc?$AA?4?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AAG?$AAC?$AA_?$AAR?$AAE?$AAF?$AAS?$AA_?$AAU?$AAN?$AAT?$AAR@ ; `string'
PUBLIC	??_C@_1DC@OKEDMLJ@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAc?$AAr?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@ ; `string'
PUBLIC	??_C@_0O@DLCOAAK@descr_dealloc?$AA@		; `string'
PUBLIC	??_C@_0BJ@CMLMJMOL@?4?4?2Objects?2descrobject?4c?$AA@ ; `string'
EXTRN	__imp__wassert:PROC
EXTRN	_PyParallel_Guard:PROC
;	COMDAT pdata
; File c:\src\pyparallel\objects\descrobject.c
pdata	SEGMENT
$pdata$descr_dealloc DD imagerel descr_dealloc
	DD	imagerel descr_dealloc+359
	DD	imagerel $unwind$descr_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$descr_dealloc DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_1EM@HFMJMDDM@?$AAg?$AA?9?$AA?$DO?$AAg?$AAc?$AA?4?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AAG?$AAC?$AA_?$AAR?$AAE?$AAF?$AAS?$AA_?$AAU?$AAN?$AAT?$AAR@
CONST	SEGMENT
??_C@_1EM@HFMJMDDM@?$AAg?$AA?9?$AA?$DO?$AAg?$AAc?$AA?4?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AAG?$AAC?$AA_?$AAR?$AAE?$AAF?$AAS?$AA_?$AAU?$AAN?$AAT?$AAR@ DB 'g'
	DB	00H, '-', 00H, '>', 00H, 'g', 00H, 'c', 00H, '.', 00H, 'g', 00H
	DB	'c', 00H, '_', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 's', 00H, ' '
	DB	00H, '!', 00H, '=', 00H, ' ', 00H, '_', 00H, 'P', 00H, 'y', 00H
	DB	'G', 00H, 'C', 00H, '_', 00H, 'R', 00H, 'E', 00H, 'F', 00H, 'S'
	DB	00H, '_', 00H, 'U', 00H, 'N', 00H, 'T', 00H, 'R', 00H, 'A', 00H
	DB	'C', 00H, 'K', 00H, 'E', 00H, 'D', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DC@OKEDMLJ@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAc?$AAr?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
CONST	SEGMENT
??_C@_1DC@OKEDMLJ@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAc?$AAr?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@ DB '.'
	DB	00H, '.', 00H, '\', 00H, 'O', 00H, 'b', 00H, 'j', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 's', 00H, '\', 00H, 'd', 00H, 'e', 00H, 's'
	DB	00H, 'c', 00H, 'r', 00H, 'o', 00H, 'b', 00H, 'j', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, '.', 00H, 'c', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@DLCOAAK@descr_dealloc?$AA@
CONST	SEGMENT
??_C@_0O@DLCOAAK@descr_dealloc?$AA@ DB 'descr_dealloc', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@CMLMJMOL@?4?4?2Objects?2descrobject?4c?$AA@
CONST	SEGMENT
??_C@_0BJ@CMLMJMOL@?4?4?2Objects?2descrobject?4c?$AA@ DB '..\Objects\desc'
	DB	'robject.c', 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT descr_dealloc
_TEXT	SEGMENT
g$20336 = 48
tv79 = 56
descr$ = 80
descr_dealloc PROC					; COMDAT

; 8    : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 9    :     _PyObject_GC_UNTRACK(descr);

  00009	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00011	4c 8b 4c 24 50	 mov	 r9, QWORD PTR descr$[rsp]
  00016	41 b8 09 00 00
	00		 mov	 r8d, 9
  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@CMLMJMOL@?4?4?2Objects?2descrobject?4c?$AA@
  00023	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@DLCOAAK@descr_dealloc?$AA@
  0002a	e8 00 00 00 00	 call	 _PyParallel_Guard
  0002f	85 c0		 test	 eax, eax
  00031	0f 85 c1 00 00
	00		 jne	 $LN16@descr_deal
$LN15@descr_deal:
  00037	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0003f	4c 8b 4c 24 50	 mov	 r9, QWORD PTR descr$[rsp]
  00044	41 b8 09 00 00
	00		 mov	 r8d, 9
  0004a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@CMLMJMOL@?4?4?2Objects?2descrobject?4c?$AA@
  00051	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@DLCOAAK@descr_dealloc?$AA@
  00058	e8 00 00 00 00	 call	 _PyParallel_Guard
  0005d	85 c0		 test	 eax, eax
  0005f	74 0b		 je	 SHORT $LN19@descr_deal
  00061	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR tv79[rsp], 0
  0006a	eb 0e		 jmp	 SHORT $LN20@descr_deal
$LN19@descr_deal:
  0006c	48 8b 44 24 50	 mov	 rax, QWORD PTR descr$[rsp]
  00071	48 83 e8 18	 sub	 rax, 24
  00075	48 89 44 24 38	 mov	 QWORD PTR tv79[rsp], rax
$LN20@descr_deal:
  0007a	48 8b 44 24 38	 mov	 rax, QWORD PTR tv79[rsp]
  0007f	48 89 44 24 30	 mov	 QWORD PTR g$20336[rsp], rax
  00084	48 8b 44 24 30	 mov	 rax, QWORD PTR g$20336[rsp]
  00089	48 83 78 10 fe	 cmp	 QWORD PTR [rax+16], -2
  0008e	75 1c		 jne	 SHORT $LN21@descr_deal
  00090	41 b8 09 00 00
	00		 mov	 r8d, 9
  00096	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DC@OKEDMLJ@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAc?$AAr?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  0009d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EM@HFMJMDDM@?$AAg?$AA?9?$AA?$DO?$AAg?$AAc?$AA?4?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AAG?$AAC?$AA_?$AAR?$AAE?$AAF?$AAS?$AA_?$AAU?$AAN?$AAT?$AAR@
  000a4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000aa	33 c0		 xor	 eax, eax
$LN21@descr_deal:
  000ac	48 8b 44 24 30	 mov	 rax, QWORD PTR g$20336[rsp]
  000b1	48 c7 40 10 fe
	ff ff ff	 mov	 QWORD PTR [rax+16], -2
  000b9	48 8b 44 24 30	 mov	 rax, QWORD PTR g$20336[rsp]
  000be	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  000c2	48 8b 4c 24 30	 mov	 rcx, QWORD PTR g$20336[rsp]
  000c7	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000ca	48 89 08	 mov	 QWORD PTR [rax], rcx
  000cd	48 8b 44 24 30	 mov	 rax, QWORD PTR g$20336[rsp]
  000d2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000d5	48 8b 4c 24 30	 mov	 rcx, QWORD PTR g$20336[rsp]
  000da	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  000de	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  000e2	48 8b 44 24 30	 mov	 rax, QWORD PTR g$20336[rsp]
  000e7	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
  000ee	33 c0		 xor	 eax, eax
  000f0	85 c0		 test	 eax, eax
  000f2	0f 85 3f ff ff
	ff		 jne	 $LN15@descr_deal
$LN16@descr_deal:
$LN12@descr_deal:

; 10   :     Py_XDECREF(descr->d_type);

  000f8	48 8b 44 24 50	 mov	 rax, QWORD PTR descr$[rsp]
  000fd	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00102	74 0e		 je	 SHORT $LN9@descr_deal
  00104	48 8b 44 24 50	 mov	 rax, QWORD PTR descr$[rsp]
  00109	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  0010d	e8 00 00 00 00	 call	 _Py_DecRef
$LN9@descr_deal:
  00112	33 c0		 xor	 eax, eax
  00114	85 c0		 test	 eax, eax
  00116	75 e0		 jne	 SHORT $LN12@descr_deal
$LN8@descr_deal:

; 11   :     Py_XDECREF(descr->d_name);

  00118	48 8b 44 24 50	 mov	 rax, QWORD PTR descr$[rsp]
  0011d	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  00122	74 0e		 je	 SHORT $LN5@descr_deal
  00124	48 8b 44 24 50	 mov	 rax, QWORD PTR descr$[rsp]
  00129	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  0012d	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@descr_deal:
  00132	33 c0		 xor	 eax, eax
  00134	85 c0		 test	 eax, eax
  00136	75 e0		 jne	 SHORT $LN8@descr_deal
$LN4@descr_deal:

; 12   :     Py_XDECREF(descr->d_qualname);

  00138	48 8b 44 24 50	 mov	 rax, QWORD PTR descr$[rsp]
  0013d	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  00142	74 0e		 je	 SHORT $LN1@descr_deal
  00144	48 8b 44 24 50	 mov	 rax, QWORD PTR descr$[rsp]
  00149	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  0014d	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@descr_deal:
  00152	33 c0		 xor	 eax, eax
  00154	85 c0		 test	 eax, eax
  00156	75 e0		 jne	 SHORT $LN4@descr_deal

; 13   :     PyObject_GC_Del(descr);

  00158	48 8b 4c 24 50	 mov	 rcx, QWORD PTR descr$[rsp]
  0015d	e8 00 00 00 00	 call	 PyObject_GC_Del

; 14   : }

  00162	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00166	c3		 ret	 0
descr_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
EXTRN	_Py_Dealloc:PROC
EXTRN	_Py_NegativeRefcount:PROC
EXTRN	_Py_RefTotal:QWORD
EXTRN	Px_DecRef:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN13
	DD	imagerel $LN13+257
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
tv81 = 48
op$ = 80
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN13:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	0f 85 e6 00 00
	00		 jne	 $LN8@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00016	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0001b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0001f	48 83 e0 20	 and	 rax, 32			; 00000020H
  00023	48 85 c0	 test	 rax, rax
  00026	75 14		 jne	 SHORT $LN6@Py_DecRef
  00028	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0002d	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00031	48 25 80 00 00
	00		 and	 rax, 128		; 00000080H
  00037	48 85 c0	 test	 rax, rax
  0003a	74 0f		 je	 SHORT $LN7@Py_DecRef
$LN6@Py_DecRef:

; 926  :             Px_DECREF(op);

  0003c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  00041	e8 00 00 00 00	 call	 Px_DecRef
  00046	e9 b1 00 00 00	 jmp	 $LN5@Py_DecRef
$LN7@Py_DecRef:

; 927  :         else if (!Px_ISPX(op)) {

  0004b	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00050	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00054	48 83 e0 02	 and	 rax, 2
  00058	48 85 c0	 test	 rax, rax
  0005b	0f 85 9b 00 00
	00		 jne	 $LN4@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;

  00061	e8 00 00 00 00	 call	 _Py_PXCTX
  00066	85 c0		 test	 eax, eax
  00068	74 02		 je	 SHORT $LN11@Py_DecRef
  0006a	eb 11		 jmp	 SHORT $LN12@Py_DecRef
$LN11@Py_DecRef:
  0006c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00073	48 ff c8	 dec	 rax
  00076	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN12@Py_DecRef:

; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  0007d	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00082	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00086	48 ff c8	 dec	 rax
  00089	48 89 44 24 30	 mov	 QWORD PTR tv81[rsp], rax
  0008e	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00093	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv81[rsp]
  00098	48 89 48 50	 mov	 QWORD PTR [rax+80], rcx
  0009c	48 83 7c 24 30
	00		 cmp	 QWORD PTR tv81[rsp], 0
  000a2	74 4e		 je	 SHORT $LN3@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);

  000a4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000ac	4c 8b 4c 24 50	 mov	 r9, QWORD PTR op$[rsp]
  000b1	41 b8 a2 03 00
	00		 mov	 r8d, 930		; 000003a2H
  000b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000c5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ca	85 c0		 test	 eax, eax
  000cc	75 22		 jne	 SHORT $LN2@Py_DecRef
  000ce	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  000d3	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000d8	7d 16		 jge	 SHORT $LN2@Py_DecRef
  000da	4c 8b 44 24 50	 mov	 r8, QWORD PTR op$[rsp]
  000df	ba a2 03 00 00	 mov	 edx, 930		; 000003a2H
  000e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000eb	e8 00 00 00 00	 call	 _Py_NegativeRefcount
$LN2@Py_DecRef:

; 931  :             } else

  000f0	eb 0a		 jmp	 SHORT $LN1@Py_DecRef
$LN3@Py_DecRef:

; 932  :                 _Py_Dealloc((PyObject *)(op));

  000f2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  000f7	e8 00 00 00 00	 call	 _Py_Dealloc
$LN1@Py_DecRef:
$LN4@Py_DecRef:
$LN5@Py_DecRef:
$LN8@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  000fc	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00100	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BO@JKCKFNOA@?$DMmethod?5?8?$CFV?8?5of?5?8?$CFs?8?5objects?$DO?$AA@ ; `string'
;	COMDAT pdata
; File c:\src\pyparallel\objects\descrobject.c
pdata	SEGMENT
$pdata$method_repr DD imagerel method_repr
	DD	imagerel method_repr+31
	DD	imagerel $unwind$method_repr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$method_repr DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT ??_C@_0BO@JKCKFNOA@?$DMmethod?5?8?$CFV?8?5of?5?8?$CFs?8?5objects?$DO?$AA@
CONST	SEGMENT
??_C@_0BO@JKCKFNOA@?$DMmethod?5?8?$CFV?8?5of?5?8?$CFs?8?5objects?$DO?$AA@ DB '<'
	DB	'method ''%V'' of ''%s'' objects>', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT method_repr
_TEXT	SEGMENT
descr$ = 48
method_repr PROC					; COMDAT

; 36   : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 37   :     return descr_repr((PyDescrObject *)descr,
; 38   :                       "<method '%V' of '%s' objects>");

  00009	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BO@JKCKFNOA@?$DMmethod?5?8?$CFV?8?5of?5?8?$CFs?8?5objects?$DO?$AA@
  00010	48 8b 4c 24 30	 mov	 rcx, QWORD PTR descr$[rsp]
  00015	e8 00 00 00 00	 call	 descr_repr

; 39   : }

  0001a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001e	c3		 ret	 0
method_repr ENDP
_TEXT	ENDS
PUBLIC	??_C@_01OGPIMHDM@?$DP?$AA@			; `string'
EXTRN	PyUnicode_FromFormat:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$descr_repr DD imagerel descr_repr
	DD	imagerel descr_repr+117
	DD	imagerel $unwind$descr_repr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$descr_repr DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT ??_C@_01OGPIMHDM@?$DP?$AA@
CONST	SEGMENT
??_C@_01OGPIMHDM@?$DP?$AA@ DB '?', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT descr_repr
_TEXT	SEGMENT
name$ = 32
descr$ = 64
format$ = 72
descr_repr PROC						; COMDAT

; 26   : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 27   :     PyObject *name = NULL;

  0000e	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR name$[rsp], 0

; 28   :     if (descr->d_name != NULL && PyUnicode_Check(descr->d_name))

  00017	48 8b 44 24 40	 mov	 rax, QWORD PTR descr$[rsp]
  0001c	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  00021	74 2a		 je	 SHORT $LN1@descr_repr
  00023	48 8b 44 24 40	 mov	 rax, QWORD PTR descr$[rsp]
  00028	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0002c	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00030	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00036	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0003b	85 c0		 test	 eax, eax
  0003d	74 0e		 je	 SHORT $LN1@descr_repr

; 29   :         name = descr->d_name;

  0003f	48 8b 44 24 40	 mov	 rax, QWORD PTR descr$[rsp]
  00044	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00048	48 89 44 24 20	 mov	 QWORD PTR name$[rsp], rax
$LN1@descr_repr:

; 30   : 
; 31   :     return PyUnicode_FromFormat(format, name, "?", descr->d_type->tp_name);

  0004d	48 8b 44 24 40	 mov	 rax, QWORD PTR descr$[rsp]
  00052	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00056	4c 8b 48 70	 mov	 r9, QWORD PTR [rax+112]
  0005a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01OGPIMHDM@?$DP?$AA@
  00061	48 8b 54 24 20	 mov	 rdx, QWORD PTR name$[rsp]
  00066	48 8b 4c 24 48	 mov	 rcx, QWORD PTR format$[rsp]
  0006b	e8 00 00 00 00	 call	 PyUnicode_FromFormat

; 32   : }

  00070	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00074	c3		 ret	 0
descr_repr ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BO@FLAIMFCK@?$DMmember?5?8?$CFV?8?5of?5?8?$CFs?8?5objects?$DO?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$member_repr DD imagerel member_repr
	DD	imagerel member_repr+31
	DD	imagerel $unwind$member_repr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$member_repr DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT ??_C@_0BO@FLAIMFCK@?$DMmember?5?8?$CFV?8?5of?5?8?$CFs?8?5objects?$DO?$AA@
CONST	SEGMENT
??_C@_0BO@FLAIMFCK@?$DMmember?5?8?$CFV?8?5of?5?8?$CFs?8?5objects?$DO?$AA@ DB '<'
	DB	'member ''%V'' of ''%s'' objects>', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT member_repr
_TEXT	SEGMENT
descr$ = 48
member_repr PROC					; COMDAT

; 43   : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 44   :     return descr_repr((PyDescrObject *)descr,
; 45   :                       "<member '%V' of '%s' objects>");

  00009	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BO@FLAIMFCK@?$DMmember?5?8?$CFV?8?5of?5?8?$CFs?8?5objects?$DO?$AA@
  00010	48 8b 4c 24 30	 mov	 rcx, QWORD PTR descr$[rsp]
  00015	e8 00 00 00 00	 call	 descr_repr

; 46   : }

  0001a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001e	c3		 ret	 0
member_repr ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CB@GEJPJCAN@?$DMattribute?5?8?$CFV?8?5of?5?8?$CFs?8?5objects?$DO@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$getset_repr DD imagerel getset_repr
	DD	imagerel getset_repr+31
	DD	imagerel $unwind$getset_repr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$getset_repr DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT ??_C@_0CB@GEJPJCAN@?$DMattribute?5?8?$CFV?8?5of?5?8?$CFs?8?5objects?$DO@
CONST	SEGMENT
??_C@_0CB@GEJPJCAN@?$DMattribute?5?8?$CFV?8?5of?5?8?$CFs?8?5objects?$DO@ DB '<'
	DB	'attribute ''%V'' of ''%s'' objects>', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT getset_repr
_TEXT	SEGMENT
descr$ = 48
getset_repr PROC					; COMDAT

; 50   : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 51   :     return descr_repr((PyDescrObject *)descr,
; 52   :                       "<attribute '%V' of '%s' objects>");

  00009	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CB@GEJPJCAN@?$DMattribute?5?8?$CFV?8?5of?5?8?$CFs?8?5objects?$DO@
  00010	48 8b 4c 24 30	 mov	 rcx, QWORD PTR descr$[rsp]
  00015	e8 00 00 00 00	 call	 descr_repr

; 53   : }

  0001a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001e	c3		 ret	 0
getset_repr ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CE@GLGKGAFF@?$DMslot?5wrapper?5?8?$CFV?8?5of?5?8?$CFs?8?5objec@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$wrapperdescr_repr DD imagerel wrapperdescr_repr
	DD	imagerel wrapperdescr_repr+31
	DD	imagerel $unwind$wrapperdescr_repr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$wrapperdescr_repr DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT ??_C@_0CE@GLGKGAFF@?$DMslot?5wrapper?5?8?$CFV?8?5of?5?8?$CFs?8?5objec@
CONST	SEGMENT
??_C@_0CE@GLGKGAFF@?$DMslot?5wrapper?5?8?$CFV?8?5of?5?8?$CFs?8?5objec@ DB '<'
	DB	'slot wrapper ''%V'' of ''%s'' objects>', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT wrapperdescr_repr
_TEXT	SEGMENT
descr$ = 48
wrapperdescr_repr PROC					; COMDAT

; 57   : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 58   :     return descr_repr((PyDescrObject *)descr,
; 59   :                       "<slot wrapper '%V' of '%s' objects>");

  00009	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@GLGKGAFF@?$DMslot?5wrapper?5?8?$CFV?8?5of?5?8?$CFs?8?5objec@
  00010	48 8b 4c 24 30	 mov	 rcx, QWORD PTR descr$[rsp]
  00015	e8 00 00 00 00	 call	 descr_repr

; 60   : }

  0001a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001e	c3		 ret	 0
wrapperdescr_repr ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DJ@CDDIFCEO@descriptor?5?8?$CFV?8?5for?5type?5?8?$CFs?8?5do@ ; `string'
PUBLIC	??_C@_0EA@MADIGBLG@descriptor?5?8?$CFV?8?5for?5type?5?8?$CFs?8?5ne@ ; `string'
PUBLIC	??_C@_0DP@NKKKOLKG@descriptor?5?8?$CFV?8?5for?5type?5?8?$CFs?8?5ne@ ; `string'
EXTRN	PyCFunction_NewEx:PROC
EXTRN	PyType_IsSubtype:PROC
EXTRN	PyErr_Format:PROC
EXTRN	PyExc_TypeError:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$classmethod_get DD imagerel classmethod_get
	DD	imagerel classmethod_get+389
	DD	imagerel $unwind$classmethod_get
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$classmethod_get DD 011301H
	DD	0a213H
xdata	ENDS
;	COMDAT ??_C@_0DJ@CDDIFCEO@descriptor?5?8?$CFV?8?5for?5type?5?8?$CFs?8?5do@
CONST	SEGMENT
??_C@_0DJ@CDDIFCEO@descriptor?5?8?$CFV?8?5for?5type?5?8?$CFs?8?5do@ DB 'd'
	DB	'escriptor ''%V'' for type ''%s'' doesn''t apply to type ''%s'''
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0EA@MADIGBLG@descriptor?5?8?$CFV?8?5for?5type?5?8?$CFs?8?5ne@
CONST	SEGMENT
??_C@_0EA@MADIGBLG@descriptor?5?8?$CFV?8?5for?5type?5?8?$CFs?8?5ne@ DB 'd'
	DB	'escriptor ''%V'' for type ''%s'' needs a type, not a ''%s'' a'
	DB	's arg 2', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DP@NKKKOLKG@descriptor?5?8?$CFV?8?5for?5type?5?8?$CFs?8?5ne@
CONST	SEGMENT
??_C@_0DP@NKKKOLKG@descriptor?5?8?$CFV?8?5for?5type?5?8?$CFs?8?5ne@ DB 'd'
	DB	'escriptor ''%V'' for type ''%s'' needs either an object or a '
	DB	'type', 00H					; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT classmethod_get
_TEXT	SEGMENT
tv149 = 48
tv147 = 56
tv146 = 64
tv145 = 72
descr$ = 96
obj$ = 104
type$ = 112
classmethod_get PROC					; COMDAT

; 85   : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 86   :     /* Ensure a valid type.  Class methods ignore obj. */
; 87   :     if (type == NULL) {

  00013	48 83 7c 24 70
	00		 cmp	 QWORD PTR type$[rsp], 0
  00019	75 62		 jne	 SHORT $LN5@classmetho

; 88   :         if (obj != NULL)

  0001b	48 83 7c 24 68
	00		 cmp	 QWORD PTR obj$[rsp], 0
  00021	74 10		 je	 SHORT $LN4@classmetho

; 89   :             type = (PyObject *)obj->ob_type;

  00023	48 8b 44 24 68	 mov	 rax, QWORD PTR obj$[rsp]
  00028	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0002c	48 89 44 24 70	 mov	 QWORD PTR type$[rsp], rax

; 90   :         else {

  00031	eb 4a		 jmp	 SHORT $LN3@classmetho
$LN4@classmetho:

; 91   :             /* Wot - no type?! */
; 92   :             PyErr_Format(PyExc_TypeError,
; 93   :                          "descriptor '%V' for type '%s' "
; 94   :                          "needs either an object or a type",
; 95   :                          descr_name((PyDescrObject *)descr), "?",
; 96   :                          PyDescr_TYPE(descr)->tp_name);

  00033	48 8b 44 24 60	 mov	 rax, QWORD PTR descr$[rsp]
  00038	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0003c	48 89 44 24 30	 mov	 QWORD PTR tv149[rsp], rax
  00041	48 8b 4c 24 60	 mov	 rcx, QWORD PTR descr$[rsp]
  00046	e8 00 00 00 00	 call	 descr_name
  0004b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv149[rsp]
  00050	48 8b 49 70	 mov	 rcx, QWORD PTR [rcx+112]
  00054	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00059	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??_C@_01OGPIMHDM@?$DP?$AA@
  00060	4c 8b c0	 mov	 r8, rax
  00063	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DP@NKKKOLKG@descriptor?5?8?$CFV?8?5for?5type?5?8?$CFs?8?5ne@
  0006a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00071	e8 00 00 00 00	 call	 PyErr_Format

; 97   :             return NULL;

  00076	33 c0		 xor	 eax, eax
  00078	e9 03 01 00 00	 jmp	 $LN6@classmetho
$LN3@classmetho:
$LN5@classmetho:

; 98   :         }
; 99   :     }
; 100  :     if (!PyType_Check(type)) {

  0007d	48 8b 44 24 70	 mov	 rax, QWORD PTR type$[rsp]
  00082	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00086	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0008c	25 00 00 00 80	 and	 eax, -2147483648	; ffffffff80000000H
  00091	85 c0		 test	 eax, eax
  00093	75 66		 jne	 SHORT $LN2@classmetho

; 101  :         PyErr_Format(PyExc_TypeError,
; 102  :                      "descriptor '%V' for type '%s' "
; 103  :                      "needs a type, not a '%s' as arg 2",
; 104  :                      descr_name((PyDescrObject *)descr), "?",
; 105  :                      PyDescr_TYPE(descr)->tp_name,
; 106  :                      type->ob_type->tp_name);

  00095	48 8b 44 24 70	 mov	 rax, QWORD PTR type$[rsp]
  0009a	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0009e	48 89 44 24 38	 mov	 QWORD PTR tv147[rsp], rax
  000a3	48 8b 4c 24 60	 mov	 rcx, QWORD PTR descr$[rsp]
  000a8	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  000ac	48 89 4c 24 40	 mov	 QWORD PTR tv146[rsp], rcx
  000b1	48 8b 4c 24 60	 mov	 rcx, QWORD PTR descr$[rsp]
  000b6	e8 00 00 00 00	 call	 descr_name
  000bb	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tv147[rsp]
  000c0	48 8b 49 70	 mov	 rcx, QWORD PTR [rcx+112]
  000c4	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000c9	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tv146[rsp]
  000ce	48 8b 49 70	 mov	 rcx, QWORD PTR [rcx+112]
  000d2	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  000d7	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??_C@_01OGPIMHDM@?$DP?$AA@
  000de	4c 8b c0	 mov	 r8, rax
  000e1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0EA@MADIGBLG@descriptor?5?8?$CFV?8?5for?5type?5?8?$CFs?8?5ne@
  000e8	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000ef	e8 00 00 00 00	 call	 PyErr_Format

; 107  :         return NULL;

  000f4	33 c0		 xor	 eax, eax
  000f6	e9 85 00 00 00	 jmp	 $LN6@classmetho
$LN2@classmetho:

; 108  :     }
; 109  :     if (!PyType_IsSubtype((PyTypeObject *)type, PyDescr_TYPE(descr))) {

  000fb	48 8b 44 24 60	 mov	 rax, QWORD PTR descr$[rsp]
  00100	48 8b 50 60	 mov	 rdx, QWORD PTR [rax+96]
  00104	48 8b 4c 24 70	 mov	 rcx, QWORD PTR type$[rsp]
  00109	e8 00 00 00 00	 call	 PyType_IsSubtype
  0010e	85 c0		 test	 eax, eax
  00110	75 55		 jne	 SHORT $LN1@classmetho

; 110  :         PyErr_Format(PyExc_TypeError,
; 111  :                      "descriptor '%V' for type '%s' "
; 112  :                      "doesn't apply to type '%s'",
; 113  :                      descr_name((PyDescrObject *)descr), "?",
; 114  :                      PyDescr_TYPE(descr)->tp_name,
; 115  :                      ((PyTypeObject *)type)->tp_name);

  00112	48 8b 44 24 60	 mov	 rax, QWORD PTR descr$[rsp]
  00117	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0011b	48 89 44 24 48	 mov	 QWORD PTR tv145[rsp], rax
  00120	48 8b 4c 24 60	 mov	 rcx, QWORD PTR descr$[rsp]
  00125	e8 00 00 00 00	 call	 descr_name
  0012a	48 8b 4c 24 70	 mov	 rcx, QWORD PTR type$[rsp]
  0012f	48 8b 49 70	 mov	 rcx, QWORD PTR [rcx+112]
  00133	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00138	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tv145[rsp]
  0013d	48 8b 49 70	 mov	 rcx, QWORD PTR [rcx+112]
  00141	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00146	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??_C@_01OGPIMHDM@?$DP?$AA@
  0014d	4c 8b c0	 mov	 r8, rax
  00150	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DJ@CDDIFCEO@descriptor?5?8?$CFV?8?5for?5type?5?8?$CFs?8?5do@
  00157	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0015e	e8 00 00 00 00	 call	 PyErr_Format

; 116  :         return NULL;

  00163	33 c0		 xor	 eax, eax
  00165	eb 19		 jmp	 SHORT $LN6@classmetho
$LN1@classmetho:

; 117  :     }
; 118  :     return PyCFunction_New(descr->d_method, type);

  00167	45 33 c0	 xor	 r8d, r8d
  0016a	48 8b 54 24 70	 mov	 rdx, QWORD PTR type$[rsp]
  0016f	48 8b 44 24 60	 mov	 rax, QWORD PTR descr$[rsp]
  00174	48 8b 88 80 00
	00 00		 mov	 rcx, QWORD PTR [rax+128]
  0017b	e8 00 00 00 00	 call	 PyCFunction_NewEx
$LN6@classmetho:

; 119  : }

  00180	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00184	c3		 ret	 0
classmethod_get ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT descr_name
_TEXT	SEGMENT
descr$ = 8
descr_name PROC						; COMDAT

; 18   : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 19   :     if (descr->d_name != NULL && PyUnicode_Check(descr->d_name))

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR descr$[rsp]
  0000a	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  0000f	74 27		 je	 SHORT $LN1@descr_name
  00011	48 8b 44 24 08	 mov	 rax, QWORD PTR descr$[rsp]
  00016	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001a	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0001e	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00024	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00029	85 c0		 test	 eax, eax
  0002b	74 0b		 je	 SHORT $LN1@descr_name

; 20   :         return descr->d_name;

  0002d	48 8b 44 24 08	 mov	 rax, QWORD PTR descr$[rsp]
  00032	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00036	eb 02		 jmp	 SHORT $LN2@descr_name
$LN1@descr_name:

; 21   :     return NULL;

  00038	33 c0		 xor	 eax, eax
$LN2@descr_name:

; 22   : }

  0003a	f3 c3		 fatret	 0
descr_name ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$method_get DD imagerel method_get
	DD	imagerel method_get+80
	DD	imagerel $unwind$method_get
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$method_get DD 011301H
	DD	06213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT method_get
_TEXT	SEGMENT
res$ = 32
descr$ = 64
obj$ = 72
type$ = 80
method_get PROC						; COMDAT

; 123  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 124  :     PyObject *res;
; 125  : 
; 126  :     if (descr_check((PyDescrObject *)descr, obj, &res))

  00013	4c 8d 44 24 20	 lea	 r8, QWORD PTR res$[rsp]
  00018	48 8b 54 24 48	 mov	 rdx, QWORD PTR obj$[rsp]
  0001d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR descr$[rsp]
  00022	e8 00 00 00 00	 call	 descr_check
  00027	85 c0		 test	 eax, eax
  00029	74 07		 je	 SHORT $LN1@method_get

; 127  :         return res;

  0002b	48 8b 44 24 20	 mov	 rax, QWORD PTR res$[rsp]
  00030	eb 19		 jmp	 SHORT $LN2@method_get
$LN1@method_get:

; 128  :     return PyCFunction_New(descr->d_method, obj);

  00032	45 33 c0	 xor	 r8d, r8d
  00035	48 8b 54 24 48	 mov	 rdx, QWORD PTR obj$[rsp]
  0003a	48 8b 44 24 40	 mov	 rax, QWORD PTR descr$[rsp]
  0003f	48 8b 88 80 00
	00 00		 mov	 rcx, QWORD PTR [rax+128]
  00046	e8 00 00 00 00	 call	 PyCFunction_NewEx
$LN2@method_get:

; 129  : }

  0004b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004f	c3		 ret	 0
method_get ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DO@IHNJCPIH@descriptor?5?8?$CFV?8?5for?5?8?$CFs?8?5objects@ ; `string'
PUBLIC	_Py_IncRef
;	COMDAT pdata
pdata	SEGMENT
$pdata$descr_check DD imagerel descr_check
	DD	imagerel descr_check+232
	DD	imagerel $unwind$descr_check
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$descr_check DD 011301H
	DD	08213H
xdata	ENDS
;	COMDAT ??_C@_0DO@IHNJCPIH@descriptor?5?8?$CFV?8?5for?5?8?$CFs?8?5objects@
CONST	SEGMENT
??_C@_0DO@IHNJCPIH@descriptor?5?8?$CFV?8?5for?5?8?$CFs?8?5objects@ DB 'de'
	DB	'scriptor ''%V'' for ''%s'' objects doesn''t apply to ''%s'' o'
	DB	'bject', 00H					; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT descr_check
_TEXT	SEGMENT
tv88 = 48
tv75 = 56
descr$ = 80
obj$ = 88
pres$ = 96
descr_check PROC					; COMDAT

; 64   : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 65   :     if (obj == NULL) {

  00013	48 83 7c 24 58
	00		 cmp	 QWORD PTR obj$[rsp], 0
  00019	75 21		 jne	 SHORT $LN2@descr_chec

; 66   :         Py_INCREF(descr);

  0001b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR descr$[rsp]
  00020	e8 00 00 00 00	 call	 _Py_IncRef

; 67   :         *pres = (PyObject *)descr;

  00025	48 8b 44 24 60	 mov	 rax, QWORD PTR pres$[rsp]
  0002a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR descr$[rsp]
  0002f	48 89 08	 mov	 QWORD PTR [rax], rcx

; 68   :         return 1;

  00032	b8 01 00 00 00	 mov	 eax, 1
  00037	e9 a7 00 00 00	 jmp	 $LN3@descr_chec
$LN2@descr_chec:

; 69   :     }
; 70   :     if (!PyObject_TypeCheck(obj, descr->d_type)) {

  0003c	48 8b 44 24 58	 mov	 rax, QWORD PTR obj$[rsp]
  00041	48 8b 4c 24 50	 mov	 rcx, QWORD PTR descr$[rsp]
  00046	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  0004a	48 39 48 58	 cmp	 QWORD PTR [rax+88], rcx
  0004e	0f 84 8d 00 00
	00		 je	 $LN1@descr_chec
  00054	48 8b 44 24 50	 mov	 rax, QWORD PTR descr$[rsp]
  00059	48 8b 50 60	 mov	 rdx, QWORD PTR [rax+96]
  0005d	48 8b 44 24 58	 mov	 rax, QWORD PTR obj$[rsp]
  00062	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  00066	e8 00 00 00 00	 call	 PyType_IsSubtype
  0006b	85 c0		 test	 eax, eax
  0006d	75 72		 jne	 SHORT $LN1@descr_chec

; 71   :         PyErr_Format(PyExc_TypeError,
; 72   :                      "descriptor '%V' for '%s' objects "
; 73   :                      "doesn't apply to '%s' object",
; 74   :                      descr_name((PyDescrObject *)descr), "?",
; 75   :                      descr->d_type->tp_name,
; 76   :                      obj->ob_type->tp_name);

  0006f	48 8b 44 24 58	 mov	 rax, QWORD PTR obj$[rsp]
  00074	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00078	48 89 44 24 30	 mov	 QWORD PTR tv88[rsp], rax
  0007d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR descr$[rsp]
  00082	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  00086	48 89 4c 24 38	 mov	 QWORD PTR tv75[rsp], rcx
  0008b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR descr$[rsp]
  00090	e8 00 00 00 00	 call	 descr_name
  00095	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv88[rsp]
  0009a	48 8b 49 70	 mov	 rcx, QWORD PTR [rcx+112]
  0009e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000a3	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tv75[rsp]
  000a8	48 8b 49 70	 mov	 rcx, QWORD PTR [rcx+112]
  000ac	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  000b1	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??_C@_01OGPIMHDM@?$DP?$AA@
  000b8	4c 8b c0	 mov	 r8, rax
  000bb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DO@IHNJCPIH@descriptor?5?8?$CFV?8?5for?5?8?$CFs?8?5objects@
  000c2	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000c9	e8 00 00 00 00	 call	 PyErr_Format

; 77   :         *pres = NULL;

  000ce	48 8b 44 24 60	 mov	 rax, QWORD PTR pres$[rsp]
  000d3	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 78   :         return 1;

  000da	b8 01 00 00 00	 mov	 eax, 1
  000df	eb 02		 jmp	 SHORT $LN3@descr_chec
$LN1@descr_chec:

; 79   :     }
; 80   :     return 0;

  000e1	33 c0		 xor	 eax, eax
$LN3@descr_chec:

; 81   : }

  000e3	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e7	c3		 ret	 0
descr_check ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN7
	DD	imagerel $LN7+132
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 6d		 jne	 SHORT $LN2@Py_IncRef
  00012	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0001a	4c 8b 4c 24 40	 mov	 r9, QWORD PTR op$[rsp]
  0001f	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_Guard
  00038	85 c0		 test	 eax, eax
  0003a	75 12		 jne	 SHORT $LN1@Py_IncRef
  0003c	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  00041	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00045	48 83 e0 20	 and	 rax, 32			; 00000020H
  00049	48 85 c0	 test	 rax, rax
  0004c	74 31		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;

  0004e	e8 00 00 00 00	 call	 _Py_PXCTX
  00053	85 c0		 test	 eax, eax
  00055	74 02		 je	 SHORT $LN5@Py_IncRef
  00057	eb 11		 jmp	 SHORT $LN6@Py_IncRef
$LN5@Py_IncRef:
  00059	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00060	48 ff c0	 inc	 rax
  00063	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN6@Py_IncRef:

; 907  :         (((PyObject*)(op))->ob_refcnt++);

  0006a	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  0006f	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00073	48 ff c0	 inc	 rax
  00076	48 8b 4c 24 40	 mov	 rcx, QWORD PTR op$[rsp]
  0007b	48 89 41 50	 mov	 QWORD PTR [rcx+80], rax
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  0007f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00083	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
EXTRN	PyMember_GetOne:PROC
;	COMDAT pdata
; File c:\src\pyparallel\objects\descrobject.c
pdata	SEGMENT
$pdata$member_get DD imagerel member_get
	DD	imagerel member_get+77
	DD	imagerel $unwind$member_get
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$member_get DD 011301H
	DD	06213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT member_get
_TEXT	SEGMENT
res$ = 32
descr$ = 64
obj$ = 72
type$ = 80
member_get PROC						; COMDAT

; 133  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 134  :     PyObject *res;
; 135  : 
; 136  :     if (descr_check((PyDescrObject *)descr, obj, &res))

  00013	4c 8d 44 24 20	 lea	 r8, QWORD PTR res$[rsp]
  00018	48 8b 54 24 48	 mov	 rdx, QWORD PTR obj$[rsp]
  0001d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR descr$[rsp]
  00022	e8 00 00 00 00	 call	 descr_check
  00027	85 c0		 test	 eax, eax
  00029	74 07		 je	 SHORT $LN1@member_get

; 137  :         return res;

  0002b	48 8b 44 24 20	 mov	 rax, QWORD PTR res$[rsp]
  00030	eb 16		 jmp	 SHORT $LN2@member_get
$LN1@member_get:

; 138  :     return PyMember_GetOne((char *)obj, descr->d_member);

  00032	48 8b 44 24 40	 mov	 rax, QWORD PTR descr$[rsp]
  00037	48 8b 90 80 00
	00 00		 mov	 rdx, QWORD PTR [rax+128]
  0003e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR obj$[rsp]
  00043	e8 00 00 00 00	 call	 PyMember_GetOne
$LN2@member_get:

; 139  : }

  00048	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004c	c3		 ret	 0
member_get ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DD@KIHLKLFH@attribute?5?8?$CFV?8?5of?5?8?$CF?4100s?8?5objec@ ; `string'
EXTRN	PyExc_AttributeError:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$getset_get DD imagerel getset_get
	DD	imagerel getset_get+194
	DD	imagerel $unwind$getset_get
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$getset_get DD 011301H
	DD	0a213H
xdata	ENDS
;	COMDAT ??_C@_0DD@KIHLKLFH@attribute?5?8?$CFV?8?5of?5?8?$CF?4100s?8?5objec@
CONST	SEGMENT
??_C@_0DD@KIHLKLFH@attribute?5?8?$CFV?8?5of?5?8?$CF?4100s?8?5objec@ DB 'a'
	DB	'ttribute ''%V'' of ''%.100s'' objects is not readable', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT getset_get
_TEXT	SEGMENT
res$ = 48
tv89 = 56
tv79 = 64
descr$ = 96
obj$ = 104
type$ = 112
getset_get PROC						; COMDAT

; 143  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 144  :     PyObject *res;
; 145  : 
; 146  :     if (descr_check((PyDescrObject *)descr, obj, &res))

  00013	4c 8d 44 24 30	 lea	 r8, QWORD PTR res$[rsp]
  00018	48 8b 54 24 68	 mov	 rdx, QWORD PTR obj$[rsp]
  0001d	48 8b 4c 24 60	 mov	 rcx, QWORD PTR descr$[rsp]
  00022	e8 00 00 00 00	 call	 descr_check
  00027	85 c0		 test	 eax, eax
  00029	74 0a		 je	 SHORT $LN2@getset_get

; 147  :         return res;

  0002b	48 8b 44 24 30	 mov	 rax, QWORD PTR res$[rsp]
  00030	e9 88 00 00 00	 jmp	 $LN3@getset_get
$LN2@getset_get:

; 148  :     if (descr->d_getset->get != NULL)

  00035	48 8b 44 24 60	 mov	 rax, QWORD PTR descr$[rsp]
  0003a	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  00041	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00046	74 30		 je	 SHORT $LN1@getset_get

; 149  :         return descr->d_getset->get(obj, descr->d_getset->closure);

  00048	48 8b 44 24 60	 mov	 rax, QWORD PTR descr$[rsp]
  0004d	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  00054	48 8b 4c 24 60	 mov	 rcx, QWORD PTR descr$[rsp]
  00059	48 8b 89 80 00
	00 00		 mov	 rcx, QWORD PTR [rcx+128]
  00060	48 89 4c 24 38	 mov	 QWORD PTR tv89[rsp], rcx
  00065	48 8b 50 20	 mov	 rdx, QWORD PTR [rax+32]
  00069	48 8b 4c 24 68	 mov	 rcx, QWORD PTR obj$[rsp]
  0006e	48 8b 44 24 38	 mov	 rax, QWORD PTR tv89[rsp]
  00073	ff 50 08	 call	 QWORD PTR [rax+8]
  00076	eb 45		 jmp	 SHORT $LN3@getset_get
$LN1@getset_get:

; 150  :     PyErr_Format(PyExc_AttributeError,
; 151  :                  "attribute '%V' of '%.100s' objects is not readable",
; 152  :                  descr_name((PyDescrObject *)descr), "?",
; 153  :                  PyDescr_TYPE(descr)->tp_name);

  00078	48 8b 44 24 60	 mov	 rax, QWORD PTR descr$[rsp]
  0007d	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00081	48 89 44 24 40	 mov	 QWORD PTR tv79[rsp], rax
  00086	48 8b 4c 24 60	 mov	 rcx, QWORD PTR descr$[rsp]
  0008b	e8 00 00 00 00	 call	 descr_name
  00090	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tv79[rsp]
  00095	48 8b 49 70	 mov	 rcx, QWORD PTR [rcx+112]
  00099	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0009e	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??_C@_01OGPIMHDM@?$DP?$AA@
  000a5	4c 8b c0	 mov	 r8, rax
  000a8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DD@KIHLKLFH@attribute?5?8?$CFV?8?5of?5?8?$CF?4100s?8?5objec@
  000af	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_AttributeError
  000b6	e8 00 00 00 00	 call	 PyErr_Format

; 154  :     return NULL;

  000bb	33 c0		 xor	 eax, eax
$LN3@getset_get:

; 155  : }

  000bd	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000c1	c3		 ret	 0
getset_get ENDP
_TEXT	ENDS
PUBLIC	PyWrapper_New
;	COMDAT pdata
pdata	SEGMENT
$pdata$wrapperdescr_get DD imagerel wrapperdescr_get
	DD	imagerel wrapperdescr_get+70
	DD	imagerel $unwind$wrapperdescr_get
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$wrapperdescr_get DD 011301H
	DD	06213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT wrapperdescr_get
_TEXT	SEGMENT
res$ = 32
descr$ = 64
obj$ = 72
type$ = 80
wrapperdescr_get PROC					; COMDAT

; 159  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 160  :     PyObject *res;
; 161  : 
; 162  :     if (descr_check((PyDescrObject *)descr, obj, &res))

  00013	4c 8d 44 24 20	 lea	 r8, QWORD PTR res$[rsp]
  00018	48 8b 54 24 48	 mov	 rdx, QWORD PTR obj$[rsp]
  0001d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR descr$[rsp]
  00022	e8 00 00 00 00	 call	 descr_check
  00027	85 c0		 test	 eax, eax
  00029	74 07		 je	 SHORT $LN1@wrapperdes

; 163  :         return res;

  0002b	48 8b 44 24 20	 mov	 rax, QWORD PTR res$[rsp]
  00030	eb 0f		 jmp	 SHORT $LN2@wrapperdes
$LN1@wrapperdes:

; 164  :     return PyWrapper_New((PyObject *)descr, obj);

  00032	48 8b 54 24 48	 mov	 rdx, QWORD PTR obj$[rsp]
  00037	48 8b 4c 24 40	 mov	 rcx, QWORD PTR descr$[rsp]
  0003c	e8 00 00 00 00	 call	 PyWrapper_New
$LN2@wrapperdes:

; 165  : }

  00041	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00045	c3		 ret	 0
wrapperdescr_get ENDP
_TEXT	ENDS
EXTRN	PyMember_SetOne:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$member_set DD imagerel member_set
	DD	imagerel member_set+86
	DD	imagerel $unwind$member_set
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$member_set DD 011301H
	DD	06213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT member_set
_TEXT	SEGMENT
res$ = 32
descr$ = 64
obj$ = 72
value$ = 80
member_set PROC						; COMDAT

; 187  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 188  :     int res;
; 189  : 
; 190  :     if (descr_setcheck((PyDescrObject *)descr, obj, value, &res))

  00013	4c 8d 4c 24 20	 lea	 r9, QWORD PTR res$[rsp]
  00018	4c 8b 44 24 50	 mov	 r8, QWORD PTR value$[rsp]
  0001d	48 8b 54 24 48	 mov	 rdx, QWORD PTR obj$[rsp]
  00022	48 8b 4c 24 40	 mov	 rcx, QWORD PTR descr$[rsp]
  00027	e8 00 00 00 00	 call	 descr_setcheck
  0002c	85 c0		 test	 eax, eax
  0002e	74 06		 je	 SHORT $LN1@member_set

; 191  :         return res;

  00030	8b 44 24 20	 mov	 eax, DWORD PTR res$[rsp]
  00034	eb 1b		 jmp	 SHORT $LN2@member_set
$LN1@member_set:

; 192  :     return PyMember_SetOne((char *)obj, descr->d_member, value);

  00036	4c 8b 44 24 50	 mov	 r8, QWORD PTR value$[rsp]
  0003b	48 8b 44 24 40	 mov	 rax, QWORD PTR descr$[rsp]
  00040	48 8b 90 80 00
	00 00		 mov	 rdx, QWORD PTR [rax+128]
  00047	48 8b 4c 24 48	 mov	 rcx, QWORD PTR obj$[rsp]
  0004c	e8 00 00 00 00	 call	 PyMember_SetOne
$LN2@member_set:

; 193  : }

  00051	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00055	c3		 ret	 0
member_set ENDP
_TEXT	ENDS
PUBLIC	??_C@_0EG@BJMOFAJD@descriptor?5?8?$CFV?8?5for?5?8?$CF?4100s?8?5obj@ ; `string'
PUBLIC	??_C@_1BI@KHFAEIJG@?$AAo?$AAb?$AAj?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$descr_setcheck DD imagerel descr_setcheck
	DD	imagerel descr_setcheck+231
	DD	imagerel $unwind$descr_setcheck
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$descr_setcheck DD 011801H
	DD	08218H
xdata	ENDS
;	COMDAT ??_C@_0EG@BJMOFAJD@descriptor?5?8?$CFV?8?5for?5?8?$CF?4100s?8?5obj@
CONST	SEGMENT
??_C@_0EG@BJMOFAJD@descriptor?5?8?$CFV?8?5for?5?8?$CF?4100s?8?5obj@ DB 'd'
	DB	'escriptor ''%V'' for ''%.100s'' objects doesn''t apply to ''%'
	DB	'.100s'' object', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1BI@KHFAEIJG@?$AAo?$AAb?$AAj?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
CONST	SEGMENT
??_C@_1BI@KHFAEIJG@?$AAo?$AAb?$AAj?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ DB 'o'
	DB	00H, 'b', 00H, 'j', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H
	DB	'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT descr_setcheck
_TEXT	SEGMENT
tv91 = 48
tv78 = 56
descr$ = 80
obj$ = 88
value$ = 96
pres$ = 104
descr_setcheck PROC					; COMDAT

; 170  : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 171  :     assert(obj != NULL);

  00018	48 83 7c 24 58
	00		 cmp	 QWORD PTR obj$[rsp], 0
  0001e	75 1c		 jne	 SHORT $LN4@descr_setc
  00020	41 b8 ab 00 00
	00		 mov	 r8d, 171		; 000000abH
  00026	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DC@OKEDMLJ@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAc?$AAr?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  0002d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BI@KHFAEIJG@?$AAo?$AAb?$AAj?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
  00034	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0003a	33 c0		 xor	 eax, eax
$LN4@descr_setc:

; 172  :     if (!PyObject_TypeCheck(obj, descr->d_type)) {

  0003c	48 8b 44 24 58	 mov	 rax, QWORD PTR obj$[rsp]
  00041	48 8b 4c 24 50	 mov	 rcx, QWORD PTR descr$[rsp]
  00046	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  0004a	48 39 48 58	 cmp	 QWORD PTR [rax+88], rcx
  0004e	0f 84 8c 00 00
	00		 je	 $LN1@descr_setc
  00054	48 8b 44 24 50	 mov	 rax, QWORD PTR descr$[rsp]
  00059	48 8b 50 60	 mov	 rdx, QWORD PTR [rax+96]
  0005d	48 8b 44 24 58	 mov	 rax, QWORD PTR obj$[rsp]
  00062	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  00066	e8 00 00 00 00	 call	 PyType_IsSubtype
  0006b	85 c0		 test	 eax, eax
  0006d	75 71		 jne	 SHORT $LN1@descr_setc

; 173  :         PyErr_Format(PyExc_TypeError,
; 174  :                      "descriptor '%V' for '%.100s' objects "
; 175  :                      "doesn't apply to '%.100s' object",
; 176  :                      descr_name(descr), "?",
; 177  :                      descr->d_type->tp_name,
; 178  :                      obj->ob_type->tp_name);

  0006f	48 8b 44 24 58	 mov	 rax, QWORD PTR obj$[rsp]
  00074	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00078	48 89 44 24 30	 mov	 QWORD PTR tv91[rsp], rax
  0007d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR descr$[rsp]
  00082	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  00086	48 89 4c 24 38	 mov	 QWORD PTR tv78[rsp], rcx
  0008b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR descr$[rsp]
  00090	e8 00 00 00 00	 call	 descr_name
  00095	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv91[rsp]
  0009a	48 8b 49 70	 mov	 rcx, QWORD PTR [rcx+112]
  0009e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  000a3	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tv78[rsp]
  000a8	48 8b 49 70	 mov	 rcx, QWORD PTR [rcx+112]
  000ac	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  000b1	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??_C@_01OGPIMHDM@?$DP?$AA@
  000b8	4c 8b c0	 mov	 r8, rax
  000bb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0EG@BJMOFAJD@descriptor?5?8?$CFV?8?5for?5?8?$CF?4100s?8?5obj@
  000c2	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000c9	e8 00 00 00 00	 call	 PyErr_Format

; 179  :         *pres = -1;

  000ce	48 8b 44 24 68	 mov	 rax, QWORD PTR pres$[rsp]
  000d3	c7 00 ff ff ff
	ff		 mov	 DWORD PTR [rax], -1

; 180  :         return 1;

  000d9	b8 01 00 00 00	 mov	 eax, 1
  000de	eb 02		 jmp	 SHORT $LN2@descr_setc
$LN1@descr_setc:

; 181  :     }
; 182  :     return 0;

  000e0	33 c0		 xor	 eax, eax
$LN2@descr_setc:

; 183  : }

  000e2	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e6	c3		 ret	 0
descr_setcheck ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DD@KEKLJKNG@attribute?5?8?$CFV?8?5of?5?8?$CF?4100s?8?5objec@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$getset_set DD imagerel getset_set
	DD	imagerel getset_set+206
	DD	imagerel $unwind$getset_set
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$getset_set DD 011301H
	DD	0a213H
xdata	ENDS
;	COMDAT ??_C@_0DD@KEKLJKNG@attribute?5?8?$CFV?8?5of?5?8?$CF?4100s?8?5objec@
CONST	SEGMENT
??_C@_0DD@KEKLJKNG@attribute?5?8?$CFV?8?5of?5?8?$CF?4100s?8?5objec@ DB 'a'
	DB	'ttribute ''%V'' of ''%.100s'' objects is not writable', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT getset_set
_TEXT	SEGMENT
res$ = 48
tv91 = 56
tv81 = 64
descr$ = 96
obj$ = 104
value$ = 112
getset_set PROC						; COMDAT

; 197  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 198  :     int res;
; 199  : 
; 200  :     if (descr_setcheck((PyDescrObject *)descr, obj, value, &res))

  00013	4c 8d 4c 24 30	 lea	 r9, QWORD PTR res$[rsp]
  00018	4c 8b 44 24 70	 mov	 r8, QWORD PTR value$[rsp]
  0001d	48 8b 54 24 68	 mov	 rdx, QWORD PTR obj$[rsp]
  00022	48 8b 4c 24 60	 mov	 rcx, QWORD PTR descr$[rsp]
  00027	e8 00 00 00 00	 call	 descr_setcheck
  0002c	85 c0		 test	 eax, eax
  0002e	74 09		 je	 SHORT $LN2@getset_set

; 201  :         return res;

  00030	8b 44 24 30	 mov	 eax, DWORD PTR res$[rsp]
  00034	e9 90 00 00 00	 jmp	 $LN3@getset_set
$LN2@getset_set:

; 202  :     if (descr->d_getset->set != NULL)

  00039	48 8b 44 24 60	 mov	 rax, QWORD PTR descr$[rsp]
  0003e	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  00045	48 83 78 10 00	 cmp	 QWORD PTR [rax+16], 0
  0004a	74 35		 je	 SHORT $LN1@getset_set

; 203  :         return descr->d_getset->set(obj, value,
; 204  :                                     descr->d_getset->closure);

  0004c	48 8b 44 24 60	 mov	 rax, QWORD PTR descr$[rsp]
  00051	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  00058	48 8b 4c 24 60	 mov	 rcx, QWORD PTR descr$[rsp]
  0005d	48 8b 89 80 00
	00 00		 mov	 rcx, QWORD PTR [rcx+128]
  00064	48 89 4c 24 38	 mov	 QWORD PTR tv91[rsp], rcx
  00069	4c 8b 40 20	 mov	 r8, QWORD PTR [rax+32]
  0006d	48 8b 54 24 70	 mov	 rdx, QWORD PTR value$[rsp]
  00072	48 8b 4c 24 68	 mov	 rcx, QWORD PTR obj$[rsp]
  00077	48 8b 44 24 38	 mov	 rax, QWORD PTR tv91[rsp]
  0007c	ff 50 10	 call	 QWORD PTR [rax+16]
  0007f	eb 48		 jmp	 SHORT $LN3@getset_set
$LN1@getset_set:

; 205  :     PyErr_Format(PyExc_AttributeError,
; 206  :                  "attribute '%V' of '%.100s' objects is not writable",
; 207  :                  descr_name((PyDescrObject *)descr), "?",
; 208  :                  PyDescr_TYPE(descr)->tp_name);

  00081	48 8b 44 24 60	 mov	 rax, QWORD PTR descr$[rsp]
  00086	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0008a	48 89 44 24 40	 mov	 QWORD PTR tv81[rsp], rax
  0008f	48 8b 4c 24 60	 mov	 rcx, QWORD PTR descr$[rsp]
  00094	e8 00 00 00 00	 call	 descr_name
  00099	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tv81[rsp]
  0009e	48 8b 49 70	 mov	 rcx, QWORD PTR [rcx+112]
  000a2	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  000a7	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??_C@_01OGPIMHDM@?$DP?$AA@
  000ae	4c 8b c0	 mov	 r8, rax
  000b1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DD@KEKLJKNG@attribute?5?8?$CFV?8?5of?5?8?$CF?4100s?8?5objec@
  000b8	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_AttributeError
  000bf	e8 00 00 00 00	 call	 PyErr_Format

; 209  :     return -1;

  000c4	b8 ff ff ff ff	 mov	 eax, -1
$LN3@getset_set:

; 210  : }

  000c9	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000cd	c3		 ret	 0
getset_set ENDP
_TEXT	ENDS
PUBLIC	??_C@_0ED@JEKLHGCL@descriptor?5?8?$CFV?8?5requires?5a?5?8?$CF?410@ ; `string'
PUBLIC	??_C@_0DF@DNBKEIFF@descriptor?5?8?$CFV?8?5of?5?8?$CF?4100s?8?5obje@ ; `string'
PUBLIC	??_C@_1CI@KAJNBGPM@?$AAP?$AAy?$AAT?$AAu?$AAp?$AAl?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAa?$AAr?$AAg?$AAs?$AA?$CJ?$AA?$AA@ ; `string'
EXTRN	PyEval_CallObjectWithKeywords:PROC
EXTRN	PyTuple_GetSlice:PROC
EXTRN	_PyObject_RealIsSubclass:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$methoddescr_call DD imagerel methoddescr_call
	DD	imagerel methoddescr_call+499
	DD	imagerel $unwind$methoddescr_call
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$methoddescr_call DD 011301H
	DD	0e213H
xdata	ENDS
;	COMDAT ??_C@_0ED@JEKLHGCL@descriptor?5?8?$CFV?8?5requires?5a?5?8?$CF?410@
CONST	SEGMENT
??_C@_0ED@JEKLHGCL@descriptor?5?8?$CFV?8?5requires?5a?5?8?$CF?410@ DB 'de'
	DB	'scriptor ''%V'' requires a ''%.100s'' object but received a '''
	DB	'%.100s''', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@DNBKEIFF@descriptor?5?8?$CFV?8?5of?5?8?$CF?4100s?8?5obje@
CONST	SEGMENT
??_C@_0DF@DNBKEIFF@descriptor?5?8?$CFV?8?5of?5?8?$CF?4100s?8?5obje@ DB 'd'
	DB	'escriptor ''%V'' of ''%.100s'' object needs an argument', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CI@KAJNBGPM@?$AAP?$AAy?$AAT?$AAu?$AAp?$AAl?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAa?$AAr?$AAg?$AAs?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CI@KAJNBGPM@?$AAP?$AAy?$AAT?$AAu?$AAp?$AAl?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAa?$AAr?$AAg?$AAs?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'T', 00H, 'u', 00H, 'p', 00H, 'l', 00H, 'e', 00H
	DB	'_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, '('
	DB	00H, 'a', 00H, 'r', 00H, 'g', 00H, 's', 00H, ')', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT methoddescr_call
_TEXT	SEGMENT
argc$ = 48
self$ = 56
result$ = 64
func$ = 72
tv155 = 80
tv154 = 88
tv153 = 96
descr$ = 128
args$ = 136
kwds$ = 144
methoddescr_call PROC					; COMDAT

; 214  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 215  :     Py_ssize_t argc;
; 216  :     PyObject *self, *func, *result;
; 217  : 
; 218  :     /* Make sure that the first argument is acceptable as 'self' */
; 219  :     assert(PyTuple_Check(args));

  00013	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR args$[rsp]
  0001b	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0001f	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00025	25 00 00 00 04	 and	 eax, 67108864		; 04000000H
  0002a	85 c0		 test	 eax, eax
  0002c	75 1c		 jne	 SHORT $LN7@methoddesc
  0002e	41 b8 db 00 00
	00		 mov	 r8d, 219		; 000000dbH
  00034	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DC@OKEDMLJ@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAc?$AAr?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  0003b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CI@KAJNBGPM@?$AAP?$AAy?$AAT?$AAu?$AAp?$AAl?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAa?$AAr?$AAg?$AAs?$AA?$CJ?$AA?$AA@
  00042	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00048	33 c0		 xor	 eax, eax
$LN7@methoddesc:

; 220  :     argc = PyTuple_GET_SIZE(args);

  0004a	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR args$[rsp]
  00052	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00056	48 89 44 24 30	 mov	 QWORD PTR argc$[rsp], rax

; 221  :     if (argc < 1) {

  0005b	48 83 7c 24 30
	01		 cmp	 QWORD PTR argc$[rsp], 1
  00061	7d 50		 jge	 SHORT $LN4@methoddesc

; 222  :         PyErr_Format(PyExc_TypeError,
; 223  :                      "descriptor '%V' of '%.100s' "
; 224  :                      "object needs an argument",
; 225  :                      descr_name((PyDescrObject *)descr), "?",
; 226  :                      PyDescr_TYPE(descr)->tp_name);

  00063	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR descr$[rsp]
  0006b	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0006f	48 89 44 24 50	 mov	 QWORD PTR tv155[rsp], rax
  00074	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR descr$[rsp]
  0007c	e8 00 00 00 00	 call	 descr_name
  00081	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tv155[rsp]
  00086	48 8b 49 70	 mov	 rcx, QWORD PTR [rcx+112]
  0008a	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0008f	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??_C@_01OGPIMHDM@?$DP?$AA@
  00096	4c 8b c0	 mov	 r8, rax
  00099	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DF@DNBKEIFF@descriptor?5?8?$CFV?8?5of?5?8?$CF?4100s?8?5obje@
  000a0	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000a7	e8 00 00 00 00	 call	 PyErr_Format

; 227  :         return NULL;

  000ac	33 c0		 xor	 eax, eax
  000ae	e9 3b 01 00 00	 jmp	 $LN5@methoddesc
$LN4@methoddesc:

; 228  :     }
; 229  :     self = PyTuple_GET_ITEM(args, 0);

  000b3	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR args$[rsp]
  000bb	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  000bf	48 89 44 24 38	 mov	 QWORD PTR self$[rsp], rax

; 230  :     if (!_PyObject_RealIsSubclass((PyObject *)Py_TYPE(self),
; 231  :                                   (PyObject *)PyDescr_TYPE(descr))) {

  000c4	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR descr$[rsp]
  000cc	48 8b 50 60	 mov	 rdx, QWORD PTR [rax+96]
  000d0	48 8b 44 24 38	 mov	 rax, QWORD PTR self$[rsp]
  000d5	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  000d9	e8 00 00 00 00	 call	 _PyObject_RealIsSubclass
  000de	85 c0		 test	 eax, eax
  000e0	75 6c		 jne	 SHORT $LN3@methoddesc

; 232  :         PyErr_Format(PyExc_TypeError,
; 233  :                      "descriptor '%V' "
; 234  :                      "requires a '%.100s' object "
; 235  :                      "but received a '%.100s'",
; 236  :                      descr_name((PyDescrObject *)descr), "?",
; 237  :                      PyDescr_TYPE(descr)->tp_name,
; 238  :                      self->ob_type->tp_name);

  000e2	48 8b 44 24 38	 mov	 rax, QWORD PTR self$[rsp]
  000e7	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000eb	48 89 44 24 58	 mov	 QWORD PTR tv154[rsp], rax
  000f0	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR descr$[rsp]
  000f8	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  000fc	48 89 4c 24 60	 mov	 QWORD PTR tv153[rsp], rcx
  00101	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR descr$[rsp]
  00109	e8 00 00 00 00	 call	 descr_name
  0010e	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tv154[rsp]
  00113	48 8b 49 70	 mov	 rcx, QWORD PTR [rcx+112]
  00117	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0011c	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tv153[rsp]
  00121	48 8b 49 70	 mov	 rcx, QWORD PTR [rcx+112]
  00125	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0012a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??_C@_01OGPIMHDM@?$DP?$AA@
  00131	4c 8b c0	 mov	 r8, rax
  00134	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0ED@JEKLHGCL@descriptor?5?8?$CFV?8?5requires?5a?5?8?$CF?410@
  0013b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00142	e8 00 00 00 00	 call	 PyErr_Format

; 239  :         return NULL;

  00147	33 c0		 xor	 eax, eax
  00149	e9 a0 00 00 00	 jmp	 $LN5@methoddesc
$LN3@methoddesc:

; 240  :     }
; 241  : 
; 242  :     func = PyCFunction_New(descr->d_method, self);

  0014e	45 33 c0	 xor	 r8d, r8d
  00151	48 8b 54 24 38	 mov	 rdx, QWORD PTR self$[rsp]
  00156	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR descr$[rsp]
  0015e	48 8b 88 80 00
	00 00		 mov	 rcx, QWORD PTR [rax+128]
  00165	e8 00 00 00 00	 call	 PyCFunction_NewEx
  0016a	48 89 44 24 48	 mov	 QWORD PTR func$[rsp], rax

; 243  :     if (func == NULL)

  0016f	48 83 7c 24 48
	00		 cmp	 QWORD PTR func$[rsp], 0
  00175	75 04		 jne	 SHORT $LN2@methoddesc

; 244  :         return NULL;

  00177	33 c0		 xor	 eax, eax
  00179	eb 73		 jmp	 SHORT $LN5@methoddesc
$LN2@methoddesc:

; 245  :     args = PyTuple_GetSlice(args, 1, argc);

  0017b	4c 8b 44 24 30	 mov	 r8, QWORD PTR argc$[rsp]
  00180	ba 01 00 00 00	 mov	 edx, 1
  00185	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  0018d	e8 00 00 00 00	 call	 PyTuple_GetSlice
  00192	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR args$[rsp], rax

; 246  :     if (args == NULL) {

  0019a	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR args$[rsp], 0
  001a3	75 0e		 jne	 SHORT $LN1@methoddesc

; 247  :         Py_DECREF(func);

  001a5	48 8b 4c 24 48	 mov	 rcx, QWORD PTR func$[rsp]
  001aa	e8 00 00 00 00	 call	 _Py_DecRef

; 248  :         return NULL;

  001af	33 c0		 xor	 eax, eax
  001b1	eb 3b		 jmp	 SHORT $LN5@methoddesc
$LN1@methoddesc:

; 249  :     }
; 250  :     result = PyEval_CallObjectWithKeywords(func, args, kwds);

  001b3	4c 8b 84 24 90
	00 00 00	 mov	 r8, QWORD PTR kwds$[rsp]
  001bb	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR args$[rsp]
  001c3	48 8b 4c 24 48	 mov	 rcx, QWORD PTR func$[rsp]
  001c8	e8 00 00 00 00	 call	 PyEval_CallObjectWithKeywords
  001cd	48 89 44 24 40	 mov	 QWORD PTR result$[rsp], rax

; 251  :     Py_DECREF(args);

  001d2	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  001da	e8 00 00 00 00	 call	 _Py_DecRef

; 252  :     Py_DECREF(func);

  001df	48 8b 4c 24 48	 mov	 rcx, QWORD PTR func$[rsp]
  001e4	e8 00 00 00 00	 call	 _Py_DecRef

; 253  :     return result;

  001e9	48 8b 44 24 40	 mov	 rax, QWORD PTR result$[rsp]
$LN5@methoddesc:

; 254  : }

  001ee	48 83 c4 78	 add	 rsp, 120		; 00000078H
  001f2	c3		 ret	 0
methoddescr_call ENDP
_TEXT	ENDS
PUBLIC	??_C@_0EE@BFJLCEKG@descriptor?5?8?$CFV?8?5requires?5a?5subty@ ; `string'
PUBLIC	??_C@_0DI@LFNCLFNC@descriptor?5?8?$CFV?8?5requires?5a?5type?5@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$classmethoddescr_call DD imagerel classmethoddescr_call
	DD	imagerel classmethoddescr_call+633
	DD	imagerel $unwind$classmethoddescr_call
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$classmethoddescr_call DD 021601H
	DD	0110116H
xdata	ENDS
;	COMDAT ??_C@_0EE@BFJLCEKG@descriptor?5?8?$CFV?8?5requires?5a?5subty@
CONST	SEGMENT
??_C@_0EE@BFJLCEKG@descriptor?5?8?$CFV?8?5requires?5a?5subty@ DB 'descrip'
	DB	'tor ''%V'' requires a subtype of ''%.100s'' but received ''%.'
	DB	'100s', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@LFNCLFNC@descriptor?5?8?$CFV?8?5requires?5a?5type?5@
CONST	SEGMENT
??_C@_0DI@LFNCLFNC@descriptor?5?8?$CFV?8?5requires?5a?5type?5@ DB 'descri'
	DB	'ptor ''%V'' requires a type but received a ''%.100s''', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT classmethoddescr_call
_TEXT	SEGMENT
argc$ = 48
self$ = 56
result$ = 64
func$ = 72
tv173 = 80
tv171 = 88
tv170 = 96
tv169 = 104
tv168 = 112
descr$ = 144
args$ = 152
kwds$ = 160
classmethoddescr_call PROC				; COMDAT

; 259  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 260  :     Py_ssize_t argc;
; 261  :     PyObject *self, *func, *result;
; 262  : 
; 263  :     /* Make sure that the first argument is acceptable as 'self' */
; 264  :     assert(PyTuple_Check(args));

  00016	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR args$[rsp]
  0001e	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00022	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00028	25 00 00 00 04	 and	 eax, 67108864		; 04000000H
  0002d	85 c0		 test	 eax, eax
  0002f	75 1c		 jne	 SHORT $LN8@classmetho@2
  00031	41 b8 08 01 00
	00		 mov	 r8d, 264		; 00000108H
  00037	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DC@OKEDMLJ@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAc?$AAr?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  0003e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CI@KAJNBGPM@?$AAP?$AAy?$AAT?$AAu?$AAp?$AAl?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAa?$AAr?$AAg?$AAs?$AA?$CJ?$AA?$AA@
  00045	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0004b	33 c0		 xor	 eax, eax
$LN8@classmetho@2:

; 265  :     argc = PyTuple_GET_SIZE(args);

  0004d	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR args$[rsp]
  00055	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00059	48 89 44 24 30	 mov	 QWORD PTR argc$[rsp], rax

; 266  :     if (argc < 1) {

  0005e	48 83 7c 24 30
	01		 cmp	 QWORD PTR argc$[rsp], 1
  00064	7d 50		 jge	 SHORT $LN5@classmetho@2

; 267  :         PyErr_Format(PyExc_TypeError,
; 268  :                      "descriptor '%V' of '%.100s' "
; 269  :                      "object needs an argument",
; 270  :                      descr_name((PyDescrObject *)descr), "?",
; 271  :                      PyDescr_TYPE(descr)->tp_name);

  00066	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR descr$[rsp]
  0006e	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00072	48 89 44 24 50	 mov	 QWORD PTR tv173[rsp], rax
  00077	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR descr$[rsp]
  0007f	e8 00 00 00 00	 call	 descr_name
  00084	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tv173[rsp]
  00089	48 8b 49 70	 mov	 rcx, QWORD PTR [rcx+112]
  0008d	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00092	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??_C@_01OGPIMHDM@?$DP?$AA@
  00099	4c 8b c0	 mov	 r8, rax
  0009c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DF@DNBKEIFF@descriptor?5?8?$CFV?8?5of?5?8?$CF?4100s?8?5obje@
  000a3	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000aa	e8 00 00 00 00	 call	 PyErr_Format

; 272  :         return NULL;

  000af	33 c0		 xor	 eax, eax
  000b1	e9 bb 01 00 00	 jmp	 $LN6@classmetho@2
$LN5@classmetho@2:

; 273  :     }
; 274  :     self = PyTuple_GET_ITEM(args, 0);

  000b6	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR args$[rsp]
  000be	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  000c2	48 89 44 24 38	 mov	 QWORD PTR self$[rsp], rax

; 275  :     if (!PyType_Check(self)) {

  000c7	48 8b 44 24 38	 mov	 rax, QWORD PTR self$[rsp]
  000cc	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000d0	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000d6	25 00 00 00 80	 and	 eax, -2147483648	; ffffffff80000000H
  000db	85 c0		 test	 eax, eax
  000dd	75 6c		 jne	 SHORT $LN4@classmetho@2

; 276  :         PyErr_Format(PyExc_TypeError,
; 277  :                      "descriptor '%V' requires a type "
; 278  :                      "but received a '%.100s'",
; 279  :                      descr_name((PyDescrObject *)descr), "?",
; 280  :                      PyDescr_TYPE(descr)->tp_name,
; 281  :                      self->ob_type->tp_name);

  000df	48 8b 44 24 38	 mov	 rax, QWORD PTR self$[rsp]
  000e4	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000e8	48 89 44 24 58	 mov	 QWORD PTR tv171[rsp], rax
  000ed	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR descr$[rsp]
  000f5	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  000f9	48 89 4c 24 60	 mov	 QWORD PTR tv170[rsp], rcx
  000fe	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR descr$[rsp]
  00106	e8 00 00 00 00	 call	 descr_name
  0010b	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tv171[rsp]
  00110	48 8b 49 70	 mov	 rcx, QWORD PTR [rcx+112]
  00114	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00119	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tv170[rsp]
  0011e	48 8b 49 70	 mov	 rcx, QWORD PTR [rcx+112]
  00122	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00127	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??_C@_01OGPIMHDM@?$DP?$AA@
  0012e	4c 8b c0	 mov	 r8, rax
  00131	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DI@LFNCLFNC@descriptor?5?8?$CFV?8?5requires?5a?5type?5@
  00138	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0013f	e8 00 00 00 00	 call	 PyErr_Format

; 282  :         return NULL;

  00144	33 c0		 xor	 eax, eax
  00146	e9 26 01 00 00	 jmp	 $LN6@classmetho@2
$LN4@classmetho@2:

; 283  :     }
; 284  :     if (!PyType_IsSubtype((PyTypeObject *)self, PyDescr_TYPE(descr))) {

  0014b	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR descr$[rsp]
  00153	48 8b 50 60	 mov	 rdx, QWORD PTR [rax+96]
  00157	48 8b 4c 24 38	 mov	 rcx, QWORD PTR self$[rsp]
  0015c	e8 00 00 00 00	 call	 PyType_IsSubtype
  00161	85 c0		 test	 eax, eax
  00163	75 6c		 jne	 SHORT $LN3@classmetho@2

; 285  :         PyErr_Format(PyExc_TypeError,
; 286  :                      "descriptor '%V' "
; 287  :                      "requires a subtype of '%.100s' "
; 288  :                      "but received '%.100s",
; 289  :                      descr_name((PyDescrObject *)descr), "?",
; 290  :                      PyDescr_TYPE(descr)->tp_name,
; 291  :                      self->ob_type->tp_name);

  00165	48 8b 44 24 38	 mov	 rax, QWORD PTR self$[rsp]
  0016a	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0016e	48 89 44 24 68	 mov	 QWORD PTR tv169[rsp], rax
  00173	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR descr$[rsp]
  0017b	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  0017f	48 89 4c 24 70	 mov	 QWORD PTR tv168[rsp], rcx
  00184	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR descr$[rsp]
  0018c	e8 00 00 00 00	 call	 descr_name
  00191	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tv169[rsp]
  00196	48 8b 49 70	 mov	 rcx, QWORD PTR [rcx+112]
  0019a	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0019f	48 8b 4c 24 70	 mov	 rcx, QWORD PTR tv168[rsp]
  001a4	48 8b 49 70	 mov	 rcx, QWORD PTR [rcx+112]
  001a8	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  001ad	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??_C@_01OGPIMHDM@?$DP?$AA@
  001b4	4c 8b c0	 mov	 r8, rax
  001b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0EE@BFJLCEKG@descriptor?5?8?$CFV?8?5requires?5a?5subty@
  001be	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  001c5	e8 00 00 00 00	 call	 PyErr_Format

; 292  :         return NULL;

  001ca	33 c0		 xor	 eax, eax
  001cc	e9 a0 00 00 00	 jmp	 $LN6@classmetho@2
$LN3@classmetho@2:

; 293  :     }
; 294  : 
; 295  :     func = PyCFunction_New(descr->d_method, self);

  001d1	45 33 c0	 xor	 r8d, r8d
  001d4	48 8b 54 24 38	 mov	 rdx, QWORD PTR self$[rsp]
  001d9	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR descr$[rsp]
  001e1	48 8b 88 80 00
	00 00		 mov	 rcx, QWORD PTR [rax+128]
  001e8	e8 00 00 00 00	 call	 PyCFunction_NewEx
  001ed	48 89 44 24 48	 mov	 QWORD PTR func$[rsp], rax

; 296  :     if (func == NULL)

  001f2	48 83 7c 24 48
	00		 cmp	 QWORD PTR func$[rsp], 0
  001f8	75 04		 jne	 SHORT $LN2@classmetho@2

; 297  :         return NULL;

  001fa	33 c0		 xor	 eax, eax
  001fc	eb 73		 jmp	 SHORT $LN6@classmetho@2
$LN2@classmetho@2:

; 298  :     args = PyTuple_GetSlice(args, 1, argc);

  001fe	4c 8b 44 24 30	 mov	 r8, QWORD PTR argc$[rsp]
  00203	ba 01 00 00 00	 mov	 edx, 1
  00208	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  00210	e8 00 00 00 00	 call	 PyTuple_GetSlice
  00215	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR args$[rsp], rax

; 299  :     if (args == NULL) {

  0021d	48 83 bc 24 98
	00 00 00 00	 cmp	 QWORD PTR args$[rsp], 0
  00226	75 0e		 jne	 SHORT $LN1@classmetho@2

; 300  :         Py_DECREF(func);

  00228	48 8b 4c 24 48	 mov	 rcx, QWORD PTR func$[rsp]
  0022d	e8 00 00 00 00	 call	 _Py_DecRef

; 301  :         return NULL;

  00232	33 c0		 xor	 eax, eax
  00234	eb 3b		 jmp	 SHORT $LN6@classmetho@2
$LN1@classmetho@2:

; 302  :     }
; 303  :     result = PyEval_CallObjectWithKeywords(func, args, kwds);

  00236	4c 8b 84 24 a0
	00 00 00	 mov	 r8, QWORD PTR kwds$[rsp]
  0023e	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR args$[rsp]
  00246	48 8b 4c 24 48	 mov	 rcx, QWORD PTR func$[rsp]
  0024b	e8 00 00 00 00	 call	 PyEval_CallObjectWithKeywords
  00250	48 89 44 24 40	 mov	 QWORD PTR result$[rsp], rax

; 304  :     Py_DECREF(func);

  00255	48 8b 4c 24 48	 mov	 rcx, QWORD PTR func$[rsp]
  0025a	e8 00 00 00 00	 call	 _Py_DecRef

; 305  :     Py_DECREF(args);

  0025f	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  00267	e8 00 00 00 00	 call	 _Py_DecRef

; 306  :     return result;

  0026c	48 8b 44 24 40	 mov	 rax, QWORD PTR result$[rsp]
$LN6@classmetho@2:

; 307  : }

  00271	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  00278	c3		 ret	 0
classmethoddescr_call ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$wrapperdescr_call DD imagerel wrapperdescr_call
	DD	imagerel wrapperdescr_call+489
	DD	imagerel $unwind$wrapperdescr_call
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$wrapperdescr_call DD 011301H
	DD	0e213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT wrapperdescr_call
_TEXT	SEGMENT
argc$ = 48
self$ = 56
result$ = 64
func$ = 72
tv153 = 80
tv152 = 88
tv151 = 96
descr$ = 128
args$ = 136
kwds$ = 144
wrapperdescr_call PROC					; COMDAT

; 311  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 312  :     Py_ssize_t argc;
; 313  :     PyObject *self, *func, *result;
; 314  : 
; 315  :     /* Make sure that the first argument is acceptable as 'self' */
; 316  :     assert(PyTuple_Check(args));

  00013	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR args$[rsp]
  0001b	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0001f	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00025	25 00 00 00 04	 and	 eax, 67108864		; 04000000H
  0002a	85 c0		 test	 eax, eax
  0002c	75 1c		 jne	 SHORT $LN7@wrapperdes@2
  0002e	41 b8 3c 01 00
	00		 mov	 r8d, 316		; 0000013cH
  00034	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DC@OKEDMLJ@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAc?$AAr?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  0003b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CI@KAJNBGPM@?$AAP?$AAy?$AAT?$AAu?$AAp?$AAl?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAa?$AAr?$AAg?$AAs?$AA?$CJ?$AA?$AA@
  00042	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00048	33 c0		 xor	 eax, eax
$LN7@wrapperdes@2:

; 317  :     argc = PyTuple_GET_SIZE(args);

  0004a	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR args$[rsp]
  00052	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00056	48 89 44 24 30	 mov	 QWORD PTR argc$[rsp], rax

; 318  :     if (argc < 1) {

  0005b	48 83 7c 24 30
	01		 cmp	 QWORD PTR argc$[rsp], 1
  00061	7d 50		 jge	 SHORT $LN4@wrapperdes@2

; 319  :         PyErr_Format(PyExc_TypeError,
; 320  :                      "descriptor '%V' of '%.100s' "
; 321  :                      "object needs an argument",
; 322  :                      descr_name((PyDescrObject *)descr), "?",
; 323  :                      PyDescr_TYPE(descr)->tp_name);

  00063	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR descr$[rsp]
  0006b	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0006f	48 89 44 24 50	 mov	 QWORD PTR tv153[rsp], rax
  00074	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR descr$[rsp]
  0007c	e8 00 00 00 00	 call	 descr_name
  00081	48 8b 4c 24 50	 mov	 rcx, QWORD PTR tv153[rsp]
  00086	48 8b 49 70	 mov	 rcx, QWORD PTR [rcx+112]
  0008a	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0008f	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??_C@_01OGPIMHDM@?$DP?$AA@
  00096	4c 8b c0	 mov	 r8, rax
  00099	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DF@DNBKEIFF@descriptor?5?8?$CFV?8?5of?5?8?$CF?4100s?8?5obje@
  000a0	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000a7	e8 00 00 00 00	 call	 PyErr_Format

; 324  :         return NULL;

  000ac	33 c0		 xor	 eax, eax
  000ae	e9 31 01 00 00	 jmp	 $LN5@wrapperdes@2
$LN4@wrapperdes@2:

; 325  :     }
; 326  :     self = PyTuple_GET_ITEM(args, 0);

  000b3	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR args$[rsp]
  000bb	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  000bf	48 89 44 24 38	 mov	 QWORD PTR self$[rsp], rax

; 327  :     if (!_PyObject_RealIsSubclass((PyObject *)Py_TYPE(self),
; 328  :                                   (PyObject *)PyDescr_TYPE(descr))) {

  000c4	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR descr$[rsp]
  000cc	48 8b 50 60	 mov	 rdx, QWORD PTR [rax+96]
  000d0	48 8b 44 24 38	 mov	 rax, QWORD PTR self$[rsp]
  000d5	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  000d9	e8 00 00 00 00	 call	 _PyObject_RealIsSubclass
  000de	85 c0		 test	 eax, eax
  000e0	75 6c		 jne	 SHORT $LN3@wrapperdes@2

; 329  :         PyErr_Format(PyExc_TypeError,
; 330  :                      "descriptor '%V' "
; 331  :                      "requires a '%.100s' object "
; 332  :                      "but received a '%.100s'",
; 333  :                      descr_name((PyDescrObject *)descr), "?",
; 334  :                      PyDescr_TYPE(descr)->tp_name,
; 335  :                      self->ob_type->tp_name);

  000e2	48 8b 44 24 38	 mov	 rax, QWORD PTR self$[rsp]
  000e7	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000eb	48 89 44 24 58	 mov	 QWORD PTR tv152[rsp], rax
  000f0	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR descr$[rsp]
  000f8	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  000fc	48 89 4c 24 60	 mov	 QWORD PTR tv151[rsp], rcx
  00101	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR descr$[rsp]
  00109	e8 00 00 00 00	 call	 descr_name
  0010e	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tv152[rsp]
  00113	48 8b 49 70	 mov	 rcx, QWORD PTR [rcx+112]
  00117	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0011c	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tv151[rsp]
  00121	48 8b 49 70	 mov	 rcx, QWORD PTR [rcx+112]
  00125	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0012a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??_C@_01OGPIMHDM@?$DP?$AA@
  00131	4c 8b c0	 mov	 r8, rax
  00134	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0ED@JEKLHGCL@descriptor?5?8?$CFV?8?5requires?5a?5?8?$CF?410@
  0013b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00142	e8 00 00 00 00	 call	 PyErr_Format

; 336  :         return NULL;

  00147	33 c0		 xor	 eax, eax
  00149	e9 96 00 00 00	 jmp	 $LN5@wrapperdes@2
$LN3@wrapperdes@2:

; 337  :     }
; 338  : 
; 339  :     func = PyWrapper_New((PyObject *)descr, self);

  0014e	48 8b 54 24 38	 mov	 rdx, QWORD PTR self$[rsp]
  00153	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR descr$[rsp]
  0015b	e8 00 00 00 00	 call	 PyWrapper_New
  00160	48 89 44 24 48	 mov	 QWORD PTR func$[rsp], rax

; 340  :     if (func == NULL)

  00165	48 83 7c 24 48
	00		 cmp	 QWORD PTR func$[rsp], 0
  0016b	75 04		 jne	 SHORT $LN2@wrapperdes@2

; 341  :         return NULL;

  0016d	33 c0		 xor	 eax, eax
  0016f	eb 73		 jmp	 SHORT $LN5@wrapperdes@2
$LN2@wrapperdes@2:

; 342  :     args = PyTuple_GetSlice(args, 1, argc);

  00171	4c 8b 44 24 30	 mov	 r8, QWORD PTR argc$[rsp]
  00176	ba 01 00 00 00	 mov	 edx, 1
  0017b	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  00183	e8 00 00 00 00	 call	 PyTuple_GetSlice
  00188	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR args$[rsp], rax

; 343  :     if (args == NULL) {

  00190	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR args$[rsp], 0
  00199	75 0e		 jne	 SHORT $LN1@wrapperdes@2

; 344  :         Py_DECREF(func);

  0019b	48 8b 4c 24 48	 mov	 rcx, QWORD PTR func$[rsp]
  001a0	e8 00 00 00 00	 call	 _Py_DecRef

; 345  :         return NULL;

  001a5	33 c0		 xor	 eax, eax
  001a7	eb 3b		 jmp	 SHORT $LN5@wrapperdes@2
$LN1@wrapperdes@2:

; 346  :     }
; 347  :     result = PyEval_CallObjectWithKeywords(func, args, kwds);

  001a9	4c 8b 84 24 90
	00 00 00	 mov	 r8, QWORD PTR kwds$[rsp]
  001b1	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR args$[rsp]
  001b9	48 8b 4c 24 48	 mov	 rcx, QWORD PTR func$[rsp]
  001be	e8 00 00 00 00	 call	 PyEval_CallObjectWithKeywords
  001c3	48 89 44 24 40	 mov	 QWORD PTR result$[rsp], rax

; 348  :     Py_DECREF(args);

  001c8	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  001d0	e8 00 00 00 00	 call	 _Py_DecRef

; 349  :     Py_DECREF(func);

  001d5	48 8b 4c 24 48	 mov	 rcx, QWORD PTR func$[rsp]
  001da	e8 00 00 00 00	 call	 _Py_DecRef

; 350  :     return result;

  001df	48 8b 44 24 40	 mov	 rax, QWORD PTR result$[rsp]
$LN5@wrapperdes@2:

; 351  : }

  001e4	48 83 c4 78	 add	 rsp, 120		; 00000078H
  001e8	c3		 ret	 0
wrapperdescr_call ENDP
_TEXT	ENDS
EXTRN	PyUnicode_FromString:PROC
EXTRN	_Py_NoneStruct:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$method_get_doc DD imagerel method_get_doc
	DD	imagerel method_get_doc+80
	DD	imagerel $unwind$method_get_doc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$method_get_doc DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT method_get_doc
_TEXT	SEGMENT
descr$ = 48
closure$ = 56
method_get_doc PROC					; COMDAT

; 355  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 356  :     if (descr->d_method->ml_doc == NULL) {

  0000e	48 8b 44 24 30	 mov	 rax, QWORD PTR descr$[rsp]
  00013	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  0001a	48 83 78 18 00	 cmp	 QWORD PTR [rax+24], 0
  0001f	75 15		 jne	 SHORT $LN1@method_get@2

; 357  :         Py_INCREF(Py_None);

  00021	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00028	e8 00 00 00 00	 call	 _Py_IncRef

; 358  :         return Py_None;

  0002d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00034	eb 15		 jmp	 SHORT $LN2@method_get@2
$LN1@method_get@2:

; 359  :     }
; 360  :     return PyUnicode_FromString(descr->d_method->ml_doc);

  00036	48 8b 44 24 30	 mov	 rax, QWORD PTR descr$[rsp]
  0003b	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  00042	48 8b 48 18	 mov	 rcx, QWORD PTR [rax+24]
  00046	e8 00 00 00 00	 call	 PyUnicode_FromString
$LN2@method_get@2:

; 361  : }

  0004b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004f	c3		 ret	 0
method_get_doc ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$descr_get_qualname DD imagerel descr_get_qualname
	DD	imagerel descr_get_qualname+86
	DD	imagerel $unwind$descr_get_qualname
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$descr_get_qualname DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT descr_get_qualname
_TEXT	SEGMENT
descr$ = 48
descr_get_qualname PROC					; COMDAT

; 394  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 395  :     if (descr->d_qualname == NULL)

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR descr$[rsp]
  0000e	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  00013	75 13		 jne	 SHORT $LN5@descr_get_

; 396  :         descr->d_qualname = calculate_qualname(descr);

  00015	48 8b 4c 24 30	 mov	 rcx, QWORD PTR descr$[rsp]
  0001a	e8 00 00 00 00	 call	 calculate_qualname
  0001f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR descr$[rsp]
  00024	48 89 41 70	 mov	 QWORD PTR [rcx+112], rax
$LN5@descr_get_:
$LN4@descr_get_:

; 397  :     Py_XINCREF(descr->d_qualname);

  00028	48 8b 44 24 30	 mov	 rax, QWORD PTR descr$[rsp]
  0002d	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  00032	74 0e		 je	 SHORT $LN1@descr_get_
  00034	48 8b 44 24 30	 mov	 rax, QWORD PTR descr$[rsp]
  00039	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  0003d	e8 00 00 00 00	 call	 _Py_IncRef
$LN1@descr_get_:
  00042	33 c0		 xor	 eax, eax
  00044	85 c0		 test	 eax, eax
  00046	75 e0		 jne	 SHORT $LN4@descr_get_

; 398  :     return descr->d_qualname;

  00048	48 8b 44 24 30	 mov	 rax, QWORD PTR descr$[rsp]
  0004d	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]

; 399  : }

  00051	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00055	c3		 ret	 0
descr_get_qualname ENDP
_TEXT	ENDS
PUBLIC	??_C@_05IJBCCNFD@?$CFS?4?$CFS?$AA@		; `string'
PUBLIC	??_C@_0DP@KAFCPPEK@?$DMdescriptor?$DO?4__objclass__?4__qual@ ; `string'
PUBLIC	??_C@_0CO@HHBFIHEH@?$DMdescriptor?$DO?4__name__?5is?5not?5a?5u@ ; `string'
EXTRN	_PyObject_GetAttrId:PROC
EXTRN	PyErr_SetString:PROC
EXTRN	_tls_index:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$calculate_qualname DD imagerel calculate_qualname
	DD	imagerel calculate_qualname+257
	DD	imagerel $unwind$calculate_qualname
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$calculate_qualname DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_05IJBCCNFD@?$CFS?4?$CFS?$AA@
CONST	SEGMENT
??_C@_05IJBCCNFD@?$CFS?4?$CFS?$AA@ DB '%S.%S', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DP@KAFCPPEK@?$DMdescriptor?$DO?4__objclass__?4__qual@
CONST	SEGMENT
??_C@_0DP@KAFCPPEK@?$DMdescriptor?$DO?4__objclass__?4__qual@ DB '<descrip'
	DB	'tor>.__objclass__.__qualname__ is not a unicode object', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@HHBFIHEH@?$DMdescriptor?$DO?4__name__?5is?5not?5a?5u@
CONST	SEGMENT
??_C@_0CO@HHBFIHEH@?$DMdescriptor?$DO?4__name__?5is?5not?5a?5u@ DB '<desc'
	DB	'riptor>.__name__ is not a unicode object', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT calculate_qualname
_TEXT	SEGMENT
res$ = 32
type_qualname$ = 40
descr$ = 64
calculate_qualname PROC					; COMDAT

; 365  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 366  :     PyObject *type_qualname, *res;
; 367  :     _Py_IDENTIFIER(__qualname__);
; 368  : 
; 369  :     if (descr->d_name == NULL || !PyUnicode_Check(descr->d_name)) {

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR descr$[rsp]
  0000e	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  00013	74 1c		 je	 SHORT $LN7@calculate_
  00015	48 8b 44 24 40	 mov	 rax, QWORD PTR descr$[rsp]
  0001a	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0001e	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00022	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00028	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0002d	85 c0		 test	 eax, eax
  0002f	75 1a		 jne	 SHORT $LN8@calculate_
$LN7@calculate_:

; 370  :         PyErr_SetString(PyExc_TypeError,
; 371  :                         "<descriptor>.__name__ is not a unicode object");

  00031	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CO@HHBFIHEH@?$DMdescriptor?$DO?4__name__?5is?5not?5a?5u@
  00038	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0003f	e8 00 00 00 00	 call	 PyErr_SetString

; 372  :         return NULL;

  00044	33 c0		 xor	 eax, eax
  00046	e9 b1 00 00 00	 jmp	 $LN9@calculate_
$LN8@calculate_:

; 373  :     }
; 374  : 
; 375  :     type_qualname = _PyObject_GetAttrId((PyObject *)descr->d_type,
; 376  :                                         &PyId___qualname__);

  0004b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId___qualname__@?1??calculate_qualname@@9@9
  00050	8b c0		 mov	 eax, eax
  00052	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00058	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00061	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00065	48 8b d0	 mov	 rdx, rax
  00068	48 8b 44 24 40	 mov	 rax, QWORD PTR descr$[rsp]
  0006d	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00071	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00076	48 89 44 24 28	 mov	 QWORD PTR type_qualname$[rsp], rax

; 377  :     if (type_qualname == NULL)

  0007b	48 83 7c 24 28
	00		 cmp	 QWORD PTR type_qualname$[rsp], 0
  00081	75 04		 jne	 SHORT $LN6@calculate_

; 378  :         return NULL;

  00083	33 c0		 xor	 eax, eax
  00085	eb 75		 jmp	 SHORT $LN9@calculate_
$LN6@calculate_:

; 379  : 
; 380  :     if (!PyUnicode_Check(type_qualname)) {

  00087	48 8b 44 24 28	 mov	 rax, QWORD PTR type_qualname$[rsp]
  0008c	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00090	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00096	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0009b	85 c0		 test	 eax, eax
  0009d	75 2f		 jne	 SHORT $LN5@calculate_

; 381  :         PyErr_SetString(PyExc_TypeError, "<descriptor>.__objclass__."
; 382  :                         "__qualname__ is not a unicode object");

  0009f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DP@KAFCPPEK@?$DMdescriptor?$DO?4__objclass__?4__qual@
  000a6	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000ad	e8 00 00 00 00	 call	 PyErr_SetString
$LN4@calculate_:

; 383  :         Py_XDECREF(type_qualname);

  000b2	48 83 7c 24 28
	00		 cmp	 QWORD PTR type_qualname$[rsp], 0
  000b8	74 0a		 je	 SHORT $LN1@calculate_
  000ba	48 8b 4c 24 28	 mov	 rcx, QWORD PTR type_qualname$[rsp]
  000bf	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@calculate_:
  000c4	33 c0		 xor	 eax, eax
  000c6	85 c0		 test	 eax, eax
  000c8	75 e8		 jne	 SHORT $LN4@calculate_

; 384  :         return NULL;

  000ca	33 c0		 xor	 eax, eax
  000cc	eb 2e		 jmp	 SHORT $LN9@calculate_
$LN5@calculate_:

; 385  :     }
; 386  : 
; 387  :     res = PyUnicode_FromFormat("%S.%S", type_qualname, descr->d_name);

  000ce	48 8b 44 24 40	 mov	 rax, QWORD PTR descr$[rsp]
  000d3	4c 8b 40 68	 mov	 r8, QWORD PTR [rax+104]
  000d7	48 8b 54 24 28	 mov	 rdx, QWORD PTR type_qualname$[rsp]
  000dc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05IJBCCNFD@?$CFS?4?$CFS?$AA@
  000e3	e8 00 00 00 00	 call	 PyUnicode_FromFormat
  000e8	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax

; 388  :     Py_DECREF(type_qualname);

  000ed	48 8b 4c 24 28	 mov	 rcx, QWORD PTR type_qualname$[rsp]
  000f2	e8 00 00 00 00	 call	 _Py_DecRef

; 389  :     return res;

  000f7	48 8b 44 24 20	 mov	 rax, QWORD PTR res$[rsp]
$LN9@calculate_:

; 390  : }

  000fc	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00100	c3		 ret	 0
calculate_qualname ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$member_get_doc DD imagerel member_get_doc
	DD	imagerel member_get_doc+80
	DD	imagerel $unwind$member_get_doc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$member_get_doc DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT member_get_doc
_TEXT	SEGMENT
descr$ = 48
closure$ = 56
member_get_doc PROC					; COMDAT

; 415  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 416  :     if (descr->d_member->doc == NULL) {

  0000e	48 8b 44 24 30	 mov	 rax, QWORD PTR descr$[rsp]
  00013	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  0001a	48 83 78 20 00	 cmp	 QWORD PTR [rax+32], 0
  0001f	75 15		 jne	 SHORT $LN1@member_get@2

; 417  :         Py_INCREF(Py_None);

  00021	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00028	e8 00 00 00 00	 call	 _Py_IncRef

; 418  :         return Py_None;

  0002d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00034	eb 15		 jmp	 SHORT $LN2@member_get@2
$LN1@member_get@2:

; 419  :     }
; 420  :     return PyUnicode_FromString(descr->d_member->doc);

  00036	48 8b 44 24 30	 mov	 rax, QWORD PTR descr$[rsp]
  0003b	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  00042	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  00046	e8 00 00 00 00	 call	 PyUnicode_FromString
$LN2@member_get@2:

; 421  : }

  0004b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004f	c3		 ret	 0
member_get_doc ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$getset_get_doc DD imagerel getset_get_doc
	DD	imagerel getset_get_doc+80
	DD	imagerel $unwind$getset_get_doc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$getset_get_doc DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT getset_get_doc
_TEXT	SEGMENT
descr$ = 48
closure$ = 56
getset_get_doc PROC					; COMDAT

; 431  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 432  :     if (descr->d_getset->doc == NULL) {

  0000e	48 8b 44 24 30	 mov	 rax, QWORD PTR descr$[rsp]
  00013	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  0001a	48 83 78 18 00	 cmp	 QWORD PTR [rax+24], 0
  0001f	75 15		 jne	 SHORT $LN1@getset_get@2

; 433  :         Py_INCREF(Py_None);

  00021	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00028	e8 00 00 00 00	 call	 _Py_IncRef

; 434  :         return Py_None;

  0002d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00034	eb 15		 jmp	 SHORT $LN2@getset_get@2
$LN1@getset_get@2:

; 435  :     }
; 436  :     return PyUnicode_FromString(descr->d_getset->doc);

  00036	48 8b 44 24 30	 mov	 rax, QWORD PTR descr$[rsp]
  0003b	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  00042	48 8b 48 18	 mov	 rcx, QWORD PTR [rax+24]
  00046	e8 00 00 00 00	 call	 PyUnicode_FromString
$LN2@getset_get@2:

; 437  : }

  0004b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004f	c3		 ret	 0
getset_get_doc ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$wrapperdescr_get_doc DD imagerel wrapperdescr_get_doc
	DD	imagerel wrapperdescr_get_doc+80
	DD	imagerel $unwind$wrapperdescr_get_doc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$wrapperdescr_get_doc DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT wrapperdescr_get_doc
_TEXT	SEGMENT
descr$ = 48
closure$ = 56
wrapperdescr_get_doc PROC				; COMDAT

; 447  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 448  :     if (descr->d_base->doc == NULL) {

  0000e	48 8b 44 24 30	 mov	 rax, QWORD PTR descr$[rsp]
  00013	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  0001a	48 83 78 20 00	 cmp	 QWORD PTR [rax+32], 0
  0001f	75 15		 jne	 SHORT $LN1@wrapperdes@3

; 449  :         Py_INCREF(Py_None);

  00021	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00028	e8 00 00 00 00	 call	 _Py_IncRef

; 450  :         return Py_None;

  0002d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00034	eb 15		 jmp	 SHORT $LN2@wrapperdes@3
$LN1@wrapperdes@3:

; 451  :     }
; 452  :     return PyUnicode_FromString(descr->d_base->doc);

  00036	48 8b 44 24 30	 mov	 rax, QWORD PTR descr$[rsp]
  0003b	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  00042	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  00046	e8 00 00 00 00	 call	 PyUnicode_FromString
$LN2@wrapperdes@3:

; 453  : }

  0004b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004f	c3		 ret	 0
wrapperdescr_get_doc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0P@DDOKNBOB@descr_traverse?$AA@		; `string'
EXTRN	_PyParallel_ContextGuardFailure:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$descr_traverse DD imagerel descr_traverse
	DD	imagerel descr_traverse+126
	DD	imagerel $unwind$descr_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$descr_traverse DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT ??_C@_0P@DDOKNBOB@descr_traverse?$AA@
CONST	SEGMENT
??_C@_0P@DDOKNBOB@descr_traverse?$AA@ DB 'descr_traverse', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT descr_traverse
_TEXT	SEGMENT
descr$ = 32
vret$20788 = 40
self$ = 64
visit$ = 72
arg$ = 80
descr_traverse PROC					; COMDAT

; 463  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 464  :     PyDescrObject *descr = (PyDescrObject *)self;

  00013	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00018	48 89 44 24 20	 mov	 QWORD PTR descr$[rsp], rax
$LN6@descr_trav:

; 465  :     Py_VISIT(descr->d_type);

  0001d	e8 00 00 00 00	 call	 _Py_PXCTX
  00022	85 c0		 test	 eax, eax
  00024	74 1c		 je	 SHORT $LN3@descr_trav
  00026	45 33 c9	 xor	 r9d, r9d
  00029	41 b8 d1 01 00
	00		 mov	 r8d, 465		; 000001d1H
  0002f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@CMLMJMOL@?4?4?2Objects?2descrobject?4c?$AA@
  00036	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@DDOKNBOB@descr_traverse?$AA@
  0003d	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@descr_trav:
  00042	48 8b 44 24 20	 mov	 rax, QWORD PTR descr$[rsp]
  00047	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  0004c	74 23		 je	 SHORT $LN2@descr_trav
  0004e	48 8b 54 24 50	 mov	 rdx, QWORD PTR arg$[rsp]
  00053	48 8b 44 24 20	 mov	 rax, QWORD PTR descr$[rsp]
  00058	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  0005c	ff 54 24 48	 call	 QWORD PTR visit$[rsp]
  00060	89 44 24 28	 mov	 DWORD PTR vret$20788[rsp], eax
  00064	83 7c 24 28 00	 cmp	 DWORD PTR vret$20788[rsp], 0
  00069	74 06		 je	 SHORT $LN1@descr_trav
  0006b	8b 44 24 28	 mov	 eax, DWORD PTR vret$20788[rsp]
  0006f	eb 08		 jmp	 SHORT $LN7@descr_trav
$LN1@descr_trav:
$LN2@descr_trav:
  00071	33 c0		 xor	 eax, eax
  00073	85 c0		 test	 eax, eax
  00075	75 a6		 jne	 SHORT $LN6@descr_trav

; 466  :     return 0;

  00077	33 c0		 xor	 eax, eax
$LN7@descr_trav:

; 467  : }

  00079	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0007d	c3		 ret	 0
descr_traverse ENDP
_TEXT	ENDS
PUBLIC	PyDescr_NewMethod
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyDescr_NewMethod DD imagerel $LN4
	DD	imagerel $LN4+79
	DD	imagerel $unwind$PyDescr_NewMethod
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyDescr_NewMethod DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyDescr_NewMethod
_TEXT	SEGMENT
descr$ = 32
type$ = 64
method$ = 72
PyDescr_NewMethod PROC					; COMDAT

; 678  : {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 679  :     PyMethodDescrObject *descr;
; 680  : 
; 681  :     descr = (PyMethodDescrObject *)descr_new(&PyMethodDescr_Type,
; 682  :                                              type, method->ml_name);

  0000e	48 8b 44 24 48	 mov	 rax, QWORD PTR method$[rsp]
  00013	4c 8b 00	 mov	 r8, QWORD PTR [rax]
  00016	48 8b 54 24 40	 mov	 rdx, QWORD PTR type$[rsp]
  0001b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyMethodDescr_Type
  00022	e8 00 00 00 00	 call	 descr_new
  00027	48 89 44 24 20	 mov	 QWORD PTR descr$[rsp], rax

; 683  :     if (descr != NULL)

  0002c	48 83 7c 24 20
	00		 cmp	 QWORD PTR descr$[rsp], 0
  00032	74 11		 je	 SHORT $LN1@PyDescr_Ne

; 684  :         descr->d_method = method;

  00034	48 8b 44 24 20	 mov	 rax, QWORD PTR descr$[rsp]
  00039	48 8b 4c 24 48	 mov	 rcx, QWORD PTR method$[rsp]
  0003e	48 89 88 80 00
	00 00		 mov	 QWORD PTR [rax+128], rcx
$LN1@PyDescr_Ne:

; 685  :     return (PyObject *)descr;

  00045	48 8b 44 24 20	 mov	 rax, QWORD PTR descr$[rsp]

; 686  : }

  0004a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004e	c3		 ret	 0
PyDescr_NewMethod ENDP
_TEXT	ENDS
EXTRN	PyUnicode_InternFromString:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$descr_new DD imagerel descr_new
	DD	imagerel descr_new+157
	DD	imagerel $unwind$descr_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$descr_new DD 011301H
	DD	06213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT descr_new
_TEXT	SEGMENT
descr$ = 32
descrtype$ = 64
type$ = 72
name$ = 80
descr_new PROC						; COMDAT

; 657  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 658  :     PyDescrObject *descr;
; 659  : 
; 660  :     descr = (PyDescrObject *)PyType_GenericAlloc(descrtype, 0);

  00013	33 d2		 xor	 edx, edx
  00015	48 8b 4c 24 40	 mov	 rcx, QWORD PTR descrtype$[rsp]
  0001a	e8 00 00 00 00	 call	 PyType_GenericAlloc
  0001f	48 89 44 24 20	 mov	 QWORD PTR descr$[rsp], rax

; 661  :     if (descr != NULL) {

  00024	48 83 7c 24 20
	00		 cmp	 QWORD PTR descr$[rsp], 0
  0002a	74 67		 je	 SHORT $LN7@descr_new
$LN6@descr_new:

; 662  :         Py_XINCREF(type);

  0002c	48 83 7c 24 48
	00		 cmp	 QWORD PTR type$[rsp], 0
  00032	74 0a		 je	 SHORT $LN3@descr_new
  00034	48 8b 4c 24 48	 mov	 rcx, QWORD PTR type$[rsp]
  00039	e8 00 00 00 00	 call	 _Py_IncRef
$LN3@descr_new:
  0003e	33 c0		 xor	 eax, eax
  00040	85 c0		 test	 eax, eax
  00042	75 e8		 jne	 SHORT $LN6@descr_new

; 663  :         descr->d_type = type;

  00044	48 8b 44 24 20	 mov	 rax, QWORD PTR descr$[rsp]
  00049	48 8b 4c 24 48	 mov	 rcx, QWORD PTR type$[rsp]
  0004e	48 89 48 60	 mov	 QWORD PTR [rax+96], rcx

; 664  :         descr->d_name = PyUnicode_InternFromString(name);

  00052	48 8b 4c 24 50	 mov	 rcx, QWORD PTR name$[rsp]
  00057	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  0005c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR descr$[rsp]
  00061	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax

; 665  :         if (descr->d_name == NULL) {

  00065	48 8b 44 24 20	 mov	 rax, QWORD PTR descr$[rsp]
  0006a	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  0006f	75 15		 jne	 SHORT $LN2@descr_new

; 666  :             Py_DECREF(descr);

  00071	48 8b 4c 24 20	 mov	 rcx, QWORD PTR descr$[rsp]
  00076	e8 00 00 00 00	 call	 _Py_DecRef

; 667  :             descr = NULL;

  0007b	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR descr$[rsp], 0

; 668  :         }
; 669  :         else {

  00084	eb 0d		 jmp	 SHORT $LN1@descr_new
$LN2@descr_new:

; 670  :             descr->d_qualname = NULL;

  00086	48 8b 44 24 20	 mov	 rax, QWORD PTR descr$[rsp]
  0008b	48 c7 40 70 00
	00 00 00	 mov	 QWORD PTR [rax+112], 0
$LN1@descr_new:
$LN7@descr_new:

; 671  :         }
; 672  :     }
; 673  :     return descr;

  00093	48 8b 44 24 20	 mov	 rax, QWORD PTR descr$[rsp]

; 674  : }

  00098	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0009c	c3		 ret	 0
descr_new ENDP
_TEXT	ENDS
PUBLIC	PyDescr_NewClassMethod
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyDescr_NewClassMethod DD imagerel $LN4
	DD	imagerel $LN4+79
	DD	imagerel $unwind$PyDescr_NewClassMethod
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyDescr_NewClassMethod DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyDescr_NewClassMethod
_TEXT	SEGMENT
descr$ = 32
type$ = 64
method$ = 72
PyDescr_NewClassMethod PROC				; COMDAT

; 690  : {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 691  :     PyMethodDescrObject *descr;
; 692  : 
; 693  :     descr = (PyMethodDescrObject *)descr_new(&PyClassMethodDescr_Type,
; 694  :                                              type, method->ml_name);

  0000e	48 8b 44 24 48	 mov	 rax, QWORD PTR method$[rsp]
  00013	4c 8b 00	 mov	 r8, QWORD PTR [rax]
  00016	48 8b 54 24 40	 mov	 rdx, QWORD PTR type$[rsp]
  0001b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyClassMethodDescr_Type
  00022	e8 00 00 00 00	 call	 descr_new
  00027	48 89 44 24 20	 mov	 QWORD PTR descr$[rsp], rax

; 695  :     if (descr != NULL)

  0002c	48 83 7c 24 20
	00		 cmp	 QWORD PTR descr$[rsp], 0
  00032	74 11		 je	 SHORT $LN1@PyDescr_Ne@2

; 696  :         descr->d_method = method;

  00034	48 8b 44 24 20	 mov	 rax, QWORD PTR descr$[rsp]
  00039	48 8b 4c 24 48	 mov	 rcx, QWORD PTR method$[rsp]
  0003e	48 89 88 80 00
	00 00		 mov	 QWORD PTR [rax+128], rcx
$LN1@PyDescr_Ne@2:

; 697  :     return (PyObject *)descr;

  00045	48 8b 44 24 20	 mov	 rax, QWORD PTR descr$[rsp]

; 698  : }

  0004a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004e	c3		 ret	 0
PyDescr_NewClassMethod ENDP
_TEXT	ENDS
PUBLIC	PyDescr_NewMember
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyDescr_NewMember DD imagerel $LN4
	DD	imagerel $LN4+79
	DD	imagerel $unwind$PyDescr_NewMember
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyDescr_NewMember DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyDescr_NewMember
_TEXT	SEGMENT
descr$ = 32
type$ = 64
member$ = 72
PyDescr_NewMember PROC					; COMDAT

; 702  : {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 703  :     PyMemberDescrObject *descr;
; 704  : 
; 705  :     descr = (PyMemberDescrObject *)descr_new(&PyMemberDescr_Type,
; 706  :                                              type, member->name);

  0000e	48 8b 44 24 48	 mov	 rax, QWORD PTR member$[rsp]
  00013	4c 8b 00	 mov	 r8, QWORD PTR [rax]
  00016	48 8b 54 24 40	 mov	 rdx, QWORD PTR type$[rsp]
  0001b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyMemberDescr_Type
  00022	e8 00 00 00 00	 call	 descr_new
  00027	48 89 44 24 20	 mov	 QWORD PTR descr$[rsp], rax

; 707  :     if (descr != NULL)

  0002c	48 83 7c 24 20
	00		 cmp	 QWORD PTR descr$[rsp], 0
  00032	74 11		 je	 SHORT $LN1@PyDescr_Ne@3

; 708  :         descr->d_member = member;

  00034	48 8b 44 24 20	 mov	 rax, QWORD PTR descr$[rsp]
  00039	48 8b 4c 24 48	 mov	 rcx, QWORD PTR member$[rsp]
  0003e	48 89 88 80 00
	00 00		 mov	 QWORD PTR [rax+128], rcx
$LN1@PyDescr_Ne@3:

; 709  :     return (PyObject *)descr;

  00045	48 8b 44 24 20	 mov	 rax, QWORD PTR descr$[rsp]

; 710  : }

  0004a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004e	c3		 ret	 0
PyDescr_NewMember ENDP
_TEXT	ENDS
PUBLIC	PyDescr_NewGetSet
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyDescr_NewGetSet DD imagerel $LN4
	DD	imagerel $LN4+79
	DD	imagerel $unwind$PyDescr_NewGetSet
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyDescr_NewGetSet DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyDescr_NewGetSet
_TEXT	SEGMENT
descr$ = 32
type$ = 64
getset$ = 72
PyDescr_NewGetSet PROC					; COMDAT

; 714  : {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 715  :     PyGetSetDescrObject *descr;
; 716  : 
; 717  :     descr = (PyGetSetDescrObject *)descr_new(&PyGetSetDescr_Type,
; 718  :                                              type, getset->name);

  0000e	48 8b 44 24 48	 mov	 rax, QWORD PTR getset$[rsp]
  00013	4c 8b 00	 mov	 r8, QWORD PTR [rax]
  00016	48 8b 54 24 40	 mov	 rdx, QWORD PTR type$[rsp]
  0001b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyGetSetDescr_Type
  00022	e8 00 00 00 00	 call	 descr_new
  00027	48 89 44 24 20	 mov	 QWORD PTR descr$[rsp], rax

; 719  :     if (descr != NULL)

  0002c	48 83 7c 24 20
	00		 cmp	 QWORD PTR descr$[rsp], 0
  00032	74 11		 je	 SHORT $LN1@PyDescr_Ne@4

; 720  :         descr->d_getset = getset;

  00034	48 8b 44 24 20	 mov	 rax, QWORD PTR descr$[rsp]
  00039	48 8b 4c 24 48	 mov	 rcx, QWORD PTR getset$[rsp]
  0003e	48 89 88 80 00
	00 00		 mov	 QWORD PTR [rax+128], rcx
$LN1@PyDescr_Ne@4:

; 721  :     return (PyObject *)descr;

  00045	48 8b 44 24 20	 mov	 rax, QWORD PTR descr$[rsp]

; 722  : }

  0004a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004e	c3		 ret	 0
PyDescr_NewGetSet ENDP
_TEXT	ENDS
PUBLIC	PyDescr_NewWrapper
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyDescr_NewWrapper DD imagerel $LN4
	DD	imagerel $LN4+101
	DD	imagerel $unwind$PyDescr_NewWrapper
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyDescr_NewWrapper DD 011301H
	DD	06213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyDescr_NewWrapper
_TEXT	SEGMENT
descr$ = 32
type$ = 64
base$ = 72
wrapped$ = 80
PyDescr_NewWrapper PROC					; COMDAT

; 726  : {

$LN4:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 727  :     PyWrapperDescrObject *descr;
; 728  : 
; 729  :     descr = (PyWrapperDescrObject *)descr_new(&PyWrapperDescr_Type,
; 730  :                                              type, base->name);

  00013	48 8b 44 24 48	 mov	 rax, QWORD PTR base$[rsp]
  00018	4c 8b 00	 mov	 r8, QWORD PTR [rax]
  0001b	48 8b 54 24 40	 mov	 rdx, QWORD PTR type$[rsp]
  00020	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyWrapperDescr_Type
  00027	e8 00 00 00 00	 call	 descr_new
  0002c	48 89 44 24 20	 mov	 QWORD PTR descr$[rsp], rax

; 731  :     if (descr != NULL) {

  00031	48 83 7c 24 20
	00		 cmp	 QWORD PTR descr$[rsp], 0
  00037	74 22		 je	 SHORT $LN1@PyDescr_Ne@5

; 732  :         descr->d_base = base;

  00039	48 8b 44 24 20	 mov	 rax, QWORD PTR descr$[rsp]
  0003e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR base$[rsp]
  00043	48 89 88 80 00
	00 00		 mov	 QWORD PTR [rax+128], rcx

; 733  :         descr->d_wrapped = wrapped;

  0004a	48 8b 44 24 20	 mov	 rax, QWORD PTR descr$[rsp]
  0004f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR wrapped$[rsp]
  00054	48 89 88 88 00
	00 00		 mov	 QWORD PTR [rax+136], rcx
$LN1@PyDescr_Ne@5:

; 734  :     }
; 735  :     return (PyObject *)descr;

  0005b	48 8b 44 24 20	 mov	 rax, QWORD PTR descr$[rsp]

; 736  : }

  00060	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00064	c3		 ret	 0
PyDescr_NewWrapper ENDP
_TEXT	ENDS
EXTRN	PyObject_Size:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$mappingproxy_len DD imagerel mappingproxy_len
	DD	imagerel mappingproxy_len+28
	DD	imagerel $unwind$mappingproxy_len
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mappingproxy_len DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT mappingproxy_len
_TEXT	SEGMENT
pp$ = 48
mappingproxy_len PROC					; COMDAT

; 751  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 752  :     return PyObject_Size(pp->mapping);

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR pp$[rsp]
  0000e	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00012	e8 00 00 00 00	 call	 PyObject_Size

; 753  : }

  00017	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001b	c3		 ret	 0
mappingproxy_len ENDP
_TEXT	ENDS
EXTRN	PyObject_GetItem:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$mappingproxy_getitem DD imagerel mappingproxy_getitem
	DD	imagerel mappingproxy_getitem+38
	DD	imagerel $unwind$mappingproxy_getitem
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mappingproxy_getitem DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT mappingproxy_getitem
_TEXT	SEGMENT
pp$ = 48
key$ = 56
mappingproxy_getitem PROC				; COMDAT

; 757  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 758  :     return PyObject_GetItem(pp->mapping, key);

  0000e	48 8b 54 24 38	 mov	 rdx, QWORD PTR key$[rsp]
  00013	48 8b 44 24 30	 mov	 rax, QWORD PTR pp$[rsp]
  00018	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  0001c	e8 00 00 00 00	 call	 PyObject_GetItem

; 759  : }

  00021	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00025	c3		 ret	 0
mappingproxy_getitem ENDP
_TEXT	ENDS
EXTRN	PySequence_Contains:PROC
EXTRN	PyDict_Contains:PROC
EXTRN	PyDict_Type:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$mappingproxy_contains DD imagerel mappingproxy_contains
	DD	imagerel mappingproxy_contains+105
	DD	imagerel $unwind$mappingproxy_contains
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mappingproxy_contains DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT mappingproxy_contains
_TEXT	SEGMENT
pp$ = 48
key$ = 56
mappingproxy_contains PROC				; COMDAT

; 769  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 770  :     if (PyDict_CheckExact(pp->mapping))

  0000e	48 8b 44 24 30	 mov	 rax, QWORD PTR pp$[rsp]
  00013	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyDict_Type
  0001e	48 39 48 58	 cmp	 QWORD PTR [rax+88], rcx
  00022	74 16		 je	 SHORT $LN2@mappingpro
  00024	48 8b 44 24 30	 mov	 rax, QWORD PTR pp$[rsp]
  00029	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0002d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyDict_Type
  00034	48 39 48 38	 cmp	 QWORD PTR [rax+56], rcx
  00038	75 17		 jne	 SHORT $LN3@mappingpro
$LN2@mappingpro:

; 771  :         return PyDict_Contains(pp->mapping, key);

  0003a	48 8b 54 24 38	 mov	 rdx, QWORD PTR key$[rsp]
  0003f	48 8b 44 24 30	 mov	 rax, QWORD PTR pp$[rsp]
  00044	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00048	e8 00 00 00 00	 call	 PyDict_Contains
  0004d	eb 15		 jmp	 SHORT $LN4@mappingpro

; 772  :     else

  0004f	eb 13		 jmp	 SHORT $LN1@mappingpro
$LN3@mappingpro:

; 773  :         return PySequence_Contains(pp->mapping, key);

  00051	48 8b 54 24 38	 mov	 rdx, QWORD PTR key$[rsp]
  00056	48 8b 44 24 30	 mov	 rax, QWORD PTR pp$[rsp]
  0005b	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  0005f	e8 00 00 00 00	 call	 PySequence_Contains
$LN1@mappingpro:
$LN4@mappingpro:

; 774  : }

  00064	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00068	c3		 ret	 0
mappingproxy_contains ENDP
_TEXT	ENDS
PUBLIC	??_C@_04DEJLHBFK@?$CIOO?$CJ?$AA@		; `string'
EXTRN	_PyObject_CallMethodId:PROC
EXTRN	PyArg_UnpackTuple:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$mappingproxy_get DD imagerel mappingproxy_get
	DD	imagerel mappingproxy_get+153
	DD	imagerel $unwind$mappingproxy_get
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mappingproxy_get DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_04DEJLHBFK@?$CIOO?$CJ?$AA@
CONST	SEGMENT
??_C@_04DEJLHBFK@?$CIOO?$CJ?$AA@ DB '(OO)', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT mappingproxy_get
_TEXT	SEGMENT
key$ = 48
def$ = 56
pp$ = 80
args$ = 88
mappingproxy_get PROC					; COMDAT

; 791  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 792  :     PyObject *key, *def = Py_None;

  0000e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00015	48 89 44 24 38	 mov	 QWORD PTR def$[rsp], rax

; 793  :     _Py_IDENTIFIER(get);
; 794  : 
; 795  :     if (!PyArg_UnpackTuple(args, "get", 1, 2, &key, &def))

  0001a	48 8d 44 24 38	 lea	 rax, QWORD PTR def$[rsp]
  0001f	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00024	48 8d 44 24 30	 lea	 rax, QWORD PTR key$[rsp]
  00029	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0002e	41 b9 02 00 00
	00		 mov	 r9d, 2
  00034	41 b8 01 00 00
	00		 mov	 r8d, 1
  0003a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03HNAFFKGA@get?$AA@
  00041	48 8b 4c 24 58	 mov	 rcx, QWORD PTR args$[rsp]
  00046	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  0004b	85 c0		 test	 eax, eax
  0004d	75 04		 jne	 SHORT $LN1@mappingpro@2

; 796  :         return NULL;

  0004f	33 c0		 xor	 eax, eax
  00051	eb 41		 jmp	 SHORT $LN2@mappingpro@2
$LN1@mappingpro@2:

; 797  :     return _PyObject_CallMethodId(pp->mapping, &PyId_get, "(OO)", key, def);

  00053	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId_get@?1??mappingproxy_get@@9@9
  00058	8b c0		 mov	 eax, eax
  0005a	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00060	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00069	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0006d	48 8b 4c 24 38	 mov	 rcx, QWORD PTR def$[rsp]
  00072	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00077	4c 8b 4c 24 30	 mov	 r9, QWORD PTR key$[rsp]
  0007c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_04DEJLHBFK@?$CIOO?$CJ?$AA@
  00083	48 8b d0	 mov	 rdx, rax
  00086	48 8b 44 24 50	 mov	 rax, QWORD PTR pp$[rsp]
  0008b	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  0008f	e8 00 00 00 00	 call	 _PyObject_CallMethodId
$LN2@mappingpro@2:

; 798  : }

  00094	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00098	c3		 ret	 0
mappingproxy_get ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$mappingproxy_keys DD imagerel mappingproxy_keys
	DD	imagerel mappingproxy_keys+60
	DD	imagerel $unwind$mappingproxy_keys
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mappingproxy_keys DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT mappingproxy_keys
_TEXT	SEGMENT
pp$ = 48
mappingproxy_keys PROC					; COMDAT

; 802  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 803  :     _Py_IDENTIFIER(keys);
; 804  :     return _PyObject_CallMethodId(pp->mapping, &PyId_keys, NULL);

  00009	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId_keys@?1??mappingproxy_keys@@9@9
  0000e	8b c0		 mov	 eax, eax
  00010	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00016	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0001f	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00023	45 33 c0	 xor	 r8d, r8d
  00026	48 8b d0	 mov	 rdx, rax
  00029	48 8b 44 24 30	 mov	 rax, QWORD PTR pp$[rsp]
  0002e	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00032	e8 00 00 00 00	 call	 _PyObject_CallMethodId

; 805  : }

  00037	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003b	c3		 ret	 0
mappingproxy_keys ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$mappingproxy_values DD imagerel mappingproxy_values
	DD	imagerel mappingproxy_values+60
	DD	imagerel $unwind$mappingproxy_values
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mappingproxy_values DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT mappingproxy_values
_TEXT	SEGMENT
pp$ = 48
mappingproxy_values PROC				; COMDAT

; 809  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 810  :     _Py_IDENTIFIER(values);
; 811  :     return _PyObject_CallMethodId(pp->mapping, &PyId_values, NULL);

  00009	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId_values@?1??mappingproxy_values@@9@9
  0000e	8b c0		 mov	 eax, eax
  00010	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00016	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0001f	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00023	45 33 c0	 xor	 r8d, r8d
  00026	48 8b d0	 mov	 rdx, rax
  00029	48 8b 44 24 30	 mov	 rax, QWORD PTR pp$[rsp]
  0002e	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00032	e8 00 00 00 00	 call	 _PyObject_CallMethodId

; 812  : }

  00037	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003b	c3		 ret	 0
mappingproxy_values ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$mappingproxy_items DD imagerel mappingproxy_items
	DD	imagerel mappingproxy_items+60
	DD	imagerel $unwind$mappingproxy_items
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mappingproxy_items DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT mappingproxy_items
_TEXT	SEGMENT
pp$ = 48
mappingproxy_items PROC					; COMDAT

; 816  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 817  :     _Py_IDENTIFIER(items);
; 818  :     return _PyObject_CallMethodId(pp->mapping, &PyId_items, NULL);

  00009	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId_items@?1??mappingproxy_items@@9@9
  0000e	8b c0		 mov	 eax, eax
  00010	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00016	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0001f	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00023	45 33 c0	 xor	 r8d, r8d
  00026	48 8b d0	 mov	 rdx, rax
  00029	48 8b 44 24 30	 mov	 rax, QWORD PTR pp$[rsp]
  0002e	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00032	e8 00 00 00 00	 call	 _PyObject_CallMethodId

; 819  : }

  00037	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003b	c3		 ret	 0
mappingproxy_items ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$mappingproxy_copy DD imagerel mappingproxy_copy
	DD	imagerel mappingproxy_copy+60
	DD	imagerel $unwind$mappingproxy_copy
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mappingproxy_copy DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT mappingproxy_copy
_TEXT	SEGMENT
pp$ = 48
mappingproxy_copy PROC					; COMDAT

; 823  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 824  :     _Py_IDENTIFIER(copy);
; 825  :     return _PyObject_CallMethodId(pp->mapping, &PyId_copy, NULL);

  00009	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId_copy@?1??mappingproxy_copy@@9@9
  0000e	8b c0		 mov	 eax, eax
  00010	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00016	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0001f	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00023	45 33 c0	 xor	 r8d, r8d
  00026	48 8b d0	 mov	 rdx, rax
  00029	48 8b 44 24 30	 mov	 rax, QWORD PTR pp$[rsp]
  0002e	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00032	e8 00 00 00 00	 call	 _PyObject_CallMethodId

; 826  : }

  00037	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003b	c3		 ret	 0
mappingproxy_copy ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BF@LLNAKNOP@mappingproxy_dealloc?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$mappingproxy_dealloc DD imagerel mappingproxy_dealloc
	DD	imagerel mappingproxy_dealloc+277
	DD	imagerel $unwind$mappingproxy_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mappingproxy_dealloc DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0BF@LLNAKNOP@mappingproxy_dealloc?$AA@
CONST	SEGMENT
??_C@_0BF@LLNAKNOP@mappingproxy_dealloc?$AA@ DB 'mappingproxy_dealloc', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT mappingproxy_dealloc
_TEXT	SEGMENT
g$21052 = 48
tv79 = 56
pp$ = 80
mappingproxy_dealloc PROC				; COMDAT

; 848  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 849  :     _PyObject_GC_UNTRACK(pp);

  00009	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00011	4c 8b 4c 24 50	 mov	 r9, QWORD PTR pp$[rsp]
  00016	41 b8 51 03 00
	00		 mov	 r8d, 849		; 00000351H
  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@CMLMJMOL@?4?4?2Objects?2descrobject?4c?$AA@
  00023	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@LLNAKNOP@mappingproxy_dealloc?$AA@
  0002a	e8 00 00 00 00	 call	 _PyParallel_Guard
  0002f	85 c0		 test	 eax, eax
  00031	0f 85 c1 00 00
	00		 jne	 $LN4@mappingpro@3
$LN3@mappingpro@3:
  00037	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0003f	4c 8b 4c 24 50	 mov	 r9, QWORD PTR pp$[rsp]
  00044	41 b8 51 03 00
	00		 mov	 r8d, 849		; 00000351H
  0004a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@CMLMJMOL@?4?4?2Objects?2descrobject?4c?$AA@
  00051	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@LLNAKNOP@mappingproxy_dealloc?$AA@
  00058	e8 00 00 00 00	 call	 _PyParallel_Guard
  0005d	85 c0		 test	 eax, eax
  0005f	74 0b		 je	 SHORT $LN7@mappingpro@3
  00061	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR tv79[rsp], 0
  0006a	eb 0e		 jmp	 SHORT $LN8@mappingpro@3
$LN7@mappingpro@3:
  0006c	48 8b 44 24 50	 mov	 rax, QWORD PTR pp$[rsp]
  00071	48 83 e8 18	 sub	 rax, 24
  00075	48 89 44 24 38	 mov	 QWORD PTR tv79[rsp], rax
$LN8@mappingpro@3:
  0007a	48 8b 44 24 38	 mov	 rax, QWORD PTR tv79[rsp]
  0007f	48 89 44 24 30	 mov	 QWORD PTR g$21052[rsp], rax
  00084	48 8b 44 24 30	 mov	 rax, QWORD PTR g$21052[rsp]
  00089	48 83 78 10 fe	 cmp	 QWORD PTR [rax+16], -2
  0008e	75 1c		 jne	 SHORT $LN9@mappingpro@3
  00090	41 b8 51 03 00
	00		 mov	 r8d, 849		; 00000351H
  00096	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DC@OKEDMLJ@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAc?$AAr?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  0009d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EM@HFMJMDDM@?$AAg?$AA?9?$AA?$DO?$AAg?$AAc?$AA?4?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AAG?$AAC?$AA_?$AAR?$AAE?$AAF?$AAS?$AA_?$AAU?$AAN?$AAT?$AAR@
  000a4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000aa	33 c0		 xor	 eax, eax
$LN9@mappingpro@3:
  000ac	48 8b 44 24 30	 mov	 rax, QWORD PTR g$21052[rsp]
  000b1	48 c7 40 10 fe
	ff ff ff	 mov	 QWORD PTR [rax+16], -2
  000b9	48 8b 44 24 30	 mov	 rax, QWORD PTR g$21052[rsp]
  000be	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  000c2	48 8b 4c 24 30	 mov	 rcx, QWORD PTR g$21052[rsp]
  000c7	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000ca	48 89 08	 mov	 QWORD PTR [rax], rcx
  000cd	48 8b 44 24 30	 mov	 rax, QWORD PTR g$21052[rsp]
  000d2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000d5	48 8b 4c 24 30	 mov	 rcx, QWORD PTR g$21052[rsp]
  000da	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  000de	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  000e2	48 8b 44 24 30	 mov	 rax, QWORD PTR g$21052[rsp]
  000e7	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
  000ee	33 c0		 xor	 eax, eax
  000f0	85 c0		 test	 eax, eax
  000f2	0f 85 3f ff ff
	ff		 jne	 $LN3@mappingpro@3
$LN4@mappingpro@3:

; 850  :     Py_DECREF(pp->mapping);

  000f8	48 8b 44 24 50	 mov	 rax, QWORD PTR pp$[rsp]
  000fd	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00101	e8 00 00 00 00	 call	 _Py_DecRef

; 851  :     PyObject_GC_Del(pp);

  00106	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pp$[rsp]
  0010b	e8 00 00 00 00	 call	 PyObject_GC_Del

; 852  : }

  00110	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00114	c3		 ret	 0
mappingproxy_dealloc ENDP
_TEXT	ENDS
EXTRN	PyObject_GetIter:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$mappingproxy_getiter DD imagerel mappingproxy_getiter
	DD	imagerel mappingproxy_getiter+28
	DD	imagerel $unwind$mappingproxy_getiter
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mappingproxy_getiter DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT mappingproxy_getiter
_TEXT	SEGMENT
pp$ = 48
mappingproxy_getiter PROC				; COMDAT

; 856  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 857  :     return PyObject_GetIter(pp->mapping);

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR pp$[rsp]
  0000e	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00012	e8 00 00 00 00	 call	 PyObject_GetIter

; 858  : }

  00017	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001b	c3		 ret	 0
mappingproxy_getiter ENDP
_TEXT	ENDS
EXTRN	PyObject_Str:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$mappingproxy_str DD imagerel mappingproxy_str
	DD	imagerel mappingproxy_str+28
	DD	imagerel $unwind$mappingproxy_str
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mappingproxy_str DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT mappingproxy_str
_TEXT	SEGMENT
pp$ = 48
mappingproxy_str PROC					; COMDAT

; 862  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 863  :     return PyObject_Str(pp->mapping);

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR pp$[rsp]
  0000e	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00012	e8 00 00 00 00	 call	 PyObject_Str

; 864  : }

  00017	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001b	c3		 ret	 0
mappingproxy_str ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BB@ICOFCDNP@mappingproxy?$CI?$CFR?$CJ?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$mappingproxy_repr DD imagerel mappingproxy_repr
	DD	imagerel mappingproxy_repr+35
	DD	imagerel $unwind$mappingproxy_repr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mappingproxy_repr DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT ??_C@_0BB@ICOFCDNP@mappingproxy?$CI?$CFR?$CJ?$AA@
CONST	SEGMENT
??_C@_0BB@ICOFCDNP@mappingproxy?$CI?$CFR?$CJ?$AA@ DB 'mappingproxy(%R)', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT mappingproxy_repr
_TEXT	SEGMENT
pp$ = 48
mappingproxy_repr PROC					; COMDAT

; 868  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 869  :     return PyUnicode_FromFormat("mappingproxy(%R)", pp->mapping);

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR pp$[rsp]
  0000e	48 8b 50 60	 mov	 rdx, QWORD PTR [rax+96]
  00012	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@ICOFCDNP@mappingproxy?$CI?$CFR?$CJ?$AA@
  00019	e8 00 00 00 00	 call	 PyUnicode_FromFormat

; 870  : }

  0001e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00022	c3		 ret	 0
mappingproxy_repr ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BG@ODDCKFFL@mappingproxy_traverse?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$mappingproxy_traverse DD imagerel mappingproxy_traverse
	DD	imagerel mappingproxy_traverse+126
	DD	imagerel $unwind$mappingproxy_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mappingproxy_traverse DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT ??_C@_0BG@ODDCKFFL@mappingproxy_traverse?$AA@
CONST	SEGMENT
??_C@_0BG@ODDCKFFL@mappingproxy_traverse?$AA@ DB 'mappingproxy_traverse', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT mappingproxy_traverse
_TEXT	SEGMENT
pp$ = 32
vret$21087 = 40
self$ = 64
visit$ = 72
arg$ = 80
mappingproxy_traverse PROC				; COMDAT

; 874  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 875  :     mappingproxyobject *pp = (mappingproxyobject *)self;

  00013	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00018	48 89 44 24 20	 mov	 QWORD PTR pp$[rsp], rax
$LN6@mappingpro@4:

; 876  :     Py_VISIT(pp->mapping);

  0001d	e8 00 00 00 00	 call	 _Py_PXCTX
  00022	85 c0		 test	 eax, eax
  00024	74 1c		 je	 SHORT $LN3@mappingpro@4
  00026	45 33 c9	 xor	 r9d, r9d
  00029	41 b8 6c 03 00
	00		 mov	 r8d, 876		; 0000036cH
  0002f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@CMLMJMOL@?4?4?2Objects?2descrobject?4c?$AA@
  00036	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@ODDCKFFL@mappingproxy_traverse?$AA@
  0003d	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@mappingpro@4:
  00042	48 8b 44 24 20	 mov	 rax, QWORD PTR pp$[rsp]
  00047	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  0004c	74 23		 je	 SHORT $LN2@mappingpro@4
  0004e	48 8b 54 24 50	 mov	 rdx, QWORD PTR arg$[rsp]
  00053	48 8b 44 24 20	 mov	 rax, QWORD PTR pp$[rsp]
  00058	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  0005c	ff 54 24 48	 call	 QWORD PTR visit$[rsp]
  00060	89 44 24 28	 mov	 DWORD PTR vret$21087[rsp], eax
  00064	83 7c 24 28 00	 cmp	 DWORD PTR vret$21087[rsp], 0
  00069	74 06		 je	 SHORT $LN1@mappingpro@4
  0006b	8b 44 24 28	 mov	 eax, DWORD PTR vret$21087[rsp]
  0006f	eb 08		 jmp	 SHORT $LN7@mappingpro@4
$LN1@mappingpro@4:
$LN2@mappingpro@4:
  00071	33 c0		 xor	 eax, eax
  00073	85 c0		 test	 eax, eax
  00075	75 a6		 jne	 SHORT $LN6@mappingpro@4

; 877  :     return 0;

  00077	33 c0		 xor	 eax, eax
$LN7@mappingpro@4:

; 878  : }

  00079	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0007d	c3		 ret	 0
mappingproxy_traverse ENDP
_TEXT	ENDS
EXTRN	PyObject_RichCompare:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$mappingproxy_richcompare DD imagerel mappingproxy_richcompare
	DD	imagerel mappingproxy_richcompare+48
	DD	imagerel $unwind$mappingproxy_richcompare
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mappingproxy_richcompare DD 011301H
	DD	04213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT mappingproxy_richcompare
_TEXT	SEGMENT
v$ = 48
w$ = 56
op$ = 64
mappingproxy_richcompare PROC				; COMDAT

; 882  : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 883  :     return PyObject_RichCompare(v->mapping, w, op);

  00013	44 8b 44 24 40	 mov	 r8d, DWORD PTR op$[rsp]
  00018	48 8b 54 24 38	 mov	 rdx, QWORD PTR w$[rsp]
  0001d	48 8b 44 24 30	 mov	 rax, QWORD PTR v$[rsp]
  00022	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00026	e8 00 00 00 00	 call	 PyObject_RichCompare

; 884  : }

  0002b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002f	c3		 ret	 0
mappingproxy_richcompare ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@ ; `string'
PUBLIC	??_C@_0BB@IABOEDPD@mappingproxy_new?$AA@	; `string'
PUBLIC	??_C@_0P@JCHMCIK@O?3mappingproxy?$AA@		; `string'
EXTRN	_PyGC_generation0:QWORD
EXTRN	Py_FatalError:PROC
EXTRN	_PyObject_GC_New:PROC
EXTRN	_PxObject_New:PROC
EXTRN	PyArg_ParseTupleAndKeywords:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$mappingproxy_new DD imagerel mappingproxy_new
	DD	imagerel mappingproxy_new+436
	DD	imagerel $unwind$mappingproxy_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mappingproxy_new DD 011301H
	DD	0c213H
xdata	ENDS
;	COMDAT ??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@
CONST	SEGMENT
??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@ DB 'GC object alread'
	DB	'y tracked', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@IABOEDPD@mappingproxy_new?$AA@
CONST	SEGMENT
??_C@_0BB@IABOEDPD@mappingproxy_new?$AA@ DB 'mappingproxy_new', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@JCHMCIK@O?3mappingproxy?$AA@
CONST	SEGMENT
??_C@_0P@JCHMCIK@O?3mappingproxy?$AA@ DB 'O:mappingproxy', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT mappingproxy_new
_TEXT	SEGMENT
mapping$ = 48
mappingproxy$ = 56
g$21138 = 64
tv80 = 72
tv131 = 80
type$ = 112
args$ = 120
kwds$ = 128
mappingproxy_new PROC					; COMDAT

; 902  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 903  :     static char *kwlist[] = {"mapping", NULL};
; 904  :     PyObject *mapping;
; 905  :     mappingproxyobject *mappingproxy;
; 906  : 
; 907  :     if (!PyArg_ParseTupleAndKeywords(args, kwds, "O:mappingproxy",
; 908  :                                      kwlist, &mapping))

  00013	48 8d 44 24 30	 lea	 rax, QWORD PTR mapping$[rsp]
  00018	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0001d	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?kwlist@?1??mappingproxy_new@@9@9
  00024	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0P@JCHMCIK@O?3mappingproxy?$AA@
  0002b	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR kwds$[rsp]
  00033	48 8b 4c 24 78	 mov	 rcx, QWORD PTR args$[rsp]
  00038	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  0003d	85 c0		 test	 eax, eax
  0003f	75 07		 jne	 SHORT $LN8@mappingpro@5

; 909  :         return NULL;

  00041	33 c0		 xor	 eax, eax
  00043	e9 67 01 00 00	 jmp	 $LN9@mappingpro@5
$LN8@mappingpro@5:

; 910  : 
; 911  :     if (mappingproxy_check_mapping(mapping) == -1)

  00048	48 8b 4c 24 30	 mov	 rcx, QWORD PTR mapping$[rsp]
  0004d	e8 00 00 00 00	 call	 mappingproxy_check_mapping
  00052	83 f8 ff	 cmp	 eax, -1
  00055	75 07		 jne	 SHORT $LN7@mappingpro@5

; 912  :         return NULL;

  00057	33 c0		 xor	 eax, eax
  00059	e9 51 01 00 00	 jmp	 $LN9@mappingpro@5
$LN7@mappingpro@5:

; 913  : 
; 914  :     mappingproxy = PyObject_GC_New(mappingproxyobject, &PyDictProxy_Type);

  0005e	e8 00 00 00 00	 call	 _Py_PXCTX
  00063	85 c0		 test	 eax, eax
  00065	74 13		 je	 SHORT $LN11@mappingpro@5
  00067	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyDictProxy_Type
  0006e	e8 00 00 00 00	 call	 _PxObject_New
  00073	48 89 44 24 48	 mov	 QWORD PTR tv80[rsp], rax
  00078	eb 11		 jmp	 SHORT $LN12@mappingpro@5
$LN11@mappingpro@5:
  0007a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyDictProxy_Type
  00081	e8 00 00 00 00	 call	 _PyObject_GC_New
  00086	48 89 44 24 48	 mov	 QWORD PTR tv80[rsp], rax
$LN12@mappingpro@5:
  0008b	48 8b 44 24 48	 mov	 rax, QWORD PTR tv80[rsp]
  00090	48 89 44 24 38	 mov	 QWORD PTR mappingproxy$[rsp], rax

; 915  :     if (mappingproxy == NULL)

  00095	48 83 7c 24 38
	00		 cmp	 QWORD PTR mappingproxy$[rsp], 0
  0009b	75 07		 jne	 SHORT $LN6@mappingpro@5

; 916  :         return NULL;

  0009d	33 c0		 xor	 eax, eax
  0009f	e9 0b 01 00 00	 jmp	 $LN9@mappingpro@5
$LN6@mappingpro@5:

; 917  :     Py_INCREF(mapping);

  000a4	48 8b 4c 24 30	 mov	 rcx, QWORD PTR mapping$[rsp]
  000a9	e8 00 00 00 00	 call	 _Py_IncRef

; 918  :     mappingproxy->mapping = mapping;

  000ae	48 8b 44 24 38	 mov	 rax, QWORD PTR mappingproxy$[rsp]
  000b3	48 8b 4c 24 30	 mov	 rcx, QWORD PTR mapping$[rsp]
  000b8	48 89 48 60	 mov	 QWORD PTR [rax+96], rcx

; 919  :     _PyObject_GC_TRACK(mappingproxy);

  000bc	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000c4	4c 8b 4c 24 38	 mov	 r9, QWORD PTR mappingproxy$[rsp]
  000c9	41 b8 97 03 00
	00		 mov	 r8d, 919		; 00000397H
  000cf	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@CMLMJMOL@?4?4?2Objects?2descrobject?4c?$AA@
  000d6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@IABOEDPD@mappingproxy_new?$AA@
  000dd	e8 00 00 00 00	 call	 _PyParallel_Guard
  000e2	85 c0		 test	 eax, eax
  000e4	0f 85 c0 00 00
	00		 jne	 $LN5@mappingpro@5
$LN4@mappingpro@5:
  000ea	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000f2	4c 8b 4c 24 38	 mov	 r9, QWORD PTR mappingproxy$[rsp]
  000f7	41 b8 97 03 00
	00		 mov	 r8d, 919		; 00000397H
  000fd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@CMLMJMOL@?4?4?2Objects?2descrobject?4c?$AA@
  00104	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@IABOEDPD@mappingproxy_new?$AA@
  0010b	e8 00 00 00 00	 call	 _PyParallel_Guard
  00110	85 c0		 test	 eax, eax
  00112	74 0b		 je	 SHORT $LN13@mappingpro@5
  00114	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR tv131[rsp], 0
  0011d	eb 0e		 jmp	 SHORT $LN14@mappingpro@5
$LN13@mappingpro@5:
  0011f	48 8b 44 24 38	 mov	 rax, QWORD PTR mappingproxy$[rsp]
  00124	48 83 e8 18	 sub	 rax, 24
  00128	48 89 44 24 50	 mov	 QWORD PTR tv131[rsp], rax
$LN14@mappingpro@5:
  0012d	48 8b 44 24 50	 mov	 rax, QWORD PTR tv131[rsp]
  00132	48 89 44 24 40	 mov	 QWORD PTR g$21138[rsp], rax
  00137	48 8b 44 24 40	 mov	 rax, QWORD PTR g$21138[rsp]
  0013c	48 83 78 10 fe	 cmp	 QWORD PTR [rax+16], -2
  00141	74 0c		 je	 SHORT $LN1@mappingpro@5
  00143	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@
  0014a	e8 00 00 00 00	 call	 Py_FatalError
$LN1@mappingpro@5:
  0014f	48 8b 44 24 40	 mov	 rax, QWORD PTR g$21138[rsp]
  00154	48 c7 40 10 fd
	ff ff ff	 mov	 QWORD PTR [rax+16], -3
  0015c	48 8b 44 24 40	 mov	 rax, QWORD PTR g$21138[rsp]
  00161	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR _PyGC_generation0
  00168	48 89 08	 mov	 QWORD PTR [rax], rcx
  0016b	48 8b 44 24 40	 mov	 rax, QWORD PTR g$21138[rsp]
  00170	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR _PyGC_generation0
  00177	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  0017b	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  0017f	48 8b 44 24 40	 mov	 rax, QWORD PTR g$21138[rsp]
  00184	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00188	48 8b 4c 24 40	 mov	 rcx, QWORD PTR g$21138[rsp]
  0018d	48 89 08	 mov	 QWORD PTR [rax], rcx
  00190	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyGC_generation0
  00197	48 8b 4c 24 40	 mov	 rcx, QWORD PTR g$21138[rsp]
  0019c	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  001a0	33 c0		 xor	 eax, eax
  001a2	85 c0		 test	 eax, eax
  001a4	0f 85 40 ff ff
	ff		 jne	 $LN4@mappingpro@5
$LN5@mappingpro@5:

; 920  :     return (PyObject *)mappingproxy;

  001aa	48 8b 44 24 38	 mov	 rax, QWORD PTR mappingproxy$[rsp]
$LN9@mappingpro@5:

; 921  : }

  001af	48 83 c4 68	 add	 rsp, 104		; 00000068H
  001b3	c3		 ret	 0
mappingproxy_new ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DC@PIKMGBAG@mappingproxy?$CI?$CJ?5argument?5must?5be?5@ ; `string'
EXTRN	PyMapping_Check:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$mappingproxy_check_mapping DD imagerel mappingproxy_check_mapping
	DD	imagerel mappingproxy_check_mapping+117
	DD	imagerel $unwind$mappingproxy_check_mapping
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$mappingproxy_check_mapping DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT ??_C@_0DC@PIKMGBAG@mappingproxy?$CI?$CJ?5argument?5must?5be?5@
CONST	SEGMENT
??_C@_0DC@PIKMGBAG@mappingproxy?$CI?$CJ?5argument?5must?5be?5@ DB 'mappin'
	DB	'gproxy() argument must be a mapping, not %s', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT mappingproxy_check_mapping
_TEXT	SEGMENT
mapping$ = 48
mappingproxy_check_mapping PROC				; COMDAT

; 888  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 889  :     if (!PyMapping_Check(mapping)
; 890  :         || PyList_Check(mapping)
; 891  :         || PyTuple_Check(mapping)) {

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR mapping$[rsp]
  0000e	e8 00 00 00 00	 call	 PyMapping_Check
  00013	85 c0		 test	 eax, eax
  00015	74 30		 je	 SHORT $LN1@mappingpro@6
  00017	48 8b 44 24 30	 mov	 rax, QWORD PTR mapping$[rsp]
  0001c	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00020	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00026	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  0002b	85 c0		 test	 eax, eax
  0002d	75 18		 jne	 SHORT $LN1@mappingpro@6
  0002f	48 8b 44 24 30	 mov	 rax, QWORD PTR mapping$[rsp]
  00034	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00038	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0003e	25 00 00 00 04	 and	 eax, 67108864		; 04000000H
  00043	85 c0		 test	 eax, eax
  00045	74 27		 je	 SHORT $LN2@mappingpro@6
$LN1@mappingpro@6:

; 892  :         PyErr_Format(PyExc_TypeError,
; 893  :                     "mappingproxy() argument must be a mapping, not %s",
; 894  :                     Py_TYPE(mapping)->tp_name);

  00047	48 8b 44 24 30	 mov	 rax, QWORD PTR mapping$[rsp]
  0004c	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00050	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  00054	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DC@PIKMGBAG@mappingproxy?$CI?$CJ?5argument?5must?5be?5@
  0005b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00062	e8 00 00 00 00	 call	 PyErr_Format

; 895  :         return -1;

  00067	b8 ff ff ff ff	 mov	 eax, -1
  0006c	eb 02		 jmp	 SHORT $LN3@mappingpro@6
$LN2@mappingpro@6:

; 896  :     }
; 897  :     return 0;

  0006e	33 c0		 xor	 eax, eax
$LN3@mappingpro@6:

; 898  : }

  00070	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00074	c3		 ret	 0
mappingproxy_check_mapping ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BA@BJLNAKHP@PyDictProxy_New?$AA@		; `string'
PUBLIC	PyDictProxy_New
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyDictProxy_New DD imagerel $LN14
	DD	imagerel $LN14+370
	DD	imagerel $unwind$PyDictProxy_New
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyDictProxy_New DD 010901H
	DD	0a209H
xdata	ENDS
;	COMDAT ??_C@_0BA@BJLNAKHP@PyDictProxy_New?$AA@
CONST	SEGMENT
??_C@_0BA@BJLNAKHP@PyDictProxy_New?$AA@ DB 'PyDictProxy_New', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyDictProxy_New
_TEXT	SEGMENT
pp$ = 48
g$21179 = 56
tv73 = 64
tv92 = 72
mapping$ = 96
PyDictProxy_New PROC					; COMDAT

; 967  : {

$LN14:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 968  :     mappingproxyobject *pp;
; 969  : 
; 970  :     if (mappingproxy_check_mapping(mapping) == -1)

  00009	48 8b 4c 24 60	 mov	 rcx, QWORD PTR mapping$[rsp]
  0000e	e8 00 00 00 00	 call	 mappingproxy_check_mapping
  00013	83 f8 ff	 cmp	 eax, -1
  00016	75 07		 jne	 SHORT $LN7@PyDictProx

; 971  :         return NULL;

  00018	33 c0		 xor	 eax, eax
  0001a	e9 4e 01 00 00	 jmp	 $LN8@PyDictProx
$LN7@PyDictProx:

; 972  : 
; 973  :     pp = PyObject_GC_New(mappingproxyobject, &PyDictProxy_Type);

  0001f	e8 00 00 00 00	 call	 _Py_PXCTX
  00024	85 c0		 test	 eax, eax
  00026	74 13		 je	 SHORT $LN10@PyDictProx
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyDictProxy_Type
  0002f	e8 00 00 00 00	 call	 _PxObject_New
  00034	48 89 44 24 40	 mov	 QWORD PTR tv73[rsp], rax
  00039	eb 11		 jmp	 SHORT $LN11@PyDictProx
$LN10@PyDictProx:
  0003b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyDictProxy_Type
  00042	e8 00 00 00 00	 call	 _PyObject_GC_New
  00047	48 89 44 24 40	 mov	 QWORD PTR tv73[rsp], rax
$LN11@PyDictProx:
  0004c	48 8b 44 24 40	 mov	 rax, QWORD PTR tv73[rsp]
  00051	48 89 44 24 30	 mov	 QWORD PTR pp$[rsp], rax

; 974  :     if (pp != NULL) {

  00056	48 83 7c 24 30
	00		 cmp	 QWORD PTR pp$[rsp], 0
  0005c	0f 84 06 01 00
	00		 je	 $LN6@PyDictProx

; 975  :         Py_INCREF(mapping);

  00062	48 8b 4c 24 60	 mov	 rcx, QWORD PTR mapping$[rsp]
  00067	e8 00 00 00 00	 call	 _Py_IncRef

; 976  :         pp->mapping = mapping;

  0006c	48 8b 44 24 30	 mov	 rax, QWORD PTR pp$[rsp]
  00071	48 8b 4c 24 60	 mov	 rcx, QWORD PTR mapping$[rsp]
  00076	48 89 48 60	 mov	 QWORD PTR [rax+96], rcx

; 977  :         _PyObject_GC_TRACK(pp);

  0007a	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00082	4c 8b 4c 24 30	 mov	 r9, QWORD PTR pp$[rsp]
  00087	41 b8 d1 03 00
	00		 mov	 r8d, 977		; 000003d1H
  0008d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@CMLMJMOL@?4?4?2Objects?2descrobject?4c?$AA@
  00094	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@BJLNAKHP@PyDictProxy_New?$AA@
  0009b	e8 00 00 00 00	 call	 _PyParallel_Guard
  000a0	85 c0		 test	 eax, eax
  000a2	0f 85 c0 00 00
	00		 jne	 $LN5@PyDictProx
$LN4@PyDictProx:
  000a8	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000b0	4c 8b 4c 24 30	 mov	 r9, QWORD PTR pp$[rsp]
  000b5	41 b8 d1 03 00
	00		 mov	 r8d, 977		; 000003d1H
  000bb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@CMLMJMOL@?4?4?2Objects?2descrobject?4c?$AA@
  000c2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@BJLNAKHP@PyDictProxy_New?$AA@
  000c9	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ce	85 c0		 test	 eax, eax
  000d0	74 0b		 je	 SHORT $LN12@PyDictProx
  000d2	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR tv92[rsp], 0
  000db	eb 0e		 jmp	 SHORT $LN13@PyDictProx
$LN12@PyDictProx:
  000dd	48 8b 44 24 30	 mov	 rax, QWORD PTR pp$[rsp]
  000e2	48 83 e8 18	 sub	 rax, 24
  000e6	48 89 44 24 48	 mov	 QWORD PTR tv92[rsp], rax
$LN13@PyDictProx:
  000eb	48 8b 44 24 48	 mov	 rax, QWORD PTR tv92[rsp]
  000f0	48 89 44 24 38	 mov	 QWORD PTR g$21179[rsp], rax
  000f5	48 8b 44 24 38	 mov	 rax, QWORD PTR g$21179[rsp]
  000fa	48 83 78 10 fe	 cmp	 QWORD PTR [rax+16], -2
  000ff	74 0c		 je	 SHORT $LN1@PyDictProx
  00101	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@
  00108	e8 00 00 00 00	 call	 Py_FatalError
$LN1@PyDictProx:
  0010d	48 8b 44 24 38	 mov	 rax, QWORD PTR g$21179[rsp]
  00112	48 c7 40 10 fd
	ff ff ff	 mov	 QWORD PTR [rax+16], -3
  0011a	48 8b 44 24 38	 mov	 rax, QWORD PTR g$21179[rsp]
  0011f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR _PyGC_generation0
  00126	48 89 08	 mov	 QWORD PTR [rax], rcx
  00129	48 8b 44 24 38	 mov	 rax, QWORD PTR g$21179[rsp]
  0012e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR _PyGC_generation0
  00135	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00139	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  0013d	48 8b 44 24 38	 mov	 rax, QWORD PTR g$21179[rsp]
  00142	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00146	48 8b 4c 24 38	 mov	 rcx, QWORD PTR g$21179[rsp]
  0014b	48 89 08	 mov	 QWORD PTR [rax], rcx
  0014e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyGC_generation0
  00155	48 8b 4c 24 38	 mov	 rcx, QWORD PTR g$21179[rsp]
  0015a	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  0015e	33 c0		 xor	 eax, eax
  00160	85 c0		 test	 eax, eax
  00162	0f 85 40 ff ff
	ff		 jne	 $LN4@PyDictProx
$LN5@PyDictProx:
$LN6@PyDictProx:

; 978  :     }
; 979  :     return (PyObject *)pp;

  00168	48 8b 44 24 30	 mov	 rax, QWORD PTR pp$[rsp]
$LN8@PyDictProx:

; 980  : }

  0016d	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00171	c3		 ret	 0
PyDictProxy_New ENDP
_TEXT	ENDS
EXTRN	_PyTrash_thread_deposit_object:PROC
EXTRN	_PyTrash_thread_destroy_chain:PROC
EXTRN	PyThreadState_Get:PROC
EXTRN	PyObject_GC_UnTrack:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$wrapper_dealloc DD imagerel wrapper_dealloc
	DD	imagerel wrapper_dealloc+230
	DD	imagerel $unwind$wrapper_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$wrapper_dealloc DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT wrapper_dealloc
_TEXT	SEGMENT
_tstate$21197 = 32
wp$ = 64
wrapper_dealloc PROC					; COMDAT

; 998  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 999  :     PyObject_GC_UnTrack(wp);

  00009	48 8b 4c 24 40	 mov	 rcx, QWORD PTR wp$[rsp]
  0000e	e8 00 00 00 00	 call	 PyObject_GC_UnTrack
$LN14@wrapper_de:

; 1000 :     Py_TRASHCAN_SAFE_BEGIN(wp)

  00013	e8 00 00 00 00	 call	 PyThreadState_Get
  00018	48 89 44 24 20	 mov	 QWORD PTR _tstate$21197[rsp], rax
  0001d	48 8b 44 24 20	 mov	 rax, QWORD PTR _tstate$21197[rsp]
  00022	83 b8 94 00 00
	00 32		 cmp	 DWORD PTR [rax+148], 50	; 00000032H
  00029	0f 8d 9e 00 00
	00		 jge	 $LN11@wrapper_de
  0002f	48 8b 44 24 20	 mov	 rax, QWORD PTR _tstate$21197[rsp]
  00034	8b 80 94 00 00
	00		 mov	 eax, DWORD PTR [rax+148]
  0003a	ff c0		 inc	 eax
  0003c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _tstate$21197[rsp]
  00041	89 81 94 00 00
	00		 mov	 DWORD PTR [rcx+148], eax
$LN10@wrapper_de:

; 1001 :     Py_XDECREF(wp->descr);

  00047	48 8b 44 24 40	 mov	 rax, QWORD PTR wp$[rsp]
  0004c	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00051	74 0e		 je	 SHORT $LN7@wrapper_de
  00053	48 8b 44 24 40	 mov	 rax, QWORD PTR wp$[rsp]
  00058	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  0005c	e8 00 00 00 00	 call	 _Py_DecRef
$LN7@wrapper_de:
  00061	33 c0		 xor	 eax, eax
  00063	85 c0		 test	 eax, eax
  00065	75 e0		 jne	 SHORT $LN10@wrapper_de
$LN6@wrapper_de:

; 1002 :     Py_XDECREF(wp->self);

  00067	48 8b 44 24 40	 mov	 rax, QWORD PTR wp$[rsp]
  0006c	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  00071	74 0e		 je	 SHORT $LN3@wrapper_de
  00073	48 8b 44 24 40	 mov	 rax, QWORD PTR wp$[rsp]
  00078	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  0007c	e8 00 00 00 00	 call	 _Py_DecRef
$LN3@wrapper_de:
  00081	33 c0		 xor	 eax, eax
  00083	85 c0		 test	 eax, eax
  00085	75 e0		 jne	 SHORT $LN6@wrapper_de

; 1003 :     PyObject_GC_Del(wp);

  00087	48 8b 4c 24 40	 mov	 rcx, QWORD PTR wp$[rsp]
  0008c	e8 00 00 00 00	 call	 PyObject_GC_Del

; 1004 :     Py_TRASHCAN_SAFE_END(wp)

  00091	48 8b 44 24 20	 mov	 rax, QWORD PTR _tstate$21197[rsp]
  00096	8b 80 94 00 00
	00		 mov	 eax, DWORD PTR [rax+148]
  0009c	ff c8		 dec	 eax
  0009e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _tstate$21197[rsp]
  000a3	89 81 94 00 00
	00		 mov	 DWORD PTR [rcx+148], eax
  000a9	48 8b 44 24 20	 mov	 rax, QWORD PTR _tstate$21197[rsp]
  000ae	48 83 b8 98 00
	00 00 00	 cmp	 QWORD PTR [rax+152], 0
  000b6	74 13		 je	 SHORT $LN2@wrapper_de
  000b8	48 8b 44 24 20	 mov	 rax, QWORD PTR _tstate$21197[rsp]
  000bd	83 b8 94 00 00
	00 00		 cmp	 DWORD PTR [rax+148], 0
  000c4	7f 05		 jg	 SHORT $LN2@wrapper_de
  000c6	e8 00 00 00 00	 call	 _PyTrash_thread_destroy_chain
$LN2@wrapper_de:
  000cb	eb 0a		 jmp	 SHORT $LN1@wrapper_de
$LN11@wrapper_de:
  000cd	48 8b 4c 24 40	 mov	 rcx, QWORD PTR wp$[rsp]
  000d2	e8 00 00 00 00	 call	 _PyTrash_thread_deposit_object
$LN1@wrapper_de:
  000d7	33 c0		 xor	 eax, eax
  000d9	85 c0		 test	 eax, eax
  000db	0f 85 32 ff ff
	ff		 jne	 $LN14@wrapper_de

; 1005 : }

  000e1	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000e5	c3		 ret	 0
wrapper_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_1CO@CLNPCPNE@?$AAa?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAb?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ ; `string'
EXTRN	PyErr_BadArgument:PROC
EXTRN	_Py_FalseStruct:BYTE
EXTRN	_Py_TrueStruct:BYTE
EXTRN	__ImageBase:BYTE
EXTRN	_Py_NotImplementedStruct:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$wrapper_richcompare DD imagerel wrapper_richcompare
	DD	imagerel wrapper_richcompare+672
	DD	imagerel $unwind$wrapper_richcompare
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$wrapper_richcompare DD 011301H
	DD	0e213H
xdata	ENDS
;	COMDAT ??_C@_1CO@CLNPCPNE@?$AAa?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAb?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
CONST	SEGMENT
??_C@_1CO@CLNPCPNE@?$AAa?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAb?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ DB 'a'
	DB	00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, 'N', 00H, 'U', 00H
	DB	'L', 00H, 'L', 00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'b'
	DB	00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, 'N', 00H, 'U', 00H
	DB	'L', 00H, 'L', 00H, 00H, 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT wrapper_richcompare
_TEXT	SEGMENT
b_descr$ = 32
v$ = 40
a_descr$ = 48
result$ = 56
tv87 = 60
tv89 = 64
tv91 = 72
tv93 = 80
tv95 = 88
tv129 = 96
tv131 = 104
a$ = 128
b$ = 136
op$ = 144
wrapper_richcompare PROC				; COMDAT

; 1011 : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 1012 :     int result;
; 1013 :     PyObject *v;
; 1014 :     PyWrapperDescrObject *a_descr, *b_descr;
; 1015 : 
; 1016 :     assert(a != NULL && b != NULL);

  00013	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR a$[rsp], 0
  0001c	74 0b		 je	 SHORT $LN15@wrapper_ri
  0001e	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR b$[rsp], 0
  00027	75 1c		 jne	 SHORT $LN16@wrapper_ri
$LN15@wrapper_ri:
  00029	41 b8 f8 03 00
	00		 mov	 r8d, 1016		; 000003f8H
  0002f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DC@OKEDMLJ@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAc?$AAr?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00036	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@CLNPCPNE@?$AAa?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAb?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
  0003d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00043	33 c0		 xor	 eax, eax
$LN16@wrapper_ri:

; 1017 : 
; 1018 :     /* both arguments should be wrapperobjects */
; 1019 :     if (!Wrapper_Check(a) || !Wrapper_Check(b)) {

  00045	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyMethodWrapper_Type
  0004c	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR a$[rsp]
  00054	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00058	75 15		 jne	 SHORT $LN11@wrapper_ri
  0005a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyMethodWrapper_Type
  00061	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR b$[rsp]
  00069	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0006d	74 20		 je	 SHORT $LN12@wrapper_ri
$LN11@wrapper_ri:

; 1020 :         v = Py_NotImplemented;

  0006f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NotImplementedStruct
  00076	48 89 44 24 28	 mov	 QWORD PTR v$[rsp], rax

; 1021 :         Py_INCREF(v);

  0007b	48 8b 4c 24 28	 mov	 rcx, QWORD PTR v$[rsp]
  00080	e8 00 00 00 00	 call	 _Py_IncRef

; 1022 :         return v;

  00085	48 8b 44 24 28	 mov	 rax, QWORD PTR v$[rsp]
  0008a	e9 f3 01 00 00	 jmp	 $LN13@wrapper_ri
$LN12@wrapper_ri:

; 1023 :     }
; 1024 : 
; 1025 :     /* compare by descriptor address; if the descriptors are the same,
; 1026 :        compare by the objects they're bound to */
; 1027 :     a_descr = ((wrapperobject *)a)->descr;

  0008f	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR a$[rsp]
  00097	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0009b	48 89 44 24 30	 mov	 QWORD PTR a_descr$[rsp], rax

; 1028 :     b_descr = ((wrapperobject *)b)->descr;

  000a0	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR b$[rsp]
  000a8	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000ac	48 89 44 24 20	 mov	 QWORD PTR b_descr$[rsp], rax

; 1029 :     if (a_descr == b_descr) {

  000b1	48 8b 44 24 20	 mov	 rax, QWORD PTR b_descr$[rsp]
  000b6	48 39 44 24 30	 cmp	 QWORD PTR a_descr$[rsp], rax
  000bb	75 4a		 jne	 SHORT $LN10@wrapper_ri

; 1030 :         a = ((wrapperobject *)a)->self;

  000bd	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR a$[rsp]
  000c5	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000c9	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR a$[rsp], rax

; 1031 :         b = ((wrapperobject *)b)->self;

  000d1	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR b$[rsp]
  000d9	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000dd	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR b$[rsp], rax

; 1032 :         return PyObject_RichCompare(a, b, op);

  000e5	44 8b 84 24 90
	00 00 00	 mov	 r8d, DWORD PTR op$[rsp]
  000ed	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR b$[rsp]
  000f5	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR a$[rsp]
  000fd	e8 00 00 00 00	 call	 PyObject_RichCompare
  00102	e9 7b 01 00 00	 jmp	 $LN13@wrapper_ri
$LN10@wrapper_ri:

; 1033 :     }
; 1034 : 
; 1035 :     result = a_descr - b_descr;

  00107	48 8b 44 24 20	 mov	 rax, QWORD PTR b_descr$[rsp]
  0010c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR a_descr$[rsp]
  00111	48 2b c8	 sub	 rcx, rax
  00114	48 8b c1	 mov	 rax, rcx
  00117	48 99		 cdq
  00119	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  0011e	48 f7 f9	 idiv	 rcx
  00121	89 44 24 38	 mov	 DWORD PTR result$[rsp], eax

; 1036 :     switch (op) {

  00125	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR op$[rsp]
  0012c	89 44 24 3c	 mov	 DWORD PTR tv87[rsp], eax
  00130	83 7c 24 3c 05	 cmp	 DWORD PTR tv87[rsp], 5
  00135	0f 87 2f 01 00
	00		 ja	 $LN1@wrapper_ri
  0013b	48 63 44 24 3c	 movsxd	 rax, DWORD PTR tv87[rsp]
  00140	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  00147	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN29@wrapper_ri[rcx+rax*4]
  0014e	48 03 c1	 add	 rax, rcx
  00151	ff e0		 jmp	 rax
$LN7@wrapper_ri:

; 1037 :     case Py_EQ:
; 1038 :         v = TEST_COND(result == 0);

  00153	83 7c 24 38 00	 cmp	 DWORD PTR result$[rsp], 0
  00158	75 0e		 jne	 SHORT $LN17@wrapper_ri
  0015a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  00161	48 89 44 24 40	 mov	 QWORD PTR tv89[rsp], rax
  00166	eb 0c		 jmp	 SHORT $LN18@wrapper_ri
$LN17@wrapper_ri:
  00168	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct
  0016f	48 89 44 24 40	 mov	 QWORD PTR tv89[rsp], rax
$LN18@wrapper_ri:
  00174	48 8b 44 24 40	 mov	 rax, QWORD PTR tv89[rsp]
  00179	48 89 44 24 28	 mov	 QWORD PTR v$[rsp], rax

; 1039 :         break;

  0017e	e9 f0 00 00 00	 jmp	 $LN8@wrapper_ri
$LN6@wrapper_ri:

; 1040 :     case Py_NE:
; 1041 :         v = TEST_COND(result != 0);

  00183	83 7c 24 38 00	 cmp	 DWORD PTR result$[rsp], 0
  00188	74 0e		 je	 SHORT $LN19@wrapper_ri
  0018a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  00191	48 89 44 24 48	 mov	 QWORD PTR tv91[rsp], rax
  00196	eb 0c		 jmp	 SHORT $LN20@wrapper_ri
$LN19@wrapper_ri:
  00198	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct
  0019f	48 89 44 24 48	 mov	 QWORD PTR tv91[rsp], rax
$LN20@wrapper_ri:
  001a4	48 8b 44 24 48	 mov	 rax, QWORD PTR tv91[rsp]
  001a9	48 89 44 24 28	 mov	 QWORD PTR v$[rsp], rax

; 1042 :         break;

  001ae	e9 c0 00 00 00	 jmp	 $LN8@wrapper_ri
$LN5@wrapper_ri:

; 1043 :     case Py_LE:
; 1044 :         v = TEST_COND(result <= 0);

  001b3	83 7c 24 38 00	 cmp	 DWORD PTR result$[rsp], 0
  001b8	7f 0e		 jg	 SHORT $LN21@wrapper_ri
  001ba	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  001c1	48 89 44 24 50	 mov	 QWORD PTR tv93[rsp], rax
  001c6	eb 0c		 jmp	 SHORT $LN22@wrapper_ri
$LN21@wrapper_ri:
  001c8	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct
  001cf	48 89 44 24 50	 mov	 QWORD PTR tv93[rsp], rax
$LN22@wrapper_ri:
  001d4	48 8b 44 24 50	 mov	 rax, QWORD PTR tv93[rsp]
  001d9	48 89 44 24 28	 mov	 QWORD PTR v$[rsp], rax

; 1045 :         break;

  001de	e9 90 00 00 00	 jmp	 $LN8@wrapper_ri
$LN4@wrapper_ri:

; 1046 :     case Py_GE:
; 1047 :         v = TEST_COND(result >= 0);

  001e3	83 7c 24 38 00	 cmp	 DWORD PTR result$[rsp], 0
  001e8	7c 0e		 jl	 SHORT $LN23@wrapper_ri
  001ea	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  001f1	48 89 44 24 58	 mov	 QWORD PTR tv95[rsp], rax
  001f6	eb 0c		 jmp	 SHORT $LN24@wrapper_ri
$LN23@wrapper_ri:
  001f8	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct
  001ff	48 89 44 24 58	 mov	 QWORD PTR tv95[rsp], rax
$LN24@wrapper_ri:
  00204	48 8b 44 24 58	 mov	 rax, QWORD PTR tv95[rsp]
  00209	48 89 44 24 28	 mov	 QWORD PTR v$[rsp], rax

; 1048 :         break;

  0020e	eb 63		 jmp	 SHORT $LN8@wrapper_ri
$LN3@wrapper_ri:

; 1049 :     case Py_LT:
; 1050 :         v = TEST_COND(result < 0);

  00210	83 7c 24 38 00	 cmp	 DWORD PTR result$[rsp], 0
  00215	7d 0e		 jge	 SHORT $LN25@wrapper_ri
  00217	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  0021e	48 89 44 24 60	 mov	 QWORD PTR tv129[rsp], rax
  00223	eb 0c		 jmp	 SHORT $LN26@wrapper_ri
$LN25@wrapper_ri:
  00225	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct
  0022c	48 89 44 24 60	 mov	 QWORD PTR tv129[rsp], rax
$LN26@wrapper_ri:
  00231	48 8b 44 24 60	 mov	 rax, QWORD PTR tv129[rsp]
  00236	48 89 44 24 28	 mov	 QWORD PTR v$[rsp], rax

; 1051 :         break;

  0023b	eb 36		 jmp	 SHORT $LN8@wrapper_ri
$LN2@wrapper_ri:

; 1052 :     case Py_GT:
; 1053 :         v = TEST_COND(result > 0);

  0023d	83 7c 24 38 00	 cmp	 DWORD PTR result$[rsp], 0
  00242	7e 0e		 jle	 SHORT $LN27@wrapper_ri
  00244	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  0024b	48 89 44 24 68	 mov	 QWORD PTR tv131[rsp], rax
  00250	eb 0c		 jmp	 SHORT $LN28@wrapper_ri
$LN27@wrapper_ri:
  00252	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct
  00259	48 89 44 24 68	 mov	 QWORD PTR tv131[rsp], rax
$LN28@wrapper_ri:
  0025e	48 8b 44 24 68	 mov	 rax, QWORD PTR tv131[rsp]
  00263	48 89 44 24 28	 mov	 QWORD PTR v$[rsp], rax

; 1054 :         break;

  00268	eb 09		 jmp	 SHORT $LN8@wrapper_ri
$LN1@wrapper_ri:

; 1055 :     default:
; 1056 :         PyErr_BadArgument();

  0026a	e8 00 00 00 00	 call	 PyErr_BadArgument

; 1057 :         return NULL;

  0026f	33 c0		 xor	 eax, eax
  00271	eb 0f		 jmp	 SHORT $LN13@wrapper_ri
$LN8@wrapper_ri:

; 1058 :     }
; 1059 :     Py_INCREF(v);

  00273	48 8b 4c 24 28	 mov	 rcx, QWORD PTR v$[rsp]
  00278	e8 00 00 00 00	 call	 _Py_IncRef

; 1060 :     return v;

  0027d	48 8b 44 24 28	 mov	 rax, QWORD PTR v$[rsp]
$LN13@wrapper_ri:

; 1061 : }

  00282	48 83 c4 78	 add	 rsp, 120		; 00000078H
  00286	c3		 ret	 0
  00287	90		 npad	 1
$LN29@wrapper_ri:
  00288	00 00 00 00	 DD	 $LN3@wrapper_ri
  0028c	00 00 00 00	 DD	 $LN5@wrapper_ri
  00290	00 00 00 00	 DD	 $LN7@wrapper_ri
  00294	00 00 00 00	 DD	 $LN6@wrapper_ri
  00298	00 00 00 00	 DD	 $LN2@wrapper_ri
  0029c	00 00 00 00	 DD	 $LN4@wrapper_ri
wrapper_richcompare ENDP
_TEXT	ENDS
EXTRN	PyObject_Hash:PROC
EXTRN	_Py_HashPointer:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$wrapper_hash DD imagerel wrapper_hash
	DD	imagerel wrapper_hash+129
	DD	imagerel $unwind$wrapper_hash
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$wrapper_hash DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT wrapper_hash
_TEXT	SEGMENT
y$ = 32
x$ = 40
wp$ = 64
wrapper_hash PROC					; COMDAT

; 1065 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1066 :     Py_hash_t x, y;
; 1067 :     x = _Py_HashPointer(wp->descr);

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR wp$[rsp]
  0000e	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00012	e8 00 00 00 00	 call	 _Py_HashPointer
  00017	48 89 44 24 28	 mov	 QWORD PTR x$[rsp], rax

; 1068 :     if (x == -1)

  0001c	48 83 7c 24 28
	ff		 cmp	 QWORD PTR x$[rsp], -1
  00022	75 09		 jne	 SHORT $LN3@wrapper_ha

; 1069 :         return -1;

  00024	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1
  0002b	eb 4f		 jmp	 SHORT $LN4@wrapper_ha
$LN3@wrapper_ha:

; 1070 :     y = PyObject_Hash(wp->self);

  0002d	48 8b 44 24 40	 mov	 rax, QWORD PTR wp$[rsp]
  00032	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  00036	e8 00 00 00 00	 call	 PyObject_Hash
  0003b	48 89 44 24 20	 mov	 QWORD PTR y$[rsp], rax

; 1071 :     if (y == -1)

  00040	48 83 7c 24 20
	ff		 cmp	 QWORD PTR y$[rsp], -1
  00046	75 09		 jne	 SHORT $LN2@wrapper_ha

; 1072 :         return -1;

  00048	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1
  0004f	eb 2b		 jmp	 SHORT $LN4@wrapper_ha
$LN2@wrapper_ha:

; 1073 :     x = x ^ y;

  00051	48 8b 44 24 20	 mov	 rax, QWORD PTR y$[rsp]
  00056	48 8b 4c 24 28	 mov	 rcx, QWORD PTR x$[rsp]
  0005b	48 33 c8	 xor	 rcx, rax
  0005e	48 8b c1	 mov	 rax, rcx
  00061	48 89 44 24 28	 mov	 QWORD PTR x$[rsp], rax

; 1074 :     if (x == -1)

  00066	48 83 7c 24 28
	ff		 cmp	 QWORD PTR x$[rsp], -1
  0006c	75 09		 jne	 SHORT $LN1@wrapper_ha

; 1075 :         x = -2;

  0006e	48 c7 44 24 28
	fe ff ff ff	 mov	 QWORD PTR x$[rsp], -2
$LN1@wrapper_ha:

; 1076 :     return x;

  00077	48 8b 44 24 28	 mov	 rax, QWORD PTR x$[rsp]
$LN4@wrapper_ha:

; 1077 : }

  0007c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00080	c3		 ret	 0
wrapper_hash ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CJ@NMDBOAPA@?$DMmethod?9wrapper?5?8?$CFs?8?5of?5?$CFs?5objec@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$wrapper_repr DD imagerel wrapper_repr
	DD	imagerel wrapper_repr+71
	DD	imagerel $unwind$wrapper_repr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$wrapper_repr DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT ??_C@_0CJ@NMDBOAPA@?$DMmethod?9wrapper?5?8?$CFs?8?5of?5?$CFs?5objec@
CONST	SEGMENT
??_C@_0CJ@NMDBOAPA@?$DMmethod?9wrapper?5?8?$CFs?8?5of?5?$CFs?5objec@ DB '<'
	DB	'method-wrapper ''%s'' of %s object at %p>', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT wrapper_repr
_TEXT	SEGMENT
wp$ = 48
wrapper_repr PROC					; COMDAT

; 1081 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1082 :     return PyUnicode_FromFormat("<method-wrapper '%s' of %s object at %p>",
; 1083 :                                wp->descr->d_base->name,
; 1084 :                                wp->self->ob_type->tp_name,
; 1085 :                                wp->self);

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR wp$[rsp]
  0000e	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00012	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00016	48 8b 4c 24 30	 mov	 rcx, QWORD PTR wp$[rsp]
  0001b	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  0001f	48 8b 89 80 00
	00 00		 mov	 rcx, QWORD PTR [rcx+128]
  00026	48 8b 54 24 30	 mov	 rdx, QWORD PTR wp$[rsp]
  0002b	4c 8b 4a 68	 mov	 r9, QWORD PTR [rdx+104]
  0002f	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  00033	48 8b 11	 mov	 rdx, QWORD PTR [rcx]
  00036	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CJ@NMDBOAPA@?$DMmethod?9wrapper?5?8?$CFs?8?5of?5?$CFs?5objec@
  0003d	e8 00 00 00 00	 call	 PyUnicode_FromFormat

; 1086 : }

  00042	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00046	c3		 ret	 0
wrapper_repr ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$wrapper_objclass DD imagerel wrapper_objclass
	DD	imagerel wrapper_objclass+47
	DD	imagerel $unwind$wrapper_objclass
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$wrapper_objclass DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT wrapper_objclass
_TEXT	SEGMENT
c$ = 32
wp$ = 64
wrapper_objclass PROC					; COMDAT

; 1095 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1096 :     PyObject *c = (PyObject *)PyDescr_TYPE(wp->descr);

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR wp$[rsp]
  0000e	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00012	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00016	48 89 44 24 20	 mov	 QWORD PTR c$[rsp], rax

; 1097 : 
; 1098 :     Py_INCREF(c);

  0001b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR c$[rsp]
  00020	e8 00 00 00 00	 call	 _Py_IncRef

; 1099 :     return c;

  00025	48 8b 44 24 20	 mov	 rax, QWORD PTR c$[rsp]

; 1100 : }

  0002a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0002e	c3		 ret	 0
wrapper_objclass ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$wrapper_name DD imagerel wrapper_name
	DD	imagerel wrapper_name+48
	DD	imagerel $unwind$wrapper_name
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$wrapper_name DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT wrapper_name
_TEXT	SEGMENT
s$ = 32
wp$ = 64
wrapper_name PROC					; COMDAT

; 1104 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1105 :     const char *s = wp->descr->d_base->name;

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR wp$[rsp]
  0000e	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00012	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  00019	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0001c	48 89 44 24 20	 mov	 QWORD PTR s$[rsp], rax

; 1106 : 
; 1107 :     return PyUnicode_FromString(s);

  00021	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  00026	e8 00 00 00 00	 call	 PyUnicode_FromString

; 1108 : }

  0002b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0002f	c3		 ret	 0
wrapper_name ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$wrapper_doc DD imagerel wrapper_doc
	DD	imagerel wrapper_doc+80
	DD	imagerel $unwind$wrapper_doc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$wrapper_doc DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT wrapper_doc
_TEXT	SEGMENT
s$ = 32
wp$ = 64
wrapper_doc PROC					; COMDAT

; 1112 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1113 :     const char *s = wp->descr->d_base->doc;

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR wp$[rsp]
  0000e	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00012	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  00019	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0001d	48 89 44 24 20	 mov	 QWORD PTR s$[rsp], rax

; 1114 : 
; 1115 :     if (s == NULL) {

  00022	48 83 7c 24 20
	00		 cmp	 QWORD PTR s$[rsp], 0
  00028	75 17		 jne	 SHORT $LN2@wrapper_do

; 1116 :         Py_INCREF(Py_None);

  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00031	e8 00 00 00 00	 call	 _Py_IncRef

; 1117 :         return Py_None;

  00036	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0003d	eb 0c		 jmp	 SHORT $LN3@wrapper_do

; 1118 :     }
; 1119 :     else {

  0003f	eb 0a		 jmp	 SHORT $LN1@wrapper_do
$LN2@wrapper_do:

; 1120 :         return PyUnicode_FromString(s);

  00041	48 8b 4c 24 20	 mov	 rcx, QWORD PTR s$[rsp]
  00046	e8 00 00 00 00	 call	 PyUnicode_FromString
$LN1@wrapper_do:
$LN3@wrapper_do:

; 1121 :     }
; 1122 : }

  0004b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004f	c3		 ret	 0
wrapper_doc ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$wrapper_qualname DD imagerel wrapper_qualname
	DD	imagerel wrapper_qualname+28
	DD	imagerel $unwind$wrapper_qualname
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$wrapper_qualname DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT wrapper_qualname
_TEXT	SEGMENT
wp$ = 48
wrapper_qualname PROC					; COMDAT

; 1126 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1127 :     return descr_get_qualname((PyDescrObject *)wp->descr);

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR wp$[rsp]
  0000e	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00012	e8 00 00 00 00	 call	 descr_get_qualname

; 1128 : }

  00017	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001b	c3		 ret	 0
wrapper_qualname ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CK@OFHOLNDN@wrapper?5?$CFs?5doesn?8t?5take?5keyword?5@ ; `string'
EXTRN	PyDict_Size:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$wrapper_call DD imagerel wrapper_call
	DD	imagerel wrapper_call+255
	DD	imagerel $unwind$wrapper_call
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$wrapper_call DD 011301H
	DD	08213H
xdata	ENDS
;	COMDAT ??_C@_0CK@OFHOLNDN@wrapper?5?$CFs?5doesn?8t?5take?5keyword?5@
CONST	SEGMENT
??_C@_0CK@OFHOLNDN@wrapper?5?$CFs?5doesn?8t?5take?5keyword?5@ DB 'wrapper'
	DB	' %s doesn''t take keyword arguments', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT wrapper_call
_TEXT	SEGMENT
self$ = 32
wrapper$ = 40
wk$21326 = 48
wp$ = 80
args$ = 88
kwds$ = 96
wrapper_call PROC					; COMDAT

; 1140 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1141 :     wrapperfunc wrapper = wp->descr->d_base->wrapper;

  00013	48 8b 44 24 50	 mov	 rax, QWORD PTR wp$[rsp]
  00018	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0001c	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  00023	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  00027	48 89 44 24 28	 mov	 QWORD PTR wrapper$[rsp], rax

; 1142 :     PyObject *self = wp->self;

  0002c	48 8b 44 24 50	 mov	 rax, QWORD PTR wp$[rsp]
  00031	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00035	48 89 44 24 20	 mov	 QWORD PTR self$[rsp], rax

; 1143 : 
; 1144 :     if (wp->descr->d_base->flags & PyWrapperFlag_KEYWORDS) {

  0003a	48 8b 44 24 50	 mov	 rax, QWORD PTR wp$[rsp]
  0003f	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00043	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  0004a	8b 40 28	 mov	 eax, DWORD PTR [rax+40]
  0004d	83 e0 01	 and	 eax, 1
  00050	85 c0		 test	 eax, eax
  00052	74 2f		 je	 SHORT $LN3@wrapper_ca

; 1145 :         wrapperfunc_kwds wk = (wrapperfunc_kwds)wrapper;

  00054	48 8b 44 24 28	 mov	 rax, QWORD PTR wrapper$[rsp]
  00059	48 89 44 24 30	 mov	 QWORD PTR wk$21326[rsp], rax

; 1146 :         return (*wk)(self, args, wp->descr->d_wrapped, kwds);

  0005e	48 8b 44 24 50	 mov	 rax, QWORD PTR wp$[rsp]
  00063	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00067	4c 8b 4c 24 60	 mov	 r9, QWORD PTR kwds$[rsp]
  0006c	4c 8b 80 88 00
	00 00		 mov	 r8, QWORD PTR [rax+136]
  00073	48 8b 54 24 58	 mov	 rdx, QWORD PTR args$[rsp]
  00078	48 8b 4c 24 20	 mov	 rcx, QWORD PTR self$[rsp]
  0007d	ff 54 24 30	 call	 QWORD PTR wk$21326[rsp]
  00081	eb 77		 jmp	 SHORT $LN4@wrapper_ca
$LN3@wrapper_ca:

; 1147 :     }
; 1148 : 
; 1149 :     if (kwds != NULL && (!PyDict_Check(kwds) || PyDict_Size(kwds) != 0)) {

  00083	48 83 7c 24 60
	00		 cmp	 QWORD PTR kwds$[rsp], 0
  00089	74 51		 je	 SHORT $LN2@wrapper_ca
  0008b	48 8b 44 24 60	 mov	 rax, QWORD PTR kwds$[rsp]
  00090	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00094	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0009a	25 00 00 00 20	 and	 eax, 536870912		; 20000000H
  0009f	85 c0		 test	 eax, eax
  000a1	74 0f		 je	 SHORT $LN1@wrapper_ca
  000a3	48 8b 4c 24 60	 mov	 rcx, QWORD PTR kwds$[rsp]
  000a8	e8 00 00 00 00	 call	 PyDict_Size
  000ad	48 85 c0	 test	 rax, rax
  000b0	74 2a		 je	 SHORT $LN2@wrapper_ca
$LN1@wrapper_ca:

; 1150 :         PyErr_Format(PyExc_TypeError,
; 1151 :                      "wrapper %s doesn't take keyword arguments",
; 1152 :                      wp->descr->d_base->name);

  000b2	48 8b 44 24 50	 mov	 rax, QWORD PTR wp$[rsp]
  000b7	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000bb	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  000c2	4c 8b 00	 mov	 r8, QWORD PTR [rax]
  000c5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CK@OFHOLNDN@wrapper?5?$CFs?5doesn?8t?5take?5keyword?5@
  000cc	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000d3	e8 00 00 00 00	 call	 PyErr_Format

; 1153 :         return NULL;

  000d8	33 c0		 xor	 eax, eax
  000da	eb 1e		 jmp	 SHORT $LN4@wrapper_ca
$LN2@wrapper_ca:

; 1154 :     }
; 1155 :     return (*wrapper)(self, args, wp->descr->d_wrapped);

  000dc	48 8b 44 24 50	 mov	 rax, QWORD PTR wp$[rsp]
  000e1	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000e5	4c 8b 80 88 00
	00 00		 mov	 r8, QWORD PTR [rax+136]
  000ec	48 8b 54 24 58	 mov	 rdx, QWORD PTR args$[rsp]
  000f1	48 8b 4c 24 20	 mov	 rcx, QWORD PTR self$[rsp]
  000f6	ff 54 24 28	 call	 QWORD PTR wrapper$[rsp]
$LN4@wrapper_ca:

; 1156 : }

  000fa	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000fe	c3		 ret	 0
wrapper_call ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BB@LCFHCCFN@wrapper_traverse?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$wrapper_traverse DD imagerel wrapper_traverse
	DD	imagerel wrapper_traverse+216
	DD	imagerel $unwind$wrapper_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$wrapper_traverse DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT ??_C@_0BB@LCFHCCFN@wrapper_traverse?$AA@
CONST	SEGMENT
??_C@_0BB@LCFHCCFN@wrapper_traverse?$AA@ DB 'wrapper_traverse', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT wrapper_traverse
_TEXT	SEGMENT
wp$ = 32
vret$21350 = 40
vret$21358 = 44
self$ = 64
visit$ = 72
arg$ = 80
wrapper_traverse PROC					; COMDAT

; 1160 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1161 :     wrapperobject *wp = (wrapperobject *)self;

  00013	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00018	48 89 44 24 20	 mov	 QWORD PTR wp$[rsp], rax
$LN12@wrapper_tr:

; 1162 :     Py_VISIT(wp->descr);

  0001d	e8 00 00 00 00	 call	 _Py_PXCTX
  00022	85 c0		 test	 eax, eax
  00024	74 1c		 je	 SHORT $LN9@wrapper_tr
  00026	45 33 c9	 xor	 r9d, r9d
  00029	41 b8 8a 04 00
	00		 mov	 r8d, 1162		; 0000048aH
  0002f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@CMLMJMOL@?4?4?2Objects?2descrobject?4c?$AA@
  00036	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@LCFHCCFN@wrapper_traverse?$AA@
  0003d	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN9@wrapper_tr:
  00042	48 8b 44 24 20	 mov	 rax, QWORD PTR wp$[rsp]
  00047	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  0004c	74 23		 je	 SHORT $LN8@wrapper_tr
  0004e	48 8b 54 24 50	 mov	 rdx, QWORD PTR arg$[rsp]
  00053	48 8b 44 24 20	 mov	 rax, QWORD PTR wp$[rsp]
  00058	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  0005c	ff 54 24 48	 call	 QWORD PTR visit$[rsp]
  00060	89 44 24 28	 mov	 DWORD PTR vret$21350[rsp], eax
  00064	83 7c 24 28 00	 cmp	 DWORD PTR vret$21350[rsp], 0
  00069	74 06		 je	 SHORT $LN7@wrapper_tr
  0006b	8b 44 24 28	 mov	 eax, DWORD PTR vret$21350[rsp]
  0006f	eb 62		 jmp	 SHORT $LN13@wrapper_tr
$LN7@wrapper_tr:
$LN8@wrapper_tr:
  00071	33 c0		 xor	 eax, eax
  00073	85 c0		 test	 eax, eax
  00075	75 a6		 jne	 SHORT $LN12@wrapper_tr
$LN6@wrapper_tr:

; 1163 :     Py_VISIT(wp->self);

  00077	e8 00 00 00 00	 call	 _Py_PXCTX
  0007c	85 c0		 test	 eax, eax
  0007e	74 1c		 je	 SHORT $LN3@wrapper_tr
  00080	45 33 c9	 xor	 r9d, r9d
  00083	41 b8 8b 04 00
	00		 mov	 r8d, 1163		; 0000048bH
  00089	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@CMLMJMOL@?4?4?2Objects?2descrobject?4c?$AA@
  00090	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@LCFHCCFN@wrapper_traverse?$AA@
  00097	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@wrapper_tr:
  0009c	48 8b 44 24 20	 mov	 rax, QWORD PTR wp$[rsp]
  000a1	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  000a6	74 23		 je	 SHORT $LN2@wrapper_tr
  000a8	48 8b 54 24 50	 mov	 rdx, QWORD PTR arg$[rsp]
  000ad	48 8b 44 24 20	 mov	 rax, QWORD PTR wp$[rsp]
  000b2	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  000b6	ff 54 24 48	 call	 QWORD PTR visit$[rsp]
  000ba	89 44 24 2c	 mov	 DWORD PTR vret$21358[rsp], eax
  000be	83 7c 24 2c 00	 cmp	 DWORD PTR vret$21358[rsp], 0
  000c3	74 06		 je	 SHORT $LN1@wrapper_tr
  000c5	8b 44 24 2c	 mov	 eax, DWORD PTR vret$21358[rsp]
  000c9	eb 08		 jmp	 SHORT $LN13@wrapper_tr
$LN1@wrapper_tr:
$LN2@wrapper_tr:
  000cb	33 c0		 xor	 eax, eax
  000cd	85 c0		 test	 eax, eax
  000cf	75 a6		 jne	 SHORT $LN6@wrapper_tr

; 1164 :     return 0;

  000d1	33 c0		 xor	 eax, eax
$LN13@wrapper_tr:

; 1165 : }

  000d3	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000d7	c3		 ret	 0
wrapper_traverse ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@MINLAABF@PyWrapper_New?$AA@		; `string'
PUBLIC	??_C@_1KK@HIDNDGCB@?$AA_?$AAP?$AAy?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA_?$AAR?$AAe?$AAa?$AAl?$AAI?$AAs?$AAS?$AAu?$AAb?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAO?$AAb?$AAj?$AAe@ ; `string'
PUBLIC	??_C@_1FI@CIOIGNMK@?$AAP?$AAy?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA_?$AAT?$AAy?$AAp?$AAe?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAd?$AA?0?$AA?5?$AA?$CG?$AAP?$AAy?$AAW?$AAr?$AAa?$AAp?$AAp?$AAe?$AAr@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyWrapper_New DD imagerel $LN15
	DD	imagerel $LN15+513
	DD	imagerel $unwind$PyWrapper_New
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyWrapper_New DD 010e01H
	DD	0c20eH
xdata	ENDS
;	COMDAT ??_C@_0O@MINLAABF@PyWrapper_New?$AA@
CONST	SEGMENT
??_C@_0O@MINLAABF@PyWrapper_New?$AA@ DB 'PyWrapper_New', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1KK@HIDNDGCB@?$AA_?$AAP?$AAy?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA_?$AAR?$AAe?$AAa?$AAl?$AAI?$AAs?$AAS?$AAu?$AAb?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAO?$AAb?$AAj?$AAe@
CONST	SEGMENT
??_C@_1KK@HIDNDGCB@?$AA_?$AAP?$AAy?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA_?$AAR?$AAe?$AAa?$AAl?$AAI?$AAs?$AAS?$AAu?$AAb?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAO?$AAb?$AAj?$AAe@ DB '_'
	DB	00H, 'P', 00H, 'y', 00H, 'O', 00H, 'b', 00H, 'j', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, '_', 00H, 'R', 00H, 'e', 00H, 'a', 00H, 'l'
	DB	00H, 'I', 00H, 's', 00H, 'S', 00H, 'u', 00H, 'b', 00H, 'c', 00H
	DB	'l', 00H, 'a', 00H, 's', 00H, 's', 00H, '(', 00H, '(', 00H, 'P'
	DB	00H, 'y', 00H, 'O', 00H, 'b', 00H, 'j', 00H, 'e', 00H, 'c', 00H
	DB	't', 00H, ' ', 00H, '*', 00H, ')', 00H, 'P', 00H, 'y', 00H, '_'
	DB	00H, 'T', 00H, 'Y', 00H, 'P', 00H, 'E', 00H, '(', 00H, 's', 00H
	DB	'e', 00H, 'l', 00H, 'f', 00H, ')', 00H, ',', 00H, ' ', 00H, '('
	DB	00H, 'P', 00H, 'y', 00H, 'O', 00H, 'b', 00H, 'j', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, ' ', 00H, '*', 00H, ')', 00H, 'P', 00H, 'y'
	DB	00H, 'D', 00H, 'e', 00H, 's', 00H, 'c', 00H, 'r', 00H, '_', 00H
	DB	'T', 00H, 'Y', 00H, 'P', 00H, 'E', 00H, '(', 00H, 'd', 00H, 'e'
	DB	00H, 's', 00H, 'c', 00H, 'r', 00H, ')', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1FI@CIOIGNMK@?$AAP?$AAy?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA_?$AAT?$AAy?$AAp?$AAe?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAd?$AA?0?$AA?5?$AA?$CG?$AAP?$AAy?$AAW?$AAr?$AAa?$AAp?$AAp?$AAe?$AAr@
CONST	SEGMENT
??_C@_1FI@CIOIGNMK@?$AAP?$AAy?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA_?$AAT?$AAy?$AAp?$AAe?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAd?$AA?0?$AA?5?$AA?$CG?$AAP?$AAy?$AAW?$AAr?$AAa?$AAp?$AAp?$AAe?$AAr@ DB 'P'
	DB	00H, 'y', 00H, 'O', 00H, 'b', 00H, 'j', 00H, 'e', 00H, 'c', 00H
	DB	't', 00H, '_', 00H, 'T', 00H, 'y', 00H, 'p', 00H, 'e', 00H, 'C'
	DB	00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, '(', 00H, 'd', 00H
	DB	',', 00H, ' ', 00H, '&', 00H, 'P', 00H, 'y', 00H, 'W', 00H, 'r'
	DB	00H, 'a', 00H, 'p', 00H, 'p', 00H, 'e', 00H, 'r', 00H, 'D', 00H
	DB	'e', 00H, 's', 00H, 'c', 00H, 'r', 00H, '_', 00H, 'T', 00H, 'y'
	DB	00H, 'p', 00H, 'e', 00H, ')', 00H, 00H, 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyWrapper_New
_TEXT	SEGMENT
descr$ = 48
wp$ = 56
g$21408 = 64
tv91 = 72
tv144 = 80
d$ = 112
self$ = 120
PyWrapper_New PROC					; COMDAT

; 1207 : {

$LN15:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 1208 :     wrapperobject *wp;
; 1209 :     PyWrapperDescrObject *descr;
; 1210 : 
; 1211 :     assert(PyObject_TypeCheck(d, &PyWrapperDescr_Type));

  0000e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyWrapperDescr_Type
  00015	48 8b 4c 24 70	 mov	 rcx, QWORD PTR d$[rsp]
  0001a	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0001e	74 35		 je	 SHORT $LN9@PyWrapper_
  00020	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyWrapperDescr_Type
  00027	48 8b 44 24 70	 mov	 rax, QWORD PTR d$[rsp]
  0002c	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  00030	e8 00 00 00 00	 call	 PyType_IsSubtype
  00035	85 c0		 test	 eax, eax
  00037	75 1c		 jne	 SHORT $LN9@PyWrapper_
  00039	41 b8 bb 04 00
	00		 mov	 r8d, 1211		; 000004bbH
  0003f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DC@OKEDMLJ@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAc?$AAr?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00046	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FI@CIOIGNMK@?$AAP?$AAy?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA_?$AAT?$AAy?$AAp?$AAe?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAd?$AA?0?$AA?5?$AA?$CG?$AAP?$AAy?$AAW?$AAr?$AAa?$AAp?$AAp?$AAe?$AAr@
  0004d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00053	33 c0		 xor	 eax, eax
$LN9@PyWrapper_:

; 1212 :     descr = (PyWrapperDescrObject *)d;

  00055	48 8b 44 24 70	 mov	 rax, QWORD PTR d$[rsp]
  0005a	48 89 44 24 30	 mov	 QWORD PTR descr$[rsp], rax

; 1213 :     assert(_PyObject_RealIsSubclass((PyObject *)Py_TYPE(self),
; 1214 :                                     (PyObject *)PyDescr_TYPE(descr)));

  0005f	48 8b 44 24 30	 mov	 rax, QWORD PTR descr$[rsp]
  00064	48 8b 50 60	 mov	 rdx, QWORD PTR [rax+96]
  00068	48 8b 44 24 78	 mov	 rax, QWORD PTR self$[rsp]
  0006d	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  00071	e8 00 00 00 00	 call	 _PyObject_RealIsSubclass
  00076	85 c0		 test	 eax, eax
  00078	75 1c		 jne	 SHORT $LN10@PyWrapper_
  0007a	41 b8 be 04 00
	00		 mov	 r8d, 1214		; 000004beH
  00080	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DC@OKEDMLJ@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAc?$AAr?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00087	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1KK@HIDNDGCB@?$AA_?$AAP?$AAy?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA_?$AAR?$AAe?$AAa?$AAl?$AAI?$AAs?$AAS?$AAu?$AAb?$AAc?$AAl?$AAa?$AAs?$AAs?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAO?$AAb?$AAj?$AAe@
  0008e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00094	33 c0		 xor	 eax, eax
$LN10@PyWrapper_:

; 1215 : 
; 1216 :     wp = PyObject_GC_New(wrapperobject, &_PyMethodWrapper_Type);

  00096	e8 00 00 00 00	 call	 _Py_PXCTX
  0009b	85 c0		 test	 eax, eax
  0009d	74 13		 je	 SHORT $LN11@PyWrapper_
  0009f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_PyMethodWrapper_Type
  000a6	e8 00 00 00 00	 call	 _PxObject_New
  000ab	48 89 44 24 48	 mov	 QWORD PTR tv91[rsp], rax
  000b0	eb 11		 jmp	 SHORT $LN12@PyWrapper_
$LN11@PyWrapper_:
  000b2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_PyMethodWrapper_Type
  000b9	e8 00 00 00 00	 call	 _PyObject_GC_New
  000be	48 89 44 24 48	 mov	 QWORD PTR tv91[rsp], rax
$LN12@PyWrapper_:
  000c3	48 8b 44 24 48	 mov	 rax, QWORD PTR tv91[rsp]
  000c8	48 89 44 24 38	 mov	 QWORD PTR wp$[rsp], rax

; 1217 :     if (wp != NULL) {

  000cd	48 83 7c 24 38
	00		 cmp	 QWORD PTR wp$[rsp], 0
  000d3	0f 84 1e 01 00
	00		 je	 $LN6@PyWrapper_

; 1218 :         Py_INCREF(descr);

  000d9	48 8b 4c 24 30	 mov	 rcx, QWORD PTR descr$[rsp]
  000de	e8 00 00 00 00	 call	 _Py_IncRef

; 1219 :         wp->descr = descr;

  000e3	48 8b 44 24 38	 mov	 rax, QWORD PTR wp$[rsp]
  000e8	48 8b 4c 24 30	 mov	 rcx, QWORD PTR descr$[rsp]
  000ed	48 89 48 60	 mov	 QWORD PTR [rax+96], rcx

; 1220 :         Py_INCREF(self);

  000f1	48 8b 4c 24 78	 mov	 rcx, QWORD PTR self$[rsp]
  000f6	e8 00 00 00 00	 call	 _Py_IncRef

; 1221 :         wp->self = self;

  000fb	48 8b 44 24 38	 mov	 rax, QWORD PTR wp$[rsp]
  00100	48 8b 4c 24 78	 mov	 rcx, QWORD PTR self$[rsp]
  00105	48 89 48 68	 mov	 QWORD PTR [rax+104], rcx

; 1222 :         _PyObject_GC_TRACK(wp);

  00109	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00111	4c 8b 4c 24 38	 mov	 r9, QWORD PTR wp$[rsp]
  00116	41 b8 c6 04 00
	00		 mov	 r8d, 1222		; 000004c6H
  0011c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@CMLMJMOL@?4?4?2Objects?2descrobject?4c?$AA@
  00123	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@MINLAABF@PyWrapper_New?$AA@
  0012a	e8 00 00 00 00	 call	 _PyParallel_Guard
  0012f	85 c0		 test	 eax, eax
  00131	0f 85 c0 00 00
	00		 jne	 $LN5@PyWrapper_
$LN4@PyWrapper_:
  00137	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0013f	4c 8b 4c 24 38	 mov	 r9, QWORD PTR wp$[rsp]
  00144	41 b8 c6 04 00
	00		 mov	 r8d, 1222		; 000004c6H
  0014a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@CMLMJMOL@?4?4?2Objects?2descrobject?4c?$AA@
  00151	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@MINLAABF@PyWrapper_New?$AA@
  00158	e8 00 00 00 00	 call	 _PyParallel_Guard
  0015d	85 c0		 test	 eax, eax
  0015f	74 0b		 je	 SHORT $LN13@PyWrapper_
  00161	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR tv144[rsp], 0
  0016a	eb 0e		 jmp	 SHORT $LN14@PyWrapper_
$LN13@PyWrapper_:
  0016c	48 8b 44 24 38	 mov	 rax, QWORD PTR wp$[rsp]
  00171	48 83 e8 18	 sub	 rax, 24
  00175	48 89 44 24 50	 mov	 QWORD PTR tv144[rsp], rax
$LN14@PyWrapper_:
  0017a	48 8b 44 24 50	 mov	 rax, QWORD PTR tv144[rsp]
  0017f	48 89 44 24 40	 mov	 QWORD PTR g$21408[rsp], rax
  00184	48 8b 44 24 40	 mov	 rax, QWORD PTR g$21408[rsp]
  00189	48 83 78 10 fe	 cmp	 QWORD PTR [rax+16], -2
  0018e	74 0c		 je	 SHORT $LN1@PyWrapper_
  00190	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@
  00197	e8 00 00 00 00	 call	 Py_FatalError
$LN1@PyWrapper_:
  0019c	48 8b 44 24 40	 mov	 rax, QWORD PTR g$21408[rsp]
  001a1	48 c7 40 10 fd
	ff ff ff	 mov	 QWORD PTR [rax+16], -3
  001a9	48 8b 44 24 40	 mov	 rax, QWORD PTR g$21408[rsp]
  001ae	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR _PyGC_generation0
  001b5	48 89 08	 mov	 QWORD PTR [rax], rcx
  001b8	48 8b 44 24 40	 mov	 rax, QWORD PTR g$21408[rsp]
  001bd	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR _PyGC_generation0
  001c4	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  001c8	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  001cc	48 8b 44 24 40	 mov	 rax, QWORD PTR g$21408[rsp]
  001d1	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  001d5	48 8b 4c 24 40	 mov	 rcx, QWORD PTR g$21408[rsp]
  001da	48 89 08	 mov	 QWORD PTR [rax], rcx
  001dd	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyGC_generation0
  001e4	48 8b 4c 24 40	 mov	 rcx, QWORD PTR g$21408[rsp]
  001e9	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  001ed	33 c0		 xor	 eax, eax
  001ef	85 c0		 test	 eax, eax
  001f1	0f 85 40 ff ff
	ff		 jne	 $LN4@PyWrapper_
$LN5@PyWrapper_:
$LN6@PyWrapper_:

; 1223 :     }
; 1224 :     return (PyObject *)wp;

  001f7	48 8b 44 24 38	 mov	 rax, QWORD PTR wp$[rsp]

; 1225 : }

  001fc	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00200	c3		 ret	 0
PyWrapper_New ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$property_getter DD imagerel property_getter
	DD	imagerel property_getter+40
	DD	imagerel $unwind$property_getter
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$property_getter DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT property_getter
_TEXT	SEGMENT
self$ = 48
getter$ = 56
property_getter PROC					; COMDAT

; 1286 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1287 :     return property_copy(self, getter, NULL, NULL);

  0000e	45 33 c9	 xor	 r9d, r9d
  00011	45 33 c0	 xor	 r8d, r8d
  00014	48 8b 54 24 38	 mov	 rdx, QWORD PTR getter$[rsp]
  00019	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self$[rsp]
  0001e	e8 00 00 00 00	 call	 property_copy

; 1288 : }

  00023	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00027	c3		 ret	 0
property_getter ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$property_setter DD imagerel property_setter
	DD	imagerel property_setter+39
	DD	imagerel $unwind$property_setter
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$property_setter DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT property_setter
_TEXT	SEGMENT
self$ = 48
setter$ = 56
property_setter PROC					; COMDAT

; 1296 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1297 :     return property_copy(self, NULL, setter, NULL);

  0000e	45 33 c9	 xor	 r9d, r9d
  00011	4c 8b 44 24 38	 mov	 r8, QWORD PTR setter$[rsp]
  00016	33 d2		 xor	 edx, edx
  00018	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self$[rsp]
  0001d	e8 00 00 00 00	 call	 property_copy

; 1298 : }

  00022	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00026	c3		 ret	 0
property_setter ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$property_deleter DD imagerel property_deleter
	DD	imagerel property_deleter+39
	DD	imagerel $unwind$property_deleter
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$property_deleter DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT property_deleter
_TEXT	SEGMENT
self$ = 48
deleter$ = 56
property_deleter PROC					; COMDAT

; 1306 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1307 :     return property_copy(self, NULL, NULL, deleter);

  0000e	4c 8b 4c 24 38	 mov	 r9, QWORD PTR deleter$[rsp]
  00013	45 33 c0	 xor	 r8d, r8d
  00016	33 d2		 xor	 edx, edx
  00018	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self$[rsp]
  0001d	e8 00 00 00 00	 call	 property_copy

; 1308 : }

  00022	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00026	c3		 ret	 0
property_deleter ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BB@KKLEGDKA@property_dealloc?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$property_dealloc DD imagerel property_dealloc
	DD	imagerel property_dealloc+411
	DD	imagerel $unwind$property_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$property_dealloc DD 010901H
	DD	0a209H
xdata	ENDS
;	COMDAT ??_C@_0BB@KKLEGDKA@property_dealloc?$AA@
CONST	SEGMENT
??_C@_0BB@KKLEGDKA@property_dealloc?$AA@ DB 'property_dealloc', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT property_dealloc
_TEXT	SEGMENT
gs$ = 48
g$21484 = 56
tv79 = 64
self$ = 96
property_dealloc PROC					; COMDAT

; 1321 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 1322 :     propertyobject *gs = (propertyobject *)self;

  00009	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  0000e	48 89 44 24 30	 mov	 QWORD PTR gs$[rsp], rax

; 1323 : 
; 1324 :     _PyObject_GC_UNTRACK(self);

  00013	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0001b	4c 8b 4c 24 60	 mov	 r9, QWORD PTR self$[rsp]
  00020	41 b8 2c 05 00
	00		 mov	 r8d, 1324		; 0000052cH
  00026	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@CMLMJMOL@?4?4?2Objects?2descrobject?4c?$AA@
  0002d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@KKLEGDKA@property_dealloc?$AA@
  00034	e8 00 00 00 00	 call	 _PyParallel_Guard
  00039	85 c0		 test	 eax, eax
  0003b	0f 85 c1 00 00
	00		 jne	 $LN20@property_d
$LN19@property_d:
  00041	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00049	4c 8b 4c 24 60	 mov	 r9, QWORD PTR self$[rsp]
  0004e	41 b8 2c 05 00
	00		 mov	 r8d, 1324		; 0000052cH
  00054	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@CMLMJMOL@?4?4?2Objects?2descrobject?4c?$AA@
  0005b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@KKLEGDKA@property_dealloc?$AA@
  00062	e8 00 00 00 00	 call	 _PyParallel_Guard
  00067	85 c0		 test	 eax, eax
  00069	74 0b		 je	 SHORT $LN23@property_d
  0006b	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR tv79[rsp], 0
  00074	eb 0e		 jmp	 SHORT $LN24@property_d
$LN23@property_d:
  00076	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  0007b	48 83 e8 18	 sub	 rax, 24
  0007f	48 89 44 24 40	 mov	 QWORD PTR tv79[rsp], rax
$LN24@property_d:
  00084	48 8b 44 24 40	 mov	 rax, QWORD PTR tv79[rsp]
  00089	48 89 44 24 38	 mov	 QWORD PTR g$21484[rsp], rax
  0008e	48 8b 44 24 38	 mov	 rax, QWORD PTR g$21484[rsp]
  00093	48 83 78 10 fe	 cmp	 QWORD PTR [rax+16], -2
  00098	75 1c		 jne	 SHORT $LN25@property_d
  0009a	41 b8 2c 05 00
	00		 mov	 r8d, 1324		; 0000052cH
  000a0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DC@OKEDMLJ@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAd?$AAe?$AAs?$AAc?$AAr?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  000a7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EM@HFMJMDDM@?$AAg?$AA?9?$AA?$DO?$AAg?$AAc?$AA?4?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AAG?$AAC?$AA_?$AAR?$AAE?$AAF?$AAS?$AA_?$AAU?$AAN?$AAT?$AAR@
  000ae	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000b4	33 c0		 xor	 eax, eax
$LN25@property_d:
  000b6	48 8b 44 24 38	 mov	 rax, QWORD PTR g$21484[rsp]
  000bb	48 c7 40 10 fe
	ff ff ff	 mov	 QWORD PTR [rax+16], -2
  000c3	48 8b 44 24 38	 mov	 rax, QWORD PTR g$21484[rsp]
  000c8	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  000cc	48 8b 4c 24 38	 mov	 rcx, QWORD PTR g$21484[rsp]
  000d1	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000d4	48 89 08	 mov	 QWORD PTR [rax], rcx
  000d7	48 8b 44 24 38	 mov	 rax, QWORD PTR g$21484[rsp]
  000dc	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000df	48 8b 4c 24 38	 mov	 rcx, QWORD PTR g$21484[rsp]
  000e4	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  000e8	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  000ec	48 8b 44 24 38	 mov	 rax, QWORD PTR g$21484[rsp]
  000f1	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
  000f8	33 c0		 xor	 eax, eax
  000fa	85 c0		 test	 eax, eax
  000fc	0f 85 3f ff ff
	ff		 jne	 $LN19@property_d
$LN20@property_d:
$LN16@property_d:

; 1325 :     Py_XDECREF(gs->prop_get);

  00102	48 8b 44 24 30	 mov	 rax, QWORD PTR gs$[rsp]
  00107	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  0010c	74 0e		 je	 SHORT $LN13@property_d
  0010e	48 8b 44 24 30	 mov	 rax, QWORD PTR gs$[rsp]
  00113	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00117	e8 00 00 00 00	 call	 _Py_DecRef
$LN13@property_d:
  0011c	33 c0		 xor	 eax, eax
  0011e	85 c0		 test	 eax, eax
  00120	75 e0		 jne	 SHORT $LN16@property_d
$LN12@property_d:

; 1326 :     Py_XDECREF(gs->prop_set);

  00122	48 8b 44 24 30	 mov	 rax, QWORD PTR gs$[rsp]
  00127	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  0012c	74 0e		 je	 SHORT $LN9@property_d
  0012e	48 8b 44 24 30	 mov	 rax, QWORD PTR gs$[rsp]
  00133	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  00137	e8 00 00 00 00	 call	 _Py_DecRef
$LN9@property_d:
  0013c	33 c0		 xor	 eax, eax
  0013e	85 c0		 test	 eax, eax
  00140	75 e0		 jne	 SHORT $LN12@property_d
$LN8@property_d:

; 1327 :     Py_XDECREF(gs->prop_del);

  00142	48 8b 44 24 30	 mov	 rax, QWORD PTR gs$[rsp]
  00147	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  0014c	74 0e		 je	 SHORT $LN5@property_d
  0014e	48 8b 44 24 30	 mov	 rax, QWORD PTR gs$[rsp]
  00153	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  00157	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@property_d:
  0015c	33 c0		 xor	 eax, eax
  0015e	85 c0		 test	 eax, eax
  00160	75 e0		 jne	 SHORT $LN8@property_d
$LN4@property_d:

; 1328 :     Py_XDECREF(gs->prop_doc);

  00162	48 8b 44 24 30	 mov	 rax, QWORD PTR gs$[rsp]
  00167	48 83 78 78 00	 cmp	 QWORD PTR [rax+120], 0
  0016c	74 0e		 je	 SHORT $LN1@property_d
  0016e	48 8b 44 24 30	 mov	 rax, QWORD PTR gs$[rsp]
  00173	48 8b 48 78	 mov	 rcx, QWORD PTR [rax+120]
  00177	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@property_d:
  0017c	33 c0		 xor	 eax, eax
  0017e	85 c0		 test	 eax, eax
  00180	75 e0		 jne	 SHORT $LN4@property_d

; 1329 :     self->ob_type->tp_free(self);

  00182	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00187	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0018b	48 8b 4c 24 60	 mov	 rcx, QWORD PTR self$[rsp]
  00190	ff 90 98 01 00
	00		 call	 QWORD PTR [rax+408]

; 1330 : }

  00196	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0019a	c3		 ret	 0
property_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BF@BENONLLG@unreadable?5attribute?$AA@	; `string'
EXTRN	PyObject_CallFunctionObjArgs:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$property_descr_get DD imagerel property_descr_get
	DD	imagerel property_descr_get+130
	DD	imagerel $unwind$property_descr_get
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$property_descr_get DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT ??_C@_0BF@BENONLLG@unreadable?5attribute?$AA@
CONST	SEGMENT
??_C@_0BF@BENONLLG@unreadable?5attribute?$AA@ DB 'unreadable attribute', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT property_descr_get
_TEXT	SEGMENT
gs$ = 32
self$ = 64
obj$ = 72
type$ = 80
property_descr_get PROC					; COMDAT

; 1334 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1335 :     propertyobject *gs = (propertyobject *)self;

  00013	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00018	48 89 44 24 20	 mov	 QWORD PTR gs$[rsp], rax

; 1336 : 
; 1337 :     if (obj == NULL || obj == Py_None) {

  0001d	48 83 7c 24 48
	00		 cmp	 QWORD PTR obj$[rsp], 0
  00023	74 0e		 je	 SHORT $LN2@property_d@2
  00025	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0002c	48 39 44 24 48	 cmp	 QWORD PTR obj$[rsp], rax
  00031	75 11		 jne	 SHORT $LN3@property_d@2
$LN2@property_d@2:

; 1338 :         Py_INCREF(self);

  00033	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  00038	e8 00 00 00 00	 call	 _Py_IncRef

; 1339 :         return self;

  0003d	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00042	eb 39		 jmp	 SHORT $LN4@property_d@2
$LN3@property_d@2:

; 1340 :     }
; 1341 :     if (gs->prop_get == NULL) {

  00044	48 8b 44 24 20	 mov	 rax, QWORD PTR gs$[rsp]
  00049	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  0004e	75 17		 jne	 SHORT $LN1@property_d@2

; 1342 :         PyErr_SetString(PyExc_AttributeError, "unreadable attribute");

  00050	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BF@BENONLLG@unreadable?5attribute?$AA@
  00057	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_AttributeError
  0005e	e8 00 00 00 00	 call	 PyErr_SetString

; 1343 :         return NULL;

  00063	33 c0		 xor	 eax, eax
  00065	eb 16		 jmp	 SHORT $LN4@property_d@2
$LN1@property_d@2:

; 1344 :     }
; 1345 :     return PyObject_CallFunctionObjArgs(gs->prop_get, obj, NULL);

  00067	45 33 c0	 xor	 r8d, r8d
  0006a	48 8b 54 24 48	 mov	 rdx, QWORD PTR obj$[rsp]
  0006f	48 8b 44 24 20	 mov	 rax, QWORD PTR gs$[rsp]
  00074	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00078	e8 00 00 00 00	 call	 PyObject_CallFunctionObjArgs
$LN4@property_d@2:

; 1346 : }

  0007d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00081	c3		 ret	 0
property_descr_get ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BE@IALDIKKG@can?8t?5set?5attribute?$AA@	; `string'
PUBLIC	??_C@_0BH@DFKPNNEB@can?8t?5delete?5attribute?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$property_descr_set DD imagerel property_descr_set
	DD	imagerel property_descr_set+226
	DD	imagerel $unwind$property_descr_set
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$property_descr_set DD 011301H
	DD	08213H
xdata	ENDS
;	COMDAT ??_C@_0BE@IALDIKKG@can?8t?5set?5attribute?$AA@
CONST	SEGMENT
??_C@_0BE@IALDIKKG@can?8t?5set?5attribute?$AA@ DB 'can''t set attribute', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@DFKPNNEB@can?8t?5delete?5attribute?$AA@
CONST	SEGMENT
??_C@_0BH@DFKPNNEB@can?8t?5delete?5attribute?$AA@ DB 'can''t delete attri'
	DB	'bute', 00H					; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT property_descr_set
_TEXT	SEGMENT
res$ = 32
gs$ = 40
func$ = 48
tv69 = 56
self$ = 80
obj$ = 88
value$ = 96
property_descr_set PROC					; COMDAT

; 1350 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1351 :     propertyobject *gs = (propertyobject *)self;

  00013	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00018	48 89 44 24 28	 mov	 QWORD PTR gs$[rsp], rax

; 1352 :     PyObject *func, *res;
; 1353 : 
; 1354 :     if (value == NULL)

  0001d	48 83 7c 24 60
	00		 cmp	 QWORD PTR value$[rsp], 0
  00023	75 10		 jne	 SHORT $LN6@property_d@3

; 1355 :         func = gs->prop_del;

  00025	48 8b 44 24 28	 mov	 rax, QWORD PTR gs$[rsp]
  0002a	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  0002e	48 89 44 24 30	 mov	 QWORD PTR func$[rsp], rax

; 1356 :     else

  00033	eb 0e		 jmp	 SHORT $LN5@property_d@3
$LN6@property_d@3:

; 1357 :         func = gs->prop_set;

  00035	48 8b 44 24 28	 mov	 rax, QWORD PTR gs$[rsp]
  0003a	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0003e	48 89 44 24 30	 mov	 QWORD PTR func$[rsp], rax
$LN5@property_d@3:

; 1358 :     if (func == NULL) {

  00043	48 83 7c 24 30
	00		 cmp	 QWORD PTR func$[rsp], 0
  00049	75 3a		 jne	 SHORT $LN4@property_d@3

; 1359 :         PyErr_SetString(PyExc_AttributeError,
; 1360 :                         value == NULL ?
; 1361 :                         "can't delete attribute" :
; 1362 :                 "can't set attribute");

  0004b	48 83 7c 24 60
	00		 cmp	 QWORD PTR value$[rsp], 0
  00051	75 0e		 jne	 SHORT $LN9@property_d@3
  00053	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BH@DFKPNNEB@can?8t?5delete?5attribute?$AA@
  0005a	48 89 44 24 38	 mov	 QWORD PTR tv69[rsp], rax
  0005f	eb 0c		 jmp	 SHORT $LN10@property_d@3
$LN9@property_d@3:
  00061	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BE@IALDIKKG@can?8t?5set?5attribute?$AA@
  00068	48 89 44 24 38	 mov	 QWORD PTR tv69[rsp], rax
$LN10@property_d@3:
  0006d	48 8b 54 24 38	 mov	 rdx, QWORD PTR tv69[rsp]
  00072	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_AttributeError
  00079	e8 00 00 00 00	 call	 PyErr_SetString

; 1363 :         return -1;

  0007e	b8 ff ff ff ff	 mov	 eax, -1
  00083	eb 58		 jmp	 SHORT $LN7@property_d@3
$LN4@property_d@3:

; 1364 :     }
; 1365 :     if (value == NULL)

  00085	48 83 7c 24 60
	00		 cmp	 QWORD PTR value$[rsp], 0
  0008b	75 19		 jne	 SHORT $LN3@property_d@3

; 1366 :         res = PyObject_CallFunctionObjArgs(func, obj, NULL);

  0008d	45 33 c0	 xor	 r8d, r8d
  00090	48 8b 54 24 58	 mov	 rdx, QWORD PTR obj$[rsp]
  00095	48 8b 4c 24 30	 mov	 rcx, QWORD PTR func$[rsp]
  0009a	e8 00 00 00 00	 call	 PyObject_CallFunctionObjArgs
  0009f	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax

; 1367 :     else

  000a4	eb 1c		 jmp	 SHORT $LN2@property_d@3
$LN3@property_d@3:

; 1368 :         res = PyObject_CallFunctionObjArgs(func, obj, value, NULL);

  000a6	45 33 c9	 xor	 r9d, r9d
  000a9	4c 8b 44 24 60	 mov	 r8, QWORD PTR value$[rsp]
  000ae	48 8b 54 24 58	 mov	 rdx, QWORD PTR obj$[rsp]
  000b3	48 8b 4c 24 30	 mov	 rcx, QWORD PTR func$[rsp]
  000b8	e8 00 00 00 00	 call	 PyObject_CallFunctionObjArgs
  000bd	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax
$LN2@property_d@3:

; 1369 :     if (res == NULL)

  000c2	48 83 7c 24 20
	00		 cmp	 QWORD PTR res$[rsp], 0
  000c8	75 07		 jne	 SHORT $LN1@property_d@3

; 1370 :         return -1;

  000ca	b8 ff ff ff ff	 mov	 eax, -1
  000cf	eb 0c		 jmp	 SHORT $LN7@property_d@3
$LN1@property_d@3:

; 1371 :     Py_DECREF(res);

  000d1	48 8b 4c 24 20	 mov	 rcx, QWORD PTR res$[rsp]
  000d6	e8 00 00 00 00	 call	 _Py_DecRef

; 1372 :     return 0;

  000db	33 c0		 xor	 eax, eax
$LN7@property_d@3:

; 1373 : }

  000dd	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e1	c3		 ret	 0
property_descr_set ENDP
_TEXT	ENDS
PUBLIC	??_C@_04CMCOBGCG@OOOO?$AA@			; `string'
EXTRN	PyObject_CallFunction:PROC
EXTRN	PyObject_Type:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$property_copy DD imagerel property_copy
	DD	imagerel property_copy+591
	DD	imagerel $unwind$property_copy
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$property_copy DD 011801H
	DD	0e218H
xdata	ENDS
;	COMDAT ??_C@_04CMCOBGCG@OOOO?$AA@
CONST	SEGMENT
??_C@_04CMCOBGCG@OOOO?$AA@ DB 'OOOO', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT property_copy
_TEXT	SEGMENT
type$ = 48
doc$ = 56
new$ = 64
pold$ = 72
tv75 = 80
tv84 = 88
tv93 = 96
tv132 = 104
old$ = 128
get$ = 136
set$ = 144
del$ = 152
property_copy PROC					; COMDAT

; 1377 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 1378 :     propertyobject *pold = (propertyobject *)old;

  00018	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR old$[rsp]
  00020	48 89 44 24 48	 mov	 QWORD PTR pold$[rsp], rax

; 1379 :     PyObject *new, *type, *doc;
; 1380 : 
; 1381 :     type = PyObject_Type(old);

  00025	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR old$[rsp]
  0002d	e8 00 00 00 00	 call	 PyObject_Type
  00032	48 89 44 24 30	 mov	 QWORD PTR type$[rsp], rax

; 1382 :     if (type == NULL)

  00037	48 83 7c 24 30
	00		 cmp	 QWORD PTR type$[rsp], 0
  0003d	75 07		 jne	 SHORT $LN22@property_c

; 1383 :         return NULL;

  0003f	33 c0		 xor	 eax, eax
  00041	e9 04 02 00 00	 jmp	 $LN23@property_c
$LN22@property_c:

; 1384 : 
; 1385 :     if (get == NULL || get == Py_None) {

  00046	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR get$[rsp], 0
  0004f	74 11		 je	 SHORT $LN20@property_c
  00051	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00058	48 39 84 24 88
	00 00 00	 cmp	 QWORD PTR get$[rsp], rax
  00060	75 53		 jne	 SHORT $LN21@property_c
$LN20@property_c:
$LN19@property_c:

; 1386 :         Py_XDECREF(get);

  00062	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR get$[rsp], 0
  0006b	74 0d		 je	 SHORT $LN16@property_c
  0006d	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR get$[rsp]
  00075	e8 00 00 00 00	 call	 _Py_DecRef
$LN16@property_c:
  0007a	33 c0		 xor	 eax, eax
  0007c	85 c0		 test	 eax, eax
  0007e	75 e2		 jne	 SHORT $LN19@property_c

; 1387 :         get = pold->prop_get ? pold->prop_get : Py_None;

  00080	48 8b 44 24 48	 mov	 rax, QWORD PTR pold$[rsp]
  00085	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  0008a	74 10		 je	 SHORT $LN25@property_c
  0008c	48 8b 44 24 48	 mov	 rax, QWORD PTR pold$[rsp]
  00091	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00095	48 89 44 24 50	 mov	 QWORD PTR tv75[rsp], rax
  0009a	eb 0c		 jmp	 SHORT $LN26@property_c
$LN25@property_c:
  0009c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000a3	48 89 44 24 50	 mov	 QWORD PTR tv75[rsp], rax
$LN26@property_c:
  000a8	48 8b 44 24 50	 mov	 rax, QWORD PTR tv75[rsp]
  000ad	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR get$[rsp], rax
$LN21@property_c:

; 1388 :     }
; 1389 :     if (set == NULL || set == Py_None) {

  000b5	48 83 bc 24 90
	00 00 00 00	 cmp	 QWORD PTR set$[rsp], 0
  000be	74 11		 je	 SHORT $LN14@property_c
  000c0	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000c7	48 39 84 24 90
	00 00 00	 cmp	 QWORD PTR set$[rsp], rax
  000cf	75 53		 jne	 SHORT $LN15@property_c
$LN14@property_c:
$LN13@property_c:

; 1390 :         Py_XDECREF(set);

  000d1	48 83 bc 24 90
	00 00 00 00	 cmp	 QWORD PTR set$[rsp], 0
  000da	74 0d		 je	 SHORT $LN10@property_c
  000dc	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR set$[rsp]
  000e4	e8 00 00 00 00	 call	 _Py_DecRef
$LN10@property_c:
  000e9	33 c0		 xor	 eax, eax
  000eb	85 c0		 test	 eax, eax
  000ed	75 e2		 jne	 SHORT $LN13@property_c

; 1391 :         set = pold->prop_set ? pold->prop_set : Py_None;

  000ef	48 8b 44 24 48	 mov	 rax, QWORD PTR pold$[rsp]
  000f4	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  000f9	74 10		 je	 SHORT $LN27@property_c
  000fb	48 8b 44 24 48	 mov	 rax, QWORD PTR pold$[rsp]
  00100	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00104	48 89 44 24 58	 mov	 QWORD PTR tv84[rsp], rax
  00109	eb 0c		 jmp	 SHORT $LN28@property_c
$LN27@property_c:
  0010b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00112	48 89 44 24 58	 mov	 QWORD PTR tv84[rsp], rax
$LN28@property_c:
  00117	48 8b 44 24 58	 mov	 rax, QWORD PTR tv84[rsp]
  0011c	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR set$[rsp], rax
$LN15@property_c:

; 1392 :     }
; 1393 :     if (del == NULL || del == Py_None) {

  00124	48 83 bc 24 98
	00 00 00 00	 cmp	 QWORD PTR del$[rsp], 0
  0012d	74 11		 je	 SHORT $LN8@property_c
  0012f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00136	48 39 84 24 98
	00 00 00	 cmp	 QWORD PTR del$[rsp], rax
  0013e	75 53		 jne	 SHORT $LN9@property_c
$LN8@property_c:
$LN7@property_c:

; 1394 :         Py_XDECREF(del);

  00140	48 83 bc 24 98
	00 00 00 00	 cmp	 QWORD PTR del$[rsp], 0
  00149	74 0d		 je	 SHORT $LN4@property_c
  0014b	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR del$[rsp]
  00153	e8 00 00 00 00	 call	 _Py_DecRef
$LN4@property_c:
  00158	33 c0		 xor	 eax, eax
  0015a	85 c0		 test	 eax, eax
  0015c	75 e2		 jne	 SHORT $LN7@property_c

; 1395 :         del = pold->prop_del ? pold->prop_del : Py_None;

  0015e	48 8b 44 24 48	 mov	 rax, QWORD PTR pold$[rsp]
  00163	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  00168	74 10		 je	 SHORT $LN29@property_c
  0016a	48 8b 44 24 48	 mov	 rax, QWORD PTR pold$[rsp]
  0016f	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00173	48 89 44 24 60	 mov	 QWORD PTR tv93[rsp], rax
  00178	eb 0c		 jmp	 SHORT $LN30@property_c
$LN29@property_c:
  0017a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00181	48 89 44 24 60	 mov	 QWORD PTR tv93[rsp], rax
$LN30@property_c:
  00186	48 8b 44 24 60	 mov	 rax, QWORD PTR tv93[rsp]
  0018b	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR del$[rsp], rax
$LN9@property_c:

; 1396 :     }
; 1397 :     if (pold->getter_doc && get != Py_None) {

  00193	48 8b 44 24 48	 mov	 rax, QWORD PTR pold$[rsp]
  00198	83 b8 80 00 00
	00 00		 cmp	 DWORD PTR [rax+128], 0
  0019f	74 1f		 je	 SHORT $LN3@property_c
  001a1	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  001a8	48 39 84 24 88
	00 00 00	 cmp	 QWORD PTR get$[rsp], rax
  001b0	74 0e		 je	 SHORT $LN3@property_c

; 1398 :         /* make _init use __doc__ from getter */
; 1399 :         doc = Py_None;

  001b2	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  001b9	48 89 44 24 38	 mov	 QWORD PTR doc$[rsp], rax

; 1400 :     }
; 1401 :     else {

  001be	eb 32		 jmp	 SHORT $LN2@property_c
$LN3@property_c:

; 1402 :         doc = pold->prop_doc ? pold->prop_doc : Py_None;

  001c0	48 8b 44 24 48	 mov	 rax, QWORD PTR pold$[rsp]
  001c5	48 83 78 78 00	 cmp	 QWORD PTR [rax+120], 0
  001ca	74 10		 je	 SHORT $LN31@property_c
  001cc	48 8b 44 24 48	 mov	 rax, QWORD PTR pold$[rsp]
  001d1	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  001d5	48 89 44 24 68	 mov	 QWORD PTR tv132[rsp], rax
  001da	eb 0c		 jmp	 SHORT $LN32@property_c
$LN31@property_c:
  001dc	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  001e3	48 89 44 24 68	 mov	 QWORD PTR tv132[rsp], rax
$LN32@property_c:
  001e8	48 8b 44 24 68	 mov	 rax, QWORD PTR tv132[rsp]
  001ed	48 89 44 24 38	 mov	 QWORD PTR doc$[rsp], rax
$LN2@property_c:

; 1403 :     }
; 1404 : 
; 1405 :     new =  PyObject_CallFunction(type, "OOOO", get, set, del, doc);

  001f2	48 8b 44 24 38	 mov	 rax, QWORD PTR doc$[rsp]
  001f7	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  001fc	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR del$[rsp]
  00204	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00209	4c 8b 8c 24 90
	00 00 00	 mov	 r9, QWORD PTR set$[rsp]
  00211	4c 8b 84 24 88
	00 00 00	 mov	 r8, QWORD PTR get$[rsp]
  00219	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04CMCOBGCG@OOOO?$AA@
  00220	48 8b 4c 24 30	 mov	 rcx, QWORD PTR type$[rsp]
  00225	e8 00 00 00 00	 call	 PyObject_CallFunction
  0022a	48 89 44 24 40	 mov	 QWORD PTR new$[rsp], rax

; 1406 :     Py_DECREF(type);

  0022f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR type$[rsp]
  00234	e8 00 00 00 00	 call	 _Py_DecRef

; 1407 :     if (new == NULL)

  00239	48 83 7c 24 40
	00		 cmp	 QWORD PTR new$[rsp], 0
  0023f	75 04		 jne	 SHORT $LN1@property_c

; 1408 :         return NULL;

  00241	33 c0		 xor	 eax, eax
  00243	eb 05		 jmp	 SHORT $LN23@property_c
$LN1@property_c:

; 1409 :     return new;

  00245	48 8b 44 24 40	 mov	 rax, QWORD PTR new$[rsp]
$LN23@property_c:

; 1410 : }

  0024a	48 83 c4 78	 add	 rsp, 120		; 00000078H
  0024e	c3		 ret	 0
property_copy ENDP
_TEXT	ENDS
PUBLIC	??_C@_0P@MLCIKJHM@?$HMOOOO?3property?$AA@	; `string'
EXTRN	PyErr_Clear:PROC
EXTRN	PyErr_ExceptionMatches:PROC
EXTRN	PyExc_Exception:QWORD
EXTRN	_PyObject_SetAttrId:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$property_init DD imagerel property_init
	DD	imagerel property_init+691
	DD	imagerel $unwind$property_init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$property_init DD 021601H
	DD	0110116H
xdata	ENDS
;	COMDAT ??_C@_0P@MLCIKJHM@?$HMOOOO?3property?$AA@
CONST	SEGMENT
??_C@_0P@MLCIKJHM@?$HMOOOO?3property?$AA@ DB '|OOOO:property', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT property_init
_TEXT	SEGMENT
get$ = 64
set$ = 72
del$ = 80
prop$ = 88
doc$ = 96
get_doc$21659 = 104
err$21669 = 112
self$ = 144
args$ = 152
kwds$ = 160
property_init PROC					; COMDAT

; 1414 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 1415 :     PyObject *get = NULL, *set = NULL, *del = NULL, *doc = NULL;

  00016	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR get$[rsp], 0
  0001f	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR set$[rsp], 0
  00028	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR del$[rsp], 0
  00031	48 c7 44 24 60
	00 00 00 00	 mov	 QWORD PTR doc$[rsp], 0

; 1416 :     static char *kwlist[] = {"fget", "fset", "fdel", "doc", 0};
; 1417 :     propertyobject *prop = (propertyobject *)self;

  0003a	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00042	48 89 44 24 58	 mov	 QWORD PTR prop$[rsp], rax

; 1418 : 
; 1419 :     if (!PyArg_ParseTupleAndKeywords(args, kwds, "|OOOO:property",
; 1420 :                                      kwlist, &get, &set, &del, &doc))

  00047	48 8d 44 24 60	 lea	 rax, QWORD PTR doc$[rsp]
  0004c	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00051	48 8d 44 24 50	 lea	 rax, QWORD PTR del$[rsp]
  00056	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  0005b	48 8d 44 24 48	 lea	 rax, QWORD PTR set$[rsp]
  00060	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00065	48 8d 44 24 40	 lea	 rax, QWORD PTR get$[rsp]
  0006a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0006f	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?kwlist@?1??property_init@@9@9
  00076	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0P@MLCIKJHM@?$HMOOOO?3property?$AA@
  0007d	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR kwds$[rsp]
  00085	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  0008d	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  00092	85 c0		 test	 eax, eax
  00094	75 0a		 jne	 SHORT $LN33@property_i

; 1421 :         return -1;

  00096	b8 ff ff ff ff	 mov	 eax, -1
  0009b	e9 0b 02 00 00	 jmp	 $LN34@property_i
$LN33@property_i:

; 1422 : 
; 1423 :     if (get == Py_None)

  000a0	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000a7	48 39 44 24 40	 cmp	 QWORD PTR get$[rsp], rax
  000ac	75 09		 jne	 SHORT $LN32@property_i

; 1424 :         get = NULL;

  000ae	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR get$[rsp], 0
$LN32@property_i:

; 1425 :     if (set == Py_None)

  000b7	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000be	48 39 44 24 48	 cmp	 QWORD PTR set$[rsp], rax
  000c3	75 09		 jne	 SHORT $LN31@property_i

; 1426 :         set = NULL;

  000c5	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR set$[rsp], 0
$LN31@property_i:

; 1427 :     if (del == Py_None)

  000ce	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000d5	48 39 44 24 50	 cmp	 QWORD PTR del$[rsp], rax
  000da	75 09		 jne	 SHORT $LN30@property_i

; 1428 :         del = NULL;

  000dc	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR del$[rsp], 0
$LN30@property_i:
$LN29@property_i:

; 1429 : 
; 1430 :     Py_XINCREF(get);

  000e5	48 83 7c 24 40
	00		 cmp	 QWORD PTR get$[rsp], 0
  000eb	74 0a		 je	 SHORT $LN26@property_i
  000ed	48 8b 4c 24 40	 mov	 rcx, QWORD PTR get$[rsp]
  000f2	e8 00 00 00 00	 call	 _Py_IncRef
$LN26@property_i:
  000f7	33 c0		 xor	 eax, eax
  000f9	85 c0		 test	 eax, eax
  000fb	75 e8		 jne	 SHORT $LN29@property_i
$LN25@property_i:

; 1431 :     Py_XINCREF(set);

  000fd	48 83 7c 24 48
	00		 cmp	 QWORD PTR set$[rsp], 0
  00103	74 0a		 je	 SHORT $LN22@property_i
  00105	48 8b 4c 24 48	 mov	 rcx, QWORD PTR set$[rsp]
  0010a	e8 00 00 00 00	 call	 _Py_IncRef
$LN22@property_i:
  0010f	33 c0		 xor	 eax, eax
  00111	85 c0		 test	 eax, eax
  00113	75 e8		 jne	 SHORT $LN25@property_i
$LN21@property_i:

; 1432 :     Py_XINCREF(del);

  00115	48 83 7c 24 50
	00		 cmp	 QWORD PTR del$[rsp], 0
  0011b	74 0a		 je	 SHORT $LN18@property_i
  0011d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR del$[rsp]
  00122	e8 00 00 00 00	 call	 _Py_IncRef
$LN18@property_i:
  00127	33 c0		 xor	 eax, eax
  00129	85 c0		 test	 eax, eax
  0012b	75 e8		 jne	 SHORT $LN21@property_i
$LN17@property_i:

; 1433 :     Py_XINCREF(doc);

  0012d	48 83 7c 24 60
	00		 cmp	 QWORD PTR doc$[rsp], 0
  00133	74 0a		 je	 SHORT $LN14@property_i
  00135	48 8b 4c 24 60	 mov	 rcx, QWORD PTR doc$[rsp]
  0013a	e8 00 00 00 00	 call	 _Py_IncRef
$LN14@property_i:
  0013f	33 c0		 xor	 eax, eax
  00141	85 c0		 test	 eax, eax
  00143	75 e8		 jne	 SHORT $LN17@property_i

; 1434 : 
; 1435 :     prop->prop_get = get;

  00145	48 8b 44 24 58	 mov	 rax, QWORD PTR prop$[rsp]
  0014a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR get$[rsp]
  0014f	48 89 48 60	 mov	 QWORD PTR [rax+96], rcx

; 1436 :     prop->prop_set = set;

  00153	48 8b 44 24 58	 mov	 rax, QWORD PTR prop$[rsp]
  00158	48 8b 4c 24 48	 mov	 rcx, QWORD PTR set$[rsp]
  0015d	48 89 48 68	 mov	 QWORD PTR [rax+104], rcx

; 1437 :     prop->prop_del = del;

  00161	48 8b 44 24 58	 mov	 rax, QWORD PTR prop$[rsp]
  00166	48 8b 4c 24 50	 mov	 rcx, QWORD PTR del$[rsp]
  0016b	48 89 48 70	 mov	 QWORD PTR [rax+112], rcx

; 1438 :     prop->prop_doc = doc;

  0016f	48 8b 44 24 58	 mov	 rax, QWORD PTR prop$[rsp]
  00174	48 8b 4c 24 60	 mov	 rcx, QWORD PTR doc$[rsp]
  00179	48 89 48 78	 mov	 QWORD PTR [rax+120], rcx

; 1439 :     prop->getter_doc = 0;

  0017d	48 8b 44 24 58	 mov	 rax, QWORD PTR prop$[rsp]
  00182	c7 80 80 00 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+128], 0

; 1440 : 
; 1441 :     /* if no docstring given and the getter has one, use that one */
; 1442 :     if ((doc == NULL || doc == Py_None) && get != NULL) {

  0018c	48 83 7c 24 60
	00		 cmp	 QWORD PTR doc$[rsp], 0
  00192	74 12		 je	 SHORT $LN12@property_i
  00194	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0019b	48 39 44 24 60	 cmp	 QWORD PTR doc$[rsp], rax
  001a0	0f 85 03 01 00
	00		 jne	 $LN13@property_i
$LN12@property_i:
  001a6	48 83 7c 24 40
	00		 cmp	 QWORD PTR get$[rsp], 0
  001ac	0f 84 f7 00 00
	00		 je	 $LN13@property_i

; 1443 :         _Py_IDENTIFIER(__doc__);
; 1444 :         PyObject *get_doc = _PyObject_GetAttrId(get, &PyId___doc__);

  001b2	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId___doc__@?6??property_init@@9@9
  001b7	8b c0		 mov	 eax, eax
  001b9	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  001bf	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  001c8	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  001cc	48 8b d0	 mov	 rdx, rax
  001cf	48 8b 4c 24 40	 mov	 rcx, QWORD PTR get$[rsp]
  001d4	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  001d9	48 89 44 24 68	 mov	 QWORD PTR get_doc$21659[rsp], rax

; 1445 :         if (get_doc) {

  001de	48 83 7c 24 68
	00		 cmp	 QWORD PTR get_doc$21659[rsp], 0
  001e4	0f 84 a1 00 00
	00		 je	 $LN11@property_i

; 1446 :             if (Py_TYPE(self) == &PyProperty_Type) {

  001ea	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyProperty_Type
  001f1	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  001f9	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  001fd	75 30		 jne	 SHORT $LN10@property_i
$LN9@property_i:

; 1447 :                 Py_XDECREF(prop->prop_doc);

  001ff	48 8b 44 24 58	 mov	 rax, QWORD PTR prop$[rsp]
  00204	48 83 78 78 00	 cmp	 QWORD PTR [rax+120], 0
  00209	74 0e		 je	 SHORT $LN6@property_i
  0020b	48 8b 44 24 58	 mov	 rax, QWORD PTR prop$[rsp]
  00210	48 8b 48 78	 mov	 rcx, QWORD PTR [rax+120]
  00214	e8 00 00 00 00	 call	 _Py_DecRef
$LN6@property_i:
  00219	33 c0		 xor	 eax, eax
  0021b	85 c0		 test	 eax, eax
  0021d	75 e0		 jne	 SHORT $LN9@property_i

; 1448 :                 prop->prop_doc = get_doc;

  0021f	48 8b 44 24 58	 mov	 rax, QWORD PTR prop$[rsp]
  00224	48 8b 4c 24 68	 mov	 rcx, QWORD PTR get_doc$21659[rsp]
  00229	48 89 48 78	 mov	 QWORD PTR [rax+120], rcx

; 1449 :             }
; 1450 :             else {

  0022d	eb 4b		 jmp	 SHORT $LN5@property_i
$LN10@property_i:

; 1451 :                 /* If this is a property subclass, put __doc__
; 1452 :                 in dict of the subclass instance instead,
; 1453 :                 otherwise it gets shadowed by __doc__ in the
; 1454 :                 class's dict. */
; 1455 :                 int err = _PyObject_SetAttrId(self, &PyId___doc__, get_doc);

  0022f	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId___doc__@?6??property_init@@9@9
  00234	8b c0		 mov	 eax, eax
  00236	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0023c	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00245	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00249	4c 8b 44 24 68	 mov	 r8, QWORD PTR get_doc$21659[rsp]
  0024e	48 8b d0	 mov	 rdx, rax
  00251	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00259	e8 00 00 00 00	 call	 _PyObject_SetAttrId
  0025e	89 44 24 70	 mov	 DWORD PTR err$21669[rsp], eax

; 1456 :                 Py_DECREF(get_doc);

  00262	48 8b 4c 24 68	 mov	 rcx, QWORD PTR get_doc$21659[rsp]
  00267	e8 00 00 00 00	 call	 _Py_DecRef

; 1457 :                 if (err < 0)

  0026c	83 7c 24 70 00	 cmp	 DWORD PTR err$21669[rsp], 0
  00271	7d 07		 jge	 SHORT $LN4@property_i

; 1458 :                     return -1;

  00273	b8 ff ff ff ff	 mov	 eax, -1
  00278	eb 31		 jmp	 SHORT $LN34@property_i
$LN4@property_i:
$LN5@property_i:

; 1459 :             }
; 1460 :             prop->getter_doc = 1;

  0027a	48 8b 44 24 58	 mov	 rax, QWORD PTR prop$[rsp]
  0027f	c7 80 80 00 00
	00 01 00 00 00	 mov	 DWORD PTR [rax+128], 1
  00289	eb 1e		 jmp	 SHORT $LN3@property_i
$LN11@property_i:

; 1461 :         }
; 1462 :         else if (PyErr_ExceptionMatches(PyExc_Exception)) {

  0028b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_Exception
  00292	e8 00 00 00 00	 call	 PyErr_ExceptionMatches
  00297	85 c0		 test	 eax, eax
  00299	74 07		 je	 SHORT $LN2@property_i

; 1463 :             PyErr_Clear();

  0029b	e8 00 00 00 00	 call	 PyErr_Clear

; 1464 :         }
; 1465 :         else {

  002a0	eb 07		 jmp	 SHORT $LN1@property_i
$LN2@property_i:

; 1466 :             return -1;

  002a2	b8 ff ff ff ff	 mov	 eax, -1
  002a7	eb 02		 jmp	 SHORT $LN34@property_i
$LN1@property_i:
$LN3@property_i:
$LN13@property_i:

; 1467 :         }
; 1468 :     }
; 1469 : 
; 1470 :     return 0;

  002a9	33 c0		 xor	 eax, eax
$LN34@property_i:

; 1471 : }

  002ab	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  002b2	c3		 ret	 0
property_init ENDP
_TEXT	ENDS
EXTRN	_PyObject_IsAbstract:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$property_get___isabstractmethod__ DD imagerel property_get___isabstractmethod__
	DD	imagerel property_get___isabstractmethod__+221
	DD	imagerel $unwind$property_get___isabstractmethod__
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$property_get___isabstractmethod__ DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT property_get___isabstractmethod__
_TEXT	SEGMENT
res$ = 32
prop$ = 64
closure$ = 72
property_get___isabstractmethod__ PROC			; COMDAT

; 1475 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1476 :     int res = _PyObject_IsAbstract(prop->prop_get);

  0000e	48 8b 44 24 40	 mov	 rax, QWORD PTR prop$[rsp]
  00013	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00017	e8 00 00 00 00	 call	 _PyObject_IsAbstract
  0001c	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 1477 :     if (res == -1) {

  00020	83 7c 24 20 ff	 cmp	 DWORD PTR res$[rsp], -1
  00025	75 09		 jne	 SHORT $LN9@property_g

; 1478 :         return NULL;

  00027	33 c0		 xor	 eax, eax
  00029	e9 aa 00 00 00	 jmp	 $LN10@property_g
  0002e	eb 1f		 jmp	 SHORT $LN8@property_g
$LN9@property_g:

; 1479 :     }
; 1480 :     else if (res) {

  00030	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  00035	74 18		 je	 SHORT $LN7@property_g

; 1481 :         Py_RETURN_TRUE;

  00037	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_TrueStruct
  0003e	e8 00 00 00 00	 call	 _Py_IncRef
  00043	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  0004a	e9 89 00 00 00	 jmp	 $LN10@property_g
$LN7@property_g:
$LN8@property_g:

; 1482 :     }
; 1483 : 
; 1484 :     res = _PyObject_IsAbstract(prop->prop_set);

  0004f	48 8b 44 24 40	 mov	 rax, QWORD PTR prop$[rsp]
  00054	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  00058	e8 00 00 00 00	 call	 _PyObject_IsAbstract
  0005d	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 1485 :     if (res == -1) {

  00061	83 7c 24 20 ff	 cmp	 DWORD PTR res$[rsp], -1
  00066	75 06		 jne	 SHORT $LN6@property_g

; 1486 :         return NULL;

  00068	33 c0		 xor	 eax, eax
  0006a	eb 6c		 jmp	 SHORT $LN10@property_g
  0006c	eb 1c		 jmp	 SHORT $LN5@property_g
$LN6@property_g:

; 1487 :     }
; 1488 :     else if (res) {

  0006e	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  00073	74 15		 je	 SHORT $LN4@property_g

; 1489 :         Py_RETURN_TRUE;

  00075	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_TrueStruct
  0007c	e8 00 00 00 00	 call	 _Py_IncRef
  00081	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  00088	eb 4e		 jmp	 SHORT $LN10@property_g
$LN4@property_g:
$LN5@property_g:

; 1490 :     }
; 1491 : 
; 1492 :     res = _PyObject_IsAbstract(prop->prop_del);

  0008a	48 8b 44 24 40	 mov	 rax, QWORD PTR prop$[rsp]
  0008f	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  00093	e8 00 00 00 00	 call	 _PyObject_IsAbstract
  00098	89 44 24 20	 mov	 DWORD PTR res$[rsp], eax

; 1493 :     if (res == -1) {

  0009c	83 7c 24 20 ff	 cmp	 DWORD PTR res$[rsp], -1
  000a1	75 06		 jne	 SHORT $LN3@property_g

; 1494 :         return NULL;

  000a3	33 c0		 xor	 eax, eax
  000a5	eb 31		 jmp	 SHORT $LN10@property_g
  000a7	eb 1c		 jmp	 SHORT $LN2@property_g
$LN3@property_g:

; 1495 :     }
; 1496 :     else if (res) {

  000a9	83 7c 24 20 00	 cmp	 DWORD PTR res$[rsp], 0
  000ae	74 15		 je	 SHORT $LN1@property_g

; 1497 :         Py_RETURN_TRUE;

  000b0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_TrueStruct
  000b7	e8 00 00 00 00	 call	 _Py_IncRef
  000bc	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  000c3	eb 13		 jmp	 SHORT $LN10@property_g
$LN1@property_g:
$LN2@property_g:

; 1498 :     }
; 1499 :     Py_RETURN_FALSE;

  000c5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_FalseStruct
  000cc	e8 00 00 00 00	 call	 _Py_IncRef
  000d1	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct
$LN10@property_g:

; 1500 : }

  000d8	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000dc	c3		 ret	 0
property_get___isabstractmethod__ ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BC@FEAJNJE@property_traverse?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$property_traverse DD imagerel property_traverse
	DD	imagerel property_traverse+402
	DD	imagerel $unwind$property_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$property_traverse DD 011301H
	DD	08213H
xdata	ENDS
;	COMDAT ??_C@_0BC@FEAJNJE@property_traverse?$AA@
CONST	SEGMENT
??_C@_0BC@FEAJNJE@property_traverse?$AA@ DB 'property_traverse', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT property_traverse
_TEXT	SEGMENT
pp$ = 32
vret$21730 = 40
vret$21738 = 44
vret$21746 = 48
vret$21754 = 52
self$ = 80
visit$ = 88
arg$ = 96
property_traverse PROC					; COMDAT

; 1538 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1539 :     propertyobject *pp = (propertyobject *)self;

  00013	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00018	48 89 44 24 20	 mov	 QWORD PTR pp$[rsp], rax
$LN24@property_t:

; 1540 :     Py_VISIT(pp->prop_get);

  0001d	e8 00 00 00 00	 call	 _Py_PXCTX
  00022	85 c0		 test	 eax, eax
  00024	74 1c		 je	 SHORT $LN21@property_t
  00026	45 33 c9	 xor	 r9d, r9d
  00029	41 b8 04 06 00
	00		 mov	 r8d, 1540		; 00000604H
  0002f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@CMLMJMOL@?4?4?2Objects?2descrobject?4c?$AA@
  00036	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@FEAJNJE@property_traverse?$AA@
  0003d	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN21@property_t:
  00042	48 8b 44 24 20	 mov	 rax, QWORD PTR pp$[rsp]
  00047	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  0004c	74 26		 je	 SHORT $LN20@property_t
  0004e	48 8b 54 24 60	 mov	 rdx, QWORD PTR arg$[rsp]
  00053	48 8b 44 24 20	 mov	 rax, QWORD PTR pp$[rsp]
  00058	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  0005c	ff 54 24 58	 call	 QWORD PTR visit$[rsp]
  00060	89 44 24 28	 mov	 DWORD PTR vret$21730[rsp], eax
  00064	83 7c 24 28 00	 cmp	 DWORD PTR vret$21730[rsp], 0
  00069	74 09		 je	 SHORT $LN19@property_t
  0006b	8b 44 24 28	 mov	 eax, DWORD PTR vret$21730[rsp]
  0006f	e9 19 01 00 00	 jmp	 $LN25@property_t
$LN19@property_t:
$LN20@property_t:
  00074	33 c0		 xor	 eax, eax
  00076	85 c0		 test	 eax, eax
  00078	75 a3		 jne	 SHORT $LN24@property_t
$LN18@property_t:

; 1541 :     Py_VISIT(pp->prop_set);

  0007a	e8 00 00 00 00	 call	 _Py_PXCTX
  0007f	85 c0		 test	 eax, eax
  00081	74 1c		 je	 SHORT $LN15@property_t
  00083	45 33 c9	 xor	 r9d, r9d
  00086	41 b8 05 06 00
	00		 mov	 r8d, 1541		; 00000605H
  0008c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@CMLMJMOL@?4?4?2Objects?2descrobject?4c?$AA@
  00093	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@FEAJNJE@property_traverse?$AA@
  0009a	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN15@property_t:
  0009f	48 8b 44 24 20	 mov	 rax, QWORD PTR pp$[rsp]
  000a4	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  000a9	74 26		 je	 SHORT $LN14@property_t
  000ab	48 8b 54 24 60	 mov	 rdx, QWORD PTR arg$[rsp]
  000b0	48 8b 44 24 20	 mov	 rax, QWORD PTR pp$[rsp]
  000b5	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  000b9	ff 54 24 58	 call	 QWORD PTR visit$[rsp]
  000bd	89 44 24 2c	 mov	 DWORD PTR vret$21738[rsp], eax
  000c1	83 7c 24 2c 00	 cmp	 DWORD PTR vret$21738[rsp], 0
  000c6	74 09		 je	 SHORT $LN13@property_t
  000c8	8b 44 24 2c	 mov	 eax, DWORD PTR vret$21738[rsp]
  000cc	e9 bc 00 00 00	 jmp	 $LN25@property_t
$LN13@property_t:
$LN14@property_t:
  000d1	33 c0		 xor	 eax, eax
  000d3	85 c0		 test	 eax, eax
  000d5	75 a3		 jne	 SHORT $LN18@property_t
$LN12@property_t:

; 1542 :     Py_VISIT(pp->prop_del);

  000d7	e8 00 00 00 00	 call	 _Py_PXCTX
  000dc	85 c0		 test	 eax, eax
  000de	74 1c		 je	 SHORT $LN9@property_t
  000e0	45 33 c9	 xor	 r9d, r9d
  000e3	41 b8 06 06 00
	00		 mov	 r8d, 1542		; 00000606H
  000e9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@CMLMJMOL@?4?4?2Objects?2descrobject?4c?$AA@
  000f0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@FEAJNJE@property_traverse?$AA@
  000f7	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN9@property_t:
  000fc	48 8b 44 24 20	 mov	 rax, QWORD PTR pp$[rsp]
  00101	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  00106	74 23		 je	 SHORT $LN8@property_t
  00108	48 8b 54 24 60	 mov	 rdx, QWORD PTR arg$[rsp]
  0010d	48 8b 44 24 20	 mov	 rax, QWORD PTR pp$[rsp]
  00112	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  00116	ff 54 24 58	 call	 QWORD PTR visit$[rsp]
  0011a	89 44 24 30	 mov	 DWORD PTR vret$21746[rsp], eax
  0011e	83 7c 24 30 00	 cmp	 DWORD PTR vret$21746[rsp], 0
  00123	74 06		 je	 SHORT $LN7@property_t
  00125	8b 44 24 30	 mov	 eax, DWORD PTR vret$21746[rsp]
  00129	eb 62		 jmp	 SHORT $LN25@property_t
$LN7@property_t:
$LN8@property_t:
  0012b	33 c0		 xor	 eax, eax
  0012d	85 c0		 test	 eax, eax
  0012f	75 a6		 jne	 SHORT $LN12@property_t
$LN6@property_t:

; 1543 :     Py_VISIT(pp->prop_doc);

  00131	e8 00 00 00 00	 call	 _Py_PXCTX
  00136	85 c0		 test	 eax, eax
  00138	74 1c		 je	 SHORT $LN3@property_t
  0013a	45 33 c9	 xor	 r9d, r9d
  0013d	41 b8 07 06 00
	00		 mov	 r8d, 1543		; 00000607H
  00143	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@CMLMJMOL@?4?4?2Objects?2descrobject?4c?$AA@
  0014a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@FEAJNJE@property_traverse?$AA@
  00151	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@property_t:
  00156	48 8b 44 24 20	 mov	 rax, QWORD PTR pp$[rsp]
  0015b	48 83 78 78 00	 cmp	 QWORD PTR [rax+120], 0
  00160	74 23		 je	 SHORT $LN2@property_t
  00162	48 8b 54 24 60	 mov	 rdx, QWORD PTR arg$[rsp]
  00167	48 8b 44 24 20	 mov	 rax, QWORD PTR pp$[rsp]
  0016c	48 8b 48 78	 mov	 rcx, QWORD PTR [rax+120]
  00170	ff 54 24 58	 call	 QWORD PTR visit$[rsp]
  00174	89 44 24 34	 mov	 DWORD PTR vret$21754[rsp], eax
  00178	83 7c 24 34 00	 cmp	 DWORD PTR vret$21754[rsp], 0
  0017d	74 06		 je	 SHORT $LN1@property_t
  0017f	8b 44 24 34	 mov	 eax, DWORD PTR vret$21754[rsp]
  00183	eb 08		 jmp	 SHORT $LN25@property_t
$LN1@property_t:
$LN2@property_t:
  00185	33 c0		 xor	 eax, eax
  00187	85 c0		 test	 eax, eax
  00189	75 a6		 jne	 SHORT $LN6@property_t

; 1544 :     return 0;

  0018b	33 c0		 xor	 eax, eax
$LN25@property_t:

; 1545 : }

  0018d	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00191	c3		 ret	 0
property_traverse ENDP
_TEXT	ENDS
END
