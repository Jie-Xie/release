; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_09DILDJBMG@_symtable?$AA@			; `string'
PUBLIC	??_C@_0EC@FFINNOKB@Return?5symbol?5and?5scope?5dictiona@ ; `string'
PUBLIC	??_C@_08HFCPDANL@symtable?$AA@			; `string'
;	COMDAT ??_C@_09DILDJBMG@_symtable?$AA@
CONST	SEGMENT
??_C@_09DILDJBMG@_symtable?$AA@ DB '_symtable', 00H	; `string'
CONST	ENDS
_DATA	SEGMENT
symtable_methods DQ FLAT:??_C@_08HFCPDANL@symtable?$AA@
	DQ	FLAT:symtable_symtable
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0EC@FFINNOKB@Return?5symbol?5and?5scope?5dictiona@
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
symtablemodule DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_09DILDJBMG@_symtable?$AA@
	DQ	0000000000000000H
	DQ	ffffffffffffffffH
	DQ	FLAT:symtable_methods
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
_DATA	ENDS
;	COMDAT ??_C@_0EC@FFINNOKB@Return?5symbol?5and?5scope?5dictiona@
CONST	SEGMENT
??_C@_0EC@FFINNOKB@Return?5symbol?5and?5scope?5dictiona@ DB 'Return symbo'
	DB	'l and scope dictionaries used internally by compiler.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08HFCPDANL@symtable?$AA@
CONST	SEGMENT
??_C@_08HFCPDANL@symtable?$AA@ DB 'symtable', 00H	; `string'
CONST	ENDS
PUBLIC	_Py_IncRef
PUBLIC	??_C@_0DG@HJDBMJC@symtable?$CI?$CJ?5arg?53?5must?5be?5?8exec?8?5@ ; `string'
PUBLIC	??_C@_06EJFMBPJF@single?$AA@			; `string'
PUBLIC	??_C@_04KGAGIKCD@eval?$AA@			; `string'
PUBLIC	??_C@_04MGEIEJAD@exec?$AA@			; `string'
PUBLIC	??_C@_0N@NAKJAHLK@sss?3symtable?$AA@		; `string'
EXTRN	PySymtable_Free:PROC
EXTRN	PyMem_Free:PROC
EXTRN	Py_SymtableString:PROC
EXTRN	PyErr_SetString:PROC
EXTRN	PyExc_ValueError:QWORD
EXTRN	strcmp:PROC
EXTRN	PyArg_ParseTuple:PROC
;	COMDAT pdata
; File c:\src\pyparallel\modules\symtablemodule.c
pdata	SEGMENT
$pdata$symtable_symtable DD imagerel symtable_symtable
	DD	imagerel symtable_symtable+273
	DD	imagerel $unwind$symtable_symtable
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$symtable_symtable DD 010e01H
	DD	0c20eH
xdata	ENDS
;	COMDAT ??_C@_0DG@HJDBMJC@symtable?$CI?$CJ?5arg?53?5must?5be?5?8exec?8?5@
CONST	SEGMENT
??_C@_0DG@HJDBMJC@symtable?$CI?$CJ?5arg?53?5must?5be?5?8exec?8?5@ DB 'sym'
	DB	'table() arg 3 must be ''exec'' or ''eval'' or ''single''', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06EJFMBPJF@single?$AA@
CONST	SEGMENT
??_C@_06EJFMBPJF@single?$AA@ DB 'single', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04KGAGIKCD@eval?$AA@
CONST	SEGMENT
??_C@_04KGAGIKCD@eval?$AA@ DB 'eval', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04MGEIEJAD@exec?$AA@
CONST	SEGMENT
??_C@_04MGEIEJAD@exec?$AA@ DB 'exec', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NAKJAHLK@sss?3symtable?$AA@
CONST	SEGMENT
??_C@_0N@NAKJAHLK@sss?3symtable?$AA@ DB 'sss:symtable', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT symtable_symtable
_TEXT	SEGMENT
st$ = 48
start$ = 56
startstr$ = 64
filename$ = 72
t$ = 80
str$ = 88
self$ = 112
args$ = 120
symtable_symtable PROC					; COMDAT

; 9    : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 10   :     struct symtable *st;
; 11   :     PyObject *t;
; 12   : 
; 13   :     char *str;
; 14   :     char *filename;
; 15   :     char *startstr;
; 16   :     int start;
; 17   : 
; 18   :     if (!PyArg_ParseTuple(args, "sss:symtable", &str, &filename,
; 19   :                           &startstr))

  0000e	48 8d 44 24 40	 lea	 rax, QWORD PTR startstr$[rsp]
  00013	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00018	4c 8d 4c 24 48	 lea	 r9, QWORD PTR filename$[rsp]
  0001d	4c 8d 44 24 58	 lea	 r8, QWORD PTR str$[rsp]
  00022	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@NAKJAHLK@sss?3symtable?$AA@
  00029	48 8b 4c 24 78	 mov	 rcx, QWORD PTR args$[rsp]
  0002e	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00033	85 c0		 test	 eax, eax
  00035	75 07		 jne	 SHORT $LN8@symtable_s

; 20   :         return NULL;

  00037	33 c0		 xor	 eax, eax
  00039	e9 ce 00 00 00	 jmp	 $LN9@symtable_s
$LN8@symtable_s:

; 21   :     if (strcmp(startstr, "exec") == 0)

  0003e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04MGEIEJAD@exec?$AA@
  00045	48 8b 4c 24 40	 mov	 rcx, QWORD PTR startstr$[rsp]
  0004a	e8 00 00 00 00	 call	 strcmp
  0004f	85 c0		 test	 eax, eax
  00051	75 0a		 jne	 SHORT $LN7@symtable_s

; 22   :         start = Py_file_input;

  00053	c7 44 24 38 01
	01 00 00	 mov	 DWORD PTR start$[rsp], 257 ; 00000101H
  0005b	eb 55		 jmp	 SHORT $LN6@symtable_s
$LN7@symtable_s:

; 23   :     else if (strcmp(startstr, "eval") == 0)

  0005d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04KGAGIKCD@eval?$AA@
  00064	48 8b 4c 24 40	 mov	 rcx, QWORD PTR startstr$[rsp]
  00069	e8 00 00 00 00	 call	 strcmp
  0006e	85 c0		 test	 eax, eax
  00070	75 0a		 jne	 SHORT $LN5@symtable_s

; 24   :         start = Py_eval_input;

  00072	c7 44 24 38 02
	01 00 00	 mov	 DWORD PTR start$[rsp], 258 ; 00000102H
  0007a	eb 36		 jmp	 SHORT $LN4@symtable_s
$LN5@symtable_s:

; 25   :     else if (strcmp(startstr, "single") == 0)

  0007c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06EJFMBPJF@single?$AA@
  00083	48 8b 4c 24 40	 mov	 rcx, QWORD PTR startstr$[rsp]
  00088	e8 00 00 00 00	 call	 strcmp
  0008d	85 c0		 test	 eax, eax
  0008f	75 0a		 jne	 SHORT $LN3@symtable_s

; 26   :         start = Py_single_input;

  00091	c7 44 24 38 00
	01 00 00	 mov	 DWORD PTR start$[rsp], 256 ; 00000100H

; 27   :     else {

  00099	eb 17		 jmp	 SHORT $LN2@symtable_s
$LN3@symtable_s:

; 28   :         PyErr_SetString(PyExc_ValueError,
; 29   :            "symtable() arg 3 must be 'exec' or 'eval' or 'single'");

  0009b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DG@HJDBMJC@symtable?$CI?$CJ?5arg?53?5must?5be?5?8exec?8?5@
  000a2	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  000a9	e8 00 00 00 00	 call	 PyErr_SetString

; 30   :         return NULL;

  000ae	33 c0		 xor	 eax, eax
  000b0	eb 5a		 jmp	 SHORT $LN9@symtable_s
$LN2@symtable_s:
$LN4@symtable_s:
$LN6@symtable_s:

; 31   :     }
; 32   :     st = Py_SymtableString(str, filename, start);

  000b2	44 8b 44 24 38	 mov	 r8d, DWORD PTR start$[rsp]
  000b7	48 8b 54 24 48	 mov	 rdx, QWORD PTR filename$[rsp]
  000bc	48 8b 4c 24 58	 mov	 rcx, QWORD PTR str$[rsp]
  000c1	e8 00 00 00 00	 call	 Py_SymtableString
  000c6	48 89 44 24 30	 mov	 QWORD PTR st$[rsp], rax

; 33   :     if (st == NULL)

  000cb	48 83 7c 24 30
	00		 cmp	 QWORD PTR st$[rsp], 0
  000d1	75 04		 jne	 SHORT $LN1@symtable_s

; 34   :         return NULL;

  000d3	33 c0		 xor	 eax, eax
  000d5	eb 35		 jmp	 SHORT $LN9@symtable_s
$LN1@symtable_s:

; 35   :     t = (PyObject *)st->st_top;

  000d7	48 8b 44 24 30	 mov	 rax, QWORD PTR st$[rsp]
  000dc	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000e0	48 89 44 24 50	 mov	 QWORD PTR t$[rsp], rax

; 36   :     Py_INCREF(t);

  000e5	48 8b 4c 24 50	 mov	 rcx, QWORD PTR t$[rsp]
  000ea	e8 00 00 00 00	 call	 _Py_IncRef

; 37   :     PyMem_Free((void *)st->st_future);

  000ef	48 8b 44 24 30	 mov	 rax, QWORD PTR st$[rsp]
  000f4	48 8b 48 40	 mov	 rcx, QWORD PTR [rax+64]
  000f8	e8 00 00 00 00	 call	 PyMem_Free

; 38   :     PySymtable_Free(st);

  000fd	48 8b 4c 24 30	 mov	 rcx, QWORD PTR st$[rsp]
  00102	e8 00 00 00 00	 call	 PySymtable_Free

; 39   :     return t;

  00107	48 8b 44 24 50	 mov	 rax, QWORD PTR t$[rsp]
$LN9@symtable_s:

; 40   : }

  0010c	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00110	c3		 ret	 0
symtable_symtable ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
EXTRN	_Py_RefTotal:QWORD
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN7
	DD	imagerel $LN7+132
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 6d		 jne	 SHORT $LN2@Py_IncRef
  00012	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0001a	4c 8b 4c 24 40	 mov	 r9, QWORD PTR op$[rsp]
  0001f	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_Guard
  00038	85 c0		 test	 eax, eax
  0003a	75 12		 jne	 SHORT $LN1@Py_IncRef
  0003c	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  00041	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00045	48 83 e0 20	 and	 rax, 32			; 00000020H
  00049	48 85 c0	 test	 rax, rax
  0004c	74 31		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;

  0004e	e8 00 00 00 00	 call	 _Py_PXCTX
  00053	85 c0		 test	 eax, eax
  00055	74 02		 je	 SHORT $LN5@Py_IncRef
  00057	eb 11		 jmp	 SHORT $LN6@Py_IncRef
$LN5@Py_IncRef:
  00059	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00060	48 ff c0	 inc	 rax
  00063	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN6@Py_IncRef:

; 907  :         (((PyObject*)(op))->ob_refcnt++);

  0006a	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  0006f	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00073	48 ff c0	 inc	 rax
  00076	48 8b 4c 24 40	 mov	 rcx, QWORD PTR op$[rsp]
  0007b	48 89 41 50	 mov	 QWORD PTR [rcx+80], rax
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  0007f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00083	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	_Py_DecRef
PUBLIC	??_C@_0L@EBPDDDPO@SCOPE_MASK?$AA@		; `string'
PUBLIC	??_C@_09IOLEDOKJ@SCOPE_OFF?$AA@			; `string'
PUBLIC	??_C@_04KPAIPGNJ@CELL?$AA@			; `string'
PUBLIC	??_C@_04HEDFJGEJ@FREE?$AA@			; `string'
PUBLIC	??_C@_0BA@FMICAABN@GLOBAL_IMPLICIT?$AA@		; `string'
PUBLIC	??_C@_0BA@IOONMMEG@GLOBAL_EXPLICIT?$AA@		; `string'
PUBLIC	??_C@_05EIDBELPO@LOCAL?$AA@			; `string'
PUBLIC	??_C@_0N@GNBPPHC@OPT_TOPLEVEL?$AA@		; `string'
PUBLIC	??_C@_0BA@NKHFICHP@OPT_IMPORT_STAR?$AA@		; `string'
PUBLIC	??_C@_0M@GHEPPINF@TYPE_MODULE?$AA@		; `string'
PUBLIC	??_C@_0L@BHKHDFDK@TYPE_CLASS?$AA@		; `string'
PUBLIC	??_C@_0O@FOICOKEA@TYPE_FUNCTION?$AA@		; `string'
PUBLIC	??_C@_09KPLPJFIL@DEF_BOUND?$AA@			; `string'
PUBLIC	??_C@_0L@IDCKLPEL@DEF_IMPORT?$AA@		; `string'
PUBLIC	??_C@_0P@JFMEAKHL@DEF_FREE_CLASS?$AA@		; `string'
PUBLIC	??_C@_08GMBOBBBJ@DEF_FREE?$AA@			; `string'
PUBLIC	??_C@_09BJNIEMLH@DEF_PARAM?$AA@			; `string'
PUBLIC	??_C@_09CDECDBIN@DEF_LOCAL?$AA@			; `string'
PUBLIC	??_C@_0L@JEOIEKEN@DEF_GLOBAL?$AA@		; `string'
PUBLIC	??_C@_03MBJMPENK@USE?$AA@			; `string'
PUBLIC	PyInit__symtable
EXTRN	PyErr_Occurred:PROC
EXTRN	PyModule_AddIntConstant:PROC
EXTRN	PyModule_Create2TraceRefs:PROC
EXTRN	PyType_Ready:PROC
EXTRN	PySTEntry_Type:BYTE
;	COMDAT pdata
; File c:\src\pyparallel\modules\symtablemodule.c
pdata	SEGMENT
$pdata$PyInit__symtable DD imagerel $LN6
	DD	imagerel $LN6+560
	DD	imagerel $unwind$PyInit__symtable
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyInit__symtable DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_0L@EBPDDDPO@SCOPE_MASK?$AA@
CONST	SEGMENT
??_C@_0L@EBPDDDPO@SCOPE_MASK?$AA@ DB 'SCOPE_MASK', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09IOLEDOKJ@SCOPE_OFF?$AA@
CONST	SEGMENT
??_C@_09IOLEDOKJ@SCOPE_OFF?$AA@ DB 'SCOPE_OFF', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04KPAIPGNJ@CELL?$AA@
CONST	SEGMENT
??_C@_04KPAIPGNJ@CELL?$AA@ DB 'CELL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04HEDFJGEJ@FREE?$AA@
CONST	SEGMENT
??_C@_04HEDFJGEJ@FREE?$AA@ DB 'FREE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@FMICAABN@GLOBAL_IMPLICIT?$AA@
CONST	SEGMENT
??_C@_0BA@FMICAABN@GLOBAL_IMPLICIT?$AA@ DB 'GLOBAL_IMPLICIT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@IOONMMEG@GLOBAL_EXPLICIT?$AA@
CONST	SEGMENT
??_C@_0BA@IOONMMEG@GLOBAL_EXPLICIT?$AA@ DB 'GLOBAL_EXPLICIT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05EIDBELPO@LOCAL?$AA@
CONST	SEGMENT
??_C@_05EIDBELPO@LOCAL?$AA@ DB 'LOCAL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@GNBPPHC@OPT_TOPLEVEL?$AA@
CONST	SEGMENT
??_C@_0N@GNBPPHC@OPT_TOPLEVEL?$AA@ DB 'OPT_TOPLEVEL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@NKHFICHP@OPT_IMPORT_STAR?$AA@
CONST	SEGMENT
??_C@_0BA@NKHFICHP@OPT_IMPORT_STAR?$AA@ DB 'OPT_IMPORT_STAR', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GHEPPINF@TYPE_MODULE?$AA@
CONST	SEGMENT
??_C@_0M@GHEPPINF@TYPE_MODULE?$AA@ DB 'TYPE_MODULE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@BHKHDFDK@TYPE_CLASS?$AA@
CONST	SEGMENT
??_C@_0L@BHKHDFDK@TYPE_CLASS?$AA@ DB 'TYPE_CLASS', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@FOICOKEA@TYPE_FUNCTION?$AA@
CONST	SEGMENT
??_C@_0O@FOICOKEA@TYPE_FUNCTION?$AA@ DB 'TYPE_FUNCTION', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09KPLPJFIL@DEF_BOUND?$AA@
CONST	SEGMENT
??_C@_09KPLPJFIL@DEF_BOUND?$AA@ DB 'DEF_BOUND', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@IDCKLPEL@DEF_IMPORT?$AA@
CONST	SEGMENT
??_C@_0L@IDCKLPEL@DEF_IMPORT?$AA@ DB 'DEF_IMPORT', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@JFMEAKHL@DEF_FREE_CLASS?$AA@
CONST	SEGMENT
??_C@_0P@JFMEAKHL@DEF_FREE_CLASS?$AA@ DB 'DEF_FREE_CLASS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08GMBOBBBJ@DEF_FREE?$AA@
CONST	SEGMENT
??_C@_08GMBOBBBJ@DEF_FREE?$AA@ DB 'DEF_FREE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09BJNIEMLH@DEF_PARAM?$AA@
CONST	SEGMENT
??_C@_09BJNIEMLH@DEF_PARAM?$AA@ DB 'DEF_PARAM', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09CDECDBIN@DEF_LOCAL?$AA@
CONST	SEGMENT
??_C@_09CDECDBIN@DEF_LOCAL?$AA@ DB 'DEF_LOCAL', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JEOIEKEN@DEF_GLOBAL?$AA@
CONST	SEGMENT
??_C@_0L@JEOIEKEN@DEF_GLOBAL?$AA@ DB 'DEF_GLOBAL', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03MBJMPENK@USE?$AA@
CONST	SEGMENT
??_C@_03MBJMPENK@USE?$AA@ DB 'USE', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyInit__symtable
_TEXT	SEGMENT
m$ = 32
PyInit__symtable PROC					; COMDAT

; 63   : {

$LN6:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 64   :     PyObject *m;
; 65   : 
; 66   :     if (PyType_Ready(&PySTEntry_Type) < 0)

  00004	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PySTEntry_Type
  0000b	e8 00 00 00 00	 call	 PyType_Ready
  00010	85 c0		 test	 eax, eax
  00012	7d 07		 jge	 SHORT $LN3@PyInit__sy

; 67   :         return NULL;

  00014	33 c0		 xor	 eax, eax
  00016	e9 10 02 00 00	 jmp	 $LN4@PyInit__sy
$LN3@PyInit__sy:

; 68   : 
; 69   :     m = PyModule_Create(&symtablemodule);

  0001b	ba f5 03 00 00	 mov	 edx, 1013		; 000003f5H
  00020	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:symtablemodule
  00027	e8 00 00 00 00	 call	 PyModule_Create2TraceRefs
  0002c	48 89 44 24 20	 mov	 QWORD PTR m$[rsp], rax

; 70   :     if (m == NULL)

  00031	48 83 7c 24 20
	00		 cmp	 QWORD PTR m$[rsp], 0
  00037	75 07		 jne	 SHORT $LN2@PyInit__sy

; 71   :         return NULL;

  00039	33 c0		 xor	 eax, eax
  0003b	e9 eb 01 00 00	 jmp	 $LN4@PyInit__sy
$LN2@PyInit__sy:

; 72   :     PyModule_AddIntConstant(m, "USE", USE);

  00040	41 b8 10 00 00
	00		 mov	 r8d, 16
  00046	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03MBJMPENK@USE?$AA@
  0004d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR m$[rsp]
  00052	e8 00 00 00 00	 call	 PyModule_AddIntConstant

; 73   :     PyModule_AddIntConstant(m, "DEF_GLOBAL", DEF_GLOBAL);

  00057	41 b8 01 00 00
	00		 mov	 r8d, 1
  0005d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@JEOIEKEN@DEF_GLOBAL?$AA@
  00064	48 8b 4c 24 20	 mov	 rcx, QWORD PTR m$[rsp]
  00069	e8 00 00 00 00	 call	 PyModule_AddIntConstant

; 74   :     PyModule_AddIntConstant(m, "DEF_LOCAL", DEF_LOCAL);

  0006e	41 b8 02 00 00
	00		 mov	 r8d, 2
  00074	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09CDECDBIN@DEF_LOCAL?$AA@
  0007b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR m$[rsp]
  00080	e8 00 00 00 00	 call	 PyModule_AddIntConstant

; 75   :     PyModule_AddIntConstant(m, "DEF_PARAM", DEF_PARAM);

  00085	41 b8 04 00 00
	00		 mov	 r8d, 4
  0008b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09BJNIEMLH@DEF_PARAM?$AA@
  00092	48 8b 4c 24 20	 mov	 rcx, QWORD PTR m$[rsp]
  00097	e8 00 00 00 00	 call	 PyModule_AddIntConstant

; 76   :     PyModule_AddIntConstant(m, "DEF_FREE", DEF_FREE);

  0009c	41 b8 20 00 00
	00		 mov	 r8d, 32			; 00000020H
  000a2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08GMBOBBBJ@DEF_FREE?$AA@
  000a9	48 8b 4c 24 20	 mov	 rcx, QWORD PTR m$[rsp]
  000ae	e8 00 00 00 00	 call	 PyModule_AddIntConstant

; 77   :     PyModule_AddIntConstant(m, "DEF_FREE_CLASS", DEF_FREE_CLASS);

  000b3	41 b8 40 00 00
	00		 mov	 r8d, 64			; 00000040H
  000b9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0P@JFMEAKHL@DEF_FREE_CLASS?$AA@
  000c0	48 8b 4c 24 20	 mov	 rcx, QWORD PTR m$[rsp]
  000c5	e8 00 00 00 00	 call	 PyModule_AddIntConstant

; 78   :     PyModule_AddIntConstant(m, "DEF_IMPORT", DEF_IMPORT);

  000ca	41 b8 80 00 00
	00		 mov	 r8d, 128		; 00000080H
  000d0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@IDCKLPEL@DEF_IMPORT?$AA@
  000d7	48 8b 4c 24 20	 mov	 rcx, QWORD PTR m$[rsp]
  000dc	e8 00 00 00 00	 call	 PyModule_AddIntConstant

; 79   :     PyModule_AddIntConstant(m, "DEF_BOUND", DEF_BOUND);

  000e1	41 b8 86 00 00
	00		 mov	 r8d, 134		; 00000086H
  000e7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09KPLPJFIL@DEF_BOUND?$AA@
  000ee	48 8b 4c 24 20	 mov	 rcx, QWORD PTR m$[rsp]
  000f3	e8 00 00 00 00	 call	 PyModule_AddIntConstant

; 80   : 
; 81   :     PyModule_AddIntConstant(m, "TYPE_FUNCTION", FunctionBlock);

  000f8	45 33 c0	 xor	 r8d, r8d
  000fb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0O@FOICOKEA@TYPE_FUNCTION?$AA@
  00102	48 8b 4c 24 20	 mov	 rcx, QWORD PTR m$[rsp]
  00107	e8 00 00 00 00	 call	 PyModule_AddIntConstant

; 82   :     PyModule_AddIntConstant(m, "TYPE_CLASS", ClassBlock);

  0010c	41 b8 01 00 00
	00		 mov	 r8d, 1
  00112	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@BHKHDFDK@TYPE_CLASS?$AA@
  00119	48 8b 4c 24 20	 mov	 rcx, QWORD PTR m$[rsp]
  0011e	e8 00 00 00 00	 call	 PyModule_AddIntConstant

; 83   :     PyModule_AddIntConstant(m, "TYPE_MODULE", ModuleBlock);

  00123	41 b8 02 00 00
	00		 mov	 r8d, 2
  00129	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@GHEPPINF@TYPE_MODULE?$AA@
  00130	48 8b 4c 24 20	 mov	 rcx, QWORD PTR m$[rsp]
  00135	e8 00 00 00 00	 call	 PyModule_AddIntConstant

; 84   : 
; 85   :     PyModule_AddIntConstant(m, "OPT_IMPORT_STAR", OPT_IMPORT_STAR);

  0013a	41 b8 01 00 00
	00		 mov	 r8d, 1
  00140	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BA@NKHFICHP@OPT_IMPORT_STAR?$AA@
  00147	48 8b 4c 24 20	 mov	 rcx, QWORD PTR m$[rsp]
  0014c	e8 00 00 00 00	 call	 PyModule_AddIntConstant

; 86   :     PyModule_AddIntConstant(m, "OPT_TOPLEVEL", OPT_TOPLEVEL);

  00151	41 b8 02 00 00
	00		 mov	 r8d, 2
  00157	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@GNBPPHC@OPT_TOPLEVEL?$AA@
  0015e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR m$[rsp]
  00163	e8 00 00 00 00	 call	 PyModule_AddIntConstant

; 87   : 
; 88   :     PyModule_AddIntConstant(m, "LOCAL", LOCAL);

  00168	41 b8 01 00 00
	00		 mov	 r8d, 1
  0016e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05EIDBELPO@LOCAL?$AA@
  00175	48 8b 4c 24 20	 mov	 rcx, QWORD PTR m$[rsp]
  0017a	e8 00 00 00 00	 call	 PyModule_AddIntConstant

; 89   :     PyModule_AddIntConstant(m, "GLOBAL_EXPLICIT", GLOBAL_EXPLICIT);

  0017f	41 b8 02 00 00
	00		 mov	 r8d, 2
  00185	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BA@IOONMMEG@GLOBAL_EXPLICIT?$AA@
  0018c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR m$[rsp]
  00191	e8 00 00 00 00	 call	 PyModule_AddIntConstant

; 90   :     PyModule_AddIntConstant(m, "GLOBAL_IMPLICIT", GLOBAL_IMPLICIT);

  00196	41 b8 03 00 00
	00		 mov	 r8d, 3
  0019c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BA@FMICAABN@GLOBAL_IMPLICIT?$AA@
  001a3	48 8b 4c 24 20	 mov	 rcx, QWORD PTR m$[rsp]
  001a8	e8 00 00 00 00	 call	 PyModule_AddIntConstant

; 91   :     PyModule_AddIntConstant(m, "FREE", FREE);

  001ad	41 b8 04 00 00
	00		 mov	 r8d, 4
  001b3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04HEDFJGEJ@FREE?$AA@
  001ba	48 8b 4c 24 20	 mov	 rcx, QWORD PTR m$[rsp]
  001bf	e8 00 00 00 00	 call	 PyModule_AddIntConstant

; 92   :     PyModule_AddIntConstant(m, "CELL", CELL);

  001c4	41 b8 05 00 00
	00		 mov	 r8d, 5
  001ca	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04KPAIPGNJ@CELL?$AA@
  001d1	48 8b 4c 24 20	 mov	 rcx, QWORD PTR m$[rsp]
  001d6	e8 00 00 00 00	 call	 PyModule_AddIntConstant

; 93   : 
; 94   :     PyModule_AddIntConstant(m, "SCOPE_OFF", SCOPE_OFFSET);

  001db	41 b8 0b 00 00
	00		 mov	 r8d, 11
  001e1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09IOLEDOKJ@SCOPE_OFF?$AA@
  001e8	48 8b 4c 24 20	 mov	 rcx, QWORD PTR m$[rsp]
  001ed	e8 00 00 00 00	 call	 PyModule_AddIntConstant

; 95   :     PyModule_AddIntConstant(m, "SCOPE_MASK", SCOPE_MASK);

  001f2	41 b8 0f 00 00
	00		 mov	 r8d, 15
  001f8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@EBPDDDPO@SCOPE_MASK?$AA@
  001ff	48 8b 4c 24 20	 mov	 rcx, QWORD PTR m$[rsp]
  00204	e8 00 00 00 00	 call	 PyModule_AddIntConstant

; 96   : 
; 97   :     if (PyErr_Occurred()) {

  00209	e8 00 00 00 00	 call	 PyErr_Occurred
  0020e	48 85 c0	 test	 rax, rax
  00211	74 13		 je	 SHORT $LN1@PyInit__sy

; 98   :         Py_DECREF(m);

  00213	48 8b 4c 24 20	 mov	 rcx, QWORD PTR m$[rsp]
  00218	e8 00 00 00 00	 call	 _Py_DecRef

; 99   :         m = 0;

  0021d	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR m$[rsp], 0
$LN1@PyInit__sy:

; 100  :     }
; 101  :     return m;

  00226	48 8b 44 24 20	 mov	 rax, QWORD PTR m$[rsp]
$LN4@PyInit__sy:

; 102  : }

  0022b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0022f	c3		 ret	 0
PyInit__symtable ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
EXTRN	_Py_Dealloc:PROC
EXTRN	_Py_NegativeRefcount:PROC
EXTRN	Px_DecRef:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN13
	DD	imagerel $LN13+257
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
tv81 = 48
op$ = 80
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN13:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	0f 85 e6 00 00
	00		 jne	 $LN8@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00016	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0001b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0001f	48 83 e0 20	 and	 rax, 32			; 00000020H
  00023	48 85 c0	 test	 rax, rax
  00026	75 14		 jne	 SHORT $LN6@Py_DecRef
  00028	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0002d	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00031	48 25 80 00 00
	00		 and	 rax, 128		; 00000080H
  00037	48 85 c0	 test	 rax, rax
  0003a	74 0f		 je	 SHORT $LN7@Py_DecRef
$LN6@Py_DecRef:

; 926  :             Px_DECREF(op);

  0003c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  00041	e8 00 00 00 00	 call	 Px_DecRef
  00046	e9 b1 00 00 00	 jmp	 $LN5@Py_DecRef
$LN7@Py_DecRef:

; 927  :         else if (!Px_ISPX(op)) {

  0004b	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00050	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00054	48 83 e0 02	 and	 rax, 2
  00058	48 85 c0	 test	 rax, rax
  0005b	0f 85 9b 00 00
	00		 jne	 $LN4@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;

  00061	e8 00 00 00 00	 call	 _Py_PXCTX
  00066	85 c0		 test	 eax, eax
  00068	74 02		 je	 SHORT $LN11@Py_DecRef
  0006a	eb 11		 jmp	 SHORT $LN12@Py_DecRef
$LN11@Py_DecRef:
  0006c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00073	48 ff c8	 dec	 rax
  00076	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN12@Py_DecRef:

; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  0007d	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00082	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00086	48 ff c8	 dec	 rax
  00089	48 89 44 24 30	 mov	 QWORD PTR tv81[rsp], rax
  0008e	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00093	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv81[rsp]
  00098	48 89 48 50	 mov	 QWORD PTR [rax+80], rcx
  0009c	48 83 7c 24 30
	00		 cmp	 QWORD PTR tv81[rsp], 0
  000a2	74 4e		 je	 SHORT $LN3@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);

  000a4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000ac	4c 8b 4c 24 50	 mov	 r9, QWORD PTR op$[rsp]
  000b1	41 b8 a2 03 00
	00		 mov	 r8d, 930		; 000003a2H
  000b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000c5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ca	85 c0		 test	 eax, eax
  000cc	75 22		 jne	 SHORT $LN2@Py_DecRef
  000ce	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  000d3	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000d8	7d 16		 jge	 SHORT $LN2@Py_DecRef
  000da	4c 8b 44 24 50	 mov	 r8, QWORD PTR op$[rsp]
  000df	ba a2 03 00 00	 mov	 edx, 930		; 000003a2H
  000e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000eb	e8 00 00 00 00	 call	 _Py_NegativeRefcount
$LN2@Py_DecRef:

; 931  :             } else

  000f0	eb 0a		 jmp	 SHORT $LN1@Py_DecRef
$LN3@Py_DecRef:

; 932  :                 _Py_Dealloc((PyObject *)(op));

  000f2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  000f7	e8 00 00 00 00	 call	 _Py_Dealloc
$LN1@Py_DecRef:
$LN4@Py_DecRef:
$LN5@Py_DecRef:
$LN8@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  000fc	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00100	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
END
