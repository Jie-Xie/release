; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
no_grouping DB	07fH
_DATA	ENDS
PUBLIC	??_C@_1CK@KFNFIMBM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@ ; `string'
PUBLIC	_PyUnicode_FormatAdvancedWriter
EXTRN	_PyUnicodeWriter_WriteStr:PROC
EXTRN	PyUnicode_Type:BYTE
EXTRN	__imp__wassert:PROC
;	COMDAT pdata
; File c:\src\pyparallel\python\formatter_unicode.c
pdata	SEGMENT
$pdata$_PyUnicode_FormatAdvancedWriter DD imagerel $LN12
	DD	imagerel $LN12+307
	DD	imagerel $unwind$_PyUnicode_FormatAdvancedWriter
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyUnicode_FormatAdvancedWriter DD 011801H
	DD	0e218H
xdata	ENDS
;	COMDAT ??_C@_1CK@KFNFIMBM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CK@KFNFIMBM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, 'o', 00H, 'b', 00H, 'j', 00H, ')', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
CONST	SEGMENT
??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@ DB '.'
	DB	00H, '.', 00H, '\', 00H, 'P', 00H, 'y', 00H, 't', 00H, 'h', 00H
	DB	'o', 00H, 'n', 00H, '\', 00H, 'f', 00H, 'o', 00H, 'r', 00H, 'm'
	DB	00H, 'a', 00H, 't', 00H, 't', 00H, 'e', 00H, 'r', 00H, '_', 00H
	DB	'u', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e'
	DB	00H, '.', 00H, 'c', 00H, 00H, 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PyUnicode_FormatAdvancedWriter
_TEXT	SEGMENT
format$ = 48
tv89 = 96
writer$ = 128
obj$ = 136
format_spec$ = 144
start$ = 152
end$ = 160
_PyUnicode_FormatAdvancedWriter PROC			; COMDAT

; 1378 : {

$LN12:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 1379 :     InternalFormatSpec format;
; 1380 : 
; 1381 :     assert(PyUnicode_Check(obj));

  00018	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR obj$[rsp]
  00020	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00024	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0002a	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0002f	85 c0		 test	 eax, eax
  00031	75 1c		 jne	 SHORT $LN11@PyUnicode_
  00033	41 b8 65 05 00
	00		 mov	 r8d, 1381		; 00000565H
  00039	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00040	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@KFNFIMBM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@
  00047	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0004d	33 c0		 xor	 eax, eax
$LN11@PyUnicode_:

; 1382 : 
; 1383 :     /* check for the special case of zero length format spec, make
; 1384 :        it equivalent to str(obj) */
; 1385 :     if (start == end) {

  0004f	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR end$[rsp]
  00057	48 39 84 24 98
	00 00 00	 cmp	 QWORD PTR start$[rsp], rax
  0005f	75 4b		 jne	 SHORT $LN8@PyUnicode_

; 1386 :         if (PyUnicode_CheckExact(obj))

  00061	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyUnicode_Type
  00068	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  00070	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00074	75 1c		 jne	 SHORT $LN7@PyUnicode_

; 1387 :             return _PyUnicodeWriter_WriteStr(writer, obj);

  00076	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR obj$[rsp]
  0007e	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR writer$[rsp]
  00086	e8 00 00 00 00	 call	 _PyUnicodeWriter_WriteStr
  0008b	e9 9e 00 00 00	 jmp	 $LN9@PyUnicode_

; 1388 :         else

  00090	eb 1a		 jmp	 SHORT $LN6@PyUnicode_
$LN7@PyUnicode_:

; 1389 :             return format_obj(obj, writer);

  00092	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR writer$[rsp]
  0009a	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  000a2	e8 00 00 00 00	 call	 format_obj
  000a7	e9 82 00 00 00	 jmp	 $LN9@PyUnicode_
$LN6@PyUnicode_:
$LN8@PyUnicode_:

; 1390 :     }
; 1391 : 
; 1392 :     /* parse the format_spec */
; 1393 :     if (!parse_internal_render_format_spec(format_spec, start, end,
; 1394 :                                            &format, 's', '<'))

  000ac	c6 44 24 28 3c	 mov	 BYTE PTR [rsp+40], 60	; 0000003cH
  000b1	c6 44 24 20 73	 mov	 BYTE PTR [rsp+32], 115	; 00000073H
  000b6	4c 8d 4c 24 30	 lea	 r9, QWORD PTR format$[rsp]
  000bb	4c 8b 84 24 a0
	00 00 00	 mov	 r8, QWORD PTR end$[rsp]
  000c3	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR start$[rsp]
  000cb	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR format_spec$[rsp]
  000d3	e8 00 00 00 00	 call	 parse_internal_render_format_spec
  000d8	85 c0		 test	 eax, eax
  000da	75 07		 jne	 SHORT $LN5@PyUnicode_

; 1395 :         return -1;

  000dc	b8 ff ff ff ff	 mov	 eax, -1
  000e1	eb 4b		 jmp	 SHORT $LN9@PyUnicode_
$LN5@PyUnicode_:

; 1396 : 
; 1397 :     /* type conversion? */
; 1398 :     switch (format.type) {

  000e3	8b 44 24 58	 mov	 eax, DWORD PTR format$[rsp+40]
  000e7	89 44 24 60	 mov	 DWORD PTR tv89[rsp], eax
  000eb	83 7c 24 60 73	 cmp	 DWORD PTR tv89[rsp], 115 ; 00000073H
  000f0	74 02		 je	 SHORT $LN2@PyUnicode_
  000f2	eb 1c		 jmp	 SHORT $LN1@PyUnicode_
$LN2@PyUnicode_:

; 1399 :     case 's':
; 1400 :         /* no type conversion needed, already a string.  do the formatting */
; 1401 :         return format_string_internal(obj, &format, writer);

  000f4	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR writer$[rsp]
  000fc	48 8d 54 24 30	 lea	 rdx, QWORD PTR format$[rsp]
  00101	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  00109	e8 00 00 00 00	 call	 format_string_internal
  0010e	eb 1e		 jmp	 SHORT $LN9@PyUnicode_
$LN1@PyUnicode_:

; 1402 :     default:
; 1403 :         /* unknown */
; 1404 :         unknown_presentation_type(format.type, obj->ob_type->tp_name);

  00110	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR obj$[rsp]
  00118	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0011c	48 8b 50 70	 mov	 rdx, QWORD PTR [rax+112]
  00120	8b 4c 24 58	 mov	 ecx, DWORD PTR format$[rsp+40]
  00124	e8 00 00 00 00	 call	 unknown_presentation_type

; 1405 :         return -1;

  00129	b8 ff ff ff ff	 mov	 eax, -1
$LN9@PyUnicode_:

; 1406 :     }
; 1407 : }

  0012e	48 83 c4 78	 add	 rsp, 120		; 00000078H
  00132	c3		 ret	 0
_PyUnicode_FormatAdvancedWriter ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DH@JJODEGPF@Unknown?5format?5code?5?8?2x?$CFx?8?5for?5o@ ; `string'
PUBLIC	??_C@_0DF@GEJEKBFN@Unknown?5format?5code?5?8?$CFc?8?5for?5obj@ ; `string'
EXTRN	PyErr_Format:PROC
EXTRN	PyExc_ValueError:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$unknown_presentation_type DD imagerel unknown_presentation_type
	DD	imagerel unknown_presentation_type+98
	DD	imagerel $unwind$unknown_presentation_type
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$unknown_presentation_type DD 010d01H
	DD	0420dH
xdata	ENDS
;	COMDAT ??_C@_0DH@JJODEGPF@Unknown?5format?5code?5?8?2x?$CFx?8?5for?5o@
CONST	SEGMENT
??_C@_0DH@JJODEGPF@Unknown?5format?5code?5?8?2x?$CFx?8?5for?5o@ DB 'Unkno'
	DB	'wn format code ''\x%x'' for object of type ''%.200s''', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DF@GEJEKBFN@Unknown?5format?5code?5?8?$CFc?8?5for?5obj@
CONST	SEGMENT
??_C@_0DF@GEJEKBFN@Unknown?5format?5code?5?8?$CFc?8?5for?5obj@ DB 'Unknow'
	DB	'n format code ''%c'' for object of type ''%.200s''', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT unknown_presentation_type
_TEXT	SEGMENT
presentation_type$ = 48
type_name$ = 56
unknown_presentation_type PROC				; COMDAT

; 14   : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 15   :     /* %c might be out-of-range, hence the two cases. */
; 16   :     if (presentation_type > 32 && presentation_type < 128)

  0000d	83 7c 24 30 20	 cmp	 DWORD PTR presentation_type$[rsp], 32 ; 00000020H
  00012	76 2c		 jbe	 SHORT $LN2@unknown_pr
  00014	81 7c 24 30 80
	00 00 00	 cmp	 DWORD PTR presentation_type$[rsp], 128 ; 00000080H
  0001c	73 22		 jae	 SHORT $LN2@unknown_pr

; 17   :         PyErr_Format(PyExc_ValueError,
; 18   :                      "Unknown format code '%c' "
; 19   :                      "for object of type '%.200s'",
; 20   :                      (char)presentation_type,
; 21   :                      type_name);

  0001e	0f be 44 24 30	 movsx	 eax, BYTE PTR presentation_type$[rsp]
  00023	4c 8b 4c 24 38	 mov	 r9, QWORD PTR type_name$[rsp]
  00028	44 8b c0	 mov	 r8d, eax
  0002b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DF@GEJEKBFN@Unknown?5format?5code?5?8?$CFc?8?5for?5obj@
  00032	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00039	e8 00 00 00 00	 call	 PyErr_Format

; 22   :     else

  0003e	eb 1d		 jmp	 SHORT $LN1@unknown_pr
$LN2@unknown_pr:

; 23   :         PyErr_Format(PyExc_ValueError,
; 24   :                      "Unknown format code '\\x%x' "
; 25   :                      "for object of type '%.200s'",
; 26   :                      (unsigned int)presentation_type,
; 27   :                      type_name);

  00040	4c 8b 4c 24 38	 mov	 r9, QWORD PTR type_name$[rsp]
  00045	44 8b 44 24 30	 mov	 r8d, DWORD PTR presentation_type$[rsp]
  0004a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DH@JJODEGPF@Unknown?5format?5code?5?8?2x?$CFx?8?5for?5o@
  00051	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00058	e8 00 00 00 00	 call	 PyErr_Format
$LN1@unknown_pr:

; 28   : }

  0005d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00061	c3		 ret	 0
unknown_presentation_type ENDP
_TEXT	ENDS
PUBLIC	??_C@_1CI@LILDMCLK@?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA?9?$AA?$DO?$AAs?$AAi?$AAg?$AAn?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA1?$AA2?$AA7?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CK@JJLKBJED@?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA?9?$AA?$DO?$AAa?$AAl?$AAi?$AAg?$AAn?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA1?$AA2?$AA7?$AA?$AA@ ; `string'
PUBLIC	??_C@_0BJ@BLPJLLHL@Invalid?5format?5specifier?$AA@ ; `string'
PUBLIC	??_C@_0CD@POOGFIMB@Format?5specifier?5missing?5precisi@ ; `string'
PUBLIC	??_C@_1FM@MDFNAKJB@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc@ ; `string'
PUBLIC	??_C@_1EE@POFOFGEK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ@ ; `string'
PUBLIC	??_C@_1DO@BKHDOHOI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1EA@DCIJOEKC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DK@JLLBFDEO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$AA@ ; `string'
EXTRN	__ImageBase:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$parse_internal_render_format_spec DD imagerel parse_internal_render_format_spec
	DD	imagerel parse_internal_render_format_spec+19008
	DD	imagerel $unwind$parse_internal_render_format_spec
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$parse_internal_render_format_spec DD 021b01H
	DD	069011bH
xdata	ENDS
;	COMDAT ??_C@_1CI@LILDMCLK@?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA?9?$AA?$DO?$AAs?$AAi?$AAg?$AAn?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA1?$AA2?$AA7?$AA?$AA@
CONST	SEGMENT
??_C@_1CI@LILDMCLK@?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA?9?$AA?$DO?$AAs?$AAi?$AAg?$AAn?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA1?$AA2?$AA7?$AA?$AA@ DB 'f'
	DB	00H, 'o', 00H, 'r', 00H, 'm', 00H, 'a', 00H, 't', 00H, '-', 00H
	DB	'>', 00H, 's', 00H, 'i', 00H, 'g', 00H, 'n', 00H, ' ', 00H, '<'
	DB	00H, '=', 00H, ' ', 00H, '1', 00H, '2', 00H, '7', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@JJLKBJED@?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA?9?$AA?$DO?$AAa?$AAl?$AAi?$AAg?$AAn?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA1?$AA2?$AA7?$AA?$AA@
CONST	SEGMENT
??_C@_1CK@JJLKBJED@?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA?9?$AA?$DO?$AAa?$AAl?$AAi?$AAg?$AAn?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA1?$AA2?$AA7?$AA?$AA@ DB 'f'
	DB	00H, 'o', 00H, 'r', 00H, 'm', 00H, 'a', 00H, 't', 00H, '-', 00H
	DB	'>', 00H, 'a', 00H, 'l', 00H, 'i', 00H, 'g', 00H, 'n', 00H, ' '
	DB	00H, '<', 00H, '=', 00H, ' ', 00H, '1', 00H, '2', 00H, '7', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@BLPJLLHL@Invalid?5format?5specifier?$AA@
CONST	SEGMENT
??_C@_0BJ@BLPJLLHL@Invalid?5format?5specifier?$AA@ DB 'Invalid format spe'
	DB	'cifier', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@POOGFIMB@Format?5specifier?5missing?5precisi@
CONST	SEGMENT
??_C@_0CD@POOGFIMB@Format?5specifier?5missing?5precisi@ DB 'Format specif'
	DB	'ier missing precision', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1FM@MDFNAKJB@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc@
CONST	SEGMENT
??_C@_1FM@MDFNAKJB@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc@ DB '('
	DB	00H, '(', 00H, 'P', 00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H
	DB	'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'O', 00H, 'b', 00H, 'j'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, '*', 00H, ')', 00H, '(', 00H
	DB	'(', 00H, 'f', 00H, 'o', 00H, 'r', 00H, 'm', 00H, 'a', 00H, 't'
	DB	00H, '_', 00H, 's', 00H, 'p', 00H, 'e', 00H, 'c', 00H, ')', 00H
	DB	')', 00H, ')', 00H, '-', 00H, '>', 00H, 'd', 00H, 'a', 00H, 't'
	DB	00H, 'a', 00H, '.', 00H, 'a', 00H, 'n', 00H, 'y', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EE@POFOFGEK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ@
CONST	SEGMENT
??_C@_1EE@POFOFGEK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'I', 00H, 'S', 00H, '_', 00H, 'R'
	DB	00H, 'E', 00H, 'A', 00H, 'D', 00H, 'Y', 00H, '(', 00H, '(', 00H
	DB	'f', 00H, 'o', 00H, 'r', 00H, 'm', 00H, 'a', 00H, 't', 00H, '_'
	DB	00H, 's', 00H, 'p', 00H, 'e', 00H, 'c', 00H, ')', 00H, ')', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1DO@BKHDOHOI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DO@BKHDOHOI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, '(', 00H, 'f', 00H, 'o', 00H, 'r', 00H
	DB	'm', 00H, 'a', 00H, 't', 00H, '_', 00H, 's', 00H, 'p', 00H, 'e'
	DB	00H, 'c', 00H, ')', 00H, ')', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1EA@DCIJOEKC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1EA@DCIJOEKC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'I', 00H, 'S', 00H, '_', 00H, 'R'
	DB	00H, 'E', 00H, 'A', 00H, 'D', 00H, 'Y', 00H, '(', 00H, 'f', 00H
	DB	'o', 00H, 'r', 00H, 'm', 00H, 'a', 00H, 't', 00H, '_', 00H, 's'
	DB	00H, 'p', 00H, 'e', 00H, 'c', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DK@JLLBFDEO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DK@JLLBFDEO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, 'f', 00H, 'o', 00H, 'r', 00H, 'm', 00H
	DB	'a', 00H, 't', 00H, '_', 00H, 's', 00H, 'p', 00H, 'e', 00H, 'c'
	DB	00H, ')', 00H, 00H, 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT parse_internal_render_format_spec
_TEXT	SEGMENT
align_specified$ = 32
consumed$ = 40
pos$ = 48
tv177 = 56
tv186 = 64
tv304 = 72
tv243 = 80
tv252 = 88
tv303 = 96
tv290 = 104
tv299 = 112
tv377 = 120
tv386 = 128
tv504 = 136
tv443 = 144
tv452 = 152
tv503 = 160
tv490 = 168
tv499 = 176
tv574 = 184
tv583 = 192
tv698 = 200
tv639 = 208
tv648 = 216
tv697 = 224
tv685 = 232
tv694 = 240
tv772 = 248
tv781 = 256
tv896 = 264
tv837 = 272
tv846 = 280
tv895 = 288
tv883 = 296
tv892 = 304
tv969 = 312
tv978 = 320
tv1093 = 328
tv1034 = 336
tv1043 = 344
tv1092 = 352
tv1080 = 360
tv1089 = 368
tv1167 = 376
tv1176 = 384
tv1291 = 392
tv1232 = 400
tv1241 = 408
tv1290 = 416
tv1278 = 424
tv1287 = 432
tv1364 = 440
tv1373 = 448
tv1488 = 456
tv1429 = 464
tv1438 = 472
tv1487 = 480
tv1475 = 488
tv1484 = 496
tv1561 = 504
tv1570 = 512
tv1685 = 520
tv1626 = 528
tv1635 = 536
tv1684 = 544
tv1672 = 552
tv1681 = 560
tv1761 = 568
tv1770 = 576
tv1885 = 584
tv1826 = 592
tv1835 = 600
tv1884 = 608
tv1872 = 616
tv1881 = 624
tv1971 = 632
tv1980 = 640
tv2095 = 648
tv2036 = 656
tv2045 = 664
tv2094 = 672
tv2082 = 680
tv2091 = 688
tv2170 = 696
tv2179 = 704
tv2294 = 712
tv2235 = 720
tv2244 = 728
tv2293 = 736
tv2281 = 744
tv2290 = 752
tv2384 = 760
tv2393 = 768
tv2508 = 776
tv2449 = 784
tv2458 = 792
tv2507 = 800
tv2495 = 808
tv2504 = 816
tv2513 = 824
format_spec$ = 848
start$ = 856
end$ = 864
format$ = 872
default_type$ = 880
default_align$ = 888
parse_internal_render_format_spec PROC			; COMDAT

; 151  : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec 48 03
	00 00		 sub	 rsp, 840		; 00000348H

; 152  :     Py_ssize_t pos = start;

  0001b	48 8b 84 24 58
	03 00 00	 mov	 rax, QWORD PTR start$[rsp]
  00023	48 89 44 24 30	 mov	 QWORD PTR pos$[rsp], rax

; 153  :     /* end-pos is used throughout this code to specify the length of
; 154  :        the input string */
; 155  : #define READ_spec(index) PyUnicode_READ_CHAR(format_spec, index)
; 156  : 
; 157  :     Py_ssize_t consumed;
; 158  :     int align_specified = 0;

  00028	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR align_specified$[rsp], 0

; 159  : 
; 160  :     format->fill_char = '\0';

  00030	48 8b 84 24 68
	03 00 00	 mov	 rax, QWORD PTR format$[rsp]
  00038	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0

; 161  :     format->align = default_align;

  0003e	0f be 84 24 78
	03 00 00	 movsx	 eax, BYTE PTR default_align$[rsp]
  00046	48 8b 8c 24 68
	03 00 00	 mov	 rcx, QWORD PTR format$[rsp]
  0004e	89 41 04	 mov	 DWORD PTR [rcx+4], eax

; 162  :     format->alternate = 0;

  00051	48 8b 84 24 68
	03 00 00	 mov	 rax, QWORD PTR format$[rsp]
  00059	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [rax+8], 0

; 163  :     format->sign = '\0';

  00060	48 8b 84 24 68
	03 00 00	 mov	 rax, QWORD PTR format$[rsp]
  00068	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [rax+12], 0

; 164  :     format->width = -1;

  0006f	48 8b 84 24 68
	03 00 00	 mov	 rax, QWORD PTR format$[rsp]
  00077	48 c7 40 10 ff
	ff ff ff	 mov	 QWORD PTR [rax+16], -1

; 165  :     format->thousands_separators = 0;

  0007f	48 8b 84 24 68
	03 00 00	 mov	 rax, QWORD PTR format$[rsp]
  00087	c7 40 18 00 00
	00 00		 mov	 DWORD PTR [rax+24], 0

; 166  :     format->precision = -1;

  0008e	48 8b 84 24 68
	03 00 00	 mov	 rax, QWORD PTR format$[rsp]
  00096	48 c7 40 20 ff
	ff ff ff	 mov	 QWORD PTR [rax+32], -1

; 167  :     format->type = default_type;

  0009e	0f be 84 24 70
	03 00 00	 movsx	 eax, BYTE PTR default_type$[rsp]
  000a6	48 8b 8c 24 68
	03 00 00	 mov	 rcx, QWORD PTR format$[rsp]
  000ae	89 41 28	 mov	 DWORD PTR [rcx+40], eax

; 168  : 
; 169  :     /* If the second char is an alignment token,
; 170  :        then parse the fill char */
; 171  :     if (end-pos >= 2 && is_alignment_token(READ_spec(pos+1))) {

  000b1	48 8b 44 24 30	 mov	 rax, QWORD PTR pos$[rsp]
  000b6	48 8b 8c 24 60
	03 00 00	 mov	 rcx, QWORD PTR end$[rsp]
  000be	48 2b c8	 sub	 rcx, rax
  000c1	48 8b c1	 mov	 rax, rcx
  000c4	48 83 f8 02	 cmp	 rax, 2
  000c8	0f 8c 59 11 00
	00		 jl	 $LN20@parse_inte
  000ce	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  000d6	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000da	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000e0	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  000e5	85 c0		 test	 eax, eax
  000e7	75 1c		 jne	 SHORT $LN23@parse_inte
  000e9	41 b8 ab 00 00
	00		 mov	 r8d, 171		; 000000abH
  000ef	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  000f6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DK@JLLBFDEO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$AA@
  000fd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00103	33 c0		 xor	 eax, eax
$LN23@parse_inte:
  00105	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  0010d	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00110	c1 e8 07	 shr	 eax, 7
  00113	83 e0 01	 and	 eax, 1
  00116	85 c0		 test	 eax, eax
  00118	75 1c		 jne	 SHORT $LN24@parse_inte
  0011a	41 b8 ab 00 00
	00		 mov	 r8d, 171		; 000000abH
  00120	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00127	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EA@DCIJOEKC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$AA@
  0012e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00134	33 c0		 xor	 eax, eax
$LN24@parse_inte:
  00136	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  0013e	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00142	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00148	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0014d	85 c0		 test	 eax, eax
  0014f	75 1c		 jne	 SHORT $LN25@parse_inte
  00151	41 b8 ab 00 00
	00		 mov	 r8d, 171		; 000000abH
  00157	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  0015e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@BKHDOHOI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00165	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0016b	33 c0		 xor	 eax, eax
$LN25@parse_inte:
  0016d	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  00175	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00178	c1 e8 07	 shr	 eax, 7
  0017b	83 e0 01	 and	 eax, 1
  0017e	85 c0		 test	 eax, eax
  00180	75 1c		 jne	 SHORT $LN26@parse_inte
  00182	41 b8 ab 00 00
	00		 mov	 r8d, 171		; 000000abH
  00188	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  0018f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@POFOFGEK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ@
  00196	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0019c	33 c0		 xor	 eax, eax
$LN26@parse_inte:
  0019e	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  001a6	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  001a9	c1 e8 02	 shr	 eax, 2
  001ac	83 e0 07	 and	 eax, 7
  001af	83 f8 01	 cmp	 eax, 1
  001b2	0f 85 60 01 00
	00		 jne	 $LN55@parse_inte
  001b8	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  001c0	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  001c4	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  001ca	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  001cf	85 c0		 test	 eax, eax
  001d1	75 1c		 jne	 SHORT $LN27@parse_inte
  001d3	41 b8 ab 00 00
	00		 mov	 r8d, 171		; 000000abH
  001d9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  001e0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@BKHDOHOI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  001e7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001ed	33 c0		 xor	 eax, eax
$LN27@parse_inte:
  001ef	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  001f7	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  001fa	c1 e8 05	 shr	 eax, 5
  001fd	83 e0 01	 and	 eax, 1
  00200	85 c0		 test	 eax, eax
  00202	0f 84 b1 00 00
	00		 je	 $LN33@parse_inte
  00208	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  00210	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00214	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0021a	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0021f	85 c0		 test	 eax, eax
  00221	75 1c		 jne	 SHORT $LN28@parse_inte
  00223	41 b8 ab 00 00
	00		 mov	 r8d, 171		; 000000abH
  00229	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00230	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@BKHDOHOI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00237	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0023d	33 c0		 xor	 eax, eax
$LN28@parse_inte:
  0023f	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  00247	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0024a	c1 e8 07	 shr	 eax, 7
  0024d	83 e0 01	 and	 eax, 1
  00250	85 c0		 test	 eax, eax
  00252	75 1c		 jne	 SHORT $LN29@parse_inte
  00254	41 b8 ab 00 00
	00		 mov	 r8d, 171		; 000000abH
  0025a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00261	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@POFOFGEK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ@
  00268	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0026e	33 c0		 xor	 eax, eax
$LN29@parse_inte:
  00270	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  00278	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0027b	c1 e8 06	 shr	 eax, 6
  0027e	83 e0 01	 and	 eax, 1
  00281	85 c0		 test	 eax, eax
  00283	74 15		 je	 SHORT $LN30@parse_inte
  00285	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  0028d	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  00293	48 89 44 24 38	 mov	 QWORD PTR tv177[rsp], rax
  00298	eb 13		 jmp	 SHORT $LN31@parse_inte
$LN30@parse_inte:
  0029a	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  002a2	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  002a8	48 89 44 24 38	 mov	 QWORD PTR tv177[rsp], rax
$LN31@parse_inte:
  002ad	48 8b 44 24 38	 mov	 rax, QWORD PTR tv177[rsp]
  002b2	48 89 44 24 40	 mov	 QWORD PTR tv186[rsp], rax
  002b7	eb 42		 jmp	 SHORT $LN34@parse_inte
$LN33@parse_inte:
  002b9	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  002c1	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  002c9	75 1c		 jne	 SHORT $LN32@parse_inte
  002cb	41 b8 ab 00 00
	00		 mov	 r8d, 171		; 000000abH
  002d1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  002d8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FM@MDFNAKJB@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc@
  002df	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  002e5	33 c0		 xor	 eax, eax
$LN32@parse_inte:
  002e7	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  002ef	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  002f6	48 89 44 24 40	 mov	 QWORD PTR tv186[rsp], rax
$LN34@parse_inte:
  002fb	48 8b 44 24 30	 mov	 rax, QWORD PTR pos$[rsp]
  00300	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tv186[rsp]
  00305	48 03 c8	 add	 rcx, rax
  00308	48 8b c1	 mov	 rax, rcx
  0030b	0f b6 40 01	 movzx	 eax, BYTE PTR [rax+1]
  0030f	89 44 24 48	 mov	 DWORD PTR tv304[rsp], eax
  00313	e9 3a 03 00 00	 jmp	 $LN56@parse_inte
$LN55@parse_inte:
  00318	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  00320	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00324	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0032a	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0032f	85 c0		 test	 eax, eax
  00331	75 1c		 jne	 SHORT $LN35@parse_inte
  00333	41 b8 ab 00 00
	00		 mov	 r8d, 171		; 000000abH
  00339	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00340	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@BKHDOHOI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00347	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0034d	33 c0		 xor	 eax, eax
$LN35@parse_inte:
  0034f	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  00357	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0035a	c1 e8 07	 shr	 eax, 7
  0035d	83 e0 01	 and	 eax, 1
  00360	85 c0		 test	 eax, eax
  00362	75 1c		 jne	 SHORT $LN36@parse_inte
  00364	41 b8 ab 00 00
	00		 mov	 r8d, 171		; 000000abH
  0036a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00371	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@POFOFGEK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ@
  00378	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0037e	33 c0		 xor	 eax, eax
$LN36@parse_inte:
  00380	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  00388	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0038b	c1 e8 02	 shr	 eax, 2
  0038e	83 e0 07	 and	 eax, 7
  00391	83 f8 02	 cmp	 eax, 2
  00394	0f 85 5b 01 00
	00		 jne	 $LN53@parse_inte
  0039a	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  003a2	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  003a6	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  003ac	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  003b1	85 c0		 test	 eax, eax
  003b3	75 1c		 jne	 SHORT $LN37@parse_inte
  003b5	41 b8 ab 00 00
	00		 mov	 r8d, 171		; 000000abH
  003bb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  003c2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@BKHDOHOI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  003c9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  003cf	33 c0		 xor	 eax, eax
$LN37@parse_inte:
  003d1	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  003d9	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  003dc	c1 e8 05	 shr	 eax, 5
  003df	83 e0 01	 and	 eax, 1
  003e2	85 c0		 test	 eax, eax
  003e4	0f 84 b1 00 00
	00		 je	 $LN43@parse_inte
  003ea	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  003f2	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  003f6	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  003fc	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00401	85 c0		 test	 eax, eax
  00403	75 1c		 jne	 SHORT $LN38@parse_inte
  00405	41 b8 ab 00 00
	00		 mov	 r8d, 171		; 000000abH
  0040b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00412	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@BKHDOHOI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00419	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0041f	33 c0		 xor	 eax, eax
$LN38@parse_inte:
  00421	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  00429	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0042c	c1 e8 07	 shr	 eax, 7
  0042f	83 e0 01	 and	 eax, 1
  00432	85 c0		 test	 eax, eax
  00434	75 1c		 jne	 SHORT $LN39@parse_inte
  00436	41 b8 ab 00 00
	00		 mov	 r8d, 171		; 000000abH
  0043c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00443	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@POFOFGEK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ@
  0044a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00450	33 c0		 xor	 eax, eax
$LN39@parse_inte:
  00452	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  0045a	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0045d	c1 e8 06	 shr	 eax, 6
  00460	83 e0 01	 and	 eax, 1
  00463	85 c0		 test	 eax, eax
  00465	74 15		 je	 SHORT $LN40@parse_inte
  00467	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  0046f	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  00475	48 89 44 24 50	 mov	 QWORD PTR tv243[rsp], rax
  0047a	eb 13		 jmp	 SHORT $LN41@parse_inte
$LN40@parse_inte:
  0047c	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  00484	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  0048a	48 89 44 24 50	 mov	 QWORD PTR tv243[rsp], rax
$LN41@parse_inte:
  0048f	48 8b 44 24 50	 mov	 rax, QWORD PTR tv243[rsp]
  00494	48 89 44 24 58	 mov	 QWORD PTR tv252[rsp], rax
  00499	eb 42		 jmp	 SHORT $LN44@parse_inte
$LN43@parse_inte:
  0049b	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  004a3	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  004ab	75 1c		 jne	 SHORT $LN42@parse_inte
  004ad	41 b8 ab 00 00
	00		 mov	 r8d, 171		; 000000abH
  004b3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  004ba	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FM@MDFNAKJB@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc@
  004c1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  004c7	33 c0		 xor	 eax, eax
$LN42@parse_inte:
  004c9	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  004d1	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  004d8	48 89 44 24 58	 mov	 QWORD PTR tv252[rsp], rax
$LN44@parse_inte:
  004dd	48 8b 44 24 58	 mov	 rax, QWORD PTR tv252[rsp]
  004e2	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pos$[rsp]
  004e7	0f b7 44 48 02	 movzx	 eax, WORD PTR [rax+rcx*2+2]
  004ec	89 44 24 60	 mov	 DWORD PTR tv303[rsp], eax
  004f0	e9 55 01 00 00	 jmp	 $LN54@parse_inte
$LN53@parse_inte:
  004f5	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  004fd	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00501	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00507	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0050c	85 c0		 test	 eax, eax
  0050e	75 1c		 jne	 SHORT $LN45@parse_inte
  00510	41 b8 ab 00 00
	00		 mov	 r8d, 171		; 000000abH
  00516	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  0051d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@BKHDOHOI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00524	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0052a	33 c0		 xor	 eax, eax
$LN45@parse_inte:
  0052c	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  00534	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00537	c1 e8 05	 shr	 eax, 5
  0053a	83 e0 01	 and	 eax, 1
  0053d	85 c0		 test	 eax, eax
  0053f	0f 84 b1 00 00
	00		 je	 $LN51@parse_inte
  00545	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  0054d	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00551	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00557	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0055c	85 c0		 test	 eax, eax
  0055e	75 1c		 jne	 SHORT $LN46@parse_inte
  00560	41 b8 ab 00 00
	00		 mov	 r8d, 171		; 000000abH
  00566	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  0056d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@BKHDOHOI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00574	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0057a	33 c0		 xor	 eax, eax
$LN46@parse_inte:
  0057c	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  00584	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00587	c1 e8 07	 shr	 eax, 7
  0058a	83 e0 01	 and	 eax, 1
  0058d	85 c0		 test	 eax, eax
  0058f	75 1c		 jne	 SHORT $LN47@parse_inte
  00591	41 b8 ab 00 00
	00		 mov	 r8d, 171		; 000000abH
  00597	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  0059e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@POFOFGEK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ@
  005a5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  005ab	33 c0		 xor	 eax, eax
$LN47@parse_inte:
  005ad	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  005b5	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  005b8	c1 e8 06	 shr	 eax, 6
  005bb	83 e0 01	 and	 eax, 1
  005be	85 c0		 test	 eax, eax
  005c0	74 15		 je	 SHORT $LN48@parse_inte
  005c2	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  005ca	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  005d0	48 89 44 24 68	 mov	 QWORD PTR tv290[rsp], rax
  005d5	eb 13		 jmp	 SHORT $LN49@parse_inte
$LN48@parse_inte:
  005d7	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  005df	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  005e5	48 89 44 24 68	 mov	 QWORD PTR tv290[rsp], rax
$LN49@parse_inte:
  005ea	48 8b 44 24 68	 mov	 rax, QWORD PTR tv290[rsp]
  005ef	48 89 44 24 70	 mov	 QWORD PTR tv299[rsp], rax
  005f4	eb 42		 jmp	 SHORT $LN52@parse_inte
$LN51@parse_inte:
  005f6	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  005fe	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  00606	75 1c		 jne	 SHORT $LN50@parse_inte
  00608	41 b8 ab 00 00
	00		 mov	 r8d, 171		; 000000abH
  0060e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00615	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FM@MDFNAKJB@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc@
  0061c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00622	33 c0		 xor	 eax, eax
$LN50@parse_inte:
  00624	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  0062c	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  00633	48 89 44 24 70	 mov	 QWORD PTR tv299[rsp], rax
$LN52@parse_inte:
  00638	48 8b 44 24 70	 mov	 rax, QWORD PTR tv299[rsp]
  0063d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pos$[rsp]
  00642	8b 44 88 04	 mov	 eax, DWORD PTR [rax+rcx*4+4]
  00646	89 44 24 60	 mov	 DWORD PTR tv303[rsp], eax
$LN54@parse_inte:
  0064a	8b 44 24 60	 mov	 eax, DWORD PTR tv303[rsp]
  0064e	89 44 24 48	 mov	 DWORD PTR tv304[rsp], eax
$LN56@parse_inte:
  00652	8b 4c 24 48	 mov	 ecx, DWORD PTR tv304[rsp]
  00656	e8 00 00 00 00	 call	 is_alignment_token
  0065b	85 c0		 test	 eax, eax
  0065d	0f 84 c4 0b 00
	00		 je	 $LN20@parse_inte

; 172  :         format->align = READ_spec(pos+1);

  00663	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  0066b	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0066f	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00675	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0067a	85 c0		 test	 eax, eax
  0067c	75 1c		 jne	 SHORT $LN57@parse_inte
  0067e	41 b8 ac 00 00
	00		 mov	 r8d, 172		; 000000acH
  00684	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  0068b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DK@JLLBFDEO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$AA@
  00692	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00698	33 c0		 xor	 eax, eax
$LN57@parse_inte:
  0069a	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  006a2	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  006a5	c1 e8 07	 shr	 eax, 7
  006a8	83 e0 01	 and	 eax, 1
  006ab	85 c0		 test	 eax, eax
  006ad	75 1c		 jne	 SHORT $LN58@parse_inte
  006af	41 b8 ac 00 00
	00		 mov	 r8d, 172		; 000000acH
  006b5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  006bc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EA@DCIJOEKC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$AA@
  006c3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  006c9	33 c0		 xor	 eax, eax
$LN58@parse_inte:
  006cb	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  006d3	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  006d7	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  006dd	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  006e2	85 c0		 test	 eax, eax
  006e4	75 1c		 jne	 SHORT $LN59@parse_inte
  006e6	41 b8 ac 00 00
	00		 mov	 r8d, 172		; 000000acH
  006ec	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  006f3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@BKHDOHOI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  006fa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00700	33 c0		 xor	 eax, eax
$LN59@parse_inte:
  00702	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  0070a	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0070d	c1 e8 07	 shr	 eax, 7
  00710	83 e0 01	 and	 eax, 1
  00713	85 c0		 test	 eax, eax
  00715	75 1c		 jne	 SHORT $LN60@parse_inte
  00717	41 b8 ac 00 00
	00		 mov	 r8d, 172		; 000000acH
  0071d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00724	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@POFOFGEK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ@
  0072b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00731	33 c0		 xor	 eax, eax
$LN60@parse_inte:
  00733	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  0073b	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0073e	c1 e8 02	 shr	 eax, 2
  00741	83 e0 07	 and	 eax, 7
  00744	83 f8 01	 cmp	 eax, 1
  00747	0f 85 6c 01 00
	00		 jne	 $LN89@parse_inte
  0074d	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  00755	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00759	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0075f	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00764	85 c0		 test	 eax, eax
  00766	75 1c		 jne	 SHORT $LN61@parse_inte
  00768	41 b8 ac 00 00
	00		 mov	 r8d, 172		; 000000acH
  0076e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00775	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@BKHDOHOI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  0077c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00782	33 c0		 xor	 eax, eax
$LN61@parse_inte:
  00784	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  0078c	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0078f	c1 e8 05	 shr	 eax, 5
  00792	83 e0 01	 and	 eax, 1
  00795	85 c0		 test	 eax, eax
  00797	0f 84 b4 00 00
	00		 je	 $LN67@parse_inte
  0079d	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  007a5	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  007a9	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  007af	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  007b4	85 c0		 test	 eax, eax
  007b6	75 1c		 jne	 SHORT $LN62@parse_inte
  007b8	41 b8 ac 00 00
	00		 mov	 r8d, 172		; 000000acH
  007be	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  007c5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@BKHDOHOI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  007cc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  007d2	33 c0		 xor	 eax, eax
$LN62@parse_inte:
  007d4	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  007dc	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  007df	c1 e8 07	 shr	 eax, 7
  007e2	83 e0 01	 and	 eax, 1
  007e5	85 c0		 test	 eax, eax
  007e7	75 1c		 jne	 SHORT $LN63@parse_inte
  007e9	41 b8 ac 00 00
	00		 mov	 r8d, 172		; 000000acH
  007ef	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  007f6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@POFOFGEK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ@
  007fd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00803	33 c0		 xor	 eax, eax
$LN63@parse_inte:
  00805	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  0080d	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00810	c1 e8 06	 shr	 eax, 6
  00813	83 e0 01	 and	 eax, 1
  00816	85 c0		 test	 eax, eax
  00818	74 15		 je	 SHORT $LN64@parse_inte
  0081a	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  00822	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  00828	48 89 44 24 78	 mov	 QWORD PTR tv377[rsp], rax
  0082d	eb 13		 jmp	 SHORT $LN65@parse_inte
$LN64@parse_inte:
  0082f	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  00837	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  0083d	48 89 44 24 78	 mov	 QWORD PTR tv377[rsp], rax
$LN65@parse_inte:
  00842	48 8b 44 24 78	 mov	 rax, QWORD PTR tv377[rsp]
  00847	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv386[rsp], rax
  0084f	eb 45		 jmp	 SHORT $LN68@parse_inte
$LN67@parse_inte:
  00851	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  00859	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  00861	75 1c		 jne	 SHORT $LN66@parse_inte
  00863	41 b8 ac 00 00
	00		 mov	 r8d, 172		; 000000acH
  00869	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00870	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FM@MDFNAKJB@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc@
  00877	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0087d	33 c0		 xor	 eax, eax
$LN66@parse_inte:
  0087f	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  00887	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  0088e	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv386[rsp], rax
$LN68@parse_inte:
  00896	48 8b 44 24 30	 mov	 rax, QWORD PTR pos$[rsp]
  0089b	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR tv386[rsp]
  008a3	48 03 c8	 add	 rcx, rax
  008a6	48 8b c1	 mov	 rax, rcx
  008a9	0f b6 40 01	 movzx	 eax, BYTE PTR [rax+1]
  008ad	89 84 24 88 00
	00 00		 mov	 DWORD PTR tv504[rsp], eax
  008b4	e9 6a 03 00 00	 jmp	 $LN90@parse_inte
$LN89@parse_inte:
  008b9	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  008c1	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  008c5	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  008cb	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  008d0	85 c0		 test	 eax, eax
  008d2	75 1c		 jne	 SHORT $LN69@parse_inte
  008d4	41 b8 ac 00 00
	00		 mov	 r8d, 172		; 000000acH
  008da	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  008e1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@BKHDOHOI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  008e8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  008ee	33 c0		 xor	 eax, eax
$LN69@parse_inte:
  008f0	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  008f8	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  008fb	c1 e8 07	 shr	 eax, 7
  008fe	83 e0 01	 and	 eax, 1
  00901	85 c0		 test	 eax, eax
  00903	75 1c		 jne	 SHORT $LN70@parse_inte
  00905	41 b8 ac 00 00
	00		 mov	 r8d, 172		; 000000acH
  0090b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00912	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@POFOFGEK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ@
  00919	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0091f	33 c0		 xor	 eax, eax
$LN70@parse_inte:
  00921	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  00929	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0092c	c1 e8 02	 shr	 eax, 2
  0092f	83 e0 07	 and	 eax, 7
  00932	83 f8 02	 cmp	 eax, 2
  00935	0f 85 70 01 00
	00		 jne	 $LN87@parse_inte
  0093b	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  00943	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00947	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0094d	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00952	85 c0		 test	 eax, eax
  00954	75 1c		 jne	 SHORT $LN71@parse_inte
  00956	41 b8 ac 00 00
	00		 mov	 r8d, 172		; 000000acH
  0095c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00963	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@BKHDOHOI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  0096a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00970	33 c0		 xor	 eax, eax
$LN71@parse_inte:
  00972	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  0097a	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0097d	c1 e8 05	 shr	 eax, 5
  00980	83 e0 01	 and	 eax, 1
  00983	85 c0		 test	 eax, eax
  00985	0f 84 bd 00 00
	00		 je	 $LN77@parse_inte
  0098b	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  00993	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00997	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0099d	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  009a2	85 c0		 test	 eax, eax
  009a4	75 1c		 jne	 SHORT $LN72@parse_inte
  009a6	41 b8 ac 00 00
	00		 mov	 r8d, 172		; 000000acH
  009ac	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  009b3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@BKHDOHOI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  009ba	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  009c0	33 c0		 xor	 eax, eax
$LN72@parse_inte:
  009c2	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  009ca	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  009cd	c1 e8 07	 shr	 eax, 7
  009d0	83 e0 01	 and	 eax, 1
  009d3	85 c0		 test	 eax, eax
  009d5	75 1c		 jne	 SHORT $LN73@parse_inte
  009d7	41 b8 ac 00 00
	00		 mov	 r8d, 172		; 000000acH
  009dd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  009e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@POFOFGEK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ@
  009eb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  009f1	33 c0		 xor	 eax, eax
$LN73@parse_inte:
  009f3	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  009fb	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  009fe	c1 e8 06	 shr	 eax, 6
  00a01	83 e0 01	 and	 eax, 1
  00a04	85 c0		 test	 eax, eax
  00a06	74 18		 je	 SHORT $LN74@parse_inte
  00a08	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  00a10	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  00a16	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv443[rsp], rax
  00a1e	eb 16		 jmp	 SHORT $LN75@parse_inte
$LN74@parse_inte:
  00a20	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  00a28	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  00a2e	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv443[rsp], rax
$LN75@parse_inte:
  00a36	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR tv443[rsp]
  00a3e	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR tv452[rsp], rax
  00a46	eb 45		 jmp	 SHORT $LN78@parse_inte
$LN77@parse_inte:
  00a48	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  00a50	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  00a58	75 1c		 jne	 SHORT $LN76@parse_inte
  00a5a	41 b8 ac 00 00
	00		 mov	 r8d, 172		; 000000acH
  00a60	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00a67	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FM@MDFNAKJB@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc@
  00a6e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00a74	33 c0		 xor	 eax, eax
$LN76@parse_inte:
  00a76	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  00a7e	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  00a85	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR tv452[rsp], rax
$LN78@parse_inte:
  00a8d	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR tv452[rsp]
  00a95	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pos$[rsp]
  00a9a	0f b7 44 48 02	 movzx	 eax, WORD PTR [rax+rcx*2+2]
  00a9f	89 84 24 a0 00
	00 00		 mov	 DWORD PTR tv503[rsp], eax
  00aa6	e9 6a 01 00 00	 jmp	 $LN88@parse_inte
$LN87@parse_inte:
  00aab	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  00ab3	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00ab7	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00abd	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00ac2	85 c0		 test	 eax, eax
  00ac4	75 1c		 jne	 SHORT $LN79@parse_inte
  00ac6	41 b8 ac 00 00
	00		 mov	 r8d, 172		; 000000acH
  00acc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00ad3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@BKHDOHOI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00ada	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00ae0	33 c0		 xor	 eax, eax
$LN79@parse_inte:
  00ae2	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  00aea	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00aed	c1 e8 05	 shr	 eax, 5
  00af0	83 e0 01	 and	 eax, 1
  00af3	85 c0		 test	 eax, eax
  00af5	0f 84 bd 00 00
	00		 je	 $LN85@parse_inte
  00afb	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  00b03	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00b07	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00b0d	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00b12	85 c0		 test	 eax, eax
  00b14	75 1c		 jne	 SHORT $LN80@parse_inte
  00b16	41 b8 ac 00 00
	00		 mov	 r8d, 172		; 000000acH
  00b1c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00b23	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@BKHDOHOI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00b2a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00b30	33 c0		 xor	 eax, eax
$LN80@parse_inte:
  00b32	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  00b3a	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00b3d	c1 e8 07	 shr	 eax, 7
  00b40	83 e0 01	 and	 eax, 1
  00b43	85 c0		 test	 eax, eax
  00b45	75 1c		 jne	 SHORT $LN81@parse_inte
  00b47	41 b8 ac 00 00
	00		 mov	 r8d, 172		; 000000acH
  00b4d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00b54	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@POFOFGEK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ@
  00b5b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00b61	33 c0		 xor	 eax, eax
$LN81@parse_inte:
  00b63	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  00b6b	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00b6e	c1 e8 06	 shr	 eax, 6
  00b71	83 e0 01	 and	 eax, 1
  00b74	85 c0		 test	 eax, eax
  00b76	74 18		 je	 SHORT $LN82@parse_inte
  00b78	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  00b80	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  00b86	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR tv490[rsp], rax
  00b8e	eb 16		 jmp	 SHORT $LN83@parse_inte
$LN82@parse_inte:
  00b90	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  00b98	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  00b9e	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR tv490[rsp], rax
$LN83@parse_inte:
  00ba6	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR tv490[rsp]
  00bae	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR tv499[rsp], rax
  00bb6	eb 45		 jmp	 SHORT $LN86@parse_inte
$LN85@parse_inte:
  00bb8	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  00bc0	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  00bc8	75 1c		 jne	 SHORT $LN84@parse_inte
  00bca	41 b8 ac 00 00
	00		 mov	 r8d, 172		; 000000acH
  00bd0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00bd7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FM@MDFNAKJB@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc@
  00bde	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00be4	33 c0		 xor	 eax, eax
$LN84@parse_inte:
  00be6	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  00bee	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  00bf5	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR tv499[rsp], rax
$LN86@parse_inte:
  00bfd	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR tv499[rsp]
  00c05	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pos$[rsp]
  00c0a	8b 44 88 04	 mov	 eax, DWORD PTR [rax+rcx*4+4]
  00c0e	89 84 24 a0 00
	00 00		 mov	 DWORD PTR tv503[rsp], eax
$LN88@parse_inte:
  00c15	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR tv503[rsp]
  00c1c	89 84 24 88 00
	00 00		 mov	 DWORD PTR tv504[rsp], eax
$LN90@parse_inte:
  00c23	48 8b 84 24 68
	03 00 00	 mov	 rax, QWORD PTR format$[rsp]
  00c2b	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR tv504[rsp]
  00c32	89 48 04	 mov	 DWORD PTR [rax+4], ecx

; 173  :         format->fill_char = READ_spec(pos);

  00c35	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  00c3d	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00c41	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00c47	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00c4c	85 c0		 test	 eax, eax
  00c4e	75 1c		 jne	 SHORT $LN91@parse_inte
  00c50	41 b8 ad 00 00
	00		 mov	 r8d, 173		; 000000adH
  00c56	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00c5d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DK@JLLBFDEO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$AA@
  00c64	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00c6a	33 c0		 xor	 eax, eax
$LN91@parse_inte:
  00c6c	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  00c74	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00c77	c1 e8 07	 shr	 eax, 7
  00c7a	83 e0 01	 and	 eax, 1
  00c7d	85 c0		 test	 eax, eax
  00c7f	75 1c		 jne	 SHORT $LN92@parse_inte
  00c81	41 b8 ad 00 00
	00		 mov	 r8d, 173		; 000000adH
  00c87	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00c8e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EA@DCIJOEKC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$AA@
  00c95	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00c9b	33 c0		 xor	 eax, eax
$LN92@parse_inte:
  00c9d	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  00ca5	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00ca9	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00caf	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00cb4	85 c0		 test	 eax, eax
  00cb6	75 1c		 jne	 SHORT $LN93@parse_inte
  00cb8	41 b8 ad 00 00
	00		 mov	 r8d, 173		; 000000adH
  00cbe	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00cc5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@BKHDOHOI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00ccc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00cd2	33 c0		 xor	 eax, eax
$LN93@parse_inte:
  00cd4	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  00cdc	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00cdf	c1 e8 07	 shr	 eax, 7
  00ce2	83 e0 01	 and	 eax, 1
  00ce5	85 c0		 test	 eax, eax
  00ce7	75 1c		 jne	 SHORT $LN94@parse_inte
  00ce9	41 b8 ad 00 00
	00		 mov	 r8d, 173		; 000000adH
  00cef	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00cf6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@POFOFGEK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ@
  00cfd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00d03	33 c0		 xor	 eax, eax
$LN94@parse_inte:
  00d05	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  00d0d	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00d10	c1 e8 02	 shr	 eax, 2
  00d13	83 e0 07	 and	 eax, 7
  00d16	83 f8 01	 cmp	 eax, 1
  00d19	0f 85 74 01 00
	00		 jne	 $LN123@parse_inte
  00d1f	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  00d27	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00d2b	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00d31	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00d36	85 c0		 test	 eax, eax
  00d38	75 1c		 jne	 SHORT $LN95@parse_inte
  00d3a	41 b8 ad 00 00
	00		 mov	 r8d, 173		; 000000adH
  00d40	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00d47	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@BKHDOHOI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00d4e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00d54	33 c0		 xor	 eax, eax
$LN95@parse_inte:
  00d56	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  00d5e	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00d61	c1 e8 05	 shr	 eax, 5
  00d64	83 e0 01	 and	 eax, 1
  00d67	85 c0		 test	 eax, eax
  00d69	0f 84 bd 00 00
	00		 je	 $LN101@parse_inte
  00d6f	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  00d77	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00d7b	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00d81	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00d86	85 c0		 test	 eax, eax
  00d88	75 1c		 jne	 SHORT $LN96@parse_inte
  00d8a	41 b8 ad 00 00
	00		 mov	 r8d, 173		; 000000adH
  00d90	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00d97	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@BKHDOHOI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00d9e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00da4	33 c0		 xor	 eax, eax
$LN96@parse_inte:
  00da6	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  00dae	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00db1	c1 e8 07	 shr	 eax, 7
  00db4	83 e0 01	 and	 eax, 1
  00db7	85 c0		 test	 eax, eax
  00db9	75 1c		 jne	 SHORT $LN97@parse_inte
  00dbb	41 b8 ad 00 00
	00		 mov	 r8d, 173		; 000000adH
  00dc1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00dc8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@POFOFGEK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ@
  00dcf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00dd5	33 c0		 xor	 eax, eax
$LN97@parse_inte:
  00dd7	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  00ddf	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00de2	c1 e8 06	 shr	 eax, 6
  00de5	83 e0 01	 and	 eax, 1
  00de8	85 c0		 test	 eax, eax
  00dea	74 18		 je	 SHORT $LN98@parse_inte
  00dec	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  00df4	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  00dfa	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR tv574[rsp], rax
  00e02	eb 16		 jmp	 SHORT $LN99@parse_inte
$LN98@parse_inte:
  00e04	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  00e0c	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  00e12	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR tv574[rsp], rax
$LN99@parse_inte:
  00e1a	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR tv574[rsp]
  00e22	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR tv583[rsp], rax
  00e2a	eb 45		 jmp	 SHORT $LN102@parse_inte
$LN101@parse_inte:
  00e2c	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  00e34	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  00e3c	75 1c		 jne	 SHORT $LN100@parse_inte
  00e3e	41 b8 ad 00 00
	00		 mov	 r8d, 173		; 000000adH
  00e44	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00e4b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FM@MDFNAKJB@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc@
  00e52	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00e58	33 c0		 xor	 eax, eax
$LN100@parse_inte:
  00e5a	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  00e62	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  00e69	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR tv583[rsp], rax
$LN102@parse_inte:
  00e71	48 8b 44 24 30	 mov	 rax, QWORD PTR pos$[rsp]
  00e76	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR tv583[rsp]
  00e7e	48 03 c8	 add	 rcx, rax
  00e81	48 8b c1	 mov	 rax, rcx
  00e84	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00e87	89 84 24 c8 00
	00 00		 mov	 DWORD PTR tv698[rsp], eax
  00e8e	e9 68 03 00 00	 jmp	 $LN124@parse_inte
$LN123@parse_inte:
  00e93	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  00e9b	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00e9f	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00ea5	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00eaa	85 c0		 test	 eax, eax
  00eac	75 1c		 jne	 SHORT $LN103@parse_inte
  00eae	41 b8 ad 00 00
	00		 mov	 r8d, 173		; 000000adH
  00eb4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00ebb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@BKHDOHOI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00ec2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00ec8	33 c0		 xor	 eax, eax
$LN103@parse_inte:
  00eca	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  00ed2	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00ed5	c1 e8 07	 shr	 eax, 7
  00ed8	83 e0 01	 and	 eax, 1
  00edb	85 c0		 test	 eax, eax
  00edd	75 1c		 jne	 SHORT $LN104@parse_inte
  00edf	41 b8 ad 00 00
	00		 mov	 r8d, 173		; 000000adH
  00ee5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00eec	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@POFOFGEK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ@
  00ef3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00ef9	33 c0		 xor	 eax, eax
$LN104@parse_inte:
  00efb	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  00f03	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00f06	c1 e8 02	 shr	 eax, 2
  00f09	83 e0 07	 and	 eax, 7
  00f0c	83 f8 02	 cmp	 eax, 2
  00f0f	0f 85 6f 01 00
	00		 jne	 $LN121@parse_inte
  00f15	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  00f1d	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00f21	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00f27	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00f2c	85 c0		 test	 eax, eax
  00f2e	75 1c		 jne	 SHORT $LN105@parse_inte
  00f30	41 b8 ad 00 00
	00		 mov	 r8d, 173		; 000000adH
  00f36	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00f3d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@BKHDOHOI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00f44	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00f4a	33 c0		 xor	 eax, eax
$LN105@parse_inte:
  00f4c	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  00f54	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00f57	c1 e8 05	 shr	 eax, 5
  00f5a	83 e0 01	 and	 eax, 1
  00f5d	85 c0		 test	 eax, eax
  00f5f	0f 84 bd 00 00
	00		 je	 $LN111@parse_inte
  00f65	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  00f6d	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00f71	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00f77	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00f7c	85 c0		 test	 eax, eax
  00f7e	75 1c		 jne	 SHORT $LN106@parse_inte
  00f80	41 b8 ad 00 00
	00		 mov	 r8d, 173		; 000000adH
  00f86	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00f8d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@BKHDOHOI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00f94	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00f9a	33 c0		 xor	 eax, eax
$LN106@parse_inte:
  00f9c	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  00fa4	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00fa7	c1 e8 07	 shr	 eax, 7
  00faa	83 e0 01	 and	 eax, 1
  00fad	85 c0		 test	 eax, eax
  00faf	75 1c		 jne	 SHORT $LN107@parse_inte
  00fb1	41 b8 ad 00 00
	00		 mov	 r8d, 173		; 000000adH
  00fb7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00fbe	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@POFOFGEK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ@
  00fc5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00fcb	33 c0		 xor	 eax, eax
$LN107@parse_inte:
  00fcd	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  00fd5	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00fd8	c1 e8 06	 shr	 eax, 6
  00fdb	83 e0 01	 and	 eax, 1
  00fde	85 c0		 test	 eax, eax
  00fe0	74 18		 je	 SHORT $LN108@parse_inte
  00fe2	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  00fea	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  00ff0	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR tv639[rsp], rax
  00ff8	eb 16		 jmp	 SHORT $LN109@parse_inte
$LN108@parse_inte:
  00ffa	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  01002	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  01008	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR tv639[rsp], rax
$LN109@parse_inte:
  01010	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR tv639[rsp]
  01018	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR tv648[rsp], rax
  01020	eb 45		 jmp	 SHORT $LN112@parse_inte
$LN111@parse_inte:
  01022	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  0102a	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  01032	75 1c		 jne	 SHORT $LN110@parse_inte
  01034	41 b8 ad 00 00
	00		 mov	 r8d, 173		; 000000adH
  0103a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  01041	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FM@MDFNAKJB@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc@
  01048	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0104e	33 c0		 xor	 eax, eax
$LN110@parse_inte:
  01050	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  01058	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  0105f	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR tv648[rsp], rax
$LN112@parse_inte:
  01067	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR tv648[rsp]
  0106f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pos$[rsp]
  01074	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  01078	89 84 24 e0 00
	00 00		 mov	 DWORD PTR tv697[rsp], eax
  0107f	e9 69 01 00 00	 jmp	 $LN122@parse_inte
$LN121@parse_inte:
  01084	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  0108c	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  01090	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  01096	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0109b	85 c0		 test	 eax, eax
  0109d	75 1c		 jne	 SHORT $LN113@parse_inte
  0109f	41 b8 ad 00 00
	00		 mov	 r8d, 173		; 000000adH
  010a5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  010ac	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@BKHDOHOI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  010b3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  010b9	33 c0		 xor	 eax, eax
$LN113@parse_inte:
  010bb	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  010c3	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  010c6	c1 e8 05	 shr	 eax, 5
  010c9	83 e0 01	 and	 eax, 1
  010cc	85 c0		 test	 eax, eax
  010ce	0f 84 bd 00 00
	00		 je	 $LN119@parse_inte
  010d4	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  010dc	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  010e0	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  010e6	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  010eb	85 c0		 test	 eax, eax
  010ed	75 1c		 jne	 SHORT $LN114@parse_inte
  010ef	41 b8 ad 00 00
	00		 mov	 r8d, 173		; 000000adH
  010f5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  010fc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@BKHDOHOI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  01103	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  01109	33 c0		 xor	 eax, eax
$LN114@parse_inte:
  0110b	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  01113	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  01116	c1 e8 07	 shr	 eax, 7
  01119	83 e0 01	 and	 eax, 1
  0111c	85 c0		 test	 eax, eax
  0111e	75 1c		 jne	 SHORT $LN115@parse_inte
  01120	41 b8 ad 00 00
	00		 mov	 r8d, 173		; 000000adH
  01126	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  0112d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@POFOFGEK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ@
  01134	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0113a	33 c0		 xor	 eax, eax
$LN115@parse_inte:
  0113c	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  01144	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  01147	c1 e8 06	 shr	 eax, 6
  0114a	83 e0 01	 and	 eax, 1
  0114d	85 c0		 test	 eax, eax
  0114f	74 18		 je	 SHORT $LN116@parse_inte
  01151	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  01159	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  0115f	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR tv685[rsp], rax
  01167	eb 16		 jmp	 SHORT $LN117@parse_inte
$LN116@parse_inte:
  01169	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  01171	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  01177	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR tv685[rsp], rax
$LN117@parse_inte:
  0117f	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR tv685[rsp]
  01187	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR tv694[rsp], rax
  0118f	eb 45		 jmp	 SHORT $LN120@parse_inte
$LN119@parse_inte:
  01191	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  01199	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  011a1	75 1c		 jne	 SHORT $LN118@parse_inte
  011a3	41 b8 ad 00 00
	00		 mov	 r8d, 173		; 000000adH
  011a9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  011b0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FM@MDFNAKJB@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc@
  011b7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  011bd	33 c0		 xor	 eax, eax
$LN118@parse_inte:
  011bf	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  011c7	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  011ce	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR tv694[rsp], rax
$LN120@parse_inte:
  011d6	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR tv694[rsp]
  011de	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pos$[rsp]
  011e3	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  011e6	89 84 24 e0 00
	00 00		 mov	 DWORD PTR tv697[rsp], eax
$LN122@parse_inte:
  011ed	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR tv697[rsp]
  011f4	89 84 24 c8 00
	00 00		 mov	 DWORD PTR tv698[rsp], eax
$LN124@parse_inte:
  011fb	48 8b 84 24 68
	03 00 00	 mov	 rax, QWORD PTR format$[rsp]
  01203	8b 8c 24 c8 00
	00 00		 mov	 ecx, DWORD PTR tv698[rsp]
  0120a	89 08		 mov	 DWORD PTR [rax], ecx

; 174  :         align_specified = 1;

  0120c	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR align_specified$[rsp], 1

; 175  :         pos += 2;

  01214	48 8b 44 24 30	 mov	 rax, QWORD PTR pos$[rsp]
  01219	48 83 c0 02	 add	 rax, 2
  0121d	48 89 44 24 30	 mov	 QWORD PTR pos$[rsp], rax
  01222	e9 e4 0b 00 00	 jmp	 $LN19@parse_inte
$LN20@parse_inte:

; 176  :     }
; 177  :     else if (end-pos >= 1 && is_alignment_token(READ_spec(pos))) {

  01227	48 8b 44 24 30	 mov	 rax, QWORD PTR pos$[rsp]
  0122c	48 8b 8c 24 60
	03 00 00	 mov	 rcx, QWORD PTR end$[rsp]
  01234	48 2b c8	 sub	 rcx, rax
  01237	48 8b c1	 mov	 rax, rcx
  0123a	48 83 f8 01	 cmp	 rax, 1
  0123e	0f 8c c7 0b 00
	00		 jl	 $LN18@parse_inte
  01244	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  0124c	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  01250	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  01256	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0125b	85 c0		 test	 eax, eax
  0125d	75 1c		 jne	 SHORT $LN125@parse_inte
  0125f	41 b8 b1 00 00
	00		 mov	 r8d, 177		; 000000b1H
  01265	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  0126c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DK@JLLBFDEO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$AA@
  01273	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  01279	33 c0		 xor	 eax, eax
$LN125@parse_inte:
  0127b	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  01283	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  01286	c1 e8 07	 shr	 eax, 7
  01289	83 e0 01	 and	 eax, 1
  0128c	85 c0		 test	 eax, eax
  0128e	75 1c		 jne	 SHORT $LN126@parse_inte
  01290	41 b8 b1 00 00
	00		 mov	 r8d, 177		; 000000b1H
  01296	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  0129d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EA@DCIJOEKC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$AA@
  012a4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  012aa	33 c0		 xor	 eax, eax
$LN126@parse_inte:
  012ac	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  012b4	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  012b8	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  012be	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  012c3	85 c0		 test	 eax, eax
  012c5	75 1c		 jne	 SHORT $LN127@parse_inte
  012c7	41 b8 b1 00 00
	00		 mov	 r8d, 177		; 000000b1H
  012cd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  012d4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@BKHDOHOI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  012db	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  012e1	33 c0		 xor	 eax, eax
$LN127@parse_inte:
  012e3	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  012eb	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  012ee	c1 e8 07	 shr	 eax, 7
  012f1	83 e0 01	 and	 eax, 1
  012f4	85 c0		 test	 eax, eax
  012f6	75 1c		 jne	 SHORT $LN128@parse_inte
  012f8	41 b8 b1 00 00
	00		 mov	 r8d, 177		; 000000b1H
  012fe	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  01305	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@POFOFGEK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ@
  0130c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  01312	33 c0		 xor	 eax, eax
$LN128@parse_inte:
  01314	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  0131c	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0131f	c1 e8 02	 shr	 eax, 2
  01322	83 e0 07	 and	 eax, 7
  01325	83 f8 01	 cmp	 eax, 1
  01328	0f 85 74 01 00
	00		 jne	 $LN157@parse_inte
  0132e	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  01336	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0133a	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  01340	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  01345	85 c0		 test	 eax, eax
  01347	75 1c		 jne	 SHORT $LN129@parse_inte
  01349	41 b8 b1 00 00
	00		 mov	 r8d, 177		; 000000b1H
  0134f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  01356	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@BKHDOHOI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  0135d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  01363	33 c0		 xor	 eax, eax
$LN129@parse_inte:
  01365	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  0136d	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  01370	c1 e8 05	 shr	 eax, 5
  01373	83 e0 01	 and	 eax, 1
  01376	85 c0		 test	 eax, eax
  01378	0f 84 bd 00 00
	00		 je	 $LN135@parse_inte
  0137e	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  01386	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0138a	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  01390	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  01395	85 c0		 test	 eax, eax
  01397	75 1c		 jne	 SHORT $LN130@parse_inte
  01399	41 b8 b1 00 00
	00		 mov	 r8d, 177		; 000000b1H
  0139f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  013a6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@BKHDOHOI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  013ad	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  013b3	33 c0		 xor	 eax, eax
$LN130@parse_inte:
  013b5	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  013bd	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  013c0	c1 e8 07	 shr	 eax, 7
  013c3	83 e0 01	 and	 eax, 1
  013c6	85 c0		 test	 eax, eax
  013c8	75 1c		 jne	 SHORT $LN131@parse_inte
  013ca	41 b8 b1 00 00
	00		 mov	 r8d, 177		; 000000b1H
  013d0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  013d7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@POFOFGEK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ@
  013de	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  013e4	33 c0		 xor	 eax, eax
$LN131@parse_inte:
  013e6	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  013ee	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  013f1	c1 e8 06	 shr	 eax, 6
  013f4	83 e0 01	 and	 eax, 1
  013f7	85 c0		 test	 eax, eax
  013f9	74 18		 je	 SHORT $LN132@parse_inte
  013fb	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  01403	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  01409	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR tv772[rsp], rax
  01411	eb 16		 jmp	 SHORT $LN133@parse_inte
$LN132@parse_inte:
  01413	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  0141b	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  01421	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR tv772[rsp], rax
$LN133@parse_inte:
  01429	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR tv772[rsp]
  01431	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR tv781[rsp], rax
  01439	eb 45		 jmp	 SHORT $LN136@parse_inte
$LN135@parse_inte:
  0143b	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  01443	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  0144b	75 1c		 jne	 SHORT $LN134@parse_inte
  0144d	41 b8 b1 00 00
	00		 mov	 r8d, 177		; 000000b1H
  01453	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  0145a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FM@MDFNAKJB@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc@
  01461	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  01467	33 c0		 xor	 eax, eax
$LN134@parse_inte:
  01469	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  01471	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  01478	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR tv781[rsp], rax
$LN136@parse_inte:
  01480	48 8b 44 24 30	 mov	 rax, QWORD PTR pos$[rsp]
  01485	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR tv781[rsp]
  0148d	48 03 c8	 add	 rcx, rax
  01490	48 8b c1	 mov	 rax, rcx
  01493	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  01496	89 84 24 08 01
	00 00		 mov	 DWORD PTR tv896[rsp], eax
  0149d	e9 68 03 00 00	 jmp	 $LN158@parse_inte
$LN157@parse_inte:
  014a2	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  014aa	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  014ae	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  014b4	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  014b9	85 c0		 test	 eax, eax
  014bb	75 1c		 jne	 SHORT $LN137@parse_inte
  014bd	41 b8 b1 00 00
	00		 mov	 r8d, 177		; 000000b1H
  014c3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  014ca	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@BKHDOHOI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  014d1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  014d7	33 c0		 xor	 eax, eax
$LN137@parse_inte:
  014d9	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  014e1	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  014e4	c1 e8 07	 shr	 eax, 7
  014e7	83 e0 01	 and	 eax, 1
  014ea	85 c0		 test	 eax, eax
  014ec	75 1c		 jne	 SHORT $LN138@parse_inte
  014ee	41 b8 b1 00 00
	00		 mov	 r8d, 177		; 000000b1H
  014f4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  014fb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@POFOFGEK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ@
  01502	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  01508	33 c0		 xor	 eax, eax
$LN138@parse_inte:
  0150a	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  01512	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  01515	c1 e8 02	 shr	 eax, 2
  01518	83 e0 07	 and	 eax, 7
  0151b	83 f8 02	 cmp	 eax, 2
  0151e	0f 85 6f 01 00
	00		 jne	 $LN155@parse_inte
  01524	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  0152c	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  01530	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  01536	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0153b	85 c0		 test	 eax, eax
  0153d	75 1c		 jne	 SHORT $LN139@parse_inte
  0153f	41 b8 b1 00 00
	00		 mov	 r8d, 177		; 000000b1H
  01545	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  0154c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@BKHDOHOI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  01553	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  01559	33 c0		 xor	 eax, eax
$LN139@parse_inte:
  0155b	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  01563	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  01566	c1 e8 05	 shr	 eax, 5
  01569	83 e0 01	 and	 eax, 1
  0156c	85 c0		 test	 eax, eax
  0156e	0f 84 bd 00 00
	00		 je	 $LN145@parse_inte
  01574	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  0157c	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  01580	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  01586	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0158b	85 c0		 test	 eax, eax
  0158d	75 1c		 jne	 SHORT $LN140@parse_inte
  0158f	41 b8 b1 00 00
	00		 mov	 r8d, 177		; 000000b1H
  01595	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  0159c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@BKHDOHOI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  015a3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  015a9	33 c0		 xor	 eax, eax
$LN140@parse_inte:
  015ab	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  015b3	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  015b6	c1 e8 07	 shr	 eax, 7
  015b9	83 e0 01	 and	 eax, 1
  015bc	85 c0		 test	 eax, eax
  015be	75 1c		 jne	 SHORT $LN141@parse_inte
  015c0	41 b8 b1 00 00
	00		 mov	 r8d, 177		; 000000b1H
  015c6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  015cd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@POFOFGEK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ@
  015d4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  015da	33 c0		 xor	 eax, eax
$LN141@parse_inte:
  015dc	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  015e4	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  015e7	c1 e8 06	 shr	 eax, 6
  015ea	83 e0 01	 and	 eax, 1
  015ed	85 c0		 test	 eax, eax
  015ef	74 18		 je	 SHORT $LN142@parse_inte
  015f1	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  015f9	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  015ff	48 89 84 24 10
	01 00 00	 mov	 QWORD PTR tv837[rsp], rax
  01607	eb 16		 jmp	 SHORT $LN143@parse_inte
$LN142@parse_inte:
  01609	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  01611	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  01617	48 89 84 24 10
	01 00 00	 mov	 QWORD PTR tv837[rsp], rax
$LN143@parse_inte:
  0161f	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR tv837[rsp]
  01627	48 89 84 24 18
	01 00 00	 mov	 QWORD PTR tv846[rsp], rax
  0162f	eb 45		 jmp	 SHORT $LN146@parse_inte
$LN145@parse_inte:
  01631	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  01639	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  01641	75 1c		 jne	 SHORT $LN144@parse_inte
  01643	41 b8 b1 00 00
	00		 mov	 r8d, 177		; 000000b1H
  01649	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  01650	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FM@MDFNAKJB@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc@
  01657	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0165d	33 c0		 xor	 eax, eax
$LN144@parse_inte:
  0165f	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  01667	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  0166e	48 89 84 24 18
	01 00 00	 mov	 QWORD PTR tv846[rsp], rax
$LN146@parse_inte:
  01676	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR tv846[rsp]
  0167e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pos$[rsp]
  01683	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  01687	89 84 24 20 01
	00 00		 mov	 DWORD PTR tv895[rsp], eax
  0168e	e9 69 01 00 00	 jmp	 $LN156@parse_inte
$LN155@parse_inte:
  01693	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  0169b	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0169f	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  016a5	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  016aa	85 c0		 test	 eax, eax
  016ac	75 1c		 jne	 SHORT $LN147@parse_inte
  016ae	41 b8 b1 00 00
	00		 mov	 r8d, 177		; 000000b1H
  016b4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  016bb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@BKHDOHOI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  016c2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  016c8	33 c0		 xor	 eax, eax
$LN147@parse_inte:
  016ca	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  016d2	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  016d5	c1 e8 05	 shr	 eax, 5
  016d8	83 e0 01	 and	 eax, 1
  016db	85 c0		 test	 eax, eax
  016dd	0f 84 bd 00 00
	00		 je	 $LN153@parse_inte
  016e3	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  016eb	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  016ef	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  016f5	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  016fa	85 c0		 test	 eax, eax
  016fc	75 1c		 jne	 SHORT $LN148@parse_inte
  016fe	41 b8 b1 00 00
	00		 mov	 r8d, 177		; 000000b1H
  01704	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  0170b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@BKHDOHOI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  01712	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  01718	33 c0		 xor	 eax, eax
$LN148@parse_inte:
  0171a	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  01722	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  01725	c1 e8 07	 shr	 eax, 7
  01728	83 e0 01	 and	 eax, 1
  0172b	85 c0		 test	 eax, eax
  0172d	75 1c		 jne	 SHORT $LN149@parse_inte
  0172f	41 b8 b1 00 00
	00		 mov	 r8d, 177		; 000000b1H
  01735	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  0173c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@POFOFGEK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ@
  01743	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  01749	33 c0		 xor	 eax, eax
$LN149@parse_inte:
  0174b	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  01753	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  01756	c1 e8 06	 shr	 eax, 6
  01759	83 e0 01	 and	 eax, 1
  0175c	85 c0		 test	 eax, eax
  0175e	74 18		 je	 SHORT $LN150@parse_inte
  01760	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  01768	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  0176e	48 89 84 24 28
	01 00 00	 mov	 QWORD PTR tv883[rsp], rax
  01776	eb 16		 jmp	 SHORT $LN151@parse_inte
$LN150@parse_inte:
  01778	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  01780	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  01786	48 89 84 24 28
	01 00 00	 mov	 QWORD PTR tv883[rsp], rax
$LN151@parse_inte:
  0178e	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR tv883[rsp]
  01796	48 89 84 24 30
	01 00 00	 mov	 QWORD PTR tv892[rsp], rax
  0179e	eb 45		 jmp	 SHORT $LN154@parse_inte
$LN153@parse_inte:
  017a0	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  017a8	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  017b0	75 1c		 jne	 SHORT $LN152@parse_inte
  017b2	41 b8 b1 00 00
	00		 mov	 r8d, 177		; 000000b1H
  017b8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  017bf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FM@MDFNAKJB@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc@
  017c6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  017cc	33 c0		 xor	 eax, eax
$LN152@parse_inte:
  017ce	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  017d6	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  017dd	48 89 84 24 30
	01 00 00	 mov	 QWORD PTR tv892[rsp], rax
$LN154@parse_inte:
  017e5	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR tv892[rsp]
  017ed	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pos$[rsp]
  017f2	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  017f5	89 84 24 20 01
	00 00		 mov	 DWORD PTR tv895[rsp], eax
$LN156@parse_inte:
  017fc	8b 84 24 20 01
	00 00		 mov	 eax, DWORD PTR tv895[rsp]
  01803	89 84 24 08 01
	00 00		 mov	 DWORD PTR tv896[rsp], eax
$LN158@parse_inte:
  0180a	8b 8c 24 08 01
	00 00		 mov	 ecx, DWORD PTR tv896[rsp]
  01811	e8 00 00 00 00	 call	 is_alignment_token
  01816	85 c0		 test	 eax, eax
  01818	0f 84 ed 05 00
	00		 je	 $LN18@parse_inte

; 178  :         format->align = READ_spec(pos);

  0181e	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  01826	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0182a	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  01830	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  01835	85 c0		 test	 eax, eax
  01837	75 1c		 jne	 SHORT $LN159@parse_inte
  01839	41 b8 b2 00 00
	00		 mov	 r8d, 178		; 000000b2H
  0183f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  01846	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DK@JLLBFDEO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$AA@
  0184d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  01853	33 c0		 xor	 eax, eax
$LN159@parse_inte:
  01855	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  0185d	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  01860	c1 e8 07	 shr	 eax, 7
  01863	83 e0 01	 and	 eax, 1
  01866	85 c0		 test	 eax, eax
  01868	75 1c		 jne	 SHORT $LN160@parse_inte
  0186a	41 b8 b2 00 00
	00		 mov	 r8d, 178		; 000000b2H
  01870	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  01877	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EA@DCIJOEKC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$AA@
  0187e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  01884	33 c0		 xor	 eax, eax
$LN160@parse_inte:
  01886	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  0188e	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  01892	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  01898	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0189d	85 c0		 test	 eax, eax
  0189f	75 1c		 jne	 SHORT $LN161@parse_inte
  018a1	41 b8 b2 00 00
	00		 mov	 r8d, 178		; 000000b2H
  018a7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  018ae	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@BKHDOHOI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  018b5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  018bb	33 c0		 xor	 eax, eax
$LN161@parse_inte:
  018bd	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  018c5	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  018c8	c1 e8 07	 shr	 eax, 7
  018cb	83 e0 01	 and	 eax, 1
  018ce	85 c0		 test	 eax, eax
  018d0	75 1c		 jne	 SHORT $LN162@parse_inte
  018d2	41 b8 b2 00 00
	00		 mov	 r8d, 178		; 000000b2H
  018d8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  018df	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@POFOFGEK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ@
  018e6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  018ec	33 c0		 xor	 eax, eax
$LN162@parse_inte:
  018ee	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  018f6	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  018f9	c1 e8 02	 shr	 eax, 2
  018fc	83 e0 07	 and	 eax, 7
  018ff	83 f8 01	 cmp	 eax, 1
  01902	0f 85 74 01 00
	00		 jne	 $LN191@parse_inte
  01908	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  01910	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  01914	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0191a	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0191f	85 c0		 test	 eax, eax
  01921	75 1c		 jne	 SHORT $LN163@parse_inte
  01923	41 b8 b2 00 00
	00		 mov	 r8d, 178		; 000000b2H
  01929	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  01930	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@BKHDOHOI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  01937	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0193d	33 c0		 xor	 eax, eax
$LN163@parse_inte:
  0193f	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  01947	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0194a	c1 e8 05	 shr	 eax, 5
  0194d	83 e0 01	 and	 eax, 1
  01950	85 c0		 test	 eax, eax
  01952	0f 84 bd 00 00
	00		 je	 $LN169@parse_inte
  01958	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  01960	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  01964	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0196a	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0196f	85 c0		 test	 eax, eax
  01971	75 1c		 jne	 SHORT $LN164@parse_inte
  01973	41 b8 b2 00 00
	00		 mov	 r8d, 178		; 000000b2H
  01979	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  01980	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@BKHDOHOI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  01987	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0198d	33 c0		 xor	 eax, eax
$LN164@parse_inte:
  0198f	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  01997	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0199a	c1 e8 07	 shr	 eax, 7
  0199d	83 e0 01	 and	 eax, 1
  019a0	85 c0		 test	 eax, eax
  019a2	75 1c		 jne	 SHORT $LN165@parse_inte
  019a4	41 b8 b2 00 00
	00		 mov	 r8d, 178		; 000000b2H
  019aa	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  019b1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@POFOFGEK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ@
  019b8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  019be	33 c0		 xor	 eax, eax
$LN165@parse_inte:
  019c0	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  019c8	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  019cb	c1 e8 06	 shr	 eax, 6
  019ce	83 e0 01	 and	 eax, 1
  019d1	85 c0		 test	 eax, eax
  019d3	74 18		 je	 SHORT $LN166@parse_inte
  019d5	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  019dd	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  019e3	48 89 84 24 38
	01 00 00	 mov	 QWORD PTR tv969[rsp], rax
  019eb	eb 16		 jmp	 SHORT $LN167@parse_inte
$LN166@parse_inte:
  019ed	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  019f5	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  019fb	48 89 84 24 38
	01 00 00	 mov	 QWORD PTR tv969[rsp], rax
$LN167@parse_inte:
  01a03	48 8b 84 24 38
	01 00 00	 mov	 rax, QWORD PTR tv969[rsp]
  01a0b	48 89 84 24 40
	01 00 00	 mov	 QWORD PTR tv978[rsp], rax
  01a13	eb 45		 jmp	 SHORT $LN170@parse_inte
$LN169@parse_inte:
  01a15	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  01a1d	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  01a25	75 1c		 jne	 SHORT $LN168@parse_inte
  01a27	41 b8 b2 00 00
	00		 mov	 r8d, 178		; 000000b2H
  01a2d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  01a34	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FM@MDFNAKJB@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc@
  01a3b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  01a41	33 c0		 xor	 eax, eax
$LN168@parse_inte:
  01a43	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  01a4b	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  01a52	48 89 84 24 40
	01 00 00	 mov	 QWORD PTR tv978[rsp], rax
$LN170@parse_inte:
  01a5a	48 8b 44 24 30	 mov	 rax, QWORD PTR pos$[rsp]
  01a5f	48 8b 8c 24 40
	01 00 00	 mov	 rcx, QWORD PTR tv978[rsp]
  01a67	48 03 c8	 add	 rcx, rax
  01a6a	48 8b c1	 mov	 rax, rcx
  01a6d	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  01a70	89 84 24 48 01
	00 00		 mov	 DWORD PTR tv1093[rsp], eax
  01a77	e9 68 03 00 00	 jmp	 $LN192@parse_inte
$LN191@parse_inte:
  01a7c	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  01a84	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  01a88	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  01a8e	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  01a93	85 c0		 test	 eax, eax
  01a95	75 1c		 jne	 SHORT $LN171@parse_inte
  01a97	41 b8 b2 00 00
	00		 mov	 r8d, 178		; 000000b2H
  01a9d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  01aa4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@BKHDOHOI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  01aab	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  01ab1	33 c0		 xor	 eax, eax
$LN171@parse_inte:
  01ab3	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  01abb	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  01abe	c1 e8 07	 shr	 eax, 7
  01ac1	83 e0 01	 and	 eax, 1
  01ac4	85 c0		 test	 eax, eax
  01ac6	75 1c		 jne	 SHORT $LN172@parse_inte
  01ac8	41 b8 b2 00 00
	00		 mov	 r8d, 178		; 000000b2H
  01ace	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  01ad5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@POFOFGEK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ@
  01adc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  01ae2	33 c0		 xor	 eax, eax
$LN172@parse_inte:
  01ae4	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  01aec	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  01aef	c1 e8 02	 shr	 eax, 2
  01af2	83 e0 07	 and	 eax, 7
  01af5	83 f8 02	 cmp	 eax, 2
  01af8	0f 85 6f 01 00
	00		 jne	 $LN189@parse_inte
  01afe	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  01b06	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  01b0a	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  01b10	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  01b15	85 c0		 test	 eax, eax
  01b17	75 1c		 jne	 SHORT $LN173@parse_inte
  01b19	41 b8 b2 00 00
	00		 mov	 r8d, 178		; 000000b2H
  01b1f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  01b26	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@BKHDOHOI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  01b2d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  01b33	33 c0		 xor	 eax, eax
$LN173@parse_inte:
  01b35	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  01b3d	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  01b40	c1 e8 05	 shr	 eax, 5
  01b43	83 e0 01	 and	 eax, 1
  01b46	85 c0		 test	 eax, eax
  01b48	0f 84 bd 00 00
	00		 je	 $LN179@parse_inte
  01b4e	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  01b56	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  01b5a	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  01b60	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  01b65	85 c0		 test	 eax, eax
  01b67	75 1c		 jne	 SHORT $LN174@parse_inte
  01b69	41 b8 b2 00 00
	00		 mov	 r8d, 178		; 000000b2H
  01b6f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  01b76	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@BKHDOHOI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  01b7d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  01b83	33 c0		 xor	 eax, eax
$LN174@parse_inte:
  01b85	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  01b8d	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  01b90	c1 e8 07	 shr	 eax, 7
  01b93	83 e0 01	 and	 eax, 1
  01b96	85 c0		 test	 eax, eax
  01b98	75 1c		 jne	 SHORT $LN175@parse_inte
  01b9a	41 b8 b2 00 00
	00		 mov	 r8d, 178		; 000000b2H
  01ba0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  01ba7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@POFOFGEK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ@
  01bae	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  01bb4	33 c0		 xor	 eax, eax
$LN175@parse_inte:
  01bb6	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  01bbe	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  01bc1	c1 e8 06	 shr	 eax, 6
  01bc4	83 e0 01	 and	 eax, 1
  01bc7	85 c0		 test	 eax, eax
  01bc9	74 18		 je	 SHORT $LN176@parse_inte
  01bcb	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  01bd3	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  01bd9	48 89 84 24 50
	01 00 00	 mov	 QWORD PTR tv1034[rsp], rax
  01be1	eb 16		 jmp	 SHORT $LN177@parse_inte
$LN176@parse_inte:
  01be3	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  01beb	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  01bf1	48 89 84 24 50
	01 00 00	 mov	 QWORD PTR tv1034[rsp], rax
$LN177@parse_inte:
  01bf9	48 8b 84 24 50
	01 00 00	 mov	 rax, QWORD PTR tv1034[rsp]
  01c01	48 89 84 24 58
	01 00 00	 mov	 QWORD PTR tv1043[rsp], rax
  01c09	eb 45		 jmp	 SHORT $LN180@parse_inte
$LN179@parse_inte:
  01c0b	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  01c13	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  01c1b	75 1c		 jne	 SHORT $LN178@parse_inte
  01c1d	41 b8 b2 00 00
	00		 mov	 r8d, 178		; 000000b2H
  01c23	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  01c2a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FM@MDFNAKJB@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc@
  01c31	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  01c37	33 c0		 xor	 eax, eax
$LN178@parse_inte:
  01c39	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  01c41	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  01c48	48 89 84 24 58
	01 00 00	 mov	 QWORD PTR tv1043[rsp], rax
$LN180@parse_inte:
  01c50	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR tv1043[rsp]
  01c58	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pos$[rsp]
  01c5d	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  01c61	89 84 24 60 01
	00 00		 mov	 DWORD PTR tv1092[rsp], eax
  01c68	e9 69 01 00 00	 jmp	 $LN190@parse_inte
$LN189@parse_inte:
  01c6d	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  01c75	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  01c79	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  01c7f	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  01c84	85 c0		 test	 eax, eax
  01c86	75 1c		 jne	 SHORT $LN181@parse_inte
  01c88	41 b8 b2 00 00
	00		 mov	 r8d, 178		; 000000b2H
  01c8e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  01c95	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@BKHDOHOI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  01c9c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  01ca2	33 c0		 xor	 eax, eax
$LN181@parse_inte:
  01ca4	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  01cac	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  01caf	c1 e8 05	 shr	 eax, 5
  01cb2	83 e0 01	 and	 eax, 1
  01cb5	85 c0		 test	 eax, eax
  01cb7	0f 84 bd 00 00
	00		 je	 $LN187@parse_inte
  01cbd	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  01cc5	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  01cc9	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  01ccf	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  01cd4	85 c0		 test	 eax, eax
  01cd6	75 1c		 jne	 SHORT $LN182@parse_inte
  01cd8	41 b8 b2 00 00
	00		 mov	 r8d, 178		; 000000b2H
  01cde	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  01ce5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@BKHDOHOI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  01cec	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  01cf2	33 c0		 xor	 eax, eax
$LN182@parse_inte:
  01cf4	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  01cfc	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  01cff	c1 e8 07	 shr	 eax, 7
  01d02	83 e0 01	 and	 eax, 1
  01d05	85 c0		 test	 eax, eax
  01d07	75 1c		 jne	 SHORT $LN183@parse_inte
  01d09	41 b8 b2 00 00
	00		 mov	 r8d, 178		; 000000b2H
  01d0f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  01d16	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@POFOFGEK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ@
  01d1d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  01d23	33 c0		 xor	 eax, eax
$LN183@parse_inte:
  01d25	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  01d2d	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  01d30	c1 e8 06	 shr	 eax, 6
  01d33	83 e0 01	 and	 eax, 1
  01d36	85 c0		 test	 eax, eax
  01d38	74 18		 je	 SHORT $LN184@parse_inte
  01d3a	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  01d42	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  01d48	48 89 84 24 68
	01 00 00	 mov	 QWORD PTR tv1080[rsp], rax
  01d50	eb 16		 jmp	 SHORT $LN185@parse_inte
$LN184@parse_inte:
  01d52	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  01d5a	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  01d60	48 89 84 24 68
	01 00 00	 mov	 QWORD PTR tv1080[rsp], rax
$LN185@parse_inte:
  01d68	48 8b 84 24 68
	01 00 00	 mov	 rax, QWORD PTR tv1080[rsp]
  01d70	48 89 84 24 70
	01 00 00	 mov	 QWORD PTR tv1089[rsp], rax
  01d78	eb 45		 jmp	 SHORT $LN188@parse_inte
$LN187@parse_inte:
  01d7a	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  01d82	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  01d8a	75 1c		 jne	 SHORT $LN186@parse_inte
  01d8c	41 b8 b2 00 00
	00		 mov	 r8d, 178		; 000000b2H
  01d92	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  01d99	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FM@MDFNAKJB@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc@
  01da0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  01da6	33 c0		 xor	 eax, eax
$LN186@parse_inte:
  01da8	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  01db0	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  01db7	48 89 84 24 70
	01 00 00	 mov	 QWORD PTR tv1089[rsp], rax
$LN188@parse_inte:
  01dbf	48 8b 84 24 70
	01 00 00	 mov	 rax, QWORD PTR tv1089[rsp]
  01dc7	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pos$[rsp]
  01dcc	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  01dcf	89 84 24 60 01
	00 00		 mov	 DWORD PTR tv1092[rsp], eax
$LN190@parse_inte:
  01dd6	8b 84 24 60 01
	00 00		 mov	 eax, DWORD PTR tv1092[rsp]
  01ddd	89 84 24 48 01
	00 00		 mov	 DWORD PTR tv1093[rsp], eax
$LN192@parse_inte:
  01de4	48 8b 84 24 68
	03 00 00	 mov	 rax, QWORD PTR format$[rsp]
  01dec	8b 8c 24 48 01
	00 00		 mov	 ecx, DWORD PTR tv1093[rsp]
  01df3	89 48 04	 mov	 DWORD PTR [rax+4], ecx

; 179  :         align_specified = 1;

  01df6	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR align_specified$[rsp], 1

; 180  :         ++pos;

  01dfe	48 8b 44 24 30	 mov	 rax, QWORD PTR pos$[rsp]
  01e03	48 ff c0	 inc	 rax
  01e06	48 89 44 24 30	 mov	 QWORD PTR pos$[rsp], rax
$LN18@parse_inte:
$LN19@parse_inte:

; 181  :     }
; 182  : 
; 183  :     /* Parse the various sign options */
; 184  :     if (end-pos >= 1 && is_sign_element(READ_spec(pos))) {

  01e0b	48 8b 44 24 30	 mov	 rax, QWORD PTR pos$[rsp]
  01e10	48 8b 8c 24 60
	03 00 00	 mov	 rcx, QWORD PTR end$[rsp]
  01e18	48 2b c8	 sub	 rcx, rax
  01e1b	48 8b c1	 mov	 rax, rcx
  01e1e	48 83 f8 01	 cmp	 rax, 1
  01e22	0f 8c bf 0b 00
	00		 jl	 $LN17@parse_inte
  01e28	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  01e30	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  01e34	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  01e3a	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  01e3f	85 c0		 test	 eax, eax
  01e41	75 1c		 jne	 SHORT $LN193@parse_inte
  01e43	41 b8 b8 00 00
	00		 mov	 r8d, 184		; 000000b8H
  01e49	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  01e50	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DK@JLLBFDEO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$AA@
  01e57	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  01e5d	33 c0		 xor	 eax, eax
$LN193@parse_inte:
  01e5f	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  01e67	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  01e6a	c1 e8 07	 shr	 eax, 7
  01e6d	83 e0 01	 and	 eax, 1
  01e70	85 c0		 test	 eax, eax
  01e72	75 1c		 jne	 SHORT $LN194@parse_inte
  01e74	41 b8 b8 00 00
	00		 mov	 r8d, 184		; 000000b8H
  01e7a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  01e81	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EA@DCIJOEKC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$AA@
  01e88	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  01e8e	33 c0		 xor	 eax, eax
$LN194@parse_inte:
  01e90	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  01e98	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  01e9c	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  01ea2	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  01ea7	85 c0		 test	 eax, eax
  01ea9	75 1c		 jne	 SHORT $LN195@parse_inte
  01eab	41 b8 b8 00 00
	00		 mov	 r8d, 184		; 000000b8H
  01eb1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  01eb8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@BKHDOHOI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  01ebf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  01ec5	33 c0		 xor	 eax, eax
$LN195@parse_inte:
  01ec7	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  01ecf	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  01ed2	c1 e8 07	 shr	 eax, 7
  01ed5	83 e0 01	 and	 eax, 1
  01ed8	85 c0		 test	 eax, eax
  01eda	75 1c		 jne	 SHORT $LN196@parse_inte
  01edc	41 b8 b8 00 00
	00		 mov	 r8d, 184		; 000000b8H
  01ee2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  01ee9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@POFOFGEK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ@
  01ef0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  01ef6	33 c0		 xor	 eax, eax
$LN196@parse_inte:
  01ef8	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  01f00	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  01f03	c1 e8 02	 shr	 eax, 2
  01f06	83 e0 07	 and	 eax, 7
  01f09	83 f8 01	 cmp	 eax, 1
  01f0c	0f 85 74 01 00
	00		 jne	 $LN225@parse_inte
  01f12	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  01f1a	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  01f1e	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  01f24	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  01f29	85 c0		 test	 eax, eax
  01f2b	75 1c		 jne	 SHORT $LN197@parse_inte
  01f2d	41 b8 b8 00 00
	00		 mov	 r8d, 184		; 000000b8H
  01f33	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  01f3a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@BKHDOHOI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  01f41	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  01f47	33 c0		 xor	 eax, eax
$LN197@parse_inte:
  01f49	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  01f51	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  01f54	c1 e8 05	 shr	 eax, 5
  01f57	83 e0 01	 and	 eax, 1
  01f5a	85 c0		 test	 eax, eax
  01f5c	0f 84 bd 00 00
	00		 je	 $LN203@parse_inte
  01f62	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  01f6a	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  01f6e	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  01f74	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  01f79	85 c0		 test	 eax, eax
  01f7b	75 1c		 jne	 SHORT $LN198@parse_inte
  01f7d	41 b8 b8 00 00
	00		 mov	 r8d, 184		; 000000b8H
  01f83	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  01f8a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@BKHDOHOI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  01f91	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  01f97	33 c0		 xor	 eax, eax
$LN198@parse_inte:
  01f99	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  01fa1	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  01fa4	c1 e8 07	 shr	 eax, 7
  01fa7	83 e0 01	 and	 eax, 1
  01faa	85 c0		 test	 eax, eax
  01fac	75 1c		 jne	 SHORT $LN199@parse_inte
  01fae	41 b8 b8 00 00
	00		 mov	 r8d, 184		; 000000b8H
  01fb4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  01fbb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@POFOFGEK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ@
  01fc2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  01fc8	33 c0		 xor	 eax, eax
$LN199@parse_inte:
  01fca	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  01fd2	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  01fd5	c1 e8 06	 shr	 eax, 6
  01fd8	83 e0 01	 and	 eax, 1
  01fdb	85 c0		 test	 eax, eax
  01fdd	74 18		 je	 SHORT $LN200@parse_inte
  01fdf	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  01fe7	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  01fed	48 89 84 24 78
	01 00 00	 mov	 QWORD PTR tv1167[rsp], rax
  01ff5	eb 16		 jmp	 SHORT $LN201@parse_inte
$LN200@parse_inte:
  01ff7	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  01fff	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  02005	48 89 84 24 78
	01 00 00	 mov	 QWORD PTR tv1167[rsp], rax
$LN201@parse_inte:
  0200d	48 8b 84 24 78
	01 00 00	 mov	 rax, QWORD PTR tv1167[rsp]
  02015	48 89 84 24 80
	01 00 00	 mov	 QWORD PTR tv1176[rsp], rax
  0201d	eb 45		 jmp	 SHORT $LN204@parse_inte
$LN203@parse_inte:
  0201f	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  02027	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  0202f	75 1c		 jne	 SHORT $LN202@parse_inte
  02031	41 b8 b8 00 00
	00		 mov	 r8d, 184		; 000000b8H
  02037	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  0203e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FM@MDFNAKJB@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc@
  02045	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0204b	33 c0		 xor	 eax, eax
$LN202@parse_inte:
  0204d	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  02055	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  0205c	48 89 84 24 80
	01 00 00	 mov	 QWORD PTR tv1176[rsp], rax
$LN204@parse_inte:
  02064	48 8b 44 24 30	 mov	 rax, QWORD PTR pos$[rsp]
  02069	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR tv1176[rsp]
  02071	48 03 c8	 add	 rcx, rax
  02074	48 8b c1	 mov	 rax, rcx
  02077	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0207a	89 84 24 88 01
	00 00		 mov	 DWORD PTR tv1291[rsp], eax
  02081	e9 68 03 00 00	 jmp	 $LN226@parse_inte
$LN225@parse_inte:
  02086	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  0208e	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  02092	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  02098	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0209d	85 c0		 test	 eax, eax
  0209f	75 1c		 jne	 SHORT $LN205@parse_inte
  020a1	41 b8 b8 00 00
	00		 mov	 r8d, 184		; 000000b8H
  020a7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  020ae	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@BKHDOHOI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  020b5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  020bb	33 c0		 xor	 eax, eax
$LN205@parse_inte:
  020bd	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  020c5	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  020c8	c1 e8 07	 shr	 eax, 7
  020cb	83 e0 01	 and	 eax, 1
  020ce	85 c0		 test	 eax, eax
  020d0	75 1c		 jne	 SHORT $LN206@parse_inte
  020d2	41 b8 b8 00 00
	00		 mov	 r8d, 184		; 000000b8H
  020d8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  020df	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@POFOFGEK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ@
  020e6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  020ec	33 c0		 xor	 eax, eax
$LN206@parse_inte:
  020ee	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  020f6	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  020f9	c1 e8 02	 shr	 eax, 2
  020fc	83 e0 07	 and	 eax, 7
  020ff	83 f8 02	 cmp	 eax, 2
  02102	0f 85 6f 01 00
	00		 jne	 $LN223@parse_inte
  02108	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  02110	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  02114	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0211a	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0211f	85 c0		 test	 eax, eax
  02121	75 1c		 jne	 SHORT $LN207@parse_inte
  02123	41 b8 b8 00 00
	00		 mov	 r8d, 184		; 000000b8H
  02129	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  02130	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@BKHDOHOI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  02137	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0213d	33 c0		 xor	 eax, eax
$LN207@parse_inte:
  0213f	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  02147	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0214a	c1 e8 05	 shr	 eax, 5
  0214d	83 e0 01	 and	 eax, 1
  02150	85 c0		 test	 eax, eax
  02152	0f 84 bd 00 00
	00		 je	 $LN213@parse_inte
  02158	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  02160	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  02164	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0216a	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0216f	85 c0		 test	 eax, eax
  02171	75 1c		 jne	 SHORT $LN208@parse_inte
  02173	41 b8 b8 00 00
	00		 mov	 r8d, 184		; 000000b8H
  02179	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  02180	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@BKHDOHOI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  02187	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0218d	33 c0		 xor	 eax, eax
$LN208@parse_inte:
  0218f	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  02197	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0219a	c1 e8 07	 shr	 eax, 7
  0219d	83 e0 01	 and	 eax, 1
  021a0	85 c0		 test	 eax, eax
  021a2	75 1c		 jne	 SHORT $LN209@parse_inte
  021a4	41 b8 b8 00 00
	00		 mov	 r8d, 184		; 000000b8H
  021aa	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  021b1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@POFOFGEK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ@
  021b8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  021be	33 c0		 xor	 eax, eax
$LN209@parse_inte:
  021c0	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  021c8	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  021cb	c1 e8 06	 shr	 eax, 6
  021ce	83 e0 01	 and	 eax, 1
  021d1	85 c0		 test	 eax, eax
  021d3	74 18		 je	 SHORT $LN210@parse_inte
  021d5	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  021dd	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  021e3	48 89 84 24 90
	01 00 00	 mov	 QWORD PTR tv1232[rsp], rax
  021eb	eb 16		 jmp	 SHORT $LN211@parse_inte
$LN210@parse_inte:
  021ed	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  021f5	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  021fb	48 89 84 24 90
	01 00 00	 mov	 QWORD PTR tv1232[rsp], rax
$LN211@parse_inte:
  02203	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR tv1232[rsp]
  0220b	48 89 84 24 98
	01 00 00	 mov	 QWORD PTR tv1241[rsp], rax
  02213	eb 45		 jmp	 SHORT $LN214@parse_inte
$LN213@parse_inte:
  02215	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  0221d	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  02225	75 1c		 jne	 SHORT $LN212@parse_inte
  02227	41 b8 b8 00 00
	00		 mov	 r8d, 184		; 000000b8H
  0222d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  02234	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FM@MDFNAKJB@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc@
  0223b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  02241	33 c0		 xor	 eax, eax
$LN212@parse_inte:
  02243	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  0224b	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  02252	48 89 84 24 98
	01 00 00	 mov	 QWORD PTR tv1241[rsp], rax
$LN214@parse_inte:
  0225a	48 8b 84 24 98
	01 00 00	 mov	 rax, QWORD PTR tv1241[rsp]
  02262	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pos$[rsp]
  02267	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  0226b	89 84 24 a0 01
	00 00		 mov	 DWORD PTR tv1290[rsp], eax
  02272	e9 69 01 00 00	 jmp	 $LN224@parse_inte
$LN223@parse_inte:
  02277	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  0227f	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  02283	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  02289	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0228e	85 c0		 test	 eax, eax
  02290	75 1c		 jne	 SHORT $LN215@parse_inte
  02292	41 b8 b8 00 00
	00		 mov	 r8d, 184		; 000000b8H
  02298	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  0229f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@BKHDOHOI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  022a6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  022ac	33 c0		 xor	 eax, eax
$LN215@parse_inte:
  022ae	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  022b6	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  022b9	c1 e8 05	 shr	 eax, 5
  022bc	83 e0 01	 and	 eax, 1
  022bf	85 c0		 test	 eax, eax
  022c1	0f 84 bd 00 00
	00		 je	 $LN221@parse_inte
  022c7	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  022cf	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  022d3	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  022d9	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  022de	85 c0		 test	 eax, eax
  022e0	75 1c		 jne	 SHORT $LN216@parse_inte
  022e2	41 b8 b8 00 00
	00		 mov	 r8d, 184		; 000000b8H
  022e8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  022ef	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@BKHDOHOI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  022f6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  022fc	33 c0		 xor	 eax, eax
$LN216@parse_inte:
  022fe	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  02306	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  02309	c1 e8 07	 shr	 eax, 7
  0230c	83 e0 01	 and	 eax, 1
  0230f	85 c0		 test	 eax, eax
  02311	75 1c		 jne	 SHORT $LN217@parse_inte
  02313	41 b8 b8 00 00
	00		 mov	 r8d, 184		; 000000b8H
  02319	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  02320	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@POFOFGEK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ@
  02327	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0232d	33 c0		 xor	 eax, eax
$LN217@parse_inte:
  0232f	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  02337	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0233a	c1 e8 06	 shr	 eax, 6
  0233d	83 e0 01	 and	 eax, 1
  02340	85 c0		 test	 eax, eax
  02342	74 18		 je	 SHORT $LN218@parse_inte
  02344	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  0234c	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  02352	48 89 84 24 a8
	01 00 00	 mov	 QWORD PTR tv1278[rsp], rax
  0235a	eb 16		 jmp	 SHORT $LN219@parse_inte
$LN218@parse_inte:
  0235c	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  02364	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  0236a	48 89 84 24 a8
	01 00 00	 mov	 QWORD PTR tv1278[rsp], rax
$LN219@parse_inte:
  02372	48 8b 84 24 a8
	01 00 00	 mov	 rax, QWORD PTR tv1278[rsp]
  0237a	48 89 84 24 b0
	01 00 00	 mov	 QWORD PTR tv1287[rsp], rax
  02382	eb 45		 jmp	 SHORT $LN222@parse_inte
$LN221@parse_inte:
  02384	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  0238c	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  02394	75 1c		 jne	 SHORT $LN220@parse_inte
  02396	41 b8 b8 00 00
	00		 mov	 r8d, 184		; 000000b8H
  0239c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  023a3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FM@MDFNAKJB@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc@
  023aa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  023b0	33 c0		 xor	 eax, eax
$LN220@parse_inte:
  023b2	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  023ba	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  023c1	48 89 84 24 b0
	01 00 00	 mov	 QWORD PTR tv1287[rsp], rax
$LN222@parse_inte:
  023c9	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR tv1287[rsp]
  023d1	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pos$[rsp]
  023d6	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  023d9	89 84 24 a0 01
	00 00		 mov	 DWORD PTR tv1290[rsp], eax
$LN224@parse_inte:
  023e0	8b 84 24 a0 01
	00 00		 mov	 eax, DWORD PTR tv1290[rsp]
  023e7	89 84 24 88 01
	00 00		 mov	 DWORD PTR tv1291[rsp], eax
$LN226@parse_inte:
  023ee	8b 8c 24 88 01
	00 00		 mov	 ecx, DWORD PTR tv1291[rsp]
  023f5	e8 00 00 00 00	 call	 is_sign_element
  023fa	85 c0		 test	 eax, eax
  023fc	0f 84 e5 05 00
	00		 je	 $LN17@parse_inte

; 185  :         format->sign = READ_spec(pos);

  02402	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  0240a	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0240e	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  02414	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  02419	85 c0		 test	 eax, eax
  0241b	75 1c		 jne	 SHORT $LN227@parse_inte
  0241d	41 b8 b9 00 00
	00		 mov	 r8d, 185		; 000000b9H
  02423	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  0242a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DK@JLLBFDEO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$AA@
  02431	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  02437	33 c0		 xor	 eax, eax
$LN227@parse_inte:
  02439	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  02441	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  02444	c1 e8 07	 shr	 eax, 7
  02447	83 e0 01	 and	 eax, 1
  0244a	85 c0		 test	 eax, eax
  0244c	75 1c		 jne	 SHORT $LN228@parse_inte
  0244e	41 b8 b9 00 00
	00		 mov	 r8d, 185		; 000000b9H
  02454	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  0245b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EA@DCIJOEKC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$AA@
  02462	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  02468	33 c0		 xor	 eax, eax
$LN228@parse_inte:
  0246a	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  02472	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  02476	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0247c	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  02481	85 c0		 test	 eax, eax
  02483	75 1c		 jne	 SHORT $LN229@parse_inte
  02485	41 b8 b9 00 00
	00		 mov	 r8d, 185		; 000000b9H
  0248b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  02492	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@BKHDOHOI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  02499	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0249f	33 c0		 xor	 eax, eax
$LN229@parse_inte:
  024a1	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  024a9	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  024ac	c1 e8 07	 shr	 eax, 7
  024af	83 e0 01	 and	 eax, 1
  024b2	85 c0		 test	 eax, eax
  024b4	75 1c		 jne	 SHORT $LN230@parse_inte
  024b6	41 b8 b9 00 00
	00		 mov	 r8d, 185		; 000000b9H
  024bc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  024c3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@POFOFGEK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ@
  024ca	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  024d0	33 c0		 xor	 eax, eax
$LN230@parse_inte:
  024d2	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  024da	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  024dd	c1 e8 02	 shr	 eax, 2
  024e0	83 e0 07	 and	 eax, 7
  024e3	83 f8 01	 cmp	 eax, 1
  024e6	0f 85 74 01 00
	00		 jne	 $LN259@parse_inte
  024ec	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  024f4	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  024f8	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  024fe	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  02503	85 c0		 test	 eax, eax
  02505	75 1c		 jne	 SHORT $LN231@parse_inte
  02507	41 b8 b9 00 00
	00		 mov	 r8d, 185		; 000000b9H
  0250d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  02514	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@BKHDOHOI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  0251b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  02521	33 c0		 xor	 eax, eax
$LN231@parse_inte:
  02523	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  0252b	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0252e	c1 e8 05	 shr	 eax, 5
  02531	83 e0 01	 and	 eax, 1
  02534	85 c0		 test	 eax, eax
  02536	0f 84 bd 00 00
	00		 je	 $LN237@parse_inte
  0253c	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  02544	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  02548	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0254e	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  02553	85 c0		 test	 eax, eax
  02555	75 1c		 jne	 SHORT $LN232@parse_inte
  02557	41 b8 b9 00 00
	00		 mov	 r8d, 185		; 000000b9H
  0255d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  02564	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@BKHDOHOI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  0256b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  02571	33 c0		 xor	 eax, eax
$LN232@parse_inte:
  02573	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  0257b	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0257e	c1 e8 07	 shr	 eax, 7
  02581	83 e0 01	 and	 eax, 1
  02584	85 c0		 test	 eax, eax
  02586	75 1c		 jne	 SHORT $LN233@parse_inte
  02588	41 b8 b9 00 00
	00		 mov	 r8d, 185		; 000000b9H
  0258e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  02595	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@POFOFGEK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ@
  0259c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  025a2	33 c0		 xor	 eax, eax
$LN233@parse_inte:
  025a4	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  025ac	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  025af	c1 e8 06	 shr	 eax, 6
  025b2	83 e0 01	 and	 eax, 1
  025b5	85 c0		 test	 eax, eax
  025b7	74 18		 je	 SHORT $LN234@parse_inte
  025b9	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  025c1	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  025c7	48 89 84 24 b8
	01 00 00	 mov	 QWORD PTR tv1364[rsp], rax
  025cf	eb 16		 jmp	 SHORT $LN235@parse_inte
$LN234@parse_inte:
  025d1	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  025d9	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  025df	48 89 84 24 b8
	01 00 00	 mov	 QWORD PTR tv1364[rsp], rax
$LN235@parse_inte:
  025e7	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR tv1364[rsp]
  025ef	48 89 84 24 c0
	01 00 00	 mov	 QWORD PTR tv1373[rsp], rax
  025f7	eb 45		 jmp	 SHORT $LN238@parse_inte
$LN237@parse_inte:
  025f9	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  02601	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  02609	75 1c		 jne	 SHORT $LN236@parse_inte
  0260b	41 b8 b9 00 00
	00		 mov	 r8d, 185		; 000000b9H
  02611	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  02618	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FM@MDFNAKJB@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc@
  0261f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  02625	33 c0		 xor	 eax, eax
$LN236@parse_inte:
  02627	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  0262f	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  02636	48 89 84 24 c0
	01 00 00	 mov	 QWORD PTR tv1373[rsp], rax
$LN238@parse_inte:
  0263e	48 8b 44 24 30	 mov	 rax, QWORD PTR pos$[rsp]
  02643	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR tv1373[rsp]
  0264b	48 03 c8	 add	 rcx, rax
  0264e	48 8b c1	 mov	 rax, rcx
  02651	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  02654	89 84 24 c8 01
	00 00		 mov	 DWORD PTR tv1488[rsp], eax
  0265b	e9 68 03 00 00	 jmp	 $LN260@parse_inte
$LN259@parse_inte:
  02660	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  02668	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0266c	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  02672	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  02677	85 c0		 test	 eax, eax
  02679	75 1c		 jne	 SHORT $LN239@parse_inte
  0267b	41 b8 b9 00 00
	00		 mov	 r8d, 185		; 000000b9H
  02681	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  02688	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@BKHDOHOI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  0268f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  02695	33 c0		 xor	 eax, eax
$LN239@parse_inte:
  02697	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  0269f	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  026a2	c1 e8 07	 shr	 eax, 7
  026a5	83 e0 01	 and	 eax, 1
  026a8	85 c0		 test	 eax, eax
  026aa	75 1c		 jne	 SHORT $LN240@parse_inte
  026ac	41 b8 b9 00 00
	00		 mov	 r8d, 185		; 000000b9H
  026b2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  026b9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@POFOFGEK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ@
  026c0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  026c6	33 c0		 xor	 eax, eax
$LN240@parse_inte:
  026c8	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  026d0	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  026d3	c1 e8 02	 shr	 eax, 2
  026d6	83 e0 07	 and	 eax, 7
  026d9	83 f8 02	 cmp	 eax, 2
  026dc	0f 85 6f 01 00
	00		 jne	 $LN257@parse_inte
  026e2	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  026ea	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  026ee	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  026f4	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  026f9	85 c0		 test	 eax, eax
  026fb	75 1c		 jne	 SHORT $LN241@parse_inte
  026fd	41 b8 b9 00 00
	00		 mov	 r8d, 185		; 000000b9H
  02703	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  0270a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@BKHDOHOI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  02711	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  02717	33 c0		 xor	 eax, eax
$LN241@parse_inte:
  02719	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  02721	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  02724	c1 e8 05	 shr	 eax, 5
  02727	83 e0 01	 and	 eax, 1
  0272a	85 c0		 test	 eax, eax
  0272c	0f 84 bd 00 00
	00		 je	 $LN247@parse_inte
  02732	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  0273a	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0273e	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  02744	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  02749	85 c0		 test	 eax, eax
  0274b	75 1c		 jne	 SHORT $LN242@parse_inte
  0274d	41 b8 b9 00 00
	00		 mov	 r8d, 185		; 000000b9H
  02753	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  0275a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@BKHDOHOI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  02761	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  02767	33 c0		 xor	 eax, eax
$LN242@parse_inte:
  02769	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  02771	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  02774	c1 e8 07	 shr	 eax, 7
  02777	83 e0 01	 and	 eax, 1
  0277a	85 c0		 test	 eax, eax
  0277c	75 1c		 jne	 SHORT $LN243@parse_inte
  0277e	41 b8 b9 00 00
	00		 mov	 r8d, 185		; 000000b9H
  02784	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  0278b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@POFOFGEK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ@
  02792	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  02798	33 c0		 xor	 eax, eax
$LN243@parse_inte:
  0279a	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  027a2	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  027a5	c1 e8 06	 shr	 eax, 6
  027a8	83 e0 01	 and	 eax, 1
  027ab	85 c0		 test	 eax, eax
  027ad	74 18		 je	 SHORT $LN244@parse_inte
  027af	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  027b7	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  027bd	48 89 84 24 d0
	01 00 00	 mov	 QWORD PTR tv1429[rsp], rax
  027c5	eb 16		 jmp	 SHORT $LN245@parse_inte
$LN244@parse_inte:
  027c7	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  027cf	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  027d5	48 89 84 24 d0
	01 00 00	 mov	 QWORD PTR tv1429[rsp], rax
$LN245@parse_inte:
  027dd	48 8b 84 24 d0
	01 00 00	 mov	 rax, QWORD PTR tv1429[rsp]
  027e5	48 89 84 24 d8
	01 00 00	 mov	 QWORD PTR tv1438[rsp], rax
  027ed	eb 45		 jmp	 SHORT $LN248@parse_inte
$LN247@parse_inte:
  027ef	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  027f7	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  027ff	75 1c		 jne	 SHORT $LN246@parse_inte
  02801	41 b8 b9 00 00
	00		 mov	 r8d, 185		; 000000b9H
  02807	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  0280e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FM@MDFNAKJB@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc@
  02815	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0281b	33 c0		 xor	 eax, eax
$LN246@parse_inte:
  0281d	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  02825	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  0282c	48 89 84 24 d8
	01 00 00	 mov	 QWORD PTR tv1438[rsp], rax
$LN248@parse_inte:
  02834	48 8b 84 24 d8
	01 00 00	 mov	 rax, QWORD PTR tv1438[rsp]
  0283c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pos$[rsp]
  02841	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  02845	89 84 24 e0 01
	00 00		 mov	 DWORD PTR tv1487[rsp], eax
  0284c	e9 69 01 00 00	 jmp	 $LN258@parse_inte
$LN257@parse_inte:
  02851	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  02859	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0285d	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  02863	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  02868	85 c0		 test	 eax, eax
  0286a	75 1c		 jne	 SHORT $LN249@parse_inte
  0286c	41 b8 b9 00 00
	00		 mov	 r8d, 185		; 000000b9H
  02872	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  02879	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@BKHDOHOI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  02880	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  02886	33 c0		 xor	 eax, eax
$LN249@parse_inte:
  02888	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  02890	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  02893	c1 e8 05	 shr	 eax, 5
  02896	83 e0 01	 and	 eax, 1
  02899	85 c0		 test	 eax, eax
  0289b	0f 84 bd 00 00
	00		 je	 $LN255@parse_inte
  028a1	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  028a9	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  028ad	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  028b3	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  028b8	85 c0		 test	 eax, eax
  028ba	75 1c		 jne	 SHORT $LN250@parse_inte
  028bc	41 b8 b9 00 00
	00		 mov	 r8d, 185		; 000000b9H
  028c2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  028c9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@BKHDOHOI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  028d0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  028d6	33 c0		 xor	 eax, eax
$LN250@parse_inte:
  028d8	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  028e0	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  028e3	c1 e8 07	 shr	 eax, 7
  028e6	83 e0 01	 and	 eax, 1
  028e9	85 c0		 test	 eax, eax
  028eb	75 1c		 jne	 SHORT $LN251@parse_inte
  028ed	41 b8 b9 00 00
	00		 mov	 r8d, 185		; 000000b9H
  028f3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  028fa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@POFOFGEK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ@
  02901	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  02907	33 c0		 xor	 eax, eax
$LN251@parse_inte:
  02909	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  02911	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  02914	c1 e8 06	 shr	 eax, 6
  02917	83 e0 01	 and	 eax, 1
  0291a	85 c0		 test	 eax, eax
  0291c	74 18		 je	 SHORT $LN252@parse_inte
  0291e	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  02926	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  0292c	48 89 84 24 e8
	01 00 00	 mov	 QWORD PTR tv1475[rsp], rax
  02934	eb 16		 jmp	 SHORT $LN253@parse_inte
$LN252@parse_inte:
  02936	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  0293e	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  02944	48 89 84 24 e8
	01 00 00	 mov	 QWORD PTR tv1475[rsp], rax
$LN253@parse_inte:
  0294c	48 8b 84 24 e8
	01 00 00	 mov	 rax, QWORD PTR tv1475[rsp]
  02954	48 89 84 24 f0
	01 00 00	 mov	 QWORD PTR tv1484[rsp], rax
  0295c	eb 45		 jmp	 SHORT $LN256@parse_inte
$LN255@parse_inte:
  0295e	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  02966	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  0296e	75 1c		 jne	 SHORT $LN254@parse_inte
  02970	41 b8 b9 00 00
	00		 mov	 r8d, 185		; 000000b9H
  02976	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  0297d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FM@MDFNAKJB@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc@
  02984	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0298a	33 c0		 xor	 eax, eax
$LN254@parse_inte:
  0298c	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  02994	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  0299b	48 89 84 24 f0
	01 00 00	 mov	 QWORD PTR tv1484[rsp], rax
$LN256@parse_inte:
  029a3	48 8b 84 24 f0
	01 00 00	 mov	 rax, QWORD PTR tv1484[rsp]
  029ab	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pos$[rsp]
  029b0	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  029b3	89 84 24 e0 01
	00 00		 mov	 DWORD PTR tv1487[rsp], eax
$LN258@parse_inte:
  029ba	8b 84 24 e0 01
	00 00		 mov	 eax, DWORD PTR tv1487[rsp]
  029c1	89 84 24 c8 01
	00 00		 mov	 DWORD PTR tv1488[rsp], eax
$LN260@parse_inte:
  029c8	48 8b 84 24 68
	03 00 00	 mov	 rax, QWORD PTR format$[rsp]
  029d0	8b 8c 24 c8 01
	00 00		 mov	 ecx, DWORD PTR tv1488[rsp]
  029d7	89 48 0c	 mov	 DWORD PTR [rax+12], ecx

; 186  :         ++pos;

  029da	48 8b 44 24 30	 mov	 rax, QWORD PTR pos$[rsp]
  029df	48 ff c0	 inc	 rax
  029e2	48 89 44 24 30	 mov	 QWORD PTR pos$[rsp], rax
$LN17@parse_inte:

; 187  :     }
; 188  : 
; 189  :     /* If the next character is #, we're in alternate mode.  This only
; 190  :        applies to integers. */
; 191  :     if (end-pos >= 1 && READ_spec(pos) == '#') {

  029e7	48 8b 44 24 30	 mov	 rax, QWORD PTR pos$[rsp]
  029ec	48 8b 8c 24 60
	03 00 00	 mov	 rcx, QWORD PTR end$[rsp]
  029f4	48 2b c8	 sub	 rcx, rax
  029f7	48 8b c1	 mov	 rax, rcx
  029fa	48 83 f8 01	 cmp	 rax, 1
  029fe	0f 8c ec 05 00
	00		 jl	 $LN16@parse_inte
  02a04	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  02a0c	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  02a10	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  02a16	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  02a1b	85 c0		 test	 eax, eax
  02a1d	75 1c		 jne	 SHORT $LN261@parse_inte
  02a1f	41 b8 bf 00 00
	00		 mov	 r8d, 191		; 000000bfH
  02a25	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  02a2c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DK@JLLBFDEO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$AA@
  02a33	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  02a39	33 c0		 xor	 eax, eax
$LN261@parse_inte:
  02a3b	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  02a43	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  02a46	c1 e8 07	 shr	 eax, 7
  02a49	83 e0 01	 and	 eax, 1
  02a4c	85 c0		 test	 eax, eax
  02a4e	75 1c		 jne	 SHORT $LN262@parse_inte
  02a50	41 b8 bf 00 00
	00		 mov	 r8d, 191		; 000000bfH
  02a56	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  02a5d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EA@DCIJOEKC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$AA@
  02a64	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  02a6a	33 c0		 xor	 eax, eax
$LN262@parse_inte:
  02a6c	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  02a74	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  02a78	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  02a7e	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  02a83	85 c0		 test	 eax, eax
  02a85	75 1c		 jne	 SHORT $LN263@parse_inte
  02a87	41 b8 bf 00 00
	00		 mov	 r8d, 191		; 000000bfH
  02a8d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  02a94	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@BKHDOHOI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  02a9b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  02aa1	33 c0		 xor	 eax, eax
$LN263@parse_inte:
  02aa3	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  02aab	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  02aae	c1 e8 07	 shr	 eax, 7
  02ab1	83 e0 01	 and	 eax, 1
  02ab4	85 c0		 test	 eax, eax
  02ab6	75 1c		 jne	 SHORT $LN264@parse_inte
  02ab8	41 b8 bf 00 00
	00		 mov	 r8d, 191		; 000000bfH
  02abe	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  02ac5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@POFOFGEK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ@
  02acc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  02ad2	33 c0		 xor	 eax, eax
$LN264@parse_inte:
  02ad4	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  02adc	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  02adf	c1 e8 02	 shr	 eax, 2
  02ae2	83 e0 07	 and	 eax, 7
  02ae5	83 f8 01	 cmp	 eax, 1
  02ae8	0f 85 74 01 00
	00		 jne	 $LN293@parse_inte
  02aee	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  02af6	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  02afa	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  02b00	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  02b05	85 c0		 test	 eax, eax
  02b07	75 1c		 jne	 SHORT $LN265@parse_inte
  02b09	41 b8 bf 00 00
	00		 mov	 r8d, 191		; 000000bfH
  02b0f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  02b16	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@BKHDOHOI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  02b1d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  02b23	33 c0		 xor	 eax, eax
$LN265@parse_inte:
  02b25	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  02b2d	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  02b30	c1 e8 05	 shr	 eax, 5
  02b33	83 e0 01	 and	 eax, 1
  02b36	85 c0		 test	 eax, eax
  02b38	0f 84 bd 00 00
	00		 je	 $LN271@parse_inte
  02b3e	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  02b46	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  02b4a	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  02b50	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  02b55	85 c0		 test	 eax, eax
  02b57	75 1c		 jne	 SHORT $LN266@parse_inte
  02b59	41 b8 bf 00 00
	00		 mov	 r8d, 191		; 000000bfH
  02b5f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  02b66	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@BKHDOHOI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  02b6d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  02b73	33 c0		 xor	 eax, eax
$LN266@parse_inte:
  02b75	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  02b7d	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  02b80	c1 e8 07	 shr	 eax, 7
  02b83	83 e0 01	 and	 eax, 1
  02b86	85 c0		 test	 eax, eax
  02b88	75 1c		 jne	 SHORT $LN267@parse_inte
  02b8a	41 b8 bf 00 00
	00		 mov	 r8d, 191		; 000000bfH
  02b90	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  02b97	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@POFOFGEK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ@
  02b9e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  02ba4	33 c0		 xor	 eax, eax
$LN267@parse_inte:
  02ba6	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  02bae	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  02bb1	c1 e8 06	 shr	 eax, 6
  02bb4	83 e0 01	 and	 eax, 1
  02bb7	85 c0		 test	 eax, eax
  02bb9	74 18		 je	 SHORT $LN268@parse_inte
  02bbb	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  02bc3	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  02bc9	48 89 84 24 f8
	01 00 00	 mov	 QWORD PTR tv1561[rsp], rax
  02bd1	eb 16		 jmp	 SHORT $LN269@parse_inte
$LN268@parse_inte:
  02bd3	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  02bdb	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  02be1	48 89 84 24 f8
	01 00 00	 mov	 QWORD PTR tv1561[rsp], rax
$LN269@parse_inte:
  02be9	48 8b 84 24 f8
	01 00 00	 mov	 rax, QWORD PTR tv1561[rsp]
  02bf1	48 89 84 24 00
	02 00 00	 mov	 QWORD PTR tv1570[rsp], rax
  02bf9	eb 45		 jmp	 SHORT $LN272@parse_inte
$LN271@parse_inte:
  02bfb	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  02c03	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  02c0b	75 1c		 jne	 SHORT $LN270@parse_inte
  02c0d	41 b8 bf 00 00
	00		 mov	 r8d, 191		; 000000bfH
  02c13	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  02c1a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FM@MDFNAKJB@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc@
  02c21	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  02c27	33 c0		 xor	 eax, eax
$LN270@parse_inte:
  02c29	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  02c31	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  02c38	48 89 84 24 00
	02 00 00	 mov	 QWORD PTR tv1570[rsp], rax
$LN272@parse_inte:
  02c40	48 8b 44 24 30	 mov	 rax, QWORD PTR pos$[rsp]
  02c45	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR tv1570[rsp]
  02c4d	48 03 c8	 add	 rcx, rax
  02c50	48 8b c1	 mov	 rax, rcx
  02c53	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  02c56	89 84 24 08 02
	00 00		 mov	 DWORD PTR tv1685[rsp], eax
  02c5d	e9 68 03 00 00	 jmp	 $LN294@parse_inte
$LN293@parse_inte:
  02c62	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  02c6a	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  02c6e	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  02c74	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  02c79	85 c0		 test	 eax, eax
  02c7b	75 1c		 jne	 SHORT $LN273@parse_inte
  02c7d	41 b8 bf 00 00
	00		 mov	 r8d, 191		; 000000bfH
  02c83	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  02c8a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@BKHDOHOI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  02c91	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  02c97	33 c0		 xor	 eax, eax
$LN273@parse_inte:
  02c99	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  02ca1	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  02ca4	c1 e8 07	 shr	 eax, 7
  02ca7	83 e0 01	 and	 eax, 1
  02caa	85 c0		 test	 eax, eax
  02cac	75 1c		 jne	 SHORT $LN274@parse_inte
  02cae	41 b8 bf 00 00
	00		 mov	 r8d, 191		; 000000bfH
  02cb4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  02cbb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@POFOFGEK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ@
  02cc2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  02cc8	33 c0		 xor	 eax, eax
$LN274@parse_inte:
  02cca	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  02cd2	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  02cd5	c1 e8 02	 shr	 eax, 2
  02cd8	83 e0 07	 and	 eax, 7
  02cdb	83 f8 02	 cmp	 eax, 2
  02cde	0f 85 6f 01 00
	00		 jne	 $LN291@parse_inte
  02ce4	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  02cec	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  02cf0	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  02cf6	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  02cfb	85 c0		 test	 eax, eax
  02cfd	75 1c		 jne	 SHORT $LN275@parse_inte
  02cff	41 b8 bf 00 00
	00		 mov	 r8d, 191		; 000000bfH
  02d05	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  02d0c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@BKHDOHOI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  02d13	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  02d19	33 c0		 xor	 eax, eax
$LN275@parse_inte:
  02d1b	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  02d23	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  02d26	c1 e8 05	 shr	 eax, 5
  02d29	83 e0 01	 and	 eax, 1
  02d2c	85 c0		 test	 eax, eax
  02d2e	0f 84 bd 00 00
	00		 je	 $LN281@parse_inte
  02d34	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  02d3c	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  02d40	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  02d46	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  02d4b	85 c0		 test	 eax, eax
  02d4d	75 1c		 jne	 SHORT $LN276@parse_inte
  02d4f	41 b8 bf 00 00
	00		 mov	 r8d, 191		; 000000bfH
  02d55	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  02d5c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@BKHDOHOI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  02d63	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  02d69	33 c0		 xor	 eax, eax
$LN276@parse_inte:
  02d6b	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  02d73	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  02d76	c1 e8 07	 shr	 eax, 7
  02d79	83 e0 01	 and	 eax, 1
  02d7c	85 c0		 test	 eax, eax
  02d7e	75 1c		 jne	 SHORT $LN277@parse_inte
  02d80	41 b8 bf 00 00
	00		 mov	 r8d, 191		; 000000bfH
  02d86	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  02d8d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@POFOFGEK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ@
  02d94	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  02d9a	33 c0		 xor	 eax, eax
$LN277@parse_inte:
  02d9c	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  02da4	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  02da7	c1 e8 06	 shr	 eax, 6
  02daa	83 e0 01	 and	 eax, 1
  02dad	85 c0		 test	 eax, eax
  02daf	74 18		 je	 SHORT $LN278@parse_inte
  02db1	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  02db9	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  02dbf	48 89 84 24 10
	02 00 00	 mov	 QWORD PTR tv1626[rsp], rax
  02dc7	eb 16		 jmp	 SHORT $LN279@parse_inte
$LN278@parse_inte:
  02dc9	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  02dd1	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  02dd7	48 89 84 24 10
	02 00 00	 mov	 QWORD PTR tv1626[rsp], rax
$LN279@parse_inte:
  02ddf	48 8b 84 24 10
	02 00 00	 mov	 rax, QWORD PTR tv1626[rsp]
  02de7	48 89 84 24 18
	02 00 00	 mov	 QWORD PTR tv1635[rsp], rax
  02def	eb 45		 jmp	 SHORT $LN282@parse_inte
$LN281@parse_inte:
  02df1	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  02df9	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  02e01	75 1c		 jne	 SHORT $LN280@parse_inte
  02e03	41 b8 bf 00 00
	00		 mov	 r8d, 191		; 000000bfH
  02e09	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  02e10	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FM@MDFNAKJB@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc@
  02e17	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  02e1d	33 c0		 xor	 eax, eax
$LN280@parse_inte:
  02e1f	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  02e27	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  02e2e	48 89 84 24 18
	02 00 00	 mov	 QWORD PTR tv1635[rsp], rax
$LN282@parse_inte:
  02e36	48 8b 84 24 18
	02 00 00	 mov	 rax, QWORD PTR tv1635[rsp]
  02e3e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pos$[rsp]
  02e43	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  02e47	89 84 24 20 02
	00 00		 mov	 DWORD PTR tv1684[rsp], eax
  02e4e	e9 69 01 00 00	 jmp	 $LN292@parse_inte
$LN291@parse_inte:
  02e53	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  02e5b	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  02e5f	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  02e65	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  02e6a	85 c0		 test	 eax, eax
  02e6c	75 1c		 jne	 SHORT $LN283@parse_inte
  02e6e	41 b8 bf 00 00
	00		 mov	 r8d, 191		; 000000bfH
  02e74	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  02e7b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@BKHDOHOI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  02e82	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  02e88	33 c0		 xor	 eax, eax
$LN283@parse_inte:
  02e8a	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  02e92	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  02e95	c1 e8 05	 shr	 eax, 5
  02e98	83 e0 01	 and	 eax, 1
  02e9b	85 c0		 test	 eax, eax
  02e9d	0f 84 bd 00 00
	00		 je	 $LN289@parse_inte
  02ea3	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  02eab	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  02eaf	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  02eb5	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  02eba	85 c0		 test	 eax, eax
  02ebc	75 1c		 jne	 SHORT $LN284@parse_inte
  02ebe	41 b8 bf 00 00
	00		 mov	 r8d, 191		; 000000bfH
  02ec4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  02ecb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@BKHDOHOI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  02ed2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  02ed8	33 c0		 xor	 eax, eax
$LN284@parse_inte:
  02eda	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  02ee2	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  02ee5	c1 e8 07	 shr	 eax, 7
  02ee8	83 e0 01	 and	 eax, 1
  02eeb	85 c0		 test	 eax, eax
  02eed	75 1c		 jne	 SHORT $LN285@parse_inte
  02eef	41 b8 bf 00 00
	00		 mov	 r8d, 191		; 000000bfH
  02ef5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  02efc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@POFOFGEK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ@
  02f03	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  02f09	33 c0		 xor	 eax, eax
$LN285@parse_inte:
  02f0b	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  02f13	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  02f16	c1 e8 06	 shr	 eax, 6
  02f19	83 e0 01	 and	 eax, 1
  02f1c	85 c0		 test	 eax, eax
  02f1e	74 18		 je	 SHORT $LN286@parse_inte
  02f20	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  02f28	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  02f2e	48 89 84 24 28
	02 00 00	 mov	 QWORD PTR tv1672[rsp], rax
  02f36	eb 16		 jmp	 SHORT $LN287@parse_inte
$LN286@parse_inte:
  02f38	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  02f40	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  02f46	48 89 84 24 28
	02 00 00	 mov	 QWORD PTR tv1672[rsp], rax
$LN287@parse_inte:
  02f4e	48 8b 84 24 28
	02 00 00	 mov	 rax, QWORD PTR tv1672[rsp]
  02f56	48 89 84 24 30
	02 00 00	 mov	 QWORD PTR tv1681[rsp], rax
  02f5e	eb 45		 jmp	 SHORT $LN290@parse_inte
$LN289@parse_inte:
  02f60	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  02f68	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  02f70	75 1c		 jne	 SHORT $LN288@parse_inte
  02f72	41 b8 bf 00 00
	00		 mov	 r8d, 191		; 000000bfH
  02f78	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  02f7f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FM@MDFNAKJB@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc@
  02f86	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  02f8c	33 c0		 xor	 eax, eax
$LN288@parse_inte:
  02f8e	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  02f96	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  02f9d	48 89 84 24 30
	02 00 00	 mov	 QWORD PTR tv1681[rsp], rax
$LN290@parse_inte:
  02fa5	48 8b 84 24 30
	02 00 00	 mov	 rax, QWORD PTR tv1681[rsp]
  02fad	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pos$[rsp]
  02fb2	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  02fb5	89 84 24 20 02
	00 00		 mov	 DWORD PTR tv1684[rsp], eax
$LN292@parse_inte:
  02fbc	8b 84 24 20 02
	00 00		 mov	 eax, DWORD PTR tv1684[rsp]
  02fc3	89 84 24 08 02
	00 00		 mov	 DWORD PTR tv1685[rsp], eax
$LN294@parse_inte:
  02fca	83 bc 24 08 02
	00 00 23	 cmp	 DWORD PTR tv1685[rsp], 35 ; 00000023H
  02fd2	75 1c		 jne	 SHORT $LN16@parse_inte

; 192  :         format->alternate = 1;

  02fd4	48 8b 84 24 68
	03 00 00	 mov	 rax, QWORD PTR format$[rsp]
  02fdc	c7 40 08 01 00
	00 00		 mov	 DWORD PTR [rax+8], 1

; 193  :         ++pos;

  02fe3	48 8b 44 24 30	 mov	 rax, QWORD PTR pos$[rsp]
  02fe8	48 ff c0	 inc	 rax
  02feb	48 89 44 24 30	 mov	 QWORD PTR pos$[rsp], rax
$LN16@parse_inte:

; 194  :     }
; 195  : 
; 196  :     /* The special case for 0-padding (backwards compat) */
; 197  :     if (format->fill_char == '\0' && end-pos >= 1 && READ_spec(pos) == '0') {

  02ff0	48 8b 84 24 68
	03 00 00	 mov	 rax, QWORD PTR format$[rsp]
  02ff8	83 38 00	 cmp	 DWORD PTR [rax], 0
  02ffb	0f 85 1e 06 00
	00		 jne	 $LN15@parse_inte
  03001	48 8b 44 24 30	 mov	 rax, QWORD PTR pos$[rsp]
  03006	48 8b 8c 24 60
	03 00 00	 mov	 rcx, QWORD PTR end$[rsp]
  0300e	48 2b c8	 sub	 rcx, rax
  03011	48 8b c1	 mov	 rax, rcx
  03014	48 83 f8 01	 cmp	 rax, 1
  03018	0f 8c 01 06 00
	00		 jl	 $LN15@parse_inte
  0301e	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  03026	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0302a	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  03030	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  03035	85 c0		 test	 eax, eax
  03037	75 1c		 jne	 SHORT $LN295@parse_inte
  03039	41 b8 c5 00 00
	00		 mov	 r8d, 197		; 000000c5H
  0303f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  03046	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DK@JLLBFDEO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$AA@
  0304d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  03053	33 c0		 xor	 eax, eax
$LN295@parse_inte:
  03055	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  0305d	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  03060	c1 e8 07	 shr	 eax, 7
  03063	83 e0 01	 and	 eax, 1
  03066	85 c0		 test	 eax, eax
  03068	75 1c		 jne	 SHORT $LN296@parse_inte
  0306a	41 b8 c5 00 00
	00		 mov	 r8d, 197		; 000000c5H
  03070	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  03077	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EA@DCIJOEKC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$AA@
  0307e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  03084	33 c0		 xor	 eax, eax
$LN296@parse_inte:
  03086	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  0308e	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  03092	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  03098	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0309d	85 c0		 test	 eax, eax
  0309f	75 1c		 jne	 SHORT $LN297@parse_inte
  030a1	41 b8 c5 00 00
	00		 mov	 r8d, 197		; 000000c5H
  030a7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  030ae	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@BKHDOHOI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  030b5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  030bb	33 c0		 xor	 eax, eax
$LN297@parse_inte:
  030bd	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  030c5	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  030c8	c1 e8 07	 shr	 eax, 7
  030cb	83 e0 01	 and	 eax, 1
  030ce	85 c0		 test	 eax, eax
  030d0	75 1c		 jne	 SHORT $LN298@parse_inte
  030d2	41 b8 c5 00 00
	00		 mov	 r8d, 197		; 000000c5H
  030d8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  030df	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@POFOFGEK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ@
  030e6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  030ec	33 c0		 xor	 eax, eax
$LN298@parse_inte:
  030ee	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  030f6	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  030f9	c1 e8 02	 shr	 eax, 2
  030fc	83 e0 07	 and	 eax, 7
  030ff	83 f8 01	 cmp	 eax, 1
  03102	0f 85 74 01 00
	00		 jne	 $LN327@parse_inte
  03108	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  03110	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  03114	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0311a	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0311f	85 c0		 test	 eax, eax
  03121	75 1c		 jne	 SHORT $LN299@parse_inte
  03123	41 b8 c5 00 00
	00		 mov	 r8d, 197		; 000000c5H
  03129	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  03130	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@BKHDOHOI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  03137	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0313d	33 c0		 xor	 eax, eax
$LN299@parse_inte:
  0313f	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  03147	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0314a	c1 e8 05	 shr	 eax, 5
  0314d	83 e0 01	 and	 eax, 1
  03150	85 c0		 test	 eax, eax
  03152	0f 84 bd 00 00
	00		 je	 $LN305@parse_inte
  03158	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  03160	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  03164	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0316a	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0316f	85 c0		 test	 eax, eax
  03171	75 1c		 jne	 SHORT $LN300@parse_inte
  03173	41 b8 c5 00 00
	00		 mov	 r8d, 197		; 000000c5H
  03179	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  03180	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@BKHDOHOI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  03187	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0318d	33 c0		 xor	 eax, eax
$LN300@parse_inte:
  0318f	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  03197	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0319a	c1 e8 07	 shr	 eax, 7
  0319d	83 e0 01	 and	 eax, 1
  031a0	85 c0		 test	 eax, eax
  031a2	75 1c		 jne	 SHORT $LN301@parse_inte
  031a4	41 b8 c5 00 00
	00		 mov	 r8d, 197		; 000000c5H
  031aa	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  031b1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@POFOFGEK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ@
  031b8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  031be	33 c0		 xor	 eax, eax
$LN301@parse_inte:
  031c0	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  031c8	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  031cb	c1 e8 06	 shr	 eax, 6
  031ce	83 e0 01	 and	 eax, 1
  031d1	85 c0		 test	 eax, eax
  031d3	74 18		 je	 SHORT $LN302@parse_inte
  031d5	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  031dd	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  031e3	48 89 84 24 38
	02 00 00	 mov	 QWORD PTR tv1761[rsp], rax
  031eb	eb 16		 jmp	 SHORT $LN303@parse_inte
$LN302@parse_inte:
  031ed	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  031f5	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  031fb	48 89 84 24 38
	02 00 00	 mov	 QWORD PTR tv1761[rsp], rax
$LN303@parse_inte:
  03203	48 8b 84 24 38
	02 00 00	 mov	 rax, QWORD PTR tv1761[rsp]
  0320b	48 89 84 24 40
	02 00 00	 mov	 QWORD PTR tv1770[rsp], rax
  03213	eb 45		 jmp	 SHORT $LN306@parse_inte
$LN305@parse_inte:
  03215	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  0321d	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  03225	75 1c		 jne	 SHORT $LN304@parse_inte
  03227	41 b8 c5 00 00
	00		 mov	 r8d, 197		; 000000c5H
  0322d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  03234	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FM@MDFNAKJB@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc@
  0323b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  03241	33 c0		 xor	 eax, eax
$LN304@parse_inte:
  03243	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  0324b	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  03252	48 89 84 24 40
	02 00 00	 mov	 QWORD PTR tv1770[rsp], rax
$LN306@parse_inte:
  0325a	48 8b 44 24 30	 mov	 rax, QWORD PTR pos$[rsp]
  0325f	48 8b 8c 24 40
	02 00 00	 mov	 rcx, QWORD PTR tv1770[rsp]
  03267	48 03 c8	 add	 rcx, rax
  0326a	48 8b c1	 mov	 rax, rcx
  0326d	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  03270	89 84 24 48 02
	00 00		 mov	 DWORD PTR tv1885[rsp], eax
  03277	e9 68 03 00 00	 jmp	 $LN328@parse_inte
$LN327@parse_inte:
  0327c	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  03284	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  03288	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0328e	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  03293	85 c0		 test	 eax, eax
  03295	75 1c		 jne	 SHORT $LN307@parse_inte
  03297	41 b8 c5 00 00
	00		 mov	 r8d, 197		; 000000c5H
  0329d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  032a4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@BKHDOHOI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  032ab	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  032b1	33 c0		 xor	 eax, eax
$LN307@parse_inte:
  032b3	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  032bb	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  032be	c1 e8 07	 shr	 eax, 7
  032c1	83 e0 01	 and	 eax, 1
  032c4	85 c0		 test	 eax, eax
  032c6	75 1c		 jne	 SHORT $LN308@parse_inte
  032c8	41 b8 c5 00 00
	00		 mov	 r8d, 197		; 000000c5H
  032ce	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  032d5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@POFOFGEK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ@
  032dc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  032e2	33 c0		 xor	 eax, eax
$LN308@parse_inte:
  032e4	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  032ec	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  032ef	c1 e8 02	 shr	 eax, 2
  032f2	83 e0 07	 and	 eax, 7
  032f5	83 f8 02	 cmp	 eax, 2
  032f8	0f 85 6f 01 00
	00		 jne	 $LN325@parse_inte
  032fe	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  03306	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0330a	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  03310	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  03315	85 c0		 test	 eax, eax
  03317	75 1c		 jne	 SHORT $LN309@parse_inte
  03319	41 b8 c5 00 00
	00		 mov	 r8d, 197		; 000000c5H
  0331f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  03326	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@BKHDOHOI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  0332d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  03333	33 c0		 xor	 eax, eax
$LN309@parse_inte:
  03335	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  0333d	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  03340	c1 e8 05	 shr	 eax, 5
  03343	83 e0 01	 and	 eax, 1
  03346	85 c0		 test	 eax, eax
  03348	0f 84 bd 00 00
	00		 je	 $LN315@parse_inte
  0334e	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  03356	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0335a	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  03360	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  03365	85 c0		 test	 eax, eax
  03367	75 1c		 jne	 SHORT $LN310@parse_inte
  03369	41 b8 c5 00 00
	00		 mov	 r8d, 197		; 000000c5H
  0336f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  03376	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@BKHDOHOI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  0337d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  03383	33 c0		 xor	 eax, eax
$LN310@parse_inte:
  03385	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  0338d	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  03390	c1 e8 07	 shr	 eax, 7
  03393	83 e0 01	 and	 eax, 1
  03396	85 c0		 test	 eax, eax
  03398	75 1c		 jne	 SHORT $LN311@parse_inte
  0339a	41 b8 c5 00 00
	00		 mov	 r8d, 197		; 000000c5H
  033a0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  033a7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@POFOFGEK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ@
  033ae	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  033b4	33 c0		 xor	 eax, eax
$LN311@parse_inte:
  033b6	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  033be	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  033c1	c1 e8 06	 shr	 eax, 6
  033c4	83 e0 01	 and	 eax, 1
  033c7	85 c0		 test	 eax, eax
  033c9	74 18		 je	 SHORT $LN312@parse_inte
  033cb	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  033d3	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  033d9	48 89 84 24 50
	02 00 00	 mov	 QWORD PTR tv1826[rsp], rax
  033e1	eb 16		 jmp	 SHORT $LN313@parse_inte
$LN312@parse_inte:
  033e3	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  033eb	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  033f1	48 89 84 24 50
	02 00 00	 mov	 QWORD PTR tv1826[rsp], rax
$LN313@parse_inte:
  033f9	48 8b 84 24 50
	02 00 00	 mov	 rax, QWORD PTR tv1826[rsp]
  03401	48 89 84 24 58
	02 00 00	 mov	 QWORD PTR tv1835[rsp], rax
  03409	eb 45		 jmp	 SHORT $LN316@parse_inte
$LN315@parse_inte:
  0340b	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  03413	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  0341b	75 1c		 jne	 SHORT $LN314@parse_inte
  0341d	41 b8 c5 00 00
	00		 mov	 r8d, 197		; 000000c5H
  03423	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  0342a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FM@MDFNAKJB@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc@
  03431	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  03437	33 c0		 xor	 eax, eax
$LN314@parse_inte:
  03439	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  03441	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  03448	48 89 84 24 58
	02 00 00	 mov	 QWORD PTR tv1835[rsp], rax
$LN316@parse_inte:
  03450	48 8b 84 24 58
	02 00 00	 mov	 rax, QWORD PTR tv1835[rsp]
  03458	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pos$[rsp]
  0345d	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  03461	89 84 24 60 02
	00 00		 mov	 DWORD PTR tv1884[rsp], eax
  03468	e9 69 01 00 00	 jmp	 $LN326@parse_inte
$LN325@parse_inte:
  0346d	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  03475	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  03479	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0347f	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  03484	85 c0		 test	 eax, eax
  03486	75 1c		 jne	 SHORT $LN317@parse_inte
  03488	41 b8 c5 00 00
	00		 mov	 r8d, 197		; 000000c5H
  0348e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  03495	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@BKHDOHOI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  0349c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  034a2	33 c0		 xor	 eax, eax
$LN317@parse_inte:
  034a4	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  034ac	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  034af	c1 e8 05	 shr	 eax, 5
  034b2	83 e0 01	 and	 eax, 1
  034b5	85 c0		 test	 eax, eax
  034b7	0f 84 bd 00 00
	00		 je	 $LN323@parse_inte
  034bd	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  034c5	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  034c9	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  034cf	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  034d4	85 c0		 test	 eax, eax
  034d6	75 1c		 jne	 SHORT $LN318@parse_inte
  034d8	41 b8 c5 00 00
	00		 mov	 r8d, 197		; 000000c5H
  034de	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  034e5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@BKHDOHOI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  034ec	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  034f2	33 c0		 xor	 eax, eax
$LN318@parse_inte:
  034f4	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  034fc	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  034ff	c1 e8 07	 shr	 eax, 7
  03502	83 e0 01	 and	 eax, 1
  03505	85 c0		 test	 eax, eax
  03507	75 1c		 jne	 SHORT $LN319@parse_inte
  03509	41 b8 c5 00 00
	00		 mov	 r8d, 197		; 000000c5H
  0350f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  03516	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@POFOFGEK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ@
  0351d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  03523	33 c0		 xor	 eax, eax
$LN319@parse_inte:
  03525	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  0352d	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  03530	c1 e8 06	 shr	 eax, 6
  03533	83 e0 01	 and	 eax, 1
  03536	85 c0		 test	 eax, eax
  03538	74 18		 je	 SHORT $LN320@parse_inte
  0353a	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  03542	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  03548	48 89 84 24 68
	02 00 00	 mov	 QWORD PTR tv1872[rsp], rax
  03550	eb 16		 jmp	 SHORT $LN321@parse_inte
$LN320@parse_inte:
  03552	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  0355a	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  03560	48 89 84 24 68
	02 00 00	 mov	 QWORD PTR tv1872[rsp], rax
$LN321@parse_inte:
  03568	48 8b 84 24 68
	02 00 00	 mov	 rax, QWORD PTR tv1872[rsp]
  03570	48 89 84 24 70
	02 00 00	 mov	 QWORD PTR tv1881[rsp], rax
  03578	eb 45		 jmp	 SHORT $LN324@parse_inte
$LN323@parse_inte:
  0357a	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  03582	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  0358a	75 1c		 jne	 SHORT $LN322@parse_inte
  0358c	41 b8 c5 00 00
	00		 mov	 r8d, 197		; 000000c5H
  03592	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  03599	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FM@MDFNAKJB@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc@
  035a0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  035a6	33 c0		 xor	 eax, eax
$LN322@parse_inte:
  035a8	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  035b0	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  035b7	48 89 84 24 70
	02 00 00	 mov	 QWORD PTR tv1881[rsp], rax
$LN324@parse_inte:
  035bf	48 8b 84 24 70
	02 00 00	 mov	 rax, QWORD PTR tv1881[rsp]
  035c7	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pos$[rsp]
  035cc	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  035cf	89 84 24 60 02
	00 00		 mov	 DWORD PTR tv1884[rsp], eax
$LN326@parse_inte:
  035d6	8b 84 24 60 02
	00 00		 mov	 eax, DWORD PTR tv1884[rsp]
  035dd	89 84 24 48 02
	00 00		 mov	 DWORD PTR tv1885[rsp], eax
$LN328@parse_inte:
  035e4	83 bc 24 48 02
	00 00 30	 cmp	 DWORD PTR tv1885[rsp], 48 ; 00000030H
  035ec	75 31		 jne	 SHORT $LN15@parse_inte

; 198  :         format->fill_char = '0';

  035ee	48 8b 84 24 68
	03 00 00	 mov	 rax, QWORD PTR format$[rsp]
  035f6	c7 00 30 00 00
	00		 mov	 DWORD PTR [rax], 48	; 00000030H

; 199  :         if (!align_specified) {

  035fc	83 7c 24 20 00	 cmp	 DWORD PTR align_specified$[rsp], 0
  03601	75 0f		 jne	 SHORT $LN14@parse_inte

; 200  :             format->align = '=';

  03603	48 8b 84 24 68
	03 00 00	 mov	 rax, QWORD PTR format$[rsp]
  0360b	c7 40 04 3d 00
	00 00		 mov	 DWORD PTR [rax+4], 61	; 0000003dH
$LN14@parse_inte:

; 201  :         }
; 202  :         ++pos;

  03612	48 8b 44 24 30	 mov	 rax, QWORD PTR pos$[rsp]
  03617	48 ff c0	 inc	 rax
  0361a	48 89 44 24 30	 mov	 QWORD PTR pos$[rsp], rax
$LN15@parse_inte:

; 203  :     }
; 204  : 
; 205  :     consumed = get_integer(format_spec, &pos, end, &format->width);

  0361f	48 8b 84 24 68
	03 00 00	 mov	 rax, QWORD PTR format$[rsp]
  03627	48 83 c0 10	 add	 rax, 16
  0362b	4c 8b c8	 mov	 r9, rax
  0362e	4c 8b 84 24 60
	03 00 00	 mov	 r8, QWORD PTR end$[rsp]
  03636	48 8d 54 24 30	 lea	 rdx, QWORD PTR pos$[rsp]
  0363b	48 8b 8c 24 50
	03 00 00	 mov	 rcx, QWORD PTR format_spec$[rsp]
  03643	e8 00 00 00 00	 call	 get_integer
  03648	48 98		 cdqe
  0364a	48 89 44 24 28	 mov	 QWORD PTR consumed$[rsp], rax

; 206  :     if (consumed == -1)

  0364f	48 83 7c 24 28
	ff		 cmp	 QWORD PTR consumed$[rsp], -1
  03655	75 07		 jne	 SHORT $LN13@parse_inte

; 207  :         /* Overflow error. Exception already set. */
; 208  :         return 0;

  03657	33 c0		 xor	 eax, eax
  03659	e9 6a 13 00 00	 jmp	 $LN21@parse_inte
$LN13@parse_inte:

; 209  : 
; 210  :     /* If consumed is 0, we didn't consume any characters for the
; 211  :        width. In that case, reset the width to -1, because
; 212  :        get_integer() will have set it to zero. -1 is how we record
; 213  :        that the width wasn't specified. */
; 214  :     if (consumed == 0)

  0365e	48 83 7c 24 28
	00		 cmp	 QWORD PTR consumed$[rsp], 0
  03664	75 10		 jne	 SHORT $LN12@parse_inte

; 215  :         format->width = -1;

  03666	48 8b 84 24 68
	03 00 00	 mov	 rax, QWORD PTR format$[rsp]
  0366e	48 c7 40 10 ff
	ff ff ff	 mov	 QWORD PTR [rax+16], -1
$LN12@parse_inte:

; 216  : 
; 217  :     /* Comma signifies add thousands separators */
; 218  :     if (end-pos && READ_spec(pos) == ',') {

  03676	48 8b 44 24 30	 mov	 rax, QWORD PTR pos$[rsp]
  0367b	48 8b 8c 24 60
	03 00 00	 mov	 rcx, QWORD PTR end$[rsp]
  03683	48 2b c8	 sub	 rcx, rax
  03686	48 8b c1	 mov	 rax, rcx
  03689	48 85 c0	 test	 rax, rax
  0368c	0f 84 ec 05 00
	00		 je	 $LN11@parse_inte
  03692	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  0369a	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0369e	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  036a4	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  036a9	85 c0		 test	 eax, eax
  036ab	75 1c		 jne	 SHORT $LN329@parse_inte
  036ad	41 b8 da 00 00
	00		 mov	 r8d, 218		; 000000daH
  036b3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  036ba	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DK@JLLBFDEO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$AA@
  036c1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  036c7	33 c0		 xor	 eax, eax
$LN329@parse_inte:
  036c9	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  036d1	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  036d4	c1 e8 07	 shr	 eax, 7
  036d7	83 e0 01	 and	 eax, 1
  036da	85 c0		 test	 eax, eax
  036dc	75 1c		 jne	 SHORT $LN330@parse_inte
  036de	41 b8 da 00 00
	00		 mov	 r8d, 218		; 000000daH
  036e4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  036eb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EA@DCIJOEKC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$AA@
  036f2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  036f8	33 c0		 xor	 eax, eax
$LN330@parse_inte:
  036fa	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  03702	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  03706	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0370c	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  03711	85 c0		 test	 eax, eax
  03713	75 1c		 jne	 SHORT $LN331@parse_inte
  03715	41 b8 da 00 00
	00		 mov	 r8d, 218		; 000000daH
  0371b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  03722	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@BKHDOHOI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  03729	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0372f	33 c0		 xor	 eax, eax
$LN331@parse_inte:
  03731	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  03739	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0373c	c1 e8 07	 shr	 eax, 7
  0373f	83 e0 01	 and	 eax, 1
  03742	85 c0		 test	 eax, eax
  03744	75 1c		 jne	 SHORT $LN332@parse_inte
  03746	41 b8 da 00 00
	00		 mov	 r8d, 218		; 000000daH
  0374c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  03753	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@POFOFGEK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ@
  0375a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  03760	33 c0		 xor	 eax, eax
$LN332@parse_inte:
  03762	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  0376a	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0376d	c1 e8 02	 shr	 eax, 2
  03770	83 e0 07	 and	 eax, 7
  03773	83 f8 01	 cmp	 eax, 1
  03776	0f 85 74 01 00
	00		 jne	 $LN361@parse_inte
  0377c	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  03784	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  03788	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0378e	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  03793	85 c0		 test	 eax, eax
  03795	75 1c		 jne	 SHORT $LN333@parse_inte
  03797	41 b8 da 00 00
	00		 mov	 r8d, 218		; 000000daH
  0379d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  037a4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@BKHDOHOI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  037ab	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  037b1	33 c0		 xor	 eax, eax
$LN333@parse_inte:
  037b3	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  037bb	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  037be	c1 e8 05	 shr	 eax, 5
  037c1	83 e0 01	 and	 eax, 1
  037c4	85 c0		 test	 eax, eax
  037c6	0f 84 bd 00 00
	00		 je	 $LN339@parse_inte
  037cc	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  037d4	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  037d8	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  037de	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  037e3	85 c0		 test	 eax, eax
  037e5	75 1c		 jne	 SHORT $LN334@parse_inte
  037e7	41 b8 da 00 00
	00		 mov	 r8d, 218		; 000000daH
  037ed	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  037f4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@BKHDOHOI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  037fb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  03801	33 c0		 xor	 eax, eax
$LN334@parse_inte:
  03803	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  0380b	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0380e	c1 e8 07	 shr	 eax, 7
  03811	83 e0 01	 and	 eax, 1
  03814	85 c0		 test	 eax, eax
  03816	75 1c		 jne	 SHORT $LN335@parse_inte
  03818	41 b8 da 00 00
	00		 mov	 r8d, 218		; 000000daH
  0381e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  03825	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@POFOFGEK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ@
  0382c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  03832	33 c0		 xor	 eax, eax
$LN335@parse_inte:
  03834	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  0383c	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0383f	c1 e8 06	 shr	 eax, 6
  03842	83 e0 01	 and	 eax, 1
  03845	85 c0		 test	 eax, eax
  03847	74 18		 je	 SHORT $LN336@parse_inte
  03849	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  03851	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  03857	48 89 84 24 78
	02 00 00	 mov	 QWORD PTR tv1971[rsp], rax
  0385f	eb 16		 jmp	 SHORT $LN337@parse_inte
$LN336@parse_inte:
  03861	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  03869	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  0386f	48 89 84 24 78
	02 00 00	 mov	 QWORD PTR tv1971[rsp], rax
$LN337@parse_inte:
  03877	48 8b 84 24 78
	02 00 00	 mov	 rax, QWORD PTR tv1971[rsp]
  0387f	48 89 84 24 80
	02 00 00	 mov	 QWORD PTR tv1980[rsp], rax
  03887	eb 45		 jmp	 SHORT $LN340@parse_inte
$LN339@parse_inte:
  03889	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  03891	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  03899	75 1c		 jne	 SHORT $LN338@parse_inte
  0389b	41 b8 da 00 00
	00		 mov	 r8d, 218		; 000000daH
  038a1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  038a8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FM@MDFNAKJB@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc@
  038af	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  038b5	33 c0		 xor	 eax, eax
$LN338@parse_inte:
  038b7	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  038bf	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  038c6	48 89 84 24 80
	02 00 00	 mov	 QWORD PTR tv1980[rsp], rax
$LN340@parse_inte:
  038ce	48 8b 44 24 30	 mov	 rax, QWORD PTR pos$[rsp]
  038d3	48 8b 8c 24 80
	02 00 00	 mov	 rcx, QWORD PTR tv1980[rsp]
  038db	48 03 c8	 add	 rcx, rax
  038de	48 8b c1	 mov	 rax, rcx
  038e1	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  038e4	89 84 24 88 02
	00 00		 mov	 DWORD PTR tv2095[rsp], eax
  038eb	e9 68 03 00 00	 jmp	 $LN362@parse_inte
$LN361@parse_inte:
  038f0	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  038f8	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  038fc	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  03902	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  03907	85 c0		 test	 eax, eax
  03909	75 1c		 jne	 SHORT $LN341@parse_inte
  0390b	41 b8 da 00 00
	00		 mov	 r8d, 218		; 000000daH
  03911	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  03918	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@BKHDOHOI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  0391f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  03925	33 c0		 xor	 eax, eax
$LN341@parse_inte:
  03927	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  0392f	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  03932	c1 e8 07	 shr	 eax, 7
  03935	83 e0 01	 and	 eax, 1
  03938	85 c0		 test	 eax, eax
  0393a	75 1c		 jne	 SHORT $LN342@parse_inte
  0393c	41 b8 da 00 00
	00		 mov	 r8d, 218		; 000000daH
  03942	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  03949	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@POFOFGEK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ@
  03950	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  03956	33 c0		 xor	 eax, eax
$LN342@parse_inte:
  03958	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  03960	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  03963	c1 e8 02	 shr	 eax, 2
  03966	83 e0 07	 and	 eax, 7
  03969	83 f8 02	 cmp	 eax, 2
  0396c	0f 85 6f 01 00
	00		 jne	 $LN359@parse_inte
  03972	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  0397a	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0397e	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  03984	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  03989	85 c0		 test	 eax, eax
  0398b	75 1c		 jne	 SHORT $LN343@parse_inte
  0398d	41 b8 da 00 00
	00		 mov	 r8d, 218		; 000000daH
  03993	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  0399a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@BKHDOHOI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  039a1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  039a7	33 c0		 xor	 eax, eax
$LN343@parse_inte:
  039a9	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  039b1	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  039b4	c1 e8 05	 shr	 eax, 5
  039b7	83 e0 01	 and	 eax, 1
  039ba	85 c0		 test	 eax, eax
  039bc	0f 84 bd 00 00
	00		 je	 $LN349@parse_inte
  039c2	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  039ca	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  039ce	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  039d4	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  039d9	85 c0		 test	 eax, eax
  039db	75 1c		 jne	 SHORT $LN344@parse_inte
  039dd	41 b8 da 00 00
	00		 mov	 r8d, 218		; 000000daH
  039e3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  039ea	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@BKHDOHOI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  039f1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  039f7	33 c0		 xor	 eax, eax
$LN344@parse_inte:
  039f9	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  03a01	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  03a04	c1 e8 07	 shr	 eax, 7
  03a07	83 e0 01	 and	 eax, 1
  03a0a	85 c0		 test	 eax, eax
  03a0c	75 1c		 jne	 SHORT $LN345@parse_inte
  03a0e	41 b8 da 00 00
	00		 mov	 r8d, 218		; 000000daH
  03a14	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  03a1b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@POFOFGEK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ@
  03a22	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  03a28	33 c0		 xor	 eax, eax
$LN345@parse_inte:
  03a2a	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  03a32	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  03a35	c1 e8 06	 shr	 eax, 6
  03a38	83 e0 01	 and	 eax, 1
  03a3b	85 c0		 test	 eax, eax
  03a3d	74 18		 je	 SHORT $LN346@parse_inte
  03a3f	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  03a47	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  03a4d	48 89 84 24 90
	02 00 00	 mov	 QWORD PTR tv2036[rsp], rax
  03a55	eb 16		 jmp	 SHORT $LN347@parse_inte
$LN346@parse_inte:
  03a57	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  03a5f	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  03a65	48 89 84 24 90
	02 00 00	 mov	 QWORD PTR tv2036[rsp], rax
$LN347@parse_inte:
  03a6d	48 8b 84 24 90
	02 00 00	 mov	 rax, QWORD PTR tv2036[rsp]
  03a75	48 89 84 24 98
	02 00 00	 mov	 QWORD PTR tv2045[rsp], rax
  03a7d	eb 45		 jmp	 SHORT $LN350@parse_inte
$LN349@parse_inte:
  03a7f	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  03a87	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  03a8f	75 1c		 jne	 SHORT $LN348@parse_inte
  03a91	41 b8 da 00 00
	00		 mov	 r8d, 218		; 000000daH
  03a97	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  03a9e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FM@MDFNAKJB@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc@
  03aa5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  03aab	33 c0		 xor	 eax, eax
$LN348@parse_inte:
  03aad	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  03ab5	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  03abc	48 89 84 24 98
	02 00 00	 mov	 QWORD PTR tv2045[rsp], rax
$LN350@parse_inte:
  03ac4	48 8b 84 24 98
	02 00 00	 mov	 rax, QWORD PTR tv2045[rsp]
  03acc	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pos$[rsp]
  03ad1	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  03ad5	89 84 24 a0 02
	00 00		 mov	 DWORD PTR tv2094[rsp], eax
  03adc	e9 69 01 00 00	 jmp	 $LN360@parse_inte
$LN359@parse_inte:
  03ae1	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  03ae9	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  03aed	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  03af3	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  03af8	85 c0		 test	 eax, eax
  03afa	75 1c		 jne	 SHORT $LN351@parse_inte
  03afc	41 b8 da 00 00
	00		 mov	 r8d, 218		; 000000daH
  03b02	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  03b09	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@BKHDOHOI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  03b10	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  03b16	33 c0		 xor	 eax, eax
$LN351@parse_inte:
  03b18	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  03b20	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  03b23	c1 e8 05	 shr	 eax, 5
  03b26	83 e0 01	 and	 eax, 1
  03b29	85 c0		 test	 eax, eax
  03b2b	0f 84 bd 00 00
	00		 je	 $LN357@parse_inte
  03b31	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  03b39	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  03b3d	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  03b43	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  03b48	85 c0		 test	 eax, eax
  03b4a	75 1c		 jne	 SHORT $LN352@parse_inte
  03b4c	41 b8 da 00 00
	00		 mov	 r8d, 218		; 000000daH
  03b52	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  03b59	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@BKHDOHOI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  03b60	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  03b66	33 c0		 xor	 eax, eax
$LN352@parse_inte:
  03b68	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  03b70	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  03b73	c1 e8 07	 shr	 eax, 7
  03b76	83 e0 01	 and	 eax, 1
  03b79	85 c0		 test	 eax, eax
  03b7b	75 1c		 jne	 SHORT $LN353@parse_inte
  03b7d	41 b8 da 00 00
	00		 mov	 r8d, 218		; 000000daH
  03b83	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  03b8a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@POFOFGEK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ@
  03b91	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  03b97	33 c0		 xor	 eax, eax
$LN353@parse_inte:
  03b99	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  03ba1	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  03ba4	c1 e8 06	 shr	 eax, 6
  03ba7	83 e0 01	 and	 eax, 1
  03baa	85 c0		 test	 eax, eax
  03bac	74 18		 je	 SHORT $LN354@parse_inte
  03bae	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  03bb6	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  03bbc	48 89 84 24 a8
	02 00 00	 mov	 QWORD PTR tv2082[rsp], rax
  03bc4	eb 16		 jmp	 SHORT $LN355@parse_inte
$LN354@parse_inte:
  03bc6	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  03bce	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  03bd4	48 89 84 24 a8
	02 00 00	 mov	 QWORD PTR tv2082[rsp], rax
$LN355@parse_inte:
  03bdc	48 8b 84 24 a8
	02 00 00	 mov	 rax, QWORD PTR tv2082[rsp]
  03be4	48 89 84 24 b0
	02 00 00	 mov	 QWORD PTR tv2091[rsp], rax
  03bec	eb 45		 jmp	 SHORT $LN358@parse_inte
$LN357@parse_inte:
  03bee	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  03bf6	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  03bfe	75 1c		 jne	 SHORT $LN356@parse_inte
  03c00	41 b8 da 00 00
	00		 mov	 r8d, 218		; 000000daH
  03c06	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  03c0d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FM@MDFNAKJB@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc@
  03c14	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  03c1a	33 c0		 xor	 eax, eax
$LN356@parse_inte:
  03c1c	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  03c24	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  03c2b	48 89 84 24 b0
	02 00 00	 mov	 QWORD PTR tv2091[rsp], rax
$LN358@parse_inte:
  03c33	48 8b 84 24 b0
	02 00 00	 mov	 rax, QWORD PTR tv2091[rsp]
  03c3b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pos$[rsp]
  03c40	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  03c43	89 84 24 a0 02
	00 00		 mov	 DWORD PTR tv2094[rsp], eax
$LN360@parse_inte:
  03c4a	8b 84 24 a0 02
	00 00		 mov	 eax, DWORD PTR tv2094[rsp]
  03c51	89 84 24 88 02
	00 00		 mov	 DWORD PTR tv2095[rsp], eax
$LN362@parse_inte:
  03c58	83 bc 24 88 02
	00 00 2c	 cmp	 DWORD PTR tv2095[rsp], 44 ; 0000002cH
  03c60	75 1c		 jne	 SHORT $LN11@parse_inte

; 219  :         format->thousands_separators = 1;

  03c62	48 8b 84 24 68
	03 00 00	 mov	 rax, QWORD PTR format$[rsp]
  03c6a	c7 40 18 01 00
	00 00		 mov	 DWORD PTR [rax+24], 1

; 220  :         ++pos;

  03c71	48 8b 44 24 30	 mov	 rax, QWORD PTR pos$[rsp]
  03c76	48 ff c0	 inc	 rax
  03c79	48 89 44 24 30	 mov	 QWORD PTR pos$[rsp], rax
$LN11@parse_inte:

; 221  :     }
; 222  : 
; 223  :     /* Parse field precision */
; 224  :     if (end-pos && READ_spec(pos) == '.') {

  03c7e	48 8b 44 24 30	 mov	 rax, QWORD PTR pos$[rsp]
  03c83	48 8b 8c 24 60
	03 00 00	 mov	 rcx, QWORD PTR end$[rsp]
  03c8b	48 2b c8	 sub	 rcx, rax
  03c8e	48 8b c1	 mov	 rax, rcx
  03c91	48 85 c0	 test	 rax, rax
  03c94	0f 84 3e 06 00
	00		 je	 $LN10@parse_inte
  03c9a	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  03ca2	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  03ca6	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  03cac	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  03cb1	85 c0		 test	 eax, eax
  03cb3	75 1c		 jne	 SHORT $LN363@parse_inte
  03cb5	41 b8 e0 00 00
	00		 mov	 r8d, 224		; 000000e0H
  03cbb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  03cc2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DK@JLLBFDEO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$AA@
  03cc9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  03ccf	33 c0		 xor	 eax, eax
$LN363@parse_inte:
  03cd1	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  03cd9	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  03cdc	c1 e8 07	 shr	 eax, 7
  03cdf	83 e0 01	 and	 eax, 1
  03ce2	85 c0		 test	 eax, eax
  03ce4	75 1c		 jne	 SHORT $LN364@parse_inte
  03ce6	41 b8 e0 00 00
	00		 mov	 r8d, 224		; 000000e0H
  03cec	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  03cf3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EA@DCIJOEKC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$AA@
  03cfa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  03d00	33 c0		 xor	 eax, eax
$LN364@parse_inte:
  03d02	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  03d0a	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  03d0e	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  03d14	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  03d19	85 c0		 test	 eax, eax
  03d1b	75 1c		 jne	 SHORT $LN365@parse_inte
  03d1d	41 b8 e0 00 00
	00		 mov	 r8d, 224		; 000000e0H
  03d23	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  03d2a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@BKHDOHOI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  03d31	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  03d37	33 c0		 xor	 eax, eax
$LN365@parse_inte:
  03d39	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  03d41	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  03d44	c1 e8 07	 shr	 eax, 7
  03d47	83 e0 01	 and	 eax, 1
  03d4a	85 c0		 test	 eax, eax
  03d4c	75 1c		 jne	 SHORT $LN366@parse_inte
  03d4e	41 b8 e0 00 00
	00		 mov	 r8d, 224		; 000000e0H
  03d54	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  03d5b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@POFOFGEK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ@
  03d62	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  03d68	33 c0		 xor	 eax, eax
$LN366@parse_inte:
  03d6a	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  03d72	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  03d75	c1 e8 02	 shr	 eax, 2
  03d78	83 e0 07	 and	 eax, 7
  03d7b	83 f8 01	 cmp	 eax, 1
  03d7e	0f 85 74 01 00
	00		 jne	 $LN395@parse_inte
  03d84	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  03d8c	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  03d90	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  03d96	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  03d9b	85 c0		 test	 eax, eax
  03d9d	75 1c		 jne	 SHORT $LN367@parse_inte
  03d9f	41 b8 e0 00 00
	00		 mov	 r8d, 224		; 000000e0H
  03da5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  03dac	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@BKHDOHOI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  03db3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  03db9	33 c0		 xor	 eax, eax
$LN367@parse_inte:
  03dbb	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  03dc3	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  03dc6	c1 e8 05	 shr	 eax, 5
  03dc9	83 e0 01	 and	 eax, 1
  03dcc	85 c0		 test	 eax, eax
  03dce	0f 84 bd 00 00
	00		 je	 $LN373@parse_inte
  03dd4	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  03ddc	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  03de0	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  03de6	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  03deb	85 c0		 test	 eax, eax
  03ded	75 1c		 jne	 SHORT $LN368@parse_inte
  03def	41 b8 e0 00 00
	00		 mov	 r8d, 224		; 000000e0H
  03df5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  03dfc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@BKHDOHOI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  03e03	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  03e09	33 c0		 xor	 eax, eax
$LN368@parse_inte:
  03e0b	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  03e13	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  03e16	c1 e8 07	 shr	 eax, 7
  03e19	83 e0 01	 and	 eax, 1
  03e1c	85 c0		 test	 eax, eax
  03e1e	75 1c		 jne	 SHORT $LN369@parse_inte
  03e20	41 b8 e0 00 00
	00		 mov	 r8d, 224		; 000000e0H
  03e26	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  03e2d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@POFOFGEK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ@
  03e34	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  03e3a	33 c0		 xor	 eax, eax
$LN369@parse_inte:
  03e3c	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  03e44	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  03e47	c1 e8 06	 shr	 eax, 6
  03e4a	83 e0 01	 and	 eax, 1
  03e4d	85 c0		 test	 eax, eax
  03e4f	74 18		 je	 SHORT $LN370@parse_inte
  03e51	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  03e59	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  03e5f	48 89 84 24 b8
	02 00 00	 mov	 QWORD PTR tv2170[rsp], rax
  03e67	eb 16		 jmp	 SHORT $LN371@parse_inte
$LN370@parse_inte:
  03e69	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  03e71	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  03e77	48 89 84 24 b8
	02 00 00	 mov	 QWORD PTR tv2170[rsp], rax
$LN371@parse_inte:
  03e7f	48 8b 84 24 b8
	02 00 00	 mov	 rax, QWORD PTR tv2170[rsp]
  03e87	48 89 84 24 c0
	02 00 00	 mov	 QWORD PTR tv2179[rsp], rax
  03e8f	eb 45		 jmp	 SHORT $LN374@parse_inte
$LN373@parse_inte:
  03e91	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  03e99	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  03ea1	75 1c		 jne	 SHORT $LN372@parse_inte
  03ea3	41 b8 e0 00 00
	00		 mov	 r8d, 224		; 000000e0H
  03ea9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  03eb0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FM@MDFNAKJB@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc@
  03eb7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  03ebd	33 c0		 xor	 eax, eax
$LN372@parse_inte:
  03ebf	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  03ec7	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  03ece	48 89 84 24 c0
	02 00 00	 mov	 QWORD PTR tv2179[rsp], rax
$LN374@parse_inte:
  03ed6	48 8b 44 24 30	 mov	 rax, QWORD PTR pos$[rsp]
  03edb	48 8b 8c 24 c0
	02 00 00	 mov	 rcx, QWORD PTR tv2179[rsp]
  03ee3	48 03 c8	 add	 rcx, rax
  03ee6	48 8b c1	 mov	 rax, rcx
  03ee9	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  03eec	89 84 24 c8 02
	00 00		 mov	 DWORD PTR tv2294[rsp], eax
  03ef3	e9 68 03 00 00	 jmp	 $LN396@parse_inte
$LN395@parse_inte:
  03ef8	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  03f00	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  03f04	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  03f0a	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  03f0f	85 c0		 test	 eax, eax
  03f11	75 1c		 jne	 SHORT $LN375@parse_inte
  03f13	41 b8 e0 00 00
	00		 mov	 r8d, 224		; 000000e0H
  03f19	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  03f20	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@BKHDOHOI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  03f27	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  03f2d	33 c0		 xor	 eax, eax
$LN375@parse_inte:
  03f2f	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  03f37	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  03f3a	c1 e8 07	 shr	 eax, 7
  03f3d	83 e0 01	 and	 eax, 1
  03f40	85 c0		 test	 eax, eax
  03f42	75 1c		 jne	 SHORT $LN376@parse_inte
  03f44	41 b8 e0 00 00
	00		 mov	 r8d, 224		; 000000e0H
  03f4a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  03f51	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@POFOFGEK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ@
  03f58	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  03f5e	33 c0		 xor	 eax, eax
$LN376@parse_inte:
  03f60	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  03f68	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  03f6b	c1 e8 02	 shr	 eax, 2
  03f6e	83 e0 07	 and	 eax, 7
  03f71	83 f8 02	 cmp	 eax, 2
  03f74	0f 85 6f 01 00
	00		 jne	 $LN393@parse_inte
  03f7a	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  03f82	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  03f86	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  03f8c	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  03f91	85 c0		 test	 eax, eax
  03f93	75 1c		 jne	 SHORT $LN377@parse_inte
  03f95	41 b8 e0 00 00
	00		 mov	 r8d, 224		; 000000e0H
  03f9b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  03fa2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@BKHDOHOI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  03fa9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  03faf	33 c0		 xor	 eax, eax
$LN377@parse_inte:
  03fb1	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  03fb9	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  03fbc	c1 e8 05	 shr	 eax, 5
  03fbf	83 e0 01	 and	 eax, 1
  03fc2	85 c0		 test	 eax, eax
  03fc4	0f 84 bd 00 00
	00		 je	 $LN383@parse_inte
  03fca	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  03fd2	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  03fd6	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  03fdc	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  03fe1	85 c0		 test	 eax, eax
  03fe3	75 1c		 jne	 SHORT $LN378@parse_inte
  03fe5	41 b8 e0 00 00
	00		 mov	 r8d, 224		; 000000e0H
  03feb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  03ff2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@BKHDOHOI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  03ff9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  03fff	33 c0		 xor	 eax, eax
$LN378@parse_inte:
  04001	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  04009	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0400c	c1 e8 07	 shr	 eax, 7
  0400f	83 e0 01	 and	 eax, 1
  04012	85 c0		 test	 eax, eax
  04014	75 1c		 jne	 SHORT $LN379@parse_inte
  04016	41 b8 e0 00 00
	00		 mov	 r8d, 224		; 000000e0H
  0401c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  04023	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@POFOFGEK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ@
  0402a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  04030	33 c0		 xor	 eax, eax
$LN379@parse_inte:
  04032	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  0403a	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0403d	c1 e8 06	 shr	 eax, 6
  04040	83 e0 01	 and	 eax, 1
  04043	85 c0		 test	 eax, eax
  04045	74 18		 je	 SHORT $LN380@parse_inte
  04047	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  0404f	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  04055	48 89 84 24 d0
	02 00 00	 mov	 QWORD PTR tv2235[rsp], rax
  0405d	eb 16		 jmp	 SHORT $LN381@parse_inte
$LN380@parse_inte:
  0405f	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  04067	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  0406d	48 89 84 24 d0
	02 00 00	 mov	 QWORD PTR tv2235[rsp], rax
$LN381@parse_inte:
  04075	48 8b 84 24 d0
	02 00 00	 mov	 rax, QWORD PTR tv2235[rsp]
  0407d	48 89 84 24 d8
	02 00 00	 mov	 QWORD PTR tv2244[rsp], rax
  04085	eb 45		 jmp	 SHORT $LN384@parse_inte
$LN383@parse_inte:
  04087	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  0408f	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  04097	75 1c		 jne	 SHORT $LN382@parse_inte
  04099	41 b8 e0 00 00
	00		 mov	 r8d, 224		; 000000e0H
  0409f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  040a6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FM@MDFNAKJB@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc@
  040ad	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  040b3	33 c0		 xor	 eax, eax
$LN382@parse_inte:
  040b5	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  040bd	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  040c4	48 89 84 24 d8
	02 00 00	 mov	 QWORD PTR tv2244[rsp], rax
$LN384@parse_inte:
  040cc	48 8b 84 24 d8
	02 00 00	 mov	 rax, QWORD PTR tv2244[rsp]
  040d4	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pos$[rsp]
  040d9	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  040dd	89 84 24 e0 02
	00 00		 mov	 DWORD PTR tv2293[rsp], eax
  040e4	e9 69 01 00 00	 jmp	 $LN394@parse_inte
$LN393@parse_inte:
  040e9	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  040f1	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  040f5	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  040fb	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  04100	85 c0		 test	 eax, eax
  04102	75 1c		 jne	 SHORT $LN385@parse_inte
  04104	41 b8 e0 00 00
	00		 mov	 r8d, 224		; 000000e0H
  0410a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  04111	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@BKHDOHOI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  04118	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0411e	33 c0		 xor	 eax, eax
$LN385@parse_inte:
  04120	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  04128	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0412b	c1 e8 05	 shr	 eax, 5
  0412e	83 e0 01	 and	 eax, 1
  04131	85 c0		 test	 eax, eax
  04133	0f 84 bd 00 00
	00		 je	 $LN391@parse_inte
  04139	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  04141	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  04145	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0414b	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  04150	85 c0		 test	 eax, eax
  04152	75 1c		 jne	 SHORT $LN386@parse_inte
  04154	41 b8 e0 00 00
	00		 mov	 r8d, 224		; 000000e0H
  0415a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  04161	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@BKHDOHOI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  04168	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0416e	33 c0		 xor	 eax, eax
$LN386@parse_inte:
  04170	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  04178	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0417b	c1 e8 07	 shr	 eax, 7
  0417e	83 e0 01	 and	 eax, 1
  04181	85 c0		 test	 eax, eax
  04183	75 1c		 jne	 SHORT $LN387@parse_inte
  04185	41 b8 e0 00 00
	00		 mov	 r8d, 224		; 000000e0H
  0418b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  04192	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@POFOFGEK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ@
  04199	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0419f	33 c0		 xor	 eax, eax
$LN387@parse_inte:
  041a1	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  041a9	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  041ac	c1 e8 06	 shr	 eax, 6
  041af	83 e0 01	 and	 eax, 1
  041b2	85 c0		 test	 eax, eax
  041b4	74 18		 je	 SHORT $LN388@parse_inte
  041b6	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  041be	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  041c4	48 89 84 24 e8
	02 00 00	 mov	 QWORD PTR tv2281[rsp], rax
  041cc	eb 16		 jmp	 SHORT $LN389@parse_inte
$LN388@parse_inte:
  041ce	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  041d6	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  041dc	48 89 84 24 e8
	02 00 00	 mov	 QWORD PTR tv2281[rsp], rax
$LN389@parse_inte:
  041e4	48 8b 84 24 e8
	02 00 00	 mov	 rax, QWORD PTR tv2281[rsp]
  041ec	48 89 84 24 f0
	02 00 00	 mov	 QWORD PTR tv2290[rsp], rax
  041f4	eb 45		 jmp	 SHORT $LN392@parse_inte
$LN391@parse_inte:
  041f6	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  041fe	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  04206	75 1c		 jne	 SHORT $LN390@parse_inte
  04208	41 b8 e0 00 00
	00		 mov	 r8d, 224		; 000000e0H
  0420e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  04215	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FM@MDFNAKJB@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc@
  0421c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  04222	33 c0		 xor	 eax, eax
$LN390@parse_inte:
  04224	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  0422c	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  04233	48 89 84 24 f0
	02 00 00	 mov	 QWORD PTR tv2290[rsp], rax
$LN392@parse_inte:
  0423b	48 8b 84 24 f0
	02 00 00	 mov	 rax, QWORD PTR tv2290[rsp]
  04243	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pos$[rsp]
  04248	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  0424b	89 84 24 e0 02
	00 00		 mov	 DWORD PTR tv2293[rsp], eax
$LN394@parse_inte:
  04252	8b 84 24 e0 02
	00 00		 mov	 eax, DWORD PTR tv2293[rsp]
  04259	89 84 24 c8 02
	00 00		 mov	 DWORD PTR tv2294[rsp], eax
$LN396@parse_inte:
  04260	83 bc 24 c8 02
	00 00 2e	 cmp	 DWORD PTR tv2294[rsp], 46 ; 0000002eH
  04268	75 6e		 jne	 SHORT $LN10@parse_inte

; 225  :         ++pos;

  0426a	48 8b 44 24 30	 mov	 rax, QWORD PTR pos$[rsp]
  0426f	48 ff c0	 inc	 rax
  04272	48 89 44 24 30	 mov	 QWORD PTR pos$[rsp], rax

; 226  : 
; 227  :         consumed = get_integer(format_spec, &pos, end, &format->precision);

  04277	48 8b 84 24 68
	03 00 00	 mov	 rax, QWORD PTR format$[rsp]
  0427f	48 83 c0 20	 add	 rax, 32			; 00000020H
  04283	4c 8b c8	 mov	 r9, rax
  04286	4c 8b 84 24 60
	03 00 00	 mov	 r8, QWORD PTR end$[rsp]
  0428e	48 8d 54 24 30	 lea	 rdx, QWORD PTR pos$[rsp]
  04293	48 8b 8c 24 50
	03 00 00	 mov	 rcx, QWORD PTR format_spec$[rsp]
  0429b	e8 00 00 00 00	 call	 get_integer
  042a0	48 98		 cdqe
  042a2	48 89 44 24 28	 mov	 QWORD PTR consumed$[rsp], rax

; 228  :         if (consumed == -1)

  042a7	48 83 7c 24 28
	ff		 cmp	 QWORD PTR consumed$[rsp], -1
  042ad	75 07		 jne	 SHORT $LN9@parse_inte

; 229  :             /* Overflow error. Exception already set. */
; 230  :             return 0;

  042af	33 c0		 xor	 eax, eax
  042b1	e9 12 07 00 00	 jmp	 $LN21@parse_inte
$LN9@parse_inte:

; 231  : 
; 232  :         /* Not having a precision after a dot is an error. */
; 233  :         if (consumed == 0) {

  042b6	48 83 7c 24 28
	00		 cmp	 QWORD PTR consumed$[rsp], 0
  042bc	75 1a		 jne	 SHORT $LN8@parse_inte

; 234  :             PyErr_Format(PyExc_ValueError,
; 235  :                          "Format specifier missing precision");

  042be	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@POOGFIMB@Format?5specifier?5missing?5precisi@
  042c5	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  042cc	e8 00 00 00 00	 call	 PyErr_Format

; 236  :             return 0;

  042d1	33 c0		 xor	 eax, eax
  042d3	e9 f0 06 00 00	 jmp	 $LN21@parse_inte
$LN8@parse_inte:
$LN10@parse_inte:

; 237  :         }
; 238  : 
; 239  :     }
; 240  : 
; 241  :     /* Finally, parse the type field. */
; 242  : 
; 243  :     if (end-pos > 1) {

  042d8	48 8b 44 24 30	 mov	 rax, QWORD PTR pos$[rsp]
  042dd	48 8b 8c 24 60
	03 00 00	 mov	 rcx, QWORD PTR end$[rsp]
  042e5	48 2b c8	 sub	 rcx, rax
  042e8	48 8b c1	 mov	 rax, rcx
  042eb	48 83 f8 01	 cmp	 rax, 1
  042ef	7e 1a		 jle	 SHORT $LN7@parse_inte

; 244  :         /* More than one char remain, invalid format specifier. */
; 245  :         PyErr_Format(PyExc_ValueError, "Invalid format specifier");

  042f1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@BLPJLLHL@Invalid?5format?5specifier?$AA@
  042f8	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  042ff	e8 00 00 00 00	 call	 PyErr_Format

; 246  :         return 0;

  04304	33 c0		 xor	 eax, eax
  04306	e9 bd 06 00 00	 jmp	 $LN21@parse_inte
$LN7@parse_inte:

; 247  :     }
; 248  : 
; 249  :     if (end-pos == 1) {

  0430b	48 8b 44 24 30	 mov	 rax, QWORD PTR pos$[rsp]
  04310	48 8b 8c 24 60
	03 00 00	 mov	 rcx, QWORD PTR end$[rsp]
  04318	48 2b c8	 sub	 rcx, rax
  0431b	48 8b c1	 mov	 rax, rcx
  0431e	48 83 f8 01	 cmp	 rax, 1
  04322	0f 85 e5 05 00
	00		 jne	 $LN6@parse_inte

; 250  :         format->type = READ_spec(pos);

  04328	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  04330	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  04334	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0433a	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0433f	85 c0		 test	 eax, eax
  04341	75 1c		 jne	 SHORT $LN397@parse_inte
  04343	41 b8 fa 00 00
	00		 mov	 r8d, 250		; 000000faH
  04349	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  04350	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DK@JLLBFDEO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$AA@
  04357	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0435d	33 c0		 xor	 eax, eax
$LN397@parse_inte:
  0435f	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  04367	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0436a	c1 e8 07	 shr	 eax, 7
  0436d	83 e0 01	 and	 eax, 1
  04370	85 c0		 test	 eax, eax
  04372	75 1c		 jne	 SHORT $LN398@parse_inte
  04374	41 b8 fa 00 00
	00		 mov	 r8d, 250		; 000000faH
  0437a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  04381	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EA@DCIJOEKC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$AA@
  04388	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0438e	33 c0		 xor	 eax, eax
$LN398@parse_inte:
  04390	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  04398	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0439c	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  043a2	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  043a7	85 c0		 test	 eax, eax
  043a9	75 1c		 jne	 SHORT $LN399@parse_inte
  043ab	41 b8 fa 00 00
	00		 mov	 r8d, 250		; 000000faH
  043b1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  043b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@BKHDOHOI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  043bf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  043c5	33 c0		 xor	 eax, eax
$LN399@parse_inte:
  043c7	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  043cf	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  043d2	c1 e8 07	 shr	 eax, 7
  043d5	83 e0 01	 and	 eax, 1
  043d8	85 c0		 test	 eax, eax
  043da	75 1c		 jne	 SHORT $LN400@parse_inte
  043dc	41 b8 fa 00 00
	00		 mov	 r8d, 250		; 000000faH
  043e2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  043e9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@POFOFGEK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ@
  043f0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  043f6	33 c0		 xor	 eax, eax
$LN400@parse_inte:
  043f8	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  04400	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  04403	c1 e8 02	 shr	 eax, 2
  04406	83 e0 07	 and	 eax, 7
  04409	83 f8 01	 cmp	 eax, 1
  0440c	0f 85 74 01 00
	00		 jne	 $LN429@parse_inte
  04412	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  0441a	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0441e	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  04424	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  04429	85 c0		 test	 eax, eax
  0442b	75 1c		 jne	 SHORT $LN401@parse_inte
  0442d	41 b8 fa 00 00
	00		 mov	 r8d, 250		; 000000faH
  04433	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  0443a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@BKHDOHOI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  04441	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  04447	33 c0		 xor	 eax, eax
$LN401@parse_inte:
  04449	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  04451	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  04454	c1 e8 05	 shr	 eax, 5
  04457	83 e0 01	 and	 eax, 1
  0445a	85 c0		 test	 eax, eax
  0445c	0f 84 bd 00 00
	00		 je	 $LN407@parse_inte
  04462	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  0446a	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0446e	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  04474	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  04479	85 c0		 test	 eax, eax
  0447b	75 1c		 jne	 SHORT $LN402@parse_inte
  0447d	41 b8 fa 00 00
	00		 mov	 r8d, 250		; 000000faH
  04483	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  0448a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@BKHDOHOI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  04491	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  04497	33 c0		 xor	 eax, eax
$LN402@parse_inte:
  04499	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  044a1	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  044a4	c1 e8 07	 shr	 eax, 7
  044a7	83 e0 01	 and	 eax, 1
  044aa	85 c0		 test	 eax, eax
  044ac	75 1c		 jne	 SHORT $LN403@parse_inte
  044ae	41 b8 fa 00 00
	00		 mov	 r8d, 250		; 000000faH
  044b4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  044bb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@POFOFGEK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ@
  044c2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  044c8	33 c0		 xor	 eax, eax
$LN403@parse_inte:
  044ca	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  044d2	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  044d5	c1 e8 06	 shr	 eax, 6
  044d8	83 e0 01	 and	 eax, 1
  044db	85 c0		 test	 eax, eax
  044dd	74 18		 je	 SHORT $LN404@parse_inte
  044df	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  044e7	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  044ed	48 89 84 24 f8
	02 00 00	 mov	 QWORD PTR tv2384[rsp], rax
  044f5	eb 16		 jmp	 SHORT $LN405@parse_inte
$LN404@parse_inte:
  044f7	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  044ff	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  04505	48 89 84 24 f8
	02 00 00	 mov	 QWORD PTR tv2384[rsp], rax
$LN405@parse_inte:
  0450d	48 8b 84 24 f8
	02 00 00	 mov	 rax, QWORD PTR tv2384[rsp]
  04515	48 89 84 24 00
	03 00 00	 mov	 QWORD PTR tv2393[rsp], rax
  0451d	eb 45		 jmp	 SHORT $LN408@parse_inte
$LN407@parse_inte:
  0451f	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  04527	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  0452f	75 1c		 jne	 SHORT $LN406@parse_inte
  04531	41 b8 fa 00 00
	00		 mov	 r8d, 250		; 000000faH
  04537	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  0453e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FM@MDFNAKJB@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc@
  04545	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0454b	33 c0		 xor	 eax, eax
$LN406@parse_inte:
  0454d	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  04555	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  0455c	48 89 84 24 00
	03 00 00	 mov	 QWORD PTR tv2393[rsp], rax
$LN408@parse_inte:
  04564	48 8b 44 24 30	 mov	 rax, QWORD PTR pos$[rsp]
  04569	48 8b 8c 24 00
	03 00 00	 mov	 rcx, QWORD PTR tv2393[rsp]
  04571	48 03 c8	 add	 rcx, rax
  04574	48 8b c1	 mov	 rax, rcx
  04577	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0457a	89 84 24 08 03
	00 00		 mov	 DWORD PTR tv2508[rsp], eax
  04581	e9 68 03 00 00	 jmp	 $LN430@parse_inte
$LN429@parse_inte:
  04586	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  0458e	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  04592	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  04598	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0459d	85 c0		 test	 eax, eax
  0459f	75 1c		 jne	 SHORT $LN409@parse_inte
  045a1	41 b8 fa 00 00
	00		 mov	 r8d, 250		; 000000faH
  045a7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  045ae	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@BKHDOHOI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  045b5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  045bb	33 c0		 xor	 eax, eax
$LN409@parse_inte:
  045bd	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  045c5	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  045c8	c1 e8 07	 shr	 eax, 7
  045cb	83 e0 01	 and	 eax, 1
  045ce	85 c0		 test	 eax, eax
  045d0	75 1c		 jne	 SHORT $LN410@parse_inte
  045d2	41 b8 fa 00 00
	00		 mov	 r8d, 250		; 000000faH
  045d8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  045df	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@POFOFGEK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ@
  045e6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  045ec	33 c0		 xor	 eax, eax
$LN410@parse_inte:
  045ee	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  045f6	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  045f9	c1 e8 02	 shr	 eax, 2
  045fc	83 e0 07	 and	 eax, 7
  045ff	83 f8 02	 cmp	 eax, 2
  04602	0f 85 6f 01 00
	00		 jne	 $LN427@parse_inte
  04608	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  04610	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  04614	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0461a	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0461f	85 c0		 test	 eax, eax
  04621	75 1c		 jne	 SHORT $LN411@parse_inte
  04623	41 b8 fa 00 00
	00		 mov	 r8d, 250		; 000000faH
  04629	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  04630	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@BKHDOHOI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  04637	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0463d	33 c0		 xor	 eax, eax
$LN411@parse_inte:
  0463f	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  04647	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0464a	c1 e8 05	 shr	 eax, 5
  0464d	83 e0 01	 and	 eax, 1
  04650	85 c0		 test	 eax, eax
  04652	0f 84 bd 00 00
	00		 je	 $LN417@parse_inte
  04658	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  04660	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  04664	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0466a	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0466f	85 c0		 test	 eax, eax
  04671	75 1c		 jne	 SHORT $LN412@parse_inte
  04673	41 b8 fa 00 00
	00		 mov	 r8d, 250		; 000000faH
  04679	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  04680	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@BKHDOHOI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  04687	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0468d	33 c0		 xor	 eax, eax
$LN412@parse_inte:
  0468f	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  04697	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0469a	c1 e8 07	 shr	 eax, 7
  0469d	83 e0 01	 and	 eax, 1
  046a0	85 c0		 test	 eax, eax
  046a2	75 1c		 jne	 SHORT $LN413@parse_inte
  046a4	41 b8 fa 00 00
	00		 mov	 r8d, 250		; 000000faH
  046aa	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  046b1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@POFOFGEK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ@
  046b8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  046be	33 c0		 xor	 eax, eax
$LN413@parse_inte:
  046c0	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  046c8	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  046cb	c1 e8 06	 shr	 eax, 6
  046ce	83 e0 01	 and	 eax, 1
  046d1	85 c0		 test	 eax, eax
  046d3	74 18		 je	 SHORT $LN414@parse_inte
  046d5	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  046dd	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  046e3	48 89 84 24 10
	03 00 00	 mov	 QWORD PTR tv2449[rsp], rax
  046eb	eb 16		 jmp	 SHORT $LN415@parse_inte
$LN414@parse_inte:
  046ed	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  046f5	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  046fb	48 89 84 24 10
	03 00 00	 mov	 QWORD PTR tv2449[rsp], rax
$LN415@parse_inte:
  04703	48 8b 84 24 10
	03 00 00	 mov	 rax, QWORD PTR tv2449[rsp]
  0470b	48 89 84 24 18
	03 00 00	 mov	 QWORD PTR tv2458[rsp], rax
  04713	eb 45		 jmp	 SHORT $LN418@parse_inte
$LN417@parse_inte:
  04715	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  0471d	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  04725	75 1c		 jne	 SHORT $LN416@parse_inte
  04727	41 b8 fa 00 00
	00		 mov	 r8d, 250		; 000000faH
  0472d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  04734	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FM@MDFNAKJB@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc@
  0473b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  04741	33 c0		 xor	 eax, eax
$LN416@parse_inte:
  04743	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  0474b	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  04752	48 89 84 24 18
	03 00 00	 mov	 QWORD PTR tv2458[rsp], rax
$LN418@parse_inte:
  0475a	48 8b 84 24 18
	03 00 00	 mov	 rax, QWORD PTR tv2458[rsp]
  04762	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pos$[rsp]
  04767	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  0476b	89 84 24 20 03
	00 00		 mov	 DWORD PTR tv2507[rsp], eax
  04772	e9 69 01 00 00	 jmp	 $LN428@parse_inte
$LN427@parse_inte:
  04777	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  0477f	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  04783	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  04789	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0478e	85 c0		 test	 eax, eax
  04790	75 1c		 jne	 SHORT $LN419@parse_inte
  04792	41 b8 fa 00 00
	00		 mov	 r8d, 250		; 000000faH
  04798	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  0479f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@BKHDOHOI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  047a6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  047ac	33 c0		 xor	 eax, eax
$LN419@parse_inte:
  047ae	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  047b6	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  047b9	c1 e8 05	 shr	 eax, 5
  047bc	83 e0 01	 and	 eax, 1
  047bf	85 c0		 test	 eax, eax
  047c1	0f 84 bd 00 00
	00		 je	 $LN425@parse_inte
  047c7	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  047cf	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  047d3	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  047d9	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  047de	85 c0		 test	 eax, eax
  047e0	75 1c		 jne	 SHORT $LN420@parse_inte
  047e2	41 b8 fa 00 00
	00		 mov	 r8d, 250		; 000000faH
  047e8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  047ef	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@BKHDOHOI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ?$AA?$CJ?$AA?$AA@
  047f6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  047fc	33 c0		 xor	 eax, eax
$LN420@parse_inte:
  047fe	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  04806	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  04809	c1 e8 07	 shr	 eax, 7
  0480c	83 e0 01	 and	 eax, 1
  0480f	85 c0		 test	 eax, eax
  04811	75 1c		 jne	 SHORT $LN421@parse_inte
  04813	41 b8 fa 00 00
	00		 mov	 r8d, 250		; 000000faH
  04819	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  04820	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@POFOFGEK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc?$AA?$CJ@
  04827	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0482d	33 c0		 xor	 eax, eax
$LN421@parse_inte:
  0482f	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  04837	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0483a	c1 e8 06	 shr	 eax, 6
  0483d	83 e0 01	 and	 eax, 1
  04840	85 c0		 test	 eax, eax
  04842	74 18		 je	 SHORT $LN422@parse_inte
  04844	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  0484c	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  04852	48 89 84 24 28
	03 00 00	 mov	 QWORD PTR tv2495[rsp], rax
  0485a	eb 16		 jmp	 SHORT $LN423@parse_inte
$LN422@parse_inte:
  0485c	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  04864	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  0486a	48 89 84 24 28
	03 00 00	 mov	 QWORD PTR tv2495[rsp], rax
$LN423@parse_inte:
  04872	48 8b 84 24 28
	03 00 00	 mov	 rax, QWORD PTR tv2495[rsp]
  0487a	48 89 84 24 30
	03 00 00	 mov	 QWORD PTR tv2504[rsp], rax
  04882	eb 45		 jmp	 SHORT $LN426@parse_inte
$LN425@parse_inte:
  04884	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  0488c	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  04894	75 1c		 jne	 SHORT $LN424@parse_inte
  04896	41 b8 fa 00 00
	00		 mov	 r8d, 250		; 000000faH
  0489c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  048a3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FM@MDFNAKJB@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA_?$AAs?$AAp?$AAe?$AAc@
  048aa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  048b0	33 c0		 xor	 eax, eax
$LN424@parse_inte:
  048b2	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR format_spec$[rsp]
  048ba	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  048c1	48 89 84 24 30
	03 00 00	 mov	 QWORD PTR tv2504[rsp], rax
$LN426@parse_inte:
  048c9	48 8b 84 24 30
	03 00 00	 mov	 rax, QWORD PTR tv2504[rsp]
  048d1	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pos$[rsp]
  048d6	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  048d9	89 84 24 20 03
	00 00		 mov	 DWORD PTR tv2507[rsp], eax
$LN428@parse_inte:
  048e0	8b 84 24 20 03
	00 00		 mov	 eax, DWORD PTR tv2507[rsp]
  048e7	89 84 24 08 03
	00 00		 mov	 DWORD PTR tv2508[rsp], eax
$LN430@parse_inte:
  048ee	48 8b 84 24 68
	03 00 00	 mov	 rax, QWORD PTR format$[rsp]
  048f6	8b 8c 24 08 03
	00 00		 mov	 ecx, DWORD PTR tv2508[rsp]
  048fd	89 48 28	 mov	 DWORD PTR [rax+40], ecx

; 251  :         ++pos;

  04900	48 8b 44 24 30	 mov	 rax, QWORD PTR pos$[rsp]
  04905	48 ff c0	 inc	 rax
  04908	48 89 44 24 30	 mov	 QWORD PTR pos$[rsp], rax
$LN6@parse_inte:

; 252  :     }
; 253  : 
; 254  :     /* Do as much validating as we can, just by looking at the format
; 255  :        specifier.  Do not take into account what type of formatting
; 256  :        we're doing (int, float, string). */
; 257  : 
; 258  :     if (format->thousands_separators) {

  0490d	48 8b 84 24 68
	03 00 00	 mov	 rax, QWORD PTR format$[rsp]
  04915	83 78 18 00	 cmp	 DWORD PTR [rax+24], 0
  04919	74 54		 je	 SHORT $LN5@parse_inte

; 259  :         switch (format->type) {

  0491b	48 8b 84 24 68
	03 00 00	 mov	 rax, QWORD PTR format$[rsp]
  04923	8b 40 28	 mov	 eax, DWORD PTR [rax+40]
  04926	89 84 24 38 03
	00 00		 mov	 DWORD PTR tv2513[rsp], eax
  0492d	83 bc 24 38 03
	00 00 67	 cmp	 DWORD PTR tv2513[rsp], 103 ; 00000067H
  04935	77 24		 ja	 SHORT $LN1@parse_inte
  04937	8b 84 24 38 03
	00 00		 mov	 eax, DWORD PTR tv2513[rsp]
  0493e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  04945	0f b6 84 01 00
	00 00 00	 movzx	 eax, BYTE PTR $LN433@parse_inte[rcx+rax]
  0494d	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN434@parse_inte[rcx+rax*4]
  04954	48 03 c1	 add	 rax, rcx
  04957	ff e0		 jmp	 rax
$LN2@parse_inte:

; 260  :         case 'd':
; 261  :         case 'e':
; 262  :         case 'f':
; 263  :         case 'g':
; 264  :         case 'E':
; 265  :         case 'G':
; 266  :         case '%':
; 267  :         case 'F':
; 268  :         case '\0':
; 269  :             /* These are allowed. See PEP 378.*/
; 270  :             break;

  04959	eb 14		 jmp	 SHORT $LN3@parse_inte
$LN1@parse_inte:

; 271  :         default:
; 272  :             invalid_comma_type(format->type);

  0495b	48 8b 84 24 68
	03 00 00	 mov	 rax, QWORD PTR format$[rsp]
  04963	8b 48 28	 mov	 ecx, DWORD PTR [rax+40]
  04966	e8 00 00 00 00	 call	 invalid_comma_type

; 273  :             return 0;

  0496b	33 c0		 xor	 eax, eax
  0496d	eb 59		 jmp	 SHORT $LN21@parse_inte
$LN3@parse_inte:
$LN5@parse_inte:

; 274  :         }
; 275  :     }
; 276  : 
; 277  :     assert (format->align <= 127);

  0496f	48 8b 84 24 68
	03 00 00	 mov	 rax, QWORD PTR format$[rsp]
  04977	83 78 04 7f	 cmp	 DWORD PTR [rax+4], 127	; 0000007fH
  0497b	76 1c		 jbe	 SHORT $LN431@parse_inte
  0497d	41 b8 15 01 00
	00		 mov	 r8d, 277		; 00000115H
  04983	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  0498a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@JJLKBJED@?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA?9?$AA?$DO?$AAa?$AAl?$AAi?$AAg?$AAn?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA1?$AA2?$AA7?$AA?$AA@
  04991	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  04997	33 c0		 xor	 eax, eax
$LN431@parse_inte:

; 278  :     assert (format->sign <= 127);

  04999	48 8b 84 24 68
	03 00 00	 mov	 rax, QWORD PTR format$[rsp]
  049a1	83 78 0c 7f	 cmp	 DWORD PTR [rax+12], 127	; 0000007fH
  049a5	76 1c		 jbe	 SHORT $LN432@parse_inte
  049a7	41 b8 16 01 00
	00		 mov	 r8d, 278		; 00000116H
  049ad	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  049b4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CI@LILDMCLK@?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AA?9?$AA?$DO?$AAs?$AAi?$AAg?$AAn?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA1?$AA2?$AA7?$AA?$AA@
  049bb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  049c1	33 c0		 xor	 eax, eax
$LN432@parse_inte:

; 279  :     return 1;

  049c3	b8 01 00 00 00	 mov	 eax, 1
$LN21@parse_inte:

; 280  : }

  049c8	48 81 c4 48 03
	00 00		 add	 rsp, 840		; 00000348H
  049cf	c3		 ret	 0
$LN434@parse_inte:
  049d0	00 00 00 00	 DD	 $LN2@parse_inte
  049d4	00 00 00 00	 DD	 $LN1@parse_inte
$LN433@parse_inte:
  049d8	00		 DB	 0
  049d9	01		 DB	 1
  049da	01		 DB	 1
  049db	01		 DB	 1
  049dc	01		 DB	 1
  049dd	01		 DB	 1
  049de	01		 DB	 1
  049df	01		 DB	 1
  049e0	01		 DB	 1
  049e1	01		 DB	 1
  049e2	01		 DB	 1
  049e3	01		 DB	 1
  049e4	01		 DB	 1
  049e5	01		 DB	 1
  049e6	01		 DB	 1
  049e7	01		 DB	 1
  049e8	01		 DB	 1
  049e9	01		 DB	 1
  049ea	01		 DB	 1
  049eb	01		 DB	 1
  049ec	01		 DB	 1
  049ed	01		 DB	 1
  049ee	01		 DB	 1
  049ef	01		 DB	 1
  049f0	01		 DB	 1
  049f1	01		 DB	 1
  049f2	01		 DB	 1
  049f3	01		 DB	 1
  049f4	01		 DB	 1
  049f5	01		 DB	 1
  049f6	01		 DB	 1
  049f7	01		 DB	 1
  049f8	01		 DB	 1
  049f9	01		 DB	 1
  049fa	01		 DB	 1
  049fb	01		 DB	 1
  049fc	01		 DB	 1
  049fd	00		 DB	 0
  049fe	01		 DB	 1
  049ff	01		 DB	 1
  04a00	01		 DB	 1
  04a01	01		 DB	 1
  04a02	01		 DB	 1
  04a03	01		 DB	 1
  04a04	01		 DB	 1
  04a05	01		 DB	 1
  04a06	01		 DB	 1
  04a07	01		 DB	 1
  04a08	01		 DB	 1
  04a09	01		 DB	 1
  04a0a	01		 DB	 1
  04a0b	01		 DB	 1
  04a0c	01		 DB	 1
  04a0d	01		 DB	 1
  04a0e	01		 DB	 1
  04a0f	01		 DB	 1
  04a10	01		 DB	 1
  04a11	01		 DB	 1
  04a12	01		 DB	 1
  04a13	01		 DB	 1
  04a14	01		 DB	 1
  04a15	01		 DB	 1
  04a16	01		 DB	 1
  04a17	01		 DB	 1
  04a18	01		 DB	 1
  04a19	01		 DB	 1
  04a1a	01		 DB	 1
  04a1b	01		 DB	 1
  04a1c	01		 DB	 1
  04a1d	00		 DB	 0
  04a1e	00		 DB	 0
  04a1f	00		 DB	 0
  04a20	01		 DB	 1
  04a21	01		 DB	 1
  04a22	01		 DB	 1
  04a23	01		 DB	 1
  04a24	01		 DB	 1
  04a25	01		 DB	 1
  04a26	01		 DB	 1
  04a27	01		 DB	 1
  04a28	01		 DB	 1
  04a29	01		 DB	 1
  04a2a	01		 DB	 1
  04a2b	01		 DB	 1
  04a2c	01		 DB	 1
  04a2d	01		 DB	 1
  04a2e	01		 DB	 1
  04a2f	01		 DB	 1
  04a30	01		 DB	 1
  04a31	01		 DB	 1
  04a32	01		 DB	 1
  04a33	01		 DB	 1
  04a34	01		 DB	 1
  04a35	01		 DB	 1
  04a36	01		 DB	 1
  04a37	01		 DB	 1
  04a38	01		 DB	 1
  04a39	01		 DB	 1
  04a3a	01		 DB	 1
  04a3b	01		 DB	 1
  04a3c	00		 DB	 0
  04a3d	00		 DB	 0
  04a3e	00		 DB	 0
  04a3f	00		 DB	 0
parse_internal_render_format_spec ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CA@KFPPEOBD@Cannot?5specify?5?8?0?8?5with?5?8?2x?$CFx?8?4?$AA@ ; `string'
PUBLIC	??_C@_0BO@MNAJLJIO@Cannot?5specify?5?8?0?8?5with?5?8?$CFc?8?4?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$invalid_comma_type DD imagerel invalid_comma_type
	DD	imagerel invalid_comma_type+83
	DD	imagerel $unwind$invalid_comma_type
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$invalid_comma_type DD 010801H
	DD	04208H
xdata	ENDS
;	COMDAT ??_C@_0CA@KFPPEOBD@Cannot?5specify?5?8?0?8?5with?5?8?2x?$CFx?8?4?$AA@
CONST	SEGMENT
??_C@_0CA@KFPPEOBD@Cannot?5specify?5?8?0?8?5with?5?8?2x?$CFx?8?4?$AA@ DB 'C'
	DB	'annot specify '','' with ''\x%x''.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@MNAJLJIO@Cannot?5specify?5?8?0?8?5with?5?8?$CFc?8?4?$AA@
CONST	SEGMENT
??_C@_0BO@MNAJLJIO@Cannot?5specify?5?8?0?8?5with?5?8?$CFc?8?4?$AA@ DB 'Ca'
	DB	'nnot specify '','' with ''%c''.', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT invalid_comma_type
_TEXT	SEGMENT
presentation_type$ = 48
invalid_comma_type PROC					; COMDAT

; 32   : {

  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 33   :     if (presentation_type > 32 && presentation_type < 128)

  00008	83 7c 24 30 20	 cmp	 DWORD PTR presentation_type$[rsp], 32 ; 00000020H
  0000d	76 27		 jbe	 SHORT $LN2@invalid_co
  0000f	81 7c 24 30 80
	00 00 00	 cmp	 DWORD PTR presentation_type$[rsp], 128 ; 00000080H
  00017	73 1d		 jae	 SHORT $LN2@invalid_co

; 34   :         PyErr_Format(PyExc_ValueError,
; 35   :                      "Cannot specify ',' with '%c'.",
; 36   :                      (char)presentation_type);

  00019	0f be 44 24 30	 movsx	 eax, BYTE PTR presentation_type$[rsp]
  0001e	44 8b c0	 mov	 r8d, eax
  00021	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BO@MNAJLJIO@Cannot?5specify?5?8?0?8?5with?5?8?$CFc?8?4?$AA@
  00028	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0002f	e8 00 00 00 00	 call	 PyErr_Format

; 37   :     else

  00034	eb 18		 jmp	 SHORT $LN1@invalid_co
$LN2@invalid_co:

; 38   :         PyErr_Format(PyExc_ValueError,
; 39   :                      "Cannot specify ',' with '\\x%x'.",
; 40   :                      (unsigned int)presentation_type);

  00036	44 8b 44 24 30	 mov	 r8d, DWORD PTR presentation_type$[rsp]
  0003b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CA@KFPPEOBD@Cannot?5specify?5?8?0?8?5with?5?8?2x?$CFx?8?4?$AA@
  00042	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00049	e8 00 00 00 00	 call	 PyErr_Format
$LN1@invalid_co:

; 41   : }

  0004e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00052	c3		 ret	 0
invalid_comma_type ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CJ@BALCLOM@Too?5many?5decimal?5digits?5in?5forma@ ; `string'
PUBLIC	??_C@_1EM@NOEG@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt@ ; `string'
PUBLIC	??_C@_1DE@GMLKCEOF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CO@NHGIHKNN@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DA@IKKPLFAK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CK@MNBGFFCA@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@ ; `string'
EXTRN	_PyUnicode_ToDecimalDigit:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$get_integer DD imagerel get_integer
	DD	imagerel get_integer+1666
	DD	imagerel $unwind$get_integer
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$get_integer DD 021b01H
	DD	011011bH
xdata	ENDS
;	COMDAT ??_C@_0CJ@BALCLOM@Too?5many?5decimal?5digits?5in?5forma@
CONST	SEGMENT
??_C@_0CJ@BALCLOM@Too?5many?5decimal?5digits?5in?5forma@ DB 'Too many dec'
	DB	'imal digits in format string', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1EM@NOEG@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt@
CONST	SEGMENT
??_C@_1EM@NOEG@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt@ DB '('
	DB	00H, '(', 00H, 'P', 00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H
	DB	'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'O', 00H, 'b', 00H, 'j'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, '*', 00H, ')', 00H, '(', 00H
	DB	'(', 00H, 's', 00H, 't', 00H, 'r', 00H, ')', 00H, ')', 00H, ')'
	DB	00H, '-', 00H, '>', 00H, 'd', 00H, 'a', 00H, 't', 00H, 'a', 00H
	DB	'.', 00H, 'a', 00H, 'n', 00H, 'y', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DE@GMLKCEOF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DE@GMLKCEOF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'I', 00H, 'S', 00H, '_', 00H, 'R'
	DB	00H, 'E', 00H, 'A', 00H, 'D', 00H, 'Y', 00H, '(', 00H, '(', 00H
	DB	's', 00H, 't', 00H, 'r', 00H, ')', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CO@NHGIHKNN@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CO@NHGIHKNN@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, '(', 00H, 's', 00H, 't', 00H, 'r', 00H
	DB	')', 00H, ')', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1DA@IKKPLFAK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DA@IKKPLFAK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'I', 00H, 'S', 00H, '_', 00H, 'R'
	DB	00H, 'E', 00H, 'A', 00H, 'D', 00H, 'Y', 00H, '(', 00H, 's', 00H
	DB	't', 00H, 'r', 00H, ')', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@MNBGFFCA@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CK@MNBGFFCA@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, 's', 00H, 't', 00H, 'r', 00H, ')', 00H
	DB	00H, 00H					; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT get_integer
_TEXT	SEGMENT
digitval$ = 32
accumulator$ = 40
numdigits$ = 48
tv170 = 56
tv179 = 64
tv294 = 72
tv235 = 80
tv244 = 88
tv293 = 96
tv281 = 104
tv290 = 112
str$ = 144
pos$ = 152
end$ = 160
result$ = 168
get_integer PROC					; COMDAT

; 53   : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 54   :     Py_ssize_t accumulator, digitval;
; 55   :     int numdigits;
; 56   :     accumulator = numdigits = 0;

  0001b	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR numdigits$[rsp], 0
  00023	48 63 44 24 30	 movsxd	 rax, DWORD PTR numdigits$[rsp]
  00028	48 89 44 24 28	 mov	 QWORD PTR accumulator$[rsp], rax
  0002d	eb 23		 jmp	 SHORT $LN6@get_intege
$LN5@get_intege:

; 57   :     for (;;(*pos)++, numdigits++) {

  0002f	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR pos$[rsp]
  00037	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0003a	48 ff c0	 inc	 rax
  0003d	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR pos$[rsp]
  00045	48 89 01	 mov	 QWORD PTR [rcx], rax
  00048	8b 44 24 30	 mov	 eax, DWORD PTR numdigits$[rsp]
  0004c	ff c0		 inc	 eax
  0004e	89 44 24 30	 mov	 DWORD PTR numdigits$[rsp], eax
$LN6@get_intege:

; 58   :         if (*pos >= end)

  00052	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR pos$[rsp]
  0005a	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR end$[rsp]
  00062	48 39 08	 cmp	 QWORD PTR [rax], rcx
  00065	7c 05		 jl	 SHORT $LN3@get_intege

; 59   :             break;

  00067	e9 fa 05 00 00	 jmp	 $LN4@get_intege
$LN3@get_intege:

; 60   :         digitval = Py_UNICODE_TODECIMAL(PyUnicode_READ_CHAR(str, *pos));

  0006c	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR str$[rsp]
  00074	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00078	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0007e	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00083	85 c0		 test	 eax, eax
  00085	75 1c		 jne	 SHORT $LN9@get_intege
  00087	41 b8 3c 00 00
	00		 mov	 r8d, 60			; 0000003cH
  0008d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00094	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@MNBGFFCA@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  0009b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000a1	33 c0		 xor	 eax, eax
$LN9@get_intege:
  000a3	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR str$[rsp]
  000ab	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  000ae	c1 e8 07	 shr	 eax, 7
  000b1	83 e0 01	 and	 eax, 1
  000b4	85 c0		 test	 eax, eax
  000b6	75 1c		 jne	 SHORT $LN10@get_intege
  000b8	41 b8 3c 00 00
	00		 mov	 r8d, 60			; 0000003cH
  000be	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  000c5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@IKKPLFAK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  000cc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000d2	33 c0		 xor	 eax, eax
$LN10@get_intege:
  000d4	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR str$[rsp]
  000dc	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000e0	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000e6	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  000eb	85 c0		 test	 eax, eax
  000ed	75 1c		 jne	 SHORT $LN11@get_intege
  000ef	41 b8 3c 00 00
	00		 mov	 r8d, 60			; 0000003cH
  000f5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  000fc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@NHGIHKNN@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00103	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00109	33 c0		 xor	 eax, eax
$LN11@get_intege:
  0010b	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR str$[rsp]
  00113	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00116	c1 e8 07	 shr	 eax, 7
  00119	83 e0 01	 and	 eax, 1
  0011c	85 c0		 test	 eax, eax
  0011e	75 1c		 jne	 SHORT $LN12@get_intege
  00120	41 b8 3c 00 00
	00		 mov	 r8d, 60			; 0000003cH
  00126	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  0012d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@GMLKCEOF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00134	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0013a	33 c0		 xor	 eax, eax
$LN12@get_intege:
  0013c	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR str$[rsp]
  00144	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00147	c1 e8 02	 shr	 eax, 2
  0014a	83 e0 07	 and	 eax, 7
  0014d	83 f8 01	 cmp	 eax, 1
  00150	0f 85 60 01 00
	00		 jne	 $LN41@get_intege
  00156	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR str$[rsp]
  0015e	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00162	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00168	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0016d	85 c0		 test	 eax, eax
  0016f	75 1c		 jne	 SHORT $LN13@get_intege
  00171	41 b8 3c 00 00
	00		 mov	 r8d, 60			; 0000003cH
  00177	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  0017e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@NHGIHKNN@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00185	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0018b	33 c0		 xor	 eax, eax
$LN13@get_intege:
  0018d	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR str$[rsp]
  00195	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00198	c1 e8 05	 shr	 eax, 5
  0019b	83 e0 01	 and	 eax, 1
  0019e	85 c0		 test	 eax, eax
  001a0	0f 84 b1 00 00
	00		 je	 $LN19@get_intege
  001a6	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR str$[rsp]
  001ae	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  001b2	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  001b8	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  001bd	85 c0		 test	 eax, eax
  001bf	75 1c		 jne	 SHORT $LN14@get_intege
  001c1	41 b8 3c 00 00
	00		 mov	 r8d, 60			; 0000003cH
  001c7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  001ce	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@NHGIHKNN@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$CJ?$AA?$AA@
  001d5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001db	33 c0		 xor	 eax, eax
$LN14@get_intege:
  001dd	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR str$[rsp]
  001e5	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  001e8	c1 e8 07	 shr	 eax, 7
  001eb	83 e0 01	 and	 eax, 1
  001ee	85 c0		 test	 eax, eax
  001f0	75 1c		 jne	 SHORT $LN15@get_intege
  001f2	41 b8 3c 00 00
	00		 mov	 r8d, 60			; 0000003cH
  001f8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  001ff	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@GMLKCEOF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00206	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0020c	33 c0		 xor	 eax, eax
$LN15@get_intege:
  0020e	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR str$[rsp]
  00216	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00219	c1 e8 06	 shr	 eax, 6
  0021c	83 e0 01	 and	 eax, 1
  0021f	85 c0		 test	 eax, eax
  00221	74 15		 je	 SHORT $LN16@get_intege
  00223	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR str$[rsp]
  0022b	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  00231	48 89 44 24 38	 mov	 QWORD PTR tv170[rsp], rax
  00236	eb 13		 jmp	 SHORT $LN17@get_intege
$LN16@get_intege:
  00238	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR str$[rsp]
  00240	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  00246	48 89 44 24 38	 mov	 QWORD PTR tv170[rsp], rax
$LN17@get_intege:
  0024b	48 8b 44 24 38	 mov	 rax, QWORD PTR tv170[rsp]
  00250	48 89 44 24 40	 mov	 QWORD PTR tv179[rsp], rax
  00255	eb 42		 jmp	 SHORT $LN20@get_intege
$LN19@get_intege:
  00257	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR str$[rsp]
  0025f	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  00267	75 1c		 jne	 SHORT $LN18@get_intege
  00269	41 b8 3c 00 00
	00		 mov	 r8d, 60			; 0000003cH
  0026f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00276	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EM@NOEG@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt@
  0027d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00283	33 c0		 xor	 eax, eax
$LN18@get_intege:
  00285	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR str$[rsp]
  0028d	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  00294	48 89 44 24 40	 mov	 QWORD PTR tv179[rsp], rax
$LN20@get_intege:
  00299	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR pos$[rsp]
  002a1	48 8b 00	 mov	 rax, QWORD PTR [rax]
  002a4	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tv179[rsp]
  002a9	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  002ad	89 44 24 48	 mov	 DWORD PTR tv294[rsp], eax
  002b1	e9 44 03 00 00	 jmp	 $LN42@get_intege
$LN41@get_intege:
  002b6	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR str$[rsp]
  002be	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  002c2	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  002c8	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  002cd	85 c0		 test	 eax, eax
  002cf	75 1c		 jne	 SHORT $LN21@get_intege
  002d1	41 b8 3c 00 00
	00		 mov	 r8d, 60			; 0000003cH
  002d7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  002de	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@NHGIHKNN@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$CJ?$AA?$AA@
  002e5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  002eb	33 c0		 xor	 eax, eax
$LN21@get_intege:
  002ed	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR str$[rsp]
  002f5	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  002f8	c1 e8 07	 shr	 eax, 7
  002fb	83 e0 01	 and	 eax, 1
  002fe	85 c0		 test	 eax, eax
  00300	75 1c		 jne	 SHORT $LN22@get_intege
  00302	41 b8 3c 00 00
	00		 mov	 r8d, 60			; 0000003cH
  00308	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  0030f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@GMLKCEOF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00316	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0031c	33 c0		 xor	 eax, eax
$LN22@get_intege:
  0031e	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR str$[rsp]
  00326	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00329	c1 e8 02	 shr	 eax, 2
  0032c	83 e0 07	 and	 eax, 7
  0032f	83 f8 02	 cmp	 eax, 2
  00332	0f 85 60 01 00
	00		 jne	 $LN39@get_intege
  00338	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR str$[rsp]
  00340	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00344	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0034a	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0034f	85 c0		 test	 eax, eax
  00351	75 1c		 jne	 SHORT $LN23@get_intege
  00353	41 b8 3c 00 00
	00		 mov	 r8d, 60			; 0000003cH
  00359	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00360	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@NHGIHKNN@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00367	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0036d	33 c0		 xor	 eax, eax
$LN23@get_intege:
  0036f	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR str$[rsp]
  00377	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0037a	c1 e8 05	 shr	 eax, 5
  0037d	83 e0 01	 and	 eax, 1
  00380	85 c0		 test	 eax, eax
  00382	0f 84 b1 00 00
	00		 je	 $LN29@get_intege
  00388	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR str$[rsp]
  00390	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00394	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0039a	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0039f	85 c0		 test	 eax, eax
  003a1	75 1c		 jne	 SHORT $LN24@get_intege
  003a3	41 b8 3c 00 00
	00		 mov	 r8d, 60			; 0000003cH
  003a9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  003b0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@NHGIHKNN@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$CJ?$AA?$AA@
  003b7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  003bd	33 c0		 xor	 eax, eax
$LN24@get_intege:
  003bf	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR str$[rsp]
  003c7	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  003ca	c1 e8 07	 shr	 eax, 7
  003cd	83 e0 01	 and	 eax, 1
  003d0	85 c0		 test	 eax, eax
  003d2	75 1c		 jne	 SHORT $LN25@get_intege
  003d4	41 b8 3c 00 00
	00		 mov	 r8d, 60			; 0000003cH
  003da	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  003e1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@GMLKCEOF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$CJ?$AA?$AA@
  003e8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  003ee	33 c0		 xor	 eax, eax
$LN25@get_intege:
  003f0	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR str$[rsp]
  003f8	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  003fb	c1 e8 06	 shr	 eax, 6
  003fe	83 e0 01	 and	 eax, 1
  00401	85 c0		 test	 eax, eax
  00403	74 15		 je	 SHORT $LN26@get_intege
  00405	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR str$[rsp]
  0040d	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  00413	48 89 44 24 50	 mov	 QWORD PTR tv235[rsp], rax
  00418	eb 13		 jmp	 SHORT $LN27@get_intege
$LN26@get_intege:
  0041a	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR str$[rsp]
  00422	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  00428	48 89 44 24 50	 mov	 QWORD PTR tv235[rsp], rax
$LN27@get_intege:
  0042d	48 8b 44 24 50	 mov	 rax, QWORD PTR tv235[rsp]
  00432	48 89 44 24 58	 mov	 QWORD PTR tv244[rsp], rax
  00437	eb 42		 jmp	 SHORT $LN30@get_intege
$LN29@get_intege:
  00439	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR str$[rsp]
  00441	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  00449	75 1c		 jne	 SHORT $LN28@get_intege
  0044b	41 b8 3c 00 00
	00		 mov	 r8d, 60			; 0000003cH
  00451	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00458	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EM@NOEG@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt@
  0045f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00465	33 c0		 xor	 eax, eax
$LN28@get_intege:
  00467	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR str$[rsp]
  0046f	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  00476	48 89 44 24 58	 mov	 QWORD PTR tv244[rsp], rax
$LN30@get_intege:
  0047b	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR pos$[rsp]
  00483	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00486	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tv244[rsp]
  0048b	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  0048f	89 44 24 60	 mov	 DWORD PTR tv293[rsp], eax
  00493	e9 5a 01 00 00	 jmp	 $LN40@get_intege
$LN39@get_intege:
  00498	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR str$[rsp]
  004a0	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  004a4	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  004aa	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  004af	85 c0		 test	 eax, eax
  004b1	75 1c		 jne	 SHORT $LN31@get_intege
  004b3	41 b8 3c 00 00
	00		 mov	 r8d, 60			; 0000003cH
  004b9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  004c0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@NHGIHKNN@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$CJ?$AA?$AA@
  004c7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  004cd	33 c0		 xor	 eax, eax
$LN31@get_intege:
  004cf	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR str$[rsp]
  004d7	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  004da	c1 e8 05	 shr	 eax, 5
  004dd	83 e0 01	 and	 eax, 1
  004e0	85 c0		 test	 eax, eax
  004e2	0f 84 b1 00 00
	00		 je	 $LN37@get_intege
  004e8	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR str$[rsp]
  004f0	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  004f4	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  004fa	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  004ff	85 c0		 test	 eax, eax
  00501	75 1c		 jne	 SHORT $LN32@get_intege
  00503	41 b8 3c 00 00
	00		 mov	 r8d, 60			; 0000003cH
  00509	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00510	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@NHGIHKNN@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00517	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0051d	33 c0		 xor	 eax, eax
$LN32@get_intege:
  0051f	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR str$[rsp]
  00527	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0052a	c1 e8 07	 shr	 eax, 7
  0052d	83 e0 01	 and	 eax, 1
  00530	85 c0		 test	 eax, eax
  00532	75 1c		 jne	 SHORT $LN33@get_intege
  00534	41 b8 3c 00 00
	00		 mov	 r8d, 60			; 0000003cH
  0053a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00541	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@GMLKCEOF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00548	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0054e	33 c0		 xor	 eax, eax
$LN33@get_intege:
  00550	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR str$[rsp]
  00558	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0055b	c1 e8 06	 shr	 eax, 6
  0055e	83 e0 01	 and	 eax, 1
  00561	85 c0		 test	 eax, eax
  00563	74 15		 je	 SHORT $LN34@get_intege
  00565	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR str$[rsp]
  0056d	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  00573	48 89 44 24 68	 mov	 QWORD PTR tv281[rsp], rax
  00578	eb 13		 jmp	 SHORT $LN35@get_intege
$LN34@get_intege:
  0057a	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR str$[rsp]
  00582	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  00588	48 89 44 24 68	 mov	 QWORD PTR tv281[rsp], rax
$LN35@get_intege:
  0058d	48 8b 44 24 68	 mov	 rax, QWORD PTR tv281[rsp]
  00592	48 89 44 24 70	 mov	 QWORD PTR tv290[rsp], rax
  00597	eb 42		 jmp	 SHORT $LN38@get_intege
$LN37@get_intege:
  00599	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR str$[rsp]
  005a1	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  005a9	75 1c		 jne	 SHORT $LN36@get_intege
  005ab	41 b8 3c 00 00
	00		 mov	 r8d, 60			; 0000003cH
  005b1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  005b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EM@NOEG@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt@
  005bf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  005c5	33 c0		 xor	 eax, eax
$LN36@get_intege:
  005c7	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR str$[rsp]
  005cf	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  005d6	48 89 44 24 70	 mov	 QWORD PTR tv290[rsp], rax
$LN38@get_intege:
  005db	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR pos$[rsp]
  005e3	48 8b 00	 mov	 rax, QWORD PTR [rax]
  005e6	48 8b 4c 24 70	 mov	 rcx, QWORD PTR tv290[rsp]
  005eb	8b 04 81	 mov	 eax, DWORD PTR [rcx+rax*4]
  005ee	89 44 24 60	 mov	 DWORD PTR tv293[rsp], eax
$LN40@get_intege:
  005f2	8b 44 24 60	 mov	 eax, DWORD PTR tv293[rsp]
  005f6	89 44 24 48	 mov	 DWORD PTR tv294[rsp], eax
$LN42@get_intege:
  005fa	8b 4c 24 48	 mov	 ecx, DWORD PTR tv294[rsp]
  005fe	e8 00 00 00 00	 call	 _PyUnicode_ToDecimalDigit
  00603	48 98		 cdqe
  00605	48 89 44 24 20	 mov	 QWORD PTR digitval$[rsp], rax

; 61   :         if (digitval < 0)

  0060a	48 83 7c 24 20
	00		 cmp	 QWORD PTR digitval$[rsp], 0
  00610	7d 02		 jge	 SHORT $LN2@get_intege

; 62   :             break;

  00612	eb 52		 jmp	 SHORT $LN4@get_intege
$LN2@get_intege:

; 63   :         /*
; 64   :            Detect possible overflow before it happens:
; 65   : 
; 66   :               accumulator * 10 + digitval > PY_SSIZE_T_MAX if and only if
; 67   :               accumulator > (PY_SSIZE_T_MAX - digitval) / 10.
; 68   :         */
; 69   :         if (accumulator > (PY_SSIZE_T_MAX - digitval) / 10) {

  00614	48 b8 ff ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775807 ; 7fffffffffffffffH
  0061e	48 2b 44 24 20	 sub	 rax, QWORD PTR digitval$[rsp]
  00623	48 99		 cdq
  00625	b9 0a 00 00 00	 mov	 ecx, 10
  0062a	48 f7 f9	 idiv	 rcx
  0062d	48 39 44 24 28	 cmp	 QWORD PTR accumulator$[rsp], rax
  00632	7e 1a		 jle	 SHORT $LN1@get_intege

; 70   :             PyErr_Format(PyExc_ValueError,
; 71   :                          "Too many decimal digits in format string");

  00634	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CJ@BALCLOM@Too?5many?5decimal?5digits?5in?5forma@
  0063b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00642	e8 00 00 00 00	 call	 PyErr_Format

; 72   :             return -1;

  00647	b8 ff ff ff ff	 mov	 eax, -1
  0064c	eb 2c		 jmp	 SHORT $LN7@get_intege
$LN1@get_intege:

; 73   :         }
; 74   :         accumulator = accumulator * 10 + digitval;

  0064e	48 8b 44 24 28	 mov	 rax, QWORD PTR accumulator$[rsp]
  00653	48 6b c0 0a	 imul	 rax, 10
  00657	48 03 44 24 20	 add	 rax, QWORD PTR digitval$[rsp]
  0065c	48 89 44 24 28	 mov	 QWORD PTR accumulator$[rsp], rax

; 75   :     }

  00661	e9 c9 f9 ff ff	 jmp	 $LN5@get_intege
$LN4@get_intege:

; 76   :     *result = accumulator;

  00666	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR result$[rsp]
  0066e	48 8b 4c 24 28	 mov	 rcx, QWORD PTR accumulator$[rsp]
  00673	48 89 08	 mov	 QWORD PTR [rax], rcx

; 77   :     return numdigits;

  00676	8b 44 24 30	 mov	 eax, DWORD PTR numdigits$[rsp]
$LN7@get_intege:

; 78   : }

  0067a	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  00681	c3		 ret	 0
get_integer ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$is_alignment_token DD imagerel is_alignment_token
	DD	imagerel is_alignment_token+49
	DD	imagerel $unwind$is_alignment_token
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$is_alignment_token DD 010801H
	DD	02208H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT is_alignment_token
_TEXT	SEGMENT
tv64 = 0
c$ = 32
is_alignment_token PROC					; COMDAT

; 87   : {

  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	48 83 ec 18	 sub	 rsp, 24

; 88   :     switch (c) {

  00008	8b 44 24 20	 mov	 eax, DWORD PTR c$[rsp]
  0000c	89 04 24	 mov	 DWORD PTR tv64[rsp], eax
  0000f	83 3c 24 3c	 cmp	 DWORD PTR tv64[rsp], 60	; 0000003cH
  00013	72 15		 jb	 SHORT $LN1@is_alignme
  00015	83 3c 24 3e	 cmp	 DWORD PTR tv64[rsp], 62	; 0000003eH
  00019	76 08		 jbe	 SHORT $LN2@is_alignme
  0001b	83 3c 24 5e	 cmp	 DWORD PTR tv64[rsp], 94	; 0000005eH
  0001f	74 02		 je	 SHORT $LN2@is_alignme
  00021	eb 07		 jmp	 SHORT $LN1@is_alignme
$LN2@is_alignme:

; 89   :     case '<': case '>': case '=': case '^':
; 90   :         return 1;

  00023	b8 01 00 00 00	 mov	 eax, 1
  00028	eb 02		 jmp	 SHORT $LN5@is_alignme
$LN1@is_alignme:

; 91   :     default:
; 92   :         return 0;

  0002a	33 c0		 xor	 eax, eax
$LN5@is_alignme:

; 93   :     }
; 94   : }

  0002c	48 83 c4 18	 add	 rsp, 24
  00030	c3		 ret	 0
is_alignment_token ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$is_sign_element DD imagerel is_sign_element
	DD	imagerel is_sign_element+49
	DD	imagerel $unwind$is_sign_element
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$is_sign_element DD 010801H
	DD	02208H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT is_sign_element
_TEXT	SEGMENT
tv64 = 0
c$ = 32
is_sign_element PROC					; COMDAT

; 99   : {

  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	48 83 ec 18	 sub	 rsp, 24

; 100  :     switch (c) {

  00008	8b 44 24 20	 mov	 eax, DWORD PTR c$[rsp]
  0000c	89 04 24	 mov	 DWORD PTR tv64[rsp], eax
  0000f	83 3c 24 20	 cmp	 DWORD PTR tv64[rsp], 32	; 00000020H
  00013	74 0e		 je	 SHORT $LN2@is_sign_el
  00015	83 3c 24 2b	 cmp	 DWORD PTR tv64[rsp], 43	; 0000002bH
  00019	74 08		 je	 SHORT $LN2@is_sign_el
  0001b	83 3c 24 2d	 cmp	 DWORD PTR tv64[rsp], 45	; 0000002dH
  0001f	74 02		 je	 SHORT $LN2@is_sign_el
  00021	eb 07		 jmp	 SHORT $LN1@is_sign_el
$LN2@is_sign_el:

; 101  :     case ' ': case '+': case '-':
; 102  :         return 1;

  00023	b8 01 00 00 00	 mov	 eax, 1
  00028	eb 02		 jmp	 SHORT $LN5@is_sign_el
$LN1@is_sign_el:

; 103  :     default:
; 104  :         return 0;

  0002a	33 c0		 xor	 eax, eax
$LN5@is_sign_el:

; 105  :     }
; 106  : }

  0002c	48 83 c4 18	 add	 rsp, 24
  00030	c3		 ret	 0
is_sign_element ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DF@ODACPFEC@?8?$DN?8?5alignment?5not?5allowed?5in?5str@ ; `string'
PUBLIC	??_C@_0DK@OJHILDCA@Alternate?5form?5?$CI?$CD?$CJ?5not?5allowed?5i@ ; `string'
PUBLIC	??_C@_0CM@IJMKBHPM@Sign?5not?5allowed?5in?5string?5forma@ ; `string'
PUBLIC	??_C@_1CO@JNPNJFLB@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DE@CGCPMLIJ@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?$CJ?$AA?$AA@ ; `string'
EXTRN	_PyUnicode_FastCopyCharacters:PROC
EXTRN	_PyUnicodeWriter_PrepareInternal:PROC
EXTRN	_PyUnicode_FindMaxChar:PROC
EXTRN	PyErr_SetString:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$format_string_internal DD imagerel format_string_internal
	DD	imagerel format_string_internal+893
	DD	imagerel $unwind$format_string_internal
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$format_string_internal DD 011301H
	DD	0e213H
xdata	ENDS
;	COMDAT ??_C@_0DF@ODACPFEC@?8?$DN?8?5alignment?5not?5allowed?5in?5str@
CONST	SEGMENT
??_C@_0DF@ODACPFEC@?8?$DN?8?5alignment?5not?5allowed?5in?5str@ DB '''='' '
	DB	'alignment not allowed in string format specifier', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DK@OJHILDCA@Alternate?5form?5?$CI?$CD?$CJ?5not?5allowed?5i@
CONST	SEGMENT
??_C@_0DK@OJHILDCA@Alternate?5form?5?$CI?$CD?$CJ?5not?5allowed?5i@ DB 'Al'
	DB	'ternate form (#) not allowed in string format specifier', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@IJMKBHPM@Sign?5not?5allowed?5in?5string?5forma@
CONST	SEGMENT
??_C@_0CM@IJMKBHPM@Sign?5not?5allowed?5in?5string?5forma@ DB 'Sign not al'
	DB	'lowed in string format specifier', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1CO@JNPNJFLB@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CO@JNPNJFLB@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, 'v', 00H, 'a', 00H, 'l', 00H, 'u', 00H
	DB	'e', 00H, ')', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1DE@CGCPMLIJ@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DE@CGCPMLIJ@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'I', 00H, 'S', 00H, '_', 00H, 'R'
	DB	00H, 'E', 00H, 'A', 00H, 'D', 00H, 'Y', 00H, '(', 00H, 'v', 00H
	DB	'a', 00H, 'l', 00H, 'u', 00H, 'e', 00H, ')', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT format_string_internal
_TEXT	SEGMENT
maxchar$ = 48
len$ = 56
total$ = 64
lpad$ = 72
result$ = 80
rpad$ = 88
tv160 = 96
tv173 = 100
tv172 = 104
tv179 = 108
value$ = 128
format$ = 136
writer$ = 144
format_string_internal PROC				; COMDAT

; 726  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 727  :     Py_ssize_t lpad;
; 728  :     Py_ssize_t rpad;
; 729  :     Py_ssize_t total;
; 730  :     Py_ssize_t len;
; 731  :     int result = -1;

  00013	c7 44 24 50 ff
	ff ff ff	 mov	 DWORD PTR result$[rsp], -1

; 732  :     Py_UCS4 maxchar;
; 733  : 
; 734  :     assert(PyUnicode_IS_READY(value));

  0001b	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR value$[rsp]
  00023	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00026	c1 e8 07	 shr	 eax, 7
  00029	83 e0 01	 and	 eax, 1
  0002c	85 c0		 test	 eax, eax
  0002e	75 1c		 jne	 SHORT $LN13@format_str
  00030	41 b8 de 02 00
	00		 mov	 r8d, 734		; 000002deH
  00036	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  0003d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@CGCPMLIJ@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?$CJ?$AA?$AA@
  00044	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0004a	33 c0		 xor	 eax, eax
$LN13@format_str:

; 735  :     len = PyUnicode_GET_LENGTH(value);

  0004c	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR value$[rsp]
  00054	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00058	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0005e	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00063	85 c0		 test	 eax, eax
  00065	75 1c		 jne	 SHORT $LN14@format_str
  00067	41 b8 df 02 00
	00		 mov	 r8d, 735		; 000002dfH
  0006d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00074	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@JNPNJFLB@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?$CJ?$AA?$AA@
  0007b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00081	33 c0		 xor	 eax, eax
$LN14@format_str:
  00083	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR value$[rsp]
  0008b	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0008e	c1 e8 07	 shr	 eax, 7
  00091	83 e0 01	 and	 eax, 1
  00094	85 c0		 test	 eax, eax
  00096	75 1c		 jne	 SHORT $LN15@format_str
  00098	41 b8 df 02 00
	00		 mov	 r8d, 735		; 000002dfH
  0009e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  000a5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@CGCPMLIJ@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?$CJ?$AA?$AA@
  000ac	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000b2	33 c0		 xor	 eax, eax
$LN15@format_str:
  000b4	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR value$[rsp]
  000bc	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000c0	48 89 44 24 38	 mov	 QWORD PTR len$[rsp], rax

; 736  : 
; 737  :     /* sign is not allowed on strings */
; 738  :     if (format->sign != '\0') {

  000c5	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR format$[rsp]
  000cd	83 78 0c 00	 cmp	 DWORD PTR [rax+12], 0
  000d1	74 18		 je	 SHORT $LN10@format_str

; 739  :         PyErr_SetString(PyExc_ValueError,
; 740  :                         "Sign not allowed in string format specifier");

  000d3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CM@IJMKBHPM@Sign?5not?5allowed?5in?5string?5forma@
  000da	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  000e1	e8 00 00 00 00	 call	 PyErr_SetString

; 741  :         goto done;

  000e6	e9 89 02 00 00	 jmp	 $done$21862
$LN10@format_str:

; 742  :     }
; 743  : 
; 744  :     /* alternate is not allowed on strings */
; 745  :     if (format->alternate) {

  000eb	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR format$[rsp]
  000f3	83 78 08 00	 cmp	 DWORD PTR [rax+8], 0
  000f7	74 18		 je	 SHORT $LN9@format_str

; 746  :         PyErr_SetString(PyExc_ValueError,
; 747  :                         "Alternate form (#) not allowed in string format "
; 748  :                         "specifier");

  000f9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DK@OJHILDCA@Alternate?5form?5?$CI?$CD?$CJ?5not?5allowed?5i@
  00100	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00107	e8 00 00 00 00	 call	 PyErr_SetString

; 749  :         goto done;

  0010c	e9 63 02 00 00	 jmp	 $done$21862
$LN9@format_str:

; 750  :     }
; 751  : 
; 752  :     /* '=' alignment not allowed on strings */
; 753  :     if (format->align == '=') {

  00111	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR format$[rsp]
  00119	83 78 04 3d	 cmp	 DWORD PTR [rax+4], 61	; 0000003dH
  0011d	75 18		 jne	 SHORT $LN8@format_str

; 754  :         PyErr_SetString(PyExc_ValueError,
; 755  :                         "'=' alignment not allowed "
; 756  :                         "in string format specifier");

  0011f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DF@ODACPFEC@?8?$DN?8?5alignment?5not?5allowed?5in?5str@
  00126	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0012d	e8 00 00 00 00	 call	 PyErr_SetString

; 757  :         goto done;

  00132	e9 3d 02 00 00	 jmp	 $done$21862
$LN8@format_str:

; 758  :     }
; 759  : 
; 760  :     if (format->width == -1 && format->precision == -1) {

  00137	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR format$[rsp]
  0013f	48 83 78 10 ff	 cmp	 QWORD PTR [rax+16], -1
  00144	75 29		 jne	 SHORT $LN7@format_str
  00146	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR format$[rsp]
  0014e	48 83 78 20 ff	 cmp	 QWORD PTR [rax+32], -1
  00153	75 1a		 jne	 SHORT $LN7@format_str

; 761  :         /* Fast path */
; 762  :         return _PyUnicodeWriter_WriteStr(writer, value);

  00155	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR value$[rsp]
  0015d	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR writer$[rsp]
  00165	e8 00 00 00 00	 call	 _PyUnicodeWriter_WriteStr
  0016a	e9 09 02 00 00	 jmp	 $LN11@format_str
$LN7@format_str:

; 763  :     }
; 764  : 
; 765  :     /* if precision is specified, output no more that format.precision
; 766  :        characters */
; 767  :     if (format->precision >= 0 && len >= format->precision) {

  0016f	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR format$[rsp]
  00177	48 83 78 20 00	 cmp	 QWORD PTR [rax+32], 0
  0017c	7c 24		 jl	 SHORT $LN6@format_str
  0017e	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR format$[rsp]
  00186	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0018a	48 39 44 24 38	 cmp	 QWORD PTR len$[rsp], rax
  0018f	7c 11		 jl	 SHORT $LN6@format_str

; 768  :         len = format->precision;

  00191	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR format$[rsp]
  00199	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0019d	48 89 44 24 38	 mov	 QWORD PTR len$[rsp], rax
$LN6@format_str:

; 769  :     }
; 770  : 
; 771  :     calc_padding(len, format->width, format->align, &lpad, &rpad, &total);

  001a2	48 8d 44 24 40	 lea	 rax, QWORD PTR total$[rsp]
  001a7	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  001ac	48 8d 44 24 58	 lea	 rax, QWORD PTR rpad$[rsp]
  001b1	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001b6	4c 8d 4c 24 48	 lea	 r9, QWORD PTR lpad$[rsp]
  001bb	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR format$[rsp]
  001c3	44 8b 40 04	 mov	 r8d, DWORD PTR [rax+4]
  001c7	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR format$[rsp]
  001cf	48 8b 50 10	 mov	 rdx, QWORD PTR [rax+16]
  001d3	48 8b 4c 24 38	 mov	 rcx, QWORD PTR len$[rsp]
  001d8	e8 00 00 00 00	 call	 calc_padding

; 772  : 
; 773  :     maxchar = _PyUnicode_FindMaxChar(value, 0, len);

  001dd	4c 8b 44 24 38	 mov	 r8, QWORD PTR len$[rsp]
  001e2	33 d2		 xor	 edx, edx
  001e4	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR value$[rsp]
  001ec	e8 00 00 00 00	 call	 _PyUnicode_FindMaxChar
  001f1	89 44 24 30	 mov	 DWORD PTR maxchar$[rsp], eax

; 774  :     if (lpad != 0 || rpad != 0)

  001f5	48 83 7c 24 48
	00		 cmp	 QWORD PTR lpad$[rsp], 0
  001fb	75 08		 jne	 SHORT $LN4@format_str
  001fd	48 83 7c 24 58
	00		 cmp	 QWORD PTR rpad$[rsp], 0
  00203	74 30		 je	 SHORT $LN5@format_str
$LN4@format_str:

; 775  :         maxchar = Py_MAX(maxchar, format->fill_char);

  00205	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR format$[rsp]
  0020d	8b 00		 mov	 eax, DWORD PTR [rax]
  0020f	39 44 24 30	 cmp	 DWORD PTR maxchar$[rsp], eax
  00213	76 0a		 jbe	 SHORT $LN16@format_str
  00215	8b 44 24 30	 mov	 eax, DWORD PTR maxchar$[rsp]
  00219	89 44 24 60	 mov	 DWORD PTR tv160[rsp], eax
  0021d	eb 0e		 jmp	 SHORT $LN17@format_str
$LN16@format_str:
  0021f	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR format$[rsp]
  00227	8b 00		 mov	 eax, DWORD PTR [rax]
  00229	89 44 24 60	 mov	 DWORD PTR tv160[rsp], eax
$LN17@format_str:
  0022d	8b 44 24 60	 mov	 eax, DWORD PTR tv160[rsp]
  00231	89 44 24 30	 mov	 DWORD PTR maxchar$[rsp], eax
$LN5@format_str:

; 776  : 
; 777  :     /* allocate the resulting string */
; 778  :     if (_PyUnicodeWriter_Prepare(writer, total, maxchar) == -1)

  00235	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR writer$[rsp]
  0023d	8b 40 14	 mov	 eax, DWORD PTR [rax+20]
  00240	39 44 24 30	 cmp	 DWORD PTR maxchar$[rsp], eax
  00244	77 2c		 ja	 SHORT $LN18@format_str
  00246	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR writer$[rsp]
  0024e	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR writer$[rsp]
  00256	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  0025a	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  0025e	48 2b c1	 sub	 rax, rcx
  00261	48 39 44 24 40	 cmp	 QWORD PTR total$[rsp], rax
  00266	7f 0a		 jg	 SHORT $LN18@format_str
  00268	c7 44 24 64 00
	00 00 00	 mov	 DWORD PTR tv173[rsp], 0
  00270	eb 35		 jmp	 SHORT $LN21@format_str
$LN18@format_str:
  00272	48 83 7c 24 40
	00		 cmp	 QWORD PTR total$[rsp], 0
  00278	75 0a		 jne	 SHORT $LN19@format_str
  0027a	c7 44 24 68 00
	00 00 00	 mov	 DWORD PTR tv172[rsp], 0
  00282	eb 1b		 jmp	 SHORT $LN20@format_str
$LN19@format_str:
  00284	44 8b 44 24 30	 mov	 r8d, DWORD PTR maxchar$[rsp]
  00289	48 8b 54 24 40	 mov	 rdx, QWORD PTR total$[rsp]
  0028e	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR writer$[rsp]
  00296	e8 00 00 00 00	 call	 _PyUnicodeWriter_PrepareInternal
  0029b	89 44 24 68	 mov	 DWORD PTR tv172[rsp], eax
$LN20@format_str:
  0029f	8b 44 24 68	 mov	 eax, DWORD PTR tv172[rsp]
  002a3	89 44 24 64	 mov	 DWORD PTR tv173[rsp], eax
$LN21@format_str:
  002a7	83 7c 24 64 ff	 cmp	 DWORD PTR tv173[rsp], -1
  002ac	75 05		 jne	 SHORT $LN3@format_str

; 779  :         goto done;

  002ae	e9 c1 00 00 00	 jmp	 $done$21862
$LN3@format_str:

; 780  : 
; 781  :     /* Write into that space. First the padding. */
; 782  :     result = fill_padding(writer, len,
; 783  :                           format->fill_char=='\0'?' ':format->fill_char,
; 784  :                           lpad, rpad);

  002b3	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR format$[rsp]
  002bb	83 38 00	 cmp	 DWORD PTR [rax], 0
  002be	75 0a		 jne	 SHORT $LN22@format_str
  002c0	c7 44 24 6c 20
	00 00 00	 mov	 DWORD PTR tv179[rsp], 32 ; 00000020H
  002c8	eb 0e		 jmp	 SHORT $LN23@format_str
$LN22@format_str:
  002ca	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR format$[rsp]
  002d2	8b 00		 mov	 eax, DWORD PTR [rax]
  002d4	89 44 24 6c	 mov	 DWORD PTR tv179[rsp], eax
$LN23@format_str:
  002d8	48 8b 44 24 58	 mov	 rax, QWORD PTR rpad$[rsp]
  002dd	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  002e2	4c 8b 4c 24 48	 mov	 r9, QWORD PTR lpad$[rsp]
  002e7	44 8b 44 24 6c	 mov	 r8d, DWORD PTR tv179[rsp]
  002ec	48 8b 54 24 38	 mov	 rdx, QWORD PTR len$[rsp]
  002f1	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR writer$[rsp]
  002f9	e8 00 00 00 00	 call	 fill_padding
  002fe	89 44 24 50	 mov	 DWORD PTR result$[rsp], eax

; 785  :     if (result == -1)

  00302	83 7c 24 50 ff	 cmp	 DWORD PTR result$[rsp], -1
  00307	75 02		 jne	 SHORT $LN2@format_str

; 786  :         goto done;

  00309	eb 69		 jmp	 SHORT $done$21862
$LN2@format_str:

; 787  : 
; 788  :     /* Then the source string. */
; 789  :     if (len) {

  0030b	48 83 7c 24 38
	00		 cmp	 QWORD PTR len$[rsp], 0
  00311	74 31		 je	 SHORT $LN1@format_str

; 790  :         _PyUnicode_FastCopyCharacters(writer->buffer, writer->pos,
; 791  :                                       value, 0, len);

  00313	48 8b 44 24 38	 mov	 rax, QWORD PTR len$[rsp]
  00318	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0031d	45 33 c9	 xor	 r9d, r9d
  00320	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR value$[rsp]
  00328	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR writer$[rsp]
  00330	48 8b 50 20	 mov	 rdx, QWORD PTR [rax+32]
  00334	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR writer$[rsp]
  0033c	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0033f	e8 00 00 00 00	 call	 _PyUnicode_FastCopyCharacters
$LN1@format_str:

; 792  :     }
; 793  :     writer->pos += (len + rpad);

  00344	48 8b 44 24 58	 mov	 rax, QWORD PTR rpad$[rsp]
  00349	48 8b 4c 24 38	 mov	 rcx, QWORD PTR len$[rsp]
  0034e	48 03 c8	 add	 rcx, rax
  00351	48 8b c1	 mov	 rax, rcx
  00354	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR writer$[rsp]
  0035c	48 03 41 20	 add	 rax, QWORD PTR [rcx+32]
  00360	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR writer$[rsp]
  00368	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 794  :     result = 0;

  0036c	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR result$[rsp], 0
$done$21862:

; 795  : 
; 796  : done:
; 797  :     return result;

  00374	8b 44 24 50	 mov	 eax, DWORD PTR result$[rsp]
$LN11@format_str:

; 798  : }

  00378	48 83 c4 78	 add	 rsp, 120		; 00000078H
  0037c	c3		 ret	 0
format_string_internal ENDP
_TEXT	ENDS
PUBLIC	??_C@_13COJANIEC@?$AA0?$AA?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$calc_padding DD imagerel calc_padding
	DD	imagerel calc_padding+272
	DD	imagerel $unwind$calc_padding
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$calc_padding DD 011801H
	DD	04218H
xdata	ENDS
;	COMDAT ??_C@_13COJANIEC@?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_13COJANIEC@?$AA0?$AA?$AA@ DB '0', 00H, 00H, 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT calc_padding
_TEXT	SEGMENT
nchars$ = 48
width$ = 56
align$ = 64
n_lpadding$ = 72
n_rpadding$ = 80
n_total$ = 88
calc_padding PROC					; COMDAT

; 287  : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 288  :     if (width >= 0) {

  00018	48 83 7c 24 38
	00		 cmp	 QWORD PTR width$[rsp], 0
  0001e	7c 2a		 jl	 SHORT $LN11@calc_paddi

; 289  :         if (nchars > width)

  00020	48 8b 44 24 38	 mov	 rax, QWORD PTR width$[rsp]
  00025	48 39 44 24 30	 cmp	 QWORD PTR nchars$[rsp], rax
  0002a	7e 0f		 jle	 SHORT $LN10@calc_paddi

; 290  :             *n_total = nchars;

  0002c	48 8b 44 24 58	 mov	 rax, QWORD PTR n_total$[rsp]
  00031	48 8b 4c 24 30	 mov	 rcx, QWORD PTR nchars$[rsp]
  00036	48 89 08	 mov	 QWORD PTR [rax], rcx

; 291  :         else

  00039	eb 0d		 jmp	 SHORT $LN9@calc_paddi
$LN10@calc_paddi:

; 292  :             *n_total = width;

  0003b	48 8b 44 24 58	 mov	 rax, QWORD PTR n_total$[rsp]
  00040	48 8b 4c 24 38	 mov	 rcx, QWORD PTR width$[rsp]
  00045	48 89 08	 mov	 QWORD PTR [rax], rcx
$LN9@calc_paddi:

; 293  :     }
; 294  :     else {

  00048	eb 0d		 jmp	 SHORT $LN8@calc_paddi
$LN11@calc_paddi:

; 295  :         /* not specified, use all of the chars and no more */
; 296  :         *n_total = nchars;

  0004a	48 8b 44 24 58	 mov	 rax, QWORD PTR n_total$[rsp]
  0004f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR nchars$[rsp]
  00054	48 89 08	 mov	 QWORD PTR [rax], rcx
$LN8@calc_paddi:

; 297  :     }
; 298  : 
; 299  :     /* Figure out how much leading space we need, based on the
; 300  :        aligning */
; 301  :     if (align == '>')

  00057	83 7c 24 40 3e	 cmp	 DWORD PTR align$[rsp], 62 ; 0000003eH
  0005c	75 1a		 jne	 SHORT $LN7@calc_paddi

; 302  :         *n_lpadding = *n_total - nchars;

  0005e	48 8b 44 24 58	 mov	 rax, QWORD PTR n_total$[rsp]
  00063	48 8b 4c 24 30	 mov	 rcx, QWORD PTR nchars$[rsp]
  00068	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0006b	48 2b c1	 sub	 rax, rcx
  0006e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR n_lpadding$[rsp]
  00073	48 89 01	 mov	 QWORD PTR [rcx], rax
  00076	eb 73		 jmp	 SHORT $LN6@calc_paddi
$LN7@calc_paddi:

; 303  :     else if (align == '^')

  00078	83 7c 24 40 5e	 cmp	 DWORD PTR align$[rsp], 94 ; 0000005eH
  0007d	75 22		 jne	 SHORT $LN5@calc_paddi

; 304  :         *n_lpadding = (*n_total - nchars) / 2;

  0007f	48 8b 44 24 58	 mov	 rax, QWORD PTR n_total$[rsp]
  00084	48 8b 4c 24 30	 mov	 rcx, QWORD PTR nchars$[rsp]
  00089	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0008c	48 2b c1	 sub	 rax, rcx
  0008f	48 99		 cdq
  00091	48 2b c2	 sub	 rax, rdx
  00094	48 d1 f8	 sar	 rax, 1
  00097	48 8b 4c 24 48	 mov	 rcx, QWORD PTR n_lpadding$[rsp]
  0009c	48 89 01	 mov	 QWORD PTR [rcx], rax
  0009f	eb 4a		 jmp	 SHORT $LN4@calc_paddi
$LN5@calc_paddi:

; 305  :     else if (align == '<' || align == '=')

  000a1	83 7c 24 40 3c	 cmp	 DWORD PTR align$[rsp], 60 ; 0000003cH
  000a6	74 07		 je	 SHORT $LN2@calc_paddi
  000a8	83 7c 24 40 3d	 cmp	 DWORD PTR align$[rsp], 61 ; 0000003dH
  000ad	75 0e		 jne	 SHORT $LN3@calc_paddi
$LN2@calc_paddi:

; 306  :         *n_lpadding = 0;

  000af	48 8b 44 24 48	 mov	 rax, QWORD PTR n_lpadding$[rsp]
  000b4	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 307  :     else {

  000bb	eb 2e		 jmp	 SHORT $LN1@calc_paddi
$LN3@calc_paddi:

; 308  :         /* We should never have an unspecified alignment. */
; 309  :         *n_lpadding = 0;

  000bd	48 8b 44 24 48	 mov	 rax, QWORD PTR n_lpadding$[rsp]
  000c2	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 310  :         assert(0);

  000c9	33 c0		 xor	 eax, eax
  000cb	85 c0		 test	 eax, eax
  000cd	75 1c		 jne	 SHORT $LN14@calc_paddi
  000cf	41 b8 36 01 00
	00		 mov	 r8d, 310		; 00000136H
  000d5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  000dc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_13COJANIEC@?$AA0?$AA?$AA@
  000e3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000e9	33 c0		 xor	 eax, eax
$LN14@calc_paddi:
$LN1@calc_paddi:
$LN4@calc_paddi:
$LN6@calc_paddi:

; 311  :     }
; 312  : 
; 313  :     *n_rpadding = *n_total - nchars - *n_lpadding;

  000eb	48 8b 44 24 58	 mov	 rax, QWORD PTR n_total$[rsp]
  000f0	48 8b 4c 24 30	 mov	 rcx, QWORD PTR nchars$[rsp]
  000f5	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000f8	48 2b c1	 sub	 rax, rcx
  000fb	48 8b 4c 24 48	 mov	 rcx, QWORD PTR n_lpadding$[rsp]
  00100	48 2b 01	 sub	 rax, QWORD PTR [rcx]
  00103	48 8b 4c 24 50	 mov	 rcx, QWORD PTR n_rpadding$[rsp]
  00108	48 89 01	 mov	 QWORD PTR [rcx], rax

; 314  : }

  0010b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0010f	c3		 ret	 0
calc_padding ENDP
_TEXT	ENDS
EXTRN	_PyUnicode_FastFill:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$fill_padding DD imagerel fill_padding
	DD	imagerel fill_padding+164
	DD	imagerel $unwind$fill_padding
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$fill_padding DD 011801H
	DD	06218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT fill_padding
_TEXT	SEGMENT
pos$ = 32
writer$ = 64
nchars$ = 72
fill_char$ = 80
n_lpadding$ = 88
n_rpadding$ = 96
fill_padding PROC					; COMDAT

; 323  : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 324  :     Py_ssize_t pos;
; 325  : 
; 326  :     /* Pad on left. */
; 327  :     if (n_lpadding) {

  00018	48 83 7c 24 58
	00		 cmp	 QWORD PTR n_lpadding$[rsp], 0
  0001e	74 2a		 je	 SHORT $LN2@fill_paddi

; 328  :         pos = writer->pos;

  00020	48 8b 44 24 40	 mov	 rax, QWORD PTR writer$[rsp]
  00025	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00029	48 89 44 24 20	 mov	 QWORD PTR pos$[rsp], rax

; 329  :         _PyUnicode_FastFill(writer->buffer, pos, n_lpadding, fill_char);

  0002e	44 8b 4c 24 50	 mov	 r9d, DWORD PTR fill_char$[rsp]
  00033	4c 8b 44 24 58	 mov	 r8, QWORD PTR n_lpadding$[rsp]
  00038	48 8b 54 24 20	 mov	 rdx, QWORD PTR pos$[rsp]
  0003d	48 8b 44 24 40	 mov	 rax, QWORD PTR writer$[rsp]
  00042	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00045	e8 00 00 00 00	 call	 _PyUnicode_FastFill
$LN2@fill_paddi:

; 330  :     }
; 331  : 
; 332  :     /* Pad on right. */
; 333  :     if (n_rpadding) {

  0004a	48 83 7c 24 60
	00		 cmp	 QWORD PTR n_rpadding$[rsp], 0
  00050	74 34		 je	 SHORT $LN1@fill_paddi

; 334  :         pos = writer->pos + nchars + n_lpadding;

  00052	48 8b 44 24 40	 mov	 rax, QWORD PTR writer$[rsp]
  00057	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0005b	48 03 44 24 48	 add	 rax, QWORD PTR nchars$[rsp]
  00060	48 03 44 24 58	 add	 rax, QWORD PTR n_lpadding$[rsp]
  00065	48 89 44 24 20	 mov	 QWORD PTR pos$[rsp], rax

; 335  :         _PyUnicode_FastFill(writer->buffer, pos, n_rpadding, fill_char);

  0006a	44 8b 4c 24 50	 mov	 r9d, DWORD PTR fill_char$[rsp]
  0006f	4c 8b 44 24 60	 mov	 r8, QWORD PTR n_rpadding$[rsp]
  00074	48 8b 54 24 20	 mov	 rdx, QWORD PTR pos$[rsp]
  00079	48 8b 44 24 40	 mov	 rax, QWORD PTR writer$[rsp]
  0007e	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00081	e8 00 00 00 00	 call	 _PyUnicode_FastFill
$LN1@fill_paddi:

; 336  :     }
; 337  : 
; 338  :     /* Pointer to the user content. */
; 339  :     writer->pos += n_lpadding;

  00086	48 8b 44 24 40	 mov	 rax, QWORD PTR writer$[rsp]
  0008b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0008f	48 03 44 24 58	 add	 rax, QWORD PTR n_lpadding$[rsp]
  00094	48 8b 4c 24 40	 mov	 rcx, QWORD PTR writer$[rsp]
  00099	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 340  :     return 0;

  0009d	33 c0		 xor	 eax, eax

; 341  : }

  0009f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a3	c3		 ret	 0
fill_padding ENDP
_TEXT	ENDS
PUBLIC	_Py_DecRef
EXTRN	PyObject_Str:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$format_obj DD imagerel format_obj
	DD	imagerel format_obj+82
	DD	imagerel $unwind$format_obj
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$format_obj DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT format_obj
_TEXT	SEGMENT
err$ = 32
str$ = 40
obj$ = 64
writer$ = 72
format_obj PROC						; COMDAT

; 1361 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1362 :     PyObject *str;
; 1363 :     int err;
; 1364 : 
; 1365 :     str = PyObject_Str(obj);

  0000e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR obj$[rsp]
  00013	e8 00 00 00 00	 call	 PyObject_Str
  00018	48 89 44 24 28	 mov	 QWORD PTR str$[rsp], rax

; 1366 :     if (str == NULL)

  0001d	48 83 7c 24 28
	00		 cmp	 QWORD PTR str$[rsp], 0
  00023	75 07		 jne	 SHORT $LN1@format_obj

; 1367 :         return -1;

  00025	b8 ff ff ff ff	 mov	 eax, -1
  0002a	eb 21		 jmp	 SHORT $LN2@format_obj
$LN1@format_obj:

; 1368 :     err = _PyUnicodeWriter_WriteStr(writer, str);

  0002c	48 8b 54 24 28	 mov	 rdx, QWORD PTR str$[rsp]
  00031	48 8b 4c 24 48	 mov	 rcx, QWORD PTR writer$[rsp]
  00036	e8 00 00 00 00	 call	 _PyUnicodeWriter_WriteStr
  0003b	89 44 24 20	 mov	 DWORD PTR err$[rsp], eax

; 1369 :     Py_DECREF(str);

  0003f	48 8b 4c 24 28	 mov	 rcx, QWORD PTR str$[rsp]
  00044	e8 00 00 00 00	 call	 _Py_DecRef

; 1370 :     return err;

  00049	8b 44 24 20	 mov	 eax, DWORD PTR err$[rsp]
$LN2@format_obj:

; 1371 : }

  0004d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00051	c3		 ret	 0
format_obj ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
EXTRN	_Py_Dealloc:PROC
EXTRN	_Py_NegativeRefcount:PROC
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_RefTotal:QWORD
EXTRN	Px_DecRef:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN13
	DD	imagerel $LN13+257
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
tv81 = 48
op$ = 80
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN13:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	0f 85 e6 00 00
	00		 jne	 $LN8@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00016	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0001b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0001f	48 83 e0 20	 and	 rax, 32			; 00000020H
  00023	48 85 c0	 test	 rax, rax
  00026	75 14		 jne	 SHORT $LN6@Py_DecRef
  00028	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0002d	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00031	48 25 80 00 00
	00		 and	 rax, 128		; 00000080H
  00037	48 85 c0	 test	 rax, rax
  0003a	74 0f		 je	 SHORT $LN7@Py_DecRef
$LN6@Py_DecRef:

; 926  :             Px_DECREF(op);

  0003c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  00041	e8 00 00 00 00	 call	 Px_DecRef
  00046	e9 b1 00 00 00	 jmp	 $LN5@Py_DecRef
$LN7@Py_DecRef:

; 927  :         else if (!Px_ISPX(op)) {

  0004b	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00050	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00054	48 83 e0 02	 and	 rax, 2
  00058	48 85 c0	 test	 rax, rax
  0005b	0f 85 9b 00 00
	00		 jne	 $LN4@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;

  00061	e8 00 00 00 00	 call	 _Py_PXCTX
  00066	85 c0		 test	 eax, eax
  00068	74 02		 je	 SHORT $LN11@Py_DecRef
  0006a	eb 11		 jmp	 SHORT $LN12@Py_DecRef
$LN11@Py_DecRef:
  0006c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00073	48 ff c8	 dec	 rax
  00076	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN12@Py_DecRef:

; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  0007d	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00082	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00086	48 ff c8	 dec	 rax
  00089	48 89 44 24 30	 mov	 QWORD PTR tv81[rsp], rax
  0008e	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00093	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv81[rsp]
  00098	48 89 48 50	 mov	 QWORD PTR [rax+80], rcx
  0009c	48 83 7c 24 30
	00		 cmp	 QWORD PTR tv81[rsp], 0
  000a2	74 4e		 je	 SHORT $LN3@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);

  000a4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000ac	4c 8b 4c 24 50	 mov	 r9, QWORD PTR op$[rsp]
  000b1	41 b8 a2 03 00
	00		 mov	 r8d, 930		; 000003a2H
  000b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000c5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ca	85 c0		 test	 eax, eax
  000cc	75 22		 jne	 SHORT $LN2@Py_DecRef
  000ce	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  000d3	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000d8	7d 16		 jge	 SHORT $LN2@Py_DecRef
  000da	4c 8b 44 24 50	 mov	 r8, QWORD PTR op$[rsp]
  000df	ba a2 03 00 00	 mov	 edx, 930		; 000003a2H
  000e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000eb	e8 00 00 00 00	 call	 _Py_NegativeRefcount
$LN2@Py_DecRef:

; 931  :             } else

  000f0	eb 0a		 jmp	 SHORT $LN1@Py_DecRef
$LN3@Py_DecRef:

; 932  :                 _Py_Dealloc((PyObject *)(op));

  000f2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  000f7	e8 00 00 00 00	 call	 _Py_Dealloc
$LN1@Py_DecRef:
$LN4@Py_DecRef:
$LN5@Py_DecRef:
$LN8@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  000fc	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00100	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
PUBLIC	_PyLong_FormatAdvancedWriter
EXTRN	PyNumber_Float:PROC
EXTRN	_PyLong_FormatWriter:PROC
EXTRN	PyLong_Type:BYTE
;	COMDAT pdata
; File c:\src\pyparallel\python\formatter_unicode.c
pdata	SEGMENT
$pdata$_PyLong_FormatAdvancedWriter DD imagerel $LN23
	DD	imagerel $LN23+536
	DD	imagerel $unwind$_PyLong_FormatAdvancedWriter
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyLong_FormatAdvancedWriter DD 021b01H
	DD	011011bH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _PyLong_FormatAdvancedWriter
_TEXT	SEGMENT
tmp$ = 48
format$ = 56
result$ = 104
str$ = 112
tv83 = 120
writer$ = 144
obj$ = 152
format_spec$ = 160
start$ = 168
end$ = 176
_PyLong_FormatAdvancedWriter PROC			; COMDAT

; 1414 : {

$LN23:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 1415 :     PyObject *tmp = NULL, *str = NULL;

  0001b	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  00024	48 c7 44 24 70
	00 00 00 00	 mov	 QWORD PTR str$[rsp], 0

; 1416 :     InternalFormatSpec format;
; 1417 :     int result = -1;

  0002d	c7 44 24 68 ff
	ff ff ff	 mov	 DWORD PTR result$[rsp], -1

; 1418 : 
; 1419 :     /* check for the special case of zero length format spec, make
; 1420 :        it equivalent to str(obj) */
; 1421 :     if (start == end) {

  00035	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR end$[rsp]
  0003d	48 39 84 24 a8
	00 00 00	 cmp	 QWORD PTR start$[rsp], rax
  00045	75 54		 jne	 SHORT $LN18@PyLong_For

; 1422 :         if (PyLong_CheckExact(obj))

  00047	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyLong_Type
  0004e	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  00056	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0005a	75 25		 jne	 SHORT $LN17@PyLong_For

; 1423 :             return _PyLong_FormatWriter(writer, obj, 10, 0);

  0005c	45 33 c9	 xor	 r9d, r9d
  0005f	41 b8 0a 00 00
	00		 mov	 r8d, 10
  00065	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR obj$[rsp]
  0006d	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR writer$[rsp]
  00075	e8 00 00 00 00	 call	 _PyLong_FormatWriter
  0007a	e9 30 01 00 00	 jmp	 $LN19@PyLong_For

; 1424 :         else

  0007f	eb 1a		 jmp	 SHORT $LN16@PyLong_For
$LN17@PyLong_For:

; 1425 :             return format_obj(obj, writer);

  00081	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR writer$[rsp]
  00089	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  00091	e8 00 00 00 00	 call	 format_obj
  00096	e9 14 01 00 00	 jmp	 $LN19@PyLong_For
$LN16@PyLong_For:
$LN18@PyLong_For:

; 1426 :     }
; 1427 : 
; 1428 :     /* parse the format_spec */
; 1429 :     if (!parse_internal_render_format_spec(format_spec, start, end,
; 1430 :                                            &format, 'd', '>'))

  0009b	c6 44 24 28 3e	 mov	 BYTE PTR [rsp+40], 62	; 0000003eH
  000a0	c6 44 24 20 64	 mov	 BYTE PTR [rsp+32], 100	; 00000064H
  000a5	4c 8d 4c 24 38	 lea	 r9, QWORD PTR format$[rsp]
  000aa	4c 8b 84 24 b0
	00 00 00	 mov	 r8, QWORD PTR end$[rsp]
  000b2	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR start$[rsp]
  000ba	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR format_spec$[rsp]
  000c2	e8 00 00 00 00	 call	 parse_internal_render_format_spec
  000c7	85 c0		 test	 eax, eax
  000c9	75 05		 jne	 SHORT $LN15@PyLong_For

; 1431 :         goto done;

  000cb	e9 ab 00 00 00	 jmp	 $done$22485
$LN15@PyLong_For:

; 1432 : 
; 1433 :     /* type conversion? */
; 1434 :     switch (format.type) {

  000d0	8b 44 24 60	 mov	 eax, DWORD PTR format$[rsp+40]
  000d4	89 44 24 78	 mov	 DWORD PTR tv83[rsp], eax
  000d8	8b 44 24 78	 mov	 eax, DWORD PTR tv83[rsp]
  000dc	83 e8 25	 sub	 eax, 37			; 00000025H
  000df	89 44 24 78	 mov	 DWORD PTR tv83[rsp], eax
  000e3	83 7c 24 78 53	 cmp	 DWORD PTR tv83[rsp], 83	; 00000053H
  000e8	77 78		 ja	 SHORT $LN9@PyLong_For
  000ea	8b 44 24 78	 mov	 eax, DWORD PTR tv83[rsp]
  000ee	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  000f5	0f b6 84 01 00
	00 00 00	 movzx	 eax, BYTE PTR $LN21@PyLong_For[rcx+rax]
  000fd	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN22@PyLong_For[rcx+rax*4]
  00104	48 03 c1	 add	 rax, rcx
  00107	ff e0		 jmp	 rax
$LN12@PyLong_For:

; 1435 :     case 'b':
; 1436 :     case 'c':
; 1437 :     case 'd':
; 1438 :     case 'o':
; 1439 :     case 'x':
; 1440 :     case 'X':
; 1441 :     case 'n':
; 1442 :         /* no type conversion needed, already an int.  do the formatting */
; 1443 :         result = format_long_internal(obj, &format, writer);

  00109	4c 8b 84 24 90
	00 00 00	 mov	 r8, QWORD PTR writer$[rsp]
  00111	48 8d 54 24 38	 lea	 rdx, QWORD PTR format$[rsp]
  00116	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  0011e	e8 00 00 00 00	 call	 format_long_internal
  00123	89 44 24 68	 mov	 DWORD PTR result$[rsp], eax

; 1444 :         break;

  00127	eb 52		 jmp	 SHORT $LN13@PyLong_For
$LN11@PyLong_For:

; 1445 : 
; 1446 :     case 'e':
; 1447 :     case 'E':
; 1448 :     case 'f':
; 1449 :     case 'F':
; 1450 :     case 'g':
; 1451 :     case 'G':
; 1452 :     case '%':
; 1453 :         /* convert to float */
; 1454 :         tmp = PyNumber_Float(obj);

  00129	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  00131	e8 00 00 00 00	 call	 PyNumber_Float
  00136	48 89 44 24 30	 mov	 QWORD PTR tmp$[rsp], rax

; 1455 :         if (tmp == NULL)

  0013b	48 83 7c 24 30
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  00141	75 02		 jne	 SHORT $LN10@PyLong_For

; 1456 :             goto done;

  00143	eb 36		 jmp	 SHORT $done$22485
$LN10@PyLong_For:

; 1457 :         result = format_float_internal(tmp, &format, writer);

  00145	4c 8b 84 24 90
	00 00 00	 mov	 r8, QWORD PTR writer$[rsp]
  0014d	48 8d 54 24 38	 lea	 rdx, QWORD PTR format$[rsp]
  00152	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tmp$[rsp]
  00157	e8 00 00 00 00	 call	 format_float_internal
  0015c	89 44 24 68	 mov	 DWORD PTR result$[rsp], eax

; 1458 :         break;

  00160	eb 19		 jmp	 SHORT $LN13@PyLong_For
$LN9@PyLong_For:

; 1459 : 
; 1460 :     default:
; 1461 :         /* unknown */
; 1462 :         unknown_presentation_type(format.type, obj->ob_type->tp_name);

  00162	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR obj$[rsp]
  0016a	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0016e	48 8b 50 70	 mov	 rdx, QWORD PTR [rax+112]
  00172	8b 4c 24 60	 mov	 ecx, DWORD PTR format$[rsp+40]
  00176	e8 00 00 00 00	 call	 unknown_presentation_type
$LN13@PyLong_For:
$done$22485:
$LN8@PyLong_For:

; 1463 :         goto done;
; 1464 :     }
; 1465 : 
; 1466 : done:
; 1467 :     Py_XDECREF(tmp);

  0017b	48 83 7c 24 30
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  00181	74 0a		 je	 SHORT $LN5@PyLong_For
  00183	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tmp$[rsp]
  00188	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@PyLong_For:
  0018d	33 c0		 xor	 eax, eax
  0018f	85 c0		 test	 eax, eax
  00191	75 e8		 jne	 SHORT $LN8@PyLong_For
$LN4@PyLong_For:

; 1468 :     Py_XDECREF(str);

  00193	48 83 7c 24 70
	00		 cmp	 QWORD PTR str$[rsp], 0
  00199	74 0a		 je	 SHORT $LN1@PyLong_For
  0019b	48 8b 4c 24 70	 mov	 rcx, QWORD PTR str$[rsp]
  001a0	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@PyLong_For:
  001a5	33 c0		 xor	 eax, eax
  001a7	85 c0		 test	 eax, eax
  001a9	75 e8		 jne	 SHORT $LN4@PyLong_For

; 1469 :     return result;

  001ab	8b 44 24 68	 mov	 eax, DWORD PTR result$[rsp]
$LN19@PyLong_For:

; 1470 : }

  001af	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  001b6	c3		 ret	 0
  001b7	90		 npad	 1
$LN22@PyLong_For:
  001b8	00 00 00 00	 DD	 $LN11@PyLong_For
  001bc	00 00 00 00	 DD	 $LN12@PyLong_For
  001c0	00 00 00 00	 DD	 $LN9@PyLong_For
$LN21@PyLong_For:
  001c4	00		 DB	 0
  001c5	02		 DB	 2
  001c6	02		 DB	 2
  001c7	02		 DB	 2
  001c8	02		 DB	 2
  001c9	02		 DB	 2
  001ca	02		 DB	 2
  001cb	02		 DB	 2
  001cc	02		 DB	 2
  001cd	02		 DB	 2
  001ce	02		 DB	 2
  001cf	02		 DB	 2
  001d0	02		 DB	 2
  001d1	02		 DB	 2
  001d2	02		 DB	 2
  001d3	02		 DB	 2
  001d4	02		 DB	 2
  001d5	02		 DB	 2
  001d6	02		 DB	 2
  001d7	02		 DB	 2
  001d8	02		 DB	 2
  001d9	02		 DB	 2
  001da	02		 DB	 2
  001db	02		 DB	 2
  001dc	02		 DB	 2
  001dd	02		 DB	 2
  001de	02		 DB	 2
  001df	02		 DB	 2
  001e0	02		 DB	 2
  001e1	02		 DB	 2
  001e2	02		 DB	 2
  001e3	02		 DB	 2
  001e4	00		 DB	 0
  001e5	00		 DB	 0
  001e6	00		 DB	 0
  001e7	02		 DB	 2
  001e8	02		 DB	 2
  001e9	02		 DB	 2
  001ea	02		 DB	 2
  001eb	02		 DB	 2
  001ec	02		 DB	 2
  001ed	02		 DB	 2
  001ee	02		 DB	 2
  001ef	02		 DB	 2
  001f0	02		 DB	 2
  001f1	02		 DB	 2
  001f2	02		 DB	 2
  001f3	02		 DB	 2
  001f4	02		 DB	 2
  001f5	02		 DB	 2
  001f6	02		 DB	 2
  001f7	01		 DB	 1
  001f8	02		 DB	 2
  001f9	02		 DB	 2
  001fa	02		 DB	 2
  001fb	02		 DB	 2
  001fc	02		 DB	 2
  001fd	02		 DB	 2
  001fe	02		 DB	 2
  001ff	02		 DB	 2
  00200	02		 DB	 2
  00201	01		 DB	 1
  00202	01		 DB	 1
  00203	01		 DB	 1
  00204	00		 DB	 0
  00205	00		 DB	 0
  00206	00		 DB	 0
  00207	02		 DB	 2
  00208	02		 DB	 2
  00209	02		 DB	 2
  0020a	02		 DB	 2
  0020b	02		 DB	 2
  0020c	02		 DB	 2
  0020d	01		 DB	 1
  0020e	01		 DB	 1
  0020f	02		 DB	 2
  00210	02		 DB	 2
  00211	02		 DB	 2
  00212	02		 DB	 2
  00213	02		 DB	 2
  00214	02		 DB	 2
  00215	02		 DB	 2
  00216	02		 DB	 2
  00217	01		 DB	 1
_PyLong_FormatAdvancedWriter ENDP
_TEXT	ENDS
PUBLIC	??_C@_1EM@IINJPAMD@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAt?$AAm?$AAp?$AA?$CJ?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt@ ; `string'
PUBLIC	??_C@_1DE@IBLMGADF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAt?$AAm?$AAp?$AA?$CJ?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CO@DKGODOAN@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAt?$AAm?$AAp?$AA?$CJ?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DA@EGEPCFHI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAt?$AAm?$AAp?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CK@BPGMFFC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAt?$AAm?$AAp?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_0BO@CEOKNOOI@?$CFc?5arg?5not?5in?5range?$CI0x110000?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0DD@EICNLEJK@Sign?5not?5allowed?5with?5integer?5fo@ ; `string'
PUBLIC	??_C@_0DC@GFGFPDDC@Precision?5not?5allowed?5in?5integer@ ; `string'
EXTRN	_PyUnicode_Ready:PROC
EXTRN	_PyLong_Format:PROC
EXTRN	PyUnicode_FromOrdinal:PROC
EXTRN	PyExc_OverflowError:QWORD
EXTRN	PyErr_Occurred:PROC
EXTRN	PyLong_AsLong:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$format_long_internal DD imagerel format_long_internal
	DD	imagerel format_long_internal+3314
	DD	imagerel $unwind$format_long_internal
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$format_long_internal DD 021601H
	DD	0350116H
xdata	ENDS
;	COMDAT ??_C@_1EM@IINJPAMD@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAt?$AAm?$AAp?$AA?$CJ?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt@
CONST	SEGMENT
??_C@_1EM@IINJPAMD@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAt?$AAm?$AAp?$AA?$CJ?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt@ DB '('
	DB	00H, '(', 00H, 'P', 00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H
	DB	'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'O', 00H, 'b', 00H, 'j'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, '*', 00H, ')', 00H, '(', 00H
	DB	'(', 00H, 't', 00H, 'm', 00H, 'p', 00H, ')', 00H, ')', 00H, ')'
	DB	00H, '-', 00H, '>', 00H, 'd', 00H, 'a', 00H, 't', 00H, 'a', 00H
	DB	'.', 00H, 'a', 00H, 'n', 00H, 'y', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DE@IBLMGADF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAt?$AAm?$AAp?$AA?$CJ?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DE@IBLMGADF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAt?$AAm?$AAp?$AA?$CJ?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'I', 00H, 'S', 00H, '_', 00H, 'R'
	DB	00H, 'E', 00H, 'A', 00H, 'D', 00H, 'Y', 00H, '(', 00H, '(', 00H
	DB	't', 00H, 'm', 00H, 'p', 00H, ')', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CO@DKGODOAN@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAt?$AAm?$AAp?$AA?$CJ?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CO@DKGODOAN@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAt?$AAm?$AAp?$AA?$CJ?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, '(', 00H, 't', 00H, 'm', 00H, 'p', 00H
	DB	')', 00H, ')', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1DA@EGEPCFHI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAt?$AAm?$AAp?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DA@EGEPCFHI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAt?$AAm?$AAp?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'I', 00H, 'S', 00H, '_', 00H, 'R'
	DB	00H, 'E', 00H, 'A', 00H, 'D', 00H, 'Y', 00H, '(', 00H, 't', 00H
	DB	'm', 00H, 'p', 00H, ')', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@BPGMFFC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAt?$AAm?$AAp?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CK@BPGMFFC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAt?$AAm?$AAp?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, 't', 00H, 'm', 00H, 'p', 00H, ')', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@CEOKNOOI@?$CFc?5arg?5not?5in?5range?$CI0x110000?$CJ?$AA@
CONST	SEGMENT
??_C@_0BO@CEOKNOOI@?$CFc?5arg?5not?5in?5range?$CI0x110000?$CJ?$AA@ DB '%c'
	DB	' arg not in range(0x110000)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@EICNLEJK@Sign?5not?5allowed?5with?5integer?5fo@
CONST	SEGMENT
??_C@_0DD@EICNLEJK@Sign?5not?5allowed?5with?5integer?5fo@ DB 'Sign not al'
	DB	'lowed with integer format specifier ''c''', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@GFGFPDDC@Precision?5not?5allowed?5in?5integer@
CONST	SEGMENT
??_C@_0DC@GFGFPDDC@Precision?5not?5allowed?5in?5integer@ DB 'Precision no'
	DB	't allowed in integer format specifier', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT format_long_internal
_TEXT	SEGMENT
maxchar$ = 96
x$ = 100
prefix$ = 104
n_remainder$ = 112
sign_char$ = 120
tmp$ = 128
locale$ = 136
n_total$ = 160
n_prefix$ = 168
inumeric_chars$ = 176
spec$ = 192
result$ = 288
n_digits$ = 296
leading_chars_to_skip$21910 = 304
base$21909 = 308
tv86 = 312
tv88 = 316
tv166 = 320
tv254 = 328
tv263 = 336
tv378 = 344
tv319 = 352
tv328 = 360
tv377 = 368
tv365 = 376
tv374 = 384
tv393 = 392
tv392 = 396
tv421 = 400
tv420 = 404
tv426 = 408
tv430 = 412
value$ = 432
format$ = 440
writer$ = 448
format_long_internal PROC				; COMDAT

; 808  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 81 ec a8 01
	00 00		 sub	 rsp, 424		; 000001a8H

; 809  :     int result = -1;

  00016	c7 84 24 20 01
	00 00 ff ff ff
	ff		 mov	 DWORD PTR result$[rsp], -1

; 810  :     Py_UCS4 maxchar = 127;

  00021	c7 44 24 60 7f
	00 00 00	 mov	 DWORD PTR maxchar$[rsp], 127 ; 0000007fH

; 811  :     PyObject *tmp = NULL;

  00029	48 c7 84 24 80
	00 00 00 00 00
	00 00		 mov	 QWORD PTR tmp$[rsp], 0

; 812  :     Py_ssize_t inumeric_chars;
; 813  :     Py_UCS4 sign_char = '\0';

  00035	c7 44 24 78 00
	00 00 00	 mov	 DWORD PTR sign_char$[rsp], 0

; 814  :     Py_ssize_t n_digits;       /* count of digits need from the computed
; 815  :                                   string */
; 816  :     Py_ssize_t n_remainder = 0; /* Used only for 'c' formatting, which

  0003d	48 c7 44 24 70
	00 00 00 00	 mov	 QWORD PTR n_remainder$[rsp], 0

; 817  :                                    produces non-digits */
; 818  :     Py_ssize_t n_prefix = 0;   /* Count of prefix chars, (e.g., '0x') */

  00046	48 c7 84 24 a8
	00 00 00 00 00
	00 00		 mov	 QWORD PTR n_prefix$[rsp], 0

; 819  :     Py_ssize_t n_total;
; 820  :     Py_ssize_t prefix = 0;

  00052	48 c7 44 24 68
	00 00 00 00	 mov	 QWORD PTR prefix$[rsp], 0

; 821  :     NumberFieldWidths spec;
; 822  :     long x;
; 823  : 
; 824  :     /* Locale settings, either from the actual locale or
; 825  :        from a hard-code pseudo-locale */
; 826  :     LocaleInfo locale = STATIC_LOCALE_INFO_INIT;

  0005b	48 c7 84 24 88
	00 00 00 00 00
	00 00		 mov	 QWORD PTR locale$[rsp], 0
  00067	48 c7 84 24 90
	00 00 00 00 00
	00 00		 mov	 QWORD PTR locale$[rsp+8], 0
  00073	48 c7 84 24 98
	00 00 00 00 00
	00 00		 mov	 QWORD PTR locale$[rsp+16], 0

; 827  : 
; 828  :     /* no precision allowed on integers */
; 829  :     if (format->precision != -1) {

  0007f	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR format$[rsp]
  00087	48 83 78 20 ff	 cmp	 QWORD PTR [rax+32], -1
  0008c	74 18		 je	 SHORT $LN24@format_lon

; 830  :         PyErr_SetString(PyExc_ValueError,
; 831  :                         "Precision not allowed in integer format specifier");

  0008e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DC@GFGFPDDC@Precision?5not?5allowed?5in?5integer@
  00095	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0009c	e8 00 00 00 00	 call	 PyErr_SetString

; 832  :         goto done;

  000a1	e9 12 0c 00 00	 jmp	 $done$21898
$LN24@format_lon:

; 833  :     }
; 834  : 
; 835  :     /* special case for character formatting */
; 836  :     if (format->type == 'c') {

  000a6	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR format$[rsp]
  000ae	83 78 28 63	 cmp	 DWORD PTR [rax+40], 99	; 00000063H
  000b2	0f 85 da 00 00
	00		 jne	 $LN23@format_lon

; 837  :         /* error to specify a sign */
; 838  :         if (format->sign != '\0') {

  000b8	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR format$[rsp]
  000c0	83 78 0c 00	 cmp	 DWORD PTR [rax+12], 0
  000c4	74 18		 je	 SHORT $LN22@format_lon

; 839  :             PyErr_SetString(PyExc_ValueError,
; 840  :                             "Sign not allowed with integer"
; 841  :                             " format specifier 'c'");

  000c6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DD@EICNLEJK@Sign?5not?5allowed?5with?5integer?5fo@
  000cd	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  000d4	e8 00 00 00 00	 call	 PyErr_SetString

; 842  :             goto done;

  000d9	e9 da 0b 00 00	 jmp	 $done$21898
$LN22@format_lon:

; 843  :         }
; 844  : 
; 845  :         /* taken from unicodeobject.c formatchar() */
; 846  :         /* Integer input truncated to a character */
; 847  :         x = PyLong_AsLong(value);

  000de	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR value$[rsp]
  000e6	e8 00 00 00 00	 call	 PyLong_AsLong
  000eb	89 44 24 64	 mov	 DWORD PTR x$[rsp], eax

; 848  :         if (x == -1 && PyErr_Occurred())

  000ef	83 7c 24 64 ff	 cmp	 DWORD PTR x$[rsp], -1
  000f4	75 0f		 jne	 SHORT $LN21@format_lon
  000f6	e8 00 00 00 00	 call	 PyErr_Occurred
  000fb	48 85 c0	 test	 rax, rax
  000fe	74 05		 je	 SHORT $LN21@format_lon

; 849  :             goto done;

  00100	e9 b3 0b 00 00	 jmp	 $done$21898
$LN21@format_lon:

; 850  :         if (x < 0 || x > 0x10ffff) {

  00105	83 7c 24 64 00	 cmp	 DWORD PTR x$[rsp], 0
  0010a	7c 0a		 jl	 SHORT $LN19@format_lon
  0010c	81 7c 24 64 ff
	ff 10 00	 cmp	 DWORD PTR x$[rsp], 1114111 ; 0010ffffH
  00114	7e 18		 jle	 SHORT $LN20@format_lon
$LN19@format_lon:

; 851  :             PyErr_SetString(PyExc_OverflowError,
; 852  :                             "%c arg not in range(0x110000)");

  00116	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BO@CEOKNOOI@?$CFc?5arg?5not?5in?5range?$CI0x110000?$CJ?$AA@
  0011d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_OverflowError
  00124	e8 00 00 00 00	 call	 PyErr_SetString

; 853  :             goto done;

  00129	e9 8a 0b 00 00	 jmp	 $done$21898
$LN20@format_lon:

; 854  :         }
; 855  :         tmp = PyUnicode_FromOrdinal(x);

  0012e	8b 4c 24 64	 mov	 ecx, DWORD PTR x$[rsp]
  00132	e8 00 00 00 00	 call	 PyUnicode_FromOrdinal
  00137	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tmp$[rsp], rax

; 856  :         inumeric_chars = 0;

  0013f	48 c7 84 24 b0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR inumeric_chars$[rsp], 0

; 857  :         n_digits = 1;

  0014b	48 c7 84 24 28
	01 00 00 01 00
	00 00		 mov	 QWORD PTR n_digits$[rsp], 1

; 858  :         maxchar = Py_MAX(maxchar, (Py_UCS4)x);

  00157	8b 44 24 64	 mov	 eax, DWORD PTR x$[rsp]
  0015b	39 44 24 60	 cmp	 DWORD PTR maxchar$[rsp], eax
  0015f	76 0d		 jbe	 SHORT $LN27@format_lon
  00161	8b 44 24 60	 mov	 eax, DWORD PTR maxchar$[rsp]
  00165	89 84 24 38 01
	00 00		 mov	 DWORD PTR tv86[rsp], eax
  0016c	eb 0b		 jmp	 SHORT $LN28@format_lon
$LN27@format_lon:
  0016e	8b 44 24 64	 mov	 eax, DWORD PTR x$[rsp]
  00172	89 84 24 38 01
	00 00		 mov	 DWORD PTR tv86[rsp], eax
$LN28@format_lon:
  00179	8b 84 24 38 01
	00 00		 mov	 eax, DWORD PTR tv86[rsp]
  00180	89 44 24 60	 mov	 DWORD PTR maxchar$[rsp], eax

; 859  : 
; 860  :         /* As a sort-of hack, we tell calc_number_widths that we only
; 861  :            have "remainder" characters. calc_number_widths thinks
; 862  :            these are characters that don't get formatted, only copied
; 863  :            into the output string. We do this for 'c' formatting,
; 864  :            because the characters are likely to be non-digits. */
; 865  :         n_remainder = 1;

  00184	48 c7 44 24 70
	01 00 00 00	 mov	 QWORD PTR n_remainder$[rsp], 1

; 866  :     }
; 867  :     else {

  0018d	e9 c6 08 00 00	 jmp	 $LN18@format_lon
$LN23@format_lon:

; 868  :         int base;
; 869  :         int leading_chars_to_skip = 0;  /* Number of characters added by

  00192	c7 84 24 30 01
	00 00 00 00 00
	00		 mov	 DWORD PTR leading_chars_to_skip$21910[rsp], 0

; 870  :                                            PyNumber_ToBase that we want to
; 871  :                                            skip over. */
; 872  : 
; 873  :         /* Compute the base and how many characters will be added by
; 874  :            PyNumber_ToBase */
; 875  :         switch (format->type) {

  0019d	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR format$[rsp]
  001a5	8b 40 28	 mov	 eax, DWORD PTR [rax+40]
  001a8	89 84 24 3c 01
	00 00		 mov	 DWORD PTR tv88[rsp], eax
  001af	83 bc 24 3c 01
	00 00 58	 cmp	 DWORD PTR tv88[rsp], 88	; 00000058H
  001b7	74 50		 je	 SHORT $LN13@format_lon
  001b9	83 bc 24 3c 01
	00 00 62	 cmp	 DWORD PTR tv88[rsp], 98	; 00000062H
  001c1	74 16		 je	 SHORT $LN15@format_lon
  001c3	83 bc 24 3c 01
	00 00 6f	 cmp	 DWORD PTR tv88[rsp], 111 ; 0000006fH
  001cb	74 24		 je	 SHORT $LN14@format_lon
  001cd	83 bc 24 3c 01
	00 00 78	 cmp	 DWORD PTR tv88[rsp], 120 ; 00000078H
  001d5	74 32		 je	 SHORT $LN13@format_lon
  001d7	eb 48		 jmp	 SHORT $LN12@format_lon
$LN15@format_lon:

; 876  :         case 'b':
; 877  :             base = 2;

  001d9	c7 84 24 34 01
	00 00 02 00 00
	00		 mov	 DWORD PTR base$21909[rsp], 2

; 878  :             leading_chars_to_skip = 2; /* 0b */

  001e4	c7 84 24 30 01
	00 00 02 00 00
	00		 mov	 DWORD PTR leading_chars_to_skip$21910[rsp], 2

; 879  :             break;

  001ef	eb 3b		 jmp	 SHORT $LN16@format_lon
$LN14@format_lon:

; 880  :         case 'o':
; 881  :             base = 8;

  001f1	c7 84 24 34 01
	00 00 08 00 00
	00		 mov	 DWORD PTR base$21909[rsp], 8

; 882  :             leading_chars_to_skip = 2; /* 0o */

  001fc	c7 84 24 30 01
	00 00 02 00 00
	00		 mov	 DWORD PTR leading_chars_to_skip$21910[rsp], 2

; 883  :             break;

  00207	eb 23		 jmp	 SHORT $LN16@format_lon
$LN13@format_lon:

; 884  :         case 'x':
; 885  :         case 'X':
; 886  :             base = 16;

  00209	c7 84 24 34 01
	00 00 10 00 00
	00		 mov	 DWORD PTR base$21909[rsp], 16

; 887  :             leading_chars_to_skip = 2; /* 0x */

  00214	c7 84 24 30 01
	00 00 02 00 00
	00		 mov	 DWORD PTR leading_chars_to_skip$21910[rsp], 2

; 888  :             break;

  0021f	eb 0b		 jmp	 SHORT $LN16@format_lon
$LN12@format_lon:

; 889  :         default:  /* shouldn't be needed, but stops a compiler warning */
; 890  :         case 'd':
; 891  :         case 'n':
; 892  :             base = 10;

  00221	c7 84 24 34 01
	00 00 0a 00 00
	00		 mov	 DWORD PTR base$21909[rsp], 10
$LN16@format_lon:

; 893  :             break;
; 894  :         }
; 895  : 
; 896  :         if (format->sign != '+' && format->sign != ' '
; 897  :             && format->width == -1
; 898  :             && format->type != 'X' && format->type != 'n'
; 899  :             && !format->thousands_separators
; 900  :             && PyLong_CheckExact(value))

  0022c	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR format$[rsp]
  00234	83 78 0c 2b	 cmp	 DWORD PTR [rax+12], 43	; 0000002bH
  00238	0f 84 8a 00 00
	00		 je	 $LN11@format_lon
  0023e	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR format$[rsp]
  00246	83 78 0c 20	 cmp	 DWORD PTR [rax+12], 32	; 00000020H
  0024a	74 7c		 je	 SHORT $LN11@format_lon
  0024c	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR format$[rsp]
  00254	48 83 78 10 ff	 cmp	 QWORD PTR [rax+16], -1
  00259	75 6d		 jne	 SHORT $LN11@format_lon
  0025b	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR format$[rsp]
  00263	83 78 28 58	 cmp	 DWORD PTR [rax+40], 88	; 00000058H
  00267	74 5f		 je	 SHORT $LN11@format_lon
  00269	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR format$[rsp]
  00271	83 78 28 6e	 cmp	 DWORD PTR [rax+40], 110	; 0000006eH
  00275	74 51		 je	 SHORT $LN11@format_lon
  00277	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR format$[rsp]
  0027f	83 78 18 00	 cmp	 DWORD PTR [rax+24], 0
  00283	75 43		 jne	 SHORT $LN11@format_lon
  00285	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyLong_Type
  0028c	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR value$[rsp]
  00294	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00298	75 2e		 jne	 SHORT $LN11@format_lon

; 901  :         {
; 902  :             /* Fast path */
; 903  :             return _PyLong_FormatWriter(writer, value, base, format->alternate);

  0029a	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR format$[rsp]
  002a2	44 8b 48 08	 mov	 r9d, DWORD PTR [rax+8]
  002a6	44 8b 84 24 34
	01 00 00	 mov	 r8d, DWORD PTR base$21909[rsp]
  002ae	48 8b 94 24 b0
	01 00 00	 mov	 rdx, QWORD PTR value$[rsp]
  002b6	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR writer$[rsp]
  002be	e8 00 00 00 00	 call	 _PyLong_FormatWriter
  002c3	e9 22 0a 00 00	 jmp	 $LN25@format_lon
$LN11@format_lon:

; 904  :         }
; 905  : 
; 906  :         /* The number of prefix chars is the same as the leading
; 907  :            chars to skip */
; 908  :         if (format->alternate)

  002c8	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR format$[rsp]
  002d0	83 78 08 00	 cmp	 DWORD PTR [rax+8], 0
  002d4	74 10		 je	 SHORT $LN10@format_lon

; 909  :             n_prefix = leading_chars_to_skip;

  002d6	48 63 84 24 30
	01 00 00	 movsxd	 rax, DWORD PTR leading_chars_to_skip$21910[rsp]
  002de	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR n_prefix$[rsp], rax
$LN10@format_lon:

; 910  : 
; 911  :         /* Do the hard part, converting to a string in a given base */
; 912  :         tmp = _PyLong_Format(value, base);

  002e6	8b 94 24 34 01
	00 00		 mov	 edx, DWORD PTR base$21909[rsp]
  002ed	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR value$[rsp]
  002f5	e8 00 00 00 00	 call	 _PyLong_Format
  002fa	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tmp$[rsp], rax

; 913  :         if (tmp == NULL || PyUnicode_READY(tmp) == -1)

  00302	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR tmp$[rsp], 0
  0030b	74 77		 je	 SHORT $LN8@format_lon
  0030d	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR tmp$[rsp]
  00315	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00319	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0031f	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00324	85 c0		 test	 eax, eax
  00326	75 1c		 jne	 SHORT $LN29@format_lon
  00328	41 b8 91 03 00
	00		 mov	 r8d, 913		; 00000391H
  0032e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00335	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@BPGMFFC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAt?$AAm?$AAp?$AA?$CJ?$AA?$AA@
  0033c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00342	33 c0		 xor	 eax, eax
$LN29@format_lon:
  00344	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR tmp$[rsp]
  0034c	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0034f	c1 e8 07	 shr	 eax, 7
  00352	83 e0 01	 and	 eax, 1
  00355	85 c0		 test	 eax, eax
  00357	74 0d		 je	 SHORT $LN30@format_lon
  00359	c7 84 24 40 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv166[rsp], 0
  00364	eb 14		 jmp	 SHORT $LN31@format_lon
$LN30@format_lon:
  00366	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR tmp$[rsp]
  0036e	e8 00 00 00 00	 call	 _PyUnicode_Ready
  00373	89 84 24 40 01
	00 00		 mov	 DWORD PTR tv166[rsp], eax
$LN31@format_lon:
  0037a	83 bc 24 40 01
	00 00 ff	 cmp	 DWORD PTR tv166[rsp], -1
  00382	75 05		 jne	 SHORT $LN9@format_lon
$LN8@format_lon:

; 914  :             goto done;

  00384	e9 2f 09 00 00	 jmp	 $done$21898
$LN9@format_lon:

; 915  : 
; 916  :         inumeric_chars = 0;

  00389	48 c7 84 24 b0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR inumeric_chars$[rsp], 0

; 917  :         n_digits = PyUnicode_GET_LENGTH(tmp);

  00395	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR tmp$[rsp]
  0039d	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  003a1	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  003a7	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  003ac	85 c0		 test	 eax, eax
  003ae	75 1c		 jne	 SHORT $LN32@format_lon
  003b0	41 b8 95 03 00
	00		 mov	 r8d, 917		; 00000395H
  003b6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  003bd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@BPGMFFC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAt?$AAm?$AAp?$AA?$CJ?$AA?$AA@
  003c4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  003ca	33 c0		 xor	 eax, eax
$LN32@format_lon:
  003cc	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR tmp$[rsp]
  003d4	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  003d7	c1 e8 07	 shr	 eax, 7
  003da	83 e0 01	 and	 eax, 1
  003dd	85 c0		 test	 eax, eax
  003df	75 1c		 jne	 SHORT $LN33@format_lon
  003e1	41 b8 95 03 00
	00		 mov	 r8d, 917		; 00000395H
  003e7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  003ee	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@EGEPCFHI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAt?$AAm?$AAp?$AA?$CJ?$AA?$AA@
  003f5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  003fb	33 c0		 xor	 eax, eax
$LN33@format_lon:
  003fd	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR tmp$[rsp]
  00405	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00409	48 89 84 24 28
	01 00 00	 mov	 QWORD PTR n_digits$[rsp], rax

; 918  : 
; 919  :         prefix = inumeric_chars;

  00411	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR inumeric_chars$[rsp]
  00419	48 89 44 24 68	 mov	 QWORD PTR prefix$[rsp], rax

; 920  : 
; 921  :         /* Is a sign character present in the output?  If so, remember it
; 922  :            and skip it */
; 923  :         if (PyUnicode_READ_CHAR(tmp, inumeric_chars) == '-') {

  0041e	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR tmp$[rsp]
  00426	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0042a	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00430	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00435	85 c0		 test	 eax, eax
  00437	75 1c		 jne	 SHORT $LN34@format_lon
  00439	41 b8 9b 03 00
	00		 mov	 r8d, 923		; 0000039bH
  0043f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00446	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@BPGMFFC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAt?$AAm?$AAp?$AA?$CJ?$AA?$AA@
  0044d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00453	33 c0		 xor	 eax, eax
$LN34@format_lon:
  00455	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR tmp$[rsp]
  0045d	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00460	c1 e8 07	 shr	 eax, 7
  00463	83 e0 01	 and	 eax, 1
  00466	85 c0		 test	 eax, eax
  00468	75 1c		 jne	 SHORT $LN35@format_lon
  0046a	41 b8 9b 03 00
	00		 mov	 r8d, 923		; 0000039bH
  00470	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00477	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@EGEPCFHI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAt?$AAm?$AAp?$AA?$CJ?$AA?$AA@
  0047e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00484	33 c0		 xor	 eax, eax
$LN35@format_lon:
  00486	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR tmp$[rsp]
  0048e	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00492	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00498	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0049d	85 c0		 test	 eax, eax
  0049f	75 1c		 jne	 SHORT $LN36@format_lon
  004a1	41 b8 9b 03 00
	00		 mov	 r8d, 923		; 0000039bH
  004a7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  004ae	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@DKGODOAN@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAt?$AAm?$AAp?$AA?$CJ?$AA?$CJ?$AA?$AA@
  004b5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  004bb	33 c0		 xor	 eax, eax
$LN36@format_lon:
  004bd	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR tmp$[rsp]
  004c5	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  004c8	c1 e8 07	 shr	 eax, 7
  004cb	83 e0 01	 and	 eax, 1
  004ce	85 c0		 test	 eax, eax
  004d0	75 1c		 jne	 SHORT $LN37@format_lon
  004d2	41 b8 9b 03 00
	00		 mov	 r8d, 923		; 0000039bH
  004d8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  004df	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@IBLMGADF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAt?$AAm?$AAp?$AA?$CJ?$AA?$CJ?$AA?$AA@
  004e6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  004ec	33 c0		 xor	 eax, eax
$LN37@format_lon:
  004ee	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR tmp$[rsp]
  004f6	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  004f9	c1 e8 02	 shr	 eax, 2
  004fc	83 e0 07	 and	 eax, 7
  004ff	83 f8 01	 cmp	 eax, 1
  00502	0f 85 77 01 00
	00		 jne	 $LN66@format_lon
  00508	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR tmp$[rsp]
  00510	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00514	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0051a	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0051f	85 c0		 test	 eax, eax
  00521	75 1c		 jne	 SHORT $LN38@format_lon
  00523	41 b8 9b 03 00
	00		 mov	 r8d, 923		; 0000039bH
  00529	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00530	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@DKGODOAN@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAt?$AAm?$AAp?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00537	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0053d	33 c0		 xor	 eax, eax
$LN38@format_lon:
  0053f	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR tmp$[rsp]
  00547	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0054a	c1 e8 05	 shr	 eax, 5
  0054d	83 e0 01	 and	 eax, 1
  00550	85 c0		 test	 eax, eax
  00552	0f 84 bd 00 00
	00		 je	 $LN44@format_lon
  00558	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR tmp$[rsp]
  00560	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00564	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0056a	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0056f	85 c0		 test	 eax, eax
  00571	75 1c		 jne	 SHORT $LN39@format_lon
  00573	41 b8 9b 03 00
	00		 mov	 r8d, 923		; 0000039bH
  00579	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00580	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@DKGODOAN@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAt?$AAm?$AAp?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00587	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0058d	33 c0		 xor	 eax, eax
$LN39@format_lon:
  0058f	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR tmp$[rsp]
  00597	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0059a	c1 e8 07	 shr	 eax, 7
  0059d	83 e0 01	 and	 eax, 1
  005a0	85 c0		 test	 eax, eax
  005a2	75 1c		 jne	 SHORT $LN40@format_lon
  005a4	41 b8 9b 03 00
	00		 mov	 r8d, 923		; 0000039bH
  005aa	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  005b1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@IBLMGADF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAt?$AAm?$AAp?$AA?$CJ?$AA?$CJ?$AA?$AA@
  005b8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  005be	33 c0		 xor	 eax, eax
$LN40@format_lon:
  005c0	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR tmp$[rsp]
  005c8	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  005cb	c1 e8 06	 shr	 eax, 6
  005ce	83 e0 01	 and	 eax, 1
  005d1	85 c0		 test	 eax, eax
  005d3	74 18		 je	 SHORT $LN41@format_lon
  005d5	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR tmp$[rsp]
  005dd	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  005e3	48 89 84 24 48
	01 00 00	 mov	 QWORD PTR tv254[rsp], rax
  005eb	eb 16		 jmp	 SHORT $LN42@format_lon
$LN41@format_lon:
  005ed	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR tmp$[rsp]
  005f5	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  005fb	48 89 84 24 48
	01 00 00	 mov	 QWORD PTR tv254[rsp], rax
$LN42@format_lon:
  00603	48 8b 84 24 48
	01 00 00	 mov	 rax, QWORD PTR tv254[rsp]
  0060b	48 89 84 24 50
	01 00 00	 mov	 QWORD PTR tv263[rsp], rax
  00613	eb 45		 jmp	 SHORT $LN45@format_lon
$LN44@format_lon:
  00615	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR tmp$[rsp]
  0061d	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  00625	75 1c		 jne	 SHORT $LN43@format_lon
  00627	41 b8 9b 03 00
	00		 mov	 r8d, 923		; 0000039bH
  0062d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00634	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EM@IINJPAMD@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAt?$AAm?$AAp?$AA?$CJ?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt@
  0063b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00641	33 c0		 xor	 eax, eax
$LN43@format_lon:
  00643	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR tmp$[rsp]
  0064b	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  00652	48 89 84 24 50
	01 00 00	 mov	 QWORD PTR tv263[rsp], rax
$LN45@format_lon:
  0065a	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR inumeric_chars$[rsp]
  00662	48 8b 8c 24 50
	01 00 00	 mov	 rcx, QWORD PTR tv263[rsp]
  0066a	48 03 c8	 add	 rcx, rax
  0066d	48 8b c1	 mov	 rax, rcx
  00670	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00673	89 84 24 58 01
	00 00		 mov	 DWORD PTR tv378[rsp], eax
  0067a	e9 6e 03 00 00	 jmp	 $LN67@format_lon
$LN66@format_lon:
  0067f	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR tmp$[rsp]
  00687	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0068b	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00691	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00696	85 c0		 test	 eax, eax
  00698	75 1c		 jne	 SHORT $LN46@format_lon
  0069a	41 b8 9b 03 00
	00		 mov	 r8d, 923		; 0000039bH
  006a0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  006a7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@DKGODOAN@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAt?$AAm?$AAp?$AA?$CJ?$AA?$CJ?$AA?$AA@
  006ae	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  006b4	33 c0		 xor	 eax, eax
$LN46@format_lon:
  006b6	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR tmp$[rsp]
  006be	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  006c1	c1 e8 07	 shr	 eax, 7
  006c4	83 e0 01	 and	 eax, 1
  006c7	85 c0		 test	 eax, eax
  006c9	75 1c		 jne	 SHORT $LN47@format_lon
  006cb	41 b8 9b 03 00
	00		 mov	 r8d, 923		; 0000039bH
  006d1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  006d8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@IBLMGADF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAt?$AAm?$AAp?$AA?$CJ?$AA?$CJ?$AA?$AA@
  006df	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  006e5	33 c0		 xor	 eax, eax
$LN47@format_lon:
  006e7	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR tmp$[rsp]
  006ef	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  006f2	c1 e8 02	 shr	 eax, 2
  006f5	83 e0 07	 and	 eax, 7
  006f8	83 f8 02	 cmp	 eax, 2
  006fb	0f 85 72 01 00
	00		 jne	 $LN64@format_lon
  00701	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR tmp$[rsp]
  00709	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0070d	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00713	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00718	85 c0		 test	 eax, eax
  0071a	75 1c		 jne	 SHORT $LN48@format_lon
  0071c	41 b8 9b 03 00
	00		 mov	 r8d, 923		; 0000039bH
  00722	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00729	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@DKGODOAN@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAt?$AAm?$AAp?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00730	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00736	33 c0		 xor	 eax, eax
$LN48@format_lon:
  00738	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR tmp$[rsp]
  00740	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00743	c1 e8 05	 shr	 eax, 5
  00746	83 e0 01	 and	 eax, 1
  00749	85 c0		 test	 eax, eax
  0074b	0f 84 bd 00 00
	00		 je	 $LN54@format_lon
  00751	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR tmp$[rsp]
  00759	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0075d	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00763	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00768	85 c0		 test	 eax, eax
  0076a	75 1c		 jne	 SHORT $LN49@format_lon
  0076c	41 b8 9b 03 00
	00		 mov	 r8d, 923		; 0000039bH
  00772	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00779	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@DKGODOAN@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAt?$AAm?$AAp?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00780	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00786	33 c0		 xor	 eax, eax
$LN49@format_lon:
  00788	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR tmp$[rsp]
  00790	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00793	c1 e8 07	 shr	 eax, 7
  00796	83 e0 01	 and	 eax, 1
  00799	85 c0		 test	 eax, eax
  0079b	75 1c		 jne	 SHORT $LN50@format_lon
  0079d	41 b8 9b 03 00
	00		 mov	 r8d, 923		; 0000039bH
  007a3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  007aa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@IBLMGADF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAt?$AAm?$AAp?$AA?$CJ?$AA?$CJ?$AA?$AA@
  007b1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  007b7	33 c0		 xor	 eax, eax
$LN50@format_lon:
  007b9	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR tmp$[rsp]
  007c1	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  007c4	c1 e8 06	 shr	 eax, 6
  007c7	83 e0 01	 and	 eax, 1
  007ca	85 c0		 test	 eax, eax
  007cc	74 18		 je	 SHORT $LN51@format_lon
  007ce	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR tmp$[rsp]
  007d6	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  007dc	48 89 84 24 60
	01 00 00	 mov	 QWORD PTR tv319[rsp], rax
  007e4	eb 16		 jmp	 SHORT $LN52@format_lon
$LN51@format_lon:
  007e6	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR tmp$[rsp]
  007ee	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  007f4	48 89 84 24 60
	01 00 00	 mov	 QWORD PTR tv319[rsp], rax
$LN52@format_lon:
  007fc	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR tv319[rsp]
  00804	48 89 84 24 68
	01 00 00	 mov	 QWORD PTR tv328[rsp], rax
  0080c	eb 45		 jmp	 SHORT $LN55@format_lon
$LN54@format_lon:
  0080e	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR tmp$[rsp]
  00816	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  0081e	75 1c		 jne	 SHORT $LN53@format_lon
  00820	41 b8 9b 03 00
	00		 mov	 r8d, 923		; 0000039bH
  00826	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  0082d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EM@IINJPAMD@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAt?$AAm?$AAp?$AA?$CJ?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt@
  00834	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0083a	33 c0		 xor	 eax, eax
$LN53@format_lon:
  0083c	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR tmp$[rsp]
  00844	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  0084b	48 89 84 24 68
	01 00 00	 mov	 QWORD PTR tv328[rsp], rax
$LN55@format_lon:
  00853	48 8b 84 24 68
	01 00 00	 mov	 rax, QWORD PTR tv328[rsp]
  0085b	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR inumeric_chars$[rsp]
  00863	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  00867	89 84 24 70 01
	00 00		 mov	 DWORD PTR tv377[rsp], eax
  0086e	e9 6c 01 00 00	 jmp	 $LN65@format_lon
$LN64@format_lon:
  00873	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR tmp$[rsp]
  0087b	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0087f	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00885	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0088a	85 c0		 test	 eax, eax
  0088c	75 1c		 jne	 SHORT $LN56@format_lon
  0088e	41 b8 9b 03 00
	00		 mov	 r8d, 923		; 0000039bH
  00894	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  0089b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@DKGODOAN@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAt?$AAm?$AAp?$AA?$CJ?$AA?$CJ?$AA?$AA@
  008a2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  008a8	33 c0		 xor	 eax, eax
$LN56@format_lon:
  008aa	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR tmp$[rsp]
  008b2	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  008b5	c1 e8 05	 shr	 eax, 5
  008b8	83 e0 01	 and	 eax, 1
  008bb	85 c0		 test	 eax, eax
  008bd	0f 84 bd 00 00
	00		 je	 $LN62@format_lon
  008c3	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR tmp$[rsp]
  008cb	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  008cf	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  008d5	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  008da	85 c0		 test	 eax, eax
  008dc	75 1c		 jne	 SHORT $LN57@format_lon
  008de	41 b8 9b 03 00
	00		 mov	 r8d, 923		; 0000039bH
  008e4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  008eb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@DKGODOAN@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAt?$AAm?$AAp?$AA?$CJ?$AA?$CJ?$AA?$AA@
  008f2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  008f8	33 c0		 xor	 eax, eax
$LN57@format_lon:
  008fa	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR tmp$[rsp]
  00902	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00905	c1 e8 07	 shr	 eax, 7
  00908	83 e0 01	 and	 eax, 1
  0090b	85 c0		 test	 eax, eax
  0090d	75 1c		 jne	 SHORT $LN58@format_lon
  0090f	41 b8 9b 03 00
	00		 mov	 r8d, 923		; 0000039bH
  00915	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  0091c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@IBLMGADF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAt?$AAm?$AAp?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00923	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00929	33 c0		 xor	 eax, eax
$LN58@format_lon:
  0092b	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR tmp$[rsp]
  00933	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00936	c1 e8 06	 shr	 eax, 6
  00939	83 e0 01	 and	 eax, 1
  0093c	85 c0		 test	 eax, eax
  0093e	74 18		 je	 SHORT $LN59@format_lon
  00940	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR tmp$[rsp]
  00948	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  0094e	48 89 84 24 78
	01 00 00	 mov	 QWORD PTR tv365[rsp], rax
  00956	eb 16		 jmp	 SHORT $LN60@format_lon
$LN59@format_lon:
  00958	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR tmp$[rsp]
  00960	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  00966	48 89 84 24 78
	01 00 00	 mov	 QWORD PTR tv365[rsp], rax
$LN60@format_lon:
  0096e	48 8b 84 24 78
	01 00 00	 mov	 rax, QWORD PTR tv365[rsp]
  00976	48 89 84 24 80
	01 00 00	 mov	 QWORD PTR tv374[rsp], rax
  0097e	eb 45		 jmp	 SHORT $LN63@format_lon
$LN62@format_lon:
  00980	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR tmp$[rsp]
  00988	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  00990	75 1c		 jne	 SHORT $LN61@format_lon
  00992	41 b8 9b 03 00
	00		 mov	 r8d, 923		; 0000039bH
  00998	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  0099f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EM@IINJPAMD@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAt?$AAm?$AAp?$AA?$CJ?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt@
  009a6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  009ac	33 c0		 xor	 eax, eax
$LN61@format_lon:
  009ae	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR tmp$[rsp]
  009b6	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  009bd	48 89 84 24 80
	01 00 00	 mov	 QWORD PTR tv374[rsp], rax
$LN63@format_lon:
  009c5	48 8b 84 24 80
	01 00 00	 mov	 rax, QWORD PTR tv374[rsp]
  009cd	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR inumeric_chars$[rsp]
  009d5	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  009d8	89 84 24 70 01
	00 00		 mov	 DWORD PTR tv377[rsp], eax
$LN65@format_lon:
  009df	8b 84 24 70 01
	00 00		 mov	 eax, DWORD PTR tv377[rsp]
  009e6	89 84 24 58 01
	00 00		 mov	 DWORD PTR tv378[rsp], eax
$LN67@format_lon:
  009ed	83 bc 24 58 01
	00 00 2d	 cmp	 DWORD PTR tv378[rsp], 45 ; 0000002dH
  009f5	75 25		 jne	 SHORT $LN7@format_lon

; 924  :             sign_char = '-';

  009f7	c7 44 24 78 2d
	00 00 00	 mov	 DWORD PTR sign_char$[rsp], 45 ; 0000002dH

; 925  :             ++prefix;

  009ff	48 8b 44 24 68	 mov	 rax, QWORD PTR prefix$[rsp]
  00a04	48 ff c0	 inc	 rax
  00a07	48 89 44 24 68	 mov	 QWORD PTR prefix$[rsp], rax

; 926  :             ++leading_chars_to_skip;

  00a0c	8b 84 24 30 01
	00 00		 mov	 eax, DWORD PTR leading_chars_to_skip$21910[rsp]
  00a13	ff c0		 inc	 eax
  00a15	89 84 24 30 01
	00 00		 mov	 DWORD PTR leading_chars_to_skip$21910[rsp], eax
$LN7@format_lon:

; 927  :         }
; 928  : 
; 929  :         /* Skip over the leading chars (0x, 0b, etc.) */
; 930  :         n_digits -= leading_chars_to_skip;

  00a1c	48 63 84 24 30
	01 00 00	 movsxd	 rax, DWORD PTR leading_chars_to_skip$21910[rsp]
  00a24	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR n_digits$[rsp]
  00a2c	48 2b c8	 sub	 rcx, rax
  00a2f	48 8b c1	 mov	 rax, rcx
  00a32	48 89 84 24 28
	01 00 00	 mov	 QWORD PTR n_digits$[rsp], rax

; 931  :         inumeric_chars += leading_chars_to_skip;

  00a3a	48 63 84 24 30
	01 00 00	 movsxd	 rax, DWORD PTR leading_chars_to_skip$21910[rsp]
  00a42	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR inumeric_chars$[rsp]
  00a4a	48 03 c8	 add	 rcx, rax
  00a4d	48 8b c1	 mov	 rax, rcx
  00a50	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR inumeric_chars$[rsp], rax
$LN18@format_lon:

; 932  :     }
; 933  : 
; 934  :     /* Determine the grouping, separator, and decimal point, if any. */
; 935  :     if (get_locale_info(format->type == 'n' ? LT_CURRENT_LOCALE :
; 936  :                         (format->thousands_separators ?
; 937  :                          LT_DEFAULT_LOCALE :
; 938  :                          LT_NO_LOCALE),
; 939  :                         &locale) == -1)

  00a58	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR format$[rsp]
  00a60	83 78 28 6e	 cmp	 DWORD PTR [rax+40], 110	; 0000006eH
  00a64	75 0d		 jne	 SHORT $LN70@format_lon
  00a66	c7 84 24 88 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv393[rsp], 0
  00a71	eb 34		 jmp	 SHORT $LN71@format_lon
$LN70@format_lon:
  00a73	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR format$[rsp]
  00a7b	83 78 18 00	 cmp	 DWORD PTR [rax+24], 0
  00a7f	74 0d		 je	 SHORT $LN68@format_lon
  00a81	c7 84 24 8c 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv392[rsp], 1
  00a8c	eb 0b		 jmp	 SHORT $LN69@format_lon
$LN68@format_lon:
  00a8e	c7 84 24 8c 01
	00 00 02 00 00
	00		 mov	 DWORD PTR tv392[rsp], 2
$LN69@format_lon:
  00a99	8b 84 24 8c 01
	00 00		 mov	 eax, DWORD PTR tv392[rsp]
  00aa0	89 84 24 88 01
	00 00		 mov	 DWORD PTR tv393[rsp], eax
$LN71@format_lon:
  00aa7	48 8d 94 24 88
	00 00 00	 lea	 rdx, QWORD PTR locale$[rsp]
  00aaf	8b 8c 24 88 01
	00 00		 mov	 ecx, DWORD PTR tv393[rsp]
  00ab6	e8 00 00 00 00	 call	 get_locale_info
  00abb	83 f8 ff	 cmp	 eax, -1
  00abe	75 05		 jne	 SHORT $LN6@format_lon

; 940  :         goto done;

  00ac0	e9 f3 01 00 00	 jmp	 $done$21898
$LN6@format_lon:

; 941  : 
; 942  :     /* Calculate how much memory we'll need. */
; 943  :     n_total = calc_number_widths(&spec, n_prefix, sign_char, tmp, inumeric_chars,
; 944  :                                  inumeric_chars + n_digits, n_remainder, 0,
; 945  :                                  &locale, format, &maxchar);

  00ac5	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR n_digits$[rsp]
  00acd	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR inumeric_chars$[rsp]
  00ad5	48 03 c8	 add	 rcx, rax
  00ad8	48 8b c1	 mov	 rax, rcx
  00adb	48 8d 4c 24 60	 lea	 rcx, QWORD PTR maxchar$[rsp]
  00ae0	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  00ae5	48 8b 8c 24 b8
	01 00 00	 mov	 rcx, QWORD PTR format$[rsp]
  00aed	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  00af2	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR locale$[rsp]
  00afa	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00aff	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR [rsp+56], 0
  00b07	48 8b 4c 24 70	 mov	 rcx, QWORD PTR n_remainder$[rsp]
  00b0c	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00b11	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00b16	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR inumeric_chars$[rsp]
  00b1e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00b23	4c 8b 8c 24 80
	00 00 00	 mov	 r9, QWORD PTR tmp$[rsp]
  00b2b	44 8b 44 24 78	 mov	 r8d, DWORD PTR sign_char$[rsp]
  00b30	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR n_prefix$[rsp]
  00b38	48 8d 8c 24 c0
	00 00 00	 lea	 rcx, QWORD PTR spec$[rsp]
  00b40	e8 00 00 00 00	 call	 calc_number_widths
  00b45	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR n_total$[rsp], rax

; 946  : 
; 947  :     /* Allocate the memory. */
; 948  :     if (_PyUnicodeWriter_Prepare(writer, n_total, maxchar) == -1)

  00b4d	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR writer$[rsp]
  00b55	8b 40 14	 mov	 eax, DWORD PTR [rax+20]
  00b58	39 44 24 60	 cmp	 DWORD PTR maxchar$[rsp], eax
  00b5c	77 32		 ja	 SHORT $LN72@format_lon
  00b5e	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR writer$[rsp]
  00b66	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR writer$[rsp]
  00b6e	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  00b72	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  00b76	48 2b c1	 sub	 rax, rcx
  00b79	48 39 84 24 a0
	00 00 00	 cmp	 QWORD PTR n_total$[rsp], rax
  00b81	7f 0d		 jg	 SHORT $LN72@format_lon
  00b83	c7 84 24 90 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv421[rsp], 0
  00b8e	eb 47		 jmp	 SHORT $LN75@format_lon
$LN72@format_lon:
  00b90	48 83 bc 24 a0
	00 00 00 00	 cmp	 QWORD PTR n_total$[rsp], 0
  00b99	75 0d		 jne	 SHORT $LN73@format_lon
  00b9b	c7 84 24 94 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv420[rsp], 0
  00ba6	eb 21		 jmp	 SHORT $LN74@format_lon
$LN73@format_lon:
  00ba8	44 8b 44 24 60	 mov	 r8d, DWORD PTR maxchar$[rsp]
  00bad	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR n_total$[rsp]
  00bb5	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR writer$[rsp]
  00bbd	e8 00 00 00 00	 call	 _PyUnicodeWriter_PrepareInternal
  00bc2	89 84 24 94 01
	00 00		 mov	 DWORD PTR tv420[rsp], eax
$LN74@format_lon:
  00bc9	8b 84 24 94 01
	00 00		 mov	 eax, DWORD PTR tv420[rsp]
  00bd0	89 84 24 90 01
	00 00		 mov	 DWORD PTR tv421[rsp], eax
$LN75@format_lon:
  00bd7	83 bc 24 90 01
	00 00 ff	 cmp	 DWORD PTR tv421[rsp], -1
  00bdf	75 05		 jne	 SHORT $LN5@format_lon

; 949  :         goto done;

  00be1	e9 d2 00 00 00	 jmp	 $done$21898
$LN5@format_lon:

; 950  : 
; 951  :     /* Populate the memory. */
; 952  :     result = fill_number(writer, &spec,
; 953  :                          tmp, inumeric_chars, inumeric_chars + n_digits,
; 954  :                          tmp, prefix,
; 955  :                          format->fill_char == '\0' ? ' ' : format->fill_char,
; 956  :                          &locale, format->type == 'X');

  00be6	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR format$[rsp]
  00bee	83 78 28 58	 cmp	 DWORD PTR [rax+40], 88	; 00000058H
  00bf2	75 0d		 jne	 SHORT $LN76@format_lon
  00bf4	c7 84 24 98 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv426[rsp], 1
  00bff	eb 0b		 jmp	 SHORT $LN77@format_lon
$LN76@format_lon:
  00c01	c7 84 24 98 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv426[rsp], 0
$LN77@format_lon:
  00c0c	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR format$[rsp]
  00c14	83 38 00	 cmp	 DWORD PTR [rax], 0
  00c17	75 0d		 jne	 SHORT $LN78@format_lon
  00c19	c7 84 24 9c 01
	00 00 20 00 00
	00		 mov	 DWORD PTR tv430[rsp], 32 ; 00000020H
  00c24	eb 11		 jmp	 SHORT $LN79@format_lon
$LN78@format_lon:
  00c26	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR format$[rsp]
  00c2e	8b 00		 mov	 eax, DWORD PTR [rax]
  00c30	89 84 24 9c 01
	00 00		 mov	 DWORD PTR tv430[rsp], eax
$LN79@format_lon:
  00c37	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR n_digits$[rsp]
  00c3f	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR inumeric_chars$[rsp]
  00c47	48 03 c8	 add	 rcx, rax
  00c4a	48 8b c1	 mov	 rax, rcx
  00c4d	8b 8c 24 98 01
	00 00		 mov	 ecx, DWORD PTR tv426[rsp]
  00c54	89 4c 24 48	 mov	 DWORD PTR [rsp+72], ecx
  00c58	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR locale$[rsp]
  00c60	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00c65	8b 8c 24 9c 01
	00 00		 mov	 ecx, DWORD PTR tv430[rsp]
  00c6c	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00c70	48 8b 4c 24 68	 mov	 rcx, QWORD PTR prefix$[rsp]
  00c75	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00c7a	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR tmp$[rsp]
  00c82	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00c87	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00c8c	4c 8b 8c 24 b0
	00 00 00	 mov	 r9, QWORD PTR inumeric_chars$[rsp]
  00c94	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR tmp$[rsp]
  00c9c	48 8d 94 24 c0
	00 00 00	 lea	 rdx, QWORD PTR spec$[rsp]
  00ca4	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR writer$[rsp]
  00cac	e8 00 00 00 00	 call	 fill_number
  00cb1	89 84 24 20 01
	00 00		 mov	 DWORD PTR result$[rsp], eax
$done$21898:
$LN4@format_lon:

; 957  : 
; 958  : done:
; 959  :     Py_XDECREF(tmp);

  00cb8	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR tmp$[rsp], 0
  00cc1	74 0d		 je	 SHORT $LN1@format_lon
  00cc3	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR tmp$[rsp]
  00ccb	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@format_lon:
  00cd0	33 c0		 xor	 eax, eax
  00cd2	85 c0		 test	 eax, eax
  00cd4	75 e2		 jne	 SHORT $LN4@format_lon

; 960  :     free_locale_info(&locale);

  00cd6	48 8d 8c 24 88
	00 00 00	 lea	 rcx, QWORD PTR locale$[rsp]
  00cde	e8 00 00 00 00	 call	 free_locale_info

; 961  :     return result;

  00ce3	8b 84 24 20 01
	00 00		 mov	 eax, DWORD PTR result$[rsp]
$LN25@format_lon:

; 962  : }

  00cea	48 81 c4 a8 01
	00 00		 add	 rsp, 424		; 000001a8H
  00cf1	c3		 ret	 0
format_long_internal ENDP
_TEXT	ENDS
PUBLIC	??_C@_1FE@PAOGJLHG@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAl?$AAo?$AAc?$AAa?$AAl?$AAe?$AA?9?$AA?$DO?$AAd?$AAe?$AAc?$AAi?$AAm@ ; `string'
PUBLIC	??_C@_1EO@BDOBDPEC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAl?$AAo?$AAc?$AAa?$AAl?$AAe?$AA?9?$AA?$DO?$AAd?$AAe?$AAc?$AAi?$AAm?$AAa?$AAl?$AA_@ ; `string'
EXTRN	_PyUnicode_InsertThousandsGrouping:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$calc_number_widths DD imagerel calc_number_widths
	DD	imagerel calc_number_widths+2590
	DD	imagerel $unwind$calc_number_widths
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$calc_number_widths DD 021b01H
	DD	017011bH
xdata	ENDS
;	COMDAT ??_C@_1FE@PAOGJLHG@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAl?$AAo?$AAc?$AAa?$AAl?$AAe?$AA?9?$AA?$DO?$AAd?$AAe?$AAc?$AAi?$AAm@
CONST	SEGMENT
??_C@_1FE@PAOGJLHG@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAl?$AAo?$AAc?$AAa?$AAl?$AAe?$AA?9?$AA?$DO?$AAd?$AAe?$AAc?$AAi?$AAm@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'I', 00H, 'S', 00H, '_', 00H, 'R'
	DB	00H, 'E', 00H, 'A', 00H, 'D', 00H, 'Y', 00H, '(', 00H, 'l', 00H
	DB	'o', 00H, 'c', 00H, 'a', 00H, 'l', 00H, 'e', 00H, '-', 00H, '>'
	DB	00H, 'd', 00H, 'e', 00H, 'c', 00H, 'i', 00H, 'm', 00H, 'a', 00H
	DB	'l', 00H, '_', 00H, 'p', 00H, 'o', 00H, 'i', 00H, 'n', 00H, 't'
	DB	00H, ')', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1EO@BDOBDPEC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAl?$AAo?$AAc?$AAa?$AAl?$AAe?$AA?9?$AA?$DO?$AAd?$AAe?$AAc?$AAi?$AAm?$AAa?$AAl?$AA_@
CONST	SEGMENT
??_C@_1EO@BDOBDPEC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAl?$AAo?$AAc?$AAa?$AAl?$AAe?$AA?9?$AA?$DO?$AAd?$AAe?$AAc?$AAi?$AAm?$AAa?$AAl?$AA_@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H
	DB	'l', 00H, 'e', 00H, '-', 00H, '>', 00H, 'd', 00H, 'e', 00H, 'c'
	DB	00H, 'i', 00H, 'm', 00H, 'a', 00H, 'l', 00H, '_', 00H, 'p', 00H
	DB	'o', 00H, 'i', 00H, 'n', 00H, 't', 00H, ')', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT calc_number_widths
_TEXT	SEGMENT
n_non_digit_non_padding$ = 80
n_padding$ = 88
grouping_maxchar$21569 = 96
tv68 = 100
tv91 = 104
tv130 = 112
tv134 = 116
tv139 = 120
tv179 = 124
tv186 = 128
tv207 = 132
tv280 = 136
tv278 = 140
tv277 = 144
tv353 = 148
tv352 = 152
tv350 = 156
tv349 = 160
spec$ = 192
n_prefix$ = 200
sign_char$ = 208
number$ = 216
n_start$ = 224
n_end$ = 232
n_remainder$ = 240
has_decimal$ = 248
locale$ = 256
format$ = 264
maxchar$ = 272
calc_number_widths PROC					; COMDAT

; 428  : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H

; 429  :     Py_ssize_t n_non_digit_non_padding;
; 430  :     Py_ssize_t n_padding;
; 431  : 
; 432  :     spec->n_digits = n_end - n_start - n_remainder - (has_decimal?1:0);

  0001b	83 bc 24 f8 00
	00 00 00	 cmp	 DWORD PTR has_decimal$[rsp], 0
  00023	74 0a		 je	 SHORT $LN24@calc_numbe
  00025	c7 44 24 64 01
	00 00 00	 mov	 DWORD PTR tv68[rsp], 1
  0002d	eb 08		 jmp	 SHORT $LN25@calc_numbe
$LN24@calc_numbe:
  0002f	c7 44 24 64 00
	00 00 00	 mov	 DWORD PTR tv68[rsp], 0
$LN25@calc_numbe:
  00037	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR n_start$[rsp]
  0003f	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR n_end$[rsp]
  00047	48 2b c8	 sub	 rcx, rax
  0004a	48 8b c1	 mov	 rax, rcx
  0004d	48 2b 84 24 f0
	00 00 00	 sub	 rax, QWORD PTR n_remainder$[rsp]
  00055	48 63 4c 24 64	 movsxd	 rcx, DWORD PTR tv68[rsp]
  0005a	48 2b c1	 sub	 rax, rcx
  0005d	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR spec$[rsp]
  00065	48 89 41 48	 mov	 QWORD PTR [rcx+72], rax

; 433  :     spec->n_lpadding = 0;

  00069	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR spec$[rsp]
  00071	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 434  :     spec->n_prefix = n_prefix;

  00078	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR spec$[rsp]
  00080	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR n_prefix$[rsp]
  00088	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 435  :     spec->n_decimal = has_decimal ? PyUnicode_GET_LENGTH(locale->decimal_point) : 0;

  0008c	83 bc 24 f8 00
	00 00 00	 cmp	 DWORD PTR has_decimal$[rsp], 0
  00094	0f 84 84 00 00
	00		 je	 $LN28@calc_numbe
  0009a	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR locale$[rsp]
  000a2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000a5	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000a9	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000af	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  000b4	85 c0		 test	 eax, eax
  000b6	75 1c		 jne	 SHORT $LN26@calc_numbe
  000b8	41 b8 b3 01 00
	00		 mov	 r8d, 435		; 000001b3H
  000be	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  000c5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EO@BDOBDPEC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAl?$AAo?$AAc?$AAa?$AAl?$AAe?$AA?9?$AA?$DO?$AAd?$AAe?$AAc?$AAi?$AAm?$AAa?$AAl?$AA_@
  000cc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000d2	33 c0		 xor	 eax, eax
$LN26@calc_numbe:
  000d4	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR locale$[rsp]
  000dc	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000df	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  000e2	c1 e8 07	 shr	 eax, 7
  000e5	83 e0 01	 and	 eax, 1
  000e8	85 c0		 test	 eax, eax
  000ea	75 1c		 jne	 SHORT $LN27@calc_numbe
  000ec	41 b8 b3 01 00
	00		 mov	 r8d, 435		; 000001b3H
  000f2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  000f9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FE@PAOGJLHG@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAl?$AAo?$AAc?$AAa?$AAl?$AAe?$AA?9?$AA?$DO?$AAd?$AAe?$AAc?$AAi?$AAm@
  00100	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00106	33 c0		 xor	 eax, eax
$LN27@calc_numbe:
  00108	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR locale$[rsp]
  00110	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00113	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00117	48 89 44 24 68	 mov	 QWORD PTR tv91[rsp], rax
  0011c	eb 09		 jmp	 SHORT $LN29@calc_numbe
$LN28@calc_numbe:
  0011e	48 c7 44 24 68
	00 00 00 00	 mov	 QWORD PTR tv91[rsp], 0
$LN29@calc_numbe:
  00127	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR spec$[rsp]
  0012f	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tv91[rsp]
  00134	48 89 48 38	 mov	 QWORD PTR [rax+56], rcx

; 436  :     spec->n_remainder = n_remainder;

  00138	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR spec$[rsp]
  00140	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR n_remainder$[rsp]
  00148	48 89 48 40	 mov	 QWORD PTR [rax+64], rcx

; 437  :     spec->n_spadding = 0;

  0014c	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR spec$[rsp]
  00154	48 c7 40 10 00
	00 00 00	 mov	 QWORD PTR [rax+16], 0

; 438  :     spec->n_rpadding = 0;

  0015c	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR spec$[rsp]
  00164	48 c7 40 18 00
	00 00 00	 mov	 QWORD PTR [rax+24], 0

; 439  :     spec->sign = '\0';

  0016c	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR spec$[rsp]
  00174	c6 40 20 00	 mov	 BYTE PTR [rax+32], 0

; 440  :     spec->n_sign = 0;

  00178	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR spec$[rsp]
  00180	48 c7 40 28 00
	00 00 00	 mov	 QWORD PTR [rax+40], 0

; 441  : 
; 442  :     /* the output will look like:
; 443  :        |                                                                                         |
; 444  :        | <lpadding> <sign> <prefix> <spadding> <grouped_digits> <decimal> <remainder> <rpadding> |
; 445  :        |                                                                                         |
; 446  : 
; 447  :        sign is computed from format->sign and the actual
; 448  :        sign of the number
; 449  : 
; 450  :        prefix is given (it's for the '0x' prefix)
; 451  : 
; 452  :        digits is already known
; 453  : 
; 454  :        the total width is either given, or computed from the
; 455  :        actual digits
; 456  : 
; 457  :        only one of lpadding, spadding, and rpadding can be non-zero,
; 458  :        and it's calculated from the width and other fields
; 459  :     */
; 460  : 
; 461  :     /* compute the various parts we're going to write */
; 462  :     switch (format->sign) {

  00188	48 8b 84 24 08
	01 00 00	 mov	 rax, QWORD PTR format$[rsp]
  00190	8b 40 0c	 mov	 eax, DWORD PTR [rax+12]
  00193	89 44 24 70	 mov	 DWORD PTR tv130[rsp], eax
  00197	83 7c 24 70 20	 cmp	 DWORD PTR tv130[rsp], 32 ; 00000020H
  0019c	74 47		 je	 SHORT $LN18@calc_numbe
  0019e	83 7c 24 70 2b	 cmp	 DWORD PTR tv130[rsp], 43 ; 0000002bH
  001a3	74 02		 je	 SHORT $LN19@calc_numbe
  001a5	eb 7c		 jmp	 SHORT $LN17@calc_numbe
$LN19@calc_numbe:

; 463  :     case '+':
; 464  :         /* always put a + or - */
; 465  :         spec->n_sign = 1;

  001a7	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR spec$[rsp]
  001af	48 c7 40 28 01
	00 00 00	 mov	 QWORD PTR [rax+40], 1

; 466  :         spec->sign = (sign_char == '-' ? '-' : '+');

  001b7	83 bc 24 d0 00
	00 00 2d	 cmp	 DWORD PTR sign_char$[rsp], 45 ; 0000002dH
  001bf	75 0a		 jne	 SHORT $LN30@calc_numbe
  001c1	c7 44 24 74 2d
	00 00 00	 mov	 DWORD PTR tv134[rsp], 45 ; 0000002dH
  001c9	eb 08		 jmp	 SHORT $LN31@calc_numbe
$LN30@calc_numbe:
  001cb	c7 44 24 74 2b
	00 00 00	 mov	 DWORD PTR tv134[rsp], 43 ; 0000002bH
$LN31@calc_numbe:
  001d3	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR spec$[rsp]
  001db	0f b6 4c 24 74	 movzx	 ecx, BYTE PTR tv134[rsp]
  001e0	88 48 20	 mov	 BYTE PTR [rax+32], cl

; 467  :         break;

  001e3	eb 64		 jmp	 SHORT $LN20@calc_numbe
$LN18@calc_numbe:

; 468  :     case ' ':
; 469  :         spec->n_sign = 1;

  001e5	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR spec$[rsp]
  001ed	48 c7 40 28 01
	00 00 00	 mov	 QWORD PTR [rax+40], 1

; 470  :         spec->sign = (sign_char == '-' ? '-' : ' ');

  001f5	83 bc 24 d0 00
	00 00 2d	 cmp	 DWORD PTR sign_char$[rsp], 45 ; 0000002dH
  001fd	75 0a		 jne	 SHORT $LN32@calc_numbe
  001ff	c7 44 24 78 2d
	00 00 00	 mov	 DWORD PTR tv139[rsp], 45 ; 0000002dH
  00207	eb 08		 jmp	 SHORT $LN33@calc_numbe
$LN32@calc_numbe:
  00209	c7 44 24 78 20
	00 00 00	 mov	 DWORD PTR tv139[rsp], 32 ; 00000020H
$LN33@calc_numbe:
  00211	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR spec$[rsp]
  00219	0f b6 4c 24 78	 movzx	 ecx, BYTE PTR tv139[rsp]
  0021e	88 48 20	 mov	 BYTE PTR [rax+32], cl

; 471  :         break;

  00221	eb 26		 jmp	 SHORT $LN20@calc_numbe
$LN17@calc_numbe:

; 472  :     default:
; 473  :         /* Not specified, or the default (-) */
; 474  :         if (sign_char == '-') {

  00223	83 bc 24 d0 00
	00 00 2d	 cmp	 DWORD PTR sign_char$[rsp], 45 ; 0000002dH
  0022b	75 1c		 jne	 SHORT $LN16@calc_numbe

; 475  :             spec->n_sign = 1;

  0022d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR spec$[rsp]
  00235	48 c7 40 28 01
	00 00 00	 mov	 QWORD PTR [rax+40], 1

; 476  :             spec->sign = '-';

  0023d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR spec$[rsp]
  00245	c6 40 20 2d	 mov	 BYTE PTR [rax+32], 45	; 0000002dH
$LN16@calc_numbe:
$LN20@calc_numbe:

; 477  :         }
; 478  :     }
; 479  : 
; 480  :     /* The number of chars used for non-digits and non-padding. */
; 481  :     n_non_digit_non_padding = spec->n_sign + spec->n_prefix + spec->n_decimal +
; 482  :         spec->n_remainder;

  00249	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR spec$[rsp]
  00251	48 8b 40 28	 mov	 rax, QWORD PTR [rax+40]
  00255	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR spec$[rsp]
  0025d	48 03 41 08	 add	 rax, QWORD PTR [rcx+8]
  00261	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR spec$[rsp]
  00269	48 03 41 38	 add	 rax, QWORD PTR [rcx+56]
  0026d	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR spec$[rsp]
  00275	48 03 41 40	 add	 rax, QWORD PTR [rcx+64]
  00279	48 89 44 24 50	 mov	 QWORD PTR n_non_digit_non_padding$[rsp], rax

; 483  : 
; 484  :     /* min_width can go negative, that's okay. format->width == -1 means
; 485  :        we don't care. */
; 486  :     if (format->fill_char == '0' && format->align == '=')

  0027e	48 8b 84 24 08
	01 00 00	 mov	 rax, QWORD PTR format$[rsp]
  00286	83 38 30	 cmp	 DWORD PTR [rax], 48	; 00000030H
  00289	75 30		 jne	 SHORT $LN15@calc_numbe
  0028b	48 8b 84 24 08
	01 00 00	 mov	 rax, QWORD PTR format$[rsp]
  00293	83 78 04 3d	 cmp	 DWORD PTR [rax+4], 61	; 0000003dH
  00297	75 22		 jne	 SHORT $LN15@calc_numbe

; 487  :         spec->n_min_width = format->width - n_non_digit_non_padding;

  00299	48 8b 84 24 08
	01 00 00	 mov	 rax, QWORD PTR format$[rsp]
  002a1	48 8b 4c 24 50	 mov	 rcx, QWORD PTR n_non_digit_non_padding$[rsp]
  002a6	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  002aa	48 2b c1	 sub	 rax, rcx
  002ad	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR spec$[rsp]
  002b5	48 89 41 50	 mov	 QWORD PTR [rcx+80], rax

; 488  :     else

  002b9	eb 10		 jmp	 SHORT $LN14@calc_numbe
$LN15@calc_numbe:

; 489  :         spec->n_min_width = 0;

  002bb	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR spec$[rsp]
  002c3	48 c7 40 50 00
	00 00 00	 mov	 QWORD PTR [rax+80], 0
$LN14@calc_numbe:

; 490  : 
; 491  :     if (spec->n_digits == 0)

  002cb	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR spec$[rsp]
  002d3	48 83 78 48 00	 cmp	 QWORD PTR [rax+72], 0
  002d8	75 15		 jne	 SHORT $LN13@calc_numbe

; 492  :         /* This case only occurs when using 'c' formatting, we need
; 493  :            to special case it because the grouping code always wants
; 494  :            to have at least one character. */
; 495  :         spec->n_grouped_digits = 0;

  002da	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR spec$[rsp]
  002e2	48 c7 40 30 00
	00 00 00	 mov	 QWORD PTR [rax+48], 0

; 496  :     else {

  002ea	e9 9f 00 00 00	 jmp	 $LN12@calc_numbe
$LN13@calc_numbe:

; 497  :         Py_UCS4 grouping_maxchar;
; 498  :         spec->n_grouped_digits = _PyUnicode_InsertThousandsGrouping(
; 499  :             NULL, 0,
; 500  :             0, NULL,
; 501  :             spec->n_digits, spec->n_min_width,
; 502  :             locale->grouping, locale->thousands_sep, &grouping_maxchar);

  002ef	48 8d 44 24 60	 lea	 rax, QWORD PTR grouping_maxchar$21569[rsp]
  002f4	48 89 44 24 40	 mov	 QWORD PTR [rsp+64], rax
  002f9	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR locale$[rsp]
  00301	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00305	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  0030a	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR locale$[rsp]
  00312	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00316	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  0031b	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR spec$[rsp]
  00323	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00327	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0032c	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR spec$[rsp]
  00334	48 8b 40 48	 mov	 rax, QWORD PTR [rax+72]
  00338	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0033d	45 33 c9	 xor	 r9d, r9d
  00340	45 33 c0	 xor	 r8d, r8d
  00343	33 d2		 xor	 edx, edx
  00345	33 c9		 xor	 ecx, ecx
  00347	e8 00 00 00 00	 call	 _PyUnicode_InsertThousandsGrouping
  0034c	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR spec$[rsp]
  00354	48 89 41 30	 mov	 QWORD PTR [rcx+48], rax

; 503  :         *maxchar = Py_MAX(*maxchar, grouping_maxchar);

  00358	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR maxchar$[rsp]
  00360	8b 4c 24 60	 mov	 ecx, DWORD PTR grouping_maxchar$21569[rsp]
  00364	39 08		 cmp	 DWORD PTR [rax], ecx
  00366	76 10		 jbe	 SHORT $LN34@calc_numbe
  00368	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR maxchar$[rsp]
  00370	8b 00		 mov	 eax, DWORD PTR [rax]
  00372	89 44 24 7c	 mov	 DWORD PTR tv179[rsp], eax
  00376	eb 08		 jmp	 SHORT $LN35@calc_numbe
$LN34@calc_numbe:
  00378	8b 44 24 60	 mov	 eax, DWORD PTR grouping_maxchar$21569[rsp]
  0037c	89 44 24 7c	 mov	 DWORD PTR tv179[rsp], eax
$LN35@calc_numbe:
  00380	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR maxchar$[rsp]
  00388	8b 4c 24 7c	 mov	 ecx, DWORD PTR tv179[rsp]
  0038c	89 08		 mov	 DWORD PTR [rax], ecx
$LN12@calc_numbe:

; 504  :     }
; 505  : 
; 506  :     /* Given the desired width and the total of digit and non-digit
; 507  :        space we consume, see if we need any padding. format->width can
; 508  :        be negative (meaning no padding), but this code still works in
; 509  :        that case. */
; 510  :     n_padding = format->width -
; 511  :                         (n_non_digit_non_padding + spec->n_grouped_digits);

  0038e	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR spec$[rsp]
  00396	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  0039a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR n_non_digit_non_padding$[rsp]
  0039f	48 03 c8	 add	 rcx, rax
  003a2	48 8b c1	 mov	 rax, rcx
  003a5	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR format$[rsp]
  003ad	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  003b1	48 2b c8	 sub	 rcx, rax
  003b4	48 8b c1	 mov	 rax, rcx
  003b7	48 89 44 24 58	 mov	 QWORD PTR n_padding$[rsp], rax

; 512  :     if (n_padding > 0) {

  003bc	48 83 7c 24 58
	00		 cmp	 QWORD PTR n_padding$[rsp], 0
  003c2	0f 8e e5 00 00
	00		 jle	 $LN11@calc_numbe

; 513  :         /* Some padding is needed. Determine if it's left, space, or right. */
; 514  :         switch (format->align) {

  003c8	48 8b 84 24 08
	01 00 00	 mov	 rax, QWORD PTR format$[rsp]
  003d0	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  003d3	89 84 24 80 00
	00 00		 mov	 DWORD PTR tv186[rsp], eax
  003da	83 bc 24 80 00
	00 00 3c	 cmp	 DWORD PTR tv186[rsp], 60 ; 0000003cH
  003e2	74 20		 je	 SHORT $LN8@calc_numbe
  003e4	83 bc 24 80 00
	00 00 3d	 cmp	 DWORD PTR tv186[rsp], 61 ; 0000003dH
  003ec	74 68		 je	 SHORT $LN6@calc_numbe
  003ee	83 bc 24 80 00
	00 00 3e	 cmp	 DWORD PTR tv186[rsp], 62 ; 0000003eH
  003f6	74 71		 je	 SHORT $LN5@calc_numbe
  003f8	83 bc 24 80 00
	00 00 5e	 cmp	 DWORD PTR tv186[rsp], 94 ; 0000005eH
  00400	74 18		 je	 SHORT $LN7@calc_numbe
  00402	eb 77		 jmp	 SHORT $LN4@calc_numbe
$LN8@calc_numbe:

; 515  :         case '<':
; 516  :             spec->n_rpadding = n_padding;

  00404	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR spec$[rsp]
  0040c	48 8b 4c 24 58	 mov	 rcx, QWORD PTR n_padding$[rsp]
  00411	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 517  :             break;

  00415	e9 93 00 00 00	 jmp	 $LN9@calc_numbe
$LN7@calc_numbe:

; 518  :         case '^':
; 519  :             spec->n_lpadding = n_padding / 2;

  0041a	48 8b 44 24 58	 mov	 rax, QWORD PTR n_padding$[rsp]
  0041f	48 99		 cdq
  00421	48 2b c2	 sub	 rax, rdx
  00424	48 d1 f8	 sar	 rax, 1
  00427	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR spec$[rsp]
  0042f	48 89 01	 mov	 QWORD PTR [rcx], rax

; 520  :             spec->n_rpadding = n_padding - spec->n_lpadding;

  00432	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR spec$[rsp]
  0043a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0043d	48 8b 4c 24 58	 mov	 rcx, QWORD PTR n_padding$[rsp]
  00442	48 2b c8	 sub	 rcx, rax
  00445	48 8b c1	 mov	 rax, rcx
  00448	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR spec$[rsp]
  00450	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax

; 521  :             break;

  00454	eb 57		 jmp	 SHORT $LN9@calc_numbe
$LN6@calc_numbe:

; 522  :         case '=':
; 523  :             spec->n_spadding = n_padding;

  00456	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR spec$[rsp]
  0045e	48 8b 4c 24 58	 mov	 rcx, QWORD PTR n_padding$[rsp]
  00463	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 524  :             break;

  00467	eb 44		 jmp	 SHORT $LN9@calc_numbe
$LN5@calc_numbe:

; 525  :         case '>':
; 526  :             spec->n_lpadding = n_padding;

  00469	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR spec$[rsp]
  00471	48 8b 4c 24 58	 mov	 rcx, QWORD PTR n_padding$[rsp]
  00476	48 89 08	 mov	 QWORD PTR [rax], rcx

; 527  :             break;

  00479	eb 32		 jmp	 SHORT $LN9@calc_numbe
$LN4@calc_numbe:

; 528  :         default:
; 529  :             /* Shouldn't get here, but treat it as '>' */
; 530  :             spec->n_lpadding = n_padding;

  0047b	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR spec$[rsp]
  00483	48 8b 4c 24 58	 mov	 rcx, QWORD PTR n_padding$[rsp]
  00488	48 89 08	 mov	 QWORD PTR [rax], rcx

; 531  :             assert(0);

  0048b	33 c0		 xor	 eax, eax
  0048d	85 c0		 test	 eax, eax
  0048f	75 1c		 jne	 SHORT $LN36@calc_numbe
  00491	41 b8 13 02 00
	00		 mov	 r8d, 531		; 00000213H
  00497	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  0049e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_13COJANIEC@?$AA0?$AA?$AA@
  004a5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  004ab	33 c0		 xor	 eax, eax
$LN36@calc_numbe:
$LN9@calc_numbe:
$LN11@calc_numbe:

; 532  :             break;
; 533  :         }
; 534  :     }
; 535  : 
; 536  :     if (spec->n_lpadding || spec->n_spadding || spec->n_rpadding)

  004ad	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR spec$[rsp]
  004b5	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  004b9	75 1e		 jne	 SHORT $LN2@calc_numbe
  004bb	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR spec$[rsp]
  004c3	48 83 78 10 00	 cmp	 QWORD PTR [rax+16], 0
  004c8	75 0f		 jne	 SHORT $LN2@calc_numbe
  004ca	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR spec$[rsp]
  004d2	48 83 78 18 00	 cmp	 QWORD PTR [rax+24], 0
  004d7	74 4b		 je	 SHORT $LN3@calc_numbe
$LN2@calc_numbe:

; 537  :         *maxchar = Py_MAX(*maxchar, format->fill_char);

  004d9	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR maxchar$[rsp]
  004e1	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR format$[rsp]
  004e9	8b 09		 mov	 ecx, DWORD PTR [rcx]
  004eb	39 08		 cmp	 DWORD PTR [rax], ecx
  004ed	76 13		 jbe	 SHORT $LN37@calc_numbe
  004ef	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR maxchar$[rsp]
  004f7	8b 00		 mov	 eax, DWORD PTR [rax]
  004f9	89 84 24 84 00
	00 00		 mov	 DWORD PTR tv207[rsp], eax
  00500	eb 11		 jmp	 SHORT $LN38@calc_numbe
$LN37@calc_numbe:
  00502	48 8b 84 24 08
	01 00 00	 mov	 rax, QWORD PTR format$[rsp]
  0050a	8b 00		 mov	 eax, DWORD PTR [rax]
  0050c	89 84 24 84 00
	00 00		 mov	 DWORD PTR tv207[rsp], eax
$LN38@calc_numbe:
  00513	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR maxchar$[rsp]
  0051b	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR tv207[rsp]
  00522	89 08		 mov	 DWORD PTR [rax], ecx
$LN3@calc_numbe:

; 538  : 
; 539  :     if (spec->n_decimal)

  00524	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR spec$[rsp]
  0052c	48 83 78 38 00	 cmp	 QWORD PTR [rax+56], 0
  00531	0f 84 80 04 00
	00		 je	 $LN1@calc_numbe

; 540  :         *maxchar = Py_MAX(*maxchar, PyUnicode_MAX_CHAR_VALUE(locale->decimal_point));

  00537	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR locale$[rsp]
  0053f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00542	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00545	c1 e8 07	 shr	 eax, 7
  00548	83 e0 01	 and	 eax, 1
  0054b	85 c0		 test	 eax, eax
  0054d	75 1c		 jne	 SHORT $LN39@calc_numbe
  0054f	41 b8 1c 02 00
	00		 mov	 r8d, 540		; 0000021cH
  00555	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  0055c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FE@PAOGJLHG@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAl?$AAo?$AAc?$AAa?$AAl?$AAe?$AA?9?$AA?$DO?$AAd?$AAe?$AAc?$AAi?$AAm@
  00563	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00569	33 c0		 xor	 eax, eax
$LN39@calc_numbe:
  0056b	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR locale$[rsp]
  00573	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00576	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0057a	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00580	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00585	85 c0		 test	 eax, eax
  00587	75 1c		 jne	 SHORT $LN40@calc_numbe
  00589	41 b8 1c 02 00
	00		 mov	 r8d, 540		; 0000021cH
  0058f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00596	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EO@BDOBDPEC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAl?$AAo?$AAc?$AAa?$AAl?$AAe?$AA?9?$AA?$DO?$AAd?$AAe?$AAc?$AAi?$AAm?$AAa?$AAl?$AA_@
  0059d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  005a3	33 c0		 xor	 eax, eax
$LN40@calc_numbe:
  005a5	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR locale$[rsp]
  005ad	48 8b 00	 mov	 rax, QWORD PTR [rax]
  005b0	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  005b3	c1 e8 07	 shr	 eax, 7
  005b6	83 e0 01	 and	 eax, 1
  005b9	85 c0		 test	 eax, eax
  005bb	75 1c		 jne	 SHORT $LN41@calc_numbe
  005bd	41 b8 1c 02 00
	00		 mov	 r8d, 540		; 0000021cH
  005c3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  005ca	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FE@PAOGJLHG@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAl?$AAo?$AAc?$AAa?$AAl?$AAe?$AA?9?$AA?$DO?$AAd?$AAe?$AAc?$AAi?$AAm@
  005d1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  005d7	33 c0		 xor	 eax, eax
$LN41@calc_numbe:
  005d9	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR locale$[rsp]
  005e1	48 8b 00	 mov	 rax, QWORD PTR [rax]
  005e4	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  005e7	c1 e8 06	 shr	 eax, 6
  005ea	83 e0 01	 and	 eax, 1
  005ed	85 c0		 test	 eax, eax
  005ef	74 10		 je	 SHORT $LN50@calc_numbe
  005f1	c7 84 24 88 00
	00 00 7f 00 00
	00		 mov	 DWORD PTR tv280[rsp], 127 ; 0000007fH
  005fc	e9 52 01 00 00	 jmp	 $LN51@calc_numbe
$LN50@calc_numbe:
  00601	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR locale$[rsp]
  00609	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0060c	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00610	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00616	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0061b	85 c0		 test	 eax, eax
  0061d	75 1c		 jne	 SHORT $LN42@calc_numbe
  0061f	41 b8 1c 02 00
	00		 mov	 r8d, 540		; 0000021cH
  00625	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  0062c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EO@BDOBDPEC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAl?$AAo?$AAc?$AAa?$AAl?$AAe?$AA?9?$AA?$DO?$AAd?$AAe?$AAc?$AAi?$AAm?$AAa?$AAl?$AA_@
  00633	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00639	33 c0		 xor	 eax, eax
$LN42@calc_numbe:
  0063b	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR locale$[rsp]
  00643	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00646	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00649	c1 e8 07	 shr	 eax, 7
  0064c	83 e0 01	 and	 eax, 1
  0064f	85 c0		 test	 eax, eax
  00651	75 1c		 jne	 SHORT $LN43@calc_numbe
  00653	41 b8 1c 02 00
	00		 mov	 r8d, 540		; 0000021cH
  00659	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00660	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FE@PAOGJLHG@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAl?$AAo?$AAc?$AAa?$AAl?$AAe?$AA?9?$AA?$DO?$AAd?$AAe?$AAc?$AAi?$AAm@
  00667	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0066d	33 c0		 xor	 eax, eax
$LN43@calc_numbe:
  0066f	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR locale$[rsp]
  00677	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0067a	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0067d	c1 e8 02	 shr	 eax, 2
  00680	83 e0 07	 and	 eax, 7
  00683	83 f8 01	 cmp	 eax, 1
  00686	75 10		 jne	 SHORT $LN48@calc_numbe
  00688	c7 84 24 8c 00
	00 00 ff 00 00
	00		 mov	 DWORD PTR tv278[rsp], 255 ; 000000ffH
  00693	e9 ad 00 00 00	 jmp	 $LN49@calc_numbe
$LN48@calc_numbe:
  00698	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR locale$[rsp]
  006a0	48 8b 00	 mov	 rax, QWORD PTR [rax]
  006a3	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  006a7	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  006ad	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  006b2	85 c0		 test	 eax, eax
  006b4	75 1c		 jne	 SHORT $LN44@calc_numbe
  006b6	41 b8 1c 02 00
	00		 mov	 r8d, 540		; 0000021cH
  006bc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  006c3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EO@BDOBDPEC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAl?$AAo?$AAc?$AAa?$AAl?$AAe?$AA?9?$AA?$DO?$AAd?$AAe?$AAc?$AAi?$AAm?$AAa?$AAl?$AA_@
  006ca	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  006d0	33 c0		 xor	 eax, eax
$LN44@calc_numbe:
  006d2	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR locale$[rsp]
  006da	48 8b 00	 mov	 rax, QWORD PTR [rax]
  006dd	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  006e0	c1 e8 07	 shr	 eax, 7
  006e3	83 e0 01	 and	 eax, 1
  006e6	85 c0		 test	 eax, eax
  006e8	75 1c		 jne	 SHORT $LN45@calc_numbe
  006ea	41 b8 1c 02 00
	00		 mov	 r8d, 540		; 0000021cH
  006f0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  006f7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FE@PAOGJLHG@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAl?$AAo?$AAc?$AAa?$AAl?$AAe?$AA?9?$AA?$DO?$AAd?$AAe?$AAc?$AAi?$AAm@
  006fe	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00704	33 c0		 xor	 eax, eax
$LN45@calc_numbe:
  00706	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR locale$[rsp]
  0070e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00711	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00714	c1 e8 02	 shr	 eax, 2
  00717	83 e0 07	 and	 eax, 7
  0071a	83 f8 02	 cmp	 eax, 2
  0071d	75 0d		 jne	 SHORT $LN46@calc_numbe
  0071f	c7 84 24 90 00
	00 00 ff ff 00
	00		 mov	 DWORD PTR tv277[rsp], 65535 ; 0000ffffH
  0072a	eb 0b		 jmp	 SHORT $LN47@calc_numbe
$LN46@calc_numbe:
  0072c	c7 84 24 90 00
	00 00 ff ff 10
	00		 mov	 DWORD PTR tv277[rsp], 1114111 ; 0010ffffH
$LN47@calc_numbe:
  00737	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR tv277[rsp]
  0073e	89 84 24 8c 00
	00 00		 mov	 DWORD PTR tv278[rsp], eax
$LN49@calc_numbe:
  00745	8b 84 24 8c 00
	00 00		 mov	 eax, DWORD PTR tv278[rsp]
  0074c	89 84 24 88 00
	00 00		 mov	 DWORD PTR tv280[rsp], eax
$LN51@calc_numbe:
  00753	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR maxchar$[rsp]
  0075b	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR tv280[rsp]
  00762	39 08		 cmp	 DWORD PTR [rax], ecx
  00764	76 16		 jbe	 SHORT $LN65@calc_numbe
  00766	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR maxchar$[rsp]
  0076e	8b 00		 mov	 eax, DWORD PTR [rax]
  00770	89 84 24 94 00
	00 00		 mov	 DWORD PTR tv353[rsp], eax
  00777	e9 2a 02 00 00	 jmp	 $LN66@calc_numbe
$LN65@calc_numbe:
  0077c	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR locale$[rsp]
  00784	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00787	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0078a	c1 e8 07	 shr	 eax, 7
  0078d	83 e0 01	 and	 eax, 1
  00790	85 c0		 test	 eax, eax
  00792	75 1c		 jne	 SHORT $LN52@calc_numbe
  00794	41 b8 1c 02 00
	00		 mov	 r8d, 540		; 0000021cH
  0079a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  007a1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FE@PAOGJLHG@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAl?$AAo?$AAc?$AAa?$AAl?$AAe?$AA?9?$AA?$DO?$AAd?$AAe?$AAc?$AAi?$AAm@
  007a8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  007ae	33 c0		 xor	 eax, eax
$LN52@calc_numbe:
  007b0	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR locale$[rsp]
  007b8	48 8b 00	 mov	 rax, QWORD PTR [rax]
  007bb	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  007bf	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  007c5	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  007ca	85 c0		 test	 eax, eax
  007cc	75 1c		 jne	 SHORT $LN53@calc_numbe
  007ce	41 b8 1c 02 00
	00		 mov	 r8d, 540		; 0000021cH
  007d4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  007db	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EO@BDOBDPEC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAl?$AAo?$AAc?$AAa?$AAl?$AAe?$AA?9?$AA?$DO?$AAd?$AAe?$AAc?$AAi?$AAm?$AAa?$AAl?$AA_@
  007e2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  007e8	33 c0		 xor	 eax, eax
$LN53@calc_numbe:
  007ea	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR locale$[rsp]
  007f2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  007f5	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  007f8	c1 e8 07	 shr	 eax, 7
  007fb	83 e0 01	 and	 eax, 1
  007fe	85 c0		 test	 eax, eax
  00800	75 1c		 jne	 SHORT $LN54@calc_numbe
  00802	41 b8 1c 02 00
	00		 mov	 r8d, 540		; 0000021cH
  00808	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  0080f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FE@PAOGJLHG@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAl?$AAo?$AAc?$AAa?$AAl?$AAe?$AA?9?$AA?$DO?$AAd?$AAe?$AAc?$AAi?$AAm@
  00816	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0081c	33 c0		 xor	 eax, eax
$LN54@calc_numbe:
  0081e	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR locale$[rsp]
  00826	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00829	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0082c	c1 e8 06	 shr	 eax, 6
  0082f	83 e0 01	 and	 eax, 1
  00832	85 c0		 test	 eax, eax
  00834	74 10		 je	 SHORT $LN63@calc_numbe
  00836	c7 84 24 98 00
	00 00 7f 00 00
	00		 mov	 DWORD PTR tv352[rsp], 127 ; 0000007fH
  00841	e9 52 01 00 00	 jmp	 $LN64@calc_numbe
$LN63@calc_numbe:
  00846	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR locale$[rsp]
  0084e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00851	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00855	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0085b	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00860	85 c0		 test	 eax, eax
  00862	75 1c		 jne	 SHORT $LN55@calc_numbe
  00864	41 b8 1c 02 00
	00		 mov	 r8d, 540		; 0000021cH
  0086a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00871	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EO@BDOBDPEC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAl?$AAo?$AAc?$AAa?$AAl?$AAe?$AA?9?$AA?$DO?$AAd?$AAe?$AAc?$AAi?$AAm?$AAa?$AAl?$AA_@
  00878	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0087e	33 c0		 xor	 eax, eax
$LN55@calc_numbe:
  00880	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR locale$[rsp]
  00888	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0088b	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0088e	c1 e8 07	 shr	 eax, 7
  00891	83 e0 01	 and	 eax, 1
  00894	85 c0		 test	 eax, eax
  00896	75 1c		 jne	 SHORT $LN56@calc_numbe
  00898	41 b8 1c 02 00
	00		 mov	 r8d, 540		; 0000021cH
  0089e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  008a5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FE@PAOGJLHG@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAl?$AAo?$AAc?$AAa?$AAl?$AAe?$AA?9?$AA?$DO?$AAd?$AAe?$AAc?$AAi?$AAm@
  008ac	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  008b2	33 c0		 xor	 eax, eax
$LN56@calc_numbe:
  008b4	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR locale$[rsp]
  008bc	48 8b 00	 mov	 rax, QWORD PTR [rax]
  008bf	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  008c2	c1 e8 02	 shr	 eax, 2
  008c5	83 e0 07	 and	 eax, 7
  008c8	83 f8 01	 cmp	 eax, 1
  008cb	75 10		 jne	 SHORT $LN61@calc_numbe
  008cd	c7 84 24 9c 00
	00 00 ff 00 00
	00		 mov	 DWORD PTR tv350[rsp], 255 ; 000000ffH
  008d8	e9 ad 00 00 00	 jmp	 $LN62@calc_numbe
$LN61@calc_numbe:
  008dd	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR locale$[rsp]
  008e5	48 8b 00	 mov	 rax, QWORD PTR [rax]
  008e8	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  008ec	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  008f2	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  008f7	85 c0		 test	 eax, eax
  008f9	75 1c		 jne	 SHORT $LN57@calc_numbe
  008fb	41 b8 1c 02 00
	00		 mov	 r8d, 540		; 0000021cH
  00901	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00908	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EO@BDOBDPEC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAl?$AAo?$AAc?$AAa?$AAl?$AAe?$AA?9?$AA?$DO?$AAd?$AAe?$AAc?$AAi?$AAm?$AAa?$AAl?$AA_@
  0090f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00915	33 c0		 xor	 eax, eax
$LN57@calc_numbe:
  00917	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR locale$[rsp]
  0091f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00922	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00925	c1 e8 07	 shr	 eax, 7
  00928	83 e0 01	 and	 eax, 1
  0092b	85 c0		 test	 eax, eax
  0092d	75 1c		 jne	 SHORT $LN58@calc_numbe
  0092f	41 b8 1c 02 00
	00		 mov	 r8d, 540		; 0000021cH
  00935	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  0093c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FE@PAOGJLHG@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAl?$AAo?$AAc?$AAa?$AAl?$AAe?$AA?9?$AA?$DO?$AAd?$AAe?$AAc?$AAi?$AAm@
  00943	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00949	33 c0		 xor	 eax, eax
$LN58@calc_numbe:
  0094b	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR locale$[rsp]
  00953	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00956	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00959	c1 e8 02	 shr	 eax, 2
  0095c	83 e0 07	 and	 eax, 7
  0095f	83 f8 02	 cmp	 eax, 2
  00962	75 0d		 jne	 SHORT $LN59@calc_numbe
  00964	c7 84 24 a0 00
	00 00 ff ff 00
	00		 mov	 DWORD PTR tv349[rsp], 65535 ; 0000ffffH
  0096f	eb 0b		 jmp	 SHORT $LN60@calc_numbe
$LN59@calc_numbe:
  00971	c7 84 24 a0 00
	00 00 ff ff 10
	00		 mov	 DWORD PTR tv349[rsp], 1114111 ; 0010ffffH
$LN60@calc_numbe:
  0097c	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR tv349[rsp]
  00983	89 84 24 9c 00
	00 00		 mov	 DWORD PTR tv350[rsp], eax
$LN62@calc_numbe:
  0098a	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR tv350[rsp]
  00991	89 84 24 98 00
	00 00		 mov	 DWORD PTR tv352[rsp], eax
$LN64@calc_numbe:
  00998	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR tv352[rsp]
  0099f	89 84 24 94 00
	00 00		 mov	 DWORD PTR tv353[rsp], eax
$LN66@calc_numbe:
  009a6	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR maxchar$[rsp]
  009ae	8b 8c 24 94 00
	00 00		 mov	 ecx, DWORD PTR tv353[rsp]
  009b5	89 08		 mov	 DWORD PTR [rax], ecx
$LN1@calc_numbe:

; 541  : 
; 542  :     return spec->n_lpadding + spec->n_sign + spec->n_prefix +
; 543  :         spec->n_spadding + spec->n_grouped_digits + spec->n_decimal +
; 544  :         spec->n_remainder + spec->n_rpadding;

  009b7	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR spec$[rsp]
  009bf	48 8b 00	 mov	 rax, QWORD PTR [rax]
  009c2	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR spec$[rsp]
  009ca	48 03 41 28	 add	 rax, QWORD PTR [rcx+40]
  009ce	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR spec$[rsp]
  009d6	48 03 41 08	 add	 rax, QWORD PTR [rcx+8]
  009da	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR spec$[rsp]
  009e2	48 03 41 10	 add	 rax, QWORD PTR [rcx+16]
  009e6	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR spec$[rsp]
  009ee	48 03 41 30	 add	 rax, QWORD PTR [rcx+48]
  009f2	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR spec$[rsp]
  009fa	48 03 41 38	 add	 rax, QWORD PTR [rcx+56]
  009fe	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR spec$[rsp]
  00a06	48 03 41 40	 add	 rax, QWORD PTR [rcx+64]
  00a0a	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR spec$[rsp]
  00a12	48 03 41 18	 add	 rax, QWORD PTR [rcx+24]

; 545  : }

  00a16	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  00a1d	c3		 ret	 0
calc_number_widths ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BI@PDACIMOE@non?9ascii?5grouped?5digit?$AA@ ; `string'
PUBLIC	??_C@_1DI@CHAAKBGD@?$AAr?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAs?$AAp?$AAe?$AAc?$AA?9?$AA?$DO?$AAn?$AA_?$AAg?$AAr?$AAo?$AAu?$AAp?$AAe?$AAd?$AA_?$AAd?$AAi?$AAg?$AAi?$AAt?$AAs?$AA?$AA@ ; `string'
PUBLIC	??_C@_1EO@HHDLJFDA@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AAd?$AAi?$AAg?$AAi?$AAt?$AAs?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa@ ; `string'
PUBLIC	??_C@_1DG@DIBHCECG@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAd?$AAi?$AAg?$AAi?$AAt?$AAs?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DA@KDFLFPPM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAd?$AAi?$AAg?$AAi?$AAt?$AAs?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BC@KLEHIKAD@?$AAc?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA1?$AA2?$AA7?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DO@LPDHELHB@?$AA?$CI?$AAk?$AAi?$AAn?$AAd?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AA4?$AAB?$AAY?$AAT?$AAE?$AA_?$AAK?$AAI?$AAN?$AAD?$AA?$AA@ ; `string'
EXTRN	PyExc_SystemError:QWORD
EXTRN	PyMem_Free:PROC
EXTRN	_PyUnicode_AsKind:PROC
EXTRN	_Py_ctype_toupper:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$fill_number DD imagerel fill_number
	DD	imagerel fill_number+2978
	DD	imagerel $unwind$fill_number
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$fill_number DD 021b01H
	DD	01b011bH
xdata	ENDS
;	COMDAT ??_C@_0BI@PDACIMOE@non?9ascii?5grouped?5digit?$AA@
CONST	SEGMENT
??_C@_0BI@PDACIMOE@non?9ascii?5grouped?5digit?$AA@ DB 'non-ascii grouped '
	DB	'digit', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1DI@CHAAKBGD@?$AAr?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAs?$AAp?$AAe?$AAc?$AA?9?$AA?$DO?$AAn?$AA_?$AAg?$AAr?$AAo?$AAu?$AAp?$AAe?$AAd?$AA_?$AAd?$AAi?$AAg?$AAi?$AAt?$AAs?$AA?$AA@
CONST	SEGMENT
??_C@_1DI@CHAAKBGD@?$AAr?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAs?$AAp?$AAe?$AAc?$AA?9?$AA?$DO?$AAn?$AA_?$AAg?$AAr?$AAo?$AAu?$AAp?$AAe?$AAd?$AA_?$AAd?$AAi?$AAg?$AAi?$AAt?$AAs?$AA?$AA@ DB 'r'
	DB	00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 's', 00H, 'p', 00H
	DB	'e', 00H, 'c', 00H, '-', 00H, '>', 00H, 'n', 00H, '_', 00H, 'g'
	DB	00H, 'r', 00H, 'o', 00H, 'u', 00H, 'p', 00H, 'e', 00H, 'd', 00H
	DB	'_', 00H, 'd', 00H, 'i', 00H, 'g', 00H, 'i', 00H, 't', 00H, 's'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1EO@HHDLJFDA@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AAd?$AAi?$AAg?$AAi?$AAt?$AAs?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa@
CONST	SEGMENT
??_C@_1EO@HHDLJFDA@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AAd?$AAi?$AAg?$AAi?$AAt?$AAs?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa@ DB '('
	DB	00H, '(', 00H, 'P', 00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H
	DB	'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'O', 00H, 'b', 00H, 'j'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, '*', 00H, ')', 00H, '(', 00H
	DB	'd', 00H, 'i', 00H, 'g', 00H, 'i', 00H, 't', 00H, 's', 00H, ')'
	DB	00H, ')', 00H, '-', 00H, '>', 00H, 'd', 00H, 'a', 00H, 't', 00H
	DB	'a', 00H, '.', 00H, 'a', 00H, 'n', 00H, 'y', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DG@DIBHCECG@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAd?$AAi?$AAg?$AAi?$AAt?$AAs?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DG@DIBHCECG@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAd?$AAi?$AAg?$AAi?$AAt?$AAs?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'I', 00H, 'S', 00H, '_', 00H, 'R'
	DB	00H, 'E', 00H, 'A', 00H, 'D', 00H, 'Y', 00H, '(', 00H, 'd', 00H
	DB	'i', 00H, 'g', 00H, 'i', 00H, 't', 00H, 's', 00H, ')', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1DA@KDFLFPPM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAd?$AAi?$AAg?$AAi?$AAt?$AAs?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DA@KDFLFPPM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAd?$AAi?$AAg?$AAi?$AAt?$AAs?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, 'd', 00H, 'i', 00H, 'g', 00H, 'i', 00H
	DB	't', 00H, 's', 00H, ')', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@KLEHIKAD@?$AAc?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA1?$AA2?$AA7?$AA?$AA@
CONST	SEGMENT
??_C@_1BC@KLEHIKAD@?$AAc?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA1?$AA2?$AA7?$AA?$AA@ DB 'c'
	DB	00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H, '1', 00H, '2', 00H
	DB	'7', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1DO@LPDHELHB@?$AA?$CI?$AAk?$AAi?$AAn?$AAd?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AA4?$AAB?$AAY?$AAT?$AAE?$AA_?$AAK?$AAI?$AAN?$AAD?$AA?$AA@
CONST	SEGMENT
??_C@_1DO@LPDHELHB@?$AA?$CI?$AAk?$AAi?$AAn?$AAd?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AA4?$AAB?$AAY?$AAT?$AAE?$AA_?$AAK?$AAI?$AAN?$AAD?$AA?$AA@ DB '('
	DB	00H, 'k', 00H, 'i', 00H, 'n', 00H, 'd', 00H, ')', 00H, ' ', 00H
	DB	'=', 00H, '=', 00H, ' ', 00H, 'P', 00H, 'y', 00H, 'U', 00H, 'n'
	DB	00H, 'i', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, '_', 00H
	DB	'4', 00H, 'B', 00H, 'Y', 00H, 'T', 00H, 'E', 00H, '_', 00H, 'K'
	DB	00H, 'I', 00H, 'N', 00H, 'D', 00H, 00H, 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT fill_number
_TEXT	SEGMENT
kind$ = 80
d_pos$ = 88
data$ = 96
r$ = 104
t$21668 = 112
c$21672 = 120
pdigits$21699 = 128
t$21742 = 136
c$21746 = 144
tv77 = 148
tv164 = 152
tv163 = 156
tv175 = 160
tv227 = 164
tv262 = 168
tv271 = 176
tv365 = 184
tv364 = 188
tv374 = 192
writer$ = 224
spec$ = 232
digits$ = 240
d_start$ = 248
d_end$ = 256
prefix$ = 264
p_start$ = 272
fill_char$ = 280
locale$ = 288
toupper$ = 296
fill_number PROC					; COMDAT

; 556  : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec d8 00
	00 00		 sub	 rsp, 216		; 000000d8H

; 557  :     /* Used to keep track of digits, decimal, and remainder. */
; 558  :     Py_ssize_t d_pos = d_start;

  0001b	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR d_start$[rsp]
  00023	48 89 44 24 58	 mov	 QWORD PTR d_pos$[rsp], rax

; 559  :     const enum PyUnicode_Kind kind = writer->kind;

  00028	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR writer$[rsp]
  00030	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
  00033	89 44 24 50	 mov	 DWORD PTR kind$[rsp], eax

; 560  :     const void *data = writer->data;

  00037	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR writer$[rsp]
  0003f	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00043	48 89 44 24 60	 mov	 QWORD PTR data$[rsp], rax

; 561  :     Py_ssize_t r;
; 562  : 
; 563  :     if (spec->n_lpadding) {

  00048	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR spec$[rsp]
  00050	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00054	74 52		 je	 SHORT $LN46@fill_numbe

; 564  :         _PyUnicode_FastFill(writer->buffer,
; 565  :                             writer->pos, spec->n_lpadding, fill_char);

  00056	44 8b 8c 24 18
	01 00 00	 mov	 r9d, DWORD PTR fill_char$[rsp]
  0005e	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR spec$[rsp]
  00066	4c 8b 00	 mov	 r8, QWORD PTR [rax]
  00069	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR writer$[rsp]
  00071	48 8b 50 20	 mov	 rdx, QWORD PTR [rax+32]
  00075	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR writer$[rsp]
  0007d	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00080	e8 00 00 00 00	 call	 _PyUnicode_FastFill

; 566  :         writer->pos += spec->n_lpadding;

  00085	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR writer$[rsp]
  0008d	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00091	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR spec$[rsp]
  00099	48 03 01	 add	 rax, QWORD PTR [rcx]
  0009c	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR writer$[rsp]
  000a4	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax
$LN46@fill_numbe:

; 567  :     }
; 568  :     if (spec->n_sign == 1) {

  000a8	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR spec$[rsp]
  000b0	48 83 78 28 01	 cmp	 QWORD PTR [rax+40], 1
  000b5	0f 85 cf 00 00
	00		 jne	 $LN45@fill_numbe
$LN44@fill_numbe:

; 569  :         PyUnicode_WRITE(kind, data, writer->pos, spec->sign);

  000bb	8b 44 24 50	 mov	 eax, DWORD PTR kind$[rsp]
  000bf	89 84 24 94 00
	00 00		 mov	 DWORD PTR tv77[rsp], eax
  000c6	83 bc 24 94 00
	00 00 01	 cmp	 DWORD PTR tv77[rsp], 1
  000ce	74 0c		 je	 SHORT $LN39@fill_numbe
  000d0	83 bc 24 94 00
	00 00 02	 cmp	 DWORD PTR tv77[rsp], 2
  000d8	74 24		 je	 SHORT $LN38@fill_numbe
  000da	eb 46		 jmp	 SHORT $LN37@fill_numbe
$LN39@fill_numbe:
  000dc	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR writer$[rsp]
  000e4	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  000e8	48 8b 4c 24 60	 mov	 rcx, QWORD PTR data$[rsp]
  000ed	48 8b 94 24 e8
	00 00 00	 mov	 rdx, QWORD PTR spec$[rsp]
  000f5	0f b6 52 20	 movzx	 edx, BYTE PTR [rdx+32]
  000f9	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  000fc	eb 67		 jmp	 SHORT $LN40@fill_numbe
$LN38@fill_numbe:
  000fe	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR spec$[rsp]
  00106	66 0f be 40 20	 movsx	 ax, BYTE PTR [rax+32]
  0010b	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR writer$[rsp]
  00113	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  00117	48 8b 54 24 60	 mov	 rdx, QWORD PTR data$[rsp]
  0011c	66 89 04 4a	 mov	 WORD PTR [rdx+rcx*2], ax
  00120	eb 43		 jmp	 SHORT $LN40@fill_numbe
$LN37@fill_numbe:
  00122	83 7c 24 50 04	 cmp	 DWORD PTR kind$[rsp], 4
  00127	74 1c		 je	 SHORT $LN49@fill_numbe
  00129	41 b8 39 02 00
	00		 mov	 r8d, 569		; 00000239H
  0012f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00136	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@LPDHELHB@?$AA?$CI?$AAk?$AAi?$AAn?$AAd?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AA4?$AAB?$AAY?$AAT?$AAE?$AA_?$AAK?$AAI?$AAN?$AAD?$AA?$AA@
  0013d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00143	33 c0		 xor	 eax, eax
$LN49@fill_numbe:
  00145	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR spec$[rsp]
  0014d	0f be 40 20	 movsx	 eax, BYTE PTR [rax+32]
  00151	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR writer$[rsp]
  00159	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  0015d	48 8b 54 24 60	 mov	 rdx, QWORD PTR data$[rsp]
  00162	89 04 8a	 mov	 DWORD PTR [rdx+rcx*4], eax
$LN40@fill_numbe:
  00165	33 c0		 xor	 eax, eax
  00167	85 c0		 test	 eax, eax
  00169	0f 85 4c ff ff
	ff		 jne	 $LN44@fill_numbe

; 570  :         writer->pos++;

  0016f	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR writer$[rsp]
  00177	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0017b	48 ff c0	 inc	 rax
  0017e	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR writer$[rsp]
  00186	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax
$LN45@fill_numbe:

; 571  :     }
; 572  :     if (spec->n_prefix) {

  0018a	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR spec$[rsp]
  00192	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00197	0f 84 1a 02 00
	00		 je	 $LN36@fill_numbe

; 573  :         _PyUnicode_FastCopyCharacters(writer->buffer, writer->pos,
; 574  :                                       prefix, p_start,
; 575  :                                       spec->n_prefix);

  0019d	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR spec$[rsp]
  001a5	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  001a9	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001ae	4c 8b 8c 24 10
	01 00 00	 mov	 r9, QWORD PTR p_start$[rsp]
  001b6	4c 8b 84 24 08
	01 00 00	 mov	 r8, QWORD PTR prefix$[rsp]
  001be	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR writer$[rsp]
  001c6	48 8b 50 20	 mov	 rdx, QWORD PTR [rax+32]
  001ca	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR writer$[rsp]
  001d2	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  001d5	e8 00 00 00 00	 call	 _PyUnicode_FastCopyCharacters

; 576  :         if (toupper) {

  001da	83 bc 24 28 01
	00 00 00	 cmp	 DWORD PTR toupper$[rsp], 0
  001e2	0f 84 ab 01 00
	00		 je	 $LN35@fill_numbe

; 577  :             Py_ssize_t t;
; 578  :             for (t = 0; t < spec->n_prefix; t++) {

  001e8	48 c7 44 24 70
	00 00 00 00	 mov	 QWORD PTR t$21668[rsp], 0
  001f1	eb 0d		 jmp	 SHORT $LN34@fill_numbe
$LN33@fill_numbe:
  001f3	48 8b 44 24 70	 mov	 rax, QWORD PTR t$21668[rsp]
  001f8	48 ff c0	 inc	 rax
  001fb	48 89 44 24 70	 mov	 QWORD PTR t$21668[rsp], rax
$LN34@fill_numbe:
  00200	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR spec$[rsp]
  00208	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0020c	48 39 44 24 70	 cmp	 QWORD PTR t$21668[rsp], rax
  00211	0f 8d 7c 01 00
	00		 jge	 $LN32@fill_numbe

; 579  :                 Py_UCS4 c = PyUnicode_READ(kind, data, writer->pos + t);

  00217	83 7c 24 50 01	 cmp	 DWORD PTR kind$[rsp], 1
  0021c	75 23		 jne	 SHORT $LN52@fill_numbe
  0021e	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR writer$[rsp]
  00226	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0022a	48 03 44 24 70	 add	 rax, QWORD PTR t$21668[rsp]
  0022f	48 8b 4c 24 60	 mov	 rcx, QWORD PTR data$[rsp]
  00234	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00238	89 84 24 98 00
	00 00		 mov	 DWORD PTR tv164[rsp], eax
  0023f	eb 58		 jmp	 SHORT $LN53@fill_numbe
$LN52@fill_numbe:
  00241	83 7c 24 50 02	 cmp	 DWORD PTR kind$[rsp], 2
  00246	75 23		 jne	 SHORT $LN50@fill_numbe
  00248	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR writer$[rsp]
  00250	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00254	48 03 44 24 70	 add	 rax, QWORD PTR t$21668[rsp]
  00259	48 8b 4c 24 60	 mov	 rcx, QWORD PTR data$[rsp]
  0025e	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00262	89 84 24 9c 00
	00 00		 mov	 DWORD PTR tv163[rsp], eax
  00269	eb 20		 jmp	 SHORT $LN51@fill_numbe
$LN50@fill_numbe:
  0026b	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR writer$[rsp]
  00273	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00277	48 03 44 24 70	 add	 rax, QWORD PTR t$21668[rsp]
  0027c	48 8b 4c 24 60	 mov	 rcx, QWORD PTR data$[rsp]
  00281	8b 04 81	 mov	 eax, DWORD PTR [rcx+rax*4]
  00284	89 84 24 9c 00
	00 00		 mov	 DWORD PTR tv163[rsp], eax
$LN51@fill_numbe:
  0028b	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR tv163[rsp]
  00292	89 84 24 98 00
	00 00		 mov	 DWORD PTR tv164[rsp], eax
$LN53@fill_numbe:
  00299	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR tv164[rsp]
  002a0	89 44 24 78	 mov	 DWORD PTR c$21672[rsp], eax

; 580  :                 c = Py_TOUPPER(c);

  002a4	8b 44 24 78	 mov	 eax, DWORD PTR c$21672[rsp]
  002a8	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  002ad	0f b6 c0	 movzx	 eax, al
  002b0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_ctype_toupper
  002b7	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  002bb	89 44 24 78	 mov	 DWORD PTR c$21672[rsp], eax

; 581  :                 assert (c <= 127);

  002bf	83 7c 24 78 7f	 cmp	 DWORD PTR c$21672[rsp], 127 ; 0000007fH
  002c4	76 1c		 jbe	 SHORT $LN54@fill_numbe
  002c6	41 b8 45 02 00
	00		 mov	 r8d, 581		; 00000245H
  002cc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  002d3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BC@KLEHIKAD@?$AAc?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AA1?$AA2?$AA7?$AA?$AA@
  002da	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  002e0	33 c0		 xor	 eax, eax
$LN54@fill_numbe:
$LN31@fill_numbe:

; 582  :                 PyUnicode_WRITE(kind, data, writer->pos + t, c);

  002e2	8b 44 24 50	 mov	 eax, DWORD PTR kind$[rsp]
  002e6	89 84 24 a0 00
	00 00		 mov	 DWORD PTR tv175[rsp], eax
  002ed	83 bc 24 a0 00
	00 00 01	 cmp	 DWORD PTR tv175[rsp], 1
  002f5	74 0c		 je	 SHORT $LN26@fill_numbe
  002f7	83 bc 24 a0 00
	00 00 02	 cmp	 DWORD PTR tv175[rsp], 2
  002ff	74 22		 je	 SHORT $LN25@fill_numbe
  00301	eb 41		 jmp	 SHORT $LN24@fill_numbe
$LN26@fill_numbe:
  00303	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR writer$[rsp]
  0030b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0030f	48 03 44 24 70	 add	 rax, QWORD PTR t$21668[rsp]
  00314	48 8b 4c 24 60	 mov	 rcx, QWORD PTR data$[rsp]
  00319	0f b6 54 24 78	 movzx	 edx, BYTE PTR c$21672[rsp]
  0031e	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  00321	eb 61		 jmp	 SHORT $LN27@fill_numbe
$LN25@fill_numbe:
  00323	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR writer$[rsp]
  0032b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0032f	48 03 44 24 70	 add	 rax, QWORD PTR t$21668[rsp]
  00334	48 8b 4c 24 60	 mov	 rcx, QWORD PTR data$[rsp]
  00339	0f b7 54 24 78	 movzx	 edx, WORD PTR c$21672[rsp]
  0033e	66 89 14 41	 mov	 WORD PTR [rcx+rax*2], dx
  00342	eb 40		 jmp	 SHORT $LN27@fill_numbe
$LN24@fill_numbe:
  00344	83 7c 24 50 04	 cmp	 DWORD PTR kind$[rsp], 4
  00349	74 1c		 je	 SHORT $LN55@fill_numbe
  0034b	41 b8 46 02 00
	00		 mov	 r8d, 582		; 00000246H
  00351	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00358	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@LPDHELHB@?$AA?$CI?$AAk?$AAi?$AAn?$AAd?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AA4?$AAB?$AAY?$AAT?$AAE?$AA_?$AAK?$AAI?$AAN?$AAD?$AA?$AA@
  0035f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00365	33 c0		 xor	 eax, eax
$LN55@fill_numbe:
  00367	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR writer$[rsp]
  0036f	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00373	48 03 44 24 70	 add	 rax, QWORD PTR t$21668[rsp]
  00378	48 8b 4c 24 60	 mov	 rcx, QWORD PTR data$[rsp]
  0037d	8b 54 24 78	 mov	 edx, DWORD PTR c$21672[rsp]
  00381	89 14 81	 mov	 DWORD PTR [rcx+rax*4], edx
$LN27@fill_numbe:
  00384	33 c0		 xor	 eax, eax
  00386	85 c0		 test	 eax, eax
  00388	0f 85 54 ff ff
	ff		 jne	 $LN31@fill_numbe

; 583  :             }

  0038e	e9 60 fe ff ff	 jmp	 $LN33@fill_numbe
$LN32@fill_numbe:
$LN35@fill_numbe:

; 584  :         }
; 585  :         writer->pos += spec->n_prefix;

  00393	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR writer$[rsp]
  0039b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0039f	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR spec$[rsp]
  003a7	48 03 41 08	 add	 rax, QWORD PTR [rcx+8]
  003ab	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR writer$[rsp]
  003b3	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax
$LN36@fill_numbe:

; 586  :     }
; 587  :     if (spec->n_spadding) {

  003b7	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR spec$[rsp]
  003bf	48 83 78 10 00	 cmp	 QWORD PTR [rax+16], 0
  003c4	74 54		 je	 SHORT $LN23@fill_numbe

; 588  :         _PyUnicode_FastFill(writer->buffer,
; 589  :                             writer->pos, spec->n_spadding, fill_char);

  003c6	44 8b 8c 24 18
	01 00 00	 mov	 r9d, DWORD PTR fill_char$[rsp]
  003ce	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR spec$[rsp]
  003d6	4c 8b 40 10	 mov	 r8, QWORD PTR [rax+16]
  003da	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR writer$[rsp]
  003e2	48 8b 50 20	 mov	 rdx, QWORD PTR [rax+32]
  003e6	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR writer$[rsp]
  003ee	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  003f1	e8 00 00 00 00	 call	 _PyUnicode_FastFill

; 590  :         writer->pos += spec->n_spadding;

  003f6	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR writer$[rsp]
  003fe	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00402	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR spec$[rsp]
  0040a	48 03 41 10	 add	 rax, QWORD PTR [rcx+16]
  0040e	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR writer$[rsp]
  00416	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax
$LN23@fill_numbe:

; 591  :     }
; 592  : 
; 593  :     /* Only for type 'c' special case, it has no digits. */
; 594  :     if (spec->n_digits != 0) {

  0041a	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR spec$[rsp]
  00422	48 83 78 48 00	 cmp	 QWORD PTR [rax+72], 0
  00427	0f 84 0f 04 00
	00		 je	 $LN22@fill_numbe

; 595  :         /* Fill the digits with InsertThousandsGrouping. */
; 596  :         char *pdigits;
; 597  :         if (PyUnicode_READY(digits))

  0042d	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR digits$[rsp]
  00435	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00439	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0043f	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00444	85 c0		 test	 eax, eax
  00446	75 1c		 jne	 SHORT $LN56@fill_numbe
  00448	41 b8 55 02 00
	00		 mov	 r8d, 597		; 00000255H
  0044e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00455	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@KDFLFPPM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAd?$AAi?$AAg?$AAi?$AAt?$AAs?$AA?$CJ?$AA?$AA@
  0045c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00462	33 c0		 xor	 eax, eax
$LN56@fill_numbe:
  00464	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR digits$[rsp]
  0046c	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0046f	c1 e8 07	 shr	 eax, 7
  00472	83 e0 01	 and	 eax, 1
  00475	85 c0		 test	 eax, eax
  00477	74 0d		 je	 SHORT $LN57@fill_numbe
  00479	c7 84 24 a4 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv227[rsp], 0
  00484	eb 14		 jmp	 SHORT $LN58@fill_numbe
$LN57@fill_numbe:
  00486	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR digits$[rsp]
  0048e	e8 00 00 00 00	 call	 _PyUnicode_Ready
  00493	89 84 24 a4 00
	00 00		 mov	 DWORD PTR tv227[rsp], eax
$LN58@fill_numbe:
  0049a	83 bc 24 a4 00
	00 00 00	 cmp	 DWORD PTR tv227[rsp], 0
  004a2	74 0a		 je	 SHORT $LN21@fill_numbe

; 598  :             return -1;

  004a4	b8 ff ff ff ff	 mov	 eax, -1
  004a9	e9 ec 06 00 00	 jmp	 $LN47@fill_numbe
$LN21@fill_numbe:

; 599  :         pdigits = PyUnicode_DATA(digits);

  004ae	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR digits$[rsp]
  004b6	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  004ba	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  004c0	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  004c5	85 c0		 test	 eax, eax
  004c7	75 1c		 jne	 SHORT $LN59@fill_numbe
  004c9	41 b8 57 02 00
	00		 mov	 r8d, 599		; 00000257H
  004cf	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  004d6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@KDFLFPPM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAd?$AAi?$AAg?$AAi?$AAt?$AAs?$AA?$CJ?$AA?$AA@
  004dd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  004e3	33 c0		 xor	 eax, eax
$LN59@fill_numbe:
  004e5	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR digits$[rsp]
  004ed	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  004f0	c1 e8 05	 shr	 eax, 5
  004f3	83 e0 01	 and	 eax, 1
  004f6	85 c0		 test	 eax, eax
  004f8	0f 84 bd 00 00
	00		 je	 $LN65@fill_numbe
  004fe	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR digits$[rsp]
  00506	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0050a	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00510	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00515	85 c0		 test	 eax, eax
  00517	75 1c		 jne	 SHORT $LN60@fill_numbe
  00519	41 b8 57 02 00
	00		 mov	 r8d, 599		; 00000257H
  0051f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00526	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@KDFLFPPM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAd?$AAi?$AAg?$AAi?$AAt?$AAs?$AA?$CJ?$AA?$AA@
  0052d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00533	33 c0		 xor	 eax, eax
$LN60@fill_numbe:
  00535	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR digits$[rsp]
  0053d	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00540	c1 e8 07	 shr	 eax, 7
  00543	83 e0 01	 and	 eax, 1
  00546	85 c0		 test	 eax, eax
  00548	75 1c		 jne	 SHORT $LN61@fill_numbe
  0054a	41 b8 57 02 00
	00		 mov	 r8d, 599		; 00000257H
  00550	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00557	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DG@DIBHCECG@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAd?$AAi?$AAg?$AAi?$AAt?$AAs?$AA?$CJ?$AA?$AA@
  0055e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00564	33 c0		 xor	 eax, eax
$LN61@fill_numbe:
  00566	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR digits$[rsp]
  0056e	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00571	c1 e8 06	 shr	 eax, 6
  00574	83 e0 01	 and	 eax, 1
  00577	85 c0		 test	 eax, eax
  00579	74 18		 je	 SHORT $LN62@fill_numbe
  0057b	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR digits$[rsp]
  00583	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  00589	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR tv262[rsp], rax
  00591	eb 16		 jmp	 SHORT $LN63@fill_numbe
$LN62@fill_numbe:
  00593	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR digits$[rsp]
  0059b	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  005a1	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR tv262[rsp], rax
$LN63@fill_numbe:
  005a9	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR tv262[rsp]
  005b1	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR tv271[rsp], rax
  005b9	eb 45		 jmp	 SHORT $LN66@fill_numbe
$LN65@fill_numbe:
  005bb	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR digits$[rsp]
  005c3	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  005cb	75 1c		 jne	 SHORT $LN64@fill_numbe
  005cd	41 b8 57 02 00
	00		 mov	 r8d, 599		; 00000257H
  005d3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  005da	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EO@HHDLJFDA@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AAd?$AAi?$AAg?$AAi?$AAt?$AAs?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa@
  005e1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  005e7	33 c0		 xor	 eax, eax
$LN64@fill_numbe:
  005e9	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR digits$[rsp]
  005f1	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  005f8	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR tv271[rsp], rax
$LN66@fill_numbe:
  00600	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR tv271[rsp]
  00608	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR pdigits$21699[rsp], rax

; 600  :         if (PyUnicode_KIND(digits) < kind) {

  00610	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR digits$[rsp]
  00618	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0061c	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00622	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00627	85 c0		 test	 eax, eax
  00629	75 1c		 jne	 SHORT $LN67@fill_numbe
  0062b	41 b8 58 02 00
	00		 mov	 r8d, 600		; 00000258H
  00631	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00638	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@KDFLFPPM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAd?$AAi?$AAg?$AAi?$AAt?$AAs?$AA?$CJ?$AA?$AA@
  0063f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00645	33 c0		 xor	 eax, eax
$LN67@fill_numbe:
  00647	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR digits$[rsp]
  0064f	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00652	c1 e8 07	 shr	 eax, 7
  00655	83 e0 01	 and	 eax, 1
  00658	85 c0		 test	 eax, eax
  0065a	75 1c		 jne	 SHORT $LN68@fill_numbe
  0065c	41 b8 58 02 00
	00		 mov	 r8d, 600		; 00000258H
  00662	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00669	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DG@DIBHCECG@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAd?$AAi?$AAg?$AAi?$AAt?$AAs?$AA?$CJ?$AA?$AA@
  00670	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00676	33 c0		 xor	 eax, eax
$LN68@fill_numbe:
  00678	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR digits$[rsp]
  00680	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00683	c1 e8 02	 shr	 eax, 2
  00686	83 e0 07	 and	 eax, 7
  00689	3b 44 24 50	 cmp	 eax, DWORD PTR kind$[rsp]
  0068d	73 2e		 jae	 SHORT $LN20@fill_numbe

; 601  :             pdigits = _PyUnicode_AsKind(digits, kind);

  0068f	8b 54 24 50	 mov	 edx, DWORD PTR kind$[rsp]
  00693	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR digits$[rsp]
  0069b	e8 00 00 00 00	 call	 _PyUnicode_AsKind
  006a0	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR pdigits$21699[rsp], rax

; 602  :             if (pdigits == NULL)

  006a8	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR pdigits$21699[rsp], 0
  006b1	75 0a		 jne	 SHORT $LN19@fill_numbe

; 603  :                 return -1;

  006b3	b8 ff ff ff ff	 mov	 eax, -1
  006b8	e9 dd 04 00 00	 jmp	 $LN47@fill_numbe
$LN19@fill_numbe:
$LN20@fill_numbe:

; 604  :         }
; 605  :         r = _PyUnicode_InsertThousandsGrouping(
; 606  :                 writer->buffer, writer->pos,
; 607  :                 spec->n_grouped_digits,
; 608  :                 pdigits + kind * d_pos,
; 609  :                 spec->n_digits, spec->n_min_width,
; 610  :                 locale->grouping, locale->thousands_sep, NULL);

  006bd	48 63 44 24 50	 movsxd	 rax, DWORD PTR kind$[rsp]
  006c2	48 0f af 44 24
	58		 imul	 rax, QWORD PTR d_pos$[rsp]
  006c8	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR pdigits$21699[rsp]
  006d0	48 03 c8	 add	 rcx, rax
  006d3	48 8b c1	 mov	 rax, rcx
  006d6	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR [rsp+64], 0
  006df	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR locale$[rsp]
  006e7	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  006eb	48 89 4c 24 38	 mov	 QWORD PTR [rsp+56], rcx
  006f0	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR locale$[rsp]
  006f8	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  006fc	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00701	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR spec$[rsp]
  00709	48 8b 49 50	 mov	 rcx, QWORD PTR [rcx+80]
  0070d	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  00712	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR spec$[rsp]
  0071a	48 8b 49 48	 mov	 rcx, QWORD PTR [rcx+72]
  0071e	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00723	4c 8b c8	 mov	 r9, rax
  00726	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR spec$[rsp]
  0072e	4c 8b 40 30	 mov	 r8, QWORD PTR [rax+48]
  00732	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR writer$[rsp]
  0073a	48 8b 50 20	 mov	 rdx, QWORD PTR [rax+32]
  0073e	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR writer$[rsp]
  00746	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00749	e8 00 00 00 00	 call	 _PyUnicode_InsertThousandsGrouping
  0074e	48 89 44 24 68	 mov	 QWORD PTR r$[rsp], rax

; 611  :         if (r == -1)

  00753	48 83 7c 24 68
	ff		 cmp	 QWORD PTR r$[rsp], -1
  00759	75 0a		 jne	 SHORT $LN18@fill_numbe

; 612  :             return -1;

  0075b	b8 ff ff ff ff	 mov	 eax, -1
  00760	e9 35 04 00 00	 jmp	 $LN47@fill_numbe
$LN18@fill_numbe:

; 613  :         assert(r == spec->n_grouped_digits);

  00765	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR spec$[rsp]
  0076d	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  00771	48 39 44 24 68	 cmp	 QWORD PTR r$[rsp], rax
  00776	74 1c		 je	 SHORT $LN69@fill_numbe
  00778	41 b8 65 02 00
	00		 mov	 r8d, 613		; 00000265H
  0077e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00785	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DI@CHAAKBGD@?$AAr?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAs?$AAp?$AAe?$AAc?$AA?9?$AA?$DO?$AAn?$AA_?$AAg?$AAr?$AAo?$AAu?$AAp?$AAe?$AAd?$AA_?$AAd?$AAi?$AAg?$AAi?$AAt?$AAs?$AA?$AA@
  0078c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00792	33 c0		 xor	 eax, eax
$LN69@fill_numbe:

; 614  :         if (PyUnicode_KIND(digits) < kind)

  00794	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR digits$[rsp]
  0079c	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  007a0	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  007a6	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  007ab	85 c0		 test	 eax, eax
  007ad	75 1c		 jne	 SHORT $LN70@fill_numbe
  007af	41 b8 66 02 00
	00		 mov	 r8d, 614		; 00000266H
  007b5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  007bc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@KDFLFPPM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAd?$AAi?$AAg?$AAi?$AAt?$AAs?$AA?$CJ?$AA?$AA@
  007c3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  007c9	33 c0		 xor	 eax, eax
$LN70@fill_numbe:
  007cb	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR digits$[rsp]
  007d3	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  007d6	c1 e8 07	 shr	 eax, 7
  007d9	83 e0 01	 and	 eax, 1
  007dc	85 c0		 test	 eax, eax
  007de	75 1c		 jne	 SHORT $LN71@fill_numbe
  007e0	41 b8 66 02 00
	00		 mov	 r8d, 614		; 00000266H
  007e6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  007ed	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DG@DIBHCECG@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAd?$AAi?$AAg?$AAi?$AAt?$AAs?$AA?$CJ?$AA?$AA@
  007f4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  007fa	33 c0		 xor	 eax, eax
$LN71@fill_numbe:
  007fc	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR digits$[rsp]
  00804	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00807	c1 e8 02	 shr	 eax, 2
  0080a	83 e0 07	 and	 eax, 7
  0080d	3b 44 24 50	 cmp	 eax, DWORD PTR kind$[rsp]
  00811	73 0d		 jae	 SHORT $LN17@fill_numbe

; 615  :             PyMem_Free(pdigits);

  00813	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR pdigits$21699[rsp]
  0081b	e8 00 00 00 00	 call	 PyMem_Free
$LN17@fill_numbe:

; 616  :         d_pos += spec->n_digits;

  00820	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR spec$[rsp]
  00828	48 8b 40 48	 mov	 rax, QWORD PTR [rax+72]
  0082c	48 8b 4c 24 58	 mov	 rcx, QWORD PTR d_pos$[rsp]
  00831	48 03 c8	 add	 rcx, rax
  00834	48 8b c1	 mov	 rax, rcx
  00837	48 89 44 24 58	 mov	 QWORD PTR d_pos$[rsp], rax
$LN22@fill_numbe:

; 617  :     }
; 618  :     if (toupper) {

  0083c	83 bc 24 28 01
	00 00 00	 cmp	 DWORD PTR toupper$[rsp], 0
  00844	0f 84 df 01 00
	00		 je	 $LN16@fill_numbe

; 619  :         Py_ssize_t t;
; 620  :         for (t = 0; t < spec->n_grouped_digits; t++) {

  0084a	48 c7 84 24 88
	00 00 00 00 00
	00 00		 mov	 QWORD PTR t$21742[rsp], 0
  00856	eb 13		 jmp	 SHORT $LN15@fill_numbe
$LN14@fill_numbe:
  00858	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR t$21742[rsp]
  00860	48 ff c0	 inc	 rax
  00863	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR t$21742[rsp], rax
$LN15@fill_numbe:
  0086b	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR spec$[rsp]
  00873	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  00877	48 39 84 24 88
	00 00 00	 cmp	 QWORD PTR t$21742[rsp], rax
  0087f	0f 8d a4 01 00
	00		 jge	 $LN13@fill_numbe

; 621  :             Py_UCS4 c = PyUnicode_READ(kind, data, writer->pos + t);

  00885	83 7c 24 50 01	 cmp	 DWORD PTR kind$[rsp], 1
  0088a	75 26		 jne	 SHORT $LN74@fill_numbe
  0088c	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR writer$[rsp]
  00894	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00898	48 03 84 24 88
	00 00 00	 add	 rax, QWORD PTR t$21742[rsp]
  008a0	48 8b 4c 24 60	 mov	 rcx, QWORD PTR data$[rsp]
  008a5	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  008a9	89 84 24 b8 00
	00 00		 mov	 DWORD PTR tv365[rsp], eax
  008b0	eb 5e		 jmp	 SHORT $LN75@fill_numbe
$LN74@fill_numbe:
  008b2	83 7c 24 50 02	 cmp	 DWORD PTR kind$[rsp], 2
  008b7	75 26		 jne	 SHORT $LN72@fill_numbe
  008b9	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR writer$[rsp]
  008c1	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  008c5	48 03 84 24 88
	00 00 00	 add	 rax, QWORD PTR t$21742[rsp]
  008cd	48 8b 4c 24 60	 mov	 rcx, QWORD PTR data$[rsp]
  008d2	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  008d6	89 84 24 bc 00
	00 00		 mov	 DWORD PTR tv364[rsp], eax
  008dd	eb 23		 jmp	 SHORT $LN73@fill_numbe
$LN72@fill_numbe:
  008df	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR writer$[rsp]
  008e7	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  008eb	48 03 84 24 88
	00 00 00	 add	 rax, QWORD PTR t$21742[rsp]
  008f3	48 8b 4c 24 60	 mov	 rcx, QWORD PTR data$[rsp]
  008f8	8b 04 81	 mov	 eax, DWORD PTR [rcx+rax*4]
  008fb	89 84 24 bc 00
	00 00		 mov	 DWORD PTR tv364[rsp], eax
$LN73@fill_numbe:
  00902	8b 84 24 bc 00
	00 00		 mov	 eax, DWORD PTR tv364[rsp]
  00909	89 84 24 b8 00
	00 00		 mov	 DWORD PTR tv365[rsp], eax
$LN75@fill_numbe:
  00910	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR tv365[rsp]
  00917	89 84 24 90 00
	00 00		 mov	 DWORD PTR c$21746[rsp], eax

; 622  :             c = Py_TOUPPER(c);

  0091e	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR c$21746[rsp]
  00925	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  0092a	0f b6 c0	 movzx	 eax, al
  0092d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_ctype_toupper
  00934	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00938	89 84 24 90 00
	00 00		 mov	 DWORD PTR c$21746[rsp], eax

; 623  :             if (c > 127) {

  0093f	83 bc 24 90 00
	00 00 7f	 cmp	 DWORD PTR c$21746[rsp], 127 ; 0000007fH
  00947	76 1d		 jbe	 SHORT $LN12@fill_numbe

; 624  :                 PyErr_SetString(PyExc_SystemError, "non-ascii grouped digit");

  00949	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@PDACIMOE@non?9ascii?5grouped?5digit?$AA@
  00950	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SystemError
  00957	e8 00 00 00 00	 call	 PyErr_SetString

; 625  :                 return -1;

  0095c	b8 ff ff ff ff	 mov	 eax, -1
  00961	e9 34 02 00 00	 jmp	 $LN47@fill_numbe
$LN12@fill_numbe:
$LN11@fill_numbe:

; 626  :             }
; 627  :             PyUnicode_WRITE(kind, data, writer->pos + t, c);

  00966	8b 44 24 50	 mov	 eax, DWORD PTR kind$[rsp]
  0096a	89 84 24 c0 00
	00 00		 mov	 DWORD PTR tv374[rsp], eax
  00971	83 bc 24 c0 00
	00 00 01	 cmp	 DWORD PTR tv374[rsp], 1
  00979	74 0c		 je	 SHORT $LN6@fill_numbe
  0097b	83 bc 24 c0 00
	00 00 02	 cmp	 DWORD PTR tv374[rsp], 2
  00983	74 28		 je	 SHORT $LN5@fill_numbe
  00985	eb 4d		 jmp	 SHORT $LN4@fill_numbe
$LN6@fill_numbe:
  00987	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR writer$[rsp]
  0098f	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00993	48 03 84 24 88
	00 00 00	 add	 rax, QWORD PTR t$21742[rsp]
  0099b	48 8b 4c 24 60	 mov	 rcx, QWORD PTR data$[rsp]
  009a0	0f b6 94 24 90
	00 00 00	 movzx	 edx, BYTE PTR c$21746[rsp]
  009a8	88 14 01	 mov	 BYTE PTR [rcx+rax], dl
  009ab	eb 6d		 jmp	 SHORT $LN7@fill_numbe
$LN5@fill_numbe:
  009ad	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR writer$[rsp]
  009b5	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  009b9	48 03 84 24 88
	00 00 00	 add	 rax, QWORD PTR t$21742[rsp]
  009c1	48 8b 4c 24 60	 mov	 rcx, QWORD PTR data$[rsp]
  009c6	0f b7 94 24 90
	00 00 00	 movzx	 edx, WORD PTR c$21746[rsp]
  009ce	66 89 14 41	 mov	 WORD PTR [rcx+rax*2], dx
  009d2	eb 46		 jmp	 SHORT $LN7@fill_numbe
$LN4@fill_numbe:
  009d4	83 7c 24 50 04	 cmp	 DWORD PTR kind$[rsp], 4
  009d9	74 1c		 je	 SHORT $LN76@fill_numbe
  009db	41 b8 73 02 00
	00		 mov	 r8d, 627		; 00000273H
  009e1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  009e8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@LPDHELHB@?$AA?$CI?$AAk?$AAi?$AAn?$AAd?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AA4?$AAB?$AAY?$AAT?$AAE?$AA_?$AAK?$AAI?$AAN?$AAD?$AA?$AA@
  009ef	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  009f5	33 c0		 xor	 eax, eax
$LN76@fill_numbe:
  009f7	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR writer$[rsp]
  009ff	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00a03	48 03 84 24 88
	00 00 00	 add	 rax, QWORD PTR t$21742[rsp]
  00a0b	48 8b 4c 24 60	 mov	 rcx, QWORD PTR data$[rsp]
  00a10	8b 94 24 90 00
	00 00		 mov	 edx, DWORD PTR c$21746[rsp]
  00a17	89 14 81	 mov	 DWORD PTR [rcx+rax*4], edx
$LN7@fill_numbe:
  00a1a	33 c0		 xor	 eax, eax
  00a1c	85 c0		 test	 eax, eax
  00a1e	0f 85 42 ff ff
	ff		 jne	 $LN11@fill_numbe

; 628  :         }

  00a24	e9 2f fe ff ff	 jmp	 $LN14@fill_numbe
$LN13@fill_numbe:
$LN16@fill_numbe:

; 629  :     }
; 630  :     writer->pos += spec->n_grouped_digits;

  00a29	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR writer$[rsp]
  00a31	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00a35	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR spec$[rsp]
  00a3d	48 03 41 30	 add	 rax, QWORD PTR [rcx+48]
  00a41	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR writer$[rsp]
  00a49	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 631  : 
; 632  :     if (spec->n_decimal) {

  00a4d	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR spec$[rsp]
  00a55	48 83 78 38 00	 cmp	 QWORD PTR [rax+56], 0
  00a5a	74 6c		 je	 SHORT $LN3@fill_numbe

; 633  :         _PyUnicode_FastCopyCharacters(
; 634  :             writer->buffer, writer->pos,
; 635  :             locale->decimal_point, 0, spec->n_decimal);

  00a5c	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR spec$[rsp]
  00a64	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  00a68	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00a6d	45 33 c9	 xor	 r9d, r9d
  00a70	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR locale$[rsp]
  00a78	4c 8b 00	 mov	 r8, QWORD PTR [rax]
  00a7b	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR writer$[rsp]
  00a83	48 8b 50 20	 mov	 rdx, QWORD PTR [rax+32]
  00a87	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR writer$[rsp]
  00a8f	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00a92	e8 00 00 00 00	 call	 _PyUnicode_FastCopyCharacters

; 636  :         writer->pos += spec->n_decimal;

  00a97	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR writer$[rsp]
  00a9f	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00aa3	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR spec$[rsp]
  00aab	48 03 41 38	 add	 rax, QWORD PTR [rcx+56]
  00aaf	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR writer$[rsp]
  00ab7	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 637  :         d_pos += 1;

  00abb	48 8b 44 24 58	 mov	 rax, QWORD PTR d_pos$[rsp]
  00ac0	48 ff c0	 inc	 rax
  00ac3	48 89 44 24 58	 mov	 QWORD PTR d_pos$[rsp], rax
$LN3@fill_numbe:

; 638  :     }
; 639  : 
; 640  :     if (spec->n_remainder) {

  00ac8	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR spec$[rsp]
  00ad0	48 83 78 40 00	 cmp	 QWORD PTR [rax+64], 0
  00ad5	74 5e		 je	 SHORT $LN2@fill_numbe

; 641  :         _PyUnicode_FastCopyCharacters(
; 642  :             writer->buffer, writer->pos,
; 643  :             digits, d_pos, spec->n_remainder);

  00ad7	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR spec$[rsp]
  00adf	48 8b 40 40	 mov	 rax, QWORD PTR [rax+64]
  00ae3	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00ae8	4c 8b 4c 24 58	 mov	 r9, QWORD PTR d_pos$[rsp]
  00aed	4c 8b 84 24 f0
	00 00 00	 mov	 r8, QWORD PTR digits$[rsp]
  00af5	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR writer$[rsp]
  00afd	48 8b 50 20	 mov	 rdx, QWORD PTR [rax+32]
  00b01	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR writer$[rsp]
  00b09	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00b0c	e8 00 00 00 00	 call	 _PyUnicode_FastCopyCharacters

; 644  :         writer->pos += spec->n_remainder;

  00b11	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR writer$[rsp]
  00b19	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00b1d	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR spec$[rsp]
  00b25	48 03 41 40	 add	 rax, QWORD PTR [rcx+64]
  00b29	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR writer$[rsp]
  00b31	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax
$LN2@fill_numbe:

; 645  :         /* d_pos += spec->n_remainder; */
; 646  :     }
; 647  : 
; 648  :     if (spec->n_rpadding) {

  00b35	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR spec$[rsp]
  00b3d	48 83 78 18 00	 cmp	 QWORD PTR [rax+24], 0
  00b42	74 54		 je	 SHORT $LN1@fill_numbe

; 649  :         _PyUnicode_FastFill(writer->buffer,
; 650  :                             writer->pos, spec->n_rpadding,
; 651  :                             fill_char);

  00b44	44 8b 8c 24 18
	01 00 00	 mov	 r9d, DWORD PTR fill_char$[rsp]
  00b4c	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR spec$[rsp]
  00b54	4c 8b 40 18	 mov	 r8, QWORD PTR [rax+24]
  00b58	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR writer$[rsp]
  00b60	48 8b 50 20	 mov	 rdx, QWORD PTR [rax+32]
  00b64	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR writer$[rsp]
  00b6c	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00b6f	e8 00 00 00 00	 call	 _PyUnicode_FastFill

; 652  :         writer->pos += spec->n_rpadding;

  00b74	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR writer$[rsp]
  00b7c	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00b80	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR spec$[rsp]
  00b88	48 03 41 18	 add	 rax, QWORD PTR [rcx+24]
  00b8c	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR writer$[rsp]
  00b94	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax
$LN1@fill_numbe:

; 653  :     }
; 654  :     return 0;

  00b98	33 c0		 xor	 eax, eax
$LN47@fill_numbe:

; 655  : }

  00b9a	48 81 c4 d8 00
	00 00		 add	 rsp, 216		; 000000d8H
  00ba1	c3		 ret	 0
fill_number ENDP
_TEXT	ENDS
PUBLIC	??_C@_01JFALLOMD@?$AD?$AA@			; `string'
EXTRN	PyUnicode_New:PROC
EXTRN	PyUnicode_DecodeLocale:PROC
EXTRN	__imp_localeconv:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$get_locale_info DD imagerel get_locale_info
	DD	imagerel get_locale_info+533
	DD	imagerel $unwind$get_locale_info
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$get_locale_info DD 010d01H
	DD	0620dH
xdata	ENDS
;	COMDAT ??_C@_01JFALLOMD@?$AD?$AA@
CONST	SEGMENT
??_C@_01JFALLOMD@?$AD?$AA@ DB 03H, 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT get_locale_info
_TEXT	SEGMENT
locale_data$21786 = 32
tv64 = 40
type$ = 64
locale_info$ = 72
get_locale_info PROC					; COMDAT

; 665  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00009	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 666  :     switch (type) {

  0000d	8b 44 24 40	 mov	 eax, DWORD PTR type$[rsp]
  00011	89 44 24 28	 mov	 DWORD PTR tv64[rsp], eax
  00015	83 7c 24 28 00	 cmp	 DWORD PTR tv64[rsp], 0
  0001a	74 1b		 je	 SHORT $LN26@get_locale
  0001c	83 7c 24 28 01	 cmp	 DWORD PTR tv64[rsp], 1
  00021	0f 84 9a 00 00
	00		 je	 $LN23@get_locale
  00027	83 7c 24 28 02	 cmp	 DWORD PTR tv64[rsp], 2
  0002c	0f 84 28 01 00
	00		 je	 $LN12@get_locale
  00032	e9 b5 01 00 00	 jmp	 $LN1@get_locale
$LN26@get_locale:

; 667  :     case LT_CURRENT_LOCALE: {
; 668  :         struct lconv *locale_data = localeconv();

  00037	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_localeconv
  0003d	48 89 44 24 20	 mov	 QWORD PTR locale_data$21786[rsp], rax

; 669  :         locale_info->decimal_point = PyUnicode_DecodeLocale(
; 670  :                                          locale_data->decimal_point,
; 671  :                                          NULL);

  00042	33 d2		 xor	 edx, edx
  00044	48 8b 44 24 20	 mov	 rax, QWORD PTR locale_data$21786[rsp]
  00049	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0004c	e8 00 00 00 00	 call	 PyUnicode_DecodeLocale
  00051	48 8b 4c 24 48	 mov	 rcx, QWORD PTR locale_info$[rsp]
  00056	48 89 01	 mov	 QWORD PTR [rcx], rax

; 672  :         if (locale_info->decimal_point == NULL)

  00059	48 8b 44 24 48	 mov	 rax, QWORD PTR locale_info$[rsp]
  0005e	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00062	75 0a		 jne	 SHORT $LN25@get_locale

; 673  :             return -1;

  00064	b8 ff ff ff ff	 mov	 eax, -1
  00069	e9 a2 01 00 00	 jmp	 $LN29@get_locale
$LN25@get_locale:

; 674  :         locale_info->thousands_sep = PyUnicode_DecodeLocale(
; 675  :                                          locale_data->thousands_sep,
; 676  :                                          NULL);

  0006e	33 d2		 xor	 edx, edx
  00070	48 8b 44 24 20	 mov	 rax, QWORD PTR locale_data$21786[rsp]
  00075	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00079	e8 00 00 00 00	 call	 PyUnicode_DecodeLocale
  0007e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR locale_info$[rsp]
  00083	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 677  :         if (locale_info->thousands_sep == NULL) {

  00087	48 8b 44 24 48	 mov	 rax, QWORD PTR locale_info$[rsp]
  0008c	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00091	75 17		 jne	 SHORT $LN24@get_locale

; 678  :             Py_DECREF(locale_info->decimal_point);

  00093	48 8b 44 24 48	 mov	 rax, QWORD PTR locale_info$[rsp]
  00098	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0009b	e8 00 00 00 00	 call	 _Py_DecRef

; 679  :             return -1;

  000a0	b8 ff ff ff ff	 mov	 eax, -1
  000a5	e9 66 01 00 00	 jmp	 $LN29@get_locale
$LN24@get_locale:

; 680  :         }
; 681  :         locale_info->grouping = locale_data->grouping;

  000aa	48 8b 44 24 48	 mov	 rax, QWORD PTR locale_info$[rsp]
  000af	48 8b 4c 24 20	 mov	 rcx, QWORD PTR locale_data$21786[rsp]
  000b4	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  000b8	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 682  :         break;

  000bc	e9 4d 01 00 00	 jmp	 $LN27@get_locale
$LN23@get_locale:

; 683  :     }
; 684  :     case LT_DEFAULT_LOCALE:
; 685  :         locale_info->decimal_point = PyUnicode_FromOrdinal('.');

  000c1	b9 2e 00 00 00	 mov	 ecx, 46			; 0000002eH
  000c6	e8 00 00 00 00	 call	 PyUnicode_FromOrdinal
  000cb	48 8b 4c 24 48	 mov	 rcx, QWORD PTR locale_info$[rsp]
  000d0	48 89 01	 mov	 QWORD PTR [rcx], rax

; 686  :         locale_info->thousands_sep = PyUnicode_FromOrdinal(',');

  000d3	b9 2c 00 00 00	 mov	 ecx, 44			; 0000002cH
  000d8	e8 00 00 00 00	 call	 PyUnicode_FromOrdinal
  000dd	48 8b 4c 24 48	 mov	 rcx, QWORD PTR locale_info$[rsp]
  000e2	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 687  :         if (!locale_info->decimal_point || !locale_info->thousands_sep) {

  000e6	48 8b 44 24 48	 mov	 rax, QWORD PTR locale_info$[rsp]
  000eb	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  000ef	74 0c		 je	 SHORT $LN21@get_locale
  000f1	48 8b 44 24 48	 mov	 rax, QWORD PTR locale_info$[rsp]
  000f6	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  000fb	75 48		 jne	 SHORT $LN22@get_locale
$LN21@get_locale:
$LN20@get_locale:

; 688  :             Py_XDECREF(locale_info->decimal_point);

  000fd	48 8b 44 24 48	 mov	 rax, QWORD PTR locale_info$[rsp]
  00102	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00106	74 0d		 je	 SHORT $LN17@get_locale
  00108	48 8b 44 24 48	 mov	 rax, QWORD PTR locale_info$[rsp]
  0010d	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00110	e8 00 00 00 00	 call	 _Py_DecRef
$LN17@get_locale:
  00115	33 c0		 xor	 eax, eax
  00117	85 c0		 test	 eax, eax
  00119	75 e2		 jne	 SHORT $LN20@get_locale
$LN16@get_locale:

; 689  :             Py_XDECREF(locale_info->thousands_sep);

  0011b	48 8b 44 24 48	 mov	 rax, QWORD PTR locale_info$[rsp]
  00120	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00125	74 0e		 je	 SHORT $LN13@get_locale
  00127	48 8b 44 24 48	 mov	 rax, QWORD PTR locale_info$[rsp]
  0012c	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00130	e8 00 00 00 00	 call	 _Py_DecRef
$LN13@get_locale:
  00135	33 c0		 xor	 eax, eax
  00137	85 c0		 test	 eax, eax
  00139	75 e0		 jne	 SHORT $LN16@get_locale

; 690  :             return -1;

  0013b	b8 ff ff ff ff	 mov	 eax, -1
  00140	e9 cb 00 00 00	 jmp	 $LN29@get_locale
$LN22@get_locale:

; 691  :         }
; 692  :         locale_info->grouping = "\3"; /* Group every 3 characters.  The

  00145	48 8b 44 24 48	 mov	 rax, QWORD PTR locale_info$[rsp]
  0014a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01JFALLOMD@?$AD?$AA@
  00151	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 693  :                                          (implicit) trailing 0 means repeat
; 694  :                                          infinitely. */
; 695  :         break;

  00155	e9 b4 00 00 00	 jmp	 $LN27@get_locale
$LN12@get_locale:

; 696  :     case LT_NO_LOCALE:
; 697  :         locale_info->decimal_point = PyUnicode_FromOrdinal('.');

  0015a	b9 2e 00 00 00	 mov	 ecx, 46			; 0000002eH
  0015f	e8 00 00 00 00	 call	 PyUnicode_FromOrdinal
  00164	48 8b 4c 24 48	 mov	 rcx, QWORD PTR locale_info$[rsp]
  00169	48 89 01	 mov	 QWORD PTR [rcx], rax

; 698  :         locale_info->thousands_sep = PyUnicode_New(0, 0);

  0016c	33 d2		 xor	 edx, edx
  0016e	33 c9		 xor	 ecx, ecx
  00170	e8 00 00 00 00	 call	 PyUnicode_New
  00175	48 8b 4c 24 48	 mov	 rcx, QWORD PTR locale_info$[rsp]
  0017a	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 699  :         if (!locale_info->decimal_point || !locale_info->thousands_sep) {

  0017e	48 8b 44 24 48	 mov	 rax, QWORD PTR locale_info$[rsp]
  00183	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00187	74 0c		 je	 SHORT $LN10@get_locale
  00189	48 8b 44 24 48	 mov	 rax, QWORD PTR locale_info$[rsp]
  0018e	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00193	75 45		 jne	 SHORT $LN11@get_locale
$LN10@get_locale:
$LN9@get_locale:

; 700  :             Py_XDECREF(locale_info->decimal_point);

  00195	48 8b 44 24 48	 mov	 rax, QWORD PTR locale_info$[rsp]
  0019a	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0019e	74 0d		 je	 SHORT $LN6@get_locale
  001a0	48 8b 44 24 48	 mov	 rax, QWORD PTR locale_info$[rsp]
  001a5	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  001a8	e8 00 00 00 00	 call	 _Py_DecRef
$LN6@get_locale:
  001ad	33 c0		 xor	 eax, eax
  001af	85 c0		 test	 eax, eax
  001b1	75 e2		 jne	 SHORT $LN9@get_locale
$LN5@get_locale:

; 701  :             Py_XDECREF(locale_info->thousands_sep);

  001b3	48 8b 44 24 48	 mov	 rax, QWORD PTR locale_info$[rsp]
  001b8	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  001bd	74 0e		 je	 SHORT $LN2@get_locale
  001bf	48 8b 44 24 48	 mov	 rax, QWORD PTR locale_info$[rsp]
  001c4	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  001c8	e8 00 00 00 00	 call	 _Py_DecRef
$LN2@get_locale:
  001cd	33 c0		 xor	 eax, eax
  001cf	85 c0		 test	 eax, eax
  001d1	75 e0		 jne	 SHORT $LN5@get_locale

; 702  :             return -1;

  001d3	b8 ff ff ff ff	 mov	 eax, -1
  001d8	eb 36		 jmp	 SHORT $LN29@get_locale
$LN11@get_locale:

; 703  :         }
; 704  :         locale_info->grouping = no_grouping;

  001da	48 8b 44 24 48	 mov	 rax, QWORD PTR locale_info$[rsp]
  001df	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:no_grouping
  001e6	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 705  :         break;

  001ea	eb 22		 jmp	 SHORT $LN27@get_locale
$LN1@get_locale:

; 706  :     default:
; 707  :         assert(0);

  001ec	33 c0		 xor	 eax, eax
  001ee	85 c0		 test	 eax, eax
  001f0	75 1c		 jne	 SHORT $LN31@get_locale
  001f2	41 b8 c3 02 00
	00		 mov	 r8d, 707		; 000002c3H
  001f8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  001ff	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_13COJANIEC@?$AA0?$AA?$AA@
  00206	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0020c	33 c0		 xor	 eax, eax
$LN31@get_locale:
$LN27@get_locale:

; 708  :     }
; 709  :     return 0;

  0020e	33 c0		 xor	 eax, eax
$LN29@get_locale:

; 710  : }

  00210	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00214	c3		 ret	 0
get_locale_info ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$free_locale_info DD imagerel free_locale_info
	DD	imagerel free_locale_info+76
	DD	imagerel $unwind$free_locale_info
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$free_locale_info DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT free_locale_info
_TEXT	SEGMENT
locale_info$ = 48
free_locale_info PROC					; COMDAT

; 714  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
$LN8@free_local:

; 715  :     Py_XDECREF(locale_info->decimal_point);

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR locale_info$[rsp]
  0000e	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00012	74 0d		 je	 SHORT $LN5@free_local
  00014	48 8b 44 24 30	 mov	 rax, QWORD PTR locale_info$[rsp]
  00019	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0001c	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@free_local:
  00021	33 c0		 xor	 eax, eax
  00023	85 c0		 test	 eax, eax
  00025	75 e2		 jne	 SHORT $LN8@free_local
$LN4@free_local:

; 716  :     Py_XDECREF(locale_info->thousands_sep);

  00027	48 8b 44 24 30	 mov	 rax, QWORD PTR locale_info$[rsp]
  0002c	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00031	74 0e		 je	 SHORT $LN1@free_local
  00033	48 8b 44 24 30	 mov	 rax, QWORD PTR locale_info$[rsp]
  00038	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0003c	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@free_local:
  00041	33 c0		 xor	 eax, eax
  00043	85 c0		 test	 eax, eax
  00045	75 e0		 jne	 SHORT $LN4@free_local

; 717  : }

  00047	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004b	c3		 ret	 0
free_locale_info ENDP
_TEXT	ENDS
PUBLIC	??_C@_1FM@EDHEIHFI@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAt?$AAm?$AAp@ ; `string'
PUBLIC	??_C@_1EE@JIMPMAH@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAt?$AAm?$AAp?$AA?$CJ@ ; `string'
PUBLIC	??_C@_1DO@ONKBENKF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAt?$AAm?$AAp?$AA?$CJ?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1EA@BPABFCNI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAt?$AAm?$AAp?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DK@LGDJOFDE@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAt?$AAm?$AAp?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	__real@4059000000000000
PUBLIC	__real@bff0000000000000
PUBLIC	??_C@_0BC@HOPAGEML@precision?5too?5big?$AA@	; `string'
EXTRN	_PyUnicode_FromASCII:PROC
EXTRN	strlen:PROC
EXTRN	PyOS_double_to_string:PROC
EXTRN	PyFloat_AsDouble:PROC
EXTRN	_fltused:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$format_float_internal DD imagerel format_float_internal
	DD	imagerel format_float_internal+2969
	DD	imagerel $unwind$format_float_internal
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$format_float_internal DD 021601H
	DD	0350116H
xdata	ENDS
;	COMDAT ??_C@_1FM@EDHEIHFI@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAt?$AAm?$AAp@
CONST	SEGMENT
??_C@_1FM@EDHEIHFI@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAt?$AAm?$AAp@ DB '('
	DB	00H, '(', 00H, 'P', 00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H
	DB	'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'O', 00H, 'b', 00H, 'j'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, '*', 00H, ')', 00H, '(', 00H
	DB	'(', 00H, 'u', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H, 'd'
	DB	00H, 'e', 00H, '_', 00H, 't', 00H, 'm', 00H, 'p', 00H, ')', 00H
	DB	')', 00H, ')', 00H, '-', 00H, '>', 00H, 'd', 00H, 'a', 00H, 't'
	DB	00H, 'a', 00H, '.', 00H, 'a', 00H, 'n', 00H, 'y', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EE@JIMPMAH@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAt?$AAm?$AAp?$AA?$CJ@
CONST	SEGMENT
??_C@_1EE@JIMPMAH@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAt?$AAm?$AAp?$AA?$CJ@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'I', 00H, 'S', 00H, '_', 00H, 'R'
	DB	00H, 'E', 00H, 'A', 00H, 'D', 00H, 'Y', 00H, '(', 00H, '(', 00H
	DB	'u', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e'
	DB	00H, '_', 00H, 't', 00H, 'm', 00H, 'p', 00H, ')', 00H, ')', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1DO@ONKBENKF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAt?$AAm?$AAp?$AA?$CJ?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DO@ONKBENKF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAt?$AAm?$AAp?$AA?$CJ?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, '(', 00H, 'u', 00H, 'n', 00H, 'i', 00H
	DB	'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, '_', 00H, 't', 00H, 'm'
	DB	00H, 'p', 00H, ')', 00H, ')', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1EA@BPABFCNI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAt?$AAm?$AAp?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1EA@BPABFCNI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAt?$AAm?$AAp?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'I', 00H, 'S', 00H, '_', 00H, 'R'
	DB	00H, 'E', 00H, 'A', 00H, 'D', 00H, 'Y', 00H, '(', 00H, 'u', 00H
	DB	'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, '_'
	DB	00H, 't', 00H, 'm', 00H, 'p', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DK@LGDJOFDE@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAt?$AAm?$AAp?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DK@LGDJOFDE@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAt?$AAm?$AAp?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, 'u', 00H, 'n', 00H, 'i', 00H, 'c', 00H
	DB	'o', 00H, 'd', 00H, 'e', 00H, '_', 00H, 't', 00H, 'm', 00H, 'p'
	DB	00H, ')', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT __real@4059000000000000
CONST	SEGMENT
__real@4059000000000000 DQ 04059000000000000r	; 100
CONST	ENDS
;	COMDAT __real@bff0000000000000
CONST	SEGMENT
__real@bff0000000000000 DQ 0bff0000000000000r	; -1
CONST	ENDS
;	COMDAT ??_C@_0BC@HOPAGEML@precision?5too?5big?$AA@
CONST	SEGMENT
??_C@_0BC@HOPAGEML@precision?5too?5big?$AA@ DB 'precision too big', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT format_float_internal
_TEXT	SEGMENT
maxchar$ = 96
flags$ = 100
add_pct$ = 104
type$ = 108
float_type$ = 112
sign_char$ = 116
index$ = 120
n_remainder$ = 128
unicode_tmp$ = 136
locale$ = 144
n_total$ = 168
val$ = 176
buf$ = 184
spec$ = 192
result$ = 288
precision$ = 296
default_precision$ = 304
has_decimal$ = 312
n_digits$ = 320
tv218 = 328
tv227 = 336
tv342 = 344
tv283 = 352
tv292 = 360
tv341 = 368
tv329 = 376
tv338 = 384
tv359 = 392
tv358 = 396
tv387 = 400
tv386 = 404
tv393 = 408
value$ = 432
format$ = 440
writer$ = 448
format_float_internal PROC				; COMDAT

; 973  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 81 ec a8 01
	00 00		 sub	 rsp, 424		; 000001a8H

; 974  :     char *buf = NULL;       /* buffer returned from PyOS_double_to_string */

  00016	48 c7 84 24 b8
	00 00 00 00 00
	00 00		 mov	 QWORD PTR buf$[rsp], 0

; 975  :     Py_ssize_t n_digits;
; 976  :     Py_ssize_t n_remainder;
; 977  :     Py_ssize_t n_total;
; 978  :     int has_decimal;
; 979  :     double val;
; 980  :     Py_ssize_t precision;
; 981  :     Py_ssize_t default_precision = 6;

  00022	48 c7 84 24 30
	01 00 00 06 00
	00 00		 mov	 QWORD PTR default_precision$[rsp], 6

; 982  :     Py_UCS4 type = format->type;

  0002e	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR format$[rsp]
  00036	8b 40 28	 mov	 eax, DWORD PTR [rax+40]
  00039	89 44 24 6c	 mov	 DWORD PTR type$[rsp], eax

; 983  :     int add_pct = 0;

  0003d	c7 44 24 68 00
	00 00 00	 mov	 DWORD PTR add_pct$[rsp], 0

; 984  :     Py_ssize_t index;
; 985  :     NumberFieldWidths spec;
; 986  :     int flags = 0;

  00045	c7 44 24 64 00
	00 00 00	 mov	 DWORD PTR flags$[rsp], 0

; 987  :     int result = -1;

  0004d	c7 84 24 20 01
	00 00 ff ff ff
	ff		 mov	 DWORD PTR result$[rsp], -1

; 988  :     Py_UCS4 maxchar = 127;

  00058	c7 44 24 60 7f
	00 00 00	 mov	 DWORD PTR maxchar$[rsp], 127 ; 0000007fH

; 989  :     Py_UCS4 sign_char = '\0';

  00060	c7 44 24 74 00
	00 00 00	 mov	 DWORD PTR sign_char$[rsp], 0

; 990  :     int float_type; /* Used to see if we have a nan, inf, or regular float. */
; 991  :     PyObject *unicode_tmp = NULL;

  00068	48 c7 84 24 88
	00 00 00 00 00
	00 00		 mov	 QWORD PTR unicode_tmp$[rsp], 0

; 992  : 
; 993  :     /* Locale settings, either from the actual locale or
; 994  :        from a hard-code pseudo-locale */
; 995  :     LocaleInfo locale = STATIC_LOCALE_INFO_INIT;

  00074	48 c7 84 24 90
	00 00 00 00 00
	00 00		 mov	 QWORD PTR locale$[rsp], 0
  00080	48 c7 84 24 98
	00 00 00 00 00
	00 00		 mov	 QWORD PTR locale$[rsp+8], 0
  0008c	48 c7 84 24 a0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR locale$[rsp+16], 0

; 996  : 
; 997  :     if (format->precision > INT_MAX) {

  00098	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR format$[rsp]
  000a0	48 81 78 20 ff
	ff ff 7f	 cmp	 QWORD PTR [rax+32], 2147483647 ; 7fffffffH
  000a8	7e 18		 jle	 SHORT $LN20@format_flo

; 998  :         PyErr_SetString(PyExc_ValueError, "precision too big");

  000aa	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@HOPAGEML@precision?5too?5big?$AA@
  000b1	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  000b8	e8 00 00 00 00	 call	 PyErr_SetString

; 999  :         goto done;

  000bd	e9 9d 0a 00 00	 jmp	 $done$22041
$LN20@format_flo:

; 1000 :     }
; 1001 :     precision = (int)format->precision;

  000c2	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR format$[rsp]
  000ca	48 63 40 20	 movsxd	 rax, DWORD PTR [rax+32]
  000ce	48 89 84 24 28
	01 00 00	 mov	 QWORD PTR precision$[rsp], rax

; 1002 : 
; 1003 :     if (format->alternate)

  000d6	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR format$[rsp]
  000de	83 78 08 00	 cmp	 DWORD PTR [rax+8], 0
  000e2	74 0b		 je	 SHORT $LN19@format_flo

; 1004 :         flags |= Py_DTSF_ALT;

  000e4	8b 44 24 64	 mov	 eax, DWORD PTR flags$[rsp]
  000e8	83 c8 04	 or	 eax, 4
  000eb	89 44 24 64	 mov	 DWORD PTR flags$[rsp], eax
$LN19@format_flo:

; 1005 : 
; 1006 :     if (type == '\0') {

  000ef	83 7c 24 6c 00	 cmp	 DWORD PTR type$[rsp], 0
  000f4	75 1f		 jne	 SHORT $LN18@format_flo

; 1007 :         /* Omitted type specifier.  Behaves in the same way as repr(x)
; 1008 :            and str(x) if no precision is given, else like 'g', but with
; 1009 :            at least one digit after the decimal point. */
; 1010 :         flags |= Py_DTSF_ADD_DOT_0;

  000f6	8b 44 24 64	 mov	 eax, DWORD PTR flags$[rsp]
  000fa	83 c8 02	 or	 eax, 2
  000fd	89 44 24 64	 mov	 DWORD PTR flags$[rsp], eax

; 1011 :         type = 'r';

  00101	c7 44 24 6c 72
	00 00 00	 mov	 DWORD PTR type$[rsp], 114 ; 00000072H

; 1012 :         default_precision = 0;

  00109	48 c7 84 24 30
	01 00 00 00 00
	00 00		 mov	 QWORD PTR default_precision$[rsp], 0
$LN18@format_flo:

; 1013 :     }
; 1014 : 
; 1015 :     if (type == 'n')

  00115	83 7c 24 6c 6e	 cmp	 DWORD PTR type$[rsp], 110 ; 0000006eH
  0011a	75 08		 jne	 SHORT $LN17@format_flo

; 1016 :         /* 'n' is the same as 'g', except for the locale used to
; 1017 :            format the result. We take care of that later. */
; 1018 :         type = 'g';

  0011c	c7 44 24 6c 67
	00 00 00	 mov	 DWORD PTR type$[rsp], 103 ; 00000067H
$LN17@format_flo:

; 1019 : 
; 1020 :     val = PyFloat_AsDouble(value);

  00124	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR value$[rsp]
  0012c	e8 00 00 00 00	 call	 PyFloat_AsDouble
  00131	f2 0f 11 84 24
	b0 00 00 00	 movsdx	 QWORD PTR val$[rsp], xmm0

; 1021 :     if (val == -1.0 && PyErr_Occurred())

  0013a	f2 0f 10 84 24
	b0 00 00 00	 movsdx	 xmm0, QWORD PTR val$[rsp]
  00143	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@bff0000000000000
  0014b	7a 11		 jp	 SHORT $LN16@format_flo
  0014d	75 0f		 jne	 SHORT $LN16@format_flo
  0014f	e8 00 00 00 00	 call	 PyErr_Occurred
  00154	48 85 c0	 test	 rax, rax
  00157	74 05		 je	 SHORT $LN16@format_flo

; 1022 :         goto done;

  00159	e9 01 0a 00 00	 jmp	 $done$22041
$LN16@format_flo:

; 1023 : 
; 1024 :     if (type == '%') {

  0015e	83 7c 24 6c 25	 cmp	 DWORD PTR type$[rsp], 37 ; 00000025H
  00163	75 2a		 jne	 SHORT $LN15@format_flo

; 1025 :         type = 'f';

  00165	c7 44 24 6c 66
	00 00 00	 mov	 DWORD PTR type$[rsp], 102 ; 00000066H

; 1026 :         val *= 100;

  0016d	f2 0f 10 84 24
	b0 00 00 00	 movsdx	 xmm0, QWORD PTR val$[rsp]
  00176	f2 0f 59 05 00
	00 00 00	 mulsd	 xmm0, QWORD PTR __real@4059000000000000
  0017e	f2 0f 11 84 24
	b0 00 00 00	 movsdx	 QWORD PTR val$[rsp], xmm0

; 1027 :         add_pct = 1;

  00187	c7 44 24 68 01
	00 00 00	 mov	 DWORD PTR add_pct$[rsp], 1
$LN15@format_flo:

; 1028 :     }
; 1029 : 
; 1030 :     if (precision < 0)

  0018f	48 83 bc 24 28
	01 00 00 00	 cmp	 QWORD PTR precision$[rsp], 0
  00198	7d 12		 jge	 SHORT $LN14@format_flo

; 1031 :         precision = default_precision;

  0019a	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR default_precision$[rsp]
  001a2	48 89 84 24 28
	01 00 00	 mov	 QWORD PTR precision$[rsp], rax
  001aa	eb 0f		 jmp	 SHORT $LN13@format_flo
$LN14@format_flo:

; 1032 :     else if (type == 'r')

  001ac	83 7c 24 6c 72	 cmp	 DWORD PTR type$[rsp], 114 ; 00000072H
  001b1	75 08		 jne	 SHORT $LN12@format_flo

; 1033 :         type = 'g';

  001b3	c7 44 24 6c 67
	00 00 00	 mov	 DWORD PTR type$[rsp], 103 ; 00000067H
$LN12@format_flo:
$LN13@format_flo:

; 1034 : 
; 1035 :     /* Cast "type", because if we're in unicode we need to pass a
; 1036 :        8-bit char. This is safe, because we've restricted what "type"
; 1037 :        can be. */
; 1038 :     buf = PyOS_double_to_string(val, (char)type, precision, flags,
; 1039 :                                 &float_type);

  001bb	48 8d 44 24 70	 lea	 rax, QWORD PTR float_type$[rsp]
  001c0	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001c5	44 8b 4c 24 64	 mov	 r9d, DWORD PTR flags$[rsp]
  001ca	44 8b 84 24 28
	01 00 00	 mov	 r8d, DWORD PTR precision$[rsp]
  001d2	0f b6 54 24 6c	 movzx	 edx, BYTE PTR type$[rsp]
  001d7	f2 0f 10 84 24
	b0 00 00 00	 movsdx	 xmm0, QWORD PTR val$[rsp]
  001e0	e8 00 00 00 00	 call	 PyOS_double_to_string
  001e5	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR buf$[rsp], rax

; 1040 :     if (buf == NULL)

  001ed	48 83 bc 24 b8
	00 00 00 00	 cmp	 QWORD PTR buf$[rsp], 0
  001f6	75 05		 jne	 SHORT $LN11@format_flo

; 1041 :         goto done;

  001f8	e9 62 09 00 00	 jmp	 $done$22041
$LN11@format_flo:

; 1042 :     n_digits = strlen(buf);

  001fd	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR buf$[rsp]
  00205	e8 00 00 00 00	 call	 strlen
  0020a	48 89 84 24 40
	01 00 00	 mov	 QWORD PTR n_digits$[rsp], rax

; 1043 : 
; 1044 :     if (add_pct) {

  00212	83 7c 24 68 00	 cmp	 DWORD PTR add_pct$[rsp], 0
  00217	74 2c		 je	 SHORT $LN10@format_flo

; 1045 :         /* We know that buf has a trailing zero (since we just called
; 1046 :            strlen() on it), and we don't use that fact any more. So we
; 1047 :            can just write over the trailing zero. */
; 1048 :         buf[n_digits] = '%';

  00219	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR n_digits$[rsp]
  00221	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR buf$[rsp]
  00229	48 03 c8	 add	 rcx, rax
  0022c	48 8b c1	 mov	 rax, rcx
  0022f	c6 00 25	 mov	 BYTE PTR [rax], 37	; 00000025H

; 1049 :         n_digits += 1;

  00232	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR n_digits$[rsp]
  0023a	48 ff c0	 inc	 rax
  0023d	48 89 84 24 40
	01 00 00	 mov	 QWORD PTR n_digits$[rsp], rax
$LN10@format_flo:

; 1050 :     }
; 1051 : 
; 1052 :     /* Since there is no unicode version of PyOS_double_to_string,
; 1053 :        just use the 8 bit version and then convert to unicode. */
; 1054 :     unicode_tmp = _PyUnicode_FromASCII(buf, n_digits);

  00245	48 8b 94 24 40
	01 00 00	 mov	 rdx, QWORD PTR n_digits$[rsp]
  0024d	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR buf$[rsp]
  00255	e8 00 00 00 00	 call	 _PyUnicode_FromASCII
  0025a	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR unicode_tmp$[rsp], rax

; 1055 :     PyMem_Free(buf);

  00262	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR buf$[rsp]
  0026a	e8 00 00 00 00	 call	 PyMem_Free

; 1056 :     if (unicode_tmp == NULL)

  0026f	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR unicode_tmp$[rsp], 0
  00278	75 05		 jne	 SHORT $LN9@format_flo

; 1057 :         goto done;

  0027a	e9 e0 08 00 00	 jmp	 $done$22041
$LN9@format_flo:

; 1058 : 
; 1059 :     if (format->sign != '+' && format->sign != ' '
; 1060 :         && format->width == -1
; 1061 :         && format->type != 'n'
; 1062 :         && !format->thousands_separators)

  0027f	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR format$[rsp]
  00287	83 78 0c 2b	 cmp	 DWORD PTR [rax+12], 43	; 0000002bH
  0028b	74 6e		 je	 SHORT $LN8@format_flo
  0028d	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR format$[rsp]
  00295	83 78 0c 20	 cmp	 DWORD PTR [rax+12], 32	; 00000020H
  00299	74 60		 je	 SHORT $LN8@format_flo
  0029b	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR format$[rsp]
  002a3	48 83 78 10 ff	 cmp	 QWORD PTR [rax+16], -1
  002a8	75 51		 jne	 SHORT $LN8@format_flo
  002aa	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR format$[rsp]
  002b2	83 78 28 6e	 cmp	 DWORD PTR [rax+40], 110	; 0000006eH
  002b6	74 43		 je	 SHORT $LN8@format_flo
  002b8	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR format$[rsp]
  002c0	83 78 18 00	 cmp	 DWORD PTR [rax+24], 0
  002c4	75 35		 jne	 SHORT $LN8@format_flo

; 1063 :     {
; 1064 :         /* Fast path */
; 1065 :         result = _PyUnicodeWriter_WriteStr(writer, unicode_tmp);

  002c6	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR unicode_tmp$[rsp]
  002ce	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR writer$[rsp]
  002d6	e8 00 00 00 00	 call	 _PyUnicodeWriter_WriteStr
  002db	89 84 24 20 01
	00 00		 mov	 DWORD PTR result$[rsp], eax

; 1066 :         Py_DECREF(unicode_tmp);

  002e2	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR unicode_tmp$[rsp]
  002ea	e8 00 00 00 00	 call	 _Py_DecRef

; 1067 :         return result;

  002ef	8b 84 24 20 01
	00 00		 mov	 eax, DWORD PTR result$[rsp]
  002f6	e9 96 08 00 00	 jmp	 $LN21@format_flo
$LN8@format_flo:

; 1068 :     }
; 1069 : 
; 1070 :     /* Is a sign character present in the output?  If so, remember it
; 1071 :        and skip it */
; 1072 :     index = 0;

  002fb	48 c7 44 24 78
	00 00 00 00	 mov	 QWORD PTR index$[rsp], 0

; 1073 :     if (PyUnicode_READ_CHAR(unicode_tmp, index) == '-') {

  00304	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR unicode_tmp$[rsp]
  0030c	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00310	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00316	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0031b	85 c0		 test	 eax, eax
  0031d	75 1c		 jne	 SHORT $LN23@format_flo
  0031f	41 b8 31 04 00
	00		 mov	 r8d, 1073		; 00000431H
  00325	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  0032c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DK@LGDJOFDE@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAt?$AAm?$AAp?$AA?$CJ?$AA?$AA@
  00333	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00339	33 c0		 xor	 eax, eax
$LN23@format_flo:
  0033b	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR unicode_tmp$[rsp]
  00343	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00346	c1 e8 07	 shr	 eax, 7
  00349	83 e0 01	 and	 eax, 1
  0034c	85 c0		 test	 eax, eax
  0034e	75 1c		 jne	 SHORT $LN24@format_flo
  00350	41 b8 31 04 00
	00		 mov	 r8d, 1073		; 00000431H
  00356	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  0035d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EA@BPABFCNI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAt?$AAm?$AAp?$AA?$CJ?$AA?$AA@
  00364	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0036a	33 c0		 xor	 eax, eax
$LN24@format_flo:
  0036c	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR unicode_tmp$[rsp]
  00374	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00378	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0037e	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00383	85 c0		 test	 eax, eax
  00385	75 1c		 jne	 SHORT $LN25@format_flo
  00387	41 b8 31 04 00
	00		 mov	 r8d, 1073		; 00000431H
  0038d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00394	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@ONKBENKF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAt?$AAm?$AAp?$AA?$CJ?$AA?$CJ?$AA?$AA@
  0039b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  003a1	33 c0		 xor	 eax, eax
$LN25@format_flo:
  003a3	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR unicode_tmp$[rsp]
  003ab	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  003ae	c1 e8 07	 shr	 eax, 7
  003b1	83 e0 01	 and	 eax, 1
  003b4	85 c0		 test	 eax, eax
  003b6	75 1c		 jne	 SHORT $LN26@format_flo
  003b8	41 b8 31 04 00
	00		 mov	 r8d, 1073		; 00000431H
  003be	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  003c5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@JIMPMAH@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAt?$AAm?$AAp?$AA?$CJ@
  003cc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  003d2	33 c0		 xor	 eax, eax
$LN26@format_flo:
  003d4	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR unicode_tmp$[rsp]
  003dc	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  003df	c1 e8 02	 shr	 eax, 2
  003e2	83 e0 07	 and	 eax, 7
  003e5	83 f8 01	 cmp	 eax, 1
  003e8	0f 85 74 01 00
	00		 jne	 $LN55@format_flo
  003ee	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR unicode_tmp$[rsp]
  003f6	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  003fa	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00400	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00405	85 c0		 test	 eax, eax
  00407	75 1c		 jne	 SHORT $LN27@format_flo
  00409	41 b8 31 04 00
	00		 mov	 r8d, 1073		; 00000431H
  0040f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00416	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@ONKBENKF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAt?$AAm?$AAp?$AA?$CJ?$AA?$CJ?$AA?$AA@
  0041d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00423	33 c0		 xor	 eax, eax
$LN27@format_flo:
  00425	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR unicode_tmp$[rsp]
  0042d	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00430	c1 e8 05	 shr	 eax, 5
  00433	83 e0 01	 and	 eax, 1
  00436	85 c0		 test	 eax, eax
  00438	0f 84 bd 00 00
	00		 je	 $LN33@format_flo
  0043e	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR unicode_tmp$[rsp]
  00446	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0044a	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00450	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00455	85 c0		 test	 eax, eax
  00457	75 1c		 jne	 SHORT $LN28@format_flo
  00459	41 b8 31 04 00
	00		 mov	 r8d, 1073		; 00000431H
  0045f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00466	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@ONKBENKF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAt?$AAm?$AAp?$AA?$CJ?$AA?$CJ?$AA?$AA@
  0046d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00473	33 c0		 xor	 eax, eax
$LN28@format_flo:
  00475	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR unicode_tmp$[rsp]
  0047d	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00480	c1 e8 07	 shr	 eax, 7
  00483	83 e0 01	 and	 eax, 1
  00486	85 c0		 test	 eax, eax
  00488	75 1c		 jne	 SHORT $LN29@format_flo
  0048a	41 b8 31 04 00
	00		 mov	 r8d, 1073		; 00000431H
  00490	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00497	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@JIMPMAH@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAt?$AAm?$AAp?$AA?$CJ@
  0049e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  004a4	33 c0		 xor	 eax, eax
$LN29@format_flo:
  004a6	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR unicode_tmp$[rsp]
  004ae	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  004b1	c1 e8 06	 shr	 eax, 6
  004b4	83 e0 01	 and	 eax, 1
  004b7	85 c0		 test	 eax, eax
  004b9	74 18		 je	 SHORT $LN30@format_flo
  004bb	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR unicode_tmp$[rsp]
  004c3	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  004c9	48 89 84 24 48
	01 00 00	 mov	 QWORD PTR tv218[rsp], rax
  004d1	eb 16		 jmp	 SHORT $LN31@format_flo
$LN30@format_flo:
  004d3	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR unicode_tmp$[rsp]
  004db	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  004e1	48 89 84 24 48
	01 00 00	 mov	 QWORD PTR tv218[rsp], rax
$LN31@format_flo:
  004e9	48 8b 84 24 48
	01 00 00	 mov	 rax, QWORD PTR tv218[rsp]
  004f1	48 89 84 24 50
	01 00 00	 mov	 QWORD PTR tv227[rsp], rax
  004f9	eb 45		 jmp	 SHORT $LN34@format_flo
$LN33@format_flo:
  004fb	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR unicode_tmp$[rsp]
  00503	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  0050b	75 1c		 jne	 SHORT $LN32@format_flo
  0050d	41 b8 31 04 00
	00		 mov	 r8d, 1073		; 00000431H
  00513	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  0051a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FM@EDHEIHFI@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAt?$AAm?$AAp@
  00521	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00527	33 c0		 xor	 eax, eax
$LN32@format_flo:
  00529	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR unicode_tmp$[rsp]
  00531	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  00538	48 89 84 24 50
	01 00 00	 mov	 QWORD PTR tv227[rsp], rax
$LN34@format_flo:
  00540	48 8b 44 24 78	 mov	 rax, QWORD PTR index$[rsp]
  00545	48 8b 8c 24 50
	01 00 00	 mov	 rcx, QWORD PTR tv227[rsp]
  0054d	48 03 c8	 add	 rcx, rax
  00550	48 8b c1	 mov	 rax, rcx
  00553	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00556	89 84 24 58 01
	00 00		 mov	 DWORD PTR tv342[rsp], eax
  0055d	e9 68 03 00 00	 jmp	 $LN56@format_flo
$LN55@format_flo:
  00562	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR unicode_tmp$[rsp]
  0056a	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0056e	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00574	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00579	85 c0		 test	 eax, eax
  0057b	75 1c		 jne	 SHORT $LN35@format_flo
  0057d	41 b8 31 04 00
	00		 mov	 r8d, 1073		; 00000431H
  00583	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  0058a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@ONKBENKF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAt?$AAm?$AAp?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00591	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00597	33 c0		 xor	 eax, eax
$LN35@format_flo:
  00599	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR unicode_tmp$[rsp]
  005a1	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  005a4	c1 e8 07	 shr	 eax, 7
  005a7	83 e0 01	 and	 eax, 1
  005aa	85 c0		 test	 eax, eax
  005ac	75 1c		 jne	 SHORT $LN36@format_flo
  005ae	41 b8 31 04 00
	00		 mov	 r8d, 1073		; 00000431H
  005b4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  005bb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@JIMPMAH@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAt?$AAm?$AAp?$AA?$CJ@
  005c2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  005c8	33 c0		 xor	 eax, eax
$LN36@format_flo:
  005ca	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR unicode_tmp$[rsp]
  005d2	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  005d5	c1 e8 02	 shr	 eax, 2
  005d8	83 e0 07	 and	 eax, 7
  005db	83 f8 02	 cmp	 eax, 2
  005de	0f 85 6f 01 00
	00		 jne	 $LN53@format_flo
  005e4	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR unicode_tmp$[rsp]
  005ec	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  005f0	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  005f6	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  005fb	85 c0		 test	 eax, eax
  005fd	75 1c		 jne	 SHORT $LN37@format_flo
  005ff	41 b8 31 04 00
	00		 mov	 r8d, 1073		; 00000431H
  00605	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  0060c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@ONKBENKF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAt?$AAm?$AAp?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00613	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00619	33 c0		 xor	 eax, eax
$LN37@format_flo:
  0061b	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR unicode_tmp$[rsp]
  00623	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00626	c1 e8 05	 shr	 eax, 5
  00629	83 e0 01	 and	 eax, 1
  0062c	85 c0		 test	 eax, eax
  0062e	0f 84 bd 00 00
	00		 je	 $LN43@format_flo
  00634	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR unicode_tmp$[rsp]
  0063c	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00640	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00646	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0064b	85 c0		 test	 eax, eax
  0064d	75 1c		 jne	 SHORT $LN38@format_flo
  0064f	41 b8 31 04 00
	00		 mov	 r8d, 1073		; 00000431H
  00655	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  0065c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@ONKBENKF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAt?$AAm?$AAp?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00663	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00669	33 c0		 xor	 eax, eax
$LN38@format_flo:
  0066b	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR unicode_tmp$[rsp]
  00673	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00676	c1 e8 07	 shr	 eax, 7
  00679	83 e0 01	 and	 eax, 1
  0067c	85 c0		 test	 eax, eax
  0067e	75 1c		 jne	 SHORT $LN39@format_flo
  00680	41 b8 31 04 00
	00		 mov	 r8d, 1073		; 00000431H
  00686	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  0068d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@JIMPMAH@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAt?$AAm?$AAp?$AA?$CJ@
  00694	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0069a	33 c0		 xor	 eax, eax
$LN39@format_flo:
  0069c	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR unicode_tmp$[rsp]
  006a4	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  006a7	c1 e8 06	 shr	 eax, 6
  006aa	83 e0 01	 and	 eax, 1
  006ad	85 c0		 test	 eax, eax
  006af	74 18		 je	 SHORT $LN40@format_flo
  006b1	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR unicode_tmp$[rsp]
  006b9	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  006bf	48 89 84 24 60
	01 00 00	 mov	 QWORD PTR tv283[rsp], rax
  006c7	eb 16		 jmp	 SHORT $LN41@format_flo
$LN40@format_flo:
  006c9	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR unicode_tmp$[rsp]
  006d1	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  006d7	48 89 84 24 60
	01 00 00	 mov	 QWORD PTR tv283[rsp], rax
$LN41@format_flo:
  006df	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR tv283[rsp]
  006e7	48 89 84 24 68
	01 00 00	 mov	 QWORD PTR tv292[rsp], rax
  006ef	eb 45		 jmp	 SHORT $LN44@format_flo
$LN43@format_flo:
  006f1	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR unicode_tmp$[rsp]
  006f9	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  00701	75 1c		 jne	 SHORT $LN42@format_flo
  00703	41 b8 31 04 00
	00		 mov	 r8d, 1073		; 00000431H
  00709	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00710	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FM@EDHEIHFI@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAt?$AAm?$AAp@
  00717	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0071d	33 c0		 xor	 eax, eax
$LN42@format_flo:
  0071f	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR unicode_tmp$[rsp]
  00727	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  0072e	48 89 84 24 68
	01 00 00	 mov	 QWORD PTR tv292[rsp], rax
$LN44@format_flo:
  00736	48 8b 84 24 68
	01 00 00	 mov	 rax, QWORD PTR tv292[rsp]
  0073e	48 8b 4c 24 78	 mov	 rcx, QWORD PTR index$[rsp]
  00743	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  00747	89 84 24 70 01
	00 00		 mov	 DWORD PTR tv341[rsp], eax
  0074e	e9 69 01 00 00	 jmp	 $LN54@format_flo
$LN53@format_flo:
  00753	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR unicode_tmp$[rsp]
  0075b	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0075f	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00765	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0076a	85 c0		 test	 eax, eax
  0076c	75 1c		 jne	 SHORT $LN45@format_flo
  0076e	41 b8 31 04 00
	00		 mov	 r8d, 1073		; 00000431H
  00774	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  0077b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@ONKBENKF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAt?$AAm?$AAp?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00782	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00788	33 c0		 xor	 eax, eax
$LN45@format_flo:
  0078a	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR unicode_tmp$[rsp]
  00792	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00795	c1 e8 05	 shr	 eax, 5
  00798	83 e0 01	 and	 eax, 1
  0079b	85 c0		 test	 eax, eax
  0079d	0f 84 bd 00 00
	00		 je	 $LN51@format_flo
  007a3	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR unicode_tmp$[rsp]
  007ab	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  007af	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  007b5	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  007ba	85 c0		 test	 eax, eax
  007bc	75 1c		 jne	 SHORT $LN46@format_flo
  007be	41 b8 31 04 00
	00		 mov	 r8d, 1073		; 00000431H
  007c4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  007cb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@ONKBENKF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAt?$AAm?$AAp?$AA?$CJ?$AA?$CJ?$AA?$AA@
  007d2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  007d8	33 c0		 xor	 eax, eax
$LN46@format_flo:
  007da	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR unicode_tmp$[rsp]
  007e2	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  007e5	c1 e8 07	 shr	 eax, 7
  007e8	83 e0 01	 and	 eax, 1
  007eb	85 c0		 test	 eax, eax
  007ed	75 1c		 jne	 SHORT $LN47@format_flo
  007ef	41 b8 31 04 00
	00		 mov	 r8d, 1073		; 00000431H
  007f5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  007fc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@JIMPMAH@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAt?$AAm?$AAp?$AA?$CJ@
  00803	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00809	33 c0		 xor	 eax, eax
$LN47@format_flo:
  0080b	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR unicode_tmp$[rsp]
  00813	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00816	c1 e8 06	 shr	 eax, 6
  00819	83 e0 01	 and	 eax, 1
  0081c	85 c0		 test	 eax, eax
  0081e	74 18		 je	 SHORT $LN48@format_flo
  00820	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR unicode_tmp$[rsp]
  00828	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  0082e	48 89 84 24 78
	01 00 00	 mov	 QWORD PTR tv329[rsp], rax
  00836	eb 16		 jmp	 SHORT $LN49@format_flo
$LN48@format_flo:
  00838	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR unicode_tmp$[rsp]
  00840	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  00846	48 89 84 24 78
	01 00 00	 mov	 QWORD PTR tv329[rsp], rax
$LN49@format_flo:
  0084e	48 8b 84 24 78
	01 00 00	 mov	 rax, QWORD PTR tv329[rsp]
  00856	48 89 84 24 80
	01 00 00	 mov	 QWORD PTR tv338[rsp], rax
  0085e	eb 45		 jmp	 SHORT $LN52@format_flo
$LN51@format_flo:
  00860	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR unicode_tmp$[rsp]
  00868	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  00870	75 1c		 jne	 SHORT $LN50@format_flo
  00872	41 b8 31 04 00
	00		 mov	 r8d, 1073		; 00000431H
  00878	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  0087f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FM@EDHEIHFI@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAt?$AAm?$AAp@
  00886	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0088c	33 c0		 xor	 eax, eax
$LN50@format_flo:
  0088e	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR unicode_tmp$[rsp]
  00896	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  0089d	48 89 84 24 80
	01 00 00	 mov	 QWORD PTR tv338[rsp], rax
$LN52@format_flo:
  008a5	48 8b 84 24 80
	01 00 00	 mov	 rax, QWORD PTR tv338[rsp]
  008ad	48 8b 4c 24 78	 mov	 rcx, QWORD PTR index$[rsp]
  008b2	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  008b5	89 84 24 70 01
	00 00		 mov	 DWORD PTR tv341[rsp], eax
$LN54@format_flo:
  008bc	8b 84 24 70 01
	00 00		 mov	 eax, DWORD PTR tv341[rsp]
  008c3	89 84 24 58 01
	00 00		 mov	 DWORD PTR tv342[rsp], eax
$LN56@format_flo:
  008ca	83 bc 24 58 01
	00 00 2d	 cmp	 DWORD PTR tv342[rsp], 45 ; 0000002dH
  008d2	75 28		 jne	 SHORT $LN7@format_flo

; 1074 :         sign_char = '-';

  008d4	c7 44 24 74 2d
	00 00 00	 mov	 DWORD PTR sign_char$[rsp], 45 ; 0000002dH

; 1075 :         ++index;

  008dc	48 8b 44 24 78	 mov	 rax, QWORD PTR index$[rsp]
  008e1	48 ff c0	 inc	 rax
  008e4	48 89 44 24 78	 mov	 QWORD PTR index$[rsp], rax

; 1076 :         --n_digits;

  008e9	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR n_digits$[rsp]
  008f1	48 ff c8	 dec	 rax
  008f4	48 89 84 24 40
	01 00 00	 mov	 QWORD PTR n_digits$[rsp], rax
$LN7@format_flo:

; 1077 :     }
; 1078 : 
; 1079 :     /* Determine if we have any "remainder" (after the digits, might include
; 1080 :        decimal or exponent or both (or neither)) */
; 1081 :     parse_number(unicode_tmp, index, index + n_digits, &n_remainder, &has_decimal);

  008fc	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR n_digits$[rsp]
  00904	48 8b 4c 24 78	 mov	 rcx, QWORD PTR index$[rsp]
  00909	48 03 c8	 add	 rcx, rax
  0090c	48 8b c1	 mov	 rax, rcx
  0090f	48 8d 8c 24 38
	01 00 00	 lea	 rcx, QWORD PTR has_decimal$[rsp]
  00917	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0091c	4c 8d 8c 24 80
	00 00 00	 lea	 r9, QWORD PTR n_remainder$[rsp]
  00924	4c 8b c0	 mov	 r8, rax
  00927	48 8b 54 24 78	 mov	 rdx, QWORD PTR index$[rsp]
  0092c	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR unicode_tmp$[rsp]
  00934	e8 00 00 00 00	 call	 parse_number

; 1082 : 
; 1083 :     /* Determine the grouping, separator, and decimal point, if any. */
; 1084 :     if (get_locale_info(format->type == 'n' ? LT_CURRENT_LOCALE :
; 1085 :                         (format->thousands_separators ?
; 1086 :                          LT_DEFAULT_LOCALE :
; 1087 :                          LT_NO_LOCALE),
; 1088 :                         &locale) == -1)

  00939	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR format$[rsp]
  00941	83 78 28 6e	 cmp	 DWORD PTR [rax+40], 110	; 0000006eH
  00945	75 0d		 jne	 SHORT $LN59@format_flo
  00947	c7 84 24 88 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv359[rsp], 0
  00952	eb 34		 jmp	 SHORT $LN60@format_flo
$LN59@format_flo:
  00954	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR format$[rsp]
  0095c	83 78 18 00	 cmp	 DWORD PTR [rax+24], 0
  00960	74 0d		 je	 SHORT $LN57@format_flo
  00962	c7 84 24 8c 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv358[rsp], 1
  0096d	eb 0b		 jmp	 SHORT $LN58@format_flo
$LN57@format_flo:
  0096f	c7 84 24 8c 01
	00 00 02 00 00
	00		 mov	 DWORD PTR tv358[rsp], 2
$LN58@format_flo:
  0097a	8b 84 24 8c 01
	00 00		 mov	 eax, DWORD PTR tv358[rsp]
  00981	89 84 24 88 01
	00 00		 mov	 DWORD PTR tv359[rsp], eax
$LN60@format_flo:
  00988	48 8d 94 24 90
	00 00 00	 lea	 rdx, QWORD PTR locale$[rsp]
  00990	8b 8c 24 88 01
	00 00		 mov	 ecx, DWORD PTR tv359[rsp]
  00997	e8 00 00 00 00	 call	 get_locale_info
  0099c	83 f8 ff	 cmp	 eax, -1
  0099f	75 05		 jne	 SHORT $LN6@format_flo

; 1089 :         goto done;

  009a1	e9 b9 01 00 00	 jmp	 $done$22041
$LN6@format_flo:

; 1090 : 
; 1091 :     /* Calculate how much memory we'll need. */
; 1092 :     n_total = calc_number_widths(&spec, 0, sign_char, unicode_tmp, index,
; 1093 :                                  index + n_digits, n_remainder, has_decimal,
; 1094 :                                  &locale, format, &maxchar);

  009a6	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR n_digits$[rsp]
  009ae	48 8b 4c 24 78	 mov	 rcx, QWORD PTR index$[rsp]
  009b3	48 03 c8	 add	 rcx, rax
  009b6	48 8b c1	 mov	 rax, rcx
  009b9	48 8d 4c 24 60	 lea	 rcx, QWORD PTR maxchar$[rsp]
  009be	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  009c3	48 8b 8c 24 b8
	01 00 00	 mov	 rcx, QWORD PTR format$[rsp]
  009cb	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  009d0	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR locale$[rsp]
  009d8	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  009dd	8b 8c 24 38 01
	00 00		 mov	 ecx, DWORD PTR has_decimal$[rsp]
  009e4	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  009e8	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR n_remainder$[rsp]
  009f0	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  009f5	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  009fa	48 8b 44 24 78	 mov	 rax, QWORD PTR index$[rsp]
  009ff	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00a04	4c 8b 8c 24 88
	00 00 00	 mov	 r9, QWORD PTR unicode_tmp$[rsp]
  00a0c	44 8b 44 24 74	 mov	 r8d, DWORD PTR sign_char$[rsp]
  00a11	33 d2		 xor	 edx, edx
  00a13	48 8d 8c 24 c0
	00 00 00	 lea	 rcx, QWORD PTR spec$[rsp]
  00a1b	e8 00 00 00 00	 call	 calc_number_widths
  00a20	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR n_total$[rsp], rax

; 1095 : 
; 1096 :     /* Allocate the memory. */
; 1097 :     if (_PyUnicodeWriter_Prepare(writer, n_total, maxchar) == -1)

  00a28	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR writer$[rsp]
  00a30	8b 40 14	 mov	 eax, DWORD PTR [rax+20]
  00a33	39 44 24 60	 cmp	 DWORD PTR maxchar$[rsp], eax
  00a37	77 32		 ja	 SHORT $LN61@format_flo
  00a39	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR writer$[rsp]
  00a41	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR writer$[rsp]
  00a49	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  00a4d	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  00a51	48 2b c1	 sub	 rax, rcx
  00a54	48 39 84 24 a8
	00 00 00	 cmp	 QWORD PTR n_total$[rsp], rax
  00a5c	7f 0d		 jg	 SHORT $LN61@format_flo
  00a5e	c7 84 24 90 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv387[rsp], 0
  00a69	eb 47		 jmp	 SHORT $LN64@format_flo
$LN61@format_flo:
  00a6b	48 83 bc 24 a8
	00 00 00 00	 cmp	 QWORD PTR n_total$[rsp], 0
  00a74	75 0d		 jne	 SHORT $LN62@format_flo
  00a76	c7 84 24 94 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv386[rsp], 0
  00a81	eb 21		 jmp	 SHORT $LN63@format_flo
$LN62@format_flo:
  00a83	44 8b 44 24 60	 mov	 r8d, DWORD PTR maxchar$[rsp]
  00a88	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR n_total$[rsp]
  00a90	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR writer$[rsp]
  00a98	e8 00 00 00 00	 call	 _PyUnicodeWriter_PrepareInternal
  00a9d	89 84 24 94 01
	00 00		 mov	 DWORD PTR tv386[rsp], eax
$LN63@format_flo:
  00aa4	8b 84 24 94 01
	00 00		 mov	 eax, DWORD PTR tv386[rsp]
  00aab	89 84 24 90 01
	00 00		 mov	 DWORD PTR tv387[rsp], eax
$LN64@format_flo:
  00ab2	83 bc 24 90 01
	00 00 ff	 cmp	 DWORD PTR tv387[rsp], -1
  00aba	75 05		 jne	 SHORT $LN5@format_flo

; 1098 :         goto done;

  00abc	e9 9e 00 00 00	 jmp	 $done$22041
$LN5@format_flo:

; 1099 : 
; 1100 :     /* Populate the memory. */
; 1101 :     result = fill_number(writer, &spec,
; 1102 :                          unicode_tmp, index, index + n_digits,
; 1103 :                          NULL, 0,
; 1104 :                          format->fill_char == '\0' ? ' ' : format->fill_char,
; 1105 :                          &locale, 0);

  00ac1	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR format$[rsp]
  00ac9	83 38 00	 cmp	 DWORD PTR [rax], 0
  00acc	75 0d		 jne	 SHORT $LN65@format_flo
  00ace	c7 84 24 98 01
	00 00 20 00 00
	00		 mov	 DWORD PTR tv393[rsp], 32 ; 00000020H
  00ad9	eb 11		 jmp	 SHORT $LN66@format_flo
$LN65@format_flo:
  00adb	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR format$[rsp]
  00ae3	8b 00		 mov	 eax, DWORD PTR [rax]
  00ae5	89 84 24 98 01
	00 00		 mov	 DWORD PTR tv393[rsp], eax
$LN66@format_flo:
  00aec	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR n_digits$[rsp]
  00af4	48 8b 4c 24 78	 mov	 rcx, QWORD PTR index$[rsp]
  00af9	48 03 c8	 add	 rcx, rax
  00afc	48 8b c1	 mov	 rax, rcx
  00aff	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR [rsp+72], 0
  00b07	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR locale$[rsp]
  00b0f	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  00b14	8b 8c 24 98 01
	00 00		 mov	 ecx, DWORD PTR tv393[rsp]
  00b1b	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  00b1f	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR [rsp+48], 0
  00b28	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR [rsp+40], 0
  00b31	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00b36	4c 8b 4c 24 78	 mov	 r9, QWORD PTR index$[rsp]
  00b3b	4c 8b 84 24 88
	00 00 00	 mov	 r8, QWORD PTR unicode_tmp$[rsp]
  00b43	48 8d 94 24 c0
	00 00 00	 lea	 rdx, QWORD PTR spec$[rsp]
  00b4b	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR writer$[rsp]
  00b53	e8 00 00 00 00	 call	 fill_number
  00b58	89 84 24 20 01
	00 00		 mov	 DWORD PTR result$[rsp], eax
$done$22041:
$LN4@format_flo:

; 1106 : 
; 1107 : done:
; 1108 :     Py_XDECREF(unicode_tmp);

  00b5f	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR unicode_tmp$[rsp], 0
  00b68	74 0d		 je	 SHORT $LN1@format_flo
  00b6a	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR unicode_tmp$[rsp]
  00b72	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@format_flo:
  00b77	33 c0		 xor	 eax, eax
  00b79	85 c0		 test	 eax, eax
  00b7b	75 e2		 jne	 SHORT $LN4@format_flo

; 1109 :     free_locale_info(&locale);

  00b7d	48 8d 8c 24 90
	00 00 00	 lea	 rcx, QWORD PTR locale$[rsp]
  00b85	e8 00 00 00 00	 call	 free_locale_info

; 1110 :     return result;

  00b8a	8b 84 24 20 01
	00 00		 mov	 eax, DWORD PTR result$[rsp]
$LN21@format_flo:

; 1111 : }

  00b91	48 81 c4 a8 01
	00 00		 add	 rsp, 424		; 000001a8H
  00b98	c3		 ret	 0
format_float_internal ENDP
_TEXT	ENDS
PUBLIC	??_C@_1EI@LJDGFMNA@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAs?$AA?$CJ?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt?$AAa?$AA?4@ ; `string'
PUBLIC	??_C@_1DA@KHNHDJJI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAs?$AA?$CJ?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CK@OAGONJLC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAs?$AA?$CJ?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CM@GOJFGIBK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAs?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CG@MKPCHAGC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AA?$CJ?$AA?$AA@ ; `string'
EXTRN	_Py_ctype_table:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$parse_number DD imagerel parse_number
	DD	imagerel parse_number+3121
	DD	imagerel $unwind$parse_number
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$parse_number DD 021b01H
	DD	017011bH
xdata	ENDS
;	COMDAT ??_C@_1EI@LJDGFMNA@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAs?$AA?$CJ?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt?$AAa?$AA?4@
CONST	SEGMENT
??_C@_1EI@LJDGFMNA@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAs?$AA?$CJ?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt?$AAa?$AA?4@ DB '('
	DB	00H, '(', 00H, 'P', 00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H
	DB	'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'O', 00H, 'b', 00H, 'j'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, '*', 00H, ')', 00H, '(', 00H
	DB	'(', 00H, 's', 00H, ')', 00H, ')', 00H, ')', 00H, '-', 00H, '>'
	DB	00H, 'd', 00H, 'a', 00H, 't', 00H, 'a', 00H, '.', 00H, 'a', 00H
	DB	'n', 00H, 'y', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1DA@KHNHDJJI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAs?$AA?$CJ?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DA@KHNHDJJI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAs?$AA?$CJ?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'I', 00H, 'S', 00H, '_', 00H, 'R'
	DB	00H, 'E', 00H, 'A', 00H, 'D', 00H, 'Y', 00H, '(', 00H, '(', 00H
	DB	's', 00H, ')', 00H, ')', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@OAGONJLC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAs?$AA?$CJ?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CK@OAGONJLC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAs?$AA?$CJ?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, '(', 00H, 's', 00H, ')', 00H, ')', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1CM@GOJFGIBK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAs?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CM@GOJFGIBK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAs?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'I', 00H, 'S', 00H, '_', 00H, 'R'
	DB	00H, 'E', 00H, 'A', 00H, 'D', 00H, 'Y', 00H, '(', 00H, 's', 00H
	DB	')', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@MKPCHAGC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CG@MKPCHAGC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, 's', 00H, ')', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT parse_number
_TEXT	SEGMENT
remainder$ = 32
tv166 = 40
tv175 = 48
tv290 = 56
tv231 = 64
tv240 = 72
tv289 = 80
tv277 = 88
tv286 = 96
tv369 = 104
tv378 = 112
tv493 = 120
tv434 = 128
tv443 = 136
tv492 = 144
tv480 = 152
tv489 = 160
tv495 = 168
s$ = 192
pos$ = 200
end$ = 208
n_remainder$ = 216
has_decimal$ = 224
parse_number PROC					; COMDAT

; 401  : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H
$LN3@parse_numb:

; 402  :     Py_ssize_t remainder;
; 403  : 
; 404  :     while (pos<end && Py_ISDIGIT(PyUnicode_READ_CHAR(s, pos)))

  0001b	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR end$[rsp]
  00023	48 39 84 24 c8
	00 00 00	 cmp	 QWORD PTR pos$[rsp], rax
  0002b	0f 8d bf 05 00
	00		 jge	 $LN2@parse_numb
  00031	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00039	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0003d	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00043	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00048	85 c0		 test	 eax, eax
  0004a	75 1c		 jne	 SHORT $LN6@parse_numb
  0004c	41 b8 94 01 00
	00		 mov	 r8d, 404		; 00000194H
  00052	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00059	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@MKPCHAGC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AA?$CJ?$AA?$AA@
  00060	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00066	33 c0		 xor	 eax, eax
$LN6@parse_numb:
  00068	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00070	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00073	c1 e8 07	 shr	 eax, 7
  00076	83 e0 01	 and	 eax, 1
  00079	85 c0		 test	 eax, eax
  0007b	75 1c		 jne	 SHORT $LN7@parse_numb
  0007d	41 b8 94 01 00
	00		 mov	 r8d, 404		; 00000194H
  00083	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  0008a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@GOJFGIBK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAs?$AA?$CJ?$AA?$AA@
  00091	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00097	33 c0		 xor	 eax, eax
$LN7@parse_numb:
  00099	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  000a1	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000a5	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000ab	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  000b0	85 c0		 test	 eax, eax
  000b2	75 1c		 jne	 SHORT $LN8@parse_numb
  000b4	41 b8 94 01 00
	00		 mov	 r8d, 404		; 00000194H
  000ba	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  000c1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@OAGONJLC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAs?$AA?$CJ?$AA?$CJ?$AA?$AA@
  000c8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000ce	33 c0		 xor	 eax, eax
$LN8@parse_numb:
  000d0	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  000d8	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  000db	c1 e8 07	 shr	 eax, 7
  000de	83 e0 01	 and	 eax, 1
  000e1	85 c0		 test	 eax, eax
  000e3	75 1c		 jne	 SHORT $LN9@parse_numb
  000e5	41 b8 94 01 00
	00		 mov	 r8d, 404		; 00000194H
  000eb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  000f2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@KHNHDJJI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAs?$AA?$CJ?$AA?$CJ?$AA?$AA@
  000f9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000ff	33 c0		 xor	 eax, eax
$LN9@parse_numb:
  00101	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00109	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0010c	c1 e8 02	 shr	 eax, 2
  0010f	83 e0 07	 and	 eax, 7
  00112	83 f8 01	 cmp	 eax, 1
  00115	0f 85 62 01 00
	00		 jne	 $LN38@parse_numb
  0011b	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00123	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00127	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0012d	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00132	85 c0		 test	 eax, eax
  00134	75 1c		 jne	 SHORT $LN10@parse_numb
  00136	41 b8 94 01 00
	00		 mov	 r8d, 404		; 00000194H
  0013c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00143	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@OAGONJLC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAs?$AA?$CJ?$AA?$CJ?$AA?$AA@
  0014a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00150	33 c0		 xor	 eax, eax
$LN10@parse_numb:
  00152	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  0015a	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0015d	c1 e8 05	 shr	 eax, 5
  00160	83 e0 01	 and	 eax, 1
  00163	85 c0		 test	 eax, eax
  00165	0f 84 b1 00 00
	00		 je	 $LN16@parse_numb
  0016b	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00173	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00177	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0017d	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00182	85 c0		 test	 eax, eax
  00184	75 1c		 jne	 SHORT $LN11@parse_numb
  00186	41 b8 94 01 00
	00		 mov	 r8d, 404		; 00000194H
  0018c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00193	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@OAGONJLC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAs?$AA?$CJ?$AA?$CJ?$AA?$AA@
  0019a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001a0	33 c0		 xor	 eax, eax
$LN11@parse_numb:
  001a2	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  001aa	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  001ad	c1 e8 07	 shr	 eax, 7
  001b0	83 e0 01	 and	 eax, 1
  001b3	85 c0		 test	 eax, eax
  001b5	75 1c		 jne	 SHORT $LN12@parse_numb
  001b7	41 b8 94 01 00
	00		 mov	 r8d, 404		; 00000194H
  001bd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  001c4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@KHNHDJJI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAs?$AA?$CJ?$AA?$CJ?$AA?$AA@
  001cb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001d1	33 c0		 xor	 eax, eax
$LN12@parse_numb:
  001d3	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  001db	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  001de	c1 e8 06	 shr	 eax, 6
  001e1	83 e0 01	 and	 eax, 1
  001e4	85 c0		 test	 eax, eax
  001e6	74 15		 je	 SHORT $LN13@parse_numb
  001e8	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  001f0	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  001f6	48 89 44 24 28	 mov	 QWORD PTR tv166[rsp], rax
  001fb	eb 13		 jmp	 SHORT $LN14@parse_numb
$LN13@parse_numb:
  001fd	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00205	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  0020b	48 89 44 24 28	 mov	 QWORD PTR tv166[rsp], rax
$LN14@parse_numb:
  00210	48 8b 44 24 28	 mov	 rax, QWORD PTR tv166[rsp]
  00215	48 89 44 24 30	 mov	 QWORD PTR tv175[rsp], rax
  0021a	eb 42		 jmp	 SHORT $LN17@parse_numb
$LN16@parse_numb:
  0021c	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00224	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  0022c	75 1c		 jne	 SHORT $LN15@parse_numb
  0022e	41 b8 94 01 00
	00		 mov	 r8d, 404		; 00000194H
  00234	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  0023b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EI@LJDGFMNA@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAs?$AA?$CJ?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt?$AAa?$AA?4@
  00242	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00248	33 c0		 xor	 eax, eax
$LN15@parse_numb:
  0024a	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00252	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  00259	48 89 44 24 30	 mov	 QWORD PTR tv175[rsp], rax
$LN17@parse_numb:
  0025e	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR pos$[rsp]
  00266	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv175[rsp]
  0026b	48 03 c8	 add	 rcx, rax
  0026e	48 8b c1	 mov	 rax, rcx
  00271	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00274	89 44 24 38	 mov	 DWORD PTR tv290[rsp], eax
  00278	e9 3e 03 00 00	 jmp	 $LN39@parse_numb
$LN38@parse_numb:
  0027d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00285	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00289	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0028f	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00294	85 c0		 test	 eax, eax
  00296	75 1c		 jne	 SHORT $LN18@parse_numb
  00298	41 b8 94 01 00
	00		 mov	 r8d, 404		; 00000194H
  0029e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  002a5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@OAGONJLC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAs?$AA?$CJ?$AA?$CJ?$AA?$AA@
  002ac	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  002b2	33 c0		 xor	 eax, eax
$LN18@parse_numb:
  002b4	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  002bc	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  002bf	c1 e8 07	 shr	 eax, 7
  002c2	83 e0 01	 and	 eax, 1
  002c5	85 c0		 test	 eax, eax
  002c7	75 1c		 jne	 SHORT $LN19@parse_numb
  002c9	41 b8 94 01 00
	00		 mov	 r8d, 404		; 00000194H
  002cf	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  002d6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@KHNHDJJI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAs?$AA?$CJ?$AA?$CJ?$AA?$AA@
  002dd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  002e3	33 c0		 xor	 eax, eax
$LN19@parse_numb:
  002e5	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  002ed	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  002f0	c1 e8 02	 shr	 eax, 2
  002f3	83 e0 07	 and	 eax, 7
  002f6	83 f8 02	 cmp	 eax, 2
  002f9	0f 85 5d 01 00
	00		 jne	 $LN36@parse_numb
  002ff	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00307	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0030b	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00311	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00316	85 c0		 test	 eax, eax
  00318	75 1c		 jne	 SHORT $LN20@parse_numb
  0031a	41 b8 94 01 00
	00		 mov	 r8d, 404		; 00000194H
  00320	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00327	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@OAGONJLC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAs?$AA?$CJ?$AA?$CJ?$AA?$AA@
  0032e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00334	33 c0		 xor	 eax, eax
$LN20@parse_numb:
  00336	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  0033e	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00341	c1 e8 05	 shr	 eax, 5
  00344	83 e0 01	 and	 eax, 1
  00347	85 c0		 test	 eax, eax
  00349	0f 84 b1 00 00
	00		 je	 $LN26@parse_numb
  0034f	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00357	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0035b	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00361	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00366	85 c0		 test	 eax, eax
  00368	75 1c		 jne	 SHORT $LN21@parse_numb
  0036a	41 b8 94 01 00
	00		 mov	 r8d, 404		; 00000194H
  00370	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00377	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@OAGONJLC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAs?$AA?$CJ?$AA?$CJ?$AA?$AA@
  0037e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00384	33 c0		 xor	 eax, eax
$LN21@parse_numb:
  00386	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  0038e	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00391	c1 e8 07	 shr	 eax, 7
  00394	83 e0 01	 and	 eax, 1
  00397	85 c0		 test	 eax, eax
  00399	75 1c		 jne	 SHORT $LN22@parse_numb
  0039b	41 b8 94 01 00
	00		 mov	 r8d, 404		; 00000194H
  003a1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  003a8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@KHNHDJJI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAs?$AA?$CJ?$AA?$CJ?$AA?$AA@
  003af	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  003b5	33 c0		 xor	 eax, eax
$LN22@parse_numb:
  003b7	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  003bf	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  003c2	c1 e8 06	 shr	 eax, 6
  003c5	83 e0 01	 and	 eax, 1
  003c8	85 c0		 test	 eax, eax
  003ca	74 15		 je	 SHORT $LN23@parse_numb
  003cc	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  003d4	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  003da	48 89 44 24 40	 mov	 QWORD PTR tv231[rsp], rax
  003df	eb 13		 jmp	 SHORT $LN24@parse_numb
$LN23@parse_numb:
  003e1	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  003e9	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  003ef	48 89 44 24 40	 mov	 QWORD PTR tv231[rsp], rax
$LN24@parse_numb:
  003f4	48 8b 44 24 40	 mov	 rax, QWORD PTR tv231[rsp]
  003f9	48 89 44 24 48	 mov	 QWORD PTR tv240[rsp], rax
  003fe	eb 42		 jmp	 SHORT $LN27@parse_numb
$LN26@parse_numb:
  00400	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00408	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  00410	75 1c		 jne	 SHORT $LN25@parse_numb
  00412	41 b8 94 01 00
	00		 mov	 r8d, 404		; 00000194H
  00418	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  0041f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EI@LJDGFMNA@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAs?$AA?$CJ?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt?$AAa?$AA?4@
  00426	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0042c	33 c0		 xor	 eax, eax
$LN25@parse_numb:
  0042e	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00436	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  0043d	48 89 44 24 48	 mov	 QWORD PTR tv240[rsp], rax
$LN27@parse_numb:
  00442	48 8b 44 24 48	 mov	 rax, QWORD PTR tv240[rsp]
  00447	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR pos$[rsp]
  0044f	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  00453	89 44 24 50	 mov	 DWORD PTR tv289[rsp], eax
  00457	e9 57 01 00 00	 jmp	 $LN37@parse_numb
$LN36@parse_numb:
  0045c	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00464	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00468	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0046e	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00473	85 c0		 test	 eax, eax
  00475	75 1c		 jne	 SHORT $LN28@parse_numb
  00477	41 b8 94 01 00
	00		 mov	 r8d, 404		; 00000194H
  0047d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00484	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@OAGONJLC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAs?$AA?$CJ?$AA?$CJ?$AA?$AA@
  0048b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00491	33 c0		 xor	 eax, eax
$LN28@parse_numb:
  00493	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  0049b	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0049e	c1 e8 05	 shr	 eax, 5
  004a1	83 e0 01	 and	 eax, 1
  004a4	85 c0		 test	 eax, eax
  004a6	0f 84 b1 00 00
	00		 je	 $LN34@parse_numb
  004ac	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  004b4	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  004b8	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  004be	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  004c3	85 c0		 test	 eax, eax
  004c5	75 1c		 jne	 SHORT $LN29@parse_numb
  004c7	41 b8 94 01 00
	00		 mov	 r8d, 404		; 00000194H
  004cd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  004d4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@OAGONJLC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAs?$AA?$CJ?$AA?$CJ?$AA?$AA@
  004db	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  004e1	33 c0		 xor	 eax, eax
$LN29@parse_numb:
  004e3	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  004eb	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  004ee	c1 e8 07	 shr	 eax, 7
  004f1	83 e0 01	 and	 eax, 1
  004f4	85 c0		 test	 eax, eax
  004f6	75 1c		 jne	 SHORT $LN30@parse_numb
  004f8	41 b8 94 01 00
	00		 mov	 r8d, 404		; 00000194H
  004fe	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00505	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@KHNHDJJI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAs?$AA?$CJ?$AA?$CJ?$AA?$AA@
  0050c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00512	33 c0		 xor	 eax, eax
$LN30@parse_numb:
  00514	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  0051c	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0051f	c1 e8 06	 shr	 eax, 6
  00522	83 e0 01	 and	 eax, 1
  00525	85 c0		 test	 eax, eax
  00527	74 15		 je	 SHORT $LN31@parse_numb
  00529	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00531	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  00537	48 89 44 24 58	 mov	 QWORD PTR tv277[rsp], rax
  0053c	eb 13		 jmp	 SHORT $LN32@parse_numb
$LN31@parse_numb:
  0053e	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00546	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  0054c	48 89 44 24 58	 mov	 QWORD PTR tv277[rsp], rax
$LN32@parse_numb:
  00551	48 8b 44 24 58	 mov	 rax, QWORD PTR tv277[rsp]
  00556	48 89 44 24 60	 mov	 QWORD PTR tv286[rsp], rax
  0055b	eb 42		 jmp	 SHORT $LN35@parse_numb
$LN34@parse_numb:
  0055d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00565	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  0056d	75 1c		 jne	 SHORT $LN33@parse_numb
  0056f	41 b8 94 01 00
	00		 mov	 r8d, 404		; 00000194H
  00575	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  0057c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EI@LJDGFMNA@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAs?$AA?$CJ?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt?$AAa?$AA?4@
  00583	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00589	33 c0		 xor	 eax, eax
$LN33@parse_numb:
  0058b	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00593	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  0059a	48 89 44 24 60	 mov	 QWORD PTR tv286[rsp], rax
$LN35@parse_numb:
  0059f	48 8b 44 24 60	 mov	 rax, QWORD PTR tv286[rsp]
  005a4	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR pos$[rsp]
  005ac	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  005af	89 44 24 50	 mov	 DWORD PTR tv289[rsp], eax
$LN37@parse_numb:
  005b3	8b 44 24 50	 mov	 eax, DWORD PTR tv289[rsp]
  005b7	89 44 24 38	 mov	 DWORD PTR tv290[rsp], eax
$LN39@parse_numb:
  005bb	8b 44 24 38	 mov	 eax, DWORD PTR tv290[rsp]
  005bf	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  005c4	0f b6 c0	 movzx	 eax, al
  005c7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_ctype_table
  005ce	8b 04 81	 mov	 eax, DWORD PTR [rcx+rax*4]
  005d1	83 e0 04	 and	 eax, 4
  005d4	85 c0		 test	 eax, eax
  005d6	74 18		 je	 SHORT $LN2@parse_numb

; 405  :         ++pos;

  005d8	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR pos$[rsp]
  005e0	48 ff c0	 inc	 rax
  005e3	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR pos$[rsp], rax
  005eb	e9 2b fa ff ff	 jmp	 $LN3@parse_numb
$LN2@parse_numb:

; 406  :     remainder = pos;

  005f0	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR pos$[rsp]
  005f8	48 89 44 24 20	 mov	 QWORD PTR remainder$[rsp], rax

; 407  : 
; 408  :     /* Does remainder start with a decimal point? */
; 409  :     *has_decimal = pos<end && PyUnicode_READ_CHAR(s, remainder) == '.';

  005fd	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR end$[rsp]
  00605	48 39 84 24 c8
	00 00 00	 cmp	 QWORD PTR pos$[rsp], rax
  0060d	0f 8d c2 05 00
	00		 jge	 $LN74@parse_numb
  00613	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  0061b	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0061f	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00625	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0062a	85 c0		 test	 eax, eax
  0062c	75 1c		 jne	 SHORT $LN40@parse_numb
  0062e	41 b8 99 01 00
	00		 mov	 r8d, 409		; 00000199H
  00634	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  0063b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@MKPCHAGC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AA?$CJ?$AA?$AA@
  00642	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00648	33 c0		 xor	 eax, eax
$LN40@parse_numb:
  0064a	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00652	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00655	c1 e8 07	 shr	 eax, 7
  00658	83 e0 01	 and	 eax, 1
  0065b	85 c0		 test	 eax, eax
  0065d	75 1c		 jne	 SHORT $LN41@parse_numb
  0065f	41 b8 99 01 00
	00		 mov	 r8d, 409		; 00000199H
  00665	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  0066c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@GOJFGIBK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAs?$AA?$CJ?$AA?$AA@
  00673	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00679	33 c0		 xor	 eax, eax
$LN41@parse_numb:
  0067b	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00683	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00687	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0068d	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00692	85 c0		 test	 eax, eax
  00694	75 1c		 jne	 SHORT $LN42@parse_numb
  00696	41 b8 99 01 00
	00		 mov	 r8d, 409		; 00000199H
  0069c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  006a3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@OAGONJLC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAs?$AA?$CJ?$AA?$CJ?$AA?$AA@
  006aa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  006b0	33 c0		 xor	 eax, eax
$LN42@parse_numb:
  006b2	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  006ba	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  006bd	c1 e8 07	 shr	 eax, 7
  006c0	83 e0 01	 and	 eax, 1
  006c3	85 c0		 test	 eax, eax
  006c5	75 1c		 jne	 SHORT $LN43@parse_numb
  006c7	41 b8 99 01 00
	00		 mov	 r8d, 409		; 00000199H
  006cd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  006d4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@KHNHDJJI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAs?$AA?$CJ?$AA?$CJ?$AA?$AA@
  006db	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  006e1	33 c0		 xor	 eax, eax
$LN43@parse_numb:
  006e3	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  006eb	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  006ee	c1 e8 02	 shr	 eax, 2
  006f1	83 e0 07	 and	 eax, 7
  006f4	83 f8 01	 cmp	 eax, 1
  006f7	0f 85 5f 01 00
	00		 jne	 $LN72@parse_numb
  006fd	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00705	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00709	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0070f	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00714	85 c0		 test	 eax, eax
  00716	75 1c		 jne	 SHORT $LN44@parse_numb
  00718	41 b8 99 01 00
	00		 mov	 r8d, 409		; 00000199H
  0071e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00725	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@OAGONJLC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAs?$AA?$CJ?$AA?$CJ?$AA?$AA@
  0072c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00732	33 c0		 xor	 eax, eax
$LN44@parse_numb:
  00734	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  0073c	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0073f	c1 e8 05	 shr	 eax, 5
  00742	83 e0 01	 and	 eax, 1
  00745	85 c0		 test	 eax, eax
  00747	0f 84 b1 00 00
	00		 je	 $LN50@parse_numb
  0074d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00755	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00759	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0075f	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00764	85 c0		 test	 eax, eax
  00766	75 1c		 jne	 SHORT $LN45@parse_numb
  00768	41 b8 99 01 00
	00		 mov	 r8d, 409		; 00000199H
  0076e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00775	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@OAGONJLC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAs?$AA?$CJ?$AA?$CJ?$AA?$AA@
  0077c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00782	33 c0		 xor	 eax, eax
$LN45@parse_numb:
  00784	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  0078c	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0078f	c1 e8 07	 shr	 eax, 7
  00792	83 e0 01	 and	 eax, 1
  00795	85 c0		 test	 eax, eax
  00797	75 1c		 jne	 SHORT $LN46@parse_numb
  00799	41 b8 99 01 00
	00		 mov	 r8d, 409		; 00000199H
  0079f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  007a6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@KHNHDJJI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAs?$AA?$CJ?$AA?$CJ?$AA?$AA@
  007ad	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  007b3	33 c0		 xor	 eax, eax
$LN46@parse_numb:
  007b5	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  007bd	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  007c0	c1 e8 06	 shr	 eax, 6
  007c3	83 e0 01	 and	 eax, 1
  007c6	85 c0		 test	 eax, eax
  007c8	74 15		 je	 SHORT $LN47@parse_numb
  007ca	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  007d2	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  007d8	48 89 44 24 68	 mov	 QWORD PTR tv369[rsp], rax
  007dd	eb 13		 jmp	 SHORT $LN48@parse_numb
$LN47@parse_numb:
  007df	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  007e7	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  007ed	48 89 44 24 68	 mov	 QWORD PTR tv369[rsp], rax
$LN48@parse_numb:
  007f2	48 8b 44 24 68	 mov	 rax, QWORD PTR tv369[rsp]
  007f7	48 89 44 24 70	 mov	 QWORD PTR tv378[rsp], rax
  007fc	eb 42		 jmp	 SHORT $LN51@parse_numb
$LN50@parse_numb:
  007fe	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00806	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  0080e	75 1c		 jne	 SHORT $LN49@parse_numb
  00810	41 b8 99 01 00
	00		 mov	 r8d, 409		; 00000199H
  00816	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  0081d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EI@LJDGFMNA@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAs?$AA?$CJ?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt?$AAa?$AA?4@
  00824	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0082a	33 c0		 xor	 eax, eax
$LN49@parse_numb:
  0082c	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00834	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  0083b	48 89 44 24 70	 mov	 QWORD PTR tv378[rsp], rax
$LN51@parse_numb:
  00840	48 8b 44 24 20	 mov	 rax, QWORD PTR remainder$[rsp]
  00845	48 8b 4c 24 70	 mov	 rcx, QWORD PTR tv378[rsp]
  0084a	48 03 c8	 add	 rcx, rax
  0084d	48 8b c1	 mov	 rax, rcx
  00850	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00853	89 44 24 78	 mov	 DWORD PTR tv493[rsp], eax
  00857	e9 65 03 00 00	 jmp	 $LN73@parse_numb
$LN72@parse_numb:
  0085c	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00864	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00868	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0086e	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00873	85 c0		 test	 eax, eax
  00875	75 1c		 jne	 SHORT $LN52@parse_numb
  00877	41 b8 99 01 00
	00		 mov	 r8d, 409		; 00000199H
  0087d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00884	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@OAGONJLC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAs?$AA?$CJ?$AA?$CJ?$AA?$AA@
  0088b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00891	33 c0		 xor	 eax, eax
$LN52@parse_numb:
  00893	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  0089b	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0089e	c1 e8 07	 shr	 eax, 7
  008a1	83 e0 01	 and	 eax, 1
  008a4	85 c0		 test	 eax, eax
  008a6	75 1c		 jne	 SHORT $LN53@parse_numb
  008a8	41 b8 99 01 00
	00		 mov	 r8d, 409		; 00000199H
  008ae	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  008b5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@KHNHDJJI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAs?$AA?$CJ?$AA?$CJ?$AA?$AA@
  008bc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  008c2	33 c0		 xor	 eax, eax
$LN53@parse_numb:
  008c4	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  008cc	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  008cf	c1 e8 02	 shr	 eax, 2
  008d2	83 e0 07	 and	 eax, 7
  008d5	83 f8 02	 cmp	 eax, 2
  008d8	0f 85 6f 01 00
	00		 jne	 $LN70@parse_numb
  008de	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  008e6	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  008ea	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  008f0	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  008f5	85 c0		 test	 eax, eax
  008f7	75 1c		 jne	 SHORT $LN54@parse_numb
  008f9	41 b8 99 01 00
	00		 mov	 r8d, 409		; 00000199H
  008ff	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00906	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@OAGONJLC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAs?$AA?$CJ?$AA?$CJ?$AA?$AA@
  0090d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00913	33 c0		 xor	 eax, eax
$LN54@parse_numb:
  00915	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  0091d	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00920	c1 e8 05	 shr	 eax, 5
  00923	83 e0 01	 and	 eax, 1
  00926	85 c0		 test	 eax, eax
  00928	0f 84 bd 00 00
	00		 je	 $LN60@parse_numb
  0092e	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00936	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0093a	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00940	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00945	85 c0		 test	 eax, eax
  00947	75 1c		 jne	 SHORT $LN55@parse_numb
  00949	41 b8 99 01 00
	00		 mov	 r8d, 409		; 00000199H
  0094f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00956	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@OAGONJLC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAs?$AA?$CJ?$AA?$CJ?$AA?$AA@
  0095d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00963	33 c0		 xor	 eax, eax
$LN55@parse_numb:
  00965	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  0096d	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00970	c1 e8 07	 shr	 eax, 7
  00973	83 e0 01	 and	 eax, 1
  00976	85 c0		 test	 eax, eax
  00978	75 1c		 jne	 SHORT $LN56@parse_numb
  0097a	41 b8 99 01 00
	00		 mov	 r8d, 409		; 00000199H
  00980	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00987	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@KHNHDJJI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAs?$AA?$CJ?$AA?$CJ?$AA?$AA@
  0098e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00994	33 c0		 xor	 eax, eax
$LN56@parse_numb:
  00996	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  0099e	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  009a1	c1 e8 06	 shr	 eax, 6
  009a4	83 e0 01	 and	 eax, 1
  009a7	85 c0		 test	 eax, eax
  009a9	74 18		 je	 SHORT $LN57@parse_numb
  009ab	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  009b3	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  009b9	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv434[rsp], rax
  009c1	eb 16		 jmp	 SHORT $LN58@parse_numb
$LN57@parse_numb:
  009c3	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  009cb	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  009d1	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv434[rsp], rax
$LN58@parse_numb:
  009d9	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR tv434[rsp]
  009e1	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv443[rsp], rax
  009e9	eb 45		 jmp	 SHORT $LN61@parse_numb
$LN60@parse_numb:
  009eb	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  009f3	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  009fb	75 1c		 jne	 SHORT $LN59@parse_numb
  009fd	41 b8 99 01 00
	00		 mov	 r8d, 409		; 00000199H
  00a03	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00a0a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EI@LJDGFMNA@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAs?$AA?$CJ?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt?$AAa?$AA?4@
  00a11	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00a17	33 c0		 xor	 eax, eax
$LN59@parse_numb:
  00a19	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00a21	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  00a28	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv443[rsp], rax
$LN61@parse_numb:
  00a30	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR tv443[rsp]
  00a38	48 8b 4c 24 20	 mov	 rcx, QWORD PTR remainder$[rsp]
  00a3d	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  00a41	89 84 24 90 00
	00 00		 mov	 DWORD PTR tv492[rsp], eax
  00a48	e9 69 01 00 00	 jmp	 $LN71@parse_numb
$LN70@parse_numb:
  00a4d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00a55	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00a59	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00a5f	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00a64	85 c0		 test	 eax, eax
  00a66	75 1c		 jne	 SHORT $LN62@parse_numb
  00a68	41 b8 99 01 00
	00		 mov	 r8d, 409		; 00000199H
  00a6e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00a75	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@OAGONJLC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAs?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00a7c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00a82	33 c0		 xor	 eax, eax
$LN62@parse_numb:
  00a84	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00a8c	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00a8f	c1 e8 05	 shr	 eax, 5
  00a92	83 e0 01	 and	 eax, 1
  00a95	85 c0		 test	 eax, eax
  00a97	0f 84 bd 00 00
	00		 je	 $LN68@parse_numb
  00a9d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00aa5	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00aa9	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00aaf	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00ab4	85 c0		 test	 eax, eax
  00ab6	75 1c		 jne	 SHORT $LN63@parse_numb
  00ab8	41 b8 99 01 00
	00		 mov	 r8d, 409		; 00000199H
  00abe	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00ac5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@OAGONJLC@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAs?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00acc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00ad2	33 c0		 xor	 eax, eax
$LN63@parse_numb:
  00ad4	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00adc	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00adf	c1 e8 07	 shr	 eax, 7
  00ae2	83 e0 01	 and	 eax, 1
  00ae5	85 c0		 test	 eax, eax
  00ae7	75 1c		 jne	 SHORT $LN64@parse_numb
  00ae9	41 b8 99 01 00
	00		 mov	 r8d, 409		; 00000199H
  00aef	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00af6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@KHNHDJJI@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAs?$AA?$CJ?$AA?$CJ?$AA?$AA@
  00afd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00b03	33 c0		 xor	 eax, eax
$LN64@parse_numb:
  00b05	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00b0d	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00b10	c1 e8 06	 shr	 eax, 6
  00b13	83 e0 01	 and	 eax, 1
  00b16	85 c0		 test	 eax, eax
  00b18	74 18		 je	 SHORT $LN65@parse_numb
  00b1a	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00b22	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  00b28	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR tv480[rsp], rax
  00b30	eb 16		 jmp	 SHORT $LN66@parse_numb
$LN65@parse_numb:
  00b32	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00b3a	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  00b40	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR tv480[rsp], rax
$LN66@parse_numb:
  00b48	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR tv480[rsp]
  00b50	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR tv489[rsp], rax
  00b58	eb 45		 jmp	 SHORT $LN69@parse_numb
$LN68@parse_numb:
  00b5a	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00b62	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  00b6a	75 1c		 jne	 SHORT $LN67@parse_numb
  00b6c	41 b8 99 01 00
	00		 mov	 r8d, 409		; 00000199H
  00b72	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00b79	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EI@LJDGFMNA@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAs?$AA?$CJ?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt?$AAa?$AA?4@
  00b80	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00b86	33 c0		 xor	 eax, eax
$LN67@parse_numb:
  00b88	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00b90	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  00b97	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR tv489[rsp], rax
$LN69@parse_numb:
  00b9f	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR tv489[rsp]
  00ba7	48 8b 4c 24 20	 mov	 rcx, QWORD PTR remainder$[rsp]
  00bac	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  00baf	89 84 24 90 00
	00 00		 mov	 DWORD PTR tv492[rsp], eax
$LN71@parse_numb:
  00bb6	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR tv492[rsp]
  00bbd	89 44 24 78	 mov	 DWORD PTR tv493[rsp], eax
$LN73@parse_numb:
  00bc1	83 7c 24 78 2e	 cmp	 DWORD PTR tv493[rsp], 46 ; 0000002eH
  00bc6	75 0d		 jne	 SHORT $LN74@parse_numb
  00bc8	c7 84 24 a8 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv495[rsp], 1
  00bd3	eb 0b		 jmp	 SHORT $LN75@parse_numb
$LN74@parse_numb:
  00bd5	c7 84 24 a8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv495[rsp], 0
$LN75@parse_numb:
  00be0	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR has_decimal$[rsp]
  00be8	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR tv495[rsp]
  00bef	89 08		 mov	 DWORD PTR [rax], ecx

; 410  : 
; 411  :     /* Skip the decimal point. */
; 412  :     if (*has_decimal)

  00bf1	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR has_decimal$[rsp]
  00bf9	83 38 00	 cmp	 DWORD PTR [rax], 0
  00bfc	74 0d		 je	 SHORT $LN1@parse_numb

; 413  :         remainder++;

  00bfe	48 8b 44 24 20	 mov	 rax, QWORD PTR remainder$[rsp]
  00c03	48 ff c0	 inc	 rax
  00c06	48 89 44 24 20	 mov	 QWORD PTR remainder$[rsp], rax
$LN1@parse_numb:

; 414  : 
; 415  :     *n_remainder = end - remainder;

  00c0b	48 8b 44 24 20	 mov	 rax, QWORD PTR remainder$[rsp]
  00c10	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR end$[rsp]
  00c18	48 2b c8	 sub	 rcx, rax
  00c1b	48 8b c1	 mov	 rax, rcx
  00c1e	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR n_remainder$[rsp]
  00c26	48 89 01	 mov	 QWORD PTR [rcx], rax

; 416  : }

  00c29	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  00c30	c3		 ret	 0
parse_number ENDP
_TEXT	ENDS
PUBLIC	_PyFloat_FormatAdvancedWriter
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyFloat_FormatAdvancedWriter DD imagerel $LN11
	DD	imagerel $LN11+351
	DD	imagerel $unwind$_PyFloat_FormatAdvancedWriter
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyFloat_FormatAdvancedWriter DD 011801H
	DD	0e218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _PyFloat_FormatAdvancedWriter
_TEXT	SEGMENT
format$ = 48
tv76 = 96
writer$ = 128
obj$ = 136
format_spec$ = 144
start$ = 152
end$ = 160
_PyFloat_FormatAdvancedWriter PROC			; COMDAT

; 1477 : {

$LN11:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 1478 :     InternalFormatSpec format;
; 1479 : 
; 1480 :     /* check for the special case of zero length format spec, make
; 1481 :        it equivalent to str(obj) */
; 1482 :     if (start == end)

  00018	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR end$[rsp]
  00020	48 39 84 24 98
	00 00 00	 cmp	 QWORD PTR start$[rsp], rax
  00028	75 1a		 jne	 SHORT $LN6@PyFloat_Fo

; 1483 :         return format_obj(obj, writer);

  0002a	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR writer$[rsp]
  00032	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  0003a	e8 00 00 00 00	 call	 format_obj
  0003f	e9 9f 00 00 00	 jmp	 $LN7@PyFloat_Fo
$LN6@PyFloat_Fo:

; 1484 : 
; 1485 :     /* parse the format_spec */
; 1486 :     if (!parse_internal_render_format_spec(format_spec, start, end,
; 1487 :                                            &format, '\0', '>'))

  00044	c6 44 24 28 3e	 mov	 BYTE PTR [rsp+40], 62	; 0000003eH
  00049	c6 44 24 20 00	 mov	 BYTE PTR [rsp+32], 0
  0004e	4c 8d 4c 24 30	 lea	 r9, QWORD PTR format$[rsp]
  00053	4c 8b 84 24 a0
	00 00 00	 mov	 r8, QWORD PTR end$[rsp]
  0005b	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR start$[rsp]
  00063	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR format_spec$[rsp]
  0006b	e8 00 00 00 00	 call	 parse_internal_render_format_spec
  00070	85 c0		 test	 eax, eax
  00072	75 07		 jne	 SHORT $LN5@PyFloat_Fo

; 1488 :         return -1;

  00074	b8 ff ff ff ff	 mov	 eax, -1
  00079	eb 68		 jmp	 SHORT $LN7@PyFloat_Fo
$LN5@PyFloat_Fo:

; 1489 : 
; 1490 :     /* type conversion? */
; 1491 :     switch (format.type) {

  0007b	8b 44 24 58	 mov	 eax, DWORD PTR format$[rsp+40]
  0007f	89 44 24 60	 mov	 DWORD PTR tv76[rsp], eax
  00083	83 7c 24 60 6e	 cmp	 DWORD PTR tv76[rsp], 110 ; 0000006eH
  00088	77 3b		 ja	 SHORT $LN1@PyFloat_Fo
  0008a	8b 44 24 60	 mov	 eax, DWORD PTR tv76[rsp]
  0008e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  00095	0f b6 84 01 00
	00 00 00	 movzx	 eax, BYTE PTR $LN9@PyFloat_Fo[rcx+rax]
  0009d	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN10@PyFloat_Fo[rcx+rax*4]
  000a4	48 03 c1	 add	 rax, rcx
  000a7	ff e0		 jmp	 rax
$LN2@PyFloat_Fo:

; 1492 :     case '\0': /* No format code: like 'g', but with at least one decimal. */
; 1493 :     case 'e':
; 1494 :     case 'E':
; 1495 :     case 'f':
; 1496 :     case 'F':
; 1497 :     case 'g':
; 1498 :     case 'G':
; 1499 :     case 'n':
; 1500 :     case '%':
; 1501 :         /* no conversion, already a float.  do the formatting */
; 1502 :         return format_float_internal(obj, &format, writer);

  000a9	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR writer$[rsp]
  000b1	48 8d 54 24 30	 lea	 rdx, QWORD PTR format$[rsp]
  000b6	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  000be	e8 00 00 00 00	 call	 format_float_internal
  000c3	eb 1e		 jmp	 SHORT $LN7@PyFloat_Fo
$LN1@PyFloat_Fo:

; 1503 : 
; 1504 :     default:
; 1505 :         /* unknown */
; 1506 :         unknown_presentation_type(format.type, obj->ob_type->tp_name);

  000c5	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR obj$[rsp]
  000cd	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000d1	48 8b 50 70	 mov	 rdx, QWORD PTR [rax+112]
  000d5	8b 4c 24 58	 mov	 ecx, DWORD PTR format$[rsp+40]
  000d9	e8 00 00 00 00	 call	 unknown_presentation_type

; 1507 :         return -1;

  000de	b8 ff ff ff ff	 mov	 eax, -1
$LN7@PyFloat_Fo:

; 1508 :     }
; 1509 : }

  000e3	48 83 c4 78	 add	 rsp, 120		; 00000078H
  000e7	c3		 ret	 0
$LN10@PyFloat_Fo:
  000e8	00 00 00 00	 DD	 $LN2@PyFloat_Fo
  000ec	00 00 00 00	 DD	 $LN1@PyFloat_Fo
$LN9@PyFloat_Fo:
  000f0	00		 DB	 0
  000f1	01		 DB	 1
  000f2	01		 DB	 1
  000f3	01		 DB	 1
  000f4	01		 DB	 1
  000f5	01		 DB	 1
  000f6	01		 DB	 1
  000f7	01		 DB	 1
  000f8	01		 DB	 1
  000f9	01		 DB	 1
  000fa	01		 DB	 1
  000fb	01		 DB	 1
  000fc	01		 DB	 1
  000fd	01		 DB	 1
  000fe	01		 DB	 1
  000ff	01		 DB	 1
  00100	01		 DB	 1
  00101	01		 DB	 1
  00102	01		 DB	 1
  00103	01		 DB	 1
  00104	01		 DB	 1
  00105	01		 DB	 1
  00106	01		 DB	 1
  00107	01		 DB	 1
  00108	01		 DB	 1
  00109	01		 DB	 1
  0010a	01		 DB	 1
  0010b	01		 DB	 1
  0010c	01		 DB	 1
  0010d	01		 DB	 1
  0010e	01		 DB	 1
  0010f	01		 DB	 1
  00110	01		 DB	 1
  00111	01		 DB	 1
  00112	01		 DB	 1
  00113	01		 DB	 1
  00114	01		 DB	 1
  00115	00		 DB	 0
  00116	01		 DB	 1
  00117	01		 DB	 1
  00118	01		 DB	 1
  00119	01		 DB	 1
  0011a	01		 DB	 1
  0011b	01		 DB	 1
  0011c	01		 DB	 1
  0011d	01		 DB	 1
  0011e	01		 DB	 1
  0011f	01		 DB	 1
  00120	01		 DB	 1
  00121	01		 DB	 1
  00122	01		 DB	 1
  00123	01		 DB	 1
  00124	01		 DB	 1
  00125	01		 DB	 1
  00126	01		 DB	 1
  00127	01		 DB	 1
  00128	01		 DB	 1
  00129	01		 DB	 1
  0012a	01		 DB	 1
  0012b	01		 DB	 1
  0012c	01		 DB	 1
  0012d	01		 DB	 1
  0012e	01		 DB	 1
  0012f	01		 DB	 1
  00130	01		 DB	 1
  00131	01		 DB	 1
  00132	01		 DB	 1
  00133	01		 DB	 1
  00134	01		 DB	 1
  00135	00		 DB	 0
  00136	00		 DB	 0
  00137	00		 DB	 0
  00138	01		 DB	 1
  00139	01		 DB	 1
  0013a	01		 DB	 1
  0013b	01		 DB	 1
  0013c	01		 DB	 1
  0013d	01		 DB	 1
  0013e	01		 DB	 1
  0013f	01		 DB	 1
  00140	01		 DB	 1
  00141	01		 DB	 1
  00142	01		 DB	 1
  00143	01		 DB	 1
  00144	01		 DB	 1
  00145	01		 DB	 1
  00146	01		 DB	 1
  00147	01		 DB	 1
  00148	01		 DB	 1
  00149	01		 DB	 1
  0014a	01		 DB	 1
  0014b	01		 DB	 1
  0014c	01		 DB	 1
  0014d	01		 DB	 1
  0014e	01		 DB	 1
  0014f	01		 DB	 1
  00150	01		 DB	 1
  00151	01		 DB	 1
  00152	01		 DB	 1
  00153	01		 DB	 1
  00154	01		 DB	 1
  00155	00		 DB	 0
  00156	00		 DB	 0
  00157	00		 DB	 0
  00158	01		 DB	 1
  00159	01		 DB	 1
  0015a	01		 DB	 1
  0015b	01		 DB	 1
  0015c	01		 DB	 1
  0015d	01		 DB	 1
  0015e	00		 DB	 0
_PyFloat_FormatAdvancedWriter ENDP
_TEXT	ENDS
PUBLIC	_PyComplex_FormatAdvancedWriter
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyComplex_FormatAdvancedWriter DD imagerel $LN11
	DD	imagerel $LN11+351
	DD	imagerel $unwind$_PyComplex_FormatAdvancedWriter
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyComplex_FormatAdvancedWriter DD 011801H
	DD	0e218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _PyComplex_FormatAdvancedWriter
_TEXT	SEGMENT
format$ = 48
tv76 = 96
writer$ = 128
obj$ = 136
format_spec$ = 144
start$ = 152
end$ = 160
_PyComplex_FormatAdvancedWriter PROC			; COMDAT

; 1516 : {

$LN11:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 1517 :     InternalFormatSpec format;
; 1518 : 
; 1519 :     /* check for the special case of zero length format spec, make
; 1520 :        it equivalent to str(obj) */
; 1521 :     if (start == end)

  00018	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR end$[rsp]
  00020	48 39 84 24 98
	00 00 00	 cmp	 QWORD PTR start$[rsp], rax
  00028	75 1a		 jne	 SHORT $LN6@PyComplex_

; 1522 :         return format_obj(obj, writer);

  0002a	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR writer$[rsp]
  00032	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  0003a	e8 00 00 00 00	 call	 format_obj
  0003f	e9 9f 00 00 00	 jmp	 $LN7@PyComplex_
$LN6@PyComplex_:

; 1523 : 
; 1524 :     /* parse the format_spec */
; 1525 :     if (!parse_internal_render_format_spec(format_spec, start, end,
; 1526 :                                            &format, '\0', '>'))

  00044	c6 44 24 28 3e	 mov	 BYTE PTR [rsp+40], 62	; 0000003eH
  00049	c6 44 24 20 00	 mov	 BYTE PTR [rsp+32], 0
  0004e	4c 8d 4c 24 30	 lea	 r9, QWORD PTR format$[rsp]
  00053	4c 8b 84 24 a0
	00 00 00	 mov	 r8, QWORD PTR end$[rsp]
  0005b	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR start$[rsp]
  00063	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR format_spec$[rsp]
  0006b	e8 00 00 00 00	 call	 parse_internal_render_format_spec
  00070	85 c0		 test	 eax, eax
  00072	75 07		 jne	 SHORT $LN5@PyComplex_

; 1527 :         return -1;

  00074	b8 ff ff ff ff	 mov	 eax, -1
  00079	eb 68		 jmp	 SHORT $LN7@PyComplex_
$LN5@PyComplex_:

; 1528 : 
; 1529 :     /* type conversion? */
; 1530 :     switch (format.type) {

  0007b	8b 44 24 58	 mov	 eax, DWORD PTR format$[rsp+40]
  0007f	89 44 24 60	 mov	 DWORD PTR tv76[rsp], eax
  00083	83 7c 24 60 6e	 cmp	 DWORD PTR tv76[rsp], 110 ; 0000006eH
  00088	77 3b		 ja	 SHORT $LN1@PyComplex_
  0008a	8b 44 24 60	 mov	 eax, DWORD PTR tv76[rsp]
  0008e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  00095	0f b6 84 01 00
	00 00 00	 movzx	 eax, BYTE PTR $LN9@PyComplex_[rcx+rax]
  0009d	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN10@PyComplex_[rcx+rax*4]
  000a4	48 03 c1	 add	 rax, rcx
  000a7	ff e0		 jmp	 rax
$LN2@PyComplex_:

; 1531 :     case '\0': /* No format code: like 'g', but with at least one decimal. */
; 1532 :     case 'e':
; 1533 :     case 'E':
; 1534 :     case 'f':
; 1535 :     case 'F':
; 1536 :     case 'g':
; 1537 :     case 'G':
; 1538 :     case 'n':
; 1539 :         /* no conversion, already a complex.  do the formatting */
; 1540 :         return format_complex_internal(obj, &format, writer);

  000a9	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR writer$[rsp]
  000b1	48 8d 54 24 30	 lea	 rdx, QWORD PTR format$[rsp]
  000b6	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  000be	e8 00 00 00 00	 call	 format_complex_internal
  000c3	eb 1e		 jmp	 SHORT $LN7@PyComplex_
$LN1@PyComplex_:

; 1541 : 
; 1542 :     default:
; 1543 :         /* unknown */
; 1544 :         unknown_presentation_type(format.type, obj->ob_type->tp_name);

  000c5	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR obj$[rsp]
  000cd	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000d1	48 8b 50 70	 mov	 rdx, QWORD PTR [rax+112]
  000d5	8b 4c 24 58	 mov	 ecx, DWORD PTR format$[rsp+40]
  000d9	e8 00 00 00 00	 call	 unknown_presentation_type

; 1545 :         return -1;

  000de	b8 ff ff ff ff	 mov	 eax, -1
$LN7@PyComplex_:

; 1546 :     }
; 1547 : }

  000e3	48 83 c4 78	 add	 rsp, 120		; 00000078H
  000e7	c3		 ret	 0
$LN10@PyComplex_:
  000e8	00 00 00 00	 DD	 $LN2@PyComplex_
  000ec	00 00 00 00	 DD	 $LN1@PyComplex_
$LN9@PyComplex_:
  000f0	00		 DB	 0
  000f1	01		 DB	 1
  000f2	01		 DB	 1
  000f3	01		 DB	 1
  000f4	01		 DB	 1
  000f5	01		 DB	 1
  000f6	01		 DB	 1
  000f7	01		 DB	 1
  000f8	01		 DB	 1
  000f9	01		 DB	 1
  000fa	01		 DB	 1
  000fb	01		 DB	 1
  000fc	01		 DB	 1
  000fd	01		 DB	 1
  000fe	01		 DB	 1
  000ff	01		 DB	 1
  00100	01		 DB	 1
  00101	01		 DB	 1
  00102	01		 DB	 1
  00103	01		 DB	 1
  00104	01		 DB	 1
  00105	01		 DB	 1
  00106	01		 DB	 1
  00107	01		 DB	 1
  00108	01		 DB	 1
  00109	01		 DB	 1
  0010a	01		 DB	 1
  0010b	01		 DB	 1
  0010c	01		 DB	 1
  0010d	01		 DB	 1
  0010e	01		 DB	 1
  0010f	01		 DB	 1
  00110	01		 DB	 1
  00111	01		 DB	 1
  00112	01		 DB	 1
  00113	01		 DB	 1
  00114	01		 DB	 1
  00115	01		 DB	 1
  00116	01		 DB	 1
  00117	01		 DB	 1
  00118	01		 DB	 1
  00119	01		 DB	 1
  0011a	01		 DB	 1
  0011b	01		 DB	 1
  0011c	01		 DB	 1
  0011d	01		 DB	 1
  0011e	01		 DB	 1
  0011f	01		 DB	 1
  00120	01		 DB	 1
  00121	01		 DB	 1
  00122	01		 DB	 1
  00123	01		 DB	 1
  00124	01		 DB	 1
  00125	01		 DB	 1
  00126	01		 DB	 1
  00127	01		 DB	 1
  00128	01		 DB	 1
  00129	01		 DB	 1
  0012a	01		 DB	 1
  0012b	01		 DB	 1
  0012c	01		 DB	 1
  0012d	01		 DB	 1
  0012e	01		 DB	 1
  0012f	01		 DB	 1
  00130	01		 DB	 1
  00131	01		 DB	 1
  00132	01		 DB	 1
  00133	01		 DB	 1
  00134	01		 DB	 1
  00135	00		 DB	 0
  00136	00		 DB	 0
  00137	00		 DB	 0
  00138	01		 DB	 1
  00139	01		 DB	 1
  0013a	01		 DB	 1
  0013b	01		 DB	 1
  0013c	01		 DB	 1
  0013d	01		 DB	 1
  0013e	01		 DB	 1
  0013f	01		 DB	 1
  00140	01		 DB	 1
  00141	01		 DB	 1
  00142	01		 DB	 1
  00143	01		 DB	 1
  00144	01		 DB	 1
  00145	01		 DB	 1
  00146	01		 DB	 1
  00147	01		 DB	 1
  00148	01		 DB	 1
  00149	01		 DB	 1
  0014a	01		 DB	 1
  0014b	01		 DB	 1
  0014c	01		 DB	 1
  0014d	01		 DB	 1
  0014e	01		 DB	 1
  0014f	01		 DB	 1
  00150	01		 DB	 1
  00151	01		 DB	 1
  00152	01		 DB	 1
  00153	01		 DB	 1
  00154	01		 DB	 1
  00155	00		 DB	 0
  00156	00		 DB	 0
  00157	00		 DB	 0
  00158	01		 DB	 1
  00159	01		 DB	 1
  0015a	01		 DB	 1
  0015b	01		 DB	 1
  0015c	01		 DB	 1
  0015d	01		 DB	 1
  0015e	00		 DB	 0
_PyComplex_FormatAdvancedWriter ENDP
_TEXT	ENDS
PUBLIC	??_C@_1EA@KLEHHJKF@?$AA?$CI?$AAr?$AAk?$AAi?$AAn?$AAd?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AA4?$AAB?$AAY?$AAT?$AAE?$AA_?$AAK?$AAI?$AAN?$AAD?$AA?$AA@ ; `string'
PUBLIC	??_C@_1GC@CPNGLHCJ@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAi?$AAm?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_@ ; `string'
PUBLIC	??_C@_1EK@EIDNKCBB@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAi?$AAm?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAt@ ; `string'
PUBLIC	??_C@_1EE@MNPNDMMP@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAi?$AAm?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAt?$AAm?$AAp?$AA?$CJ@ ; `string'
PUBLIC	??_C@_1EG@IPCAOCGF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAi?$AAm?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAt?$AAm@ ; `string'
PUBLIC	??_C@_1EA@KPHHFLDJ@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAi?$AAm?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAt?$AAm?$AAp?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1GC@OKMMGLGJ@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAr?$AAe?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_@ ; `string'
PUBLIC	??_C@_1EK@BMHKPDEN@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAr?$AAe?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAt@ ; `string'
PUBLIC	??_C@_1EE@JJLKGNJD@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAr?$AAe?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAt?$AAm?$AAp?$AA?$CJ@ ; `string'
PUBLIC	??_C@_1EG@IAAEKOGG@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAr?$AAe?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAt?$AAm@ ; `string'
PUBLIC	??_C@_1EA@KAFDBHDK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAr?$AAe?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAt?$AAm?$AAp?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@0000000000000000
PUBLIC	??_C@_0DO@NPLLENFG@?8?$DN?8?5alignment?5flag?5is?5not?5allowe@ ; `string'
PUBLIC	??_C@_0DI@EFPDCLGP@Zero?5padding?5is?5not?5allowed?5in?5c@ ; `string'
PUBLIC	$T23662
EXTRN	__imp__copysign:PROC
EXTRN	PyComplex_ImagAsDouble:PROC
EXTRN	PyComplex_RealAsDouble:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$format_complex_internal DD imagerel format_complex_internal
	DD	imagerel format_complex_internal+6147
	DD	imagerel $unwind$format_complex_internal
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$format_complex_internal DD 041801H
	DD	0650118H
	DD	060107011H
xdata	ENDS
;	COMDAT ??_C@_1EA@KLEHHJKF@?$AA?$CI?$AAr?$AAk?$AAi?$AAn?$AAd?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AA4?$AAB?$AAY?$AAT?$AAE?$AA_?$AAK?$AAI?$AAN?$AAD?$AA?$AA@
CONST	SEGMENT
??_C@_1EA@KLEHHJKF@?$AA?$CI?$AAr?$AAk?$AAi?$AAn?$AAd?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AA4?$AAB?$AAY?$AAT?$AAE?$AA_?$AAK?$AAI?$AAN?$AAD?$AA?$AA@ DB '('
	DB	00H, 'r', 00H, 'k', 00H, 'i', 00H, 'n', 00H, 'd', 00H, ')', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'P', 00H, 'y', 00H, 'U'
	DB	00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H
	DB	'_', 00H, '4', 00H, 'B', 00H, 'Y', 00H, 'T', 00H, 'E', 00H, '_'
	DB	00H, 'K', 00H, 'I', 00H, 'N', 00H, 'D', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1GC@CPNGLHCJ@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAi?$AAm?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_@
CONST	SEGMENT
??_C@_1GC@CPNGLHCJ@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAi?$AAm?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_@ DB '('
	DB	00H, '(', 00H, 'P', 00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H
	DB	'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'O', 00H, 'b', 00H, 'j'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, '*', 00H, ')', 00H, '(', 00H
	DB	'(', 00H, 'i', 00H, 'm', 00H, '_', 00H, 'u', 00H, 'n', 00H, 'i'
	DB	00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, '_', 00H, 't', 00H
	DB	'm', 00H, 'p', 00H, ')', 00H, ')', 00H, ')', 00H, '-', 00H, '>'
	DB	00H, 'd', 00H, 'a', 00H, 't', 00H, 'a', 00H, '.', 00H, 'a', 00H
	DB	'n', 00H, 'y', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1EK@EIDNKCBB@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAi?$AAm?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAt@
CONST	SEGMENT
??_C@_1EK@EIDNKCBB@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAi?$AAm?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAt@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'I', 00H, 'S', 00H, '_', 00H, 'R'
	DB	00H, 'E', 00H, 'A', 00H, 'D', 00H, 'Y', 00H, '(', 00H, '(', 00H
	DB	'i', 00H, 'm', 00H, '_', 00H, 'u', 00H, 'n', 00H, 'i', 00H, 'c'
	DB	00H, 'o', 00H, 'd', 00H, 'e', 00H, '_', 00H, 't', 00H, 'm', 00H
	DB	'p', 00H, ')', 00H, ')', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1EE@MNPNDMMP@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAi?$AAm?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAt?$AAm?$AAp?$AA?$CJ@
CONST	SEGMENT
??_C@_1EE@MNPNDMMP@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAi?$AAm?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAt?$AAm?$AAp?$AA?$CJ@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, '(', 00H, 'i', 00H, 'm', 00H, '_', 00H
	DB	'u', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e'
	DB	00H, '_', 00H, 't', 00H, 'm', 00H, 'p', 00H, ')', 00H, ')', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1EG@IPCAOCGF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAi?$AAm?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAt?$AAm@
CONST	SEGMENT
??_C@_1EG@IPCAOCGF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAi?$AAm?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAt?$AAm@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'I', 00H, 'S', 00H, '_', 00H, 'R'
	DB	00H, 'E', 00H, 'A', 00H, 'D', 00H, 'Y', 00H, '(', 00H, 'i', 00H
	DB	'm', 00H, '_', 00H, 'u', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o'
	DB	00H, 'd', 00H, 'e', 00H, '_', 00H, 't', 00H, 'm', 00H, 'p', 00H
	DB	')', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1EA@KPHHFLDJ@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAi?$AAm?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAt?$AAm?$AAp?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1EA@KPHHFLDJ@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAi?$AAm?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAt?$AAm?$AAp?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, 'i', 00H, 'm', 00H, '_', 00H, 'u', 00H
	DB	'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, '_'
	DB	00H, 't', 00H, 'm', 00H, 'p', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1GC@OKMMGLGJ@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAr?$AAe?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_@
CONST	SEGMENT
??_C@_1GC@OKMMGLGJ@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAr?$AAe?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_@ DB '('
	DB	00H, '(', 00H, 'P', 00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H
	DB	'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'O', 00H, 'b', 00H, 'j'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, '*', 00H, ')', 00H, '(', 00H
	DB	'(', 00H, 'r', 00H, 'e', 00H, '_', 00H, 'u', 00H, 'n', 00H, 'i'
	DB	00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, '_', 00H, 't', 00H
	DB	'm', 00H, 'p', 00H, ')', 00H, ')', 00H, ')', 00H, '-', 00H, '>'
	DB	00H, 'd', 00H, 'a', 00H, 't', 00H, 'a', 00H, '.', 00H, 'a', 00H
	DB	'n', 00H, 'y', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1EK@BMHKPDEN@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAr?$AAe?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAt@
CONST	SEGMENT
??_C@_1EK@BMHKPDEN@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAr?$AAe?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAt@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'I', 00H, 'S', 00H, '_', 00H, 'R'
	DB	00H, 'E', 00H, 'A', 00H, 'D', 00H, 'Y', 00H, '(', 00H, '(', 00H
	DB	'r', 00H, 'e', 00H, '_', 00H, 'u', 00H, 'n', 00H, 'i', 00H, 'c'
	DB	00H, 'o', 00H, 'd', 00H, 'e', 00H, '_', 00H, 't', 00H, 'm', 00H
	DB	'p', 00H, ')', 00H, ')', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1EE@JJLKGNJD@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAr?$AAe?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAt?$AAm?$AAp?$AA?$CJ@
CONST	SEGMENT
??_C@_1EE@JJLKGNJD@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAr?$AAe?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAt?$AAm?$AAp?$AA?$CJ@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, '(', 00H, 'r', 00H, 'e', 00H, '_', 00H
	DB	'u', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e'
	DB	00H, '_', 00H, 't', 00H, 'm', 00H, 'p', 00H, ')', 00H, ')', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1EG@IAAEKOGG@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAr?$AAe?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAt?$AAm@
CONST	SEGMENT
??_C@_1EG@IAAEKOGG@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAr?$AAe?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAt?$AAm@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'I', 00H, 'S', 00H, '_', 00H, 'R'
	DB	00H, 'E', 00H, 'A', 00H, 'D', 00H, 'Y', 00H, '(', 00H, 'r', 00H
	DB	'e', 00H, '_', 00H, 'u', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o'
	DB	00H, 'd', 00H, 'e', 00H, '_', 00H, 't', 00H, 'm', 00H, 'p', 00H
	DB	')', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1EA@KAFDBHDK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAr?$AAe?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAt?$AAm?$AAp?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1EA@KAFDBHDK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAr?$AAe?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAt?$AAm?$AAp?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, 'r', 00H, 'e', 00H, '_', 00H, 'u', 00H
	DB	'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, '_'
	DB	00H, 't', 00H, 'm', 00H, 'p', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT ??_C@_0DO@NPLLENFG@?8?$DN?8?5alignment?5flag?5is?5not?5allowe@
CONST	SEGMENT
??_C@_0DO@NPLLENFG@?8?$DN?8?5alignment?5flag?5is?5not?5allowe@ DB '''='' '
	DB	'alignment flag is not allowed in complex format specifier', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@EFPDCLGP@Zero?5padding?5is?5not?5allowed?5in?5c@
CONST	SEGMENT
??_C@_0DI@EFPDCLGP@Zero?5padding?5is?5not?5allowed?5in?5c@ DB 'Zero paddi'
	DB	'ng is not allowed in complex format specifier', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT format_complex_internal
_TEXT	SEGMENT
im_unicode_tmp$ = 96
maxchar$ = 104
n_re_remainder$ = 112
im$ = 120
im_sign_char$ = 128
im_has_decimal$ = 132
n_re_total$ = 136
im_buf$ = 144
add_parens$ = 152
flags$ = 156
im_spec$ = 160
im_float_type$ = 256
rdata$ = 264
i_re$ = 272
type$ = 280
n_im_total$ = 288
n_im_remainder$ = 296
re_float_type$ = 304
i_im$ = 312
n_im_digits$ = 320
locale$ = 328
re_unicode_tmp$ = 352
re_has_decimal$ = 360
re_sign_char$ = 364
total$ = 368
skip_re$ = 376
rkind$ = 380
re_spec$ = 384
n_re_digits$ = 480
lpad$ = 488
re$ = 496
result$ = 504
precision$ = 508
tmp_format$ = 512
rpad$ = 560
default_precision$ = 568
re_buf$ = 576
$T23662 = 584
tv259 = 632
tv268 = 640
tv383 = 648
tv324 = 656
tv333 = 664
tv382 = 672
tv370 = 680
tv379 = 688
tv456 = 696
tv465 = 704
tv580 = 712
tv521 = 720
tv530 = 728
tv579 = 736
tv567 = 744
tv576 = 752
tv603 = 760
tv602 = 764
tv650 = 768
tv663 = 772
tv662 = 776
tv671 = 780
tv683 = 784
tv731 = 788
tv753 = 792
value$ = 832
format$ = 840
writer$ = 848
format_complex_internal PROC				; COMDAT

; 1121 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 28 03
	00 00		 sub	 rsp, 808		; 00000328H

; 1122 :     double re;
; 1123 :     double im;
; 1124 :     char *re_buf = NULL;       /* buffer returned from PyOS_double_to_string */

  00018	48 c7 84 24 40
	02 00 00 00 00
	00 00		 mov	 QWORD PTR re_buf$[rsp], 0

; 1125 :     char *im_buf = NULL;       /* buffer returned from PyOS_double_to_string */

  00024	48 c7 84 24 90
	00 00 00 00 00
	00 00		 mov	 QWORD PTR im_buf$[rsp], 0

; 1126 : 
; 1127 :     InternalFormatSpec tmp_format = *format;

  00030	48 8d 84 24 48
	02 00 00	 lea	 rax, QWORD PTR $T23662[rsp]
  00038	48 8b f8	 mov	 rdi, rax
  0003b	48 8b b4 24 48
	03 00 00	 mov	 rsi, QWORD PTR format$[rsp]
  00043	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00048	f3 a4		 rep movsb
  0004a	48 8d 84 24 00
	02 00 00	 lea	 rax, QWORD PTR tmp_format$[rsp]
  00052	48 8d 8c 24 48
	02 00 00	 lea	 rcx, QWORD PTR $T23662[rsp]
  0005a	48 8b f8	 mov	 rdi, rax
  0005d	48 8b f1	 mov	 rsi, rcx
  00060	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00065	f3 a4		 rep movsb

; 1128 :     Py_ssize_t n_re_digits;
; 1129 :     Py_ssize_t n_im_digits;
; 1130 :     Py_ssize_t n_re_remainder;
; 1131 :     Py_ssize_t n_im_remainder;
; 1132 :     Py_ssize_t n_re_total;
; 1133 :     Py_ssize_t n_im_total;
; 1134 :     int re_has_decimal;
; 1135 :     int im_has_decimal;
; 1136 :     int precision;
; 1137 :     Py_ssize_t default_precision = 6;

  00067	48 c7 84 24 38
	02 00 00 06 00
	00 00		 mov	 QWORD PTR default_precision$[rsp], 6

; 1138 :     Py_UCS4 type = format->type;

  00073	48 8b 84 24 48
	03 00 00	 mov	 rax, QWORD PTR format$[rsp]
  0007b	8b 40 28	 mov	 eax, DWORD PTR [rax+40]
  0007e	89 84 24 18 01
	00 00		 mov	 DWORD PTR type$[rsp], eax

; 1139 :     Py_ssize_t i_re;
; 1140 :     Py_ssize_t i_im;
; 1141 :     NumberFieldWidths re_spec;
; 1142 :     NumberFieldWidths im_spec;
; 1143 :     int flags = 0;

  00085	c7 84 24 9c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR flags$[rsp], 0

; 1144 :     int result = -1;

  00090	c7 84 24 f8 01
	00 00 ff ff ff
	ff		 mov	 DWORD PTR result$[rsp], -1

; 1145 :     Py_UCS4 maxchar = 127;

  0009b	c7 44 24 68 7f
	00 00 00	 mov	 DWORD PTR maxchar$[rsp], 127 ; 0000007fH

; 1146 :     enum PyUnicode_Kind rkind;
; 1147 :     void *rdata;
; 1148 :     Py_UCS4 re_sign_char = '\0';

  000a3	c7 84 24 6c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR re_sign_char$[rsp], 0

; 1149 :     Py_UCS4 im_sign_char = '\0';

  000ae	c7 84 24 80 00
	00 00 00 00 00
	00		 mov	 DWORD PTR im_sign_char$[rsp], 0

; 1150 :     int re_float_type; /* Used to see if we have a nan, inf, or regular float. */
; 1151 :     int im_float_type;
; 1152 :     int add_parens = 0;

  000b9	c7 84 24 98 00
	00 00 00 00 00
	00		 mov	 DWORD PTR add_parens$[rsp], 0

; 1153 :     int skip_re = 0;

  000c4	c7 84 24 78 01
	00 00 00 00 00
	00		 mov	 DWORD PTR skip_re$[rsp], 0

; 1154 :     Py_ssize_t lpad;
; 1155 :     Py_ssize_t rpad;
; 1156 :     Py_ssize_t total;
; 1157 :     PyObject *re_unicode_tmp = NULL;

  000cf	48 c7 84 24 60
	01 00 00 00 00
	00 00		 mov	 QWORD PTR re_unicode_tmp$[rsp], 0

; 1158 :     PyObject *im_unicode_tmp = NULL;

  000db	48 c7 44 24 60
	00 00 00 00	 mov	 QWORD PTR im_unicode_tmp$[rsp], 0

; 1159 : 
; 1160 :     /* Locale settings, either from the actual locale or
; 1161 :        from a hard-code pseudo-locale */
; 1162 :     LocaleInfo locale = STATIC_LOCALE_INFO_INIT;

  000e4	48 c7 84 24 48
	01 00 00 00 00
	00 00		 mov	 QWORD PTR locale$[rsp], 0
  000f0	48 c7 84 24 50
	01 00 00 00 00
	00 00		 mov	 QWORD PTR locale$[rsp+8], 0
  000fc	48 c7 84 24 58
	01 00 00 00 00
	00 00		 mov	 QWORD PTR locale$[rsp+16], 0

; 1163 : 
; 1164 :     if (format->precision > INT_MAX) {

  00108	48 8b 84 24 48
	03 00 00	 mov	 rax, QWORD PTR format$[rsp]
  00110	48 81 78 20 ff
	ff ff 7f	 cmp	 QWORD PTR [rax+32], 2147483647 ; 7fffffffH
  00118	7e 18		 jle	 SHORT $LN63@format_com

; 1165 :         PyErr_SetString(PyExc_ValueError, "precision too big");

  0011a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@HOPAGEML@precision?5too?5big?$AA@
  00121	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00128	e8 00 00 00 00	 call	 PyErr_SetString

; 1166 :         goto done;

  0012d	e9 63 16 00 00	 jmp	 $done$22186
$LN63@format_com:

; 1167 :     }
; 1168 :     precision = (int)format->precision;

  00132	48 8b 84 24 48
	03 00 00	 mov	 rax, QWORD PTR format$[rsp]
  0013a	8b 40 20	 mov	 eax, DWORD PTR [rax+32]
  0013d	89 84 24 fc 01
	00 00		 mov	 DWORD PTR precision$[rsp], eax

; 1169 : 
; 1170 :     /* Zero padding is not allowed. */
; 1171 :     if (format->fill_char == '0') {

  00144	48 8b 84 24 48
	03 00 00	 mov	 rax, QWORD PTR format$[rsp]
  0014c	83 38 30	 cmp	 DWORD PTR [rax], 48	; 00000030H
  0014f	75 18		 jne	 SHORT $LN62@format_com

; 1172 :         PyErr_SetString(PyExc_ValueError,
; 1173 :                         "Zero padding is not allowed in complex format "
; 1174 :                         "specifier");

  00151	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DI@EFPDCLGP@Zero?5padding?5is?5not?5allowed?5in?5c@
  00158	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0015f	e8 00 00 00 00	 call	 PyErr_SetString

; 1175 :         goto done;

  00164	e9 2c 16 00 00	 jmp	 $done$22186
$LN62@format_com:

; 1176 :     }
; 1177 : 
; 1178 :     /* Neither is '=' alignment . */
; 1179 :     if (format->align == '=') {

  00169	48 8b 84 24 48
	03 00 00	 mov	 rax, QWORD PTR format$[rsp]
  00171	83 78 04 3d	 cmp	 DWORD PTR [rax+4], 61	; 0000003dH
  00175	75 18		 jne	 SHORT $LN61@format_com

; 1180 :         PyErr_SetString(PyExc_ValueError,
; 1181 :                         "'=' alignment flag is not allowed in complex format "
; 1182 :                         "specifier");

  00177	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DO@NPLLENFG@?8?$DN?8?5alignment?5flag?5is?5not?5allowe@
  0017e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00185	e8 00 00 00 00	 call	 PyErr_SetString

; 1183 :         goto done;

  0018a	e9 06 16 00 00	 jmp	 $done$22186
$LN61@format_com:

; 1184 :     }
; 1185 : 
; 1186 :     re = PyComplex_RealAsDouble(value);

  0018f	48 8b 8c 24 40
	03 00 00	 mov	 rcx, QWORD PTR value$[rsp]
  00197	e8 00 00 00 00	 call	 PyComplex_RealAsDouble
  0019c	f2 0f 11 84 24
	f0 01 00 00	 movsdx	 QWORD PTR re$[rsp], xmm0

; 1187 :     if (re == -1.0 && PyErr_Occurred())

  001a5	f2 0f 10 84 24
	f0 01 00 00	 movsdx	 xmm0, QWORD PTR re$[rsp]
  001ae	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@bff0000000000000
  001b6	7a 11		 jp	 SHORT $LN60@format_com
  001b8	75 0f		 jne	 SHORT $LN60@format_com
  001ba	e8 00 00 00 00	 call	 PyErr_Occurred
  001bf	48 85 c0	 test	 rax, rax
  001c2	74 05		 je	 SHORT $LN60@format_com

; 1188 :         goto done;

  001c4	e9 cc 15 00 00	 jmp	 $done$22186
$LN60@format_com:

; 1189 :     im = PyComplex_ImagAsDouble(value);

  001c9	48 8b 8c 24 40
	03 00 00	 mov	 rcx, QWORD PTR value$[rsp]
  001d1	e8 00 00 00 00	 call	 PyComplex_ImagAsDouble
  001d6	f2 0f 11 44 24
	78		 movsdx	 QWORD PTR im$[rsp], xmm0

; 1190 :     if (im == -1.0 && PyErr_Occurred())

  001dc	f2 0f 10 44 24
	78		 movsdx	 xmm0, QWORD PTR im$[rsp]
  001e2	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@bff0000000000000
  001ea	7a 11		 jp	 SHORT $LN59@format_com
  001ec	75 0f		 jne	 SHORT $LN59@format_com
  001ee	e8 00 00 00 00	 call	 PyErr_Occurred
  001f3	48 85 c0	 test	 rax, rax
  001f6	74 05		 je	 SHORT $LN59@format_com

; 1191 :         goto done;

  001f8	e9 98 15 00 00	 jmp	 $done$22186
$LN59@format_com:

; 1192 : 
; 1193 :     if (format->alternate)

  001fd	48 8b 84 24 48
	03 00 00	 mov	 rax, QWORD PTR format$[rsp]
  00205	83 78 08 00	 cmp	 DWORD PTR [rax+8], 0
  00209	74 11		 je	 SHORT $LN58@format_com

; 1194 :         flags |= Py_DTSF_ALT;

  0020b	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR flags$[rsp]
  00212	83 c8 04	 or	 eax, 4
  00215	89 84 24 9c 00
	00 00		 mov	 DWORD PTR flags$[rsp], eax
$LN58@format_com:

; 1195 : 
; 1196 :     if (type == '\0') {

  0021c	83 bc 24 18 01
	00 00 00	 cmp	 DWORD PTR type$[rsp], 0
  00224	75 67		 jne	 SHORT $LN57@format_com

; 1197 :         /* Omitted type specifier. Should be like str(self). */
; 1198 :         type = 'r';

  00226	c7 84 24 18 01
	00 00 72 00 00
	00		 mov	 DWORD PTR type$[rsp], 114 ; 00000072H

; 1199 :         default_precision = 0;

  00231	48 c7 84 24 38
	02 00 00 00 00
	00 00		 mov	 QWORD PTR default_precision$[rsp], 0

; 1200 :         if (re == 0.0 && copysign(1.0, re) == 1.0)

  0023d	f2 0f 10 84 24
	f0 01 00 00	 movsdx	 xmm0, QWORD PTR re$[rsp]
  00246	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  0024e	7a 32		 jp	 SHORT $LN56@format_com
  00250	75 30		 jne	 SHORT $LN56@format_com
  00252	f2 0f 10 8c 24
	f0 01 00 00	 movsdx	 xmm1, QWORD PTR re$[rsp]
  0025b	f2 0f 10 05 00
	00 00 00	 movsdx	 xmm0, QWORD PTR __real@3ff0000000000000
  00263	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__copysign
  00269	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@3ff0000000000000
  00271	7a 0f		 jp	 SHORT $LN56@format_com
  00273	75 0d		 jne	 SHORT $LN56@format_com

; 1201 :             skip_re = 1;

  00275	c7 84 24 78 01
	00 00 01 00 00
	00		 mov	 DWORD PTR skip_re$[rsp], 1

; 1202 :         else

  00280	eb 0b		 jmp	 SHORT $LN55@format_com
$LN56@format_com:

; 1203 :             add_parens = 1;

  00282	c7 84 24 98 00
	00 00 01 00 00
	00		 mov	 DWORD PTR add_parens$[rsp], 1
$LN55@format_com:
$LN57@format_com:

; 1204 :     }
; 1205 : 
; 1206 :     if (type == 'n')

  0028d	83 bc 24 18 01
	00 00 6e	 cmp	 DWORD PTR type$[rsp], 110 ; 0000006eH
  00295	75 0b		 jne	 SHORT $LN54@format_com

; 1207 :         /* 'n' is the same as 'g', except for the locale used to
; 1208 :            format the result. We take care of that later. */
; 1209 :         type = 'g';

  00297	c7 84 24 18 01
	00 00 67 00 00
	00		 mov	 DWORD PTR type$[rsp], 103 ; 00000067H
$LN54@format_com:

; 1210 : 
; 1211 :     if (precision < 0)

  002a2	83 bc 24 fc 01
	00 00 00	 cmp	 DWORD PTR precision$[rsp], 0
  002aa	7d 10		 jge	 SHORT $LN53@format_com

; 1212 :         precision = default_precision;

  002ac	8b 84 24 38 02
	00 00		 mov	 eax, DWORD PTR default_precision$[rsp]
  002b3	89 84 24 fc 01
	00 00		 mov	 DWORD PTR precision$[rsp], eax
  002ba	eb 15		 jmp	 SHORT $LN52@format_com
$LN53@format_com:

; 1213 :     else if (type == 'r')

  002bc	83 bc 24 18 01
	00 00 72	 cmp	 DWORD PTR type$[rsp], 114 ; 00000072H
  002c4	75 0b		 jne	 SHORT $LN51@format_com

; 1214 :         type = 'g';

  002c6	c7 84 24 18 01
	00 00 67 00 00
	00		 mov	 DWORD PTR type$[rsp], 103 ; 00000067H
$LN51@format_com:
$LN52@format_com:

; 1215 : 
; 1216 :     /* Cast "type", because if we're in unicode we need to pass a
; 1217 :        8-bit char. This is safe, because we've restricted what "type"
; 1218 :        can be. */
; 1219 :     re_buf = PyOS_double_to_string(re, (char)type, precision, flags,
; 1220 :                                    &re_float_type);

  002d1	48 8d 84 24 30
	01 00 00	 lea	 rax, QWORD PTR re_float_type$[rsp]
  002d9	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  002de	44 8b 8c 24 9c
	00 00 00	 mov	 r9d, DWORD PTR flags$[rsp]
  002e6	44 8b 84 24 fc
	01 00 00	 mov	 r8d, DWORD PTR precision$[rsp]
  002ee	0f b6 94 24 18
	01 00 00	 movzx	 edx, BYTE PTR type$[rsp]
  002f6	f2 0f 10 84 24
	f0 01 00 00	 movsdx	 xmm0, QWORD PTR re$[rsp]
  002ff	e8 00 00 00 00	 call	 PyOS_double_to_string
  00304	48 89 84 24 40
	02 00 00	 mov	 QWORD PTR re_buf$[rsp], rax

; 1221 :     if (re_buf == NULL)

  0030c	48 83 bc 24 40
	02 00 00 00	 cmp	 QWORD PTR re_buf$[rsp], 0
  00315	75 05		 jne	 SHORT $LN50@format_com

; 1222 :         goto done;

  00317	e9 79 14 00 00	 jmp	 $done$22186
$LN50@format_com:

; 1223 :     im_buf = PyOS_double_to_string(im, (char)type, precision, flags,
; 1224 :                                    &im_float_type);

  0031c	48 8d 84 24 00
	01 00 00	 lea	 rax, QWORD PTR im_float_type$[rsp]
  00324	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00329	44 8b 8c 24 9c
	00 00 00	 mov	 r9d, DWORD PTR flags$[rsp]
  00331	44 8b 84 24 fc
	01 00 00	 mov	 r8d, DWORD PTR precision$[rsp]
  00339	0f b6 94 24 18
	01 00 00	 movzx	 edx, BYTE PTR type$[rsp]
  00341	f2 0f 10 44 24
	78		 movsdx	 xmm0, QWORD PTR im$[rsp]
  00347	e8 00 00 00 00	 call	 PyOS_double_to_string
  0034c	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR im_buf$[rsp], rax

; 1225 :     if (im_buf == NULL)

  00354	48 83 bc 24 90
	00 00 00 00	 cmp	 QWORD PTR im_buf$[rsp], 0
  0035d	75 05		 jne	 SHORT $LN49@format_com

; 1226 :         goto done;

  0035f	e9 31 14 00 00	 jmp	 $done$22186
$LN49@format_com:

; 1227 : 
; 1228 :     n_re_digits = strlen(re_buf);

  00364	48 8b 8c 24 40
	02 00 00	 mov	 rcx, QWORD PTR re_buf$[rsp]
  0036c	e8 00 00 00 00	 call	 strlen
  00371	48 89 84 24 e0
	01 00 00	 mov	 QWORD PTR n_re_digits$[rsp], rax

; 1229 :     n_im_digits = strlen(im_buf);

  00379	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR im_buf$[rsp]
  00381	e8 00 00 00 00	 call	 strlen
  00386	48 89 84 24 40
	01 00 00	 mov	 QWORD PTR n_im_digits$[rsp], rax

; 1230 : 
; 1231 :     /* Since there is no unicode version of PyOS_double_to_string,
; 1232 :        just use the 8 bit version and then convert to unicode. */
; 1233 :     re_unicode_tmp = _PyUnicode_FromASCII(re_buf, n_re_digits);

  0038e	48 8b 94 24 e0
	01 00 00	 mov	 rdx, QWORD PTR n_re_digits$[rsp]
  00396	48 8b 8c 24 40
	02 00 00	 mov	 rcx, QWORD PTR re_buf$[rsp]
  0039e	e8 00 00 00 00	 call	 _PyUnicode_FromASCII
  003a3	48 89 84 24 60
	01 00 00	 mov	 QWORD PTR re_unicode_tmp$[rsp], rax

; 1234 :     if (re_unicode_tmp == NULL)

  003ab	48 83 bc 24 60
	01 00 00 00	 cmp	 QWORD PTR re_unicode_tmp$[rsp], 0
  003b4	75 05		 jne	 SHORT $LN48@format_com

; 1235 :         goto done;

  003b6	e9 da 13 00 00	 jmp	 $done$22186
$LN48@format_com:

; 1236 :     i_re = 0;

  003bb	48 c7 84 24 10
	01 00 00 00 00
	00 00		 mov	 QWORD PTR i_re$[rsp], 0

; 1237 : 
; 1238 :     im_unicode_tmp = _PyUnicode_FromASCII(im_buf, n_im_digits);

  003c7	48 8b 94 24 40
	01 00 00	 mov	 rdx, QWORD PTR n_im_digits$[rsp]
  003cf	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR im_buf$[rsp]
  003d7	e8 00 00 00 00	 call	 _PyUnicode_FromASCII
  003dc	48 89 44 24 60	 mov	 QWORD PTR im_unicode_tmp$[rsp], rax

; 1239 :     if (im_unicode_tmp == NULL)

  003e1	48 83 7c 24 60
	00		 cmp	 QWORD PTR im_unicode_tmp$[rsp], 0
  003e7	75 05		 jne	 SHORT $LN47@format_com

; 1240 :         goto done;

  003e9	e9 a7 13 00 00	 jmp	 $done$22186
$LN47@format_com:

; 1241 :     i_im = 0;

  003ee	48 c7 84 24 38
	01 00 00 00 00
	00 00		 mov	 QWORD PTR i_im$[rsp], 0

; 1242 : 
; 1243 :     /* Is a sign character present in the output?  If so, remember it
; 1244 :        and skip it */
; 1245 :     if (PyUnicode_READ_CHAR(re_unicode_tmp, i_re) == '-') {

  003fa	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR re_unicode_tmp$[rsp]
  00402	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00406	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0040c	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00411	85 c0		 test	 eax, eax
  00413	75 1c		 jne	 SHORT $LN66@format_com
  00415	41 b8 dd 04 00
	00		 mov	 r8d, 1245		; 000004ddH
  0041b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00422	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EA@KAFDBHDK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAr?$AAe?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAt?$AAm?$AAp?$AA?$CJ?$AA?$AA@
  00429	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0042f	33 c0		 xor	 eax, eax
$LN66@format_com:
  00431	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR re_unicode_tmp$[rsp]
  00439	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0043c	c1 e8 07	 shr	 eax, 7
  0043f	83 e0 01	 and	 eax, 1
  00442	85 c0		 test	 eax, eax
  00444	75 1c		 jne	 SHORT $LN67@format_com
  00446	41 b8 dd 04 00
	00		 mov	 r8d, 1245		; 000004ddH
  0044c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00453	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EG@IAAEKOGG@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAr?$AAe?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAt?$AAm@
  0045a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00460	33 c0		 xor	 eax, eax
$LN67@format_com:
  00462	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR re_unicode_tmp$[rsp]
  0046a	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0046e	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00474	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00479	85 c0		 test	 eax, eax
  0047b	75 1c		 jne	 SHORT $LN68@format_com
  0047d	41 b8 dd 04 00
	00		 mov	 r8d, 1245		; 000004ddH
  00483	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  0048a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@JJLKGNJD@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAr?$AAe?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAt?$AAm?$AAp?$AA?$CJ@
  00491	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00497	33 c0		 xor	 eax, eax
$LN68@format_com:
  00499	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR re_unicode_tmp$[rsp]
  004a1	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  004a4	c1 e8 07	 shr	 eax, 7
  004a7	83 e0 01	 and	 eax, 1
  004aa	85 c0		 test	 eax, eax
  004ac	75 1c		 jne	 SHORT $LN69@format_com
  004ae	41 b8 dd 04 00
	00		 mov	 r8d, 1245		; 000004ddH
  004b4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  004bb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EK@BMHKPDEN@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAr?$AAe?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAt@
  004c2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  004c8	33 c0		 xor	 eax, eax
$LN69@format_com:
  004ca	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR re_unicode_tmp$[rsp]
  004d2	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  004d5	c1 e8 02	 shr	 eax, 2
  004d8	83 e0 07	 and	 eax, 7
  004db	83 f8 01	 cmp	 eax, 1
  004de	0f 85 77 01 00
	00		 jne	 $LN98@format_com
  004e4	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR re_unicode_tmp$[rsp]
  004ec	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  004f0	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  004f6	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  004fb	85 c0		 test	 eax, eax
  004fd	75 1c		 jne	 SHORT $LN70@format_com
  004ff	41 b8 dd 04 00
	00		 mov	 r8d, 1245		; 000004ddH
  00505	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  0050c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@JJLKGNJD@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAr?$AAe?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAt?$AAm?$AAp?$AA?$CJ@
  00513	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00519	33 c0		 xor	 eax, eax
$LN70@format_com:
  0051b	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR re_unicode_tmp$[rsp]
  00523	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00526	c1 e8 05	 shr	 eax, 5
  00529	83 e0 01	 and	 eax, 1
  0052c	85 c0		 test	 eax, eax
  0052e	0f 84 bd 00 00
	00		 je	 $LN76@format_com
  00534	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR re_unicode_tmp$[rsp]
  0053c	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00540	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00546	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0054b	85 c0		 test	 eax, eax
  0054d	75 1c		 jne	 SHORT $LN71@format_com
  0054f	41 b8 dd 04 00
	00		 mov	 r8d, 1245		; 000004ddH
  00555	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  0055c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@JJLKGNJD@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAr?$AAe?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAt?$AAm?$AAp?$AA?$CJ@
  00563	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00569	33 c0		 xor	 eax, eax
$LN71@format_com:
  0056b	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR re_unicode_tmp$[rsp]
  00573	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00576	c1 e8 07	 shr	 eax, 7
  00579	83 e0 01	 and	 eax, 1
  0057c	85 c0		 test	 eax, eax
  0057e	75 1c		 jne	 SHORT $LN72@format_com
  00580	41 b8 dd 04 00
	00		 mov	 r8d, 1245		; 000004ddH
  00586	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  0058d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EK@BMHKPDEN@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAr?$AAe?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAt@
  00594	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0059a	33 c0		 xor	 eax, eax
$LN72@format_com:
  0059c	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR re_unicode_tmp$[rsp]
  005a4	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  005a7	c1 e8 06	 shr	 eax, 6
  005aa	83 e0 01	 and	 eax, 1
  005ad	85 c0		 test	 eax, eax
  005af	74 18		 je	 SHORT $LN73@format_com
  005b1	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR re_unicode_tmp$[rsp]
  005b9	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  005bf	48 89 84 24 78
	02 00 00	 mov	 QWORD PTR tv259[rsp], rax
  005c7	eb 16		 jmp	 SHORT $LN74@format_com
$LN73@format_com:
  005c9	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR re_unicode_tmp$[rsp]
  005d1	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  005d7	48 89 84 24 78
	02 00 00	 mov	 QWORD PTR tv259[rsp], rax
$LN74@format_com:
  005df	48 8b 84 24 78
	02 00 00	 mov	 rax, QWORD PTR tv259[rsp]
  005e7	48 89 84 24 80
	02 00 00	 mov	 QWORD PTR tv268[rsp], rax
  005ef	eb 45		 jmp	 SHORT $LN77@format_com
$LN76@format_com:
  005f1	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR re_unicode_tmp$[rsp]
  005f9	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  00601	75 1c		 jne	 SHORT $LN75@format_com
  00603	41 b8 dd 04 00
	00		 mov	 r8d, 1245		; 000004ddH
  00609	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00610	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1GC@OKMMGLGJ@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAr?$AAe?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_@
  00617	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0061d	33 c0		 xor	 eax, eax
$LN75@format_com:
  0061f	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR re_unicode_tmp$[rsp]
  00627	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  0062e	48 89 84 24 80
	02 00 00	 mov	 QWORD PTR tv268[rsp], rax
$LN77@format_com:
  00636	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR i_re$[rsp]
  0063e	48 8b 8c 24 80
	02 00 00	 mov	 rcx, QWORD PTR tv268[rsp]
  00646	48 03 c8	 add	 rcx, rax
  00649	48 8b c1	 mov	 rax, rcx
  0064c	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0064f	89 84 24 88 02
	00 00		 mov	 DWORD PTR tv383[rsp], eax
  00656	e9 6e 03 00 00	 jmp	 $LN99@format_com
$LN98@format_com:
  0065b	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR re_unicode_tmp$[rsp]
  00663	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00667	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0066d	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00672	85 c0		 test	 eax, eax
  00674	75 1c		 jne	 SHORT $LN78@format_com
  00676	41 b8 dd 04 00
	00		 mov	 r8d, 1245		; 000004ddH
  0067c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00683	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@JJLKGNJD@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAr?$AAe?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAt?$AAm?$AAp?$AA?$CJ@
  0068a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00690	33 c0		 xor	 eax, eax
$LN78@format_com:
  00692	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR re_unicode_tmp$[rsp]
  0069a	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0069d	c1 e8 07	 shr	 eax, 7
  006a0	83 e0 01	 and	 eax, 1
  006a3	85 c0		 test	 eax, eax
  006a5	75 1c		 jne	 SHORT $LN79@format_com
  006a7	41 b8 dd 04 00
	00		 mov	 r8d, 1245		; 000004ddH
  006ad	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  006b4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EK@BMHKPDEN@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAr?$AAe?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAt@
  006bb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  006c1	33 c0		 xor	 eax, eax
$LN79@format_com:
  006c3	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR re_unicode_tmp$[rsp]
  006cb	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  006ce	c1 e8 02	 shr	 eax, 2
  006d1	83 e0 07	 and	 eax, 7
  006d4	83 f8 02	 cmp	 eax, 2
  006d7	0f 85 72 01 00
	00		 jne	 $LN96@format_com
  006dd	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR re_unicode_tmp$[rsp]
  006e5	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  006e9	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  006ef	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  006f4	85 c0		 test	 eax, eax
  006f6	75 1c		 jne	 SHORT $LN80@format_com
  006f8	41 b8 dd 04 00
	00		 mov	 r8d, 1245		; 000004ddH
  006fe	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00705	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@JJLKGNJD@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAr?$AAe?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAt?$AAm?$AAp?$AA?$CJ@
  0070c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00712	33 c0		 xor	 eax, eax
$LN80@format_com:
  00714	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR re_unicode_tmp$[rsp]
  0071c	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0071f	c1 e8 05	 shr	 eax, 5
  00722	83 e0 01	 and	 eax, 1
  00725	85 c0		 test	 eax, eax
  00727	0f 84 bd 00 00
	00		 je	 $LN86@format_com
  0072d	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR re_unicode_tmp$[rsp]
  00735	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00739	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0073f	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00744	85 c0		 test	 eax, eax
  00746	75 1c		 jne	 SHORT $LN81@format_com
  00748	41 b8 dd 04 00
	00		 mov	 r8d, 1245		; 000004ddH
  0074e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00755	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@JJLKGNJD@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAr?$AAe?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAt?$AAm?$AAp?$AA?$CJ@
  0075c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00762	33 c0		 xor	 eax, eax
$LN81@format_com:
  00764	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR re_unicode_tmp$[rsp]
  0076c	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0076f	c1 e8 07	 shr	 eax, 7
  00772	83 e0 01	 and	 eax, 1
  00775	85 c0		 test	 eax, eax
  00777	75 1c		 jne	 SHORT $LN82@format_com
  00779	41 b8 dd 04 00
	00		 mov	 r8d, 1245		; 000004ddH
  0077f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00786	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EK@BMHKPDEN@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAr?$AAe?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAt@
  0078d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00793	33 c0		 xor	 eax, eax
$LN82@format_com:
  00795	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR re_unicode_tmp$[rsp]
  0079d	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  007a0	c1 e8 06	 shr	 eax, 6
  007a3	83 e0 01	 and	 eax, 1
  007a6	85 c0		 test	 eax, eax
  007a8	74 18		 je	 SHORT $LN83@format_com
  007aa	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR re_unicode_tmp$[rsp]
  007b2	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  007b8	48 89 84 24 90
	02 00 00	 mov	 QWORD PTR tv324[rsp], rax
  007c0	eb 16		 jmp	 SHORT $LN84@format_com
$LN83@format_com:
  007c2	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR re_unicode_tmp$[rsp]
  007ca	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  007d0	48 89 84 24 90
	02 00 00	 mov	 QWORD PTR tv324[rsp], rax
$LN84@format_com:
  007d8	48 8b 84 24 90
	02 00 00	 mov	 rax, QWORD PTR tv324[rsp]
  007e0	48 89 84 24 98
	02 00 00	 mov	 QWORD PTR tv333[rsp], rax
  007e8	eb 45		 jmp	 SHORT $LN87@format_com
$LN86@format_com:
  007ea	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR re_unicode_tmp$[rsp]
  007f2	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  007fa	75 1c		 jne	 SHORT $LN85@format_com
  007fc	41 b8 dd 04 00
	00		 mov	 r8d, 1245		; 000004ddH
  00802	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00809	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1GC@OKMMGLGJ@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAr?$AAe?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_@
  00810	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00816	33 c0		 xor	 eax, eax
$LN85@format_com:
  00818	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR re_unicode_tmp$[rsp]
  00820	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  00827	48 89 84 24 98
	02 00 00	 mov	 QWORD PTR tv333[rsp], rax
$LN87@format_com:
  0082f	48 8b 84 24 98
	02 00 00	 mov	 rax, QWORD PTR tv333[rsp]
  00837	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR i_re$[rsp]
  0083f	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  00843	89 84 24 a0 02
	00 00		 mov	 DWORD PTR tv382[rsp], eax
  0084a	e9 6c 01 00 00	 jmp	 $LN97@format_com
$LN96@format_com:
  0084f	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR re_unicode_tmp$[rsp]
  00857	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0085b	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00861	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00866	85 c0		 test	 eax, eax
  00868	75 1c		 jne	 SHORT $LN88@format_com
  0086a	41 b8 dd 04 00
	00		 mov	 r8d, 1245		; 000004ddH
  00870	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00877	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@JJLKGNJD@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAr?$AAe?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAt?$AAm?$AAp?$AA?$CJ@
  0087e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00884	33 c0		 xor	 eax, eax
$LN88@format_com:
  00886	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR re_unicode_tmp$[rsp]
  0088e	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00891	c1 e8 05	 shr	 eax, 5
  00894	83 e0 01	 and	 eax, 1
  00897	85 c0		 test	 eax, eax
  00899	0f 84 bd 00 00
	00		 je	 $LN94@format_com
  0089f	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR re_unicode_tmp$[rsp]
  008a7	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  008ab	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  008b1	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  008b6	85 c0		 test	 eax, eax
  008b8	75 1c		 jne	 SHORT $LN89@format_com
  008ba	41 b8 dd 04 00
	00		 mov	 r8d, 1245		; 000004ddH
  008c0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  008c7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@JJLKGNJD@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAr?$AAe?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAt?$AAm?$AAp?$AA?$CJ@
  008ce	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  008d4	33 c0		 xor	 eax, eax
$LN89@format_com:
  008d6	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR re_unicode_tmp$[rsp]
  008de	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  008e1	c1 e8 07	 shr	 eax, 7
  008e4	83 e0 01	 and	 eax, 1
  008e7	85 c0		 test	 eax, eax
  008e9	75 1c		 jne	 SHORT $LN90@format_com
  008eb	41 b8 dd 04 00
	00		 mov	 r8d, 1245		; 000004ddH
  008f1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  008f8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EK@BMHKPDEN@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAr?$AAe?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAt@
  008ff	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00905	33 c0		 xor	 eax, eax
$LN90@format_com:
  00907	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR re_unicode_tmp$[rsp]
  0090f	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00912	c1 e8 06	 shr	 eax, 6
  00915	83 e0 01	 and	 eax, 1
  00918	85 c0		 test	 eax, eax
  0091a	74 18		 je	 SHORT $LN91@format_com
  0091c	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR re_unicode_tmp$[rsp]
  00924	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  0092a	48 89 84 24 a8
	02 00 00	 mov	 QWORD PTR tv370[rsp], rax
  00932	eb 16		 jmp	 SHORT $LN92@format_com
$LN91@format_com:
  00934	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR re_unicode_tmp$[rsp]
  0093c	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  00942	48 89 84 24 a8
	02 00 00	 mov	 QWORD PTR tv370[rsp], rax
$LN92@format_com:
  0094a	48 8b 84 24 a8
	02 00 00	 mov	 rax, QWORD PTR tv370[rsp]
  00952	48 89 84 24 b0
	02 00 00	 mov	 QWORD PTR tv379[rsp], rax
  0095a	eb 45		 jmp	 SHORT $LN95@format_com
$LN94@format_com:
  0095c	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR re_unicode_tmp$[rsp]
  00964	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  0096c	75 1c		 jne	 SHORT $LN93@format_com
  0096e	41 b8 dd 04 00
	00		 mov	 r8d, 1245		; 000004ddH
  00974	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  0097b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1GC@OKMMGLGJ@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAr?$AAe?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_@
  00982	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00988	33 c0		 xor	 eax, eax
$LN93@format_com:
  0098a	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR re_unicode_tmp$[rsp]
  00992	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  00999	48 89 84 24 b0
	02 00 00	 mov	 QWORD PTR tv379[rsp], rax
$LN95@format_com:
  009a1	48 8b 84 24 b0
	02 00 00	 mov	 rax, QWORD PTR tv379[rsp]
  009a9	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR i_re$[rsp]
  009b1	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  009b4	89 84 24 a0 02
	00 00		 mov	 DWORD PTR tv382[rsp], eax
$LN97@format_com:
  009bb	8b 84 24 a0 02
	00 00		 mov	 eax, DWORD PTR tv382[rsp]
  009c2	89 84 24 88 02
	00 00		 mov	 DWORD PTR tv383[rsp], eax
$LN99@format_com:
  009c9	83 bc 24 88 02
	00 00 2d	 cmp	 DWORD PTR tv383[rsp], 45 ; 0000002dH
  009d1	75 31		 jne	 SHORT $LN46@format_com

; 1246 :         re_sign_char = '-';

  009d3	c7 84 24 6c 01
	00 00 2d 00 00
	00		 mov	 DWORD PTR re_sign_char$[rsp], 45 ; 0000002dH

; 1247 :         ++i_re;

  009de	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR i_re$[rsp]
  009e6	48 ff c0	 inc	 rax
  009e9	48 89 84 24 10
	01 00 00	 mov	 QWORD PTR i_re$[rsp], rax

; 1248 :         --n_re_digits;

  009f1	48 8b 84 24 e0
	01 00 00	 mov	 rax, QWORD PTR n_re_digits$[rsp]
  009f9	48 ff c8	 dec	 rax
  009fc	48 89 84 24 e0
	01 00 00	 mov	 QWORD PTR n_re_digits$[rsp], rax
$LN46@format_com:

; 1249 :     }
; 1250 :     if (PyUnicode_READ_CHAR(im_unicode_tmp, i_im) == '-') {

  00a04	48 8b 44 24 60	 mov	 rax, QWORD PTR im_unicode_tmp$[rsp]
  00a09	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00a0d	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00a13	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00a18	85 c0		 test	 eax, eax
  00a1a	75 1c		 jne	 SHORT $LN100@format_com
  00a1c	41 b8 e2 04 00
	00		 mov	 r8d, 1250		; 000004e2H
  00a22	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00a29	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EA@KPHHFLDJ@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAi?$AAm?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAt?$AAm?$AAp?$AA?$CJ?$AA?$AA@
  00a30	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00a36	33 c0		 xor	 eax, eax
$LN100@format_com:
  00a38	48 8b 44 24 60	 mov	 rax, QWORD PTR im_unicode_tmp$[rsp]
  00a3d	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00a40	c1 e8 07	 shr	 eax, 7
  00a43	83 e0 01	 and	 eax, 1
  00a46	85 c0		 test	 eax, eax
  00a48	75 1c		 jne	 SHORT $LN101@format_com
  00a4a	41 b8 e2 04 00
	00		 mov	 r8d, 1250		; 000004e2H
  00a50	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00a57	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EG@IPCAOCGF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAi?$AAm?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAt?$AAm@
  00a5e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00a64	33 c0		 xor	 eax, eax
$LN101@format_com:
  00a66	48 8b 44 24 60	 mov	 rax, QWORD PTR im_unicode_tmp$[rsp]
  00a6b	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00a6f	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00a75	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00a7a	85 c0		 test	 eax, eax
  00a7c	75 1c		 jne	 SHORT $LN102@format_com
  00a7e	41 b8 e2 04 00
	00		 mov	 r8d, 1250		; 000004e2H
  00a84	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00a8b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@MNPNDMMP@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAi?$AAm?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAt?$AAm?$AAp?$AA?$CJ@
  00a92	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00a98	33 c0		 xor	 eax, eax
$LN102@format_com:
  00a9a	48 8b 44 24 60	 mov	 rax, QWORD PTR im_unicode_tmp$[rsp]
  00a9f	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00aa2	c1 e8 07	 shr	 eax, 7
  00aa5	83 e0 01	 and	 eax, 1
  00aa8	85 c0		 test	 eax, eax
  00aaa	75 1c		 jne	 SHORT $LN103@format_com
  00aac	41 b8 e2 04 00
	00		 mov	 r8d, 1250		; 000004e2H
  00ab2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00ab9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EK@EIDNKCBB@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAi?$AAm?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAt@
  00ac0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00ac6	33 c0		 xor	 eax, eax
$LN103@format_com:
  00ac8	48 8b 44 24 60	 mov	 rax, QWORD PTR im_unicode_tmp$[rsp]
  00acd	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00ad0	c1 e8 02	 shr	 eax, 2
  00ad3	83 e0 07	 and	 eax, 7
  00ad6	83 f8 01	 cmp	 eax, 1
  00ad9	0f 85 5c 01 00
	00		 jne	 $LN132@format_com
  00adf	48 8b 44 24 60	 mov	 rax, QWORD PTR im_unicode_tmp$[rsp]
  00ae4	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00ae8	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00aee	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00af3	85 c0		 test	 eax, eax
  00af5	75 1c		 jne	 SHORT $LN104@format_com
  00af7	41 b8 e2 04 00
	00		 mov	 r8d, 1250		; 000004e2H
  00afd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00b04	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@MNPNDMMP@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAi?$AAm?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAt?$AAm?$AAp?$AA?$CJ@
  00b0b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00b11	33 c0		 xor	 eax, eax
$LN104@format_com:
  00b13	48 8b 44 24 60	 mov	 rax, QWORD PTR im_unicode_tmp$[rsp]
  00b18	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00b1b	c1 e8 05	 shr	 eax, 5
  00b1e	83 e0 01	 and	 eax, 1
  00b21	85 c0		 test	 eax, eax
  00b23	0f 84 ae 00 00
	00		 je	 $LN110@format_com
  00b29	48 8b 44 24 60	 mov	 rax, QWORD PTR im_unicode_tmp$[rsp]
  00b2e	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00b32	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00b38	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00b3d	85 c0		 test	 eax, eax
  00b3f	75 1c		 jne	 SHORT $LN105@format_com
  00b41	41 b8 e2 04 00
	00		 mov	 r8d, 1250		; 000004e2H
  00b47	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00b4e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@MNPNDMMP@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAi?$AAm?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAt?$AAm?$AAp?$AA?$CJ@
  00b55	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00b5b	33 c0		 xor	 eax, eax
$LN105@format_com:
  00b5d	48 8b 44 24 60	 mov	 rax, QWORD PTR im_unicode_tmp$[rsp]
  00b62	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00b65	c1 e8 07	 shr	 eax, 7
  00b68	83 e0 01	 and	 eax, 1
  00b6b	85 c0		 test	 eax, eax
  00b6d	75 1c		 jne	 SHORT $LN106@format_com
  00b6f	41 b8 e2 04 00
	00		 mov	 r8d, 1250		; 000004e2H
  00b75	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00b7c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EK@EIDNKCBB@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAi?$AAm?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAt@
  00b83	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00b89	33 c0		 xor	 eax, eax
$LN106@format_com:
  00b8b	48 8b 44 24 60	 mov	 rax, QWORD PTR im_unicode_tmp$[rsp]
  00b90	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00b93	c1 e8 06	 shr	 eax, 6
  00b96	83 e0 01	 and	 eax, 1
  00b99	85 c0		 test	 eax, eax
  00b9b	74 15		 je	 SHORT $LN107@format_com
  00b9d	48 8b 44 24 60	 mov	 rax, QWORD PTR im_unicode_tmp$[rsp]
  00ba2	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  00ba8	48 89 84 24 b8
	02 00 00	 mov	 QWORD PTR tv456[rsp], rax
  00bb0	eb 13		 jmp	 SHORT $LN108@format_com
$LN107@format_com:
  00bb2	48 8b 44 24 60	 mov	 rax, QWORD PTR im_unicode_tmp$[rsp]
  00bb7	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  00bbd	48 89 84 24 b8
	02 00 00	 mov	 QWORD PTR tv456[rsp], rax
$LN108@format_com:
  00bc5	48 8b 84 24 b8
	02 00 00	 mov	 rax, QWORD PTR tv456[rsp]
  00bcd	48 89 84 24 c0
	02 00 00	 mov	 QWORD PTR tv465[rsp], rax
  00bd5	eb 3f		 jmp	 SHORT $LN111@format_com
$LN110@format_com:
  00bd7	48 8b 44 24 60	 mov	 rax, QWORD PTR im_unicode_tmp$[rsp]
  00bdc	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  00be4	75 1c		 jne	 SHORT $LN109@format_com
  00be6	41 b8 e2 04 00
	00		 mov	 r8d, 1250		; 000004e2H
  00bec	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00bf3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1GC@CPNGLHCJ@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAi?$AAm?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_@
  00bfa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00c00	33 c0		 xor	 eax, eax
$LN109@format_com:
  00c02	48 8b 44 24 60	 mov	 rax, QWORD PTR im_unicode_tmp$[rsp]
  00c07	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  00c0e	48 89 84 24 c0
	02 00 00	 mov	 QWORD PTR tv465[rsp], rax
$LN111@format_com:
  00c16	48 8b 84 24 38
	01 00 00	 mov	 rax, QWORD PTR i_im$[rsp]
  00c1e	48 8b 8c 24 c0
	02 00 00	 mov	 rcx, QWORD PTR tv465[rsp]
  00c26	48 03 c8	 add	 rcx, rax
  00c29	48 8b c1	 mov	 rax, rcx
  00c2c	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00c2f	89 84 24 c8 02
	00 00		 mov	 DWORD PTR tv580[rsp], eax
  00c36	e9 2f 03 00 00	 jmp	 $LN133@format_com
$LN132@format_com:
  00c3b	48 8b 44 24 60	 mov	 rax, QWORD PTR im_unicode_tmp$[rsp]
  00c40	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00c44	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00c4a	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00c4f	85 c0		 test	 eax, eax
  00c51	75 1c		 jne	 SHORT $LN112@format_com
  00c53	41 b8 e2 04 00
	00		 mov	 r8d, 1250		; 000004e2H
  00c59	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00c60	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@MNPNDMMP@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAi?$AAm?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAt?$AAm?$AAp?$AA?$CJ@
  00c67	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00c6d	33 c0		 xor	 eax, eax
$LN112@format_com:
  00c6f	48 8b 44 24 60	 mov	 rax, QWORD PTR im_unicode_tmp$[rsp]
  00c74	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00c77	c1 e8 07	 shr	 eax, 7
  00c7a	83 e0 01	 and	 eax, 1
  00c7d	85 c0		 test	 eax, eax
  00c7f	75 1c		 jne	 SHORT $LN113@format_com
  00c81	41 b8 e2 04 00
	00		 mov	 r8d, 1250		; 000004e2H
  00c87	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00c8e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EK@EIDNKCBB@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAi?$AAm?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAt@
  00c95	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00c9b	33 c0		 xor	 eax, eax
$LN113@format_com:
  00c9d	48 8b 44 24 60	 mov	 rax, QWORD PTR im_unicode_tmp$[rsp]
  00ca2	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00ca5	c1 e8 02	 shr	 eax, 2
  00ca8	83 e0 07	 and	 eax, 7
  00cab	83 f8 02	 cmp	 eax, 2
  00cae	0f 85 57 01 00
	00		 jne	 $LN130@format_com
  00cb4	48 8b 44 24 60	 mov	 rax, QWORD PTR im_unicode_tmp$[rsp]
  00cb9	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00cbd	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00cc3	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00cc8	85 c0		 test	 eax, eax
  00cca	75 1c		 jne	 SHORT $LN114@format_com
  00ccc	41 b8 e2 04 00
	00		 mov	 r8d, 1250		; 000004e2H
  00cd2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00cd9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@MNPNDMMP@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAi?$AAm?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAt?$AAm?$AAp?$AA?$CJ@
  00ce0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00ce6	33 c0		 xor	 eax, eax
$LN114@format_com:
  00ce8	48 8b 44 24 60	 mov	 rax, QWORD PTR im_unicode_tmp$[rsp]
  00ced	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00cf0	c1 e8 05	 shr	 eax, 5
  00cf3	83 e0 01	 and	 eax, 1
  00cf6	85 c0		 test	 eax, eax
  00cf8	0f 84 ae 00 00
	00		 je	 $LN120@format_com
  00cfe	48 8b 44 24 60	 mov	 rax, QWORD PTR im_unicode_tmp$[rsp]
  00d03	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00d07	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00d0d	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00d12	85 c0		 test	 eax, eax
  00d14	75 1c		 jne	 SHORT $LN115@format_com
  00d16	41 b8 e2 04 00
	00		 mov	 r8d, 1250		; 000004e2H
  00d1c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00d23	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@MNPNDMMP@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAi?$AAm?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAt?$AAm?$AAp?$AA?$CJ@
  00d2a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00d30	33 c0		 xor	 eax, eax
$LN115@format_com:
  00d32	48 8b 44 24 60	 mov	 rax, QWORD PTR im_unicode_tmp$[rsp]
  00d37	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00d3a	c1 e8 07	 shr	 eax, 7
  00d3d	83 e0 01	 and	 eax, 1
  00d40	85 c0		 test	 eax, eax
  00d42	75 1c		 jne	 SHORT $LN116@format_com
  00d44	41 b8 e2 04 00
	00		 mov	 r8d, 1250		; 000004e2H
  00d4a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00d51	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EK@EIDNKCBB@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAi?$AAm?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAt@
  00d58	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00d5e	33 c0		 xor	 eax, eax
$LN116@format_com:
  00d60	48 8b 44 24 60	 mov	 rax, QWORD PTR im_unicode_tmp$[rsp]
  00d65	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00d68	c1 e8 06	 shr	 eax, 6
  00d6b	83 e0 01	 and	 eax, 1
  00d6e	85 c0		 test	 eax, eax
  00d70	74 15		 je	 SHORT $LN117@format_com
  00d72	48 8b 44 24 60	 mov	 rax, QWORD PTR im_unicode_tmp$[rsp]
  00d77	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  00d7d	48 89 84 24 d0
	02 00 00	 mov	 QWORD PTR tv521[rsp], rax
  00d85	eb 13		 jmp	 SHORT $LN118@format_com
$LN117@format_com:
  00d87	48 8b 44 24 60	 mov	 rax, QWORD PTR im_unicode_tmp$[rsp]
  00d8c	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  00d92	48 89 84 24 d0
	02 00 00	 mov	 QWORD PTR tv521[rsp], rax
$LN118@format_com:
  00d9a	48 8b 84 24 d0
	02 00 00	 mov	 rax, QWORD PTR tv521[rsp]
  00da2	48 89 84 24 d8
	02 00 00	 mov	 QWORD PTR tv530[rsp], rax
  00daa	eb 3f		 jmp	 SHORT $LN121@format_com
$LN120@format_com:
  00dac	48 8b 44 24 60	 mov	 rax, QWORD PTR im_unicode_tmp$[rsp]
  00db1	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  00db9	75 1c		 jne	 SHORT $LN119@format_com
  00dbb	41 b8 e2 04 00
	00		 mov	 r8d, 1250		; 000004e2H
  00dc1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00dc8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1GC@CPNGLHCJ@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAi?$AAm?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_@
  00dcf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00dd5	33 c0		 xor	 eax, eax
$LN119@format_com:
  00dd7	48 8b 44 24 60	 mov	 rax, QWORD PTR im_unicode_tmp$[rsp]
  00ddc	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  00de3	48 89 84 24 d8
	02 00 00	 mov	 QWORD PTR tv530[rsp], rax
$LN121@format_com:
  00deb	48 8b 84 24 d8
	02 00 00	 mov	 rax, QWORD PTR tv530[rsp]
  00df3	48 8b 8c 24 38
	01 00 00	 mov	 rcx, QWORD PTR i_im$[rsp]
  00dfb	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  00dff	89 84 24 e0 02
	00 00		 mov	 DWORD PTR tv579[rsp], eax
  00e06	e9 51 01 00 00	 jmp	 $LN131@format_com
$LN130@format_com:
  00e0b	48 8b 44 24 60	 mov	 rax, QWORD PTR im_unicode_tmp$[rsp]
  00e10	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00e14	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00e1a	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00e1f	85 c0		 test	 eax, eax
  00e21	75 1c		 jne	 SHORT $LN122@format_com
  00e23	41 b8 e2 04 00
	00		 mov	 r8d, 1250		; 000004e2H
  00e29	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00e30	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@MNPNDMMP@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAi?$AAm?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAt?$AAm?$AAp?$AA?$CJ@
  00e37	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00e3d	33 c0		 xor	 eax, eax
$LN122@format_com:
  00e3f	48 8b 44 24 60	 mov	 rax, QWORD PTR im_unicode_tmp$[rsp]
  00e44	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00e47	c1 e8 05	 shr	 eax, 5
  00e4a	83 e0 01	 and	 eax, 1
  00e4d	85 c0		 test	 eax, eax
  00e4f	0f 84 ae 00 00
	00		 je	 $LN128@format_com
  00e55	48 8b 44 24 60	 mov	 rax, QWORD PTR im_unicode_tmp$[rsp]
  00e5a	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00e5e	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00e64	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00e69	85 c0		 test	 eax, eax
  00e6b	75 1c		 jne	 SHORT $LN123@format_com
  00e6d	41 b8 e2 04 00
	00		 mov	 r8d, 1250		; 000004e2H
  00e73	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00e7a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@MNPNDMMP@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AA?$CI?$AAi?$AAm?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAt?$AAm?$AAp?$AA?$CJ@
  00e81	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00e87	33 c0		 xor	 eax, eax
$LN123@format_com:
  00e89	48 8b 44 24 60	 mov	 rax, QWORD PTR im_unicode_tmp$[rsp]
  00e8e	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00e91	c1 e8 07	 shr	 eax, 7
  00e94	83 e0 01	 and	 eax, 1
  00e97	85 c0		 test	 eax, eax
  00e99	75 1c		 jne	 SHORT $LN124@format_com
  00e9b	41 b8 e2 04 00
	00		 mov	 r8d, 1250		; 000004e2H
  00ea1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00ea8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EK@EIDNKCBB@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AA?$CI?$AAi?$AAm?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAt@
  00eaf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00eb5	33 c0		 xor	 eax, eax
$LN124@format_com:
  00eb7	48 8b 44 24 60	 mov	 rax, QWORD PTR im_unicode_tmp$[rsp]
  00ebc	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00ebf	c1 e8 06	 shr	 eax, 6
  00ec2	83 e0 01	 and	 eax, 1
  00ec5	85 c0		 test	 eax, eax
  00ec7	74 15		 je	 SHORT $LN125@format_com
  00ec9	48 8b 44 24 60	 mov	 rax, QWORD PTR im_unicode_tmp$[rsp]
  00ece	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  00ed4	48 89 84 24 e8
	02 00 00	 mov	 QWORD PTR tv567[rsp], rax
  00edc	eb 13		 jmp	 SHORT $LN126@format_com
$LN125@format_com:
  00ede	48 8b 44 24 60	 mov	 rax, QWORD PTR im_unicode_tmp$[rsp]
  00ee3	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  00ee9	48 89 84 24 e8
	02 00 00	 mov	 QWORD PTR tv567[rsp], rax
$LN126@format_com:
  00ef1	48 8b 84 24 e8
	02 00 00	 mov	 rax, QWORD PTR tv567[rsp]
  00ef9	48 89 84 24 f0
	02 00 00	 mov	 QWORD PTR tv576[rsp], rax
  00f01	eb 3f		 jmp	 SHORT $LN129@format_com
$LN128@format_com:
  00f03	48 8b 44 24 60	 mov	 rax, QWORD PTR im_unicode_tmp$[rsp]
  00f08	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  00f10	75 1c		 jne	 SHORT $LN127@format_com
  00f12	41 b8 e2 04 00
	00		 mov	 r8d, 1250		; 000004e2H
  00f18	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  00f1f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1GC@CPNGLHCJ@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AA?$CI?$AAi?$AAm?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_@
  00f26	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00f2c	33 c0		 xor	 eax, eax
$LN127@format_com:
  00f2e	48 8b 44 24 60	 mov	 rax, QWORD PTR im_unicode_tmp$[rsp]
  00f33	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  00f3a	48 89 84 24 f0
	02 00 00	 mov	 QWORD PTR tv576[rsp], rax
$LN129@format_com:
  00f42	48 8b 84 24 f0
	02 00 00	 mov	 rax, QWORD PTR tv576[rsp]
  00f4a	48 8b 8c 24 38
	01 00 00	 mov	 rcx, QWORD PTR i_im$[rsp]
  00f52	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  00f55	89 84 24 e0 02
	00 00		 mov	 DWORD PTR tv579[rsp], eax
$LN131@format_com:
  00f5c	8b 84 24 e0 02
	00 00		 mov	 eax, DWORD PTR tv579[rsp]
  00f63	89 84 24 c8 02
	00 00		 mov	 DWORD PTR tv580[rsp], eax
$LN133@format_com:
  00f6a	83 bc 24 c8 02
	00 00 2d	 cmp	 DWORD PTR tv580[rsp], 45 ; 0000002dH
  00f72	75 31		 jne	 SHORT $LN45@format_com

; 1251 :         im_sign_char = '-';

  00f74	c7 84 24 80 00
	00 00 2d 00 00
	00		 mov	 DWORD PTR im_sign_char$[rsp], 45 ; 0000002dH

; 1252 :         ++i_im;

  00f7f	48 8b 84 24 38
	01 00 00	 mov	 rax, QWORD PTR i_im$[rsp]
  00f87	48 ff c0	 inc	 rax
  00f8a	48 89 84 24 38
	01 00 00	 mov	 QWORD PTR i_im$[rsp], rax

; 1253 :         --n_im_digits;

  00f92	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR n_im_digits$[rsp]
  00f9a	48 ff c8	 dec	 rax
  00f9d	48 89 84 24 40
	01 00 00	 mov	 QWORD PTR n_im_digits$[rsp], rax
$LN45@format_com:

; 1254 :     }
; 1255 : 
; 1256 :     /* Determine if we have any "remainder" (after the digits, might include
; 1257 :        decimal or exponent or both (or neither)) */
; 1258 :     parse_number(re_unicode_tmp, i_re, i_re + n_re_digits,
; 1259 :                  &n_re_remainder, &re_has_decimal);

  00fa5	48 8b 84 24 e0
	01 00 00	 mov	 rax, QWORD PTR n_re_digits$[rsp]
  00fad	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR i_re$[rsp]
  00fb5	48 03 c8	 add	 rcx, rax
  00fb8	48 8b c1	 mov	 rax, rcx
  00fbb	48 8d 8c 24 68
	01 00 00	 lea	 rcx, QWORD PTR re_has_decimal$[rsp]
  00fc3	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  00fc8	4c 8d 4c 24 70	 lea	 r9, QWORD PTR n_re_remainder$[rsp]
  00fcd	4c 8b c0	 mov	 r8, rax
  00fd0	48 8b 94 24 10
	01 00 00	 mov	 rdx, QWORD PTR i_re$[rsp]
  00fd8	48 8b 8c 24 60
	01 00 00	 mov	 rcx, QWORD PTR re_unicode_tmp$[rsp]
  00fe0	e8 00 00 00 00	 call	 parse_number

; 1260 :     parse_number(im_unicode_tmp, i_im, i_im + n_im_digits,
; 1261 :                  &n_im_remainder, &im_has_decimal);

  00fe5	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR n_im_digits$[rsp]
  00fed	48 8b 8c 24 38
	01 00 00	 mov	 rcx, QWORD PTR i_im$[rsp]
  00ff5	48 03 c8	 add	 rcx, rax
  00ff8	48 8b c1	 mov	 rax, rcx
  00ffb	48 8d 8c 24 84
	00 00 00	 lea	 rcx, QWORD PTR im_has_decimal$[rsp]
  01003	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  01008	4c 8d 8c 24 28
	01 00 00	 lea	 r9, QWORD PTR n_im_remainder$[rsp]
  01010	4c 8b c0	 mov	 r8, rax
  01013	48 8b 94 24 38
	01 00 00	 mov	 rdx, QWORD PTR i_im$[rsp]
  0101b	48 8b 4c 24 60	 mov	 rcx, QWORD PTR im_unicode_tmp$[rsp]
  01020	e8 00 00 00 00	 call	 parse_number

; 1262 : 
; 1263 :     /* Determine the grouping, separator, and decimal point, if any. */
; 1264 :     if (get_locale_info(format->type == 'n' ? LT_CURRENT_LOCALE :
; 1265 :                         (format->thousands_separators ?
; 1266 :                          LT_DEFAULT_LOCALE :
; 1267 :                          LT_NO_LOCALE),
; 1268 :                         &locale) == -1)

  01025	48 8b 84 24 48
	03 00 00	 mov	 rax, QWORD PTR format$[rsp]
  0102d	83 78 28 6e	 cmp	 DWORD PTR [rax+40], 110	; 0000006eH
  01031	75 0d		 jne	 SHORT $LN136@format_com
  01033	c7 84 24 f8 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tv603[rsp], 0
  0103e	eb 34		 jmp	 SHORT $LN137@format_com
$LN136@format_com:
  01040	48 8b 84 24 48
	03 00 00	 mov	 rax, QWORD PTR format$[rsp]
  01048	83 78 18 00	 cmp	 DWORD PTR [rax+24], 0
  0104c	74 0d		 je	 SHORT $LN134@format_com
  0104e	c7 84 24 fc 02
	00 00 01 00 00
	00		 mov	 DWORD PTR tv602[rsp], 1
  01059	eb 0b		 jmp	 SHORT $LN135@format_com
$LN134@format_com:
  0105b	c7 84 24 fc 02
	00 00 02 00 00
	00		 mov	 DWORD PTR tv602[rsp], 2
$LN135@format_com:
  01066	8b 84 24 fc 02
	00 00		 mov	 eax, DWORD PTR tv602[rsp]
  0106d	89 84 24 f8 02
	00 00		 mov	 DWORD PTR tv603[rsp], eax
$LN137@format_com:
  01074	48 8d 94 24 48
	01 00 00	 lea	 rdx, QWORD PTR locale$[rsp]
  0107c	8b 8c 24 f8 02
	00 00		 mov	 ecx, DWORD PTR tv603[rsp]
  01083	e8 00 00 00 00	 call	 get_locale_info
  01088	83 f8 ff	 cmp	 eax, -1
  0108b	75 05		 jne	 SHORT $LN44@format_com

; 1269 :         goto done;

  0108d	e9 03 07 00 00	 jmp	 $done$22186
$LN44@format_com:

; 1270 : 
; 1271 :     /* Turn off any padding. We'll do it later after we've composed
; 1272 :        the numbers without padding. */
; 1273 :     tmp_format.fill_char = '\0';

  01092	c7 84 24 00 02
	00 00 00 00 00
	00		 mov	 DWORD PTR tmp_format$[rsp], 0

; 1274 :     tmp_format.align = '<';

  0109d	c7 84 24 04 02
	00 00 3c 00 00
	00		 mov	 DWORD PTR tmp_format$[rsp+4], 60 ; 0000003cH

; 1275 :     tmp_format.width = -1;

  010a8	48 c7 84 24 10
	02 00 00 ff ff
	ff ff		 mov	 QWORD PTR tmp_format$[rsp+16], -1

; 1276 : 
; 1277 :     /* Calculate how much memory we'll need. */
; 1278 :     n_re_total = calc_number_widths(&re_spec, 0, re_sign_char, re_unicode_tmp,
; 1279 :                                     i_re, i_re + n_re_digits, n_re_remainder,
; 1280 :                                     re_has_decimal, &locale, &tmp_format,
; 1281 :                                     &maxchar);

  010b4	48 8b 84 24 e0
	01 00 00	 mov	 rax, QWORD PTR n_re_digits$[rsp]
  010bc	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR i_re$[rsp]
  010c4	48 03 c8	 add	 rcx, rax
  010c7	48 8b c1	 mov	 rax, rcx
  010ca	48 8d 4c 24 68	 lea	 rcx, QWORD PTR maxchar$[rsp]
  010cf	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  010d4	48 8d 8c 24 00
	02 00 00	 lea	 rcx, QWORD PTR tmp_format$[rsp]
  010dc	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  010e1	48 8d 8c 24 48
	01 00 00	 lea	 rcx, QWORD PTR locale$[rsp]
  010e9	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  010ee	8b 8c 24 68 01
	00 00		 mov	 ecx, DWORD PTR re_has_decimal$[rsp]
  010f5	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  010f9	48 8b 4c 24 70	 mov	 rcx, QWORD PTR n_re_remainder$[rsp]
  010fe	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  01103	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  01108	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR i_re$[rsp]
  01110	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01115	4c 8b 8c 24 60
	01 00 00	 mov	 r9, QWORD PTR re_unicode_tmp$[rsp]
  0111d	44 8b 84 24 6c
	01 00 00	 mov	 r8d, DWORD PTR re_sign_char$[rsp]
  01125	33 d2		 xor	 edx, edx
  01127	48 8d 8c 24 80
	01 00 00	 lea	 rcx, QWORD PTR re_spec$[rsp]
  0112f	e8 00 00 00 00	 call	 calc_number_widths
  01134	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR n_re_total$[rsp], rax

; 1282 : 
; 1283 :     /* Same formatting, but always include a sign, unless the real part is
; 1284 :      * going to be omitted, in which case we use whatever sign convention was
; 1285 :      * requested by the original format. */
; 1286 :     if (!skip_re)

  0113c	83 bc 24 78 01
	00 00 00	 cmp	 DWORD PTR skip_re$[rsp], 0
  01144	75 0b		 jne	 SHORT $LN43@format_com

; 1287 :         tmp_format.sign = '+';

  01146	c7 84 24 0c 02
	00 00 2b 00 00
	00		 mov	 DWORD PTR tmp_format$[rsp+12], 43 ; 0000002bH
$LN43@format_com:

; 1288 :     n_im_total = calc_number_widths(&im_spec, 0, im_sign_char, im_unicode_tmp,
; 1289 :                                     i_im, i_im + n_im_digits, n_im_remainder,
; 1290 :                                     im_has_decimal, &locale, &tmp_format,
; 1291 :                                     &maxchar);

  01151	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR n_im_digits$[rsp]
  01159	48 8b 8c 24 38
	01 00 00	 mov	 rcx, QWORD PTR i_im$[rsp]
  01161	48 03 c8	 add	 rcx, rax
  01164	48 8b c1	 mov	 rax, rcx
  01167	48 8d 4c 24 68	 lea	 rcx, QWORD PTR maxchar$[rsp]
  0116c	48 89 4c 24 50	 mov	 QWORD PTR [rsp+80], rcx
  01171	48 8d 8c 24 00
	02 00 00	 lea	 rcx, QWORD PTR tmp_format$[rsp]
  01179	48 89 4c 24 48	 mov	 QWORD PTR [rsp+72], rcx
  0117e	48 8d 8c 24 48
	01 00 00	 lea	 rcx, QWORD PTR locale$[rsp]
  01186	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0118b	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR im_has_decimal$[rsp]
  01192	89 4c 24 38	 mov	 DWORD PTR [rsp+56], ecx
  01196	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR n_im_remainder$[rsp]
  0119e	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  011a3	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  011a8	48 8b 84 24 38
	01 00 00	 mov	 rax, QWORD PTR i_im$[rsp]
  011b0	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  011b5	4c 8b 4c 24 60	 mov	 r9, QWORD PTR im_unicode_tmp$[rsp]
  011ba	44 8b 84 24 80
	00 00 00	 mov	 r8d, DWORD PTR im_sign_char$[rsp]
  011c2	33 d2		 xor	 edx, edx
  011c4	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR im_spec$[rsp]
  011cc	e8 00 00 00 00	 call	 calc_number_widths
  011d1	48 89 84 24 20
	01 00 00	 mov	 QWORD PTR n_im_total$[rsp], rax

; 1292 : 
; 1293 :     if (skip_re)

  011d9	83 bc 24 78 01
	00 00 00	 cmp	 DWORD PTR skip_re$[rsp], 0
  011e1	74 0c		 je	 SHORT $LN42@format_com

; 1294 :         n_re_total = 0;

  011e3	48 c7 84 24 88
	00 00 00 00 00
	00 00		 mov	 QWORD PTR n_re_total$[rsp], 0
$LN42@format_com:

; 1295 : 
; 1296 :     /* Add 1 for the 'j', and optionally 2 for parens. */
; 1297 :     calc_padding(n_re_total + n_im_total + 1 + add_parens * 2,
; 1298 :                  format->width, format->align, &lpad, &rpad, &total);

  011ef	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR n_im_total$[rsp]
  011f7	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR n_re_total$[rsp]
  011ff	48 03 c8	 add	 rcx, rax
  01202	48 8b c1	 mov	 rax, rcx
  01205	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR add_parens$[rsp]
  0120c	d1 e1		 shl	 ecx, 1
  0120e	48 63 c9	 movsxd	 rcx, ecx
  01211	48 8d 44 08 01	 lea	 rax, QWORD PTR [rax+rcx+1]
  01216	48 8d 8c 24 70
	01 00 00	 lea	 rcx, QWORD PTR total$[rsp]
  0121e	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  01223	48 8d 8c 24 30
	02 00 00	 lea	 rcx, QWORD PTR rpad$[rsp]
  0122b	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  01230	4c 8d 8c 24 e8
	01 00 00	 lea	 r9, QWORD PTR lpad$[rsp]
  01238	48 8b 8c 24 48
	03 00 00	 mov	 rcx, QWORD PTR format$[rsp]
  01240	44 8b 41 04	 mov	 r8d, DWORD PTR [rcx+4]
  01244	48 8b 8c 24 48
	03 00 00	 mov	 rcx, QWORD PTR format$[rsp]
  0124c	48 8b 51 10	 mov	 rdx, QWORD PTR [rcx+16]
  01250	48 8b c8	 mov	 rcx, rax
  01253	e8 00 00 00 00	 call	 calc_padding

; 1299 : 
; 1300 :     if (lpad || rpad)

  01258	48 83 bc 24 e8
	01 00 00 00	 cmp	 QWORD PTR lpad$[rsp], 0
  01261	75 0b		 jne	 SHORT $LN40@format_com
  01263	48 83 bc 24 30
	02 00 00 00	 cmp	 QWORD PTR rpad$[rsp], 0
  0126c	74 39		 je	 SHORT $LN41@format_com
$LN40@format_com:

; 1301 :         maxchar = Py_MAX(maxchar, format->fill_char);

  0126e	48 8b 84 24 48
	03 00 00	 mov	 rax, QWORD PTR format$[rsp]
  01276	8b 00		 mov	 eax, DWORD PTR [rax]
  01278	39 44 24 68	 cmp	 DWORD PTR maxchar$[rsp], eax
  0127c	76 0d		 jbe	 SHORT $LN138@format_com
  0127e	8b 44 24 68	 mov	 eax, DWORD PTR maxchar$[rsp]
  01282	89 84 24 00 03
	00 00		 mov	 DWORD PTR tv650[rsp], eax
  01289	eb 11		 jmp	 SHORT $LN139@format_com
$LN138@format_com:
  0128b	48 8b 84 24 48
	03 00 00	 mov	 rax, QWORD PTR format$[rsp]
  01293	8b 00		 mov	 eax, DWORD PTR [rax]
  01295	89 84 24 00 03
	00 00		 mov	 DWORD PTR tv650[rsp], eax
$LN139@format_com:
  0129c	8b 84 24 00 03
	00 00		 mov	 eax, DWORD PTR tv650[rsp]
  012a3	89 44 24 68	 mov	 DWORD PTR maxchar$[rsp], eax
$LN41@format_com:

; 1302 : 
; 1303 :     if (_PyUnicodeWriter_Prepare(writer, total, maxchar) == -1)

  012a7	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR writer$[rsp]
  012af	8b 40 14	 mov	 eax, DWORD PTR [rax+20]
  012b2	39 44 24 68	 cmp	 DWORD PTR maxchar$[rsp], eax
  012b6	77 32		 ja	 SHORT $LN140@format_com
  012b8	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR writer$[rsp]
  012c0	48 8b 8c 24 50
	03 00 00	 mov	 rcx, QWORD PTR writer$[rsp]
  012c8	48 8b 49 20	 mov	 rcx, QWORD PTR [rcx+32]
  012cc	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  012d0	48 2b c1	 sub	 rax, rcx
  012d3	48 39 84 24 70
	01 00 00	 cmp	 QWORD PTR total$[rsp], rax
  012db	7f 0d		 jg	 SHORT $LN140@format_com
  012dd	c7 84 24 04 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv663[rsp], 0
  012e8	eb 47		 jmp	 SHORT $LN143@format_com
$LN140@format_com:
  012ea	48 83 bc 24 70
	01 00 00 00	 cmp	 QWORD PTR total$[rsp], 0
  012f3	75 0d		 jne	 SHORT $LN141@format_com
  012f5	c7 84 24 08 03
	00 00 00 00 00
	00		 mov	 DWORD PTR tv662[rsp], 0
  01300	eb 21		 jmp	 SHORT $LN142@format_com
$LN141@format_com:
  01302	44 8b 44 24 68	 mov	 r8d, DWORD PTR maxchar$[rsp]
  01307	48 8b 94 24 70
	01 00 00	 mov	 rdx, QWORD PTR total$[rsp]
  0130f	48 8b 8c 24 50
	03 00 00	 mov	 rcx, QWORD PTR writer$[rsp]
  01317	e8 00 00 00 00	 call	 _PyUnicodeWriter_PrepareInternal
  0131c	89 84 24 08 03
	00 00		 mov	 DWORD PTR tv662[rsp], eax
$LN142@format_com:
  01323	8b 84 24 08 03
	00 00		 mov	 eax, DWORD PTR tv662[rsp]
  0132a	89 84 24 04 03
	00 00		 mov	 DWORD PTR tv663[rsp], eax
$LN143@format_com:
  01331	83 bc 24 04 03
	00 00 ff	 cmp	 DWORD PTR tv663[rsp], -1
  01339	75 05		 jne	 SHORT $LN39@format_com

; 1304 :         goto done;

  0133b	e9 55 04 00 00	 jmp	 $done$22186
$LN39@format_com:

; 1305 :     rkind = writer->kind;

  01340	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR writer$[rsp]
  01348	8b 40 10	 mov	 eax, DWORD PTR [rax+16]
  0134b	89 84 24 7c 01
	00 00		 mov	 DWORD PTR rkind$[rsp], eax

; 1306 :     rdata = writer->data;

  01352	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR writer$[rsp]
  0135a	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0135e	48 89 84 24 08
	01 00 00	 mov	 QWORD PTR rdata$[rsp], rax

; 1307 : 
; 1308 :     /* Populate the memory. First, the padding. */
; 1309 :     result = fill_padding(writer,
; 1310 :                           n_re_total + n_im_total + 1 + add_parens * 2,
; 1311 :                           format->fill_char=='\0' ? ' ' : format->fill_char,
; 1312 :                           lpad, rpad);

  01366	48 8b 84 24 48
	03 00 00	 mov	 rax, QWORD PTR format$[rsp]
  0136e	83 38 00	 cmp	 DWORD PTR [rax], 0
  01371	75 0d		 jne	 SHORT $LN144@format_com
  01373	c7 84 24 0c 03
	00 00 20 00 00
	00		 mov	 DWORD PTR tv671[rsp], 32 ; 00000020H
  0137e	eb 11		 jmp	 SHORT $LN145@format_com
$LN144@format_com:
  01380	48 8b 84 24 48
	03 00 00	 mov	 rax, QWORD PTR format$[rsp]
  01388	8b 00		 mov	 eax, DWORD PTR [rax]
  0138a	89 84 24 0c 03
	00 00		 mov	 DWORD PTR tv671[rsp], eax
$LN145@format_com:
  01391	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR n_im_total$[rsp]
  01399	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR n_re_total$[rsp]
  013a1	48 03 c8	 add	 rcx, rax
  013a4	48 8b c1	 mov	 rax, rcx
  013a7	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR add_parens$[rsp]
  013ae	d1 e1		 shl	 ecx, 1
  013b0	48 63 c9	 movsxd	 rcx, ecx
  013b3	48 8d 44 08 01	 lea	 rax, QWORD PTR [rax+rcx+1]
  013b8	48 8b 8c 24 30
	02 00 00	 mov	 rcx, QWORD PTR rpad$[rsp]
  013c0	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  013c5	4c 8b 8c 24 e8
	01 00 00	 mov	 r9, QWORD PTR lpad$[rsp]
  013cd	44 8b 84 24 0c
	03 00 00	 mov	 r8d, DWORD PTR tv671[rsp]
  013d5	48 8b d0	 mov	 rdx, rax
  013d8	48 8b 8c 24 50
	03 00 00	 mov	 rcx, QWORD PTR writer$[rsp]
  013e0	e8 00 00 00 00	 call	 fill_padding
  013e5	89 84 24 f8 01
	00 00		 mov	 DWORD PTR result$[rsp], eax

; 1313 :     if (result == -1)

  013ec	83 bc 24 f8 01
	00 00 ff	 cmp	 DWORD PTR result$[rsp], -1
  013f4	75 05		 jne	 SHORT $LN38@format_com

; 1314 :         goto done;

  013f6	e9 9a 03 00 00	 jmp	 $done$22186
$LN38@format_com:

; 1315 : 
; 1316 :     if (add_parens) {

  013fb	83 bc 24 98 00
	00 00 00	 cmp	 DWORD PTR add_parens$[rsp], 0
  01403	0f 84 c3 00 00
	00		 je	 $LN37@format_com
$LN36@format_com:

; 1317 :         PyUnicode_WRITE(rkind, rdata, writer->pos, '(');

  01409	8b 84 24 7c 01
	00 00		 mov	 eax, DWORD PTR rkind$[rsp]
  01410	89 84 24 10 03
	00 00		 mov	 DWORD PTR tv683[rsp], eax
  01417	83 bc 24 10 03
	00 00 01	 cmp	 DWORD PTR tv683[rsp], 1
  0141f	74 0c		 je	 SHORT $LN31@format_com
  01421	83 bc 24 10 03
	00 00 02	 cmp	 DWORD PTR tv683[rsp], 2
  01429	74 1c		 je	 SHORT $LN30@format_com
  0142b	eb 39		 jmp	 SHORT $LN29@format_com
$LN31@format_com:
  0142d	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR writer$[rsp]
  01435	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  01439	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR rdata$[rsp]
  01441	c6 04 01 28	 mov	 BYTE PTR [rcx+rax], 40	; 00000028H
  01445	eb 60		 jmp	 SHORT $LN32@format_com
$LN30@format_com:
  01447	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR writer$[rsp]
  0144f	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  01453	b9 28 00 00 00	 mov	 ecx, 40			; 00000028H
  01458	48 8b 94 24 08
	01 00 00	 mov	 rdx, QWORD PTR rdata$[rsp]
  01460	66 89 0c 42	 mov	 WORD PTR [rdx+rax*2], cx
  01464	eb 41		 jmp	 SHORT $LN32@format_com
$LN29@format_com:
  01466	83 bc 24 7c 01
	00 00 04	 cmp	 DWORD PTR rkind$[rsp], 4
  0146e	74 1c		 je	 SHORT $LN146@format_com
  01470	41 b8 25 05 00
	00		 mov	 r8d, 1317		; 00000525H
  01476	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  0147d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EA@KLEHHJKF@?$AA?$CI?$AAr?$AAk?$AAi?$AAn?$AAd?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AA4?$AAB?$AAY?$AAT?$AAE?$AA_?$AAK?$AAI?$AAN?$AAD?$AA?$AA@
  01484	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0148a	33 c0		 xor	 eax, eax
$LN146@format_com:
  0148c	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR writer$[rsp]
  01494	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  01498	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR rdata$[rsp]
  014a0	c7 04 81 28 00
	00 00		 mov	 DWORD PTR [rcx+rax*4], 40 ; 00000028H
$LN32@format_com:
  014a7	33 c0		 xor	 eax, eax
  014a9	85 c0		 test	 eax, eax
  014ab	0f 85 58 ff ff
	ff		 jne	 $LN36@format_com

; 1318 :         writer->pos++;

  014b1	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR writer$[rsp]
  014b9	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  014bd	48 ff c0	 inc	 rax
  014c0	48 8b 8c 24 50
	03 00 00	 mov	 rcx, QWORD PTR writer$[rsp]
  014c8	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax
$LN37@format_com:

; 1319 :     }
; 1320 : 
; 1321 :     if (!skip_re) {

  014cc	83 bc 24 78 01
	00 00 00	 cmp	 DWORD PTR skip_re$[rsp], 0
  014d4	0f 85 85 00 00
	00		 jne	 $LN28@format_com

; 1322 :         result = fill_number(writer, &re_spec,
; 1323 :                              re_unicode_tmp, i_re, i_re + n_re_digits,
; 1324 :                              NULL, 0,
; 1325 :                              0,
; 1326 :                              &locale, 0);

  014da	48 8b 84 24 e0
	01 00 00	 mov	 rax, QWORD PTR n_re_digits$[rsp]
  014e2	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR i_re$[rsp]
  014ea	48 03 c8	 add	 rcx, rax
  014ed	48 8b c1	 mov	 rax, rcx
  014f0	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR [rsp+72], 0
  014f8	48 8d 8c 24 48
	01 00 00	 lea	 rcx, QWORD PTR locale$[rsp]
  01500	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  01505	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR [rsp+56], 0
  0150d	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR [rsp+48], 0
  01516	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR [rsp+40], 0
  0151f	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  01524	4c 8b 8c 24 10
	01 00 00	 mov	 r9, QWORD PTR i_re$[rsp]
  0152c	4c 8b 84 24 60
	01 00 00	 mov	 r8, QWORD PTR re_unicode_tmp$[rsp]
  01534	48 8d 94 24 80
	01 00 00	 lea	 rdx, QWORD PTR re_spec$[rsp]
  0153c	48 8b 8c 24 50
	03 00 00	 mov	 rcx, QWORD PTR writer$[rsp]
  01544	e8 00 00 00 00	 call	 fill_number
  01549	89 84 24 f8 01
	00 00		 mov	 DWORD PTR result$[rsp], eax

; 1327 :         if (result == -1)

  01550	83 bc 24 f8 01
	00 00 ff	 cmp	 DWORD PTR result$[rsp], -1
  01558	75 05		 jne	 SHORT $LN27@format_com

; 1328 :             goto done;

  0155a	e9 36 02 00 00	 jmp	 $done$22186
$LN27@format_com:
$LN28@format_com:

; 1329 :     }
; 1330 :     result = fill_number(writer, &im_spec,
; 1331 :                          im_unicode_tmp, i_im, i_im + n_im_digits,
; 1332 :                          NULL, 0,
; 1333 :                          0,
; 1334 :                          &locale, 0);

  0155f	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR n_im_digits$[rsp]
  01567	48 8b 8c 24 38
	01 00 00	 mov	 rcx, QWORD PTR i_im$[rsp]
  0156f	48 03 c8	 add	 rcx, rax
  01572	48 8b c1	 mov	 rax, rcx
  01575	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR [rsp+72], 0
  0157d	48 8d 8c 24 48
	01 00 00	 lea	 rcx, QWORD PTR locale$[rsp]
  01585	48 89 4c 24 40	 mov	 QWORD PTR [rsp+64], rcx
  0158a	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR [rsp+56], 0
  01592	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR [rsp+48], 0
  0159b	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR [rsp+40], 0
  015a4	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  015a9	4c 8b 8c 24 38
	01 00 00	 mov	 r9, QWORD PTR i_im$[rsp]
  015b1	4c 8b 44 24 60	 mov	 r8, QWORD PTR im_unicode_tmp$[rsp]
  015b6	48 8d 94 24 a0
	00 00 00	 lea	 rdx, QWORD PTR im_spec$[rsp]
  015be	48 8b 8c 24 50
	03 00 00	 mov	 rcx, QWORD PTR writer$[rsp]
  015c6	e8 00 00 00 00	 call	 fill_number
  015cb	89 84 24 f8 01
	00 00		 mov	 DWORD PTR result$[rsp], eax

; 1335 :     if (result == -1)

  015d2	83 bc 24 f8 01
	00 00 ff	 cmp	 DWORD PTR result$[rsp], -1
  015da	75 05		 jne	 SHORT $LN26@format_com

; 1336 :         goto done;

  015dc	e9 b4 01 00 00	 jmp	 $done$22186
$LN26@format_com:
$LN25@format_com:

; 1337 :     PyUnicode_WRITE(rkind, rdata, writer->pos, 'j');

  015e1	8b 84 24 7c 01
	00 00		 mov	 eax, DWORD PTR rkind$[rsp]
  015e8	89 84 24 14 03
	00 00		 mov	 DWORD PTR tv731[rsp], eax
  015ef	83 bc 24 14 03
	00 00 01	 cmp	 DWORD PTR tv731[rsp], 1
  015f7	74 0c		 je	 SHORT $LN20@format_com
  015f9	83 bc 24 14 03
	00 00 02	 cmp	 DWORD PTR tv731[rsp], 2
  01601	74 1c		 je	 SHORT $LN19@format_com
  01603	eb 39		 jmp	 SHORT $LN18@format_com
$LN20@format_com:
  01605	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR writer$[rsp]
  0160d	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  01611	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR rdata$[rsp]
  01619	c6 04 01 6a	 mov	 BYTE PTR [rcx+rax], 106	; 0000006aH
  0161d	eb 60		 jmp	 SHORT $LN21@format_com
$LN19@format_com:
  0161f	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR writer$[rsp]
  01627	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0162b	b9 6a 00 00 00	 mov	 ecx, 106		; 0000006aH
  01630	48 8b 94 24 08
	01 00 00	 mov	 rdx, QWORD PTR rdata$[rsp]
  01638	66 89 0c 42	 mov	 WORD PTR [rdx+rax*2], cx
  0163c	eb 41		 jmp	 SHORT $LN21@format_com
$LN18@format_com:
  0163e	83 bc 24 7c 01
	00 00 04	 cmp	 DWORD PTR rkind$[rsp], 4
  01646	74 1c		 je	 SHORT $LN147@format_com
  01648	41 b8 39 05 00
	00		 mov	 r8d, 1337		; 00000539H
  0164e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  01655	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EA@KLEHHJKF@?$AA?$CI?$AAr?$AAk?$AAi?$AAn?$AAd?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AA4?$AAB?$AAY?$AAT?$AAE?$AA_?$AAK?$AAI?$AAN?$AAD?$AA?$AA@
  0165c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  01662	33 c0		 xor	 eax, eax
$LN147@format_com:
  01664	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR writer$[rsp]
  0166c	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  01670	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR rdata$[rsp]
  01678	c7 04 81 6a 00
	00 00		 mov	 DWORD PTR [rcx+rax*4], 106 ; 0000006aH
$LN21@format_com:
  0167f	33 c0		 xor	 eax, eax
  01681	85 c0		 test	 eax, eax
  01683	0f 85 58 ff ff
	ff		 jne	 $LN25@format_com

; 1338 :     writer->pos++;

  01689	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR writer$[rsp]
  01691	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  01695	48 ff c0	 inc	 rax
  01698	48 8b 8c 24 50
	03 00 00	 mov	 rcx, QWORD PTR writer$[rsp]
  016a0	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax

; 1339 : 
; 1340 :     if (add_parens) {

  016a4	83 bc 24 98 00
	00 00 00	 cmp	 DWORD PTR add_parens$[rsp], 0
  016ac	0f 84 c3 00 00
	00		 je	 $LN17@format_com
$LN16@format_com:

; 1341 :         PyUnicode_WRITE(rkind, rdata, writer->pos, ')');

  016b2	8b 84 24 7c 01
	00 00		 mov	 eax, DWORD PTR rkind$[rsp]
  016b9	89 84 24 18 03
	00 00		 mov	 DWORD PTR tv753[rsp], eax
  016c0	83 bc 24 18 03
	00 00 01	 cmp	 DWORD PTR tv753[rsp], 1
  016c8	74 0c		 je	 SHORT $LN11@format_com
  016ca	83 bc 24 18 03
	00 00 02	 cmp	 DWORD PTR tv753[rsp], 2
  016d2	74 1c		 je	 SHORT $LN10@format_com
  016d4	eb 39		 jmp	 SHORT $LN9@format_com
$LN11@format_com:
  016d6	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR writer$[rsp]
  016de	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  016e2	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR rdata$[rsp]
  016ea	c6 04 01 29	 mov	 BYTE PTR [rcx+rax], 41	; 00000029H
  016ee	eb 60		 jmp	 SHORT $LN12@format_com
$LN10@format_com:
  016f0	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR writer$[rsp]
  016f8	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  016fc	b9 29 00 00 00	 mov	 ecx, 41			; 00000029H
  01701	48 8b 94 24 08
	01 00 00	 mov	 rdx, QWORD PTR rdata$[rsp]
  01709	66 89 0c 42	 mov	 WORD PTR [rdx+rax*2], cx
  0170d	eb 41		 jmp	 SHORT $LN12@format_com
$LN9@format_com:
  0170f	83 bc 24 7c 01
	00 00 04	 cmp	 DWORD PTR rkind$[rsp], 4
  01717	74 1c		 je	 SHORT $LN148@format_com
  01719	41 b8 3d 05 00
	00		 mov	 r8d, 1341		; 0000053dH
  0171f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@CHLBDOHP@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAf?$AAo?$AAr?$AAm?$AAa?$AAt?$AAt?$AAe?$AAr?$AA_?$AAu?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA?4?$AAc?$AA?$AA@
  01726	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EA@KLEHHJKF@?$AA?$CI?$AAr?$AAk?$AAi?$AAn?$AAd?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AA4?$AAB?$AAY?$AAT?$AAE?$AA_?$AAK?$AAI?$AAN?$AAD?$AA?$AA@
  0172d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  01733	33 c0		 xor	 eax, eax
$LN148@format_com:
  01735	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR writer$[rsp]
  0173d	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  01741	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR rdata$[rsp]
  01749	c7 04 81 29 00
	00 00		 mov	 DWORD PTR [rcx+rax*4], 41 ; 00000029H
$LN12@format_com:
  01750	33 c0		 xor	 eax, eax
  01752	85 c0		 test	 eax, eax
  01754	0f 85 58 ff ff
	ff		 jne	 $LN16@format_com

; 1342 :         writer->pos++;

  0175a	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR writer$[rsp]
  01762	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  01766	48 ff c0	 inc	 rax
  01769	48 8b 8c 24 50
	03 00 00	 mov	 rcx, QWORD PTR writer$[rsp]
  01771	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax
$LN17@format_com:

; 1343 :     }
; 1344 : 
; 1345 :     writer->pos += rpad;

  01775	48 8b 84 24 50
	03 00 00	 mov	 rax, QWORD PTR writer$[rsp]
  0177d	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  01781	48 03 84 24 30
	02 00 00	 add	 rax, QWORD PTR rpad$[rsp]
  01789	48 8b 8c 24 50
	03 00 00	 mov	 rcx, QWORD PTR writer$[rsp]
  01791	48 89 41 20	 mov	 QWORD PTR [rcx+32], rax
$done$22186:

; 1346 : 
; 1347 : done:
; 1348 :     PyMem_Free(re_buf);

  01795	48 8b 8c 24 40
	02 00 00	 mov	 rcx, QWORD PTR re_buf$[rsp]
  0179d	e8 00 00 00 00	 call	 PyMem_Free

; 1349 :     PyMem_Free(im_buf);

  017a2	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR im_buf$[rsp]
  017aa	e8 00 00 00 00	 call	 PyMem_Free
$LN8@format_com:

; 1350 :     Py_XDECREF(re_unicode_tmp);

  017af	48 83 bc 24 60
	01 00 00 00	 cmp	 QWORD PTR re_unicode_tmp$[rsp], 0
  017b8	74 0d		 je	 SHORT $LN5@format_com
  017ba	48 8b 8c 24 60
	01 00 00	 mov	 rcx, QWORD PTR re_unicode_tmp$[rsp]
  017c2	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@format_com:
  017c7	33 c0		 xor	 eax, eax
  017c9	85 c0		 test	 eax, eax
  017cb	75 e2		 jne	 SHORT $LN8@format_com
$LN4@format_com:

; 1351 :     Py_XDECREF(im_unicode_tmp);

  017cd	48 83 7c 24 60
	00		 cmp	 QWORD PTR im_unicode_tmp$[rsp], 0
  017d3	74 0a		 je	 SHORT $LN1@format_com
  017d5	48 8b 4c 24 60	 mov	 rcx, QWORD PTR im_unicode_tmp$[rsp]
  017da	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@format_com:
  017df	33 c0		 xor	 eax, eax
  017e1	85 c0		 test	 eax, eax
  017e3	75 e8		 jne	 SHORT $LN4@format_com

; 1352 :     free_locale_info(&locale);

  017e5	48 8d 8c 24 48
	01 00 00	 lea	 rcx, QWORD PTR locale$[rsp]
  017ed	e8 00 00 00 00	 call	 free_locale_info

; 1353 :     return result;

  017f2	8b 84 24 f8 01
	00 00		 mov	 eax, DWORD PTR result$[rsp]

; 1354 : }

  017f9	48 81 c4 28 03
	00 00		 add	 rsp, 808		; 00000328H
  01800	5f		 pop	 rdi
  01801	5e		 pop	 rsi
  01802	c3		 ret	 0
format_complex_internal ENDP
_TEXT	ENDS
END
