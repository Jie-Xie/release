; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	PyOS_mystrnicmp
EXTRN	__imp_tolower:PROC
;	COMDAT pdata
; File c:\src\pyparallel\python\pystrcmp.c
pdata	SEGMENT
$pdata$PyOS_mystrnicmp DD imagerel $LN8
	DD	imagerel $LN8+198
	DD	imagerel $unwind$PyOS_mystrnicmp
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyOS_mystrnicmp DD 011301H
	DD	06213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyOS_mystrnicmp
_TEXT	SEGMENT
tv67 = 32
tv80 = 36
s1$ = 64
s2$ = 72
size$ = 80
PyOS_mystrnicmp PROC					; COMDAT

; 8    : {

$LN8:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 9    :     if (size == 0)

  00013	48 83 7c 24 50
	00		 cmp	 QWORD PTR size$[rsp], 0
  00019	75 07		 jne	 SHORT $LN5@PyOS_mystr

; 10   :         return 0;

  0001b	33 c0		 xor	 eax, eax
  0001d	e9 9f 00 00 00	 jmp	 $LN6@PyOS_mystr
$LN5@PyOS_mystr:
$LN4@PyOS_mystr:

; 11   :     while ((--size > 0) &&
; 12   :            (tolower((unsigned)*s1) == tolower((unsigned)*s2))) {

  00022	48 8b 44 24 50	 mov	 rax, QWORD PTR size$[rsp]
  00027	48 ff c8	 dec	 rax
  0002a	48 89 44 24 50	 mov	 QWORD PTR size$[rsp], rax
  0002f	48 83 7c 24 50
	00		 cmp	 QWORD PTR size$[rsp], 0
  00035	7e 60		 jle	 SHORT $LN3@PyOS_mystr
  00037	48 8b 44 24 40	 mov	 rax, QWORD PTR s1$[rsp]
  0003c	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0003f	8b c8		 mov	 ecx, eax
  00041	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_tolower
  00047	89 44 24 20	 mov	 DWORD PTR tv67[rsp], eax
  0004b	48 8b 4c 24 48	 mov	 rcx, QWORD PTR s2$[rsp]
  00050	0f be 09	 movsx	 ecx, BYTE PTR [rcx]
  00053	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_tolower
  00059	8b 4c 24 20	 mov	 ecx, DWORD PTR tv67[rsp]
  0005d	3b c8		 cmp	 ecx, eax
  0005f	75 36		 jne	 SHORT $LN3@PyOS_mystr

; 13   :         if (!*s1++ || !*s2++)

  00061	48 8b 44 24 40	 mov	 rax, QWORD PTR s1$[rsp]
  00066	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00069	48 8b 4c 24 40	 mov	 rcx, QWORD PTR s1$[rsp]
  0006e	48 ff c1	 inc	 rcx
  00071	48 89 4c 24 40	 mov	 QWORD PTR s1$[rsp], rcx
  00076	85 c0		 test	 eax, eax
  00078	74 19		 je	 SHORT $LN1@PyOS_mystr
  0007a	48 8b 44 24 48	 mov	 rax, QWORD PTR s2$[rsp]
  0007f	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00082	48 8b 4c 24 48	 mov	 rcx, QWORD PTR s2$[rsp]
  00087	48 ff c1	 inc	 rcx
  0008a	48 89 4c 24 48	 mov	 QWORD PTR s2$[rsp], rcx
  0008f	85 c0		 test	 eax, eax
  00091	75 02		 jne	 SHORT $LN2@PyOS_mystr
$LN1@PyOS_mystr:

; 14   :             break;

  00093	eb 02		 jmp	 SHORT $LN3@PyOS_mystr
$LN2@PyOS_mystr:

; 15   :     }

  00095	eb 8b		 jmp	 SHORT $LN4@PyOS_mystr
$LN3@PyOS_mystr:

; 16   :     return tolower((unsigned)*s1) - tolower((unsigned)*s2);

  00097	48 8b 44 24 40	 mov	 rax, QWORD PTR s1$[rsp]
  0009c	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0009f	8b c8		 mov	 ecx, eax
  000a1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_tolower
  000a7	89 44 24 24	 mov	 DWORD PTR tv80[rsp], eax
  000ab	48 8b 4c 24 48	 mov	 rcx, QWORD PTR s2$[rsp]
  000b0	0f be 09	 movsx	 ecx, BYTE PTR [rcx]
  000b3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_tolower
  000b9	8b 4c 24 24	 mov	 ecx, DWORD PTR tv80[rsp]
  000bd	2b c8		 sub	 ecx, eax
  000bf	8b c1		 mov	 eax, ecx
$LN6@PyOS_mystr:

; 17   : }

  000c1	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000c5	c3		 ret	 0
PyOS_mystrnicmp ENDP
_TEXT	ENDS
PUBLIC	PyOS_mystricmp
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyOS_mystricmp DD imagerel $LN5
	DD	imagerel $LN5+157
	DD	imagerel $unwind$PyOS_mystricmp
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyOS_mystricmp DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyOS_mystricmp
_TEXT	SEGMENT
tv69 = 32
tv74 = 36
tv71 = 40
tv77 = 44
s1$ = 64
s2$ = 72
PyOS_mystricmp PROC					; COMDAT

; 21   : {

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN2@PyOS_mystr@2:

; 22   :     while (*s1 && (tolower((unsigned)*s1++) == tolower((unsigned)*s2++))) {

  0000e	48 8b 44 24 40	 mov	 rax, QWORD PTR s1$[rsp]
  00013	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00016	85 c0		 test	 eax, eax
  00018	74 54		 je	 SHORT $LN1@PyOS_mystr@2
  0001a	48 8b 44 24 40	 mov	 rax, QWORD PTR s1$[rsp]
  0001f	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00022	89 44 24 20	 mov	 DWORD PTR tv69[rsp], eax
  00026	48 8b 44 24 48	 mov	 rax, QWORD PTR s2$[rsp]
  0002b	0f be 00	 movsx	 eax, BYTE PTR [rax]
  0002e	89 44 24 24	 mov	 DWORD PTR tv74[rsp], eax
  00032	8b 4c 24 24	 mov	 ecx, DWORD PTR tv74[rsp]
  00036	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_tolower
  0003c	89 44 24 28	 mov	 DWORD PTR tv71[rsp], eax
  00040	8b 4c 24 20	 mov	 ecx, DWORD PTR tv69[rsp]
  00044	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_tolower
  0004a	8b 4c 24 28	 mov	 ecx, DWORD PTR tv71[rsp]
  0004e	48 8b 54 24 48	 mov	 rdx, QWORD PTR s2$[rsp]
  00053	48 ff c2	 inc	 rdx
  00056	48 89 54 24 48	 mov	 QWORD PTR s2$[rsp], rdx
  0005b	48 8b 54 24 40	 mov	 rdx, QWORD PTR s1$[rsp]
  00060	48 ff c2	 inc	 rdx
  00063	48 89 54 24 40	 mov	 QWORD PTR s1$[rsp], rdx
  00068	3b c1		 cmp	 eax, ecx
  0006a	75 02		 jne	 SHORT $LN1@PyOS_mystr@2

; 23   :         ;
; 24   :     }

  0006c	eb a0		 jmp	 SHORT $LN2@PyOS_mystr@2
$LN1@PyOS_mystr@2:

; 25   :     return (tolower((unsigned)*s1) - tolower((unsigned)*s2));

  0006e	48 8b 44 24 40	 mov	 rax, QWORD PTR s1$[rsp]
  00073	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00076	8b c8		 mov	 ecx, eax
  00078	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_tolower
  0007e	89 44 24 2c	 mov	 DWORD PTR tv77[rsp], eax
  00082	48 8b 4c 24 48	 mov	 rcx, QWORD PTR s2$[rsp]
  00087	0f be 09	 movsx	 ecx, BYTE PTR [rcx]
  0008a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_tolower
  00090	8b 4c 24 2c	 mov	 ecx, DWORD PTR tv77[rsp]
  00094	2b c8		 sub	 ecx, eax
  00096	8b c1		 mov	 eax, ecx

; 26   : }

  00098	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0009c	c3		 ret	 0
PyOS_mystricmp ENDP
_TEXT	ENDS
END
