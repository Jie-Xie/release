; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_04OLICEBLN@zlib?$AA@			; `string'
PUBLIC	??_C@_0BA@IDAIIEGL@zlib?4Decompress?$AA@	; `string'
PUBLIC	??_C@_0O@LMFKCDND@zlib?4Compress?$AA@		; `string'
PUBLIC	??_C@_0O@FDIIBELN@decompressobj?$AA@		; `string'
PUBLIC	??_C@_05KBIBMHFC@crc32?$AA@			; `string'
PUBLIC	??_C@_0M@HPELMCGK@compressobj?$AA@		; `string'
PUBLIC	??_C@_07NNOKLIPG@adler32?$AA@			; `string'
PUBLIC	??_C@_03KCGPGHOO@eof?$AA@			; `string'
PUBLIC	??_C@_0BA@MAEKPPAH@unconsumed_tail?$AA@		; `string'
PUBLIC	??_C@_0M@DJDDGEAM@unused_data?$AA@		; `string'
PUBLIC	??_C@_0L@BDJCADKN@decompress?$AA@		; `string'
PUBLIC	??_C@_04COAGEIMF@copy?$AA@			; `string'
PUBLIC	??_C@_05GLCAEPFP@flush?$AA@			; `string'
PUBLIC	??_C@_08EJNPIMGB@compress?$AA@			; `string'
PUBLIC	??_C@_05MPNKNAHE@zdict?$AA@			; `string'
PUBLIC	??_C@_08PDFCMIPC@strategy?$AA@			; `string'
PUBLIC	??_C@_08CGPIOOFC@memLevel?$AA@			; `string'
PUBLIC	??_C@_05KKCMBFDI@wbits?$AA@			; `string'
PUBLIC	??_C@_06GABBCIBA@method?$AA@			; `string'
PUBLIC	??_C@_05KJNJLLGA@level?$AA@			; `string'
;	COMDAT ??_C@_04OLICEBLN@zlib?$AA@
CONST	SEGMENT
??_C@_04OLICEBLN@zlib?$AA@ DB 'zlib', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@IDAIIEGL@zlib?4Decompress?$AA@
CONST	SEGMENT
??_C@_0BA@IDAIIEGL@zlib?4Decompress?$AA@ DB 'zlib.Decompress', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@LMFKCDND@zlib?4Compress?$AA@
CONST	SEGMENT
??_C@_0O@LMFKCDND@zlib?4Compress?$AA@ DB 'zlib.Compress', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@FDIIBELN@decompressobj?$AA@
CONST	SEGMENT
??_C@_0O@FDIIBELN@decompressobj?$AA@ DB 'decompressobj', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05KBIBMHFC@crc32?$AA@
CONST	SEGMENT
??_C@_05KBIBMHFC@crc32?$AA@ DB 'crc32', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@HPELMCGK@compressobj?$AA@
CONST	SEGMENT
??_C@_0M@HPELMCGK@compressobj?$AA@ DB 'compressobj', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07NNOKLIPG@adler32?$AA@
CONST	SEGMENT
??_C@_07NNOKLIPG@adler32?$AA@ DB 'adler32', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03KCGPGHOO@eof?$AA@
CONST	SEGMENT
??_C@_03KCGPGHOO@eof?$AA@ DB 'eof', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@MAEKPPAH@unconsumed_tail?$AA@
CONST	SEGMENT
??_C@_0BA@MAEKPPAH@unconsumed_tail?$AA@ DB 'unconsumed_tail', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@DJDDGEAM@unused_data?$AA@
CONST	SEGMENT
??_C@_0M@DJDDGEAM@unused_data?$AA@ DB 'unused_data', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@BDJCADKN@decompress?$AA@
CONST	SEGMENT
??_C@_0L@BDJCADKN@decompress?$AA@ DB 'decompress', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04COAGEIMF@copy?$AA@
CONST	SEGMENT
??_C@_04COAGEIMF@copy?$AA@ DB 'copy', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05GLCAEPFP@flush?$AA@
CONST	SEGMENT
??_C@_05GLCAEPFP@flush?$AA@ DB 'flush', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08EJNPIMGB@compress?$AA@
CONST	SEGMENT
??_C@_08EJNPIMGB@compress?$AA@ DB 'compress', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05MPNKNAHE@zdict?$AA@
CONST	SEGMENT
??_C@_05MPNKNAHE@zdict?$AA@ DB 'zdict', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08PDFCMIPC@strategy?$AA@
CONST	SEGMENT
??_C@_08PDFCMIPC@strategy?$AA@ DB 'strategy', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08CGPIOOFC@memLevel?$AA@
CONST	SEGMENT
??_C@_08CGPIOOFC@memLevel?$AA@ DB 'memLevel', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05KKCMBFDI@wbits?$AA@
CONST	SEGMENT
??_C@_05KKCMBFDI@wbits?$AA@ DB 'wbits', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06GABBCIBA@method?$AA@
CONST	SEGMENT
??_C@_06GABBCIBA@method?$AA@ DB 'method', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05KJNJLLGA@level?$AA@
CONST	SEGMENT
??_C@_05KJNJLLGA@level?$AA@ DB 'level', 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
compressobj__doc__ DB 'compressobj(level=-1, method=DEFLATED, wbits=15, m'
	DB	'emlevel=8,', 0aH, '            strategy=Z_DEFAULT_STRATEGY[, '
	DB	'zdict])', 0aH, ' -- Return a compressor object.', 0aH, 0aH, 'l'
	DB	'evel is the compression level (an integer in the range 0-9; d'
	DB	'efault is 6).', 0aH, 'Higher compression levels are slower, b'
	DB	'ut produce smaller results.', 0aH, 0aH, 'method is the compre'
	DB	'ssion algorithm. If given, this must be DEFLATED.', 0aH, 0aH, 'w'
	DB	'bits is the base two logarithm of the window size (range: 8..'
	DB	'15).', 0aH, 0aH, 'memlevel controls the amount of memory used'
	DB	' for internal compression state.', 0aH, 'Valid values range f'
	DB	'rom 1 to 9. Higher values result in higher memory usage,', 0aH
	DB	'faster compression, and smaller output.', 0aH, 0aH, 'strategy'
	DB	' is used to tune the compression algorithm. Possible values a'
	DB	're', 0aH, 'Z_DEFAULT_STRATEGY, Z_FILTERED, and Z_HUFFMAN_ONLY'
	DB	'.', 0aH, 0aH, 'zdict is the predefined compression dictionary'
	DB	' - a sequence of bytes', 0aH, 'containing subsequences that a'
	DB	're likely to occur in the input data.', 00H
	ORG $+13
decompressobj__doc__ DB 'decompressobj([wbits[, zdict]]) -- Return a deco'
	DB	'mpressor object.', 0aH, 0aH, 'Optional arg wbits is the windo'
	DB	'w buffer size.', 0aH, 0aH, 'Optional arg zdict is the predefi'
	DB	'ned compression dictionary. This must be', 0aH, 'the same dic'
	DB	'tionary as used by the compressor that produced the input dat'
	DB	'a.', 00H
	ORG $+9
compress__doc__ DB 'compress(string[, level]) -- Returned compressed stri'
	DB	'ng.', 0aH, 0aH, 'Optional arg level is the compression level,'
	DB	' in 0-9.', 00H
	ORG $+1
decompress__doc__ DB 'decompress(string[, wbits[, bufsize]]) -- Return de'
	DB	'compressed string.', 0aH, 0aH, 'Optional arg wbits is the win'
	DB	'dow buffer size.  Optional arg bufsize is', 0aH, 'the initial'
	DB	' output buffer size.', 00H
	ORG $+2
?kwlist@?1??PyZlib_compressobj@@9@9 DQ FLAT:??_C@_05KJNJLLGA@level?$AA@ ; `PyZlib_compressobj'::`2'::kwlist
	DQ	FLAT:??_C@_06GABBCIBA@method?$AA@
	DQ	FLAT:??_C@_05KKCMBFDI@wbits?$AA@
	DQ	FLAT:??_C@_08CGPIOOFC@memLevel?$AA@
	DQ	FLAT:??_C@_08PDFCMIPC@strategy?$AA@
	DQ	FLAT:??_C@_05MPNKNAHE@zdict?$AA@
	DQ	0000000000000000H
?kwlist@?1??PyZlib_decompressobj@@9@9 DQ FLAT:??_C@_05KKCMBFDI@wbits?$AA@ ; `PyZlib_decompressobj'::`2'::kwlist
	DQ	FLAT:??_C@_05MPNKNAHE@zdict?$AA@
	DQ	0000000000000000H
comp_compress__doc__ DB 'compress(data) -- Return a string containing dat'
	DB	'a compressed.', 0aH, 0aH, 'After calling this function, some '
	DB	'of the input data may still', 0aH, 'be stored in internal buf'
	DB	'fers for later processing.', 0aH, 'Call the flush() method to'
	DB	' clear these buffers.', 00H
	ORG $+15
decomp_decompress__doc__ DB 'decompress(data, max_length) -- Return a str'
	DB	'ing containing the decompressed', 0aH, 'version of the data.', 0aH
	DB	0aH, 'After calling this function, some of the input data may '
	DB	'still be stored in', 0aH, 'internal buffers for later process'
	DB	'ing.', 0aH, 'Call the flush() method to clear these buffers.', 0aH
	DB	'If the max_length parameter is specified then the return valu'
	DB	'e will be', 0aH, 'no longer than max_length.  Unconsumed inpu'
	DB	't data will be stored in', 0aH, 'the unconsumed_tail attribut'
	DB	'e.', 00H
	ORG $+2
comp_flush__doc__ DB 'flush( [mode] ) -- Return a string containing any r'
	DB	'emaining compressed data.', 0aH, 0aH, 'mode can be one of the'
	DB	' constants Z_SYNC_FLUSH, Z_FULL_FLUSH, Z_FINISH; the', 0aH, 'd'
	DB	'efault value used when mode is not specified is Z_FINISH.', 0aH
	DB	'If mode == Z_FINISH, the compressor object can no longer be u'
	DB	'sed after', 0aH, 'calling the flush() method.  Otherwise, mor'
	DB	'e data can still be compressed.', 00H
	ORG $+2
comp_copy__doc__ DB 'copy() -- Return a copy of the compression object.', 00H
	ORG $+5
decomp_copy__doc__ DB 'copy() -- Return a copy of the decompression objec'
	DB	't.', 00H
	ORG $+11
decomp_flush__doc__ DB 'flush( [length] ) -- Return a string containing a'
	DB	'ny remaining', 0aH, 'decompressed data. length, if given, is '
	DB	'the initial size of the', 0aH, 'output buffer.', 0aH, 0aH, 'T'
	DB	'he decompressor object can no longer be used after this call.'
	DB	00H
	ORG $+3
comp_methods DQ	FLAT:??_C@_08EJNPIMGB@compress?$AA@
	DQ	FLAT:PyZlib_objcompress
	DD	01H
	ORG $+4
	DQ	FLAT:comp_compress__doc__
	DQ	FLAT:??_C@_05GLCAEPFP@flush?$AA@
	DQ	FLAT:PyZlib_flush
	DD	01H
	ORG $+4
	DQ	FLAT:comp_flush__doc__
	DQ	FLAT:??_C@_04COAGEIMF@copy?$AA@
	DQ	FLAT:PyZlib_copy
	DD	04H
	ORG $+4
	DQ	FLAT:comp_copy__doc__
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
Decomp_methods DQ FLAT:??_C@_0L@BDJCADKN@decompress?$AA@
	DQ	FLAT:PyZlib_objdecompress
	DD	01H
	ORG $+4
	DQ	FLAT:decomp_decompress__doc__
	DQ	FLAT:??_C@_05GLCAEPFP@flush?$AA@
	DQ	FLAT:PyZlib_unflush
	DD	01H
	ORG $+4
	DQ	FLAT:decomp_flush__doc__
	DQ	FLAT:??_C@_04COAGEIMF@copy?$AA@
	DQ	FLAT:PyZlib_uncopy
	DD	04H
	ORG $+4
	DQ	FLAT:decomp_copy__doc__
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
Decomp_members DQ FLAT:??_C@_0M@DJDDGEAM@unused_data?$AA@
	DD	06H
	ORG $+4
	DQ	00000000000000b8H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0BA@MAEKPPAH@unconsumed_tail?$AA@
	DD	06H
	ORG $+4
	DQ	00000000000000c0H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_03KCGPGHOO@eof?$AA@
	DD	0eH
	ORG $+4
	DQ	00000000000000c8H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	0000000000000000H
	ORG $+32
adler32__doc__ DB 'adler32(string[, start]) -- Compute an Adler-32 checks'
	DB	'um of string.', 0aH, 0aH, 'An optional starting value can be '
	DB	'specified.  The returned checksum is', 0aH, 'an integer.', 00H
	ORG $+8
crc32__doc__ DB	'crc32(string[, start]) -- Compute a CRC-32 checksum of s'
	DB	'tring.', 0aH, 0aH, 'An optional starting value can be specifi'
	DB	'ed.  The returned checksum is', 0aH, 'an integer.', 00H
	ORG $+13
zlib_methods DQ	FLAT:??_C@_07NNOKLIPG@adler32?$AA@
	DQ	FLAT:PyZlib_adler32
	DD	01H
	ORG $+4
	DQ	FLAT:adler32__doc__
	DQ	FLAT:??_C@_08EJNPIMGB@compress?$AA@
	DQ	FLAT:PyZlib_compress
	DD	01H
	ORG $+4
	DQ	FLAT:compress__doc__
	DQ	FLAT:??_C@_0M@HPELMCGK@compressobj?$AA@
	DQ	FLAT:PyZlib_compressobj
	DD	03H
	ORG $+4
	DQ	FLAT:compressobj__doc__
	DQ	FLAT:??_C@_05KBIBMHFC@crc32?$AA@
	DQ	FLAT:PyZlib_crc32
	DD	01H
	ORG $+4
	DQ	FLAT:crc32__doc__
	DQ	FLAT:??_C@_0L@BDJCADKN@decompress?$AA@
	DQ	FLAT:PyZlib_decompress
	DD	01H
	ORG $+4
	DQ	FLAT:decompress__doc__
	DQ	FLAT:??_C@_0O@FDIIBELN@decompressobj?$AA@
	DQ	FLAT:PyZlib_decompressobj
	DD	03H
	ORG $+4
	DQ	FLAT:decompressobj__doc__
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
Comptype DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0O@LMFKCDND@zlib?4Compress?$AA@
	DQ	00000000000000e0H
	DQ	0000000000000000H
	DQ	FLAT:Comp_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	040000H
	ORG $+4
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:comp_methods
	ORG $+152
Decomptype DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0BA@IDAIIEGL@zlib?4Decompress?$AA@
	DQ	00000000000000e0H
	DQ	0000000000000000H
	DQ	FLAT:Decomp_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	040000H
	ORG $+4
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:Decomp_methods
	DQ	FLAT:Decomp_members
	ORG $+144
zlib_module_documentation DB 'The functions in this module allow compress'
	DB	'ion and decompression using the', 0aH, 'zlib library, which i'
	DB	's based on GNU zip.', 0aH, 0aH, 'adler32(string[, start]) -- '
	DB	'Compute an Adler-32 checksum.', 0aH, 'compress(string[, level'
	DB	']) -- Compress string, with compression level in 0-9.', 0aH, 'c'
	DB	'ompressobj([level[, ...]]) -- Return a compressor object.', 0aH
	DB	'crc32(string[, start]) -- Compute a CRC-32 checksum.', 0aH, 'd'
	DB	'ecompress(string,[wbits],[bufsize]) -- Decompresses a compres'
	DB	'sed string.', 0aH, 'decompressobj([wbits[, zdict]]]) -- Retur'
	DB	'n a decompressor object.', 0aH, 0aH, '''wbits'' is window buf'
	DB	'fer size.', 0aH, 'Compressor objects support compress() and f'
	DB	'lush() methods; decompressor', 0aH, 'objects support decompre'
	DB	'ss() and flush().', 00H
	ORG $+6
zlibmodule DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_04OLICEBLN@zlib?$AA@
	DQ	FLAT:zlib_module_documentation
	DQ	ffffffffffffffffH
	DQ	FLAT:zlib_methods
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
_DATA	ENDS
PUBLIC	??_C@_0BM@IPDNGAHJ@while?5finishing?5compression?$AA@ ; `string'
PUBLIC	$T21975
PUBLIC	$T21974
PUBLIC	??_C@_0BH@EEBMFEPN@while?5compressing?5data?$AA@ ; `string'
PUBLIC	$T21973
PUBLIC	??_C@_0BG@OJPCDAJB@Bad?5compression?5level?$AA@	; `string'
PUBLIC	??_C@_0CF@HLJIHGFN@Out?5of?5memory?5while?5compressing?5@ ; `string'
PUBLIC	??_C@_05DFCKICEH@1?42?45?$AA@			; `string'
PUBLIC	??_C@_0CH@PJFMNFII@Can?8t?5allocate?5memory?5to?5compres@ ; `string'
PUBLIC	??_C@_0CF@HNAFKOOJ@Size?5does?5not?5fit?5in?5an?5unsigned@ ; `string'
PUBLIC	??_C@_0O@MGHNPGOH@y?$CK?$HMi?3compress?$AA@	; `string'
EXTRN	__imp_free:PROC
EXTRN	PyBuffer_Release:PROC
EXTRN	PyBytes_FromStringAndSize:PROC
EXTRN	PyEval_RestoreThread:PROC
EXTRN	deflate:PROC
EXTRN	PyEval_SaveThread:PROC
EXTRN	deflateEnd:PROC
EXTRN	deflateInit_:PROC
EXTRN	PyExc_MemoryError:QWORD
EXTRN	__imp_malloc:PROC
EXTRN	PyErr_SetString:PROC
EXTRN	PyExc_OverflowError:QWORD
EXTRN	PyArg_ParseTuple:PROC
_BSS	SEGMENT
ZlibError DQ	01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\modules\zlibmodule.c
pdata	SEGMENT
$pdata$PyZlib_compress DD imagerel PyZlib_compress
	DD	imagerel PyZlib_compress+801
	DD	imagerel $unwind$PyZlib_compress
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyZlib_compress DD 041301H
	DD	0490113H
	DD	0600b700cH
xdata	ENDS
;	COMDAT ??_C@_0BM@IPDNGAHJ@while?5finishing?5compression?$AA@
CONST	SEGMENT
??_C@_0BM@IPDNGAHJ@while?5finishing?5compression?$AA@ DB 'while finishing'
	DB	' compression', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@EEBMFEPN@while?5compressing?5data?$AA@
CONST	SEGMENT
??_C@_0BH@EEBMFEPN@while?5compressing?5data?$AA@ DB 'while compressing da'
	DB	'ta', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@OJPCDAJB@Bad?5compression?5level?$AA@
CONST	SEGMENT
??_C@_0BG@OJPCDAJB@Bad?5compression?5level?$AA@ DB 'Bad compression level'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@HLJIHGFN@Out?5of?5memory?5while?5compressing?5@
CONST	SEGMENT
??_C@_0CF@HLJIHGFN@Out?5of?5memory?5while?5compressing?5@ DB 'Out of memo'
	DB	'ry while compressing data', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05DFCKICEH@1?42?45?$AA@
CONST	SEGMENT
??_C@_05DFCKICEH@1?42?45?$AA@ DB '1.2.5', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@PJFMNFII@Can?8t?5allocate?5memory?5to?5compres@
CONST	SEGMENT
??_C@_0CH@PJFMNFII@Can?8t?5allocate?5memory?5to?5compres@ DB 'Can''t allo'
	DB	'cate memory to compress data', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@HNAFKOOJ@Size?5does?5not?5fit?5in?5an?5unsigned@
CONST	SEGMENT
??_C@_0CF@HNAFKOOJ@Size?5does?5not?5fit?5in?5an?5unsigned@ DB 'Size does '
	DB	'not fit in an unsigned int', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@MGHNPGOH@y?$CK?$HMi?3compress?$AA@
CONST	SEGMENT
??_C@_0O@MGHNPGOH@y?$CK?$HMi?3compress?$AA@ DB 'y*|i:compress', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyZlib_compress
_TEXT	SEGMENT
level$ = 32
length$ = 36
pinput$ = 48
output$ = 128
input$ = 136
ReturnVal$ = 144
err$ = 152
zst$ = 160
_save$20962 = 256
$T21973 = 272
$T21974 = 368
$T21975 = 464
tv88 = 560
self$ = 608
args$ = 616
PyZlib_compress PROC					; COMDAT

; 146  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	48 81 ec 48 02
	00 00		 sub	 rsp, 584		; 00000248H

; 147  :     PyObject *ReturnVal = NULL;

  00013	48 c7 84 24 90
	00 00 00 00 00
	00 00		 mov	 QWORD PTR ReturnVal$[rsp], 0

; 148  :     Py_buffer pinput;
; 149  :     Byte *input, *output = NULL;

  0001f	48 c7 84 24 80
	00 00 00 00 00
	00 00		 mov	 QWORD PTR output$[rsp], 0

; 150  :     unsigned int length;
; 151  :     int level=Z_DEFAULT_COMPRESSION, err;

  0002b	c7 44 24 20 ff
	ff ff ff	 mov	 DWORD PTR level$[rsp], -1

; 152  :     z_stream zst;
; 153  : 
; 154  :     /* require Python string object, optional 'level' arg */
; 155  :     if (!PyArg_ParseTuple(args, "y*|i:compress", &pinput, &level))

  00033	4c 8d 4c 24 20	 lea	 r9, QWORD PTR level$[rsp]
  00038	4c 8d 44 24 30	 lea	 r8, QWORD PTR pinput$[rsp]
  0003d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0O@MGHNPGOH@y?$CK?$HMi?3compress?$AA@
  00044	48 8b 8c 24 68
	02 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  0004c	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00051	85 c0		 test	 eax, eax
  00053	75 07		 jne	 SHORT $LN12@PyZlib_com

; 156  :         return NULL;

  00055	33 c0		 xor	 eax, eax
  00057	e9 bb 02 00 00	 jmp	 $LN13@PyZlib_com
$LN12@PyZlib_com:

; 157  : 
; 158  :     if (pinput.len > UINT_MAX) {

  0005c	b8 ff ff ff ff	 mov	 eax, -1
  00061	48 39 44 24 40	 cmp	 QWORD PTR pinput$[rsp+16], rax
  00066	7e 18		 jle	 SHORT $LN11@PyZlib_com

; 159  :         PyErr_SetString(PyExc_OverflowError,
; 160  :                         "Size does not fit in an unsigned int");

  00068	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CF@HNAFKOOJ@Size?5does?5not?5fit?5in?5an?5unsigned@
  0006f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_OverflowError
  00076	e8 00 00 00 00	 call	 PyErr_SetString

; 161  :         goto error;

  0007b	e9 77 02 00 00	 jmp	 $error$20939
$LN11@PyZlib_com:

; 162  :     }
; 163  :     input = pinput.buf;

  00080	48 8b 44 24 30	 mov	 rax, QWORD PTR pinput$[rsp]
  00085	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR input$[rsp], rax

; 164  :     length = pinput.len;

  0008d	8b 44 24 40	 mov	 eax, DWORD PTR pinput$[rsp+16]
  00091	89 44 24 24	 mov	 DWORD PTR length$[rsp], eax

; 165  : 
; 166  :     zst.avail_out = length + length/1000 + 12 + 1;

  00095	33 d2		 xor	 edx, edx
  00097	8b 44 24 24	 mov	 eax, DWORD PTR length$[rsp]
  0009b	b9 e8 03 00 00	 mov	 ecx, 1000		; 000003e8H
  000a0	f7 f1		 div	 ecx
  000a2	8b 4c 24 24	 mov	 ecx, DWORD PTR length$[rsp]
  000a6	8d 44 01 0d	 lea	 eax, DWORD PTR [rcx+rax+13]
  000aa	89 84 24 b8 00
	00 00		 mov	 DWORD PTR zst$[rsp+24], eax

; 167  : 
; 168  :     output = (Byte*)malloc(zst.avail_out);

  000b1	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR zst$[rsp+24]
  000b8	8b c8		 mov	 ecx, eax
  000ba	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_malloc
  000c0	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR output$[rsp], rax

; 169  :     if (output == NULL) {

  000c8	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR output$[rsp], 0
  000d1	75 18		 jne	 SHORT $LN10@PyZlib_com

; 170  :         PyErr_SetString(PyExc_MemoryError,
; 171  :                         "Can't allocate memory to compress data");

  000d3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CH@PJFMNFII@Can?8t?5allocate?5memory?5to?5compres@
  000da	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_MemoryError
  000e1	e8 00 00 00 00	 call	 PyErr_SetString

; 172  :         goto error;

  000e6	e9 0c 02 00 00	 jmp	 $error$20939
$LN10@PyZlib_com:

; 173  :     }
; 174  : 
; 175  :     /* Past the point of no return.  From here on out, we need to make sure
; 176  :        we clean up mallocs & INCREFs. */
; 177  : 
; 178  :     zst.zalloc = (alloc_func)NULL;

  000eb	48 c7 84 24 d0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR zst$[rsp+48], 0

; 179  :     zst.zfree = (free_func)Z_NULL;

  000f7	48 c7 84 24 d8
	00 00 00 00 00
	00 00		 mov	 QWORD PTR zst$[rsp+56], 0

; 180  :     zst.next_out = (Byte *)output;

  00103	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR output$[rsp]
  0010b	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR zst$[rsp+16], rax

; 181  :     zst.next_in = (Byte *)input;

  00113	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR input$[rsp]
  0011b	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR zst$[rsp], rax

; 182  :     zst.avail_in = length;

  00123	8b 44 24 24	 mov	 eax, DWORD PTR length$[rsp]
  00127	89 84 24 a8 00
	00 00		 mov	 DWORD PTR zst$[rsp+8], eax

; 183  :     err = deflateInit(&zst, level);

  0012e	41 b9 58 00 00
	00		 mov	 r9d, 88			; 00000058H
  00134	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_05DFCKICEH@1?42?45?$AA@
  0013b	8b 54 24 20	 mov	 edx, DWORD PTR level$[rsp]
  0013f	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR zst$[rsp]
  00147	e8 00 00 00 00	 call	 deflateInit_
  0014c	89 84 24 98 00
	00 00		 mov	 DWORD PTR err$[rsp], eax

; 184  : 
; 185  :     switch(err) {

  00153	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR err$[rsp]
  0015a	89 84 24 30 02
	00 00		 mov	 DWORD PTR tv88[rsp], eax
  00161	83 bc 24 30 02
	00 00 fc	 cmp	 DWORD PTR tv88[rsp], -4
  00169	74 18		 je	 SHORT $LN6@PyZlib_com
  0016b	83 bc 24 30 02
	00 00 fe	 cmp	 DWORD PTR tv88[rsp], -2
  00173	74 26		 je	 SHORT $LN5@PyZlib_com
  00175	83 bc 24 30 02
	00 00 00	 cmp	 DWORD PTR tv88[rsp], 0
  0017d	74 02		 je	 SHORT $LN7@PyZlib_com
  0017f	eb 32		 jmp	 SHORT $LN4@PyZlib_com
$LN7@PyZlib_com:

; 186  :     case(Z_OK):
; 187  :         break;

  00181	eb 7a		 jmp	 SHORT $LN8@PyZlib_com
$LN6@PyZlib_com:

; 188  :     case(Z_MEM_ERROR):
; 189  :         PyErr_SetString(PyExc_MemoryError,
; 190  :                         "Out of memory while compressing data");

  00183	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CF@HLJIHGFN@Out?5of?5memory?5while?5compressing?5@
  0018a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_MemoryError
  00191	e8 00 00 00 00	 call	 PyErr_SetString

; 191  :         goto error;

  00196	e9 5c 01 00 00	 jmp	 $error$20939
$LN5@PyZlib_com:

; 192  :     case(Z_STREAM_ERROR):
; 193  :         PyErr_SetString(ZlibError,
; 194  :                         "Bad compression level");

  0019b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@OJPCDAJB@Bad?5compression?5level?$AA@
  001a2	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ZlibError
  001a9	e8 00 00 00 00	 call	 PyErr_SetString

; 195  :         goto error;

  001ae	e9 44 01 00 00	 jmp	 $error$20939
$LN4@PyZlib_com:

; 196  :     default:
; 197  :         deflateEnd(&zst);

  001b3	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR zst$[rsp]
  001bb	e8 00 00 00 00	 call	 deflateEnd

; 198  :         zlib_error(zst, err, "while compressing data");

  001c0	48 8d 84 24 10
	01 00 00	 lea	 rax, QWORD PTR $T21973[rsp]
  001c8	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR zst$[rsp]
  001d0	48 8b f8	 mov	 rdi, rax
  001d3	48 8b f1	 mov	 rsi, rcx
  001d6	b9 58 00 00 00	 mov	 ecx, 88			; 00000058H
  001db	f3 a4		 rep movsb
  001dd	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BH@EEBMFEPN@while?5compressing?5data?$AA@
  001e4	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR err$[rsp]
  001eb	48 8d 8c 24 10
	01 00 00	 lea	 rcx, QWORD PTR $T21973[rsp]
  001f3	e8 00 00 00 00	 call	 zlib_error

; 199  :         goto error;

  001f8	e9 fa 00 00 00	 jmp	 $error$20939
$LN8@PyZlib_com:

; 200  :     }
; 201  : 
; 202  :     Py_BEGIN_ALLOW_THREADS;

  001fd	e8 00 00 00 00	 call	 PyEval_SaveThread
  00202	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR _save$20962[rsp], rax

; 203  :     err = deflate(&zst, Z_FINISH);

  0020a	ba 04 00 00 00	 mov	 edx, 4
  0020f	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR zst$[rsp]
  00217	e8 00 00 00 00	 call	 deflate
  0021c	89 84 24 98 00
	00 00		 mov	 DWORD PTR err$[rsp], eax

; 204  :     Py_END_ALLOW_THREADS;

  00223	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR _save$20962[rsp]
  0022b	e8 00 00 00 00	 call	 PyEval_RestoreThread

; 205  : 
; 206  :     if (err != Z_STREAM_END) {

  00230	83 bc 24 98 00
	00 00 01	 cmp	 DWORD PTR err$[rsp], 1
  00238	74 47		 je	 SHORT $LN3@PyZlib_com

; 207  :         zlib_error(zst, err, "while compressing data");

  0023a	48 8d 84 24 70
	01 00 00	 lea	 rax, QWORD PTR $T21974[rsp]
  00242	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR zst$[rsp]
  0024a	48 8b f8	 mov	 rdi, rax
  0024d	48 8b f1	 mov	 rsi, rcx
  00250	b9 58 00 00 00	 mov	 ecx, 88			; 00000058H
  00255	f3 a4		 rep movsb
  00257	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BH@EEBMFEPN@while?5compressing?5data?$AA@
  0025e	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR err$[rsp]
  00265	48 8d 8c 24 70
	01 00 00	 lea	 rcx, QWORD PTR $T21974[rsp]
  0026d	e8 00 00 00 00	 call	 zlib_error

; 208  :         deflateEnd(&zst);

  00272	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR zst$[rsp]
  0027a	e8 00 00 00 00	 call	 deflateEnd

; 209  :         goto error;

  0027f	eb 76		 jmp	 SHORT $error$20939
$LN3@PyZlib_com:

; 210  :     }
; 211  : 
; 212  :     err=deflateEnd(&zst);

  00281	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR zst$[rsp]
  00289	e8 00 00 00 00	 call	 deflateEnd
  0028e	89 84 24 98 00
	00 00		 mov	 DWORD PTR err$[rsp], eax

; 213  :     if (err == Z_OK)

  00295	83 bc 24 98 00
	00 00 00	 cmp	 DWORD PTR err$[rsp], 0
  0029d	75 20		 jne	 SHORT $LN2@PyZlib_com

; 214  :         ReturnVal = PyBytes_FromStringAndSize((char *)output,
; 215  :                                               zst.total_out);

  0029f	8b 84 24 bc 00
	00 00		 mov	 eax, DWORD PTR zst$[rsp+28]
  002a6	8b d0		 mov	 edx, eax
  002a8	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR output$[rsp]
  002b0	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  002b5	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR ReturnVal$[rsp], rax

; 216  :     else

  002bd	eb 38		 jmp	 SHORT $LN1@PyZlib_com
$LN2@PyZlib_com:

; 217  :         zlib_error(zst, err, "while finishing compression");

  002bf	48 8d 84 24 d0
	01 00 00	 lea	 rax, QWORD PTR $T21975[rsp]
  002c7	48 8d 8c 24 a0
	00 00 00	 lea	 rcx, QWORD PTR zst$[rsp]
  002cf	48 8b f8	 mov	 rdi, rax
  002d2	48 8b f1	 mov	 rsi, rcx
  002d5	b9 58 00 00 00	 mov	 ecx, 88			; 00000058H
  002da	f3 a4		 rep movsb
  002dc	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BM@IPDNGAHJ@while?5finishing?5compression?$AA@
  002e3	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR err$[rsp]
  002ea	48 8d 8c 24 d0
	01 00 00	 lea	 rcx, QWORD PTR $T21975[rsp]
  002f2	e8 00 00 00 00	 call	 zlib_error
$LN1@PyZlib_com:
$error$20939:

; 218  : 
; 219  :  error:
; 220  :     PyBuffer_Release(&pinput);

  002f7	48 8d 4c 24 30	 lea	 rcx, QWORD PTR pinput$[rsp]
  002fc	e8 00 00 00 00	 call	 PyBuffer_Release

; 221  :     free(output);

  00301	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR output$[rsp]
  00309	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_free

; 222  : 
; 223  :     return ReturnVal;

  0030f	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR ReturnVal$[rsp]
$LN13@PyZlib_com:

; 224  : }

  00317	48 81 c4 48 02
	00 00		 add	 rsp, 584		; 00000248H
  0031e	5f		 pop	 rdi
  0031f	5e		 pop	 rsi
  00320	c3		 ret	 0
PyZlib_compress ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BE@NHAKGGEG@Error?5?$CFd?5?$CFs?3?5?$CF?4200s?$AA@ ; `string'
PUBLIC	??_C@_0M@HLHPOCOL@Error?5?$CFd?5?$CFs?$AA@	; `string'
PUBLIC	??_C@_0BD@OGFFJDEL@invalid?5input?5data?$AA@	; `string'
PUBLIC	??_C@_0BK@OIOJHOBK@inconsistent?5stream?5state?$AA@ ; `string'
PUBLIC	??_C@_0BP@FLCANBMB@incomplete?5or?5truncated?5stream?$AA@ ; `string'
PUBLIC	??_C@_0BJ@OGJHKJMK@library?5version?5mismatch?$AA@ ; `string'
EXTRN	PyErr_Format:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$zlib_error DD imagerel zlib_error
	DD	imagerel zlib_error+230
	DD	imagerel $unwind$zlib_error
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$zlib_error DD 011201H
	DD	08212H
xdata	ENDS
;	COMDAT ??_C@_0BE@NHAKGGEG@Error?5?$CFd?5?$CFs?3?5?$CF?4200s?$AA@
CONST	SEGMENT
??_C@_0BE@NHAKGGEG@Error?5?$CFd?5?$CFs?3?5?$CF?4200s?$AA@ DB 'Error %d %s'
	DB	': %.200s', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@HLHPOCOL@Error?5?$CFd?5?$CFs?$AA@
CONST	SEGMENT
??_C@_0M@HLHPOCOL@Error?5?$CFd?5?$CFs?$AA@ DB 'Error %d %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@OGFFJDEL@invalid?5input?5data?$AA@
CONST	SEGMENT
??_C@_0BD@OGFFJDEL@invalid?5input?5data?$AA@ DB 'invalid input data', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@OIOJHOBK@inconsistent?5stream?5state?$AA@
CONST	SEGMENT
??_C@_0BK@OIOJHOBK@inconsistent?5stream?5state?$AA@ DB 'inconsistent stre'
	DB	'am state', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@FLCANBMB@incomplete?5or?5truncated?5stream?$AA@
CONST	SEGMENT
??_C@_0BP@FLCANBMB@incomplete?5or?5truncated?5stream?$AA@ DB 'incomplete '
	DB	'or truncated stream', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@OGJHKJMK@library?5version?5mismatch?$AA@
CONST	SEGMENT
??_C@_0BJ@OGJHKJMK@library?5version?5mismatch?$AA@ DB 'library version mi'
	DB	'smatch', 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT zlib_error
_TEXT	SEGMENT
zmsg$ = 48
tv68 = 56
zst$ = 80
err$ = 88
msg$ = 96
zlib_error PROC						; COMDAT

; 56   : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 57   :     const char *zmsg = Z_NULL;

  00012	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR zmsg$[rsp], 0

; 58   :     /* In case of a version mismatch, zst.msg won't be initialized.
; 59   :        Check for this case first, before looking at zst.msg. */
; 60   :     if (err == Z_VERSION_ERROR)

  0001b	83 7c 24 58 fa	 cmp	 DWORD PTR err$[rsp], -6
  00020	75 0c		 jne	 SHORT $LN10@zlib_error

; 61   :         zmsg = "library version mismatch";

  00022	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BJ@OGJHKJMK@library?5version?5mismatch?$AA@
  00029	48 89 44 24 30	 mov	 QWORD PTR zmsg$[rsp], rax
$LN10@zlib_error:

; 62   :     if (zmsg == Z_NULL)

  0002e	48 83 7c 24 30
	00		 cmp	 QWORD PTR zmsg$[rsp], 0
  00034	75 0e		 jne	 SHORT $LN9@zlib_error

; 63   :         zmsg = zst.msg;

  00036	48 8b 44 24 50	 mov	 rax, QWORD PTR zst$[rsp]
  0003b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0003f	48 89 44 24 30	 mov	 QWORD PTR zmsg$[rsp], rax
$LN9@zlib_error:

; 64   :     if (zmsg == Z_NULL) {

  00044	48 83 7c 24 30
	00		 cmp	 QWORD PTR zmsg$[rsp], 0
  0004a	75 47		 jne	 SHORT $LN8@zlib_error

; 65   :         switch (err) {

  0004c	8b 44 24 58	 mov	 eax, DWORD PTR err$[rsp]
  00050	89 44 24 38	 mov	 DWORD PTR tv68[rsp], eax
  00054	83 7c 24 38 fb	 cmp	 DWORD PTR tv68[rsp], -5
  00059	74 10		 je	 SHORT $LN5@zlib_error
  0005b	83 7c 24 38 fd	 cmp	 DWORD PTR tv68[rsp], -3
  00060	74 25		 je	 SHORT $LN3@zlib_error
  00062	83 7c 24 38 fe	 cmp	 DWORD PTR tv68[rsp], -2
  00067	74 10		 je	 SHORT $LN4@zlib_error
  00069	eb 28		 jmp	 SHORT $LN6@zlib_error
$LN5@zlib_error:

; 66   :         case Z_BUF_ERROR:
; 67   :             zmsg = "incomplete or truncated stream";

  0006b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BP@FLCANBMB@incomplete?5or?5truncated?5stream?$AA@
  00072	48 89 44 24 30	 mov	 QWORD PTR zmsg$[rsp], rax

; 68   :             break;

  00077	eb 1a		 jmp	 SHORT $LN6@zlib_error
$LN4@zlib_error:

; 69   :         case Z_STREAM_ERROR:
; 70   :             zmsg = "inconsistent stream state";

  00079	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BK@OIOJHOBK@inconsistent?5stream?5state?$AA@
  00080	48 89 44 24 30	 mov	 QWORD PTR zmsg$[rsp], rax

; 71   :             break;

  00085	eb 0c		 jmp	 SHORT $LN6@zlib_error
$LN3@zlib_error:

; 72   :         case Z_DATA_ERROR:
; 73   :             zmsg = "invalid input data";

  00087	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BD@OGFFJDEL@invalid?5input?5data?$AA@
  0008e	48 89 44 24 30	 mov	 QWORD PTR zmsg$[rsp], rax
$LN6@zlib_error:
$LN8@zlib_error:

; 74   :             break;
; 75   :         }
; 76   :     }
; 77   :     if (zmsg == Z_NULL)

  00093	48 83 7c 24 30
	00		 cmp	 QWORD PTR zmsg$[rsp], 0
  00099	75 1f		 jne	 SHORT $LN2@zlib_error

; 78   :         PyErr_Format(ZlibError, "Error %d %s", err, msg);

  0009b	4c 8b 4c 24 60	 mov	 r9, QWORD PTR msg$[rsp]
  000a0	44 8b 44 24 58	 mov	 r8d, DWORD PTR err$[rsp]
  000a5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@HLHPOCOL@Error?5?$CFd?5?$CFs?$AA@
  000ac	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ZlibError
  000b3	e8 00 00 00 00	 call	 PyErr_Format

; 79   :     else

  000b8	eb 27		 jmp	 SHORT $LN1@zlib_error
$LN2@zlib_error:

; 80   :         PyErr_Format(ZlibError, "Error %d %s: %.200s", err, msg, zmsg);

  000ba	48 8b 44 24 30	 mov	 rax, QWORD PTR zmsg$[rsp]
  000bf	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000c4	4c 8b 4c 24 60	 mov	 r9, QWORD PTR msg$[rsp]
  000c9	44 8b 44 24 58	 mov	 r8d, DWORD PTR err$[rsp]
  000ce	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@NHAKGGEG@Error?5?$CFd?5?$CFs?3?5?$CF?4200s?$AA@
  000d5	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ZlibError
  000dc	e8 00 00 00 00	 call	 PyErr_Format
$LN1@zlib_error:

; 81   : }

  000e1	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e5	c3		 ret	 0
zlib_error ENDP
_TEXT	ENDS
PUBLIC	_Py_DecRef
PUBLIC	??_C@_0BO@OCMLNOON@while?5finishing?5decompression?$AA@ ; `string'
PUBLIC	$T21993
PUBLIC	$T21992
PUBLIC	??_C@_0BJ@KAMAGNFL@while?5decompressing?5data?$AA@ ; `string'
PUBLIC	$T21991
PUBLIC	??_C@_0CD@DOIIJEPJ@while?5preparing?5to?5decompress?5da@ ; `string'
PUBLIC	$T21990
PUBLIC	??_C@_0CH@NLKHKPNC@Out?5of?5memory?5while?5decompressin@ ; `string'
PUBLIC	??_C@_1DE@PGLLGNKH@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA_?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DA@EFPADLPK@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAz?$AAl?$AAi?$AAb?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@ ; `string'
PUBLIC	??_C@_0BB@DMFNMDKJ@y?$CK?$HMin?3decompress?$AA@	; `string'
EXTRN	_PyBytes_Resize:PROC
EXTRN	inflate:PROC
EXTRN	inflateEnd:PROC
EXTRN	inflateInit2_:PROC
EXTRN	__imp__wassert:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyZlib_decompress DD imagerel PyZlib_decompress
	DD	imagerel PyZlib_decompress+1179
	DD	imagerel $unwind$PyZlib_decompress
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyZlib_decompress DD 041301H
	DD	0590113H
	DD	0600b700cH
xdata	ENDS
;	COMDAT ??_C@_0BO@OCMLNOON@while?5finishing?5decompression?$AA@
CONST	SEGMENT
??_C@_0BO@OCMLNOON@while?5finishing?5decompression?$AA@ DB 'while finishi'
	DB	'ng decompression', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@KAMAGNFL@while?5decompressing?5data?$AA@
CONST	SEGMENT
??_C@_0BJ@KAMAGNFL@while?5decompressing?5data?$AA@ DB 'while decompressin'
	DB	'g data', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@DOIIJEPJ@while?5preparing?5to?5decompress?5da@
CONST	SEGMENT
??_C@_0CD@DOIIJEPJ@while?5preparing?5to?5decompress?5da@ DB 'while prepar'
	DB	'ing to decompress data', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@NLKHKPNC@Out?5of?5memory?5while?5decompressin@
CONST	SEGMENT
??_C@_0CH@NLKHKPNC@Out?5of?5memory?5while?5decompressin@ DB 'Out of memor'
	DB	'y while decompressing data', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1DE@PGLLGNKH@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA_?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DE@PGLLGNKH@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA_?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 's', 00H
	DB	'_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, '('
	DB	00H, 'r', 00H, 'e', 00H, 's', 00H, 'u', 00H, 'l', 00H, 't', 00H
	DB	'_', 00H, 's', 00H, 't', 00H, 'r', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DA@EFPADLPK@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAz?$AAl?$AAi?$AAb?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
CONST	SEGMENT
??_C@_1DA@EFPADLPK@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAz?$AAl?$AAi?$AAb?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@ DB '.'
	DB	00H, '.', 00H, '\', 00H, 'M', 00H, 'o', 00H, 'd', 00H, 'u', 00H
	DB	'l', 00H, 'e', 00H, 's', 00H, '\', 00H, 'z', 00H, 'l', 00H, 'i'
	DB	00H, 'b', 00H, 'm', 00H, 'o', 00H, 'd', 00H, 'u', 00H, 'l', 00H
	DB	'e', 00H, '.', 00H, 'c', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@DMFNMDKJ@y?$CK?$HMin?3decompress?$AA@
CONST	SEGMENT
??_C@_0BB@DMFNMDKJ@y?$CK?$HMin?3decompress?$AA@ DB 'y*|in:decompress', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyZlib_decompress
_TEXT	SEGMENT
length$ = 48
pinput$ = 64
input$ = 144
wsize$ = 152
r_strlen$ = 160
err$ = 168
result_str$ = 176
zst$ = 192
_save$21015 = 288
$T21990 = 304
$T21991 = 400
$T21992 = 496
$T21993 = 592
tv93 = 688
tv139 = 692
self$ = 736
args$ = 744
PyZlib_decompress PROC					; COMDAT

; 234  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	48 81 ec c8 02
	00 00		 sub	 rsp, 712		; 000002c8H

; 235  :     PyObject *result_str = NULL;

  00013	48 c7 84 24 b0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR result_str$[rsp], 0

; 236  :     Py_buffer pinput;
; 237  :     Byte *input;
; 238  :     unsigned int length;
; 239  :     int err;
; 240  :     int wsize=DEF_WBITS;

  0001f	c7 84 24 98 00
	00 00 0f 00 00
	00		 mov	 DWORD PTR wsize$[rsp], 15

; 241  :     Py_ssize_t r_strlen=DEFAULTALLOC;

  0002a	48 c7 84 24 a0
	00 00 00 00 40
	00 00		 mov	 QWORD PTR r_strlen$[rsp], 16384 ; 00004000H

; 242  :     z_stream zst;
; 243  : 
; 244  :     if (!PyArg_ParseTuple(args, "y*|in:decompress",
; 245  :                           &pinput, &wsize, &r_strlen))

  00036	48 8d 84 24 a0
	00 00 00	 lea	 rax, QWORD PTR r_strlen$[rsp]
  0003e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00043	4c 8d 8c 24 98
	00 00 00	 lea	 r9, QWORD PTR wsize$[rsp]
  0004b	4c 8d 44 24 40	 lea	 r8, QWORD PTR pinput$[rsp]
  00050	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BB@DMFNMDKJ@y?$CK?$HMin?3decompress?$AA@
  00057	48 8b 8c 24 e8
	02 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  0005f	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00064	85 c0		 test	 eax, eax
  00066	75 07		 jne	 SHORT $LN26@PyZlib_dec

; 246  :         return NULL;

  00068	33 c0		 xor	 eax, eax
  0006a	e9 22 04 00 00	 jmp	 $LN27@PyZlib_dec
$LN26@PyZlib_dec:

; 247  : 
; 248  :     if (pinput.len > UINT_MAX) {

  0006f	b8 ff ff ff ff	 mov	 eax, -1
  00074	48 39 44 24 50	 cmp	 QWORD PTR pinput$[rsp+16], rax
  00079	7e 18		 jle	 SHORT $LN25@PyZlib_dec

; 249  :         PyErr_SetString(PyExc_OverflowError,
; 250  :                         "Size does not fit in an unsigned int");

  0007b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CF@HNAFKOOJ@Size?5does?5not?5fit?5in?5an?5unsigned@
  00082	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_OverflowError
  00089	e8 00 00 00 00	 call	 PyErr_SetString

; 251  :         goto error;

  0008e	e9 d4 03 00 00	 jmp	 $error$20988
$LN25@PyZlib_dec:

; 252  :     }
; 253  :     input = pinput.buf;

  00093	48 8b 44 24 40	 mov	 rax, QWORD PTR pinput$[rsp]
  00098	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR input$[rsp], rax

; 254  :     length = pinput.len;

  000a0	8b 44 24 50	 mov	 eax, DWORD PTR pinput$[rsp+16]
  000a4	89 44 24 30	 mov	 DWORD PTR length$[rsp], eax

; 255  : 
; 256  :     if (r_strlen <= 0)

  000a8	48 83 bc 24 a0
	00 00 00 00	 cmp	 QWORD PTR r_strlen$[rsp], 0
  000b1	7f 0c		 jg	 SHORT $LN24@PyZlib_dec

; 257  :         r_strlen = 1;

  000b3	48 c7 84 24 a0
	00 00 00 01 00
	00 00		 mov	 QWORD PTR r_strlen$[rsp], 1
$LN24@PyZlib_dec:

; 258  : 
; 259  :     zst.avail_in = length;

  000bf	8b 44 24 30	 mov	 eax, DWORD PTR length$[rsp]
  000c3	89 84 24 c8 00
	00 00		 mov	 DWORD PTR zst$[rsp+8], eax

; 260  :     zst.avail_out = r_strlen;

  000ca	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR r_strlen$[rsp]
  000d1	89 84 24 d8 00
	00 00		 mov	 DWORD PTR zst$[rsp+24], eax

; 261  : 
; 262  :     if (!(result_str = PyBytes_FromStringAndSize(NULL, r_strlen)))

  000d8	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR r_strlen$[rsp]
  000e0	33 c9		 xor	 ecx, ecx
  000e2	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  000e7	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR result_str$[rsp], rax
  000ef	48 83 bc 24 b0
	00 00 00 00	 cmp	 QWORD PTR result_str$[rsp], 0
  000f8	75 05		 jne	 SHORT $LN23@PyZlib_dec

; 263  :         goto error;

  000fa	e9 68 03 00 00	 jmp	 $error$20988
$LN23@PyZlib_dec:

; 264  : 
; 265  :     zst.zalloc = (alloc_func)NULL;

  000ff	48 c7 84 24 f0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR zst$[rsp+48], 0

; 266  :     zst.zfree = (free_func)Z_NULL;

  0010b	48 c7 84 24 f8
	00 00 00 00 00
	00 00		 mov	 QWORD PTR zst$[rsp+56], 0

; 267  :     zst.next_out = (Byte *)PyBytes_AS_STRING(result_str);

  00117	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR result_str$[rsp]
  0011f	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00123	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00129	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  0012e	85 c0		 test	 eax, eax
  00130	75 1c		 jne	 SHORT $LN29@PyZlib_dec
  00132	41 b8 0b 01 00
	00		 mov	 r8d, 267		; 0000010bH
  00138	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@EFPADLPK@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAz?$AAl?$AAi?$AAb?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  0013f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@PGLLGNKH@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA_?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  00146	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0014c	33 c0		 xor	 eax, eax
$LN29@PyZlib_dec:
  0014e	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR result_str$[rsp]
  00156	48 83 c0 78	 add	 rax, 120		; 00000078H
  0015a	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR zst$[rsp+16], rax

; 268  :     zst.next_in = (Byte *)input;

  00162	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR input$[rsp]
  0016a	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR zst$[rsp], rax

; 269  :     err = inflateInit2(&zst, wsize);

  00172	41 b9 58 00 00
	00		 mov	 r9d, 88			; 00000058H
  00178	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_05DFCKICEH@1?42?45?$AA@
  0017f	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR wsize$[rsp]
  00186	48 8d 8c 24 c0
	00 00 00	 lea	 rcx, QWORD PTR zst$[rsp]
  0018e	e8 00 00 00 00	 call	 inflateInit2_
  00193	89 84 24 a8 00
	00 00		 mov	 DWORD PTR err$[rsp], eax

; 270  : 
; 271  :     switch(err) {

  0019a	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR err$[rsp]
  001a1	89 84 24 b0 02
	00 00		 mov	 DWORD PTR tv93[rsp], eax
  001a8	83 bc 24 b0 02
	00 00 fc	 cmp	 DWORD PTR tv93[rsp], -4
  001b0	74 0e		 je	 SHORT $LN19@PyZlib_dec
  001b2	83 bc 24 b0 02
	00 00 00	 cmp	 DWORD PTR tv93[rsp], 0
  001ba	74 02		 je	 SHORT $LN20@PyZlib_dec
  001bc	eb 1a		 jmp	 SHORT $LN18@PyZlib_dec
$LN20@PyZlib_dec:

; 272  :     case(Z_OK):
; 273  :         break;

  001be	eb 62		 jmp	 SHORT $LN21@PyZlib_dec
$LN19@PyZlib_dec:

; 274  :     case(Z_MEM_ERROR):
; 275  :         PyErr_SetString(PyExc_MemoryError,
; 276  :                         "Out of memory while decompressing data");

  001c0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CH@NLKHKPNC@Out?5of?5memory?5while?5decompressin@
  001c7	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_MemoryError
  001ce	e8 00 00 00 00	 call	 PyErr_SetString

; 277  :         goto error;

  001d3	e9 8f 02 00 00	 jmp	 $error$20988
$LN18@PyZlib_dec:

; 278  :     default:
; 279  :         inflateEnd(&zst);

  001d8	48 8d 8c 24 c0
	00 00 00	 lea	 rcx, QWORD PTR zst$[rsp]
  001e0	e8 00 00 00 00	 call	 inflateEnd

; 280  :         zlib_error(zst, err, "while preparing to decompress data");

  001e5	48 8d 84 24 30
	01 00 00	 lea	 rax, QWORD PTR $T21990[rsp]
  001ed	48 8d 8c 24 c0
	00 00 00	 lea	 rcx, QWORD PTR zst$[rsp]
  001f5	48 8b f8	 mov	 rdi, rax
  001f8	48 8b f1	 mov	 rsi, rcx
  001fb	b9 58 00 00 00	 mov	 ecx, 88			; 00000058H
  00200	f3 a4		 rep movsb
  00202	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0CD@DOIIJEPJ@while?5preparing?5to?5decompress?5da@
  00209	8b 94 24 a8 00
	00 00		 mov	 edx, DWORD PTR err$[rsp]
  00210	48 8d 8c 24 30
	01 00 00	 lea	 rcx, QWORD PTR $T21990[rsp]
  00218	e8 00 00 00 00	 call	 zlib_error

; 281  :         goto error;

  0021d	e9 45 02 00 00	 jmp	 $error$20988
$LN21@PyZlib_dec:
$LN17@PyZlib_dec:

; 282  :     }
; 283  : 
; 284  :     do {
; 285  :         Py_BEGIN_ALLOW_THREADS

  00222	e8 00 00 00 00	 call	 PyEval_SaveThread
  00227	48 89 84 24 20
	01 00 00	 mov	 QWORD PTR _save$21015[rsp], rax

; 286  :         err=inflate(&zst, Z_FINISH);

  0022f	ba 04 00 00 00	 mov	 edx, 4
  00234	48 8d 8c 24 c0
	00 00 00	 lea	 rcx, QWORD PTR zst$[rsp]
  0023c	e8 00 00 00 00	 call	 inflate
  00241	89 84 24 a8 00
	00 00		 mov	 DWORD PTR err$[rsp], eax

; 287  :         Py_END_ALLOW_THREADS

  00248	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR _save$21015[rsp]
  00250	e8 00 00 00 00	 call	 PyEval_RestoreThread

; 288  : 
; 289  :         switch(err) {

  00255	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR err$[rsp]
  0025c	89 84 24 b4 02
	00 00		 mov	 DWORD PTR tv139[rsp], eax
  00263	83 bc 24 b4 02
	00 00 fb	 cmp	 DWORD PTR tv139[rsp], -5
  0026b	74 1e		 je	 SHORT $LN11@PyZlib_dec
  0026d	83 bc 24 b4 02
	00 00 00	 cmp	 DWORD PTR tv139[rsp], 0
  00275	74 68		 je	 SHORT $LN9@PyZlib_dec
  00277	83 bc 24 b4 02
	00 00 01	 cmp	 DWORD PTR tv139[rsp], 1
  0027f	74 05		 je	 SHORT $LN12@PyZlib_dec
  00281	e9 01 01 00 00	 jmp	 $LN7@PyZlib_dec
$LN12@PyZlib_dec:

; 290  :         case(Z_STREAM_END):
; 291  :             break;

  00286	e9 46 01 00 00	 jmp	 $LN13@PyZlib_dec
$LN11@PyZlib_dec:

; 292  :         case(Z_BUF_ERROR):
; 293  :             /*
; 294  :              * If there is at least 1 byte of room according to zst.avail_out
; 295  :              * and we get this error, assume that it means zlib cannot
; 296  :              * process the inflate call() due to an error in the data.
; 297  :              */
; 298  :             if (zst.avail_out > 0) {

  0028b	83 bc 24 d8 00
	00 00 00	 cmp	 DWORD PTR zst$[rsp+24], 0
  00293	76 4a		 jbe	 SHORT $LN10@PyZlib_dec

; 299  :                 zlib_error(zst, err, "while decompressing data");

  00295	48 8d 84 24 90
	01 00 00	 lea	 rax, QWORD PTR $T21991[rsp]
  0029d	48 8d 8c 24 c0
	00 00 00	 lea	 rcx, QWORD PTR zst$[rsp]
  002a5	48 8b f8	 mov	 rdi, rax
  002a8	48 8b f1	 mov	 rsi, rcx
  002ab	b9 58 00 00 00	 mov	 ecx, 88			; 00000058H
  002b0	f3 a4		 rep movsb
  002b2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BJ@KAMAGNFL@while?5decompressing?5data?$AA@
  002b9	8b 94 24 a8 00
	00 00		 mov	 edx, DWORD PTR err$[rsp]
  002c0	48 8d 8c 24 90
	01 00 00	 lea	 rcx, QWORD PTR $T21991[rsp]
  002c8	e8 00 00 00 00	 call	 zlib_error

; 300  :                 inflateEnd(&zst);

  002cd	48 8d 8c 24 c0
	00 00 00	 lea	 rcx, QWORD PTR zst$[rsp]
  002d5	e8 00 00 00 00	 call	 inflateEnd

; 301  :                 goto error;

  002da	e9 88 01 00 00	 jmp	 $error$20988
$LN10@PyZlib_dec:
$LN9@PyZlib_dec:

; 302  :             }
; 303  :             /* fall through */
; 304  :         case(Z_OK):
; 305  :             /* need more memory */
; 306  :             if (_PyBytes_Resize(&result_str, r_strlen << 1) < 0) {

  002df	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR r_strlen$[rsp]
  002e7	48 03 c0	 add	 rax, rax
  002ea	48 8b d0	 mov	 rdx, rax
  002ed	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR result_str$[rsp]
  002f5	e8 00 00 00 00	 call	 _PyBytes_Resize
  002fa	85 c0		 test	 eax, eax
  002fc	7d 12		 jge	 SHORT $LN8@PyZlib_dec

; 307  :                 inflateEnd(&zst);

  002fe	48 8d 8c 24 c0
	00 00 00	 lea	 rcx, QWORD PTR zst$[rsp]
  00306	e8 00 00 00 00	 call	 inflateEnd

; 308  :                 goto error;

  0030b	e9 57 01 00 00	 jmp	 $error$20988
$LN8@PyZlib_dec:

; 309  :             }
; 310  :             zst.next_out =
; 311  :                 (unsigned char *)PyBytes_AS_STRING(result_str) + r_strlen;

  00310	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR result_str$[rsp]
  00318	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0031c	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00322	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  00327	85 c0		 test	 eax, eax
  00329	75 1c		 jne	 SHORT $LN30@PyZlib_dec
  0032b	41 b8 37 01 00
	00		 mov	 r8d, 311		; 00000137H
  00331	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@EFPADLPK@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAz?$AAl?$AAi?$AAb?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  00338	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@PGLLGNKH@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAr?$AAe?$AAs?$AAu?$AAl?$AAt?$AA_?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  0033f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00345	33 c0		 xor	 eax, eax
$LN30@PyZlib_dec:
  00347	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR result_str$[rsp]
  0034f	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR r_strlen$[rsp]
  00357	48 8d 44 08 78	 lea	 rax, QWORD PTR [rax+rcx+120]
  0035c	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR zst$[rsp+16], rax

; 312  :             zst.avail_out = r_strlen;

  00364	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR r_strlen$[rsp]
  0036b	89 84 24 d8 00
	00 00		 mov	 DWORD PTR zst$[rsp+24], eax

; 313  :             r_strlen = r_strlen << 1;

  00372	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR r_strlen$[rsp]
  0037a	48 d1 e0	 shl	 rax, 1
  0037d	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR r_strlen$[rsp], rax

; 314  :             break;

  00385	eb 4a		 jmp	 SHORT $LN13@PyZlib_dec
$LN7@PyZlib_dec:

; 315  :         default:
; 316  :             inflateEnd(&zst);

  00387	48 8d 8c 24 c0
	00 00 00	 lea	 rcx, QWORD PTR zst$[rsp]
  0038f	e8 00 00 00 00	 call	 inflateEnd

; 317  :             zlib_error(zst, err, "while decompressing data");

  00394	48 8d 84 24 f0
	01 00 00	 lea	 rax, QWORD PTR $T21992[rsp]
  0039c	48 8d 8c 24 c0
	00 00 00	 lea	 rcx, QWORD PTR zst$[rsp]
  003a4	48 8b f8	 mov	 rdi, rax
  003a7	48 8b f1	 mov	 rsi, rcx
  003aa	b9 58 00 00 00	 mov	 ecx, 88			; 00000058H
  003af	f3 a4		 rep movsb
  003b1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BJ@KAMAGNFL@while?5decompressing?5data?$AA@
  003b8	8b 94 24 a8 00
	00 00		 mov	 edx, DWORD PTR err$[rsp]
  003bf	48 8d 8c 24 f0
	01 00 00	 lea	 rcx, QWORD PTR $T21992[rsp]
  003c7	e8 00 00 00 00	 call	 zlib_error

; 318  :             goto error;

  003cc	e9 96 00 00 00	 jmp	 $error$20988
$LN13@PyZlib_dec:

; 319  :         }
; 320  :     } while (err != Z_STREAM_END);

  003d1	83 bc 24 a8 00
	00 00 01	 cmp	 DWORD PTR err$[rsp], 1
  003d9	0f 85 43 fe ff
	ff		 jne	 $LN17@PyZlib_dec

; 321  : 
; 322  :     err = inflateEnd(&zst);

  003df	48 8d 8c 24 c0
	00 00 00	 lea	 rcx, QWORD PTR zst$[rsp]
  003e7	e8 00 00 00 00	 call	 inflateEnd
  003ec	89 84 24 a8 00
	00 00		 mov	 DWORD PTR err$[rsp], eax

; 323  :     if (err != Z_OK) {

  003f3	83 bc 24 a8 00
	00 00 00	 cmp	 DWORD PTR err$[rsp], 0
  003fb	74 3a		 je	 SHORT $LN6@PyZlib_dec

; 324  :         zlib_error(zst, err, "while finishing decompression");

  003fd	48 8d 84 24 50
	02 00 00	 lea	 rax, QWORD PTR $T21993[rsp]
  00405	48 8d 8c 24 c0
	00 00 00	 lea	 rcx, QWORD PTR zst$[rsp]
  0040d	48 8b f8	 mov	 rdi, rax
  00410	48 8b f1	 mov	 rsi, rcx
  00413	b9 58 00 00 00	 mov	 ecx, 88			; 00000058H
  00418	f3 a4		 rep movsb
  0041a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BO@OCMLNOON@while?5finishing?5decompression?$AA@
  00421	8b 94 24 a8 00
	00 00		 mov	 edx, DWORD PTR err$[rsp]
  00428	48 8d 8c 24 50
	02 00 00	 lea	 rcx, QWORD PTR $T21993[rsp]
  00430	e8 00 00 00 00	 call	 zlib_error

; 325  :         goto error;

  00435	eb 30		 jmp	 SHORT $error$20988
$LN6@PyZlib_dec:

; 326  :     }
; 327  : 
; 328  :     if (_PyBytes_Resize(&result_str, zst.total_out) < 0)

  00437	8b 84 24 dc 00
	00 00		 mov	 eax, DWORD PTR zst$[rsp+28]
  0043e	8b d0		 mov	 edx, eax
  00440	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR result_str$[rsp]
  00448	e8 00 00 00 00	 call	 _PyBytes_Resize
  0044d	85 c0		 test	 eax, eax
  0044f	7d 02		 jge	 SHORT $LN5@PyZlib_dec

; 329  :         goto error;

  00451	eb 14		 jmp	 SHORT $error$20988
$LN5@PyZlib_dec:

; 330  : 
; 331  :     PyBuffer_Release(&pinput);

  00453	48 8d 4c 24 40	 lea	 rcx, QWORD PTR pinput$[rsp]
  00458	e8 00 00 00 00	 call	 PyBuffer_Release

; 332  :     return result_str;

  0045d	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR result_str$[rsp]
  00465	eb 2a		 jmp	 SHORT $LN27@PyZlib_dec
$error$20988:

; 333  : 
; 334  :  error:
; 335  :     PyBuffer_Release(&pinput);

  00467	48 8d 4c 24 40	 lea	 rcx, QWORD PTR pinput$[rsp]
  0046c	e8 00 00 00 00	 call	 PyBuffer_Release
$LN4@PyZlib_dec:

; 336  :     Py_XDECREF(result_str);

  00471	48 83 bc 24 b0
	00 00 00 00	 cmp	 QWORD PTR result_str$[rsp], 0
  0047a	74 0d		 je	 SHORT $LN1@PyZlib_dec
  0047c	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR result_str$[rsp]
  00484	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@PyZlib_dec:
  00489	33 c0		 xor	 eax, eax
  0048b	85 c0		 test	 eax, eax
  0048d	75 e2		 jne	 SHORT $LN4@PyZlib_dec

; 337  :     return NULL;

  0048f	33 c0		 xor	 eax, eax
$LN27@PyZlib_dec:

; 338  : }

  00491	48 81 c4 c8 02
	00 00		 add	 rsp, 712		; 000002c8H
  00498	5f		 pop	 rdi
  00499	5e		 pop	 rsi
  0049a	c3		 ret	 0
PyZlib_decompress ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
EXTRN	_Py_Dealloc:PROC
EXTRN	_Py_NegativeRefcount:PROC
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_RefTotal:QWORD
EXTRN	Px_DecRef:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN13
	DD	imagerel $LN13+257
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
tv81 = 48
op$ = 80
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN13:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	0f 85 e6 00 00
	00		 jne	 $LN8@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00016	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0001b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0001f	48 83 e0 20	 and	 rax, 32			; 00000020H
  00023	48 85 c0	 test	 rax, rax
  00026	75 14		 jne	 SHORT $LN6@Py_DecRef
  00028	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0002d	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00031	48 25 80 00 00
	00		 and	 rax, 128		; 00000080H
  00037	48 85 c0	 test	 rax, rax
  0003a	74 0f		 je	 SHORT $LN7@Py_DecRef
$LN6@Py_DecRef:

; 926  :             Px_DECREF(op);

  0003c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  00041	e8 00 00 00 00	 call	 Px_DecRef
  00046	e9 b1 00 00 00	 jmp	 $LN5@Py_DecRef
$LN7@Py_DecRef:

; 927  :         else if (!Px_ISPX(op)) {

  0004b	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00050	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00054	48 83 e0 02	 and	 rax, 2
  00058	48 85 c0	 test	 rax, rax
  0005b	0f 85 9b 00 00
	00		 jne	 $LN4@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;

  00061	e8 00 00 00 00	 call	 _Py_PXCTX
  00066	85 c0		 test	 eax, eax
  00068	74 02		 je	 SHORT $LN11@Py_DecRef
  0006a	eb 11		 jmp	 SHORT $LN12@Py_DecRef
$LN11@Py_DecRef:
  0006c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00073	48 ff c8	 dec	 rax
  00076	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN12@Py_DecRef:

; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  0007d	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00082	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00086	48 ff c8	 dec	 rax
  00089	48 89 44 24 30	 mov	 QWORD PTR tv81[rsp], rax
  0008e	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00093	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv81[rsp]
  00098	48 89 48 50	 mov	 QWORD PTR [rax+80], rcx
  0009c	48 83 7c 24 30
	00		 cmp	 QWORD PTR tv81[rsp], 0
  000a2	74 4e		 je	 SHORT $LN3@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);

  000a4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000ac	4c 8b 4c 24 50	 mov	 r9, QWORD PTR op$[rsp]
  000b1	41 b8 a2 03 00
	00		 mov	 r8d, 930		; 000003a2H
  000b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000c5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ca	85 c0		 test	 eax, eax
  000cc	75 22		 jne	 SHORT $LN2@Py_DecRef
  000ce	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  000d3	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000d8	7d 16		 jge	 SHORT $LN2@Py_DecRef
  000da	4c 8b 44 24 50	 mov	 r8, QWORD PTR op$[rsp]
  000df	ba a2 03 00 00	 mov	 edx, 930		; 000003a2H
  000e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000eb	e8 00 00 00 00	 call	 _Py_NegativeRefcount
$LN2@Py_DecRef:

; 931  :             } else

  000f0	eb 0a		 jmp	 SHORT $LN1@Py_DecRef
$LN3@Py_DecRef:

; 932  :                 _Py_Dealloc((PyObject *)(op));

  000f2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  000f7	e8 00 00 00 00	 call	 _Py_Dealloc
$LN1@Py_DecRef:
$LN4@Py_DecRef:
$LN5@Py_DecRef:
$LN8@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  000fc	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00100	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BD@CAOKBADO@PyZlib_compressobj?$AA@	; `string'
PUBLIC	??_C@_0BI@EJECEJAF@?4?4?2Modules?2zlibmodule?4c?$AA@ ; `string'
PUBLIC	??_C@_0CC@KFNIIIKD@while?5creating?5compression?5objec@ ; `string'
PUBLIC	$T22009
PUBLIC	??_C@_0BO@DJJNHAML@Invalid?5initialization?5option?$AA@ ; `string'
PUBLIC	??_C@_0CN@CHBGDHHI@Can?8t?5allocate?5memory?5for?5compre@ ; `string'
PUBLIC	??_C@_0BH@IIBABCIP@deflateSetDictionary?$CI?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0BD@IEFPHEPG@Invalid?5dictionary?$AA@	; `string'
PUBLIC	??_C@_0BF@IDNBMIDA@?$HMiiiiiy?$CK?3compressobj?$AA@ ; `string'
EXTRN	PyExc_ValueError:QWORD
EXTRN	deflateSetDictionary:PROC
EXTRN	deflateInit2_:PROC
EXTRN	PyArg_ParseTupleAndKeywords:PROC
;	COMDAT pdata
; File c:\src\pyparallel\modules\zlibmodule.c
pdata	SEGMENT
$pdata$PyZlib_compressobj DD imagerel PyZlib_compressobj
	DD	imagerel PyZlib_compressobj+827
	DD	imagerel $unwind$PyZlib_compressobj
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyZlib_compressobj DD 041801H
	DD	0290118H
	DD	060107011H
xdata	ENDS
;	COMDAT ??_C@_0BD@CAOKBADO@PyZlib_compressobj?$AA@
CONST	SEGMENT
??_C@_0BD@CAOKBADO@PyZlib_compressobj?$AA@ DB 'PyZlib_compressobj', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@EJECEJAF@?4?4?2Modules?2zlibmodule?4c?$AA@
CONST	SEGMENT
??_C@_0BI@EJECEJAF@?4?4?2Modules?2zlibmodule?4c?$AA@ DB '..\Modules\zlibm'
	DB	'odule.c', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@KFNIIIKD@while?5creating?5compression?5objec@
CONST	SEGMENT
??_C@_0CC@KFNIIIKD@while?5creating?5compression?5objec@ DB 'while creatin'
	DB	'g compression object', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@DJJNHAML@Invalid?5initialization?5option?$AA@
CONST	SEGMENT
??_C@_0BO@DJJNHAML@Invalid?5initialization?5option?$AA@ DB 'Invalid initi'
	DB	'alization option', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@CHBGDHHI@Can?8t?5allocate?5memory?5for?5compre@
CONST	SEGMENT
??_C@_0CN@CHBGDHHI@Can?8t?5allocate?5memory?5for?5compre@ DB 'Can''t allo'
	DB	'cate memory for compression object', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@IIBABCIP@deflateSetDictionary?$CI?$CJ?$AA@
CONST	SEGMENT
??_C@_0BH@IIBABCIP@deflateSetDictionary?$CI?$CJ?$AA@ DB 'deflateSetDictio'
	DB	'nary()', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@IEFPHEPG@Invalid?5dictionary?$AA@
CONST	SEGMENT
??_C@_0BD@IEFPHEPG@Invalid?5dictionary?$AA@ DB 'Invalid dictionary', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@IDNBMIDA@?$HMiiiiiy?$CK?3compressobj?$AA@
CONST	SEGMENT
??_C@_0BF@IDNBMIDA@?$HMiiiiiy?$CK?3compressobj?$AA@ DB '|iiiiiy*:compress'
	DB	'obj', 00H					; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyZlib_compressobj
_TEXT	SEGMENT
wbits$ = 80
level$ = 84
method$ = 88
zdict$ = 96
self$ = 176
strategy$ = 184
err$ = 188
memLevel$ = 192
_py_tmp$21107 = 200
$T22009 = 208
tv93 = 304
tv133 = 308
selfptr$ = 352
args$ = 360
kwargs$ = 368
PyZlib_compressobj PROC					; COMDAT

; 342  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 48 01
	00 00		 sub	 rsp, 328		; 00000148H

; 343  :     compobject *self;
; 344  :     int level=Z_DEFAULT_COMPRESSION, method=DEFLATED;

  00018	c7 44 24 54 ff
	ff ff ff	 mov	 DWORD PTR level$[rsp], -1
  00020	c7 44 24 58 08
	00 00 00	 mov	 DWORD PTR method$[rsp], 8

; 345  :     int wbits=MAX_WBITS, memLevel=DEF_MEM_LEVEL, strategy=0, err;

  00028	c7 44 24 50 0f
	00 00 00	 mov	 DWORD PTR wbits$[rsp], 15
  00030	c7 84 24 c0 00
	00 00 08 00 00
	00		 mov	 DWORD PTR memLevel$[rsp], 8
  0003b	c7 84 24 b8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR strategy$[rsp], 0

; 346  :     Py_buffer zdict;
; 347  :     static char *kwlist[] = {"level", "method", "wbits",
; 348  :                              "memLevel", "strategy", "zdict", NULL};
; 349  : 
; 350  :     zdict.buf = NULL; /* Sentinel, so we can tell whether zdict was supplied. */

  00046	48 c7 44 24 60
	00 00 00 00	 mov	 QWORD PTR zdict$[rsp], 0

; 351  :     if (!PyArg_ParseTupleAndKeywords(args, kwargs, "|iiiiiy*:compressobj",
; 352  :                                      kwlist, &level, &method, &wbits,
; 353  :                                      &memLevel, &strategy, &zdict))

  0004f	48 8d 44 24 60	 lea	 rax, QWORD PTR zdict$[rsp]
  00054	48 89 44 24 48	 mov	 QWORD PTR [rsp+72], rax
  00059	48 8d 84 24 b8
	00 00 00	 lea	 rax, QWORD PTR strategy$[rsp]
  00061	48 89 44 24 40	 mov	 QWORD PTR [rsp+64], rax
  00066	48 8d 84 24 c0
	00 00 00	 lea	 rax, QWORD PTR memLevel$[rsp]
  0006e	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  00073	48 8d 44 24 50	 lea	 rax, QWORD PTR wbits$[rsp]
  00078	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  0007d	48 8d 44 24 58	 lea	 rax, QWORD PTR method$[rsp]
  00082	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00087	48 8d 44 24 54	 lea	 rax, QWORD PTR level$[rsp]
  0008c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00091	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?kwlist@?1??PyZlib_compressobj@@9@9
  00098	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BF@IDNBMIDA@?$HMiiiiiy?$CK?3compressobj?$AA@
  0009f	48 8b 94 24 70
	01 00 00	 mov	 rdx, QWORD PTR kwargs$[rsp]
  000a7	48 8b 8c 24 68
	01 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  000af	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  000b4	85 c0		 test	 eax, eax
  000b6	75 07		 jne	 SHORT $LN20@PyZlib_com@2

; 354  :         return NULL;

  000b8	33 c0		 xor	 eax, eax
  000ba	e9 72 02 00 00	 jmp	 $LN21@PyZlib_com@2
$LN20@PyZlib_com@2:

; 355  : 
; 356  :     self = newcompobject(&Comptype);

  000bf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:Comptype
  000c6	e8 00 00 00 00	 call	 newcompobject
  000cb	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR self$[rsp], rax

; 357  :     if (self==NULL)

  000d3	48 83 bc 24 b0
	00 00 00 00	 cmp	 QWORD PTR self$[rsp], 0
  000dc	75 05		 jne	 SHORT $LN19@PyZlib_com@2

; 358  :         goto error;

  000de	e9 cd 01 00 00	 jmp	 $error$21071
$LN19@PyZlib_com@2:

; 359  :     self->zst.zalloc = (alloc_func)NULL;

  000e3	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  000eb	48 c7 80 90 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+144], 0

; 360  :     self->zst.zfree = (free_func)Z_NULL;

  000f6	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  000fe	48 c7 80 98 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+152], 0

; 361  :     self->zst.next_in = NULL;

  00109	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00111	48 c7 40 60 00
	00 00 00	 mov	 QWORD PTR [rax+96], 0

; 362  :     self->zst.avail_in = 0;

  00119	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00121	c7 40 68 00 00
	00 00		 mov	 DWORD PTR [rax+104], 0

; 363  :     err = deflateInit2(&self->zst, level, method, wbits, memLevel, strategy);

  00128	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00130	48 83 c0 60	 add	 rax, 96			; 00000060H
  00134	c7 44 24 38 58
	00 00 00	 mov	 DWORD PTR [rsp+56], 88	; 00000058H
  0013c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05DFCKICEH@1?42?45?$AA@
  00143	48 89 4c 24 30	 mov	 QWORD PTR [rsp+48], rcx
  00148	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR strategy$[rsp]
  0014f	89 4c 24 28	 mov	 DWORD PTR [rsp+40], ecx
  00153	8b 8c 24 c0 00
	00 00		 mov	 ecx, DWORD PTR memLevel$[rsp]
  0015a	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  0015e	44 8b 4c 24 50	 mov	 r9d, DWORD PTR wbits$[rsp]
  00163	44 8b 44 24 58	 mov	 r8d, DWORD PTR method$[rsp]
  00168	8b 54 24 54	 mov	 edx, DWORD PTR level$[rsp]
  0016c	48 8b c8	 mov	 rcx, rax
  0016f	e8 00 00 00 00	 call	 deflateInit2_
  00174	89 84 24 bc 00
	00 00		 mov	 DWORD PTR err$[rsp], eax

; 364  :     switch(err) {

  0017b	8b 84 24 bc 00
	00 00		 mov	 eax, DWORD PTR err$[rsp]
  00182	89 84 24 30 01
	00 00		 mov	 DWORD PTR tv93[rsp], eax
  00189	83 bc 24 30 01
	00 00 fc	 cmp	 DWORD PTR tv93[rsp], -4
  00191	0f 84 b6 00 00
	00		 je	 $LN8@PyZlib_com@2
  00197	83 bc 24 30 01
	00 00 fe	 cmp	 DWORD PTR tv93[rsp], -2
  0019f	0f 84 bd 00 00
	00		 je	 $LN7@PyZlib_com@2
  001a5	83 bc 24 30 01
	00 00 00	 cmp	 DWORD PTR tv93[rsp], 0
  001ad	74 05		 je	 SHORT $LN16@PyZlib_com@2
  001af	e9 c3 00 00 00	 jmp	 $LN6@PyZlib_com@2
$LN16@PyZlib_com@2:

; 365  :     case (Z_OK):
; 366  :         self->is_initialised = 1;

  001b4	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  001bc	c7 80 cc 00 00
	00 01 00 00 00	 mov	 DWORD PTR [rax+204], 1

; 367  :         if (zdict.buf == NULL) {

  001c6	48 83 7c 24 60
	00		 cmp	 QWORD PTR zdict$[rsp], 0
  001cc	75 07		 jne	 SHORT $LN15@PyZlib_com@2

; 368  :             goto success;

  001ce	e9 44 01 00 00	 jmp	 $success$21084

; 369  :         } else {

  001d3	eb 78		 jmp	 SHORT $LN14@PyZlib_com@2
$LN15@PyZlib_com@2:

; 370  :             err = deflateSetDictionary(&self->zst, zdict.buf, zdict.len);

  001d5	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  001dd	48 83 c0 60	 add	 rax, 96			; 00000060H
  001e1	44 8b 44 24 70	 mov	 r8d, DWORD PTR zdict$[rsp+16]
  001e6	48 8b 54 24 60	 mov	 rdx, QWORD PTR zdict$[rsp]
  001eb	48 8b c8	 mov	 rcx, rax
  001ee	e8 00 00 00 00	 call	 deflateSetDictionary
  001f3	89 84 24 bc 00
	00 00		 mov	 DWORD PTR err$[rsp], eax

; 371  :             switch (err) {

  001fa	8b 84 24 bc 00
	00 00		 mov	 eax, DWORD PTR err$[rsp]
  00201	89 84 24 34 01
	00 00		 mov	 DWORD PTR tv133[rsp], eax
  00208	83 bc 24 34 01
	00 00 fe	 cmp	 DWORD PTR tv133[rsp], -2
  00210	74 11		 je	 SHORT $LN10@PyZlib_com@2
  00212	83 bc 24 34 01
	00 00 00	 cmp	 DWORD PTR tv133[rsp], 0
  0021a	74 02		 je	 SHORT $LN11@PyZlib_com@2
  0021c	eb 1a		 jmp	 SHORT $LN9@PyZlib_com@2
$LN11@PyZlib_com@2:

; 372  :             case (Z_OK):
; 373  :                 goto success;

  0021e	e9 f4 00 00 00	 jmp	 $success$21084
$LN10@PyZlib_com@2:

; 374  :             case (Z_STREAM_ERROR):
; 375  :                 PyErr_SetString(PyExc_ValueError, "Invalid dictionary");

  00223	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@IEFPHEPG@Invalid?5dictionary?$AA@
  0022a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00231	e8 00 00 00 00	 call	 PyErr_SetString

; 376  :                 goto error;

  00236	eb 78		 jmp	 SHORT $error$21071
$LN9@PyZlib_com@2:

; 377  :             default:
; 378  :                 PyErr_SetString(PyExc_ValueError, "deflateSetDictionary()");

  00238	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BH@IIBABCIP@deflateSetDictionary?$CI?$CJ?$AA@
  0023f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00246	e8 00 00 00 00	 call	 PyErr_SetString

; 379  :                 goto error;

  0024b	eb 63		 jmp	 SHORT $error$21071
$LN14@PyZlib_com@2:
$LN8@PyZlib_com@2:

; 380  :             }
; 381  :        }
; 382  :     case (Z_MEM_ERROR):
; 383  :         PyErr_SetString(PyExc_MemoryError,
; 384  :                         "Can't allocate memory for compression object");

  0024d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CN@CHBGDHHI@Can?8t?5allocate?5memory?5for?5compre@
  00254	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_MemoryError
  0025b	e8 00 00 00 00	 call	 PyErr_SetString

; 385  :         goto error;

  00260	eb 4e		 jmp	 SHORT $error$21071
$LN7@PyZlib_com@2:

; 386  :     case(Z_STREAM_ERROR):
; 387  :         PyErr_SetString(PyExc_ValueError, "Invalid initialization option");

  00262	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BO@DJJNHAML@Invalid?5initialization?5option?$AA@
  00269	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00270	e8 00 00 00 00	 call	 PyErr_SetString

; 388  :         goto error;

  00275	eb 39		 jmp	 SHORT $error$21071
$LN6@PyZlib_com@2:

; 389  :     default:
; 390  :         zlib_error(self->zst, err, "while creating compression object");

  00277	48 8d 84 24 d0
	00 00 00	 lea	 rax, QWORD PTR $T22009[rsp]
  0027f	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00287	48 8b f8	 mov	 rdi, rax
  0028a	48 8d 71 60	 lea	 rsi, QWORD PTR [rcx+96]
  0028e	b9 58 00 00 00	 mov	 ecx, 88			; 00000058H
  00293	f3 a4		 rep movsb
  00295	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0CC@KFNIIIKD@while?5creating?5compression?5objec@
  0029c	8b 94 24 bc 00
	00 00		 mov	 edx, DWORD PTR err$[rsp]
  002a3	48 8d 8c 24 d0
	00 00 00	 lea	 rcx, QWORD PTR $T22009[rsp]
  002ab	e8 00 00 00 00	 call	 zlib_error
$error$21071:
$LN5@PyZlib_com@2:

; 391  :         goto error;
; 392  :     }
; 393  : 
; 394  :  error:
; 395  :     Py_CLEAR(self);

  002b0	48 83 bc 24 b0
	00 00 00 00	 cmp	 QWORD PTR self$[rsp], 0
  002b9	74 56		 je	 SHORT $LN2@PyZlib_com@2
  002bb	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  002c3	4c 8b 8c 24 b0
	00 00 00	 mov	 r9, QWORD PTR self$[rsp]
  002cb	41 b8 8b 01 00
	00		 mov	 r8d, 395		; 0000018bH
  002d1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@EJECEJAF@?4?4?2Modules?2zlibmodule?4c?$AA@
  002d8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@CAOKBADO@PyZlib_compressobj?$AA@
  002df	e8 00 00 00 00	 call	 _PyParallel_Guard
  002e4	85 c0		 test	 eax, eax
  002e6	75 29		 jne	 SHORT $LN2@PyZlib_com@2
  002e8	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  002f0	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR _py_tmp$21107[rsp], rax
  002f8	48 c7 84 24 b0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR self$[rsp], 0
  00304	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR _py_tmp$21107[rsp]
  0030c	e8 00 00 00 00	 call	 _Py_DecRef
$LN2@PyZlib_com@2:
  00311	33 c0		 xor	 eax, eax
  00313	85 c0		 test	 eax, eax
  00315	75 99		 jne	 SHORT $LN5@PyZlib_com@2
$success$21084:

; 396  :  success:
; 397  :     if (zdict.buf != NULL)

  00317	48 83 7c 24 60
	00		 cmp	 QWORD PTR zdict$[rsp], 0
  0031d	74 0a		 je	 SHORT $LN1@PyZlib_com@2

; 398  :         PyBuffer_Release(&zdict);

  0031f	48 8d 4c 24 60	 lea	 rcx, QWORD PTR zdict$[rsp]
  00324	e8 00 00 00 00	 call	 PyBuffer_Release
$LN1@PyZlib_com@2:

; 399  :     return (PyObject*)self;

  00329	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
$LN21@PyZlib_com@2:

; 400  : }

  00331	48 81 c4 48 01
	00 00		 add	 rsp, 328		; 00000148H
  00338	5f		 pop	 rdi
  00339	5e		 pop	 rsi
  0033a	c3		 ret	 0
PyZlib_compressobj ENDP
_TEXT	ENDS
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
EXTRN	PyThread_allocate_lock:PROC
EXTRN	_PyObject_New:PROC
EXTRN	_PxObject_New:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$newcompobject DD imagerel newcompobject
	DD	imagerel newcompobject+255
	DD	imagerel $unwind$newcompobject
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$newcompobject DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT newcompobject
_TEXT	SEGMENT
self$ = 32
tv70 = 40
type$ = 64
newcompobject PROC					; COMDAT

; 115  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 116  :     compobject *self;
; 117  :     self = PyObject_New(compobject, type);

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	74 11		 je	 SHORT $LN6@newcompobj
  00012	48 8b 4c 24 40	 mov	 rcx, QWORD PTR type$[rsp]
  00017	e8 00 00 00 00	 call	 _PxObject_New
  0001c	48 89 44 24 28	 mov	 QWORD PTR tv70[rsp], rax
  00021	eb 0f		 jmp	 SHORT $LN7@newcompobj
$LN6@newcompobj:
  00023	48 8b 4c 24 40	 mov	 rcx, QWORD PTR type$[rsp]
  00028	e8 00 00 00 00	 call	 _PyObject_New
  0002d	48 89 44 24 28	 mov	 QWORD PTR tv70[rsp], rax
$LN7@newcompobj:
  00032	48 8b 44 24 28	 mov	 rax, QWORD PTR tv70[rsp]
  00037	48 89 44 24 20	 mov	 QWORD PTR self$[rsp], rax

; 118  :     if (self == NULL)

  0003c	48 83 7c 24 20
	00		 cmp	 QWORD PTR self$[rsp], 0
  00042	75 07		 jne	 SHORT $LN3@newcompobj

; 119  :         return NULL;

  00044	33 c0		 xor	 eax, eax
  00046	e9 af 00 00 00	 jmp	 $LN4@newcompobj
$LN3@newcompobj:

; 120  :     self->eof = 0;

  0004b	48 8b 44 24 20	 mov	 rax, QWORD PTR self$[rsp]
  00050	c6 80 c8 00 00
	00 00		 mov	 BYTE PTR [rax+200], 0

; 121  :     self->is_initialised = 0;

  00057	48 8b 44 24 20	 mov	 rax, QWORD PTR self$[rsp]
  0005c	c7 80 cc 00 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+204], 0

; 122  :     self->zdict = NULL;

  00066	48 8b 44 24 20	 mov	 rax, QWORD PTR self$[rsp]
  0006b	48 c7 80 d0 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+208], 0

; 123  :     self->unused_data = PyBytes_FromStringAndSize("", 0);

  00076	33 d2		 xor	 edx, edx
  00078	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  0007f	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  00084	48 8b 4c 24 20	 mov	 rcx, QWORD PTR self$[rsp]
  00089	48 89 81 b8 00
	00 00		 mov	 QWORD PTR [rcx+184], rax

; 124  :     if (self->unused_data == NULL) {

  00090	48 8b 44 24 20	 mov	 rax, QWORD PTR self$[rsp]
  00095	48 83 b8 b8 00
	00 00 00	 cmp	 QWORD PTR [rax+184], 0
  0009d	75 0e		 jne	 SHORT $LN2@newcompobj

; 125  :         Py_DECREF(self);

  0009f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR self$[rsp]
  000a4	e8 00 00 00 00	 call	 _Py_DecRef

; 126  :         return NULL;

  000a9	33 c0		 xor	 eax, eax
  000ab	eb 4d		 jmp	 SHORT $LN4@newcompobj
$LN2@newcompobj:

; 127  :     }
; 128  :     self->unconsumed_tail = PyBytes_FromStringAndSize("", 0);

  000ad	33 d2		 xor	 edx, edx
  000af	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  000b6	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  000bb	48 8b 4c 24 20	 mov	 rcx, QWORD PTR self$[rsp]
  000c0	48 89 81 c0 00
	00 00		 mov	 QWORD PTR [rcx+192], rax

; 129  :     if (self->unconsumed_tail == NULL) {

  000c7	48 8b 44 24 20	 mov	 rax, QWORD PTR self$[rsp]
  000cc	48 83 b8 c0 00
	00 00 00	 cmp	 QWORD PTR [rax+192], 0
  000d4	75 0e		 jne	 SHORT $LN1@newcompobj

; 130  :         Py_DECREF(self);

  000d6	48 8b 4c 24 20	 mov	 rcx, QWORD PTR self$[rsp]
  000db	e8 00 00 00 00	 call	 _Py_DecRef

; 131  :         return NULL;

  000e0	33 c0		 xor	 eax, eax
  000e2	eb 16		 jmp	 SHORT $LN4@newcompobj
$LN1@newcompobj:

; 132  :     }
; 133  : #ifdef WITH_THREAD
; 134  :     self->lock = PyThread_allocate_lock();

  000e4	e8 00 00 00 00	 call	 PyThread_allocate_lock
  000e9	48 8b 4c 24 20	 mov	 rcx, QWORD PTR self$[rsp]
  000ee	48 89 81 d8 00
	00 00		 mov	 QWORD PTR [rcx+216], rax

; 135  : #endif
; 136  :     return self;

  000f5	48 8b 44 24 20	 mov	 rax, QWORD PTR self$[rsp]
$LN4@newcompobj:

; 137  : }

  000fa	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000fe	c3		 ret	 0
newcompobject ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CE@GIHFBAJB@while?5creating?5decompression?5obj@ ; `string'
PUBLIC	$T22024
PUBLIC	??_C@_0CP@FBGHCAJG@Can?8t?5allocate?5memory?5for?5decomp@ ; `string'
PUBLIC	_Py_IncRef
PUBLIC	??_C@_0DA@ELPHBDDN@zdict?5argument?5must?5support?5the?5@ ; `string'
PUBLIC	??_C@_0BC@CJNGNBKB@?$HMiO?3decompressobj?$AA@	; `string'
EXTRN	PyExc_TypeError:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyZlib_decompressobj DD imagerel PyZlib_decompressobj
	DD	imagerel PyZlib_decompressobj+542
	DD	imagerel $unwind$PyZlib_decompressobj
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyZlib_decompressobj DD 041801H
	DD	0190118H
	DD	060107011H
xdata	ENDS
;	COMDAT ??_C@_0CE@GIHFBAJB@while?5creating?5decompression?5obj@
CONST	SEGMENT
??_C@_0CE@GIHFBAJB@while?5creating?5decompression?5obj@ DB 'while creatin'
	DB	'g decompression object', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@FBGHCAJG@Can?8t?5allocate?5memory?5for?5decomp@
CONST	SEGMENT
??_C@_0CP@FBGHCAJG@Can?8t?5allocate?5memory?5for?5decomp@ DB 'Can''t allo'
	DB	'cate memory for decompression object', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@ELPHBDDN@zdict?5argument?5must?5support?5the?5@
CONST	SEGMENT
??_C@_0DA@ELPHBDDN@zdict?5argument?5must?5support?5the?5@ DB 'zdict argum'
	DB	'ent must support the buffer protocol', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@CJNGNBKB@?$HMiO?3decompressobj?$AA@
CONST	SEGMENT
??_C@_0BC@CJNGNBKB@?$HMiO?3decompressobj?$AA@ DB '|iO:decompressobj', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyZlib_decompressobj
_TEXT	SEGMENT
wbits$ = 48
zdict$ = 56
self$ = 64
err$ = 72
$T22024 = 80
tv130 = 176
selfptr$ = 224
args$ = 232
kwargs$ = 240
PyZlib_decompressobj PROC				; COMDAT

; 404  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H

; 405  :     static char *kwlist[] = {"wbits", "zdict", NULL};
; 406  :     int wbits=DEF_WBITS, err;

  00018	c7 44 24 30 0f
	00 00 00	 mov	 DWORD PTR wbits$[rsp], 15

; 407  :     compobject *self;
; 408  :     PyObject *zdict=NULL;

  00020	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR zdict$[rsp], 0

; 409  : 
; 410  :     if (!PyArg_ParseTupleAndKeywords(args, kwargs, "|iO:decompressobj",
; 411  :                                      kwlist, &wbits, &zdict))

  00029	48 8d 44 24 38	 lea	 rax, QWORD PTR zdict$[rsp]
  0002e	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00033	48 8d 44 24 30	 lea	 rax, QWORD PTR wbits$[rsp]
  00038	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0003d	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?kwlist@?1??PyZlib_decompressobj@@9@9
  00044	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BC@CJNGNBKB@?$HMiO?3decompressobj?$AA@
  0004b	48 8b 94 24 f0
	00 00 00	 mov	 rdx, QWORD PTR kwargs$[rsp]
  00053	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  0005b	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  00060	85 c0		 test	 eax, eax
  00062	75 07		 jne	 SHORT $LN11@PyZlib_dec@2

; 412  :         return NULL;

  00064	33 c0		 xor	 eax, eax
  00066	e9 a9 01 00 00	 jmp	 $LN12@PyZlib_dec@2
$LN11@PyZlib_dec@2:

; 413  :     if (zdict != NULL && !PyObject_CheckBuffer(zdict)) {

  0006b	48 83 7c 24 38
	00		 cmp	 QWORD PTR zdict$[rsp], 0
  00071	74 43		 je	 SHORT $LN10@PyZlib_dec@2
  00073	48 8b 44 24 38	 mov	 rax, QWORD PTR zdict$[rsp]
  00078	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0007c	48 83 b8 f8 00
	00 00 00	 cmp	 QWORD PTR [rax+248], 0
  00084	74 16		 je	 SHORT $LN9@PyZlib_dec@2
  00086	48 8b 44 24 38	 mov	 rax, QWORD PTR zdict$[rsp]
  0008b	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0008f	48 8b 80 f8 00
	00 00		 mov	 rax, QWORD PTR [rax+248]
  00096	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  0009a	75 1a		 jne	 SHORT $LN10@PyZlib_dec@2
$LN9@PyZlib_dec@2:

; 414  :         PyErr_SetString(PyExc_TypeError,
; 415  :                         "zdict argument must support the buffer protocol");

  0009c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DA@ELPHBDDN@zdict?5argument?5must?5support?5the?5@
  000a3	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000aa	e8 00 00 00 00	 call	 PyErr_SetString

; 416  :         return NULL;

  000af	33 c0		 xor	 eax, eax
  000b1	e9 5e 01 00 00	 jmp	 $LN12@PyZlib_dec@2
$LN10@PyZlib_dec@2:

; 417  :     }
; 418  : 
; 419  :     self = newcompobject(&Decomptype);

  000b6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:Decomptype
  000bd	e8 00 00 00 00	 call	 newcompobject
  000c2	48 89 44 24 40	 mov	 QWORD PTR self$[rsp], rax

; 420  :     if (self == NULL)

  000c7	48 83 7c 24 40
	00		 cmp	 QWORD PTR self$[rsp], 0
  000cd	75 07		 jne	 SHORT $LN8@PyZlib_dec@2

; 421  :         return(NULL);

  000cf	33 c0		 xor	 eax, eax
  000d1	e9 3e 01 00 00	 jmp	 $LN12@PyZlib_dec@2
$LN8@PyZlib_dec@2:

; 422  :     self->zst.zalloc = (alloc_func)NULL;

  000d6	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  000db	48 c7 80 90 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+144], 0

; 423  :     self->zst.zfree = (free_func)Z_NULL;

  000e6	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  000eb	48 c7 80 98 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+152], 0

; 424  :     self->zst.next_in = NULL;

  000f6	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  000fb	48 c7 40 60 00
	00 00 00	 mov	 QWORD PTR [rax+96], 0

; 425  :     self->zst.avail_in = 0;

  00103	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00108	c7 40 68 00 00
	00 00		 mov	 DWORD PTR [rax+104], 0

; 426  :     if (zdict != NULL) {

  0010f	48 83 7c 24 38
	00		 cmp	 QWORD PTR zdict$[rsp], 0
  00115	74 1b		 je	 SHORT $LN7@PyZlib_dec@2

; 427  :         Py_INCREF(zdict);

  00117	48 8b 4c 24 38	 mov	 rcx, QWORD PTR zdict$[rsp]
  0011c	e8 00 00 00 00	 call	 _Py_IncRef

; 428  :         self->zdict = zdict;

  00121	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00126	48 8b 4c 24 38	 mov	 rcx, QWORD PTR zdict$[rsp]
  0012b	48 89 88 d0 00
	00 00		 mov	 QWORD PTR [rax+208], rcx
$LN7@PyZlib_dec@2:

; 429  :     }
; 430  :     err = inflateInit2(&self->zst, wbits);

  00132	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00137	48 83 c0 60	 add	 rax, 96			; 00000060H
  0013b	41 b9 58 00 00
	00		 mov	 r9d, 88			; 00000058H
  00141	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_05DFCKICEH@1?42?45?$AA@
  00148	8b 54 24 30	 mov	 edx, DWORD PTR wbits$[rsp]
  0014c	48 8b c8	 mov	 rcx, rax
  0014f	e8 00 00 00 00	 call	 inflateInit2_
  00154	89 44 24 48	 mov	 DWORD PTR err$[rsp], eax

; 431  :     switch(err) {

  00158	8b 44 24 48	 mov	 eax, DWORD PTR err$[rsp]
  0015c	89 84 24 b0 00
	00 00		 mov	 DWORD PTR tv130[rsp], eax
  00163	83 bc 24 b0 00
	00 00 fc	 cmp	 DWORD PTR tv130[rsp], -4
  0016b	74 4d		 je	 SHORT $LN2@PyZlib_dec@2
  0016d	83 bc 24 b0 00
	00 00 fe	 cmp	 DWORD PTR tv130[rsp], -2
  00175	74 22		 je	 SHORT $LN3@PyZlib_dec@2
  00177	83 bc 24 b0 00
	00 00 00	 cmp	 DWORD PTR tv130[rsp], 0
  0017f	74 02		 je	 SHORT $LN4@PyZlib_dec@2
  00181	eb 58		 jmp	 SHORT $LN1@PyZlib_dec@2
$LN4@PyZlib_dec@2:

; 432  :     case (Z_OK):
; 433  :         self->is_initialised = 1;

  00183	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00188	c7 80 cc 00 00
	00 01 00 00 00	 mov	 DWORD PTR [rax+204], 1

; 434  :         return (PyObject*)self;

  00192	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00197	eb 7b		 jmp	 SHORT $LN12@PyZlib_dec@2
$LN3@PyZlib_dec@2:

; 435  :     case(Z_STREAM_ERROR):
; 436  :         Py_DECREF(self);

  00199	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  0019e	e8 00 00 00 00	 call	 _Py_DecRef

; 437  :         PyErr_SetString(PyExc_ValueError, "Invalid initialization option");

  001a3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BO@DJJNHAML@Invalid?5initialization?5option?$AA@
  001aa	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  001b1	e8 00 00 00 00	 call	 PyErr_SetString

; 438  :         return NULL;

  001b6	33 c0		 xor	 eax, eax
  001b8	eb 5a		 jmp	 SHORT $LN12@PyZlib_dec@2
$LN2@PyZlib_dec@2:

; 439  :     case (Z_MEM_ERROR):
; 440  :         Py_DECREF(self);

  001ba	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  001bf	e8 00 00 00 00	 call	 _Py_DecRef

; 441  :         PyErr_SetString(PyExc_MemoryError,
; 442  :                         "Can't allocate memory for decompression object");

  001c4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CP@FBGHCAJG@Can?8t?5allocate?5memory?5for?5decomp@
  001cb	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_MemoryError
  001d2	e8 00 00 00 00	 call	 PyErr_SetString

; 443  :         return NULL;

  001d7	33 c0		 xor	 eax, eax
  001d9	eb 39		 jmp	 SHORT $LN12@PyZlib_dec@2
$LN1@PyZlib_dec@2:

; 444  :     default:
; 445  :         zlib_error(self->zst, err, "while creating decompression object");

  001db	48 8d 44 24 50	 lea	 rax, QWORD PTR $T22024[rsp]
  001e0	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  001e5	48 8b f8	 mov	 rdi, rax
  001e8	48 8d 71 60	 lea	 rsi, QWORD PTR [rcx+96]
  001ec	b9 58 00 00 00	 mov	 ecx, 88			; 00000058H
  001f1	f3 a4		 rep movsb
  001f3	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0CE@GIHFBAJB@while?5creating?5decompression?5obj@
  001fa	8b 54 24 48	 mov	 edx, DWORD PTR err$[rsp]
  001fe	48 8d 4c 24 50	 lea	 rcx, QWORD PTR $T22024[rsp]
  00203	e8 00 00 00 00	 call	 zlib_error

; 446  :         Py_DECREF(self);

  00208	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  0020d	e8 00 00 00 00	 call	 _Py_DecRef

; 447  :         return NULL;

  00212	33 c0		 xor	 eax, eax
$LN12@PyZlib_dec@2:

; 448  :     }
; 449  : }

  00214	48 81 c4 c8 00
	00 00		 add	 rsp, 200		; 000000c8H
  0021b	5f		 pop	 rdi
  0021c	5e		 pop	 rsi
  0021d	c3		 ret	 0
PyZlib_decompressobj ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN7
	DD	imagerel $LN7+132
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 6d		 jne	 SHORT $LN2@Py_IncRef
  00012	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0001a	4c 8b 4c 24 40	 mov	 r9, QWORD PTR op$[rsp]
  0001f	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_Guard
  00038	85 c0		 test	 eax, eax
  0003a	75 12		 jne	 SHORT $LN1@Py_IncRef
  0003c	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  00041	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00045	48 83 e0 20	 and	 rax, 32			; 00000020H
  00049	48 85 c0	 test	 rax, rax
  0004c	74 31		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;

  0004e	e8 00 00 00 00	 call	 _Py_PXCTX
  00053	85 c0		 test	 eax, eax
  00055	74 02		 je	 SHORT $LN5@Py_IncRef
  00057	eb 11		 jmp	 SHORT $LN6@Py_IncRef
$LN5@Py_IncRef:
  00059	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00060	48 ff c0	 inc	 rax
  00063	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN6@Py_IncRef:

; 907  :         (((PyObject*)(op))->ob_refcnt++);

  0006a	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  0006f	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00073	48 ff c0	 inc	 rax
  00076	48 8b 4c 24 40	 mov	 rcx, QWORD PTR op$[rsp]
  0007b	48 89 41 50	 mov	 QWORD PTR [rcx+80], rax
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  0007f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00083	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\modules\zlibmodule.c
pdata	SEGMENT
$pdata$Comp_dealloc DD imagerel Comp_dealloc
	DD	imagerel Comp_dealloc+55
	DD	imagerel $unwind$Comp_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Comp_dealloc DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT Comp_dealloc
_TEXT	SEGMENT
self$ = 48
Comp_dealloc PROC					; COMDAT

; 465  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 466  :     if (self->is_initialised)

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  0000e	83 b8 cc 00 00
	00 00		 cmp	 DWORD PTR [rax+204], 0
  00015	74 11		 je	 SHORT $LN1@Comp_deall

; 467  :         deflateEnd(&self->zst);

  00017	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  0001c	48 83 c0 60	 add	 rax, 96			; 00000060H
  00020	48 8b c8	 mov	 rcx, rax
  00023	e8 00 00 00 00	 call	 deflateEnd
$LN1@Comp_deall:

; 468  :     Dealloc(self);

  00028	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self$[rsp]
  0002d	e8 00 00 00 00	 call	 Dealloc

; 469  : }

  00032	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00036	c3		 ret	 0
Comp_dealloc ENDP
_TEXT	ENDS
EXTRN	_PyObject_DebugFree:PROC
EXTRN	PyThread_free_lock:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$Dealloc DD imagerel Dealloc
	DD	imagerel Dealloc+155
	DD	imagerel $unwind$Dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Dealloc DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT Dealloc
_TEXT	SEGMENT
self$ = 48
Dealloc	PROC						; COMDAT

; 453  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 454  : #ifdef WITH_THREAD
; 455  :     PyThread_free_lock(self->lock);

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  0000e	48 8b 88 d8 00
	00 00		 mov	 rcx, QWORD PTR [rax+216]
  00015	e8 00 00 00 00	 call	 PyThread_free_lock
$LN12@Dealloc:

; 456  : #endif
; 457  :     Py_XDECREF(self->unused_data);

  0001a	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  0001f	48 83 b8 b8 00
	00 00 00	 cmp	 QWORD PTR [rax+184], 0
  00027	74 11		 je	 SHORT $LN9@Dealloc
  00029	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  0002e	48 8b 88 b8 00
	00 00		 mov	 rcx, QWORD PTR [rax+184]
  00035	e8 00 00 00 00	 call	 _Py_DecRef
$LN9@Dealloc:
  0003a	33 c0		 xor	 eax, eax
  0003c	85 c0		 test	 eax, eax
  0003e	75 da		 jne	 SHORT $LN12@Dealloc
$LN8@Dealloc:

; 458  :     Py_XDECREF(self->unconsumed_tail);

  00040	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00045	48 83 b8 c0 00
	00 00 00	 cmp	 QWORD PTR [rax+192], 0
  0004d	74 11		 je	 SHORT $LN5@Dealloc
  0004f	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00054	48 8b 88 c0 00
	00 00		 mov	 rcx, QWORD PTR [rax+192]
  0005b	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@Dealloc:
  00060	33 c0		 xor	 eax, eax
  00062	85 c0		 test	 eax, eax
  00064	75 da		 jne	 SHORT $LN8@Dealloc
$LN4@Dealloc:

; 459  :     Py_XDECREF(self->zdict);

  00066	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  0006b	48 83 b8 d0 00
	00 00 00	 cmp	 QWORD PTR [rax+208], 0
  00073	74 11		 je	 SHORT $LN1@Dealloc
  00075	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  0007a	48 8b 88 d0 00
	00 00		 mov	 rcx, QWORD PTR [rax+208]
  00081	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@Dealloc:
  00086	33 c0		 xor	 eax, eax
  00088	85 c0		 test	 eax, eax
  0008a	75 da		 jne	 SHORT $LN4@Dealloc

; 460  :     PyObject_Del(self);

  0008c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self$[rsp]
  00091	e8 00 00 00 00	 call	 _PyObject_DebugFree

; 461  : }

  00096	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0009a	c3		 ret	 0
Dealloc	ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$Decomp_dealloc DD imagerel Decomp_dealloc
	DD	imagerel Decomp_dealloc+55
	DD	imagerel $unwind$Decomp_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$Decomp_dealloc DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT Decomp_dealloc
_TEXT	SEGMENT
self$ = 48
Decomp_dealloc PROC					; COMDAT

; 473  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 474  :     if (self->is_initialised)

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  0000e	83 b8 cc 00 00
	00 00		 cmp	 DWORD PTR [rax+204], 0
  00015	74 11		 je	 SHORT $LN1@Decomp_dea

; 475  :         inflateEnd(&self->zst);

  00017	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  0001c	48 83 c0 60	 add	 rax, 96			; 00000060H
  00020	48 8b c8	 mov	 rcx, rax
  00023	e8 00 00 00 00	 call	 inflateEnd
$LN1@Decomp_dea:

; 476  :     Dealloc(self);

  00028	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self$[rsp]
  0002d	e8 00 00 00 00	 call	 Dealloc

; 477  : }

  00032	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00036	c3		 ret	 0
Decomp_dealloc ENDP
_TEXT	ENDS
PUBLIC	$T22060
PUBLIC	??_C@_1CM@GNODNNDP@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAR?$AAe?$AAt?$AAV?$AAa?$AAl?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_0M@HGACCAGH@y?$CK?3compress?$AA@		; `string'
EXTRN	PyThread_release_lock:PROC
EXTRN	PyThread_acquire_lock:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyZlib_objcompress DD imagerel PyZlib_objcompress
	DD	imagerel PyZlib_objcompress+861
	DD	imagerel $unwind$PyZlib_objcompress
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyZlib_objcompress DD 041301H
	DD	0230113H
	DD	0600b700cH
xdata	ENDS
;	COMDAT ??_C@_1CM@GNODNNDP@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAR?$AAe?$AAt?$AAV?$AAa?$AAl?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CM@GNODNNDP@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAR?$AAe?$AAt?$AAV?$AAa?$AAl?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 's', 00H
	DB	'_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, '('
	DB	00H, 'R', 00H, 'e', 00H, 't', 00H, 'V', 00H, 'a', 00H, 'l', 00H
	DB	')', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@HGACCAGH@y?$CK?3compress?$AA@
CONST	SEGMENT
??_C@_0M@HGACCAGH@y?$CK?3compress?$AA@ DB 'y*:compress', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyZlib_objcompress
_TEXT	SEGMENT
RetVal$ = 32
length$ = 40
pinput$ = 48
input$ = 128
inplen$ = 136
start_total_out$ = 140
err$ = 144
_save$21219 = 152
_save$21225 = 160
_save$21237 = 168
$T22060 = 176
self$ = 304
args$ = 312
PyZlib_objcompress PROC					; COMDAT

; 489  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	48 81 ec 18 01
	00 00		 sub	 rsp, 280		; 00000118H

; 490  :     int err;
; 491  :     unsigned int inplen;
; 492  :     Py_ssize_t length = DEFAULTALLOC;

  00013	48 c7 44 24 28
	00 40 00 00	 mov	 QWORD PTR length$[rsp], 16384 ; 00004000H

; 493  :     PyObject *RetVal = NULL;

  0001c	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR RetVal$[rsp], 0

; 494  :     Py_buffer pinput;
; 495  :     Byte *input;
; 496  :     unsigned long start_total_out;
; 497  : 
; 498  :     if (!PyArg_ParseTuple(args, "y*:compress", &pinput))

  00025	4c 8d 44 24 30	 lea	 r8, QWORD PTR pinput$[rsp]
  0002a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@HGACCAGH@y?$CK?3compress?$AA@
  00031	48 8b 8c 24 38
	01 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  00039	e8 00 00 00 00	 call	 PyArg_ParseTuple
  0003e	85 c0		 test	 eax, eax
  00040	75 07		 jne	 SHORT $LN8@PyZlib_obj

; 499  :         return NULL;

  00042	33 c0		 xor	 eax, eax
  00044	e9 0a 03 00 00	 jmp	 $LN9@PyZlib_obj
$LN8@PyZlib_obj:

; 500  :     if (pinput.len > UINT_MAX) {

  00049	b8 ff ff ff ff	 mov	 eax, -1
  0004e	48 39 44 24 40	 cmp	 QWORD PTR pinput$[rsp+16], rax
  00053	7e 18		 jle	 SHORT $LN7@PyZlib_obj

; 501  :         PyErr_SetString(PyExc_OverflowError,
; 502  :                         "Size does not fit in an unsigned int");

  00055	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CF@HNAFKOOJ@Size?5does?5not?5fit?5in?5an?5unsigned@
  0005c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_OverflowError
  00063	e8 00 00 00 00	 call	 PyErr_SetString

; 503  :         goto error_outer;

  00068	e9 d7 02 00 00	 jmp	 $error_outer$21216
$LN7@PyZlib_obj:

; 504  :     }
; 505  :     input = pinput.buf;

  0006d	48 8b 44 24 30	 mov	 rax, QWORD PTR pinput$[rsp]
  00072	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR input$[rsp], rax

; 506  :     inplen = pinput.len;

  0007a	8b 44 24 40	 mov	 eax, DWORD PTR pinput$[rsp+16]
  0007e	89 84 24 88 00
	00 00		 mov	 DWORD PTR inplen$[rsp], eax

; 507  : 
; 508  :     if (!(RetVal = PyBytes_FromStringAndSize(NULL, length)))

  00085	48 8b 54 24 28	 mov	 rdx, QWORD PTR length$[rsp]
  0008a	33 c9		 xor	 ecx, ecx
  0008c	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  00091	48 89 44 24 20	 mov	 QWORD PTR RetVal$[rsp], rax
  00096	48 83 7c 24 20
	00		 cmp	 QWORD PTR RetVal$[rsp], 0
  0009c	75 05		 jne	 SHORT $LN6@PyZlib_obj

; 509  :         goto error_outer;

  0009e	e9 a1 02 00 00	 jmp	 $error_outer$21216
$LN6@PyZlib_obj:

; 510  : 
; 511  :     ENTER_ZLIB(self);

  000a3	e8 00 00 00 00	 call	 PyEval_SaveThread
  000a8	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR _save$21219[rsp], rax
  000b0	ba 01 00 00 00	 mov	 edx, 1
  000b5	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  000bd	48 8b 88 d8 00
	00 00		 mov	 rcx, QWORD PTR [rax+216]
  000c4	e8 00 00 00 00	 call	 PyThread_acquire_lock
  000c9	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR _save$21219[rsp]
  000d1	e8 00 00 00 00	 call	 PyEval_RestoreThread

; 512  : 
; 513  :     start_total_out = self->zst.total_out;

  000d6	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  000de	8b 40 7c	 mov	 eax, DWORD PTR [rax+124]
  000e1	89 84 24 8c 00
	00 00		 mov	 DWORD PTR start_total_out$[rsp], eax

; 514  :     self->zst.avail_in = inplen;

  000e8	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  000f0	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR inplen$[rsp]
  000f7	89 48 68	 mov	 DWORD PTR [rax+104], ecx

; 515  :     self->zst.next_in = input;

  000fa	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00102	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR input$[rsp]
  0010a	48 89 48 60	 mov	 QWORD PTR [rax+96], rcx

; 516  :     self->zst.avail_out = length;

  0010e	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00116	8b 4c 24 28	 mov	 ecx, DWORD PTR length$[rsp]
  0011a	89 48 78	 mov	 DWORD PTR [rax+120], ecx

; 517  :     self->zst.next_out = (unsigned char *)PyBytes_AS_STRING(RetVal);

  0011d	48 8b 44 24 20	 mov	 rax, QWORD PTR RetVal$[rsp]
  00122	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00126	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0012c	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  00131	85 c0		 test	 eax, eax
  00133	75 1c		 jne	 SHORT $LN11@PyZlib_obj
  00135	41 b8 05 02 00
	00		 mov	 r8d, 517		; 00000205H
  0013b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@EFPADLPK@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAz?$AAl?$AAi?$AAb?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  00142	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@GNODNNDP@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAR?$AAe?$AAt?$AAV?$AAa?$AAl?$AA?$CJ?$AA?$AA@
  00149	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0014f	33 c0		 xor	 eax, eax
$LN11@PyZlib_obj:
  00151	48 8b 44 24 20	 mov	 rax, QWORD PTR RetVal$[rsp]
  00156	48 83 c0 78	 add	 rax, 120		; 00000078H
  0015a	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00162	48 89 41 70	 mov	 QWORD PTR [rcx+112], rax

; 518  : 
; 519  :     Py_BEGIN_ALLOW_THREADS

  00166	e8 00 00 00 00	 call	 PyEval_SaveThread
  0016b	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR _save$21225[rsp], rax

; 520  :     err = deflate(&(self->zst), Z_NO_FLUSH);

  00173	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0017b	48 83 c0 60	 add	 rax, 96			; 00000060H
  0017f	33 d2		 xor	 edx, edx
  00181	48 8b c8	 mov	 rcx, rax
  00184	e8 00 00 00 00	 call	 deflate
  00189	89 84 24 90 00
	00 00		 mov	 DWORD PTR err$[rsp], eax

; 521  :     Py_END_ALLOW_THREADS

  00190	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR _save$21225[rsp]
  00198	e8 00 00 00 00	 call	 PyEval_RestoreThread
$LN5@PyZlib_obj:

; 522  : 
; 523  :     /* while Z_OK and the output buffer is full, there might be more output,
; 524  :        so extend the output buffer and try again */
; 525  :     while (err == Z_OK && self->zst.avail_out == 0) {

  0019d	83 bc 24 90 00
	00 00 00	 cmp	 DWORD PTR err$[rsp], 0
  001a5	0f 85 ea 00 00
	00		 jne	 $LN4@PyZlib_obj
  001ab	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  001b3	83 78 78 00	 cmp	 DWORD PTR [rax+120], 0
  001b7	0f 85 d8 00 00
	00		 jne	 $LN4@PyZlib_obj

; 526  :         if (_PyBytes_Resize(&RetVal, length << 1) < 0) {

  001bd	48 8b 44 24 28	 mov	 rax, QWORD PTR length$[rsp]
  001c2	48 03 c0	 add	 rax, rax
  001c5	48 8b d0	 mov	 rdx, rax
  001c8	48 8d 4c 24 20	 lea	 rcx, QWORD PTR RetVal$[rsp]
  001cd	e8 00 00 00 00	 call	 _PyBytes_Resize
  001d2	85 c0		 test	 eax, eax
  001d4	7d 18		 jge	 SHORT $LN3@PyZlib_obj

; 527  :             Py_DECREF(RetVal);

  001d6	48 8b 4c 24 20	 mov	 rcx, QWORD PTR RetVal$[rsp]
  001db	e8 00 00 00 00	 call	 _Py_DecRef

; 528  :             RetVal = NULL;

  001e0	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR RetVal$[rsp], 0

; 529  :             goto error;

  001e9	e9 42 01 00 00	 jmp	 $error$21232
$LN3@PyZlib_obj:

; 530  :         }
; 531  :         self->zst.next_out =
; 532  :             (unsigned char *)PyBytes_AS_STRING(RetVal) + length;

  001ee	48 8b 44 24 20	 mov	 rax, QWORD PTR RetVal$[rsp]
  001f3	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  001f7	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  001fd	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  00202	85 c0		 test	 eax, eax
  00204	75 1c		 jne	 SHORT $LN12@PyZlib_obj
  00206	41 b8 14 02 00
	00		 mov	 r8d, 532		; 00000214H
  0020c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@EFPADLPK@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAz?$AAl?$AAi?$AAb?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  00213	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@GNODNNDP@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAR?$AAe?$AAt?$AAV?$AAa?$AAl?$AA?$CJ?$AA?$AA@
  0021a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00220	33 c0		 xor	 eax, eax
$LN12@PyZlib_obj:
  00222	48 8b 44 24 20	 mov	 rax, QWORD PTR RetVal$[rsp]
  00227	48 8b 4c 24 28	 mov	 rcx, QWORD PTR length$[rsp]
  0022c	48 8d 44 08 78	 lea	 rax, QWORD PTR [rax+rcx+120]
  00231	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00239	48 89 41 70	 mov	 QWORD PTR [rcx+112], rax

; 533  :         self->zst.avail_out = length;

  0023d	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00245	8b 4c 24 28	 mov	 ecx, DWORD PTR length$[rsp]
  00249	89 48 78	 mov	 DWORD PTR [rax+120], ecx

; 534  :         length = length << 1;

  0024c	48 8b 44 24 28	 mov	 rax, QWORD PTR length$[rsp]
  00251	48 d1 e0	 shl	 rax, 1
  00254	48 89 44 24 28	 mov	 QWORD PTR length$[rsp], rax

; 535  : 
; 536  :         Py_BEGIN_ALLOW_THREADS

  00259	e8 00 00 00 00	 call	 PyEval_SaveThread
  0025e	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR _save$21237[rsp], rax

; 537  :         err = deflate(&(self->zst), Z_NO_FLUSH);

  00266	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0026e	48 83 c0 60	 add	 rax, 96			; 00000060H
  00272	33 d2		 xor	 edx, edx
  00274	48 8b c8	 mov	 rcx, rax
  00277	e8 00 00 00 00	 call	 deflate
  0027c	89 84 24 90 00
	00 00		 mov	 DWORD PTR err$[rsp], eax

; 538  :         Py_END_ALLOW_THREADS

  00283	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR _save$21237[rsp]
  0028b	e8 00 00 00 00	 call	 PyEval_RestoreThread

; 539  :     }

  00290	e9 08 ff ff ff	 jmp	 $LN5@PyZlib_obj
$LN4@PyZlib_obj:

; 540  :     /* We will only get Z_BUF_ERROR if the output buffer was full but
; 541  :        there wasn't more output when we tried again, so it is not an error
; 542  :        condition.
; 543  :     */
; 544  : 
; 545  :     if (err != Z_OK && err != Z_BUF_ERROR) {

  00295	83 bc 24 90 00
	00 00 00	 cmp	 DWORD PTR err$[rsp], 0
  0029d	74 58		 je	 SHORT $LN2@PyZlib_obj
  0029f	83 bc 24 90 00
	00 00 fb	 cmp	 DWORD PTR err$[rsp], -5
  002a7	74 4e		 je	 SHORT $LN2@PyZlib_obj

; 546  :         zlib_error(self->zst, err, "while compressing data");

  002a9	48 8d 84 24 b0
	00 00 00	 lea	 rax, QWORD PTR $T22060[rsp]
  002b1	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  002b9	48 8b f8	 mov	 rdi, rax
  002bc	48 8d 71 60	 lea	 rsi, QWORD PTR [rcx+96]
  002c0	b9 58 00 00 00	 mov	 ecx, 88			; 00000058H
  002c5	f3 a4		 rep movsb
  002c7	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BH@EEBMFEPN@while?5compressing?5data?$AA@
  002ce	8b 94 24 90 00
	00 00		 mov	 edx, DWORD PTR err$[rsp]
  002d5	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR $T22060[rsp]
  002dd	e8 00 00 00 00	 call	 zlib_error

; 547  :         Py_DECREF(RetVal);

  002e2	48 8b 4c 24 20	 mov	 rcx, QWORD PTR RetVal$[rsp]
  002e7	e8 00 00 00 00	 call	 _Py_DecRef

; 548  :         RetVal = NULL;

  002ec	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR RetVal$[rsp], 0

; 549  :         goto error;

  002f5	eb 39		 jmp	 SHORT $error$21232
$LN2@PyZlib_obj:

; 550  :     }
; 551  :     if (_PyBytes_Resize(&RetVal, self->zst.total_out - start_total_out) < 0) {

  002f7	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  002ff	8b 8c 24 8c 00
	00 00		 mov	 ecx, DWORD PTR start_total_out$[rsp]
  00306	8b 40 7c	 mov	 eax, DWORD PTR [rax+124]
  00309	2b c1		 sub	 eax, ecx
  0030b	8b c0		 mov	 eax, eax
  0030d	8b d0		 mov	 edx, eax
  0030f	48 8d 4c 24 20	 lea	 rcx, QWORD PTR RetVal$[rsp]
  00314	e8 00 00 00 00	 call	 _PyBytes_Resize
  00319	85 c0		 test	 eax, eax
  0031b	7d 13		 jge	 SHORT $LN1@PyZlib_obj

; 552  :         Py_DECREF(RetVal);

  0031d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR RetVal$[rsp]
  00322	e8 00 00 00 00	 call	 _Py_DecRef

; 553  :         RetVal = NULL;

  00327	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR RetVal$[rsp], 0
$LN1@PyZlib_obj:
$error$21232:

; 554  :     }
; 555  : 
; 556  :  error:
; 557  :     LEAVE_ZLIB(self);

  00330	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00338	48 8b 88 d8 00
	00 00		 mov	 rcx, QWORD PTR [rax+216]
  0033f	e8 00 00 00 00	 call	 PyThread_release_lock
$error_outer$21216:

; 558  :  error_outer:
; 559  :     PyBuffer_Release(&pinput);

  00344	48 8d 4c 24 30	 lea	 rcx, QWORD PTR pinput$[rsp]
  00349	e8 00 00 00 00	 call	 PyBuffer_Release

; 560  :     return RetVal;

  0034e	48 8b 44 24 20	 mov	 rax, QWORD PTR RetVal$[rsp]
$LN9@PyZlib_obj:

; 561  : }

  00353	48 81 c4 18 01
	00 00		 add	 rsp, 280		; 00000118H
  0035a	5f		 pop	 rdi
  0035b	5e		 pop	 rsi
  0035c	c3		 ret	 0
PyZlib_objcompress ENDP
_TEXT	ENDS
PUBLIC	$T22070
PUBLIC	$T22069
PUBLIC	??_C@_0CF@LLOIIPJP@max_length?5must?5be?5greater?5than?5@ ; `string'
PUBLIC	??_C@_0BA@MOJLCLOA@y?$CK?$HMi?3decompress?$AA@	; `string'
EXTRN	inflateSetDictionary:PROC
EXTRN	PyObject_GetBuffer:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyZlib_objdecompress DD imagerel PyZlib_objdecompress
	DD	imagerel PyZlib_objdecompress+1427
	DD	imagerel $unwind$PyZlib_objdecompress
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyZlib_objdecompress DD 041301H
	DD	03b0113H
	DD	0600b700cH
xdata	ENDS
;	COMDAT ??_C@_0CF@LLOIIPJP@max_length?5must?5be?5greater?5than?5@
CONST	SEGMENT
??_C@_0CF@LLOIIPJP@max_length?5must?5be?5greater?5than?5@ DB 'max_length '
	DB	'must be greater than zero', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@MOJLCLOA@y?$CK?$HMi?3decompress?$AA@
CONST	SEGMENT
??_C@_0BA@MOJLCLOA@y?$CK?$HMi?3decompress?$AA@ DB 'y*|i:decompress', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyZlib_objdecompress
_TEXT	SEGMENT
RetVal$ = 32
length$ = 40
pinput$ = 48
input$ = 128
max_length$ = 136
inplen$ = 140
old_length$ = 144
start_total_out$ = 152
err$ = 156
_save$21342 = 160
_save$21347 = 168
zdict_buf$21350 = 176
_save$21358 = 256
_save$21371 = 264
$T22069 = 272
$T22070 = 368
self$ = 496
args$ = 504
PyZlib_objdecompress PROC				; COMDAT

; 619  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	48 81 ec d8 01
	00 00		 sub	 rsp, 472		; 000001d8H

; 620  :     int err, max_length = 0;

  00013	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR max_length$[rsp], 0

; 621  :     unsigned int inplen;
; 622  :     Py_ssize_t old_length, length = DEFAULTALLOC;

  0001e	48 c7 44 24 28
	00 40 00 00	 mov	 QWORD PTR length$[rsp], 16384 ; 00004000H

; 623  :     PyObject *RetVal = NULL;

  00027	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR RetVal$[rsp], 0

; 624  :     Py_buffer pinput;
; 625  :     Byte *input;
; 626  :     unsigned long start_total_out;
; 627  : 
; 628  :     if (!PyArg_ParseTuple(args, "y*|i:decompress", &pinput,
; 629  :                           &max_length))

  00030	4c 8d 8c 24 88
	00 00 00	 lea	 r9, QWORD PTR max_length$[rsp]
  00038	4c 8d 44 24 30	 lea	 r8, QWORD PTR pinput$[rsp]
  0003d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BA@MOJLCLOA@y?$CK?$HMi?3decompress?$AA@
  00044	48 8b 8c 24 f8
	01 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  0004c	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00051	85 c0		 test	 eax, eax
  00053	75 07		 jne	 SHORT $LN18@PyZlib_obj@2

; 630  :         return NULL;

  00055	33 c0		 xor	 eax, eax
  00057	e9 2d 05 00 00	 jmp	 $LN19@PyZlib_obj@2
$LN18@PyZlib_obj@2:

; 631  :     if (pinput.len > UINT_MAX) {

  0005c	b8 ff ff ff ff	 mov	 eax, -1
  00061	48 39 44 24 40	 cmp	 QWORD PTR pinput$[rsp+16], rax
  00066	7e 18		 jle	 SHORT $LN17@PyZlib_obj@2

; 632  :         PyErr_SetString(PyExc_OverflowError,
; 633  :                         "Size does not fit in an unsigned int");

  00068	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CF@HNAFKOOJ@Size?5does?5not?5fit?5in?5an?5unsigned@
  0006f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_OverflowError
  00076	e8 00 00 00 00	 call	 PyErr_SetString

; 634  :         goto error_outer;

  0007b	e9 fa 04 00 00	 jmp	 $error_outer$21336
$LN17@PyZlib_obj@2:

; 635  :     }
; 636  :     input = pinput.buf;

  00080	48 8b 44 24 30	 mov	 rax, QWORD PTR pinput$[rsp]
  00085	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR input$[rsp], rax

; 637  :     inplen = pinput.len;

  0008d	8b 44 24 40	 mov	 eax, DWORD PTR pinput$[rsp+16]
  00091	89 84 24 8c 00
	00 00		 mov	 DWORD PTR inplen$[rsp], eax

; 638  :     if (max_length < 0) {

  00098	83 bc 24 88 00
	00 00 00	 cmp	 DWORD PTR max_length$[rsp], 0
  000a0	7d 18		 jge	 SHORT $LN16@PyZlib_obj@2

; 639  :         PyErr_SetString(PyExc_ValueError,
; 640  :                         "max_length must be greater than zero");

  000a2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CF@LLOIIPJP@max_length?5must?5be?5greater?5than?5@
  000a9	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  000b0	e8 00 00 00 00	 call	 PyErr_SetString

; 641  :         goto error_outer;

  000b5	e9 c0 04 00 00	 jmp	 $error_outer$21336
$LN16@PyZlib_obj@2:

; 642  :     }
; 643  : 
; 644  :     /* limit amount of data allocated to max_length */
; 645  :     if (max_length && length > max_length)

  000ba	83 bc 24 88 00
	00 00 00	 cmp	 DWORD PTR max_length$[rsp], 0
  000c2	74 1c		 je	 SHORT $LN15@PyZlib_obj@2
  000c4	48 63 84 24 88
	00 00 00	 movsxd	 rax, DWORD PTR max_length$[rsp]
  000cc	48 39 44 24 28	 cmp	 QWORD PTR length$[rsp], rax
  000d1	7e 0d		 jle	 SHORT $LN15@PyZlib_obj@2

; 646  :         length = max_length;

  000d3	48 63 84 24 88
	00 00 00	 movsxd	 rax, DWORD PTR max_length$[rsp]
  000db	48 89 44 24 28	 mov	 QWORD PTR length$[rsp], rax
$LN15@PyZlib_obj@2:

; 647  :     if (!(RetVal = PyBytes_FromStringAndSize(NULL, length)))

  000e0	48 8b 54 24 28	 mov	 rdx, QWORD PTR length$[rsp]
  000e5	33 c9		 xor	 ecx, ecx
  000e7	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  000ec	48 89 44 24 20	 mov	 QWORD PTR RetVal$[rsp], rax
  000f1	48 83 7c 24 20
	00		 cmp	 QWORD PTR RetVal$[rsp], 0
  000f7	75 05		 jne	 SHORT $LN14@PyZlib_obj@2

; 648  :         goto error_outer;

  000f9	e9 7c 04 00 00	 jmp	 $error_outer$21336
$LN14@PyZlib_obj@2:

; 649  : 
; 650  :     ENTER_ZLIB(self);

  000fe	e8 00 00 00 00	 call	 PyEval_SaveThread
  00103	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR _save$21342[rsp], rax
  0010b	ba 01 00 00 00	 mov	 edx, 1
  00110	48 8b 84 24 f0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00118	48 8b 88 d8 00
	00 00		 mov	 rcx, QWORD PTR [rax+216]
  0011f	e8 00 00 00 00	 call	 PyThread_acquire_lock
  00124	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR _save$21342[rsp]
  0012c	e8 00 00 00 00	 call	 PyEval_RestoreThread

; 651  : 
; 652  :     start_total_out = self->zst.total_out;

  00131	48 8b 84 24 f0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00139	8b 40 7c	 mov	 eax, DWORD PTR [rax+124]
  0013c	89 84 24 98 00
	00 00		 mov	 DWORD PTR start_total_out$[rsp], eax

; 653  :     self->zst.avail_in = inplen;

  00143	48 8b 84 24 f0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0014b	8b 8c 24 8c 00
	00 00		 mov	 ecx, DWORD PTR inplen$[rsp]
  00152	89 48 68	 mov	 DWORD PTR [rax+104], ecx

; 654  :     self->zst.next_in = input;

  00155	48 8b 84 24 f0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0015d	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR input$[rsp]
  00165	48 89 48 60	 mov	 QWORD PTR [rax+96], rcx

; 655  :     self->zst.avail_out = length;

  00169	48 8b 84 24 f0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00171	8b 4c 24 28	 mov	 ecx, DWORD PTR length$[rsp]
  00175	89 48 78	 mov	 DWORD PTR [rax+120], ecx

; 656  :     self->zst.next_out = (unsigned char *)PyBytes_AS_STRING(RetVal);

  00178	48 8b 44 24 20	 mov	 rax, QWORD PTR RetVal$[rsp]
  0017d	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00181	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00187	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  0018c	85 c0		 test	 eax, eax
  0018e	75 1c		 jne	 SHORT $LN21@PyZlib_obj@2
  00190	41 b8 90 02 00
	00		 mov	 r8d, 656		; 00000290H
  00196	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@EFPADLPK@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAz?$AAl?$AAi?$AAb?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  0019d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@GNODNNDP@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAR?$AAe?$AAt?$AAV?$AAa?$AAl?$AA?$CJ?$AA?$AA@
  001a4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001aa	33 c0		 xor	 eax, eax
$LN21@PyZlib_obj@2:
  001ac	48 8b 44 24 20	 mov	 rax, QWORD PTR RetVal$[rsp]
  001b1	48 83 c0 78	 add	 rax, 120		; 00000078H
  001b5	48 8b 8c 24 f0
	01 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  001bd	48 89 41 70	 mov	 QWORD PTR [rcx+112], rax

; 657  : 
; 658  :     Py_BEGIN_ALLOW_THREADS

  001c1	e8 00 00 00 00	 call	 PyEval_SaveThread
  001c6	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR _save$21347[rsp], rax

; 659  :     err = inflate(&(self->zst), Z_SYNC_FLUSH);

  001ce	48 8b 84 24 f0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  001d6	48 83 c0 60	 add	 rax, 96			; 00000060H
  001da	ba 02 00 00 00	 mov	 edx, 2
  001df	48 8b c8	 mov	 rcx, rax
  001e2	e8 00 00 00 00	 call	 inflate
  001e7	89 84 24 9c 00
	00 00		 mov	 DWORD PTR err$[rsp], eax

; 660  :     Py_END_ALLOW_THREADS

  001ee	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR _save$21347[rsp]
  001f6	e8 00 00 00 00	 call	 PyEval_RestoreThread

; 661  : 
; 662  :     if (err == Z_NEED_DICT && self->zdict != NULL) {

  001fb	83 bc 24 9c 00
	00 00 02	 cmp	 DWORD PTR err$[rsp], 2
  00203	0f 85 1f 01 00
	00		 jne	 $LN13@PyZlib_obj@2
  00209	48 8b 84 24 f0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00211	48 83 b8 d0 00
	00 00 00	 cmp	 QWORD PTR [rax+208], 0
  00219	0f 84 09 01 00
	00		 je	 $LN13@PyZlib_obj@2

; 663  :         Py_buffer zdict_buf;
; 664  :         if (PyObject_GetBuffer(self->zdict, &zdict_buf, PyBUF_SIMPLE) == -1) {

  0021f	45 33 c0	 xor	 r8d, r8d
  00222	48 8d 94 24 b0
	00 00 00	 lea	 rdx, QWORD PTR zdict_buf$21350[rsp]
  0022a	48 8b 84 24 f0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00232	48 8b 88 d0 00
	00 00		 mov	 rcx, QWORD PTR [rax+208]
  00239	e8 00 00 00 00	 call	 PyObject_GetBuffer
  0023e	83 f8 ff	 cmp	 eax, -1
  00241	75 18		 jne	 SHORT $LN12@PyZlib_obj@2

; 665  :             Py_DECREF(RetVal);

  00243	48 8b 4c 24 20	 mov	 rcx, QWORD PTR RetVal$[rsp]
  00248	e8 00 00 00 00	 call	 _Py_DecRef

; 666  :             RetVal = NULL;

  0024d	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR RetVal$[rsp], 0

; 667  :             goto error;

  00256	e9 0b 03 00 00	 jmp	 $error$21354
$LN12@PyZlib_obj@2:

; 668  :         }
; 669  :         err = inflateSetDictionary(&(self->zst), zdict_buf.buf, zdict_buf.len);

  0025b	48 8b 84 24 f0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00263	48 83 c0 60	 add	 rax, 96			; 00000060H
  00267	44 8b 84 24 c0
	00 00 00	 mov	 r8d, DWORD PTR zdict_buf$21350[rsp+16]
  0026f	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR zdict_buf$21350[rsp]
  00277	48 8b c8	 mov	 rcx, rax
  0027a	e8 00 00 00 00	 call	 inflateSetDictionary
  0027f	89 84 24 9c 00
	00 00		 mov	 DWORD PTR err$[rsp], eax

; 670  :         PyBuffer_Release(&zdict_buf);

  00286	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR zdict_buf$21350[rsp]
  0028e	e8 00 00 00 00	 call	 PyBuffer_Release

; 671  :         if (err != Z_OK) {

  00293	83 bc 24 9c 00
	00 00 00	 cmp	 DWORD PTR err$[rsp], 0
  0029b	74 51		 je	 SHORT $LN11@PyZlib_obj@2

; 672  :             zlib_error(self->zst, err, "while decompressing data");

  0029d	48 8d 84 24 10
	01 00 00	 lea	 rax, QWORD PTR $T22069[rsp]
  002a5	48 8b 8c 24 f0
	01 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  002ad	48 8b f8	 mov	 rdi, rax
  002b0	48 8d 71 60	 lea	 rsi, QWORD PTR [rcx+96]
  002b4	b9 58 00 00 00	 mov	 ecx, 88			; 00000058H
  002b9	f3 a4		 rep movsb
  002bb	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BJ@KAMAGNFL@while?5decompressing?5data?$AA@
  002c2	8b 94 24 9c 00
	00 00		 mov	 edx, DWORD PTR err$[rsp]
  002c9	48 8d 8c 24 10
	01 00 00	 lea	 rcx, QWORD PTR $T22069[rsp]
  002d1	e8 00 00 00 00	 call	 zlib_error

; 673  :             Py_DECREF(RetVal);

  002d6	48 8b 4c 24 20	 mov	 rcx, QWORD PTR RetVal$[rsp]
  002db	e8 00 00 00 00	 call	 _Py_DecRef

; 674  :             RetVal = NULL;

  002e0	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR RetVal$[rsp], 0

; 675  :             goto error;

  002e9	e9 78 02 00 00	 jmp	 $error$21354
$LN11@PyZlib_obj@2:

; 676  :         }
; 677  :         /* Repeat the call to inflate. */
; 678  :         Py_BEGIN_ALLOW_THREADS

  002ee	e8 00 00 00 00	 call	 PyEval_SaveThread
  002f3	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR _save$21358[rsp], rax

; 679  :         err = inflate(&(self->zst), Z_SYNC_FLUSH);

  002fb	48 8b 84 24 f0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00303	48 83 c0 60	 add	 rax, 96			; 00000060H
  00307	ba 02 00 00 00	 mov	 edx, 2
  0030c	48 8b c8	 mov	 rcx, rax
  0030f	e8 00 00 00 00	 call	 inflate
  00314	89 84 24 9c 00
	00 00		 mov	 DWORD PTR err$[rsp], eax

; 680  :         Py_END_ALLOW_THREADS

  0031b	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR _save$21358[rsp]
  00323	e8 00 00 00 00	 call	 PyEval_RestoreThread
$LN13@PyZlib_obj@2:
$LN10@PyZlib_obj@2:

; 681  :     }
; 682  : 
; 683  :     /* While Z_OK and the output buffer is full, there might be more output.
; 684  :        So extend the output buffer and try again.
; 685  :     */
; 686  :     while (err == Z_OK && self->zst.avail_out == 0) {

  00328	83 bc 24 9c 00
	00 00 00	 cmp	 DWORD PTR err$[rsp], 0
  00330	0f 85 4a 01 00
	00		 jne	 $LN9@PyZlib_obj@2
  00336	48 8b 84 24 f0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0033e	83 78 78 00	 cmp	 DWORD PTR [rax+120], 0
  00342	0f 85 38 01 00
	00		 jne	 $LN9@PyZlib_obj@2

; 687  :         /* If max_length set, don't continue decompressing if we've already
; 688  :            reached the limit.
; 689  :         */
; 690  :         if (max_length && length >= max_length)

  00348	83 bc 24 88 00
	00 00 00	 cmp	 DWORD PTR max_length$[rsp], 0
  00350	74 14		 je	 SHORT $LN8@PyZlib_obj@2
  00352	48 63 84 24 88
	00 00 00	 movsxd	 rax, DWORD PTR max_length$[rsp]
  0035a	48 39 44 24 28	 cmp	 QWORD PTR length$[rsp], rax
  0035f	7c 05		 jl	 SHORT $LN8@PyZlib_obj@2

; 691  :             break;

  00361	e9 1a 01 00 00	 jmp	 $LN9@PyZlib_obj@2
$LN8@PyZlib_obj@2:

; 692  : 
; 693  :         /* otherwise, ... */
; 694  :         old_length = length;

  00366	48 8b 44 24 28	 mov	 rax, QWORD PTR length$[rsp]
  0036b	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR old_length$[rsp], rax

; 695  :         length = length << 1;

  00373	48 8b 44 24 28	 mov	 rax, QWORD PTR length$[rsp]
  00378	48 d1 e0	 shl	 rax, 1
  0037b	48 89 44 24 28	 mov	 QWORD PTR length$[rsp], rax

; 696  :         if (max_length && length > max_length)

  00380	83 bc 24 88 00
	00 00 00	 cmp	 DWORD PTR max_length$[rsp], 0
  00388	74 1c		 je	 SHORT $LN7@PyZlib_obj@2
  0038a	48 63 84 24 88
	00 00 00	 movsxd	 rax, DWORD PTR max_length$[rsp]
  00392	48 39 44 24 28	 cmp	 QWORD PTR length$[rsp], rax
  00397	7e 0d		 jle	 SHORT $LN7@PyZlib_obj@2

; 697  :             length = max_length;

  00399	48 63 84 24 88
	00 00 00	 movsxd	 rax, DWORD PTR max_length$[rsp]
  003a1	48 89 44 24 28	 mov	 QWORD PTR length$[rsp], rax
$LN7@PyZlib_obj@2:

; 698  : 
; 699  :         if (_PyBytes_Resize(&RetVal, length) < 0) {

  003a6	48 8b 54 24 28	 mov	 rdx, QWORD PTR length$[rsp]
  003ab	48 8d 4c 24 20	 lea	 rcx, QWORD PTR RetVal$[rsp]
  003b0	e8 00 00 00 00	 call	 _PyBytes_Resize
  003b5	85 c0		 test	 eax, eax
  003b7	7d 18		 jge	 SHORT $LN6@PyZlib_obj@2

; 700  :             Py_DECREF(RetVal);

  003b9	48 8b 4c 24 20	 mov	 rcx, QWORD PTR RetVal$[rsp]
  003be	e8 00 00 00 00	 call	 _Py_DecRef

; 701  :             RetVal = NULL;

  003c3	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR RetVal$[rsp], 0

; 702  :             goto error;

  003cc	e9 95 01 00 00	 jmp	 $error$21354
$LN6@PyZlib_obj@2:

; 703  :         }
; 704  :         self->zst.next_out =
; 705  :             (unsigned char *)PyBytes_AS_STRING(RetVal) + old_length;

  003d1	48 8b 44 24 20	 mov	 rax, QWORD PTR RetVal$[rsp]
  003d6	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  003da	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  003e0	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  003e5	85 c0		 test	 eax, eax
  003e7	75 1c		 jne	 SHORT $LN22@PyZlib_obj@2
  003e9	41 b8 c1 02 00
	00		 mov	 r8d, 705		; 000002c1H
  003ef	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@EFPADLPK@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAz?$AAl?$AAi?$AAb?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  003f6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@GNODNNDP@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAR?$AAe?$AAt?$AAV?$AAa?$AAl?$AA?$CJ?$AA?$AA@
  003fd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00403	33 c0		 xor	 eax, eax
$LN22@PyZlib_obj@2:
  00405	48 8b 44 24 20	 mov	 rax, QWORD PTR RetVal$[rsp]
  0040a	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR old_length$[rsp]
  00412	48 8d 44 08 78	 lea	 rax, QWORD PTR [rax+rcx+120]
  00417	48 8b 8c 24 f0
	01 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  0041f	48 89 41 70	 mov	 QWORD PTR [rcx+112], rax

; 706  :         self->zst.avail_out = length - old_length;

  00423	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR old_length$[rsp]
  0042b	48 8b 4c 24 28	 mov	 rcx, QWORD PTR length$[rsp]
  00430	48 2b c8	 sub	 rcx, rax
  00433	48 8b c1	 mov	 rax, rcx
  00436	48 8b 8c 24 f0
	01 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  0043e	89 41 78	 mov	 DWORD PTR [rcx+120], eax

; 707  : 
; 708  :         Py_BEGIN_ALLOW_THREADS

  00441	e8 00 00 00 00	 call	 PyEval_SaveThread
  00446	48 89 84 24 08
	01 00 00	 mov	 QWORD PTR _save$21371[rsp], rax

; 709  :         err = inflate(&(self->zst), Z_SYNC_FLUSH);

  0044e	48 8b 84 24 f0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00456	48 83 c0 60	 add	 rax, 96			; 00000060H
  0045a	ba 02 00 00 00	 mov	 edx, 2
  0045f	48 8b c8	 mov	 rcx, rax
  00462	e8 00 00 00 00	 call	 inflate
  00467	89 84 24 9c 00
	00 00		 mov	 DWORD PTR err$[rsp], eax

; 710  :         Py_END_ALLOW_THREADS

  0046e	48 8b 8c 24 08
	01 00 00	 mov	 rcx, QWORD PTR _save$21371[rsp]
  00476	e8 00 00 00 00	 call	 PyEval_RestoreThread

; 711  :     }

  0047b	e9 a8 fe ff ff	 jmp	 $LN10@PyZlib_obj@2
$LN9@PyZlib_obj@2:

; 712  : 
; 713  :     if (save_unconsumed_input(self, err) < 0) {

  00480	8b 94 24 9c 00
	00 00		 mov	 edx, DWORD PTR err$[rsp]
  00487	48 8b 8c 24 f0
	01 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  0048f	e8 00 00 00 00	 call	 save_unconsumed_input
  00494	85 c0		 test	 eax, eax
  00496	7d 18		 jge	 SHORT $LN5@PyZlib_obj@2

; 714  :         Py_DECREF(RetVal);

  00498	48 8b 4c 24 20	 mov	 rcx, QWORD PTR RetVal$[rsp]
  0049d	e8 00 00 00 00	 call	 _Py_DecRef

; 715  :         RetVal = NULL;

  004a2	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR RetVal$[rsp], 0

; 716  :         goto error;

  004ab	e9 b6 00 00 00	 jmp	 $error$21354
$LN5@PyZlib_obj@2:

; 717  :     }
; 718  : 
; 719  :     if (err == Z_STREAM_END) {

  004b0	83 bc 24 9c 00
	00 00 01	 cmp	 DWORD PTR err$[rsp], 1
  004b8	75 11		 jne	 SHORT $LN4@PyZlib_obj@2

; 720  :         /* This is the logical place to call inflateEnd, but the old behaviour
; 721  :            of only calling it on flush() is preserved. */
; 722  :         self->eof = 1;

  004ba	48 8b 84 24 f0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  004c2	c6 80 c8 00 00
	00 01		 mov	 BYTE PTR [rax+200], 1
  004c9	eb 62		 jmp	 SHORT $LN3@PyZlib_obj@2
$LN4@PyZlib_obj@2:

; 723  :     } else if (err != Z_OK && err != Z_BUF_ERROR) {

  004cb	83 bc 24 9c 00
	00 00 00	 cmp	 DWORD PTR err$[rsp], 0
  004d3	74 58		 je	 SHORT $LN2@PyZlib_obj@2
  004d5	83 bc 24 9c 00
	00 00 fb	 cmp	 DWORD PTR err$[rsp], -5
  004dd	74 4e		 je	 SHORT $LN2@PyZlib_obj@2

; 724  :         /* We will only get Z_BUF_ERROR if the output buffer was full
; 725  :            but there wasn't more output when we tried again, so it is
; 726  :            not an error condition.
; 727  :         */
; 728  :         zlib_error(self->zst, err, "while decompressing data");

  004df	48 8d 84 24 70
	01 00 00	 lea	 rax, QWORD PTR $T22070[rsp]
  004e7	48 8b 8c 24 f0
	01 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  004ef	48 8b f8	 mov	 rdi, rax
  004f2	48 8d 71 60	 lea	 rsi, QWORD PTR [rcx+96]
  004f6	b9 58 00 00 00	 mov	 ecx, 88			; 00000058H
  004fb	f3 a4		 rep movsb
  004fd	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BJ@KAMAGNFL@while?5decompressing?5data?$AA@
  00504	8b 94 24 9c 00
	00 00		 mov	 edx, DWORD PTR err$[rsp]
  0050b	48 8d 8c 24 70
	01 00 00	 lea	 rcx, QWORD PTR $T22070[rsp]
  00513	e8 00 00 00 00	 call	 zlib_error

; 729  :         Py_DECREF(RetVal);

  00518	48 8b 4c 24 20	 mov	 rcx, QWORD PTR RetVal$[rsp]
  0051d	e8 00 00 00 00	 call	 _Py_DecRef

; 730  :         RetVal = NULL;

  00522	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR RetVal$[rsp], 0

; 731  :         goto error;

  0052b	eb 39		 jmp	 SHORT $error$21354
$LN2@PyZlib_obj@2:
$LN3@PyZlib_obj@2:

; 732  :     }
; 733  : 
; 734  :     if (_PyBytes_Resize(&RetVal, self->zst.total_out - start_total_out) < 0) {

  0052d	48 8b 84 24 f0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00535	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR start_total_out$[rsp]
  0053c	8b 40 7c	 mov	 eax, DWORD PTR [rax+124]
  0053f	2b c1		 sub	 eax, ecx
  00541	8b c0		 mov	 eax, eax
  00543	8b d0		 mov	 edx, eax
  00545	48 8d 4c 24 20	 lea	 rcx, QWORD PTR RetVal$[rsp]
  0054a	e8 00 00 00 00	 call	 _PyBytes_Resize
  0054f	85 c0		 test	 eax, eax
  00551	7d 13		 jge	 SHORT $LN1@PyZlib_obj@2

; 735  :         Py_DECREF(RetVal);

  00553	48 8b 4c 24 20	 mov	 rcx, QWORD PTR RetVal$[rsp]
  00558	e8 00 00 00 00	 call	 _Py_DecRef

; 736  :         RetVal = NULL;

  0055d	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR RetVal$[rsp], 0
$LN1@PyZlib_obj@2:
$error$21354:

; 737  :     }
; 738  : 
; 739  :  error:
; 740  :     LEAVE_ZLIB(self);

  00566	48 8b 84 24 f0
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0056e	48 8b 88 d8 00
	00 00		 mov	 rcx, QWORD PTR [rax+216]
  00575	e8 00 00 00 00	 call	 PyThread_release_lock
$error_outer$21336:

; 741  :  error_outer:
; 742  :     PyBuffer_Release(&pinput);

  0057a	48 8d 4c 24 30	 lea	 rcx, QWORD PTR pinput$[rsp]
  0057f	e8 00 00 00 00	 call	 PyBuffer_Release

; 743  :     return RetVal;

  00584	48 8b 44 24 20	 mov	 rax, QWORD PTR RetVal$[rsp]
$LN19@PyZlib_obj@2:

; 744  : }

  00589	48 81 c4 d8 01
	00 00		 add	 rsp, 472		; 000001d8H
  00590	5f		 pop	 rdi
  00591	5e		 pop	 rsi
  00592	c3		 ret	 0
PyZlib_objdecompress ENDP
_TEXT	ENDS
PUBLIC	??_C@_1EK@DNFGIDFE@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAu?$AAn?$AAc?$AAo?$AAn?$AAs?$AAu?$AAm?$AAe?$AAd?$AA_?$AAt@ ; `string'
PUBLIC	??_C@_1DA@HIDHFINF@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAn?$AAe?$AAw?$AA_?$AAd?$AAa?$AAt?$AAa?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1EC@NMFPDAKO@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAu?$AAn?$AAu?$AAs?$AAe?$AAd?$AA_?$AAd?$AAa?$AAt?$AAa?$AA?$CJ@ ; `string'
EXTRN	memcpy:PROC
EXTRN	PyErr_NoMemory:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$save_unconsumed_input DD imagerel save_unconsumed_input
	DD	imagerel save_unconsumed_input+992
	DD	imagerel $unwind$save_unconsumed_input
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$save_unconsumed_input DD 021001H
	DD	0110110H
xdata	ENDS
;	COMDAT ??_C@_1EK@DNFGIDFE@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAu?$AAn?$AAc?$AAo?$AAn?$AAs?$AAu?$AAm?$AAe?$AAd?$AA_?$AAt@
CONST	SEGMENT
??_C@_1EK@DNFGIDFE@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAu?$AAn?$AAc?$AAo?$AAn?$AAs?$AAu?$AAm?$AAe?$AAd?$AA_?$AAt@ DB 'P'
	DB	00H, 'y', 00H, 'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 's', 00H
	DB	'_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, '('
	DB	00H, 's', 00H, 'e', 00H, 'l', 00H, 'f', 00H, '-', 00H, '>', 00H
	DB	'u', 00H, 'n', 00H, 'c', 00H, 'o', 00H, 'n', 00H, 's', 00H, 'u'
	DB	00H, 'm', 00H, 'e', 00H, 'd', 00H, '_', 00H, 't', 00H, 'a', 00H
	DB	'i', 00H, 'l', 00H, ')', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1DA@HIDHFINF@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAn?$AAe?$AAw?$AA_?$AAd?$AAa?$AAt?$AAa?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DA@HIDHFINF@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAn?$AAe?$AAw?$AA_?$AAd?$AAa?$AAt?$AAa?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 's', 00H
	DB	'_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, '('
	DB	00H, 'n', 00H, 'e', 00H, 'w', 00H, '_', 00H, 'd', 00H, 'a', 00H
	DB	't', 00H, 'a', 00H, ')', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1EC@NMFPDAKO@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAu?$AAn?$AAu?$AAs?$AAe?$AAd?$AA_?$AAd?$AAa?$AAt?$AAa?$AA?$CJ@
CONST	SEGMENT
??_C@_1EC@NMFPDAKO@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAu?$AAn?$AAu?$AAs?$AAe?$AAd?$AA_?$AAd?$AAa?$AAt?$AAa?$AA?$CJ@ DB 'P'
	DB	00H, 'y', 00H, 'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 's', 00H
	DB	'_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, '('
	DB	00H, 's', 00H, 'e', 00H, 'l', 00H, 'f', 00H, '-', 00H, '>', 00H
	DB	'u', 00H, 'n', 00H, 'u', 00H, 's', 00H, 'e', 00H, 'd', 00H, '_'
	DB	00H, 'd', 00H, 'a', 00H, 't', 00H, 'a', 00H, ')', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT save_unconsumed_input
_TEXT	SEGMENT
new_size$21257 = 32
old_size$21252 = 40
new_data$21258 = 48
t_$21270 = 56
s_$21276 = 64
i_$21268 = 72
n_$21269 = 80
t_$21291 = 88
s_$21296 = 96
i_$21289 = 104
n_$21290 = 112
new_data$21310 = 120
self$ = 144
err$ = 152
save_unconsumed_input PROC				; COMDAT

; 567  : {

  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 568  :     if (err == Z_STREAM_END) {

  00010	83 bc 24 98 00
	00 00 01	 cmp	 DWORD PTR err$[rsp], 1
  00018	0f 85 fc 02 00
	00		 jne	 $LN23@save_uncon

; 569  :         /* The end of the compressed data has been reached. Store the leftover
; 570  :            input data in self->unused_data. */
; 571  :         if (self->zst.avail_in > 0) {

  0001e	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00026	83 78 68 00	 cmp	 DWORD PTR [rax+104], 0
  0002a	0f 86 ea 02 00
	00		 jbe	 $LN22@save_uncon

; 572  :             Py_ssize_t old_size = PyBytes_GET_SIZE(self->unused_data);

  00030	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00038	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  0003f	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00043	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00049	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  0004e	85 c0		 test	 eax, eax
  00050	75 1c		 jne	 SHORT $LN26@save_uncon
  00052	41 b8 3c 02 00
	00		 mov	 r8d, 572		; 0000023cH
  00058	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@EFPADLPK@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAz?$AAl?$AAi?$AAb?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  0005f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EC@NMFPDAKO@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAu?$AAn?$AAu?$AAs?$AAe?$AAd?$AA_?$AAd?$AAa?$AAt?$AAa?$AA?$CJ@
  00066	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0006c	33 c0		 xor	 eax, eax
$LN26@save_uncon:
  0006e	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00076	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  0007d	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00081	48 89 44 24 28	 mov	 QWORD PTR old_size$21252[rsp], rax

; 573  :             Py_ssize_t new_size;
; 574  :             PyObject *new_data;
; 575  :             if (self->zst.avail_in > PY_SSIZE_T_MAX - old_size) {

  00086	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0008e	8b 40 68	 mov	 eax, DWORD PTR [rax+104]
  00091	48 b9 ff ff ff
	ff ff ff ff 7f	 mov	 rcx, 9223372036854775807 ; 7fffffffffffffffH
  0009b	48 2b 4c 24 28	 sub	 rcx, QWORD PTR old_size$21252[rsp]
  000a0	48 3b c1	 cmp	 rax, rcx
  000a3	7e 0f		 jle	 SHORT $LN21@save_uncon

; 576  :                 PyErr_NoMemory();

  000a5	e8 00 00 00 00	 call	 PyErr_NoMemory

; 577  :                 return -1;

  000aa	b8 ff ff ff ff	 mov	 eax, -1
  000af	e9 24 03 00 00	 jmp	 $LN24@save_uncon
$LN21@save_uncon:

; 578  :             }
; 579  :             new_size = old_size + self->zst.avail_in;

  000b4	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  000bc	8b 40 68	 mov	 eax, DWORD PTR [rax+104]
  000bf	48 8b 4c 24 28	 mov	 rcx, QWORD PTR old_size$21252[rsp]
  000c4	48 03 c8	 add	 rcx, rax
  000c7	48 8b c1	 mov	 rax, rcx
  000ca	48 89 44 24 20	 mov	 QWORD PTR new_size$21257[rsp], rax

; 580  :             new_data = PyBytes_FromStringAndSize(NULL, new_size);

  000cf	48 8b 54 24 20	 mov	 rdx, QWORD PTR new_size$21257[rsp]
  000d4	33 c9		 xor	 ecx, ecx
  000d6	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  000db	48 89 44 24 30	 mov	 QWORD PTR new_data$21258[rsp], rax

; 581  :             if (new_data == NULL)

  000e0	48 83 7c 24 30
	00		 cmp	 QWORD PTR new_data$21258[rsp], 0
  000e6	75 0a		 jne	 SHORT $LN20@save_uncon

; 582  :                 return -1;

  000e8	b8 ff ff ff ff	 mov	 eax, -1
  000ed	e9 e6 02 00 00	 jmp	 $LN24@save_uncon
$LN20@save_uncon:
$LN19@save_uncon:

; 583  :             Py_MEMCPY(PyBytes_AS_STRING(new_data),
; 584  :                       PyBytes_AS_STRING(self->unused_data), old_size);

  000f2	48 8b 44 24 28	 mov	 rax, QWORD PTR old_size$21252[rsp]
  000f7	48 89 44 24 50	 mov	 QWORD PTR n_$21269[rsp], rax
  000fc	48 8b 44 24 30	 mov	 rax, QWORD PTR new_data$21258[rsp]
  00101	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00105	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0010b	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  00110	85 c0		 test	 eax, eax
  00112	75 1c		 jne	 SHORT $LN27@save_uncon
  00114	41 b8 48 02 00
	00		 mov	 r8d, 584		; 00000248H
  0011a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@EFPADLPK@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAz?$AAl?$AAi?$AAb?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  00121	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@HIDHFINF@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAn?$AAe?$AAw?$AA_?$AAd?$AAa?$AAt?$AAa?$AA?$CJ?$AA?$AA@
  00128	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0012e	33 c0		 xor	 eax, eax
$LN27@save_uncon:
  00130	48 8b 44 24 30	 mov	 rax, QWORD PTR new_data$21258[rsp]
  00135	48 83 c0 78	 add	 rax, 120		; 00000078H
  00139	48 89 44 24 38	 mov	 QWORD PTR t_$21270[rsp], rax
  0013e	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00146	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  0014d	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00151	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00157	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  0015c	85 c0		 test	 eax, eax
  0015e	75 1c		 jne	 SHORT $LN28@save_uncon
  00160	41 b8 48 02 00
	00		 mov	 r8d, 584		; 00000248H
  00166	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@EFPADLPK@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAz?$AAl?$AAi?$AAb?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  0016d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EC@NMFPDAKO@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAu?$AAn?$AAu?$AAs?$AAe?$AAd?$AA_?$AAd?$AAa?$AAt?$AAa?$AA?$CJ@
  00174	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0017a	33 c0		 xor	 eax, eax
$LN28@save_uncon:
  0017c	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00184	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  0018b	48 83 c0 78	 add	 rax, 120		; 00000078H
  0018f	48 89 44 24 40	 mov	 QWORD PTR s_$21276[rsp], rax
  00194	48 83 7c 24 50
	10		 cmp	 QWORD PTR n_$21269[rsp], 16
  0019a	72 16		 jb	 SHORT $LN16@save_uncon
  0019c	4c 8b 44 24 50	 mov	 r8, QWORD PTR n_$21269[rsp]
  001a1	48 8b 54 24 40	 mov	 rdx, QWORD PTR s_$21276[rsp]
  001a6	48 8b 4c 24 38	 mov	 rcx, QWORD PTR t_$21270[rsp]
  001ab	e8 00 00 00 00	 call	 memcpy
  001b0	eb 4b		 jmp	 SHORT $LN15@save_uncon
$LN16@save_uncon:
  001b2	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR i_$21268[rsp], 0
  001bb	eb 0d		 jmp	 SHORT $LN14@save_uncon
$LN13@save_uncon:
  001bd	48 8b 44 24 48	 mov	 rax, QWORD PTR i_$21268[rsp]
  001c2	48 ff c0	 inc	 rax
  001c5	48 89 44 24 48	 mov	 QWORD PTR i_$21268[rsp], rax
$LN14@save_uncon:
  001ca	48 8b 44 24 50	 mov	 rax, QWORD PTR n_$21269[rsp]
  001cf	48 39 44 24 48	 cmp	 QWORD PTR i_$21268[rsp], rax
  001d4	73 27		 jae	 SHORT $LN12@save_uncon
  001d6	48 8b 44 24 48	 mov	 rax, QWORD PTR i_$21268[rsp]
  001db	48 8b 4c 24 38	 mov	 rcx, QWORD PTR t_$21270[rsp]
  001e0	48 03 c8	 add	 rcx, rax
  001e3	48 8b c1	 mov	 rax, rcx
  001e6	48 8b 4c 24 48	 mov	 rcx, QWORD PTR i_$21268[rsp]
  001eb	48 8b 54 24 40	 mov	 rdx, QWORD PTR s_$21276[rsp]
  001f0	48 03 d1	 add	 rdx, rcx
  001f3	48 8b ca	 mov	 rcx, rdx
  001f6	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  001f9	88 08		 mov	 BYTE PTR [rax], cl
  001fb	eb c0		 jmp	 SHORT $LN13@save_uncon
$LN12@save_uncon:
$LN15@save_uncon:
  001fd	33 c0		 xor	 eax, eax
  001ff	85 c0		 test	 eax, eax
  00201	0f 85 eb fe ff
	ff		 jne	 $LN19@save_uncon
$LN11@save_uncon:

; 585  :             Py_MEMCPY(PyBytes_AS_STRING(new_data) + old_size,
; 586  :                       self->zst.next_in, self->zst.avail_in);

  00207	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0020f	8b 40 68	 mov	 eax, DWORD PTR [rax+104]
  00212	48 89 44 24 70	 mov	 QWORD PTR n_$21290[rsp], rax
  00217	48 8b 44 24 30	 mov	 rax, QWORD PTR new_data$21258[rsp]
  0021c	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00220	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00226	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  0022b	85 c0		 test	 eax, eax
  0022d	75 1c		 jne	 SHORT $LN29@save_uncon
  0022f	41 b8 4a 02 00
	00		 mov	 r8d, 586		; 0000024aH
  00235	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@EFPADLPK@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAz?$AAl?$AAi?$AAb?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  0023c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@HIDHFINF@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAn?$AAe?$AAw?$AA_?$AAd?$AAa?$AAt?$AAa?$AA?$CJ?$AA?$AA@
  00243	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00249	33 c0		 xor	 eax, eax
$LN29@save_uncon:
  0024b	48 8b 44 24 30	 mov	 rax, QWORD PTR new_data$21258[rsp]
  00250	48 8b 4c 24 28	 mov	 rcx, QWORD PTR old_size$21252[rsp]
  00255	48 8d 44 08 78	 lea	 rax, QWORD PTR [rax+rcx+120]
  0025a	48 89 44 24 58	 mov	 QWORD PTR t_$21291[rsp], rax
  0025f	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00267	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0026b	48 89 44 24 60	 mov	 QWORD PTR s_$21296[rsp], rax
  00270	48 83 7c 24 70
	10		 cmp	 QWORD PTR n_$21290[rsp], 16
  00276	72 16		 jb	 SHORT $LN8@save_uncon
  00278	4c 8b 44 24 70	 mov	 r8, QWORD PTR n_$21290[rsp]
  0027d	48 8b 54 24 60	 mov	 rdx, QWORD PTR s_$21296[rsp]
  00282	48 8b 4c 24 58	 mov	 rcx, QWORD PTR t_$21291[rsp]
  00287	e8 00 00 00 00	 call	 memcpy
  0028c	eb 4b		 jmp	 SHORT $LN7@save_uncon
$LN8@save_uncon:
  0028e	48 c7 44 24 68
	00 00 00 00	 mov	 QWORD PTR i_$21289[rsp], 0
  00297	eb 0d		 jmp	 SHORT $LN6@save_uncon
$LN5@save_uncon:
  00299	48 8b 44 24 68	 mov	 rax, QWORD PTR i_$21289[rsp]
  0029e	48 ff c0	 inc	 rax
  002a1	48 89 44 24 68	 mov	 QWORD PTR i_$21289[rsp], rax
$LN6@save_uncon:
  002a6	48 8b 44 24 70	 mov	 rax, QWORD PTR n_$21290[rsp]
  002ab	48 39 44 24 68	 cmp	 QWORD PTR i_$21289[rsp], rax
  002b0	73 27		 jae	 SHORT $LN4@save_uncon
  002b2	48 8b 44 24 68	 mov	 rax, QWORD PTR i_$21289[rsp]
  002b7	48 8b 4c 24 58	 mov	 rcx, QWORD PTR t_$21291[rsp]
  002bc	48 03 c8	 add	 rcx, rax
  002bf	48 8b c1	 mov	 rax, rcx
  002c2	48 8b 4c 24 68	 mov	 rcx, QWORD PTR i_$21289[rsp]
  002c7	48 8b 54 24 60	 mov	 rdx, QWORD PTR s_$21296[rsp]
  002cc	48 03 d1	 add	 rdx, rcx
  002cf	48 8b ca	 mov	 rcx, rdx
  002d2	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  002d5	88 08		 mov	 BYTE PTR [rax], cl
  002d7	eb c0		 jmp	 SHORT $LN5@save_uncon
$LN4@save_uncon:
$LN7@save_uncon:
  002d9	33 c0		 xor	 eax, eax
  002db	85 c0		 test	 eax, eax
  002dd	0f 85 24 ff ff
	ff		 jne	 $LN11@save_uncon

; 587  :             Py_DECREF(self->unused_data);

  002e3	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  002eb	48 8b 88 b8 00
	00 00		 mov	 rcx, QWORD PTR [rax+184]
  002f2	e8 00 00 00 00	 call	 _Py_DecRef

; 588  :             self->unused_data = new_data;

  002f7	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  002ff	48 8b 4c 24 30	 mov	 rcx, QWORD PTR new_data$21258[rsp]
  00304	48 89 88 b8 00
	00 00		 mov	 QWORD PTR [rax+184], rcx

; 589  :             self->zst.avail_in = 0;

  0030b	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00313	c7 40 68 00 00
	00 00		 mov	 DWORD PTR [rax+104], 0
$LN22@save_uncon:
$LN23@save_uncon:

; 590  :         }
; 591  :     }
; 592  :     if (self->zst.avail_in > 0 || PyBytes_GET_SIZE(self->unconsumed_tail)) {

  0031a	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00322	83 78 68 00	 cmp	 DWORD PTR [rax+104], 0
  00326	77 54		 ja	 SHORT $LN2@save_uncon
  00328	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00330	48 8b 80 c0 00
	00 00		 mov	 rax, QWORD PTR [rax+192]
  00337	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0033b	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00341	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  00346	85 c0		 test	 eax, eax
  00348	75 1c		 jne	 SHORT $LN30@save_uncon
  0034a	41 b8 50 02 00
	00		 mov	 r8d, 592		; 00000250H
  00350	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@EFPADLPK@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAz?$AAl?$AAi?$AAb?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  00357	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EK@DNFGIDFE@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAu?$AAn?$AAc?$AAo?$AAn?$AAs?$AAu?$AAm?$AAe?$AAd?$AA_?$AAt@
  0035e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00364	33 c0		 xor	 eax, eax
$LN30@save_uncon:
  00366	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0036e	48 8b 80 c0 00
	00 00		 mov	 rax, QWORD PTR [rax+192]
  00375	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  0037a	74 5a		 je	 SHORT $LN3@save_uncon
$LN2@save_uncon:

; 593  :         /* This code handles two distinct cases:
; 594  :            1. Output limit was reached. Save leftover input in unconsumed_tail.
; 595  :            2. All input data was consumed. Clear unconsumed_tail. */
; 596  :         PyObject *new_data = PyBytes_FromStringAndSize(
; 597  :                 (char *)self->zst.next_in, self->zst.avail_in);

  0037c	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00384	8b 40 68	 mov	 eax, DWORD PTR [rax+104]
  00387	8b d0		 mov	 edx, eax
  00389	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00391	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00395	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  0039a	48 89 44 24 78	 mov	 QWORD PTR new_data$21310[rsp], rax

; 598  :         if (new_data == NULL)

  0039f	48 83 7c 24 78
	00		 cmp	 QWORD PTR new_data$21310[rsp], 0
  003a5	75 07		 jne	 SHORT $LN1@save_uncon

; 599  :             return -1;

  003a7	b8 ff ff ff ff	 mov	 eax, -1
  003ac	eb 2a		 jmp	 SHORT $LN24@save_uncon
$LN1@save_uncon:

; 600  :         Py_DECREF(self->unconsumed_tail);

  003ae	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  003b6	48 8b 88 c0 00
	00 00		 mov	 rcx, QWORD PTR [rax+192]
  003bd	e8 00 00 00 00	 call	 _Py_DecRef

; 601  :         self->unconsumed_tail = new_data;

  003c2	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  003ca	48 8b 4c 24 78	 mov	 rcx, QWORD PTR new_data$21310[rsp]
  003cf	48 89 88 c0 00
	00 00		 mov	 QWORD PTR [rax+192], rcx
$LN3@save_uncon:

; 602  :     }
; 603  :     return 0;

  003d6	33 c0		 xor	 eax, eax
$LN24@save_uncon:

; 604  : }

  003d8	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  003df	c3		 ret	 0
save_unconsumed_input ENDP
_TEXT	ENDS
PUBLIC	??_C@_0P@NMFHCCFC@while?5flushing?$AA@		; `string'
PUBLIC	$T22091
PUBLIC	$T22090
PUBLIC	??_C@_08OJMLILBP@?$HMi?3flush?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyZlib_flush DD imagerel PyZlib_flush
	DD	imagerel PyZlib_flush+894
	DD	imagerel $unwind$PyZlib_flush
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyZlib_flush DD 041301H
	DD	0230113H
	DD	0600b700cH
xdata	ENDS
;	COMDAT ??_C@_0P@NMFHCCFC@while?5flushing?$AA@
CONST	SEGMENT
??_C@_0P@NMFHCCFC@while?5flushing?$AA@ DB 'while flushing', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08OJMLILBP@?$HMi?3flush?$AA@
CONST	SEGMENT
??_C@_08OJMLILBP@?$HMi?3flush?$AA@ DB '|i:flush', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyZlib_flush
_TEXT	SEGMENT
RetVal$ = 32
length$ = 40
start_total_out$ = 44
flushmode$ = 48
err$ = 52
_save$21403 = 56
_save$21408 = 64
_save$21420 = 72
$T22090 = 80
$T22091 = 176
self$ = 304
args$ = 312
PyZlib_flush PROC					; COMDAT

; 756  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	48 81 ec 18 01
	00 00		 sub	 rsp, 280		; 00000118H

; 757  :     int err, length = DEFAULTALLOC;

  00013	c7 44 24 28 00
	40 00 00	 mov	 DWORD PTR length$[rsp], 16384 ; 00004000H

; 758  :     PyObject *RetVal;
; 759  :     int flushmode = Z_FINISH;

  0001b	c7 44 24 30 04
	00 00 00	 mov	 DWORD PTR flushmode$[rsp], 4

; 760  :     unsigned long start_total_out;
; 761  : 
; 762  :     if (!PyArg_ParseTuple(args, "|i:flush", &flushmode))

  00023	4c 8d 44 24 30	 lea	 r8, QWORD PTR flushmode$[rsp]
  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08OJMLILBP@?$HMi?3flush?$AA@
  0002f	48 8b 8c 24 38
	01 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  00037	e8 00 00 00 00	 call	 PyArg_ParseTuple
  0003c	85 c0		 test	 eax, eax
  0003e	75 07		 jne	 SHORT $LN12@PyZlib_flu

; 763  :         return NULL;

  00040	33 c0		 xor	 eax, eax
  00042	e9 2d 03 00 00	 jmp	 $LN13@PyZlib_flu
$LN12@PyZlib_flu:

; 764  : 
; 765  :     /* Flushing with Z_NO_FLUSH is a no-op, so there's no point in
; 766  :        doing any work at all; just return an empty string. */
; 767  :     if (flushmode == Z_NO_FLUSH) {

  00047	83 7c 24 30 00	 cmp	 DWORD PTR flushmode$[rsp], 0
  0004c	75 0e		 jne	 SHORT $LN11@PyZlib_flu

; 768  :         return PyBytes_FromStringAndSize(NULL, 0);

  0004e	33 d2		 xor	 edx, edx
  00050	33 c9		 xor	 ecx, ecx
  00052	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  00057	e9 18 03 00 00	 jmp	 $LN13@PyZlib_flu
$LN11@PyZlib_flu:

; 769  :     }
; 770  : 
; 771  :     if (!(RetVal = PyBytes_FromStringAndSize(NULL, length)))

  0005c	48 63 44 24 28	 movsxd	 rax, DWORD PTR length$[rsp]
  00061	48 8b d0	 mov	 rdx, rax
  00064	33 c9		 xor	 ecx, ecx
  00066	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  0006b	48 89 44 24 20	 mov	 QWORD PTR RetVal$[rsp], rax
  00070	48 83 7c 24 20
	00		 cmp	 QWORD PTR RetVal$[rsp], 0
  00076	75 07		 jne	 SHORT $LN10@PyZlib_flu

; 772  :         return NULL;

  00078	33 c0		 xor	 eax, eax
  0007a	e9 f5 02 00 00	 jmp	 $LN13@PyZlib_flu
$LN10@PyZlib_flu:

; 773  : 
; 774  :     ENTER_ZLIB(self);

  0007f	e8 00 00 00 00	 call	 PyEval_SaveThread
  00084	48 89 44 24 38	 mov	 QWORD PTR _save$21403[rsp], rax
  00089	ba 01 00 00 00	 mov	 edx, 1
  0008e	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00096	48 8b 88 d8 00
	00 00		 mov	 rcx, QWORD PTR [rax+216]
  0009d	e8 00 00 00 00	 call	 PyThread_acquire_lock
  000a2	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _save$21403[rsp]
  000a7	e8 00 00 00 00	 call	 PyEval_RestoreThread

; 775  : 
; 776  :     start_total_out = self->zst.total_out;

  000ac	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  000b4	8b 40 7c	 mov	 eax, DWORD PTR [rax+124]
  000b7	89 44 24 2c	 mov	 DWORD PTR start_total_out$[rsp], eax

; 777  :     self->zst.avail_in = 0;

  000bb	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  000c3	c7 40 68 00 00
	00 00		 mov	 DWORD PTR [rax+104], 0

; 778  :     self->zst.avail_out = length;

  000ca	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  000d2	8b 4c 24 28	 mov	 ecx, DWORD PTR length$[rsp]
  000d6	89 48 78	 mov	 DWORD PTR [rax+120], ecx

; 779  :     self->zst.next_out = (unsigned char *)PyBytes_AS_STRING(RetVal);

  000d9	48 8b 44 24 20	 mov	 rax, QWORD PTR RetVal$[rsp]
  000de	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000e2	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000e8	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  000ed	85 c0		 test	 eax, eax
  000ef	75 1c		 jne	 SHORT $LN15@PyZlib_flu
  000f1	41 b8 0b 03 00
	00		 mov	 r8d, 779		; 0000030bH
  000f7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@EFPADLPK@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAz?$AAl?$AAi?$AAb?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  000fe	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@GNODNNDP@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAR?$AAe?$AAt?$AAV?$AAa?$AAl?$AA?$CJ?$AA?$AA@
  00105	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0010b	33 c0		 xor	 eax, eax
$LN15@PyZlib_flu:
  0010d	48 8b 44 24 20	 mov	 rax, QWORD PTR RetVal$[rsp]
  00112	48 83 c0 78	 add	 rax, 120		; 00000078H
  00116	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  0011e	48 89 41 70	 mov	 QWORD PTR [rcx+112], rax

; 780  : 
; 781  :     Py_BEGIN_ALLOW_THREADS

  00122	e8 00 00 00 00	 call	 PyEval_SaveThread
  00127	48 89 44 24 40	 mov	 QWORD PTR _save$21408[rsp], rax

; 782  :     err = deflate(&(self->zst), flushmode);

  0012c	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00134	48 83 c0 60	 add	 rax, 96			; 00000060H
  00138	8b 54 24 30	 mov	 edx, DWORD PTR flushmode$[rsp]
  0013c	48 8b c8	 mov	 rcx, rax
  0013f	e8 00 00 00 00	 call	 deflate
  00144	89 44 24 34	 mov	 DWORD PTR err$[rsp], eax

; 783  :     Py_END_ALLOW_THREADS

  00148	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _save$21408[rsp]
  0014d	e8 00 00 00 00	 call	 PyEval_RestoreThread
$LN9@PyZlib_flu:

; 784  : 
; 785  :     /* while Z_OK and the output buffer is full, there might be more output,
; 786  :        so extend the output buffer and try again */
; 787  :     while (err == Z_OK && self->zst.avail_out == 0) {

  00152	83 7c 24 34 00	 cmp	 DWORD PTR err$[rsp], 0
  00157	0f 85 e0 00 00
	00		 jne	 $LN8@PyZlib_flu
  0015d	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00165	83 78 78 00	 cmp	 DWORD PTR [rax+120], 0
  00169	0f 85 ce 00 00
	00		 jne	 $LN8@PyZlib_flu

; 788  :         if (_PyBytes_Resize(&RetVal, length << 1) < 0) {

  0016f	8b 44 24 28	 mov	 eax, DWORD PTR length$[rsp]
  00173	d1 e0		 shl	 eax, 1
  00175	48 98		 cdqe
  00177	48 8b d0	 mov	 rdx, rax
  0017a	48 8d 4c 24 20	 lea	 rcx, QWORD PTR RetVal$[rsp]
  0017f	e8 00 00 00 00	 call	 _PyBytes_Resize
  00184	85 c0		 test	 eax, eax
  00186	7d 18		 jge	 SHORT $LN7@PyZlib_flu

; 789  :             Py_DECREF(RetVal);

  00188	48 8b 4c 24 20	 mov	 rcx, QWORD PTR RetVal$[rsp]
  0018d	e8 00 00 00 00	 call	 _Py_DecRef

; 790  :             RetVal = NULL;

  00192	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR RetVal$[rsp], 0

; 791  :             goto error;

  0019b	e9 bb 01 00 00	 jmp	 $error$21415
$LN7@PyZlib_flu:

; 792  :         }
; 793  :         self->zst.next_out =
; 794  :             (unsigned char *)PyBytes_AS_STRING(RetVal) + length;

  001a0	48 8b 44 24 20	 mov	 rax, QWORD PTR RetVal$[rsp]
  001a5	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  001a9	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  001af	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  001b4	85 c0		 test	 eax, eax
  001b6	75 1c		 jne	 SHORT $LN16@PyZlib_flu
  001b8	41 b8 1a 03 00
	00		 mov	 r8d, 794		; 0000031aH
  001be	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@EFPADLPK@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAz?$AAl?$AAi?$AAb?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  001c5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@GNODNNDP@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAR?$AAe?$AAt?$AAV?$AAa?$AAl?$AA?$CJ?$AA?$AA@
  001cc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001d2	33 c0		 xor	 eax, eax
$LN16@PyZlib_flu:
  001d4	48 63 44 24 28	 movsxd	 rax, DWORD PTR length$[rsp]
  001d9	48 8b 4c 24 20	 mov	 rcx, QWORD PTR RetVal$[rsp]
  001de	48 8d 44 01 78	 lea	 rax, QWORD PTR [rcx+rax+120]
  001e3	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  001eb	48 89 41 70	 mov	 QWORD PTR [rcx+112], rax

; 795  :         self->zst.avail_out = length;

  001ef	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  001f7	8b 4c 24 28	 mov	 ecx, DWORD PTR length$[rsp]
  001fb	89 48 78	 mov	 DWORD PTR [rax+120], ecx

; 796  :         length = length << 1;

  001fe	8b 44 24 28	 mov	 eax, DWORD PTR length$[rsp]
  00202	d1 e0		 shl	 eax, 1
  00204	89 44 24 28	 mov	 DWORD PTR length$[rsp], eax

; 797  : 
; 798  :         Py_BEGIN_ALLOW_THREADS

  00208	e8 00 00 00 00	 call	 PyEval_SaveThread
  0020d	48 89 44 24 48	 mov	 QWORD PTR _save$21420[rsp], rax

; 799  :         err = deflate(&(self->zst), flushmode);

  00212	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0021a	48 83 c0 60	 add	 rax, 96			; 00000060H
  0021e	8b 54 24 30	 mov	 edx, DWORD PTR flushmode$[rsp]
  00222	48 8b c8	 mov	 rcx, rax
  00225	e8 00 00 00 00	 call	 deflate
  0022a	89 44 24 34	 mov	 DWORD PTR err$[rsp], eax

; 800  :         Py_END_ALLOW_THREADS

  0022e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _save$21420[rsp]
  00233	e8 00 00 00 00	 call	 PyEval_RestoreThread

; 801  :     }

  00238	e9 15 ff ff ff	 jmp	 $LN9@PyZlib_flu
$LN8@PyZlib_flu:

; 802  : 
; 803  :     /* If flushmode is Z_FINISH, we also have to call deflateEnd() to free
; 804  :        various data structures. Note we should only get Z_STREAM_END when
; 805  :        flushmode is Z_FINISH, but checking both for safety*/
; 806  :     if (err == Z_STREAM_END && flushmode == Z_FINISH) {

  0023d	83 7c 24 34 01	 cmp	 DWORD PTR err$[rsp], 1
  00242	0f 85 84 00 00
	00		 jne	 $LN6@PyZlib_flu
  00248	83 7c 24 30 04	 cmp	 DWORD PTR flushmode$[rsp], 4
  0024d	75 7d		 jne	 SHORT $LN6@PyZlib_flu

; 807  :         err = deflateEnd(&(self->zst));

  0024f	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00257	48 83 c0 60	 add	 rax, 96			; 00000060H
  0025b	48 8b c8	 mov	 rcx, rax
  0025e	e8 00 00 00 00	 call	 deflateEnd
  00263	89 44 24 34	 mov	 DWORD PTR err$[rsp], eax

; 808  :         if (err != Z_OK) {

  00267	83 7c 24 34 00	 cmp	 DWORD PTR err$[rsp], 0
  0026c	74 4a		 je	 SHORT $LN5@PyZlib_flu

; 809  :             zlib_error(self->zst, err, "while finishing compression");

  0026e	48 8d 44 24 50	 lea	 rax, QWORD PTR $T22090[rsp]
  00273	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  0027b	48 8b f8	 mov	 rdi, rax
  0027e	48 8d 71 60	 lea	 rsi, QWORD PTR [rcx+96]
  00282	b9 58 00 00 00	 mov	 ecx, 88			; 00000058H
  00287	f3 a4		 rep movsb
  00289	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BM@IPDNGAHJ@while?5finishing?5compression?$AA@
  00290	8b 54 24 34	 mov	 edx, DWORD PTR err$[rsp]
  00294	48 8d 4c 24 50	 lea	 rcx, QWORD PTR $T22090[rsp]
  00299	e8 00 00 00 00	 call	 zlib_error

; 810  :             Py_DECREF(RetVal);

  0029e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR RetVal$[rsp]
  002a3	e8 00 00 00 00	 call	 _Py_DecRef

; 811  :             RetVal = NULL;

  002a8	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR RetVal$[rsp], 0

; 812  :             goto error;

  002b1	e9 a5 00 00 00	 jmp	 $error$21415

; 813  :         }
; 814  :         else

  002b6	eb 12		 jmp	 SHORT $LN4@PyZlib_flu
$LN5@PyZlib_flu:

; 815  :             self->is_initialised = 0;

  002b8	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  002c0	c7 80 cc 00 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+204], 0
$LN4@PyZlib_flu:

; 816  : 
; 817  :         /* We will only get Z_BUF_ERROR if the output buffer was full
; 818  :            but there wasn't more output when we tried again, so it is
; 819  :            not an error condition.
; 820  :         */
; 821  :     } else if (err!=Z_OK && err!=Z_BUF_ERROR) {

  002ca	eb 59		 jmp	 SHORT $LN3@PyZlib_flu
$LN6@PyZlib_flu:
  002cc	83 7c 24 34 00	 cmp	 DWORD PTR err$[rsp], 0
  002d1	74 52		 je	 SHORT $LN2@PyZlib_flu
  002d3	83 7c 24 34 fb	 cmp	 DWORD PTR err$[rsp], -5
  002d8	74 4b		 je	 SHORT $LN2@PyZlib_flu

; 822  :         zlib_error(self->zst, err, "while flushing");

  002da	48 8d 84 24 b0
	00 00 00	 lea	 rax, QWORD PTR $T22091[rsp]
  002e2	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  002ea	48 8b f8	 mov	 rdi, rax
  002ed	48 8d 71 60	 lea	 rsi, QWORD PTR [rcx+96]
  002f1	b9 58 00 00 00	 mov	 ecx, 88			; 00000058H
  002f6	f3 a4		 rep movsb
  002f8	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0P@NMFHCCFC@while?5flushing?$AA@
  002ff	8b 54 24 34	 mov	 edx, DWORD PTR err$[rsp]
  00303	48 8d 8c 24 b0
	00 00 00	 lea	 rcx, QWORD PTR $T22091[rsp]
  0030b	e8 00 00 00 00	 call	 zlib_error

; 823  :         Py_DECREF(RetVal);

  00310	48 8b 4c 24 20	 mov	 rcx, QWORD PTR RetVal$[rsp]
  00315	e8 00 00 00 00	 call	 _Py_DecRef

; 824  :         RetVal = NULL;

  0031a	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR RetVal$[rsp], 0

; 825  :         goto error;

  00323	eb 36		 jmp	 SHORT $error$21415
$LN2@PyZlib_flu:
$LN3@PyZlib_flu:

; 826  :     }
; 827  : 
; 828  :     if (_PyBytes_Resize(&RetVal, self->zst.total_out - start_total_out) < 0) {

  00325	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0032d	8b 4c 24 2c	 mov	 ecx, DWORD PTR start_total_out$[rsp]
  00331	8b 40 7c	 mov	 eax, DWORD PTR [rax+124]
  00334	2b c1		 sub	 eax, ecx
  00336	8b c0		 mov	 eax, eax
  00338	8b d0		 mov	 edx, eax
  0033a	48 8d 4c 24 20	 lea	 rcx, QWORD PTR RetVal$[rsp]
  0033f	e8 00 00 00 00	 call	 _PyBytes_Resize
  00344	85 c0		 test	 eax, eax
  00346	7d 13		 jge	 SHORT $LN1@PyZlib_flu

; 829  :         Py_DECREF(RetVal);

  00348	48 8b 4c 24 20	 mov	 rcx, QWORD PTR RetVal$[rsp]
  0034d	e8 00 00 00 00	 call	 _Py_DecRef

; 830  :         RetVal = NULL;

  00352	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR RetVal$[rsp], 0
$LN1@PyZlib_flu:
$error$21415:

; 831  :     }
; 832  : 
; 833  :  error:
; 834  :     LEAVE_ZLIB(self);

  0035b	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00363	48 8b 88 d8 00
	00 00		 mov	 rcx, QWORD PTR [rax+216]
  0036a	e8 00 00 00 00	 call	 PyThread_release_lock

; 835  : 
; 836  :     return RetVal;

  0036f	48 8b 44 24 20	 mov	 rax, QWORD PTR RetVal$[rsp]
$LN13@PyZlib_flu:

; 837  : }

  00374	48 81 c4 18 01
	00 00		 add	 rsp, 280		; 00000118H
  0037b	5f		 pop	 rdi
  0037c	5e		 pop	 rsi
  0037d	c3		 ret	 0
PyZlib_flush ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CB@PGEPIFEP@while?5copying?5compression?5object@ ; `string'
PUBLIC	$T22098
PUBLIC	??_C@_0BK@GHDMMOKL@Inconsistent?5stream?5state?$AA@ ; `string'
EXTRN	deflateCopy:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyZlib_copy DD imagerel PyZlib_copy
	DD	imagerel PyZlib_copy+682
	DD	imagerel $unwind$PyZlib_copy
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyZlib_copy DD 040e01H
	DD	017010eH
	DD	060067007H
xdata	ENDS
;	COMDAT ??_C@_0CB@PGEPIFEP@while?5copying?5compression?5object@
CONST	SEGMENT
??_C@_0CB@PGEPIFEP@while?5copying?5compression?5object@ DB 'while copying'
	DB	' compression object', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@GHDMMOKL@Inconsistent?5stream?5state?$AA@
CONST	SEGMENT
??_C@_0BK@GHDMMOKL@Inconsistent?5stream?5state?$AA@ DB 'Inconsistent stre'
	DB	'am state', 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyZlib_copy
_TEXT	SEGMENT
retval$ = 32
err$ = 40
_save$21444 = 48
$T22098 = 64
tv77 = 160
self$ = 208
PyZlib_copy PROC					; COMDAT

; 845  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	56		 push	 rsi
  00006	57		 push	 rdi
  00007	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H

; 846  :     compobject *retval = NULL;

  0000e	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR retval$[rsp], 0

; 847  :     int err;
; 848  : 
; 849  :     retval = newcompobject(&Comptype);

  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:Comptype
  0001e	e8 00 00 00 00	 call	 newcompobject
  00023	48 89 44 24 20	 mov	 QWORD PTR retval$[rsp], rax

; 850  :     if (!retval) return NULL;

  00028	48 83 7c 24 20
	00		 cmp	 QWORD PTR retval$[rsp], 0
  0002e	75 07		 jne	 SHORT $LN27@PyZlib_cop
  00030	33 c0		 xor	 eax, eax
  00032	e9 69 02 00 00	 jmp	 $LN28@PyZlib_cop
$LN27@PyZlib_cop:

; 851  : 
; 852  :     /* Copy the zstream state
; 853  :      * We use ENTER_ZLIB / LEAVE_ZLIB to make this thread-safe
; 854  :      */
; 855  :     ENTER_ZLIB(self);

  00037	e8 00 00 00 00	 call	 PyEval_SaveThread
  0003c	48 89 44 24 30	 mov	 QWORD PTR _save$21444[rsp], rax
  00041	ba 01 00 00 00	 mov	 edx, 1
  00046	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0004e	48 8b 88 d8 00
	00 00		 mov	 rcx, QWORD PTR [rax+216]
  00055	e8 00 00 00 00	 call	 PyThread_acquire_lock
  0005a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _save$21444[rsp]
  0005f	e8 00 00 00 00	 call	 PyEval_RestoreThread

; 856  :     err = deflateCopy(&retval->zst, &self->zst);

  00064	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0006c	48 83 c0 60	 add	 rax, 96			; 00000060H
  00070	48 8b 4c 24 20	 mov	 rcx, QWORD PTR retval$[rsp]
  00075	48 83 c1 60	 add	 rcx, 96			; 00000060H
  00079	48 8b d0	 mov	 rdx, rax
  0007c	e8 00 00 00 00	 call	 deflateCopy
  00081	89 44 24 28	 mov	 DWORD PTR err$[rsp], eax

; 857  :     switch(err) {

  00085	8b 44 24 28	 mov	 eax, DWORD PTR err$[rsp]
  00089	89 84 24 a0 00
	00 00		 mov	 DWORD PTR tv77[rsp], eax
  00090	83 bc 24 a0 00
	00 00 fc	 cmp	 DWORD PTR tv77[rsp], -4
  00098	74 30		 je	 SHORT $LN22@PyZlib_cop
  0009a	83 bc 24 a0 00
	00 00 fe	 cmp	 DWORD PTR tv77[rsp], -2
  000a2	74 0e		 je	 SHORT $LN23@PyZlib_cop
  000a4	83 bc 24 a0 00
	00 00 00	 cmp	 DWORD PTR tv77[rsp], 0
  000ac	74 02		 je	 SHORT $LN24@PyZlib_cop
  000ae	eb 32		 jmp	 SHORT $LN21@PyZlib_cop
$LN24@PyZlib_cop:

; 858  :     case(Z_OK):
; 859  :         break;

  000b0	eb 65		 jmp	 SHORT $LN25@PyZlib_cop
$LN23@PyZlib_cop:

; 860  :     case(Z_STREAM_ERROR):
; 861  :         PyErr_SetString(PyExc_ValueError, "Inconsistent stream state");

  000b2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@GHDMMOKL@Inconsistent?5stream?5state?$AA@
  000b9	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  000c0	e8 00 00 00 00	 call	 PyErr_SetString

; 862  :         goto error;

  000c5	e9 a8 01 00 00	 jmp	 $error$21452
$LN22@PyZlib_cop:

; 863  :     case(Z_MEM_ERROR):
; 864  :         PyErr_SetString(PyExc_MemoryError,
; 865  :                         "Can't allocate memory for compression object");

  000ca	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CN@CHBGDHHI@Can?8t?5allocate?5memory?5for?5compre@
  000d1	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_MemoryError
  000d8	e8 00 00 00 00	 call	 PyErr_SetString

; 866  :         goto error;

  000dd	e9 90 01 00 00	 jmp	 $error$21452
$LN21@PyZlib_cop:

; 867  :     default:
; 868  :         zlib_error(self->zst, err, "while copying compression object");

  000e2	48 8d 44 24 40	 lea	 rax, QWORD PTR $T22098[rsp]
  000e7	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  000ef	48 8b f8	 mov	 rdi, rax
  000f2	48 8d 71 60	 lea	 rsi, QWORD PTR [rcx+96]
  000f6	b9 58 00 00 00	 mov	 ecx, 88			; 00000058H
  000fb	f3 a4		 rep movsb
  000fd	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0CB@PGEPIFEP@while?5copying?5compression?5object@
  00104	8b 54 24 28	 mov	 edx, DWORD PTR err$[rsp]
  00108	48 8d 4c 24 40	 lea	 rcx, QWORD PTR $T22098[rsp]
  0010d	e8 00 00 00 00	 call	 zlib_error

; 869  :         goto error;

  00112	e9 5b 01 00 00	 jmp	 $error$21452
$LN25@PyZlib_cop:

; 870  :     }
; 871  :     Py_INCREF(self->unused_data);

  00117	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0011f	48 8b 88 b8 00
	00 00		 mov	 rcx, QWORD PTR [rax+184]
  00126	e8 00 00 00 00	 call	 _Py_IncRef

; 872  :     Py_INCREF(self->unconsumed_tail);

  0012b	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00133	48 8b 88 c0 00
	00 00		 mov	 rcx, QWORD PTR [rax+192]
  0013a	e8 00 00 00 00	 call	 _Py_IncRef
$LN20@PyZlib_cop:

; 873  :     Py_XINCREF(self->zdict);

  0013f	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00147	48 83 b8 d0 00
	00 00 00	 cmp	 QWORD PTR [rax+208], 0
  0014f	74 14		 je	 SHORT $LN17@PyZlib_cop
  00151	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00159	48 8b 88 d0 00
	00 00		 mov	 rcx, QWORD PTR [rax+208]
  00160	e8 00 00 00 00	 call	 _Py_IncRef
$LN17@PyZlib_cop:
  00165	33 c0		 xor	 eax, eax
  00167	85 c0		 test	 eax, eax
  00169	75 d4		 jne	 SHORT $LN20@PyZlib_cop
$LN16@PyZlib_cop:

; 874  :     Py_XDECREF(retval->unused_data);

  0016b	48 8b 44 24 20	 mov	 rax, QWORD PTR retval$[rsp]
  00170	48 83 b8 b8 00
	00 00 00	 cmp	 QWORD PTR [rax+184], 0
  00178	74 11		 je	 SHORT $LN13@PyZlib_cop
  0017a	48 8b 44 24 20	 mov	 rax, QWORD PTR retval$[rsp]
  0017f	48 8b 88 b8 00
	00 00		 mov	 rcx, QWORD PTR [rax+184]
  00186	e8 00 00 00 00	 call	 _Py_DecRef
$LN13@PyZlib_cop:
  0018b	33 c0		 xor	 eax, eax
  0018d	85 c0		 test	 eax, eax
  0018f	75 da		 jne	 SHORT $LN16@PyZlib_cop
$LN12@PyZlib_cop:

; 875  :     Py_XDECREF(retval->unconsumed_tail);

  00191	48 8b 44 24 20	 mov	 rax, QWORD PTR retval$[rsp]
  00196	48 83 b8 c0 00
	00 00 00	 cmp	 QWORD PTR [rax+192], 0
  0019e	74 11		 je	 SHORT $LN9@PyZlib_cop
  001a0	48 8b 44 24 20	 mov	 rax, QWORD PTR retval$[rsp]
  001a5	48 8b 88 c0 00
	00 00		 mov	 rcx, QWORD PTR [rax+192]
  001ac	e8 00 00 00 00	 call	 _Py_DecRef
$LN9@PyZlib_cop:
  001b1	33 c0		 xor	 eax, eax
  001b3	85 c0		 test	 eax, eax
  001b5	75 da		 jne	 SHORT $LN12@PyZlib_cop
$LN8@PyZlib_cop:

; 876  :     Py_XDECREF(retval->zdict);

  001b7	48 8b 44 24 20	 mov	 rax, QWORD PTR retval$[rsp]
  001bc	48 83 b8 d0 00
	00 00 00	 cmp	 QWORD PTR [rax+208], 0
  001c4	74 11		 je	 SHORT $LN5@PyZlib_cop
  001c6	48 8b 44 24 20	 mov	 rax, QWORD PTR retval$[rsp]
  001cb	48 8b 88 d0 00
	00 00		 mov	 rcx, QWORD PTR [rax+208]
  001d2	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@PyZlib_cop:
  001d7	33 c0		 xor	 eax, eax
  001d9	85 c0		 test	 eax, eax
  001db	75 da		 jne	 SHORT $LN8@PyZlib_cop

; 877  :     retval->unused_data = self->unused_data;

  001dd	48 8b 44 24 20	 mov	 rax, QWORD PTR retval$[rsp]
  001e2	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  001ea	48 8b 89 b8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+184]
  001f1	48 89 88 b8 00
	00 00		 mov	 QWORD PTR [rax+184], rcx

; 878  :     retval->unconsumed_tail = self->unconsumed_tail;

  001f8	48 8b 44 24 20	 mov	 rax, QWORD PTR retval$[rsp]
  001fd	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00205	48 8b 89 c0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+192]
  0020c	48 89 88 c0 00
	00 00		 mov	 QWORD PTR [rax+192], rcx

; 879  :     retval->zdict = self->zdict;

  00213	48 8b 44 24 20	 mov	 rax, QWORD PTR retval$[rsp]
  00218	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00220	48 8b 89 d0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+208]
  00227	48 89 88 d0 00
	00 00		 mov	 QWORD PTR [rax+208], rcx

; 880  :     retval->eof = self->eof;

  0022e	48 8b 44 24 20	 mov	 rax, QWORD PTR retval$[rsp]
  00233	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  0023b	0f b6 89 c8 00
	00 00		 movzx	 ecx, BYTE PTR [rcx+200]
  00242	88 88 c8 00 00
	00		 mov	 BYTE PTR [rax+200], cl

; 881  : 
; 882  :     /* Mark it as being initialized */
; 883  :     retval->is_initialised = 1;

  00248	48 8b 44 24 20	 mov	 rax, QWORD PTR retval$[rsp]
  0024d	c7 80 cc 00 00
	00 01 00 00 00	 mov	 DWORD PTR [rax+204], 1

; 884  : 
; 885  :     LEAVE_ZLIB(self);

  00257	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0025f	48 8b 88 d8 00
	00 00		 mov	 rcx, QWORD PTR [rax+216]
  00266	e8 00 00 00 00	 call	 PyThread_release_lock

; 886  :     return (PyObject *)retval;

  0026b	48 8b 44 24 20	 mov	 rax, QWORD PTR retval$[rsp]
  00270	eb 2e		 jmp	 SHORT $LN28@PyZlib_cop
$error$21452:

; 887  : 
; 888  : error:
; 889  :     LEAVE_ZLIB(self);

  00272	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0027a	48 8b 88 d8 00
	00 00		 mov	 rcx, QWORD PTR [rax+216]
  00281	e8 00 00 00 00	 call	 PyThread_release_lock
$LN4@PyZlib_cop:

; 890  :     Py_XDECREF(retval);

  00286	48 83 7c 24 20
	00		 cmp	 QWORD PTR retval$[rsp], 0
  0028c	74 0a		 je	 SHORT $LN1@PyZlib_cop
  0028e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR retval$[rsp]
  00293	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@PyZlib_cop:
  00298	33 c0		 xor	 eax, eax
  0029a	85 c0		 test	 eax, eax
  0029c	75 e8		 jne	 SHORT $LN4@PyZlib_cop

; 891  :     return NULL;

  0029e	33 c0		 xor	 eax, eax
$LN28@PyZlib_cop:

; 892  : }

  002a0	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  002a7	5f		 pop	 rdi
  002a8	5e		 pop	 rsi
  002a9	c3		 ret	 0
PyZlib_copy ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CD@OEAPIDFL@while?5copying?5decompression?5obje@ ; `string'
PUBLIC	$T22105
EXTRN	inflateCopy:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyZlib_uncopy DD imagerel PyZlib_uncopy
	DD	imagerel PyZlib_uncopy+682
	DD	imagerel $unwind$PyZlib_uncopy
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyZlib_uncopy DD 040e01H
	DD	017010eH
	DD	060067007H
xdata	ENDS
;	COMDAT ??_C@_0CD@OEAPIDFL@while?5copying?5decompression?5obje@
CONST	SEGMENT
??_C@_0CD@OEAPIDFL@while?5copying?5decompression?5obje@ DB 'while copying'
	DB	' decompression object', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyZlib_uncopy
_TEXT	SEGMENT
retval$ = 32
err$ = 40
_save$21495 = 48
$T22105 = 64
tv77 = 160
self$ = 208
PyZlib_uncopy PROC					; COMDAT

; 899  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	56		 push	 rsi
  00006	57		 push	 rdi
  00007	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H

; 900  :     compobject *retval = NULL;

  0000e	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR retval$[rsp], 0

; 901  :     int err;
; 902  : 
; 903  :     retval = newcompobject(&Decomptype);

  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:Decomptype
  0001e	e8 00 00 00 00	 call	 newcompobject
  00023	48 89 44 24 20	 mov	 QWORD PTR retval$[rsp], rax

; 904  :     if (!retval) return NULL;

  00028	48 83 7c 24 20
	00		 cmp	 QWORD PTR retval$[rsp], 0
  0002e	75 07		 jne	 SHORT $LN27@PyZlib_unc
  00030	33 c0		 xor	 eax, eax
  00032	e9 69 02 00 00	 jmp	 $LN28@PyZlib_unc
$LN27@PyZlib_unc:

; 905  : 
; 906  :     /* Copy the zstream state
; 907  :      * We use ENTER_ZLIB / LEAVE_ZLIB to make this thread-safe
; 908  :      */
; 909  :     ENTER_ZLIB(self);

  00037	e8 00 00 00 00	 call	 PyEval_SaveThread
  0003c	48 89 44 24 30	 mov	 QWORD PTR _save$21495[rsp], rax
  00041	ba 01 00 00 00	 mov	 edx, 1
  00046	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0004e	48 8b 88 d8 00
	00 00		 mov	 rcx, QWORD PTR [rax+216]
  00055	e8 00 00 00 00	 call	 PyThread_acquire_lock
  0005a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _save$21495[rsp]
  0005f	e8 00 00 00 00	 call	 PyEval_RestoreThread

; 910  :     err = inflateCopy(&retval->zst, &self->zst);

  00064	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0006c	48 83 c0 60	 add	 rax, 96			; 00000060H
  00070	48 8b 4c 24 20	 mov	 rcx, QWORD PTR retval$[rsp]
  00075	48 83 c1 60	 add	 rcx, 96			; 00000060H
  00079	48 8b d0	 mov	 rdx, rax
  0007c	e8 00 00 00 00	 call	 inflateCopy
  00081	89 44 24 28	 mov	 DWORD PTR err$[rsp], eax

; 911  :     switch(err) {

  00085	8b 44 24 28	 mov	 eax, DWORD PTR err$[rsp]
  00089	89 84 24 a0 00
	00 00		 mov	 DWORD PTR tv77[rsp], eax
  00090	83 bc 24 a0 00
	00 00 fc	 cmp	 DWORD PTR tv77[rsp], -4
  00098	74 30		 je	 SHORT $LN22@PyZlib_unc
  0009a	83 bc 24 a0 00
	00 00 fe	 cmp	 DWORD PTR tv77[rsp], -2
  000a2	74 0e		 je	 SHORT $LN23@PyZlib_unc
  000a4	83 bc 24 a0 00
	00 00 00	 cmp	 DWORD PTR tv77[rsp], 0
  000ac	74 02		 je	 SHORT $LN24@PyZlib_unc
  000ae	eb 32		 jmp	 SHORT $LN21@PyZlib_unc
$LN24@PyZlib_unc:

; 912  :     case(Z_OK):
; 913  :         break;

  000b0	eb 65		 jmp	 SHORT $LN25@PyZlib_unc
$LN23@PyZlib_unc:

; 914  :     case(Z_STREAM_ERROR):
; 915  :         PyErr_SetString(PyExc_ValueError, "Inconsistent stream state");

  000b2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@GHDMMOKL@Inconsistent?5stream?5state?$AA@
  000b9	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  000c0	e8 00 00 00 00	 call	 PyErr_SetString

; 916  :         goto error;

  000c5	e9 a8 01 00 00	 jmp	 $error$21502
$LN22@PyZlib_unc:

; 917  :     case(Z_MEM_ERROR):
; 918  :         PyErr_SetString(PyExc_MemoryError,
; 919  :                         "Can't allocate memory for decompression object");

  000ca	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CP@FBGHCAJG@Can?8t?5allocate?5memory?5for?5decomp@
  000d1	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_MemoryError
  000d8	e8 00 00 00 00	 call	 PyErr_SetString

; 920  :         goto error;

  000dd	e9 90 01 00 00	 jmp	 $error$21502
$LN21@PyZlib_unc:

; 921  :     default:
; 922  :         zlib_error(self->zst, err, "while copying decompression object");

  000e2	48 8d 44 24 40	 lea	 rax, QWORD PTR $T22105[rsp]
  000e7	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  000ef	48 8b f8	 mov	 rdi, rax
  000f2	48 8d 71 60	 lea	 rsi, QWORD PTR [rcx+96]
  000f6	b9 58 00 00 00	 mov	 ecx, 88			; 00000058H
  000fb	f3 a4		 rep movsb
  000fd	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0CD@OEAPIDFL@while?5copying?5decompression?5obje@
  00104	8b 54 24 28	 mov	 edx, DWORD PTR err$[rsp]
  00108	48 8d 4c 24 40	 lea	 rcx, QWORD PTR $T22105[rsp]
  0010d	e8 00 00 00 00	 call	 zlib_error

; 923  :         goto error;

  00112	e9 5b 01 00 00	 jmp	 $error$21502
$LN25@PyZlib_unc:

; 924  :     }
; 925  : 
; 926  :     Py_INCREF(self->unused_data);

  00117	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0011f	48 8b 88 b8 00
	00 00		 mov	 rcx, QWORD PTR [rax+184]
  00126	e8 00 00 00 00	 call	 _Py_IncRef

; 927  :     Py_INCREF(self->unconsumed_tail);

  0012b	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00133	48 8b 88 c0 00
	00 00		 mov	 rcx, QWORD PTR [rax+192]
  0013a	e8 00 00 00 00	 call	 _Py_IncRef
$LN20@PyZlib_unc:

; 928  :     Py_XINCREF(self->zdict);

  0013f	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00147	48 83 b8 d0 00
	00 00 00	 cmp	 QWORD PTR [rax+208], 0
  0014f	74 14		 je	 SHORT $LN17@PyZlib_unc
  00151	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00159	48 8b 88 d0 00
	00 00		 mov	 rcx, QWORD PTR [rax+208]
  00160	e8 00 00 00 00	 call	 _Py_IncRef
$LN17@PyZlib_unc:
  00165	33 c0		 xor	 eax, eax
  00167	85 c0		 test	 eax, eax
  00169	75 d4		 jne	 SHORT $LN20@PyZlib_unc
$LN16@PyZlib_unc:

; 929  :     Py_XDECREF(retval->unused_data);

  0016b	48 8b 44 24 20	 mov	 rax, QWORD PTR retval$[rsp]
  00170	48 83 b8 b8 00
	00 00 00	 cmp	 QWORD PTR [rax+184], 0
  00178	74 11		 je	 SHORT $LN13@PyZlib_unc
  0017a	48 8b 44 24 20	 mov	 rax, QWORD PTR retval$[rsp]
  0017f	48 8b 88 b8 00
	00 00		 mov	 rcx, QWORD PTR [rax+184]
  00186	e8 00 00 00 00	 call	 _Py_DecRef
$LN13@PyZlib_unc:
  0018b	33 c0		 xor	 eax, eax
  0018d	85 c0		 test	 eax, eax
  0018f	75 da		 jne	 SHORT $LN16@PyZlib_unc
$LN12@PyZlib_unc:

; 930  :     Py_XDECREF(retval->unconsumed_tail);

  00191	48 8b 44 24 20	 mov	 rax, QWORD PTR retval$[rsp]
  00196	48 83 b8 c0 00
	00 00 00	 cmp	 QWORD PTR [rax+192], 0
  0019e	74 11		 je	 SHORT $LN9@PyZlib_unc
  001a0	48 8b 44 24 20	 mov	 rax, QWORD PTR retval$[rsp]
  001a5	48 8b 88 c0 00
	00 00		 mov	 rcx, QWORD PTR [rax+192]
  001ac	e8 00 00 00 00	 call	 _Py_DecRef
$LN9@PyZlib_unc:
  001b1	33 c0		 xor	 eax, eax
  001b3	85 c0		 test	 eax, eax
  001b5	75 da		 jne	 SHORT $LN12@PyZlib_unc
$LN8@PyZlib_unc:

; 931  :     Py_XDECREF(retval->zdict);

  001b7	48 8b 44 24 20	 mov	 rax, QWORD PTR retval$[rsp]
  001bc	48 83 b8 d0 00
	00 00 00	 cmp	 QWORD PTR [rax+208], 0
  001c4	74 11		 je	 SHORT $LN5@PyZlib_unc
  001c6	48 8b 44 24 20	 mov	 rax, QWORD PTR retval$[rsp]
  001cb	48 8b 88 d0 00
	00 00		 mov	 rcx, QWORD PTR [rax+208]
  001d2	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@PyZlib_unc:
  001d7	33 c0		 xor	 eax, eax
  001d9	85 c0		 test	 eax, eax
  001db	75 da		 jne	 SHORT $LN8@PyZlib_unc

; 932  :     retval->unused_data = self->unused_data;

  001dd	48 8b 44 24 20	 mov	 rax, QWORD PTR retval$[rsp]
  001e2	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  001ea	48 8b 89 b8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+184]
  001f1	48 89 88 b8 00
	00 00		 mov	 QWORD PTR [rax+184], rcx

; 933  :     retval->unconsumed_tail = self->unconsumed_tail;

  001f8	48 8b 44 24 20	 mov	 rax, QWORD PTR retval$[rsp]
  001fd	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00205	48 8b 89 c0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+192]
  0020c	48 89 88 c0 00
	00 00		 mov	 QWORD PTR [rax+192], rcx

; 934  :     retval->zdict = self->zdict;

  00213	48 8b 44 24 20	 mov	 rax, QWORD PTR retval$[rsp]
  00218	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00220	48 8b 89 d0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+208]
  00227	48 89 88 d0 00
	00 00		 mov	 QWORD PTR [rax+208], rcx

; 935  :     retval->eof = self->eof;

  0022e	48 8b 44 24 20	 mov	 rax, QWORD PTR retval$[rsp]
  00233	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  0023b	0f b6 89 c8 00
	00 00		 movzx	 ecx, BYTE PTR [rcx+200]
  00242	88 88 c8 00 00
	00		 mov	 BYTE PTR [rax+200], cl

; 936  : 
; 937  :     /* Mark it as being initialized */
; 938  :     retval->is_initialised = 1;

  00248	48 8b 44 24 20	 mov	 rax, QWORD PTR retval$[rsp]
  0024d	c7 80 cc 00 00
	00 01 00 00 00	 mov	 DWORD PTR [rax+204], 1

; 939  : 
; 940  :     LEAVE_ZLIB(self);

  00257	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0025f	48 8b 88 d8 00
	00 00		 mov	 rcx, QWORD PTR [rax+216]
  00266	e8 00 00 00 00	 call	 PyThread_release_lock

; 941  :     return (PyObject *)retval;

  0026b	48 8b 44 24 20	 mov	 rax, QWORD PTR retval$[rsp]
  00270	eb 2e		 jmp	 SHORT $LN28@PyZlib_unc
$error$21502:

; 942  : 
; 943  : error:
; 944  :     LEAVE_ZLIB(self);

  00272	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0027a	48 8b 88 d8 00
	00 00		 mov	 rcx, QWORD PTR [rax+216]
  00281	e8 00 00 00 00	 call	 PyThread_release_lock
$LN4@PyZlib_unc:

; 945  :     Py_XDECREF(retval);

  00286	48 83 7c 24 20
	00		 cmp	 QWORD PTR retval$[rsp], 0
  0028c	74 0a		 je	 SHORT $LN1@PyZlib_unc
  0028e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR retval$[rsp]
  00293	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@PyZlib_unc:
  00298	33 c0		 xor	 eax, eax
  0029a	85 c0		 test	 eax, eax
  0029c	75 e8		 jne	 SHORT $LN4@PyZlib_unc

; 946  :     return NULL;

  0029e	33 c0		 xor	 eax, eax
$LN28@PyZlib_unc:

; 947  : }

  002a0	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  002a7	5f		 pop	 rdi
  002a8	5e		 pop	 rsi
  002a9	c3		 ret	 0
PyZlib_uncopy ENDP
_TEXT	ENDS
PUBLIC	$T22116
PUBLIC	??_C@_1CM@DFIBKFJC@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAr?$AAe?$AAt?$AAv?$AAa?$AAl?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_0CB@LCINEFBA@length?5must?5be?5greater?5than?5zero@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyZlib_unflush DD imagerel PyZlib_unflush
	DD	imagerel PyZlib_unflush+1042
	DD	imagerel $unwind$PyZlib_unflush
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyZlib_unflush DD 041301H
	DD	0170113H
	DD	0600b700cH
xdata	ENDS
;	COMDAT ??_C@_1CM@DFIBKFJC@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAr?$AAe?$AAt?$AAv?$AAa?$AAl?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CM@DFIBKFJC@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAr?$AAe?$AAt?$AAv?$AAa?$AAl?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 's', 00H
	DB	'_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, '('
	DB	00H, 'r', 00H, 'e', 00H, 't', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	')', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@LCINEFBA@length?5must?5be?5greater?5than?5zero@
CONST	SEGMENT
??_C@_0CB@LCINEFBA@length?5must?5be?5greater?5than?5zero@ DB 'length must'
	DB	' be greater than zero', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyZlib_unflush
_TEXT	SEGMENT
length$ = 32
retval$ = 40
start_total_out$ = 48
err$ = 52
_save$21555 = 56
_save$21568 = 64
_save$21581 = 72
$T22116 = 80
self$ = 208
args$ = 216
PyZlib_unflush PROC					; COMDAT

; 959  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H

; 960  :     int err, length = DEFAULTALLOC;

  00013	c7 44 24 20 00
	40 00 00	 mov	 DWORD PTR length$[rsp], 16384 ; 00004000H

; 961  :     PyObject * retval = NULL;

  0001b	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR retval$[rsp], 0

; 962  :     unsigned long start_total_out;
; 963  : 
; 964  :     if (!PyArg_ParseTuple(args, "|i:flush", &length))

  00024	4c 8d 44 24 20	 lea	 r8, QWORD PTR length$[rsp]
  00029	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08OJMLILBP@?$HMi?3flush?$AA@
  00030	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  00038	e8 00 00 00 00	 call	 PyArg_ParseTuple
  0003d	85 c0		 test	 eax, eax
  0003f	75 07		 jne	 SHORT $LN11@PyZlib_unf

; 965  :         return NULL;

  00041	33 c0		 xor	 eax, eax
  00043	e9 c0 03 00 00	 jmp	 $LN12@PyZlib_unf
$LN11@PyZlib_unf:

; 966  :     if (length <= 0) {

  00048	83 7c 24 20 00	 cmp	 DWORD PTR length$[rsp], 0
  0004d	7f 1a		 jg	 SHORT $LN10@PyZlib_unf

; 967  :         PyErr_SetString(PyExc_ValueError, "length must be greater than zero");

  0004f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CB@LCINEFBA@length?5must?5be?5greater?5than?5zero@
  00056	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0005d	e8 00 00 00 00	 call	 PyErr_SetString

; 968  :         return NULL;

  00062	33 c0		 xor	 eax, eax
  00064	e9 9f 03 00 00	 jmp	 $LN12@PyZlib_unf
$LN10@PyZlib_unf:

; 969  :     }
; 970  :     if (!(retval = PyBytes_FromStringAndSize(NULL, length)))

  00069	48 63 44 24 20	 movsxd	 rax, DWORD PTR length$[rsp]
  0006e	48 8b d0	 mov	 rdx, rax
  00071	33 c9		 xor	 ecx, ecx
  00073	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  00078	48 89 44 24 28	 mov	 QWORD PTR retval$[rsp], rax
  0007d	48 83 7c 24 28
	00		 cmp	 QWORD PTR retval$[rsp], 0
  00083	75 07		 jne	 SHORT $LN9@PyZlib_unf

; 971  :         return NULL;

  00085	33 c0		 xor	 eax, eax
  00087	e9 7c 03 00 00	 jmp	 $LN12@PyZlib_unf
$LN9@PyZlib_unf:

; 972  : 
; 973  : 
; 974  :     ENTER_ZLIB(self);

  0008c	e8 00 00 00 00	 call	 PyEval_SaveThread
  00091	48 89 44 24 38	 mov	 QWORD PTR _save$21555[rsp], rax
  00096	ba 01 00 00 00	 mov	 edx, 1
  0009b	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  000a3	48 8b 88 d8 00
	00 00		 mov	 rcx, QWORD PTR [rax+216]
  000aa	e8 00 00 00 00	 call	 PyThread_acquire_lock
  000af	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _save$21555[rsp]
  000b4	e8 00 00 00 00	 call	 PyEval_RestoreThread

; 975  : 
; 976  :     start_total_out = self->zst.total_out;

  000b9	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  000c1	8b 40 7c	 mov	 eax, DWORD PTR [rax+124]
  000c4	89 44 24 30	 mov	 DWORD PTR start_total_out$[rsp], eax

; 977  :     self->zst.avail_in = PyBytes_GET_SIZE(self->unconsumed_tail);

  000c8	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  000d0	48 8b 80 c0 00
	00 00		 mov	 rax, QWORD PTR [rax+192]
  000d7	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000db	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000e1	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  000e6	85 c0		 test	 eax, eax
  000e8	75 1c		 jne	 SHORT $LN14@PyZlib_unf
  000ea	41 b8 d1 03 00
	00		 mov	 r8d, 977		; 000003d1H
  000f0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@EFPADLPK@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAz?$AAl?$AAi?$AAb?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  000f7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EK@DNFGIDFE@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAu?$AAn?$AAc?$AAo?$AAn?$AAs?$AAu?$AAm?$AAe?$AAd?$AA_?$AAt@
  000fe	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00104	33 c0		 xor	 eax, eax
$LN14@PyZlib_unf:
  00106	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0010e	48 8b 80 c0 00
	00 00		 mov	 rax, QWORD PTR [rax+192]
  00115	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  0011d	8b 40 60	 mov	 eax, DWORD PTR [rax+96]
  00120	89 41 68	 mov	 DWORD PTR [rcx+104], eax

; 978  :     self->zst.next_in = (Byte *)PyBytes_AS_STRING(self->unconsumed_tail);

  00123	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0012b	48 8b 80 c0 00
	00 00		 mov	 rax, QWORD PTR [rax+192]
  00132	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00136	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0013c	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  00141	85 c0		 test	 eax, eax
  00143	75 1c		 jne	 SHORT $LN15@PyZlib_unf
  00145	41 b8 d2 03 00
	00		 mov	 r8d, 978		; 000003d2H
  0014b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@EFPADLPK@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAz?$AAl?$AAi?$AAb?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  00152	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EK@DNFGIDFE@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAu?$AAn?$AAc?$AAo?$AAn?$AAs?$AAu?$AAm?$AAe?$AAd?$AA_?$AAt@
  00159	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0015f	33 c0		 xor	 eax, eax
$LN15@PyZlib_unf:
  00161	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00169	48 8b 80 c0 00
	00 00		 mov	 rax, QWORD PTR [rax+192]
  00170	48 83 c0 78	 add	 rax, 120		; 00000078H
  00174	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  0017c	48 89 41 60	 mov	 QWORD PTR [rcx+96], rax

; 979  :     self->zst.avail_out = length;

  00180	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00188	8b 4c 24 20	 mov	 ecx, DWORD PTR length$[rsp]
  0018c	89 48 78	 mov	 DWORD PTR [rax+120], ecx

; 980  :     self->zst.next_out = (Byte *)PyBytes_AS_STRING(retval);

  0018f	48 8b 44 24 28	 mov	 rax, QWORD PTR retval$[rsp]
  00194	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00198	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0019e	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  001a3	85 c0		 test	 eax, eax
  001a5	75 1c		 jne	 SHORT $LN16@PyZlib_unf
  001a7	41 b8 d4 03 00
	00		 mov	 r8d, 980		; 000003d4H
  001ad	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@EFPADLPK@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAz?$AAl?$AAi?$AAb?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  001b4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@DFIBKFJC@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAr?$AAe?$AAt?$AAv?$AAa?$AAl?$AA?$CJ?$AA?$AA@
  001bb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001c1	33 c0		 xor	 eax, eax
$LN16@PyZlib_unf:
  001c3	48 8b 44 24 28	 mov	 rax, QWORD PTR retval$[rsp]
  001c8	48 83 c0 78	 add	 rax, 120		; 00000078H
  001cc	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  001d4	48 89 41 70	 mov	 QWORD PTR [rcx+112], rax

; 981  : 
; 982  :     Py_BEGIN_ALLOW_THREADS

  001d8	e8 00 00 00 00	 call	 PyEval_SaveThread
  001dd	48 89 44 24 40	 mov	 QWORD PTR _save$21568[rsp], rax

; 983  :     err = inflate(&(self->zst), Z_FINISH);

  001e2	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  001ea	48 83 c0 60	 add	 rax, 96			; 00000060H
  001ee	ba 04 00 00 00	 mov	 edx, 4
  001f3	48 8b c8	 mov	 rcx, rax
  001f6	e8 00 00 00 00	 call	 inflate
  001fb	89 44 24 34	 mov	 DWORD PTR err$[rsp], eax

; 984  :     Py_END_ALLOW_THREADS

  001ff	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _save$21568[rsp]
  00204	e8 00 00 00 00	 call	 PyEval_RestoreThread
$LN8@PyZlib_unf:

; 985  : 
; 986  :     /* while Z_OK and the output buffer is full, there might be more output,
; 987  :        so extend the output buffer and try again */
; 988  :     while ((err == Z_OK || err == Z_BUF_ERROR) && self->zst.avail_out == 0) {

  00209	83 7c 24 34 00	 cmp	 DWORD PTR err$[rsp], 0
  0020e	74 0b		 je	 SHORT $LN6@PyZlib_unf
  00210	83 7c 24 34 fb	 cmp	 DWORD PTR err$[rsp], -5
  00215	0f 85 e1 00 00
	00		 jne	 $LN7@PyZlib_unf
$LN6@PyZlib_unf:
  0021b	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00223	83 78 78 00	 cmp	 DWORD PTR [rax+120], 0
  00227	0f 85 cf 00 00
	00		 jne	 $LN7@PyZlib_unf

; 989  :         if (_PyBytes_Resize(&retval, length << 1) < 0) {

  0022d	8b 44 24 20	 mov	 eax, DWORD PTR length$[rsp]
  00231	d1 e0		 shl	 eax, 1
  00233	48 98		 cdqe
  00235	48 8b d0	 mov	 rdx, rax
  00238	48 8d 4c 24 28	 lea	 rcx, QWORD PTR retval$[rsp]
  0023d	e8 00 00 00 00	 call	 _PyBytes_Resize
  00242	85 c0		 test	 eax, eax
  00244	7d 18		 jge	 SHORT $LN5@PyZlib_unf

; 990  :             Py_DECREF(retval);

  00246	48 8b 4c 24 28	 mov	 rcx, QWORD PTR retval$[rsp]
  0024b	e8 00 00 00 00	 call	 _Py_DecRef

; 991  :             retval = NULL;

  00250	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR retval$[rsp], 0

; 992  :             goto error;

  00259	e9 91 01 00 00	 jmp	 $error$21576
$LN5@PyZlib_unf:

; 993  :         }
; 994  :         self->zst.next_out = (Byte *)PyBytes_AS_STRING(retval) + length;

  0025e	48 8b 44 24 28	 mov	 rax, QWORD PTR retval$[rsp]
  00263	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00267	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0026d	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  00272	85 c0		 test	 eax, eax
  00274	75 1c		 jne	 SHORT $LN17@PyZlib_unf
  00276	41 b8 e2 03 00
	00		 mov	 r8d, 994		; 000003e2H
  0027c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@EFPADLPK@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAz?$AAl?$AAi?$AAb?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  00283	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@DFIBKFJC@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAr?$AAe?$AAt?$AAv?$AAa?$AAl?$AA?$CJ?$AA?$AA@
  0028a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00290	33 c0		 xor	 eax, eax
$LN17@PyZlib_unf:
  00292	48 63 44 24 20	 movsxd	 rax, DWORD PTR length$[rsp]
  00297	48 8b 4c 24 28	 mov	 rcx, QWORD PTR retval$[rsp]
  0029c	48 8d 44 01 78	 lea	 rax, QWORD PTR [rcx+rax+120]
  002a1	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  002a9	48 89 41 70	 mov	 QWORD PTR [rcx+112], rax

; 995  :         self->zst.avail_out = length;

  002ad	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  002b5	8b 4c 24 20	 mov	 ecx, DWORD PTR length$[rsp]
  002b9	89 48 78	 mov	 DWORD PTR [rax+120], ecx

; 996  :         length = length << 1;

  002bc	8b 44 24 20	 mov	 eax, DWORD PTR length$[rsp]
  002c0	d1 e0		 shl	 eax, 1
  002c2	89 44 24 20	 mov	 DWORD PTR length$[rsp], eax

; 997  : 
; 998  :         Py_BEGIN_ALLOW_THREADS

  002c6	e8 00 00 00 00	 call	 PyEval_SaveThread
  002cb	48 89 44 24 48	 mov	 QWORD PTR _save$21581[rsp], rax

; 999  :         err = inflate(&(self->zst), Z_FINISH);

  002d0	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  002d8	48 83 c0 60	 add	 rax, 96			; 00000060H
  002dc	ba 04 00 00 00	 mov	 edx, 4
  002e1	48 8b c8	 mov	 rcx, rax
  002e4	e8 00 00 00 00	 call	 inflate
  002e9	89 44 24 34	 mov	 DWORD PTR err$[rsp], eax

; 1000 :         Py_END_ALLOW_THREADS

  002ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _save$21581[rsp]
  002f2	e8 00 00 00 00	 call	 PyEval_RestoreThread

; 1001 :     }

  002f7	e9 0d ff ff ff	 jmp	 $LN8@PyZlib_unf
$LN7@PyZlib_unf:

; 1002 : 
; 1003 :     if (save_unconsumed_input(self, err) < 0) {

  002fc	8b 54 24 34	 mov	 edx, DWORD PTR err$[rsp]
  00300	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00308	e8 00 00 00 00	 call	 save_unconsumed_input
  0030d	85 c0		 test	 eax, eax
  0030f	7d 18		 jge	 SHORT $LN4@PyZlib_unf

; 1004 :         Py_DECREF(retval);

  00311	48 8b 4c 24 28	 mov	 rcx, QWORD PTR retval$[rsp]
  00316	e8 00 00 00 00	 call	 _Py_DecRef

; 1005 :         retval = NULL;

  0031b	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR retval$[rsp], 0

; 1006 :         goto error;

  00324	e9 c6 00 00 00	 jmp	 $error$21576
$LN4@PyZlib_unf:

; 1007 :     }
; 1008 : 
; 1009 :     /* If at end of stream, clean up any memory allocated by zlib. */
; 1010 :     if (err == Z_STREAM_END) {

  00329	83 7c 24 34 01	 cmp	 DWORD PTR err$[rsp], 1
  0032e	0f 85 85 00 00
	00		 jne	 $LN3@PyZlib_unf

; 1011 :         self->eof = 1;

  00334	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0033c	c6 80 c8 00 00
	00 01		 mov	 BYTE PTR [rax+200], 1

; 1012 :         self->is_initialised = 0;

  00343	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0034b	c7 80 cc 00 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+204], 0

; 1013 :         err = inflateEnd(&(self->zst));

  00355	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0035d	48 83 c0 60	 add	 rax, 96			; 00000060H
  00361	48 8b c8	 mov	 rcx, rax
  00364	e8 00 00 00 00	 call	 inflateEnd
  00369	89 44 24 34	 mov	 DWORD PTR err$[rsp], eax

; 1014 :         if (err != Z_OK) {

  0036d	83 7c 24 34 00	 cmp	 DWORD PTR err$[rsp], 0
  00372	74 45		 je	 SHORT $LN2@PyZlib_unf

; 1015 :             zlib_error(self->zst, err, "while finishing decompression");

  00374	48 8d 44 24 50	 lea	 rax, QWORD PTR $T22116[rsp]
  00379	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00381	48 8b f8	 mov	 rdi, rax
  00384	48 8d 71 60	 lea	 rsi, QWORD PTR [rcx+96]
  00388	b9 58 00 00 00	 mov	 ecx, 88			; 00000058H
  0038d	f3 a4		 rep movsb
  0038f	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BO@OCMLNOON@while?5finishing?5decompression?$AA@
  00396	8b 54 24 34	 mov	 edx, DWORD PTR err$[rsp]
  0039a	48 8d 4c 24 50	 lea	 rcx, QWORD PTR $T22116[rsp]
  0039f	e8 00 00 00 00	 call	 zlib_error

; 1016 :             Py_DECREF(retval);

  003a4	48 8b 4c 24 28	 mov	 rcx, QWORD PTR retval$[rsp]
  003a9	e8 00 00 00 00	 call	 _Py_DecRef

; 1017 :             retval = NULL;

  003ae	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR retval$[rsp], 0

; 1018 :             goto error;

  003b7	eb 36		 jmp	 SHORT $error$21576
$LN2@PyZlib_unf:
$LN3@PyZlib_unf:

; 1019 :         }
; 1020 :     }
; 1021 : 
; 1022 :     if (_PyBytes_Resize(&retval, self->zst.total_out - start_total_out) < 0) {

  003b9	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  003c1	8b 4c 24 30	 mov	 ecx, DWORD PTR start_total_out$[rsp]
  003c5	8b 40 7c	 mov	 eax, DWORD PTR [rax+124]
  003c8	2b c1		 sub	 eax, ecx
  003ca	8b c0		 mov	 eax, eax
  003cc	8b d0		 mov	 edx, eax
  003ce	48 8d 4c 24 28	 lea	 rcx, QWORD PTR retval$[rsp]
  003d3	e8 00 00 00 00	 call	 _PyBytes_Resize
  003d8	85 c0		 test	 eax, eax
  003da	7d 13		 jge	 SHORT $LN1@PyZlib_unf

; 1023 :         Py_DECREF(retval);

  003dc	48 8b 4c 24 28	 mov	 rcx, QWORD PTR retval$[rsp]
  003e1	e8 00 00 00 00	 call	 _Py_DecRef

; 1024 :         retval = NULL;

  003e6	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR retval$[rsp], 0
$LN1@PyZlib_unf:
$error$21576:

; 1025 :     }
; 1026 : 
; 1027 : error:
; 1028 : 
; 1029 :     LEAVE_ZLIB(self);

  003ef	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  003f7	48 8b 88 d8 00
	00 00		 mov	 rcx, QWORD PTR [rax+216]
  003fe	e8 00 00 00 00	 call	 PyThread_release_lock

; 1030 : 
; 1031 :     return retval;

  00403	48 8b 44 24 28	 mov	 rax, QWORD PTR retval$[rsp]
$LN12@PyZlib_unf:

; 1032 : }

  00408	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  0040f	5f		 pop	 rdi
  00410	5e		 pop	 rsi
  00411	c3		 ret	 0
PyZlib_unflush ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@FFFDMCPK@y?$CK?$HMI?3adler32?$AA@	; `string'
EXTRN	PyLong_FromUnsignedLong:PROC
EXTRN	adler32:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyZlib_adler32 DD imagerel PyZlib_adler32
	DD	imagerel PyZlib_adler32+297
	DD	imagerel $unwind$PyZlib_adler32
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyZlib_adler32 DD 021101H
	DD	0130111H
xdata	ENDS
;	COMDAT ??_C@_0N@FFFDMCPK@y?$CK?$HMI?3adler32?$AA@
CONST	SEGMENT
??_C@_0N@FFFDMCPK@y?$CK?$HMI?3adler32?$AA@ DB 'y*|I:adler32', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyZlib_adler32
_TEXT	SEGMENT
pbuf$ = 32
adler32val$ = 112
len$21637 = 120
buf$21636 = 128
_save$21638 = 136
self$ = 160
args$ = 168
PyZlib_adler32 PROC					; COMDAT

; 1076 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 1077 :     unsigned int adler32val = 1;  /* adler32(0L, Z_NULL, 0) */

  00011	c7 44 24 70 01
	00 00 00	 mov	 DWORD PTR adler32val$[rsp], 1

; 1078 :     Py_buffer pbuf;
; 1079 : 
; 1080 :     if (!PyArg_ParseTuple(args, "y*|I:adler32", &pbuf, &adler32val))

  00019	4c 8d 4c 24 70	 lea	 r9, QWORD PTR adler32val$[rsp]
  0001e	4c 8d 44 24 20	 lea	 r8, QWORD PTR pbuf$[rsp]
  00023	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@FFFDMCPK@y?$CK?$HMI?3adler32?$AA@
  0002a	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  00032	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00037	85 c0		 test	 eax, eax
  00039	75 07		 jne	 SHORT $LN5@PyZlib_adl

; 1081 :         return NULL;

  0003b	33 c0		 xor	 eax, eax
  0003d	e9 df 00 00 00	 jmp	 $LN6@PyZlib_adl
$LN5@PyZlib_adl:

; 1082 :     /* Releasing the GIL for very small buffers is inefficient
; 1083 :        and may lower performance */
; 1084 :     if (pbuf.len > 1024*5) {

  00042	48 81 7c 24 30
	00 14 00 00	 cmp	 QWORD PTR pbuf$[rsp+16], 5120 ; 00001400H
  0004b	0f 8e a6 00 00
	00		 jle	 $LN4@PyZlib_adl

; 1085 :         unsigned char *buf = pbuf.buf;

  00051	48 8b 44 24 20	 mov	 rax, QWORD PTR pbuf$[rsp]
  00056	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR buf$21636[rsp], rax

; 1086 :         Py_ssize_t len = pbuf.len;

  0005e	48 8b 44 24 30	 mov	 rax, QWORD PTR pbuf$[rsp+16]
  00063	48 89 44 24 78	 mov	 QWORD PTR len$21637[rsp], rax

; 1087 : 
; 1088 :         Py_BEGIN_ALLOW_THREADS

  00068	e8 00 00 00 00	 call	 PyEval_SaveThread
  0006d	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR _save$21638[rsp], rax
$LN3@PyZlib_adl:

; 1089 :         /* Avoid truncation of length for very large buffers. adler32() takes
; 1090 :            length as an unsigned int, which may be narrower than Py_ssize_t. */
; 1091 :         while (len > (size_t) UINT_MAX) {

  00075	b8 ff ff ff ff	 mov	 eax, -1			; ffffffffH
  0007a	48 39 44 24 78	 cmp	 QWORD PTR len$21637[rsp], rax
  0007f	76 4d		 jbe	 SHORT $LN2@PyZlib_adl

; 1092 :             adler32val = adler32(adler32val, buf, UINT_MAX);

  00081	41 b8 ff ff ff
	ff		 mov	 r8d, -1			; ffffffffH
  00087	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR buf$21636[rsp]
  0008f	8b 4c 24 70	 mov	 ecx, DWORD PTR adler32val$[rsp]
  00093	e8 00 00 00 00	 call	 adler32
  00098	89 44 24 70	 mov	 DWORD PTR adler32val$[rsp], eax

; 1093 :             buf += (size_t) UINT_MAX;

  0009c	b8 ff ff ff ff	 mov	 eax, -1
  000a1	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR buf$21636[rsp]
  000a9	48 03 c8	 add	 rcx, rax
  000ac	48 8b c1	 mov	 rax, rcx
  000af	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR buf$21636[rsp], rax

; 1094 :             len -= (size_t) UINT_MAX;

  000b7	b8 ff ff ff ff	 mov	 eax, -1			; ffffffffH
  000bc	48 8b 4c 24 78	 mov	 rcx, QWORD PTR len$21637[rsp]
  000c1	48 2b c8	 sub	 rcx, rax
  000c4	48 8b c1	 mov	 rax, rcx
  000c7	48 89 44 24 78	 mov	 QWORD PTR len$21637[rsp], rax

; 1095 :         }

  000cc	eb a7		 jmp	 SHORT $LN3@PyZlib_adl
$LN2@PyZlib_adl:

; 1096 :         adler32val = adler32(adler32val, buf, len);

  000ce	44 8b 44 24 78	 mov	 r8d, DWORD PTR len$21637[rsp]
  000d3	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR buf$21636[rsp]
  000db	8b 4c 24 70	 mov	 ecx, DWORD PTR adler32val$[rsp]
  000df	e8 00 00 00 00	 call	 adler32
  000e4	89 44 24 70	 mov	 DWORD PTR adler32val$[rsp], eax

; 1097 :         Py_END_ALLOW_THREADS

  000e8	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR _save$21638[rsp]
  000f0	e8 00 00 00 00	 call	 PyEval_RestoreThread

; 1098 :     } else {

  000f5	eb 17		 jmp	 SHORT $LN1@PyZlib_adl
$LN4@PyZlib_adl:

; 1099 :         adler32val = adler32(adler32val, pbuf.buf, pbuf.len);

  000f7	44 8b 44 24 30	 mov	 r8d, DWORD PTR pbuf$[rsp+16]
  000fc	48 8b 54 24 20	 mov	 rdx, QWORD PTR pbuf$[rsp]
  00101	8b 4c 24 70	 mov	 ecx, DWORD PTR adler32val$[rsp]
  00105	e8 00 00 00 00	 call	 adler32
  0010a	89 44 24 70	 mov	 DWORD PTR adler32val$[rsp], eax
$LN1@PyZlib_adl:

; 1100 :     }
; 1101 :     PyBuffer_Release(&pbuf);

  0010e	48 8d 4c 24 20	 lea	 rcx, QWORD PTR pbuf$[rsp]
  00113	e8 00 00 00 00	 call	 PyBuffer_Release

; 1102 :     return PyLong_FromUnsignedLong(adler32val & 0xffffffffU);

  00118	8b 4c 24 70	 mov	 ecx, DWORD PTR adler32val$[rsp]
  0011c	e8 00 00 00 00	 call	 PyLong_FromUnsignedLong
$LN6@PyZlib_adl:

; 1103 : }

  00121	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  00128	c3		 ret	 0
PyZlib_adler32 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@IKICDLGJ@y?$CK?$HMI?3crc32?$AA@	; `string'
EXTRN	crc32:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyZlib_crc32 DD imagerel PyZlib_crc32
	DD	imagerel PyZlib_crc32+297
	DD	imagerel $unwind$PyZlib_crc32
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyZlib_crc32 DD 021101H
	DD	0130111H
xdata	ENDS
;	COMDAT ??_C@_0L@IKICDLGJ@y?$CK?$HMI?3crc32?$AA@
CONST	SEGMENT
??_C@_0L@IKICDLGJ@y?$CK?$HMI?3crc32?$AA@ DB 'y*|I:crc32', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyZlib_crc32
_TEXT	SEGMENT
pbuf$ = 32
signed_val$ = 112
crc32val$ = 116
len$21661 = 120
buf$21660 = 128
_save$21662 = 136
self$ = 160
args$ = 168
PyZlib_crc32 PROC					; COMDAT

; 1113 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 1114 :     unsigned int crc32val = 0;  /* crc32(0L, Z_NULL, 0) */

  00011	c7 44 24 74 00
	00 00 00	 mov	 DWORD PTR crc32val$[rsp], 0

; 1115 :     Py_buffer pbuf;
; 1116 :     int signed_val;
; 1117 : 
; 1118 :     if (!PyArg_ParseTuple(args, "y*|I:crc32", &pbuf, &crc32val))

  00019	4c 8d 4c 24 74	 lea	 r9, QWORD PTR crc32val$[rsp]
  0001e	4c 8d 44 24 20	 lea	 r8, QWORD PTR pbuf$[rsp]
  00023	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@IKICDLGJ@y?$CK?$HMI?3crc32?$AA@
  0002a	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  00032	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00037	85 c0		 test	 eax, eax
  00039	75 07		 jne	 SHORT $LN5@PyZlib_crc

; 1119 :         return NULL;

  0003b	33 c0		 xor	 eax, eax
  0003d	e9 df 00 00 00	 jmp	 $LN6@PyZlib_crc
$LN5@PyZlib_crc:

; 1120 :     /* Releasing the GIL for very small buffers is inefficient
; 1121 :        and may lower performance */
; 1122 :     if (pbuf.len > 1024*5) {

  00042	48 81 7c 24 30
	00 14 00 00	 cmp	 QWORD PTR pbuf$[rsp+16], 5120 ; 00001400H
  0004b	0f 8e a6 00 00
	00		 jle	 $LN4@PyZlib_crc

; 1123 :         unsigned char *buf = pbuf.buf;

  00051	48 8b 44 24 20	 mov	 rax, QWORD PTR pbuf$[rsp]
  00056	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR buf$21660[rsp], rax

; 1124 :         Py_ssize_t len = pbuf.len;

  0005e	48 8b 44 24 30	 mov	 rax, QWORD PTR pbuf$[rsp+16]
  00063	48 89 44 24 78	 mov	 QWORD PTR len$21661[rsp], rax

; 1125 : 
; 1126 :         Py_BEGIN_ALLOW_THREADS

  00068	e8 00 00 00 00	 call	 PyEval_SaveThread
  0006d	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR _save$21662[rsp], rax
$LN3@PyZlib_crc:

; 1127 :         /* Avoid truncation of length for very large buffers. crc32() takes
; 1128 :            length as an unsigned int, which may be narrower than Py_ssize_t. */
; 1129 :         while (len > (size_t) UINT_MAX) {

  00075	b8 ff ff ff ff	 mov	 eax, -1			; ffffffffH
  0007a	48 39 44 24 78	 cmp	 QWORD PTR len$21661[rsp], rax
  0007f	76 4d		 jbe	 SHORT $LN2@PyZlib_crc

; 1130 :             crc32val = crc32(crc32val, buf, UINT_MAX);

  00081	41 b8 ff ff ff
	ff		 mov	 r8d, -1			; ffffffffH
  00087	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR buf$21660[rsp]
  0008f	8b 4c 24 74	 mov	 ecx, DWORD PTR crc32val$[rsp]
  00093	e8 00 00 00 00	 call	 crc32
  00098	89 44 24 74	 mov	 DWORD PTR crc32val$[rsp], eax

; 1131 :             buf += (size_t) UINT_MAX;

  0009c	b8 ff ff ff ff	 mov	 eax, -1
  000a1	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR buf$21660[rsp]
  000a9	48 03 c8	 add	 rcx, rax
  000ac	48 8b c1	 mov	 rax, rcx
  000af	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR buf$21660[rsp], rax

; 1132 :             len -= (size_t) UINT_MAX;

  000b7	b8 ff ff ff ff	 mov	 eax, -1			; ffffffffH
  000bc	48 8b 4c 24 78	 mov	 rcx, QWORD PTR len$21661[rsp]
  000c1	48 2b c8	 sub	 rcx, rax
  000c4	48 8b c1	 mov	 rax, rcx
  000c7	48 89 44 24 78	 mov	 QWORD PTR len$21661[rsp], rax

; 1133 :         }

  000cc	eb a7		 jmp	 SHORT $LN3@PyZlib_crc
$LN2@PyZlib_crc:

; 1134 :         signed_val = crc32(crc32val, buf, len);

  000ce	44 8b 44 24 78	 mov	 r8d, DWORD PTR len$21661[rsp]
  000d3	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR buf$21660[rsp]
  000db	8b 4c 24 74	 mov	 ecx, DWORD PTR crc32val$[rsp]
  000df	e8 00 00 00 00	 call	 crc32
  000e4	89 44 24 70	 mov	 DWORD PTR signed_val$[rsp], eax

; 1135 :         Py_END_ALLOW_THREADS

  000e8	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR _save$21662[rsp]
  000f0	e8 00 00 00 00	 call	 PyEval_RestoreThread

; 1136 :     } else {

  000f5	eb 17		 jmp	 SHORT $LN1@PyZlib_crc
$LN4@PyZlib_crc:

; 1137 :         signed_val = crc32(crc32val, pbuf.buf, pbuf.len);

  000f7	44 8b 44 24 30	 mov	 r8d, DWORD PTR pbuf$[rsp+16]
  000fc	48 8b 54 24 20	 mov	 rdx, QWORD PTR pbuf$[rsp]
  00101	8b 4c 24 74	 mov	 ecx, DWORD PTR crc32val$[rsp]
  00105	e8 00 00 00 00	 call	 crc32
  0010a	89 44 24 70	 mov	 DWORD PTR signed_val$[rsp], eax
$LN1@PyZlib_crc:

; 1138 :     }
; 1139 :     PyBuffer_Release(&pbuf);

  0010e	48 8d 4c 24 20	 lea	 rcx, QWORD PTR pbuf$[rsp]
  00113	e8 00 00 00 00	 call	 PyBuffer_Release

; 1140 :     return PyLong_FromUnsignedLong(signed_val & 0xffffffffU);

  00118	8b 4c 24 70	 mov	 ecx, DWORD PTR signed_val$[rsp]
  0011c	e8 00 00 00 00	 call	 PyLong_FromUnsignedLong
$LN6@PyZlib_crc:

; 1141 : }

  00121	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  00128	c3		 ret	 0
PyZlib_crc32 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0M@EKHGKOEI@__version__?$AA@		; `string'
PUBLIC	??_C@_03HLLJOCDO@1?40?$AA@			; `string'
PUBLIC	??_C@_0BF@BKLGIFIO@ZLIB_RUNTIME_VERSION?$AA@	; `string'
PUBLIC	??_C@_0N@CEDJGPLC@ZLIB_VERSION?$AA@		; `string'
PUBLIC	??_C@_0N@JBPDPLFF@Z_FULL_FLUSH?$AA@		; `string'
PUBLIC	??_C@_0N@KDLIEJHI@Z_SYNC_FLUSH?$AA@		; `string'
PUBLIC	??_C@_0L@JLINHBLB@Z_NO_FLUSH?$AA@		; `string'
PUBLIC	??_C@_08CKIFHOEP@Z_FINISH?$AA@			; `string'
PUBLIC	??_C@_0BD@BOJLLCPN@Z_DEFAULT_STRATEGY?$AA@	; `string'
PUBLIC	??_C@_0P@MOLNDBMM@Z_HUFFMAN_ONLY?$AA@		; `string'
PUBLIC	??_C@_0L@NKMLDFOL@Z_FILTERED?$AA@		; `string'
PUBLIC	??_C@_0BG@HFLKKCF@Z_DEFAULT_COMPRESSION?$AA@	; `string'
PUBLIC	??_C@_0BD@CKPPBPCJ@Z_BEST_COMPRESSION?$AA@	; `string'
PUBLIC	??_C@_0N@MIKPIAPL@Z_BEST_SPEED?$AA@		; `string'
PUBLIC	??_C@_0O@FGNNGBNA@DEF_MEM_LEVEL?$AA@		; `string'
PUBLIC	??_C@_08GHAMNDKB@DEFLATED?$AA@			; `string'
PUBLIC	??_C@_09MCABNBNK@MAX_WBITS?$AA@			; `string'
PUBLIC	??_C@_05KKCIMGE@error?$AA@			; `string'
PUBLIC	??_C@_0L@PKDNKAFK@zlib?4error?$AA@		; `string'
PUBLIC	PyInit_zlib
EXTRN	PyModule_AddStringConstant:PROC
EXTRN	zlibVersion:PROC
EXTRN	PyUnicode_FromString:PROC
EXTRN	PyModule_AddIntConstant:PROC
EXTRN	PyModule_AddObject:PROC
EXTRN	PyErr_NewException:PROC
EXTRN	PyModule_Create2TraceRefs:PROC
EXTRN	PyType_Ready:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyInit_zlib DD imagerel $LN9
	DD	imagerel $LN9+579
	DD	imagerel $unwind$PyInit_zlib
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyInit_zlib DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_0M@EKHGKOEI@__version__?$AA@
CONST	SEGMENT
??_C@_0M@EKHGKOEI@__version__?$AA@ DB '__version__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03HLLJOCDO@1?40?$AA@
CONST	SEGMENT
??_C@_03HLLJOCDO@1?40?$AA@ DB '1.0', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@BKLGIFIO@ZLIB_RUNTIME_VERSION?$AA@
CONST	SEGMENT
??_C@_0BF@BKLGIFIO@ZLIB_RUNTIME_VERSION?$AA@ DB 'ZLIB_RUNTIME_VERSION', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@CEDJGPLC@ZLIB_VERSION?$AA@
CONST	SEGMENT
??_C@_0N@CEDJGPLC@ZLIB_VERSION?$AA@ DB 'ZLIB_VERSION', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@JBPDPLFF@Z_FULL_FLUSH?$AA@
CONST	SEGMENT
??_C@_0N@JBPDPLFF@Z_FULL_FLUSH?$AA@ DB 'Z_FULL_FLUSH', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@KDLIEJHI@Z_SYNC_FLUSH?$AA@
CONST	SEGMENT
??_C@_0N@KDLIEJHI@Z_SYNC_FLUSH?$AA@ DB 'Z_SYNC_FLUSH', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JLINHBLB@Z_NO_FLUSH?$AA@
CONST	SEGMENT
??_C@_0L@JLINHBLB@Z_NO_FLUSH?$AA@ DB 'Z_NO_FLUSH', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08CKIFHOEP@Z_FINISH?$AA@
CONST	SEGMENT
??_C@_08CKIFHOEP@Z_FINISH?$AA@ DB 'Z_FINISH', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@BOJLLCPN@Z_DEFAULT_STRATEGY?$AA@
CONST	SEGMENT
??_C@_0BD@BOJLLCPN@Z_DEFAULT_STRATEGY?$AA@ DB 'Z_DEFAULT_STRATEGY', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@MOLNDBMM@Z_HUFFMAN_ONLY?$AA@
CONST	SEGMENT
??_C@_0P@MOLNDBMM@Z_HUFFMAN_ONLY?$AA@ DB 'Z_HUFFMAN_ONLY', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NKMLDFOL@Z_FILTERED?$AA@
CONST	SEGMENT
??_C@_0L@NKMLDFOL@Z_FILTERED?$AA@ DB 'Z_FILTERED', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@HFLKKCF@Z_DEFAULT_COMPRESSION?$AA@
CONST	SEGMENT
??_C@_0BG@HFLKKCF@Z_DEFAULT_COMPRESSION?$AA@ DB 'Z_DEFAULT_COMPRESSION', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@CKPPBPCJ@Z_BEST_COMPRESSION?$AA@
CONST	SEGMENT
??_C@_0BD@CKPPBPCJ@Z_BEST_COMPRESSION?$AA@ DB 'Z_BEST_COMPRESSION', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MIKPIAPL@Z_BEST_SPEED?$AA@
CONST	SEGMENT
??_C@_0N@MIKPIAPL@Z_BEST_SPEED?$AA@ DB 'Z_BEST_SPEED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@FGNNGBNA@DEF_MEM_LEVEL?$AA@
CONST	SEGMENT
??_C@_0O@FGNNGBNA@DEF_MEM_LEVEL?$AA@ DB 'DEF_MEM_LEVEL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08GHAMNDKB@DEFLATED?$AA@
CONST	SEGMENT
??_C@_08GHAMNDKB@DEFLATED?$AA@ DB 'DEFLATED', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09MCABNBNK@MAX_WBITS?$AA@
CONST	SEGMENT
??_C@_09MCABNBNK@MAX_WBITS?$AA@ DB 'MAX_WBITS', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05KKCIMGE@error?$AA@
CONST	SEGMENT
??_C@_05KKCIMGE@error?$AA@ DB 'error', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@PKDNKAFK@zlib?4error?$AA@
CONST	SEGMENT
??_C@_0L@PKDNKAFK@zlib?4error?$AA@ DB 'zlib.error', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyInit_zlib
_TEXT	SEGMENT
ver$ = 32
m$ = 40
PyInit_zlib PROC					; COMDAT

; 1253 : {

$LN9:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1254 :     PyObject *m, *ver;
; 1255 :     if (PyType_Ready(&Comptype) < 0)

  00004	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:Comptype
  0000b	e8 00 00 00 00	 call	 PyType_Ready
  00010	85 c0		 test	 eax, eax
  00012	7d 07		 jge	 SHORT $LN6@PyInit_zli

; 1256 :             return NULL;

  00014	33 c0		 xor	 eax, eax
  00016	e9 23 02 00 00	 jmp	 $LN7@PyInit_zli
$LN6@PyInit_zli:

; 1257 :     if (PyType_Ready(&Decomptype) < 0)

  0001b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:Decomptype
  00022	e8 00 00 00 00	 call	 PyType_Ready
  00027	85 c0		 test	 eax, eax
  00029	7d 07		 jge	 SHORT $LN5@PyInit_zli

; 1258 :             return NULL;

  0002b	33 c0		 xor	 eax, eax
  0002d	e9 0c 02 00 00	 jmp	 $LN7@PyInit_zli
$LN5@PyInit_zli:

; 1259 :     m = PyModule_Create(&zlibmodule);

  00032	ba f5 03 00 00	 mov	 edx, 1013		; 000003f5H
  00037	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:zlibmodule
  0003e	e8 00 00 00 00	 call	 PyModule_Create2TraceRefs
  00043	48 89 44 24 28	 mov	 QWORD PTR m$[rsp], rax

; 1260 :     if (m == NULL)

  00048	48 83 7c 24 28
	00		 cmp	 QWORD PTR m$[rsp], 0
  0004e	75 07		 jne	 SHORT $LN4@PyInit_zli

; 1261 :         return NULL;

  00050	33 c0		 xor	 eax, eax
  00052	e9 e7 01 00 00	 jmp	 $LN7@PyInit_zli
$LN4@PyInit_zli:

; 1262 : 
; 1263 :     ZlibError = PyErr_NewException("zlib.error", NULL, NULL);

  00057	45 33 c0	 xor	 r8d, r8d
  0005a	33 d2		 xor	 edx, edx
  0005c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@PKDNKAFK@zlib?4error?$AA@
  00063	e8 00 00 00 00	 call	 PyErr_NewException
  00068	48 89 05 00 00
	00 00		 mov	 QWORD PTR ZlibError, rax

; 1264 :     if (ZlibError != NULL) {

  0006f	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ZlibError, 0
  00077	74 24		 je	 SHORT $LN3@PyInit_zli

; 1265 :         Py_INCREF(ZlibError);

  00079	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ZlibError
  00080	e8 00 00 00 00	 call	 _Py_IncRef

; 1266 :         PyModule_AddObject(m, "error", ZlibError);

  00085	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR ZlibError
  0008c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05KKCIMGE@error?$AA@
  00093	48 8b 4c 24 28	 mov	 rcx, QWORD PTR m$[rsp]
  00098	e8 00 00 00 00	 call	 PyModule_AddObject
$LN3@PyInit_zli:

; 1267 :     }
; 1268 :     PyModule_AddIntConstant(m, "MAX_WBITS", MAX_WBITS);

  0009d	41 b8 0f 00 00
	00		 mov	 r8d, 15
  000a3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09MCABNBNK@MAX_WBITS?$AA@
  000aa	48 8b 4c 24 28	 mov	 rcx, QWORD PTR m$[rsp]
  000af	e8 00 00 00 00	 call	 PyModule_AddIntConstant

; 1269 :     PyModule_AddIntConstant(m, "DEFLATED", DEFLATED);

  000b4	41 b8 08 00 00
	00		 mov	 r8d, 8
  000ba	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08GHAMNDKB@DEFLATED?$AA@
  000c1	48 8b 4c 24 28	 mov	 rcx, QWORD PTR m$[rsp]
  000c6	e8 00 00 00 00	 call	 PyModule_AddIntConstant

; 1270 :     PyModule_AddIntConstant(m, "DEF_MEM_LEVEL", DEF_MEM_LEVEL);

  000cb	41 b8 08 00 00
	00		 mov	 r8d, 8
  000d1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0O@FGNNGBNA@DEF_MEM_LEVEL?$AA@
  000d8	48 8b 4c 24 28	 mov	 rcx, QWORD PTR m$[rsp]
  000dd	e8 00 00 00 00	 call	 PyModule_AddIntConstant

; 1271 :     PyModule_AddIntConstant(m, "Z_BEST_SPEED", Z_BEST_SPEED);

  000e2	41 b8 01 00 00
	00		 mov	 r8d, 1
  000e8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@MIKPIAPL@Z_BEST_SPEED?$AA@
  000ef	48 8b 4c 24 28	 mov	 rcx, QWORD PTR m$[rsp]
  000f4	e8 00 00 00 00	 call	 PyModule_AddIntConstant

; 1272 :     PyModule_AddIntConstant(m, "Z_BEST_COMPRESSION", Z_BEST_COMPRESSION);

  000f9	41 b8 09 00 00
	00		 mov	 r8d, 9
  000ff	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@CKPPBPCJ@Z_BEST_COMPRESSION?$AA@
  00106	48 8b 4c 24 28	 mov	 rcx, QWORD PTR m$[rsp]
  0010b	e8 00 00 00 00	 call	 PyModule_AddIntConstant

; 1273 :     PyModule_AddIntConstant(m, "Z_DEFAULT_COMPRESSION", Z_DEFAULT_COMPRESSION);

  00110	41 b8 ff ff ff
	ff		 mov	 r8d, -1
  00116	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@HFLKKCF@Z_DEFAULT_COMPRESSION?$AA@
  0011d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR m$[rsp]
  00122	e8 00 00 00 00	 call	 PyModule_AddIntConstant

; 1274 :     PyModule_AddIntConstant(m, "Z_FILTERED", Z_FILTERED);

  00127	41 b8 01 00 00
	00		 mov	 r8d, 1
  0012d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@NKMLDFOL@Z_FILTERED?$AA@
  00134	48 8b 4c 24 28	 mov	 rcx, QWORD PTR m$[rsp]
  00139	e8 00 00 00 00	 call	 PyModule_AddIntConstant

; 1275 :     PyModule_AddIntConstant(m, "Z_HUFFMAN_ONLY", Z_HUFFMAN_ONLY);

  0013e	41 b8 02 00 00
	00		 mov	 r8d, 2
  00144	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0P@MOLNDBMM@Z_HUFFMAN_ONLY?$AA@
  0014b	48 8b 4c 24 28	 mov	 rcx, QWORD PTR m$[rsp]
  00150	e8 00 00 00 00	 call	 PyModule_AddIntConstant

; 1276 :     PyModule_AddIntConstant(m, "Z_DEFAULT_STRATEGY", Z_DEFAULT_STRATEGY);

  00155	45 33 c0	 xor	 r8d, r8d
  00158	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@BOJLLCPN@Z_DEFAULT_STRATEGY?$AA@
  0015f	48 8b 4c 24 28	 mov	 rcx, QWORD PTR m$[rsp]
  00164	e8 00 00 00 00	 call	 PyModule_AddIntConstant

; 1277 : 
; 1278 :     PyModule_AddIntConstant(m, "Z_FINISH", Z_FINISH);

  00169	41 b8 04 00 00
	00		 mov	 r8d, 4
  0016f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08CKIFHOEP@Z_FINISH?$AA@
  00176	48 8b 4c 24 28	 mov	 rcx, QWORD PTR m$[rsp]
  0017b	e8 00 00 00 00	 call	 PyModule_AddIntConstant

; 1279 :     PyModule_AddIntConstant(m, "Z_NO_FLUSH", Z_NO_FLUSH);

  00180	45 33 c0	 xor	 r8d, r8d
  00183	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@JLINHBLB@Z_NO_FLUSH?$AA@
  0018a	48 8b 4c 24 28	 mov	 rcx, QWORD PTR m$[rsp]
  0018f	e8 00 00 00 00	 call	 PyModule_AddIntConstant

; 1280 :     PyModule_AddIntConstant(m, "Z_SYNC_FLUSH", Z_SYNC_FLUSH);

  00194	41 b8 02 00 00
	00		 mov	 r8d, 2
  0019a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@KDLIEJHI@Z_SYNC_FLUSH?$AA@
  001a1	48 8b 4c 24 28	 mov	 rcx, QWORD PTR m$[rsp]
  001a6	e8 00 00 00 00	 call	 PyModule_AddIntConstant

; 1281 :     PyModule_AddIntConstant(m, "Z_FULL_FLUSH", Z_FULL_FLUSH);

  001ab	41 b8 03 00 00
	00		 mov	 r8d, 3
  001b1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@JBPDPLFF@Z_FULL_FLUSH?$AA@
  001b8	48 8b 4c 24 28	 mov	 rcx, QWORD PTR m$[rsp]
  001bd	e8 00 00 00 00	 call	 PyModule_AddIntConstant

; 1282 : 
; 1283 :     ver = PyUnicode_FromString(ZLIB_VERSION);

  001c2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05DFCKICEH@1?42?45?$AA@
  001c9	e8 00 00 00 00	 call	 PyUnicode_FromString
  001ce	48 89 44 24 20	 mov	 QWORD PTR ver$[rsp], rax

; 1284 :     if (ver != NULL)

  001d3	48 83 7c 24 20
	00		 cmp	 QWORD PTR ver$[rsp], 0
  001d9	74 16		 je	 SHORT $LN2@PyInit_zli

; 1285 :         PyModule_AddObject(m, "ZLIB_VERSION", ver);

  001db	4c 8b 44 24 20	 mov	 r8, QWORD PTR ver$[rsp]
  001e0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@CEDJGPLC@ZLIB_VERSION?$AA@
  001e7	48 8b 4c 24 28	 mov	 rcx, QWORD PTR m$[rsp]
  001ec	e8 00 00 00 00	 call	 PyModule_AddObject
$LN2@PyInit_zli:

; 1286 : 
; 1287 :     ver = PyUnicode_FromString(zlibVersion());

  001f1	e8 00 00 00 00	 call	 zlibVersion
  001f6	48 8b c8	 mov	 rcx, rax
  001f9	e8 00 00 00 00	 call	 PyUnicode_FromString
  001fe	48 89 44 24 20	 mov	 QWORD PTR ver$[rsp], rax

; 1288 :     if (ver != NULL)

  00203	48 83 7c 24 20
	00		 cmp	 QWORD PTR ver$[rsp], 0
  00209	74 16		 je	 SHORT $LN1@PyInit_zli

; 1289 :         PyModule_AddObject(m, "ZLIB_RUNTIME_VERSION", ver);

  0020b	4c 8b 44 24 20	 mov	 r8, QWORD PTR ver$[rsp]
  00210	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BF@BKLGIFIO@ZLIB_RUNTIME_VERSION?$AA@
  00217	48 8b 4c 24 28	 mov	 rcx, QWORD PTR m$[rsp]
  0021c	e8 00 00 00 00	 call	 PyModule_AddObject
$LN1@PyInit_zli:

; 1290 : 
; 1291 :     PyModule_AddStringConstant(m, "__version__", "1.0");

  00221	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03HLLJOCDO@1?40?$AA@
  00228	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@EKHGKOEI@__version__?$AA@
  0022f	48 8b 4c 24 28	 mov	 rcx, QWORD PTR m$[rsp]
  00234	e8 00 00 00 00	 call	 PyModule_AddStringConstant

; 1292 : 
; 1293 :     return m;

  00239	48 8b 44 24 28	 mov	 rax, QWORD PTR m$[rsp]
$LN7@PyInit_zli:

; 1294 : }

  0023e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00242	c3		 ret	 0
PyInit_zlib ENDP
_TEXT	ENDS
END
