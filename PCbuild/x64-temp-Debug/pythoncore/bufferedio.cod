; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0BD@CHOOIEPI@_io?4BufferedRandom?$AA@	; `string'
PUBLIC	??_C@_0BD@BFNFOELB@_io?4BufferedRWPair?$AA@	; `string'
PUBLIC	??_C@_0BD@NCGANLKN@_io?4BufferedWriter?$AA@	; `string'
PUBLIC	??_C@_0BD@POOCNKHH@_io?4BufferedReader?$AA@	; `string'
PUBLIC	??_C@_06IKJOPBFO@closed?$AA@			; `string'
PUBLIC	??_C@_03DGOGAGNC@raw?$AA@			; `string'
PUBLIC	??_C@_0L@HOGGIPGN@__sizeof__?$AA@		; `string'
PUBLIC	??_C@_08MABILMFG@truncate?$AA@			; `string'
PUBLIC	??_C@_04LBPCFPDD@tell?$AA@			; `string'
PUBLIC	??_C@_04EDECCOGL@seek?$AA@			; `string'
PUBLIC	??_C@_08KBCDPPMN@readline?$AA@			; `string'
PUBLIC	??_C@_0N@NAMJJHIO@__getstate__?$AA@		; `string'
PUBLIC	??_C@_06FFBIALPD@fileno?$AA@			; `string'
PUBLIC	??_C@_08JPFEOKJG@seekable?$AA@			; `string'
PUBLIC	??_C@_0BE@OAGPJFOG@_io?4_BufferedIOBase?$AA@	; `string'
PUBLIC	??_C@_06CNCOJECB@detach?$AA@			; `string'
PUBLIC	??_C@_05NGFEDHGN@write?$AA@			; `string'
PUBLIC	??_C@_08IBOGFJJC@writable?$AA@			; `string'
PUBLIC	??_C@_08BPEKIGCI@readinto?$AA@			; `string'
PUBLIC	??_C@_08INDGGIBD@readable?$AA@			; `string'
PUBLIC	??_C@_05FDBMPOID@read1?$AA@			; `string'
PUBLIC	??_C@_04POLDLDMI@read?$AA@			; `string'
PUBLIC	??_C@_04EOCFELL@peek?$AA@			; `string'
PUBLIC	??_C@_04MEMAJGDJ@name?$AA@			; `string'
PUBLIC	??_C@_04GMGOKAFF@mode?$AA@			; `string'
PUBLIC	??_C@_06BMABDNNN@isatty?$AA@			; `string'
PUBLIC	??_C@_05GLCAEPFP@flush?$AA@			; `string'
PUBLIC	??_C@_0O@OLJIIFNG@_dealloc_warn?$AA@		; `string'
PUBLIC	??_C@_05LBOHBHFK@close?$AA@			; `string'
PUBLIC	PyBufferedIOBase_Type
PUBLIC	PyBufferedReader_Type
PUBLIC	PyBufferedWriter_Type
PUBLIC	PyBufferedRWPair_Type
PUBLIC	PyBufferedRandom_Type
EXTRN	PyType_GenericNew:PROC
EXTRN	PyIOBase_Type:BYTE
_BSS	SEGMENT
?eintr_int@?1??_PyIO_trap_eintr@@9@9 DQ 01H DUP (?)	; `_PyIO_trap_eintr'::`2'::eintr_int
_BSS	ENDS
;	COMDAT ??_C@_0BD@CHOOIEPI@_io?4BufferedRandom?$AA@
CONST	SEGMENT
??_C@_0BD@CHOOIEPI@_io?4BufferedRandom?$AA@ DB '_io.BufferedRandom', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@BFNFOELB@_io?4BufferedRWPair?$AA@
CONST	SEGMENT
??_C@_0BD@BFNFOELB@_io?4BufferedRWPair?$AA@ DB '_io.BufferedRWPair', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@NCGANLKN@_io?4BufferedWriter?$AA@
CONST	SEGMENT
??_C@_0BD@NCGANLKN@_io?4BufferedWriter?$AA@ DB '_io.BufferedWriter', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@POOCNKHH@_io?4BufferedReader?$AA@
CONST	SEGMENT
??_C@_0BD@POOCNKHH@_io?4BufferedReader?$AA@ DB '_io.BufferedReader', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06IKJOPBFO@closed?$AA@
CONST	SEGMENT
??_C@_06IKJOPBFO@closed?$AA@ DB 'closed', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03DGOGAGNC@raw?$AA@
CONST	SEGMENT
??_C@_03DGOGAGNC@raw?$AA@ DB 'raw', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HOGGIPGN@__sizeof__?$AA@
CONST	SEGMENT
??_C@_0L@HOGGIPGN@__sizeof__?$AA@ DB '__sizeof__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08MABILMFG@truncate?$AA@
CONST	SEGMENT
??_C@_08MABILMFG@truncate?$AA@ DB 'truncate', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04LBPCFPDD@tell?$AA@
CONST	SEGMENT
??_C@_04LBPCFPDD@tell?$AA@ DB 'tell', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04EDECCOGL@seek?$AA@
CONST	SEGMENT
??_C@_04EDECCOGL@seek?$AA@ DB 'seek', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08KBCDPPMN@readline?$AA@
CONST	SEGMENT
??_C@_08KBCDPPMN@readline?$AA@ DB 'readline', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NAMJJHIO@__getstate__?$AA@
CONST	SEGMENT
??_C@_0N@NAMJJHIO@__getstate__?$AA@ DB '__getstate__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06FFBIALPD@fileno?$AA@
CONST	SEGMENT
??_C@_06FFBIALPD@fileno?$AA@ DB 'fileno', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08JPFEOKJG@seekable?$AA@
CONST	SEGMENT
??_C@_08JPFEOKJG@seekable?$AA@ DB 'seekable', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@OAGPJFOG@_io?4_BufferedIOBase?$AA@
CONST	SEGMENT
??_C@_0BE@OAGPJFOG@_io?4_BufferedIOBase?$AA@ DB '_io._BufferedIOBase', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06CNCOJECB@detach?$AA@
CONST	SEGMENT
??_C@_06CNCOJECB@detach?$AA@ DB 'detach', 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
bufferediobase_doc DB 'Base class for buffered IO objects.', 0aH, 0aH, 'T'
	DB	'he main difference with RawIOBase is that the read() method', 0aH
	DB	'supports omitting the size argument, and does not have a defa'
	DB	'ult', 0aH, 'implementation that defers to readinto().', 0aH, 0aH
	DB	'In addition, read(), readinto() and write() may raise', 0aH, 'B'
	DB	'lockingIOError if the underlying raw stream is in non-blockin'
	DB	'g', 0aH, 'mode and not ready; unlike their raw counterparts, '
	DB	'they will never', 0aH, 'return None.', 0aH, 0aH, 'A typical i'
	DB	'mplementation should not inherit from a RawIOBase', 0aH, 'imp'
	DB	'lementation, but wrap one.', 0aH, 00H
	ORG $+15
bufferediobase_detach_doc DB 'Disconnect this buffer from its underlying '
	DB	'raw stream and return it.', 0aH, 0aH, 'After the raw stream h'
	DB	'as been detached, the buffer is in an unusable', 0aH, 'state.'
	DB	0aH, 00H
	ORG $+13
bufferediobase_read_doc DB 'Read and return up to n bytes.', 0aH, 0aH, 'I'
	DB	'f the argument is omitted, None, or negative, reads and', 0aH
	DB	'returns all data until EOF.', 0aH, 0aH, 'If the argument is p'
	DB	'ositive, and the underlying raw stream is', 0aH, 'not ''inter'
	DB	'active'', multiple raw reads may be issued to satisfy', 0aH, 't'
	DB	'he byte count (unless EOF is reached first).  But for', 0aH, 'i'
	DB	'nteractive raw streams (as well as sockets and pipes), at mos'
	DB	't', 0aH, 'one raw read will be issued, and a short result doe'
	DB	's not imply', 0aH, 'that EOF is imminent.', 0aH, 0aH, 'Return'
	DB	's an empty bytes object on EOF.', 0aH, 0aH, 'Returns None if '
	DB	'the underlying raw stream was open in non-blocking', 0aH, 'mo'
	DB	'de and no data is available at the moment.', 0aH, 00H
	ORG $+8
bufferediobase_read1_doc DB 'Read and return up to n bytes, with at most '
	DB	'one read() call', 0aH, 'to the underlying raw stream. A short'
	DB	' result does not imply', 0aH, 'that EOF is imminent.', 0aH, 0aH
	DB	'Returns an empty bytes object on EOF.', 0aH, 00H
	ORG $+10
bufferediobase_write_doc DB 'Write the given buffer to the IO stream.', 0aH
	DB	0aH, 'Returns the number of bytes written, which is never less'
	DB	' than', 0aH, 'len(b).', 0aH, 0aH, 'Raises BlockingIOError if '
	DB	'the buffer is full and the', 0aH, 'underlying raw stream cann'
	DB	'ot accept more data at the moment.', 0aH, 00H
	ORG $+12
bufferediobase_methods DQ FLAT:??_C@_06CNCOJECB@detach?$AA@
	DQ	FLAT:bufferediobase_detach
	DD	04H
	ORG $+4
	DQ	FLAT:bufferediobase_detach_doc
	DQ	FLAT:??_C@_04POLDLDMI@read?$AA@
	DQ	FLAT:bufferediobase_read
	DD	01H
	ORG $+4
	DQ	FLAT:bufferediobase_read_doc
	DQ	FLAT:??_C@_05FDBMPOID@read1?$AA@
	DQ	FLAT:bufferediobase_read1
	DD	01H
	ORG $+4
	DQ	FLAT:bufferediobase_read1_doc
	DQ	FLAT:??_C@_08BPEKIGCI@readinto?$AA@
	DQ	FLAT:bufferediobase_readinto
	DD	01H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:??_C@_05NGFEDHGN@write?$AA@
	DQ	FLAT:bufferediobase_write
	DD	01H
	ORG $+4
	DQ	FLAT:bufferediobase_write_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
PyBufferedIOBase_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0BE@OAGPJFOG@_io?4_BufferedIOBase?$AA@
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	040400H
	ORG $+4
	DQ	FLAT:bufferediobase_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:bufferediobase_methods
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyIOBase_Type
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+72
bufferedreader_doc DB 'Create a new buffered reader using the given reada'
	DB	'ble raw IO object.', 00H
	ORG $+11
bufferedreader_methods DQ FLAT:??_C@_06CNCOJECB@detach?$AA@
	DQ	FLAT:buffered_detach
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_05GLCAEPFP@flush?$AA@
	DQ	FLAT:buffered_simple_flush
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_05LBOHBHFK@close?$AA@
	DQ	FLAT:buffered_close
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_08JPFEOKJG@seekable?$AA@
	DQ	FLAT:buffered_seekable
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_08INDGGIBD@readable?$AA@
	DQ	FLAT:buffered_readable
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_08IBOGFJJC@writable?$AA@
	DQ	FLAT:buffered_writable
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_06FFBIALPD@fileno?$AA@
	DQ	FLAT:buffered_fileno
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_06BMABDNNN@isatty?$AA@
	DQ	FLAT:buffered_isatty
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0O@OLJIIFNG@_dealloc_warn?$AA@
	DQ	FLAT:buffered_dealloc_warn
	DD	08H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0N@NAMJJHIO@__getstate__?$AA@
	DQ	FLAT:buffered_getstate
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_04POLDLDMI@read?$AA@
	DQ	FLAT:buffered_read
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_04EOCFELL@peek?$AA@
	DQ	FLAT:buffered_peek
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_05FDBMPOID@read1?$AA@
	DQ	FLAT:buffered_read1
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_08BPEKIGCI@readinto?$AA@
	DQ	FLAT:buffered_readinto
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_08KBCDPPMN@readline?$AA@
	DQ	FLAT:buffered_readline
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_04EDECCOGL@seek?$AA@
	DQ	FLAT:buffered_seek
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_04LBPCFPDD@tell?$AA@
	DQ	FLAT:buffered_tell
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_08MABILMFG@truncate?$AA@
	DQ	FLAT:buffered_truncate
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0L@HOGGIPGN@__sizeof__?$AA@
	DQ	FLAT:buffered_sizeof
	DD	04H
	ORG $+4
	ORG $+8
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
bufferedreader_members DQ FLAT:??_C@_03DGOGAGNC@raw?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000060H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	0000000000000000H
	ORG $+32
bufferedreader_getset DQ FLAT:??_C@_06IKJOPBFO@closed?$AA@
	DQ	FLAT:buffered_closed_get
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_04MEMAJGDJ@name?$AA@
	DQ	FLAT:buffered_name_get
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_04GMGOKAFF@mode?$AA@
	DQ	FLAT:buffered_mode_get
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000000H
	ORG $+32
PyBufferedReader_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0BD@POOCNKHH@_io?4BufferedReader?$AA@
	DQ	00000000000000f0H
	DQ	0000000000000000H
	DQ	FLAT:buffered_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:buffered_repr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044400H
	ORG $+4
	DQ	FLAT:bufferedreader_doc
	DQ	FLAT:buffered_traverse
	DQ	FLAT:buffered_clear
	DQ	0000000000000000H
	DQ	00000000000000e0H
	DQ	0000000000000000H
	DQ	FLAT:buffered_iternext
	DQ	FLAT:bufferedreader_methods
	DQ	FLAT:bufferedreader_members
	DQ	FLAT:bufferedreader_getset
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	00000000000000d8H
	DQ	FLAT:bufferedreader_init
	DQ	0000000000000000H
	DQ	FLAT:PyType_GenericNew
	ORG $+72
bufferedwriter_doc DB 'A buffer for a writeable sequential RawIO object.', 0aH
	DB	0aH, 'The constructor creates a BufferedWriter for the given w'
	DB	'riteable raw', 0aH, 'stream. If the buffer_size is not given,'
	DB	' it defaults to', 0aH, 'DEFAULT_BUFFER_SIZE.', 0aH, 00H
	ORG $+10
bufferedwriter_methods DQ FLAT:??_C@_05LBOHBHFK@close?$AA@
	DQ	FLAT:buffered_close
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_06CNCOJECB@detach?$AA@
	DQ	FLAT:buffered_detach
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_08JPFEOKJG@seekable?$AA@
	DQ	FLAT:buffered_seekable
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_08INDGGIBD@readable?$AA@
	DQ	FLAT:buffered_readable
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_08IBOGFJJC@writable?$AA@
	DQ	FLAT:buffered_writable
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_06FFBIALPD@fileno?$AA@
	DQ	FLAT:buffered_fileno
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_06BMABDNNN@isatty?$AA@
	DQ	FLAT:buffered_isatty
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0O@OLJIIFNG@_dealloc_warn?$AA@
	DQ	FLAT:buffered_dealloc_warn
	DD	08H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0N@NAMJJHIO@__getstate__?$AA@
	DQ	FLAT:buffered_getstate
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_05NGFEDHGN@write?$AA@
	DQ	FLAT:bufferedwriter_write
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_08MABILMFG@truncate?$AA@
	DQ	FLAT:buffered_truncate
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_05GLCAEPFP@flush?$AA@
	DQ	FLAT:buffered_flush
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_04EDECCOGL@seek?$AA@
	DQ	FLAT:buffered_seek
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_04LBPCFPDD@tell?$AA@
	DQ	FLAT:buffered_tell
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0L@HOGGIPGN@__sizeof__?$AA@
	DQ	FLAT:buffered_sizeof
	DD	04H
	ORG $+4
	ORG $+8
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
bufferedwriter_members DQ FLAT:??_C@_03DGOGAGNC@raw?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000060H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	0000000000000000H
	ORG $+32
bufferedwriter_getset DQ FLAT:??_C@_06IKJOPBFO@closed?$AA@
	DQ	FLAT:buffered_closed_get
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_04MEMAJGDJ@name?$AA@
	DQ	FLAT:buffered_name_get
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_04GMGOKAFF@mode?$AA@
	DQ	FLAT:buffered_mode_get
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000000H
	ORG $+32
PyBufferedWriter_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0BD@NCGANLKN@_io?4BufferedWriter?$AA@
	DQ	00000000000000f0H
	DQ	0000000000000000H
	DQ	FLAT:buffered_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:buffered_repr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044400H
	ORG $+4
	DQ	FLAT:bufferedwriter_doc
	DQ	FLAT:buffered_traverse
	DQ	FLAT:buffered_clear
	DQ	0000000000000000H
	DQ	00000000000000e0H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:bufferedwriter_methods
	DQ	FLAT:bufferedwriter_members
	DQ	FLAT:bufferedwriter_getset
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	00000000000000d8H
	DQ	FLAT:bufferedwriter_init
	DQ	0000000000000000H
	DQ	FLAT:PyType_GenericNew
	ORG $+72
bufferedrwpair_doc DB 'A buffered reader and writer object together.', 0aH
	DB	0aH, 'A buffered reader object and buffered writer object put '
	DB	'together to', 0aH, 'form a sequential IO object that can read'
	DB	' and write. This is typically', 0aH, 'used with a socket or t'
	DB	'wo-way pipe.', 0aH, 0aH, 'reader and writer are RawIOBase obj'
	DB	'ects that are readable and', 0aH, 'writeable respectively. If'
	DB	' the buffer_size is omitted it defaults to', 0aH, 'DEFAULT_BU'
	DB	'FFER_SIZE.', 0aH, 00H
	ORG $+8
bufferedrwpair_methods DQ FLAT:??_C@_04POLDLDMI@read?$AA@
	DQ	FLAT:bufferedrwpair_read
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_04EOCFELL@peek?$AA@
	DQ	FLAT:bufferedrwpair_peek
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_05FDBMPOID@read1?$AA@
	DQ	FLAT:bufferedrwpair_read1
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_08BPEKIGCI@readinto?$AA@
	DQ	FLAT:bufferedrwpair_readinto
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_05NGFEDHGN@write?$AA@
	DQ	FLAT:bufferedrwpair_write
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_05GLCAEPFP@flush?$AA@
	DQ	FLAT:bufferedrwpair_flush
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_08INDGGIBD@readable?$AA@
	DQ	FLAT:bufferedrwpair_readable
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_08IBOGFJJC@writable?$AA@
	DQ	FLAT:bufferedrwpair_writable
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_05LBOHBHFK@close?$AA@
	DQ	FLAT:bufferedrwpair_close
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_06BMABDNNN@isatty?$AA@
	DQ	FLAT:bufferedrwpair_isatty
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0N@NAMJJHIO@__getstate__?$AA@
	DQ	FLAT:buffered_getstate
	DD	04H
	ORG $+4
	ORG $+8
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
bufferedrwpair_getset DQ FLAT:??_C@_06IKJOPBFO@closed?$AA@
	DQ	FLAT:bufferedrwpair_closed_get
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000000H
	ORG $+32
PyBufferedRWPair_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0BD@BFNFOELB@_io?4BufferedRWPair?$AA@
	DQ	0000000000000080H
	DQ	0000000000000000H
	DQ	FLAT:bufferedrwpair_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044400H
	ORG $+4
	DQ	FLAT:bufferedrwpair_doc
	DQ	FLAT:bufferedrwpair_traverse
	DQ	FLAT:bufferedrwpair_clear
	DQ	0000000000000000H
	DQ	0000000000000078H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:bufferedrwpair_methods
	DQ	0000000000000000H
	DQ	FLAT:bufferedrwpair_getset
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000070H
	DQ	FLAT:bufferedrwpair_init
	DQ	0000000000000000H
	DQ	FLAT:PyType_GenericNew
	ORG $+72
bufferedrandom_doc DB 'A buffered interface to random access streams.', 0aH
	DB	0aH, 'The constructor creates a reader and writer for a seekab'
	DB	'le stream,', 0aH, 'raw, given in the first argument. If the b'
	DB	'uffer_size is omitted it', 0aH, 'defaults to DEFAULT_BUFFER_S'
	DB	'IZE.', 0aH, 00H
	ORG $+8
bufferedrandom_methods DQ FLAT:??_C@_05LBOHBHFK@close?$AA@
	DQ	FLAT:buffered_close
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_06CNCOJECB@detach?$AA@
	DQ	FLAT:buffered_detach
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_08JPFEOKJG@seekable?$AA@
	DQ	FLAT:buffered_seekable
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_08INDGGIBD@readable?$AA@
	DQ	FLAT:buffered_readable
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_08IBOGFJJC@writable?$AA@
	DQ	FLAT:buffered_writable
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_06FFBIALPD@fileno?$AA@
	DQ	FLAT:buffered_fileno
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_06BMABDNNN@isatty?$AA@
	DQ	FLAT:buffered_isatty
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0O@OLJIIFNG@_dealloc_warn?$AA@
	DQ	FLAT:buffered_dealloc_warn
	DD	08H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0N@NAMJJHIO@__getstate__?$AA@
	DQ	FLAT:buffered_getstate
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_05GLCAEPFP@flush?$AA@
	DQ	FLAT:buffered_flush
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_04EDECCOGL@seek?$AA@
	DQ	FLAT:buffered_seek
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_04LBPCFPDD@tell?$AA@
	DQ	FLAT:buffered_tell
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_08MABILMFG@truncate?$AA@
	DQ	FLAT:buffered_truncate
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_04POLDLDMI@read?$AA@
	DQ	FLAT:buffered_read
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_05FDBMPOID@read1?$AA@
	DQ	FLAT:buffered_read1
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_08BPEKIGCI@readinto?$AA@
	DQ	FLAT:buffered_readinto
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_08KBCDPPMN@readline?$AA@
	DQ	FLAT:buffered_readline
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_04EOCFELL@peek?$AA@
	DQ	FLAT:buffered_peek
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_05NGFEDHGN@write?$AA@
	DQ	FLAT:bufferedwriter_write
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0L@HOGGIPGN@__sizeof__?$AA@
	DQ	FLAT:buffered_sizeof
	DD	04H
	ORG $+4
	ORG $+8
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
bufferedrandom_members DQ FLAT:??_C@_03DGOGAGNC@raw?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000060H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	0000000000000000H
	ORG $+32
bufferedrandom_getset DQ FLAT:??_C@_06IKJOPBFO@closed?$AA@
	DQ	FLAT:buffered_closed_get
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_04MEMAJGDJ@name?$AA@
	DQ	FLAT:buffered_name_get
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_04GMGOKAFF@mode?$AA@
	DQ	FLAT:buffered_mode_get
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000000H
	ORG $+32
PyBufferedRandom_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0BD@CHOOIEPI@_io?4BufferedRandom?$AA@
	DQ	00000000000000f0H
	DQ	0000000000000000H
	DQ	FLAT:buffered_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:buffered_repr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044400H
	ORG $+4
	DQ	FLAT:bufferedrandom_doc
	DQ	FLAT:buffered_traverse
	DQ	FLAT:buffered_clear
	DQ	0000000000000000H
	DQ	00000000000000e0H
	DQ	0000000000000000H
	DQ	FLAT:buffered_iternext
	DQ	FLAT:bufferedrandom_methods
	DQ	FLAT:bufferedrandom_members
	DQ	FLAT:bufferedrandom_getset
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	00000000000000d8H
	DQ	FLAT:bufferedrandom_init
	DQ	0000000000000000H
	DQ	FLAT:PyType_GenericNew
	ORG $+72
_DATA	ENDS
;	COMDAT ??_C@_05NGFEDHGN@write?$AA@
CONST	SEGMENT
??_C@_05NGFEDHGN@write?$AA@ DB 'write', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08IBOGFJJC@writable?$AA@
CONST	SEGMENT
??_C@_08IBOGFJJC@writable?$AA@ DB 'writable', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08BPEKIGCI@readinto?$AA@
CONST	SEGMENT
??_C@_08BPEKIGCI@readinto?$AA@ DB 'readinto', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08INDGGIBD@readable?$AA@
CONST	SEGMENT
??_C@_08INDGGIBD@readable?$AA@ DB 'readable', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05FDBMPOID@read1?$AA@
CONST	SEGMENT
??_C@_05FDBMPOID@read1?$AA@ DB 'read1', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04POLDLDMI@read?$AA@
CONST	SEGMENT
??_C@_04POLDLDMI@read?$AA@ DB 'read', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04EOCFELL@peek?$AA@
CONST	SEGMENT
??_C@_04EOCFELL@peek?$AA@ DB 'peek', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04MEMAJGDJ@name?$AA@
CONST	SEGMENT
??_C@_04MEMAJGDJ@name?$AA@ DB 'name', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GMGOKAFF@mode?$AA@
CONST	SEGMENT
??_C@_04GMGOKAFF@mode?$AA@ DB 'mode', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BMABDNNN@isatty?$AA@
CONST	SEGMENT
??_C@_06BMABDNNN@isatty?$AA@ DB 'isatty', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05GLCAEPFP@flush?$AA@
CONST	SEGMENT
??_C@_05GLCAEPFP@flush?$AA@ DB 'flush', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@OLJIIFNG@_dealloc_warn?$AA@
CONST	SEGMENT
??_C@_0O@OLJIIFNG@_dealloc_warn?$AA@ DB '_dealloc_warn', 00H ; `string'
CONST	ENDS
_TLS	SEGMENT
?PyId_read@?1??bufferediobase_readinto@@9@9 DQ 0000000000000000H ; `bufferediobase_readinto'::`2'::PyId_read
	DQ	FLAT:??_C@_04POLDLDMI@read?$AA@
	DQ	0000000000000000H
PyId_write DQ	0000000000000000H
	DQ	FLAT:??_C@_05NGFEDHGN@write?$AA@
	DQ	0000000000000000H
PyId_writable DQ 0000000000000000H
	DQ	FLAT:??_C@_08IBOGFJJC@writable?$AA@
	DQ	0000000000000000H
PyId_readinto DQ 0000000000000000H
	DQ	FLAT:??_C@_08BPEKIGCI@readinto?$AA@
	DQ	0000000000000000H
PyId_readable DQ 0000000000000000H
	DQ	FLAT:??_C@_08INDGGIBD@readable?$AA@
	DQ	0000000000000000H
PyId_read1 DQ	0000000000000000H
	DQ	FLAT:??_C@_05FDBMPOID@read1?$AA@
	DQ	0000000000000000H
PyId_read DQ	0000000000000000H
	DQ	FLAT:??_C@_04POLDLDMI@read?$AA@
	DQ	0000000000000000H
PyId_peek DQ	0000000000000000H
	DQ	FLAT:??_C@_04EOCFELL@peek?$AA@
	DQ	0000000000000000H
PyId_name DQ	0000000000000000H
	DQ	FLAT:??_C@_04MEMAJGDJ@name?$AA@
	DQ	0000000000000000H
PyId_mode DQ	0000000000000000H
	DQ	FLAT:??_C@_04GMGOKAFF@mode?$AA@
	DQ	0000000000000000H
PyId_isatty DQ	0000000000000000H
	DQ	FLAT:??_C@_06BMABDNNN@isatty?$AA@
	DQ	0000000000000000H
PyId_flush DQ	0000000000000000H
	DQ	FLAT:??_C@_05GLCAEPFP@flush?$AA@
	DQ	0000000000000000H
PyId__dealloc_warn DQ 0000000000000000H
	DQ	FLAT:??_C@_0O@OLJIIFNG@_dealloc_warn?$AA@
	DQ	0000000000000000H
PyId_close DQ	0000000000000000H
	DQ	FLAT:??_C@_05LBOHBHFK@close?$AA@
	DQ	0000000000000000H
_TLS	ENDS
;	COMDAT ??_C@_05LBOHBHFK@close?$AA@
CONST	SEGMENT
??_C@_05LBOHBHFK@close?$AA@ DB 'close', 00H		; `string'
CONST	ENDS
PUBLIC	??_C@_1CI@GGBJKIGL@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAd?$AAa?$AAt?$AAa?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DI@KBAIHMCO@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AAe?$AAd?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@ ; `string'
PUBLIC	??_C@_0EB@GMKHCBKL@read?$CI?$CJ?5returned?5too?5much?5data?3?5?$CF@ ; `string'
PUBLIC	??_C@_0BL@LFIKHDFM@read?$CI?$CJ?5should?5return?5bytes?$AA@ ; `string'
PUBLIC	_Py_DecRef
PUBLIC	??_C@_01EFFIKLCJ@n?$AA@				; `string'
PUBLIC	??_C@_0M@MJKGPJDA@w?$CK?3readinto?$AA@		; `string'
EXTRN	PyLong_FromSsize_t:PROC
EXTRN	PyBuffer_Release:PROC
EXTRN	memcpy:PROC
EXTRN	__imp__wassert:PROC
EXTRN	PyErr_Format:PROC
EXTRN	PyExc_ValueError:QWORD
EXTRN	PyErr_SetString:PROC
EXTRN	PyExc_TypeError:QWORD
EXTRN	_PyObject_CallMethodId_SizeT:PROC
EXTRN	_PyArg_ParseTuple_SizeT:PROC
EXTRN	_tls_index:DWORD
;	COMDAT pdata
; File c:\src\pyparallel\modules\_io\bufferedio.c
pdata	SEGMENT
$pdata$bufferediobase_readinto DD imagerel bufferediobase_readinto
	DD	imagerel bufferediobase_readinto+408
	DD	imagerel $unwind$bufferediobase_readinto
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$bufferediobase_readinto DD 021101H
	DD	0130111H
xdata	ENDS
;	COMDAT ??_C@_1CI@GGBJKIGL@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAd?$AAa?$AAt?$AAa?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CI@GGBJKIGL@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAd?$AAa?$AAt?$AAa?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 's', 00H
	DB	'_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, '('
	DB	00H, 'd', 00H, 'a', 00H, 't', 00H, 'a', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DI@KBAIHMCO@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AAe?$AAd?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
CONST	SEGMENT
??_C@_1DI@KBAIHMCO@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AAe?$AAd?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@ DB '.'
	DB	00H, '.', 00H, '\', 00H, 'M', 00H, 'o', 00H, 'd', 00H, 'u', 00H
	DB	'l', 00H, 'e', 00H, 's', 00H, '\', 00H, '_', 00H, 'i', 00H, 'o'
	DB	00H, '\', 00H, 'b', 00H, 'u', 00H, 'f', 00H, 'f', 00H, 'e', 00H
	DB	'r', 00H, 'e', 00H, 'd', 00H, 'i', 00H, 'o', 00H, '.', 00H, 'c'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@GMKHCBKL@read?$CI?$CJ?5returned?5too?5much?5data?3?5?$CF@
CONST	SEGMENT
??_C@_0EB@GMKHCBKL@read?$CI?$CJ?5returned?5too?5much?5data?3?5?$CF@ DB 'r'
	DB	'ead() returned too much data: %zd bytes requested, %zd return'
	DB	'ed', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@LFIKHDFM@read?$CI?$CJ?5should?5return?5bytes?$AA@
CONST	SEGMENT
??_C@_0BL@LFIKHDFM@read?$CI?$CJ?5should?5return?5bytes?$AA@ DB 'read() sh'
	DB	'ould return bytes', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01EFFIKLCJ@n?$AA@
CONST	SEGMENT
??_C@_01EFFIKLCJ@n?$AA@ DB 'n', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MJKGPJDA@w?$CK?3readinto?$AA@
CONST	SEGMENT
??_C@_0M@MJKGPJDA@w?$CK?3readinto?$AA@ DB 'w*:readinto', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT bufferediobase_readinto
_TEXT	SEGMENT
len$ = 32
buf$ = 48
data$ = 128
self$ = 160
args$ = 168
bufferediobase_readinto PROC				; COMDAT

; 51   : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 52   :     Py_buffer buf;
; 53   :     Py_ssize_t len;
; 54   :     PyObject *data;
; 55   :     _Py_IDENTIFIER(read);
; 56   : 
; 57   :     if (!PyArg_ParseTuple(args, "w*:readinto", &buf)) {

  00011	4c 8d 44 24 30	 lea	 r8, QWORD PTR buf$[rsp]
  00016	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@MJKGPJDA@w?$CK?3readinto?$AA@
  0001d	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  00025	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  0002a	85 c0		 test	 eax, eax
  0002c	75 07		 jne	 SHORT $LN4@bufferedio

; 58   :         return NULL;

  0002e	33 c0		 xor	 eax, eax
  00030	e9 5b 01 00 00	 jmp	 $LN5@bufferedio
$LN4@bufferedio:

; 59   :     }
; 60   : 
; 61   :     data = _PyObject_CallMethodId(self, &PyId_read, "n", buf.len);

  00035	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId_read@?1??bufferediobase_readinto@@9@9
  0003a	8b c0		 mov	 eax, eax
  0003c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00042	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0004b	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0004f	4c 8b 4c 24 40	 mov	 r9, QWORD PTR buf$[rsp+16]
  00054	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01EFFIKLCJ@n?$AA@
  0005b	48 8b d0	 mov	 rdx, rax
  0005e	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00066	e8 00 00 00 00	 call	 _PyObject_CallMethodId_SizeT
  0006b	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR data$[rsp], rax

; 62   :     if (data == NULL)

  00073	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR data$[rsp], 0
  0007c	75 05		 jne	 SHORT $LN3@bufferedio

; 63   :         goto error;

  0007e	e9 01 01 00 00	 jmp	 $error$20549
$LN3@bufferedio:

; 64   : 
; 65   :     if (!PyBytes_Check(data)) {

  00083	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR data$[rsp]
  0008b	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0008f	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00095	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  0009a	85 c0		 test	 eax, eax
  0009c	75 25		 jne	 SHORT $LN2@bufferedio

; 66   :         Py_DECREF(data);

  0009e	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR data$[rsp]
  000a6	e8 00 00 00 00	 call	 _Py_DecRef

; 67   :         PyErr_SetString(PyExc_TypeError, "read() should return bytes");

  000ab	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BL@LFIKHDFM@read?$CI?$CJ?5should?5return?5bytes?$AA@
  000b2	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000b9	e8 00 00 00 00	 call	 PyErr_SetString

; 68   :         goto error;

  000be	e9 c1 00 00 00	 jmp	 $error$20549
$LN2@bufferedio:

; 69   :     }
; 70   : 
; 71   :     len = Py_SIZE(data);

  000c3	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR data$[rsp]
  000cb	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000cf	48 89 44 24 20	 mov	 QWORD PTR len$[rsp], rax

; 72   :     if (len > buf.len) {

  000d4	48 8b 44 24 40	 mov	 rax, QWORD PTR buf$[rsp+16]
  000d9	48 39 44 24 20	 cmp	 QWORD PTR len$[rsp], rax
  000de	7e 2c		 jle	 SHORT $LN1@bufferedio

; 73   :         PyErr_Format(PyExc_ValueError,
; 74   :                      "read() returned too much data: "
; 75   :                      "%zd bytes requested, %zd returned",
; 76   :                      buf.len, len);

  000e0	4c 8b 4c 24 20	 mov	 r9, QWORD PTR len$[rsp]
  000e5	4c 8b 44 24 40	 mov	 r8, QWORD PTR buf$[rsp+16]
  000ea	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0EB@GMKHCBKL@read?$CI?$CJ?5returned?5too?5much?5data?3?5?$CF@
  000f1	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  000f8	e8 00 00 00 00	 call	 PyErr_Format

; 77   :         Py_DECREF(data);

  000fd	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR data$[rsp]
  00105	e8 00 00 00 00	 call	 _Py_DecRef

; 78   :         goto error;

  0010a	eb 78		 jmp	 SHORT $error$20549
$LN1@bufferedio:

; 79   :     }
; 80   :     memcpy(buf.buf, PyBytes_AS_STRING(data), len);

  0010c	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR data$[rsp]
  00114	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00118	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0011e	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  00123	85 c0		 test	 eax, eax
  00125	75 1c		 jne	 SHORT $LN7@bufferedio
  00127	41 b8 50 00 00
	00		 mov	 r8d, 80			; 00000050H
  0012d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DI@KBAIHMCO@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AAe?$AAd?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  00134	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CI@GGBJKIGL@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAd?$AAa?$AAt?$AAa?$AA?$CJ?$AA?$AA@
  0013b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00141	33 c0		 xor	 eax, eax
$LN7@bufferedio:
  00143	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR data$[rsp]
  0014b	48 83 c0 78	 add	 rax, 120		; 00000078H
  0014f	4c 8b 44 24 20	 mov	 r8, QWORD PTR len$[rsp]
  00154	48 8b d0	 mov	 rdx, rax
  00157	48 8b 4c 24 30	 mov	 rcx, QWORD PTR buf$[rsp]
  0015c	e8 00 00 00 00	 call	 memcpy

; 81   : 
; 82   :     PyBuffer_Release(&buf);

  00161	48 8d 4c 24 30	 lea	 rcx, QWORD PTR buf$[rsp]
  00166	e8 00 00 00 00	 call	 PyBuffer_Release

; 83   :     Py_DECREF(data);

  0016b	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR data$[rsp]
  00173	e8 00 00 00 00	 call	 _Py_DecRef

; 84   : 
; 85   :     return PyLong_FromSsize_t(len);

  00178	48 8b 4c 24 20	 mov	 rcx, QWORD PTR len$[rsp]
  0017d	e8 00 00 00 00	 call	 PyLong_FromSsize_t
  00182	eb 0c		 jmp	 SHORT $LN5@bufferedio
$error$20549:

; 86   : 
; 87   :   error:
; 88   :     PyBuffer_Release(&buf);

  00184	48 8d 4c 24 30	 lea	 rcx, QWORD PTR buf$[rsp]
  00189	e8 00 00 00 00	 call	 PyBuffer_Release

; 89   :     return NULL;

  0018e	33 c0		 xor	 eax, eax
$LN5@bufferedio:

; 90   : }

  00190	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  00197	c3		 ret	 0
bufferediobase_readinto ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
EXTRN	_Py_Dealloc:PROC
EXTRN	_Py_NegativeRefcount:PROC
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_RefTotal:QWORD
EXTRN	Px_DecRef:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN13
	DD	imagerel $LN13+257
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
tv81 = 48
op$ = 80
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN13:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	0f 85 e6 00 00
	00		 jne	 $LN8@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00016	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0001b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0001f	48 83 e0 20	 and	 rax, 32			; 00000020H
  00023	48 85 c0	 test	 rax, rax
  00026	75 14		 jne	 SHORT $LN6@Py_DecRef
  00028	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0002d	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00031	48 25 80 00 00
	00		 and	 rax, 128		; 00000080H
  00037	48 85 c0	 test	 rax, rax
  0003a	74 0f		 je	 SHORT $LN7@Py_DecRef
$LN6@Py_DecRef:

; 926  :             Px_DECREF(op);

  0003c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  00041	e8 00 00 00 00	 call	 Px_DecRef
  00046	e9 b1 00 00 00	 jmp	 $LN5@Py_DecRef
$LN7@Py_DecRef:

; 927  :         else if (!Px_ISPX(op)) {

  0004b	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00050	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00054	48 83 e0 02	 and	 rax, 2
  00058	48 85 c0	 test	 rax, rax
  0005b	0f 85 9b 00 00
	00		 jne	 $LN4@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;

  00061	e8 00 00 00 00	 call	 _Py_PXCTX
  00066	85 c0		 test	 eax, eax
  00068	74 02		 je	 SHORT $LN11@Py_DecRef
  0006a	eb 11		 jmp	 SHORT $LN12@Py_DecRef
$LN11@Py_DecRef:
  0006c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00073	48 ff c8	 dec	 rax
  00076	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN12@Py_DecRef:

; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  0007d	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00082	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00086	48 ff c8	 dec	 rax
  00089	48 89 44 24 30	 mov	 QWORD PTR tv81[rsp], rax
  0008e	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00093	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv81[rsp]
  00098	48 89 48 50	 mov	 QWORD PTR [rax+80], rcx
  0009c	48 83 7c 24 30
	00		 cmp	 QWORD PTR tv81[rsp], 0
  000a2	74 4e		 je	 SHORT $LN3@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);

  000a4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000ac	4c 8b 4c 24 50	 mov	 r9, QWORD PTR op$[rsp]
  000b1	41 b8 a2 03 00
	00		 mov	 r8d, 930		; 000003a2H
  000b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000c5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ca	85 c0		 test	 eax, eax
  000cc	75 22		 jne	 SHORT $LN2@Py_DecRef
  000ce	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  000d3	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000d8	7d 16		 jge	 SHORT $LN2@Py_DecRef
  000da	4c 8b 44 24 50	 mov	 r8, QWORD PTR op$[rsp]
  000df	ba a2 03 00 00	 mov	 edx, 930		; 000003a2H
  000e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000eb	e8 00 00 00 00	 call	 _Py_NegativeRefcount
$LN2@Py_DecRef:

; 931  :             } else

  000f0	eb 0a		 jmp	 SHORT $LN1@Py_DecRef
$LN3@Py_DecRef:

; 932  :                 _Py_Dealloc((PyObject *)(op));

  000f2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  000f7	e8 00 00 00 00	 call	 _Py_Dealloc
$LN1@Py_DecRef:
$LN4@Py_DecRef:
$LN5@Py_DecRef:
$LN8@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  000fc	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00100	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\modules\_io\bufferedio.c
pdata	SEGMENT
$pdata$bufferediobase_detach DD imagerel bufferediobase_detach
	DD	imagerel bufferediobase_detach+26
	DD	imagerel $unwind$bufferediobase_detach
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$bufferediobase_detach DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT bufferediobase_detach
_TEXT	SEGMENT
self$ = 48
bufferediobase_detach PROC				; COMDAT

; 107  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 108  :     return bufferediobase_unsupported("detach");

  00009	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06CNCOJECB@detach?$AA@
  00010	e8 00 00 00 00	 call	 bufferediobase_unsupported

; 109  : }

  00015	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00019	c3		 ret	 0
bufferediobase_detach ENDP
_TEXT	ENDS
EXTRN	PyModule_GetState:PROC
EXTRN	PyState_FindModule:PROC
EXTRN	_PyIO_Module:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$bufferediobase_unsupported DD imagerel bufferediobase_unsupported
	DD	imagerel bufferediobase_unsupported+50
	DD	imagerel $unwind$bufferediobase_unsupported
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$bufferediobase_unsupported DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT bufferediobase_unsupported
_TEXT	SEGMENT
message$ = 48
bufferediobase_unsupported PROC				; COMDAT

; 94   : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 95   :     PyErr_SetString(IO_STATE->unsupported_operation, message);

  00009	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_PyIO_Module
  00010	e8 00 00 00 00	 call	 PyState_FindModule
  00015	48 8b c8	 mov	 rcx, rax
  00018	e8 00 00 00 00	 call	 PyModule_GetState
  0001d	48 8b 54 24 30	 mov	 rdx, QWORD PTR message$[rsp]
  00022	48 8b 48 10	 mov	 rcx, QWORD PTR [rax+16]
  00026	e8 00 00 00 00	 call	 PyErr_SetString

; 96   :     return NULL;

  0002b	33 c0		 xor	 eax, eax

; 97   : }

  0002d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00031	c3		 ret	 0
bufferediobase_unsupported ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$bufferediobase_read DD imagerel bufferediobase_read
	DD	imagerel bufferediobase_read+31
	DD	imagerel $unwind$bufferediobase_read
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$bufferediobase_read DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT bufferediobase_read
_TEXT	SEGMENT
self$ = 48
args$ = 56
bufferediobase_read PROC				; COMDAT

; 131  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 132  :     return bufferediobase_unsupported("read");

  0000e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04POLDLDMI@read?$AA@
  00015	e8 00 00 00 00	 call	 bufferediobase_unsupported

; 133  : }

  0001a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001e	c3		 ret	 0
bufferediobase_read ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$bufferediobase_read1 DD imagerel bufferediobase_read1
	DD	imagerel bufferediobase_read1+31
	DD	imagerel $unwind$bufferediobase_read1
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$bufferediobase_read1 DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT bufferediobase_read1
_TEXT	SEGMENT
self$ = 48
args$ = 56
bufferediobase_read1 PROC				; COMDAT

; 144  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 145  :     return bufferediobase_unsupported("read1");

  0000e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05FDBMPOID@read1?$AA@
  00015	e8 00 00 00 00	 call	 bufferediobase_unsupported

; 146  : }

  0001a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001e	c3		 ret	 0
bufferediobase_read1 ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$bufferediobase_write DD imagerel bufferediobase_write
	DD	imagerel bufferediobase_write+31
	DD	imagerel $unwind$bufferediobase_write
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$bufferediobase_write DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT bufferediobase_write
_TEXT	SEGMENT
self$ = 48
args$ = 56
bufferediobase_write PROC				; COMDAT

; 159  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 160  :     return bufferediobase_unsupported("write");

  0000e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05NGFEDHGN@write?$AA@
  00015	e8 00 00 00 00	 call	 bufferediobase_unsupported

; 161  : }

  0001a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001e	c3		 ret	 0
bufferediobase_write ENDP
_TEXT	ENDS
PUBLIC	??_C@_1EM@HFMJMDDM@?$AAg?$AA?9?$AA?$DO?$AAg?$AAc?$AA?4?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AAG?$AAC?$AA_?$AAR?$AAE?$AAF?$AAS?$AA_?$AAU?$AAN?$AAT?$AAR@ ; `string'
PUBLIC	??_C@_0BB@MBAKODIJ@buffered_dealloc?$AA@	; `string'
PUBLIC	??_C@_0BM@DICDDJFP@?4?4?2Modules?2_io?2bufferedio?4c?$AA@ ; `string'
EXTRN	PyThread_free_lock:PROC
EXTRN	PyMem_Free:PROC
EXTRN	PyObject_ClearWeakRefs:PROC
EXTRN	_PyIOBase_finalize:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$buffered_dealloc DD imagerel buffered_dealloc
	DD	imagerel buffered_dealloc+662
	DD	imagerel $unwind$buffered_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$buffered_dealloc DD 010901H
	DD	0a209H
xdata	ENDS
;	COMDAT ??_C@_1EM@HFMJMDDM@?$AAg?$AA?9?$AA?$DO?$AAg?$AAc?$AA?4?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AAG?$AAC?$AA_?$AAR?$AAE?$AAF?$AAS?$AA_?$AAU?$AAN?$AAT?$AAR@
CONST	SEGMENT
??_C@_1EM@HFMJMDDM@?$AAg?$AA?9?$AA?$DO?$AAg?$AAc?$AA?4?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AAG?$AAC?$AA_?$AAR?$AAE?$AAF?$AAS?$AA_?$AAU?$AAN?$AAT?$AAR@ DB 'g'
	DB	00H, '-', 00H, '>', 00H, 'g', 00H, 'c', 00H, '.', 00H, 'g', 00H
	DB	'c', 00H, '_', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 's', 00H, ' '
	DB	00H, '!', 00H, '=', 00H, ' ', 00H, '_', 00H, 'P', 00H, 'y', 00H
	DB	'G', 00H, 'C', 00H, '_', 00H, 'R', 00H, 'E', 00H, 'F', 00H, 'S'
	DB	00H, '_', 00H, 'U', 00H, 'N', 00H, 'T', 00H, 'R', 00H, 'A', 00H
	DB	'C', 00H, 'K', 00H, 'E', 00H, 'D', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@MBAKODIJ@buffered_dealloc?$AA@
CONST	SEGMENT
??_C@_0BB@MBAKODIJ@buffered_dealloc?$AA@ DB 'buffered_dealloc', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@DICDDJFP@?4?4?2Modules?2_io?2bufferedio?4c?$AA@
CONST	SEGMENT
??_C@_0BM@DICDDJFP@?4?4?2Modules?2_io?2bufferedio?4c?$AA@ DB '..\Modules\'
	DB	'_io\bufferedio.c', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT buffered_dealloc
_TEXT	SEGMENT
g$20672 = 48
_py_tmp$20685 = 56
_py_tmp$20697 = 64
tv85 = 72
self$ = 96
buffered_dealloc PROC					; COMDAT

; 386  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 387  :     self->deallocating = 1;

  00009	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  0000e	c7 40 78 01 00
	00 00		 mov	 DWORD PTR [rax+120], 1

; 388  :     if (self->ok && _PyIOBase_finalize((PyObject *) self) < 0)

  00015	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  0001a	83 78 68 00	 cmp	 DWORD PTR [rax+104], 0
  0001e	74 13		 je	 SHORT $LN16@buffered_d
  00020	48 8b 4c 24 60	 mov	 rcx, QWORD PTR self$[rsp]
  00025	e8 00 00 00 00	 call	 _PyIOBase_finalize
  0002a	85 c0		 test	 eax, eax
  0002c	7d 05		 jge	 SHORT $LN16@buffered_d

; 389  :         return;

  0002e	e9 5e 02 00 00	 jmp	 $LN17@buffered_d
$LN16@buffered_d:

; 390  :     _PyObject_GC_UNTRACK(self);

  00033	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0003b	4c 8b 4c 24 60	 mov	 r9, QWORD PTR self$[rsp]
  00040	41 b8 86 01 00
	00		 mov	 r8d, 390		; 00000186H
  00046	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@DICDDJFP@?4?4?2Modules?2_io?2bufferedio?4c?$AA@
  0004d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@MBAKODIJ@buffered_dealloc?$AA@
  00054	e8 00 00 00 00	 call	 _PyParallel_Guard
  00059	85 c0		 test	 eax, eax
  0005b	0f 85 c1 00 00
	00		 jne	 $LN15@buffered_d
$LN14@buffered_d:
  00061	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00069	4c 8b 4c 24 60	 mov	 r9, QWORD PTR self$[rsp]
  0006e	41 b8 86 01 00
	00		 mov	 r8d, 390		; 00000186H
  00074	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@DICDDJFP@?4?4?2Modules?2_io?2bufferedio?4c?$AA@
  0007b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@MBAKODIJ@buffered_dealloc?$AA@
  00082	e8 00 00 00 00	 call	 _PyParallel_Guard
  00087	85 c0		 test	 eax, eax
  00089	74 0b		 je	 SHORT $LN19@buffered_d
  0008b	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR tv85[rsp], 0
  00094	eb 0e		 jmp	 SHORT $LN20@buffered_d
$LN19@buffered_d:
  00096	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  0009b	48 83 e8 18	 sub	 rax, 24
  0009f	48 89 44 24 48	 mov	 QWORD PTR tv85[rsp], rax
$LN20@buffered_d:
  000a4	48 8b 44 24 48	 mov	 rax, QWORD PTR tv85[rsp]
  000a9	48 89 44 24 30	 mov	 QWORD PTR g$20672[rsp], rax
  000ae	48 8b 44 24 30	 mov	 rax, QWORD PTR g$20672[rsp]
  000b3	48 83 78 10 fe	 cmp	 QWORD PTR [rax+16], -2
  000b8	75 1c		 jne	 SHORT $LN21@buffered_d
  000ba	41 b8 86 01 00
	00		 mov	 r8d, 390		; 00000186H
  000c0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DI@KBAIHMCO@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AAe?$AAd?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  000c7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EM@HFMJMDDM@?$AAg?$AA?9?$AA?$DO?$AAg?$AAc?$AA?4?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AAG?$AAC?$AA_?$AAR?$AAE?$AAF?$AAS?$AA_?$AAU?$AAN?$AAT?$AAR@
  000ce	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000d4	33 c0		 xor	 eax, eax
$LN21@buffered_d:
  000d6	48 8b 44 24 30	 mov	 rax, QWORD PTR g$20672[rsp]
  000db	48 c7 40 10 fe
	ff ff ff	 mov	 QWORD PTR [rax+16], -2
  000e3	48 8b 44 24 30	 mov	 rax, QWORD PTR g$20672[rsp]
  000e8	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  000ec	48 8b 4c 24 30	 mov	 rcx, QWORD PTR g$20672[rsp]
  000f1	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000f4	48 89 08	 mov	 QWORD PTR [rax], rcx
  000f7	48 8b 44 24 30	 mov	 rax, QWORD PTR g$20672[rsp]
  000fc	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000ff	48 8b 4c 24 30	 mov	 rcx, QWORD PTR g$20672[rsp]
  00104	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00108	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  0010c	48 8b 44 24 30	 mov	 rax, QWORD PTR g$20672[rsp]
  00111	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
  00118	33 c0		 xor	 eax, eax
  0011a	85 c0		 test	 eax, eax
  0011c	0f 85 3f ff ff
	ff		 jne	 $LN14@buffered_d
$LN15@buffered_d:

; 391  :     self->ok = 0;

  00122	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00127	c7 40 68 00 00
	00 00		 mov	 DWORD PTR [rax+104], 0

; 392  :     if (self->weakreflist != NULL)

  0012e	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00133	48 83 b8 e0 00
	00 00 00	 cmp	 QWORD PTR [rax+224], 0
  0013b	74 0a		 je	 SHORT $LN11@buffered_d

; 393  :         PyObject_ClearWeakRefs((PyObject *)self);

  0013d	48 8b 4c 24 60	 mov	 rcx, QWORD PTR self$[rsp]
  00142	e8 00 00 00 00	 call	 PyObject_ClearWeakRefs
$LN11@buffered_d:
$LN10@buffered_d:

; 394  :     Py_CLEAR(self->raw);

  00147	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  0014c	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00151	74 53		 je	 SHORT $LN7@buffered_d
  00153	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0015b	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00160	4c 8b 48 60	 mov	 r9, QWORD PTR [rax+96]
  00164	41 b8 8a 01 00
	00		 mov	 r8d, 394		; 0000018aH
  0016a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@DICDDJFP@?4?4?2Modules?2_io?2bufferedio?4c?$AA@
  00171	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@MBAKODIJ@buffered_dealloc?$AA@
  00178	e8 00 00 00 00	 call	 _PyParallel_Guard
  0017d	85 c0		 test	 eax, eax
  0017f	75 25		 jne	 SHORT $LN7@buffered_d
  00181	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00186	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0018a	48 89 44 24 38	 mov	 QWORD PTR _py_tmp$20685[rsp], rax
  0018f	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00194	48 c7 40 60 00
	00 00 00	 mov	 QWORD PTR [rax+96], 0
  0019c	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _py_tmp$20685[rsp]
  001a1	e8 00 00 00 00	 call	 _Py_DecRef
$LN7@buffered_d:
  001a6	33 c0		 xor	 eax, eax
  001a8	85 c0		 test	 eax, eax
  001aa	75 9b		 jne	 SHORT $LN10@buffered_d

; 395  :     if (self->buffer) {

  001ac	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  001b1	48 83 b8 88 00
	00 00 00	 cmp	 QWORD PTR [rax+136], 0
  001b9	74 21		 je	 SHORT $LN6@buffered_d

; 396  :         PyMem_Free(self->buffer);

  001bb	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  001c0	48 8b 88 88 00
	00 00		 mov	 rcx, QWORD PTR [rax+136]
  001c7	e8 00 00 00 00	 call	 PyMem_Free

; 397  :         self->buffer = NULL;

  001cc	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  001d1	48 c7 80 88 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+136], 0
$LN6@buffered_d:

; 398  :     }
; 399  : #ifdef WITH_THREAD
; 400  :     if (self->lock) {

  001dc	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  001e1	48 83 b8 b8 00
	00 00 00	 cmp	 QWORD PTR [rax+184], 0
  001e9	74 21		 je	 SHORT $LN5@buffered_d

; 401  :         PyThread_free_lock(self->lock);

  001eb	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  001f0	48 8b 88 b8 00
	00 00		 mov	 rcx, QWORD PTR [rax+184]
  001f7	e8 00 00 00 00	 call	 PyThread_free_lock

; 402  :         self->lock = NULL;

  001fc	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00201	48 c7 80 b8 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+184], 0
$LN5@buffered_d:
$LN4@buffered_d:

; 403  :     }
; 404  : #endif
; 405  :     Py_CLEAR(self->dict);

  0020c	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00211	48 83 b8 d8 00
	00 00 00	 cmp	 QWORD PTR [rax+216], 0
  00219	74 5c		 je	 SHORT $LN1@buffered_d
  0021b	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00223	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00228	4c 8b 88 d8 00
	00 00		 mov	 r9, QWORD PTR [rax+216]
  0022f	41 b8 95 01 00
	00		 mov	 r8d, 405		; 00000195H
  00235	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@DICDDJFP@?4?4?2Modules?2_io?2bufferedio?4c?$AA@
  0023c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@MBAKODIJ@buffered_dealloc?$AA@
  00243	e8 00 00 00 00	 call	 _PyParallel_Guard
  00248	85 c0		 test	 eax, eax
  0024a	75 2b		 jne	 SHORT $LN1@buffered_d
  0024c	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00251	48 8b 80 d8 00
	00 00		 mov	 rax, QWORD PTR [rax+216]
  00258	48 89 44 24 40	 mov	 QWORD PTR _py_tmp$20697[rsp], rax
  0025d	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00262	48 c7 80 d8 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+216], 0
  0026d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _py_tmp$20697[rsp]
  00272	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@buffered_d:
  00277	33 c0		 xor	 eax, eax
  00279	85 c0		 test	 eax, eax
  0027b	75 8f		 jne	 SHORT $LN4@buffered_d

; 406  :     Py_TYPE(self)->tp_free((PyObject *)self);

  0027d	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00282	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00286	48 8b 4c 24 60	 mov	 rcx, QWORD PTR self$[rsp]
  0028b	ff 90 98 01 00
	00		 call	 QWORD PTR [rax+408]
$LN17@buffered_d:

; 407  : }

  00291	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00295	c3		 ret	 0
buffered_dealloc ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$buffered_sizeof DD imagerel buffered_sizeof
	DD	imagerel buffered_sizeof+81
	DD	imagerel $unwind$buffered_sizeof
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$buffered_sizeof DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT buffered_sizeof
_TEXT	SEGMENT
res$ = 32
self$ = 64
unused$ = 72
buffered_sizeof PROC					; COMDAT

; 411  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 412  :     Py_ssize_t res;
; 413  : 
; 414  :     res = sizeof(buffered);

  0000e	48 c7 44 24 20
	f0 00 00 00	 mov	 QWORD PTR res$[rsp], 240 ; 000000f0H

; 415  :     if (self->buffer)

  00017	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0001c	48 83 b8 88 00
	00 00 00	 cmp	 QWORD PTR [rax+136], 0
  00024	74 1c		 je	 SHORT $LN1@buffered_s

; 416  :         res += self->buffer_size;

  00026	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0002b	48 8b 80 c8 00
	00 00		 mov	 rax, QWORD PTR [rax+200]
  00032	48 8b 4c 24 20	 mov	 rcx, QWORD PTR res$[rsp]
  00037	48 03 c8	 add	 rcx, rax
  0003a	48 8b c1	 mov	 rax, rcx
  0003d	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax
$LN1@buffered_s:

; 417  :     return PyLong_FromSsize_t(res);

  00042	48 8b 4c 24 20	 mov	 rcx, QWORD PTR res$[rsp]
  00047	e8 00 00 00 00	 call	 PyLong_FromSsize_t

; 418  : }

  0004c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00050	c3		 ret	 0
buffered_sizeof ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BC@EHJJLLHI@buffered_traverse?$AA@	; `string'
EXTRN	_PyParallel_ContextGuardFailure:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$buffered_traverse DD imagerel buffered_traverse
	DD	imagerel buffered_traverse+212
	DD	imagerel $unwind$buffered_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$buffered_traverse DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT ??_C@_0BC@EHJJLLHI@buffered_traverse?$AA@
CONST	SEGMENT
??_C@_0BC@EHJJLLHI@buffered_traverse?$AA@ DB 'buffered_traverse', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT buffered_traverse
_TEXT	SEGMENT
vret$20726 = 32
vret$20734 = 36
self$ = 64
visit$ = 72
arg$ = 80
buffered_traverse PROC					; COMDAT

; 422  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN12@buffered_t:

; 423  :     Py_VISIT(self->raw);

  00013	e8 00 00 00 00	 call	 _Py_PXCTX
  00018	85 c0		 test	 eax, eax
  0001a	74 1c		 je	 SHORT $LN9@buffered_t
  0001c	45 33 c9	 xor	 r9d, r9d
  0001f	41 b8 a7 01 00
	00		 mov	 r8d, 423		; 000001a7H
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@DICDDJFP@?4?4?2Modules?2_io?2bufferedio?4c?$AA@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@EHJJLLHI@buffered_traverse?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN9@buffered_t:
  00038	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0003d	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00042	74 23		 je	 SHORT $LN8@buffered_t
  00044	48 8b 54 24 50	 mov	 rdx, QWORD PTR arg$[rsp]
  00049	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0004e	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00052	ff 54 24 48	 call	 QWORD PTR visit$[rsp]
  00056	89 44 24 20	 mov	 DWORD PTR vret$20726[rsp], eax
  0005a	83 7c 24 20 00	 cmp	 DWORD PTR vret$20726[rsp], 0
  0005f	74 06		 je	 SHORT $LN7@buffered_t
  00061	8b 44 24 20	 mov	 eax, DWORD PTR vret$20726[rsp]
  00065	eb 68		 jmp	 SHORT $LN13@buffered_t
$LN7@buffered_t:
$LN8@buffered_t:
  00067	33 c0		 xor	 eax, eax
  00069	85 c0		 test	 eax, eax
  0006b	75 a6		 jne	 SHORT $LN12@buffered_t
$LN6@buffered_t:

; 424  :     Py_VISIT(self->dict);

  0006d	e8 00 00 00 00	 call	 _Py_PXCTX
  00072	85 c0		 test	 eax, eax
  00074	74 1c		 je	 SHORT $LN3@buffered_t
  00076	45 33 c9	 xor	 r9d, r9d
  00079	41 b8 a8 01 00
	00		 mov	 r8d, 424		; 000001a8H
  0007f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@DICDDJFP@?4?4?2Modules?2_io?2bufferedio?4c?$AA@
  00086	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@EHJJLLHI@buffered_traverse?$AA@
  0008d	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@buffered_t:
  00092	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00097	48 83 b8 d8 00
	00 00 00	 cmp	 QWORD PTR [rax+216], 0
  0009f	74 26		 je	 SHORT $LN2@buffered_t
  000a1	48 8b 54 24 50	 mov	 rdx, QWORD PTR arg$[rsp]
  000a6	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  000ab	48 8b 88 d8 00
	00 00		 mov	 rcx, QWORD PTR [rax+216]
  000b2	ff 54 24 48	 call	 QWORD PTR visit$[rsp]
  000b6	89 44 24 24	 mov	 DWORD PTR vret$20734[rsp], eax
  000ba	83 7c 24 24 00	 cmp	 DWORD PTR vret$20734[rsp], 0
  000bf	74 06		 je	 SHORT $LN1@buffered_t
  000c1	8b 44 24 24	 mov	 eax, DWORD PTR vret$20734[rsp]
  000c5	eb 08		 jmp	 SHORT $LN13@buffered_t
$LN1@buffered_t:
$LN2@buffered_t:
  000c7	33 c0		 xor	 eax, eax
  000c9	85 c0		 test	 eax, eax
  000cb	75 a0		 jne	 SHORT $LN6@buffered_t

; 425  :     return 0;

  000cd	33 c0		 xor	 eax, eax
$LN13@buffered_t:

; 426  : }

  000cf	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000d3	c3		 ret	 0
buffered_traverse ENDP
_TEXT	ENDS
PUBLIC	??_C@_0P@LJANPOI@buffered_clear?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$buffered_clear DD imagerel buffered_clear
	DD	imagerel buffered_clear+277
	DD	imagerel $unwind$buffered_clear
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$buffered_clear DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0P@LJANPOI@buffered_clear?$AA@
CONST	SEGMENT
??_C@_0P@LJANPOI@buffered_clear?$AA@ DB 'buffered_clear', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT buffered_clear
_TEXT	SEGMENT
_py_tmp$20748 = 48
_py_tmp$20756 = 56
self$ = 80
buffered_clear PROC					; COMDAT

; 430  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 431  :     if (self->ok && _PyIOBase_finalize((PyObject *) self) < 0)

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  0000e	83 78 68 00	 cmp	 DWORD PTR [rax+104], 0
  00012	74 18		 je	 SHORT $LN9@buffered_c
  00014	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  00019	e8 00 00 00 00	 call	 _PyIOBase_finalize
  0001e	85 c0		 test	 eax, eax
  00020	7d 0a		 jge	 SHORT $LN9@buffered_c

; 432  :         return -1;

  00022	b8 ff ff ff ff	 mov	 eax, -1
  00027	e9 e4 00 00 00	 jmp	 $LN10@buffered_c
$LN9@buffered_c:

; 433  :     self->ok = 0;

  0002c	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00031	c7 40 68 00 00
	00 00		 mov	 DWORD PTR [rax+104], 0
$LN8@buffered_c:

; 434  :     Py_CLEAR(self->raw);

  00038	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  0003d	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00042	74 53		 je	 SHORT $LN5@buffered_c
  00044	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0004c	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00051	4c 8b 48 60	 mov	 r9, QWORD PTR [rax+96]
  00055	41 b8 b2 01 00
	00		 mov	 r8d, 434		; 000001b2H
  0005b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@DICDDJFP@?4?4?2Modules?2_io?2bufferedio?4c?$AA@
  00062	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@LJANPOI@buffered_clear?$AA@
  00069	e8 00 00 00 00	 call	 _PyParallel_Guard
  0006e	85 c0		 test	 eax, eax
  00070	75 25		 jne	 SHORT $LN5@buffered_c
  00072	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00077	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0007b	48 89 44 24 30	 mov	 QWORD PTR _py_tmp$20748[rsp], rax
  00080	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00085	48 c7 40 60 00
	00 00 00	 mov	 QWORD PTR [rax+96], 0
  0008d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _py_tmp$20748[rsp]
  00092	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@buffered_c:
  00097	33 c0		 xor	 eax, eax
  00099	85 c0		 test	 eax, eax
  0009b	75 9b		 jne	 SHORT $LN8@buffered_c
$LN4@buffered_c:

; 435  :     Py_CLEAR(self->dict);

  0009d	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  000a2	48 83 b8 d8 00
	00 00 00	 cmp	 QWORD PTR [rax+216], 0
  000aa	74 5c		 je	 SHORT $LN1@buffered_c
  000ac	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000b4	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  000b9	4c 8b 88 d8 00
	00 00		 mov	 r9, QWORD PTR [rax+216]
  000c0	41 b8 b3 01 00
	00		 mov	 r8d, 435		; 000001b3H
  000c6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@DICDDJFP@?4?4?2Modules?2_io?2bufferedio?4c?$AA@
  000cd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@LJANPOI@buffered_clear?$AA@
  000d4	e8 00 00 00 00	 call	 _PyParallel_Guard
  000d9	85 c0		 test	 eax, eax
  000db	75 2b		 jne	 SHORT $LN1@buffered_c
  000dd	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  000e2	48 8b 80 d8 00
	00 00		 mov	 rax, QWORD PTR [rax+216]
  000e9	48 89 44 24 38	 mov	 QWORD PTR _py_tmp$20756[rsp], rax
  000ee	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  000f3	48 c7 80 d8 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+216], 0
  000fe	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _py_tmp$20756[rsp]
  00103	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@buffered_c:
  00108	33 c0		 xor	 eax, eax
  0010a	85 c0		 test	 eax, eax
  0010c	75 8f		 jne	 SHORT $LN4@buffered_c

; 436  :     return 0;

  0010e	33 c0		 xor	 eax, eax
$LN10@buffered_c:

; 437  : }

  00110	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00114	c3		 ret	 0
buffered_clear ENDP
_TEXT	ENDS
PUBLIC	_Py_IncRef
PUBLIC	??_C@_01MJMHLOMK@O?$AA@				; `string'
EXTRN	_Py_NoneStruct:BYTE
EXTRN	PyErr_Clear:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$buffered_dealloc_warn DD imagerel buffered_dealloc_warn
	DD	imagerel buffered_dealloc_warn+146
	DD	imagerel $unwind$buffered_dealloc_warn
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$buffered_dealloc_warn DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT ??_C@_01MJMHLOMK@O?$AA@
CONST	SEGMENT
??_C@_01MJMHLOMK@O?$AA@ DB 'O', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT buffered_dealloc_warn
_TEXT	SEGMENT
r$20767 = 32
self$ = 64
source$ = 72
buffered_dealloc_warn PROC				; COMDAT

; 444  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 445  :     if (self->ok && self->raw) {

  0000e	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00013	83 78 68 00	 cmp	 DWORD PTR [rax+104], 0
  00017	74 61		 je	 SHORT $LN3@buffered_d@2
  00019	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0001e	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00023	74 55		 je	 SHORT $LN3@buffered_d@2

; 446  :         PyObject *r;
; 447  :         r = _PyObject_CallMethodId(self->raw, &PyId__dealloc_warn, "O", source);

  00025	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId__dealloc_warn
  0002a	8b c0		 mov	 eax, eax
  0002c	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00032	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0003b	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0003f	4c 8b 4c 24 48	 mov	 r9, QWORD PTR source$[rsp]
  00044	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01MJMHLOMK@O?$AA@
  0004b	48 8b d0	 mov	 rdx, rax
  0004e	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00053	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00057	e8 00 00 00 00	 call	 _PyObject_CallMethodId_SizeT
  0005c	48 89 44 24 20	 mov	 QWORD PTR r$20767[rsp], rax

; 448  :         if (r)

  00061	48 83 7c 24 20
	00		 cmp	 QWORD PTR r$20767[rsp], 0
  00067	74 0c		 je	 SHORT $LN2@buffered_d@2

; 449  :             Py_DECREF(r);

  00069	48 8b 4c 24 20	 mov	 rcx, QWORD PTR r$20767[rsp]
  0006e	e8 00 00 00 00	 call	 _Py_DecRef

; 450  :         else

  00073	eb 05		 jmp	 SHORT $LN1@buffered_d@2
$LN2@buffered_d@2:

; 451  :             PyErr_Clear();

  00075	e8 00 00 00 00	 call	 PyErr_Clear
$LN1@buffered_d@2:
$LN3@buffered_d@2:

; 452  :     }
; 453  :     Py_RETURN_NONE;

  0007a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00081	e8 00 00 00 00	 call	 _Py_IncRef
  00086	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 454  : }

  0008d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00091	c3		 ret	 0
buffered_dealloc_warn ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN7
	DD	imagerel $LN7+132
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 6d		 jne	 SHORT $LN2@Py_IncRef
  00012	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0001a	4c 8b 4c 24 40	 mov	 r9, QWORD PTR op$[rsp]
  0001f	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_Guard
  00038	85 c0		 test	 eax, eax
  0003a	75 12		 jne	 SHORT $LN1@Py_IncRef
  0003c	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  00041	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00045	48 83 e0 20	 and	 rax, 32			; 00000020H
  00049	48 85 c0	 test	 rax, rax
  0004c	74 31		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;

  0004e	e8 00 00 00 00	 call	 _Py_PXCTX
  00053	85 c0		 test	 eax, eax
  00055	74 02		 je	 SHORT $LN5@Py_IncRef
  00057	eb 11		 jmp	 SHORT $LN6@Py_IncRef
$LN5@Py_IncRef:
  00059	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00060	48 ff c0	 inc	 rax
  00063	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN6@Py_IncRef:

; 907  :         (((PyObject*)(op))->ob_refcnt++);

  0006a	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  0006f	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00073	48 ff c0	 inc	 rax
  00076	48 8b 4c 24 40	 mov	 rcx, QWORD PTR op$[rsp]
  0007b	48 89 41 50	 mov	 QWORD PTR [rcx+80], rax
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  0007f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00083	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@ ; `string'
PUBLIC	??_C@_0BN@IOAMDFLF@raw?5stream?5has?5been?5detached?$AA@ ; `string'
EXTRN	PyObject_CallMethodObjArgs:PROC
EXTRN	_PyIO_str_flush:QWORD
;	COMDAT pdata
; File c:\src\pyparallel\modules\_io\bufferedio.c
pdata	SEGMENT
$pdata$buffered_simple_flush DD imagerel buffered_simple_flush
	DD	imagerel buffered_simple_flush+109
	DD	imagerel $unwind$buffered_simple_flush
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$buffered_simple_flush DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT ??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
CONST	SEGMENT
??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@ DB 'I/O operati'
	DB	'on on uninitialized object', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@IOAMDFLF@raw?5stream?5has?5been?5detached?$AA@
CONST	SEGMENT
??_C@_0BN@IOAMDFLF@raw?5stream?5has?5been?5detached?$AA@ DB 'raw stream h'
	DB	'as been detached', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT buffered_simple_flush
_TEXT	SEGMENT
self$ = 48
args$ = 56
buffered_simple_flush PROC				; COMDAT

; 466  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 467  :     CHECK_INITIALIZED(self)

  0000e	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00013	83 78 68 00	 cmp	 DWORD PTR [rax+104], 0
  00017	7f 37		 jg	 SHORT $LN3@buffered_s@2
  00019	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  0001e	83 78 6c 00	 cmp	 DWORD PTR [rax+108], 0
  00022	74 15		 je	 SHORT $LN2@buffered_s@2
  00024	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@IOAMDFLF@raw?5stream?5has?5been?5detached?$AA@
  0002b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00032	e8 00 00 00 00	 call	 PyErr_SetString
  00037	eb 13		 jmp	 SHORT $LN1@buffered_s@2
$LN2@buffered_s@2:
  00039	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
  00040	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00047	e8 00 00 00 00	 call	 PyErr_SetString
$LN1@buffered_s@2:
  0004c	33 c0		 xor	 eax, eax
  0004e	eb 18		 jmp	 SHORT $LN4@buffered_s@2
$LN3@buffered_s@2:

; 468  :     return PyObject_CallMethodObjArgs(self->raw, _PyIO_str_flush, NULL);

  00050	45 33 c0	 xor	 r8d, r8d
  00053	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR _PyIO_str_flush
  0005a	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  0005f	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00063	e8 00 00 00 00	 call	 PyObject_CallMethodObjArgs
$LN4@buffered_s@2:

; 469  : }

  00068	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006c	c3		 ret	 0
buffered_simple_flush ENDP
_TEXT	ENDS
EXTRN	PyObject_GetAttr:PROC
EXTRN	_PyIO_str_closed:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$buffered_closed_get DD imagerel buffered_closed_get
	DD	imagerel buffered_closed_get+106
	DD	imagerel $unwind$buffered_closed_get
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$buffered_closed_get DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT buffered_closed_get
_TEXT	SEGMENT
self$ = 48
context$ = 56
buffered_closed_get PROC				; COMDAT

; 487  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 488  :     CHECK_INITIALIZED(self)

  0000e	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00013	83 78 68 00	 cmp	 DWORD PTR [rax+104], 0
  00017	7f 37		 jg	 SHORT $LN3@buffered_c@2
  00019	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  0001e	83 78 6c 00	 cmp	 DWORD PTR [rax+108], 0
  00022	74 15		 je	 SHORT $LN2@buffered_c@2
  00024	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@IOAMDFLF@raw?5stream?5has?5been?5detached?$AA@
  0002b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00032	e8 00 00 00 00	 call	 PyErr_SetString
  00037	eb 13		 jmp	 SHORT $LN1@buffered_c@2
$LN2@buffered_c@2:
  00039	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
  00040	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00047	e8 00 00 00 00	 call	 PyErr_SetString
$LN1@buffered_c@2:
  0004c	33 c0		 xor	 eax, eax
  0004e	eb 15		 jmp	 SHORT $LN4@buffered_c@2
$LN3@buffered_c@2:

; 489  :     return PyObject_GetAttr(self->raw, _PyIO_str_closed);

  00050	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR _PyIO_str_closed
  00057	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  0005c	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00060	e8 00 00 00 00	 call	 PyObject_GetAttr
$LN4@buffered_c@2:

; 490  : }

  00065	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00069	c3		 ret	 0
buffered_closed_get ENDP
_TEXT	ENDS
PUBLIC	??_C@_0P@HOAMMMAE@buffered_close?$AA@		; `string'
EXTRN	PyException_SetContext:PROC
EXTRN	PyErr_NormalizeException:PROC
EXTRN	PyErr_Restore:PROC
EXTRN	_PyIO_str_close:QWORD
EXTRN	PyErr_Fetch:PROC
EXTRN	PyThread_release_lock:PROC
EXTRN	PyThread_get_thread_ident:PROC
EXTRN	PyThread_acquire_lock:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$buffered_close DD imagerel buffered_close
	DD	imagerel buffered_close+861
	DD	imagerel $unwind$buffered_close
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$buffered_close DD 021101H
	DD	0110111H
xdata	ENDS
;	COMDAT ??_C@_0P@HOAMMMAE@buffered_close?$AA@
CONST	SEGMENT
??_C@_0P@HOAMMMAE@buffered_close?$AA@ DB 'buffered_close', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT buffered_close
_TEXT	SEGMENT
res$ = 48
val$ = 56
tb$ = 64
r$ = 72
exc$ = 80
r$20833 = 88
_py_tmp$20860 = 96
val2$20865 = 104
tv79 = 112
tv143 = 116
self$ = 144
args$ = 152
buffered_close PROC					; COMDAT

; 494  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 495  :     PyObject *res = NULL, *exc = NULL, *val, *tb;

  00011	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR res$[rsp], 0
  0001a	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR exc$[rsp], 0

; 496  :     int r;
; 497  : 
; 498  :     CHECK_INITIALIZED(self)

  00023	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0002b	83 78 68 00	 cmp	 DWORD PTR [rax+104], 0
  0002f	7f 3d		 jg	 SHORT $LN31@buffered_c@3
  00031	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00039	83 78 6c 00	 cmp	 DWORD PTR [rax+108], 0
  0003d	74 15		 je	 SHORT $LN30@buffered_c@3
  0003f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@IOAMDFLF@raw?5stream?5has?5been?5detached?$AA@
  00046	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0004d	e8 00 00 00 00	 call	 PyErr_SetString
  00052	eb 13		 jmp	 SHORT $LN29@buffered_c@3
$LN30@buffered_c@3:
  00054	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
  0005b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00062	e8 00 00 00 00	 call	 PyErr_SetString
$LN29@buffered_c@3:
  00067	33 c0		 xor	 eax, eax
  00069	e9 e7 02 00 00	 jmp	 $LN32@buffered_c@3
$LN31@buffered_c@3:

; 499  :     if (!ENTER_BUFFERED(self))

  0006e	33 d2		 xor	 edx, edx
  00070	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00078	48 8b 88 b8 00
	00 00		 mov	 rcx, QWORD PTR [rax+184]
  0007f	e8 00 00 00 00	 call	 PyThread_acquire_lock
  00084	85 c0		 test	 eax, eax
  00086	74 0a		 je	 SHORT $LN34@buffered_c@3
  00088	c7 44 24 70 01
	00 00 00	 mov	 DWORD PTR tv79[rsp], 1
  00090	eb 11		 jmp	 SHORT $LN35@buffered_c@3
$LN34@buffered_c@3:
  00092	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  0009a	e8 00 00 00 00	 call	 _enter_buffered_busy
  0009f	89 44 24 70	 mov	 DWORD PTR tv79[rsp], eax
$LN35@buffered_c@3:
  000a3	83 7c 24 70 00	 cmp	 DWORD PTR tv79[rsp], 0
  000a8	74 1a		 je	 SHORT $LN27@buffered_c@3
  000aa	e8 00 00 00 00	 call	 PyThread_get_thread_ident
  000af	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  000b7	89 81 c0 00 00
	00		 mov	 DWORD PTR [rcx+192], eax
  000bd	33 c0		 xor	 eax, eax
  000bf	83 f8 01	 cmp	 eax, 1
  000c2	75 07		 jne	 SHORT $LN28@buffered_c@3
$LN27@buffered_c@3:

; 500  :         return NULL;

  000c4	33 c0		 xor	 eax, eax
  000c6	e9 8a 02 00 00	 jmp	 $LN32@buffered_c@3
$LN28@buffered_c@3:

; 501  : 
; 502  :     r = buffered_closed(self);

  000cb	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  000d3	e8 00 00 00 00	 call	 buffered_closed
  000d8	89 44 24 48	 mov	 DWORD PTR r$[rsp], eax

; 503  :     if (r < 0)

  000dc	83 7c 24 48 00	 cmp	 DWORD PTR r$[rsp], 0
  000e1	7d 05		 jge	 SHORT $LN26@buffered_c@3

; 504  :         goto end;

  000e3	e9 3c 02 00 00	 jmp	 $end$20829
$LN26@buffered_c@3:

; 505  :     if (r > 0) {

  000e8	83 7c 24 48 00	 cmp	 DWORD PTR r$[rsp], 0
  000ed	7e 1b		 jle	 SHORT $LN25@buffered_c@3

; 506  :         res = Py_None;

  000ef	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000f6	48 89 44 24 30	 mov	 QWORD PTR res$[rsp], rax

; 507  :         Py_INCREF(res);

  000fb	48 8b 4c 24 30	 mov	 rcx, QWORD PTR res$[rsp]
  00100	e8 00 00 00 00	 call	 _Py_IncRef

; 508  :         goto end;

  00105	e9 1a 02 00 00	 jmp	 $end$20829
$LN25@buffered_c@3:

; 509  :     }
; 510  : 
; 511  :     if (self->deallocating) {

  0010a	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00112	83 78 78 00	 cmp	 DWORD PTR [rax+120], 0
  00116	74 33		 je	 SHORT $LN24@buffered_c@3

; 512  :         PyObject *r = buffered_dealloc_warn(self, (PyObject *) self);

  00118	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR self$[rsp]
  00120	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00128	e8 00 00 00 00	 call	 buffered_dealloc_warn
  0012d	48 89 44 24 58	 mov	 QWORD PTR r$20833[rsp], rax

; 513  :         if (r)

  00132	48 83 7c 24 58
	00		 cmp	 QWORD PTR r$20833[rsp], 0
  00138	74 0c		 je	 SHORT $LN23@buffered_c@3

; 514  :             Py_DECREF(r);

  0013a	48 8b 4c 24 58	 mov	 rcx, QWORD PTR r$20833[rsp]
  0013f	e8 00 00 00 00	 call	 _Py_DecRef

; 515  :         else

  00144	eb 05		 jmp	 SHORT $LN22@buffered_c@3
$LN23@buffered_c@3:

; 516  :             PyErr_Clear();

  00146	e8 00 00 00 00	 call	 PyErr_Clear
$LN22@buffered_c@3:
$LN24@buffered_c@3:
$LN21@buffered_c@3:

; 517  :     }
; 518  :     /* flush() will most probably re-take the lock, so drop it first */
; 519  :     LEAVE_BUFFERED(self)

  0014b	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00153	c7 80 c0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+192], 0
  0015d	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00165	48 8b 88 b8 00
	00 00		 mov	 rcx, QWORD PTR [rax+184]
  0016c	e8 00 00 00 00	 call	 PyThread_release_lock
  00171	33 c0		 xor	 eax, eax
  00173	85 c0		 test	 eax, eax
  00175	75 d4		 jne	 SHORT $LN21@buffered_c@3

; 520  :     res = PyObject_CallMethodObjArgs((PyObject *)self, _PyIO_str_flush, NULL);

  00177	45 33 c0	 xor	 r8d, r8d
  0017a	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR _PyIO_str_flush
  00181	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00189	e8 00 00 00 00	 call	 PyObject_CallMethodObjArgs
  0018e	48 89 44 24 30	 mov	 QWORD PTR res$[rsp], rax

; 521  :     if (!ENTER_BUFFERED(self))

  00193	33 d2		 xor	 edx, edx
  00195	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0019d	48 8b 88 b8 00
	00 00		 mov	 rcx, QWORD PTR [rax+184]
  001a4	e8 00 00 00 00	 call	 PyThread_acquire_lock
  001a9	85 c0		 test	 eax, eax
  001ab	74 0a		 je	 SHORT $LN36@buffered_c@3
  001ad	c7 44 24 74 01
	00 00 00	 mov	 DWORD PTR tv143[rsp], 1
  001b5	eb 11		 jmp	 SHORT $LN37@buffered_c@3
$LN36@buffered_c@3:
  001b7	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  001bf	e8 00 00 00 00	 call	 _enter_buffered_busy
  001c4	89 44 24 74	 mov	 DWORD PTR tv143[rsp], eax
$LN37@buffered_c@3:
  001c8	83 7c 24 74 00	 cmp	 DWORD PTR tv143[rsp], 0
  001cd	74 1a		 je	 SHORT $LN17@buffered_c@3
  001cf	e8 00 00 00 00	 call	 PyThread_get_thread_ident
  001d4	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  001dc	89 81 c0 00 00
	00		 mov	 DWORD PTR [rcx+192], eax
  001e2	33 c0		 xor	 eax, eax
  001e4	83 f8 01	 cmp	 eax, 1
  001e7	75 07		 jne	 SHORT $LN18@buffered_c@3
$LN17@buffered_c@3:

; 522  :         return NULL;

  001e9	33 c0		 xor	 eax, eax
  001eb	e9 65 01 00 00	 jmp	 $LN32@buffered_c@3
$LN18@buffered_c@3:

; 523  :     if (res == NULL)

  001f0	48 83 7c 24 30
	00		 cmp	 QWORD PTR res$[rsp], 0
  001f6	75 16		 jne	 SHORT $LN16@buffered_c@3

; 524  :         PyErr_Fetch(&exc, &val, &tb);

  001f8	4c 8d 44 24 40	 lea	 r8, QWORD PTR tb$[rsp]
  001fd	48 8d 54 24 38	 lea	 rdx, QWORD PTR val$[rsp]
  00202	48 8d 4c 24 50	 lea	 rcx, QWORD PTR exc$[rsp]
  00207	e8 00 00 00 00	 call	 PyErr_Fetch

; 525  :     else

  0020c	eb 0a		 jmp	 SHORT $LN15@buffered_c@3
$LN16@buffered_c@3:

; 526  :         Py_DECREF(res);

  0020e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR res$[rsp]
  00213	e8 00 00 00 00	 call	 _Py_DecRef
$LN15@buffered_c@3:

; 527  : 
; 528  :     res = PyObject_CallMethodObjArgs(self->raw, _PyIO_str_close, NULL);

  00218	45 33 c0	 xor	 r8d, r8d
  0021b	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR _PyIO_str_close
  00222	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0022a	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  0022e	e8 00 00 00 00	 call	 PyObject_CallMethodObjArgs
  00233	48 89 44 24 30	 mov	 QWORD PTR res$[rsp], rax

; 529  : 
; 530  :     if (exc != NULL) {

  00238	48 83 7c 24 50
	00		 cmp	 QWORD PTR exc$[rsp], 0
  0023e	0f 84 e0 00 00
	00		 je	 $LN14@buffered_c@3

; 531  :         if (res != NULL) {

  00244	48 83 7c 24 30
	00		 cmp	 QWORD PTR res$[rsp], 0
  0024a	74 6b		 je	 SHORT $LN13@buffered_c@3
$LN12@buffered_c@3:

; 532  :             Py_CLEAR(res);

  0024c	48 83 7c 24 30
	00		 cmp	 QWORD PTR res$[rsp], 0
  00252	74 47		 je	 SHORT $LN9@buffered_c@3
  00254	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0025c	4c 8b 4c 24 30	 mov	 r9, QWORD PTR res$[rsp]
  00261	41 b8 14 02 00
	00		 mov	 r8d, 532		; 00000214H
  00267	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@DICDDJFP@?4?4?2Modules?2_io?2bufferedio?4c?$AA@
  0026e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@HOAMMMAE@buffered_close?$AA@
  00275	e8 00 00 00 00	 call	 _PyParallel_Guard
  0027a	85 c0		 test	 eax, eax
  0027c	75 1d		 jne	 SHORT $LN9@buffered_c@3
  0027e	48 8b 44 24 30	 mov	 rax, QWORD PTR res$[rsp]
  00283	48 89 44 24 60	 mov	 QWORD PTR _py_tmp$20860[rsp], rax
  00288	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR res$[rsp], 0
  00291	48 8b 4c 24 60	 mov	 rcx, QWORD PTR _py_tmp$20860[rsp]
  00296	e8 00 00 00 00	 call	 _Py_DecRef
$LN9@buffered_c@3:
  0029b	33 c0		 xor	 eax, eax
  0029d	85 c0		 test	 eax, eax
  0029f	75 ab		 jne	 SHORT $LN12@buffered_c@3

; 533  :             PyErr_Restore(exc, val, tb);

  002a1	4c 8b 44 24 40	 mov	 r8, QWORD PTR tb$[rsp]
  002a6	48 8b 54 24 38	 mov	 rdx, QWORD PTR val$[rsp]
  002ab	48 8b 4c 24 50	 mov	 rcx, QWORD PTR exc$[rsp]
  002b0	e8 00 00 00 00	 call	 PyErr_Restore

; 534  :         }
; 535  :         else {

  002b5	eb 6d		 jmp	 SHORT $LN8@buffered_c@3
$LN13@buffered_c@3:

; 536  :             PyObject *val2;
; 537  :             Py_DECREF(exc);

  002b7	48 8b 4c 24 50	 mov	 rcx, QWORD PTR exc$[rsp]
  002bc	e8 00 00 00 00	 call	 _Py_DecRef
$LN7@buffered_c@3:

; 538  :             Py_XDECREF(tb);

  002c1	48 83 7c 24 40
	00		 cmp	 QWORD PTR tb$[rsp], 0
  002c7	74 0a		 je	 SHORT $LN4@buffered_c@3
  002c9	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tb$[rsp]
  002ce	e8 00 00 00 00	 call	 _Py_DecRef
$LN4@buffered_c@3:
  002d3	33 c0		 xor	 eax, eax
  002d5	85 c0		 test	 eax, eax
  002d7	75 e8		 jne	 SHORT $LN7@buffered_c@3

; 539  :             PyErr_Fetch(&exc, &val2, &tb);

  002d9	4c 8d 44 24 40	 lea	 r8, QWORD PTR tb$[rsp]
  002de	48 8d 54 24 68	 lea	 rdx, QWORD PTR val2$20865[rsp]
  002e3	48 8d 4c 24 50	 lea	 rcx, QWORD PTR exc$[rsp]
  002e8	e8 00 00 00 00	 call	 PyErr_Fetch

; 540  :             PyErr_NormalizeException(&exc, &val2, &tb);

  002ed	4c 8d 44 24 40	 lea	 r8, QWORD PTR tb$[rsp]
  002f2	48 8d 54 24 68	 lea	 rdx, QWORD PTR val2$20865[rsp]
  002f7	48 8d 4c 24 50	 lea	 rcx, QWORD PTR exc$[rsp]
  002fc	e8 00 00 00 00	 call	 PyErr_NormalizeException

; 541  :             PyException_SetContext(val2, val);

  00301	48 8b 54 24 38	 mov	 rdx, QWORD PTR val$[rsp]
  00306	48 8b 4c 24 68	 mov	 rcx, QWORD PTR val2$20865[rsp]
  0030b	e8 00 00 00 00	 call	 PyException_SetContext

; 542  :             PyErr_Restore(exc, val2, tb);

  00310	4c 8b 44 24 40	 mov	 r8, QWORD PTR tb$[rsp]
  00315	48 8b 54 24 68	 mov	 rdx, QWORD PTR val2$20865[rsp]
  0031a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR exc$[rsp]
  0031f	e8 00 00 00 00	 call	 PyErr_Restore
$LN8@buffered_c@3:
$LN14@buffered_c@3:
$end$20829:
$LN3@buffered_c@3:

; 543  :         }
; 544  :     }
; 545  : 
; 546  : end:
; 547  :     LEAVE_BUFFERED(self)

  00324	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0032c	c7 80 c0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+192], 0
  00336	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0033e	48 8b 88 b8 00
	00 00		 mov	 rcx, QWORD PTR [rax+184]
  00345	e8 00 00 00 00	 call	 PyThread_release_lock
  0034a	33 c0		 xor	 eax, eax
  0034c	85 c0		 test	 eax, eax
  0034e	75 d4		 jne	 SHORT $LN3@buffered_c@3

; 548  :     return res;

  00350	48 8b 44 24 30	 mov	 rax, QWORD PTR res$[rsp]
$LN32@buffered_c@3:

; 549  : }

  00355	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  0035c	c3		 ret	 0
buffered_close ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BJ@KBALIPGJ@reentrant?5call?5inside?5?$CFR?$AA@ ; `string'
EXTRN	PyEval_RestoreThread:PROC
EXTRN	PyEval_SaveThread:PROC
EXTRN	PyExc_RuntimeError:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$_enter_buffered_busy DD imagerel _enter_buffered_busy
	DD	imagerel _enter_buffered_busy+109
	DD	imagerel $unwind$_enter_buffered_busy
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_enter_buffered_busy DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0BJ@KBALIPGJ@reentrant?5call?5inside?5?$CFR?$AA@
CONST	SEGMENT
??_C@_0BJ@KBALIPGJ@reentrant?5call?5inside?5?$CFR?$AA@ DB 'reentrant call'
	DB	' inside %R', 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _enter_buffered_busy
_TEXT	SEGMENT
_save$20646 = 32
self$ = 64
_enter_buffered_busy PROC				; COMDAT

; 290  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 291  :     if (self->owner == PyThread_get_thread_ident()) {

  00009	e8 00 00 00 00	 call	 PyThread_get_thread_ident
  0000e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  00013	8b 89 c0 00 00
	00		 mov	 ecx, DWORD PTR [rcx+192]
  00019	3b c8		 cmp	 ecx, eax
  0001b	75 1c		 jne	 SHORT $LN1@enter_buff

; 292  :         PyErr_Format(PyExc_RuntimeError,
; 293  :                      "reentrant call inside %R", self);

  0001d	4c 8b 44 24 40	 mov	 r8, QWORD PTR self$[rsp]
  00022	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@KBALIPGJ@reentrant?5call?5inside?5?$CFR?$AA@
  00029	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeError
  00030	e8 00 00 00 00	 call	 PyErr_Format

; 294  :         return 0;

  00035	33 c0		 xor	 eax, eax
  00037	eb 2f		 jmp	 SHORT $LN2@enter_buff
$LN1@enter_buff:

; 295  :     }
; 296  :     Py_BEGIN_ALLOW_THREADS

  00039	e8 00 00 00 00	 call	 PyEval_SaveThread
  0003e	48 89 44 24 20	 mov	 QWORD PTR _save$20646[rsp], rax

; 297  :     PyThread_acquire_lock(self->lock, 1);

  00043	ba 01 00 00 00	 mov	 edx, 1
  00048	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0004d	48 8b 88 b8 00
	00 00		 mov	 rcx, QWORD PTR [rax+184]
  00054	e8 00 00 00 00	 call	 PyThread_acquire_lock

; 298  :     Py_END_ALLOW_THREADS

  00059	48 8b 4c 24 20	 mov	 rcx, QWORD PTR _save$20646[rsp]
  0005e	e8 00 00 00 00	 call	 PyEval_RestoreThread

; 299  :     return 1;

  00063	b8 01 00 00 00	 mov	 eax, 1
$LN2@enter_buff:

; 300  : }

  00068	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0006c	c3		 ret	 0
_enter_buffered_busy ENDP
_TEXT	ENDS
EXTRN	PyObject_IsTrue:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$buffered_closed DD imagerel buffered_closed
	DD	imagerel buffered_closed+152
	DD	imagerel $unwind$buffered_closed
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$buffered_closed DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT buffered_closed
_TEXT	SEGMENT
res$ = 32
closed$ = 40
self$ = 64
buffered_closed PROC					; COMDAT

; 473  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 474  :     int closed;
; 475  :     PyObject *res;
; 476  :     CHECK_INITIALIZED_INT(self)

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0000e	83 78 68 00	 cmp	 DWORD PTR [rax+104], 0
  00012	7f 3a		 jg	 SHORT $LN4@buffered_c@4
  00014	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00019	83 78 6c 00	 cmp	 DWORD PTR [rax+108], 0
  0001d	74 15		 je	 SHORT $LN3@buffered_c@4
  0001f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@IOAMDFLF@raw?5stream?5has?5been?5detached?$AA@
  00026	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0002d	e8 00 00 00 00	 call	 PyErr_SetString
  00032	eb 13		 jmp	 SHORT $LN2@buffered_c@4
$LN3@buffered_c@4:
  00034	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
  0003b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00042	e8 00 00 00 00	 call	 PyErr_SetString
$LN2@buffered_c@4:
  00047	b8 ff ff ff ff	 mov	 eax, -1
  0004c	eb 45		 jmp	 SHORT $LN5@buffered_c@4
$LN4@buffered_c@4:

; 477  :     res = PyObject_GetAttr(self->raw, _PyIO_str_closed);

  0004e	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR _PyIO_str_closed
  00055	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0005a	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  0005e	e8 00 00 00 00	 call	 PyObject_GetAttr
  00063	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax

; 478  :     if (res == NULL)

  00068	48 83 7c 24 20
	00		 cmp	 QWORD PTR res$[rsp], 0
  0006e	75 07		 jne	 SHORT $LN1@buffered_c@4

; 479  :         return -1;

  00070	b8 ff ff ff ff	 mov	 eax, -1
  00075	eb 1c		 jmp	 SHORT $LN5@buffered_c@4
$LN1@buffered_c@4:

; 480  :     closed = PyObject_IsTrue(res);

  00077	48 8b 4c 24 20	 mov	 rcx, QWORD PTR res$[rsp]
  0007c	e8 00 00 00 00	 call	 PyObject_IsTrue
  00081	89 44 24 28	 mov	 DWORD PTR closed$[rsp], eax

; 481  :     Py_DECREF(res);

  00085	48 8b 4c 24 20	 mov	 rcx, QWORD PTR res$[rsp]
  0008a	e8 00 00 00 00	 call	 _Py_DecRef

; 482  :     return closed;

  0008f	8b 44 24 28	 mov	 eax, DWORD PTR closed$[rsp]
$LN5@buffered_c@4:

; 483  : }

  00093	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00097	c3		 ret	 0
buffered_closed ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$buffered_detach DD imagerel buffered_detach
	DD	imagerel buffered_detach+188
	DD	imagerel $unwind$buffered_detach
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$buffered_detach DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT buffered_detach
_TEXT	SEGMENT
res$ = 32
raw$ = 40
self$ = 64
args$ = 72
buffered_detach PROC					; COMDAT

; 555  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 556  :     PyObject *raw, *res;
; 557  :     CHECK_INITIALIZED(self)

  0000e	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00013	83 78 68 00	 cmp	 DWORD PTR [rax+104], 0
  00017	7f 37		 jg	 SHORT $LN4@buffered_d@3
  00019	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0001e	83 78 6c 00	 cmp	 DWORD PTR [rax+108], 0
  00022	74 15		 je	 SHORT $LN3@buffered_d@3
  00024	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@IOAMDFLF@raw?5stream?5has?5been?5detached?$AA@
  0002b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00032	e8 00 00 00 00	 call	 PyErr_SetString
  00037	eb 13		 jmp	 SHORT $LN2@buffered_d@3
$LN3@buffered_d@3:
  00039	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
  00040	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00047	e8 00 00 00 00	 call	 PyErr_SetString
$LN2@buffered_d@3:
  0004c	33 c0		 xor	 eax, eax
  0004e	eb 67		 jmp	 SHORT $LN5@buffered_d@3
$LN4@buffered_d@3:

; 558  :     res = PyObject_CallMethodObjArgs((PyObject *)self, _PyIO_str_flush, NULL);

  00050	45 33 c0	 xor	 r8d, r8d
  00053	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR _PyIO_str_flush
  0005a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  0005f	e8 00 00 00 00	 call	 PyObject_CallMethodObjArgs
  00064	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax

; 559  :     if (res == NULL)

  00069	48 83 7c 24 20
	00		 cmp	 QWORD PTR res$[rsp], 0
  0006f	75 04		 jne	 SHORT $LN1@buffered_d@3

; 560  :         return NULL;

  00071	33 c0		 xor	 eax, eax
  00073	eb 42		 jmp	 SHORT $LN5@buffered_d@3
$LN1@buffered_d@3:

; 561  :     Py_DECREF(res);

  00075	48 8b 4c 24 20	 mov	 rcx, QWORD PTR res$[rsp]
  0007a	e8 00 00 00 00	 call	 _Py_DecRef

; 562  :     raw = self->raw;

  0007f	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00084	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00088	48 89 44 24 28	 mov	 QWORD PTR raw$[rsp], rax

; 563  :     self->raw = NULL;

  0008d	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00092	48 c7 40 60 00
	00 00 00	 mov	 QWORD PTR [rax+96], 0

; 564  :     self->detached = 1;

  0009a	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0009f	c7 40 6c 01 00
	00 00		 mov	 DWORD PTR [rax+108], 1

; 565  :     self->ok = 0;

  000a6	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  000ab	c7 40 68 00 00
	00 00		 mov	 DWORD PTR [rax+104], 0

; 566  :     return raw;

  000b2	48 8b 44 24 28	 mov	 rax, QWORD PTR raw$[rsp]
$LN5@buffered_d@3:

; 567  : }

  000b7	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000bb	c3		 ret	 0
buffered_detach ENDP
_TEXT	ENDS
EXTRN	_PyIO_str_seekable:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$buffered_seekable DD imagerel buffered_seekable
	DD	imagerel buffered_seekable+109
	DD	imagerel $unwind$buffered_seekable
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$buffered_seekable DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT buffered_seekable
_TEXT	SEGMENT
self$ = 48
args$ = 56
buffered_seekable PROC					; COMDAT

; 573  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 574  :     CHECK_INITIALIZED(self)

  0000e	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00013	83 78 68 00	 cmp	 DWORD PTR [rax+104], 0
  00017	7f 37		 jg	 SHORT $LN3@buffered_s@3
  00019	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  0001e	83 78 6c 00	 cmp	 DWORD PTR [rax+108], 0
  00022	74 15		 je	 SHORT $LN2@buffered_s@3
  00024	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@IOAMDFLF@raw?5stream?5has?5been?5detached?$AA@
  0002b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00032	e8 00 00 00 00	 call	 PyErr_SetString
  00037	eb 13		 jmp	 SHORT $LN1@buffered_s@3
$LN2@buffered_s@3:
  00039	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
  00040	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00047	e8 00 00 00 00	 call	 PyErr_SetString
$LN1@buffered_s@3:
  0004c	33 c0		 xor	 eax, eax
  0004e	eb 18		 jmp	 SHORT $LN4@buffered_s@3
$LN3@buffered_s@3:

; 575  :     return PyObject_CallMethodObjArgs(self->raw, _PyIO_str_seekable, NULL);

  00050	45 33 c0	 xor	 r8d, r8d
  00053	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR _PyIO_str_seekable
  0005a	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  0005f	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00063	e8 00 00 00 00	 call	 PyObject_CallMethodObjArgs
$LN4@buffered_s@3:

; 576  : }

  00068	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006c	c3		 ret	 0
buffered_seekable ENDP
_TEXT	ENDS
EXTRN	_PyIO_str_readable:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$buffered_readable DD imagerel buffered_readable
	DD	imagerel buffered_readable+109
	DD	imagerel $unwind$buffered_readable
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$buffered_readable DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT buffered_readable
_TEXT	SEGMENT
self$ = 48
args$ = 56
buffered_readable PROC					; COMDAT

; 580  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 581  :     CHECK_INITIALIZED(self)

  0000e	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00013	83 78 68 00	 cmp	 DWORD PTR [rax+104], 0
  00017	7f 37		 jg	 SHORT $LN3@buffered_r
  00019	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  0001e	83 78 6c 00	 cmp	 DWORD PTR [rax+108], 0
  00022	74 15		 je	 SHORT $LN2@buffered_r
  00024	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@IOAMDFLF@raw?5stream?5has?5been?5detached?$AA@
  0002b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00032	e8 00 00 00 00	 call	 PyErr_SetString
  00037	eb 13		 jmp	 SHORT $LN1@buffered_r
$LN2@buffered_r:
  00039	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
  00040	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00047	e8 00 00 00 00	 call	 PyErr_SetString
$LN1@buffered_r:
  0004c	33 c0		 xor	 eax, eax
  0004e	eb 18		 jmp	 SHORT $LN4@buffered_r
$LN3@buffered_r:

; 582  :     return PyObject_CallMethodObjArgs(self->raw, _PyIO_str_readable, NULL);

  00050	45 33 c0	 xor	 r8d, r8d
  00053	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR _PyIO_str_readable
  0005a	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  0005f	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00063	e8 00 00 00 00	 call	 PyObject_CallMethodObjArgs
$LN4@buffered_r:

; 583  : }

  00068	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006c	c3		 ret	 0
buffered_readable ENDP
_TEXT	ENDS
EXTRN	_PyIO_str_writable:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$buffered_writable DD imagerel buffered_writable
	DD	imagerel buffered_writable+109
	DD	imagerel $unwind$buffered_writable
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$buffered_writable DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT buffered_writable
_TEXT	SEGMENT
self$ = 48
args$ = 56
buffered_writable PROC					; COMDAT

; 587  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 588  :     CHECK_INITIALIZED(self)

  0000e	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00013	83 78 68 00	 cmp	 DWORD PTR [rax+104], 0
  00017	7f 37		 jg	 SHORT $LN3@buffered_w
  00019	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  0001e	83 78 6c 00	 cmp	 DWORD PTR [rax+108], 0
  00022	74 15		 je	 SHORT $LN2@buffered_w
  00024	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@IOAMDFLF@raw?5stream?5has?5been?5detached?$AA@
  0002b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00032	e8 00 00 00 00	 call	 PyErr_SetString
  00037	eb 13		 jmp	 SHORT $LN1@buffered_w
$LN2@buffered_w:
  00039	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
  00040	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00047	e8 00 00 00 00	 call	 PyErr_SetString
$LN1@buffered_w:
  0004c	33 c0		 xor	 eax, eax
  0004e	eb 18		 jmp	 SHORT $LN4@buffered_w
$LN3@buffered_w:

; 589  :     return PyObject_CallMethodObjArgs(self->raw, _PyIO_str_writable, NULL);

  00050	45 33 c0	 xor	 r8d, r8d
  00053	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR _PyIO_str_writable
  0005a	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  0005f	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00063	e8 00 00 00 00	 call	 PyObject_CallMethodObjArgs
$LN4@buffered_w:

; 590  : }

  00068	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006c	c3		 ret	 0
buffered_writable ENDP
_TEXT	ENDS
EXTRN	_PyObject_GetAttrId:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$buffered_name_get DD imagerel buffered_name_get
	DD	imagerel buffered_name_get+128
	DD	imagerel $unwind$buffered_name_get
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$buffered_name_get DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT buffered_name_get
_TEXT	SEGMENT
self$ = 48
context$ = 56
buffered_name_get PROC					; COMDAT

; 594  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 595  :     CHECK_INITIALIZED(self)

  0000e	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00013	83 78 68 00	 cmp	 DWORD PTR [rax+104], 0
  00017	7f 37		 jg	 SHORT $LN3@buffered_n
  00019	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  0001e	83 78 6c 00	 cmp	 DWORD PTR [rax+108], 0
  00022	74 15		 je	 SHORT $LN2@buffered_n
  00024	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@IOAMDFLF@raw?5stream?5has?5been?5detached?$AA@
  0002b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00032	e8 00 00 00 00	 call	 PyErr_SetString
  00037	eb 13		 jmp	 SHORT $LN1@buffered_n
$LN2@buffered_n:
  00039	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
  00040	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00047	e8 00 00 00 00	 call	 PyErr_SetString
$LN1@buffered_n:
  0004c	33 c0		 xor	 eax, eax
  0004e	eb 2b		 jmp	 SHORT $LN4@buffered_n
$LN3@buffered_n:

; 596  :     return _PyObject_GetAttrId(self->raw, &PyId_name);

  00050	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_name
  00055	8b c0		 mov	 eax, eax
  00057	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0005d	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00066	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0006a	48 8b d0	 mov	 rdx, rax
  0006d	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00072	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00076	e8 00 00 00 00	 call	 _PyObject_GetAttrId
$LN4@buffered_n:

; 597  : }

  0007b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0007f	c3		 ret	 0
buffered_name_get ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$buffered_mode_get DD imagerel buffered_mode_get
	DD	imagerel buffered_mode_get+128
	DD	imagerel $unwind$buffered_mode_get
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$buffered_mode_get DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT buffered_mode_get
_TEXT	SEGMENT
self$ = 48
context$ = 56
buffered_mode_get PROC					; COMDAT

; 601  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 602  :     CHECK_INITIALIZED(self)

  0000e	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00013	83 78 68 00	 cmp	 DWORD PTR [rax+104], 0
  00017	7f 37		 jg	 SHORT $LN3@buffered_m
  00019	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  0001e	83 78 6c 00	 cmp	 DWORD PTR [rax+108], 0
  00022	74 15		 je	 SHORT $LN2@buffered_m
  00024	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@IOAMDFLF@raw?5stream?5has?5been?5detached?$AA@
  0002b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00032	e8 00 00 00 00	 call	 PyErr_SetString
  00037	eb 13		 jmp	 SHORT $LN1@buffered_m
$LN2@buffered_m:
  00039	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
  00040	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00047	e8 00 00 00 00	 call	 PyErr_SetString
$LN1@buffered_m:
  0004c	33 c0		 xor	 eax, eax
  0004e	eb 2b		 jmp	 SHORT $LN4@buffered_m
$LN3@buffered_m:

; 603  :     return _PyObject_GetAttrId(self->raw, &PyId_mode);

  00050	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_mode
  00055	8b c0		 mov	 eax, eax
  00057	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0005d	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00066	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0006a	48 8b d0	 mov	 rdx, rax
  0006d	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00072	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00076	e8 00 00 00 00	 call	 _PyObject_GetAttrId
$LN4@buffered_m:

; 604  : }

  0007b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0007f	c3		 ret	 0
buffered_mode_get ENDP
_TEXT	ENDS
EXTRN	_PyIO_str_fileno:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$buffered_fileno DD imagerel buffered_fileno
	DD	imagerel buffered_fileno+109
	DD	imagerel $unwind$buffered_fileno
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$buffered_fileno DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT buffered_fileno
_TEXT	SEGMENT
self$ = 48
args$ = 56
buffered_fileno PROC					; COMDAT

; 610  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 611  :     CHECK_INITIALIZED(self)

  0000e	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00013	83 78 68 00	 cmp	 DWORD PTR [rax+104], 0
  00017	7f 37		 jg	 SHORT $LN3@buffered_f
  00019	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  0001e	83 78 6c 00	 cmp	 DWORD PTR [rax+108], 0
  00022	74 15		 je	 SHORT $LN2@buffered_f
  00024	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@IOAMDFLF@raw?5stream?5has?5been?5detached?$AA@
  0002b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00032	e8 00 00 00 00	 call	 PyErr_SetString
  00037	eb 13		 jmp	 SHORT $LN1@buffered_f
$LN2@buffered_f:
  00039	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
  00040	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00047	e8 00 00 00 00	 call	 PyErr_SetString
$LN1@buffered_f:
  0004c	33 c0		 xor	 eax, eax
  0004e	eb 18		 jmp	 SHORT $LN4@buffered_f
$LN3@buffered_f:

; 612  :     return PyObject_CallMethodObjArgs(self->raw, _PyIO_str_fileno, NULL);

  00050	45 33 c0	 xor	 r8d, r8d
  00053	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR _PyIO_str_fileno
  0005a	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  0005f	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00063	e8 00 00 00 00	 call	 PyObject_CallMethodObjArgs
$LN4@buffered_f:

; 613  : }

  00068	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006c	c3		 ret	 0
buffered_fileno ENDP
_TEXT	ENDS
EXTRN	_PyIO_str_isatty:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$buffered_isatty DD imagerel buffered_isatty
	DD	imagerel buffered_isatty+109
	DD	imagerel $unwind$buffered_isatty
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$buffered_isatty DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT buffered_isatty
_TEXT	SEGMENT
self$ = 48
args$ = 56
buffered_isatty PROC					; COMDAT

; 617  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 618  :     CHECK_INITIALIZED(self)

  0000e	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00013	83 78 68 00	 cmp	 DWORD PTR [rax+104], 0
  00017	7f 37		 jg	 SHORT $LN3@buffered_i
  00019	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  0001e	83 78 6c 00	 cmp	 DWORD PTR [rax+108], 0
  00022	74 15		 je	 SHORT $LN2@buffered_i
  00024	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@IOAMDFLF@raw?5stream?5has?5been?5detached?$AA@
  0002b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00032	e8 00 00 00 00	 call	 PyErr_SetString
  00037	eb 13		 jmp	 SHORT $LN1@buffered_i
$LN2@buffered_i:
  00039	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
  00040	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00047	e8 00 00 00 00	 call	 PyErr_SetString
$LN1@buffered_i:
  0004c	33 c0		 xor	 eax, eax
  0004e	eb 18		 jmp	 SHORT $LN4@buffered_i
$LN3@buffered_i:

; 619  :     return PyObject_CallMethodObjArgs(self->raw, _PyIO_str_isatty, NULL);

  00050	45 33 c0	 xor	 r8d, r8d
  00053	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR _PyIO_str_isatty
  0005a	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  0005f	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00063	e8 00 00 00 00	 call	 PyObject_CallMethodObjArgs
$LN4@buffered_i:

; 620  : }

  00068	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006c	c3		 ret	 0
buffered_isatty ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BN@OMCOKFBI@cannot?5serialize?5?8?$CFs?8?5object?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$buffered_getstate DD imagerel buffered_getstate
	DD	imagerel buffered_getstate+53
	DD	imagerel $unwind$buffered_getstate
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$buffered_getstate DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT ??_C@_0BN@OMCOKFBI@cannot?5serialize?5?8?$CFs?8?5object?$AA@
CONST	SEGMENT
??_C@_0BN@OMCOKFBI@cannot?5serialize?5?8?$CFs?8?5object?$AA@ DB 'cannot s'
	DB	'erialize ''%s'' object', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT buffered_getstate
_TEXT	SEGMENT
self$ = 48
args$ = 56
buffered_getstate PROC					; COMDAT

; 626  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 627  :     PyErr_Format(PyExc_TypeError,
; 628  :                  "cannot serialize '%s' object", Py_TYPE(self)->tp_name);

  0000e	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00013	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00017	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  0001b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@OMCOKFBI@cannot?5serialize?5?8?$CFs?8?5object?$AA@
  00022	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00029	e8 00 00 00 00	 call	 PyErr_Format

; 629  :     return NULL;

  0002e	33 c0		 xor	 eax, eax

; 630  : }

  00030	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00034	c3		 ret	 0
buffered_getstate ENDP
_TEXT	ENDS
PUBLIC	??_C@_1CA@ODKMOCEJ@?$AAe?$AAn?$AAv?$AA_?$AAe?$AAr?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CE@HOMLKJMM@?$AAe?$AAi?$AAn?$AAt?$AAr?$AA_?$AAi?$AAn?$AAt?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ ; `string'
PUBLIC	_PyIO_trap_eintr
EXTRN	PyObject_RichCompareBool:PROC
EXTRN	PyErr_ExceptionMatches:PROC
EXTRN	PyExc_EnvironmentError:QWORD
EXTRN	PyLong_FromLong:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyIO_trap_eintr DD imagerel $LN12
	DD	imagerel $LN12+305
	DD	imagerel $unwind$_PyIO_trap_eintr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyIO_trap_eintr DD 010401H
	DD	08204H
xdata	ENDS
;	COMDAT ??_C@_1CA@ODKMOCEJ@?$AAe?$AAn?$AAv?$AA_?$AAe?$AAr?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
CONST	SEGMENT
??_C@_1CA@ODKMOCEJ@?$AAe?$AAn?$AAv?$AA_?$AAe?$AAr?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ DB 'e'
	DB	00H, 'n', 00H, 'v', 00H, '_', 00H, 'e', 00H, 'r', 00H, 'r', 00H
	DB	' ', 00H, '!', 00H, '=', 00H, ' ', 00H, 'N', 00H, 'U', 00H, 'L'
	DB	00H, 'L', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1CE@HOMLKJMM@?$AAe?$AAi?$AAn?$AAt?$AAr?$AA_?$AAi?$AAn?$AAt?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
CONST	SEGMENT
??_C@_1CE@HOMLKJMM@?$AAe?$AAi?$AAn?$AAt?$AAr?$AA_?$AAi?$AAn?$AAt?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ DB 'e'
	DB	00H, 'i', 00H, 'n', 00H, 't', 00H, 'r', 00H, '_', 00H, 'i', 00H
	DB	'n', 00H, 't', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, 'N'
	DB	00H, 'U', 00H, 'L', 00H, 'L', 00H, 00H, 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PyIO_trap_eintr
_TEXT	SEGMENT
val$ = 32
typ$ = 40
tb$ = 48
env_err$ = 56
_PyIO_trap_eintr PROC					; COMDAT

; 786  : {

$LN12:
  00000	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 787  :     static PyObject *eintr_int = NULL;
; 788  :     PyObject *typ, *val, *tb;
; 789  :     PyEnvironmentErrorObject *env_err;
; 790  : 
; 791  :     if (eintr_int == NULL) {

  00004	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?eintr_int@?1??_PyIO_trap_eintr@@9@9, 0
  0000c	75 37		 jne	 SHORT $LN7@PyIO_trap_

; 792  :         eintr_int = PyLong_FromLong(EINTR);

  0000e	b9 04 00 00 00	 mov	 ecx, 4
  00013	e8 00 00 00 00	 call	 PyLong_FromLong
  00018	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?eintr_int@?1??_PyIO_trap_eintr@@9@9, rax

; 793  :         assert(eintr_int != NULL);

  0001f	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?eintr_int@?1??_PyIO_trap_eintr@@9@9, 0
  00027	75 1c		 jne	 SHORT $LN10@PyIO_trap_
  00029	41 b8 19 03 00
	00		 mov	 r8d, 793		; 00000319H
  0002f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DI@KBAIHMCO@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AAe?$AAd?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  00036	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CE@HOMLKJMM@?$AAe?$AAi?$AAn?$AAt?$AAr?$AA_?$AAi?$AAn?$AAt?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
  0003d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00043	33 c0		 xor	 eax, eax
$LN10@PyIO_trap_:
$LN7@PyIO_trap_:

; 794  :     }
; 795  :     if (!PyErr_ExceptionMatches(PyExc_EnvironmentError))

  00045	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_EnvironmentError
  0004c	e8 00 00 00 00	 call	 PyErr_ExceptionMatches
  00051	85 c0		 test	 eax, eax
  00053	75 07		 jne	 SHORT $LN6@PyIO_trap_

; 796  :         return 0;

  00055	33 c0		 xor	 eax, eax
  00057	e9 d0 00 00 00	 jmp	 $LN8@PyIO_trap_
$LN6@PyIO_trap_:

; 797  :     PyErr_Fetch(&typ, &val, &tb);

  0005c	4c 8d 44 24 30	 lea	 r8, QWORD PTR tb$[rsp]
  00061	48 8d 54 24 20	 lea	 rdx, QWORD PTR val$[rsp]
  00066	48 8d 4c 24 28	 lea	 rcx, QWORD PTR typ$[rsp]
  0006b	e8 00 00 00 00	 call	 PyErr_Fetch

; 798  :     PyErr_NormalizeException(&typ, &val, &tb);

  00070	4c 8d 44 24 30	 lea	 r8, QWORD PTR tb$[rsp]
  00075	48 8d 54 24 20	 lea	 rdx, QWORD PTR val$[rsp]
  0007a	48 8d 4c 24 28	 lea	 rcx, QWORD PTR typ$[rsp]
  0007f	e8 00 00 00 00	 call	 PyErr_NormalizeException

; 799  :     env_err = (PyEnvironmentErrorObject *) val;

  00084	48 8b 44 24 20	 mov	 rax, QWORD PTR val$[rsp]
  00089	48 89 44 24 38	 mov	 QWORD PTR env_err$[rsp], rax

; 800  :     assert(env_err != NULL);

  0008e	48 83 7c 24 38
	00		 cmp	 QWORD PTR env_err$[rsp], 0
  00094	75 1c		 jne	 SHORT $LN11@PyIO_trap_
  00096	41 b8 20 03 00
	00		 mov	 r8d, 800		; 00000320H
  0009c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DI@KBAIHMCO@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AAe?$AAd?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  000a3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CA@ODKMOCEJ@?$AAe?$AAn?$AAv?$AA_?$AAe?$AAr?$AAr?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
  000aa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000b0	33 c0		 xor	 eax, eax
$LN11@PyIO_trap_:

; 801  :     if (env_err->myerrno != NULL &&
; 802  :         PyObject_RichCompareBool(env_err->myerrno, eintr_int, Py_EQ) > 0) {

  000b2	48 8b 44 24 38	 mov	 rax, QWORD PTR env_err$[rsp]
  000b7	48 83 b8 90 00
	00 00 00	 cmp	 QWORD PTR [rax+144], 0
  000bf	74 55		 je	 SHORT $LN5@PyIO_trap_
  000c1	41 b8 02 00 00
	00		 mov	 r8d, 2
  000c7	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR ?eintr_int@?1??_PyIO_trap_eintr@@9@9
  000ce	48 8b 44 24 38	 mov	 rax, QWORD PTR env_err$[rsp]
  000d3	48 8b 88 90 00
	00 00		 mov	 rcx, QWORD PTR [rax+144]
  000da	e8 00 00 00 00	 call	 PyObject_RichCompareBool
  000df	85 c0		 test	 eax, eax
  000e1	7e 33		 jle	 SHORT $LN5@PyIO_trap_

; 803  :         Py_DECREF(typ);

  000e3	48 8b 4c 24 28	 mov	 rcx, QWORD PTR typ$[rsp]
  000e8	e8 00 00 00 00	 call	 _Py_DecRef

; 804  :         Py_DECREF(val);

  000ed	48 8b 4c 24 20	 mov	 rcx, QWORD PTR val$[rsp]
  000f2	e8 00 00 00 00	 call	 _Py_DecRef
$LN4@PyIO_trap_:

; 805  :         Py_XDECREF(tb);

  000f7	48 83 7c 24 30
	00		 cmp	 QWORD PTR tb$[rsp], 0
  000fd	74 0a		 je	 SHORT $LN1@PyIO_trap_
  000ff	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tb$[rsp]
  00104	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@PyIO_trap_:
  00109	33 c0		 xor	 eax, eax
  0010b	85 c0		 test	 eax, eax
  0010d	75 e8		 jne	 SHORT $LN4@PyIO_trap_

; 806  :         return 1;

  0010f	b8 01 00 00 00	 mov	 eax, 1
  00114	eb 16		 jmp	 SHORT $LN8@PyIO_trap_
$LN5@PyIO_trap_:

; 807  :     }
; 808  :     /* This silences any error set by PyObject_RichCompareBool() */
; 809  :     PyErr_Restore(typ, val, tb);

  00116	4c 8b 44 24 30	 mov	 r8, QWORD PTR tb$[rsp]
  0011b	48 8b 54 24 20	 mov	 rdx, QWORD PTR val$[rsp]
  00120	48 8b 4c 24 28	 mov	 rcx, QWORD PTR typ$[rsp]
  00125	e8 00 00 00 00	 call	 PyErr_Restore

; 810  :     return 0;

  0012a	33 c0		 xor	 eax, eax
$LN8@PyIO_trap_:

; 811  : }

  0012c	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00130	c3		 ret	 0
_PyIO_trap_eintr ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BF@OEOPNLAF@flush?5of?5closed?5file?$AA@	; `string'
EXTRN	_PyFileIO_closed:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$buffered_flush DD imagerel buffered_flush
	DD	imagerel buffered_flush+305
	DD	imagerel $unwind$buffered_flush
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$buffered_flush DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT ??_C@_0BF@OEOPNLAF@flush?5of?5closed?5file?$AA@
CONST	SEGMENT
??_C@_0BF@OEOPNLAF@flush?5of?5closed?5file?$AA@ DB 'flush of closed file', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT buffered_flush
_TEXT	SEGMENT
res$ = 32
tv79 = 40
tv90 = 44
self$ = 64
args$ = 72
buffered_flush PROC					; COMDAT

; 841  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 842  :     PyObject *res;
; 843  : 
; 844  :     CHECK_INITIALIZED(self)

  0000e	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00013	83 78 68 00	 cmp	 DWORD PTR [rax+104], 0
  00017	7f 3a		 jg	 SHORT $LN9@buffered_f@2
  00019	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0001e	83 78 6c 00	 cmp	 DWORD PTR [rax+108], 0
  00022	74 15		 je	 SHORT $LN8@buffered_f@2
  00024	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@IOAMDFLF@raw?5stream?5has?5been?5detached?$AA@
  0002b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00032	e8 00 00 00 00	 call	 PyErr_SetString
  00037	eb 13		 jmp	 SHORT $LN7@buffered_f@2
$LN8@buffered_f@2:
  00039	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
  00040	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00047	e8 00 00 00 00	 call	 PyErr_SetString
$LN7@buffered_f@2:
  0004c	33 c0		 xor	 eax, eax
  0004e	e9 d9 00 00 00	 jmp	 $LN10@buffered_f@2
$LN9@buffered_f@2:

; 845  :     CHECK_CLOSED(self, "flush of closed file")

  00053	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00058	83 78 7c 00	 cmp	 DWORD PTR [rax+124], 0
  0005c	74 14		 je	 SHORT $LN12@buffered_f@2
  0005e	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00063	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00067	e8 00 00 00 00	 call	 _PyFileIO_closed
  0006c	89 44 24 28	 mov	 DWORD PTR tv79[rsp], eax
  00070	eb 0e		 jmp	 SHORT $LN13@buffered_f@2
$LN12@buffered_f@2:
  00072	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  00077	e8 00 00 00 00	 call	 buffered_closed
  0007c	89 44 24 28	 mov	 DWORD PTR tv79[rsp], eax
$LN13@buffered_f@2:
  00080	83 7c 24 28 00	 cmp	 DWORD PTR tv79[rsp], 0
  00085	74 1a		 je	 SHORT $LN6@buffered_f@2
  00087	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BF@OEOPNLAF@flush?5of?5closed?5file?$AA@
  0008e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00095	e8 00 00 00 00	 call	 PyErr_SetString
  0009a	33 c0		 xor	 eax, eax
  0009c	e9 8b 00 00 00	 jmp	 $LN10@buffered_f@2
$LN6@buffered_f@2:

; 846  : 
; 847  :     if (!ENTER_BUFFERED(self))

  000a1	33 d2		 xor	 edx, edx
  000a3	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  000a8	48 8b 88 b8 00
	00 00		 mov	 rcx, QWORD PTR [rax+184]
  000af	e8 00 00 00 00	 call	 PyThread_acquire_lock
  000b4	85 c0		 test	 eax, eax
  000b6	74 0a		 je	 SHORT $LN14@buffered_f@2
  000b8	c7 44 24 2c 01
	00 00 00	 mov	 DWORD PTR tv90[rsp], 1
  000c0	eb 0e		 jmp	 SHORT $LN15@buffered_f@2
$LN14@buffered_f@2:
  000c2	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  000c7	e8 00 00 00 00	 call	 _enter_buffered_busy
  000cc	89 44 24 2c	 mov	 DWORD PTR tv90[rsp], eax
$LN15@buffered_f@2:
  000d0	83 7c 24 2c 00	 cmp	 DWORD PTR tv90[rsp], 0
  000d5	74 17		 je	 SHORT $LN4@buffered_f@2
  000d7	e8 00 00 00 00	 call	 PyThread_get_thread_ident
  000dc	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  000e1	89 81 c0 00 00
	00		 mov	 DWORD PTR [rcx+192], eax
  000e7	33 c0		 xor	 eax, eax
  000e9	83 f8 01	 cmp	 eax, 1
  000ec	75 04		 jne	 SHORT $LN5@buffered_f@2
$LN4@buffered_f@2:

; 848  :         return NULL;

  000ee	33 c0		 xor	 eax, eax
  000f0	eb 3a		 jmp	 SHORT $LN10@buffered_f@2
$LN5@buffered_f@2:

; 849  :     res = buffered_flush_and_rewind_unlocked(self);

  000f2	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  000f7	e8 00 00 00 00	 call	 buffered_flush_and_rewind_unlocked
  000fc	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax
$LN3@buffered_f@2:

; 850  :     LEAVE_BUFFERED(self)

  00101	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00106	c7 80 c0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+192], 0
  00110	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00115	48 8b 88 b8 00
	00 00		 mov	 rcx, QWORD PTR [rax+184]
  0011c	e8 00 00 00 00	 call	 PyThread_release_lock
  00121	33 c0		 xor	 eax, eax
  00123	85 c0		 test	 eax, eax
  00125	75 da		 jne	 SHORT $LN3@buffered_f@2

; 851  : 
; 852  :     return res;

  00127	48 8b 44 24 20	 mov	 rax, QWORD PTR res$[rsp]
$LN10@buffered_f@2:

; 853  : }

  0012c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00130	c3		 ret	 0
buffered_flush ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$buffered_flush_and_rewind_unlocked DD imagerel buffered_flush_and_rewind_unlocked
	DD	imagerel buffered_flush_and_rewind_unlocked+252
	DD	imagerel $unwind$buffered_flush_and_rewind_unlocked
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$buffered_flush_and_rewind_unlocked DD 010901H
	DD	08209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT buffered_flush_and_rewind_unlocked
_TEXT	SEGMENT
res$ = 32
n$21134 = 40
tv85 = 48
self$ = 80
buffered_flush_and_rewind_unlocked PROC			; COMDAT

; 819  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 820  :     PyObject *res;
; 821  : 
; 822  :     res = _bufferedwriter_flush_unlocked(self);

  00009	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  0000e	e8 00 00 00 00	 call	 _bufferedwriter_flush_unlocked
  00013	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax

; 823  :     if (res == NULL)

  00018	48 83 7c 24 20
	00		 cmp	 QWORD PTR res$[rsp], 0
  0001e	75 07		 jne	 SHORT $LN3@buffered_f@3

; 824  :         return NULL;

  00020	33 c0		 xor	 eax, eax
  00022	e9 d0 00 00 00	 jmp	 $LN4@buffered_f@3
$LN3@buffered_f@3:

; 825  :     Py_DECREF(res);

  00027	48 8b 4c 24 20	 mov	 rcx, QWORD PTR res$[rsp]
  0002c	e8 00 00 00 00	 call	 _Py_DecRef

; 826  : 
; 827  :     if (self->readable) {

  00031	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00036	83 78 70 00	 cmp	 DWORD PTR [rax+112], 0
  0003a	0f 84 a4 00 00
	00		 je	 $LN2@buffered_f@3

; 828  :         /* Rewind the raw stream so that its position corresponds to
; 829  :            the current logical position. */
; 830  :         Py_off_t n;
; 831  :         n = _buffered_raw_seek(self, -RAW_OFFSET(self), 1);

  00040	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00045	83 78 70 00	 cmp	 DWORD PTR [rax+112], 0
  00049	74 0f		 je	 SHORT $LN6@buffered_f@3
  0004b	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00050	48 83 b8 a0 00
	00 00 ff	 cmp	 QWORD PTR [rax+160], -1
  00058	75 1a		 jne	 SHORT $LN8@buffered_f@3
$LN6@buffered_f@3:
  0005a	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  0005f	83 78 74 00	 cmp	 DWORD PTR [rax+116], 0
  00063	74 40		 je	 SHORT $LN7@buffered_f@3
  00065	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  0006a	48 83 b8 b0 00
	00 00 ff	 cmp	 QWORD PTR [rax+176], -1
  00072	74 31		 je	 SHORT $LN7@buffered_f@3
$LN8@buffered_f@3:
  00074	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00079	48 83 b8 98 00
	00 00 00	 cmp	 QWORD PTR [rax+152], 0
  00081	7c 22		 jl	 SHORT $LN7@buffered_f@3
  00083	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00088	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  0008d	48 8b 89 90 00
	00 00		 mov	 rcx, QWORD PTR [rcx+144]
  00094	48 8b 80 98 00
	00 00		 mov	 rax, QWORD PTR [rax+152]
  0009b	48 2b c1	 sub	 rax, rcx
  0009e	48 89 44 24 30	 mov	 QWORD PTR tv85[rsp], rax
  000a3	eb 09		 jmp	 SHORT $LN9@buffered_f@3
$LN7@buffered_f@3:
  000a5	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR tv85[rsp], 0
$LN9@buffered_f@3:
  000ae	48 8b 44 24 30	 mov	 rax, QWORD PTR tv85[rsp]
  000b3	48 f7 d8	 neg	 rax
  000b6	41 b8 01 00 00
	00		 mov	 r8d, 1
  000bc	48 8b d0	 mov	 rdx, rax
  000bf	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  000c4	e8 00 00 00 00	 call	 _buffered_raw_seek
  000c9	48 89 44 24 28	 mov	 QWORD PTR n$21134[rsp], rax

; 832  :         _bufferedreader_reset_buf(self);

  000ce	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  000d3	e8 00 00 00 00	 call	 _bufferedreader_reset_buf

; 833  :         if (n == -1)

  000d8	48 83 7c 24 28
	ff		 cmp	 QWORD PTR n$21134[rsp], -1
  000de	75 04		 jne	 SHORT $LN1@buffered_f@3

; 834  :             return NULL;

  000e0	33 c0		 xor	 eax, eax
  000e2	eb 13		 jmp	 SHORT $LN4@buffered_f@3
$LN1@buffered_f@3:
$LN2@buffered_f@3:

; 835  :     }
; 836  :     Py_RETURN_NONE;

  000e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  000eb	e8 00 00 00 00	 call	 _Py_IncRef
  000f0	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
$LN4@buffered_f@3:

; 837  : }

  000f7	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000fb	c3		 ret	 0
buffered_flush_and_rewind_unlocked ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CK@EGGHLFCO@Raw?5stream?5returned?5invalid?5posi@ ; `string'
EXTRN	PyExc_IOError:QWORD
EXTRN	PyErr_Occurred:PROC
EXTRN	PyNumber_AsOff_t:PROC
EXTRN	_PyIO_str_seek:QWORD
EXTRN	PyLong_FromLongLong:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_buffered_raw_seek DD imagerel _buffered_raw_seek
	DD	imagerel _buffered_raw_seek+290
	DD	imagerel $unwind$_buffered_raw_seek
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_buffered_raw_seek DD 011301H
	DD	0a213H
xdata	ENDS
;	COMDAT ??_C@_0CK@EGGHLFCO@Raw?5stream?5returned?5invalid?5posi@
CONST	SEGMENT
??_C@_0CK@EGGHLFCO@Raw?5stream?5returned?5invalid?5posi@ DB 'Raw stream r'
	DB	'eturned invalid position %lld', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _buffered_raw_seek
_TEXT	SEGMENT
posobj$ = 48
res$ = 56
n$ = 64
whenceobj$ = 72
self$ = 96
target$ = 104
whence$ = 112
_buffered_raw_seek PROC					; COMDAT

; 710  : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 711  :     PyObject *res, *posobj, *whenceobj;
; 712  :     Py_off_t n;
; 713  : 
; 714  :     posobj = PyLong_FromOff_t(target);

  00013	48 8b 4c 24 68	 mov	 rcx, QWORD PTR target$[rsp]
  00018	e8 00 00 00 00	 call	 PyLong_FromLongLong
  0001d	48 89 44 24 30	 mov	 QWORD PTR posobj$[rsp], rax

; 715  :     if (posobj == NULL)

  00022	48 83 7c 24 30
	00		 cmp	 QWORD PTR posobj$[rsp], 0
  00028	75 0c		 jne	 SHORT $LN5@buffered_r@2

; 716  :         return -1;

  0002a	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1
  00031	e9 e7 00 00 00	 jmp	 $LN6@buffered_r@2
$LN5@buffered_r@2:

; 717  :     whenceobj = PyLong_FromLong(whence);

  00036	8b 4c 24 70	 mov	 ecx, DWORD PTR whence$[rsp]
  0003a	e8 00 00 00 00	 call	 PyLong_FromLong
  0003f	48 89 44 24 48	 mov	 QWORD PTR whenceobj$[rsp], rax

; 718  :     if (whenceobj == NULL) {

  00044	48 83 7c 24 48
	00		 cmp	 QWORD PTR whenceobj$[rsp], 0
  0004a	75 16		 jne	 SHORT $LN4@buffered_r@2

; 719  :         Py_DECREF(posobj);

  0004c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR posobj$[rsp]
  00051	e8 00 00 00 00	 call	 _Py_DecRef

; 720  :         return -1;

  00056	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1
  0005d	e9 bb 00 00 00	 jmp	 $LN6@buffered_r@2
$LN4@buffered_r@2:

; 721  :     }
; 722  :     res = PyObject_CallMethodObjArgs(self->raw, _PyIO_str_seek,
; 723  :                                      posobj, whenceobj, NULL);

  00062	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  0006b	4c 8b 4c 24 48	 mov	 r9, QWORD PTR whenceobj$[rsp]
  00070	4c 8b 44 24 30	 mov	 r8, QWORD PTR posobj$[rsp]
  00075	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR _PyIO_str_seek
  0007c	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00081	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00085	e8 00 00 00 00	 call	 PyObject_CallMethodObjArgs
  0008a	48 89 44 24 38	 mov	 QWORD PTR res$[rsp], rax

; 724  :     Py_DECREF(posobj);

  0008f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR posobj$[rsp]
  00094	e8 00 00 00 00	 call	 _Py_DecRef

; 725  :     Py_DECREF(whenceobj);

  00099	48 8b 4c 24 48	 mov	 rcx, QWORD PTR whenceobj$[rsp]
  0009e	e8 00 00 00 00	 call	 _Py_DecRef

; 726  :     if (res == NULL)

  000a3	48 83 7c 24 38
	00		 cmp	 QWORD PTR res$[rsp], 0
  000a9	75 09		 jne	 SHORT $LN3@buffered_r@2

; 727  :         return -1;

  000ab	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1
  000b2	eb 69		 jmp	 SHORT $LN6@buffered_r@2
$LN3@buffered_r@2:

; 728  :     n = PyNumber_AsOff_t(res, PyExc_ValueError);

  000b4	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR PyExc_ValueError
  000bb	48 8b 4c 24 38	 mov	 rcx, QWORD PTR res$[rsp]
  000c0	e8 00 00 00 00	 call	 PyNumber_AsOff_t
  000c5	48 89 44 24 40	 mov	 QWORD PTR n$[rsp], rax

; 729  :     Py_DECREF(res);

  000ca	48 8b 4c 24 38	 mov	 rcx, QWORD PTR res$[rsp]
  000cf	e8 00 00 00 00	 call	 _Py_DecRef

; 730  :     if (n < 0) {

  000d4	48 83 7c 24 40
	00		 cmp	 QWORD PTR n$[rsp], 0
  000da	7d 2b		 jge	 SHORT $LN2@buffered_r@2

; 731  :         if (!PyErr_Occurred())

  000dc	e8 00 00 00 00	 call	 PyErr_Occurred
  000e1	48 85 c0	 test	 rax, rax
  000e4	75 18		 jne	 SHORT $LN1@buffered_r@2

; 732  :             PyErr_Format(PyExc_IOError,
; 733  :                          "Raw stream returned invalid position %" PY_PRIdOFF,
; 734  :                          (PY_OFF_T_COMPAT)n);

  000e6	4c 8b 44 24 40	 mov	 r8, QWORD PTR n$[rsp]
  000eb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CK@EGGHLFCO@Raw?5stream?5returned?5invalid?5posi@
  000f2	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_IOError
  000f9	e8 00 00 00 00	 call	 PyErr_Format
$LN1@buffered_r@2:

; 735  :         return -1;

  000fe	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1
  00105	eb 16		 jmp	 SHORT $LN6@buffered_r@2
$LN2@buffered_r@2:

; 736  :     }
; 737  :     self->abs_pos = n;

  00107	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  0010c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR n$[rsp]
  00111	48 89 88 80 00
	00 00		 mov	 QWORD PTR [rax+128], rcx

; 738  :     return n;

  00118	48 8b 44 24 40	 mov	 rax, QWORD PTR n$[rsp]
$LN6@buffered_r@2:

; 739  : }

  0011d	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00121	c3		 ret	 0
_buffered_raw_seek ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@FFKMJDIN@buffered_peek?$AA@		; `string'
PUBLIC	??_C@_07CCHFOLGD@?$HMn?3peek?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$buffered_peek DD imagerel buffered_peek
	DD	imagerel buffered_peek+402
	DD	imagerel $unwind$buffered_peek
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$buffered_peek DD 010e01H
	DD	0a20eH
xdata	ENDS
;	COMDAT ??_C@_0O@FFKMJDIN@buffered_peek?$AA@
CONST	SEGMENT
??_C@_0O@FFKMJDIN@buffered_peek?$AA@ DB 'buffered_peek', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07CCHFOLGD@?$HMn?3peek?$AA@
CONST	SEGMENT
??_C@_07CCHFOLGD@?$HMn?3peek?$AA@ DB '|n:peek', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT buffered_peek
_TEXT	SEGMENT
res$ = 48
n$ = 56
_py_tmp$21186 = 64
tv84 = 72
self$ = 96
args$ = 104
buffered_peek PROC					; COMDAT

; 857  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 858  :     Py_ssize_t n = 0;

  0000e	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR n$[rsp], 0

; 859  :     PyObject *res = NULL;

  00017	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR res$[rsp], 0

; 860  : 
; 861  :     CHECK_INITIALIZED(self)

  00020	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00025	83 78 68 00	 cmp	 DWORD PTR [rax+104], 0
  00029	7f 3a		 jg	 SHORT $LN15@buffered_p
  0002b	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00030	83 78 6c 00	 cmp	 DWORD PTR [rax+108], 0
  00034	74 15		 je	 SHORT $LN14@buffered_p
  00036	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@IOAMDFLF@raw?5stream?5has?5been?5detached?$AA@
  0003d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00044	e8 00 00 00 00	 call	 PyErr_SetString
  00049	eb 13		 jmp	 SHORT $LN13@buffered_p
$LN14@buffered_p:
  0004b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
  00052	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00059	e8 00 00 00 00	 call	 PyErr_SetString
$LN13@buffered_p:
  0005e	33 c0		 xor	 eax, eax
  00060	e9 28 01 00 00	 jmp	 $LN16@buffered_p
$LN15@buffered_p:

; 862  :     if (!PyArg_ParseTuple(args, "|n:peek", &n)) {

  00065	4c 8d 44 24 38	 lea	 r8, QWORD PTR n$[rsp]
  0006a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07CCHFOLGD@?$HMn?3peek?$AA@
  00071	48 8b 4c 24 68	 mov	 rcx, QWORD PTR args$[rsp]
  00076	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  0007b	85 c0		 test	 eax, eax
  0007d	75 07		 jne	 SHORT $LN12@buffered_p

; 863  :         return NULL;

  0007f	33 c0		 xor	 eax, eax
  00081	e9 07 01 00 00	 jmp	 $LN16@buffered_p
$LN12@buffered_p:

; 864  :     }
; 865  : 
; 866  :     if (!ENTER_BUFFERED(self))

  00086	33 d2		 xor	 edx, edx
  00088	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  0008d	48 8b 88 b8 00
	00 00		 mov	 rcx, QWORD PTR [rax+184]
  00094	e8 00 00 00 00	 call	 PyThread_acquire_lock
  00099	85 c0		 test	 eax, eax
  0009b	74 0a		 je	 SHORT $LN18@buffered_p
  0009d	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv84[rsp], 1
  000a5	eb 0e		 jmp	 SHORT $LN19@buffered_p
$LN18@buffered_p:
  000a7	48 8b 4c 24 60	 mov	 rcx, QWORD PTR self$[rsp]
  000ac	e8 00 00 00 00	 call	 _enter_buffered_busy
  000b1	89 44 24 48	 mov	 DWORD PTR tv84[rsp], eax
$LN19@buffered_p:
  000b5	83 7c 24 48 00	 cmp	 DWORD PTR tv84[rsp], 0
  000ba	74 17		 je	 SHORT $LN10@buffered_p
  000bc	e8 00 00 00 00	 call	 PyThread_get_thread_ident
  000c1	48 8b 4c 24 60	 mov	 rcx, QWORD PTR self$[rsp]
  000c6	89 81 c0 00 00
	00		 mov	 DWORD PTR [rcx+192], eax
  000cc	33 c0		 xor	 eax, eax
  000ce	83 f8 01	 cmp	 eax, 1
  000d1	75 07		 jne	 SHORT $LN11@buffered_p
$LN10@buffered_p:

; 867  :         return NULL;

  000d3	33 c0		 xor	 eax, eax
  000d5	e9 b3 00 00 00	 jmp	 $LN16@buffered_p
$LN11@buffered_p:

; 868  : 
; 869  :     if (self->writable) {

  000da	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  000df	83 78 74 00	 cmp	 DWORD PTR [rax+116], 0
  000e3	74 6e		 je	 SHORT $LN9@buffered_p

; 870  :         res = buffered_flush_and_rewind_unlocked(self);

  000e5	48 8b 4c 24 60	 mov	 rcx, QWORD PTR self$[rsp]
  000ea	e8 00 00 00 00	 call	 buffered_flush_and_rewind_unlocked
  000ef	48 89 44 24 30	 mov	 QWORD PTR res$[rsp], rax

; 871  :         if (res == NULL)

  000f4	48 83 7c 24 30
	00		 cmp	 QWORD PTR res$[rsp], 0
  000fa	75 02		 jne	 SHORT $LN8@buffered_p

; 872  :             goto end;

  000fc	eb 64		 jmp	 SHORT $end$21180
$LN8@buffered_p:
$LN7@buffered_p:

; 873  :         Py_CLEAR(res);

  000fe	48 83 7c 24 30
	00		 cmp	 QWORD PTR res$[rsp], 0
  00104	74 47		 je	 SHORT $LN4@buffered_p
  00106	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0010e	4c 8b 4c 24 30	 mov	 r9, QWORD PTR res$[rsp]
  00113	41 b8 69 03 00
	00		 mov	 r8d, 873		; 00000369H
  00119	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@DICDDJFP@?4?4?2Modules?2_io?2bufferedio?4c?$AA@
  00120	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@FFKMJDIN@buffered_peek?$AA@
  00127	e8 00 00 00 00	 call	 _PyParallel_Guard
  0012c	85 c0		 test	 eax, eax
  0012e	75 1d		 jne	 SHORT $LN4@buffered_p
  00130	48 8b 44 24 30	 mov	 rax, QWORD PTR res$[rsp]
  00135	48 89 44 24 40	 mov	 QWORD PTR _py_tmp$21186[rsp], rax
  0013a	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR res$[rsp], 0
  00143	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _py_tmp$21186[rsp]
  00148	e8 00 00 00 00	 call	 _Py_DecRef
$LN4@buffered_p:
  0014d	33 c0		 xor	 eax, eax
  0014f	85 c0		 test	 eax, eax
  00151	75 ab		 jne	 SHORT $LN7@buffered_p
$LN9@buffered_p:

; 874  :     }
; 875  :     res = _bufferedreader_peek_unlocked(self);

  00153	48 8b 4c 24 60	 mov	 rcx, QWORD PTR self$[rsp]
  00158	e8 00 00 00 00	 call	 _bufferedreader_peek_unlocked
  0015d	48 89 44 24 30	 mov	 QWORD PTR res$[rsp], rax
$end$21180:
$LN3@buffered_p:

; 876  : 
; 877  : end:
; 878  :     LEAVE_BUFFERED(self)

  00162	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00167	c7 80 c0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+192], 0
  00171	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00176	48 8b 88 b8 00
	00 00		 mov	 rcx, QWORD PTR [rax+184]
  0017d	e8 00 00 00 00	 call	 PyThread_release_lock
  00182	33 c0		 xor	 eax, eax
  00184	85 c0		 test	 eax, eax
  00186	75 da		 jne	 SHORT $LN3@buffered_p

; 879  :     return res;

  00188	48 8b 44 24 30	 mov	 rax, QWORD PTR res$[rsp]
$LN16@buffered_p:

; 880  : }

  0018d	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00191	c3		 ret	 0
buffered_peek ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BE@GLDJGMGO@read?5of?5closed?5file?$AA@	; `string'
PUBLIC	??_C@_0CD@DNPPMMNB@read?5length?5must?5be?5positive?5or?5@ ; `string'
PUBLIC	??_C@_08DBDOJIJG@?$HMO?$CG?3read?$AA@		; `string'
EXTRN	_PyIO_ConvertSsize_t:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$buffered_read DD imagerel buffered_read
	DD	imagerel buffered_read+559
	DD	imagerel $unwind$buffered_read
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$buffered_read DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_0BE@GLDJGMGO@read?5of?5closed?5file?$AA@
CONST	SEGMENT
??_C@_0BE@GLDJGMGO@read?5of?5closed?5file?$AA@ DB 'read of closed file', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@DNPPMMNB@read?5length?5must?5be?5positive?5or?5@
CONST	SEGMENT
??_C@_0CD@DNPPMMNB@read?5length?5must?5be?5positive?5or?5@ DB 'read lengt'
	DB	'h must be positive or -1', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08DBDOJIJG@?$HMO?$CG?3read?$AA@
CONST	SEGMENT
??_C@_08DBDOJIJG@?$HMO?$CG?3read?$AA@ DB '|O&:read', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT buffered_read
_TEXT	SEGMENT
res$ = 32
n$ = 40
tv88 = 48
tv132 = 52
tv151 = 56
self$ = 80
args$ = 88
buffered_read PROC					; COMDAT

; 884  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 885  :     Py_ssize_t n = -1;

  0000e	48 c7 44 24 28
	ff ff ff ff	 mov	 QWORD PTR n$[rsp], -1

; 886  :     PyObject *res;
; 887  : 
; 888  :     CHECK_INITIALIZED(self)

  00017	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  0001c	83 78 68 00	 cmp	 DWORD PTR [rax+104], 0
  00020	7f 3a		 jg	 SHORT $LN16@buffered_r@3
  00022	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00027	83 78 6c 00	 cmp	 DWORD PTR [rax+108], 0
  0002b	74 15		 je	 SHORT $LN15@buffered_r@3
  0002d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@IOAMDFLF@raw?5stream?5has?5been?5detached?$AA@
  00034	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0003b	e8 00 00 00 00	 call	 PyErr_SetString
  00040	eb 13		 jmp	 SHORT $LN14@buffered_r@3
$LN15@buffered_r@3:
  00042	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
  00049	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00050	e8 00 00 00 00	 call	 PyErr_SetString
$LN14@buffered_r@3:
  00055	33 c0		 xor	 eax, eax
  00057	e9 ce 01 00 00	 jmp	 $LN17@buffered_r@3
$LN16@buffered_r@3:

; 889  :     if (!PyArg_ParseTuple(args, "|O&:read", &_PyIO_ConvertSsize_t, &n)) {

  0005c	4c 8d 4c 24 28	 lea	 r9, QWORD PTR n$[rsp]
  00061	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:_PyIO_ConvertSsize_t
  00068	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08DBDOJIJG@?$HMO?$CG?3read?$AA@
  0006f	48 8b 4c 24 58	 mov	 rcx, QWORD PTR args$[rsp]
  00074	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00079	85 c0		 test	 eax, eax
  0007b	75 07		 jne	 SHORT $LN13@buffered_r@3

; 890  :         return NULL;

  0007d	33 c0		 xor	 eax, eax
  0007f	e9 a6 01 00 00	 jmp	 $LN17@buffered_r@3
$LN13@buffered_r@3:

; 891  :     }
; 892  :     if (n < -1) {

  00084	48 83 7c 24 28
	ff		 cmp	 QWORD PTR n$[rsp], -1
  0008a	7d 1a		 jge	 SHORT $LN12@buffered_r@3

; 893  :         PyErr_SetString(PyExc_ValueError,
; 894  :                         "read length must be positive or -1");

  0008c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@DNPPMMNB@read?5length?5must?5be?5positive?5or?5@
  00093	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0009a	e8 00 00 00 00	 call	 PyErr_SetString

; 895  :         return NULL;

  0009f	33 c0		 xor	 eax, eax
  000a1	e9 84 01 00 00	 jmp	 $LN17@buffered_r@3
$LN12@buffered_r@3:

; 896  :     }
; 897  : 
; 898  :     CHECK_CLOSED(self, "read of closed file")

  000a6	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  000ab	83 78 7c 00	 cmp	 DWORD PTR [rax+124], 0
  000af	74 14		 je	 SHORT $LN19@buffered_r@3
  000b1	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  000b6	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  000ba	e8 00 00 00 00	 call	 _PyFileIO_closed
  000bf	89 44 24 30	 mov	 DWORD PTR tv88[rsp], eax
  000c3	eb 0e		 jmp	 SHORT $LN20@buffered_r@3
$LN19@buffered_r@3:
  000c5	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  000ca	e8 00 00 00 00	 call	 buffered_closed
  000cf	89 44 24 30	 mov	 DWORD PTR tv88[rsp], eax
$LN20@buffered_r@3:
  000d3	83 7c 24 30 00	 cmp	 DWORD PTR tv88[rsp], 0
  000d8	74 1a		 je	 SHORT $LN11@buffered_r@3
  000da	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@GLDJGMGO@read?5of?5closed?5file?$AA@
  000e1	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  000e8	e8 00 00 00 00	 call	 PyErr_SetString
  000ed	33 c0		 xor	 eax, eax
  000ef	e9 36 01 00 00	 jmp	 $LN17@buffered_r@3
$LN11@buffered_r@3:

; 899  : 
; 900  :     if (n == -1) {

  000f4	48 83 7c 24 28
	ff		 cmp	 QWORD PTR n$[rsp], -1
  000fa	75 68		 jne	 SHORT $LN10@buffered_r@3

; 901  :         /* The number of bytes is unspecified, read until the end of stream */
; 902  :         if (!ENTER_BUFFERED(self))

  000fc	33 d2		 xor	 edx, edx
  000fe	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00103	48 8b 88 b8 00
	00 00		 mov	 rcx, QWORD PTR [rax+184]
  0010a	e8 00 00 00 00	 call	 PyThread_acquire_lock
  0010f	85 c0		 test	 eax, eax
  00111	74 0a		 je	 SHORT $LN21@buffered_r@3
  00113	c7 44 24 34 01
	00 00 00	 mov	 DWORD PTR tv132[rsp], 1
  0011b	eb 0e		 jmp	 SHORT $LN22@buffered_r@3
$LN21@buffered_r@3:
  0011d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  00122	e8 00 00 00 00	 call	 _enter_buffered_busy
  00127	89 44 24 34	 mov	 DWORD PTR tv132[rsp], eax
$LN22@buffered_r@3:
  0012b	83 7c 24 34 00	 cmp	 DWORD PTR tv132[rsp], 0
  00130	74 17		 je	 SHORT $LN8@buffered_r@3
  00132	e8 00 00 00 00	 call	 PyThread_get_thread_ident
  00137	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  0013c	89 81 c0 00 00
	00		 mov	 DWORD PTR [rcx+192], eax
  00142	33 c0		 xor	 eax, eax
  00144	83 f8 01	 cmp	 eax, 1
  00147	75 07		 jne	 SHORT $LN9@buffered_r@3
$LN8@buffered_r@3:

; 903  :             return NULL;

  00149	33 c0		 xor	 eax, eax
  0014b	e9 da 00 00 00	 jmp	 $LN17@buffered_r@3
$LN9@buffered_r@3:

; 904  :         res = _bufferedreader_read_all(self);

  00150	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  00155	e8 00 00 00 00	 call	 _bufferedreader_read_all
  0015a	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax

; 905  :     }
; 906  :     else {

  0015f	e9 9b 00 00 00	 jmp	 $LN7@buffered_r@3
$LN10@buffered_r@3:

; 907  :         res = _bufferedreader_read_fast(self, n);

  00164	48 8b 54 24 28	 mov	 rdx, QWORD PTR n$[rsp]
  00169	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  0016e	e8 00 00 00 00	 call	 _bufferedreader_read_fast
  00173	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax

; 908  :         if (res != Py_None)

  00178	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0017f	48 39 44 24 20	 cmp	 QWORD PTR res$[rsp], rax
  00184	74 0a		 je	 SHORT $LN6@buffered_r@3

; 909  :             return res;

  00186	48 8b 44 24 20	 mov	 rax, QWORD PTR res$[rsp]
  0018b	e9 9a 00 00 00	 jmp	 $LN17@buffered_r@3
$LN6@buffered_r@3:

; 910  :         Py_DECREF(res);

  00190	48 8b 4c 24 20	 mov	 rcx, QWORD PTR res$[rsp]
  00195	e8 00 00 00 00	 call	 _Py_DecRef

; 911  :         if (!ENTER_BUFFERED(self))

  0019a	33 d2		 xor	 edx, edx
  0019c	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  001a1	48 8b 88 b8 00
	00 00		 mov	 rcx, QWORD PTR [rax+184]
  001a8	e8 00 00 00 00	 call	 PyThread_acquire_lock
  001ad	85 c0		 test	 eax, eax
  001af	74 0a		 je	 SHORT $LN23@buffered_r@3
  001b1	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR tv151[rsp], 1
  001b9	eb 0e		 jmp	 SHORT $LN24@buffered_r@3
$LN23@buffered_r@3:
  001bb	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  001c0	e8 00 00 00 00	 call	 _enter_buffered_busy
  001c5	89 44 24 38	 mov	 DWORD PTR tv151[rsp], eax
$LN24@buffered_r@3:
  001c9	83 7c 24 38 00	 cmp	 DWORD PTR tv151[rsp], 0
  001ce	74 17		 je	 SHORT $LN4@buffered_r@3
  001d0	e8 00 00 00 00	 call	 PyThread_get_thread_ident
  001d5	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  001da	89 81 c0 00 00
	00		 mov	 DWORD PTR [rcx+192], eax
  001e0	33 c0		 xor	 eax, eax
  001e2	83 f8 01	 cmp	 eax, 1
  001e5	75 04		 jne	 SHORT $LN5@buffered_r@3
$LN4@buffered_r@3:

; 912  :             return NULL;

  001e7	33 c0		 xor	 eax, eax
  001e9	eb 3f		 jmp	 SHORT $LN17@buffered_r@3
$LN5@buffered_r@3:

; 913  :         res = _bufferedreader_read_generic(self, n);

  001eb	48 8b 54 24 28	 mov	 rdx, QWORD PTR n$[rsp]
  001f0	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  001f5	e8 00 00 00 00	 call	 _bufferedreader_read_generic
  001fa	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax
$LN7@buffered_r@3:
$LN3@buffered_r@3:

; 914  :     }
; 915  : 
; 916  :     LEAVE_BUFFERED(self)

  001ff	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00204	c7 80 c0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+192], 0
  0020e	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00213	48 8b 88 b8 00
	00 00		 mov	 rcx, QWORD PTR [rax+184]
  0021a	e8 00 00 00 00	 call	 PyThread_release_lock
  0021f	33 c0		 xor	 eax, eax
  00221	85 c0		 test	 eax, eax
  00223	75 da		 jne	 SHORT $LN3@buffered_r@3

; 917  :     return res;

  00225	48 8b 44 24 20	 mov	 rax, QWORD PTR res$[rsp]
$LN17@buffered_r@3:

; 918  : }

  0022a	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0022e	c3		 ret	 0
buffered_read ENDP
_TEXT	ENDS
PUBLIC	??_C@_1CG@OADLJEAH@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAr?$AAe?$AAs?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BO@EEBKNJEH@?$AAr?$AAe?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAP?$AAy?$AA_?$AAN?$AAo?$AAn?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BMC@JMFDOGAF@?$AA?$CI?$AAP?$AAy?$AA_?$AAo?$AAf?$AAf?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AAP?$AAy?$AA_?$AAs?$AAs?$AAi?$AAz?$AAe?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AA?$CI?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAr@ ; `string'
PUBLIC	??_C@_0BN@BLNCHBAD@read?5length?5must?5be?5positive?$AA@ ; `string'
PUBLIC	??_C@_07EOIOMINM@n?3read1?$AA@			; `string'
EXTRN	_PyBytes_Resize:PROC
EXTRN	PyBytes_FromStringAndSize:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$buffered_read1 DD imagerel buffered_read1
	DD	imagerel buffered_read1+1007
	DD	imagerel $unwind$buffered_read1
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$buffered_read1 DD 010e01H
	DD	0e20eH
xdata	ENDS
;	COMDAT ??_C@_1CG@OADLJEAH@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAr?$AAe?$AAs?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CG@OADLJEAH@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAr?$AAe?$AAs?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 's', 00H
	DB	'_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, '('
	DB	00H, 'r', 00H, 'e', 00H, 's', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1BO@EEBKNJEH@?$AAr?$AAe?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAP?$AAy?$AA_?$AAN?$AAo?$AAn?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1BO@EEBKNJEH@?$AAr?$AAe?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAP?$AAy?$AA_?$AAN?$AAo?$AAn?$AAe?$AA?$AA@ DB 'r'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H
	DB	'P', 00H, 'y', 00H, '_', 00H, 'N', 00H, 'o', 00H, 'n', 00H, 'e'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1BMC@JMFDOGAF@?$AA?$CI?$AAP?$AAy?$AA_?$AAo?$AAf?$AAf?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AAP?$AAy?$AA_?$AAs?$AAs?$AAi?$AAz?$AAe?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AA?$CI?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAr@
CONST	SEGMENT
??_C@_1BMC@JMFDOGAF@?$AA?$CI?$AAP?$AAy?$AA_?$AAo?$AAf?$AAf?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AAP?$AAy?$AA_?$AAs?$AAs?$AAi?$AAz?$AAe?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AA?$CI?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAr@ DB '('
	DB	00H, 'P', 00H, 'y', 00H, '_', 00H, 'o', 00H, 'f', 00H, 'f', 00H
	DB	'_', 00H, 't', 00H, ')', 00H, '(', 00H, 'P', 00H, 'y', 00H, '_'
	DB	00H, 's', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, '_', 00H
	DB	't', 00H, ')', 00H, '(', 00H, '(', 00H, '(', 00H, 's', 00H, 'e'
	DB	00H, 'l', 00H, 'f', 00H, '-', 00H, '>', 00H, 'r', 00H, 'e', 00H
	DB	'a', 00H, 'd', 00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H, ' '
	DB	00H, '&', 00H, '&', 00H, ' ', 00H, '(', 00H, 's', 00H, 'e', 00H
	DB	'l', 00H, 'f', 00H, '-', 00H, '>', 00H, 'r', 00H, 'e', 00H, 'a'
	DB	00H, 'd', 00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H, ' ', 00H
	DB	'&', 00H, '&', 00H, ' ', 00H, 's', 00H, 'e', 00H, 'l', 00H, 'f'
	DB	00H, '-', 00H, '>', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'd', 00H
	DB	'_', 00H, 'e', 00H, 'n', 00H, 'd', 00H, ' ', 00H, '!', 00H, '='
	DB	00H, ' ', 00H, '-', 00H, '1', 00H, ')', 00H, ')', 00H, ' ', 00H
	DB	'?', 00H, ' ', 00H, '(', 00H, 's', 00H, 'e', 00H, 'l', 00H, 'f'
	DB	00H, '-', 00H, '>', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'd', 00H
	DB	'_', 00H, 'e', 00H, 'n', 00H, 'd', 00H, ' ', 00H, '-', 00H, ' '
	DB	00H, 's', 00H, 'e', 00H, 'l', 00H, 'f', 00H, '-', 00H, '>', 00H
	DB	'p', 00H, 'o', 00H, 's', 00H, ')', 00H, ' ', 00H, ':', 00H, ' '
	DB	00H, '0', 00H, ')', 00H, ')', 00H, ' ', 00H, '=', 00H, '=', 00H
	DB	' ', 00H, '(', 00H, '(', 00H, '(', 00H, 's', 00H, 'e', 00H, 'l'
	DB	00H, 'f', 00H, '-', 00H, '>', 00H, 'r', 00H, 'e', 00H, 'a', 00H
	DB	'd', 00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H, ' ', 00H, '&'
	DB	00H, '&', 00H, ' ', 00H, '(', 00H, 's', 00H, 'e', 00H, 'l', 00H
	DB	'f', 00H, '-', 00H, '>', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'd'
	DB	00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H, ' ', 00H, '&', 00H
	DB	'&', 00H, ' ', 00H, 's', 00H, 'e', 00H, 'l', 00H, 'f', 00H, '-'
	DB	00H, '>', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'd', 00H, '_', 00H
	DB	'e', 00H, 'n', 00H, 'd', 00H, ' ', 00H, '!', 00H, '=', 00H, ' '
	DB	00H, '-', 00H, '1', 00H, ')', 00H, ')', 00H, ' ', 00H, '?', 00H
	DB	' ', 00H, '(', 00H, 's', 00H, 'e', 00H, 'l', 00H, 'f', 00H, '-'
	DB	00H, '>', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'd', 00H, '_', 00H
	DB	'e', 00H, 'n', 00H, 'd', 00H, ' ', 00H, '-', 00H, ' ', 00H, 's'
	DB	00H, 'e', 00H, 'l', 00H, 'f', 00H, '-', 00H, '>', 00H, 'p', 00H
	DB	'o', 00H, 's', 00H, ')', 00H, ' ', 00H, ':', 00H, ' ', 00H, '0'
	DB	00H, ')', 00H, ')', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@BLNCHBAD@read?5length?5must?5be?5positive?$AA@
CONST	SEGMENT
??_C@_0BN@BLNCHBAD@read?5length?5must?5be?5positive?$AA@ DB 'read length '
	DB	'must be positive', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07EOIOMINM@n?3read1?$AA@
CONST	SEGMENT
??_C@_07EOIOMINM@n?3read1?$AA@ DB 'n:read1', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT buffered_read1
_TEXT	SEGMENT
res$ = 32
n$ = 40
have$ = 48
r$ = 56
tv93 = 64
tv135 = 72
tv150 = 80
tv153 = 88
tv173 = 96
self$ = 128
args$ = 136
buffered_read1 PROC					; COMDAT

; 922  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 923  :     Py_ssize_t n, have, r;
; 924  :     PyObject *res = NULL;

  0000e	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR res$[rsp], 0

; 925  : 
; 926  :     CHECK_INITIALIZED(self)

  00017	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0001f	83 78 68 00	 cmp	 DWORD PTR [rax+104], 0
  00023	7f 3d		 jg	 SHORT $LN16@buffered_r@4
  00025	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0002d	83 78 6c 00	 cmp	 DWORD PTR [rax+108], 0
  00031	74 15		 je	 SHORT $LN15@buffered_r@4
  00033	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@IOAMDFLF@raw?5stream?5has?5been?5detached?$AA@
  0003a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00041	e8 00 00 00 00	 call	 PyErr_SetString
  00046	eb 13		 jmp	 SHORT $LN14@buffered_r@4
$LN15@buffered_r@4:
  00048	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
  0004f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00056	e8 00 00 00 00	 call	 PyErr_SetString
$LN14@buffered_r@4:
  0005b	33 c0		 xor	 eax, eax
  0005d	e9 88 03 00 00	 jmp	 $LN17@buffered_r@4
$LN16@buffered_r@4:

; 927  :     if (!PyArg_ParseTuple(args, "n:read1", &n)) {

  00062	4c 8d 44 24 28	 lea	 r8, QWORD PTR n$[rsp]
  00067	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07EOIOMINM@n?3read1?$AA@
  0006e	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  00076	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  0007b	85 c0		 test	 eax, eax
  0007d	75 07		 jne	 SHORT $LN13@buffered_r@4

; 928  :         return NULL;

  0007f	33 c0		 xor	 eax, eax
  00081	e9 64 03 00 00	 jmp	 $LN17@buffered_r@4
$LN13@buffered_r@4:

; 929  :     }
; 930  : 
; 931  :     if (n < 0) {

  00086	48 83 7c 24 28
	00		 cmp	 QWORD PTR n$[rsp], 0
  0008c	7d 1a		 jge	 SHORT $LN12@buffered_r@4

; 932  :         PyErr_SetString(PyExc_ValueError,
; 933  :                         "read length must be positive");

  0008e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@BLNCHBAD@read?5length?5must?5be?5positive?$AA@
  00095	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0009c	e8 00 00 00 00	 call	 PyErr_SetString

; 934  :         return NULL;

  000a1	33 c0		 xor	 eax, eax
  000a3	e9 42 03 00 00	 jmp	 $LN17@buffered_r@4
$LN12@buffered_r@4:

; 935  :     }
; 936  :     if (n == 0)

  000a8	48 83 7c 24 28
	00		 cmp	 QWORD PTR n$[rsp], 0
  000ae	75 0e		 jne	 SHORT $LN11@buffered_r@4

; 937  :         return PyBytes_FromStringAndSize(NULL, 0);

  000b0	33 d2		 xor	 edx, edx
  000b2	33 c9		 xor	 ecx, ecx
  000b4	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  000b9	e9 2c 03 00 00	 jmp	 $LN17@buffered_r@4
$LN11@buffered_r@4:

; 938  : 
; 939  :     /* Return up to n bytes.  If at least one byte is buffered, we
; 940  :        only return buffered bytes.  Otherwise, we do one raw read. */
; 941  : 
; 942  :     have = Py_SAFE_DOWNCAST(READAHEAD(self), Py_off_t, Py_ssize_t);

  000be	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  000c6	83 78 70 00	 cmp	 DWORD PTR [rax+112], 0
  000ca	74 48		 je	 SHORT $LN19@buffered_r@4
  000cc	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  000d4	83 78 70 00	 cmp	 DWORD PTR [rax+112], 0
  000d8	74 3a		 je	 SHORT $LN19@buffered_r@4
  000da	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  000e2	48 83 b8 a0 00
	00 00 ff	 cmp	 QWORD PTR [rax+160], -1
  000ea	74 28		 je	 SHORT $LN19@buffered_r@4
  000ec	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  000f4	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  000fc	48 8b 89 90 00
	00 00		 mov	 rcx, QWORD PTR [rcx+144]
  00103	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  0010a	48 2b c1	 sub	 rax, rcx
  0010d	48 89 44 24 40	 mov	 QWORD PTR tv93[rsp], rax
  00112	eb 09		 jmp	 SHORT $LN20@buffered_r@4
$LN19@buffered_r@4:
  00114	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR tv93[rsp], 0
$LN20@buffered_r@4:
  0011d	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00125	83 78 70 00	 cmp	 DWORD PTR [rax+112], 0
  00129	74 48		 je	 SHORT $LN21@buffered_r@4
  0012b	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00133	83 78 70 00	 cmp	 DWORD PTR [rax+112], 0
  00137	74 3a		 je	 SHORT $LN21@buffered_r@4
  00139	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00141	48 83 b8 a0 00
	00 00 ff	 cmp	 QWORD PTR [rax+160], -1
  00149	74 28		 je	 SHORT $LN21@buffered_r@4
  0014b	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00153	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  0015b	48 8b 89 90 00
	00 00		 mov	 rcx, QWORD PTR [rcx+144]
  00162	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  00169	48 2b c1	 sub	 rax, rcx
  0016c	48 89 44 24 48	 mov	 QWORD PTR tv135[rsp], rax
  00171	eb 09		 jmp	 SHORT $LN22@buffered_r@4
$LN21@buffered_r@4:
  00173	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR tv135[rsp], 0
$LN22@buffered_r@4:
  0017c	48 8b 44 24 48	 mov	 rax, QWORD PTR tv135[rsp]
  00181	48 39 44 24 40	 cmp	 QWORD PTR tv93[rsp], rax
  00186	74 1c		 je	 SHORT $LN23@buffered_r@4
  00188	41 b8 ae 03 00
	00		 mov	 r8d, 942		; 000003aeH
  0018e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DI@KBAIHMCO@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AAe?$AAd?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  00195	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BMC@JMFDOGAF@?$AA?$CI?$AAP?$AAy?$AA_?$AAo?$AAf?$AAf?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AAP?$AAy?$AA_?$AAs?$AAs?$AAi?$AAz?$AAe?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AA?$CI?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAr@
  0019c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001a2	33 c0		 xor	 eax, eax
$LN23@buffered_r@4:
  001a4	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  001ac	83 78 70 00	 cmp	 DWORD PTR [rax+112], 0
  001b0	74 48		 je	 SHORT $LN24@buffered_r@4
  001b2	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  001ba	83 78 70 00	 cmp	 DWORD PTR [rax+112], 0
  001be	74 3a		 je	 SHORT $LN24@buffered_r@4
  001c0	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  001c8	48 83 b8 a0 00
	00 00 ff	 cmp	 QWORD PTR [rax+160], -1
  001d0	74 28		 je	 SHORT $LN24@buffered_r@4
  001d2	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  001da	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  001e2	48 8b 89 90 00
	00 00		 mov	 rcx, QWORD PTR [rcx+144]
  001e9	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  001f0	48 2b c1	 sub	 rax, rcx
  001f3	48 89 44 24 50	 mov	 QWORD PTR tv150[rsp], rax
  001f8	eb 09		 jmp	 SHORT $LN25@buffered_r@4
$LN24@buffered_r@4:
  001fa	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR tv150[rsp], 0
$LN25@buffered_r@4:
  00203	48 8b 44 24 50	 mov	 rax, QWORD PTR tv150[rsp]
  00208	48 89 44 24 30	 mov	 QWORD PTR have$[rsp], rax

; 943  :     if (have > 0) {

  0020d	48 83 7c 24 30
	00		 cmp	 QWORD PTR have$[rsp], 0
  00213	7e 77		 jle	 SHORT $LN10@buffered_r@4

; 944  :         n = Py_MIN(have, n);

  00215	48 8b 44 24 28	 mov	 rax, QWORD PTR n$[rsp]
  0021a	48 39 44 24 30	 cmp	 QWORD PTR have$[rsp], rax
  0021f	7e 0c		 jle	 SHORT $LN26@buffered_r@4
  00221	48 8b 44 24 28	 mov	 rax, QWORD PTR n$[rsp]
  00226	48 89 44 24 58	 mov	 QWORD PTR tv153[rsp], rax
  0022b	eb 0a		 jmp	 SHORT $LN27@buffered_r@4
$LN26@buffered_r@4:
  0022d	48 8b 44 24 30	 mov	 rax, QWORD PTR have$[rsp]
  00232	48 89 44 24 58	 mov	 QWORD PTR tv153[rsp], rax
$LN27@buffered_r@4:
  00237	48 8b 44 24 58	 mov	 rax, QWORD PTR tv153[rsp]
  0023c	48 89 44 24 28	 mov	 QWORD PTR n$[rsp], rax

; 945  :         res = _bufferedreader_read_fast(self, n);

  00241	48 8b 54 24 28	 mov	 rdx, QWORD PTR n$[rsp]
  00246	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  0024e	e8 00 00 00 00	 call	 _bufferedreader_read_fast
  00253	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax

; 946  :         assert(res != Py_None);

  00258	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0025f	48 39 44 24 20	 cmp	 QWORD PTR res$[rsp], rax
  00264	75 1c		 jne	 SHORT $LN28@buffered_r@4
  00266	41 b8 b2 03 00
	00		 mov	 r8d, 946		; 000003b2H
  0026c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DI@KBAIHMCO@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AAe?$AAd?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  00273	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BO@EEBKNJEH@?$AAr?$AAe?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAP?$AAy?$AA_?$AAN?$AAo?$AAn?$AAe?$AA?$AA@
  0027a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00280	33 c0		 xor	 eax, eax
$LN28@buffered_r@4:

; 947  :         return res;

  00282	48 8b 44 24 20	 mov	 rax, QWORD PTR res$[rsp]
  00287	e9 5e 01 00 00	 jmp	 $LN17@buffered_r@4
$LN10@buffered_r@4:

; 948  :     }
; 949  :     res = PyBytes_FromStringAndSize(NULL, n);

  0028c	48 8b 54 24 28	 mov	 rdx, QWORD PTR n$[rsp]
  00291	33 c9		 xor	 ecx, ecx
  00293	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  00298	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax

; 950  :     if (res == NULL)

  0029d	48 83 7c 24 20
	00		 cmp	 QWORD PTR res$[rsp], 0
  002a3	75 07		 jne	 SHORT $LN9@buffered_r@4

; 951  :         return NULL;

  002a5	33 c0		 xor	 eax, eax
  002a7	e9 3e 01 00 00	 jmp	 $LN17@buffered_r@4
$LN9@buffered_r@4:

; 952  :     if (!ENTER_BUFFERED(self)) {

  002ac	33 d2		 xor	 edx, edx
  002ae	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  002b6	48 8b 88 b8 00
	00 00		 mov	 rcx, QWORD PTR [rax+184]
  002bd	e8 00 00 00 00	 call	 PyThread_acquire_lock
  002c2	85 c0		 test	 eax, eax
  002c4	74 0a		 je	 SHORT $LN29@buffered_r@4
  002c6	c7 44 24 60 01
	00 00 00	 mov	 DWORD PTR tv173[rsp], 1
  002ce	eb 11		 jmp	 SHORT $LN30@buffered_r@4
$LN29@buffered_r@4:
  002d0	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  002d8	e8 00 00 00 00	 call	 _enter_buffered_busy
  002dd	89 44 24 60	 mov	 DWORD PTR tv173[rsp], eax
$LN30@buffered_r@4:
  002e1	83 7c 24 60 00	 cmp	 DWORD PTR tv173[rsp], 0
  002e6	74 1a		 je	 SHORT $LN7@buffered_r@4
  002e8	e8 00 00 00 00	 call	 PyThread_get_thread_ident
  002ed	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  002f5	89 81 c0 00 00
	00		 mov	 DWORD PTR [rcx+192], eax
  002fb	33 c0		 xor	 eax, eax
  002fd	83 f8 01	 cmp	 eax, 1
  00300	75 11		 jne	 SHORT $LN8@buffered_r@4
$LN7@buffered_r@4:

; 953  :         Py_DECREF(res);

  00302	48 8b 4c 24 20	 mov	 rcx, QWORD PTR res$[rsp]
  00307	e8 00 00 00 00	 call	 _Py_DecRef

; 954  :         return NULL;

  0030c	33 c0		 xor	 eax, eax
  0030e	e9 d7 00 00 00	 jmp	 $LN17@buffered_r@4
$LN8@buffered_r@4:

; 955  :     }
; 956  :     _bufferedreader_reset_buf(self);

  00313	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  0031b	e8 00 00 00 00	 call	 _bufferedreader_reset_buf

; 957  :     r = _bufferedreader_raw_read(self, PyBytes_AS_STRING(res), n);

  00320	48 8b 44 24 20	 mov	 rax, QWORD PTR res$[rsp]
  00325	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00329	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0032f	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  00334	85 c0		 test	 eax, eax
  00336	75 1c		 jne	 SHORT $LN31@buffered_r@4
  00338	41 b8 bd 03 00
	00		 mov	 r8d, 957		; 000003bdH
  0033e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DI@KBAIHMCO@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AAe?$AAd?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  00345	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@OADLJEAH@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAr?$AAe?$AAs?$AA?$CJ?$AA?$AA@
  0034c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00352	33 c0		 xor	 eax, eax
$LN31@buffered_r@4:
  00354	48 8b 44 24 20	 mov	 rax, QWORD PTR res$[rsp]
  00359	48 83 c0 78	 add	 rax, 120		; 00000078H
  0035d	4c 8b 44 24 28	 mov	 r8, QWORD PTR n$[rsp]
  00362	48 8b d0	 mov	 rdx, rax
  00365	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  0036d	e8 00 00 00 00	 call	 _bufferedreader_raw_read
  00372	48 89 44 24 38	 mov	 QWORD PTR r$[rsp], rax
$LN6@buffered_r@4:

; 958  :     LEAVE_BUFFERED(self)

  00377	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0037f	c7 80 c0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+192], 0
  00389	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00391	48 8b 88 b8 00
	00 00		 mov	 rcx, QWORD PTR [rax+184]
  00398	e8 00 00 00 00	 call	 PyThread_release_lock
  0039d	33 c0		 xor	 eax, eax
  0039f	85 c0		 test	 eax, eax
  003a1	75 d4		 jne	 SHORT $LN6@buffered_r@4

; 959  :     if (r == -1) {

  003a3	48 83 7c 24 38
	ff		 cmp	 QWORD PTR r$[rsp], -1
  003a9	75 0e		 jne	 SHORT $LN3@buffered_r@4

; 960  :         Py_DECREF(res);

  003ab	48 8b 4c 24 20	 mov	 rcx, QWORD PTR res$[rsp]
  003b0	e8 00 00 00 00	 call	 _Py_DecRef

; 961  :         return NULL;

  003b5	33 c0		 xor	 eax, eax
  003b7	eb 31		 jmp	 SHORT $LN17@buffered_r@4
$LN3@buffered_r@4:

; 962  :     }
; 963  :     if (r == -2)

  003b9	48 83 7c 24 38
	fe		 cmp	 QWORD PTR r$[rsp], -2
  003bf	75 09		 jne	 SHORT $LN2@buffered_r@4

; 964  :         r = 0;

  003c1	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR r$[rsp], 0
$LN2@buffered_r@4:

; 965  :     if (n > r)

  003ca	48 8b 44 24 38	 mov	 rax, QWORD PTR r$[rsp]
  003cf	48 39 44 24 28	 cmp	 QWORD PTR n$[rsp], rax
  003d4	7e 0f		 jle	 SHORT $LN1@buffered_r@4

; 966  :         _PyBytes_Resize(&res, r);

  003d6	48 8b 54 24 38	 mov	 rdx, QWORD PTR r$[rsp]
  003db	48 8d 4c 24 20	 lea	 rcx, QWORD PTR res$[rsp]
  003e0	e8 00 00 00 00	 call	 _PyBytes_Resize
$LN1@buffered_r@4:

; 967  :     return res;

  003e5	48 8b 44 24 20	 mov	 rax, QWORD PTR res$[rsp]
$LN17@buffered_r@4:

; 968  : }

  003ea	48 83 c4 78	 add	 rsp, 120		; 00000078H
  003ee	c3		 ret	 0
buffered_read1 ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BC@CMHMKCHJ@buffered_readinto?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$buffered_readinto DD imagerel buffered_readinto
	DD	imagerel buffered_readinto+1444
	DD	imagerel $unwind$buffered_readinto
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$buffered_readinto DD 021101H
	DD	01b0111H
xdata	ENDS
;	COMDAT ??_C@_0BC@CMHMKCHJ@buffered_readinto?$AA@
CONST	SEGMENT
??_C@_0BC@CMHMKCHJ@buffered_readinto?$AA@ DB 'buffered_readinto', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT buffered_readinto
_TEXT	SEGMENT
res$ = 48
n$ = 56
written$ = 64
remaining$ = 72
buf$ = 80
_py_tmp$21314 = 160
tv86 = 168
tv128 = 176
tv143 = 184
tv173 = 192
self$ = 224
args$ = 232
buffered_readinto PROC					; COMDAT

; 972  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec d8 00
	00 00		 sub	 rsp, 216		; 000000d8H

; 973  :     Py_buffer buf;
; 974  :     Py_ssize_t n, written = 0, remaining;

  00011	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR written$[rsp], 0

; 975  :     PyObject *res = NULL;

  0001a	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR res$[rsp], 0

; 976  : 
; 977  :     CHECK_INITIALIZED(self)

  00023	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0002b	83 78 68 00	 cmp	 DWORD PTR [rax+104], 0
  0002f	7f 3d		 jg	 SHORT $LN28@buffered_r@5
  00031	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00039	83 78 6c 00	 cmp	 DWORD PTR [rax+108], 0
  0003d	74 15		 je	 SHORT $LN27@buffered_r@5
  0003f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@IOAMDFLF@raw?5stream?5has?5been?5detached?$AA@
  00046	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0004d	e8 00 00 00 00	 call	 PyErr_SetString
  00052	eb 13		 jmp	 SHORT $LN26@buffered_r@5
$LN27@buffered_r@5:
  00054	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
  0005b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00062	e8 00 00 00 00	 call	 PyErr_SetString
$LN26@buffered_r@5:
  00067	33 c0		 xor	 eax, eax
  00069	e9 2e 05 00 00	 jmp	 $LN29@buffered_r@5
$LN28@buffered_r@5:

; 978  : 
; 979  :     if (!PyArg_ParseTuple(args, "w*:readinto", &buf))

  0006e	4c 8d 44 24 50	 lea	 r8, QWORD PTR buf$[rsp]
  00073	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@MJKGPJDA@w?$CK?3readinto?$AA@
  0007a	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  00082	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00087	85 c0		 test	 eax, eax
  00089	75 07		 jne	 SHORT $LN25@buffered_r@5

; 980  :         return NULL;

  0008b	33 c0		 xor	 eax, eax
  0008d	e9 0a 05 00 00	 jmp	 $LN29@buffered_r@5
$LN25@buffered_r@5:

; 981  : 
; 982  :     n = Py_SAFE_DOWNCAST(READAHEAD(self), Py_off_t, Py_ssize_t);

  00092	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0009a	83 78 70 00	 cmp	 DWORD PTR [rax+112], 0
  0009e	74 4b		 je	 SHORT $LN31@buffered_r@5
  000a0	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  000a8	83 78 70 00	 cmp	 DWORD PTR [rax+112], 0
  000ac	74 3d		 je	 SHORT $LN31@buffered_r@5
  000ae	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  000b6	48 83 b8 a0 00
	00 00 ff	 cmp	 QWORD PTR [rax+160], -1
  000be	74 2b		 je	 SHORT $LN31@buffered_r@5
  000c0	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  000c8	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  000d0	48 8b 89 90 00
	00 00		 mov	 rcx, QWORD PTR [rcx+144]
  000d7	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  000de	48 2b c1	 sub	 rax, rcx
  000e1	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR tv86[rsp], rax
  000e9	eb 0c		 jmp	 SHORT $LN32@buffered_r@5
$LN31@buffered_r@5:
  000eb	48 c7 84 24 a8
	00 00 00 00 00
	00 00		 mov	 QWORD PTR tv86[rsp], 0
$LN32@buffered_r@5:
  000f7	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  000ff	83 78 70 00	 cmp	 DWORD PTR [rax+112], 0
  00103	74 4b		 je	 SHORT $LN33@buffered_r@5
  00105	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0010d	83 78 70 00	 cmp	 DWORD PTR [rax+112], 0
  00111	74 3d		 je	 SHORT $LN33@buffered_r@5
  00113	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0011b	48 83 b8 a0 00
	00 00 ff	 cmp	 QWORD PTR [rax+160], -1
  00123	74 2b		 je	 SHORT $LN33@buffered_r@5
  00125	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0012d	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00135	48 8b 89 90 00
	00 00		 mov	 rcx, QWORD PTR [rcx+144]
  0013c	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  00143	48 2b c1	 sub	 rax, rcx
  00146	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR tv128[rsp], rax
  0014e	eb 0c		 jmp	 SHORT $LN34@buffered_r@5
$LN33@buffered_r@5:
  00150	48 c7 84 24 b0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR tv128[rsp], 0
$LN34@buffered_r@5:
  0015c	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR tv128[rsp]
  00164	48 39 84 24 a8
	00 00 00	 cmp	 QWORD PTR tv86[rsp], rax
  0016c	74 1c		 je	 SHORT $LN35@buffered_r@5
  0016e	41 b8 d6 03 00
	00		 mov	 r8d, 982		; 000003d6H
  00174	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DI@KBAIHMCO@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AAe?$AAd?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  0017b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BMC@JMFDOGAF@?$AA?$CI?$AAP?$AAy?$AA_?$AAo?$AAf?$AAf?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AAP?$AAy?$AA_?$AAs?$AAs?$AAi?$AAz?$AAe?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AA?$CI?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAr@
  00182	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00188	33 c0		 xor	 eax, eax
$LN35@buffered_r@5:
  0018a	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00192	83 78 70 00	 cmp	 DWORD PTR [rax+112], 0
  00196	74 4b		 je	 SHORT $LN36@buffered_r@5
  00198	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  001a0	83 78 70 00	 cmp	 DWORD PTR [rax+112], 0
  001a4	74 3d		 je	 SHORT $LN36@buffered_r@5
  001a6	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  001ae	48 83 b8 a0 00
	00 00 ff	 cmp	 QWORD PTR [rax+160], -1
  001b6	74 2b		 je	 SHORT $LN36@buffered_r@5
  001b8	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  001c0	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  001c8	48 8b 89 90 00
	00 00		 mov	 rcx, QWORD PTR [rcx+144]
  001cf	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  001d6	48 2b c1	 sub	 rax, rcx
  001d9	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR tv143[rsp], rax
  001e1	eb 0c		 jmp	 SHORT $LN37@buffered_r@5
$LN36@buffered_r@5:
  001e3	48 c7 84 24 b8
	00 00 00 00 00
	00 00		 mov	 QWORD PTR tv143[rsp], 0
$LN37@buffered_r@5:
  001ef	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR tv143[rsp]
  001f7	48 89 44 24 38	 mov	 QWORD PTR n$[rsp], rax

; 983  :     if (n > 0) {

  001fc	48 83 7c 24 38
	00		 cmp	 QWORD PTR n$[rsp], 0
  00202	0f 8e d0 00 00
	00		 jle	 $LN24@buffered_r@5

; 984  :         if (n >= buf.len) {

  00208	48 8b 44 24 60	 mov	 rax, QWORD PTR buf$[rsp+16]
  0020d	48 39 44 24 38	 cmp	 QWORD PTR n$[rsp], rax
  00212	7c 67		 jl	 SHORT $LN23@buffered_r@5

; 985  :             memcpy(buf.buf, self->buffer + self->pos, buf.len);

  00214	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0021c	48 8b 80 88 00
	00 00		 mov	 rax, QWORD PTR [rax+136]
  00223	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  0022b	48 03 81 90 00
	00 00		 add	 rax, QWORD PTR [rcx+144]
  00232	4c 8b 44 24 60	 mov	 r8, QWORD PTR buf$[rsp+16]
  00237	48 8b d0	 mov	 rdx, rax
  0023a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR buf$[rsp]
  0023f	e8 00 00 00 00	 call	 memcpy

; 986  :             self->pos += buf.len;

  00244	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0024c	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  00253	48 03 44 24 60	 add	 rax, QWORD PTR buf$[rsp+16]
  00258	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00260	48 89 81 90 00
	00 00		 mov	 QWORD PTR [rcx+144], rax

; 987  :             res = PyLong_FromSsize_t(buf.len);

  00267	48 8b 4c 24 60	 mov	 rcx, QWORD PTR buf$[rsp+16]
  0026c	e8 00 00 00 00	 call	 PyLong_FromSsize_t
  00271	48 89 44 24 30	 mov	 QWORD PTR res$[rsp], rax

; 988  :             goto end_unlocked;

  00276	e9 12 03 00 00	 jmp	 $end_unlocked$21302
$LN23@buffered_r@5:

; 989  :         }
; 990  :         memcpy(buf.buf, self->buffer + self->pos, n);

  0027b	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00283	48 8b 80 88 00
	00 00		 mov	 rax, QWORD PTR [rax+136]
  0028a	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00292	48 03 81 90 00
	00 00		 add	 rax, QWORD PTR [rcx+144]
  00299	4c 8b 44 24 38	 mov	 r8, QWORD PTR n$[rsp]
  0029e	48 8b d0	 mov	 rdx, rax
  002a1	48 8b 4c 24 50	 mov	 rcx, QWORD PTR buf$[rsp]
  002a6	e8 00 00 00 00	 call	 memcpy

; 991  :         self->pos += n;

  002ab	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  002b3	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  002ba	48 03 44 24 38	 add	 rax, QWORD PTR n$[rsp]
  002bf	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  002c7	48 89 81 90 00
	00 00		 mov	 QWORD PTR [rcx+144], rax

; 992  :         written = n;

  002ce	48 8b 44 24 38	 mov	 rax, QWORD PTR n$[rsp]
  002d3	48 89 44 24 40	 mov	 QWORD PTR written$[rsp], rax
$LN24@buffered_r@5:

; 993  :     }
; 994  : 
; 995  :     if (!ENTER_BUFFERED(self))

  002d8	33 d2		 xor	 edx, edx
  002da	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  002e2	48 8b 88 b8 00
	00 00		 mov	 rcx, QWORD PTR [rax+184]
  002e9	e8 00 00 00 00	 call	 PyThread_acquire_lock
  002ee	85 c0		 test	 eax, eax
  002f0	74 0d		 je	 SHORT $LN38@buffered_r@5
  002f2	c7 84 24 c0 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv173[rsp], 1
  002fd	eb 14		 jmp	 SHORT $LN39@buffered_r@5
$LN38@buffered_r@5:
  002ff	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00307	e8 00 00 00 00	 call	 _enter_buffered_busy
  0030c	89 84 24 c0 00
	00 00		 mov	 DWORD PTR tv173[rsp], eax
$LN39@buffered_r@5:
  00313	83 bc 24 c0 00
	00 00 00	 cmp	 DWORD PTR tv173[rsp], 0
  0031b	74 1a		 je	 SHORT $LN21@buffered_r@5
  0031d	e8 00 00 00 00	 call	 PyThread_get_thread_ident
  00322	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  0032a	89 81 c0 00 00
	00		 mov	 DWORD PTR [rcx+192], eax
  00330	33 c0		 xor	 eax, eax
  00332	83 f8 01	 cmp	 eax, 1
  00335	75 05		 jne	 SHORT $LN22@buffered_r@5
$LN21@buffered_r@5:

; 996  :         goto end_unlocked;

  00337	e9 51 02 00 00	 jmp	 $end_unlocked$21302
$LN22@buffered_r@5:

; 997  : 
; 998  :     if (self->writable) {

  0033c	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00344	83 78 74 00	 cmp	 DWORD PTR [rax+116], 0
  00348	74 7a		 je	 SHORT $LN20@buffered_r@5

; 999  :         res = buffered_flush_and_rewind_unlocked(self);

  0034a	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00352	e8 00 00 00 00	 call	 buffered_flush_and_rewind_unlocked
  00357	48 89 44 24 30	 mov	 QWORD PTR res$[rsp], rax

; 1000 :         if (res == NULL)

  0035c	48 83 7c 24 30
	00		 cmp	 QWORD PTR res$[rsp], 0
  00362	75 05		 jne	 SHORT $LN19@buffered_r@5

; 1001 :             goto end;

  00364	e9 f8 01 00 00	 jmp	 $end$21308
$LN19@buffered_r@5:
$LN18@buffered_r@5:

; 1002 :         Py_CLEAR(res);

  00369	48 83 7c 24 30
	00		 cmp	 QWORD PTR res$[rsp], 0
  0036f	74 4d		 je	 SHORT $LN15@buffered_r@5
  00371	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00379	4c 8b 4c 24 30	 mov	 r9, QWORD PTR res$[rsp]
  0037e	41 b8 ea 03 00
	00		 mov	 r8d, 1002		; 000003eaH
  00384	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@DICDDJFP@?4?4?2Modules?2_io?2bufferedio?4c?$AA@
  0038b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@CMHMKCHJ@buffered_readinto?$AA@
  00392	e8 00 00 00 00	 call	 _PyParallel_Guard
  00397	85 c0		 test	 eax, eax
  00399	75 23		 jne	 SHORT $LN15@buffered_r@5
  0039b	48 8b 44 24 30	 mov	 rax, QWORD PTR res$[rsp]
  003a0	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR _py_tmp$21314[rsp], rax
  003a8	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR res$[rsp], 0
  003b1	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR _py_tmp$21314[rsp]
  003b9	e8 00 00 00 00	 call	 _Py_DecRef
$LN15@buffered_r@5:
  003be	33 c0		 xor	 eax, eax
  003c0	85 c0		 test	 eax, eax
  003c2	75 a5		 jne	 SHORT $LN18@buffered_r@5
$LN20@buffered_r@5:

; 1003 :     }
; 1004 : 
; 1005 :     _bufferedreader_reset_buf(self);

  003c4	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  003cc	e8 00 00 00 00	 call	 _bufferedreader_reset_buf

; 1006 :     self->pos = 0;

  003d1	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  003d9	48 c7 80 90 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+144], 0

; 1007 : 
; 1008 :     for (remaining = buf.len - written;
; 1009 :          remaining > 0;
; 1010 :          written += n, remaining -= n) {

  003e4	48 8b 44 24 40	 mov	 rax, QWORD PTR written$[rsp]
  003e9	48 8b 4c 24 60	 mov	 rcx, QWORD PTR buf$[rsp+16]
  003ee	48 2b c8	 sub	 rcx, rax
  003f1	48 8b c1	 mov	 rax, rcx
  003f4	48 89 44 24 48	 mov	 QWORD PTR remaining$[rsp], rax
  003f9	eb 2a		 jmp	 SHORT $LN14@buffered_r@5
$LN13@buffered_r@5:
  003fb	48 8b 44 24 38	 mov	 rax, QWORD PTR n$[rsp]
  00400	48 8b 4c 24 40	 mov	 rcx, QWORD PTR written$[rsp]
  00405	48 03 c8	 add	 rcx, rax
  00408	48 8b c1	 mov	 rax, rcx
  0040b	48 89 44 24 40	 mov	 QWORD PTR written$[rsp], rax
  00410	48 8b 44 24 38	 mov	 rax, QWORD PTR n$[rsp]
  00415	48 8b 4c 24 48	 mov	 rcx, QWORD PTR remaining$[rsp]
  0041a	48 2b c8	 sub	 rcx, rax
  0041d	48 8b c1	 mov	 rax, rcx
  00420	48 89 44 24 48	 mov	 QWORD PTR remaining$[rsp], rax
$LN14@buffered_r@5:
  00425	48 83 7c 24 48
	00		 cmp	 QWORD PTR remaining$[rsp], 0
  0042b	0f 8e 21 01 00
	00		 jle	 $LN12@buffered_r@5

; 1011 :         /* If remaining bytes is larger than internal buffer size, copy
; 1012 :          * directly into caller's buffer. */
; 1013 :         if (remaining > self->buffer_size) {

  00431	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00439	48 8b 80 c8 00
	00 00		 mov	 rax, QWORD PTR [rax+200]
  00440	48 39 44 24 48	 cmp	 QWORD PTR remaining$[rsp], rax
  00445	7e 2f		 jle	 SHORT $LN11@buffered_r@5

; 1014 :             n = _bufferedreader_raw_read(self, (char *) buf.buf + written,
; 1015 :                                          remaining);

  00447	48 8b 44 24 40	 mov	 rax, QWORD PTR written$[rsp]
  0044c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR buf$[rsp]
  00451	48 03 c8	 add	 rcx, rax
  00454	48 8b c1	 mov	 rax, rcx
  00457	4c 8b 44 24 48	 mov	 r8, QWORD PTR remaining$[rsp]
  0045c	48 8b d0	 mov	 rdx, rax
  0045f	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00467	e8 00 00 00 00	 call	 _bufferedreader_raw_read
  0046c	48 89 44 24 38	 mov	 QWORD PTR n$[rsp], rax

; 1016 :         }
; 1017 :         else {

  00471	e9 93 00 00 00	 jmp	 $LN10@buffered_r@5
$LN11@buffered_r@5:

; 1018 :             n = _bufferedreader_fill_buffer(self);

  00476	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  0047e	e8 00 00 00 00	 call	 _bufferedreader_fill_buffer
  00483	48 89 44 24 38	 mov	 QWORD PTR n$[rsp], rax

; 1019 :             if (n > 0) {

  00488	48 83 7c 24 38
	00		 cmp	 QWORD PTR n$[rsp], 0
  0048e	7e 79		 jle	 SHORT $LN9@buffered_r@5

; 1020 :                 if (n > remaining)

  00490	48 8b 44 24 48	 mov	 rax, QWORD PTR remaining$[rsp]
  00495	48 39 44 24 38	 cmp	 QWORD PTR n$[rsp], rax
  0049a	7e 0a		 jle	 SHORT $LN8@buffered_r@5

; 1021 :                     n = remaining;

  0049c	48 8b 44 24 48	 mov	 rax, QWORD PTR remaining$[rsp]
  004a1	48 89 44 24 38	 mov	 QWORD PTR n$[rsp], rax
$LN8@buffered_r@5:

; 1022 :                 memcpy((char *) buf.buf + written,
; 1023 :                        self->buffer + self->pos, n);

  004a6	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  004ae	48 8b 80 88 00
	00 00		 mov	 rax, QWORD PTR [rax+136]
  004b5	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  004bd	48 03 81 90 00
	00 00		 add	 rax, QWORD PTR [rcx+144]
  004c4	48 8b 4c 24 40	 mov	 rcx, QWORD PTR written$[rsp]
  004c9	48 8b 54 24 50	 mov	 rdx, QWORD PTR buf$[rsp]
  004ce	48 03 d1	 add	 rdx, rcx
  004d1	48 8b ca	 mov	 rcx, rdx
  004d4	4c 8b 44 24 38	 mov	 r8, QWORD PTR n$[rsp]
  004d9	48 8b d0	 mov	 rdx, rax
  004dc	e8 00 00 00 00	 call	 memcpy

; 1024 :                 self->pos += n;

  004e1	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  004e9	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  004f0	48 03 44 24 38	 add	 rax, QWORD PTR n$[rsp]
  004f5	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  004fd	48 89 81 90 00
	00 00		 mov	 QWORD PTR [rcx+144], rax

; 1025 :                 continue; /* short circuit */

  00504	e9 f2 fe ff ff	 jmp	 $LN13@buffered_r@5
$LN9@buffered_r@5:
$LN10@buffered_r@5:

; 1026 :             }
; 1027 :         }
; 1028 :         if (n == 0 || (n == -2 && written > 0))

  00509	48 83 7c 24 38
	00		 cmp	 QWORD PTR n$[rsp], 0
  0050f	74 10		 je	 SHORT $LN6@buffered_r@5
  00511	48 83 7c 24 38
	fe		 cmp	 QWORD PTR n$[rsp], -2
  00517	75 0a		 jne	 SHORT $LN7@buffered_r@5
  00519	48 83 7c 24 40
	00		 cmp	 QWORD PTR written$[rsp], 0
  0051f	7e 02		 jle	 SHORT $LN7@buffered_r@5
$LN6@buffered_r@5:

; 1029 :             break;

  00521	eb 2f		 jmp	 SHORT $LN12@buffered_r@5
$LN7@buffered_r@5:

; 1030 :         if (n < 0) {

  00523	48 83 7c 24 38
	00		 cmp	 QWORD PTR n$[rsp], 0
  00529	7d 22		 jge	 SHORT $LN5@buffered_r@5

; 1031 :             if (n == -2) {

  0052b	48 83 7c 24 38
	fe		 cmp	 QWORD PTR n$[rsp], -2
  00531	75 18		 jne	 SHORT $LN4@buffered_r@5

; 1032 :                 Py_INCREF(Py_None);

  00533	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  0053a	e8 00 00 00 00	 call	 _Py_IncRef

; 1033 :                 res = Py_None;

  0053f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00546	48 89 44 24 30	 mov	 QWORD PTR res$[rsp], rax
$LN4@buffered_r@5:

; 1034 :             }
; 1035 :             goto end;

  0054b	eb 14		 jmp	 SHORT $end$21308
$LN5@buffered_r@5:

; 1036 :         }
; 1037 :     }

  0054d	e9 a9 fe ff ff	 jmp	 $LN13@buffered_r@5
$LN12@buffered_r@5:

; 1038 :     res = PyLong_FromSsize_t(written);

  00552	48 8b 4c 24 40	 mov	 rcx, QWORD PTR written$[rsp]
  00557	e8 00 00 00 00	 call	 PyLong_FromSsize_t
  0055c	48 89 44 24 30	 mov	 QWORD PTR res$[rsp], rax
$end$21308:
$LN3@buffered_r@5:

; 1039 : 
; 1040 : end:
; 1041 :     LEAVE_BUFFERED(self);

  00561	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00569	c7 80 c0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+192], 0
  00573	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0057b	48 8b 88 b8 00
	00 00		 mov	 rcx, QWORD PTR [rax+184]
  00582	e8 00 00 00 00	 call	 PyThread_release_lock
  00587	33 c0		 xor	 eax, eax
  00589	85 c0		 test	 eax, eax
  0058b	75 d4		 jne	 SHORT $LN3@buffered_r@5
$end_unlocked$21302:

; 1042 : end_unlocked:
; 1043 :     PyBuffer_Release(&buf);

  0058d	48 8d 4c 24 50	 lea	 rcx, QWORD PTR buf$[rsp]
  00592	e8 00 00 00 00	 call	 PyBuffer_Release

; 1044 :     return res;

  00597	48 8b 44 24 30	 mov	 rax, QWORD PTR res$[rsp]
$LN29@buffered_r@5:

; 1045 : }

  0059c	48 81 c4 d8 00
	00 00		 add	 rsp, 216		; 000000d8H
  005a3	c3		 ret	 0
buffered_readinto ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@DLBPBHHK@?$HMO?$CG?3readline?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$buffered_readline DD imagerel buffered_readline
	DD	imagerel buffered_readline+146
	DD	imagerel $unwind$buffered_readline
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$buffered_readline DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT ??_C@_0N@DLBPBHHK@?$HMO?$CG?3readline?$AA@
CONST	SEGMENT
??_C@_0N@DLBPBHHK@?$HMO?$CG?3readline?$AA@ DB '|O&:readline', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT buffered_readline
_TEXT	SEGMENT
limit$ = 32
self$ = 64
args$ = 72
buffered_readline PROC					; COMDAT

; 1160 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1161 :     Py_ssize_t limit = -1;

  0000e	48 c7 44 24 20
	ff ff ff ff	 mov	 QWORD PTR limit$[rsp], -1

; 1162 : 
; 1163 :     CHECK_INITIALIZED(self)

  00017	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0001c	83 78 68 00	 cmp	 DWORD PTR [rax+104], 0
  00020	7f 37		 jg	 SHORT $LN4@buffered_r@6
  00022	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00027	83 78 6c 00	 cmp	 DWORD PTR [rax+108], 0
  0002b	74 15		 je	 SHORT $LN3@buffered_r@6
  0002d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@IOAMDFLF@raw?5stream?5has?5been?5detached?$AA@
  00034	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0003b	e8 00 00 00 00	 call	 PyErr_SetString
  00040	eb 13		 jmp	 SHORT $LN2@buffered_r@6
$LN3@buffered_r@6:
  00042	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
  00049	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00050	e8 00 00 00 00	 call	 PyErr_SetString
$LN2@buffered_r@6:
  00055	33 c0		 xor	 eax, eax
  00057	eb 34		 jmp	 SHORT $LN5@buffered_r@6
$LN4@buffered_r@6:

; 1164 :     if (!PyArg_ParseTuple(args, "|O&:readline", &_PyIO_ConvertSsize_t, &limit))

  00059	4c 8d 4c 24 20	 lea	 r9, QWORD PTR limit$[rsp]
  0005e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:_PyIO_ConvertSsize_t
  00065	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@DLBPBHHK@?$HMO?$CG?3readline?$AA@
  0006c	48 8b 4c 24 48	 mov	 rcx, QWORD PTR args$[rsp]
  00071	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00076	85 c0		 test	 eax, eax
  00078	75 04		 jne	 SHORT $LN1@buffered_r@6

; 1165 :         return NULL;

  0007a	33 c0		 xor	 eax, eax
  0007c	eb 0f		 jmp	 SHORT $LN5@buffered_r@6
$LN1@buffered_r@6:

; 1166 :     return _buffered_readline(self, limit);

  0007e	48 8b 54 24 20	 mov	 rdx, QWORD PTR limit$[rsp]
  00083	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  00088	e8 00 00 00 00	 call	 _buffered_readline
$LN5@buffered_r@6:

; 1167 : }

  0008d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00091	c3		 ret	 0
buffered_readline ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BD@DCNDJMFC@_buffered_readline?$AA@	; `string'
PUBLIC	??_C@_0BI@GJHAPCIJ@readline?5of?5closed?5file?$AA@ ; `string'
EXTRN	_PyBytes_Join:PROC
EXTRN	_PyIO_empty_bytes:QWORD
EXTRN	PyList_Append:PROC
EXTRN	PyList_New:PROC
EXTRN	__imp_memchr:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_buffered_readline DD imagerel _buffered_readline
	DD	imagerel _buffered_readline+2234
	DD	imagerel $unwind$_buffered_readline
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_buffered_readline DD 021101H
	DD	01b0111H
xdata	ENDS
;	COMDAT ??_C@_0BD@DCNDJMFC@_buffered_readline?$AA@
CONST	SEGMENT
??_C@_0BD@DCNDJMFC@_buffered_readline?$AA@ DB '_buffered_readline', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@GJHAPCIJ@readline?5of?5closed?5file?$AA@
CONST	SEGMENT
??_C@_0BI@GJHAPCIJ@readline?5of?5closed?5file?$AA@ DB 'readline of closed'
	DB	' file', 00H					; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _buffered_readline
_TEXT	SEGMENT
res$ = 48
n$ = 56
s$ = 64
written$ = 72
end$ = 80
start$ = 88
chunks$ = 96
_py_tmp$21380 = 104
_py_tmp$21388 = 112
r$21394 = 120
_py_tmp$21419 = 128
_py_tmp$21427 = 136
_py_tmp$21438 = 144
_py_tmp$21446 = 152
tv71 = 160
tv84 = 168
tv94 = 176
tv141 = 184
tv178 = 192
self$ = 224
limit$ = 232
_buffered_readline PROC					; COMDAT

; 1049 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec d8 00
	00 00		 sub	 rsp, 216		; 000000d8H

; 1050 :     PyObject *res = NULL;

  00011	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR res$[rsp], 0

; 1051 :     PyObject *chunks = NULL;

  0001a	48 c7 44 24 60
	00 00 00 00	 mov	 QWORD PTR chunks$[rsp], 0

; 1052 :     Py_ssize_t n, written = 0;

  00023	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR written$[rsp], 0

; 1053 :     const char *start, *s, *end;
; 1054 : 
; 1055 :     CHECK_CLOSED(self, "readline of closed file")

  0002c	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00034	83 78 7c 00	 cmp	 DWORD PTR [rax+124], 0
  00038	74 1a		 je	 SHORT $LN63@buffered_r@7
  0003a	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00042	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00046	e8 00 00 00 00	 call	 _PyFileIO_closed
  0004b	89 84 24 a0 00
	00 00		 mov	 DWORD PTR tv71[rsp], eax
  00052	eb 14		 jmp	 SHORT $LN64@buffered_r@7
$LN63@buffered_r@7:
  00054	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  0005c	e8 00 00 00 00	 call	 buffered_closed
  00061	89 84 24 a0 00
	00 00		 mov	 DWORD PTR tv71[rsp], eax
$LN64@buffered_r@7:
  00068	83 bc 24 a0 00
	00 00 00	 cmp	 DWORD PTR tv71[rsp], 0
  00070	74 1a		 je	 SHORT $LN60@buffered_r@7
  00072	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@GJHAPCIJ@readline?5of?5closed?5file?$AA@
  00079	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00080	e8 00 00 00 00	 call	 PyErr_SetString
  00085	33 c0		 xor	 eax, eax
  00087	e9 26 08 00 00	 jmp	 $LN61@buffered_r@7
$LN60@buffered_r@7:

; 1056 : 
; 1057 :     /* First, try to find a line in the buffer. This can run unlocked because
; 1058 :        the calls to the C API are simple enough that they can't trigger
; 1059 :        any thread switch. */
; 1060 :     n = Py_SAFE_DOWNCAST(READAHEAD(self), Py_off_t, Py_ssize_t);

  0008c	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00094	83 78 70 00	 cmp	 DWORD PTR [rax+112], 0
  00098	74 4b		 je	 SHORT $LN65@buffered_r@7
  0009a	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  000a2	83 78 70 00	 cmp	 DWORD PTR [rax+112], 0
  000a6	74 3d		 je	 SHORT $LN65@buffered_r@7
  000a8	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  000b0	48 83 b8 a0 00
	00 00 ff	 cmp	 QWORD PTR [rax+160], -1
  000b8	74 2b		 je	 SHORT $LN65@buffered_r@7
  000ba	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  000c2	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  000ca	48 8b 89 90 00
	00 00		 mov	 rcx, QWORD PTR [rcx+144]
  000d1	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  000d8	48 2b c1	 sub	 rax, rcx
  000db	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR tv84[rsp], rax
  000e3	eb 0c		 jmp	 SHORT $LN66@buffered_r@7
$LN65@buffered_r@7:
  000e5	48 c7 84 24 a8
	00 00 00 00 00
	00 00		 mov	 QWORD PTR tv84[rsp], 0
$LN66@buffered_r@7:
  000f1	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  000f9	83 78 70 00	 cmp	 DWORD PTR [rax+112], 0
  000fd	74 4b		 je	 SHORT $LN67@buffered_r@7
  000ff	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00107	83 78 70 00	 cmp	 DWORD PTR [rax+112], 0
  0010b	74 3d		 je	 SHORT $LN67@buffered_r@7
  0010d	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00115	48 83 b8 a0 00
	00 00 ff	 cmp	 QWORD PTR [rax+160], -1
  0011d	74 2b		 je	 SHORT $LN67@buffered_r@7
  0011f	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00127	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  0012f	48 8b 89 90 00
	00 00		 mov	 rcx, QWORD PTR [rcx+144]
  00136	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  0013d	48 2b c1	 sub	 rax, rcx
  00140	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR tv94[rsp], rax
  00148	eb 0c		 jmp	 SHORT $LN68@buffered_r@7
$LN67@buffered_r@7:
  0014a	48 c7 84 24 b0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR tv94[rsp], 0
$LN68@buffered_r@7:
  00156	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR tv94[rsp]
  0015e	48 39 84 24 a8
	00 00 00	 cmp	 QWORD PTR tv84[rsp], rax
  00166	74 1c		 je	 SHORT $LN69@buffered_r@7
  00168	41 b8 24 04 00
	00		 mov	 r8d, 1060		; 00000424H
  0016e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DI@KBAIHMCO@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AAe?$AAd?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  00175	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BMC@JMFDOGAF@?$AA?$CI?$AAP?$AAy?$AA_?$AAo?$AAf?$AAf?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AAP?$AAy?$AA_?$AAs?$AAs?$AAi?$AAz?$AAe?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AA?$CI?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAr@
  0017c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00182	33 c0		 xor	 eax, eax
$LN69@buffered_r@7:
  00184	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0018c	83 78 70 00	 cmp	 DWORD PTR [rax+112], 0
  00190	74 4b		 je	 SHORT $LN70@buffered_r@7
  00192	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0019a	83 78 70 00	 cmp	 DWORD PTR [rax+112], 0
  0019e	74 3d		 je	 SHORT $LN70@buffered_r@7
  001a0	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  001a8	48 83 b8 a0 00
	00 00 ff	 cmp	 QWORD PTR [rax+160], -1
  001b0	74 2b		 je	 SHORT $LN70@buffered_r@7
  001b2	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  001ba	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  001c2	48 8b 89 90 00
	00 00		 mov	 rcx, QWORD PTR [rcx+144]
  001c9	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  001d0	48 2b c1	 sub	 rax, rcx
  001d3	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR tv141[rsp], rax
  001db	eb 0c		 jmp	 SHORT $LN71@buffered_r@7
$LN70@buffered_r@7:
  001dd	48 c7 84 24 b8
	00 00 00 00 00
	00 00		 mov	 QWORD PTR tv141[rsp], 0
$LN71@buffered_r@7:
  001e9	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR tv141[rsp]
  001f1	48 89 44 24 38	 mov	 QWORD PTR n$[rsp], rax

; 1061 :     if (limit >= 0 && n > limit)

  001f6	48 83 bc 24 e8
	00 00 00 00	 cmp	 QWORD PTR limit$[rsp], 0
  001ff	7c 1c		 jl	 SHORT $LN59@buffered_r@7
  00201	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR limit$[rsp]
  00209	48 39 44 24 38	 cmp	 QWORD PTR n$[rsp], rax
  0020e	7e 0d		 jle	 SHORT $LN59@buffered_r@7

; 1062 :         n = limit;

  00210	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR limit$[rsp]
  00218	48 89 44 24 38	 mov	 QWORD PTR n$[rsp], rax
$LN59@buffered_r@7:

; 1063 :     start = self->buffer + self->pos;

  0021d	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00225	48 8b 80 88 00
	00 00		 mov	 rax, QWORD PTR [rax+136]
  0022c	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00234	48 03 81 90 00
	00 00		 add	 rax, QWORD PTR [rcx+144]
  0023b	48 89 44 24 58	 mov	 QWORD PTR start$[rsp], rax

; 1064 :     s = memchr(start, '\n', n);

  00240	4c 8b 44 24 38	 mov	 r8, QWORD PTR n$[rsp]
  00245	ba 0a 00 00 00	 mov	 edx, 10
  0024a	48 8b 4c 24 58	 mov	 rcx, QWORD PTR start$[rsp]
  0024f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_memchr
  00255	48 89 44 24 40	 mov	 QWORD PTR s$[rsp], rax

; 1065 :     if (s != NULL) {

  0025a	48 83 7c 24 40
	00		 cmp	 QWORD PTR s$[rsp], 0
  00260	74 65		 je	 SHORT $LN58@buffered_r@7

; 1066 :         res = PyBytes_FromStringAndSize(start, s - start + 1);

  00262	48 8b 44 24 58	 mov	 rax, QWORD PTR start$[rsp]
  00267	48 8b 4c 24 40	 mov	 rcx, QWORD PTR s$[rsp]
  0026c	48 2b c8	 sub	 rcx, rax
  0026f	48 8b c1	 mov	 rax, rcx
  00272	48 ff c0	 inc	 rax
  00275	48 8b d0	 mov	 rdx, rax
  00278	48 8b 4c 24 58	 mov	 rcx, QWORD PTR start$[rsp]
  0027d	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  00282	48 89 44 24 30	 mov	 QWORD PTR res$[rsp], rax

; 1067 :         if (res != NULL)

  00287	48 83 7c 24 30
	00		 cmp	 QWORD PTR res$[rsp], 0
  0028d	74 33		 je	 SHORT $LN57@buffered_r@7

; 1068 :             self->pos += s - start + 1;

  0028f	48 8b 44 24 58	 mov	 rax, QWORD PTR start$[rsp]
  00294	48 8b 4c 24 40	 mov	 rcx, QWORD PTR s$[rsp]
  00299	48 2b c8	 sub	 rcx, rax
  0029c	48 8b c1	 mov	 rax, rcx
  0029f	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  002a7	48 8b 89 90 00
	00 00		 mov	 rcx, QWORD PTR [rcx+144]
  002ae	48 8d 44 08 01	 lea	 rax, QWORD PTR [rax+rcx+1]
  002b3	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  002bb	48 89 81 90 00
	00 00		 mov	 QWORD PTR [rcx+144], rax
$LN57@buffered_r@7:

; 1069 :         goto end_unlocked;

  002c2	e9 ce 05 00 00	 jmp	 $end_unlocked$21362
$LN58@buffered_r@7:

; 1070 :     }
; 1071 :     if (n == limit) {

  002c7	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR limit$[rsp]
  002cf	48 39 44 24 38	 cmp	 QWORD PTR n$[rsp], rax
  002d4	75 44		 jne	 SHORT $LN56@buffered_r@7

; 1072 :         res = PyBytes_FromStringAndSize(start, n);

  002d6	48 8b 54 24 38	 mov	 rdx, QWORD PTR n$[rsp]
  002db	48 8b 4c 24 58	 mov	 rcx, QWORD PTR start$[rsp]
  002e0	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  002e5	48 89 44 24 30	 mov	 QWORD PTR res$[rsp], rax

; 1073 :         if (res != NULL)

  002ea	48 83 7c 24 30
	00		 cmp	 QWORD PTR res$[rsp], 0
  002f0	74 23		 je	 SHORT $LN55@buffered_r@7

; 1074 :             self->pos += n;

  002f2	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  002fa	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  00301	48 03 44 24 38	 add	 rax, QWORD PTR n$[rsp]
  00306	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  0030e	48 89 81 90 00
	00 00		 mov	 QWORD PTR [rcx+144], rax
$LN55@buffered_r@7:

; 1075 :         goto end_unlocked;

  00315	e9 7b 05 00 00	 jmp	 $end_unlocked$21362
$LN56@buffered_r@7:

; 1076 :     }
; 1077 : 
; 1078 :     if (!ENTER_BUFFERED(self))

  0031a	33 d2		 xor	 edx, edx
  0031c	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00324	48 8b 88 b8 00
	00 00		 mov	 rcx, QWORD PTR [rax+184]
  0032b	e8 00 00 00 00	 call	 PyThread_acquire_lock
  00330	85 c0		 test	 eax, eax
  00332	74 0d		 je	 SHORT $LN72@buffered_r@7
  00334	c7 84 24 c0 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv178[rsp], 1
  0033f	eb 14		 jmp	 SHORT $LN73@buffered_r@7
$LN72@buffered_r@7:
  00341	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00349	e8 00 00 00 00	 call	 _enter_buffered_busy
  0034e	89 84 24 c0 00
	00 00		 mov	 DWORD PTR tv178[rsp], eax
$LN73@buffered_r@7:
  00355	83 bc 24 c0 00
	00 00 00	 cmp	 DWORD PTR tv178[rsp], 0
  0035d	74 1a		 je	 SHORT $LN53@buffered_r@7
  0035f	e8 00 00 00 00	 call	 PyThread_get_thread_ident
  00364	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  0036c	89 81 c0 00 00
	00		 mov	 DWORD PTR [rcx+192], eax
  00372	33 c0		 xor	 eax, eax
  00374	83 f8 01	 cmp	 eax, 1
  00377	75 05		 jne	 SHORT $LN54@buffered_r@7
$LN53@buffered_r@7:

; 1079 :         goto end_unlocked;

  00379	e9 17 05 00 00	 jmp	 $end_unlocked$21362
$LN54@buffered_r@7:

; 1080 : 
; 1081 :     /* Now we try to get some more from the raw stream */
; 1082 :     chunks = PyList_New(0);

  0037e	33 c9		 xor	 ecx, ecx
  00380	e8 00 00 00 00	 call	 PyList_New
  00385	48 89 44 24 60	 mov	 QWORD PTR chunks$[rsp], rax

; 1083 :     if (chunks == NULL)

  0038a	48 83 7c 24 60
	00		 cmp	 QWORD PTR chunks$[rsp], 0
  00390	75 05		 jne	 SHORT $LN52@buffered_r@7

; 1084 :         goto end;

  00392	e9 d2 04 00 00	 jmp	 $end$21370
$LN52@buffered_r@7:

; 1085 :     if (n > 0) {

  00397	48 83 7c 24 38
	00		 cmp	 QWORD PTR n$[rsp], 0
  0039d	0f 8e 41 01 00
	00		 jle	 $LN51@buffered_r@7

; 1086 :         res = PyBytes_FromStringAndSize(start, n);

  003a3	48 8b 54 24 38	 mov	 rdx, QWORD PTR n$[rsp]
  003a8	48 8b 4c 24 58	 mov	 rcx, QWORD PTR start$[rsp]
  003ad	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  003b2	48 89 44 24 30	 mov	 QWORD PTR res$[rsp], rax

; 1087 :         if (res == NULL)

  003b7	48 83 7c 24 30
	00		 cmp	 QWORD PTR res$[rsp], 0
  003bd	75 05		 jne	 SHORT $LN50@buffered_r@7

; 1088 :             goto end;

  003bf	e9 a5 04 00 00	 jmp	 $end$21370
$LN50@buffered_r@7:

; 1089 :         if (PyList_Append(chunks, res) < 0) {

  003c4	48 8b 54 24 30	 mov	 rdx, QWORD PTR res$[rsp]
  003c9	48 8b 4c 24 60	 mov	 rcx, QWORD PTR chunks$[rsp]
  003ce	e8 00 00 00 00	 call	 PyList_Append
  003d3	85 c0		 test	 eax, eax
  003d5	7d 5a		 jge	 SHORT $LN49@buffered_r@7
$LN48@buffered_r@7:

; 1090 :             Py_CLEAR(res);

  003d7	48 83 7c 24 30
	00		 cmp	 QWORD PTR res$[rsp], 0
  003dd	74 47		 je	 SHORT $LN45@buffered_r@7
  003df	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  003e7	4c 8b 4c 24 30	 mov	 r9, QWORD PTR res$[rsp]
  003ec	41 b8 42 04 00
	00		 mov	 r8d, 1090		; 00000442H
  003f2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@DICDDJFP@?4?4?2Modules?2_io?2bufferedio?4c?$AA@
  003f9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@DCNDJMFC@_buffered_readline?$AA@
  00400	e8 00 00 00 00	 call	 _PyParallel_Guard
  00405	85 c0		 test	 eax, eax
  00407	75 1d		 jne	 SHORT $LN45@buffered_r@7
  00409	48 8b 44 24 30	 mov	 rax, QWORD PTR res$[rsp]
  0040e	48 89 44 24 68	 mov	 QWORD PTR _py_tmp$21380[rsp], rax
  00413	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR res$[rsp], 0
  0041c	48 8b 4c 24 68	 mov	 rcx, QWORD PTR _py_tmp$21380[rsp]
  00421	e8 00 00 00 00	 call	 _Py_DecRef
$LN45@buffered_r@7:
  00426	33 c0		 xor	 eax, eax
  00428	85 c0		 test	 eax, eax
  0042a	75 ab		 jne	 SHORT $LN48@buffered_r@7

; 1091 :             goto end;

  0042c	e9 38 04 00 00	 jmp	 $end$21370
$LN49@buffered_r@7:
$LN44@buffered_r@7:

; 1092 :         }
; 1093 :         Py_CLEAR(res);

  00431	48 83 7c 24 30
	00		 cmp	 QWORD PTR res$[rsp], 0
  00437	74 47		 je	 SHORT $LN41@buffered_r@7
  00439	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00441	4c 8b 4c 24 30	 mov	 r9, QWORD PTR res$[rsp]
  00446	41 b8 45 04 00
	00		 mov	 r8d, 1093		; 00000445H
  0044c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@DICDDJFP@?4?4?2Modules?2_io?2bufferedio?4c?$AA@
  00453	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@DCNDJMFC@_buffered_readline?$AA@
  0045a	e8 00 00 00 00	 call	 _PyParallel_Guard
  0045f	85 c0		 test	 eax, eax
  00461	75 1d		 jne	 SHORT $LN41@buffered_r@7
  00463	48 8b 44 24 30	 mov	 rax, QWORD PTR res$[rsp]
  00468	48 89 44 24 70	 mov	 QWORD PTR _py_tmp$21388[rsp], rax
  0046d	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR res$[rsp], 0
  00476	48 8b 4c 24 70	 mov	 rcx, QWORD PTR _py_tmp$21388[rsp]
  0047b	e8 00 00 00 00	 call	 _Py_DecRef
$LN41@buffered_r@7:
  00480	33 c0		 xor	 eax, eax
  00482	85 c0		 test	 eax, eax
  00484	75 ab		 jne	 SHORT $LN44@buffered_r@7

; 1094 :         written += n;

  00486	48 8b 44 24 38	 mov	 rax, QWORD PTR n$[rsp]
  0048b	48 8b 4c 24 48	 mov	 rcx, QWORD PTR written$[rsp]
  00490	48 03 c8	 add	 rcx, rax
  00493	48 8b c1	 mov	 rax, rcx
  00496	48 89 44 24 48	 mov	 QWORD PTR written$[rsp], rax

; 1095 :         self->pos += n;

  0049b	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  004a3	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  004aa	48 03 44 24 38	 add	 rax, QWORD PTR n$[rsp]
  004af	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  004b7	48 89 81 90 00
	00 00		 mov	 QWORD PTR [rcx+144], rax

; 1096 :         if (limit >= 0)

  004be	48 83 bc 24 e8
	00 00 00 00	 cmp	 QWORD PTR limit$[rsp], 0
  004c7	7c 1b		 jl	 SHORT $LN40@buffered_r@7

; 1097 :             limit -= n;

  004c9	48 8b 44 24 38	 mov	 rax, QWORD PTR n$[rsp]
  004ce	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR limit$[rsp]
  004d6	48 2b c8	 sub	 rcx, rax
  004d9	48 8b c1	 mov	 rax, rcx
  004dc	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR limit$[rsp], rax
$LN40@buffered_r@7:
$LN51@buffered_r@7:

; 1098 :     }
; 1099 :     if (self->writable) {

  004e4	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  004ec	83 78 74 00	 cmp	 DWORD PTR [rax+116], 0
  004f0	74 29		 je	 SHORT $LN39@buffered_r@7

; 1100 :         PyObject *r = buffered_flush_and_rewind_unlocked(self);

  004f2	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  004fa	e8 00 00 00 00	 call	 buffered_flush_and_rewind_unlocked
  004ff	48 89 44 24 78	 mov	 QWORD PTR r$21394[rsp], rax

; 1101 :         if (r == NULL)

  00504	48 83 7c 24 78
	00		 cmp	 QWORD PTR r$21394[rsp], 0
  0050a	75 05		 jne	 SHORT $LN38@buffered_r@7

; 1102 :             goto end;

  0050c	e9 58 03 00 00	 jmp	 $end$21370
$LN38@buffered_r@7:

; 1103 :         Py_DECREF(r);

  00511	48 8b 4c 24 78	 mov	 rcx, QWORD PTR r$21394[rsp]
  00516	e8 00 00 00 00	 call	 _Py_DecRef
$LN39@buffered_r@7:
$LN37@buffered_r@7:

; 1104 :     }
; 1105 : 
; 1106 :     for (;;) {
; 1107 :         _bufferedreader_reset_buf(self);

  0051b	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00523	e8 00 00 00 00	 call	 _bufferedreader_reset_buf

; 1108 :         n = _bufferedreader_fill_buffer(self);

  00528	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00530	e8 00 00 00 00	 call	 _bufferedreader_fill_buffer
  00535	48 89 44 24 38	 mov	 QWORD PTR n$[rsp], rax

; 1109 :         if (n == -1)

  0053a	48 83 7c 24 38
	ff		 cmp	 QWORD PTR n$[rsp], -1
  00540	75 05		 jne	 SHORT $LN35@buffered_r@7

; 1110 :             goto end;

  00542	e9 22 03 00 00	 jmp	 $end$21370
$LN35@buffered_r@7:

; 1111 :         if (n <= 0)

  00547	48 83 7c 24 38
	00		 cmp	 QWORD PTR n$[rsp], 0
  0054d	7f 05		 jg	 SHORT $LN34@buffered_r@7

; 1112 :             break;

  0054f	e9 2c 02 00 00	 jmp	 $LN36@buffered_r@7
$LN34@buffered_r@7:

; 1113 :         if (limit >= 0 && n > limit)

  00554	48 83 bc 24 e8
	00 00 00 00	 cmp	 QWORD PTR limit$[rsp], 0
  0055d	7c 1c		 jl	 SHORT $LN33@buffered_r@7
  0055f	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR limit$[rsp]
  00567	48 39 44 24 38	 cmp	 QWORD PTR n$[rsp], rax
  0056c	7e 0d		 jle	 SHORT $LN33@buffered_r@7

; 1114 :             n = limit;

  0056e	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR limit$[rsp]
  00576	48 89 44 24 38	 mov	 QWORD PTR n$[rsp], rax
$LN33@buffered_r@7:

; 1115 :         start = self->buffer;

  0057b	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00583	48 8b 80 88 00
	00 00		 mov	 rax, QWORD PTR [rax+136]
  0058a	48 89 44 24 58	 mov	 QWORD PTR start$[rsp], rax

; 1116 :         end = start + n;

  0058f	48 8b 44 24 38	 mov	 rax, QWORD PTR n$[rsp]
  00594	48 8b 4c 24 58	 mov	 rcx, QWORD PTR start$[rsp]
  00599	48 03 c8	 add	 rcx, rax
  0059c	48 8b c1	 mov	 rax, rcx
  0059f	48 89 44 24 50	 mov	 QWORD PTR end$[rsp], rax

; 1117 :         s = start;

  005a4	48 8b 44 24 58	 mov	 rax, QWORD PTR start$[rsp]
  005a9	48 89 44 24 40	 mov	 QWORD PTR s$[rsp], rax
$LN32@buffered_r@7:

; 1118 :         while (s < end) {

  005ae	48 8b 44 24 50	 mov	 rax, QWORD PTR end$[rsp]
  005b3	48 39 44 24 40	 cmp	 QWORD PTR s$[rsp], rax
  005b8	73 6f		 jae	 SHORT $LN31@buffered_r@7

; 1119 :             if (*s++ == '\n') {

  005ba	48 8b 44 24 40	 mov	 rax, QWORD PTR s$[rsp]
  005bf	0f be 00	 movsx	 eax, BYTE PTR [rax]
  005c2	48 8b 4c 24 40	 mov	 rcx, QWORD PTR s$[rsp]
  005c7	48 ff c1	 inc	 rcx
  005ca	48 89 4c 24 40	 mov	 QWORD PTR s$[rsp], rcx
  005cf	83 f8 0a	 cmp	 eax, 10
  005d2	75 53		 jne	 SHORT $LN30@buffered_r@7

; 1120 :                 res = PyBytes_FromStringAndSize(start, s - start);

  005d4	48 8b 44 24 58	 mov	 rax, QWORD PTR start$[rsp]
  005d9	48 8b 4c 24 40	 mov	 rcx, QWORD PTR s$[rsp]
  005de	48 2b c8	 sub	 rcx, rax
  005e1	48 8b c1	 mov	 rax, rcx
  005e4	48 8b d0	 mov	 rdx, rax
  005e7	48 8b 4c 24 58	 mov	 rcx, QWORD PTR start$[rsp]
  005ec	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  005f1	48 89 44 24 30	 mov	 QWORD PTR res$[rsp], rax

; 1121 :                 if (res == NULL)

  005f6	48 83 7c 24 30
	00		 cmp	 QWORD PTR res$[rsp], 0
  005fc	75 05		 jne	 SHORT $LN29@buffered_r@7

; 1122 :                     goto end;

  005fe	e9 66 02 00 00	 jmp	 $end$21370
$LN29@buffered_r@7:

; 1123 :                 self->pos = s - start;

  00603	48 8b 44 24 58	 mov	 rax, QWORD PTR start$[rsp]
  00608	48 8b 4c 24 40	 mov	 rcx, QWORD PTR s$[rsp]
  0060d	48 2b c8	 sub	 rcx, rax
  00610	48 8b c1	 mov	 rax, rcx
  00613	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  0061b	48 89 81 90 00
	00 00		 mov	 QWORD PTR [rcx+144], rax

; 1124 :                 goto found;

  00622	e9 59 01 00 00	 jmp	 $found$21410
$LN30@buffered_r@7:

; 1125 :             }
; 1126 :         }

  00627	eb 85		 jmp	 SHORT $LN32@buffered_r@7
$LN31@buffered_r@7:

; 1127 :         res = PyBytes_FromStringAndSize(start, n);

  00629	48 8b 54 24 38	 mov	 rdx, QWORD PTR n$[rsp]
  0062e	48 8b 4c 24 58	 mov	 rcx, QWORD PTR start$[rsp]
  00633	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  00638	48 89 44 24 30	 mov	 QWORD PTR res$[rsp], rax

; 1128 :         if (res == NULL)

  0063d	48 83 7c 24 30
	00		 cmp	 QWORD PTR res$[rsp], 0
  00643	75 05		 jne	 SHORT $LN28@buffered_r@7

; 1129 :             goto end;

  00645	e9 1f 02 00 00	 jmp	 $end$21370
$LN28@buffered_r@7:

; 1130 :         if (n == limit) {

  0064a	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR limit$[rsp]
  00652	48 39 44 24 38	 cmp	 QWORD PTR n$[rsp], rax
  00657	75 19		 jne	 SHORT $LN27@buffered_r@7

; 1131 :             self->pos = n;

  00659	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00661	48 8b 4c 24 38	 mov	 rcx, QWORD PTR n$[rsp]
  00666	48 89 88 90 00
	00 00		 mov	 QWORD PTR [rax+144], rcx

; 1132 :             break;

  0066d	e9 0e 01 00 00	 jmp	 $LN36@buffered_r@7
$LN27@buffered_r@7:

; 1133 :         }
; 1134 :         if (PyList_Append(chunks, res) < 0) {

  00672	48 8b 54 24 30	 mov	 rdx, QWORD PTR res$[rsp]
  00677	48 8b 4c 24 60	 mov	 rcx, QWORD PTR chunks$[rsp]
  0067c	e8 00 00 00 00	 call	 PyList_Append
  00681	85 c0		 test	 eax, eax
  00683	7d 60		 jge	 SHORT $LN26@buffered_r@7
$LN25@buffered_r@7:

; 1135 :             Py_CLEAR(res);

  00685	48 83 7c 24 30
	00		 cmp	 QWORD PTR res$[rsp], 0
  0068b	74 4d		 je	 SHORT $LN22@buffered_r@7
  0068d	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00695	4c 8b 4c 24 30	 mov	 r9, QWORD PTR res$[rsp]
  0069a	41 b8 6f 04 00
	00		 mov	 r8d, 1135		; 0000046fH
  006a0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@DICDDJFP@?4?4?2Modules?2_io?2bufferedio?4c?$AA@
  006a7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@DCNDJMFC@_buffered_readline?$AA@
  006ae	e8 00 00 00 00	 call	 _PyParallel_Guard
  006b3	85 c0		 test	 eax, eax
  006b5	75 23		 jne	 SHORT $LN22@buffered_r@7
  006b7	48 8b 44 24 30	 mov	 rax, QWORD PTR res$[rsp]
  006bc	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR _py_tmp$21419[rsp], rax
  006c4	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR res$[rsp], 0
  006cd	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR _py_tmp$21419[rsp]
  006d5	e8 00 00 00 00	 call	 _Py_DecRef
$LN22@buffered_r@7:
  006da	33 c0		 xor	 eax, eax
  006dc	85 c0		 test	 eax, eax
  006de	75 a5		 jne	 SHORT $LN25@buffered_r@7

; 1136 :             goto end;

  006e0	e9 84 01 00 00	 jmp	 $end$21370
$LN26@buffered_r@7:
$LN21@buffered_r@7:

; 1137 :         }
; 1138 :         Py_CLEAR(res);

  006e5	48 83 7c 24 30
	00		 cmp	 QWORD PTR res$[rsp], 0
  006eb	74 4d		 je	 SHORT $LN18@buffered_r@7
  006ed	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  006f5	4c 8b 4c 24 30	 mov	 r9, QWORD PTR res$[rsp]
  006fa	41 b8 72 04 00
	00		 mov	 r8d, 1138		; 00000472H
  00700	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@DICDDJFP@?4?4?2Modules?2_io?2bufferedio?4c?$AA@
  00707	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@DCNDJMFC@_buffered_readline?$AA@
  0070e	e8 00 00 00 00	 call	 _PyParallel_Guard
  00713	85 c0		 test	 eax, eax
  00715	75 23		 jne	 SHORT $LN18@buffered_r@7
  00717	48 8b 44 24 30	 mov	 rax, QWORD PTR res$[rsp]
  0071c	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR _py_tmp$21427[rsp], rax
  00724	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR res$[rsp], 0
  0072d	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR _py_tmp$21427[rsp]
  00735	e8 00 00 00 00	 call	 _Py_DecRef
$LN18@buffered_r@7:
  0073a	33 c0		 xor	 eax, eax
  0073c	85 c0		 test	 eax, eax
  0073e	75 a5		 jne	 SHORT $LN21@buffered_r@7

; 1139 :         written += n;

  00740	48 8b 44 24 38	 mov	 rax, QWORD PTR n$[rsp]
  00745	48 8b 4c 24 48	 mov	 rcx, QWORD PTR written$[rsp]
  0074a	48 03 c8	 add	 rcx, rax
  0074d	48 8b c1	 mov	 rax, rcx
  00750	48 89 44 24 48	 mov	 QWORD PTR written$[rsp], rax

; 1140 :         if (limit >= 0)

  00755	48 83 bc 24 e8
	00 00 00 00	 cmp	 QWORD PTR limit$[rsp], 0
  0075e	7c 1b		 jl	 SHORT $LN17@buffered_r@7

; 1141 :             limit -= n;

  00760	48 8b 44 24 38	 mov	 rax, QWORD PTR n$[rsp]
  00765	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR limit$[rsp]
  0076d	48 2b c8	 sub	 rcx, rax
  00770	48 8b c1	 mov	 rax, rcx
  00773	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR limit$[rsp], rax
$LN17@buffered_r@7:

; 1142 :     }

  0077b	e9 9b fd ff ff	 jmp	 $LN37@buffered_r@7
$LN36@buffered_r@7:
$found$21410:

; 1143 : found:
; 1144 :     if (res != NULL && PyList_Append(chunks, res) < 0) {

  00780	48 83 7c 24 30
	00		 cmp	 QWORD PTR res$[rsp], 0
  00786	74 70		 je	 SHORT $LN16@buffered_r@7
  00788	48 8b 54 24 30	 mov	 rdx, QWORD PTR res$[rsp]
  0078d	48 8b 4c 24 60	 mov	 rcx, QWORD PTR chunks$[rsp]
  00792	e8 00 00 00 00	 call	 PyList_Append
  00797	85 c0		 test	 eax, eax
  00799	7d 5d		 jge	 SHORT $LN16@buffered_r@7
$LN15@buffered_r@7:

; 1145 :         Py_CLEAR(res);

  0079b	48 83 7c 24 30
	00		 cmp	 QWORD PTR res$[rsp], 0
  007a1	74 4d		 je	 SHORT $LN12@buffered_r@7
  007a3	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  007ab	4c 8b 4c 24 30	 mov	 r9, QWORD PTR res$[rsp]
  007b0	41 b8 79 04 00
	00		 mov	 r8d, 1145		; 00000479H
  007b6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@DICDDJFP@?4?4?2Modules?2_io?2bufferedio?4c?$AA@
  007bd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@DCNDJMFC@_buffered_readline?$AA@
  007c4	e8 00 00 00 00	 call	 _PyParallel_Guard
  007c9	85 c0		 test	 eax, eax
  007cb	75 23		 jne	 SHORT $LN12@buffered_r@7
  007cd	48 8b 44 24 30	 mov	 rax, QWORD PTR res$[rsp]
  007d2	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR _py_tmp$21438[rsp], rax
  007da	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR res$[rsp], 0
  007e3	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR _py_tmp$21438[rsp]
  007eb	e8 00 00 00 00	 call	 _Py_DecRef
$LN12@buffered_r@7:
  007f0	33 c0		 xor	 eax, eax
  007f2	85 c0		 test	 eax, eax
  007f4	75 a5		 jne	 SHORT $LN15@buffered_r@7

; 1146 :         goto end;

  007f6	eb 71		 jmp	 SHORT $end$21370
$LN16@buffered_r@7:
$LN11@buffered_r@7:

; 1147 :     }
; 1148 :     Py_CLEAR(res);

  007f8	48 83 7c 24 30
	00		 cmp	 QWORD PTR res$[rsp], 0
  007fe	74 4d		 je	 SHORT $LN8@buffered_r@7
  00800	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00808	4c 8b 4c 24 30	 mov	 r9, QWORD PTR res$[rsp]
  0080d	41 b8 7c 04 00
	00		 mov	 r8d, 1148		; 0000047cH
  00813	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@DICDDJFP@?4?4?2Modules?2_io?2bufferedio?4c?$AA@
  0081a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@DCNDJMFC@_buffered_readline?$AA@
  00821	e8 00 00 00 00	 call	 _PyParallel_Guard
  00826	85 c0		 test	 eax, eax
  00828	75 23		 jne	 SHORT $LN8@buffered_r@7
  0082a	48 8b 44 24 30	 mov	 rax, QWORD PTR res$[rsp]
  0082f	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR _py_tmp$21446[rsp], rax
  00837	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR res$[rsp], 0
  00840	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR _py_tmp$21446[rsp]
  00848	e8 00 00 00 00	 call	 _Py_DecRef
$LN8@buffered_r@7:
  0084d	33 c0		 xor	 eax, eax
  0084f	85 c0		 test	 eax, eax
  00851	75 a5		 jne	 SHORT $LN11@buffered_r@7

; 1149 :     res = _PyBytes_Join(_PyIO_empty_bytes, chunks);

  00853	48 8b 54 24 60	 mov	 rdx, QWORD PTR chunks$[rsp]
  00858	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR _PyIO_empty_bytes
  0085f	e8 00 00 00 00	 call	 _PyBytes_Join
  00864	48 89 44 24 30	 mov	 QWORD PTR res$[rsp], rax
$end$21370:
$LN7@buffered_r@7:

; 1150 : 
; 1151 : end:
; 1152 :     LEAVE_BUFFERED(self)

  00869	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00871	c7 80 c0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+192], 0
  0087b	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00883	48 8b 88 b8 00
	00 00		 mov	 rcx, QWORD PTR [rax+184]
  0088a	e8 00 00 00 00	 call	 PyThread_release_lock
  0088f	33 c0		 xor	 eax, eax
  00891	85 c0		 test	 eax, eax
  00893	75 d4		 jne	 SHORT $LN7@buffered_r@7
$end_unlocked$21362:
$LN4@buffered_r@7:

; 1153 : end_unlocked:
; 1154 :     Py_XDECREF(chunks);

  00895	48 83 7c 24 60
	00		 cmp	 QWORD PTR chunks$[rsp], 0
  0089b	74 0a		 je	 SHORT $LN1@buffered_r@7
  0089d	48 8b 4c 24 60	 mov	 rcx, QWORD PTR chunks$[rsp]
  008a2	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@buffered_r@7:
  008a7	33 c0		 xor	 eax, eax
  008a9	85 c0		 test	 eax, eax
  008ab	75 e8		 jne	 SHORT $LN4@buffered_r@7

; 1155 :     return res;

  008ad	48 8b 44 24 30	 mov	 rax, QWORD PTR res$[rsp]
$LN61@buffered_r@7:

; 1156 : }

  008b2	48 81 c4 d8 00
	00 00		 add	 rsp, 216		; 000000d8H
  008b9	c3		 ret	 0
_buffered_readline ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$buffered_tell DD imagerel buffered_tell
	DD	imagerel buffered_tell+259
	DD	imagerel $unwind$buffered_tell
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$buffered_tell DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT buffered_tell
_TEXT	SEGMENT
pos$ = 32
tv88 = 40
self$ = 64
args$ = 72
buffered_tell PROC					; COMDAT

; 1172 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1173 :     Py_off_t pos;
; 1174 : 
; 1175 :     CHECK_INITIALIZED(self)

  0000e	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00013	83 78 68 00	 cmp	 DWORD PTR [rax+104], 0
  00017	7f 3a		 jg	 SHORT $LN4@buffered_t@2
  00019	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0001e	83 78 6c 00	 cmp	 DWORD PTR [rax+108], 0
  00022	74 15		 je	 SHORT $LN3@buffered_t@2
  00024	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@IOAMDFLF@raw?5stream?5has?5been?5detached?$AA@
  0002b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00032	e8 00 00 00 00	 call	 PyErr_SetString
  00037	eb 13		 jmp	 SHORT $LN2@buffered_t@2
$LN3@buffered_t@2:
  00039	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
  00040	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00047	e8 00 00 00 00	 call	 PyErr_SetString
$LN2@buffered_t@2:
  0004c	33 c0		 xor	 eax, eax
  0004e	e9 ab 00 00 00	 jmp	 $LN5@buffered_t@2
$LN4@buffered_t@2:

; 1176 :     pos = _buffered_raw_tell(self);

  00053	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  00058	e8 00 00 00 00	 call	 _buffered_raw_tell
  0005d	48 89 44 24 20	 mov	 QWORD PTR pos$[rsp], rax

; 1177 :     if (pos == -1)

  00062	48 83 7c 24 20
	ff		 cmp	 QWORD PTR pos$[rsp], -1
  00068	75 07		 jne	 SHORT $LN1@buffered_t@2

; 1178 :         return NULL;

  0006a	33 c0		 xor	 eax, eax
  0006c	e9 8d 00 00 00	 jmp	 $LN5@buffered_t@2
$LN1@buffered_t@2:

; 1179 :     pos -= RAW_OFFSET(self);

  00071	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00076	83 78 70 00	 cmp	 DWORD PTR [rax+112], 0
  0007a	74 0f		 je	 SHORT $LN7@buffered_t@2
  0007c	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00081	48 83 b8 a0 00
	00 00 ff	 cmp	 QWORD PTR [rax+160], -1
  00089	75 1a		 jne	 SHORT $LN9@buffered_t@2
$LN7@buffered_t@2:
  0008b	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00090	83 78 74 00	 cmp	 DWORD PTR [rax+116], 0
  00094	74 40		 je	 SHORT $LN8@buffered_t@2
  00096	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0009b	48 83 b8 b0 00
	00 00 ff	 cmp	 QWORD PTR [rax+176], -1
  000a3	74 31		 je	 SHORT $LN8@buffered_t@2
$LN9@buffered_t@2:
  000a5	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  000aa	48 83 b8 98 00
	00 00 00	 cmp	 QWORD PTR [rax+152], 0
  000b2	7c 22		 jl	 SHORT $LN8@buffered_t@2
  000b4	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  000b9	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  000be	48 8b 89 90 00
	00 00		 mov	 rcx, QWORD PTR [rcx+144]
  000c5	48 8b 80 98 00
	00 00		 mov	 rax, QWORD PTR [rax+152]
  000cc	48 2b c1	 sub	 rax, rcx
  000cf	48 89 44 24 28	 mov	 QWORD PTR tv88[rsp], rax
  000d4	eb 09		 jmp	 SHORT $LN10@buffered_t@2
$LN8@buffered_t@2:
  000d6	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR tv88[rsp], 0
$LN10@buffered_t@2:
  000df	48 8b 44 24 28	 mov	 rax, QWORD PTR tv88[rsp]
  000e4	48 8b 4c 24 20	 mov	 rcx, QWORD PTR pos$[rsp]
  000e9	48 2b c8	 sub	 rcx, rax
  000ec	48 8b c1	 mov	 rax, rcx
  000ef	48 89 44 24 20	 mov	 QWORD PTR pos$[rsp], rax

; 1180 :     /* TODO: sanity check (pos >= 0) */
; 1181 :     return PyLong_FromOff_t(pos);

  000f4	48 8b 4c 24 20	 mov	 rcx, QWORD PTR pos$[rsp]
  000f9	e8 00 00 00 00	 call	 PyLong_FromLongLong
$LN5@buffered_t@2:

; 1182 : }

  000fe	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00102	c3		 ret	 0
buffered_tell ENDP
_TEXT	ENDS
EXTRN	_PyIO_str_tell:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$_buffered_raw_tell DD imagerel _buffered_raw_tell
	DD	imagerel _buffered_raw_tell+165
	DD	imagerel $unwind$_buffered_raw_tell
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_buffered_raw_tell DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _buffered_raw_tell
_TEXT	SEGMENT
res$ = 32
n$ = 40
self$ = 64
_buffered_raw_tell PROC					; COMDAT

; 689  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 690  :     Py_off_t n;
; 691  :     PyObject *res;
; 692  :     res = PyObject_CallMethodObjArgs(self->raw, _PyIO_str_tell, NULL);

  00009	45 33 c0	 xor	 r8d, r8d
  0000c	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR _PyIO_str_tell
  00013	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00018	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  0001c	e8 00 00 00 00	 call	 PyObject_CallMethodObjArgs
  00021	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax

; 693  :     if (res == NULL)

  00026	48 83 7c 24 20
	00		 cmp	 QWORD PTR res$[rsp], 0
  0002c	75 09		 jne	 SHORT $LN3@buffered_r@8

; 694  :         return -1;

  0002e	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1
  00035	eb 69		 jmp	 SHORT $LN4@buffered_r@8
$LN3@buffered_r@8:

; 695  :     n = PyNumber_AsOff_t(res, PyExc_ValueError);

  00037	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR PyExc_ValueError
  0003e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR res$[rsp]
  00043	e8 00 00 00 00	 call	 PyNumber_AsOff_t
  00048	48 89 44 24 28	 mov	 QWORD PTR n$[rsp], rax

; 696  :     Py_DECREF(res);

  0004d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR res$[rsp]
  00052	e8 00 00 00 00	 call	 _Py_DecRef

; 697  :     if (n < 0) {

  00057	48 83 7c 24 28
	00		 cmp	 QWORD PTR n$[rsp], 0
  0005d	7d 2b		 jge	 SHORT $LN2@buffered_r@8

; 698  :         if (!PyErr_Occurred())

  0005f	e8 00 00 00 00	 call	 PyErr_Occurred
  00064	48 85 c0	 test	 rax, rax
  00067	75 18		 jne	 SHORT $LN1@buffered_r@8

; 699  :             PyErr_Format(PyExc_IOError,
; 700  :                          "Raw stream returned invalid position %" PY_PRIdOFF,
; 701  :                          (PY_OFF_T_COMPAT)n);

  00069	4c 8b 44 24 28	 mov	 r8, QWORD PTR n$[rsp]
  0006e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CK@EGGHLFCO@Raw?5stream?5returned?5invalid?5posi@
  00075	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_IOError
  0007c	e8 00 00 00 00	 call	 PyErr_Format
$LN1@buffered_r@8:

; 702  :         return -1;

  00081	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1
  00088	eb 16		 jmp	 SHORT $LN4@buffered_r@8
$LN2@buffered_r@8:

; 703  :     }
; 704  :     self->abs_pos = n;

  0008a	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0008f	48 8b 4c 24 28	 mov	 rcx, QWORD PTR n$[rsp]
  00094	48 89 88 80 00
	00 00		 mov	 QWORD PTR [rax+128], rcx

; 705  :     return n;

  0009b	48 8b 44 24 28	 mov	 rax, QWORD PTR n$[rsp]
$LN4@buffered_r@8:

; 706  : }

  000a0	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a4	c3		 ret	 0
_buffered_raw_tell ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@BCAMOJFN@buffered_seek?$AA@		; `string'
PUBLIC	??_C@_0BE@MDHELDPL@seek?5of?5closed?5file?$AA@	; `string'
PUBLIC	??_C@_0BM@OCLCFAG@whence?5value?5?$CFd?5unsupported?$AA@ ; `string'
PUBLIC	??_C@_08CCHCKICM@O?$HMi?3seek?$AA@		; `string'
EXTRN	_PyIOBase_check_seekable:PROC
EXTRN	_Py_TrueStruct:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$buffered_seek DD imagerel buffered_seek
	DD	imagerel buffered_seek+1490
	DD	imagerel $unwind$buffered_seek
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$buffered_seek DD 021101H
	DD	0170111H
xdata	ENDS
;	COMDAT ??_C@_0O@BCAMOJFN@buffered_seek?$AA@
CONST	SEGMENT
??_C@_0O@BCAMOJFN@buffered_seek?$AA@ DB 'buffered_seek', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@MDHELDPL@seek?5of?5closed?5file?$AA@
CONST	SEGMENT
??_C@_0BE@MDHELDPL@seek?5of?5closed?5file?$AA@ DB 'seek of closed file', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@OCLCFAG@whence?5value?5?$CFd?5unsupported?$AA@
CONST	SEGMENT
??_C@_0BM@OCLCFAG@whence?5value?5?$CFd?5unsupported?$AA@ DB 'whence value'
	DB	' %d unsupported', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08CCHCKICM@O?$HMi?3seek?$AA@
CONST	SEGMENT
??_C@_08CCHCKICM@O?$HMi?3seek?$AA@ DB 'O|i:seek', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT buffered_seek
_TEXT	SEGMENT
res$ = 48
n$ = 56
whence$ = 64
target$ = 72
targetobj$ = 80
current$21519 = 88
avail$21520 = 96
offset$21522 = 104
_py_tmp$21538 = 112
tv90 = 120
tv146 = 128
tv156 = 136
tv172 = 144
tv193 = 152
tv228 = 160
self$ = 192
args$ = 200
buffered_seek PROC					; COMDAT

; 1186 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H

; 1187 :     Py_off_t target, n;
; 1188 :     int whence = 0;

  00011	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR whence$[rsp], 0

; 1189 :     PyObject *targetobj, *res = NULL;

  00019	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR res$[rsp], 0

; 1190 : 
; 1191 :     CHECK_INITIALIZED(self)

  00022	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0002a	83 78 68 00	 cmp	 DWORD PTR [rax+104], 0
  0002e	7f 3d		 jg	 SHORT $LN29@buffered_s@4
  00030	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00038	83 78 6c 00	 cmp	 DWORD PTR [rax+108], 0
  0003c	74 15		 je	 SHORT $LN28@buffered_s@4
  0003e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@IOAMDFLF@raw?5stream?5has?5been?5detached?$AA@
  00045	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0004c	e8 00 00 00 00	 call	 PyErr_SetString
  00051	eb 13		 jmp	 SHORT $LN27@buffered_s@4
$LN28@buffered_s@4:
  00053	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
  0005a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00061	e8 00 00 00 00	 call	 PyErr_SetString
$LN27@buffered_s@4:
  00066	33 c0		 xor	 eax, eax
  00068	e9 5d 05 00 00	 jmp	 $LN30@buffered_s@4
$LN29@buffered_s@4:

; 1192 :     if (!PyArg_ParseTuple(args, "O|i:seek", &targetobj, &whence)) {

  0006d	4c 8d 4c 24 40	 lea	 r9, QWORD PTR whence$[rsp]
  00072	4c 8d 44 24 50	 lea	 r8, QWORD PTR targetobj$[rsp]
  00077	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08CCHCKICM@O?$HMi?3seek?$AA@
  0007e	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  00086	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  0008b	85 c0		 test	 eax, eax
  0008d	75 07		 jne	 SHORT $LN26@buffered_s@4

; 1193 :         return NULL;

  0008f	33 c0		 xor	 eax, eax
  00091	e9 34 05 00 00	 jmp	 $LN30@buffered_s@4
$LN26@buffered_s@4:

; 1194 :     }
; 1195 : 
; 1196 :     /* Do some error checking instead of trusting OS 'seek()'
; 1197 :     ** error detection, just in case.
; 1198 :     */
; 1199 :     if ((whence < 0 || whence >2)
; 1200 : #ifdef SEEK_HOLE
; 1201 :         && (whence != SEEK_HOLE)
; 1202 : #endif
; 1203 : #ifdef SEEK_DATA
; 1204 :         && (whence != SEEK_DATA)
; 1205 : #endif
; 1206 :         ) {

  00096	83 7c 24 40 00	 cmp	 DWORD PTR whence$[rsp], 0
  0009b	7c 07		 jl	 SHORT $LN24@buffered_s@4
  0009d	83 7c 24 40 02	 cmp	 DWORD PTR whence$[rsp], 2
  000a2	7e 1f		 jle	 SHORT $LN25@buffered_s@4
$LN24@buffered_s@4:

; 1207 :         PyErr_Format(PyExc_ValueError,
; 1208 :                      "whence value %d unsupported", whence);

  000a4	44 8b 44 24 40	 mov	 r8d, DWORD PTR whence$[rsp]
  000a9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@OCLCFAG@whence?5value?5?$CFd?5unsupported?$AA@
  000b0	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  000b7	e8 00 00 00 00	 call	 PyErr_Format

; 1209 :         return NULL;

  000bc	33 c0		 xor	 eax, eax
  000be	e9 07 05 00 00	 jmp	 $LN30@buffered_s@4
$LN25@buffered_s@4:

; 1210 :     }
; 1211 : 
; 1212 :     CHECK_CLOSED(self, "seek of closed file")

  000c3	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  000cb	83 78 7c 00	 cmp	 DWORD PTR [rax+124], 0
  000cf	74 17		 je	 SHORT $LN32@buffered_s@4
  000d1	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  000d9	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  000dd	e8 00 00 00 00	 call	 _PyFileIO_closed
  000e2	89 44 24 78	 mov	 DWORD PTR tv90[rsp], eax
  000e6	eb 11		 jmp	 SHORT $LN33@buffered_s@4
$LN32@buffered_s@4:
  000e8	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  000f0	e8 00 00 00 00	 call	 buffered_closed
  000f5	89 44 24 78	 mov	 DWORD PTR tv90[rsp], eax
$LN33@buffered_s@4:
  000f9	83 7c 24 78 00	 cmp	 DWORD PTR tv90[rsp], 0
  000fe	74 1a		 je	 SHORT $LN23@buffered_s@4
  00100	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@MDHELDPL@seek?5of?5closed?5file?$AA@
  00107	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0010e	e8 00 00 00 00	 call	 PyErr_SetString
  00113	33 c0		 xor	 eax, eax
  00115	e9 b0 04 00 00	 jmp	 $LN30@buffered_s@4
$LN23@buffered_s@4:

; 1213 : 
; 1214 :     if (_PyIOBase_check_seekable(self->raw, Py_True) == NULL)

  0011a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_Py_TrueStruct
  00121	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00129	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  0012d	e8 00 00 00 00	 call	 _PyIOBase_check_seekable
  00132	48 85 c0	 test	 rax, rax
  00135	75 07		 jne	 SHORT $LN22@buffered_s@4

; 1215 :         return NULL;

  00137	33 c0		 xor	 eax, eax
  00139	e9 8c 04 00 00	 jmp	 $LN30@buffered_s@4
$LN22@buffered_s@4:

; 1216 : 
; 1217 :     target = PyNumber_AsOff_t(targetobj, PyExc_ValueError);

  0013e	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR PyExc_ValueError
  00145	48 8b 4c 24 50	 mov	 rcx, QWORD PTR targetobj$[rsp]
  0014a	e8 00 00 00 00	 call	 PyNumber_AsOff_t
  0014f	48 89 44 24 48	 mov	 QWORD PTR target$[rsp], rax

; 1218 :     if (target == -1 && PyErr_Occurred())

  00154	48 83 7c 24 48
	ff		 cmp	 QWORD PTR target$[rsp], -1
  0015a	75 11		 jne	 SHORT $LN21@buffered_s@4
  0015c	e8 00 00 00 00	 call	 PyErr_Occurred
  00161	48 85 c0	 test	 rax, rax
  00164	74 07		 je	 SHORT $LN21@buffered_s@4

; 1219 :         return NULL;

  00166	33 c0		 xor	 eax, eax
  00168	e9 5d 04 00 00	 jmp	 $LN30@buffered_s@4
$LN21@buffered_s@4:

; 1220 : 
; 1221 :     /* SEEK_SET and SEEK_CUR are special because we could seek inside the
; 1222 :        buffer. Other whence values must be managed without this optimization.
; 1223 :        Some Operating Systems can provide additional values, like
; 1224 :        SEEK_HOLE/SEEK_DATA. */
; 1225 :     if (((whence == 0) || (whence == 1)) && self->readable) {

  0016d	83 7c 24 40 00	 cmp	 DWORD PTR whence$[rsp], 0
  00172	74 0b		 je	 SHORT $LN19@buffered_s@4
  00174	83 7c 24 40 01	 cmp	 DWORD PTR whence$[rsp], 1
  00179	0f 85 0a 02 00
	00		 jne	 $LN20@buffered_s@4
$LN19@buffered_s@4:
  0017f	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00187	83 78 70 00	 cmp	 DWORD PTR [rax+112], 0
  0018b	0f 84 f8 01 00
	00		 je	 $LN20@buffered_s@4

; 1226 :         Py_off_t current, avail;
; 1227 :         /* Check if seeking leaves us inside the current buffer,
; 1228 :            so as to return quickly if possible. Also, we needn't take the
; 1229 :            lock in this fast path.
; 1230 :            Don't know how to do that when whence == 2, though. */
; 1231 :         /* NOTE: RAW_TELL() can release the GIL but the object is in a stable
; 1232 :            state at this point. */
; 1233 :         current = RAW_TELL(self);

  00191	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00199	48 83 b8 80 00
	00 00 ff	 cmp	 QWORD PTR [rax+128], -1
  001a1	74 19		 je	 SHORT $LN34@buffered_s@4
  001a3	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  001ab	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  001b2	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv146[rsp], rax
  001ba	eb 15		 jmp	 SHORT $LN35@buffered_s@4
$LN34@buffered_s@4:
  001bc	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  001c4	e8 00 00 00 00	 call	 _buffered_raw_tell
  001c9	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv146[rsp], rax
$LN35@buffered_s@4:
  001d1	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR tv146[rsp]
  001d9	48 89 44 24 58	 mov	 QWORD PTR current$21519[rsp], rax

; 1234 :         avail = READAHEAD(self);

  001de	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  001e6	83 78 70 00	 cmp	 DWORD PTR [rax+112], 0
  001ea	74 4b		 je	 SHORT $LN36@buffered_s@4
  001ec	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  001f4	83 78 70 00	 cmp	 DWORD PTR [rax+112], 0
  001f8	74 3d		 je	 SHORT $LN36@buffered_s@4
  001fa	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00202	48 83 b8 a0 00
	00 00 ff	 cmp	 QWORD PTR [rax+160], -1
  0020a	74 2b		 je	 SHORT $LN36@buffered_s@4
  0020c	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00214	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  0021c	48 8b 89 90 00
	00 00		 mov	 rcx, QWORD PTR [rcx+144]
  00223	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  0022a	48 2b c1	 sub	 rax, rcx
  0022d	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv156[rsp], rax
  00235	eb 0c		 jmp	 SHORT $LN37@buffered_s@4
$LN36@buffered_s@4:
  00237	48 c7 84 24 88
	00 00 00 00 00
	00 00		 mov	 QWORD PTR tv156[rsp], 0
$LN37@buffered_s@4:
  00243	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR tv156[rsp]
  0024b	48 89 44 24 60	 mov	 QWORD PTR avail$21520[rsp], rax

; 1235 :         if (avail > 0) {

  00250	48 83 7c 24 60
	00		 cmp	 QWORD PTR avail$21520[rsp], 0
  00256	0f 8e 2d 01 00
	00		 jle	 $LN18@buffered_s@4

; 1236 :             Py_off_t offset;
; 1237 :             if (whence == 0)

  0025c	83 7c 24 40 00	 cmp	 DWORD PTR whence$[rsp], 0
  00261	0f 85 ae 00 00
	00		 jne	 $LN17@buffered_s@4

; 1238 :                 offset = target - (current - RAW_OFFSET(self));

  00267	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0026f	83 78 70 00	 cmp	 DWORD PTR [rax+112], 0
  00273	74 12		 je	 SHORT $LN38@buffered_s@4
  00275	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0027d	48 83 b8 a0 00
	00 00 ff	 cmp	 QWORD PTR [rax+160], -1
  00285	75 20		 jne	 SHORT $LN40@buffered_s@4
$LN38@buffered_s@4:
  00287	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0028f	83 78 74 00	 cmp	 DWORD PTR [rax+116], 0
  00293	74 4f		 je	 SHORT $LN39@buffered_s@4
  00295	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0029d	48 83 b8 b0 00
	00 00 ff	 cmp	 QWORD PTR [rax+176], -1
  002a5	74 3d		 je	 SHORT $LN39@buffered_s@4
$LN40@buffered_s@4:
  002a7	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  002af	48 83 b8 98 00
	00 00 00	 cmp	 QWORD PTR [rax+152], 0
  002b7	7c 2b		 jl	 SHORT $LN39@buffered_s@4
  002b9	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  002c1	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  002c9	48 8b 89 90 00
	00 00		 mov	 rcx, QWORD PTR [rcx+144]
  002d0	48 8b 80 98 00
	00 00		 mov	 rax, QWORD PTR [rax+152]
  002d7	48 2b c1	 sub	 rax, rcx
  002da	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv172[rsp], rax
  002e2	eb 0c		 jmp	 SHORT $LN41@buffered_s@4
$LN39@buffered_s@4:
  002e4	48 c7 84 24 90
	00 00 00 00 00
	00 00		 mov	 QWORD PTR tv172[rsp], 0
$LN41@buffered_s@4:
  002f0	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR tv172[rsp]
  002f8	48 8b 4c 24 58	 mov	 rcx, QWORD PTR current$21519[rsp]
  002fd	48 2b c8	 sub	 rcx, rax
  00300	48 8b c1	 mov	 rax, rcx
  00303	48 8b 4c 24 48	 mov	 rcx, QWORD PTR target$[rsp]
  00308	48 2b c8	 sub	 rcx, rax
  0030b	48 8b c1	 mov	 rax, rcx
  0030e	48 89 44 24 68	 mov	 QWORD PTR offset$21522[rsp], rax

; 1239 :             else

  00313	eb 0a		 jmp	 SHORT $LN16@buffered_s@4
$LN17@buffered_s@4:

; 1240 :                 offset = target;

  00315	48 8b 44 24 48	 mov	 rax, QWORD PTR target$[rsp]
  0031a	48 89 44 24 68	 mov	 QWORD PTR offset$21522[rsp], rax
$LN16@buffered_s@4:

; 1241 :             if (offset >= -self->pos && offset <= avail) {

  0031f	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00327	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  0032e	48 f7 d8	 neg	 rax
  00331	48 39 44 24 68	 cmp	 QWORD PTR offset$21522[rsp], rax
  00336	7c 51		 jl	 SHORT $LN15@buffered_s@4
  00338	48 8b 44 24 60	 mov	 rax, QWORD PTR avail$21520[rsp]
  0033d	48 39 44 24 68	 cmp	 QWORD PTR offset$21522[rsp], rax
  00342	7f 45		 jg	 SHORT $LN15@buffered_s@4

; 1242 :                 self->pos += offset;

  00344	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0034c	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  00353	48 03 44 24 68	 add	 rax, QWORD PTR offset$21522[rsp]
  00358	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00360	48 89 81 90 00
	00 00		 mov	 QWORD PTR [rcx+144], rax

; 1243 :                 return PyLong_FromOff_t(current - avail + offset);

  00367	48 8b 44 24 60	 mov	 rax, QWORD PTR avail$21520[rsp]
  0036c	48 8b 4c 24 58	 mov	 rcx, QWORD PTR current$21519[rsp]
  00371	48 2b c8	 sub	 rcx, rax
  00374	48 8b c1	 mov	 rax, rcx
  00377	48 03 44 24 68	 add	 rax, QWORD PTR offset$21522[rsp]
  0037c	48 8b c8	 mov	 rcx, rax
  0037f	e8 00 00 00 00	 call	 PyLong_FromLongLong
  00384	e9 41 02 00 00	 jmp	 $LN30@buffered_s@4
$LN15@buffered_s@4:
$LN18@buffered_s@4:
$LN20@buffered_s@4:

; 1244 :             }
; 1245 :         }
; 1246 :     }
; 1247 : 
; 1248 :     if (!ENTER_BUFFERED(self))

  00389	33 d2		 xor	 edx, edx
  0038b	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00393	48 8b 88 b8 00
	00 00		 mov	 rcx, QWORD PTR [rax+184]
  0039a	e8 00 00 00 00	 call	 PyThread_acquire_lock
  0039f	85 c0		 test	 eax, eax
  003a1	74 0d		 je	 SHORT $LN42@buffered_s@4
  003a3	c7 84 24 98 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv193[rsp], 1
  003ae	eb 14		 jmp	 SHORT $LN43@buffered_s@4
$LN42@buffered_s@4:
  003b0	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  003b8	e8 00 00 00 00	 call	 _enter_buffered_busy
  003bd	89 84 24 98 00
	00 00		 mov	 DWORD PTR tv193[rsp], eax
$LN43@buffered_s@4:
  003c4	83 bc 24 98 00
	00 00 00	 cmp	 DWORD PTR tv193[rsp], 0
  003cc	74 1a		 je	 SHORT $LN13@buffered_s@4
  003ce	e8 00 00 00 00	 call	 PyThread_get_thread_ident
  003d3	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  003db	89 81 c0 00 00
	00		 mov	 DWORD PTR [rcx+192], eax
  003e1	33 c0		 xor	 eax, eax
  003e3	83 f8 01	 cmp	 eax, 1
  003e6	75 07		 jne	 SHORT $LN14@buffered_s@4
$LN13@buffered_s@4:

; 1249 :         return NULL;

  003e8	33 c0		 xor	 eax, eax
  003ea	e9 db 01 00 00	 jmp	 $LN30@buffered_s@4
$LN14@buffered_s@4:

; 1250 : 
; 1251 :     /* Fallback: invoke raw seek() method and clear buffer */
; 1252 :     if (self->writable) {

  003ef	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  003f7	83 78 74 00	 cmp	 DWORD PTR [rax+116], 0
  003fb	0f 84 81 00 00
	00		 je	 $LN12@buffered_s@4

; 1253 :         res = _bufferedwriter_flush_unlocked(self);

  00401	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00409	e8 00 00 00 00	 call	 _bufferedwriter_flush_unlocked
  0040e	48 89 44 24 30	 mov	 QWORD PTR res$[rsp], rax

; 1254 :         if (res == NULL)

  00413	48 83 7c 24 30
	00		 cmp	 QWORD PTR res$[rsp], 0
  00419	75 05		 jne	 SHORT $LN11@buffered_s@4

; 1255 :             goto end;

  0041b	e9 79 01 00 00	 jmp	 $end$21532
$LN11@buffered_s@4:
$LN10@buffered_s@4:

; 1256 :         Py_CLEAR(res);

  00420	48 83 7c 24 30
	00		 cmp	 QWORD PTR res$[rsp], 0
  00426	74 47		 je	 SHORT $LN7@buffered_s@4
  00428	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00430	4c 8b 4c 24 30	 mov	 r9, QWORD PTR res$[rsp]
  00435	41 b8 e8 04 00
	00		 mov	 r8d, 1256		; 000004e8H
  0043b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@DICDDJFP@?4?4?2Modules?2_io?2bufferedio?4c?$AA@
  00442	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@BCAMOJFN@buffered_seek?$AA@
  00449	e8 00 00 00 00	 call	 _PyParallel_Guard
  0044e	85 c0		 test	 eax, eax
  00450	75 1d		 jne	 SHORT $LN7@buffered_s@4
  00452	48 8b 44 24 30	 mov	 rax, QWORD PTR res$[rsp]
  00457	48 89 44 24 70	 mov	 QWORD PTR _py_tmp$21538[rsp], rax
  0045c	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR res$[rsp], 0
  00465	48 8b 4c 24 70	 mov	 rcx, QWORD PTR _py_tmp$21538[rsp]
  0046a	e8 00 00 00 00	 call	 _Py_DecRef
$LN7@buffered_s@4:
  0046f	33 c0		 xor	 eax, eax
  00471	85 c0		 test	 eax, eax
  00473	75 ab		 jne	 SHORT $LN10@buffered_s@4

; 1257 :         _bufferedwriter_reset_buf(self);

  00475	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  0047d	e8 00 00 00 00	 call	 _bufferedwriter_reset_buf
$LN12@buffered_s@4:

; 1258 :     }
; 1259 : 
; 1260 :     /* TODO: align on block boundary and read buffer if needed? */
; 1261 :     if (whence == 1)

  00482	83 7c 24 40 01	 cmp	 DWORD PTR whence$[rsp], 1
  00487	0f 85 a1 00 00
	00		 jne	 $LN6@buffered_s@4

; 1262 :         target -= RAW_OFFSET(self);

  0048d	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00495	83 78 70 00	 cmp	 DWORD PTR [rax+112], 0
  00499	74 12		 je	 SHORT $LN44@buffered_s@4
  0049b	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  004a3	48 83 b8 a0 00
	00 00 ff	 cmp	 QWORD PTR [rax+160], -1
  004ab	75 20		 jne	 SHORT $LN46@buffered_s@4
$LN44@buffered_s@4:
  004ad	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  004b5	83 78 74 00	 cmp	 DWORD PTR [rax+116], 0
  004b9	74 4f		 je	 SHORT $LN45@buffered_s@4
  004bb	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  004c3	48 83 b8 b0 00
	00 00 ff	 cmp	 QWORD PTR [rax+176], -1
  004cb	74 3d		 je	 SHORT $LN45@buffered_s@4
$LN46@buffered_s@4:
  004cd	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  004d5	48 83 b8 98 00
	00 00 00	 cmp	 QWORD PTR [rax+152], 0
  004dd	7c 2b		 jl	 SHORT $LN45@buffered_s@4
  004df	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  004e7	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  004ef	48 8b 89 90 00
	00 00		 mov	 rcx, QWORD PTR [rcx+144]
  004f6	48 8b 80 98 00
	00 00		 mov	 rax, QWORD PTR [rax+152]
  004fd	48 2b c1	 sub	 rax, rcx
  00500	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR tv228[rsp], rax
  00508	eb 0c		 jmp	 SHORT $LN47@buffered_s@4
$LN45@buffered_s@4:
  0050a	48 c7 84 24 a0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR tv228[rsp], 0
$LN47@buffered_s@4:
  00516	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR tv228[rsp]
  0051e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR target$[rsp]
  00523	48 2b c8	 sub	 rcx, rax
  00526	48 8b c1	 mov	 rax, rcx
  00529	48 89 44 24 48	 mov	 QWORD PTR target$[rsp], rax
$LN6@buffered_s@4:

; 1263 :     n = _buffered_raw_seek(self, target, whence);

  0052e	44 8b 44 24 40	 mov	 r8d, DWORD PTR whence$[rsp]
  00533	48 8b 54 24 48	 mov	 rdx, QWORD PTR target$[rsp]
  00538	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00540	e8 00 00 00 00	 call	 _buffered_raw_seek
  00545	48 89 44 24 38	 mov	 QWORD PTR n$[rsp], rax

; 1264 :     if (n == -1)

  0054a	48 83 7c 24 38
	ff		 cmp	 QWORD PTR n$[rsp], -1
  00550	75 02		 jne	 SHORT $LN5@buffered_s@4

; 1265 :         goto end;

  00552	eb 45		 jmp	 SHORT $end$21532
$LN5@buffered_s@4:

; 1266 :     self->raw_pos = -1;

  00554	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0055c	48 c7 80 98 00
	00 00 ff ff ff
	ff		 mov	 QWORD PTR [rax+152], -1

; 1267 :     res = PyLong_FromOff_t(n);

  00567	48 8b 4c 24 38	 mov	 rcx, QWORD PTR n$[rsp]
  0056c	e8 00 00 00 00	 call	 PyLong_FromLongLong
  00571	48 89 44 24 30	 mov	 QWORD PTR res$[rsp], rax

; 1268 :     if (res != NULL && self->readable)

  00576	48 83 7c 24 30
	00		 cmp	 QWORD PTR res$[rsp], 0
  0057c	74 1b		 je	 SHORT $LN4@buffered_s@4
  0057e	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00586	83 78 70 00	 cmp	 DWORD PTR [rax+112], 0
  0058a	74 0d		 je	 SHORT $LN4@buffered_s@4

; 1269 :         _bufferedreader_reset_buf(self);

  0058c	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00594	e8 00 00 00 00	 call	 _bufferedreader_reset_buf
$LN4@buffered_s@4:
$end$21532:
$LN3@buffered_s@4:

; 1270 : 
; 1271 : end:
; 1272 :     LEAVE_BUFFERED(self)

  00599	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  005a1	c7 80 c0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+192], 0
  005ab	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  005b3	48 8b 88 b8 00
	00 00		 mov	 rcx, QWORD PTR [rax+184]
  005ba	e8 00 00 00 00	 call	 PyThread_release_lock
  005bf	33 c0		 xor	 eax, eax
  005c1	85 c0		 test	 eax, eax
  005c3	75 d4		 jne	 SHORT $LN3@buffered_s@4

; 1273 :     return res;

  005c5	48 8b 44 24 30	 mov	 rax, QWORD PTR res$[rsp]
$LN30@buffered_s@4:

; 1274 : }

  005ca	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  005d1	c3		 ret	 0
buffered_seek ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BC@PDCOJIAH@buffered_truncate?$AA@	; `string'
PUBLIC	??_C@_0M@EGOFFNDK@?$HMO?3truncate?$AA@		; `string'
EXTRN	_PyIO_str_truncate:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$buffered_truncate DD imagerel buffered_truncate
	DD	imagerel buffered_truncate+458
	DD	imagerel $unwind$buffered_truncate
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$buffered_truncate DD 010e01H
	DD	0a20eH
xdata	ENDS
;	COMDAT ??_C@_0BC@PDCOJIAH@buffered_truncate?$AA@
CONST	SEGMENT
??_C@_0BC@PDCOJIAH@buffered_truncate?$AA@ DB 'buffered_truncate', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@EGOFFNDK@?$HMO?3truncate?$AA@
CONST	SEGMENT
??_C@_0M@EGOFFNDK@?$HMO?3truncate?$AA@ DB '|O:truncate', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT buffered_truncate
_TEXT	SEGMENT
res$ = 48
pos$ = 56
_py_tmp$21577 = 64
tv84 = 72
self$ = 96
args$ = 104
buffered_truncate PROC					; COMDAT

; 1278 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 1279 :     PyObject *pos = Py_None;

  0000e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00015	48 89 44 24 38	 mov	 QWORD PTR pos$[rsp], rax

; 1280 :     PyObject *res = NULL;

  0001a	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR res$[rsp], 0

; 1281 : 
; 1282 :     CHECK_INITIALIZED(self)

  00023	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00028	83 78 68 00	 cmp	 DWORD PTR [rax+104], 0
  0002c	7f 3a		 jg	 SHORT $LN17@buffered_t@3
  0002e	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00033	83 78 6c 00	 cmp	 DWORD PTR [rax+108], 0
  00037	74 15		 je	 SHORT $LN16@buffered_t@3
  00039	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@IOAMDFLF@raw?5stream?5has?5been?5detached?$AA@
  00040	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00047	e8 00 00 00 00	 call	 PyErr_SetString
  0004c	eb 13		 jmp	 SHORT $LN15@buffered_t@3
$LN16@buffered_t@3:
  0004e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
  00055	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0005c	e8 00 00 00 00	 call	 PyErr_SetString
$LN15@buffered_t@3:
  00061	33 c0		 xor	 eax, eax
  00063	e9 5d 01 00 00	 jmp	 $LN18@buffered_t@3
$LN17@buffered_t@3:

; 1283 :     if (!PyArg_ParseTuple(args, "|O:truncate", &pos)) {

  00068	4c 8d 44 24 38	 lea	 r8, QWORD PTR pos$[rsp]
  0006d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@EGOFFNDK@?$HMO?3truncate?$AA@
  00074	48 8b 4c 24 68	 mov	 rcx, QWORD PTR args$[rsp]
  00079	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  0007e	85 c0		 test	 eax, eax
  00080	75 07		 jne	 SHORT $LN14@buffered_t@3

; 1284 :         return NULL;

  00082	33 c0		 xor	 eax, eax
  00084	e9 3c 01 00 00	 jmp	 $LN18@buffered_t@3
$LN14@buffered_t@3:

; 1285 :     }
; 1286 : 
; 1287 :     if (!ENTER_BUFFERED(self))

  00089	33 d2		 xor	 edx, edx
  0008b	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00090	48 8b 88 b8 00
	00 00		 mov	 rcx, QWORD PTR [rax+184]
  00097	e8 00 00 00 00	 call	 PyThread_acquire_lock
  0009c	85 c0		 test	 eax, eax
  0009e	74 0a		 je	 SHORT $LN20@buffered_t@3
  000a0	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv84[rsp], 1
  000a8	eb 0e		 jmp	 SHORT $LN21@buffered_t@3
$LN20@buffered_t@3:
  000aa	48 8b 4c 24 60	 mov	 rcx, QWORD PTR self$[rsp]
  000af	e8 00 00 00 00	 call	 _enter_buffered_busy
  000b4	89 44 24 48	 mov	 DWORD PTR tv84[rsp], eax
$LN21@buffered_t@3:
  000b8	83 7c 24 48 00	 cmp	 DWORD PTR tv84[rsp], 0
  000bd	74 17		 je	 SHORT $LN12@buffered_t@3
  000bf	e8 00 00 00 00	 call	 PyThread_get_thread_ident
  000c4	48 8b 4c 24 60	 mov	 rcx, QWORD PTR self$[rsp]
  000c9	89 81 c0 00 00
	00		 mov	 DWORD PTR [rcx+192], eax
  000cf	33 c0		 xor	 eax, eax
  000d1	83 f8 01	 cmp	 eax, 1
  000d4	75 07		 jne	 SHORT $LN13@buffered_t@3
$LN12@buffered_t@3:

; 1288 :         return NULL;

  000d6	33 c0		 xor	 eax, eax
  000d8	e9 e8 00 00 00	 jmp	 $LN18@buffered_t@3
$LN13@buffered_t@3:

; 1289 : 
; 1290 :     if (self->writable) {

  000dd	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  000e2	83 78 74 00	 cmp	 DWORD PTR [rax+116], 0
  000e6	74 71		 je	 SHORT $LN11@buffered_t@3

; 1291 :         res = buffered_flush_and_rewind_unlocked(self);

  000e8	48 8b 4c 24 60	 mov	 rcx, QWORD PTR self$[rsp]
  000ed	e8 00 00 00 00	 call	 buffered_flush_and_rewind_unlocked
  000f2	48 89 44 24 30	 mov	 QWORD PTR res$[rsp], rax

; 1292 :         if (res == NULL)

  000f7	48 83 7c 24 30
	00		 cmp	 QWORD PTR res$[rsp], 0
  000fd	75 05		 jne	 SHORT $LN10@buffered_t@3

; 1293 :             goto end;

  000ff	e9 96 00 00 00	 jmp	 $end$21571
$LN10@buffered_t@3:
$LN9@buffered_t@3:

; 1294 :         Py_CLEAR(res);

  00104	48 83 7c 24 30
	00		 cmp	 QWORD PTR res$[rsp], 0
  0010a	74 47		 je	 SHORT $LN6@buffered_t@3
  0010c	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00114	4c 8b 4c 24 30	 mov	 r9, QWORD PTR res$[rsp]
  00119	41 b8 0e 05 00
	00		 mov	 r8d, 1294		; 0000050eH
  0011f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@DICDDJFP@?4?4?2Modules?2_io?2bufferedio?4c?$AA@
  00126	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@PDCOJIAH@buffered_truncate?$AA@
  0012d	e8 00 00 00 00	 call	 _PyParallel_Guard
  00132	85 c0		 test	 eax, eax
  00134	75 1d		 jne	 SHORT $LN6@buffered_t@3
  00136	48 8b 44 24 30	 mov	 rax, QWORD PTR res$[rsp]
  0013b	48 89 44 24 40	 mov	 QWORD PTR _py_tmp$21577[rsp], rax
  00140	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR res$[rsp], 0
  00149	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _py_tmp$21577[rsp]
  0014e	e8 00 00 00 00	 call	 _Py_DecRef
$LN6@buffered_t@3:
  00153	33 c0		 xor	 eax, eax
  00155	85 c0		 test	 eax, eax
  00157	75 ab		 jne	 SHORT $LN9@buffered_t@3
$LN11@buffered_t@3:

; 1295 :     }
; 1296 :     res = PyObject_CallMethodObjArgs(self->raw, _PyIO_str_truncate, pos, NULL);

  00159	45 33 c9	 xor	 r9d, r9d
  0015c	4c 8b 44 24 38	 mov	 r8, QWORD PTR pos$[rsp]
  00161	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR _PyIO_str_truncate
  00168	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  0016d	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00171	e8 00 00 00 00	 call	 PyObject_CallMethodObjArgs
  00176	48 89 44 24 30	 mov	 QWORD PTR res$[rsp], rax

; 1297 :     if (res == NULL)

  0017b	48 83 7c 24 30
	00		 cmp	 QWORD PTR res$[rsp], 0
  00181	75 02		 jne	 SHORT $LN5@buffered_t@3

; 1298 :         goto end;

  00183	eb 15		 jmp	 SHORT $end$21571
$LN5@buffered_t@3:

; 1299 :     /* Reset cached position */
; 1300 :     if (_buffered_raw_tell(self) == -1)

  00185	48 8b 4c 24 60	 mov	 rcx, QWORD PTR self$[rsp]
  0018a	e8 00 00 00 00	 call	 _buffered_raw_tell
  0018f	48 83 f8 ff	 cmp	 rax, -1
  00193	75 05		 jne	 SHORT $LN4@buffered_t@3

; 1301 :         PyErr_Clear();

  00195	e8 00 00 00 00	 call	 PyErr_Clear
$LN4@buffered_t@3:
$end$21571:
$LN3@buffered_t@3:

; 1302 : 
; 1303 : end:
; 1304 :     LEAVE_BUFFERED(self)

  0019a	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  0019f	c7 80 c0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+192], 0
  001a9	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  001ae	48 8b 88 b8 00
	00 00		 mov	 rcx, QWORD PTR [rax+184]
  001b5	e8 00 00 00 00	 call	 PyThread_release_lock
  001ba	33 c0		 xor	 eax, eax
  001bc	85 c0		 test	 eax, eax
  001be	75 da		 jne	 SHORT $LN3@buffered_t@3

; 1305 :     return res;

  001c0	48 8b 44 24 30	 mov	 rax, QWORD PTR res$[rsp]
$LN18@buffered_t@3:

; 1306 : }

  001c5	48 83 c4 58	 add	 rsp, 88			; 00000058H
  001c9	c3		 ret	 0
buffered_truncate ENDP
_TEXT	ENDS
PUBLIC	??_C@_1CI@FCIPBJE@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAl?$AAi?$AAn?$AAe?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_0DN@PHLOKDEL@readline?$CI?$CJ?5should?5have?5returned?5@ ; `string'
EXTRN	_PyIO_str_readline:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$buffered_iternext DD imagerel buffered_iternext
	DD	imagerel buffered_iternext+347
	DD	imagerel $unwind$buffered_iternext
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$buffered_iternext DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_1CI@FCIPBJE@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAl?$AAi?$AAn?$AAe?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CI@FCIPBJE@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAl?$AAi?$AAn?$AAe?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 's', 00H
	DB	'_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, '('
	DB	00H, 'l', 00H, 'i', 00H, 'n', 00H, 'e', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DN@PHLOKDEL@readline?$CI?$CJ?5should?5have?5returned?5@
CONST	SEGMENT
??_C@_0DN@PHLOKDEL@readline?$CI?$CJ?5should?5have?5returned?5@ DB 'readli'
	DB	'ne() should have returned a bytes object, not ''%.200s''', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT buffered_iternext
_TEXT	SEGMENT
line$ = 32
tp$ = 40
self$ = 64
buffered_iternext PROC					; COMDAT

; 1310 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1311 :     PyObject *line;
; 1312 :     PyTypeObject *tp;
; 1313 : 
; 1314 :     CHECK_INITIALIZED(self);

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0000e	83 78 68 00	 cmp	 DWORD PTR [rax+104], 0
  00012	7f 3a		 jg	 SHORT $LN9@buffered_i@2
  00014	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00019	83 78 6c 00	 cmp	 DWORD PTR [rax+108], 0
  0001d	74 15		 je	 SHORT $LN8@buffered_i@2
  0001f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@IOAMDFLF@raw?5stream?5has?5been?5detached?$AA@
  00026	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0002d	e8 00 00 00 00	 call	 PyErr_SetString
  00032	eb 13		 jmp	 SHORT $LN7@buffered_i@2
$LN8@buffered_i@2:
  00034	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
  0003b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00042	e8 00 00 00 00	 call	 PyErr_SetString
$LN7@buffered_i@2:
  00047	33 c0		 xor	 eax, eax
  00049	e9 08 01 00 00	 jmp	 $LN10@buffered_i@2
$LN9@buffered_i@2:

; 1315 : 
; 1316 :     tp = Py_TYPE(self);

  0004e	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00053	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00057	48 89 44 24 28	 mov	 QWORD PTR tp$[rsp], rax

; 1317 :     if (tp == &PyBufferedReader_Type ||
; 1318 :         tp == &PyBufferedRandom_Type) {

  0005c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyBufferedReader_Type
  00063	48 39 44 24 28	 cmp	 QWORD PTR tp$[rsp], rax
  00068	74 0e		 je	 SHORT $LN5@buffered_i@2
  0006a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyBufferedRandom_Type
  00071	48 39 44 24 28	 cmp	 QWORD PTR tp$[rsp], rax
  00076	75 18		 jne	 SHORT $LN6@buffered_i@2
$LN5@buffered_i@2:

; 1319 :         /* Skip method call overhead for speed */
; 1320 :         line = _buffered_readline(self, -1);

  00078	48 c7 c2 ff ff
	ff ff		 mov	 rdx, -1
  0007f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  00084	e8 00 00 00 00	 call	 _buffered_readline
  00089	48 89 44 24 20	 mov	 QWORD PTR line$[rsp], rax

; 1321 :     }
; 1322 :     else {

  0008e	eb 67		 jmp	 SHORT $LN4@buffered_i@2
$LN6@buffered_i@2:

; 1323 :         line = PyObject_CallMethodObjArgs((PyObject *)self,
; 1324 :                                            _PyIO_str_readline, NULL);

  00090	45 33 c0	 xor	 r8d, r8d
  00093	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR _PyIO_str_readline
  0009a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  0009f	e8 00 00 00 00	 call	 PyObject_CallMethodObjArgs
  000a4	48 89 44 24 20	 mov	 QWORD PTR line$[rsp], rax

; 1325 :         if (line && !PyBytes_Check(line)) {

  000a9	48 83 7c 24 20
	00		 cmp	 QWORD PTR line$[rsp], 0
  000af	74 46		 je	 SHORT $LN3@buffered_i@2
  000b1	48 8b 44 24 20	 mov	 rax, QWORD PTR line$[rsp]
  000b6	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000ba	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000c0	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  000c5	85 c0		 test	 eax, eax
  000c7	75 2e		 jne	 SHORT $LN3@buffered_i@2

; 1326 :             PyErr_Format(PyExc_IOError,
; 1327 :                          "readline() should have returned a bytes object, "
; 1328 :                          "not '%.200s'", Py_TYPE(line)->tp_name);

  000c9	48 8b 44 24 20	 mov	 rax, QWORD PTR line$[rsp]
  000ce	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000d2	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  000d6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DN@PHLOKDEL@readline?$CI?$CJ?5should?5have?5returned?5@
  000dd	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_IOError
  000e4	e8 00 00 00 00	 call	 PyErr_Format

; 1329 :             Py_DECREF(line);

  000e9	48 8b 4c 24 20	 mov	 rcx, QWORD PTR line$[rsp]
  000ee	e8 00 00 00 00	 call	 _Py_DecRef

; 1330 :             return NULL;

  000f3	33 c0		 xor	 eax, eax
  000f5	eb 5f		 jmp	 SHORT $LN10@buffered_i@2
$LN3@buffered_i@2:
$LN4@buffered_i@2:

; 1331 :         }
; 1332 :     }
; 1333 : 
; 1334 :     if (line == NULL)

  000f7	48 83 7c 24 20
	00		 cmp	 QWORD PTR line$[rsp], 0
  000fd	75 04		 jne	 SHORT $LN2@buffered_i@2

; 1335 :         return NULL;

  000ff	33 c0		 xor	 eax, eax
  00101	eb 53		 jmp	 SHORT $LN10@buffered_i@2
$LN2@buffered_i@2:

; 1336 : 
; 1337 :     if (PyBytes_GET_SIZE(line) == 0) {

  00103	48 8b 44 24 20	 mov	 rax, QWORD PTR line$[rsp]
  00108	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0010c	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00112	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  00117	85 c0		 test	 eax, eax
  00119	75 1c		 jne	 SHORT $LN12@buffered_i@2
  0011b	41 b8 39 05 00
	00		 mov	 r8d, 1337		; 00000539H
  00121	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DI@KBAIHMCO@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AAe?$AAd?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  00128	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CI@FCIPBJE@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAl?$AAi?$AAn?$AAe?$AA?$CJ?$AA?$AA@
  0012f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00135	33 c0		 xor	 eax, eax
$LN12@buffered_i@2:
  00137	48 8b 44 24 20	 mov	 rax, QWORD PTR line$[rsp]
  0013c	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00141	75 0e		 jne	 SHORT $LN1@buffered_i@2

; 1338 :         /* Reached EOF or would have blocked */
; 1339 :         Py_DECREF(line);

  00143	48 8b 4c 24 20	 mov	 rcx, QWORD PTR line$[rsp]
  00148	e8 00 00 00 00	 call	 _Py_DecRef

; 1340 :         return NULL;

  0014d	33 c0		 xor	 eax, eax
  0014f	eb 05		 jmp	 SHORT $LN10@buffered_i@2
$LN1@buffered_i@2:

; 1341 :     }
; 1342 : 
; 1343 :     return line;

  00151	48 8b 44 24 20	 mov	 rax, QWORD PTR line$[rsp]
$LN10@buffered_i@2:

; 1344 : }

  00156	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0015a	c3		 ret	 0
buffered_iternext ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@BPFPPNCE@?$DM?$CFs?5name?$DN?$CFR?$DO?$AA@ ; `string'
PUBLIC	??_C@_04NNJCMPBN@?$DM?$CFs?$DO?$AA@		; `string'
EXTRN	PyUnicode_FromFormat:PROC
EXTRN	PyExc_AttributeError:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$buffered_repr DD imagerel buffered_repr
	DD	imagerel buffered_repr+175
	DD	imagerel $unwind$buffered_repr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$buffered_repr DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0N@BPFPPNCE@?$DM?$CFs?5name?$DN?$CFR?$DO?$AA@
CONST	SEGMENT
??_C@_0N@BPFPPNCE@?$DM?$CFs?5name?$DN?$CFR?$DO?$AA@ DB '<%s name=%R>', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04NNJCMPBN@?$DM?$CFs?$DO?$AA@
CONST	SEGMENT
??_C@_04NNJCMPBN@?$DM?$CFs?$DO?$AA@ DB '<%s>', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT buffered_repr
_TEXT	SEGMENT
res$ = 32
nameobj$ = 40
self$ = 64
buffered_repr PROC					; COMDAT

; 1348 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1349 :     PyObject *nameobj, *res;
; 1350 : 
; 1351 :     nameobj = _PyObject_GetAttrId((PyObject *) self, &PyId_name);

  00009	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_name
  0000e	8b c0		 mov	 eax, eax
  00010	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00016	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0001f	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00023	48 8b d0	 mov	 rdx, rax
  00026	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  0002b	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00030	48 89 44 24 28	 mov	 QWORD PTR nameobj$[rsp], rax

; 1352 :     if (nameobj == NULL) {

  00035	48 83 7c 24 28
	00		 cmp	 QWORD PTR nameobj$[rsp], 0
  0003b	75 3b		 jne	 SHORT $LN4@buffered_r@9

; 1353 :         if (PyErr_ExceptionMatches(PyExc_AttributeError))

  0003d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_AttributeError
  00044	e8 00 00 00 00	 call	 PyErr_ExceptionMatches
  00049	85 c0		 test	 eax, eax
  0004b	74 07		 je	 SHORT $LN3@buffered_r@9

; 1354 :             PyErr_Clear();

  0004d	e8 00 00 00 00	 call	 PyErr_Clear

; 1355 :         else

  00052	eb 04		 jmp	 SHORT $LN2@buffered_r@9
$LN3@buffered_r@9:

; 1356 :             return NULL;

  00054	33 c0		 xor	 eax, eax
  00056	eb 52		 jmp	 SHORT $LN5@buffered_r@9
$LN2@buffered_r@9:

; 1357 :         res = PyUnicode_FromFormat("<%s>", Py_TYPE(self)->tp_name);

  00058	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0005d	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00061	48 8b 50 70	 mov	 rdx, QWORD PTR [rax+112]
  00065	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04NNJCMPBN@?$DM?$CFs?$DO?$AA@
  0006c	e8 00 00 00 00	 call	 PyUnicode_FromFormat
  00071	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax

; 1358 :     }
; 1359 :     else {

  00076	eb 2d		 jmp	 SHORT $LN1@buffered_r@9
$LN4@buffered_r@9:

; 1360 :         res = PyUnicode_FromFormat("<%s name=%R>",
; 1361 :                                    Py_TYPE(self)->tp_name, nameobj);

  00078	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0007d	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00081	4c 8b 44 24 28	 mov	 r8, QWORD PTR nameobj$[rsp]
  00086	48 8b 50 70	 mov	 rdx, QWORD PTR [rax+112]
  0008a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BPFPPNCE@?$DM?$CFs?5name?$DN?$CFR?$DO?$AA@
  00091	e8 00 00 00 00	 call	 PyUnicode_FromFormat
  00096	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax

; 1362 :         Py_DECREF(nameobj);

  0009b	48 8b 4c 24 28	 mov	 rcx, QWORD PTR nameobj$[rsp]
  000a0	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@buffered_r@9:

; 1363 :     }
; 1364 :     return res;

  000a5	48 8b 44 24 20	 mov	 rax, QWORD PTR res$[rsp]
$LN5@buffered_r@9:

; 1365 : }

  000aa	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000ae	c3		 ret	 0
buffered_repr ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _bufferedreader_reset_buf
_TEXT	SEGMENT
self$ = 8
_bufferedreader_reset_buf PROC				; COMDAT

; 1375 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 1376 :     self->read_end = -1;

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR self$[rsp]
  0000a	48 c7 80 a0 00
	00 00 ff ff ff
	ff		 mov	 QWORD PTR [rax+160], -1

; 1377 : }

  00015	c3		 ret	 0
_bufferedreader_reset_buf ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BE@MOMGKGMF@bufferedreader_init?$AA@	; `string'
PUBLIC	??_C@_0BD@JCEJGFNI@O?$HMn?3BufferedReader?$AA@	; `string'
PUBLIC	??_C@_0M@JLCCDMKC@buffer_size?$AA@		; `string'
EXTRN	PyFileIO_Type:BYTE
EXTRN	_PyIOBase_check_readable:PROC
EXTRN	_PyArg_ParseTupleAndKeywords_SizeT:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$bufferedreader_init DD imagerel bufferedreader_init
	DD	imagerel bufferedreader_init+511
	DD	imagerel $unwind$bufferedreader_init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$bufferedreader_init DD 011301H
	DD	0e213H
xdata	ENDS
;	COMDAT ??_C@_0BE@MOMGKGMF@bufferedreader_init?$AA@
CONST	SEGMENT
??_C@_0BE@MOMGKGMF@bufferedreader_init?$AA@ DB 'bufferedreader_init', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@JCEJGFNI@O?$HMn?3BufferedReader?$AA@
CONST	SEGMENT
??_C@_0BD@JCEJGFNI@O?$HMn?3BufferedReader?$AA@ DB 'O|n:BufferedReader', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@JLCCDMKC@buffer_size?$AA@
CONST	SEGMENT
??_C@_0M@JLCCDMKC@buffer_size?$AA@ DB 'buffer_size', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT bufferedreader_init
_TEXT	SEGMENT
kwlist$ = 48
raw$ = 72
buffer_size$ = 80
_py_tmp$21666 = 88
tv138 = 96
self$ = 128
args$ = 136
kwds$ = 144
bufferedreader_init PROC				; COMDAT

; 1381 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 1382 :     char *kwlist[] = {"raw", "buffer_size", NULL};

  00013	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_03DGOGAGNC@raw?$AA@
  0001a	48 89 44 24 30	 mov	 QWORD PTR kwlist$[rsp], rax
  0001f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0M@JLCCDMKC@buffer_size?$AA@
  00026	48 89 44 24 38	 mov	 QWORD PTR kwlist$[rsp+8], rax
  0002b	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR kwlist$[rsp+16], 0

; 1383 :     Py_ssize_t buffer_size = DEFAULT_BUFFER_SIZE;

  00034	48 c7 44 24 50
	00 20 00 00	 mov	 QWORD PTR buffer_size$[rsp], 8192 ; 00002000H

; 1384 :     PyObject *raw;
; 1385 : 
; 1386 :     self->ok = 0;

  0003d	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00045	c7 40 68 00 00
	00 00		 mov	 DWORD PTR [rax+104], 0

; 1387 :     self->detached = 0;

  0004c	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00054	c7 40 6c 00 00
	00 00		 mov	 DWORD PTR [rax+108], 0

; 1388 : 
; 1389 :     if (!PyArg_ParseTupleAndKeywords(args, kwds, "O|n:BufferedReader", kwlist,
; 1390 :                                      &raw, &buffer_size)) {

  0005b	48 8d 44 24 50	 lea	 rax, QWORD PTR buffer_size$[rsp]
  00060	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00065	48 8d 44 24 48	 lea	 rax, QWORD PTR raw$[rsp]
  0006a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0006f	4c 8d 4c 24 30	 lea	 r9, QWORD PTR kwlist$[rsp]
  00074	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BD@JCEJGFNI@O?$HMn?3BufferedReader?$AA@
  0007b	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR kwds$[rsp]
  00083	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  0008b	e8 00 00 00 00	 call	 _PyArg_ParseTupleAndKeywords_SizeT
  00090	85 c0		 test	 eax, eax
  00092	75 0a		 jne	 SHORT $LN7@bufferedre

; 1391 :         return -1;

  00094	b8 ff ff ff ff	 mov	 eax, -1
  00099	e9 5c 01 00 00	 jmp	 $LN8@bufferedre
$LN7@bufferedre:

; 1392 :     }
; 1393 : 
; 1394 :     if (_PyIOBase_check_readable(raw, Py_True) == NULL)

  0009e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_Py_TrueStruct
  000a5	48 8b 4c 24 48	 mov	 rcx, QWORD PTR raw$[rsp]
  000aa	e8 00 00 00 00	 call	 _PyIOBase_check_readable
  000af	48 85 c0	 test	 rax, rax
  000b2	75 0a		 jne	 SHORT $LN6@bufferedre

; 1395 :         return -1;

  000b4	b8 ff ff ff ff	 mov	 eax, -1
  000b9	e9 3c 01 00 00	 jmp	 $LN8@bufferedre
$LN6@bufferedre:
$LN5@bufferedre:

; 1396 : 
; 1397 :     Py_CLEAR(self->raw);

  000be	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  000c6	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  000cb	74 5c		 je	 SHORT $LN2@bufferedre
  000cd	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000d5	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  000dd	4c 8b 48 60	 mov	 r9, QWORD PTR [rax+96]
  000e1	41 b8 75 05 00
	00		 mov	 r8d, 1397		; 00000575H
  000e7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@DICDDJFP@?4?4?2Modules?2_io?2bufferedio?4c?$AA@
  000ee	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@MOMGKGMF@bufferedreader_init?$AA@
  000f5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000fa	85 c0		 test	 eax, eax
  000fc	75 2b		 jne	 SHORT $LN2@bufferedre
  000fe	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00106	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0010a	48 89 44 24 58	 mov	 QWORD PTR _py_tmp$21666[rsp], rax
  0010f	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00117	48 c7 40 60 00
	00 00 00	 mov	 QWORD PTR [rax+96], 0
  0011f	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _py_tmp$21666[rsp]
  00124	e8 00 00 00 00	 call	 _Py_DecRef
$LN2@bufferedre:
  00129	33 c0		 xor	 eax, eax
  0012b	85 c0		 test	 eax, eax
  0012d	75 8f		 jne	 SHORT $LN5@bufferedre

; 1398 :     Py_INCREF(raw);

  0012f	48 8b 4c 24 48	 mov	 rcx, QWORD PTR raw$[rsp]
  00134	e8 00 00 00 00	 call	 _Py_IncRef

; 1399 :     self->raw = raw;

  00139	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00141	48 8b 4c 24 48	 mov	 rcx, QWORD PTR raw$[rsp]
  00146	48 89 48 60	 mov	 QWORD PTR [rax+96], rcx

; 1400 :     self->buffer_size = buffer_size;

  0014a	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00152	48 8b 4c 24 50	 mov	 rcx, QWORD PTR buffer_size$[rsp]
  00157	48 89 88 c8 00
	00 00		 mov	 QWORD PTR [rax+200], rcx

; 1401 :     self->readable = 1;

  0015e	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00166	c7 40 70 01 00
	00 00		 mov	 DWORD PTR [rax+112], 1

; 1402 :     self->writable = 0;

  0016d	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00175	c7 40 74 00 00
	00 00		 mov	 DWORD PTR [rax+116], 0

; 1403 : 
; 1404 :     if (_buffered_init(self) < 0)

  0017c	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00184	e8 00 00 00 00	 call	 _buffered_init
  00189	85 c0		 test	 eax, eax
  0018b	7d 07		 jge	 SHORT $LN1@bufferedre

; 1405 :         return -1;

  0018d	b8 ff ff ff ff	 mov	 eax, -1
  00192	eb 66		 jmp	 SHORT $LN8@bufferedre
$LN1@bufferedre:

; 1406 :     _bufferedreader_reset_buf(self);

  00194	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  0019c	e8 00 00 00 00	 call	 _bufferedreader_reset_buf

; 1407 : 
; 1408 :     self->fast_closed_checks = (Py_TYPE(self) == &PyBufferedReader_Type &&
; 1409 :                                 Py_TYPE(raw) == &PyFileIO_Type);

  001a1	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyBufferedReader_Type
  001a8	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  001b0	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  001b4	75 1c		 jne	 SHORT $LN10@bufferedre
  001b6	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyFileIO_Type
  001bd	48 8b 4c 24 48	 mov	 rcx, QWORD PTR raw$[rsp]
  001c2	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  001c6	75 0a		 jne	 SHORT $LN10@bufferedre
  001c8	c7 44 24 60 01
	00 00 00	 mov	 DWORD PTR tv138[rsp], 1
  001d0	eb 08		 jmp	 SHORT $LN11@bufferedre
$LN10@bufferedre:
  001d2	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR tv138[rsp], 0
$LN11@bufferedre:
  001da	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  001e2	8b 4c 24 60	 mov	 ecx, DWORD PTR tv138[rsp]
  001e6	89 48 7c	 mov	 DWORD PTR [rax+124], ecx

; 1410 : 
; 1411 :     self->ok = 1;

  001e9	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  001f1	c7 40 68 01 00
	00 00		 mov	 DWORD PTR [rax+104], 1

; 1412 :     return 0;

  001f8	33 c0		 xor	 eax, eax
$LN8@bufferedre:

; 1413 : }

  001fa	48 83 c4 78	 add	 rsp, 120		; 00000078H
  001fe	c3		 ret	 0
bufferedreader_init ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BJ@DNNLAOIP@can?8t?5allocate?5read?5lock?$AA@ ; `string'
PUBLIC	??_C@_0CG@CPDFKOKL@buffer?5size?5must?5be?5strictly?5pos@ ; `string'
EXTRN	PyThread_allocate_lock:PROC
EXTRN	PyErr_NoMemory:PROC
EXTRN	PyMem_Malloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_buffered_init DD imagerel _buffered_init
	DD	imagerel _buffered_init+384
	DD	imagerel $unwind$_buffered_init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_buffered_init DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0BJ@DNNLAOIP@can?8t?5allocate?5read?5lock?$AA@
CONST	SEGMENT
??_C@_0BJ@DNNLAOIP@can?8t?5allocate?5read?5lock?$AA@ DB 'can''t allocate '
	DB	'read lock', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@CPDFKOKL@buffer?5size?5must?5be?5strictly?5pos@
CONST	SEGMENT
??_C@_0CG@CPDFKOKL@buffer?5size?5must?5be?5strictly?5pos@ DB 'buffer size'
	DB	' must be strictly positive', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _buffered_init
_TEXT	SEGMENT
n$ = 32
self$ = 64
_buffered_init PROC					; COMDAT

; 743  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 744  :     Py_ssize_t n;
; 745  :     if (self->buffer_size <= 0) {

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0000e	48 83 b8 c8 00
	00 00 00	 cmp	 QWORD PTR [rax+200], 0
  00016	7f 1d		 jg	 SHORT $LN11@buffered_i@3

; 746  :         PyErr_SetString(PyExc_ValueError,
; 747  :             "buffer size must be strictly positive");

  00018	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@CPDFKOKL@buffer?5size?5must?5be?5strictly?5pos@
  0001f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00026	e8 00 00 00 00	 call	 PyErr_SetString

; 748  :         return -1;

  0002b	b8 ff ff ff ff	 mov	 eax, -1
  00030	e9 46 01 00 00	 jmp	 $LN12@buffered_i@3
$LN11@buffered_i@3:

; 749  :     }
; 750  :     if (self->buffer)

  00035	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0003a	48 83 b8 88 00
	00 00 00	 cmp	 QWORD PTR [rax+136], 0
  00042	74 11		 je	 SHORT $LN10@buffered_i@3

; 751  :         PyMem_Free(self->buffer);

  00044	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00049	48 8b 88 88 00
	00 00		 mov	 rcx, QWORD PTR [rax+136]
  00050	e8 00 00 00 00	 call	 PyMem_Free
$LN10@buffered_i@3:

; 752  :     self->buffer = PyMem_Malloc(self->buffer_size);

  00055	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0005a	48 8b 88 c8 00
	00 00		 mov	 rcx, QWORD PTR [rax+200]
  00061	e8 00 00 00 00	 call	 PyMem_Malloc
  00066	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  0006b	48 89 81 88 00
	00 00		 mov	 QWORD PTR [rcx+136], rax

; 753  :     if (self->buffer == NULL) {

  00072	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00077	48 83 b8 88 00
	00 00 00	 cmp	 QWORD PTR [rax+136], 0
  0007f	75 0f		 jne	 SHORT $LN9@buffered_i@3

; 754  :         PyErr_NoMemory();

  00081	e8 00 00 00 00	 call	 PyErr_NoMemory

; 755  :         return -1;

  00086	b8 ff ff ff ff	 mov	 eax, -1
  0008b	e9 eb 00 00 00	 jmp	 $LN12@buffered_i@3
$LN9@buffered_i@3:

; 756  :     }
; 757  : #ifdef WITH_THREAD
; 758  :     if (self->lock)

  00090	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00095	48 83 b8 b8 00
	00 00 00	 cmp	 QWORD PTR [rax+184], 0
  0009d	74 11		 je	 SHORT $LN8@buffered_i@3

; 759  :         PyThread_free_lock(self->lock);

  0009f	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  000a4	48 8b 88 b8 00
	00 00		 mov	 rcx, QWORD PTR [rax+184]
  000ab	e8 00 00 00 00	 call	 PyThread_free_lock
$LN8@buffered_i@3:

; 760  :     self->lock = PyThread_allocate_lock();

  000b0	e8 00 00 00 00	 call	 PyThread_allocate_lock
  000b5	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  000ba	48 89 81 b8 00
	00 00		 mov	 QWORD PTR [rcx+184], rax

; 761  :     if (self->lock == NULL) {

  000c1	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  000c6	48 83 b8 b8 00
	00 00 00	 cmp	 QWORD PTR [rax+184], 0
  000ce	75 1d		 jne	 SHORT $LN7@buffered_i@3

; 762  :         PyErr_SetString(PyExc_RuntimeError, "can't allocate read lock");

  000d0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@DNNLAOIP@can?8t?5allocate?5read?5lock?$AA@
  000d7	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeError
  000de	e8 00 00 00 00	 call	 PyErr_SetString

; 763  :         return -1;

  000e3	b8 ff ff ff ff	 mov	 eax, -1
  000e8	e9 8e 00 00 00	 jmp	 $LN12@buffered_i@3
$LN7@buffered_i@3:

; 764  :     }
; 765  :     self->owner = 0;

  000ed	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  000f2	c7 80 c0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+192], 0

; 766  : #endif
; 767  :     /* Find out whether buffer_size is a power of 2 */
; 768  :     /* XXX is this optimization useful? */
; 769  :     for (n = self->buffer_size - 1; n & 1; n >>= 1)

  000fc	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00101	48 8b 80 c8 00
	00 00		 mov	 rax, QWORD PTR [rax+200]
  00108	48 ff c8	 dec	 rax
  0010b	48 89 44 24 20	 mov	 QWORD PTR n$[rsp], rax
  00110	eb 0d		 jmp	 SHORT $LN6@buffered_i@3
$LN5@buffered_i@3:
  00112	48 8b 44 24 20	 mov	 rax, QWORD PTR n$[rsp]
  00117	48 d1 f8	 sar	 rax, 1
  0011a	48 89 44 24 20	 mov	 QWORD PTR n$[rsp], rax
$LN6@buffered_i@3:
  0011f	48 8b 44 24 20	 mov	 rax, QWORD PTR n$[rsp]
  00124	48 83 e0 01	 and	 rax, 1
  00128	48 85 c0	 test	 rax, rax
  0012b	74 02		 je	 SHORT $LN4@buffered_i@3

; 770  :         ;

  0012d	eb e3		 jmp	 SHORT $LN5@buffered_i@3
$LN4@buffered_i@3:

; 771  :     if (n == 0)

  0012f	48 83 7c 24 20
	00		 cmp	 QWORD PTR n$[rsp], 0
  00135	75 1d		 jne	 SHORT $LN3@buffered_i@3

; 772  :         self->buffer_mask = self->buffer_size - 1;

  00137	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0013c	48 8b 80 c8 00
	00 00		 mov	 rax, QWORD PTR [rax+200]
  00143	48 ff c8	 dec	 rax
  00146	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  0014b	48 89 81 d0 00
	00 00		 mov	 QWORD PTR [rcx+208], rax

; 773  :     else

  00152	eb 10		 jmp	 SHORT $LN2@buffered_i@3
$LN3@buffered_i@3:

; 774  :         self->buffer_mask = 0;

  00154	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00159	48 c7 80 d0 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+208], 0
$LN2@buffered_i@3:

; 775  :     if (_buffered_raw_tell(self) == -1)

  00164	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  00169	e8 00 00 00 00	 call	 _buffered_raw_tell
  0016e	48 83 f8 ff	 cmp	 rax, -1
  00172	75 05		 jne	 SHORT $LN1@buffered_i@3

; 776  :         PyErr_Clear();

  00174	e8 00 00 00 00	 call	 PyErr_Clear
$LN1@buffered_i@3:

; 777  :     return 0;

  00179	33 c0		 xor	 eax, eax
$LN12@buffered_i@3:

; 778  : }

  0017b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0017f	c3		 ret	 0
_buffered_init ENDP
_TEXT	ENDS
PUBLIC	??_C@_0FA@EMOGLMJO@raw?5readinto?$CI?$CJ?5returned?5invalid?5@ ; `string'
EXTRN	PyNumber_AsSsize_t:PROC
EXTRN	_PyIO_str_readinto:QWORD
EXTRN	PyMemoryView_FromBuffer:PROC
EXTRN	PyBuffer_FillInfo:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_bufferedreader_raw_read DD imagerel _bufferedreader_raw_read
	DD	imagerel _bufferedreader_raw_read+420
	DD	imagerel $unwind$_bufferedreader_raw_read
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_bufferedreader_raw_read DD 021601H
	DD	0150116H
xdata	ENDS
;	COMDAT ??_C@_0FA@EMOGLMJO@raw?5readinto?$CI?$CJ?5returned?5invalid?5@
CONST	SEGMENT
??_C@_0FA@EMOGLMJO@raw?5readinto?$CI?$CJ?5returned?5invalid?5@ DB 'raw re'
	DB	'adinto() returned invalid length %zd (should have been betwee'
	DB	'n 0 and %zd)', 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _bufferedreader_raw_read
_TEXT	SEGMENT
res$ = 48
n$ = 56
buf$ = 64
memobj$ = 144
self$ = 176
start$ = 184
len$ = 192
_bufferedreader_raw_read PROC				; COMDAT

; 1417 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1418 :     Py_buffer buf;
; 1419 :     PyObject *memobj, *res;
; 1420 :     Py_ssize_t n;
; 1421 :     /* NOTE: the buffer needn't be released as its object is NULL. */
; 1422 :     if (PyBuffer_FillInfo(&buf, NULL, start, len, 0, PyBUF_CONTIG) == -1)

  00016	c7 44 24 28 09
	00 00 00	 mov	 DWORD PTR [rsp+40], 9
  0001e	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR [rsp+32], 0
  00026	4c 8b 8c 24 c0
	00 00 00	 mov	 r9, QWORD PTR len$[rsp]
  0002e	4c 8b 84 24 b8
	00 00 00	 mov	 r8, QWORD PTR start$[rsp]
  00036	33 d2		 xor	 edx, edx
  00038	48 8d 4c 24 40	 lea	 rcx, QWORD PTR buf$[rsp]
  0003d	e8 00 00 00 00	 call	 PyBuffer_FillInfo
  00042	83 f8 ff	 cmp	 eax, -1
  00045	75 0c		 jne	 SHORT $LN11@bufferedre@2

; 1423 :         return -1;

  00047	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1
  0004e	e9 49 01 00 00	 jmp	 $LN12@bufferedre@2
$LN11@bufferedre@2:

; 1424 :     memobj = PyMemoryView_FromBuffer(&buf);

  00053	48 8d 4c 24 40	 lea	 rcx, QWORD PTR buf$[rsp]
  00058	e8 00 00 00 00	 call	 PyMemoryView_FromBuffer
  0005d	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR memobj$[rsp], rax

; 1425 :     if (memobj == NULL)

  00065	48 83 bc 24 90
	00 00 00 00	 cmp	 QWORD PTR memobj$[rsp], 0
  0006e	75 0c		 jne	 SHORT $LN10@bufferedre@2

; 1426 :         return -1;

  00070	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1
  00077	e9 20 01 00 00	 jmp	 $LN12@bufferedre@2
$LN10@bufferedre@2:
$LN9@bufferedre@2:

; 1427 :     /* NOTE: PyErr_SetFromErrno() calls PyErr_CheckSignals() when EINTR
; 1428 :        occurs so we needn't do it ourselves.
; 1429 :        We then retry reading, ignoring the signal if no handler has
; 1430 :        raised (see issue #10956).
; 1431 :     */
; 1432 :     do {
; 1433 :         res = PyObject_CallMethodObjArgs(self->raw, _PyIO_str_readinto, memobj, NULL);

  0007c	45 33 c9	 xor	 r9d, r9d
  0007f	4c 8b 84 24 90
	00 00 00	 mov	 r8, QWORD PTR memobj$[rsp]
  00087	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR _PyIO_str_readinto
  0008e	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00096	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  0009a	e8 00 00 00 00	 call	 PyObject_CallMethodObjArgs
  0009f	48 89 44 24 30	 mov	 QWORD PTR res$[rsp], rax

; 1434 :     } while (res == NULL && _PyIO_trap_eintr());

  000a4	48 83 7c 24 30
	00		 cmp	 QWORD PTR res$[rsp], 0
  000aa	75 09		 jne	 SHORT $LN6@bufferedre@2
  000ac	e8 00 00 00 00	 call	 _PyIO_trap_eintr
  000b1	85 c0		 test	 eax, eax
  000b3	75 c7		 jne	 SHORT $LN9@bufferedre@2
$LN6@bufferedre@2:

; 1435 :     Py_DECREF(memobj);

  000b5	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR memobj$[rsp]
  000bd	e8 00 00 00 00	 call	 _Py_DecRef

; 1436 :     if (res == NULL)

  000c2	48 83 7c 24 30
	00		 cmp	 QWORD PTR res$[rsp], 0
  000c8	75 0c		 jne	 SHORT $LN5@bufferedre@2

; 1437 :         return -1;

  000ca	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1
  000d1	e9 c6 00 00 00	 jmp	 $LN12@bufferedre@2
$LN5@bufferedre@2:

; 1438 :     if (res == Py_None) {

  000d6	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000dd	48 39 44 24 30	 cmp	 QWORD PTR res$[rsp], rax
  000e2	75 16		 jne	 SHORT $LN4@bufferedre@2

; 1439 :         /* Non-blocking stream would have blocked. Special return code! */
; 1440 :         Py_DECREF(res);

  000e4	48 8b 4c 24 30	 mov	 rcx, QWORD PTR res$[rsp]
  000e9	e8 00 00 00 00	 call	 _Py_DecRef

; 1441 :         return -2;

  000ee	48 c7 c0 fe ff
	ff ff		 mov	 rax, -2
  000f5	e9 a2 00 00 00	 jmp	 $LN12@bufferedre@2
$LN4@bufferedre@2:

; 1442 :     }
; 1443 :     n = PyNumber_AsSsize_t(res, PyExc_ValueError);

  000fa	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR PyExc_ValueError
  00101	48 8b 4c 24 30	 mov	 rcx, QWORD PTR res$[rsp]
  00106	e8 00 00 00 00	 call	 PyNumber_AsSsize_t
  0010b	48 89 44 24 38	 mov	 QWORD PTR n$[rsp], rax

; 1444 :     Py_DECREF(res);

  00110	48 8b 4c 24 30	 mov	 rcx, QWORD PTR res$[rsp]
  00115	e8 00 00 00 00	 call	 _Py_DecRef

; 1445 :     if (n < 0 || n > len) {

  0011a	48 83 7c 24 38
	00		 cmp	 QWORD PTR n$[rsp], 0
  00120	7c 0f		 jl	 SHORT $LN2@bufferedre@2
  00122	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR len$[rsp]
  0012a	48 39 44 24 38	 cmp	 QWORD PTR n$[rsp], rax
  0012f	7e 29		 jle	 SHORT $LN3@bufferedre@2
$LN2@bufferedre@2:

; 1446 :         PyErr_Format(PyExc_IOError,
; 1447 :                      "raw readinto() returned invalid length %zd "
; 1448 :                      "(should have been between 0 and %zd)", n, len);

  00131	4c 8b 8c 24 c0
	00 00 00	 mov	 r9, QWORD PTR len$[rsp]
  00139	4c 8b 44 24 38	 mov	 r8, QWORD PTR n$[rsp]
  0013e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0FA@EMOGLMJO@raw?5readinto?$CI?$CJ?5returned?5invalid?5@
  00145	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_IOError
  0014c	e8 00 00 00 00	 call	 PyErr_Format

; 1449 :         return -1;

  00151	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1
  00158	eb 42		 jmp	 SHORT $LN12@bufferedre@2
$LN3@bufferedre@2:

; 1450 :     }
; 1451 :     if (n > 0 && self->abs_pos != -1)

  0015a	48 83 7c 24 38
	00		 cmp	 QWORD PTR n$[rsp], 0
  00160	7e 35		 jle	 SHORT $LN1@bufferedre@2
  00162	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0016a	48 83 b8 80 00
	00 00 ff	 cmp	 QWORD PTR [rax+128], -1
  00172	74 23		 je	 SHORT $LN1@bufferedre@2

; 1452 :         self->abs_pos += n;

  00174	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0017c	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  00183	48 03 44 24 38	 add	 rax, QWORD PTR n$[rsp]
  00188	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00190	48 89 81 80 00
	00 00		 mov	 QWORD PTR [rcx+128], rax
$LN1@bufferedre@2:

; 1453 :     return n;

  00197	48 8b 44 24 38	 mov	 rax, QWORD PTR n$[rsp]
$LN12@bufferedre@2:

; 1454 : }

  0019c	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  001a3	c3		 ret	 0
_bufferedreader_raw_read ENDP
_TEXT	ENDS
PUBLIC	??_C@_1HG@IMODDIGO@?$AA?$CI?$AAP?$AAy?$AA_?$AAo?$AAf?$AAf?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AAP?$AAy?$AA_?$AAs?$AAs?$AAi?$AAz?$AAe?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAr?$AAe?$AAa@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$_bufferedreader_fill_buffer DD imagerel _bufferedreader_fill_buffer
	DD	imagerel _bufferedreader_fill_buffer+263
	DD	imagerel $unwind$_bufferedreader_fill_buffer
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_bufferedreader_fill_buffer DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_1HG@IMODDIGO@?$AA?$CI?$AAP?$AAy?$AA_?$AAo?$AAf?$AAf?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AAP?$AAy?$AA_?$AAs?$AAs?$AAi?$AAz?$AAe?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAr?$AAe?$AAa@
CONST	SEGMENT
??_C@_1HG@IMODDIGO@?$AA?$CI?$AAP?$AAy?$AA_?$AAo?$AAf?$AAf?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AAP?$AAy?$AA_?$AAs?$AAs?$AAi?$AAz?$AAe?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAr?$AAe?$AAa@ DB '('
	DB	00H, 'P', 00H, 'y', 00H, '_', 00H, 'o', 00H, 'f', 00H, 'f', 00H
	DB	'_', 00H, 't', 00H, ')', 00H, '(', 00H, 'P', 00H, 'y', 00H, '_'
	DB	00H, 's', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, '_', 00H
	DB	't', 00H, ')', 00H, '(', 00H, 's', 00H, 'e', 00H, 'l', 00H, 'f'
	DB	00H, '-', 00H, '>', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'd', 00H
	DB	'_', 00H, 'e', 00H, 'n', 00H, 'd', 00H, ')', 00H, ' ', 00H, '='
	DB	00H, '=', 00H, ' ', 00H, '(', 00H, 's', 00H, 'e', 00H, 'l', 00H
	DB	'f', 00H, '-', 00H, '>', 00H, 'r', 00H, 'e', 00H, 'a', 00H, 'd'
	DB	00H, '_', 00H, 'e', 00H, 'n', 00H, 'd', 00H, ')', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _bufferedreader_fill_buffer
_TEXT	SEGMENT
n$ = 32
len$ = 40
start$ = 48
self$ = 80
_bufferedreader_fill_buffer PROC			; COMDAT

; 1458 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1459 :     Py_ssize_t start, len, n;
; 1460 :     if (VALID_READ_BUFFER(self))

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  0000e	83 78 70 00	 cmp	 DWORD PTR [rax+112], 0
  00012	74 58		 je	 SHORT $LN3@bufferedre@3
  00014	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00019	48 83 b8 a0 00
	00 00 ff	 cmp	 QWORD PTR [rax+160], -1
  00021	74 49		 je	 SHORT $LN3@bufferedre@3

; 1461 :         start = Py_SAFE_DOWNCAST(self->read_end, Py_off_t, Py_ssize_t);

  00023	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00028	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  0002d	48 8b 89 a0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+160]
  00034	48 39 88 a0 00
	00 00		 cmp	 QWORD PTR [rax+160], rcx
  0003b	74 1c		 je	 SHORT $LN6@bufferedre@3
  0003d	41 b8 b5 05 00
	00		 mov	 r8d, 1461		; 000005b5H
  00043	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DI@KBAIHMCO@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AAe?$AAd?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  0004a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1HG@IMODDIGO@?$AA?$CI?$AAP?$AAy?$AA_?$AAo?$AAf?$AAf?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AAP?$AAy?$AA_?$AAs?$AAs?$AAi?$AAz?$AAe?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAr?$AAe?$AAa@
  00051	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00057	33 c0		 xor	 eax, eax
$LN6@bufferedre@3:
  00059	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  0005e	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  00065	48 89 44 24 30	 mov	 QWORD PTR start$[rsp], rax

; 1462 :     else

  0006a	eb 09		 jmp	 SHORT $LN2@bufferedre@3
$LN3@bufferedre@3:

; 1463 :         start = 0;

  0006c	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR start$[rsp], 0
$LN2@bufferedre@3:

; 1464 :     len = self->buffer_size - start;

  00075	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  0007a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR start$[rsp]
  0007f	48 8b 80 c8 00
	00 00		 mov	 rax, QWORD PTR [rax+200]
  00086	48 2b c1	 sub	 rax, rcx
  00089	48 89 44 24 28	 mov	 QWORD PTR len$[rsp], rax

; 1465 :     n = _bufferedreader_raw_read(self, self->buffer + start, len);

  0008e	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00093	48 8b 80 88 00
	00 00		 mov	 rax, QWORD PTR [rax+136]
  0009a	48 03 44 24 30	 add	 rax, QWORD PTR start$[rsp]
  0009f	4c 8b 44 24 28	 mov	 r8, QWORD PTR len$[rsp]
  000a4	48 8b d0	 mov	 rdx, rax
  000a7	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  000ac	e8 00 00 00 00	 call	 _bufferedreader_raw_read
  000b1	48 89 44 24 20	 mov	 QWORD PTR n$[rsp], rax

; 1466 :     if (n <= 0)

  000b6	48 83 7c 24 20
	00		 cmp	 QWORD PTR n$[rsp], 0
  000bc	7f 07		 jg	 SHORT $LN1@bufferedre@3

; 1467 :         return n;

  000be	48 8b 44 24 20	 mov	 rax, QWORD PTR n$[rsp]
  000c3	eb 3d		 jmp	 SHORT $LN4@bufferedre@3
$LN1@bufferedre@3:

; 1468 :     self->read_end = start + n;

  000c5	48 8b 44 24 20	 mov	 rax, QWORD PTR n$[rsp]
  000ca	48 8b 4c 24 30	 mov	 rcx, QWORD PTR start$[rsp]
  000cf	48 03 c8	 add	 rcx, rax
  000d2	48 8b c1	 mov	 rax, rcx
  000d5	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  000da	48 89 81 a0 00
	00 00		 mov	 QWORD PTR [rcx+160], rax

; 1469 :     self->raw_pos = start + n;

  000e1	48 8b 44 24 20	 mov	 rax, QWORD PTR n$[rsp]
  000e6	48 8b 4c 24 30	 mov	 rcx, QWORD PTR start$[rsp]
  000eb	48 03 c8	 add	 rcx, rax
  000ee	48 8b c1	 mov	 rax, rcx
  000f1	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  000f6	48 89 81 98 00
	00 00		 mov	 QWORD PTR [rcx+152], rax

; 1470 :     return n;

  000fd	48 8b 44 24 20	 mov	 rax, QWORD PTR n$[rsp]
$LN4@bufferedre@3:

; 1471 : }

  00102	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00106	c3		 ret	 0
_bufferedreader_fill_buffer ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BO@PIAEPOCB@readall?$CI?$CJ?5should?5return?5bytes?$AA@ ; `string'
PUBLIC	??_C@_0BJ@MEOPOFCL@_bufferedreader_read_all?$AA@ ; `string'
EXTRN	_PyIO_str_read:QWORD
EXTRN	PyBytes_Concat:PROC
EXTRN	PyObject_HasAttr:PROC
EXTRN	_PyIO_str_readall:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$_bufferedreader_read_all DD imagerel _bufferedreader_read_all
	DD	imagerel _bufferedreader_read_all+1584
	DD	imagerel $unwind$_bufferedreader_read_all
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_bufferedreader_read_all DD 020c01H
	DD	011010cH
xdata	ENDS
;	COMDAT ??_C@_0BO@PIAEPOCB@readall?$CI?$CJ?5should?5return?5bytes?$AA@
CONST	SEGMENT
??_C@_0BO@PIAEPOCB@readall?$CI?$CJ?5should?5return?5bytes?$AA@ DB 'readal'
	DB	'l() should return bytes', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@MEOPOFCL@_bufferedreader_read_all?$AA@
CONST	SEGMENT
??_C@_0BJ@MEOPOFCL@_bufferedreader_read_all?$AA@ DB '_bufferedreader_read'
	DB	'_all', 00H					; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _bufferedreader_read_all
_TEXT	SEGMENT
res$ = 48
tmp$ = 56
chunks$ = 64
data$ = 72
current_size$ = 80
_py_tmp$21748 = 88
_py_tmp$21776 = 96
tv73 = 104
tv83 = 112
tv130 = 120
self$ = 144
_bufferedreader_read_all PROC				; COMDAT

; 1475 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 1476 :     Py_ssize_t current_size;
; 1477 :     PyObject *res = NULL, *data = NULL, *tmp = NULL, *chunks = NULL;

  0000c	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR res$[rsp], 0
  00015	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR data$[rsp], 0
  0001e	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  00027	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR chunks$[rsp], 0

; 1478 : 
; 1479 :     /* First copy what we have in the current buffer. */
; 1480 :     current_size = Py_SAFE_DOWNCAST(READAHEAD(self), Py_off_t, Py_ssize_t);

  00030	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00038	83 78 70 00	 cmp	 DWORD PTR [rax+112], 0
  0003c	74 48		 je	 SHORT $LN52@bufferedre@4
  0003e	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00046	83 78 70 00	 cmp	 DWORD PTR [rax+112], 0
  0004a	74 3a		 je	 SHORT $LN52@bufferedre@4
  0004c	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00054	48 83 b8 a0 00
	00 00 ff	 cmp	 QWORD PTR [rax+160], -1
  0005c	74 28		 je	 SHORT $LN52@bufferedre@4
  0005e	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00066	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  0006e	48 8b 89 90 00
	00 00		 mov	 rcx, QWORD PTR [rcx+144]
  00075	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  0007c	48 2b c1	 sub	 rax, rcx
  0007f	48 89 44 24 68	 mov	 QWORD PTR tv73[rsp], rax
  00084	eb 09		 jmp	 SHORT $LN53@bufferedre@4
$LN52@bufferedre@4:
  00086	48 c7 44 24 68
	00 00 00 00	 mov	 QWORD PTR tv73[rsp], 0
$LN53@bufferedre@4:
  0008f	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00097	83 78 70 00	 cmp	 DWORD PTR [rax+112], 0
  0009b	74 48		 je	 SHORT $LN54@bufferedre@4
  0009d	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  000a5	83 78 70 00	 cmp	 DWORD PTR [rax+112], 0
  000a9	74 3a		 je	 SHORT $LN54@bufferedre@4
  000ab	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  000b3	48 83 b8 a0 00
	00 00 ff	 cmp	 QWORD PTR [rax+160], -1
  000bb	74 28		 je	 SHORT $LN54@bufferedre@4
  000bd	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  000c5	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  000cd	48 8b 89 90 00
	00 00		 mov	 rcx, QWORD PTR [rcx+144]
  000d4	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  000db	48 2b c1	 sub	 rax, rcx
  000de	48 89 44 24 70	 mov	 QWORD PTR tv83[rsp], rax
  000e3	eb 09		 jmp	 SHORT $LN55@bufferedre@4
$LN54@bufferedre@4:
  000e5	48 c7 44 24 70
	00 00 00 00	 mov	 QWORD PTR tv83[rsp], 0
$LN55@bufferedre@4:
  000ee	48 8b 44 24 70	 mov	 rax, QWORD PTR tv83[rsp]
  000f3	48 39 44 24 68	 cmp	 QWORD PTR tv73[rsp], rax
  000f8	74 1c		 je	 SHORT $LN56@bufferedre@4
  000fa	41 b8 c8 05 00
	00		 mov	 r8d, 1480		; 000005c8H
  00100	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DI@KBAIHMCO@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AAe?$AAd?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  00107	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BMC@JMFDOGAF@?$AA?$CI?$AAP?$AAy?$AA_?$AAo?$AAf?$AAf?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AAP?$AAy?$AA_?$AAs?$AAs?$AAi?$AAz?$AAe?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AA?$CI?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAr@
  0010e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00114	33 c0		 xor	 eax, eax
$LN56@bufferedre@4:
  00116	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0011e	83 78 70 00	 cmp	 DWORD PTR [rax+112], 0
  00122	74 48		 je	 SHORT $LN57@bufferedre@4
  00124	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0012c	83 78 70 00	 cmp	 DWORD PTR [rax+112], 0
  00130	74 3a		 je	 SHORT $LN57@bufferedre@4
  00132	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0013a	48 83 b8 a0 00
	00 00 ff	 cmp	 QWORD PTR [rax+160], -1
  00142	74 28		 je	 SHORT $LN57@bufferedre@4
  00144	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0014c	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00154	48 8b 89 90 00
	00 00		 mov	 rcx, QWORD PTR [rcx+144]
  0015b	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  00162	48 2b c1	 sub	 rax, rcx
  00165	48 89 44 24 78	 mov	 QWORD PTR tv130[rsp], rax
  0016a	eb 09		 jmp	 SHORT $LN58@bufferedre@4
$LN57@bufferedre@4:
  0016c	48 c7 44 24 78
	00 00 00 00	 mov	 QWORD PTR tv130[rsp], 0
$LN58@bufferedre@4:
  00175	48 8b 44 24 78	 mov	 rax, QWORD PTR tv130[rsp]
  0017a	48 89 44 24 50	 mov	 QWORD PTR current_size$[rsp], rax

; 1481 :     if (current_size) {

  0017f	48 83 7c 24 50
	00		 cmp	 QWORD PTR current_size$[rsp], 0
  00185	74 62		 je	 SHORT $LN49@bufferedre@4

; 1482 :         data = PyBytes_FromStringAndSize(
; 1483 :             self->buffer + self->pos, current_size);

  00187	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0018f	48 8b 80 88 00
	00 00		 mov	 rax, QWORD PTR [rax+136]
  00196	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  0019e	48 03 81 90 00
	00 00		 add	 rax, QWORD PTR [rcx+144]
  001a5	48 8b 54 24 50	 mov	 rdx, QWORD PTR current_size$[rsp]
  001aa	48 8b c8	 mov	 rcx, rax
  001ad	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  001b2	48 89 44 24 48	 mov	 QWORD PTR data$[rsp], rax

; 1484 :         if (data == NULL)

  001b7	48 83 7c 24 48
	00		 cmp	 QWORD PTR data$[rsp], 0
  001bd	75 07		 jne	 SHORT $LN48@bufferedre@4

; 1485 :             return NULL;

  001bf	33 c0		 xor	 eax, eax
  001c1	e9 62 04 00 00	 jmp	 $LN50@bufferedre@4
$LN48@bufferedre@4:

; 1486 :         self->pos += current_size;

  001c6	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  001ce	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  001d5	48 03 44 24 50	 add	 rax, QWORD PTR current_size$[rsp]
  001da	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  001e2	48 89 81 90 00
	00 00		 mov	 QWORD PTR [rcx+144], rax
$LN49@bufferedre@4:

; 1487 :     }
; 1488 :     /* We're going past the buffer's bounds, flush it */
; 1489 :     if (self->writable) {

  001e9	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  001f1	83 78 74 00	 cmp	 DWORD PTR [rax+116], 0
  001f5	74 74		 je	 SHORT $LN47@bufferedre@4

; 1490 :         tmp = buffered_flush_and_rewind_unlocked(self);

  001f7	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  001ff	e8 00 00 00 00	 call	 buffered_flush_and_rewind_unlocked
  00204	48 89 44 24 38	 mov	 QWORD PTR tmp$[rsp], rax

; 1491 :         if (tmp == NULL)

  00209	48 83 7c 24 38
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  0020f	75 05		 jne	 SHORT $LN46@bufferedre@4

; 1492 :             goto cleanup;

  00211	e9 ad 03 00 00	 jmp	 $cleanup$21742
$LN46@bufferedre@4:
$LN45@bufferedre@4:

; 1493 :         Py_CLEAR(tmp);

  00216	48 83 7c 24 38
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  0021c	74 47		 je	 SHORT $LN42@bufferedre@4
  0021e	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00226	4c 8b 4c 24 38	 mov	 r9, QWORD PTR tmp$[rsp]
  0022b	41 b8 d5 05 00
	00		 mov	 r8d, 1493		; 000005d5H
  00231	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@DICDDJFP@?4?4?2Modules?2_io?2bufferedio?4c?$AA@
  00238	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@MEOPOFCL@_bufferedreader_read_all?$AA@
  0023f	e8 00 00 00 00	 call	 _PyParallel_Guard
  00244	85 c0		 test	 eax, eax
  00246	75 1d		 jne	 SHORT $LN42@bufferedre@4
  00248	48 8b 44 24 38	 mov	 rax, QWORD PTR tmp$[rsp]
  0024d	48 89 44 24 58	 mov	 QWORD PTR _py_tmp$21748[rsp], rax
  00252	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR tmp$[rsp], 0
  0025b	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _py_tmp$21748[rsp]
  00260	e8 00 00 00 00	 call	 _Py_DecRef
$LN42@bufferedre@4:
  00265	33 c0		 xor	 eax, eax
  00267	85 c0		 test	 eax, eax
  00269	75 ab		 jne	 SHORT $LN45@bufferedre@4
$LN47@bufferedre@4:

; 1494 :     }
; 1495 :     _bufferedreader_reset_buf(self);

  0026b	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00273	e8 00 00 00 00	 call	 _bufferedreader_reset_buf

; 1496 : 
; 1497 :     if (PyObject_HasAttr(self->raw, _PyIO_str_readall)) {

  00278	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR _PyIO_str_readall
  0027f	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00287	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  0028b	e8 00 00 00 00	 call	 PyObject_HasAttr
  00290	85 c0		 test	 eax, eax
  00292	0f 84 dc 00 00
	00		 je	 $LN41@bufferedre@4

; 1498 :         tmp = PyObject_CallMethodObjArgs(self->raw, _PyIO_str_readall, NULL);

  00298	45 33 c0	 xor	 r8d, r8d
  0029b	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR _PyIO_str_readall
  002a2	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  002aa	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  002ae	e8 00 00 00 00	 call	 PyObject_CallMethodObjArgs
  002b3	48 89 44 24 38	 mov	 QWORD PTR tmp$[rsp], rax

; 1499 :         if (tmp == NULL)

  002b8	48 83 7c 24 38
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  002be	75 05		 jne	 SHORT $LN40@bufferedre@4

; 1500 :             goto cleanup;

  002c0	e9 fe 02 00 00	 jmp	 $cleanup$21742
$LN40@bufferedre@4:

; 1501 :         if (tmp != Py_None && !PyBytes_Check(tmp)) {

  002c5	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  002cc	48 39 44 24 38	 cmp	 QWORD PTR tmp$[rsp], rax
  002d1	74 30		 je	 SHORT $LN39@bufferedre@4
  002d3	48 8b 44 24 38	 mov	 rax, QWORD PTR tmp$[rsp]
  002d8	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  002dc	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  002e2	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  002e7	85 c0		 test	 eax, eax
  002e9	75 18		 jne	 SHORT $LN39@bufferedre@4

; 1502 :             PyErr_SetString(PyExc_TypeError, "readall() should return bytes");

  002eb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BO@PIAEPOCB@readall?$CI?$CJ?5should?5return?5bytes?$AA@
  002f2	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  002f9	e8 00 00 00 00	 call	 PyErr_SetString

; 1503 :             goto cleanup;

  002fe	e9 c0 02 00 00	 jmp	 $cleanup$21742
$LN39@bufferedre@4:

; 1504 :         }
; 1505 :         if (tmp == Py_None) {

  00303	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0030a	48 39 44 24 38	 cmp	 QWORD PTR tmp$[rsp], rax
  0030f	75 2c		 jne	 SHORT $LN38@bufferedre@4

; 1506 :             if (current_size == 0) {

  00311	48 83 7c 24 50
	00		 cmp	 QWORD PTR current_size$[rsp], 0
  00317	75 13		 jne	 SHORT $LN37@bufferedre@4

; 1507 :                 res = Py_None;

  00319	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00320	48 89 44 24 30	 mov	 QWORD PTR res$[rsp], rax

; 1508 :                 goto cleanup;

  00325	e9 99 02 00 00	 jmp	 $cleanup$21742

; 1509 :             } else {

  0032a	eb 0f		 jmp	 SHORT $LN36@bufferedre@4
$LN37@bufferedre@4:

; 1510 :                 res = data;

  0032c	48 8b 44 24 48	 mov	 rax, QWORD PTR data$[rsp]
  00331	48 89 44 24 30	 mov	 QWORD PTR res$[rsp], rax

; 1511 :                 goto cleanup;

  00336	e9 88 02 00 00	 jmp	 $cleanup$21742
$LN36@bufferedre@4:

; 1512 :             }

  0033b	eb 37		 jmp	 SHORT $LN35@bufferedre@4
$LN38@bufferedre@4:

; 1513 :         }
; 1514 :         else if (current_size) {

  0033d	48 83 7c 24 50
	00		 cmp	 QWORD PTR current_size$[rsp], 0
  00343	74 20		 je	 SHORT $LN34@bufferedre@4

; 1515 :             PyBytes_Concat(&data, tmp);

  00345	48 8b 54 24 38	 mov	 rdx, QWORD PTR tmp$[rsp]
  0034a	48 8d 4c 24 48	 lea	 rcx, QWORD PTR data$[rsp]
  0034f	e8 00 00 00 00	 call	 PyBytes_Concat

; 1516 :             res = data;

  00354	48 8b 44 24 48	 mov	 rax, QWORD PTR data$[rsp]
  00359	48 89 44 24 30	 mov	 QWORD PTR res$[rsp], rax

; 1517 :             goto cleanup;

  0035e	e9 60 02 00 00	 jmp	 $cleanup$21742

; 1518 :         }
; 1519 :         else {

  00363	eb 0f		 jmp	 SHORT $LN33@bufferedre@4
$LN34@bufferedre@4:

; 1520 :             res = tmp;

  00365	48 8b 44 24 38	 mov	 rax, QWORD PTR tmp$[rsp]
  0036a	48 89 44 24 30	 mov	 QWORD PTR res$[rsp], rax

; 1521 :             goto cleanup;

  0036f	e9 4f 02 00 00	 jmp	 $cleanup$21742
$LN33@bufferedre@4:
$LN35@bufferedre@4:
$LN41@bufferedre@4:

; 1522 :         }
; 1523 :     }
; 1524 : 
; 1525 :     chunks = PyList_New(0);

  00374	33 c9		 xor	 ecx, ecx
  00376	e8 00 00 00 00	 call	 PyList_New
  0037b	48 89 44 24 40	 mov	 QWORD PTR chunks$[rsp], rax

; 1526 :     if (chunks == NULL)

  00380	48 83 7c 24 40
	00		 cmp	 QWORD PTR chunks$[rsp], 0
  00386	75 05		 jne	 SHORT $LN32@bufferedre@4

; 1527 :         goto cleanup;

  00388	e9 36 02 00 00	 jmp	 $cleanup$21742
$LN32@bufferedre@4:
$LN31@bufferedre@4:

; 1528 : 
; 1529 :     while (1) {

  0038d	33 c0		 xor	 eax, eax
  0038f	83 f8 01	 cmp	 eax, 1
  00392	0f 84 2b 02 00
	00		 je	 $LN30@bufferedre@4

; 1530 :         if (data) {

  00398	48 83 7c 24 48
	00		 cmp	 QWORD PTR data$[rsp], 0
  0039e	74 6d		 je	 SHORT $LN29@bufferedre@4

; 1531 :             if (PyList_Append(chunks, data) < 0)

  003a0	48 8b 54 24 48	 mov	 rdx, QWORD PTR data$[rsp]
  003a5	48 8b 4c 24 40	 mov	 rcx, QWORD PTR chunks$[rsp]
  003aa	e8 00 00 00 00	 call	 PyList_Append
  003af	85 c0		 test	 eax, eax
  003b1	7d 05		 jge	 SHORT $LN28@bufferedre@4

; 1532 :                 goto cleanup;

  003b3	e9 0b 02 00 00	 jmp	 $cleanup$21742
$LN28@bufferedre@4:
$LN27@bufferedre@4:

; 1533 :             Py_CLEAR(data);

  003b8	48 83 7c 24 48
	00		 cmp	 QWORD PTR data$[rsp], 0
  003be	74 47		 je	 SHORT $LN24@bufferedre@4
  003c0	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  003c8	4c 8b 4c 24 48	 mov	 r9, QWORD PTR data$[rsp]
  003cd	41 b8 fd 05 00
	00		 mov	 r8d, 1533		; 000005fdH
  003d3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@DICDDJFP@?4?4?2Modules?2_io?2bufferedio?4c?$AA@
  003da	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@MEOPOFCL@_bufferedreader_read_all?$AA@
  003e1	e8 00 00 00 00	 call	 _PyParallel_Guard
  003e6	85 c0		 test	 eax, eax
  003e8	75 1d		 jne	 SHORT $LN24@bufferedre@4
  003ea	48 8b 44 24 48	 mov	 rax, QWORD PTR data$[rsp]
  003ef	48 89 44 24 60	 mov	 QWORD PTR _py_tmp$21776[rsp], rax
  003f4	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR data$[rsp], 0
  003fd	48 8b 4c 24 60	 mov	 rcx, QWORD PTR _py_tmp$21776[rsp]
  00402	e8 00 00 00 00	 call	 _Py_DecRef
$LN24@bufferedre@4:
  00407	33 c0		 xor	 eax, eax
  00409	85 c0		 test	 eax, eax
  0040b	75 ab		 jne	 SHORT $LN27@bufferedre@4
$LN29@bufferedre@4:

; 1534 :         }
; 1535 : 
; 1536 :         /* Read until EOF or until read() would block. */
; 1537 :         data = PyObject_CallMethodObjArgs(self->raw, _PyIO_str_read, NULL);

  0040d	45 33 c0	 xor	 r8d, r8d
  00410	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR _PyIO_str_read
  00417	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0041f	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00423	e8 00 00 00 00	 call	 PyObject_CallMethodObjArgs
  00428	48 89 44 24 48	 mov	 QWORD PTR data$[rsp], rax

; 1538 :         if (data == NULL)

  0042d	48 83 7c 24 48
	00		 cmp	 QWORD PTR data$[rsp], 0
  00433	75 05		 jne	 SHORT $LN23@bufferedre@4

; 1539 :             goto cleanup;

  00435	e9 89 01 00 00	 jmp	 $cleanup$21742
$LN23@bufferedre@4:

; 1540 :         if (data != Py_None && !PyBytes_Check(data)) {

  0043a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00441	48 39 44 24 48	 cmp	 QWORD PTR data$[rsp], rax
  00446	74 30		 je	 SHORT $LN22@bufferedre@4
  00448	48 8b 44 24 48	 mov	 rax, QWORD PTR data$[rsp]
  0044d	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00451	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00457	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  0045c	85 c0		 test	 eax, eax
  0045e	75 18		 jne	 SHORT $LN22@bufferedre@4

; 1541 :             PyErr_SetString(PyExc_TypeError, "read() should return bytes");

  00460	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BL@LFIKHDFM@read?$CI?$CJ?5should?5return?5bytes?$AA@
  00467	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0046e	e8 00 00 00 00	 call	 PyErr_SetString

; 1542 :             goto cleanup;

  00473	e9 4b 01 00 00	 jmp	 $cleanup$21742
$LN22@bufferedre@4:

; 1543 :         }
; 1544 :         if (data == Py_None || PyBytes_GET_SIZE(data) == 0) {

  00478	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0047f	48 39 44 24 48	 cmp	 QWORD PTR data$[rsp], rax
  00484	74 40		 je	 SHORT $LN20@bufferedre@4
  00486	48 8b 44 24 48	 mov	 rax, QWORD PTR data$[rsp]
  0048b	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0048f	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00495	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  0049a	85 c0		 test	 eax, eax
  0049c	75 1c		 jne	 SHORT $LN59@bufferedre@4
  0049e	41 b8 08 06 00
	00		 mov	 r8d, 1544		; 00000608H
  004a4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DI@KBAIHMCO@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AAe?$AAd?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  004ab	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CI@GGBJKIGL@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAd?$AAa?$AAt?$AAa?$AA?$CJ?$AA?$AA@
  004b2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  004b8	33 c0		 xor	 eax, eax
$LN59@bufferedre@4:
  004ba	48 8b 44 24 48	 mov	 rax, QWORD PTR data$[rsp]
  004bf	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  004c4	75 3e		 jne	 SHORT $LN21@bufferedre@4
$LN20@bufferedre@4:

; 1545 :             if (current_size == 0) {

  004c6	48 83 7c 24 50
	00		 cmp	 QWORD PTR current_size$[rsp], 0
  004cc	75 11		 jne	 SHORT $LN19@bufferedre@4

; 1546 :                 res = data;

  004ce	48 8b 44 24 48	 mov	 rax, QWORD PTR data$[rsp]
  004d3	48 89 44 24 30	 mov	 QWORD PTR res$[rsp], rax

; 1547 :                 goto cleanup;

  004d8	e9 e6 00 00 00	 jmp	 $cleanup$21742

; 1548 :             }
; 1549 :             else {

  004dd	eb 25		 jmp	 SHORT $LN18@bufferedre@4
$LN19@bufferedre@4:

; 1550 :                 tmp = _PyBytes_Join(_PyIO_empty_bytes, chunks);

  004df	48 8b 54 24 40	 mov	 rdx, QWORD PTR chunks$[rsp]
  004e4	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR _PyIO_empty_bytes
  004eb	e8 00 00 00 00	 call	 _PyBytes_Join
  004f0	48 89 44 24 38	 mov	 QWORD PTR tmp$[rsp], rax

; 1551 :                 res = tmp;

  004f5	48 8b 44 24 38	 mov	 rax, QWORD PTR tmp$[rsp]
  004fa	48 89 44 24 30	 mov	 QWORD PTR res$[rsp], rax

; 1552 :                 goto cleanup;

  004ff	e9 bf 00 00 00	 jmp	 $cleanup$21742
$LN18@bufferedre@4:
$LN21@bufferedre@4:

; 1553 :             }
; 1554 :         }
; 1555 :         current_size += PyBytes_GET_SIZE(data);

  00504	48 8b 44 24 48	 mov	 rax, QWORD PTR data$[rsp]
  00509	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0050d	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00513	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  00518	85 c0		 test	 eax, eax
  0051a	75 1c		 jne	 SHORT $LN60@bufferedre@4
  0051c	41 b8 13 06 00
	00		 mov	 r8d, 1555		; 00000613H
  00522	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DI@KBAIHMCO@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AAe?$AAd?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  00529	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CI@GGBJKIGL@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAd?$AAa?$AAt?$AAa?$AA?$CJ?$AA?$AA@
  00530	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00536	33 c0		 xor	 eax, eax
$LN60@bufferedre@4:
  00538	48 8b 44 24 48	 mov	 rax, QWORD PTR data$[rsp]
  0053d	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00541	48 8b 4c 24 50	 mov	 rcx, QWORD PTR current_size$[rsp]
  00546	48 03 c8	 add	 rcx, rax
  00549	48 8b c1	 mov	 rax, rcx
  0054c	48 89 44 24 50	 mov	 QWORD PTR current_size$[rsp], rax

; 1556 :         if (self->abs_pos != -1)

  00551	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00559	48 83 b8 80 00
	00 00 ff	 cmp	 QWORD PTR [rax+128], -1
  00561	74 5b		 je	 SHORT $LN17@bufferedre@4

; 1557 :             self->abs_pos += PyBytes_GET_SIZE(data);

  00563	48 8b 44 24 48	 mov	 rax, QWORD PTR data$[rsp]
  00568	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0056c	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00572	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  00577	85 c0		 test	 eax, eax
  00579	75 1c		 jne	 SHORT $LN61@bufferedre@4
  0057b	41 b8 15 06 00
	00		 mov	 r8d, 1557		; 00000615H
  00581	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DI@KBAIHMCO@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AAe?$AAd?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  00588	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CI@GGBJKIGL@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAd?$AAa?$AAt?$AAa?$AA?$CJ?$AA?$AA@
  0058f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00595	33 c0		 xor	 eax, eax
$LN61@bufferedre@4:
  00597	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0059f	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  005a6	48 8b 4c 24 48	 mov	 rcx, QWORD PTR data$[rsp]
  005ab	48 03 41 60	 add	 rax, QWORD PTR [rcx+96]
  005af	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  005b7	48 89 81 80 00
	00 00		 mov	 QWORD PTR [rcx+128], rax
$LN17@bufferedre@4:

; 1558 :     }

  005be	e9 ca fd ff ff	 jmp	 $LN31@bufferedre@4
$LN30@bufferedre@4:
$cleanup$21742:
$LN16@bufferedre@4:

; 1559 : cleanup:
; 1560 :     /* res is either NULL or a borrowed ref */
; 1561 :     Py_XINCREF(res);

  005c3	48 83 7c 24 30
	00		 cmp	 QWORD PTR res$[rsp], 0
  005c9	74 0a		 je	 SHORT $LN13@bufferedre@4
  005cb	48 8b 4c 24 30	 mov	 rcx, QWORD PTR res$[rsp]
  005d0	e8 00 00 00 00	 call	 _Py_IncRef
$LN13@bufferedre@4:
  005d5	33 c0		 xor	 eax, eax
  005d7	85 c0		 test	 eax, eax
  005d9	75 e8		 jne	 SHORT $LN16@bufferedre@4
$LN12@bufferedre@4:

; 1562 :     Py_XDECREF(data);

  005db	48 83 7c 24 48
	00		 cmp	 QWORD PTR data$[rsp], 0
  005e1	74 0a		 je	 SHORT $LN9@bufferedre@4
  005e3	48 8b 4c 24 48	 mov	 rcx, QWORD PTR data$[rsp]
  005e8	e8 00 00 00 00	 call	 _Py_DecRef
$LN9@bufferedre@4:
  005ed	33 c0		 xor	 eax, eax
  005ef	85 c0		 test	 eax, eax
  005f1	75 e8		 jne	 SHORT $LN12@bufferedre@4
$LN8@bufferedre@4:

; 1563 :     Py_XDECREF(tmp);

  005f3	48 83 7c 24 38
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  005f9	74 0a		 je	 SHORT $LN5@bufferedre@4
  005fb	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tmp$[rsp]
  00600	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@bufferedre@4:
  00605	33 c0		 xor	 eax, eax
  00607	85 c0		 test	 eax, eax
  00609	75 e8		 jne	 SHORT $LN8@bufferedre@4
$LN4@bufferedre@4:

; 1564 :     Py_XDECREF(chunks);

  0060b	48 83 7c 24 40
	00		 cmp	 QWORD PTR chunks$[rsp], 0
  00611	74 0a		 je	 SHORT $LN1@bufferedre@4
  00613	48 8b 4c 24 40	 mov	 rcx, QWORD PTR chunks$[rsp]
  00618	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@bufferedre@4:
  0061d	33 c0		 xor	 eax, eax
  0061f	85 c0		 test	 eax, eax
  00621	75 e8		 jne	 SHORT $LN4@bufferedre@4

; 1565 :     return res;

  00623	48 8b 44 24 30	 mov	 rax, QWORD PTR res$[rsp]
$LN50@bufferedre@4:

; 1566 : }

  00628	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  0062f	c3		 ret	 0
_bufferedreader_read_all ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_bufferedreader_read_fast DD imagerel _bufferedreader_read_fast
	DD	imagerel _bufferedreader_read_fast+426
	DD	imagerel $unwind$_bufferedreader_read_fast
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_bufferedreader_read_fast DD 010e01H
	DD	0a20eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _bufferedreader_read_fast
_TEXT	SEGMENT
current_size$ = 32
res$21830 = 40
tv73 = 48
tv83 = 56
tv130 = 64
self$ = 96
n$ = 104
_bufferedreader_read_fast PROC				; COMDAT

; 1572 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 1573 :     Py_ssize_t current_size;
; 1574 : 
; 1575 :     current_size = Py_SAFE_DOWNCAST(READAHEAD(self), Py_off_t, Py_ssize_t);

  0000e	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00013	83 78 70 00	 cmp	 DWORD PTR [rax+112], 0
  00017	74 3c		 je	 SHORT $LN5@bufferedre@5
  00019	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  0001e	83 78 70 00	 cmp	 DWORD PTR [rax+112], 0
  00022	74 31		 je	 SHORT $LN5@bufferedre@5
  00024	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00029	48 83 b8 a0 00
	00 00 ff	 cmp	 QWORD PTR [rax+160], -1
  00031	74 22		 je	 SHORT $LN5@bufferedre@5
  00033	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00038	48 8b 4c 24 60	 mov	 rcx, QWORD PTR self$[rsp]
  0003d	48 8b 89 90 00
	00 00		 mov	 rcx, QWORD PTR [rcx+144]
  00044	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  0004b	48 2b c1	 sub	 rax, rcx
  0004e	48 89 44 24 30	 mov	 QWORD PTR tv73[rsp], rax
  00053	eb 09		 jmp	 SHORT $LN6@bufferedre@5
$LN5@bufferedre@5:
  00055	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR tv73[rsp], 0
$LN6@bufferedre@5:
  0005e	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00063	83 78 70 00	 cmp	 DWORD PTR [rax+112], 0
  00067	74 3c		 je	 SHORT $LN7@bufferedre@5
  00069	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  0006e	83 78 70 00	 cmp	 DWORD PTR [rax+112], 0
  00072	74 31		 je	 SHORT $LN7@bufferedre@5
  00074	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00079	48 83 b8 a0 00
	00 00 ff	 cmp	 QWORD PTR [rax+160], -1
  00081	74 22		 je	 SHORT $LN7@bufferedre@5
  00083	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00088	48 8b 4c 24 60	 mov	 rcx, QWORD PTR self$[rsp]
  0008d	48 8b 89 90 00
	00 00		 mov	 rcx, QWORD PTR [rcx+144]
  00094	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  0009b	48 2b c1	 sub	 rax, rcx
  0009e	48 89 44 24 38	 mov	 QWORD PTR tv83[rsp], rax
  000a3	eb 09		 jmp	 SHORT $LN8@bufferedre@5
$LN7@bufferedre@5:
  000a5	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR tv83[rsp], 0
$LN8@bufferedre@5:
  000ae	48 8b 44 24 38	 mov	 rax, QWORD PTR tv83[rsp]
  000b3	48 39 44 24 30	 cmp	 QWORD PTR tv73[rsp], rax
  000b8	74 1c		 je	 SHORT $LN9@bufferedre@5
  000ba	41 b8 27 06 00
	00		 mov	 r8d, 1575		; 00000627H
  000c0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DI@KBAIHMCO@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AAe?$AAd?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  000c7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BMC@JMFDOGAF@?$AA?$CI?$AAP?$AAy?$AA_?$AAo?$AAf?$AAf?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AAP?$AAy?$AA_?$AAs?$AAs?$AAi?$AAz?$AAe?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AA?$CI?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAr@
  000ce	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000d4	33 c0		 xor	 eax, eax
$LN9@bufferedre@5:
  000d6	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  000db	83 78 70 00	 cmp	 DWORD PTR [rax+112], 0
  000df	74 3c		 je	 SHORT $LN10@bufferedre@5
  000e1	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  000e6	83 78 70 00	 cmp	 DWORD PTR [rax+112], 0
  000ea	74 31		 je	 SHORT $LN10@bufferedre@5
  000ec	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  000f1	48 83 b8 a0 00
	00 00 ff	 cmp	 QWORD PTR [rax+160], -1
  000f9	74 22		 je	 SHORT $LN10@bufferedre@5
  000fb	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00100	48 8b 4c 24 60	 mov	 rcx, QWORD PTR self$[rsp]
  00105	48 8b 89 90 00
	00 00		 mov	 rcx, QWORD PTR [rcx+144]
  0010c	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  00113	48 2b c1	 sub	 rax, rcx
  00116	48 89 44 24 40	 mov	 QWORD PTR tv130[rsp], rax
  0011b	eb 09		 jmp	 SHORT $LN11@bufferedre@5
$LN10@bufferedre@5:
  0011d	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR tv130[rsp], 0
$LN11@bufferedre@5:
  00126	48 8b 44 24 40	 mov	 rax, QWORD PTR tv130[rsp]
  0012b	48 89 44 24 20	 mov	 QWORD PTR current_size$[rsp], rax

; 1576 :     if (n <= current_size) {

  00130	48 8b 44 24 20	 mov	 rax, QWORD PTR current_size$[rsp]
  00135	48 39 44 24 68	 cmp	 QWORD PTR n$[rsp], rax
  0013a	7f 56		 jg	 SHORT $LN2@bufferedre@5

; 1577 :         /* Fast path: the data to read is fully buffered. */
; 1578 :         PyObject *res = PyBytes_FromStringAndSize(self->buffer + self->pos, n);

  0013c	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00141	48 8b 80 88 00
	00 00		 mov	 rax, QWORD PTR [rax+136]
  00148	48 8b 4c 24 60	 mov	 rcx, QWORD PTR self$[rsp]
  0014d	48 03 81 90 00
	00 00		 add	 rax, QWORD PTR [rcx+144]
  00154	48 8b 54 24 68	 mov	 rdx, QWORD PTR n$[rsp]
  00159	48 8b c8	 mov	 rcx, rax
  0015c	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  00161	48 89 44 24 28	 mov	 QWORD PTR res$21830[rsp], rax

; 1579 :         if (res != NULL)

  00166	48 83 7c 24 28
	00		 cmp	 QWORD PTR res$21830[rsp], 0
  0016c	74 1d		 je	 SHORT $LN1@bufferedre@5

; 1580 :             self->pos += n;

  0016e	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00173	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  0017a	48 03 44 24 68	 add	 rax, QWORD PTR n$[rsp]
  0017f	48 8b 4c 24 60	 mov	 rcx, QWORD PTR self$[rsp]
  00184	48 89 81 90 00
	00 00		 mov	 QWORD PTR [rcx+144], rax
$LN1@bufferedre@5:

; 1581 :         return res;

  0018b	48 8b 44 24 28	 mov	 rax, QWORD PTR res$21830[rsp]
  00190	eb 13		 jmp	 SHORT $LN3@bufferedre@5
$LN2@bufferedre@5:

; 1582 :     }
; 1583 :     Py_RETURN_NONE;

  00192	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00199	e8 00 00 00 00	 call	 _Py_IncRef
  0019e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
$LN3@bufferedre@5:

; 1584 : }

  001a5	48 83 c4 58	 add	 rsp, 88			; 00000058H
  001a9	c3		 ret	 0
_bufferedreader_read_fast ENDP
_TEXT	ENDS
PUBLIC	??_C@_1DO@MBPLINAK@?$AAr?$AAe?$AAm?$AAa?$AAi?$AAn?$AAi?$AAn?$AAg?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$_bufferedreader_read_generic DD imagerel _bufferedreader_read_generic
	DD	imagerel _bufferedreader_read_generic+1695
	DD	imagerel $unwind$_bufferedreader_read_generic
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_bufferedreader_read_generic DD 021101H
	DD	0110111H
xdata	ENDS
;	COMDAT ??_C@_1DO@MBPLINAK@?$AAr?$AAe?$AAm?$AAa?$AAi?$AAn?$AAi?$AAn?$AAg?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1DO@MBPLINAK@?$AAr?$AAe?$AAm?$AAa?$AAi?$AAn?$AAi?$AAn?$AAg?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?$AA@ DB 'r'
	DB	00H, 'e', 00H, 'm', 00H, 'a', 00H, 'i', 00H, 'n', 00H, 'i', 00H
	DB	'n', 00H, 'g', 00H, ' ', 00H, '<', 00H, '=', 00H, ' ', 00H, 's'
	DB	00H, 'e', 00H, 'l', 00H, 'f', 00H, '-', 00H, '>', 00H, 'b', 00H
	DB	'u', 00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H, '_', 00H, 's'
	DB	00H, 'i', 00H, 'z', 00H, 'e', 00H, 00H, 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _bufferedreader_read_generic
_TEXT	SEGMENT
res$ = 32
written$ = 40
remaining$ = 48
out$ = 56
current_size$ = 64
r$21859 = 72
r$21866 = 80
r$21881 = 88
tv73 = 96
tv83 = 104
tv130 = 112
tv177 = 120
self$ = 144
n$ = 152
_bufferedreader_read_generic PROC			; COMDAT

; 1591 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 1592 :     PyObject *res = NULL;

  00011	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR res$[rsp], 0

; 1593 :     Py_ssize_t current_size, remaining, written;
; 1594 :     char *out;
; 1595 : 
; 1596 :     current_size = Py_SAFE_DOWNCAST(READAHEAD(self), Py_off_t, Py_ssize_t);

  0001a	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00022	83 78 70 00	 cmp	 DWORD PTR [rax+112], 0
  00026	74 48		 je	 SHORT $LN33@bufferedre@6
  00028	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00030	83 78 70 00	 cmp	 DWORD PTR [rax+112], 0
  00034	74 3a		 je	 SHORT $LN33@bufferedre@6
  00036	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0003e	48 83 b8 a0 00
	00 00 ff	 cmp	 QWORD PTR [rax+160], -1
  00046	74 28		 je	 SHORT $LN33@bufferedre@6
  00048	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00050	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00058	48 8b 89 90 00
	00 00		 mov	 rcx, QWORD PTR [rcx+144]
  0005f	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  00066	48 2b c1	 sub	 rax, rcx
  00069	48 89 44 24 60	 mov	 QWORD PTR tv73[rsp], rax
  0006e	eb 09		 jmp	 SHORT $LN34@bufferedre@6
$LN33@bufferedre@6:
  00070	48 c7 44 24 60
	00 00 00 00	 mov	 QWORD PTR tv73[rsp], 0
$LN34@bufferedre@6:
  00079	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00081	83 78 70 00	 cmp	 DWORD PTR [rax+112], 0
  00085	74 48		 je	 SHORT $LN35@bufferedre@6
  00087	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0008f	83 78 70 00	 cmp	 DWORD PTR [rax+112], 0
  00093	74 3a		 je	 SHORT $LN35@bufferedre@6
  00095	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0009d	48 83 b8 a0 00
	00 00 ff	 cmp	 QWORD PTR [rax+160], -1
  000a5	74 28		 je	 SHORT $LN35@bufferedre@6
  000a7	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  000af	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  000b7	48 8b 89 90 00
	00 00		 mov	 rcx, QWORD PTR [rcx+144]
  000be	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  000c5	48 2b c1	 sub	 rax, rcx
  000c8	48 89 44 24 68	 mov	 QWORD PTR tv83[rsp], rax
  000cd	eb 09		 jmp	 SHORT $LN36@bufferedre@6
$LN35@bufferedre@6:
  000cf	48 c7 44 24 68
	00 00 00 00	 mov	 QWORD PTR tv83[rsp], 0
$LN36@bufferedre@6:
  000d8	48 8b 44 24 68	 mov	 rax, QWORD PTR tv83[rsp]
  000dd	48 39 44 24 60	 cmp	 QWORD PTR tv73[rsp], rax
  000e2	74 1c		 je	 SHORT $LN37@bufferedre@6
  000e4	41 b8 3c 06 00
	00		 mov	 r8d, 1596		; 0000063cH
  000ea	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DI@KBAIHMCO@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AAe?$AAd?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  000f1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BMC@JMFDOGAF@?$AA?$CI?$AAP?$AAy?$AA_?$AAo?$AAf?$AAf?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AAP?$AAy?$AA_?$AAs?$AAs?$AAi?$AAz?$AAe?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AA?$CI?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAr@
  000f8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000fe	33 c0		 xor	 eax, eax
$LN37@bufferedre@6:
  00100	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00108	83 78 70 00	 cmp	 DWORD PTR [rax+112], 0
  0010c	74 48		 je	 SHORT $LN38@bufferedre@6
  0010e	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00116	83 78 70 00	 cmp	 DWORD PTR [rax+112], 0
  0011a	74 3a		 je	 SHORT $LN38@bufferedre@6
  0011c	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00124	48 83 b8 a0 00
	00 00 ff	 cmp	 QWORD PTR [rax+160], -1
  0012c	74 28		 je	 SHORT $LN38@bufferedre@6
  0012e	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00136	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  0013e	48 8b 89 90 00
	00 00		 mov	 rcx, QWORD PTR [rcx+144]
  00145	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  0014c	48 2b c1	 sub	 rax, rcx
  0014f	48 89 44 24 70	 mov	 QWORD PTR tv130[rsp], rax
  00154	eb 09		 jmp	 SHORT $LN39@bufferedre@6
$LN38@bufferedre@6:
  00156	48 c7 44 24 70
	00 00 00 00	 mov	 QWORD PTR tv130[rsp], 0
$LN39@bufferedre@6:
  0015f	48 8b 44 24 70	 mov	 rax, QWORD PTR tv130[rsp]
  00164	48 89 44 24 40	 mov	 QWORD PTR current_size$[rsp], rax

; 1597 :     if (n <= current_size)

  00169	48 8b 44 24 40	 mov	 rax, QWORD PTR current_size$[rsp]
  0016e	48 39 84 24 98
	00 00 00	 cmp	 QWORD PTR n$[rsp], rax
  00176	7f 1a		 jg	 SHORT $LN30@bufferedre@6

; 1598 :         return _bufferedreader_read_fast(self, n);

  00178	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR n$[rsp]
  00180	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00188	e8 00 00 00 00	 call	 _bufferedreader_read_fast
  0018d	e9 05 05 00 00	 jmp	 $LN31@bufferedre@6
$LN30@bufferedre@6:

; 1599 : 
; 1600 :     res = PyBytes_FromStringAndSize(NULL, n);

  00192	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR n$[rsp]
  0019a	33 c9		 xor	 ecx, ecx
  0019c	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  001a1	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax

; 1601 :     if (res == NULL)

  001a6	48 83 7c 24 20
	00		 cmp	 QWORD PTR res$[rsp], 0
  001ac	75 05		 jne	 SHORT $LN29@bufferedre@6

; 1602 :         goto error;

  001ae	e9 ca 04 00 00	 jmp	 $error$21853
$LN29@bufferedre@6:

; 1603 :     out = PyBytes_AS_STRING(res);

  001b3	48 8b 44 24 20	 mov	 rax, QWORD PTR res$[rsp]
  001b8	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  001bc	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  001c2	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  001c7	85 c0		 test	 eax, eax
  001c9	75 1c		 jne	 SHORT $LN40@bufferedre@6
  001cb	41 b8 43 06 00
	00		 mov	 r8d, 1603		; 00000643H
  001d1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DI@KBAIHMCO@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AAe?$AAd?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  001d8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@OADLJEAH@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAr?$AAe?$AAs?$AA?$CJ?$AA?$AA@
  001df	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001e5	33 c0		 xor	 eax, eax
$LN40@bufferedre@6:
  001e7	48 8b 44 24 20	 mov	 rax, QWORD PTR res$[rsp]
  001ec	48 83 c0 78	 add	 rax, 120		; 00000078H
  001f0	48 89 44 24 38	 mov	 QWORD PTR out$[rsp], rax

; 1604 :     remaining = n;

  001f5	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR n$[rsp]
  001fd	48 89 44 24 30	 mov	 QWORD PTR remaining$[rsp], rax

; 1605 :     written = 0;

  00202	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR written$[rsp], 0

; 1606 :     if (current_size > 0) {

  0020b	48 83 7c 24 40
	00		 cmp	 QWORD PTR current_size$[rsp], 0
  00211	7e 7d		 jle	 SHORT $LN28@bufferedre@6

; 1607 :         memcpy(out, self->buffer + self->pos, current_size);

  00213	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0021b	48 8b 80 88 00
	00 00		 mov	 rax, QWORD PTR [rax+136]
  00222	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  0022a	48 03 81 90 00
	00 00		 add	 rax, QWORD PTR [rcx+144]
  00231	4c 8b 44 24 40	 mov	 r8, QWORD PTR current_size$[rsp]
  00236	48 8b d0	 mov	 rdx, rax
  00239	48 8b 4c 24 38	 mov	 rcx, QWORD PTR out$[rsp]
  0023e	e8 00 00 00 00	 call	 memcpy

; 1608 :         remaining -= current_size;

  00243	48 8b 44 24 40	 mov	 rax, QWORD PTR current_size$[rsp]
  00248	48 8b 4c 24 30	 mov	 rcx, QWORD PTR remaining$[rsp]
  0024d	48 2b c8	 sub	 rcx, rax
  00250	48 8b c1	 mov	 rax, rcx
  00253	48 89 44 24 30	 mov	 QWORD PTR remaining$[rsp], rax

; 1609 :         written += current_size;

  00258	48 8b 44 24 40	 mov	 rax, QWORD PTR current_size$[rsp]
  0025d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR written$[rsp]
  00262	48 03 c8	 add	 rcx, rax
  00265	48 8b c1	 mov	 rax, rcx
  00268	48 89 44 24 28	 mov	 QWORD PTR written$[rsp], rax

; 1610 :         self->pos += current_size;

  0026d	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00275	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  0027c	48 03 44 24 40	 add	 rax, QWORD PTR current_size$[rsp]
  00281	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00289	48 89 81 90 00
	00 00		 mov	 QWORD PTR [rcx+144], rax
$LN28@bufferedre@6:

; 1611 :     }
; 1612 :     /* Flush the write buffer if necessary */
; 1613 :     if (self->writable) {

  00290	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00298	83 78 74 00	 cmp	 DWORD PTR [rax+116], 0
  0029c	74 29		 je	 SHORT $LN27@bufferedre@6

; 1614 :         PyObject *r = buffered_flush_and_rewind_unlocked(self);

  0029e	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  002a6	e8 00 00 00 00	 call	 buffered_flush_and_rewind_unlocked
  002ab	48 89 44 24 48	 mov	 QWORD PTR r$21859[rsp], rax

; 1615 :         if (r == NULL)

  002b0	48 83 7c 24 48
	00		 cmp	 QWORD PTR r$21859[rsp], 0
  002b6	75 05		 jne	 SHORT $LN26@bufferedre@6

; 1616 :             goto error;

  002b8	e9 c0 03 00 00	 jmp	 $error$21853
$LN26@bufferedre@6:

; 1617 :         Py_DECREF(r);

  002bd	48 8b 4c 24 48	 mov	 rcx, QWORD PTR r$21859[rsp]
  002c2	e8 00 00 00 00	 call	 _Py_DecRef
$LN27@bufferedre@6:

; 1618 :     }
; 1619 :     _bufferedreader_reset_buf(self);

  002c7	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  002cf	e8 00 00 00 00	 call	 _bufferedreader_reset_buf
$LN25@bufferedre@6:

; 1620 :     while (remaining > 0) {

  002d4	48 83 7c 24 30
	00		 cmp	 QWORD PTR remaining$[rsp], 0
  002da	0f 8e 48 01 00
	00		 jle	 $LN24@bufferedre@6

; 1621 :         /* We want to read a whole block at the end into buffer.
; 1622 :            If we had readv() we could do this in one pass. */
; 1623 :         Py_ssize_t r = MINUS_LAST_BLOCK(self, remaining);

  002e0	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  002e8	48 83 b8 d0 00
	00 00 00	 cmp	 QWORD PTR [rax+208], 0
  002f0	74 24		 je	 SHORT $LN41@bufferedre@6
  002f2	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  002fa	48 8b 80 d0 00
	00 00		 mov	 rax, QWORD PTR [rax+208]
  00301	48 f7 d0	 not	 rax
  00304	48 8b 4c 24 30	 mov	 rcx, QWORD PTR remaining$[rsp]
  00309	48 23 c8	 and	 rcx, rax
  0030c	48 8b c1	 mov	 rax, rcx
  0030f	48 89 44 24 78	 mov	 QWORD PTR tv177[rsp], rax
  00314	eb 31		 jmp	 SHORT $LN42@bufferedre@6
$LN41@bufferedre@6:
  00316	48 8b 44 24 30	 mov	 rax, QWORD PTR remaining$[rsp]
  0031b	48 99		 cdq
  0031d	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00325	48 f7 b9 c8 00
	00 00		 idiv	 QWORD PTR [rcx+200]
  0032c	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00334	48 8b 89 c8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+200]
  0033b	48 0f af c8	 imul	 rcx, rax
  0033f	48 8b c1	 mov	 rax, rcx
  00342	48 89 44 24 78	 mov	 QWORD PTR tv177[rsp], rax
$LN42@bufferedre@6:
  00347	48 8b 44 24 78	 mov	 rax, QWORD PTR tv177[rsp]
  0034c	48 89 44 24 50	 mov	 QWORD PTR r$21866[rsp], rax

; 1624 :         if (r == 0)

  00351	48 83 7c 24 50
	00		 cmp	 QWORD PTR r$21866[rsp], 0
  00357	75 05		 jne	 SHORT $LN23@bufferedre@6

; 1625 :             break;

  00359	e9 ca 00 00 00	 jmp	 $LN24@bufferedre@6
$LN23@bufferedre@6:

; 1626 :         r = _bufferedreader_raw_read(self, out + written, r);

  0035e	48 8b 44 24 28	 mov	 rax, QWORD PTR written$[rsp]
  00363	48 8b 4c 24 38	 mov	 rcx, QWORD PTR out$[rsp]
  00368	48 03 c8	 add	 rcx, rax
  0036b	48 8b c1	 mov	 rax, rcx
  0036e	4c 8b 44 24 50	 mov	 r8, QWORD PTR r$21866[rsp]
  00373	48 8b d0	 mov	 rdx, rax
  00376	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  0037e	e8 00 00 00 00	 call	 _bufferedreader_raw_read
  00383	48 89 44 24 50	 mov	 QWORD PTR r$21866[rsp], rax

; 1627 :         if (r == -1)

  00388	48 83 7c 24 50
	ff		 cmp	 QWORD PTR r$21866[rsp], -1
  0038e	75 05		 jne	 SHORT $LN22@bufferedre@6

; 1628 :             goto error;

  00390	e9 e8 02 00 00	 jmp	 $error$21853
$LN22@bufferedre@6:

; 1629 :         if (r == 0 || r == -2) {

  00395	48 83 7c 24 50
	00		 cmp	 QWORD PTR r$21866[rsp], 0
  0039b	74 08		 je	 SHORT $LN20@bufferedre@6
  0039d	48 83 7c 24 50
	fe		 cmp	 QWORD PTR r$21866[rsp], -2
  003a3	75 54		 jne	 SHORT $LN21@bufferedre@6
$LN20@bufferedre@6:

; 1630 :             /* EOF occurred or read() would block. */
; 1631 :             if (r == 0 || written > 0) {

  003a5	48 83 7c 24 50
	00		 cmp	 QWORD PTR r$21866[rsp], 0
  003ab	74 08		 je	 SHORT $LN18@bufferedre@6
  003ad	48 83 7c 24 28
	00		 cmp	 QWORD PTR written$[rsp], 0
  003b3	7e 22		 jle	 SHORT $LN19@bufferedre@6
$LN18@bufferedre@6:

; 1632 :                 if (_PyBytes_Resize(&res, written))

  003b5	48 8b 54 24 28	 mov	 rdx, QWORD PTR written$[rsp]
  003ba	48 8d 4c 24 20	 lea	 rcx, QWORD PTR res$[rsp]
  003bf	e8 00 00 00 00	 call	 _PyBytes_Resize
  003c4	85 c0		 test	 eax, eax
  003c6	74 05		 je	 SHORT $LN17@bufferedre@6

; 1633 :                     goto error;

  003c8	e9 b0 02 00 00	 jmp	 $error$21853
$LN17@bufferedre@6:

; 1634 :                 return res;

  003cd	48 8b 44 24 20	 mov	 rax, QWORD PTR res$[rsp]
  003d2	e9 c0 02 00 00	 jmp	 $LN31@bufferedre@6
$LN19@bufferedre@6:

; 1635 :             }
; 1636 :             Py_DECREF(res);

  003d7	48 8b 4c 24 20	 mov	 rcx, QWORD PTR res$[rsp]
  003dc	e8 00 00 00 00	 call	 _Py_DecRef

; 1637 :             Py_INCREF(Py_None);

  003e1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  003e8	e8 00 00 00 00	 call	 _Py_IncRef

; 1638 :             return Py_None;

  003ed	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  003f4	e9 9e 02 00 00	 jmp	 $LN31@bufferedre@6
$LN21@bufferedre@6:

; 1639 :         }
; 1640 :         remaining -= r;

  003f9	48 8b 44 24 50	 mov	 rax, QWORD PTR r$21866[rsp]
  003fe	48 8b 4c 24 30	 mov	 rcx, QWORD PTR remaining$[rsp]
  00403	48 2b c8	 sub	 rcx, rax
  00406	48 8b c1	 mov	 rax, rcx
  00409	48 89 44 24 30	 mov	 QWORD PTR remaining$[rsp], rax

; 1641 :         written += r;

  0040e	48 8b 44 24 50	 mov	 rax, QWORD PTR r$21866[rsp]
  00413	48 8b 4c 24 28	 mov	 rcx, QWORD PTR written$[rsp]
  00418	48 03 c8	 add	 rcx, rax
  0041b	48 8b c1	 mov	 rax, rcx
  0041e	48 89 44 24 28	 mov	 QWORD PTR written$[rsp], rax

; 1642 :     }

  00423	e9 ac fe ff ff	 jmp	 $LN25@bufferedre@6
$LN24@bufferedre@6:

; 1643 :     assert(remaining <= self->buffer_size);

  00428	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00430	48 8b 80 c8 00
	00 00		 mov	 rax, QWORD PTR [rax+200]
  00437	48 39 44 24 30	 cmp	 QWORD PTR remaining$[rsp], rax
  0043c	7e 1c		 jle	 SHORT $LN43@bufferedre@6
  0043e	41 b8 6b 06 00
	00		 mov	 r8d, 1643		; 0000066bH
  00444	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DI@KBAIHMCO@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AAe?$AAd?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  0044b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@MBPLINAK@?$AAr?$AAe?$AAm?$AAa?$AAi?$AAn?$AAi?$AAn?$AAg?$AA?5?$AA?$DM?$AA?$DN?$AA?5?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA_?$AAs?$AAi?$AAz?$AAe?$AA?$AA@
  00452	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00458	33 c0		 xor	 eax, eax
$LN43@bufferedre@6:

; 1644 :     self->pos = 0;

  0045a	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00462	48 c7 80 90 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+144], 0

; 1645 :     self->raw_pos = 0;

  0046d	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00475	48 c7 80 98 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+152], 0

; 1646 :     self->read_end = 0;

  00480	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00488	48 c7 80 a0 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+160], 0
$LN16@bufferedre@6:

; 1647 :     /* NOTE: when the read is satisfied, we avoid issuing any additional
; 1648 :        reads, which could block indefinitely (e.g. on a socket).
; 1649 :        See issue #9550. */
; 1650 :     while (remaining > 0 && self->read_end < self->buffer_size) {

  00493	48 83 7c 24 30
	00		 cmp	 QWORD PTR remaining$[rsp], 0
  00499	0f 8e d7 01 00
	00		 jle	 $LN15@bufferedre@6
  0049f	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  004a7	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  004af	48 8b 89 c8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+200]
  004b6	48 39 88 a0 00
	00 00		 cmp	 QWORD PTR [rax+160], rcx
  004bd	0f 8d b3 01 00
	00		 jge	 $LN15@bufferedre@6

; 1651 :         Py_ssize_t r = _bufferedreader_fill_buffer(self);

  004c3	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  004cb	e8 00 00 00 00	 call	 _bufferedreader_fill_buffer
  004d0	48 89 44 24 58	 mov	 QWORD PTR r$21881[rsp], rax

; 1652 :         if (r == -1)

  004d5	48 83 7c 24 58
	ff		 cmp	 QWORD PTR r$21881[rsp], -1
  004db	75 05		 jne	 SHORT $LN14@bufferedre@6

; 1653 :             goto error;

  004dd	e9 9b 01 00 00	 jmp	 $error$21853
$LN14@bufferedre@6:

; 1654 :         if (r == 0 || r == -2) {

  004e2	48 83 7c 24 58
	00		 cmp	 QWORD PTR r$21881[rsp], 0
  004e8	74 08		 je	 SHORT $LN12@bufferedre@6
  004ea	48 83 7c 24 58
	fe		 cmp	 QWORD PTR r$21881[rsp], -2
  004f0	75 54		 jne	 SHORT $LN13@bufferedre@6
$LN12@bufferedre@6:

; 1655 :             /* EOF occurred or read() would block. */
; 1656 :             if (r == 0 || written > 0) {

  004f2	48 83 7c 24 58
	00		 cmp	 QWORD PTR r$21881[rsp], 0
  004f8	74 08		 je	 SHORT $LN10@bufferedre@6
  004fa	48 83 7c 24 28
	00		 cmp	 QWORD PTR written$[rsp], 0
  00500	7e 22		 jle	 SHORT $LN11@bufferedre@6
$LN10@bufferedre@6:

; 1657 :                 if (_PyBytes_Resize(&res, written))

  00502	48 8b 54 24 28	 mov	 rdx, QWORD PTR written$[rsp]
  00507	48 8d 4c 24 20	 lea	 rcx, QWORD PTR res$[rsp]
  0050c	e8 00 00 00 00	 call	 _PyBytes_Resize
  00511	85 c0		 test	 eax, eax
  00513	74 05		 je	 SHORT $LN9@bufferedre@6

; 1658 :                     goto error;

  00515	e9 63 01 00 00	 jmp	 $error$21853
$LN9@bufferedre@6:

; 1659 :                 return res;

  0051a	48 8b 44 24 20	 mov	 rax, QWORD PTR res$[rsp]
  0051f	e9 73 01 00 00	 jmp	 $LN31@bufferedre@6
$LN11@bufferedre@6:

; 1660 :             }
; 1661 :             Py_DECREF(res);

  00524	48 8b 4c 24 20	 mov	 rcx, QWORD PTR res$[rsp]
  00529	e8 00 00 00 00	 call	 _Py_DecRef

; 1662 :             Py_INCREF(Py_None);

  0052e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00535	e8 00 00 00 00	 call	 _Py_IncRef

; 1663 :             return Py_None;

  0053a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00541	e9 51 01 00 00	 jmp	 $LN31@bufferedre@6
$LN13@bufferedre@6:

; 1664 :         }
; 1665 :         if (remaining > r) {

  00546	48 8b 44 24 58	 mov	 rax, QWORD PTR r$21881[rsp]
  0054b	48 39 44 24 30	 cmp	 QWORD PTR remaining$[rsp], rax
  00550	0f 8e 8d 00 00
	00		 jle	 $LN8@bufferedre@6

; 1666 :             memcpy(out + written, self->buffer + self->pos, r);

  00556	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0055e	48 8b 80 88 00
	00 00		 mov	 rax, QWORD PTR [rax+136]
  00565	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  0056d	48 03 81 90 00
	00 00		 add	 rax, QWORD PTR [rcx+144]
  00574	48 8b 4c 24 28	 mov	 rcx, QWORD PTR written$[rsp]
  00579	48 8b 54 24 38	 mov	 rdx, QWORD PTR out$[rsp]
  0057e	48 03 d1	 add	 rdx, rcx
  00581	48 8b ca	 mov	 rcx, rdx
  00584	4c 8b 44 24 58	 mov	 r8, QWORD PTR r$21881[rsp]
  00589	48 8b d0	 mov	 rdx, rax
  0058c	e8 00 00 00 00	 call	 memcpy

; 1667 :             written += r;

  00591	48 8b 44 24 58	 mov	 rax, QWORD PTR r$21881[rsp]
  00596	48 8b 4c 24 28	 mov	 rcx, QWORD PTR written$[rsp]
  0059b	48 03 c8	 add	 rcx, rax
  0059e	48 8b c1	 mov	 rax, rcx
  005a1	48 89 44 24 28	 mov	 QWORD PTR written$[rsp], rax

; 1668 :             self->pos += r;

  005a6	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  005ae	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  005b5	48 03 44 24 58	 add	 rax, QWORD PTR r$21881[rsp]
  005ba	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  005c2	48 89 81 90 00
	00 00		 mov	 QWORD PTR [rcx+144], rax

; 1669 :             remaining -= r;

  005c9	48 8b 44 24 58	 mov	 rax, QWORD PTR r$21881[rsp]
  005ce	48 8b 4c 24 30	 mov	 rcx, QWORD PTR remaining$[rsp]
  005d3	48 2b c8	 sub	 rcx, rax
  005d6	48 8b c1	 mov	 rax, rcx
  005d9	48 89 44 24 30	 mov	 QWORD PTR remaining$[rsp], rax
  005de	e9 84 00 00 00	 jmp	 $LN7@bufferedre@6
$LN8@bufferedre@6:

; 1670 :         }
; 1671 :         else if (remaining > 0) {

  005e3	48 83 7c 24 30
	00		 cmp	 QWORD PTR remaining$[rsp], 0
  005e9	7e 7c		 jle	 SHORT $LN6@bufferedre@6

; 1672 :             memcpy(out + written, self->buffer + self->pos, remaining);

  005eb	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  005f3	48 8b 80 88 00
	00 00		 mov	 rax, QWORD PTR [rax+136]
  005fa	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00602	48 03 81 90 00
	00 00		 add	 rax, QWORD PTR [rcx+144]
  00609	48 8b 4c 24 28	 mov	 rcx, QWORD PTR written$[rsp]
  0060e	48 8b 54 24 38	 mov	 rdx, QWORD PTR out$[rsp]
  00613	48 03 d1	 add	 rdx, rcx
  00616	48 8b ca	 mov	 rcx, rdx
  00619	4c 8b 44 24 30	 mov	 r8, QWORD PTR remaining$[rsp]
  0061e	48 8b d0	 mov	 rdx, rax
  00621	e8 00 00 00 00	 call	 memcpy

; 1673 :             written += remaining;

  00626	48 8b 44 24 30	 mov	 rax, QWORD PTR remaining$[rsp]
  0062b	48 8b 4c 24 28	 mov	 rcx, QWORD PTR written$[rsp]
  00630	48 03 c8	 add	 rcx, rax
  00633	48 8b c1	 mov	 rax, rcx
  00636	48 89 44 24 28	 mov	 QWORD PTR written$[rsp], rax

; 1674 :             self->pos += remaining;

  0063b	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00643	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  0064a	48 03 44 24 30	 add	 rax, QWORD PTR remaining$[rsp]
  0064f	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00657	48 89 81 90 00
	00 00		 mov	 QWORD PTR [rcx+144], rax

; 1675 :             remaining = 0;

  0065e	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR remaining$[rsp], 0
$LN6@bufferedre@6:
$LN7@bufferedre@6:

; 1676 :         }
; 1677 :         if (remaining == 0)

  00667	48 83 7c 24 30
	00		 cmp	 QWORD PTR remaining$[rsp], 0
  0066d	75 02		 jne	 SHORT $LN5@bufferedre@6

; 1678 :             break;

  0066f	eb 05		 jmp	 SHORT $LN15@bufferedre@6
$LN5@bufferedre@6:

; 1679 :     }

  00671	e9 1d fe ff ff	 jmp	 $LN16@bufferedre@6
$LN15@bufferedre@6:

; 1680 : 
; 1681 :     return res;

  00676	48 8b 44 24 20	 mov	 rax, QWORD PTR res$[rsp]
  0067b	eb 1a		 jmp	 SHORT $LN31@bufferedre@6
$error$21853:
$LN4@bufferedre@6:

; 1682 : 
; 1683 : error:
; 1684 :     Py_XDECREF(res);

  0067d	48 83 7c 24 20
	00		 cmp	 QWORD PTR res$[rsp], 0
  00683	74 0a		 je	 SHORT $LN1@bufferedre@6
  00685	48 8b 4c 24 20	 mov	 rcx, QWORD PTR res$[rsp]
  0068a	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@bufferedre@6:
  0068f	33 c0		 xor	 eax, eax
  00691	85 c0		 test	 eax, eax
  00693	75 e8		 jne	 SHORT $LN4@bufferedre@6

; 1685 :     return NULL;

  00695	33 c0		 xor	 eax, eax
$LN31@bufferedre@6:

; 1686 : }

  00697	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  0069e	c3		 ret	 0
_bufferedreader_read_generic ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_bufferedreader_peek_unlocked DD imagerel _bufferedreader_peek_unlocked
	DD	imagerel _bufferedreader_peek_unlocked+443
	DD	imagerel $unwind$_bufferedreader_peek_unlocked
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_bufferedreader_peek_unlocked DD 010901H
	DD	0a209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _bufferedreader_peek_unlocked
_TEXT	SEGMENT
have$ = 32
r$ = 40
tv73 = 48
tv83 = 56
tv130 = 64
self$ = 96
_bufferedreader_peek_unlocked PROC			; COMDAT

; 1690 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 1691 :     Py_ssize_t have, r;
; 1692 : 
; 1693 :     have = Py_SAFE_DOWNCAST(READAHEAD(self), Py_off_t, Py_ssize_t);

  00009	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  0000e	83 78 70 00	 cmp	 DWORD PTR [rax+112], 0
  00012	74 3c		 je	 SHORT $LN6@bufferedre@7
  00014	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00019	83 78 70 00	 cmp	 DWORD PTR [rax+112], 0
  0001d	74 31		 je	 SHORT $LN6@bufferedre@7
  0001f	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00024	48 83 b8 a0 00
	00 00 ff	 cmp	 QWORD PTR [rax+160], -1
  0002c	74 22		 je	 SHORT $LN6@bufferedre@7
  0002e	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00033	48 8b 4c 24 60	 mov	 rcx, QWORD PTR self$[rsp]
  00038	48 8b 89 90 00
	00 00		 mov	 rcx, QWORD PTR [rcx+144]
  0003f	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  00046	48 2b c1	 sub	 rax, rcx
  00049	48 89 44 24 30	 mov	 QWORD PTR tv73[rsp], rax
  0004e	eb 09		 jmp	 SHORT $LN7@bufferedre@7
$LN6@bufferedre@7:
  00050	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR tv73[rsp], 0
$LN7@bufferedre@7:
  00059	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  0005e	83 78 70 00	 cmp	 DWORD PTR [rax+112], 0
  00062	74 3c		 je	 SHORT $LN8@bufferedre@7
  00064	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00069	83 78 70 00	 cmp	 DWORD PTR [rax+112], 0
  0006d	74 31		 je	 SHORT $LN8@bufferedre@7
  0006f	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00074	48 83 b8 a0 00
	00 00 ff	 cmp	 QWORD PTR [rax+160], -1
  0007c	74 22		 je	 SHORT $LN8@bufferedre@7
  0007e	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00083	48 8b 4c 24 60	 mov	 rcx, QWORD PTR self$[rsp]
  00088	48 8b 89 90 00
	00 00		 mov	 rcx, QWORD PTR [rcx+144]
  0008f	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  00096	48 2b c1	 sub	 rax, rcx
  00099	48 89 44 24 38	 mov	 QWORD PTR tv83[rsp], rax
  0009e	eb 09		 jmp	 SHORT $LN9@bufferedre@7
$LN8@bufferedre@7:
  000a0	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR tv83[rsp], 0
$LN9@bufferedre@7:
  000a9	48 8b 44 24 38	 mov	 rax, QWORD PTR tv83[rsp]
  000ae	48 39 44 24 30	 cmp	 QWORD PTR tv73[rsp], rax
  000b3	74 1c		 je	 SHORT $LN10@bufferedre@7
  000b5	41 b8 9d 06 00
	00		 mov	 r8d, 1693		; 0000069dH
  000bb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DI@KBAIHMCO@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AAe?$AAd?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  000c2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BMC@JMFDOGAF@?$AA?$CI?$AAP?$AAy?$AA_?$AAo?$AAf?$AAf?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AAP?$AAy?$AA_?$AAs?$AAs?$AAi?$AAz?$AAe?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AA?$CI?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAr@
  000c9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000cf	33 c0		 xor	 eax, eax
$LN10@bufferedre@7:
  000d1	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  000d6	83 78 70 00	 cmp	 DWORD PTR [rax+112], 0
  000da	74 3c		 je	 SHORT $LN11@bufferedre@7
  000dc	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  000e1	83 78 70 00	 cmp	 DWORD PTR [rax+112], 0
  000e5	74 31		 je	 SHORT $LN11@bufferedre@7
  000e7	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  000ec	48 83 b8 a0 00
	00 00 ff	 cmp	 QWORD PTR [rax+160], -1
  000f4	74 22		 je	 SHORT $LN11@bufferedre@7
  000f6	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  000fb	48 8b 4c 24 60	 mov	 rcx, QWORD PTR self$[rsp]
  00100	48 8b 89 90 00
	00 00		 mov	 rcx, QWORD PTR [rcx+144]
  00107	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  0010e	48 2b c1	 sub	 rax, rcx
  00111	48 89 44 24 40	 mov	 QWORD PTR tv130[rsp], rax
  00116	eb 09		 jmp	 SHORT $LN12@bufferedre@7
$LN11@bufferedre@7:
  00118	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR tv130[rsp], 0
$LN12@bufferedre@7:
  00121	48 8b 44 24 40	 mov	 rax, QWORD PTR tv130[rsp]
  00126	48 89 44 24 20	 mov	 QWORD PTR have$[rsp], rax

; 1694 :     /* Constraints:
; 1695 :        1. we don't want to advance the file position.
; 1696 :        2. we don't want to lose block alignment, so we can't shift the buffer
; 1697 :           to make some place.
; 1698 :        Therefore, we either return `have` bytes (if > 0), or a full buffer.
; 1699 :     */
; 1700 :     if (have > 0) {

  0012b	48 83 7c 24 20
	00		 cmp	 QWORD PTR have$[rsp], 0
  00131	7e 27		 jle	 SHORT $LN3@bufferedre@7

; 1701 :         return PyBytes_FromStringAndSize(self->buffer + self->pos, have);

  00133	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00138	48 8b 80 88 00
	00 00		 mov	 rax, QWORD PTR [rax+136]
  0013f	48 8b 4c 24 60	 mov	 rcx, QWORD PTR self$[rsp]
  00144	48 03 81 90 00
	00 00		 add	 rax, QWORD PTR [rcx+144]
  0014b	48 8b 54 24 20	 mov	 rdx, QWORD PTR have$[rsp]
  00150	48 8b c8	 mov	 rcx, rax
  00153	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  00158	eb 5c		 jmp	 SHORT $LN4@bufferedre@7
$LN3@bufferedre@7:

; 1702 :     }
; 1703 : 
; 1704 :     /* Fill the buffer from the raw stream, and copy it to the result. */
; 1705 :     _bufferedreader_reset_buf(self);

  0015a	48 8b 4c 24 60	 mov	 rcx, QWORD PTR self$[rsp]
  0015f	e8 00 00 00 00	 call	 _bufferedreader_reset_buf

; 1706 :     r = _bufferedreader_fill_buffer(self);

  00164	48 8b 4c 24 60	 mov	 rcx, QWORD PTR self$[rsp]
  00169	e8 00 00 00 00	 call	 _bufferedreader_fill_buffer
  0016e	48 89 44 24 28	 mov	 QWORD PTR r$[rsp], rax

; 1707 :     if (r == -1)

  00173	48 83 7c 24 28
	ff		 cmp	 QWORD PTR r$[rsp], -1
  00179	75 04		 jne	 SHORT $LN2@bufferedre@7

; 1708 :         return NULL;

  0017b	33 c0		 xor	 eax, eax
  0017d	eb 37		 jmp	 SHORT $LN4@bufferedre@7
$LN2@bufferedre@7:

; 1709 :     if (r == -2)

  0017f	48 83 7c 24 28
	fe		 cmp	 QWORD PTR r$[rsp], -2
  00185	75 09		 jne	 SHORT $LN1@bufferedre@7

; 1710 :         r = 0;

  00187	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR r$[rsp], 0
$LN1@bufferedre@7:

; 1711 :     self->pos = 0;

  00190	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00195	48 c7 80 90 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+144], 0

; 1712 :     return PyBytes_FromStringAndSize(self->buffer, r);

  001a0	48 8b 54 24 28	 mov	 rdx, QWORD PTR r$[rsp]
  001a5	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  001aa	48 8b 88 88 00
	00 00		 mov	 rcx, QWORD PTR [rax+136]
  001b1	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
$LN4@bufferedre@7:

; 1713 : }

  001b6	48 83 c4 58	 add	 rsp, 88			; 00000058H
  001ba	c3		 ret	 0
_bufferedreader_peek_unlocked ENDP
; Function compile flags: /Odtp
_TEXT	ENDS
;	COMDAT _bufferedwriter_reset_buf
_TEXT	SEGMENT
self$ = 8
_bufferedwriter_reset_buf PROC				; COMDAT

; 1810 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 1811 :     self->write_pos = 0;

  00005	48 8b 44 24 08	 mov	 rax, QWORD PTR self$[rsp]
  0000a	48 c7 80 a8 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+168], 0

; 1812 :     self->write_end = -1;

  00015	48 8b 44 24 08	 mov	 rax, QWORD PTR self$[rsp]
  0001a	48 c7 80 b0 00
	00 00 ff ff ff
	ff		 mov	 QWORD PTR [rax+176], -1

; 1813 : }

  00025	c3		 ret	 0
_bufferedwriter_reset_buf ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BE@GOLPACBI@bufferedwriter_init?$AA@	; `string'
PUBLIC	??_C@_0BD@LOMLGEAC@O?$HMn?3BufferedWriter?$AA@	; `string'
EXTRN	_PyIOBase_check_writable:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$bufferedwriter_init DD imagerel bufferedwriter_init
	DD	imagerel bufferedwriter_init+530
	DD	imagerel $unwind$bufferedwriter_init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$bufferedwriter_init DD 011301H
	DD	0e213H
xdata	ENDS
;	COMDAT ??_C@_0BE@GOLPACBI@bufferedwriter_init?$AA@
CONST	SEGMENT
??_C@_0BE@GOLPACBI@bufferedwriter_init?$AA@ DB 'bufferedwriter_init', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@LOMLGEAC@O?$HMn?3BufferedWriter?$AA@
CONST	SEGMENT
??_C@_0BD@LOMLGEAC@O?$HMn?3BufferedWriter?$AA@ DB 'O|n:BufferedWriter', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT bufferedwriter_init
_TEXT	SEGMENT
kwlist$ = 48
raw$ = 72
buffer_size$ = 80
_py_tmp$22013 = 88
tv139 = 96
self$ = 128
args$ = 136
kwds$ = 144
bufferedwriter_init PROC				; COMDAT

; 1817 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 1818 :     char *kwlist[] = {"raw", "buffer_size", NULL};

  00013	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_03DGOGAGNC@raw?$AA@
  0001a	48 89 44 24 30	 mov	 QWORD PTR kwlist$[rsp], rax
  0001f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0M@JLCCDMKC@buffer_size?$AA@
  00026	48 89 44 24 38	 mov	 QWORD PTR kwlist$[rsp+8], rax
  0002b	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR kwlist$[rsp+16], 0

; 1819 :     Py_ssize_t buffer_size = DEFAULT_BUFFER_SIZE;

  00034	48 c7 44 24 50
	00 20 00 00	 mov	 QWORD PTR buffer_size$[rsp], 8192 ; 00002000H

; 1820 :     PyObject *raw;
; 1821 : 
; 1822 :     self->ok = 0;

  0003d	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00045	c7 40 68 00 00
	00 00		 mov	 DWORD PTR [rax+104], 0

; 1823 :     self->detached = 0;

  0004c	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00054	c7 40 6c 00 00
	00 00		 mov	 DWORD PTR [rax+108], 0

; 1824 : 
; 1825 :     if (!PyArg_ParseTupleAndKeywords(args, kwds, "O|n:BufferedWriter", kwlist,
; 1826 :                                      &raw, &buffer_size)) {

  0005b	48 8d 44 24 50	 lea	 rax, QWORD PTR buffer_size$[rsp]
  00060	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00065	48 8d 44 24 48	 lea	 rax, QWORD PTR raw$[rsp]
  0006a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0006f	4c 8d 4c 24 30	 lea	 r9, QWORD PTR kwlist$[rsp]
  00074	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BD@LOMLGEAC@O?$HMn?3BufferedWriter?$AA@
  0007b	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR kwds$[rsp]
  00083	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  0008b	e8 00 00 00 00	 call	 _PyArg_ParseTupleAndKeywords_SizeT
  00090	85 c0		 test	 eax, eax
  00092	75 0a		 jne	 SHORT $LN7@bufferedwr

; 1827 :         return -1;

  00094	b8 ff ff ff ff	 mov	 eax, -1
  00099	e9 6f 01 00 00	 jmp	 $LN8@bufferedwr
$LN7@bufferedwr:

; 1828 :     }
; 1829 : 
; 1830 :     if (_PyIOBase_check_writable(raw, Py_True) == NULL)

  0009e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_Py_TrueStruct
  000a5	48 8b 4c 24 48	 mov	 rcx, QWORD PTR raw$[rsp]
  000aa	e8 00 00 00 00	 call	 _PyIOBase_check_writable
  000af	48 85 c0	 test	 rax, rax
  000b2	75 0a		 jne	 SHORT $LN6@bufferedwr

; 1831 :         return -1;

  000b4	b8 ff ff ff ff	 mov	 eax, -1
  000b9	e9 4f 01 00 00	 jmp	 $LN8@bufferedwr
$LN6@bufferedwr:
$LN5@bufferedwr:

; 1832 : 
; 1833 :     Py_CLEAR(self->raw);

  000be	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  000c6	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  000cb	74 5c		 je	 SHORT $LN2@bufferedwr
  000cd	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000d5	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  000dd	4c 8b 48 60	 mov	 r9, QWORD PTR [rax+96]
  000e1	41 b8 29 07 00
	00		 mov	 r8d, 1833		; 00000729H
  000e7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@DICDDJFP@?4?4?2Modules?2_io?2bufferedio?4c?$AA@
  000ee	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@GOLPACBI@bufferedwriter_init?$AA@
  000f5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000fa	85 c0		 test	 eax, eax
  000fc	75 2b		 jne	 SHORT $LN2@bufferedwr
  000fe	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00106	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0010a	48 89 44 24 58	 mov	 QWORD PTR _py_tmp$22013[rsp], rax
  0010f	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00117	48 c7 40 60 00
	00 00 00	 mov	 QWORD PTR [rax+96], 0
  0011f	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _py_tmp$22013[rsp]
  00124	e8 00 00 00 00	 call	 _Py_DecRef
$LN2@bufferedwr:
  00129	33 c0		 xor	 eax, eax
  0012b	85 c0		 test	 eax, eax
  0012d	75 8f		 jne	 SHORT $LN5@bufferedwr

; 1834 :     Py_INCREF(raw);

  0012f	48 8b 4c 24 48	 mov	 rcx, QWORD PTR raw$[rsp]
  00134	e8 00 00 00 00	 call	 _Py_IncRef

; 1835 :     self->raw = raw;

  00139	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00141	48 8b 4c 24 48	 mov	 rcx, QWORD PTR raw$[rsp]
  00146	48 89 48 60	 mov	 QWORD PTR [rax+96], rcx

; 1836 :     self->readable = 0;

  0014a	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00152	c7 40 70 00 00
	00 00		 mov	 DWORD PTR [rax+112], 0

; 1837 :     self->writable = 1;

  00159	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00161	c7 40 74 01 00
	00 00		 mov	 DWORD PTR [rax+116], 1

; 1838 : 
; 1839 :     self->buffer_size = buffer_size;

  00168	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00170	48 8b 4c 24 50	 mov	 rcx, QWORD PTR buffer_size$[rsp]
  00175	48 89 88 c8 00
	00 00		 mov	 QWORD PTR [rax+200], rcx

; 1840 :     if (_buffered_init(self) < 0)

  0017c	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00184	e8 00 00 00 00	 call	 _buffered_init
  00189	85 c0		 test	 eax, eax
  0018b	7d 07		 jge	 SHORT $LN1@bufferedwr

; 1841 :         return -1;

  0018d	b8 ff ff ff ff	 mov	 eax, -1
  00192	eb 79		 jmp	 SHORT $LN8@bufferedwr
$LN1@bufferedwr:

; 1842 :     _bufferedwriter_reset_buf(self);

  00194	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  0019c	e8 00 00 00 00	 call	 _bufferedwriter_reset_buf

; 1843 :     self->pos = 0;

  001a1	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  001a9	48 c7 80 90 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+144], 0

; 1844 : 
; 1845 :     self->fast_closed_checks = (Py_TYPE(self) == &PyBufferedWriter_Type &&
; 1846 :                                 Py_TYPE(raw) == &PyFileIO_Type);

  001b4	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyBufferedWriter_Type
  001bb	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  001c3	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  001c7	75 1c		 jne	 SHORT $LN10@bufferedwr
  001c9	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyFileIO_Type
  001d0	48 8b 4c 24 48	 mov	 rcx, QWORD PTR raw$[rsp]
  001d5	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  001d9	75 0a		 jne	 SHORT $LN10@bufferedwr
  001db	c7 44 24 60 01
	00 00 00	 mov	 DWORD PTR tv139[rsp], 1
  001e3	eb 08		 jmp	 SHORT $LN11@bufferedwr
$LN10@bufferedwr:
  001e5	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR tv139[rsp], 0
$LN11@bufferedwr:
  001ed	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  001f5	8b 4c 24 60	 mov	 ecx, DWORD PTR tv139[rsp]
  001f9	89 48 7c	 mov	 DWORD PTR [rax+124], ecx

; 1847 : 
; 1848 :     self->ok = 1;

  001fc	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00204	c7 40 68 01 00
	00 00		 mov	 DWORD PTR [rax+104], 1

; 1849 :     return 0;

  0020b	33 c0		 xor	 eax, eax
$LN8@bufferedwr:

; 1850 : }

  0020d	48 83 c4 78	 add	 rsp, 120		; 00000078H
  00211	c3		 ret	 0
bufferedwriter_init ENDP
_TEXT	ENDS
PUBLIC	??_C@_1EC@IFLEDOLM@?$AA?$CI?$AAP?$AAy?$AA_?$AAo?$AAf?$AAf?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AAP?$AAy?$AA_?$AAs?$AAs?$AAi?$AAz?$AAe?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AAn?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA?$CI?$AAn?$AA?$CJ@ ; `string'
PUBLIC	??_C@_0CK@HJILFEOG@write?5could?5not?5complete?5without@ ; `string'
PUBLIC	??_C@_1MC@LIKOGEOO@?$AA?$CI?$AAP?$AAy?$AA_?$AAo?$AAf?$AAf?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AAP?$AAy?$AA_?$AAs?$AAs?$AAi?$AAz?$AAe?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAw?$AAr?$AAi@ ; `string'
EXTRN	PyErr_CheckSignals:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_bufferedwriter_flush_unlocked DD imagerel _bufferedwriter_flush_unlocked
	DD	imagerel _bufferedwriter_flush_unlocked+712
	DD	imagerel $unwind$_bufferedwriter_flush_unlocked
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_bufferedwriter_flush_unlocked DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_1EC@IFLEDOLM@?$AA?$CI?$AAP?$AAy?$AA_?$AAo?$AAf?$AAf?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AAP?$AAy?$AA_?$AAs?$AAs?$AAi?$AAz?$AAe?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AAn?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA?$CI?$AAn?$AA?$CJ@
CONST	SEGMENT
??_C@_1EC@IFLEDOLM@?$AA?$CI?$AAP?$AAy?$AA_?$AAo?$AAf?$AAf?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AAP?$AAy?$AA_?$AAs?$AAs?$AAi?$AAz?$AAe?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AAn?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA?$CI?$AAn?$AA?$CJ@ DB '('
	DB	00H, 'P', 00H, 'y', 00H, '_', 00H, 'o', 00H, 'f', 00H, 'f', 00H
	DB	'_', 00H, 't', 00H, ')', 00H, '(', 00H, 'P', 00H, 'y', 00H, '_'
	DB	00H, 's', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, '_', 00H
	DB	't', 00H, ')', 00H, '(', 00H, 'n', 00H, ')', 00H, ' ', 00H, '='
	DB	00H, '=', 00H, ' ', 00H, '(', 00H, 'n', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@HJILFEOG@write?5could?5not?5complete?5without@
CONST	SEGMENT
??_C@_0CK@HJILFEOG@write?5could?5not?5complete?5without@ DB 'write could '
	DB	'not complete without blocking', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1MC@LIKOGEOO@?$AA?$CI?$AAP?$AAy?$AA_?$AAo?$AAf?$AAf?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AAP?$AAy?$AA_?$AAs?$AAs?$AAi?$AAz?$AAe?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAw?$AAr?$AAi@
CONST	SEGMENT
??_C@_1MC@LIKOGEOO@?$AA?$CI?$AAP?$AAy?$AA_?$AAo?$AAf?$AAf?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AAP?$AAy?$AA_?$AAs?$AAs?$AAi?$AAz?$AAe?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAw?$AAr?$AAi@ DB '('
	DB	00H, 'P', 00H, 'y', 00H, '_', 00H, 'o', 00H, 'f', 00H, 'f', 00H
	DB	'_', 00H, 't', 00H, ')', 00H, '(', 00H, 'P', 00H, 'y', 00H, '_'
	DB	00H, 's', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, '_', 00H
	DB	't', 00H, ')', 00H, '(', 00H, 's', 00H, 'e', 00H, 'l', 00H, 'f'
	DB	00H, '-', 00H, '>', 00H, 'w', 00H, 'r', 00H, 'i', 00H, 't', 00H
	DB	'e', 00H, '_', 00H, 'e', 00H, 'n', 00H, 'd', 00H, ' ', 00H, '-'
	DB	00H, ' ', 00H, 's', 00H, 'e', 00H, 'l', 00H, 'f', 00H, '-', 00H
	DB	'>', 00H, 'w', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'e', 00H, '_'
	DB	00H, 'p', 00H, 'o', 00H, 's', 00H, ')', 00H, ' ', 00H, '=', 00H
	DB	'=', 00H, ' ', 00H, '(', 00H, 's', 00H, 'e', 00H, 'l', 00H, 'f'
	DB	00H, '-', 00H, '>', 00H, 'w', 00H, 'r', 00H, 'i', 00H, 't', 00H
	DB	'e', 00H, '_', 00H, 'e', 00H, 'n', 00H, 'd', 00H, ' ', 00H, '-'
	DB	00H, ' ', 00H, 's', 00H, 'e', 00H, 'l', 00H, 'f', 00H, '-', 00H
	DB	'>', 00H, 'w', 00H, 'r', 00H, 'i', 00H, 't', 00H, 'e', 00H, '_'
	DB	00H, 'p', 00H, 'o', 00H, 's', 00H, ')', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _bufferedwriter_flush_unlocked
_TEXT	SEGMENT
n$ = 32
rewind$ = 40
written$ = 48
tv84 = 56
self$ = 80
_bufferedwriter_flush_unlocked PROC			; COMDAT

; 1903 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1904 :     Py_ssize_t written = 0;

  00009	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR written$[rsp], 0

; 1905 :     Py_off_t n, rewind;
; 1906 : 
; 1907 :     if (!VALID_WRITE_BUFFER(self) || self->write_pos == self->write_end)

  00012	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00017	83 78 74 00	 cmp	 DWORD PTR [rax+116], 0
  0001b	74 29		 je	 SHORT $LN9@bufferedwr@2
  0001d	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00022	48 83 b8 b0 00
	00 00 ff	 cmp	 QWORD PTR [rax+176], -1
  0002a	74 1a		 je	 SHORT $LN9@bufferedwr@2
  0002c	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00031	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  00036	48 8b 89 b0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+176]
  0003d	48 39 88 a8 00
	00 00		 cmp	 QWORD PTR [rax+168], rcx
  00044	75 05		 jne	 SHORT $LN10@bufferedwr@2
$LN9@bufferedwr@2:

; 1908 :         goto end;

  00046	e9 61 02 00 00	 jmp	 $end$22062
$LN10@bufferedwr@2:

; 1909 :     /* First, rewind */
; 1910 :     rewind = RAW_OFFSET(self) + (self->pos - self->write_pos);

  0004b	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00050	83 78 70 00	 cmp	 DWORD PTR [rax+112], 0
  00054	74 0f		 je	 SHORT $LN13@bufferedwr@2
  00056	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  0005b	48 83 b8 a0 00
	00 00 ff	 cmp	 QWORD PTR [rax+160], -1
  00063	75 1a		 jne	 SHORT $LN15@bufferedwr@2
$LN13@bufferedwr@2:
  00065	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  0006a	83 78 74 00	 cmp	 DWORD PTR [rax+116], 0
  0006e	74 40		 je	 SHORT $LN14@bufferedwr@2
  00070	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00075	48 83 b8 b0 00
	00 00 ff	 cmp	 QWORD PTR [rax+176], -1
  0007d	74 31		 je	 SHORT $LN14@bufferedwr@2
$LN15@bufferedwr@2:
  0007f	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00084	48 83 b8 98 00
	00 00 00	 cmp	 QWORD PTR [rax+152], 0
  0008c	7c 22		 jl	 SHORT $LN14@bufferedwr@2
  0008e	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00093	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  00098	48 8b 89 90 00
	00 00		 mov	 rcx, QWORD PTR [rcx+144]
  0009f	48 8b 80 98 00
	00 00		 mov	 rax, QWORD PTR [rax+152]
  000a6	48 2b c1	 sub	 rax, rcx
  000a9	48 89 44 24 38	 mov	 QWORD PTR tv84[rsp], rax
  000ae	eb 09		 jmp	 SHORT $LN16@bufferedwr@2
$LN14@bufferedwr@2:
  000b0	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR tv84[rsp], 0
$LN16@bufferedwr@2:
  000b9	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  000be	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  000c3	48 8b 89 a8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+168]
  000ca	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  000d1	48 2b c1	 sub	 rax, rcx
  000d4	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tv84[rsp]
  000d9	48 03 c8	 add	 rcx, rax
  000dc	48 8b c1	 mov	 rax, rcx
  000df	48 89 44 24 28	 mov	 QWORD PTR rewind$[rsp], rax

; 1911 :     if (rewind != 0) {

  000e4	48 83 7c 24 28
	00		 cmp	 QWORD PTR rewind$[rsp], 0
  000ea	74 4d		 je	 SHORT $LN8@bufferedwr@2

; 1912 :         n = _buffered_raw_seek(self, -rewind, 1);

  000ec	48 8b 44 24 28	 mov	 rax, QWORD PTR rewind$[rsp]
  000f1	48 f7 d8	 neg	 rax
  000f4	41 b8 01 00 00
	00		 mov	 r8d, 1
  000fa	48 8b d0	 mov	 rdx, rax
  000fd	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  00102	e8 00 00 00 00	 call	 _buffered_raw_seek
  00107	48 89 44 24 20	 mov	 QWORD PTR n$[rsp], rax

; 1913 :         if (n < 0) {

  0010c	48 83 7c 24 20
	00		 cmp	 QWORD PTR n$[rsp], 0
  00112	7d 05		 jge	 SHORT $LN7@bufferedwr@2

; 1914 :             goto error;

  00114	e9 a8 01 00 00	 jmp	 $error$22065
$LN7@bufferedwr@2:

; 1915 :         }
; 1916 :         self->raw_pos -= rewind;

  00119	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  0011e	48 8b 4c 24 28	 mov	 rcx, QWORD PTR rewind$[rsp]
  00123	48 8b 80 98 00
	00 00		 mov	 rax, QWORD PTR [rax+152]
  0012a	48 2b c1	 sub	 rax, rcx
  0012d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  00132	48 89 81 98 00
	00 00		 mov	 QWORD PTR [rcx+152], rax
$LN8@bufferedwr@2:
$LN6@bufferedwr@2:

; 1917 :     }
; 1918 :     while (self->write_pos < self->write_end) {

  00139	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  0013e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  00143	48 8b 89 b0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+176]
  0014a	48 39 88 a8 00
	00 00		 cmp	 QWORD PTR [rax+168], rcx
  00151	0f 8d 4b 01 00
	00		 jge	 $LN5@bufferedwr@2

; 1919 :         n = _bufferedwriter_raw_write(self,
; 1920 :             self->buffer + self->write_pos,
; 1921 :             Py_SAFE_DOWNCAST(self->write_end - self->write_pos,
; 1922 :                              Py_off_t, Py_ssize_t));

  00157	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  0015c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  00161	48 8b 89 a8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+168]
  00168	48 8b 80 b0 00
	00 00		 mov	 rax, QWORD PTR [rax+176]
  0016f	48 2b c1	 sub	 rax, rcx
  00172	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  00177	48 8b 54 24 50	 mov	 rdx, QWORD PTR self$[rsp]
  0017c	48 8b 92 a8 00
	00 00		 mov	 rdx, QWORD PTR [rdx+168]
  00183	48 8b 89 b0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+176]
  0018a	48 2b ca	 sub	 rcx, rdx
  0018d	48 3b c1	 cmp	 rax, rcx
  00190	74 1c		 je	 SHORT $LN17@bufferedwr@2
  00192	41 b8 82 07 00
	00		 mov	 r8d, 1922		; 00000782H
  00198	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DI@KBAIHMCO@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AAe?$AAd?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  0019f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1MC@LIKOGEOO@?$AA?$CI?$AAP?$AAy?$AA_?$AAo?$AAf?$AAf?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AAP?$AAy?$AA_?$AAs?$AAs?$AAi?$AAz?$AAe?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAw?$AAr?$AAi@
  001a6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001ac	33 c0		 xor	 eax, eax
$LN17@bufferedwr@2:
  001ae	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  001b3	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  001b8	48 8b 89 a8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+168]
  001bf	48 8b 80 b0 00
	00 00		 mov	 rax, QWORD PTR [rax+176]
  001c6	48 2b c1	 sub	 rax, rcx
  001c9	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  001ce	48 8b 89 88 00
	00 00		 mov	 rcx, QWORD PTR [rcx+136]
  001d5	48 8b 54 24 50	 mov	 rdx, QWORD PTR self$[rsp]
  001da	48 03 8a a8 00
	00 00		 add	 rcx, QWORD PTR [rdx+168]
  001e1	4c 8b c0	 mov	 r8, rax
  001e4	48 8b d1	 mov	 rdx, rcx
  001e7	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  001ec	e8 00 00 00 00	 call	 _bufferedwriter_raw_write
  001f1	48 89 44 24 20	 mov	 QWORD PTR n$[rsp], rax

; 1923 :         if (n == -1) {

  001f6	48 83 7c 24 20
	ff		 cmp	 QWORD PTR n$[rsp], -1
  001fc	75 07		 jne	 SHORT $LN4@bufferedwr@2

; 1924 :             goto error;

  001fe	e9 be 00 00 00	 jmp	 $error$22065
  00203	eb 1b		 jmp	 SHORT $LN3@bufferedwr@2
$LN4@bufferedwr@2:

; 1925 :         }
; 1926 :         else if (n == -2) {

  00205	48 83 7c 24 20
	fe		 cmp	 QWORD PTR n$[rsp], -2
  0020b	75 13		 jne	 SHORT $LN2@bufferedwr@2

; 1927 :             _set_BlockingIOError("write could not complete without blocking",
; 1928 :                                  0);

  0020d	33 d2		 xor	 edx, edx
  0020f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CK@HJILFEOG@write?5could?5not?5complete?5without@
  00216	e8 00 00 00 00	 call	 _set_BlockingIOError

; 1929 :             goto error;

  0021b	e9 a1 00 00 00	 jmp	 $error$22065
$LN2@bufferedwr@2:
$LN3@bufferedwr@2:

; 1930 :         }
; 1931 :         self->write_pos += n;

  00220	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00225	48 8b 80 a8 00
	00 00		 mov	 rax, QWORD PTR [rax+168]
  0022c	48 03 44 24 20	 add	 rax, QWORD PTR n$[rsp]
  00231	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  00236	48 89 81 a8 00
	00 00		 mov	 QWORD PTR [rcx+168], rax

; 1932 :         self->raw_pos = self->write_pos;

  0023d	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00242	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  00247	48 8b 89 a8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+168]
  0024e	48 89 88 98 00
	00 00		 mov	 QWORD PTR [rax+152], rcx

; 1933 :         written += Py_SAFE_DOWNCAST(n, Py_off_t, Py_ssize_t);

  00255	48 8b 44 24 20	 mov	 rax, QWORD PTR n$[rsp]
  0025a	48 39 44 24 20	 cmp	 QWORD PTR n$[rsp], rax
  0025f	74 1c		 je	 SHORT $LN18@bufferedwr@2
  00261	41 b8 8d 07 00
	00		 mov	 r8d, 1933		; 0000078dH
  00267	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DI@KBAIHMCO@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AAe?$AAd?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  0026e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EC@IFLEDOLM@?$AA?$CI?$AAP?$AAy?$AA_?$AAo?$AAf?$AAf?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AAP?$AAy?$AA_?$AAs?$AAs?$AAi?$AAz?$AAe?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AAn?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA?$CI?$AAn?$AA?$CJ@
  00275	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0027b	33 c0		 xor	 eax, eax
$LN18@bufferedwr@2:
  0027d	48 8b 44 24 20	 mov	 rax, QWORD PTR n$[rsp]
  00282	48 8b 4c 24 30	 mov	 rcx, QWORD PTR written$[rsp]
  00287	48 03 c8	 add	 rcx, rax
  0028a	48 8b c1	 mov	 rax, rcx
  0028d	48 89 44 24 30	 mov	 QWORD PTR written$[rsp], rax

; 1934 :         /* Partial writes can return successfully when interrupted by a
; 1935 :            signal (see write(2)).  We must run signal handlers before
; 1936 :            blocking another time, possibly indefinitely. */
; 1937 :         if (PyErr_CheckSignals() < 0)

  00292	e8 00 00 00 00	 call	 PyErr_CheckSignals
  00297	85 c0		 test	 eax, eax
  00299	7d 02		 jge	 SHORT $LN1@bufferedwr@2

; 1938 :             goto error;

  0029b	eb 24		 jmp	 SHORT $error$22065
$LN1@bufferedwr@2:

; 1939 :     }

  0029d	e9 97 fe ff ff	 jmp	 $LN6@bufferedwr@2
$LN5@bufferedwr@2:

; 1940 : 
; 1941 :     _bufferedwriter_reset_buf(self);

  002a2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  002a7	e8 00 00 00 00	 call	 _bufferedwriter_reset_buf
$end$22062:

; 1942 : 
; 1943 : end:
; 1944 :     Py_RETURN_NONE;

  002ac	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  002b3	e8 00 00 00 00	 call	 _Py_IncRef
  002b8	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  002bf	eb 02		 jmp	 SHORT $LN11@bufferedwr@2
$error$22065:

; 1945 : 
; 1946 : error:
; 1947 :     return NULL;

  002c1	33 c0		 xor	 eax, eax
$LN11@bufferedwr@2:

; 1948 : }

  002c3	48 83 c4 48	 add	 rsp, 72			; 00000048H
  002c7	c3		 ret	 0
_bufferedwriter_flush_unlocked ENDP
_TEXT	ENDS
PUBLIC	??_C@_03DFFMAIEK@isn?$AA@			; `string'
EXTRN	PyErr_SetObject:PROC
EXTRN	_PyObject_CallFunction_SizeT:PROC
EXTRN	PyExc_BlockingIOError:QWORD
EXTRN	__imp__errno:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_set_BlockingIOError DD imagerel _set_BlockingIOError
	DD	imagerel _set_BlockingIOError+116
	DD	imagerel $unwind$_set_BlockingIOError
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_set_BlockingIOError DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_03DFFMAIEK@isn?$AA@
CONST	SEGMENT
??_C@_03DFFMAIEK@isn?$AA@ DB 'isn', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _set_BlockingIOError
_TEXT	SEGMENT
err$ = 48
msg$ = 80
written$ = 88
_set_BlockingIOError PROC				; COMDAT

; 659  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 660  :     PyObject *err;
; 661  :     err = PyObject_CallFunction(PyExc_BlockingIOError, "isn",
; 662  :                                 errno, msg, written);

  0000e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00014	48 8b 4c 24 58	 mov	 rcx, QWORD PTR written$[rsp]
  00019	48 89 4c 24 20	 mov	 QWORD PTR [rsp+32], rcx
  0001e	4c 8b 4c 24 50	 mov	 r9, QWORD PTR msg$[rsp]
  00023	44 8b 00	 mov	 r8d, DWORD PTR [rax]
  00026	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03DFFMAIEK@isn?$AA@
  0002d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_BlockingIOError
  00034	e8 00 00 00 00	 call	 _PyObject_CallFunction_SizeT
  00039	48 89 44 24 30	 mov	 QWORD PTR err$[rsp], rax

; 663  :     if (err)

  0003e	48 83 7c 24 30
	00		 cmp	 QWORD PTR err$[rsp], 0
  00044	74 11		 je	 SHORT $LN5@set_Blocki

; 664  :         PyErr_SetObject(PyExc_BlockingIOError, err);

  00046	48 8b 54 24 30	 mov	 rdx, QWORD PTR err$[rsp]
  0004b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_BlockingIOError
  00052	e8 00 00 00 00	 call	 PyErr_SetObject
$LN5@set_Blocki:
$LN4@set_Blocki:

; 665  :     Py_XDECREF(err);

  00057	48 83 7c 24 30
	00		 cmp	 QWORD PTR err$[rsp], 0
  0005d	74 0a		 je	 SHORT $LN1@set_Blocki
  0005f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR err$[rsp]
  00064	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@set_Blocki:
  00069	33 c0		 xor	 eax, eax
  0006b	85 c0		 test	 eax, eax
  0006d	75 e8		 jne	 SHORT $LN4@set_Blocki

; 666  : }

  0006f	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00073	c3		 ret	 0
_set_BlockingIOError ENDP
_TEXT	ENDS
PUBLIC	??_C@_0EN@PMBDGOJF@raw?5write?$CI?$CJ?5returned?5invalid?5len@ ; `string'
EXTRN	_PyIO_str_write:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$_bufferedwriter_raw_write DD imagerel _bufferedwriter_raw_write
	DD	imagerel _bufferedwriter_raw_write+456
	DD	imagerel $unwind$_bufferedwriter_raw_write
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_bufferedwriter_raw_write DD 021601H
	DD	0170116H
xdata	ENDS
;	COMDAT ??_C@_0EN@PMBDGOJF@raw?5write?$CI?$CJ?5returned?5invalid?5len@
CONST	SEGMENT
??_C@_0EN@PMBDGOJF@raw?5write?$CI?$CJ?5returned?5invalid?5len@ DB 'raw wr'
	DB	'ite() returned invalid length %zd (should have been between 0'
	DB	' and %zd)', 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _bufferedwriter_raw_write
_TEXT	SEGMENT
res$ = 48
n$ = 56
errnum$ = 64
buf$ = 80
memobj$ = 160
self$ = 192
start$ = 200
len$ = 208
_bufferedwriter_raw_write PROC				; COMDAT

; 1854 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H

; 1855 :     Py_buffer buf;
; 1856 :     PyObject *memobj, *res;
; 1857 :     Py_ssize_t n;
; 1858 :     int errnum;
; 1859 :     /* NOTE: the buffer needn't be released as its object is NULL. */
; 1860 :     if (PyBuffer_FillInfo(&buf, NULL, start, len, 1, PyBUF_CONTIG_RO) == -1)

  00016	c7 44 24 28 08
	00 00 00	 mov	 DWORD PTR [rsp+40], 8
  0001e	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR [rsp+32], 1
  00026	4c 8b 8c 24 d0
	00 00 00	 mov	 r9, QWORD PTR len$[rsp]
  0002e	4c 8b 84 24 c8
	00 00 00	 mov	 r8, QWORD PTR start$[rsp]
  00036	33 d2		 xor	 edx, edx
  00038	48 8d 4c 24 50	 lea	 rcx, QWORD PTR buf$[rsp]
  0003d	e8 00 00 00 00	 call	 PyBuffer_FillInfo
  00042	83 f8 ff	 cmp	 eax, -1
  00045	75 0c		 jne	 SHORT $LN11@bufferedwr@3

; 1861 :         return -1;

  00047	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1
  0004e	e9 6d 01 00 00	 jmp	 $LN12@bufferedwr@3
$LN11@bufferedwr@3:

; 1862 :     memobj = PyMemoryView_FromBuffer(&buf);

  00053	48 8d 4c 24 50	 lea	 rcx, QWORD PTR buf$[rsp]
  00058	e8 00 00 00 00	 call	 PyMemoryView_FromBuffer
  0005d	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR memobj$[rsp], rax

; 1863 :     if (memobj == NULL)

  00065	48 83 bc 24 a0
	00 00 00 00	 cmp	 QWORD PTR memobj$[rsp], 0
  0006e	75 0c		 jne	 SHORT $LN10@bufferedwr@3

; 1864 :         return -1;

  00070	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1
  00077	e9 44 01 00 00	 jmp	 $LN12@bufferedwr@3
$LN10@bufferedwr@3:
$LN9@bufferedwr@3:

; 1865 :     /* NOTE: PyErr_SetFromErrno() calls PyErr_CheckSignals() when EINTR
; 1866 :        occurs so we needn't do it ourselves.
; 1867 :        We then retry writing, ignoring the signal if no handler has
; 1868 :        raised (see issue #10956).
; 1869 :     */
; 1870 :     do {
; 1871 :         errno = 0;

  0007c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  00082	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0

; 1872 :         res = PyObject_CallMethodObjArgs(self->raw, _PyIO_str_write, memobj, NULL);

  00088	45 33 c9	 xor	 r9d, r9d
  0008b	4c 8b 84 24 a0
	00 00 00	 mov	 r8, QWORD PTR memobj$[rsp]
  00093	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR _PyIO_str_write
  0009a	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  000a2	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  000a6	e8 00 00 00 00	 call	 PyObject_CallMethodObjArgs
  000ab	48 89 44 24 30	 mov	 QWORD PTR res$[rsp], rax

; 1873 :         errnum = errno;

  000b0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  000b6	8b 00		 mov	 eax, DWORD PTR [rax]
  000b8	89 44 24 40	 mov	 DWORD PTR errnum$[rsp], eax

; 1874 :     } while (res == NULL && _PyIO_trap_eintr());

  000bc	48 83 7c 24 30
	00		 cmp	 QWORD PTR res$[rsp], 0
  000c2	75 09		 jne	 SHORT $LN6@bufferedwr@3
  000c4	e8 00 00 00 00	 call	 _PyIO_trap_eintr
  000c9	85 c0		 test	 eax, eax
  000cb	75 af		 jne	 SHORT $LN9@bufferedwr@3
$LN6@bufferedwr@3:

; 1875 :     Py_DECREF(memobj);

  000cd	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR memobj$[rsp]
  000d5	e8 00 00 00 00	 call	 _Py_DecRef

; 1876 :     if (res == NULL)

  000da	48 83 7c 24 30
	00		 cmp	 QWORD PTR res$[rsp], 0
  000e0	75 0c		 jne	 SHORT $LN5@bufferedwr@3

; 1877 :         return -1;

  000e2	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1
  000e9	e9 d2 00 00 00	 jmp	 $LN12@bufferedwr@3
$LN5@bufferedwr@3:

; 1878 :     if (res == Py_None) {

  000ee	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000f5	48 39 44 24 30	 cmp	 QWORD PTR res$[rsp], rax
  000fa	75 22		 jne	 SHORT $LN4@bufferedwr@3

; 1879 :         /* Non-blocking stream would have blocked. Special return code!
; 1880 :            Being paranoid we reset errno in case it is changed by code
; 1881 :            triggered by a decref.  errno is used by _set_BlockingIOError(). */
; 1882 :         Py_DECREF(res);

  000fc	48 8b 4c 24 30	 mov	 rcx, QWORD PTR res$[rsp]
  00101	e8 00 00 00 00	 call	 _Py_DecRef

; 1883 :         errno = errnum;

  00106	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__errno
  0010c	8b 4c 24 40	 mov	 ecx, DWORD PTR errnum$[rsp]
  00110	89 08		 mov	 DWORD PTR [rax], ecx

; 1884 :         return -2;

  00112	48 c7 c0 fe ff
	ff ff		 mov	 rax, -2
  00119	e9 a2 00 00 00	 jmp	 $LN12@bufferedwr@3
$LN4@bufferedwr@3:

; 1885 :     }
; 1886 :     n = PyNumber_AsSsize_t(res, PyExc_ValueError);

  0011e	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR PyExc_ValueError
  00125	48 8b 4c 24 30	 mov	 rcx, QWORD PTR res$[rsp]
  0012a	e8 00 00 00 00	 call	 PyNumber_AsSsize_t
  0012f	48 89 44 24 38	 mov	 QWORD PTR n$[rsp], rax

; 1887 :     Py_DECREF(res);

  00134	48 8b 4c 24 30	 mov	 rcx, QWORD PTR res$[rsp]
  00139	e8 00 00 00 00	 call	 _Py_DecRef

; 1888 :     if (n < 0 || n > len) {

  0013e	48 83 7c 24 38
	00		 cmp	 QWORD PTR n$[rsp], 0
  00144	7c 0f		 jl	 SHORT $LN2@bufferedwr@3
  00146	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR len$[rsp]
  0014e	48 39 44 24 38	 cmp	 QWORD PTR n$[rsp], rax
  00153	7e 29		 jle	 SHORT $LN3@bufferedwr@3
$LN2@bufferedwr@3:

; 1889 :         PyErr_Format(PyExc_IOError,
; 1890 :                      "raw write() returned invalid length %zd "
; 1891 :                      "(should have been between 0 and %zd)", n, len);

  00155	4c 8b 8c 24 d0
	00 00 00	 mov	 r9, QWORD PTR len$[rsp]
  0015d	4c 8b 44 24 38	 mov	 r8, QWORD PTR n$[rsp]
  00162	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0EN@PMBDGOJF@raw?5write?$CI?$CJ?5returned?5invalid?5len@
  00169	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_IOError
  00170	e8 00 00 00 00	 call	 PyErr_Format

; 1892 :         return -1;

  00175	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1
  0017c	eb 42		 jmp	 SHORT $LN12@bufferedwr@3
$LN3@bufferedwr@3:

; 1893 :     }
; 1894 :     if (n > 0 && self->abs_pos != -1)

  0017e	48 83 7c 24 38
	00		 cmp	 QWORD PTR n$[rsp], 0
  00184	7e 35		 jle	 SHORT $LN1@bufferedwr@3
  00186	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0018e	48 83 b8 80 00
	00 00 ff	 cmp	 QWORD PTR [rax+128], -1
  00196	74 23		 je	 SHORT $LN1@bufferedwr@3

; 1895 :         self->abs_pos += n;

  00198	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  001a0	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  001a7	48 03 44 24 38	 add	 rax, QWORD PTR n$[rsp]
  001ac	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  001b4	48 89 81 80 00
	00 00		 mov	 QWORD PTR [rcx+128], rax
$LN1@bufferedwr@3:

; 1896 :     return n;

  001bb	48 8b 44 24 38	 mov	 rax, QWORD PTR n$[rsp]
$LN12@bufferedwr@3:

; 1897 : }

  001c0	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  001c7	c3		 ret	 0
_bufferedwriter_raw_write ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BF@JHEEKBNO@bufferedwriter_write?$AA@	; `string'
PUBLIC	??_C@_1MK@JMIJKHNE@?$AA?$CI?$AAP?$AAy?$AA_?$AAo?$AAf?$AAf?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AAP?$AAy?$AA_?$AAs?$AAs?$AAi?$AAz?$AAe?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAb?$AAu?$AAf@ ; `string'
PUBLIC	??_C@_1DC@PAPLDKNL@?$AAV?$AAA?$AAL?$AAI?$AAD?$AA_?$AAW?$AAR?$AAI?$AAT?$AAE?$AA_?$AAB?$AAU?$AAF?$AAF?$AAE?$AAR?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1LC@HPPALAPA@?$AA?$CI?$AAP?$AAy?$AA_?$AAo?$AAf?$AAf?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AAP?$AAy?$AA_?$AAs?$AAs?$AAi?$AAz?$AAe?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAb?$AAu?$AAf@ ; `string'
PUBLIC	??_C@_0BF@PNDEOONP@write?5to?5closed?5file?$AA@	; `string'
PUBLIC	??_C@_08LJDKHDGM@y?$CK?3write?$AA@		; `string'
EXTRN	__imp_memmove:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$bufferedwriter_write DD imagerel bufferedwriter_write
	DD	imagerel bufferedwriter_write+3138
	DD	imagerel $unwind$bufferedwriter_write
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$bufferedwriter_write DD 021101H
	DD	01b0111H
xdata	ENDS
;	COMDAT ??_C@_0BF@JHEEKBNO@bufferedwriter_write?$AA@
CONST	SEGMENT
??_C@_0BF@JHEEKBNO@bufferedwriter_write?$AA@ DB 'bufferedwriter_write', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1MK@JMIJKHNE@?$AA?$CI?$AAP?$AAy?$AA_?$AAo?$AAf?$AAf?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AAP?$AAy?$AA_?$AAs?$AAs?$AAi?$AAz?$AAe?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAb?$AAu?$AAf@
CONST	SEGMENT
??_C@_1MK@JMIJKHNE@?$AA?$CI?$AAP?$AAy?$AA_?$AAo?$AAf?$AAf?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AAP?$AAy?$AA_?$AAs?$AAs?$AAi?$AAz?$AAe?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAb?$AAu?$AAf@ DB '('
	DB	00H, 'P', 00H, 'y', 00H, '_', 00H, 'o', 00H, 'f', 00H, 'f', 00H
	DB	'_', 00H, 't', 00H, ')', 00H, '(', 00H, 'P', 00H, 'y', 00H, '_'
	DB	00H, 's', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, '_', 00H
	DB	't', 00H, ')', 00H, '(', 00H, 's', 00H, 'e', 00H, 'l', 00H, 'f'
	DB	00H, '-', 00H, '>', 00H, 'b', 00H, 'u', 00H, 'f', 00H, 'f', 00H
	DB	'e', 00H, 'r', 00H, '_', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e'
	DB	00H, ' ', 00H, '-', 00H, ' ', 00H, 's', 00H, 'e', 00H, 'l', 00H
	DB	'f', 00H, '-', 00H, '>', 00H, 'w', 00H, 'r', 00H, 'i', 00H, 't'
	DB	00H, 'e', 00H, '_', 00H, 'e', 00H, 'n', 00H, 'd', 00H, ')', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '(', 00H, 's', 00H, 'e'
	DB	00H, 'l', 00H, 'f', 00H, '-', 00H, '>', 00H, 'b', 00H, 'u', 00H
	DB	'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H, '_', 00H, 's', 00H, 'i'
	DB	00H, 'z', 00H, 'e', 00H, ' ', 00H, '-', 00H, ' ', 00H, 's', 00H
	DB	'e', 00H, 'l', 00H, 'f', 00H, '-', 00H, '>', 00H, 'w', 00H, 'r'
	DB	00H, 'i', 00H, 't', 00H, 'e', 00H, '_', 00H, 'e', 00H, 'n', 00H
	DB	'd', 00H, ')', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1DC@PAPLDKNL@?$AAV?$AAA?$AAL?$AAI?$AAD?$AA_?$AAW?$AAR?$AAI?$AAT?$AAE?$AA_?$AAB?$AAU?$AAF?$AAF?$AAE?$AAR?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DC@PAPLDKNL@?$AAV?$AAA?$AAL?$AAI?$AAD?$AA_?$AAW?$AAR?$AAI?$AAT?$AAE?$AA_?$AAB?$AAU?$AAF?$AAF?$AAE?$AAR?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?$CJ?$AA?$AA@ DB 'V'
	DB	00H, 'A', 00H, 'L', 00H, 'I', 00H, 'D', 00H, '_', 00H, 'W', 00H
	DB	'R', 00H, 'I', 00H, 'T', 00H, 'E', 00H, '_', 00H, 'B', 00H, 'U'
	DB	00H, 'F', 00H, 'F', 00H, 'E', 00H, 'R', 00H, '(', 00H, 's', 00H
	DB	'e', 00H, 'l', 00H, 'f', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1LC@HPPALAPA@?$AA?$CI?$AAP?$AAy?$AA_?$AAo?$AAf?$AAf?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AAP?$AAy?$AA_?$AAs?$AAs?$AAi?$AAz?$AAe?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAb?$AAu?$AAf@
CONST	SEGMENT
??_C@_1LC@HPPALAPA@?$AA?$CI?$AAP?$AAy?$AA_?$AAo?$AAf?$AAf?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AAP?$AAy?$AA_?$AAs?$AAs?$AAi?$AAz?$AAe?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAb?$AAu?$AAf@ DB '('
	DB	00H, 'P', 00H, 'y', 00H, '_', 00H, 'o', 00H, 'f', 00H, 'f', 00H
	DB	'_', 00H, 't', 00H, ')', 00H, '(', 00H, 'P', 00H, 'y', 00H, '_'
	DB	00H, 's', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, '_', 00H
	DB	't', 00H, ')', 00H, '(', 00H, 's', 00H, 'e', 00H, 'l', 00H, 'f'
	DB	00H, '-', 00H, '>', 00H, 'b', 00H, 'u', 00H, 'f', 00H, 'f', 00H
	DB	'e', 00H, 'r', 00H, '_', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e'
	DB	00H, ' ', 00H, '-', 00H, ' ', 00H, 's', 00H, 'e', 00H, 'l', 00H
	DB	'f', 00H, '-', 00H, '>', 00H, 'p', 00H, 'o', 00H, 's', 00H, ')'
	DB	00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, '(', 00H, 's', 00H
	DB	'e', 00H, 'l', 00H, 'f', 00H, '-', 00H, '>', 00H, 'b', 00H, 'u'
	DB	00H, 'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H, '_', 00H, 's', 00H
	DB	'i', 00H, 'z', 00H, 'e', 00H, ' ', 00H, '-', 00H, ' ', 00H, 's'
	DB	00H, 'e', 00H, 'l', 00H, 'f', 00H, '-', 00H, '>', 00H, 'p', 00H
	DB	'o', 00H, 's', 00H, ')', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@PNDEOONP@write?5to?5closed?5file?$AA@
CONST	SEGMENT
??_C@_0BF@PNDEOONP@write?5to?5closed?5file?$AA@ DB 'write to closed file', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08LJDKHDGM@y?$CK?3write?$AA@
CONST	SEGMENT
??_C@_08LJDKHDGM@y?$CK?3write?$AA@ DB 'y*:write', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT bufferedwriter_write
_TEXT	SEGMENT
res$ = 48
written$ = 56
offset$ = 64
remaining$ = 72
buf$ = 80
avail$ = 160
w$22131 = 168
_py_tmp$22153 = 176
n$22162 = 184
tv84 = 192
tv128 = 196
tv306 = 200
self$ = 224
args$ = 232
bufferedwriter_write PROC				; COMDAT

; 1952 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec d8 00
	00 00		 sub	 rsp, 216		; 000000d8H

; 1953 :     PyObject *res = NULL;

  00011	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR res$[rsp], 0

; 1954 :     Py_buffer buf;
; 1955 :     Py_ssize_t written, avail, remaining;
; 1956 :     Py_off_t offset;
; 1957 : 
; 1958 :     CHECK_INITIALIZED(self)

  0001a	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00022	83 78 68 00	 cmp	 DWORD PTR [rax+104], 0
  00026	7f 3d		 jg	 SHORT $LN48@bufferedwr@4
  00028	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00030	83 78 6c 00	 cmp	 DWORD PTR [rax+108], 0
  00034	74 15		 je	 SHORT $LN47@bufferedwr@4
  00036	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@IOAMDFLF@raw?5stream?5has?5been?5detached?$AA@
  0003d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00044	e8 00 00 00 00	 call	 PyErr_SetString
  00049	eb 13		 jmp	 SHORT $LN46@bufferedwr@4
$LN47@bufferedwr@4:
  0004b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
  00052	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00059	e8 00 00 00 00	 call	 PyErr_SetString
$LN46@bufferedwr@4:
  0005e	33 c0		 xor	 eax, eax
  00060	e9 d5 0b 00 00	 jmp	 $LN49@bufferedwr@4
$LN48@bufferedwr@4:

; 1959 :     if (!PyArg_ParseTuple(args, "y*:write", &buf)) {

  00065	4c 8d 44 24 50	 lea	 r8, QWORD PTR buf$[rsp]
  0006a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08LJDKHDGM@y?$CK?3write?$AA@
  00071	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  00079	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  0007e	85 c0		 test	 eax, eax
  00080	75 07		 jne	 SHORT $LN45@bufferedwr@4

; 1960 :         return NULL;

  00082	33 c0		 xor	 eax, eax
  00084	e9 b1 0b 00 00	 jmp	 $LN49@bufferedwr@4
$LN45@bufferedwr@4:

; 1961 :     }
; 1962 : 
; 1963 :     if (IS_CLOSED(self)) {

  00089	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00091	83 78 7c 00	 cmp	 DWORD PTR [rax+124], 0
  00095	74 1a		 je	 SHORT $LN51@bufferedwr@4
  00097	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0009f	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  000a3	e8 00 00 00 00	 call	 _PyFileIO_closed
  000a8	89 84 24 c0 00
	00 00		 mov	 DWORD PTR tv84[rsp], eax
  000af	eb 14		 jmp	 SHORT $LN52@bufferedwr@4
$LN51@bufferedwr@4:
  000b1	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  000b9	e8 00 00 00 00	 call	 buffered_closed
  000be	89 84 24 c0 00
	00 00		 mov	 DWORD PTR tv84[rsp], eax
$LN52@bufferedwr@4:
  000c5	83 bc 24 c0 00
	00 00 00	 cmp	 DWORD PTR tv84[rsp], 0
  000cd	74 24		 je	 SHORT $LN44@bufferedwr@4

; 1964 :         PyErr_SetString(PyExc_ValueError, "write to closed file");

  000cf	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BF@PNDEOONP@write?5to?5closed?5file?$AA@
  000d6	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  000dd	e8 00 00 00 00	 call	 PyErr_SetString

; 1965 :         PyBuffer_Release(&buf);

  000e2	48 8d 4c 24 50	 lea	 rcx, QWORD PTR buf$[rsp]
  000e7	e8 00 00 00 00	 call	 PyBuffer_Release

; 1966 :         return NULL;

  000ec	33 c0		 xor	 eax, eax
  000ee	e9 47 0b 00 00	 jmp	 $LN49@bufferedwr@4
$LN44@bufferedwr@4:

; 1967 :     }
; 1968 : 
; 1969 :     if (!ENTER_BUFFERED(self)) {

  000f3	33 d2		 xor	 edx, edx
  000f5	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  000fd	48 8b 88 b8 00
	00 00		 mov	 rcx, QWORD PTR [rax+184]
  00104	e8 00 00 00 00	 call	 PyThread_acquire_lock
  00109	85 c0		 test	 eax, eax
  0010b	74 0d		 je	 SHORT $LN53@bufferedwr@4
  0010d	c7 84 24 c4 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv128[rsp], 1
  00118	eb 14		 jmp	 SHORT $LN54@bufferedwr@4
$LN53@bufferedwr@4:
  0011a	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00122	e8 00 00 00 00	 call	 _enter_buffered_busy
  00127	89 84 24 c4 00
	00 00		 mov	 DWORD PTR tv128[rsp], eax
$LN54@bufferedwr@4:
  0012e	83 bc 24 c4 00
	00 00 00	 cmp	 DWORD PTR tv128[rsp], 0
  00136	74 1a		 je	 SHORT $LN42@bufferedwr@4
  00138	e8 00 00 00 00	 call	 PyThread_get_thread_ident
  0013d	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00145	89 81 c0 00 00
	00		 mov	 DWORD PTR [rcx+192], eax
  0014b	33 c0		 xor	 eax, eax
  0014d	83 f8 01	 cmp	 eax, 1
  00150	75 11		 jne	 SHORT $LN43@bufferedwr@4
$LN42@bufferedwr@4:

; 1970 :         PyBuffer_Release(&buf);

  00152	48 8d 4c 24 50	 lea	 rcx, QWORD PTR buf$[rsp]
  00157	e8 00 00 00 00	 call	 PyBuffer_Release

; 1971 :         return NULL;

  0015c	33 c0		 xor	 eax, eax
  0015e	e9 d7 0a 00 00	 jmp	 $LN49@bufferedwr@4
$LN43@bufferedwr@4:

; 1972 :     }
; 1973 : 
; 1974 :     /* Fast path: the data to write can be fully buffered. */
; 1975 :     if (!VALID_READ_BUFFER(self) && !VALID_WRITE_BUFFER(self)) {

  00163	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0016b	83 78 70 00	 cmp	 DWORD PTR [rax+112], 0
  0016f	74 12		 je	 SHORT $LN40@bufferedwr@4
  00171	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00179	48 83 b8 a0 00
	00 00 ff	 cmp	 QWORD PTR [rax+160], -1
  00181	75 46		 jne	 SHORT $LN41@bufferedwr@4
$LN40@bufferedwr@4:
  00183	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0018b	83 78 74 00	 cmp	 DWORD PTR [rax+116], 0
  0018f	74 12		 je	 SHORT $LN39@bufferedwr@4
  00191	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00199	48 83 b8 b0 00
	00 00 ff	 cmp	 QWORD PTR [rax+176], -1
  001a1	75 26		 jne	 SHORT $LN41@bufferedwr@4
$LN39@bufferedwr@4:

; 1976 :         self->pos = 0;

  001a3	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  001ab	48 c7 80 90 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+144], 0

; 1977 :         self->raw_pos = 0;

  001b6	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  001be	48 c7 80 98 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+152], 0
$LN41@bufferedwr@4:

; 1978 :     }
; 1979 :     avail = Py_SAFE_DOWNCAST(self->buffer_size - self->pos, Py_off_t, Py_ssize_t);

  001c9	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  001d1	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  001d9	48 8b 89 90 00
	00 00		 mov	 rcx, QWORD PTR [rcx+144]
  001e0	48 8b 80 c8 00
	00 00		 mov	 rax, QWORD PTR [rax+200]
  001e7	48 2b c1	 sub	 rax, rcx
  001ea	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  001f2	48 8b 94 24 e0
	00 00 00	 mov	 rdx, QWORD PTR self$[rsp]
  001fa	48 8b 92 90 00
	00 00		 mov	 rdx, QWORD PTR [rdx+144]
  00201	48 8b 89 c8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+200]
  00208	48 2b ca	 sub	 rcx, rdx
  0020b	48 3b c1	 cmp	 rax, rcx
  0020e	74 1c		 je	 SHORT $LN55@bufferedwr@4
  00210	41 b8 bb 07 00
	00		 mov	 r8d, 1979		; 000007bbH
  00216	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DI@KBAIHMCO@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AAe?$AAd?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  0021d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1LC@HPPALAPA@?$AA?$CI?$AAP?$AAy?$AA_?$AAo?$AAf?$AAf?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AAP?$AAy?$AA_?$AAs?$AAs?$AAi?$AAz?$AAe?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAb?$AAu?$AAf@
  00224	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0022a	33 c0		 xor	 eax, eax
$LN55@bufferedwr@4:
  0022c	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00234	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  0023c	48 8b 89 90 00
	00 00		 mov	 rcx, QWORD PTR [rcx+144]
  00243	48 8b 80 c8 00
	00 00		 mov	 rax, QWORD PTR [rax+200]
  0024a	48 2b c1	 sub	 rax, rcx
  0024d	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR avail$[rsp], rax

; 1980 :     if (buf.len <= avail) {

  00255	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR avail$[rsp]
  0025d	48 39 44 24 60	 cmp	 QWORD PTR buf$[rsp+16], rax
  00262	0f 8f 66 01 00
	00		 jg	 $LN38@bufferedwr@4

; 1981 :         memcpy(self->buffer + self->pos, buf.buf, buf.len);

  00268	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00270	48 8b 80 88 00
	00 00		 mov	 rax, QWORD PTR [rax+136]
  00277	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  0027f	48 03 81 90 00
	00 00		 add	 rax, QWORD PTR [rcx+144]
  00286	4c 8b 44 24 60	 mov	 r8, QWORD PTR buf$[rsp+16]
  0028b	48 8b 54 24 50	 mov	 rdx, QWORD PTR buf$[rsp]
  00290	48 8b c8	 mov	 rcx, rax
  00293	e8 00 00 00 00	 call	 memcpy

; 1982 :         if (!VALID_WRITE_BUFFER(self) || self->write_pos > self->pos) {

  00298	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  002a0	83 78 74 00	 cmp	 DWORD PTR [rax+116], 0
  002a4	74 32		 je	 SHORT $LN36@bufferedwr@4
  002a6	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  002ae	48 83 b8 b0 00
	00 00 ff	 cmp	 QWORD PTR [rax+176], -1
  002b6	74 20		 je	 SHORT $LN36@bufferedwr@4
  002b8	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  002c0	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  002c8	48 8b 89 90 00
	00 00		 mov	 rcx, QWORD PTR [rcx+144]
  002cf	48 39 88 a8 00
	00 00		 cmp	 QWORD PTR [rax+168], rcx
  002d6	7e 1e		 jle	 SHORT $LN37@bufferedwr@4
$LN36@bufferedwr@4:

; 1983 :             self->write_pos = self->pos;

  002d8	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  002e0	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  002e8	48 8b 89 90 00
	00 00		 mov	 rcx, QWORD PTR [rcx+144]
  002ef	48 89 88 a8 00
	00 00		 mov	 QWORD PTR [rax+168], rcx
$LN37@bufferedwr@4:
$LN35@bufferedwr@4:

; 1984 :         }
; 1985 :         ADJUST_POSITION(self, self->pos + buf.len);

  002f6	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  002fe	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  00305	48 03 44 24 60	 add	 rax, QWORD PTR buf$[rsp+16]
  0030a	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00312	48 89 81 90 00
	00 00		 mov	 QWORD PTR [rcx+144], rax
  00319	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00321	83 78 70 00	 cmp	 DWORD PTR [rax+112], 0
  00325	74 50		 je	 SHORT $LN32@bufferedwr@4
  00327	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0032f	48 83 b8 a0 00
	00 00 ff	 cmp	 QWORD PTR [rax+160], -1
  00337	74 3e		 je	 SHORT $LN32@bufferedwr@4
  00339	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00341	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00349	48 8b 89 90 00
	00 00		 mov	 rcx, QWORD PTR [rcx+144]
  00350	48 39 88 a0 00
	00 00		 cmp	 QWORD PTR [rax+160], rcx
  00357	7d 1e		 jge	 SHORT $LN32@bufferedwr@4
  00359	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00361	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00369	48 8b 89 90 00
	00 00		 mov	 rcx, QWORD PTR [rcx+144]
  00370	48 89 88 a0 00
	00 00		 mov	 QWORD PTR [rax+160], rcx
$LN32@bufferedwr@4:
  00377	33 c0		 xor	 eax, eax
  00379	85 c0		 test	 eax, eax
  0037b	0f 85 75 ff ff
	ff		 jne	 $LN35@bufferedwr@4

; 1986 :         if (self->pos > self->write_end)

  00381	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00389	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00391	48 8b 89 b0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+176]
  00398	48 39 88 90 00
	00 00		 cmp	 QWORD PTR [rax+144], rcx
  0039f	7e 1e		 jle	 SHORT $LN31@bufferedwr@4

; 1987 :             self->write_end = self->pos;

  003a1	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  003a9	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  003b1	48 8b 89 90 00
	00 00		 mov	 rcx, QWORD PTR [rcx+144]
  003b8	48 89 88 b0 00
	00 00		 mov	 QWORD PTR [rax+176], rcx
$LN31@bufferedwr@4:

; 1988 :         written = buf.len;

  003bf	48 8b 44 24 60	 mov	 rax, QWORD PTR buf$[rsp+16]
  003c4	48 89 44 24 38	 mov	 QWORD PTR written$[rsp], rax

; 1989 :         goto end;

  003c9	e9 22 08 00 00	 jmp	 $end$22128
$LN38@bufferedwr@4:

; 1990 :     }
; 1991 : 
; 1992 :     /* First write the current buffer */
; 1993 :     res = _bufferedwriter_flush_unlocked(self);

  003ce	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  003d6	e8 00 00 00 00	 call	 _bufferedwriter_flush_unlocked
  003db	48 89 44 24 30	 mov	 QWORD PTR res$[rsp], rax

; 1994 :     if (res == NULL) {

  003e0	48 83 7c 24 30
	00		 cmp	 QWORD PTR res$[rsp], 0
  003e6	0f 85 95 03 00
	00		 jne	 $LN30@bufferedwr@4

; 1995 :         Py_ssize_t *w = _buffered_check_blocking_error();

  003ec	e8 00 00 00 00	 call	 _buffered_check_blocking_error
  003f1	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR w$22131[rsp], rax

; 1996 :         if (w == NULL)

  003f9	48 83 bc 24 a8
	00 00 00 00	 cmp	 QWORD PTR w$22131[rsp], 0
  00402	75 05		 jne	 SHORT $LN29@bufferedwr@4

; 1997 :             goto error;

  00404	e9 f6 07 00 00	 jmp	 $error$22134
$LN29@bufferedwr@4:

; 1998 :         if (self->readable)

  00409	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00411	83 78 70 00	 cmp	 DWORD PTR [rax+112], 0
  00415	74 0d		 je	 SHORT $LN28@bufferedwr@4

; 1999 :             _bufferedreader_reset_buf(self);

  00417	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  0041f	e8 00 00 00 00	 call	 _bufferedreader_reset_buf
$LN28@bufferedwr@4:

; 2000 :         /* Make some place by shifting the buffer. */
; 2001 :         assert(VALID_WRITE_BUFFER(self));

  00424	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0042c	83 78 74 00	 cmp	 DWORD PTR [rax+116], 0
  00430	74 12		 je	 SHORT $LN56@bufferedwr@4
  00432	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0043a	48 83 b8 b0 00
	00 00 ff	 cmp	 QWORD PTR [rax+176], -1
  00442	75 1c		 jne	 SHORT $LN57@bufferedwr@4
$LN56@bufferedwr@4:
  00444	41 b8 d1 07 00
	00		 mov	 r8d, 2001		; 000007d1H
  0044a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DI@KBAIHMCO@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AAe?$AAd?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  00451	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DC@PAPLDKNL@?$AAV?$AAA?$AAL?$AAI?$AAD?$AA_?$AAW?$AAR?$AAI?$AAT?$AAE?$AA_?$AAB?$AAU?$AAF?$AAF?$AAE?$AAR?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?$CJ?$AA?$AA@
  00458	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0045e	33 c0		 xor	 eax, eax
$LN57@bufferedwr@4:

; 2002 :         memmove(self->buffer, self->buffer + self->write_pos,
; 2003 :                 Py_SAFE_DOWNCAST(self->write_end - self->write_pos,
; 2004 :                                  Py_off_t, Py_ssize_t));

  00460	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00468	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00470	48 8b 89 a8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+168]
  00477	48 8b 80 b0 00
	00 00		 mov	 rax, QWORD PTR [rax+176]
  0047e	48 2b c1	 sub	 rax, rcx
  00481	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00489	48 8b 94 24 e0
	00 00 00	 mov	 rdx, QWORD PTR self$[rsp]
  00491	48 8b 92 a8 00
	00 00		 mov	 rdx, QWORD PTR [rdx+168]
  00498	48 8b 89 b0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+176]
  0049f	48 2b ca	 sub	 rcx, rdx
  004a2	48 3b c1	 cmp	 rax, rcx
  004a5	74 1c		 je	 SHORT $LN58@bufferedwr@4
  004a7	41 b8 d4 07 00
	00		 mov	 r8d, 2004		; 000007d4H
  004ad	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DI@KBAIHMCO@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AAe?$AAd?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  004b4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1MC@LIKOGEOO@?$AA?$CI?$AAP?$AAy?$AA_?$AAo?$AAf?$AAf?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AAP?$AAy?$AA_?$AAs?$AAs?$AAi?$AAz?$AAe?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAw?$AAr?$AAi@
  004bb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  004c1	33 c0		 xor	 eax, eax
$LN58@bufferedwr@4:
  004c3	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  004cb	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  004d3	48 8b 89 a8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+168]
  004da	48 8b 80 b0 00
	00 00		 mov	 rax, QWORD PTR [rax+176]
  004e1	48 2b c1	 sub	 rax, rcx
  004e4	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  004ec	48 8b 89 88 00
	00 00		 mov	 rcx, QWORD PTR [rcx+136]
  004f3	48 8b 94 24 e0
	00 00 00	 mov	 rdx, QWORD PTR self$[rsp]
  004fb	48 03 8a a8 00
	00 00		 add	 rcx, QWORD PTR [rdx+168]
  00502	4c 8b c0	 mov	 r8, rax
  00505	48 8b d1	 mov	 rdx, rcx
  00508	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00510	48 8b 88 88 00
	00 00		 mov	 rcx, QWORD PTR [rax+136]
  00517	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_memmove

; 2005 :         self->write_end -= self->write_pos;

  0051d	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00525	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  0052d	48 8b 89 a8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+168]
  00534	48 8b 80 b0 00
	00 00		 mov	 rax, QWORD PTR [rax+176]
  0053b	48 2b c1	 sub	 rax, rcx
  0053e	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00546	48 89 81 b0 00
	00 00		 mov	 QWORD PTR [rcx+176], rax

; 2006 :         self->raw_pos -= self->write_pos;

  0054d	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00555	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  0055d	48 8b 89 a8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+168]
  00564	48 8b 80 98 00
	00 00		 mov	 rax, QWORD PTR [rax+152]
  0056b	48 2b c1	 sub	 rax, rcx
  0056e	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00576	48 89 81 98 00
	00 00		 mov	 QWORD PTR [rcx+152], rax

; 2007 :         self->pos -= self->write_pos;

  0057d	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00585	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  0058d	48 8b 89 a8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+168]
  00594	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  0059b	48 2b c1	 sub	 rax, rcx
  0059e	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  005a6	48 89 81 90 00
	00 00		 mov	 QWORD PTR [rcx+144], rax

; 2008 :         self->write_pos = 0;

  005ad	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  005b5	48 c7 80 a8 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+168], 0

; 2009 :         avail = Py_SAFE_DOWNCAST(self->buffer_size - self->write_end,
; 2010 :                                  Py_off_t, Py_ssize_t);

  005c0	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  005c8	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  005d0	48 8b 89 b0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+176]
  005d7	48 8b 80 c8 00
	00 00		 mov	 rax, QWORD PTR [rax+200]
  005de	48 2b c1	 sub	 rax, rcx
  005e1	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  005e9	48 8b 94 24 e0
	00 00 00	 mov	 rdx, QWORD PTR self$[rsp]
  005f1	48 8b 92 b0 00
	00 00		 mov	 rdx, QWORD PTR [rdx+176]
  005f8	48 8b 89 c8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+200]
  005ff	48 2b ca	 sub	 rcx, rdx
  00602	48 3b c1	 cmp	 rax, rcx
  00605	74 1c		 je	 SHORT $LN59@bufferedwr@4
  00607	41 b8 da 07 00
	00		 mov	 r8d, 2010		; 000007daH
  0060d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DI@KBAIHMCO@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AAe?$AAd?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  00614	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1MK@JMIJKHNE@?$AA?$CI?$AAP?$AAy?$AA_?$AAo?$AAf?$AAf?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AAP?$AAy?$AA_?$AAs?$AAs?$AAi?$AAz?$AAe?$AA_?$AAt?$AA?$CJ?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?9?$AA?$DO?$AAb?$AAu?$AAf@
  0061b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00621	33 c0		 xor	 eax, eax
$LN59@bufferedwr@4:
  00623	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0062b	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00633	48 8b 89 b0 00
	00 00		 mov	 rcx, QWORD PTR [rcx+176]
  0063a	48 8b 80 c8 00
	00 00		 mov	 rax, QWORD PTR [rax+200]
  00641	48 2b c1	 sub	 rax, rcx
  00644	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR avail$[rsp], rax

; 2011 :         if (buf.len <= avail) {

  0064c	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR avail$[rsp]
  00654	48 39 44 24 60	 cmp	 QWORD PTR buf$[rsp+16], rax
  00659	0f 8f 8a 00 00
	00		 jg	 $LN27@bufferedwr@4

; 2012 :             /* Everything can be buffered */
; 2013 :             PyErr_Clear();

  0065f	e8 00 00 00 00	 call	 PyErr_Clear

; 2014 :             memcpy(self->buffer + self->write_end, buf.buf, buf.len);

  00664	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0066c	48 8b 80 88 00
	00 00		 mov	 rax, QWORD PTR [rax+136]
  00673	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  0067b	48 03 81 b0 00
	00 00		 add	 rax, QWORD PTR [rcx+176]
  00682	4c 8b 44 24 60	 mov	 r8, QWORD PTR buf$[rsp+16]
  00687	48 8b 54 24 50	 mov	 rdx, QWORD PTR buf$[rsp]
  0068c	48 8b c8	 mov	 rcx, rax
  0068f	e8 00 00 00 00	 call	 memcpy

; 2015 :             self->write_end += buf.len;

  00694	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0069c	48 8b 80 b0 00
	00 00		 mov	 rax, QWORD PTR [rax+176]
  006a3	48 03 44 24 60	 add	 rax, QWORD PTR buf$[rsp+16]
  006a8	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  006b0	48 89 81 b0 00
	00 00		 mov	 QWORD PTR [rcx+176], rax

; 2016 :             self->pos += buf.len;

  006b7	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  006bf	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  006c6	48 03 44 24 60	 add	 rax, QWORD PTR buf$[rsp+16]
  006cb	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  006d3	48 89 81 90 00
	00 00		 mov	 QWORD PTR [rcx+144], rax

; 2017 :             written = buf.len;

  006da	48 8b 44 24 60	 mov	 rax, QWORD PTR buf$[rsp+16]
  006df	48 89 44 24 38	 mov	 QWORD PTR written$[rsp], rax

; 2018 :             goto end;

  006e4	e9 07 05 00 00	 jmp	 $end$22128
$LN27@bufferedwr@4:

; 2019 :         }
; 2020 :         /* Buffer as much as possible. */
; 2021 :         memcpy(self->buffer + self->write_end, buf.buf, avail);

  006e9	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  006f1	48 8b 80 88 00
	00 00		 mov	 rax, QWORD PTR [rax+136]
  006f8	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00700	48 03 81 b0 00
	00 00		 add	 rax, QWORD PTR [rcx+176]
  00707	4c 8b 84 24 a0
	00 00 00	 mov	 r8, QWORD PTR avail$[rsp]
  0070f	48 8b 54 24 50	 mov	 rdx, QWORD PTR buf$[rsp]
  00714	48 8b c8	 mov	 rcx, rax
  00717	e8 00 00 00 00	 call	 memcpy

; 2022 :         self->write_end += avail;

  0071c	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00724	48 8b 80 b0 00
	00 00		 mov	 rax, QWORD PTR [rax+176]
  0072b	48 03 84 24 a0
	00 00 00	 add	 rax, QWORD PTR avail$[rsp]
  00733	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  0073b	48 89 81 b0 00
	00 00		 mov	 QWORD PTR [rcx+176], rax

; 2023 :         self->pos += avail;

  00742	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0074a	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  00751	48 03 84 24 a0
	00 00 00	 add	 rax, QWORD PTR avail$[rsp]
  00759	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00761	48 89 81 90 00
	00 00		 mov	 QWORD PTR [rcx+144], rax

; 2024 :         /* XXX Modifying the existing exception e using the pointer w
; 2025 :            will change e.characters_written but not e.args[2].
; 2026 :            Therefore we just replace with a new error. */
; 2027 :         _set_BlockingIOError("write could not complete without blocking",
; 2028 :                              avail);

  00768	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR avail$[rsp]
  00770	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CK@HJILFEOG@write?5could?5not?5complete?5without@
  00777	e8 00 00 00 00	 call	 _set_BlockingIOError

; 2029 :         goto error;

  0077c	e9 7e 04 00 00	 jmp	 $error$22134
$LN30@bufferedwr@4:
$LN26@bufferedwr@4:

; 2030 :     }
; 2031 :     Py_CLEAR(res);

  00781	48 83 7c 24 30
	00		 cmp	 QWORD PTR res$[rsp], 0
  00787	74 4d		 je	 SHORT $LN23@bufferedwr@4
  00789	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00791	4c 8b 4c 24 30	 mov	 r9, QWORD PTR res$[rsp]
  00796	41 b8 ef 07 00
	00		 mov	 r8d, 2031		; 000007efH
  0079c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@DICDDJFP@?4?4?2Modules?2_io?2bufferedio?4c?$AA@
  007a3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@JHEEKBNO@bufferedwriter_write?$AA@
  007aa	e8 00 00 00 00	 call	 _PyParallel_Guard
  007af	85 c0		 test	 eax, eax
  007b1	75 23		 jne	 SHORT $LN23@bufferedwr@4
  007b3	48 8b 44 24 30	 mov	 rax, QWORD PTR res$[rsp]
  007b8	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR _py_tmp$22153[rsp], rax
  007c0	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR res$[rsp], 0
  007c9	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR _py_tmp$22153[rsp]
  007d1	e8 00 00 00 00	 call	 _Py_DecRef
$LN23@bufferedwr@4:
  007d6	33 c0		 xor	 eax, eax
  007d8	85 c0		 test	 eax, eax
  007da	75 a5		 jne	 SHORT $LN26@bufferedwr@4

; 2032 : 
; 2033 :     /* Adjust the raw stream position if it is away from the logical stream
; 2034 :        position. This happens if the read buffer has been filled but not
; 2035 :        modified (and therefore _bufferedwriter_flush_unlocked() didn't rewind
; 2036 :        the raw stream by itself).
; 2037 :        Fixes issue #6629.
; 2038 :     */
; 2039 :     offset = RAW_OFFSET(self);

  007dc	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  007e4	83 78 70 00	 cmp	 DWORD PTR [rax+112], 0
  007e8	74 12		 je	 SHORT $LN60@bufferedwr@4
  007ea	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  007f2	48 83 b8 a0 00
	00 00 ff	 cmp	 QWORD PTR [rax+160], -1
  007fa	75 20		 jne	 SHORT $LN62@bufferedwr@4
$LN60@bufferedwr@4:
  007fc	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00804	83 78 74 00	 cmp	 DWORD PTR [rax+116], 0
  00808	74 4f		 je	 SHORT $LN61@bufferedwr@4
  0080a	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00812	48 83 b8 b0 00
	00 00 ff	 cmp	 QWORD PTR [rax+176], -1
  0081a	74 3d		 je	 SHORT $LN61@bufferedwr@4
$LN62@bufferedwr@4:
  0081c	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00824	48 83 b8 98 00
	00 00 00	 cmp	 QWORD PTR [rax+152], 0
  0082c	7c 2b		 jl	 SHORT $LN61@bufferedwr@4
  0082e	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00836	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  0083e	48 8b 89 90 00
	00 00		 mov	 rcx, QWORD PTR [rcx+144]
  00845	48 8b 80 98 00
	00 00		 mov	 rax, QWORD PTR [rax+152]
  0084c	48 2b c1	 sub	 rax, rcx
  0084f	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR tv306[rsp], rax
  00857	eb 0c		 jmp	 SHORT $LN63@bufferedwr@4
$LN61@bufferedwr@4:
  00859	48 c7 84 24 c8
	00 00 00 00 00
	00 00		 mov	 QWORD PTR tv306[rsp], 0
$LN63@bufferedwr@4:
  00865	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR tv306[rsp]
  0086d	48 89 44 24 40	 mov	 QWORD PTR offset$[rsp], rax

; 2040 :     if (offset != 0) {

  00872	48 83 7c 24 40
	00		 cmp	 QWORD PTR offset$[rsp], 0
  00878	74 4e		 je	 SHORT $LN22@bufferedwr@4

; 2041 :         if (_buffered_raw_seek(self, -offset, 1) < 0)

  0087a	48 8b 44 24 40	 mov	 rax, QWORD PTR offset$[rsp]
  0087f	48 f7 d8	 neg	 rax
  00882	41 b8 01 00 00
	00		 mov	 r8d, 1
  00888	48 8b d0	 mov	 rdx, rax
  0088b	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00893	e8 00 00 00 00	 call	 _buffered_raw_seek
  00898	48 85 c0	 test	 rax, rax
  0089b	7d 05		 jge	 SHORT $LN21@bufferedwr@4

; 2042 :             goto error;

  0089d	e9 5d 03 00 00	 jmp	 $error$22134
$LN21@bufferedwr@4:

; 2043 :         self->raw_pos -= offset;

  008a2	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  008aa	48 8b 4c 24 40	 mov	 rcx, QWORD PTR offset$[rsp]
  008af	48 8b 80 98 00
	00 00		 mov	 rax, QWORD PTR [rax+152]
  008b6	48 2b c1	 sub	 rax, rcx
  008b9	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  008c1	48 89 81 98 00
	00 00		 mov	 QWORD PTR [rcx+152], rax
$LN22@bufferedwr@4:

; 2044 :     }
; 2045 : 
; 2046 :     /* Then write buf itself. At this point the buffer has been emptied. */
; 2047 :     remaining = buf.len;

  008c8	48 8b 44 24 60	 mov	 rax, QWORD PTR buf$[rsp+16]
  008cd	48 89 44 24 48	 mov	 QWORD PTR remaining$[rsp], rax

; 2048 :     written = 0;

  008d2	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR written$[rsp], 0
$LN20@bufferedwr@4:

; 2049 :     while (remaining > self->buffer_size) {

  008db	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  008e3	48 8b 80 c8 00
	00 00		 mov	 rax, QWORD PTR [rax+200]
  008ea	48 39 44 24 48	 cmp	 QWORD PTR remaining$[rsp], rax
  008ef	0f 8e e5 01 00
	00		 jle	 $LN19@bufferedwr@4

; 2050 :         Py_ssize_t n = _bufferedwriter_raw_write(
; 2051 :             self, (char *) buf.buf + written, buf.len - written);

  008f5	48 8b 44 24 38	 mov	 rax, QWORD PTR written$[rsp]
  008fa	48 8b 4c 24 60	 mov	 rcx, QWORD PTR buf$[rsp+16]
  008ff	48 2b c8	 sub	 rcx, rax
  00902	48 8b c1	 mov	 rax, rcx
  00905	48 8b 4c 24 38	 mov	 rcx, QWORD PTR written$[rsp]
  0090a	48 8b 54 24 50	 mov	 rdx, QWORD PTR buf$[rsp]
  0090f	48 03 d1	 add	 rdx, rcx
  00912	48 8b ca	 mov	 rcx, rdx
  00915	4c 8b c0	 mov	 r8, rax
  00918	48 8b d1	 mov	 rdx, rcx
  0091b	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00923	e8 00 00 00 00	 call	 _bufferedwriter_raw_write
  00928	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR n$22162[rsp], rax

; 2052 :         if (n == -1) {

  00930	48 83 bc 24 b8
	00 00 00 ff	 cmp	 QWORD PTR n$22162[rsp], -1
  00939	75 0a		 jne	 SHORT $LN18@bufferedwr@4

; 2053 :             goto error;

  0093b	e9 bf 02 00 00	 jmp	 $error$22134
  00940	e9 52 01 00 00	 jmp	 $LN17@bufferedwr@4
$LN18@bufferedwr@4:

; 2054 :         } else if (n == -2) {

  00945	48 83 bc 24 b8
	00 00 00 fe	 cmp	 QWORD PTR n$22162[rsp], -2
  0094e	0f 85 43 01 00
	00		 jne	 $LN16@bufferedwr@4

; 2055 :             /* Write failed because raw file is non-blocking */
; 2056 :             if (remaining > self->buffer_size) {

  00954	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0095c	48 8b 80 c8 00
	00 00		 mov	 rax, QWORD PTR [rax+200]
  00963	48 39 44 24 48	 cmp	 QWORD PTR remaining$[rsp], rax
  00968	0f 8e 22 01 00
	00		 jle	 $LN15@bufferedwr@4

; 2057 :                 /* Can't buffer everything, still buffer as much as possible */
; 2058 :                 memcpy(self->buffer,
; 2059 :                        (char *) buf.buf + written, self->buffer_size);

  0096e	48 8b 44 24 38	 mov	 rax, QWORD PTR written$[rsp]
  00973	48 8b 4c 24 50	 mov	 rcx, QWORD PTR buf$[rsp]
  00978	48 03 c8	 add	 rcx, rax
  0097b	48 8b c1	 mov	 rax, rcx
  0097e	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00986	4c 8b 81 c8 00
	00 00		 mov	 r8, QWORD PTR [rcx+200]
  0098d	48 8b d0	 mov	 rdx, rax
  00990	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00998	48 8b 88 88 00
	00 00		 mov	 rcx, QWORD PTR [rax+136]
  0099f	e8 00 00 00 00	 call	 memcpy

; 2060 :                 self->raw_pos = 0;

  009a4	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  009ac	48 c7 80 98 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+152], 0
$LN14@bufferedwr@4:

; 2061 :                 ADJUST_POSITION(self, self->buffer_size);

  009b7	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  009bf	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  009c7	48 8b 89 c8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+200]
  009ce	48 89 88 90 00
	00 00		 mov	 QWORD PTR [rax+144], rcx
  009d5	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  009dd	83 78 70 00	 cmp	 DWORD PTR [rax+112], 0
  009e1	74 50		 je	 SHORT $LN11@bufferedwr@4
  009e3	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  009eb	48 83 b8 a0 00
	00 00 ff	 cmp	 QWORD PTR [rax+160], -1
  009f3	74 3e		 je	 SHORT $LN11@bufferedwr@4
  009f5	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  009fd	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00a05	48 8b 89 90 00
	00 00		 mov	 rcx, QWORD PTR [rcx+144]
  00a0c	48 39 88 a0 00
	00 00		 cmp	 QWORD PTR [rax+160], rcx
  00a13	7d 1e		 jge	 SHORT $LN11@bufferedwr@4
  00a15	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00a1d	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00a25	48 8b 89 90 00
	00 00		 mov	 rcx, QWORD PTR [rcx+144]
  00a2c	48 89 88 a0 00
	00 00		 mov	 QWORD PTR [rax+160], rcx
$LN11@bufferedwr@4:
  00a33	33 c0		 xor	 eax, eax
  00a35	85 c0		 test	 eax, eax
  00a37	0f 85 7a ff ff
	ff		 jne	 $LN14@bufferedwr@4

; 2062 :                 self->write_end = self->buffer_size;

  00a3d	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00a45	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00a4d	48 8b 89 c8 00
	00 00		 mov	 rcx, QWORD PTR [rcx+200]
  00a54	48 89 88 b0 00
	00 00		 mov	 QWORD PTR [rax+176], rcx

; 2063 :                 written += self->buffer_size;

  00a5b	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00a63	48 8b 80 c8 00
	00 00		 mov	 rax, QWORD PTR [rax+200]
  00a6a	48 8b 4c 24 38	 mov	 rcx, QWORD PTR written$[rsp]
  00a6f	48 03 c8	 add	 rcx, rax
  00a72	48 8b c1	 mov	 rax, rcx
  00a75	48 89 44 24 38	 mov	 QWORD PTR written$[rsp], rax

; 2064 :                 _set_BlockingIOError("write could not complete without "
; 2065 :                                      "blocking", written);

  00a7a	48 8b 54 24 38	 mov	 rdx, QWORD PTR written$[rsp]
  00a7f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CK@HJILFEOG@write?5could?5not?5complete?5without@
  00a86	e8 00 00 00 00	 call	 _set_BlockingIOError

; 2066 :                 goto error;

  00a8b	e9 6f 01 00 00	 jmp	 $error$22134
$LN15@bufferedwr@4:

; 2067 :             }
; 2068 :             PyErr_Clear();

  00a90	e8 00 00 00 00	 call	 PyErr_Clear

; 2069 :             break;

  00a95	eb 43		 jmp	 SHORT $LN19@bufferedwr@4
$LN16@bufferedwr@4:
$LN17@bufferedwr@4:

; 2070 :         }
; 2071 :         written += n;

  00a97	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR n$22162[rsp]
  00a9f	48 8b 4c 24 38	 mov	 rcx, QWORD PTR written$[rsp]
  00aa4	48 03 c8	 add	 rcx, rax
  00aa7	48 8b c1	 mov	 rax, rcx
  00aaa	48 89 44 24 38	 mov	 QWORD PTR written$[rsp], rax

; 2072 :         remaining -= n;

  00aaf	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR n$22162[rsp]
  00ab7	48 8b 4c 24 48	 mov	 rcx, QWORD PTR remaining$[rsp]
  00abc	48 2b c8	 sub	 rcx, rax
  00abf	48 8b c1	 mov	 rax, rcx
  00ac2	48 89 44 24 48	 mov	 QWORD PTR remaining$[rsp], rax

; 2073 :         /* Partial writes can return successfully when interrupted by a
; 2074 :            signal (see write(2)).  We must run signal handlers before
; 2075 :            blocking another time, possibly indefinitely. */
; 2076 :         if (PyErr_CheckSignals() < 0)

  00ac7	e8 00 00 00 00	 call	 PyErr_CheckSignals
  00acc	85 c0		 test	 eax, eax
  00ace	7d 05		 jge	 SHORT $LN10@bufferedwr@4

; 2077 :             goto error;

  00ad0	e9 2a 01 00 00	 jmp	 $error$22134
$LN10@bufferedwr@4:

; 2078 :     }

  00ad5	e9 01 fe ff ff	 jmp	 $LN20@bufferedwr@4
$LN19@bufferedwr@4:

; 2079 :     if (self->readable)

  00ada	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00ae2	83 78 70 00	 cmp	 DWORD PTR [rax+112], 0
  00ae6	74 0d		 je	 SHORT $LN9@bufferedwr@4

; 2080 :         _bufferedreader_reset_buf(self);

  00ae8	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00af0	e8 00 00 00 00	 call	 _bufferedreader_reset_buf
$LN9@bufferedwr@4:

; 2081 :     if (remaining > 0) {

  00af5	48 83 7c 24 48
	00		 cmp	 QWORD PTR remaining$[rsp], 0
  00afb	7e 41		 jle	 SHORT $LN8@bufferedwr@4

; 2082 :         memcpy(self->buffer, (char *) buf.buf + written, remaining);

  00afd	48 8b 44 24 38	 mov	 rax, QWORD PTR written$[rsp]
  00b02	48 8b 4c 24 50	 mov	 rcx, QWORD PTR buf$[rsp]
  00b07	48 03 c8	 add	 rcx, rax
  00b0a	48 8b c1	 mov	 rax, rcx
  00b0d	4c 8b 44 24 48	 mov	 r8, QWORD PTR remaining$[rsp]
  00b12	48 8b d0	 mov	 rdx, rax
  00b15	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00b1d	48 8b 88 88 00
	00 00		 mov	 rcx, QWORD PTR [rax+136]
  00b24	e8 00 00 00 00	 call	 memcpy

; 2083 :         written += remaining;

  00b29	48 8b 44 24 48	 mov	 rax, QWORD PTR remaining$[rsp]
  00b2e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR written$[rsp]
  00b33	48 03 c8	 add	 rcx, rax
  00b36	48 8b c1	 mov	 rax, rcx
  00b39	48 89 44 24 38	 mov	 QWORD PTR written$[rsp], rax
$LN8@bufferedwr@4:

; 2084 :     }
; 2085 :     self->write_pos = 0;

  00b3e	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00b46	48 c7 80 a8 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+168], 0

; 2086 :     /* TODO: sanity check (remaining >= 0) */
; 2087 :     self->write_end = remaining;

  00b51	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00b59	48 8b 4c 24 48	 mov	 rcx, QWORD PTR remaining$[rsp]
  00b5e	48 89 88 b0 00
	00 00		 mov	 QWORD PTR [rax+176], rcx
$LN7@bufferedwr@4:

; 2088 :     ADJUST_POSITION(self, remaining);

  00b65	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00b6d	48 8b 4c 24 48	 mov	 rcx, QWORD PTR remaining$[rsp]
  00b72	48 89 88 90 00
	00 00		 mov	 QWORD PTR [rax+144], rcx
  00b79	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00b81	83 78 70 00	 cmp	 DWORD PTR [rax+112], 0
  00b85	74 50		 je	 SHORT $LN4@bufferedwr@4
  00b87	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00b8f	48 83 b8 a0 00
	00 00 ff	 cmp	 QWORD PTR [rax+160], -1
  00b97	74 3e		 je	 SHORT $LN4@bufferedwr@4
  00b99	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00ba1	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00ba9	48 8b 89 90 00
	00 00		 mov	 rcx, QWORD PTR [rcx+144]
  00bb0	48 39 88 a0 00
	00 00		 cmp	 QWORD PTR [rax+160], rcx
  00bb7	7d 1e		 jge	 SHORT $LN4@bufferedwr@4
  00bb9	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00bc1	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00bc9	48 8b 89 90 00
	00 00		 mov	 rcx, QWORD PTR [rcx+144]
  00bd0	48 89 88 a0 00
	00 00		 mov	 QWORD PTR [rax+160], rcx
$LN4@bufferedwr@4:
  00bd7	33 c0		 xor	 eax, eax
  00bd9	85 c0		 test	 eax, eax
  00bdb	75 88		 jne	 SHORT $LN7@bufferedwr@4

; 2089 :     self->raw_pos = 0;

  00bdd	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00be5	48 c7 80 98 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+152], 0
$end$22128:

; 2090 : 
; 2091 : end:
; 2092 :     res = PyLong_FromSsize_t(written);

  00bf0	48 8b 4c 24 38	 mov	 rcx, QWORD PTR written$[rsp]
  00bf5	e8 00 00 00 00	 call	 PyLong_FromSsize_t
  00bfa	48 89 44 24 30	 mov	 QWORD PTR res$[rsp], rax
$error$22134:
$LN3@bufferedwr@4:

; 2093 : 
; 2094 : error:
; 2095 :     LEAVE_BUFFERED(self)

  00bff	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00c07	c7 80 c0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+192], 0
  00c11	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00c19	48 8b 88 b8 00
	00 00		 mov	 rcx, QWORD PTR [rax+184]
  00c20	e8 00 00 00 00	 call	 PyThread_release_lock
  00c25	33 c0		 xor	 eax, eax
  00c27	85 c0		 test	 eax, eax
  00c29	75 d4		 jne	 SHORT $LN3@bufferedwr@4

; 2096 :     PyBuffer_Release(&buf);

  00c2b	48 8d 4c 24 50	 lea	 rcx, QWORD PTR buf$[rsp]
  00c30	e8 00 00 00 00	 call	 PyBuffer_Release

; 2097 :     return res;

  00c35	48 8b 44 24 30	 mov	 rax, QWORD PTR res$[rsp]
$LN49@bufferedwr@4:

; 2098 : }

  00c3a	48 81 c4 d8 00
	00 00		 add	 rsp, 216		; 000000d8H
  00c41	c3		 ret	 0
bufferedwriter_write ENDP
_TEXT	ENDS
EXTRN	PyErr_GivenExceptionMatches:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_buffered_check_blocking_error DD imagerel _buffered_check_blocking_error
	DD	imagerel _buffered_check_blocking_error+123
	DD	imagerel $unwind$_buffered_check_blocking_error
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_buffered_check_blocking_error DD 010401H
	DD	08204H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _buffered_check_blocking_error
_TEXT	SEGMENT
v$ = 32
tb$ = 40
err$ = 48
t$ = 56
_buffered_check_blocking_error PROC			; COMDAT

; 672  : {

  00000	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 673  :     PyObject *t, *v, *tb;
; 674  :     PyOSErrorObject *err;
; 675  : 
; 676  :     PyErr_Fetch(&t, &v, &tb);

  00004	4c 8d 44 24 28	 lea	 r8, QWORD PTR tb$[rsp]
  00009	48 8d 54 24 20	 lea	 rdx, QWORD PTR v$[rsp]
  0000e	48 8d 4c 24 38	 lea	 rcx, QWORD PTR t$[rsp]
  00013	e8 00 00 00 00	 call	 PyErr_Fetch

; 677  :     if (v == NULL || !PyErr_GivenExceptionMatches(v, PyExc_BlockingIOError)) {

  00018	48 83 7c 24 20
	00		 cmp	 QWORD PTR v$[rsp], 0
  0001e	74 15		 je	 SHORT $LN1@buffered_c@5
  00020	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR PyExc_BlockingIOError
  00027	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  0002c	e8 00 00 00 00	 call	 PyErr_GivenExceptionMatches
  00031	85 c0		 test	 eax, eax
  00033	75 18		 jne	 SHORT $LN2@buffered_c@5
$LN1@buffered_c@5:

; 678  :         PyErr_Restore(t, v, tb);

  00035	4c 8b 44 24 28	 mov	 r8, QWORD PTR tb$[rsp]
  0003a	48 8b 54 24 20	 mov	 rdx, QWORD PTR v$[rsp]
  0003f	48 8b 4c 24 38	 mov	 rcx, QWORD PTR t$[rsp]
  00044	e8 00 00 00 00	 call	 PyErr_Restore

; 679  :         return NULL;

  00049	33 c0		 xor	 eax, eax
  0004b	eb 29		 jmp	 SHORT $LN3@buffered_c@5
$LN2@buffered_c@5:

; 680  :     }
; 681  :     err = (PyOSErrorObject *) v;

  0004d	48 8b 44 24 20	 mov	 rax, QWORD PTR v$[rsp]
  00052	48 89 44 24 30	 mov	 QWORD PTR err$[rsp], rax

; 682  :     /* TODO: sanity check (err->written >= 0) */
; 683  :     PyErr_Restore(t, v, tb);

  00057	4c 8b 44 24 28	 mov	 r8, QWORD PTR tb$[rsp]
  0005c	48 8b 54 24 20	 mov	 rdx, QWORD PTR v$[rsp]
  00061	48 8b 4c 24 38	 mov	 rcx, QWORD PTR t$[rsp]
  00066	e8 00 00 00 00	 call	 PyErr_Restore

; 684  :     return &err->written;

  0006b	48 8b 44 24 30	 mov	 rax, QWORD PTR err$[rsp]
  00070	48 05 b0 00 00
	00		 add	 rax, 176		; 000000b0H
$LN3@buffered_c@5:

; 685  : }

  00076	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0007a	c3		 ret	 0
_buffered_check_blocking_error ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BE@ONAIGBBJ@bufferedrwpair_init?$AA@	; `string'
PUBLIC	??_C@_02IAAGKKDJ@On?$AA@			; `string'
PUBLIC	??_C@_0BE@OFMENJML@OO?$HMn?3BufferedRWPair?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$bufferedrwpair_init DD imagerel bufferedrwpair_init
	DD	imagerel bufferedrwpair_init+368
	DD	imagerel $unwind$bufferedrwpair_init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$bufferedrwpair_init DD 011301H
	DD	0a213H
xdata	ENDS
;	COMDAT ??_C@_0BE@ONAIGBBJ@bufferedrwpair_init?$AA@
CONST	SEGMENT
??_C@_0BE@ONAIGBBJ@bufferedrwpair_init?$AA@ DB 'bufferedrwpair_init', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02IAAGKKDJ@On?$AA@
CONST	SEGMENT
??_C@_02IAAGKKDJ@On?$AA@ DB 'On', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@OFMENJML@OO?$HMn?3BufferedRWPair?$AA@
CONST	SEGMENT
??_C@_0BE@OFMENJML@OO?$HMn?3BufferedRWPair?$AA@ DB 'OO|n:BufferedRWPair', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT bufferedrwpair_init
_TEXT	SEGMENT
writer$ = 48
buffer_size$ = 56
reader$ = 64
_py_tmp$22285 = 72
self$ = 96
args$ = 104
kwds$ = 112
bufferedrwpair_init PROC				; COMDAT

; 2208 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 2209 :     PyObject *reader, *writer;
; 2210 :     Py_ssize_t buffer_size = DEFAULT_BUFFER_SIZE;

  00013	48 c7 44 24 38
	00 20 00 00	 mov	 QWORD PTR buffer_size$[rsp], 8192 ; 00002000H

; 2211 : 
; 2212 :     if (!PyArg_ParseTuple(args, "OO|n:BufferedRWPair", &reader, &writer,
; 2213 :                           &buffer_size)) {

  0001c	48 8d 44 24 38	 lea	 rax, QWORD PTR buffer_size$[rsp]
  00021	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00026	4c 8d 4c 24 30	 lea	 r9, QWORD PTR writer$[rsp]
  0002b	4c 8d 44 24 40	 lea	 r8, QWORD PTR reader$[rsp]
  00030	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@OFMENJML@OO?$HMn?3BufferedRWPair?$AA@
  00037	48 8b 4c 24 68	 mov	 rcx, QWORD PTR args$[rsp]
  0003c	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00041	85 c0		 test	 eax, eax
  00043	75 0a		 jne	 SHORT $LN9@bufferedrw

; 2214 :         return -1;

  00045	b8 ff ff ff ff	 mov	 eax, -1
  0004a	e9 1c 01 00 00	 jmp	 $LN10@bufferedrw
$LN9@bufferedrw:

; 2215 :     }
; 2216 : 
; 2217 :     if (_PyIOBase_check_readable(reader, Py_True) == NULL)

  0004f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_Py_TrueStruct
  00056	48 8b 4c 24 40	 mov	 rcx, QWORD PTR reader$[rsp]
  0005b	e8 00 00 00 00	 call	 _PyIOBase_check_readable
  00060	48 85 c0	 test	 rax, rax
  00063	75 0a		 jne	 SHORT $LN8@bufferedrw

; 2218 :         return -1;

  00065	b8 ff ff ff ff	 mov	 eax, -1
  0006a	e9 fc 00 00 00	 jmp	 $LN10@bufferedrw
$LN8@bufferedrw:

; 2219 :     if (_PyIOBase_check_writable(writer, Py_True) == NULL)

  0006f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_Py_TrueStruct
  00076	48 8b 4c 24 30	 mov	 rcx, QWORD PTR writer$[rsp]
  0007b	e8 00 00 00 00	 call	 _PyIOBase_check_writable
  00080	48 85 c0	 test	 rax, rax
  00083	75 0a		 jne	 SHORT $LN7@bufferedrw

; 2220 :         return -1;

  00085	b8 ff ff ff ff	 mov	 eax, -1
  0008a	e9 dc 00 00 00	 jmp	 $LN10@bufferedrw
$LN7@bufferedrw:

; 2221 : 
; 2222 :     self->reader = (buffered *) PyObject_CallFunction(
; 2223 :             (PyObject *) &PyBufferedReader_Type, "On", reader, buffer_size);

  0008f	4c 8b 4c 24 38	 mov	 r9, QWORD PTR buffer_size$[rsp]
  00094	4c 8b 44 24 40	 mov	 r8, QWORD PTR reader$[rsp]
  00099	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02IAAGKKDJ@On?$AA@
  000a0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyBufferedReader_Type
  000a7	e8 00 00 00 00	 call	 _PyObject_CallFunction_SizeT
  000ac	48 8b 4c 24 60	 mov	 rcx, QWORD PTR self$[rsp]
  000b1	48 89 41 60	 mov	 QWORD PTR [rcx+96], rax

; 2224 :     if (self->reader == NULL)

  000b5	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  000ba	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  000bf	75 0a		 jne	 SHORT $LN6@bufferedrw

; 2225 :         return -1;

  000c1	b8 ff ff ff ff	 mov	 eax, -1
  000c6	e9 a0 00 00 00	 jmp	 $LN10@bufferedrw
$LN6@bufferedrw:

; 2226 : 
; 2227 :     self->writer = (buffered *) PyObject_CallFunction(
; 2228 :             (PyObject *) &PyBufferedWriter_Type, "On", writer, buffer_size);

  000cb	4c 8b 4c 24 38	 mov	 r9, QWORD PTR buffer_size$[rsp]
  000d0	4c 8b 44 24 30	 mov	 r8, QWORD PTR writer$[rsp]
  000d5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02IAAGKKDJ@On?$AA@
  000dc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyBufferedWriter_Type
  000e3	e8 00 00 00 00	 call	 _PyObject_CallFunction_SizeT
  000e8	48 8b 4c 24 60	 mov	 rcx, QWORD PTR self$[rsp]
  000ed	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax

; 2229 :     if (self->writer == NULL) {

  000f1	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  000f6	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  000fb	75 6c		 jne	 SHORT $LN5@bufferedrw
$LN4@bufferedrw:

; 2230 :         Py_CLEAR(self->reader);

  000fd	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00102	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00107	74 53		 je	 SHORT $LN1@bufferedrw
  00109	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00111	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00116	4c 8b 48 60	 mov	 r9, QWORD PTR [rax+96]
  0011a	41 b8 b6 08 00
	00		 mov	 r8d, 2230		; 000008b6H
  00120	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@DICDDJFP@?4?4?2Modules?2_io?2bufferedio?4c?$AA@
  00127	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@ONAIGBBJ@bufferedrwpair_init?$AA@
  0012e	e8 00 00 00 00	 call	 _PyParallel_Guard
  00133	85 c0		 test	 eax, eax
  00135	75 25		 jne	 SHORT $LN1@bufferedrw
  00137	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  0013c	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00140	48 89 44 24 48	 mov	 QWORD PTR _py_tmp$22285[rsp], rax
  00145	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  0014a	48 c7 40 60 00
	00 00 00	 mov	 QWORD PTR [rax+96], 0
  00152	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _py_tmp$22285[rsp]
  00157	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@bufferedrw:
  0015c	33 c0		 xor	 eax, eax
  0015e	85 c0		 test	 eax, eax
  00160	75 9b		 jne	 SHORT $LN4@bufferedrw

; 2231 :         return -1;

  00162	b8 ff ff ff ff	 mov	 eax, -1
  00167	eb 02		 jmp	 SHORT $LN10@bufferedrw
$LN5@bufferedrw:

; 2232 :     }
; 2233 : 
; 2234 :     return 0;

  00169	33 c0		 xor	 eax, eax
$LN10@bufferedrw:

; 2235 : }

  0016b	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0016f	c3		 ret	 0
bufferedrwpair_init ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BI@KEADBKCA@bufferedrwpair_traverse?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$bufferedrwpair_traverse DD imagerel bufferedrwpair_traverse
	DD	imagerel bufferedrwpair_traverse+116
	DD	imagerel $unwind$bufferedrwpair_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$bufferedrwpair_traverse DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT ??_C@_0BI@KEADBKCA@bufferedrwpair_traverse?$AA@
CONST	SEGMENT
??_C@_0BI@KEADBKCA@bufferedrwpair_traverse?$AA@ DB 'bufferedrwpair_traver'
	DB	'se', 00H					; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT bufferedrwpair_traverse
_TEXT	SEGMENT
vret$22303 = 32
self$ = 64
visit$ = 72
arg$ = 80
bufferedrwpair_traverse PROC				; COMDAT

; 2239 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN6@bufferedrw@2:

; 2240 :     Py_VISIT(self->dict);

  00013	e8 00 00 00 00	 call	 _Py_PXCTX
  00018	85 c0		 test	 eax, eax
  0001a	74 1c		 je	 SHORT $LN3@bufferedrw@2
  0001c	45 33 c9	 xor	 r9d, r9d
  0001f	41 b8 c0 08 00
	00		 mov	 r8d, 2240		; 000008c0H
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@DICDDJFP@?4?4?2Modules?2_io?2bufferedio?4c?$AA@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@KEADBKCA@bufferedrwpair_traverse?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@bufferedrw@2:
  00038	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0003d	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  00042	74 23		 je	 SHORT $LN2@bufferedrw@2
  00044	48 8b 54 24 50	 mov	 rdx, QWORD PTR arg$[rsp]
  00049	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0004e	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  00052	ff 54 24 48	 call	 QWORD PTR visit$[rsp]
  00056	89 44 24 20	 mov	 DWORD PTR vret$22303[rsp], eax
  0005a	83 7c 24 20 00	 cmp	 DWORD PTR vret$22303[rsp], 0
  0005f	74 06		 je	 SHORT $LN1@bufferedrw@2
  00061	8b 44 24 20	 mov	 eax, DWORD PTR vret$22303[rsp]
  00065	eb 08		 jmp	 SHORT $LN7@bufferedrw@2
$LN1@bufferedrw@2:
$LN2@bufferedrw@2:
  00067	33 c0		 xor	 eax, eax
  00069	85 c0		 test	 eax, eax
  0006b	75 a6		 jne	 SHORT $LN6@bufferedrw@2

; 2241 :     return 0;

  0006d	33 c0		 xor	 eax, eax
$LN7@bufferedrw@2:

; 2242 : }

  0006f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00073	c3		 ret	 0
bufferedrwpair_traverse ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BF@PCOPBFPA@bufferedrwpair_clear?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$bufferedrwpair_clear DD imagerel bufferedrwpair_clear
	DD	imagerel bufferedrwpair_clear+319
	DD	imagerel $unwind$bufferedrwpair_clear
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$bufferedrwpair_clear DD 010901H
	DD	0a209H
xdata	ENDS
;	COMDAT ??_C@_0BF@PCOPBFPA@bufferedrwpair_clear?$AA@
CONST	SEGMENT
??_C@_0BF@PCOPBFPA@bufferedrwpair_clear?$AA@ DB 'bufferedrwpair_clear', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT bufferedrwpair_clear
_TEXT	SEGMENT
_py_tmp$22315 = 48
_py_tmp$22323 = 56
_py_tmp$22331 = 64
self$ = 96
bufferedrwpair_clear PROC				; COMDAT

; 2246 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 58	 sub	 rsp, 88			; 00000058H
$LN12@bufferedrw@3:

; 2247 :     Py_CLEAR(self->reader);

  00009	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  0000e	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00013	74 53		 je	 SHORT $LN9@bufferedrw@3
  00015	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0001d	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00022	4c 8b 48 60	 mov	 r9, QWORD PTR [rax+96]
  00026	41 b8 c7 08 00
	00		 mov	 r8d, 2247		; 000008c7H
  0002c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@DICDDJFP@?4?4?2Modules?2_io?2bufferedio?4c?$AA@
  00033	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@PCOPBFPA@bufferedrwpair_clear?$AA@
  0003a	e8 00 00 00 00	 call	 _PyParallel_Guard
  0003f	85 c0		 test	 eax, eax
  00041	75 25		 jne	 SHORT $LN9@bufferedrw@3
  00043	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00048	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0004c	48 89 44 24 30	 mov	 QWORD PTR _py_tmp$22315[rsp], rax
  00051	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00056	48 c7 40 60 00
	00 00 00	 mov	 QWORD PTR [rax+96], 0
  0005e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _py_tmp$22315[rsp]
  00063	e8 00 00 00 00	 call	 _Py_DecRef
$LN9@bufferedrw@3:
  00068	33 c0		 xor	 eax, eax
  0006a	85 c0		 test	 eax, eax
  0006c	75 9b		 jne	 SHORT $LN12@bufferedrw@3
$LN8@bufferedrw@3:

; 2248 :     Py_CLEAR(self->writer);

  0006e	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00073	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  00078	74 53		 je	 SHORT $LN5@bufferedrw@3
  0007a	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00082	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00087	4c 8b 48 68	 mov	 r9, QWORD PTR [rax+104]
  0008b	41 b8 c8 08 00
	00		 mov	 r8d, 2248		; 000008c8H
  00091	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@DICDDJFP@?4?4?2Modules?2_io?2bufferedio?4c?$AA@
  00098	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@PCOPBFPA@bufferedrwpair_clear?$AA@
  0009f	e8 00 00 00 00	 call	 _PyParallel_Guard
  000a4	85 c0		 test	 eax, eax
  000a6	75 25		 jne	 SHORT $LN5@bufferedrw@3
  000a8	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  000ad	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000b1	48 89 44 24 38	 mov	 QWORD PTR _py_tmp$22323[rsp], rax
  000b6	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  000bb	48 c7 40 68 00
	00 00 00	 mov	 QWORD PTR [rax+104], 0
  000c3	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _py_tmp$22323[rsp]
  000c8	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@bufferedrw@3:
  000cd	33 c0		 xor	 eax, eax
  000cf	85 c0		 test	 eax, eax
  000d1	75 9b		 jne	 SHORT $LN8@bufferedrw@3
$LN4@bufferedrw@3:

; 2249 :     Py_CLEAR(self->dict);

  000d3	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  000d8	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  000dd	74 53		 je	 SHORT $LN1@bufferedrw@3
  000df	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000e7	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  000ec	4c 8b 48 70	 mov	 r9, QWORD PTR [rax+112]
  000f0	41 b8 c9 08 00
	00		 mov	 r8d, 2249		; 000008c9H
  000f6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@DICDDJFP@?4?4?2Modules?2_io?2bufferedio?4c?$AA@
  000fd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@PCOPBFPA@bufferedrwpair_clear?$AA@
  00104	e8 00 00 00 00	 call	 _PyParallel_Guard
  00109	85 c0		 test	 eax, eax
  0010b	75 25		 jne	 SHORT $LN1@bufferedrw@3
  0010d	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00112	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00116	48 89 44 24 40	 mov	 QWORD PTR _py_tmp$22331[rsp], rax
  0011b	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00120	48 c7 40 70 00
	00 00 00	 mov	 QWORD PTR [rax+112], 0
  00128	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _py_tmp$22331[rsp]
  0012d	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@bufferedrw@3:
  00132	33 c0		 xor	 eax, eax
  00134	85 c0		 test	 eax, eax
  00136	75 9b		 jne	 SHORT $LN4@bufferedrw@3

; 2250 :     return 0;

  00138	33 c0		 xor	 eax, eax

; 2251 : }

  0013a	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0013e	c3		 ret	 0
bufferedrwpair_clear ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BH@DIKAKJAB@bufferedrwpair_dealloc?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$bufferedrwpair_dealloc DD imagerel bufferedrwpair_dealloc
	DD	imagerel bufferedrwpair_dealloc+576
	DD	imagerel $unwind$bufferedrwpair_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$bufferedrwpair_dealloc DD 010901H
	DD	0c209H
xdata	ENDS
;	COMDAT ??_C@_0BH@DIKAKJAB@bufferedrwpair_dealloc?$AA@
CONST	SEGMENT
??_C@_0BH@DIKAKJAB@bufferedrwpair_dealloc?$AA@ DB 'bufferedrwpair_dealloc'
	DB	00H						; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT bufferedrwpair_dealloc
_TEXT	SEGMENT
g$22344 = 48
_py_tmp$22353 = 56
_py_tmp$22361 = 64
_py_tmp$22369 = 72
tv79 = 80
self$ = 112
bufferedrwpair_dealloc PROC				; COMDAT

; 2255 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 2256 :     _PyObject_GC_UNTRACK(self);

  00009	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00011	4c 8b 4c 24 70	 mov	 r9, QWORD PTR self$[rsp]
  00016	41 b8 d0 08 00
	00		 mov	 r8d, 2256		; 000008d0H
  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@DICDDJFP@?4?4?2Modules?2_io?2bufferedio?4c?$AA@
  00023	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BH@DIKAKJAB@bufferedrwpair_dealloc?$AA@
  0002a	e8 00 00 00 00	 call	 _PyParallel_Guard
  0002f	85 c0		 test	 eax, eax
  00031	0f 85 c1 00 00
	00		 jne	 $LN16@bufferedrw@4
$LN15@bufferedrw@4:
  00037	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0003f	4c 8b 4c 24 70	 mov	 r9, QWORD PTR self$[rsp]
  00044	41 b8 d0 08 00
	00		 mov	 r8d, 2256		; 000008d0H
  0004a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@DICDDJFP@?4?4?2Modules?2_io?2bufferedio?4c?$AA@
  00051	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BH@DIKAKJAB@bufferedrwpair_dealloc?$AA@
  00058	e8 00 00 00 00	 call	 _PyParallel_Guard
  0005d	85 c0		 test	 eax, eax
  0005f	74 0b		 je	 SHORT $LN19@bufferedrw@4
  00061	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR tv79[rsp], 0
  0006a	eb 0e		 jmp	 SHORT $LN20@bufferedrw@4
$LN19@bufferedrw@4:
  0006c	48 8b 44 24 70	 mov	 rax, QWORD PTR self$[rsp]
  00071	48 83 e8 18	 sub	 rax, 24
  00075	48 89 44 24 50	 mov	 QWORD PTR tv79[rsp], rax
$LN20@bufferedrw@4:
  0007a	48 8b 44 24 50	 mov	 rax, QWORD PTR tv79[rsp]
  0007f	48 89 44 24 30	 mov	 QWORD PTR g$22344[rsp], rax
  00084	48 8b 44 24 30	 mov	 rax, QWORD PTR g$22344[rsp]
  00089	48 83 78 10 fe	 cmp	 QWORD PTR [rax+16], -2
  0008e	75 1c		 jne	 SHORT $LN21@bufferedrw@4
  00090	41 b8 d0 08 00
	00		 mov	 r8d, 2256		; 000008d0H
  00096	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DI@KBAIHMCO@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AAe?$AAd?$AAi?$AAo?$AA?4?$AAc?$AA?$AA@
  0009d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EM@HFMJMDDM@?$AAg?$AA?9?$AA?$DO?$AAg?$AAc?$AA?4?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AAG?$AAC?$AA_?$AAR?$AAE?$AAF?$AAS?$AA_?$AAU?$AAN?$AAT?$AAR@
  000a4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000aa	33 c0		 xor	 eax, eax
$LN21@bufferedrw@4:
  000ac	48 8b 44 24 30	 mov	 rax, QWORD PTR g$22344[rsp]
  000b1	48 c7 40 10 fe
	ff ff ff	 mov	 QWORD PTR [rax+16], -2
  000b9	48 8b 44 24 30	 mov	 rax, QWORD PTR g$22344[rsp]
  000be	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  000c2	48 8b 4c 24 30	 mov	 rcx, QWORD PTR g$22344[rsp]
  000c7	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000ca	48 89 08	 mov	 QWORD PTR [rax], rcx
  000cd	48 8b 44 24 30	 mov	 rax, QWORD PTR g$22344[rsp]
  000d2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000d5	48 8b 4c 24 30	 mov	 rcx, QWORD PTR g$22344[rsp]
  000da	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  000de	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  000e2	48 8b 44 24 30	 mov	 rax, QWORD PTR g$22344[rsp]
  000e7	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
  000ee	33 c0		 xor	 eax, eax
  000f0	85 c0		 test	 eax, eax
  000f2	0f 85 3f ff ff
	ff		 jne	 $LN15@bufferedrw@4
$LN16@bufferedrw@4:
$LN12@bufferedrw@4:

; 2257 :     Py_CLEAR(self->reader);

  000f8	48 8b 44 24 70	 mov	 rax, QWORD PTR self$[rsp]
  000fd	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00102	74 53		 je	 SHORT $LN9@bufferedrw@4
  00104	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0010c	48 8b 44 24 70	 mov	 rax, QWORD PTR self$[rsp]
  00111	4c 8b 48 60	 mov	 r9, QWORD PTR [rax+96]
  00115	41 b8 d1 08 00
	00		 mov	 r8d, 2257		; 000008d1H
  0011b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@DICDDJFP@?4?4?2Modules?2_io?2bufferedio?4c?$AA@
  00122	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BH@DIKAKJAB@bufferedrwpair_dealloc?$AA@
  00129	e8 00 00 00 00	 call	 _PyParallel_Guard
  0012e	85 c0		 test	 eax, eax
  00130	75 25		 jne	 SHORT $LN9@bufferedrw@4
  00132	48 8b 44 24 70	 mov	 rax, QWORD PTR self$[rsp]
  00137	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0013b	48 89 44 24 38	 mov	 QWORD PTR _py_tmp$22353[rsp], rax
  00140	48 8b 44 24 70	 mov	 rax, QWORD PTR self$[rsp]
  00145	48 c7 40 60 00
	00 00 00	 mov	 QWORD PTR [rax+96], 0
  0014d	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _py_tmp$22353[rsp]
  00152	e8 00 00 00 00	 call	 _Py_DecRef
$LN9@bufferedrw@4:
  00157	33 c0		 xor	 eax, eax
  00159	85 c0		 test	 eax, eax
  0015b	75 9b		 jne	 SHORT $LN12@bufferedrw@4
$LN8@bufferedrw@4:

; 2258 :     Py_CLEAR(self->writer);

  0015d	48 8b 44 24 70	 mov	 rax, QWORD PTR self$[rsp]
  00162	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  00167	74 53		 je	 SHORT $LN5@bufferedrw@4
  00169	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00171	48 8b 44 24 70	 mov	 rax, QWORD PTR self$[rsp]
  00176	4c 8b 48 68	 mov	 r9, QWORD PTR [rax+104]
  0017a	41 b8 d2 08 00
	00		 mov	 r8d, 2258		; 000008d2H
  00180	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@DICDDJFP@?4?4?2Modules?2_io?2bufferedio?4c?$AA@
  00187	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BH@DIKAKJAB@bufferedrwpair_dealloc?$AA@
  0018e	e8 00 00 00 00	 call	 _PyParallel_Guard
  00193	85 c0		 test	 eax, eax
  00195	75 25		 jne	 SHORT $LN5@bufferedrw@4
  00197	48 8b 44 24 70	 mov	 rax, QWORD PTR self$[rsp]
  0019c	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  001a0	48 89 44 24 40	 mov	 QWORD PTR _py_tmp$22361[rsp], rax
  001a5	48 8b 44 24 70	 mov	 rax, QWORD PTR self$[rsp]
  001aa	48 c7 40 68 00
	00 00 00	 mov	 QWORD PTR [rax+104], 0
  001b2	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _py_tmp$22361[rsp]
  001b7	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@bufferedrw@4:
  001bc	33 c0		 xor	 eax, eax
  001be	85 c0		 test	 eax, eax
  001c0	75 9b		 jne	 SHORT $LN8@bufferedrw@4
$LN4@bufferedrw@4:

; 2259 :     Py_CLEAR(self->dict);

  001c2	48 8b 44 24 70	 mov	 rax, QWORD PTR self$[rsp]
  001c7	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  001cc	74 53		 je	 SHORT $LN1@bufferedrw@4
  001ce	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  001d6	48 8b 44 24 70	 mov	 rax, QWORD PTR self$[rsp]
  001db	4c 8b 48 70	 mov	 r9, QWORD PTR [rax+112]
  001df	41 b8 d3 08 00
	00		 mov	 r8d, 2259		; 000008d3H
  001e5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@DICDDJFP@?4?4?2Modules?2_io?2bufferedio?4c?$AA@
  001ec	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BH@DIKAKJAB@bufferedrwpair_dealloc?$AA@
  001f3	e8 00 00 00 00	 call	 _PyParallel_Guard
  001f8	85 c0		 test	 eax, eax
  001fa	75 25		 jne	 SHORT $LN1@bufferedrw@4
  001fc	48 8b 44 24 70	 mov	 rax, QWORD PTR self$[rsp]
  00201	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00205	48 89 44 24 48	 mov	 QWORD PTR _py_tmp$22369[rsp], rax
  0020a	48 8b 44 24 70	 mov	 rax, QWORD PTR self$[rsp]
  0020f	48 c7 40 70 00
	00 00 00	 mov	 QWORD PTR [rax+112], 0
  00217	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _py_tmp$22369[rsp]
  0021c	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@bufferedrw@4:
  00221	33 c0		 xor	 eax, eax
  00223	85 c0		 test	 eax, eax
  00225	75 9b		 jne	 SHORT $LN4@bufferedrw@4

; 2260 :     Py_TYPE(self)->tp_free((PyObject *) self);

  00227	48 8b 44 24 70	 mov	 rax, QWORD PTR self$[rsp]
  0022c	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00230	48 8b 4c 24 70	 mov	 rcx, QWORD PTR self$[rsp]
  00235	ff 90 98 01 00
	00		 call	 QWORD PTR [rax+408]

; 2261 : }

  0023b	48 83 c4 68	 add	 rsp, 104		; 00000068H
  0023f	c3		 ret	 0
bufferedrwpair_dealloc ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$bufferedrwpair_read DD imagerel bufferedrwpair_read
	DD	imagerel bufferedrwpair_read+67
	DD	imagerel $unwind$bufferedrwpair_read
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$bufferedrwpair_read DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT bufferedrwpair_read
_TEXT	SEGMENT
self$ = 48
args$ = 56
bufferedrwpair_read PROC				; COMDAT

; 2286 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2287 :     return _forward_call(self->reader, &PyId_read, args);

  0000e	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_read
  00013	8b c0		 mov	 eax, eax
  00015	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0001b	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00024	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00028	4c 8b 44 24 38	 mov	 r8, QWORD PTR args$[rsp]
  0002d	48 8b d0	 mov	 rdx, rax
  00030	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00035	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00039	e8 00 00 00 00	 call	 _forward_call

; 2288 : }

  0003e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00042	c3		 ret	 0
bufferedrwpair_read ENDP
_TEXT	ENDS
EXTRN	PyObject_CallObject:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_forward_call DD imagerel _forward_call
	DD	imagerel _forward_call+143
	DD	imagerel $unwind$_forward_call
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_forward_call DD 011301H
	DD	06213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _forward_call
_TEXT	SEGMENT
ret$ = 32
func$ = 40
self$ = 64
name$ = 72
args$ = 80
_forward_call PROC					; COMDAT

; 2265 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2266 :     PyObject *func, *ret;
; 2267 :     if (self == NULL) {

  00013	48 83 7c 24 40
	00		 cmp	 QWORD PTR self$[rsp], 0
  00019	75 17		 jne	 SHORT $LN2@forward_ca

; 2268 :         PyErr_SetString(PyExc_ValueError,
; 2269 :                         "I/O operation on uninitialized object");

  0001b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@BGNADMFL@I?1O?5operation?5on?5uninitialized?5o@
  00022	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00029	e8 00 00 00 00	 call	 PyErr_SetString

; 2270 :         return NULL;

  0002e	33 c0		 xor	 eax, eax
  00030	eb 58		 jmp	 SHORT $LN3@forward_ca
$LN2@forward_ca:

; 2271 :     }
; 2272 : 
; 2273 :     func = _PyObject_GetAttrId((PyObject *)self, name);

  00032	48 8b 54 24 48	 mov	 rdx, QWORD PTR name$[rsp]
  00037	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  0003c	e8 00 00 00 00	 call	 _PyObject_GetAttrId
  00041	48 89 44 24 28	 mov	 QWORD PTR func$[rsp], rax

; 2274 :     if (func == NULL) {

  00046	48 83 7c 24 28
	00		 cmp	 QWORD PTR func$[rsp], 0
  0004c	75 19		 jne	 SHORT $LN1@forward_ca

; 2275 :         PyErr_SetString(PyExc_AttributeError, name->string);

  0004e	48 8b 44 24 48	 mov	 rax, QWORD PTR name$[rsp]
  00053	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  00057	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_AttributeError
  0005e	e8 00 00 00 00	 call	 PyErr_SetString

; 2276 :         return NULL;

  00063	33 c0		 xor	 eax, eax
  00065	eb 23		 jmp	 SHORT $LN3@forward_ca
$LN1@forward_ca:

; 2277 :     }
; 2278 : 
; 2279 :     ret = PyObject_CallObject(func, args);

  00067	48 8b 54 24 50	 mov	 rdx, QWORD PTR args$[rsp]
  0006c	48 8b 4c 24 28	 mov	 rcx, QWORD PTR func$[rsp]
  00071	e8 00 00 00 00	 call	 PyObject_CallObject
  00076	48 89 44 24 20	 mov	 QWORD PTR ret$[rsp], rax

; 2280 :     Py_DECREF(func);

  0007b	48 8b 4c 24 28	 mov	 rcx, QWORD PTR func$[rsp]
  00080	e8 00 00 00 00	 call	 _Py_DecRef

; 2281 :     return ret;

  00085	48 8b 44 24 20	 mov	 rax, QWORD PTR ret$[rsp]
$LN3@forward_ca:

; 2282 : }

  0008a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0008e	c3		 ret	 0
_forward_call ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$bufferedrwpair_peek DD imagerel bufferedrwpair_peek
	DD	imagerel bufferedrwpair_peek+67
	DD	imagerel $unwind$bufferedrwpair_peek
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$bufferedrwpair_peek DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT bufferedrwpair_peek
_TEXT	SEGMENT
self$ = 48
args$ = 56
bufferedrwpair_peek PROC				; COMDAT

; 2292 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2293 :     return _forward_call(self->reader, &PyId_peek, args);

  0000e	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_peek
  00013	8b c0		 mov	 eax, eax
  00015	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0001b	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00024	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00028	4c 8b 44 24 38	 mov	 r8, QWORD PTR args$[rsp]
  0002d	48 8b d0	 mov	 rdx, rax
  00030	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00035	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00039	e8 00 00 00 00	 call	 _forward_call

; 2294 : }

  0003e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00042	c3		 ret	 0
bufferedrwpair_peek ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$bufferedrwpair_read1 DD imagerel bufferedrwpair_read1
	DD	imagerel bufferedrwpair_read1+67
	DD	imagerel $unwind$bufferedrwpair_read1
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$bufferedrwpair_read1 DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT bufferedrwpair_read1
_TEXT	SEGMENT
self$ = 48
args$ = 56
bufferedrwpair_read1 PROC				; COMDAT

; 2298 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2299 :     return _forward_call(self->reader, &PyId_read1, args);

  0000e	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_read1
  00013	8b c0		 mov	 eax, eax
  00015	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0001b	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00024	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00028	4c 8b 44 24 38	 mov	 r8, QWORD PTR args$[rsp]
  0002d	48 8b d0	 mov	 rdx, rax
  00030	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00035	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00039	e8 00 00 00 00	 call	 _forward_call

; 2300 : }

  0003e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00042	c3		 ret	 0
bufferedrwpair_read1 ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$bufferedrwpair_readinto DD imagerel bufferedrwpair_readinto
	DD	imagerel bufferedrwpair_readinto+67
	DD	imagerel $unwind$bufferedrwpair_readinto
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$bufferedrwpair_readinto DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT bufferedrwpair_readinto
_TEXT	SEGMENT
self$ = 48
args$ = 56
bufferedrwpair_readinto PROC				; COMDAT

; 2304 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2305 :     return _forward_call(self->reader, &PyId_readinto, args);

  0000e	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_readinto
  00013	8b c0		 mov	 eax, eax
  00015	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0001b	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00024	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00028	4c 8b 44 24 38	 mov	 r8, QWORD PTR args$[rsp]
  0002d	48 8b d0	 mov	 rdx, rax
  00030	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00035	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00039	e8 00 00 00 00	 call	 _forward_call

; 2306 : }

  0003e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00042	c3		 ret	 0
bufferedrwpair_readinto ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$bufferedrwpair_write DD imagerel bufferedrwpair_write
	DD	imagerel bufferedrwpair_write+67
	DD	imagerel $unwind$bufferedrwpair_write
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$bufferedrwpair_write DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT bufferedrwpair_write
_TEXT	SEGMENT
self$ = 48
args$ = 56
bufferedrwpair_write PROC				; COMDAT

; 2310 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2311 :     return _forward_call(self->writer, &PyId_write, args);

  0000e	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_write
  00013	8b c0		 mov	 eax, eax
  00015	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0001b	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00024	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00028	4c 8b 44 24 38	 mov	 r8, QWORD PTR args$[rsp]
  0002d	48 8b d0	 mov	 rdx, rax
  00030	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00035	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  00039	e8 00 00 00 00	 call	 _forward_call

; 2312 : }

  0003e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00042	c3		 ret	 0
bufferedrwpair_write ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$bufferedrwpair_flush DD imagerel bufferedrwpair_flush
	DD	imagerel bufferedrwpair_flush+67
	DD	imagerel $unwind$bufferedrwpair_flush
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$bufferedrwpair_flush DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT bufferedrwpair_flush
_TEXT	SEGMENT
self$ = 48
args$ = 56
bufferedrwpair_flush PROC				; COMDAT

; 2316 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2317 :     return _forward_call(self->writer, &PyId_flush, args);

  0000e	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_flush
  00013	8b c0		 mov	 eax, eax
  00015	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0001b	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00024	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00028	4c 8b 44 24 38	 mov	 r8, QWORD PTR args$[rsp]
  0002d	48 8b d0	 mov	 rdx, rax
  00030	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00035	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  00039	e8 00 00 00 00	 call	 _forward_call

; 2318 : }

  0003e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00042	c3		 ret	 0
bufferedrwpair_flush ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$bufferedrwpair_readable DD imagerel bufferedrwpair_readable
	DD	imagerel bufferedrwpair_readable+67
	DD	imagerel $unwind$bufferedrwpair_readable
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$bufferedrwpair_readable DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT bufferedrwpair_readable
_TEXT	SEGMENT
self$ = 48
args$ = 56
bufferedrwpair_readable PROC				; COMDAT

; 2322 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2323 :     return _forward_call(self->reader, &PyId_readable, args);

  0000e	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_readable
  00013	8b c0		 mov	 eax, eax
  00015	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0001b	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00024	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00028	4c 8b 44 24 38	 mov	 r8, QWORD PTR args$[rsp]
  0002d	48 8b d0	 mov	 rdx, rax
  00030	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00035	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00039	e8 00 00 00 00	 call	 _forward_call

; 2324 : }

  0003e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00042	c3		 ret	 0
bufferedrwpair_readable ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$bufferedrwpair_writable DD imagerel bufferedrwpair_writable
	DD	imagerel bufferedrwpair_writable+67
	DD	imagerel $unwind$bufferedrwpair_writable
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$bufferedrwpair_writable DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT bufferedrwpair_writable
_TEXT	SEGMENT
self$ = 48
args$ = 56
bufferedrwpair_writable PROC				; COMDAT

; 2328 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2329 :     return _forward_call(self->writer, &PyId_writable, args);

  0000e	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_writable
  00013	8b c0		 mov	 eax, eax
  00015	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0001b	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00024	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00028	4c 8b 44 24 38	 mov	 r8, QWORD PTR args$[rsp]
  0002d	48 8b d0	 mov	 rdx, rax
  00030	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00035	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  00039	e8 00 00 00 00	 call	 _forward_call

; 2330 : }

  0003e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00042	c3		 ret	 0
bufferedrwpair_writable ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$bufferedrwpair_close DD imagerel bufferedrwpair_close
	DD	imagerel bufferedrwpair_close+142
	DD	imagerel $unwind$bufferedrwpair_close
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$bufferedrwpair_close DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT bufferedrwpair_close
_TEXT	SEGMENT
ret$ = 32
self$ = 64
args$ = 72
bufferedrwpair_close PROC				; COMDAT

; 2334 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2335 :     PyObject *ret = _forward_call(self->writer, &PyId_close, args);

  0000e	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_close
  00013	8b c0		 mov	 eax, eax
  00015	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0001b	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00024	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00028	4c 8b 44 24 48	 mov	 r8, QWORD PTR args$[rsp]
  0002d	48 8b d0	 mov	 rdx, rax
  00030	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00035	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  00039	e8 00 00 00 00	 call	 _forward_call
  0003e	48 89 44 24 20	 mov	 QWORD PTR ret$[rsp], rax

; 2336 :     if (ret == NULL)

  00043	48 83 7c 24 20
	00		 cmp	 QWORD PTR ret$[rsp], 0
  00049	75 04		 jne	 SHORT $LN1@bufferedrw@5

; 2337 :         return NULL;

  0004b	33 c0		 xor	 eax, eax
  0004d	eb 3a		 jmp	 SHORT $LN2@bufferedrw@5
$LN1@bufferedrw@5:

; 2338 :     Py_DECREF(ret);

  0004f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR ret$[rsp]
  00054	e8 00 00 00 00	 call	 _Py_DecRef

; 2339 : 
; 2340 :     return _forward_call(self->reader, &PyId_close, args);

  00059	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_close
  0005e	8b c0		 mov	 eax, eax
  00060	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00066	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0006f	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00073	4c 8b 44 24 48	 mov	 r8, QWORD PTR args$[rsp]
  00078	48 8b d0	 mov	 rdx, rax
  0007b	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00080	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00084	e8 00 00 00 00	 call	 _forward_call
$LN2@bufferedrw@5:

; 2341 : }

  00089	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0008d	c3		 ret	 0
bufferedrwpair_close ENDP
_TEXT	ENDS
EXTRN	_Py_FalseStruct:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$bufferedrwpair_isatty DD imagerel bufferedrwpair_isatty
	DD	imagerel bufferedrwpair_isatty+151
	DD	imagerel $unwind$bufferedrwpair_isatty
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$bufferedrwpair_isatty DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT bufferedrwpair_isatty
_TEXT	SEGMENT
ret$ = 32
self$ = 64
args$ = 72
bufferedrwpair_isatty PROC				; COMDAT

; 2345 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 2346 :     PyObject *ret = _forward_call(self->writer, &PyId_isatty, args);

  0000e	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_isatty
  00013	8b c0		 mov	 eax, eax
  00015	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0001b	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00024	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00028	4c 8b 44 24 48	 mov	 r8, QWORD PTR args$[rsp]
  0002d	48 8b d0	 mov	 rdx, rax
  00030	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00035	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  00039	e8 00 00 00 00	 call	 _forward_call
  0003e	48 89 44 24 20	 mov	 QWORD PTR ret$[rsp], rax

; 2347 : 
; 2348 :     if (ret != Py_False) {

  00043	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct
  0004a	48 39 44 24 20	 cmp	 QWORD PTR ret$[rsp], rax
  0004f	74 07		 je	 SHORT $LN1@bufferedrw@6

; 2349 :         /* either True or exception */
; 2350 :         return ret;

  00051	48 8b 44 24 20	 mov	 rax, QWORD PTR ret$[rsp]
  00056	eb 3a		 jmp	 SHORT $LN2@bufferedrw@6
$LN1@bufferedrw@6:

; 2351 :     }
; 2352 :     Py_DECREF(ret);

  00058	48 8b 4c 24 20	 mov	 rcx, QWORD PTR ret$[rsp]
  0005d	e8 00 00 00 00	 call	 _Py_DecRef

; 2353 : 
; 2354 :     return _forward_call(self->reader, &PyId_isatty, args);

  00062	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId_isatty
  00067	8b c0		 mov	 eax, eax
  00069	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0006f	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00078	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0007c	4c 8b 44 24 48	 mov	 r8, QWORD PTR args$[rsp]
  00081	48 8b d0	 mov	 rdx, rax
  00084	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  00089	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  0008d	e8 00 00 00 00	 call	 _forward_call
$LN2@bufferedrw@6:

; 2355 : }

  00092	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00096	c3		 ret	 0
bufferedrwpair_isatty ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DF@IPBMMNNN@the?5BufferedRWPair?5object?5is?5bei@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$bufferedrwpair_closed_get DD imagerel bufferedrwpair_closed_get
	DD	imagerel bufferedrwpair_closed_get+75
	DD	imagerel $unwind$bufferedrwpair_closed_get
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$bufferedrwpair_closed_get DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT ??_C@_0DF@IPBMMNNN@the?5BufferedRWPair?5object?5is?5bei@
CONST	SEGMENT
??_C@_0DF@IPBMMNNN@the?5BufferedRWPair?5object?5is?5bei@ DB 'the Buffered'
	DB	'RWPair object is being garbage-collected', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT bufferedrwpair_closed_get
_TEXT	SEGMENT
self$ = 48
context$ = 56
bufferedrwpair_closed_get PROC				; COMDAT

; 2359 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 2360 :     if (self->writer == NULL) {

  0000e	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00013	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  00018	75 17		 jne	 SHORT $LN1@bufferedrw@7

; 2361 :         PyErr_SetString(PyExc_RuntimeError,
; 2362 :                 "the BufferedRWPair object is being garbage-collected");

  0001a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DF@IPBMMNNN@the?5BufferedRWPair?5object?5is?5bei@
  00021	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeError
  00028	e8 00 00 00 00	 call	 PyErr_SetString

; 2363 :         return NULL;

  0002d	33 c0		 xor	 eax, eax
  0002f	eb 15		 jmp	 SHORT $LN2@bufferedrw@7
$LN1@bufferedrw@7:

; 2364 :     }
; 2365 :     return PyObject_GetAttr((PyObject *) self->writer, _PyIO_str_closed);

  00031	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR _PyIO_str_closed
  00038	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  0003d	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  00041	e8 00 00 00 00	 call	 PyObject_GetAttr
$LN2@bufferedrw@7:

; 2366 : }

  00046	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004a	c3		 ret	 0
bufferedrwpair_closed_get ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BE@IPECHOCF@bufferedrandom_init?$AA@	; `string'
PUBLIC	??_C@_0BD@ELEFDLFH@O?$HMn?3BufferedRandom?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$bufferedrandom_init DD imagerel bufferedrandom_init
	DD	imagerel bufferedrandom_init+610
	DD	imagerel $unwind$bufferedrandom_init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$bufferedrandom_init DD 011301H
	DD	0e213H
xdata	ENDS
;	COMDAT ??_C@_0BE@IPECHOCF@bufferedrandom_init?$AA@
CONST	SEGMENT
??_C@_0BE@IPECHOCF@bufferedrandom_init?$AA@ DB 'bufferedrandom_init', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@ELEFDLFH@O?$HMn?3BufferedRandom?$AA@
CONST	SEGMENT
??_C@_0BD@ELEFDLFH@O?$HMn?3BufferedRandom?$AA@ DB 'O|n:BufferedRandom', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT bufferedrandom_init
_TEXT	SEGMENT
kwlist$ = 48
raw$ = 72
buffer_size$ = 80
_py_tmp$22546 = 88
tv148 = 96
self$ = 128
args$ = 136
kwds$ = 144
bufferedrandom_init PROC				; COMDAT

; 2451 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 2452 :     char *kwlist[] = {"raw", "buffer_size", NULL};

  00013	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_03DGOGAGNC@raw?$AA@
  0001a	48 89 44 24 30	 mov	 QWORD PTR kwlist$[rsp], rax
  0001f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0M@JLCCDMKC@buffer_size?$AA@
  00026	48 89 44 24 38	 mov	 QWORD PTR kwlist$[rsp+8], rax
  0002b	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR kwlist$[rsp+16], 0

; 2453 :     Py_ssize_t buffer_size = DEFAULT_BUFFER_SIZE;

  00034	48 c7 44 24 50
	00 20 00 00	 mov	 QWORD PTR buffer_size$[rsp], 8192 ; 00002000H

; 2454 :     PyObject *raw;
; 2455 : 
; 2456 :     self->ok = 0;

  0003d	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00045	c7 40 68 00 00
	00 00		 mov	 DWORD PTR [rax+104], 0

; 2457 :     self->detached = 0;

  0004c	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00054	c7 40 6c 00 00
	00 00		 mov	 DWORD PTR [rax+108], 0

; 2458 : 
; 2459 :     if (!PyArg_ParseTupleAndKeywords(args, kwds, "O|n:BufferedRandom", kwlist,
; 2460 :                                      &raw, &buffer_size)) {

  0005b	48 8d 44 24 50	 lea	 rax, QWORD PTR buffer_size$[rsp]
  00060	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00065	48 8d 44 24 48	 lea	 rax, QWORD PTR raw$[rsp]
  0006a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0006f	4c 8d 4c 24 30	 lea	 r9, QWORD PTR kwlist$[rsp]
  00074	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BD@ELEFDLFH@O?$HMn?3BufferedRandom?$AA@
  0007b	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR kwds$[rsp]
  00083	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  0008b	e8 00 00 00 00	 call	 _PyArg_ParseTupleAndKeywords_SizeT
  00090	85 c0		 test	 eax, eax
  00092	75 0a		 jne	 SHORT $LN9@bufferedra

; 2461 :         return -1;

  00094	b8 ff ff ff ff	 mov	 eax, -1
  00099	e9 bf 01 00 00	 jmp	 $LN10@bufferedra
$LN9@bufferedra:

; 2462 :     }
; 2463 : 
; 2464 :     if (_PyIOBase_check_seekable(raw, Py_True) == NULL)

  0009e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_Py_TrueStruct
  000a5	48 8b 4c 24 48	 mov	 rcx, QWORD PTR raw$[rsp]
  000aa	e8 00 00 00 00	 call	 _PyIOBase_check_seekable
  000af	48 85 c0	 test	 rax, rax
  000b2	75 0a		 jne	 SHORT $LN8@bufferedra

; 2465 :         return -1;

  000b4	b8 ff ff ff ff	 mov	 eax, -1
  000b9	e9 9f 01 00 00	 jmp	 $LN10@bufferedra
$LN8@bufferedra:

; 2466 :     if (_PyIOBase_check_readable(raw, Py_True) == NULL)

  000be	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_Py_TrueStruct
  000c5	48 8b 4c 24 48	 mov	 rcx, QWORD PTR raw$[rsp]
  000ca	e8 00 00 00 00	 call	 _PyIOBase_check_readable
  000cf	48 85 c0	 test	 rax, rax
  000d2	75 0a		 jne	 SHORT $LN7@bufferedra

; 2467 :         return -1;

  000d4	b8 ff ff ff ff	 mov	 eax, -1
  000d9	e9 7f 01 00 00	 jmp	 $LN10@bufferedra
$LN7@bufferedra:

; 2468 :     if (_PyIOBase_check_writable(raw, Py_True) == NULL)

  000de	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_Py_TrueStruct
  000e5	48 8b 4c 24 48	 mov	 rcx, QWORD PTR raw$[rsp]
  000ea	e8 00 00 00 00	 call	 _PyIOBase_check_writable
  000ef	48 85 c0	 test	 rax, rax
  000f2	75 0a		 jne	 SHORT $LN6@bufferedra

; 2469 :         return -1;

  000f4	b8 ff ff ff ff	 mov	 eax, -1
  000f9	e9 5f 01 00 00	 jmp	 $LN10@bufferedra
$LN6@bufferedra:
$LN5@bufferedra:

; 2470 : 
; 2471 :     Py_CLEAR(self->raw);

  000fe	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00106	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  0010b	74 5c		 je	 SHORT $LN2@bufferedra
  0010d	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00115	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0011d	4c 8b 48 60	 mov	 r9, QWORD PTR [rax+96]
  00121	41 b8 a7 09 00
	00		 mov	 r8d, 2471		; 000009a7H
  00127	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@DICDDJFP@?4?4?2Modules?2_io?2bufferedio?4c?$AA@
  0012e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@IPECHOCF@bufferedrandom_init?$AA@
  00135	e8 00 00 00 00	 call	 _PyParallel_Guard
  0013a	85 c0		 test	 eax, eax
  0013c	75 2b		 jne	 SHORT $LN2@bufferedra
  0013e	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00146	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0014a	48 89 44 24 58	 mov	 QWORD PTR _py_tmp$22546[rsp], rax
  0014f	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00157	48 c7 40 60 00
	00 00 00	 mov	 QWORD PTR [rax+96], 0
  0015f	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _py_tmp$22546[rsp]
  00164	e8 00 00 00 00	 call	 _Py_DecRef
$LN2@bufferedra:
  00169	33 c0		 xor	 eax, eax
  0016b	85 c0		 test	 eax, eax
  0016d	75 8f		 jne	 SHORT $LN5@bufferedra

; 2472 :     Py_INCREF(raw);

  0016f	48 8b 4c 24 48	 mov	 rcx, QWORD PTR raw$[rsp]
  00174	e8 00 00 00 00	 call	 _Py_IncRef

; 2473 :     self->raw = raw;

  00179	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00181	48 8b 4c 24 48	 mov	 rcx, QWORD PTR raw$[rsp]
  00186	48 89 48 60	 mov	 QWORD PTR [rax+96], rcx

; 2474 :     self->buffer_size = buffer_size;

  0018a	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00192	48 8b 4c 24 50	 mov	 rcx, QWORD PTR buffer_size$[rsp]
  00197	48 89 88 c8 00
	00 00		 mov	 QWORD PTR [rax+200], rcx

; 2475 :     self->readable = 1;

  0019e	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  001a6	c7 40 70 01 00
	00 00		 mov	 DWORD PTR [rax+112], 1

; 2476 :     self->writable = 1;

  001ad	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  001b5	c7 40 74 01 00
	00 00		 mov	 DWORD PTR [rax+116], 1

; 2477 : 
; 2478 :     if (_buffered_init(self) < 0)

  001bc	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  001c4	e8 00 00 00 00	 call	 _buffered_init
  001c9	85 c0		 test	 eax, eax
  001cb	7d 0a		 jge	 SHORT $LN1@bufferedra

; 2479 :         return -1;

  001cd	b8 ff ff ff ff	 mov	 eax, -1
  001d2	e9 86 00 00 00	 jmp	 $LN10@bufferedra
$LN1@bufferedra:

; 2480 :     _bufferedreader_reset_buf(self);

  001d7	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  001df	e8 00 00 00 00	 call	 _bufferedreader_reset_buf

; 2481 :     _bufferedwriter_reset_buf(self);

  001e4	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  001ec	e8 00 00 00 00	 call	 _bufferedwriter_reset_buf

; 2482 :     self->pos = 0;

  001f1	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  001f9	48 c7 80 90 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+144], 0

; 2483 : 
; 2484 :     self->fast_closed_checks = (Py_TYPE(self) == &PyBufferedRandom_Type &&
; 2485 :                                 Py_TYPE(raw) == &PyFileIO_Type);

  00204	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyBufferedRandom_Type
  0020b	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00213	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00217	75 1c		 jne	 SHORT $LN12@bufferedra
  00219	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyFileIO_Type
  00220	48 8b 4c 24 48	 mov	 rcx, QWORD PTR raw$[rsp]
  00225	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00229	75 0a		 jne	 SHORT $LN12@bufferedra
  0022b	c7 44 24 60 01
	00 00 00	 mov	 DWORD PTR tv148[rsp], 1
  00233	eb 08		 jmp	 SHORT $LN13@bufferedra
$LN12@bufferedra:
  00235	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR tv148[rsp], 0
$LN13@bufferedra:
  0023d	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00245	8b 4c 24 60	 mov	 ecx, DWORD PTR tv148[rsp]
  00249	89 48 7c	 mov	 DWORD PTR [rax+124], ecx

; 2486 : 
; 2487 :     self->ok = 1;

  0024c	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00254	c7 40 68 01 00
	00 00		 mov	 DWORD PTR [rax+104], 1

; 2488 :     return 0;

  0025b	33 c0		 xor	 eax, eax
$LN10@bufferedra:

; 2489 : }

  0025d	48 83 c4 78	 add	 rsp, 120		; 00000078H
  00261	c3		 ret	 0
bufferedrandom_init ENDP
_TEXT	ENDS
END
