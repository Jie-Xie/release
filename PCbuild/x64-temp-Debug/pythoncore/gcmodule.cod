; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_02DPGMDCM@gc?$AA@				; `string'
PUBLIC	??_C@_0O@KIOLDMLL@get_referents?$AA@		; `string'
PUBLIC	??_C@_0O@KJKHIMJK@get_referrers?$AA@		; `string'
PUBLIC	??_C@_0L@OCAJAOPC@is_tracked?$AA@		; `string'
PUBLIC	??_C@_0M@DIAMKEKG@get_objects?$AA@		; `string'
PUBLIC	??_C@_07JHIJCABF@collect?$AA@			; `string'
PUBLIC	??_C@_0O@DAINJCFF@get_threshold?$AA@		; `string'
PUBLIC	??_C@_0O@EPJDCBCC@set_threshold?$AA@		; `string'
PUBLIC	??_C@_09EMENNEB@get_count?$AA@			; `string'
PUBLIC	??_C@_09OPCDJHHN@get_debug?$AA@			; `string'
PUBLIC	??_C@_09MBGGLGOP@set_debug?$AA@			; `string'
PUBLIC	??_C@_09KFAMMJEF@isenabled?$AA@			; `string'
PUBLIC	??_C@_07DBNODEFN@disable?$AA@			; `string'
PUBLIC	??_C@_06OFNJOBDK@enable?$AA@			; `string'
PUBLIC	??_C@_0L@JMCFNPDK@generation?$AA@		; `string'
PUBLIC	??_C@_04CLCEDBPF@time?$AA@			; `string'
PUBLIC	_PyGC_generation0
_BSS	SEGMENT
collecting DD	01H DUP (?)
	ALIGN	8

garbage	DQ	01H DUP (?)
gc_str	DQ	01H DUP (?)
callbacks DQ	01H DUP (?)
long_lived_total DQ 01H DUP (?)
long_lived_pending DQ 01H DUP (?)
tmod	DQ	01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_02DPGMDCM@gc?$AA@
CONST	SEGMENT
??_C@_02DPGMDCM@gc?$AA@ DB 'gc', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@KIOLDMLL@get_referents?$AA@
CONST	SEGMENT
??_C@_0O@KIOLDMLL@get_referents?$AA@ DB 'get_referents', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@KJKHIMJK@get_referrers?$AA@
CONST	SEGMENT
??_C@_0O@KJKHIMJK@get_referrers?$AA@ DB 'get_referrers', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@OCAJAOPC@is_tracked?$AA@
CONST	SEGMENT
??_C@_0L@OCAJAOPC@is_tracked?$AA@ DB 'is_tracked', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@DIAMKEKG@get_objects?$AA@
CONST	SEGMENT
??_C@_0M@DIAMKEKG@get_objects?$AA@ DB 'get_objects', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07JHIJCABF@collect?$AA@
CONST	SEGMENT
??_C@_07JHIJCABF@collect?$AA@ DB 'collect', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@DAINJCFF@get_threshold?$AA@
CONST	SEGMENT
??_C@_0O@DAINJCFF@get_threshold?$AA@ DB 'get_threshold', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@EPJDCBCC@set_threshold?$AA@
CONST	SEGMENT
??_C@_0O@EPJDCBCC@set_threshold?$AA@ DB 'set_threshold', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09EMENNEB@get_count?$AA@
CONST	SEGMENT
??_C@_09EMENNEB@get_count?$AA@ DB 'get_count', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09OPCDJHHN@get_debug?$AA@
CONST	SEGMENT
??_C@_09OPCDJHHN@get_debug?$AA@ DB 'get_debug', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09MBGGLGOP@set_debug?$AA@
CONST	SEGMENT
??_C@_09MBGGLGOP@set_debug?$AA@ DB 'set_debug', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09KFAMMJEF@isenabled?$AA@
CONST	SEGMENT
??_C@_09KFAMMJEF@isenabled?$AA@ DB 'isenabled', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07DBNODEFN@disable?$AA@
CONST	SEGMENT
??_C@_07DBNODEFN@disable?$AA@ DB 'disable', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OFNJOBDK@enable?$AA@
CONST	SEGMENT
??_C@_06OFNJOBDK@enable?$AA@ DB 'enable', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JMCFNPDK@generation?$AA@
CONST	SEGMENT
??_C@_0L@JMCFNPDK@generation?$AA@ DB 'generation', 00H	; `string'
CONST	ENDS
_TLS	SEGMENT
?PyId_time@?2??get_time@@9@9 DQ 0000000000000000H	; `get_time'::`3'::PyId_time
	DQ	FLAT:??_C@_04CLCEDBPF@time?$AA@
	DQ	0000000000000000H
_TLS	ENDS
;	COMDAT ??_C@_04CLCEDBPF@time?$AA@
CONST	SEGMENT
??_C@_04CLCEDBPF@time?$AA@ DB 'time', 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
generations DQ	FLAT:generations
	DQ	FLAT:generations
	DQ	0000000000000000H
	DD	02bcH
	DD	00H
	DQ	FLAT:generations+32
	DQ	FLAT:generations+32
	DQ	0000000000000000H
	DD	0aH
	DD	00H
	DQ	FLAT:generations+64
	DQ	FLAT:generations+64
	DQ	0000000000000000H
	DD	0aH
	DD	00H
_PyGC_generation0 DQ FLAT:generations
enabled	DD	01H
	ORG $+4
gc_enable__doc__ DB 'enable() -> None', 0aH, 0aH, 'Enable automatic garba'
	DB	'ge collection.', 0aH, 00H
gc_disable__doc__ DB 'disable() -> None', 0aH, 0aH, 'Disable automatic ga'
	DB	'rbage collection.', 0aH, 00H
	ORG $+14
gc_isenabled__doc__ DB 'isenabled() -> status', 0aH, 0aH, 'Returns true i'
	DB	'f automatic garbage collection is enabled.', 0aH, 00H
	ORG $+15
gc_collect__doc__ DB 'collect([generation]) -> n', 0aH, 0aH, 'With no arg'
	DB	'uments, run a full collection.  The optional argument', 0aH, 'm'
	DB	'ay be an integer specifying which generation to collect.  A V'
	DB	'alueError', 0aH, 'is raised if the generation number is inval'
	DB	'id.', 0aH, 0aH, 'The number of unreachable objects is returne'
	DB	'd.', 0aH, 00H
	ORG $+3
?keywords@?1??gc_collect@@9@9 DQ FLAT:??_C@_0L@JMCFNPDK@generation?$AA@ ; `gc_collect'::`2'::keywords
	DQ	0000000000000000H
	ORG $+8
gc_set_debug__doc__ DB 'set_debug(flags) -> None', 0aH, 0aH, 'Set the gar'
	DB	'bage collection debugging flags. Debugging information is', 0aH
	DB	'written to sys.stderr.', 0aH, 0aH, 'flags is an integer and c'
	DB	'an have the following bits turned on:', 0aH, 0aH, '  DEBUG_ST'
	DB	'ATS - Print statistics during collection.', 0aH, '  DEBUG_COL'
	DB	'LECTABLE - Print collectable objects found.', 0aH, '  DEBUG_U'
	DB	'NCOLLECTABLE - Print unreachable but uncollectable objects fo'
	DB	'und.', 0aH, '  DEBUG_SAVEALL - Save objects to gc.garbage rat'
	DB	'her than freeing them.', 0aH, '  DEBUG_LEAK - Debug leaking p'
	DB	'rograms (everything but STATS).', 0aH, 00H
	ORG $+13
gc_get_debug__doc__ DB 'get_debug() -> flags', 0aH, 0aH, 'Get the garbage'
	DB	' collection debugging flags.', 0aH, 00H
	ORG $+13
gc_set_thresh__doc__ DB 'set_threshold(threshold0, [threshold1, threshold'
	DB	'2]) -> None', 0aH, 0aH, 'Sets the collection thresholds.  Set'
	DB	'ting threshold0 to zero disables', 0aH, 'collection.', 0aH, 00H
	ORG $+1
gc_get_thresh__doc__ DB 'get_threshold() -> (threshold0, threshold1, thre'
	DB	'shold2)', 0aH, 0aH, 'Return the current collection thresholds'
	DB	0aH, 00H
	ORG $+13
gc_get_count__doc__ DB 'get_count() -> (count0, count1, count2)', 0aH, 0aH
	DB	'Return the current collection counts', 0aH, 00H
	ORG $+1
gc_get_referrers__doc__ DB 'get_referrers(*objs) -> list', 0aH, 'Return t'
	DB	'he list of objects that directly refer to any of objs.', 00H
	ORG $+4
gc_get_referents__doc__ DB 'get_referents(*objs) -> list', 0aH, 'Return t'
	DB	'he list of objects that are directly referred to by objs.', 00H
	ORG $+1
gc_get_objects__doc__ DB 'get_objects() -> [...]', 0aH, 0aH, 'Return a li'
	DB	'st of objects tracked by the collector (excluding the list', 0aH
	DB	'returned).', 0aH, 00H
	ORG $+6
gc_is_tracked__doc__ DB 'is_tracked(obj) -> bool', 0aH, 0aH, 'Returns tru'
	DB	'e if the object is tracked by the garbage collector.', 0aH, 'S'
	DB	'imple atomic objects will return false.', 0aH, 00H
	ORG $+13
gc__doc__ DB	'This module provides access to the garbage collector for'
	DB	' reference cycles.', 0aH, 0aH, 'enable() -- Enable automatic '
	DB	'garbage collection.', 0aH, 'disable() -- Disable automatic ga'
	DB	'rbage collection.', 0aH, 'isenabled() -- Returns true if auto'
	DB	'matic collection is enabled.', 0aH, 'collect() -- Do a full c'
	DB	'ollection right now.', 0aH, 'get_count() -- Return the curren'
	DB	't collection counts.', 0aH, 'set_debug() -- Set debugging fla'
	DB	'gs.', 0aH, 'get_debug() -- Get debugging flags.', 0aH, 'set_t'
	DB	'hreshold() -- Set the collection thresholds.', 0aH, 'get_thre'
	DB	'shold() -- Return the current the collection thresholds.', 0aH
	DB	'get_objects() -- Return a list of all objects tracked by the '
	DB	'collector.', 0aH, 'is_tracked() -- Returns true if a given ob'
	DB	'ject is tracked.', 0aH, 'get_referrers() -- Return the list o'
	DB	'f objects that refer to an object.', 0aH, 'get_referents() --'
	DB	' Return the list of objects that an object refers to.', 0aH, 00H
GcMethods DQ	FLAT:??_C@_06OFNJOBDK@enable?$AA@
	DQ	FLAT:gc_enable
	DD	04H
	ORG $+4
	DQ	FLAT:gc_enable__doc__
	DQ	FLAT:??_C@_07DBNODEFN@disable?$AA@
	DQ	FLAT:gc_disable
	DD	04H
	ORG $+4
	DQ	FLAT:gc_disable__doc__
	DQ	FLAT:??_C@_09KFAMMJEF@isenabled?$AA@
	DQ	FLAT:gc_isenabled
	DD	04H
	ORG $+4
	DQ	FLAT:gc_isenabled__doc__
	DQ	FLAT:??_C@_09MBGGLGOP@set_debug?$AA@
	DQ	FLAT:gc_set_debug
	DD	01H
	ORG $+4
	DQ	FLAT:gc_set_debug__doc__
	DQ	FLAT:??_C@_09OPCDJHHN@get_debug?$AA@
	DQ	FLAT:gc_get_debug
	DD	04H
	ORG $+4
	DQ	FLAT:gc_get_debug__doc__
	DQ	FLAT:??_C@_09EMENNEB@get_count?$AA@
	DQ	FLAT:gc_get_count
	DD	04H
	ORG $+4
	DQ	FLAT:gc_get_count__doc__
	DQ	FLAT:??_C@_0O@EPJDCBCC@set_threshold?$AA@
	DQ	FLAT:gc_set_thresh
	DD	01H
	ORG $+4
	DQ	FLAT:gc_set_thresh__doc__
	DQ	FLAT:??_C@_0O@DAINJCFF@get_threshold?$AA@
	DQ	FLAT:gc_get_thresh
	DD	04H
	ORG $+4
	DQ	FLAT:gc_get_thresh__doc__
	DQ	FLAT:??_C@_07JHIJCABF@collect?$AA@
	DQ	FLAT:gc_collect
	DD	03H
	ORG $+4
	DQ	FLAT:gc_collect__doc__
	DQ	FLAT:??_C@_0M@DIAMKEKG@get_objects?$AA@
	DQ	FLAT:gc_get_objects
	DD	04H
	ORG $+4
	DQ	FLAT:gc_get_objects__doc__
	DQ	FLAT:??_C@_0L@OCAJAOPC@is_tracked?$AA@
	DQ	FLAT:gc_is_tracked
	DD	08H
	ORG $+4
	DQ	FLAT:gc_is_tracked__doc__
	DQ	FLAT:??_C@_0O@KJKHIMJK@get_referrers?$AA@
	DQ	FLAT:gc_get_referrers
	DD	01H
	ORG $+4
	DQ	FLAT:gc_get_referrers__doc__
	DQ	FLAT:??_C@_0O@KIOLDMLL@get_referents?$AA@
	DQ	FLAT:gc_get_referents
	DD	01H
	ORG $+4
	DQ	FLAT:gc_get_referents__doc__
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
gcmodule DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_02DPGMDCM@gc?$AA@
	DQ	FLAT:gc__doc__
	DQ	ffffffffffffffffH
	DQ	FLAT:GcMethods
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
_DATA	ENDS
PUBLIC	_Py_IncRef
PUBLIC	??_C@_09EBOMBFDA@gc_enable?$AA@			; `string'
PUBLIC	??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@ ; `string'
EXTRN	_Py_NoneStruct:BYTE
EXTRN	_PyParallel_ContextGuardFailure:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\modules\gcmodule.c
pdata	SEGMENT
$pdata$gc_enable DD imagerel gc_enable
	DD	imagerel gc_enable+85
	DD	imagerel $unwind$gc_enable
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gc_enable DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT ??_C@_09EBOMBFDA@gc_enable?$AA@
CONST	SEGMENT
??_C@_09EBOMBFDA@gc_enable?$AA@ DB 'gc_enable', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
CONST	SEGMENT
??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@ DB '..\Modules\gcmodul'
	DB	'e.c', 00H					; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT gc_enable
_TEXT	SEGMENT
self$ = 48
noargs$ = 56
gc_enable PROC						; COMDAT

; 1133 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1134 :     Py_GUARD

  0000e	e8 00 00 00 00	 call	 _Py_PXCTX
  00013	85 c0		 test	 eax, eax
  00015	74 1c		 je	 SHORT $LN1@gc_enable
  00017	45 33 c9	 xor	 r9d, r9d
  0001a	41 b8 6e 04 00
	00		 mov	 r8d, 1134		; 0000046eH
  00020	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00027	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09EBOMBFDA@gc_enable?$AA@
  0002e	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN1@gc_enable:

; 1135 :     enabled = 1;

  00033	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR enabled, 1

; 1136 :     Py_INCREF(Py_None);

  0003d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00044	e8 00 00 00 00	 call	 _Py_IncRef

; 1137 :     return Py_None;

  00049	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 1138 : }

  00050	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00054	c3		 ret	 0
gc_enable ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
EXTRN	_Py_RefTotal:QWORD
EXTRN	_PyParallel_Guard:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN7
	DD	imagerel $LN7+132
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 6d		 jne	 SHORT $LN2@Py_IncRef
  00012	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0001a	4c 8b 4c 24 40	 mov	 r9, QWORD PTR op$[rsp]
  0001f	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_Guard
  00038	85 c0		 test	 eax, eax
  0003a	75 12		 jne	 SHORT $LN1@Py_IncRef
  0003c	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  00041	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00045	48 83 e0 20	 and	 rax, 32			; 00000020H
  00049	48 85 c0	 test	 rax, rax
  0004c	74 31		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;

  0004e	e8 00 00 00 00	 call	 _Py_PXCTX
  00053	85 c0		 test	 eax, eax
  00055	74 02		 je	 SHORT $LN5@Py_IncRef
  00057	eb 11		 jmp	 SHORT $LN6@Py_IncRef
$LN5@Py_IncRef:
  00059	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00060	48 ff c0	 inc	 rax
  00063	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN6@Py_IncRef:

; 907  :         (((PyObject*)(op))->ob_refcnt++);

  0006a	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  0006f	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00073	48 ff c0	 inc	 rax
  00076	48 8b 4c 24 40	 mov	 rcx, QWORD PTR op$[rsp]
  0007b	48 89 41 50	 mov	 QWORD PTR [rcx+80], rax
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  0007f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00083	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@NBKPOILH@gc_disable?$AA@		; `string'
;	COMDAT pdata
; File c:\src\pyparallel\modules\gcmodule.c
pdata	SEGMENT
$pdata$gc_disable DD imagerel gc_disable
	DD	imagerel gc_disable+85
	DD	imagerel $unwind$gc_disable
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gc_disable DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT ??_C@_0L@NBKPOILH@gc_disable?$AA@
CONST	SEGMENT
??_C@_0L@NBKPOILH@gc_disable?$AA@ DB 'gc_disable', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT gc_disable
_TEXT	SEGMENT
self$ = 48
noargs$ = 56
gc_disable PROC						; COMDAT

; 1147 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1148 :     Py_GUARD

  0000e	e8 00 00 00 00	 call	 _Py_PXCTX
  00013	85 c0		 test	 eax, eax
  00015	74 1c		 je	 SHORT $LN1@gc_disable
  00017	45 33 c9	 xor	 r9d, r9d
  0001a	41 b8 7c 04 00
	00		 mov	 r8d, 1148		; 0000047cH
  00020	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00027	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@NBKPOILH@gc_disable?$AA@
  0002e	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN1@gc_disable:

; 1149 :     enabled = 0;

  00033	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR enabled, 0

; 1150 :     Py_INCREF(Py_None);

  0003d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00044	e8 00 00 00 00	 call	 _Py_IncRef

; 1151 :     return Py_None;

  00049	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 1152 : }

  00050	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00054	c3		 ret	 0
gc_disable ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@IOPIKMKN@gc_isenabled?$AA@		; `string'
EXTRN	PyBool_FromLong:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$gc_isenabled DD imagerel gc_isenabled
	DD	imagerel gc_isenabled+67
	DD	imagerel $unwind$gc_isenabled
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gc_isenabled DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT ??_C@_0N@IOPIKMKN@gc_isenabled?$AA@
CONST	SEGMENT
??_C@_0N@IOPIKMKN@gc_isenabled?$AA@ DB 'gc_isenabled', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT gc_isenabled
_TEXT	SEGMENT
self$ = 48
noargs$ = 56
gc_isenabled PROC					; COMDAT

; 1161 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1162 :     Py_GUARD

  0000e	e8 00 00 00 00	 call	 _Py_PXCTX
  00013	85 c0		 test	 eax, eax
  00015	74 1c		 je	 SHORT $LN1@gc_isenabl
  00017	45 33 c9	 xor	 r9d, r9d
  0001a	41 b8 8a 04 00
	00		 mov	 r8d, 1162		; 0000048aH
  00020	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00027	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@IOPIKMKN@gc_isenabled?$AA@
  0002e	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN1@gc_isenabl:

; 1163 :     return PyBool_FromLong((long)enabled);

  00033	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR enabled
  00039	e8 00 00 00 00	 call	 PyBool_FromLong

; 1164 : }

  0003e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00042	c3		 ret	 0
gc_isenabled ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BD@MBBBOILC@invalid?5generation?$AA@	; `string'
PUBLIC	??_C@_02OJGKGHDH@?$HMi?$AA@			; `string'
PUBLIC	??_C@_0L@HHPIPMPP@gc_collect?$AA@		; `string'
EXTRN	PyLong_FromSsize_t:PROC
EXTRN	PyErr_SetString:PROC
EXTRN	PyExc_ValueError:QWORD
EXTRN	PyArg_ParseTupleAndKeywords:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$gc_collect DD imagerel gc_collect
	DD	imagerel gc_collect+219
	DD	imagerel $unwind$gc_collect
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gc_collect DD 011301H
	DD	08213H
xdata	ENDS
;	COMDAT ??_C@_0BD@MBBBOILC@invalid?5generation?$AA@
CONST	SEGMENT
??_C@_0BD@MBBBOILC@invalid?5generation?$AA@ DB 'invalid generation', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02OJGKGHDH@?$HMi?$AA@
CONST	SEGMENT
??_C@_02OJGKGHDH@?$HMi?$AA@ DB '|i', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HHPIPMPP@gc_collect?$AA@
CONST	SEGMENT
??_C@_0L@HHPIPMPP@gc_collect?$AA@ DB 'gc_collect', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT gc_collect
_TEXT	SEGMENT
n$ = 48
genarg$ = 56
self$ = 80
args$ = 88
kws$ = 96
gc_collect PROC						; COMDAT

; 1176 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1177 :     static char *keywords[] = {"generation", NULL};
; 1178 :     int genarg = NUM_GENERATIONS - 1;

  00013	c7 44 24 38 02
	00 00 00	 mov	 DWORD PTR genarg$[rsp], 2

; 1179 :     Py_ssize_t n;
; 1180 :     Py_GUARD

  0001b	e8 00 00 00 00	 call	 _Py_PXCTX
  00020	85 c0		 test	 eax, eax
  00022	74 1c		 je	 SHORT $LN7@gc_collect
  00024	45 33 c9	 xor	 r9d, r9d
  00027	41 b8 9c 04 00
	00		 mov	 r8d, 1180		; 0000049cH
  0002d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00034	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@HHPIPMPP@gc_collect?$AA@
  0003b	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN7@gc_collect:

; 1181 : 
; 1182 :     if (!PyArg_ParseTupleAndKeywords(args, kws, "|i", keywords, &genarg))

  00040	48 8d 44 24 38	 lea	 rax, QWORD PTR genarg$[rsp]
  00045	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0004a	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?keywords@?1??gc_collect@@9@9
  00051	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_02OJGKGHDH@?$HMi?$AA@
  00058	48 8b 54 24 60	 mov	 rdx, QWORD PTR kws$[rsp]
  0005d	48 8b 4c 24 58	 mov	 rcx, QWORD PTR args$[rsp]
  00062	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  00067	85 c0		 test	 eax, eax
  00069	75 06		 jne	 SHORT $LN6@gc_collect

; 1183 :         return NULL;

  0006b	33 c0		 xor	 eax, eax
  0006d	eb 67		 jmp	 SHORT $LN8@gc_collect
  0006f	eb 25		 jmp	 SHORT $LN5@gc_collect
$LN6@gc_collect:

; 1184 : 
; 1185 :     else if (genarg < 0 || genarg >= NUM_GENERATIONS) {

  00071	83 7c 24 38 00	 cmp	 DWORD PTR genarg$[rsp], 0
  00076	7c 07		 jl	 SHORT $LN3@gc_collect
  00078	83 7c 24 38 03	 cmp	 DWORD PTR genarg$[rsp], 3
  0007d	7c 17		 jl	 SHORT $LN4@gc_collect
$LN3@gc_collect:

; 1186 :         PyErr_SetString(PyExc_ValueError, "invalid generation");

  0007f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@MBBBOILC@invalid?5generation?$AA@
  00086	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0008d	e8 00 00 00 00	 call	 PyErr_SetString

; 1187 :         return NULL;

  00092	33 c0		 xor	 eax, eax
  00094	eb 40		 jmp	 SHORT $LN8@gc_collect
$LN4@gc_collect:
$LN5@gc_collect:

; 1188 :     }
; 1189 : 
; 1190 :     if (collecting)

  00096	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR collecting, 0
  0009d	74 0b		 je	 SHORT $LN2@gc_collect

; 1191 :         n = 0; /* already collecting, don't do anything */

  0009f	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR n$[rsp], 0

; 1192 :     else {

  000a8	eb 22		 jmp	 SHORT $LN1@gc_collect
$LN2@gc_collect:

; 1193 :         collecting = 1;

  000aa	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR collecting, 1

; 1194 :         n = collect_with_callback(genarg);

  000b4	8b 4c 24 38	 mov	 ecx, DWORD PTR genarg$[rsp]
  000b8	e8 00 00 00 00	 call	 collect_with_callback
  000bd	48 89 44 24 30	 mov	 QWORD PTR n$[rsp], rax

; 1195 :         collecting = 0;

  000c2	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR collecting, 0
$LN1@gc_collect:

; 1196 :     }
; 1197 : 
; 1198 :     return PyLong_FromSsize_t(n);

  000cc	48 8b 4c 24 30	 mov	 rcx, QWORD PTR n$[rsp]
  000d1	e8 00 00 00 00	 call	 PyLong_FromSsize_t
$LN8@gc_collect:

; 1199 : }

  000d6	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000da	c3		 ret	 0
gc_collect ENDP
_TEXT	ENDS
PUBLIC	??_C@_04PEGFANN@stop?$AA@			; `string'
PUBLIC	??_C@_05FAGFPHJG@start?$AA@			; `string'
PUBLIC	??_C@_0BG@ODMDNBFH@collect_with_callback?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$collect_with_callback DD imagerel collect_with_callback
	DD	imagerel collect_with_callback+127
	DD	imagerel $unwind$collect_with_callback
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$collect_with_callback DD 010801H
	DD	08208H
xdata	ENDS
;	COMDAT ??_C@_04PEGFANN@stop?$AA@
CONST	SEGMENT
??_C@_04PEGFANN@stop?$AA@ DB 'stop', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05FAGFPHJG@start?$AA@
CONST	SEGMENT
??_C@_05FAGFPHJG@start?$AA@ DB 'start', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@ODMDNBFH@collect_with_callback?$AA@
CONST	SEGMENT
??_C@_0BG@ODMDNBFH@collect_with_callback?$AA@ DB 'collect_with_callback', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT collect_with_callback
_TEXT	SEGMENT
uncollectable$ = 32
result$ = 40
collected$ = 48
generation$ = 80
collect_with_callback PROC				; COMDAT

; 1091 : {

  00000	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  00004	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1092 :     Py_ssize_t result, collected, uncollectable;
; 1093 :     Py_GUARD

  00008	e8 00 00 00 00	 call	 _Py_PXCTX
  0000d	85 c0		 test	 eax, eax
  0000f	74 1c		 je	 SHORT $LN1@collect_wi
  00011	45 33 c9	 xor	 r9d, r9d
  00014	41 b8 45 04 00
	00		 mov	 r8d, 1093		; 00000445H
  0001a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00021	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@ODMDNBFH@collect_with_callback?$AA@
  00028	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN1@collect_wi:

; 1094 :     invoke_gc_callback("start", generation, 0, 0);

  0002d	45 33 c9	 xor	 r9d, r9d
  00030	45 33 c0	 xor	 r8d, r8d
  00033	8b 54 24 50	 mov	 edx, DWORD PTR generation$[rsp]
  00037	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05FAGFPHJG@start?$AA@
  0003e	e8 00 00 00 00	 call	 invoke_gc_callback

; 1095 :     result = collect(generation, &collected, &uncollectable);

  00043	4c 8d 44 24 20	 lea	 r8, QWORD PTR uncollectable$[rsp]
  00048	48 8d 54 24 30	 lea	 rdx, QWORD PTR collected$[rsp]
  0004d	8b 4c 24 50	 mov	 ecx, DWORD PTR generation$[rsp]
  00051	e8 00 00 00 00	 call	 collect
  00056	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax

; 1096 :     invoke_gc_callback("stop", generation, collected, uncollectable);

  0005b	4c 8b 4c 24 20	 mov	 r9, QWORD PTR uncollectable$[rsp]
  00060	4c 8b 44 24 30	 mov	 r8, QWORD PTR collected$[rsp]
  00065	8b 54 24 50	 mov	 edx, DWORD PTR generation$[rsp]
  00069	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04PEGFANN@stop?$AA@
  00070	e8 00 00 00 00	 call	 invoke_gc_callback

; 1097 :     return result;

  00075	48 8b 44 24 28	 mov	 rax, QWORD PTR result$[rsp]

; 1098 : }

  0007a	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0007e	c3		 ret	 0
collect_with_callback ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CP@JHDAMHOK@unexpected?5exception?5during?5garb@ ; `string'
PUBLIC	??_C@_0BD@GKCDOENF@garbage?5collection?$AA@	; `string'
PUBLIC	??_C@_02MIICKFIN@?4?6?$AA@			; `string'
PUBLIC	??_C@_0BA@MDGCICCN@?0?5?$CF?44fs?5elapsed?$AA@	; `string'
PUBLIC	__real@0000000000000000
PUBLIC	??_C@_0CN@PKPAIAHB@gc?3?5done?0?5?$CFId?5unreachable?0?5?$CFId?5u@ ; `string'
PUBLIC	??_C@_08CBBLBAFO@gc?3?5done?$AA@		; `string'
PUBLIC	??_C@_0O@IHCNLMBF@uncollectable?$AA@		; `string'
PUBLIC	??_C@_0M@LHJKAIHL@collectable?$AA@		; `string'
PUBLIC	??_C@_01EEMJAFIK@?6?$AA@			; `string'
PUBLIC	??_C@_04BBCKGAAG@?5?$CFId?$AA@			; `string'
PUBLIC	??_C@_0CA@FMEBEFJE@gc?3?5objects?5in?5each?5generation?3?$AA@ ; `string'
PUBLIC	??_C@_0CB@GJEHPAOL@gc?3?5collecting?5generation?5?$CFd?4?4?4?6@ ; `string'
EXTRN	Py_FatalError:PROC
EXTRN	PyErr_WriteUnraisable:PROC
EXTRN	PyUnicode_FromString:PROC
EXTRN	PyErr_Occurred:PROC
EXTRN	PySys_WriteStderr:PROC
EXTRN	_fltused:DWORD
_BSS	SEGMENT
debug	DD	01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$collect DD imagerel collect
	DD	imagerel collect+1401
	DD	imagerel $unwind$collect
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$collect DD 021501H
	DD	0150115H
xdata	ENDS
;	COMDAT ??_C@_0CP@JHDAMHOK@unexpected?5exception?5during?5garb@
CONST	SEGMENT
??_C@_0CP@JHDAMHOK@unexpected?5exception?5during?5garb@ DB 'unexpected ex'
	DB	'ception during garbage collection', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@GKCDOENF@garbage?5collection?$AA@
CONST	SEGMENT
??_C@_0BD@GKCDOENF@garbage?5collection?$AA@ DB 'garbage collection', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02MIICKFIN@?4?6?$AA@
CONST	SEGMENT
??_C@_02MIICKFIN@?4?6?$AA@ DB '.', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@MDGCICCN@?0?5?$CF?44fs?5elapsed?$AA@
CONST	SEGMENT
??_C@_0BA@MDGCICCN@?0?5?$CF?44fs?5elapsed?$AA@ DB ', %.4fs elapsed', 00H ; `string'
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT ??_C@_0CN@PKPAIAHB@gc?3?5done?0?5?$CFId?5unreachable?0?5?$CFId?5u@
CONST	SEGMENT
??_C@_0CN@PKPAIAHB@gc?3?5done?0?5?$CFId?5unreachable?0?5?$CFId?5u@ DB 'gc'
	DB	': done, %Id unreachable, %Id uncollectable', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08CBBLBAFO@gc?3?5done?$AA@
CONST	SEGMENT
??_C@_08CBBLBAFO@gc?3?5done?$AA@ DB 'gc: done', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@IHCNLMBF@uncollectable?$AA@
CONST	SEGMENT
??_C@_0O@IHCNLMBF@uncollectable?$AA@ DB 'uncollectable', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@LHJKAIHL@collectable?$AA@
CONST	SEGMENT
??_C@_0M@LHJKAIHL@collectable?$AA@ DB 'collectable', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01EEMJAFIK@?6?$AA@
CONST	SEGMENT
??_C@_01EEMJAFIK@?6?$AA@ DB 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04BBCKGAAG@?5?$CFId?$AA@
CONST	SEGMENT
??_C@_04BBCKGAAG@?5?$CFId?$AA@ DB ' %Id', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@FMEBEFJE@gc?3?5objects?5in?5each?5generation?3?$AA@
CONST	SEGMENT
??_C@_0CA@FMEBEFJE@gc?3?5objects?5in?5each?5generation?3?$AA@ DB 'gc: obj'
	DB	'ects in each generation:', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@GJEHPAOL@gc?3?5collecting?5generation?5?$CFd?4?4?4?6@
CONST	SEGMENT
??_C@_0CB@GJEHPAOL@gc?3?5collecting?5generation?5?$CFd?4?4?4?6@ DB 'gc: c'
	DB	'ollecting generation %d...', 0aH, 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT collect
_TEXT	SEGMENT
old$ = 32
n$ = 40
i$ = 48
finalizers$ = 56
young$ = 80
unreachable$ = 88
gc$ = 112
t1$ = 120
m$ = 128
t2$20888 = 136
tv181 = 144
tv198 = 152
generation$ = 176
n_collected$ = 184
n_uncollectable$ = 192
collect	PROC						; COMDAT

; 889  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 890  :     int i;
; 891  :     Py_ssize_t m = 0; /* # objects collected */

  00015	48 c7 84 24 80
	00 00 00 00 00
	00 00		 mov	 QWORD PTR m$[rsp], 0

; 892  :     Py_ssize_t n = 0; /* # unreachable objects that couldn't be collected */

  00021	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR n$[rsp], 0

; 893  :     PyGC_Head *young; /* the generation we are examining */
; 894  :     PyGC_Head *old; /* next older generation */
; 895  :     PyGC_Head unreachable; /* non-problematic unreachable trash */
; 896  :     PyGC_Head finalizers;  /* objects with, & reachable from, __del__ */
; 897  :     PyGC_Head *gc;
; 898  :     double t1 = 0.0;

  0002a	66 0f 57 c0	 xorpd	 xmm0, xmm0
  0002e	f2 0f 11 44 24
	78		 movsdx	 QWORD PTR t1$[rsp], xmm0

; 899  :     Py_GUARD

  00034	e8 00 00 00 00	 call	 _Py_PXCTX
  00039	85 c0		 test	 eax, eax
  0003b	74 1c		 je	 SHORT $LN34@collect
  0003d	45 33 c9	 xor	 r9d, r9d
  00040	41 b8 83 03 00
	00		 mov	 r8d, 899		; 00000383H
  00046	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  0004d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07JHIJCABF@collect?$AA@
  00054	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN34@collect:

; 900  : 
; 901  :     if (debug & DEBUG_STATS) {

  00059	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR debug
  0005f	83 e0 01	 and	 eax, 1
  00062	85 c0		 test	 eax, eax
  00064	0f 84 80 00 00
	00		 je	 $LN33@collect

; 902  :         PySys_WriteStderr("gc: collecting generation %d...\n",
; 903  :                           generation);

  0006a	8b 94 24 b0 00
	00 00		 mov	 edx, DWORD PTR generation$[rsp]
  00071	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CB@GJEHPAOL@gc?3?5collecting?5generation?5?$CFd?4?4?4?6@
  00078	e8 00 00 00 00	 call	 PySys_WriteStderr

; 904  :         PySys_WriteStderr("gc: objects in each generation:");

  0007d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CA@FMEBEFJE@gc?3?5objects?5in?5each?5generation?3?$AA@
  00084	e8 00 00 00 00	 call	 PySys_WriteStderr

; 905  :         for (i = 0; i < NUM_GENERATIONS; i++)

  00089	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00091	eb 0a		 jmp	 SHORT $LN32@collect
$LN31@collect:
  00093	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  00097	ff c0		 inc	 eax
  00099	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN32@collect:
  0009d	83 7c 24 30 03	 cmp	 DWORD PTR i$[rsp], 3
  000a2	7d 2f		 jge	 SHORT $LN30@collect

; 906  :             PySys_WriteStderr(" %" PY_FORMAT_SIZE_T "d",
; 907  :                               gc_list_size(GEN_HEAD(i)));

  000a4	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$[rsp]
  000a9	48 6b c0 20	 imul	 rax, 32			; 00000020H
  000ad	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:generations
  000b4	48 03 c8	 add	 rcx, rax
  000b7	48 8b c1	 mov	 rax, rcx
  000ba	48 8b c8	 mov	 rcx, rax
  000bd	e8 00 00 00 00	 call	 gc_list_size
  000c2	48 8b d0	 mov	 rdx, rax
  000c5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04BBCKGAAG@?5?$CFId?$AA@
  000cc	e8 00 00 00 00	 call	 PySys_WriteStderr
  000d1	eb c0		 jmp	 SHORT $LN31@collect
$LN30@collect:

; 908  :         t1 = get_time();

  000d3	e8 00 00 00 00	 call	 get_time
  000d8	f2 0f 11 44 24
	78		 movsdx	 QWORD PTR t1$[rsp], xmm0

; 909  :         PySys_WriteStderr("\n");

  000de	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01EEMJAFIK@?6?$AA@
  000e5	e8 00 00 00 00	 call	 PySys_WriteStderr
$LN33@collect:

; 910  :     }
; 911  : 
; 912  :     /* update collection and allocation counters */
; 913  :     if (generation+1 < NUM_GENERATIONS)

  000ea	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR generation$[rsp]
  000f1	ff c0		 inc	 eax
  000f3	83 f8 03	 cmp	 eax, 3
  000f6	7d 37		 jge	 SHORT $LN29@collect

; 914  :         generations[generation+1].count += 1;

  000f8	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR generation$[rsp]
  000ff	ff c0		 inc	 eax
  00101	48 98		 cdqe
  00103	48 6b c0 20	 imul	 rax, 32			; 00000020H
  00107	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:generations
  0010e	8b 44 01 1c	 mov	 eax, DWORD PTR [rcx+rax+28]
  00112	ff c0		 inc	 eax
  00114	8b 8c 24 b0 00
	00 00		 mov	 ecx, DWORD PTR generation$[rsp]
  0011b	ff c1		 inc	 ecx
  0011d	48 63 c9	 movsxd	 rcx, ecx
  00120	48 6b c9 20	 imul	 rcx, 32			; 00000020H
  00124	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:generations
  0012b	89 44 0a 1c	 mov	 DWORD PTR [rdx+rcx+28], eax
$LN29@collect:

; 915  :     for (i = 0; i <= generation; i++)

  0012f	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00137	eb 0a		 jmp	 SHORT $LN28@collect
$LN27@collect:
  00139	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  0013d	ff c0		 inc	 eax
  0013f	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN28@collect:
  00143	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR generation$[rsp]
  0014a	39 44 24 30	 cmp	 DWORD PTR i$[rsp], eax
  0014e	7f 1a		 jg	 SHORT $LN26@collect

; 916  :         generations[i].count = 0;

  00150	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$[rsp]
  00155	48 6b c0 20	 imul	 rax, 32			; 00000020H
  00159	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:generations
  00160	c7 44 01 1c 00
	00 00 00	 mov	 DWORD PTR [rcx+rax+28], 0
  00168	eb cf		 jmp	 SHORT $LN27@collect
$LN26@collect:

; 917  : 
; 918  :     /* merge younger generations with one we are currently collecting */
; 919  :     for (i = 0; i < generation; i++) {

  0016a	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00172	eb 0a		 jmp	 SHORT $LN25@collect
$LN24@collect:
  00174	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  00178	ff c0		 inc	 eax
  0017a	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN25@collect:
  0017e	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR generation$[rsp]
  00185	39 44 24 30	 cmp	 DWORD PTR i$[rsp], eax
  00189	7d 39		 jge	 SHORT $LN23@collect

; 920  :         gc_list_merge(GEN_HEAD(i), GEN_HEAD(generation));

  0018b	48 63 84 24 b0
	00 00 00	 movsxd	 rax, DWORD PTR generation$[rsp]
  00193	48 6b c0 20	 imul	 rax, 32			; 00000020H
  00197	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:generations
  0019e	48 03 c8	 add	 rcx, rax
  001a1	48 8b c1	 mov	 rax, rcx
  001a4	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR i$[rsp]
  001a9	48 6b c9 20	 imul	 rcx, 32			; 00000020H
  001ad	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:generations
  001b4	48 03 d1	 add	 rdx, rcx
  001b7	48 8b ca	 mov	 rcx, rdx
  001ba	48 8b d0	 mov	 rdx, rax
  001bd	e8 00 00 00 00	 call	 gc_list_merge

; 921  :     }

  001c2	eb b0		 jmp	 SHORT $LN24@collect
$LN23@collect:

; 922  : 
; 923  :     /* handy references */
; 924  :     young = GEN_HEAD(generation);

  001c4	48 63 84 24 b0
	00 00 00	 movsxd	 rax, DWORD PTR generation$[rsp]
  001cc	48 6b c0 20	 imul	 rax, 32			; 00000020H
  001d0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:generations
  001d7	48 03 c8	 add	 rcx, rax
  001da	48 8b c1	 mov	 rax, rcx
  001dd	48 89 44 24 50	 mov	 QWORD PTR young$[rsp], rax

; 925  :     if (generation < NUM_GENERATIONS-1)

  001e2	83 bc 24 b0 00
	00 00 02	 cmp	 DWORD PTR generation$[rsp], 2
  001ea	7d 23		 jge	 SHORT $LN22@collect

; 926  :         old = GEN_HEAD(generation+1);

  001ec	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR generation$[rsp]
  001f3	ff c0		 inc	 eax
  001f5	48 98		 cdqe
  001f7	48 6b c0 20	 imul	 rax, 32			; 00000020H
  001fb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:generations
  00202	48 03 c8	 add	 rcx, rax
  00205	48 8b c1	 mov	 rax, rcx
  00208	48 89 44 24 20	 mov	 QWORD PTR old$[rsp], rax

; 927  :     else

  0020d	eb 0a		 jmp	 SHORT $LN21@collect
$LN22@collect:

; 928  :         old = young;

  0020f	48 8b 44 24 50	 mov	 rax, QWORD PTR young$[rsp]
  00214	48 89 44 24 20	 mov	 QWORD PTR old$[rsp], rax
$LN21@collect:

; 929  : 
; 930  :     /* Using ob_refcnt and gc_refs, calculate which objects in the
; 931  :      * container set are reachable from outside the set (i.e., have a
; 932  :      * refcount greater than 0 when all the references within the
; 933  :      * set are taken into account).
; 934  :      */
; 935  :     update_refs(young);

  00219	48 8b 4c 24 50	 mov	 rcx, QWORD PTR young$[rsp]
  0021e	e8 00 00 00 00	 call	 update_refs

; 936  :     subtract_refs(young);

  00223	48 8b 4c 24 50	 mov	 rcx, QWORD PTR young$[rsp]
  00228	e8 00 00 00 00	 call	 subtract_refs

; 937  : 
; 938  :     /* Leave everything reachable from outside young in young, and move
; 939  :      * everything else (in young) to unreachable.
; 940  :      * NOTE:  This used to move the reachable objects into a reachable
; 941  :      * set instead.  But most things usually turn out to be reachable,
; 942  :      * so it's more efficient to move the unreachable things.
; 943  :      */
; 944  :     gc_list_init(&unreachable);

  0022d	48 8d 4c 24 58	 lea	 rcx, QWORD PTR unreachable$[rsp]
  00232	e8 00 00 00 00	 call	 gc_list_init

; 945  :     move_unreachable(young, &unreachable);

  00237	48 8d 54 24 58	 lea	 rdx, QWORD PTR unreachable$[rsp]
  0023c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR young$[rsp]
  00241	e8 00 00 00 00	 call	 move_unreachable

; 946  : 
; 947  :     /* Move reachable objects to next generation. */
; 948  :     if (young != old) {

  00246	48 8b 44 24 20	 mov	 rax, QWORD PTR old$[rsp]
  0024b	48 39 44 24 50	 cmp	 QWORD PTR young$[rsp], rax
  00250	74 39		 je	 SHORT $LN20@collect

; 949  :         if (generation == NUM_GENERATIONS - 2) {

  00252	83 bc 24 b0 00
	00 00 01	 cmp	 DWORD PTR generation$[rsp], 1
  0025a	75 1e		 jne	 SHORT $LN19@collect

; 950  :             long_lived_pending += gc_list_size(young);

  0025c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR young$[rsp]
  00261	e8 00 00 00 00	 call	 gc_list_size
  00266	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR long_lived_pending
  0026d	48 03 c8	 add	 rcx, rax
  00270	48 8b c1	 mov	 rax, rcx
  00273	48 89 05 00 00
	00 00		 mov	 QWORD PTR long_lived_pending, rax
$LN19@collect:

; 951  :         }
; 952  :         gc_list_merge(young, old);

  0027a	48 8b 54 24 20	 mov	 rdx, QWORD PTR old$[rsp]
  0027f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR young$[rsp]
  00284	e8 00 00 00 00	 call	 gc_list_merge

; 953  :     }
; 954  :     else {

  00289	eb 26		 jmp	 SHORT $LN18@collect
$LN20@collect:

; 955  :         /* We only untrack dicts in full collections, to avoid quadratic
; 956  :            dict build-up. See issue #14775. */
; 957  :         untrack_dicts(young);

  0028b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR young$[rsp]
  00290	e8 00 00 00 00	 call	 untrack_dicts

; 958  :         long_lived_pending = 0;

  00295	48 c7 05 00 00
	00 00 00 00 00
	00		 mov	 QWORD PTR long_lived_pending, 0

; 959  :         long_lived_total = gc_list_size(young);

  002a0	48 8b 4c 24 50	 mov	 rcx, QWORD PTR young$[rsp]
  002a5	e8 00 00 00 00	 call	 gc_list_size
  002aa	48 89 05 00 00
	00 00		 mov	 QWORD PTR long_lived_total, rax
$LN18@collect:

; 960  :     }
; 961  : 
; 962  :     /* All objects in unreachable are trash, but objects reachable from
; 963  :      * finalizers can't safely be deleted.  Python programmers should take
; 964  :      * care not to create such things.  For Python, finalizers means
; 965  :      * instance objects with __del__ methods.  Weakrefs with callbacks
; 966  :      * can also call arbitrary Python code but they will be dealt with by
; 967  :      * handle_weakrefs().
; 968  :      */
; 969  :     gc_list_init(&finalizers);

  002b1	48 8d 4c 24 38	 lea	 rcx, QWORD PTR finalizers$[rsp]
  002b6	e8 00 00 00 00	 call	 gc_list_init

; 970  :     move_finalizers(&unreachable, &finalizers);

  002bb	48 8d 54 24 38	 lea	 rdx, QWORD PTR finalizers$[rsp]
  002c0	48 8d 4c 24 58	 lea	 rcx, QWORD PTR unreachable$[rsp]
  002c5	e8 00 00 00 00	 call	 move_finalizers

; 971  :     /* finalizers contains the unreachable objects with a finalizer;
; 972  :      * unreachable objects reachable *from* those are also uncollectable,
; 973  :      * and we move those into the finalizers list too.
; 974  :      */
; 975  :     move_finalizer_reachable(&finalizers);

  002ca	48 8d 4c 24 38	 lea	 rcx, QWORD PTR finalizers$[rsp]
  002cf	e8 00 00 00 00	 call	 move_finalizer_reachable

; 976  : 
; 977  :     /* Collect statistics on collectable objects found and print
; 978  :      * debugging information.
; 979  :      */
; 980  :     for (gc = unreachable.gc.gc_next; gc != &unreachable;
; 981  :                     gc = gc->gc.gc_next) {

  002d4	48 8b 44 24 58	 mov	 rax, QWORD PTR unreachable$[rsp]
  002d9	48 89 44 24 70	 mov	 QWORD PTR gc$[rsp], rax
  002de	eb 0d		 jmp	 SHORT $LN17@collect
$LN16@collect:
  002e0	48 8b 44 24 70	 mov	 rax, QWORD PTR gc$[rsp]
  002e5	48 8b 00	 mov	 rax, QWORD PTR [rax]
  002e8	48 89 44 24 70	 mov	 QWORD PTR gc$[rsp], rax
$LN17@collect:
  002ed	48 8d 44 24 58	 lea	 rax, QWORD PTR unreachable$[rsp]
  002f2	48 39 44 24 70	 cmp	 QWORD PTR gc$[rsp], rax
  002f7	74 5e		 je	 SHORT $LN15@collect

; 982  :         m++;

  002f9	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR m$[rsp]
  00301	48 ff c0	 inc	 rax
  00304	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR m$[rsp], rax

; 983  :         if (debug & DEBUG_COLLECTABLE) {

  0030c	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR debug
  00312	83 e0 02	 and	 eax, 2
  00315	85 c0		 test	 eax, eax
  00317	74 3c		 je	 SHORT $LN14@collect

; 984  :             debug_cycle("collectable", FROM_GC(gc));

  00319	e8 00 00 00 00	 call	 _Py_PXCTX
  0031e	85 c0		 test	 eax, eax
  00320	74 0e		 je	 SHORT $LN37@collect
  00322	48 c7 84 24 90
	00 00 00 00 00
	00 00		 mov	 QWORD PTR tv181[rsp], 0
  0032e	eb 11		 jmp	 SHORT $LN38@collect
$LN37@collect:
  00330	48 8b 44 24 70	 mov	 rax, QWORD PTR gc$[rsp]
  00335	48 83 c0 18	 add	 rax, 24
  00339	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv181[rsp], rax
$LN38@collect:
  00341	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR tv181[rsp]
  00349	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@LHJKAIHL@collectable?$AA@
  00350	e8 00 00 00 00	 call	 debug_cycle
$LN14@collect:

; 985  :         }
; 986  :     }

  00355	eb 89		 jmp	 SHORT $LN16@collect
$LN15@collect:

; 987  : 
; 988  :     /* Clear weakrefs and invoke callbacks as necessary. */
; 989  :     m += handle_weakrefs(&unreachable, old);

  00357	48 8b 54 24 20	 mov	 rdx, QWORD PTR old$[rsp]
  0035c	48 8d 4c 24 58	 lea	 rcx, QWORD PTR unreachable$[rsp]
  00361	e8 00 00 00 00	 call	 handle_weakrefs
  00366	48 98		 cdqe
  00368	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR m$[rsp]
  00370	48 03 c8	 add	 rcx, rax
  00373	48 8b c1	 mov	 rax, rcx
  00376	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR m$[rsp], rax

; 990  : 
; 991  :     /* Call tp_clear on objects in the unreachable set.  This will cause
; 992  :      * the reference cycles to be broken.  It may also cause some objects
; 993  :      * in finalizers to be freed.
; 994  :      */
; 995  :     delete_garbage(&unreachable, old);

  0037e	48 8b 54 24 20	 mov	 rdx, QWORD PTR old$[rsp]
  00383	48 8d 4c 24 58	 lea	 rcx, QWORD PTR unreachable$[rsp]
  00388	e8 00 00 00 00	 call	 delete_garbage

; 996  : 
; 997  :     /* Collect statistics on uncollectable objects found and print
; 998  :      * debugging information. */
; 999  :     for (gc = finalizers.gc.gc_next;
; 1000 :          gc != &finalizers;
; 1001 :          gc = gc->gc.gc_next) {

  0038d	48 8b 44 24 38	 mov	 rax, QWORD PTR finalizers$[rsp]
  00392	48 89 44 24 70	 mov	 QWORD PTR gc$[rsp], rax
  00397	eb 0d		 jmp	 SHORT $LN13@collect
$LN12@collect:
  00399	48 8b 44 24 70	 mov	 rax, QWORD PTR gc$[rsp]
  0039e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  003a1	48 89 44 24 70	 mov	 QWORD PTR gc$[rsp], rax
$LN13@collect:
  003a6	48 8d 44 24 38	 lea	 rax, QWORD PTR finalizers$[rsp]
  003ab	48 39 44 24 70	 cmp	 QWORD PTR gc$[rsp], rax
  003b0	74 58		 je	 SHORT $LN11@collect

; 1002 :         n++;

  003b2	48 8b 44 24 28	 mov	 rax, QWORD PTR n$[rsp]
  003b7	48 ff c0	 inc	 rax
  003ba	48 89 44 24 28	 mov	 QWORD PTR n$[rsp], rax

; 1003 :         if (debug & DEBUG_UNCOLLECTABLE)

  003bf	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR debug
  003c5	83 e0 04	 and	 eax, 4
  003c8	85 c0		 test	 eax, eax
  003ca	74 3c		 je	 SHORT $LN10@collect

; 1004 :             debug_cycle("uncollectable", FROM_GC(gc));

  003cc	e8 00 00 00 00	 call	 _Py_PXCTX
  003d1	85 c0		 test	 eax, eax
  003d3	74 0e		 je	 SHORT $LN39@collect
  003d5	48 c7 84 24 98
	00 00 00 00 00
	00 00		 mov	 QWORD PTR tv198[rsp], 0
  003e1	eb 11		 jmp	 SHORT $LN40@collect
$LN39@collect:
  003e3	48 8b 44 24 70	 mov	 rax, QWORD PTR gc$[rsp]
  003e8	48 83 c0 18	 add	 rax, 24
  003ec	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR tv198[rsp], rax
$LN40@collect:
  003f4	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR tv198[rsp]
  003fc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@IHCNLMBF@uncollectable?$AA@
  00403	e8 00 00 00 00	 call	 debug_cycle
$LN10@collect:

; 1005 :     }

  00408	eb 8f		 jmp	 SHORT $LN12@collect
$LN11@collect:

; 1006 :     if (debug & DEBUG_STATS) {

  0040a	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR debug
  00410	83 e0 01	 and	 eax, 1
  00413	85 c0		 test	 eax, eax
  00415	0f 84 ad 00 00
	00		 je	 $LN9@collect

; 1007 :         double t2 = get_time();

  0041b	e8 00 00 00 00	 call	 get_time
  00420	f2 0f 11 84 24
	88 00 00 00	 movsdx	 QWORD PTR t2$20888[rsp], xmm0

; 1008 :         if (m == 0 && n == 0)

  00429	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR m$[rsp], 0
  00432	75 16		 jne	 SHORT $LN8@collect
  00434	48 83 7c 24 28
	00		 cmp	 QWORD PTR n$[rsp], 0
  0043a	75 0e		 jne	 SHORT $LN8@collect

; 1009 :             PySys_WriteStderr("gc: done");

  0043c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08CBBLBAFO@gc?3?5done?$AA@
  00443	e8 00 00 00 00	 call	 PySys_WriteStderr

; 1010 :         else

  00448	eb 27		 jmp	 SHORT $LN7@collect
$LN8@collect:

; 1011 :             PySys_WriteStderr(
; 1012 :                 "gc: done, "
; 1013 :                 "%" PY_FORMAT_SIZE_T "d unreachable, "
; 1014 :                 "%" PY_FORMAT_SIZE_T "d uncollectable",
; 1015 :                 n+m, n);

  0044a	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR m$[rsp]
  00452	48 8b 4c 24 28	 mov	 rcx, QWORD PTR n$[rsp]
  00457	48 03 c8	 add	 rcx, rax
  0045a	48 8b c1	 mov	 rax, rcx
  0045d	4c 8b 44 24 28	 mov	 r8, QWORD PTR n$[rsp]
  00462	48 8b d0	 mov	 rdx, rax
  00465	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CN@PKPAIAHB@gc?3?5done?0?5?$CFId?5unreachable?0?5?$CFId?5u@
  0046c	e8 00 00 00 00	 call	 PySys_WriteStderr
$LN7@collect:

; 1016 :         if (t1 && t2) {

  00471	f2 0f 10 44 24
	78		 movsdx	 xmm0, QWORD PTR t1$[rsp]
  00477	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  0047f	7a 02		 jp	 SHORT $LN42@collect
  00481	74 39		 je	 SHORT $LN6@collect
$LN42@collect:
  00483	f2 0f 10 84 24
	88 00 00 00	 movsdx	 xmm0, QWORD PTR t2$20888[rsp]
  0048c	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  00494	7a 02		 jp	 SHORT $LN41@collect
  00496	74 24		 je	 SHORT $LN6@collect
$LN41@collect:

; 1017 :             PySys_WriteStderr(", %.4fs elapsed", t2-t1);

  00498	f2 0f 10 84 24
	88 00 00 00	 movsdx	 xmm0, QWORD PTR t2$20888[rsp]
  004a1	f2 0f 5c 44 24
	78		 subsd	 xmm0, QWORD PTR t1$[rsp]
  004a7	66 0f 28 c8	 movapd	 xmm1, xmm0
  004ab	66 48 0f 7e ca	 movd	 rdx, xmm1
  004b0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@MDGCICCN@?0?5?$CF?44fs?5elapsed?$AA@
  004b7	e8 00 00 00 00	 call	 PySys_WriteStderr
$LN6@collect:

; 1018 :         }
; 1019 :         PySys_WriteStderr(".\n");

  004bc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02MIICKFIN@?4?6?$AA@
  004c3	e8 00 00 00 00	 call	 PySys_WriteStderr
$LN9@collect:

; 1020 :     }
; 1021 : 
; 1022 :     /* Append instances in the uncollectable set to a Python
; 1023 :      * reachable list of garbage.  The programmer has to deal with
; 1024 :      * this if they insist on creating this type of structure.
; 1025 :      */
; 1026 :     (void)handle_finalizers(&finalizers, old);

  004c8	48 8b 54 24 20	 mov	 rdx, QWORD PTR old$[rsp]
  004cd	48 8d 4c 24 38	 lea	 rcx, QWORD PTR finalizers$[rsp]
  004d2	e8 00 00 00 00	 call	 handle_finalizers

; 1027 : 
; 1028 :     /* Clear free list only during the collection of the highest
; 1029 :      * generation */
; 1030 :     if (generation == NUM_GENERATIONS-1) {

  004d7	83 bc 24 b0 00
	00 00 02	 cmp	 DWORD PTR generation$[rsp], 2
  004df	75 05		 jne	 SHORT $LN5@collect

; 1031 :         clear_freelists();

  004e1	e8 00 00 00 00	 call	 clear_freelists
$LN5@collect:

; 1032 :     }
; 1033 : 
; 1034 :     if (PyErr_Occurred()) {

  004e6	e8 00 00 00 00	 call	 PyErr_Occurred
  004eb	48 85 c0	 test	 rax, rax
  004ee	74 35		 je	 SHORT $LN4@collect

; 1035 :         if (gc_str == NULL)

  004f0	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR gc_str, 0
  004f8	75 13		 jne	 SHORT $LN3@collect

; 1036 :             gc_str = PyUnicode_FromString("garbage collection");

  004fa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@GKCDOENF@garbage?5collection?$AA@
  00501	e8 00 00 00 00	 call	 PyUnicode_FromString
  00506	48 89 05 00 00
	00 00		 mov	 QWORD PTR gc_str, rax
$LN3@collect:

; 1037 :         PyErr_WriteUnraisable(gc_str);

  0050d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR gc_str
  00514	e8 00 00 00 00	 call	 PyErr_WriteUnraisable

; 1038 :         Py_FatalError("unexpected exception during garbage collection");

  00519	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CP@JHDAMHOK@unexpected?5exception?5during?5garb@
  00520	e8 00 00 00 00	 call	 Py_FatalError
$LN4@collect:

; 1039 :     }
; 1040 : 
; 1041 :     if (n_collected)

  00525	48 83 bc 24 b8
	00 00 00 00	 cmp	 QWORD PTR n_collected$[rsp], 0
  0052e	74 13		 je	 SHORT $LN2@collect

; 1042 :         *n_collected = m;

  00530	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR n_collected$[rsp]
  00538	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR m$[rsp]
  00540	48 89 08	 mov	 QWORD PTR [rax], rcx
$LN2@collect:

; 1043 :     if (n_uncollectable)

  00543	48 83 bc 24 c0
	00 00 00 00	 cmp	 QWORD PTR n_uncollectable$[rsp], 0
  0054c	74 10		 je	 SHORT $LN1@collect

; 1044 :         *n_uncollectable = n;

  0054e	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR n_uncollectable$[rsp]
  00556	48 8b 4c 24 28	 mov	 rcx, QWORD PTR n$[rsp]
  0055b	48 89 08	 mov	 QWORD PTR [rax], rcx
$LN1@collect:

; 1045 :     return n+m;

  0055e	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR m$[rsp]
  00566	48 8b 4c 24 28	 mov	 rcx, QWORD PTR n$[rsp]
  0056b	48 03 c8	 add	 rcx, rax
  0056e	48 8b c1	 mov	 rax, rcx

; 1046 : }

  00571	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  00578	c3		 ret	 0
collect	ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@IIDECAFI@gc_list_init?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$gc_list_init DD imagerel gc_list_init
	DD	imagerel gc_list_init+78
	DD	imagerel $unwind$gc_list_init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gc_list_init DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT ??_C@_0N@IIDECAFI@gc_list_init?$AA@
CONST	SEGMENT
??_C@_0N@IIDECAFI@gc_list_init?$AA@ DB 'gc_list_init', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT gc_list_init
_TEXT	SEGMENT
list$ = 48
gc_list_init PROC					; COMDAT

; 237  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 238  :     Py_GUARD

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	74 1c		 je	 SHORT $LN1@gc_list_in
  00012	45 33 c9	 xor	 r9d, r9d
  00015	41 b8 ee 00 00
	00		 mov	 r8d, 238		; 000000eeH
  0001b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@IIDECAFI@gc_list_init?$AA@
  00029	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN1@gc_list_in:

; 239  :     list->gc.gc_prev = list;

  0002e	48 8b 44 24 30	 mov	 rax, QWORD PTR list$[rsp]
  00033	48 8b 4c 24 30	 mov	 rcx, QWORD PTR list$[rsp]
  00038	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 240  :     list->gc.gc_next = list;

  0003c	48 8b 44 24 30	 mov	 rax, QWORD PTR list$[rsp]
  00041	48 8b 4c 24 30	 mov	 rcx, QWORD PTR list$[rsp]
  00046	48 89 08	 mov	 QWORD PTR [rax], rcx

; 241  : }

  00049	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004d	c3		 ret	 0
gc_list_init ENDP
_TEXT	ENDS
PUBLIC	??_C@_1BG@JKDIAHNK@?$AAf?$AAr?$AAo?$AAm?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAt?$AAo?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CM@JNCNOGAO@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAg?$AAc?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@ ; `string'
PUBLIC	??_C@_0O@IILMMLE@gc_list_merge?$AA@		; `string'
EXTRN	__imp__wassert:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$gc_list_merge DD imagerel gc_list_merge
	DD	imagerel gc_list_merge+202
	DD	imagerel $unwind$gc_list_merge
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gc_list_merge DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT ??_C@_1BG@JKDIAHNK@?$AAf?$AAr?$AAo?$AAm?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAt?$AAo?$AA?$AA@
CONST	SEGMENT
??_C@_1BG@JKDIAHNK@?$AAf?$AAr?$AAo?$AAm?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAt?$AAo?$AA?$AA@ DB 'f'
	DB	00H, 'r', 00H, 'o', 00H, 'm', 00H, ' ', 00H, '!', 00H, '=', 00H
	DB	' ', 00H, 't', 00H, 'o', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1CM@JNCNOGAO@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAg?$AAc?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
CONST	SEGMENT
??_C@_1CM@JNCNOGAO@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAg?$AAc?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@ DB '.'
	DB	00H, '.', 00H, '\', 00H, 'M', 00H, 'o', 00H, 'd', 00H, 'u', 00H
	DB	'l', 00H, 'e', 00H, 's', 00H, '\', 00H, 'g', 00H, 'c', 00H, 'm'
	DB	00H, 'o', 00H, 'd', 00H, 'u', 00H, 'l', 00H, 'e', 00H, '.', 00H
	DB	'c', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@IILMMLE@gc_list_merge?$AA@
CONST	SEGMENT
??_C@_0O@IILMMLE@gc_list_merge?$AA@ DB 'gc_list_merge', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT gc_list_merge
_TEXT	SEGMENT
tail$ = 32
from$ = 64
to$ = 72
gc_list_merge PROC					; COMDAT

; 298  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 299  :     PyGC_Head *tail;
; 300  :     Py_GUARD

  0000e	e8 00 00 00 00	 call	 _Py_PXCTX
  00013	85 c0		 test	 eax, eax
  00015	74 1c		 je	 SHORT $LN2@gc_list_me
  00017	45 33 c9	 xor	 r9d, r9d
  0001a	41 b8 2c 01 00
	00		 mov	 r8d, 300		; 0000012cH
  00020	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00027	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@IILMMLE@gc_list_merge?$AA@
  0002e	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN2@gc_list_me:

; 301  :     assert(from != to);

  00033	48 8b 44 24 48	 mov	 rax, QWORD PTR to$[rsp]
  00038	48 39 44 24 40	 cmp	 QWORD PTR from$[rsp], rax
  0003d	75 1c		 jne	 SHORT $LN5@gc_list_me
  0003f	41 b8 2d 01 00
	00		 mov	 r8d, 301		; 0000012dH
  00045	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CM@JNCNOGAO@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAg?$AAc?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  0004c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BG@JKDIAHNK@?$AAf?$AAr?$AAo?$AAm?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAt?$AAo?$AA?$AA@
  00053	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00059	33 c0		 xor	 eax, eax
$LN5@gc_list_me:

; 302  :     if (!gc_list_is_empty(from)) {

  0005b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR from$[rsp]
  00060	e8 00 00 00 00	 call	 gc_list_is_empty
  00065	85 c0		 test	 eax, eax
  00067	75 52		 jne	 SHORT $LN1@gc_list_me

; 303  :         tail = to->gc.gc_prev;

  00069	48 8b 44 24 48	 mov	 rax, QWORD PTR to$[rsp]
  0006e	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00072	48 89 44 24 20	 mov	 QWORD PTR tail$[rsp], rax

; 304  :         tail->gc.gc_next = from->gc.gc_next;

  00077	48 8b 44 24 20	 mov	 rax, QWORD PTR tail$[rsp]
  0007c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR from$[rsp]
  00081	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00084	48 89 08	 mov	 QWORD PTR [rax], rcx

; 305  :         tail->gc.gc_next->gc.gc_prev = tail;

  00087	48 8b 44 24 20	 mov	 rax, QWORD PTR tail$[rsp]
  0008c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0008f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tail$[rsp]
  00094	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 306  :         to->gc.gc_prev = from->gc.gc_prev;

  00098	48 8b 44 24 48	 mov	 rax, QWORD PTR to$[rsp]
  0009d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR from$[rsp]
  000a2	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  000a6	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 307  :         to->gc.gc_prev->gc.gc_next = to;

  000aa	48 8b 44 24 48	 mov	 rax, QWORD PTR to$[rsp]
  000af	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  000b3	48 8b 4c 24 48	 mov	 rcx, QWORD PTR to$[rsp]
  000b8	48 89 08	 mov	 QWORD PTR [rax], rcx
$LN1@gc_list_me:

; 308  :     }
; 309  :     gc_list_init(from);

  000bb	48 8b 4c 24 40	 mov	 rcx, QWORD PTR from$[rsp]
  000c0	e8 00 00 00 00	 call	 gc_list_init

; 310  : }

  000c5	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000c9	c3		 ret	 0
gc_list_merge ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BB@CNKCONLH@gc_list_is_empty?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$gc_list_is_empty DD imagerel gc_list_is_empty
	DD	imagerel gc_list_is_empty+88
	DD	imagerel $unwind$gc_list_is_empty
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gc_list_is_empty DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0BB@CNKCONLH@gc_list_is_empty?$AA@
CONST	SEGMENT
??_C@_0BB@CNKCONLH@gc_list_is_empty?$AA@ DB 'gc_list_is_empty', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT gc_list_is_empty
_TEXT	SEGMENT
tv71 = 32
list$ = 64
gc_list_is_empty PROC					; COMDAT

; 245  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 246  :     Py_GUARD

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	74 1c		 je	 SHORT $LN1@gc_list_is
  00012	45 33 c9	 xor	 r9d, r9d
  00015	41 b8 f6 00 00
	00		 mov	 r8d, 246		; 000000f6H
  0001b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@CNKCONLH@gc_list_is_empty?$AA@
  00029	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN1@gc_list_is:

; 247  :     return (list->gc.gc_next == list);

  0002e	48 8b 44 24 40	 mov	 rax, QWORD PTR list$[rsp]
  00033	48 8b 4c 24 40	 mov	 rcx, QWORD PTR list$[rsp]
  00038	48 39 08	 cmp	 QWORD PTR [rax], rcx
  0003b	75 0a		 jne	 SHORT $LN4@gc_list_is
  0003d	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv71[rsp], 1
  00045	eb 08		 jmp	 SHORT $LN5@gc_list_is
$LN4@gc_list_is:
  00047	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv71[rsp], 0
$LN5@gc_list_is:
  0004f	8b 44 24 20	 mov	 eax, DWORD PTR tv71[rsp]

; 248  : }

  00053	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00057	c3		 ret	 0
gc_list_is_empty ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@HCAKKJPL@gc_list_size?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$gc_list_size DD imagerel gc_list_size
	DD	imagerel gc_list_size+120
	DD	imagerel $unwind$gc_list_size
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gc_list_size DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0N@HCAKKJPL@gc_list_size?$AA@
CONST	SEGMENT
??_C@_0N@HCAKKJPL@gc_list_size?$AA@ DB 'gc_list_size', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT gc_list_size
_TEXT	SEGMENT
n$ = 32
gc$ = 40
list$ = 64
gc_list_size PROC					; COMDAT

; 314  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 315  :     PyGC_Head *gc;
; 316  :     Py_ssize_t n = 0;

  00009	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR n$[rsp], 0

; 317  :     Py_GUARD

  00012	e8 00 00 00 00	 call	 _Py_PXCTX
  00017	85 c0		 test	 eax, eax
  00019	74 1c		 je	 SHORT $LN4@gc_list_si
  0001b	45 33 c9	 xor	 r9d, r9d
  0001e	41 b8 3d 01 00
	00		 mov	 r8d, 317		; 0000013dH
  00024	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  0002b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@HCAKKJPL@gc_list_size?$AA@
  00032	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN4@gc_list_si:

; 318  :     for (gc = list->gc.gc_next; gc != list; gc = gc->gc.gc_next) {

  00037	48 8b 44 24 40	 mov	 rax, QWORD PTR list$[rsp]
  0003c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0003f	48 89 44 24 28	 mov	 QWORD PTR gc$[rsp], rax
  00044	eb 0d		 jmp	 SHORT $LN3@gc_list_si
$LN2@gc_list_si:
  00046	48 8b 44 24 28	 mov	 rax, QWORD PTR gc$[rsp]
  0004b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0004e	48 89 44 24 28	 mov	 QWORD PTR gc$[rsp], rax
$LN3@gc_list_si:
  00053	48 8b 44 24 40	 mov	 rax, QWORD PTR list$[rsp]
  00058	48 39 44 24 28	 cmp	 QWORD PTR gc$[rsp], rax
  0005d	74 0f		 je	 SHORT $LN1@gc_list_si

; 319  :         n++;

  0005f	48 8b 44 24 20	 mov	 rax, QWORD PTR n$[rsp]
  00064	48 ff c0	 inc	 rax
  00067	48 89 44 24 20	 mov	 QWORD PTR n$[rsp], rax

; 320  :     }

  0006c	eb d8		 jmp	 SHORT $LN2@gc_list_si
$LN1@gc_list_si:

; 321  :     return n;

  0006e	48 8b 44 24 20	 mov	 rax, QWORD PTR n$[rsp]

; 322  : }

  00073	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00077	c3		 ret	 0
gc_list_size ENDP
_TEXT	ENDS
PUBLIC	??_C@_1CI@CDLMNG@?$AAg?$AAc?$AA?9?$AA?$DO?$AAg?$AAc?$AA?4?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DO@EBGKIODD@?$AAg?$AAc?$AA?9?$AA?$DO?$AAg?$AAc?$AA?4?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAG?$AAC?$AA_?$AAR?$AAE?$AAA?$AAC?$AAH?$AAA?$AAB?$AAL?$AAE?$AA?$AA@ ; `string'
PUBLIC	??_C@_0M@JOBLMDFJ@update_refs?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$update_refs DD imagerel update_refs
	DD	imagerel update_refs+232
	DD	imagerel $unwind$update_refs
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$update_refs DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_1CI@CDLMNG@?$AAg?$AAc?$AA?9?$AA?$DO?$AAg?$AAc?$AA?4?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1CI@CDLMNG@?$AAg?$AAc?$AA?9?$AA?$DO?$AAg?$AAc?$AA?4?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$AA@ DB 'g'
	DB	00H, 'c', 00H, '-', 00H, '>', 00H, 'g', 00H, 'c', 00H, '.', 00H
	DB	'g', 00H, 'c', 00H, '_', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 's'
	DB	00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, '0', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DO@EBGKIODD@?$AAg?$AAc?$AA?9?$AA?$DO?$AAg?$AAc?$AA?4?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAG?$AAC?$AA_?$AAR?$AAE?$AAA?$AAC?$AAH?$AAA?$AAB?$AAL?$AAE?$AA?$AA@
CONST	SEGMENT
??_C@_1DO@EBGKIODD@?$AAg?$AAc?$AA?9?$AA?$DO?$AAg?$AAc?$AA?4?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAG?$AAC?$AA_?$AAR?$AAE?$AAA?$AAC?$AAH?$AAA?$AAB?$AAL?$AAE?$AA?$AA@ DB 'g'
	DB	00H, 'c', 00H, '-', 00H, '>', 00H, 'g', 00H, 'c', 00H, '.', 00H
	DB	'g', 00H, 'c', 00H, '_', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 's'
	DB	00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'G', 00H, 'C', 00H
	DB	'_', 00H, 'R', 00H, 'E', 00H, 'A', 00H, 'C', 00H, 'H', 00H, 'A'
	DB	00H, 'B', 00H, 'L', 00H, 'E', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@JOBLMDFJ@update_refs?$AA@
CONST	SEGMENT
??_C@_0M@JOBLMDFJ@update_refs?$AA@ DB 'update_refs', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT update_refs
_TEXT	SEGMENT
gc$ = 32
tv81 = 40
containers$ = 64
update_refs PROC					; COMDAT

; 352  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 353  :     PyGC_Head *gc;
; 354  :     Py_GUARD

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	74 1c		 je	 SHORT $LN4@update_ref
  00012	45 33 c9	 xor	 r9d, r9d
  00015	41 b8 62 01 00
	00		 mov	 r8d, 354		; 00000162H
  0001b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@JOBLMDFJ@update_refs?$AA@
  00029	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN4@update_ref:

; 355  :     gc = containers->gc.gc_next;

  0002e	48 8b 44 24 40	 mov	 rax, QWORD PTR containers$[rsp]
  00033	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00036	48 89 44 24 20	 mov	 QWORD PTR gc$[rsp], rax

; 356  :     for (; gc != containers; gc = gc->gc.gc_next) {

  0003b	eb 0d		 jmp	 SHORT $LN3@update_ref
$LN2@update_ref:
  0003d	48 8b 44 24 20	 mov	 rax, QWORD PTR gc$[rsp]
  00042	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00045	48 89 44 24 20	 mov	 QWORD PTR gc$[rsp], rax
$LN3@update_ref:
  0004a	48 8b 44 24 40	 mov	 rax, QWORD PTR containers$[rsp]
  0004f	48 39 44 24 20	 cmp	 QWORD PTR gc$[rsp], rax
  00054	0f 84 89 00 00
	00		 je	 $LN1@update_ref

; 357  :         assert(gc->gc.gc_refs == GC_REACHABLE);

  0005a	48 8b 44 24 20	 mov	 rax, QWORD PTR gc$[rsp]
  0005f	48 83 78 10 fd	 cmp	 QWORD PTR [rax+16], -3
  00064	74 1c		 je	 SHORT $LN7@update_ref
  00066	41 b8 65 01 00
	00		 mov	 r8d, 357		; 00000165H
  0006c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CM@JNCNOGAO@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAg?$AAc?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  00073	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@EBGKIODD@?$AAg?$AAc?$AA?9?$AA?$DO?$AAg?$AAc?$AA?4?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAG?$AAC?$AA_?$AAR?$AAE?$AAA?$AAC?$AAH?$AAA?$AAB?$AAL?$AAE?$AA?$AA@
  0007a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00080	33 c0		 xor	 eax, eax
$LN7@update_ref:

; 358  :         gc->gc.gc_refs = Py_REFCNT(FROM_GC(gc));

  00082	e8 00 00 00 00	 call	 _Py_PXCTX
  00087	85 c0		 test	 eax, eax
  00089	74 0b		 je	 SHORT $LN8@update_ref
  0008b	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR tv81[rsp], 0
  00094	eb 0e		 jmp	 SHORT $LN9@update_ref
$LN8@update_ref:
  00096	48 8b 44 24 20	 mov	 rax, QWORD PTR gc$[rsp]
  0009b	48 83 c0 18	 add	 rax, 24
  0009f	48 89 44 24 28	 mov	 QWORD PTR tv81[rsp], rax
$LN9@update_ref:
  000a4	48 8b 44 24 20	 mov	 rax, QWORD PTR gc$[rsp]
  000a9	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tv81[rsp]
  000ae	48 8b 49 50	 mov	 rcx, QWORD PTR [rcx+80]
  000b2	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 359  :         /* Python's cyclic gc should never see an incoming refcount
; 360  :          * of 0:  if something decref'ed to 0, it should have been
; 361  :          * deallocated immediately at that time.
; 362  :          * Possible cause (if the assert triggers):  a tp_dealloc
; 363  :          * routine left a gc-aware object tracked during its teardown
; 364  :          * phase, and did something-- or allowed something to happen --
; 365  :          * that called back into Python.  gc can trigger then, and may
; 366  :          * see the still-tracked dying object.  Before this assert
; 367  :          * was added, such mistakes went on to allow gc to try to
; 368  :          * delete the object again.  In a debug build, that caused
; 369  :          * a mysterious segfault, when _Py_ForgetReference tried
; 370  :          * to remove the object from the doubly-linked list of all
; 371  :          * objects a second time.  In a release build, an actual
; 372  :          * double deallocation occurred, which leads to corruption
; 373  :          * of the allocator's internal bookkeeping pointers.  That's
; 374  :          * so serious that maybe this should be a release-build
; 375  :          * check instead of an assert?
; 376  :          */
; 377  :         assert(gc->gc.gc_refs != 0);

  000b6	48 8b 44 24 20	 mov	 rax, QWORD PTR gc$[rsp]
  000bb	48 83 78 10 00	 cmp	 QWORD PTR [rax+16], 0
  000c0	75 1c		 jne	 SHORT $LN10@update_ref
  000c2	41 b8 79 01 00
	00		 mov	 r8d, 377		; 00000179H
  000c8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CM@JNCNOGAO@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAg?$AAc?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  000cf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CI@CDLMNG@?$AAg?$AAc?$AA?9?$AA?$DO?$AAg?$AAc?$AA?4?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$AA@
  000d6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000dc	33 c0		 xor	 eax, eax
$LN10@update_ref:

; 378  :     }

  000de	e9 5a ff ff ff	 jmp	 $LN2@update_ref
$LN1@update_ref:

; 379  : }

  000e3	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000e7	c3		 ret	 0
update_refs ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@FAJOAMOO@subtract_refs?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$subtract_refs DD imagerel subtract_refs
	DD	imagerel subtract_refs+204
	DD	imagerel $unwind$subtract_refs
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$subtract_refs DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0O@FAJOAMOO@subtract_refs?$AA@
CONST	SEGMENT
??_C@_0O@FAJOAMOO@subtract_refs?$AA@ DB 'subtract_refs', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT subtract_refs
_TEXT	SEGMENT
traverse$ = 32
gc$ = 40
tv74 = 48
tv83 = 56
containers$ = 80
subtract_refs PROC					; COMDAT

; 407  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 408  :     traverseproc traverse;
; 409  :     PyGC_Head *gc;
; 410  :     Py_GUARD

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	74 1c		 je	 SHORT $LN4@subtract_r
  00012	45 33 c9	 xor	 r9d, r9d
  00015	41 b8 9a 01 00
	00		 mov	 r8d, 410		; 0000019aH
  0001b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@FAJOAMOO@subtract_refs?$AA@
  00029	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN4@subtract_r:

; 411  :     gc = containers->gc.gc_next;

  0002e	48 8b 44 24 50	 mov	 rax, QWORD PTR containers$[rsp]
  00033	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00036	48 89 44 24 28	 mov	 QWORD PTR gc$[rsp], rax

; 412  :     for (; gc != containers; gc=gc->gc.gc_next) {

  0003b	eb 0d		 jmp	 SHORT $LN3@subtract_r
$LN2@subtract_r:
  0003d	48 8b 44 24 28	 mov	 rax, QWORD PTR gc$[rsp]
  00042	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00045	48 89 44 24 28	 mov	 QWORD PTR gc$[rsp], rax
$LN3@subtract_r:
  0004a	48 8b 44 24 50	 mov	 rax, QWORD PTR containers$[rsp]
  0004f	48 39 44 24 28	 cmp	 QWORD PTR gc$[rsp], rax
  00054	74 71		 je	 SHORT $LN1@subtract_r

; 413  :         traverse = Py_TYPE(FROM_GC(gc))->tp_traverse;

  00056	e8 00 00 00 00	 call	 _Py_PXCTX
  0005b	85 c0		 test	 eax, eax
  0005d	74 0b		 je	 SHORT $LN7@subtract_r
  0005f	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR tv74[rsp], 0
  00068	eb 0e		 jmp	 SHORT $LN8@subtract_r
$LN7@subtract_r:
  0006a	48 8b 44 24 28	 mov	 rax, QWORD PTR gc$[rsp]
  0006f	48 83 c0 18	 add	 rax, 24
  00073	48 89 44 24 30	 mov	 QWORD PTR tv74[rsp], rax
$LN8@subtract_r:
  00078	48 8b 44 24 30	 mov	 rax, QWORD PTR tv74[rsp]
  0007d	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00081	48 8b 80 10 01
	00 00		 mov	 rax, QWORD PTR [rax+272]
  00088	48 89 44 24 20	 mov	 QWORD PTR traverse$[rsp], rax

; 414  :         (void) traverse(FROM_GC(gc),
; 415  :                        (visitproc)visit_decref,
; 416  :                        NULL);

  0008d	e8 00 00 00 00	 call	 _Py_PXCTX
  00092	85 c0		 test	 eax, eax
  00094	74 0b		 je	 SHORT $LN9@subtract_r
  00096	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR tv83[rsp], 0
  0009f	eb 0e		 jmp	 SHORT $LN10@subtract_r
$LN9@subtract_r:
  000a1	48 8b 44 24 28	 mov	 rax, QWORD PTR gc$[rsp]
  000a6	48 83 c0 18	 add	 rax, 24
  000aa	48 89 44 24 38	 mov	 QWORD PTR tv83[rsp], rax
$LN10@subtract_r:
  000af	45 33 c0	 xor	 r8d, r8d
  000b2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:visit_decref
  000b9	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tv83[rsp]
  000be	ff 54 24 20	 call	 QWORD PTR traverse$[rsp]

; 417  :     }

  000c2	e9 76 ff ff ff	 jmp	 $LN2@subtract_r
$LN1@subtract_r:

; 418  : }

  000c7	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000cb	c3		 ret	 0
subtract_refs ENDP
_TEXT	ENDS
PUBLIC	??_C@_1BG@NCLOOGIL@?$AAo?$AAp?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ ; `string'
PUBLIC	??_C@_0N@HBMFHCDJ@visit_decref?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$visit_decref DD imagerel visit_decref
	DD	imagerel visit_decref+455
	DD	imagerel $unwind$visit_decref
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$visit_decref DD 010e01H
	DD	0a20eH
xdata	ENDS
;	COMDAT ??_C@_1BG@NCLOOGIL@?$AAo?$AAp?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
CONST	SEGMENT
??_C@_1BG@NCLOOGIL@?$AAo?$AAp?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ DB 'o'
	DB	00H, 'p', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, 'N', 00H
	DB	'U', 00H, 'L', 00H, 'L', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@HBMFHCDJ@visit_decref?$AA@
CONST	SEGMENT
??_C@_0N@HBMFHCDJ@visit_decref?$AA@ DB 'visit_decref', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT visit_decref
_TEXT	SEGMENT
gc$20485 = 48
tv132 = 56
tv88 = 60
tv86 = 64
tv130 = 68
tv142 = 72
op$ = 96
data$ = 104
visit_decref PROC					; COMDAT

; 384  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 385  :     Py_GUARD

  0000e	e8 00 00 00 00	 call	 _Py_PXCTX
  00013	85 c0		 test	 eax, eax
  00015	74 1c		 je	 SHORT $LN3@visit_decr
  00017	45 33 c9	 xor	 r9d, r9d
  0001a	41 b8 81 01 00
	00		 mov	 r8d, 385		; 00000181H
  00020	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00027	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@HBMFHCDJ@visit_decref?$AA@
  0002e	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@visit_decr:

; 386  :     assert(op != NULL);

  00033	48 83 7c 24 60
	00		 cmp	 QWORD PTR op$[rsp], 0
  00039	75 1c		 jne	 SHORT $LN6@visit_decr
  0003b	41 b8 82 01 00
	00		 mov	 r8d, 386		; 00000182H
  00041	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CM@JNCNOGAO@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAg?$AAc?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  00048	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BG@NCLOOGIL@?$AAo?$AAp?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
  0004f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00055	33 c0		 xor	 eax, eax
$LN6@visit_decr:

; 387  :     if (PyObject_IS_GC(op)) {

  00057	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0005f	4c 8b 4c 24 60	 mov	 r9, QWORD PTR op$[rsp]
  00064	41 b8 83 01 00
	00		 mov	 r8d, 387		; 00000183H
  0006a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00071	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@HBMFHCDJ@visit_decref?$AA@
  00078	e8 00 00 00 00	 call	 _PyParallel_Guard
  0007d	85 c0		 test	 eax, eax
  0007f	74 0d		 je	 SHORT $LN14@visit_decr
  00081	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv132[rsp], 0
  00089	e9 91 00 00 00	 jmp	 $LN15@visit_decr
$LN14@visit_decr:
  0008e	e8 00 00 00 00	 call	 _Py_PXCTX
  00093	85 c0		 test	 eax, eax
  00095	74 0a		 je	 SHORT $LN9@visit_decr
  00097	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR tv88[rsp], 0
  0009f	eb 32		 jmp	 SHORT $LN10@visit_decr
$LN9@visit_decr:
  000a1	48 8b 44 24 60	 mov	 rax, QWORD PTR op$[rsp]
  000a6	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000aa	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000b0	25 00 40 00 00	 and	 eax, 16384		; 00004000H
  000b5	85 c0		 test	 eax, eax
  000b7	74 0a		 je	 SHORT $LN7@visit_decr
  000b9	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv86[rsp], 1
  000c1	eb 08		 jmp	 SHORT $LN8@visit_decr
$LN7@visit_decr:
  000c3	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv86[rsp], 0
$LN8@visit_decr:
  000cb	8b 44 24 40	 mov	 eax, DWORD PTR tv86[rsp]
  000cf	89 44 24 3c	 mov	 DWORD PTR tv88[rsp], eax
$LN10@visit_decr:
  000d3	83 7c 24 3c 00	 cmp	 DWORD PTR tv88[rsp], 0
  000d8	74 35		 je	 SHORT $LN12@visit_decr
  000da	48 8b 44 24 60	 mov	 rax, QWORD PTR op$[rsp]
  000df	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000e3	48 83 b8 a0 01
	00 00 00	 cmp	 QWORD PTR [rax+416], 0
  000eb	74 18		 je	 SHORT $LN11@visit_decr
  000ed	48 8b 44 24 60	 mov	 rax, QWORD PTR op$[rsp]
  000f2	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000f6	48 8b 4c 24 60	 mov	 rcx, QWORD PTR op$[rsp]
  000fb	ff 90 a0 01 00
	00		 call	 QWORD PTR [rax+416]
  00101	85 c0		 test	 eax, eax
  00103	74 0a		 je	 SHORT $LN12@visit_decr
$LN11@visit_decr:
  00105	c7 44 24 44 01
	00 00 00	 mov	 DWORD PTR tv130[rsp], 1
  0010d	eb 08		 jmp	 SHORT $LN13@visit_decr
$LN12@visit_decr:
  0010f	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv130[rsp], 0
$LN13@visit_decr:
  00117	8b 44 24 44	 mov	 eax, DWORD PTR tv130[rsp]
  0011b	89 44 24 38	 mov	 DWORD PTR tv132[rsp], eax
$LN15@visit_decr:
  0011f	83 7c 24 38 00	 cmp	 DWORD PTR tv132[rsp], 0
  00124	0f 84 96 00 00
	00		 je	 $LN2@visit_decr

; 388  :         PyGC_Head *gc = AS_GC(op);

  0012a	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00132	4c 8b 4c 24 60	 mov	 r9, QWORD PTR op$[rsp]
  00137	41 b8 84 01 00
	00		 mov	 r8d, 388		; 00000184H
  0013d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00144	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@HBMFHCDJ@visit_decref?$AA@
  0014b	e8 00 00 00 00	 call	 _PyParallel_Guard
  00150	85 c0		 test	 eax, eax
  00152	74 0b		 je	 SHORT $LN16@visit_decr
  00154	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR tv142[rsp], 0
  0015d	eb 0e		 jmp	 SHORT $LN17@visit_decr
$LN16@visit_decr:
  0015f	48 8b 44 24 60	 mov	 rax, QWORD PTR op$[rsp]
  00164	48 83 e8 18	 sub	 rax, 24
  00168	48 89 44 24 48	 mov	 QWORD PTR tv142[rsp], rax
$LN17@visit_decr:
  0016d	48 8b 44 24 48	 mov	 rax, QWORD PTR tv142[rsp]
  00172	48 89 44 24 30	 mov	 QWORD PTR gc$20485[rsp], rax

; 389  :         /* We're only interested in gc_refs for objects in the
; 390  :          * generation being collected, which can be recognized
; 391  :          * because only they have positive gc_refs.
; 392  :          */
; 393  :         assert(gc->gc.gc_refs != 0); /* else refcount was too small */

  00177	48 8b 44 24 30	 mov	 rax, QWORD PTR gc$20485[rsp]
  0017c	48 83 78 10 00	 cmp	 QWORD PTR [rax+16], 0
  00181	75 1c		 jne	 SHORT $LN18@visit_decr
  00183	41 b8 89 01 00
	00		 mov	 r8d, 393		; 00000189H
  00189	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CM@JNCNOGAO@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAg?$AAc?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  00190	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CI@CDLMNG@?$AAg?$AAc?$AA?9?$AA?$DO?$AAg?$AAc?$AA?4?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$AA@
  00197	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0019d	33 c0		 xor	 eax, eax
$LN18@visit_decr:

; 394  :         if (gc->gc.gc_refs > 0)

  0019f	48 8b 44 24 30	 mov	 rax, QWORD PTR gc$20485[rsp]
  001a4	48 83 78 10 00	 cmp	 QWORD PTR [rax+16], 0
  001a9	7e 15		 jle	 SHORT $LN1@visit_decr

; 395  :             gc->gc.gc_refs--;

  001ab	48 8b 44 24 30	 mov	 rax, QWORD PTR gc$20485[rsp]
  001b0	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  001b4	48 ff c8	 dec	 rax
  001b7	48 8b 4c 24 30	 mov	 rcx, QWORD PTR gc$20485[rsp]
  001bc	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax
$LN1@visit_decr:
$LN2@visit_decr:

; 396  :     }
; 397  :     return 0;

  001c0	33 c0		 xor	 eax, eax

; 398  : }

  001c2	48 83 c4 58	 add	 rsp, 88			; 00000058H
  001c6	c3		 ret	 0
visit_decref ENDP
_TEXT	ENDS
PUBLIC	??_C@_1CG@PADNOMFJ@?$AAg?$AAc?$AA?9?$AA?$DO?$AAg?$AAc?$AA?4?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_0BB@JGEDHAJA@move_unreachable?$AA@	; `string'
EXTRN	_PyTuple_MaybeUntrack:PROC
EXTRN	PyTuple_Type:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$move_unreachable DD imagerel move_unreachable
	DD	imagerel move_unreachable+339
	DD	imagerel $unwind$move_unreachable
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$move_unreachable DD 010e01H
	DD	0a20eH
xdata	ENDS
;	COMDAT ??_C@_1CG@PADNOMFJ@?$AAg?$AAc?$AA?9?$AA?$DO?$AAg?$AAc?$AA?4?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1CG@PADNOMFJ@?$AAg?$AAc?$AA?9?$AA?$DO?$AAg?$AAc?$AA?4?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@ DB 'g'
	DB	00H, 'c', 00H, '-', 00H, '>', 00H, 'g', 00H, 'c', 00H, '.', 00H
	DB	'g', 00H, 'c', 00H, '_', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 's'
	DB	00H, ' ', 00H, '>', 00H, ' ', 00H, '0', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@JGEDHAJA@move_unreachable?$AA@
CONST	SEGMENT
??_C@_0BB@JGEDHAJA@move_unreachable?$AA@ DB 'move_unreachable', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT move_unreachable
_TEXT	SEGMENT
gc$ = 32
next$20546 = 40
traverse$20552 = 48
op$20548 = 56
tv76 = 64
young$ = 96
unreachable$ = 104
move_unreachable PROC					; COMDAT

; 474  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 475  :     PyGC_Head *gc;
; 476  :     Py_GUARD

  0000e	e8 00 00 00 00	 call	 _Py_PXCTX
  00013	85 c0		 test	 eax, eax
  00015	74 1c		 je	 SHORT $LN6@move_unrea
  00017	45 33 c9	 xor	 r9d, r9d
  0001a	41 b8 dc 01 00
	00		 mov	 r8d, 476		; 000001dcH
  00020	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00027	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@JGEDHAJA@move_unreachable?$AA@
  0002e	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN6@move_unrea:

; 477  :     gc = young->gc.gc_next;

  00033	48 8b 44 24 60	 mov	 rax, QWORD PTR young$[rsp]
  00038	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0003b	48 89 44 24 20	 mov	 QWORD PTR gc$[rsp], rax
$LN5@move_unrea:

; 478  : 
; 479  :     /* Invariants:  all objects "to the left" of us in young have gc_refs
; 480  :      * = GC_REACHABLE, and are indeed reachable (directly or indirectly)
; 481  :      * from outside the young list as it was at entry.  All other objects
; 482  :      * from the original young "to the left" of us are in unreachable now,
; 483  :      * and have gc_refs = GC_TENTATIVELY_UNREACHABLE.  All objects to the
; 484  :      * left of us in 'young' now have been scanned, and no objects here
; 485  :      * or to the right have been scanned yet.
; 486  :      */
; 487  : 
; 488  :     while (gc != young) {

  00040	48 8b 44 24 60	 mov	 rax, QWORD PTR young$[rsp]
  00045	48 39 44 24 20	 cmp	 QWORD PTR gc$[rsp], rax
  0004a	0f 84 fe 00 00
	00		 je	 $LN4@move_unrea

; 489  :         PyGC_Head *next;
; 490  : 
; 491  :         if (gc->gc.gc_refs) {

  00050	48 8b 44 24 20	 mov	 rax, QWORD PTR gc$[rsp]
  00055	48 83 78 10 00	 cmp	 QWORD PTR [rax+16], 0
  0005a	0f 84 b6 00 00
	00		 je	 $LN3@move_unrea

; 492  :             /* gc is definitely reachable from outside the
; 493  :              * original 'young'.  Mark it as such, and traverse
; 494  :              * its pointers to find any other objects that may
; 495  :              * be directly reachable from it.  Note that the
; 496  :              * call to tp_traverse may append objects to young,
; 497  :              * so we have to wait until it returns to determine
; 498  :              * the next object to visit.
; 499  :              */
; 500  :             PyObject *op = FROM_GC(gc);

  00060	e8 00 00 00 00	 call	 _Py_PXCTX
  00065	85 c0		 test	 eax, eax
  00067	74 0b		 je	 SHORT $LN9@move_unrea
  00069	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR tv76[rsp], 0
  00072	eb 0e		 jmp	 SHORT $LN10@move_unrea
$LN9@move_unrea:
  00074	48 8b 44 24 20	 mov	 rax, QWORD PTR gc$[rsp]
  00079	48 83 c0 18	 add	 rax, 24
  0007d	48 89 44 24 40	 mov	 QWORD PTR tv76[rsp], rax
$LN10@move_unrea:
  00082	48 8b 44 24 40	 mov	 rax, QWORD PTR tv76[rsp]
  00087	48 89 44 24 38	 mov	 QWORD PTR op$20548[rsp], rax

; 501  :             traverseproc traverse = Py_TYPE(op)->tp_traverse;

  0008c	48 8b 44 24 38	 mov	 rax, QWORD PTR op$20548[rsp]
  00091	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00095	48 8b 80 10 01
	00 00		 mov	 rax, QWORD PTR [rax+272]
  0009c	48 89 44 24 30	 mov	 QWORD PTR traverse$20552[rsp], rax

; 502  :             assert(gc->gc.gc_refs > 0);

  000a1	48 8b 44 24 20	 mov	 rax, QWORD PTR gc$[rsp]
  000a6	48 83 78 10 00	 cmp	 QWORD PTR [rax+16], 0
  000ab	7f 1c		 jg	 SHORT $LN11@move_unrea
  000ad	41 b8 f6 01 00
	00		 mov	 r8d, 502		; 000001f6H
  000b3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CM@JNCNOGAO@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAg?$AAc?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  000ba	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@PADNOMFJ@?$AAg?$AAc?$AA?9?$AA?$DO?$AAg?$AAc?$AA?4?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?$AA@
  000c1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000c7	33 c0		 xor	 eax, eax
$LN11@move_unrea:

; 503  :             gc->gc.gc_refs = GC_REACHABLE;

  000c9	48 8b 44 24 20	 mov	 rax, QWORD PTR gc$[rsp]
  000ce	48 c7 40 10 fd
	ff ff ff	 mov	 QWORD PTR [rax+16], -3

; 504  :             (void) traverse(op,
; 505  :                             (visitproc)visit_reachable,
; 506  :                             (void *)young);

  000d6	4c 8b 44 24 60	 mov	 r8, QWORD PTR young$[rsp]
  000db	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:visit_reachable
  000e2	48 8b 4c 24 38	 mov	 rcx, QWORD PTR op$20548[rsp]
  000e7	ff 54 24 30	 call	 QWORD PTR traverse$20552[rsp]

; 507  :             next = gc->gc.gc_next;

  000eb	48 8b 44 24 20	 mov	 rax, QWORD PTR gc$[rsp]
  000f0	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000f3	48 89 44 24 28	 mov	 QWORD PTR next$20546[rsp], rax

; 508  :             if (PyTuple_CheckExact(op)) {

  000f8	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyTuple_Type
  000ff	48 8b 4c 24 38	 mov	 rcx, QWORD PTR op$20548[rsp]
  00104	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00108	75 0a		 jne	 SHORT $LN2@move_unrea

; 509  :                 _PyTuple_MaybeUntrack(op);

  0010a	48 8b 4c 24 38	 mov	 rcx, QWORD PTR op$20548[rsp]
  0010f	e8 00 00 00 00	 call	 _PyTuple_MaybeUntrack
$LN2@move_unrea:

; 510  :             }
; 511  :         }
; 512  :         else {

  00114	eb 29		 jmp	 SHORT $LN1@move_unrea
$LN3@move_unrea:

; 513  :             /* This *may* be unreachable.  To make progress,
; 514  :              * assume it is.  gc isn't directly reachable from
; 515  :              * any object we've already traversed, but may be
; 516  :              * reachable from an object we haven't gotten to yet.
; 517  :              * visit_reachable will eventually move gc back into
; 518  :              * young if that's so, and we'll see it again.
; 519  :              */
; 520  :             next = gc->gc.gc_next;

  00116	48 8b 44 24 20	 mov	 rax, QWORD PTR gc$[rsp]
  0011b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0011e	48 89 44 24 28	 mov	 QWORD PTR next$20546[rsp], rax

; 521  :             gc_list_move(gc, unreachable);

  00123	48 8b 54 24 68	 mov	 rdx, QWORD PTR unreachable$[rsp]
  00128	48 8b 4c 24 20	 mov	 rcx, QWORD PTR gc$[rsp]
  0012d	e8 00 00 00 00	 call	 gc_list_move

; 522  :             gc->gc.gc_refs = GC_TENTATIVELY_UNREACHABLE;

  00132	48 8b 44 24 20	 mov	 rax, QWORD PTR gc$[rsp]
  00137	48 c7 40 10 fc
	ff ff ff	 mov	 QWORD PTR [rax+16], -4
$LN1@move_unrea:

; 523  :         }
; 524  :         gc = next;

  0013f	48 8b 44 24 28	 mov	 rax, QWORD PTR next$20546[rsp]
  00144	48 89 44 24 20	 mov	 QWORD PTR gc$[rsp], rax

; 525  :     }

  00149	e9 f2 fe ff ff	 jmp	 $LN5@move_unrea
$LN4@move_unrea:

; 526  : }

  0014e	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00152	c3		 ret	 0
move_unreachable ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@IBKLCGKA@gc_list_move?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$gc_list_move DD imagerel gc_list_move
	DD	imagerel gc_list_move+182
	DD	imagerel $unwind$gc_list_move
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gc_list_move DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_0N@IBKLCGKA@gc_list_move?$AA@
CONST	SEGMENT
??_C@_0N@IBKLCGKA@gc_list_move?$AA@ DB 'gc_list_move', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT gc_list_move
_TEXT	SEGMENT
current_next$ = 32
new_prev$ = 40
current_prev$ = 48
node$ = 80
list$ = 88
gc_list_move PROC					; COMDAT

; 279  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 280  :     PyGC_Head *new_prev;
; 281  :     PyGC_Head *current_prev;
; 282  :     PyGC_Head *current_next;
; 283  :     Py_GUARD

  0000e	e8 00 00 00 00	 call	 _Py_PXCTX
  00013	85 c0		 test	 eax, eax
  00015	74 1c		 je	 SHORT $LN1@gc_list_mo
  00017	45 33 c9	 xor	 r9d, r9d
  0001a	41 b8 1b 01 00
	00		 mov	 r8d, 283		; 0000011bH
  00020	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00027	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@IBKLCGKA@gc_list_move?$AA@
  0002e	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN1@gc_list_mo:

; 284  :     current_prev = node->gc.gc_prev;

  00033	48 8b 44 24 50	 mov	 rax, QWORD PTR node$[rsp]
  00038	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0003c	48 89 44 24 30	 mov	 QWORD PTR current_prev$[rsp], rax

; 285  :     current_next = node->gc.gc_next;

  00041	48 8b 44 24 50	 mov	 rax, QWORD PTR node$[rsp]
  00046	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00049	48 89 44 24 20	 mov	 QWORD PTR current_next$[rsp], rax

; 286  :     /* Unlink from current list. */
; 287  :     current_prev->gc.gc_next = current_next;

  0004e	48 8b 44 24 30	 mov	 rax, QWORD PTR current_prev$[rsp]
  00053	48 8b 4c 24 20	 mov	 rcx, QWORD PTR current_next$[rsp]
  00058	48 89 08	 mov	 QWORD PTR [rax], rcx

; 288  :     current_next->gc.gc_prev = current_prev;

  0005b	48 8b 44 24 20	 mov	 rax, QWORD PTR current_next$[rsp]
  00060	48 8b 4c 24 30	 mov	 rcx, QWORD PTR current_prev$[rsp]
  00065	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 289  :     /* Relink at end of new list. */
; 290  :     new_prev = node->gc.gc_prev = list->gc.gc_prev;

  00069	48 8b 44 24 50	 mov	 rax, QWORD PTR node$[rsp]
  0006e	48 8b 4c 24 58	 mov	 rcx, QWORD PTR list$[rsp]
  00073	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00077	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  0007b	48 8b 44 24 50	 mov	 rax, QWORD PTR node$[rsp]
  00080	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00084	48 89 44 24 28	 mov	 QWORD PTR new_prev$[rsp], rax

; 291  :     new_prev->gc.gc_next = list->gc.gc_prev = node;

  00089	48 8b 44 24 58	 mov	 rax, QWORD PTR list$[rsp]
  0008e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR node$[rsp]
  00093	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  00097	48 8b 44 24 28	 mov	 rax, QWORD PTR new_prev$[rsp]
  0009c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR node$[rsp]
  000a1	48 89 08	 mov	 QWORD PTR [rax], rcx

; 292  :     node->gc.gc_next = list;

  000a4	48 8b 44 24 50	 mov	 rax, QWORD PTR node$[rsp]
  000a9	48 8b 4c 24 58	 mov	 rcx, QWORD PTR list$[rsp]
  000ae	48 89 08	 mov	 QWORD PTR [rax], rcx

; 293  : }

  000b1	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000b5	c3		 ret	 0
gc_list_move ENDP
_TEXT	ENDS
PUBLIC	??_C@_1IE@CLHKIOJA@?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAG?$AAC?$AA_?$AAR?$AAE?$AAA@ ; `string'
PUBLIC	??_C@_0BA@LCFHMPGN@visit_reachable?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$visit_reachable DD imagerel visit_reachable
	DD	imagerel visit_reachable+473
	DD	imagerel $unwind$visit_reachable
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$visit_reachable DD 010e01H
	DD	0c20eH
xdata	ENDS
;	COMDAT ??_C@_1IE@CLHKIOJA@?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAG?$AAC?$AA_?$AAR?$AAE?$AAA@
CONST	SEGMENT
??_C@_1IE@CLHKIOJA@?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAG?$AAC?$AA_?$AAR?$AAE?$AAA@ DB 'g'
	DB	00H, 'c', 00H, '_', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 's', 00H
	DB	' ', 00H, '>', 00H, ' ', 00H, '0', 00H, ' ', 00H, '|', 00H, '|'
	DB	00H, ' ', 00H, 'g', 00H, 'c', 00H, '_', 00H, 'r', 00H, 'e', 00H
	DB	'f', 00H, 's', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'G'
	DB	00H, 'C', 00H, '_', 00H, 'R', 00H, 'E', 00H, 'A', 00H, 'C', 00H
	DB	'H', 00H, 'A', 00H, 'B', 00H, 'L', 00H, 'E', 00H, ' ', 00H, '|'
	DB	00H, '|', 00H, ' ', 00H, 'g', 00H, 'c', 00H, '_', 00H, 'r', 00H
	DB	'e', 00H, 'f', 00H, 's', 00H, ' ', 00H, '=', 00H, '=', 00H, ' '
	DB	00H, 'G', 00H, 'C', 00H, '_', 00H, 'U', 00H, 'N', 00H, 'T', 00H
	DB	'R', 00H, 'A', 00H, 'C', 00H, 'K', 00H, 'E', 00H, 'D', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@LCFHMPGN@visit_reachable?$AA@
CONST	SEGMENT
??_C@_0BA@LCFHMPGN@visit_reachable?$AA@ DB 'visit_reachable', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT visit_reachable
_TEXT	SEGMENT
gc$20524 = 48
gc_refs$20527 = 56
tv95 = 64
tv83 = 68
tv81 = 72
tv93 = 76
tv137 = 80
op$ = 112
reachable$ = 120
visit_reachable PROC					; COMDAT

; 423  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 424  :     Py_GUARD

  0000e	e8 00 00 00 00	 call	 _Py_PXCTX
  00013	85 c0		 test	 eax, eax
  00015	74 1c		 je	 SHORT $LN6@visit_reac
  00017	45 33 c9	 xor	 r9d, r9d
  0001a	41 b8 a8 01 00
	00		 mov	 r8d, 424		; 000001a8H
  00020	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00027	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@LCFHMPGN@visit_reachable?$AA@
  0002e	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN6@visit_reac:

; 425  :     if (PyObject_IS_GC(op)) {

  00033	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0003b	4c 8b 4c 24 70	 mov	 r9, QWORD PTR op$[rsp]
  00040	41 b8 a9 01 00
	00		 mov	 r8d, 425		; 000001a9H
  00046	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  0004d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@LCFHMPGN@visit_reachable?$AA@
  00054	e8 00 00 00 00	 call	 _PyParallel_Guard
  00059	85 c0		 test	 eax, eax
  0005b	74 0d		 je	 SHORT $LN16@visit_reac
  0005d	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv95[rsp], 0
  00065	e9 91 00 00 00	 jmp	 $LN17@visit_reac
$LN16@visit_reac:
  0006a	e8 00 00 00 00	 call	 _Py_PXCTX
  0006f	85 c0		 test	 eax, eax
  00071	74 0a		 je	 SHORT $LN11@visit_reac
  00073	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv83[rsp], 0
  0007b	eb 32		 jmp	 SHORT $LN12@visit_reac
$LN11@visit_reac:
  0007d	48 8b 44 24 70	 mov	 rax, QWORD PTR op$[rsp]
  00082	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00086	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0008c	25 00 40 00 00	 and	 eax, 16384		; 00004000H
  00091	85 c0		 test	 eax, eax
  00093	74 0a		 je	 SHORT $LN9@visit_reac
  00095	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv81[rsp], 1
  0009d	eb 08		 jmp	 SHORT $LN10@visit_reac
$LN9@visit_reac:
  0009f	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv81[rsp], 0
$LN10@visit_reac:
  000a7	8b 44 24 48	 mov	 eax, DWORD PTR tv81[rsp]
  000ab	89 44 24 44	 mov	 DWORD PTR tv83[rsp], eax
$LN12@visit_reac:
  000af	83 7c 24 44 00	 cmp	 DWORD PTR tv83[rsp], 0
  000b4	74 35		 je	 SHORT $LN14@visit_reac
  000b6	48 8b 44 24 70	 mov	 rax, QWORD PTR op$[rsp]
  000bb	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000bf	48 83 b8 a0 01
	00 00 00	 cmp	 QWORD PTR [rax+416], 0
  000c7	74 18		 je	 SHORT $LN13@visit_reac
  000c9	48 8b 44 24 70	 mov	 rax, QWORD PTR op$[rsp]
  000ce	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000d2	48 8b 4c 24 70	 mov	 rcx, QWORD PTR op$[rsp]
  000d7	ff 90 a0 01 00
	00		 call	 QWORD PTR [rax+416]
  000dd	85 c0		 test	 eax, eax
  000df	74 0a		 je	 SHORT $LN14@visit_reac
$LN13@visit_reac:
  000e1	c7 44 24 4c 01
	00 00 00	 mov	 DWORD PTR tv93[rsp], 1
  000e9	eb 08		 jmp	 SHORT $LN15@visit_reac
$LN14@visit_reac:
  000eb	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR tv93[rsp], 0
$LN15@visit_reac:
  000f3	8b 44 24 4c	 mov	 eax, DWORD PTR tv93[rsp]
  000f7	89 44 24 40	 mov	 DWORD PTR tv95[rsp], eax
$LN17@visit_reac:
  000fb	83 7c 24 40 00	 cmp	 DWORD PTR tv95[rsp], 0
  00100	0f 84 cc 00 00
	00		 je	 $LN5@visit_reac

; 426  :         PyGC_Head *gc = AS_GC(op);

  00106	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0010e	4c 8b 4c 24 70	 mov	 r9, QWORD PTR op$[rsp]
  00113	41 b8 aa 01 00
	00		 mov	 r8d, 426		; 000001aaH
  00119	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00120	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@LCFHMPGN@visit_reachable?$AA@
  00127	e8 00 00 00 00	 call	 _PyParallel_Guard
  0012c	85 c0		 test	 eax, eax
  0012e	74 0b		 je	 SHORT $LN18@visit_reac
  00130	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR tv137[rsp], 0
  00139	eb 0e		 jmp	 SHORT $LN19@visit_reac
$LN18@visit_reac:
  0013b	48 8b 44 24 70	 mov	 rax, QWORD PTR op$[rsp]
  00140	48 83 e8 18	 sub	 rax, 24
  00144	48 89 44 24 50	 mov	 QWORD PTR tv137[rsp], rax
$LN19@visit_reac:
  00149	48 8b 44 24 50	 mov	 rax, QWORD PTR tv137[rsp]
  0014e	48 89 44 24 30	 mov	 QWORD PTR gc$20524[rsp], rax

; 427  :         const Py_ssize_t gc_refs = gc->gc.gc_refs;

  00153	48 8b 44 24 30	 mov	 rax, QWORD PTR gc$20524[rsp]
  00158	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0015c	48 89 44 24 38	 mov	 QWORD PTR gc_refs$20527[rsp], rax

; 428  : 
; 429  :         if (gc_refs == 0) {

  00161	48 83 7c 24 38
	00		 cmp	 QWORD PTR gc_refs$20527[rsp], 0
  00167	75 0f		 jne	 SHORT $LN4@visit_reac

; 430  :             /* This is in move_unreachable's 'young' list, but
; 431  :              * the traversal hasn't yet gotten to it.  All
; 432  :              * we need to do is tell move_unreachable that it's
; 433  :              * reachable.
; 434  :              */
; 435  :             gc->gc.gc_refs = 1;

  00169	48 8b 44 24 30	 mov	 rax, QWORD PTR gc$20524[rsp]
  0016e	48 c7 40 10 01
	00 00 00	 mov	 QWORD PTR [rax+16], 1
  00176	eb 5a		 jmp	 SHORT $LN3@visit_reac
$LN4@visit_reac:

; 436  :         }
; 437  :         else if (gc_refs == GC_TENTATIVELY_UNREACHABLE) {

  00178	48 83 7c 24 38
	fc		 cmp	 QWORD PTR gc_refs$20527[rsp], -4
  0017e	75 1e		 jne	 SHORT $LN2@visit_reac

; 438  :             /* This had gc_refs = 0 when move_unreachable got
; 439  :              * to it, but turns out it's reachable after all.
; 440  :              * Move it back to move_unreachable's 'young' list,
; 441  :              * and move_unreachable will eventually get to it
; 442  :              * again.
; 443  :              */
; 444  :             gc_list_move(gc, reachable);

  00180	48 8b 54 24 78	 mov	 rdx, QWORD PTR reachable$[rsp]
  00185	48 8b 4c 24 30	 mov	 rcx, QWORD PTR gc$20524[rsp]
  0018a	e8 00 00 00 00	 call	 gc_list_move

; 445  :             gc->gc.gc_refs = 1;

  0018f	48 8b 44 24 30	 mov	 rax, QWORD PTR gc$20524[rsp]
  00194	48 c7 40 10 01
	00 00 00	 mov	 QWORD PTR [rax+16], 1

; 446  :         }
; 447  :         /* Else there's nothing to do.
; 448  :          * If gc_refs > 0, it must be in move_unreachable's 'young'
; 449  :          * list, and move_unreachable will eventually get to it.
; 450  :          * If gc_refs == GC_REACHABLE, it's either in some other
; 451  :          * generation so we don't care about it, or move_unreachable
; 452  :          * already dealt with it.
; 453  :          * If gc_refs == GC_UNTRACKED, it must be ignored.
; 454  :          */
; 455  :          else {

  0019c	eb 34		 jmp	 SHORT $LN1@visit_reac
$LN2@visit_reac:

; 456  :             assert(gc_refs > 0
; 457  :                    || gc_refs == GC_REACHABLE
; 458  :                    || gc_refs == GC_UNTRACKED);

  0019e	48 83 7c 24 38
	00		 cmp	 QWORD PTR gc_refs$20527[rsp], 0
  001a4	7f 2c		 jg	 SHORT $LN20@visit_reac
  001a6	48 83 7c 24 38
	fd		 cmp	 QWORD PTR gc_refs$20527[rsp], -3
  001ac	74 24		 je	 SHORT $LN20@visit_reac
  001ae	48 83 7c 24 38
	fe		 cmp	 QWORD PTR gc_refs$20527[rsp], -2
  001b4	74 1c		 je	 SHORT $LN20@visit_reac
  001b6	41 b8 ca 01 00
	00		 mov	 r8d, 458		; 000001caH
  001bc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CM@JNCNOGAO@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAg?$AAc?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  001c3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1IE@CLHKIOJA@?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$DO?$AA?5?$AA0?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAG?$AAC?$AA_?$AAR?$AAE?$AAA@
  001ca	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001d0	33 c0		 xor	 eax, eax
$LN20@visit_reac:
$LN1@visit_reac:
$LN3@visit_reac:
$LN5@visit_reac:

; 459  :          }
; 460  :     }
; 461  :     return 0;

  001d2	33 c0		 xor	 eax, eax

; 462  : }

  001d4	48 83 c4 68	 add	 rsp, 104		; 00000068H
  001d8	c3		 ret	 0
visit_reachable ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@EPHGMBPP@untrack_dicts?$AA@		; `string'
EXTRN	_PyDict_MaybeUntrack:PROC
EXTRN	PyDict_Type:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$untrack_dicts DD imagerel untrack_dicts
	DD	imagerel untrack_dicts+191
	DD	imagerel $unwind$untrack_dicts
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$untrack_dicts DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0O@EPHGMBPP@untrack_dicts?$AA@
CONST	SEGMENT
??_C@_0O@EPHGMBPP@untrack_dicts?$AA@ DB 'untrack_dicts', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT untrack_dicts
_TEXT	SEGMENT
next$ = 32
gc$ = 40
op$20573 = 48
tv74 = 56
head$ = 80
untrack_dicts PROC					; COMDAT

; 531  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 532  :     PyGC_Head *next, *gc;
; 533  :     Py_GUARD

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	74 1c		 je	 SHORT $LN5@untrack_di
  00012	45 33 c9	 xor	 r9d, r9d
  00015	41 b8 15 02 00
	00		 mov	 r8d, 533		; 00000215H
  0001b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@EPHGMBPP@untrack_dicts?$AA@
  00029	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN5@untrack_di:

; 534  :     gc = head->gc.gc_next;

  0002e	48 8b 44 24 50	 mov	 rax, QWORD PTR head$[rsp]
  00033	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00036	48 89 44 24 28	 mov	 QWORD PTR gc$[rsp], rax
$LN4@untrack_di:

; 535  :     while (gc != head) {

  0003b	48 8b 44 24 50	 mov	 rax, QWORD PTR head$[rsp]
  00040	48 39 44 24 28	 cmp	 QWORD PTR gc$[rsp], rax
  00045	74 73		 je	 SHORT $LN3@untrack_di

; 536  :         PyObject *op = FROM_GC(gc);

  00047	e8 00 00 00 00	 call	 _Py_PXCTX
  0004c	85 c0		 test	 eax, eax
  0004e	74 0b		 je	 SHORT $LN8@untrack_di
  00050	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR tv74[rsp], 0
  00059	eb 0e		 jmp	 SHORT $LN9@untrack_di
$LN8@untrack_di:
  0005b	48 8b 44 24 28	 mov	 rax, QWORD PTR gc$[rsp]
  00060	48 83 c0 18	 add	 rax, 24
  00064	48 89 44 24 38	 mov	 QWORD PTR tv74[rsp], rax
$LN9@untrack_di:
  00069	48 8b 44 24 38	 mov	 rax, QWORD PTR tv74[rsp]
  0006e	48 89 44 24 30	 mov	 QWORD PTR op$20573[rsp], rax

; 537  :         next = gc->gc.gc_next;

  00073	48 8b 44 24 28	 mov	 rax, QWORD PTR gc$[rsp]
  00078	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0007b	48 89 44 24 20	 mov	 QWORD PTR next$[rsp], rax

; 538  :         if (PyDict_CheckExact(op))

  00080	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyDict_Type
  00087	48 8b 4c 24 30	 mov	 rcx, QWORD PTR op$20573[rsp]
  0008c	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00090	74 12		 je	 SHORT $LN1@untrack_di
  00092	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyDict_Type
  00099	48 8b 4c 24 30	 mov	 rcx, QWORD PTR op$20573[rsp]
  0009e	48 39 41 38	 cmp	 QWORD PTR [rcx+56], rax
  000a2	75 0a		 jne	 SHORT $LN2@untrack_di
$LN1@untrack_di:

; 539  :             _PyDict_MaybeUntrack(op);

  000a4	48 8b 4c 24 30	 mov	 rcx, QWORD PTR op$20573[rsp]
  000a9	e8 00 00 00 00	 call	 _PyDict_MaybeUntrack
$LN2@untrack_di:

; 540  :         gc = next;

  000ae	48 8b 44 24 20	 mov	 rax, QWORD PTR next$[rsp]
  000b3	48 89 44 24 28	 mov	 QWORD PTR gc$[rsp], rax

; 541  :     }

  000b8	eb 81		 jmp	 SHORT $LN4@untrack_di
$LN3@untrack_di:

; 542  : }

  000ba	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000be	c3		 ret	 0
untrack_dicts ENDP
_TEXT	ENDS
PUBLIC	??_C@_1DO@IMBHLDDA@?$AAI?$AAS?$AA_?$AAT?$AAE?$AAN?$AAT?$AAA?$AAT?$AAI?$AAV?$AAE?$AAL?$AAY?$AA_?$AAU?$AAN?$AAR?$AAE?$AAA?$AAC?$AAH?$AAA?$AAB?$AAL?$AAE?$AA?$CI?$AAo?$AAp?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_0BA@OIAEDBEM@move_finalizers?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$move_finalizers DD imagerel move_finalizers
	DD	imagerel move_finalizers+308
	DD	imagerel $unwind$move_finalizers
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$move_finalizers DD 010e01H
	DD	0c20eH
xdata	ENDS
;	COMDAT ??_C@_1DO@IMBHLDDA@?$AAI?$AAS?$AA_?$AAT?$AAE?$AAN?$AAT?$AAA?$AAT?$AAI?$AAV?$AAE?$AAL?$AAY?$AA_?$AAU?$AAN?$AAR?$AAE?$AAA?$AAC?$AAH?$AAA?$AAB?$AAL?$AAE?$AA?$CI?$AAo?$AAp?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DO@IMBHLDDA@?$AAI?$AAS?$AA_?$AAT?$AAE?$AAN?$AAT?$AAA?$AAT?$AAI?$AAV?$AAE?$AAL?$AAY?$AA_?$AAU?$AAN?$AAR?$AAE?$AAA?$AAC?$AAH?$AAA?$AAB?$AAL?$AAE?$AA?$CI?$AAo?$AAp?$AA?$CJ?$AA?$AA@ DB 'I'
	DB	00H, 'S', 00H, '_', 00H, 'T', 00H, 'E', 00H, 'N', 00H, 'T', 00H
	DB	'A', 00H, 'T', 00H, 'I', 00H, 'V', 00H, 'E', 00H, 'L', 00H, 'Y'
	DB	00H, '_', 00H, 'U', 00H, 'N', 00H, 'R', 00H, 'E', 00H, 'A', 00H
	DB	'C', 00H, 'H', 00H, 'A', 00H, 'B', 00H, 'L', 00H, 'E', 00H, '('
	DB	00H, 'o', 00H, 'p', 00H, ')', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@OIAEDBEM@move_finalizers?$AA@
CONST	SEGMENT
??_C@_0BA@OIAEDBEM@move_finalizers?$AA@ DB 'move_finalizers', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT move_finalizers
_TEXT	SEGMENT
next$ = 48
gc$ = 56
op$20605 = 64
tv74 = 72
tv83 = 80
unreachable$ = 112
finalizers$ = 120
move_finalizers PROC					; COMDAT

; 561  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 562  :     PyGC_Head *gc;
; 563  :     PyGC_Head *next;
; 564  :     Py_GUARD

  0000e	e8 00 00 00 00	 call	 _Py_PXCTX
  00013	85 c0		 test	 eax, eax
  00015	74 1c		 je	 SHORT $LN5@move_final
  00017	45 33 c9	 xor	 r9d, r9d
  0001a	41 b8 34 02 00
	00		 mov	 r8d, 564		; 00000234H
  00020	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00027	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@OIAEDBEM@move_finalizers?$AA@
  0002e	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN5@move_final:

; 565  : 
; 566  :     /* March over unreachable.  Move objects with finalizers into
; 567  :      * `finalizers`.
; 568  :      */
; 569  :     for (gc = unreachable->gc.gc_next; gc != unreachable; gc = next) {

  00033	48 8b 44 24 70	 mov	 rax, QWORD PTR unreachable$[rsp]
  00038	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0003b	48 89 44 24 38	 mov	 QWORD PTR gc$[rsp], rax
  00040	eb 0a		 jmp	 SHORT $LN4@move_final
$LN3@move_final:
  00042	48 8b 44 24 30	 mov	 rax, QWORD PTR next$[rsp]
  00047	48 89 44 24 38	 mov	 QWORD PTR gc$[rsp], rax
$LN4@move_final:
  0004c	48 8b 44 24 70	 mov	 rax, QWORD PTR unreachable$[rsp]
  00051	48 39 44 24 38	 cmp	 QWORD PTR gc$[rsp], rax
  00056	0f 84 d3 00 00
	00		 je	 $LN2@move_final

; 570  :         PyObject *op = FROM_GC(gc);

  0005c	e8 00 00 00 00	 call	 _Py_PXCTX
  00061	85 c0		 test	 eax, eax
  00063	74 0b		 je	 SHORT $LN8@move_final
  00065	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR tv74[rsp], 0
  0006e	eb 0e		 jmp	 SHORT $LN9@move_final
$LN8@move_final:
  00070	48 8b 44 24 38	 mov	 rax, QWORD PTR gc$[rsp]
  00075	48 83 c0 18	 add	 rax, 24
  00079	48 89 44 24 48	 mov	 QWORD PTR tv74[rsp], rax
$LN9@move_final:
  0007e	48 8b 44 24 48	 mov	 rax, QWORD PTR tv74[rsp]
  00083	48 89 44 24 40	 mov	 QWORD PTR op$20605[rsp], rax

; 571  : 
; 572  :         assert(IS_TENTATIVELY_UNREACHABLE(op));

  00088	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00090	4c 8b 4c 24 40	 mov	 r9, QWORD PTR op$20605[rsp]
  00095	41 b8 3c 02 00
	00		 mov	 r8d, 572		; 0000023cH
  0009b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  000a2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@OIAEDBEM@move_finalizers?$AA@
  000a9	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ae	85 c0		 test	 eax, eax
  000b0	74 0b		 je	 SHORT $LN10@move_final
  000b2	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR tv83[rsp], 0
  000bb	eb 0e		 jmp	 SHORT $LN11@move_final
$LN10@move_final:
  000bd	48 8b 44 24 40	 mov	 rax, QWORD PTR op$20605[rsp]
  000c2	48 83 e8 18	 sub	 rax, 24
  000c6	48 89 44 24 50	 mov	 QWORD PTR tv83[rsp], rax
$LN11@move_final:
  000cb	48 8b 44 24 50	 mov	 rax, QWORD PTR tv83[rsp]
  000d0	48 83 78 10 fc	 cmp	 QWORD PTR [rax+16], -4
  000d5	74 1c		 je	 SHORT $LN12@move_final
  000d7	41 b8 3c 02 00
	00		 mov	 r8d, 572		; 0000023cH
  000dd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CM@JNCNOGAO@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAg?$AAc?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  000e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@IMBHLDDA@?$AAI?$AAS?$AA_?$AAT?$AAE?$AAN?$AAT?$AAA?$AAT?$AAI?$AAV?$AAE?$AAL?$AAY?$AA_?$AAU?$AAN?$AAR?$AAE?$AAA?$AAC?$AAH?$AAA?$AAB?$AAL?$AAE?$AA?$CI?$AAo?$AAp?$AA?$CJ?$AA?$AA@
  000eb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000f1	33 c0		 xor	 eax, eax
$LN12@move_final:

; 573  :         next = gc->gc.gc_next;

  000f3	48 8b 44 24 38	 mov	 rax, QWORD PTR gc$[rsp]
  000f8	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000fb	48 89 44 24 30	 mov	 QWORD PTR next$[rsp], rax

; 574  : 
; 575  :         if (has_finalizer(op)) {

  00100	48 8b 4c 24 40	 mov	 rcx, QWORD PTR op$20605[rsp]
  00105	e8 00 00 00 00	 call	 has_finalizer
  0010a	85 c0		 test	 eax, eax
  0010c	74 1c		 je	 SHORT $LN1@move_final

; 576  :             gc_list_move(gc, finalizers);

  0010e	48 8b 54 24 78	 mov	 rdx, QWORD PTR finalizers$[rsp]
  00113	48 8b 4c 24 38	 mov	 rcx, QWORD PTR gc$[rsp]
  00118	e8 00 00 00 00	 call	 gc_list_move

; 577  :             gc->gc.gc_refs = GC_REACHABLE;

  0011d	48 8b 44 24 38	 mov	 rax, QWORD PTR gc$[rsp]
  00122	48 c7 40 10 fd
	ff ff ff	 mov	 QWORD PTR [rax+16], -3
$LN1@move_final:

; 578  :         }
; 579  :     }

  0012a	e9 13 ff ff ff	 jmp	 $LN3@move_final
$LN2@move_final:

; 580  : }

  0012f	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00133	c3		 ret	 0
move_finalizers ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@ICCNFAFA@has_finalizer?$AA@		; `string'
EXTRN	PyGen_NeedsFinalizing:PROC
EXTRN	PyGen_Type:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$has_finalizer DD imagerel has_finalizer
	DD	imagerel has_finalizer+124
	DD	imagerel $unwind$has_finalizer
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$has_finalizer DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0O@ICCNFAFA@has_finalizer?$AA@
CONST	SEGMENT
??_C@_0O@ICCNFAFA@has_finalizer?$AA@ DB 'has_finalizer', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT has_finalizer
_TEXT	SEGMENT
tv77 = 32
op$ = 64
has_finalizer PROC					; COMDAT

; 547  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 548  :     Py_GUARD

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	74 1c		 je	 SHORT $LN3@has_finali
  00012	45 33 c9	 xor	 r9d, r9d
  00015	41 b8 24 02 00
	00		 mov	 r8d, 548		; 00000224H
  0001b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@ICCNFAFA@has_finalizer?$AA@
  00029	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@has_finali:

; 549  :     if (PyGen_CheckExact(op))

  0002e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyGen_Type
  00035	48 8b 4c 24 40	 mov	 rcx, QWORD PTR op$[rsp]
  0003a	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0003e	75 0e		 jne	 SHORT $LN2@has_finali

; 550  :         return PyGen_NeedsFinalizing((PyGenObject *)op);

  00040	48 8b 4c 24 40	 mov	 rcx, QWORD PTR op$[rsp]
  00045	e8 00 00 00 00	 call	 PyGen_NeedsFinalizing
  0004a	eb 2b		 jmp	 SHORT $LN4@has_finali

; 551  :     else

  0004c	eb 29		 jmp	 SHORT $LN1@has_finali
$LN2@has_finali:

; 552  :         return op->ob_type->tp_del != NULL;

  0004e	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  00053	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00057	48 83 b8 d0 01
	00 00 00	 cmp	 QWORD PTR [rax+464], 0
  0005f	74 0a		 je	 SHORT $LN6@has_finali
  00061	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv77[rsp], 1
  00069	eb 08		 jmp	 SHORT $LN7@has_finali
$LN6@has_finali:
  0006b	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv77[rsp], 0
$LN7@has_finali:
  00073	8b 44 24 20	 mov	 eax, DWORD PTR tv77[rsp]
$LN1@has_finali:
$LN4@has_finali:

; 553  : }

  00077	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0007b	c3		 ret	 0
has_finalizer ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BJ@DJNFCFOL@move_finalizer_reachable?$AA@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$move_finalizer_reachable DD imagerel move_finalizer_reachable
	DD	imagerel move_finalizer_reachable+206
	DD	imagerel $unwind$move_finalizer_reachable
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$move_finalizer_reachable DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0BJ@DJNFCFOL@move_finalizer_reachable?$AA@
CONST	SEGMENT
??_C@_0BJ@DJNFCFOL@move_finalizer_reachable?$AA@ DB 'move_finalizer_reach'
	DB	'able', 00H					; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT move_finalizer_reachable
_TEXT	SEGMENT
traverse$ = 32
gc$ = 40
tv74 = 48
tv83 = 56
finalizers$ = 80
move_finalizer_reachable PROC				; COMDAT

; 602  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 603  :     traverseproc traverse;
; 604  :     PyGC_Head *gc;
; 605  :     Py_GUARD

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	74 1c		 je	 SHORT $LN4@move_final@2
  00012	45 33 c9	 xor	 r9d, r9d
  00015	41 b8 5d 02 00
	00		 mov	 r8d, 605		; 0000025dH
  0001b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@DJNFCFOL@move_finalizer_reachable?$AA@
  00029	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN4@move_final@2:

; 606  :     gc = finalizers->gc.gc_next;

  0002e	48 8b 44 24 50	 mov	 rax, QWORD PTR finalizers$[rsp]
  00033	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00036	48 89 44 24 28	 mov	 QWORD PTR gc$[rsp], rax

; 607  :     for (; gc != finalizers; gc = gc->gc.gc_next) {

  0003b	eb 0d		 jmp	 SHORT $LN3@move_final@2
$LN2@move_final@2:
  0003d	48 8b 44 24 28	 mov	 rax, QWORD PTR gc$[rsp]
  00042	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00045	48 89 44 24 28	 mov	 QWORD PTR gc$[rsp], rax
$LN3@move_final@2:
  0004a	48 8b 44 24 50	 mov	 rax, QWORD PTR finalizers$[rsp]
  0004f	48 39 44 24 28	 cmp	 QWORD PTR gc$[rsp], rax
  00054	74 73		 je	 SHORT $LN1@move_final@2

; 608  :         /* Note that the finalizers list may grow during this. */
; 609  :         traverse = Py_TYPE(FROM_GC(gc))->tp_traverse;

  00056	e8 00 00 00 00	 call	 _Py_PXCTX
  0005b	85 c0		 test	 eax, eax
  0005d	74 0b		 je	 SHORT $LN7@move_final@2
  0005f	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR tv74[rsp], 0
  00068	eb 0e		 jmp	 SHORT $LN8@move_final@2
$LN7@move_final@2:
  0006a	48 8b 44 24 28	 mov	 rax, QWORD PTR gc$[rsp]
  0006f	48 83 c0 18	 add	 rax, 24
  00073	48 89 44 24 30	 mov	 QWORD PTR tv74[rsp], rax
$LN8@move_final@2:
  00078	48 8b 44 24 30	 mov	 rax, QWORD PTR tv74[rsp]
  0007d	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00081	48 8b 80 10 01
	00 00		 mov	 rax, QWORD PTR [rax+272]
  00088	48 89 44 24 20	 mov	 QWORD PTR traverse$[rsp], rax

; 610  :         (void) traverse(FROM_GC(gc),
; 611  :                         (visitproc)visit_move,
; 612  :                         (void *)finalizers);

  0008d	e8 00 00 00 00	 call	 _Py_PXCTX
  00092	85 c0		 test	 eax, eax
  00094	74 0b		 je	 SHORT $LN9@move_final@2
  00096	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR tv83[rsp], 0
  0009f	eb 0e		 jmp	 SHORT $LN10@move_final@2
$LN9@move_final@2:
  000a1	48 8b 44 24 28	 mov	 rax, QWORD PTR gc$[rsp]
  000a6	48 83 c0 18	 add	 rax, 24
  000aa	48 89 44 24 38	 mov	 QWORD PTR tv83[rsp], rax
$LN10@move_final@2:
  000af	4c 8b 44 24 50	 mov	 r8, QWORD PTR finalizers$[rsp]
  000b4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:visit_move
  000bb	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tv83[rsp]
  000c0	ff 54 24 20	 call	 QWORD PTR traverse$[rsp]

; 613  :     }

  000c4	e9 74 ff ff ff	 jmp	 $LN2@move_final@2
$LN1@move_final@2:

; 614  : }

  000c9	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000cd	c3		 ret	 0
move_finalizer_reachable ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@GHJCMCK@visit_move?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$visit_move DD imagerel visit_move
	DD	imagerel visit_move+453
	DD	imagerel $unwind$visit_move
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$visit_move DD 010e01H
	DD	0c20eH
xdata	ENDS
;	COMDAT ??_C@_0L@GHJCMCK@visit_move?$AA@
CONST	SEGMENT
??_C@_0L@GHJCMCK@visit_move?$AA@ DB 'visit_move', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT visit_move
_TEXT	SEGMENT
gc$20630 = 48
tv95 = 56
tv83 = 60
tv81 = 64
tv93 = 68
tv137 = 72
tv148 = 80
op$ = 112
tolist$ = 120
visit_move PROC						; COMDAT

; 585  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 586  :     Py_GUARD

  0000e	e8 00 00 00 00	 call	 _Py_PXCTX
  00013	85 c0		 test	 eax, eax
  00015	74 1c		 je	 SHORT $LN3@visit_move
  00017	45 33 c9	 xor	 r9d, r9d
  0001a	41 b8 4a 02 00
	00		 mov	 r8d, 586		; 0000024aH
  00020	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00027	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@GHJCMCK@visit_move?$AA@
  0002e	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@visit_move:

; 587  :     if (PyObject_IS_GC(op)) {

  00033	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0003b	4c 8b 4c 24 70	 mov	 r9, QWORD PTR op$[rsp]
  00040	41 b8 4b 02 00
	00		 mov	 r8d, 587		; 0000024bH
  00046	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  0004d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@GHJCMCK@visit_move?$AA@
  00054	e8 00 00 00 00	 call	 _PyParallel_Guard
  00059	85 c0		 test	 eax, eax
  0005b	74 0d		 je	 SHORT $LN13@visit_move
  0005d	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv95[rsp], 0
  00065	e9 91 00 00 00	 jmp	 $LN14@visit_move
$LN13@visit_move:
  0006a	e8 00 00 00 00	 call	 _Py_PXCTX
  0006f	85 c0		 test	 eax, eax
  00071	74 0a		 je	 SHORT $LN8@visit_move
  00073	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR tv83[rsp], 0
  0007b	eb 32		 jmp	 SHORT $LN9@visit_move
$LN8@visit_move:
  0007d	48 8b 44 24 70	 mov	 rax, QWORD PTR op$[rsp]
  00082	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00086	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0008c	25 00 40 00 00	 and	 eax, 16384		; 00004000H
  00091	85 c0		 test	 eax, eax
  00093	74 0a		 je	 SHORT $LN6@visit_move
  00095	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv81[rsp], 1
  0009d	eb 08		 jmp	 SHORT $LN7@visit_move
$LN6@visit_move:
  0009f	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv81[rsp], 0
$LN7@visit_move:
  000a7	8b 44 24 40	 mov	 eax, DWORD PTR tv81[rsp]
  000ab	89 44 24 3c	 mov	 DWORD PTR tv83[rsp], eax
$LN9@visit_move:
  000af	83 7c 24 3c 00	 cmp	 DWORD PTR tv83[rsp], 0
  000b4	74 35		 je	 SHORT $LN11@visit_move
  000b6	48 8b 44 24 70	 mov	 rax, QWORD PTR op$[rsp]
  000bb	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000bf	48 83 b8 a0 01
	00 00 00	 cmp	 QWORD PTR [rax+416], 0
  000c7	74 18		 je	 SHORT $LN10@visit_move
  000c9	48 8b 44 24 70	 mov	 rax, QWORD PTR op$[rsp]
  000ce	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000d2	48 8b 4c 24 70	 mov	 rcx, QWORD PTR op$[rsp]
  000d7	ff 90 a0 01 00
	00		 call	 QWORD PTR [rax+416]
  000dd	85 c0		 test	 eax, eax
  000df	74 0a		 je	 SHORT $LN11@visit_move
$LN10@visit_move:
  000e1	c7 44 24 44 01
	00 00 00	 mov	 DWORD PTR tv93[rsp], 1
  000e9	eb 08		 jmp	 SHORT $LN12@visit_move
$LN11@visit_move:
  000eb	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv93[rsp], 0
$LN12@visit_move:
  000f3	8b 44 24 44	 mov	 eax, DWORD PTR tv93[rsp]
  000f7	89 44 24 38	 mov	 DWORD PTR tv95[rsp], eax
$LN14@visit_move:
  000fb	83 7c 24 38 00	 cmp	 DWORD PTR tv95[rsp], 0
  00100	0f 84 b8 00 00
	00		 je	 $LN2@visit_move

; 588  :         if (IS_TENTATIVELY_UNREACHABLE(op)) {

  00106	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0010e	4c 8b 4c 24 70	 mov	 r9, QWORD PTR op$[rsp]
  00113	41 b8 4c 02 00
	00		 mov	 r8d, 588		; 0000024cH
  00119	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00120	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@GHJCMCK@visit_move?$AA@
  00127	e8 00 00 00 00	 call	 _PyParallel_Guard
  0012c	85 c0		 test	 eax, eax
  0012e	74 0b		 je	 SHORT $LN15@visit_move
  00130	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR tv137[rsp], 0
  00139	eb 0e		 jmp	 SHORT $LN16@visit_move
$LN15@visit_move:
  0013b	48 8b 44 24 70	 mov	 rax, QWORD PTR op$[rsp]
  00140	48 83 e8 18	 sub	 rax, 24
  00144	48 89 44 24 48	 mov	 QWORD PTR tv137[rsp], rax
$LN16@visit_move:
  00149	48 8b 44 24 48	 mov	 rax, QWORD PTR tv137[rsp]
  0014e	48 83 78 10 fc	 cmp	 QWORD PTR [rax+16], -4
  00153	75 69		 jne	 SHORT $LN1@visit_move

; 589  :             PyGC_Head *gc = AS_GC(op);

  00155	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0015d	4c 8b 4c 24 70	 mov	 r9, QWORD PTR op$[rsp]
  00162	41 b8 4d 02 00
	00		 mov	 r8d, 589		; 0000024dH
  00168	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  0016f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@GHJCMCK@visit_move?$AA@
  00176	e8 00 00 00 00	 call	 _PyParallel_Guard
  0017b	85 c0		 test	 eax, eax
  0017d	74 0b		 je	 SHORT $LN17@visit_move
  0017f	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR tv148[rsp], 0
  00188	eb 0e		 jmp	 SHORT $LN18@visit_move
$LN17@visit_move:
  0018a	48 8b 44 24 70	 mov	 rax, QWORD PTR op$[rsp]
  0018f	48 83 e8 18	 sub	 rax, 24
  00193	48 89 44 24 50	 mov	 QWORD PTR tv148[rsp], rax
$LN18@visit_move:
  00198	48 8b 44 24 50	 mov	 rax, QWORD PTR tv148[rsp]
  0019d	48 89 44 24 30	 mov	 QWORD PTR gc$20630[rsp], rax

; 590  :             gc_list_move(gc, tolist);

  001a2	48 8b 54 24 78	 mov	 rdx, QWORD PTR tolist$[rsp]
  001a7	48 8b 4c 24 30	 mov	 rcx, QWORD PTR gc$20630[rsp]
  001ac	e8 00 00 00 00	 call	 gc_list_move

; 591  :             gc->gc.gc_refs = GC_REACHABLE;

  001b1	48 8b 44 24 30	 mov	 rax, QWORD PTR gc$20630[rsp]
  001b6	48 c7 40 10 fd
	ff ff ff	 mov	 QWORD PTR [rax+16], -3
$LN1@visit_move:
$LN2@visit_move:

; 592  :         }
; 593  :     }
; 594  :     return 0;

  001be	33 c0		 xor	 eax, eax

; 595  : }

  001c0	48 83 c4 68	 add	 rsp, 104		; 00000068H
  001c4	c3		 ret	 0
visit_move ENDP
_TEXT	ENDS
PUBLIC	_Py_DecRef
PUBLIC	??_C@_1CC@GFLBGCFF@?$AAc?$AAa?$AAl?$AAl?$AAb?$AAa?$AAc?$AAk?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CI@MMOHOJHP@?$AAP?$AAy?$AAW?$AAe?$AAa?$AAk?$AAr?$AAe?$AAf?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAo?$AAp?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CC@ILMNHIAN@?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAC?$AAH?$AAA?$AAB?$AAL?$AAE?$AA?$CI?$AAo?$AAp?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BO@MABFBLML@?$AAw?$AAr?$AAa?$AAs?$AAg?$AAc?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAn?$AAe?$AAx?$AAt?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CC@GJFLPDJI@?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAC?$AAH?$AAA?$AAB?$AAL?$AAE?$AA?$CI?$AAw?$AAr?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DC@HPGDAAFD@?$AAw?$AAr?$AA?9?$AA?$DO?$AAw?$AAr?$AA_?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAP?$AAy?$AA_?$AAN?$AAo?$AAn?$AAe?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CI@HKHOKCDC@?$AAw?$AAr?$AA?9?$AA?$DO?$AAw?$AAr?$AA_?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAo?$AAp?$AA?$AA@ ; `string'
PUBLIC	??_C@_0BA@OLICAFAM@handle_weakrefs?$AA@		; `string'
EXTRN	PyObject_CallFunctionObjArgs:PROC
EXTRN	_PyWeakref_CallableProxyType:BYTE
EXTRN	_PyWeakref_ProxyType:BYTE
EXTRN	PyType_IsSubtype:PROC
EXTRN	_PyWeakref_RefType:BYTE
EXTRN	_PyWeakref_ClearRef:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$handle_weakrefs DD imagerel handle_weakrefs
	DD	imagerel handle_weakrefs+1391
	DD	imagerel $unwind$handle_weakrefs
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$handle_weakrefs DD 021101H
	DD	01b0111H
xdata	ENDS
;	COMDAT ??_C@_1CC@GFLBGCFF@?$AAc?$AAa?$AAl?$AAl?$AAb?$AAa?$AAc?$AAk?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
CONST	SEGMENT
??_C@_1CC@GFLBGCFF@?$AAc?$AAa?$AAl?$AAl?$AAb?$AAa?$AAc?$AAk?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ DB 'c'
	DB	00H, 'a', 00H, 'l', 00H, 'l', 00H, 'b', 00H, 'a', 00H, 'c', 00H
	DB	'k', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, 'N', 00H, 'U'
	DB	00H, 'L', 00H, 'L', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1CI@MMOHOJHP@?$AAP?$AAy?$AAW?$AAe?$AAa?$AAk?$AAr?$AAe?$AAf?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAo?$AAp?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CI@MMOHOJHP@?$AAP?$AAy?$AAW?$AAe?$AAa?$AAk?$AAr?$AAe?$AAf?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAo?$AAp?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'W', 00H, 'e', 00H, 'a', 00H, 'k', 00H, 'r', 00H
	DB	'e', 00H, 'f', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, 'o', 00H, 'p', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CC@ILMNHIAN@?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAC?$AAH?$AAA?$AAB?$AAL?$AAE?$AA?$CI?$AAo?$AAp?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CC@ILMNHIAN@?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAC?$AAH?$AAA?$AAB?$AAL?$AAE?$AA?$CI?$AAo?$AAp?$AA?$CJ?$AA?$AA@ DB 'I'
	DB	00H, 'S', 00H, '_', 00H, 'R', 00H, 'E', 00H, 'A', 00H, 'C', 00H
	DB	'H', 00H, 'A', 00H, 'B', 00H, 'L', 00H, 'E', 00H, '(', 00H, 'o'
	DB	00H, 'p', 00H, ')', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1BO@MABFBLML@?$AAw?$AAr?$AAa?$AAs?$AAg?$AAc?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAn?$AAe?$AAx?$AAt?$AA?$AA@
CONST	SEGMENT
??_C@_1BO@MABFBLML@?$AAw?$AAr?$AAa?$AAs?$AAg?$AAc?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAn?$AAe?$AAx?$AAt?$AA?$AA@ DB 'w'
	DB	00H, 'r', 00H, 'a', 00H, 's', 00H, 'g', 00H, 'c', 00H, ' ', 00H
	DB	'!', 00H, '=', 00H, ' ', 00H, 'n', 00H, 'e', 00H, 'x', 00H, 't'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CC@GJFLPDJI@?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAC?$AAH?$AAA?$AAB?$AAL?$AAE?$AA?$CI?$AAw?$AAr?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CC@GJFLPDJI@?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAC?$AAH?$AAA?$AAB?$AAL?$AAE?$AA?$CI?$AAw?$AAr?$AA?$CJ?$AA?$AA@ DB 'I'
	DB	00H, 'S', 00H, '_', 00H, 'R', 00H, 'E', 00H, 'A', 00H, 'C', 00H
	DB	'H', 00H, 'A', 00H, 'B', 00H, 'L', 00H, 'E', 00H, '(', 00H, 'w'
	DB	00H, 'r', 00H, ')', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1DC@HPGDAAFD@?$AAw?$AAr?$AA?9?$AA?$DO?$AAw?$AAr?$AA_?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAP?$AAy?$AA_?$AAN?$AAo?$AAn?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1DC@HPGDAAFD@?$AAw?$AAr?$AA?9?$AA?$DO?$AAw?$AAr?$AA_?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAP?$AAy?$AA_?$AAN?$AAo?$AAn?$AAe?$AA?$AA@ DB 'w'
	DB	00H, 'r', 00H, '-', 00H, '>', 00H, 'w', 00H, 'r', 00H, '_', 00H
	DB	'o', 00H, 'b', 00H, 'j', 00H, 'e', 00H, 'c', 00H, 't', 00H, ' '
	DB	00H, '=', 00H, '=', 00H, ' ', 00H, 'P', 00H, 'y', 00H, '_', 00H
	DB	'N', 00H, 'o', 00H, 'n', 00H, 'e', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CI@HKHOKCDC@?$AAw?$AAr?$AA?9?$AA?$DO?$AAw?$AAr?$AA_?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAo?$AAp?$AA?$AA@
CONST	SEGMENT
??_C@_1CI@HKHOKCDC@?$AAw?$AAr?$AA?9?$AA?$DO?$AAw?$AAr?$AA_?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAo?$AAp?$AA?$AA@ DB 'w'
	DB	00H, 'r', 00H, '-', 00H, '>', 00H, 'w', 00H, 'r', 00H, '_', 00H
	DB	'o', 00H, 'b', 00H, 'j', 00H, 'e', 00H, 'c', 00H, 't', 00H, ' '
	DB	00H, '=', 00H, '=', 00H, ' ', 00H, 'o', 00H, 'p', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@OLICAFAM@handle_weakrefs?$AA@
CONST	SEGMENT
??_C@_0BA@OLICAFAM@handle_weakrefs?$AA@ DB 'handle_weakrefs', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT handle_weakrefs
_TEXT	SEGMENT
wrcb_to_call$ = 48
wr$ = 72
next$ = 80
gc$ = 88
num_freed$ = 96
op$ = 104
wrlist$20671 = 112
wrasgc$20688 = 120
temp$20710 = 128
callback$20711 = 136
tv75 = 144
tv84 = 152
tv153 = 160
tv164 = 168
tv180 = 176
tv194 = 184
tv203 = 192
unreachable$ = 224
old$ = 232
handle_weakrefs PROC					; COMDAT

; 629  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec d8 00
	00 00		 sub	 rsp, 216		; 000000d8H

; 630  :     PyGC_Head *gc;
; 631  :     PyObject *op;               /* generally FROM_GC(gc) */
; 632  :     PyWeakReference *wr;        /* generally a cast of op */
; 633  :     PyGC_Head wrcb_to_call;     /* weakrefs with callbacks to call */
; 634  :     PyGC_Head *next;
; 635  :     int num_freed = 0;

  00011	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR num_freed$[rsp], 0

; 636  :     Py_GUARD

  00019	e8 00 00 00 00	 call	 _Py_PXCTX
  0001e	85 c0		 test	 eax, eax
  00020	74 1c		 je	 SHORT $LN16@handle_wea
  00022	45 33 c9	 xor	 r9d, r9d
  00025	41 b8 7c 02 00
	00		 mov	 r8d, 636		; 0000027cH
  0002b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00032	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@OLICAFAM@handle_weakrefs?$AA@
  00039	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN16@handle_wea:

; 637  : 
; 638  :     gc_list_init(&wrcb_to_call);

  0003e	48 8d 4c 24 30	 lea	 rcx, QWORD PTR wrcb_to_call$[rsp]
  00043	e8 00 00 00 00	 call	 gc_list_init

; 639  : 
; 640  :     /* Clear all weakrefs to the objects in unreachable.  If such a weakref
; 641  :      * also has a callback, move it into `wrcb_to_call` if the callback
; 642  :      * needs to be invoked.  Note that we cannot invoke any callbacks until
; 643  :      * all weakrefs to unreachable objects are cleared, lest the callback
; 644  :      * resurrect an unreachable object via a still-active weakref.  We
; 645  :      * make another pass over wrcb_to_call, invoking callbacks, after this
; 646  :      * pass completes.
; 647  :      */
; 648  :     for (gc = unreachable->gc.gc_next; gc != unreachable; gc = next) {

  00048	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR unreachable$[rsp]
  00050	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00053	48 89 44 24 58	 mov	 QWORD PTR gc$[rsp], rax
  00058	eb 0a		 jmp	 SHORT $LN15@handle_wea
$LN14@handle_wea:
  0005a	48 8b 44 24 50	 mov	 rax, QWORD PTR next$[rsp]
  0005f	48 89 44 24 58	 mov	 QWORD PTR gc$[rsp], rax
$LN15@handle_wea:
  00064	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR unreachable$[rsp]
  0006c	48 39 44 24 58	 cmp	 QWORD PTR gc$[rsp], rax
  00071	0f 84 fd 02 00
	00		 je	 $LN13@handle_wea

; 649  :         PyWeakReference **wrlist;
; 650  : 
; 651  :         op = FROM_GC(gc);

  00077	e8 00 00 00 00	 call	 _Py_PXCTX
  0007c	85 c0		 test	 eax, eax
  0007e	74 0e		 je	 SHORT $LN19@handle_wea
  00080	48 c7 84 24 90
	00 00 00 00 00
	00 00		 mov	 QWORD PTR tv75[rsp], 0
  0008c	eb 11		 jmp	 SHORT $LN20@handle_wea
$LN19@handle_wea:
  0008e	48 8b 44 24 58	 mov	 rax, QWORD PTR gc$[rsp]
  00093	48 83 c0 18	 add	 rax, 24
  00097	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv75[rsp], rax
$LN20@handle_wea:
  0009f	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR tv75[rsp]
  000a7	48 89 44 24 68	 mov	 QWORD PTR op$[rsp], rax

; 652  :         assert(IS_TENTATIVELY_UNREACHABLE(op));

  000ac	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000b4	4c 8b 4c 24 68	 mov	 r9, QWORD PTR op$[rsp]
  000b9	41 b8 8c 02 00
	00		 mov	 r8d, 652		; 0000028cH
  000bf	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  000c6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@OLICAFAM@handle_weakrefs?$AA@
  000cd	e8 00 00 00 00	 call	 _PyParallel_Guard
  000d2	85 c0		 test	 eax, eax
  000d4	74 0e		 je	 SHORT $LN21@handle_wea
  000d6	48 c7 84 24 98
	00 00 00 00 00
	00 00		 mov	 QWORD PTR tv84[rsp], 0
  000e2	eb 11		 jmp	 SHORT $LN22@handle_wea
$LN21@handle_wea:
  000e4	48 8b 44 24 68	 mov	 rax, QWORD PTR op$[rsp]
  000e9	48 83 e8 18	 sub	 rax, 24
  000ed	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR tv84[rsp], rax
$LN22@handle_wea:
  000f5	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR tv84[rsp]
  000fd	48 83 78 10 fc	 cmp	 QWORD PTR [rax+16], -4
  00102	74 1c		 je	 SHORT $LN23@handle_wea
  00104	41 b8 8c 02 00
	00		 mov	 r8d, 652		; 0000028cH
  0010a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CM@JNCNOGAO@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAg?$AAc?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  00111	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@IMBHLDDA@?$AAI?$AAS?$AA_?$AAT?$AAE?$AAN?$AAT?$AAA?$AAT?$AAI?$AAV?$AAE?$AAL?$AAY?$AA_?$AAU?$AAN?$AAR?$AAE?$AAA?$AAC?$AAH?$AAA?$AAB?$AAL?$AAE?$AA?$CI?$AAo?$AAp?$AA?$CJ?$AA?$AA@
  00118	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0011e	33 c0		 xor	 eax, eax
$LN23@handle_wea:

; 653  :         next = gc->gc.gc_next;

  00120	48 8b 44 24 58	 mov	 rax, QWORD PTR gc$[rsp]
  00125	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00128	48 89 44 24 50	 mov	 QWORD PTR next$[rsp], rax

; 654  : 
; 655  :         if (! PyType_SUPPORTS_WEAKREFS(Py_TYPE(op)))

  0012d	48 8b 44 24 68	 mov	 rax, QWORD PTR op$[rsp]
  00132	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00136	48 83 b8 28 01
	00 00 00	 cmp	 QWORD PTR [rax+296], 0
  0013e	7f 05		 jg	 SHORT $LN12@handle_wea

; 656  :             continue;

  00140	e9 15 ff ff ff	 jmp	 $LN14@handle_wea
$LN12@handle_wea:

; 657  : 
; 658  :         /* It supports weakrefs.  Does it have any? */
; 659  :         wrlist = (PyWeakReference **)
; 660  :                                 PyObject_GET_WEAKREFS_LISTPTR(op);

  00145	48 8b 44 24 68	 mov	 rax, QWORD PTR op$[rsp]
  0014a	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0014e	48 8b 80 28 01
	00 00		 mov	 rax, QWORD PTR [rax+296]
  00155	48 8b 4c 24 68	 mov	 rcx, QWORD PTR op$[rsp]
  0015a	48 03 c8	 add	 rcx, rax
  0015d	48 8b c1	 mov	 rax, rcx
  00160	48 89 44 24 70	 mov	 QWORD PTR wrlist$20671[rsp], rax

; 661  : 
; 662  :         /* `op` may have some weakrefs.  March over the list, clear
; 663  :          * all the weakrefs, and move the weakrefs with callbacks
; 664  :          * that must be called into wrcb_to_call.
; 665  :          */
; 666  :         for (wr = *wrlist; wr != NULL; wr = *wrlist) {

  00165	48 8b 44 24 70	 mov	 rax, QWORD PTR wrlist$20671[rsp]
  0016a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0016d	48 89 44 24 48	 mov	 QWORD PTR wr$[rsp], rax
  00172	eb 0d		 jmp	 SHORT $LN11@handle_wea
$LN10@handle_wea:
  00174	48 8b 44 24 70	 mov	 rax, QWORD PTR wrlist$20671[rsp]
  00179	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0017c	48 89 44 24 48	 mov	 QWORD PTR wr$[rsp], rax
$LN11@handle_wea:
  00181	48 83 7c 24 48
	00		 cmp	 QWORD PTR wr$[rsp], 0
  00187	0f 84 e2 01 00
	00		 je	 $LN9@handle_wea

; 667  :             PyGC_Head *wrasgc;                  /* AS_GC(wr) */
; 668  : 
; 669  :             /* _PyWeakref_ClearRef clears the weakref but leaves
; 670  :              * the callback pointer intact.  Obscure:  it also
; 671  :              * changes *wrlist.
; 672  :              */
; 673  :             assert(wr->wr_object == op);

  0018d	48 8b 44 24 48	 mov	 rax, QWORD PTR wr$[rsp]
  00192	48 8b 4c 24 68	 mov	 rcx, QWORD PTR op$[rsp]
  00197	48 39 48 60	 cmp	 QWORD PTR [rax+96], rcx
  0019b	74 1c		 je	 SHORT $LN24@handle_wea
  0019d	41 b8 a1 02 00
	00		 mov	 r8d, 673		; 000002a1H
  001a3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CM@JNCNOGAO@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAg?$AAc?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  001aa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CI@HKHOKCDC@?$AAw?$AAr?$AA?9?$AA?$DO?$AAw?$AAr?$AA_?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAo?$AAp?$AA?$AA@
  001b1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001b7	33 c0		 xor	 eax, eax
$LN24@handle_wea:

; 674  :             _PyWeakref_ClearRef(wr);

  001b9	48 8b 4c 24 48	 mov	 rcx, QWORD PTR wr$[rsp]
  001be	e8 00 00 00 00	 call	 _PyWeakref_ClearRef

; 675  :             assert(wr->wr_object == Py_None);

  001c3	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  001ca	48 8b 4c 24 48	 mov	 rcx, QWORD PTR wr$[rsp]
  001cf	48 39 41 60	 cmp	 QWORD PTR [rcx+96], rax
  001d3	74 1c		 je	 SHORT $LN25@handle_wea
  001d5	41 b8 a3 02 00
	00		 mov	 r8d, 675		; 000002a3H
  001db	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CM@JNCNOGAO@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAg?$AAc?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  001e2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DC@HPGDAAFD@?$AAw?$AAr?$AA?9?$AA?$DO?$AAw?$AAr?$AA_?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAP?$AAy?$AA_?$AAN?$AAo?$AAn?$AAe?$AA?$AA@
  001e9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001ef	33 c0		 xor	 eax, eax
$LN25@handle_wea:

; 676  :             if (wr->wr_callback == NULL)

  001f1	48 8b 44 24 48	 mov	 rax, QWORD PTR wr$[rsp]
  001f6	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  001fb	75 05		 jne	 SHORT $LN8@handle_wea

; 677  :                 continue;                       /* no callback */

  001fd	e9 72 ff ff ff	 jmp	 $LN10@handle_wea
$LN8@handle_wea:

; 678  : 
; 679  :     /* Headache time.  `op` is going away, and is weakly referenced by
; 680  :      * `wr`, which has a callback.  Should the callback be invoked?  If wr
; 681  :      * is also trash, no:
; 682  :      *
; 683  :      * 1. There's no need to call it.  The object and the weakref are
; 684  :      *    both going away, so it's legitimate to pretend the weakref is
; 685  :      *    going away first.  The user has to ensure a weakref outlives its
; 686  :      *    referent if they want a guarantee that the wr callback will get
; 687  :      *    invoked.
; 688  :      *
; 689  :      * 2. It may be catastrophic to call it.  If the callback is also in
; 690  :      *    cyclic trash (CT), then although the CT is unreachable from
; 691  :      *    outside the current generation, CT may be reachable from the
; 692  :      *    callback.  Then the callback could resurrect insane objects.
; 693  :      *
; 694  :      * Since the callback is never needed and may be unsafe in this case,
; 695  :      * wr is simply left in the unreachable set.  Note that because we
; 696  :      * already called _PyWeakref_ClearRef(wr), its callback will never
; 697  :      * trigger.
; 698  :      *
; 699  :      * OTOH, if wr isn't part of CT, we should invoke the callback:  the
; 700  :      * weakref outlived the trash.  Note that since wr isn't CT in this
; 701  :      * case, its callback can't be CT either -- wr acted as an external
; 702  :      * root to this generation, and therefore its callback did too.  So
; 703  :      * nothing in CT is reachable from the callback either, so it's hard
; 704  :      * to imagine how calling it later could create a problem for us.  wr
; 705  :      * is moved to wrcb_to_call in this case.
; 706  :      */
; 707  :             if (IS_TENTATIVELY_UNREACHABLE(wr))

  00202	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0020a	4c 8b 4c 24 48	 mov	 r9, QWORD PTR wr$[rsp]
  0020f	41 b8 c3 02 00
	00		 mov	 r8d, 707		; 000002c3H
  00215	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  0021c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@OLICAFAM@handle_weakrefs?$AA@
  00223	e8 00 00 00 00	 call	 _PyParallel_Guard
  00228	85 c0		 test	 eax, eax
  0022a	74 0e		 je	 SHORT $LN26@handle_wea
  0022c	48 c7 84 24 a0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR tv153[rsp], 0
  00238	eb 11		 jmp	 SHORT $LN27@handle_wea
$LN26@handle_wea:
  0023a	48 8b 44 24 48	 mov	 rax, QWORD PTR wr$[rsp]
  0023f	48 83 e8 18	 sub	 rax, 24
  00243	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR tv153[rsp], rax
$LN27@handle_wea:
  0024b	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR tv153[rsp]
  00253	48 83 78 10 fc	 cmp	 QWORD PTR [rax+16], -4
  00258	75 05		 jne	 SHORT $LN7@handle_wea

; 708  :                 continue;

  0025a	e9 15 ff ff ff	 jmp	 $LN10@handle_wea
$LN7@handle_wea:

; 709  :             assert(IS_REACHABLE(wr));

  0025f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00267	4c 8b 4c 24 48	 mov	 r9, QWORD PTR wr$[rsp]
  0026c	41 b8 c5 02 00
	00		 mov	 r8d, 709		; 000002c5H
  00272	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00279	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@OLICAFAM@handle_weakrefs?$AA@
  00280	e8 00 00 00 00	 call	 _PyParallel_Guard
  00285	85 c0		 test	 eax, eax
  00287	74 0e		 je	 SHORT $LN28@handle_wea
  00289	48 c7 84 24 a8
	00 00 00 00 00
	00 00		 mov	 QWORD PTR tv164[rsp], 0
  00295	eb 11		 jmp	 SHORT $LN29@handle_wea
$LN28@handle_wea:
  00297	48 8b 44 24 48	 mov	 rax, QWORD PTR wr$[rsp]
  0029c	48 83 e8 18	 sub	 rax, 24
  002a0	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR tv164[rsp], rax
$LN29@handle_wea:
  002a8	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR tv164[rsp]
  002b0	48 83 78 10 fd	 cmp	 QWORD PTR [rax+16], -3
  002b5	74 1c		 je	 SHORT $LN30@handle_wea
  002b7	41 b8 c5 02 00
	00		 mov	 r8d, 709		; 000002c5H
  002bd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CM@JNCNOGAO@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAg?$AAc?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  002c4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CC@GJFLPDJI@?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAC?$AAH?$AAA?$AAB?$AAL?$AAE?$AA?$CI?$AAw?$AAr?$AA?$CJ?$AA?$AA@
  002cb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  002d1	33 c0		 xor	 eax, eax
$LN30@handle_wea:

; 710  : 
; 711  :             /* Create a new reference so that wr can't go away
; 712  :              * before we can process it again.
; 713  :              */
; 714  :             Py_INCREF(wr);

  002d3	48 8b 4c 24 48	 mov	 rcx, QWORD PTR wr$[rsp]
  002d8	e8 00 00 00 00	 call	 _Py_IncRef

; 715  : 
; 716  :             /* Move wr to wrcb_to_call, for the next pass. */
; 717  :             wrasgc = AS_GC(wr);

  002dd	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  002e5	4c 8b 4c 24 48	 mov	 r9, QWORD PTR wr$[rsp]
  002ea	41 b8 cd 02 00
	00		 mov	 r8d, 717		; 000002cdH
  002f0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  002f7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@OLICAFAM@handle_weakrefs?$AA@
  002fe	e8 00 00 00 00	 call	 _PyParallel_Guard
  00303	85 c0		 test	 eax, eax
  00305	74 0e		 je	 SHORT $LN31@handle_wea
  00307	48 c7 84 24 b0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR tv180[rsp], 0
  00313	eb 11		 jmp	 SHORT $LN32@handle_wea
$LN31@handle_wea:
  00315	48 8b 44 24 48	 mov	 rax, QWORD PTR wr$[rsp]
  0031a	48 83 e8 18	 sub	 rax, 24
  0031e	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR tv180[rsp], rax
$LN32@handle_wea:
  00326	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR tv180[rsp]
  0032e	48 89 44 24 78	 mov	 QWORD PTR wrasgc$20688[rsp], rax

; 718  :             assert(wrasgc != next); /* wrasgc is reachable, but

  00333	48 8b 44 24 50	 mov	 rax, QWORD PTR next$[rsp]
  00338	48 39 44 24 78	 cmp	 QWORD PTR wrasgc$20688[rsp], rax
  0033d	75 1c		 jne	 SHORT $LN33@handle_wea
  0033f	41 b8 ce 02 00
	00		 mov	 r8d, 718		; 000002ceH
  00345	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CM@JNCNOGAO@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAg?$AAc?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  0034c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BO@MABFBLML@?$AAw?$AAr?$AAa?$AAs?$AAg?$AAc?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAn?$AAe?$AAx?$AAt?$AA?$AA@
  00353	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00359	33 c0		 xor	 eax, eax
$LN33@handle_wea:

; 719  :                                        next isn't, so they can't
; 720  :                                        be the same */
; 721  :             gc_list_move(wrasgc, &wrcb_to_call);

  0035b	48 8d 54 24 30	 lea	 rdx, QWORD PTR wrcb_to_call$[rsp]
  00360	48 8b 4c 24 78	 mov	 rcx, QWORD PTR wrasgc$20688[rsp]
  00365	e8 00 00 00 00	 call	 gc_list_move

; 722  :         }

  0036a	e9 05 fe ff ff	 jmp	 $LN10@handle_wea
$LN9@handle_wea:

; 723  :     }

  0036f	e9 e6 fc ff ff	 jmp	 $LN14@handle_wea
$LN13@handle_wea:
$LN6@handle_wea:

; 724  : 
; 725  :     /* Invoke the callbacks we decided to honor.  It's safe to invoke them
; 726  :      * because they can't reference unreachable objects.
; 727  :      */
; 728  :     while (! gc_list_is_empty(&wrcb_to_call)) {

  00374	48 8d 4c 24 30	 lea	 rcx, QWORD PTR wrcb_to_call$[rsp]
  00379	e8 00 00 00 00	 call	 gc_list_is_empty
  0037e	85 c0		 test	 eax, eax
  00380	0f 85 dd 01 00
	00		 jne	 $LN5@handle_wea

; 729  :         PyObject *temp;
; 730  :         PyObject *callback;
; 731  : 
; 732  :         gc = wrcb_to_call.gc.gc_next;

  00386	48 8b 44 24 30	 mov	 rax, QWORD PTR wrcb_to_call$[rsp]
  0038b	48 89 44 24 58	 mov	 QWORD PTR gc$[rsp], rax

; 733  :         op = FROM_GC(gc);

  00390	e8 00 00 00 00	 call	 _Py_PXCTX
  00395	85 c0		 test	 eax, eax
  00397	74 0e		 je	 SHORT $LN34@handle_wea
  00399	48 c7 84 24 b8
	00 00 00 00 00
	00 00		 mov	 QWORD PTR tv194[rsp], 0
  003a5	eb 11		 jmp	 SHORT $LN35@handle_wea
$LN34@handle_wea:
  003a7	48 8b 44 24 58	 mov	 rax, QWORD PTR gc$[rsp]
  003ac	48 83 c0 18	 add	 rax, 24
  003b0	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR tv194[rsp], rax
$LN35@handle_wea:
  003b8	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR tv194[rsp]
  003c0	48 89 44 24 68	 mov	 QWORD PTR op$[rsp], rax

; 734  :         assert(IS_REACHABLE(op));

  003c5	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  003cd	4c 8b 4c 24 68	 mov	 r9, QWORD PTR op$[rsp]
  003d2	41 b8 de 02 00
	00		 mov	 r8d, 734		; 000002deH
  003d8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  003df	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@OLICAFAM@handle_weakrefs?$AA@
  003e6	e8 00 00 00 00	 call	 _PyParallel_Guard
  003eb	85 c0		 test	 eax, eax
  003ed	74 0e		 je	 SHORT $LN36@handle_wea
  003ef	48 c7 84 24 c0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR tv203[rsp], 0
  003fb	eb 11		 jmp	 SHORT $LN37@handle_wea
$LN36@handle_wea:
  003fd	48 8b 44 24 68	 mov	 rax, QWORD PTR op$[rsp]
  00402	48 83 e8 18	 sub	 rax, 24
  00406	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR tv203[rsp], rax
$LN37@handle_wea:
  0040e	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR tv203[rsp]
  00416	48 83 78 10 fd	 cmp	 QWORD PTR [rax+16], -3
  0041b	74 1c		 je	 SHORT $LN38@handle_wea
  0041d	41 b8 de 02 00
	00		 mov	 r8d, 734		; 000002deH
  00423	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CM@JNCNOGAO@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAg?$AAc?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  0042a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CC@ILMNHIAN@?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAC?$AAH?$AAA?$AAB?$AAL?$AAE?$AA?$CI?$AAo?$AAp?$AA?$CJ?$AA?$AA@
  00431	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00437	33 c0		 xor	 eax, eax
$LN38@handle_wea:

; 735  :         assert(PyWeakref_Check(op));

  00439	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_RefType
  00440	48 8b 4c 24 68	 mov	 rcx, QWORD PTR op$[rsp]
  00445	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00449	74 59		 je	 SHORT $LN39@handle_wea
  0044b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_PyWeakref_RefType
  00452	48 8b 44 24 68	 mov	 rax, QWORD PTR op$[rsp]
  00457	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  0045b	e8 00 00 00 00	 call	 PyType_IsSubtype
  00460	85 c0		 test	 eax, eax
  00462	75 40		 jne	 SHORT $LN39@handle_wea
  00464	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_ProxyType
  0046b	48 8b 4c 24 68	 mov	 rcx, QWORD PTR op$[rsp]
  00470	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00474	74 2e		 je	 SHORT $LN40@handle_wea
  00476	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyWeakref_CallableProxyType
  0047d	48 8b 4c 24 68	 mov	 rcx, QWORD PTR op$[rsp]
  00482	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00486	74 1c		 je	 SHORT $LN40@handle_wea
  00488	41 b8 df 02 00
	00		 mov	 r8d, 735		; 000002dfH
  0048e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CM@JNCNOGAO@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAg?$AAc?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  00495	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CI@MMOHOJHP@?$AAP?$AAy?$AAW?$AAe?$AAa?$AAk?$AAr?$AAe?$AAf?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAo?$AAp?$AA?$CJ?$AA?$AA@
  0049c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  004a2	33 c0		 xor	 eax, eax
$LN39@handle_wea:
$LN40@handle_wea:

; 736  :         wr = (PyWeakReference *)op;

  004a4	48 8b 44 24 68	 mov	 rax, QWORD PTR op$[rsp]
  004a9	48 89 44 24 48	 mov	 QWORD PTR wr$[rsp], rax

; 737  :         callback = wr->wr_callback;

  004ae	48 8b 44 24 48	 mov	 rax, QWORD PTR wr$[rsp]
  004b3	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  004b7	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR callback$20711[rsp], rax

; 738  :         assert(callback != NULL);

  004bf	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR callback$20711[rsp], 0
  004c8	75 1c		 jne	 SHORT $LN41@handle_wea
  004ca	41 b8 e2 02 00
	00		 mov	 r8d, 738		; 000002e2H
  004d0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CM@JNCNOGAO@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAg?$AAc?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  004d7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CC@GFLBGCFF@?$AAc?$AAa?$AAl?$AAl?$AAb?$AAa?$AAc?$AAk?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
  004de	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  004e4	33 c0		 xor	 eax, eax
$LN41@handle_wea:

; 739  : 
; 740  :         /* copy-paste of weakrefobject.c's handle_callback() */
; 741  :         temp = PyObject_CallFunctionObjArgs(callback, wr, NULL);

  004e6	45 33 c0	 xor	 r8d, r8d
  004e9	48 8b 54 24 48	 mov	 rdx, QWORD PTR wr$[rsp]
  004ee	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR callback$20711[rsp]
  004f6	e8 00 00 00 00	 call	 PyObject_CallFunctionObjArgs
  004fb	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR temp$20710[rsp], rax

; 742  :         if (temp == NULL)

  00503	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR temp$20710[rsp], 0
  0050c	75 0f		 jne	 SHORT $LN4@handle_wea

; 743  :             PyErr_WriteUnraisable(callback);

  0050e	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR callback$20711[rsp]
  00516	e8 00 00 00 00	 call	 PyErr_WriteUnraisable

; 744  :         else

  0051b	eb 0d		 jmp	 SHORT $LN3@handle_wea
$LN4@handle_wea:

; 745  :             Py_DECREF(temp);

  0051d	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR temp$20710[rsp]
  00525	e8 00 00 00 00	 call	 _Py_DecRef
$LN3@handle_wea:

; 746  : 
; 747  :         /* Give up the reference we created in the first pass.  When
; 748  :          * op's refcount hits 0 (which it may or may not do right now),
; 749  :          * op's tp_dealloc will decref op->wr_callback too.  Note
; 750  :          * that the refcount probably will hit 0 now, and because this
; 751  :          * weakref was reachable to begin with, gc didn't already
; 752  :          * add it to its count of freed objects.  Example:  a reachable
; 753  :          * weak value dict maps some key to this reachable weakref.
; 754  :          * The callback removes this key->weakref mapping from the
; 755  :          * dict, leaving no other references to the weakref (excepting
; 756  :          * ours).
; 757  :          */
; 758  :         Py_DECREF(op);

  0052a	48 8b 4c 24 68	 mov	 rcx, QWORD PTR op$[rsp]
  0052f	e8 00 00 00 00	 call	 _Py_DecRef

; 759  :         if (wrcb_to_call.gc.gc_next == gc) {

  00534	48 8b 44 24 58	 mov	 rax, QWORD PTR gc$[rsp]
  00539	48 39 44 24 30	 cmp	 QWORD PTR wrcb_to_call$[rsp], rax
  0053e	75 14		 jne	 SHORT $LN2@handle_wea

; 760  :             /* object is still alive -- move it */
; 761  :             gc_list_move(gc, old);

  00540	48 8b 94 24 e8
	00 00 00	 mov	 rdx, QWORD PTR old$[rsp]
  00548	48 8b 4c 24 58	 mov	 rcx, QWORD PTR gc$[rsp]
  0054d	e8 00 00 00 00	 call	 gc_list_move

; 762  :         }
; 763  :         else

  00552	eb 0a		 jmp	 SHORT $LN1@handle_wea
$LN2@handle_wea:

; 764  :             ++num_freed;

  00554	8b 44 24 60	 mov	 eax, DWORD PTR num_freed$[rsp]
  00558	ff c0		 inc	 eax
  0055a	89 44 24 60	 mov	 DWORD PTR num_freed$[rsp], eax
$LN1@handle_wea:

; 765  :     }

  0055e	e9 11 fe ff ff	 jmp	 $LN6@handle_wea
$LN5@handle_wea:

; 766  : 
; 767  :     return num_freed;

  00563	8b 44 24 60	 mov	 eax, DWORD PTR num_freed$[rsp]

; 768  : }

  00567	48 81 c4 d8 00
	00 00		 add	 rsp, 216		; 000000d8H
  0056e	c3		 ret	 0
handle_weakrefs ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
EXTRN	_Py_Dealloc:PROC
EXTRN	_Py_NegativeRefcount:PROC
EXTRN	Px_DecRef:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN13
	DD	imagerel $LN13+257
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
tv81 = 48
op$ = 80
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN13:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	0f 85 e6 00 00
	00		 jne	 $LN8@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00016	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0001b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0001f	48 83 e0 20	 and	 rax, 32			; 00000020H
  00023	48 85 c0	 test	 rax, rax
  00026	75 14		 jne	 SHORT $LN6@Py_DecRef
  00028	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0002d	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00031	48 25 80 00 00
	00		 and	 rax, 128		; 00000080H
  00037	48 85 c0	 test	 rax, rax
  0003a	74 0f		 je	 SHORT $LN7@Py_DecRef
$LN6@Py_DecRef:

; 926  :             Px_DECREF(op);

  0003c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  00041	e8 00 00 00 00	 call	 Px_DecRef
  00046	e9 b1 00 00 00	 jmp	 $LN5@Py_DecRef
$LN7@Py_DecRef:

; 927  :         else if (!Px_ISPX(op)) {

  0004b	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00050	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00054	48 83 e0 02	 and	 rax, 2
  00058	48 85 c0	 test	 rax, rax
  0005b	0f 85 9b 00 00
	00		 jne	 $LN4@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;

  00061	e8 00 00 00 00	 call	 _Py_PXCTX
  00066	85 c0		 test	 eax, eax
  00068	74 02		 je	 SHORT $LN11@Py_DecRef
  0006a	eb 11		 jmp	 SHORT $LN12@Py_DecRef
$LN11@Py_DecRef:
  0006c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00073	48 ff c8	 dec	 rax
  00076	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN12@Py_DecRef:

; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  0007d	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00082	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00086	48 ff c8	 dec	 rax
  00089	48 89 44 24 30	 mov	 QWORD PTR tv81[rsp], rax
  0008e	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00093	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv81[rsp]
  00098	48 89 48 50	 mov	 QWORD PTR [rax+80], rcx
  0009c	48 83 7c 24 30
	00		 cmp	 QWORD PTR tv81[rsp], 0
  000a2	74 4e		 je	 SHORT $LN3@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);

  000a4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000ac	4c 8b 4c 24 50	 mov	 r9, QWORD PTR op$[rsp]
  000b1	41 b8 a2 03 00
	00		 mov	 r8d, 930		; 000003a2H
  000b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000c5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ca	85 c0		 test	 eax, eax
  000cc	75 22		 jne	 SHORT $LN2@Py_DecRef
  000ce	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  000d3	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000d8	7d 16		 jge	 SHORT $LN2@Py_DecRef
  000da	4c 8b 44 24 50	 mov	 r8, QWORD PTR op$[rsp]
  000df	ba a2 03 00 00	 mov	 edx, 930		; 000003a2H
  000e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000eb	e8 00 00 00 00	 call	 _Py_NegativeRefcount
$LN2@Py_DecRef:

; 931  :             } else

  000f0	eb 0a		 jmp	 SHORT $LN1@Py_DecRef
$LN3@Py_DecRef:

; 932  :                 _Py_Dealloc((PyObject *)(op));

  000f2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  000f7	e8 00 00 00 00	 call	 _Py_Dealloc
$LN1@Py_DecRef:
$LN4@Py_DecRef:
$LN5@Py_DecRef:
$LN8@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  000fc	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00100	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BA@PDJEBAFO@gc?3?5?$CFs?5?$DM?$CFs?5?$CFp?$DO?6?$AA@ ; `string'
PUBLIC	??_C@_0M@OEBODMLH@debug_cycle?$AA@		; `string'
EXTRN	PySys_FormatStderr:PROC
;	COMDAT pdata
; File c:\src\pyparallel\modules\gcmodule.c
pdata	SEGMENT
$pdata$debug_cycle DD imagerel debug_cycle
	DD	imagerel debug_cycle+91
	DD	imagerel $unwind$debug_cycle
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$debug_cycle DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT ??_C@_0BA@PDJEBAFO@gc?3?5?$CFs?5?$DM?$CFs?5?$CFp?$DO?6?$AA@
CONST	SEGMENT
??_C@_0BA@PDJEBAFO@gc?3?5?$CFs?5?$DM?$CFs?5?$CFp?$DO?6?$AA@ DB 'gc: %s <%'
	DB	's %p>', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@OEBODMLH@debug_cycle?$AA@
CONST	SEGMENT
??_C@_0M@OEBODMLH@debug_cycle?$AA@ DB 'debug_cycle', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT debug_cycle
_TEXT	SEGMENT
msg$ = 48
op$ = 56
debug_cycle PROC					; COMDAT

; 772  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 773  :     Py_GUARD

  0000e	e8 00 00 00 00	 call	 _Py_PXCTX
  00013	85 c0		 test	 eax, eax
  00015	74 1c		 je	 SHORT $LN1@debug_cycl
  00017	45 33 c9	 xor	 r9d, r9d
  0001a	41 b8 05 03 00
	00		 mov	 r8d, 773		; 00000305H
  00020	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00027	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@OEBODMLH@debug_cycle?$AA@
  0002e	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN1@debug_cycl:

; 774  :     PySys_FormatStderr("gc: %s <%s %p>\n",
; 775  :                        msg, Py_TYPE(op)->tp_name, op);

  00033	48 8b 44 24 38	 mov	 rax, QWORD PTR op$[rsp]
  00038	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0003c	4c 8b 4c 24 38	 mov	 r9, QWORD PTR op$[rsp]
  00041	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  00045	48 8b 54 24 30	 mov	 rdx, QWORD PTR msg$[rsp]
  0004a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@PDJEBAFO@gc?3?5?$CFs?5?$DM?$CFs?5?$CFp?$DO?6?$AA@
  00051	e8 00 00 00 00	 call	 PySys_FormatStderr

; 776  : }

  00056	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0005a	c3		 ret	 0
debug_cycle ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CD@GAOLHDOE@gc?5couldn?8t?5create?5gc?4garbage?5li@ ; `string'
PUBLIC	??_C@_0BC@CEMELLLO@handle_finalizers?$AA@	; `string'
EXTRN	PyList_Append:PROC
EXTRN	PyList_New:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$handle_finalizers DD imagerel handle_finalizers
	DD	imagerel handle_finalizers+260
	DD	imagerel $unwind$handle_finalizers
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$handle_finalizers DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_0CD@GAOLHDOE@gc?5couldn?8t?5create?5gc?4garbage?5li@
CONST	SEGMENT
??_C@_0CD@GAOLHDOE@gc?5couldn?8t?5create?5gc?4garbage?5li@ DB 'gc couldn'''
	DB	't create gc.garbage list', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@CEMELLLO@handle_finalizers?$AA@
CONST	SEGMENT
??_C@_0BC@CEMELLLO@handle_finalizers?$AA@ DB 'handle_finalizers', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT handle_finalizers
_TEXT	SEGMENT
gc$ = 32
op$20764 = 40
tv79 = 48
finalizers$ = 80
old$ = 88
handle_finalizers PROC					; COMDAT

; 789  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 790  :     PyGC_Head *gc;
; 791  :     Py_GUARD

  0000e	e8 00 00 00 00	 call	 _Py_PXCTX
  00013	85 c0		 test	 eax, eax
  00015	74 1c		 je	 SHORT $LN9@handle_fin
  00017	45 33 c9	 xor	 r9d, r9d
  0001a	41 b8 17 03 00
	00		 mov	 r8d, 791		; 00000317H
  00020	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00027	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@CEMELLLO@handle_finalizers?$AA@
  0002e	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN9@handle_fin:

; 792  :     gc = finalizers->gc.gc_next;

  00033	48 8b 44 24 50	 mov	 rax, QWORD PTR finalizers$[rsp]
  00038	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0003b	48 89 44 24 20	 mov	 QWORD PTR gc$[rsp], rax

; 793  : 
; 794  :     if (garbage == NULL) {

  00040	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR garbage, 0
  00048	75 24		 jne	 SHORT $LN8@handle_fin

; 795  :         garbage = PyList_New(0);

  0004a	33 c9		 xor	 ecx, ecx
  0004c	e8 00 00 00 00	 call	 PyList_New
  00051	48 89 05 00 00
	00 00		 mov	 QWORD PTR garbage, rax

; 796  :         if (garbage == NULL)

  00058	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR garbage, 0
  00060	75 0c		 jne	 SHORT $LN7@handle_fin

; 797  :             Py_FatalError("gc couldn't create gc.garbage list");

  00062	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CD@GAOLHDOE@gc?5couldn?8t?5create?5gc?4garbage?5li@
  00069	e8 00 00 00 00	 call	 Py_FatalError
$LN7@handle_fin:
$LN8@handle_fin:

; 798  :     }
; 799  :     for (; gc != finalizers; gc = gc->gc.gc_next) {

  0006e	eb 0d		 jmp	 SHORT $LN6@handle_fin
$LN5@handle_fin:
  00070	48 8b 44 24 20	 mov	 rax, QWORD PTR gc$[rsp]
  00075	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00078	48 89 44 24 20	 mov	 QWORD PTR gc$[rsp], rax
$LN6@handle_fin:
  0007d	48 8b 44 24 50	 mov	 rax, QWORD PTR finalizers$[rsp]
  00082	48 39 44 24 20	 cmp	 QWORD PTR gc$[rsp], rax
  00087	74 65		 je	 SHORT $LN4@handle_fin

; 800  :         PyObject *op = FROM_GC(gc);

  00089	e8 00 00 00 00	 call	 _Py_PXCTX
  0008e	85 c0		 test	 eax, eax
  00090	74 0b		 je	 SHORT $LN12@handle_fin
  00092	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR tv79[rsp], 0
  0009b	eb 0e		 jmp	 SHORT $LN13@handle_fin
$LN12@handle_fin:
  0009d	48 8b 44 24 20	 mov	 rax, QWORD PTR gc$[rsp]
  000a2	48 83 c0 18	 add	 rax, 24
  000a6	48 89 44 24 30	 mov	 QWORD PTR tv79[rsp], rax
$LN13@handle_fin:
  000ab	48 8b 44 24 30	 mov	 rax, QWORD PTR tv79[rsp]
  000b0	48 89 44 24 28	 mov	 QWORD PTR op$20764[rsp], rax

; 801  : 
; 802  :         if ((debug & DEBUG_SAVEALL) || has_finalizer(op)) {

  000b5	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR debug
  000bb	83 e0 20	 and	 eax, 32			; 00000020H
  000be	85 c0		 test	 eax, eax
  000c0	75 0e		 jne	 SHORT $LN2@handle_fin
  000c2	48 8b 4c 24 28	 mov	 rcx, QWORD PTR op$20764[rsp]
  000c7	e8 00 00 00 00	 call	 has_finalizer
  000cc	85 c0		 test	 eax, eax
  000ce	74 1c		 je	 SHORT $LN3@handle_fin
$LN2@handle_fin:

; 803  :             if (PyList_Append(garbage, op) < 0)

  000d0	48 8b 54 24 28	 mov	 rdx, QWORD PTR op$20764[rsp]
  000d5	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR garbage
  000dc	e8 00 00 00 00	 call	 PyList_Append
  000e1	85 c0		 test	 eax, eax
  000e3	7d 07		 jge	 SHORT $LN1@handle_fin

; 804  :                 return -1;

  000e5	b8 ff ff ff ff	 mov	 eax, -1
  000ea	eb 13		 jmp	 SHORT $LN10@handle_fin
$LN1@handle_fin:
$LN3@handle_fin:

; 805  :         }
; 806  :     }

  000ec	eb 82		 jmp	 SHORT $LN5@handle_fin
$LN4@handle_fin:

; 807  : 
; 808  :     gc_list_merge(finalizers, old);

  000ee	48 8b 54 24 58	 mov	 rdx, QWORD PTR old$[rsp]
  000f3	48 8b 4c 24 50	 mov	 rcx, QWORD PTR finalizers$[rsp]
  000f8	e8 00 00 00 00	 call	 gc_list_merge

; 809  :     return 0;

  000fd	33 c0		 xor	 eax, eax
$LN10@handle_fin:

; 810  : }

  000ff	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00103	c3		 ret	 0
handle_finalizers ENDP
_TEXT	ENDS
PUBLIC	??_C@_0P@JMAJJBLG@delete_garbage?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$delete_garbage DD imagerel delete_garbage
	DD	imagerel delete_garbage+376
	DD	imagerel $unwind$delete_garbage
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$delete_garbage DD 010e01H
	DD	0c20eH
xdata	ENDS
;	COMDAT ??_C@_0P@JMAJJBLG@delete_garbage?$AA@
CONST	SEGMENT
??_C@_0P@JMAJJBLG@delete_garbage?$AA@ DB 'delete_garbage', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT delete_garbage
_TEXT	SEGMENT
clear$ = 48
gc$20783 = 56
op$20784 = 64
tv76 = 72
tv85 = 80
collectable$ = 112
old$ = 120
delete_garbage PROC					; COMDAT

; 818  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 819  :     inquiry clear;
; 820  :     Py_GUARD

  0000e	e8 00 00 00 00	 call	 _Py_PXCTX
  00013	85 c0		 test	 eax, eax
  00015	74 1c		 je	 SHORT $LN7@delete_gar
  00017	45 33 c9	 xor	 r9d, r9d
  0001a	41 b8 34 03 00
	00		 mov	 r8d, 820		; 00000334H
  00020	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00027	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@JMAJJBLG@delete_garbage?$AA@
  0002e	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN7@delete_gar:
$LN6@delete_gar:

; 821  : 
; 822  :     while (!gc_list_is_empty(collectable)) {

  00033	48 8b 4c 24 70	 mov	 rcx, QWORD PTR collectable$[rsp]
  00038	e8 00 00 00 00	 call	 gc_list_is_empty
  0003d	85 c0		 test	 eax, eax
  0003f	0f 85 2e 01 00
	00		 jne	 $LN5@delete_gar

; 823  :         PyGC_Head *gc = collectable->gc.gc_next;

  00045	48 8b 44 24 70	 mov	 rax, QWORD PTR collectable$[rsp]
  0004a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0004d	48 89 44 24 38	 mov	 QWORD PTR gc$20783[rsp], rax

; 824  :         PyObject *op = FROM_GC(gc);

  00052	e8 00 00 00 00	 call	 _Py_PXCTX
  00057	85 c0		 test	 eax, eax
  00059	74 0b		 je	 SHORT $LN10@delete_gar
  0005b	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR tv76[rsp], 0
  00064	eb 0e		 jmp	 SHORT $LN11@delete_gar
$LN10@delete_gar:
  00066	48 8b 44 24 38	 mov	 rax, QWORD PTR gc$20783[rsp]
  0006b	48 83 c0 18	 add	 rax, 24
  0006f	48 89 44 24 48	 mov	 QWORD PTR tv76[rsp], rax
$LN11@delete_gar:
  00074	48 8b 44 24 48	 mov	 rax, QWORD PTR tv76[rsp]
  00079	48 89 44 24 40	 mov	 QWORD PTR op$20784[rsp], rax

; 825  : 
; 826  :         assert(IS_TENTATIVELY_UNREACHABLE(op));

  0007e	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00086	4c 8b 4c 24 40	 mov	 r9, QWORD PTR op$20784[rsp]
  0008b	41 b8 3a 03 00
	00		 mov	 r8d, 826		; 0000033aH
  00091	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00098	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@JMAJJBLG@delete_garbage?$AA@
  0009f	e8 00 00 00 00	 call	 _PyParallel_Guard
  000a4	85 c0		 test	 eax, eax
  000a6	74 0b		 je	 SHORT $LN12@delete_gar
  000a8	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR tv85[rsp], 0
  000b1	eb 0e		 jmp	 SHORT $LN13@delete_gar
$LN12@delete_gar:
  000b3	48 8b 44 24 40	 mov	 rax, QWORD PTR op$20784[rsp]
  000b8	48 83 e8 18	 sub	 rax, 24
  000bc	48 89 44 24 50	 mov	 QWORD PTR tv85[rsp], rax
$LN13@delete_gar:
  000c1	48 8b 44 24 50	 mov	 rax, QWORD PTR tv85[rsp]
  000c6	48 83 78 10 fc	 cmp	 QWORD PTR [rax+16], -4
  000cb	74 1c		 je	 SHORT $LN14@delete_gar
  000cd	41 b8 3a 03 00
	00		 mov	 r8d, 826		; 0000033aH
  000d3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CM@JNCNOGAO@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAg?$AAc?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  000da	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@IMBHLDDA@?$AAI?$AAS?$AA_?$AAT?$AAE?$AAN?$AAT?$AAA?$AAT?$AAI?$AAV?$AAE?$AAL?$AAY?$AA_?$AAU?$AAN?$AAR?$AAE?$AAA?$AAC?$AAH?$AAA?$AAB?$AAL?$AAE?$AA?$CI?$AAo?$AAp?$AA?$CJ?$AA?$AA@
  000e1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000e7	33 c0		 xor	 eax, eax
$LN14@delete_gar:

; 827  :         if (debug & DEBUG_SAVEALL) {

  000e9	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR debug
  000ef	83 e0 20	 and	 eax, 32			; 00000020H
  000f2	85 c0		 test	 eax, eax
  000f4	74 13		 je	 SHORT $LN4@delete_gar

; 828  :             PyList_Append(garbage, op);

  000f6	48 8b 54 24 40	 mov	 rdx, QWORD PTR op$20784[rsp]
  000fb	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR garbage
  00102	e8 00 00 00 00	 call	 PyList_Append

; 829  :         }
; 830  :         else {

  00107	eb 3a		 jmp	 SHORT $LN3@delete_gar
$LN4@delete_gar:

; 831  :             if ((clear = Py_TYPE(op)->tp_clear) != NULL) {

  00109	48 8b 44 24 40	 mov	 rax, QWORD PTR op$20784[rsp]
  0010e	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00112	48 8b 80 18 01
	00 00		 mov	 rax, QWORD PTR [rax+280]
  00119	48 89 44 24 30	 mov	 QWORD PTR clear$[rsp], rax
  0011e	48 83 7c 24 30
	00		 cmp	 QWORD PTR clear$[rsp], 0
  00124	74 1d		 je	 SHORT $LN2@delete_gar

; 832  :                 Py_INCREF(op);

  00126	48 8b 4c 24 40	 mov	 rcx, QWORD PTR op$20784[rsp]
  0012b	e8 00 00 00 00	 call	 _Py_IncRef

; 833  :                 clear(op);

  00130	48 8b 4c 24 40	 mov	 rcx, QWORD PTR op$20784[rsp]
  00135	ff 54 24 30	 call	 QWORD PTR clear$[rsp]

; 834  :                 Py_DECREF(op);

  00139	48 8b 4c 24 40	 mov	 rcx, QWORD PTR op$20784[rsp]
  0013e	e8 00 00 00 00	 call	 _Py_DecRef
$LN2@delete_gar:
$LN3@delete_gar:

; 835  :             }
; 836  :         }
; 837  :         if (collectable->gc.gc_next == gc) {

  00143	48 8b 44 24 70	 mov	 rax, QWORD PTR collectable$[rsp]
  00148	48 8b 4c 24 38	 mov	 rcx, QWORD PTR gc$20783[rsp]
  0014d	48 39 08	 cmp	 QWORD PTR [rax], rcx
  00150	75 1c		 jne	 SHORT $LN1@delete_gar

; 838  :             /* object is still alive, move it, it may die later */
; 839  :             gc_list_move(gc, old);

  00152	48 8b 54 24 78	 mov	 rdx, QWORD PTR old$[rsp]
  00157	48 8b 4c 24 38	 mov	 rcx, QWORD PTR gc$20783[rsp]
  0015c	e8 00 00 00 00	 call	 gc_list_move

; 840  :             gc->gc.gc_refs = GC_REACHABLE;

  00161	48 8b 44 24 38	 mov	 rax, QWORD PTR gc$20783[rsp]
  00166	48 c7 40 10 fd
	ff ff ff	 mov	 QWORD PTR [rax+16], -3
$LN1@delete_gar:

; 841  :         }
; 842  :     }

  0016e	e9 c0 fe ff ff	 jmp	 $LN6@delete_gar
$LN5@delete_gar:

; 843  : }

  00173	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00177	c3		 ret	 0
delete_garbage ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BA@HKHHNIOB@clear_freelists?$AA@		; `string'
EXTRN	PySet_ClearFreeList:PROC
EXTRN	PyDict_ClearFreeList:PROC
EXTRN	PyList_ClearFreeList:PROC
EXTRN	PyFloat_ClearFreeList:PROC
EXTRN	PyUnicode_ClearFreeList:PROC
EXTRN	PyTuple_ClearFreeList:PROC
EXTRN	PyCFunction_ClearFreeList:PROC
EXTRN	PyFrame_ClearFreeList:PROC
EXTRN	PyMethod_ClearFreeList:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$clear_freelists DD imagerel clear_freelists
	DD	imagerel clear_freelists+91
	DD	imagerel $unwind$clear_freelists
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$clear_freelists DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT ??_C@_0BA@HKHHNIOB@clear_freelists?$AA@
CONST	SEGMENT
??_C@_0BA@HKHHNIOB@clear_freelists?$AA@ DB 'clear_freelists', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT clear_freelists
_TEXT	SEGMENT
clear_freelists PROC					; COMDAT

; 852  : {

  00000	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 853  :     Py_GUARD

  00004	e8 00 00 00 00	 call	 _Py_PXCTX
  00009	85 c0		 test	 eax, eax
  0000b	74 1c		 je	 SHORT $LN1@clear_free
  0000d	45 33 c9	 xor	 r9d, r9d
  00010	41 b8 55 03 00
	00		 mov	 r8d, 853		; 00000355H
  00016	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@HKHHNIOB@clear_freelists?$AA@
  00024	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN1@clear_free:

; 854  :     (void)PyMethod_ClearFreeList();

  00029	e8 00 00 00 00	 call	 PyMethod_ClearFreeList

; 855  :     (void)PyFrame_ClearFreeList();

  0002e	e8 00 00 00 00	 call	 PyFrame_ClearFreeList

; 856  :     (void)PyCFunction_ClearFreeList();

  00033	e8 00 00 00 00	 call	 PyCFunction_ClearFreeList

; 857  :     (void)PyTuple_ClearFreeList();

  00038	e8 00 00 00 00	 call	 PyTuple_ClearFreeList

; 858  :     (void)PyUnicode_ClearFreeList();

  0003d	e8 00 00 00 00	 call	 PyUnicode_ClearFreeList

; 859  :     (void)PyFloat_ClearFreeList();

  00042	e8 00 00 00 00	 call	 PyFloat_ClearFreeList

; 860  :     (void)PyList_ClearFreeList();

  00047	e8 00 00 00 00	 call	 PyList_ClearFreeList

; 861  :     (void)PyDict_ClearFreeList();

  0004c	e8 00 00 00 00	 call	 PyDict_ClearFreeList

; 862  :     (void)PySet_ClearFreeList();

  00051	e8 00 00 00 00	 call	 PySet_ClearFreeList

; 863  : }

  00056	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0005a	c3		 ret	 0
clear_freelists ENDP
_TEXT	ENDS
EXTRN	PyFloat_AsDouble:PROC
EXTRN	PyFloat_Type:BYTE
EXTRN	PyErr_Clear:PROC
EXTRN	_PyObject_CallMethodId:PROC
EXTRN	_tls_index:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$get_time DD imagerel get_time
	DD	imagerel get_time+172
	DD	imagerel $unwind$get_time
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$get_time DD 010401H
	DD	06204H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT get_time
_TEXT	SEGMENT
result$ = 32
f$20822 = 40
get_time PROC						; COMDAT

; 867  : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 868  :     double result = 0;

  00004	66 0f 57 c0	 xorpd	 xmm0, xmm0
  00008	f2 0f 11 44 24
	20		 movsdx	 QWORD PTR result$[rsp], xmm0

; 869  :     if (tmod != NULL) {

  0000e	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR tmod, 0
  00016	0f 84 85 00 00
	00		 je	 $LN5@get_time

; 870  :         _Py_IDENTIFIER(time);
; 871  : 
; 872  :         PyObject *f = _PyObject_CallMethodId(tmod, &PyId_time, NULL);

  0001c	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId_time@?2??get_time@@9@9
  00021	8b c0		 mov	 eax, eax
  00023	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00029	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00032	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00036	45 33 c0	 xor	 r8d, r8d
  00039	48 8b d0	 mov	 rdx, rax
  0003c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR tmod
  00043	e8 00 00 00 00	 call	 _PyObject_CallMethodId
  00048	48 89 44 24 28	 mov	 QWORD PTR f$20822[rsp], rax

; 873  :         if (f == NULL) {

  0004d	48 83 7c 24 28
	00		 cmp	 QWORD PTR f$20822[rsp], 0
  00053	75 07		 jne	 SHORT $LN4@get_time

; 874  :             PyErr_Clear();

  00055	e8 00 00 00 00	 call	 PyErr_Clear

; 875  :         }
; 876  :         else {

  0005a	eb 45		 jmp	 SHORT $LN3@get_time
$LN4@get_time:

; 877  :             if (PyFloat_Check(f))

  0005c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyFloat_Type
  00063	48 8b 4c 24 28	 mov	 rcx, QWORD PTR f$20822[rsp]
  00068	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0006c	74 19		 je	 SHORT $LN1@get_time
  0006e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyFloat_Type
  00075	48 8b 44 24 28	 mov	 rax, QWORD PTR f$20822[rsp]
  0007a	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  0007e	e8 00 00 00 00	 call	 PyType_IsSubtype
  00083	85 c0		 test	 eax, eax
  00085	74 10		 je	 SHORT $LN2@get_time
$LN1@get_time:

; 878  :                 result = PyFloat_AsDouble(f);

  00087	48 8b 4c 24 28	 mov	 rcx, QWORD PTR f$20822[rsp]
  0008c	e8 00 00 00 00	 call	 PyFloat_AsDouble
  00091	f2 0f 11 44 24
	20		 movsdx	 QWORD PTR result$[rsp], xmm0
$LN2@get_time:

; 879  :             Py_DECREF(f);

  00097	48 8b 4c 24 28	 mov	 rcx, QWORD PTR f$20822[rsp]
  0009c	e8 00 00 00 00	 call	 _Py_DecRef
$LN3@get_time:
$LN5@get_time:

; 880  :         }
; 881  :     }
; 882  :     return result;

  000a1	f2 0f 10 44 24
	20		 movsdx	 xmm0, QWORD PTR result$[rsp]

; 883  : }

  000a7	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000ab	c3		 ret	 0
get_time ENDP
_TEXT	ENDS
PUBLIC	??_C@_02CBOIKDCO@sO?$AA@			; `string'
PUBLIC	??_C@_08FNBHHBLM@?$HLsisnsn?$HN?$AA@		; `string'
PUBLIC	??_C@_09EDFGPGDN@collected?$AA@			; `string'
PUBLIC	??_C@_1GE@GHLPILIA@?$AAc?$AAa?$AAl?$AAl?$AAb?$AAa?$AAc?$AAk?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAP?$AAy?$AAL?$AAi?$AAs?$AAt?$AA_?$AAC?$AAh?$AAe?$AAc@ ; `string'
PUBLIC	??_C@_0BD@JLCHLHKC@invoke_gc_callback?$AA@	; `string'
EXTRN	PyObject_CallFunction:PROC
EXTRN	Py_BuildValue:PROC
EXTRN	PyList_Type:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$invoke_gc_callback DD imagerel invoke_gc_callback
	DD	imagerel invoke_gc_callback+445
	DD	imagerel $unwind$invoke_gc_callback
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$invoke_gc_callback DD 011701H
	DD	0c217H
xdata	ENDS
;	COMDAT ??_C@_02CBOIKDCO@sO?$AA@
CONST	SEGMENT
??_C@_02CBOIKDCO@sO?$AA@ DB 'sO', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08FNBHHBLM@?$HLsisnsn?$HN?$AA@
CONST	SEGMENT
??_C@_08FNBHHBLM@?$HLsisnsn?$HN?$AA@ DB '{sisnsn}', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09EDFGPGDN@collected?$AA@
CONST	SEGMENT
??_C@_09EDFGPGDN@collected?$AA@ DB 'collected', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1GE@GHLPILIA@?$AAc?$AAa?$AAl?$AAl?$AAb?$AAa?$AAc?$AAk?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAP?$AAy?$AAL?$AAi?$AAs?$AAt?$AA_?$AAC?$AAh?$AAe?$AAc@
CONST	SEGMENT
??_C@_1GE@GHLPILIA@?$AAc?$AAa?$AAl?$AAl?$AAb?$AAa?$AAc?$AAk?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAP?$AAy?$AAL?$AAi?$AAs?$AAt?$AA_?$AAC?$AAh?$AAe?$AAc@ DB 'c'
	DB	00H, 'a', 00H, 'l', 00H, 'l', 00H, 'b', 00H, 'a', 00H, 'c', 00H
	DB	'k', 00H, 's', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, 'N'
	DB	00H, 'U', 00H, 'L', 00H, 'L', 00H, ' ', 00H, '&', 00H, '&', 00H
	DB	' ', 00H, 'P', 00H, 'y', 00H, 'L', 00H, 'i', 00H, 's', 00H, 't'
	DB	00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H
	DB	'E', 00H, 'x', 00H, 'a', 00H, 'c', 00H, 't', 00H, '(', 00H, 'c'
	DB	00H, 'a', 00H, 'l', 00H, 'l', 00H, 'b', 00H, 'a', 00H, 'c', 00H
	DB	'k', 00H, 's', 00H, ')', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@JLCHLHKC@invoke_gc_callback?$AA@
CONST	SEGMENT
??_C@_0BD@JLCHLHKC@invoke_gc_callback?$AA@ DB 'invoke_gc_callback', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT invoke_gc_callback
_TEXT	SEGMENT
i$ = 64
info$ = 72
r$20938 = 80
cb$20939 = 88
phase$ = 112
generation$ = 120
collected$ = 128
uncollectable$ = 136
invoke_gc_callback PROC					; COMDAT

; 1054 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 1055 :     Py_ssize_t i;
; 1056 :     PyObject *info = NULL;

  00017	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR info$[rsp], 0

; 1057 :     Py_GUARD

  00020	e8 00 00 00 00	 call	 _Py_PXCTX
  00025	85 c0		 test	 eax, eax
  00027	74 1c		 je	 SHORT $LN16@invoke_gc_
  00029	45 33 c9	 xor	 r9d, r9d
  0002c	41 b8 21 04 00
	00		 mov	 r8d, 1057		; 00000421H
  00032	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00039	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@JLCHLHKC@invoke_gc_callback?$AA@
  00040	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN16@invoke_gc_:

; 1058 : 
; 1059 :     /* we may get called very early */
; 1060 :     if (callbacks == NULL)

  00045	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR callbacks, 0
  0004d	75 05		 jne	 SHORT $LN15@invoke_gc_

; 1061 :         return;

  0004f	e9 64 01 00 00	 jmp	 $LN17@invoke_gc_
$LN15@invoke_gc_:

; 1062 :     /* The local variable cannot be rebound, check it for sanity */
; 1063 :     assert(callbacks != NULL && PyList_CheckExact(callbacks));

  00054	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR callbacks, 0
  0005c	74 14		 je	 SHORT $LN19@invoke_gc_
  0005e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyList_Type
  00065	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR callbacks
  0006c	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00070	74 1c		 je	 SHORT $LN20@invoke_gc_
$LN19@invoke_gc_:
  00072	41 b8 27 04 00
	00		 mov	 r8d, 1063		; 00000427H
  00078	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CM@JNCNOGAO@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAg?$AAc?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  0007f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1GE@GHLPILIA@?$AAc?$AAa?$AAl?$AAl?$AAb?$AAa?$AAc?$AAk?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAP?$AAy?$AAL?$AAi?$AAs?$AAt?$AA_?$AAC?$AAh?$AAe?$AAc@
  00086	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0008c	33 c0		 xor	 eax, eax
$LN20@invoke_gc_:

; 1064 :     if (PyList_GET_SIZE(callbacks) != 0) {

  0008e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR callbacks
  00095	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  0009a	74 5e		 je	 SHORT $LN14@invoke_gc_

; 1065 :         info = Py_BuildValue("{sisnsn}",
; 1066 :             "generation", generation,
; 1067 :             "collected", collected,
; 1068 :             "uncollectable", uncollectable);

  0009c	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR uncollectable$[rsp]
  000a4	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  000a9	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0O@IHCNLMBF@uncollectable?$AA@
  000b0	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000b5	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR collected$[rsp]
  000bd	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000c2	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:??_C@_09EDFGPGDN@collected?$AA@
  000c9	44 8b 44 24 78	 mov	 r8d, DWORD PTR generation$[rsp]
  000ce	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@JMCFNPDK@generation?$AA@
  000d5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08FNBHHBLM@?$HLsisnsn?$HN?$AA@
  000dc	e8 00 00 00 00	 call	 Py_BuildValue
  000e1	48 89 44 24 48	 mov	 QWORD PTR info$[rsp], rax

; 1069 :         if (info == NULL) {

  000e6	48 83 7c 24 48
	00		 cmp	 QWORD PTR info$[rsp], 0
  000ec	75 0c		 jne	 SHORT $LN13@invoke_gc_

; 1070 :             PyErr_WriteUnraisable(NULL);

  000ee	33 c9		 xor	 ecx, ecx
  000f0	e8 00 00 00 00	 call	 PyErr_WriteUnraisable

; 1071 :             return;

  000f5	e9 be 00 00 00	 jmp	 $LN17@invoke_gc_
$LN13@invoke_gc_:
$LN14@invoke_gc_:

; 1072 :         }
; 1073 :     }
; 1074 :     for (i=0; i<PyList_GET_SIZE(callbacks); i++) {

  000fa	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  00103	eb 0d		 jmp	 SHORT $LN12@invoke_gc_
$LN11@invoke_gc_:
  00105	48 8b 44 24 40	 mov	 rax, QWORD PTR i$[rsp]
  0010a	48 ff c0	 inc	 rax
  0010d	48 89 44 24 40	 mov	 QWORD PTR i$[rsp], rax
$LN12@invoke_gc_:
  00112	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR callbacks
  00119	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0011d	48 39 44 24 40	 cmp	 QWORD PTR i$[rsp], rax
  00122	7d 7c		 jge	 SHORT $LN10@invoke_gc_

; 1075 :         PyObject *r, *cb = PyList_GET_ITEM(callbacks, i);

  00124	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR callbacks
  0012b	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  0012f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR i$[rsp]
  00134	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  00138	48 89 44 24 58	 mov	 QWORD PTR cb$20939[rsp], rax

; 1076 :         Py_INCREF(cb); /* make sure cb doesn't go away */

  0013d	48 8b 4c 24 58	 mov	 rcx, QWORD PTR cb$20939[rsp]
  00142	e8 00 00 00 00	 call	 _Py_IncRef

; 1077 :         r = PyObject_CallFunction(cb, "sO", phase, info);

  00147	4c 8b 4c 24 48	 mov	 r9, QWORD PTR info$[rsp]
  0014c	4c 8b 44 24 70	 mov	 r8, QWORD PTR phase$[rsp]
  00151	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_02CBOIKDCO@sO?$AA@
  00158	48 8b 4c 24 58	 mov	 rcx, QWORD PTR cb$20939[rsp]
  0015d	e8 00 00 00 00	 call	 PyObject_CallFunction
  00162	48 89 44 24 50	 mov	 QWORD PTR r$20938[rsp], rax
$LN9@invoke_gc_:

; 1078 :         Py_XDECREF(r);

  00167	48 83 7c 24 50
	00		 cmp	 QWORD PTR r$20938[rsp], 0
  0016d	74 0a		 je	 SHORT $LN6@invoke_gc_
  0016f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR r$20938[rsp]
  00174	e8 00 00 00 00	 call	 _Py_DecRef
$LN6@invoke_gc_:
  00179	33 c0		 xor	 eax, eax
  0017b	85 c0		 test	 eax, eax
  0017d	75 e8		 jne	 SHORT $LN9@invoke_gc_

; 1079 :         if (r == NULL)

  0017f	48 83 7c 24 50
	00		 cmp	 QWORD PTR r$20938[rsp], 0
  00185	75 0a		 jne	 SHORT $LN5@invoke_gc_

; 1080 :             PyErr_WriteUnraisable(cb);

  00187	48 8b 4c 24 58	 mov	 rcx, QWORD PTR cb$20939[rsp]
  0018c	e8 00 00 00 00	 call	 PyErr_WriteUnraisable
$LN5@invoke_gc_:

; 1081 :         Py_DECREF(cb);

  00191	48 8b 4c 24 58	 mov	 rcx, QWORD PTR cb$20939[rsp]
  00196	e8 00 00 00 00	 call	 _Py_DecRef

; 1082 :     }

  0019b	e9 65 ff ff ff	 jmp	 $LN11@invoke_gc_
$LN10@invoke_gc_:
$LN4@invoke_gc_:

; 1083 :     Py_XDECREF(info);

  001a0	48 83 7c 24 48
	00		 cmp	 QWORD PTR info$[rsp], 0
  001a6	74 0a		 je	 SHORT $LN1@invoke_gc_
  001a8	48 8b 4c 24 48	 mov	 rcx, QWORD PTR info$[rsp]
  001ad	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@invoke_gc_:
  001b2	33 c0		 xor	 eax, eax
  001b4	85 c0		 test	 eax, eax
  001b6	75 e8		 jne	 SHORT $LN4@invoke_gc_
$LN17@invoke_gc_:

; 1084 : }

  001b8	48 83 c4 68	 add	 rsp, 104		; 00000068H
  001bc	c3		 ret	 0
invoke_gc_callback ENDP
_TEXT	ENDS
PUBLIC	??_C@_0M@CGAHFNPH@i?3set_debug?$AA@		; `string'
PUBLIC	??_C@_0N@OKJCNDAH@gc_set_debug?$AA@		; `string'
EXTRN	PyArg_ParseTuple:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$gc_set_debug DD imagerel gc_set_debug
	DD	imagerel gc_set_debug+107
	DD	imagerel $unwind$gc_set_debug
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gc_set_debug DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT ??_C@_0M@CGAHFNPH@i?3set_debug?$AA@
CONST	SEGMENT
??_C@_0M@CGAHFNPH@i?3set_debug?$AA@ DB 'i:set_debug', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@OKJCNDAH@gc_set_debug?$AA@
CONST	SEGMENT
??_C@_0N@OKJCNDAH@gc_set_debug?$AA@ DB 'gc_set_debug', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT gc_set_debug
_TEXT	SEGMENT
self$ = 48
args$ = 56
gc_set_debug PROC					; COMDAT

; 1217 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1218 :     Py_GUARD

  0000e	e8 00 00 00 00	 call	 _Py_PXCTX
  00013	85 c0		 test	 eax, eax
  00015	74 1c		 je	 SHORT $LN2@gc_set_deb
  00017	45 33 c9	 xor	 r9d, r9d
  0001a	41 b8 c2 04 00
	00		 mov	 r8d, 1218		; 000004c2H
  00020	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00027	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@OKJCNDAH@gc_set_debug?$AA@
  0002e	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN2@gc_set_deb:

; 1219 :     if (!PyArg_ParseTuple(args, "i:set_debug", &debug))

  00033	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:debug
  0003a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@CGAHFNPH@i?3set_debug?$AA@
  00041	48 8b 4c 24 38	 mov	 rcx, QWORD PTR args$[rsp]
  00046	e8 00 00 00 00	 call	 PyArg_ParseTuple
  0004b	85 c0		 test	 eax, eax
  0004d	75 04		 jne	 SHORT $LN1@gc_set_deb

; 1220 :         return NULL;

  0004f	33 c0		 xor	 eax, eax
  00051	eb 13		 jmp	 SHORT $LN3@gc_set_deb
$LN1@gc_set_deb:

; 1221 : 
; 1222 :     Py_INCREF(Py_None);

  00053	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  0005a	e8 00 00 00 00	 call	 _Py_IncRef

; 1223 :     return Py_None;

  0005f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
$LN3@gc_set_deb:

; 1224 : }

  00066	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006a	c3		 ret	 0
gc_set_debug ENDP
_TEXT	ENDS
PUBLIC	??_C@_01KBJDNOO@i?$AA@				; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$gc_get_debug DD imagerel gc_get_debug
	DD	imagerel gc_get_debug+37
	DD	imagerel $unwind$gc_get_debug
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gc_get_debug DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT ??_C@_01KBJDNOO@i?$AA@
CONST	SEGMENT
??_C@_01KBJDNOO@i?$AA@ DB 'i', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT gc_get_debug
_TEXT	SEGMENT
self$ = 48
noargs$ = 56
gc_get_debug PROC					; COMDAT

; 1233 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1234 :     return Py_BuildValue("i", debug);

  0000e	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR debug
  00014	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01KBJDNOO@i?$AA@
  0001b	e8 00 00 00 00	 call	 Py_BuildValue

; 1235 : }

  00020	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00024	c3		 ret	 0
gc_get_debug ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BD@HJLPPHGE@i?$HMii?3set_threshold?$AA@	; `string'
PUBLIC	??_C@_0O@MDDMKCHO@gc_set_thresh?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$gc_set_thresh DD imagerel gc_set_thresh
	DD	imagerel gc_set_thresh+192
	DD	imagerel $unwind$gc_set_thresh
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gc_set_thresh DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_0BD@HJLPPHGE@i?$HMii?3set_threshold?$AA@
CONST	SEGMENT
??_C@_0BD@HJLPPHGE@i?$HMii?3set_threshold?$AA@ DB 'i|ii:set_threshold', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@MDDMKCHO@gc_set_thresh?$AA@
CONST	SEGMENT
??_C@_0O@MDDMKCHO@gc_set_thresh?$AA@ DB 'gc_set_thresh', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT gc_set_thresh
_TEXT	SEGMENT
i$ = 48
self$ = 80
args$ = 88
gc_set_thresh PROC					; COMDAT

; 1245 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1246 :     int i;
; 1247 :     Py_GUARD

  0000e	e8 00 00 00 00	 call	 _Py_PXCTX
  00013	85 c0		 test	 eax, eax
  00015	74 1c		 je	 SHORT $LN5@gc_set_thr
  00017	45 33 c9	 xor	 r9d, r9d
  0001a	41 b8 df 04 00
	00		 mov	 r8d, 1247		; 000004dfH
  00020	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00027	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@MDDMKCHO@gc_set_thresh?$AA@
  0002e	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN5@gc_set_thr:

; 1248 :     if (!PyArg_ParseTuple(args, "i|ii:set_threshold",
; 1249 :                           &generations[0].threshold,
; 1250 :                           &generations[1].threshold,
; 1251 :                           &generations[2].threshold))

  00033	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:generations
  0003a	48 83 c0 58	 add	 rax, 88			; 00000058H
  0003e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:generations
  00045	48 83 c1 38	 add	 rcx, 56			; 00000038H
  00049	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0004e	4c 8b c9	 mov	 r9, rcx
  00051	4c 8d 05 18 00
	00 00		 lea	 r8, OFFSET FLAT:generations+24
  00058	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@HJLPPHGE@i?$HMii?3set_threshold?$AA@
  0005f	48 8b 4c 24 58	 mov	 rcx, QWORD PTR args$[rsp]
  00064	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00069	85 c0		 test	 eax, eax
  0006b	75 04		 jne	 SHORT $LN4@gc_set_thr

; 1252 :         return NULL;

  0006d	33 c0		 xor	 eax, eax
  0006f	eb 4a		 jmp	 SHORT $LN6@gc_set_thr
$LN4@gc_set_thr:

; 1253 :     for (i = 2; i < NUM_GENERATIONS; i++) {

  00071	c7 44 24 30 02
	00 00 00	 mov	 DWORD PTR i$[rsp], 2
  00079	eb 0a		 jmp	 SHORT $LN3@gc_set_thr
$LN2@gc_set_thr:
  0007b	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  0007f	ff c0		 inc	 eax
  00081	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN3@gc_set_thr:
  00085	83 7c 24 30 03	 cmp	 DWORD PTR i$[rsp], 3
  0008a	7d 1c		 jge	 SHORT $LN1@gc_set_thr

; 1254 :         /* generations higher than 2 get the same threshold */
; 1255 :         generations[i].threshold = generations[2].threshold;

  0008c	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$[rsp]
  00091	48 6b c0 20	 imul	 rax, 32			; 00000020H
  00095	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:generations
  0009c	8b 15 58 00 00
	00		 mov	 edx, DWORD PTR generations+88
  000a2	89 54 01 18	 mov	 DWORD PTR [rcx+rax+24], edx

; 1256 :     }

  000a6	eb d3		 jmp	 SHORT $LN2@gc_set_thr
$LN1@gc_set_thr:

; 1257 : 
; 1258 :     Py_INCREF(Py_None);

  000a8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  000af	e8 00 00 00 00	 call	 _Py_IncRef

; 1259 :     return Py_None;

  000b4	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
$LN6@gc_set_thr:

; 1260 : }

  000bb	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000bf	c3		 ret	 0
gc_set_thresh ENDP
_TEXT	ENDS
PUBLIC	??_C@_05HEIOBLPG@?$CIiii?$CJ?$AA@		; `string'
PUBLIC	??_C@_0O@NNBDBFDH@gc_get_thresh?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$gc_get_thresh DD imagerel gc_get_thresh
	DD	imagerel gc_get_thresh+88
	DD	imagerel $unwind$gc_get_thresh
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gc_get_thresh DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT ??_C@_05HEIOBLPG@?$CIiii?$CJ?$AA@
CONST	SEGMENT
??_C@_05HEIOBLPG@?$CIiii?$CJ?$AA@ DB '(iii)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@NNBDBFDH@gc_get_thresh?$AA@
CONST	SEGMENT
??_C@_0O@NNBDBFDH@gc_get_thresh?$AA@ DB 'gc_get_thresh', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT gc_get_thresh
_TEXT	SEGMENT
self$ = 48
noargs$ = 56
gc_get_thresh PROC					; COMDAT

; 1269 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1270 :     Py_GUARD

  0000e	e8 00 00 00 00	 call	 _Py_PXCTX
  00013	85 c0		 test	 eax, eax
  00015	74 1c		 je	 SHORT $LN1@gc_get_thr
  00017	45 33 c9	 xor	 r9d, r9d
  0001a	41 b8 f6 04 00
	00		 mov	 r8d, 1270		; 000004f6H
  00020	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00027	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@NNBDBFDH@gc_get_thresh?$AA@
  0002e	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN1@gc_get_thr:

; 1271 :     return Py_BuildValue("(iii)",
; 1272 :                          generations[0].threshold,
; 1273 :                          generations[1].threshold,
; 1274 :                          generations[2].threshold);

  00033	44 8b 0d 58 00
	00 00		 mov	 r9d, DWORD PTR generations+88
  0003a	44 8b 05 38 00
	00 00		 mov	 r8d, DWORD PTR generations+56
  00041	8b 15 18 00 00
	00		 mov	 edx, DWORD PTR generations+24
  00047	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05HEIOBLPG@?$CIiii?$CJ?$AA@
  0004e	e8 00 00 00 00	 call	 Py_BuildValue

; 1275 : }

  00053	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00057	c3		 ret	 0
gc_get_thresh ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@CPDALIKJ@gc_get_count?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$gc_get_count DD imagerel gc_get_count
	DD	imagerel gc_get_count+88
	DD	imagerel $unwind$gc_get_count
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gc_get_count DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT ??_C@_0N@CPDALIKJ@gc_get_count?$AA@
CONST	SEGMENT
??_C@_0N@CPDALIKJ@gc_get_count?$AA@ DB 'gc_get_count', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT gc_get_count
_TEXT	SEGMENT
self$ = 48
noargs$ = 56
gc_get_count PROC					; COMDAT

; 1284 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1285 :     Py_GUARD

  0000e	e8 00 00 00 00	 call	 _Py_PXCTX
  00013	85 c0		 test	 eax, eax
  00015	74 1c		 je	 SHORT $LN1@gc_get_cou
  00017	45 33 c9	 xor	 r9d, r9d
  0001a	41 b8 05 05 00
	00		 mov	 r8d, 1285		; 00000505H
  00020	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00027	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@CPDALIKJ@gc_get_count?$AA@
  0002e	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN1@gc_get_cou:

; 1286 :     return Py_BuildValue("(iii)",
; 1287 :                          generations[0].count,
; 1288 :                          generations[1].count,
; 1289 :                          generations[2].count);

  00033	44 8b 0d 5c 00
	00 00		 mov	 r9d, DWORD PTR generations+92
  0003a	44 8b 05 3c 00
	00 00		 mov	 r8d, DWORD PTR generations+60
  00041	8b 15 1c 00 00
	00		 mov	 edx, DWORD PTR generations+28
  00047	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05HEIOBLPG@?$CIiii?$CJ?$AA@
  0004e	e8 00 00 00 00	 call	 Py_BuildValue

; 1290 : }

  00053	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00057	c3		 ret	 0
gc_get_count ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BB@CIBMDBHP@gc_get_referrers?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$gc_get_referrers DD imagerel gc_get_referrers
	DD	imagerel gc_get_referrers+172
	DD	imagerel $unwind$gc_get_referrers
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gc_get_referrers DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT ??_C@_0BB@CIBMDBHP@gc_get_referrers?$AA@
CONST	SEGMENT
??_C@_0BB@CIBMDBHP@gc_get_referrers?$AA@ DB 'gc_get_referrers', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT gc_get_referrers
_TEXT	SEGMENT
i$ = 32
result$ = 40
self$ = 64
args$ = 72
gc_get_referrers PROC					; COMDAT

; 1329 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1330 :     int i;
; 1331 :     PyObject *result;
; 1332 :     Py_GUARD

  0000e	e8 00 00 00 00	 call	 _Py_PXCTX
  00013	85 c0		 test	 eax, eax
  00015	74 1c		 je	 SHORT $LN6@gc_get_ref
  00017	45 33 c9	 xor	 r9d, r9d
  0001a	41 b8 34 05 00
	00		 mov	 r8d, 1332		; 00000534H
  00020	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00027	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@CIBMDBHP@gc_get_referrers?$AA@
  0002e	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN6@gc_get_ref:

; 1333 :     result = PyList_New(0);

  00033	33 c9		 xor	 ecx, ecx
  00035	e8 00 00 00 00	 call	 PyList_New
  0003a	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax

; 1334 :     if (!result) return NULL;

  0003f	48 83 7c 24 28
	00		 cmp	 QWORD PTR result$[rsp], 0
  00045	75 04		 jne	 SHORT $LN5@gc_get_ref
  00047	33 c0		 xor	 eax, eax
  00049	eb 5c		 jmp	 SHORT $LN7@gc_get_ref
$LN5@gc_get_ref:

; 1335 : 
; 1336 :     for (i = 0; i < NUM_GENERATIONS; i++) {

  0004b	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00053	eb 0a		 jmp	 SHORT $LN4@gc_get_ref
$LN3@gc_get_ref:
  00055	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  00059	ff c0		 inc	 eax
  0005b	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN4@gc_get_ref:
  0005f	83 7c 24 20 03	 cmp	 DWORD PTR i$[rsp], 3
  00064	7d 3c		 jge	 SHORT $LN2@gc_get_ref

; 1337 :         if (!(gc_referrers_for(args, GEN_HEAD(i), result))) {

  00066	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  0006b	48 6b c0 20	 imul	 rax, 32			; 00000020H
  0006f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:generations
  00076	48 03 c8	 add	 rcx, rax
  00079	48 8b c1	 mov	 rax, rcx
  0007c	4c 8b 44 24 28	 mov	 r8, QWORD PTR result$[rsp]
  00081	48 8b d0	 mov	 rdx, rax
  00084	48 8b 4c 24 48	 mov	 rcx, QWORD PTR args$[rsp]
  00089	e8 00 00 00 00	 call	 gc_referrers_for
  0008e	85 c0		 test	 eax, eax
  00090	75 0e		 jne	 SHORT $LN1@gc_get_ref

; 1338 :             Py_DECREF(result);

  00092	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  00097	e8 00 00 00 00	 call	 _Py_DecRef

; 1339 :             return NULL;

  0009c	33 c0		 xor	 eax, eax
  0009e	eb 07		 jmp	 SHORT $LN7@gc_get_ref
$LN1@gc_get_ref:

; 1340 :         }
; 1341 :     }

  000a0	eb b3		 jmp	 SHORT $LN3@gc_get_ref
$LN2@gc_get_ref:

; 1342 :     return result;

  000a2	48 8b 44 24 28	 mov	 rax, QWORD PTR result$[rsp]
$LN7@gc_get_ref:

; 1343 : }

  000a7	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000ab	c3		 ret	 0
gc_get_referrers ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BB@OJOBBPAC@gc_referrers_for?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$gc_referrers_for DD imagerel gc_referrers_for
	DD	imagerel gc_referrers_for+254
	DD	imagerel $unwind$gc_referrers_for
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gc_referrers_for DD 011301H
	DD	08213H
xdata	ENDS
;	COMDAT ??_C@_0BB@OJOBBPAC@gc_referrers_for?$AA@
CONST	SEGMENT
??_C@_0BB@OJOBBPAC@gc_referrers_for?$AA@ DB 'gc_referrers_for', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT gc_referrers_for
_TEXT	SEGMENT
traverse$ = 32
gc$ = 40
obj$ = 48
tv74 = 56
objs$ = 80
list$ = 88
resultlist$ = 96
gc_referrers_for PROC					; COMDAT

; 1305 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1306 :     PyGC_Head *gc;
; 1307 :     PyObject *obj;
; 1308 :     traverseproc traverse;
; 1309 :     Py_GUARD

  00013	e8 00 00 00 00	 call	 _Py_PXCTX
  00018	85 c0		 test	 eax, eax
  0001a	74 1c		 je	 SHORT $LN8@gc_referre
  0001c	45 33 c9	 xor	 r9d, r9d
  0001f	41 b8 1d 05 00
	00		 mov	 r8d, 1309		; 0000051dH
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@OJOBBPAC@gc_referrers_for?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN8@gc_referre:

; 1310 :     for (gc = list->gc.gc_next; gc != list; gc = gc->gc.gc_next) {

  00038	48 8b 44 24 58	 mov	 rax, QWORD PTR list$[rsp]
  0003d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00040	48 89 44 24 28	 mov	 QWORD PTR gc$[rsp], rax
  00045	eb 0d		 jmp	 SHORT $LN7@gc_referre
$LN6@gc_referre:
  00047	48 8b 44 24 28	 mov	 rax, QWORD PTR gc$[rsp]
  0004c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0004f	48 89 44 24 28	 mov	 QWORD PTR gc$[rsp], rax
$LN7@gc_referre:
  00054	48 8b 44 24 58	 mov	 rax, QWORD PTR list$[rsp]
  00059	48 39 44 24 28	 cmp	 QWORD PTR gc$[rsp], rax
  0005e	0f 84 90 00 00
	00		 je	 $LN5@gc_referre

; 1311 :         obj = FROM_GC(gc);

  00064	e8 00 00 00 00	 call	 _Py_PXCTX
  00069	85 c0		 test	 eax, eax
  0006b	74 0b		 je	 SHORT $LN11@gc_referre
  0006d	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR tv74[rsp], 0
  00076	eb 0e		 jmp	 SHORT $LN12@gc_referre
$LN11@gc_referre:
  00078	48 8b 44 24 28	 mov	 rax, QWORD PTR gc$[rsp]
  0007d	48 83 c0 18	 add	 rax, 24
  00081	48 89 44 24 38	 mov	 QWORD PTR tv74[rsp], rax
$LN12@gc_referre:
  00086	48 8b 44 24 38	 mov	 rax, QWORD PTR tv74[rsp]
  0008b	48 89 44 24 30	 mov	 QWORD PTR obj$[rsp], rax

; 1312 :         traverse = Py_TYPE(obj)->tp_traverse;

  00090	48 8b 44 24 30	 mov	 rax, QWORD PTR obj$[rsp]
  00095	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00099	48 8b 80 10 01
	00 00		 mov	 rax, QWORD PTR [rax+272]
  000a0	48 89 44 24 20	 mov	 QWORD PTR traverse$[rsp], rax

; 1313 :         if (obj == objs || obj == resultlist)

  000a5	48 8b 44 24 50	 mov	 rax, QWORD PTR objs$[rsp]
  000aa	48 39 44 24 30	 cmp	 QWORD PTR obj$[rsp], rax
  000af	74 0c		 je	 SHORT $LN3@gc_referre
  000b1	48 8b 44 24 60	 mov	 rax, QWORD PTR resultlist$[rsp]
  000b6	48 39 44 24 30	 cmp	 QWORD PTR obj$[rsp], rax
  000bb	75 02		 jne	 SHORT $LN4@gc_referre
$LN3@gc_referre:

; 1314 :             continue;

  000bd	eb 88		 jmp	 SHORT $LN6@gc_referre
$LN4@gc_referre:

; 1315 :         if (traverse(obj, (visitproc)referrersvisit, objs)) {

  000bf	4c 8b 44 24 50	 mov	 r8, QWORD PTR objs$[rsp]
  000c4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:referrersvisit
  000cb	48 8b 4c 24 30	 mov	 rcx, QWORD PTR obj$[rsp]
  000d0	ff 54 24 20	 call	 QWORD PTR traverse$[rsp]
  000d4	85 c0		 test	 eax, eax
  000d6	74 17		 je	 SHORT $LN2@gc_referre

; 1316 :             if (PyList_Append(resultlist, obj) < 0)

  000d8	48 8b 54 24 30	 mov	 rdx, QWORD PTR obj$[rsp]
  000dd	48 8b 4c 24 60	 mov	 rcx, QWORD PTR resultlist$[rsp]
  000e2	e8 00 00 00 00	 call	 PyList_Append
  000e7	85 c0		 test	 eax, eax
  000e9	7d 04		 jge	 SHORT $LN1@gc_referre

; 1317 :                 return 0; /* error */

  000eb	33 c0		 xor	 eax, eax
  000ed	eb 0a		 jmp	 SHORT $LN9@gc_referre
$LN1@gc_referre:
$LN2@gc_referre:

; 1318 :         }
; 1319 :     }

  000ef	e9 53 ff ff ff	 jmp	 $LN6@gc_referre
$LN5@gc_referre:

; 1320 :     return 1; /* no error */

  000f4	b8 01 00 00 00	 mov	 eax, 1
$LN9@gc_referre:

; 1321 : }

  000f9	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000fd	c3		 ret	 0
gc_referrers_for ENDP
_TEXT	ENDS
PUBLIC	??_C@_0P@NNBKPGBC@referrersvisit?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$referrersvisit DD imagerel referrersvisit
	DD	imagerel referrersvisit+129
	DD	imagerel $unwind$referrersvisit
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$referrersvisit DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT ??_C@_0P@NNBKPGBC@referrersvisit?$AA@
CONST	SEGMENT
??_C@_0P@NNBKPGBC@referrersvisit?$AA@ DB 'referrersvisit', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT referrersvisit
_TEXT	SEGMENT
i$ = 32
obj$ = 64
objs$ = 72
referrersvisit PROC					; COMDAT

; 1294 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1295 :     Py_ssize_t i;
; 1296 :     Py_GUARD

  0000e	e8 00 00 00 00	 call	 _Py_PXCTX
  00013	85 c0		 test	 eax, eax
  00015	74 1c		 je	 SHORT $LN5@referrersv
  00017	45 33 c9	 xor	 r9d, r9d
  0001a	41 b8 10 05 00
	00		 mov	 r8d, 1296		; 00000510H
  00020	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00027	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@NNBKPGBC@referrersvisit?$AA@
  0002e	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN5@referrersv:

; 1297 :     for (i = 0; i < PyTuple_GET_SIZE(objs); i++)

  00033	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  0003c	eb 0d		 jmp	 SHORT $LN4@referrersv
$LN3@referrersv:
  0003e	48 8b 44 24 20	 mov	 rax, QWORD PTR i$[rsp]
  00043	48 ff c0	 inc	 rax
  00046	48 89 44 24 20	 mov	 QWORD PTR i$[rsp], rax
$LN4@referrersv:
  0004b	48 8b 44 24 48	 mov	 rax, QWORD PTR objs$[rsp]
  00050	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00054	48 39 44 24 20	 cmp	 QWORD PTR i$[rsp], rax
  00059	7d 1f		 jge	 SHORT $LN2@referrersv

; 1298 :         if (PyTuple_GET_ITEM(objs, i) == obj)

  0005b	48 8b 44 24 48	 mov	 rax, QWORD PTR objs$[rsp]
  00060	48 8b 4c 24 20	 mov	 rcx, QWORD PTR i$[rsp]
  00065	48 8b 54 24 40	 mov	 rdx, QWORD PTR obj$[rsp]
  0006a	48 39 54 c8 70	 cmp	 QWORD PTR [rax+rcx*8+112], rdx
  0006f	75 07		 jne	 SHORT $LN1@referrersv

; 1299 :             return 1;

  00071	b8 01 00 00 00	 mov	 eax, 1
  00076	eb 04		 jmp	 SHORT $LN6@referrersv
$LN1@referrersv:

; 1300 :     return 0;

  00078	eb c4		 jmp	 SHORT $LN3@referrersv
$LN2@referrersv:
  0007a	33 c0		 xor	 eax, eax
$LN6@referrersv:

; 1301 : }

  0007c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00080	c3		 ret	 0
referrersvisit ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BB@CJFAIBFO@gc_get_referents?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$gc_get_referents DD imagerel gc_get_referents
	DD	imagerel gc_get_referents+442
	DD	imagerel $unwind$gc_get_referents
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gc_get_referents DD 010e01H
	DD	0c20eH
xdata	ENDS
;	COMDAT ??_C@_0BB@CJFAIBFO@gc_get_referents?$AA@
CONST	SEGMENT
??_C@_0BB@CJFAIBFO@gc_get_referents?$AA@ DB 'gc_get_referents', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT gc_get_referents
_TEXT	SEGMENT
i$ = 48
result$ = 56
traverse$21175 = 64
obj$21176 = 72
tv136 = 80
tv92 = 84
tv90 = 88
tv134 = 92
self$ = 112
args$ = 120
gc_get_referents PROC					; COMDAT

; 1358 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 1359 :     Py_ssize_t i;
; 1360 :     PyObject *result;
; 1361 :     Py_GUARD

  0000e	e8 00 00 00 00	 call	 _Py_PXCTX
  00013	85 c0		 test	 eax, eax
  00015	74 1c		 je	 SHORT $LN8@gc_get_ref@2
  00017	45 33 c9	 xor	 r9d, r9d
  0001a	41 b8 51 05 00
	00		 mov	 r8d, 1361		; 00000551H
  00020	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00027	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@CJFAIBFO@gc_get_referents?$AA@
  0002e	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN8@gc_get_ref@2:

; 1362 :     result = PyList_New(0);

  00033	33 c9		 xor	 ecx, ecx
  00035	e8 00 00 00 00	 call	 PyList_New
  0003a	48 89 44 24 38	 mov	 QWORD PTR result$[rsp], rax

; 1363 : 
; 1364 :     if (result == NULL)

  0003f	48 83 7c 24 38
	00		 cmp	 QWORD PTR result$[rsp], 0
  00045	75 07		 jne	 SHORT $LN7@gc_get_ref@2

; 1365 :         return NULL;

  00047	33 c0		 xor	 eax, eax
  00049	e9 67 01 00 00	 jmp	 $LN9@gc_get_ref@2
$LN7@gc_get_ref@2:

; 1366 : 
; 1367 :     for (i = 0; i < PyTuple_GET_SIZE(args); i++) {

  0004e	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  00057	eb 0d		 jmp	 SHORT $LN6@gc_get_ref@2
$LN5@gc_get_ref@2:
  00059	48 8b 44 24 30	 mov	 rax, QWORD PTR i$[rsp]
  0005e	48 ff c0	 inc	 rax
  00061	48 89 44 24 30	 mov	 QWORD PTR i$[rsp], rax
$LN6@gc_get_ref@2:
  00066	48 8b 44 24 78	 mov	 rax, QWORD PTR args$[rsp]
  0006b	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0006f	48 39 44 24 30	 cmp	 QWORD PTR i$[rsp], rax
  00074	0f 8d 36 01 00
	00		 jge	 $LN4@gc_get_ref@2

; 1368 :         traverseproc traverse;
; 1369 :         PyObject *obj = PyTuple_GET_ITEM(args, i);

  0007a	48 8b 44 24 78	 mov	 rax, QWORD PTR args$[rsp]
  0007f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR i$[rsp]
  00084	48 8b 44 c8 70	 mov	 rax, QWORD PTR [rax+rcx*8+112]
  00089	48 89 44 24 48	 mov	 QWORD PTR obj$21176[rsp], rax

; 1370 : 
; 1371 :         if (! PyObject_IS_GC(obj))

  0008e	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00096	4c 8b 4c 24 48	 mov	 r9, QWORD PTR obj$21176[rsp]
  0009b	41 b8 5b 05 00
	00		 mov	 r8d, 1371		; 0000055bH
  000a1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  000a8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@CJFAIBFO@gc_get_referents?$AA@
  000af	e8 00 00 00 00	 call	 _PyParallel_Guard
  000b4	85 c0		 test	 eax, eax
  000b6	74 0d		 je	 SHORT $LN18@gc_get_ref@2
  000b8	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR tv136[rsp], 0
  000c0	e9 91 00 00 00	 jmp	 $LN19@gc_get_ref@2
$LN18@gc_get_ref@2:
  000c5	e8 00 00 00 00	 call	 _Py_PXCTX
  000ca	85 c0		 test	 eax, eax
  000cc	74 0a		 je	 SHORT $LN13@gc_get_ref@2
  000ce	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR tv92[rsp], 0
  000d6	eb 32		 jmp	 SHORT $LN14@gc_get_ref@2
$LN13@gc_get_ref@2:
  000d8	48 8b 44 24 48	 mov	 rax, QWORD PTR obj$21176[rsp]
  000dd	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000e1	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000e7	25 00 40 00 00	 and	 eax, 16384		; 00004000H
  000ec	85 c0		 test	 eax, eax
  000ee	74 0a		 je	 SHORT $LN11@gc_get_ref@2
  000f0	c7 44 24 58 01
	00 00 00	 mov	 DWORD PTR tv90[rsp], 1
  000f8	eb 08		 jmp	 SHORT $LN12@gc_get_ref@2
$LN11@gc_get_ref@2:
  000fa	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR tv90[rsp], 0
$LN12@gc_get_ref@2:
  00102	8b 44 24 58	 mov	 eax, DWORD PTR tv90[rsp]
  00106	89 44 24 54	 mov	 DWORD PTR tv92[rsp], eax
$LN14@gc_get_ref@2:
  0010a	83 7c 24 54 00	 cmp	 DWORD PTR tv92[rsp], 0
  0010f	74 35		 je	 SHORT $LN16@gc_get_ref@2
  00111	48 8b 44 24 48	 mov	 rax, QWORD PTR obj$21176[rsp]
  00116	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0011a	48 83 b8 a0 01
	00 00 00	 cmp	 QWORD PTR [rax+416], 0
  00122	74 18		 je	 SHORT $LN15@gc_get_ref@2
  00124	48 8b 44 24 48	 mov	 rax, QWORD PTR obj$21176[rsp]
  00129	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0012d	48 8b 4c 24 48	 mov	 rcx, QWORD PTR obj$21176[rsp]
  00132	ff 90 a0 01 00
	00		 call	 QWORD PTR [rax+416]
  00138	85 c0		 test	 eax, eax
  0013a	74 0a		 je	 SHORT $LN16@gc_get_ref@2
$LN15@gc_get_ref@2:
  0013c	c7 44 24 5c 01
	00 00 00	 mov	 DWORD PTR tv134[rsp], 1
  00144	eb 08		 jmp	 SHORT $LN17@gc_get_ref@2
$LN16@gc_get_ref@2:
  00146	c7 44 24 5c 00
	00 00 00	 mov	 DWORD PTR tv134[rsp], 0
$LN17@gc_get_ref@2:
  0014e	8b 44 24 5c	 mov	 eax, DWORD PTR tv134[rsp]
  00152	89 44 24 50	 mov	 DWORD PTR tv136[rsp], eax
$LN19@gc_get_ref@2:
  00156	83 7c 24 50 00	 cmp	 DWORD PTR tv136[rsp], 0
  0015b	75 05		 jne	 SHORT $LN3@gc_get_ref@2

; 1372 :             continue;

  0015d	e9 f7 fe ff ff	 jmp	 $LN5@gc_get_ref@2
$LN3@gc_get_ref@2:

; 1373 :         traverse = Py_TYPE(obj)->tp_traverse;

  00162	48 8b 44 24 48	 mov	 rax, QWORD PTR obj$21176[rsp]
  00167	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0016b	48 8b 80 10 01
	00 00		 mov	 rax, QWORD PTR [rax+272]
  00172	48 89 44 24 40	 mov	 QWORD PTR traverse$21175[rsp], rax

; 1374 :         if (! traverse)

  00177	48 83 7c 24 40
	00		 cmp	 QWORD PTR traverse$21175[rsp], 0
  0017d	75 05		 jne	 SHORT $LN2@gc_get_ref@2

; 1375 :             continue;

  0017f	e9 d5 fe ff ff	 jmp	 $LN5@gc_get_ref@2
$LN2@gc_get_ref@2:

; 1376 :         if (traverse(obj, (visitproc)referentsvisit, result)) {

  00184	4c 8b 44 24 38	 mov	 r8, QWORD PTR result$[rsp]
  00189	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:referentsvisit
  00190	48 8b 4c 24 48	 mov	 rcx, QWORD PTR obj$21176[rsp]
  00195	ff 54 24 40	 call	 QWORD PTR traverse$21175[rsp]
  00199	85 c0		 test	 eax, eax
  0019b	74 0e		 je	 SHORT $LN1@gc_get_ref@2

; 1377 :             Py_DECREF(result);

  0019d	48 8b 4c 24 38	 mov	 rcx, QWORD PTR result$[rsp]
  001a2	e8 00 00 00 00	 call	 _Py_DecRef

; 1378 :             return NULL;

  001a7	33 c0		 xor	 eax, eax
  001a9	eb 0a		 jmp	 SHORT $LN9@gc_get_ref@2
$LN1@gc_get_ref@2:

; 1379 :         }
; 1380 :     }

  001ab	e9 a9 fe ff ff	 jmp	 $LN5@gc_get_ref@2
$LN4@gc_get_ref@2:

; 1381 :     return result;

  001b0	48 8b 44 24 38	 mov	 rax, QWORD PTR result$[rsp]
$LN9@gc_get_ref@2:

; 1382 : }

  001b5	48 83 c4 68	 add	 rsp, 104		; 00000068H
  001b9	c3		 ret	 0
gc_get_referents ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$referentsvisit DD imagerel referentsvisit
	DD	imagerel referentsvisit+60
	DD	imagerel $unwind$referentsvisit
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$referentsvisit DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT referentsvisit
_TEXT	SEGMENT
tv68 = 32
obj$ = 64
list$ = 72
referentsvisit PROC					; COMDAT

; 1348 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1349 :     return PyList_Append(list, obj) < 0;

  0000e	48 8b 54 24 40	 mov	 rdx, QWORD PTR obj$[rsp]
  00013	48 8b 4c 24 48	 mov	 rcx, QWORD PTR list$[rsp]
  00018	e8 00 00 00 00	 call	 PyList_Append
  0001d	85 c0		 test	 eax, eax
  0001f	7d 0a		 jge	 SHORT $LN3@referentsv
  00021	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv68[rsp], 1
  00029	eb 08		 jmp	 SHORT $LN4@referentsv
$LN3@referentsv:
  0002b	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv68[rsp], 0
$LN4@referentsv:
  00033	8b 44 24 20	 mov	 eax, DWORD PTR tv68[rsp]

; 1350 : }

  00037	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003b	c3		 ret	 0
referentsvisit ENDP
_TEXT	ENDS
PUBLIC	??_C@_0P@JDHDGDGB@gc_get_objects?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$gc_get_objects DD imagerel gc_get_objects
	DD	imagerel gc_get_objects+167
	DD	imagerel $unwind$gc_get_objects
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gc_get_objects DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT ??_C@_0P@JDHDGDGB@gc_get_objects?$AA@
CONST	SEGMENT
??_C@_0P@JDHDGDGB@gc_get_objects?$AA@ DB 'gc_get_objects', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT gc_get_objects
_TEXT	SEGMENT
i$ = 32
result$ = 40
self$ = 64
noargs$ = 72
gc_get_objects PROC					; COMDAT

; 1392 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1393 :     int i;
; 1394 :     PyObject* result;
; 1395 :     Py_GUARD

  0000e	e8 00 00 00 00	 call	 _Py_PXCTX
  00013	85 c0		 test	 eax, eax
  00015	74 1c		 je	 SHORT $LN6@gc_get_obj
  00017	45 33 c9	 xor	 r9d, r9d
  0001a	41 b8 73 05 00
	00		 mov	 r8d, 1395		; 00000573H
  00020	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00027	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@JDHDGDGB@gc_get_objects?$AA@
  0002e	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN6@gc_get_obj:

; 1396 : 
; 1397 :     result = PyList_New(0);

  00033	33 c9		 xor	 ecx, ecx
  00035	e8 00 00 00 00	 call	 PyList_New
  0003a	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax

; 1398 :     if (result == NULL)

  0003f	48 83 7c 24 28
	00		 cmp	 QWORD PTR result$[rsp], 0
  00045	75 04		 jne	 SHORT $LN5@gc_get_obj

; 1399 :         return NULL;

  00047	33 c0		 xor	 eax, eax
  00049	eb 57		 jmp	 SHORT $LN7@gc_get_obj
$LN5@gc_get_obj:

; 1400 :     for (i = 0; i < NUM_GENERATIONS; i++) {

  0004b	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00053	eb 0a		 jmp	 SHORT $LN4@gc_get_obj
$LN3@gc_get_obj:
  00055	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  00059	ff c0		 inc	 eax
  0005b	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN4@gc_get_obj:
  0005f	83 7c 24 20 03	 cmp	 DWORD PTR i$[rsp], 3
  00064	7d 37		 jge	 SHORT $LN2@gc_get_obj

; 1401 :         if (append_objects(result, GEN_HEAD(i))) {

  00066	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  0006b	48 6b c0 20	 imul	 rax, 32			; 00000020H
  0006f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:generations
  00076	48 03 c8	 add	 rcx, rax
  00079	48 8b c1	 mov	 rax, rcx
  0007c	48 8b d0	 mov	 rdx, rax
  0007f	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  00084	e8 00 00 00 00	 call	 append_objects
  00089	85 c0		 test	 eax, eax
  0008b	74 0e		 je	 SHORT $LN1@gc_get_obj

; 1402 :             Py_DECREF(result);

  0008d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  00092	e8 00 00 00 00	 call	 _Py_DecRef

; 1403 :             return NULL;

  00097	33 c0		 xor	 eax, eax
  00099	eb 07		 jmp	 SHORT $LN7@gc_get_obj
$LN1@gc_get_obj:

; 1404 :         }
; 1405 :     }

  0009b	eb b8		 jmp	 SHORT $LN3@gc_get_obj
$LN2@gc_get_obj:

; 1406 :     return result;

  0009d	48 8b 44 24 28	 mov	 rax, QWORD PTR result$[rsp]
$LN7@gc_get_obj:

; 1407 : }

  000a2	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a6	c3		 ret	 0
gc_get_objects ENDP
_TEXT	ENDS
PUBLIC	??_C@_0P@NHOAKINH@append_objects?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$append_objects DD imagerel append_objects
	DD	imagerel append_objects+182
	DD	imagerel $unwind$append_objects
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$append_objects DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_0P@NHOAKINH@append_objects?$AA@
CONST	SEGMENT
??_C@_0P@NHOAKINH@append_objects?$AA@ DB 'append_objects', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT append_objects
_TEXT	SEGMENT
gc$ = 32
op$20445 = 40
tv74 = 48
py_list$ = 80
gc_list$ = 88
append_objects PROC					; COMDAT

; 329  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 330  :     PyGC_Head *gc;
; 331  :     Py_GUARD

  0000e	e8 00 00 00 00	 call	 _Py_PXCTX
  00013	85 c0		 test	 eax, eax
  00015	74 1c		 je	 SHORT $LN6@append_obj
  00017	45 33 c9	 xor	 r9d, r9d
  0001a	41 b8 4b 01 00
	00		 mov	 r8d, 331		; 0000014bH
  00020	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00027	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@NHOAKINH@append_objects?$AA@
  0002e	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN6@append_obj:

; 332  :     for (gc = gc_list->gc.gc_next; gc != gc_list; gc = gc->gc.gc_next) {

  00033	48 8b 44 24 58	 mov	 rax, QWORD PTR gc_list$[rsp]
  00038	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0003b	48 89 44 24 20	 mov	 QWORD PTR gc$[rsp], rax
  00040	eb 0d		 jmp	 SHORT $LN5@append_obj
$LN4@append_obj:
  00042	48 8b 44 24 20	 mov	 rax, QWORD PTR gc$[rsp]
  00047	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0004a	48 89 44 24 20	 mov	 QWORD PTR gc$[rsp], rax
$LN5@append_obj:
  0004f	48 8b 44 24 58	 mov	 rax, QWORD PTR gc_list$[rsp]
  00054	48 39 44 24 20	 cmp	 QWORD PTR gc$[rsp], rax
  00059	74 54		 je	 SHORT $LN3@append_obj

; 333  :         PyObject *op = FROM_GC(gc);

  0005b	e8 00 00 00 00	 call	 _Py_PXCTX
  00060	85 c0		 test	 eax, eax
  00062	74 0b		 je	 SHORT $LN9@append_obj
  00064	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR tv74[rsp], 0
  0006d	eb 0e		 jmp	 SHORT $LN10@append_obj
$LN9@append_obj:
  0006f	48 8b 44 24 20	 mov	 rax, QWORD PTR gc$[rsp]
  00074	48 83 c0 18	 add	 rax, 24
  00078	48 89 44 24 30	 mov	 QWORD PTR tv74[rsp], rax
$LN10@append_obj:
  0007d	48 8b 44 24 30	 mov	 rax, QWORD PTR tv74[rsp]
  00082	48 89 44 24 28	 mov	 QWORD PTR op$20445[rsp], rax

; 334  :         if (op != py_list) {

  00087	48 8b 44 24 50	 mov	 rax, QWORD PTR py_list$[rsp]
  0008c	48 39 44 24 28	 cmp	 QWORD PTR op$20445[rsp], rax
  00091	74 1a		 je	 SHORT $LN2@append_obj

; 335  :             if (PyList_Append(py_list, op)) {

  00093	48 8b 54 24 28	 mov	 rdx, QWORD PTR op$20445[rsp]
  00098	48 8b 4c 24 50	 mov	 rcx, QWORD PTR py_list$[rsp]
  0009d	e8 00 00 00 00	 call	 PyList_Append
  000a2	85 c0		 test	 eax, eax
  000a4	74 07		 je	 SHORT $LN1@append_obj

; 336  :                 return -1; /* exception */

  000a6	b8 ff ff ff ff	 mov	 eax, -1
  000ab	eb 04		 jmp	 SHORT $LN7@append_obj
$LN1@append_obj:
$LN2@append_obj:

; 337  :             }
; 338  :         }
; 339  :     }

  000ad	eb 93		 jmp	 SHORT $LN4@append_obj
$LN3@append_obj:

; 340  :     return 0;

  000af	33 c0		 xor	 eax, eax
$LN7@append_obj:

; 341  : }

  000b1	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000b5	c3		 ret	 0
append_objects ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@EMPDJANN@gc_is_tracked?$AA@		; `string'
EXTRN	_Py_FalseStruct:BYTE
EXTRN	_Py_TrueStruct:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$gc_is_tracked DD imagerel gc_is_tracked
	DD	imagerel gc_is_tracked+472
	DD	imagerel $unwind$gc_is_tracked
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gc_is_tracked DD 010e01H
	DD	0c20eH
xdata	ENDS
;	COMDAT ??_C@_0O@EMPDJANN@gc_is_tracked?$AA@
CONST	SEGMENT
??_C@_0O@EMPDJANN@gc_is_tracked?$AA@ DB 'gc_is_tracked', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT gc_is_tracked
_TEXT	SEGMENT
result$ = 48
tv95 = 56
tv83 = 60
tv81 = 64
tv93 = 68
tv148 = 72
tv143 = 80
tv146 = 88
self$ = 112
obj$ = 120
gc_is_tracked PROC					; COMDAT

; 1418 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 1419 :     PyObject *result;
; 1420 :     Py_GUARD

  0000e	e8 00 00 00 00	 call	 _Py_PXCTX
  00013	85 c0		 test	 eax, eax
  00015	74 1c		 je	 SHORT $LN3@gc_is_trac
  00017	45 33 c9	 xor	 r9d, r9d
  0001a	41 b8 8c 05 00
	00		 mov	 r8d, 1420		; 0000058cH
  00020	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00027	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@EMPDJANN@gc_is_tracked?$AA@
  0002e	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@gc_is_trac:

; 1421 : 
; 1422 :     if (PyObject_IS_GC(obj) && IS_TRACKED(obj))

  00033	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0003b	4c 8b 4c 24 78	 mov	 r9, QWORD PTR obj$[rsp]
  00040	41 b8 8e 05 00
	00		 mov	 r8d, 1422		; 0000058eH
  00046	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  0004d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@EMPDJANN@gc_is_tracked?$AA@
  00054	e8 00 00 00 00	 call	 _PyParallel_Guard
  00059	85 c0		 test	 eax, eax
  0005b	74 0d		 je	 SHORT $LN13@gc_is_trac
  0005d	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv95[rsp], 0
  00065	e9 91 00 00 00	 jmp	 $LN14@gc_is_trac
$LN13@gc_is_trac:
  0006a	e8 00 00 00 00	 call	 _Py_PXCTX
  0006f	85 c0		 test	 eax, eax
  00071	74 0a		 je	 SHORT $LN8@gc_is_trac
  00073	c7 44 24 3c 00
	00 00 00	 mov	 DWORD PTR tv83[rsp], 0
  0007b	eb 32		 jmp	 SHORT $LN9@gc_is_trac
$LN8@gc_is_trac:
  0007d	48 8b 44 24 78	 mov	 rax, QWORD PTR obj$[rsp]
  00082	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00086	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0008c	25 00 40 00 00	 and	 eax, 16384		; 00004000H
  00091	85 c0		 test	 eax, eax
  00093	74 0a		 je	 SHORT $LN6@gc_is_trac
  00095	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR tv81[rsp], 1
  0009d	eb 08		 jmp	 SHORT $LN7@gc_is_trac
$LN6@gc_is_trac:
  0009f	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv81[rsp], 0
$LN7@gc_is_trac:
  000a7	8b 44 24 40	 mov	 eax, DWORD PTR tv81[rsp]
  000ab	89 44 24 3c	 mov	 DWORD PTR tv83[rsp], eax
$LN9@gc_is_trac:
  000af	83 7c 24 3c 00	 cmp	 DWORD PTR tv83[rsp], 0
  000b4	74 35		 je	 SHORT $LN11@gc_is_trac
  000b6	48 8b 44 24 78	 mov	 rax, QWORD PTR obj$[rsp]
  000bb	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000bf	48 83 b8 a0 01
	00 00 00	 cmp	 QWORD PTR [rax+416], 0
  000c7	74 18		 je	 SHORT $LN10@gc_is_trac
  000c9	48 8b 44 24 78	 mov	 rax, QWORD PTR obj$[rsp]
  000ce	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000d2	48 8b 4c 24 78	 mov	 rcx, QWORD PTR obj$[rsp]
  000d7	ff 90 a0 01 00
	00		 call	 QWORD PTR [rax+416]
  000dd	85 c0		 test	 eax, eax
  000df	74 0a		 je	 SHORT $LN11@gc_is_trac
$LN10@gc_is_trac:
  000e1	c7 44 24 44 01
	00 00 00	 mov	 DWORD PTR tv93[rsp], 1
  000e9	eb 08		 jmp	 SHORT $LN12@gc_is_trac
$LN11@gc_is_trac:
  000eb	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv93[rsp], 0
$LN12@gc_is_trac:
  000f3	8b 44 24 44	 mov	 eax, DWORD PTR tv93[rsp]
  000f7	89 44 24 38	 mov	 DWORD PTR tv95[rsp], eax
$LN14@gc_is_trac:
  000fb	83 7c 24 38 00	 cmp	 DWORD PTR tv95[rsp], 0
  00100	0f 84 b2 00 00
	00		 je	 $LN2@gc_is_trac
  00106	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0010e	4c 8b 4c 24 78	 mov	 r9, QWORD PTR obj$[rsp]
  00113	41 b8 8e 05 00
	00		 mov	 r8d, 1422		; 0000058eH
  00119	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00120	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@EMPDJANN@gc_is_tracked?$AA@
  00127	e8 00 00 00 00	 call	 _PyParallel_Guard
  0012c	85 c0		 test	 eax, eax
  0012e	74 0a		 je	 SHORT $LN19@gc_is_trac
  00130	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv148[rsp], 0
  00138	eb 69		 jmp	 SHORT $LN20@gc_is_trac
$LN19@gc_is_trac:
  0013a	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00142	4c 8b 4c 24 78	 mov	 r9, QWORD PTR obj$[rsp]
  00147	41 b8 8e 05 00
	00		 mov	 r8d, 1422		; 0000058eH
  0014d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00154	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@EMPDJANN@gc_is_tracked?$AA@
  0015b	e8 00 00 00 00	 call	 _PyParallel_Guard
  00160	85 c0		 test	 eax, eax
  00162	74 0b		 je	 SHORT $LN15@gc_is_trac
  00164	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR tv143[rsp], 0
  0016d	eb 0e		 jmp	 SHORT $LN16@gc_is_trac
$LN15@gc_is_trac:
  0016f	48 8b 44 24 78	 mov	 rax, QWORD PTR obj$[rsp]
  00174	48 83 e8 18	 sub	 rax, 24
  00178	48 89 44 24 50	 mov	 QWORD PTR tv143[rsp], rax
$LN16@gc_is_trac:
  0017d	48 8b 44 24 50	 mov	 rax, QWORD PTR tv143[rsp]
  00182	48 83 78 10 fe	 cmp	 QWORD PTR [rax+16], -2
  00187	74 0a		 je	 SHORT $LN17@gc_is_trac
  00189	c7 44 24 58 01
	00 00 00	 mov	 DWORD PTR tv146[rsp], 1
  00191	eb 08		 jmp	 SHORT $LN18@gc_is_trac
$LN17@gc_is_trac:
  00193	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR tv146[rsp], 0
$LN18@gc_is_trac:
  0019b	8b 44 24 58	 mov	 eax, DWORD PTR tv146[rsp]
  0019f	89 44 24 48	 mov	 DWORD PTR tv148[rsp], eax
$LN20@gc_is_trac:
  001a3	83 7c 24 48 00	 cmp	 DWORD PTR tv148[rsp], 0
  001a8	74 0e		 je	 SHORT $LN2@gc_is_trac

; 1423 :         result = Py_True;

  001aa	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  001b1	48 89 44 24 30	 mov	 QWORD PTR result$[rsp], rax

; 1424 :     else

  001b6	eb 0c		 jmp	 SHORT $LN1@gc_is_trac
$LN2@gc_is_trac:

; 1425 :         result = Py_False;

  001b8	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct
  001bf	48 89 44 24 30	 mov	 QWORD PTR result$[rsp], rax
$LN1@gc_is_trac:

; 1426 :     Py_INCREF(result);

  001c4	48 8b 4c 24 30	 mov	 rcx, QWORD PTR result$[rsp]
  001c9	e8 00 00 00 00	 call	 _Py_IncRef

; 1427 :     return result;

  001ce	48 8b 44 24 30	 mov	 rax, QWORD PTR result$[rsp]

; 1428 : }

  001d3	48 83 c4 68	 add	 rsp, 104		; 00000068H
  001d7	c3		 ret	 0
gc_is_tracked ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@EILAKDBC@DEBUG_LEAK?$AA@		; `string'
PUBLIC	??_C@_0O@KHDKOLND@DEBUG_SAVEALL?$AA@		; `string'
PUBLIC	??_C@_0BE@IJOEAMLB@DEBUG_UNCOLLECTABLE?$AA@	; `string'
PUBLIC	??_C@_0BC@DILHAMK@DEBUG_COLLECTABLE?$AA@	; `string'
PUBLIC	??_C@_0M@NKBNCFEN@DEBUG_STATS?$AA@		; `string'
PUBLIC	??_C@_09COICIIMN@callbacks?$AA@			; `string'
PUBLIC	??_C@_07BOKCJEKD@garbage?$AA@			; `string'
PUBLIC	??_C@_09KHLFGIJJ@PyInit_gc?$AA@			; `string'
PUBLIC	PyInit_gc
EXTRN	PyModule_AddIntConstant:PROC
EXTRN	PyImport_ImportModuleNoBlock:PROC
EXTRN	PyModule_AddObject:PROC
EXTRN	PyModule_Create2TraceRefs:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyInit_gc DD imagerel $LN18
	DD	imagerel $LN18+466
	DD	imagerel $unwind$PyInit_gc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyInit_gc DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_0L@EILAKDBC@DEBUG_LEAK?$AA@
CONST	SEGMENT
??_C@_0L@EILAKDBC@DEBUG_LEAK?$AA@ DB 'DEBUG_LEAK', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@KHDKOLND@DEBUG_SAVEALL?$AA@
CONST	SEGMENT
??_C@_0O@KHDKOLND@DEBUG_SAVEALL?$AA@ DB 'DEBUG_SAVEALL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@IJOEAMLB@DEBUG_UNCOLLECTABLE?$AA@
CONST	SEGMENT
??_C@_0BE@IJOEAMLB@DEBUG_UNCOLLECTABLE?$AA@ DB 'DEBUG_UNCOLLECTABLE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@DILHAMK@DEBUG_COLLECTABLE?$AA@
CONST	SEGMENT
??_C@_0BC@DILHAMK@DEBUG_COLLECTABLE?$AA@ DB 'DEBUG_COLLECTABLE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@NKBNCFEN@DEBUG_STATS?$AA@
CONST	SEGMENT
??_C@_0M@NKBNCFEN@DEBUG_STATS?$AA@ DB 'DEBUG_STATS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09COICIIMN@callbacks?$AA@
CONST	SEGMENT
??_C@_09COICIIMN@callbacks?$AA@ DB 'callbacks', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07BOKCJEKD@garbage?$AA@
CONST	SEGMENT
??_C@_07BOKCJEKD@garbage?$AA@ DB 'garbage', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09KHLFGIJJ@PyInit_gc?$AA@
CONST	SEGMENT
??_C@_09KHLFGIJJ@PyInit_gc?$AA@ DB 'PyInit_gc', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyInit_gc
_TEXT	SEGMENT
m$ = 32
PyInit_gc PROC						; COMDAT

; 1482 : {

$LN18:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1483 :     PyObject *m;
; 1484 :     Py_GUARD

  00004	e8 00 00 00 00	 call	 _Py_PXCTX
  00009	85 c0		 test	 eax, eax
  0000b	74 1c		 je	 SHORT $LN15@PyInit_gc
  0000d	45 33 c9	 xor	 r9d, r9d
  00010	41 b8 cc 05 00
	00		 mov	 r8d, 1484		; 000005ccH
  00016	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09KHLFGIJJ@PyInit_gc?$AA@
  00024	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN15@PyInit_gc:

; 1485 : 
; 1486 :     m = PyModule_Create(&gcmodule);

  00029	ba f5 03 00 00	 mov	 edx, 1013		; 000003f5H
  0002e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:gcmodule
  00035	e8 00 00 00 00	 call	 PyModule_Create2TraceRefs
  0003a	48 89 44 24 20	 mov	 QWORD PTR m$[rsp], rax

; 1487 : 
; 1488 :     if (m == NULL)

  0003f	48 83 7c 24 20
	00		 cmp	 QWORD PTR m$[rsp], 0
  00045	75 07		 jne	 SHORT $LN14@PyInit_gc

; 1489 :         return NULL;

  00047	33 c0		 xor	 eax, eax
  00049	e9 7f 01 00 00	 jmp	 $LN16@PyInit_gc
$LN14@PyInit_gc:

; 1490 : 
; 1491 :     if (garbage == NULL) {

  0004e	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR garbage, 0
  00056	75 1f		 jne	 SHORT $LN13@PyInit_gc

; 1492 :         garbage = PyList_New(0);

  00058	33 c9		 xor	 ecx, ecx
  0005a	e8 00 00 00 00	 call	 PyList_New
  0005f	48 89 05 00 00
	00 00		 mov	 QWORD PTR garbage, rax

; 1493 :         if (garbage == NULL)

  00066	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR garbage, 0
  0006e	75 07		 jne	 SHORT $LN12@PyInit_gc

; 1494 :             return NULL;

  00070	33 c0		 xor	 eax, eax
  00072	e9 56 01 00 00	 jmp	 $LN16@PyInit_gc
$LN12@PyInit_gc:
$LN13@PyInit_gc:

; 1495 :     }
; 1496 :     Py_INCREF(garbage);

  00077	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR garbage
  0007e	e8 00 00 00 00	 call	 _Py_IncRef

; 1497 :     if (PyModule_AddObject(m, "garbage", garbage) < 0)

  00083	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR garbage
  0008a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07BOKCJEKD@garbage?$AA@
  00091	48 8b 4c 24 20	 mov	 rcx, QWORD PTR m$[rsp]
  00096	e8 00 00 00 00	 call	 PyModule_AddObject
  0009b	85 c0		 test	 eax, eax
  0009d	7d 07		 jge	 SHORT $LN11@PyInit_gc

; 1498 :         return NULL;

  0009f	33 c0		 xor	 eax, eax
  000a1	e9 27 01 00 00	 jmp	 $LN16@PyInit_gc
$LN11@PyInit_gc:

; 1499 : 
; 1500 :     if (callbacks == NULL) {

  000a6	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR callbacks, 0
  000ae	75 1f		 jne	 SHORT $LN10@PyInit_gc

; 1501 :         callbacks = PyList_New(0);

  000b0	33 c9		 xor	 ecx, ecx
  000b2	e8 00 00 00 00	 call	 PyList_New
  000b7	48 89 05 00 00
	00 00		 mov	 QWORD PTR callbacks, rax

; 1502 :         if (callbacks == NULL)

  000be	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR callbacks, 0
  000c6	75 07		 jne	 SHORT $LN9@PyInit_gc

; 1503 :             return NULL;

  000c8	33 c0		 xor	 eax, eax
  000ca	e9 fe 00 00 00	 jmp	 $LN16@PyInit_gc
$LN9@PyInit_gc:
$LN10@PyInit_gc:

; 1504 :     }
; 1505 :     Py_INCREF(callbacks);

  000cf	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR callbacks
  000d6	e8 00 00 00 00	 call	 _Py_IncRef

; 1506 :     if (PyModule_AddObject(m, "callbacks", callbacks) < 0)

  000db	4c 8b 05 00 00
	00 00		 mov	 r8, QWORD PTR callbacks
  000e2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09COICIIMN@callbacks?$AA@
  000e9	48 8b 4c 24 20	 mov	 rcx, QWORD PTR m$[rsp]
  000ee	e8 00 00 00 00	 call	 PyModule_AddObject
  000f3	85 c0		 test	 eax, eax
  000f5	7d 07		 jge	 SHORT $LN8@PyInit_gc

; 1507 :         return NULL;

  000f7	33 c0		 xor	 eax, eax
  000f9	e9 cf 00 00 00	 jmp	 $LN16@PyInit_gc
$LN8@PyInit_gc:

; 1508 : 
; 1509 :     /* Importing can't be done in collect() because collect()
; 1510 :      * can be called via PyGC_Collect() in Py_Finalize().
; 1511 :      * This wouldn't be a problem, except that <initialized> is
; 1512 :      * reset to 0 before calling collect which trips up
; 1513 :      * the import and triggers an assertion.
; 1514 :      */
; 1515 :     if (tmod == NULL) {

  000fe	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR tmod, 0
  00106	75 22		 jne	 SHORT $LN7@PyInit_gc

; 1516 :         tmod = PyImport_ImportModuleNoBlock("time");

  00108	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04CLCEDBPF@time?$AA@
  0010f	e8 00 00 00 00	 call	 PyImport_ImportModuleNoBlock
  00114	48 89 05 00 00
	00 00		 mov	 QWORD PTR tmod, rax

; 1517 :         if (tmod == NULL)

  0011b	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR tmod, 0
  00123	75 05		 jne	 SHORT $LN6@PyInit_gc

; 1518 :             PyErr_Clear();

  00125	e8 00 00 00 00	 call	 PyErr_Clear
$LN6@PyInit_gc:
$LN7@PyInit_gc:

; 1519 :     }
; 1520 : 
; 1521 : #define ADD_INT(NAME) if (PyModule_AddIntConstant(m, #NAME, NAME) < 0) return NULL
; 1522 :     ADD_INT(DEBUG_STATS);

  0012a	41 b8 01 00 00
	00		 mov	 r8d, 1
  00130	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@NKBNCFEN@DEBUG_STATS?$AA@
  00137	48 8b 4c 24 20	 mov	 rcx, QWORD PTR m$[rsp]
  0013c	e8 00 00 00 00	 call	 PyModule_AddIntConstant
  00141	85 c0		 test	 eax, eax
  00143	7d 07		 jge	 SHORT $LN5@PyInit_gc
  00145	33 c0		 xor	 eax, eax
  00147	e9 81 00 00 00	 jmp	 $LN16@PyInit_gc
$LN5@PyInit_gc:

; 1523 :     ADD_INT(DEBUG_COLLECTABLE);

  0014c	41 b8 02 00 00
	00		 mov	 r8d, 2
  00152	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@DILHAMK@DEBUG_COLLECTABLE?$AA@
  00159	48 8b 4c 24 20	 mov	 rcx, QWORD PTR m$[rsp]
  0015e	e8 00 00 00 00	 call	 PyModule_AddIntConstant
  00163	85 c0		 test	 eax, eax
  00165	7d 04		 jge	 SHORT $LN4@PyInit_gc
  00167	33 c0		 xor	 eax, eax
  00169	eb 62		 jmp	 SHORT $LN16@PyInit_gc
$LN4@PyInit_gc:

; 1524 :     ADD_INT(DEBUG_UNCOLLECTABLE);

  0016b	41 b8 04 00 00
	00		 mov	 r8d, 4
  00171	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BE@IJOEAMLB@DEBUG_UNCOLLECTABLE?$AA@
  00178	48 8b 4c 24 20	 mov	 rcx, QWORD PTR m$[rsp]
  0017d	e8 00 00 00 00	 call	 PyModule_AddIntConstant
  00182	85 c0		 test	 eax, eax
  00184	7d 04		 jge	 SHORT $LN3@PyInit_gc
  00186	33 c0		 xor	 eax, eax
  00188	eb 43		 jmp	 SHORT $LN16@PyInit_gc
$LN3@PyInit_gc:

; 1525 :     ADD_INT(DEBUG_SAVEALL);

  0018a	41 b8 20 00 00
	00		 mov	 r8d, 32			; 00000020H
  00190	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0O@KHDKOLND@DEBUG_SAVEALL?$AA@
  00197	48 8b 4c 24 20	 mov	 rcx, QWORD PTR m$[rsp]
  0019c	e8 00 00 00 00	 call	 PyModule_AddIntConstant
  001a1	85 c0		 test	 eax, eax
  001a3	7d 04		 jge	 SHORT $LN2@PyInit_gc
  001a5	33 c0		 xor	 eax, eax
  001a7	eb 24		 jmp	 SHORT $LN16@PyInit_gc
$LN2@PyInit_gc:

; 1526 :     ADD_INT(DEBUG_LEAK);

  001a9	41 b8 26 00 00
	00		 mov	 r8d, 38			; 00000026H
  001af	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0L@EILAKDBC@DEBUG_LEAK?$AA@
  001b6	48 8b 4c 24 20	 mov	 rcx, QWORD PTR m$[rsp]
  001bb	e8 00 00 00 00	 call	 PyModule_AddIntConstant
  001c0	85 c0		 test	 eax, eax
  001c2	7d 04		 jge	 SHORT $LN1@PyInit_gc
  001c4	33 c0		 xor	 eax, eax
  001c6	eb 05		 jmp	 SHORT $LN16@PyInit_gc
$LN1@PyInit_gc:

; 1527 : #undef ADD_INT
; 1528 :     return m;

  001c8	48 8b 44 24 20	 mov	 rax, QWORD PTR m$[rsp]
$LN16@PyInit_gc:

; 1529 : }

  001cd	48 83 c4 38	 add	 rsp, 56			; 00000038H
  001d1	c3		 ret	 0
PyInit_gc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@JDNFGJNE@PyGC_Collect?$AA@		; `string'
PUBLIC	PyGC_Collect
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyGC_Collect DD imagerel $LN6
	DD	imagerel $LN6+106
	DD	imagerel $unwind$PyGC_Collect
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyGC_Collect DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_0N@JDNFGJNE@PyGC_Collect?$AA@
CONST	SEGMENT
??_C@_0N@JDNFGJNE@PyGC_Collect?$AA@ DB 'PyGC_Collect', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyGC_Collect
_TEXT	SEGMENT
n$ = 32
PyGC_Collect PROC					; COMDAT

; 1534 : {

$LN6:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1535 :     Py_ssize_t n;
; 1536 :     Py_GUARD

  00004	e8 00 00 00 00	 call	 _Py_PXCTX
  00009	85 c0		 test	 eax, eax
  0000b	74 1c		 je	 SHORT $LN3@PyGC_Colle
  0000d	45 33 c9	 xor	 r9d, r9d
  00010	41 b8 00 06 00
	00		 mov	 r8d, 1536		; 00000600H
  00016	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@JDNFGJNE@PyGC_Collect?$AA@
  00024	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@PyGC_Colle:

; 1537 : 
; 1538 :     if (collecting)

  00029	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR collecting, 0
  00030	74 0b		 je	 SHORT $LN2@PyGC_Colle

; 1539 :         n = 0; /* already collecting, don't do anything */

  00032	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR n$[rsp], 0

; 1540 :     else {

  0003b	eb 23		 jmp	 SHORT $LN1@PyGC_Colle
$LN2@PyGC_Colle:

; 1541 :         collecting = 1;

  0003d	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR collecting, 1

; 1542 :         n = collect_with_callback(NUM_GENERATIONS - 1);

  00047	b9 02 00 00 00	 mov	 ecx, 2
  0004c	e8 00 00 00 00	 call	 collect_with_callback
  00051	48 89 44 24 20	 mov	 QWORD PTR n$[rsp], rax

; 1543 :         collecting = 0;

  00056	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR collecting, 0
$LN1@PyGC_Colle:

; 1544 :     }
; 1545 : 
; 1546 :     return n;

  00060	48 8b 44 24 20	 mov	 rax, QWORD PTR n$[rsp]

; 1547 : }

  00065	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00069	c3		 ret	 0
PyGC_Collect ENDP
_TEXT	ENDS
PUBLIC	??_C@_07FBMPDAOB@?5?5?5?5?$CFs?6?$AA@		; `string'
PUBLIC	??_C@_1CK@FILHOKME@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_0GB@PGJHHMDB@gc?3?5?$CFzd?5uncollectable?5objects?5at@ ; `string'
PUBLIC	??_C@_0CK@ONJJAOHD@gc?3?5?$CFzd?5uncollectable?5objects?5at@ ; `string'
PUBLIC	??_C@_0L@FGKCKJKB@_PyGC_Fini?$AA@		; `string'
PUBLIC	_PyGC_Fini
EXTRN	PyUnicode_EncodeFSDefault:PROC
EXTRN	PyObject_Repr:PROC
EXTRN	PyErr_WarnFormat:PROC
EXTRN	PyExc_ResourceWarning:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyGC_Fini DD imagerel $LN25
	DD	imagerel $LN25+489
	DD	imagerel $unwind$_PyGC_Fini
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyGC_Fini DD 010401H
	DD	0a204H
xdata	ENDS
;	COMDAT ??_C@_07FBMPDAOB@?5?5?5?5?$CFs?6?$AA@
CONST	SEGMENT
??_C@_07FBMPDAOB@?5?5?5?5?$CFs?6?$AA@ DB '    %s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@FILHOKME@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CK@FILHOKME@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 's', 00H
	DB	'_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, '('
	DB	00H, 'b', 00H, 'y', 00H, 't', 00H, 'e', 00H, 's', 00H, ')', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0GB@PGJHHMDB@gc?3?5?$CFzd?5uncollectable?5objects?5at@
CONST	SEGMENT
??_C@_0GB@PGJHHMDB@gc?3?5?$CFzd?5uncollectable?5objects?5at@ DB 'gc: %zd '
	DB	'uncollectable objects at shutdown; use gc.set_debug(gc.DEBUG_'
	DB	'UNCOLLECTABLE) to list them', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@ONJJAOHD@gc?3?5?$CFzd?5uncollectable?5objects?5at@
CONST	SEGMENT
??_C@_0CK@ONJJAOHD@gc?3?5?$CFzd?5uncollectable?5objects?5at@ DB 'gc: %zd '
	DB	'uncollectable objects at shutdown', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FGKCKJKB@_PyGC_Fini?$AA@
CONST	SEGMENT
??_C@_0L@FGKCKJKB@_PyGC_Fini?$AA@ DB '_PyGC_Fini', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PyGC_Fini
_TEXT	SEGMENT
message$21329 = 48
bytes$21340 = 56
repr$21338 = 64
_py_tmp$21364 = 72
_PyGC_Fini PROC						; COMDAT

; 1551 : {

$LN25:
  00000	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 1552 :     Py_GUARD

  00004	e8 00 00 00 00	 call	 _Py_PXCTX
  00009	85 c0		 test	 eax, eax
  0000b	74 1c		 je	 SHORT $LN21@PyGC_Fini
  0000d	45 33 c9	 xor	 r9d, r9d
  00010	41 b8 10 06 00
	00		 mov	 r8d, 1552		; 00000610H
  00016	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@FGKCKJKB@_PyGC_Fini?$AA@
  00024	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN21@PyGC_Fini:

; 1553 :     if (!(debug & DEBUG_SAVEALL)
; 1554 :         && garbage != NULL && PyList_GET_SIZE(garbage) > 0) {

  00029	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR debug
  0002f	83 e0 20	 and	 eax, 32			; 00000020H
  00032	85 c0		 test	 eax, eax
  00034	0f 85 4d 01 00
	00		 jne	 $LN20@PyGC_Fini
  0003a	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR garbage, 0
  00042	0f 84 3f 01 00
	00		 je	 $LN20@PyGC_Fini
  00048	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR garbage
  0004f	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00054	0f 8e 2d 01 00
	00		 jle	 $LN20@PyGC_Fini

; 1555 :         char *message;
; 1556 :         if (debug & DEBUG_UNCOLLECTABLE)

  0005a	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR debug
  00060	83 e0 04	 and	 eax, 4
  00063	85 c0		 test	 eax, eax
  00065	74 0e		 je	 SHORT $LN19@PyGC_Fini

; 1557 :             message = "gc: %zd uncollectable objects at " \
; 1558 :                 "shutdown";

  00067	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0CK@ONJJAOHD@gc?3?5?$CFzd?5uncollectable?5objects?5at@
  0006e	48 89 44 24 30	 mov	 QWORD PTR message$21329[rsp], rax

; 1559 :         else

  00073	eb 0c		 jmp	 SHORT $LN18@PyGC_Fini
$LN19@PyGC_Fini:

; 1560 :             message = "gc: %zd uncollectable objects at " \
; 1561 :                 "shutdown; use gc.set_debug(gc.DEBUG_UNCOLLECTABLE) to list them";

  00075	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0GB@PGJHHMDB@gc?3?5?$CFzd?5uncollectable?5objects?5at@
  0007c	48 89 44 24 30	 mov	 QWORD PTR message$21329[rsp], rax
$LN18@PyGC_Fini:

; 1562 :         if (PyErr_WarnFormat(PyExc_ResourceWarning, 0, message,
; 1563 :                              PyList_GET_SIZE(garbage)) < 0)

  00081	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR garbage
  00088	4c 8b 48 60	 mov	 r9, QWORD PTR [rax+96]
  0008c	4c 8b 44 24 30	 mov	 r8, QWORD PTR message$21329[rsp]
  00091	33 d2		 xor	 edx, edx
  00093	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ResourceWarning
  0009a	e8 00 00 00 00	 call	 PyErr_WarnFormat
  0009f	85 c0		 test	 eax, eax
  000a1	7d 07		 jge	 SHORT $LN17@PyGC_Fini

; 1564 :             PyErr_WriteUnraisable(NULL);

  000a3	33 c9		 xor	 ecx, ecx
  000a5	e8 00 00 00 00	 call	 PyErr_WriteUnraisable
$LN17@PyGC_Fini:

; 1565 :         if (debug & DEBUG_UNCOLLECTABLE) {

  000aa	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR debug
  000b0	83 e0 04	 and	 eax, 4
  000b3	85 c0		 test	 eax, eax
  000b5	0f 84 cc 00 00
	00		 je	 $LN16@PyGC_Fini

; 1566 :             PyObject *repr = NULL, *bytes = NULL;

  000bb	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR repr$21338[rsp], 0
  000c4	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR bytes$21340[rsp], 0

; 1567 :             repr = PyObject_Repr(garbage);

  000cd	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR garbage
  000d4	e8 00 00 00 00	 call	 PyObject_Repr
  000d9	48 89 44 24 40	 mov	 QWORD PTR repr$21338[rsp], rax

; 1568 :             if (!repr || !(bytes = PyUnicode_EncodeFSDefault(repr)))

  000de	48 83 7c 24 40
	00		 cmp	 QWORD PTR repr$21338[rsp], 0
  000e4	74 17		 je	 SHORT $LN14@PyGC_Fini
  000e6	48 8b 4c 24 40	 mov	 rcx, QWORD PTR repr$21338[rsp]
  000eb	e8 00 00 00 00	 call	 PyUnicode_EncodeFSDefault
  000f0	48 89 44 24 38	 mov	 QWORD PTR bytes$21340[rsp], rax
  000f5	48 83 7c 24 38
	00		 cmp	 QWORD PTR bytes$21340[rsp], 0
  000fb	75 0e		 jne	 SHORT $LN15@PyGC_Fini
$LN14@PyGC_Fini:

; 1569 :                 PyErr_WriteUnraisable(garbage);

  000fd	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR garbage
  00104	e8 00 00 00 00	 call	 PyErr_WriteUnraisable

; 1570 :             else {

  00109	eb 4c		 jmp	 SHORT $LN13@PyGC_Fini
$LN15@PyGC_Fini:

; 1571 :                 PySys_WriteStderr(
; 1572 :                     "    %s\n",
; 1573 :                     PyBytes_AS_STRING(bytes)
; 1574 :                     );

  0010b	48 8b 44 24 38	 mov	 rax, QWORD PTR bytes$21340[rsp]
  00110	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00114	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0011a	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  0011f	85 c0		 test	 eax, eax
  00121	75 1c		 jne	 SHORT $LN24@PyGC_Fini
  00123	41 b8 25 06 00
	00		 mov	 r8d, 1573		; 00000625H
  00129	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CM@JNCNOGAO@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAg?$AAc?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  00130	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@FILHOKME@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AAy?$AAt?$AAe?$AAs?$AA?$CJ?$AA?$AA@
  00137	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0013d	33 c0		 xor	 eax, eax
$LN24@PyGC_Fini:
  0013f	48 8b 44 24 38	 mov	 rax, QWORD PTR bytes$21340[rsp]
  00144	48 83 c0 78	 add	 rax, 120		; 00000078H
  00148	48 8b d0	 mov	 rdx, rax
  0014b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07FBMPDAOB@?5?5?5?5?$CFs?6?$AA@
  00152	e8 00 00 00 00	 call	 PySys_WriteStderr
$LN13@PyGC_Fini:
$LN12@PyGC_Fini:

; 1575 :             }
; 1576 :             Py_XDECREF(repr);

  00157	48 83 7c 24 40
	00		 cmp	 QWORD PTR repr$21338[rsp], 0
  0015d	74 0a		 je	 SHORT $LN9@PyGC_Fini
  0015f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR repr$21338[rsp]
  00164	e8 00 00 00 00	 call	 _Py_DecRef
$LN9@PyGC_Fini:
  00169	33 c0		 xor	 eax, eax
  0016b	85 c0		 test	 eax, eax
  0016d	75 e8		 jne	 SHORT $LN12@PyGC_Fini
$LN8@PyGC_Fini:

; 1577 :             Py_XDECREF(bytes);

  0016f	48 83 7c 24 38
	00		 cmp	 QWORD PTR bytes$21340[rsp], 0
  00175	74 0a		 je	 SHORT $LN5@PyGC_Fini
  00177	48 8b 4c 24 38	 mov	 rcx, QWORD PTR bytes$21340[rsp]
  0017c	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@PyGC_Fini:
  00181	33 c0		 xor	 eax, eax
  00183	85 c0		 test	 eax, eax
  00185	75 e8		 jne	 SHORT $LN8@PyGC_Fini
$LN16@PyGC_Fini:
$LN20@PyGC_Fini:
$LN4@PyGC_Fini:

; 1578 :         }
; 1579 :     }
; 1580 :     Py_CLEAR(callbacks);

  00187	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR callbacks, 0
  0018f	74 4d		 je	 SHORT $LN1@PyGC_Fini
  00191	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00199	4c 8b 0d 00 00
	00 00		 mov	 r9, QWORD PTR callbacks
  001a0	41 b8 2c 06 00
	00		 mov	 r8d, 1580		; 0000062cH
  001a6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  001ad	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@FGKCKJKB@_PyGC_Fini?$AA@
  001b4	e8 00 00 00 00	 call	 _PyParallel_Guard
  001b9	85 c0		 test	 eax, eax
  001bb	75 21		 jne	 SHORT $LN1@PyGC_Fini
  001bd	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR callbacks
  001c4	48 89 44 24 48	 mov	 QWORD PTR _py_tmp$21364[rsp], rax
  001c9	48 c7 05 00 00
	00 00 00 00 00
	00		 mov	 QWORD PTR callbacks, 0
  001d4	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _py_tmp$21364[rsp]
  001d9	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@PyGC_Fini:
  001de	33 c0		 xor	 eax, eax
  001e0	85 c0		 test	 eax, eax
  001e2	75 a3		 jne	 SHORT $LN4@PyGC_Fini

; 1581 : }

  001e4	48 83 c4 58	 add	 rsp, 88			; 00000058H
  001e8	c3		 ret	 0
_PyGC_Fini ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@KPOLAFKH@_PyGC_Dump?$AA@		; `string'
PUBLIC	_PyGC_Dump
EXTRN	_PyObject_Dump:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyGC_Dump DD imagerel $LN6
	DD	imagerel $LN6+95
	DD	imagerel $unwind$_PyGC_Dump
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyGC_Dump DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0L@KPOLAFKH@_PyGC_Dump?$AA@
CONST	SEGMENT
??_C@_0L@KPOLAFKH@_PyGC_Dump?$AA@ DB '_PyGC_Dump', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PyGC_Dump
_TEXT	SEGMENT
tv73 = 32
g$ = 64
_PyGC_Dump PROC						; COMDAT

; 1586 : {

$LN6:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1587 :     Py_GUARD

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	74 1c		 je	 SHORT $LN1@PyGC_Dump
  00012	45 33 c9	 xor	 r9d, r9d
  00015	41 b8 33 06 00
	00		 mov	 r8d, 1587		; 00000633H
  0001b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@KPOLAFKH@_PyGC_Dump?$AA@
  00029	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN1@PyGC_Dump:

; 1588 :     _PyObject_Dump(FROM_GC(g));

  0002e	e8 00 00 00 00	 call	 _Py_PXCTX
  00033	85 c0		 test	 eax, eax
  00035	74 0b		 je	 SHORT $LN4@PyGC_Dump
  00037	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR tv73[rsp], 0
  00040	eb 0e		 jmp	 SHORT $LN5@PyGC_Dump
$LN4@PyGC_Dump:
  00042	48 8b 44 24 40	 mov	 rax, QWORD PTR g$[rsp]
  00047	48 83 c0 18	 add	 rax, 24
  0004b	48 89 44 24 20	 mov	 QWORD PTR tv73[rsp], rax
$LN5@PyGC_Dump:
  00050	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tv73[rsp]
  00055	e8 00 00 00 00	 call	 _PyObject_Dump

; 1589 : }

  0005a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0005e	c3		 ret	 0
_PyGC_Dump ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@ ; `string'
PUBLIC	??_C@_0BC@MEIJNBMG@PyObject_GC_Track?$AA@	; `string'
PUBLIC	PyObject_GC_Track
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyObject_GC_Track DD imagerel $LN11
	DD	imagerel $LN11+266
	DD	imagerel $unwind$PyObject_GC_Track
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyObject_GC_Track DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@
CONST	SEGMENT
??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@ DB 'GC object alread'
	DB	'y tracked', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@MEIJNBMG@PyObject_GC_Track?$AA@
CONST	SEGMENT
??_C@_0BC@MEIJNBMG@PyObject_GC_Track?$AA@ DB 'PyObject_GC_Track', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyObject_GC_Track
_TEXT	SEGMENT
g$21386 = 48
tv81 = 56
op$ = 80
PyObject_GC_Track PROC					; COMDAT

; 1601 : {

$LN11:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1602 :     Px_VOID

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	74 05		 je	 SHORT $LN6@PyObject_G
  00012	e9 ee 00 00 00	 jmp	 $LN7@PyObject_G
$LN6@PyObject_G:

; 1603 :     _PyObject_GC_TRACK(op);

  00017	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0001f	4c 8b 4c 24 50	 mov	 r9, QWORD PTR op$[rsp]
  00024	41 b8 43 06 00
	00		 mov	 r8d, 1603		; 00000643H
  0002a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00031	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@MEIJNBMG@PyObject_GC_Track?$AA@
  00038	e8 00 00 00 00	 call	 _PyParallel_Guard
  0003d	85 c0		 test	 eax, eax
  0003f	0f 85 c0 00 00
	00		 jne	 $LN5@PyObject_G
$LN4@PyObject_G:
  00045	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0004d	4c 8b 4c 24 50	 mov	 r9, QWORD PTR op$[rsp]
  00052	41 b8 43 06 00
	00		 mov	 r8d, 1603		; 00000643H
  00058	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  0005f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@MEIJNBMG@PyObject_GC_Track?$AA@
  00066	e8 00 00 00 00	 call	 _PyParallel_Guard
  0006b	85 c0		 test	 eax, eax
  0006d	74 0b		 je	 SHORT $LN9@PyObject_G
  0006f	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR tv81[rsp], 0
  00078	eb 0e		 jmp	 SHORT $LN10@PyObject_G
$LN9@PyObject_G:
  0007a	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0007f	48 83 e8 18	 sub	 rax, 24
  00083	48 89 44 24 38	 mov	 QWORD PTR tv81[rsp], rax
$LN10@PyObject_G:
  00088	48 8b 44 24 38	 mov	 rax, QWORD PTR tv81[rsp]
  0008d	48 89 44 24 30	 mov	 QWORD PTR g$21386[rsp], rax
  00092	48 8b 44 24 30	 mov	 rax, QWORD PTR g$21386[rsp]
  00097	48 83 78 10 fe	 cmp	 QWORD PTR [rax+16], -2
  0009c	74 0c		 je	 SHORT $LN1@PyObject_G
  0009e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@
  000a5	e8 00 00 00 00	 call	 Py_FatalError
$LN1@PyObject_G:
  000aa	48 8b 44 24 30	 mov	 rax, QWORD PTR g$21386[rsp]
  000af	48 c7 40 10 fd
	ff ff ff	 mov	 QWORD PTR [rax+16], -3
  000b7	48 8b 44 24 30	 mov	 rax, QWORD PTR g$21386[rsp]
  000bc	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR _PyGC_generation0
  000c3	48 89 08	 mov	 QWORD PTR [rax], rcx
  000c6	48 8b 44 24 30	 mov	 rax, QWORD PTR g$21386[rsp]
  000cb	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR _PyGC_generation0
  000d2	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  000d6	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  000da	48 8b 44 24 30	 mov	 rax, QWORD PTR g$21386[rsp]
  000df	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  000e3	48 8b 4c 24 30	 mov	 rcx, QWORD PTR g$21386[rsp]
  000e8	48 89 08	 mov	 QWORD PTR [rax], rcx
  000eb	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyGC_generation0
  000f2	48 8b 4c 24 30	 mov	 rcx, QWORD PTR g$21386[rsp]
  000f7	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  000fb	33 c0		 xor	 eax, eax
  000fd	85 c0		 test	 eax, eax
  000ff	0f 85 40 ff ff
	ff		 jne	 $LN4@PyObject_G
$LN5@PyObject_G:
$LN7@PyObject_G:

; 1604 : }

  00105	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00109	c3		 ret	 0
PyObject_GC_Track ENDP
_TEXT	ENDS
PUBLIC	??_C@_1EM@HFMJMDDM@?$AAg?$AA?9?$AA?$DO?$AAg?$AAc?$AA?4?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AAG?$AAC?$AA_?$AAR?$AAE?$AAF?$AAS?$AA_?$AAU?$AAN?$AAT?$AAR@ ; `string'
PUBLIC	??_C@_0BE@KKLCKPHK@PyObject_GC_UnTrack?$AA@	; `string'
PUBLIC	PyObject_GC_UnTrack
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyObject_GC_UnTrack DD imagerel $LN18
	DD	imagerel $LN18+435
	DD	imagerel $unwind$PyObject_GC_UnTrack
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyObject_GC_UnTrack DD 010901H
	DD	0c209H
xdata	ENDS
;	COMDAT ??_C@_1EM@HFMJMDDM@?$AAg?$AA?9?$AA?$DO?$AAg?$AAc?$AA?4?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AAG?$AAC?$AA_?$AAR?$AAE?$AAF?$AAS?$AA_?$AAU?$AAN?$AAT?$AAR@
CONST	SEGMENT
??_C@_1EM@HFMJMDDM@?$AAg?$AA?9?$AA?$DO?$AAg?$AAc?$AA?4?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AAG?$AAC?$AA_?$AAR?$AAE?$AAF?$AAS?$AA_?$AAU?$AAN?$AAT?$AAR@ DB 'g'
	DB	00H, '-', 00H, '>', 00H, 'g', 00H, 'c', 00H, '.', 00H, 'g', 00H
	DB	'c', 00H, '_', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 's', 00H, ' '
	DB	00H, '!', 00H, '=', 00H, ' ', 00H, '_', 00H, 'P', 00H, 'y', 00H
	DB	'G', 00H, 'C', 00H, '_', 00H, 'R', 00H, 'E', 00H, 'F', 00H, 'S'
	DB	00H, '_', 00H, 'U', 00H, 'N', 00H, 'T', 00H, 'R', 00H, 'A', 00H
	DB	'C', 00H, 'K', 00H, 'E', 00H, 'D', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@KKLCKPHK@PyObject_GC_UnTrack?$AA@
CONST	SEGMENT
??_C@_0BE@KKLCKPHK@PyObject_GC_UnTrack?$AA@ DB 'PyObject_GC_UnTrack', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyObject_GC_UnTrack
_TEXT	SEGMENT
g$21403 = 48
tv85 = 56
tv80 = 64
tv83 = 72
tv134 = 80
op$ = 112
PyObject_GC_UnTrack PROC				; COMDAT

; 1608 : {

$LN18:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 1609 :     Px_VOID

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	74 05		 je	 SHORT $LN6@PyObject_G@2
  00012	e9 97 01 00 00	 jmp	 $LN7@PyObject_G@2
$LN6@PyObject_G@2:

; 1610 :     /* Obscure:  the Py_TRASHCAN mechanism requires that we be able to
; 1611 :      * call PyObject_GC_UnTrack twice on an object.
; 1612 :      */
; 1613 :     if (IS_TRACKED(op))

  00017	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0001f	4c 8b 4c 24 70	 mov	 r9, QWORD PTR op$[rsp]
  00024	41 b8 4d 06 00
	00		 mov	 r8d, 1613		; 0000064dH
  0002a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00031	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@KKLCKPHK@PyObject_GC_UnTrack?$AA@
  00038	e8 00 00 00 00	 call	 _PyParallel_Guard
  0003d	85 c0		 test	 eax, eax
  0003f	74 0a		 je	 SHORT $LN13@PyObject_G@2
  00041	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR tv85[rsp], 0
  00049	eb 69		 jmp	 SHORT $LN14@PyObject_G@2
$LN13@PyObject_G@2:
  0004b	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00053	4c 8b 4c 24 70	 mov	 r9, QWORD PTR op$[rsp]
  00058	41 b8 4d 06 00
	00		 mov	 r8d, 1613		; 0000064dH
  0005e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00065	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@KKLCKPHK@PyObject_GC_UnTrack?$AA@
  0006c	e8 00 00 00 00	 call	 _PyParallel_Guard
  00071	85 c0		 test	 eax, eax
  00073	74 0b		 je	 SHORT $LN9@PyObject_G@2
  00075	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR tv80[rsp], 0
  0007e	eb 0e		 jmp	 SHORT $LN10@PyObject_G@2
$LN9@PyObject_G@2:
  00080	48 8b 44 24 70	 mov	 rax, QWORD PTR op$[rsp]
  00085	48 83 e8 18	 sub	 rax, 24
  00089	48 89 44 24 40	 mov	 QWORD PTR tv80[rsp], rax
$LN10@PyObject_G@2:
  0008e	48 8b 44 24 40	 mov	 rax, QWORD PTR tv80[rsp]
  00093	48 83 78 10 fe	 cmp	 QWORD PTR [rax+16], -2
  00098	74 0a		 je	 SHORT $LN11@PyObject_G@2
  0009a	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR tv83[rsp], 1
  000a2	eb 08		 jmp	 SHORT $LN12@PyObject_G@2
$LN11@PyObject_G@2:
  000a4	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR tv83[rsp], 0
$LN12@PyObject_G@2:
  000ac	8b 44 24 48	 mov	 eax, DWORD PTR tv83[rsp]
  000b0	89 44 24 38	 mov	 DWORD PTR tv85[rsp], eax
$LN14@PyObject_G@2:
  000b4	83 7c 24 38 00	 cmp	 DWORD PTR tv85[rsp], 0
  000b9	0f 84 ef 00 00
	00		 je	 $LN5@PyObject_G@2

; 1614 :         _PyObject_GC_UNTRACK(op);

  000bf	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000c7	4c 8b 4c 24 70	 mov	 r9, QWORD PTR op$[rsp]
  000cc	41 b8 4e 06 00
	00		 mov	 r8d, 1614		; 0000064eH
  000d2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  000d9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@KKLCKPHK@PyObject_GC_UnTrack?$AA@
  000e0	e8 00 00 00 00	 call	 _PyParallel_Guard
  000e5	85 c0		 test	 eax, eax
  000e7	0f 85 c1 00 00
	00		 jne	 $LN4@PyObject_G@2
$LN3@PyObject_G@2:
  000ed	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000f5	4c 8b 4c 24 70	 mov	 r9, QWORD PTR op$[rsp]
  000fa	41 b8 4e 06 00
	00		 mov	 r8d, 1614		; 0000064eH
  00100	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00107	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@KKLCKPHK@PyObject_GC_UnTrack?$AA@
  0010e	e8 00 00 00 00	 call	 _PyParallel_Guard
  00113	85 c0		 test	 eax, eax
  00115	74 0b		 je	 SHORT $LN15@PyObject_G@2
  00117	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR tv134[rsp], 0
  00120	eb 0e		 jmp	 SHORT $LN16@PyObject_G@2
$LN15@PyObject_G@2:
  00122	48 8b 44 24 70	 mov	 rax, QWORD PTR op$[rsp]
  00127	48 83 e8 18	 sub	 rax, 24
  0012b	48 89 44 24 50	 mov	 QWORD PTR tv134[rsp], rax
$LN16@PyObject_G@2:
  00130	48 8b 44 24 50	 mov	 rax, QWORD PTR tv134[rsp]
  00135	48 89 44 24 30	 mov	 QWORD PTR g$21403[rsp], rax
  0013a	48 8b 44 24 30	 mov	 rax, QWORD PTR g$21403[rsp]
  0013f	48 83 78 10 fe	 cmp	 QWORD PTR [rax+16], -2
  00144	75 1c		 jne	 SHORT $LN17@PyObject_G@2
  00146	41 b8 4e 06 00
	00		 mov	 r8d, 1614		; 0000064eH
  0014c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CM@JNCNOGAO@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AAg?$AAc?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  00153	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EM@HFMJMDDM@?$AAg?$AA?9?$AA?$DO?$AAg?$AAc?$AA?4?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AAG?$AAC?$AA_?$AAR?$AAE?$AAF?$AAS?$AA_?$AAU?$AAN?$AAT?$AAR@
  0015a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00160	33 c0		 xor	 eax, eax
$LN17@PyObject_G@2:
  00162	48 8b 44 24 30	 mov	 rax, QWORD PTR g$21403[rsp]
  00167	48 c7 40 10 fe
	ff ff ff	 mov	 QWORD PTR [rax+16], -2
  0016f	48 8b 44 24 30	 mov	 rax, QWORD PTR g$21403[rsp]
  00174	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00178	48 8b 4c 24 30	 mov	 rcx, QWORD PTR g$21403[rsp]
  0017d	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00180	48 89 08	 mov	 QWORD PTR [rax], rcx
  00183	48 8b 44 24 30	 mov	 rax, QWORD PTR g$21403[rsp]
  00188	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0018b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR g$21403[rsp]
  00190	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00194	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  00198	48 8b 44 24 30	 mov	 rax, QWORD PTR g$21403[rsp]
  0019d	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
  001a4	33 c0		 xor	 eax, eax
  001a6	85 c0		 test	 eax, eax
  001a8	0f 85 3f ff ff
	ff		 jne	 $LN3@PyObject_G@2
$LN4@PyObject_G@2:
$LN5@PyObject_G@2:
$LN7@PyObject_G@2:

; 1615 : }

  001ae	48 83 c4 68	 add	 rsp, 104		; 00000068H
  001b2	c3		 ret	 0
PyObject_GC_UnTrack ENDP
_TEXT	ENDS
PUBLIC	_PyObject_GC_Malloc
EXTRN	_PyObject_DebugMalloc:PROC
EXTRN	PyErr_NoMemory:PROC
EXTRN	_PxMem_Malloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyObject_GC_Malloc DD imagerel $LN9
	DD	imagerel $LN9+257
	DD	imagerel $unwind$_PyObject_GC_Malloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyObject_GC_Malloc DD 010901H
	DD	08209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _PyObject_GC_Malloc
_TEXT	SEGMENT
g$ = 32
op$ = 40
tv86 = 48
basicsize$ = 80
_PyObject_GC_Malloc PROC				; COMDAT

; 1619 : {

$LN9:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1620 :     PyObject *op;
; 1621 :     PyGC_Head *g;
; 1622 :     Px_RETURN((PyObject *)_PxMem_Malloc(basicsize))

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	74 0f		 je	 SHORT $LN4@PyObject_G@3
  00012	48 8b 4c 24 50	 mov	 rcx, QWORD PTR basicsize$[rsp]
  00017	e8 00 00 00 00	 call	 _PxMem_Malloc
  0001c	e9 db 00 00 00	 jmp	 $LN5@PyObject_G@3
$LN4@PyObject_G@3:

; 1623 :     if (basicsize > PY_SSIZE_T_MAX - sizeof(PyGC_Head))

  00021	48 b8 e7 ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775783 ; 7fffffffffffffe7H
  0002b	48 39 44 24 50	 cmp	 QWORD PTR basicsize$[rsp], rax
  00030	76 0a		 jbe	 SHORT $LN3@PyObject_G@3

; 1624 :         return PyErr_NoMemory();

  00032	e8 00 00 00 00	 call	 PyErr_NoMemory
  00037	e9 c0 00 00 00	 jmp	 $LN5@PyObject_G@3
$LN3@PyObject_G@3:

; 1625 :     g = (PyGC_Head *)PyObject_MALLOC(
; 1626 :         sizeof(PyGC_Head) + basicsize);

  0003c	48 8b 44 24 50	 mov	 rax, QWORD PTR basicsize$[rsp]
  00041	48 83 c0 18	 add	 rax, 24
  00045	48 8b c8	 mov	 rcx, rax
  00048	e8 00 00 00 00	 call	 _PyObject_DebugMalloc
  0004d	48 89 44 24 20	 mov	 QWORD PTR g$[rsp], rax

; 1627 :     if (g == NULL)

  00052	48 83 7c 24 20
	00		 cmp	 QWORD PTR g$[rsp], 0
  00058	75 0a		 jne	 SHORT $LN2@PyObject_G@3

; 1628 :         return PyErr_NoMemory();

  0005a	e8 00 00 00 00	 call	 PyErr_NoMemory
  0005f	e9 98 00 00 00	 jmp	 $LN5@PyObject_G@3
$LN2@PyObject_G@3:

; 1629 :     g->gc.gc_refs = GC_UNTRACKED;

  00064	48 8b 44 24 20	 mov	 rax, QWORD PTR g$[rsp]
  00069	48 c7 40 10 fe
	ff ff ff	 mov	 QWORD PTR [rax+16], -2

; 1630 :     generations[0].count++; /* number of allocated GC objects */

  00071	8b 05 1c 00 00
	00		 mov	 eax, DWORD PTR generations+28
  00077	ff c0		 inc	 eax
  00079	89 05 1c 00 00
	00		 mov	 DWORD PTR generations+28, eax

; 1631 :     if (generations[0].count > generations[0].threshold &&
; 1632 :         enabled &&
; 1633 :         generations[0].threshold &&
; 1634 :         !collecting &&
; 1635 :         !PyErr_Occurred()) {

  0007f	8b 05 18 00 00
	00		 mov	 eax, DWORD PTR generations+24
  00085	39 05 1c 00 00
	00		 cmp	 DWORD PTR generations+28, eax
  0008b	7e 3e		 jle	 SHORT $LN1@PyObject_G@3
  0008d	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR enabled, 0
  00094	74 35		 je	 SHORT $LN1@PyObject_G@3
  00096	83 3d 18 00 00
	00 00		 cmp	 DWORD PTR generations+24, 0
  0009d	74 2c		 je	 SHORT $LN1@PyObject_G@3
  0009f	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR collecting, 0
  000a6	75 23		 jne	 SHORT $LN1@PyObject_G@3
  000a8	e8 00 00 00 00	 call	 PyErr_Occurred
  000ad	48 85 c0	 test	 rax, rax
  000b0	75 19		 jne	 SHORT $LN1@PyObject_G@3

; 1636 :         collecting = 1;

  000b2	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR collecting, 1

; 1637 :         collect_generations();

  000bc	e8 00 00 00 00	 call	 collect_generations

; 1638 :         collecting = 0;

  000c1	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR collecting, 0
$LN1@PyObject_G@3:

; 1639 :     }
; 1640 :     op = FROM_GC(g);

  000cb	e8 00 00 00 00	 call	 _Py_PXCTX
  000d0	85 c0		 test	 eax, eax
  000d2	74 0b		 je	 SHORT $LN7@PyObject_G@3
  000d4	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR tv86[rsp], 0
  000dd	eb 0e		 jmp	 SHORT $LN8@PyObject_G@3
$LN7@PyObject_G@3:
  000df	48 8b 44 24 20	 mov	 rax, QWORD PTR g$[rsp]
  000e4	48 83 c0 18	 add	 rax, 24
  000e8	48 89 44 24 30	 mov	 QWORD PTR tv86[rsp], rax
$LN8@PyObject_G@3:
  000ed	48 8b 44 24 30	 mov	 rax, QWORD PTR tv86[rsp]
  000f2	48 89 44 24 28	 mov	 QWORD PTR op$[rsp], rax

; 1641 :     return op;

  000f7	48 8b 44 24 28	 mov	 rax, QWORD PTR op$[rsp]
$LN5@PyObject_G@3:

; 1642 : }

  000fc	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00100	c3		 ret	 0
_PyObject_GC_Malloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BE@MOJBBFIL@collect_generations?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$collect_generations DD imagerel collect_generations
	DD	imagerel collect_generations+186
	DD	imagerel $unwind$collect_generations
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$collect_generations DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_0BE@MOJBBFIL@collect_generations?$AA@
CONST	SEGMENT
??_C@_0BE@MOJBBFIL@collect_generations?$AA@ DB 'collect_generations', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT collect_generations
_TEXT	SEGMENT
n$ = 32
i$ = 40
collect_generations PROC				; COMDAT

; 1102 : {

  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1103 :     int i;
; 1104 :     Py_ssize_t n = 0;

  00004	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR n$[rsp], 0

; 1105 :     Py_GUARD

  0000d	e8 00 00 00 00	 call	 _Py_PXCTX
  00012	85 c0		 test	 eax, eax
  00014	74 1c		 je	 SHORT $LN6@collect_ge
  00016	45 33 c9	 xor	 r9d, r9d
  00019	41 b8 51 04 00
	00		 mov	 r8d, 1105		; 00000451H
  0001f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00026	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@MOJBBFIL@collect_generations?$AA@
  0002d	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN6@collect_ge:

; 1106 : 
; 1107 :     /* Find the oldest generation (highest numbered) where the count
; 1108 :      * exceeds the threshold.  Objects in the that generation and
; 1109 :      * generations younger than it will be collected. */
; 1110 :     for (i = NUM_GENERATIONS-1; i >= 0; i--) {

  00032	c7 44 24 28 02
	00 00 00	 mov	 DWORD PTR i$[rsp], 2
  0003a	eb 0a		 jmp	 SHORT $LN5@collect_ge
$LN4@collect_ge:
  0003c	8b 44 24 28	 mov	 eax, DWORD PTR i$[rsp]
  00040	ff c8		 dec	 eax
  00042	89 44 24 28	 mov	 DWORD PTR i$[rsp], eax
$LN5@collect_ge:
  00046	83 7c 24 28 00	 cmp	 DWORD PTR i$[rsp], 0
  0004b	7c 63		 jl	 SHORT $LN3@collect_ge

; 1111 :         if (generations[i].count > generations[i].threshold) {

  0004d	48 63 44 24 28	 movsxd	 rax, DWORD PTR i$[rsp]
  00052	48 6b c0 20	 imul	 rax, 32			; 00000020H
  00056	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:generations
  0005d	48 63 54 24 28	 movsxd	 rdx, DWORD PTR i$[rsp]
  00062	48 6b d2 20	 imul	 rdx, 32			; 00000020H
  00066	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:generations
  0006d	41 8b 54 10 18	 mov	 edx, DWORD PTR [r8+rdx+24]
  00072	39 54 01 1c	 cmp	 DWORD PTR [rcx+rax+28], edx
  00076	7e 36		 jle	 SHORT $LN2@collect_ge

; 1112 :             /* Avoid quadratic performance degradation in number
; 1113 :                of tracked objects. See comments at the beginning
; 1114 :                of this file, and issue #4074.
; 1115 :             */
; 1116 :             if (i == NUM_GENERATIONS - 1
; 1117 :                 && long_lived_pending < long_lived_total / 4)

  00078	83 7c 24 28 02	 cmp	 DWORD PTR i$[rsp], 2
  0007d	75 1f		 jne	 SHORT $LN1@collect_ge
  0007f	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR long_lived_total
  00086	48 99		 cdq
  00088	48 83 e2 03	 and	 rdx, 3
  0008c	48 03 c2	 add	 rax, rdx
  0008f	48 c1 f8 02	 sar	 rax, 2
  00093	48 39 05 00 00
	00 00		 cmp	 QWORD PTR long_lived_pending, rax
  0009a	7d 02		 jge	 SHORT $LN1@collect_ge

; 1118 :                 continue;

  0009c	eb 9e		 jmp	 SHORT $LN4@collect_ge
$LN1@collect_ge:

; 1119 :             n = collect_with_callback(i);

  0009e	8b 4c 24 28	 mov	 ecx, DWORD PTR i$[rsp]
  000a2	e8 00 00 00 00	 call	 collect_with_callback
  000a7	48 89 44 24 20	 mov	 QWORD PTR n$[rsp], rax

; 1120 :             break;

  000ac	eb 02		 jmp	 SHORT $LN3@collect_ge
$LN2@collect_ge:

; 1121 :         }
; 1122 :     }

  000ae	eb 8c		 jmp	 SHORT $LN4@collect_ge
$LN3@collect_ge:

; 1123 :     return n;

  000b0	48 8b 44 24 20	 mov	 rax, QWORD PTR n$[rsp]

; 1124 : }

  000b5	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000b9	c3		 ret	 0
collect_generations ENDP
_TEXT	ENDS
PUBLIC	_PyObject_GC_New
EXTRN	_PxObject_New:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyObject_GC_New DD imagerel $LN5
	DD	imagerel $LN5+87
	DD	imagerel $unwind$_PyObject_GC_New
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyObject_GC_New DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _PyObject_GC_New
_TEXT	SEGMENT
op$ = 32
tp$ = 64
_PyObject_GC_New PROC					; COMDAT

; 1646 : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1647 :     PyObject *op;
; 1648 :     Px_RETURN(_PxObject_New(tp))

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	74 0c		 je	 SHORT $LN2@PyObject_G@4
  00012	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tp$[rsp]
  00017	e8 00 00 00 00	 call	 _PxObject_New
  0001c	eb 34		 jmp	 SHORT $LN3@PyObject_G@4
$LN2@PyObject_G@4:

; 1649 :     op = _PyObject_GC_Malloc(_PyObject_SIZE(tp));

  0001e	48 8b 44 24 40	 mov	 rax, QWORD PTR tp$[rsp]
  00023	48 8b 48 78	 mov	 rcx, QWORD PTR [rax+120]
  00027	e8 00 00 00 00	 call	 _PyObject_GC_Malloc
  0002c	48 89 44 24 20	 mov	 QWORD PTR op$[rsp], rax

; 1650 :     if (op != NULL)

  00031	48 83 7c 24 20
	00		 cmp	 QWORD PTR op$[rsp], 0
  00037	74 14		 je	 SHORT $LN1@PyObject_G@4

; 1651 :         op = PyObject_INIT(op, tp);

  00039	48 8b 54 24 40	 mov	 rdx, QWORD PTR tp$[rsp]
  0003e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR op$[rsp]
  00043	e8 00 00 00 00	 call	 PyObject_INIT
  00048	48 89 44 24 20	 mov	 QWORD PTR op$[rsp], rax
$LN1@PyObject_G@4:

; 1652 :     return op;

  0004d	48 8b 44 24 20	 mov	 rax, QWORD PTR op$[rsp]
$LN3@PyObject_G@4:

; 1653 : }

  00052	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00056	c3		 ret	 0
_PyObject_GC_New ENDP
_TEXT	ENDS
EXTRN	_Py_NewReference:PROC
EXTRN	_PxObject_Init:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\objimpl.h
pdata	SEGMENT
$pdata$PyObject_INIT DD imagerel PyObject_INIT
	DD	imagerel PyObject_INIT+84
	DD	imagerel $unwind$PyObject_INIT
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyObject_INIT DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyObject_INIT
_TEXT	SEGMENT
op$ = 48
tp$ = 56
PyObject_INIT PROC					; COMDAT

; 236  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 237  :     Px_RETURN(_PxObject_Init(op, tp))

  0000e	e8 00 00 00 00	 call	 _Py_PXCTX
  00013	85 c0		 test	 eax, eax
  00015	74 11		 je	 SHORT $LN1@PyObject_I
  00017	48 8b 54 24 38	 mov	 rdx, QWORD PTR tp$[rsp]
  0001c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR op$[rsp]
  00021	e8 00 00 00 00	 call	 _PxObject_Init
  00026	eb 27		 jmp	 SHORT $LN2@PyObject_I
$LN1@PyObject_I:

; 238  :     Py_TYPE(op) = tp;

  00028	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  0002d	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tp$[rsp]
  00032	48 89 48 58	 mov	 QWORD PTR [rax+88], rcx

; 239  :     _PyObject_InitHead(op);

  00036	48 8b 4c 24 30	 mov	 rcx, QWORD PTR op$[rsp]
  0003b	e8 00 00 00 00	 call	 _PyObject_InitHead

; 240  :     _Py_NewReference(op);

  00040	48 8b 4c 24 30	 mov	 rcx, QWORD PTR op$[rsp]
  00045	e8 00 00 00 00	 call	 _Py_NewReference

; 241  :     return op;

  0004a	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
$LN2@PyObject_I:

; 242  : }

  0004f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00053	c3		 ret	 0
PyObject_INIT ENDP
_TEXT	ENDS
PUBLIC	??_C@_1BI@GPFDFIDP@?$AAP?$AAy?$AA_?$AAT?$AAY?$AAP?$AAE?$AA?$CI?$AAo?$AAp?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1EI@MBCBHLGB@?$AAc?$AA?3?$AA?2?$AAs?$AAr?$AAc?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?2?$AAi?$AAn?$AAc?$AAl?$AAu?$AAd?$AAe?$AA?2?$AAo?$AAb?$AAj?$AAi?$AAm?$AAp@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyObject_InitHead DD imagerel _PyObject_InitHead
	DD	imagerel _PyObject_InitHead+182
	DD	imagerel $unwind$_PyObject_InitHead
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyObject_InitHead DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT ??_C@_1BI@GPFDFIDP@?$AAP?$AAy?$AA_?$AAT?$AAY?$AAP?$AAE?$AA?$CI?$AAo?$AAp?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1BI@GPFDFIDP@?$AAP?$AAy?$AA_?$AAT?$AAY?$AAP?$AAE?$AA?$CI?$AAo?$AAp?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, '_', 00H, 'T', 00H, 'Y', 00H, 'P', 00H, 'E', 00H
	DB	'(', 00H, 'o', 00H, 'p', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EI@MBCBHLGB@?$AAc?$AA?3?$AA?2?$AAs?$AAr?$AAc?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?2?$AAi?$AAn?$AAc?$AAl?$AAu?$AAd?$AAe?$AA?2?$AAo?$AAb?$AAj?$AAi?$AAm?$AAp@
CONST	SEGMENT
??_C@_1EI@MBCBHLGB@?$AAc?$AA?3?$AA?2?$AAs?$AAr?$AAc?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?2?$AAi?$AAn?$AAc?$AAl?$AAu?$AAd?$AAe?$AA?2?$AAo?$AAb?$AAj?$AAi?$AAm?$AAp@ DB 'c'
	DB	00H, ':', 00H, '\', 00H, 's', 00H, 'r', 00H, 'c', 00H, '\', 00H
	DB	'p', 00H, 'y', 00H, 'p', 00H, 'a', 00H, 'r', 00H, 'a', 00H, 'l'
	DB	00H, 'l', 00H, 'e', 00H, 'l', 00H, '\', 00H, 'i', 00H, 'n', 00H
	DB	'c', 00H, 'l', 00H, 'u', 00H, 'd', 00H, 'e', 00H, '\', 00H, 'o'
	DB	00H, 'b', 00H, 'j', 00H, 'i', 00H, 'm', 00H, 'p', 00H, 'l', 00H
	DB	'.', 00H, 'h', 00H, 00H, 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PyObject_InitHead
_TEXT	SEGMENT
op$ = 48
_PyObject_InitHead PROC					; COMDAT

; 215  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 216  :     assert(Py_TYPE(op));

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  0000e	48 83 78 58 00	 cmp	 QWORD PTR [rax+88], 0
  00013	75 1c		 jne	 SHORT $LN3@PyObject_I@2
  00015	41 b8 d8 00 00
	00		 mov	 r8d, 216		; 000000d8H
  0001b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1EI@MBCBHLGB@?$AAc?$AA?3?$AA?2?$AAs?$AAr?$AAc?$AA?2?$AAp?$AAy?$AAp?$AAa?$AAr?$AAa?$AAl?$AAl?$AAe?$AAl?$AA?2?$AAi?$AAn?$AAc?$AAl?$AAu?$AAd?$AAe?$AA?2?$AAo?$AAb?$AAj?$AAi?$AAm?$AAp@
  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BI@GPFDFIDP@?$AAP?$AAy?$AA_?$AAT?$AAY?$AAP?$AAE?$AA?$CI?$AAo?$AAp?$AA?$CJ?$AA?$AA@
  00029	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0002f	33 c0		 xor	 eax, eax
$LN3@PyObject_I@2:

; 217  :     op->is_px = _Py_NOT_PARALLEL;

  00031	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  00036	48 b9 78 56 ef
	be 34 12 ad de	 mov	 rcx, -2401243008567650696 ; dead1234beef5678H
  00040	48 89 08	 mov	 QWORD PTR [rax], rcx

; 218  :     op->px    = _Py_NOT_PARALLEL;

  00043	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  00048	48 b9 78 56 ef
	be 34 12 ad de	 mov	 rcx, -2401243008567650696 ; dead1234beef5678H
  00052	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 219  :     op->slist_entry.Next = NULL;

  00056	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  0005b	48 c7 40 10 00
	00 00 00	 mov	 QWORD PTR [rax+16], 0

; 220  :     op->px_flags  = Py_PXFLAGS_ISPY;

  00063	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  00068	48 c7 40 20 01
	00 00 00	 mov	 QWORD PTR [rax+32], 1

; 221  :     op->srw_lock  = NULL;

  00070	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  00075	48 c7 40 28 00
	00 00 00	 mov	 QWORD PTR [rax+40], 0

; 222  :     op->event     = NULL;

  0007d	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  00082	48 c7 40 30 00
	00 00 00	 mov	 QWORD PTR [rax+48], 0

; 223  :     op->orig_type = NULL;

  0008a	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  0008f	48 c7 40 38 00
	00 00 00	 mov	 QWORD PTR [rax+56], 0

; 224  : #ifdef Py_TRACE_REFS
; 225  :     op->_ob_next = NULL;

  00097	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  0009c	48 c7 40 40 00
	00 00 00	 mov	 QWORD PTR [rax+64], 0

; 226  :     op->_ob_prev = NULL;

  000a4	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  000a9	48 c7 40 48 00
	00 00 00	 mov	 QWORD PTR [rax+72], 0

; 227  : #else
; 228  :     op->_ob_next = _Py_NOT_PARALLEL;
; 229  :     op->_ob_prev = _Py_NOT_PARALLEL;
; 230  : #endif
; 231  : }

  000b1	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000b5	c3		 ret	 0
_PyObject_InitHead ENDP
_TEXT	ENDS
PUBLIC	_PyObject_GC_NewVar
EXTRN	_PxObject_NewVar:PROC
;	COMDAT pdata
; File c:\src\pyparallel\modules\gcmodule.c
pdata	SEGMENT
$pdata$_PyObject_GC_NewVar DD imagerel $LN5
	DD	imagerel $LN5+142
	DD	imagerel $unwind$_PyObject_GC_NewVar
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyObject_GC_NewVar DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _PyObject_GC_NewVar
_TEXT	SEGMENT
size$ = 32
op$ = 40
tp$ = 64
nitems$ = 72
_PyObject_GC_NewVar PROC				; COMDAT

; 1657 : {

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1658 :     PyVarObject *op;
; 1659 :     size_t size;
; 1660 :     Px_RETURN(_PxObject_NewVar(tp, nitems))

  0000e	e8 00 00 00 00	 call	 _Py_PXCTX
  00013	85 c0		 test	 eax, eax
  00015	74 11		 je	 SHORT $LN2@PyObject_G@5
  00017	48 8b 54 24 48	 mov	 rdx, QWORD PTR nitems$[rsp]
  0001c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tp$[rsp]
  00021	e8 00 00 00 00	 call	 _PxObject_NewVar
  00026	eb 61		 jmp	 SHORT $LN3@PyObject_G@5
$LN2@PyObject_G@5:

; 1661 :     size = _PyObject_VAR_SIZE(tp, nitems);

  00028	48 8b 44 24 40	 mov	 rax, QWORD PTR tp$[rsp]
  0002d	48 8b 4c 24 48	 mov	 rcx, QWORD PTR nitems$[rsp]
  00032	48 0f af 88 80
	00 00 00	 imul	 rcx, QWORD PTR [rax+128]
  0003a	48 8b c1	 mov	 rax, rcx
  0003d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tp$[rsp]
  00042	48 8b 49 78	 mov	 rcx, QWORD PTR [rcx+120]
  00046	48 8d 44 01 07	 lea	 rax, QWORD PTR [rcx+rax+7]
  0004b	48 83 e0 f8	 and	 rax, -8
  0004f	48 89 44 24 20	 mov	 QWORD PTR size$[rsp], rax

; 1662 :     op = (PyVarObject *) _PyObject_GC_Malloc(size);

  00054	48 8b 4c 24 20	 mov	 rcx, QWORD PTR size$[rsp]
  00059	e8 00 00 00 00	 call	 _PyObject_GC_Malloc
  0005e	48 89 44 24 28	 mov	 QWORD PTR op$[rsp], rax

; 1663 :     if (op != NULL)

  00063	48 83 7c 24 28
	00		 cmp	 QWORD PTR op$[rsp], 0
  00069	74 19		 je	 SHORT $LN1@PyObject_G@5

; 1664 :         op = PyObject_INIT_VAR(op, tp, nitems);

  0006b	4c 8b 44 24 48	 mov	 r8, QWORD PTR nitems$[rsp]
  00070	48 8b 54 24 40	 mov	 rdx, QWORD PTR tp$[rsp]
  00075	48 8b 4c 24 28	 mov	 rcx, QWORD PTR op$[rsp]
  0007a	e8 00 00 00 00	 call	 PyObject_INIT_VAR
  0007f	48 89 44 24 28	 mov	 QWORD PTR op$[rsp], rax
$LN1@PyObject_G@5:

; 1665 :     return op;

  00084	48 8b 44 24 28	 mov	 rax, QWORD PTR op$[rsp]
$LN3@PyObject_G@5:

; 1666 : }

  00089	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0008d	c3		 ret	 0
_PyObject_GC_NewVar ENDP
_TEXT	ENDS
EXTRN	_PxObject_InitVar:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\objimpl.h
pdata	SEGMENT
$pdata$PyObject_INIT_VAR DD imagerel PyObject_INIT_VAR
	DD	imagerel PyObject_INIT_VAR+108
	DD	imagerel $unwind$PyObject_INIT_VAR
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyObject_INIT_VAR DD 011301H
	DD	04213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyObject_INIT_VAR
_TEXT	SEGMENT
op$ = 48
tp$ = 56
n$ = 64
PyObject_INIT_VAR PROC					; COMDAT

; 247  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 248  :     Px_RETURN(_PxObject_InitVar(op, tp, n))

  00013	e8 00 00 00 00	 call	 _Py_PXCTX
  00018	85 c0		 test	 eax, eax
  0001a	74 16		 je	 SHORT $LN1@PyObject_I@3
  0001c	4c 8b 44 24 40	 mov	 r8, QWORD PTR n$[rsp]
  00021	48 8b 54 24 38	 mov	 rdx, QWORD PTR tp$[rsp]
  00026	48 8b 4c 24 30	 mov	 rcx, QWORD PTR op$[rsp]
  0002b	e8 00 00 00 00	 call	 _PxObject_InitVar
  00030	eb 35		 jmp	 SHORT $LN2@PyObject_I@3
$LN1@PyObject_I@3:

; 249  :     Py_SIZE(op) = n;

  00032	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  00037	48 8b 4c 24 40	 mov	 rcx, QWORD PTR n$[rsp]
  0003c	48 89 48 60	 mov	 QWORD PTR [rax+96], rcx

; 250  :     Py_TYPE(op) = tp;

  00040	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
  00045	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tp$[rsp]
  0004a	48 89 48 58	 mov	 QWORD PTR [rax+88], rcx

; 251  :     _PyObject_InitHead((PyObject *)op);

  0004e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR op$[rsp]
  00053	e8 00 00 00 00	 call	 _PyObject_InitHead

; 252  :     _Py_NewReference((PyObject *)op);

  00058	48 8b 4c 24 30	 mov	 rcx, QWORD PTR op$[rsp]
  0005d	e8 00 00 00 00	 call	 _Py_NewReference

; 253  :     return op;

  00062	48 8b 44 24 30	 mov	 rax, QWORD PTR op$[rsp]
$LN2@PyObject_I@3:

; 254  : }

  00067	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006b	c3		 ret	 0
PyObject_INIT_VAR ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BE@DEPLCJO@_PyObject_GC_Resize?$AA@	; `string'
PUBLIC	_PyObject_GC_Resize
EXTRN	_PyObject_DebugRealloc:PROC
EXTRN	_PxObject_Resize:PROC
;	COMDAT pdata
; File c:\src\pyparallel\modules\gcmodule.c
pdata	SEGMENT
$pdata$_PyObject_GC_Resize DD imagerel $LN15
	DD	imagerel $LN15+432
	DD	imagerel $unwind$_PyObject_GC_Resize
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyObject_GC_Resize DD 010e01H
	DD	0a20eH
xdata	ENDS
;	COMDAT ??_C@_0BE@DEPLCJO@_PyObject_GC_Resize?$AA@
CONST	SEGMENT
??_C@_0BE@DEPLCJO@_PyObject_GC_Resize?$AA@ DB '_PyObject_GC_Resize', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PyObject_GC_Resize
_TEXT	SEGMENT
g$ = 48
basicsize$ = 56
tv135 = 64
tv147 = 72
op$ = 96
nitems$ = 104
_PyObject_GC_Resize PROC				; COMDAT

; 1670 : {

$LN15:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H
$LN8@PyObject_G@6:

; 1671 :     PyGC_Head *g;
; 1672 :     size_t basicsize;
; 1673 :     PyPx_GUARD_OBJ(op);

  0000e	e8 00 00 00 00	 call	 _Py_PXCTX
  00013	85 c0		 test	 eax, eax
  00015	74 28		 je	 SHORT $LN5@PyObject_G@6
  00017	c7 44 24 20 40
	00 00 00	 mov	 DWORD PTR [rsp+32], 64	; 00000040H
  0001f	4c 8b 4c 24 60	 mov	 r9, QWORD PTR op$[rsp]
  00024	41 b8 89 06 00
	00		 mov	 r8d, 1673		; 00000689H
  0002a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00031	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@DEPLCJO@_PyObject_GC_Resize?$AA@
  00038	e8 00 00 00 00	 call	 _PyParallel_Guard
  0003d	eb 26		 jmp	 SHORT $LN4@PyObject_G@6
$LN5@PyObject_G@6:
  0003f	c7 44 24 20 20
	00 00 00	 mov	 DWORD PTR [rsp+32], 32	; 00000020H
  00047	4c 8b 4c 24 60	 mov	 r9, QWORD PTR op$[rsp]
  0004c	41 b8 89 06 00
	00		 mov	 r8d, 1673		; 00000689H
  00052	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00059	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@DEPLCJO@_PyObject_GC_Resize?$AA@
  00060	e8 00 00 00 00	 call	 _PyParallel_Guard
$LN4@PyObject_G@6:
  00065	33 c0		 xor	 eax, eax
  00067	85 c0		 test	 eax, eax
  00069	75 a3		 jne	 SHORT $LN8@PyObject_G@6

; 1674 :     Px_RETURN_OP(op, _PxObject_Resize(op, nitems))

  0006b	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00073	4c 8b 4c 24 60	 mov	 r9, QWORD PTR op$[rsp]
  00078	41 b8 8a 06 00
	00		 mov	 r8d, 1674		; 0000068aH
  0007e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00085	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@DEPLCJO@_PyObject_GC_Resize?$AA@
  0008c	e8 00 00 00 00	 call	 _PyParallel_Guard
  00091	85 c0		 test	 eax, eax
  00093	74 14		 je	 SHORT $LN3@PyObject_G@6
  00095	48 8b 54 24 68	 mov	 rdx, QWORD PTR nitems$[rsp]
  0009a	48 8b 4c 24 60	 mov	 rcx, QWORD PTR op$[rsp]
  0009f	e8 00 00 00 00	 call	 _PxObject_Resize
  000a4	e9 02 01 00 00	 jmp	 $LN9@PyObject_G@6
$LN3@PyObject_G@6:

; 1675 : 
; 1676 :     basicsize = _PyObject_VAR_SIZE(Py_TYPE(op), nitems);

  000a9	48 8b 44 24 60	 mov	 rax, QWORD PTR op$[rsp]
  000ae	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000b2	48 8b 4c 24 60	 mov	 rcx, QWORD PTR op$[rsp]
  000b7	48 8b 49 58	 mov	 rcx, QWORD PTR [rcx+88]
  000bb	48 8b 54 24 68	 mov	 rdx, QWORD PTR nitems$[rsp]
  000c0	48 0f af 91 80
	00 00 00	 imul	 rdx, QWORD PTR [rcx+128]
  000c8	48 8b ca	 mov	 rcx, rdx
  000cb	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  000cf	48 8d 44 08 07	 lea	 rax, QWORD PTR [rax+rcx+7]
  000d4	48 83 e0 f8	 and	 rax, -8
  000d8	48 89 44 24 38	 mov	 QWORD PTR basicsize$[rsp], rax

; 1677 :     g = AS_GC(op);

  000dd	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000e5	4c 8b 4c 24 60	 mov	 r9, QWORD PTR op$[rsp]
  000ea	41 b8 8d 06 00
	00		 mov	 r8d, 1677		; 0000068dH
  000f0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  000f7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BE@DEPLCJO@_PyObject_GC_Resize?$AA@
  000fe	e8 00 00 00 00	 call	 _PyParallel_Guard
  00103	85 c0		 test	 eax, eax
  00105	74 0b		 je	 SHORT $LN11@PyObject_G@6
  00107	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR tv135[rsp], 0
  00110	eb 0e		 jmp	 SHORT $LN12@PyObject_G@6
$LN11@PyObject_G@6:
  00112	48 8b 44 24 60	 mov	 rax, QWORD PTR op$[rsp]
  00117	48 83 e8 18	 sub	 rax, 24
  0011b	48 89 44 24 40	 mov	 QWORD PTR tv135[rsp], rax
$LN12@PyObject_G@6:
  00120	48 8b 44 24 40	 mov	 rax, QWORD PTR tv135[rsp]
  00125	48 89 44 24 30	 mov	 QWORD PTR g$[rsp], rax

; 1678 :     if (basicsize > PY_SSIZE_T_MAX - sizeof(PyGC_Head))

  0012a	48 b8 e7 ff ff
	ff ff ff ff 7f	 mov	 rax, 9223372036854775783 ; 7fffffffffffffe7H
  00134	48 39 44 24 38	 cmp	 QWORD PTR basicsize$[rsp], rax
  00139	76 07		 jbe	 SHORT $LN2@PyObject_G@6

; 1679 :         return (PyVarObject *)PyErr_NoMemory();

  0013b	e8 00 00 00 00	 call	 PyErr_NoMemory
  00140	eb 69		 jmp	 SHORT $LN9@PyObject_G@6
$LN2@PyObject_G@6:

; 1680 :     g = (PyGC_Head *)PyObject_REALLOC(g,  sizeof(PyGC_Head) + basicsize);

  00142	48 8b 44 24 38	 mov	 rax, QWORD PTR basicsize$[rsp]
  00147	48 83 c0 18	 add	 rax, 24
  0014b	48 8b d0	 mov	 rdx, rax
  0014e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR g$[rsp]
  00153	e8 00 00 00 00	 call	 _PyObject_DebugRealloc
  00158	48 89 44 24 30	 mov	 QWORD PTR g$[rsp], rax

; 1681 :     if (g == NULL)

  0015d	48 83 7c 24 30
	00		 cmp	 QWORD PTR g$[rsp], 0
  00163	75 07		 jne	 SHORT $LN1@PyObject_G@6

; 1682 :         return (PyVarObject *)PyErr_NoMemory();

  00165	e8 00 00 00 00	 call	 PyErr_NoMemory
  0016a	eb 3f		 jmp	 SHORT $LN9@PyObject_G@6
$LN1@PyObject_G@6:

; 1683 :     op = (PyVarObject *) FROM_GC(g);

  0016c	e8 00 00 00 00	 call	 _Py_PXCTX
  00171	85 c0		 test	 eax, eax
  00173	74 0b		 je	 SHORT $LN13@PyObject_G@6
  00175	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR tv147[rsp], 0
  0017e	eb 0e		 jmp	 SHORT $LN14@PyObject_G@6
$LN13@PyObject_G@6:
  00180	48 8b 44 24 30	 mov	 rax, QWORD PTR g$[rsp]
  00185	48 83 c0 18	 add	 rax, 24
  00189	48 89 44 24 48	 mov	 QWORD PTR tv147[rsp], rax
$LN14@PyObject_G@6:
  0018e	48 8b 44 24 48	 mov	 rax, QWORD PTR tv147[rsp]
  00193	48 89 44 24 60	 mov	 QWORD PTR op$[rsp], rax

; 1684 :     Py_SIZE(op) = nitems;

  00198	48 8b 44 24 60	 mov	 rax, QWORD PTR op$[rsp]
  0019d	48 8b 4c 24 68	 mov	 rcx, QWORD PTR nitems$[rsp]
  001a2	48 89 48 60	 mov	 QWORD PTR [rax+96], rcx

; 1685 :     return op;

  001a6	48 8b 44 24 60	 mov	 rax, QWORD PTR op$[rsp]
$LN9@PyObject_G@6:

; 1686 : }

  001ab	48 83 c4 58	 add	 rsp, 88			; 00000058H
  001af	c3		 ret	 0
_PyObject_GC_Resize ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BA@LMPGGOJ@PyObject_GC_Del?$AA@		; `string'
PUBLIC	PyObject_GC_Del
EXTRN	_PyObject_DebugFree:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyObject_GC_Del DD imagerel $LN14
	DD	imagerel $LN14+373
	DD	imagerel $unwind$PyObject_GC_Del
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyObject_GC_Del DD 010901H
	DD	0c209H
xdata	ENDS
;	COMDAT ??_C@_0BA@LMPGGOJ@PyObject_GC_Del?$AA@
CONST	SEGMENT
??_C@_0BA@LMPGGOJ@PyObject_GC_Del?$AA@ DB 'PyObject_GC_Del', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyObject_GC_Del
_TEXT	SEGMENT
g$ = 48
tv83 = 56
tv135 = 64
tv130 = 72
tv133 = 80
op$ = 112
PyObject_GC_Del PROC					; COMDAT

; 1690 : {

$LN14:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 1691 :     PyGC_Head *g;
; 1692 :     Py_GUARD_OBJ(op);

  00009	c7 44 24 20 20
	00 00 00	 mov	 DWORD PTR [rsp+32], 32	; 00000020H
  00011	4c 8b 4c 24 70	 mov	 r9, QWORD PTR op$[rsp]
  00016	41 b8 9c 06 00
	00		 mov	 r8d, 1692		; 0000069cH
  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00023	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@LMPGGOJ@PyObject_GC_Del?$AA@
  0002a	e8 00 00 00 00	 call	 _PyParallel_Guard

; 1693 :     Py_GUARD

  0002f	e8 00 00 00 00	 call	 _Py_PXCTX
  00034	85 c0		 test	 eax, eax
  00036	74 1c		 je	 SHORT $LN3@PyObject_G@7
  00038	45 33 c9	 xor	 r9d, r9d
  0003b	41 b8 9d 06 00
	00		 mov	 r8d, 1693		; 0000069dH
  00041	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00048	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@LMPGGOJ@PyObject_GC_Del?$AA@
  0004f	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@PyObject_G@7:

; 1694 :     g = AS_GC(op);

  00054	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0005c	4c 8b 4c 24 70	 mov	 r9, QWORD PTR op$[rsp]
  00061	41 b8 9e 06 00
	00		 mov	 r8d, 1694		; 0000069eH
  00067	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  0006e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@LMPGGOJ@PyObject_GC_Del?$AA@
  00075	e8 00 00 00 00	 call	 _PyParallel_Guard
  0007a	85 c0		 test	 eax, eax
  0007c	74 0b		 je	 SHORT $LN6@PyObject_G@7
  0007e	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR tv83[rsp], 0
  00087	eb 0e		 jmp	 SHORT $LN7@PyObject_G@7
$LN6@PyObject_G@7:
  00089	48 8b 44 24 70	 mov	 rax, QWORD PTR op$[rsp]
  0008e	48 83 e8 18	 sub	 rax, 24
  00092	48 89 44 24 38	 mov	 QWORD PTR tv83[rsp], rax
$LN7@PyObject_G@7:
  00097	48 8b 44 24 38	 mov	 rax, QWORD PTR tv83[rsp]
  0009c	48 89 44 24 30	 mov	 QWORD PTR g$[rsp], rax

; 1695 :     if (IS_TRACKED(op))

  000a1	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000a9	4c 8b 4c 24 70	 mov	 r9, QWORD PTR op$[rsp]
  000ae	41 b8 9f 06 00
	00		 mov	 r8d, 1695		; 0000069fH
  000b4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  000bb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@LMPGGOJ@PyObject_GC_Del?$AA@
  000c2	e8 00 00 00 00	 call	 _PyParallel_Guard
  000c7	85 c0		 test	 eax, eax
  000c9	74 0a		 je	 SHORT $LN12@PyObject_G@7
  000cb	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv135[rsp], 0
  000d3	eb 69		 jmp	 SHORT $LN13@PyObject_G@7
$LN12@PyObject_G@7:
  000d5	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000dd	4c 8b 4c 24 70	 mov	 r9, QWORD PTR op$[rsp]
  000e2	41 b8 9f 06 00
	00		 mov	 r8d, 1695		; 0000069fH
  000e8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  000ef	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@LMPGGOJ@PyObject_GC_Del?$AA@
  000f6	e8 00 00 00 00	 call	 _PyParallel_Guard
  000fb	85 c0		 test	 eax, eax
  000fd	74 0b		 je	 SHORT $LN8@PyObject_G@7
  000ff	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR tv130[rsp], 0
  00108	eb 0e		 jmp	 SHORT $LN9@PyObject_G@7
$LN8@PyObject_G@7:
  0010a	48 8b 44 24 70	 mov	 rax, QWORD PTR op$[rsp]
  0010f	48 83 e8 18	 sub	 rax, 24
  00113	48 89 44 24 48	 mov	 QWORD PTR tv130[rsp], rax
$LN9@PyObject_G@7:
  00118	48 8b 44 24 48	 mov	 rax, QWORD PTR tv130[rsp]
  0011d	48 83 78 10 fe	 cmp	 QWORD PTR [rax+16], -2
  00122	74 0a		 je	 SHORT $LN10@PyObject_G@7
  00124	c7 44 24 50 01
	00 00 00	 mov	 DWORD PTR tv133[rsp], 1
  0012c	eb 08		 jmp	 SHORT $LN11@PyObject_G@7
$LN10@PyObject_G@7:
  0012e	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR tv133[rsp], 0
$LN11@PyObject_G@7:
  00136	8b 44 24 50	 mov	 eax, DWORD PTR tv133[rsp]
  0013a	89 44 24 40	 mov	 DWORD PTR tv135[rsp], eax
$LN13@PyObject_G@7:
  0013e	83 7c 24 40 00	 cmp	 DWORD PTR tv135[rsp], 0
  00143	74 0a		 je	 SHORT $LN2@PyObject_G@7

; 1696 :         gc_list_remove(g);

  00145	48 8b 4c 24 30	 mov	 rcx, QWORD PTR g$[rsp]
  0014a	e8 00 00 00 00	 call	 gc_list_remove
$LN2@PyObject_G@7:

; 1697 :     if (generations[0].count > 0) {

  0014f	83 3d 1c 00 00
	00 00		 cmp	 DWORD PTR generations+28, 0
  00156	7e 0e		 jle	 SHORT $LN1@PyObject_G@7

; 1698 :         generations[0].count--;

  00158	8b 05 1c 00 00
	00		 mov	 eax, DWORD PTR generations+28
  0015e	ff c8		 dec	 eax
  00160	89 05 1c 00 00
	00		 mov	 DWORD PTR generations+28, eax
$LN1@PyObject_G@7:

; 1699 :     }
; 1700 :     PyObject_FREE(g);

  00166	48 8b 4c 24 30	 mov	 rcx, QWORD PTR g$[rsp]
  0016b	e8 00 00 00 00	 call	 _PyObject_DebugFree

; 1701 : }

  00170	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00174	c3		 ret	 0
PyObject_GC_Del ENDP
_TEXT	ENDS
PUBLIC	??_C@_0P@HMHMLKAJ@gc_list_remove?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$gc_list_remove DD imagerel gc_list_remove
	DD	imagerel gc_list_remove+104
	DD	imagerel $unwind$gc_list_remove
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$gc_list_remove DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT ??_C@_0P@HMHMLKAJ@gc_list_remove?$AA@
CONST	SEGMENT
??_C@_0P@HMHMLKAJ@gc_list_remove?$AA@ DB 'gc_list_remove', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT gc_list_remove
_TEXT	SEGMENT
node$ = 48
gc_list_remove PROC					; COMDAT

; 266  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 267  :     Py_GUARD

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	74 1c		 je	 SHORT $LN1@gc_list_re
  00012	45 33 c9	 xor	 r9d, r9d
  00015	41 b8 0b 01 00
	00		 mov	 r8d, 267		; 0000010bH
  0001b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@EGLMGJNC@?4?4?2Modules?2gcmodule?4c?$AA@
  00022	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@HMHMLKAJ@gc_list_remove?$AA@
  00029	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN1@gc_list_re:

; 268  :     node->gc.gc_prev->gc.gc_next = node->gc.gc_next;

  0002e	48 8b 44 24 30	 mov	 rax, QWORD PTR node$[rsp]
  00033	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00037	48 8b 4c 24 30	 mov	 rcx, QWORD PTR node$[rsp]
  0003c	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0003f	48 89 08	 mov	 QWORD PTR [rax], rcx

; 269  :     node->gc.gc_next->gc.gc_prev = node->gc.gc_prev;

  00042	48 8b 44 24 30	 mov	 rax, QWORD PTR node$[rsp]
  00047	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0004a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR node$[rsp]
  0004f	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00053	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 270  :     node->gc.gc_next = NULL; /* object is not currently tracked */

  00057	48 8b 44 24 30	 mov	 rax, QWORD PTR node$[rsp]
  0005c	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 271  : }

  00063	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00067	c3		 ret	 0
gc_list_remove ENDP
_TEXT	ENDS
END
