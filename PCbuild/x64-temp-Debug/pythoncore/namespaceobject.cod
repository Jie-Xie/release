; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_09KPMGAFNI@namespace?$AA@			; `string'
PUBLIC	??_C@_08IBFKALI@__dict__?$AA@			; `string'
PUBLIC	_PyNamespace_Type
EXTRN	PyObject_GC_Del:PROC
EXTRN	PyType_GenericAlloc:PROC
EXTRN	PyObject_GenericSetAttr:PROC
EXTRN	PyObject_GenericGetAttr:PROC
EXTRN	PyType_Type:BYTE
;	COMDAT ??_C@_09KPMGAFNI@namespace?$AA@
CONST	SEGMENT
??_C@_09KPMGAFNI@namespace?$AA@ DB 'namespace', 00H	; `string'
CONST	ENDS
_DATA	SEGMENT
namespace_members DQ FLAT:??_C@_08IBFKALI@__dict__?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000060H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	0000000000000000H
	ORG $+32
namespace_doc DB 'A simple attribute-based namespace.', 0aH, 0aH, 'namesp'
	DB	'ace(**kwargs)', 00H
	ORG $+7
_PyNamespace_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_09KPMGAFNI@namespace?$AA@
	DQ	0000000000000070H
	DQ	0000000000000000H
	DQ	FLAT:namespace_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:namespace_repr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	FLAT:PyObject_GenericSetAttr
	DQ	0000000000000000H
	DD	044400H
	ORG $+4
	DQ	FLAT:namespace_doc
	DQ	FLAT:namespace_traverse
	DQ	FLAT:namespace_clear
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:namespace_members
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000060H
	DQ	FLAT:namespace_init
	DQ	FLAT:PyType_GenericAlloc
	DQ	FLAT:namespace_new
	DQ	FLAT:PyObject_GC_Del
	ORG $+64
_DATA	ENDS
;	COMDAT ??_C@_08IBFKALI@__dict__?$AA@
CONST	SEGMENT
??_C@_08IBFKALI@__dict__?$AA@ DB '__dict__', 00H	; `string'
CONST	ENDS
PUBLIC	_Py_DecRef
PUBLIC	??_C@_1EO@JJDKKDOG@?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAt?$AAy?$AAp?$AAe?$AA?9?$AA?$DO?$AAt?$AAp?$AA_?$AAa?$AAl?$AAl?$AAo?$AAc?$AA?5?$AA?$CB@ ; `string'
PUBLIC	??_C@_1DK@HOFOEGMD@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAn?$AAa?$AAm?$AAe?$AAs?$AAp?$AAa?$AAc?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@ ; `string'
EXTRN	PyDict_New:PROC
EXTRN	__imp__wassert:PROC
;	COMDAT pdata
; File c:\src\pyparallel\objects\namespaceobject.c
pdata	SEGMENT
$pdata$namespace_new DD imagerel namespace_new
	DD	imagerel namespace_new+161
	DD	imagerel $unwind$namespace_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$namespace_new DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT ??_C@_1EO@JJDKKDOG@?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAt?$AAy?$AAp?$AAe?$AA?9?$AA?$DO?$AAt?$AAp?$AA_?$AAa?$AAl?$AAl?$AAo?$AAc?$AA?5?$AA?$CB@
CONST	SEGMENT
??_C@_1EO@JJDKKDOG@?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAt?$AAy?$AAp?$AAe?$AA?9?$AA?$DO?$AAt?$AAp?$AA_?$AAa?$AAl?$AAl?$AAo?$AAc?$AA?5?$AA?$CB@ DB 't'
	DB	00H, 'y', 00H, 'p', 00H, 'e', 00H, ' ', 00H, '!', 00H, '=', 00H
	DB	' ', 00H, 'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H, ' ', 00H, '&'
	DB	00H, '&', 00H, ' ', 00H, 't', 00H, 'y', 00H, 'p', 00H, 'e', 00H
	DB	'-', 00H, '>', 00H, 't', 00H, 'p', 00H, '_', 00H, 'a', 00H, 'l'
	DB	00H, 'l', 00H, 'o', 00H, 'c', 00H, ' ', 00H, '!', 00H, '=', 00H
	DB	' ', 00H, 'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DK@HOFOEGMD@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAn?$AAa?$AAm?$AAe?$AAs?$AAp?$AAa?$AAc?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
CONST	SEGMENT
??_C@_1DK@HOFOEGMD@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAn?$AAa?$AAm?$AAe?$AAs?$AAp?$AAa?$AAc?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@ DB '.'
	DB	00H, '.', 00H, '\', 00H, 'O', 00H, 'b', 00H, 'j', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 's', 00H, '\', 00H, 'n', 00H, 'a', 00H, 'm'
	DB	00H, 'e', 00H, 's', 00H, 'p', 00H, 'a', 00H, 'c', 00H, 'e', 00H
	DB	'o', 00H, 'b', 00H, 'j', 00H, 'e', 00H, 'c', 00H, 't', 00H, '.'
	DB	00H, 'c', 00H, 00H, 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT namespace_new
_TEXT	SEGMENT
self$ = 32
ns$20352 = 40
type$ = 64
args$ = 72
kwds$ = 80
namespace_new PROC					; COMDAT

; 23   : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 24   :     PyObject *self;
; 25   : 
; 26   :     assert(type != NULL && type->tp_alloc != NULL);

  00013	48 83 7c 24 40
	00		 cmp	 QWORD PTR type$[rsp], 0
  00019	74 0f		 je	 SHORT $LN5@namespace_
  0001b	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  00020	48 83 b8 88 01
	00 00 00	 cmp	 QWORD PTR [rax+392], 0
  00028	75 1c		 jne	 SHORT $LN6@namespace_
$LN5@namespace_:
  0002a	41 b8 1a 00 00
	00		 mov	 r8d, 26
  00030	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DK@HOFOEGMD@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAn?$AAa?$AAm?$AAe?$AAs?$AAp?$AAa?$AAc?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00037	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EO@JJDKKDOG@?$AAt?$AAy?$AAp?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAt?$AAy?$AAp?$AAe?$AA?9?$AA?$DO?$AAt?$AAp?$AA_?$AAa?$AAl?$AAl?$AAo?$AAc?$AA?5?$AA?$CB@
  0003e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00044	33 c0		 xor	 eax, eax
$LN6@namespace_:

; 27   :     self = type->tp_alloc(type, 0);

  00046	33 d2		 xor	 edx, edx
  00048	48 8b 4c 24 40	 mov	 rcx, QWORD PTR type$[rsp]
  0004d	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  00052	ff 90 88 01 00
	00		 call	 QWORD PTR [rax+392]
  00058	48 89 44 24 20	 mov	 QWORD PTR self$[rsp], rax

; 28   :     if (self != NULL) {

  0005d	48 83 7c 24 20
	00		 cmp	 QWORD PTR self$[rsp], 0
  00063	74 32		 je	 SHORT $LN2@namespace_

; 29   :         _PyNamespaceObject *ns = (_PyNamespaceObject *)self;

  00065	48 8b 44 24 20	 mov	 rax, QWORD PTR self$[rsp]
  0006a	48 89 44 24 28	 mov	 QWORD PTR ns$20352[rsp], rax

; 30   :         ns->ns_dict = PyDict_New();

  0006f	e8 00 00 00 00	 call	 PyDict_New
  00074	48 8b 4c 24 28	 mov	 rcx, QWORD PTR ns$20352[rsp]
  00079	48 89 41 60	 mov	 QWORD PTR [rcx+96], rax

; 31   :         if (ns->ns_dict == NULL) {

  0007d	48 8b 44 24 28	 mov	 rax, QWORD PTR ns$20352[rsp]
  00082	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00087	75 0e		 jne	 SHORT $LN1@namespace_

; 32   :             Py_DECREF(ns);

  00089	48 8b 4c 24 28	 mov	 rcx, QWORD PTR ns$20352[rsp]
  0008e	e8 00 00 00 00	 call	 _Py_DecRef

; 33   :             return NULL;

  00093	33 c0		 xor	 eax, eax
  00095	eb 05		 jmp	 SHORT $LN3@namespace_
$LN1@namespace_:
$LN2@namespace_:

; 34   :         }
; 35   :     }
; 36   :     return self;

  00097	48 8b 44 24 20	 mov	 rax, QWORD PTR self$[rsp]
$LN3@namespace_:

; 37   : }

  0009c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a0	c3		 ret	 0
namespace_new ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
EXTRN	_Py_Dealloc:PROC
EXTRN	_Py_NegativeRefcount:PROC
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_RefTotal:QWORD
EXTRN	Px_DecRef:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN13
	DD	imagerel $LN13+257
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
tv81 = 48
op$ = 80
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN13:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	0f 85 e6 00 00
	00		 jne	 $LN8@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00016	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0001b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0001f	48 83 e0 20	 and	 rax, 32			; 00000020H
  00023	48 85 c0	 test	 rax, rax
  00026	75 14		 jne	 SHORT $LN6@Py_DecRef
  00028	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0002d	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00031	48 25 80 00 00
	00		 and	 rax, 128		; 00000080H
  00037	48 85 c0	 test	 rax, rax
  0003a	74 0f		 je	 SHORT $LN7@Py_DecRef
$LN6@Py_DecRef:

; 926  :             Px_DECREF(op);

  0003c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  00041	e8 00 00 00 00	 call	 Px_DecRef
  00046	e9 b1 00 00 00	 jmp	 $LN5@Py_DecRef
$LN7@Py_DecRef:

; 927  :         else if (!Px_ISPX(op)) {

  0004b	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00050	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00054	48 83 e0 02	 and	 rax, 2
  00058	48 85 c0	 test	 rax, rax
  0005b	0f 85 9b 00 00
	00		 jne	 $LN4@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;

  00061	e8 00 00 00 00	 call	 _Py_PXCTX
  00066	85 c0		 test	 eax, eax
  00068	74 02		 je	 SHORT $LN11@Py_DecRef
  0006a	eb 11		 jmp	 SHORT $LN12@Py_DecRef
$LN11@Py_DecRef:
  0006c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00073	48 ff c8	 dec	 rax
  00076	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN12@Py_DecRef:

; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  0007d	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00082	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00086	48 ff c8	 dec	 rax
  00089	48 89 44 24 30	 mov	 QWORD PTR tv81[rsp], rax
  0008e	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00093	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv81[rsp]
  00098	48 89 48 50	 mov	 QWORD PTR [rax+80], rcx
  0009c	48 83 7c 24 30
	00		 cmp	 QWORD PTR tv81[rsp], 0
  000a2	74 4e		 je	 SHORT $LN3@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);

  000a4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000ac	4c 8b 4c 24 50	 mov	 r9, QWORD PTR op$[rsp]
  000b1	41 b8 a2 03 00
	00		 mov	 r8d, 930		; 000003a2H
  000b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000c5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ca	85 c0		 test	 eax, eax
  000cc	75 22		 jne	 SHORT $LN2@Py_DecRef
  000ce	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  000d3	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000d8	7d 16		 jge	 SHORT $LN2@Py_DecRef
  000da	4c 8b 44 24 50	 mov	 r8, QWORD PTR op$[rsp]
  000df	ba a2 03 00 00	 mov	 edx, 930		; 000003a2H
  000e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000eb	e8 00 00 00 00	 call	 _Py_NegativeRefcount
$LN2@Py_DecRef:

; 931  :             } else

  000f0	eb 0a		 jmp	 SHORT $LN1@Py_DecRef
$LN3@Py_DecRef:

; 932  :                 _Py_Dealloc((PyObject *)(op));

  000f2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  000f7	e8 00 00 00 00	 call	 _Py_Dealloc
$LN1@Py_DecRef:
$LN4@Py_DecRef:
$LN5@Py_DecRef:
$LN8@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  000fc	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00100	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CB@JAMNJANN@no?5positional?5arguments?5expected@ ; `string'
EXTRN	PyDict_Update:PROC
EXTRN	PyErr_Format:PROC
EXTRN	PyExc_TypeError:QWORD
EXTRN	PyObject_Size:PROC
;	COMDAT pdata
; File c:\src\pyparallel\objects\namespaceobject.c
pdata	SEGMENT
$pdata$namespace_init DD imagerel namespace_init
	DD	imagerel namespace_init+128
	DD	imagerel $unwind$namespace_init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$namespace_init DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT ??_C@_0CB@JAMNJANN@no?5positional?5arguments?5expected@
CONST	SEGMENT
??_C@_0CB@JAMNJANN@no?5positional?5arguments?5expected@ DB 'no positional'
	DB	' arguments expected', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT namespace_init
_TEXT	SEGMENT
argcount$20368 = 32
ns$ = 64
args$ = 72
kwds$ = 80
namespace_init PROC					; COMDAT

; 42   : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 43   :     /* ignore args if it's NULL or empty */
; 44   :     if (args != NULL) {

  00013	48 83 7c 24 48
	00		 cmp	 QWORD PTR args$[rsp], 0
  00019	74 41		 je	 SHORT $LN5@namespace_@2

; 45   :         Py_ssize_t argcount = PyObject_Size(args);

  0001b	48 8b 4c 24 48	 mov	 rcx, QWORD PTR args$[rsp]
  00020	e8 00 00 00 00	 call	 PyObject_Size
  00025	48 89 44 24 20	 mov	 QWORD PTR argcount$20368[rsp], rax

; 46   :         if (argcount < 0)

  0002a	48 83 7c 24 20
	00		 cmp	 QWORD PTR argcount$20368[rsp], 0
  00030	7d 08		 jge	 SHORT $LN4@namespace_@2

; 47   :             return argcount;

  00032	8b 44 24 20	 mov	 eax, DWORD PTR argcount$20368[rsp]
  00036	eb 43		 jmp	 SHORT $LN6@namespace_@2
  00038	eb 22		 jmp	 SHORT $LN3@namespace_@2
$LN4@namespace_@2:

; 48   :         else if (argcount > 0) {

  0003a	48 83 7c 24 20
	00		 cmp	 QWORD PTR argcount$20368[rsp], 0
  00040	7e 1a		 jle	 SHORT $LN2@namespace_@2

; 49   :             PyErr_Format(PyExc_TypeError, "no positional arguments expected");

  00042	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CB@JAMNJANN@no?5positional?5arguments?5expected@
  00049	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00050	e8 00 00 00 00	 call	 PyErr_Format

; 50   :             return -1;

  00055	b8 ff ff ff ff	 mov	 eax, -1
  0005a	eb 1f		 jmp	 SHORT $LN6@namespace_@2
$LN2@namespace_@2:
$LN3@namespace_@2:
$LN5@namespace_@2:

; 51   :         }
; 52   :     }
; 53   :     if (kwds == NULL)

  0005c	48 83 7c 24 50
	00		 cmp	 QWORD PTR kwds$[rsp], 0
  00062	75 04		 jne	 SHORT $LN1@namespace_@2

; 54   :         return 0;

  00064	33 c0		 xor	 eax, eax
  00066	eb 13		 jmp	 SHORT $LN6@namespace_@2
$LN1@namespace_@2:

; 55   :     return PyDict_Update(ns->ns_dict, kwds);

  00068	48 8b 54 24 50	 mov	 rdx, QWORD PTR kwds$[rsp]
  0006d	48 8b 44 24 40	 mov	 rax, QWORD PTR ns$[rsp]
  00072	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00076	e8 00 00 00 00	 call	 PyDict_Update
$LN6@namespace_@2:

; 56   : }

  0007b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0007f	c3		 ret	 0
namespace_init ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BC@HBADEODF@namespace_dealloc?$AA@	; `string'
PUBLIC	??_C@_0BN@HEJHJKIG@?4?4?2Objects?2namespaceobject?4c?$AA@ ; `string'
EXTRN	PyObject_GC_UnTrack:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$namespace_dealloc DD imagerel namespace_dealloc
	DD	imagerel namespace_dealloc+145
	DD	imagerel $unwind$namespace_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$namespace_dealloc DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0BC@HBADEODF@namespace_dealloc?$AA@
CONST	SEGMENT
??_C@_0BC@HBADEODF@namespace_dealloc?$AA@ DB 'namespace_dealloc', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@HEJHJKIG@?4?4?2Objects?2namespaceobject?4c?$AA@
CONST	SEGMENT
??_C@_0BN@HEJHJKIG@?4?4?2Objects?2namespaceobject?4c?$AA@ DB '..\Objects\'
	DB	'namespaceobject.c', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT namespace_dealloc
_TEXT	SEGMENT
_py_tmp$20385 = 48
ns$ = 80
namespace_dealloc PROC					; COMDAT

; 61   : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 62   :     PyObject_GC_UnTrack(ns);

  00009	48 8b 4c 24 50	 mov	 rcx, QWORD PTR ns$[rsp]
  0000e	e8 00 00 00 00	 call	 PyObject_GC_UnTrack
$LN4@namespace_@3:

; 63   :     Py_CLEAR(ns->ns_dict);

  00013	48 8b 44 24 50	 mov	 rax, QWORD PTR ns$[rsp]
  00018	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  0001d	74 53		 je	 SHORT $LN1@namespace_@3
  0001f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00027	48 8b 44 24 50	 mov	 rax, QWORD PTR ns$[rsp]
  0002c	4c 8b 48 60	 mov	 r9, QWORD PTR [rax+96]
  00030	41 b8 3f 00 00
	00		 mov	 r8d, 63			; 0000003fH
  00036	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@HEJHJKIG@?4?4?2Objects?2namespaceobject?4c?$AA@
  0003d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@HBADEODF@namespace_dealloc?$AA@
  00044	e8 00 00 00 00	 call	 _PyParallel_Guard
  00049	85 c0		 test	 eax, eax
  0004b	75 25		 jne	 SHORT $LN1@namespace_@3
  0004d	48 8b 44 24 50	 mov	 rax, QWORD PTR ns$[rsp]
  00052	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00056	48 89 44 24 30	 mov	 QWORD PTR _py_tmp$20385[rsp], rax
  0005b	48 8b 44 24 50	 mov	 rax, QWORD PTR ns$[rsp]
  00060	48 c7 40 60 00
	00 00 00	 mov	 QWORD PTR [rax+96], 0
  00068	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _py_tmp$20385[rsp]
  0006d	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@namespace_@3:
  00072	33 c0		 xor	 eax, eax
  00074	85 c0		 test	 eax, eax
  00076	75 9b		 jne	 SHORT $LN4@namespace_@3

; 64   :     Py_TYPE(ns)->tp_free((PyObject *)ns);

  00078	48 8b 44 24 50	 mov	 rax, QWORD PTR ns$[rsp]
  0007d	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00081	48 8b 4c 24 50	 mov	 rcx, QWORD PTR ns$[rsp]
  00086	ff 90 98 01 00
	00		 call	 QWORD PTR [rax+408]

; 65   : }

  0008c	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00090	c3		 ret	 0
namespace_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_06DOEBHNBO@?$CFs?$CI?$CFS?$CJ?$AA@	; `string'
PUBLIC	??_C@_02KEGNLNML@?0?5?$AA@			; `string'
PUBLIC	??_C@_05NCKFOEGD@?$CFS?$DN?$CFR?$AA@		; `string'
PUBLIC	??_C@_1BM@IFHPBCCM@?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DO@IPHGMPPH@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAA?$AAS?$AAC?$AAI?$AAI?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?5?$AA?$CK?$AA?$CJ?$AA?$CI?$AAk?$AAe?$AAy?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAw?$AAs?$AAt?$AAr?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CK@CDLJFFEK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAk?$AAe?$AAy?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	_Py_IncRef
PUBLIC	??_C@_1BE@EFCCCFNO@?$AAd?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ ; `string'
PUBLIC	??_C@_0P@JBJALEEM@namespace?$CI?4?4?4?$CJ?$AA@	; `string'
EXTRN	Py_ReprLeave:PROC
EXTRN	PyUnicode_Join:PROC
EXTRN	PyList_Append:PROC
EXTRN	PyUnicode_FromFormat:PROC
EXTRN	PyDict_GetItem:PROC
EXTRN	PyUnicode_AsUnicode:PROC
EXTRN	PyIter_Next:PROC
EXTRN	PyObject_GetIter:PROC
EXTRN	PyList_Sort:PROC
EXTRN	PyDict_Keys:PROC
EXTRN	PyList_New:PROC
EXTRN	PyUnicode_FromString:PROC
EXTRN	Py_ReprEnter:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$namespace_repr DD imagerel namespace_repr
	DD	imagerel namespace_repr+1068
	DD	imagerel $unwind$namespace_repr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$namespace_repr DD 020c01H
	DD	015010cH
xdata	ENDS
;	COMDAT ??_C@_06DOEBHNBO@?$CFs?$CI?$CFS?$CJ?$AA@
CONST	SEGMENT
??_C@_06DOEBHNBO@?$CFs?$CI?$CFS?$CJ?$AA@ DB '%s(%S)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02KEGNLNML@?0?5?$AA@
CONST	SEGMENT
??_C@_02KEGNLNML@?0?5?$AA@ DB ', ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05NCKFOEGD@?$CFS?$DN?$CFR?$AA@
CONST	SEGMENT
??_C@_05NCKFOEGD@?$CFS?$DN?$CFR?$AA@ DB '%S=%R', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1BM@IFHPBCCM@?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
CONST	SEGMENT
??_C@_1BM@IFHPBCCM@?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ DB 'v'
	DB	00H, 'a', 00H, 'l', 00H, 'u', 00H, 'e', 00H, ' ', 00H, '!', 00H
	DB	'=', 00H, ' ', 00H, 'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1DO@IPHGMPPH@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAA?$AAS?$AAC?$AAI?$AAI?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?5?$AA?$CK?$AA?$CJ?$AA?$CI?$AAk?$AAe?$AAy?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAw?$AAs?$AAt?$AAr?$AA?$AA@
CONST	SEGMENT
??_C@_1DO@IPHGMPPH@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAA?$AAS?$AAC?$AAI?$AAI?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?5?$AA?$CK?$AA?$CJ?$AA?$CI?$AAk?$AAe?$AAy?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAw?$AAs?$AAt?$AAr?$AA?$AA@ DB '('
	DB	00H, '(', 00H, 'P', 00H, 'y', 00H, 'A', 00H, 'S', 00H, 'C', 00H
	DB	'I', 00H, 'I', 00H, 'O', 00H, 'b', 00H, 'j', 00H, 'e', 00H, 'c'
	DB	00H, 't', 00H, ' ', 00H, '*', 00H, ')', 00H, '(', 00H, 'k', 00H
	DB	'e', 00H, 'y', 00H, ')', 00H, ')', 00H, '-', 00H, '>', 00H, 'w'
	DB	00H, 's', 00H, 't', 00H, 'r', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@CDLJFFEK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAk?$AAe?$AAy?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CK@CDLJFFEK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAk?$AAe?$AAy?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, 'k', 00H, 'e', 00H, 'y', 00H, ')', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BE@EFCCCFNO@?$AAd?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
CONST	SEGMENT
??_C@_1BE@EFCCCFNO@?$AAd?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ DB 'd'
	DB	00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, 'N', 00H, 'U', 00H
	DB	'L', 00H, 'L', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@JBJALEEM@namespace?$CI?4?4?4?$CJ?$AA@
CONST	SEGMENT
??_C@_0P@JBJALEEM@namespace?$CI?4?4?4?$CJ?$AA@ DB 'namespace(...)', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT namespace_repr
_TEXT	SEGMENT
i$ = 32
pairsrepr$ = 40
separator$ = 48
key$ = 56
loop_error$ = 64
repr$ = 72
keys$ = 80
pairs$ = 88
d$ = 96
keys_iter$ = 104
value$20450 = 112
item$20451 = 120
tv70 = 128
tv148 = 136
tv168 = 144
tv166 = 152
ns$ = 176
namespace_repr PROC					; COMDAT

; 70   : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 71   :     int i, loop_error = 0;

  0000c	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR loop_error$[rsp], 0

; 72   :     PyObject *pairs = NULL, *d = NULL, *keys = NULL, *keys_iter = NULL;

  00014	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR pairs$[rsp], 0
  0001d	48 c7 44 24 60
	00 00 00 00	 mov	 QWORD PTR d$[rsp], 0
  00026	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR keys$[rsp], 0
  0002f	48 c7 44 24 68
	00 00 00 00	 mov	 QWORD PTR keys_iter$[rsp], 0

; 73   :     PyObject *key;
; 74   :     PyObject *separator, *pairsrepr, *repr = NULL;

  00038	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR repr$[rsp], 0

; 75   : 
; 76   :     i = Py_ReprEnter((PyObject *)ns);

  00041	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR ns$[rsp]
  00049	e8 00 00 00 00	 call	 Py_ReprEnter
  0004e	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax

; 77   :     if (i != 0) {

  00052	83 7c 24 20 00	 cmp	 DWORD PTR i$[rsp], 0
  00057	74 36		 je	 SHORT $LN29@namespace_@4

; 78   :         return i > 0 ? PyUnicode_FromString("namespace(...)") : NULL;

  00059	83 7c 24 20 00	 cmp	 DWORD PTR i$[rsp], 0
  0005e	7e 16		 jle	 SHORT $LN32@namespace_@4
  00060	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@JBJALEEM@namespace?$CI?4?4?4?$CJ?$AA@
  00067	e8 00 00 00 00	 call	 PyUnicode_FromString
  0006c	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv70[rsp], rax
  00074	eb 0c		 jmp	 SHORT $LN33@namespace_@4
$LN32@namespace_@4:
  00076	48 c7 84 24 80
	00 00 00 00 00
	00 00		 mov	 QWORD PTR tv70[rsp], 0
$LN33@namespace_@4:
  00082	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR tv70[rsp]
  0008a	e9 95 03 00 00	 jmp	 $LN30@namespace_@4
$LN29@namespace_@4:

; 79   :     }
; 80   : 
; 81   :     pairs = PyList_New(0);

  0008f	33 c9		 xor	 ecx, ecx
  00091	e8 00 00 00 00	 call	 PyList_New
  00096	48 89 44 24 58	 mov	 QWORD PTR pairs$[rsp], rax

; 82   :     if (pairs == NULL)

  0009b	48 83 7c 24 58
	00		 cmp	 QWORD PTR pairs$[rsp], 0
  000a1	75 05		 jne	 SHORT $LN28@namespace_@4

; 83   :         goto error;

  000a3	e9 0a 03 00 00	 jmp	 $error$20416
$LN28@namespace_@4:

; 84   : 
; 85   :     d = ((_PyNamespaceObject *)ns)->ns_dict;

  000a8	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR ns$[rsp]
  000b0	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000b4	48 89 44 24 60	 mov	 QWORD PTR d$[rsp], rax

; 86   :     assert(d != NULL);

  000b9	48 83 7c 24 60
	00		 cmp	 QWORD PTR d$[rsp], 0
  000bf	75 1c		 jne	 SHORT $LN34@namespace_@4
  000c1	41 b8 56 00 00
	00		 mov	 r8d, 86			; 00000056H
  000c7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DK@HOFOEGMD@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAn?$AAa?$AAm?$AAe?$AAs?$AAp?$AAa?$AAc?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  000ce	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BE@EFCCCFNO@?$AAd?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
  000d5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000db	33 c0		 xor	 eax, eax
$LN34@namespace_@4:

; 87   :     Py_INCREF(d);

  000dd	48 8b 4c 24 60	 mov	 rcx, QWORD PTR d$[rsp]
  000e2	e8 00 00 00 00	 call	 _Py_IncRef

; 88   : 
; 89   :     keys = PyDict_Keys(d);

  000e7	48 8b 4c 24 60	 mov	 rcx, QWORD PTR d$[rsp]
  000ec	e8 00 00 00 00	 call	 PyDict_Keys
  000f1	48 89 44 24 50	 mov	 QWORD PTR keys$[rsp], rax

; 90   :     if (keys == NULL)

  000f6	48 83 7c 24 50
	00		 cmp	 QWORD PTR keys$[rsp], 0
  000fc	75 05		 jne	 SHORT $LN27@namespace_@4

; 91   :         goto error;

  000fe	e9 af 02 00 00	 jmp	 $error$20416
$LN27@namespace_@4:

; 92   :     if (PyList_Sort(keys) != 0)

  00103	48 8b 4c 24 50	 mov	 rcx, QWORD PTR keys$[rsp]
  00108	e8 00 00 00 00	 call	 PyList_Sort
  0010d	85 c0		 test	 eax, eax
  0010f	74 05		 je	 SHORT $LN26@namespace_@4

; 93   :         goto error;

  00111	e9 9c 02 00 00	 jmp	 $error$20416
$LN26@namespace_@4:

; 94   : 
; 95   :     keys_iter = PyObject_GetIter(keys);

  00116	48 8b 4c 24 50	 mov	 rcx, QWORD PTR keys$[rsp]
  0011b	e8 00 00 00 00	 call	 PyObject_GetIter
  00120	48 89 44 24 68	 mov	 QWORD PTR keys_iter$[rsp], rax

; 96   :     if (keys_iter == NULL)

  00125	48 83 7c 24 68
	00		 cmp	 QWORD PTR keys_iter$[rsp], 0
  0012b	75 05		 jne	 SHORT $LN25@namespace_@4

; 97   :         goto error;

  0012d	e9 80 02 00 00	 jmp	 $error$20416
$LN25@namespace_@4:
$LN24@namespace_@4:

; 98   : 
; 99   :     while ((key = PyIter_Next(keys_iter)) != NULL) {

  00132	48 8b 4c 24 68	 mov	 rcx, QWORD PTR keys_iter$[rsp]
  00137	e8 00 00 00 00	 call	 PyIter_Next
  0013c	48 89 44 24 38	 mov	 QWORD PTR key$[rsp], rax
  00141	48 83 7c 24 38
	00		 cmp	 QWORD PTR key$[rsp], 0
  00147	0f 84 f2 01 00
	00		 je	 $LN23@namespace_@4

; 100  :         if (PyUnicode_Check(key) && PyUnicode_GET_SIZE(key) > 0) {

  0014d	48 8b 44 24 38	 mov	 rax, QWORD PTR key$[rsp]
  00152	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00156	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0015c	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00161	85 c0		 test	 eax, eax
  00163	0f 84 be 01 00
	00		 je	 $LN22@namespace_@4
  00169	48 8b 44 24 38	 mov	 rax, QWORD PTR key$[rsp]
  0016e	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00172	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00178	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0017d	85 c0		 test	 eax, eax
  0017f	75 1c		 jne	 SHORT $LN35@namespace_@4
  00181	41 b8 64 00 00
	00		 mov	 r8d, 100		; 00000064H
  00187	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DK@HOFOEGMD@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAn?$AAa?$AAm?$AAe?$AAs?$AAp?$AAa?$AAc?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  0018e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@CDLJFFEK@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAk?$AAe?$AAy?$AA?$CJ?$AA?$AA@
  00195	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0019b	33 c0		 xor	 eax, eax
$LN35@namespace_@4:
  0019d	48 8b 44 24 38	 mov	 rax, QWORD PTR key$[rsp]
  001a2	48 83 78 78 00	 cmp	 QWORD PTR [rax+120], 0
  001a7	74 60		 je	 SHORT $LN41@namespace_@4
  001a9	48 8b 44 24 38	 mov	 rax, QWORD PTR key$[rsp]
  001ae	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  001b1	c1 e8 06	 shr	 eax, 6
  001b4	83 e0 01	 and	 eax, 1
  001b7	85 c0		 test	 eax, eax
  001b9	74 25		 je	 SHORT $LN36@namespace_@4
  001bb	48 8b 44 24 38	 mov	 rax, QWORD PTR key$[rsp]
  001c0	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  001c3	c1 e8 05	 shr	 eax, 5
  001c6	83 e0 01	 and	 eax, 1
  001c9	85 c0		 test	 eax, eax
  001cb	74 13		 je	 SHORT $LN36@namespace_@4
  001cd	48 8b 44 24 38	 mov	 rax, QWORD PTR key$[rsp]
  001d2	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  001d6	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv148[rsp], rax
  001de	eb 14		 jmp	 SHORT $LN37@namespace_@4
$LN36@namespace_@4:
  001e0	48 8b 44 24 38	 mov	 rax, QWORD PTR key$[rsp]
  001e5	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  001ec	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv148[rsp], rax
$LN37@namespace_@4:
  001f4	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR tv148[rsp]
  001fc	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv168[rsp], rax
  00204	e9 8d 00 00 00	 jmp	 $LN42@namespace_@4
$LN41@namespace_@4:
  00209	48 8b 4c 24 38	 mov	 rcx, QWORD PTR key$[rsp]
  0020e	e8 00 00 00 00	 call	 PyUnicode_AsUnicode
  00213	48 8b 44 24 38	 mov	 rax, QWORD PTR key$[rsp]
  00218	48 83 78 78 00	 cmp	 QWORD PTR [rax+120], 0
  0021d	75 1c		 jne	 SHORT $LN38@namespace_@4
  0021f	41 b8 64 00 00
	00		 mov	 r8d, 100		; 00000064H
  00225	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DK@HOFOEGMD@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAn?$AAa?$AAm?$AAe?$AAs?$AAp?$AAa?$AAc?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  0022c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DO@IPHGMPPH@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAA?$AAS?$AAC?$AAI?$AAI?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?5?$AA?$CK?$AA?$CJ?$AA?$CI?$AAk?$AAe?$AAy?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAw?$AAs?$AAt?$AAr?$AA?$AA@
  00233	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00239	33 c0		 xor	 eax, eax
$LN38@namespace_@4:
  0023b	48 8b 44 24 38	 mov	 rax, QWORD PTR key$[rsp]
  00240	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00243	c1 e8 06	 shr	 eax, 6
  00246	83 e0 01	 and	 eax, 1
  00249	85 c0		 test	 eax, eax
  0024b	74 25		 je	 SHORT $LN39@namespace_@4
  0024d	48 8b 44 24 38	 mov	 rax, QWORD PTR key$[rsp]
  00252	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00255	c1 e8 05	 shr	 eax, 5
  00258	83 e0 01	 and	 eax, 1
  0025b	85 c0		 test	 eax, eax
  0025d	74 13		 je	 SHORT $LN39@namespace_@4
  0025f	48 8b 44 24 38	 mov	 rax, QWORD PTR key$[rsp]
  00264	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00268	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR tv166[rsp], rax
  00270	eb 14		 jmp	 SHORT $LN40@namespace_@4
$LN39@namespace_@4:
  00272	48 8b 44 24 38	 mov	 rax, QWORD PTR key$[rsp]
  00277	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  0027e	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR tv166[rsp], rax
$LN40@namespace_@4:
  00286	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR tv166[rsp]
  0028e	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv168[rsp], rax
$LN42@namespace_@4:
  00296	48 83 bc 24 90
	00 00 00 00	 cmp	 QWORD PTR tv168[rsp], 0
  0029f	0f 8e 82 00 00
	00		 jle	 $LN22@namespace_@4

; 101  :             PyObject *value, *item;
; 102  : 
; 103  :             value = PyDict_GetItem(d, key);

  002a5	48 8b 54 24 38	 mov	 rdx, QWORD PTR key$[rsp]
  002aa	48 8b 4c 24 60	 mov	 rcx, QWORD PTR d$[rsp]
  002af	e8 00 00 00 00	 call	 PyDict_GetItem
  002b4	48 89 44 24 70	 mov	 QWORD PTR value$20450[rsp], rax

; 104  :             assert(value != NULL);

  002b9	48 83 7c 24 70
	00		 cmp	 QWORD PTR value$20450[rsp], 0
  002bf	75 1c		 jne	 SHORT $LN43@namespace_@4
  002c1	41 b8 68 00 00
	00		 mov	 r8d, 104		; 00000068H
  002c7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DK@HOFOEGMD@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAn?$AAa?$AAm?$AAe?$AAs?$AAp?$AAa?$AAc?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  002ce	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BM@IFHPBCCM@?$AAv?$AAa?$AAl?$AAu?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
  002d5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  002db	33 c0		 xor	 eax, eax
$LN43@namespace_@4:

; 105  : 
; 106  :             item = PyUnicode_FromFormat("%S=%R", key, value);

  002dd	4c 8b 44 24 70	 mov	 r8, QWORD PTR value$20450[rsp]
  002e2	48 8b 54 24 38	 mov	 rdx, QWORD PTR key$[rsp]
  002e7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05NCKFOEGD@?$CFS?$DN?$CFR?$AA@
  002ee	e8 00 00 00 00	 call	 PyUnicode_FromFormat
  002f3	48 89 44 24 78	 mov	 QWORD PTR item$20451[rsp], rax

; 107  :             if (item == NULL) {

  002f8	48 83 7c 24 78
	00		 cmp	 QWORD PTR item$20451[rsp], 0
  002fe	75 0a		 jne	 SHORT $LN21@namespace_@4

; 108  :                 loop_error = 1;

  00300	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR loop_error$[rsp], 1

; 109  :             }
; 110  :             else {

  00308	eb 1d		 jmp	 SHORT $LN20@namespace_@4
$LN21@namespace_@4:

; 111  :                 loop_error = PyList_Append(pairs, item);

  0030a	48 8b 54 24 78	 mov	 rdx, QWORD PTR item$20451[rsp]
  0030f	48 8b 4c 24 58	 mov	 rcx, QWORD PTR pairs$[rsp]
  00314	e8 00 00 00 00	 call	 PyList_Append
  00319	89 44 24 40	 mov	 DWORD PTR loop_error$[rsp], eax

; 112  :                 Py_DECREF(item);

  0031d	48 8b 4c 24 78	 mov	 rcx, QWORD PTR item$20451[rsp]
  00322	e8 00 00 00 00	 call	 _Py_DecRef
$LN20@namespace_@4:
$LN22@namespace_@4:

; 113  :             }
; 114  :         }
; 115  : 
; 116  :         Py_DECREF(key);

  00327	48 8b 4c 24 38	 mov	 rcx, QWORD PTR key$[rsp]
  0032c	e8 00 00 00 00	 call	 _Py_DecRef

; 117  :         if (loop_error)

  00331	83 7c 24 40 00	 cmp	 DWORD PTR loop_error$[rsp], 0
  00336	74 02		 je	 SHORT $LN19@namespace_@4

; 118  :             goto error;

  00338	eb 78		 jmp	 SHORT $error$20416
$LN19@namespace_@4:

; 119  :     }

  0033a	e9 f3 fd ff ff	 jmp	 $LN24@namespace_@4
$LN23@namespace_@4:

; 120  : 
; 121  :     separator = PyUnicode_FromString(", ");

  0033f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02KEGNLNML@?0?5?$AA@
  00346	e8 00 00 00 00	 call	 PyUnicode_FromString
  0034b	48 89 44 24 30	 mov	 QWORD PTR separator$[rsp], rax

; 122  :     if (separator == NULL)

  00350	48 83 7c 24 30
	00		 cmp	 QWORD PTR separator$[rsp], 0
  00356	75 02		 jne	 SHORT $LN18@namespace_@4

; 123  :         goto error;

  00358	eb 58		 jmp	 SHORT $error$20416
$LN18@namespace_@4:

; 124  : 
; 125  :     pairsrepr = PyUnicode_Join(separator, pairs);

  0035a	48 8b 54 24 58	 mov	 rdx, QWORD PTR pairs$[rsp]
  0035f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR separator$[rsp]
  00364	e8 00 00 00 00	 call	 PyUnicode_Join
  00369	48 89 44 24 28	 mov	 QWORD PTR pairsrepr$[rsp], rax

; 126  :     Py_DECREF(separator);

  0036e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR separator$[rsp]
  00373	e8 00 00 00 00	 call	 _Py_DecRef

; 127  :     if (pairsrepr == NULL)

  00378	48 83 7c 24 28
	00		 cmp	 QWORD PTR pairsrepr$[rsp], 0
  0037e	75 02		 jne	 SHORT $LN17@namespace_@4

; 128  :         goto error;

  00380	eb 30		 jmp	 SHORT $error$20416
$LN17@namespace_@4:

; 129  : 
; 130  :     repr = PyUnicode_FromFormat("%s(%S)",
; 131  :                                 ((PyObject *)ns)->ob_type->tp_name, pairsrepr);

  00382	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR ns$[rsp]
  0038a	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0038e	4c 8b 44 24 28	 mov	 r8, QWORD PTR pairsrepr$[rsp]
  00393	48 8b 50 70	 mov	 rdx, QWORD PTR [rax+112]
  00397	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06DOEBHNBO@?$CFs?$CI?$CFS?$CJ?$AA@
  0039e	e8 00 00 00 00	 call	 PyUnicode_FromFormat
  003a3	48 89 44 24 48	 mov	 QWORD PTR repr$[rsp], rax

; 132  :     Py_DECREF(pairsrepr);

  003a8	48 8b 4c 24 28	 mov	 rcx, QWORD PTR pairsrepr$[rsp]
  003ad	e8 00 00 00 00	 call	 _Py_DecRef
$error$20416:
$LN16@namespace_@4:

; 133  : 
; 134  : error:
; 135  :     Py_XDECREF(pairs);

  003b2	48 83 7c 24 58
	00		 cmp	 QWORD PTR pairs$[rsp], 0
  003b8	74 0a		 je	 SHORT $LN13@namespace_@4
  003ba	48 8b 4c 24 58	 mov	 rcx, QWORD PTR pairs$[rsp]
  003bf	e8 00 00 00 00	 call	 _Py_DecRef
$LN13@namespace_@4:
  003c4	33 c0		 xor	 eax, eax
  003c6	85 c0		 test	 eax, eax
  003c8	75 e8		 jne	 SHORT $LN16@namespace_@4
$LN12@namespace_@4:

; 136  :     Py_XDECREF(d);

  003ca	48 83 7c 24 60
	00		 cmp	 QWORD PTR d$[rsp], 0
  003d0	74 0a		 je	 SHORT $LN9@namespace_@4
  003d2	48 8b 4c 24 60	 mov	 rcx, QWORD PTR d$[rsp]
  003d7	e8 00 00 00 00	 call	 _Py_DecRef
$LN9@namespace_@4:
  003dc	33 c0		 xor	 eax, eax
  003de	85 c0		 test	 eax, eax
  003e0	75 e8		 jne	 SHORT $LN12@namespace_@4
$LN8@namespace_@4:

; 137  :     Py_XDECREF(keys);

  003e2	48 83 7c 24 50
	00		 cmp	 QWORD PTR keys$[rsp], 0
  003e8	74 0a		 je	 SHORT $LN5@namespace_@4
  003ea	48 8b 4c 24 50	 mov	 rcx, QWORD PTR keys$[rsp]
  003ef	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@namespace_@4:
  003f4	33 c0		 xor	 eax, eax
  003f6	85 c0		 test	 eax, eax
  003f8	75 e8		 jne	 SHORT $LN8@namespace_@4
$LN4@namespace_@4:

; 138  :     Py_XDECREF(keys_iter);

  003fa	48 83 7c 24 68
	00		 cmp	 QWORD PTR keys_iter$[rsp], 0
  00400	74 0a		 je	 SHORT $LN1@namespace_@4
  00402	48 8b 4c 24 68	 mov	 rcx, QWORD PTR keys_iter$[rsp]
  00407	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@namespace_@4:
  0040c	33 c0		 xor	 eax, eax
  0040e	85 c0		 test	 eax, eax
  00410	75 e8		 jne	 SHORT $LN4@namespace_@4

; 139  :     Py_ReprLeave((PyObject *)ns);

  00412	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR ns$[rsp]
  0041a	e8 00 00 00 00	 call	 Py_ReprLeave

; 140  : 
; 141  :     return repr;

  0041f	48 8b 44 24 48	 mov	 rax, QWORD PTR repr$[rsp]
$LN30@namespace_@4:

; 142  : }

  00424	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  0042b	c3		 ret	 0
namespace_repr ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN7
	DD	imagerel $LN7+132
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 6d		 jne	 SHORT $LN2@Py_IncRef
  00012	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0001a	4c 8b 4c 24 40	 mov	 r9, QWORD PTR op$[rsp]
  0001f	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_Guard
  00038	85 c0		 test	 eax, eax
  0003a	75 12		 jne	 SHORT $LN1@Py_IncRef
  0003c	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  00041	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00045	48 83 e0 20	 and	 rax, 32			; 00000020H
  00049	48 85 c0	 test	 rax, rax
  0004c	74 31		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;

  0004e	e8 00 00 00 00	 call	 _Py_PXCTX
  00053	85 c0		 test	 eax, eax
  00055	74 02		 je	 SHORT $LN5@Py_IncRef
  00057	eb 11		 jmp	 SHORT $LN6@Py_IncRef
$LN5@Py_IncRef:
  00059	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00060	48 ff c0	 inc	 rax
  00063	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN6@Py_IncRef:

; 907  :         (((PyObject*)(op))->ob_refcnt++);

  0006a	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  0006f	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00073	48 ff c0	 inc	 rax
  00076	48 8b 4c 24 40	 mov	 rcx, QWORD PTR op$[rsp]
  0007b	48 89 41 50	 mov	 QWORD PTR [rcx+80], rax
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  0007f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00083	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BD@IFPOENHC@namespace_traverse?$AA@	; `string'
EXTRN	_PyParallel_ContextGuardFailure:PROC
;	COMDAT pdata
; File c:\src\pyparallel\objects\namespaceobject.c
pdata	SEGMENT
$pdata$namespace_traverse DD imagerel namespace_traverse
	DD	imagerel namespace_traverse+116
	DD	imagerel $unwind$namespace_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$namespace_traverse DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT ??_C@_0BD@IFPOENHC@namespace_traverse?$AA@
CONST	SEGMENT
??_C@_0BD@IFPOENHC@namespace_traverse?$AA@ DB 'namespace_traverse', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT namespace_traverse
_TEXT	SEGMENT
vret$20506 = 32
ns$ = 64
visit$ = 72
arg$ = 80
namespace_traverse PROC					; COMDAT

; 147  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN6@namespace_@5:

; 148  :     Py_VISIT(ns->ns_dict);

  00013	e8 00 00 00 00	 call	 _Py_PXCTX
  00018	85 c0		 test	 eax, eax
  0001a	74 1c		 je	 SHORT $LN3@namespace_@5
  0001c	45 33 c9	 xor	 r9d, r9d
  0001f	41 b8 94 00 00
	00		 mov	 r8d, 148		; 00000094H
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@HEJHJKIG@?4?4?2Objects?2namespaceobject?4c?$AA@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@IFPOENHC@namespace_traverse?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@namespace_@5:
  00038	48 8b 44 24 40	 mov	 rax, QWORD PTR ns$[rsp]
  0003d	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00042	74 23		 je	 SHORT $LN2@namespace_@5
  00044	48 8b 54 24 50	 mov	 rdx, QWORD PTR arg$[rsp]
  00049	48 8b 44 24 40	 mov	 rax, QWORD PTR ns$[rsp]
  0004e	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00052	ff 54 24 48	 call	 QWORD PTR visit$[rsp]
  00056	89 44 24 20	 mov	 DWORD PTR vret$20506[rsp], eax
  0005a	83 7c 24 20 00	 cmp	 DWORD PTR vret$20506[rsp], 0
  0005f	74 06		 je	 SHORT $LN1@namespace_@5
  00061	8b 44 24 20	 mov	 eax, DWORD PTR vret$20506[rsp]
  00065	eb 08		 jmp	 SHORT $LN7@namespace_@5
$LN1@namespace_@5:
$LN2@namespace_@5:
  00067	33 c0		 xor	 eax, eax
  00069	85 c0		 test	 eax, eax
  0006b	75 a6		 jne	 SHORT $LN6@namespace_@5

; 149  :     return 0;

  0006d	33 c0		 xor	 eax, eax
$LN7@namespace_@5:

; 150  : }

  0006f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00073	c3		 ret	 0
namespace_traverse ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BA@OIFEHJAB@namespace_clear?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$namespace_clear DD imagerel namespace_clear
	DD	imagerel namespace_clear+117
	DD	imagerel $unwind$namespace_clear
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$namespace_clear DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0BA@OIFEHJAB@namespace_clear?$AA@
CONST	SEGMENT
??_C@_0BA@OIFEHJAB@namespace_clear?$AA@ DB 'namespace_clear', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT namespace_clear
_TEXT	SEGMENT
_py_tmp$20518 = 48
ns$ = 80
namespace_clear PROC					; COMDAT

; 155  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H
$LN4@namespace_@6:

; 156  :     Py_CLEAR(ns->ns_dict);

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR ns$[rsp]
  0000e	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00013	74 53		 je	 SHORT $LN1@namespace_@6
  00015	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0001d	48 8b 44 24 50	 mov	 rax, QWORD PTR ns$[rsp]
  00022	4c 8b 48 60	 mov	 r9, QWORD PTR [rax+96]
  00026	41 b8 9c 00 00
	00		 mov	 r8d, 156		; 0000009cH
  0002c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@HEJHJKIG@?4?4?2Objects?2namespaceobject?4c?$AA@
  00033	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@OIFEHJAB@namespace_clear?$AA@
  0003a	e8 00 00 00 00	 call	 _PyParallel_Guard
  0003f	85 c0		 test	 eax, eax
  00041	75 25		 jne	 SHORT $LN1@namespace_@6
  00043	48 8b 44 24 50	 mov	 rax, QWORD PTR ns$[rsp]
  00048	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0004c	48 89 44 24 30	 mov	 QWORD PTR _py_tmp$20518[rsp], rax
  00051	48 8b 44 24 50	 mov	 rax, QWORD PTR ns$[rsp]
  00056	48 c7 40 60 00
	00 00 00	 mov	 QWORD PTR [rax+96], 0
  0005e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _py_tmp$20518[rsp]
  00063	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@namespace_@6:
  00068	33 c0		 xor	 eax, eax
  0006a	85 c0		 test	 eax, eax
  0006c	75 9b		 jne	 SHORT $LN4@namespace_@6

; 157  :     return 0;

  0006e	33 c0		 xor	 eax, eax

; 158  : }

  00070	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00074	c3		 ret	 0
namespace_clear ENDP
_TEXT	ENDS
PUBLIC	_PyNamespace_New
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyNamespace_New DD imagerel $LN6
	DD	imagerel $LN6+105
	DD	imagerel $unwind$_PyNamespace_New
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyNamespace_New DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _PyNamespace_New
_TEXT	SEGMENT
ns$ = 32
kwds$ = 64
_PyNamespace_New PROC					; COMDAT

; 212  : {

$LN6:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 213  :     PyObject *ns = namespace_new(&_PyNamespace_Type, NULL, NULL);

  00009	45 33 c0	 xor	 r8d, r8d
  0000c	33 d2		 xor	 edx, edx
  0000e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_PyNamespace_Type
  00015	e8 00 00 00 00	 call	 namespace_new
  0001a	48 89 44 24 20	 mov	 QWORD PTR ns$[rsp], rax

; 214  :     if (ns == NULL)

  0001f	48 83 7c 24 20
	00		 cmp	 QWORD PTR ns$[rsp], 0
  00025	75 04		 jne	 SHORT $LN3@PyNamespac

; 215  :         return NULL;

  00027	33 c0		 xor	 eax, eax
  00029	eb 39		 jmp	 SHORT $LN4@PyNamespac
$LN3@PyNamespac:

; 216  : 
; 217  :     if (kwds == NULL)

  0002b	48 83 7c 24 40
	00		 cmp	 QWORD PTR kwds$[rsp], 0
  00031	75 07		 jne	 SHORT $LN2@PyNamespac

; 218  :         return ns;

  00033	48 8b 44 24 20	 mov	 rax, QWORD PTR ns$[rsp]
  00038	eb 2a		 jmp	 SHORT $LN4@PyNamespac
$LN2@PyNamespac:

; 219  :     if (PyDict_Update(((_PyNamespaceObject *)ns)->ns_dict, kwds) != 0) {

  0003a	48 8b 54 24 40	 mov	 rdx, QWORD PTR kwds$[rsp]
  0003f	48 8b 44 24 20	 mov	 rax, QWORD PTR ns$[rsp]
  00044	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00048	e8 00 00 00 00	 call	 PyDict_Update
  0004d	85 c0		 test	 eax, eax
  0004f	74 0e		 je	 SHORT $LN1@PyNamespac

; 220  :         Py_DECREF(ns);

  00051	48 8b 4c 24 20	 mov	 rcx, QWORD PTR ns$[rsp]
  00056	e8 00 00 00 00	 call	 _Py_DecRef

; 221  :         return NULL;

  0005b	33 c0		 xor	 eax, eax
  0005d	eb 05		 jmp	 SHORT $LN4@PyNamespac
$LN1@PyNamespac:

; 222  :     }
; 223  : 
; 224  :     return (PyObject *)ns;

  0005f	48 8b 44 24 20	 mov	 rax, QWORD PTR ns$[rsp]
$LN4@PyNamespac:

; 225  : }

  00064	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00068	c3		 ret	 0
_PyNamespace_New ENDP
_TEXT	ENDS
END
