; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0L@MLIHCBMC@_functools?$AA@		; `string'
PUBLIC	??_C@_0L@CPCLJIO@cmp_to_key?$AA@		; `string'
PUBLIC	??_C@_06CDBFBENC@reduce?$AA@			; `string'
PUBLIC	??_C@_05EIDGLJAO@mycmp?$AA@			; `string'
PUBLIC	??_C@_0BF@GDEPFHCM@functools?4KeyWrapper?$AA@	; `string'
PUBLIC	??_C@_0CB@OLAPEOPB@Value?5wrapped?5by?5a?5key?5function?4@ ; `string'
PUBLIC	??_C@_03GJLPFLNF@obj?$AA@			; `string'
PUBLIC	??_C@_0BC@CLJGJAAG@functools?4partial?$AA@	; `string'
PUBLIC	??_C@_0N@MOOGCAMH@__setstate__?$AA@		; `string'
PUBLIC	??_C@_0L@NNMACJIG@__reduce__?$AA@		; `string'
PUBLIC	??_C@_08IBFKALI@__dict__?$AA@			; `string'
PUBLIC	??_C@_0DI@JFMIELGJ@dictionary?5of?5keyword?5arguments?5@ ; `string'
PUBLIC	??_C@_08KBIEDDDE@keywords?$AA@			; `string'
PUBLIC	??_C@_0CL@JBDECGKC@tuple?5of?5arguments?5to?5future?5par@ ; `string'
PUBLIC	??_C@_04BFDDMJJI@args?$AA@			; `string'
PUBLIC	??_C@_0CP@GGFHCBJO@function?5object?5to?5use?5in?5future@ ; `string'
PUBLIC	??_C@_04HPNHAEOP@func?$AA@			; `string'
EXTRN	PyType_Type:BYTE
EXTRN	PyObject_GC_Del:PROC
EXTRN	PyObject_GenericSetAttr:PROC
EXTRN	PyObject_GenericGetAttr:PROC
EXTRN	PyObject_GenericSetDict:PROC
EXTRN	PyObject_GenericGetDict:PROC
;	COMDAT ??_C@_0L@MLIHCBMC@_functools?$AA@
CONST	SEGMENT
??_C@_0L@MLIHCBMC@_functools?$AA@ DB '_functools', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@CPCLJIO@cmp_to_key?$AA@
CONST	SEGMENT
??_C@_0L@CPCLJIO@cmp_to_key?$AA@ DB 'cmp_to_key', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06CDBFBENC@reduce?$AA@
CONST	SEGMENT
??_C@_06CDBFBENC@reduce?$AA@ DB 'reduce', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05EIDGLJAO@mycmp?$AA@
CONST	SEGMENT
??_C@_05EIDGLJAO@mycmp?$AA@ DB 'mycmp', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@GDEPFHCM@functools?4KeyWrapper?$AA@
CONST	SEGMENT
??_C@_0BF@GDEPFHCM@functools?4KeyWrapper?$AA@ DB 'functools.KeyWrapper', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@OLAPEOPB@Value?5wrapped?5by?5a?5key?5function?4@
CONST	SEGMENT
??_C@_0CB@OLAPEOPB@Value?5wrapped?5by?5a?5key?5function?4@ DB 'Value wrap'
	DB	'ped by a key function.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03GJLPFLNF@obj?$AA@
CONST	SEGMENT
??_C@_03GJLPFLNF@obj?$AA@ DB 'obj', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@CLJGJAAG@functools?4partial?$AA@
CONST	SEGMENT
??_C@_0BC@CLJGJAAG@functools?4partial?$AA@ DB 'functools.partial', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MOOGCAMH@__setstate__?$AA@
CONST	SEGMENT
??_C@_0N@MOOGCAMH@__setstate__?$AA@ DB '__setstate__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NNMACJIG@__reduce__?$AA@
CONST	SEGMENT
??_C@_0L@NNMACJIG@__reduce__?$AA@ DB '__reduce__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08IBFKALI@__dict__?$AA@
CONST	SEGMENT
??_C@_08IBFKALI@__dict__?$AA@ DB '__dict__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@JFMIELGJ@dictionary?5of?5keyword?5arguments?5@
CONST	SEGMENT
??_C@_0DI@JFMIELGJ@dictionary?5of?5keyword?5arguments?5@ DB 'dictionary o'
	DB	'f keyword arguments to future partial calls', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08KBIEDDDE@keywords?$AA@
CONST	SEGMENT
??_C@_08KBIEDDDE@keywords?$AA@ DB 'keywords', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@JBDECGKC@tuple?5of?5arguments?5to?5future?5par@
CONST	SEGMENT
??_C@_0CL@JBDECGKC@tuple?5of?5arguments?5to?5future?5par@ DB 'tuple of ar'
	DB	'guments to future partial calls', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04BFDDMJJI@args?$AA@
CONST	SEGMENT
??_C@_04BFDDMJJI@args?$AA@ DB 'args', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@GGFHCBJO@function?5object?5to?5use?5in?5future@
CONST	SEGMENT
??_C@_0CP@GGFHCBJO@function?5object?5to?5use?5in?5future@ DB 'function ob'
	DB	'ject to use in future partial calls', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04HPNHAEOP@func?$AA@
CONST	SEGMENT
??_C@_04HPNHAEOP@func?$AA@ DB 'func', 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
partial_doc DB	'partial(func, *args, **keywords) - new function with par'
	DB	'tial application', 0aH, '    of the given arguments and keywo'
	DB	'rds.', 0aH, 00H
	ORG $+13
partial_memberlist DQ FLAT:??_C@_04HPNHAEOP@func?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000060H
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0CP@GGFHCBJO@function?5object?5to?5use?5in?5future@
	DQ	FLAT:??_C@_04BFDDMJJI@args?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000068H
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0CL@JBDECGKC@tuple?5of?5arguments?5to?5future?5par@
	DQ	FLAT:??_C@_08KBIEDDDE@keywords?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000070H
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0DI@JFMIELGJ@dictionary?5of?5keyword?5arguments?5@
	DQ	0000000000000000H
	ORG $+32
partial_getsetlist DQ FLAT:??_C@_08IBFKALI@__dict__?$AA@
	DQ	FLAT:PyObject_GenericGetDict
	DQ	FLAT:PyObject_GenericSetDict
	ORG $+16
	DQ	0000000000000000H
	ORG $+32
partial_methods DQ FLAT:??_C@_0L@NNMACJIG@__reduce__?$AA@
	DQ	FLAT:partial_reduce
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0N@MOOGCAMH@__setstate__?$AA@
	DQ	FLAT:partial_setstate
	DD	08H
	ORG $+4
	ORG $+8
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
partial_type DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0BC@CLJGJAAG@functools?4partial?$AA@
	DQ	0000000000000090H
	DQ	0000000000000000H
	DQ	FLAT:partial_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:partial_repr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:partial_call
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	FLAT:PyObject_GenericSetAttr
	DQ	0000000000000000H
	DD	044400H
	ORG $+4
	DQ	FLAT:partial_doc
	DQ	FLAT:partial_traverse
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000080H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:partial_methods
	DQ	FLAT:partial_memberlist
	DQ	FLAT:partial_getsetlist
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000078H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:partial_new
	DQ	FLAT:PyObject_GC_Del
	ORG $+64
keyobject_members DQ FLAT:??_C@_03GJLPFLNF@obj?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000068H
	DD	00H
	ORG $+4
	DQ	FLAT:??_C@_0CB@OLAPEOPB@Value?5wrapped?5by?5a?5key?5function?4@
	DQ	0000000000000000H
	ORG $+32
keyobject_type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0BF@GDEPFHCM@functools?4KeyWrapper?$AA@
	DQ	0000000000000070H
	DQ	0000000000000000H
	DQ	FLAT:keyobject_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:keyobject_call
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	040000H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:keyobject_traverse
	DQ	FLAT:keyobject_clear
	DQ	FLAT:keyobject_richcompare
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:keyobject_members
	DQ	0000000000000000H
	ORG $+136
?kwargs@?1??keyobject_call@@9@9 DQ FLAT:??_C@_03GJLPFLNF@obj?$AA@ ; `keyobject_call'::`2'::kwargs
	DQ	0000000000000000H
?kwargs@?1??functools_cmp_to_key@@9@9 DQ FLAT:??_C@_05EIDGLJAO@mycmp?$AA@ ; `functools_cmp_to_key'::`2'::kwargs
	DQ	0000000000000000H
functools_cmp_to_key_doc DB 'Convert a cmp= function into a key= function'
	DB	'.', 00H
	ORG $+2
functools_reduce_doc DB 'reduce(function, sequence[, initial]) -> value', 0aH
	DB	0aH, 'Apply a function of two arguments cumulatively to the it'
	DB	'ems of a sequence,', 0aH, 'from left to right, so as to reduc'
	DB	'e the sequence to a single value.', 0aH, 'For example, reduce'
	DB	'(lambda x, y: x+y, [1, 2, 3, 4, 5]) calculates', 0aH, '((((1+'
	DB	'2)+3)+4)+5).  If initial is present, it is placed before the '
	DB	'items', 0aH, 'of the sequence in the calculation, and serves '
	DB	'as a default when the', 0aH, 'sequence is empty.', 00H
	ORG $+6
module_doc DB	'Tools that operate on functions.', 00H
	ORG $+7
module_methods DQ FLAT:??_C@_06CDBFBENC@reduce?$AA@
	DQ	FLAT:functools_reduce
	DD	01H
	ORG $+4
	DQ	FLAT:functools_reduce_doc
	DQ	FLAT:??_C@_0L@CPCLJIO@cmp_to_key?$AA@
	DQ	FLAT:functools_cmp_to_key
	DD	03H
	ORG $+4
	DQ	FLAT:functools_cmp_to_key_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
_functoolsmodule DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0L@MLIHCBMC@_functools?$AA@
	DQ	FLAT:module_doc
	DQ	ffffffffffffffffH
	DQ	FLAT:module_methods
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
_DATA	ENDS
PUBLIC	_Py_DecRef
PUBLIC	_Py_IncRef
PUBLIC	??_C@_0CE@ILJKFDML@the?5first?5argument?5must?5be?5calla@ ; `string'
PUBLIC	??_C@_0CL@BCHKBJID@type?5?8partial?8?5takes?5at?5least?5on@ ; `string'
EXTRN	_Py_NoneStruct:BYTE
EXTRN	PyDict_Copy:PROC
EXTRN	PyTuple_GetSlice:PROC
EXTRN	PyCallable_Check:PROC
EXTRN	PyErr_SetString:PROC
EXTRN	PyExc_TypeError:QWORD
;	COMDAT pdata
; File c:\src\pyparallel\modules\_functoolsmodule.c
pdata	SEGMENT
$pdata$partial_new DD imagerel partial_new
	DD	imagerel partial_new+368
	DD	imagerel $unwind$partial_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$partial_new DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT ??_C@_0CE@ILJKFDML@the?5first?5argument?5must?5be?5calla@
CONST	SEGMENT
??_C@_0CE@ILJKFDML@the?5first?5argument?5must?5be?5calla@ DB 'the first a'
	DB	'rgument must be callable', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@BCHKBJID@type?5?8partial?8?5takes?5at?5least?5on@
CONST	SEGMENT
??_C@_0CL@BCHKBJID@type?5?8partial?8?5takes?5at?5least?5on@ DB 'type ''pa'
	DB	'rtial'' takes at least one argument', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT partial_new
_TEXT	SEGMENT
pto$ = 32
func$ = 40
type$ = 64
args$ = 72
kw$ = 80
partial_new PROC					; COMDAT

; 27   : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 28   :     PyObject *func;
; 29   :     partialobject *pto;
; 30   : 
; 31   :     if (PyTuple_GET_SIZE(args) < 1) {

  00013	48 8b 44 24 48	 mov	 rax, QWORD PTR args$[rsp]
  00018	48 83 78 60 01	 cmp	 QWORD PTR [rax+96], 1
  0001d	7d 1a		 jge	 SHORT $LN7@partial_ne

; 32   :         PyErr_SetString(PyExc_TypeError,
; 33   :                         "type 'partial' takes at least one argument");

  0001f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CL@BCHKBJID@type?5?8partial?8?5takes?5at?5least?5on@
  00026	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0002d	e8 00 00 00 00	 call	 PyErr_SetString

; 34   :         return NULL;

  00032	33 c0		 xor	 eax, eax
  00034	e9 32 01 00 00	 jmp	 $LN8@partial_ne
$LN7@partial_ne:

; 35   :     }
; 36   : 
; 37   :     func = PyTuple_GET_ITEM(args, 0);

  00039	48 8b 44 24 48	 mov	 rax, QWORD PTR args$[rsp]
  0003e	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00042	48 89 44 24 28	 mov	 QWORD PTR func$[rsp], rax

; 38   :     if (!PyCallable_Check(func)) {

  00047	48 8b 4c 24 28	 mov	 rcx, QWORD PTR func$[rsp]
  0004c	e8 00 00 00 00	 call	 PyCallable_Check
  00051	85 c0		 test	 eax, eax
  00053	75 1a		 jne	 SHORT $LN6@partial_ne

; 39   :         PyErr_SetString(PyExc_TypeError,
; 40   :                         "the first argument must be callable");

  00055	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@ILJKFDML@the?5first?5argument?5must?5be?5calla@
  0005c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00063	e8 00 00 00 00	 call	 PyErr_SetString

; 41   :         return NULL;

  00068	33 c0		 xor	 eax, eax
  0006a	e9 fc 00 00 00	 jmp	 $LN8@partial_ne
$LN6@partial_ne:

; 42   :     }
; 43   : 
; 44   :     /* create partialobject structure */
; 45   :     pto = (partialobject *)type->tp_alloc(type, 0);

  0006f	33 d2		 xor	 edx, edx
  00071	48 8b 4c 24 40	 mov	 rcx, QWORD PTR type$[rsp]
  00076	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  0007b	ff 90 88 01 00
	00		 call	 QWORD PTR [rax+392]
  00081	48 89 44 24 20	 mov	 QWORD PTR pto$[rsp], rax

; 46   :     if (pto == NULL)

  00086	48 83 7c 24 20
	00		 cmp	 QWORD PTR pto$[rsp], 0
  0008c	75 07		 jne	 SHORT $LN5@partial_ne

; 47   :         return NULL;

  0008e	33 c0		 xor	 eax, eax
  00090	e9 d6 00 00 00	 jmp	 $LN8@partial_ne
$LN5@partial_ne:

; 48   : 
; 49   :     pto->fn = func;

  00095	48 8b 44 24 20	 mov	 rax, QWORD PTR pto$[rsp]
  0009a	48 8b 4c 24 28	 mov	 rcx, QWORD PTR func$[rsp]
  0009f	48 89 48 60	 mov	 QWORD PTR [rax+96], rcx

; 50   :     Py_INCREF(func);

  000a3	48 8b 4c 24 28	 mov	 rcx, QWORD PTR func$[rsp]
  000a8	e8 00 00 00 00	 call	 _Py_IncRef

; 51   :     pto->args = PyTuple_GetSlice(args, 1, PY_SSIZE_T_MAX);

  000ad	49 b8 ff ff ff
	ff ff ff ff 7f	 mov	 r8, 9223372036854775807	; 7fffffffffffffffH
  000b7	ba 01 00 00 00	 mov	 edx, 1
  000bc	48 8b 4c 24 48	 mov	 rcx, QWORD PTR args$[rsp]
  000c1	e8 00 00 00 00	 call	 PyTuple_GetSlice
  000c6	48 8b 4c 24 20	 mov	 rcx, QWORD PTR pto$[rsp]
  000cb	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax

; 52   :     if (pto->args == NULL) {

  000cf	48 8b 44 24 20	 mov	 rax, QWORD PTR pto$[rsp]
  000d4	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  000d9	75 1b		 jne	 SHORT $LN4@partial_ne

; 53   :         pto->kw = NULL;

  000db	48 8b 44 24 20	 mov	 rax, QWORD PTR pto$[rsp]
  000e0	48 c7 40 70 00
	00 00 00	 mov	 QWORD PTR [rax+112], 0

; 54   :         Py_DECREF(pto);

  000e8	48 8b 4c 24 20	 mov	 rcx, QWORD PTR pto$[rsp]
  000ed	e8 00 00 00 00	 call	 _Py_DecRef

; 55   :         return NULL;

  000f2	33 c0		 xor	 eax, eax
  000f4	eb 75		 jmp	 SHORT $LN8@partial_ne
$LN4@partial_ne:

; 56   :     }
; 57   :     if (kw != NULL) {

  000f6	48 83 7c 24 50
	00		 cmp	 QWORD PTR kw$[rsp], 0
  000fc	74 2f		 je	 SHORT $LN3@partial_ne

; 58   :         pto->kw = PyDict_Copy(kw);

  000fe	48 8b 4c 24 50	 mov	 rcx, QWORD PTR kw$[rsp]
  00103	e8 00 00 00 00	 call	 PyDict_Copy
  00108	48 8b 4c 24 20	 mov	 rcx, QWORD PTR pto$[rsp]
  0010d	48 89 41 70	 mov	 QWORD PTR [rcx+112], rax

; 59   :         if (pto->kw == NULL) {

  00111	48 8b 44 24 20	 mov	 rax, QWORD PTR pto$[rsp]
  00116	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  0011b	75 0e		 jne	 SHORT $LN2@partial_ne

; 60   :             Py_DECREF(pto);

  0011d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR pto$[rsp]
  00122	e8 00 00 00 00	 call	 _Py_DecRef

; 61   :             return NULL;

  00127	33 c0		 xor	 eax, eax
  00129	eb 40		 jmp	 SHORT $LN8@partial_ne
$LN2@partial_ne:

; 62   :         }
; 63   :     } else {

  0012b	eb 1c		 jmp	 SHORT $LN1@partial_ne
$LN3@partial_ne:

; 64   :         pto->kw = Py_None;

  0012d	48 8b 44 24 20	 mov	 rax, QWORD PTR pto$[rsp]
  00132	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00139	48 89 48 70	 mov	 QWORD PTR [rax+112], rcx

; 65   :         Py_INCREF(Py_None);

  0013d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00144	e8 00 00 00 00	 call	 _Py_IncRef
$LN1@partial_ne:

; 66   :     }
; 67   : 
; 68   :     pto->weakreflist = NULL;

  00149	48 8b 44 24 20	 mov	 rax, QWORD PTR pto$[rsp]
  0014e	48 c7 80 80 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+128], 0

; 69   :     pto->dict = NULL;

  00159	48 8b 44 24 20	 mov	 rax, QWORD PTR pto$[rsp]
  0015e	48 c7 40 78 00
	00 00 00	 mov	 QWORD PTR [rax+120], 0

; 70   : 
; 71   :     return (PyObject *)pto;

  00166	48 8b 44 24 20	 mov	 rax, QWORD PTR pto$[rsp]
$LN8@partial_ne:

; 72   : }

  0016b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0016f	c3		 ret	 0
partial_new ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
EXTRN	_Py_RefTotal:QWORD
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN7
	DD	imagerel $LN7+132
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 6d		 jne	 SHORT $LN2@Py_IncRef
  00012	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0001a	4c 8b 4c 24 40	 mov	 r9, QWORD PTR op$[rsp]
  0001f	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_Guard
  00038	85 c0		 test	 eax, eax
  0003a	75 12		 jne	 SHORT $LN1@Py_IncRef
  0003c	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  00041	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00045	48 83 e0 20	 and	 rax, 32			; 00000020H
  00049	48 85 c0	 test	 rax, rax
  0004c	74 31		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;

  0004e	e8 00 00 00 00	 call	 _Py_PXCTX
  00053	85 c0		 test	 eax, eax
  00055	74 02		 je	 SHORT $LN5@Py_IncRef
  00057	eb 11		 jmp	 SHORT $LN6@Py_IncRef
$LN5@Py_IncRef:
  00059	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00060	48 ff c0	 inc	 rax
  00063	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN6@Py_IncRef:

; 907  :         (((PyObject*)(op))->ob_refcnt++);

  0006a	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  0006f	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00073	48 ff c0	 inc	 rax
  00076	48 8b 4c 24 40	 mov	 rcx, QWORD PTR op$[rsp]
  0007b	48 89 41 50	 mov	 QWORD PTR [rcx+80], rax
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  0007f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00083	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
EXTRN	_Py_Dealloc:PROC
EXTRN	_Py_NegativeRefcount:PROC
EXTRN	Px_DecRef:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN13
	DD	imagerel $LN13+257
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
tv81 = 48
op$ = 80
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN13:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	0f 85 e6 00 00
	00		 jne	 $LN8@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00016	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0001b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0001f	48 83 e0 20	 and	 rax, 32			; 00000020H
  00023	48 85 c0	 test	 rax, rax
  00026	75 14		 jne	 SHORT $LN6@Py_DecRef
  00028	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0002d	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00031	48 25 80 00 00
	00		 and	 rax, 128		; 00000080H
  00037	48 85 c0	 test	 rax, rax
  0003a	74 0f		 je	 SHORT $LN7@Py_DecRef
$LN6@Py_DecRef:

; 926  :             Px_DECREF(op);

  0003c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  00041	e8 00 00 00 00	 call	 Px_DecRef
  00046	e9 b1 00 00 00	 jmp	 $LN5@Py_DecRef
$LN7@Py_DecRef:

; 927  :         else if (!Px_ISPX(op)) {

  0004b	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00050	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00054	48 83 e0 02	 and	 rax, 2
  00058	48 85 c0	 test	 rax, rax
  0005b	0f 85 9b 00 00
	00		 jne	 $LN4@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;

  00061	e8 00 00 00 00	 call	 _Py_PXCTX
  00066	85 c0		 test	 eax, eax
  00068	74 02		 je	 SHORT $LN11@Py_DecRef
  0006a	eb 11		 jmp	 SHORT $LN12@Py_DecRef
$LN11@Py_DecRef:
  0006c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00073	48 ff c8	 dec	 rax
  00076	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN12@Py_DecRef:

; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  0007d	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00082	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00086	48 ff c8	 dec	 rax
  00089	48 89 44 24 30	 mov	 QWORD PTR tv81[rsp], rax
  0008e	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00093	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv81[rsp]
  00098	48 89 48 50	 mov	 QWORD PTR [rax+80], rcx
  0009c	48 83 7c 24 30
	00		 cmp	 QWORD PTR tv81[rsp], 0
  000a2	74 4e		 je	 SHORT $LN3@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);

  000a4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000ac	4c 8b 4c 24 50	 mov	 r9, QWORD PTR op$[rsp]
  000b1	41 b8 a2 03 00
	00		 mov	 r8d, 930		; 000003a2H
  000b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000c5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ca	85 c0		 test	 eax, eax
  000cc	75 22		 jne	 SHORT $LN2@Py_DecRef
  000ce	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  000d3	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000d8	7d 16		 jge	 SHORT $LN2@Py_DecRef
  000da	4c 8b 44 24 50	 mov	 r8, QWORD PTR op$[rsp]
  000df	ba a2 03 00 00	 mov	 edx, 930		; 000003a2H
  000e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000eb	e8 00 00 00 00	 call	 _Py_NegativeRefcount
$LN2@Py_DecRef:

; 931  :             } else

  000f0	eb 0a		 jmp	 SHORT $LN1@Py_DecRef
$LN3@Py_DecRef:

; 932  :                 _Py_Dealloc((PyObject *)(op));

  000f2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  000f7	e8 00 00 00 00	 call	 _Py_Dealloc
$LN1@Py_DecRef:
$LN4@Py_DecRef:
$LN5@Py_DecRef:
$LN8@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  000fc	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00100	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
EXTRN	PyObject_ClearWeakRefs:PROC
EXTRN	PyObject_GC_UnTrack:PROC
;	COMDAT pdata
; File c:\src\pyparallel\modules\_functoolsmodule.c
pdata	SEGMENT
$pdata$partial_dealloc DD imagerel partial_dealloc
	DD	imagerel partial_dealloc+197
	DD	imagerel $unwind$partial_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$partial_dealloc DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT partial_dealloc
_TEXT	SEGMENT
pto$ = 48
partial_dealloc PROC					; COMDAT

; 76   : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 77   :     PyObject_GC_UnTrack(pto);

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pto$[rsp]
  0000e	e8 00 00 00 00	 call	 PyObject_GC_UnTrack

; 78   :     if (pto->weakreflist != NULL)

  00013	48 8b 44 24 30	 mov	 rax, QWORD PTR pto$[rsp]
  00018	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  00020	74 0a		 je	 SHORT $LN17@partial_de

; 79   :         PyObject_ClearWeakRefs((PyObject *) pto);

  00022	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pto$[rsp]
  00027	e8 00 00 00 00	 call	 PyObject_ClearWeakRefs
$LN17@partial_de:
$LN16@partial_de:

; 80   :     Py_XDECREF(pto->fn);

  0002c	48 8b 44 24 30	 mov	 rax, QWORD PTR pto$[rsp]
  00031	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00036	74 0e		 je	 SHORT $LN13@partial_de
  00038	48 8b 44 24 30	 mov	 rax, QWORD PTR pto$[rsp]
  0003d	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00041	e8 00 00 00 00	 call	 _Py_DecRef
$LN13@partial_de:
  00046	33 c0		 xor	 eax, eax
  00048	85 c0		 test	 eax, eax
  0004a	75 e0		 jne	 SHORT $LN16@partial_de
$LN12@partial_de:

; 81   :     Py_XDECREF(pto->args);

  0004c	48 8b 44 24 30	 mov	 rax, QWORD PTR pto$[rsp]
  00051	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  00056	74 0e		 je	 SHORT $LN9@partial_de
  00058	48 8b 44 24 30	 mov	 rax, QWORD PTR pto$[rsp]
  0005d	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  00061	e8 00 00 00 00	 call	 _Py_DecRef
$LN9@partial_de:
  00066	33 c0		 xor	 eax, eax
  00068	85 c0		 test	 eax, eax
  0006a	75 e0		 jne	 SHORT $LN12@partial_de
$LN8@partial_de:

; 82   :     Py_XDECREF(pto->kw);

  0006c	48 8b 44 24 30	 mov	 rax, QWORD PTR pto$[rsp]
  00071	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  00076	74 0e		 je	 SHORT $LN5@partial_de
  00078	48 8b 44 24 30	 mov	 rax, QWORD PTR pto$[rsp]
  0007d	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  00081	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@partial_de:
  00086	33 c0		 xor	 eax, eax
  00088	85 c0		 test	 eax, eax
  0008a	75 e0		 jne	 SHORT $LN8@partial_de
$LN4@partial_de:

; 83   :     Py_XDECREF(pto->dict);

  0008c	48 8b 44 24 30	 mov	 rax, QWORD PTR pto$[rsp]
  00091	48 83 78 78 00	 cmp	 QWORD PTR [rax+120], 0
  00096	74 0e		 je	 SHORT $LN1@partial_de
  00098	48 8b 44 24 30	 mov	 rax, QWORD PTR pto$[rsp]
  0009d	48 8b 48 78	 mov	 rcx, QWORD PTR [rax+120]
  000a1	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@partial_de:
  000a6	33 c0		 xor	 eax, eax
  000a8	85 c0		 test	 eax, eax
  000aa	75 e0		 jne	 SHORT $LN4@partial_de

; 84   :     Py_TYPE(pto)->tp_free(pto);

  000ac	48 8b 44 24 30	 mov	 rax, QWORD PTR pto$[rsp]
  000b1	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000b5	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pto$[rsp]
  000ba	ff 90 98 01 00
	00		 call	 QWORD PTR [rax+408]

; 85   : }

  000c0	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000c4	c3		 ret	 0
partial_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_1FI@PLEENLF@?$AAp?$AAt?$AAo?$AA?9?$AA?$DO?$AAk?$AAw?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAP?$AAy?$AA_?$AAN?$AAo?$AAn?$AAe?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAP?$AAy?$AAD?$AAi?$AAc?$AAt?$AA_?$AAC?$AAh?$AAe@ ; `string'
PUBLIC	??_C@_1DC@CLGENDCC@?$AAP?$AAy?$AAT?$AAu?$AAp?$AAl?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAp?$AAt?$AAo?$AA?9?$AA?$DO?$AAa?$AAr?$AAg?$AAs?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DE@LGJNNDMD@?$AAP?$AAy?$AAC?$AAa?$AAl?$AAl?$AAa?$AAb?$AAl?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAp?$AAt?$AAo?$AA?9?$AA?$DO?$AAf?$AAn?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DM@JHGOOPPP@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAf?$AAu?$AAn?$AAc?$AAt?$AAo?$AAo?$AAl?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@ ; `string'
EXTRN	PyObject_Call:PROC
EXTRN	PyDict_Merge:PROC
EXTRN	PySequence_Concat:PROC
EXTRN	__imp__wassert:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$partial_call DD imagerel partial_call
	DD	imagerel partial_call+557
	DD	imagerel $unwind$partial_call
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$partial_call DD 011301H
	DD	08213H
xdata	ENDS
;	COMDAT ??_C@_1FI@PLEENLF@?$AAp?$AAt?$AAo?$AA?9?$AA?$DO?$AAk?$AAw?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAP?$AAy?$AA_?$AAN?$AAo?$AAn?$AAe?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAP?$AAy?$AAD?$AAi?$AAc?$AAt?$AA_?$AAC?$AAh?$AAe@
CONST	SEGMENT
??_C@_1FI@PLEENLF@?$AAp?$AAt?$AAo?$AA?9?$AA?$DO?$AAk?$AAw?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAP?$AAy?$AA_?$AAN?$AAo?$AAn?$AAe?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAP?$AAy?$AAD?$AAi?$AAc?$AAt?$AA_?$AAC?$AAh?$AAe@ DB 'p'
	DB	00H, 't', 00H, 'o', 00H, '-', 00H, '>', 00H, 'k', 00H, 'w', 00H
	DB	' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'P', 00H, 'y', 00H, '_'
	DB	00H, 'N', 00H, 'o', 00H, 'n', 00H, 'e', 00H, ' ', 00H, '|', 00H
	DB	'|', 00H, ' ', 00H, 'P', 00H, 'y', 00H, 'D', 00H, 'i', 00H, 'c'
	DB	00H, 't', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c', 00H
	DB	'k', 00H, '(', 00H, 'p', 00H, 't', 00H, 'o', 00H, '-', 00H, '>'
	DB	00H, 'k', 00H, 'w', 00H, ')', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1DC@CLGENDCC@?$AAP?$AAy?$AAT?$AAu?$AAp?$AAl?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAp?$AAt?$AAo?$AA?9?$AA?$DO?$AAa?$AAr?$AAg?$AAs?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DC@CLGENDCC@?$AAP?$AAy?$AAT?$AAu?$AAp?$AAl?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAp?$AAt?$AAo?$AA?9?$AA?$DO?$AAa?$AAr?$AAg?$AAs?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'T', 00H, 'u', 00H, 'p', 00H, 'l', 00H, 'e', 00H
	DB	'_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, '('
	DB	00H, 'p', 00H, 't', 00H, 'o', 00H, '-', 00H, '>', 00H, 'a', 00H
	DB	'r', 00H, 'g', 00H, 's', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DE@LGJNNDMD@?$AAP?$AAy?$AAC?$AAa?$AAl?$AAl?$AAa?$AAb?$AAl?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAp?$AAt?$AAo?$AA?9?$AA?$DO?$AAf?$AAn?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DE@LGJNNDMD@?$AAP?$AAy?$AAC?$AAa?$AAl?$AAl?$AAa?$AAb?$AAl?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAp?$AAt?$AAo?$AA?9?$AA?$DO?$AAf?$AAn?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'C', 00H, 'a', 00H, 'l', 00H, 'l', 00H, 'a', 00H
	DB	'b', 00H, 'l', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e'
	DB	00H, 'c', 00H, 'k', 00H, '(', 00H, 'p', 00H, 't', 00H, 'o', 00H
	DB	'-', 00H, '>', 00H, 'f', 00H, 'n', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DM@JHGOOPPP@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAf?$AAu?$AAn?$AAc?$AAt?$AAo?$AAo?$AAl?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
CONST	SEGMENT
??_C@_1DM@JHGOOPPP@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAf?$AAu?$AAn?$AAc?$AAt?$AAo?$AAo?$AAl?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@ DB '.'
	DB	00H, '.', 00H, '\', 00H, 'M', 00H, 'o', 00H, 'd', 00H, 'u', 00H
	DB	'l', 00H, 'e', 00H, 's', 00H, '\', 00H, '_', 00H, 'f', 00H, 'u'
	DB	00H, 'n', 00H, 'c', 00H, 't', 00H, 'o', 00H, 'o', 00H, 'l', 00H
	DB	's', 00H, 'm', 00H, 'o', 00H, 'd', 00H, 'u', 00H, 'l', 00H, 'e'
	DB	00H, '.', 00H, 'c', 00H, 00H, 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT partial_call
_TEXT	SEGMENT
kwappl$ = 32
ret$ = 40
argappl$ = 48
pto$ = 80
args$ = 88
kw$ = 96
partial_call PROC					; COMDAT

; 89   : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 90   :     PyObject *ret;
; 91   :     PyObject *argappl = NULL, *kwappl = NULL;

  00013	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR argappl$[rsp], 0
  0001c	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR kwappl$[rsp], 0

; 92   : 
; 93   :     assert (PyCallable_Check(pto->fn));

  00025	48 8b 44 24 50	 mov	 rax, QWORD PTR pto$[rsp]
  0002a	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  0002e	e8 00 00 00 00	 call	 PyCallable_Check
  00033	85 c0		 test	 eax, eax
  00035	75 1c		 jne	 SHORT $LN21@partial_ca
  00037	41 b8 5d 00 00
	00		 mov	 r8d, 93			; 0000005dH
  0003d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@JHGOOPPP@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAf?$AAu?$AAn?$AAc?$AAt?$AAo?$AAo?$AAl?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  00044	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@LGJNNDMD@?$AAP?$AAy?$AAC?$AAa?$AAl?$AAl?$AAa?$AAb?$AAl?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAp?$AAt?$AAo?$AA?9?$AA?$DO?$AAf?$AAn?$AA?$CJ?$AA?$AA@
  0004b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00051	33 c0		 xor	 eax, eax
$LN21@partial_ca:

; 94   :     assert (PyTuple_Check(pto->args));

  00053	48 8b 44 24 50	 mov	 rax, QWORD PTR pto$[rsp]
  00058	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0005c	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00060	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00066	25 00 00 00 04	 and	 eax, 67108864		; 04000000H
  0006b	85 c0		 test	 eax, eax
  0006d	75 1c		 jne	 SHORT $LN22@partial_ca
  0006f	41 b8 5e 00 00
	00		 mov	 r8d, 94			; 0000005eH
  00075	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@JHGOOPPP@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAf?$AAu?$AAn?$AAc?$AAt?$AAo?$AAo?$AAl?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  0007c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DC@CLGENDCC@?$AAP?$AAy?$AAT?$AAu?$AAp?$AAl?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAp?$AAt?$AAo?$AA?9?$AA?$DO?$AAa?$AAr?$AAg?$AAs?$AA?$CJ?$AA?$AA@
  00083	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00089	33 c0		 xor	 eax, eax
$LN22@partial_ca:

; 95   :     assert (pto->kw == Py_None  ||  PyDict_Check(pto->kw));

  0008b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00092	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pto$[rsp]
  00097	48 39 41 70	 cmp	 QWORD PTR [rcx+112], rax
  0009b	74 38		 je	 SHORT $LN23@partial_ca
  0009d	48 8b 44 24 50	 mov	 rax, QWORD PTR pto$[rsp]
  000a2	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  000a6	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000aa	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000b0	25 00 00 00 20	 and	 eax, 536870912		; 20000000H
  000b5	85 c0		 test	 eax, eax
  000b7	75 1c		 jne	 SHORT $LN23@partial_ca
  000b9	41 b8 5f 00 00
	00		 mov	 r8d, 95			; 0000005fH
  000bf	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@JHGOOPPP@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAf?$AAu?$AAn?$AAc?$AAt?$AAo?$AAo?$AAl?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  000c6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FI@PLEENLF@?$AAp?$AAt?$AAo?$AA?9?$AA?$DO?$AAk?$AAw?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAP?$AAy?$AA_?$AAN?$AAo?$AAn?$AAe?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAP?$AAy?$AAD?$AAi?$AAc?$AAt?$AA_?$AAC?$AAh?$AAe@
  000cd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000d3	33 c0		 xor	 eax, eax
$LN23@partial_ca:

; 96   : 
; 97   :     if (PyTuple_GET_SIZE(pto->args) == 0) {

  000d5	48 8b 44 24 50	 mov	 rax, QWORD PTR pto$[rsp]
  000da	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000de	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  000e3	75 16		 jne	 SHORT $LN18@partial_ca

; 98   :         argappl = args;

  000e5	48 8b 44 24 58	 mov	 rax, QWORD PTR args$[rsp]
  000ea	48 89 44 24 30	 mov	 QWORD PTR argappl$[rsp], rax

; 99   :         Py_INCREF(args);

  000ef	48 8b 4c 24 58	 mov	 rcx, QWORD PTR args$[rsp]
  000f4	e8 00 00 00 00	 call	 _Py_IncRef
  000f9	eb 51		 jmp	 SHORT $LN17@partial_ca
$LN18@partial_ca:

; 100  :     } else if (PyTuple_GET_SIZE(args) == 0) {

  000fb	48 8b 44 24 58	 mov	 rax, QWORD PTR args$[rsp]
  00100	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00105	75 1e		 jne	 SHORT $LN16@partial_ca

; 101  :         argappl = pto->args;

  00107	48 8b 44 24 50	 mov	 rax, QWORD PTR pto$[rsp]
  0010c	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00110	48 89 44 24 30	 mov	 QWORD PTR argappl$[rsp], rax

; 102  :         Py_INCREF(pto->args);

  00115	48 8b 44 24 50	 mov	 rax, QWORD PTR pto$[rsp]
  0011a	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  0011e	e8 00 00 00 00	 call	 _Py_IncRef

; 103  :     } else {

  00123	eb 27		 jmp	 SHORT $LN15@partial_ca
$LN16@partial_ca:

; 104  :         argappl = PySequence_Concat(pto->args, args);

  00125	48 8b 54 24 58	 mov	 rdx, QWORD PTR args$[rsp]
  0012a	48 8b 44 24 50	 mov	 rax, QWORD PTR pto$[rsp]
  0012f	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  00133	e8 00 00 00 00	 call	 PySequence_Concat
  00138	48 89 44 24 30	 mov	 QWORD PTR argappl$[rsp], rax

; 105  :         if (argappl == NULL)

  0013d	48 83 7c 24 30
	00		 cmp	 QWORD PTR argappl$[rsp], 0
  00143	75 07		 jne	 SHORT $LN14@partial_ca

; 106  :             return NULL;

  00145	33 c0		 xor	 eax, eax
  00147	e9 dc 00 00 00	 jmp	 $LN19@partial_ca
$LN14@partial_ca:
$LN15@partial_ca:
$LN17@partial_ca:

; 107  :     }
; 108  : 
; 109  :     if (pto->kw == Py_None) {

  0014c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00153	48 8b 4c 24 50	 mov	 rcx, QWORD PTR pto$[rsp]
  00158	48 39 41 70	 cmp	 QWORD PTR [rcx+112], rax
  0015c	75 24		 jne	 SHORT $LN13@partial_ca

; 110  :         kwappl = kw;

  0015e	48 8b 44 24 60	 mov	 rax, QWORD PTR kw$[rsp]
  00163	48 89 44 24 20	 mov	 QWORD PTR kwappl$[rsp], rax
$LN12@partial_ca:

; 111  :         Py_XINCREF(kw);

  00168	48 83 7c 24 60
	00		 cmp	 QWORD PTR kw$[rsp], 0
  0016e	74 0a		 je	 SHORT $LN9@partial_ca
  00170	48 8b 4c 24 60	 mov	 rcx, QWORD PTR kw$[rsp]
  00175	e8 00 00 00 00	 call	 _Py_IncRef
$LN9@partial_ca:
  0017a	33 c0		 xor	 eax, eax
  0017c	85 c0		 test	 eax, eax
  0017e	75 e8		 jne	 SHORT $LN12@partial_ca

; 112  :     } else {

  00180	eb 62		 jmp	 SHORT $LN8@partial_ca
$LN13@partial_ca:

; 113  :         kwappl = PyDict_Copy(pto->kw);

  00182	48 8b 44 24 50	 mov	 rax, QWORD PTR pto$[rsp]
  00187	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  0018b	e8 00 00 00 00	 call	 PyDict_Copy
  00190	48 89 44 24 20	 mov	 QWORD PTR kwappl$[rsp], rax

; 114  :         if (kwappl == NULL) {

  00195	48 83 7c 24 20
	00		 cmp	 QWORD PTR kwappl$[rsp], 0
  0019b	75 0e		 jne	 SHORT $LN7@partial_ca

; 115  :             Py_DECREF(argappl);

  0019d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR argappl$[rsp]
  001a2	e8 00 00 00 00	 call	 _Py_DecRef

; 116  :             return NULL;

  001a7	33 c0		 xor	 eax, eax
  001a9	eb 7d		 jmp	 SHORT $LN19@partial_ca
$LN7@partial_ca:

; 117  :         }
; 118  :         if (kw != NULL) {

  001ab	48 83 7c 24 60
	00		 cmp	 QWORD PTR kw$[rsp], 0
  001b1	74 31		 je	 SHORT $LN6@partial_ca

; 119  :             if (PyDict_Merge(kwappl, kw, 1) != 0) {

  001b3	41 b8 01 00 00
	00		 mov	 r8d, 1
  001b9	48 8b 54 24 60	 mov	 rdx, QWORD PTR kw$[rsp]
  001be	48 8b 4c 24 20	 mov	 rcx, QWORD PTR kwappl$[rsp]
  001c3	e8 00 00 00 00	 call	 PyDict_Merge
  001c8	85 c0		 test	 eax, eax
  001ca	74 18		 je	 SHORT $LN5@partial_ca

; 120  :                 Py_DECREF(argappl);

  001cc	48 8b 4c 24 30	 mov	 rcx, QWORD PTR argappl$[rsp]
  001d1	e8 00 00 00 00	 call	 _Py_DecRef

; 121  :                 Py_DECREF(kwappl);

  001d6	48 8b 4c 24 20	 mov	 rcx, QWORD PTR kwappl$[rsp]
  001db	e8 00 00 00 00	 call	 _Py_DecRef

; 122  :                 return NULL;

  001e0	33 c0		 xor	 eax, eax
  001e2	eb 44		 jmp	 SHORT $LN19@partial_ca
$LN5@partial_ca:
$LN6@partial_ca:
$LN8@partial_ca:

; 123  :             }
; 124  :         }
; 125  :     }
; 126  : 
; 127  :     ret = PyObject_Call(pto->fn, argappl, kwappl);

  001e4	4c 8b 44 24 20	 mov	 r8, QWORD PTR kwappl$[rsp]
  001e9	48 8b 54 24 30	 mov	 rdx, QWORD PTR argappl$[rsp]
  001ee	48 8b 44 24 50	 mov	 rax, QWORD PTR pto$[rsp]
  001f3	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  001f7	e8 00 00 00 00	 call	 PyObject_Call
  001fc	48 89 44 24 28	 mov	 QWORD PTR ret$[rsp], rax

; 128  :     Py_DECREF(argappl);

  00201	48 8b 4c 24 30	 mov	 rcx, QWORD PTR argappl$[rsp]
  00206	e8 00 00 00 00	 call	 _Py_DecRef
$LN4@partial_ca:

; 129  :     Py_XDECREF(kwappl);

  0020b	48 83 7c 24 20
	00		 cmp	 QWORD PTR kwappl$[rsp], 0
  00211	74 0a		 je	 SHORT $LN1@partial_ca
  00213	48 8b 4c 24 20	 mov	 rcx, QWORD PTR kwappl$[rsp]
  00218	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@partial_ca:
  0021d	33 c0		 xor	 eax, eax
  0021f	85 c0		 test	 eax, eax
  00221	75 e8		 jne	 SHORT $LN4@partial_ca

; 130  :     return ret;

  00223	48 8b 44 24 28	 mov	 rax, QWORD PTR ret$[rsp]
$LN19@partial_ca:

; 131  : }

  00228	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0022c	c3		 ret	 0
partial_call ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BB@NNINNGNH@partial_traverse?$AA@	; `string'
PUBLIC	??_C@_0BO@DDKINFCI@?4?4?2Modules?2_functoolsmodule?4c?$AA@ ; `string'
EXTRN	_PyParallel_ContextGuardFailure:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$partial_traverse DD imagerel partial_traverse
	DD	imagerel partial_traverse+392
	DD	imagerel $unwind$partial_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$partial_traverse DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT ??_C@_0BB@NNINNGNH@partial_traverse?$AA@
CONST	SEGMENT
??_C@_0BB@NNINNGNH@partial_traverse?$AA@ DB 'partial_traverse', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@DDKINFCI@?4?4?2Modules?2_functoolsmodule?4c?$AA@
CONST	SEGMENT
??_C@_0BO@DDKINFCI@?4?4?2Modules?2_functoolsmodule?4c?$AA@ DB '..\Modules'
	DB	'\_functoolsmodule.c', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT partial_traverse
_TEXT	SEGMENT
vret$20475 = 32
vret$20483 = 36
vret$20491 = 40
vret$20499 = 44
pto$ = 64
visit$ = 72
arg$ = 80
partial_traverse PROC					; COMDAT

; 135  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN24@partial_tr:

; 136  :     Py_VISIT(pto->fn);

  00013	e8 00 00 00 00	 call	 _Py_PXCTX
  00018	85 c0		 test	 eax, eax
  0001a	74 1c		 je	 SHORT $LN21@partial_tr
  0001c	45 33 c9	 xor	 r9d, r9d
  0001f	41 b8 88 00 00
	00		 mov	 r8d, 136		; 00000088H
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BO@DDKINFCI@?4?4?2Modules?2_functoolsmodule?4c?$AA@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@NNINNGNH@partial_traverse?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN21@partial_tr:
  00038	48 8b 44 24 40	 mov	 rax, QWORD PTR pto$[rsp]
  0003d	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00042	74 26		 je	 SHORT $LN20@partial_tr
  00044	48 8b 54 24 50	 mov	 rdx, QWORD PTR arg$[rsp]
  00049	48 8b 44 24 40	 mov	 rax, QWORD PTR pto$[rsp]
  0004e	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00052	ff 54 24 48	 call	 QWORD PTR visit$[rsp]
  00056	89 44 24 20	 mov	 DWORD PTR vret$20475[rsp], eax
  0005a	83 7c 24 20 00	 cmp	 DWORD PTR vret$20475[rsp], 0
  0005f	74 09		 je	 SHORT $LN19@partial_tr
  00061	8b 44 24 20	 mov	 eax, DWORD PTR vret$20475[rsp]
  00065	e9 19 01 00 00	 jmp	 $LN25@partial_tr
$LN19@partial_tr:
$LN20@partial_tr:
  0006a	33 c0		 xor	 eax, eax
  0006c	85 c0		 test	 eax, eax
  0006e	75 a3		 jne	 SHORT $LN24@partial_tr
$LN18@partial_tr:

; 137  :     Py_VISIT(pto->args);

  00070	e8 00 00 00 00	 call	 _Py_PXCTX
  00075	85 c0		 test	 eax, eax
  00077	74 1c		 je	 SHORT $LN15@partial_tr
  00079	45 33 c9	 xor	 r9d, r9d
  0007c	41 b8 89 00 00
	00		 mov	 r8d, 137		; 00000089H
  00082	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BO@DDKINFCI@?4?4?2Modules?2_functoolsmodule?4c?$AA@
  00089	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@NNINNGNH@partial_traverse?$AA@
  00090	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN15@partial_tr:
  00095	48 8b 44 24 40	 mov	 rax, QWORD PTR pto$[rsp]
  0009a	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  0009f	74 26		 je	 SHORT $LN14@partial_tr
  000a1	48 8b 54 24 50	 mov	 rdx, QWORD PTR arg$[rsp]
  000a6	48 8b 44 24 40	 mov	 rax, QWORD PTR pto$[rsp]
  000ab	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  000af	ff 54 24 48	 call	 QWORD PTR visit$[rsp]
  000b3	89 44 24 24	 mov	 DWORD PTR vret$20483[rsp], eax
  000b7	83 7c 24 24 00	 cmp	 DWORD PTR vret$20483[rsp], 0
  000bc	74 09		 je	 SHORT $LN13@partial_tr
  000be	8b 44 24 24	 mov	 eax, DWORD PTR vret$20483[rsp]
  000c2	e9 bc 00 00 00	 jmp	 $LN25@partial_tr
$LN13@partial_tr:
$LN14@partial_tr:
  000c7	33 c0		 xor	 eax, eax
  000c9	85 c0		 test	 eax, eax
  000cb	75 a3		 jne	 SHORT $LN18@partial_tr
$LN12@partial_tr:

; 138  :     Py_VISIT(pto->kw);

  000cd	e8 00 00 00 00	 call	 _Py_PXCTX
  000d2	85 c0		 test	 eax, eax
  000d4	74 1c		 je	 SHORT $LN9@partial_tr
  000d6	45 33 c9	 xor	 r9d, r9d
  000d9	41 b8 8a 00 00
	00		 mov	 r8d, 138		; 0000008aH
  000df	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BO@DDKINFCI@?4?4?2Modules?2_functoolsmodule?4c?$AA@
  000e6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@NNINNGNH@partial_traverse?$AA@
  000ed	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN9@partial_tr:
  000f2	48 8b 44 24 40	 mov	 rax, QWORD PTR pto$[rsp]
  000f7	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  000fc	74 23		 je	 SHORT $LN8@partial_tr
  000fe	48 8b 54 24 50	 mov	 rdx, QWORD PTR arg$[rsp]
  00103	48 8b 44 24 40	 mov	 rax, QWORD PTR pto$[rsp]
  00108	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  0010c	ff 54 24 48	 call	 QWORD PTR visit$[rsp]
  00110	89 44 24 28	 mov	 DWORD PTR vret$20491[rsp], eax
  00114	83 7c 24 28 00	 cmp	 DWORD PTR vret$20491[rsp], 0
  00119	74 06		 je	 SHORT $LN7@partial_tr
  0011b	8b 44 24 28	 mov	 eax, DWORD PTR vret$20491[rsp]
  0011f	eb 62		 jmp	 SHORT $LN25@partial_tr
$LN7@partial_tr:
$LN8@partial_tr:
  00121	33 c0		 xor	 eax, eax
  00123	85 c0		 test	 eax, eax
  00125	75 a6		 jne	 SHORT $LN12@partial_tr
$LN6@partial_tr:

; 139  :     Py_VISIT(pto->dict);

  00127	e8 00 00 00 00	 call	 _Py_PXCTX
  0012c	85 c0		 test	 eax, eax
  0012e	74 1c		 je	 SHORT $LN3@partial_tr
  00130	45 33 c9	 xor	 r9d, r9d
  00133	41 b8 8b 00 00
	00		 mov	 r8d, 139		; 0000008bH
  00139	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BO@DDKINFCI@?4?4?2Modules?2_functoolsmodule?4c?$AA@
  00140	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@NNINNGNH@partial_traverse?$AA@
  00147	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@partial_tr:
  0014c	48 8b 44 24 40	 mov	 rax, QWORD PTR pto$[rsp]
  00151	48 83 78 78 00	 cmp	 QWORD PTR [rax+120], 0
  00156	74 23		 je	 SHORT $LN2@partial_tr
  00158	48 8b 54 24 50	 mov	 rdx, QWORD PTR arg$[rsp]
  0015d	48 8b 44 24 40	 mov	 rax, QWORD PTR pto$[rsp]
  00162	48 8b 48 78	 mov	 rcx, QWORD PTR [rax+120]
  00166	ff 54 24 48	 call	 QWORD PTR visit$[rsp]
  0016a	89 44 24 2c	 mov	 DWORD PTR vret$20499[rsp], eax
  0016e	83 7c 24 2c 00	 cmp	 DWORD PTR vret$20499[rsp], 0
  00173	74 06		 je	 SHORT $LN1@partial_tr
  00175	8b 44 24 2c	 mov	 eax, DWORD PTR vret$20499[rsp]
  00179	eb 08		 jmp	 SHORT $LN25@partial_tr
$LN1@partial_tr:
$LN2@partial_tr:
  0017b	33 c0		 xor	 eax, eax
  0017d	85 c0		 test	 eax, eax
  0017f	75 a6		 jne	 SHORT $LN6@partial_tr

; 140  :     return 0;

  00181	33 c0		 xor	 eax, eax
$LN25@partial_tr:

; 141  : }

  00183	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00187	c3		 ret	 0
partial_traverse ENDP
_TEXT	ENDS
PUBLIC	??_C@_08KDHCOJKH@?$CFs?$CI?$CFR?$CFU?$CJ?$AA@	; `string'
PUBLIC	??_C@_09PPHIFKDO@?$CFU?0?5?$CFU?$DN?$CFR?$AA@	; `string'
PUBLIC	??_C@_06LBFNHJBI@?$CFU?0?5?$CFR?$AA@		; `string'
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
EXTRN	PyDict_Next:PROC
EXTRN	PyUnicode_FromFormat:PROC
EXTRN	PyUnicode_FromString:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$partial_repr DD imagerel partial_repr
	DD	imagerel partial_repr+493
	DD	imagerel $unwind$partial_repr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$partial_repr DD 010901H
	DD	0c209H
xdata	ENDS
;	COMDAT ??_C@_08KDHCOJKH@?$CFs?$CI?$CFR?$CFU?$CJ?$AA@
CONST	SEGMENT
??_C@_08KDHCOJKH@?$CFs?$CI?$CFR?$CFU?$CJ?$AA@ DB '%s(%R%U)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09PPHIFKDO@?$CFU?0?5?$CFU?$DN?$CFR?$AA@
CONST	SEGMENT
??_C@_09PPHIFKDO@?$CFU?0?5?$CFU?$DN?$CFR?$AA@ DB '%U, %U=%R', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06LBFNHJBI@?$CFU?0?5?$CFR?$AA@
CONST	SEGMENT
??_C@_06LBFNHJBI@?$CFU?0?5?$CFR?$AA@ DB '%U, %R', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT partial_repr
_TEXT	SEGMENT
arglist$ = 32
n$ = 40
i$ = 48
tmp$ = 56
result$ = 64
value$20553 = 72
key$20552 = 80
pto$ = 112
partial_repr PROC					; COMDAT

; 165  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 166  :     PyObject *result;
; 167  :     PyObject *arglist;
; 168  :     PyObject *tmp;
; 169  :     Py_ssize_t i, n;
; 170  : 
; 171  :     arglist = PyUnicode_FromString("");

  00009	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  00010	e8 00 00 00 00	 call	 PyUnicode_FromString
  00015	48 89 44 24 20	 mov	 QWORD PTR arglist$[rsp], rax

; 172  :     if (arglist == NULL) {

  0001a	48 83 7c 24 20
	00		 cmp	 QWORD PTR arglist$[rsp], 0
  00020	75 07		 jne	 SHORT $LN9@partial_re

; 173  :         return NULL;

  00022	33 c0		 xor	 eax, eax
  00024	e9 bf 01 00 00	 jmp	 $LN10@partial_re
$LN9@partial_re:

; 174  :     }
; 175  :     /* Pack positional arguments */
; 176  :     assert (PyTuple_Check(pto->args));

  00029	48 8b 44 24 70	 mov	 rax, QWORD PTR pto$[rsp]
  0002e	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00032	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00036	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0003c	25 00 00 00 04	 and	 eax, 67108864		; 04000000H
  00041	85 c0		 test	 eax, eax
  00043	75 1c		 jne	 SHORT $LN12@partial_re
  00045	41 b8 b0 00 00
	00		 mov	 r8d, 176		; 000000b0H
  0004b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@JHGOOPPP@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAf?$AAu?$AAn?$AAc?$AAt?$AAo?$AAo?$AAl?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  00052	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DC@CLGENDCC@?$AAP?$AAy?$AAT?$AAu?$AAp?$AAl?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAp?$AAt?$AAo?$AA?9?$AA?$DO?$AAa?$AAr?$AAg?$AAs?$AA?$CJ?$AA?$AA@
  00059	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0005f	33 c0		 xor	 eax, eax
$LN12@partial_re:

; 177  :     n = PyTuple_GET_SIZE(pto->args);

  00061	48 8b 44 24 70	 mov	 rax, QWORD PTR pto$[rsp]
  00066	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0006a	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0006e	48 89 44 24 28	 mov	 QWORD PTR n$[rsp], rax

; 178  :     for (i = 0; i < n; i++) {

  00073	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  0007c	eb 0d		 jmp	 SHORT $LN8@partial_re
$LN7@partial_re:
  0007e	48 8b 44 24 30	 mov	 rax, QWORD PTR i$[rsp]
  00083	48 ff c0	 inc	 rax
  00086	48 89 44 24 30	 mov	 QWORD PTR i$[rsp], rax
$LN8@partial_re:
  0008b	48 8b 44 24 28	 mov	 rax, QWORD PTR n$[rsp]
  00090	48 39 44 24 30	 cmp	 QWORD PTR i$[rsp], rax
  00095	7d 4e		 jge	 SHORT $LN6@partial_re

; 179  :         tmp = PyUnicode_FromFormat("%U, %R", arglist,
; 180  :                                    PyTuple_GET_ITEM(pto->args, i));

  00097	48 8b 44 24 70	 mov	 rax, QWORD PTR pto$[rsp]
  0009c	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000a0	48 8b 4c 24 30	 mov	 rcx, QWORD PTR i$[rsp]
  000a5	4c 8b 44 c8 70	 mov	 r8, QWORD PTR [rax+rcx*8+112]
  000aa	48 8b 54 24 20	 mov	 rdx, QWORD PTR arglist$[rsp]
  000af	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06LBFNHJBI@?$CFU?0?5?$CFR?$AA@
  000b6	e8 00 00 00 00	 call	 PyUnicode_FromFormat
  000bb	48 89 44 24 38	 mov	 QWORD PTR tmp$[rsp], rax

; 181  :         Py_DECREF(arglist);

  000c0	48 8b 4c 24 20	 mov	 rcx, QWORD PTR arglist$[rsp]
  000c5	e8 00 00 00 00	 call	 _Py_DecRef

; 182  :         if (tmp == NULL)

  000ca	48 83 7c 24 38
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  000d0	75 07		 jne	 SHORT $LN5@partial_re

; 183  :             return NULL;

  000d2	33 c0		 xor	 eax, eax
  000d4	e9 0f 01 00 00	 jmp	 $LN10@partial_re
$LN5@partial_re:

; 184  :         arglist = tmp;

  000d9	48 8b 44 24 38	 mov	 rax, QWORD PTR tmp$[rsp]
  000de	48 89 44 24 20	 mov	 QWORD PTR arglist$[rsp], rax

; 185  :     }

  000e3	eb 99		 jmp	 SHORT $LN7@partial_re
$LN6@partial_re:

; 186  :     /* Pack keyword arguments */
; 187  :     assert (pto->kw == Py_None  ||  PyDict_Check(pto->kw));

  000e5	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000ec	48 8b 4c 24 70	 mov	 rcx, QWORD PTR pto$[rsp]
  000f1	48 39 41 70	 cmp	 QWORD PTR [rcx+112], rax
  000f5	74 38		 je	 SHORT $LN13@partial_re
  000f7	48 8b 44 24 70	 mov	 rax, QWORD PTR pto$[rsp]
  000fc	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00100	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00104	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0010a	25 00 00 00 20	 and	 eax, 536870912		; 20000000H
  0010f	85 c0		 test	 eax, eax
  00111	75 1c		 jne	 SHORT $LN13@partial_re
  00113	41 b8 bb 00 00
	00		 mov	 r8d, 187		; 000000bbH
  00119	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@JHGOOPPP@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAf?$AAu?$AAn?$AAc?$AAt?$AAo?$AAo?$AAl?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  00120	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FI@PLEENLF@?$AAp?$AAt?$AAo?$AA?9?$AA?$DO?$AAk?$AAw?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAP?$AAy?$AA_?$AAN?$AAo?$AAn?$AAe?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAP?$AAy?$AAD?$AAi?$AAc?$AAt?$AA_?$AAC?$AAh?$AAe@
  00127	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0012d	33 c0		 xor	 eax, eax
$LN13@partial_re:

; 188  :     if (pto->kw != Py_None) {

  0012f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00136	48 8b 4c 24 70	 mov	 rcx, QWORD PTR pto$[rsp]
  0013b	48 39 41 70	 cmp	 QWORD PTR [rcx+112], rax
  0013f	74 6c		 je	 SHORT $LN4@partial_re

; 189  :         PyObject *key, *value;
; 190  :         for (i = 0; PyDict_Next(pto->kw, &i, &key, &value);) {

  00141	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
$LN3@partial_re:
  0014a	4c 8d 4c 24 48	 lea	 r9, QWORD PTR value$20553[rsp]
  0014f	4c 8d 44 24 50	 lea	 r8, QWORD PTR key$20552[rsp]
  00154	48 8d 54 24 30	 lea	 rdx, QWORD PTR i$[rsp]
  00159	48 8b 44 24 70	 mov	 rax, QWORD PTR pto$[rsp]
  0015e	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  00162	e8 00 00 00 00	 call	 PyDict_Next
  00167	85 c0		 test	 eax, eax
  00169	74 42		 je	 SHORT $LN2@partial_re

; 191  :             tmp = PyUnicode_FromFormat("%U, %U=%R", arglist,
; 192  :                                        key, value);

  0016b	4c 8b 4c 24 48	 mov	 r9, QWORD PTR value$20553[rsp]
  00170	4c 8b 44 24 50	 mov	 r8, QWORD PTR key$20552[rsp]
  00175	48 8b 54 24 20	 mov	 rdx, QWORD PTR arglist$[rsp]
  0017a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09PPHIFKDO@?$CFU?0?5?$CFU?$DN?$CFR?$AA@
  00181	e8 00 00 00 00	 call	 PyUnicode_FromFormat
  00186	48 89 44 24 38	 mov	 QWORD PTR tmp$[rsp], rax

; 193  :             Py_DECREF(arglist);

  0018b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR arglist$[rsp]
  00190	e8 00 00 00 00	 call	 _Py_DecRef

; 194  :             if (tmp == NULL)

  00195	48 83 7c 24 38
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  0019b	75 04		 jne	 SHORT $LN1@partial_re

; 195  :                 return NULL;

  0019d	33 c0		 xor	 eax, eax
  0019f	eb 47		 jmp	 SHORT $LN10@partial_re
$LN1@partial_re:

; 196  :             arglist = tmp;

  001a1	48 8b 44 24 38	 mov	 rax, QWORD PTR tmp$[rsp]
  001a6	48 89 44 24 20	 mov	 QWORD PTR arglist$[rsp], rax

; 197  :         }

  001ab	eb 9d		 jmp	 SHORT $LN3@partial_re
$LN2@partial_re:
$LN4@partial_re:

; 198  :     }
; 199  :     result = PyUnicode_FromFormat("%s(%R%U)", Py_TYPE(pto)->tp_name,
; 200  :                                   pto->fn, arglist);

  001ad	48 8b 44 24 70	 mov	 rax, QWORD PTR pto$[rsp]
  001b2	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  001b6	4c 8b 4c 24 20	 mov	 r9, QWORD PTR arglist$[rsp]
  001bb	48 8b 4c 24 70	 mov	 rcx, QWORD PTR pto$[rsp]
  001c0	4c 8b 41 60	 mov	 r8, QWORD PTR [rcx+96]
  001c4	48 8b 50 70	 mov	 rdx, QWORD PTR [rax+112]
  001c8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08KDHCOJKH@?$CFs?$CI?$CFR?$CFU?$CJ?$AA@
  001cf	e8 00 00 00 00	 call	 PyUnicode_FromFormat
  001d4	48 89 44 24 40	 mov	 QWORD PTR result$[rsp], rax

; 201  :     Py_DECREF(arglist);

  001d9	48 8b 4c 24 20	 mov	 rcx, QWORD PTR arglist$[rsp]
  001de	e8 00 00 00 00	 call	 _Py_DecRef

; 202  :     return result;

  001e3	48 8b 44 24 40	 mov	 rax, QWORD PTR result$[rsp]
$LN10@partial_re:

; 203  : }

  001e8	48 83 c4 68	 add	 rsp, 104		; 00000068H
  001ec	c3		 ret	 0
partial_repr ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@EOFIEIBC@O?$CIO?$CJ?$CIOOOO?$CJ?$AA@	; `string'
EXTRN	Py_BuildValue:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$partial_reduce DD imagerel partial_reduce
	DD	imagerel partial_reduce+136
	DD	imagerel $unwind$partial_reduce
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$partial_reduce DD 010e01H
	DD	0a20eH
xdata	ENDS
;	COMDAT ??_C@_0L@EOFIEIBC@O?$CIO?$CJ?$CIOOOO?$CJ?$AA@
CONST	SEGMENT
??_C@_0L@EOFIEIBC@O?$CIO?$CJ?$CIOOOO?$CJ?$AA@ DB 'O(O)(OOOO)', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT partial_reduce
_TEXT	SEGMENT
tv68 = 64
pto$ = 96
unused$ = 104
partial_reduce PROC					; COMDAT

; 214  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 215  :     return Py_BuildValue("O(O)(OOOO)", Py_TYPE(pto), pto->fn, pto->fn,
; 216  :                          pto->args, pto->kw,
; 217  :                          pto->dict ? pto->dict : Py_None);

  0000e	48 8b 44 24 60	 mov	 rax, QWORD PTR pto$[rsp]
  00013	48 83 78 78 00	 cmp	 QWORD PTR [rax+120], 0
  00018	74 10		 je	 SHORT $LN3@partial_re@2
  0001a	48 8b 44 24 60	 mov	 rax, QWORD PTR pto$[rsp]
  0001f	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  00023	48 89 44 24 40	 mov	 QWORD PTR tv68[rsp], rax
  00028	eb 0c		 jmp	 SHORT $LN4@partial_re@2
$LN3@partial_re@2:
  0002a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00031	48 89 44 24 40	 mov	 QWORD PTR tv68[rsp], rax
$LN4@partial_re@2:
  00036	48 8b 44 24 40	 mov	 rax, QWORD PTR tv68[rsp]
  0003b	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00040	48 8b 44 24 60	 mov	 rax, QWORD PTR pto$[rsp]
  00045	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00049	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0004e	48 8b 44 24 60	 mov	 rax, QWORD PTR pto$[rsp]
  00053	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00057	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0005c	48 8b 44 24 60	 mov	 rax, QWORD PTR pto$[rsp]
  00061	4c 8b 48 60	 mov	 r9, QWORD PTR [rax+96]
  00065	48 8b 44 24 60	 mov	 rax, QWORD PTR pto$[rsp]
  0006a	4c 8b 40 60	 mov	 r8, QWORD PTR [rax+96]
  0006e	48 8b 44 24 60	 mov	 rax, QWORD PTR pto$[rsp]
  00073	48 8b 50 58	 mov	 rdx, QWORD PTR [rax+88]
  00077	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@EOFIEIBC@O?$CIO?$CJ?$CIOOOO?$CJ?$AA@
  0007e	e8 00 00 00 00	 call	 Py_BuildValue

; 218  : }

  00083	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00087	c3		 ret	 0
partial_reduce ENDP
_TEXT	ENDS
PUBLIC	??_C@_04CMCOBGCG@OOOO?$AA@			; `string'
EXTRN	PyArg_ParseTuple:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$partial_setstate DD imagerel partial_setstate
	DD	imagerel partial_setstate+349
	DD	imagerel $unwind$partial_setstate
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$partial_setstate DD 010e01H
	DD	0a20eH
xdata	ENDS
;	COMDAT ??_C@_04CMCOBGCG@OOOO?$AA@
CONST	SEGMENT
??_C@_04CMCOBGCG@OOOO?$AA@ DB 'OOOO', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT partial_setstate
_TEXT	SEGMENT
dict$ = 48
fnargs$ = 56
kw$ = 64
fn$ = 72
pto$ = 96
state$ = 104
partial_setstate PROC					; COMDAT

; 222  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 223  :     PyObject *fn, *fnargs, *kw, *dict;
; 224  :     if (!PyArg_ParseTuple(state, "OOOO",
; 225  :                           &fn, &fnargs, &kw, &dict))

  0000e	48 8d 44 24 30	 lea	 rax, QWORD PTR dict$[rsp]
  00013	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00018	48 8d 44 24 40	 lea	 rax, QWORD PTR kw$[rsp]
  0001d	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00022	4c 8d 4c 24 38	 lea	 r9, QWORD PTR fnargs$[rsp]
  00027	4c 8d 44 24 48	 lea	 r8, QWORD PTR fn$[rsp]
  0002c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04CMCOBGCG@OOOO?$AA@
  00033	48 8b 4c 24 68	 mov	 rcx, QWORD PTR state$[rsp]
  00038	e8 00 00 00 00	 call	 PyArg_ParseTuple
  0003d	85 c0		 test	 eax, eax
  0003f	75 07		 jne	 SHORT $LN19@partial_se

; 226  :         return NULL;

  00041	33 c0		 xor	 eax, eax
  00043	e9 10 01 00 00	 jmp	 $LN20@partial_se
$LN19@partial_se:
$LN18@partial_se:

; 227  :     Py_XDECREF(pto->fn);

  00048	48 8b 44 24 60	 mov	 rax, QWORD PTR pto$[rsp]
  0004d	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00052	74 0e		 je	 SHORT $LN15@partial_se
  00054	48 8b 44 24 60	 mov	 rax, QWORD PTR pto$[rsp]
  00059	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  0005d	e8 00 00 00 00	 call	 _Py_DecRef
$LN15@partial_se:
  00062	33 c0		 xor	 eax, eax
  00064	85 c0		 test	 eax, eax
  00066	75 e0		 jne	 SHORT $LN18@partial_se
$LN14@partial_se:

; 228  :     Py_XDECREF(pto->args);

  00068	48 8b 44 24 60	 mov	 rax, QWORD PTR pto$[rsp]
  0006d	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  00072	74 0e		 je	 SHORT $LN11@partial_se
  00074	48 8b 44 24 60	 mov	 rax, QWORD PTR pto$[rsp]
  00079	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  0007d	e8 00 00 00 00	 call	 _Py_DecRef
$LN11@partial_se:
  00082	33 c0		 xor	 eax, eax
  00084	85 c0		 test	 eax, eax
  00086	75 e0		 jne	 SHORT $LN14@partial_se
$LN10@partial_se:

; 229  :     Py_XDECREF(pto->kw);

  00088	48 8b 44 24 60	 mov	 rax, QWORD PTR pto$[rsp]
  0008d	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  00092	74 0e		 je	 SHORT $LN7@partial_se
  00094	48 8b 44 24 60	 mov	 rax, QWORD PTR pto$[rsp]
  00099	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  0009d	e8 00 00 00 00	 call	 _Py_DecRef
$LN7@partial_se:
  000a2	33 c0		 xor	 eax, eax
  000a4	85 c0		 test	 eax, eax
  000a6	75 e0		 jne	 SHORT $LN10@partial_se
$LN6@partial_se:

; 230  :     Py_XDECREF(pto->dict);

  000a8	48 8b 44 24 60	 mov	 rax, QWORD PTR pto$[rsp]
  000ad	48 83 78 78 00	 cmp	 QWORD PTR [rax+120], 0
  000b2	74 0e		 je	 SHORT $LN3@partial_se
  000b4	48 8b 44 24 60	 mov	 rax, QWORD PTR pto$[rsp]
  000b9	48 8b 48 78	 mov	 rcx, QWORD PTR [rax+120]
  000bd	e8 00 00 00 00	 call	 _Py_DecRef
$LN3@partial_se:
  000c2	33 c0		 xor	 eax, eax
  000c4	85 c0		 test	 eax, eax
  000c6	75 e0		 jne	 SHORT $LN6@partial_se

; 231  :     pto->fn = fn;

  000c8	48 8b 44 24 60	 mov	 rax, QWORD PTR pto$[rsp]
  000cd	48 8b 4c 24 48	 mov	 rcx, QWORD PTR fn$[rsp]
  000d2	48 89 48 60	 mov	 QWORD PTR [rax+96], rcx

; 232  :     pto->args = fnargs;

  000d6	48 8b 44 24 60	 mov	 rax, QWORD PTR pto$[rsp]
  000db	48 8b 4c 24 38	 mov	 rcx, QWORD PTR fnargs$[rsp]
  000e0	48 89 48 68	 mov	 QWORD PTR [rax+104], rcx

; 233  :     pto->kw = kw;

  000e4	48 8b 44 24 60	 mov	 rax, QWORD PTR pto$[rsp]
  000e9	48 8b 4c 24 40	 mov	 rcx, QWORD PTR kw$[rsp]
  000ee	48 89 48 70	 mov	 QWORD PTR [rax+112], rcx

; 234  :     if (dict != Py_None) {

  000f2	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000f9	48 39 44 24 30	 cmp	 QWORD PTR dict$[rsp], rax
  000fe	74 1a		 je	 SHORT $LN2@partial_se

; 235  :       pto->dict = dict;

  00100	48 8b 44 24 60	 mov	 rax, QWORD PTR pto$[rsp]
  00105	48 8b 4c 24 30	 mov	 rcx, QWORD PTR dict$[rsp]
  0010a	48 89 48 78	 mov	 QWORD PTR [rax+120], rcx

; 236  :       Py_INCREF(dict);

  0010e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR dict$[rsp]
  00113	e8 00 00 00 00	 call	 _Py_IncRef

; 237  :     } else {

  00118	eb 0d		 jmp	 SHORT $LN1@partial_se
$LN2@partial_se:

; 238  :       pto->dict = NULL;

  0011a	48 8b 44 24 60	 mov	 rax, QWORD PTR pto$[rsp]
  0011f	48 c7 40 78 00
	00 00 00	 mov	 QWORD PTR [rax+120], 0
$LN1@partial_se:

; 239  :     }
; 240  :     Py_INCREF(fn);

  00127	48 8b 4c 24 48	 mov	 rcx, QWORD PTR fn$[rsp]
  0012c	e8 00 00 00 00	 call	 _Py_IncRef

; 241  :     Py_INCREF(fnargs);

  00131	48 8b 4c 24 38	 mov	 rcx, QWORD PTR fnargs$[rsp]
  00136	e8 00 00 00 00	 call	 _Py_IncRef

; 242  :     Py_INCREF(kw);

  0013b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR kw$[rsp]
  00140	e8 00 00 00 00	 call	 _Py_IncRef

; 243  :     Py_RETURN_NONE;

  00145	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  0014c	e8 00 00 00 00	 call	 _Py_IncRef
  00151	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
$LN20@partial_se:

; 244  : }

  00158	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0015c	c3		 ret	 0
partial_setstate ENDP
_TEXT	ENDS
EXTRN	_PyObject_DebugFree:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$keyobject_dealloc DD imagerel keyobject_dealloc
	DD	imagerel keyobject_dealloc+70
	DD	imagerel $unwind$keyobject_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$keyobject_dealloc DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT keyobject_dealloc
_TEXT	SEGMENT
ko$ = 48
keyobject_dealloc PROC					; COMDAT

; 307  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 308  :     Py_DECREF(ko->cmp);

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR ko$[rsp]
  0000e	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00012	e8 00 00 00 00	 call	 _Py_DecRef
$LN4@keyobject_:

; 309  :     Py_XDECREF(ko->object);

  00017	48 8b 44 24 30	 mov	 rax, QWORD PTR ko$[rsp]
  0001c	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  00021	74 0e		 je	 SHORT $LN1@keyobject_
  00023	48 8b 44 24 30	 mov	 rax, QWORD PTR ko$[rsp]
  00028	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  0002c	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@keyobject_:
  00031	33 c0		 xor	 eax, eax
  00033	85 c0		 test	 eax, eax
  00035	75 e0		 jne	 SHORT $LN4@keyobject_

; 310  :     PyObject_FREE(ko);

  00037	48 8b 4c 24 30	 mov	 rcx, QWORD PTR ko$[rsp]
  0003c	e8 00 00 00 00	 call	 _PyObject_DebugFree

; 311  : }

  00041	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00045	c3		 ret	 0
keyobject_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BD@MGOLMAJN@keyobject_traverse?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$keyobject_traverse DD imagerel keyobject_traverse
	DD	imagerel keyobject_traverse+218
	DD	imagerel $unwind$keyobject_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$keyobject_traverse DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT ??_C@_0BD@MGOLMAJN@keyobject_traverse?$AA@
CONST	SEGMENT
??_C@_0BD@MGOLMAJN@keyobject_traverse?$AA@ DB 'keyobject_traverse', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT keyobject_traverse
_TEXT	SEGMENT
vret$20675 = 32
vret$20684 = 36
ko$ = 64
visit$ = 72
arg$ = 80
keyobject_traverse PROC					; COMDAT

; 315  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN13@keyobject_@2:

; 316  :     Py_VISIT(ko->cmp);

  00013	e8 00 00 00 00	 call	 _Py_PXCTX
  00018	85 c0		 test	 eax, eax
  0001a	74 1c		 je	 SHORT $LN10@keyobject_@2
  0001c	45 33 c9	 xor	 r9d, r9d
  0001f	41 b8 3c 01 00
	00		 mov	 r8d, 316		; 0000013cH
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BO@DDKINFCI@?4?4?2Modules?2_functoolsmodule?4c?$AA@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@MGOLMAJN@keyobject_traverse?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN10@keyobject_@2:
  00038	48 8b 44 24 40	 mov	 rax, QWORD PTR ko$[rsp]
  0003d	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00042	74 23		 je	 SHORT $LN9@keyobject_@2
  00044	48 8b 54 24 50	 mov	 rdx, QWORD PTR arg$[rsp]
  00049	48 8b 44 24 40	 mov	 rax, QWORD PTR ko$[rsp]
  0004e	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00052	ff 54 24 48	 call	 QWORD PTR visit$[rsp]
  00056	89 44 24 20	 mov	 DWORD PTR vret$20675[rsp], eax
  0005a	83 7c 24 20 00	 cmp	 DWORD PTR vret$20675[rsp], 0
  0005f	74 06		 je	 SHORT $LN8@keyobject_@2
  00061	8b 44 24 20	 mov	 eax, DWORD PTR vret$20675[rsp]
  00065	eb 6e		 jmp	 SHORT $LN14@keyobject_@2
$LN8@keyobject_@2:
$LN9@keyobject_@2:
  00067	33 c0		 xor	 eax, eax
  00069	85 c0		 test	 eax, eax
  0006b	75 a6		 jne	 SHORT $LN13@keyobject_@2

; 317  :     if (ko->object)

  0006d	48 8b 44 24 40	 mov	 rax, QWORD PTR ko$[rsp]
  00072	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  00077	74 5a		 je	 SHORT $LN7@keyobject_@2
$LN6@keyobject_@2:

; 318  :         Py_VISIT(ko->object);

  00079	e8 00 00 00 00	 call	 _Py_PXCTX
  0007e	85 c0		 test	 eax, eax
  00080	74 1c		 je	 SHORT $LN3@keyobject_@2
  00082	45 33 c9	 xor	 r9d, r9d
  00085	41 b8 3e 01 00
	00		 mov	 r8d, 318		; 0000013eH
  0008b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BO@DDKINFCI@?4?4?2Modules?2_functoolsmodule?4c?$AA@
  00092	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@MGOLMAJN@keyobject_traverse?$AA@
  00099	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@keyobject_@2:
  0009e	48 8b 44 24 40	 mov	 rax, QWORD PTR ko$[rsp]
  000a3	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  000a8	74 23		 je	 SHORT $LN2@keyobject_@2
  000aa	48 8b 54 24 50	 mov	 rdx, QWORD PTR arg$[rsp]
  000af	48 8b 44 24 40	 mov	 rax, QWORD PTR ko$[rsp]
  000b4	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  000b8	ff 54 24 48	 call	 QWORD PTR visit$[rsp]
  000bc	89 44 24 24	 mov	 DWORD PTR vret$20684[rsp], eax
  000c0	83 7c 24 24 00	 cmp	 DWORD PTR vret$20684[rsp], 0
  000c5	74 06		 je	 SHORT $LN1@keyobject_@2
  000c7	8b 44 24 24	 mov	 eax, DWORD PTR vret$20684[rsp]
  000cb	eb 08		 jmp	 SHORT $LN14@keyobject_@2
$LN1@keyobject_@2:
$LN2@keyobject_@2:
  000cd	33 c0		 xor	 eax, eax
  000cf	85 c0		 test	 eax, eax
  000d1	75 a6		 jne	 SHORT $LN6@keyobject_@2
$LN7@keyobject_@2:

; 319  :     return 0;

  000d3	33 c0		 xor	 eax, eax
$LN14@keyobject_@2:

; 320  : }

  000d5	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000d9	c3		 ret	 0
keyobject_traverse ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BA@DPCOLIDG@keyobject_clear?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$keyobject_clear DD imagerel keyobject_clear
	DD	imagerel keyobject_clear+230
	DD	imagerel $unwind$keyobject_clear
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$keyobject_clear DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0BA@DPCOLIDG@keyobject_clear?$AA@
CONST	SEGMENT
??_C@_0BA@DPCOLIDG@keyobject_clear?$AA@ DB 'keyobject_clear', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT keyobject_clear
_TEXT	SEGMENT
_py_tmp$20696 = 48
_py_tmp$20705 = 56
ko$ = 80
keyobject_clear PROC					; COMDAT

; 324  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H
$LN9@keyobject_@3:

; 325  :     Py_CLEAR(ko->cmp);

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR ko$[rsp]
  0000e	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00013	74 53		 je	 SHORT $LN6@keyobject_@3
  00015	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0001d	48 8b 44 24 50	 mov	 rax, QWORD PTR ko$[rsp]
  00022	4c 8b 48 60	 mov	 r9, QWORD PTR [rax+96]
  00026	41 b8 45 01 00
	00		 mov	 r8d, 325		; 00000145H
  0002c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BO@DDKINFCI@?4?4?2Modules?2_functoolsmodule?4c?$AA@
  00033	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@DPCOLIDG@keyobject_clear?$AA@
  0003a	e8 00 00 00 00	 call	 _PyParallel_Guard
  0003f	85 c0		 test	 eax, eax
  00041	75 25		 jne	 SHORT $LN6@keyobject_@3
  00043	48 8b 44 24 50	 mov	 rax, QWORD PTR ko$[rsp]
  00048	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0004c	48 89 44 24 30	 mov	 QWORD PTR _py_tmp$20696[rsp], rax
  00051	48 8b 44 24 50	 mov	 rax, QWORD PTR ko$[rsp]
  00056	48 c7 40 60 00
	00 00 00	 mov	 QWORD PTR [rax+96], 0
  0005e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _py_tmp$20696[rsp]
  00063	e8 00 00 00 00	 call	 _Py_DecRef
$LN6@keyobject_@3:
  00068	33 c0		 xor	 eax, eax
  0006a	85 c0		 test	 eax, eax
  0006c	75 9b		 jne	 SHORT $LN9@keyobject_@3

; 326  :     if (ko->object)

  0006e	48 8b 44 24 50	 mov	 rax, QWORD PTR ko$[rsp]
  00073	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  00078	74 65		 je	 SHORT $LN5@keyobject_@3
$LN4@keyobject_@3:

; 327  :         Py_CLEAR(ko->object);

  0007a	48 8b 44 24 50	 mov	 rax, QWORD PTR ko$[rsp]
  0007f	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  00084	74 53		 je	 SHORT $LN1@keyobject_@3
  00086	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0008e	48 8b 44 24 50	 mov	 rax, QWORD PTR ko$[rsp]
  00093	4c 8b 48 68	 mov	 r9, QWORD PTR [rax+104]
  00097	41 b8 47 01 00
	00		 mov	 r8d, 327		; 00000147H
  0009d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BO@DDKINFCI@?4?4?2Modules?2_functoolsmodule?4c?$AA@
  000a4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@DPCOLIDG@keyobject_clear?$AA@
  000ab	e8 00 00 00 00	 call	 _PyParallel_Guard
  000b0	85 c0		 test	 eax, eax
  000b2	75 25		 jne	 SHORT $LN1@keyobject_@3
  000b4	48 8b 44 24 50	 mov	 rax, QWORD PTR ko$[rsp]
  000b9	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000bd	48 89 44 24 38	 mov	 QWORD PTR _py_tmp$20705[rsp], rax
  000c2	48 8b 44 24 50	 mov	 rax, QWORD PTR ko$[rsp]
  000c7	48 c7 40 68 00
	00 00 00	 mov	 QWORD PTR [rax+104], 0
  000cf	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _py_tmp$20705[rsp]
  000d4	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@keyobject_@3:
  000d9	33 c0		 xor	 eax, eax
  000db	85 c0		 test	 eax, eax
  000dd	75 9b		 jne	 SHORT $LN4@keyobject_@3
$LN5@keyobject_@3:

; 328  :     return 0;

  000df	33 c0		 xor	 eax, eax

; 329  : }

  000e1	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e5	c3		 ret	 0
keyobject_clear ENDP
_TEXT	ENDS
PUBLIC	??_C@_03CHLNJOAA@O?3K?$AA@			; `string'
EXTRN	_PyObject_New:PROC
EXTRN	_PxObject_New:PROC
EXTRN	PyArg_ParseTupleAndKeywords:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$keyobject_call DD imagerel keyobject_call
	DD	imagerel keyobject_call+202
	DD	imagerel $unwind$keyobject_call
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$keyobject_call DD 011301H
	DD	0a213H
xdata	ENDS
;	COMDAT ??_C@_03CHLNJOAA@O?3K?$AA@
CONST	SEGMENT
??_C@_03CHLNJOAA@O?3K?$AA@ DB 'O:K', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT keyobject_call
_TEXT	SEGMENT
result$ = 48
object$ = 56
tv77 = 64
ko$ = 96
args$ = 104
kwds$ = 112
keyobject_call PROC					; COMDAT

; 380  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 381  :     PyObject *object;
; 382  :     keyobject *result;
; 383  :     static char *kwargs[] = {"obj", NULL};
; 384  : 
; 385  :     if (!PyArg_ParseTupleAndKeywords(args, kwds, "O:K", kwargs, &object))

  00013	48 8d 44 24 38	 lea	 rax, QWORD PTR object$[rsp]
  00018	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0001d	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?kwargs@?1??keyobject_call@@9@9
  00024	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03CHLNJOAA@O?3K?$AA@
  0002b	48 8b 54 24 70	 mov	 rdx, QWORD PTR kwds$[rsp]
  00030	48 8b 4c 24 68	 mov	 rcx, QWORD PTR args$[rsp]
  00035	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  0003a	85 c0		 test	 eax, eax
  0003c	75 07		 jne	 SHORT $LN2@keyobject_@4

; 386  :         return NULL;

  0003e	33 c0		 xor	 eax, eax
  00040	e9 80 00 00 00	 jmp	 $LN3@keyobject_@4
$LN2@keyobject_@4:

; 387  :     result = PyObject_New(keyobject, &keyobject_type);

  00045	e8 00 00 00 00	 call	 _Py_PXCTX
  0004a	85 c0		 test	 eax, eax
  0004c	74 13		 je	 SHORT $LN5@keyobject_@4
  0004e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:keyobject_type
  00055	e8 00 00 00 00	 call	 _PxObject_New
  0005a	48 89 44 24 40	 mov	 QWORD PTR tv77[rsp], rax
  0005f	eb 11		 jmp	 SHORT $LN6@keyobject_@4
$LN5@keyobject_@4:
  00061	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:keyobject_type
  00068	e8 00 00 00 00	 call	 _PyObject_New
  0006d	48 89 44 24 40	 mov	 QWORD PTR tv77[rsp], rax
$LN6@keyobject_@4:
  00072	48 8b 44 24 40	 mov	 rax, QWORD PTR tv77[rsp]
  00077	48 89 44 24 30	 mov	 QWORD PTR result$[rsp], rax

; 388  :     if (!result)

  0007c	48 83 7c 24 30
	00		 cmp	 QWORD PTR result$[rsp], 0
  00082	75 04		 jne	 SHORT $LN1@keyobject_@4

; 389  :         return NULL;

  00084	33 c0		 xor	 eax, eax
  00086	eb 3d		 jmp	 SHORT $LN3@keyobject_@4
$LN1@keyobject_@4:

; 390  :     Py_INCREF(ko->cmp);

  00088	48 8b 44 24 60	 mov	 rax, QWORD PTR ko$[rsp]
  0008d	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00091	e8 00 00 00 00	 call	 _Py_IncRef

; 391  :     result->cmp = ko->cmp;

  00096	48 8b 44 24 30	 mov	 rax, QWORD PTR result$[rsp]
  0009b	48 8b 4c 24 60	 mov	 rcx, QWORD PTR ko$[rsp]
  000a0	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  000a4	48 89 48 60	 mov	 QWORD PTR [rax+96], rcx

; 392  :     Py_INCREF(object);

  000a8	48 8b 4c 24 38	 mov	 rcx, QWORD PTR object$[rsp]
  000ad	e8 00 00 00 00	 call	 _Py_IncRef

; 393  :     result->object = object;

  000b2	48 8b 44 24 30	 mov	 rax, QWORD PTR result$[rsp]
  000b7	48 8b 4c 24 38	 mov	 rcx, QWORD PTR object$[rsp]
  000bc	48 89 48 68	 mov	 QWORD PTR [rax+104], rcx

; 394  :     return (PyObject *)result;

  000c0	48 8b 44 24 30	 mov	 rax, QWORD PTR result$[rsp]
$LN3@keyobject_@4:

; 395  : }

  000c5	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000c9	c3		 ret	 0
keyobject_call ENDP
_TEXT	ENDS
PUBLIC	??_C@_06IEOJBDIK@object?$AA@			; `string'
PUBLIC	??_C@_1CA@OIBGFNKD@?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ ; `string'
PUBLIC	??_C@_0CC@KMPGJAKF@other?5argument?5must?5be?5K?5instanc@ ; `string'
EXTRN	PyObject_RichCompare:PROC
EXTRN	PyTuple_New:PROC
EXTRN	PyExc_AttributeError:QWORD
EXTRN	PyErr_Format:PROC
EXTRN	PyLong_FromLong:PROC
_BSS	SEGMENT
?zero@?1??keyobject_richcompare@@9@9 DQ 01H DUP (?)	; `keyobject_richcompare'::`2'::zero
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$keyobject_richcompare DD imagerel keyobject_richcompare
	DD	imagerel keyobject_richcompare+394
	DD	imagerel $unwind$keyobject_richcompare
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$keyobject_richcompare DD 011301H
	DD	0a213H
xdata	ENDS
;	COMDAT ??_C@_06IEOJBDIK@object?$AA@
CONST	SEGMENT
??_C@_06IEOJBDIK@object?$AA@ DB 'object', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1CA@OIBGFNKD@?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
CONST	SEGMENT
??_C@_1CA@OIBGFNKD@?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ DB 'c'
	DB	00H, 'o', 00H, 'm', 00H, 'p', 00H, 'a', 00H, 'r', 00H, 'e', 00H
	DB	' ', 00H, '!', 00H, '=', 00H, ' ', 00H, 'N', 00H, 'U', 00H, 'L'
	DB	00H, 'L', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@KMPGJAKF@other?5argument?5must?5be?5K?5instanc@
CONST	SEGMENT
??_C@_0CC@KMPGJAKF@other?5argument?5must?5be?5K?5instanc@ DB 'other argum'
	DB	'ent must be K instance', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT keyobject_richcompare
_TEXT	SEGMENT
args$ = 32
res$ = 40
y$ = 48
x$ = 56
answer$ = 64
compare$ = 72
ko$ = 96
other$ = 104
op$ = 112
keyobject_richcompare PROC				; COMDAT

; 399  : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 400  :     PyObject *res;
; 401  :     PyObject *args;
; 402  :     PyObject *x;
; 403  :     PyObject *y;
; 404  :     PyObject *compare;
; 405  :     PyObject *answer;
; 406  :     static PyObject *zero;
; 407  : 
; 408  :     if (zero == NULL) {

  00013	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?zero@?1??keyobject_richcompare@@9@9, 0
  0001b	75 1f		 jne	 SHORT $LN7@keyobject_@5

; 409  :         zero = PyLong_FromLong(0);

  0001d	33 c9		 xor	 ecx, ecx
  0001f	e8 00 00 00 00	 call	 PyLong_FromLong
  00024	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?zero@?1??keyobject_richcompare@@9@9, rax

; 410  :         if (!zero)

  0002b	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?zero@?1??keyobject_richcompare@@9@9, 0
  00033	75 07		 jne	 SHORT $LN6@keyobject_@5

; 411  :             return NULL;

  00035	33 c0		 xor	 eax, eax
  00037	e9 49 01 00 00	 jmp	 $LN8@keyobject_@5
$LN6@keyobject_@5:
$LN7@keyobject_@5:

; 412  :     }
; 413  : 
; 414  :     if (Py_TYPE(other) != &keyobject_type){

  0003c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:keyobject_type
  00043	48 8b 4c 24 68	 mov	 rcx, QWORD PTR other$[rsp]
  00048	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0004c	74 1a		 je	 SHORT $LN5@keyobject_@5

; 415  :         PyErr_Format(PyExc_TypeError, "other argument must be K instance");

  0004e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CC@KMPGJAKF@other?5argument?5must?5be?5K?5instanc@
  00055	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0005c	e8 00 00 00 00	 call	 PyErr_Format

; 416  :         return NULL;

  00061	33 c0		 xor	 eax, eax
  00063	e9 1d 01 00 00	 jmp	 $LN8@keyobject_@5
$LN5@keyobject_@5:

; 417  :     }
; 418  :     compare = ((keyobject *) ko)->cmp;

  00068	48 8b 44 24 60	 mov	 rax, QWORD PTR ko$[rsp]
  0006d	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00071	48 89 44 24 48	 mov	 QWORD PTR compare$[rsp], rax

; 419  :     assert(compare != NULL);

  00076	48 83 7c 24 48
	00		 cmp	 QWORD PTR compare$[rsp], 0
  0007c	75 1c		 jne	 SHORT $LN10@keyobject_@5
  0007e	41 b8 a3 01 00
	00		 mov	 r8d, 419		; 000001a3H
  00084	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@JHGOOPPP@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAf?$AAu?$AAn?$AAc?$AAt?$AAo?$AAo?$AAl?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  0008b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CA@OIBGFNKD@?$AAc?$AAo?$AAm?$AAp?$AAa?$AAr?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
  00092	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00098	33 c0		 xor	 eax, eax
$LN10@keyobject_@5:

; 420  :     x = ((keyobject *) ko)->object;

  0009a	48 8b 44 24 60	 mov	 rax, QWORD PTR ko$[rsp]
  0009f	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000a3	48 89 44 24 38	 mov	 QWORD PTR x$[rsp], rax

; 421  :     y = ((keyobject *) other)->object;

  000a8	48 8b 44 24 68	 mov	 rax, QWORD PTR other$[rsp]
  000ad	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000b1	48 89 44 24 30	 mov	 QWORD PTR y$[rsp], rax

; 422  :     if (!x || !y){

  000b6	48 83 7c 24 38
	00		 cmp	 QWORD PTR x$[rsp], 0
  000bc	74 08		 je	 SHORT $LN3@keyobject_@5
  000be	48 83 7c 24 30
	00		 cmp	 QWORD PTR y$[rsp], 0
  000c4	75 1a		 jne	 SHORT $LN4@keyobject_@5
$LN3@keyobject_@5:

; 423  :         PyErr_Format(PyExc_AttributeError, "object");

  000c6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06IEOJBDIK@object?$AA@
  000cd	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_AttributeError
  000d4	e8 00 00 00 00	 call	 PyErr_Format

; 424  :         return NULL;

  000d9	33 c0		 xor	 eax, eax
  000db	e9 a5 00 00 00	 jmp	 $LN8@keyobject_@5
$LN4@keyobject_@5:

; 425  :     }
; 426  : 
; 427  :     /* Call the user's comparison function and translate the 3-way
; 428  :      * result into true or false (or error).
; 429  :      */
; 430  :     args = PyTuple_New(2);

  000e0	b9 02 00 00 00	 mov	 ecx, 2
  000e5	e8 00 00 00 00	 call	 PyTuple_New
  000ea	48 89 44 24 20	 mov	 QWORD PTR args$[rsp], rax

; 431  :     if (args == NULL)

  000ef	48 83 7c 24 20
	00		 cmp	 QWORD PTR args$[rsp], 0
  000f5	75 07		 jne	 SHORT $LN2@keyobject_@5

; 432  :         return NULL;

  000f7	33 c0		 xor	 eax, eax
  000f9	e9 87 00 00 00	 jmp	 $LN8@keyobject_@5
$LN2@keyobject_@5:

; 433  :     Py_INCREF(x);

  000fe	48 8b 4c 24 38	 mov	 rcx, QWORD PTR x$[rsp]
  00103	e8 00 00 00 00	 call	 _Py_IncRef

; 434  :     Py_INCREF(y);

  00108	48 8b 4c 24 30	 mov	 rcx, QWORD PTR y$[rsp]
  0010d	e8 00 00 00 00	 call	 _Py_IncRef

; 435  :     PyTuple_SET_ITEM(args, 0, x);

  00112	48 8b 44 24 20	 mov	 rax, QWORD PTR args$[rsp]
  00117	48 8b 4c 24 38	 mov	 rcx, QWORD PTR x$[rsp]
  0011c	48 89 48 70	 mov	 QWORD PTR [rax+112], rcx

; 436  :     PyTuple_SET_ITEM(args, 1, y);

  00120	48 8b 44 24 20	 mov	 rax, QWORD PTR args$[rsp]
  00125	48 8b 4c 24 30	 mov	 rcx, QWORD PTR y$[rsp]
  0012a	48 89 48 78	 mov	 QWORD PTR [rax+120], rcx

; 437  :     res = PyObject_Call(compare, args, NULL);

  0012e	45 33 c0	 xor	 r8d, r8d
  00131	48 8b 54 24 20	 mov	 rdx, QWORD PTR args$[rsp]
  00136	48 8b 4c 24 48	 mov	 rcx, QWORD PTR compare$[rsp]
  0013b	e8 00 00 00 00	 call	 PyObject_Call
  00140	48 89 44 24 28	 mov	 QWORD PTR res$[rsp], rax

; 438  :     Py_DECREF(args);

  00145	48 8b 4c 24 20	 mov	 rcx, QWORD PTR args$[rsp]
  0014a	e8 00 00 00 00	 call	 _Py_DecRef

; 439  :     if (res == NULL)

  0014f	48 83 7c 24 28
	00		 cmp	 QWORD PTR res$[rsp], 0
  00155	75 04		 jne	 SHORT $LN1@keyobject_@5

; 440  :         return NULL;

  00157	33 c0		 xor	 eax, eax
  00159	eb 2a		 jmp	 SHORT $LN8@keyobject_@5
$LN1@keyobject_@5:

; 441  :     answer = PyObject_RichCompare(res, zero, op);

  0015b	44 8b 44 24 70	 mov	 r8d, DWORD PTR op$[rsp]
  00160	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR ?zero@?1??keyobject_richcompare@@9@9
  00167	48 8b 4c 24 28	 mov	 rcx, QWORD PTR res$[rsp]
  0016c	e8 00 00 00 00	 call	 PyObject_RichCompare
  00171	48 89 44 24 40	 mov	 QWORD PTR answer$[rsp], rax

; 442  :     Py_DECREF(res);

  00176	48 8b 4c 24 28	 mov	 rcx, QWORD PTR res$[rsp]
  0017b	e8 00 00 00 00	 call	 _Py_DecRef

; 443  :     return answer;

  00180	48 8b 44 24 40	 mov	 rax, QWORD PTR answer$[rsp]
$LN8@keyobject_@5:

; 444  : }

  00185	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00189	c3		 ret	 0
keyobject_richcompare ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@COCNEBL@O?3cmp_to_key?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$functools_cmp_to_key DD imagerel functools_cmp_to_key
	DD	imagerel functools_cmp_to_key+180
	DD	imagerel $unwind$functools_cmp_to_key
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$functools_cmp_to_key DD 011301H
	DD	0a213H
xdata	ENDS
;	COMDAT ??_C@_0N@COCNEBL@O?3cmp_to_key?$AA@
CONST	SEGMENT
??_C@_0N@COCNEBL@O?3cmp_to_key?$AA@ DB 'O:cmp_to_key', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT functools_cmp_to_key
_TEXT	SEGMENT
object$ = 48
cmp$ = 56
tv77 = 64
self$ = 96
args$ = 104
kwds$ = 112
functools_cmp_to_key PROC				; COMDAT

; 448  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 449  :     PyObject *cmp;
; 450  :     static char *kwargs[] = {"mycmp", NULL};
; 451  :     keyobject *object;
; 452  : 
; 453  :     if (!PyArg_ParseTupleAndKeywords(args, kwds, "O:cmp_to_key", kwargs, &cmp))

  00013	48 8d 44 24 38	 lea	 rax, QWORD PTR cmp$[rsp]
  00018	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0001d	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?kwargs@?1??functools_cmp_to_key@@9@9
  00024	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0N@COCNEBL@O?3cmp_to_key?$AA@
  0002b	48 8b 54 24 70	 mov	 rdx, QWORD PTR kwds$[rsp]
  00030	48 8b 4c 24 68	 mov	 rcx, QWORD PTR args$[rsp]
  00035	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  0003a	85 c0		 test	 eax, eax
  0003c	75 04		 jne	 SHORT $LN2@functools_

; 454  :         return NULL;

  0003e	33 c0		 xor	 eax, eax
  00040	eb 6d		 jmp	 SHORT $LN3@functools_
$LN2@functools_:

; 455  :     object = PyObject_New(keyobject, &keyobject_type);

  00042	e8 00 00 00 00	 call	 _Py_PXCTX
  00047	85 c0		 test	 eax, eax
  00049	74 13		 je	 SHORT $LN5@functools_
  0004b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:keyobject_type
  00052	e8 00 00 00 00	 call	 _PxObject_New
  00057	48 89 44 24 40	 mov	 QWORD PTR tv77[rsp], rax
  0005c	eb 11		 jmp	 SHORT $LN6@functools_
$LN5@functools_:
  0005e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:keyobject_type
  00065	e8 00 00 00 00	 call	 _PyObject_New
  0006a	48 89 44 24 40	 mov	 QWORD PTR tv77[rsp], rax
$LN6@functools_:
  0006f	48 8b 44 24 40	 mov	 rax, QWORD PTR tv77[rsp]
  00074	48 89 44 24 30	 mov	 QWORD PTR object$[rsp], rax

; 456  :     if (!object)

  00079	48 83 7c 24 30
	00		 cmp	 QWORD PTR object$[rsp], 0
  0007f	75 04		 jne	 SHORT $LN1@functools_

; 457  :         return NULL;

  00081	33 c0		 xor	 eax, eax
  00083	eb 2a		 jmp	 SHORT $LN3@functools_
$LN1@functools_:

; 458  :     Py_INCREF(cmp);

  00085	48 8b 4c 24 38	 mov	 rcx, QWORD PTR cmp$[rsp]
  0008a	e8 00 00 00 00	 call	 _Py_IncRef

; 459  :     object->cmp = cmp;

  0008f	48 8b 44 24 30	 mov	 rax, QWORD PTR object$[rsp]
  00094	48 8b 4c 24 38	 mov	 rcx, QWORD PTR cmp$[rsp]
  00099	48 89 48 60	 mov	 QWORD PTR [rax+96], rcx

; 460  :     object->object = NULL;

  0009d	48 8b 44 24 30	 mov	 rax, QWORD PTR object$[rsp]
  000a2	48 c7 40 68 00
	00 00 00	 mov	 QWORD PTR [rax+104], 0

; 461  :     return (PyObject *)object;

  000aa	48 8b 44 24 30	 mov	 rax, QWORD PTR object$[rsp]
$LN3@functools_:

; 462  : }

  000af	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000b3	c3		 ret	 0
functools_cmp_to_key ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DB@PFCNGPHO@reduce?$CI?$CJ?5of?5empty?5sequence?5with?5@ ; `string'
PUBLIC	??_C@_0CG@LHIMEKHE@reduce?$CI?$CJ?5arg?52?5must?5support?5iter@ ; `string'
EXTRN	PyEval_CallObjectWithKeywords:PROC
EXTRN	PyTuple_SetItem:PROC
EXTRN	PyErr_Occurred:PROC
EXTRN	PyIter_Next:PROC
EXTRN	PyErr_ExceptionMatches:PROC
EXTRN	PyObject_GetIter:PROC
EXTRN	PyArg_UnpackTuple:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$functools_reduce DD imagerel functools_reduce
	DD	imagerel functools_reduce+571
	DD	imagerel $unwind$functools_reduce
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$functools_reduce DD 010e01H
	DD	0e20eH
xdata	ENDS
;	COMDAT ??_C@_0DB@PFCNGPHO@reduce?$CI?$CJ?5of?5empty?5sequence?5with?5@
CONST	SEGMENT
??_C@_0DB@PFCNGPHO@reduce?$CI?$CJ?5of?5empty?5sequence?5with?5@ DB 'reduc'
	DB	'e() of empty sequence with no initial value', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@LHIMEKHE@reduce?$CI?$CJ?5arg?52?5must?5support?5iter@
CONST	SEGMENT
??_C@_0CG@LHIMEKHE@reduce?$CI?$CJ?5arg?52?5must?5support?5iter@ DB 'reduc'
	DB	'e() arg 2 must support iteration', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT functools_reduce
_TEXT	SEGMENT
it$ = 64
seq$ = 72
result$ = 80
func$ = 88
op2$20875 = 96
self$ = 128
args$ = 136
functools_reduce PROC					; COMDAT

; 471  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 472  :     PyObject *seq, *func, *result = NULL, *it;

  0000e	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR result$[rsp], 0

; 473  : 
; 474  :     if (!PyArg_UnpackTuple(args, "reduce", 2, 3, &func, &seq, &result))

  00017	48 8d 44 24 50	 lea	 rax, QWORD PTR result$[rsp]
  0001c	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00021	48 8d 44 24 48	 lea	 rax, QWORD PTR seq$[rsp]
  00026	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0002b	48 8d 44 24 58	 lea	 rax, QWORD PTR func$[rsp]
  00030	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00035	41 b9 03 00 00
	00		 mov	 r9d, 3
  0003b	41 b8 02 00 00
	00		 mov	 r8d, 2
  00041	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06CDBFBENC@reduce?$AA@
  00048	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  00050	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00055	85 c0		 test	 eax, eax
  00057	75 07		 jne	 SHORT $LN27@functools_@2

; 475  :         return NULL;

  00059	33 c0		 xor	 eax, eax
  0005b	e9 d6 01 00 00	 jmp	 $LN28@functools_@2
$LN27@functools_@2:

; 476  :     if (result != NULL)

  00060	48 83 7c 24 50
	00		 cmp	 QWORD PTR result$[rsp], 0
  00066	74 0a		 je	 SHORT $LN26@functools_@2

; 477  :         Py_INCREF(result);

  00068	48 8b 4c 24 50	 mov	 rcx, QWORD PTR result$[rsp]
  0006d	e8 00 00 00 00	 call	 _Py_IncRef
$LN26@functools_@2:

; 478  : 
; 479  :     it = PyObject_GetIter(seq);

  00072	48 8b 4c 24 48	 mov	 rcx, QWORD PTR seq$[rsp]
  00077	e8 00 00 00 00	 call	 PyObject_GetIter
  0007c	48 89 44 24 40	 mov	 QWORD PTR it$[rsp], rax

; 480  :     if (it == NULL) {

  00081	48 83 7c 24 40
	00		 cmp	 QWORD PTR it$[rsp], 0
  00087	75 42		 jne	 SHORT $LN25@functools_@2

; 481  :         if (PyErr_ExceptionMatches(PyExc_TypeError))

  00089	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00090	e8 00 00 00 00	 call	 PyErr_ExceptionMatches
  00095	85 c0		 test	 eax, eax
  00097	74 13		 je	 SHORT $LN24@functools_@2

; 482  :             PyErr_SetString(PyExc_TypeError,
; 483  :                             "reduce() arg 2 must support iteration");

  00099	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@LHIMEKHE@reduce?$CI?$CJ?5arg?52?5must?5support?5iter@
  000a0	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000a7	e8 00 00 00 00	 call	 PyErr_SetString
$LN24@functools_@2:
$LN23@functools_@2:

; 484  :         Py_XDECREF(result);

  000ac	48 83 7c 24 50
	00		 cmp	 QWORD PTR result$[rsp], 0
  000b2	74 0a		 je	 SHORT $LN20@functools_@2
  000b4	48 8b 4c 24 50	 mov	 rcx, QWORD PTR result$[rsp]
  000b9	e8 00 00 00 00	 call	 _Py_DecRef
$LN20@functools_@2:
  000be	33 c0		 xor	 eax, eax
  000c0	85 c0		 test	 eax, eax
  000c2	75 e8		 jne	 SHORT $LN23@functools_@2

; 485  :         return NULL;

  000c4	33 c0		 xor	 eax, eax
  000c6	e9 6b 01 00 00	 jmp	 $LN28@functools_@2
$LN25@functools_@2:

; 486  :     }
; 487  : 
; 488  :     if ((args = PyTuple_New(2)) == NULL)

  000cb	b9 02 00 00 00	 mov	 ecx, 2
  000d0	e8 00 00 00 00	 call	 PyTuple_New
  000d5	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR args$[rsp], rax
  000dd	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR args$[rsp], 0
  000e6	75 05		 jne	 SHORT $LN19@functools_@2

; 489  :         goto Fail;

  000e8	e9 07 01 00 00	 jmp	 $Fail$20871
$LN19@functools_@2:
$LN18@functools_@2:

; 490  : 
; 491  :     for (;;) {
; 492  :         PyObject *op2;
; 493  : 
; 494  :         if (args->ob_refcnt > 1) {

  000ed	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR args$[rsp]
  000f5	48 83 78 50 01	 cmp	 QWORD PTR [rax+80], 1
  000fa	7e 2f		 jle	 SHORT $LN16@functools_@2

; 495  :             Py_DECREF(args);

  000fc	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  00104	e8 00 00 00 00	 call	 _Py_DecRef

; 496  :             if ((args = PyTuple_New(2)) == NULL)

  00109	b9 02 00 00 00	 mov	 ecx, 2
  0010e	e8 00 00 00 00	 call	 PyTuple_New
  00113	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR args$[rsp], rax
  0011b	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR args$[rsp], 0
  00124	75 05		 jne	 SHORT $LN15@functools_@2

; 497  :                 goto Fail;

  00126	e9 c9 00 00 00	 jmp	 $Fail$20871
$LN15@functools_@2:
$LN16@functools_@2:

; 498  :         }
; 499  : 
; 500  :         op2 = PyIter_Next(it);

  0012b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR it$[rsp]
  00130	e8 00 00 00 00	 call	 PyIter_Next
  00135	48 89 44 24 60	 mov	 QWORD PTR op2$20875[rsp], rax

; 501  :         if (op2 == NULL) {

  0013a	48 83 7c 24 60
	00		 cmp	 QWORD PTR op2$20875[rsp], 0
  00140	75 11		 jne	 SHORT $LN14@functools_@2

; 502  :             if (PyErr_Occurred())

  00142	e8 00 00 00 00	 call	 PyErr_Occurred
  00147	48 85 c0	 test	 rax, rax
  0014a	74 05		 je	 SHORT $LN13@functools_@2

; 503  :                 goto Fail;

  0014c	e9 a3 00 00 00	 jmp	 $Fail$20871
$LN13@functools_@2:

; 504  :             break;

  00151	eb 68		 jmp	 SHORT $LN17@functools_@2
$LN14@functools_@2:

; 505  :         }
; 506  : 
; 507  :         if (result == NULL)

  00153	48 83 7c 24 50
	00		 cmp	 QWORD PTR result$[rsp], 0
  00159	75 0c		 jne	 SHORT $LN12@functools_@2

; 508  :             result = op2;

  0015b	48 8b 44 24 60	 mov	 rax, QWORD PTR op2$20875[rsp]
  00160	48 89 44 24 50	 mov	 QWORD PTR result$[rsp], rax

; 509  :         else {

  00165	eb 4f		 jmp	 SHORT $LN11@functools_@2
$LN12@functools_@2:

; 510  :             PyTuple_SetItem(args, 0, result);

  00167	4c 8b 44 24 50	 mov	 r8, QWORD PTR result$[rsp]
  0016c	33 d2		 xor	 edx, edx
  0016e	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  00176	e8 00 00 00 00	 call	 PyTuple_SetItem

; 511  :             PyTuple_SetItem(args, 1, op2);

  0017b	4c 8b 44 24 60	 mov	 r8, QWORD PTR op2$20875[rsp]
  00180	ba 01 00 00 00	 mov	 edx, 1
  00185	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  0018d	e8 00 00 00 00	 call	 PyTuple_SetItem

; 512  :             if ((result = PyEval_CallObject(func, args)) == NULL)

  00192	45 33 c0	 xor	 r8d, r8d
  00195	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR args$[rsp]
  0019d	48 8b 4c 24 58	 mov	 rcx, QWORD PTR func$[rsp]
  001a2	e8 00 00 00 00	 call	 PyEval_CallObjectWithKeywords
  001a7	48 89 44 24 50	 mov	 QWORD PTR result$[rsp], rax
  001ac	48 83 7c 24 50
	00		 cmp	 QWORD PTR result$[rsp], 0
  001b2	75 02		 jne	 SHORT $LN10@functools_@2

; 513  :                 goto Fail;

  001b4	eb 3e		 jmp	 SHORT $Fail$20871
$LN10@functools_@2:
$LN11@functools_@2:

; 514  :         }
; 515  :     }

  001b6	e9 32 ff ff ff	 jmp	 $LN18@functools_@2
$LN17@functools_@2:

; 516  : 
; 517  :     Py_DECREF(args);

  001bb	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  001c3	e8 00 00 00 00	 call	 _Py_DecRef

; 518  : 
; 519  :     if (result == NULL)

  001c8	48 83 7c 24 50
	00		 cmp	 QWORD PTR result$[rsp], 0
  001ce	75 13		 jne	 SHORT $LN9@functools_@2

; 520  :         PyErr_SetString(PyExc_TypeError,
; 521  :                    "reduce() of empty sequence with no initial value");

  001d0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DB@PFCNGPHO@reduce?$CI?$CJ?5of?5empty?5sequence?5with?5@
  001d7	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  001de	e8 00 00 00 00	 call	 PyErr_SetString
$LN9@functools_@2:

; 522  : 
; 523  :     Py_DECREF(it);

  001e3	48 8b 4c 24 40	 mov	 rcx, QWORD PTR it$[rsp]
  001e8	e8 00 00 00 00	 call	 _Py_DecRef

; 524  :     return result;

  001ed	48 8b 44 24 50	 mov	 rax, QWORD PTR result$[rsp]
  001f2	eb 42		 jmp	 SHORT $LN28@functools_@2
$Fail$20871:
$LN8@functools_@2:

; 525  : 
; 526  : Fail:
; 527  :     Py_XDECREF(args);

  001f4	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR args$[rsp], 0
  001fd	74 0d		 je	 SHORT $LN5@functools_@2
  001ff	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  00207	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@functools_@2:
  0020c	33 c0		 xor	 eax, eax
  0020e	85 c0		 test	 eax, eax
  00210	75 e2		 jne	 SHORT $LN8@functools_@2
$LN4@functools_@2:

; 528  :     Py_XDECREF(result);

  00212	48 83 7c 24 50
	00		 cmp	 QWORD PTR result$[rsp], 0
  00218	74 0a		 je	 SHORT $LN1@functools_@2
  0021a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR result$[rsp]
  0021f	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@functools_@2:
  00224	33 c0		 xor	 eax, eax
  00226	85 c0		 test	 eax, eax
  00228	75 e8		 jne	 SHORT $LN4@functools_@2

; 529  :     Py_DECREF(it);

  0022a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR it$[rsp]
  0022f	e8 00 00 00 00	 call	 _Py_DecRef

; 530  :     return NULL;

  00234	33 c0		 xor	 eax, eax
$LN28@functools_@2:

; 531  : }

  00236	48 83 c4 78	 add	 rsp, 120		; 00000078H
  0023a	c3		 ret	 0
functools_reduce ENDP
_TEXT	ENDS
PUBLIC	??_C@_1BK@EILABNJE@?$AAn?$AAa?$AAm?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ ; `string'
PUBLIC	PyInit__functools
EXTRN	PyModule_AddObject:PROC
EXTRN	__imp_strchr:PROC
EXTRN	PyType_Ready:PROC
EXTRN	PyModule_Create2TraceRefs:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyInit__functools DD imagerel $LN9
	DD	imagerel $LN9+259
	DD	imagerel $unwind$PyInit__functools
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyInit__functools DD 010401H
	DD	0a204H
xdata	ENDS
;	COMDAT ??_C@_1BK@EILABNJE@?$AAn?$AAa?$AAm?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
CONST	SEGMENT
??_C@_1BK@EILABNJE@?$AAn?$AAa?$AAm?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@ DB 'n'
	DB	00H, 'a', 00H, 'm', 00H, 'e', 00H, ' ', 00H, '!', 00H, '=', 00H
	DB	' ', 00H, 'N', 00H, 'U', 00H, 'L', 00H, 'L', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyInit__functools
_TEXT	SEGMENT
i$ = 32
name$ = 40
typelist$ = 48
m$ = 64
PyInit__functools PROC					; COMDAT

; 570  : {

$LN9:
  00000	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 571  :     int i;
; 572  :     PyObject *m;
; 573  :     char *name;
; 574  :     PyTypeObject *typelist[] = {
; 575  :         &partial_type,

  00004	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:partial_type
  0000b	48 89 44 24 30	 mov	 QWORD PTR typelist$[rsp], rax

; 576  :         NULL
; 577  :     };

  00010	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR typelist$[rsp+8], 0

; 578  : 
; 579  :     m = PyModule_Create(&_functoolsmodule);

  00019	ba f5 03 00 00	 mov	 edx, 1013		; 000003f5H
  0001e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_functoolsmodule
  00025	e8 00 00 00 00	 call	 PyModule_Create2TraceRefs
  0002a	48 89 44 24 40	 mov	 QWORD PTR m$[rsp], rax

; 580  :     if (m == NULL)

  0002f	48 83 7c 24 40
	00		 cmp	 QWORD PTR m$[rsp], 0
  00035	75 07		 jne	 SHORT $LN5@PyInit__fu

; 581  :         return NULL;

  00037	33 c0		 xor	 eax, eax
  00039	e9 c0 00 00 00	 jmp	 $LN6@PyInit__fu
$LN5@PyInit__fu:

; 582  : 
; 583  :     for (i=0 ; typelist[i] != NULL ; i++) {

  0003e	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00046	eb 0a		 jmp	 SHORT $LN4@PyInit__fu
$LN3@PyInit__fu:
  00048	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  0004c	ff c0		 inc	 eax
  0004e	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN4@PyInit__fu:
  00052	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  00057	48 83 7c c4 30
	00		 cmp	 QWORD PTR typelist$[rsp+rax*8], 0
  0005d	0f 84 96 00 00
	00		 je	 $LN2@PyInit__fu

; 584  :         if (PyType_Ready(typelist[i]) < 0) {

  00063	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  00068	48 8b 4c c4 30	 mov	 rcx, QWORD PTR typelist$[rsp+rax*8]
  0006d	e8 00 00 00 00	 call	 PyType_Ready
  00072	85 c0		 test	 eax, eax
  00074	7d 0e		 jge	 SHORT $LN1@PyInit__fu

; 585  :             Py_DECREF(m);

  00076	48 8b 4c 24 40	 mov	 rcx, QWORD PTR m$[rsp]
  0007b	e8 00 00 00 00	 call	 _Py_DecRef

; 586  :             return NULL;

  00080	33 c0		 xor	 eax, eax
  00082	eb 7a		 jmp	 SHORT $LN6@PyInit__fu
$LN1@PyInit__fu:

; 587  :         }
; 588  :         name = strchr(typelist[i]->tp_name, '.');

  00084	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  00089	48 8b 44 c4 30	 mov	 rax, QWORD PTR typelist$[rsp+rax*8]
  0008e	ba 2e 00 00 00	 mov	 edx, 46			; 0000002eH
  00093	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  00097	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strchr
  0009d	48 89 44 24 28	 mov	 QWORD PTR name$[rsp], rax

; 589  :         assert (name != NULL);

  000a2	48 83 7c 24 28
	00		 cmp	 QWORD PTR name$[rsp], 0
  000a8	75 1c		 jne	 SHORT $LN8@PyInit__fu
  000aa	41 b8 4d 02 00
	00		 mov	 r8d, 589		; 0000024dH
  000b0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DM@JHGOOPPP@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAf?$AAu?$AAn?$AAc?$AAt?$AAo?$AAo?$AAl?$AAs?$AAm?$AAo?$AAd?$AAu?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  000b7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BK@EILABNJE@?$AAn?$AAa?$AAm?$AAe?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AAN?$AAU?$AAL?$AAL?$AA?$AA@
  000be	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000c4	33 c0		 xor	 eax, eax
$LN8@PyInit__fu:

; 590  :         Py_INCREF(typelist[i]);

  000c6	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  000cb	48 8b 4c c4 30	 mov	 rcx, QWORD PTR typelist$[rsp+rax*8]
  000d0	e8 00 00 00 00	 call	 _Py_IncRef

; 591  :         PyModule_AddObject(m, name+1, (PyObject *)typelist[i]);

  000d5	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  000da	48 8b 4c 24 28	 mov	 rcx, QWORD PTR name$[rsp]
  000df	48 ff c1	 inc	 rcx
  000e2	4c 8b 44 c4 30	 mov	 r8, QWORD PTR typelist$[rsp+rax*8]
  000e7	48 8b d1	 mov	 rdx, rcx
  000ea	48 8b 4c 24 40	 mov	 rcx, QWORD PTR m$[rsp]
  000ef	e8 00 00 00 00	 call	 PyModule_AddObject

; 592  :     }

  000f4	e9 4f ff ff ff	 jmp	 $LN3@PyInit__fu
$LN2@PyInit__fu:

; 593  :     return m;

  000f9	48 8b 44 24 40	 mov	 rax, QWORD PTR m$[rsp]
$LN6@PyInit__fu:

; 594  : }

  000fe	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00102	c3		 ret	 0
PyInit__functools ENDP
_TEXT	ENDS
END
