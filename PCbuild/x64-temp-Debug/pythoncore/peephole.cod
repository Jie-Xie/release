; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	_Py_IncRef
PUBLIC	??_C@_1CI@OBLJDBIG@?$AAh?$AA?5?$AA?$CL?$AA?5?$AAn?$AAo?$AAp?$AAs?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAc?$AAo?$AAd?$AAe?$AAl?$AAe?$AAn?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DG@OHHDBJEH@?$AAn?$AAe?$AAw?$AA_?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?9?$AA?5?$AAl?$AAa?$AAs?$AAt?$AA_?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$DM?$AA?5?$AA2?$AA5?$AA5?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DC@OFPLFCED@?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAs?$AAt?$AAa?$AAc?$AAk?$AA_?$AAt?$AAo?$AAp?$AA?5?$AA?$CL?$AA?5?$AA1?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA1?$AA?$AA@ ; `string'
PUBLIC	??_C@_1EE@NMGMKFOO@?$AA?$CI?$AAh?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAC?$AAO?$AAN?$AAS?$AAT?$AA_?$AAS?$AAT?$AAA?$AAC?$AAK?$AA_?$AAL?$AAE?$AAN?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DM?$AA?5?$AA1@ ; `string'
PUBLIC	??_C@_1DC@PHEOPNKN@?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAs?$AAt?$AAa?$AAc?$AAk?$AA_?$AAt?$AAo?$AAp?$AA?5?$AA?$CL?$AA?5?$AA1?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA2?$AA?$AA@ ; `string'
PUBLIC	??_C@_1EE@FKPINHEA@?$AA?$CI?$AAh?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAC?$AAO?$AAN?$AAS?$AAT?$AA_?$AAS?$AAT?$AAA?$AAC?$AAK?$AA_?$AAL?$AAE?$AAN?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DM?$AA?5?$AA2@ ; `string'
PUBLIC	??_C@_1DC@PJPHNKOA@?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAs?$AAt?$AAa?$AAc?$AAk?$AA_?$AAt?$AAo?$AAp?$AA?5?$AA?$CL?$AA?5?$AA1?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAj?$AA?$AA@ ; `string'
PUBLIC	??_C@_1EE@LKCFFNNK@?$AA?$CI?$AAh?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAC?$AAO?$AAN?$AAS?$AAT?$AA_?$AAS?$AAT?$AAA?$AAC?$AAK?$AA_?$AAL?$AAE?$AAN?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DM?$AA?5?$AAj@ ; `string'
PUBLIC	??_C@_1FK@DMFJGOAB@?$AAP?$AAy?$AAL?$AAi?$AAs?$AAt?$AA_?$AAG?$AAE?$AAT?$AA_?$AAS?$AAI?$AAZ?$AAE?$AA?$CI?$AAc?$AAo?$AAn?$AAs?$AAt?$AAs?$AA?$CJ?$AA?5?$AA?$DO?$AA?5?$AAG?$AAE?$AAT?$AAA?$AAR?$AAG@ ; `string'
PUBLIC	??_C@_1DC@LKIFDDKK@?$AAc?$AAo?$AAd?$AAe?$AAs?$AAt?$AAr?$AA?$FL?$AAi?$AA?$FN?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAL?$AAO?$AAA?$AAD?$AA_?$AAC?$AAO?$AAN?$AAS?$AAT?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CK@PKPHJMMI@?$AAP?$AAy?$AAL?$AAi?$AAs?$AAt?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAc?$AAo?$AAn?$AAs?$AAt?$AAs?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CI@OLGCACGK@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAc?$AAo?$AAd?$AAe?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DE@LANPMDDK@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAl?$AAi?$AAn?$AAe?$AAn?$AAo?$AA_?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CK@KIMKCIEN@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAe?$AAe?$AAp?$AAh?$AAo?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@ ; `string'
PUBLIC	PyCode_Optimize
EXTRN	PyMem_Free:PROC
EXTRN	PyBytes_FromStringAndSize:PROC
EXTRN	memset:PROC
EXTRN	PyObject_IsTrue:PROC
EXTRN	PyMem_Realloc:PROC
EXTRN	PyUnicode_AsUTF8:PROC
EXTRN	__ImageBase:BYTE
EXTRN	PyErr_NoMemory:PROC
EXTRN	memcpy:PROC
EXTRN	PyMem_Malloc:PROC
EXTRN	__imp_memchr:PROC
EXTRN	__imp__wassert:PROC
EXTRN	PyErr_Occurred:PROC
;	COMDAT pdata
; File c:\src\pyparallel\python\peephole.c
pdata	SEGMENT
$pdata$PyCode_Optimize DD imagerel $LN239
	DD	imagerel $LN239+10563
	DD	imagerel $unwind$PyCode_Optimize
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyCode_Optimize DD 021b01H
	DD	035011bH
xdata	ENDS
;	COMDAT ??_C@_1CI@OBLJDBIG@?$AAh?$AA?5?$AA?$CL?$AA?5?$AAn?$AAo?$AAp?$AAs?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAc?$AAo?$AAd?$AAe?$AAl?$AAe?$AAn?$AA?$AA@
CONST	SEGMENT
??_C@_1CI@OBLJDBIG@?$AAh?$AA?5?$AA?$CL?$AA?5?$AAn?$AAo?$AAp?$AAs?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAc?$AAo?$AAd?$AAe?$AAl?$AAe?$AAn?$AA?$AA@ DB 'h'
	DB	00H, ' ', 00H, '+', 00H, ' ', 00H, 'n', 00H, 'o', 00H, 'p', 00H
	DB	's', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'c', 00H, 'o'
	DB	00H, 'd', 00H, 'e', 00H, 'l', 00H, 'e', 00H, 'n', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DG@OHHDBJEH@?$AAn?$AAe?$AAw?$AA_?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?9?$AA?5?$AAl?$AAa?$AAs?$AAt?$AA_?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$DM?$AA?5?$AA2?$AA5?$AA5?$AA?$AA@
CONST	SEGMENT
??_C@_1DG@OHHDBJEH@?$AAn?$AAe?$AAw?$AA_?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?9?$AA?5?$AAl?$AAa?$AAs?$AAt?$AA_?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$DM?$AA?5?$AA2?$AA5?$AA5?$AA?$AA@ DB 'n'
	DB	00H, 'e', 00H, 'w', 00H, '_', 00H, 'l', 00H, 'i', 00H, 'n', 00H
	DB	'e', 00H, ' ', 00H, '-', 00H, ' ', 00H, 'l', 00H, 'a', 00H, 's'
	DB	00H, 't', 00H, '_', 00H, 'l', 00H, 'i', 00H, 'n', 00H, 'e', 00H
	DB	' ', 00H, '<', 00H, ' ', 00H, '2', 00H, '5', 00H, '5', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1DC@OFPLFCED@?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAs?$AAt?$AAa?$AAc?$AAk?$AA_?$AAt?$AAo?$AAp?$AA?5?$AA?$CL?$AA?5?$AA1?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA1?$AA?$AA@
CONST	SEGMENT
??_C@_1DC@OFPLFCED@?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAs?$AAt?$AAa?$AAc?$AAk?$AA_?$AAt?$AAo?$AAp?$AA?5?$AA?$CL?$AA?5?$AA1?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA1?$AA?$AA@ DB 'c'
	DB	00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H, '_', 00H, 's', 00H
	DB	't', 00H, 'a', 00H, 'c', 00H, 'k', 00H, '_', 00H, 't', 00H, 'o'
	DB	00H, 'p', 00H, ' ', 00H, '+', 00H, ' ', 00H, '1', 00H, ' ', 00H
	DB	'>', 00H, '=', 00H, ' ', 00H, '1', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EE@NMGMKFOO@?$AA?$CI?$AAh?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAC?$AAO?$AAN?$AAS?$AAT?$AA_?$AAS?$AAT?$AAA?$AAC?$AAK?$AA_?$AAL?$AAE?$AAN?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DM?$AA?5?$AA1@
CONST	SEGMENT
??_C@_1EE@NMGMKFOO@?$AA?$CI?$AAh?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAC?$AAO?$AAN?$AAS?$AAT?$AA_?$AAS?$AAT?$AAA?$AAC?$AAK?$AA_?$AAL?$AAE?$AAN?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DM?$AA?5?$AA1@ DB '('
	DB	00H, 'h', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H
	DB	' ', 00H, '|', 00H, '|', 00H, ' ', 00H, 'C', 00H, 'O', 00H, 'N'
	DB	00H, 'S', 00H, 'T', 00H, '_', 00H, 'S', 00H, 'T', 00H, 'A', 00H
	DB	'C', 00H, 'K', 00H, '_', 00H, 'L', 00H, 'E', 00H, 'N', 00H, '('
	DB	00H, ')', 00H, ' ', 00H, '<', 00H, ' ', 00H, '1', 00H, ')', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1DC@PHEOPNKN@?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAs?$AAt?$AAa?$AAc?$AAk?$AA_?$AAt?$AAo?$AAp?$AA?5?$AA?$CL?$AA?5?$AA1?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA2?$AA?$AA@
CONST	SEGMENT
??_C@_1DC@PHEOPNKN@?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAs?$AAt?$AAa?$AAc?$AAk?$AA_?$AAt?$AAo?$AAp?$AA?5?$AA?$CL?$AA?5?$AA1?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA2?$AA?$AA@ DB 'c'
	DB	00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H, '_', 00H, 's', 00H
	DB	't', 00H, 'a', 00H, 'c', 00H, 'k', 00H, '_', 00H, 't', 00H, 'o'
	DB	00H, 'p', 00H, ' ', 00H, '+', 00H, ' ', 00H, '1', 00H, ' ', 00H
	DB	'>', 00H, '=', 00H, ' ', 00H, '2', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EE@FKPINHEA@?$AA?$CI?$AAh?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAC?$AAO?$AAN?$AAS?$AAT?$AA_?$AAS?$AAT?$AAA?$AAC?$AAK?$AA_?$AAL?$AAE?$AAN?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DM?$AA?5?$AA2@
CONST	SEGMENT
??_C@_1EE@FKPINHEA@?$AA?$CI?$AAh?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAC?$AAO?$AAN?$AAS?$AAT?$AA_?$AAS?$AAT?$AAA?$AAC?$AAK?$AA_?$AAL?$AAE?$AAN?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DM?$AA?5?$AA2@ DB '('
	DB	00H, 'h', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H
	DB	' ', 00H, '|', 00H, '|', 00H, ' ', 00H, 'C', 00H, 'O', 00H, 'N'
	DB	00H, 'S', 00H, 'T', 00H, '_', 00H, 'S', 00H, 'T', 00H, 'A', 00H
	DB	'C', 00H, 'K', 00H, '_', 00H, 'L', 00H, 'E', 00H, 'N', 00H, '('
	DB	00H, ')', 00H, ' ', 00H, '<', 00H, ' ', 00H, '2', 00H, ')', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1DC@PJPHNKOA@?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAs?$AAt?$AAa?$AAc?$AAk?$AA_?$AAt?$AAo?$AAp?$AA?5?$AA?$CL?$AA?5?$AA1?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAj?$AA?$AA@
CONST	SEGMENT
??_C@_1DC@PJPHNKOA@?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAs?$AAt?$AAa?$AAc?$AAk?$AA_?$AAt?$AAo?$AAp?$AA?5?$AA?$CL?$AA?5?$AA1?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAj?$AA?$AA@ DB 'c'
	DB	00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H, '_', 00H, 's', 00H
	DB	't', 00H, 'a', 00H, 'c', 00H, 'k', 00H, '_', 00H, 't', 00H, 'o'
	DB	00H, 'p', 00H, ' ', 00H, '+', 00H, ' ', 00H, '1', 00H, ' ', 00H
	DB	'>', 00H, '=', 00H, ' ', 00H, 'j', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1EE@LKCFFNNK@?$AA?$CI?$AAh?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAC?$AAO?$AAN?$AAS?$AAT?$AA_?$AAS?$AAT?$AAA?$AAC?$AAK?$AA_?$AAL?$AAE?$AAN?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DM?$AA?5?$AAj@
CONST	SEGMENT
??_C@_1EE@LKCFFNNK@?$AA?$CI?$AAh?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAC?$AAO?$AAN?$AAS?$AAT?$AA_?$AAS?$AAT?$AAA?$AAC?$AAK?$AA_?$AAL?$AAE?$AAN?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DM?$AA?5?$AAj@ DB '('
	DB	00H, 'h', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, '0', 00H
	DB	' ', 00H, '|', 00H, '|', 00H, ' ', 00H, 'C', 00H, 'O', 00H, 'N'
	DB	00H, 'S', 00H, 'T', 00H, '_', 00H, 'S', 00H, 'T', 00H, 'A', 00H
	DB	'C', 00H, 'K', 00H, '_', 00H, 'L', 00H, 'E', 00H, 'N', 00H, '('
	DB	00H, ')', 00H, ' ', 00H, '<', 00H, ' ', 00H, 'j', 00H, ')', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1FK@DMFJGOAB@?$AAP?$AAy?$AAL?$AAi?$AAs?$AAt?$AA_?$AAG?$AAE?$AAT?$AA_?$AAS?$AAI?$AAZ?$AAE?$AA?$CI?$AAc?$AAo?$AAn?$AAs?$AAt?$AAs?$AA?$CJ?$AA?5?$AA?$DO?$AA?5?$AAG?$AAE?$AAT?$AAA?$AAR?$AAG@
CONST	SEGMENT
??_C@_1FK@DMFJGOAB@?$AAP?$AAy?$AAL?$AAi?$AAs?$AAt?$AA_?$AAG?$AAE?$AAT?$AA_?$AAS?$AAI?$AAZ?$AAE?$AA?$CI?$AAc?$AAo?$AAn?$AAs?$AAt?$AAs?$AA?$CJ?$AA?5?$AA?$DO?$AA?5?$AAG?$AAE?$AAT?$AAA?$AAR?$AAG@ DB 'P'
	DB	00H, 'y', 00H, 'L', 00H, 'i', 00H, 's', 00H, 't', 00H, '_', 00H
	DB	'G', 00H, 'E', 00H, 'T', 00H, '_', 00H, 'S', 00H, 'I', 00H, 'Z'
	DB	00H, 'E', 00H, '(', 00H, 'c', 00H, 'o', 00H, 'n', 00H, 's', 00H
	DB	't', 00H, 's', 00H, ')', 00H, ' ', 00H, '>', 00H, ' ', 00H, 'G'
	DB	00H, 'E', 00H, 'T', 00H, 'A', 00H, 'R', 00H, 'G', 00H, '(', 00H
	DB	'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 's', 00H, 't', 00H, 'r'
	DB	00H, ',', 00H, ' ', 00H, 'i', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DC@LKIFDDKK@?$AAc?$AAo?$AAd?$AAe?$AAs?$AAt?$AAr?$AA?$FL?$AAi?$AA?$FN?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAL?$AAO?$AAA?$AAD?$AA_?$AAC?$AAO?$AAN?$AAS?$AAT?$AA?$AA@
CONST	SEGMENT
??_C@_1DC@LKIFDDKK@?$AAc?$AAo?$AAd?$AAe?$AAs?$AAt?$AAr?$AA?$FL?$AAi?$AA?$FN?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAL?$AAO?$AAA?$AAD?$AA_?$AAC?$AAO?$AAN?$AAS?$AAT?$AA?$AA@ DB 'c'
	DB	00H, 'o', 00H, 'd', 00H, 'e', 00H, 's', 00H, 't', 00H, 'r', 00H
	DB	'[', 00H, 'i', 00H, ']', 00H, ' ', 00H, '=', 00H, '=', 00H, ' '
	DB	00H, 'L', 00H, 'O', 00H, 'A', 00H, 'D', 00H, '_', 00H, 'C', 00H
	DB	'O', 00H, 'N', 00H, 'S', 00H, 'T', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@PKPHJMMI@?$AAP?$AAy?$AAL?$AAi?$AAs?$AAt?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAc?$AAo?$AAn?$AAs?$AAt?$AAs?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CK@PKPHJMMI@?$AAP?$AAy?$AAL?$AAi?$AAs?$AAt?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAc?$AAo?$AAn?$AAs?$AAt?$AAs?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'L', 00H, 'i', 00H, 's', 00H, 't', 00H, '_', 00H
	DB	'C', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, '(', 00H, 'c'
	DB	00H, 'o', 00H, 'n', 00H, 's', 00H, 't', 00H, 's', 00H, ')', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1CI@OLGCACGK@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAc?$AAo?$AAd?$AAe?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CI@OLGCACGK@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAc?$AAo?$AAd?$AAe?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 's', 00H
	DB	'_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, '('
	DB	00H, 'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DE@LANPMDDK@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAl?$AAi?$AAn?$AAe?$AAn?$AAo?$AA_?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DE@LANPMDDK@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAl?$AAi?$AAn?$AAe?$AAn?$AAo?$AA_?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 's', 00H
	DB	'_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, '('
	DB	00H, 'l', 00H, 'i', 00H, 'n', 00H, 'e', 00H, 'n', 00H, 'o', 00H
	DB	'_', 00H, 'o', 00H, 'b', 00H, 'j', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@KIMKCIEN@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAe?$AAe?$AAp?$AAh?$AAo?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
CONST	SEGMENT
??_C@_1CK@KIMKCIEN@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAe?$AAe?$AAp?$AAh?$AAo?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@ DB '.'
	DB	00H, '.', 00H, '\', 00H, 'P', 00H, 'y', 00H, 't', 00H, 'h', 00H
	DB	'o', 00H, 'n', 00H, '\', 00H, 'p', 00H, 'e', 00H, 'e', 00H, 'p'
	DB	00H, 'h', 00H, 'o', 00H, 'l', 00H, 'e', 00H, '.', 00H, 'c', 00H
	DB	00H, 00H					; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyCode_Optimize
_TEXT	SEGMENT
opcode$ = 32
adj$ = 36
h$ = 40
const_stack_size$ = 48
addrmap$ = 56
lineno$ = 64
i$ = 72
last_line$ = 80
tgt$ = 84
nops$ = 88
name$ = 96
tabsiz$ = 104
blocks$ = 112
tgttgt$ = 120
const_stack_top$ = 128
cum_orig_line$ = 136
codestr$ = 144
load_const_stack$ = 152
in_consts$ = 160
codelen$ = 168
const_stack$ = 176
new_line$ = 184
j$ = 192
_x$21950 = 200
_x$21980 = 208
_x$22032 = 216
_x$22083 = 224
_x$22120 = 232
tv188 = 240
tv193 = 248
tv199 = 256
tv207 = 260
tv338 = 264
tv344 = 272
tv394 = 280
tv400 = 288
tv455 = 296
tv596 = 304
tv602 = 312
tv662 = 320
tv759 = 328
tv765 = 336
tv778 = 344
tv867 = 352
tv873 = 360
tv909 = 368
tv924 = 376
tv923 = 380
tv961 = 384
tv1014 = 392
tv1072 = 400
tv1143 = 404
tv1177 = 408
tv1260 = 412
code$ = 432
consts$ = 440
names$ = 448
lineno_obj$ = 456
PyCode_Optimize PROC					; COMDAT

; 381  : {

$LN239:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec a8 01
	00 00		 sub	 rsp, 424		; 000001a8H

; 382  :     Py_ssize_t i, j, codelen;
; 383  :     int nops, h, adj;
; 384  :     int tgt, tgttgt, opcode;
; 385  :     unsigned char *codestr = NULL;

  0001b	48 c7 84 24 90
	00 00 00 00 00
	00 00		 mov	 QWORD PTR codestr$[rsp], 0

; 386  :     unsigned char *lineno;
; 387  :     int *addrmap = NULL;

  00027	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR addrmap$[rsp], 0

; 388  :     int new_line, cum_orig_line, last_line, tabsiz;
; 389  :     PyObject **const_stack = NULL;

  00030	48 c7 84 24 b0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR const_stack$[rsp], 0

; 390  :     Py_ssize_t *load_const_stack = NULL;

  0003c	48 c7 84 24 98
	00 00 00 00 00
	00 00		 mov	 QWORD PTR load_const_stack$[rsp], 0

; 391  :     Py_ssize_t const_stack_top = -1;

  00048	48 c7 84 24 80
	00 00 00 ff ff
	ff ff		 mov	 QWORD PTR const_stack_top$[rsp], -1

; 392  :     Py_ssize_t const_stack_size = 0;

  00054	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR const_stack_size$[rsp], 0

; 393  :     int in_consts = 0;  /* whether we are in a LOAD_CONST sequence */

  0005d	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR in_consts$[rsp], 0

; 394  :     unsigned int *blocks = NULL;

  00068	48 c7 44 24 70
	00 00 00 00	 mov	 QWORD PTR blocks$[rsp], 0

; 395  :     char *name;
; 396  : 
; 397  :     /* Bail out if an exception is set */
; 398  :     if (PyErr_Occurred())

  00071	e8 00 00 00 00	 call	 PyErr_Occurred
  00076	48 85 c0	 test	 rax, rax
  00079	74 05		 je	 SHORT $LN153@PyCode_Opt

; 399  :         goto exitError;

  0007b	e9 c5 26 00 00	 jmp	 $exitError$21867
$LN153@PyCode_Opt:

; 400  : 
; 401  :     /* Bypass optimization when the lineno table is too complex */
; 402  :     assert(PyBytes_Check(lineno_obj));

  00080	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR lineno_obj$[rsp]
  00088	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0008c	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00092	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  00097	85 c0		 test	 eax, eax
  00099	75 1c		 jne	 SHORT $LN156@PyCode_Opt
  0009b	41 b8 92 01 00
	00		 mov	 r8d, 402		; 00000192H
  000a1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CK@KIMKCIEN@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAe?$AAe?$AAp?$AAh?$AAo?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  000a8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@LANPMDDK@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAl?$AAi?$AAn?$AAe?$AAn?$AAo?$AA_?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@
  000af	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000b5	33 c0		 xor	 eax, eax
$LN156@PyCode_Opt:

; 403  :     lineno = (unsigned char*)PyBytes_AS_STRING(lineno_obj);

  000b7	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR lineno_obj$[rsp]
  000bf	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000c3	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000c9	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  000ce	85 c0		 test	 eax, eax
  000d0	75 1c		 jne	 SHORT $LN157@PyCode_Opt
  000d2	41 b8 93 01 00
	00		 mov	 r8d, 403		; 00000193H
  000d8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CK@KIMKCIEN@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAe?$AAe?$AAp?$AAh?$AAo?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  000df	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@LANPMDDK@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAl?$AAi?$AAn?$AAe?$AAn?$AAo?$AA_?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@
  000e6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000ec	33 c0		 xor	 eax, eax
$LN157@PyCode_Opt:
  000ee	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR lineno_obj$[rsp]
  000f6	48 83 c0 78	 add	 rax, 120		; 00000078H
  000fa	48 89 44 24 40	 mov	 QWORD PTR lineno$[rsp], rax

; 404  :     tabsiz = PyBytes_GET_SIZE(lineno_obj);

  000ff	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR lineno_obj$[rsp]
  00107	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0010b	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00111	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  00116	85 c0		 test	 eax, eax
  00118	75 1c		 jne	 SHORT $LN158@PyCode_Opt
  0011a	41 b8 94 01 00
	00		 mov	 r8d, 404		; 00000194H
  00120	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CK@KIMKCIEN@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAe?$AAe?$AAp?$AAh?$AAo?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  00127	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@LANPMDDK@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAl?$AAi?$AAn?$AAe?$AAn?$AAo?$AA_?$AAo?$AAb?$AAj?$AA?$CJ?$AA?$AA@
  0012e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00134	33 c0		 xor	 eax, eax
$LN158@PyCode_Opt:
  00136	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR lineno_obj$[rsp]
  0013e	8b 40 60	 mov	 eax, DWORD PTR [rax+96]
  00141	89 44 24 68	 mov	 DWORD PTR tabsiz$[rsp], eax

; 405  :     if (memchr(lineno, 255, tabsiz) != NULL)

  00145	48 63 44 24 68	 movsxd	 rax, DWORD PTR tabsiz$[rsp]
  0014a	4c 8b c0	 mov	 r8, rax
  0014d	ba ff 00 00 00	 mov	 edx, 255		; 000000ffH
  00152	48 8b 4c 24 40	 mov	 rcx, QWORD PTR lineno$[rsp]
  00157	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_memchr
  0015d	48 85 c0	 test	 rax, rax
  00160	74 05		 je	 SHORT $LN152@PyCode_Opt

; 406  :         goto exitUnchanged;

  00162	e9 ea 25 00 00	 jmp	 $exitUnchanged$21880
$LN152@PyCode_Opt:

; 407  : 
; 408  :     /* Avoid situations where jump retargeting could overflow */
; 409  :     assert(PyBytes_Check(code));

  00167	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR code$[rsp]
  0016f	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00173	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00179	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  0017e	85 c0		 test	 eax, eax
  00180	75 1c		 jne	 SHORT $LN159@PyCode_Opt
  00182	41 b8 99 01 00
	00		 mov	 r8d, 409		; 00000199H
  00188	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CK@KIMKCIEN@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAe?$AAe?$AAp?$AAh?$AAo?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  0018f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CI@OLGCACGK@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAc?$AAo?$AAd?$AAe?$AA?$CJ?$AA?$AA@
  00196	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0019c	33 c0		 xor	 eax, eax
$LN159@PyCode_Opt:

; 410  :     codelen = PyBytes_GET_SIZE(code);

  0019e	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR code$[rsp]
  001a6	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  001aa	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  001b0	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  001b5	85 c0		 test	 eax, eax
  001b7	75 1c		 jne	 SHORT $LN160@PyCode_Opt
  001b9	41 b8 9a 01 00
	00		 mov	 r8d, 410		; 0000019aH
  001bf	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CK@KIMKCIEN@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAe?$AAe?$AAp?$AAh?$AAo?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  001c6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CI@OLGCACGK@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAc?$AAo?$AAd?$AAe?$AA?$CJ?$AA?$AA@
  001cd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001d3	33 c0		 xor	 eax, eax
$LN160@PyCode_Opt:
  001d5	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR code$[rsp]
  001dd	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  001e1	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR codelen$[rsp], rax

; 411  :     if (codelen > 32700)

  001e9	48 81 bc 24 a8
	00 00 00 bc 7f
	00 00		 cmp	 QWORD PTR codelen$[rsp], 32700 ; 00007fbcH
  001f5	7e 05		 jle	 SHORT $LN151@PyCode_Opt

; 412  :         goto exitUnchanged;

  001f7	e9 55 25 00 00	 jmp	 $exitUnchanged$21880
$LN151@PyCode_Opt:

; 413  : 
; 414  :     /* Make a modifiable copy of the code string */
; 415  :     codestr = (unsigned char *)PyMem_Malloc(codelen);

  001fc	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR codelen$[rsp]
  00204	e8 00 00 00 00	 call	 PyMem_Malloc
  00209	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR codestr$[rsp], rax

; 416  :     if (codestr == NULL)

  00211	48 83 bc 24 90
	00 00 00 00	 cmp	 QWORD PTR codestr$[rsp], 0
  0021a	75 05		 jne	 SHORT $LN150@PyCode_Opt

; 417  :         goto exitError;

  0021c	e9 24 25 00 00	 jmp	 $exitError$21867
$LN150@PyCode_Opt:

; 418  :     codestr = (unsigned char *)memcpy(codestr,
; 419  :                                       PyBytes_AS_STRING(code), codelen);

  00221	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR code$[rsp]
  00229	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0022d	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00233	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  00238	85 c0		 test	 eax, eax
  0023a	75 1c		 jne	 SHORT $LN161@PyCode_Opt
  0023c	41 b8 a3 01 00
	00		 mov	 r8d, 419		; 000001a3H
  00242	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CK@KIMKCIEN@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAe?$AAe?$AAp?$AAh?$AAo?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  00249	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CI@OLGCACGK@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAc?$AAo?$AAd?$AAe?$AA?$CJ?$AA?$AA@
  00250	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00256	33 c0		 xor	 eax, eax
$LN161@PyCode_Opt:
  00258	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR code$[rsp]
  00260	48 83 c0 78	 add	 rax, 120		; 00000078H
  00264	4c 8b 84 24 a8
	00 00 00	 mov	 r8, QWORD PTR codelen$[rsp]
  0026c	48 8b d0	 mov	 rdx, rax
  0026f	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR codestr$[rsp]
  00277	e8 00 00 00 00	 call	 memcpy
  0027c	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR codestr$[rsp], rax

; 420  : 
; 421  :     /* Verify that RETURN_VALUE terminates the codestring.      This allows
; 422  :        the various transformation patterns to look ahead several
; 423  :        instructions without additional checks to make sure they are not
; 424  :        looking beyond the end of the code string.
; 425  :     */
; 426  :     if (codestr[codelen-1] != RETURN_VALUE)

  00284	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR codelen$[rsp]
  0028c	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR codestr$[rsp]
  00294	48 03 c8	 add	 rcx, rax
  00297	48 8b c1	 mov	 rax, rcx
  0029a	0f b6 40 ff	 movzx	 eax, BYTE PTR [rax-1]
  0029e	83 f8 53	 cmp	 eax, 83			; 00000053H
  002a1	74 05		 je	 SHORT $LN149@PyCode_Opt

; 427  :         goto exitUnchanged;

  002a3	e9 a9 24 00 00	 jmp	 $exitUnchanged$21880
$LN149@PyCode_Opt:

; 428  : 
; 429  :     /* Mapping to new jump targets after NOPs are removed */
; 430  :     addrmap = (int *)PyMem_Malloc(codelen * sizeof(int));

  002a8	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR codelen$[rsp]
  002b0	48 c1 e0 02	 shl	 rax, 2
  002b4	48 8b c8	 mov	 rcx, rax
  002b7	e8 00 00 00 00	 call	 PyMem_Malloc
  002bc	48 89 44 24 38	 mov	 QWORD PTR addrmap$[rsp], rax

; 431  :     if (addrmap == NULL)

  002c1	48 83 7c 24 38
	00		 cmp	 QWORD PTR addrmap$[rsp], 0
  002c7	75 05		 jne	 SHORT $LN148@PyCode_Opt

; 432  :         goto exitError;

  002c9	e9 77 24 00 00	 jmp	 $exitError$21867
$LN148@PyCode_Opt:

; 433  : 
; 434  :     blocks = markblocks(codestr, codelen);

  002ce	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR codelen$[rsp]
  002d6	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR codestr$[rsp]
  002de	e8 00 00 00 00	 call	 markblocks
  002e3	48 89 44 24 70	 mov	 QWORD PTR blocks$[rsp], rax

; 435  :     if (blocks == NULL)

  002e8	48 83 7c 24 70
	00		 cmp	 QWORD PTR blocks$[rsp], 0
  002ee	75 05		 jne	 SHORT $LN147@PyCode_Opt

; 436  :         goto exitError;

  002f0	e9 50 24 00 00	 jmp	 $exitError$21867
$LN147@PyCode_Opt:

; 437  :     assert(PyList_Check(consts));

  002f5	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR consts$[rsp]
  002fd	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00301	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00307	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  0030c	85 c0		 test	 eax, eax
  0030e	75 1c		 jne	 SHORT $LN162@PyCode_Opt
  00310	41 b8 b5 01 00
	00		 mov	 r8d, 437		; 000001b5H
  00316	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CK@KIMKCIEN@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAe?$AAe?$AAp?$AAh?$AAo?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  0031d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CK@PKPHJMMI@?$AAP?$AAy?$AAL?$AAi?$AAs?$AAt?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAc?$AAo?$AAn?$AAs?$AAt?$AAs?$AA?$CJ?$AA?$AA@
  00324	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0032a	33 c0		 xor	 eax, eax
$LN162@PyCode_Opt:

; 438  : 
; 439  :     CONST_STACK_CREATE();

  0032c	48 c7 44 24 30
	00 01 00 00	 mov	 QWORD PTR const_stack_size$[rsp], 256 ; 00000100H
  00335	48 b8 ff ff ff
	ff ff ff ff 0f	 mov	 rax, 1152921504606846975 ; 0fffffffffffffffH
  0033f	48 39 44 24 30	 cmp	 QWORD PTR const_stack_size$[rsp], rax
  00344	76 0e		 jbe	 SHORT $LN163@PyCode_Opt
  00346	48 c7 84 24 f0
	00 00 00 00 00
	00 00		 mov	 QWORD PTR tv188[rsp], 0
  00352	eb 19		 jmp	 SHORT $LN164@PyCode_Opt
$LN163@PyCode_Opt:
  00354	48 8b 44 24 30	 mov	 rax, QWORD PTR const_stack_size$[rsp]
  00359	48 c1 e0 03	 shl	 rax, 3
  0035d	48 8b c8	 mov	 rcx, rax
  00360	e8 00 00 00 00	 call	 PyMem_Malloc
  00365	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR tv188[rsp], rax
$LN164@PyCode_Opt:
  0036d	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR tv188[rsp]
  00375	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR const_stack$[rsp], rax
  0037d	48 b8 ff ff ff
	ff ff ff ff 0f	 mov	 rax, 1152921504606846975 ; 0fffffffffffffffH
  00387	48 39 44 24 30	 cmp	 QWORD PTR const_stack_size$[rsp], rax
  0038c	76 0e		 jbe	 SHORT $LN165@PyCode_Opt
  0038e	48 c7 84 24 f8
	00 00 00 00 00
	00 00		 mov	 QWORD PTR tv193[rsp], 0
  0039a	eb 19		 jmp	 SHORT $LN166@PyCode_Opt
$LN165@PyCode_Opt:
  0039c	48 8b 44 24 30	 mov	 rax, QWORD PTR const_stack_size$[rsp]
  003a1	48 c1 e0 03	 shl	 rax, 3
  003a5	48 8b c8	 mov	 rcx, rax
  003a8	e8 00 00 00 00	 call	 PyMem_Malloc
  003ad	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR tv193[rsp], rax
$LN166@PyCode_Opt:
  003b5	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR tv193[rsp]
  003bd	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR load_const_stack$[rsp], rax
  003c5	48 83 bc 24 b0
	00 00 00 00	 cmp	 QWORD PTR const_stack$[rsp], 0
  003ce	74 0b		 je	 SHORT $LN145@PyCode_Opt
  003d0	48 83 bc 24 98
	00 00 00 00	 cmp	 QWORD PTR load_const_stack$[rsp], 0
  003d9	75 0a		 jne	 SHORT $LN146@PyCode_Opt
$LN145@PyCode_Opt:
  003db	e8 00 00 00 00	 call	 PyErr_NoMemory
  003e0	e9 60 23 00 00	 jmp	 $exitError$21867
$LN146@PyCode_Opt:

; 440  : 
; 441  :     for (i=0 ; i<codelen ; i += CODESIZE(codestr[i])) {

  003e5	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  003ee	eb 4b		 jmp	 SHORT $LN144@PyCode_Opt
$LN143@PyCode_Opt:
  003f0	48 8b 44 24 48	 mov	 rax, QWORD PTR i$[rsp]
  003f5	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR codestr$[rsp]
  003fd	48 03 c8	 add	 rcx, rax
  00400	48 8b c1	 mov	 rax, rcx
  00403	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00406	83 f8 5a	 cmp	 eax, 90			; 0000005aH
  00409	7c 0d		 jl	 SHORT $LN167@PyCode_Opt
  0040b	c7 84 24 00 01
	00 00 03 00 00
	00		 mov	 DWORD PTR tv199[rsp], 3
  00416	eb 0b		 jmp	 SHORT $LN168@PyCode_Opt
$LN167@PyCode_Opt:
  00418	c7 84 24 00 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv199[rsp], 1
$LN168@PyCode_Opt:
  00423	48 63 84 24 00
	01 00 00	 movsxd	 rax, DWORD PTR tv199[rsp]
  0042b	48 8b 4c 24 48	 mov	 rcx, QWORD PTR i$[rsp]
  00430	48 03 c8	 add	 rcx, rax
  00433	48 8b c1	 mov	 rax, rcx
  00436	48 89 44 24 48	 mov	 QWORD PTR i$[rsp], rax
$LN144@PyCode_Opt:
  0043b	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR codelen$[rsp]
  00443	48 39 44 24 48	 cmp	 QWORD PTR i$[rsp], rax
  00448	0f 8d 5c 1e 00
	00		 jge	 $LN142@PyCode_Opt
$LN233@PyCode_Opt:
$LN232@PyCode_Opt:
$reoptimize_current$21924:

; 442  :       reoptimize_current:
; 443  :         opcode = codestr[i];

  0044e	48 8b 44 24 48	 mov	 rax, QWORD PTR i$[rsp]
  00453	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR codestr$[rsp]
  0045b	48 03 c8	 add	 rcx, rax
  0045e	48 8b c1	 mov	 rax, rcx
  00461	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00464	89 44 24 20	 mov	 DWORD PTR opcode$[rsp], eax

; 444  : 
; 445  :         if (!in_consts) {

  00468	83 bc 24 a0 00
	00 00 00	 cmp	 DWORD PTR in_consts$[rsp], 0
  00470	75 12		 jne	 SHORT $LN141@PyCode_Opt
$LN140@PyCode_Opt:

; 446  :             CONST_STACK_RESET();

  00472	48 c7 84 24 80
	00 00 00 ff ff
	ff ff		 mov	 QWORD PTR const_stack_top$[rsp], -1
  0047e	33 c0		 xor	 eax, eax
  00480	85 c0		 test	 eax, eax
  00482	75 ee		 jne	 SHORT $LN140@PyCode_Opt
$LN141@PyCode_Opt:

; 447  :         }
; 448  :         in_consts = 0;

  00484	c7 84 24 a0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR in_consts$[rsp], 0

; 449  : 
; 450  :         switch (opcode) {

  0048f	8b 44 24 20	 mov	 eax, DWORD PTR opcode$[rsp]
  00493	89 84 24 04 01
	00 00		 mov	 DWORD PTR tv207[rsp], eax
  0049a	8b 84 24 04 01
	00 00		 mov	 eax, DWORD PTR tv207[rsp]
  004a1	83 e8 0a	 sub	 eax, 10
  004a4	89 84 24 04 01
	00 00		 mov	 DWORD PTR tv207[rsp], eax
  004ab	81 bc 24 04 01
	00 00 86 00 00
	00		 cmp	 DWORD PTR tv207[rsp], 134 ; 00000086H
  004b6	0f 87 e9 1d 00
	00		 ja	 $LN136@PyCode_Opt
  004bc	48 63 84 24 04
	01 00 00	 movsxd	 rax, DWORD PTR tv207[rsp]
  004c4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  004cb	0f b6 84 01 00
	00 00 00	 movzx	 eax, BYTE PTR $LN237@PyCode_Opt[rcx+rax]
  004d3	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN238@PyCode_Opt[rcx+rax*4]
  004da	48 03 c1	 add	 rax, rcx
  004dd	ff e0		 jmp	 rax
$LN135@PyCode_Opt:

; 451  :             /* Replace UNARY_NOT POP_JUMP_IF_FALSE
; 452  :                with    POP_JUMP_IF_TRUE */
; 453  :             case UNARY_NOT:
; 454  :                 if (codestr[i+1] != POP_JUMP_IF_FALSE
; 455  :                     || !ISBASICBLOCK(blocks,i,4))

  004df	48 8b 44 24 48	 mov	 rax, QWORD PTR i$[rsp]
  004e4	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR codestr$[rsp]
  004ec	48 03 c8	 add	 rcx, rax
  004ef	48 8b c1	 mov	 rax, rcx
  004f2	0f b6 40 01	 movzx	 eax, BYTE PTR [rax+1]
  004f6	83 f8 72	 cmp	 eax, 114		; 00000072H
  004f9	75 1e		 jne	 SHORT $LN133@PyCode_Opt
  004fb	48 8b 44 24 70	 mov	 rax, QWORD PTR blocks$[rsp]
  00500	48 8b 4c 24 48	 mov	 rcx, QWORD PTR i$[rsp]
  00505	48 8b 54 24 70	 mov	 rdx, QWORD PTR blocks$[rsp]
  0050a	4c 8b 44 24 48	 mov	 r8, QWORD PTR i$[rsp]
  0050f	42 8b 54 82 0c	 mov	 edx, DWORD PTR [rdx+r8*4+12]
  00514	39 14 88	 cmp	 DWORD PTR [rax+rcx*4], edx
  00517	74 05		 je	 SHORT $LN134@PyCode_Opt
$LN133@PyCode_Opt:

; 456  :                     continue;

  00519	e9 d2 fe ff ff	 jmp	 $LN143@PyCode_Opt
$LN134@PyCode_Opt:

; 457  :                 j = GETARG(codestr, i+1);

  0051e	48 8b 44 24 48	 mov	 rax, QWORD PTR i$[rsp]
  00523	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR codestr$[rsp]
  0052b	48 03 c8	 add	 rcx, rax
  0052e	48 8b c1	 mov	 rax, rcx
  00531	0f b6 40 03	 movzx	 eax, BYTE PTR [rax+3]
  00535	c1 e0 08	 shl	 eax, 8
  00538	48 8b 4c 24 48	 mov	 rcx, QWORD PTR i$[rsp]
  0053d	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR codestr$[rsp]
  00545	48 03 d1	 add	 rdx, rcx
  00548	48 8b ca	 mov	 rcx, rdx
  0054b	0f b6 49 02	 movzx	 ecx, BYTE PTR [rcx+2]
  0054f	03 c1		 add	 eax, ecx
  00551	48 98		 cdqe
  00553	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR j$[rsp], rax

; 458  :                 codestr[i] = POP_JUMP_IF_TRUE;

  0055b	48 8b 44 24 48	 mov	 rax, QWORD PTR i$[rsp]
  00560	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR codestr$[rsp]
  00568	48 03 c8	 add	 rcx, rax
  0056b	48 8b c1	 mov	 rax, rcx
  0056e	c6 00 73	 mov	 BYTE PTR [rax], 115	; 00000073H

; 459  :                 SETARG(codestr, i, j);

  00571	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR j$[rsp]
  00579	48 c1 f8 08	 sar	 rax, 8
  0057d	48 8b 4c 24 48	 mov	 rcx, QWORD PTR i$[rsp]
  00582	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR codestr$[rsp]
  0058a	48 03 d1	 add	 rdx, rcx
  0058d	48 8b ca	 mov	 rcx, rdx
  00590	88 41 02	 mov	 BYTE PTR [rcx+2], al
  00593	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR j$[rsp]
  0059b	48 25 ff 00 00
	00		 and	 rax, 255		; 000000ffH
  005a1	48 8b 4c 24 48	 mov	 rcx, QWORD PTR i$[rsp]
  005a6	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR codestr$[rsp]
  005ae	48 03 d1	 add	 rdx, rcx
  005b1	48 8b ca	 mov	 rcx, rdx
  005b4	88 41 01	 mov	 BYTE PTR [rcx+1], al

; 460  :                 codestr[i+3] = NOP;

  005b7	48 8b 44 24 48	 mov	 rax, QWORD PTR i$[rsp]
  005bc	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR codestr$[rsp]
  005c4	48 03 c8	 add	 rcx, rax
  005c7	48 8b c1	 mov	 rax, rcx
  005ca	c6 40 03 09	 mov	 BYTE PTR [rax+3], 9

; 461  :                 goto reoptimize_current;

  005ce	e9 7b fe ff ff	 jmp	 $reoptimize_current$21924
$LN132@PyCode_Opt:

; 462  : 
; 463  :                 /* not a is b -->  a is not b
; 464  :                    not a in b -->  a not in b
; 465  :                    not a is not b -->  a is b
; 466  :                    not a not in b -->  a in b
; 467  :                 */
; 468  :             case COMPARE_OP:
; 469  :                 j = GETARG(codestr, i);

  005d3	48 8b 44 24 48	 mov	 rax, QWORD PTR i$[rsp]
  005d8	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR codestr$[rsp]
  005e0	48 03 c8	 add	 rcx, rax
  005e3	48 8b c1	 mov	 rax, rcx
  005e6	0f b6 40 02	 movzx	 eax, BYTE PTR [rax+2]
  005ea	c1 e0 08	 shl	 eax, 8
  005ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR i$[rsp]
  005f2	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR codestr$[rsp]
  005fa	48 03 d1	 add	 rdx, rcx
  005fd	48 8b ca	 mov	 rcx, rdx
  00600	0f b6 49 01	 movzx	 ecx, BYTE PTR [rcx+1]
  00604	03 c1		 add	 eax, ecx
  00606	48 98		 cdqe
  00608	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR j$[rsp], rax

; 470  :                 if (j < 6  ||  j > 9  ||
; 471  :                     codestr[i+3] != UNARY_NOT  ||
; 472  :                     !ISBASICBLOCK(blocks,i,4))

  00610	48 83 bc 24 c0
	00 00 00 06	 cmp	 QWORD PTR j$[rsp], 6
  00619	7c 45		 jl	 SHORT $LN130@PyCode_Opt
  0061b	48 83 bc 24 c0
	00 00 00 09	 cmp	 QWORD PTR j$[rsp], 9
  00624	7f 3a		 jg	 SHORT $LN130@PyCode_Opt
  00626	48 8b 44 24 48	 mov	 rax, QWORD PTR i$[rsp]
  0062b	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR codestr$[rsp]
  00633	48 03 c8	 add	 rcx, rax
  00636	48 8b c1	 mov	 rax, rcx
  00639	0f b6 40 03	 movzx	 eax, BYTE PTR [rax+3]
  0063d	83 f8 0c	 cmp	 eax, 12
  00640	75 1e		 jne	 SHORT $LN130@PyCode_Opt
  00642	48 8b 44 24 70	 mov	 rax, QWORD PTR blocks$[rsp]
  00647	48 8b 4c 24 48	 mov	 rcx, QWORD PTR i$[rsp]
  0064c	48 8b 54 24 70	 mov	 rdx, QWORD PTR blocks$[rsp]
  00651	4c 8b 44 24 48	 mov	 r8, QWORD PTR i$[rsp]
  00656	42 8b 54 82 0c	 mov	 edx, DWORD PTR [rdx+r8*4+12]
  0065b	39 14 88	 cmp	 DWORD PTR [rax+rcx*4], edx
  0065e	74 05		 je	 SHORT $LN131@PyCode_Opt
$LN130@PyCode_Opt:

; 473  :                     continue;

  00660	e9 8b fd ff ff	 jmp	 $LN143@PyCode_Opt
$LN131@PyCode_Opt:

; 474  :                 SETARG(codestr, i, (j^1));

  00665	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR j$[rsp]
  0066d	48 83 f0 01	 xor	 rax, 1
  00671	48 c1 f8 08	 sar	 rax, 8
  00675	48 8b 4c 24 48	 mov	 rcx, QWORD PTR i$[rsp]
  0067a	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR codestr$[rsp]
  00682	48 03 d1	 add	 rdx, rcx
  00685	48 8b ca	 mov	 rcx, rdx
  00688	88 41 02	 mov	 BYTE PTR [rcx+2], al
  0068b	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR j$[rsp]
  00693	48 83 f0 01	 xor	 rax, 1
  00697	48 25 ff 00 00
	00		 and	 rax, 255		; 000000ffH
  0069d	48 8b 4c 24 48	 mov	 rcx, QWORD PTR i$[rsp]
  006a2	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR codestr$[rsp]
  006aa	48 03 d1	 add	 rdx, rcx
  006ad	48 8b ca	 mov	 rcx, rdx
  006b0	88 41 01	 mov	 BYTE PTR [rcx+1], al

; 475  :                 codestr[i+3] = NOP;

  006b3	48 8b 44 24 48	 mov	 rax, QWORD PTR i$[rsp]
  006b8	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR codestr$[rsp]
  006c0	48 03 c8	 add	 rcx, rax
  006c3	48 8b c1	 mov	 rax, rcx
  006c6	c6 40 03 09	 mov	 BYTE PTR [rax+3], 9

; 476  :                 break;

  006ca	e9 d6 1b 00 00	 jmp	 $LN136@PyCode_Opt
$LN129@PyCode_Opt:

; 477  : 
; 478  :                 /* Replace LOAD_GLOBAL/LOAD_NAME None/True/False
; 479  :                    with LOAD_CONST None/True/False */
; 480  :             case LOAD_NAME:
; 481  :             case LOAD_GLOBAL:
; 482  :                 j = GETARG(codestr, i);

  006cf	48 8b 44 24 48	 mov	 rax, QWORD PTR i$[rsp]
  006d4	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR codestr$[rsp]
  006dc	48 03 c8	 add	 rcx, rax
  006df	48 8b c1	 mov	 rax, rcx
  006e2	0f b6 40 02	 movzx	 eax, BYTE PTR [rax+2]
  006e6	c1 e0 08	 shl	 eax, 8
  006e9	48 8b 4c 24 48	 mov	 rcx, QWORD PTR i$[rsp]
  006ee	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR codestr$[rsp]
  006f6	48 03 d1	 add	 rdx, rcx
  006f9	48 8b ca	 mov	 rcx, rdx
  006fc	0f b6 49 01	 movzx	 ecx, BYTE PTR [rcx+1]
  00700	03 c1		 add	 eax, ecx
  00702	48 98		 cdqe
  00704	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR j$[rsp], rax

; 483  :                 name = _PyUnicode_AsString(PyTuple_GET_ITEM(names, j));

  0070c	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR names$[rsp]
  00714	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR j$[rsp]
  0071c	48 8b 4c c8 70	 mov	 rcx, QWORD PTR [rax+rcx*8+112]
  00721	e8 00 00 00 00	 call	 PyUnicode_AsUTF8
  00726	48 89 44 24 60	 mov	 QWORD PTR name$[rsp], rax

; 484  :                 h = load_global(codestr, i, name, consts);

  0072b	4c 8b 8c 24 b8
	01 00 00	 mov	 r9, QWORD PTR consts$[rsp]
  00733	4c 8b 44 24 60	 mov	 r8, QWORD PTR name$[rsp]
  00738	48 8b 54 24 48	 mov	 rdx, QWORD PTR i$[rsp]
  0073d	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR codestr$[rsp]
  00745	e8 00 00 00 00	 call	 load_global
  0074a	89 44 24 28	 mov	 DWORD PTR h$[rsp], eax

; 485  :                 if (h < 0)

  0074e	83 7c 24 28 00	 cmp	 DWORD PTR h$[rsp], 0
  00753	7d 07		 jge	 SHORT $LN128@PyCode_Opt

; 486  :                     goto exitError;

  00755	e9 eb 1f 00 00	 jmp	 $exitError$21867
  0075a	eb 0c		 jmp	 SHORT $LN127@PyCode_Opt
$LN128@PyCode_Opt:

; 487  :                 else if (h == 0)

  0075c	83 7c 24 28 00	 cmp	 DWORD PTR h$[rsp], 0
  00761	75 05		 jne	 SHORT $LN126@PyCode_Opt

; 488  :                     continue;

  00763	e9 88 fc ff ff	 jmp	 $LN143@PyCode_Opt
$LN126@PyCode_Opt:
$LN127@PyCode_Opt:
$LN125@PyCode_Opt:

; 489  :                 CONST_STACK_PUSH_OP(i);

  00768	48 8b 44 24 48	 mov	 rax, QWORD PTR i$[rsp]
  0076d	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR codestr$[rsp]
  00775	48 03 c8	 add	 rcx, rax
  00778	48 8b c1	 mov	 rax, rcx
  0077b	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0077e	83 f8 64	 cmp	 eax, 100		; 00000064H
  00781	74 1c		 je	 SHORT $LN169@PyCode_Opt
  00783	41 b8 e9 01 00
	00		 mov	 r8d, 489		; 000001e9H
  00789	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CK@KIMKCIEN@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAe?$AAe?$AAp?$AAh?$AAo?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  00790	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DC@LKIFDDKK@?$AAc?$AAo?$AAd?$AAe?$AAs?$AAt?$AAr?$AA?$FL?$AAi?$AA?$FN?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAL?$AAO?$AAA?$AAD?$AA_?$AAC?$AAO?$AAN?$AAS?$AAT?$AA?$AA@
  00797	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0079d	33 c0		 xor	 eax, eax
$LN169@PyCode_Opt:
  0079f	48 8b 44 24 48	 mov	 rax, QWORD PTR i$[rsp]
  007a4	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR codestr$[rsp]
  007ac	48 03 c8	 add	 rcx, rax
  007af	48 8b c1	 mov	 rax, rcx
  007b2	0f b6 40 02	 movzx	 eax, BYTE PTR [rax+2]
  007b6	c1 e0 08	 shl	 eax, 8
  007b9	48 8b 4c 24 48	 mov	 rcx, QWORD PTR i$[rsp]
  007be	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR codestr$[rsp]
  007c6	48 03 d1	 add	 rdx, rcx
  007c9	48 8b ca	 mov	 rcx, rdx
  007cc	0f b6 49 01	 movzx	 ecx, BYTE PTR [rcx+1]
  007d0	03 c1		 add	 eax, ecx
  007d2	48 98		 cdqe
  007d4	48 8b 8c 24 b8
	01 00 00	 mov	 rcx, QWORD PTR consts$[rsp]
  007dc	48 39 41 60	 cmp	 QWORD PTR [rcx+96], rax
  007e0	7f 1c		 jg	 SHORT $LN170@PyCode_Opt
  007e2	41 b8 e9 01 00
	00		 mov	 r8d, 489		; 000001e9H
  007e8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CK@KIMKCIEN@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAe?$AAe?$AAp?$AAh?$AAo?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  007ef	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FK@DMFJGOAB@?$AAP?$AAy?$AAL?$AAi?$AAs?$AAt?$AA_?$AAG?$AAE?$AAT?$AA_?$AAS?$AAI?$AAZ?$AAE?$AA?$CI?$AAc?$AAo?$AAn?$AAs?$AAt?$AAs?$AA?$CJ?$AA?5?$AA?$DO?$AA?5?$AAG?$AAE?$AAT?$AAA?$AAR?$AAG@
  007f6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  007fc	33 c0		 xor	 eax, eax
$LN170@PyCode_Opt:
  007fe	48 8b 44 24 48	 mov	 rax, QWORD PTR i$[rsp]
  00803	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR codestr$[rsp]
  0080b	48 03 c8	 add	 rcx, rax
  0080e	48 8b c1	 mov	 rax, rcx
  00811	0f b6 40 02	 movzx	 eax, BYTE PTR [rax+2]
  00815	c1 e0 08	 shl	 eax, 8
  00818	48 8b 4c 24 48	 mov	 rcx, QWORD PTR i$[rsp]
  0081d	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR codestr$[rsp]
  00825	48 03 d1	 add	 rdx, rcx
  00828	48 8b ca	 mov	 rcx, rdx
  0082b	0f b6 49 01	 movzx	 ecx, BYTE PTR [rcx+1]
  0082f	03 c1		 add	 eax, ecx
  00831	48 98		 cdqe
  00833	48 8b 8c 24 b8
	01 00 00	 mov	 rcx, QWORD PTR consts$[rsp]
  0083b	48 8b 49 70	 mov	 rcx, QWORD PTR [rcx+112]
  0083f	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  00843	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR _x$21950[rsp], rax
  0084b	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR const_stack_top$[rsp]
  00853	48 ff c0	 inc	 rax
  00856	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR const_stack_top$[rsp], rax
  0085e	48 8b 44 24 30	 mov	 rax, QWORD PTR const_stack_size$[rsp]
  00863	48 39 84 24 80
	00 00 00	 cmp	 QWORD PTR const_stack_top$[rsp], rax
  0086b	0f 8c cd 00 00
	00		 jl	 $LN122@PyCode_Opt
  00871	48 8b 44 24 30	 mov	 rax, QWORD PTR const_stack_size$[rsp]
  00876	48 d1 e0	 shl	 rax, 1
  00879	48 89 44 24 30	 mov	 QWORD PTR const_stack_size$[rsp], rax
  0087e	48 b8 ff ff ff
	ff ff ff ff 0f	 mov	 rax, 1152921504606846975 ; 0fffffffffffffffH
  00888	48 39 44 24 30	 cmp	 QWORD PTR const_stack_size$[rsp], rax
  0088d	76 0e		 jbe	 SHORT $LN171@PyCode_Opt
  0088f	48 c7 84 24 08
	01 00 00 00 00
	00 00		 mov	 QWORD PTR tv338[rsp], 0
  0089b	eb 21		 jmp	 SHORT $LN172@PyCode_Opt
$LN171@PyCode_Opt:
  0089d	48 8b 44 24 30	 mov	 rax, QWORD PTR const_stack_size$[rsp]
  008a2	48 c1 e0 03	 shl	 rax, 3
  008a6	48 8b d0	 mov	 rdx, rax
  008a9	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR const_stack$[rsp]
  008b1	e8 00 00 00 00	 call	 PyMem_Realloc
  008b6	48 89 84 24 08
	01 00 00	 mov	 QWORD PTR tv338[rsp], rax
$LN172@PyCode_Opt:
  008be	48 8b 84 24 08
	01 00 00	 mov	 rax, QWORD PTR tv338[rsp]
  008c6	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR const_stack$[rsp], rax
  008ce	48 b8 ff ff ff
	ff ff ff ff 0f	 mov	 rax, 1152921504606846975 ; 0fffffffffffffffH
  008d8	48 39 44 24 30	 cmp	 QWORD PTR const_stack_size$[rsp], rax
  008dd	76 0e		 jbe	 SHORT $LN173@PyCode_Opt
  008df	48 c7 84 24 10
	01 00 00 00 00
	00 00		 mov	 QWORD PTR tv344[rsp], 0
  008eb	eb 21		 jmp	 SHORT $LN174@PyCode_Opt
$LN173@PyCode_Opt:
  008ed	48 8b 44 24 30	 mov	 rax, QWORD PTR const_stack_size$[rsp]
  008f2	48 c1 e0 03	 shl	 rax, 3
  008f6	48 8b d0	 mov	 rdx, rax
  008f9	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR load_const_stack$[rsp]
  00901	e8 00 00 00 00	 call	 PyMem_Realloc
  00906	48 89 84 24 10
	01 00 00	 mov	 QWORD PTR tv344[rsp], rax
$LN174@PyCode_Opt:
  0090e	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR tv344[rsp]
  00916	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR load_const_stack$[rsp], rax
  0091e	48 83 bc 24 b0
	00 00 00 00	 cmp	 QWORD PTR const_stack$[rsp], 0
  00927	74 0b		 je	 SHORT $LN120@PyCode_Opt
  00929	48 83 bc 24 98
	00 00 00 00	 cmp	 QWORD PTR load_const_stack$[rsp], 0
  00932	75 0a		 jne	 SHORT $LN121@PyCode_Opt
$LN120@PyCode_Opt:
  00934	e8 00 00 00 00	 call	 PyErr_NoMemory
  00939	e9 07 1e 00 00	 jmp	 $exitError$21867
$LN121@PyCode_Opt:
$LN122@PyCode_Opt:
  0093e	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR load_const_stack$[rsp]
  00946	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR const_stack_top$[rsp]
  0094e	48 8b 54 24 48	 mov	 rdx, QWORD PTR i$[rsp]
  00953	48 89 14 c8	 mov	 QWORD PTR [rax+rcx*8], rdx
  00957	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR const_stack$[rsp]
  0095f	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR const_stack_top$[rsp]
  00967	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR _x$21950[rsp]
  0096f	48 89 14 c8	 mov	 QWORD PTR [rax+rcx*8], rdx
  00973	c7 84 24 a0 00
	00 00 01 00 00
	00		 mov	 DWORD PTR in_consts$[rsp], 1
  0097e	33 c0		 xor	 eax, eax
  00980	85 c0		 test	 eax, eax
  00982	0f 85 e0 fd ff
	ff		 jne	 $LN125@PyCode_Opt

; 490  :                 break;

  00988	e9 18 19 00 00	 jmp	 $LN136@PyCode_Opt
$LN119@PyCode_Opt:
$LN118@PyCode_Opt:

; 491  : 
; 492  :                 /* Skip over LOAD_CONST trueconst
; 493  :                    POP_JUMP_IF_FALSE xx. This improves
; 494  :                    "while 1" performance. */
; 495  :             case LOAD_CONST:
; 496  :                 CONST_STACK_PUSH_OP(i);

  0098d	48 8b 44 24 48	 mov	 rax, QWORD PTR i$[rsp]
  00992	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR codestr$[rsp]
  0099a	48 03 c8	 add	 rcx, rax
  0099d	48 8b c1	 mov	 rax, rcx
  009a0	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  009a3	83 f8 64	 cmp	 eax, 100		; 00000064H
  009a6	74 1c		 je	 SHORT $LN175@PyCode_Opt
  009a8	41 b8 f0 01 00
	00		 mov	 r8d, 496		; 000001f0H
  009ae	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CK@KIMKCIEN@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAe?$AAe?$AAp?$AAh?$AAo?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  009b5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DC@LKIFDDKK@?$AAc?$AAo?$AAd?$AAe?$AAs?$AAt?$AAr?$AA?$FL?$AAi?$AA?$FN?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAL?$AAO?$AAA?$AAD?$AA_?$AAC?$AAO?$AAN?$AAS?$AAT?$AA?$AA@
  009bc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  009c2	33 c0		 xor	 eax, eax
$LN175@PyCode_Opt:
  009c4	48 8b 44 24 48	 mov	 rax, QWORD PTR i$[rsp]
  009c9	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR codestr$[rsp]
  009d1	48 03 c8	 add	 rcx, rax
  009d4	48 8b c1	 mov	 rax, rcx
  009d7	0f b6 40 02	 movzx	 eax, BYTE PTR [rax+2]
  009db	c1 e0 08	 shl	 eax, 8
  009de	48 8b 4c 24 48	 mov	 rcx, QWORD PTR i$[rsp]
  009e3	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR codestr$[rsp]
  009eb	48 03 d1	 add	 rdx, rcx
  009ee	48 8b ca	 mov	 rcx, rdx
  009f1	0f b6 49 01	 movzx	 ecx, BYTE PTR [rcx+1]
  009f5	03 c1		 add	 eax, ecx
  009f7	48 98		 cdqe
  009f9	48 8b 8c 24 b8
	01 00 00	 mov	 rcx, QWORD PTR consts$[rsp]
  00a01	48 39 41 60	 cmp	 QWORD PTR [rcx+96], rax
  00a05	7f 1c		 jg	 SHORT $LN176@PyCode_Opt
  00a07	41 b8 f0 01 00
	00		 mov	 r8d, 496		; 000001f0H
  00a0d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CK@KIMKCIEN@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAe?$AAe?$AAp?$AAh?$AAo?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  00a14	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FK@DMFJGOAB@?$AAP?$AAy?$AAL?$AAi?$AAs?$AAt?$AA_?$AAG?$AAE?$AAT?$AA_?$AAS?$AAI?$AAZ?$AAE?$AA?$CI?$AAc?$AAo?$AAn?$AAs?$AAt?$AAs?$AA?$CJ?$AA?5?$AA?$DO?$AA?5?$AAG?$AAE?$AAT?$AAA?$AAR?$AAG@
  00a1b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00a21	33 c0		 xor	 eax, eax
$LN176@PyCode_Opt:
  00a23	48 8b 44 24 48	 mov	 rax, QWORD PTR i$[rsp]
  00a28	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR codestr$[rsp]
  00a30	48 03 c8	 add	 rcx, rax
  00a33	48 8b c1	 mov	 rax, rcx
  00a36	0f b6 40 02	 movzx	 eax, BYTE PTR [rax+2]
  00a3a	c1 e0 08	 shl	 eax, 8
  00a3d	48 8b 4c 24 48	 mov	 rcx, QWORD PTR i$[rsp]
  00a42	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR codestr$[rsp]
  00a4a	48 03 d1	 add	 rdx, rcx
  00a4d	48 8b ca	 mov	 rcx, rdx
  00a50	0f b6 49 01	 movzx	 ecx, BYTE PTR [rcx+1]
  00a54	03 c1		 add	 eax, ecx
  00a56	48 98		 cdqe
  00a58	48 8b 8c 24 b8
	01 00 00	 mov	 rcx, QWORD PTR consts$[rsp]
  00a60	48 8b 49 70	 mov	 rcx, QWORD PTR [rcx+112]
  00a64	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  00a68	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR _x$21980[rsp], rax
  00a70	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR const_stack_top$[rsp]
  00a78	48 ff c0	 inc	 rax
  00a7b	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR const_stack_top$[rsp], rax
  00a83	48 8b 44 24 30	 mov	 rax, QWORD PTR const_stack_size$[rsp]
  00a88	48 39 84 24 80
	00 00 00	 cmp	 QWORD PTR const_stack_top$[rsp], rax
  00a90	0f 8c cd 00 00
	00		 jl	 $LN115@PyCode_Opt
  00a96	48 8b 44 24 30	 mov	 rax, QWORD PTR const_stack_size$[rsp]
  00a9b	48 d1 e0	 shl	 rax, 1
  00a9e	48 89 44 24 30	 mov	 QWORD PTR const_stack_size$[rsp], rax
  00aa3	48 b8 ff ff ff
	ff ff ff ff 0f	 mov	 rax, 1152921504606846975 ; 0fffffffffffffffH
  00aad	48 39 44 24 30	 cmp	 QWORD PTR const_stack_size$[rsp], rax
  00ab2	76 0e		 jbe	 SHORT $LN177@PyCode_Opt
  00ab4	48 c7 84 24 18
	01 00 00 00 00
	00 00		 mov	 QWORD PTR tv394[rsp], 0
  00ac0	eb 21		 jmp	 SHORT $LN178@PyCode_Opt
$LN177@PyCode_Opt:
  00ac2	48 8b 44 24 30	 mov	 rax, QWORD PTR const_stack_size$[rsp]
  00ac7	48 c1 e0 03	 shl	 rax, 3
  00acb	48 8b d0	 mov	 rdx, rax
  00ace	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR const_stack$[rsp]
  00ad6	e8 00 00 00 00	 call	 PyMem_Realloc
  00adb	48 89 84 24 18
	01 00 00	 mov	 QWORD PTR tv394[rsp], rax
$LN178@PyCode_Opt:
  00ae3	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR tv394[rsp]
  00aeb	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR const_stack$[rsp], rax
  00af3	48 b8 ff ff ff
	ff ff ff ff 0f	 mov	 rax, 1152921504606846975 ; 0fffffffffffffffH
  00afd	48 39 44 24 30	 cmp	 QWORD PTR const_stack_size$[rsp], rax
  00b02	76 0e		 jbe	 SHORT $LN179@PyCode_Opt
  00b04	48 c7 84 24 20
	01 00 00 00 00
	00 00		 mov	 QWORD PTR tv400[rsp], 0
  00b10	eb 21		 jmp	 SHORT $LN180@PyCode_Opt
$LN179@PyCode_Opt:
  00b12	48 8b 44 24 30	 mov	 rax, QWORD PTR const_stack_size$[rsp]
  00b17	48 c1 e0 03	 shl	 rax, 3
  00b1b	48 8b d0	 mov	 rdx, rax
  00b1e	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR load_const_stack$[rsp]
  00b26	e8 00 00 00 00	 call	 PyMem_Realloc
  00b2b	48 89 84 24 20
	01 00 00	 mov	 QWORD PTR tv400[rsp], rax
$LN180@PyCode_Opt:
  00b33	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR tv400[rsp]
  00b3b	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR load_const_stack$[rsp], rax
  00b43	48 83 bc 24 b0
	00 00 00 00	 cmp	 QWORD PTR const_stack$[rsp], 0
  00b4c	74 0b		 je	 SHORT $LN113@PyCode_Opt
  00b4e	48 83 bc 24 98
	00 00 00 00	 cmp	 QWORD PTR load_const_stack$[rsp], 0
  00b57	75 0a		 jne	 SHORT $LN114@PyCode_Opt
$LN113@PyCode_Opt:
  00b59	e8 00 00 00 00	 call	 PyErr_NoMemory
  00b5e	e9 e2 1b 00 00	 jmp	 $exitError$21867
$LN114@PyCode_Opt:
$LN115@PyCode_Opt:
  00b63	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR load_const_stack$[rsp]
  00b6b	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR const_stack_top$[rsp]
  00b73	48 8b 54 24 48	 mov	 rdx, QWORD PTR i$[rsp]
  00b78	48 89 14 c8	 mov	 QWORD PTR [rax+rcx*8], rdx
  00b7c	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR const_stack$[rsp]
  00b84	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR const_stack_top$[rsp]
  00b8c	48 8b 94 24 d0
	00 00 00	 mov	 rdx, QWORD PTR _x$21980[rsp]
  00b94	48 89 14 c8	 mov	 QWORD PTR [rax+rcx*8], rdx
  00b98	c7 84 24 a0 00
	00 00 01 00 00
	00		 mov	 DWORD PTR in_consts$[rsp], 1
  00ba3	33 c0		 xor	 eax, eax
  00ba5	85 c0		 test	 eax, eax
  00ba7	0f 85 e0 fd ff
	ff		 jne	 $LN118@PyCode_Opt

; 497  :                 j = GETARG(codestr, i);

  00bad	48 8b 44 24 48	 mov	 rax, QWORD PTR i$[rsp]
  00bb2	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR codestr$[rsp]
  00bba	48 03 c8	 add	 rcx, rax
  00bbd	48 8b c1	 mov	 rax, rcx
  00bc0	0f b6 40 02	 movzx	 eax, BYTE PTR [rax+2]
  00bc4	c1 e0 08	 shl	 eax, 8
  00bc7	48 8b 4c 24 48	 mov	 rcx, QWORD PTR i$[rsp]
  00bcc	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR codestr$[rsp]
  00bd4	48 03 d1	 add	 rdx, rcx
  00bd7	48 8b ca	 mov	 rcx, rdx
  00bda	0f b6 49 01	 movzx	 ecx, BYTE PTR [rcx+1]
  00bde	03 c1		 add	 eax, ecx
  00be0	48 98		 cdqe
  00be2	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR j$[rsp], rax

; 498  :                 if (codestr[i+3] != POP_JUMP_IF_FALSE  ||
; 499  :                     !ISBASICBLOCK(blocks,i,6)  ||
; 500  :                     !PyObject_IsTrue(PyList_GET_ITEM(consts, j)))

  00bea	48 8b 44 24 48	 mov	 rax, QWORD PTR i$[rsp]
  00bef	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR codestr$[rsp]
  00bf7	48 03 c8	 add	 rcx, rax
  00bfa	48 8b c1	 mov	 rax, rcx
  00bfd	0f b6 40 03	 movzx	 eax, BYTE PTR [rax+3]
  00c01	83 f8 72	 cmp	 eax, 114		; 00000072H
  00c04	75 3f		 jne	 SHORT $LN111@PyCode_Opt
  00c06	48 8b 44 24 70	 mov	 rax, QWORD PTR blocks$[rsp]
  00c0b	48 8b 4c 24 48	 mov	 rcx, QWORD PTR i$[rsp]
  00c10	48 8b 54 24 70	 mov	 rdx, QWORD PTR blocks$[rsp]
  00c15	4c 8b 44 24 48	 mov	 r8, QWORD PTR i$[rsp]
  00c1a	42 8b 54 82 14	 mov	 edx, DWORD PTR [rdx+r8*4+20]
  00c1f	39 14 88	 cmp	 DWORD PTR [rax+rcx*4], edx
  00c22	75 21		 jne	 SHORT $LN111@PyCode_Opt
  00c24	48 8b 84 24 b8
	01 00 00	 mov	 rax, QWORD PTR consts$[rsp]
  00c2c	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00c30	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR j$[rsp]
  00c38	48 8b 0c c8	 mov	 rcx, QWORD PTR [rax+rcx*8]
  00c3c	e8 00 00 00 00	 call	 PyObject_IsTrue
  00c41	85 c0		 test	 eax, eax
  00c43	75 05		 jne	 SHORT $LN112@PyCode_Opt
$LN111@PyCode_Opt:

; 501  :                     continue;

  00c45	e9 a6 f7 ff ff	 jmp	 $LN143@PyCode_Opt
$LN112@PyCode_Opt:

; 502  :                 memset(codestr+i, NOP, 6);

  00c4a	48 8b 44 24 48	 mov	 rax, QWORD PTR i$[rsp]
  00c4f	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR codestr$[rsp]
  00c57	48 03 c8	 add	 rcx, rax
  00c5a	48 8b c1	 mov	 rax, rcx
  00c5d	41 b8 06 00 00
	00		 mov	 r8d, 6
  00c63	ba 09 00 00 00	 mov	 edx, 9
  00c68	48 8b c8	 mov	 rcx, rax
  00c6b	e8 00 00 00 00	 call	 memset
$LN110@PyCode_Opt:

; 503  :                 CONST_STACK_RESET();

  00c70	48 c7 84 24 80
	00 00 00 ff ff
	ff ff		 mov	 QWORD PTR const_stack_top$[rsp], -1
  00c7c	33 c0		 xor	 eax, eax
  00c7e	85 c0		 test	 eax, eax
  00c80	75 ee		 jne	 SHORT $LN110@PyCode_Opt

; 504  :                 break;

  00c82	e9 1e 16 00 00	 jmp	 $LN136@PyCode_Opt
$LN107@PyCode_Opt:

; 505  : 
; 506  :                 /* Try to fold tuples of constants (includes a case for lists and sets
; 507  :                    which are only used for "in" and "not in" tests).
; 508  :                    Skip over BUILD_SEQN 1 UNPACK_SEQN 1.
; 509  :                    Replace BUILD_SEQN 2 UNPACK_SEQN 2 with ROT2.
; 510  :                    Replace BUILD_SEQN 3 UNPACK_SEQN 3 with ROT3 ROT2. */
; 511  :             case BUILD_TUPLE:
; 512  :             case BUILD_LIST:
; 513  :             case BUILD_SET:
; 514  :                 j = GETARG(codestr, i);

  00c87	48 8b 44 24 48	 mov	 rax, QWORD PTR i$[rsp]
  00c8c	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR codestr$[rsp]
  00c94	48 03 c8	 add	 rcx, rax
  00c97	48 8b c1	 mov	 rax, rcx
  00c9a	0f b6 40 02	 movzx	 eax, BYTE PTR [rax+2]
  00c9e	c1 e0 08	 shl	 eax, 8
  00ca1	48 8b 4c 24 48	 mov	 rcx, QWORD PTR i$[rsp]
  00ca6	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR codestr$[rsp]
  00cae	48 03 d1	 add	 rdx, rcx
  00cb1	48 8b ca	 mov	 rcx, rdx
  00cb4	0f b6 49 01	 movzx	 ecx, BYTE PTR [rcx+1]
  00cb8	03 c1		 add	 eax, ecx
  00cba	48 98		 cdqe
  00cbc	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR j$[rsp], rax

; 515  :                 if (j == 0)

  00cc4	48 83 bc 24 c0
	00 00 00 00	 cmp	 QWORD PTR j$[rsp], 0
  00ccd	75 05		 jne	 SHORT $LN106@PyCode_Opt

; 516  :                     break;

  00ccf	e9 d1 15 00 00	 jmp	 $LN136@PyCode_Opt
$LN106@PyCode_Opt:

; 517  :                 h = CONST_STACK_OP_LASTN(j);

  00cd4	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR j$[rsp]
  00cdc	48 ff c8	 dec	 rax
  00cdf	48 39 84 24 80
	00 00 00	 cmp	 QWORD PTR const_stack_top$[rsp], rax
  00ce7	7c 2d		 jl	 SHORT $LN181@PyCode_Opt
  00ce9	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR j$[rsp]
  00cf1	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR const_stack_top$[rsp]
  00cf9	48 2b c8	 sub	 rcx, rax
  00cfc	48 8b c1	 mov	 rax, rcx
  00cff	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR load_const_stack$[rsp]
  00d07	48 8b 44 c1 08	 mov	 rax, QWORD PTR [rcx+rax*8+8]
  00d0c	48 89 84 24 28
	01 00 00	 mov	 QWORD PTR tv455[rsp], rax
  00d14	eb 0c		 jmp	 SHORT $LN182@PyCode_Opt
$LN181@PyCode_Opt:
  00d16	48 c7 84 24 28
	01 00 00 ff ff
	ff ff		 mov	 QWORD PTR tv455[rsp], -1
$LN182@PyCode_Opt:
  00d22	8b 84 24 28 01
	00 00		 mov	 eax, DWORD PTR tv455[rsp]
  00d29	89 44 24 28	 mov	 DWORD PTR h$[rsp], eax

; 518  :                 assert((h >= 0 || CONST_STACK_LEN() < j));

  00d2d	83 7c 24 28 00	 cmp	 DWORD PTR h$[rsp], 0
  00d32	7d 31		 jge	 SHORT $LN183@PyCode_Opt
  00d34	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR const_stack_top$[rsp]
  00d3c	48 ff c0	 inc	 rax
  00d3f	48 3b 84 24 c0
	00 00 00	 cmp	 rax, QWORD PTR j$[rsp]
  00d47	7c 1c		 jl	 SHORT $LN183@PyCode_Opt
  00d49	41 b8 06 02 00
	00		 mov	 r8d, 518		; 00000206H
  00d4f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CK@KIMKCIEN@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAe?$AAe?$AAp?$AAh?$AAo?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  00d56	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@LKCFFNNK@?$AA?$CI?$AAh?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAC?$AAO?$AAN?$AAS?$AAT?$AA_?$AAS?$AAT?$AAA?$AAC?$AAK?$AA_?$AAL?$AAE?$AAN?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DM?$AA?5?$AAj@
  00d5d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00d63	33 c0		 xor	 eax, eax
$LN183@PyCode_Opt:

; 519  :                 if (h >= 0 && j > 0 && j <= CONST_STACK_LEN() &&
; 520  :                     ((opcode == BUILD_TUPLE &&
; 521  :                       ISBASICBLOCK(blocks, h, i-h+3)) ||
; 522  :                      ((opcode == BUILD_LIST || opcode == BUILD_SET) &&
; 523  :                       codestr[i+3]==COMPARE_OP &&
; 524  :                       ISBASICBLOCK(blocks, h, i-h+6) &&
; 525  :                       (GETARG(codestr,i+3)==6 ||
; 526  :                        GETARG(codestr,i+3)==7))) &&
; 527  :                     tuple_of_constants(&codestr[i], j, consts, CONST_STACK_LASTN(j))) {

  00d65	83 7c 24 28 00	 cmp	 DWORD PTR h$[rsp], 0
  00d6a	0f 8c 6a 04 00
	00		 jl	 $LN105@PyCode_Opt
  00d70	48 83 bc 24 c0
	00 00 00 00	 cmp	 QWORD PTR j$[rsp], 0
  00d79	0f 8e 5b 04 00
	00		 jle	 $LN105@PyCode_Opt
  00d7f	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR const_stack_top$[rsp]
  00d87	48 ff c0	 inc	 rax
  00d8a	48 39 84 24 c0
	00 00 00	 cmp	 QWORD PTR j$[rsp], rax
  00d92	0f 8f 42 04 00
	00		 jg	 $LN105@PyCode_Opt
  00d98	83 7c 24 20 66	 cmp	 DWORD PTR opcode$[rsp], 102 ; 00000066H
  00d9d	75 2f		 jne	 SHORT $LN103@PyCode_Opt
  00d9f	48 63 44 24 28	 movsxd	 rax, DWORD PTR h$[rsp]
  00da4	48 63 4c 24 28	 movsxd	 rcx, DWORD PTR h$[rsp]
  00da9	48 03 4c 24 48	 add	 rcx, QWORD PTR i$[rsp]
  00dae	48 63 54 24 28	 movsxd	 rdx, DWORD PTR h$[rsp]
  00db3	48 2b ca	 sub	 rcx, rdx
  00db6	48 8b 54 24 70	 mov	 rdx, QWORD PTR blocks$[rsp]
  00dbb	4c 8b 44 24 70	 mov	 r8, QWORD PTR blocks$[rsp]
  00dc0	41 8b 4c 88 08	 mov	 ecx, DWORD PTR [r8+rcx*4+8]
  00dc5	39 0c 82	 cmp	 DWORD PTR [rdx+rax*4], ecx
  00dc8	0f 84 d5 00 00
	00		 je	 $LN104@PyCode_Opt
$LN103@PyCode_Opt:
  00dce	83 7c 24 20 67	 cmp	 DWORD PTR opcode$[rsp], 103 ; 00000067H
  00dd3	74 0b		 je	 SHORT $LN102@PyCode_Opt
  00dd5	83 7c 24 20 68	 cmp	 DWORD PTR opcode$[rsp], 104 ; 00000068H
  00dda	0f 85 fa 03 00
	00		 jne	 $LN105@PyCode_Opt
$LN102@PyCode_Opt:
  00de0	48 8b 44 24 48	 mov	 rax, QWORD PTR i$[rsp]
  00de5	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR codestr$[rsp]
  00ded	48 03 c8	 add	 rcx, rax
  00df0	48 8b c1	 mov	 rax, rcx
  00df3	0f b6 40 03	 movzx	 eax, BYTE PTR [rax+3]
  00df7	83 f8 6b	 cmp	 eax, 107		; 0000006bH
  00dfa	0f 85 da 03 00
	00		 jne	 $LN105@PyCode_Opt
  00e00	48 63 44 24 28	 movsxd	 rax, DWORD PTR h$[rsp]
  00e05	48 63 4c 24 28	 movsxd	 rcx, DWORD PTR h$[rsp]
  00e0a	48 03 4c 24 48	 add	 rcx, QWORD PTR i$[rsp]
  00e0f	48 63 54 24 28	 movsxd	 rdx, DWORD PTR h$[rsp]
  00e14	48 2b ca	 sub	 rcx, rdx
  00e17	48 8b 54 24 70	 mov	 rdx, QWORD PTR blocks$[rsp]
  00e1c	4c 8b 44 24 70	 mov	 r8, QWORD PTR blocks$[rsp]
  00e21	41 8b 4c 88 14	 mov	 ecx, DWORD PTR [r8+rcx*4+20]
  00e26	39 0c 82	 cmp	 DWORD PTR [rdx+rax*4], ecx
  00e29	0f 85 ab 03 00
	00		 jne	 $LN105@PyCode_Opt
  00e2f	48 8b 44 24 48	 mov	 rax, QWORD PTR i$[rsp]
  00e34	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR codestr$[rsp]
  00e3c	48 03 c8	 add	 rcx, rax
  00e3f	48 8b c1	 mov	 rax, rcx
  00e42	0f b6 40 05	 movzx	 eax, BYTE PTR [rax+5]
  00e46	c1 e0 08	 shl	 eax, 8
  00e49	48 8b 4c 24 48	 mov	 rcx, QWORD PTR i$[rsp]
  00e4e	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR codestr$[rsp]
  00e56	48 03 d1	 add	 rdx, rcx
  00e59	48 8b ca	 mov	 rcx, rdx
  00e5c	0f b6 49 04	 movzx	 ecx, BYTE PTR [rcx+4]
  00e60	03 c1		 add	 eax, ecx
  00e62	83 f8 06	 cmp	 eax, 6
  00e65	74 3c		 je	 SHORT $LN101@PyCode_Opt
  00e67	48 8b 44 24 48	 mov	 rax, QWORD PTR i$[rsp]
  00e6c	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR codestr$[rsp]
  00e74	48 03 c8	 add	 rcx, rax
  00e77	48 8b c1	 mov	 rax, rcx
  00e7a	0f b6 40 05	 movzx	 eax, BYTE PTR [rax+5]
  00e7e	c1 e0 08	 shl	 eax, 8
  00e81	48 8b 4c 24 48	 mov	 rcx, QWORD PTR i$[rsp]
  00e86	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR codestr$[rsp]
  00e8e	48 03 d1	 add	 rdx, rcx
  00e91	48 8b ca	 mov	 rcx, rdx
  00e94	0f b6 49 04	 movzx	 ecx, BYTE PTR [rcx+4]
  00e98	03 c1		 add	 eax, ecx
  00e9a	83 f8 07	 cmp	 eax, 7
  00e9d	0f 85 37 03 00
	00		 jne	 $LN105@PyCode_Opt
$LN101@PyCode_Opt:
$LN104@PyCode_Opt:
  00ea3	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR j$[rsp]
  00eab	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR const_stack_top$[rsp]
  00eb3	48 2b c8	 sub	 rcx, rax
  00eb6	48 8b c1	 mov	 rax, rcx
  00eb9	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR const_stack$[rsp]
  00ec1	48 8d 44 c1 08	 lea	 rax, QWORD PTR [rcx+rax*8+8]
  00ec6	48 8b 4c 24 48	 mov	 rcx, QWORD PTR i$[rsp]
  00ecb	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR codestr$[rsp]
  00ed3	48 03 d1	 add	 rdx, rcx
  00ed6	48 8b ca	 mov	 rcx, rdx
  00ed9	4c 8b c8	 mov	 r9, rax
  00edc	4c 8b 84 24 b8
	01 00 00	 mov	 r8, QWORD PTR consts$[rsp]
  00ee4	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR j$[rsp]
  00eec	e8 00 00 00 00	 call	 tuple_of_constants
  00ef1	85 c0		 test	 eax, eax
  00ef3	0f 84 e1 02 00
	00		 je	 $LN105@PyCode_Opt

; 528  :                     assert(codestr[i] == LOAD_CONST);

  00ef9	48 8b 44 24 48	 mov	 rax, QWORD PTR i$[rsp]
  00efe	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR codestr$[rsp]
  00f06	48 03 c8	 add	 rcx, rax
  00f09	48 8b c1	 mov	 rax, rcx
  00f0c	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00f0f	83 f8 64	 cmp	 eax, 100		; 00000064H
  00f12	74 1c		 je	 SHORT $LN184@PyCode_Opt
  00f14	41 b8 10 02 00
	00		 mov	 r8d, 528		; 00000210H
  00f1a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CK@KIMKCIEN@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAe?$AAe?$AAp?$AAh?$AAo?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  00f21	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DC@LKIFDDKK@?$AAc?$AAo?$AAd?$AAe?$AAs?$AAt?$AAr?$AA?$FL?$AAi?$AA?$FN?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAL?$AAO?$AAA?$AAD?$AA_?$AAC?$AAO?$AAN?$AAS?$AAT?$AA?$AA@
  00f28	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00f2e	33 c0		 xor	 eax, eax
$LN184@PyCode_Opt:

; 529  :                     memset(&codestr[h], NOP, i - h);

  00f30	48 63 44 24 28	 movsxd	 rax, DWORD PTR h$[rsp]
  00f35	48 8b 4c 24 48	 mov	 rcx, QWORD PTR i$[rsp]
  00f3a	48 2b c8	 sub	 rcx, rax
  00f3d	48 8b c1	 mov	 rax, rcx
  00f40	48 63 4c 24 28	 movsxd	 rcx, DWORD PTR h$[rsp]
  00f45	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR codestr$[rsp]
  00f4d	48 03 d1	 add	 rdx, rcx
  00f50	48 8b ca	 mov	 rcx, rdx
  00f53	4c 8b c0	 mov	 r8, rax
  00f56	ba 09 00 00 00	 mov	 edx, 9
  00f5b	e8 00 00 00 00	 call	 memset
$LN100@PyCode_Opt:

; 530  :                     CONST_STACK_POP(j);

  00f60	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR const_stack_top$[rsp]
  00f68	48 ff c0	 inc	 rax
  00f6b	48 3b 84 24 c0
	00 00 00	 cmp	 rax, QWORD PTR j$[rsp]
  00f73	7d 1c		 jge	 SHORT $LN185@PyCode_Opt
  00f75	41 b8 12 02 00
	00		 mov	 r8d, 530		; 00000212H
  00f7b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CK@KIMKCIEN@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAe?$AAe?$AAp?$AAh?$AAo?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  00f82	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DC@PJPHNKOA@?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAs?$AAt?$AAa?$AAc?$AAk?$AA_?$AAt?$AAo?$AAp?$AA?5?$AA?$CL?$AA?5?$AA1?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAj?$AA?$AA@
  00f89	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00f8f	33 c0		 xor	 eax, eax
$LN185@PyCode_Opt:
  00f91	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR j$[rsp]
  00f99	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR const_stack_top$[rsp]
  00fa1	48 2b c8	 sub	 rcx, rax
  00fa4	48 8b c1	 mov	 rax, rcx
  00fa7	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR const_stack_top$[rsp], rax
  00faf	33 c0		 xor	 eax, eax
  00fb1	85 c0		 test	 eax, eax
  00fb3	75 ab		 jne	 SHORT $LN100@PyCode_Opt
$LN97@PyCode_Opt:

; 531  :                     CONST_STACK_PUSH_OP(i);

  00fb5	48 8b 44 24 48	 mov	 rax, QWORD PTR i$[rsp]
  00fba	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR codestr$[rsp]
  00fc2	48 03 c8	 add	 rcx, rax
  00fc5	48 8b c1	 mov	 rax, rcx
  00fc8	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00fcb	83 f8 64	 cmp	 eax, 100		; 00000064H
  00fce	74 1c		 je	 SHORT $LN186@PyCode_Opt
  00fd0	41 b8 13 02 00
	00		 mov	 r8d, 531		; 00000213H
  00fd6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CK@KIMKCIEN@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAe?$AAe?$AAp?$AAh?$AAo?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  00fdd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DC@LKIFDDKK@?$AAc?$AAo?$AAd?$AAe?$AAs?$AAt?$AAr?$AA?$FL?$AAi?$AA?$FN?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAL?$AAO?$AAA?$AAD?$AA_?$AAC?$AAO?$AAN?$AAS?$AAT?$AA?$AA@
  00fe4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00fea	33 c0		 xor	 eax, eax
$LN186@PyCode_Opt:
  00fec	48 8b 44 24 48	 mov	 rax, QWORD PTR i$[rsp]
  00ff1	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR codestr$[rsp]
  00ff9	48 03 c8	 add	 rcx, rax
  00ffc	48 8b c1	 mov	 rax, rcx
  00fff	0f b6 40 02	 movzx	 eax, BYTE PTR [rax+2]
  01003	c1 e0 08	 shl	 eax, 8
  01006	48 8b 4c 24 48	 mov	 rcx, QWORD PTR i$[rsp]
  0100b	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR codestr$[rsp]
  01013	48 03 d1	 add	 rdx, rcx
  01016	48 8b ca	 mov	 rcx, rdx
  01019	0f b6 49 01	 movzx	 ecx, BYTE PTR [rcx+1]
  0101d	03 c1		 add	 eax, ecx
  0101f	48 98		 cdqe
  01021	48 8b 8c 24 b8
	01 00 00	 mov	 rcx, QWORD PTR consts$[rsp]
  01029	48 39 41 60	 cmp	 QWORD PTR [rcx+96], rax
  0102d	7f 1c		 jg	 SHORT $LN187@PyCode_Opt
  0102f	41 b8 13 02 00
	00		 mov	 r8d, 531		; 00000213H
  01035	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CK@KIMKCIEN@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAe?$AAe?$AAp?$AAh?$AAo?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  0103c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FK@DMFJGOAB@?$AAP?$AAy?$AAL?$AAi?$AAs?$AAt?$AA_?$AAG?$AAE?$AAT?$AA_?$AAS?$AAI?$AAZ?$AAE?$AA?$CI?$AAc?$AAo?$AAn?$AAs?$AAt?$AAs?$AA?$CJ?$AA?5?$AA?$DO?$AA?5?$AAG?$AAE?$AAT?$AAA?$AAR?$AAG@
  01043	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  01049	33 c0		 xor	 eax, eax
$LN187@PyCode_Opt:
  0104b	48 8b 44 24 48	 mov	 rax, QWORD PTR i$[rsp]
  01050	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR codestr$[rsp]
  01058	48 03 c8	 add	 rcx, rax
  0105b	48 8b c1	 mov	 rax, rcx
  0105e	0f b6 40 02	 movzx	 eax, BYTE PTR [rax+2]
  01062	c1 e0 08	 shl	 eax, 8
  01065	48 8b 4c 24 48	 mov	 rcx, QWORD PTR i$[rsp]
  0106a	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR codestr$[rsp]
  01072	48 03 d1	 add	 rdx, rcx
  01075	48 8b ca	 mov	 rcx, rdx
  01078	0f b6 49 01	 movzx	 ecx, BYTE PTR [rcx+1]
  0107c	03 c1		 add	 eax, ecx
  0107e	48 98		 cdqe
  01080	48 8b 8c 24 b8
	01 00 00	 mov	 rcx, QWORD PTR consts$[rsp]
  01088	48 8b 49 70	 mov	 rcx, QWORD PTR [rcx+112]
  0108c	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  01090	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR _x$22032[rsp], rax
  01098	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR const_stack_top$[rsp]
  010a0	48 ff c0	 inc	 rax
  010a3	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR const_stack_top$[rsp], rax
  010ab	48 8b 44 24 30	 mov	 rax, QWORD PTR const_stack_size$[rsp]
  010b0	48 39 84 24 80
	00 00 00	 cmp	 QWORD PTR const_stack_top$[rsp], rax
  010b8	0f 8c cd 00 00
	00		 jl	 $LN94@PyCode_Opt
  010be	48 8b 44 24 30	 mov	 rax, QWORD PTR const_stack_size$[rsp]
  010c3	48 d1 e0	 shl	 rax, 1
  010c6	48 89 44 24 30	 mov	 QWORD PTR const_stack_size$[rsp], rax
  010cb	48 b8 ff ff ff
	ff ff ff ff 0f	 mov	 rax, 1152921504606846975 ; 0fffffffffffffffH
  010d5	48 39 44 24 30	 cmp	 QWORD PTR const_stack_size$[rsp], rax
  010da	76 0e		 jbe	 SHORT $LN188@PyCode_Opt
  010dc	48 c7 84 24 30
	01 00 00 00 00
	00 00		 mov	 QWORD PTR tv596[rsp], 0
  010e8	eb 21		 jmp	 SHORT $LN189@PyCode_Opt
$LN188@PyCode_Opt:
  010ea	48 8b 44 24 30	 mov	 rax, QWORD PTR const_stack_size$[rsp]
  010ef	48 c1 e0 03	 shl	 rax, 3
  010f3	48 8b d0	 mov	 rdx, rax
  010f6	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR const_stack$[rsp]
  010fe	e8 00 00 00 00	 call	 PyMem_Realloc
  01103	48 89 84 24 30
	01 00 00	 mov	 QWORD PTR tv596[rsp], rax
$LN189@PyCode_Opt:
  0110b	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR tv596[rsp]
  01113	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR const_stack$[rsp], rax
  0111b	48 b8 ff ff ff
	ff ff ff ff 0f	 mov	 rax, 1152921504606846975 ; 0fffffffffffffffH
  01125	48 39 44 24 30	 cmp	 QWORD PTR const_stack_size$[rsp], rax
  0112a	76 0e		 jbe	 SHORT $LN190@PyCode_Opt
  0112c	48 c7 84 24 38
	01 00 00 00 00
	00 00		 mov	 QWORD PTR tv602[rsp], 0
  01138	eb 21		 jmp	 SHORT $LN191@PyCode_Opt
$LN190@PyCode_Opt:
  0113a	48 8b 44 24 30	 mov	 rax, QWORD PTR const_stack_size$[rsp]
  0113f	48 c1 e0 03	 shl	 rax, 3
  01143	48 8b d0	 mov	 rdx, rax
  01146	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR load_const_stack$[rsp]
  0114e	e8 00 00 00 00	 call	 PyMem_Realloc
  01153	48 89 84 24 38
	01 00 00	 mov	 QWORD PTR tv602[rsp], rax
$LN191@PyCode_Opt:
  0115b	48 8b 84 24 38
	01 00 00	 mov	 rax, QWORD PTR tv602[rsp]
  01163	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR load_const_stack$[rsp], rax
  0116b	48 83 bc 24 b0
	00 00 00 00	 cmp	 QWORD PTR const_stack$[rsp], 0
  01174	74 0b		 je	 SHORT $LN92@PyCode_Opt
  01176	48 83 bc 24 98
	00 00 00 00	 cmp	 QWORD PTR load_const_stack$[rsp], 0
  0117f	75 0a		 jne	 SHORT $LN93@PyCode_Opt
$LN92@PyCode_Opt:
  01181	e8 00 00 00 00	 call	 PyErr_NoMemory
  01186	e9 ba 15 00 00	 jmp	 $exitError$21867
$LN93@PyCode_Opt:
$LN94@PyCode_Opt:
  0118b	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR load_const_stack$[rsp]
  01193	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR const_stack_top$[rsp]
  0119b	48 8b 54 24 48	 mov	 rdx, QWORD PTR i$[rsp]
  011a0	48 89 14 c8	 mov	 QWORD PTR [rax+rcx*8], rdx
  011a4	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR const_stack$[rsp]
  011ac	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR const_stack_top$[rsp]
  011b4	48 8b 94 24 d8
	00 00 00	 mov	 rdx, QWORD PTR _x$22032[rsp]
  011bc	48 89 14 c8	 mov	 QWORD PTR [rax+rcx*8], rdx
  011c0	c7 84 24 a0 00
	00 00 01 00 00
	00		 mov	 DWORD PTR in_consts$[rsp], 1
  011cb	33 c0		 xor	 eax, eax
  011cd	85 c0		 test	 eax, eax
  011cf	0f 85 e0 fd ff
	ff		 jne	 $LN97@PyCode_Opt

; 532  :                     break;

  011d5	e9 cb 10 00 00	 jmp	 $LN136@PyCode_Opt
$LN105@PyCode_Opt:

; 533  :                 }
; 534  :                 if (codestr[i+3] != UNPACK_SEQUENCE  ||
; 535  :                     !ISBASICBLOCK(blocks,i,6) ||
; 536  :                     j != GETARG(codestr, i+3) ||
; 537  :                     opcode == BUILD_SET)

  011da	48 8b 44 24 48	 mov	 rax, QWORD PTR i$[rsp]
  011df	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR codestr$[rsp]
  011e7	48 03 c8	 add	 rcx, rax
  011ea	48 8b c1	 mov	 rax, rcx
  011ed	0f b6 40 03	 movzx	 eax, BYTE PTR [rax+3]
  011f1	83 f8 5c	 cmp	 eax, 92			; 0000005cH
  011f4	75 64		 jne	 SHORT $LN90@PyCode_Opt
  011f6	48 8b 44 24 70	 mov	 rax, QWORD PTR blocks$[rsp]
  011fb	48 8b 4c 24 48	 mov	 rcx, QWORD PTR i$[rsp]
  01200	48 8b 54 24 70	 mov	 rdx, QWORD PTR blocks$[rsp]
  01205	4c 8b 44 24 48	 mov	 r8, QWORD PTR i$[rsp]
  0120a	42 8b 54 82 14	 mov	 edx, DWORD PTR [rdx+r8*4+20]
  0120f	39 14 88	 cmp	 DWORD PTR [rax+rcx*4], edx
  01212	75 46		 jne	 SHORT $LN90@PyCode_Opt
  01214	48 8b 44 24 48	 mov	 rax, QWORD PTR i$[rsp]
  01219	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR codestr$[rsp]
  01221	48 03 c8	 add	 rcx, rax
  01224	48 8b c1	 mov	 rax, rcx
  01227	0f b6 40 05	 movzx	 eax, BYTE PTR [rax+5]
  0122b	c1 e0 08	 shl	 eax, 8
  0122e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR i$[rsp]
  01233	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR codestr$[rsp]
  0123b	48 03 d1	 add	 rdx, rcx
  0123e	48 8b ca	 mov	 rcx, rdx
  01241	0f b6 49 04	 movzx	 ecx, BYTE PTR [rcx+4]
  01245	03 c1		 add	 eax, ecx
  01247	48 98		 cdqe
  01249	48 39 84 24 c0
	00 00 00	 cmp	 QWORD PTR j$[rsp], rax
  01251	75 07		 jne	 SHORT $LN90@PyCode_Opt
  01253	83 7c 24 20 68	 cmp	 DWORD PTR opcode$[rsp], 104 ; 00000068H
  01258	75 05		 jne	 SHORT $LN91@PyCode_Opt
$LN90@PyCode_Opt:

; 538  :                     continue;

  0125a	e9 91 f1 ff ff	 jmp	 $LN143@PyCode_Opt
$LN91@PyCode_Opt:

; 539  :                 if (j == 1) {

  0125f	48 83 bc 24 c0
	00 00 00 01	 cmp	 QWORD PTR j$[rsp], 1
  01268	75 2b		 jne	 SHORT $LN89@PyCode_Opt

; 540  :                     memset(codestr+i, NOP, 6);

  0126a	48 8b 44 24 48	 mov	 rax, QWORD PTR i$[rsp]
  0126f	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR codestr$[rsp]
  01277	48 03 c8	 add	 rcx, rax
  0127a	48 8b c1	 mov	 rax, rcx
  0127d	41 b8 06 00 00
	00		 mov	 r8d, 6
  01283	ba 09 00 00 00	 mov	 edx, 9
  01288	48 8b c8	 mov	 rcx, rax
  0128b	e8 00 00 00 00	 call	 memset
  01290	e9 c9 00 00 00	 jmp	 $LN88@PyCode_Opt
$LN89@PyCode_Opt:

; 541  :                 } else if (j == 2) {

  01295	48 83 bc 24 c0
	00 00 00 02	 cmp	 QWORD PTR j$[rsp], 2
  0129e	75 4f		 jne	 SHORT $LN87@PyCode_Opt

; 542  :                     codestr[i] = ROT_TWO;

  012a0	48 8b 44 24 48	 mov	 rax, QWORD PTR i$[rsp]
  012a5	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR codestr$[rsp]
  012ad	48 03 c8	 add	 rcx, rax
  012b0	48 8b c1	 mov	 rax, rcx
  012b3	c6 00 02	 mov	 BYTE PTR [rax], 2

; 543  :                     memset(codestr+i+1, NOP, 5);

  012b6	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR codestr$[rsp]
  012be	48 8b 4c 24 48	 mov	 rcx, QWORD PTR i$[rsp]
  012c3	48 8d 44 08 01	 lea	 rax, QWORD PTR [rax+rcx+1]
  012c8	41 b8 05 00 00
	00		 mov	 r8d, 5
  012ce	ba 09 00 00 00	 mov	 edx, 9
  012d3	48 8b c8	 mov	 rcx, rax
  012d6	e8 00 00 00 00	 call	 memset
$LN86@PyCode_Opt:

; 544  :                     CONST_STACK_RESET();

  012db	48 c7 84 24 80
	00 00 00 ff ff
	ff ff		 mov	 QWORD PTR const_stack_top$[rsp], -1
  012e7	33 c0		 xor	 eax, eax
  012e9	85 c0		 test	 eax, eax
  012eb	75 ee		 jne	 SHORT $LN86@PyCode_Opt

; 545  :                 } else if (j == 3) {

  012ed	eb 6f		 jmp	 SHORT $LN83@PyCode_Opt
$LN87@PyCode_Opt:
  012ef	48 83 bc 24 c0
	00 00 00 03	 cmp	 QWORD PTR j$[rsp], 3
  012f8	75 64		 jne	 SHORT $LN82@PyCode_Opt

; 546  :                     codestr[i] = ROT_THREE;

  012fa	48 8b 44 24 48	 mov	 rax, QWORD PTR i$[rsp]
  012ff	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR codestr$[rsp]
  01307	48 03 c8	 add	 rcx, rax
  0130a	48 8b c1	 mov	 rax, rcx
  0130d	c6 00 03	 mov	 BYTE PTR [rax], 3

; 547  :                     codestr[i+1] = ROT_TWO;

  01310	48 8b 44 24 48	 mov	 rax, QWORD PTR i$[rsp]
  01315	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR codestr$[rsp]
  0131d	48 03 c8	 add	 rcx, rax
  01320	48 8b c1	 mov	 rax, rcx
  01323	c6 40 01 02	 mov	 BYTE PTR [rax+1], 2

; 548  :                     memset(codestr+i+2, NOP, 4);

  01327	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR codestr$[rsp]
  0132f	48 8b 4c 24 48	 mov	 rcx, QWORD PTR i$[rsp]
  01334	48 8d 44 08 02	 lea	 rax, QWORD PTR [rax+rcx+2]
  01339	41 b8 04 00 00
	00		 mov	 r8d, 4
  0133f	ba 09 00 00 00	 mov	 edx, 9
  01344	48 8b c8	 mov	 rcx, rax
  01347	e8 00 00 00 00	 call	 memset
$LN81@PyCode_Opt:

; 549  :                     CONST_STACK_RESET();

  0134c	48 c7 84 24 80
	00 00 00 ff ff
	ff ff		 mov	 QWORD PTR const_stack_top$[rsp], -1
  01358	33 c0		 xor	 eax, eax
  0135a	85 c0		 test	 eax, eax
  0135c	75 ee		 jne	 SHORT $LN81@PyCode_Opt
$LN82@PyCode_Opt:
$LN83@PyCode_Opt:
$LN88@PyCode_Opt:

; 550  :                 }
; 551  :                 break;

  0135e	e9 42 0f 00 00	 jmp	 $LN136@PyCode_Opt
$LN78@PyCode_Opt:

; 552  : 
; 553  :                 /* Fold binary ops on constants.
; 554  :                    LOAD_CONST c1 LOAD_CONST c2 BINOP -->  LOAD_CONST binop(c1,c2) */
; 555  :             case BINARY_POWER:
; 556  :             case BINARY_MULTIPLY:
; 557  :             case BINARY_TRUE_DIVIDE:
; 558  :             case BINARY_FLOOR_DIVIDE:
; 559  :             case BINARY_MODULO:
; 560  :             case BINARY_ADD:
; 561  :             case BINARY_SUBTRACT:
; 562  :             case BINARY_SUBSCR:
; 563  :             case BINARY_LSHIFT:
; 564  :             case BINARY_RSHIFT:
; 565  :             case BINARY_AND:
; 566  :             case BINARY_XOR:
; 567  :             case BINARY_OR:
; 568  :                 /* NOTE: LOAD_CONST is saved at `i-2` since it has an arg
; 569  :                    while BINOP hasn't */
; 570  :                 h = CONST_STACK_OP_LASTN(2);

  01363	48 83 bc 24 80
	00 00 00 01	 cmp	 QWORD PTR const_stack_top$[rsp], 1
  0136c	7c 1f		 jl	 SHORT $LN192@PyCode_Opt
  0136e	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR load_const_stack$[rsp]
  01376	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR const_stack_top$[rsp]
  0137e	48 8b 44 c8 f8	 mov	 rax, QWORD PTR [rax+rcx*8-8]
  01383	48 89 84 24 40
	01 00 00	 mov	 QWORD PTR tv662[rsp], rax
  0138b	eb 0c		 jmp	 SHORT $LN193@PyCode_Opt
$LN192@PyCode_Opt:
  0138d	48 c7 84 24 40
	01 00 00 ff ff
	ff ff		 mov	 QWORD PTR tv662[rsp], -1
$LN193@PyCode_Opt:
  01399	8b 84 24 40 01
	00 00		 mov	 eax, DWORD PTR tv662[rsp]
  013a0	89 44 24 28	 mov	 DWORD PTR h$[rsp], eax

; 571  :                 assert((h >= 0 || CONST_STACK_LEN() < 2));

  013a4	83 7c 24 28 00	 cmp	 DWORD PTR h$[rsp], 0
  013a9	7d 2d		 jge	 SHORT $LN194@PyCode_Opt
  013ab	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR const_stack_top$[rsp]
  013b3	48 ff c0	 inc	 rax
  013b6	48 83 f8 02	 cmp	 rax, 2
  013ba	7c 1c		 jl	 SHORT $LN194@PyCode_Opt
  013bc	41 b8 3b 02 00
	00		 mov	 r8d, 571		; 0000023bH
  013c2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CK@KIMKCIEN@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAe?$AAe?$AAp?$AAh?$AAo?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  013c9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@FKPINHEA@?$AA?$CI?$AAh?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAC?$AAO?$AAN?$AAS?$AAT?$AA_?$AAS?$AAT?$AAA?$AAC?$AAK?$AA_?$AAL?$AAE?$AAN?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DM?$AA?5?$AA2@
  013d0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  013d6	33 c0		 xor	 eax, eax
$LN194@PyCode_Opt:

; 572  :                 if (h >= 0 &&
; 573  :                     ISBASICBLOCK(blocks, h, i-h+1)  &&
; 574  :                     fold_binops_on_constants(&codestr[i], consts, CONST_STACK_LASTN(2))) {

  013d8	83 7c 24 28 00	 cmp	 DWORD PTR h$[rsp], 0
  013dd	0f 8c 4a 03 00
	00		 jl	 $LN77@PyCode_Opt
  013e3	48 63 44 24 28	 movsxd	 rax, DWORD PTR h$[rsp]
  013e8	48 63 4c 24 28	 movsxd	 rcx, DWORD PTR h$[rsp]
  013ed	48 03 4c 24 48	 add	 rcx, QWORD PTR i$[rsp]
  013f2	48 63 54 24 28	 movsxd	 rdx, DWORD PTR h$[rsp]
  013f7	48 2b ca	 sub	 rcx, rdx
  013fa	48 8b 54 24 70	 mov	 rdx, QWORD PTR blocks$[rsp]
  013ff	4c 8b 44 24 70	 mov	 r8, QWORD PTR blocks$[rsp]
  01404	41 8b 0c 88	 mov	 ecx, DWORD PTR [r8+rcx*4]
  01408	39 0c 82	 cmp	 DWORD PTR [rdx+rax*4], ecx
  0140b	0f 85 1c 03 00
	00		 jne	 $LN77@PyCode_Opt
  01411	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR const_stack$[rsp]
  01419	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR const_stack_top$[rsp]
  01421	48 8d 44 c8 f8	 lea	 rax, QWORD PTR [rax+rcx*8-8]
  01426	48 8b 4c 24 48	 mov	 rcx, QWORD PTR i$[rsp]
  0142b	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR codestr$[rsp]
  01433	48 03 d1	 add	 rdx, rcx
  01436	48 8b ca	 mov	 rcx, rdx
  01439	4c 8b c0	 mov	 r8, rax
  0143c	48 8b 94 24 b8
	01 00 00	 mov	 rdx, QWORD PTR consts$[rsp]
  01444	e8 00 00 00 00	 call	 fold_binops_on_constants
  01449	85 c0		 test	 eax, eax
  0144b	0f 84 dc 02 00
	00		 je	 $LN77@PyCode_Opt

; 575  :                     i -= 2;

  01451	48 8b 44 24 48	 mov	 rax, QWORD PTR i$[rsp]
  01456	48 83 e8 02	 sub	 rax, 2
  0145a	48 89 44 24 48	 mov	 QWORD PTR i$[rsp], rax

; 576  :                     memset(&codestr[h], NOP, i - h);

  0145f	48 63 44 24 28	 movsxd	 rax, DWORD PTR h$[rsp]
  01464	48 8b 4c 24 48	 mov	 rcx, QWORD PTR i$[rsp]
  01469	48 2b c8	 sub	 rcx, rax
  0146c	48 8b c1	 mov	 rax, rcx
  0146f	48 63 4c 24 28	 movsxd	 rcx, DWORD PTR h$[rsp]
  01474	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR codestr$[rsp]
  0147c	48 03 d1	 add	 rdx, rcx
  0147f	48 8b ca	 mov	 rcx, rdx
  01482	4c 8b c0	 mov	 r8, rax
  01485	ba 09 00 00 00	 mov	 edx, 9
  0148a	e8 00 00 00 00	 call	 memset

; 577  :                     assert(codestr[i] == LOAD_CONST);

  0148f	48 8b 44 24 48	 mov	 rax, QWORD PTR i$[rsp]
  01494	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR codestr$[rsp]
  0149c	48 03 c8	 add	 rcx, rax
  0149f	48 8b c1	 mov	 rax, rcx
  014a2	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  014a5	83 f8 64	 cmp	 eax, 100		; 00000064H
  014a8	74 1c		 je	 SHORT $LN195@PyCode_Opt
  014aa	41 b8 41 02 00
	00		 mov	 r8d, 577		; 00000241H
  014b0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CK@KIMKCIEN@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAe?$AAe?$AAp?$AAh?$AAo?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  014b7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DC@LKIFDDKK@?$AAc?$AAo?$AAd?$AAe?$AAs?$AAt?$AAr?$AA?$FL?$AAi?$AA?$FN?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAL?$AAO?$AAA?$AAD?$AA_?$AAC?$AAO?$AAN?$AAS?$AAT?$AA?$AA@
  014be	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  014c4	33 c0		 xor	 eax, eax
$LN195@PyCode_Opt:
$LN76@PyCode_Opt:

; 578  :                     CONST_STACK_POP(2);

  014c6	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR const_stack_top$[rsp]
  014ce	48 ff c0	 inc	 rax
  014d1	48 83 f8 02	 cmp	 rax, 2
  014d5	7d 1c		 jge	 SHORT $LN196@PyCode_Opt
  014d7	41 b8 42 02 00
	00		 mov	 r8d, 578		; 00000242H
  014dd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CK@KIMKCIEN@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAe?$AAe?$AAp?$AAh?$AAo?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  014e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DC@PHEOPNKN@?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAs?$AAt?$AAa?$AAc?$AAk?$AA_?$AAt?$AAo?$AAp?$AA?5?$AA?$CL?$AA?5?$AA1?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA2?$AA?$AA@
  014eb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  014f1	33 c0		 xor	 eax, eax
$LN196@PyCode_Opt:
  014f3	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR const_stack_top$[rsp]
  014fb	48 83 e8 02	 sub	 rax, 2
  014ff	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR const_stack_top$[rsp], rax
  01507	33 c0		 xor	 eax, eax
  01509	85 c0		 test	 eax, eax
  0150b	75 b9		 jne	 SHORT $LN76@PyCode_Opt
$LN73@PyCode_Opt:

; 579  :                     CONST_STACK_PUSH_OP(i);

  0150d	48 8b 44 24 48	 mov	 rax, QWORD PTR i$[rsp]
  01512	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR codestr$[rsp]
  0151a	48 03 c8	 add	 rcx, rax
  0151d	48 8b c1	 mov	 rax, rcx
  01520	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  01523	83 f8 64	 cmp	 eax, 100		; 00000064H
  01526	74 1c		 je	 SHORT $LN197@PyCode_Opt
  01528	41 b8 43 02 00
	00		 mov	 r8d, 579		; 00000243H
  0152e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CK@KIMKCIEN@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAe?$AAe?$AAp?$AAh?$AAo?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  01535	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DC@LKIFDDKK@?$AAc?$AAo?$AAd?$AAe?$AAs?$AAt?$AAr?$AA?$FL?$AAi?$AA?$FN?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAL?$AAO?$AAA?$AAD?$AA_?$AAC?$AAO?$AAN?$AAS?$AAT?$AA?$AA@
  0153c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  01542	33 c0		 xor	 eax, eax
$LN197@PyCode_Opt:
  01544	48 8b 44 24 48	 mov	 rax, QWORD PTR i$[rsp]
  01549	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR codestr$[rsp]
  01551	48 03 c8	 add	 rcx, rax
  01554	48 8b c1	 mov	 rax, rcx
  01557	0f b6 40 02	 movzx	 eax, BYTE PTR [rax+2]
  0155b	c1 e0 08	 shl	 eax, 8
  0155e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR i$[rsp]
  01563	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR codestr$[rsp]
  0156b	48 03 d1	 add	 rdx, rcx
  0156e	48 8b ca	 mov	 rcx, rdx
  01571	0f b6 49 01	 movzx	 ecx, BYTE PTR [rcx+1]
  01575	03 c1		 add	 eax, ecx
  01577	48 98		 cdqe
  01579	48 8b 8c 24 b8
	01 00 00	 mov	 rcx, QWORD PTR consts$[rsp]
  01581	48 39 41 60	 cmp	 QWORD PTR [rcx+96], rax
  01585	7f 1c		 jg	 SHORT $LN198@PyCode_Opt
  01587	41 b8 43 02 00
	00		 mov	 r8d, 579		; 00000243H
  0158d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CK@KIMKCIEN@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAe?$AAe?$AAp?$AAh?$AAo?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  01594	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FK@DMFJGOAB@?$AAP?$AAy?$AAL?$AAi?$AAs?$AAt?$AA_?$AAG?$AAE?$AAT?$AA_?$AAS?$AAI?$AAZ?$AAE?$AA?$CI?$AAc?$AAo?$AAn?$AAs?$AAt?$AAs?$AA?$CJ?$AA?5?$AA?$DO?$AA?5?$AAG?$AAE?$AAT?$AAA?$AAR?$AAG@
  0159b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  015a1	33 c0		 xor	 eax, eax
$LN198@PyCode_Opt:
  015a3	48 8b 44 24 48	 mov	 rax, QWORD PTR i$[rsp]
  015a8	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR codestr$[rsp]
  015b0	48 03 c8	 add	 rcx, rax
  015b3	48 8b c1	 mov	 rax, rcx
  015b6	0f b6 40 02	 movzx	 eax, BYTE PTR [rax+2]
  015ba	c1 e0 08	 shl	 eax, 8
  015bd	48 8b 4c 24 48	 mov	 rcx, QWORD PTR i$[rsp]
  015c2	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR codestr$[rsp]
  015ca	48 03 d1	 add	 rdx, rcx
  015cd	48 8b ca	 mov	 rcx, rdx
  015d0	0f b6 49 01	 movzx	 ecx, BYTE PTR [rcx+1]
  015d4	03 c1		 add	 eax, ecx
  015d6	48 98		 cdqe
  015d8	48 8b 8c 24 b8
	01 00 00	 mov	 rcx, QWORD PTR consts$[rsp]
  015e0	48 8b 49 70	 mov	 rcx, QWORD PTR [rcx+112]
  015e4	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  015e8	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR _x$22083[rsp], rax
  015f0	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR const_stack_top$[rsp]
  015f8	48 ff c0	 inc	 rax
  015fb	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR const_stack_top$[rsp], rax
  01603	48 8b 44 24 30	 mov	 rax, QWORD PTR const_stack_size$[rsp]
  01608	48 39 84 24 80
	00 00 00	 cmp	 QWORD PTR const_stack_top$[rsp], rax
  01610	0f 8c cd 00 00
	00		 jl	 $LN70@PyCode_Opt
  01616	48 8b 44 24 30	 mov	 rax, QWORD PTR const_stack_size$[rsp]
  0161b	48 d1 e0	 shl	 rax, 1
  0161e	48 89 44 24 30	 mov	 QWORD PTR const_stack_size$[rsp], rax
  01623	48 b8 ff ff ff
	ff ff ff ff 0f	 mov	 rax, 1152921504606846975 ; 0fffffffffffffffH
  0162d	48 39 44 24 30	 cmp	 QWORD PTR const_stack_size$[rsp], rax
  01632	76 0e		 jbe	 SHORT $LN199@PyCode_Opt
  01634	48 c7 84 24 48
	01 00 00 00 00
	00 00		 mov	 QWORD PTR tv759[rsp], 0
  01640	eb 21		 jmp	 SHORT $LN200@PyCode_Opt
$LN199@PyCode_Opt:
  01642	48 8b 44 24 30	 mov	 rax, QWORD PTR const_stack_size$[rsp]
  01647	48 c1 e0 03	 shl	 rax, 3
  0164b	48 8b d0	 mov	 rdx, rax
  0164e	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR const_stack$[rsp]
  01656	e8 00 00 00 00	 call	 PyMem_Realloc
  0165b	48 89 84 24 48
	01 00 00	 mov	 QWORD PTR tv759[rsp], rax
$LN200@PyCode_Opt:
  01663	48 8b 84 24 48
	01 00 00	 mov	 rax, QWORD PTR tv759[rsp]
  0166b	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR const_stack$[rsp], rax
  01673	48 b8 ff ff ff
	ff ff ff ff 0f	 mov	 rax, 1152921504606846975 ; 0fffffffffffffffH
  0167d	48 39 44 24 30	 cmp	 QWORD PTR const_stack_size$[rsp], rax
  01682	76 0e		 jbe	 SHORT $LN201@PyCode_Opt
  01684	48 c7 84 24 50
	01 00 00 00 00
	00 00		 mov	 QWORD PTR tv765[rsp], 0
  01690	eb 21		 jmp	 SHORT $LN202@PyCode_Opt
$LN201@PyCode_Opt:
  01692	48 8b 44 24 30	 mov	 rax, QWORD PTR const_stack_size$[rsp]
  01697	48 c1 e0 03	 shl	 rax, 3
  0169b	48 8b d0	 mov	 rdx, rax
  0169e	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR load_const_stack$[rsp]
  016a6	e8 00 00 00 00	 call	 PyMem_Realloc
  016ab	48 89 84 24 50
	01 00 00	 mov	 QWORD PTR tv765[rsp], rax
$LN202@PyCode_Opt:
  016b3	48 8b 84 24 50
	01 00 00	 mov	 rax, QWORD PTR tv765[rsp]
  016bb	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR load_const_stack$[rsp], rax
  016c3	48 83 bc 24 b0
	00 00 00 00	 cmp	 QWORD PTR const_stack$[rsp], 0
  016cc	74 0b		 je	 SHORT $LN68@PyCode_Opt
  016ce	48 83 bc 24 98
	00 00 00 00	 cmp	 QWORD PTR load_const_stack$[rsp], 0
  016d7	75 0a		 jne	 SHORT $LN69@PyCode_Opt
$LN68@PyCode_Opt:
  016d9	e8 00 00 00 00	 call	 PyErr_NoMemory
  016de	e9 62 10 00 00	 jmp	 $exitError$21867
$LN69@PyCode_Opt:
$LN70@PyCode_Opt:
  016e3	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR load_const_stack$[rsp]
  016eb	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR const_stack_top$[rsp]
  016f3	48 8b 54 24 48	 mov	 rdx, QWORD PTR i$[rsp]
  016f8	48 89 14 c8	 mov	 QWORD PTR [rax+rcx*8], rdx
  016fc	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR const_stack$[rsp]
  01704	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR const_stack_top$[rsp]
  0170c	48 8b 94 24 e0
	00 00 00	 mov	 rdx, QWORD PTR _x$22083[rsp]
  01714	48 89 14 c8	 mov	 QWORD PTR [rax+rcx*8], rdx
  01718	c7 84 24 a0 00
	00 00 01 00 00
	00		 mov	 DWORD PTR in_consts$[rsp], 1
  01723	33 c0		 xor	 eax, eax
  01725	85 c0		 test	 eax, eax
  01727	0f 85 e0 fd ff
	ff		 jne	 $LN73@PyCode_Opt
$LN77@PyCode_Opt:

; 580  :                 }
; 581  :                 break;

  0172d	e9 73 0b 00 00	 jmp	 $LN136@PyCode_Opt
$LN67@PyCode_Opt:

; 582  : 
; 583  :                 /* Fold unary ops on constants.
; 584  :                    LOAD_CONST c1  UNARY_OP -->                  LOAD_CONST unary_op(c) */
; 585  :             case UNARY_NEGATIVE:
; 586  :             case UNARY_INVERT:
; 587  :             case UNARY_POSITIVE:
; 588  :                 h = CONST_STACK_OP_LASTN(1);

  01732	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR const_stack_top$[rsp], 0
  0173b	7c 1e		 jl	 SHORT $LN203@PyCode_Opt
  0173d	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR load_const_stack$[rsp]
  01745	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR const_stack_top$[rsp]
  0174d	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  01751	48 89 84 24 58
	01 00 00	 mov	 QWORD PTR tv778[rsp], rax
  01759	eb 0c		 jmp	 SHORT $LN204@PyCode_Opt
$LN203@PyCode_Opt:
  0175b	48 c7 84 24 58
	01 00 00 ff ff
	ff ff		 mov	 QWORD PTR tv778[rsp], -1
$LN204@PyCode_Opt:
  01767	8b 84 24 58 01
	00 00		 mov	 eax, DWORD PTR tv778[rsp]
  0176e	89 44 24 28	 mov	 DWORD PTR h$[rsp], eax

; 589  :                 assert((h >= 0 || CONST_STACK_LEN() < 1));

  01772	83 7c 24 28 00	 cmp	 DWORD PTR h$[rsp], 0
  01777	7d 2d		 jge	 SHORT $LN205@PyCode_Opt
  01779	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR const_stack_top$[rsp]
  01781	48 ff c0	 inc	 rax
  01784	48 83 f8 01	 cmp	 rax, 1
  01788	7c 1c		 jl	 SHORT $LN205@PyCode_Opt
  0178a	41 b8 4d 02 00
	00		 mov	 r8d, 589		; 0000024dH
  01790	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CK@KIMKCIEN@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAe?$AAe?$AAp?$AAh?$AAo?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  01797	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@NMGMKFOO@?$AA?$CI?$AAh?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA0?$AA?5?$AA?$HM?$AA?$HM?$AA?5?$AAC?$AAO?$AAN?$AAS?$AAT?$AA_?$AAS?$AAT?$AAA?$AAC?$AAK?$AA_?$AAL?$AAE?$AAN?$AA?$CI?$AA?$CJ?$AA?5?$AA?$DM?$AA?5?$AA1@
  0179e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  017a4	33 c0		 xor	 eax, eax
$LN205@PyCode_Opt:

; 590  :                 if (h >= 0 &&
; 591  :                     ISBASICBLOCK(blocks, h, i-h+1)  &&
; 592  :                     fold_unaryops_on_constants(&codestr[i-3], consts, CONST_STACK_TOP())) {

  017a6	83 7c 24 28 00	 cmp	 DWORD PTR h$[rsp], 0
  017ab	0f 8c 17 03 00
	00		 jl	 $LN66@PyCode_Opt
  017b1	48 63 44 24 28	 movsxd	 rax, DWORD PTR h$[rsp]
  017b6	48 63 4c 24 28	 movsxd	 rcx, DWORD PTR h$[rsp]
  017bb	48 03 4c 24 48	 add	 rcx, QWORD PTR i$[rsp]
  017c0	48 63 54 24 28	 movsxd	 rdx, DWORD PTR h$[rsp]
  017c5	48 2b ca	 sub	 rcx, rdx
  017c8	48 8b 54 24 70	 mov	 rdx, QWORD PTR blocks$[rsp]
  017cd	4c 8b 44 24 70	 mov	 r8, QWORD PTR blocks$[rsp]
  017d2	41 8b 0c 88	 mov	 ecx, DWORD PTR [r8+rcx*4]
  017d6	39 0c 82	 cmp	 DWORD PTR [rdx+rax*4], ecx
  017d9	0f 85 e9 02 00
	00		 jne	 $LN66@PyCode_Opt
  017df	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR codestr$[rsp]
  017e7	48 8b 4c 24 48	 mov	 rcx, QWORD PTR i$[rsp]
  017ec	48 8d 44 08 fd	 lea	 rax, QWORD PTR [rax+rcx-3]
  017f1	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR const_stack$[rsp]
  017f9	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR const_stack_top$[rsp]
  01801	4c 8b 04 d1	 mov	 r8, QWORD PTR [rcx+rdx*8]
  01805	48 8b 94 24 b8
	01 00 00	 mov	 rdx, QWORD PTR consts$[rsp]
  0180d	48 8b c8	 mov	 rcx, rax
  01810	e8 00 00 00 00	 call	 fold_unaryops_on_constants
  01815	85 c0		 test	 eax, eax
  01817	0f 84 ab 02 00
	00		 je	 $LN66@PyCode_Opt

; 593  :                     i -= 2;

  0181d	48 8b 44 24 48	 mov	 rax, QWORD PTR i$[rsp]
  01822	48 83 e8 02	 sub	 rax, 2
  01826	48 89 44 24 48	 mov	 QWORD PTR i$[rsp], rax

; 594  :                     assert(codestr[i] == LOAD_CONST);

  0182b	48 8b 44 24 48	 mov	 rax, QWORD PTR i$[rsp]
  01830	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR codestr$[rsp]
  01838	48 03 c8	 add	 rcx, rax
  0183b	48 8b c1	 mov	 rax, rcx
  0183e	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  01841	83 f8 64	 cmp	 eax, 100		; 00000064H
  01844	74 1c		 je	 SHORT $LN206@PyCode_Opt
  01846	41 b8 52 02 00
	00		 mov	 r8d, 594		; 00000252H
  0184c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CK@KIMKCIEN@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAe?$AAe?$AAp?$AAh?$AAo?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  01853	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DC@LKIFDDKK@?$AAc?$AAo?$AAd?$AAe?$AAs?$AAt?$AAr?$AA?$FL?$AAi?$AA?$FN?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAL?$AAO?$AAA?$AAD?$AA_?$AAC?$AAO?$AAN?$AAS?$AAT?$AA?$AA@
  0185a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  01860	33 c0		 xor	 eax, eax
$LN206@PyCode_Opt:
$LN65@PyCode_Opt:

; 595  :                     CONST_STACK_POP(1);

  01862	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR const_stack_top$[rsp]
  0186a	48 ff c0	 inc	 rax
  0186d	48 83 f8 01	 cmp	 rax, 1
  01871	7d 1c		 jge	 SHORT $LN207@PyCode_Opt
  01873	41 b8 53 02 00
	00		 mov	 r8d, 595		; 00000253H
  01879	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CK@KIMKCIEN@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAe?$AAe?$AAp?$AAh?$AAo?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  01880	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DC@OFPLFCED@?$AAc?$AAo?$AAn?$AAs?$AAt?$AA_?$AAs?$AAt?$AAa?$AAc?$AAk?$AA_?$AAt?$AAo?$AAp?$AA?5?$AA?$CL?$AA?5?$AA1?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AA1?$AA?$AA@
  01887	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0188d	33 c0		 xor	 eax, eax
$LN207@PyCode_Opt:
  0188f	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR const_stack_top$[rsp]
  01897	48 ff c8	 dec	 rax
  0189a	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR const_stack_top$[rsp], rax
  018a2	33 c0		 xor	 eax, eax
  018a4	85 c0		 test	 eax, eax
  018a6	75 ba		 jne	 SHORT $LN65@PyCode_Opt
$LN62@PyCode_Opt:

; 596  :                     CONST_STACK_PUSH_OP(i);

  018a8	48 8b 44 24 48	 mov	 rax, QWORD PTR i$[rsp]
  018ad	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR codestr$[rsp]
  018b5	48 03 c8	 add	 rcx, rax
  018b8	48 8b c1	 mov	 rax, rcx
  018bb	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  018be	83 f8 64	 cmp	 eax, 100		; 00000064H
  018c1	74 1c		 je	 SHORT $LN208@PyCode_Opt
  018c3	41 b8 54 02 00
	00		 mov	 r8d, 596		; 00000254H
  018c9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CK@KIMKCIEN@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAe?$AAe?$AAp?$AAh?$AAo?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  018d0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DC@LKIFDDKK@?$AAc?$AAo?$AAd?$AAe?$AAs?$AAt?$AAr?$AA?$FL?$AAi?$AA?$FN?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAL?$AAO?$AAA?$AAD?$AA_?$AAC?$AAO?$AAN?$AAS?$AAT?$AA?$AA@
  018d7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  018dd	33 c0		 xor	 eax, eax
$LN208@PyCode_Opt:
  018df	48 8b 44 24 48	 mov	 rax, QWORD PTR i$[rsp]
  018e4	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR codestr$[rsp]
  018ec	48 03 c8	 add	 rcx, rax
  018ef	48 8b c1	 mov	 rax, rcx
  018f2	0f b6 40 02	 movzx	 eax, BYTE PTR [rax+2]
  018f6	c1 e0 08	 shl	 eax, 8
  018f9	48 8b 4c 24 48	 mov	 rcx, QWORD PTR i$[rsp]
  018fe	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR codestr$[rsp]
  01906	48 03 d1	 add	 rdx, rcx
  01909	48 8b ca	 mov	 rcx, rdx
  0190c	0f b6 49 01	 movzx	 ecx, BYTE PTR [rcx+1]
  01910	03 c1		 add	 eax, ecx
  01912	48 98		 cdqe
  01914	48 8b 8c 24 b8
	01 00 00	 mov	 rcx, QWORD PTR consts$[rsp]
  0191c	48 39 41 60	 cmp	 QWORD PTR [rcx+96], rax
  01920	7f 1c		 jg	 SHORT $LN209@PyCode_Opt
  01922	41 b8 54 02 00
	00		 mov	 r8d, 596		; 00000254H
  01928	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CK@KIMKCIEN@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAe?$AAe?$AAp?$AAh?$AAo?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  0192f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1FK@DMFJGOAB@?$AAP?$AAy?$AAL?$AAi?$AAs?$AAt?$AA_?$AAG?$AAE?$AAT?$AA_?$AAS?$AAI?$AAZ?$AAE?$AA?$CI?$AAc?$AAo?$AAn?$AAs?$AAt?$AAs?$AA?$CJ?$AA?5?$AA?$DO?$AA?5?$AAG?$AAE?$AAT?$AAA?$AAR?$AAG@
  01936	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0193c	33 c0		 xor	 eax, eax
$LN209@PyCode_Opt:
  0193e	48 8b 44 24 48	 mov	 rax, QWORD PTR i$[rsp]
  01943	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR codestr$[rsp]
  0194b	48 03 c8	 add	 rcx, rax
  0194e	48 8b c1	 mov	 rax, rcx
  01951	0f b6 40 02	 movzx	 eax, BYTE PTR [rax+2]
  01955	c1 e0 08	 shl	 eax, 8
  01958	48 8b 4c 24 48	 mov	 rcx, QWORD PTR i$[rsp]
  0195d	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR codestr$[rsp]
  01965	48 03 d1	 add	 rdx, rcx
  01968	48 8b ca	 mov	 rcx, rdx
  0196b	0f b6 49 01	 movzx	 ecx, BYTE PTR [rcx+1]
  0196f	03 c1		 add	 eax, ecx
  01971	48 98		 cdqe
  01973	48 8b 8c 24 b8
	01 00 00	 mov	 rcx, QWORD PTR consts$[rsp]
  0197b	48 8b 49 70	 mov	 rcx, QWORD PTR [rcx+112]
  0197f	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  01983	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR _x$22120[rsp], rax
  0198b	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR const_stack_top$[rsp]
  01993	48 ff c0	 inc	 rax
  01996	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR const_stack_top$[rsp], rax
  0199e	48 8b 44 24 30	 mov	 rax, QWORD PTR const_stack_size$[rsp]
  019a3	48 39 84 24 80
	00 00 00	 cmp	 QWORD PTR const_stack_top$[rsp], rax
  019ab	0f 8c cd 00 00
	00		 jl	 $LN59@PyCode_Opt
  019b1	48 8b 44 24 30	 mov	 rax, QWORD PTR const_stack_size$[rsp]
  019b6	48 d1 e0	 shl	 rax, 1
  019b9	48 89 44 24 30	 mov	 QWORD PTR const_stack_size$[rsp], rax
  019be	48 b8 ff ff ff
	ff ff ff ff 0f	 mov	 rax, 1152921504606846975 ; 0fffffffffffffffH
  019c8	48 39 44 24 30	 cmp	 QWORD PTR const_stack_size$[rsp], rax
  019cd	76 0e		 jbe	 SHORT $LN210@PyCode_Opt
  019cf	48 c7 84 24 60
	01 00 00 00 00
	00 00		 mov	 QWORD PTR tv867[rsp], 0
  019db	eb 21		 jmp	 SHORT $LN211@PyCode_Opt
$LN210@PyCode_Opt:
  019dd	48 8b 44 24 30	 mov	 rax, QWORD PTR const_stack_size$[rsp]
  019e2	48 c1 e0 03	 shl	 rax, 3
  019e6	48 8b d0	 mov	 rdx, rax
  019e9	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR const_stack$[rsp]
  019f1	e8 00 00 00 00	 call	 PyMem_Realloc
  019f6	48 89 84 24 60
	01 00 00	 mov	 QWORD PTR tv867[rsp], rax
$LN211@PyCode_Opt:
  019fe	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR tv867[rsp]
  01a06	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR const_stack$[rsp], rax
  01a0e	48 b8 ff ff ff
	ff ff ff ff 0f	 mov	 rax, 1152921504606846975 ; 0fffffffffffffffH
  01a18	48 39 44 24 30	 cmp	 QWORD PTR const_stack_size$[rsp], rax
  01a1d	76 0e		 jbe	 SHORT $LN212@PyCode_Opt
  01a1f	48 c7 84 24 68
	01 00 00 00 00
	00 00		 mov	 QWORD PTR tv873[rsp], 0
  01a2b	eb 21		 jmp	 SHORT $LN213@PyCode_Opt
$LN212@PyCode_Opt:
  01a2d	48 8b 44 24 30	 mov	 rax, QWORD PTR const_stack_size$[rsp]
  01a32	48 c1 e0 03	 shl	 rax, 3
  01a36	48 8b d0	 mov	 rdx, rax
  01a39	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR load_const_stack$[rsp]
  01a41	e8 00 00 00 00	 call	 PyMem_Realloc
  01a46	48 89 84 24 68
	01 00 00	 mov	 QWORD PTR tv873[rsp], rax
$LN213@PyCode_Opt:
  01a4e	48 8b 84 24 68
	01 00 00	 mov	 rax, QWORD PTR tv873[rsp]
  01a56	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR load_const_stack$[rsp], rax
  01a5e	48 83 bc 24 b0
	00 00 00 00	 cmp	 QWORD PTR const_stack$[rsp], 0
  01a67	74 0b		 je	 SHORT $LN57@PyCode_Opt
  01a69	48 83 bc 24 98
	00 00 00 00	 cmp	 QWORD PTR load_const_stack$[rsp], 0
  01a72	75 0a		 jne	 SHORT $LN58@PyCode_Opt
$LN57@PyCode_Opt:
  01a74	e8 00 00 00 00	 call	 PyErr_NoMemory
  01a79	e9 c7 0c 00 00	 jmp	 $exitError$21867
$LN58@PyCode_Opt:
$LN59@PyCode_Opt:
  01a7e	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR load_const_stack$[rsp]
  01a86	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR const_stack_top$[rsp]
  01a8e	48 8b 54 24 48	 mov	 rdx, QWORD PTR i$[rsp]
  01a93	48 89 14 c8	 mov	 QWORD PTR [rax+rcx*8], rdx
  01a97	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR const_stack$[rsp]
  01a9f	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR const_stack_top$[rsp]
  01aa7	48 8b 94 24 e8
	00 00 00	 mov	 rdx, QWORD PTR _x$22120[rsp]
  01aaf	48 89 14 c8	 mov	 QWORD PTR [rax+rcx*8], rdx
  01ab3	c7 84 24 a0 00
	00 00 01 00 00
	00		 mov	 DWORD PTR in_consts$[rsp], 1
  01abe	33 c0		 xor	 eax, eax
  01ac0	85 c0		 test	 eax, eax
  01ac2	0f 85 e0 fd ff
	ff		 jne	 $LN62@PyCode_Opt
$LN66@PyCode_Opt:

; 597  :                 }
; 598  :                 break;

  01ac8	e9 d8 07 00 00	 jmp	 $LN136@PyCode_Opt
$LN56@PyCode_Opt:

; 599  : 
; 600  :                 /* Simplify conditional jump to conditional jump where the
; 601  :                    result of the first test implies the success of a similar
; 602  :                    test or the failure of the opposite test.
; 603  :                    Arises in code like:
; 604  :                    "if a and b:"
; 605  :                    "if a or b:"
; 606  :                    "a and b or c"
; 607  :                    "(a and b) and c"
; 608  :                    x:JUMP_IF_FALSE_OR_POP y   y:JUMP_IF_FALSE_OR_POP z
; 609  :                       -->  x:JUMP_IF_FALSE_OR_POP z
; 610  :                    x:JUMP_IF_FALSE_OR_POP y   y:JUMP_IF_TRUE_OR_POP z
; 611  :                       -->  x:POP_JUMP_IF_FALSE y+3
; 612  :                    where y+3 is the instruction following the second test.
; 613  :                 */
; 614  :             case JUMP_IF_FALSE_OR_POP:
; 615  :             case JUMP_IF_TRUE_OR_POP:
; 616  :                 tgt = GETJUMPTGT(codestr, i);

  01acd	48 8b 44 24 48	 mov	 rax, QWORD PTR i$[rsp]
  01ad2	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR codestr$[rsp]
  01ada	48 03 c8	 add	 rcx, rax
  01add	48 8b c1	 mov	 rax, rcx
  01ae0	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  01ae3	83 f8 71	 cmp	 eax, 113		; 00000071H
  01ae6	0f 84 9a 00 00
	00		 je	 $LN214@PyCode_Opt
  01aec	48 8b 44 24 48	 mov	 rax, QWORD PTR i$[rsp]
  01af1	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR codestr$[rsp]
  01af9	48 03 c8	 add	 rcx, rax
  01afc	48 8b c1	 mov	 rax, rcx
  01aff	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  01b02	83 f8 77	 cmp	 eax, 119		; 00000077H
  01b05	74 7f		 je	 SHORT $LN214@PyCode_Opt
  01b07	48 8b 44 24 48	 mov	 rax, QWORD PTR i$[rsp]
  01b0c	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR codestr$[rsp]
  01b14	48 03 c8	 add	 rcx, rax
  01b17	48 8b c1	 mov	 rax, rcx
  01b1a	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  01b1d	83 f8 72	 cmp	 eax, 114		; 00000072H
  01b20	74 64		 je	 SHORT $LN214@PyCode_Opt
  01b22	48 8b 44 24 48	 mov	 rax, QWORD PTR i$[rsp]
  01b27	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR codestr$[rsp]
  01b2f	48 03 c8	 add	 rcx, rax
  01b32	48 8b c1	 mov	 rax, rcx
  01b35	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  01b38	83 f8 73	 cmp	 eax, 115		; 00000073H
  01b3b	74 49		 je	 SHORT $LN214@PyCode_Opt
  01b3d	48 8b 44 24 48	 mov	 rax, QWORD PTR i$[rsp]
  01b42	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR codestr$[rsp]
  01b4a	48 03 c8	 add	 rcx, rax
  01b4d	48 8b c1	 mov	 rax, rcx
  01b50	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  01b53	83 f8 6f	 cmp	 eax, 111		; 0000006fH
  01b56	74 2e		 je	 SHORT $LN214@PyCode_Opt
  01b58	48 8b 44 24 48	 mov	 rax, QWORD PTR i$[rsp]
  01b5d	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR codestr$[rsp]
  01b65	48 03 c8	 add	 rcx, rax
  01b68	48 8b c1	 mov	 rax, rcx
  01b6b	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  01b6e	83 f8 70	 cmp	 eax, 112		; 00000070H
  01b71	74 13		 je	 SHORT $LN214@PyCode_Opt
  01b73	48 8b 44 24 48	 mov	 rax, QWORD PTR i$[rsp]
  01b78	48 83 c0 03	 add	 rax, 3
  01b7c	48 89 84 24 70
	01 00 00	 mov	 QWORD PTR tv909[rsp], rax
  01b84	eb 0c		 jmp	 SHORT $LN215@PyCode_Opt
$LN214@PyCode_Opt:
  01b86	48 c7 84 24 70
	01 00 00 00 00
	00 00		 mov	 QWORD PTR tv909[rsp], 0
$LN215@PyCode_Opt:
  01b92	48 8b 44 24 48	 mov	 rax, QWORD PTR i$[rsp]
  01b97	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR codestr$[rsp]
  01b9f	48 03 c8	 add	 rcx, rax
  01ba2	48 8b c1	 mov	 rax, rcx
  01ba5	0f b6 40 02	 movzx	 eax, BYTE PTR [rax+2]
  01ba9	c1 e0 08	 shl	 eax, 8
  01bac	48 8b 4c 24 48	 mov	 rcx, QWORD PTR i$[rsp]
  01bb1	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR codestr$[rsp]
  01bb9	48 03 d1	 add	 rdx, rcx
  01bbc	48 8b ca	 mov	 rcx, rdx
  01bbf	0f b6 49 01	 movzx	 ecx, BYTE PTR [rcx+1]
  01bc3	03 c1		 add	 eax, ecx
  01bc5	48 98		 cdqe
  01bc7	48 03 84 24 70
	01 00 00	 add	 rax, QWORD PTR tv909[rsp]
  01bcf	89 44 24 54	 mov	 DWORD PTR tgt$[rsp], eax

; 617  :                 j = codestr[tgt];

  01bd3	48 63 44 24 54	 movsxd	 rax, DWORD PTR tgt$[rsp]
  01bd8	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR codestr$[rsp]
  01be0	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  01be4	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR j$[rsp], rax

; 618  :                 if (CONDITIONAL_JUMP(j)) {

  01bec	48 83 bc 24 c0
	00 00 00 72	 cmp	 QWORD PTR j$[rsp], 114	; 00000072H
  01bf5	74 25		 je	 SHORT $LN54@PyCode_Opt
  01bf7	48 83 bc 24 c0
	00 00 00 73	 cmp	 QWORD PTR j$[rsp], 115	; 00000073H
  01c00	74 1a		 je	 SHORT $LN54@PyCode_Opt
  01c02	48 83 bc 24 c0
	00 00 00 6f	 cmp	 QWORD PTR j$[rsp], 111	; 0000006fH
  01c0b	74 0f		 je	 SHORT $LN54@PyCode_Opt
  01c0d	48 83 bc 24 c0
	00 00 00 70	 cmp	 QWORD PTR j$[rsp], 112	; 00000070H
  01c16	0f 85 2d 02 00
	00		 jne	 $LN55@PyCode_Opt
$LN54@PyCode_Opt:

; 619  :                     /* NOTE: all possible jumps here are
; 620  :                        absolute! */
; 621  :                     if (JUMPS_ON_TRUE(j) == JUMPS_ON_TRUE(opcode)) {

  01c1c	48 83 bc 24 c0
	00 00 00 73	 cmp	 QWORD PTR j$[rsp], 115	; 00000073H
  01c25	74 18		 je	 SHORT $LN216@PyCode_Opt
  01c27	48 83 bc 24 c0
	00 00 00 70	 cmp	 QWORD PTR j$[rsp], 112	; 00000070H
  01c30	74 0d		 je	 SHORT $LN216@PyCode_Opt
  01c32	c7 84 24 78 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv924[rsp], 0
  01c3d	eb 0b		 jmp	 SHORT $LN219@PyCode_Opt
$LN216@PyCode_Opt:
  01c3f	c7 84 24 78 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv924[rsp], 1
$LN219@PyCode_Opt:
  01c4a	83 7c 24 20 73	 cmp	 DWORD PTR opcode$[rsp], 115 ; 00000073H
  01c4f	74 14		 je	 SHORT $LN217@PyCode_Opt
  01c51	83 7c 24 20 70	 cmp	 DWORD PTR opcode$[rsp], 112 ; 00000070H
  01c56	74 0d		 je	 SHORT $LN217@PyCode_Opt
  01c58	c7 84 24 7c 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv923[rsp], 0
  01c63	eb 0b		 jmp	 SHORT $LN218@PyCode_Opt
$LN217@PyCode_Opt:
  01c65	c7 84 24 7c 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv923[rsp], 1
$LN218@PyCode_Opt:
  01c70	8b 84 24 7c 01
	00 00		 mov	 eax, DWORD PTR tv923[rsp]
  01c77	39 84 24 78 01
	00 00		 cmp	 DWORD PTR tv924[rsp], eax
  01c7e	0f 85 42 01 00
	00		 jne	 $LN53@PyCode_Opt

; 622  :                         /* The second jump will be
; 623  :                            taken iff the first is. */
; 624  :                         tgttgt = GETJUMPTGT(codestr, tgt);

  01c84	48 63 44 24 54	 movsxd	 rax, DWORD PTR tgt$[rsp]
  01c89	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR codestr$[rsp]
  01c91	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  01c95	83 f8 71	 cmp	 eax, 113		; 00000071H
  01c98	74 7e		 je	 SHORT $LN220@PyCode_Opt
  01c9a	48 63 44 24 54	 movsxd	 rax, DWORD PTR tgt$[rsp]
  01c9f	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR codestr$[rsp]
  01ca7	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  01cab	83 f8 77	 cmp	 eax, 119		; 00000077H
  01cae	74 68		 je	 SHORT $LN220@PyCode_Opt
  01cb0	48 63 44 24 54	 movsxd	 rax, DWORD PTR tgt$[rsp]
  01cb5	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR codestr$[rsp]
  01cbd	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  01cc1	83 f8 72	 cmp	 eax, 114		; 00000072H
  01cc4	74 52		 je	 SHORT $LN220@PyCode_Opt
  01cc6	48 63 44 24 54	 movsxd	 rax, DWORD PTR tgt$[rsp]
  01ccb	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR codestr$[rsp]
  01cd3	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  01cd7	83 f8 73	 cmp	 eax, 115		; 00000073H
  01cda	74 3c		 je	 SHORT $LN220@PyCode_Opt
  01cdc	48 63 44 24 54	 movsxd	 rax, DWORD PTR tgt$[rsp]
  01ce1	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR codestr$[rsp]
  01ce9	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  01ced	83 f8 6f	 cmp	 eax, 111		; 0000006fH
  01cf0	74 26		 je	 SHORT $LN220@PyCode_Opt
  01cf2	48 63 44 24 54	 movsxd	 rax, DWORD PTR tgt$[rsp]
  01cf7	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR codestr$[rsp]
  01cff	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  01d03	83 f8 70	 cmp	 eax, 112		; 00000070H
  01d06	74 10		 je	 SHORT $LN220@PyCode_Opt
  01d08	8b 44 24 54	 mov	 eax, DWORD PTR tgt$[rsp]
  01d0c	83 c0 03	 add	 eax, 3
  01d0f	89 84 24 80 01
	00 00		 mov	 DWORD PTR tv961[rsp], eax
  01d16	eb 0b		 jmp	 SHORT $LN221@PyCode_Opt
$LN220@PyCode_Opt:
  01d18	c7 84 24 80 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv961[rsp], 0
$LN221@PyCode_Opt:
  01d23	8b 44 24 54	 mov	 eax, DWORD PTR tgt$[rsp]
  01d27	83 c0 02	 add	 eax, 2
  01d2a	48 98		 cdqe
  01d2c	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR codestr$[rsp]
  01d34	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  01d38	c1 e0 08	 shl	 eax, 8
  01d3b	8b 4c 24 54	 mov	 ecx, DWORD PTR tgt$[rsp]
  01d3f	ff c1		 inc	 ecx
  01d41	48 63 c9	 movsxd	 rcx, ecx
  01d44	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR codestr$[rsp]
  01d4c	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  01d50	8b 94 24 80 01
	00 00		 mov	 edx, DWORD PTR tv961[rsp]
  01d57	03 d0		 add	 edx, eax
  01d59	8b c2		 mov	 eax, edx
  01d5b	03 c8		 add	 ecx, eax
  01d5d	8b c1		 mov	 eax, ecx
  01d5f	89 44 24 78	 mov	 DWORD PTR tgttgt$[rsp], eax

; 625  :                         /* The current opcode inherits
; 626  :                            its target's stack behaviour */
; 627  :                         codestr[i] = j;

  01d63	48 8b 44 24 48	 mov	 rax, QWORD PTR i$[rsp]
  01d68	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR codestr$[rsp]
  01d70	48 03 c8	 add	 rcx, rax
  01d73	48 8b c1	 mov	 rax, rcx
  01d76	0f b6 8c 24 c0
	00 00 00	 movzx	 ecx, BYTE PTR j$[rsp]
  01d7e	88 08		 mov	 BYTE PTR [rax], cl

; 628  :                         SETARG(codestr, i, tgttgt);

  01d80	8b 44 24 78	 mov	 eax, DWORD PTR tgttgt$[rsp]
  01d84	c1 f8 08	 sar	 eax, 8
  01d87	48 8b 4c 24 48	 mov	 rcx, QWORD PTR i$[rsp]
  01d8c	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR codestr$[rsp]
  01d94	48 03 d1	 add	 rdx, rcx
  01d97	48 8b ca	 mov	 rcx, rdx
  01d9a	88 41 02	 mov	 BYTE PTR [rcx+2], al
  01d9d	8b 44 24 78	 mov	 eax, DWORD PTR tgttgt$[rsp]
  01da1	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  01da6	48 8b 4c 24 48	 mov	 rcx, QWORD PTR i$[rsp]
  01dab	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR codestr$[rsp]
  01db3	48 03 d1	 add	 rdx, rcx
  01db6	48 8b ca	 mov	 rcx, rdx
  01db9	88 41 01	 mov	 BYTE PTR [rcx+1], al

; 629  :                         goto reoptimize_current;

  01dbc	e9 8d e6 ff ff	 jmp	 $LN232@PyCode_Opt

; 630  :                     } else {

  01dc1	e9 83 00 00 00	 jmp	 $LN52@PyCode_Opt
$LN53@PyCode_Opt:

; 631  :                         /* The second jump is not taken
; 632  :                            if the first is (so jump past
; 633  :                            it), and all conditional
; 634  :                            jumps pop their argument when
; 635  :                            they're not taken (so change
; 636  :                            the first jump to pop its
; 637  :                            argument when it's taken). */
; 638  :                         if (JUMPS_ON_TRUE(opcode))

  01dc6	83 7c 24 20 73	 cmp	 DWORD PTR opcode$[rsp], 115 ; 00000073H
  01dcb	74 07		 je	 SHORT $LN50@PyCode_Opt
  01dcd	83 7c 24 20 70	 cmp	 DWORD PTR opcode$[rsp], 112 ; 00000070H
  01dd2	75 18		 jne	 SHORT $LN51@PyCode_Opt
$LN50@PyCode_Opt:

; 639  :                             codestr[i] = POP_JUMP_IF_TRUE;

  01dd4	48 8b 44 24 48	 mov	 rax, QWORD PTR i$[rsp]
  01dd9	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR codestr$[rsp]
  01de1	48 03 c8	 add	 rcx, rax
  01de4	48 8b c1	 mov	 rax, rcx
  01de7	c6 00 73	 mov	 BYTE PTR [rax], 115	; 00000073H

; 640  :                         else

  01dea	eb 16		 jmp	 SHORT $LN49@PyCode_Opt
$LN51@PyCode_Opt:

; 641  :                             codestr[i] = POP_JUMP_IF_FALSE;

  01dec	48 8b 44 24 48	 mov	 rax, QWORD PTR i$[rsp]
  01df1	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR codestr$[rsp]
  01df9	48 03 c8	 add	 rcx, rax
  01dfc	48 8b c1	 mov	 rax, rcx
  01dff	c6 00 72	 mov	 BYTE PTR [rax], 114	; 00000072H
$LN49@PyCode_Opt:

; 642  :                         SETARG(codestr, i, (tgt + 3));

  01e02	8b 44 24 54	 mov	 eax, DWORD PTR tgt$[rsp]
  01e06	83 c0 03	 add	 eax, 3
  01e09	c1 f8 08	 sar	 eax, 8
  01e0c	48 8b 4c 24 48	 mov	 rcx, QWORD PTR i$[rsp]
  01e11	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR codestr$[rsp]
  01e19	48 03 d1	 add	 rdx, rcx
  01e1c	48 8b ca	 mov	 rcx, rdx
  01e1f	88 41 02	 mov	 BYTE PTR [rcx+2], al
  01e22	8b 44 24 54	 mov	 eax, DWORD PTR tgt$[rsp]
  01e26	83 c0 03	 add	 eax, 3
  01e29	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  01e2e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR i$[rsp]
  01e33	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR codestr$[rsp]
  01e3b	48 03 d1	 add	 rdx, rcx
  01e3e	48 8b ca	 mov	 rcx, rdx
  01e41	88 41 01	 mov	 BYTE PTR [rcx+1], al

; 643  :                         goto reoptimize_current;

  01e44	e9 05 e6 ff ff	 jmp	 $LN233@PyCode_Opt
$LN52@PyCode_Opt:
$LN55@PyCode_Opt:
$LN48@PyCode_Opt:

; 644  :                     }
; 645  :                 }
; 646  :                 /* Intentional fallthrough */
; 647  : 
; 648  :                 /* Replace jumps to unconditional jumps */
; 649  :             case POP_JUMP_IF_FALSE:
; 650  :             case POP_JUMP_IF_TRUE:
; 651  :             case FOR_ITER:
; 652  :             case JUMP_FORWARD:
; 653  :             case JUMP_ABSOLUTE:
; 654  :             case CONTINUE_LOOP:
; 655  :             case SETUP_LOOP:
; 656  :             case SETUP_EXCEPT:
; 657  :             case SETUP_FINALLY:
; 658  :             case SETUP_WITH:
; 659  :                 tgt = GETJUMPTGT(codestr, i);

  01e49	48 8b 44 24 48	 mov	 rax, QWORD PTR i$[rsp]
  01e4e	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR codestr$[rsp]
  01e56	48 03 c8	 add	 rcx, rax
  01e59	48 8b c1	 mov	 rax, rcx
  01e5c	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  01e5f	83 f8 71	 cmp	 eax, 113		; 00000071H
  01e62	0f 84 9a 00 00
	00		 je	 $LN222@PyCode_Opt
  01e68	48 8b 44 24 48	 mov	 rax, QWORD PTR i$[rsp]
  01e6d	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR codestr$[rsp]
  01e75	48 03 c8	 add	 rcx, rax
  01e78	48 8b c1	 mov	 rax, rcx
  01e7b	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  01e7e	83 f8 77	 cmp	 eax, 119		; 00000077H
  01e81	74 7f		 je	 SHORT $LN222@PyCode_Opt
  01e83	48 8b 44 24 48	 mov	 rax, QWORD PTR i$[rsp]
  01e88	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR codestr$[rsp]
  01e90	48 03 c8	 add	 rcx, rax
  01e93	48 8b c1	 mov	 rax, rcx
  01e96	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  01e99	83 f8 72	 cmp	 eax, 114		; 00000072H
  01e9c	74 64		 je	 SHORT $LN222@PyCode_Opt
  01e9e	48 8b 44 24 48	 mov	 rax, QWORD PTR i$[rsp]
  01ea3	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR codestr$[rsp]
  01eab	48 03 c8	 add	 rcx, rax
  01eae	48 8b c1	 mov	 rax, rcx
  01eb1	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  01eb4	83 f8 73	 cmp	 eax, 115		; 00000073H
  01eb7	74 49		 je	 SHORT $LN222@PyCode_Opt
  01eb9	48 8b 44 24 48	 mov	 rax, QWORD PTR i$[rsp]
  01ebe	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR codestr$[rsp]
  01ec6	48 03 c8	 add	 rcx, rax
  01ec9	48 8b c1	 mov	 rax, rcx
  01ecc	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  01ecf	83 f8 6f	 cmp	 eax, 111		; 0000006fH
  01ed2	74 2e		 je	 SHORT $LN222@PyCode_Opt
  01ed4	48 8b 44 24 48	 mov	 rax, QWORD PTR i$[rsp]
  01ed9	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR codestr$[rsp]
  01ee1	48 03 c8	 add	 rcx, rax
  01ee4	48 8b c1	 mov	 rax, rcx
  01ee7	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  01eea	83 f8 70	 cmp	 eax, 112		; 00000070H
  01eed	74 13		 je	 SHORT $LN222@PyCode_Opt
  01eef	48 8b 44 24 48	 mov	 rax, QWORD PTR i$[rsp]
  01ef4	48 83 c0 03	 add	 rax, 3
  01ef8	48 89 84 24 88
	01 00 00	 mov	 QWORD PTR tv1014[rsp], rax
  01f00	eb 0c		 jmp	 SHORT $LN223@PyCode_Opt
$LN222@PyCode_Opt:
  01f02	48 c7 84 24 88
	01 00 00 00 00
	00 00		 mov	 QWORD PTR tv1014[rsp], 0
$LN223@PyCode_Opt:
  01f0e	48 8b 44 24 48	 mov	 rax, QWORD PTR i$[rsp]
  01f13	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR codestr$[rsp]
  01f1b	48 03 c8	 add	 rcx, rax
  01f1e	48 8b c1	 mov	 rax, rcx
  01f21	0f b6 40 02	 movzx	 eax, BYTE PTR [rax+2]
  01f25	c1 e0 08	 shl	 eax, 8
  01f28	48 8b 4c 24 48	 mov	 rcx, QWORD PTR i$[rsp]
  01f2d	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR codestr$[rsp]
  01f35	48 03 d1	 add	 rdx, rcx
  01f38	48 8b ca	 mov	 rcx, rdx
  01f3b	0f b6 49 01	 movzx	 ecx, BYTE PTR [rcx+1]
  01f3f	03 c1		 add	 eax, ecx
  01f41	48 98		 cdqe
  01f43	48 03 84 24 88
	01 00 00	 add	 rax, QWORD PTR tv1014[rsp]
  01f4b	89 44 24 54	 mov	 DWORD PTR tgt$[rsp], eax

; 660  :                 /* Replace JUMP_* to a RETURN into just a RETURN */
; 661  :                 if (UNCONDITIONAL_JUMP(opcode) &&
; 662  :                     codestr[tgt] == RETURN_VALUE) {

  01f4f	83 7c 24 20 71	 cmp	 DWORD PTR opcode$[rsp], 113 ; 00000071H
  01f54	74 07		 je	 SHORT $LN46@PyCode_Opt
  01f56	83 7c 24 20 6e	 cmp	 DWORD PTR opcode$[rsp], 110 ; 0000006eH
  01f5b	75 56		 jne	 SHORT $LN47@PyCode_Opt
$LN46@PyCode_Opt:
  01f5d	48 63 44 24 54	 movsxd	 rax, DWORD PTR tgt$[rsp]
  01f62	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR codestr$[rsp]
  01f6a	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  01f6e	83 f8 53	 cmp	 eax, 83			; 00000053H
  01f71	75 40		 jne	 SHORT $LN47@PyCode_Opt

; 663  :                     codestr[i] = RETURN_VALUE;

  01f73	48 8b 44 24 48	 mov	 rax, QWORD PTR i$[rsp]
  01f78	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR codestr$[rsp]
  01f80	48 03 c8	 add	 rcx, rax
  01f83	48 8b c1	 mov	 rax, rcx
  01f86	c6 00 53	 mov	 BYTE PTR [rax], 83	; 00000053H

; 664  :                     memset(codestr+i+1, NOP, 2);

  01f89	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR codestr$[rsp]
  01f91	48 8b 4c 24 48	 mov	 rcx, QWORD PTR i$[rsp]
  01f96	48 8d 44 08 01	 lea	 rax, QWORD PTR [rax+rcx+1]
  01f9b	41 b8 02 00 00
	00		 mov	 r8d, 2
  01fa1	ba 09 00 00 00	 mov	 edx, 9
  01fa6	48 8b c8	 mov	 rcx, rax
  01fa9	e8 00 00 00 00	 call	 memset

; 665  :                     continue;

  01fae	e9 3d e4 ff ff	 jmp	 $LN143@PyCode_Opt
$LN47@PyCode_Opt:

; 666  :                 }
; 667  :                 if (!UNCONDITIONAL_JUMP(codestr[tgt]))

  01fb3	48 63 44 24 54	 movsxd	 rax, DWORD PTR tgt$[rsp]
  01fb8	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR codestr$[rsp]
  01fc0	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  01fc4	83 f8 71	 cmp	 eax, 113		; 00000071H
  01fc7	74 1b		 je	 SHORT $LN45@PyCode_Opt
  01fc9	48 63 44 24 54	 movsxd	 rax, DWORD PTR tgt$[rsp]
  01fce	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR codestr$[rsp]
  01fd6	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  01fda	83 f8 6e	 cmp	 eax, 110		; 0000006eH
  01fdd	74 05		 je	 SHORT $LN45@PyCode_Opt

; 668  :                     continue;

  01fdf	e9 0c e4 ff ff	 jmp	 $LN143@PyCode_Opt
$LN45@PyCode_Opt:

; 669  :                 tgttgt = GETJUMPTGT(codestr, tgt);

  01fe4	48 63 44 24 54	 movsxd	 rax, DWORD PTR tgt$[rsp]
  01fe9	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR codestr$[rsp]
  01ff1	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  01ff5	83 f8 71	 cmp	 eax, 113		; 00000071H
  01ff8	74 7e		 je	 SHORT $LN224@PyCode_Opt
  01ffa	48 63 44 24 54	 movsxd	 rax, DWORD PTR tgt$[rsp]
  01fff	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR codestr$[rsp]
  02007	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0200b	83 f8 77	 cmp	 eax, 119		; 00000077H
  0200e	74 68		 je	 SHORT $LN224@PyCode_Opt
  02010	48 63 44 24 54	 movsxd	 rax, DWORD PTR tgt$[rsp]
  02015	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR codestr$[rsp]
  0201d	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  02021	83 f8 72	 cmp	 eax, 114		; 00000072H
  02024	74 52		 je	 SHORT $LN224@PyCode_Opt
  02026	48 63 44 24 54	 movsxd	 rax, DWORD PTR tgt$[rsp]
  0202b	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR codestr$[rsp]
  02033	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  02037	83 f8 73	 cmp	 eax, 115		; 00000073H
  0203a	74 3c		 je	 SHORT $LN224@PyCode_Opt
  0203c	48 63 44 24 54	 movsxd	 rax, DWORD PTR tgt$[rsp]
  02041	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR codestr$[rsp]
  02049	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0204d	83 f8 6f	 cmp	 eax, 111		; 0000006fH
  02050	74 26		 je	 SHORT $LN224@PyCode_Opt
  02052	48 63 44 24 54	 movsxd	 rax, DWORD PTR tgt$[rsp]
  02057	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR codestr$[rsp]
  0205f	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  02063	83 f8 70	 cmp	 eax, 112		; 00000070H
  02066	74 10		 je	 SHORT $LN224@PyCode_Opt
  02068	8b 44 24 54	 mov	 eax, DWORD PTR tgt$[rsp]
  0206c	83 c0 03	 add	 eax, 3
  0206f	89 84 24 90 01
	00 00		 mov	 DWORD PTR tv1072[rsp], eax
  02076	eb 0b		 jmp	 SHORT $LN225@PyCode_Opt
$LN224@PyCode_Opt:
  02078	c7 84 24 90 01
	00 00 00 00 00
	00		 mov	 DWORD PTR tv1072[rsp], 0
$LN225@PyCode_Opt:
  02083	8b 44 24 54	 mov	 eax, DWORD PTR tgt$[rsp]
  02087	83 c0 02	 add	 eax, 2
  0208a	48 98		 cdqe
  0208c	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR codestr$[rsp]
  02094	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  02098	c1 e0 08	 shl	 eax, 8
  0209b	8b 4c 24 54	 mov	 ecx, DWORD PTR tgt$[rsp]
  0209f	ff c1		 inc	 ecx
  020a1	48 63 c9	 movsxd	 rcx, ecx
  020a4	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR codestr$[rsp]
  020ac	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  020b0	8b 94 24 90 01
	00 00		 mov	 edx, DWORD PTR tv1072[rsp]
  020b7	03 d0		 add	 edx, eax
  020b9	8b c2		 mov	 eax, edx
  020bb	03 c8		 add	 ecx, eax
  020bd	8b c1		 mov	 eax, ecx
  020bf	89 44 24 78	 mov	 DWORD PTR tgttgt$[rsp], eax

; 670  :                 if (opcode == JUMP_FORWARD) /* JMP_ABS can go backwards */

  020c3	83 7c 24 20 6e	 cmp	 DWORD PTR opcode$[rsp], 110 ; 0000006eH
  020c8	75 08		 jne	 SHORT $LN44@PyCode_Opt

; 671  :                     opcode = JUMP_ABSOLUTE;

  020ca	c7 44 24 20 71
	00 00 00	 mov	 DWORD PTR opcode$[rsp], 113 ; 00000071H
$LN44@PyCode_Opt:

; 672  :                 if (!ABSOLUTE_JUMP(opcode))

  020d2	83 7c 24 20 71	 cmp	 DWORD PTR opcode$[rsp], 113 ; 00000071H
  020d7	74 3b		 je	 SHORT $LN43@PyCode_Opt
  020d9	83 7c 24 20 77	 cmp	 DWORD PTR opcode$[rsp], 119 ; 00000077H
  020de	74 34		 je	 SHORT $LN43@PyCode_Opt
  020e0	83 7c 24 20 72	 cmp	 DWORD PTR opcode$[rsp], 114 ; 00000072H
  020e5	74 2d		 je	 SHORT $LN43@PyCode_Opt
  020e7	83 7c 24 20 73	 cmp	 DWORD PTR opcode$[rsp], 115 ; 00000073H
  020ec	74 26		 je	 SHORT $LN43@PyCode_Opt
  020ee	83 7c 24 20 6f	 cmp	 DWORD PTR opcode$[rsp], 111 ; 0000006fH
  020f3	74 1f		 je	 SHORT $LN43@PyCode_Opt
  020f5	83 7c 24 20 70	 cmp	 DWORD PTR opcode$[rsp], 112 ; 00000070H
  020fa	74 18		 je	 SHORT $LN43@PyCode_Opt

; 673  :                     tgttgt -= i + 3;     /* Calc relative jump addr */

  020fc	48 8b 44 24 48	 mov	 rax, QWORD PTR i$[rsp]
  02101	48 83 c0 03	 add	 rax, 3
  02105	48 63 4c 24 78	 movsxd	 rcx, DWORD PTR tgttgt$[rsp]
  0210a	48 2b c8	 sub	 rcx, rax
  0210d	48 8b c1	 mov	 rax, rcx
  02110	89 44 24 78	 mov	 DWORD PTR tgttgt$[rsp], eax
$LN43@PyCode_Opt:

; 674  :                 if (tgttgt < 0)                           /* No backward relative jumps */

  02114	83 7c 24 78 00	 cmp	 DWORD PTR tgttgt$[rsp], 0
  02119	7d 05		 jge	 SHORT $LN42@PyCode_Opt

; 675  :                     continue;

  0211b	e9 d0 e2 ff ff	 jmp	 $LN143@PyCode_Opt
$LN42@PyCode_Opt:

; 676  :                 codestr[i] = opcode;

  02120	48 8b 44 24 48	 mov	 rax, QWORD PTR i$[rsp]
  02125	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR codestr$[rsp]
  0212d	48 03 c8	 add	 rcx, rax
  02130	48 8b c1	 mov	 rax, rcx
  02133	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR opcode$[rsp]
  02138	88 08		 mov	 BYTE PTR [rax], cl

; 677  :                 SETARG(codestr, i, tgttgt);

  0213a	8b 44 24 78	 mov	 eax, DWORD PTR tgttgt$[rsp]
  0213e	c1 f8 08	 sar	 eax, 8
  02141	48 8b 4c 24 48	 mov	 rcx, QWORD PTR i$[rsp]
  02146	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR codestr$[rsp]
  0214e	48 03 d1	 add	 rdx, rcx
  02151	48 8b ca	 mov	 rcx, rdx
  02154	88 41 02	 mov	 BYTE PTR [rcx+2], al
  02157	8b 44 24 78	 mov	 eax, DWORD PTR tgttgt$[rsp]
  0215b	25 ff 00 00 00	 and	 eax, 255		; 000000ffH
  02160	48 8b 4c 24 48	 mov	 rcx, QWORD PTR i$[rsp]
  02165	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR codestr$[rsp]
  0216d	48 03 d1	 add	 rdx, rcx
  02170	48 8b ca	 mov	 rcx, rdx
  02173	88 41 01	 mov	 BYTE PTR [rcx+1], al

; 678  :                 break;

  02176	e9 2a 01 00 00	 jmp	 $LN136@PyCode_Opt
$LN41@PyCode_Opt:

; 679  : 
; 680  :             case EXTENDED_ARG:
; 681  :                 if (codestr[i+3] != MAKE_FUNCTION)

  0217b	48 8b 44 24 48	 mov	 rax, QWORD PTR i$[rsp]
  02180	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR codestr$[rsp]
  02188	48 03 c8	 add	 rcx, rax
  0218b	48 8b c1	 mov	 rax, rcx
  0218e	0f b6 40 03	 movzx	 eax, BYTE PTR [rax+3]
  02192	3d 84 00 00 00	 cmp	 eax, 132		; 00000084H
  02197	74 05		 je	 SHORT $LN40@PyCode_Opt

; 682  :                     goto exitUnchanged;

  02199	e9 b3 05 00 00	 jmp	 $exitUnchanged$21880
$LN40@PyCode_Opt:

; 683  :                 /* don't visit MAKE_FUNCTION as GETARG will be wrong */
; 684  :                 i += 3;

  0219e	48 8b 44 24 48	 mov	 rax, QWORD PTR i$[rsp]
  021a3	48 83 c0 03	 add	 rax, 3
  021a7	48 89 44 24 48	 mov	 QWORD PTR i$[rsp], rax

; 685  :                 break;

  021ac	e9 f4 00 00 00	 jmp	 $LN136@PyCode_Opt
$LN39@PyCode_Opt:

; 686  : 
; 687  :                 /* Replace RETURN LOAD_CONST None RETURN with just RETURN */
; 688  :                 /* Remove unreachable JUMPs after RETURN */
; 689  :             case RETURN_VALUE:
; 690  :                 if (i+4 >= codelen)

  021b1	48 8b 44 24 48	 mov	 rax, QWORD PTR i$[rsp]
  021b6	48 83 c0 04	 add	 rax, 4
  021ba	48 3b 84 24 a8
	00 00 00	 cmp	 rax, QWORD PTR codelen$[rsp]
  021c2	7c 05		 jl	 SHORT $LN38@PyCode_Opt

; 691  :                     continue;

  021c4	e9 27 e2 ff ff	 jmp	 $LN143@PyCode_Opt
$LN38@PyCode_Opt:

; 692  :                 if (codestr[i+4] == RETURN_VALUE &&
; 693  :                     ISBASICBLOCK(blocks,i,5))

  021c9	48 8b 44 24 48	 mov	 rax, QWORD PTR i$[rsp]
  021ce	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR codestr$[rsp]
  021d6	48 03 c8	 add	 rcx, rax
  021d9	48 8b c1	 mov	 rax, rcx
  021dc	0f b6 40 04	 movzx	 eax, BYTE PTR [rax+4]
  021e0	83 f8 53	 cmp	 eax, 83			; 00000053H
  021e3	75 45		 jne	 SHORT $LN37@PyCode_Opt
  021e5	48 8b 44 24 70	 mov	 rax, QWORD PTR blocks$[rsp]
  021ea	48 8b 4c 24 48	 mov	 rcx, QWORD PTR i$[rsp]
  021ef	48 8b 54 24 70	 mov	 rdx, QWORD PTR blocks$[rsp]
  021f4	4c 8b 44 24 48	 mov	 r8, QWORD PTR i$[rsp]
  021f9	42 8b 54 82 10	 mov	 edx, DWORD PTR [rdx+r8*4+16]
  021fe	39 14 88	 cmp	 DWORD PTR [rax+rcx*4], edx
  02201	75 27		 jne	 SHORT $LN37@PyCode_Opt

; 694  :                     memset(codestr+i+1, NOP, 4);

  02203	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR codestr$[rsp]
  0220b	48 8b 4c 24 48	 mov	 rcx, QWORD PTR i$[rsp]
  02210	48 8d 44 08 01	 lea	 rax, QWORD PTR [rax+rcx+1]
  02215	41 b8 04 00 00
	00		 mov	 r8d, 4
  0221b	ba 09 00 00 00	 mov	 edx, 9
  02220	48 8b c8	 mov	 rcx, rax
  02223	e8 00 00 00 00	 call	 memset

; 695  :                 else if (UNCONDITIONAL_JUMP(codestr[i+1]) &&

  02228	eb 7b		 jmp	 SHORT $LN36@PyCode_Opt
$LN37@PyCode_Opt:

; 696  :                          ISBASICBLOCK(blocks,i,4))

  0222a	48 8b 44 24 48	 mov	 rax, QWORD PTR i$[rsp]
  0222f	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR codestr$[rsp]
  02237	48 03 c8	 add	 rcx, rax
  0223a	48 8b c1	 mov	 rax, rcx
  0223d	0f b6 40 01	 movzx	 eax, BYTE PTR [rax+1]
  02241	83 f8 71	 cmp	 eax, 113		; 00000071H
  02244	74 1c		 je	 SHORT $LN34@PyCode_Opt
  02246	48 8b 44 24 48	 mov	 rax, QWORD PTR i$[rsp]
  0224b	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR codestr$[rsp]
  02253	48 03 c8	 add	 rcx, rax
  02256	48 8b c1	 mov	 rax, rcx
  02259	0f b6 40 01	 movzx	 eax, BYTE PTR [rax+1]
  0225d	83 f8 6e	 cmp	 eax, 110		; 0000006eH
  02260	75 43		 jne	 SHORT $LN35@PyCode_Opt
$LN34@PyCode_Opt:
  02262	48 8b 44 24 70	 mov	 rax, QWORD PTR blocks$[rsp]
  02267	48 8b 4c 24 48	 mov	 rcx, QWORD PTR i$[rsp]
  0226c	48 8b 54 24 70	 mov	 rdx, QWORD PTR blocks$[rsp]
  02271	4c 8b 44 24 48	 mov	 r8, QWORD PTR i$[rsp]
  02276	42 8b 54 82 0c	 mov	 edx, DWORD PTR [rdx+r8*4+12]
  0227b	39 14 88	 cmp	 DWORD PTR [rax+rcx*4], edx
  0227e	75 25		 jne	 SHORT $LN35@PyCode_Opt

; 697  :                     memset(codestr+i+1, NOP, 3);

  02280	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR codestr$[rsp]
  02288	48 8b 4c 24 48	 mov	 rcx, QWORD PTR i$[rsp]
  0228d	48 8d 44 08 01	 lea	 rax, QWORD PTR [rax+rcx+1]
  02292	41 b8 03 00 00
	00		 mov	 r8d, 3
  02298	ba 09 00 00 00	 mov	 edx, 9
  0229d	48 8b c8	 mov	 rcx, rax
  022a0	e8 00 00 00 00	 call	 memset
$LN35@PyCode_Opt:
$LN36@PyCode_Opt:
$LN136@PyCode_Opt:

; 698  :                 break;
; 699  :         }
; 700  :     }

  022a5	e9 46 e1 ff ff	 jmp	 $LN143@PyCode_Opt
$LN142@PyCode_Opt:

; 701  : 
; 702  :     /* Fixup linenotab */
; 703  :     for (i=0, nops=0 ; i<codelen ; i += CODESIZE(codestr[i])) {

  022aa	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  022b3	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR nops$[rsp], 0
  022bb	eb 4b		 jmp	 SHORT $LN33@PyCode_Opt
$LN32@PyCode_Opt:
  022bd	48 8b 44 24 48	 mov	 rax, QWORD PTR i$[rsp]
  022c2	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR codestr$[rsp]
  022ca	48 03 c8	 add	 rcx, rax
  022cd	48 8b c1	 mov	 rax, rcx
  022d0	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  022d3	83 f8 5a	 cmp	 eax, 90			; 0000005aH
  022d6	7c 0d		 jl	 SHORT $LN226@PyCode_Opt
  022d8	c7 84 24 94 01
	00 00 03 00 00
	00		 mov	 DWORD PTR tv1143[rsp], 3
  022e3	eb 0b		 jmp	 SHORT $LN227@PyCode_Opt
$LN226@PyCode_Opt:
  022e5	c7 84 24 94 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv1143[rsp], 1
$LN227@PyCode_Opt:
  022f0	48 63 84 24 94
	01 00 00	 movsxd	 rax, DWORD PTR tv1143[rsp]
  022f8	48 8b 4c 24 48	 mov	 rcx, QWORD PTR i$[rsp]
  022fd	48 03 c8	 add	 rcx, rax
  02300	48 8b c1	 mov	 rax, rcx
  02303	48 89 44 24 48	 mov	 QWORD PTR i$[rsp], rax
$LN33@PyCode_Opt:
  02308	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR codelen$[rsp]
  02310	48 39 44 24 48	 cmp	 QWORD PTR i$[rsp], rax
  02315	7d 47		 jge	 SHORT $LN31@PyCode_Opt

; 704  :         addrmap[i] = i - nops;

  02317	48 63 44 24 58	 movsxd	 rax, DWORD PTR nops$[rsp]
  0231c	48 8b 4c 24 48	 mov	 rcx, QWORD PTR i$[rsp]
  02321	48 2b c8	 sub	 rcx, rax
  02324	48 8b c1	 mov	 rax, rcx
  02327	48 8b 4c 24 38	 mov	 rcx, QWORD PTR addrmap$[rsp]
  0232c	48 8b 54 24 48	 mov	 rdx, QWORD PTR i$[rsp]
  02331	89 04 91	 mov	 DWORD PTR [rcx+rdx*4], eax

; 705  :         if (codestr[i] == NOP)

  02334	48 8b 44 24 48	 mov	 rax, QWORD PTR i$[rsp]
  02339	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR codestr$[rsp]
  02341	48 03 c8	 add	 rcx, rax
  02344	48 8b c1	 mov	 rax, rcx
  02347	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0234a	83 f8 09	 cmp	 eax, 9
  0234d	75 0a		 jne	 SHORT $LN30@PyCode_Opt

; 706  :             nops++;

  0234f	8b 44 24 58	 mov	 eax, DWORD PTR nops$[rsp]
  02353	ff c0		 inc	 eax
  02355	89 44 24 58	 mov	 DWORD PTR nops$[rsp], eax
$LN30@PyCode_Opt:

; 707  :     }

  02359	e9 5f ff ff ff	 jmp	 $LN32@PyCode_Opt
$LN31@PyCode_Opt:

; 708  :     cum_orig_line = 0;

  0235e	c7 84 24 88 00
	00 00 00 00 00
	00		 mov	 DWORD PTR cum_orig_line$[rsp], 0

; 709  :     last_line = 0;

  02369	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR last_line$[rsp], 0

; 710  :     for (i=0 ; i < tabsiz ; i+=2) {

  02371	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  0237a	eb 0e		 jmp	 SHORT $LN29@PyCode_Opt
$LN28@PyCode_Opt:
  0237c	48 8b 44 24 48	 mov	 rax, QWORD PTR i$[rsp]
  02381	48 83 c0 02	 add	 rax, 2
  02385	48 89 44 24 48	 mov	 QWORD PTR i$[rsp], rax
$LN29@PyCode_Opt:
  0238a	48 63 44 24 68	 movsxd	 rax, DWORD PTR tabsiz$[rsp]
  0238f	48 39 44 24 48	 cmp	 QWORD PTR i$[rsp], rax
  02394	0f 8d 9f 00 00
	00		 jge	 $LN27@PyCode_Opt

; 711  :         cum_orig_line += lineno[i];

  0239a	48 8b 44 24 48	 mov	 rax, QWORD PTR i$[rsp]
  0239f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR lineno$[rsp]
  023a4	48 03 c8	 add	 rcx, rax
  023a7	48 8b c1	 mov	 rax, rcx
  023aa	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  023ad	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR cum_orig_line$[rsp]
  023b4	03 c8		 add	 ecx, eax
  023b6	8b c1		 mov	 eax, ecx
  023b8	89 84 24 88 00
	00 00		 mov	 DWORD PTR cum_orig_line$[rsp], eax

; 712  :         new_line = addrmap[cum_orig_line];

  023bf	48 63 84 24 88
	00 00 00	 movsxd	 rax, DWORD PTR cum_orig_line$[rsp]
  023c7	48 8b 4c 24 38	 mov	 rcx, QWORD PTR addrmap$[rsp]
  023cc	8b 04 81	 mov	 eax, DWORD PTR [rcx+rax*4]
  023cf	89 84 24 b8 00
	00 00		 mov	 DWORD PTR new_line$[rsp], eax

; 713  :         assert (new_line - last_line < 255);

  023d6	8b 44 24 50	 mov	 eax, DWORD PTR last_line$[rsp]
  023da	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR new_line$[rsp]
  023e1	2b c8		 sub	 ecx, eax
  023e3	8b c1		 mov	 eax, ecx
  023e5	3d ff 00 00 00	 cmp	 eax, 255		; 000000ffH
  023ea	7c 1c		 jl	 SHORT $LN228@PyCode_Opt
  023ec	41 b8 c9 02 00
	00		 mov	 r8d, 713		; 000002c9H
  023f2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CK@KIMKCIEN@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAe?$AAe?$AAp?$AAh?$AAo?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  023f9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DG@OHHDBJEH@?$AAn?$AAe?$AAw?$AA_?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?9?$AA?5?$AAl?$AAa?$AAs?$AAt?$AA_?$AAl?$AAi?$AAn?$AAe?$AA?5?$AA?$DM?$AA?5?$AA2?$AA5?$AA5?$AA?$AA@
  02400	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  02406	33 c0		 xor	 eax, eax
$LN228@PyCode_Opt:

; 714  :         lineno[i] =((unsigned char)(new_line - last_line));

  02408	8b 44 24 50	 mov	 eax, DWORD PTR last_line$[rsp]
  0240c	8b 8c 24 b8 00
	00 00		 mov	 ecx, DWORD PTR new_line$[rsp]
  02413	2b c8		 sub	 ecx, eax
  02415	8b c1		 mov	 eax, ecx
  02417	48 8b 4c 24 48	 mov	 rcx, QWORD PTR i$[rsp]
  0241c	48 8b 54 24 40	 mov	 rdx, QWORD PTR lineno$[rsp]
  02421	48 03 d1	 add	 rdx, rcx
  02424	48 8b ca	 mov	 rcx, rdx
  02427	88 01		 mov	 BYTE PTR [rcx], al

; 715  :         last_line = new_line;

  02429	8b 84 24 b8 00
	00 00		 mov	 eax, DWORD PTR new_line$[rsp]
  02430	89 44 24 50	 mov	 DWORD PTR last_line$[rsp], eax

; 716  :     }

  02434	e9 43 ff ff ff	 jmp	 $LN28@PyCode_Opt
$LN27@PyCode_Opt:

; 717  : 
; 718  :     /* Remove NOPs and fixup jump targets */
; 719  :     for (i=0, h=0 ; i<codelen ; ) {

  02439	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  02442	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR h$[rsp], 0
$LN234@PyCode_Opt:
$LN26@PyCode_Opt:
  0244a	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR codelen$[rsp]
  02452	48 39 44 24 48	 cmp	 QWORD PTR i$[rsp], rax
  02457	0f 8d 33 02 00
	00		 jge	 $LN25@PyCode_Opt

; 720  :         opcode = codestr[i];

  0245d	48 8b 44 24 48	 mov	 rax, QWORD PTR i$[rsp]
  02462	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR codestr$[rsp]
  0246a	48 03 c8	 add	 rcx, rax
  0246d	48 8b c1	 mov	 rax, rcx
  02470	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  02473	89 44 24 20	 mov	 DWORD PTR opcode$[rsp], eax

; 721  :         switch (opcode) {

  02477	8b 44 24 20	 mov	 eax, DWORD PTR opcode$[rsp]
  0247b	89 84 24 98 01
	00 00		 mov	 DWORD PTR tv1177[rsp], eax
  02482	8b 84 24 98 01
	00 00		 mov	 eax, DWORD PTR tv1177[rsp]
  02489	83 e8 09	 sub	 eax, 9
  0248c	89 84 24 98 01
	00 00		 mov	 DWORD PTR tv1177[rsp], eax
  02493	81 bc 24 98 01
	00 00 86 00 00
	00		 cmp	 DWORD PTR tv1177[rsp], 134 ; 00000086H
  0249e	0f 87 6c 01 00
	00		 ja	 $LN23@PyCode_Opt
  024a4	48 63 84 24 98
	01 00 00	 movsxd	 rax, DWORD PTR tv1177[rsp]
  024ac	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  024b3	0f b6 84 01 00
	00 00 00	 movzx	 eax, BYTE PTR $LN235@PyCode_Opt[rcx+rax]
  024bb	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN236@PyCode_Opt[rcx+rax*4]
  024c2	48 03 c1	 add	 rax, rcx
  024c5	ff e0		 jmp	 rax
$LN22@PyCode_Opt:

; 722  :             case NOP:
; 723  :                 i++;

  024c7	48 8b 44 24 48	 mov	 rax, QWORD PTR i$[rsp]
  024cc	48 ff c0	 inc	 rax
  024cf	48 89 44 24 48	 mov	 QWORD PTR i$[rsp], rax

; 724  :                 continue;

  024d4	e9 71 ff ff ff	 jmp	 $LN26@PyCode_Opt
$LN21@PyCode_Opt:

; 725  : 
; 726  :             case JUMP_ABSOLUTE:
; 727  :             case CONTINUE_LOOP:
; 728  :             case POP_JUMP_IF_FALSE:
; 729  :             case POP_JUMP_IF_TRUE:
; 730  :             case JUMP_IF_FALSE_OR_POP:
; 731  :             case JUMP_IF_TRUE_OR_POP:
; 732  :                 j = addrmap[GETARG(codestr, i)];

  024d9	48 8b 44 24 48	 mov	 rax, QWORD PTR i$[rsp]
  024de	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR codestr$[rsp]
  024e6	48 03 c8	 add	 rcx, rax
  024e9	48 8b c1	 mov	 rax, rcx
  024ec	0f b6 40 02	 movzx	 eax, BYTE PTR [rax+2]
  024f0	c1 e0 08	 shl	 eax, 8
  024f3	48 8b 4c 24 48	 mov	 rcx, QWORD PTR i$[rsp]
  024f8	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR codestr$[rsp]
  02500	48 03 d1	 add	 rdx, rcx
  02503	48 8b ca	 mov	 rcx, rdx
  02506	0f b6 49 01	 movzx	 ecx, BYTE PTR [rcx+1]
  0250a	03 c1		 add	 eax, ecx
  0250c	48 98		 cdqe
  0250e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR addrmap$[rsp]
  02513	48 63 04 81	 movsxd	 rax, DWORD PTR [rcx+rax*4]
  02517	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR j$[rsp], rax

; 733  :                 SETARG(codestr, i, j);

  0251f	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR j$[rsp]
  02527	48 c1 f8 08	 sar	 rax, 8
  0252b	48 8b 4c 24 48	 mov	 rcx, QWORD PTR i$[rsp]
  02530	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR codestr$[rsp]
  02538	48 03 d1	 add	 rdx, rcx
  0253b	48 8b ca	 mov	 rcx, rdx
  0253e	88 41 02	 mov	 BYTE PTR [rcx+2], al
  02541	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR j$[rsp]
  02549	48 25 ff 00 00
	00		 and	 rax, 255		; 000000ffH
  0254f	48 8b 4c 24 48	 mov	 rcx, QWORD PTR i$[rsp]
  02554	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR codestr$[rsp]
  0255c	48 03 d1	 add	 rdx, rcx
  0255f	48 8b ca	 mov	 rcx, rdx
  02562	88 41 01	 mov	 BYTE PTR [rcx+1], al

; 734  :                 break;

  02565	e9 a6 00 00 00	 jmp	 $LN23@PyCode_Opt
$LN20@PyCode_Opt:

; 735  : 
; 736  :             case FOR_ITER:
; 737  :             case JUMP_FORWARD:
; 738  :             case SETUP_LOOP:
; 739  :             case SETUP_EXCEPT:
; 740  :             case SETUP_FINALLY:
; 741  :             case SETUP_WITH:
; 742  :                 j = addrmap[GETARG(codestr, i) + i + 3] - addrmap[i] - 3;

  0256a	48 8b 44 24 48	 mov	 rax, QWORD PTR i$[rsp]
  0256f	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR codestr$[rsp]
  02577	48 03 c8	 add	 rcx, rax
  0257a	48 8b c1	 mov	 rax, rcx
  0257d	0f b6 40 02	 movzx	 eax, BYTE PTR [rax+2]
  02581	c1 e0 08	 shl	 eax, 8
  02584	48 8b 4c 24 48	 mov	 rcx, QWORD PTR i$[rsp]
  02589	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR codestr$[rsp]
  02591	48 03 d1	 add	 rdx, rcx
  02594	48 8b ca	 mov	 rcx, rdx
  02597	0f b6 49 01	 movzx	 ecx, BYTE PTR [rcx+1]
  0259b	03 c1		 add	 eax, ecx
  0259d	48 98		 cdqe
  0259f	48 03 44 24 48	 add	 rax, QWORD PTR i$[rsp]
  025a4	48 8b 4c 24 38	 mov	 rcx, QWORD PTR addrmap$[rsp]
  025a9	48 8b 54 24 38	 mov	 rdx, QWORD PTR addrmap$[rsp]
  025ae	4c 8b 44 24 48	 mov	 r8, QWORD PTR i$[rsp]
  025b3	42 8b 14 82	 mov	 edx, DWORD PTR [rdx+r8*4]
  025b7	8b 44 81 0c	 mov	 eax, DWORD PTR [rcx+rax*4+12]
  025bb	2b c2		 sub	 eax, edx
  025bd	83 e8 03	 sub	 eax, 3
  025c0	48 98		 cdqe
  025c2	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR j$[rsp], rax

; 743  :                 SETARG(codestr, i, j);

  025ca	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR j$[rsp]
  025d2	48 c1 f8 08	 sar	 rax, 8
  025d6	48 8b 4c 24 48	 mov	 rcx, QWORD PTR i$[rsp]
  025db	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR codestr$[rsp]
  025e3	48 03 d1	 add	 rdx, rcx
  025e6	48 8b ca	 mov	 rcx, rdx
  025e9	88 41 02	 mov	 BYTE PTR [rcx+2], al
  025ec	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR j$[rsp]
  025f4	48 25 ff 00 00
	00		 and	 rax, 255		; 000000ffH
  025fa	48 8b 4c 24 48	 mov	 rcx, QWORD PTR i$[rsp]
  025ff	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR codestr$[rsp]
  02607	48 03 d1	 add	 rdx, rcx
  0260a	48 8b ca	 mov	 rcx, rdx
  0260d	88 41 01	 mov	 BYTE PTR [rcx+1], al
$LN23@PyCode_Opt:

; 744  :                 break;
; 745  :         }
; 746  :         adj = CODESIZE(opcode);

  02610	83 7c 24 20 5a	 cmp	 DWORD PTR opcode$[rsp], 90 ; 0000005aH
  02615	7c 0d		 jl	 SHORT $LN229@PyCode_Opt
  02617	c7 84 24 9c 01
	00 00 03 00 00
	00		 mov	 DWORD PTR tv1260[rsp], 3
  02622	eb 0b		 jmp	 SHORT $LN230@PyCode_Opt
$LN229@PyCode_Opt:
  02624	c7 84 24 9c 01
	00 00 01 00 00
	00		 mov	 DWORD PTR tv1260[rsp], 1
$LN230@PyCode_Opt:
  0262f	8b 84 24 9c 01
	00 00		 mov	 eax, DWORD PTR tv1260[rsp]
  02636	89 44 24 24	 mov	 DWORD PTR adj$[rsp], eax
$LN19@PyCode_Opt:

; 747  :         while (adj--)

  0263a	8b 44 24 24	 mov	 eax, DWORD PTR adj$[rsp]
  0263e	8b 4c 24 24	 mov	 ecx, DWORD PTR adj$[rsp]
  02642	ff c9		 dec	 ecx
  02644	89 4c 24 24	 mov	 DWORD PTR adj$[rsp], ecx
  02648	85 c0		 test	 eax, eax
  0264a	74 3f		 je	 SHORT $LN18@PyCode_Opt

; 748  :             codestr[h++] = codestr[i++];

  0264c	48 63 44 24 28	 movsxd	 rax, DWORD PTR h$[rsp]
  02651	48 8b 4c 24 48	 mov	 rcx, QWORD PTR i$[rsp]
  02656	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR codestr$[rsp]
  0265e	48 03 d1	 add	 rdx, rcx
  02661	48 8b ca	 mov	 rcx, rdx
  02664	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR codestr$[rsp]
  0266c	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  0266f	88 0c 02	 mov	 BYTE PTR [rdx+rax], cl
  02672	8b 44 24 28	 mov	 eax, DWORD PTR h$[rsp]
  02676	ff c0		 inc	 eax
  02678	89 44 24 28	 mov	 DWORD PTR h$[rsp], eax
  0267c	48 8b 44 24 48	 mov	 rax, QWORD PTR i$[rsp]
  02681	48 ff c0	 inc	 rax
  02684	48 89 44 24 48	 mov	 QWORD PTR i$[rsp], rax
  02689	eb af		 jmp	 SHORT $LN19@PyCode_Opt
$LN18@PyCode_Opt:

; 749  :     }

  0268b	e9 ba fd ff ff	 jmp	 $LN234@PyCode_Opt
$LN25@PyCode_Opt:

; 750  :     assert(h + nops == codelen);

  02690	8b 44 24 58	 mov	 eax, DWORD PTR nops$[rsp]
  02694	8b 4c 24 28	 mov	 ecx, DWORD PTR h$[rsp]
  02698	03 c8		 add	 ecx, eax
  0269a	8b c1		 mov	 eax, ecx
  0269c	48 98		 cdqe
  0269e	48 3b 84 24 a8
	00 00 00	 cmp	 rax, QWORD PTR codelen$[rsp]
  026a6	74 1c		 je	 SHORT $LN231@PyCode_Opt
  026a8	41 b8 ee 02 00
	00		 mov	 r8d, 750		; 000002eeH
  026ae	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CK@KIMKCIEN@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAe?$AAe?$AAp?$AAh?$AAo?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  026b5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CI@OBLJDBIG@?$AAh?$AA?5?$AA?$CL?$AA?5?$AAn?$AAo?$AAp?$AAs?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAc?$AAo?$AAd?$AAe?$AAl?$AAe?$AAn?$AA?$AA@
  026bc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  026c2	33 c0		 xor	 eax, eax
$LN231@PyCode_Opt:

; 751  : 
; 752  :     code = PyBytes_FromStringAndSize((char *)codestr, h);

  026c4	48 63 44 24 28	 movsxd	 rax, DWORD PTR h$[rsp]
  026c9	48 8b d0	 mov	 rdx, rax
  026cc	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR codestr$[rsp]
  026d4	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  026d9	48 89 84 24 b0
	01 00 00	 mov	 QWORD PTR code$[rsp], rax
$LN17@PyCode_Opt:

; 753  :     CONST_STACK_DELETE();

  026e1	48 83 bc 24 b0
	00 00 00 00	 cmp	 QWORD PTR const_stack$[rsp], 0
  026ea	74 0d		 je	 SHORT $LN14@PyCode_Opt
  026ec	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR const_stack$[rsp]
  026f4	e8 00 00 00 00	 call	 PyMem_Free
$LN14@PyCode_Opt:
  026f9	48 83 bc 24 98
	00 00 00 00	 cmp	 QWORD PTR load_const_stack$[rsp], 0
  02702	74 0d		 je	 SHORT $LN13@PyCode_Opt
  02704	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR load_const_stack$[rsp]
  0270c	e8 00 00 00 00	 call	 PyMem_Free
$LN13@PyCode_Opt:
  02711	33 c0		 xor	 eax, eax
  02713	85 c0		 test	 eax, eax
  02715	75 ca		 jne	 SHORT $LN17@PyCode_Opt

; 754  :     PyMem_Free(addrmap);

  02717	48 8b 4c 24 38	 mov	 rcx, QWORD PTR addrmap$[rsp]
  0271c	e8 00 00 00 00	 call	 PyMem_Free

; 755  :     PyMem_Free(codestr);

  02721	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR codestr$[rsp]
  02729	e8 00 00 00 00	 call	 PyMem_Free

; 756  :     PyMem_Free(blocks);

  0272e	48 8b 4c 24 70	 mov	 rcx, QWORD PTR blocks$[rsp]
  02733	e8 00 00 00 00	 call	 PyMem_Free

; 757  :     return code;

  02738	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR code$[rsp]
  02740	e9 a4 00 00 00	 jmp	 $LN154@PyCode_Opt
$exitError$21867:

; 758  : 
; 759  :  exitError:
; 760  :     code = NULL;

  02745	48 c7 84 24 b0
	01 00 00 00 00
	00 00		 mov	 QWORD PTR code$[rsp], 0
$exitUnchanged$21880:
$LN12@PyCode_Opt:

; 761  : 
; 762  :  exitUnchanged:
; 763  :     CONST_STACK_DELETE();

  02751	48 83 bc 24 b0
	00 00 00 00	 cmp	 QWORD PTR const_stack$[rsp], 0
  0275a	74 0d		 je	 SHORT $LN9@PyCode_Opt
  0275c	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR const_stack$[rsp]
  02764	e8 00 00 00 00	 call	 PyMem_Free
$LN9@PyCode_Opt:
  02769	48 83 bc 24 98
	00 00 00 00	 cmp	 QWORD PTR load_const_stack$[rsp], 0
  02772	74 0d		 je	 SHORT $LN8@PyCode_Opt
  02774	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR load_const_stack$[rsp]
  0277c	e8 00 00 00 00	 call	 PyMem_Free
$LN8@PyCode_Opt:
  02781	33 c0		 xor	 eax, eax
  02783	85 c0		 test	 eax, eax
  02785	75 ca		 jne	 SHORT $LN12@PyCode_Opt

; 764  :     if (blocks != NULL)

  02787	48 83 7c 24 70
	00		 cmp	 QWORD PTR blocks$[rsp], 0
  0278d	74 0a		 je	 SHORT $LN7@PyCode_Opt

; 765  :         PyMem_Free(blocks);

  0278f	48 8b 4c 24 70	 mov	 rcx, QWORD PTR blocks$[rsp]
  02794	e8 00 00 00 00	 call	 PyMem_Free
$LN7@PyCode_Opt:

; 766  :     if (addrmap != NULL)

  02799	48 83 7c 24 38
	00		 cmp	 QWORD PTR addrmap$[rsp], 0
  0279f	74 0a		 je	 SHORT $LN6@PyCode_Opt

; 767  :         PyMem_Free(addrmap);

  027a1	48 8b 4c 24 38	 mov	 rcx, QWORD PTR addrmap$[rsp]
  027a6	e8 00 00 00 00	 call	 PyMem_Free
$LN6@PyCode_Opt:

; 768  :     if (codestr != NULL)

  027ab	48 83 bc 24 90
	00 00 00 00	 cmp	 QWORD PTR codestr$[rsp], 0
  027b4	74 0d		 je	 SHORT $LN5@PyCode_Opt

; 769  :         PyMem_Free(codestr);

  027b6	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR codestr$[rsp]
  027be	e8 00 00 00 00	 call	 PyMem_Free
$LN5@PyCode_Opt:
$LN4@PyCode_Opt:

; 770  :     Py_XINCREF(code);

  027c3	48 83 bc 24 b0
	01 00 00 00	 cmp	 QWORD PTR code$[rsp], 0
  027cc	74 0d		 je	 SHORT $LN1@PyCode_Opt
  027ce	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR code$[rsp]
  027d6	e8 00 00 00 00	 call	 _Py_IncRef
$LN1@PyCode_Opt:
  027db	33 c0		 xor	 eax, eax
  027dd	85 c0		 test	 eax, eax
  027df	75 e2		 jne	 SHORT $LN4@PyCode_Opt

; 771  :     return code;

  027e1	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR code$[rsp]
$LN154@PyCode_Opt:

; 772  : }

  027e9	48 81 c4 a8 01
	00 00		 add	 rsp, 424		; 000001a8H
  027f0	c3		 ret	 0
  027f1	0f 1f 00	 npad	 3
$LN238@PyCode_Opt:
  027f4	00 00 00 00	 DD	 $LN67@PyCode_Opt
  027f8	00 00 00 00	 DD	 $LN135@PyCode_Opt
  027fc	00 00 00 00	 DD	 $LN78@PyCode_Opt
  02800	00 00 00 00	 DD	 $LN39@PyCode_Opt
  02804	00 00 00 00	 DD	 $LN48@PyCode_Opt
  02808	00 00 00 00	 DD	 $LN119@PyCode_Opt
  0280c	00 00 00 00	 DD	 $LN129@PyCode_Opt
  02810	00 00 00 00	 DD	 $LN107@PyCode_Opt
  02814	00 00 00 00	 DD	 $LN132@PyCode_Opt
  02818	00 00 00 00	 DD	 $LN56@PyCode_Opt
  0281c	00 00 00 00	 DD	 $LN41@PyCode_Opt
  02820	00 00 00 00	 DD	 $LN136@PyCode_Opt
$LN237@PyCode_Opt:
  02824	00		 DB	 0
  02825	00		 DB	 0
  02826	01		 DB	 1
  02827	0b		 DB	 11
  02828	0b		 DB	 11
  02829	00		 DB	 0
  0282a	0b		 DB	 11
  0282b	0b		 DB	 11
  0282c	0b		 DB	 11
  0282d	02		 DB	 2
  0282e	02		 DB	 2
  0282f	0b		 DB	 11
  02830	02		 DB	 2
  02831	02		 DB	 2
  02832	02		 DB	 2
  02833	02		 DB	 2
  02834	02		 DB	 2
  02835	02		 DB	 2
  02836	0b		 DB	 11
  02837	0b		 DB	 11
  02838	0b		 DB	 11
  02839	0b		 DB	 11
  0283a	0b		 DB	 11
  0283b	0b		 DB	 11
  0283c	0b		 DB	 11
  0283d	0b		 DB	 11
  0283e	0b		 DB	 11
  0283f	0b		 DB	 11
  02840	0b		 DB	 11
  02841	0b		 DB	 11
  02842	0b		 DB	 11
  02843	0b		 DB	 11
  02844	0b		 DB	 11
  02845	0b		 DB	 11
  02846	0b		 DB	 11
  02847	0b		 DB	 11
  02848	0b		 DB	 11
  02849	0b		 DB	 11
  0284a	0b		 DB	 11
  0284b	0b		 DB	 11
  0284c	0b		 DB	 11
  0284d	0b		 DB	 11
  0284e	0b		 DB	 11
  0284f	0b		 DB	 11
  02850	0b		 DB	 11
  02851	0b		 DB	 11
  02852	0b		 DB	 11
  02853	0b		 DB	 11
  02854	0b		 DB	 11
  02855	0b		 DB	 11
  02856	0b		 DB	 11
  02857	0b		 DB	 11
  02858	02		 DB	 2
  02859	02		 DB	 2
  0285a	02		 DB	 2
  0285b	02		 DB	 2
  0285c	02		 DB	 2
  0285d	0b		 DB	 11
  0285e	0b		 DB	 11
  0285f	0b		 DB	 11
  02860	0b		 DB	 11
  02861	0b		 DB	 11
  02862	0b		 DB	 11
  02863	0b		 DB	 11
  02864	0b		 DB	 11
  02865	0b		 DB	 11
  02866	0b		 DB	 11
  02867	0b		 DB	 11
  02868	0b		 DB	 11
  02869	0b		 DB	 11
  0286a	0b		 DB	 11
  0286b	0b		 DB	 11
  0286c	0b		 DB	 11
  0286d	03		 DB	 3
  0286e	0b		 DB	 11
  0286f	0b		 DB	 11
  02870	0b		 DB	 11
  02871	0b		 DB	 11
  02872	0b		 DB	 11
  02873	0b		 DB	 11
  02874	0b		 DB	 11
  02875	0b		 DB	 11
  02876	0b		 DB	 11
  02877	04		 DB	 4
  02878	0b		 DB	 11
  02879	0b		 DB	 11
  0287a	0b		 DB	 11
  0287b	0b		 DB	 11
  0287c	0b		 DB	 11
  0287d	0b		 DB	 11
  0287e	05		 DB	 5
  0287f	06		 DB	 6
  02880	07		 DB	 7
  02881	07		 DB	 7
  02882	07		 DB	 7
  02883	0b		 DB	 11
  02884	0b		 DB	 11
  02885	08		 DB	 8
  02886	0b		 DB	 11
  02887	0b		 DB	 11
  02888	04		 DB	 4
  02889	09		 DB	 9
  0288a	09		 DB	 9
  0288b	04		 DB	 4
  0288c	04		 DB	 4
  0288d	04		 DB	 4
  0288e	06		 DB	 6
  0288f	0b		 DB	 11
  02890	0b		 DB	 11
  02891	04		 DB	 4
  02892	04		 DB	 4
  02893	04		 DB	 4
  02894	04		 DB	 4
  02895	0b		 DB	 11
  02896	0b		 DB	 11
  02897	0b		 DB	 11
  02898	0b		 DB	 11
  02899	0b		 DB	 11
  0289a	0b		 DB	 11
  0289b	0b		 DB	 11
  0289c	0b		 DB	 11
  0289d	0b		 DB	 11
  0289e	0b		 DB	 11
  0289f	0b		 DB	 11
  028a0	0b		 DB	 11
  028a1	0b		 DB	 11
  028a2	0b		 DB	 11
  028a3	0b		 DB	 11
  028a4	0b		 DB	 11
  028a5	0b		 DB	 11
  028a6	0b		 DB	 11
  028a7	0b		 DB	 11
  028a8	0b		 DB	 11
  028a9	04		 DB	 4
  028aa	0a		 DB	 10
  028ab	90		 npad	 1
$LN236@PyCode_Opt:
  028ac	00 00 00 00	 DD	 $LN22@PyCode_Opt
  028b0	00 00 00 00	 DD	 $LN20@PyCode_Opt
  028b4	00 00 00 00	 DD	 $LN21@PyCode_Opt
  028b8	00 00 00 00	 DD	 $LN23@PyCode_Opt
$LN235@PyCode_Opt:
  028bc	00		 DB	 0
  028bd	03		 DB	 3
  028be	03		 DB	 3
  028bf	03		 DB	 3
  028c0	03		 DB	 3
  028c1	03		 DB	 3
  028c2	03		 DB	 3
  028c3	03		 DB	 3
  028c4	03		 DB	 3
  028c5	03		 DB	 3
  028c6	03		 DB	 3
  028c7	03		 DB	 3
  028c8	03		 DB	 3
  028c9	03		 DB	 3
  028ca	03		 DB	 3
  028cb	03		 DB	 3
  028cc	03		 DB	 3
  028cd	03		 DB	 3
  028ce	03		 DB	 3
  028cf	03		 DB	 3
  028d0	03		 DB	 3
  028d1	03		 DB	 3
  028d2	03		 DB	 3
  028d3	03		 DB	 3
  028d4	03		 DB	 3
  028d5	03		 DB	 3
  028d6	03		 DB	 3
  028d7	03		 DB	 3
  028d8	03		 DB	 3
  028d9	03		 DB	 3
  028da	03		 DB	 3
  028db	03		 DB	 3
  028dc	03		 DB	 3
  028dd	03		 DB	 3
  028de	03		 DB	 3
  028df	03		 DB	 3
  028e0	03		 DB	 3
  028e1	03		 DB	 3
  028e2	03		 DB	 3
  028e3	03		 DB	 3
  028e4	03		 DB	 3
  028e5	03		 DB	 3
  028e6	03		 DB	 3
  028e7	03		 DB	 3
  028e8	03		 DB	 3
  028e9	03		 DB	 3
  028ea	03		 DB	 3
  028eb	03		 DB	 3
  028ec	03		 DB	 3
  028ed	03		 DB	 3
  028ee	03		 DB	 3
  028ef	03		 DB	 3
  028f0	03		 DB	 3
  028f1	03		 DB	 3
  028f2	03		 DB	 3
  028f3	03		 DB	 3
  028f4	03		 DB	 3
  028f5	03		 DB	 3
  028f6	03		 DB	 3
  028f7	03		 DB	 3
  028f8	03		 DB	 3
  028f9	03		 DB	 3
  028fa	03		 DB	 3
  028fb	03		 DB	 3
  028fc	03		 DB	 3
  028fd	03		 DB	 3
  028fe	03		 DB	 3
  028ff	03		 DB	 3
  02900	03		 DB	 3
  02901	03		 DB	 3
  02902	03		 DB	 3
  02903	03		 DB	 3
  02904	03		 DB	 3
  02905	03		 DB	 3
  02906	03		 DB	 3
  02907	03		 DB	 3
  02908	03		 DB	 3
  02909	03		 DB	 3
  0290a	03		 DB	 3
  0290b	03		 DB	 3
  0290c	03		 DB	 3
  0290d	03		 DB	 3
  0290e	03		 DB	 3
  0290f	03		 DB	 3
  02910	01		 DB	 1
  02911	03		 DB	 3
  02912	03		 DB	 3
  02913	03		 DB	 3
  02914	03		 DB	 3
  02915	03		 DB	 3
  02916	03		 DB	 3
  02917	03		 DB	 3
  02918	03		 DB	 3
  02919	03		 DB	 3
  0291a	03		 DB	 3
  0291b	03		 DB	 3
  0291c	03		 DB	 3
  0291d	03		 DB	 3
  0291e	03		 DB	 3
  0291f	03		 DB	 3
  02920	03		 DB	 3
  02921	01		 DB	 1
  02922	02		 DB	 2
  02923	02		 DB	 2
  02924	02		 DB	 2
  02925	02		 DB	 2
  02926	02		 DB	 2
  02927	03		 DB	 3
  02928	03		 DB	 3
  02929	03		 DB	 3
  0292a	02		 DB	 2
  0292b	01		 DB	 1
  0292c	01		 DB	 1
  0292d	01		 DB	 1
  0292e	03		 DB	 3
  0292f	03		 DB	 3
  02930	03		 DB	 3
  02931	03		 DB	 3
  02932	03		 DB	 3
  02933	03		 DB	 3
  02934	03		 DB	 3
  02935	03		 DB	 3
  02936	03		 DB	 3
  02937	03		 DB	 3
  02938	03		 DB	 3
  02939	03		 DB	 3
  0293a	03		 DB	 3
  0293b	03		 DB	 3
  0293c	03		 DB	 3
  0293d	03		 DB	 3
  0293e	03		 DB	 3
  0293f	03		 DB	 3
  02940	03		 DB	 3
  02941	03		 DB	 3
  02942	01		 DB	 1
PyCode_Optimize ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
EXTRN	_Py_RefTotal:QWORD
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN7
	DD	imagerel $LN7+132
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 6d		 jne	 SHORT $LN2@Py_IncRef
  00012	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0001a	4c 8b 4c 24 40	 mov	 r9, QWORD PTR op$[rsp]
  0001f	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_Guard
  00038	85 c0		 test	 eax, eax
  0003a	75 12		 jne	 SHORT $LN1@Py_IncRef
  0003c	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  00041	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00045	48 83 e0 20	 and	 rax, 32			; 00000020H
  00049	48 85 c0	 test	 rax, rax
  0004c	74 31		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;

  0004e	e8 00 00 00 00	 call	 _Py_PXCTX
  00053	85 c0		 test	 eax, eax
  00055	74 02		 je	 SHORT $LN5@Py_IncRef
  00057	eb 11		 jmp	 SHORT $LN6@Py_IncRef
$LN5@Py_IncRef:
  00059	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00060	48 ff c0	 inc	 rax
  00063	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN6@Py_IncRef:

; 907  :         (((PyObject*)(op))->ob_refcnt++);

  0006a	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  0006f	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00073	48 ff c0	 inc	 rax
  00076	48 8b 4c 24 40	 mov	 rcx, QWORD PTR op$[rsp]
  0007b	48 89 41 50	 mov	 QWORD PTR [rcx+80], rax
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  0007f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00083	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	_Py_DecRef
PUBLIC	??_C@_1DE@CMPGFGMM@?$AAP?$AAy?$AAL?$AAi?$AAs?$AAt?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AAE?$AAx?$AAa?$AAc?$AAt?$AA?$CI?$AAc?$AAo?$AAn?$AAs?$AAt?$AAs?$AA?$CJ?$AA?$AA@ ; `string'
EXTRN	PyList_Append:PROC
EXTRN	PyFrozenSet_New:PROC
EXTRN	PyTuple_New:PROC
EXTRN	PyList_Type:BYTE
;	COMDAT pdata
; File c:\src\pyparallel\python\peephole.c
pdata	SEGMENT
$pdata$tuple_of_constants DD imagerel tuple_of_constants
	DD	imagerel tuple_of_constants+358
	DD	imagerel $unwind$tuple_of_constants
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$tuple_of_constants DD 011801H
	DD	0a218H
xdata	ENDS
;	COMDAT ??_C@_1DE@CMPGFGMM@?$AAP?$AAy?$AAL?$AAi?$AAs?$AAt?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AAE?$AAx?$AAa?$AAc?$AAt?$AA?$CI?$AAc?$AAo?$AAn?$AAs?$AAt?$AAs?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DE@CMPGFGMM@?$AAP?$AAy?$AAL?$AAi?$AAs?$AAt?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AAE?$AAx?$AAa?$AAc?$AAt?$AA?$CI?$AAc?$AAo?$AAn?$AAs?$AAt?$AAs?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'L', 00H, 'i', 00H, 's', 00H, 't', 00H, '_', 00H
	DB	'C', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, 'E', 00H, 'x'
	DB	00H, 'a', 00H, 'c', 00H, 't', 00H, '(', 00H, 'c', 00H, 'o', 00H
	DB	'n', 00H, 's', 00H, 't', 00H, 's', 00H, ')', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT tuple_of_constants
_TEXT	SEGMENT
i$ = 32
len_consts$ = 40
constant$ = 48
newconst$ = 56
tuple$21678 = 64
codestr$ = 96
n$ = 104
consts$ = 112
objs$ = 120
tuple_of_constants PROC					; COMDAT

; 96   : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 97   :     PyObject *newconst, *constant;
; 98   :     Py_ssize_t i, len_consts;
; 99   : 
; 100  :     /* Pre-conditions */
; 101  :     assert(PyList_CheckExact(consts));

  00018	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyList_Type
  0001f	48 8b 4c 24 70	 mov	 rcx, QWORD PTR consts$[rsp]
  00024	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00028	74 1c		 je	 SHORT $LN10@tuple_of_c
  0002a	41 b8 65 00 00
	00		 mov	 r8d, 101		; 00000065H
  00030	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CK@KIMKCIEN@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAe?$AAe?$AAp?$AAh?$AAo?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  00037	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@CMPGFGMM@?$AAP?$AAy?$AAL?$AAi?$AAs?$AAt?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AAE?$AAx?$AAa?$AAc?$AAt?$AA?$CI?$AAc?$AAo?$AAn?$AAs?$AAt?$AAs?$AA?$CJ?$AA?$AA@
  0003e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00044	33 c0		 xor	 eax, eax
$LN10@tuple_of_c:

; 102  : 
; 103  :     /* Buildup new tuple of constants */
; 104  :     newconst = PyTuple_New(n);

  00046	48 8b 4c 24 68	 mov	 rcx, QWORD PTR n$[rsp]
  0004b	e8 00 00 00 00	 call	 PyTuple_New
  00050	48 89 44 24 38	 mov	 QWORD PTR newconst$[rsp], rax

; 105  :     if (newconst == NULL)

  00055	48 83 7c 24 38
	00		 cmp	 QWORD PTR newconst$[rsp], 0
  0005b	75 07		 jne	 SHORT $LN7@tuple_of_c

; 106  :         return 0;

  0005d	33 c0		 xor	 eax, eax
  0005f	e9 fd 00 00 00	 jmp	 $LN8@tuple_of_c
$LN7@tuple_of_c:

; 107  :     len_consts = PyList_GET_SIZE(consts);

  00064	48 8b 44 24 70	 mov	 rax, QWORD PTR consts$[rsp]
  00069	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0006d	48 89 44 24 28	 mov	 QWORD PTR len_consts$[rsp], rax

; 108  :     for (i=0 ; i<n ; i++) {

  00072	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  0007b	eb 0d		 jmp	 SHORT $LN6@tuple_of_c
$LN5@tuple_of_c:
  0007d	48 8b 44 24 20	 mov	 rax, QWORD PTR i$[rsp]
  00082	48 ff c0	 inc	 rax
  00085	48 89 44 24 20	 mov	 QWORD PTR i$[rsp], rax
$LN6@tuple_of_c:
  0008a	48 8b 44 24 68	 mov	 rax, QWORD PTR n$[rsp]
  0008f	48 39 44 24 20	 cmp	 QWORD PTR i$[rsp], rax
  00094	7d 33		 jge	 SHORT $LN4@tuple_of_c

; 109  :         constant = objs[i];

  00096	48 8b 44 24 78	 mov	 rax, QWORD PTR objs$[rsp]
  0009b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR i$[rsp]
  000a0	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  000a4	48 89 44 24 30	 mov	 QWORD PTR constant$[rsp], rax

; 110  :         Py_INCREF(constant);

  000a9	48 8b 4c 24 30	 mov	 rcx, QWORD PTR constant$[rsp]
  000ae	e8 00 00 00 00	 call	 _Py_IncRef

; 111  :         PyTuple_SET_ITEM(newconst, i, constant);

  000b3	48 8b 44 24 38	 mov	 rax, QWORD PTR newconst$[rsp]
  000b8	48 8b 4c 24 20	 mov	 rcx, QWORD PTR i$[rsp]
  000bd	48 8b 54 24 30	 mov	 rdx, QWORD PTR constant$[rsp]
  000c2	48 89 54 c8 70	 mov	 QWORD PTR [rax+rcx*8+112], rdx

; 112  :     }

  000c7	eb b4		 jmp	 SHORT $LN5@tuple_of_c
$LN4@tuple_of_c:

; 113  : 
; 114  :     /* If it's a BUILD_SET, use the PyTuple we just built to create a
; 115  :       PyFrozenSet, and use that as the constant instead: */
; 116  :     if (codestr[0] == BUILD_SET) {

  000c9	48 8b 44 24 60	 mov	 rax, QWORD PTR codestr$[rsp]
  000ce	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  000d1	83 f8 68	 cmp	 eax, 104		; 00000068H
  000d4	75 2f		 jne	 SHORT $LN3@tuple_of_c

; 117  :         PyObject *tuple = newconst;

  000d6	48 8b 44 24 38	 mov	 rax, QWORD PTR newconst$[rsp]
  000db	48 89 44 24 40	 mov	 QWORD PTR tuple$21678[rsp], rax

; 118  :         newconst = PyFrozenSet_New(tuple);

  000e0	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tuple$21678[rsp]
  000e5	e8 00 00 00 00	 call	 PyFrozenSet_New
  000ea	48 89 44 24 38	 mov	 QWORD PTR newconst$[rsp], rax

; 119  :         Py_DECREF(tuple);

  000ef	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tuple$21678[rsp]
  000f4	e8 00 00 00 00	 call	 _Py_DecRef

; 120  :         if (newconst == NULL)

  000f9	48 83 7c 24 38
	00		 cmp	 QWORD PTR newconst$[rsp], 0
  000ff	75 04		 jne	 SHORT $LN2@tuple_of_c

; 121  :             return 0;

  00101	33 c0		 xor	 eax, eax
  00103	eb 5c		 jmp	 SHORT $LN8@tuple_of_c
$LN2@tuple_of_c:
$LN3@tuple_of_c:

; 122  :     }
; 123  : 
; 124  :     /* Append folded constant onto consts */
; 125  :     if (PyList_Append(consts, newconst)) {

  00105	48 8b 54 24 38	 mov	 rdx, QWORD PTR newconst$[rsp]
  0010a	48 8b 4c 24 70	 mov	 rcx, QWORD PTR consts$[rsp]
  0010f	e8 00 00 00 00	 call	 PyList_Append
  00114	85 c0		 test	 eax, eax
  00116	74 0e		 je	 SHORT $LN1@tuple_of_c

; 126  :         Py_DECREF(newconst);

  00118	48 8b 4c 24 38	 mov	 rcx, QWORD PTR newconst$[rsp]
  0011d	e8 00 00 00 00	 call	 _Py_DecRef

; 127  :         return 0;

  00122	33 c0		 xor	 eax, eax
  00124	eb 3b		 jmp	 SHORT $LN8@tuple_of_c
$LN1@tuple_of_c:

; 128  :     }
; 129  :     Py_DECREF(newconst);

  00126	48 8b 4c 24 38	 mov	 rcx, QWORD PTR newconst$[rsp]
  0012b	e8 00 00 00 00	 call	 _Py_DecRef

; 130  : 
; 131  :     /* Write NOPs over old LOAD_CONSTS and
; 132  :        add a new LOAD_CONST newconst on top of the BUILD_TUPLE n */
; 133  :     codestr[0] = LOAD_CONST;

  00130	48 8b 44 24 60	 mov	 rax, QWORD PTR codestr$[rsp]
  00135	c6 00 64	 mov	 BYTE PTR [rax], 100	; 00000064H

; 134  :     SETARG(codestr, 0, len_consts);

  00138	48 8b 44 24 28	 mov	 rax, QWORD PTR len_consts$[rsp]
  0013d	48 c1 f8 08	 sar	 rax, 8
  00141	48 8b 4c 24 60	 mov	 rcx, QWORD PTR codestr$[rsp]
  00146	88 41 02	 mov	 BYTE PTR [rcx+2], al
  00149	48 8b 44 24 28	 mov	 rax, QWORD PTR len_consts$[rsp]
  0014e	48 25 ff 00 00
	00		 and	 rax, 255		; 000000ffH
  00154	48 8b 4c 24 60	 mov	 rcx, QWORD PTR codestr$[rsp]
  00159	88 41 01	 mov	 BYTE PTR [rcx+1], al

; 135  :     return 1;

  0015c	b8 01 00 00 00	 mov	 eax, 1
$LN8@tuple_of_c:

; 136  : }

  00161	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00165	c3		 ret	 0
tuple_of_constants ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
EXTRN	_Py_Dealloc:PROC
EXTRN	_Py_NegativeRefcount:PROC
EXTRN	Px_DecRef:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN13
	DD	imagerel $LN13+257
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
tv81 = 48
op$ = 80
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN13:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	0f 85 e6 00 00
	00		 jne	 $LN8@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00016	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0001b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0001f	48 83 e0 20	 and	 rax, 32			; 00000020H
  00023	48 85 c0	 test	 rax, rax
  00026	75 14		 jne	 SHORT $LN6@Py_DecRef
  00028	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0002d	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00031	48 25 80 00 00
	00		 and	 rax, 128		; 00000080H
  00037	48 85 c0	 test	 rax, rax
  0003a	74 0f		 je	 SHORT $LN7@Py_DecRef
$LN6@Py_DecRef:

; 926  :             Px_DECREF(op);

  0003c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  00041	e8 00 00 00 00	 call	 Px_DecRef
  00046	e9 b1 00 00 00	 jmp	 $LN5@Py_DecRef
$LN7@Py_DecRef:

; 927  :         else if (!Px_ISPX(op)) {

  0004b	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00050	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00054	48 83 e0 02	 and	 rax, 2
  00058	48 85 c0	 test	 rax, rax
  0005b	0f 85 9b 00 00
	00		 jne	 $LN4@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;

  00061	e8 00 00 00 00	 call	 _Py_PXCTX
  00066	85 c0		 test	 eax, eax
  00068	74 02		 je	 SHORT $LN11@Py_DecRef
  0006a	eb 11		 jmp	 SHORT $LN12@Py_DecRef
$LN11@Py_DecRef:
  0006c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00073	48 ff c8	 dec	 rax
  00076	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN12@Py_DecRef:

; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  0007d	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00082	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00086	48 ff c8	 dec	 rax
  00089	48 89 44 24 30	 mov	 QWORD PTR tv81[rsp], rax
  0008e	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00093	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv81[rsp]
  00098	48 89 48 50	 mov	 QWORD PTR [rax+80], rcx
  0009c	48 83 7c 24 30
	00		 cmp	 QWORD PTR tv81[rsp], 0
  000a2	74 4e		 je	 SHORT $LN3@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);

  000a4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000ac	4c 8b 4c 24 50	 mov	 r9, QWORD PTR op$[rsp]
  000b1	41 b8 a2 03 00
	00		 mov	 r8d, 930		; 000003a2H
  000b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000c5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ca	85 c0		 test	 eax, eax
  000cc	75 22		 jne	 SHORT $LN2@Py_DecRef
  000ce	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  000d3	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000d8	7d 16		 jge	 SHORT $LN2@Py_DecRef
  000da	4c 8b 44 24 50	 mov	 r8, QWORD PTR op$[rsp]
  000df	ba a2 03 00 00	 mov	 edx, 930		; 000003a2H
  000e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000eb	e8 00 00 00 00	 call	 _Py_NegativeRefcount
$LN2@Py_DecRef:

; 931  :             } else

  000f0	eb 0a		 jmp	 SHORT $LN1@Py_DecRef
$LN3@Py_DecRef:

; 932  :                 _Py_Dealloc((PyObject *)(op));

  000f2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  000f7	e8 00 00 00 00	 call	 _Py_Dealloc
$LN1@Py_DecRef:
$LN4@Py_DecRef:
$LN5@Py_DecRef:
$LN8@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  000fc	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00100	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CN@FPKFFBGO@unexpected?5binary?5operation?5?$CFd?5o@ ; `string'
EXTRN	PyObject_Size:PROC
EXTRN	PyErr_Clear:PROC
EXTRN	PyErr_ExceptionMatches:PROC
EXTRN	PyExc_KeyboardInterrupt:QWORD
EXTRN	PyErr_Format:PROC
EXTRN	PyExc_SystemError:QWORD
EXTRN	PyNumber_Or:PROC
EXTRN	PyNumber_Xor:PROC
EXTRN	PyNumber_And:PROC
EXTRN	PyNumber_Rshift:PROC
EXTRN	PyNumber_Lshift:PROC
EXTRN	PyObject_GetItem:PROC
EXTRN	PyNumber_Subtract:PROC
EXTRN	PyNumber_Add:PROC
EXTRN	PyNumber_Remainder:PROC
EXTRN	PyNumber_FloorDivide:PROC
EXTRN	PyNumber_TrueDivide:PROC
EXTRN	PyNumber_Multiply:PROC
EXTRN	PyNumber_Power:PROC
EXTRN	_Py_NoneStruct:BYTE
;	COMDAT pdata
; File c:\src\pyparallel\python\peephole.c
pdata	SEGMENT
$pdata$fold_binops_on_constants DD imagerel fold_binops_on_constants
	DD	imagerel fold_binops_on_constants+848
	DD	imagerel $unwind$fold_binops_on_constants
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$fold_binops_on_constants DD 011301H
	DD	0c213H
xdata	ENDS
;	COMDAT ??_C@_0CN@FPKFFBGO@unexpected?5binary?5operation?5?$CFd?5o@
CONST	SEGMENT
??_C@_0CN@FPKFFBGO@unexpected?5binary?5operation?5?$CFd?5o@ DB 'unexpecte'
	DB	'd binary operation %d on a constant', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT fold_binops_on_constants
_TEXT	SEGMENT
w$ = 32
opcode$ = 40
v$ = 48
len_consts$ = 56
size$ = 64
newconst$ = 72
tv72 = 80
codestr$ = 112
consts$ = 120
objs$ = 128
fold_binops_on_constants PROC				; COMDAT

; 150  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 151  :     PyObject *newconst, *v, *w;
; 152  :     Py_ssize_t len_consts, size;
; 153  :     int opcode;
; 154  : 
; 155  :     /* Pre-conditions */
; 156  :     assert(PyList_CheckExact(consts));

  00013	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyList_Type
  0001a	48 8b 4c 24 78	 mov	 rcx, QWORD PTR consts$[rsp]
  0001f	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00023	74 1c		 je	 SHORT $LN26@fold_binop
  00025	41 b8 9c 00 00
	00		 mov	 r8d, 156		; 0000009cH
  0002b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CK@KIMKCIEN@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAe?$AAe?$AAp?$AAh?$AAo?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  00032	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@CMPGFGMM@?$AAP?$AAy?$AAL?$AAi?$AAs?$AAt?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AAE?$AAx?$AAa?$AAc?$AAt?$AA?$CI?$AAc?$AAo?$AAn?$AAs?$AAt?$AAs?$AA?$CJ?$AA?$AA@
  00039	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0003f	33 c0		 xor	 eax, eax
$LN26@fold_binop:

; 157  : 
; 158  :     /* Create new constant */
; 159  :     v = objs[0];

  00041	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR objs$[rsp]
  00049	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0004c	48 89 44 24 30	 mov	 QWORD PTR v$[rsp], rax

; 160  :     w = objs[1];

  00051	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR objs$[rsp]
  00059	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0005d	48 89 44 24 20	 mov	 QWORD PTR w$[rsp], rax

; 161  :     opcode = codestr[0];

  00062	48 8b 44 24 70	 mov	 rax, QWORD PTR codestr$[rsp]
  00067	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0006a	89 44 24 28	 mov	 DWORD PTR opcode$[rsp], eax

; 162  :     switch (opcode) {

  0006e	8b 44 24 28	 mov	 eax, DWORD PTR opcode$[rsp]
  00072	89 44 24 50	 mov	 DWORD PTR tv72[rsp], eax
  00076	8b 44 24 50	 mov	 eax, DWORD PTR tv72[rsp]
  0007a	83 e8 13	 sub	 eax, 19
  0007d	89 44 24 50	 mov	 DWORD PTR tv72[rsp], eax
  00081	83 7c 24 50 2f	 cmp	 DWORD PTR tv72[rsp], 47	; 0000002fH
  00086	0f 87 5d 01 00
	00		 ja	 $LN8@fold_binop
  0008c	48 63 44 24 50	 movsxd	 rax, DWORD PTR tv72[rsp]
  00091	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  00098	0f b6 84 01 00
	00 00 00	 movzx	 eax, BYTE PTR $LN27@fold_binop[rcx+rax]
  000a0	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN28@fold_binop[rcx+rax*4]
  000a7	48 03 c1	 add	 rax, rcx
  000aa	ff e0		 jmp	 rax
$LN21@fold_binop:

; 163  :         case BINARY_POWER:
; 164  :             newconst = PyNumber_Power(v, w, Py_None);

  000ac	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:_Py_NoneStruct
  000b3	48 8b 54 24 20	 mov	 rdx, QWORD PTR w$[rsp]
  000b8	48 8b 4c 24 30	 mov	 rcx, QWORD PTR v$[rsp]
  000bd	e8 00 00 00 00	 call	 PyNumber_Power
  000c2	48 89 44 24 48	 mov	 QWORD PTR newconst$[rsp], rax

; 165  :             break;

  000c7	e9 3c 01 00 00	 jmp	 $LN22@fold_binop
$LN20@fold_binop:

; 166  :         case BINARY_MULTIPLY:
; 167  :             newconst = PyNumber_Multiply(v, w);

  000cc	48 8b 54 24 20	 mov	 rdx, QWORD PTR w$[rsp]
  000d1	48 8b 4c 24 30	 mov	 rcx, QWORD PTR v$[rsp]
  000d6	e8 00 00 00 00	 call	 PyNumber_Multiply
  000db	48 89 44 24 48	 mov	 QWORD PTR newconst$[rsp], rax

; 168  :             break;

  000e0	e9 23 01 00 00	 jmp	 $LN22@fold_binop
$LN19@fold_binop:

; 169  :         case BINARY_TRUE_DIVIDE:
; 170  :             newconst = PyNumber_TrueDivide(v, w);

  000e5	48 8b 54 24 20	 mov	 rdx, QWORD PTR w$[rsp]
  000ea	48 8b 4c 24 30	 mov	 rcx, QWORD PTR v$[rsp]
  000ef	e8 00 00 00 00	 call	 PyNumber_TrueDivide
  000f4	48 89 44 24 48	 mov	 QWORD PTR newconst$[rsp], rax

; 171  :             break;

  000f9	e9 0a 01 00 00	 jmp	 $LN22@fold_binop
$LN18@fold_binop:

; 172  :         case BINARY_FLOOR_DIVIDE:
; 173  :             newconst = PyNumber_FloorDivide(v, w);

  000fe	48 8b 54 24 20	 mov	 rdx, QWORD PTR w$[rsp]
  00103	48 8b 4c 24 30	 mov	 rcx, QWORD PTR v$[rsp]
  00108	e8 00 00 00 00	 call	 PyNumber_FloorDivide
  0010d	48 89 44 24 48	 mov	 QWORD PTR newconst$[rsp], rax

; 174  :             break;

  00112	e9 f1 00 00 00	 jmp	 $LN22@fold_binop
$LN17@fold_binop:

; 175  :         case BINARY_MODULO:
; 176  :             newconst = PyNumber_Remainder(v, w);

  00117	48 8b 54 24 20	 mov	 rdx, QWORD PTR w$[rsp]
  0011c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR v$[rsp]
  00121	e8 00 00 00 00	 call	 PyNumber_Remainder
  00126	48 89 44 24 48	 mov	 QWORD PTR newconst$[rsp], rax

; 177  :             break;

  0012b	e9 d8 00 00 00	 jmp	 $LN22@fold_binop
$LN16@fold_binop:

; 178  :         case BINARY_ADD:
; 179  :             newconst = PyNumber_Add(v, w);

  00130	48 8b 54 24 20	 mov	 rdx, QWORD PTR w$[rsp]
  00135	48 8b 4c 24 30	 mov	 rcx, QWORD PTR v$[rsp]
  0013a	e8 00 00 00 00	 call	 PyNumber_Add
  0013f	48 89 44 24 48	 mov	 QWORD PTR newconst$[rsp], rax

; 180  :             break;

  00144	e9 bf 00 00 00	 jmp	 $LN22@fold_binop
$LN15@fold_binop:

; 181  :         case BINARY_SUBTRACT:
; 182  :             newconst = PyNumber_Subtract(v, w);

  00149	48 8b 54 24 20	 mov	 rdx, QWORD PTR w$[rsp]
  0014e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR v$[rsp]
  00153	e8 00 00 00 00	 call	 PyNumber_Subtract
  00158	48 89 44 24 48	 mov	 QWORD PTR newconst$[rsp], rax

; 183  :             break;

  0015d	e9 a6 00 00 00	 jmp	 $LN22@fold_binop
$LN14@fold_binop:

; 184  :         case BINARY_SUBSCR:
; 185  :             newconst = PyObject_GetItem(v, w);

  00162	48 8b 54 24 20	 mov	 rdx, QWORD PTR w$[rsp]
  00167	48 8b 4c 24 30	 mov	 rcx, QWORD PTR v$[rsp]
  0016c	e8 00 00 00 00	 call	 PyObject_GetItem
  00171	48 89 44 24 48	 mov	 QWORD PTR newconst$[rsp], rax

; 186  :             break;

  00176	e9 8d 00 00 00	 jmp	 $LN22@fold_binop
$LN13@fold_binop:

; 187  :         case BINARY_LSHIFT:
; 188  :             newconst = PyNumber_Lshift(v, w);

  0017b	48 8b 54 24 20	 mov	 rdx, QWORD PTR w$[rsp]
  00180	48 8b 4c 24 30	 mov	 rcx, QWORD PTR v$[rsp]
  00185	e8 00 00 00 00	 call	 PyNumber_Lshift
  0018a	48 89 44 24 48	 mov	 QWORD PTR newconst$[rsp], rax

; 189  :             break;

  0018f	eb 77		 jmp	 SHORT $LN22@fold_binop
$LN12@fold_binop:

; 190  :         case BINARY_RSHIFT:
; 191  :             newconst = PyNumber_Rshift(v, w);

  00191	48 8b 54 24 20	 mov	 rdx, QWORD PTR w$[rsp]
  00196	48 8b 4c 24 30	 mov	 rcx, QWORD PTR v$[rsp]
  0019b	e8 00 00 00 00	 call	 PyNumber_Rshift
  001a0	48 89 44 24 48	 mov	 QWORD PTR newconst$[rsp], rax

; 192  :             break;

  001a5	eb 61		 jmp	 SHORT $LN22@fold_binop
$LN11@fold_binop:

; 193  :         case BINARY_AND:
; 194  :             newconst = PyNumber_And(v, w);

  001a7	48 8b 54 24 20	 mov	 rdx, QWORD PTR w$[rsp]
  001ac	48 8b 4c 24 30	 mov	 rcx, QWORD PTR v$[rsp]
  001b1	e8 00 00 00 00	 call	 PyNumber_And
  001b6	48 89 44 24 48	 mov	 QWORD PTR newconst$[rsp], rax

; 195  :             break;

  001bb	eb 4b		 jmp	 SHORT $LN22@fold_binop
$LN10@fold_binop:

; 196  :         case BINARY_XOR:
; 197  :             newconst = PyNumber_Xor(v, w);

  001bd	48 8b 54 24 20	 mov	 rdx, QWORD PTR w$[rsp]
  001c2	48 8b 4c 24 30	 mov	 rcx, QWORD PTR v$[rsp]
  001c7	e8 00 00 00 00	 call	 PyNumber_Xor
  001cc	48 89 44 24 48	 mov	 QWORD PTR newconst$[rsp], rax

; 198  :             break;

  001d1	eb 35		 jmp	 SHORT $LN22@fold_binop
$LN9@fold_binop:

; 199  :         case BINARY_OR:
; 200  :             newconst = PyNumber_Or(v, w);

  001d3	48 8b 54 24 20	 mov	 rdx, QWORD PTR w$[rsp]
  001d8	48 8b 4c 24 30	 mov	 rcx, QWORD PTR v$[rsp]
  001dd	e8 00 00 00 00	 call	 PyNumber_Or
  001e2	48 89 44 24 48	 mov	 QWORD PTR newconst$[rsp], rax

; 201  :             break;

  001e7	eb 1f		 jmp	 SHORT $LN22@fold_binop
$LN8@fold_binop:

; 202  :         default:
; 203  :             /* Called with an unknown opcode */
; 204  :             PyErr_Format(PyExc_SystemError,
; 205  :                  "unexpected binary operation %d on a constant",
; 206  :                      opcode);

  001e9	44 8b 44 24 28	 mov	 r8d, DWORD PTR opcode$[rsp]
  001ee	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CN@FPKFFBGO@unexpected?5binary?5operation?5?$CFd?5o@
  001f5	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SystemError
  001fc	e8 00 00 00 00	 call	 PyErr_Format

; 207  :             return 0;

  00201	33 c0		 xor	 eax, eax
  00203	e9 d9 00 00 00	 jmp	 $LN24@fold_binop
$LN22@fold_binop:

; 208  :     }
; 209  :     if (newconst == NULL) {

  00208	48 83 7c 24 48
	00		 cmp	 QWORD PTR newconst$[rsp], 0
  0020e	75 1c		 jne	 SHORT $LN7@fold_binop

; 210  :         if(!PyErr_ExceptionMatches(PyExc_KeyboardInterrupt))

  00210	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_KeyboardInterrupt
  00217	e8 00 00 00 00	 call	 PyErr_ExceptionMatches
  0021c	85 c0		 test	 eax, eax
  0021e	75 05		 jne	 SHORT $LN6@fold_binop

; 211  :             PyErr_Clear();

  00220	e8 00 00 00 00	 call	 PyErr_Clear
$LN6@fold_binop:

; 212  :         return 0;

  00225	33 c0		 xor	 eax, eax
  00227	e9 b5 00 00 00	 jmp	 $LN24@fold_binop
$LN7@fold_binop:

; 213  :     }
; 214  :     size = PyObject_Size(newconst);

  0022c	48 8b 4c 24 48	 mov	 rcx, QWORD PTR newconst$[rsp]
  00231	e8 00 00 00 00	 call	 PyObject_Size
  00236	48 89 44 24 40	 mov	 QWORD PTR size$[rsp], rax

; 215  :     if (size == -1) {

  0023b	48 83 7c 24 40
	ff		 cmp	 QWORD PTR size$[rsp], -1
  00241	75 1e		 jne	 SHORT $LN5@fold_binop

; 216  :         if (PyErr_ExceptionMatches(PyExc_KeyboardInterrupt))

  00243	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_KeyboardInterrupt
  0024a	e8 00 00 00 00	 call	 PyErr_ExceptionMatches
  0024f	85 c0		 test	 eax, eax
  00251	74 07		 je	 SHORT $LN4@fold_binop

; 217  :             return 0;

  00253	33 c0		 xor	 eax, eax
  00255	e9 87 00 00 00	 jmp	 $LN24@fold_binop
$LN4@fold_binop:

; 218  :         PyErr_Clear();

  0025a	e8 00 00 00 00	 call	 PyErr_Clear
  0025f	eb 16		 jmp	 SHORT $LN3@fold_binop
$LN5@fold_binop:

; 219  :     } else if (size > 20) {

  00261	48 83 7c 24 40
	14		 cmp	 QWORD PTR size$[rsp], 20
  00267	7e 0e		 jle	 SHORT $LN2@fold_binop

; 220  :         Py_DECREF(newconst);

  00269	48 8b 4c 24 48	 mov	 rcx, QWORD PTR newconst$[rsp]
  0026e	e8 00 00 00 00	 call	 _Py_DecRef

; 221  :         return 0;

  00273	33 c0		 xor	 eax, eax
  00275	eb 6a		 jmp	 SHORT $LN24@fold_binop
$LN2@fold_binop:
$LN3@fold_binop:

; 222  :     }
; 223  : 
; 224  :     /* Append folded constant into consts table */
; 225  :     len_consts = PyList_GET_SIZE(consts);

  00277	48 8b 44 24 78	 mov	 rax, QWORD PTR consts$[rsp]
  0027c	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00280	48 89 44 24 38	 mov	 QWORD PTR len_consts$[rsp], rax

; 226  :     if (PyList_Append(consts, newconst)) {

  00285	48 8b 54 24 48	 mov	 rdx, QWORD PTR newconst$[rsp]
  0028a	48 8b 4c 24 78	 mov	 rcx, QWORD PTR consts$[rsp]
  0028f	e8 00 00 00 00	 call	 PyList_Append
  00294	85 c0		 test	 eax, eax
  00296	74 0e		 je	 SHORT $LN1@fold_binop

; 227  :         Py_DECREF(newconst);

  00298	48 8b 4c 24 48	 mov	 rcx, QWORD PTR newconst$[rsp]
  0029d	e8 00 00 00 00	 call	 _Py_DecRef

; 228  :         return 0;

  002a2	33 c0		 xor	 eax, eax
  002a4	eb 3b		 jmp	 SHORT $LN24@fold_binop
$LN1@fold_binop:

; 229  :     }
; 230  :     Py_DECREF(newconst);

  002a6	48 8b 4c 24 48	 mov	 rcx, QWORD PTR newconst$[rsp]
  002ab	e8 00 00 00 00	 call	 _Py_DecRef

; 231  : 
; 232  :     /* Write NOP NOP NOP NOP LOAD_CONST newconst */
; 233  :     codestr[-2] = LOAD_CONST;

  002b0	48 8b 44 24 70	 mov	 rax, QWORD PTR codestr$[rsp]
  002b5	c6 40 fe 64	 mov	 BYTE PTR [rax-2], 100	; 00000064H

; 234  :     SETARG(codestr, -2, len_consts);

  002b9	48 8b 44 24 38	 mov	 rax, QWORD PTR len_consts$[rsp]
  002be	48 c1 f8 08	 sar	 rax, 8
  002c2	48 8b 4c 24 70	 mov	 rcx, QWORD PTR codestr$[rsp]
  002c7	88 01		 mov	 BYTE PTR [rcx], al
  002c9	48 8b 44 24 38	 mov	 rax, QWORD PTR len_consts$[rsp]
  002ce	48 25 ff 00 00
	00		 and	 rax, 255		; 000000ffH
  002d4	48 8b 4c 24 70	 mov	 rcx, QWORD PTR codestr$[rsp]
  002d9	88 41 ff	 mov	 BYTE PTR [rcx-1], al

; 235  :     return 1;

  002dc	b8 01 00 00 00	 mov	 eax, 1
$LN24@fold_binop:

; 236  : }

  002e1	48 83 c4 68	 add	 rsp, 104		; 00000068H
  002e5	c3		 ret	 0
  002e6	66 90		 npad	 2
$LN28@fold_binop:
  002e8	00 00 00 00	 DD	 $LN21@fold_binop
  002ec	00 00 00 00	 DD	 $LN20@fold_binop
  002f0	00 00 00 00	 DD	 $LN17@fold_binop
  002f4	00 00 00 00	 DD	 $LN16@fold_binop
  002f8	00 00 00 00	 DD	 $LN15@fold_binop
  002fc	00 00 00 00	 DD	 $LN14@fold_binop
  00300	00 00 00 00	 DD	 $LN18@fold_binop
  00304	00 00 00 00	 DD	 $LN19@fold_binop
  00308	00 00 00 00	 DD	 $LN13@fold_binop
  0030c	00 00 00 00	 DD	 $LN12@fold_binop
  00310	00 00 00 00	 DD	 $LN11@fold_binop
  00314	00 00 00 00	 DD	 $LN10@fold_binop
  00318	00 00 00 00	 DD	 $LN9@fold_binop
  0031c	00 00 00 00	 DD	 $LN8@fold_binop
$LN27@fold_binop:
  00320	00		 DB	 0
  00321	01		 DB	 1
  00322	0d		 DB	 13
  00323	02		 DB	 2
  00324	03		 DB	 3
  00325	04		 DB	 4
  00326	05		 DB	 5
  00327	06		 DB	 6
  00328	07		 DB	 7
  00329	0d		 DB	 13
  0032a	0d		 DB	 13
  0032b	0d		 DB	 13
  0032c	0d		 DB	 13
  0032d	0d		 DB	 13
  0032e	0d		 DB	 13
  0032f	0d		 DB	 13
  00330	0d		 DB	 13
  00331	0d		 DB	 13
  00332	0d		 DB	 13
  00333	0d		 DB	 13
  00334	0d		 DB	 13
  00335	0d		 DB	 13
  00336	0d		 DB	 13
  00337	0d		 DB	 13
  00338	0d		 DB	 13
  00339	0d		 DB	 13
  0033a	0d		 DB	 13
  0033b	0d		 DB	 13
  0033c	0d		 DB	 13
  0033d	0d		 DB	 13
  0033e	0d		 DB	 13
  0033f	0d		 DB	 13
  00340	0d		 DB	 13
  00341	0d		 DB	 13
  00342	0d		 DB	 13
  00343	0d		 DB	 13
  00344	0d		 DB	 13
  00345	0d		 DB	 13
  00346	0d		 DB	 13
  00347	0d		 DB	 13
  00348	0d		 DB	 13
  00349	0d		 DB	 13
  0034a	0d		 DB	 13
  0034b	08		 DB	 8
  0034c	09		 DB	 9
  0034d	0a		 DB	 10
  0034e	0b		 DB	 11
  0034f	0c		 DB	 12
fold_binops_on_constants ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CM@NBMLINOO@unexpected?5unary?5operation?5?$CFd?5on@ ; `string'
PUBLIC	??_C@_1DC@NCAKJCEC@?$AAc?$AAo?$AAd?$AAe?$AAs?$AAt?$AAr?$AA?$FL?$AA0?$AA?$FN?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAL?$AAO?$AAA?$AAD?$AA_?$AAC?$AAO?$AAN?$AAS?$AAT?$AA?$AA@ ; `string'
EXTRN	PyNumber_Positive:PROC
EXTRN	PyNumber_Invert:PROC
EXTRN	PyNumber_Negative:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$fold_unaryops_on_constants DD imagerel fold_unaryops_on_constants
	DD	imagerel fold_unaryops_on_constants+385
	DD	imagerel $unwind$fold_unaryops_on_constants
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$fold_unaryops_on_constants DD 011301H
	DD	08213H
xdata	ENDS
;	COMDAT ??_C@_0CM@NBMLINOO@unexpected?5unary?5operation?5?$CFd?5on@
CONST	SEGMENT
??_C@_0CM@NBMLINOO@unexpected?5unary?5operation?5?$CFd?5on@ DB 'unexpecte'
	DB	'd unary operation %d on a constant', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1DC@NCAKJCEC@?$AAc?$AAo?$AAd?$AAe?$AAs?$AAt?$AAr?$AA?$FL?$AA0?$AA?$FN?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAL?$AAO?$AAA?$AAD?$AA_?$AAC?$AAO?$AAN?$AAS?$AAT?$AA?$AA@
CONST	SEGMENT
??_C@_1DC@NCAKJCEC@?$AAc?$AAo?$AAd?$AAe?$AAs?$AAt?$AAr?$AA?$FL?$AA0?$AA?$FN?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAL?$AAO?$AAA?$AAD?$AA_?$AAC?$AAO?$AAN?$AAS?$AAT?$AA?$AA@ DB 'c'
	DB	00H, 'o', 00H, 'd', 00H, 'e', 00H, 's', 00H, 't', 00H, 'r', 00H
	DB	'[', 00H, '0', 00H, ']', 00H, ' ', 00H, '=', 00H, '=', 00H, ' '
	DB	00H, 'L', 00H, 'O', 00H, 'A', 00H, 'D', 00H, '_', 00H, 'C', 00H
	DB	'O', 00H, 'N', 00H, 'S', 00H, 'T', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT fold_unaryops_on_constants
_TEXT	SEGMENT
opcode$ = 32
len_consts$ = 40
newconst$ = 48
tv78 = 56
codestr$ = 80
consts$ = 88
v$ = 96
fold_unaryops_on_constants PROC				; COMDAT

; 240  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 241  :     PyObject *newconst;
; 242  :     Py_ssize_t len_consts;
; 243  :     int opcode;
; 244  : 
; 245  :     /* Pre-conditions */
; 246  :     assert(PyList_CheckExact(consts));

  00013	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyList_Type
  0001a	48 8b 4c 24 58	 mov	 rcx, QWORD PTR consts$[rsp]
  0001f	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00023	74 1c		 je	 SHORT $LN12@fold_unary
  00025	41 b8 f6 00 00
	00		 mov	 r8d, 246		; 000000f6H
  0002b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CK@KIMKCIEN@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAe?$AAe?$AAp?$AAh?$AAo?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  00032	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@CMPGFGMM@?$AAP?$AAy?$AAL?$AAi?$AAs?$AAt?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AAE?$AAx?$AAa?$AAc?$AAt?$AA?$CI?$AAc?$AAo?$AAn?$AAs?$AAt?$AAs?$AA?$CJ?$AA?$AA@
  00039	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0003f	33 c0		 xor	 eax, eax
$LN12@fold_unary:

; 247  :     assert(codestr[0] == LOAD_CONST);

  00041	48 8b 44 24 50	 mov	 rax, QWORD PTR codestr$[rsp]
  00046	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00049	83 f8 64	 cmp	 eax, 100		; 00000064H
  0004c	74 1c		 je	 SHORT $LN13@fold_unary
  0004e	41 b8 f7 00 00
	00		 mov	 r8d, 247		; 000000f7H
  00054	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CK@KIMKCIEN@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAe?$AAe?$AAp?$AAh?$AAo?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  0005b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DC@NCAKJCEC@?$AAc?$AAo?$AAd?$AAe?$AAs?$AAt?$AAr?$AA?$FL?$AA0?$AA?$FN?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAL?$AAO?$AAA?$AAD?$AA_?$AAC?$AAO?$AAN?$AAS?$AAT?$AA?$AA@
  00062	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00068	33 c0		 xor	 eax, eax
$LN13@fold_unary:

; 248  : 
; 249  :     /* Create new constant */
; 250  :     opcode = codestr[3];

  0006a	48 8b 44 24 50	 mov	 rax, QWORD PTR codestr$[rsp]
  0006f	0f b6 40 03	 movzx	 eax, BYTE PTR [rax+3]
  00073	89 44 24 20	 mov	 DWORD PTR opcode$[rsp], eax

; 251  :     switch (opcode) {

  00077	8b 44 24 20	 mov	 eax, DWORD PTR opcode$[rsp]
  0007b	89 44 24 38	 mov	 DWORD PTR tv78[rsp], eax
  0007f	83 7c 24 38 0a	 cmp	 DWORD PTR tv78[rsp], 10
  00084	74 32		 je	 SHORT $LN5@fold_unary
  00086	83 7c 24 38 0b	 cmp	 DWORD PTR tv78[rsp], 11
  0008b	74 09		 je	 SHORT $LN7@fold_unary
  0008d	83 7c 24 38 0f	 cmp	 DWORD PTR tv78[rsp], 15
  00092	74 13		 je	 SHORT $LN6@fold_unary
  00094	eb 33		 jmp	 SHORT $LN4@fold_unary
$LN7@fold_unary:

; 252  :         case UNARY_NEGATIVE:
; 253  :             newconst = PyNumber_Negative(v);

  00096	48 8b 4c 24 60	 mov	 rcx, QWORD PTR v$[rsp]
  0009b	e8 00 00 00 00	 call	 PyNumber_Negative
  000a0	48 89 44 24 30	 mov	 QWORD PTR newconst$[rsp], rax

; 254  :             break;

  000a5	eb 41		 jmp	 SHORT $LN8@fold_unary
$LN6@fold_unary:

; 255  :         case UNARY_INVERT:
; 256  :             newconst = PyNumber_Invert(v);

  000a7	48 8b 4c 24 60	 mov	 rcx, QWORD PTR v$[rsp]
  000ac	e8 00 00 00 00	 call	 PyNumber_Invert
  000b1	48 89 44 24 30	 mov	 QWORD PTR newconst$[rsp], rax

; 257  :             break;

  000b6	eb 30		 jmp	 SHORT $LN8@fold_unary
$LN5@fold_unary:

; 258  :         case UNARY_POSITIVE:
; 259  :             newconst = PyNumber_Positive(v);

  000b8	48 8b 4c 24 60	 mov	 rcx, QWORD PTR v$[rsp]
  000bd	e8 00 00 00 00	 call	 PyNumber_Positive
  000c2	48 89 44 24 30	 mov	 QWORD PTR newconst$[rsp], rax

; 260  :             break;

  000c7	eb 1f		 jmp	 SHORT $LN8@fold_unary
$LN4@fold_unary:

; 261  :         default:
; 262  :             /* Called with an unknown opcode */
; 263  :             PyErr_Format(PyExc_SystemError,
; 264  :                  "unexpected unary operation %d on a constant",
; 265  :                      opcode);

  000c9	44 8b 44 24 20	 mov	 r8d, DWORD PTR opcode$[rsp]
  000ce	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CM@NBMLINOO@unexpected?5unary?5operation?5?$CFd?5on@
  000d5	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SystemError
  000dc	e8 00 00 00 00	 call	 PyErr_Format

; 266  :             return 0;

  000e1	33 c0		 xor	 eax, eax
  000e3	e9 94 00 00 00	 jmp	 $LN10@fold_unary
$LN8@fold_unary:

; 267  :     }
; 268  :     if (newconst == NULL) {

  000e8	48 83 7c 24 30
	00		 cmp	 QWORD PTR newconst$[rsp], 0
  000ee	75 19		 jne	 SHORT $LN3@fold_unary

; 269  :         if(!PyErr_ExceptionMatches(PyExc_KeyboardInterrupt))

  000f0	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_KeyboardInterrupt
  000f7	e8 00 00 00 00	 call	 PyErr_ExceptionMatches
  000fc	85 c0		 test	 eax, eax
  000fe	75 05		 jne	 SHORT $LN2@fold_unary

; 270  :             PyErr_Clear();

  00100	e8 00 00 00 00	 call	 PyErr_Clear
$LN2@fold_unary:

; 271  :         return 0;

  00105	33 c0		 xor	 eax, eax
  00107	eb 73		 jmp	 SHORT $LN10@fold_unary
$LN3@fold_unary:

; 272  :     }
; 273  : 
; 274  :     /* Append folded constant into consts table */
; 275  :     len_consts = PyList_GET_SIZE(consts);

  00109	48 8b 44 24 58	 mov	 rax, QWORD PTR consts$[rsp]
  0010e	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00112	48 89 44 24 28	 mov	 QWORD PTR len_consts$[rsp], rax

; 276  :     if (PyList_Append(consts, newconst)) {

  00117	48 8b 54 24 30	 mov	 rdx, QWORD PTR newconst$[rsp]
  0011c	48 8b 4c 24 58	 mov	 rcx, QWORD PTR consts$[rsp]
  00121	e8 00 00 00 00	 call	 PyList_Append
  00126	85 c0		 test	 eax, eax
  00128	74 0e		 je	 SHORT $LN1@fold_unary

; 277  :         Py_DECREF(newconst);

  0012a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR newconst$[rsp]
  0012f	e8 00 00 00 00	 call	 _Py_DecRef

; 278  :         return 0;

  00134	33 c0		 xor	 eax, eax
  00136	eb 44		 jmp	 SHORT $LN10@fold_unary
$LN1@fold_unary:

; 279  :     }
; 280  :     Py_DECREF(newconst);

  00138	48 8b 4c 24 30	 mov	 rcx, QWORD PTR newconst$[rsp]
  0013d	e8 00 00 00 00	 call	 _Py_DecRef

; 281  : 
; 282  :     /* Write NOP LOAD_CONST newconst */
; 283  :     codestr[0] = NOP;

  00142	48 8b 44 24 50	 mov	 rax, QWORD PTR codestr$[rsp]
  00147	c6 00 09	 mov	 BYTE PTR [rax], 9

; 284  :     codestr[1] = LOAD_CONST;

  0014a	48 8b 44 24 50	 mov	 rax, QWORD PTR codestr$[rsp]
  0014f	c6 40 01 64	 mov	 BYTE PTR [rax+1], 100	; 00000064H

; 285  :     SETARG(codestr, 1, len_consts);

  00153	48 8b 44 24 28	 mov	 rax, QWORD PTR len_consts$[rsp]
  00158	48 c1 f8 08	 sar	 rax, 8
  0015c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR codestr$[rsp]
  00161	88 41 03	 mov	 BYTE PTR [rcx+3], al
  00164	48 8b 44 24 28	 mov	 rax, QWORD PTR len_consts$[rsp]
  00169	48 25 ff 00 00
	00		 and	 rax, 255		; 000000ffH
  0016f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR codestr$[rsp]
  00174	88 41 02	 mov	 BYTE PTR [rcx+2], al

; 286  :     return 1;

  00177	b8 01 00 00 00	 mov	 eax, 1
$LN10@fold_unary:

; 287  : }

  0017c	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00180	c3		 ret	 0
fold_unaryops_on_constants ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$markblocks DD imagerel markblocks
	DD	imagerel markblocks+595
	DD	imagerel $unwind$markblocks
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$markblocks DD 010e01H
	DD	0a20eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT markblocks
_TEXT	SEGMENT
opcode$ = 32
i$ = 36
blockcnt$ = 40
blocks$ = 48
j$ = 56
tv73 = 60
tv80 = 64
tv148 = 68
code$ = 96
len$ = 104
markblocks PROC						; COMDAT

; 291  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 292  :     unsigned int *blocks = (unsigned int *)PyMem_Malloc(len*sizeof(int));

  0000e	48 8b 44 24 68	 mov	 rax, QWORD PTR len$[rsp]
  00013	48 c1 e0 02	 shl	 rax, 2
  00017	48 8b c8	 mov	 rcx, rax
  0001a	e8 00 00 00 00	 call	 PyMem_Malloc
  0001f	48 89 44 24 30	 mov	 QWORD PTR blocks$[rsp], rax

; 293  :     int i,j, opcode, blockcnt = 0;

  00024	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR blockcnt$[rsp], 0

; 294  : 
; 295  :     if (blocks == NULL) {

  0002c	48 83 7c 24 30
	00		 cmp	 QWORD PTR blocks$[rsp], 0
  00032	75 0c		 jne	 SHORT $LN10@markblocks

; 296  :         PyErr_NoMemory();

  00034	e8 00 00 00 00	 call	 PyErr_NoMemory

; 297  :         return NULL;

  00039	33 c0		 xor	 eax, eax
  0003b	e9 d0 01 00 00	 jmp	 $LN11@markblocks
$LN10@markblocks:

; 298  :     }
; 299  :     memset(blocks, 0, len*sizeof(int));

  00040	48 8b 44 24 68	 mov	 rax, QWORD PTR len$[rsp]
  00045	48 c1 e0 02	 shl	 rax, 2
  00049	4c 8b c0	 mov	 r8, rax
  0004c	33 d2		 xor	 edx, edx
  0004e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR blocks$[rsp]
  00053	e8 00 00 00 00	 call	 memset

; 300  : 
; 301  :     /* Mark labels in the first pass */
; 302  :     for (i=0 ; i<len ; i+=CODESIZE(opcode)) {

  00058	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00060	eb 29		 jmp	 SHORT $LN9@markblocks
$LN8@markblocks:
  00062	83 7c 24 20 5a	 cmp	 DWORD PTR opcode$[rsp], 90 ; 0000005aH
  00067	7c 0a		 jl	 SHORT $LN13@markblocks
  00069	c7 44 24 3c 03
	00 00 00	 mov	 DWORD PTR tv73[rsp], 3
  00071	eb 08		 jmp	 SHORT $LN14@markblocks
$LN13@markblocks:
  00073	c7 44 24 3c 01
	00 00 00	 mov	 DWORD PTR tv73[rsp], 1
$LN14@markblocks:
  0007b	8b 44 24 3c	 mov	 eax, DWORD PTR tv73[rsp]
  0007f	8b 4c 24 24	 mov	 ecx, DWORD PTR i$[rsp]
  00083	03 c8		 add	 ecx, eax
  00085	8b c1		 mov	 eax, ecx
  00087	89 44 24 24	 mov	 DWORD PTR i$[rsp], eax
$LN9@markblocks:
  0008b	48 63 44 24 24	 movsxd	 rax, DWORD PTR i$[rsp]
  00090	48 3b 44 24 68	 cmp	 rax, QWORD PTR len$[rsp]
  00095	0f 8d 24 01 00
	00		 jge	 $LN7@markblocks

; 303  :         opcode = code[i];

  0009b	48 63 44 24 24	 movsxd	 rax, DWORD PTR i$[rsp]
  000a0	48 8b 4c 24 60	 mov	 rcx, QWORD PTR code$[rsp]
  000a5	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  000a9	89 44 24 20	 mov	 DWORD PTR opcode$[rsp], eax

; 304  :         switch (opcode) {

  000ad	8b 44 24 20	 mov	 eax, DWORD PTR opcode$[rsp]
  000b1	89 44 24 40	 mov	 DWORD PTR tv80[rsp], eax
  000b5	8b 44 24 40	 mov	 eax, DWORD PTR tv80[rsp]
  000b9	83 e8 5d	 sub	 eax, 93			; 0000005dH
  000bc	89 44 24 40	 mov	 DWORD PTR tv80[rsp], eax
  000c0	83 7c 24 40 32	 cmp	 DWORD PTR tv80[rsp], 50	; 00000032H
  000c5	0f 87 ef 00 00
	00		 ja	 $LN5@markblocks
  000cb	48 63 44 24 40	 movsxd	 rax, DWORD PTR tv80[rsp]
  000d0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  000d7	0f b6 84 01 00
	00 00 00	 movzx	 eax, BYTE PTR $LN17@markblocks[rcx+rax]
  000df	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN18@markblocks[rcx+rax*4]
  000e6	48 03 c1	 add	 rax, rcx
  000e9	ff e0		 jmp	 rax
$LN4@markblocks:

; 305  :             case FOR_ITER:
; 306  :             case JUMP_FORWARD:
; 307  :             case JUMP_IF_FALSE_OR_POP:
; 308  :             case JUMP_IF_TRUE_OR_POP:
; 309  :             case POP_JUMP_IF_FALSE:
; 310  :             case POP_JUMP_IF_TRUE:
; 311  :             case JUMP_ABSOLUTE:
; 312  :             case CONTINUE_LOOP:
; 313  :             case SETUP_LOOP:
; 314  :             case SETUP_EXCEPT:
; 315  :             case SETUP_FINALLY:
; 316  :             case SETUP_WITH:
; 317  :                 j = GETJUMPTGT(code, i);

  000eb	48 63 44 24 24	 movsxd	 rax, DWORD PTR i$[rsp]
  000f0	48 8b 4c 24 60	 mov	 rcx, QWORD PTR code$[rsp]
  000f5	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  000f9	83 f8 71	 cmp	 eax, 113		; 00000071H
  000fc	74 6c		 je	 SHORT $LN15@markblocks
  000fe	48 63 44 24 24	 movsxd	 rax, DWORD PTR i$[rsp]
  00103	48 8b 4c 24 60	 mov	 rcx, QWORD PTR code$[rsp]
  00108	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0010c	83 f8 77	 cmp	 eax, 119		; 00000077H
  0010f	74 59		 je	 SHORT $LN15@markblocks
  00111	48 63 44 24 24	 movsxd	 rax, DWORD PTR i$[rsp]
  00116	48 8b 4c 24 60	 mov	 rcx, QWORD PTR code$[rsp]
  0011b	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  0011f	83 f8 72	 cmp	 eax, 114		; 00000072H
  00122	74 46		 je	 SHORT $LN15@markblocks
  00124	48 63 44 24 24	 movsxd	 rax, DWORD PTR i$[rsp]
  00129	48 8b 4c 24 60	 mov	 rcx, QWORD PTR code$[rsp]
  0012e	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00132	83 f8 73	 cmp	 eax, 115		; 00000073H
  00135	74 33		 je	 SHORT $LN15@markblocks
  00137	48 63 44 24 24	 movsxd	 rax, DWORD PTR i$[rsp]
  0013c	48 8b 4c 24 60	 mov	 rcx, QWORD PTR code$[rsp]
  00141	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00145	83 f8 6f	 cmp	 eax, 111		; 0000006fH
  00148	74 20		 je	 SHORT $LN15@markblocks
  0014a	48 63 44 24 24	 movsxd	 rax, DWORD PTR i$[rsp]
  0014f	48 8b 4c 24 60	 mov	 rcx, QWORD PTR code$[rsp]
  00154	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00158	83 f8 70	 cmp	 eax, 112		; 00000070H
  0015b	74 0d		 je	 SHORT $LN15@markblocks
  0015d	8b 44 24 24	 mov	 eax, DWORD PTR i$[rsp]
  00161	83 c0 03	 add	 eax, 3
  00164	89 44 24 44	 mov	 DWORD PTR tv148[rsp], eax
  00168	eb 08		 jmp	 SHORT $LN16@markblocks
$LN15@markblocks:
  0016a	c7 44 24 44 00
	00 00 00	 mov	 DWORD PTR tv148[rsp], 0
$LN16@markblocks:
  00172	8b 44 24 24	 mov	 eax, DWORD PTR i$[rsp]
  00176	83 c0 02	 add	 eax, 2
  00179	48 98		 cdqe
  0017b	48 8b 4c 24 60	 mov	 rcx, QWORD PTR code$[rsp]
  00180	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00184	c1 e0 08	 shl	 eax, 8
  00187	8b 4c 24 24	 mov	 ecx, DWORD PTR i$[rsp]
  0018b	ff c1		 inc	 ecx
  0018d	48 63 c9	 movsxd	 rcx, ecx
  00190	48 8b 54 24 60	 mov	 rdx, QWORD PTR code$[rsp]
  00195	0f b6 0c 0a	 movzx	 ecx, BYTE PTR [rdx+rcx]
  00199	8b 54 24 44	 mov	 edx, DWORD PTR tv148[rsp]
  0019d	03 d0		 add	 edx, eax
  0019f	8b c2		 mov	 eax, edx
  001a1	03 c8		 add	 ecx, eax
  001a3	8b c1		 mov	 eax, ecx
  001a5	89 44 24 38	 mov	 DWORD PTR j$[rsp], eax

; 318  :                 blocks[j] = 1;

  001a9	48 63 44 24 38	 movsxd	 rax, DWORD PTR j$[rsp]
  001ae	48 8b 4c 24 30	 mov	 rcx, QWORD PTR blocks$[rsp]
  001b3	c7 04 81 01 00
	00 00		 mov	 DWORD PTR [rcx+rax*4], 1
$LN5@markblocks:

; 319  :                 break;
; 320  :         }
; 321  :     }

  001ba	e9 a3 fe ff ff	 jmp	 $LN8@markblocks
$LN7@markblocks:

; 322  :     /* Build block numbers in the second pass */
; 323  :     for (i=0 ; i<len ; i++) {

  001bf	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  001c7	eb 0a		 jmp	 SHORT $LN3@markblocks
$LN2@markblocks:
  001c9	8b 44 24 24	 mov	 eax, DWORD PTR i$[rsp]
  001cd	ff c0		 inc	 eax
  001cf	89 44 24 24	 mov	 DWORD PTR i$[rsp], eax
$LN3@markblocks:
  001d3	48 63 44 24 24	 movsxd	 rax, DWORD PTR i$[rsp]
  001d8	48 3b 44 24 68	 cmp	 rax, QWORD PTR len$[rsp]
  001dd	7d 2c		 jge	 SHORT $LN1@markblocks

; 324  :         blockcnt += blocks[i];          /* increment blockcnt over labels */

  001df	48 63 44 24 24	 movsxd	 rax, DWORD PTR i$[rsp]
  001e4	48 8b 4c 24 30	 mov	 rcx, QWORD PTR blocks$[rsp]
  001e9	8b 04 81	 mov	 eax, DWORD PTR [rcx+rax*4]
  001ec	8b 4c 24 28	 mov	 ecx, DWORD PTR blockcnt$[rsp]
  001f0	03 c8		 add	 ecx, eax
  001f2	8b c1		 mov	 eax, ecx
  001f4	89 44 24 28	 mov	 DWORD PTR blockcnt$[rsp], eax

; 325  :         blocks[i] = blockcnt;

  001f8	48 63 44 24 24	 movsxd	 rax, DWORD PTR i$[rsp]
  001fd	48 8b 4c 24 30	 mov	 rcx, QWORD PTR blocks$[rsp]
  00202	8b 54 24 28	 mov	 edx, DWORD PTR blockcnt$[rsp]
  00206	89 14 81	 mov	 DWORD PTR [rcx+rax*4], edx

; 326  :     }

  00209	eb be		 jmp	 SHORT $LN2@markblocks
$LN1@markblocks:

; 327  :     return blocks;

  0020b	48 8b 44 24 30	 mov	 rax, QWORD PTR blocks$[rsp]
$LN11@markblocks:

; 328  : }

  00210	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00214	c3		 ret	 0
  00215	0f 1f 00	 npad	 3
$LN18@markblocks:
  00218	00 00 00 00	 DD	 $LN4@markblocks
  0021c	00 00 00 00	 DD	 $LN5@markblocks
$LN17@markblocks:
  00220	00		 DB	 0
  00221	01		 DB	 1
  00222	01		 DB	 1
  00223	01		 DB	 1
  00224	01		 DB	 1
  00225	01		 DB	 1
  00226	01		 DB	 1
  00227	01		 DB	 1
  00228	01		 DB	 1
  00229	01		 DB	 1
  0022a	01		 DB	 1
  0022b	01		 DB	 1
  0022c	01		 DB	 1
  0022d	01		 DB	 1
  0022e	01		 DB	 1
  0022f	01		 DB	 1
  00230	01		 DB	 1
  00231	00		 DB	 0
  00232	00		 DB	 0
  00233	00		 DB	 0
  00234	00		 DB	 0
  00235	00		 DB	 0
  00236	00		 DB	 0
  00237	01		 DB	 1
  00238	01		 DB	 1
  00239	01		 DB	 1
  0023a	00		 DB	 0
  0023b	00		 DB	 0
  0023c	00		 DB	 0
  0023d	00		 DB	 0
  0023e	01		 DB	 1
  0023f	01		 DB	 1
  00240	01		 DB	 1
  00241	01		 DB	 1
  00242	01		 DB	 1
  00243	01		 DB	 1
  00244	01		 DB	 1
  00245	01		 DB	 1
  00246	01		 DB	 1
  00247	01		 DB	 1
  00248	01		 DB	 1
  00249	01		 DB	 1
  0024a	01		 DB	 1
  0024b	01		 DB	 1
  0024c	01		 DB	 1
  0024d	01		 DB	 1
  0024e	01		 DB	 1
  0024f	01		 DB	 1
  00250	01		 DB	 1
  00251	01		 DB	 1
  00252	00		 DB	 0
markblocks ENDP
_TEXT	ENDS
PUBLIC	??_C@_1EE@JDBDACML@?$AAP?$AAy?$AAL?$AAi?$AAs?$AAt?$AA_?$AAG?$AAE?$AAT?$AA_?$AAI?$AAT?$AAE?$AAM?$AA?$CI?$AAc?$AAo?$AAn?$AAs?$AAt?$AAs?$AA?0?$AA?5?$AAj?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAo?$AAb@ ; `string'
PUBLIC	??_C@_05MKDOIIA@False?$AA@			; `string'
PUBLIC	??_C@_04HPMIDMKH@True?$AA@			; `string'
PUBLIC	??_C@_04OHJIHAFH@None?$AA@			; `string'
EXTRN	_Py_FalseStruct:BYTE
EXTRN	_Py_TrueStruct:BYTE
EXTRN	strcmp:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$load_global DD imagerel load_global
	DD	imagerel load_global+405
	DD	imagerel $unwind$load_global
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$load_global DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT ??_C@_1EE@JDBDACML@?$AAP?$AAy?$AAL?$AAi?$AAs?$AAt?$AA_?$AAG?$AAE?$AAT?$AA_?$AAI?$AAT?$AAE?$AAM?$AA?$CI?$AAc?$AAo?$AAn?$AAs?$AAt?$AAs?$AA?0?$AA?5?$AAj?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAo?$AAb@
CONST	SEGMENT
??_C@_1EE@JDBDACML@?$AAP?$AAy?$AAL?$AAi?$AAs?$AAt?$AA_?$AAG?$AAE?$AAT?$AA_?$AAI?$AAT?$AAE?$AAM?$AA?$CI?$AAc?$AAo?$AAn?$AAs?$AAt?$AAs?$AA?0?$AA?5?$AAj?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAo?$AAb@ DB 'P'
	DB	00H, 'y', 00H, 'L', 00H, 'i', 00H, 's', 00H, 't', 00H, '_', 00H
	DB	'G', 00H, 'E', 00H, 'T', 00H, '_', 00H, 'I', 00H, 'T', 00H, 'E'
	DB	00H, 'M', 00H, '(', 00H, 'c', 00H, 'o', 00H, 'n', 00H, 's', 00H
	DB	't', 00H, 's', 00H, ',', 00H, ' ', 00H, 'j', 00H, ')', 00H, ' '
	DB	00H, '=', 00H, '=', 00H, ' ', 00H, 'o', 00H, 'b', 00H, 'j', 00H
	DB	00H, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_05MKDOIIA@False?$AA@
CONST	SEGMENT
??_C@_05MKDOIIA@False?$AA@ DB 'False', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04HPMIDMKH@True?$AA@
CONST	SEGMENT
??_C@_04HPMIDMKH@True?$AA@ DB 'True', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04OHJIHAFH@None?$AA@
CONST	SEGMENT
??_C@_04OHJIHAFH@None?$AA@ DB 'None', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT load_global
_TEXT	SEGMENT
obj$ = 32
j$ = 40
codestr$ = 64
i$ = 72
name$ = 80
consts$ = 88
load_global PROC					; COMDAT

; 334  : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 335  :     Py_ssize_t j;
; 336  :     PyObject *obj;
; 337  :     if (name == NULL)

  00018	48 83 7c 24 50
	00		 cmp	 QWORD PTR name$[rsp], 0
  0001e	75 07		 jne	 SHORT $LN13@load_globa

; 338  :         return 0;

  00020	33 c0		 xor	 eax, eax
  00022	e9 69 01 00 00	 jmp	 $LN14@load_globa
$LN13@load_globa:

; 339  :     if (strcmp(name, "None") == 0)

  00027	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04OHJIHAFH@None?$AA@
  0002e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR name$[rsp]
  00033	e8 00 00 00 00	 call	 strcmp
  00038	85 c0		 test	 eax, eax
  0003a	75 0e		 jne	 SHORT $LN12@load_globa

; 340  :         obj = Py_None;

  0003c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00043	48 89 44 24 20	 mov	 QWORD PTR obj$[rsp], rax
  00048	eb 4d		 jmp	 SHORT $LN11@load_globa
$LN12@load_globa:

; 341  :     else if (strcmp(name, "True") == 0)

  0004a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_04HPMIDMKH@True?$AA@
  00051	48 8b 4c 24 50	 mov	 rcx, QWORD PTR name$[rsp]
  00056	e8 00 00 00 00	 call	 strcmp
  0005b	85 c0		 test	 eax, eax
  0005d	75 0e		 jne	 SHORT $LN10@load_globa

; 342  :         obj = Py_True;

  0005f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  00066	48 89 44 24 20	 mov	 QWORD PTR obj$[rsp], rax
  0006b	eb 2a		 jmp	 SHORT $LN9@load_globa
$LN10@load_globa:

; 343  :     else if (strcmp(name, "False") == 0)

  0006d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05MKDOIIA@False?$AA@
  00074	48 8b 4c 24 50	 mov	 rcx, QWORD PTR name$[rsp]
  00079	e8 00 00 00 00	 call	 strcmp
  0007e	85 c0		 test	 eax, eax
  00080	75 0e		 jne	 SHORT $LN8@load_globa

; 344  :         obj = Py_False;

  00082	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct
  00089	48 89 44 24 20	 mov	 QWORD PTR obj$[rsp], rax

; 345  :     else

  0008e	eb 07		 jmp	 SHORT $LN7@load_globa
$LN8@load_globa:

; 346  :         return 0;

  00090	33 c0		 xor	 eax, eax
  00092	e9 f9 00 00 00	 jmp	 $LN14@load_globa
$LN7@load_globa:
$LN9@load_globa:
$LN11@load_globa:

; 347  :     for (j = 0; j < PyList_GET_SIZE(consts); j++) {

  00097	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR j$[rsp], 0
  000a0	eb 0d		 jmp	 SHORT $LN6@load_globa
$LN5@load_globa:
  000a2	48 8b 44 24 28	 mov	 rax, QWORD PTR j$[rsp]
  000a7	48 ff c0	 inc	 rax
  000aa	48 89 44 24 28	 mov	 QWORD PTR j$[rsp], rax
$LN6@load_globa:
  000af	48 8b 44 24 58	 mov	 rax, QWORD PTR consts$[rsp]
  000b4	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000b8	48 39 44 24 28	 cmp	 QWORD PTR j$[rsp], rax
  000bd	7d 1d		 jge	 SHORT $LN4@load_globa

; 348  :         if (PyList_GET_ITEM(consts, j) == obj)

  000bf	48 8b 44 24 58	 mov	 rax, QWORD PTR consts$[rsp]
  000c4	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  000c8	48 8b 4c 24 28	 mov	 rcx, QWORD PTR j$[rsp]
  000cd	48 8b 54 24 20	 mov	 rdx, QWORD PTR obj$[rsp]
  000d2	48 39 14 c8	 cmp	 QWORD PTR [rax+rcx*8], rdx
  000d6	75 02		 jne	 SHORT $LN3@load_globa

; 349  :             break;

  000d8	eb 02		 jmp	 SHORT $LN4@load_globa
$LN3@load_globa:

; 350  :     }

  000da	eb c6		 jmp	 SHORT $LN5@load_globa
$LN4@load_globa:

; 351  :     if (j == PyList_GET_SIZE(consts)) {

  000dc	48 8b 44 24 58	 mov	 rax, QWORD PTR consts$[rsp]
  000e1	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000e5	48 39 44 24 28	 cmp	 QWORD PTR j$[rsp], rax
  000ea	75 1d		 jne	 SHORT $LN2@load_globa

; 352  :         if (PyList_Append(consts, obj) < 0)

  000ec	48 8b 54 24 20	 mov	 rdx, QWORD PTR obj$[rsp]
  000f1	48 8b 4c 24 58	 mov	 rcx, QWORD PTR consts$[rsp]
  000f6	e8 00 00 00 00	 call	 PyList_Append
  000fb	85 c0		 test	 eax, eax
  000fd	7d 0a		 jge	 SHORT $LN1@load_globa

; 353  :             return -1;

  000ff	b8 ff ff ff ff	 mov	 eax, -1
  00104	e9 87 00 00 00	 jmp	 $LN14@load_globa
$LN1@load_globa:
$LN2@load_globa:

; 354  :     }
; 355  :     assert(PyList_GET_ITEM(consts, j) == obj);

  00109	48 8b 44 24 58	 mov	 rax, QWORD PTR consts$[rsp]
  0010e	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00112	48 8b 4c 24 28	 mov	 rcx, QWORD PTR j$[rsp]
  00117	48 8b 54 24 20	 mov	 rdx, QWORD PTR obj$[rsp]
  0011c	48 39 14 c8	 cmp	 QWORD PTR [rax+rcx*8], rdx
  00120	74 1c		 je	 SHORT $LN16@load_globa
  00122	41 b8 63 01 00
	00		 mov	 r8d, 355		; 00000163H
  00128	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CK@KIMKCIEN@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAp?$AAe?$AAe?$AAp?$AAh?$AAo?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  0012f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EE@JDBDACML@?$AAP?$AAy?$AAL?$AAi?$AAs?$AAt?$AA_?$AAG?$AAE?$AAT?$AA_?$AAI?$AAT?$AAE?$AAM?$AA?$CI?$AAc?$AAo?$AAn?$AAs?$AAt?$AAs?$AA?0?$AA?5?$AAj?$AA?$CJ?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AAo?$AAb@
  00136	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0013c	33 c0		 xor	 eax, eax
$LN16@load_globa:

; 356  :     codestr[i] = LOAD_CONST;

  0013e	48 8b 44 24 48	 mov	 rax, QWORD PTR i$[rsp]
  00143	48 8b 4c 24 40	 mov	 rcx, QWORD PTR codestr$[rsp]
  00148	48 03 c8	 add	 rcx, rax
  0014b	48 8b c1	 mov	 rax, rcx
  0014e	c6 00 64	 mov	 BYTE PTR [rax], 100	; 00000064H

; 357  :     SETARG(codestr, i, j);

  00151	48 8b 44 24 28	 mov	 rax, QWORD PTR j$[rsp]
  00156	48 c1 f8 08	 sar	 rax, 8
  0015a	48 8b 4c 24 48	 mov	 rcx, QWORD PTR i$[rsp]
  0015f	48 8b 54 24 40	 mov	 rdx, QWORD PTR codestr$[rsp]
  00164	48 03 d1	 add	 rdx, rcx
  00167	48 8b ca	 mov	 rcx, rdx
  0016a	88 41 02	 mov	 BYTE PTR [rcx+2], al
  0016d	48 8b 44 24 28	 mov	 rax, QWORD PTR j$[rsp]
  00172	48 25 ff 00 00
	00		 and	 rax, 255		; 000000ffH
  00178	48 8b 4c 24 48	 mov	 rcx, QWORD PTR i$[rsp]
  0017d	48 8b 54 24 40	 mov	 rdx, QWORD PTR codestr$[rsp]
  00182	48 03 d1	 add	 rdx, rcx
  00185	48 8b ca	 mov	 rcx, rdx
  00188	88 41 01	 mov	 BYTE PTR [rcx+1], al

; 358  :     return 1;

  0018b	b8 01 00 00 00	 mov	 eax, 1
$LN14@load_globa:

; 359  : }

  00190	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00194	c3		 ret	 0
load_global ENDP
_TEXT	ENDS
END
