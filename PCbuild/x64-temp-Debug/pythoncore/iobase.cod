; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0P@HDBGIEBN@_io?4_RawIOBase?$AA@		; `string'
PUBLIC	??_C@_07JCDFOMC@readall?$AA@			; `string'
PUBLIC	??_C@_0M@MHIMOJEB@_io?4_IOBase?$AA@		; `string'
PUBLIC	??_C@_06IKJOPBFO@closed?$AA@			; `string'
PUBLIC	??_C@_08IBFKALI@__dict__?$AA@			; `string'
PUBLIC	??_C@_0L@MKGKOOMC@writelines?$AA@		; `string'
PUBLIC	??_C@_09OBGGLHMH@readlines?$AA@			; `string'
PUBLIC	??_C@_08KBCDPPMN@readline?$AA@			; `string'
PUBLIC	??_C@_08CMFIGCJD@__exit__?$AA@			; `string'
PUBLIC	??_C@_09OAJHKKGH@__enter__?$AA@			; `string'
PUBLIC	??_C@_06BMABDNNN@isatty?$AA@			; `string'
PUBLIC	??_C@_06FFBIALPD@fileno?$AA@			; `string'
PUBLIC	_PyIOBase_check_writable
PUBLIC	??_C@_0P@BMFAFMLA@_checkWritable?$AA@		; `string'
PUBLIC	_PyIOBase_check_readable
PUBLIC	??_C@_0P@BAIAGNDB@_checkReadable?$AA@		; `string'
PUBLIC	_PyIOBase_check_seekable
PUBLIC	??_C@_0P@COCOPLE@_checkSeekable?$AA@		; `string'
PUBLIC	_PyIOBase_check_closed
PUBLIC	??_C@_0N@JDLLLEEH@_checkClosed?$AA@		; `string'
PUBLIC	??_C@_08IBOGFJJC@writable?$AA@			; `string'
PUBLIC	??_C@_08INDGGIBD@readable?$AA@			; `string'
PUBLIC	??_C@_08JPFEOKJG@seekable?$AA@			; `string'
PUBLIC	??_C@_05LBOHBHFK@close?$AA@			; `string'
PUBLIC	??_C@_05GLCAEPFP@flush?$AA@			; `string'
PUBLIC	??_C@_08MABILMFG@truncate?$AA@			; `string'
PUBLIC	??_C@_04LBPCFPDD@tell?$AA@			; `string'
PUBLIC	??_C@_06BPBOMFNI@extend?$AA@			; `string'
PUBLIC	??_C@_04EOCFELL@peek?$AA@			; `string'
PUBLIC	??_C@_04POLDLDMI@read?$AA@			; `string'
PUBLIC	??_C@_04EDECCOGL@seek?$AA@			; `string'
PUBLIC	??_C@_0BA@NIHHNKCG@__IOBase_closed?$AA@		; `string'
PUBLIC	PyIOBase_Type
PUBLIC	PyRawIOBase_Type
EXTRN	PyType_GenericNew:PROC
EXTRN	PyObject_GenericGetDict:PROC
;	COMDAT ??_C@_0P@HDBGIEBN@_io?4_RawIOBase?$AA@
CONST	SEGMENT
??_C@_0P@HDBGIEBN@_io?4_RawIOBase?$AA@ DB '_io._RawIOBase', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07JCDFOMC@readall?$AA@
CONST	SEGMENT
??_C@_07JCDFOMC@readall?$AA@ DB 'readall', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MHIMOJEB@_io?4_IOBase?$AA@
CONST	SEGMENT
??_C@_0M@MHIMOJEB@_io?4_IOBase?$AA@ DB '_io._IOBase', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06IKJOPBFO@closed?$AA@
CONST	SEGMENT
??_C@_06IKJOPBFO@closed?$AA@ DB 'closed', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08IBFKALI@__dict__?$AA@
CONST	SEGMENT
??_C@_08IBFKALI@__dict__?$AA@ DB '__dict__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MKGKOOMC@writelines?$AA@
CONST	SEGMENT
??_C@_0L@MKGKOOMC@writelines?$AA@ DB 'writelines', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09OBGGLHMH@readlines?$AA@
CONST	SEGMENT
??_C@_09OBGGLHMH@readlines?$AA@ DB 'readlines', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08KBCDPPMN@readline?$AA@
CONST	SEGMENT
??_C@_08KBCDPPMN@readline?$AA@ DB 'readline', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08CMFIGCJD@__exit__?$AA@
CONST	SEGMENT
??_C@_08CMFIGCJD@__exit__?$AA@ DB '__exit__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09OAJHKKGH@__enter__?$AA@
CONST	SEGMENT
??_C@_09OAJHKKGH@__enter__?$AA@ DB '__enter__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06BMABDNNN@isatty?$AA@
CONST	SEGMENT
??_C@_06BMABDNNN@isatty?$AA@ DB 'isatty', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06FFBIALPD@fileno?$AA@
CONST	SEGMENT
??_C@_06FFBIALPD@fileno?$AA@ DB 'fileno', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BMFAFMLA@_checkWritable?$AA@
CONST	SEGMENT
??_C@_0P@BMFAFMLA@_checkWritable?$AA@ DB '_checkWritable', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BAIAGNDB@_checkReadable?$AA@
CONST	SEGMENT
??_C@_0P@BAIAGNDB@_checkReadable?$AA@ DB '_checkReadable', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@COCOPLE@_checkSeekable?$AA@
CONST	SEGMENT
??_C@_0P@COCOPLE@_checkSeekable?$AA@ DB '_checkSeekable', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@JDLLLEEH@_checkClosed?$AA@
CONST	SEGMENT
??_C@_0N@JDLLLEEH@_checkClosed?$AA@ DB '_checkClosed', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08IBOGFJJC@writable?$AA@
CONST	SEGMENT
??_C@_08IBOGFJJC@writable?$AA@ DB 'writable', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08INDGGIBD@readable?$AA@
CONST	SEGMENT
??_C@_08INDGGIBD@readable?$AA@ DB 'readable', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08JPFEOKJG@seekable?$AA@
CONST	SEGMENT
??_C@_08JPFEOKJG@seekable?$AA@ DB 'seekable', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05LBOHBHFK@close?$AA@
CONST	SEGMENT
??_C@_05LBOHBHFK@close?$AA@ DB 'close', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05GLCAEPFP@flush?$AA@
CONST	SEGMENT
??_C@_05GLCAEPFP@flush?$AA@ DB 'flush', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08MABILMFG@truncate?$AA@
CONST	SEGMENT
??_C@_08MABILMFG@truncate?$AA@ DB 'truncate', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04LBPCFPDD@tell?$AA@
CONST	SEGMENT
??_C@_04LBPCFPDD@tell?$AA@ DB 'tell', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BPBOMFNI@extend?$AA@
CONST	SEGMENT
??_C@_06BPBOMFNI@extend?$AA@ DB 'extend', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04EOCFELL@peek?$AA@
CONST	SEGMENT
??_C@_04EOCFELL@peek?$AA@ DB 'peek', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04POLDLDMI@read?$AA@
CONST	SEGMENT
??_C@_04POLDLDMI@read?$AA@ DB 'read', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04EDECCOGL@seek?$AA@
CONST	SEGMENT
??_C@_04EDECCOGL@seek?$AA@ DB 'seek', 00H		; `string'
CONST	ENDS
_TLS	SEGMENT
?PyId_read@?2??rawiobase_readall@@9@9 DQ 0000000000000000H ; `rawiobase_readall'::`3'::PyId_read
	DQ	FLAT:??_C@_04POLDLDMI@read?$AA@
	DQ	0000000000000000H
?PyId_readall@?3??rawiobase_read@@9@9 DQ 0000000000000000H ; `rawiobase_read'::`4'::PyId_readall
	DQ	FLAT:??_C@_07JCDFOMC@readall?$AA@
	DQ	0000000000000000H
?PyId_extend@?3??iobase_readlines@@9@9 DQ 0000000000000000H ; `iobase_readlines'::`4'::PyId_extend
	DQ	FLAT:??_C@_06BPBOMFNI@extend?$AA@
	DQ	0000000000000000H
?PyId_peek@?1??iobase_readline@@9@9 DQ 0000000000000000H ; `iobase_readline'::`2'::PyId_peek
	DQ	FLAT:??_C@_04EOCFELL@peek?$AA@
	DQ	0000000000000000H
?PyId_read@?1??iobase_readline@@9@9 DQ 0000000000000000H ; `iobase_readline'::`2'::PyId_read
	DQ	FLAT:??_C@_04POLDLDMI@read?$AA@
	DQ	0000000000000000H
?PyId___IOBase_closed@?1??iobase_close@@9@9 DQ 0000000000000000H ; `iobase_close'::`2'::PyId___IOBase_closed
	DQ	FLAT:??_C@_0BA@NIHHNKCG@__IOBase_closed?$AA@
	DQ	0000000000000000H
?PyId_seek@?1??iobase_tell@@9@9 DQ 0000000000000000H	; `iobase_tell'::`2'::PyId_seek
	DQ	FLAT:??_C@_04EDECCOGL@seek?$AA@
	DQ	0000000000000000H
PyId___IOBase_closed DQ 0000000000000000H
	DQ	FLAT:??_C@_0BA@NIHHNKCG@__IOBase_closed?$AA@
	DQ	0000000000000000H
_TLS	ENDS
;	COMDAT ??_C@_0BA@NIHHNKCG@__IOBase_closed?$AA@
CONST	SEGMENT
??_C@_0BA@NIHHNKCG@__IOBase_closed?$AA@ DB '__IOBase_closed', 00H ; `string'
CONST	ENDS
_DATA	SEGMENT
iobase_doc DB	'The abstract base class for all I/O classes, acting on s'
	DB	'treams of', 0aH, 'bytes. There is no public constructor.', 0aH
	DB	0aH, 'This class provides dummy implementations for many metho'
	DB	'ds that', 0aH, 'derived classes can override selectively; the'
	DB	' default implementations', 0aH, 'represent a file that cannot'
	DB	' be read, written or seeked.', 0aH, 0aH, 'Even though IOBase '
	DB	'does not declare read, readinto, or write because', 0aH, 'the'
	DB	'ir signatures will vary, implementations and clients should', 0aH
	DB	'consider those methods part of the interface. Also, implement'
	DB	'ations', 0aH, 'may raise UnsupportedOperation when operations'
	DB	' they do not support are', 0aH, 'called.', 0aH, 0aH, 'The bas'
	DB	'ic type used for binary data read from or written to a file i'
	DB	's', 0aH, 'bytes. bytearrays are accepted too, and in some cas'
	DB	'es (such as', 0aH, 'readinto) needed. Text I/O classes work w'
	DB	'ith str data.', 0aH, 0aH, 'Note that calling any method (even'
	DB	' inquiries) on a closed stream is', 0aH, 'undefined. Implemen'
	DB	'tations may raise IOError in this case.', 0aH, 0aH, 'IOBase ('
	DB	'and its subclasses) support the iterator protocol, meaning', 0aH
	DB	'that an IOBase object can be iterated over yielding the lines'
	DB	' in a', 0aH, 'stream.', 0aH, 0aH, 'IOBase also supports the :'
	DB	'keyword:`with` statement. In this example,', 0aH, 'fp is clos'
	DB	'ed after the suite of the with statement is complete:', 0aH, 0aH
	DB	'with open(''spam.txt'', ''r'') as fp:', 0aH, '    fp.write('''
	DB	'Spam and eggs!'')', 0aH, 00H
	ORG $+10
iobase_seek_doc DB 'Change stream position.', 0aH, 0aH, 'Change the strea'
	DB	'm position to the given byte offset. The offset is', 0aH, 'in'
	DB	'terpreted relative to the position indicated by whence.  Valu'
	DB	'es', 0aH, 'for whence are:', 0aH, 0aH, '* 0 -- start of strea'
	DB	'm (the default); offset should be zero or positive', 0aH, '* '
	DB	'1 -- current stream position; offset may be negative', 0aH, '*'
	DB	' 2 -- end of stream; offset is usually negative', 0aH, 0aH, 'R'
	DB	'eturn the new absolute position.', 00H
	ORG $+6
iobase_tell_doc DB 'Return current stream position.', 00H
	ORG $+8
iobase_truncate_doc DB 'Truncate file to size bytes.', 0aH, 0aH, 'File po'
	DB	'inter is left unchanged.  Size defaults to the current IO', 0aH
	DB	'position as reported by tell().  Returns the new size.', 00H
	ORG $+10
iobase_flush_doc DB 'Flush write buffers, if applicable.', 0aH, 0aH, 'Thi'
	DB	's is not implemented for read-only and non-blocking streams.', 0aH
	DB	00H
	ORG $+10
iobase_close_doc DB 'Flush and close the IO object.', 0aH, 0aH, 'This met'
	DB	'hod has no effect if the file is already closed.', 0aH, 00H
	ORG $+6
iobase_seekable_doc DB 'Return whether object supports random access.', 0aH
	DB	0aH, 'If False, seek(), tell() and truncate() will raise Unsup'
	DB	'portedOperation.', 0aH, 'This method may need to do a test se'
	DB	'ek().', 00H
	ORG $+14
iobase_readable_doc DB 'Return whether object was opened for reading.', 0aH
	DB	0aH, 'If False, read() will raise UnsupportedOperation.', 00H
	ORG $+15
iobase_writable_doc DB 'Return whether object was opened for writing.', 0aH
	DB	0aH, 'If False, write() will raise UnsupportedOperation.', 00H
	ORG $+14
iobase_fileno_doc DB 'Returns underlying file descriptor if one exists.', 0aH
	DB	0aH, 'An IOError is raised if the IO object does not use a fil'
	DB	'e descriptor.', 0aH, 00H
	ORG $+6
iobase_isatty_doc DB 'Return whether this is an ''interactive'' stream.', 0aH
	DB	0aH, 'Return False if it can''t be determined.', 0aH, 00H
	ORG $+6
iobase_readline_doc DB 'Read and return a line from the stream.', 0aH, 0aH
	DB	'If limit is specified, at most limit bytes will be read.', 0aH
	DB	0aH, 'The line terminator is always b''\n'' for binary files; '
	DB	'for text', 0aH, 'files, the newlines argument to open can be '
	DB	'used to select the line', 0aH, 'terminator(s) recognized.', 0aH
	DB	00H
	ORG $+15
iobase_readlines_doc DB 'Return a list of lines from the stream.', 0aH, 0aH
	DB	'hint can be specified to control the number of lines read: no'
	DB	' more', 0aH, 'lines will be read if the total size (in bytes/'
	DB	'characters) of all', 0aH, 'lines so far exceeds hint.', 00H
	ORG $+7
iobase_methods DQ FLAT:??_C@_04EDECCOGL@seek?$AA@
	DQ	FLAT:iobase_seek
	DD	01H
	ORG $+4
	DQ	FLAT:iobase_seek_doc
	DQ	FLAT:??_C@_04LBPCFPDD@tell?$AA@
	DQ	FLAT:iobase_tell
	DD	04H
	ORG $+4
	DQ	FLAT:iobase_tell_doc
	DQ	FLAT:??_C@_08MABILMFG@truncate?$AA@
	DQ	FLAT:iobase_truncate
	DD	01H
	ORG $+4
	DQ	FLAT:iobase_truncate_doc
	DQ	FLAT:??_C@_05GLCAEPFP@flush?$AA@
	DQ	FLAT:iobase_flush
	DD	04H
	ORG $+4
	DQ	FLAT:iobase_flush_doc
	DQ	FLAT:??_C@_05LBOHBHFK@close?$AA@
	DQ	FLAT:iobase_close
	DD	04H
	ORG $+4
	DQ	FLAT:iobase_close_doc
	DQ	FLAT:??_C@_08JPFEOKJG@seekable?$AA@
	DQ	FLAT:iobase_seekable
	DD	04H
	ORG $+4
	DQ	FLAT:iobase_seekable_doc
	DQ	FLAT:??_C@_08INDGGIBD@readable?$AA@
	DQ	FLAT:iobase_readable
	DD	04H
	ORG $+4
	DQ	FLAT:iobase_readable_doc
	DQ	FLAT:??_C@_08IBOGFJJC@writable?$AA@
	DQ	FLAT:iobase_writable
	DD	04H
	ORG $+4
	DQ	FLAT:iobase_writable_doc
	DQ	FLAT:??_C@_0N@JDLLLEEH@_checkClosed?$AA@
	DQ	FLAT:_PyIOBase_check_closed
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0P@COCOPLE@_checkSeekable?$AA@
	DQ	FLAT:_PyIOBase_check_seekable
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0P@BAIAGNDB@_checkReadable?$AA@
	DQ	FLAT:_PyIOBase_check_readable
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0P@BMFAFMLA@_checkWritable?$AA@
	DQ	FLAT:_PyIOBase_check_writable
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_06FFBIALPD@fileno?$AA@
	DQ	FLAT:iobase_fileno
	DD	04H
	ORG $+4
	DQ	FLAT:iobase_fileno_doc
	DQ	FLAT:??_C@_06BMABDNNN@isatty?$AA@
	DQ	FLAT:iobase_isatty
	DD	04H
	ORG $+4
	DQ	FLAT:iobase_isatty_doc
	DQ	FLAT:??_C@_09OAJHKKGH@__enter__?$AA@
	DQ	FLAT:iobase_enter
	DD	04H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_08CMFIGCJD@__exit__?$AA@
	DQ	FLAT:iobase_exit
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_08KBCDPPMN@readline?$AA@
	DQ	FLAT:iobase_readline
	DD	01H
	ORG $+4
	DQ	FLAT:iobase_readline_doc
	DQ	FLAT:??_C@_09OBGGLHMH@readlines?$AA@
	DQ	FLAT:iobase_readlines
	DD	01H
	ORG $+4
	DQ	FLAT:iobase_readlines_doc
	DQ	FLAT:??_C@_0L@MKGKOOMC@writelines?$AA@
	DQ	FLAT:iobase_writelines
	DD	01H
	ORG $+4
	ORG $+8
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
iobase_getset DQ FLAT:??_C@_08IBFKALI@__dict__?$AA@
	DQ	FLAT:PyObject_GenericGetDict
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_06IKJOPBFO@closed?$AA@
	DQ	FLAT:iobase_closed_get
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000000H
	ORG $+32
	ORG $+8
PyIOBase_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0M@MHIMOJEB@_io?4_IOBase?$AA@
	DQ	0000000000000070H
	DQ	0000000000000000H
	DQ	FLAT:iobase_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044400H
	ORG $+4
	DQ	FLAT:iobase_doc
	DQ	FLAT:iobase_traverse
	DQ	FLAT:iobase_clear
	DQ	0000000000000000H
	DQ	0000000000000068H
	DQ	FLAT:iobase_iter
	DQ	FLAT:iobase_iternext
	DQ	FLAT:iobase_methods
	DQ	0000000000000000H
	DQ	FLAT:iobase_getset
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000060H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyType_GenericNew
	ORG $+72
rawiobase_doc DB 'Base class for raw binary I/O.', 00H
	ORG $+1
rawiobase_readall_doc DB 'Read until EOF, using multiple read() call.', 00H
	ORG $+4
rawiobase_methods DQ FLAT:??_C@_04POLDLDMI@read?$AA@
	DQ	FLAT:rawiobase_read
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_07JCDFOMC@readall?$AA@
	DQ	FLAT:rawiobase_readall
	DD	04H
	ORG $+4
	DQ	FLAT:rawiobase_readall_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
PyRawIOBase_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0P@HDBGIEBN@_io?4_RawIOBase?$AA@
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	040400H
	ORG $+4
	DQ	FLAT:rawiobase_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:rawiobase_methods
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyIOBase_Type
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+72
_DATA	ENDS
;	COMDAT pdata
; File c:\src\pyparallel\modules\_io\iobase.c
pdata	SEGMENT
$pdata$iobase_seek DD imagerel iobase_seek
	DD	imagerel iobase_seek+31
	DD	imagerel $unwind$iobase_seek
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$iobase_seek DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT iobase_seek
_TEXT	SEGMENT
self$ = 48
args$ = 56
iobase_seek PROC					; COMDAT

; 91   : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 92   :     return iobase_unsupported("seek");

  0000e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04EDECCOGL@seek?$AA@
  00015	e8 00 00 00 00	 call	 iobase_unsupported

; 93   : }

  0001a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001e	c3		 ret	 0
iobase_seek ENDP
_TEXT	ENDS
EXTRN	PyErr_SetString:PROC
EXTRN	PyModule_GetState:PROC
EXTRN	PyState_FindModule:PROC
EXTRN	_PyIO_Module:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$iobase_unsupported DD imagerel iobase_unsupported
	DD	imagerel iobase_unsupported+50
	DD	imagerel $unwind$iobase_unsupported
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$iobase_unsupported DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT iobase_unsupported
_TEXT	SEGMENT
message$ = 48
iobase_unsupported PROC					; COMDAT

; 69   : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 70   :     PyErr_SetString(IO_STATE->unsupported_operation, message);

  00009	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_PyIO_Module
  00010	e8 00 00 00 00	 call	 PyState_FindModule
  00015	48 8b c8	 mov	 rcx, rax
  00018	e8 00 00 00 00	 call	 PyModule_GetState
  0001d	48 8b 54 24 30	 mov	 rdx, QWORD PTR message$[rsp]
  00022	48 8b 48 10	 mov	 rcx, QWORD PTR [rax+16]
  00026	e8 00 00 00 00	 call	 PyErr_SetString

; 71   :     return NULL;

  0002b	33 c0		 xor	 eax, eax

; 72   : }

  0002d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00031	c3		 ret	 0
iobase_unsupported ENDP
_TEXT	ENDS
PUBLIC	??_C@_02PDIHAGKM@ii?$AA@			; `string'
EXTRN	_PyObject_CallMethodId_SizeT:PROC
EXTRN	_tls_index:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$iobase_tell DD imagerel iobase_tell
	DD	imagerel iobase_tell+76
	DD	imagerel $unwind$iobase_tell
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$iobase_tell DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT ??_C@_02PDIHAGKM@ii?$AA@
CONST	SEGMENT
??_C@_02PDIHAGKM@ii?$AA@ DB 'ii', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT iobase_tell
_TEXT	SEGMENT
self$ = 64
args$ = 72
iobase_tell PROC					; COMDAT

; 100  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 101  :     _Py_IDENTIFIER(seek);
; 102  : 
; 103  :     return _PyObject_CallMethodId(self, &PyId_seek, "ii", 0, 1);

  0000e	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId_seek@?1??iobase_tell@@9@9
  00013	8b c0		 mov	 eax, eax
  00015	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0001b	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00024	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00028	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR [rsp+32], 1
  00030	45 33 c9	 xor	 r9d, r9d
  00033	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_02PDIHAGKM@ii?$AA@
  0003a	48 8b d0	 mov	 rdx, rax
  0003d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  00042	e8 00 00 00 00	 call	 _PyObject_CallMethodId_SizeT

; 104  : }

  00047	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004b	c3		 ret	 0
iobase_tell ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$iobase_truncate DD imagerel iobase_truncate
	DD	imagerel iobase_truncate+31
	DD	imagerel $unwind$iobase_truncate
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$iobase_truncate DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT iobase_truncate
_TEXT	SEGMENT
self$ = 48
args$ = 56
iobase_truncate PROC					; COMDAT

; 114  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 115  :     return iobase_unsupported("truncate");

  0000e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08MABILMFG@truncate?$AA@
  00015	e8 00 00 00 00	 call	 iobase_unsupported

; 116  : }

  0001a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001e	c3		 ret	 0
iobase_truncate ENDP
_TEXT	ENDS
PUBLIC	_Py_IncRef
PUBLIC	??_C@_0BO@NJELGIOK@I?1O?5operation?5on?5closed?5file?4?$AA@ ; `string'
EXTRN	_Py_NoneStruct:BYTE
EXTRN	PyExc_ValueError:QWORD
EXTRN	_PyObject_HasAttrId:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$iobase_flush DD imagerel iobase_flush
	DD	imagerel iobase_flush+104
	DD	imagerel $unwind$iobase_flush
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$iobase_flush DD 010e01H
	DD	0420eH
xdata	ENDS
;	COMDAT ??_C@_0BO@NJELGIOK@I?1O?5operation?5on?5closed?5file?4?$AA@
CONST	SEGMENT
??_C@_0BO@NJELGIOK@I?1O?5operation?5on?5closed?5file?4?$AA@ DB 'I/O opera'
	DB	'tion on closed file.', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT iobase_flush
_TEXT	SEGMENT
self$ = 48
args$ = 56
iobase_flush PROC					; COMDAT

; 127  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 128  :     /* XXX Should this return the number of bytes written??? */
; 129  :     if (IS_CLOSED(self)) {

  0000e	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId___IOBase_closed
  00013	8b c0		 mov	 eax, eax
  00015	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0001b	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00024	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00028	48 8b d0	 mov	 rdx, rax
  0002b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self$[rsp]
  00030	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  00035	85 c0		 test	 eax, eax
  00037	74 17		 je	 SHORT $LN1@iobase_flu

; 130  :         PyErr_SetString(PyExc_ValueError, "I/O operation on closed file.");

  00039	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BO@NJELGIOK@I?1O?5operation?5on?5closed?5file?4?$AA@
  00040	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00047	e8 00 00 00 00	 call	 PyErr_SetString

; 131  :         return NULL;

  0004c	33 c0		 xor	 eax, eax
  0004e	eb 13		 jmp	 SHORT $LN2@iobase_flu
$LN1@iobase_flu:

; 132  :     }
; 133  :     Py_RETURN_NONE;

  00050	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00057	e8 00 00 00 00	 call	 _Py_IncRef
  0005c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
$LN2@iobase_flu:

; 134  : }

  00063	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00067	c3		 ret	 0
iobase_flush ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
EXTRN	_Py_RefTotal:QWORD
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN7
	DD	imagerel $LN7+132
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 6d		 jne	 SHORT $LN2@Py_IncRef
  00012	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0001a	4c 8b 4c 24 40	 mov	 r9, QWORD PTR op$[rsp]
  0001f	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_Guard
  00038	85 c0		 test	 eax, eax
  0003a	75 12		 jne	 SHORT $LN1@Py_IncRef
  0003c	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  00041	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00045	48 83 e0 20	 and	 rax, 32			; 00000020H
  00049	48 85 c0	 test	 rax, rax
  0004c	74 31		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;

  0004e	e8 00 00 00 00	 call	 _Py_PXCTX
  00053	85 c0		 test	 eax, eax
  00055	74 02		 je	 SHORT $LN5@Py_IncRef
  00057	eb 11		 jmp	 SHORT $LN6@Py_IncRef
$LN5@Py_IncRef:
  00059	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00060	48 ff c0	 inc	 rax
  00063	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN6@Py_IncRef:

; 907  :         (((PyObject*)(op))->ob_refcnt++);

  0006a	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  0006f	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00073	48 ff c0	 inc	 rax
  00076	48 8b 4c 24 40	 mov	 rcx, QWORD PTR op$[rsp]
  0007b	48 89 41 50	 mov	 QWORD PTR [rcx+80], rax
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  0007f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00083	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
EXTRN	PyBool_FromLong:PROC
;	COMDAT pdata
; File c:\src\pyparallel\modules\_io\iobase.c
pdata	SEGMENT
$pdata$iobase_closed_get DD imagerel iobase_closed_get
	DD	imagerel iobase_closed_get+65
	DD	imagerel $unwind$iobase_closed_get
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$iobase_closed_get DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT iobase_closed_get
_TEXT	SEGMENT
self$ = 48
context$ = 56
iobase_closed_get PROC					; COMDAT

; 158  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 159  :     return PyBool_FromLong(IS_CLOSED(self));

  0000e	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:PyId___IOBase_closed
  00013	8b c0		 mov	 eax, eax
  00015	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0001b	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00024	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00028	48 8b d0	 mov	 rdx, rax
  0002b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self$[rsp]
  00030	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  00035	8b c8		 mov	 ecx, eax
  00037	e8 00 00 00 00	 call	 PyBool_FromLong

; 160  : }

  0003c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00040	c3		 ret	 0
iobase_closed_get ENDP
_TEXT	ENDS
EXTRN	_Py_TrueStruct:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyIOBase_check_closed DD imagerel $LN6
	DD	imagerel $LN6+100
	DD	imagerel $unwind$_PyIOBase_check_closed
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyIOBase_check_closed DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _PyIOBase_check_closed
_TEXT	SEGMENT
self$ = 48
args$ = 56
_PyIOBase_check_closed PROC				; COMDAT

; 164  : {

$LN6:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 165  :     if (iobase_closed(self)) {

  0000e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self$[rsp]
  00013	e8 00 00 00 00	 call	 iobase_closed
  00018	85 c0		 test	 eax, eax
  0001a	74 17		 je	 SHORT $LN3@PyIOBase_c

; 166  :         PyErr_SetString(PyExc_ValueError, "I/O operation on closed file.");

  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BO@NJELGIOK@I?1O?5operation?5on?5closed?5file?4?$AA@
  00023	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0002a	e8 00 00 00 00	 call	 PyErr_SetString

; 167  :         return NULL;

  0002f	33 c0		 xor	 eax, eax
  00031	eb 2c		 jmp	 SHORT $LN4@PyIOBase_c
$LN3@PyIOBase_c:

; 168  :     }
; 169  :     if (args == Py_True)

  00033	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  0003a	48 39 44 24 38	 cmp	 QWORD PTR args$[rsp], rax
  0003f	75 0b		 jne	 SHORT $LN2@PyIOBase_c

; 170  :         return Py_None;

  00041	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00048	eb 15		 jmp	 SHORT $LN4@PyIOBase_c

; 171  :     else

  0004a	eb 13		 jmp	 SHORT $LN1@PyIOBase_c
$LN2@PyIOBase_c:

; 172  :         Py_RETURN_NONE;

  0004c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00053	e8 00 00 00 00	 call	 _Py_IncRef
  00058	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
$LN1@PyIOBase_c:
$LN4@PyIOBase_c:

; 173  : }

  0005f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00063	c3		 ret	 0
_PyIOBase_check_closed ENDP
_TEXT	ENDS
PUBLIC	_Py_DecRef
EXTRN	PyObject_IsTrue:PROC
EXTRN	PyObject_GetAttr:PROC
EXTRN	_PyIO_str_closed:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$iobase_closed DD imagerel iobase_closed
	DD	imagerel iobase_closed+76
	DD	imagerel $unwind$iobase_closed
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$iobase_closed DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT iobase_closed
_TEXT	SEGMENT
res$ = 32
closed$ = 40
self$ = 64
iobase_closed PROC					; COMDAT

; 143  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 144  :     PyObject *res;
; 145  :     int closed;
; 146  :     /* This gets the derived attribute, which is *not* __IOBase_closed
; 147  :        in most cases! */
; 148  :     res = PyObject_GetAttr(self, _PyIO_str_closed);

  00009	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR _PyIO_str_closed
  00010	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  00015	e8 00 00 00 00	 call	 PyObject_GetAttr
  0001a	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax

; 149  :     if (res == NULL)

  0001f	48 83 7c 24 20
	00		 cmp	 QWORD PTR res$[rsp], 0
  00025	75 04		 jne	 SHORT $LN1@iobase_clo

; 150  :         return 0;

  00027	33 c0		 xor	 eax, eax
  00029	eb 1c		 jmp	 SHORT $LN2@iobase_clo
$LN1@iobase_clo:

; 151  :     closed = PyObject_IsTrue(res);

  0002b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR res$[rsp]
  00030	e8 00 00 00 00	 call	 PyObject_IsTrue
  00035	89 44 24 28	 mov	 DWORD PTR closed$[rsp], eax

; 152  :     Py_DECREF(res);

  00039	48 8b 4c 24 20	 mov	 rcx, QWORD PTR res$[rsp]
  0003e	e8 00 00 00 00	 call	 _Py_DecRef

; 153  :     return closed;

  00043	8b 44 24 28	 mov	 eax, DWORD PTR closed$[rsp]
$LN2@iobase_clo:

; 154  : }

  00047	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004b	c3		 ret	 0
iobase_closed ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
EXTRN	_Py_Dealloc:PROC
EXTRN	_Py_NegativeRefcount:PROC
EXTRN	Px_DecRef:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN13
	DD	imagerel $LN13+257
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
tv81 = 48
op$ = 80
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN13:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	0f 85 e6 00 00
	00		 jne	 $LN8@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00016	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0001b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0001f	48 83 e0 20	 and	 rax, 32			; 00000020H
  00023	48 85 c0	 test	 rax, rax
  00026	75 14		 jne	 SHORT $LN6@Py_DecRef
  00028	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0002d	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00031	48 25 80 00 00
	00		 and	 rax, 128		; 00000080H
  00037	48 85 c0	 test	 rax, rax
  0003a	74 0f		 je	 SHORT $LN7@Py_DecRef
$LN6@Py_DecRef:

; 926  :             Px_DECREF(op);

  0003c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  00041	e8 00 00 00 00	 call	 Px_DecRef
  00046	e9 b1 00 00 00	 jmp	 $LN5@Py_DecRef
$LN7@Py_DecRef:

; 927  :         else if (!Px_ISPX(op)) {

  0004b	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00050	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00054	48 83 e0 02	 and	 rax, 2
  00058	48 85 c0	 test	 rax, rax
  0005b	0f 85 9b 00 00
	00		 jne	 $LN4@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;

  00061	e8 00 00 00 00	 call	 _Py_PXCTX
  00066	85 c0		 test	 eax, eax
  00068	74 02		 je	 SHORT $LN11@Py_DecRef
  0006a	eb 11		 jmp	 SHORT $LN12@Py_DecRef
$LN11@Py_DecRef:
  0006c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00073	48 ff c8	 dec	 rax
  00076	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN12@Py_DecRef:

; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  0007d	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00082	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00086	48 ff c8	 dec	 rax
  00089	48 89 44 24 30	 mov	 QWORD PTR tv81[rsp], rax
  0008e	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00093	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv81[rsp]
  00098	48 89 48 50	 mov	 QWORD PTR [rax+80], rcx
  0009c	48 83 7c 24 30
	00		 cmp	 QWORD PTR tv81[rsp], 0
  000a2	74 4e		 je	 SHORT $LN3@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);

  000a4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000ac	4c 8b 4c 24 50	 mov	 r9, QWORD PTR op$[rsp]
  000b1	41 b8 a2 03 00
	00		 mov	 r8d, 930		; 000003a2H
  000b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000c5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ca	85 c0		 test	 eax, eax
  000cc	75 22		 jne	 SHORT $LN2@Py_DecRef
  000ce	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  000d3	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000d8	7d 16		 jge	 SHORT $LN2@Py_DecRef
  000da	4c 8b 44 24 50	 mov	 r8, QWORD PTR op$[rsp]
  000df	ba a2 03 00 00	 mov	 edx, 930		; 000003a2H
  000e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000eb	e8 00 00 00 00	 call	 _Py_NegativeRefcount
$LN2@Py_DecRef:

; 931  :             } else

  000f0	eb 0a		 jmp	 SHORT $LN1@Py_DecRef
$LN3@Py_DecRef:

; 932  :                 _Py_Dealloc((PyObject *)(op));

  000f2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  000f7	e8 00 00 00 00	 call	 _Py_Dealloc
$LN1@Py_DecRef:
$LN4@Py_DecRef:
$LN5@Py_DecRef:
$LN8@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  000fc	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00100	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
EXTRN	_PyObject_SetAttrId:PROC
EXTRN	PyObject_CallMethodObjArgs:PROC
EXTRN	_PyIO_str_flush:QWORD
;	COMDAT pdata
; File c:\src\pyparallel\modules\_io\iobase.c
pdata	SEGMENT
$pdata$iobase_close DD imagerel iobase_close
	DD	imagerel iobase_close+209
	DD	imagerel $unwind$iobase_close
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$iobase_close DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT iobase_close
_TEXT	SEGMENT
res$ = 32
self$ = 64
args$ = 72
iobase_close PROC					; COMDAT

; 181  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 182  :     PyObject *res;
; 183  :     _Py_IDENTIFIER(__IOBase_closed);
; 184  : 
; 185  :     if (IS_CLOSED(self))

  0000e	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId___IOBase_closed@?1??iobase_close@@9@9
  00013	8b c0		 mov	 eax, eax
  00015	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0001b	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00024	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00028	48 8b d0	 mov	 rdx, rax
  0002b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  00030	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  00035	85 c0		 test	 eax, eax
  00037	74 15		 je	 SHORT $LN6@iobase_clo@2

; 186  :         Py_RETURN_NONE;

  00039	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00040	e8 00 00 00 00	 call	 _Py_IncRef
  00045	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0004c	eb 7e		 jmp	 SHORT $LN7@iobase_clo@2
$LN6@iobase_clo@2:

; 187  : 
; 188  :     res = PyObject_CallMethodObjArgs(self, _PyIO_str_flush, NULL);

  0004e	45 33 c0	 xor	 r8d, r8d
  00051	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR _PyIO_str_flush
  00058	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  0005d	e8 00 00 00 00	 call	 PyObject_CallMethodObjArgs
  00062	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax

; 189  :     _PyObject_SetAttrId(self, &PyId___IOBase_closed, Py_True);

  00067	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId___IOBase_closed@?1??iobase_close@@9@9
  0006c	8b c0		 mov	 eax, eax
  0006e	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00074	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0007d	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00081	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:_Py_TrueStruct
  00088	48 8b d0	 mov	 rdx, rax
  0008b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  00090	e8 00 00 00 00	 call	 _PyObject_SetAttrId

; 190  :     if (res == NULL) {

  00095	48 83 7c 24 20
	00		 cmp	 QWORD PTR res$[rsp], 0
  0009b	75 04		 jne	 SHORT $LN5@iobase_clo@2

; 191  :         return NULL;

  0009d	33 c0		 xor	 eax, eax
  0009f	eb 2b		 jmp	 SHORT $LN7@iobase_clo@2
$LN5@iobase_clo@2:
$LN4@iobase_clo@2:

; 192  :     }
; 193  :     Py_XDECREF(res);

  000a1	48 83 7c 24 20
	00		 cmp	 QWORD PTR res$[rsp], 0
  000a7	74 0a		 je	 SHORT $LN1@iobase_clo@2
  000a9	48 8b 4c 24 20	 mov	 rcx, QWORD PTR res$[rsp]
  000ae	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@iobase_clo@2:
  000b3	33 c0		 xor	 eax, eax
  000b5	85 c0		 test	 eax, eax
  000b7	75 e8		 jne	 SHORT $LN4@iobase_clo@2

; 194  :     Py_RETURN_NONE;

  000b9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  000c0	e8 00 00 00 00	 call	 _Py_IncRef
  000c5	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
$LN7@iobase_clo@2:

; 195  : }

  000cc	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000d0	c3		 ret	 0
iobase_close ENDP
_TEXT	ENDS
PUBLIC	_PyIOBase_finalize
EXTRN	_Py_NewReference:PROC
EXTRN	PyErr_Restore:PROC
EXTRN	_PyIO_str_close:QWORD
EXTRN	PyErr_Clear:PROC
EXTRN	PyErr_Fetch:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyIOBase_finalize DD imagerel $LN16
	DD	imagerel $LN16+368
	DD	imagerel $unwind$_PyIOBase_finalize
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyIOBase_finalize DD 010901H
	DD	0c209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _PyIOBase_finalize
_TEXT	SEGMENT
v$ = 32
res$ = 40
is_zombie$ = 48
closed$ = 52
tb$ = 56
tp$ = 64
refcnt$20574 = 72
tv66 = 80
tv93 = 88
self$ = 112
_PyIOBase_finalize PROC					; COMDAT

; 201  : {

$LN16:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 202  :     PyObject *res;
; 203  :     PyObject *tp, *v, *tb;
; 204  :     int closed = 1;

  00009	c7 44 24 34 01
	00 00 00	 mov	 DWORD PTR closed$[rsp], 1

; 205  :     int is_zombie;
; 206  : 
; 207  :     /* If _PyIOBase_finalize() is called from a destructor, we need to
; 208  :        resurrect the object as calling close() can invoke arbitrary code. */
; 209  :     is_zombie = (Py_REFCNT(self) == 0);

  00011	48 8b 44 24 70	 mov	 rax, QWORD PTR self$[rsp]
  00016	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  0001b	75 0a		 jne	 SHORT $LN12@PyIOBase_f
  0001d	c7 44 24 50 01
	00 00 00	 mov	 DWORD PTR tv66[rsp], 1
  00025	eb 08		 jmp	 SHORT $LN13@PyIOBase_f
$LN12@PyIOBase_f:
  00027	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR tv66[rsp], 0
$LN13@PyIOBase_f:
  0002f	8b 44 24 50	 mov	 eax, DWORD PTR tv66[rsp]
  00033	89 44 24 30	 mov	 DWORD PTR is_zombie$[rsp], eax

; 210  :     if (is_zombie) {

  00037	83 7c 24 30 00	 cmp	 DWORD PTR is_zombie$[rsp], 0
  0003c	74 0a		 je	 SHORT $LN9@PyIOBase_f

; 211  :         /* ++Py_REFCNT(self); */
; 212  :         Py_INCREF(self);

  0003e	48 8b 4c 24 70	 mov	 rcx, QWORD PTR self$[rsp]
  00043	e8 00 00 00 00	 call	 _Py_IncRef
$LN9@PyIOBase_f:

; 213  :     }
; 214  :     PyErr_Fetch(&tp, &v, &tb);

  00048	4c 8d 44 24 38	 lea	 r8, QWORD PTR tb$[rsp]
  0004d	48 8d 54 24 20	 lea	 rdx, QWORD PTR v$[rsp]
  00052	48 8d 4c 24 40	 lea	 rcx, QWORD PTR tp$[rsp]
  00057	e8 00 00 00 00	 call	 PyErr_Fetch

; 215  :     /* If `closed` doesn't exist or can't be evaluated as bool, then the
; 216  :        object is probably in an unusable state, so ignore. */
; 217  :     res = PyObject_GetAttr(self, _PyIO_str_closed);

  0005c	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR _PyIO_str_closed
  00063	48 8b 4c 24 70	 mov	 rcx, QWORD PTR self$[rsp]
  00068	e8 00 00 00 00	 call	 PyObject_GetAttr
  0006d	48 89 44 24 28	 mov	 QWORD PTR res$[rsp], rax

; 218  :     if (res == NULL)

  00072	48 83 7c 24 28
	00		 cmp	 QWORD PTR res$[rsp], 0
  00078	75 07		 jne	 SHORT $LN8@PyIOBase_f

; 219  :         PyErr_Clear();

  0007a	e8 00 00 00 00	 call	 PyErr_Clear

; 220  :     else {

  0007f	eb 24		 jmp	 SHORT $LN7@PyIOBase_f
$LN8@PyIOBase_f:

; 221  :         closed = PyObject_IsTrue(res);

  00081	48 8b 4c 24 28	 mov	 rcx, QWORD PTR res$[rsp]
  00086	e8 00 00 00 00	 call	 PyObject_IsTrue
  0008b	89 44 24 34	 mov	 DWORD PTR closed$[rsp], eax

; 222  :         Py_DECREF(res);

  0008f	48 8b 4c 24 28	 mov	 rcx, QWORD PTR res$[rsp]
  00094	e8 00 00 00 00	 call	 _Py_DecRef

; 223  :         if (closed == -1)

  00099	83 7c 24 34 ff	 cmp	 DWORD PTR closed$[rsp], -1
  0009e	75 05		 jne	 SHORT $LN6@PyIOBase_f

; 224  :             PyErr_Clear();

  000a0	e8 00 00 00 00	 call	 PyErr_Clear
$LN6@PyIOBase_f:
$LN7@PyIOBase_f:

; 225  :     }
; 226  :     if (closed == 0) {

  000a5	83 7c 24 34 00	 cmp	 DWORD PTR closed$[rsp], 0
  000aa	75 32		 jne	 SHORT $LN5@PyIOBase_f

; 227  :         res = PyObject_CallMethodObjArgs((PyObject *) self, _PyIO_str_close,
; 228  :                                           NULL);

  000ac	45 33 c0	 xor	 r8d, r8d
  000af	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR _PyIO_str_close
  000b6	48 8b 4c 24 70	 mov	 rcx, QWORD PTR self$[rsp]
  000bb	e8 00 00 00 00	 call	 PyObject_CallMethodObjArgs
  000c0	48 89 44 24 28	 mov	 QWORD PTR res$[rsp], rax

; 229  :         /* Silencing I/O errors is bad, but printing spurious tracebacks is
; 230  :            equally as bad, and potentially more frequent (because of
; 231  :            shutdown issues). */
; 232  :         if (res == NULL)

  000c5	48 83 7c 24 28
	00		 cmp	 QWORD PTR res$[rsp], 0
  000cb	75 07		 jne	 SHORT $LN4@PyIOBase_f

; 233  :             PyErr_Clear();

  000cd	e8 00 00 00 00	 call	 PyErr_Clear

; 234  :         else

  000d2	eb 0a		 jmp	 SHORT $LN3@PyIOBase_f
$LN4@PyIOBase_f:

; 235  :             Py_DECREF(res);

  000d4	48 8b 4c 24 28	 mov	 rcx, QWORD PTR res$[rsp]
  000d9	e8 00 00 00 00	 call	 _Py_DecRef
$LN3@PyIOBase_f:
$LN5@PyIOBase_f:

; 236  :     }
; 237  :     PyErr_Restore(tp, v, tb);

  000de	4c 8b 44 24 38	 mov	 r8, QWORD PTR tb$[rsp]
  000e3	48 8b 54 24 20	 mov	 rdx, QWORD PTR v$[rsp]
  000e8	48 8b 4c 24 40	 mov	 rcx, QWORD PTR tp$[rsp]
  000ed	e8 00 00 00 00	 call	 PyErr_Restore

; 238  :     if (is_zombie) {

  000f2	83 7c 24 30 00	 cmp	 DWORD PTR is_zombie$[rsp], 0
  000f7	74 70		 je	 SHORT $LN2@PyIOBase_f

; 239  :         if (--Py_REFCNT(self) != 0) {

  000f9	48 8b 44 24 70	 mov	 rax, QWORD PTR self$[rsp]
  000fe	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00102	48 ff c8	 dec	 rax
  00105	48 89 44 24 58	 mov	 QWORD PTR tv93[rsp], rax
  0010a	48 8b 44 24 70	 mov	 rax, QWORD PTR self$[rsp]
  0010f	48 8b 4c 24 58	 mov	 rcx, QWORD PTR tv93[rsp]
  00114	48 89 48 50	 mov	 QWORD PTR [rax+80], rcx
  00118	48 83 7c 24 58
	00		 cmp	 QWORD PTR tv93[rsp], 0
  0011e	74 49		 je	 SHORT $LN1@PyIOBase_f

; 240  :             /* The object lives again. The following code is taken from
; 241  :                slot_tp_del in typeobject.c. */
; 242  :             Py_ssize_t refcnt = Py_REFCNT(self);

  00120	48 8b 44 24 70	 mov	 rax, QWORD PTR self$[rsp]
  00125	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00129	48 89 44 24 48	 mov	 QWORD PTR refcnt$20574[rsp], rax

; 243  :             _Py_NewReference(self);

  0012e	48 8b 4c 24 70	 mov	 rcx, QWORD PTR self$[rsp]
  00133	e8 00 00 00 00	 call	 _Py_NewReference

; 244  :             Py_REFCNT(self) = refcnt;

  00138	48 8b 44 24 70	 mov	 rax, QWORD PTR self$[rsp]
  0013d	48 8b 4c 24 48	 mov	 rcx, QWORD PTR refcnt$20574[rsp]
  00142	48 89 48 50	 mov	 QWORD PTR [rax+80], rcx

; 245  :             /* If Py_REF_DEBUG, _Py_NewReference bumped _Py_RefTotal, so
; 246  :              * we need to undo that. */
; 247  :             _Py_DEC_REFTOTAL;

  00146	e8 00 00 00 00	 call	 _Py_PXCTX
  0014b	85 c0		 test	 eax, eax
  0014d	74 02		 je	 SHORT $LN14@PyIOBase_f
  0014f	eb 11		 jmp	 SHORT $LN15@PyIOBase_f
$LN14@PyIOBase_f:
  00151	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00158	48 ff c8	 dec	 rax
  0015b	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN15@PyIOBase_f:

; 248  :             /* If Py_TRACE_REFS, _Py_NewReference re-added self to the object
; 249  :              * chain, so no more to do there.
; 250  :              * If COUNT_ALLOCS, the original decref bumped tp_frees, and
; 251  :              * _Py_NewReference bumped tp_allocs:  both of those need to be
; 252  :              * undone.
; 253  :              */
; 254  : #ifdef COUNT_ALLOCS
; 255  :             --Py_TYPE(self)->tp_frees;
; 256  :             --Py_TYPE(self)->tp_allocs;
; 257  : #endif
; 258  :             return -1;

  00162	b8 ff ff ff ff	 mov	 eax, -1
  00167	eb 02		 jmp	 SHORT $LN10@PyIOBase_f
$LN1@PyIOBase_f:
$LN2@PyIOBase_f:

; 259  :         }
; 260  :     }
; 261  :     return 0;

  00169	33 c0		 xor	 eax, eax
$LN10@PyIOBase_f:

; 262  : }

  0016b	48 83 c4 68	 add	 rsp, 104		; 00000068H
  0016f	c3		 ret	 0
_PyIOBase_finalize ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BA@IAPDJBB@iobase_traverse?$AA@		; `string'
PUBLIC	??_C@_0BI@KFPEJKND@?4?4?2Modules?2_io?2iobase?4c?$AA@ ; `string'
EXTRN	_PyParallel_ContextGuardFailure:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$iobase_traverse DD imagerel iobase_traverse
	DD	imagerel iobase_traverse+116
	DD	imagerel $unwind$iobase_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$iobase_traverse DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT ??_C@_0BA@IAPDJBB@iobase_traverse?$AA@
CONST	SEGMENT
??_C@_0BA@IAPDJBB@iobase_traverse?$AA@ DB 'iobase_traverse', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@KFPEJKND@?4?4?2Modules?2_io?2iobase?4c?$AA@
CONST	SEGMENT
??_C@_0BI@KFPEJKND@?4?4?2Modules?2_io?2iobase?4c?$AA@ DB '..\Modules\_io\'
	DB	'iobase.c', 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT iobase_traverse
_TEXT	SEGMENT
vret$20593 = 32
self$ = 64
visit$ = 72
arg$ = 80
iobase_traverse PROC					; COMDAT

; 266  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN6@iobase_tra:

; 267  :     Py_VISIT(self->dict);

  00013	e8 00 00 00 00	 call	 _Py_PXCTX
  00018	85 c0		 test	 eax, eax
  0001a	74 1c		 je	 SHORT $LN3@iobase_tra
  0001c	45 33 c9	 xor	 r9d, r9d
  0001f	41 b8 0b 01 00
	00		 mov	 r8d, 267		; 0000010bH
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@KFPEJKND@?4?4?2Modules?2_io?2iobase?4c?$AA@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@IAPDJBB@iobase_traverse?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@iobase_tra:
  00038	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0003d	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00042	74 23		 je	 SHORT $LN2@iobase_tra
  00044	48 8b 54 24 50	 mov	 rdx, QWORD PTR arg$[rsp]
  00049	48 8b 44 24 40	 mov	 rax, QWORD PTR self$[rsp]
  0004e	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00052	ff 54 24 48	 call	 QWORD PTR visit$[rsp]
  00056	89 44 24 20	 mov	 DWORD PTR vret$20593[rsp], eax
  0005a	83 7c 24 20 00	 cmp	 DWORD PTR vret$20593[rsp], 0
  0005f	74 06		 je	 SHORT $LN1@iobase_tra
  00061	8b 44 24 20	 mov	 eax, DWORD PTR vret$20593[rsp]
  00065	eb 08		 jmp	 SHORT $LN7@iobase_tra
$LN1@iobase_tra:
$LN2@iobase_tra:
  00067	33 c0		 xor	 eax, eax
  00069	85 c0		 test	 eax, eax
  0006b	75 a6		 jne	 SHORT $LN6@iobase_tra

; 268  :     return 0;

  0006d	33 c0		 xor	 eax, eax
$LN7@iobase_tra:

; 269  : }

  0006f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00073	c3		 ret	 0
iobase_traverse ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@BLEIEIHO@iobase_clear?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$iobase_clear DD imagerel iobase_clear
	DD	imagerel iobase_clear+138
	DD	imagerel $unwind$iobase_clear
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$iobase_clear DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0N@BLEIEIHO@iobase_clear?$AA@
CONST	SEGMENT
??_C@_0N@BLEIEIHO@iobase_clear?$AA@ DB 'iobase_clear', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT iobase_clear
_TEXT	SEGMENT
_py_tmp$20607 = 48
self$ = 80
iobase_clear PROC					; COMDAT

; 273  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 274  :     if (_PyIOBase_finalize((PyObject *) self) < 0)

  00009	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  0000e	e8 00 00 00 00	 call	 _PyIOBase_finalize
  00013	85 c0		 test	 eax, eax
  00015	7d 07		 jge	 SHORT $LN5@iobase_cle

; 275  :         return -1;

  00017	b8 ff ff ff ff	 mov	 eax, -1
  0001c	eb 67		 jmp	 SHORT $LN6@iobase_cle
$LN5@iobase_cle:
$LN4@iobase_cle:

; 276  :     Py_CLEAR(self->dict);

  0001e	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00023	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00028	74 53		 je	 SHORT $LN1@iobase_cle
  0002a	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00032	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00037	4c 8b 48 60	 mov	 r9, QWORD PTR [rax+96]
  0003b	41 b8 14 01 00
	00		 mov	 r8d, 276		; 00000114H
  00041	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@KFPEJKND@?4?4?2Modules?2_io?2iobase?4c?$AA@
  00048	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@BLEIEIHO@iobase_clear?$AA@
  0004f	e8 00 00 00 00	 call	 _PyParallel_Guard
  00054	85 c0		 test	 eax, eax
  00056	75 25		 jne	 SHORT $LN1@iobase_cle
  00058	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  0005d	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00061	48 89 44 24 30	 mov	 QWORD PTR _py_tmp$20607[rsp], rax
  00066	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  0006b	48 c7 40 60 00
	00 00 00	 mov	 QWORD PTR [rax+96], 0
  00073	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _py_tmp$20607[rsp]
  00078	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@iobase_cle:
  0007d	33 c0		 xor	 eax, eax
  0007f	85 c0		 test	 eax, eax
  00081	75 9b		 jne	 SHORT $LN4@iobase_cle

; 277  :     return 0;

  00083	33 c0		 xor	 eax, eax
$LN6@iobase_cle:

; 278  : }

  00085	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00089	c3		 ret	 0
iobase_clear ENDP
_TEXT	ENDS
PUBLIC	??_C@_1EM@HFMJMDDM@?$AAg?$AA?9?$AA?$DO?$AAg?$AAc?$AA?4?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AAG?$AAC?$AA_?$AAR?$AAE?$AAF?$AAS?$AA_?$AAU?$AAN?$AAT?$AAR@ ; `string'
PUBLIC	??_C@_1DA@FEGNDKOF@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAi?$AAo?$AAb?$AAa?$AAs?$AAe?$AA?4?$AAc?$AA?$AA@ ; `string'
PUBLIC	??_C@_0P@IIHKNICK@iobase_dealloc?$AA@		; `string'
EXTRN	PyObject_ClearWeakRefs:PROC
EXTRN	__imp__wassert:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$iobase_dealloc DD imagerel iobase_dealloc
	DD	imagerel iobase_dealloc+453
	DD	imagerel $unwind$iobase_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$iobase_dealloc DD 010901H
	DD	0a209H
xdata	ENDS
;	COMDAT ??_C@_1EM@HFMJMDDM@?$AAg?$AA?9?$AA?$DO?$AAg?$AAc?$AA?4?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AAG?$AAC?$AA_?$AAR?$AAE?$AAF?$AAS?$AA_?$AAU?$AAN?$AAT?$AAR@
CONST	SEGMENT
??_C@_1EM@HFMJMDDM@?$AAg?$AA?9?$AA?$DO?$AAg?$AAc?$AA?4?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AAG?$AAC?$AA_?$AAR?$AAE?$AAF?$AAS?$AA_?$AAU?$AAN?$AAT?$AAR@ DB 'g'
	DB	00H, '-', 00H, '>', 00H, 'g', 00H, 'c', 00H, '.', 00H, 'g', 00H
	DB	'c', 00H, '_', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 's', 00H, ' '
	DB	00H, '!', 00H, '=', 00H, ' ', 00H, '_', 00H, 'P', 00H, 'y', 00H
	DB	'G', 00H, 'C', 00H, '_', 00H, 'R', 00H, 'E', 00H, 'F', 00H, 'S'
	DB	00H, '_', 00H, 'U', 00H, 'N', 00H, 'T', 00H, 'R', 00H, 'A', 00H
	DB	'C', 00H, 'K', 00H, 'E', 00H, 'D', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DA@FEGNDKOF@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAi?$AAo?$AAb?$AAa?$AAs?$AAe?$AA?4?$AAc?$AA?$AA@
CONST	SEGMENT
??_C@_1DA@FEGNDKOF@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAi?$AAo?$AAb?$AAa?$AAs?$AAe?$AA?4?$AAc?$AA?$AA@ DB '.'
	DB	00H, '.', 00H, '\', 00H, 'M', 00H, 'o', 00H, 'd', 00H, 'u', 00H
	DB	'l', 00H, 'e', 00H, 's', 00H, '\', 00H, '_', 00H, 'i', 00H, 'o'
	DB	00H, '\', 00H, 'i', 00H, 'o', 00H, 'b', 00H, 'a', 00H, 's', 00H
	DB	'e', 00H, '.', 00H, 'c', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@IIHKNICK@iobase_dealloc?$AA@
CONST	SEGMENT
??_C@_0P@IIHKNICK@iobase_dealloc?$AA@ DB 'iobase_dealloc', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT iobase_dealloc
_TEXT	SEGMENT
g$20626 = 48
_py_tmp$20640 = 56
tv88 = 64
self$ = 96
iobase_dealloc PROC					; COMDAT

; 284  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 285  :     /* NOTE: since IOBaseObject has its own dict, Python-defined attributes
; 286  :        are still available here for close() to use.
; 287  :        However, if the derived class declares a __slots__, those slots are
; 288  :        already gone.
; 289  :     */
; 290  :     if (_PyIOBase_finalize((PyObject *) self) < 0) {

  00009	48 8b 4c 24 60	 mov	 rcx, QWORD PTR self$[rsp]
  0000e	e8 00 00 00 00	 call	 _PyIOBase_finalize
  00013	85 c0		 test	 eax, eax
  00015	7d 2b		 jge	 SHORT $LN11@iobase_dea

; 291  :         /* When called from a heap type's dealloc, the type will be
; 292  :            decref'ed on return (see e.g. subtype_dealloc in typeobject.c). */
; 293  :         if (PyType_HasFeature(Py_TYPE(self), Py_TPFLAGS_HEAPTYPE))

  00017	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  0001c	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00020	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00026	25 00 02 00 00	 and	 eax, 512		; 00000200H
  0002b	85 c0		 test	 eax, eax
  0002d	74 0e		 je	 SHORT $LN10@iobase_dea

; 294  :             Py_INCREF(Py_TYPE(self));

  0002f	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00034	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  00038	e8 00 00 00 00	 call	 _Py_IncRef
$LN10@iobase_dea:

; 295  :         return;

  0003d	e9 7e 01 00 00	 jmp	 $LN12@iobase_dea
$LN11@iobase_dea:

; 296  :     }
; 297  :     _PyObject_GC_UNTRACK(self);

  00042	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0004a	4c 8b 4c 24 60	 mov	 r9, QWORD PTR self$[rsp]
  0004f	41 b8 29 01 00
	00		 mov	 r8d, 297		; 00000129H
  00055	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@KFPEJKND@?4?4?2Modules?2_io?2iobase?4c?$AA@
  0005c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@IIHKNICK@iobase_dealloc?$AA@
  00063	e8 00 00 00 00	 call	 _PyParallel_Guard
  00068	85 c0		 test	 eax, eax
  0006a	0f 85 c1 00 00
	00		 jne	 $LN9@iobase_dea
$LN8@iobase_dea:
  00070	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00078	4c 8b 4c 24 60	 mov	 r9, QWORD PTR self$[rsp]
  0007d	41 b8 29 01 00
	00		 mov	 r8d, 297		; 00000129H
  00083	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@KFPEJKND@?4?4?2Modules?2_io?2iobase?4c?$AA@
  0008a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@IIHKNICK@iobase_dealloc?$AA@
  00091	e8 00 00 00 00	 call	 _PyParallel_Guard
  00096	85 c0		 test	 eax, eax
  00098	74 0b		 je	 SHORT $LN14@iobase_dea
  0009a	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR tv88[rsp], 0
  000a3	eb 0e		 jmp	 SHORT $LN15@iobase_dea
$LN14@iobase_dea:
  000a5	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  000aa	48 83 e8 18	 sub	 rax, 24
  000ae	48 89 44 24 40	 mov	 QWORD PTR tv88[rsp], rax
$LN15@iobase_dea:
  000b3	48 8b 44 24 40	 mov	 rax, QWORD PTR tv88[rsp]
  000b8	48 89 44 24 30	 mov	 QWORD PTR g$20626[rsp], rax
  000bd	48 8b 44 24 30	 mov	 rax, QWORD PTR g$20626[rsp]
  000c2	48 83 78 10 fe	 cmp	 QWORD PTR [rax+16], -2
  000c7	75 1c		 jne	 SHORT $LN16@iobase_dea
  000c9	41 b8 29 01 00
	00		 mov	 r8d, 297		; 00000129H
  000cf	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@FEGNDKOF@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAi?$AAo?$AAb?$AAa?$AAs?$AAe?$AA?4?$AAc?$AA?$AA@
  000d6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EM@HFMJMDDM@?$AAg?$AA?9?$AA?$DO?$AAg?$AAc?$AA?4?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AAG?$AAC?$AA_?$AAR?$AAE?$AAF?$AAS?$AA_?$AAU?$AAN?$AAT?$AAR@
  000dd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000e3	33 c0		 xor	 eax, eax
$LN16@iobase_dea:
  000e5	48 8b 44 24 30	 mov	 rax, QWORD PTR g$20626[rsp]
  000ea	48 c7 40 10 fe
	ff ff ff	 mov	 QWORD PTR [rax+16], -2
  000f2	48 8b 44 24 30	 mov	 rax, QWORD PTR g$20626[rsp]
  000f7	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  000fb	48 8b 4c 24 30	 mov	 rcx, QWORD PTR g$20626[rsp]
  00100	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00103	48 89 08	 mov	 QWORD PTR [rax], rcx
  00106	48 8b 44 24 30	 mov	 rax, QWORD PTR g$20626[rsp]
  0010b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0010e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR g$20626[rsp]
  00113	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00117	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  0011b	48 8b 44 24 30	 mov	 rax, QWORD PTR g$20626[rsp]
  00120	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
  00127	33 c0		 xor	 eax, eax
  00129	85 c0		 test	 eax, eax
  0012b	0f 85 3f ff ff
	ff		 jne	 $LN8@iobase_dea
$LN9@iobase_dea:

; 298  :     if (self->weakreflist != NULL)

  00131	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00136	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  0013b	74 0a		 je	 SHORT $LN5@iobase_dea

; 299  :         PyObject_ClearWeakRefs((PyObject *) self);

  0013d	48 8b 4c 24 60	 mov	 rcx, QWORD PTR self$[rsp]
  00142	e8 00 00 00 00	 call	 PyObject_ClearWeakRefs
$LN5@iobase_dea:
$LN4@iobase_dea:

; 300  :     Py_CLEAR(self->dict);

  00147	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  0014c	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00151	74 53		 je	 SHORT $LN1@iobase_dea
  00153	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0015b	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00160	4c 8b 48 60	 mov	 r9, QWORD PTR [rax+96]
  00164	41 b8 2c 01 00
	00		 mov	 r8d, 300		; 0000012cH
  0016a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@KFPEJKND@?4?4?2Modules?2_io?2iobase?4c?$AA@
  00171	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@IIHKNICK@iobase_dealloc?$AA@
  00178	e8 00 00 00 00	 call	 _PyParallel_Guard
  0017d	85 c0		 test	 eax, eax
  0017f	75 25		 jne	 SHORT $LN1@iobase_dea
  00181	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00186	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0018a	48 89 44 24 38	 mov	 QWORD PTR _py_tmp$20640[rsp], rax
  0018f	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00194	48 c7 40 60 00
	00 00 00	 mov	 QWORD PTR [rax+96], 0
  0019c	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _py_tmp$20640[rsp]
  001a1	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@iobase_dea:
  001a6	33 c0		 xor	 eax, eax
  001a8	85 c0		 test	 eax, eax
  001aa	75 9b		 jne	 SHORT $LN4@iobase_dea

; 301  :     Py_TYPE(self)->tp_free((PyObject *) self);

  001ac	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  001b1	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  001b5	48 8b 4c 24 60	 mov	 rcx, QWORD PTR self$[rsp]
  001ba	ff 90 98 01 00
	00		 call	 QWORD PTR [rax+408]
$LN12@iobase_dea:

; 302  : }

  001c0	48 83 c4 58	 add	 rsp, 88			; 00000058H
  001c4	c3		 ret	 0
iobase_dealloc ENDP
_TEXT	ENDS
EXTRN	_Py_FalseStruct:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$iobase_seekable DD imagerel iobase_seekable
	DD	imagerel iobase_seekable+38
	DD	imagerel $unwind$iobase_seekable
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$iobase_seekable DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT iobase_seekable
_TEXT	SEGMENT
self$ = 48
args$ = 56
iobase_seekable PROC					; COMDAT

; 314  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 315  :     Py_RETURN_FALSE;

  0000e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_FalseStruct
  00015	e8 00 00 00 00	 call	 _Py_IncRef
  0001a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct

; 316  : }

  00021	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00025	c3		 ret	 0
iobase_seekable ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CA@EHPAPMHG@File?5or?5stream?5is?5not?5seekable?4?$AA@ ; `string'
PUBLIC	??_C@_0BJ@LDHBALPI@_PyIOBase_check_seekable?$AA@ ; `string'
EXTRN	_PyIO_str_seekable:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyIOBase_check_seekable DD imagerel $LN10
	DD	imagerel $LN10+203
	DD	imagerel $unwind$_PyIOBase_check_seekable
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyIOBase_check_seekable DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_0CA@EHPAPMHG@File?5or?5stream?5is?5not?5seekable?4?$AA@
CONST	SEGMENT
??_C@_0CA@EHPAPMHG@File?5or?5stream?5is?5not?5seekable?4?$AA@ DB 'File or'
	DB	' stream is not seekable.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@LDHBALPI@_PyIOBase_check_seekable?$AA@
CONST	SEGMENT
??_C@_0BJ@LDHBALPI@_PyIOBase_check_seekable?$AA@ DB '_PyIOBase_check_seek'
	DB	'able', 00H					; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PyIOBase_check_seekable
_TEXT	SEGMENT
res$ = 48
_py_tmp$20673 = 56
self$ = 80
args$ = 88
_PyIOBase_check_seekable PROC				; COMDAT

; 320  : {

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 321  :     PyObject *res  = PyObject_CallMethodObjArgs(self, _PyIO_str_seekable, NULL);

  0000e	45 33 c0	 xor	 r8d, r8d
  00011	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR _PyIO_str_seekable
  00018	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  0001d	e8 00 00 00 00	 call	 PyObject_CallMethodObjArgs
  00022	48 89 44 24 30	 mov	 QWORD PTR res$[rsp], rax

; 322  :     if (res == NULL)

  00027	48 83 7c 24 30
	00		 cmp	 QWORD PTR res$[rsp], 0
  0002d	75 07		 jne	 SHORT $LN7@PyIOBase_c@2

; 323  :         return NULL;

  0002f	33 c0		 xor	 eax, eax
  00031	e9 90 00 00 00	 jmp	 $LN8@PyIOBase_c@2
$LN7@PyIOBase_c@2:

; 324  :     if (res != Py_True) {

  00036	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  0003d	48 39 44 24 30	 cmp	 QWORD PTR res$[rsp], rax
  00042	74 65		 je	 SHORT $LN6@PyIOBase_c@2
$LN5@PyIOBase_c@2:

; 325  :         Py_CLEAR(res);

  00044	48 83 7c 24 30
	00		 cmp	 QWORD PTR res$[rsp], 0
  0004a	74 47		 je	 SHORT $LN2@PyIOBase_c@2
  0004c	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00054	4c 8b 4c 24 30	 mov	 r9, QWORD PTR res$[rsp]
  00059	41 b8 45 01 00
	00		 mov	 r8d, 325		; 00000145H
  0005f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@KFPEJKND@?4?4?2Modules?2_io?2iobase?4c?$AA@
  00066	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@LDHBALPI@_PyIOBase_check_seekable?$AA@
  0006d	e8 00 00 00 00	 call	 _PyParallel_Guard
  00072	85 c0		 test	 eax, eax
  00074	75 1d		 jne	 SHORT $LN2@PyIOBase_c@2
  00076	48 8b 44 24 30	 mov	 rax, QWORD PTR res$[rsp]
  0007b	48 89 44 24 38	 mov	 QWORD PTR _py_tmp$20673[rsp], rax
  00080	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR res$[rsp], 0
  00089	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _py_tmp$20673[rsp]
  0008e	e8 00 00 00 00	 call	 _Py_DecRef
$LN2@PyIOBase_c@2:
  00093	33 c0		 xor	 eax, eax
  00095	85 c0		 test	 eax, eax
  00097	75 ab		 jne	 SHORT $LN5@PyIOBase_c@2

; 326  :         iobase_unsupported("File or stream is not seekable.");

  00099	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CA@EHPAPMHG@File?5or?5stream?5is?5not?5seekable?4?$AA@
  000a0	e8 00 00 00 00	 call	 iobase_unsupported

; 327  :         return NULL;

  000a5	33 c0		 xor	 eax, eax
  000a7	eb 1d		 jmp	 SHORT $LN8@PyIOBase_c@2
$LN6@PyIOBase_c@2:

; 328  :     }
; 329  :     if (args == Py_True) {

  000a9	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  000b0	48 39 44 24 58	 cmp	 QWORD PTR args$[rsp], rax
  000b5	75 0a		 jne	 SHORT $LN1@PyIOBase_c@2

; 330  :         Py_DECREF(res);

  000b7	48 8b 4c 24 30	 mov	 rcx, QWORD PTR res$[rsp]
  000bc	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@PyIOBase_c@2:

; 331  :     }
; 332  :     return res;

  000c1	48 8b 44 24 30	 mov	 rax, QWORD PTR res$[rsp]
$LN8@PyIOBase_c@2:

; 333  : }

  000c6	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000ca	c3		 ret	 0
_PyIOBase_check_seekable ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$iobase_readable DD imagerel iobase_readable
	DD	imagerel iobase_readable+38
	DD	imagerel $unwind$iobase_readable
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$iobase_readable DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT iobase_readable
_TEXT	SEGMENT
self$ = 48
args$ = 56
iobase_readable PROC					; COMDAT

; 342  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 343  :     Py_RETURN_FALSE;

  0000e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_FalseStruct
  00015	e8 00 00 00 00	 call	 _Py_IncRef
  0001a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct

; 344  : }

  00021	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00025	c3		 ret	 0
iobase_readable ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CA@NKDAOJFL@File?5or?5stream?5is?5not?5readable?4?$AA@ ; `string'
PUBLIC	??_C@_0BJ@KBBDIJHN@_PyIOBase_check_readable?$AA@ ; `string'
EXTRN	_PyIO_str_readable:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyIOBase_check_readable DD imagerel $LN10
	DD	imagerel $LN10+203
	DD	imagerel $unwind$_PyIOBase_check_readable
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyIOBase_check_readable DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_0CA@NKDAOJFL@File?5or?5stream?5is?5not?5readable?4?$AA@
CONST	SEGMENT
??_C@_0CA@NKDAOJFL@File?5or?5stream?5is?5not?5readable?4?$AA@ DB 'File or'
	DB	' stream is not readable.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@KBBDIJHN@_PyIOBase_check_readable?$AA@
CONST	SEGMENT
??_C@_0BJ@KBBDIJHN@_PyIOBase_check_readable?$AA@ DB '_PyIOBase_check_read'
	DB	'able', 00H					; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PyIOBase_check_readable
_TEXT	SEGMENT
res$ = 48
_py_tmp$20709 = 56
self$ = 80
args$ = 88
_PyIOBase_check_readable PROC				; COMDAT

; 349  : {

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 350  :     PyObject *res  = PyObject_CallMethodObjArgs(self, _PyIO_str_readable, NULL);

  0000e	45 33 c0	 xor	 r8d, r8d
  00011	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR _PyIO_str_readable
  00018	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  0001d	e8 00 00 00 00	 call	 PyObject_CallMethodObjArgs
  00022	48 89 44 24 30	 mov	 QWORD PTR res$[rsp], rax

; 351  :     if (res == NULL)

  00027	48 83 7c 24 30
	00		 cmp	 QWORD PTR res$[rsp], 0
  0002d	75 07		 jne	 SHORT $LN7@PyIOBase_c@3

; 352  :         return NULL;

  0002f	33 c0		 xor	 eax, eax
  00031	e9 90 00 00 00	 jmp	 $LN8@PyIOBase_c@3
$LN7@PyIOBase_c@3:

; 353  :     if (res != Py_True) {

  00036	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  0003d	48 39 44 24 30	 cmp	 QWORD PTR res$[rsp], rax
  00042	74 65		 je	 SHORT $LN6@PyIOBase_c@3
$LN5@PyIOBase_c@3:

; 354  :         Py_CLEAR(res);

  00044	48 83 7c 24 30
	00		 cmp	 QWORD PTR res$[rsp], 0
  0004a	74 47		 je	 SHORT $LN2@PyIOBase_c@3
  0004c	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00054	4c 8b 4c 24 30	 mov	 r9, QWORD PTR res$[rsp]
  00059	41 b8 62 01 00
	00		 mov	 r8d, 354		; 00000162H
  0005f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@KFPEJKND@?4?4?2Modules?2_io?2iobase?4c?$AA@
  00066	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@KBBDIJHN@_PyIOBase_check_readable?$AA@
  0006d	e8 00 00 00 00	 call	 _PyParallel_Guard
  00072	85 c0		 test	 eax, eax
  00074	75 1d		 jne	 SHORT $LN2@PyIOBase_c@3
  00076	48 8b 44 24 30	 mov	 rax, QWORD PTR res$[rsp]
  0007b	48 89 44 24 38	 mov	 QWORD PTR _py_tmp$20709[rsp], rax
  00080	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR res$[rsp], 0
  00089	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _py_tmp$20709[rsp]
  0008e	e8 00 00 00 00	 call	 _Py_DecRef
$LN2@PyIOBase_c@3:
  00093	33 c0		 xor	 eax, eax
  00095	85 c0		 test	 eax, eax
  00097	75 ab		 jne	 SHORT $LN5@PyIOBase_c@3

; 355  :         iobase_unsupported("File or stream is not readable.");

  00099	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CA@NKDAOJFL@File?5or?5stream?5is?5not?5readable?4?$AA@
  000a0	e8 00 00 00 00	 call	 iobase_unsupported

; 356  :         return NULL;

  000a5	33 c0		 xor	 eax, eax
  000a7	eb 1d		 jmp	 SHORT $LN8@PyIOBase_c@3
$LN6@PyIOBase_c@3:

; 357  :     }
; 358  :     if (args == Py_True) {

  000a9	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  000b0	48 39 44 24 58	 cmp	 QWORD PTR args$[rsp], rax
  000b5	75 0a		 jne	 SHORT $LN1@PyIOBase_c@3

; 359  :         Py_DECREF(res);

  000b7	48 8b 4c 24 30	 mov	 rcx, QWORD PTR res$[rsp]
  000bc	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@PyIOBase_c@3:

; 360  :     }
; 361  :     return res;

  000c1	48 8b 44 24 30	 mov	 rax, QWORD PTR res$[rsp]
$LN8@PyIOBase_c@3:

; 362  : }

  000c6	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000ca	c3		 ret	 0
_PyIOBase_check_readable ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$iobase_writable DD imagerel iobase_writable
	DD	imagerel iobase_writable+38
	DD	imagerel $unwind$iobase_writable
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$iobase_writable DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT iobase_writable
_TEXT	SEGMENT
self$ = 48
args$ = 56
iobase_writable PROC					; COMDAT

; 371  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 372  :     Py_RETURN_FALSE;

  0000e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_FalseStruct
  00015	e8 00 00 00 00	 call	 _Py_IncRef
  0001a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct

; 373  : }

  00021	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00025	c3		 ret	 0
iobase_writable ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CA@EAIDIKNM@File?5or?5stream?5is?5not?5writable?4?$AA@ ; `string'
PUBLIC	??_C@_0BJ@KNMDLIPM@_PyIOBase_check_writable?$AA@ ; `string'
EXTRN	_PyIO_str_writable:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$_PyIOBase_check_writable DD imagerel $LN10
	DD	imagerel $LN10+203
	DD	imagerel $unwind$_PyIOBase_check_writable
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_PyIOBase_check_writable DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_0CA@EAIDIKNM@File?5or?5stream?5is?5not?5writable?4?$AA@
CONST	SEGMENT
??_C@_0CA@EAIDIKNM@File?5or?5stream?5is?5not?5writable?4?$AA@ DB 'File or'
	DB	' stream is not writable.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@KNMDLIPM@_PyIOBase_check_writable?$AA@
CONST	SEGMENT
??_C@_0BJ@KNMDLIPM@_PyIOBase_check_writable?$AA@ DB '_PyIOBase_check_writ'
	DB	'able', 00H					; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _PyIOBase_check_writable
_TEXT	SEGMENT
res$ = 48
_py_tmp$20745 = 56
self$ = 80
args$ = 88
_PyIOBase_check_writable PROC				; COMDAT

; 378  : {

$LN10:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 379  :     PyObject *res  = PyObject_CallMethodObjArgs(self, _PyIO_str_writable, NULL);

  0000e	45 33 c0	 xor	 r8d, r8d
  00011	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR _PyIO_str_writable
  00018	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  0001d	e8 00 00 00 00	 call	 PyObject_CallMethodObjArgs
  00022	48 89 44 24 30	 mov	 QWORD PTR res$[rsp], rax

; 380  :     if (res == NULL)

  00027	48 83 7c 24 30
	00		 cmp	 QWORD PTR res$[rsp], 0
  0002d	75 07		 jne	 SHORT $LN7@PyIOBase_c@4

; 381  :         return NULL;

  0002f	33 c0		 xor	 eax, eax
  00031	e9 90 00 00 00	 jmp	 $LN8@PyIOBase_c@4
$LN7@PyIOBase_c@4:

; 382  :     if (res != Py_True) {

  00036	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  0003d	48 39 44 24 30	 cmp	 QWORD PTR res$[rsp], rax
  00042	74 65		 je	 SHORT $LN6@PyIOBase_c@4
$LN5@PyIOBase_c@4:

; 383  :         Py_CLEAR(res);

  00044	48 83 7c 24 30
	00		 cmp	 QWORD PTR res$[rsp], 0
  0004a	74 47		 je	 SHORT $LN2@PyIOBase_c@4
  0004c	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00054	4c 8b 4c 24 30	 mov	 r9, QWORD PTR res$[rsp]
  00059	41 b8 7f 01 00
	00		 mov	 r8d, 383		; 0000017fH
  0005f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@KFPEJKND@?4?4?2Modules?2_io?2iobase?4c?$AA@
  00066	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BJ@KNMDLIPM@_PyIOBase_check_writable?$AA@
  0006d	e8 00 00 00 00	 call	 _PyParallel_Guard
  00072	85 c0		 test	 eax, eax
  00074	75 1d		 jne	 SHORT $LN2@PyIOBase_c@4
  00076	48 8b 44 24 30	 mov	 rax, QWORD PTR res$[rsp]
  0007b	48 89 44 24 38	 mov	 QWORD PTR _py_tmp$20745[rsp], rax
  00080	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR res$[rsp], 0
  00089	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _py_tmp$20745[rsp]
  0008e	e8 00 00 00 00	 call	 _Py_DecRef
$LN2@PyIOBase_c@4:
  00093	33 c0		 xor	 eax, eax
  00095	85 c0		 test	 eax, eax
  00097	75 ab		 jne	 SHORT $LN5@PyIOBase_c@4

; 384  :         iobase_unsupported("File or stream is not writable.");

  00099	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CA@EAIDIKNM@File?5or?5stream?5is?5not?5writable?4?$AA@
  000a0	e8 00 00 00 00	 call	 iobase_unsupported

; 385  :         return NULL;

  000a5	33 c0		 xor	 eax, eax
  000a7	eb 1d		 jmp	 SHORT $LN8@PyIOBase_c@4
$LN6@PyIOBase_c@4:

; 386  :     }
; 387  :     if (args == Py_True) {

  000a9	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  000b0	48 39 44 24 58	 cmp	 QWORD PTR args$[rsp], rax
  000b5	75 0a		 jne	 SHORT $LN1@PyIOBase_c@4

; 388  :         Py_DECREF(res);

  000b7	48 8b 4c 24 30	 mov	 rcx, QWORD PTR res$[rsp]
  000bc	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@PyIOBase_c@4:

; 389  :     }
; 390  :     return res;

  000c1	48 8b 44 24 30	 mov	 rax, QWORD PTR res$[rsp]
$LN8@PyIOBase_c@4:

; 391  : }

  000c6	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000ca	c3		 ret	 0
_PyIOBase_check_writable ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$iobase_enter DD imagerel iobase_enter
	DD	imagerel iobase_enter+60
	DD	imagerel $unwind$iobase_enter
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$iobase_enter DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT iobase_enter
_TEXT	SEGMENT
self$ = 48
args$ = 56
iobase_enter PROC					; COMDAT

; 397  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 398  :     if (_PyIOBase_check_closed(self, Py_True) == NULL)

  0000e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_Py_TrueStruct
  00015	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self$[rsp]
  0001a	e8 00 00 00 00	 call	 _PyIOBase_check_closed
  0001f	48 85 c0	 test	 rax, rax
  00022	75 04		 jne	 SHORT $LN1@iobase_ent

; 399  :         return NULL;

  00024	33 c0		 xor	 eax, eax
  00026	eb 0f		 jmp	 SHORT $LN2@iobase_ent
$LN1@iobase_ent:

; 400  : 
; 401  :     Py_INCREF(self);

  00028	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self$[rsp]
  0002d	e8 00 00 00 00	 call	 _Py_IncRef

; 402  :     return self;

  00032	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
$LN2@iobase_ent:

; 403  : }

  00037	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003b	c3		 ret	 0
iobase_enter ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$iobase_exit DD imagerel iobase_exit
	DD	imagerel iobase_exit+39
	DD	imagerel $unwind$iobase_exit
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$iobase_exit DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT iobase_exit
_TEXT	SEGMENT
self$ = 48
args$ = 56
iobase_exit PROC					; COMDAT

; 407  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 408  :     return PyObject_CallMethodObjArgs(self, _PyIO_str_close, NULL);

  0000e	45 33 c0	 xor	 r8d, r8d
  00011	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR _PyIO_str_close
  00018	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self$[rsp]
  0001d	e8 00 00 00 00	 call	 PyObject_CallMethodObjArgs

; 409  : }

  00022	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00026	c3		 ret	 0
iobase_exit ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$iobase_fileno DD imagerel iobase_fileno
	DD	imagerel iobase_fileno+31
	DD	imagerel $unwind$iobase_fileno
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$iobase_fileno DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT iobase_fileno
_TEXT	SEGMENT
self$ = 48
args$ = 56
iobase_fileno PROC					; COMDAT

; 422  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 423  :     return iobase_unsupported("fileno");

  0000e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06FFBIALPD@fileno?$AA@
  00015	e8 00 00 00 00	 call	 iobase_unsupported

; 424  : }

  0001a	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001e	c3		 ret	 0
iobase_fileno ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$iobase_isatty DD imagerel iobase_isatty
	DD	imagerel iobase_isatty+64
	DD	imagerel $unwind$iobase_isatty
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$iobase_isatty DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT iobase_isatty
_TEXT	SEGMENT
self$ = 48
args$ = 56
iobase_isatty PROC					; COMDAT

; 433  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 434  :     if (_PyIOBase_check_closed(self, Py_True) == NULL)

  0000e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_Py_TrueStruct
  00015	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self$[rsp]
  0001a	e8 00 00 00 00	 call	 _PyIOBase_check_closed
  0001f	48 85 c0	 test	 rax, rax
  00022	75 04		 jne	 SHORT $LN1@iobase_isa

; 435  :         return NULL;

  00024	33 c0		 xor	 eax, eax
  00026	eb 13		 jmp	 SHORT $LN2@iobase_isa
$LN1@iobase_isa:

; 436  :     Py_RETURN_FALSE;

  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_FalseStruct
  0002f	e8 00 00 00 00	 call	 _Py_IncRef
  00034	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct
$LN2@iobase_isa:

; 437  : }

  0003b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003f	c3		 ret	 0
iobase_isatty ENDP
_TEXT	ENDS
PUBLIC	??_C@_1DE@JJDIKLDM@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CC@DHEDCFGE@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_0DJ@GENNMCJH@read?$CI?$CJ?5should?5have?5returned?5a?5by@ ; `string'
PUBLIC	??_C@_01EFFIKLCJ@n?$AA@				; `string'
PUBLIC	??_C@_1DC@OBGMKGAF@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAr?$AAe?$AAa?$AAd?$AAa?$AAh?$AAe?$AAa?$AAd?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_0DJ@NENDLLKN@peek?$CI?$CJ?5should?5have?5returned?5a?5by@ ; `string'
PUBLIC	??_C@_01KBJDNOO@i?$AA@				; `string'
PUBLIC	??_C@_0N@DLBPBHHK@?$HMO?$CG?3readline?$AA@	; `string'
EXTRN	PyBytes_FromStringAndSize:PROC
EXTRN	memcpy:PROC
EXTRN	_PyByteArray_empty_string:BYTE
EXTRN	PyByteArray_Resize:PROC
EXTRN	PyType_IsSubtype:PROC
EXTRN	PyByteArray_Type:BYTE
EXTRN	PyErr_Format:PROC
EXTRN	PyExc_IOError:QWORD
EXTRN	_PyIO_trap_eintr:PROC
EXTRN	PyByteArray_FromStringAndSize:PROC
EXTRN	_PyArg_ParseTuple_SizeT:PROC
EXTRN	_PyIO_ConvertSsize_t:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$iobase_readline DD imagerel iobase_readline
	DD	imagerel iobase_readline+1940
	DD	imagerel $unwind$iobase_readline
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$iobase_readline DD 021101H
	DD	0130111H
xdata	ENDS
;	COMDAT ??_C@_1DE@JJDIKLDM@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DE@JJDIKLDM@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 'A', 00H
	DB	'r', 00H, 'r', 00H, 'a', 00H, 'y', 00H, '_', 00H, 'C', 00H, 'h'
	DB	00H, 'e', 00H, 'c', 00H, 'k', 00H, '(', 00H, 'b', 00H, 'u', 00H
	DB	'f', 00H, 'f', 00H, 'e', 00H, 'r', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CC@DHEDCFGE@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CC@DHEDCFGE@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 's', 00H
	DB	'_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, '('
	DB	00H, 'b', 00H, ')', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@GENNMCJH@read?$CI?$CJ?5should?5have?5returned?5a?5by@
CONST	SEGMENT
??_C@_0DJ@GENNMCJH@read?$CI?$CJ?5should?5have?5returned?5a?5by@ DB 'read('
	DB	') should have returned a bytes object, not ''%.200s''', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01EFFIKLCJ@n?$AA@
CONST	SEGMENT
??_C@_01EFFIKLCJ@n?$AA@ DB 'n', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1DC@OBGMKGAF@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAr?$AAe?$AAa?$AAd?$AAa?$AAh?$AAe?$AAa?$AAd?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DC@OBGMKGAF@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAr?$AAe?$AAa?$AAd?$AAa?$AAh?$AAe?$AAa?$AAd?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 's', 00H
	DB	'_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, '('
	DB	00H, 'r', 00H, 'e', 00H, 'a', 00H, 'd', 00H, 'a', 00H, 'h', 00H
	DB	'e', 00H, 'a', 00H, 'd', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@NENDLLKN@peek?$CI?$CJ?5should?5have?5returned?5a?5by@
CONST	SEGMENT
??_C@_0DJ@NENDLLKN@peek?$CI?$CJ?5should?5have?5returned?5a?5by@ DB 'peek('
	DB	') should have returned a bytes object, not ''%.200s''', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01KBJDNOO@i?$AA@
CONST	SEGMENT
??_C@_01KBJDNOO@i?$AA@ DB 'i', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@DLBPBHHK@?$HMO?$CG?3readline?$AA@
CONST	SEGMENT
??_C@_0N@DLBPBHHK@?$HMO?$CG?3readline?$AA@ DB '|O&:readline', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT iobase_readline
_TEXT	SEGMENT
old_size$ = 32
has_peek$ = 40
result$ = 48
limit$ = 56
buffer$ = 64
nreadahead$20825 = 72
b$20826 = 80
readahead$20828 = 88
n$20844 = 96
buf$20845 = 104
tv290 = 112
tv307 = 120
tv352 = 128
self$ = 160
args$ = 168
iobase_readline PROC					; COMDAT

; 452  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 453  :     /* For backwards compatibility, a (slowish) readline(). */
; 454  : 
; 455  :     Py_ssize_t limit = -1;

  00011	48 c7 44 24 38
	ff ff ff ff	 mov	 QWORD PTR limit$[rsp], -1

; 456  :     int has_peek = 0;

  0001a	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR has_peek$[rsp], 0

; 457  :     PyObject *buffer, *result;
; 458  :     Py_ssize_t old_size = -1;

  00022	48 c7 44 24 20
	ff ff ff ff	 mov	 QWORD PTR old_size$[rsp], -1

; 459  :     _Py_IDENTIFIER(read);
; 460  :     _Py_IDENTIFIER(peek);
; 461  : 
; 462  :     if (!PyArg_ParseTuple(args, "|O&:readline", &_PyIO_ConvertSsize_t, &limit)) {

  0002b	4c 8d 4c 24 38	 lea	 r9, QWORD PTR limit$[rsp]
  00030	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:_PyIO_ConvertSsize_t
  00037	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@DLBPBHHK@?$HMO?$CG?3readline?$AA@
  0003e	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  00046	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  0004b	85 c0		 test	 eax, eax
  0004d	75 07		 jne	 SHORT $LN29@iobase_rea

; 463  :         return NULL;

  0004f	33 c0		 xor	 eax, eax
  00051	e9 36 07 00 00	 jmp	 $LN30@iobase_rea
$LN29@iobase_rea:

; 464  :     }
; 465  : 
; 466  :     if (_PyObject_HasAttrId(self, &PyId_peek))

  00056	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId_peek@?1??iobase_readline@@9@9
  0005b	8b c0		 mov	 eax, eax
  0005d	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00063	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0006c	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00070	48 8b d0	 mov	 rdx, rax
  00073	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  0007b	e8 00 00 00 00	 call	 _PyObject_HasAttrId
  00080	85 c0		 test	 eax, eax
  00082	74 08		 je	 SHORT $LN28@iobase_rea

; 467  :         has_peek = 1;

  00084	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR has_peek$[rsp], 1
$LN28@iobase_rea:

; 468  : 
; 469  :     buffer = PyByteArray_FromStringAndSize(NULL, 0);

  0008c	33 d2		 xor	 edx, edx
  0008e	33 c9		 xor	 ecx, ecx
  00090	e8 00 00 00 00	 call	 PyByteArray_FromStringAndSize
  00095	48 89 44 24 40	 mov	 QWORD PTR buffer$[rsp], rax

; 470  :     if (buffer == NULL)

  0009a	48 83 7c 24 40
	00		 cmp	 QWORD PTR buffer$[rsp], 0
  000a0	75 07		 jne	 SHORT $LN27@iobase_rea

; 471  :         return NULL;

  000a2	33 c0		 xor	 eax, eax
  000a4	e9 e3 06 00 00	 jmp	 $LN30@iobase_rea
$LN27@iobase_rea:
$LN53@iobase_rea:
$LN52@iobase_rea:
$LN26@iobase_rea:

; 472  : 
; 473  :     while (limit < 0 || Py_SIZE(buffer) < limit) {

  000a9	48 83 7c 24 38
	00		 cmp	 QWORD PTR limit$[rsp], 0
  000af	7c 14		 jl	 SHORT $LN24@iobase_rea
  000b1	48 8b 44 24 40	 mov	 rax, QWORD PTR buffer$[rsp]
  000b6	48 8b 4c 24 38	 mov	 rcx, QWORD PTR limit$[rsp]
  000bb	48 39 48 60	 cmp	 QWORD PTR [rax+96], rcx
  000bf	0f 8d d0 05 00
	00		 jge	 $LN25@iobase_rea
$LN24@iobase_rea:

; 474  :         Py_ssize_t nreadahead = 1;

  000c5	48 c7 44 24 48
	01 00 00 00	 mov	 QWORD PTR nreadahead$20825[rsp], 1

; 475  :         PyObject *b;
; 476  : 
; 477  :         if (has_peek) {

  000ce	83 7c 24 28 00	 cmp	 DWORD PTR has_peek$[rsp], 0
  000d3	0f 84 40 02 00
	00		 je	 $LN23@iobase_rea

; 478  :             PyObject *readahead = _PyObject_CallMethodId(self, &PyId_peek, "i", 1);

  000d9	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId_peek@?1??iobase_readline@@9@9
  000de	8b c0		 mov	 eax, eax
  000e0	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  000e6	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  000ef	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  000f3	41 b9 01 00 00
	00		 mov	 r9d, 1
  000f9	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01KBJDNOO@i?$AA@
  00100	48 8b d0	 mov	 rdx, rax
  00103	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  0010b	e8 00 00 00 00	 call	 _PyObject_CallMethodId_SizeT
  00110	48 89 44 24 58	 mov	 QWORD PTR readahead$20828[rsp], rax

; 479  :             if (readahead == NULL) {

  00115	48 83 7c 24 58
	00		 cmp	 QWORD PTR readahead$20828[rsp], 0
  0011b	75 10		 jne	 SHORT $LN22@iobase_rea

; 480  :                 /* NOTE: PyErr_SetFromErrno() calls PyErr_CheckSignals()
; 481  :                    when EINTR occurs so we needn't do it ourselves. */
; 482  :                 if (_PyIO_trap_eintr()) {

  0011d	e8 00 00 00 00	 call	 _PyIO_trap_eintr
  00122	85 c0		 test	 eax, eax
  00124	74 02		 je	 SHORT $LN21@iobase_rea

; 483  :                     continue;

  00126	eb 81		 jmp	 SHORT $LN26@iobase_rea
$LN21@iobase_rea:

; 484  :                 }
; 485  :                 goto fail;

  00128	e9 53 06 00 00	 jmp	 $fail$20833
$LN22@iobase_rea:

; 486  :             }
; 487  :             if (!PyBytes_Check(readahead)) {

  0012d	48 8b 44 24 58	 mov	 rax, QWORD PTR readahead$20828[rsp]
  00132	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00136	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0013c	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  00141	85 c0		 test	 eax, eax
  00143	75 2f		 jne	 SHORT $LN20@iobase_rea

; 488  :                 PyErr_Format(PyExc_IOError,
; 489  :                              "peek() should have returned a bytes object, "
; 490  :                              "not '%.200s'", Py_TYPE(readahead)->tp_name);

  00145	48 8b 44 24 58	 mov	 rax, QWORD PTR readahead$20828[rsp]
  0014a	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0014e	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  00152	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DJ@NENDLLKN@peek?$CI?$CJ?5should?5have?5returned?5a?5by@
  00159	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_IOError
  00160	e8 00 00 00 00	 call	 PyErr_Format

; 491  :                 Py_DECREF(readahead);

  00165	48 8b 4c 24 58	 mov	 rcx, QWORD PTR readahead$20828[rsp]
  0016a	e8 00 00 00 00	 call	 _Py_DecRef

; 492  :                 goto fail;

  0016f	e9 0c 06 00 00	 jmp	 $fail$20833
$LN20@iobase_rea:

; 493  :             }
; 494  :             if (PyBytes_GET_SIZE(readahead) > 0) {

  00174	48 8b 44 24 58	 mov	 rax, QWORD PTR readahead$20828[rsp]
  00179	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0017d	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00183	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  00188	85 c0		 test	 eax, eax
  0018a	75 1c		 jne	 SHORT $LN32@iobase_rea
  0018c	41 b8 ee 01 00
	00		 mov	 r8d, 494		; 000001eeH
  00192	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@FEGNDKOF@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAi?$AAo?$AAb?$AAa?$AAs?$AAe?$AA?4?$AAc?$AA?$AA@
  00199	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DC@OBGMKGAF@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAr?$AAe?$AAa?$AAd?$AAa?$AAh?$AAe?$AAa?$AAd?$AA?$CJ?$AA?$AA@
  001a0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001a6	33 c0		 xor	 eax, eax
$LN32@iobase_rea:
  001a8	48 8b 44 24 58	 mov	 rax, QWORD PTR readahead$20828[rsp]
  001ad	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  001b2	0f 8e 57 01 00
	00		 jle	 $LN19@iobase_rea

; 495  :                 Py_ssize_t n = 0;

  001b8	48 c7 44 24 60
	00 00 00 00	 mov	 QWORD PTR n$20844[rsp], 0

; 496  :                 const char *buf = PyBytes_AS_STRING(readahead);

  001c1	48 8b 44 24 58	 mov	 rax, QWORD PTR readahead$20828[rsp]
  001c6	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  001ca	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  001d0	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  001d5	85 c0		 test	 eax, eax
  001d7	75 1c		 jne	 SHORT $LN33@iobase_rea
  001d9	41 b8 f0 01 00
	00		 mov	 r8d, 496		; 000001f0H
  001df	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@FEGNDKOF@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAi?$AAo?$AAb?$AAa?$AAs?$AAe?$AA?4?$AAc?$AA?$AA@
  001e6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DC@OBGMKGAF@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAr?$AAe?$AAa?$AAd?$AAa?$AAh?$AAe?$AAa?$AAd?$AA?$CJ?$AA?$AA@
  001ed	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001f3	33 c0		 xor	 eax, eax
$LN33@iobase_rea:
  001f5	48 8b 44 24 58	 mov	 rax, QWORD PTR readahead$20828[rsp]
  001fa	48 83 c0 78	 add	 rax, 120		; 00000078H
  001fe	48 89 44 24 68	 mov	 QWORD PTR buf$20845[rsp], rax

; 497  :                 if (limit >= 0) {

  00203	48 83 7c 24 38
	00		 cmp	 QWORD PTR limit$[rsp], 0
  00209	0f 8c 82 00 00
	00		 jl	 $LN18@iobase_rea
$LN17@iobase_rea:

; 498  :                     do {
; 499  :                         if (n >= PyBytes_GET_SIZE(readahead) || n >= limit)

  0020f	48 8b 44 24 58	 mov	 rax, QWORD PTR readahead$20828[rsp]
  00214	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00218	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0021e	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  00223	85 c0		 test	 eax, eax
  00225	75 1c		 jne	 SHORT $LN34@iobase_rea
  00227	41 b8 f3 01 00
	00		 mov	 r8d, 499		; 000001f3H
  0022d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@FEGNDKOF@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAi?$AAo?$AAb?$AAa?$AAs?$AAe?$AA?4?$AAc?$AA?$AA@
  00234	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DC@OBGMKGAF@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAr?$AAe?$AAa?$AAd?$AAa?$AAh?$AAe?$AAa?$AAd?$AA?$CJ?$AA?$AA@
  0023b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00241	33 c0		 xor	 eax, eax
$LN34@iobase_rea:
  00243	48 8b 44 24 58	 mov	 rax, QWORD PTR readahead$20828[rsp]
  00248	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0024c	48 39 44 24 60	 cmp	 QWORD PTR n$20844[rsp], rax
  00251	7d 0c		 jge	 SHORT $LN13@iobase_rea
  00253	48 8b 44 24 38	 mov	 rax, QWORD PTR limit$[rsp]
  00258	48 39 44 24 60	 cmp	 QWORD PTR n$20844[rsp], rax
  0025d	7c 02		 jl	 SHORT $LN14@iobase_rea
$LN13@iobase_rea:

; 500  :                             break;

  0025f	eb 2e		 jmp	 SHORT $LN15@iobase_rea
$LN14@iobase_rea:

; 501  :                         if (buf[n++] == '\n')

  00261	48 8b 44 24 60	 mov	 rax, QWORD PTR n$20844[rsp]
  00266	48 8b 4c 24 68	 mov	 rcx, QWORD PTR buf$20845[rsp]
  0026b	48 03 c8	 add	 rcx, rax
  0026e	48 8b c1	 mov	 rax, rcx
  00271	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00274	48 8b 4c 24 60	 mov	 rcx, QWORD PTR n$20844[rsp]
  00279	48 ff c1	 inc	 rcx
  0027c	48 89 4c 24 60	 mov	 QWORD PTR n$20844[rsp], rcx
  00281	83 f8 0a	 cmp	 eax, 10
  00284	75 02		 jne	 SHORT $LN12@iobase_rea

; 502  :                             break;

  00286	eb 07		 jmp	 SHORT $LN15@iobase_rea
$LN12@iobase_rea:

; 503  :                     } while (1);

  00288	33 c0		 xor	 eax, eax
  0028a	83 f8 01	 cmp	 eax, 1
  0028d	75 80		 jne	 SHORT $LN17@iobase_rea
$LN15@iobase_rea:

; 504  :                 }
; 505  :                 else {

  0028f	eb 74		 jmp	 SHORT $LN11@iobase_rea
$LN18@iobase_rea:
$LN10@iobase_rea:

; 506  :                     do {
; 507  :                         if (n >= PyBytes_GET_SIZE(readahead))

  00291	48 8b 44 24 58	 mov	 rax, QWORD PTR readahead$20828[rsp]
  00296	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0029a	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  002a0	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  002a5	85 c0		 test	 eax, eax
  002a7	75 1c		 jne	 SHORT $LN35@iobase_rea
  002a9	41 b8 fb 01 00
	00		 mov	 r8d, 507		; 000001fbH
  002af	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@FEGNDKOF@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAi?$AAo?$AAb?$AAa?$AAs?$AAe?$AA?4?$AAc?$AA?$AA@
  002b6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DC@OBGMKGAF@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAr?$AAe?$AAa?$AAd?$AAa?$AAh?$AAe?$AAa?$AAd?$AA?$CJ?$AA?$AA@
  002bd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  002c3	33 c0		 xor	 eax, eax
$LN35@iobase_rea:
  002c5	48 8b 44 24 58	 mov	 rax, QWORD PTR readahead$20828[rsp]
  002ca	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  002ce	48 39 44 24 60	 cmp	 QWORD PTR n$20844[rsp], rax
  002d3	7c 02		 jl	 SHORT $LN7@iobase_rea

; 508  :                             break;

  002d5	eb 2e		 jmp	 SHORT $LN8@iobase_rea
$LN7@iobase_rea:

; 509  :                         if (buf[n++] == '\n')

  002d7	48 8b 44 24 60	 mov	 rax, QWORD PTR n$20844[rsp]
  002dc	48 8b 4c 24 68	 mov	 rcx, QWORD PTR buf$20845[rsp]
  002e1	48 03 c8	 add	 rcx, rax
  002e4	48 8b c1	 mov	 rax, rcx
  002e7	0f be 00	 movsx	 eax, BYTE PTR [rax]
  002ea	48 8b 4c 24 60	 mov	 rcx, QWORD PTR n$20844[rsp]
  002ef	48 ff c1	 inc	 rcx
  002f2	48 89 4c 24 60	 mov	 QWORD PTR n$20844[rsp], rcx
  002f7	83 f8 0a	 cmp	 eax, 10
  002fa	75 02		 jne	 SHORT $LN6@iobase_rea

; 510  :                             break;

  002fc	eb 07		 jmp	 SHORT $LN8@iobase_rea
$LN6@iobase_rea:

; 511  :                     } while (1);

  002fe	33 c0		 xor	 eax, eax
  00300	83 f8 01	 cmp	 eax, 1
  00303	75 8c		 jne	 SHORT $LN10@iobase_rea
$LN8@iobase_rea:
$LN11@iobase_rea:

; 512  :                 }
; 513  :                 nreadahead = n;

  00305	48 8b 44 24 60	 mov	 rax, QWORD PTR n$20844[rsp]
  0030a	48 89 44 24 48	 mov	 QWORD PTR nreadahead$20825[rsp], rax
$LN19@iobase_rea:

; 514  :             }
; 515  :             Py_DECREF(readahead);

  0030f	48 8b 4c 24 58	 mov	 rcx, QWORD PTR readahead$20828[rsp]
  00314	e8 00 00 00 00	 call	 _Py_DecRef
$LN23@iobase_rea:

; 516  :         }
; 517  : 
; 518  :         b = _PyObject_CallMethodId(self, &PyId_read, "n", nreadahead);

  00319	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId_read@?1??iobase_readline@@9@9
  0031e	8b c0		 mov	 eax, eax
  00320	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00326	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0032f	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00333	4c 8b 4c 24 48	 mov	 r9, QWORD PTR nreadahead$20825[rsp]
  00338	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01EFFIKLCJ@n?$AA@
  0033f	48 8b d0	 mov	 rdx, rax
  00342	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  0034a	e8 00 00 00 00	 call	 _PyObject_CallMethodId_SizeT
  0034f	48 89 44 24 50	 mov	 QWORD PTR b$20826[rsp], rax

; 519  :         if (b == NULL) {

  00354	48 83 7c 24 50
	00		 cmp	 QWORD PTR b$20826[rsp], 0
  0035a	75 13		 jne	 SHORT $LN5@iobase_rea

; 520  :             /* NOTE: PyErr_SetFromErrno() calls PyErr_CheckSignals()
; 521  :                when EINTR occurs so we needn't do it ourselves. */
; 522  :             if (_PyIO_trap_eintr()) {

  0035c	e8 00 00 00 00	 call	 _PyIO_trap_eintr
  00361	85 c0		 test	 eax, eax
  00363	74 05		 je	 SHORT $LN4@iobase_rea

; 523  :                 continue;

  00365	e9 3f fd ff ff	 jmp	 $LN52@iobase_rea
$LN4@iobase_rea:

; 524  :             }
; 525  :             goto fail;

  0036a	e9 11 04 00 00	 jmp	 $fail$20833
$LN5@iobase_rea:

; 526  :         }
; 527  :         if (!PyBytes_Check(b)) {

  0036f	48 8b 44 24 50	 mov	 rax, QWORD PTR b$20826[rsp]
  00374	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00378	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0037e	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  00383	85 c0		 test	 eax, eax
  00385	75 2f		 jne	 SHORT $LN3@iobase_rea

; 528  :             PyErr_Format(PyExc_IOError,
; 529  :                          "read() should have returned a bytes object, "
; 530  :                          "not '%.200s'", Py_TYPE(b)->tp_name);

  00387	48 8b 44 24 50	 mov	 rax, QWORD PTR b$20826[rsp]
  0038c	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00390	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  00394	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DJ@GENNMCJH@read?$CI?$CJ?5should?5have?5returned?5a?5by@
  0039b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_IOError
  003a2	e8 00 00 00 00	 call	 PyErr_Format

; 531  :             Py_DECREF(b);

  003a7	48 8b 4c 24 50	 mov	 rcx, QWORD PTR b$20826[rsp]
  003ac	e8 00 00 00 00	 call	 _Py_DecRef

; 532  :             goto fail;

  003b1	e9 ca 03 00 00	 jmp	 $fail$20833
$LN3@iobase_rea:

; 533  :         }
; 534  :         if (PyBytes_GET_SIZE(b) == 0) {

  003b6	48 8b 44 24 50	 mov	 rax, QWORD PTR b$20826[rsp]
  003bb	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  003bf	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  003c5	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  003ca	85 c0		 test	 eax, eax
  003cc	75 1c		 jne	 SHORT $LN36@iobase_rea
  003ce	41 b8 16 02 00
	00		 mov	 r8d, 534		; 00000216H
  003d4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@FEGNDKOF@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAi?$AAo?$AAb?$AAa?$AAs?$AAe?$AA?4?$AAc?$AA?$AA@
  003db	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CC@DHEDCFGE@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AA?$CJ?$AA?$AA@
  003e2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  003e8	33 c0		 xor	 eax, eax
$LN36@iobase_rea:
  003ea	48 8b 44 24 50	 mov	 rax, QWORD PTR b$20826[rsp]
  003ef	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  003f4	75 0f		 jne	 SHORT $LN2@iobase_rea

; 535  :             Py_DECREF(b);

  003f6	48 8b 4c 24 50	 mov	 rcx, QWORD PTR b$20826[rsp]
  003fb	e8 00 00 00 00	 call	 _Py_DecRef

; 536  :             break;

  00400	e9 90 02 00 00	 jmp	 $LN25@iobase_rea
$LN2@iobase_rea:

; 537  :         }
; 538  : 
; 539  :         old_size = PyByteArray_GET_SIZE(buffer);

  00405	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyByteArray_Type
  0040c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR buffer$[rsp]
  00411	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00415	74 35		 je	 SHORT $LN37@iobase_rea
  00417	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyByteArray_Type
  0041e	48 8b 44 24 40	 mov	 rax, QWORD PTR buffer$[rsp]
  00423	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  00427	e8 00 00 00 00	 call	 PyType_IsSubtype
  0042c	85 c0		 test	 eax, eax
  0042e	75 1c		 jne	 SHORT $LN37@iobase_rea
  00430	41 b8 1b 02 00
	00		 mov	 r8d, 539		; 0000021bH
  00436	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@FEGNDKOF@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAi?$AAo?$AAb?$AAa?$AAs?$AAe?$AA?4?$AAc?$AA?$AA@
  0043d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@JJDIKLDM@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?$CJ?$AA?$AA@
  00444	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0044a	33 c0		 xor	 eax, eax
$LN37@iobase_rea:
  0044c	48 8b 44 24 40	 mov	 rax, QWORD PTR buffer$[rsp]
  00451	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00455	48 89 44 24 20	 mov	 QWORD PTR old_size$[rsp], rax

; 540  :         PyByteArray_Resize(buffer, old_size + PyBytes_GET_SIZE(b));

  0045a	48 8b 44 24 50	 mov	 rax, QWORD PTR b$20826[rsp]
  0045f	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00463	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00469	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  0046e	85 c0		 test	 eax, eax
  00470	75 1c		 jne	 SHORT $LN38@iobase_rea
  00472	41 b8 1c 02 00
	00		 mov	 r8d, 540		; 0000021cH
  00478	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@FEGNDKOF@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAi?$AAo?$AAb?$AAa?$AAs?$AAe?$AA?4?$AAc?$AA?$AA@
  0047f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CC@DHEDCFGE@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AA?$CJ?$AA?$AA@
  00486	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0048c	33 c0		 xor	 eax, eax
$LN38@iobase_rea:
  0048e	48 8b 44 24 50	 mov	 rax, QWORD PTR b$20826[rsp]
  00493	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00497	48 8b 4c 24 20	 mov	 rcx, QWORD PTR old_size$[rsp]
  0049c	48 03 c8	 add	 rcx, rax
  0049f	48 8b c1	 mov	 rax, rcx
  004a2	48 8b d0	 mov	 rdx, rax
  004a5	48 8b 4c 24 40	 mov	 rcx, QWORD PTR buffer$[rsp]
  004aa	e8 00 00 00 00	 call	 PyByteArray_Resize

; 541  :         memcpy(PyByteArray_AS_STRING(buffer) + old_size,
; 542  :                PyBytes_AS_STRING(b), PyBytes_GET_SIZE(b));

  004af	48 8b 44 24 50	 mov	 rax, QWORD PTR b$20826[rsp]
  004b4	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  004b8	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  004be	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  004c3	85 c0		 test	 eax, eax
  004c5	75 1c		 jne	 SHORT $LN39@iobase_rea
  004c7	41 b8 1e 02 00
	00		 mov	 r8d, 542		; 0000021eH
  004cd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@FEGNDKOF@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAi?$AAo?$AAb?$AAa?$AAs?$AAe?$AA?4?$AAc?$AA?$AA@
  004d4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CC@DHEDCFGE@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AA?$CJ?$AA?$AA@
  004db	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  004e1	33 c0		 xor	 eax, eax
$LN39@iobase_rea:
  004e3	48 8b 44 24 50	 mov	 rax, QWORD PTR b$20826[rsp]
  004e8	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  004ec	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  004f2	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  004f7	85 c0		 test	 eax, eax
  004f9	75 1c		 jne	 SHORT $LN40@iobase_rea
  004fb	41 b8 1e 02 00
	00		 mov	 r8d, 542		; 0000021eH
  00501	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@FEGNDKOF@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAi?$AAo?$AAb?$AAa?$AAs?$AAe?$AA?4?$AAc?$AA?$AA@
  00508	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CC@DHEDCFGE@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AA?$CJ?$AA?$AA@
  0050f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00515	33 c0		 xor	 eax, eax
$LN40@iobase_rea:
  00517	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyByteArray_Type
  0051e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR buffer$[rsp]
  00523	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00527	74 35		 je	 SHORT $LN41@iobase_rea
  00529	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyByteArray_Type
  00530	48 8b 44 24 40	 mov	 rax, QWORD PTR buffer$[rsp]
  00535	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  00539	e8 00 00 00 00	 call	 PyType_IsSubtype
  0053e	85 c0		 test	 eax, eax
  00540	75 1c		 jne	 SHORT $LN41@iobase_rea
  00542	41 b8 1d 02 00
	00		 mov	 r8d, 541		; 0000021dH
  00548	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@FEGNDKOF@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAi?$AAo?$AAb?$AAa?$AAs?$AAe?$AA?4?$AAc?$AA?$AA@
  0054f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@JJDIKLDM@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?$CJ?$AA?$AA@
  00556	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0055c	33 c0		 xor	 eax, eax
$LN41@iobase_rea:
  0055e	48 8b 44 24 40	 mov	 rax, QWORD PTR buffer$[rsp]
  00563	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00568	74 13		 je	 SHORT $LN42@iobase_rea
  0056a	48 8b 44 24 40	 mov	 rax, QWORD PTR buffer$[rsp]
  0056f	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  00576	48 89 44 24 70	 mov	 QWORD PTR tv290[rsp], rax
  0057b	eb 0c		 jmp	 SHORT $LN43@iobase_rea
$LN42@iobase_rea:
  0057d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyByteArray_empty_string
  00584	48 89 44 24 70	 mov	 QWORD PTR tv290[rsp], rax
$LN43@iobase_rea:
  00589	48 8b 44 24 50	 mov	 rax, QWORD PTR b$20826[rsp]
  0058e	48 83 c0 78	 add	 rax, 120		; 00000078H
  00592	48 8b 4c 24 20	 mov	 rcx, QWORD PTR old_size$[rsp]
  00597	48 8b 54 24 70	 mov	 rdx, QWORD PTR tv290[rsp]
  0059c	48 03 d1	 add	 rdx, rcx
  0059f	48 8b ca	 mov	 rcx, rdx
  005a2	48 8b 54 24 50	 mov	 rdx, QWORD PTR b$20826[rsp]
  005a7	4c 8b 42 60	 mov	 r8, QWORD PTR [rdx+96]
  005ab	48 8b d0	 mov	 rdx, rax
  005ae	e8 00 00 00 00	 call	 memcpy

; 543  : 
; 544  :         Py_DECREF(b);

  005b3	48 8b 4c 24 50	 mov	 rcx, QWORD PTR b$20826[rsp]
  005b8	e8 00 00 00 00	 call	 _Py_DecRef

; 545  : 
; 546  :         if (PyByteArray_AS_STRING(buffer)[PyByteArray_GET_SIZE(buffer) - 1] == '\n')

  005bd	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyByteArray_Type
  005c4	48 8b 4c 24 40	 mov	 rcx, QWORD PTR buffer$[rsp]
  005c9	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  005cd	74 35		 je	 SHORT $LN44@iobase_rea
  005cf	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyByteArray_Type
  005d6	48 8b 44 24 40	 mov	 rax, QWORD PTR buffer$[rsp]
  005db	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  005df	e8 00 00 00 00	 call	 PyType_IsSubtype
  005e4	85 c0		 test	 eax, eax
  005e6	75 1c		 jne	 SHORT $LN44@iobase_rea
  005e8	41 b8 22 02 00
	00		 mov	 r8d, 546		; 00000222H
  005ee	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@FEGNDKOF@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAi?$AAo?$AAb?$AAa?$AAs?$AAe?$AA?4?$AAc?$AA?$AA@
  005f5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@JJDIKLDM@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?$CJ?$AA?$AA@
  005fc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00602	33 c0		 xor	 eax, eax
$LN44@iobase_rea:
  00604	48 8b 44 24 40	 mov	 rax, QWORD PTR buffer$[rsp]
  00609	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  0060e	74 13		 je	 SHORT $LN45@iobase_rea
  00610	48 8b 44 24 40	 mov	 rax, QWORD PTR buffer$[rsp]
  00615	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  0061c	48 89 44 24 78	 mov	 QWORD PTR tv307[rsp], rax
  00621	eb 0c		 jmp	 SHORT $LN46@iobase_rea
$LN45@iobase_rea:
  00623	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyByteArray_empty_string
  0062a	48 89 44 24 78	 mov	 QWORD PTR tv307[rsp], rax
$LN46@iobase_rea:
  0062f	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyByteArray_Type
  00636	48 8b 4c 24 40	 mov	 rcx, QWORD PTR buffer$[rsp]
  0063b	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0063f	74 35		 je	 SHORT $LN47@iobase_rea
  00641	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyByteArray_Type
  00648	48 8b 44 24 40	 mov	 rax, QWORD PTR buffer$[rsp]
  0064d	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  00651	e8 00 00 00 00	 call	 PyType_IsSubtype
  00656	85 c0		 test	 eax, eax
  00658	75 1c		 jne	 SHORT $LN47@iobase_rea
  0065a	41 b8 22 02 00
	00		 mov	 r8d, 546		; 00000222H
  00660	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@FEGNDKOF@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAi?$AAo?$AAb?$AAa?$AAs?$AAe?$AA?4?$AAc?$AA?$AA@
  00667	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@JJDIKLDM@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?$CJ?$AA?$AA@
  0066e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00674	33 c0		 xor	 eax, eax
$LN47@iobase_rea:
  00676	48 8b 44 24 40	 mov	 rax, QWORD PTR buffer$[rsp]
  0067b	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0067f	48 8b 4c 24 78	 mov	 rcx, QWORD PTR tv307[rsp]
  00684	0f be 44 01 ff	 movsx	 eax, BYTE PTR [rcx+rax-1]
  00689	83 f8 0a	 cmp	 eax, 10
  0068c	75 02		 jne	 SHORT $LN1@iobase_rea

; 547  :             break;

  0068e	eb 05		 jmp	 SHORT $LN25@iobase_rea
$LN1@iobase_rea:

; 548  :     }

  00690	e9 14 fa ff ff	 jmp	 $LN53@iobase_rea
$LN25@iobase_rea:

; 549  : 
; 550  :     result = PyBytes_FromStringAndSize(PyByteArray_AS_STRING(buffer),
; 551  :                                        PyByteArray_GET_SIZE(buffer));

  00695	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyByteArray_Type
  0069c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR buffer$[rsp]
  006a1	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  006a5	74 35		 je	 SHORT $LN48@iobase_rea
  006a7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyByteArray_Type
  006ae	48 8b 44 24 40	 mov	 rax, QWORD PTR buffer$[rsp]
  006b3	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  006b7	e8 00 00 00 00	 call	 PyType_IsSubtype
  006bc	85 c0		 test	 eax, eax
  006be	75 1c		 jne	 SHORT $LN48@iobase_rea
  006c0	41 b8 27 02 00
	00		 mov	 r8d, 551		; 00000227H
  006c6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@FEGNDKOF@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAi?$AAo?$AAb?$AAa?$AAs?$AAe?$AA?4?$AAc?$AA?$AA@
  006cd	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@JJDIKLDM@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?$CJ?$AA?$AA@
  006d4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  006da	33 c0		 xor	 eax, eax
$LN48@iobase_rea:
  006dc	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyByteArray_Type
  006e3	48 8b 4c 24 40	 mov	 rcx, QWORD PTR buffer$[rsp]
  006e8	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  006ec	74 35		 je	 SHORT $LN49@iobase_rea
  006ee	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyByteArray_Type
  006f5	48 8b 44 24 40	 mov	 rax, QWORD PTR buffer$[rsp]
  006fa	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  006fe	e8 00 00 00 00	 call	 PyType_IsSubtype
  00703	85 c0		 test	 eax, eax
  00705	75 1c		 jne	 SHORT $LN49@iobase_rea
  00707	41 b8 26 02 00
	00		 mov	 r8d, 550		; 00000226H
  0070d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@FEGNDKOF@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAi?$AAo?$AAb?$AAa?$AAs?$AAe?$AA?4?$AAc?$AA?$AA@
  00714	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@JJDIKLDM@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAA?$AAr?$AAr?$AAa?$AAy?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAb?$AAu?$AAf?$AAf?$AAe?$AAr?$AA?$CJ?$AA?$AA@
  0071b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00721	33 c0		 xor	 eax, eax
$LN49@iobase_rea:
  00723	48 8b 44 24 40	 mov	 rax, QWORD PTR buffer$[rsp]
  00728	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  0072d	74 16		 je	 SHORT $LN50@iobase_rea
  0072f	48 8b 44 24 40	 mov	 rax, QWORD PTR buffer$[rsp]
  00734	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  0073b	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv352[rsp], rax
  00743	eb 0f		 jmp	 SHORT $LN51@iobase_rea
$LN50@iobase_rea:
  00745	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_PyByteArray_empty_string
  0074c	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv352[rsp], rax
$LN51@iobase_rea:
  00754	48 8b 44 24 40	 mov	 rax, QWORD PTR buffer$[rsp]
  00759	48 8b 50 60	 mov	 rdx, QWORD PTR [rax+96]
  0075d	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR tv352[rsp]
  00765	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  0076a	48 89 44 24 30	 mov	 QWORD PTR result$[rsp], rax

; 552  :     Py_DECREF(buffer);

  0076f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR buffer$[rsp]
  00774	e8 00 00 00 00	 call	 _Py_DecRef

; 553  :     return result;

  00779	48 8b 44 24 30	 mov	 rax, QWORD PTR result$[rsp]
  0077e	eb 0c		 jmp	 SHORT $LN30@iobase_rea
$fail$20833:

; 554  :   fail:
; 555  :     Py_DECREF(buffer);

  00780	48 8b 4c 24 40	 mov	 rcx, QWORD PTR buffer$[rsp]
  00785	e8 00 00 00 00	 call	 _Py_DecRef

; 556  :     return NULL;

  0078a	33 c0		 xor	 eax, eax
$LN30@iobase_rea:

; 557  : }

  0078c	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  00793	c3		 ret	 0
iobase_readline ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$iobase_iter DD imagerel iobase_iter
	DD	imagerel iobase_iter+55
	DD	imagerel $unwind$iobase_iter
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$iobase_iter DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT iobase_iter
_TEXT	SEGMENT
self$ = 48
iobase_iter PROC					; COMDAT

; 561  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 562  :     if (_PyIOBase_check_closed(self, Py_True) == NULL)

  00009	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_Py_TrueStruct
  00010	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self$[rsp]
  00015	e8 00 00 00 00	 call	 _PyIOBase_check_closed
  0001a	48 85 c0	 test	 rax, rax
  0001d	75 04		 jne	 SHORT $LN1@iobase_ite

; 563  :         return NULL;

  0001f	33 c0		 xor	 eax, eax
  00021	eb 0f		 jmp	 SHORT $LN2@iobase_ite
$LN1@iobase_ite:

; 564  : 
; 565  :     Py_INCREF(self);

  00023	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self$[rsp]
  00028	e8 00 00 00 00	 call	 _Py_IncRef

; 566  :     return self;

  0002d	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
$LN2@iobase_ite:

; 567  : }

  00032	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00036	c3		 ret	 0
iobase_iter ENDP
_TEXT	ENDS
EXTRN	PyObject_Size:PROC
EXTRN	_PyIO_str_readline:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$iobase_iternext DD imagerel iobase_iternext
	DD	imagerel iobase_iternext+85
	DD	imagerel $unwind$iobase_iternext
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$iobase_iternext DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT iobase_iternext
_TEXT	SEGMENT
line$ = 32
self$ = 64
iobase_iternext PROC					; COMDAT

; 571  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 572  :     PyObject *line = PyObject_CallMethodObjArgs(self, _PyIO_str_readline, NULL);

  00009	45 33 c0	 xor	 r8d, r8d
  0000c	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR _PyIO_str_readline
  00013	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  00018	e8 00 00 00 00	 call	 PyObject_CallMethodObjArgs
  0001d	48 89 44 24 20	 mov	 QWORD PTR line$[rsp], rax

; 573  : 
; 574  :     if (line == NULL)

  00022	48 83 7c 24 20
	00		 cmp	 QWORD PTR line$[rsp], 0
  00028	75 04		 jne	 SHORT $LN2@iobase_ite@2

; 575  :         return NULL;

  0002a	33 c0		 xor	 eax, eax
  0002c	eb 22		 jmp	 SHORT $LN3@iobase_ite@2
$LN2@iobase_ite@2:

; 576  : 
; 577  :     if (PyObject_Size(line) == 0) {

  0002e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR line$[rsp]
  00033	e8 00 00 00 00	 call	 PyObject_Size
  00038	48 85 c0	 test	 rax, rax
  0003b	75 0e		 jne	 SHORT $LN1@iobase_ite@2

; 578  :         Py_DECREF(line);

  0003d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR line$[rsp]
  00042	e8 00 00 00 00	 call	 _Py_DecRef

; 579  :         return NULL;

  00047	33 c0		 xor	 eax, eax
  00049	eb 05		 jmp	 SHORT $LN3@iobase_ite@2
$LN1@iobase_ite@2:

; 580  :     }
; 581  : 
; 582  :     return line;

  0004b	48 8b 44 24 20	 mov	 rax, QWORD PTR line$[rsp]
$LN3@iobase_ite@2:

; 583  : }

  00050	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00054	c3		 ret	 0
iobase_iternext ENDP
_TEXT	ENDS
PUBLIC	??_C@_01MJMHLOMK@O?$AA@				; `string'
PUBLIC	??_C@_0O@LEPJKNAA@?$HMO?$CG?3readlines?$AA@	; `string'
EXTRN	PyList_Append:PROC
EXTRN	PyErr_Occurred:PROC
EXTRN	PyIter_Next:PROC
EXTRN	PyList_New:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$iobase_readlines DD imagerel iobase_readlines
	DD	imagerel iobase_readlines+378
	DD	imagerel $unwind$iobase_readlines
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$iobase_readlines DD 010e01H
	DD	0a20eH
xdata	ENDS
;	COMDAT ??_C@_01MJMHLOMK@O?$AA@
CONST	SEGMENT
??_C@_01MJMHLOMK@O?$AA@ DB 'O', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@LEPJKNAA@?$HMO?$CG?3readlines?$AA@
CONST	SEGMENT
??_C@_0O@LEPJKNAA@?$HMO?$CG?3readlines?$AA@ DB '|O&:readlines', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT iobase_readlines
_TEXT	SEGMENT
length$ = 32
result$ = 40
hint$ = 48
ret$20967 = 56
line$20977 = 64
self$ = 96
args$ = 104
iobase_readlines PROC					; COMDAT

; 594  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 595  :     Py_ssize_t hint = -1, length = 0;

  0000e	48 c7 44 24 30
	ff ff ff ff	 mov	 QWORD PTR hint$[rsp], -1
  00017	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR length$[rsp], 0

; 596  :     PyObject *result;
; 597  : 
; 598  :     if (!PyArg_ParseTuple(args, "|O&:readlines", &_PyIO_ConvertSsize_t, &hint)) {

  00020	4c 8d 4c 24 30	 lea	 r9, QWORD PTR hint$[rsp]
  00025	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:_PyIO_ConvertSsize_t
  0002c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0O@LEPJKNAA@?$HMO?$CG?3readlines?$AA@
  00033	48 8b 4c 24 68	 mov	 rcx, QWORD PTR args$[rsp]
  00038	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  0003d	85 c0		 test	 eax, eax
  0003f	75 07		 jne	 SHORT $LN11@iobase_rea@2

; 599  :         return NULL;

  00041	33 c0		 xor	 eax, eax
  00043	e9 2d 01 00 00	 jmp	 $LN12@iobase_rea@2
$LN11@iobase_rea@2:

; 600  :     }
; 601  : 
; 602  :     result = PyList_New(0);

  00048	33 c9		 xor	 ecx, ecx
  0004a	e8 00 00 00 00	 call	 PyList_New
  0004f	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax

; 603  :     if (result == NULL)

  00054	48 83 7c 24 28
	00		 cmp	 QWORD PTR result$[rsp], 0
  0005a	75 07		 jne	 SHORT $LN10@iobase_rea@2

; 604  :         return NULL;

  0005c	33 c0		 xor	 eax, eax
  0005e	e9 12 01 00 00	 jmp	 $LN12@iobase_rea@2
$LN10@iobase_rea@2:

; 605  : 
; 606  :     if (hint <= 0) {

  00063	48 83 7c 24 30
	00		 cmp	 QWORD PTR hint$[rsp], 0
  00069	7f 65		 jg	 SHORT $LN9@iobase_rea@2

; 607  :         /* XXX special-casing this made sense in the Python version in order
; 608  :            to remove the bytecode interpretation overhead, but it could
; 609  :            probably be removed here. */
; 610  :         _Py_IDENTIFIER(extend);
; 611  :         PyObject *ret = _PyObject_CallMethodId(result, &PyId_extend, "O", self);

  0006b	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId_extend@?3??iobase_readlines@@9@9
  00070	8b c0		 mov	 eax, eax
  00072	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00078	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00081	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  00085	4c 8b 4c 24 60	 mov	 r9, QWORD PTR self$[rsp]
  0008a	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01MJMHLOMK@O?$AA@
  00091	48 8b d0	 mov	 rdx, rax
  00094	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  00099	e8 00 00 00 00	 call	 _PyObject_CallMethodId_SizeT
  0009e	48 89 44 24 38	 mov	 QWORD PTR ret$20967[rsp], rax

; 612  : 
; 613  :         if (ret == NULL) {

  000a3	48 83 7c 24 38
	00		 cmp	 QWORD PTR ret$20967[rsp], 0
  000a9	75 11		 jne	 SHORT $LN8@iobase_rea@2

; 614  :             Py_DECREF(result);

  000ab	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  000b0	e8 00 00 00 00	 call	 _Py_DecRef

; 615  :             return NULL;

  000b5	33 c0		 xor	 eax, eax
  000b7	e9 b9 00 00 00	 jmp	 $LN12@iobase_rea@2
$LN8@iobase_rea@2:

; 616  :         }
; 617  :         Py_DECREF(ret);

  000bc	48 8b 4c 24 38	 mov	 rcx, QWORD PTR ret$20967[rsp]
  000c1	e8 00 00 00 00	 call	 _Py_DecRef

; 618  :         return result;

  000c6	48 8b 44 24 28	 mov	 rax, QWORD PTR result$[rsp]
  000cb	e9 a5 00 00 00	 jmp	 $LN12@iobase_rea@2
$LN9@iobase_rea@2:
$LN7@iobase_rea@2:

; 619  :     }
; 620  : 
; 621  :     while (1) {

  000d0	33 c0		 xor	 eax, eax
  000d2	83 f8 01	 cmp	 eax, 1
  000d5	0f 84 95 00 00
	00		 je	 $LN6@iobase_rea@2

; 622  :         PyObject *line = PyIter_Next(self);

  000db	48 8b 4c 24 60	 mov	 rcx, QWORD PTR self$[rsp]
  000e0	e8 00 00 00 00	 call	 PyIter_Next
  000e5	48 89 44 24 40	 mov	 QWORD PTR line$20977[rsp], rax

; 623  :         if (line == NULL) {

  000ea	48 83 7c 24 40
	00		 cmp	 QWORD PTR line$20977[rsp], 0
  000f0	75 1c		 jne	 SHORT $LN5@iobase_rea@2

; 624  :             if (PyErr_Occurred()) {

  000f2	e8 00 00 00 00	 call	 PyErr_Occurred
  000f7	48 85 c0	 test	 rax, rax
  000fa	74 10		 je	 SHORT $LN4@iobase_rea@2

; 625  :                 Py_DECREF(result);

  000fc	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  00101	e8 00 00 00 00	 call	 _Py_DecRef

; 626  :                 return NULL;

  00106	33 c0		 xor	 eax, eax
  00108	eb 6b		 jmp	 SHORT $LN12@iobase_rea@2

; 627  :             }
; 628  :             else

  0010a	eb 02		 jmp	 SHORT $LN3@iobase_rea@2
$LN4@iobase_rea@2:

; 629  :                 break; /* StopIteration raised */

  0010c	eb 62		 jmp	 SHORT $LN6@iobase_rea@2
$LN3@iobase_rea@2:
$LN5@iobase_rea@2:

; 630  :         }
; 631  : 
; 632  :         if (PyList_Append(result, line) < 0) {

  0010e	48 8b 54 24 40	 mov	 rdx, QWORD PTR line$20977[rsp]
  00113	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  00118	e8 00 00 00 00	 call	 PyList_Append
  0011d	85 c0		 test	 eax, eax
  0011f	7d 18		 jge	 SHORT $LN2@iobase_rea@2

; 633  :             Py_DECREF(line);

  00121	48 8b 4c 24 40	 mov	 rcx, QWORD PTR line$20977[rsp]
  00126	e8 00 00 00 00	 call	 _Py_DecRef

; 634  :             Py_DECREF(result);

  0012b	48 8b 4c 24 28	 mov	 rcx, QWORD PTR result$[rsp]
  00130	e8 00 00 00 00	 call	 _Py_DecRef

; 635  :             return NULL;

  00135	33 c0		 xor	 eax, eax
  00137	eb 3c		 jmp	 SHORT $LN12@iobase_rea@2
$LN2@iobase_rea@2:

; 636  :         }
; 637  :         length += PyObject_Size(line);

  00139	48 8b 4c 24 40	 mov	 rcx, QWORD PTR line$20977[rsp]
  0013e	e8 00 00 00 00	 call	 PyObject_Size
  00143	48 8b 4c 24 20	 mov	 rcx, QWORD PTR length$[rsp]
  00148	48 03 c8	 add	 rcx, rax
  0014b	48 8b c1	 mov	 rax, rcx
  0014e	48 89 44 24 20	 mov	 QWORD PTR length$[rsp], rax

; 638  :         Py_DECREF(line);

  00153	48 8b 4c 24 40	 mov	 rcx, QWORD PTR line$20977[rsp]
  00158	e8 00 00 00 00	 call	 _Py_DecRef

; 639  : 
; 640  :         if (length > hint)

  0015d	48 8b 44 24 30	 mov	 rax, QWORD PTR hint$[rsp]
  00162	48 39 44 24 20	 cmp	 QWORD PTR length$[rsp], rax
  00167	7e 02		 jle	 SHORT $LN1@iobase_rea@2

; 641  :             break;

  00169	eb 05		 jmp	 SHORT $LN6@iobase_rea@2
$LN1@iobase_rea@2:

; 642  :     }

  0016b	e9 60 ff ff ff	 jmp	 $LN7@iobase_rea@2
$LN6@iobase_rea@2:

; 643  :     return result;

  00170	48 8b 44 24 28	 mov	 rax, QWORD PTR result$[rsp]
$LN12@iobase_rea@2:

; 644  : }

  00175	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00179	c3		 ret	 0
iobase_readlines ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@MKHKIDFH@O?3writelines?$AA@		; `string'
EXTRN	_PyIO_str_write:QWORD
EXTRN	PyObject_GetIter:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$iobase_writelines DD imagerel iobase_writelines
	DD	imagerel iobase_writelines+308
	DD	imagerel $unwind$iobase_writelines
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$iobase_writelines DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_0N@MKHKIDFH@O?3writelines?$AA@
CONST	SEGMENT
??_C@_0N@MKHKIDFH@O?3writelines?$AA@ DB 'O:writelines', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT iobase_writelines
_TEXT	SEGMENT
res$ = 32
iter$ = 40
lines$ = 48
line$21012 = 56
self$ = 80
args$ = 88
iobase_writelines PROC					; COMDAT

; 648  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 649  :     PyObject *lines, *iter, *res;
; 650  : 
; 651  :     if (!PyArg_ParseTuple(args, "O:writelines", &lines)) {

  0000e	4c 8d 44 24 30	 lea	 r8, QWORD PTR lines$[rsp]
  00013	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@MKHKIDFH@O?3writelines?$AA@
  0001a	48 8b 4c 24 58	 mov	 rcx, QWORD PTR args$[rsp]
  0001f	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  00024	85 c0		 test	 eax, eax
  00026	75 07		 jne	 SHORT $LN13@iobase_wri

; 652  :         return NULL;

  00028	33 c0		 xor	 eax, eax
  0002a	e9 00 01 00 00	 jmp	 $LN14@iobase_wri
$LN13@iobase_wri:

; 653  :     }
; 654  : 
; 655  :     if (_PyIOBase_check_closed(self, Py_True) == NULL)

  0002f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_Py_TrueStruct
  00036	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  0003b	e8 00 00 00 00	 call	 _PyIOBase_check_closed
  00040	48 85 c0	 test	 rax, rax
  00043	75 07		 jne	 SHORT $LN12@iobase_wri

; 656  :         return NULL;

  00045	33 c0		 xor	 eax, eax
  00047	e9 e3 00 00 00	 jmp	 $LN14@iobase_wri
$LN12@iobase_wri:

; 657  : 
; 658  :     iter = PyObject_GetIter(lines);

  0004c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR lines$[rsp]
  00051	e8 00 00 00 00	 call	 PyObject_GetIter
  00056	48 89 44 24 28	 mov	 QWORD PTR iter$[rsp], rax

; 659  :     if (iter == NULL)

  0005b	48 83 7c 24 28
	00		 cmp	 QWORD PTR iter$[rsp], 0
  00061	75 07		 jne	 SHORT $LN11@iobase_wri

; 660  :         return NULL;

  00063	33 c0		 xor	 eax, eax
  00065	e9 c5 00 00 00	 jmp	 $LN14@iobase_wri
$LN11@iobase_wri:
$LN10@iobase_wri:

; 661  : 
; 662  :     while (1) {

  0006a	33 c0		 xor	 eax, eax
  0006c	83 f8 01	 cmp	 eax, 1
  0006f	0f 84 9d 00 00
	00		 je	 $LN9@iobase_wri

; 663  :         PyObject *line = PyIter_Next(iter);

  00075	48 8b 4c 24 28	 mov	 rcx, QWORD PTR iter$[rsp]
  0007a	e8 00 00 00 00	 call	 PyIter_Next
  0007f	48 89 44 24 38	 mov	 QWORD PTR line$21012[rsp], rax

; 664  :         if (line == NULL) {

  00084	48 83 7c 24 38
	00		 cmp	 QWORD PTR line$21012[rsp], 0
  0008a	75 1f		 jne	 SHORT $LN8@iobase_wri

; 665  :             if (PyErr_Occurred()) {

  0008c	e8 00 00 00 00	 call	 PyErr_Occurred
  00091	48 85 c0	 test	 rax, rax
  00094	74 13		 je	 SHORT $LN7@iobase_wri

; 666  :                 Py_DECREF(iter);

  00096	48 8b 4c 24 28	 mov	 rcx, QWORD PTR iter$[rsp]
  0009b	e8 00 00 00 00	 call	 _Py_DecRef

; 667  :                 return NULL;

  000a0	33 c0		 xor	 eax, eax
  000a2	e9 88 00 00 00	 jmp	 $LN14@iobase_wri

; 668  :             }
; 669  :             else

  000a7	eb 02		 jmp	 SHORT $LN6@iobase_wri
$LN7@iobase_wri:

; 670  :                 break; /* Stop Iteration */

  000a9	eb 67		 jmp	 SHORT $LN9@iobase_wri
$LN6@iobase_wri:
$LN8@iobase_wri:

; 671  :         }
; 672  : 
; 673  :         res = NULL;

  000ab	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR res$[rsp], 0
$LN5@iobase_wri:

; 674  :         do {
; 675  :             res = PyObject_CallMethodObjArgs(self, _PyIO_str_write, line, NULL);

  000b4	45 33 c9	 xor	 r9d, r9d
  000b7	4c 8b 44 24 38	 mov	 r8, QWORD PTR line$21012[rsp]
  000bc	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR _PyIO_str_write
  000c3	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  000c8	e8 00 00 00 00	 call	 PyObject_CallMethodObjArgs
  000cd	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax

; 676  :         } while (res == NULL && _PyIO_trap_eintr());

  000d2	48 83 7c 24 20
	00		 cmp	 QWORD PTR res$[rsp], 0
  000d8	75 09		 jne	 SHORT $LN2@iobase_wri
  000da	e8 00 00 00 00	 call	 _PyIO_trap_eintr
  000df	85 c0		 test	 eax, eax
  000e1	75 d1		 jne	 SHORT $LN5@iobase_wri
$LN2@iobase_wri:

; 677  :         Py_DECREF(line);

  000e3	48 8b 4c 24 38	 mov	 rcx, QWORD PTR line$21012[rsp]
  000e8	e8 00 00 00 00	 call	 _Py_DecRef

; 678  :         if (res == NULL) {

  000ed	48 83 7c 24 20
	00		 cmp	 QWORD PTR res$[rsp], 0
  000f3	75 0e		 jne	 SHORT $LN1@iobase_wri

; 679  :             Py_DECREF(iter);

  000f5	48 8b 4c 24 28	 mov	 rcx, QWORD PTR iter$[rsp]
  000fa	e8 00 00 00 00	 call	 _Py_DecRef

; 680  :             return NULL;

  000ff	33 c0		 xor	 eax, eax
  00101	eb 2c		 jmp	 SHORT $LN14@iobase_wri
$LN1@iobase_wri:

; 681  :         }
; 682  :         Py_DECREF(res);

  00103	48 8b 4c 24 20	 mov	 rcx, QWORD PTR res$[rsp]
  00108	e8 00 00 00 00	 call	 _Py_DecRef

; 683  :     }

  0010d	e9 58 ff ff ff	 jmp	 $LN10@iobase_wri
$LN9@iobase_wri:

; 684  :     Py_DECREF(iter);

  00112	48 8b 4c 24 28	 mov	 rcx, QWORD PTR iter$[rsp]
  00117	e8 00 00 00 00	 call	 _Py_DecRef

; 685  :     Py_RETURN_NONE;

  0011c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00123	e8 00 00 00 00	 call	 _Py_IncRef
  00128	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
$LN14@iobase_wri:

; 686  : }

  0012f	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00133	c3		 ret	 0
iobase_writelines ENDP
_TEXT	ENDS
PUBLIC	??_C@_07NICEAMBA@?$HMn?3read?$AA@		; `string'
EXTRN	PyByteArray_AsString:PROC
EXTRN	PyNumber_AsSsize_t:PROC
EXTRN	_PyIO_str_readinto:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$rawiobase_read DD imagerel rawiobase_read
	DD	imagerel rawiobase_read+324
	DD	imagerel $unwind$rawiobase_read
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$rawiobase_read DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_07NICEAMBA@?$HMn?3read?$AA@
CONST	SEGMENT
??_C@_07NICEAMBA@?$HMn?3read?$AA@ DB '|n:read', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT rawiobase_read
_TEXT	SEGMENT
res$ = 32
n$ = 40
b$ = 48
self$ = 80
args$ = 88
rawiobase_read PROC					; COMDAT

; 787  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 788  :     Py_ssize_t n = -1;

  0000e	48 c7 44 24 28
	ff ff ff ff	 mov	 QWORD PTR n$[rsp], -1

; 789  :     PyObject *b, *res;
; 790  : 
; 791  :     if (!PyArg_ParseTuple(args, "|n:read", &n)) {

  00017	4c 8d 44 24 28	 lea	 r8, QWORD PTR n$[rsp]
  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_07NICEAMBA@?$HMn?3read?$AA@
  00023	48 8b 4c 24 58	 mov	 rcx, QWORD PTR args$[rsp]
  00028	e8 00 00 00 00	 call	 _PyArg_ParseTuple_SizeT
  0002d	85 c0		 test	 eax, eax
  0002f	75 07		 jne	 SHORT $LN6@rawiobase_

; 792  :         return NULL;

  00031	33 c0		 xor	 eax, eax
  00033	e9 07 01 00 00	 jmp	 $LN7@rawiobase_
$LN6@rawiobase_:

; 793  :     }
; 794  : 
; 795  :     if (n < 0) {

  00038	48 83 7c 24 28
	00		 cmp	 QWORD PTR n$[rsp], 0
  0003e	7d 2f		 jge	 SHORT $LN5@rawiobase_

; 796  :         _Py_IDENTIFIER(readall);
; 797  : 
; 798  :         return _PyObject_CallMethodId(self, &PyId_readall, NULL);

  00040	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId_readall@?3??rawiobase_read@@9@9
  00045	8b c0		 mov	 eax, eax
  00047	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  0004d	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  00056	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0005a	45 33 c0	 xor	 r8d, r8d
  0005d	48 8b d0	 mov	 rdx, rax
  00060	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  00065	e8 00 00 00 00	 call	 _PyObject_CallMethodId_SizeT
  0006a	e9 d0 00 00 00	 jmp	 $LN7@rawiobase_
$LN5@rawiobase_:

; 799  :     }
; 800  : 
; 801  :     /* TODO: allocate a bytes object directly instead and manually construct
; 802  :        a writable memoryview pointing to it. */
; 803  :     b = PyByteArray_FromStringAndSize(NULL, n);

  0006f	48 8b 54 24 28	 mov	 rdx, QWORD PTR n$[rsp]
  00074	33 c9		 xor	 ecx, ecx
  00076	e8 00 00 00 00	 call	 PyByteArray_FromStringAndSize
  0007b	48 89 44 24 30	 mov	 QWORD PTR b$[rsp], rax

; 804  :     if (b == NULL)

  00080	48 83 7c 24 30
	00		 cmp	 QWORD PTR b$[rsp], 0
  00086	75 07		 jne	 SHORT $LN4@rawiobase_

; 805  :         return NULL;

  00088	33 c0		 xor	 eax, eax
  0008a	e9 b0 00 00 00	 jmp	 $LN7@rawiobase_
$LN4@rawiobase_:

; 806  : 
; 807  :     res = PyObject_CallMethodObjArgs(self, _PyIO_str_readinto, b, NULL);

  0008f	45 33 c9	 xor	 r9d, r9d
  00092	4c 8b 44 24 30	 mov	 r8, QWORD PTR b$[rsp]
  00097	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR _PyIO_str_readinto
  0009e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  000a3	e8 00 00 00 00	 call	 PyObject_CallMethodObjArgs
  000a8	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax

; 808  :     if (res == NULL || res == Py_None) {

  000ad	48 83 7c 24 20
	00		 cmp	 QWORD PTR res$[rsp], 0
  000b3	74 0e		 je	 SHORT $LN2@rawiobase_
  000b5	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000bc	48 39 44 24 20	 cmp	 QWORD PTR res$[rsp], rax
  000c1	75 11		 jne	 SHORT $LN3@rawiobase_
$LN2@rawiobase_:

; 809  :         Py_DECREF(b);

  000c3	48 8b 4c 24 30	 mov	 rcx, QWORD PTR b$[rsp]
  000c8	e8 00 00 00 00	 call	 _Py_DecRef

; 810  :         return res;

  000cd	48 8b 44 24 20	 mov	 rax, QWORD PTR res$[rsp]
  000d2	eb 6b		 jmp	 SHORT $LN7@rawiobase_
$LN3@rawiobase_:

; 811  :     }
; 812  : 
; 813  :     n = PyNumber_AsSsize_t(res, PyExc_ValueError);

  000d4	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR PyExc_ValueError
  000db	48 8b 4c 24 20	 mov	 rcx, QWORD PTR res$[rsp]
  000e0	e8 00 00 00 00	 call	 PyNumber_AsSsize_t
  000e5	48 89 44 24 28	 mov	 QWORD PTR n$[rsp], rax

; 814  :     Py_DECREF(res);

  000ea	48 8b 4c 24 20	 mov	 rcx, QWORD PTR res$[rsp]
  000ef	e8 00 00 00 00	 call	 _Py_DecRef

; 815  :     if (n == -1 && PyErr_Occurred()) {

  000f4	48 83 7c 24 28
	ff		 cmp	 QWORD PTR n$[rsp], -1
  000fa	75 18		 jne	 SHORT $LN1@rawiobase_
  000fc	e8 00 00 00 00	 call	 PyErr_Occurred
  00101	48 85 c0	 test	 rax, rax
  00104	74 0e		 je	 SHORT $LN1@rawiobase_

; 816  :         Py_DECREF(b);

  00106	48 8b 4c 24 30	 mov	 rcx, QWORD PTR b$[rsp]
  0010b	e8 00 00 00 00	 call	 _Py_DecRef

; 817  :         return NULL;

  00110	33 c0		 xor	 eax, eax
  00112	eb 2b		 jmp	 SHORT $LN7@rawiobase_
$LN1@rawiobase_:

; 818  :     }
; 819  : 
; 820  :     res = PyBytes_FromStringAndSize(PyByteArray_AsString(b), n);

  00114	48 8b 4c 24 30	 mov	 rcx, QWORD PTR b$[rsp]
  00119	e8 00 00 00 00	 call	 PyByteArray_AsString
  0011e	48 8b 54 24 28	 mov	 rdx, QWORD PTR n$[rsp]
  00123	48 8b c8	 mov	 rcx, rax
  00126	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  0012b	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax

; 821  :     Py_DECREF(b);

  00130	48 8b 4c 24 30	 mov	 rcx, QWORD PTR b$[rsp]
  00135	e8 00 00 00 00	 call	 _Py_DecRef

; 822  :     return res;

  0013a	48 8b 44 24 20	 mov	 rax, QWORD PTR res$[rsp]
$LN7@rawiobase_:

; 823  : }

  0013f	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00143	c3		 ret	 0
rawiobase_read ENDP
_TEXT	ENDS
PUBLIC	??_C@_1CI@GGBJKIGL@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAd?$AAa?$AAt?$AAa?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_0BL@LFIKHDFM@read?$CI?$CJ?5should?5return?5bytes?$AA@ ; `string'
EXTRN	_PyBytes_Join:PROC
EXTRN	_PyIO_empty_bytes:QWORD
EXTRN	PyExc_TypeError:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$rawiobase_readall DD imagerel rawiobase_readall
	DD	imagerel rawiobase_readall+449
	DD	imagerel $unwind$rawiobase_readall
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$rawiobase_readall DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_1CI@GGBJKIGL@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAd?$AAa?$AAt?$AAa?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CI@GGBJKIGL@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAd?$AAa?$AAt?$AAa?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 's', 00H
	DB	'_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, '('
	DB	00H, 'd', 00H, 'a', 00H, 't', 00H, 'a', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@LFIKHDFM@read?$CI?$CJ?5should?5return?5bytes?$AA@
CONST	SEGMENT
??_C@_0BL@LFIKHDFM@read?$CI?$CJ?5should?5return?5bytes?$AA@ DB 'read() sh'
	DB	'ould return bytes', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT rawiobase_readall
_TEXT	SEGMENT
chunks$ = 32
result$ = 40
r$ = 48
data$21136 = 56
self$ = 80
args$ = 88
rawiobase_readall PROC					; COMDAT

; 831  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 832  :     int r;
; 833  :     PyObject *chunks = PyList_New(0);

  0000e	33 c9		 xor	 ecx, ecx
  00010	e8 00 00 00 00	 call	 PyList_New
  00015	48 89 44 24 20	 mov	 QWORD PTR chunks$[rsp], rax

; 834  :     PyObject *result;
; 835  :     
; 836  :     if (chunks == NULL)

  0001a	48 83 7c 24 20
	00		 cmp	 QWORD PTR chunks$[rsp], 0
  00020	75 07		 jne	 SHORT $LN10@rawiobase_@2

; 837  :         return NULL;

  00022	33 c0		 xor	 eax, eax
  00024	e9 93 01 00 00	 jmp	 $LN11@rawiobase_@2
$LN10@rawiobase_@2:
$LN14@rawiobase_@2:
$LN9@rawiobase_@2:

; 838  : 
; 839  :     while (1) {

  00029	33 c0		 xor	 eax, eax
  0002b	83 f8 01	 cmp	 eax, 1
  0002e	0f 84 63 01 00
	00		 je	 $LN8@rawiobase_@2

; 840  :         _Py_IDENTIFIER(read);
; 841  :         PyObject *data = _PyObject_CallMethodId(self, &PyId_read,
; 842  :                                                 "i", DEFAULT_BUFFER_SIZE);

  00034	b8 00 00 00 00	 mov	 eax, OFFSET FLAT:?PyId_read@?2??rawiobase_readall@@9@9
  00039	8b c0		 mov	 eax, eax
  0003b	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _tls_index
  00041	65 48 8b 14 25
	58 00 00 00	 mov	 rdx, QWORD PTR gs:88
  0004a	48 03 04 ca	 add	 rax, QWORD PTR [rdx+rcx*8]
  0004e	41 b9 00 20 00
	00		 mov	 r9d, 8192		; 00002000H
  00054	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_01KBJDNOO@i?$AA@
  0005b	48 8b d0	 mov	 rdx, rax
  0005e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  00063	e8 00 00 00 00	 call	 _PyObject_CallMethodId_SizeT
  00068	48 89 44 24 38	 mov	 QWORD PTR data$21136[rsp], rax

; 843  :         if (!data) {

  0006d	48 83 7c 24 38
	00		 cmp	 QWORD PTR data$21136[rsp], 0
  00073	75 1c		 jne	 SHORT $LN7@rawiobase_@2

; 844  :             /* NOTE: PyErr_SetFromErrno() calls PyErr_CheckSignals()
; 845  :                when EINTR occurs so we needn't do it ourselves. */
; 846  :             if (_PyIO_trap_eintr()) {

  00075	e8 00 00 00 00	 call	 _PyIO_trap_eintr
  0007a	85 c0		 test	 eax, eax
  0007c	74 02		 je	 SHORT $LN6@rawiobase_@2

; 847  :                 continue;

  0007e	eb a9		 jmp	 SHORT $LN9@rawiobase_@2
$LN6@rawiobase_@2:

; 848  :             }
; 849  :             Py_DECREF(chunks);

  00080	48 8b 4c 24 20	 mov	 rcx, QWORD PTR chunks$[rsp]
  00085	e8 00 00 00 00	 call	 _Py_DecRef

; 850  :             return NULL;

  0008a	33 c0		 xor	 eax, eax
  0008c	e9 2b 01 00 00	 jmp	 $LN11@rawiobase_@2
$LN7@rawiobase_@2:

; 851  :         }
; 852  :         if (data == Py_None) {

  00091	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00098	48 39 44 24 38	 cmp	 QWORD PTR data$21136[rsp], rax
  0009d	75 2f		 jne	 SHORT $LN5@rawiobase_@2

; 853  :             if (PyList_GET_SIZE(chunks) == 0) {

  0009f	48 8b 44 24 20	 mov	 rax, QWORD PTR chunks$[rsp]
  000a4	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  000a9	75 14		 jne	 SHORT $LN4@rawiobase_@2

; 854  :                 Py_DECREF(chunks);

  000ab	48 8b 4c 24 20	 mov	 rcx, QWORD PTR chunks$[rsp]
  000b0	e8 00 00 00 00	 call	 _Py_DecRef

; 855  :                 return data;

  000b5	48 8b 44 24 38	 mov	 rax, QWORD PTR data$21136[rsp]
  000ba	e9 fd 00 00 00	 jmp	 $LN11@rawiobase_@2
$LN4@rawiobase_@2:

; 856  :             }
; 857  :             Py_DECREF(data);

  000bf	48 8b 4c 24 38	 mov	 rcx, QWORD PTR data$21136[rsp]
  000c4	e8 00 00 00 00	 call	 _Py_DecRef

; 858  :             break;

  000c9	e9 c9 00 00 00	 jmp	 $LN8@rawiobase_@2
$LN5@rawiobase_@2:

; 859  :         }
; 860  :         if (!PyBytes_Check(data)) {

  000ce	48 8b 44 24 38	 mov	 rax, QWORD PTR data$21136[rsp]
  000d3	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000d7	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000dd	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  000e2	85 c0		 test	 eax, eax
  000e4	75 2e		 jne	 SHORT $LN3@rawiobase_@2

; 861  :             Py_DECREF(chunks);

  000e6	48 8b 4c 24 20	 mov	 rcx, QWORD PTR chunks$[rsp]
  000eb	e8 00 00 00 00	 call	 _Py_DecRef

; 862  :             Py_DECREF(data);

  000f0	48 8b 4c 24 38	 mov	 rcx, QWORD PTR data$21136[rsp]
  000f5	e8 00 00 00 00	 call	 _Py_DecRef

; 863  :             PyErr_SetString(PyExc_TypeError, "read() should return bytes");

  000fa	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BL@LFIKHDFM@read?$CI?$CJ?5should?5return?5bytes?$AA@
  00101	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00108	e8 00 00 00 00	 call	 PyErr_SetString

; 864  :             return NULL;

  0010d	33 c0		 xor	 eax, eax
  0010f	e9 a8 00 00 00	 jmp	 $LN11@rawiobase_@2
$LN3@rawiobase_@2:

; 865  :         }
; 866  :         if (PyBytes_GET_SIZE(data) == 0) {

  00114	48 8b 44 24 38	 mov	 rax, QWORD PTR data$21136[rsp]
  00119	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0011d	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00123	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  00128	85 c0		 test	 eax, eax
  0012a	75 1c		 jne	 SHORT $LN13@rawiobase_@2
  0012c	41 b8 62 03 00
	00		 mov	 r8d, 866		; 00000362H
  00132	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@FEGNDKOF@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAi?$AAo?$AA?2?$AAi?$AAo?$AAb?$AAa?$AAs?$AAe?$AA?4?$AAc?$AA?$AA@
  00139	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CI@GGBJKIGL@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAd?$AAa?$AAt?$AAa?$AA?$CJ?$AA?$AA@
  00140	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00146	33 c0		 xor	 eax, eax
$LN13@rawiobase_@2:
  00148	48 8b 44 24 38	 mov	 rax, QWORD PTR data$21136[rsp]
  0014d	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00152	75 0c		 jne	 SHORT $LN2@rawiobase_@2

; 867  :             /* EOF */
; 868  :             Py_DECREF(data);

  00154	48 8b 4c 24 38	 mov	 rcx, QWORD PTR data$21136[rsp]
  00159	e8 00 00 00 00	 call	 _Py_DecRef

; 869  :             break;

  0015e	eb 37		 jmp	 SHORT $LN8@rawiobase_@2
$LN2@rawiobase_@2:

; 870  :         }
; 871  :         r = PyList_Append(chunks, data);

  00160	48 8b 54 24 38	 mov	 rdx, QWORD PTR data$21136[rsp]
  00165	48 8b 4c 24 20	 mov	 rcx, QWORD PTR chunks$[rsp]
  0016a	e8 00 00 00 00	 call	 PyList_Append
  0016f	89 44 24 30	 mov	 DWORD PTR r$[rsp], eax

; 872  :         Py_DECREF(data);

  00173	48 8b 4c 24 38	 mov	 rcx, QWORD PTR data$21136[rsp]
  00178	e8 00 00 00 00	 call	 _Py_DecRef

; 873  :         if (r < 0) {

  0017d	83 7c 24 30 00	 cmp	 DWORD PTR r$[rsp], 0
  00182	7d 0e		 jge	 SHORT $LN1@rawiobase_@2

; 874  :             Py_DECREF(chunks);

  00184	48 8b 4c 24 20	 mov	 rcx, QWORD PTR chunks$[rsp]
  00189	e8 00 00 00 00	 call	 _Py_DecRef

; 875  :             return NULL;

  0018e	33 c0		 xor	 eax, eax
  00190	eb 2a		 jmp	 SHORT $LN11@rawiobase_@2
$LN1@rawiobase_@2:

; 876  :         }
; 877  :     }

  00192	e9 92 fe ff ff	 jmp	 $LN14@rawiobase_@2
$LN8@rawiobase_@2:

; 878  :     result = _PyBytes_Join(_PyIO_empty_bytes, chunks);

  00197	48 8b 54 24 20	 mov	 rdx, QWORD PTR chunks$[rsp]
  0019c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR _PyIO_empty_bytes
  001a3	e8 00 00 00 00	 call	 _PyBytes_Join
  001a8	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax

; 879  :     Py_DECREF(chunks);

  001ad	48 8b 4c 24 20	 mov	 rcx, QWORD PTR chunks$[rsp]
  001b2	e8 00 00 00 00	 call	 _Py_DecRef

; 880  :     return result;

  001b7	48 8b 44 24 28	 mov	 rax, QWORD PTR result$[rsp]
$LN11@rawiobase_@2:

; 881  : }

  001bc	48 83 c4 48	 add	 rsp, 72			; 00000048H
  001c0	c3		 ret	 0
rawiobase_readall ENDP
_TEXT	ENDS
END
