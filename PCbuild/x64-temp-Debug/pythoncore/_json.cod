; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_05KBBIEONE@_json?$AA@			; `string'
PUBLIC	??_C@_0L@KHOLHHPB@scanstring?$AA@		; `string'
PUBLIC	??_C@_0BI@DMGDCBIM@encode_basestring_ascii?$AA@	; `string'
PUBLIC	??_C@_0O@LGDFANJB@_json?4Encoder?$AA@		; `string'
PUBLIC	??_C@_0BG@KGHPPKCC@_current_indent_level?$AA@	; `string'
PUBLIC	??_C@_03GJLPFLNF@obj?$AA@			; `string'
PUBLIC	??_C@_09KHELABOC@allow_nan?$AA@			; `string'
PUBLIC	??_C@_0O@HCCDDMCC@_json?4Scanner?$AA@		; `string'
PUBLIC	??_C@_07JKKCBBMM@context?$AA@			; `string'
PUBLIC	??_C@_03DAKNAIGI@idx?$AA@			; `string'
PUBLIC	??_C@_06ICGJLFIM@string?$AA@			; `string'
PUBLIC	??_C@_08PFHNJENM@skipkeys?$AA@			; `string'
PUBLIC	??_C@_09DEHDAHBH@sort_keys?$AA@			; `string'
PUBLIC	??_C@_0P@HDLIMBKH@item_separator?$AA@		; `string'
PUBLIC	??_C@_0O@HOKELHBC@key_separator?$AA@		; `string'
PUBLIC	??_C@_06CHBDMLPJ@indent?$AA@			; `string'
PUBLIC	??_C@_07KLAMFGHC@encoder?$AA@			; `string'
PUBLIC	??_C@_07DLHCIBDH@default?$AA@			; `string'
PUBLIC	??_C@_07LGFKJAB@markers?$AA@			; `string'
PUBLIC	??_C@_0P@GDIKPOIP@parse_constant?$AA@		; `string'
PUBLIC	??_C@_09DPJPPPAP@parse_int?$AA@			; `string'
PUBLIC	??_C@_0M@KEFCOABD@parse_float?$AA@		; `string'
PUBLIC	??_C@_0BC@KHLDCHIO@object_pairs_hook?$AA@	; `string'
PUBLIC	??_C@_0M@LCHLLJKI@object_hook?$AA@		; `string'
PUBLIC	??_C@_06OLFOGHEN@strict?$AA@			; `string'
_BSS	SEGMENT
?sep@?1??join_list_unicode@@9@9 DQ 01H DUP (?)		; `join_list_unicode'::`2'::sep
?errmsg_fn@?1??raise_errmsg@@9@9 DQ 01H DUP (?)		; `raise_errmsg'::`2'::errmsg_fn
?s_null@?2??_encoded_const@@9@9 DQ 01H DUP (?)		; `_encoded_const'::`3'::s_null
?s_true@?4??_encoded_const@@9@9 DQ 01H DUP (?)		; `_encoded_const'::`5'::s_true
?s_false@?6??_encoded_const@@9@9 DQ 01H DUP (?)		; `_encoded_const'::`7'::s_false
?open_dict@?1??encoder_listencode_dict@@9@9 DQ 01H DUP (?) ; `encoder_listencode_dict'::`2'::open_dict
?close_dict@?1??encoder_listencode_dict@@9@9 DQ 01H DUP (?) ; `encoder_listencode_dict'::`2'::close_dict
?empty_dict@?1??encoder_listencode_dict@@9@9 DQ 01H DUP (?) ; `encoder_listencode_dict'::`2'::empty_dict
?open_array@?1??encoder_listencode_list@@9@9 DQ 01H DUP (?) ; `encoder_listencode_list'::`2'::open_array
?close_array@?1??encoder_listencode_list@@9@9 DQ 01H DUP (?) ; `encoder_listencode_list'::`2'::close_array
?empty_array@?1??encoder_listencode_list@@9@9 DQ 01H DUP (?) ; `encoder_listencode_list'::`2'::empty_array
_BSS	ENDS
;	COMDAT ??_C@_05KBBIEONE@_json?$AA@
CONST	SEGMENT
??_C@_05KBBIEONE@_json?$AA@ DB '_json', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@KHOLHHPB@scanstring?$AA@
CONST	SEGMENT
??_C@_0L@KHOLHHPB@scanstring?$AA@ DB 'scanstring', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@DMGDCBIM@encode_basestring_ascii?$AA@
CONST	SEGMENT
??_C@_0BI@DMGDCBIM@encode_basestring_ascii?$AA@ DB 'encode_basestring_asc'
	DB	'ii', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@LGDFANJB@_json?4Encoder?$AA@
CONST	SEGMENT
??_C@_0O@LGDFANJB@_json?4Encoder?$AA@ DB '_json.Encoder', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@KGHPPKCC@_current_indent_level?$AA@
CONST	SEGMENT
??_C@_0BG@KGHPPKCC@_current_indent_level?$AA@ DB '_current_indent_level', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03GJLPFLNF@obj?$AA@
CONST	SEGMENT
??_C@_03GJLPFLNF@obj?$AA@ DB 'obj', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09KHELABOC@allow_nan?$AA@
CONST	SEGMENT
??_C@_09KHELABOC@allow_nan?$AA@ DB 'allow_nan', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@HCCDDMCC@_json?4Scanner?$AA@
CONST	SEGMENT
??_C@_0O@HCCDDMCC@_json?4Scanner?$AA@ DB '_json.Scanner', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07JKKCBBMM@context?$AA@
CONST	SEGMENT
??_C@_07JKKCBBMM@context?$AA@ DB 'context', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03DAKNAIGI@idx?$AA@
CONST	SEGMENT
??_C@_03DAKNAIGI@idx?$AA@ DB 'idx', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06ICGJLFIM@string?$AA@
CONST	SEGMENT
??_C@_06ICGJLFIM@string?$AA@ DB 'string', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08PFHNJENM@skipkeys?$AA@
CONST	SEGMENT
??_C@_08PFHNJENM@skipkeys?$AA@ DB 'skipkeys', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09DEHDAHBH@sort_keys?$AA@
CONST	SEGMENT
??_C@_09DEHDAHBH@sort_keys?$AA@ DB 'sort_keys', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@HDLIMBKH@item_separator?$AA@
CONST	SEGMENT
??_C@_0P@HDLIMBKH@item_separator?$AA@ DB 'item_separator', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@HOKELHBC@key_separator?$AA@
CONST	SEGMENT
??_C@_0O@HOKELHBC@key_separator?$AA@ DB 'key_separator', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06CHBDMLPJ@indent?$AA@
CONST	SEGMENT
??_C@_06CHBDMLPJ@indent?$AA@ DB 'indent', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07KLAMFGHC@encoder?$AA@
CONST	SEGMENT
??_C@_07KLAMFGHC@encoder?$AA@ DB 'encoder', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07DLHCIBDH@default?$AA@
CONST	SEGMENT
??_C@_07DLHCIBDH@default?$AA@ DB 'default', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07LGFKJAB@markers?$AA@
CONST	SEGMENT
??_C@_07LGFKJAB@markers?$AA@ DB 'markers', 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
scanner_members DQ FLAT:??_C@_06OLFOGHEN@strict?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000060H
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_06OLFOGHEN@strict?$AA@
	DQ	FLAT:??_C@_0M@LCHLLJKI@object_hook?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000068H
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0M@LCHLLJKI@object_hook?$AA@
	DQ	FLAT:??_C@_0BC@KHLDCHIO@object_pairs_hook?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000070H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_0M@KEFCOABD@parse_float?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000078H
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0M@KEFCOABD@parse_float?$AA@
	DQ	FLAT:??_C@_09DPJPPPAP@parse_int?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000080H
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_09DPJPPPAP@parse_int?$AA@
	DQ	FLAT:??_C@_0P@GDIKPOIP@parse_constant?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000088H
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0P@GDIKPOIP@parse_constant?$AA@
	DQ	0000000000000000H
	ORG $+32
?kwlist@?1??scanner_call@@9@9 DQ FLAT:??_C@_06ICGJLFIM@string?$AA@ ; `scanner_call'::`2'::kwlist
	DQ	FLAT:??_C@_03DAKNAIGI@idx?$AA@
	DQ	0000000000000000H
encoder_members DQ FLAT:??_C@_07LGFKJAB@markers?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000060H
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_07LGFKJAB@markers?$AA@
	DQ	FLAT:??_C@_07DLHCIBDH@default?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000068H
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_07DLHCIBDH@default?$AA@
	DQ	FLAT:??_C@_07KLAMFGHC@encoder?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000070H
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_07KLAMFGHC@encoder?$AA@
	DQ	FLAT:??_C@_06CHBDMLPJ@indent?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000078H
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_06CHBDMLPJ@indent?$AA@
	DQ	FLAT:??_C@_0O@HOKELHBC@key_separator?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000080H
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0O@HOKELHBC@key_separator?$AA@
	DQ	FLAT:??_C@_0P@HDLIMBKH@item_separator?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000088H
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_0P@HDLIMBKH@item_separator?$AA@
	DQ	FLAT:??_C@_09DEHDAHBH@sort_keys?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000090H
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_09DEHDAHBH@sort_keys?$AA@
	DQ	FLAT:??_C@_08PFHNJENM@skipkeys?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000098H
	DD	01H
	ORG $+4
	DQ	FLAT:??_C@_08PFHNJENM@skipkeys?$AA@
	DQ	0000000000000000H
	ORG $+32
scanner_doc DB	'JSON scanner object', 00H
	ORG $+4
pydoc_scanstring DB 'scanstring(string, end, strict=True) -> (string, end'
	DB	')', 0aH, 0aH, 'Scan the string s for a JSON string. End is th'
	DB	'e index of the', 0aH, 'character in s after the quote that st'
	DB	'arted the JSON string.', 0aH, 'Unescapes all valid JSON strin'
	DB	'g escape sequences and raises ValueError', 0aH, 'on attempt t'
	DB	'o decode an invalid string. If strict is False then literal', 0aH
	DB	'control characters are allowed in the string.', 0aH, 0aH, 'Re'
	DB	'turns a tuple of the decoded string and the index of the char'
	DB	'acter in s', 0aH, 'after the end quote.', 00H
	ORG $+2
pydoc_encode_basestring_ascii DB 'encode_basestring_ascii(string) -> stri'
	DB	'ng', 0aH, 0aH, 'Return an ASCII-only JSON representation of a'
	DB	' Python string', 00H
	ORG $+1
?kwlist@?1??scanner_init@@9@9 DQ FLAT:??_C@_07JKKCBBMM@context?$AA@ ; `scanner_init'::`2'::kwlist
	DQ	0000000000000000H
	ORG $+8
PyScannerType DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0O@HCCDDMCC@_json?4Scanner?$AA@
	DQ	00000000000000a0H
	DQ	0000000000000000H
	DQ	FLAT:scanner_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:scanner_call
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044000H
	ORG $+4
	DQ	FLAT:scanner_doc
	DQ	FLAT:scanner_traverse
	DQ	FLAT:scanner_clear
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:scanner_members
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:scanner_init
	DQ	0000000000000000H
	DQ	FLAT:scanner_new
	DQ	0000000000000000H
	ORG $+64
?kwlist@?1??encoder_init@@9@9 DQ FLAT:??_C@_07LGFKJAB@markers?$AA@ ; `encoder_init'::`2'::kwlist
	DQ	FLAT:??_C@_07DLHCIBDH@default?$AA@
	DQ	FLAT:??_C@_07KLAMFGHC@encoder?$AA@
	DQ	FLAT:??_C@_06CHBDMLPJ@indent?$AA@
	DQ	FLAT:??_C@_0O@HOKELHBC@key_separator?$AA@
	DQ	FLAT:??_C@_0P@HDLIMBKH@item_separator?$AA@
	DQ	FLAT:??_C@_09DEHDAHBH@sort_keys?$AA@
	DQ	FLAT:??_C@_08PFHNJENM@skipkeys?$AA@
	DQ	FLAT:??_C@_09KHELABOC@allow_nan?$AA@
	DQ	0000000000000000H
?kwlist@?1??encoder_call@@9@9 DQ FLAT:??_C@_03GJLPFLNF@obj?$AA@ ; `encoder_call'::`2'::kwlist
	DQ	FLAT:??_C@_0BG@KGHPPKCC@_current_indent_level?$AA@
	DQ	0000000000000000H
encoder_doc DB	'_iterencode(obj, _current_indent_level) -> iterable', 00H
	ORG $+4
PyEncoderType DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0O@LGDFANJB@_json?4Encoder?$AA@
	DQ	00000000000000b0H
	DQ	0000000000000000H
	DQ	FLAT:encoder_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:encoder_call
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044000H
	ORG $+4
	DQ	FLAT:encoder_doc
	DQ	FLAT:encoder_traverse
	DQ	FLAT:encoder_clear
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:encoder_members
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:encoder_init
	DQ	0000000000000000H
	DQ	FLAT:encoder_new
	DQ	0000000000000000H
	ORG $+64
speedups_methods DQ FLAT:??_C@_0BI@DMGDCBIM@encode_basestring_ascii?$AA@
	DQ	FLAT:py_encode_basestring_ascii
	DD	08H
	ORG $+4
	DQ	FLAT:pydoc_encode_basestring_ascii
	DQ	FLAT:??_C@_0L@KHOLHHPB@scanstring?$AA@
	DQ	FLAT:py_scanstring
	DD	01H
	ORG $+4
	DQ	FLAT:pydoc_scanstring
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	00H
	ORG $+4
	DQ	0000000000000000H
module_doc DB	'json speedups', 0aH, 00H
	ORG $+1
jsonmodule DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_05KBBIEONE@_json?$AA@
	DQ	FLAT:module_doc
	DQ	ffffffffffffffffH
	DQ	FLAT:speedups_methods
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
_DATA	ENDS
;	COMDAT ??_C@_0P@GDIKPOIP@parse_constant?$AA@
CONST	SEGMENT
??_C@_0P@GDIKPOIP@parse_constant?$AA@ DB 'parse_constant', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09DPJPPPAP@parse_int?$AA@
CONST	SEGMENT
??_C@_09DPJPPPAP@parse_int?$AA@ DB 'parse_int', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@KEFCOABD@parse_float?$AA@
CONST	SEGMENT
??_C@_0M@KEFCOABD@parse_float?$AA@ DB 'parse_float', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@KHLDCHIO@object_pairs_hook?$AA@
CONST	SEGMENT
??_C@_0BC@KHLDCHIO@object_pairs_hook?$AA@ DB 'object_pairs_hook', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@LCHLLJKI@object_hook?$AA@
CONST	SEGMENT
??_C@_0M@LCHLLJKI@object_hook?$AA@ DB 'object_hook', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06OLFOGHEN@strict?$AA@
CONST	SEGMENT
??_C@_06OLFOGHEN@strict?$AA@ DB 'strict', 00H		; `string'
CONST	ENDS
PUBLIC	??_C@_0CL@OIEJEOOL@first?5argument?5must?5be?5a?5string?0@ ; `string'
PUBLIC	??_C@_0BB@CDAODGJG@OO?$CG?$HMi?3scanstring?$AA@	; `string'
EXTRN	PyErr_Format:PROC
EXTRN	PyExc_TypeError:QWORD
EXTRN	PyArg_ParseTuple:PROC
;	COMDAT pdata
; File c:\src\pyparallel\modules\_json.c
pdata	SEGMENT
$pdata$py_scanstring DD imagerel py_scanstring
	DD	imagerel py_scanstring+200
	DD	imagerel $unwind$py_scanstring
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$py_scanstring DD 010e01H
	DD	0c20eH
xdata	ENDS
;	COMDAT ??_C@_0CL@OIEJEOOL@first?5argument?5must?5be?5a?5string?0@
CONST	SEGMENT
??_C@_0CL@OIEJEOOL@first?5argument?5must?5be?5a?5string?0@ DB 'first argu'
	DB	'ment must be a string, not %.80s', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@CDAODGJG@OO?$CG?$HMi?3scanstring?$AA@
CONST	SEGMENT
??_C@_0BB@CDAODGJG@OO?$CG?$HMi?3scanstring?$AA@ DB 'OO&|i:scanstring', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT py_scanstring
_TEXT	SEGMENT
rval$ = 48
strict$ = 56
pystr$ = 64
end$ = 72
next_end$ = 80
self$ = 112
args$ = 120
py_scanstring PROC					; COMDAT

; 512  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 513  :     PyObject *pystr;
; 514  :     PyObject *rval;
; 515  :     Py_ssize_t end;
; 516  :     Py_ssize_t next_end = -1;

  0000e	48 c7 44 24 50
	ff ff ff ff	 mov	 QWORD PTR next_end$[rsp], -1

; 517  :     int strict = 1;

  00017	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR strict$[rsp], 1

; 518  :     if (!PyArg_ParseTuple(args, "OO&|i:scanstring", &pystr, _convertPyInt_AsSsize_t, &end, &strict)) {

  0001f	48 8d 44 24 38	 lea	 rax, QWORD PTR strict$[rsp]
  00024	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00029	48 8d 44 24 48	 lea	 rax, QWORD PTR end$[rsp]
  0002e	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00033	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:_convertPyInt_AsSsize_t
  0003a	4c 8d 44 24 40	 lea	 r8, QWORD PTR pystr$[rsp]
  0003f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BB@CDAODGJG@OO?$CG?$HMi?3scanstring?$AA@
  00046	48 8b 4c 24 78	 mov	 rcx, QWORD PTR args$[rsp]
  0004b	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00050	85 c0		 test	 eax, eax
  00052	75 04		 jne	 SHORT $LN3@py_scanstr

; 519  :         return NULL;

  00054	33 c0		 xor	 eax, eax
  00056	eb 6b		 jmp	 SHORT $LN4@py_scanstr
$LN3@py_scanstr:

; 520  :     }
; 521  :     if (PyUnicode_Check(pystr)) {

  00058	48 8b 44 24 40	 mov	 rax, QWORD PTR pystr$[rsp]
  0005d	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00061	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00067	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0006c	85 c0		 test	 eax, eax
  0006e	74 20		 je	 SHORT $LN2@py_scanstr

; 522  :         rval = scanstring_unicode(pystr, end, strict, &next_end);

  00070	4c 8d 4c 24 50	 lea	 r9, QWORD PTR next_end$[rsp]
  00075	44 8b 44 24 38	 mov	 r8d, DWORD PTR strict$[rsp]
  0007a	48 8b 54 24 48	 mov	 rdx, QWORD PTR end$[rsp]
  0007f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR pystr$[rsp]
  00084	e8 00 00 00 00	 call	 scanstring_unicode
  00089	48 89 44 24 30	 mov	 QWORD PTR rval$[rsp], rax

; 523  :     }
; 524  :     else {

  0008e	eb 24		 jmp	 SHORT $LN1@py_scanstr
$LN2@py_scanstr:

; 525  :         PyErr_Format(PyExc_TypeError,
; 526  :                      "first argument must be a string, not %.80s",
; 527  :                      Py_TYPE(pystr)->tp_name);

  00090	48 8b 44 24 40	 mov	 rax, QWORD PTR pystr$[rsp]
  00095	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00099	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  0009d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CL@OIEJEOOL@first?5argument?5must?5be?5a?5string?0@
  000a4	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000ab	e8 00 00 00 00	 call	 PyErr_Format

; 528  :         return NULL;

  000b0	33 c0		 xor	 eax, eax
  000b2	eb 0f		 jmp	 SHORT $LN4@py_scanstr
$LN1@py_scanstr:

; 529  :     }
; 530  :     return _build_rval_index_tuple(rval, next_end);

  000b4	48 8b 54 24 50	 mov	 rdx, QWORD PTR next_end$[rsp]
  000b9	48 8b 4c 24 30	 mov	 rcx, QWORD PTR rval$[rsp]
  000be	e8 00 00 00 00	 call	 _build_rval_index_tuple
$LN4@py_scanstr:

; 531  : }

  000c3	48 83 c4 68	 add	 rsp, 104		; 00000068H
  000c7	c3		 ret	 0
py_scanstring ENDP
_TEXT	ENDS
EXTRN	PyErr_Occurred:PROC
EXTRN	PyLong_AsSsize_t:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_convertPyInt_AsSsize_t DD imagerel _convertPyInt_AsSsize_t
	DD	imagerel _convertPyInt_AsSsize_t+67
	DD	imagerel $unwind$_convertPyInt_AsSsize_t
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_convertPyInt_AsSsize_t DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _convertPyInt_AsSsize_t
_TEXT	SEGMENT
o$ = 48
size_ptr$ = 56
_convertPyInt_AsSsize_t PROC				; COMDAT

; 144  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 145  :     /* PyObject to Py_ssize_t converter */
; 146  :     *size_ptr = PyLong_AsSsize_t(o);

  0000e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR o$[rsp]
  00013	e8 00 00 00 00	 call	 PyLong_AsSsize_t
  00018	48 8b 4c 24 38	 mov	 rcx, QWORD PTR size_ptr$[rsp]
  0001d	48 89 01	 mov	 QWORD PTR [rcx], rax

; 147  :     if (*size_ptr == -1 && PyErr_Occurred())

  00020	48 8b 44 24 38	 mov	 rax, QWORD PTR size_ptr$[rsp]
  00025	48 83 38 ff	 cmp	 QWORD PTR [rax], -1
  00029	75 0e		 jne	 SHORT $LN1@convertPyI
  0002b	e8 00 00 00 00	 call	 PyErr_Occurred
  00030	48 85 c0	 test	 rax, rax
  00033	74 04		 je	 SHORT $LN1@convertPyI

; 148  :         return 0;

  00035	33 c0		 xor	 eax, eax
  00037	eb 05		 jmp	 SHORT $LN2@convertPyI
$LN1@convertPyI:

; 149  :     return 1;

  00039	b8 01 00 00 00	 mov	 eax, 1
$LN2@convertPyI:

; 150  : }

  0003e	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00042	c3		 ret	 0
_convertPyInt_AsSsize_t ENDP
_TEXT	ENDS
PUBLIC	_Py_DecRef
EXTRN	PyTuple_New:PROC
EXTRN	PyLong_FromSsize_t:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_build_rval_index_tuple DD imagerel _build_rval_index_tuple
	DD	imagerel _build_rval_index_tuple+148
	DD	imagerel $unwind$_build_rval_index_tuple
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_build_rval_index_tuple DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _build_rval_index_tuple
_TEXT	SEGMENT
tpl$ = 32
pyidx$ = 40
rval$ = 64
idx$ = 72
_build_rval_index_tuple PROC				; COMDAT

; 279  : _build_rval_index_tuple(PyObject *rval, Py_ssize_t idx) {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 280  :     /* return (rval, idx) tuple, stealing reference to rval */
; 281  :     PyObject *tpl;
; 282  :     PyObject *pyidx;
; 283  :     /*
; 284  :     steal a reference to rval, returns (rval, idx)
; 285  :     */
; 286  :     if (rval == NULL) {

  0000e	48 83 7c 24 40
	00		 cmp	 QWORD PTR rval$[rsp], 0
  00014	75 04		 jne	 SHORT $LN3@build_rval

; 287  :         return NULL;

  00016	33 c0		 xor	 eax, eax
  00018	eb 75		 jmp	 SHORT $LN4@build_rval
$LN3@build_rval:

; 288  :     }
; 289  :     pyidx = PyLong_FromSsize_t(idx);

  0001a	48 8b 4c 24 48	 mov	 rcx, QWORD PTR idx$[rsp]
  0001f	e8 00 00 00 00	 call	 PyLong_FromSsize_t
  00024	48 89 44 24 28	 mov	 QWORD PTR pyidx$[rsp], rax

; 290  :     if (pyidx == NULL) {

  00029	48 83 7c 24 28
	00		 cmp	 QWORD PTR pyidx$[rsp], 0
  0002f	75 0e		 jne	 SHORT $LN2@build_rval

; 291  :         Py_DECREF(rval);

  00031	48 8b 4c 24 40	 mov	 rcx, QWORD PTR rval$[rsp]
  00036	e8 00 00 00 00	 call	 _Py_DecRef

; 292  :         return NULL;

  0003b	33 c0		 xor	 eax, eax
  0003d	eb 50		 jmp	 SHORT $LN4@build_rval
$LN2@build_rval:

; 293  :     }
; 294  :     tpl = PyTuple_New(2);

  0003f	b9 02 00 00 00	 mov	 ecx, 2
  00044	e8 00 00 00 00	 call	 PyTuple_New
  00049	48 89 44 24 20	 mov	 QWORD PTR tpl$[rsp], rax

; 295  :     if (tpl == NULL) {

  0004e	48 83 7c 24 20
	00		 cmp	 QWORD PTR tpl$[rsp], 0
  00054	75 18		 jne	 SHORT $LN1@build_rval

; 296  :         Py_DECREF(pyidx);

  00056	48 8b 4c 24 28	 mov	 rcx, QWORD PTR pyidx$[rsp]
  0005b	e8 00 00 00 00	 call	 _Py_DecRef

; 297  :         Py_DECREF(rval);

  00060	48 8b 4c 24 40	 mov	 rcx, QWORD PTR rval$[rsp]
  00065	e8 00 00 00 00	 call	 _Py_DecRef

; 298  :         return NULL;

  0006a	33 c0		 xor	 eax, eax
  0006c	eb 21		 jmp	 SHORT $LN4@build_rval
$LN1@build_rval:

; 299  :     }
; 300  :     PyTuple_SET_ITEM(tpl, 0, rval);

  0006e	48 8b 44 24 20	 mov	 rax, QWORD PTR tpl$[rsp]
  00073	48 8b 4c 24 40	 mov	 rcx, QWORD PTR rval$[rsp]
  00078	48 89 48 70	 mov	 QWORD PTR [rax+112], rcx

; 301  :     PyTuple_SET_ITEM(tpl, 1, pyidx);

  0007c	48 8b 44 24 20	 mov	 rax, QWORD PTR tpl$[rsp]
  00081	48 8b 4c 24 28	 mov	 rcx, QWORD PTR pyidx$[rsp]
  00086	48 89 48 78	 mov	 QWORD PTR [rax+120], rcx

; 302  :     return tpl;

  0008a	48 8b 44 24 20	 mov	 rax, QWORD PTR tpl$[rsp]
$LN4@build_rval:

; 303  : }

  0008f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00093	c3		 ret	 0
_build_rval_index_tuple ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
EXTRN	_Py_Dealloc:PROC
EXTRN	_Py_NegativeRefcount:PROC
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_RefTotal:QWORD
EXTRN	Px_DecRef:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN13
	DD	imagerel $LN13+257
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
tv81 = 48
op$ = 80
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN13:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	0f 85 e6 00 00
	00		 jne	 $LN8@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00016	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0001b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0001f	48 83 e0 20	 and	 rax, 32			; 00000020H
  00023	48 85 c0	 test	 rax, rax
  00026	75 14		 jne	 SHORT $LN6@Py_DecRef
  00028	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0002d	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00031	48 25 80 00 00
	00		 and	 rax, 128		; 00000080H
  00037	48 85 c0	 test	 rax, rax
  0003a	74 0f		 je	 SHORT $LN7@Py_DecRef
$LN6@Py_DecRef:

; 926  :             Px_DECREF(op);

  0003c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  00041	e8 00 00 00 00	 call	 Px_DecRef
  00046	e9 b1 00 00 00	 jmp	 $LN5@Py_DecRef
$LN7@Py_DecRef:

; 927  :         else if (!Px_ISPX(op)) {

  0004b	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00050	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00054	48 83 e0 02	 and	 rax, 2
  00058	48 85 c0	 test	 rax, rax
  0005b	0f 85 9b 00 00
	00		 jne	 $LN4@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;

  00061	e8 00 00 00 00	 call	 _Py_PXCTX
  00066	85 c0		 test	 eax, eax
  00068	74 02		 je	 SHORT $LN11@Py_DecRef
  0006a	eb 11		 jmp	 SHORT $LN12@Py_DecRef
$LN11@Py_DecRef:
  0006c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00073	48 ff c8	 dec	 rax
  00076	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN12@Py_DecRef:

; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  0007d	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00082	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00086	48 ff c8	 dec	 rax
  00089	48 89 44 24 30	 mov	 QWORD PTR tv81[rsp], rax
  0008e	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00093	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv81[rsp]
  00098	48 89 48 50	 mov	 QWORD PTR [rax+80], rcx
  0009c	48 83 7c 24 30
	00		 cmp	 QWORD PTR tv81[rsp], 0
  000a2	74 4e		 je	 SHORT $LN3@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);

  000a4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000ac	4c 8b 4c 24 50	 mov	 r9, QWORD PTR op$[rsp]
  000b1	41 b8 a2 03 00
	00		 mov	 r8d, 930		; 000003a2H
  000b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000c5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ca	85 c0		 test	 eax, eax
  000cc	75 22		 jne	 SHORT $LN2@Py_DecRef
  000ce	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  000d3	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000d8	7d 16		 jge	 SHORT $LN2@Py_DecRef
  000da	4c 8b 44 24 50	 mov	 r8, QWORD PTR op$[rsp]
  000df	ba a2 03 00 00	 mov	 edx, 930		; 000003a2H
  000e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000eb	e8 00 00 00 00	 call	 _Py_NegativeRefcount
$LN2@Py_DecRef:

; 931  :             } else

  000f0	eb 0a		 jmp	 SHORT $LN1@Py_DecRef
$LN3@Py_DecRef:

; 932  :                 _Py_Dealloc((PyObject *)(op));

  000f2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  000f7	e8 00 00 00 00	 call	 _Py_Dealloc
$LN1@Py_DecRef:
$LN4@Py_DecRef:
$LN5@Py_DecRef:
$LN8@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  000fc	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00100	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_00CNPNBAHC@?$AA@				; `string'
PUBLIC	??_C@_0BG@HFBFLOEL@Invalid?5?2uXXXX?5escape?$AA@ ; `string'
PUBLIC	??_C@_0BA@JFDKNFEA@Invalid?5?2escape?$AA@	; `string'
PUBLIC	??_C@_0BD@PDCADMBJ@scanstring_unicode?$AA@	; `string'
PUBLIC	??_C@_0BD@BIGPLMIN@?4?4?2Modules?2_json?4c?$AA@	; `string'
PUBLIC	??_C@_0CA@GLFFIBAO@Unterminated?5string?5starting?5at?$AA@ ; `string'
PUBLIC	??_C@_0BN@KFIIHLME@Invalid?5control?5character?5at?$AA@ ; `string'
PUBLIC	??_C@_0BF@LLLKOJNO@end?5is?5out?5of?5bounds?$AA@ ; `string'
PUBLIC	??_C@_1EM@FMOHIEKB@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AAp?$AAy?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt@ ; `string'
PUBLIC	??_C@_1DE@NACFPDOF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAp?$AAy?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CO@GLPHKNNN@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAp?$AAy?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CG@KOELJAMM@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAj?$AAs?$AAo?$AAn?$AA?4?$AAc?$AA?$AA@ ; `string'
EXTRN	PyUnicode_FromStringAndSize:PROC
EXTRN	__ImageBase:BYTE
EXTRN	PyUnicode_FromKindAndData:PROC
EXTRN	PyList_Append:PROC
EXTRN	PyList_New:PROC
EXTRN	PyErr_SetString:PROC
EXTRN	PyExc_ValueError:QWORD
EXTRN	_PyUnicode_Ready:PROC
EXTRN	__imp__wassert:PROC
;	COMDAT pdata
; File c:\src\pyparallel\modules\_json.c
pdata	SEGMENT
$pdata$scanstring_unicode DD imagerel scanstring_unicode
	DD	imagerel scanstring_unicode+3995
	DD	imagerel $unwind$scanstring_unicode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$scanstring_unicode DD 021b01H
	DD	021011bH
xdata	ENDS
;	COMDAT ??_C@_00CNPNBAHC@?$AA@
CONST	SEGMENT
??_C@_00CNPNBAHC@?$AA@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@HFBFLOEL@Invalid?5?2uXXXX?5escape?$AA@
CONST	SEGMENT
??_C@_0BG@HFBFLOEL@Invalid?5?2uXXXX?5escape?$AA@ DB 'Invalid \uXXXX escap'
	DB	'e', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JFDKNFEA@Invalid?5?2escape?$AA@
CONST	SEGMENT
??_C@_0BA@JFDKNFEA@Invalid?5?2escape?$AA@ DB 'Invalid \escape', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@PDCADMBJ@scanstring_unicode?$AA@
CONST	SEGMENT
??_C@_0BD@PDCADMBJ@scanstring_unicode?$AA@ DB 'scanstring_unicode', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@BIGPLMIN@?4?4?2Modules?2_json?4c?$AA@
CONST	SEGMENT
??_C@_0BD@BIGPLMIN@?4?4?2Modules?2_json?4c?$AA@ DB '..\Modules\_json.c', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@GLFFIBAO@Unterminated?5string?5starting?5at?$AA@
CONST	SEGMENT
??_C@_0CA@GLFFIBAO@Unterminated?5string?5starting?5at?$AA@ DB 'Unterminat'
	DB	'ed string starting at', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@KFIIHLME@Invalid?5control?5character?5at?$AA@
CONST	SEGMENT
??_C@_0BN@KFIIHLME@Invalid?5control?5character?5at?$AA@ DB 'Invalid contr'
	DB	'ol character at', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@LLLKOJNO@end?5is?5out?5of?5bounds?$AA@
CONST	SEGMENT
??_C@_0BF@LLLKOJNO@end?5is?5out?5of?5bounds?$AA@ DB 'end is out of bounds'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1EM@FMOHIEKB@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AAp?$AAy?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt@
CONST	SEGMENT
??_C@_1EM@FMOHIEKB@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AAp?$AAy?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt@ DB '('
	DB	00H, '(', 00H, 'P', 00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H
	DB	'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'O', 00H, 'b', 00H, 'j'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, '*', 00H, ')', 00H, '(', 00H
	DB	'p', 00H, 'y', 00H, 's', 00H, 't', 00H, 'r', 00H, ')', 00H, ')'
	DB	00H, '-', 00H, '>', 00H, 'd', 00H, 'a', 00H, 't', 00H, 'a', 00H
	DB	'.', 00H, 'a', 00H, 'n', 00H, 'y', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DE@NACFPDOF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAp?$AAy?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DE@NACFPDOF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAp?$AAy?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'I', 00H, 'S', 00H, '_', 00H, 'R'
	DB	00H, 'E', 00H, 'A', 00H, 'D', 00H, 'Y', 00H, '(', 00H, 'p', 00H
	DB	'y', 00H, 's', 00H, 't', 00H, 'r', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CO@GLPHKNNN@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAp?$AAy?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CO@GLPHKNNN@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAp?$AAy?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, 'p', 00H, 'y', 00H, 's', 00H, 't', 00H
	DB	'r', 00H, ')', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@KOELJAMM@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAj?$AAs?$AAo?$AAn?$AA?4?$AAc?$AA?$AA@
CONST	SEGMENT
??_C@_1CG@KOELJAMM@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAj?$AAs?$AAo?$AAn?$AA?4?$AAc?$AA?$AA@ DB '.'
	DB	00H, '.', 00H, '\', 00H, 'M', 00H, 'o', 00H, 'd', 00H, 'u', 00H
	DB	'l', 00H, 'e', 00H, 's', 00H, '\', 00H, '_', 00H, 'j', 00H, 's'
	DB	00H, 'o', 00H, 'n', 00H, '.', 00H, 'c', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT scanstring_unicode
_TEXT	SEGMENT
kind$ = 48
begin$ = 56
rval$ = 64
chunk$ = 72
next$ = 80
len$ = 88
chunks$ = 96
buf$ = 104
c$20804 = 112
_py_tmp$20834 = 120
digit$20869 = 128
c2$20891 = 132
digit$20895 = 136
_py_tmp$20924 = 144
_py_tmp$20948 = 152
_py_tmp$20958 = 160
tv79 = 168
tv163 = 176
tv172 = 184
tv209 = 192
tv208 = 196
tv268 = 200
tv267 = 204
tv271 = 208
tv298 = 212
tv297 = 216
tv300 = 220
tv332 = 224
tv331 = 228
tv347 = 232
tv346 = 236
tv362 = 240
tv361 = 244
tv364 = 248
pystr$ = 272
end$ = 280
strict$ = 288
next_end_ptr$ = 296
scanstring_unicode PROC					; COMDAT

; 322  : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H

; 323  :     /* Read the JSON string from PyUnicode pystr.
; 324  :     end is the index of the first character after the quote.
; 325  :     if strict is zero then literal control characters are allowed
; 326  :     *next_end_ptr is a return-by-reference index of the character
; 327  :         after the end quote
; 328  : 
; 329  :     Return value is a new PyUnicode
; 330  :     */
; 331  :     PyObject *rval = NULL;

  0001b	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR rval$[rsp], 0

; 332  :     Py_ssize_t len;
; 333  :     Py_ssize_t begin = end - 1;

  00024	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR end$[rsp]
  0002c	48 ff c8	 dec	 rax
  0002f	48 89 44 24 38	 mov	 QWORD PTR begin$[rsp], rax

; 334  :     Py_ssize_t next /* = begin */;
; 335  :     const void *buf;
; 336  :     int kind;
; 337  :     PyObject *chunks = NULL;

  00034	48 c7 44 24 60
	00 00 00 00	 mov	 QWORD PTR chunks$[rsp], 0

; 338  :     PyObject *chunk = NULL;

  0003d	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR chunk$[rsp], 0

; 339  : 
; 340  :     if (PyUnicode_READY(pystr) == -1)

  00046	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  0004e	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00052	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00058	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0005d	85 c0		 test	 eax, eax
  0005f	75 1c		 jne	 SHORT $LN98@scanstring
  00061	41 b8 54 01 00
	00		 mov	 r8d, 340		; 00000154H
  00067	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@KOELJAMM@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAj?$AAs?$AAo?$AAn?$AA?4?$AAc?$AA?$AA@
  0006e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@GLPHKNNN@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAp?$AAy?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  00075	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0007b	33 c0		 xor	 eax, eax
$LN98@scanstring:
  0007d	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  00085	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00088	c1 e8 07	 shr	 eax, 7
  0008b	83 e0 01	 and	 eax, 1
  0008e	85 c0		 test	 eax, eax
  00090	74 0d		 je	 SHORT $LN99@scanstring
  00092	c7 84 24 a8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv79[rsp], 0
  0009d	eb 14		 jmp	 SHORT $LN100@scanstring
$LN99@scanstring:
  0009f	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR pystr$[rsp]
  000a7	e8 00 00 00 00	 call	 _PyUnicode_Ready
  000ac	89 84 24 a8 00
	00 00		 mov	 DWORD PTR tv79[rsp], eax
$LN100@scanstring:
  000b3	83 bc 24 a8 00
	00 00 ff	 cmp	 DWORD PTR tv79[rsp], -1
  000bb	75 07		 jne	 SHORT $LN95@scanstring

; 341  :         return 0;

  000bd	33 c0		 xor	 eax, eax
  000bf	e9 c5 0d 00 00	 jmp	 $LN96@scanstring
$LN95@scanstring:

; 342  : 
; 343  :     len = PyUnicode_GET_LENGTH(pystr);

  000c4	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  000cc	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000d0	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000d6	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  000db	85 c0		 test	 eax, eax
  000dd	75 1c		 jne	 SHORT $LN101@scanstring
  000df	41 b8 57 01 00
	00		 mov	 r8d, 343		; 00000157H
  000e5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@KOELJAMM@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAj?$AAs?$AAo?$AAn?$AA?4?$AAc?$AA?$AA@
  000ec	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@GLPHKNNN@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAp?$AAy?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  000f3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000f9	33 c0		 xor	 eax, eax
$LN101@scanstring:
  000fb	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  00103	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00106	c1 e8 07	 shr	 eax, 7
  00109	83 e0 01	 and	 eax, 1
  0010c	85 c0		 test	 eax, eax
  0010e	75 1c		 jne	 SHORT $LN102@scanstring
  00110	41 b8 57 01 00
	00		 mov	 r8d, 343		; 00000157H
  00116	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@KOELJAMM@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAj?$AAs?$AAo?$AAn?$AA?4?$AAc?$AA?$AA@
  0011d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@NACFPDOF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAp?$AAy?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  00124	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0012a	33 c0		 xor	 eax, eax
$LN102@scanstring:
  0012c	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  00134	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00138	48 89 44 24 58	 mov	 QWORD PTR len$[rsp], rax

; 344  :     buf = PyUnicode_DATA(pystr);

  0013d	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  00145	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00149	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0014f	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00154	85 c0		 test	 eax, eax
  00156	75 1c		 jne	 SHORT $LN103@scanstring
  00158	41 b8 58 01 00
	00		 mov	 r8d, 344		; 00000158H
  0015e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@KOELJAMM@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAj?$AAs?$AAo?$AAn?$AA?4?$AAc?$AA?$AA@
  00165	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@GLPHKNNN@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAp?$AAy?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  0016c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00172	33 c0		 xor	 eax, eax
$LN103@scanstring:
  00174	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  0017c	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0017f	c1 e8 05	 shr	 eax, 5
  00182	83 e0 01	 and	 eax, 1
  00185	85 c0		 test	 eax, eax
  00187	0f 84 bd 00 00
	00		 je	 $LN109@scanstring
  0018d	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  00195	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00199	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0019f	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  001a4	85 c0		 test	 eax, eax
  001a6	75 1c		 jne	 SHORT $LN104@scanstring
  001a8	41 b8 58 01 00
	00		 mov	 r8d, 344		; 00000158H
  001ae	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@KOELJAMM@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAj?$AAs?$AAo?$AAn?$AA?4?$AAc?$AA?$AA@
  001b5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@GLPHKNNN@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAp?$AAy?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  001bc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001c2	33 c0		 xor	 eax, eax
$LN104@scanstring:
  001c4	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  001cc	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  001cf	c1 e8 07	 shr	 eax, 7
  001d2	83 e0 01	 and	 eax, 1
  001d5	85 c0		 test	 eax, eax
  001d7	75 1c		 jne	 SHORT $LN105@scanstring
  001d9	41 b8 58 01 00
	00		 mov	 r8d, 344		; 00000158H
  001df	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@KOELJAMM@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAj?$AAs?$AAo?$AAn?$AA?4?$AAc?$AA?$AA@
  001e6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@NACFPDOF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAp?$AAy?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  001ed	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001f3	33 c0		 xor	 eax, eax
$LN105@scanstring:
  001f5	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  001fd	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00200	c1 e8 06	 shr	 eax, 6
  00203	83 e0 01	 and	 eax, 1
  00206	85 c0		 test	 eax, eax
  00208	74 18		 je	 SHORT $LN106@scanstring
  0020a	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  00212	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  00218	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR tv163[rsp], rax
  00220	eb 16		 jmp	 SHORT $LN107@scanstring
$LN106@scanstring:
  00222	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  0022a	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  00230	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR tv163[rsp], rax
$LN107@scanstring:
  00238	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR tv163[rsp]
  00240	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR tv172[rsp], rax
  00248	eb 45		 jmp	 SHORT $LN110@scanstring
$LN109@scanstring:
  0024a	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  00252	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  0025a	75 1c		 jne	 SHORT $LN108@scanstring
  0025c	41 b8 58 01 00
	00		 mov	 r8d, 344		; 00000158H
  00262	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@KOELJAMM@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAj?$AAs?$AAo?$AAn?$AA?4?$AAc?$AA?$AA@
  00269	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EM@FMOHIEKB@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AAp?$AAy?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt@
  00270	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00276	33 c0		 xor	 eax, eax
$LN108@scanstring:
  00278	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  00280	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  00287	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR tv172[rsp], rax
$LN110@scanstring:
  0028f	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR tv172[rsp]
  00297	48 89 44 24 68	 mov	 QWORD PTR buf$[rsp], rax

; 345  :     kind = PyUnicode_KIND(pystr);

  0029c	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  002a4	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  002a8	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  002ae	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  002b3	85 c0		 test	 eax, eax
  002b5	75 1c		 jne	 SHORT $LN111@scanstring
  002b7	41 b8 59 01 00
	00		 mov	 r8d, 345		; 00000159H
  002bd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@KOELJAMM@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAj?$AAs?$AAo?$AAn?$AA?4?$AAc?$AA?$AA@
  002c4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@GLPHKNNN@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAp?$AAy?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  002cb	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  002d1	33 c0		 xor	 eax, eax
$LN111@scanstring:
  002d3	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  002db	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  002de	c1 e8 07	 shr	 eax, 7
  002e1	83 e0 01	 and	 eax, 1
  002e4	85 c0		 test	 eax, eax
  002e6	75 1c		 jne	 SHORT $LN112@scanstring
  002e8	41 b8 59 01 00
	00		 mov	 r8d, 345		; 00000159H
  002ee	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@KOELJAMM@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAj?$AAs?$AAo?$AAn?$AA?4?$AAc?$AA?$AA@
  002f5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@NACFPDOF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAp?$AAy?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  002fc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00302	33 c0		 xor	 eax, eax
$LN112@scanstring:
  00304	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  0030c	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0030f	c1 e8 02	 shr	 eax, 2
  00312	83 e0 07	 and	 eax, 7
  00315	89 44 24 30	 mov	 DWORD PTR kind$[rsp], eax

; 346  : 
; 347  :     if (end < 0 || len <= end) {

  00319	48 83 bc 24 18
	01 00 00 00	 cmp	 QWORD PTR end$[rsp], 0
  00322	7c 0f		 jl	 SHORT $LN93@scanstring
  00324	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR end$[rsp]
  0032c	48 39 44 24 58	 cmp	 QWORD PTR len$[rsp], rax
  00331	7f 18		 jg	 SHORT $LN94@scanstring
$LN93@scanstring:

; 348  :         PyErr_SetString(PyExc_ValueError, "end is out of bounds");

  00333	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BF@LLLKOJNO@end?5is?5out?5of?5bounds?$AA@
  0033a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00341	e8 00 00 00 00	 call	 PyErr_SetString

; 349  :         goto bail;

  00346	e9 fd 0a 00 00	 jmp	 $bail$20800
$LN94@scanstring:
$LN92@scanstring:

; 350  :     }
; 351  :     while (1) {

  0034b	33 c0		 xor	 eax, eax
  0034d	83 f8 01	 cmp	 eax, 1
  00350	0f 84 86 09 00
	00		 je	 $LN91@scanstring

; 352  :         /* Find the end of the string or the next escape */
; 353  :         Py_UCS4 c = 0;

  00356	c7 44 24 70 00
	00 00 00	 mov	 DWORD PTR c$20804[rsp], 0

; 354  :         for (next = end; next < len; next++) {

  0035e	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR end$[rsp]
  00366	48 89 44 24 50	 mov	 QWORD PTR next$[rsp], rax
  0036b	eb 0d		 jmp	 SHORT $LN90@scanstring
$LN89@scanstring:
  0036d	48 8b 44 24 50	 mov	 rax, QWORD PTR next$[rsp]
  00372	48 ff c0	 inc	 rax
  00375	48 89 44 24 50	 mov	 QWORD PTR next$[rsp], rax
$LN90@scanstring:
  0037a	48 8b 44 24 58	 mov	 rax, QWORD PTR len$[rsp]
  0037f	48 39 44 24 50	 cmp	 QWORD PTR next$[rsp], rax
  00384	0f 8d b4 00 00
	00		 jge	 $LN88@scanstring

; 355  :             c = PyUnicode_READ(kind, buf, next);

  0038a	83 7c 24 30 01	 cmp	 DWORD PTR kind$[rsp], 1
  0038f	75 1c		 jne	 SHORT $LN115@scanstring
  00391	48 8b 44 24 50	 mov	 rax, QWORD PTR next$[rsp]
  00396	48 8b 4c 24 68	 mov	 rcx, QWORD PTR buf$[rsp]
  0039b	48 03 c8	 add	 rcx, rax
  0039e	48 8b c1	 mov	 rax, rcx
  003a1	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  003a4	89 84 24 c0 00
	00 00		 mov	 DWORD PTR tv209[rsp], eax
  003ab	eb 40		 jmp	 SHORT $LN116@scanstring
$LN115@scanstring:
  003ad	83 7c 24 30 02	 cmp	 DWORD PTR kind$[rsp], 2
  003b2	75 17		 jne	 SHORT $LN113@scanstring
  003b4	48 8b 44 24 68	 mov	 rax, QWORD PTR buf$[rsp]
  003b9	48 8b 4c 24 50	 mov	 rcx, QWORD PTR next$[rsp]
  003be	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  003c2	89 84 24 c4 00
	00 00		 mov	 DWORD PTR tv208[rsp], eax
  003c9	eb 14		 jmp	 SHORT $LN114@scanstring
$LN113@scanstring:
  003cb	48 8b 44 24 68	 mov	 rax, QWORD PTR buf$[rsp]
  003d0	48 8b 4c 24 50	 mov	 rcx, QWORD PTR next$[rsp]
  003d5	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  003d8	89 84 24 c4 00
	00 00		 mov	 DWORD PTR tv208[rsp], eax
$LN114@scanstring:
  003df	8b 84 24 c4 00
	00 00		 mov	 eax, DWORD PTR tv208[rsp]
  003e6	89 84 24 c0 00
	00 00		 mov	 DWORD PTR tv209[rsp], eax
$LN116@scanstring:
  003ed	8b 84 24 c0 00
	00 00		 mov	 eax, DWORD PTR tv209[rsp]
  003f4	89 44 24 70	 mov	 DWORD PTR c$20804[rsp], eax

; 356  :             if (c == '"' || c == '\\') {

  003f8	83 7c 24 70 22	 cmp	 DWORD PTR c$20804[rsp], 34 ; 00000022H
  003fd	74 07		 je	 SHORT $LN86@scanstring
  003ff	83 7c 24 70 5c	 cmp	 DWORD PTR c$20804[rsp], 92 ; 0000005cH
  00404	75 04		 jne	 SHORT $LN87@scanstring
$LN86@scanstring:

; 357  :                 break;

  00406	eb 36		 jmp	 SHORT $LN88@scanstring
  00408	eb 2f		 jmp	 SHORT $LN85@scanstring
$LN87@scanstring:

; 358  :             }
; 359  :             else if (strict && c <= 0x1f) {

  0040a	83 bc 24 20 01
	00 00 00	 cmp	 DWORD PTR strict$[rsp], 0
  00412	74 25		 je	 SHORT $LN84@scanstring
  00414	83 7c 24 70 1f	 cmp	 DWORD PTR c$20804[rsp], 31
  00419	77 1e		 ja	 SHORT $LN84@scanstring

; 360  :                 raise_errmsg("Invalid control character at", pystr, next);

  0041b	4c 8b 44 24 50	 mov	 r8, QWORD PTR next$[rsp]
  00420	48 8b 94 24 10
	01 00 00	 mov	 rdx, QWORD PTR pystr$[rsp]
  00428	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BN@KFIIHLME@Invalid?5control?5character?5at?$AA@
  0042f	e8 00 00 00 00	 call	 raise_errmsg

; 361  :                 goto bail;

  00434	e9 0f 0a 00 00	 jmp	 $bail$20800
$LN84@scanstring:
$LN85@scanstring:

; 362  :             }
; 363  :         }

  00439	e9 2f ff ff ff	 jmp	 $LN89@scanstring
$LN88@scanstring:

; 364  :         if (!(c == '"' || c == '\\')) {

  0043e	83 7c 24 70 22	 cmp	 DWORD PTR c$20804[rsp], 34 ; 00000022H
  00443	74 25		 je	 SHORT $LN83@scanstring
  00445	83 7c 24 70 5c	 cmp	 DWORD PTR c$20804[rsp], 92 ; 0000005cH
  0044a	74 1e		 je	 SHORT $LN83@scanstring

; 365  :             raise_errmsg("Unterminated string starting at", pystr, begin);

  0044c	4c 8b 44 24 38	 mov	 r8, QWORD PTR begin$[rsp]
  00451	48 8b 94 24 10
	01 00 00	 mov	 rdx, QWORD PTR pystr$[rsp]
  00459	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CA@GLFFIBAO@Unterminated?5string?5starting?5at?$AA@
  00460	e8 00 00 00 00	 call	 raise_errmsg

; 366  :             goto bail;

  00465	e9 de 09 00 00	 jmp	 $bail$20800
$LN83@scanstring:

; 367  :         }
; 368  :         /* Pick up this chunk if it's not zero length */
; 369  :         if (next != end) {

  0046a	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR end$[rsp]
  00472	48 39 44 24 50	 cmp	 QWORD PTR next$[rsp], rax
  00477	0f 84 f1 00 00
	00		 je	 $LN82@scanstring

; 370  :             APPEND_OLD_CHUNK

  0047d	48 83 7c 24 48
	00		 cmp	 QWORD PTR chunk$[rsp], 0
  00483	0f 84 98 00 00
	00		 je	 $LN81@scanstring
  00489	48 83 7c 24 60
	00		 cmp	 QWORD PTR chunks$[rsp], 0
  0048f	75 19		 jne	 SHORT $LN80@scanstring
  00491	33 c9		 xor	 ecx, ecx
  00493	e8 00 00 00 00	 call	 PyList_New
  00498	48 89 44 24 60	 mov	 QWORD PTR chunks$[rsp], rax
  0049d	48 83 7c 24 60
	00		 cmp	 QWORD PTR chunks$[rsp], 0
  004a3	75 05		 jne	 SHORT $LN79@scanstring
  004a5	e9 9e 09 00 00	 jmp	 $bail$20800
$LN79@scanstring:
$LN80@scanstring:
  004aa	48 8b 54 24 48	 mov	 rdx, QWORD PTR chunk$[rsp]
  004af	48 8b 4c 24 60	 mov	 rcx, QWORD PTR chunks$[rsp]
  004b4	e8 00 00 00 00	 call	 PyList_Append
  004b9	85 c0		 test	 eax, eax
  004bb	74 0f		 je	 SHORT $LN78@scanstring
  004bd	48 8b 4c 24 48	 mov	 rcx, QWORD PTR chunk$[rsp]
  004c2	e8 00 00 00 00	 call	 _Py_DecRef
  004c7	e9 7c 09 00 00	 jmp	 $bail$20800
$LN78@scanstring:
$LN77@scanstring:
  004cc	48 83 7c 24 48
	00		 cmp	 QWORD PTR chunk$[rsp], 0
  004d2	74 47		 je	 SHORT $LN74@scanstring
  004d4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  004dc	4c 8b 4c 24 48	 mov	 r9, QWORD PTR chunk$[rsp]
  004e1	41 b8 72 01 00
	00		 mov	 r8d, 370		; 00000172H
  004e7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@BIGPLMIN@?4?4?2Modules?2_json?4c?$AA@
  004ee	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@PDCADMBJ@scanstring_unicode?$AA@
  004f5	e8 00 00 00 00	 call	 _PyParallel_Guard
  004fa	85 c0		 test	 eax, eax
  004fc	75 1d		 jne	 SHORT $LN74@scanstring
  004fe	48 8b 44 24 48	 mov	 rax, QWORD PTR chunk$[rsp]
  00503	48 89 44 24 78	 mov	 QWORD PTR _py_tmp$20834[rsp], rax
  00508	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR chunk$[rsp], 0
  00511	48 8b 4c 24 78	 mov	 rcx, QWORD PTR _py_tmp$20834[rsp]
  00516	e8 00 00 00 00	 call	 _Py_DecRef
$LN74@scanstring:
  0051b	33 c0		 xor	 eax, eax
  0051d	85 c0		 test	 eax, eax
  0051f	75 ab		 jne	 SHORT $LN77@scanstring
$LN81@scanstring:

; 371  :                 chunk = PyUnicode_FromKindAndData(
; 372  :                     kind,
; 373  :                     (char*)buf + kind * end,
; 374  :                     next - end);

  00521	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR end$[rsp]
  00529	48 8b 4c 24 50	 mov	 rcx, QWORD PTR next$[rsp]
  0052e	48 2b c8	 sub	 rcx, rax
  00531	48 8b c1	 mov	 rax, rcx
  00534	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR kind$[rsp]
  00539	48 0f af 8c 24
	18 01 00 00	 imul	 rcx, QWORD PTR end$[rsp]
  00542	48 8b 54 24 68	 mov	 rdx, QWORD PTR buf$[rsp]
  00547	48 03 d1	 add	 rdx, rcx
  0054a	48 8b ca	 mov	 rcx, rdx
  0054d	4c 8b c0	 mov	 r8, rax
  00550	48 8b d1	 mov	 rdx, rcx
  00553	8b 4c 24 30	 mov	 ecx, DWORD PTR kind$[rsp]
  00557	e8 00 00 00 00	 call	 PyUnicode_FromKindAndData
  0055c	48 89 44 24 48	 mov	 QWORD PTR chunk$[rsp], rax

; 375  :             if (chunk == NULL) {

  00561	48 83 7c 24 48
	00		 cmp	 QWORD PTR chunk$[rsp], 0
  00567	75 05		 jne	 SHORT $LN73@scanstring

; 376  :                 goto bail;

  00569	e9 da 08 00 00	 jmp	 $bail$20800
$LN73@scanstring:
$LN82@scanstring:

; 377  :             }
; 378  :         }
; 379  :         next++;

  0056e	48 8b 44 24 50	 mov	 rax, QWORD PTR next$[rsp]
  00573	48 ff c0	 inc	 rax
  00576	48 89 44 24 50	 mov	 QWORD PTR next$[rsp], rax

; 380  :         if (c == '"') {

  0057b	83 7c 24 70 22	 cmp	 DWORD PTR c$20804[rsp], 34 ; 00000022H
  00580	75 12		 jne	 SHORT $LN72@scanstring

; 381  :             end = next;

  00582	48 8b 44 24 50	 mov	 rax, QWORD PTR next$[rsp]
  00587	48 89 84 24 18
	01 00 00	 mov	 QWORD PTR end$[rsp], rax

; 382  :             break;

  0058f	e9 48 07 00 00	 jmp	 $LN91@scanstring
$LN72@scanstring:

; 383  :         }
; 384  :         if (next == len) {

  00594	48 8b 44 24 58	 mov	 rax, QWORD PTR len$[rsp]
  00599	48 39 44 24 50	 cmp	 QWORD PTR next$[rsp], rax
  0059e	75 1e		 jne	 SHORT $LN71@scanstring

; 385  :             raise_errmsg("Unterminated string starting at", pystr, begin);

  005a0	4c 8b 44 24 38	 mov	 r8, QWORD PTR begin$[rsp]
  005a5	48 8b 94 24 10
	01 00 00	 mov	 rdx, QWORD PTR pystr$[rsp]
  005ad	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CA@GLFFIBAO@Unterminated?5string?5starting?5at?$AA@
  005b4	e8 00 00 00 00	 call	 raise_errmsg

; 386  :             goto bail;

  005b9	e9 8a 08 00 00	 jmp	 $bail$20800
$LN71@scanstring:

; 387  :         }
; 388  :         c = PyUnicode_READ(kind, buf, next);

  005be	83 7c 24 30 01	 cmp	 DWORD PTR kind$[rsp], 1
  005c3	75 1c		 jne	 SHORT $LN119@scanstring
  005c5	48 8b 44 24 50	 mov	 rax, QWORD PTR next$[rsp]
  005ca	48 8b 4c 24 68	 mov	 rcx, QWORD PTR buf$[rsp]
  005cf	48 03 c8	 add	 rcx, rax
  005d2	48 8b c1	 mov	 rax, rcx
  005d5	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  005d8	89 84 24 c8 00
	00 00		 mov	 DWORD PTR tv268[rsp], eax
  005df	eb 40		 jmp	 SHORT $LN120@scanstring
$LN119@scanstring:
  005e1	83 7c 24 30 02	 cmp	 DWORD PTR kind$[rsp], 2
  005e6	75 17		 jne	 SHORT $LN117@scanstring
  005e8	48 8b 44 24 68	 mov	 rax, QWORD PTR buf$[rsp]
  005ed	48 8b 4c 24 50	 mov	 rcx, QWORD PTR next$[rsp]
  005f2	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  005f6	89 84 24 cc 00
	00 00		 mov	 DWORD PTR tv267[rsp], eax
  005fd	eb 14		 jmp	 SHORT $LN118@scanstring
$LN117@scanstring:
  005ff	48 8b 44 24 68	 mov	 rax, QWORD PTR buf$[rsp]
  00604	48 8b 4c 24 50	 mov	 rcx, QWORD PTR next$[rsp]
  00609	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  0060c	89 84 24 cc 00
	00 00		 mov	 DWORD PTR tv267[rsp], eax
$LN118@scanstring:
  00613	8b 84 24 cc 00
	00 00		 mov	 eax, DWORD PTR tv267[rsp]
  0061a	89 84 24 c8 00
	00 00		 mov	 DWORD PTR tv268[rsp], eax
$LN120@scanstring:
  00621	8b 84 24 c8 00
	00 00		 mov	 eax, DWORD PTR tv268[rsp]
  00628	89 44 24 70	 mov	 DWORD PTR c$20804[rsp], eax

; 389  :         if (c != 'u') {

  0062c	83 7c 24 70 75	 cmp	 DWORD PTR c$20804[rsp], 117 ; 00000075H
  00631	0f 84 cc 00 00
	00		 je	 $LN70@scanstring

; 390  :             /* Non-unicode backslash escapes */
; 391  :             end = next + 1;

  00637	48 8b 44 24 50	 mov	 rax, QWORD PTR next$[rsp]
  0063c	48 ff c0	 inc	 rax
  0063f	48 89 84 24 18
	01 00 00	 mov	 QWORD PTR end$[rsp], rax

; 392  :             switch (c) {

  00647	8b 44 24 70	 mov	 eax, DWORD PTR c$20804[rsp]
  0064b	89 84 24 d0 00
	00 00		 mov	 DWORD PTR tv271[rsp], eax
  00652	8b 84 24 d0 00
	00 00		 mov	 eax, DWORD PTR tv271[rsp]
  00659	83 e8 22	 sub	 eax, 34			; 00000022H
  0065c	89 84 24 d0 00
	00 00		 mov	 DWORD PTR tv271[rsp], eax
  00663	83 bc 24 d0 00
	00 00 52	 cmp	 DWORD PTR tv271[rsp], 82 ; 00000052H
  0066b	77 5a		 ja	 SHORT $LN59@scanstring
  0066d	8b 84 24 d0 00
	00 00		 mov	 eax, DWORD PTR tv271[rsp]
  00674	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  0067b	0f b6 84 01 00
	00 00 00	 movzx	 eax, BYTE PTR $LN141@scanstring[rcx+rax]
  00683	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN142@scanstring[rcx+rax*4]
  0068a	48 03 c1	 add	 rax, rcx
  0068d	ff e0		 jmp	 rax
$LN67@scanstring:

; 393  :                 case '"': break;

  0068f	eb 3e		 jmp	 SHORT $LN68@scanstring
$LN66@scanstring:

; 394  :                 case '\\': break;

  00691	eb 3c		 jmp	 SHORT $LN68@scanstring
$LN65@scanstring:

; 395  :                 case '/': break;

  00693	eb 3a		 jmp	 SHORT $LN68@scanstring
$LN64@scanstring:

; 396  :                 case 'b': c = '\b'; break;

  00695	c7 44 24 70 08
	00 00 00	 mov	 DWORD PTR c$20804[rsp], 8
  0069d	eb 30		 jmp	 SHORT $LN68@scanstring
$LN63@scanstring:

; 397  :                 case 'f': c = '\f'; break;

  0069f	c7 44 24 70 0c
	00 00 00	 mov	 DWORD PTR c$20804[rsp], 12
  006a7	eb 26		 jmp	 SHORT $LN68@scanstring
$LN62@scanstring:

; 398  :                 case 'n': c = '\n'; break;

  006a9	c7 44 24 70 0a
	00 00 00	 mov	 DWORD PTR c$20804[rsp], 10
  006b1	eb 1c		 jmp	 SHORT $LN68@scanstring
$LN61@scanstring:

; 399  :                 case 'r': c = '\r'; break;

  006b3	c7 44 24 70 0d
	00 00 00	 mov	 DWORD PTR c$20804[rsp], 13
  006bb	eb 12		 jmp	 SHORT $LN68@scanstring
$LN60@scanstring:

; 400  :                 case 't': c = '\t'; break;

  006bd	c7 44 24 70 09
	00 00 00	 mov	 DWORD PTR c$20804[rsp], 9
  006c5	eb 08		 jmp	 SHORT $LN68@scanstring
$LN59@scanstring:

; 401  :                 default: c = 0;

  006c7	c7 44 24 70 00
	00 00 00	 mov	 DWORD PTR c$20804[rsp], 0
$LN68@scanstring:

; 402  :             }
; 403  :             if (c == 0) {

  006cf	83 7c 24 70 00	 cmp	 DWORD PTR c$20804[rsp], 0
  006d4	75 28		 jne	 SHORT $LN58@scanstring

; 404  :                 raise_errmsg("Invalid \\escape", pystr, end - 2);

  006d6	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR end$[rsp]
  006de	48 83 e8 02	 sub	 rax, 2
  006e2	4c 8b c0	 mov	 r8, rax
  006e5	48 8b 94 24 10
	01 00 00	 mov	 rdx, QWORD PTR pystr$[rsp]
  006ed	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BA@JFDKNFEA@Invalid?5?2escape?$AA@
  006f4	e8 00 00 00 00	 call	 raise_errmsg

; 405  :                 goto bail;

  006f9	e9 4a 07 00 00	 jmp	 $bail$20800
$LN58@scanstring:

; 406  :             }
; 407  :         }
; 408  :         else {

  006fe	e9 03 05 00 00	 jmp	 $LN57@scanstring
$LN70@scanstring:

; 409  :             c = 0;

  00703	c7 44 24 70 00
	00 00 00	 mov	 DWORD PTR c$20804[rsp], 0

; 410  :             next++;

  0070b	48 8b 44 24 50	 mov	 rax, QWORD PTR next$[rsp]
  00710	48 ff c0	 inc	 rax
  00713	48 89 44 24 50	 mov	 QWORD PTR next$[rsp], rax

; 411  :             end = next + 4;

  00718	48 8b 44 24 50	 mov	 rax, QWORD PTR next$[rsp]
  0071d	48 83 c0 04	 add	 rax, 4
  00721	48 89 84 24 18
	01 00 00	 mov	 QWORD PTR end$[rsp], rax

; 412  :             if (end >= len) {

  00729	48 8b 44 24 58	 mov	 rax, QWORD PTR len$[rsp]
  0072e	48 39 84 24 18
	01 00 00	 cmp	 QWORD PTR end$[rsp], rax
  00736	7c 24		 jl	 SHORT $LN56@scanstring

; 413  :                 raise_errmsg("Invalid \\uXXXX escape", pystr, next - 1);

  00738	48 8b 44 24 50	 mov	 rax, QWORD PTR next$[rsp]
  0073d	48 ff c8	 dec	 rax
  00740	4c 8b c0	 mov	 r8, rax
  00743	48 8b 94 24 10
	01 00 00	 mov	 rdx, QWORD PTR pystr$[rsp]
  0074b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@HFBFLOEL@Invalid?5?2uXXXX?5escape?$AA@
  00752	e8 00 00 00 00	 call	 raise_errmsg

; 414  :                 goto bail;

  00757	e9 ec 06 00 00	 jmp	 $bail$20800
$LN56@scanstring:

; 415  :             }
; 416  :             /* Decode 4 hex digits */
; 417  :             for (; next < end; next++) {

  0075c	eb 0d		 jmp	 SHORT $LN55@scanstring
$LN54@scanstring:
  0075e	48 8b 44 24 50	 mov	 rax, QWORD PTR next$[rsp]
  00763	48 ff c0	 inc	 rax
  00766	48 89 44 24 50	 mov	 QWORD PTR next$[rsp], rax
$LN55@scanstring:
  0076b	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR end$[rsp]
  00773	48 39 44 24 50	 cmp	 QWORD PTR next$[rsp], rax
  00778	0f 8d 3c 01 00
	00		 jge	 $LN53@scanstring

; 418  :                 Py_UCS4 digit = PyUnicode_READ(kind, buf, next);

  0077e	83 7c 24 30 01	 cmp	 DWORD PTR kind$[rsp], 1
  00783	75 1c		 jne	 SHORT $LN123@scanstring
  00785	48 8b 44 24 50	 mov	 rax, QWORD PTR next$[rsp]
  0078a	48 8b 4c 24 68	 mov	 rcx, QWORD PTR buf$[rsp]
  0078f	48 03 c8	 add	 rcx, rax
  00792	48 8b c1	 mov	 rax, rcx
  00795	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00798	89 84 24 d4 00
	00 00		 mov	 DWORD PTR tv298[rsp], eax
  0079f	eb 40		 jmp	 SHORT $LN124@scanstring
$LN123@scanstring:
  007a1	83 7c 24 30 02	 cmp	 DWORD PTR kind$[rsp], 2
  007a6	75 17		 jne	 SHORT $LN121@scanstring
  007a8	48 8b 44 24 68	 mov	 rax, QWORD PTR buf$[rsp]
  007ad	48 8b 4c 24 50	 mov	 rcx, QWORD PTR next$[rsp]
  007b2	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  007b6	89 84 24 d8 00
	00 00		 mov	 DWORD PTR tv297[rsp], eax
  007bd	eb 14		 jmp	 SHORT $LN122@scanstring
$LN121@scanstring:
  007bf	48 8b 44 24 68	 mov	 rax, QWORD PTR buf$[rsp]
  007c4	48 8b 4c 24 50	 mov	 rcx, QWORD PTR next$[rsp]
  007c9	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  007cc	89 84 24 d8 00
	00 00		 mov	 DWORD PTR tv297[rsp], eax
$LN122@scanstring:
  007d3	8b 84 24 d8 00
	00 00		 mov	 eax, DWORD PTR tv297[rsp]
  007da	89 84 24 d4 00
	00 00		 mov	 DWORD PTR tv298[rsp], eax
$LN124@scanstring:
  007e1	8b 84 24 d4 00
	00 00		 mov	 eax, DWORD PTR tv298[rsp]
  007e8	89 84 24 80 00
	00 00		 mov	 DWORD PTR digit$20869[rsp], eax

; 419  :                 c <<= 4;

  007ef	8b 44 24 70	 mov	 eax, DWORD PTR c$20804[rsp]
  007f3	c1 e0 04	 shl	 eax, 4
  007f6	89 44 24 70	 mov	 DWORD PTR c$20804[rsp], eax

; 420  :                 switch (digit) {

  007fa	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR digit$20869[rsp]
  00801	89 84 24 dc 00
	00 00		 mov	 DWORD PTR tv300[rsp], eax
  00808	8b 84 24 dc 00
	00 00		 mov	 eax, DWORD PTR tv300[rsp]
  0080f	83 e8 30	 sub	 eax, 48			; 00000030H
  00812	89 84 24 dc 00
	00 00		 mov	 DWORD PTR tv300[rsp], eax
  00819	83 bc 24 dc 00
	00 00 36	 cmp	 DWORD PTR tv300[rsp], 54 ; 00000036H
  00821	77 6a		 ja	 SHORT $LN47@scanstring
  00823	8b 84 24 dc 00
	00 00		 mov	 eax, DWORD PTR tv300[rsp]
  0082a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  00831	0f b6 84 01 00
	00 00 00	 movzx	 eax, BYTE PTR $LN139@scanstring[rcx+rax]
  00839	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN140@scanstring[rcx+rax*4]
  00840	48 03 c1	 add	 rax, rcx
  00843	ff e0		 jmp	 rax
$LN50@scanstring:

; 421  :                     case '0': case '1': case '2': case '3': case '4':
; 422  :                     case '5': case '6': case '7': case '8': case '9':
; 423  :                         c |= (digit - '0'); break;

  00845	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR digit$20869[rsp]
  0084c	83 e8 30	 sub	 eax, 48			; 00000030H
  0084f	8b 4c 24 70	 mov	 ecx, DWORD PTR c$20804[rsp]
  00853	0b c8		 or	 ecx, eax
  00855	8b c1		 mov	 eax, ecx
  00857	89 44 24 70	 mov	 DWORD PTR c$20804[rsp], eax
  0085b	eb 58		 jmp	 SHORT $LN51@scanstring
$LN49@scanstring:

; 424  :                     case 'a': case 'b': case 'c': case 'd': case 'e':
; 425  :                     case 'f':
; 426  :                         c |= (digit - 'a' + 10); break;

  0085d	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR digit$20869[rsp]
  00864	83 e8 57	 sub	 eax, 87			; 00000057H
  00867	8b 4c 24 70	 mov	 ecx, DWORD PTR c$20804[rsp]
  0086b	0b c8		 or	 ecx, eax
  0086d	8b c1		 mov	 eax, ecx
  0086f	89 44 24 70	 mov	 DWORD PTR c$20804[rsp], eax
  00873	eb 40		 jmp	 SHORT $LN51@scanstring
$LN48@scanstring:

; 427  :                     case 'A': case 'B': case 'C': case 'D': case 'E':
; 428  :                     case 'F':
; 429  :                         c |= (digit - 'A' + 10); break;

  00875	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR digit$20869[rsp]
  0087c	83 e8 37	 sub	 eax, 55			; 00000037H
  0087f	8b 4c 24 70	 mov	 ecx, DWORD PTR c$20804[rsp]
  00883	0b c8		 or	 ecx, eax
  00885	8b c1		 mov	 eax, ecx
  00887	89 44 24 70	 mov	 DWORD PTR c$20804[rsp], eax
  0088b	eb 28		 jmp	 SHORT $LN51@scanstring
$LN47@scanstring:

; 430  :                     default:
; 431  :                         raise_errmsg("Invalid \\uXXXX escape", pystr, end - 5);

  0088d	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR end$[rsp]
  00895	48 83 e8 05	 sub	 rax, 5
  00899	4c 8b c0	 mov	 r8, rax
  0089c	48 8b 94 24 10
	01 00 00	 mov	 rdx, QWORD PTR pystr$[rsp]
  008a4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@HFBFLOEL@Invalid?5?2uXXXX?5escape?$AA@
  008ab	e8 00 00 00 00	 call	 raise_errmsg

; 432  :                         goto bail;

  008b0	e9 93 05 00 00	 jmp	 $bail$20800
$LN51@scanstring:

; 433  :                 }
; 434  :             }

  008b5	e9 a4 fe ff ff	 jmp	 $LN54@scanstring
$LN53@scanstring:

; 435  :             /* Surrogate pair */
; 436  :             if (Py_UNICODE_IS_HIGH_SURROGATE(c) && end + 6 < len &&
; 437  :                 PyUnicode_READ(kind, buf, next++) == '\\' &&
; 438  :                 PyUnicode_READ(kind, buf, next++) == 'u') {

  008ba	81 7c 24 70 00
	d8 00 00	 cmp	 DWORD PTR c$20804[rsp], 55296 ; 0000d800H
  008c2	0f 82 3e 03 00
	00		 jb	 $LN46@scanstring
  008c8	81 7c 24 70 ff
	db 00 00	 cmp	 DWORD PTR c$20804[rsp], 56319 ; 0000dbffH
  008d0	0f 87 30 03 00
	00		 ja	 $LN46@scanstring
  008d6	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR end$[rsp]
  008de	48 83 c0 06	 add	 rax, 6
  008e2	48 3b 44 24 58	 cmp	 rax, QWORD PTR len$[rsp]
  008e7	0f 8d 19 03 00
	00		 jge	 $LN46@scanstring
  008ed	83 7c 24 30 01	 cmp	 DWORD PTR kind$[rsp], 1
  008f2	75 29		 jne	 SHORT $LN127@scanstring
  008f4	48 8b 44 24 50	 mov	 rax, QWORD PTR next$[rsp]
  008f9	48 8b 4c 24 68	 mov	 rcx, QWORD PTR buf$[rsp]
  008fe	48 03 c8	 add	 rcx, rax
  00901	48 8b c1	 mov	 rax, rcx
  00904	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00907	89 84 24 e0 00
	00 00		 mov	 DWORD PTR tv332[rsp], eax
  0090e	48 8b 44 24 50	 mov	 rax, QWORD PTR next$[rsp]
  00913	48 ff c0	 inc	 rax
  00916	48 89 44 24 50	 mov	 QWORD PTR next$[rsp], rax
  0091b	eb 5a		 jmp	 SHORT $LN128@scanstring
$LN127@scanstring:
  0091d	83 7c 24 30 02	 cmp	 DWORD PTR kind$[rsp], 2
  00922	75 24		 jne	 SHORT $LN125@scanstring
  00924	48 8b 44 24 68	 mov	 rax, QWORD PTR buf$[rsp]
  00929	48 8b 4c 24 50	 mov	 rcx, QWORD PTR next$[rsp]
  0092e	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  00932	89 84 24 e4 00
	00 00		 mov	 DWORD PTR tv331[rsp], eax
  00939	48 8b 44 24 50	 mov	 rax, QWORD PTR next$[rsp]
  0093e	48 ff c0	 inc	 rax
  00941	48 89 44 24 50	 mov	 QWORD PTR next$[rsp], rax
  00946	eb 21		 jmp	 SHORT $LN126@scanstring
$LN125@scanstring:
  00948	48 8b 44 24 68	 mov	 rax, QWORD PTR buf$[rsp]
  0094d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR next$[rsp]
  00952	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  00955	89 84 24 e4 00
	00 00		 mov	 DWORD PTR tv331[rsp], eax
  0095c	48 8b 44 24 50	 mov	 rax, QWORD PTR next$[rsp]
  00961	48 ff c0	 inc	 rax
  00964	48 89 44 24 50	 mov	 QWORD PTR next$[rsp], rax
$LN126@scanstring:
  00969	8b 84 24 e4 00
	00 00		 mov	 eax, DWORD PTR tv331[rsp]
  00970	89 84 24 e0 00
	00 00		 mov	 DWORD PTR tv332[rsp], eax
$LN128@scanstring:
  00977	83 bc 24 e0 00
	00 00 5c	 cmp	 DWORD PTR tv332[rsp], 92 ; 0000005cH
  0097f	0f 85 81 02 00
	00		 jne	 $LN46@scanstring
  00985	83 7c 24 30 01	 cmp	 DWORD PTR kind$[rsp], 1
  0098a	75 29		 jne	 SHORT $LN131@scanstring
  0098c	48 8b 44 24 50	 mov	 rax, QWORD PTR next$[rsp]
  00991	48 8b 4c 24 68	 mov	 rcx, QWORD PTR buf$[rsp]
  00996	48 03 c8	 add	 rcx, rax
  00999	48 8b c1	 mov	 rax, rcx
  0099c	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0099f	89 84 24 e8 00
	00 00		 mov	 DWORD PTR tv347[rsp], eax
  009a6	48 8b 44 24 50	 mov	 rax, QWORD PTR next$[rsp]
  009ab	48 ff c0	 inc	 rax
  009ae	48 89 44 24 50	 mov	 QWORD PTR next$[rsp], rax
  009b3	eb 5a		 jmp	 SHORT $LN132@scanstring
$LN131@scanstring:
  009b5	83 7c 24 30 02	 cmp	 DWORD PTR kind$[rsp], 2
  009ba	75 24		 jne	 SHORT $LN129@scanstring
  009bc	48 8b 44 24 68	 mov	 rax, QWORD PTR buf$[rsp]
  009c1	48 8b 4c 24 50	 mov	 rcx, QWORD PTR next$[rsp]
  009c6	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  009ca	89 84 24 ec 00
	00 00		 mov	 DWORD PTR tv346[rsp], eax
  009d1	48 8b 44 24 50	 mov	 rax, QWORD PTR next$[rsp]
  009d6	48 ff c0	 inc	 rax
  009d9	48 89 44 24 50	 mov	 QWORD PTR next$[rsp], rax
  009de	eb 21		 jmp	 SHORT $LN130@scanstring
$LN129@scanstring:
  009e0	48 8b 44 24 68	 mov	 rax, QWORD PTR buf$[rsp]
  009e5	48 8b 4c 24 50	 mov	 rcx, QWORD PTR next$[rsp]
  009ea	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  009ed	89 84 24 ec 00
	00 00		 mov	 DWORD PTR tv346[rsp], eax
  009f4	48 8b 44 24 50	 mov	 rax, QWORD PTR next$[rsp]
  009f9	48 ff c0	 inc	 rax
  009fc	48 89 44 24 50	 mov	 QWORD PTR next$[rsp], rax
$LN130@scanstring:
  00a01	8b 84 24 ec 00
	00 00		 mov	 eax, DWORD PTR tv346[rsp]
  00a08	89 84 24 e8 00
	00 00		 mov	 DWORD PTR tv347[rsp], eax
$LN132@scanstring:
  00a0f	83 bc 24 e8 00
	00 00 75	 cmp	 DWORD PTR tv347[rsp], 117 ; 00000075H
  00a17	0f 85 e9 01 00
	00		 jne	 $LN46@scanstring

; 439  :                 Py_UCS4 c2 = 0;

  00a1d	c7 84 24 84 00
	00 00 00 00 00
	00		 mov	 DWORD PTR c2$20891[rsp], 0

; 440  :                 end += 6;

  00a28	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR end$[rsp]
  00a30	48 83 c0 06	 add	 rax, 6
  00a34	48 89 84 24 18
	01 00 00	 mov	 QWORD PTR end$[rsp], rax

; 441  :                 /* Decode 4 hex digits */
; 442  :                 for (; next < end; next++) {

  00a3c	eb 0d		 jmp	 SHORT $LN45@scanstring
$LN44@scanstring:
  00a3e	48 8b 44 24 50	 mov	 rax, QWORD PTR next$[rsp]
  00a43	48 ff c0	 inc	 rax
  00a46	48 89 44 24 50	 mov	 QWORD PTR next$[rsp], rax
$LN45@scanstring:
  00a4b	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR end$[rsp]
  00a53	48 39 44 24 50	 cmp	 QWORD PTR next$[rsp], rax
  00a58	0f 8d 54 01 00
	00		 jge	 $LN43@scanstring

; 443  :                     Py_UCS4 digit = PyUnicode_READ(kind, buf, next);

  00a5e	83 7c 24 30 01	 cmp	 DWORD PTR kind$[rsp], 1
  00a63	75 1c		 jne	 SHORT $LN135@scanstring
  00a65	48 8b 44 24 50	 mov	 rax, QWORD PTR next$[rsp]
  00a6a	48 8b 4c 24 68	 mov	 rcx, QWORD PTR buf$[rsp]
  00a6f	48 03 c8	 add	 rcx, rax
  00a72	48 8b c1	 mov	 rax, rcx
  00a75	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00a78	89 84 24 f0 00
	00 00		 mov	 DWORD PTR tv362[rsp], eax
  00a7f	eb 40		 jmp	 SHORT $LN136@scanstring
$LN135@scanstring:
  00a81	83 7c 24 30 02	 cmp	 DWORD PTR kind$[rsp], 2
  00a86	75 17		 jne	 SHORT $LN133@scanstring
  00a88	48 8b 44 24 68	 mov	 rax, QWORD PTR buf$[rsp]
  00a8d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR next$[rsp]
  00a92	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  00a96	89 84 24 f4 00
	00 00		 mov	 DWORD PTR tv361[rsp], eax
  00a9d	eb 14		 jmp	 SHORT $LN134@scanstring
$LN133@scanstring:
  00a9f	48 8b 44 24 68	 mov	 rax, QWORD PTR buf$[rsp]
  00aa4	48 8b 4c 24 50	 mov	 rcx, QWORD PTR next$[rsp]
  00aa9	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  00aac	89 84 24 f4 00
	00 00		 mov	 DWORD PTR tv361[rsp], eax
$LN134@scanstring:
  00ab3	8b 84 24 f4 00
	00 00		 mov	 eax, DWORD PTR tv361[rsp]
  00aba	89 84 24 f0 00
	00 00		 mov	 DWORD PTR tv362[rsp], eax
$LN136@scanstring:
  00ac1	8b 84 24 f0 00
	00 00		 mov	 eax, DWORD PTR tv362[rsp]
  00ac8	89 84 24 88 00
	00 00		 mov	 DWORD PTR digit$20895[rsp], eax

; 444  :                     c2 <<= 4;

  00acf	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR c2$20891[rsp]
  00ad6	c1 e0 04	 shl	 eax, 4
  00ad9	89 84 24 84 00
	00 00		 mov	 DWORD PTR c2$20891[rsp], eax

; 445  :                     switch (digit) {

  00ae0	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR digit$20895[rsp]
  00ae7	89 84 24 f8 00
	00 00		 mov	 DWORD PTR tv364[rsp], eax
  00aee	8b 84 24 f8 00
	00 00		 mov	 eax, DWORD PTR tv364[rsp]
  00af5	83 e8 30	 sub	 eax, 48			; 00000030H
  00af8	89 84 24 f8 00
	00 00		 mov	 DWORD PTR tv364[rsp], eax
  00aff	83 bc 24 f8 00
	00 00 36	 cmp	 DWORD PTR tv364[rsp], 54 ; 00000036H
  00b07	77 7c		 ja	 SHORT $LN37@scanstring
  00b09	8b 84 24 f8 00
	00 00		 mov	 eax, DWORD PTR tv364[rsp]
  00b10	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  00b17	0f b6 84 01 00
	00 00 00	 movzx	 eax, BYTE PTR $LN137@scanstring[rcx+rax]
  00b1f	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN138@scanstring[rcx+rax*4]
  00b26	48 03 c1	 add	 rax, rcx
  00b29	ff e0		 jmp	 rax
$LN40@scanstring:

; 446  :                         case '0': case '1': case '2': case '3': case '4':
; 447  :                         case '5': case '6': case '7': case '8': case '9':
; 448  :                             c2 |= (digit - '0'); break;

  00b2b	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR digit$20895[rsp]
  00b32	83 e8 30	 sub	 eax, 48			; 00000030H
  00b35	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR c2$20891[rsp]
  00b3c	0b c8		 or	 ecx, eax
  00b3e	8b c1		 mov	 eax, ecx
  00b40	89 84 24 84 00
	00 00		 mov	 DWORD PTR c2$20891[rsp], eax
  00b47	eb 64		 jmp	 SHORT $LN41@scanstring
$LN39@scanstring:

; 449  :                         case 'a': case 'b': case 'c': case 'd': case 'e':
; 450  :                         case 'f':
; 451  :                             c2 |= (digit - 'a' + 10); break;

  00b49	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR digit$20895[rsp]
  00b50	83 e8 57	 sub	 eax, 87			; 00000057H
  00b53	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR c2$20891[rsp]
  00b5a	0b c8		 or	 ecx, eax
  00b5c	8b c1		 mov	 eax, ecx
  00b5e	89 84 24 84 00
	00 00		 mov	 DWORD PTR c2$20891[rsp], eax
  00b65	eb 46		 jmp	 SHORT $LN41@scanstring
$LN38@scanstring:

; 452  :                         case 'A': case 'B': case 'C': case 'D': case 'E':
; 453  :                         case 'F':
; 454  :                             c2 |= (digit - 'A' + 10); break;

  00b67	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR digit$20895[rsp]
  00b6e	83 e8 37	 sub	 eax, 55			; 00000037H
  00b71	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR c2$20891[rsp]
  00b78	0b c8		 or	 ecx, eax
  00b7a	8b c1		 mov	 eax, ecx
  00b7c	89 84 24 84 00
	00 00		 mov	 DWORD PTR c2$20891[rsp], eax
  00b83	eb 28		 jmp	 SHORT $LN41@scanstring
$LN37@scanstring:

; 455  :                         default:
; 456  :                             raise_errmsg("Invalid \\uXXXX escape", pystr, end - 5);

  00b85	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR end$[rsp]
  00b8d	48 83 e8 05	 sub	 rax, 5
  00b91	4c 8b c0	 mov	 r8, rax
  00b94	48 8b 94 24 10
	01 00 00	 mov	 rdx, QWORD PTR pystr$[rsp]
  00b9c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@HFBFLOEL@Invalid?5?2uXXXX?5escape?$AA@
  00ba3	e8 00 00 00 00	 call	 raise_errmsg

; 457  :                             goto bail;

  00ba8	e9 9b 02 00 00	 jmp	 $bail$20800
$LN41@scanstring:

; 458  :                     }
; 459  :                 }

  00bad	e9 8c fe ff ff	 jmp	 $LN44@scanstring
$LN43@scanstring:

; 460  :                 if (Py_UNICODE_IS_LOW_SURROGATE(c2))

  00bb2	81 bc 24 84 00
	00 00 00 dc 00
	00		 cmp	 DWORD PTR c2$20891[rsp], 56320 ; 0000dc00H
  00bbd	72 33		 jb	 SHORT $LN36@scanstring
  00bbf	81 bc 24 84 00
	00 00 ff df 00
	00		 cmp	 DWORD PTR c2$20891[rsp], 57343 ; 0000dfffH
  00bca	77 26		 ja	 SHORT $LN36@scanstring

; 461  :                     c = Py_UNICODE_JOIN_SURROGATES(c, c2);

  00bcc	8b 44 24 70	 mov	 eax, DWORD PTR c$20804[rsp]
  00bd0	25 ff 03 00 00	 and	 eax, 1023		; 000003ffH
  00bd5	c1 e0 0a	 shl	 eax, 10
  00bd8	8b 8c 24 84 00
	00 00		 mov	 ecx, DWORD PTR c2$20891[rsp]
  00bdf	81 e1 ff 03 00
	00		 and	 ecx, 1023		; 000003ffH
  00be5	0b c1		 or	 eax, ecx
  00be7	05 00 00 01 00	 add	 eax, 65536		; 00010000H
  00bec	89 44 24 70	 mov	 DWORD PTR c$20804[rsp], eax

; 462  :                 else

  00bf0	eb 14		 jmp	 SHORT $LN35@scanstring
$LN36@scanstring:

; 463  :                     end -= 6;

  00bf2	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR end$[rsp]
  00bfa	48 83 e8 06	 sub	 rax, 6
  00bfe	48 89 84 24 18
	01 00 00	 mov	 QWORD PTR end$[rsp], rax
$LN35@scanstring:
$LN46@scanstring:
$LN57@scanstring:

; 464  :             }
; 465  :         }
; 466  :         APPEND_OLD_CHUNK

  00c06	48 83 7c 24 48
	00		 cmp	 QWORD PTR chunk$[rsp], 0
  00c0c	0f 84 9e 00 00
	00		 je	 $LN34@scanstring
  00c12	48 83 7c 24 60
	00		 cmp	 QWORD PTR chunks$[rsp], 0
  00c18	75 19		 jne	 SHORT $LN33@scanstring
  00c1a	33 c9		 xor	 ecx, ecx
  00c1c	e8 00 00 00 00	 call	 PyList_New
  00c21	48 89 44 24 60	 mov	 QWORD PTR chunks$[rsp], rax
  00c26	48 83 7c 24 60
	00		 cmp	 QWORD PTR chunks$[rsp], 0
  00c2c	75 05		 jne	 SHORT $LN32@scanstring
  00c2e	e9 15 02 00 00	 jmp	 $bail$20800
$LN32@scanstring:
$LN33@scanstring:
  00c33	48 8b 54 24 48	 mov	 rdx, QWORD PTR chunk$[rsp]
  00c38	48 8b 4c 24 60	 mov	 rcx, QWORD PTR chunks$[rsp]
  00c3d	e8 00 00 00 00	 call	 PyList_Append
  00c42	85 c0		 test	 eax, eax
  00c44	74 0f		 je	 SHORT $LN31@scanstring
  00c46	48 8b 4c 24 48	 mov	 rcx, QWORD PTR chunk$[rsp]
  00c4b	e8 00 00 00 00	 call	 _Py_DecRef
  00c50	e9 f3 01 00 00	 jmp	 $bail$20800
$LN31@scanstring:
$LN30@scanstring:
  00c55	48 83 7c 24 48
	00		 cmp	 QWORD PTR chunk$[rsp], 0
  00c5b	74 4d		 je	 SHORT $LN27@scanstring
  00c5d	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00c65	4c 8b 4c 24 48	 mov	 r9, QWORD PTR chunk$[rsp]
  00c6a	41 b8 d2 01 00
	00		 mov	 r8d, 466		; 000001d2H
  00c70	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@BIGPLMIN@?4?4?2Modules?2_json?4c?$AA@
  00c77	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@PDCADMBJ@scanstring_unicode?$AA@
  00c7e	e8 00 00 00 00	 call	 _PyParallel_Guard
  00c83	85 c0		 test	 eax, eax
  00c85	75 23		 jne	 SHORT $LN27@scanstring
  00c87	48 8b 44 24 48	 mov	 rax, QWORD PTR chunk$[rsp]
  00c8c	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR _py_tmp$20924[rsp], rax
  00c94	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR chunk$[rsp], 0
  00c9d	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR _py_tmp$20924[rsp]
  00ca5	e8 00 00 00 00	 call	 _Py_DecRef
$LN27@scanstring:
  00caa	33 c0		 xor	 eax, eax
  00cac	85 c0		 test	 eax, eax
  00cae	75 a5		 jne	 SHORT $LN30@scanstring
$LN34@scanstring:

; 467  :         chunk = PyUnicode_FromKindAndData(PyUnicode_4BYTE_KIND, &c, 1);

  00cb0	41 b8 01 00 00
	00		 mov	 r8d, 1
  00cb6	48 8d 54 24 70	 lea	 rdx, QWORD PTR c$20804[rsp]
  00cbb	b9 04 00 00 00	 mov	 ecx, 4
  00cc0	e8 00 00 00 00	 call	 PyUnicode_FromKindAndData
  00cc5	48 89 44 24 48	 mov	 QWORD PTR chunk$[rsp], rax

; 468  :         if (chunk == NULL) {

  00cca	48 83 7c 24 48
	00		 cmp	 QWORD PTR chunk$[rsp], 0
  00cd0	75 05		 jne	 SHORT $LN26@scanstring

; 469  :             goto bail;

  00cd2	e9 71 01 00 00	 jmp	 $bail$20800
$LN26@scanstring:

; 470  :         }
; 471  :     }

  00cd7	e9 6f f6 ff ff	 jmp	 $LN92@scanstring
$LN91@scanstring:

; 472  : 
; 473  :     if (chunks == NULL) {

  00cdc	48 83 7c 24 60
	00		 cmp	 QWORD PTR chunks$[rsp], 0
  00ce2	75 2c		 jne	 SHORT $LN25@scanstring

; 474  :         if (chunk != NULL)

  00ce4	48 83 7c 24 48
	00		 cmp	 QWORD PTR chunk$[rsp], 0
  00cea	74 0c		 je	 SHORT $LN24@scanstring

; 475  :             rval = chunk;

  00cec	48 8b 44 24 48	 mov	 rax, QWORD PTR chunk$[rsp]
  00cf1	48 89 44 24 40	 mov	 QWORD PTR rval$[rsp], rax

; 476  :         else

  00cf6	eb 13		 jmp	 SHORT $LN23@scanstring
$LN24@scanstring:

; 477  :             rval = PyUnicode_FromStringAndSize("", 0);

  00cf8	33 d2		 xor	 edx, edx
  00cfa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  00d01	e8 00 00 00 00	 call	 PyUnicode_FromStringAndSize
  00d06	48 89 44 24 40	 mov	 QWORD PTR rval$[rsp], rax
$LN23@scanstring:

; 478  :     }
; 479  :     else {

  00d0b	e9 1e 01 00 00	 jmp	 $LN22@scanstring
$LN25@scanstring:

; 480  :         APPEND_OLD_CHUNK

  00d10	48 83 7c 24 48
	00		 cmp	 QWORD PTR chunk$[rsp], 0
  00d16	0f 84 9e 00 00
	00		 je	 $LN21@scanstring
  00d1c	48 83 7c 24 60
	00		 cmp	 QWORD PTR chunks$[rsp], 0
  00d22	75 19		 jne	 SHORT $LN20@scanstring
  00d24	33 c9		 xor	 ecx, ecx
  00d26	e8 00 00 00 00	 call	 PyList_New
  00d2b	48 89 44 24 60	 mov	 QWORD PTR chunks$[rsp], rax
  00d30	48 83 7c 24 60
	00		 cmp	 QWORD PTR chunks$[rsp], 0
  00d36	75 05		 jne	 SHORT $LN19@scanstring
  00d38	e9 0b 01 00 00	 jmp	 $bail$20800
$LN19@scanstring:
$LN20@scanstring:
  00d3d	48 8b 54 24 48	 mov	 rdx, QWORD PTR chunk$[rsp]
  00d42	48 8b 4c 24 60	 mov	 rcx, QWORD PTR chunks$[rsp]
  00d47	e8 00 00 00 00	 call	 PyList_Append
  00d4c	85 c0		 test	 eax, eax
  00d4e	74 0f		 je	 SHORT $LN18@scanstring
  00d50	48 8b 4c 24 48	 mov	 rcx, QWORD PTR chunk$[rsp]
  00d55	e8 00 00 00 00	 call	 _Py_DecRef
  00d5a	e9 e9 00 00 00	 jmp	 $bail$20800
$LN18@scanstring:
$LN17@scanstring:
  00d5f	48 83 7c 24 48
	00		 cmp	 QWORD PTR chunk$[rsp], 0
  00d65	74 4d		 je	 SHORT $LN14@scanstring
  00d67	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00d6f	4c 8b 4c 24 48	 mov	 r9, QWORD PTR chunk$[rsp]
  00d74	41 b8 e0 01 00
	00		 mov	 r8d, 480		; 000001e0H
  00d7a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@BIGPLMIN@?4?4?2Modules?2_json?4c?$AA@
  00d81	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@PDCADMBJ@scanstring_unicode?$AA@
  00d88	e8 00 00 00 00	 call	 _PyParallel_Guard
  00d8d	85 c0		 test	 eax, eax
  00d8f	75 23		 jne	 SHORT $LN14@scanstring
  00d91	48 8b 44 24 48	 mov	 rax, QWORD PTR chunk$[rsp]
  00d96	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR _py_tmp$20948[rsp], rax
  00d9e	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR chunk$[rsp], 0
  00da7	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR _py_tmp$20948[rsp]
  00daf	e8 00 00 00 00	 call	 _Py_DecRef
$LN14@scanstring:
  00db4	33 c0		 xor	 eax, eax
  00db6	85 c0		 test	 eax, eax
  00db8	75 a5		 jne	 SHORT $LN17@scanstring
$LN21@scanstring:

; 481  :         rval = join_list_unicode(chunks);

  00dba	48 8b 4c 24 60	 mov	 rcx, QWORD PTR chunks$[rsp]
  00dbf	e8 00 00 00 00	 call	 join_list_unicode
  00dc4	48 89 44 24 40	 mov	 QWORD PTR rval$[rsp], rax

; 482  :         if (rval == NULL) {

  00dc9	48 83 7c 24 40
	00		 cmp	 QWORD PTR rval$[rsp], 0
  00dcf	75 02		 jne	 SHORT $LN13@scanstring

; 483  :             goto bail;

  00dd1	eb 75		 jmp	 SHORT $bail$20800
$LN13@scanstring:
$LN12@scanstring:

; 484  :         }
; 485  :         Py_CLEAR(chunks);

  00dd3	48 83 7c 24 60
	00		 cmp	 QWORD PTR chunks$[rsp], 0
  00dd9	74 4d		 je	 SHORT $LN9@scanstring
  00ddb	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00de3	4c 8b 4c 24 60	 mov	 r9, QWORD PTR chunks$[rsp]
  00de8	41 b8 e5 01 00
	00		 mov	 r8d, 485		; 000001e5H
  00dee	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@BIGPLMIN@?4?4?2Modules?2_json?4c?$AA@
  00df5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BD@PDCADMBJ@scanstring_unicode?$AA@
  00dfc	e8 00 00 00 00	 call	 _PyParallel_Guard
  00e01	85 c0		 test	 eax, eax
  00e03	75 23		 jne	 SHORT $LN9@scanstring
  00e05	48 8b 44 24 60	 mov	 rax, QWORD PTR chunks$[rsp]
  00e0a	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR _py_tmp$20958[rsp], rax
  00e12	48 c7 44 24 60
	00 00 00 00	 mov	 QWORD PTR chunks$[rsp], 0
  00e1b	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR _py_tmp$20958[rsp]
  00e23	e8 00 00 00 00	 call	 _Py_DecRef
$LN9@scanstring:
  00e28	33 c0		 xor	 eax, eax
  00e2a	85 c0		 test	 eax, eax
  00e2c	75 a5		 jne	 SHORT $LN12@scanstring
$LN22@scanstring:

; 486  :     }
; 487  : 
; 488  :     *next_end_ptr = end;

  00e2e	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR next_end_ptr$[rsp]
  00e36	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR end$[rsp]
  00e3e	48 89 08	 mov	 QWORD PTR [rax], rcx

; 489  :     return rval;

  00e41	48 8b 44 24 40	 mov	 rax, QWORD PTR rval$[rsp]
  00e46	eb 41		 jmp	 SHORT $LN96@scanstring
$bail$20800:

; 490  : bail:
; 491  :     *next_end_ptr = -1;

  00e48	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR next_end_ptr$[rsp]
  00e50	48 c7 00 ff ff
	ff ff		 mov	 QWORD PTR [rax], -1
$LN8@scanstring:

; 492  :     Py_XDECREF(chunks);

  00e57	48 83 7c 24 60
	00		 cmp	 QWORD PTR chunks$[rsp], 0
  00e5d	74 0a		 je	 SHORT $LN5@scanstring
  00e5f	48 8b 4c 24 60	 mov	 rcx, QWORD PTR chunks$[rsp]
  00e64	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@scanstring:
  00e69	33 c0		 xor	 eax, eax
  00e6b	85 c0		 test	 eax, eax
  00e6d	75 e8		 jne	 SHORT $LN8@scanstring
$LN4@scanstring:

; 493  :     Py_XDECREF(chunk);

  00e6f	48 83 7c 24 48
	00		 cmp	 QWORD PTR chunk$[rsp], 0
  00e75	74 0a		 je	 SHORT $LN1@scanstring
  00e77	48 8b 4c 24 48	 mov	 rcx, QWORD PTR chunk$[rsp]
  00e7c	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@scanstring:
  00e81	33 c0		 xor	 eax, eax
  00e83	85 c0		 test	 eax, eax
  00e85	75 e8		 jne	 SHORT $LN4@scanstring

; 494  :     return NULL;

  00e87	33 c0		 xor	 eax, eax
$LN96@scanstring:

; 495  : }

  00e89	48 81 c4 08 01
	00 00		 add	 rsp, 264		; 00000108H
  00e90	c3		 ret	 0
  00e91	0f 1f 00	 npad	 3
$LN142@scanstring:
  00e94	00 00 00 00	 DD	 $LN67@scanstring
  00e98	00 00 00 00	 DD	 $LN65@scanstring
  00e9c	00 00 00 00	 DD	 $LN66@scanstring
  00ea0	00 00 00 00	 DD	 $LN64@scanstring
  00ea4	00 00 00 00	 DD	 $LN63@scanstring
  00ea8	00 00 00 00	 DD	 $LN62@scanstring
  00eac	00 00 00 00	 DD	 $LN61@scanstring
  00eb0	00 00 00 00	 DD	 $LN60@scanstring
  00eb4	00 00 00 00	 DD	 $LN59@scanstring
$LN141@scanstring:
  00eb8	00		 DB	 0
  00eb9	08		 DB	 8
  00eba	08		 DB	 8
  00ebb	08		 DB	 8
  00ebc	08		 DB	 8
  00ebd	08		 DB	 8
  00ebe	08		 DB	 8
  00ebf	08		 DB	 8
  00ec0	08		 DB	 8
  00ec1	08		 DB	 8
  00ec2	08		 DB	 8
  00ec3	08		 DB	 8
  00ec4	08		 DB	 8
  00ec5	01		 DB	 1
  00ec6	08		 DB	 8
  00ec7	08		 DB	 8
  00ec8	08		 DB	 8
  00ec9	08		 DB	 8
  00eca	08		 DB	 8
  00ecb	08		 DB	 8
  00ecc	08		 DB	 8
  00ecd	08		 DB	 8
  00ece	08		 DB	 8
  00ecf	08		 DB	 8
  00ed0	08		 DB	 8
  00ed1	08		 DB	 8
  00ed2	08		 DB	 8
  00ed3	08		 DB	 8
  00ed4	08		 DB	 8
  00ed5	08		 DB	 8
  00ed6	08		 DB	 8
  00ed7	08		 DB	 8
  00ed8	08		 DB	 8
  00ed9	08		 DB	 8
  00eda	08		 DB	 8
  00edb	08		 DB	 8
  00edc	08		 DB	 8
  00edd	08		 DB	 8
  00ede	08		 DB	 8
  00edf	08		 DB	 8
  00ee0	08		 DB	 8
  00ee1	08		 DB	 8
  00ee2	08		 DB	 8
  00ee3	08		 DB	 8
  00ee4	08		 DB	 8
  00ee5	08		 DB	 8
  00ee6	08		 DB	 8
  00ee7	08		 DB	 8
  00ee8	08		 DB	 8
  00ee9	08		 DB	 8
  00eea	08		 DB	 8
  00eeb	08		 DB	 8
  00eec	08		 DB	 8
  00eed	08		 DB	 8
  00eee	08		 DB	 8
  00eef	08		 DB	 8
  00ef0	08		 DB	 8
  00ef1	08		 DB	 8
  00ef2	02		 DB	 2
  00ef3	08		 DB	 8
  00ef4	08		 DB	 8
  00ef5	08		 DB	 8
  00ef6	08		 DB	 8
  00ef7	08		 DB	 8
  00ef8	03		 DB	 3
  00ef9	08		 DB	 8
  00efa	08		 DB	 8
  00efb	08		 DB	 8
  00efc	04		 DB	 4
  00efd	08		 DB	 8
  00efe	08		 DB	 8
  00eff	08		 DB	 8
  00f00	08		 DB	 8
  00f01	08		 DB	 8
  00f02	08		 DB	 8
  00f03	08		 DB	 8
  00f04	05		 DB	 5
  00f05	08		 DB	 8
  00f06	08		 DB	 8
  00f07	08		 DB	 8
  00f08	06		 DB	 6
  00f09	08		 DB	 8
  00f0a	07		 DB	 7
  00f0b	90		 npad	 1
$LN140@scanstring:
  00f0c	00 00 00 00	 DD	 $LN50@scanstring
  00f10	00 00 00 00	 DD	 $LN48@scanstring
  00f14	00 00 00 00	 DD	 $LN49@scanstring
  00f18	00 00 00 00	 DD	 $LN47@scanstring
$LN139@scanstring:
  00f1c	00		 DB	 0
  00f1d	00		 DB	 0
  00f1e	00		 DB	 0
  00f1f	00		 DB	 0
  00f20	00		 DB	 0
  00f21	00		 DB	 0
  00f22	00		 DB	 0
  00f23	00		 DB	 0
  00f24	00		 DB	 0
  00f25	00		 DB	 0
  00f26	03		 DB	 3
  00f27	03		 DB	 3
  00f28	03		 DB	 3
  00f29	03		 DB	 3
  00f2a	03		 DB	 3
  00f2b	03		 DB	 3
  00f2c	03		 DB	 3
  00f2d	01		 DB	 1
  00f2e	01		 DB	 1
  00f2f	01		 DB	 1
  00f30	01		 DB	 1
  00f31	01		 DB	 1
  00f32	01		 DB	 1
  00f33	03		 DB	 3
  00f34	03		 DB	 3
  00f35	03		 DB	 3
  00f36	03		 DB	 3
  00f37	03		 DB	 3
  00f38	03		 DB	 3
  00f39	03		 DB	 3
  00f3a	03		 DB	 3
  00f3b	03		 DB	 3
  00f3c	03		 DB	 3
  00f3d	03		 DB	 3
  00f3e	03		 DB	 3
  00f3f	03		 DB	 3
  00f40	03		 DB	 3
  00f41	03		 DB	 3
  00f42	03		 DB	 3
  00f43	03		 DB	 3
  00f44	03		 DB	 3
  00f45	03		 DB	 3
  00f46	03		 DB	 3
  00f47	03		 DB	 3
  00f48	03		 DB	 3
  00f49	03		 DB	 3
  00f4a	03		 DB	 3
  00f4b	03		 DB	 3
  00f4c	03		 DB	 3
  00f4d	02		 DB	 2
  00f4e	02		 DB	 2
  00f4f	02		 DB	 2
  00f50	02		 DB	 2
  00f51	02		 DB	 2
  00f52	02		 DB	 2
  00f53	90		 npad	 1
$LN138@scanstring:
  00f54	00 00 00 00	 DD	 $LN40@scanstring
  00f58	00 00 00 00	 DD	 $LN38@scanstring
  00f5c	00 00 00 00	 DD	 $LN39@scanstring
  00f60	00 00 00 00	 DD	 $LN37@scanstring
$LN137@scanstring:
  00f64	00		 DB	 0
  00f65	00		 DB	 0
  00f66	00		 DB	 0
  00f67	00		 DB	 0
  00f68	00		 DB	 0
  00f69	00		 DB	 0
  00f6a	00		 DB	 0
  00f6b	00		 DB	 0
  00f6c	00		 DB	 0
  00f6d	00		 DB	 0
  00f6e	03		 DB	 3
  00f6f	03		 DB	 3
  00f70	03		 DB	 3
  00f71	03		 DB	 3
  00f72	03		 DB	 3
  00f73	03		 DB	 3
  00f74	03		 DB	 3
  00f75	01		 DB	 1
  00f76	01		 DB	 1
  00f77	01		 DB	 1
  00f78	01		 DB	 1
  00f79	01		 DB	 1
  00f7a	01		 DB	 1
  00f7b	03		 DB	 3
  00f7c	03		 DB	 3
  00f7d	03		 DB	 3
  00f7e	03		 DB	 3
  00f7f	03		 DB	 3
  00f80	03		 DB	 3
  00f81	03		 DB	 3
  00f82	03		 DB	 3
  00f83	03		 DB	 3
  00f84	03		 DB	 3
  00f85	03		 DB	 3
  00f86	03		 DB	 3
  00f87	03		 DB	 3
  00f88	03		 DB	 3
  00f89	03		 DB	 3
  00f8a	03		 DB	 3
  00f8b	03		 DB	 3
  00f8c	03		 DB	 3
  00f8d	03		 DB	 3
  00f8e	03		 DB	 3
  00f8f	03		 DB	 3
  00f90	03		 DB	 3
  00f91	03		 DB	 3
  00f92	03		 DB	 3
  00f93	03		 DB	 3
  00f94	03		 DB	 3
  00f95	02		 DB	 2
  00f96	02		 DB	 2
  00f97	02		 DB	 2
  00f98	02		 DB	 2
  00f99	02		 DB	 2
  00f9a	02		 DB	 2
scanstring_unicode ENDP
_TEXT	ENDS
EXTRN	PyUnicode_Join:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$join_list_unicode DD imagerel join_list_unicode
	DD	imagerel join_list_unicode+76
	DD	imagerel $unwind$join_list_unicode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$join_list_unicode DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT join_list_unicode
_TEXT	SEGMENT
lst$ = 48
join_list_unicode PROC					; COMDAT

; 82   : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 83   :     /* return u''.join(lst) */
; 84   :     static PyObject *sep = NULL;
; 85   :     if (sep == NULL) {

  00009	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?sep@?1??join_list_unicode@@9@9, 0
  00011	75 23		 jne	 SHORT $LN2@join_list_

; 86   :         sep = PyUnicode_FromStringAndSize("", 0);

  00013	33 d2		 xor	 edx, edx
  00015	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_00CNPNBAHC@?$AA@
  0001c	e8 00 00 00 00	 call	 PyUnicode_FromStringAndSize
  00021	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?sep@?1??join_list_unicode@@9@9, rax

; 87   :         if (sep == NULL)

  00028	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?sep@?1??join_list_unicode@@9@9, 0
  00030	75 04		 jne	 SHORT $LN1@join_list_

; 88   :             return NULL;

  00032	33 c0		 xor	 eax, eax
  00034	eb 11		 jmp	 SHORT $LN3@join_list_
$LN1@join_list_:
$LN2@join_list_:

; 89   :     }
; 90   :     return PyUnicode_Join(sep, lst);

  00036	48 8b 54 24 30	 mov	 rdx, QWORD PTR lst$[rsp]
  0003b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?sep@?1??join_list_unicode@@9@9
  00042	e8 00 00 00 00	 call	 PyUnicode_Join
$LN3@join_list_:

; 91   : }

  00047	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004b	c3		 ret	 0
join_list_unicode ENDP
_TEXT	ENDS
PUBLIC	??_C@_06FFCKFLJH@?$CIzOO?$CG?$CJ?$AA@		; `string'
PUBLIC	??_C@_06MLKCFIBB@errmsg?$AA@			; `string'
PUBLIC	??_C@_0N@COLOHLIN@json?4decoder?$AA@		; `string'
EXTRN	PyErr_SetObject:PROC
EXTRN	PyObject_CallFunction:PROC
EXTRN	PyObject_GetAttrString:PROC
EXTRN	PyImport_ImportModule:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$raise_errmsg DD imagerel raise_errmsg
	DD	imagerel raise_errmsg+201
	DD	imagerel $unwind$raise_errmsg
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$raise_errmsg DD 011301H
	DD	08213H
xdata	ENDS
;	COMDAT ??_C@_06FFCKFLJH@?$CIzOO?$CG?$CJ?$AA@
CONST	SEGMENT
??_C@_06FFCKFLJH@?$CIzOO?$CG?$CJ?$AA@ DB '(zOO&)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06MLKCFIBB@errmsg?$AA@
CONST	SEGMENT
??_C@_06MLKCFIBB@errmsg?$AA@ DB 'errmsg', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@COLOHLIN@json?4decoder?$AA@
CONST	SEGMENT
??_C@_0N@COLOHLIN@json?4decoder?$AA@ DB 'json.decoder', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT raise_errmsg
_TEXT	SEGMENT
pymsg$ = 48
decoder$20713 = 56
msg$ = 80
s$ = 88
end$ = 96
raise_errmsg PROC					; COMDAT

; 257  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 258  :     /* Use the Python function json.decoder.errmsg to raise a nice
; 259  :     looking ValueError exception */
; 260  :     static PyObject *errmsg_fn = NULL;
; 261  :     PyObject *pymsg;
; 262  :     if (errmsg_fn == NULL) {

  00013	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?errmsg_fn@?1??raise_errmsg@@9@9, 0
  0001b	75 4c		 jne	 SHORT $LN4@raise_errm

; 263  :         PyObject *decoder = PyImport_ImportModule("json.decoder");

  0001d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@COLOHLIN@json?4decoder?$AA@
  00024	e8 00 00 00 00	 call	 PyImport_ImportModule
  00029	48 89 44 24 38	 mov	 QWORD PTR decoder$20713[rsp], rax

; 264  :         if (decoder == NULL)

  0002e	48 83 7c 24 38
	00		 cmp	 QWORD PTR decoder$20713[rsp], 0
  00034	75 05		 jne	 SHORT $LN3@raise_errm

; 265  :             return;

  00036	e9 89 00 00 00	 jmp	 $LN5@raise_errm
$LN3@raise_errm:

; 266  :         errmsg_fn = PyObject_GetAttrString(decoder, "errmsg");

  0003b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06MLKCFIBB@errmsg?$AA@
  00042	48 8b 4c 24 38	 mov	 rcx, QWORD PTR decoder$20713[rsp]
  00047	e8 00 00 00 00	 call	 PyObject_GetAttrString
  0004c	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?errmsg_fn@?1??raise_errmsg@@9@9, rax

; 267  :         Py_DECREF(decoder);

  00053	48 8b 4c 24 38	 mov	 rcx, QWORD PTR decoder$20713[rsp]
  00058	e8 00 00 00 00	 call	 _Py_DecRef

; 268  :         if (errmsg_fn == NULL)

  0005d	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?errmsg_fn@?1??raise_errmsg@@9@9, 0
  00065	75 02		 jne	 SHORT $LN2@raise_errm

; 269  :             return;

  00067	eb 5b		 jmp	 SHORT $LN5@raise_errm
$LN2@raise_errm:
$LN4@raise_errm:

; 270  :     }
; 271  :     pymsg = PyObject_CallFunction(errmsg_fn, "(zOO&)", msg, s, _convertPyInt_FromSsize_t, &end);

  00069	48 8d 44 24 60	 lea	 rax, QWORD PTR end$[rsp]
  0006e	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00073	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_convertPyInt_FromSsize_t
  0007a	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0007f	4c 8b 4c 24 58	 mov	 r9, QWORD PTR s$[rsp]
  00084	4c 8b 44 24 50	 mov	 r8, QWORD PTR msg$[rsp]
  00089	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06FFCKFLJH@?$CIzOO?$CG?$CJ?$AA@
  00090	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?errmsg_fn@?1??raise_errmsg@@9@9
  00097	e8 00 00 00 00	 call	 PyObject_CallFunction
  0009c	48 89 44 24 30	 mov	 QWORD PTR pymsg$[rsp], rax

; 272  :     if (pymsg) {

  000a1	48 83 7c 24 30
	00		 cmp	 QWORD PTR pymsg$[rsp], 0
  000a7	74 1b		 je	 SHORT $LN1@raise_errm

; 273  :         PyErr_SetObject(PyExc_ValueError, pymsg);

  000a9	48 8b 54 24 30	 mov	 rdx, QWORD PTR pymsg$[rsp]
  000ae	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  000b5	e8 00 00 00 00	 call	 PyErr_SetObject

; 274  :         Py_DECREF(pymsg);

  000ba	48 8b 4c 24 30	 mov	 rcx, QWORD PTR pymsg$[rsp]
  000bf	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@raise_errm:
$LN5@raise_errm:

; 275  :     }
; 276  : }

  000c4	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000c8	c3		 ret	 0
raise_errmsg ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_convertPyInt_FromSsize_t DD imagerel _convertPyInt_FromSsize_t
	DD	imagerel _convertPyInt_FromSsize_t+27
	DD	imagerel $unwind$_convertPyInt_FromSsize_t
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_convertPyInt_FromSsize_t DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _convertPyInt_FromSsize_t
_TEXT	SEGMENT
size_ptr$ = 48
_convertPyInt_FromSsize_t PROC				; COMDAT

; 154  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 155  :     /* Py_ssize_t to PyObject converter */
; 156  :     return PyLong_FromSsize_t(*size_ptr);

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR size_ptr$[rsp]
  0000e	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00011	e8 00 00 00 00	 call	 PyLong_FromSsize_t

; 157  : }

  00016	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001a	c3		 ret	 0
_convertPyInt_FromSsize_t ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$py_encode_basestring_ascii DD imagerel py_encode_basestring_ascii
	DD	imagerel py_encode_basestring_ascii+101
	DD	imagerel $unwind$py_encode_basestring_ascii
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$py_encode_basestring_ascii DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT py_encode_basestring_ascii
_TEXT	SEGMENT
rval$ = 32
self$ = 64
pystr$ = 72
py_encode_basestring_ascii PROC				; COMDAT

; 541  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 542  :     PyObject *rval;
; 543  :     /* Return an ASCII-only JSON representation of a Python string */
; 544  :     /* METH_O */
; 545  :     if (PyUnicode_Check(pystr)) {

  0000e	48 8b 44 24 48	 mov	 rax, QWORD PTR pystr$[rsp]
  00013	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00017	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0001d	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00022	85 c0		 test	 eax, eax
  00024	74 11		 je	 SHORT $LN2@py_encode_

; 546  :         rval = ascii_escape_unicode(pystr);

  00026	48 8b 4c 24 48	 mov	 rcx, QWORD PTR pystr$[rsp]
  0002b	e8 00 00 00 00	 call	 ascii_escape_unicode
  00030	48 89 44 24 20	 mov	 QWORD PTR rval$[rsp], rax

; 547  :     }
; 548  :     else {

  00035	eb 24		 jmp	 SHORT $LN1@py_encode_
$LN2@py_encode_:

; 549  :         PyErr_Format(PyExc_TypeError,
; 550  :                      "first argument must be a string, not %.80s",
; 551  :                      Py_TYPE(pystr)->tp_name);

  00037	48 8b 44 24 48	 mov	 rax, QWORD PTR pystr$[rsp]
  0003c	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00040	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  00044	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CL@OIEJEOOL@first?5argument?5must?5be?5a?5string?0@
  0004b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00052	e8 00 00 00 00	 call	 PyErr_Format

; 552  :         return NULL;

  00057	33 c0		 xor	 eax, eax
  00059	eb 05		 jmp	 SHORT $LN3@py_encode_
$LN1@py_encode_:

; 553  :     }
; 554  :     return rval;

  0005b	48 8b 44 24 20	 mov	 rax, QWORD PTR rval$[rsp]
$LN3@py_encode_:

; 555  : }

  00060	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00064	c3		 ret	 0
py_encode_basestring_ascii ENDP
_TEXT	ENDS
PUBLIC	??_C@_1EK@HLDMPLDK@?$AA_?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AAC?$AAo?$AAn?$AAs?$AAi?$AAs?$AAt?$AAe?$AAn?$AAc?$AAy?$AA?$CI?$AAr?$AAv?$AAa?$AAl@ ; `string'
PUBLIC	??_C@_1EK@DBKDDDKN@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AAr?$AAv?$AAa?$AAl?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt?$AAa@ ; `string'
PUBLIC	??_C@_1DC@KOCPPENH@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAr?$AAv?$AAa?$AAl?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CM@GBEOJNDO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAr?$AAv?$AAa?$AAl?$AA?$CJ?$AA?$AA@ ; `string'
EXTRN	_PyUnicode_CheckConsistency:PROC
EXTRN	PyUnicode_New:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$ascii_escape_unicode DD imagerel ascii_escape_unicode
	DD	imagerel ascii_escape_unicode+1897
	DD	imagerel $unwind$ascii_escape_unicode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ascii_escape_unicode DD 020c01H
	DD	017010cH
xdata	ENDS
;	COMDAT ??_C@_1EK@HLDMPLDK@?$AA_?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AAC?$AAo?$AAn?$AAs?$AAi?$AAs?$AAt?$AAe?$AAn?$AAc?$AAy?$AA?$CI?$AAr?$AAv?$AAa?$AAl@
CONST	SEGMENT
??_C@_1EK@HLDMPLDK@?$AA_?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AAC?$AAo?$AAn?$AAs?$AAi?$AAs?$AAt?$AAe?$AAn?$AAc?$AAy?$AA?$CI?$AAr?$AAv?$AAa?$AAl@ DB '_'
	DB	00H, 'P', 00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H
	DB	'o', 00H, 'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e'
	DB	00H, 'c', 00H, 'k', 00H, 'C', 00H, 'o', 00H, 'n', 00H, 's', 00H
	DB	'i', 00H, 's', 00H, 't', 00H, 'e', 00H, 'n', 00H, 'c', 00H, 'y'
	DB	00H, '(', 00H, 'r', 00H, 'v', 00H, 'a', 00H, 'l', 00H, ',', 00H
	DB	' ', 00H, '1', 00H, ')', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1EK@DBKDDDKN@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AAr?$AAv?$AAa?$AAl?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt?$AAa@
CONST	SEGMENT
??_C@_1EK@DBKDDDKN@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AAr?$AAv?$AAa?$AAl?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt?$AAa@ DB '('
	DB	00H, '(', 00H, 'P', 00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H
	DB	'c', 00H, 'o', 00H, 'd', 00H, 'e', 00H, 'O', 00H, 'b', 00H, 'j'
	DB	00H, 'e', 00H, 'c', 00H, 't', 00H, '*', 00H, ')', 00H, '(', 00H
	DB	'r', 00H, 'v', 00H, 'a', 00H, 'l', 00H, ')', 00H, ')', 00H, '-'
	DB	00H, '>', 00H, 'd', 00H, 'a', 00H, 't', 00H, 'a', 00H, '.', 00H
	DB	'a', 00H, 'n', 00H, 'y', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1DC@KOCPPENH@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAr?$AAv?$AAa?$AAl?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DC@KOCPPENH@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAr?$AAv?$AAa?$AAl?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'I', 00H, 'S', 00H, '_', 00H, 'R'
	DB	00H, 'E', 00H, 'A', 00H, 'D', 00H, 'Y', 00H, '(', 00H, 'r', 00H
	DB	'v', 00H, 'a', 00H, 'l', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CM@GBEOJNDO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAr?$AAv?$AAa?$AAl?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CM@GBEOJNDO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAr?$AAv?$AAa?$AAl?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, 'r', 00H, 'v', 00H, 'a', 00H, 'l', 00H
	DB	')', 00H, 00H, 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ascii_escape_unicode
_TEXT	SEGMENT
kind$ = 32
rval$ = 40
i$ = 48
output$ = 56
input$ = 64
output_size$ = 72
input_chars$ = 80
chars$ = 88
c$20653 = 96
c$20691 = 100
tv78 = 104
tv162 = 112
tv171 = 120
tv203 = 128
tv202 = 132
tv209 = 136
tv212 = 140
tv254 = 144
tv263 = 152
tv278 = 160
tv277 = 164
pystr$ = 192
ascii_escape_unicode PROC				; COMDAT

; 198  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H

; 199  :     /* Take a PyUnicode pystr and return a new ASCII-only escaped PyUnicode */
; 200  :     Py_ssize_t i;
; 201  :     Py_ssize_t input_chars;
; 202  :     Py_ssize_t output_size;
; 203  :     Py_ssize_t chars;
; 204  :     PyObject *rval;
; 205  :     void *input;
; 206  :     unsigned char *output;
; 207  :     int kind;
; 208  : 
; 209  :     if (PyUnicode_READY(pystr) == -1)

  0000c	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  00014	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00018	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0001e	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00023	85 c0		 test	 eax, eax
  00025	75 1c		 jne	 SHORT $LN19@ascii_esca
  00027	41 b8 d1 00 00
	00		 mov	 r8d, 209		; 000000d1H
  0002d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@KOELJAMM@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAj?$AAs?$AAo?$AAn?$AA?4?$AAc?$AA?$AA@
  00034	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@GLPHKNNN@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAp?$AAy?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  0003b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00041	33 c0		 xor	 eax, eax
$LN19@ascii_esca:
  00043	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  0004b	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0004e	c1 e8 07	 shr	 eax, 7
  00051	83 e0 01	 and	 eax, 1
  00054	85 c0		 test	 eax, eax
  00056	74 0a		 je	 SHORT $LN20@ascii_esca
  00058	c7 44 24 68 00
	00 00 00	 mov	 DWORD PTR tv78[rsp], 0
  00060	eb 11		 jmp	 SHORT $LN21@ascii_esca
$LN20@ascii_esca:
  00062	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR pystr$[rsp]
  0006a	e8 00 00 00 00	 call	 _PyUnicode_Ready
  0006f	89 44 24 68	 mov	 DWORD PTR tv78[rsp], eax
$LN21@ascii_esca:
  00073	83 7c 24 68 ff	 cmp	 DWORD PTR tv78[rsp], -1
  00078	75 07		 jne	 SHORT $LN16@ascii_esca

; 210  :         return NULL;

  0007a	33 c0		 xor	 eax, eax
  0007c	e9 80 06 00 00	 jmp	 $LN17@ascii_esca
$LN16@ascii_esca:

; 211  : 
; 212  :     input_chars = PyUnicode_GET_LENGTH(pystr);

  00081	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  00089	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0008d	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00093	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00098	85 c0		 test	 eax, eax
  0009a	75 1c		 jne	 SHORT $LN22@ascii_esca
  0009c	41 b8 d4 00 00
	00		 mov	 r8d, 212		; 000000d4H
  000a2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@KOELJAMM@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAj?$AAs?$AAo?$AAn?$AA?4?$AAc?$AA?$AA@
  000a9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@GLPHKNNN@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAp?$AAy?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  000b0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000b6	33 c0		 xor	 eax, eax
$LN22@ascii_esca:
  000b8	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  000c0	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  000c3	c1 e8 07	 shr	 eax, 7
  000c6	83 e0 01	 and	 eax, 1
  000c9	85 c0		 test	 eax, eax
  000cb	75 1c		 jne	 SHORT $LN23@ascii_esca
  000cd	41 b8 d4 00 00
	00		 mov	 r8d, 212		; 000000d4H
  000d3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@KOELJAMM@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAj?$AAs?$AAo?$AAn?$AA?4?$AAc?$AA?$AA@
  000da	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@NACFPDOF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAp?$AAy?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  000e1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000e7	33 c0		 xor	 eax, eax
$LN23@ascii_esca:
  000e9	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  000f1	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000f5	48 89 44 24 50	 mov	 QWORD PTR input_chars$[rsp], rax

; 213  :     input = PyUnicode_DATA(pystr);

  000fa	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  00102	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00106	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0010c	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00111	85 c0		 test	 eax, eax
  00113	75 1c		 jne	 SHORT $LN24@ascii_esca
  00115	41 b8 d5 00 00
	00		 mov	 r8d, 213		; 000000d5H
  0011b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@KOELJAMM@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAj?$AAs?$AAo?$AAn?$AA?4?$AAc?$AA?$AA@
  00122	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@GLPHKNNN@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAp?$AAy?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  00129	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0012f	33 c0		 xor	 eax, eax
$LN24@ascii_esca:
  00131	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  00139	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0013c	c1 e8 05	 shr	 eax, 5
  0013f	83 e0 01	 and	 eax, 1
  00142	85 c0		 test	 eax, eax
  00144	0f 84 b1 00 00
	00		 je	 $LN30@ascii_esca
  0014a	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  00152	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00156	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0015c	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00161	85 c0		 test	 eax, eax
  00163	75 1c		 jne	 SHORT $LN25@ascii_esca
  00165	41 b8 d5 00 00
	00		 mov	 r8d, 213		; 000000d5H
  0016b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@KOELJAMM@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAj?$AAs?$AAo?$AAn?$AA?4?$AAc?$AA?$AA@
  00172	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@GLPHKNNN@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAp?$AAy?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  00179	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0017f	33 c0		 xor	 eax, eax
$LN25@ascii_esca:
  00181	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  00189	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0018c	c1 e8 07	 shr	 eax, 7
  0018f	83 e0 01	 and	 eax, 1
  00192	85 c0		 test	 eax, eax
  00194	75 1c		 jne	 SHORT $LN26@ascii_esca
  00196	41 b8 d5 00 00
	00		 mov	 r8d, 213		; 000000d5H
  0019c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@KOELJAMM@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAj?$AAs?$AAo?$AAn?$AA?4?$AAc?$AA?$AA@
  001a3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@NACFPDOF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAp?$AAy?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  001aa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001b0	33 c0		 xor	 eax, eax
$LN26@ascii_esca:
  001b2	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  001ba	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  001bd	c1 e8 06	 shr	 eax, 6
  001c0	83 e0 01	 and	 eax, 1
  001c3	85 c0		 test	 eax, eax
  001c5	74 15		 je	 SHORT $LN27@ascii_esca
  001c7	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  001cf	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  001d5	48 89 44 24 70	 mov	 QWORD PTR tv162[rsp], rax
  001da	eb 13		 jmp	 SHORT $LN28@ascii_esca
$LN27@ascii_esca:
  001dc	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  001e4	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  001ea	48 89 44 24 70	 mov	 QWORD PTR tv162[rsp], rax
$LN28@ascii_esca:
  001ef	48 8b 44 24 70	 mov	 rax, QWORD PTR tv162[rsp]
  001f4	48 89 44 24 78	 mov	 QWORD PTR tv171[rsp], rax
  001f9	eb 42		 jmp	 SHORT $LN31@ascii_esca
$LN30@ascii_esca:
  001fb	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  00203	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  0020b	75 1c		 jne	 SHORT $LN29@ascii_esca
  0020d	41 b8 d5 00 00
	00		 mov	 r8d, 213		; 000000d5H
  00213	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@KOELJAMM@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAj?$AAs?$AAo?$AAn?$AA?4?$AAc?$AA?$AA@
  0021a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EM@FMOHIEKB@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AAp?$AAy?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt@
  00221	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00227	33 c0		 xor	 eax, eax
$LN29@ascii_esca:
  00229	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  00231	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  00238	48 89 44 24 78	 mov	 QWORD PTR tv171[rsp], rax
$LN31@ascii_esca:
  0023d	48 8b 44 24 78	 mov	 rax, QWORD PTR tv171[rsp]
  00242	48 89 44 24 40	 mov	 QWORD PTR input$[rsp], rax

; 214  :     kind = PyUnicode_KIND(pystr);

  00247	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  0024f	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00253	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00259	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0025e	85 c0		 test	 eax, eax
  00260	75 1c		 jne	 SHORT $LN32@ascii_esca
  00262	41 b8 d6 00 00
	00		 mov	 r8d, 214		; 000000d6H
  00268	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@KOELJAMM@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAj?$AAs?$AAo?$AAn?$AA?4?$AAc?$AA?$AA@
  0026f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@GLPHKNNN@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAp?$AAy?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  00276	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0027c	33 c0		 xor	 eax, eax
$LN32@ascii_esca:
  0027e	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  00286	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00289	c1 e8 07	 shr	 eax, 7
  0028c	83 e0 01	 and	 eax, 1
  0028f	85 c0		 test	 eax, eax
  00291	75 1c		 jne	 SHORT $LN33@ascii_esca
  00293	41 b8 d6 00 00
	00		 mov	 r8d, 214		; 000000d6H
  00299	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@KOELJAMM@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAj?$AAs?$AAo?$AAn?$AA?4?$AAc?$AA?$AA@
  002a0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@NACFPDOF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAp?$AAy?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  002a7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  002ad	33 c0		 xor	 eax, eax
$LN33@ascii_esca:
  002af	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  002b7	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  002ba	c1 e8 02	 shr	 eax, 2
  002bd	83 e0 07	 and	 eax, 7
  002c0	89 44 24 20	 mov	 DWORD PTR kind$[rsp], eax

; 215  : 
; 216  :     /* Compute the output size */
; 217  :     for (i = 0, output_size = 2; i < input_chars; i++) {

  002c4	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  002cd	48 c7 44 24 48
	02 00 00 00	 mov	 QWORD PTR output_size$[rsp], 2
  002d6	eb 0d		 jmp	 SHORT $LN15@ascii_esca
$LN14@ascii_esca:
  002d8	48 8b 44 24 30	 mov	 rax, QWORD PTR i$[rsp]
  002dd	48 ff c0	 inc	 rax
  002e0	48 89 44 24 30	 mov	 QWORD PTR i$[rsp], rax
$LN15@ascii_esca:
  002e5	48 8b 44 24 50	 mov	 rax, QWORD PTR input_chars$[rsp]
  002ea	48 39 44 24 30	 cmp	 QWORD PTR i$[rsp], rax
  002ef	0f 8d 33 01 00
	00		 jge	 $LN13@ascii_esca

; 218  :         Py_UCS4 c = PyUnicode_READ(kind, input, i);

  002f5	83 7c 24 20 01	 cmp	 DWORD PTR kind$[rsp], 1
  002fa	75 1c		 jne	 SHORT $LN36@ascii_esca
  002fc	48 8b 44 24 30	 mov	 rax, QWORD PTR i$[rsp]
  00301	48 8b 4c 24 40	 mov	 rcx, QWORD PTR input$[rsp]
  00306	48 03 c8	 add	 rcx, rax
  00309	48 8b c1	 mov	 rax, rcx
  0030c	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0030f	89 84 24 80 00
	00 00		 mov	 DWORD PTR tv203[rsp], eax
  00316	eb 40		 jmp	 SHORT $LN37@ascii_esca
$LN36@ascii_esca:
  00318	83 7c 24 20 02	 cmp	 DWORD PTR kind$[rsp], 2
  0031d	75 17		 jne	 SHORT $LN34@ascii_esca
  0031f	48 8b 44 24 40	 mov	 rax, QWORD PTR input$[rsp]
  00324	48 8b 4c 24 30	 mov	 rcx, QWORD PTR i$[rsp]
  00329	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  0032d	89 84 24 84 00
	00 00		 mov	 DWORD PTR tv202[rsp], eax
  00334	eb 14		 jmp	 SHORT $LN35@ascii_esca
$LN34@ascii_esca:
  00336	48 8b 44 24 40	 mov	 rax, QWORD PTR input$[rsp]
  0033b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR i$[rsp]
  00340	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  00343	89 84 24 84 00
	00 00		 mov	 DWORD PTR tv202[rsp], eax
$LN35@ascii_esca:
  0034a	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR tv202[rsp]
  00351	89 84 24 80 00
	00 00		 mov	 DWORD PTR tv203[rsp], eax
$LN37@ascii_esca:
  00358	8b 84 24 80 00
	00 00		 mov	 eax, DWORD PTR tv203[rsp]
  0035f	89 44 24 60	 mov	 DWORD PTR c$20653[rsp], eax

; 219  :         if (S_CHAR(c))

  00363	83 7c 24 60 20	 cmp	 DWORD PTR c$20653[rsp], 32 ; 00000020H
  00368	72 27		 jb	 SHORT $LN12@ascii_esca
  0036a	83 7c 24 60 7e	 cmp	 DWORD PTR c$20653[rsp], 126 ; 0000007eH
  0036f	77 20		 ja	 SHORT $LN12@ascii_esca
  00371	83 7c 24 60 5c	 cmp	 DWORD PTR c$20653[rsp], 92 ; 0000005cH
  00376	74 19		 je	 SHORT $LN12@ascii_esca
  00378	83 7c 24 60 22	 cmp	 DWORD PTR c$20653[rsp], 34 ; 00000022H
  0037d	74 12		 je	 SHORT $LN12@ascii_esca

; 220  :             output_size++;

  0037f	48 8b 44 24 48	 mov	 rax, QWORD PTR output_size$[rsp]
  00384	48 ff c0	 inc	 rax
  00387	48 89 44 24 48	 mov	 QWORD PTR output_size$[rsp], rax

; 221  :         else {

  0038c	e9 92 00 00 00	 jmp	 $LN11@ascii_esca
$LN12@ascii_esca:

; 222  :             switch(c) {

  00391	8b 44 24 60	 mov	 eax, DWORD PTR c$20653[rsp]
  00395	89 84 24 88 00
	00 00		 mov	 DWORD PTR tv209[rsp], eax
  0039c	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR tv209[rsp]
  003a3	83 e8 08	 sub	 eax, 8
  003a6	89 84 24 88 00
	00 00		 mov	 DWORD PTR tv209[rsp], eax
  003ad	83 bc 24 88 00
	00 00 54	 cmp	 DWORD PTR tv209[rsp], 84 ; 00000054H
  003b5	77 32		 ja	 SHORT $LN7@ascii_esca
  003b7	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR tv209[rsp]
  003be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  003c5	0f b6 84 01 00
	00 00 00	 movzx	 eax, BYTE PTR $LN53@ascii_esca[rcx+rax]
  003cd	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN54@ascii_esca[rcx+rax*4]
  003d4	48 03 c1	 add	 rax, rcx
  003d7	ff e0		 jmp	 rax
$LN8@ascii_esca:

; 223  :             case '\\': case '"': case '\b': case '\f':
; 224  :             case '\n': case '\r': case '\t':
; 225  :                 output_size += 2; break;

  003d9	48 8b 44 24 48	 mov	 rax, QWORD PTR output_size$[rsp]
  003de	48 83 c0 02	 add	 rax, 2
  003e2	48 89 44 24 48	 mov	 QWORD PTR output_size$[rsp], rax
  003e7	eb 3a		 jmp	 SHORT $LN9@ascii_esca
$LN7@ascii_esca:

; 226  :             default:
; 227  :                 output_size += c >= 0x10000 ? 12 : 6;

  003e9	81 7c 24 60 00
	00 01 00	 cmp	 DWORD PTR c$20653[rsp], 65536 ; 00010000H
  003f1	72 0d		 jb	 SHORT $LN38@ascii_esca
  003f3	c7 84 24 8c 00
	00 00 0c 00 00
	00		 mov	 DWORD PTR tv212[rsp], 12
  003fe	eb 0b		 jmp	 SHORT $LN39@ascii_esca
$LN38@ascii_esca:
  00400	c7 84 24 8c 00
	00 00 06 00 00
	00		 mov	 DWORD PTR tv212[rsp], 6
$LN39@ascii_esca:
  0040b	48 63 84 24 8c
	00 00 00	 movsxd	 rax, DWORD PTR tv212[rsp]
  00413	48 8b 4c 24 48	 mov	 rcx, QWORD PTR output_size$[rsp]
  00418	48 03 c8	 add	 rcx, rax
  0041b	48 8b c1	 mov	 rax, rcx
  0041e	48 89 44 24 48	 mov	 QWORD PTR output_size$[rsp], rax
$LN9@ascii_esca:
$LN11@ascii_esca:

; 228  :             }
; 229  :         }
; 230  :     }

  00423	e9 b0 fe ff ff	 jmp	 $LN14@ascii_esca
$LN13@ascii_esca:

; 231  : 
; 232  :     rval = PyUnicode_New(output_size, 127);

  00428	ba 7f 00 00 00	 mov	 edx, 127		; 0000007fH
  0042d	48 8b 4c 24 48	 mov	 rcx, QWORD PTR output_size$[rsp]
  00432	e8 00 00 00 00	 call	 PyUnicode_New
  00437	48 89 44 24 28	 mov	 QWORD PTR rval$[rsp], rax

; 233  :     if (rval == NULL) {

  0043c	48 83 7c 24 28
	00		 cmp	 QWORD PTR rval$[rsp], 0
  00442	75 07		 jne	 SHORT $LN6@ascii_esca

; 234  :         return NULL;

  00444	33 c0		 xor	 eax, eax
  00446	e9 b6 02 00 00	 jmp	 $LN17@ascii_esca
$LN6@ascii_esca:

; 235  :     }
; 236  :     output = PyUnicode_1BYTE_DATA(rval);

  0044b	48 8b 44 24 28	 mov	 rax, QWORD PTR rval$[rsp]
  00450	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00454	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0045a	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0045f	85 c0		 test	 eax, eax
  00461	75 1c		 jne	 SHORT $LN40@ascii_esca
  00463	41 b8 ec 00 00
	00		 mov	 r8d, 236		; 000000ecH
  00469	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@KOELJAMM@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAj?$AAs?$AAo?$AAn?$AA?4?$AAc?$AA?$AA@
  00470	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@GBEOJNDO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAr?$AAv?$AAa?$AAl?$AA?$CJ?$AA?$AA@
  00477	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0047d	33 c0		 xor	 eax, eax
$LN40@ascii_esca:
  0047f	48 8b 44 24 28	 mov	 rax, QWORD PTR rval$[rsp]
  00484	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00487	c1 e8 05	 shr	 eax, 5
  0048a	83 e0 01	 and	 eax, 1
  0048d	85 c0		 test	 eax, eax
  0048f	0f 84 ae 00 00
	00		 je	 $LN46@ascii_esca
  00495	48 8b 44 24 28	 mov	 rax, QWORD PTR rval$[rsp]
  0049a	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0049e	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  004a4	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  004a9	85 c0		 test	 eax, eax
  004ab	75 1c		 jne	 SHORT $LN41@ascii_esca
  004ad	41 b8 ec 00 00
	00		 mov	 r8d, 236		; 000000ecH
  004b3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@KOELJAMM@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAj?$AAs?$AAo?$AAn?$AA?4?$AAc?$AA?$AA@
  004ba	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@GBEOJNDO@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAr?$AAv?$AAa?$AAl?$AA?$CJ?$AA?$AA@
  004c1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  004c7	33 c0		 xor	 eax, eax
$LN41@ascii_esca:
  004c9	48 8b 44 24 28	 mov	 rax, QWORD PTR rval$[rsp]
  004ce	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  004d1	c1 e8 07	 shr	 eax, 7
  004d4	83 e0 01	 and	 eax, 1
  004d7	85 c0		 test	 eax, eax
  004d9	75 1c		 jne	 SHORT $LN42@ascii_esca
  004db	41 b8 ec 00 00
	00		 mov	 r8d, 236		; 000000ecH
  004e1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@KOELJAMM@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAj?$AAs?$AAo?$AAn?$AA?4?$AAc?$AA?$AA@
  004e8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DC@KOCPPENH@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAr?$AAv?$AAa?$AAl?$AA?$CJ?$AA?$AA@
  004ef	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  004f5	33 c0		 xor	 eax, eax
$LN42@ascii_esca:
  004f7	48 8b 44 24 28	 mov	 rax, QWORD PTR rval$[rsp]
  004fc	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  004ff	c1 e8 06	 shr	 eax, 6
  00502	83 e0 01	 and	 eax, 1
  00505	85 c0		 test	 eax, eax
  00507	74 15		 je	 SHORT $LN43@ascii_esca
  00509	48 8b 44 24 28	 mov	 rax, QWORD PTR rval$[rsp]
  0050e	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  00514	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv254[rsp], rax
  0051c	eb 13		 jmp	 SHORT $LN44@ascii_esca
$LN43@ascii_esca:
  0051e	48 8b 44 24 28	 mov	 rax, QWORD PTR rval$[rsp]
  00523	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  00529	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv254[rsp], rax
$LN44@ascii_esca:
  00531	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR tv254[rsp]
  00539	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR tv263[rsp], rax
  00541	eb 3f		 jmp	 SHORT $LN47@ascii_esca
$LN46@ascii_esca:
  00543	48 8b 44 24 28	 mov	 rax, QWORD PTR rval$[rsp]
  00548	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  00550	75 1c		 jne	 SHORT $LN45@ascii_esca
  00552	41 b8 ec 00 00
	00		 mov	 r8d, 236		; 000000ecH
  00558	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@KOELJAMM@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAj?$AAs?$AAo?$AAn?$AA?4?$AAc?$AA?$AA@
  0055f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EK@DBKDDDKN@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AAr?$AAv?$AAa?$AAl?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt?$AAa@
  00566	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0056c	33 c0		 xor	 eax, eax
$LN45@ascii_esca:
  0056e	48 8b 44 24 28	 mov	 rax, QWORD PTR rval$[rsp]
  00573	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  0057a	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR tv263[rsp], rax
$LN47@ascii_esca:
  00582	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR tv263[rsp]
  0058a	48 89 44 24 38	 mov	 QWORD PTR output$[rsp], rax

; 237  :     chars = 0;

  0058f	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR chars$[rsp], 0

; 238  :     output[chars++] = '"';

  00598	48 8b 44 24 58	 mov	 rax, QWORD PTR chars$[rsp]
  0059d	48 8b 4c 24 38	 mov	 rcx, QWORD PTR output$[rsp]
  005a2	48 03 c8	 add	 rcx, rax
  005a5	48 8b c1	 mov	 rax, rcx
  005a8	c6 00 22	 mov	 BYTE PTR [rax], 34	; 00000022H
  005ab	48 8b 44 24 58	 mov	 rax, QWORD PTR chars$[rsp]
  005b0	48 ff c0	 inc	 rax
  005b3	48 89 44 24 58	 mov	 QWORD PTR chars$[rsp], rax

; 239  :     for (i = 0; i < input_chars; i++) {

  005b8	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  005c1	eb 0d		 jmp	 SHORT $LN5@ascii_esca
$LN4@ascii_esca:
  005c3	48 8b 44 24 30	 mov	 rax, QWORD PTR i$[rsp]
  005c8	48 ff c0	 inc	 rax
  005cb	48 89 44 24 30	 mov	 QWORD PTR i$[rsp], rax
$LN5@ascii_esca:
  005d0	48 8b 44 24 50	 mov	 rax, QWORD PTR input_chars$[rsp]
  005d5	48 39 44 24 30	 cmp	 QWORD PTR i$[rsp], rax
  005da	0f 8d cd 00 00
	00		 jge	 $LN3@ascii_esca

; 240  :         Py_UCS4 c = PyUnicode_READ(kind, input, i);

  005e0	83 7c 24 20 01	 cmp	 DWORD PTR kind$[rsp], 1
  005e5	75 1c		 jne	 SHORT $LN50@ascii_esca
  005e7	48 8b 44 24 30	 mov	 rax, QWORD PTR i$[rsp]
  005ec	48 8b 4c 24 40	 mov	 rcx, QWORD PTR input$[rsp]
  005f1	48 03 c8	 add	 rcx, rax
  005f4	48 8b c1	 mov	 rax, rcx
  005f7	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  005fa	89 84 24 a0 00
	00 00		 mov	 DWORD PTR tv278[rsp], eax
  00601	eb 40		 jmp	 SHORT $LN51@ascii_esca
$LN50@ascii_esca:
  00603	83 7c 24 20 02	 cmp	 DWORD PTR kind$[rsp], 2
  00608	75 17		 jne	 SHORT $LN48@ascii_esca
  0060a	48 8b 44 24 40	 mov	 rax, QWORD PTR input$[rsp]
  0060f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR i$[rsp]
  00614	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  00618	89 84 24 a4 00
	00 00		 mov	 DWORD PTR tv277[rsp], eax
  0061f	eb 14		 jmp	 SHORT $LN49@ascii_esca
$LN48@ascii_esca:
  00621	48 8b 44 24 40	 mov	 rax, QWORD PTR input$[rsp]
  00626	48 8b 4c 24 30	 mov	 rcx, QWORD PTR i$[rsp]
  0062b	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  0062e	89 84 24 a4 00
	00 00		 mov	 DWORD PTR tv277[rsp], eax
$LN49@ascii_esca:
  00635	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR tv277[rsp]
  0063c	89 84 24 a0 00
	00 00		 mov	 DWORD PTR tv278[rsp], eax
$LN51@ascii_esca:
  00643	8b 84 24 a0 00
	00 00		 mov	 eax, DWORD PTR tv278[rsp]
  0064a	89 44 24 64	 mov	 DWORD PTR c$20691[rsp], eax

; 241  :         if (S_CHAR(c)) {

  0064e	83 7c 24 64 20	 cmp	 DWORD PTR c$20691[rsp], 32 ; 00000020H
  00653	72 3b		 jb	 SHORT $LN2@ascii_esca
  00655	83 7c 24 64 7e	 cmp	 DWORD PTR c$20691[rsp], 126 ; 0000007eH
  0065a	77 34		 ja	 SHORT $LN2@ascii_esca
  0065c	83 7c 24 64 5c	 cmp	 DWORD PTR c$20691[rsp], 92 ; 0000005cH
  00661	74 2d		 je	 SHORT $LN2@ascii_esca
  00663	83 7c 24 64 22	 cmp	 DWORD PTR c$20691[rsp], 34 ; 00000022H
  00668	74 26		 je	 SHORT $LN2@ascii_esca

; 242  :             output[chars++] = c;

  0066a	48 8b 44 24 58	 mov	 rax, QWORD PTR chars$[rsp]
  0066f	48 8b 4c 24 38	 mov	 rcx, QWORD PTR output$[rsp]
  00674	48 03 c8	 add	 rcx, rax
  00677	48 8b c1	 mov	 rax, rcx
  0067a	0f b6 4c 24 64	 movzx	 ecx, BYTE PTR c$20691[rsp]
  0067f	88 08		 mov	 BYTE PTR [rax], cl
  00681	48 8b 44 24 58	 mov	 rax, QWORD PTR chars$[rsp]
  00686	48 ff c0	 inc	 rax
  00689	48 89 44 24 58	 mov	 QWORD PTR chars$[rsp], rax

; 243  :         }
; 244  :         else {

  0068e	eb 18		 jmp	 SHORT $LN1@ascii_esca
$LN2@ascii_esca:

; 245  :             chars = ascii_escape_unichar(c, output, chars);

  00690	4c 8b 44 24 58	 mov	 r8, QWORD PTR chars$[rsp]
  00695	48 8b 54 24 38	 mov	 rdx, QWORD PTR output$[rsp]
  0069a	8b 4c 24 64	 mov	 ecx, DWORD PTR c$20691[rsp]
  0069e	e8 00 00 00 00	 call	 ascii_escape_unichar
  006a3	48 89 44 24 58	 mov	 QWORD PTR chars$[rsp], rax
$LN1@ascii_esca:

; 246  :         }
; 247  :     }

  006a8	e9 16 ff ff ff	 jmp	 $LN4@ascii_esca
$LN3@ascii_esca:

; 248  :     output[chars++] = '"';

  006ad	48 8b 44 24 58	 mov	 rax, QWORD PTR chars$[rsp]
  006b2	48 8b 4c 24 38	 mov	 rcx, QWORD PTR output$[rsp]
  006b7	48 03 c8	 add	 rcx, rax
  006ba	48 8b c1	 mov	 rax, rcx
  006bd	c6 00 22	 mov	 BYTE PTR [rax], 34	; 00000022H
  006c0	48 8b 44 24 58	 mov	 rax, QWORD PTR chars$[rsp]
  006c5	48 ff c0	 inc	 rax
  006c8	48 89 44 24 58	 mov	 QWORD PTR chars$[rsp], rax

; 249  : #ifdef Py_DEBUG
; 250  :     assert(_PyUnicode_CheckConsistency(rval, 1));

  006cd	ba 01 00 00 00	 mov	 edx, 1
  006d2	48 8b 4c 24 28	 mov	 rcx, QWORD PTR rval$[rsp]
  006d7	e8 00 00 00 00	 call	 _PyUnicode_CheckConsistency
  006dc	85 c0		 test	 eax, eax
  006de	75 1c		 jne	 SHORT $LN52@ascii_esca
  006e0	41 b8 fa 00 00
	00		 mov	 r8d, 250		; 000000faH
  006e6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@KOELJAMM@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAj?$AAs?$AAo?$AAn?$AA?4?$AAc?$AA?$AA@
  006ed	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EK@HLDMPLDK@?$AA_?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AAC?$AAo?$AAn?$AAs?$AAi?$AAs?$AAt?$AAe?$AAn?$AAc?$AAy?$AA?$CI?$AAr?$AAv?$AAa?$AAl@
  006f4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  006fa	33 c0		 xor	 eax, eax
$LN52@ascii_esca:

; 251  : #endif
; 252  :     return rval;

  006fc	48 8b 44 24 28	 mov	 rax, QWORD PTR rval$[rsp]
$LN17@ascii_esca:

; 253  : }

  00701	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  00708	c3		 ret	 0
  00709	0f 1f 00	 npad	 3
$LN54@ascii_esca:
  0070c	00 00 00 00	 DD	 $LN8@ascii_esca
  00710	00 00 00 00	 DD	 $LN7@ascii_esca
$LN53@ascii_esca:
  00714	00		 DB	 0
  00715	00		 DB	 0
  00716	00		 DB	 0
  00717	01		 DB	 1
  00718	00		 DB	 0
  00719	00		 DB	 0
  0071a	01		 DB	 1
  0071b	01		 DB	 1
  0071c	01		 DB	 1
  0071d	01		 DB	 1
  0071e	01		 DB	 1
  0071f	01		 DB	 1
  00720	01		 DB	 1
  00721	01		 DB	 1
  00722	01		 DB	 1
  00723	01		 DB	 1
  00724	01		 DB	 1
  00725	01		 DB	 1
  00726	01		 DB	 1
  00727	01		 DB	 1
  00728	01		 DB	 1
  00729	01		 DB	 1
  0072a	01		 DB	 1
  0072b	01		 DB	 1
  0072c	01		 DB	 1
  0072d	01		 DB	 1
  0072e	00		 DB	 0
  0072f	01		 DB	 1
  00730	01		 DB	 1
  00731	01		 DB	 1
  00732	01		 DB	 1
  00733	01		 DB	 1
  00734	01		 DB	 1
  00735	01		 DB	 1
  00736	01		 DB	 1
  00737	01		 DB	 1
  00738	01		 DB	 1
  00739	01		 DB	 1
  0073a	01		 DB	 1
  0073b	01		 DB	 1
  0073c	01		 DB	 1
  0073d	01		 DB	 1
  0073e	01		 DB	 1
  0073f	01		 DB	 1
  00740	01		 DB	 1
  00741	01		 DB	 1
  00742	01		 DB	 1
  00743	01		 DB	 1
  00744	01		 DB	 1
  00745	01		 DB	 1
  00746	01		 DB	 1
  00747	01		 DB	 1
  00748	01		 DB	 1
  00749	01		 DB	 1
  0074a	01		 DB	 1
  0074b	01		 DB	 1
  0074c	01		 DB	 1
  0074d	01		 DB	 1
  0074e	01		 DB	 1
  0074f	01		 DB	 1
  00750	01		 DB	 1
  00751	01		 DB	 1
  00752	01		 DB	 1
  00753	01		 DB	 1
  00754	01		 DB	 1
  00755	01		 DB	 1
  00756	01		 DB	 1
  00757	01		 DB	 1
  00758	01		 DB	 1
  00759	01		 DB	 1
  0075a	01		 DB	 1
  0075b	01		 DB	 1
  0075c	01		 DB	 1
  0075d	01		 DB	 1
  0075e	01		 DB	 1
  0075f	01		 DB	 1
  00760	01		 DB	 1
  00761	01		 DB	 1
  00762	01		 DB	 1
  00763	01		 DB	 1
  00764	01		 DB	 1
  00765	01		 DB	 1
  00766	01		 DB	 1
  00767	01		 DB	 1
  00768	00		 DB	 0
ascii_escape_unicode ENDP
_TEXT	ENDS
EXTRN	Py_hexdigits:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$ascii_escape_unichar DD imagerel ascii_escape_unichar
	DD	imagerel ascii_escape_unichar+1093
	DD	imagerel $unwind$ascii_escape_unichar
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ascii_escape_unichar DD 011201H
	DD	02212H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT ascii_escape_unichar
_TEXT	SEGMENT
v$20603 = 0
tv66 = 4
c$ = 32
output$ = 40
chars$ = 48
ascii_escape_unichar PROC				; COMDAT

; 161  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000e	48 83 ec 18	 sub	 rsp, 24

; 162  :     /* Escape unicode code point c to ASCII escape sequences
; 163  :     in char *output. output must have at least 12 bytes unused to
; 164  :     accommodate an escaped surrogate pair "\uXXXX\uXXXX" */
; 165  :     output[chars++] = '\\';

  00012	48 8b 44 24 30	 mov	 rax, QWORD PTR chars$[rsp]
  00017	48 8b 4c 24 28	 mov	 rcx, QWORD PTR output$[rsp]
  0001c	48 03 c8	 add	 rcx, rax
  0001f	48 8b c1	 mov	 rax, rcx
  00022	c6 00 5c	 mov	 BYTE PTR [rax], 92	; 0000005cH
  00025	48 8b 44 24 30	 mov	 rax, QWORD PTR chars$[rsp]
  0002a	48 ff c0	 inc	 rax
  0002d	48 89 44 24 30	 mov	 QWORD PTR chars$[rsp], rax

; 166  :     switch (c) {

  00032	8b 44 24 20	 mov	 eax, DWORD PTR c$[rsp]
  00036	89 44 24 04	 mov	 DWORD PTR tv66[rsp], eax
  0003a	8b 44 24 04	 mov	 eax, DWORD PTR tv66[rsp]
  0003e	83 e8 08	 sub	 eax, 8
  00041	89 44 24 04	 mov	 DWORD PTR tv66[rsp], eax
  00045	83 7c 24 04 54	 cmp	 DWORD PTR tv66[rsp], 84	; 00000054H
  0004a	0f 87 2a 01 00
	00		 ja	 $LN2@ascii_esca@2
  00050	8b 44 24 04	 mov	 eax, DWORD PTR tv66[rsp]
  00054	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  0005b	0f b6 84 01 00
	00 00 00	 movzx	 eax, BYTE PTR $LN14@ascii_esca@2[rcx+rax]
  00063	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN15@ascii_esca@2[rcx+rax*4]
  0006a	48 03 c1	 add	 rax, rcx
  0006d	ff e0		 jmp	 rax
$LN9@ascii_esca@2:

; 167  :         case '\\': output[chars++] = c; break;

  0006f	48 8b 44 24 30	 mov	 rax, QWORD PTR chars$[rsp]
  00074	48 8b 4c 24 28	 mov	 rcx, QWORD PTR output$[rsp]
  00079	48 03 c8	 add	 rcx, rax
  0007c	48 8b c1	 mov	 rax, rcx
  0007f	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR c$[rsp]
  00084	88 08		 mov	 BYTE PTR [rax], cl
  00086	48 8b 44 24 30	 mov	 rax, QWORD PTR chars$[rsp]
  0008b	48 ff c0	 inc	 rax
  0008e	48 89 44 24 30	 mov	 QWORD PTR chars$[rsp], rax
  00093	e9 2b 03 00 00	 jmp	 $LN10@ascii_esca@2
$LN8@ascii_esca@2:

; 168  :         case '"': output[chars++] = c; break;

  00098	48 8b 44 24 30	 mov	 rax, QWORD PTR chars$[rsp]
  0009d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR output$[rsp]
  000a2	48 03 c8	 add	 rcx, rax
  000a5	48 8b c1	 mov	 rax, rcx
  000a8	0f b6 4c 24 20	 movzx	 ecx, BYTE PTR c$[rsp]
  000ad	88 08		 mov	 BYTE PTR [rax], cl
  000af	48 8b 44 24 30	 mov	 rax, QWORD PTR chars$[rsp]
  000b4	48 ff c0	 inc	 rax
  000b7	48 89 44 24 30	 mov	 QWORD PTR chars$[rsp], rax
  000bc	e9 02 03 00 00	 jmp	 $LN10@ascii_esca@2
$LN7@ascii_esca@2:

; 169  :         case '\b': output[chars++] = 'b'; break;

  000c1	48 8b 44 24 30	 mov	 rax, QWORD PTR chars$[rsp]
  000c6	48 8b 4c 24 28	 mov	 rcx, QWORD PTR output$[rsp]
  000cb	48 03 c8	 add	 rcx, rax
  000ce	48 8b c1	 mov	 rax, rcx
  000d1	c6 00 62	 mov	 BYTE PTR [rax], 98	; 00000062H
  000d4	48 8b 44 24 30	 mov	 rax, QWORD PTR chars$[rsp]
  000d9	48 ff c0	 inc	 rax
  000dc	48 89 44 24 30	 mov	 QWORD PTR chars$[rsp], rax
  000e1	e9 dd 02 00 00	 jmp	 $LN10@ascii_esca@2
$LN6@ascii_esca@2:

; 170  :         case '\f': output[chars++] = 'f'; break;

  000e6	48 8b 44 24 30	 mov	 rax, QWORD PTR chars$[rsp]
  000eb	48 8b 4c 24 28	 mov	 rcx, QWORD PTR output$[rsp]
  000f0	48 03 c8	 add	 rcx, rax
  000f3	48 8b c1	 mov	 rax, rcx
  000f6	c6 00 66	 mov	 BYTE PTR [rax], 102	; 00000066H
  000f9	48 8b 44 24 30	 mov	 rax, QWORD PTR chars$[rsp]
  000fe	48 ff c0	 inc	 rax
  00101	48 89 44 24 30	 mov	 QWORD PTR chars$[rsp], rax
  00106	e9 b8 02 00 00	 jmp	 $LN10@ascii_esca@2
$LN5@ascii_esca@2:

; 171  :         case '\n': output[chars++] = 'n'; break;

  0010b	48 8b 44 24 30	 mov	 rax, QWORD PTR chars$[rsp]
  00110	48 8b 4c 24 28	 mov	 rcx, QWORD PTR output$[rsp]
  00115	48 03 c8	 add	 rcx, rax
  00118	48 8b c1	 mov	 rax, rcx
  0011b	c6 00 6e	 mov	 BYTE PTR [rax], 110	; 0000006eH
  0011e	48 8b 44 24 30	 mov	 rax, QWORD PTR chars$[rsp]
  00123	48 ff c0	 inc	 rax
  00126	48 89 44 24 30	 mov	 QWORD PTR chars$[rsp], rax
  0012b	e9 93 02 00 00	 jmp	 $LN10@ascii_esca@2
$LN4@ascii_esca@2:

; 172  :         case '\r': output[chars++] = 'r'; break;

  00130	48 8b 44 24 30	 mov	 rax, QWORD PTR chars$[rsp]
  00135	48 8b 4c 24 28	 mov	 rcx, QWORD PTR output$[rsp]
  0013a	48 03 c8	 add	 rcx, rax
  0013d	48 8b c1	 mov	 rax, rcx
  00140	c6 00 72	 mov	 BYTE PTR [rax], 114	; 00000072H
  00143	48 8b 44 24 30	 mov	 rax, QWORD PTR chars$[rsp]
  00148	48 ff c0	 inc	 rax
  0014b	48 89 44 24 30	 mov	 QWORD PTR chars$[rsp], rax
  00150	e9 6e 02 00 00	 jmp	 $LN10@ascii_esca@2
$LN3@ascii_esca@2:

; 173  :         case '\t': output[chars++] = 't'; break;

  00155	48 8b 44 24 30	 mov	 rax, QWORD PTR chars$[rsp]
  0015a	48 8b 4c 24 28	 mov	 rcx, QWORD PTR output$[rsp]
  0015f	48 03 c8	 add	 rcx, rax
  00162	48 8b c1	 mov	 rax, rcx
  00165	c6 00 74	 mov	 BYTE PTR [rax], 116	; 00000074H
  00168	48 8b 44 24 30	 mov	 rax, QWORD PTR chars$[rsp]
  0016d	48 ff c0	 inc	 rax
  00170	48 89 44 24 30	 mov	 QWORD PTR chars$[rsp], rax
  00175	e9 49 02 00 00	 jmp	 $LN10@ascii_esca@2
$LN2@ascii_esca@2:

; 174  :         default:
; 175  :             if (c >= 0x10000) {

  0017a	81 7c 24 20 00
	00 01 00	 cmp	 DWORD PTR c$[rsp], 65536 ; 00010000H
  00182	0f 82 46 01 00
	00		 jb	 $LN1@ascii_esca@2

; 176  :                 /* UTF-16 surrogate pair */
; 177  :                 Py_UCS4 v = c - 0x10000;

  00188	8b 44 24 20	 mov	 eax, DWORD PTR c$[rsp]
  0018c	2d 00 00 01 00	 sub	 eax, 65536		; 00010000H
  00191	89 04 24	 mov	 DWORD PTR v$20603[rsp], eax

; 178  :                 c = 0xd800 | ((v >> 10) & 0x3ff);

  00194	8b 04 24	 mov	 eax, DWORD PTR v$20603[rsp]
  00197	c1 e8 0a	 shr	 eax, 10
  0019a	25 ff 03 00 00	 and	 eax, 1023		; 000003ffH
  0019f	0d 00 d8 00 00	 or	 eax, 55296		; 0000d800H
  001a4	89 44 24 20	 mov	 DWORD PTR c$[rsp], eax

; 179  :                 output[chars++] = 'u';

  001a8	48 8b 44 24 30	 mov	 rax, QWORD PTR chars$[rsp]
  001ad	48 8b 4c 24 28	 mov	 rcx, QWORD PTR output$[rsp]
  001b2	48 03 c8	 add	 rcx, rax
  001b5	48 8b c1	 mov	 rax, rcx
  001b8	c6 00 75	 mov	 BYTE PTR [rax], 117	; 00000075H
  001bb	48 8b 44 24 30	 mov	 rax, QWORD PTR chars$[rsp]
  001c0	48 ff c0	 inc	 rax
  001c3	48 89 44 24 30	 mov	 QWORD PTR chars$[rsp], rax

; 180  :                 output[chars++] = Py_hexdigits[(c >> 12) & 0xf];

  001c8	8b 44 24 20	 mov	 eax, DWORD PTR c$[rsp]
  001cc	c1 e8 0c	 shr	 eax, 12
  001cf	83 e0 0f	 and	 eax, 15
  001d2	8b c0		 mov	 eax, eax
  001d4	48 8b 4c 24 30	 mov	 rcx, QWORD PTR chars$[rsp]
  001d9	48 8b 54 24 28	 mov	 rdx, QWORD PTR output$[rsp]
  001de	48 03 d1	 add	 rdx, rcx
  001e1	48 8b ca	 mov	 rcx, rdx
  001e4	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Py_hexdigits
  001eb	0f b6 04 02	 movzx	 eax, BYTE PTR [rdx+rax]
  001ef	88 01		 mov	 BYTE PTR [rcx], al
  001f1	48 8b 44 24 30	 mov	 rax, QWORD PTR chars$[rsp]
  001f6	48 ff c0	 inc	 rax
  001f9	48 89 44 24 30	 mov	 QWORD PTR chars$[rsp], rax

; 181  :                 output[chars++] = Py_hexdigits[(c >>  8) & 0xf];

  001fe	8b 44 24 20	 mov	 eax, DWORD PTR c$[rsp]
  00202	c1 e8 08	 shr	 eax, 8
  00205	83 e0 0f	 and	 eax, 15
  00208	8b c0		 mov	 eax, eax
  0020a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR chars$[rsp]
  0020f	48 8b 54 24 28	 mov	 rdx, QWORD PTR output$[rsp]
  00214	48 03 d1	 add	 rdx, rcx
  00217	48 8b ca	 mov	 rcx, rdx
  0021a	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Py_hexdigits
  00221	0f b6 04 02	 movzx	 eax, BYTE PTR [rdx+rax]
  00225	88 01		 mov	 BYTE PTR [rcx], al
  00227	48 8b 44 24 30	 mov	 rax, QWORD PTR chars$[rsp]
  0022c	48 ff c0	 inc	 rax
  0022f	48 89 44 24 30	 mov	 QWORD PTR chars$[rsp], rax

; 182  :                 output[chars++] = Py_hexdigits[(c >>  4) & 0xf];

  00234	8b 44 24 20	 mov	 eax, DWORD PTR c$[rsp]
  00238	c1 e8 04	 shr	 eax, 4
  0023b	83 e0 0f	 and	 eax, 15
  0023e	8b c0		 mov	 eax, eax
  00240	48 8b 4c 24 30	 mov	 rcx, QWORD PTR chars$[rsp]
  00245	48 8b 54 24 28	 mov	 rdx, QWORD PTR output$[rsp]
  0024a	48 03 d1	 add	 rdx, rcx
  0024d	48 8b ca	 mov	 rcx, rdx
  00250	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Py_hexdigits
  00257	0f b6 04 02	 movzx	 eax, BYTE PTR [rdx+rax]
  0025b	88 01		 mov	 BYTE PTR [rcx], al
  0025d	48 8b 44 24 30	 mov	 rax, QWORD PTR chars$[rsp]
  00262	48 ff c0	 inc	 rax
  00265	48 89 44 24 30	 mov	 QWORD PTR chars$[rsp], rax

; 183  :                 output[chars++] = Py_hexdigits[(c      ) & 0xf];

  0026a	8b 44 24 20	 mov	 eax, DWORD PTR c$[rsp]
  0026e	83 e0 0f	 and	 eax, 15
  00271	8b c0		 mov	 eax, eax
  00273	48 8b 4c 24 30	 mov	 rcx, QWORD PTR chars$[rsp]
  00278	48 8b 54 24 28	 mov	 rdx, QWORD PTR output$[rsp]
  0027d	48 03 d1	 add	 rdx, rcx
  00280	48 8b ca	 mov	 rcx, rdx
  00283	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Py_hexdigits
  0028a	0f b6 04 02	 movzx	 eax, BYTE PTR [rdx+rax]
  0028e	88 01		 mov	 BYTE PTR [rcx], al
  00290	48 8b 44 24 30	 mov	 rax, QWORD PTR chars$[rsp]
  00295	48 ff c0	 inc	 rax
  00298	48 89 44 24 30	 mov	 QWORD PTR chars$[rsp], rax

; 184  :                 c = 0xdc00 | (v & 0x3ff);

  0029d	8b 04 24	 mov	 eax, DWORD PTR v$20603[rsp]
  002a0	25 ff 03 00 00	 and	 eax, 1023		; 000003ffH
  002a5	0d 00 dc 00 00	 or	 eax, 56320		; 0000dc00H
  002aa	89 44 24 20	 mov	 DWORD PTR c$[rsp], eax

; 185  :                 output[chars++] = '\\';

  002ae	48 8b 44 24 30	 mov	 rax, QWORD PTR chars$[rsp]
  002b3	48 8b 4c 24 28	 mov	 rcx, QWORD PTR output$[rsp]
  002b8	48 03 c8	 add	 rcx, rax
  002bb	48 8b c1	 mov	 rax, rcx
  002be	c6 00 5c	 mov	 BYTE PTR [rax], 92	; 0000005cH
  002c1	48 8b 44 24 30	 mov	 rax, QWORD PTR chars$[rsp]
  002c6	48 ff c0	 inc	 rax
  002c9	48 89 44 24 30	 mov	 QWORD PTR chars$[rsp], rax
$LN1@ascii_esca@2:

; 186  :             }
; 187  :             output[chars++] = 'u';

  002ce	48 8b 44 24 30	 mov	 rax, QWORD PTR chars$[rsp]
  002d3	48 8b 4c 24 28	 mov	 rcx, QWORD PTR output$[rsp]
  002d8	48 03 c8	 add	 rcx, rax
  002db	48 8b c1	 mov	 rax, rcx
  002de	c6 00 75	 mov	 BYTE PTR [rax], 117	; 00000075H
  002e1	48 8b 44 24 30	 mov	 rax, QWORD PTR chars$[rsp]
  002e6	48 ff c0	 inc	 rax
  002e9	48 89 44 24 30	 mov	 QWORD PTR chars$[rsp], rax

; 188  :             output[chars++] = Py_hexdigits[(c >> 12) & 0xf];

  002ee	8b 44 24 20	 mov	 eax, DWORD PTR c$[rsp]
  002f2	c1 e8 0c	 shr	 eax, 12
  002f5	83 e0 0f	 and	 eax, 15
  002f8	8b c0		 mov	 eax, eax
  002fa	48 8b 4c 24 30	 mov	 rcx, QWORD PTR chars$[rsp]
  002ff	48 8b 54 24 28	 mov	 rdx, QWORD PTR output$[rsp]
  00304	48 03 d1	 add	 rdx, rcx
  00307	48 8b ca	 mov	 rcx, rdx
  0030a	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Py_hexdigits
  00311	0f b6 04 02	 movzx	 eax, BYTE PTR [rdx+rax]
  00315	88 01		 mov	 BYTE PTR [rcx], al
  00317	48 8b 44 24 30	 mov	 rax, QWORD PTR chars$[rsp]
  0031c	48 ff c0	 inc	 rax
  0031f	48 89 44 24 30	 mov	 QWORD PTR chars$[rsp], rax

; 189  :             output[chars++] = Py_hexdigits[(c >>  8) & 0xf];

  00324	8b 44 24 20	 mov	 eax, DWORD PTR c$[rsp]
  00328	c1 e8 08	 shr	 eax, 8
  0032b	83 e0 0f	 and	 eax, 15
  0032e	8b c0		 mov	 eax, eax
  00330	48 8b 4c 24 30	 mov	 rcx, QWORD PTR chars$[rsp]
  00335	48 8b 54 24 28	 mov	 rdx, QWORD PTR output$[rsp]
  0033a	48 03 d1	 add	 rdx, rcx
  0033d	48 8b ca	 mov	 rcx, rdx
  00340	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Py_hexdigits
  00347	0f b6 04 02	 movzx	 eax, BYTE PTR [rdx+rax]
  0034b	88 01		 mov	 BYTE PTR [rcx], al
  0034d	48 8b 44 24 30	 mov	 rax, QWORD PTR chars$[rsp]
  00352	48 ff c0	 inc	 rax
  00355	48 89 44 24 30	 mov	 QWORD PTR chars$[rsp], rax

; 190  :             output[chars++] = Py_hexdigits[(c >>  4) & 0xf];

  0035a	8b 44 24 20	 mov	 eax, DWORD PTR c$[rsp]
  0035e	c1 e8 04	 shr	 eax, 4
  00361	83 e0 0f	 and	 eax, 15
  00364	8b c0		 mov	 eax, eax
  00366	48 8b 4c 24 30	 mov	 rcx, QWORD PTR chars$[rsp]
  0036b	48 8b 54 24 28	 mov	 rdx, QWORD PTR output$[rsp]
  00370	48 03 d1	 add	 rdx, rcx
  00373	48 8b ca	 mov	 rcx, rdx
  00376	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Py_hexdigits
  0037d	0f b6 04 02	 movzx	 eax, BYTE PTR [rdx+rax]
  00381	88 01		 mov	 BYTE PTR [rcx], al
  00383	48 8b 44 24 30	 mov	 rax, QWORD PTR chars$[rsp]
  00388	48 ff c0	 inc	 rax
  0038b	48 89 44 24 30	 mov	 QWORD PTR chars$[rsp], rax

; 191  :             output[chars++] = Py_hexdigits[(c      ) & 0xf];

  00390	8b 44 24 20	 mov	 eax, DWORD PTR c$[rsp]
  00394	83 e0 0f	 and	 eax, 15
  00397	8b c0		 mov	 eax, eax
  00399	48 8b 4c 24 30	 mov	 rcx, QWORD PTR chars$[rsp]
  0039e	48 8b 54 24 28	 mov	 rdx, QWORD PTR output$[rsp]
  003a3	48 03 d1	 add	 rdx, rcx
  003a6	48 8b ca	 mov	 rcx, rdx
  003a9	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR Py_hexdigits
  003b0	0f b6 04 02	 movzx	 eax, BYTE PTR [rdx+rax]
  003b4	88 01		 mov	 BYTE PTR [rcx], al
  003b6	48 8b 44 24 30	 mov	 rax, QWORD PTR chars$[rsp]
  003bb	48 ff c0	 inc	 rax
  003be	48 89 44 24 30	 mov	 QWORD PTR chars$[rsp], rax
$LN10@ascii_esca@2:

; 192  :     }
; 193  :     return chars;

  003c3	48 8b 44 24 30	 mov	 rax, QWORD PTR chars$[rsp]

; 194  : }

  003c8	48 83 c4 18	 add	 rsp, 24
  003cc	c3		 ret	 0
  003cd	0f 1f 00	 npad	 3
$LN15@ascii_esca@2:
  003d0	00 00 00 00	 DD	 $LN7@ascii_esca@2
  003d4	00 00 00 00	 DD	 $LN3@ascii_esca@2
  003d8	00 00 00 00	 DD	 $LN5@ascii_esca@2
  003dc	00 00 00 00	 DD	 $LN6@ascii_esca@2
  003e0	00 00 00 00	 DD	 $LN4@ascii_esca@2
  003e4	00 00 00 00	 DD	 $LN8@ascii_esca@2
  003e8	00 00 00 00	 DD	 $LN9@ascii_esca@2
  003ec	00 00 00 00	 DD	 $LN2@ascii_esca@2
$LN14@ascii_esca@2:
  003f0	00		 DB	 0
  003f1	01		 DB	 1
  003f2	02		 DB	 2
  003f3	07		 DB	 7
  003f4	03		 DB	 3
  003f5	04		 DB	 4
  003f6	07		 DB	 7
  003f7	07		 DB	 7
  003f8	07		 DB	 7
  003f9	07		 DB	 7
  003fa	07		 DB	 7
  003fb	07		 DB	 7
  003fc	07		 DB	 7
  003fd	07		 DB	 7
  003fe	07		 DB	 7
  003ff	07		 DB	 7
  00400	07		 DB	 7
  00401	07		 DB	 7
  00402	07		 DB	 7
  00403	07		 DB	 7
  00404	07		 DB	 7
  00405	07		 DB	 7
  00406	07		 DB	 7
  00407	07		 DB	 7
  00408	07		 DB	 7
  00409	07		 DB	 7
  0040a	05		 DB	 5
  0040b	07		 DB	 7
  0040c	07		 DB	 7
  0040d	07		 DB	 7
  0040e	07		 DB	 7
  0040f	07		 DB	 7
  00410	07		 DB	 7
  00411	07		 DB	 7
  00412	07		 DB	 7
  00413	07		 DB	 7
  00414	07		 DB	 7
  00415	07		 DB	 7
  00416	07		 DB	 7
  00417	07		 DB	 7
  00418	07		 DB	 7
  00419	07		 DB	 7
  0041a	07		 DB	 7
  0041b	07		 DB	 7
  0041c	07		 DB	 7
  0041d	07		 DB	 7
  0041e	07		 DB	 7
  0041f	07		 DB	 7
  00420	07		 DB	 7
  00421	07		 DB	 7
  00422	07		 DB	 7
  00423	07		 DB	 7
  00424	07		 DB	 7
  00425	07		 DB	 7
  00426	07		 DB	 7
  00427	07		 DB	 7
  00428	07		 DB	 7
  00429	07		 DB	 7
  0042a	07		 DB	 7
  0042b	07		 DB	 7
  0042c	07		 DB	 7
  0042d	07		 DB	 7
  0042e	07		 DB	 7
  0042f	07		 DB	 7
  00430	07		 DB	 7
  00431	07		 DB	 7
  00432	07		 DB	 7
  00433	07		 DB	 7
  00434	07		 DB	 7
  00435	07		 DB	 7
  00436	07		 DB	 7
  00437	07		 DB	 7
  00438	07		 DB	 7
  00439	07		 DB	 7
  0043a	07		 DB	 7
  0043b	07		 DB	 7
  0043c	07		 DB	 7
  0043d	07		 DB	 7
  0043e	07		 DB	 7
  0043f	07		 DB	 7
  00440	07		 DB	 7
  00441	07		 DB	 7
  00442	07		 DB	 7
  00443	07		 DB	 7
  00444	06		 DB	 6
ascii_escape_unichar ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$scanner_dealloc DD imagerel scanner_dealloc
	DD	imagerel scanner_dealloc+44
	DD	imagerel $unwind$scanner_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$scanner_dealloc DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT scanner_dealloc
_TEXT	SEGMENT
self$ = 48
scanner_dealloc PROC					; COMDAT

; 559  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 560  :     /* Deallocate scanner object */
; 561  :     scanner_clear(self);

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self$[rsp]
  0000e	e8 00 00 00 00	 call	 scanner_clear

; 562  :     Py_TYPE(self)->tp_free(self);

  00013	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00018	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0001c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self$[rsp]
  00021	ff 90 98 01 00
	00		 call	 QWORD PTR [rax+408]

; 563  : }

  00027	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002b	c3		 ret	 0
scanner_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BB@GKNIGJBL@scanner_traverse?$AA@	; `string'
PUBLIC	??_C@_1CM@NDGIKJDC@?$AAP?$AAy?$AAS?$AAc?$AAa?$AAn?$AAn?$AAe?$AAr?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?$CJ?$AA?$AA@ ; `string'
EXTRN	_PyParallel_ContextGuardFailure:PROC
EXTRN	PyType_IsSubtype:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$scanner_traverse DD imagerel scanner_traverse
	DD	imagerel scanner_traverse+671
	DD	imagerel $unwind$scanner_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$scanner_traverse DD 011301H
	DD	08213H
xdata	ENDS
;	COMDAT ??_C@_0BB@GKNIGJBL@scanner_traverse?$AA@
CONST	SEGMENT
??_C@_0BB@GKNIGJBL@scanner_traverse?$AA@ DB 'scanner_traverse', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CM@NDGIKJDC@?$AAP?$AAy?$AAS?$AAc?$AAa?$AAn?$AAn?$AAe?$AAr?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CM@NDGIKJDC@?$AAP?$AAy?$AAS?$AAc?$AAa?$AAn?$AAn?$AAe?$AAr?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'S', 00H, 'c', 00H, 'a', 00H, 'n', 00H, 'n', 00H
	DB	'e', 00H, 'r', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, 's', 00H, 'e', 00H, 'l', 00H, 'f', 00H
	DB	')', 00H, 00H, 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT scanner_traverse
_TEXT	SEGMENT
s$ = 32
vret$21030 = 40
vret$21038 = 44
vret$21046 = 48
vret$21054 = 52
vret$21062 = 56
vret$21070 = 60
self$ = 80
visit$ = 88
arg$ = 96
scanner_traverse PROC					; COMDAT

; 567  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 568  :     PyScannerObject *s;
; 569  :     assert(PyScanner_Check(self));

  00013	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyScannerType
  0001a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR self$[rsp]
  0001f	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00023	74 35		 je	 SHORT $LN39@scanner_tr
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyScannerType
  0002c	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  00031	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  00035	e8 00 00 00 00	 call	 PyType_IsSubtype
  0003a	85 c0		 test	 eax, eax
  0003c	75 1c		 jne	 SHORT $LN39@scanner_tr
  0003e	41 b8 39 02 00
	00		 mov	 r8d, 569		; 00000239H
  00044	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@KOELJAMM@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAj?$AAs?$AAo?$AAn?$AA?4?$AAc?$AA?$AA@
  0004b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@NDGIKJDC@?$AAP?$AAy?$AAS?$AAc?$AAa?$AAn?$AAn?$AAe?$AAr?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?$CJ?$AA?$AA@
  00052	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00058	33 c0		 xor	 eax, eax
$LN39@scanner_tr:

; 570  :     s = (PyScannerObject *)self;

  0005a	48 8b 44 24 50	 mov	 rax, QWORD PTR self$[rsp]
  0005f	48 89 44 24 20	 mov	 QWORD PTR s$[rsp], rax
$LN36@scanner_tr:

; 571  :     Py_VISIT(s->strict);

  00064	e8 00 00 00 00	 call	 _Py_PXCTX
  00069	85 c0		 test	 eax, eax
  0006b	74 1c		 je	 SHORT $LN33@scanner_tr
  0006d	45 33 c9	 xor	 r9d, r9d
  00070	41 b8 3b 02 00
	00		 mov	 r8d, 571		; 0000023bH
  00076	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@BIGPLMIN@?4?4?2Modules?2_json?4c?$AA@
  0007d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@GKNIGJBL@scanner_traverse?$AA@
  00084	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN33@scanner_tr:
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  0008e	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00093	74 26		 je	 SHORT $LN32@scanner_tr
  00095	48 8b 54 24 60	 mov	 rdx, QWORD PTR arg$[rsp]
  0009a	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  0009f	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  000a3	ff 54 24 58	 call	 QWORD PTR visit$[rsp]
  000a7	89 44 24 28	 mov	 DWORD PTR vret$21030[rsp], eax
  000ab	83 7c 24 28 00	 cmp	 DWORD PTR vret$21030[rsp], 0
  000b0	74 09		 je	 SHORT $LN31@scanner_tr
  000b2	8b 44 24 28	 mov	 eax, DWORD PTR vret$21030[rsp]
  000b6	e9 df 01 00 00	 jmp	 $LN37@scanner_tr
$LN31@scanner_tr:
$LN32@scanner_tr:
  000bb	33 c0		 xor	 eax, eax
  000bd	85 c0		 test	 eax, eax
  000bf	75 a3		 jne	 SHORT $LN36@scanner_tr
$LN30@scanner_tr:

; 572  :     Py_VISIT(s->object_hook);

  000c1	e8 00 00 00 00	 call	 _Py_PXCTX
  000c6	85 c0		 test	 eax, eax
  000c8	74 1c		 je	 SHORT $LN27@scanner_tr
  000ca	45 33 c9	 xor	 r9d, r9d
  000cd	41 b8 3c 02 00
	00		 mov	 r8d, 572		; 0000023cH
  000d3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@BIGPLMIN@?4?4?2Modules?2_json?4c?$AA@
  000da	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@GKNIGJBL@scanner_traverse?$AA@
  000e1	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN27@scanner_tr:
  000e6	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  000eb	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  000f0	74 26		 je	 SHORT $LN26@scanner_tr
  000f2	48 8b 54 24 60	 mov	 rdx, QWORD PTR arg$[rsp]
  000f7	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  000fc	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  00100	ff 54 24 58	 call	 QWORD PTR visit$[rsp]
  00104	89 44 24 2c	 mov	 DWORD PTR vret$21038[rsp], eax
  00108	83 7c 24 2c 00	 cmp	 DWORD PTR vret$21038[rsp], 0
  0010d	74 09		 je	 SHORT $LN25@scanner_tr
  0010f	8b 44 24 2c	 mov	 eax, DWORD PTR vret$21038[rsp]
  00113	e9 82 01 00 00	 jmp	 $LN37@scanner_tr
$LN25@scanner_tr:
$LN26@scanner_tr:
  00118	33 c0		 xor	 eax, eax
  0011a	85 c0		 test	 eax, eax
  0011c	75 a3		 jne	 SHORT $LN30@scanner_tr
$LN24@scanner_tr:

; 573  :     Py_VISIT(s->object_pairs_hook);

  0011e	e8 00 00 00 00	 call	 _Py_PXCTX
  00123	85 c0		 test	 eax, eax
  00125	74 1c		 je	 SHORT $LN21@scanner_tr
  00127	45 33 c9	 xor	 r9d, r9d
  0012a	41 b8 3d 02 00
	00		 mov	 r8d, 573		; 0000023dH
  00130	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@BIGPLMIN@?4?4?2Modules?2_json?4c?$AA@
  00137	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@GKNIGJBL@scanner_traverse?$AA@
  0013e	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN21@scanner_tr:
  00143	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  00148	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  0014d	74 26		 je	 SHORT $LN20@scanner_tr
  0014f	48 8b 54 24 60	 mov	 rdx, QWORD PTR arg$[rsp]
  00154	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  00159	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  0015d	ff 54 24 58	 call	 QWORD PTR visit$[rsp]
  00161	89 44 24 30	 mov	 DWORD PTR vret$21046[rsp], eax
  00165	83 7c 24 30 00	 cmp	 DWORD PTR vret$21046[rsp], 0
  0016a	74 09		 je	 SHORT $LN19@scanner_tr
  0016c	8b 44 24 30	 mov	 eax, DWORD PTR vret$21046[rsp]
  00170	e9 25 01 00 00	 jmp	 $LN37@scanner_tr
$LN19@scanner_tr:
$LN20@scanner_tr:
  00175	33 c0		 xor	 eax, eax
  00177	85 c0		 test	 eax, eax
  00179	75 a3		 jne	 SHORT $LN24@scanner_tr
$LN18@scanner_tr:

; 574  :     Py_VISIT(s->parse_float);

  0017b	e8 00 00 00 00	 call	 _Py_PXCTX
  00180	85 c0		 test	 eax, eax
  00182	74 1c		 je	 SHORT $LN15@scanner_tr
  00184	45 33 c9	 xor	 r9d, r9d
  00187	41 b8 3e 02 00
	00		 mov	 r8d, 574		; 0000023eH
  0018d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@BIGPLMIN@?4?4?2Modules?2_json?4c?$AA@
  00194	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@GKNIGJBL@scanner_traverse?$AA@
  0019b	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN15@scanner_tr:
  001a0	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  001a5	48 83 78 78 00	 cmp	 QWORD PTR [rax+120], 0
  001aa	74 26		 je	 SHORT $LN14@scanner_tr
  001ac	48 8b 54 24 60	 mov	 rdx, QWORD PTR arg$[rsp]
  001b1	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  001b6	48 8b 48 78	 mov	 rcx, QWORD PTR [rax+120]
  001ba	ff 54 24 58	 call	 QWORD PTR visit$[rsp]
  001be	89 44 24 34	 mov	 DWORD PTR vret$21054[rsp], eax
  001c2	83 7c 24 34 00	 cmp	 DWORD PTR vret$21054[rsp], 0
  001c7	74 09		 je	 SHORT $LN13@scanner_tr
  001c9	8b 44 24 34	 mov	 eax, DWORD PTR vret$21054[rsp]
  001cd	e9 c8 00 00 00	 jmp	 $LN37@scanner_tr
$LN13@scanner_tr:
$LN14@scanner_tr:
  001d2	33 c0		 xor	 eax, eax
  001d4	85 c0		 test	 eax, eax
  001d6	75 a3		 jne	 SHORT $LN18@scanner_tr
$LN12@scanner_tr:

; 575  :     Py_VISIT(s->parse_int);

  001d8	e8 00 00 00 00	 call	 _Py_PXCTX
  001dd	85 c0		 test	 eax, eax
  001df	74 1c		 je	 SHORT $LN9@scanner_tr
  001e1	45 33 c9	 xor	 r9d, r9d
  001e4	41 b8 3f 02 00
	00		 mov	 r8d, 575		; 0000023fH
  001ea	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@BIGPLMIN@?4?4?2Modules?2_json?4c?$AA@
  001f1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@GKNIGJBL@scanner_traverse?$AA@
  001f8	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN9@scanner_tr:
  001fd	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  00202	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  0020a	74 26		 je	 SHORT $LN8@scanner_tr
  0020c	48 8b 54 24 60	 mov	 rdx, QWORD PTR arg$[rsp]
  00211	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  00216	48 8b 88 80 00
	00 00		 mov	 rcx, QWORD PTR [rax+128]
  0021d	ff 54 24 58	 call	 QWORD PTR visit$[rsp]
  00221	89 44 24 38	 mov	 DWORD PTR vret$21062[rsp], eax
  00225	83 7c 24 38 00	 cmp	 DWORD PTR vret$21062[rsp], 0
  0022a	74 06		 je	 SHORT $LN7@scanner_tr
  0022c	8b 44 24 38	 mov	 eax, DWORD PTR vret$21062[rsp]
  00230	eb 68		 jmp	 SHORT $LN37@scanner_tr
$LN7@scanner_tr:
$LN8@scanner_tr:
  00232	33 c0		 xor	 eax, eax
  00234	85 c0		 test	 eax, eax
  00236	75 a0		 jne	 SHORT $LN12@scanner_tr
$LN6@scanner_tr:

; 576  :     Py_VISIT(s->parse_constant);

  00238	e8 00 00 00 00	 call	 _Py_PXCTX
  0023d	85 c0		 test	 eax, eax
  0023f	74 1c		 je	 SHORT $LN3@scanner_tr
  00241	45 33 c9	 xor	 r9d, r9d
  00244	41 b8 40 02 00
	00		 mov	 r8d, 576		; 00000240H
  0024a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@BIGPLMIN@?4?4?2Modules?2_json?4c?$AA@
  00251	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@GKNIGJBL@scanner_traverse?$AA@
  00258	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@scanner_tr:
  0025d	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  00262	48 83 b8 88 00
	00 00 00	 cmp	 QWORD PTR [rax+136], 0
  0026a	74 26		 je	 SHORT $LN2@scanner_tr
  0026c	48 8b 54 24 60	 mov	 rdx, QWORD PTR arg$[rsp]
  00271	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  00276	48 8b 88 88 00
	00 00		 mov	 rcx, QWORD PTR [rax+136]
  0027d	ff 54 24 58	 call	 QWORD PTR visit$[rsp]
  00281	89 44 24 3c	 mov	 DWORD PTR vret$21070[rsp], eax
  00285	83 7c 24 3c 00	 cmp	 DWORD PTR vret$21070[rsp], 0
  0028a	74 06		 je	 SHORT $LN1@scanner_tr
  0028c	8b 44 24 3c	 mov	 eax, DWORD PTR vret$21070[rsp]
  00290	eb 08		 jmp	 SHORT $LN37@scanner_tr
$LN1@scanner_tr:
$LN2@scanner_tr:
  00292	33 c0		 xor	 eax, eax
  00294	85 c0		 test	 eax, eax
  00296	75 a0		 jne	 SHORT $LN6@scanner_tr

; 577  :     return 0;

  00298	33 c0		 xor	 eax, eax
$LN37@scanner_tr:

; 578  : }

  0029a	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0029e	c3		 ret	 0
scanner_traverse ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@NCFCJOBO@scanner_clear?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$scanner_clear DD imagerel scanner_clear
	DD	imagerel scanner_clear+849
	DD	imagerel $unwind$scanner_clear
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$scanner_clear DD 010901H
	DD	0e209H
xdata	ENDS
;	COMDAT ??_C@_0O@NCFCJOBO@scanner_clear?$AA@
CONST	SEGMENT
??_C@_0O@NCFCJOBO@scanner_clear?$AA@ DB 'scanner_clear', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT scanner_clear
_TEXT	SEGMENT
s$ = 48
_py_tmp$21086 = 56
_py_tmp$21094 = 64
_py_tmp$21102 = 72
_py_tmp$21110 = 80
_py_tmp$21118 = 88
_py_tmp$21126 = 96
_py_tmp$21134 = 104
self$ = 128
scanner_clear PROC					; COMDAT

; 582  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 583  :     PyScannerObject *s;
; 584  :     assert(PyScanner_Check(self));

  00009	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyScannerType
  00010	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00018	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0001c	74 38		 je	 SHORT $LN31@scanner_cl
  0001e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyScannerType
  00025	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0002d	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  00031	e8 00 00 00 00	 call	 PyType_IsSubtype
  00036	85 c0		 test	 eax, eax
  00038	75 1c		 jne	 SHORT $LN31@scanner_cl
  0003a	41 b8 48 02 00
	00		 mov	 r8d, 584		; 00000248H
  00040	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@KOELJAMM@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAj?$AAs?$AAo?$AAn?$AA?4?$AAc?$AA?$AA@
  00047	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@NDGIKJDC@?$AAP?$AAy?$AAS?$AAc?$AAa?$AAn?$AAn?$AAe?$AAr?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?$CJ?$AA?$AA@
  0004e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00054	33 c0		 xor	 eax, eax
$LN31@scanner_cl:

; 585  :     s = (PyScannerObject *)self;

  00056	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0005e	48 89 44 24 30	 mov	 QWORD PTR s$[rsp], rax
$LN28@scanner_cl:

; 586  :     Py_CLEAR(s->strict);

  00063	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  00068	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  0006d	74 53		 je	 SHORT $LN25@scanner_cl
  0006f	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00077	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  0007c	4c 8b 48 60	 mov	 r9, QWORD PTR [rax+96]
  00080	41 b8 4a 02 00
	00		 mov	 r8d, 586		; 0000024aH
  00086	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@BIGPLMIN@?4?4?2Modules?2_json?4c?$AA@
  0008d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@NCFCJOBO@scanner_clear?$AA@
  00094	e8 00 00 00 00	 call	 _PyParallel_Guard
  00099	85 c0		 test	 eax, eax
  0009b	75 25		 jne	 SHORT $LN25@scanner_cl
  0009d	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  000a2	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000a6	48 89 44 24 38	 mov	 QWORD PTR _py_tmp$21086[rsp], rax
  000ab	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  000b0	48 c7 40 60 00
	00 00 00	 mov	 QWORD PTR [rax+96], 0
  000b8	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _py_tmp$21086[rsp]
  000bd	e8 00 00 00 00	 call	 _Py_DecRef
$LN25@scanner_cl:
  000c2	33 c0		 xor	 eax, eax
  000c4	85 c0		 test	 eax, eax
  000c6	75 9b		 jne	 SHORT $LN28@scanner_cl
$LN24@scanner_cl:

; 587  :     Py_CLEAR(s->object_hook);

  000c8	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  000cd	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  000d2	74 53		 je	 SHORT $LN21@scanner_cl
  000d4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000dc	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  000e1	4c 8b 48 68	 mov	 r9, QWORD PTR [rax+104]
  000e5	41 b8 4b 02 00
	00		 mov	 r8d, 587		; 0000024bH
  000eb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@BIGPLMIN@?4?4?2Modules?2_json?4c?$AA@
  000f2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@NCFCJOBO@scanner_clear?$AA@
  000f9	e8 00 00 00 00	 call	 _PyParallel_Guard
  000fe	85 c0		 test	 eax, eax
  00100	75 25		 jne	 SHORT $LN21@scanner_cl
  00102	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  00107	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0010b	48 89 44 24 40	 mov	 QWORD PTR _py_tmp$21094[rsp], rax
  00110	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  00115	48 c7 40 68 00
	00 00 00	 mov	 QWORD PTR [rax+104], 0
  0011d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _py_tmp$21094[rsp]
  00122	e8 00 00 00 00	 call	 _Py_DecRef
$LN21@scanner_cl:
  00127	33 c0		 xor	 eax, eax
  00129	85 c0		 test	 eax, eax
  0012b	75 9b		 jne	 SHORT $LN24@scanner_cl
$LN20@scanner_cl:

; 588  :     Py_CLEAR(s->object_pairs_hook);

  0012d	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  00132	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  00137	74 53		 je	 SHORT $LN17@scanner_cl
  00139	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00141	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  00146	4c 8b 48 70	 mov	 r9, QWORD PTR [rax+112]
  0014a	41 b8 4c 02 00
	00		 mov	 r8d, 588		; 0000024cH
  00150	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@BIGPLMIN@?4?4?2Modules?2_json?4c?$AA@
  00157	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@NCFCJOBO@scanner_clear?$AA@
  0015e	e8 00 00 00 00	 call	 _PyParallel_Guard
  00163	85 c0		 test	 eax, eax
  00165	75 25		 jne	 SHORT $LN17@scanner_cl
  00167	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  0016c	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00170	48 89 44 24 48	 mov	 QWORD PTR _py_tmp$21102[rsp], rax
  00175	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  0017a	48 c7 40 70 00
	00 00 00	 mov	 QWORD PTR [rax+112], 0
  00182	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _py_tmp$21102[rsp]
  00187	e8 00 00 00 00	 call	 _Py_DecRef
$LN17@scanner_cl:
  0018c	33 c0		 xor	 eax, eax
  0018e	85 c0		 test	 eax, eax
  00190	75 9b		 jne	 SHORT $LN20@scanner_cl
$LN16@scanner_cl:

; 589  :     Py_CLEAR(s->parse_float);

  00192	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  00197	48 83 78 78 00	 cmp	 QWORD PTR [rax+120], 0
  0019c	74 53		 je	 SHORT $LN13@scanner_cl
  0019e	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  001a6	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  001ab	4c 8b 48 78	 mov	 r9, QWORD PTR [rax+120]
  001af	41 b8 4d 02 00
	00		 mov	 r8d, 589		; 0000024dH
  001b5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@BIGPLMIN@?4?4?2Modules?2_json?4c?$AA@
  001bc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@NCFCJOBO@scanner_clear?$AA@
  001c3	e8 00 00 00 00	 call	 _PyParallel_Guard
  001c8	85 c0		 test	 eax, eax
  001ca	75 25		 jne	 SHORT $LN13@scanner_cl
  001cc	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  001d1	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  001d5	48 89 44 24 50	 mov	 QWORD PTR _py_tmp$21110[rsp], rax
  001da	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  001df	48 c7 40 78 00
	00 00 00	 mov	 QWORD PTR [rax+120], 0
  001e7	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _py_tmp$21110[rsp]
  001ec	e8 00 00 00 00	 call	 _Py_DecRef
$LN13@scanner_cl:
  001f1	33 c0		 xor	 eax, eax
  001f3	85 c0		 test	 eax, eax
  001f5	75 9b		 jne	 SHORT $LN16@scanner_cl
$LN12@scanner_cl:

; 590  :     Py_CLEAR(s->parse_int);

  001f7	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  001fc	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  00204	74 5c		 je	 SHORT $LN9@scanner_cl
  00206	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0020e	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  00213	4c 8b 88 80 00
	00 00		 mov	 r9, QWORD PTR [rax+128]
  0021a	41 b8 4e 02 00
	00		 mov	 r8d, 590		; 0000024eH
  00220	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@BIGPLMIN@?4?4?2Modules?2_json?4c?$AA@
  00227	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@NCFCJOBO@scanner_clear?$AA@
  0022e	e8 00 00 00 00	 call	 _PyParallel_Guard
  00233	85 c0		 test	 eax, eax
  00235	75 2b		 jne	 SHORT $LN9@scanner_cl
  00237	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  0023c	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  00243	48 89 44 24 58	 mov	 QWORD PTR _py_tmp$21118[rsp], rax
  00248	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  0024d	48 c7 80 80 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+128], 0
  00258	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _py_tmp$21118[rsp]
  0025d	e8 00 00 00 00	 call	 _Py_DecRef
$LN9@scanner_cl:
  00262	33 c0		 xor	 eax, eax
  00264	85 c0		 test	 eax, eax
  00266	75 8f		 jne	 SHORT $LN12@scanner_cl
$LN8@scanner_cl:

; 591  :     Py_CLEAR(s->parse_constant);

  00268	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  0026d	48 83 b8 88 00
	00 00 00	 cmp	 QWORD PTR [rax+136], 0
  00275	74 5c		 je	 SHORT $LN5@scanner_cl
  00277	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0027f	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  00284	4c 8b 88 88 00
	00 00		 mov	 r9, QWORD PTR [rax+136]
  0028b	41 b8 4f 02 00
	00		 mov	 r8d, 591		; 0000024fH
  00291	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@BIGPLMIN@?4?4?2Modules?2_json?4c?$AA@
  00298	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@NCFCJOBO@scanner_clear?$AA@
  0029f	e8 00 00 00 00	 call	 _PyParallel_Guard
  002a4	85 c0		 test	 eax, eax
  002a6	75 2b		 jne	 SHORT $LN5@scanner_cl
  002a8	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  002ad	48 8b 80 88 00
	00 00		 mov	 rax, QWORD PTR [rax+136]
  002b4	48 89 44 24 60	 mov	 QWORD PTR _py_tmp$21126[rsp], rax
  002b9	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  002be	48 c7 80 88 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+136], 0
  002c9	48 8b 4c 24 60	 mov	 rcx, QWORD PTR _py_tmp$21126[rsp]
  002ce	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@scanner_cl:
  002d3	33 c0		 xor	 eax, eax
  002d5	85 c0		 test	 eax, eax
  002d7	75 8f		 jne	 SHORT $LN8@scanner_cl
$LN4@scanner_cl:

; 592  :     Py_CLEAR(s->memo);

  002d9	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  002de	48 83 b8 90 00
	00 00 00	 cmp	 QWORD PTR [rax+144], 0
  002e6	74 5c		 je	 SHORT $LN1@scanner_cl
  002e8	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  002f0	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  002f5	4c 8b 88 90 00
	00 00		 mov	 r9, QWORD PTR [rax+144]
  002fc	41 b8 50 02 00
	00		 mov	 r8d, 592		; 00000250H
  00302	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@BIGPLMIN@?4?4?2Modules?2_json?4c?$AA@
  00309	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@NCFCJOBO@scanner_clear?$AA@
  00310	e8 00 00 00 00	 call	 _PyParallel_Guard
  00315	85 c0		 test	 eax, eax
  00317	75 2b		 jne	 SHORT $LN1@scanner_cl
  00319	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  0031e	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  00325	48 89 44 24 68	 mov	 QWORD PTR _py_tmp$21134[rsp], rax
  0032a	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  0032f	48 c7 80 90 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+144], 0
  0033a	48 8b 4c 24 68	 mov	 rcx, QWORD PTR _py_tmp$21134[rsp]
  0033f	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@scanner_cl:
  00344	33 c0		 xor	 eax, eax
  00346	85 c0		 test	 eax, eax
  00348	75 8f		 jne	 SHORT $LN4@scanner_cl

; 593  :     return 0;

  0034a	33 c0		 xor	 eax, eax

; 594  : }

  0034c	48 83 c4 78	 add	 rsp, 120		; 00000078H
  00350	c3		 ret	 0
scanner_clear ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@EOFNMIFD@OO?$CG?3scan_once?$AA@	; `string'
EXTRN	PyDict_Clear:PROC
EXTRN	PyArg_ParseTupleAndKeywords:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$scanner_call DD imagerel scanner_call
	DD	imagerel scanner_call+337
	DD	imagerel $unwind$scanner_call
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$scanner_call DD 011301H
	DD	0e213H
xdata	ENDS
;	COMDAT ??_C@_0O@EOFNMIFD@OO?$CG?3scan_once?$AA@
CONST	SEGMENT
??_C@_0O@EOFNMIFD@OO?$CG?3scan_once?$AA@ DB 'OO&:scan_once', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT scanner_call
_TEXT	SEGMENT
rval$ = 64
s$ = 72
idx$ = 80
pystr$ = 88
next_idx$ = 96
self$ = 128
args$ = 136
kwds$ = 144
scanner_call PROC					; COMDAT

; 1071 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 1072 :     /* Python callable interface to scan_once_{str,unicode} */
; 1073 :     PyObject *pystr;
; 1074 :     PyObject *rval;
; 1075 :     Py_ssize_t idx;
; 1076 :     Py_ssize_t next_idx = -1;

  00013	48 c7 44 24 60
	ff ff ff ff	 mov	 QWORD PTR next_idx$[rsp], -1

; 1077 :     static char *kwlist[] = {"string", "idx", NULL};
; 1078 :     PyScannerObject *s;
; 1079 :     assert(PyScanner_Check(self));

  0001c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyScannerType
  00023	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  0002b	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0002f	74 38		 je	 SHORT $LN7@scanner_ca
  00031	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyScannerType
  00038	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00040	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  00044	e8 00 00 00 00	 call	 PyType_IsSubtype
  00049	85 c0		 test	 eax, eax
  0004b	75 1c		 jne	 SHORT $LN7@scanner_ca
  0004d	41 b8 37 04 00
	00		 mov	 r8d, 1079		; 00000437H
  00053	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@KOELJAMM@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAj?$AAs?$AAo?$AAn?$AA?4?$AAc?$AA?$AA@
  0005a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@NDGIKJDC@?$AAP?$AAy?$AAS?$AAc?$AAa?$AAn?$AAn?$AAe?$AAr?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?$CJ?$AA?$AA@
  00061	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00067	33 c0		 xor	 eax, eax
$LN7@scanner_ca:

; 1080 :     s = (PyScannerObject *)self;

  00069	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00071	48 89 44 24 48	 mov	 QWORD PTR s$[rsp], rax

; 1081 :     if (!PyArg_ParseTupleAndKeywords(args, kwds, "OO&:scan_once", kwlist, &pystr, _convertPyInt_AsSsize_t, &idx))

  00076	48 8d 44 24 50	 lea	 rax, QWORD PTR idx$[rsp]
  0007b	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00080	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_convertPyInt_AsSsize_t
  00087	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0008c	48 8d 44 24 58	 lea	 rax, QWORD PTR pystr$[rsp]
  00091	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00096	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?kwlist@?1??scanner_call@@9@9
  0009d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0O@EOFNMIFD@OO?$CG?3scan_once?$AA@
  000a4	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR kwds$[rsp]
  000ac	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  000b4	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  000b9	85 c0		 test	 eax, eax
  000bb	75 07		 jne	 SHORT $LN4@scanner_ca

; 1082 :         return NULL;

  000bd	33 c0		 xor	 eax, eax
  000bf	e9 88 00 00 00	 jmp	 $LN5@scanner_ca
$LN4@scanner_ca:

; 1083 : 
; 1084 :     if (PyUnicode_Check(pystr)) {

  000c4	48 8b 44 24 58	 mov	 rax, QWORD PTR pystr$[rsp]
  000c9	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000cd	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000d3	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  000d8	85 c0		 test	 eax, eax
  000da	74 20		 je	 SHORT $LN3@scanner_ca

; 1085 :         rval = scan_once_unicode(s, pystr, idx, &next_idx);

  000dc	4c 8d 4c 24 60	 lea	 r9, QWORD PTR next_idx$[rsp]
  000e1	4c 8b 44 24 50	 mov	 r8, QWORD PTR idx$[rsp]
  000e6	48 8b 54 24 58	 mov	 rdx, QWORD PTR pystr$[rsp]
  000eb	48 8b 4c 24 48	 mov	 rcx, QWORD PTR s$[rsp]
  000f0	e8 00 00 00 00	 call	 scan_once_unicode
  000f5	48 89 44 24 40	 mov	 QWORD PTR rval$[rsp], rax

; 1086 :     }
; 1087 :     else {

  000fa	eb 24		 jmp	 SHORT $LN2@scanner_ca
$LN3@scanner_ca:

; 1088 :         PyErr_Format(PyExc_TypeError,
; 1089 :                  "first argument must be a string, not %.80s",
; 1090 :                  Py_TYPE(pystr)->tp_name);

  000fc	48 8b 44 24 58	 mov	 rax, QWORD PTR pystr$[rsp]
  00101	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00105	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  00109	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CL@OIEJEOOL@first?5argument?5must?5be?5a?5string?0@
  00110	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00117	e8 00 00 00 00	 call	 PyErr_Format

; 1091 :         return NULL;

  0011c	33 c0		 xor	 eax, eax
  0011e	eb 2c		 jmp	 SHORT $LN5@scanner_ca
$LN2@scanner_ca:

; 1092 :     }
; 1093 :     PyDict_Clear(s->memo);

  00120	48 8b 44 24 48	 mov	 rax, QWORD PTR s$[rsp]
  00125	48 8b 88 90 00
	00 00		 mov	 rcx, QWORD PTR [rax+144]
  0012c	e8 00 00 00 00	 call	 PyDict_Clear

; 1094 :     if (rval == NULL)

  00131	48 83 7c 24 40
	00		 cmp	 QWORD PTR rval$[rsp], 0
  00137	75 04		 jne	 SHORT $LN1@scanner_ca

; 1095 :         return NULL;

  00139	33 c0		 xor	 eax, eax
  0013b	eb 0f		 jmp	 SHORT $LN5@scanner_ca
$LN1@scanner_ca:

; 1096 :     return _build_rval_index_tuple(rval, next_idx);

  0013d	48 8b 54 24 60	 mov	 rdx, QWORD PTR next_idx$[rsp]
  00142	48 8b 4c 24 40	 mov	 rcx, QWORD PTR rval$[rsp]
  00147	e8 00 00 00 00	 call	 _build_rval_index_tuple
$LN5@scanner_ca:

; 1097 : }

  0014c	48 83 c4 78	 add	 rsp, 120		; 00000078H
  00150	c3		 ret	 0
scanner_call ENDP
_TEXT	ENDS
PUBLIC	??_C@_09BLDCEMOH@?9Infinity?$AA@		; `string'
PUBLIC	??_C@_08KEBCLIFP@Infinity?$AA@			; `string'
PUBLIC	??_C@_03ICJPMMHB@NaN?$AA@			; `string'
PUBLIC	_Py_IncRef
PUBLIC	??_C@_0DD@KJGHDLGJ@?5while?5decoding?5a?5JSON?5array?5fro@ ; `string'
PUBLIC	??_C@_0DE@POAICCIC@?5while?5decoding?5a?5JSON?5object?5fr@ ; `string'
EXTRN	_Py_FalseStruct:BYTE
EXTRN	_Py_TrueStruct:BYTE
EXTRN	_Py_NoneStruct:BYTE
EXTRN	_Py_CheckRecursiveCall:PROC
EXTRN	_Py_CheckRecursionLimit:DWORD
EXTRN	PyThreadState_Get:PROC
EXTRN	PyObject_IsTrue:PROC
EXTRN	PyErr_SetNone:PROC
EXTRN	PyExc_StopIteration:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$scan_once_unicode DD imagerel scan_once_unicode
	DD	imagerel scan_once_unicode+5402
	DD	imagerel $unwind$scan_once_unicode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$scan_once_unicode DD 021b01H
	DD	02f011bH
xdata	ENDS
;	COMDAT ??_C@_09BLDCEMOH@?9Infinity?$AA@
CONST	SEGMENT
??_C@_09BLDCEMOH@?9Infinity?$AA@ DB '-Infinity', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08KEBCLIFP@Infinity?$AA@
CONST	SEGMENT
??_C@_08KEBCLIFP@Infinity?$AA@ DB 'Infinity', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03ICJPMMHB@NaN?$AA@
CONST	SEGMENT
??_C@_03ICJPMMHB@NaN?$AA@ DB 'NaN', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@KJGHDLGJ@?5while?5decoding?5a?5JSON?5array?5fro@
CONST	SEGMENT
??_C@_0DD@KJGHDLGJ@?5while?5decoding?5a?5JSON?5array?5fro@ DB ' while dec'
	DB	'oding a JSON array from a unicode string', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@POAICCIC@?5while?5decoding?5a?5JSON?5object?5fr@
CONST	SEGMENT
??_C@_0DE@POAICCIC@?5while?5decoding?5a?5JSON?5object?5fr@ DB ' while dec'
	DB	'oding a JSON object from a unicode string', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT scan_once_unicode
_TEXT	SEGMENT
kind$ = 32
res$ = 40
length$ = 48
str$ = 56
tv78 = 64
tv145 = 72
tv154 = 80
tv203 = 88
tv202 = 92
tv204 = 96
tv216 = 104
tv236 = 112
tv230 = 120
tv243 = 128
tv263 = 136
tv257 = 144
tv283 = 152
tv282 = 156
tv298 = 160
tv297 = 164
tv313 = 168
tv312 = 172
tv332 = 176
tv331 = 180
tv347 = 184
tv346 = 188
tv362 = 192
tv361 = 196
tv381 = 200
tv380 = 204
tv396 = 208
tv395 = 212
tv411 = 216
tv410 = 220
tv426 = 224
tv425 = 228
tv445 = 232
tv444 = 236
tv460 = 240
tv459 = 244
tv482 = 248
tv481 = 252
tv497 = 256
tv496 = 260
tv512 = 264
tv511 = 268
tv527 = 272
tv526 = 276
tv542 = 280
tv541 = 284
tv557 = 288
tv556 = 292
tv572 = 296
tv571 = 300
tv594 = 304
tv593 = 308
tv609 = 312
tv608 = 316
tv624 = 320
tv623 = 324
tv639 = 328
tv638 = 332
tv654 = 336
tv653 = 340
tv669 = 344
tv668 = 348
tv684 = 352
tv683 = 356
tv699 = 360
tv698 = 364
s$ = 384
pystr$ = 392
idx$ = 400
next_idx_ptr$ = 408
scan_once_unicode PROC					; COMDAT

; 958  : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec 78 01
	00 00		 sub	 rsp, 376		; 00000178H

; 959  :     /* Read one JSON term (of any kind) from PyUnicode pystr.
; 960  :     idx is the index of the first character of the term
; 961  :     *next_idx_ptr is a return-by-reference index to the first character after
; 962  :         the number.
; 963  : 
; 964  :     Returns a new PyObject representation of the term.
; 965  :     */
; 966  :     PyObject *res;
; 967  :     void *str;
; 968  :     int kind;
; 969  :     Py_ssize_t length;
; 970  : 
; 971  :     if (PyUnicode_READY(pystr) == -1)

  0001b	48 8b 84 24 88
	01 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  00023	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00027	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0002d	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00032	85 c0		 test	 eax, eax
  00034	75 1c		 jne	 SHORT $LN32@scan_once_
  00036	41 b8 cb 03 00
	00		 mov	 r8d, 971		; 000003cbH
  0003c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@KOELJAMM@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAj?$AAs?$AAo?$AAn?$AA?4?$AAc?$AA?$AA@
  00043	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@GLPHKNNN@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAp?$AAy?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  0004a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00050	33 c0		 xor	 eax, eax
$LN32@scan_once_:
  00052	48 8b 84 24 88
	01 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  0005a	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0005d	c1 e8 07	 shr	 eax, 7
  00060	83 e0 01	 and	 eax, 1
  00063	85 c0		 test	 eax, eax
  00065	74 0a		 je	 SHORT $LN33@scan_once_
  00067	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR tv78[rsp], 0
  0006f	eb 11		 jmp	 SHORT $LN34@scan_once_
$LN33@scan_once_:
  00071	48 8b 8c 24 88
	01 00 00	 mov	 rcx, QWORD PTR pystr$[rsp]
  00079	e8 00 00 00 00	 call	 _PyUnicode_Ready
  0007e	89 44 24 40	 mov	 DWORD PTR tv78[rsp], eax
$LN34@scan_once_:
  00082	83 7c 24 40 ff	 cmp	 DWORD PTR tv78[rsp], -1
  00087	75 07		 jne	 SHORT $LN29@scan_once_

; 972  :         return NULL;

  00089	33 c0		 xor	 eax, eax
  0008b	e9 00 14 00 00	 jmp	 $LN30@scan_once_
$LN29@scan_once_:

; 973  : 
; 974  :     str = PyUnicode_DATA(pystr);

  00090	48 8b 84 24 88
	01 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  00098	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0009c	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000a2	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  000a7	85 c0		 test	 eax, eax
  000a9	75 1c		 jne	 SHORT $LN35@scan_once_
  000ab	41 b8 ce 03 00
	00		 mov	 r8d, 974		; 000003ceH
  000b1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@KOELJAMM@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAj?$AAs?$AAo?$AAn?$AA?4?$AAc?$AA?$AA@
  000b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@GLPHKNNN@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAp?$AAy?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  000bf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000c5	33 c0		 xor	 eax, eax
$LN35@scan_once_:
  000c7	48 8b 84 24 88
	01 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  000cf	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  000d2	c1 e8 05	 shr	 eax, 5
  000d5	83 e0 01	 and	 eax, 1
  000d8	85 c0		 test	 eax, eax
  000da	0f 84 b1 00 00
	00		 je	 $LN41@scan_once_
  000e0	48 8b 84 24 88
	01 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  000e8	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000ec	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000f2	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  000f7	85 c0		 test	 eax, eax
  000f9	75 1c		 jne	 SHORT $LN36@scan_once_
  000fb	41 b8 ce 03 00
	00		 mov	 r8d, 974		; 000003ceH
  00101	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@KOELJAMM@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAj?$AAs?$AAo?$AAn?$AA?4?$AAc?$AA?$AA@
  00108	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@GLPHKNNN@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAp?$AAy?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  0010f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00115	33 c0		 xor	 eax, eax
$LN36@scan_once_:
  00117	48 8b 84 24 88
	01 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  0011f	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00122	c1 e8 07	 shr	 eax, 7
  00125	83 e0 01	 and	 eax, 1
  00128	85 c0		 test	 eax, eax
  0012a	75 1c		 jne	 SHORT $LN37@scan_once_
  0012c	41 b8 ce 03 00
	00		 mov	 r8d, 974		; 000003ceH
  00132	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@KOELJAMM@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAj?$AAs?$AAo?$AAn?$AA?4?$AAc?$AA?$AA@
  00139	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@NACFPDOF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAp?$AAy?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  00140	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00146	33 c0		 xor	 eax, eax
$LN37@scan_once_:
  00148	48 8b 84 24 88
	01 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  00150	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00153	c1 e8 06	 shr	 eax, 6
  00156	83 e0 01	 and	 eax, 1
  00159	85 c0		 test	 eax, eax
  0015b	74 15		 je	 SHORT $LN38@scan_once_
  0015d	48 8b 84 24 88
	01 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  00165	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  0016b	48 89 44 24 48	 mov	 QWORD PTR tv145[rsp], rax
  00170	eb 13		 jmp	 SHORT $LN39@scan_once_
$LN38@scan_once_:
  00172	48 8b 84 24 88
	01 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  0017a	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  00180	48 89 44 24 48	 mov	 QWORD PTR tv145[rsp], rax
$LN39@scan_once_:
  00185	48 8b 44 24 48	 mov	 rax, QWORD PTR tv145[rsp]
  0018a	48 89 44 24 50	 mov	 QWORD PTR tv154[rsp], rax
  0018f	eb 42		 jmp	 SHORT $LN42@scan_once_
$LN41@scan_once_:
  00191	48 8b 84 24 88
	01 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  00199	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  001a1	75 1c		 jne	 SHORT $LN40@scan_once_
  001a3	41 b8 ce 03 00
	00		 mov	 r8d, 974		; 000003ceH
  001a9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@KOELJAMM@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAj?$AAs?$AAo?$AAn?$AA?4?$AAc?$AA?$AA@
  001b0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EM@FMOHIEKB@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AAp?$AAy?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt@
  001b7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001bd	33 c0		 xor	 eax, eax
$LN40@scan_once_:
  001bf	48 8b 84 24 88
	01 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  001c7	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  001ce	48 89 44 24 50	 mov	 QWORD PTR tv154[rsp], rax
$LN42@scan_once_:
  001d3	48 8b 44 24 50	 mov	 rax, QWORD PTR tv154[rsp]
  001d8	48 89 44 24 38	 mov	 QWORD PTR str$[rsp], rax

; 975  :     kind = PyUnicode_KIND(pystr);

  001dd	48 8b 84 24 88
	01 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  001e5	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  001e9	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  001ef	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  001f4	85 c0		 test	 eax, eax
  001f6	75 1c		 jne	 SHORT $LN43@scan_once_
  001f8	41 b8 cf 03 00
	00		 mov	 r8d, 975		; 000003cfH
  001fe	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@KOELJAMM@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAj?$AAs?$AAo?$AAn?$AA?4?$AAc?$AA?$AA@
  00205	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@GLPHKNNN@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAp?$AAy?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  0020c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00212	33 c0		 xor	 eax, eax
$LN43@scan_once_:
  00214	48 8b 84 24 88
	01 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  0021c	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0021f	c1 e8 07	 shr	 eax, 7
  00222	83 e0 01	 and	 eax, 1
  00225	85 c0		 test	 eax, eax
  00227	75 1c		 jne	 SHORT $LN44@scan_once_
  00229	41 b8 cf 03 00
	00		 mov	 r8d, 975		; 000003cfH
  0022f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@KOELJAMM@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAj?$AAs?$AAo?$AAn?$AA?4?$AAc?$AA?$AA@
  00236	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@NACFPDOF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAp?$AAy?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  0023d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00243	33 c0		 xor	 eax, eax
$LN44@scan_once_:
  00245	48 8b 84 24 88
	01 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  0024d	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00250	c1 e8 02	 shr	 eax, 2
  00253	83 e0 07	 and	 eax, 7
  00256	89 44 24 20	 mov	 DWORD PTR kind$[rsp], eax

; 976  :     length = PyUnicode_GET_LENGTH(pystr);

  0025a	48 8b 84 24 88
	01 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  00262	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00266	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0026c	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00271	85 c0		 test	 eax, eax
  00273	75 1c		 jne	 SHORT $LN45@scan_once_
  00275	41 b8 d0 03 00
	00		 mov	 r8d, 976		; 000003d0H
  0027b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@KOELJAMM@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAj?$AAs?$AAo?$AAn?$AA?4?$AAc?$AA?$AA@
  00282	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@GLPHKNNN@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAp?$AAy?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  00289	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0028f	33 c0		 xor	 eax, eax
$LN45@scan_once_:
  00291	48 8b 84 24 88
	01 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  00299	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0029c	c1 e8 07	 shr	 eax, 7
  0029f	83 e0 01	 and	 eax, 1
  002a2	85 c0		 test	 eax, eax
  002a4	75 1c		 jne	 SHORT $LN46@scan_once_
  002a6	41 b8 d0 03 00
	00		 mov	 r8d, 976		; 000003d0H
  002ac	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@KOELJAMM@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAj?$AAs?$AAo?$AAn?$AA?4?$AAc?$AA?$AA@
  002b3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@NACFPDOF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAp?$AAy?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  002ba	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  002c0	33 c0		 xor	 eax, eax
$LN46@scan_once_:
  002c2	48 8b 84 24 88
	01 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  002ca	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  002ce	48 89 44 24 30	 mov	 QWORD PTR length$[rsp], rax

; 977  : 
; 978  :     if (idx >= length) {

  002d3	48 8b 44 24 30	 mov	 rax, QWORD PTR length$[rsp]
  002d8	48 39 84 24 90
	01 00 00	 cmp	 QWORD PTR idx$[rsp], rax
  002e0	7c 13		 jl	 SHORT $LN28@scan_once_

; 979  :         PyErr_SetNone(PyExc_StopIteration);

  002e2	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_StopIteration
  002e9	e8 00 00 00 00	 call	 PyErr_SetNone

; 980  :         return NULL;

  002ee	33 c0		 xor	 eax, eax
  002f0	e9 9b 11 00 00	 jmp	 $LN30@scan_once_
$LN28@scan_once_:

; 981  :     }
; 982  : 
; 983  :     switch (PyUnicode_READ(kind, str, idx)) {

  002f5	83 7c 24 20 01	 cmp	 DWORD PTR kind$[rsp], 1
  002fa	75 1c		 jne	 SHORT $LN49@scan_once_
  002fc	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR idx$[rsp]
  00304	48 8b 4c 24 38	 mov	 rcx, QWORD PTR str$[rsp]
  00309	48 03 c8	 add	 rcx, rax
  0030c	48 8b c1	 mov	 rax, rcx
  0030f	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00312	89 44 24 58	 mov	 DWORD PTR tv203[rsp], eax
  00316	eb 3a		 jmp	 SHORT $LN50@scan_once_
$LN49@scan_once_:
  00318	83 7c 24 20 02	 cmp	 DWORD PTR kind$[rsp], 2
  0031d	75 17		 jne	 SHORT $LN47@scan_once_
  0031f	48 8b 44 24 38	 mov	 rax, QWORD PTR str$[rsp]
  00324	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  0032c	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  00330	89 44 24 5c	 mov	 DWORD PTR tv202[rsp], eax
  00334	eb 14		 jmp	 SHORT $LN48@scan_once_
$LN47@scan_once_:
  00336	48 8b 44 24 38	 mov	 rax, QWORD PTR str$[rsp]
  0033b	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  00343	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  00346	89 44 24 5c	 mov	 DWORD PTR tv202[rsp], eax
$LN48@scan_once_:
  0034a	8b 44 24 5c	 mov	 eax, DWORD PTR tv202[rsp]
  0034e	89 44 24 58	 mov	 DWORD PTR tv203[rsp], eax
$LN50@scan_once_:
  00352	8b 44 24 58	 mov	 eax, DWORD PTR tv203[rsp]
  00356	89 44 24 60	 mov	 DWORD PTR tv204[rsp], eax
  0035a	8b 44 24 60	 mov	 eax, DWORD PTR tv204[rsp]
  0035e	83 e8 22	 sub	 eax, 34			; 00000022H
  00361	89 44 24 60	 mov	 DWORD PTR tv204[rsp], eax
  00365	83 7c 24 60 59	 cmp	 DWORD PTR tv204[rsp], 89 ; 00000059H
  0036a	0f 87 fb 10 00
	00		 ja	 $LN26@scan_once_
  00370	8b 44 24 60	 mov	 eax, DWORD PTR tv204[rsp]
  00374	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  0037b	0f b6 84 01 00
	00 00 00	 movzx	 eax, BYTE PTR $LN163@scan_once_[rcx+rax]
  00383	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN164@scan_once_[rcx+rax*4]
  0038a	48 03 c1	 add	 rax, rcx
  0038d	ff e0		 jmp	 rax
$LN25@scan_once_:

; 984  :         case '"':
; 985  :             /* string */
; 986  :             return scanstring_unicode(pystr, idx + 1,
; 987  :                 PyObject_IsTrue(s->strict),
; 988  :                 next_idx_ptr);

  0038f	48 8b 84 24 80
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00397	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  0039b	e8 00 00 00 00	 call	 PyObject_IsTrue
  003a0	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  003a8	48 ff c1	 inc	 rcx
  003ab	4c 8b 8c 24 98
	01 00 00	 mov	 r9, QWORD PTR next_idx_ptr$[rsp]
  003b3	44 8b c0	 mov	 r8d, eax
  003b6	48 8b d1	 mov	 rdx, rcx
  003b9	48 8b 8c 24 88
	01 00 00	 mov	 rcx, QWORD PTR pystr$[rsp]
  003c1	e8 00 00 00 00	 call	 scanstring_unicode
  003c6	e9 c5 10 00 00	 jmp	 $LN30@scan_once_
$LN24@scan_once_:

; 989  :         case '{':
; 990  :             /* object */
; 991  :             if (Py_EnterRecursiveCall(" while decoding a JSON object "
; 992  :                                       "from a unicode string"))

  003cb	e8 00 00 00 00	 call	 PyThreadState_Get
  003d0	48 83 c0 18	 add	 rax, 24
  003d4	48 89 44 24 68	 mov	 QWORD PTR tv216[rsp], rax
  003d9	48 8b 44 24 68	 mov	 rax, QWORD PTR tv216[rsp]
  003de	8b 00		 mov	 eax, DWORD PTR [rax]
  003e0	ff c0		 inc	 eax
  003e2	48 8b 4c 24 68	 mov	 rcx, QWORD PTR tv216[rsp]
  003e7	89 01		 mov	 DWORD PTR [rcx], eax
  003e9	48 8b 44 24 68	 mov	 rax, QWORD PTR tv216[rsp]
  003ee	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _Py_CheckRecursionLimit
  003f4	39 08		 cmp	 DWORD PTR [rax], ecx
  003f6	7e 17		 jle	 SHORT $LN23@scan_once_
  003f8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DE@POAICCIC@?5while?5decoding?5a?5JSON?5object?5fr@
  003ff	e8 00 00 00 00	 call	 _Py_CheckRecursiveCall
  00404	85 c0		 test	 eax, eax
  00406	74 07		 je	 SHORT $LN23@scan_once_

; 993  :                 return NULL;

  00408	33 c0		 xor	 eax, eax
  0040a	e9 81 10 00 00	 jmp	 $LN30@scan_once_
$LN23@scan_once_:

; 994  :             res = _parse_object_unicode(s, pystr, idx + 1, next_idx_ptr);

  0040f	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR idx$[rsp]
  00417	48 ff c0	 inc	 rax
  0041a	4c 8b 8c 24 98
	01 00 00	 mov	 r9, QWORD PTR next_idx_ptr$[rsp]
  00422	4c 8b c0	 mov	 r8, rax
  00425	48 8b 94 24 88
	01 00 00	 mov	 rdx, QWORD PTR pystr$[rsp]
  0042d	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  00435	e8 00 00 00 00	 call	 _parse_object_unicode
  0043a	48 89 44 24 28	 mov	 QWORD PTR res$[rsp], rax
$LN22@scan_once_:

; 995  :             Py_LeaveRecursiveCall();

  0043f	83 3d 00 00 00
	00 64		 cmp	 DWORD PTR _Py_CheckRecursionLimit, 100 ; 00000064H
  00446	7e 0f		 jle	 SHORT $LN51@scan_once_
  00448	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR _Py_CheckRecursionLimit
  0044e	83 e8 32	 sub	 eax, 50			; 00000032H
  00451	89 44 24 70	 mov	 DWORD PTR tv236[rsp], eax
  00455	eb 10		 jmp	 SHORT $LN52@scan_once_
$LN51@scan_once_:
  00457	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR _Py_CheckRecursionLimit
  0045d	c1 f8 02	 sar	 eax, 2
  00460	6b c0 03	 imul	 eax, 3
  00463	89 44 24 70	 mov	 DWORD PTR tv236[rsp], eax
$LN52@scan_once_:
  00467	e8 00 00 00 00	 call	 PyThreadState_Get
  0046c	48 83 c0 18	 add	 rax, 24
  00470	48 89 44 24 78	 mov	 QWORD PTR tv230[rsp], rax
  00475	48 8b 44 24 78	 mov	 rax, QWORD PTR tv230[rsp]
  0047a	8b 00		 mov	 eax, DWORD PTR [rax]
  0047c	ff c8		 dec	 eax
  0047e	48 8b 4c 24 78	 mov	 rcx, QWORD PTR tv230[rsp]
  00483	89 01		 mov	 DWORD PTR [rcx], eax
  00485	48 8b 44 24 78	 mov	 rax, QWORD PTR tv230[rsp]
  0048a	8b 4c 24 70	 mov	 ecx, DWORD PTR tv236[rsp]
  0048e	39 08		 cmp	 DWORD PTR [rax], ecx
  00490	7d 09		 jge	 SHORT $LN19@scan_once_
  00492	e8 00 00 00 00	 call	 PyThreadState_Get
  00497	c6 40 1c 00	 mov	 BYTE PTR [rax+28], 0
$LN19@scan_once_:
  0049b	33 c0		 xor	 eax, eax
  0049d	85 c0		 test	 eax, eax
  0049f	75 9e		 jne	 SHORT $LN22@scan_once_

; 996  :             return res;

  004a1	48 8b 44 24 28	 mov	 rax, QWORD PTR res$[rsp]
  004a6	e9 e5 0f 00 00	 jmp	 $LN30@scan_once_
$LN18@scan_once_:

; 997  :         case '[':
; 998  :             /* array */
; 999  :             if (Py_EnterRecursiveCall(" while decoding a JSON array "
; 1000 :                                       "from a unicode string"))

  004ab	e8 00 00 00 00	 call	 PyThreadState_Get
  004b0	48 83 c0 18	 add	 rax, 24
  004b4	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv243[rsp], rax
  004bc	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR tv243[rsp]
  004c4	8b 00		 mov	 eax, DWORD PTR [rax]
  004c6	ff c0		 inc	 eax
  004c8	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR tv243[rsp]
  004d0	89 01		 mov	 DWORD PTR [rcx], eax
  004d2	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR tv243[rsp]
  004da	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _Py_CheckRecursionLimit
  004e0	39 08		 cmp	 DWORD PTR [rax], ecx
  004e2	7e 17		 jle	 SHORT $LN17@scan_once_
  004e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DD@KJGHDLGJ@?5while?5decoding?5a?5JSON?5array?5fro@
  004eb	e8 00 00 00 00	 call	 _Py_CheckRecursiveCall
  004f0	85 c0		 test	 eax, eax
  004f2	74 07		 je	 SHORT $LN17@scan_once_

; 1001 :                 return NULL;

  004f4	33 c0		 xor	 eax, eax
  004f6	e9 95 0f 00 00	 jmp	 $LN30@scan_once_
$LN17@scan_once_:

; 1002 :             res = _parse_array_unicode(s, pystr, idx + 1, next_idx_ptr);

  004fb	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR idx$[rsp]
  00503	48 ff c0	 inc	 rax
  00506	4c 8b 8c 24 98
	01 00 00	 mov	 r9, QWORD PTR next_idx_ptr$[rsp]
  0050e	4c 8b c0	 mov	 r8, rax
  00511	48 8b 94 24 88
	01 00 00	 mov	 rdx, QWORD PTR pystr$[rsp]
  00519	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  00521	e8 00 00 00 00	 call	 _parse_array_unicode
  00526	48 89 44 24 28	 mov	 QWORD PTR res$[rsp], rax
$LN16@scan_once_:

; 1003 :             Py_LeaveRecursiveCall();

  0052b	83 3d 00 00 00
	00 64		 cmp	 DWORD PTR _Py_CheckRecursionLimit, 100 ; 00000064H
  00532	7e 12		 jle	 SHORT $LN53@scan_once_
  00534	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR _Py_CheckRecursionLimit
  0053a	83 e8 32	 sub	 eax, 50			; 00000032H
  0053d	89 84 24 88 00
	00 00		 mov	 DWORD PTR tv263[rsp], eax
  00544	eb 13		 jmp	 SHORT $LN54@scan_once_
$LN53@scan_once_:
  00546	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR _Py_CheckRecursionLimit
  0054c	c1 f8 02	 sar	 eax, 2
  0054f	6b c0 03	 imul	 eax, 3
  00552	89 84 24 88 00
	00 00		 mov	 DWORD PTR tv263[rsp], eax
$LN54@scan_once_:
  00559	e8 00 00 00 00	 call	 PyThreadState_Get
  0055e	48 83 c0 18	 add	 rax, 24
  00562	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv257[rsp], rax
  0056a	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR tv257[rsp]
  00572	8b 00		 mov	 eax, DWORD PTR [rax]
  00574	ff c8		 dec	 eax
  00576	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR tv257[rsp]
  0057e	89 01		 mov	 DWORD PTR [rcx], eax
  00580	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR tv257[rsp]
  00588	8b 8c 24 88 00
	00 00		 mov	 ecx, DWORD PTR tv263[rsp]
  0058f	39 08		 cmp	 DWORD PTR [rax], ecx
  00591	7d 09		 jge	 SHORT $LN13@scan_once_
  00593	e8 00 00 00 00	 call	 PyThreadState_Get
  00598	c6 40 1c 00	 mov	 BYTE PTR [rax+28], 0
$LN13@scan_once_:
  0059c	33 c0		 xor	 eax, eax
  0059e	85 c0		 test	 eax, eax
  005a0	75 89		 jne	 SHORT $LN16@scan_once_

; 1004 :             return res;

  005a2	48 8b 44 24 28	 mov	 rax, QWORD PTR res$[rsp]
  005a7	e9 e4 0e 00 00	 jmp	 $LN30@scan_once_
$LN12@scan_once_:

; 1005 :         case 'n':
; 1006 :             /* null */
; 1007 :             if ((idx + 3 < length) && PyUnicode_READ(kind, str, idx + 1) == 'u' && PyUnicode_READ(kind, str, idx + 2) == 'l' && PyUnicode_READ(kind, str, idx + 3) == 'l') {

  005ac	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR idx$[rsp]
  005b4	48 83 c0 03	 add	 rax, 3
  005b8	48 3b 44 24 30	 cmp	 rax, QWORD PTR length$[rsp]
  005bd	0f 8d a2 01 00
	00		 jge	 $LN11@scan_once_
  005c3	83 7c 24 20 01	 cmp	 DWORD PTR kind$[rsp], 1
  005c8	75 20		 jne	 SHORT $LN57@scan_once_
  005ca	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR idx$[rsp]
  005d2	48 8b 4c 24 38	 mov	 rcx, QWORD PTR str$[rsp]
  005d7	48 03 c8	 add	 rcx, rax
  005da	48 8b c1	 mov	 rax, rcx
  005dd	0f b6 40 01	 movzx	 eax, BYTE PTR [rax+1]
  005e1	89 84 24 98 00
	00 00		 mov	 DWORD PTR tv283[rsp], eax
  005e8	eb 48		 jmp	 SHORT $LN58@scan_once_
$LN57@scan_once_:
  005ea	83 7c 24 20 02	 cmp	 DWORD PTR kind$[rsp], 2
  005ef	75 1b		 jne	 SHORT $LN55@scan_once_
  005f1	48 8b 44 24 38	 mov	 rax, QWORD PTR str$[rsp]
  005f6	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  005fe	0f b7 44 48 02	 movzx	 eax, WORD PTR [rax+rcx*2+2]
  00603	89 84 24 9c 00
	00 00		 mov	 DWORD PTR tv282[rsp], eax
  0060a	eb 18		 jmp	 SHORT $LN56@scan_once_
$LN55@scan_once_:
  0060c	48 8b 44 24 38	 mov	 rax, QWORD PTR str$[rsp]
  00611	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  00619	8b 44 88 04	 mov	 eax, DWORD PTR [rax+rcx*4+4]
  0061d	89 84 24 9c 00
	00 00		 mov	 DWORD PTR tv282[rsp], eax
$LN56@scan_once_:
  00624	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR tv282[rsp]
  0062b	89 84 24 98 00
	00 00		 mov	 DWORD PTR tv283[rsp], eax
$LN58@scan_once_:
  00632	83 bc 24 98 00
	00 00 75	 cmp	 DWORD PTR tv283[rsp], 117 ; 00000075H
  0063a	0f 85 25 01 00
	00		 jne	 $LN11@scan_once_
  00640	83 7c 24 20 01	 cmp	 DWORD PTR kind$[rsp], 1
  00645	75 20		 jne	 SHORT $LN61@scan_once_
  00647	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR idx$[rsp]
  0064f	48 8b 4c 24 38	 mov	 rcx, QWORD PTR str$[rsp]
  00654	48 03 c8	 add	 rcx, rax
  00657	48 8b c1	 mov	 rax, rcx
  0065a	0f b6 40 02	 movzx	 eax, BYTE PTR [rax+2]
  0065e	89 84 24 a0 00
	00 00		 mov	 DWORD PTR tv298[rsp], eax
  00665	eb 48		 jmp	 SHORT $LN62@scan_once_
$LN61@scan_once_:
  00667	83 7c 24 20 02	 cmp	 DWORD PTR kind$[rsp], 2
  0066c	75 1b		 jne	 SHORT $LN59@scan_once_
  0066e	48 8b 44 24 38	 mov	 rax, QWORD PTR str$[rsp]
  00673	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  0067b	0f b7 44 48 04	 movzx	 eax, WORD PTR [rax+rcx*2+4]
  00680	89 84 24 a4 00
	00 00		 mov	 DWORD PTR tv297[rsp], eax
  00687	eb 18		 jmp	 SHORT $LN60@scan_once_
$LN59@scan_once_:
  00689	48 8b 44 24 38	 mov	 rax, QWORD PTR str$[rsp]
  0068e	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  00696	8b 44 88 08	 mov	 eax, DWORD PTR [rax+rcx*4+8]
  0069a	89 84 24 a4 00
	00 00		 mov	 DWORD PTR tv297[rsp], eax
$LN60@scan_once_:
  006a1	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR tv297[rsp]
  006a8	89 84 24 a0 00
	00 00		 mov	 DWORD PTR tv298[rsp], eax
$LN62@scan_once_:
  006af	83 bc 24 a0 00
	00 00 6c	 cmp	 DWORD PTR tv298[rsp], 108 ; 0000006cH
  006b7	0f 85 a8 00 00
	00		 jne	 $LN11@scan_once_
  006bd	83 7c 24 20 01	 cmp	 DWORD PTR kind$[rsp], 1
  006c2	75 20		 jne	 SHORT $LN65@scan_once_
  006c4	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR idx$[rsp]
  006cc	48 8b 4c 24 38	 mov	 rcx, QWORD PTR str$[rsp]
  006d1	48 03 c8	 add	 rcx, rax
  006d4	48 8b c1	 mov	 rax, rcx
  006d7	0f b6 40 03	 movzx	 eax, BYTE PTR [rax+3]
  006db	89 84 24 a8 00
	00 00		 mov	 DWORD PTR tv313[rsp], eax
  006e2	eb 48		 jmp	 SHORT $LN66@scan_once_
$LN65@scan_once_:
  006e4	83 7c 24 20 02	 cmp	 DWORD PTR kind$[rsp], 2
  006e9	75 1b		 jne	 SHORT $LN63@scan_once_
  006eb	48 8b 44 24 38	 mov	 rax, QWORD PTR str$[rsp]
  006f0	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  006f8	0f b7 44 48 06	 movzx	 eax, WORD PTR [rax+rcx*2+6]
  006fd	89 84 24 ac 00
	00 00		 mov	 DWORD PTR tv312[rsp], eax
  00704	eb 18		 jmp	 SHORT $LN64@scan_once_
$LN63@scan_once_:
  00706	48 8b 44 24 38	 mov	 rax, QWORD PTR str$[rsp]
  0070b	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  00713	8b 44 88 0c	 mov	 eax, DWORD PTR [rax+rcx*4+12]
  00717	89 84 24 ac 00
	00 00		 mov	 DWORD PTR tv312[rsp], eax
$LN64@scan_once_:
  0071e	8b 84 24 ac 00
	00 00		 mov	 eax, DWORD PTR tv312[rsp]
  00725	89 84 24 a8 00
	00 00		 mov	 DWORD PTR tv313[rsp], eax
$LN66@scan_once_:
  0072c	83 bc 24 a8 00
	00 00 6c	 cmp	 DWORD PTR tv313[rsp], 108 ; 0000006cH
  00734	75 2f		 jne	 SHORT $LN11@scan_once_

; 1008 :                 Py_INCREF(Py_None);

  00736	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  0073d	e8 00 00 00 00	 call	 _Py_IncRef

; 1009 :                 *next_idx_ptr = idx + 4;

  00742	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR idx$[rsp]
  0074a	48 83 c0 04	 add	 rax, 4
  0074e	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR next_idx_ptr$[rsp]
  00756	48 89 01	 mov	 QWORD PTR [rcx], rax

; 1010 :                 return Py_None;

  00759	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00760	e9 2b 0d 00 00	 jmp	 $LN30@scan_once_
$LN11@scan_once_:

; 1011 :             }
; 1012 :             break;

  00765	e9 01 0d 00 00	 jmp	 $LN26@scan_once_
$LN10@scan_once_:

; 1013 :         case 't':
; 1014 :             /* true */
; 1015 :             if ((idx + 3 < length) && PyUnicode_READ(kind, str, idx + 1) == 'r' && PyUnicode_READ(kind, str, idx + 2) == 'u' && PyUnicode_READ(kind, str, idx + 3) == 'e') {

  0076a	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR idx$[rsp]
  00772	48 83 c0 03	 add	 rax, 3
  00776	48 3b 44 24 30	 cmp	 rax, QWORD PTR length$[rsp]
  0077b	0f 8d a2 01 00
	00		 jge	 $LN9@scan_once_
  00781	83 7c 24 20 01	 cmp	 DWORD PTR kind$[rsp], 1
  00786	75 20		 jne	 SHORT $LN69@scan_once_
  00788	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR idx$[rsp]
  00790	48 8b 4c 24 38	 mov	 rcx, QWORD PTR str$[rsp]
  00795	48 03 c8	 add	 rcx, rax
  00798	48 8b c1	 mov	 rax, rcx
  0079b	0f b6 40 01	 movzx	 eax, BYTE PTR [rax+1]
  0079f	89 84 24 b0 00
	00 00		 mov	 DWORD PTR tv332[rsp], eax
  007a6	eb 48		 jmp	 SHORT $LN70@scan_once_
$LN69@scan_once_:
  007a8	83 7c 24 20 02	 cmp	 DWORD PTR kind$[rsp], 2
  007ad	75 1b		 jne	 SHORT $LN67@scan_once_
  007af	48 8b 44 24 38	 mov	 rax, QWORD PTR str$[rsp]
  007b4	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  007bc	0f b7 44 48 02	 movzx	 eax, WORD PTR [rax+rcx*2+2]
  007c1	89 84 24 b4 00
	00 00		 mov	 DWORD PTR tv331[rsp], eax
  007c8	eb 18		 jmp	 SHORT $LN68@scan_once_
$LN67@scan_once_:
  007ca	48 8b 44 24 38	 mov	 rax, QWORD PTR str$[rsp]
  007cf	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  007d7	8b 44 88 04	 mov	 eax, DWORD PTR [rax+rcx*4+4]
  007db	89 84 24 b4 00
	00 00		 mov	 DWORD PTR tv331[rsp], eax
$LN68@scan_once_:
  007e2	8b 84 24 b4 00
	00 00		 mov	 eax, DWORD PTR tv331[rsp]
  007e9	89 84 24 b0 00
	00 00		 mov	 DWORD PTR tv332[rsp], eax
$LN70@scan_once_:
  007f0	83 bc 24 b0 00
	00 00 72	 cmp	 DWORD PTR tv332[rsp], 114 ; 00000072H
  007f8	0f 85 25 01 00
	00		 jne	 $LN9@scan_once_
  007fe	83 7c 24 20 01	 cmp	 DWORD PTR kind$[rsp], 1
  00803	75 20		 jne	 SHORT $LN73@scan_once_
  00805	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR idx$[rsp]
  0080d	48 8b 4c 24 38	 mov	 rcx, QWORD PTR str$[rsp]
  00812	48 03 c8	 add	 rcx, rax
  00815	48 8b c1	 mov	 rax, rcx
  00818	0f b6 40 02	 movzx	 eax, BYTE PTR [rax+2]
  0081c	89 84 24 b8 00
	00 00		 mov	 DWORD PTR tv347[rsp], eax
  00823	eb 48		 jmp	 SHORT $LN74@scan_once_
$LN73@scan_once_:
  00825	83 7c 24 20 02	 cmp	 DWORD PTR kind$[rsp], 2
  0082a	75 1b		 jne	 SHORT $LN71@scan_once_
  0082c	48 8b 44 24 38	 mov	 rax, QWORD PTR str$[rsp]
  00831	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  00839	0f b7 44 48 04	 movzx	 eax, WORD PTR [rax+rcx*2+4]
  0083e	89 84 24 bc 00
	00 00		 mov	 DWORD PTR tv346[rsp], eax
  00845	eb 18		 jmp	 SHORT $LN72@scan_once_
$LN71@scan_once_:
  00847	48 8b 44 24 38	 mov	 rax, QWORD PTR str$[rsp]
  0084c	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  00854	8b 44 88 08	 mov	 eax, DWORD PTR [rax+rcx*4+8]
  00858	89 84 24 bc 00
	00 00		 mov	 DWORD PTR tv346[rsp], eax
$LN72@scan_once_:
  0085f	8b 84 24 bc 00
	00 00		 mov	 eax, DWORD PTR tv346[rsp]
  00866	89 84 24 b8 00
	00 00		 mov	 DWORD PTR tv347[rsp], eax
$LN74@scan_once_:
  0086d	83 bc 24 b8 00
	00 00 75	 cmp	 DWORD PTR tv347[rsp], 117 ; 00000075H
  00875	0f 85 a8 00 00
	00		 jne	 $LN9@scan_once_
  0087b	83 7c 24 20 01	 cmp	 DWORD PTR kind$[rsp], 1
  00880	75 20		 jne	 SHORT $LN77@scan_once_
  00882	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR idx$[rsp]
  0088a	48 8b 4c 24 38	 mov	 rcx, QWORD PTR str$[rsp]
  0088f	48 03 c8	 add	 rcx, rax
  00892	48 8b c1	 mov	 rax, rcx
  00895	0f b6 40 03	 movzx	 eax, BYTE PTR [rax+3]
  00899	89 84 24 c0 00
	00 00		 mov	 DWORD PTR tv362[rsp], eax
  008a0	eb 48		 jmp	 SHORT $LN78@scan_once_
$LN77@scan_once_:
  008a2	83 7c 24 20 02	 cmp	 DWORD PTR kind$[rsp], 2
  008a7	75 1b		 jne	 SHORT $LN75@scan_once_
  008a9	48 8b 44 24 38	 mov	 rax, QWORD PTR str$[rsp]
  008ae	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  008b6	0f b7 44 48 06	 movzx	 eax, WORD PTR [rax+rcx*2+6]
  008bb	89 84 24 c4 00
	00 00		 mov	 DWORD PTR tv361[rsp], eax
  008c2	eb 18		 jmp	 SHORT $LN76@scan_once_
$LN75@scan_once_:
  008c4	48 8b 44 24 38	 mov	 rax, QWORD PTR str$[rsp]
  008c9	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  008d1	8b 44 88 0c	 mov	 eax, DWORD PTR [rax+rcx*4+12]
  008d5	89 84 24 c4 00
	00 00		 mov	 DWORD PTR tv361[rsp], eax
$LN76@scan_once_:
  008dc	8b 84 24 c4 00
	00 00		 mov	 eax, DWORD PTR tv361[rsp]
  008e3	89 84 24 c0 00
	00 00		 mov	 DWORD PTR tv362[rsp], eax
$LN78@scan_once_:
  008ea	83 bc 24 c0 00
	00 00 65	 cmp	 DWORD PTR tv362[rsp], 101 ; 00000065H
  008f2	75 2f		 jne	 SHORT $LN9@scan_once_

; 1016 :                 Py_INCREF(Py_True);

  008f4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_TrueStruct
  008fb	e8 00 00 00 00	 call	 _Py_IncRef

; 1017 :                 *next_idx_ptr = idx + 4;

  00900	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR idx$[rsp]
  00908	48 83 c0 04	 add	 rax, 4
  0090c	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR next_idx_ptr$[rsp]
  00914	48 89 01	 mov	 QWORD PTR [rcx], rax

; 1018 :                 return Py_True;

  00917	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  0091e	e9 6d 0b 00 00	 jmp	 $LN30@scan_once_
$LN9@scan_once_:

; 1019 :             }
; 1020 :             break;

  00923	e9 43 0b 00 00	 jmp	 $LN26@scan_once_
$LN8@scan_once_:

; 1021 :         case 'f':
; 1022 :             /* false */
; 1023 :             if ((idx + 4 < length) && PyUnicode_READ(kind, str, idx + 1) == 'a' &&
; 1024 :                 PyUnicode_READ(kind, str, idx + 2) == 'l' &&
; 1025 :                 PyUnicode_READ(kind, str, idx + 3) == 's' &&
; 1026 :                 PyUnicode_READ(kind, str, idx + 4) == 'e') {

  00928	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR idx$[rsp]
  00930	48 83 c0 04	 add	 rax, 4
  00934	48 3b 44 24 30	 cmp	 rax, QWORD PTR length$[rsp]
  00939	0f 8d 1f 02 00
	00		 jge	 $LN7@scan_once_
  0093f	83 7c 24 20 01	 cmp	 DWORD PTR kind$[rsp], 1
  00944	75 20		 jne	 SHORT $LN81@scan_once_
  00946	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR idx$[rsp]
  0094e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR str$[rsp]
  00953	48 03 c8	 add	 rcx, rax
  00956	48 8b c1	 mov	 rax, rcx
  00959	0f b6 40 01	 movzx	 eax, BYTE PTR [rax+1]
  0095d	89 84 24 c8 00
	00 00		 mov	 DWORD PTR tv381[rsp], eax
  00964	eb 48		 jmp	 SHORT $LN82@scan_once_
$LN81@scan_once_:
  00966	83 7c 24 20 02	 cmp	 DWORD PTR kind$[rsp], 2
  0096b	75 1b		 jne	 SHORT $LN79@scan_once_
  0096d	48 8b 44 24 38	 mov	 rax, QWORD PTR str$[rsp]
  00972	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  0097a	0f b7 44 48 02	 movzx	 eax, WORD PTR [rax+rcx*2+2]
  0097f	89 84 24 cc 00
	00 00		 mov	 DWORD PTR tv380[rsp], eax
  00986	eb 18		 jmp	 SHORT $LN80@scan_once_
$LN79@scan_once_:
  00988	48 8b 44 24 38	 mov	 rax, QWORD PTR str$[rsp]
  0098d	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  00995	8b 44 88 04	 mov	 eax, DWORD PTR [rax+rcx*4+4]
  00999	89 84 24 cc 00
	00 00		 mov	 DWORD PTR tv380[rsp], eax
$LN80@scan_once_:
  009a0	8b 84 24 cc 00
	00 00		 mov	 eax, DWORD PTR tv380[rsp]
  009a7	89 84 24 c8 00
	00 00		 mov	 DWORD PTR tv381[rsp], eax
$LN82@scan_once_:
  009ae	83 bc 24 c8 00
	00 00 61	 cmp	 DWORD PTR tv381[rsp], 97 ; 00000061H
  009b6	0f 85 a2 01 00
	00		 jne	 $LN7@scan_once_
  009bc	83 7c 24 20 01	 cmp	 DWORD PTR kind$[rsp], 1
  009c1	75 20		 jne	 SHORT $LN85@scan_once_
  009c3	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR idx$[rsp]
  009cb	48 8b 4c 24 38	 mov	 rcx, QWORD PTR str$[rsp]
  009d0	48 03 c8	 add	 rcx, rax
  009d3	48 8b c1	 mov	 rax, rcx
  009d6	0f b6 40 02	 movzx	 eax, BYTE PTR [rax+2]
  009da	89 84 24 d0 00
	00 00		 mov	 DWORD PTR tv396[rsp], eax
  009e1	eb 48		 jmp	 SHORT $LN86@scan_once_
$LN85@scan_once_:
  009e3	83 7c 24 20 02	 cmp	 DWORD PTR kind$[rsp], 2
  009e8	75 1b		 jne	 SHORT $LN83@scan_once_
  009ea	48 8b 44 24 38	 mov	 rax, QWORD PTR str$[rsp]
  009ef	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  009f7	0f b7 44 48 04	 movzx	 eax, WORD PTR [rax+rcx*2+4]
  009fc	89 84 24 d4 00
	00 00		 mov	 DWORD PTR tv395[rsp], eax
  00a03	eb 18		 jmp	 SHORT $LN84@scan_once_
$LN83@scan_once_:
  00a05	48 8b 44 24 38	 mov	 rax, QWORD PTR str$[rsp]
  00a0a	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  00a12	8b 44 88 08	 mov	 eax, DWORD PTR [rax+rcx*4+8]
  00a16	89 84 24 d4 00
	00 00		 mov	 DWORD PTR tv395[rsp], eax
$LN84@scan_once_:
  00a1d	8b 84 24 d4 00
	00 00		 mov	 eax, DWORD PTR tv395[rsp]
  00a24	89 84 24 d0 00
	00 00		 mov	 DWORD PTR tv396[rsp], eax
$LN86@scan_once_:
  00a2b	83 bc 24 d0 00
	00 00 6c	 cmp	 DWORD PTR tv396[rsp], 108 ; 0000006cH
  00a33	0f 85 25 01 00
	00		 jne	 $LN7@scan_once_
  00a39	83 7c 24 20 01	 cmp	 DWORD PTR kind$[rsp], 1
  00a3e	75 20		 jne	 SHORT $LN89@scan_once_
  00a40	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR idx$[rsp]
  00a48	48 8b 4c 24 38	 mov	 rcx, QWORD PTR str$[rsp]
  00a4d	48 03 c8	 add	 rcx, rax
  00a50	48 8b c1	 mov	 rax, rcx
  00a53	0f b6 40 03	 movzx	 eax, BYTE PTR [rax+3]
  00a57	89 84 24 d8 00
	00 00		 mov	 DWORD PTR tv411[rsp], eax
  00a5e	eb 48		 jmp	 SHORT $LN90@scan_once_
$LN89@scan_once_:
  00a60	83 7c 24 20 02	 cmp	 DWORD PTR kind$[rsp], 2
  00a65	75 1b		 jne	 SHORT $LN87@scan_once_
  00a67	48 8b 44 24 38	 mov	 rax, QWORD PTR str$[rsp]
  00a6c	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  00a74	0f b7 44 48 06	 movzx	 eax, WORD PTR [rax+rcx*2+6]
  00a79	89 84 24 dc 00
	00 00		 mov	 DWORD PTR tv410[rsp], eax
  00a80	eb 18		 jmp	 SHORT $LN88@scan_once_
$LN87@scan_once_:
  00a82	48 8b 44 24 38	 mov	 rax, QWORD PTR str$[rsp]
  00a87	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  00a8f	8b 44 88 0c	 mov	 eax, DWORD PTR [rax+rcx*4+12]
  00a93	89 84 24 dc 00
	00 00		 mov	 DWORD PTR tv410[rsp], eax
$LN88@scan_once_:
  00a9a	8b 84 24 dc 00
	00 00		 mov	 eax, DWORD PTR tv410[rsp]
  00aa1	89 84 24 d8 00
	00 00		 mov	 DWORD PTR tv411[rsp], eax
$LN90@scan_once_:
  00aa8	83 bc 24 d8 00
	00 00 73	 cmp	 DWORD PTR tv411[rsp], 115 ; 00000073H
  00ab0	0f 85 a8 00 00
	00		 jne	 $LN7@scan_once_
  00ab6	83 7c 24 20 01	 cmp	 DWORD PTR kind$[rsp], 1
  00abb	75 20		 jne	 SHORT $LN93@scan_once_
  00abd	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR idx$[rsp]
  00ac5	48 8b 4c 24 38	 mov	 rcx, QWORD PTR str$[rsp]
  00aca	48 03 c8	 add	 rcx, rax
  00acd	48 8b c1	 mov	 rax, rcx
  00ad0	0f b6 40 04	 movzx	 eax, BYTE PTR [rax+4]
  00ad4	89 84 24 e0 00
	00 00		 mov	 DWORD PTR tv426[rsp], eax
  00adb	eb 48		 jmp	 SHORT $LN94@scan_once_
$LN93@scan_once_:
  00add	83 7c 24 20 02	 cmp	 DWORD PTR kind$[rsp], 2
  00ae2	75 1b		 jne	 SHORT $LN91@scan_once_
  00ae4	48 8b 44 24 38	 mov	 rax, QWORD PTR str$[rsp]
  00ae9	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  00af1	0f b7 44 48 08	 movzx	 eax, WORD PTR [rax+rcx*2+8]
  00af6	89 84 24 e4 00
	00 00		 mov	 DWORD PTR tv425[rsp], eax
  00afd	eb 18		 jmp	 SHORT $LN92@scan_once_
$LN91@scan_once_:
  00aff	48 8b 44 24 38	 mov	 rax, QWORD PTR str$[rsp]
  00b04	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  00b0c	8b 44 88 10	 mov	 eax, DWORD PTR [rax+rcx*4+16]
  00b10	89 84 24 e4 00
	00 00		 mov	 DWORD PTR tv425[rsp], eax
$LN92@scan_once_:
  00b17	8b 84 24 e4 00
	00 00		 mov	 eax, DWORD PTR tv425[rsp]
  00b1e	89 84 24 e0 00
	00 00		 mov	 DWORD PTR tv426[rsp], eax
$LN94@scan_once_:
  00b25	83 bc 24 e0 00
	00 00 65	 cmp	 DWORD PTR tv426[rsp], 101 ; 00000065H
  00b2d	75 2f		 jne	 SHORT $LN7@scan_once_

; 1027 :                 Py_INCREF(Py_False);

  00b2f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_FalseStruct
  00b36	e8 00 00 00 00	 call	 _Py_IncRef

; 1028 :                 *next_idx_ptr = idx + 5;

  00b3b	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR idx$[rsp]
  00b43	48 83 c0 05	 add	 rax, 5
  00b47	48 8b 8c 24 98
	01 00 00	 mov	 rcx, QWORD PTR next_idx_ptr$[rsp]
  00b4f	48 89 01	 mov	 QWORD PTR [rcx], rax

; 1029 :                 return Py_False;

  00b52	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct
  00b59	e9 32 09 00 00	 jmp	 $LN30@scan_once_
$LN7@scan_once_:

; 1030 :             }
; 1031 :             break;

  00b5e	e9 08 09 00 00	 jmp	 $LN26@scan_once_
$LN6@scan_once_:

; 1032 :         case 'N':
; 1033 :             /* NaN */
; 1034 :             if ((idx + 2 < length) && PyUnicode_READ(kind, str, idx + 1) == 'a' &&
; 1035 :                 PyUnicode_READ(kind, str, idx + 2) == 'N') {

  00b63	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR idx$[rsp]
  00b6b	48 83 c0 02	 add	 rax, 2
  00b6f	48 3b 44 24 30	 cmp	 rax, QWORD PTR length$[rsp]
  00b74	0f 8d 1f 01 00
	00		 jge	 $LN5@scan_once_
  00b7a	83 7c 24 20 01	 cmp	 DWORD PTR kind$[rsp], 1
  00b7f	75 20		 jne	 SHORT $LN97@scan_once_
  00b81	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR idx$[rsp]
  00b89	48 8b 4c 24 38	 mov	 rcx, QWORD PTR str$[rsp]
  00b8e	48 03 c8	 add	 rcx, rax
  00b91	48 8b c1	 mov	 rax, rcx
  00b94	0f b6 40 01	 movzx	 eax, BYTE PTR [rax+1]
  00b98	89 84 24 e8 00
	00 00		 mov	 DWORD PTR tv445[rsp], eax
  00b9f	eb 48		 jmp	 SHORT $LN98@scan_once_
$LN97@scan_once_:
  00ba1	83 7c 24 20 02	 cmp	 DWORD PTR kind$[rsp], 2
  00ba6	75 1b		 jne	 SHORT $LN95@scan_once_
  00ba8	48 8b 44 24 38	 mov	 rax, QWORD PTR str$[rsp]
  00bad	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  00bb5	0f b7 44 48 02	 movzx	 eax, WORD PTR [rax+rcx*2+2]
  00bba	89 84 24 ec 00
	00 00		 mov	 DWORD PTR tv444[rsp], eax
  00bc1	eb 18		 jmp	 SHORT $LN96@scan_once_
$LN95@scan_once_:
  00bc3	48 8b 44 24 38	 mov	 rax, QWORD PTR str$[rsp]
  00bc8	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  00bd0	8b 44 88 04	 mov	 eax, DWORD PTR [rax+rcx*4+4]
  00bd4	89 84 24 ec 00
	00 00		 mov	 DWORD PTR tv444[rsp], eax
$LN96@scan_once_:
  00bdb	8b 84 24 ec 00
	00 00		 mov	 eax, DWORD PTR tv444[rsp]
  00be2	89 84 24 e8 00
	00 00		 mov	 DWORD PTR tv445[rsp], eax
$LN98@scan_once_:
  00be9	83 bc 24 e8 00
	00 00 61	 cmp	 DWORD PTR tv445[rsp], 97 ; 00000061H
  00bf1	0f 85 a2 00 00
	00		 jne	 $LN5@scan_once_
  00bf7	83 7c 24 20 01	 cmp	 DWORD PTR kind$[rsp], 1
  00bfc	75 20		 jne	 SHORT $LN101@scan_once_
  00bfe	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR idx$[rsp]
  00c06	48 8b 4c 24 38	 mov	 rcx, QWORD PTR str$[rsp]
  00c0b	48 03 c8	 add	 rcx, rax
  00c0e	48 8b c1	 mov	 rax, rcx
  00c11	0f b6 40 02	 movzx	 eax, BYTE PTR [rax+2]
  00c15	89 84 24 f0 00
	00 00		 mov	 DWORD PTR tv460[rsp], eax
  00c1c	eb 48		 jmp	 SHORT $LN102@scan_once_
$LN101@scan_once_:
  00c1e	83 7c 24 20 02	 cmp	 DWORD PTR kind$[rsp], 2
  00c23	75 1b		 jne	 SHORT $LN99@scan_once_
  00c25	48 8b 44 24 38	 mov	 rax, QWORD PTR str$[rsp]
  00c2a	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  00c32	0f b7 44 48 04	 movzx	 eax, WORD PTR [rax+rcx*2+4]
  00c37	89 84 24 f4 00
	00 00		 mov	 DWORD PTR tv459[rsp], eax
  00c3e	eb 18		 jmp	 SHORT $LN100@scan_once_
$LN99@scan_once_:
  00c40	48 8b 44 24 38	 mov	 rax, QWORD PTR str$[rsp]
  00c45	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  00c4d	8b 44 88 08	 mov	 eax, DWORD PTR [rax+rcx*4+8]
  00c51	89 84 24 f4 00
	00 00		 mov	 DWORD PTR tv459[rsp], eax
$LN100@scan_once_:
  00c58	8b 84 24 f4 00
	00 00		 mov	 eax, DWORD PTR tv459[rsp]
  00c5f	89 84 24 f0 00
	00 00		 mov	 DWORD PTR tv460[rsp], eax
$LN102@scan_once_:
  00c66	83 bc 24 f0 00
	00 00 4e	 cmp	 DWORD PTR tv460[rsp], 78 ; 0000004eH
  00c6e	75 29		 jne	 SHORT $LN5@scan_once_

; 1036 :                 return _parse_constant(s, "NaN", idx, next_idx_ptr);

  00c70	4c 8b 8c 24 98
	01 00 00	 mov	 r9, QWORD PTR next_idx_ptr$[rsp]
  00c78	4c 8b 84 24 90
	01 00 00	 mov	 r8, QWORD PTR idx$[rsp]
  00c80	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03ICJPMMHB@NaN?$AA@
  00c87	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  00c8f	e8 00 00 00 00	 call	 _parse_constant
  00c94	e9 f7 07 00 00	 jmp	 $LN30@scan_once_
$LN5@scan_once_:

; 1037 :             }
; 1038 :             break;

  00c99	e9 cd 07 00 00	 jmp	 $LN26@scan_once_
$LN4@scan_once_:

; 1039 :         case 'I':
; 1040 :             /* Infinity */
; 1041 :             if ((idx + 7 < length) && PyUnicode_READ(kind, str, idx + 1) == 'n' &&
; 1042 :                 PyUnicode_READ(kind, str, idx + 2) == 'f' &&
; 1043 :                 PyUnicode_READ(kind, str, idx + 3) == 'i' &&
; 1044 :                 PyUnicode_READ(kind, str, idx + 4) == 'n' &&
; 1045 :                 PyUnicode_READ(kind, str, idx + 5) == 'i' &&
; 1046 :                 PyUnicode_READ(kind, str, idx + 6) == 't' &&
; 1047 :                 PyUnicode_READ(kind, str, idx + 7) == 'y') {

  00c9e	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR idx$[rsp]
  00ca6	48 83 c0 07	 add	 rax, 7
  00caa	48 3b 44 24 30	 cmp	 rax, QWORD PTR length$[rsp]
  00caf	0f 8d 90 03 00
	00		 jge	 $LN3@scan_once_
  00cb5	83 7c 24 20 01	 cmp	 DWORD PTR kind$[rsp], 1
  00cba	75 20		 jne	 SHORT $LN105@scan_once_
  00cbc	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR idx$[rsp]
  00cc4	48 8b 4c 24 38	 mov	 rcx, QWORD PTR str$[rsp]
  00cc9	48 03 c8	 add	 rcx, rax
  00ccc	48 8b c1	 mov	 rax, rcx
  00ccf	0f b6 40 01	 movzx	 eax, BYTE PTR [rax+1]
  00cd3	89 84 24 f8 00
	00 00		 mov	 DWORD PTR tv482[rsp], eax
  00cda	eb 48		 jmp	 SHORT $LN106@scan_once_
$LN105@scan_once_:
  00cdc	83 7c 24 20 02	 cmp	 DWORD PTR kind$[rsp], 2
  00ce1	75 1b		 jne	 SHORT $LN103@scan_once_
  00ce3	48 8b 44 24 38	 mov	 rax, QWORD PTR str$[rsp]
  00ce8	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  00cf0	0f b7 44 48 02	 movzx	 eax, WORD PTR [rax+rcx*2+2]
  00cf5	89 84 24 fc 00
	00 00		 mov	 DWORD PTR tv481[rsp], eax
  00cfc	eb 18		 jmp	 SHORT $LN104@scan_once_
$LN103@scan_once_:
  00cfe	48 8b 44 24 38	 mov	 rax, QWORD PTR str$[rsp]
  00d03	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  00d0b	8b 44 88 04	 mov	 eax, DWORD PTR [rax+rcx*4+4]
  00d0f	89 84 24 fc 00
	00 00		 mov	 DWORD PTR tv481[rsp], eax
$LN104@scan_once_:
  00d16	8b 84 24 fc 00
	00 00		 mov	 eax, DWORD PTR tv481[rsp]
  00d1d	89 84 24 f8 00
	00 00		 mov	 DWORD PTR tv482[rsp], eax
$LN106@scan_once_:
  00d24	83 bc 24 f8 00
	00 00 6e	 cmp	 DWORD PTR tv482[rsp], 110 ; 0000006eH
  00d2c	0f 85 13 03 00
	00		 jne	 $LN3@scan_once_
  00d32	83 7c 24 20 01	 cmp	 DWORD PTR kind$[rsp], 1
  00d37	75 20		 jne	 SHORT $LN109@scan_once_
  00d39	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR idx$[rsp]
  00d41	48 8b 4c 24 38	 mov	 rcx, QWORD PTR str$[rsp]
  00d46	48 03 c8	 add	 rcx, rax
  00d49	48 8b c1	 mov	 rax, rcx
  00d4c	0f b6 40 02	 movzx	 eax, BYTE PTR [rax+2]
  00d50	89 84 24 00 01
	00 00		 mov	 DWORD PTR tv497[rsp], eax
  00d57	eb 48		 jmp	 SHORT $LN110@scan_once_
$LN109@scan_once_:
  00d59	83 7c 24 20 02	 cmp	 DWORD PTR kind$[rsp], 2
  00d5e	75 1b		 jne	 SHORT $LN107@scan_once_
  00d60	48 8b 44 24 38	 mov	 rax, QWORD PTR str$[rsp]
  00d65	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  00d6d	0f b7 44 48 04	 movzx	 eax, WORD PTR [rax+rcx*2+4]
  00d72	89 84 24 04 01
	00 00		 mov	 DWORD PTR tv496[rsp], eax
  00d79	eb 18		 jmp	 SHORT $LN108@scan_once_
$LN107@scan_once_:
  00d7b	48 8b 44 24 38	 mov	 rax, QWORD PTR str$[rsp]
  00d80	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  00d88	8b 44 88 08	 mov	 eax, DWORD PTR [rax+rcx*4+8]
  00d8c	89 84 24 04 01
	00 00		 mov	 DWORD PTR tv496[rsp], eax
$LN108@scan_once_:
  00d93	8b 84 24 04 01
	00 00		 mov	 eax, DWORD PTR tv496[rsp]
  00d9a	89 84 24 00 01
	00 00		 mov	 DWORD PTR tv497[rsp], eax
$LN110@scan_once_:
  00da1	83 bc 24 00 01
	00 00 66	 cmp	 DWORD PTR tv497[rsp], 102 ; 00000066H
  00da9	0f 85 96 02 00
	00		 jne	 $LN3@scan_once_
  00daf	83 7c 24 20 01	 cmp	 DWORD PTR kind$[rsp], 1
  00db4	75 20		 jne	 SHORT $LN113@scan_once_
  00db6	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR idx$[rsp]
  00dbe	48 8b 4c 24 38	 mov	 rcx, QWORD PTR str$[rsp]
  00dc3	48 03 c8	 add	 rcx, rax
  00dc6	48 8b c1	 mov	 rax, rcx
  00dc9	0f b6 40 03	 movzx	 eax, BYTE PTR [rax+3]
  00dcd	89 84 24 08 01
	00 00		 mov	 DWORD PTR tv512[rsp], eax
  00dd4	eb 48		 jmp	 SHORT $LN114@scan_once_
$LN113@scan_once_:
  00dd6	83 7c 24 20 02	 cmp	 DWORD PTR kind$[rsp], 2
  00ddb	75 1b		 jne	 SHORT $LN111@scan_once_
  00ddd	48 8b 44 24 38	 mov	 rax, QWORD PTR str$[rsp]
  00de2	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  00dea	0f b7 44 48 06	 movzx	 eax, WORD PTR [rax+rcx*2+6]
  00def	89 84 24 0c 01
	00 00		 mov	 DWORD PTR tv511[rsp], eax
  00df6	eb 18		 jmp	 SHORT $LN112@scan_once_
$LN111@scan_once_:
  00df8	48 8b 44 24 38	 mov	 rax, QWORD PTR str$[rsp]
  00dfd	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  00e05	8b 44 88 0c	 mov	 eax, DWORD PTR [rax+rcx*4+12]
  00e09	89 84 24 0c 01
	00 00		 mov	 DWORD PTR tv511[rsp], eax
$LN112@scan_once_:
  00e10	8b 84 24 0c 01
	00 00		 mov	 eax, DWORD PTR tv511[rsp]
  00e17	89 84 24 08 01
	00 00		 mov	 DWORD PTR tv512[rsp], eax
$LN114@scan_once_:
  00e1e	83 bc 24 08 01
	00 00 69	 cmp	 DWORD PTR tv512[rsp], 105 ; 00000069H
  00e26	0f 85 19 02 00
	00		 jne	 $LN3@scan_once_
  00e2c	83 7c 24 20 01	 cmp	 DWORD PTR kind$[rsp], 1
  00e31	75 20		 jne	 SHORT $LN117@scan_once_
  00e33	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR idx$[rsp]
  00e3b	48 8b 4c 24 38	 mov	 rcx, QWORD PTR str$[rsp]
  00e40	48 03 c8	 add	 rcx, rax
  00e43	48 8b c1	 mov	 rax, rcx
  00e46	0f b6 40 04	 movzx	 eax, BYTE PTR [rax+4]
  00e4a	89 84 24 10 01
	00 00		 mov	 DWORD PTR tv527[rsp], eax
  00e51	eb 48		 jmp	 SHORT $LN118@scan_once_
$LN117@scan_once_:
  00e53	83 7c 24 20 02	 cmp	 DWORD PTR kind$[rsp], 2
  00e58	75 1b		 jne	 SHORT $LN115@scan_once_
  00e5a	48 8b 44 24 38	 mov	 rax, QWORD PTR str$[rsp]
  00e5f	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  00e67	0f b7 44 48 08	 movzx	 eax, WORD PTR [rax+rcx*2+8]
  00e6c	89 84 24 14 01
	00 00		 mov	 DWORD PTR tv526[rsp], eax
  00e73	eb 18		 jmp	 SHORT $LN116@scan_once_
$LN115@scan_once_:
  00e75	48 8b 44 24 38	 mov	 rax, QWORD PTR str$[rsp]
  00e7a	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  00e82	8b 44 88 10	 mov	 eax, DWORD PTR [rax+rcx*4+16]
  00e86	89 84 24 14 01
	00 00		 mov	 DWORD PTR tv526[rsp], eax
$LN116@scan_once_:
  00e8d	8b 84 24 14 01
	00 00		 mov	 eax, DWORD PTR tv526[rsp]
  00e94	89 84 24 10 01
	00 00		 mov	 DWORD PTR tv527[rsp], eax
$LN118@scan_once_:
  00e9b	83 bc 24 10 01
	00 00 6e	 cmp	 DWORD PTR tv527[rsp], 110 ; 0000006eH
  00ea3	0f 85 9c 01 00
	00		 jne	 $LN3@scan_once_
  00ea9	83 7c 24 20 01	 cmp	 DWORD PTR kind$[rsp], 1
  00eae	75 20		 jne	 SHORT $LN121@scan_once_
  00eb0	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR idx$[rsp]
  00eb8	48 8b 4c 24 38	 mov	 rcx, QWORD PTR str$[rsp]
  00ebd	48 03 c8	 add	 rcx, rax
  00ec0	48 8b c1	 mov	 rax, rcx
  00ec3	0f b6 40 05	 movzx	 eax, BYTE PTR [rax+5]
  00ec7	89 84 24 18 01
	00 00		 mov	 DWORD PTR tv542[rsp], eax
  00ece	eb 48		 jmp	 SHORT $LN122@scan_once_
$LN121@scan_once_:
  00ed0	83 7c 24 20 02	 cmp	 DWORD PTR kind$[rsp], 2
  00ed5	75 1b		 jne	 SHORT $LN119@scan_once_
  00ed7	48 8b 44 24 38	 mov	 rax, QWORD PTR str$[rsp]
  00edc	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  00ee4	0f b7 44 48 0a	 movzx	 eax, WORD PTR [rax+rcx*2+10]
  00ee9	89 84 24 1c 01
	00 00		 mov	 DWORD PTR tv541[rsp], eax
  00ef0	eb 18		 jmp	 SHORT $LN120@scan_once_
$LN119@scan_once_:
  00ef2	48 8b 44 24 38	 mov	 rax, QWORD PTR str$[rsp]
  00ef7	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  00eff	8b 44 88 14	 mov	 eax, DWORD PTR [rax+rcx*4+20]
  00f03	89 84 24 1c 01
	00 00		 mov	 DWORD PTR tv541[rsp], eax
$LN120@scan_once_:
  00f0a	8b 84 24 1c 01
	00 00		 mov	 eax, DWORD PTR tv541[rsp]
  00f11	89 84 24 18 01
	00 00		 mov	 DWORD PTR tv542[rsp], eax
$LN122@scan_once_:
  00f18	83 bc 24 18 01
	00 00 69	 cmp	 DWORD PTR tv542[rsp], 105 ; 00000069H
  00f20	0f 85 1f 01 00
	00		 jne	 $LN3@scan_once_
  00f26	83 7c 24 20 01	 cmp	 DWORD PTR kind$[rsp], 1
  00f2b	75 20		 jne	 SHORT $LN125@scan_once_
  00f2d	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR idx$[rsp]
  00f35	48 8b 4c 24 38	 mov	 rcx, QWORD PTR str$[rsp]
  00f3a	48 03 c8	 add	 rcx, rax
  00f3d	48 8b c1	 mov	 rax, rcx
  00f40	0f b6 40 06	 movzx	 eax, BYTE PTR [rax+6]
  00f44	89 84 24 20 01
	00 00		 mov	 DWORD PTR tv557[rsp], eax
  00f4b	eb 48		 jmp	 SHORT $LN126@scan_once_
$LN125@scan_once_:
  00f4d	83 7c 24 20 02	 cmp	 DWORD PTR kind$[rsp], 2
  00f52	75 1b		 jne	 SHORT $LN123@scan_once_
  00f54	48 8b 44 24 38	 mov	 rax, QWORD PTR str$[rsp]
  00f59	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  00f61	0f b7 44 48 0c	 movzx	 eax, WORD PTR [rax+rcx*2+12]
  00f66	89 84 24 24 01
	00 00		 mov	 DWORD PTR tv556[rsp], eax
  00f6d	eb 18		 jmp	 SHORT $LN124@scan_once_
$LN123@scan_once_:
  00f6f	48 8b 44 24 38	 mov	 rax, QWORD PTR str$[rsp]
  00f74	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  00f7c	8b 44 88 18	 mov	 eax, DWORD PTR [rax+rcx*4+24]
  00f80	89 84 24 24 01
	00 00		 mov	 DWORD PTR tv556[rsp], eax
$LN124@scan_once_:
  00f87	8b 84 24 24 01
	00 00		 mov	 eax, DWORD PTR tv556[rsp]
  00f8e	89 84 24 20 01
	00 00		 mov	 DWORD PTR tv557[rsp], eax
$LN126@scan_once_:
  00f95	83 bc 24 20 01
	00 00 74	 cmp	 DWORD PTR tv557[rsp], 116 ; 00000074H
  00f9d	0f 85 a2 00 00
	00		 jne	 $LN3@scan_once_
  00fa3	83 7c 24 20 01	 cmp	 DWORD PTR kind$[rsp], 1
  00fa8	75 20		 jne	 SHORT $LN129@scan_once_
  00faa	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR idx$[rsp]
  00fb2	48 8b 4c 24 38	 mov	 rcx, QWORD PTR str$[rsp]
  00fb7	48 03 c8	 add	 rcx, rax
  00fba	48 8b c1	 mov	 rax, rcx
  00fbd	0f b6 40 07	 movzx	 eax, BYTE PTR [rax+7]
  00fc1	89 84 24 28 01
	00 00		 mov	 DWORD PTR tv572[rsp], eax
  00fc8	eb 48		 jmp	 SHORT $LN130@scan_once_
$LN129@scan_once_:
  00fca	83 7c 24 20 02	 cmp	 DWORD PTR kind$[rsp], 2
  00fcf	75 1b		 jne	 SHORT $LN127@scan_once_
  00fd1	48 8b 44 24 38	 mov	 rax, QWORD PTR str$[rsp]
  00fd6	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  00fde	0f b7 44 48 0e	 movzx	 eax, WORD PTR [rax+rcx*2+14]
  00fe3	89 84 24 2c 01
	00 00		 mov	 DWORD PTR tv571[rsp], eax
  00fea	eb 18		 jmp	 SHORT $LN128@scan_once_
$LN127@scan_once_:
  00fec	48 8b 44 24 38	 mov	 rax, QWORD PTR str$[rsp]
  00ff1	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  00ff9	8b 44 88 1c	 mov	 eax, DWORD PTR [rax+rcx*4+28]
  00ffd	89 84 24 2c 01
	00 00		 mov	 DWORD PTR tv571[rsp], eax
$LN128@scan_once_:
  01004	8b 84 24 2c 01
	00 00		 mov	 eax, DWORD PTR tv571[rsp]
  0100b	89 84 24 28 01
	00 00		 mov	 DWORD PTR tv572[rsp], eax
$LN130@scan_once_:
  01012	83 bc 24 28 01
	00 00 79	 cmp	 DWORD PTR tv572[rsp], 121 ; 00000079H
  0101a	75 29		 jne	 SHORT $LN3@scan_once_

; 1048 :                 return _parse_constant(s, "Infinity", idx, next_idx_ptr);

  0101c	4c 8b 8c 24 98
	01 00 00	 mov	 r9, QWORD PTR next_idx_ptr$[rsp]
  01024	4c 8b 84 24 90
	01 00 00	 mov	 r8, QWORD PTR idx$[rsp]
  0102c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_08KEBCLIFP@Infinity?$AA@
  01033	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  0103b	e8 00 00 00 00	 call	 _parse_constant
  01040	e9 4b 04 00 00	 jmp	 $LN30@scan_once_
$LN3@scan_once_:

; 1049 :             }
; 1050 :             break;

  01045	e9 21 04 00 00	 jmp	 $LN26@scan_once_
$LN2@scan_once_:

; 1051 :         case '-':
; 1052 :             /* -Infinity */
; 1053 :             if ((idx + 8 < length) && PyUnicode_READ(kind, str, idx + 1) == 'I' &&
; 1054 :                 PyUnicode_READ(kind, str, idx + 2) == 'n' &&
; 1055 :                 PyUnicode_READ(kind, str, idx + 3) == 'f' &&
; 1056 :                 PyUnicode_READ(kind, str, idx + 4) == 'i' &&
; 1057 :                 PyUnicode_READ(kind, str, idx + 5) == 'n' &&
; 1058 :                 PyUnicode_READ(kind, str, idx + 6) == 'i' &&
; 1059 :                 PyUnicode_READ(kind, str, idx + 7) == 't' &&
; 1060 :                 PyUnicode_READ(kind, str, idx + 8) == 'y') {

  0104a	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR idx$[rsp]
  01052	48 83 c0 08	 add	 rax, 8
  01056	48 3b 44 24 30	 cmp	 rax, QWORD PTR length$[rsp]
  0105b	0f 8d 0a 04 00
	00		 jge	 $LN1@scan_once_
  01061	83 7c 24 20 01	 cmp	 DWORD PTR kind$[rsp], 1
  01066	75 20		 jne	 SHORT $LN133@scan_once_
  01068	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR idx$[rsp]
  01070	48 8b 4c 24 38	 mov	 rcx, QWORD PTR str$[rsp]
  01075	48 03 c8	 add	 rcx, rax
  01078	48 8b c1	 mov	 rax, rcx
  0107b	0f b6 40 01	 movzx	 eax, BYTE PTR [rax+1]
  0107f	89 84 24 30 01
	00 00		 mov	 DWORD PTR tv594[rsp], eax
  01086	eb 48		 jmp	 SHORT $LN134@scan_once_
$LN133@scan_once_:
  01088	83 7c 24 20 02	 cmp	 DWORD PTR kind$[rsp], 2
  0108d	75 1b		 jne	 SHORT $LN131@scan_once_
  0108f	48 8b 44 24 38	 mov	 rax, QWORD PTR str$[rsp]
  01094	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  0109c	0f b7 44 48 02	 movzx	 eax, WORD PTR [rax+rcx*2+2]
  010a1	89 84 24 34 01
	00 00		 mov	 DWORD PTR tv593[rsp], eax
  010a8	eb 18		 jmp	 SHORT $LN132@scan_once_
$LN131@scan_once_:
  010aa	48 8b 44 24 38	 mov	 rax, QWORD PTR str$[rsp]
  010af	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  010b7	8b 44 88 04	 mov	 eax, DWORD PTR [rax+rcx*4+4]
  010bb	89 84 24 34 01
	00 00		 mov	 DWORD PTR tv593[rsp], eax
$LN132@scan_once_:
  010c2	8b 84 24 34 01
	00 00		 mov	 eax, DWORD PTR tv593[rsp]
  010c9	89 84 24 30 01
	00 00		 mov	 DWORD PTR tv594[rsp], eax
$LN134@scan_once_:
  010d0	83 bc 24 30 01
	00 00 49	 cmp	 DWORD PTR tv594[rsp], 73 ; 00000049H
  010d8	0f 85 8d 03 00
	00		 jne	 $LN1@scan_once_
  010de	83 7c 24 20 01	 cmp	 DWORD PTR kind$[rsp], 1
  010e3	75 20		 jne	 SHORT $LN137@scan_once_
  010e5	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR idx$[rsp]
  010ed	48 8b 4c 24 38	 mov	 rcx, QWORD PTR str$[rsp]
  010f2	48 03 c8	 add	 rcx, rax
  010f5	48 8b c1	 mov	 rax, rcx
  010f8	0f b6 40 02	 movzx	 eax, BYTE PTR [rax+2]
  010fc	89 84 24 38 01
	00 00		 mov	 DWORD PTR tv609[rsp], eax
  01103	eb 48		 jmp	 SHORT $LN138@scan_once_
$LN137@scan_once_:
  01105	83 7c 24 20 02	 cmp	 DWORD PTR kind$[rsp], 2
  0110a	75 1b		 jne	 SHORT $LN135@scan_once_
  0110c	48 8b 44 24 38	 mov	 rax, QWORD PTR str$[rsp]
  01111	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  01119	0f b7 44 48 04	 movzx	 eax, WORD PTR [rax+rcx*2+4]
  0111e	89 84 24 3c 01
	00 00		 mov	 DWORD PTR tv608[rsp], eax
  01125	eb 18		 jmp	 SHORT $LN136@scan_once_
$LN135@scan_once_:
  01127	48 8b 44 24 38	 mov	 rax, QWORD PTR str$[rsp]
  0112c	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  01134	8b 44 88 08	 mov	 eax, DWORD PTR [rax+rcx*4+8]
  01138	89 84 24 3c 01
	00 00		 mov	 DWORD PTR tv608[rsp], eax
$LN136@scan_once_:
  0113f	8b 84 24 3c 01
	00 00		 mov	 eax, DWORD PTR tv608[rsp]
  01146	89 84 24 38 01
	00 00		 mov	 DWORD PTR tv609[rsp], eax
$LN138@scan_once_:
  0114d	83 bc 24 38 01
	00 00 6e	 cmp	 DWORD PTR tv609[rsp], 110 ; 0000006eH
  01155	0f 85 10 03 00
	00		 jne	 $LN1@scan_once_
  0115b	83 7c 24 20 01	 cmp	 DWORD PTR kind$[rsp], 1
  01160	75 20		 jne	 SHORT $LN141@scan_once_
  01162	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR idx$[rsp]
  0116a	48 8b 4c 24 38	 mov	 rcx, QWORD PTR str$[rsp]
  0116f	48 03 c8	 add	 rcx, rax
  01172	48 8b c1	 mov	 rax, rcx
  01175	0f b6 40 03	 movzx	 eax, BYTE PTR [rax+3]
  01179	89 84 24 40 01
	00 00		 mov	 DWORD PTR tv624[rsp], eax
  01180	eb 48		 jmp	 SHORT $LN142@scan_once_
$LN141@scan_once_:
  01182	83 7c 24 20 02	 cmp	 DWORD PTR kind$[rsp], 2
  01187	75 1b		 jne	 SHORT $LN139@scan_once_
  01189	48 8b 44 24 38	 mov	 rax, QWORD PTR str$[rsp]
  0118e	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  01196	0f b7 44 48 06	 movzx	 eax, WORD PTR [rax+rcx*2+6]
  0119b	89 84 24 44 01
	00 00		 mov	 DWORD PTR tv623[rsp], eax
  011a2	eb 18		 jmp	 SHORT $LN140@scan_once_
$LN139@scan_once_:
  011a4	48 8b 44 24 38	 mov	 rax, QWORD PTR str$[rsp]
  011a9	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  011b1	8b 44 88 0c	 mov	 eax, DWORD PTR [rax+rcx*4+12]
  011b5	89 84 24 44 01
	00 00		 mov	 DWORD PTR tv623[rsp], eax
$LN140@scan_once_:
  011bc	8b 84 24 44 01
	00 00		 mov	 eax, DWORD PTR tv623[rsp]
  011c3	89 84 24 40 01
	00 00		 mov	 DWORD PTR tv624[rsp], eax
$LN142@scan_once_:
  011ca	83 bc 24 40 01
	00 00 66	 cmp	 DWORD PTR tv624[rsp], 102 ; 00000066H
  011d2	0f 85 93 02 00
	00		 jne	 $LN1@scan_once_
  011d8	83 7c 24 20 01	 cmp	 DWORD PTR kind$[rsp], 1
  011dd	75 20		 jne	 SHORT $LN145@scan_once_
  011df	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR idx$[rsp]
  011e7	48 8b 4c 24 38	 mov	 rcx, QWORD PTR str$[rsp]
  011ec	48 03 c8	 add	 rcx, rax
  011ef	48 8b c1	 mov	 rax, rcx
  011f2	0f b6 40 04	 movzx	 eax, BYTE PTR [rax+4]
  011f6	89 84 24 48 01
	00 00		 mov	 DWORD PTR tv639[rsp], eax
  011fd	eb 48		 jmp	 SHORT $LN146@scan_once_
$LN145@scan_once_:
  011ff	83 7c 24 20 02	 cmp	 DWORD PTR kind$[rsp], 2
  01204	75 1b		 jne	 SHORT $LN143@scan_once_
  01206	48 8b 44 24 38	 mov	 rax, QWORD PTR str$[rsp]
  0120b	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  01213	0f b7 44 48 08	 movzx	 eax, WORD PTR [rax+rcx*2+8]
  01218	89 84 24 4c 01
	00 00		 mov	 DWORD PTR tv638[rsp], eax
  0121f	eb 18		 jmp	 SHORT $LN144@scan_once_
$LN143@scan_once_:
  01221	48 8b 44 24 38	 mov	 rax, QWORD PTR str$[rsp]
  01226	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  0122e	8b 44 88 10	 mov	 eax, DWORD PTR [rax+rcx*4+16]
  01232	89 84 24 4c 01
	00 00		 mov	 DWORD PTR tv638[rsp], eax
$LN144@scan_once_:
  01239	8b 84 24 4c 01
	00 00		 mov	 eax, DWORD PTR tv638[rsp]
  01240	89 84 24 48 01
	00 00		 mov	 DWORD PTR tv639[rsp], eax
$LN146@scan_once_:
  01247	83 bc 24 48 01
	00 00 69	 cmp	 DWORD PTR tv639[rsp], 105 ; 00000069H
  0124f	0f 85 16 02 00
	00		 jne	 $LN1@scan_once_
  01255	83 7c 24 20 01	 cmp	 DWORD PTR kind$[rsp], 1
  0125a	75 20		 jne	 SHORT $LN149@scan_once_
  0125c	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR idx$[rsp]
  01264	48 8b 4c 24 38	 mov	 rcx, QWORD PTR str$[rsp]
  01269	48 03 c8	 add	 rcx, rax
  0126c	48 8b c1	 mov	 rax, rcx
  0126f	0f b6 40 05	 movzx	 eax, BYTE PTR [rax+5]
  01273	89 84 24 50 01
	00 00		 mov	 DWORD PTR tv654[rsp], eax
  0127a	eb 48		 jmp	 SHORT $LN150@scan_once_
$LN149@scan_once_:
  0127c	83 7c 24 20 02	 cmp	 DWORD PTR kind$[rsp], 2
  01281	75 1b		 jne	 SHORT $LN147@scan_once_
  01283	48 8b 44 24 38	 mov	 rax, QWORD PTR str$[rsp]
  01288	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  01290	0f b7 44 48 0a	 movzx	 eax, WORD PTR [rax+rcx*2+10]
  01295	89 84 24 54 01
	00 00		 mov	 DWORD PTR tv653[rsp], eax
  0129c	eb 18		 jmp	 SHORT $LN148@scan_once_
$LN147@scan_once_:
  0129e	48 8b 44 24 38	 mov	 rax, QWORD PTR str$[rsp]
  012a3	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  012ab	8b 44 88 14	 mov	 eax, DWORD PTR [rax+rcx*4+20]
  012af	89 84 24 54 01
	00 00		 mov	 DWORD PTR tv653[rsp], eax
$LN148@scan_once_:
  012b6	8b 84 24 54 01
	00 00		 mov	 eax, DWORD PTR tv653[rsp]
  012bd	89 84 24 50 01
	00 00		 mov	 DWORD PTR tv654[rsp], eax
$LN150@scan_once_:
  012c4	83 bc 24 50 01
	00 00 6e	 cmp	 DWORD PTR tv654[rsp], 110 ; 0000006eH
  012cc	0f 85 99 01 00
	00		 jne	 $LN1@scan_once_
  012d2	83 7c 24 20 01	 cmp	 DWORD PTR kind$[rsp], 1
  012d7	75 20		 jne	 SHORT $LN153@scan_once_
  012d9	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR idx$[rsp]
  012e1	48 8b 4c 24 38	 mov	 rcx, QWORD PTR str$[rsp]
  012e6	48 03 c8	 add	 rcx, rax
  012e9	48 8b c1	 mov	 rax, rcx
  012ec	0f b6 40 06	 movzx	 eax, BYTE PTR [rax+6]
  012f0	89 84 24 58 01
	00 00		 mov	 DWORD PTR tv669[rsp], eax
  012f7	eb 48		 jmp	 SHORT $LN154@scan_once_
$LN153@scan_once_:
  012f9	83 7c 24 20 02	 cmp	 DWORD PTR kind$[rsp], 2
  012fe	75 1b		 jne	 SHORT $LN151@scan_once_
  01300	48 8b 44 24 38	 mov	 rax, QWORD PTR str$[rsp]
  01305	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  0130d	0f b7 44 48 0c	 movzx	 eax, WORD PTR [rax+rcx*2+12]
  01312	89 84 24 5c 01
	00 00		 mov	 DWORD PTR tv668[rsp], eax
  01319	eb 18		 jmp	 SHORT $LN152@scan_once_
$LN151@scan_once_:
  0131b	48 8b 44 24 38	 mov	 rax, QWORD PTR str$[rsp]
  01320	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  01328	8b 44 88 18	 mov	 eax, DWORD PTR [rax+rcx*4+24]
  0132c	89 84 24 5c 01
	00 00		 mov	 DWORD PTR tv668[rsp], eax
$LN152@scan_once_:
  01333	8b 84 24 5c 01
	00 00		 mov	 eax, DWORD PTR tv668[rsp]
  0133a	89 84 24 58 01
	00 00		 mov	 DWORD PTR tv669[rsp], eax
$LN154@scan_once_:
  01341	83 bc 24 58 01
	00 00 69	 cmp	 DWORD PTR tv669[rsp], 105 ; 00000069H
  01349	0f 85 1c 01 00
	00		 jne	 $LN1@scan_once_
  0134f	83 7c 24 20 01	 cmp	 DWORD PTR kind$[rsp], 1
  01354	75 20		 jne	 SHORT $LN157@scan_once_
  01356	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR idx$[rsp]
  0135e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR str$[rsp]
  01363	48 03 c8	 add	 rcx, rax
  01366	48 8b c1	 mov	 rax, rcx
  01369	0f b6 40 07	 movzx	 eax, BYTE PTR [rax+7]
  0136d	89 84 24 60 01
	00 00		 mov	 DWORD PTR tv684[rsp], eax
  01374	eb 48		 jmp	 SHORT $LN158@scan_once_
$LN157@scan_once_:
  01376	83 7c 24 20 02	 cmp	 DWORD PTR kind$[rsp], 2
  0137b	75 1b		 jne	 SHORT $LN155@scan_once_
  0137d	48 8b 44 24 38	 mov	 rax, QWORD PTR str$[rsp]
  01382	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  0138a	0f b7 44 48 0e	 movzx	 eax, WORD PTR [rax+rcx*2+14]
  0138f	89 84 24 64 01
	00 00		 mov	 DWORD PTR tv683[rsp], eax
  01396	eb 18		 jmp	 SHORT $LN156@scan_once_
$LN155@scan_once_:
  01398	48 8b 44 24 38	 mov	 rax, QWORD PTR str$[rsp]
  0139d	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  013a5	8b 44 88 1c	 mov	 eax, DWORD PTR [rax+rcx*4+28]
  013a9	89 84 24 64 01
	00 00		 mov	 DWORD PTR tv683[rsp], eax
$LN156@scan_once_:
  013b0	8b 84 24 64 01
	00 00		 mov	 eax, DWORD PTR tv683[rsp]
  013b7	89 84 24 60 01
	00 00		 mov	 DWORD PTR tv684[rsp], eax
$LN158@scan_once_:
  013be	83 bc 24 60 01
	00 00 74	 cmp	 DWORD PTR tv684[rsp], 116 ; 00000074H
  013c6	0f 85 9f 00 00
	00		 jne	 $LN1@scan_once_
  013cc	83 7c 24 20 01	 cmp	 DWORD PTR kind$[rsp], 1
  013d1	75 20		 jne	 SHORT $LN161@scan_once_
  013d3	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR idx$[rsp]
  013db	48 8b 4c 24 38	 mov	 rcx, QWORD PTR str$[rsp]
  013e0	48 03 c8	 add	 rcx, rax
  013e3	48 8b c1	 mov	 rax, rcx
  013e6	0f b6 40 08	 movzx	 eax, BYTE PTR [rax+8]
  013ea	89 84 24 68 01
	00 00		 mov	 DWORD PTR tv699[rsp], eax
  013f1	eb 48		 jmp	 SHORT $LN162@scan_once_
$LN161@scan_once_:
  013f3	83 7c 24 20 02	 cmp	 DWORD PTR kind$[rsp], 2
  013f8	75 1b		 jne	 SHORT $LN159@scan_once_
  013fa	48 8b 44 24 38	 mov	 rax, QWORD PTR str$[rsp]
  013ff	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  01407	0f b7 44 48 10	 movzx	 eax, WORD PTR [rax+rcx*2+16]
  0140c	89 84 24 6c 01
	00 00		 mov	 DWORD PTR tv698[rsp], eax
  01413	eb 18		 jmp	 SHORT $LN160@scan_once_
$LN159@scan_once_:
  01415	48 8b 44 24 38	 mov	 rax, QWORD PTR str$[rsp]
  0141a	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  01422	8b 44 88 20	 mov	 eax, DWORD PTR [rax+rcx*4+32]
  01426	89 84 24 6c 01
	00 00		 mov	 DWORD PTR tv698[rsp], eax
$LN160@scan_once_:
  0142d	8b 84 24 6c 01
	00 00		 mov	 eax, DWORD PTR tv698[rsp]
  01434	89 84 24 68 01
	00 00		 mov	 DWORD PTR tv699[rsp], eax
$LN162@scan_once_:
  0143b	83 bc 24 68 01
	00 00 79	 cmp	 DWORD PTR tv699[rsp], 121 ; 00000079H
  01443	75 26		 jne	 SHORT $LN1@scan_once_

; 1061 :                 return _parse_constant(s, "-Infinity", idx, next_idx_ptr);

  01445	4c 8b 8c 24 98
	01 00 00	 mov	 r9, QWORD PTR next_idx_ptr$[rsp]
  0144d	4c 8b 84 24 90
	01 00 00	 mov	 r8, QWORD PTR idx$[rsp]
  01455	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09BLDCEMOH@?9Infinity?$AA@
  0145c	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  01464	e8 00 00 00 00	 call	 _parse_constant
  01469	eb 25		 jmp	 SHORT $LN30@scan_once_
$LN1@scan_once_:
$LN26@scan_once_:

; 1062 :             }
; 1063 :             break;
; 1064 :     }
; 1065 :     /* Didn't find a string, object, array, or named constant. Look for a number. */
; 1066 :     return _match_number_unicode(s, pystr, idx, next_idx_ptr);

  0146b	4c 8b 8c 24 98
	01 00 00	 mov	 r9, QWORD PTR next_idx_ptr$[rsp]
  01473	4c 8b 84 24 90
	01 00 00	 mov	 r8, QWORD PTR idx$[rsp]
  0147b	48 8b 94 24 88
	01 00 00	 mov	 rdx, QWORD PTR pystr$[rsp]
  01483	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  0148b	e8 00 00 00 00	 call	 _match_number_unicode
$LN30@scan_once_:

; 1067 : }

  01490	48 81 c4 78 01
	00 00		 add	 rsp, 376		; 00000178H
  01497	c3		 ret	 0
$LN164@scan_once_:
  01498	00 00 00 00	 DD	 $LN25@scan_once_
  0149c	00 00 00 00	 DD	 $LN2@scan_once_
  014a0	00 00 00 00	 DD	 $LN4@scan_once_
  014a4	00 00 00 00	 DD	 $LN6@scan_once_
  014a8	00 00 00 00	 DD	 $LN18@scan_once_
  014ac	00 00 00 00	 DD	 $LN8@scan_once_
  014b0	00 00 00 00	 DD	 $LN12@scan_once_
  014b4	00 00 00 00	 DD	 $LN10@scan_once_
  014b8	00 00 00 00	 DD	 $LN24@scan_once_
  014bc	00 00 00 00	 DD	 $LN26@scan_once_
$LN163@scan_once_:
  014c0	00		 DB	 0
  014c1	09		 DB	 9
  014c2	09		 DB	 9
  014c3	09		 DB	 9
  014c4	09		 DB	 9
  014c5	09		 DB	 9
  014c6	09		 DB	 9
  014c7	09		 DB	 9
  014c8	09		 DB	 9
  014c9	09		 DB	 9
  014ca	09		 DB	 9
  014cb	01		 DB	 1
  014cc	09		 DB	 9
  014cd	09		 DB	 9
  014ce	09		 DB	 9
  014cf	09		 DB	 9
  014d0	09		 DB	 9
  014d1	09		 DB	 9
  014d2	09		 DB	 9
  014d3	09		 DB	 9
  014d4	09		 DB	 9
  014d5	09		 DB	 9
  014d6	09		 DB	 9
  014d7	09		 DB	 9
  014d8	09		 DB	 9
  014d9	09		 DB	 9
  014da	09		 DB	 9
  014db	09		 DB	 9
  014dc	09		 DB	 9
  014dd	09		 DB	 9
  014de	09		 DB	 9
  014df	09		 DB	 9
  014e0	09		 DB	 9
  014e1	09		 DB	 9
  014e2	09		 DB	 9
  014e3	09		 DB	 9
  014e4	09		 DB	 9
  014e5	09		 DB	 9
  014e6	09		 DB	 9
  014e7	02		 DB	 2
  014e8	09		 DB	 9
  014e9	09		 DB	 9
  014ea	09		 DB	 9
  014eb	09		 DB	 9
  014ec	03		 DB	 3
  014ed	09		 DB	 9
  014ee	09		 DB	 9
  014ef	09		 DB	 9
  014f0	09		 DB	 9
  014f1	09		 DB	 9
  014f2	09		 DB	 9
  014f3	09		 DB	 9
  014f4	09		 DB	 9
  014f5	09		 DB	 9
  014f6	09		 DB	 9
  014f7	09		 DB	 9
  014f8	09		 DB	 9
  014f9	04		 DB	 4
  014fa	09		 DB	 9
  014fb	09		 DB	 9
  014fc	09		 DB	 9
  014fd	09		 DB	 9
  014fe	09		 DB	 9
  014ff	09		 DB	 9
  01500	09		 DB	 9
  01501	09		 DB	 9
  01502	09		 DB	 9
  01503	09		 DB	 9
  01504	05		 DB	 5
  01505	09		 DB	 9
  01506	09		 DB	 9
  01507	09		 DB	 9
  01508	09		 DB	 9
  01509	09		 DB	 9
  0150a	09		 DB	 9
  0150b	09		 DB	 9
  0150c	06		 DB	 6
  0150d	09		 DB	 9
  0150e	09		 DB	 9
  0150f	09		 DB	 9
  01510	09		 DB	 9
  01511	09		 DB	 9
  01512	07		 DB	 7
  01513	09		 DB	 9
  01514	09		 DB	 9
  01515	09		 DB	 9
  01516	09		 DB	 9
  01517	09		 DB	 9
  01518	09		 DB	 9
  01519	08		 DB	 8
scan_once_unicode ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN7
	DD	imagerel $LN7+132
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 6d		 jne	 SHORT $LN2@Py_IncRef
  00012	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0001a	4c 8b 4c 24 40	 mov	 r9, QWORD PTR op$[rsp]
  0001f	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_Guard
  00038	85 c0		 test	 eax, eax
  0003a	75 12		 jne	 SHORT $LN1@Py_IncRef
  0003c	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  00041	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00045	48 83 e0 20	 and	 rax, 32			; 00000020H
  00049	48 85 c0	 test	 rax, rax
  0004c	74 31		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;

  0004e	e8 00 00 00 00	 call	 _Py_PXCTX
  00053	85 c0		 test	 eax, eax
  00055	74 02		 je	 SHORT $LN5@Py_IncRef
  00057	eb 11		 jmp	 SHORT $LN6@Py_IncRef
$LN5@Py_IncRef:
  00059	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00060	48 ff c0	 inc	 rax
  00063	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN6@Py_IncRef:

; 907  :         (((PyObject*)(op))->ob_refcnt++);

  0006a	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  0006f	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00073	48 ff c0	 inc	 rax
  00076	48 8b 4c 24 40	 mov	 rcx, QWORD PTR op$[rsp]
  0007b	48 89 41 50	 mov	 QWORD PTR [rcx+80], rax
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  0007f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00083	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BB@GKGDLNNB@Expecting?5object?$AA@	; `string'
PUBLIC	??_C@_0BI@EKLMLIIK@Expecting?5?8?0?8?5delimiter?$AA@ ; `string'
PUBLIC	??_C@_0BG@PKFBKFJI@_parse_object_unicode?$AA@	; `string'
PUBLIC	??_C@_0BI@FOFOMBIN@Expecting?5?8?3?8?5delimiter?$AA@ ; `string'
PUBLIC	??_C@_0DC@COPDFPMD@Expecting?5property?5name?5enclosed@ ; `string'
EXTRN	PyObject_CallFunctionObjArgs:PROC
EXTRN	PyTuple_Pack:PROC
EXTRN	PyDict_SetItem:PROC
EXTRN	PyDict_GetItem:PROC
EXTRN	PyDict_New:PROC
;	COMDAT pdata
; File c:\src\pyparallel\modules\_json.c
pdata	SEGMENT
$pdata$_parse_object_unicode DD imagerel _parse_object_unicode
	DD	imagerel _parse_object_unicode+5485
	DD	imagerel $unwind$_parse_object_unicode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_parse_object_unicode DD 021b01H
	DD	033011bH
xdata	ENDS
;	COMDAT ??_C@_0BB@GKGDLNNB@Expecting?5object?$AA@
CONST	SEGMENT
??_C@_0BB@GKGDLNNB@Expecting?5object?$AA@ DB 'Expecting object', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@EKLMLIIK@Expecting?5?8?0?8?5delimiter?$AA@
CONST	SEGMENT
??_C@_0BI@EKLMLIIK@Expecting?5?8?0?8?5delimiter?$AA@ DB 'Expecting '','' '
	DB	'delimiter', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@PKFBKFJI@_parse_object_unicode?$AA@
CONST	SEGMENT
??_C@_0BG@PKFBKFJI@_parse_object_unicode?$AA@ DB '_parse_object_unicode', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@FOFOMBIN@Expecting?5?8?3?8?5delimiter?$AA@
CONST	SEGMENT
??_C@_0BI@FOFOMBIN@Expecting?5?8?3?8?5delimiter?$AA@ DB 'Expecting '':'' '
	DB	'delimiter', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@COPDFPMD@Expecting?5property?5name?5enclosed@
CONST	SEGMENT
??_C@_0DC@COPDFPMD@Expecting?5property?5name?5enclosed@ DB 'Expecting pro'
	DB	'perty name enclosed in double quotes', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _parse_object_unicode
_TEXT	SEGMENT
kind$ = 48
rval$ = 56
strict$ = 64
end_idx$ = 72
key$ = 80
next_idx$ = 88
val$ = 96
has_pairs_hook$ = 104
str$ = 112
memokey$21224 = 120
item$21290 = 128
_py_tmp$21298 = 136
_py_tmp$21306 = 144
_py_tmp$21319 = 152
_py_tmp$21327 = 160
tv69 = 168
tv84 = 172
tv151 = 176
tv160 = 184
tv214 = 192
tv213 = 196
tv226 = 200
tv225 = 204
tv238 = 208
tv237 = 212
tv250 = 216
tv249 = 220
tv264 = 224
tv263 = 228
tv277 = 232
tv276 = 236
tv313 = 240
tv312 = 244
tv325 = 248
tv324 = 252
tv337 = 256
tv336 = 260
tv349 = 264
tv348 = 268
tv363 = 272
tv362 = 276
tv380 = 280
tv379 = 284
tv392 = 288
tv391 = 292
tv404 = 296
tv403 = 300
tv416 = 304
tv415 = 308
tv493 = 312
tv492 = 316
tv505 = 320
tv504 = 324
tv517 = 328
tv516 = 332
tv529 = 336
tv528 = 340
tv543 = 344
tv542 = 348
tv555 = 352
tv554 = 356
tv572 = 360
tv571 = 364
tv584 = 368
tv583 = 372
tv596 = 376
tv595 = 380
tv608 = 384
tv607 = 388
tv622 = 392
tv621 = 396
s$ = 416
pystr$ = 424
idx$ = 432
next_idx_ptr$ = 440
_parse_object_unicode PROC				; COMDAT

; 597  : _parse_object_unicode(PyScannerObject *s, PyObject *pystr, Py_ssize_t idx, Py_ssize_t *next_idx_ptr) {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec 98 01
	00 00		 sub	 rsp, 408		; 00000198H

; 598  :     /* Read a JSON object from PyUnicode pystr.
; 599  :     idx is the index of the first character after the opening curly brace.
; 600  :     *next_idx_ptr is a return-by-reference index to the first character after
; 601  :         the closing curly brace.
; 602  : 
; 603  :     Returns a new PyObject (usually a dict, but object_hook can change that)
; 604  :     */
; 605  :     void *str;
; 606  :     int kind;
; 607  :     Py_ssize_t end_idx;
; 608  :     PyObject *val = NULL;

  0001b	48 c7 44 24 60
	00 00 00 00	 mov	 QWORD PTR val$[rsp], 0

; 609  :     PyObject *rval = NULL;

  00024	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR rval$[rsp], 0

; 610  :     PyObject *key = NULL;

  0002d	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR key$[rsp], 0

; 611  :     int strict = PyObject_IsTrue(s->strict);

  00036	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  0003e	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00042	e8 00 00 00 00	 call	 PyObject_IsTrue
  00047	89 44 24 40	 mov	 DWORD PTR strict$[rsp], eax

; 612  :     int has_pairs_hook = (s->object_pairs_hook != Py_None);

  0004b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00052	48 8b 8c 24 a0
	01 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  0005a	48 39 41 70	 cmp	 QWORD PTR [rcx+112], rax
  0005e	74 0d		 je	 SHORT $LN74@parse_obje
  00060	c7 84 24 a8 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv69[rsp], 1
  0006b	eb 0b		 jmp	 SHORT $LN75@parse_obje
$LN74@parse_obje:
  0006d	c7 84 24 a8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv69[rsp], 0
$LN75@parse_obje:
  00078	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR tv69[rsp]
  0007f	89 44 24 68	 mov	 DWORD PTR has_pairs_hook$[rsp], eax

; 613  :     Py_ssize_t next_idx;
; 614  : 
; 615  :     if (PyUnicode_READY(pystr) == -1)

  00083	48 8b 84 24 a8
	01 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  0008b	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0008f	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00095	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0009a	85 c0		 test	 eax, eax
  0009c	75 1c		 jne	 SHORT $LN76@parse_obje
  0009e	41 b8 67 02 00
	00		 mov	 r8d, 615		; 00000267H
  000a4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@KOELJAMM@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAj?$AAs?$AAo?$AAn?$AA?4?$AAc?$AA?$AA@
  000ab	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@GLPHKNNN@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAp?$AAy?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  000b2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000b8	33 c0		 xor	 eax, eax
$LN76@parse_obje:
  000ba	48 8b 84 24 a8
	01 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  000c2	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  000c5	c1 e8 07	 shr	 eax, 7
  000c8	83 e0 01	 and	 eax, 1
  000cb	85 c0		 test	 eax, eax
  000cd	74 0d		 je	 SHORT $LN77@parse_obje
  000cf	c7 84 24 ac 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv84[rsp], 0
  000da	eb 14		 jmp	 SHORT $LN78@parse_obje
$LN77@parse_obje:
  000dc	48 8b 8c 24 a8
	01 00 00	 mov	 rcx, QWORD PTR pystr$[rsp]
  000e4	e8 00 00 00 00	 call	 _PyUnicode_Ready
  000e9	89 84 24 ac 00
	00 00		 mov	 DWORD PTR tv84[rsp], eax
$LN78@parse_obje:
  000f0	83 bc 24 ac 00
	00 00 ff	 cmp	 DWORD PTR tv84[rsp], -1
  000f8	75 07		 jne	 SHORT $LN71@parse_obje

; 616  :         return NULL;

  000fa	33 c0		 xor	 eax, eax
  000fc	e9 64 14 00 00	 jmp	 $LN72@parse_obje
$LN71@parse_obje:

; 617  : 
; 618  :     str = PyUnicode_DATA(pystr);

  00101	48 8b 84 24 a8
	01 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  00109	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0010d	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00113	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00118	85 c0		 test	 eax, eax
  0011a	75 1c		 jne	 SHORT $LN79@parse_obje
  0011c	41 b8 6a 02 00
	00		 mov	 r8d, 618		; 0000026aH
  00122	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@KOELJAMM@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAj?$AAs?$AAo?$AAn?$AA?4?$AAc?$AA?$AA@
  00129	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@GLPHKNNN@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAp?$AAy?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  00130	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00136	33 c0		 xor	 eax, eax
$LN79@parse_obje:
  00138	48 8b 84 24 a8
	01 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  00140	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00143	c1 e8 05	 shr	 eax, 5
  00146	83 e0 01	 and	 eax, 1
  00149	85 c0		 test	 eax, eax
  0014b	0f 84 bd 00 00
	00		 je	 $LN85@parse_obje
  00151	48 8b 84 24 a8
	01 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  00159	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0015d	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00163	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00168	85 c0		 test	 eax, eax
  0016a	75 1c		 jne	 SHORT $LN80@parse_obje
  0016c	41 b8 6a 02 00
	00		 mov	 r8d, 618		; 0000026aH
  00172	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@KOELJAMM@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAj?$AAs?$AAo?$AAn?$AA?4?$AAc?$AA?$AA@
  00179	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@GLPHKNNN@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAp?$AAy?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  00180	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00186	33 c0		 xor	 eax, eax
$LN80@parse_obje:
  00188	48 8b 84 24 a8
	01 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  00190	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00193	c1 e8 07	 shr	 eax, 7
  00196	83 e0 01	 and	 eax, 1
  00199	85 c0		 test	 eax, eax
  0019b	75 1c		 jne	 SHORT $LN81@parse_obje
  0019d	41 b8 6a 02 00
	00		 mov	 r8d, 618		; 0000026aH
  001a3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@KOELJAMM@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAj?$AAs?$AAo?$AAn?$AA?4?$AAc?$AA?$AA@
  001aa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@NACFPDOF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAp?$AAy?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  001b1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001b7	33 c0		 xor	 eax, eax
$LN81@parse_obje:
  001b9	48 8b 84 24 a8
	01 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  001c1	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  001c4	c1 e8 06	 shr	 eax, 6
  001c7	83 e0 01	 and	 eax, 1
  001ca	85 c0		 test	 eax, eax
  001cc	74 18		 je	 SHORT $LN82@parse_obje
  001ce	48 8b 84 24 a8
	01 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  001d6	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  001dc	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR tv151[rsp], rax
  001e4	eb 16		 jmp	 SHORT $LN83@parse_obje
$LN82@parse_obje:
  001e6	48 8b 84 24 a8
	01 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  001ee	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  001f4	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR tv151[rsp], rax
$LN83@parse_obje:
  001fc	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR tv151[rsp]
  00204	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR tv160[rsp], rax
  0020c	eb 45		 jmp	 SHORT $LN86@parse_obje
$LN85@parse_obje:
  0020e	48 8b 84 24 a8
	01 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  00216	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  0021e	75 1c		 jne	 SHORT $LN84@parse_obje
  00220	41 b8 6a 02 00
	00		 mov	 r8d, 618		; 0000026aH
  00226	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@KOELJAMM@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAj?$AAs?$AAo?$AAn?$AA?4?$AAc?$AA?$AA@
  0022d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EM@FMOHIEKB@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AAp?$AAy?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt@
  00234	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0023a	33 c0		 xor	 eax, eax
$LN84@parse_obje:
  0023c	48 8b 84 24 a8
	01 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  00244	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  0024b	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR tv160[rsp], rax
$LN86@parse_obje:
  00253	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR tv160[rsp]
  0025b	48 89 44 24 70	 mov	 QWORD PTR str$[rsp], rax

; 619  :     kind = PyUnicode_KIND(pystr);

  00260	48 8b 84 24 a8
	01 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  00268	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0026c	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00272	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00277	85 c0		 test	 eax, eax
  00279	75 1c		 jne	 SHORT $LN87@parse_obje
  0027b	41 b8 6b 02 00
	00		 mov	 r8d, 619		; 0000026bH
  00281	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@KOELJAMM@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAj?$AAs?$AAo?$AAn?$AA?4?$AAc?$AA?$AA@
  00288	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@GLPHKNNN@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAp?$AAy?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  0028f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00295	33 c0		 xor	 eax, eax
$LN87@parse_obje:
  00297	48 8b 84 24 a8
	01 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  0029f	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  002a2	c1 e8 07	 shr	 eax, 7
  002a5	83 e0 01	 and	 eax, 1
  002a8	85 c0		 test	 eax, eax
  002aa	75 1c		 jne	 SHORT $LN88@parse_obje
  002ac	41 b8 6b 02 00
	00		 mov	 r8d, 619		; 0000026bH
  002b2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@KOELJAMM@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAj?$AAs?$AAo?$AAn?$AA?4?$AAc?$AA?$AA@
  002b9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@NACFPDOF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAp?$AAy?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  002c0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  002c6	33 c0		 xor	 eax, eax
$LN88@parse_obje:
  002c8	48 8b 84 24 a8
	01 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  002d0	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  002d3	c1 e8 02	 shr	 eax, 2
  002d6	83 e0 07	 and	 eax, 7
  002d9	89 44 24 30	 mov	 DWORD PTR kind$[rsp], eax

; 620  :     end_idx = PyUnicode_GET_LENGTH(pystr) - 1;

  002dd	48 8b 84 24 a8
	01 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  002e5	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  002e9	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  002ef	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  002f4	85 c0		 test	 eax, eax
  002f6	75 1c		 jne	 SHORT $LN89@parse_obje
  002f8	41 b8 6c 02 00
	00		 mov	 r8d, 620		; 0000026cH
  002fe	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@KOELJAMM@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAj?$AAs?$AAo?$AAn?$AA?4?$AAc?$AA?$AA@
  00305	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@GLPHKNNN@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAp?$AAy?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  0030c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00312	33 c0		 xor	 eax, eax
$LN89@parse_obje:
  00314	48 8b 84 24 a8
	01 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  0031c	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0031f	c1 e8 07	 shr	 eax, 7
  00322	83 e0 01	 and	 eax, 1
  00325	85 c0		 test	 eax, eax
  00327	75 1c		 jne	 SHORT $LN90@parse_obje
  00329	41 b8 6c 02 00
	00		 mov	 r8d, 620		; 0000026cH
  0032f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@KOELJAMM@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAj?$AAs?$AAo?$AAn?$AA?4?$AAc?$AA?$AA@
  00336	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@NACFPDOF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAp?$AAy?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  0033d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00343	33 c0		 xor	 eax, eax
$LN90@parse_obje:
  00345	48 8b 84 24 a8
	01 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  0034d	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00351	48 ff c8	 dec	 rax
  00354	48 89 44 24 48	 mov	 QWORD PTR end_idx$[rsp], rax

; 621  : 
; 622  :     if (has_pairs_hook)

  00359	83 7c 24 68 00	 cmp	 DWORD PTR has_pairs_hook$[rsp], 0
  0035e	74 0e		 je	 SHORT $LN70@parse_obje

; 623  :         rval = PyList_New(0);

  00360	33 c9		 xor	 ecx, ecx
  00362	e8 00 00 00 00	 call	 PyList_New
  00367	48 89 44 24 38	 mov	 QWORD PTR rval$[rsp], rax

; 624  :     else

  0036c	eb 0a		 jmp	 SHORT $LN69@parse_obje
$LN70@parse_obje:

; 625  :         rval = PyDict_New();

  0036e	e8 00 00 00 00	 call	 PyDict_New
  00373	48 89 44 24 38	 mov	 QWORD PTR rval$[rsp], rax
$LN69@parse_obje:

; 626  :     if (rval == NULL)

  00378	48 83 7c 24 38
	00		 cmp	 QWORD PTR rval$[rsp], 0
  0037e	75 07		 jne	 SHORT $LN68@parse_obje

; 627  :         return NULL;

  00380	33 c0		 xor	 eax, eax
  00382	e9 de 11 00 00	 jmp	 $LN72@parse_obje
$LN68@parse_obje:
$LN67@parse_obje:

; 628  : 
; 629  :     /* skip whitespace after { */
; 630  :     while (idx <= end_idx && IS_WHITESPACE(PyUnicode_READ(kind,str, idx))) idx++;

  00387	48 8b 44 24 48	 mov	 rax, QWORD PTR end_idx$[rsp]
  0038c	48 39 84 24 b0
	01 00 00	 cmp	 QWORD PTR idx$[rsp], rax
  00394	0f 8f f8 01 00
	00		 jg	 $LN66@parse_obje
  0039a	83 7c 24 30 01	 cmp	 DWORD PTR kind$[rsp], 1
  0039f	75 1f		 jne	 SHORT $LN93@parse_obje
  003a1	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR idx$[rsp]
  003a9	48 8b 4c 24 70	 mov	 rcx, QWORD PTR str$[rsp]
  003ae	48 03 c8	 add	 rcx, rax
  003b1	48 8b c1	 mov	 rax, rcx
  003b4	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  003b7	89 84 24 c0 00
	00 00		 mov	 DWORD PTR tv214[rsp], eax
  003be	eb 46		 jmp	 SHORT $LN94@parse_obje
$LN93@parse_obje:
  003c0	83 7c 24 30 02	 cmp	 DWORD PTR kind$[rsp], 2
  003c5	75 1a		 jne	 SHORT $LN91@parse_obje
  003c7	48 8b 44 24 70	 mov	 rax, QWORD PTR str$[rsp]
  003cc	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  003d4	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  003d8	89 84 24 c4 00
	00 00		 mov	 DWORD PTR tv213[rsp], eax
  003df	eb 17		 jmp	 SHORT $LN92@parse_obje
$LN91@parse_obje:
  003e1	48 8b 44 24 70	 mov	 rax, QWORD PTR str$[rsp]
  003e6	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  003ee	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  003f1	89 84 24 c4 00
	00 00		 mov	 DWORD PTR tv213[rsp], eax
$LN92@parse_obje:
  003f8	8b 84 24 c4 00
	00 00		 mov	 eax, DWORD PTR tv213[rsp]
  003ff	89 84 24 c0 00
	00 00		 mov	 DWORD PTR tv214[rsp], eax
$LN94@parse_obje:
  00406	83 bc 24 c0 00
	00 00 20	 cmp	 DWORD PTR tv214[rsp], 32 ; 00000020H
  0040e	0f 84 66 01 00
	00		 je	 $LN65@parse_obje
  00414	83 7c 24 30 01	 cmp	 DWORD PTR kind$[rsp], 1
  00419	75 1f		 jne	 SHORT $LN97@parse_obje
  0041b	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR idx$[rsp]
  00423	48 8b 4c 24 70	 mov	 rcx, QWORD PTR str$[rsp]
  00428	48 03 c8	 add	 rcx, rax
  0042b	48 8b c1	 mov	 rax, rcx
  0042e	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00431	89 84 24 c8 00
	00 00		 mov	 DWORD PTR tv226[rsp], eax
  00438	eb 46		 jmp	 SHORT $LN98@parse_obje
$LN97@parse_obje:
  0043a	83 7c 24 30 02	 cmp	 DWORD PTR kind$[rsp], 2
  0043f	75 1a		 jne	 SHORT $LN95@parse_obje
  00441	48 8b 44 24 70	 mov	 rax, QWORD PTR str$[rsp]
  00446	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  0044e	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  00452	89 84 24 cc 00
	00 00		 mov	 DWORD PTR tv225[rsp], eax
  00459	eb 17		 jmp	 SHORT $LN96@parse_obje
$LN95@parse_obje:
  0045b	48 8b 44 24 70	 mov	 rax, QWORD PTR str$[rsp]
  00460	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  00468	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  0046b	89 84 24 cc 00
	00 00		 mov	 DWORD PTR tv225[rsp], eax
$LN96@parse_obje:
  00472	8b 84 24 cc 00
	00 00		 mov	 eax, DWORD PTR tv225[rsp]
  00479	89 84 24 c8 00
	00 00		 mov	 DWORD PTR tv226[rsp], eax
$LN98@parse_obje:
  00480	83 bc 24 c8 00
	00 00 09	 cmp	 DWORD PTR tv226[rsp], 9
  00488	0f 84 ec 00 00
	00		 je	 $LN65@parse_obje
  0048e	83 7c 24 30 01	 cmp	 DWORD PTR kind$[rsp], 1
  00493	75 1f		 jne	 SHORT $LN101@parse_obje
  00495	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR idx$[rsp]
  0049d	48 8b 4c 24 70	 mov	 rcx, QWORD PTR str$[rsp]
  004a2	48 03 c8	 add	 rcx, rax
  004a5	48 8b c1	 mov	 rax, rcx
  004a8	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  004ab	89 84 24 d0 00
	00 00		 mov	 DWORD PTR tv238[rsp], eax
  004b2	eb 46		 jmp	 SHORT $LN102@parse_obje
$LN101@parse_obje:
  004b4	83 7c 24 30 02	 cmp	 DWORD PTR kind$[rsp], 2
  004b9	75 1a		 jne	 SHORT $LN99@parse_obje
  004bb	48 8b 44 24 70	 mov	 rax, QWORD PTR str$[rsp]
  004c0	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  004c8	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  004cc	89 84 24 d4 00
	00 00		 mov	 DWORD PTR tv237[rsp], eax
  004d3	eb 17		 jmp	 SHORT $LN100@parse_obje
$LN99@parse_obje:
  004d5	48 8b 44 24 70	 mov	 rax, QWORD PTR str$[rsp]
  004da	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  004e2	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  004e5	89 84 24 d4 00
	00 00		 mov	 DWORD PTR tv237[rsp], eax
$LN100@parse_obje:
  004ec	8b 84 24 d4 00
	00 00		 mov	 eax, DWORD PTR tv237[rsp]
  004f3	89 84 24 d0 00
	00 00		 mov	 DWORD PTR tv238[rsp], eax
$LN102@parse_obje:
  004fa	83 bc 24 d0 00
	00 00 0a	 cmp	 DWORD PTR tv238[rsp], 10
  00502	74 76		 je	 SHORT $LN65@parse_obje
  00504	83 7c 24 30 01	 cmp	 DWORD PTR kind$[rsp], 1
  00509	75 1f		 jne	 SHORT $LN105@parse_obje
  0050b	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR idx$[rsp]
  00513	48 8b 4c 24 70	 mov	 rcx, QWORD PTR str$[rsp]
  00518	48 03 c8	 add	 rcx, rax
  0051b	48 8b c1	 mov	 rax, rcx
  0051e	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00521	89 84 24 d8 00
	00 00		 mov	 DWORD PTR tv250[rsp], eax
  00528	eb 46		 jmp	 SHORT $LN106@parse_obje
$LN105@parse_obje:
  0052a	83 7c 24 30 02	 cmp	 DWORD PTR kind$[rsp], 2
  0052f	75 1a		 jne	 SHORT $LN103@parse_obje
  00531	48 8b 44 24 70	 mov	 rax, QWORD PTR str$[rsp]
  00536	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  0053e	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  00542	89 84 24 dc 00
	00 00		 mov	 DWORD PTR tv249[rsp], eax
  00549	eb 17		 jmp	 SHORT $LN104@parse_obje
$LN103@parse_obje:
  0054b	48 8b 44 24 70	 mov	 rax, QWORD PTR str$[rsp]
  00550	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  00558	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  0055b	89 84 24 dc 00
	00 00		 mov	 DWORD PTR tv249[rsp], eax
$LN104@parse_obje:
  00562	8b 84 24 dc 00
	00 00		 mov	 eax, DWORD PTR tv249[rsp]
  00569	89 84 24 d8 00
	00 00		 mov	 DWORD PTR tv250[rsp], eax
$LN106@parse_obje:
  00570	83 bc 24 d8 00
	00 00 0d	 cmp	 DWORD PTR tv250[rsp], 13
  00578	75 18		 jne	 SHORT $LN66@parse_obje
$LN65@parse_obje:
  0057a	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR idx$[rsp]
  00582	48 ff c0	 inc	 rax
  00585	48 89 84 24 b0
	01 00 00	 mov	 QWORD PTR idx$[rsp], rax
  0058d	e9 f5 fd ff ff	 jmp	 $LN67@parse_obje
$LN66@parse_obje:

; 631  : 
; 632  :     /* only loop if the object is non-empty */
; 633  :     if (idx <= end_idx && PyUnicode_READ(kind, str, idx) != '}') {

  00592	48 8b 44 24 48	 mov	 rax, QWORD PTR end_idx$[rsp]
  00597	48 39 84 24 b0
	01 00 00	 cmp	 QWORD PTR idx$[rsp], rax
  0059f	0f 8f 39 0e 00
	00		 jg	 $LN64@parse_obje
  005a5	83 7c 24 30 01	 cmp	 DWORD PTR kind$[rsp], 1
  005aa	75 1f		 jne	 SHORT $LN109@parse_obje
  005ac	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR idx$[rsp]
  005b4	48 8b 4c 24 70	 mov	 rcx, QWORD PTR str$[rsp]
  005b9	48 03 c8	 add	 rcx, rax
  005bc	48 8b c1	 mov	 rax, rcx
  005bf	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  005c2	89 84 24 e0 00
	00 00		 mov	 DWORD PTR tv264[rsp], eax
  005c9	eb 46		 jmp	 SHORT $LN110@parse_obje
$LN109@parse_obje:
  005cb	83 7c 24 30 02	 cmp	 DWORD PTR kind$[rsp], 2
  005d0	75 1a		 jne	 SHORT $LN107@parse_obje
  005d2	48 8b 44 24 70	 mov	 rax, QWORD PTR str$[rsp]
  005d7	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  005df	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  005e3	89 84 24 e4 00
	00 00		 mov	 DWORD PTR tv263[rsp], eax
  005ea	eb 17		 jmp	 SHORT $LN108@parse_obje
$LN107@parse_obje:
  005ec	48 8b 44 24 70	 mov	 rax, QWORD PTR str$[rsp]
  005f1	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  005f9	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  005fc	89 84 24 e4 00
	00 00		 mov	 DWORD PTR tv263[rsp], eax
$LN108@parse_obje:
  00603	8b 84 24 e4 00
	00 00		 mov	 eax, DWORD PTR tv263[rsp]
  0060a	89 84 24 e0 00
	00 00		 mov	 DWORD PTR tv264[rsp], eax
$LN110@parse_obje:
  00611	83 bc 24 e0 00
	00 00 7d	 cmp	 DWORD PTR tv264[rsp], 125 ; 0000007dH
  00619	0f 84 bf 0d 00
	00		 je	 $LN64@parse_obje
$LN63@parse_obje:

; 634  :         while (idx <= end_idx) {

  0061f	48 8b 44 24 48	 mov	 rax, QWORD PTR end_idx$[rsp]
  00624	48 39 84 24 b0
	01 00 00	 cmp	 QWORD PTR idx$[rsp], rax
  0062c	0f 8f ac 0d 00
	00		 jg	 $LN62@parse_obje

; 635  :             PyObject *memokey;
; 636  : 
; 637  :             /* read key */
; 638  :             if (PyUnicode_READ(kind, str, idx) != '"') {

  00632	83 7c 24 30 01	 cmp	 DWORD PTR kind$[rsp], 1
  00637	75 1f		 jne	 SHORT $LN113@parse_obje
  00639	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR idx$[rsp]
  00641	48 8b 4c 24 70	 mov	 rcx, QWORD PTR str$[rsp]
  00646	48 03 c8	 add	 rcx, rax
  00649	48 8b c1	 mov	 rax, rcx
  0064c	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0064f	89 84 24 e8 00
	00 00		 mov	 DWORD PTR tv277[rsp], eax
  00656	eb 46		 jmp	 SHORT $LN114@parse_obje
$LN113@parse_obje:
  00658	83 7c 24 30 02	 cmp	 DWORD PTR kind$[rsp], 2
  0065d	75 1a		 jne	 SHORT $LN111@parse_obje
  0065f	48 8b 44 24 70	 mov	 rax, QWORD PTR str$[rsp]
  00664	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  0066c	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  00670	89 84 24 ec 00
	00 00		 mov	 DWORD PTR tv276[rsp], eax
  00677	eb 17		 jmp	 SHORT $LN112@parse_obje
$LN111@parse_obje:
  00679	48 8b 44 24 70	 mov	 rax, QWORD PTR str$[rsp]
  0067e	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  00686	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  00689	89 84 24 ec 00
	00 00		 mov	 DWORD PTR tv276[rsp], eax
$LN112@parse_obje:
  00690	8b 84 24 ec 00
	00 00		 mov	 eax, DWORD PTR tv276[rsp]
  00697	89 84 24 e8 00
	00 00		 mov	 DWORD PTR tv277[rsp], eax
$LN114@parse_obje:
  0069e	83 bc 24 e8 00
	00 00 22	 cmp	 DWORD PTR tv277[rsp], 34 ; 00000022H
  006a6	74 21		 je	 SHORT $LN61@parse_obje

; 639  :                 raise_errmsg("Expecting property name enclosed in double quotes", pystr, idx);

  006a8	4c 8b 84 24 b0
	01 00 00	 mov	 r8, QWORD PTR idx$[rsp]
  006b0	48 8b 94 24 a8
	01 00 00	 mov	 rdx, QWORD PTR pystr$[rsp]
  006b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0DC@COPDFPMD@Expecting?5property?5name?5enclosed@
  006bf	e8 00 00 00 00	 call	 raise_errmsg

; 640  :                 goto bail;

  006c4	e9 52 0e 00 00	 jmp	 $bail$21231
$LN61@parse_obje:

; 641  :             }
; 642  :             key = scanstring_unicode(pystr, idx + 1, strict, &next_idx);

  006c9	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR idx$[rsp]
  006d1	48 ff c0	 inc	 rax
  006d4	4c 8d 4c 24 58	 lea	 r9, QWORD PTR next_idx$[rsp]
  006d9	44 8b 44 24 40	 mov	 r8d, DWORD PTR strict$[rsp]
  006de	48 8b d0	 mov	 rdx, rax
  006e1	48 8b 8c 24 a8
	01 00 00	 mov	 rcx, QWORD PTR pystr$[rsp]
  006e9	e8 00 00 00 00	 call	 scanstring_unicode
  006ee	48 89 44 24 50	 mov	 QWORD PTR key$[rsp], rax

; 643  :             if (key == NULL)

  006f3	48 83 7c 24 50
	00		 cmp	 QWORD PTR key$[rsp], 0
  006f9	75 05		 jne	 SHORT $LN60@parse_obje

; 644  :                 goto bail;

  006fb	e9 1b 0e 00 00	 jmp	 $bail$21231
$LN60@parse_obje:

; 645  :             memokey = PyDict_GetItem(s->memo, key);

  00700	48 8b 54 24 50	 mov	 rdx, QWORD PTR key$[rsp]
  00705	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  0070d	48 8b 88 90 00
	00 00		 mov	 rcx, QWORD PTR [rax+144]
  00714	e8 00 00 00 00	 call	 PyDict_GetItem
  00719	48 89 44 24 78	 mov	 QWORD PTR memokey$21224[rsp], rax

; 646  :             if (memokey != NULL) {

  0071e	48 83 7c 24 78
	00		 cmp	 QWORD PTR memokey$21224[rsp], 0
  00724	74 20		 je	 SHORT $LN59@parse_obje

; 647  :                 Py_INCREF(memokey);

  00726	48 8b 4c 24 78	 mov	 rcx, QWORD PTR memokey$21224[rsp]
  0072b	e8 00 00 00 00	 call	 _Py_IncRef

; 648  :                 Py_DECREF(key);

  00730	48 8b 4c 24 50	 mov	 rcx, QWORD PTR key$[rsp]
  00735	e8 00 00 00 00	 call	 _Py_DecRef

; 649  :                 key = memokey;

  0073a	48 8b 44 24 78	 mov	 rax, QWORD PTR memokey$21224[rsp]
  0073f	48 89 44 24 50	 mov	 QWORD PTR key$[rsp], rax

; 650  :             }
; 651  :             else {

  00744	eb 27		 jmp	 SHORT $LN58@parse_obje
$LN59@parse_obje:

; 652  :                 if (PyDict_SetItem(s->memo, key, key) < 0)

  00746	4c 8b 44 24 50	 mov	 r8, QWORD PTR key$[rsp]
  0074b	48 8b 54 24 50	 mov	 rdx, QWORD PTR key$[rsp]
  00750	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00758	48 8b 88 90 00
	00 00		 mov	 rcx, QWORD PTR [rax+144]
  0075f	e8 00 00 00 00	 call	 PyDict_SetItem
  00764	85 c0		 test	 eax, eax
  00766	7d 05		 jge	 SHORT $LN57@parse_obje

; 653  :                     goto bail;

  00768	e9 ae 0d 00 00	 jmp	 $bail$21231
$LN57@parse_obje:
$LN58@parse_obje:

; 654  :             }
; 655  :             idx = next_idx;

  0076d	48 8b 44 24 58	 mov	 rax, QWORD PTR next_idx$[rsp]
  00772	48 89 84 24 b0
	01 00 00	 mov	 QWORD PTR idx$[rsp], rax
$LN56@parse_obje:

; 656  : 
; 657  :             /* skip whitespace between key and : delimiter, read :, skip whitespace */
; 658  :             while (idx <= end_idx && IS_WHITESPACE(PyUnicode_READ(kind, str, idx))) idx++;

  0077a	48 8b 44 24 48	 mov	 rax, QWORD PTR end_idx$[rsp]
  0077f	48 39 84 24 b0
	01 00 00	 cmp	 QWORD PTR idx$[rsp], rax
  00787	0f 8f f8 01 00
	00		 jg	 $LN55@parse_obje
  0078d	83 7c 24 30 01	 cmp	 DWORD PTR kind$[rsp], 1
  00792	75 1f		 jne	 SHORT $LN117@parse_obje
  00794	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR idx$[rsp]
  0079c	48 8b 4c 24 70	 mov	 rcx, QWORD PTR str$[rsp]
  007a1	48 03 c8	 add	 rcx, rax
  007a4	48 8b c1	 mov	 rax, rcx
  007a7	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  007aa	89 84 24 f0 00
	00 00		 mov	 DWORD PTR tv313[rsp], eax
  007b1	eb 46		 jmp	 SHORT $LN118@parse_obje
$LN117@parse_obje:
  007b3	83 7c 24 30 02	 cmp	 DWORD PTR kind$[rsp], 2
  007b8	75 1a		 jne	 SHORT $LN115@parse_obje
  007ba	48 8b 44 24 70	 mov	 rax, QWORD PTR str$[rsp]
  007bf	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  007c7	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  007cb	89 84 24 f4 00
	00 00		 mov	 DWORD PTR tv312[rsp], eax
  007d2	eb 17		 jmp	 SHORT $LN116@parse_obje
$LN115@parse_obje:
  007d4	48 8b 44 24 70	 mov	 rax, QWORD PTR str$[rsp]
  007d9	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  007e1	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  007e4	89 84 24 f4 00
	00 00		 mov	 DWORD PTR tv312[rsp], eax
$LN116@parse_obje:
  007eb	8b 84 24 f4 00
	00 00		 mov	 eax, DWORD PTR tv312[rsp]
  007f2	89 84 24 f0 00
	00 00		 mov	 DWORD PTR tv313[rsp], eax
$LN118@parse_obje:
  007f9	83 bc 24 f0 00
	00 00 20	 cmp	 DWORD PTR tv313[rsp], 32 ; 00000020H
  00801	0f 84 66 01 00
	00		 je	 $LN54@parse_obje
  00807	83 7c 24 30 01	 cmp	 DWORD PTR kind$[rsp], 1
  0080c	75 1f		 jne	 SHORT $LN121@parse_obje
  0080e	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR idx$[rsp]
  00816	48 8b 4c 24 70	 mov	 rcx, QWORD PTR str$[rsp]
  0081b	48 03 c8	 add	 rcx, rax
  0081e	48 8b c1	 mov	 rax, rcx
  00821	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00824	89 84 24 f8 00
	00 00		 mov	 DWORD PTR tv325[rsp], eax
  0082b	eb 46		 jmp	 SHORT $LN122@parse_obje
$LN121@parse_obje:
  0082d	83 7c 24 30 02	 cmp	 DWORD PTR kind$[rsp], 2
  00832	75 1a		 jne	 SHORT $LN119@parse_obje
  00834	48 8b 44 24 70	 mov	 rax, QWORD PTR str$[rsp]
  00839	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  00841	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  00845	89 84 24 fc 00
	00 00		 mov	 DWORD PTR tv324[rsp], eax
  0084c	eb 17		 jmp	 SHORT $LN120@parse_obje
$LN119@parse_obje:
  0084e	48 8b 44 24 70	 mov	 rax, QWORD PTR str$[rsp]
  00853	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  0085b	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  0085e	89 84 24 fc 00
	00 00		 mov	 DWORD PTR tv324[rsp], eax
$LN120@parse_obje:
  00865	8b 84 24 fc 00
	00 00		 mov	 eax, DWORD PTR tv324[rsp]
  0086c	89 84 24 f8 00
	00 00		 mov	 DWORD PTR tv325[rsp], eax
$LN122@parse_obje:
  00873	83 bc 24 f8 00
	00 00 09	 cmp	 DWORD PTR tv325[rsp], 9
  0087b	0f 84 ec 00 00
	00		 je	 $LN54@parse_obje
  00881	83 7c 24 30 01	 cmp	 DWORD PTR kind$[rsp], 1
  00886	75 1f		 jne	 SHORT $LN125@parse_obje
  00888	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR idx$[rsp]
  00890	48 8b 4c 24 70	 mov	 rcx, QWORD PTR str$[rsp]
  00895	48 03 c8	 add	 rcx, rax
  00898	48 8b c1	 mov	 rax, rcx
  0089b	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0089e	89 84 24 00 01
	00 00		 mov	 DWORD PTR tv337[rsp], eax
  008a5	eb 46		 jmp	 SHORT $LN126@parse_obje
$LN125@parse_obje:
  008a7	83 7c 24 30 02	 cmp	 DWORD PTR kind$[rsp], 2
  008ac	75 1a		 jne	 SHORT $LN123@parse_obje
  008ae	48 8b 44 24 70	 mov	 rax, QWORD PTR str$[rsp]
  008b3	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  008bb	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  008bf	89 84 24 04 01
	00 00		 mov	 DWORD PTR tv336[rsp], eax
  008c6	eb 17		 jmp	 SHORT $LN124@parse_obje
$LN123@parse_obje:
  008c8	48 8b 44 24 70	 mov	 rax, QWORD PTR str$[rsp]
  008cd	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  008d5	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  008d8	89 84 24 04 01
	00 00		 mov	 DWORD PTR tv336[rsp], eax
$LN124@parse_obje:
  008df	8b 84 24 04 01
	00 00		 mov	 eax, DWORD PTR tv336[rsp]
  008e6	89 84 24 00 01
	00 00		 mov	 DWORD PTR tv337[rsp], eax
$LN126@parse_obje:
  008ed	83 bc 24 00 01
	00 00 0a	 cmp	 DWORD PTR tv337[rsp], 10
  008f5	74 76		 je	 SHORT $LN54@parse_obje
  008f7	83 7c 24 30 01	 cmp	 DWORD PTR kind$[rsp], 1
  008fc	75 1f		 jne	 SHORT $LN129@parse_obje
  008fe	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR idx$[rsp]
  00906	48 8b 4c 24 70	 mov	 rcx, QWORD PTR str$[rsp]
  0090b	48 03 c8	 add	 rcx, rax
  0090e	48 8b c1	 mov	 rax, rcx
  00911	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00914	89 84 24 08 01
	00 00		 mov	 DWORD PTR tv349[rsp], eax
  0091b	eb 46		 jmp	 SHORT $LN130@parse_obje
$LN129@parse_obje:
  0091d	83 7c 24 30 02	 cmp	 DWORD PTR kind$[rsp], 2
  00922	75 1a		 jne	 SHORT $LN127@parse_obje
  00924	48 8b 44 24 70	 mov	 rax, QWORD PTR str$[rsp]
  00929	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  00931	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  00935	89 84 24 0c 01
	00 00		 mov	 DWORD PTR tv348[rsp], eax
  0093c	eb 17		 jmp	 SHORT $LN128@parse_obje
$LN127@parse_obje:
  0093e	48 8b 44 24 70	 mov	 rax, QWORD PTR str$[rsp]
  00943	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  0094b	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  0094e	89 84 24 0c 01
	00 00		 mov	 DWORD PTR tv348[rsp], eax
$LN128@parse_obje:
  00955	8b 84 24 0c 01
	00 00		 mov	 eax, DWORD PTR tv348[rsp]
  0095c	89 84 24 08 01
	00 00		 mov	 DWORD PTR tv349[rsp], eax
$LN130@parse_obje:
  00963	83 bc 24 08 01
	00 00 0d	 cmp	 DWORD PTR tv349[rsp], 13
  0096b	75 18		 jne	 SHORT $LN55@parse_obje
$LN54@parse_obje:
  0096d	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR idx$[rsp]
  00975	48 ff c0	 inc	 rax
  00978	48 89 84 24 b0
	01 00 00	 mov	 QWORD PTR idx$[rsp], rax
  00980	e9 f5 fd ff ff	 jmp	 $LN56@parse_obje
$LN55@parse_obje:

; 659  :             if (idx > end_idx || PyUnicode_READ(kind, str, idx) != ':') {

  00985	48 8b 44 24 48	 mov	 rax, QWORD PTR end_idx$[rsp]
  0098a	48 39 84 24 b0
	01 00 00	 cmp	 QWORD PTR idx$[rsp], rax
  00992	7f 76		 jg	 SHORT $LN52@parse_obje
  00994	83 7c 24 30 01	 cmp	 DWORD PTR kind$[rsp], 1
  00999	75 1f		 jne	 SHORT $LN133@parse_obje
  0099b	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR idx$[rsp]
  009a3	48 8b 4c 24 70	 mov	 rcx, QWORD PTR str$[rsp]
  009a8	48 03 c8	 add	 rcx, rax
  009ab	48 8b c1	 mov	 rax, rcx
  009ae	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  009b1	89 84 24 10 01
	00 00		 mov	 DWORD PTR tv363[rsp], eax
  009b8	eb 46		 jmp	 SHORT $LN134@parse_obje
$LN133@parse_obje:
  009ba	83 7c 24 30 02	 cmp	 DWORD PTR kind$[rsp], 2
  009bf	75 1a		 jne	 SHORT $LN131@parse_obje
  009c1	48 8b 44 24 70	 mov	 rax, QWORD PTR str$[rsp]
  009c6	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  009ce	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  009d2	89 84 24 14 01
	00 00		 mov	 DWORD PTR tv362[rsp], eax
  009d9	eb 17		 jmp	 SHORT $LN132@parse_obje
$LN131@parse_obje:
  009db	48 8b 44 24 70	 mov	 rax, QWORD PTR str$[rsp]
  009e0	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  009e8	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  009eb	89 84 24 14 01
	00 00		 mov	 DWORD PTR tv362[rsp], eax
$LN132@parse_obje:
  009f2	8b 84 24 14 01
	00 00		 mov	 eax, DWORD PTR tv362[rsp]
  009f9	89 84 24 10 01
	00 00		 mov	 DWORD PTR tv363[rsp], eax
$LN134@parse_obje:
  00a00	83 bc 24 10 01
	00 00 3a	 cmp	 DWORD PTR tv363[rsp], 58 ; 0000003aH
  00a08	74 21		 je	 SHORT $LN53@parse_obje
$LN52@parse_obje:

; 660  :                 raise_errmsg("Expecting ':' delimiter", pystr, idx);

  00a0a	4c 8b 84 24 b0
	01 00 00	 mov	 r8, QWORD PTR idx$[rsp]
  00a12	48 8b 94 24 a8
	01 00 00	 mov	 rdx, QWORD PTR pystr$[rsp]
  00a1a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@FOFOMBIN@Expecting?5?8?3?8?5delimiter?$AA@
  00a21	e8 00 00 00 00	 call	 raise_errmsg

; 661  :                 goto bail;

  00a26	e9 f0 0a 00 00	 jmp	 $bail$21231
$LN53@parse_obje:

; 662  :             }
; 663  :             idx++;

  00a2b	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR idx$[rsp]
  00a33	48 ff c0	 inc	 rax
  00a36	48 89 84 24 b0
	01 00 00	 mov	 QWORD PTR idx$[rsp], rax
$LN51@parse_obje:

; 664  :             while (idx <= end_idx && IS_WHITESPACE(PyUnicode_READ(kind, str, idx))) idx++;

  00a3e	48 8b 44 24 48	 mov	 rax, QWORD PTR end_idx$[rsp]
  00a43	48 39 84 24 b0
	01 00 00	 cmp	 QWORD PTR idx$[rsp], rax
  00a4b	0f 8f f8 01 00
	00		 jg	 $LN50@parse_obje
  00a51	83 7c 24 30 01	 cmp	 DWORD PTR kind$[rsp], 1
  00a56	75 1f		 jne	 SHORT $LN137@parse_obje
  00a58	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR idx$[rsp]
  00a60	48 8b 4c 24 70	 mov	 rcx, QWORD PTR str$[rsp]
  00a65	48 03 c8	 add	 rcx, rax
  00a68	48 8b c1	 mov	 rax, rcx
  00a6b	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00a6e	89 84 24 18 01
	00 00		 mov	 DWORD PTR tv380[rsp], eax
  00a75	eb 46		 jmp	 SHORT $LN138@parse_obje
$LN137@parse_obje:
  00a77	83 7c 24 30 02	 cmp	 DWORD PTR kind$[rsp], 2
  00a7c	75 1a		 jne	 SHORT $LN135@parse_obje
  00a7e	48 8b 44 24 70	 mov	 rax, QWORD PTR str$[rsp]
  00a83	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  00a8b	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  00a8f	89 84 24 1c 01
	00 00		 mov	 DWORD PTR tv379[rsp], eax
  00a96	eb 17		 jmp	 SHORT $LN136@parse_obje
$LN135@parse_obje:
  00a98	48 8b 44 24 70	 mov	 rax, QWORD PTR str$[rsp]
  00a9d	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  00aa5	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  00aa8	89 84 24 1c 01
	00 00		 mov	 DWORD PTR tv379[rsp], eax
$LN136@parse_obje:
  00aaf	8b 84 24 1c 01
	00 00		 mov	 eax, DWORD PTR tv379[rsp]
  00ab6	89 84 24 18 01
	00 00		 mov	 DWORD PTR tv380[rsp], eax
$LN138@parse_obje:
  00abd	83 bc 24 18 01
	00 00 20	 cmp	 DWORD PTR tv380[rsp], 32 ; 00000020H
  00ac5	0f 84 66 01 00
	00		 je	 $LN49@parse_obje
  00acb	83 7c 24 30 01	 cmp	 DWORD PTR kind$[rsp], 1
  00ad0	75 1f		 jne	 SHORT $LN141@parse_obje
  00ad2	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR idx$[rsp]
  00ada	48 8b 4c 24 70	 mov	 rcx, QWORD PTR str$[rsp]
  00adf	48 03 c8	 add	 rcx, rax
  00ae2	48 8b c1	 mov	 rax, rcx
  00ae5	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00ae8	89 84 24 20 01
	00 00		 mov	 DWORD PTR tv392[rsp], eax
  00aef	eb 46		 jmp	 SHORT $LN142@parse_obje
$LN141@parse_obje:
  00af1	83 7c 24 30 02	 cmp	 DWORD PTR kind$[rsp], 2
  00af6	75 1a		 jne	 SHORT $LN139@parse_obje
  00af8	48 8b 44 24 70	 mov	 rax, QWORD PTR str$[rsp]
  00afd	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  00b05	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  00b09	89 84 24 24 01
	00 00		 mov	 DWORD PTR tv391[rsp], eax
  00b10	eb 17		 jmp	 SHORT $LN140@parse_obje
$LN139@parse_obje:
  00b12	48 8b 44 24 70	 mov	 rax, QWORD PTR str$[rsp]
  00b17	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  00b1f	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  00b22	89 84 24 24 01
	00 00		 mov	 DWORD PTR tv391[rsp], eax
$LN140@parse_obje:
  00b29	8b 84 24 24 01
	00 00		 mov	 eax, DWORD PTR tv391[rsp]
  00b30	89 84 24 20 01
	00 00		 mov	 DWORD PTR tv392[rsp], eax
$LN142@parse_obje:
  00b37	83 bc 24 20 01
	00 00 09	 cmp	 DWORD PTR tv392[rsp], 9
  00b3f	0f 84 ec 00 00
	00		 je	 $LN49@parse_obje
  00b45	83 7c 24 30 01	 cmp	 DWORD PTR kind$[rsp], 1
  00b4a	75 1f		 jne	 SHORT $LN145@parse_obje
  00b4c	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR idx$[rsp]
  00b54	48 8b 4c 24 70	 mov	 rcx, QWORD PTR str$[rsp]
  00b59	48 03 c8	 add	 rcx, rax
  00b5c	48 8b c1	 mov	 rax, rcx
  00b5f	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00b62	89 84 24 28 01
	00 00		 mov	 DWORD PTR tv404[rsp], eax
  00b69	eb 46		 jmp	 SHORT $LN146@parse_obje
$LN145@parse_obje:
  00b6b	83 7c 24 30 02	 cmp	 DWORD PTR kind$[rsp], 2
  00b70	75 1a		 jne	 SHORT $LN143@parse_obje
  00b72	48 8b 44 24 70	 mov	 rax, QWORD PTR str$[rsp]
  00b77	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  00b7f	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  00b83	89 84 24 2c 01
	00 00		 mov	 DWORD PTR tv403[rsp], eax
  00b8a	eb 17		 jmp	 SHORT $LN144@parse_obje
$LN143@parse_obje:
  00b8c	48 8b 44 24 70	 mov	 rax, QWORD PTR str$[rsp]
  00b91	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  00b99	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  00b9c	89 84 24 2c 01
	00 00		 mov	 DWORD PTR tv403[rsp], eax
$LN144@parse_obje:
  00ba3	8b 84 24 2c 01
	00 00		 mov	 eax, DWORD PTR tv403[rsp]
  00baa	89 84 24 28 01
	00 00		 mov	 DWORD PTR tv404[rsp], eax
$LN146@parse_obje:
  00bb1	83 bc 24 28 01
	00 00 0a	 cmp	 DWORD PTR tv404[rsp], 10
  00bb9	74 76		 je	 SHORT $LN49@parse_obje
  00bbb	83 7c 24 30 01	 cmp	 DWORD PTR kind$[rsp], 1
  00bc0	75 1f		 jne	 SHORT $LN149@parse_obje
  00bc2	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR idx$[rsp]
  00bca	48 8b 4c 24 70	 mov	 rcx, QWORD PTR str$[rsp]
  00bcf	48 03 c8	 add	 rcx, rax
  00bd2	48 8b c1	 mov	 rax, rcx
  00bd5	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00bd8	89 84 24 30 01
	00 00		 mov	 DWORD PTR tv416[rsp], eax
  00bdf	eb 46		 jmp	 SHORT $LN150@parse_obje
$LN149@parse_obje:
  00be1	83 7c 24 30 02	 cmp	 DWORD PTR kind$[rsp], 2
  00be6	75 1a		 jne	 SHORT $LN147@parse_obje
  00be8	48 8b 44 24 70	 mov	 rax, QWORD PTR str$[rsp]
  00bed	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  00bf5	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  00bf9	89 84 24 34 01
	00 00		 mov	 DWORD PTR tv415[rsp], eax
  00c00	eb 17		 jmp	 SHORT $LN148@parse_obje
$LN147@parse_obje:
  00c02	48 8b 44 24 70	 mov	 rax, QWORD PTR str$[rsp]
  00c07	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  00c0f	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  00c12	89 84 24 34 01
	00 00		 mov	 DWORD PTR tv415[rsp], eax
$LN148@parse_obje:
  00c19	8b 84 24 34 01
	00 00		 mov	 eax, DWORD PTR tv415[rsp]
  00c20	89 84 24 30 01
	00 00		 mov	 DWORD PTR tv416[rsp], eax
$LN150@parse_obje:
  00c27	83 bc 24 30 01
	00 00 0d	 cmp	 DWORD PTR tv416[rsp], 13
  00c2f	75 18		 jne	 SHORT $LN50@parse_obje
$LN49@parse_obje:
  00c31	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR idx$[rsp]
  00c39	48 ff c0	 inc	 rax
  00c3c	48 89 84 24 b0
	01 00 00	 mov	 QWORD PTR idx$[rsp], rax
  00c44	e9 f5 fd ff ff	 jmp	 $LN51@parse_obje
$LN50@parse_obje:

; 665  : 
; 666  :             /* read any JSON term */
; 667  :             val = scan_once_unicode(s, pystr, idx, &next_idx);

  00c49	4c 8d 4c 24 58	 lea	 r9, QWORD PTR next_idx$[rsp]
  00c4e	4c 8b 84 24 b0
	01 00 00	 mov	 r8, QWORD PTR idx$[rsp]
  00c56	48 8b 94 24 a8
	01 00 00	 mov	 rdx, QWORD PTR pystr$[rsp]
  00c5e	48 8b 8c 24 a0
	01 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  00c66	e8 00 00 00 00	 call	 scan_once_unicode
  00c6b	48 89 44 24 60	 mov	 QWORD PTR val$[rsp], rax

; 668  :             if (val == NULL)

  00c70	48 83 7c 24 60
	00		 cmp	 QWORD PTR val$[rsp], 0
  00c76	75 05		 jne	 SHORT $LN48@parse_obje

; 669  :                 goto bail;

  00c78	e9 9e 08 00 00	 jmp	 $bail$21231
$LN48@parse_obje:

; 670  : 
; 671  :             if (has_pairs_hook) {

  00c7d	83 7c 24 68 00	 cmp	 DWORD PTR has_pairs_hook$[rsp], 0
  00c82	0f 84 1d 01 00
	00		 je	 $LN47@parse_obje

; 672  :                 PyObject *item = PyTuple_Pack(2, key, val);

  00c88	4c 8b 44 24 60	 mov	 r8, QWORD PTR val$[rsp]
  00c8d	48 8b 54 24 50	 mov	 rdx, QWORD PTR key$[rsp]
  00c92	b9 02 00 00 00	 mov	 ecx, 2
  00c97	e8 00 00 00 00	 call	 PyTuple_Pack
  00c9c	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR item$21290[rsp], rax

; 673  :                 if (item == NULL)

  00ca4	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR item$21290[rsp], 0
  00cad	75 05		 jne	 SHORT $LN46@parse_obje

; 674  :                     goto bail;

  00caf	e9 67 08 00 00	 jmp	 $bail$21231
$LN46@parse_obje:
$LN45@parse_obje:

; 675  :                 Py_CLEAR(key);

  00cb4	48 83 7c 24 50
	00		 cmp	 QWORD PTR key$[rsp], 0
  00cba	74 4d		 je	 SHORT $LN42@parse_obje
  00cbc	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00cc4	4c 8b 4c 24 50	 mov	 r9, QWORD PTR key$[rsp]
  00cc9	41 b8 a3 02 00
	00		 mov	 r8d, 675		; 000002a3H
  00ccf	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@BIGPLMIN@?4?4?2Modules?2_json?4c?$AA@
  00cd6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@PKFBKFJI@_parse_object_unicode?$AA@
  00cdd	e8 00 00 00 00	 call	 _PyParallel_Guard
  00ce2	85 c0		 test	 eax, eax
  00ce4	75 23		 jne	 SHORT $LN42@parse_obje
  00ce6	48 8b 44 24 50	 mov	 rax, QWORD PTR key$[rsp]
  00ceb	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR _py_tmp$21298[rsp], rax
  00cf3	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR key$[rsp], 0
  00cfc	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR _py_tmp$21298[rsp]
  00d04	e8 00 00 00 00	 call	 _Py_DecRef
$LN42@parse_obje:
  00d09	33 c0		 xor	 eax, eax
  00d0b	85 c0		 test	 eax, eax
  00d0d	75 a5		 jne	 SHORT $LN45@parse_obje
$LN41@parse_obje:

; 676  :                 Py_CLEAR(val);

  00d0f	48 83 7c 24 60
	00		 cmp	 QWORD PTR val$[rsp], 0
  00d15	74 4d		 je	 SHORT $LN38@parse_obje
  00d17	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00d1f	4c 8b 4c 24 60	 mov	 r9, QWORD PTR val$[rsp]
  00d24	41 b8 a4 02 00
	00		 mov	 r8d, 676		; 000002a4H
  00d2a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@BIGPLMIN@?4?4?2Modules?2_json?4c?$AA@
  00d31	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@PKFBKFJI@_parse_object_unicode?$AA@
  00d38	e8 00 00 00 00	 call	 _PyParallel_Guard
  00d3d	85 c0		 test	 eax, eax
  00d3f	75 23		 jne	 SHORT $LN38@parse_obje
  00d41	48 8b 44 24 60	 mov	 rax, QWORD PTR val$[rsp]
  00d46	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR _py_tmp$21306[rsp], rax
  00d4e	48 c7 44 24 60
	00 00 00 00	 mov	 QWORD PTR val$[rsp], 0
  00d57	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR _py_tmp$21306[rsp]
  00d5f	e8 00 00 00 00	 call	 _Py_DecRef
$LN38@parse_obje:
  00d64	33 c0		 xor	 eax, eax
  00d66	85 c0		 test	 eax, eax
  00d68	75 a5		 jne	 SHORT $LN41@parse_obje

; 677  :                 if (PyList_Append(rval, item) == -1) {

  00d6a	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR item$21290[rsp]
  00d72	48 8b 4c 24 38	 mov	 rcx, QWORD PTR rval$[rsp]
  00d77	e8 00 00 00 00	 call	 PyList_Append
  00d7c	83 f8 ff	 cmp	 eax, -1
  00d7f	75 12		 jne	 SHORT $LN37@parse_obje

; 678  :                     Py_DECREF(item);

  00d81	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR item$21290[rsp]
  00d89	e8 00 00 00 00	 call	 _Py_DecRef

; 679  :                     goto bail;

  00d8e	e9 88 07 00 00	 jmp	 $bail$21231
$LN37@parse_obje:

; 680  :                 }
; 681  :                 Py_DECREF(item);

  00d93	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR item$21290[rsp]
  00d9b	e8 00 00 00 00	 call	 _Py_DecRef

; 682  :             }
; 683  :             else {

  00da0	e9 d3 00 00 00	 jmp	 $LN36@parse_obje
$LN47@parse_obje:

; 684  :                 if (PyDict_SetItem(rval, key, val) < 0)

  00da5	4c 8b 44 24 60	 mov	 r8, QWORD PTR val$[rsp]
  00daa	48 8b 54 24 50	 mov	 rdx, QWORD PTR key$[rsp]
  00daf	48 8b 4c 24 38	 mov	 rcx, QWORD PTR rval$[rsp]
  00db4	e8 00 00 00 00	 call	 PyDict_SetItem
  00db9	85 c0		 test	 eax, eax
  00dbb	7d 05		 jge	 SHORT $LN35@parse_obje

; 685  :                     goto bail;

  00dbd	e9 59 07 00 00	 jmp	 $bail$21231
$LN35@parse_obje:
$LN34@parse_obje:

; 686  :                 Py_CLEAR(key);

  00dc2	48 83 7c 24 50
	00		 cmp	 QWORD PTR key$[rsp], 0
  00dc8	74 4d		 je	 SHORT $LN31@parse_obje
  00dca	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00dd2	4c 8b 4c 24 50	 mov	 r9, QWORD PTR key$[rsp]
  00dd7	41 b8 ae 02 00
	00		 mov	 r8d, 686		; 000002aeH
  00ddd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@BIGPLMIN@?4?4?2Modules?2_json?4c?$AA@
  00de4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@PKFBKFJI@_parse_object_unicode?$AA@
  00deb	e8 00 00 00 00	 call	 _PyParallel_Guard
  00df0	85 c0		 test	 eax, eax
  00df2	75 23		 jne	 SHORT $LN31@parse_obje
  00df4	48 8b 44 24 50	 mov	 rax, QWORD PTR key$[rsp]
  00df9	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR _py_tmp$21319[rsp], rax
  00e01	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR key$[rsp], 0
  00e0a	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR _py_tmp$21319[rsp]
  00e12	e8 00 00 00 00	 call	 _Py_DecRef
$LN31@parse_obje:
  00e17	33 c0		 xor	 eax, eax
  00e19	85 c0		 test	 eax, eax
  00e1b	75 a5		 jne	 SHORT $LN34@parse_obje
$LN30@parse_obje:

; 687  :                 Py_CLEAR(val);

  00e1d	48 83 7c 24 60
	00		 cmp	 QWORD PTR val$[rsp], 0
  00e23	74 4d		 je	 SHORT $LN27@parse_obje
  00e25	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00e2d	4c 8b 4c 24 60	 mov	 r9, QWORD PTR val$[rsp]
  00e32	41 b8 af 02 00
	00		 mov	 r8d, 687		; 000002afH
  00e38	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@BIGPLMIN@?4?4?2Modules?2_json?4c?$AA@
  00e3f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@PKFBKFJI@_parse_object_unicode?$AA@
  00e46	e8 00 00 00 00	 call	 _PyParallel_Guard
  00e4b	85 c0		 test	 eax, eax
  00e4d	75 23		 jne	 SHORT $LN27@parse_obje
  00e4f	48 8b 44 24 60	 mov	 rax, QWORD PTR val$[rsp]
  00e54	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR _py_tmp$21327[rsp], rax
  00e5c	48 c7 44 24 60
	00 00 00 00	 mov	 QWORD PTR val$[rsp], 0
  00e65	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR _py_tmp$21327[rsp]
  00e6d	e8 00 00 00 00	 call	 _Py_DecRef
$LN27@parse_obje:
  00e72	33 c0		 xor	 eax, eax
  00e74	85 c0		 test	 eax, eax
  00e76	75 a5		 jne	 SHORT $LN30@parse_obje
$LN36@parse_obje:

; 688  :             }
; 689  :             idx = next_idx;

  00e78	48 8b 44 24 58	 mov	 rax, QWORD PTR next_idx$[rsp]
  00e7d	48 89 84 24 b0
	01 00 00	 mov	 QWORD PTR idx$[rsp], rax
$LN26@parse_obje:

; 690  : 
; 691  :             /* skip whitespace before } or , */
; 692  :             while (idx <= end_idx && IS_WHITESPACE(PyUnicode_READ(kind, str, idx))) idx++;

  00e85	48 8b 44 24 48	 mov	 rax, QWORD PTR end_idx$[rsp]
  00e8a	48 39 84 24 b0
	01 00 00	 cmp	 QWORD PTR idx$[rsp], rax
  00e92	0f 8f f8 01 00
	00		 jg	 $LN25@parse_obje
  00e98	83 7c 24 30 01	 cmp	 DWORD PTR kind$[rsp], 1
  00e9d	75 1f		 jne	 SHORT $LN153@parse_obje
  00e9f	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR idx$[rsp]
  00ea7	48 8b 4c 24 70	 mov	 rcx, QWORD PTR str$[rsp]
  00eac	48 03 c8	 add	 rcx, rax
  00eaf	48 8b c1	 mov	 rax, rcx
  00eb2	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00eb5	89 84 24 38 01
	00 00		 mov	 DWORD PTR tv493[rsp], eax
  00ebc	eb 46		 jmp	 SHORT $LN154@parse_obje
$LN153@parse_obje:
  00ebe	83 7c 24 30 02	 cmp	 DWORD PTR kind$[rsp], 2
  00ec3	75 1a		 jne	 SHORT $LN151@parse_obje
  00ec5	48 8b 44 24 70	 mov	 rax, QWORD PTR str$[rsp]
  00eca	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  00ed2	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  00ed6	89 84 24 3c 01
	00 00		 mov	 DWORD PTR tv492[rsp], eax
  00edd	eb 17		 jmp	 SHORT $LN152@parse_obje
$LN151@parse_obje:
  00edf	48 8b 44 24 70	 mov	 rax, QWORD PTR str$[rsp]
  00ee4	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  00eec	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  00eef	89 84 24 3c 01
	00 00		 mov	 DWORD PTR tv492[rsp], eax
$LN152@parse_obje:
  00ef6	8b 84 24 3c 01
	00 00		 mov	 eax, DWORD PTR tv492[rsp]
  00efd	89 84 24 38 01
	00 00		 mov	 DWORD PTR tv493[rsp], eax
$LN154@parse_obje:
  00f04	83 bc 24 38 01
	00 00 20	 cmp	 DWORD PTR tv493[rsp], 32 ; 00000020H
  00f0c	0f 84 66 01 00
	00		 je	 $LN24@parse_obje
  00f12	83 7c 24 30 01	 cmp	 DWORD PTR kind$[rsp], 1
  00f17	75 1f		 jne	 SHORT $LN157@parse_obje
  00f19	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR idx$[rsp]
  00f21	48 8b 4c 24 70	 mov	 rcx, QWORD PTR str$[rsp]
  00f26	48 03 c8	 add	 rcx, rax
  00f29	48 8b c1	 mov	 rax, rcx
  00f2c	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00f2f	89 84 24 40 01
	00 00		 mov	 DWORD PTR tv505[rsp], eax
  00f36	eb 46		 jmp	 SHORT $LN158@parse_obje
$LN157@parse_obje:
  00f38	83 7c 24 30 02	 cmp	 DWORD PTR kind$[rsp], 2
  00f3d	75 1a		 jne	 SHORT $LN155@parse_obje
  00f3f	48 8b 44 24 70	 mov	 rax, QWORD PTR str$[rsp]
  00f44	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  00f4c	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  00f50	89 84 24 44 01
	00 00		 mov	 DWORD PTR tv504[rsp], eax
  00f57	eb 17		 jmp	 SHORT $LN156@parse_obje
$LN155@parse_obje:
  00f59	48 8b 44 24 70	 mov	 rax, QWORD PTR str$[rsp]
  00f5e	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  00f66	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  00f69	89 84 24 44 01
	00 00		 mov	 DWORD PTR tv504[rsp], eax
$LN156@parse_obje:
  00f70	8b 84 24 44 01
	00 00		 mov	 eax, DWORD PTR tv504[rsp]
  00f77	89 84 24 40 01
	00 00		 mov	 DWORD PTR tv505[rsp], eax
$LN158@parse_obje:
  00f7e	83 bc 24 40 01
	00 00 09	 cmp	 DWORD PTR tv505[rsp], 9
  00f86	0f 84 ec 00 00
	00		 je	 $LN24@parse_obje
  00f8c	83 7c 24 30 01	 cmp	 DWORD PTR kind$[rsp], 1
  00f91	75 1f		 jne	 SHORT $LN161@parse_obje
  00f93	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR idx$[rsp]
  00f9b	48 8b 4c 24 70	 mov	 rcx, QWORD PTR str$[rsp]
  00fa0	48 03 c8	 add	 rcx, rax
  00fa3	48 8b c1	 mov	 rax, rcx
  00fa6	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00fa9	89 84 24 48 01
	00 00		 mov	 DWORD PTR tv517[rsp], eax
  00fb0	eb 46		 jmp	 SHORT $LN162@parse_obje
$LN161@parse_obje:
  00fb2	83 7c 24 30 02	 cmp	 DWORD PTR kind$[rsp], 2
  00fb7	75 1a		 jne	 SHORT $LN159@parse_obje
  00fb9	48 8b 44 24 70	 mov	 rax, QWORD PTR str$[rsp]
  00fbe	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  00fc6	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  00fca	89 84 24 4c 01
	00 00		 mov	 DWORD PTR tv516[rsp], eax
  00fd1	eb 17		 jmp	 SHORT $LN160@parse_obje
$LN159@parse_obje:
  00fd3	48 8b 44 24 70	 mov	 rax, QWORD PTR str$[rsp]
  00fd8	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  00fe0	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  00fe3	89 84 24 4c 01
	00 00		 mov	 DWORD PTR tv516[rsp], eax
$LN160@parse_obje:
  00fea	8b 84 24 4c 01
	00 00		 mov	 eax, DWORD PTR tv516[rsp]
  00ff1	89 84 24 48 01
	00 00		 mov	 DWORD PTR tv517[rsp], eax
$LN162@parse_obje:
  00ff8	83 bc 24 48 01
	00 00 0a	 cmp	 DWORD PTR tv517[rsp], 10
  01000	74 76		 je	 SHORT $LN24@parse_obje
  01002	83 7c 24 30 01	 cmp	 DWORD PTR kind$[rsp], 1
  01007	75 1f		 jne	 SHORT $LN165@parse_obje
  01009	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR idx$[rsp]
  01011	48 8b 4c 24 70	 mov	 rcx, QWORD PTR str$[rsp]
  01016	48 03 c8	 add	 rcx, rax
  01019	48 8b c1	 mov	 rax, rcx
  0101c	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0101f	89 84 24 50 01
	00 00		 mov	 DWORD PTR tv529[rsp], eax
  01026	eb 46		 jmp	 SHORT $LN166@parse_obje
$LN165@parse_obje:
  01028	83 7c 24 30 02	 cmp	 DWORD PTR kind$[rsp], 2
  0102d	75 1a		 jne	 SHORT $LN163@parse_obje
  0102f	48 8b 44 24 70	 mov	 rax, QWORD PTR str$[rsp]
  01034	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  0103c	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  01040	89 84 24 54 01
	00 00		 mov	 DWORD PTR tv528[rsp], eax
  01047	eb 17		 jmp	 SHORT $LN164@parse_obje
$LN163@parse_obje:
  01049	48 8b 44 24 70	 mov	 rax, QWORD PTR str$[rsp]
  0104e	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  01056	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  01059	89 84 24 54 01
	00 00		 mov	 DWORD PTR tv528[rsp], eax
$LN164@parse_obje:
  01060	8b 84 24 54 01
	00 00		 mov	 eax, DWORD PTR tv528[rsp]
  01067	89 84 24 50 01
	00 00		 mov	 DWORD PTR tv529[rsp], eax
$LN166@parse_obje:
  0106e	83 bc 24 50 01
	00 00 0d	 cmp	 DWORD PTR tv529[rsp], 13
  01076	75 18		 jne	 SHORT $LN25@parse_obje
$LN24@parse_obje:
  01078	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR idx$[rsp]
  01080	48 ff c0	 inc	 rax
  01083	48 89 84 24 b0
	01 00 00	 mov	 QWORD PTR idx$[rsp], rax
  0108b	e9 f5 fd ff ff	 jmp	 $LN26@parse_obje
$LN25@parse_obje:

; 693  : 
; 694  :             /* bail if the object is closed or we didn't get the , delimiter */
; 695  :             if (idx > end_idx) break;

  01090	48 8b 44 24 48	 mov	 rax, QWORD PTR end_idx$[rsp]
  01095	48 39 84 24 b0
	01 00 00	 cmp	 QWORD PTR idx$[rsp], rax
  0109d	7e 05		 jle	 SHORT $LN23@parse_obje
  0109f	e9 3a 03 00 00	 jmp	 $LN62@parse_obje
$LN23@parse_obje:

; 696  :             if (PyUnicode_READ(kind, str, idx) == '}') {

  010a4	83 7c 24 30 01	 cmp	 DWORD PTR kind$[rsp], 1
  010a9	75 1f		 jne	 SHORT $LN169@parse_obje
  010ab	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR idx$[rsp]
  010b3	48 8b 4c 24 70	 mov	 rcx, QWORD PTR str$[rsp]
  010b8	48 03 c8	 add	 rcx, rax
  010bb	48 8b c1	 mov	 rax, rcx
  010be	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  010c1	89 84 24 58 01
	00 00		 mov	 DWORD PTR tv543[rsp], eax
  010c8	eb 46		 jmp	 SHORT $LN170@parse_obje
$LN169@parse_obje:
  010ca	83 7c 24 30 02	 cmp	 DWORD PTR kind$[rsp], 2
  010cf	75 1a		 jne	 SHORT $LN167@parse_obje
  010d1	48 8b 44 24 70	 mov	 rax, QWORD PTR str$[rsp]
  010d6	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  010de	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  010e2	89 84 24 5c 01
	00 00		 mov	 DWORD PTR tv542[rsp], eax
  010e9	eb 17		 jmp	 SHORT $LN168@parse_obje
$LN167@parse_obje:
  010eb	48 8b 44 24 70	 mov	 rax, QWORD PTR str$[rsp]
  010f0	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  010f8	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  010fb	89 84 24 5c 01
	00 00		 mov	 DWORD PTR tv542[rsp], eax
$LN168@parse_obje:
  01102	8b 84 24 5c 01
	00 00		 mov	 eax, DWORD PTR tv542[rsp]
  01109	89 84 24 58 01
	00 00		 mov	 DWORD PTR tv543[rsp], eax
$LN170@parse_obje:
  01110	83 bc 24 58 01
	00 00 7d	 cmp	 DWORD PTR tv543[rsp], 125 ; 0000007dH
  01118	75 0a		 jne	 SHORT $LN22@parse_obje

; 697  :                 break;

  0111a	e9 bf 02 00 00	 jmp	 $LN62@parse_obje
  0111f	e9 97 00 00 00	 jmp	 $LN21@parse_obje
$LN22@parse_obje:

; 698  :             }
; 699  :             else if (PyUnicode_READ(kind, str, idx) != ',') {

  01124	83 7c 24 30 01	 cmp	 DWORD PTR kind$[rsp], 1
  01129	75 1f		 jne	 SHORT $LN173@parse_obje
  0112b	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR idx$[rsp]
  01133	48 8b 4c 24 70	 mov	 rcx, QWORD PTR str$[rsp]
  01138	48 03 c8	 add	 rcx, rax
  0113b	48 8b c1	 mov	 rax, rcx
  0113e	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  01141	89 84 24 60 01
	00 00		 mov	 DWORD PTR tv555[rsp], eax
  01148	eb 46		 jmp	 SHORT $LN174@parse_obje
$LN173@parse_obje:
  0114a	83 7c 24 30 02	 cmp	 DWORD PTR kind$[rsp], 2
  0114f	75 1a		 jne	 SHORT $LN171@parse_obje
  01151	48 8b 44 24 70	 mov	 rax, QWORD PTR str$[rsp]
  01156	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  0115e	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  01162	89 84 24 64 01
	00 00		 mov	 DWORD PTR tv554[rsp], eax
  01169	eb 17		 jmp	 SHORT $LN172@parse_obje
$LN171@parse_obje:
  0116b	48 8b 44 24 70	 mov	 rax, QWORD PTR str$[rsp]
  01170	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  01178	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  0117b	89 84 24 64 01
	00 00		 mov	 DWORD PTR tv554[rsp], eax
$LN172@parse_obje:
  01182	8b 84 24 64 01
	00 00		 mov	 eax, DWORD PTR tv554[rsp]
  01189	89 84 24 60 01
	00 00		 mov	 DWORD PTR tv555[rsp], eax
$LN174@parse_obje:
  01190	83 bc 24 60 01
	00 00 2c	 cmp	 DWORD PTR tv555[rsp], 44 ; 0000002cH
  01198	74 21		 je	 SHORT $LN20@parse_obje

; 700  :                 raise_errmsg("Expecting ',' delimiter", pystr, idx);

  0119a	4c 8b 84 24 b0
	01 00 00	 mov	 r8, QWORD PTR idx$[rsp]
  011a2	48 8b 94 24 a8
	01 00 00	 mov	 rdx, QWORD PTR pystr$[rsp]
  011aa	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@EKLMLIIK@Expecting?5?8?0?8?5delimiter?$AA@
  011b1	e8 00 00 00 00	 call	 raise_errmsg

; 701  :                 goto bail;

  011b6	e9 60 03 00 00	 jmp	 $bail$21231
$LN20@parse_obje:
$LN21@parse_obje:

; 702  :             }
; 703  :             idx++;

  011bb	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR idx$[rsp]
  011c3	48 ff c0	 inc	 rax
  011c6	48 89 84 24 b0
	01 00 00	 mov	 QWORD PTR idx$[rsp], rax
$LN19@parse_obje:

; 704  : 
; 705  :             /* skip whitespace after , delimiter */
; 706  :             while (idx <= end_idx && IS_WHITESPACE(PyUnicode_READ(kind, str, idx))) idx++;

  011ce	48 8b 44 24 48	 mov	 rax, QWORD PTR end_idx$[rsp]
  011d3	48 39 84 24 b0
	01 00 00	 cmp	 QWORD PTR idx$[rsp], rax
  011db	0f 8f f8 01 00
	00		 jg	 $LN18@parse_obje
  011e1	83 7c 24 30 01	 cmp	 DWORD PTR kind$[rsp], 1
  011e6	75 1f		 jne	 SHORT $LN177@parse_obje
  011e8	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR idx$[rsp]
  011f0	48 8b 4c 24 70	 mov	 rcx, QWORD PTR str$[rsp]
  011f5	48 03 c8	 add	 rcx, rax
  011f8	48 8b c1	 mov	 rax, rcx
  011fb	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  011fe	89 84 24 68 01
	00 00		 mov	 DWORD PTR tv572[rsp], eax
  01205	eb 46		 jmp	 SHORT $LN178@parse_obje
$LN177@parse_obje:
  01207	83 7c 24 30 02	 cmp	 DWORD PTR kind$[rsp], 2
  0120c	75 1a		 jne	 SHORT $LN175@parse_obje
  0120e	48 8b 44 24 70	 mov	 rax, QWORD PTR str$[rsp]
  01213	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  0121b	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  0121f	89 84 24 6c 01
	00 00		 mov	 DWORD PTR tv571[rsp], eax
  01226	eb 17		 jmp	 SHORT $LN176@parse_obje
$LN175@parse_obje:
  01228	48 8b 44 24 70	 mov	 rax, QWORD PTR str$[rsp]
  0122d	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  01235	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  01238	89 84 24 6c 01
	00 00		 mov	 DWORD PTR tv571[rsp], eax
$LN176@parse_obje:
  0123f	8b 84 24 6c 01
	00 00		 mov	 eax, DWORD PTR tv571[rsp]
  01246	89 84 24 68 01
	00 00		 mov	 DWORD PTR tv572[rsp], eax
$LN178@parse_obje:
  0124d	83 bc 24 68 01
	00 00 20	 cmp	 DWORD PTR tv572[rsp], 32 ; 00000020H
  01255	0f 84 66 01 00
	00		 je	 $LN17@parse_obje
  0125b	83 7c 24 30 01	 cmp	 DWORD PTR kind$[rsp], 1
  01260	75 1f		 jne	 SHORT $LN181@parse_obje
  01262	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR idx$[rsp]
  0126a	48 8b 4c 24 70	 mov	 rcx, QWORD PTR str$[rsp]
  0126f	48 03 c8	 add	 rcx, rax
  01272	48 8b c1	 mov	 rax, rcx
  01275	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  01278	89 84 24 70 01
	00 00		 mov	 DWORD PTR tv584[rsp], eax
  0127f	eb 46		 jmp	 SHORT $LN182@parse_obje
$LN181@parse_obje:
  01281	83 7c 24 30 02	 cmp	 DWORD PTR kind$[rsp], 2
  01286	75 1a		 jne	 SHORT $LN179@parse_obje
  01288	48 8b 44 24 70	 mov	 rax, QWORD PTR str$[rsp]
  0128d	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  01295	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  01299	89 84 24 74 01
	00 00		 mov	 DWORD PTR tv583[rsp], eax
  012a0	eb 17		 jmp	 SHORT $LN180@parse_obje
$LN179@parse_obje:
  012a2	48 8b 44 24 70	 mov	 rax, QWORD PTR str$[rsp]
  012a7	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  012af	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  012b2	89 84 24 74 01
	00 00		 mov	 DWORD PTR tv583[rsp], eax
$LN180@parse_obje:
  012b9	8b 84 24 74 01
	00 00		 mov	 eax, DWORD PTR tv583[rsp]
  012c0	89 84 24 70 01
	00 00		 mov	 DWORD PTR tv584[rsp], eax
$LN182@parse_obje:
  012c7	83 bc 24 70 01
	00 00 09	 cmp	 DWORD PTR tv584[rsp], 9
  012cf	0f 84 ec 00 00
	00		 je	 $LN17@parse_obje
  012d5	83 7c 24 30 01	 cmp	 DWORD PTR kind$[rsp], 1
  012da	75 1f		 jne	 SHORT $LN185@parse_obje
  012dc	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR idx$[rsp]
  012e4	48 8b 4c 24 70	 mov	 rcx, QWORD PTR str$[rsp]
  012e9	48 03 c8	 add	 rcx, rax
  012ec	48 8b c1	 mov	 rax, rcx
  012ef	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  012f2	89 84 24 78 01
	00 00		 mov	 DWORD PTR tv596[rsp], eax
  012f9	eb 46		 jmp	 SHORT $LN186@parse_obje
$LN185@parse_obje:
  012fb	83 7c 24 30 02	 cmp	 DWORD PTR kind$[rsp], 2
  01300	75 1a		 jne	 SHORT $LN183@parse_obje
  01302	48 8b 44 24 70	 mov	 rax, QWORD PTR str$[rsp]
  01307	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  0130f	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  01313	89 84 24 7c 01
	00 00		 mov	 DWORD PTR tv595[rsp], eax
  0131a	eb 17		 jmp	 SHORT $LN184@parse_obje
$LN183@parse_obje:
  0131c	48 8b 44 24 70	 mov	 rax, QWORD PTR str$[rsp]
  01321	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  01329	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  0132c	89 84 24 7c 01
	00 00		 mov	 DWORD PTR tv595[rsp], eax
$LN184@parse_obje:
  01333	8b 84 24 7c 01
	00 00		 mov	 eax, DWORD PTR tv595[rsp]
  0133a	89 84 24 78 01
	00 00		 mov	 DWORD PTR tv596[rsp], eax
$LN186@parse_obje:
  01341	83 bc 24 78 01
	00 00 0a	 cmp	 DWORD PTR tv596[rsp], 10
  01349	74 76		 je	 SHORT $LN17@parse_obje
  0134b	83 7c 24 30 01	 cmp	 DWORD PTR kind$[rsp], 1
  01350	75 1f		 jne	 SHORT $LN189@parse_obje
  01352	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR idx$[rsp]
  0135a	48 8b 4c 24 70	 mov	 rcx, QWORD PTR str$[rsp]
  0135f	48 03 c8	 add	 rcx, rax
  01362	48 8b c1	 mov	 rax, rcx
  01365	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  01368	89 84 24 80 01
	00 00		 mov	 DWORD PTR tv608[rsp], eax
  0136f	eb 46		 jmp	 SHORT $LN190@parse_obje
$LN189@parse_obje:
  01371	83 7c 24 30 02	 cmp	 DWORD PTR kind$[rsp], 2
  01376	75 1a		 jne	 SHORT $LN187@parse_obje
  01378	48 8b 44 24 70	 mov	 rax, QWORD PTR str$[rsp]
  0137d	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  01385	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  01389	89 84 24 84 01
	00 00		 mov	 DWORD PTR tv607[rsp], eax
  01390	eb 17		 jmp	 SHORT $LN188@parse_obje
$LN187@parse_obje:
  01392	48 8b 44 24 70	 mov	 rax, QWORD PTR str$[rsp]
  01397	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  0139f	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  013a2	89 84 24 84 01
	00 00		 mov	 DWORD PTR tv607[rsp], eax
$LN188@parse_obje:
  013a9	8b 84 24 84 01
	00 00		 mov	 eax, DWORD PTR tv607[rsp]
  013b0	89 84 24 80 01
	00 00		 mov	 DWORD PTR tv608[rsp], eax
$LN190@parse_obje:
  013b7	83 bc 24 80 01
	00 00 0d	 cmp	 DWORD PTR tv608[rsp], 13
  013bf	75 18		 jne	 SHORT $LN18@parse_obje
$LN17@parse_obje:
  013c1	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR idx$[rsp]
  013c9	48 ff c0	 inc	 rax
  013cc	48 89 84 24 b0
	01 00 00	 mov	 QWORD PTR idx$[rsp], rax
  013d4	e9 f5 fd ff ff	 jmp	 $LN19@parse_obje
$LN18@parse_obje:

; 707  :         }

  013d9	e9 41 f2 ff ff	 jmp	 $LN63@parse_obje
$LN62@parse_obje:
$LN64@parse_obje:

; 708  :     }
; 709  : 
; 710  :     /* verify that idx < end_idx, str[idx] should be '}' */
; 711  :     if (idx > end_idx || PyUnicode_READ(kind, str, idx) != '}') {

  013de	48 8b 44 24 48	 mov	 rax, QWORD PTR end_idx$[rsp]
  013e3	48 39 84 24 b0
	01 00 00	 cmp	 QWORD PTR idx$[rsp], rax
  013eb	7f 76		 jg	 SHORT $LN15@parse_obje
  013ed	83 7c 24 30 01	 cmp	 DWORD PTR kind$[rsp], 1
  013f2	75 1f		 jne	 SHORT $LN193@parse_obje
  013f4	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR idx$[rsp]
  013fc	48 8b 4c 24 70	 mov	 rcx, QWORD PTR str$[rsp]
  01401	48 03 c8	 add	 rcx, rax
  01404	48 8b c1	 mov	 rax, rcx
  01407	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0140a	89 84 24 88 01
	00 00		 mov	 DWORD PTR tv622[rsp], eax
  01411	eb 46		 jmp	 SHORT $LN194@parse_obje
$LN193@parse_obje:
  01413	83 7c 24 30 02	 cmp	 DWORD PTR kind$[rsp], 2
  01418	75 1a		 jne	 SHORT $LN191@parse_obje
  0141a	48 8b 44 24 70	 mov	 rax, QWORD PTR str$[rsp]
  0141f	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  01427	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  0142b	89 84 24 8c 01
	00 00		 mov	 DWORD PTR tv621[rsp], eax
  01432	eb 17		 jmp	 SHORT $LN192@parse_obje
$LN191@parse_obje:
  01434	48 8b 44 24 70	 mov	 rax, QWORD PTR str$[rsp]
  01439	48 8b 8c 24 b0
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  01441	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  01444	89 84 24 8c 01
	00 00		 mov	 DWORD PTR tv621[rsp], eax
$LN192@parse_obje:
  0144b	8b 84 24 8c 01
	00 00		 mov	 eax, DWORD PTR tv621[rsp]
  01452	89 84 24 88 01
	00 00		 mov	 DWORD PTR tv622[rsp], eax
$LN194@parse_obje:
  01459	83 bc 24 88 01
	00 00 7d	 cmp	 DWORD PTR tv622[rsp], 125 ; 0000007dH
  01461	74 1e		 je	 SHORT $LN16@parse_obje
$LN15@parse_obje:

; 712  :         raise_errmsg("Expecting object", pystr, end_idx);

  01463	4c 8b 44 24 48	 mov	 r8, QWORD PTR end_idx$[rsp]
  01468	48 8b 94 24 a8
	01 00 00	 mov	 rdx, QWORD PTR pystr$[rsp]
  01470	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@GKGDLNNB@Expecting?5object?$AA@
  01477	e8 00 00 00 00	 call	 raise_errmsg

; 713  :         goto bail;

  0147c	e9 9a 00 00 00	 jmp	 $bail$21231
$LN16@parse_obje:

; 714  :     }
; 715  : 
; 716  :     *next_idx_ptr = idx + 1;

  01481	48 8b 84 24 b0
	01 00 00	 mov	 rax, QWORD PTR idx$[rsp]
  01489	48 ff c0	 inc	 rax
  0148c	48 8b 8c 24 b8
	01 00 00	 mov	 rcx, QWORD PTR next_idx_ptr$[rsp]
  01494	48 89 01	 mov	 QWORD PTR [rcx], rax

; 717  : 
; 718  :     if (has_pairs_hook) {

  01497	83 7c 24 68 00	 cmp	 DWORD PTR has_pairs_hook$[rsp], 0
  0149c	74 32		 je	 SHORT $LN14@parse_obje

; 719  :         val = PyObject_CallFunctionObjArgs(s->object_pairs_hook, rval, NULL);

  0149e	45 33 c0	 xor	 r8d, r8d
  014a1	48 8b 54 24 38	 mov	 rdx, QWORD PTR rval$[rsp]
  014a6	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  014ae	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  014b2	e8 00 00 00 00	 call	 PyObject_CallFunctionObjArgs
  014b7	48 89 44 24 60	 mov	 QWORD PTR val$[rsp], rax

; 720  :         Py_DECREF(rval);

  014bc	48 8b 4c 24 38	 mov	 rcx, QWORD PTR rval$[rsp]
  014c1	e8 00 00 00 00	 call	 _Py_DecRef

; 721  :         return val;

  014c6	48 8b 44 24 60	 mov	 rax, QWORD PTR val$[rsp]
  014cb	e9 95 00 00 00	 jmp	 $LN72@parse_obje
$LN14@parse_obje:

; 722  :     }
; 723  : 
; 724  :     /* if object_hook is not None: rval = object_hook(rval) */
; 725  :     if (s->object_hook != Py_None) {

  014d0	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  014d7	48 8b 8c 24 a0
	01 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  014df	48 39 41 68	 cmp	 QWORD PTR [rcx+104], rax
  014e3	74 2f		 je	 SHORT $LN13@parse_obje

; 726  :         val = PyObject_CallFunctionObjArgs(s->object_hook, rval, NULL);

  014e5	45 33 c0	 xor	 r8d, r8d
  014e8	48 8b 54 24 38	 mov	 rdx, QWORD PTR rval$[rsp]
  014ed	48 8b 84 24 a0
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  014f5	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  014f9	e8 00 00 00 00	 call	 PyObject_CallFunctionObjArgs
  014fe	48 89 44 24 60	 mov	 QWORD PTR val$[rsp], rax

; 727  :         Py_DECREF(rval);

  01503	48 8b 4c 24 38	 mov	 rcx, QWORD PTR rval$[rsp]
  01508	e8 00 00 00 00	 call	 _Py_DecRef

; 728  :         return val;

  0150d	48 8b 44 24 60	 mov	 rax, QWORD PTR val$[rsp]
  01512	eb 51		 jmp	 SHORT $LN72@parse_obje
$LN13@parse_obje:

; 729  :     }
; 730  :     return rval;

  01514	48 8b 44 24 38	 mov	 rax, QWORD PTR rval$[rsp]
  01519	eb 4a		 jmp	 SHORT $LN72@parse_obje
$bail$21231:
$LN12@parse_obje:

; 731  : bail:
; 732  :     Py_XDECREF(key);

  0151b	48 83 7c 24 50
	00		 cmp	 QWORD PTR key$[rsp], 0
  01521	74 0a		 je	 SHORT $LN9@parse_obje
  01523	48 8b 4c 24 50	 mov	 rcx, QWORD PTR key$[rsp]
  01528	e8 00 00 00 00	 call	 _Py_DecRef
$LN9@parse_obje:
  0152d	33 c0		 xor	 eax, eax
  0152f	85 c0		 test	 eax, eax
  01531	75 e8		 jne	 SHORT $LN12@parse_obje
$LN8@parse_obje:

; 733  :     Py_XDECREF(val);

  01533	48 83 7c 24 60
	00		 cmp	 QWORD PTR val$[rsp], 0
  01539	74 0a		 je	 SHORT $LN5@parse_obje
  0153b	48 8b 4c 24 60	 mov	 rcx, QWORD PTR val$[rsp]
  01540	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@parse_obje:
  01545	33 c0		 xor	 eax, eax
  01547	85 c0		 test	 eax, eax
  01549	75 e8		 jne	 SHORT $LN8@parse_obje
$LN4@parse_obje:

; 734  :     Py_XDECREF(rval);

  0154b	48 83 7c 24 38
	00		 cmp	 QWORD PTR rval$[rsp], 0
  01551	74 0a		 je	 SHORT $LN1@parse_obje
  01553	48 8b 4c 24 38	 mov	 rcx, QWORD PTR rval$[rsp]
  01558	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@parse_obje:
  0155d	33 c0		 xor	 eax, eax
  0155f	85 c0		 test	 eax, eax
  01561	75 e8		 jne	 SHORT $LN4@parse_obje

; 735  :     return NULL;

  01563	33 c0		 xor	 eax, eax
$LN72@parse_obje:

; 736  : }

  01565	48 81 c4 98 01
	00 00		 add	 rsp, 408		; 00000198H
  0156c	c3		 ret	 0
_parse_object_unicode ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BF@JDHLIHOH@_parse_array_unicode?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$_parse_array_unicode DD imagerel _parse_array_unicode
	DD	imagerel _parse_array_unicode+3222
	DD	imagerel $unwind$_parse_array_unicode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_parse_array_unicode DD 021b01H
	DD	021011bH
xdata	ENDS
;	COMDAT ??_C@_0BF@JDHLIHOH@_parse_array_unicode?$AA@
CONST	SEGMENT
??_C@_0BF@JDHLIHOH@_parse_array_unicode?$AA@ DB '_parse_array_unicode', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _parse_array_unicode
_TEXT	SEGMENT
kind$ = 48
rval$ = 56
end_idx$ = 64
next_idx$ = 72
val$ = 80
str$ = 88
_py_tmp$21501 = 96
tv81 = 104
tv148 = 112
tv157 = 120
tv206 = 128
tv205 = 132
tv218 = 136
tv217 = 140
tv230 = 144
tv229 = 148
tv242 = 152
tv241 = 156
tv256 = 160
tv255 = 164
tv290 = 168
tv289 = 172
tv302 = 176
tv301 = 180
tv314 = 184
tv313 = 188
tv326 = 192
tv325 = 196
tv340 = 200
tv339 = 204
tv352 = 208
tv351 = 212
tv369 = 216
tv368 = 220
tv381 = 224
tv380 = 228
tv393 = 232
tv392 = 236
tv405 = 240
tv404 = 244
tv419 = 248
tv418 = 252
s$ = 272
pystr$ = 280
idx$ = 288
next_idx_ptr$ = 296
_parse_array_unicode PROC				; COMDAT

; 739  : _parse_array_unicode(PyScannerObject *s, PyObject *pystr, Py_ssize_t idx, Py_ssize_t *next_idx_ptr) {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec 08 01
	00 00		 sub	 rsp, 264		; 00000108H

; 740  :     /* Read a JSON array from PyString pystr.
; 741  :     idx is the index of the first character after the opening brace.
; 742  :     *next_idx_ptr is a return-by-reference index to the first character after
; 743  :         the closing brace.
; 744  : 
; 745  :     Returns a new PyList
; 746  :     */
; 747  :     void *str;
; 748  :     int kind;
; 749  :     Py_ssize_t end_idx;
; 750  :     PyObject *val = NULL;

  0001b	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR val$[rsp], 0

; 751  :     PyObject *rval = PyList_New(0);

  00024	33 c9		 xor	 ecx, ecx
  00026	e8 00 00 00 00	 call	 PyList_New
  0002b	48 89 44 24 38	 mov	 QWORD PTR rval$[rsp], rax

; 752  :     Py_ssize_t next_idx;
; 753  :     if (rval == NULL)

  00030	48 83 7c 24 38
	00		 cmp	 QWORD PTR rval$[rsp], 0
  00036	75 07		 jne	 SHORT $LN30@parse_arra

; 754  :         return NULL;

  00038	33 c0		 xor	 eax, eax
  0003a	e9 4f 0c 00 00	 jmp	 $LN31@parse_arra
$LN30@parse_arra:

; 755  : 
; 756  :     if (PyUnicode_READY(pystr) == -1)

  0003f	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  00047	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0004b	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00051	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00056	85 c0		 test	 eax, eax
  00058	75 1c		 jne	 SHORT $LN33@parse_arra
  0005a	41 b8 f4 02 00
	00		 mov	 r8d, 756		; 000002f4H
  00060	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@KOELJAMM@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAj?$AAs?$AAo?$AAn?$AA?4?$AAc?$AA?$AA@
  00067	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@GLPHKNNN@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAp?$AAy?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  0006e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00074	33 c0		 xor	 eax, eax
$LN33@parse_arra:
  00076	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  0007e	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00081	c1 e8 07	 shr	 eax, 7
  00084	83 e0 01	 and	 eax, 1
  00087	85 c0		 test	 eax, eax
  00089	74 0a		 je	 SHORT $LN34@parse_arra
  0008b	c7 44 24 68 00
	00 00 00	 mov	 DWORD PTR tv81[rsp], 0
  00093	eb 11		 jmp	 SHORT $LN35@parse_arra
$LN34@parse_arra:
  00095	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR pystr$[rsp]
  0009d	e8 00 00 00 00	 call	 _PyUnicode_Ready
  000a2	89 44 24 68	 mov	 DWORD PTR tv81[rsp], eax
$LN35@parse_arra:
  000a6	83 7c 24 68 ff	 cmp	 DWORD PTR tv81[rsp], -1
  000ab	75 07		 jne	 SHORT $LN29@parse_arra

; 757  :         return NULL;

  000ad	33 c0		 xor	 eax, eax
  000af	e9 da 0b 00 00	 jmp	 $LN31@parse_arra
$LN29@parse_arra:

; 758  : 
; 759  :     str = PyUnicode_DATA(pystr);

  000b4	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  000bc	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000c0	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000c6	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  000cb	85 c0		 test	 eax, eax
  000cd	75 1c		 jne	 SHORT $LN36@parse_arra
  000cf	41 b8 f7 02 00
	00		 mov	 r8d, 759		; 000002f7H
  000d5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@KOELJAMM@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAj?$AAs?$AAo?$AAn?$AA?4?$AAc?$AA?$AA@
  000dc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@GLPHKNNN@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAp?$AAy?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  000e3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000e9	33 c0		 xor	 eax, eax
$LN36@parse_arra:
  000eb	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  000f3	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  000f6	c1 e8 05	 shr	 eax, 5
  000f9	83 e0 01	 and	 eax, 1
  000fc	85 c0		 test	 eax, eax
  000fe	0f 84 b1 00 00
	00		 je	 $LN42@parse_arra
  00104	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  0010c	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00110	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00116	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  0011b	85 c0		 test	 eax, eax
  0011d	75 1c		 jne	 SHORT $LN37@parse_arra
  0011f	41 b8 f7 02 00
	00		 mov	 r8d, 759		; 000002f7H
  00125	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@KOELJAMM@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAj?$AAs?$AAo?$AAn?$AA?4?$AAc?$AA?$AA@
  0012c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@GLPHKNNN@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAp?$AAy?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  00133	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00139	33 c0		 xor	 eax, eax
$LN37@parse_arra:
  0013b	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  00143	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00146	c1 e8 07	 shr	 eax, 7
  00149	83 e0 01	 and	 eax, 1
  0014c	85 c0		 test	 eax, eax
  0014e	75 1c		 jne	 SHORT $LN38@parse_arra
  00150	41 b8 f7 02 00
	00		 mov	 r8d, 759		; 000002f7H
  00156	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@KOELJAMM@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAj?$AAs?$AAo?$AAn?$AA?4?$AAc?$AA?$AA@
  0015d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@NACFPDOF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAp?$AAy?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  00164	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0016a	33 c0		 xor	 eax, eax
$LN38@parse_arra:
  0016c	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  00174	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00177	c1 e8 06	 shr	 eax, 6
  0017a	83 e0 01	 and	 eax, 1
  0017d	85 c0		 test	 eax, eax
  0017f	74 15		 je	 SHORT $LN39@parse_arra
  00181	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  00189	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  0018f	48 89 44 24 70	 mov	 QWORD PTR tv148[rsp], rax
  00194	eb 13		 jmp	 SHORT $LN40@parse_arra
$LN39@parse_arra:
  00196	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  0019e	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  001a4	48 89 44 24 70	 mov	 QWORD PTR tv148[rsp], rax
$LN40@parse_arra:
  001a9	48 8b 44 24 70	 mov	 rax, QWORD PTR tv148[rsp]
  001ae	48 89 44 24 78	 mov	 QWORD PTR tv157[rsp], rax
  001b3	eb 42		 jmp	 SHORT $LN43@parse_arra
$LN42@parse_arra:
  001b5	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  001bd	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  001c5	75 1c		 jne	 SHORT $LN41@parse_arra
  001c7	41 b8 f7 02 00
	00		 mov	 r8d, 759		; 000002f7H
  001cd	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@KOELJAMM@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAj?$AAs?$AAo?$AAn?$AA?4?$AAc?$AA?$AA@
  001d4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EM@FMOHIEKB@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AAp?$AAy?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt@
  001db	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001e1	33 c0		 xor	 eax, eax
$LN41@parse_arra:
  001e3	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  001eb	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  001f2	48 89 44 24 78	 mov	 QWORD PTR tv157[rsp], rax
$LN43@parse_arra:
  001f7	48 8b 44 24 78	 mov	 rax, QWORD PTR tv157[rsp]
  001fc	48 89 44 24 58	 mov	 QWORD PTR str$[rsp], rax

; 760  :     kind = PyUnicode_KIND(pystr);

  00201	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  00209	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0020d	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00213	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00218	85 c0		 test	 eax, eax
  0021a	75 1c		 jne	 SHORT $LN44@parse_arra
  0021c	41 b8 f8 02 00
	00		 mov	 r8d, 760		; 000002f8H
  00222	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@KOELJAMM@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAj?$AAs?$AAo?$AAn?$AA?4?$AAc?$AA?$AA@
  00229	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@GLPHKNNN@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAp?$AAy?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  00230	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00236	33 c0		 xor	 eax, eax
$LN44@parse_arra:
  00238	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  00240	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00243	c1 e8 07	 shr	 eax, 7
  00246	83 e0 01	 and	 eax, 1
  00249	85 c0		 test	 eax, eax
  0024b	75 1c		 jne	 SHORT $LN45@parse_arra
  0024d	41 b8 f8 02 00
	00		 mov	 r8d, 760		; 000002f8H
  00253	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@KOELJAMM@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAj?$AAs?$AAo?$AAn?$AA?4?$AAc?$AA?$AA@
  0025a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@NACFPDOF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAp?$AAy?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  00261	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00267	33 c0		 xor	 eax, eax
$LN45@parse_arra:
  00269	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  00271	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00274	c1 e8 02	 shr	 eax, 2
  00277	83 e0 07	 and	 eax, 7
  0027a	89 44 24 30	 mov	 DWORD PTR kind$[rsp], eax

; 761  :     end_idx = PyUnicode_GET_LENGTH(pystr) - 1;

  0027e	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  00286	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0028a	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00290	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00295	85 c0		 test	 eax, eax
  00297	75 1c		 jne	 SHORT $LN46@parse_arra
  00299	41 b8 f9 02 00
	00		 mov	 r8d, 761		; 000002f9H
  0029f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@KOELJAMM@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAj?$AAs?$AAo?$AAn?$AA?4?$AAc?$AA?$AA@
  002a6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@GLPHKNNN@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAp?$AAy?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  002ad	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  002b3	33 c0		 xor	 eax, eax
$LN46@parse_arra:
  002b5	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  002bd	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  002c0	c1 e8 07	 shr	 eax, 7
  002c3	83 e0 01	 and	 eax, 1
  002c6	85 c0		 test	 eax, eax
  002c8	75 1c		 jne	 SHORT $LN47@parse_arra
  002ca	41 b8 f9 02 00
	00		 mov	 r8d, 761		; 000002f9H
  002d0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@KOELJAMM@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAj?$AAs?$AAo?$AAn?$AA?4?$AAc?$AA?$AA@
  002d7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@NACFPDOF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAp?$AAy?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  002de	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  002e4	33 c0		 xor	 eax, eax
$LN47@parse_arra:
  002e6	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  002ee	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  002f2	48 ff c8	 dec	 rax
  002f5	48 89 44 24 40	 mov	 QWORD PTR end_idx$[rsp], rax
$LN28@parse_arra:

; 762  : 
; 763  :     /* skip whitespace after [ */
; 764  :     while (idx <= end_idx && IS_WHITESPACE(PyUnicode_READ(kind, str, idx))) idx++;

  002fa	48 8b 44 24 40	 mov	 rax, QWORD PTR end_idx$[rsp]
  002ff	48 39 84 24 20
	01 00 00	 cmp	 QWORD PTR idx$[rsp], rax
  00307	0f 8f f8 01 00
	00		 jg	 $LN27@parse_arra
  0030d	83 7c 24 30 01	 cmp	 DWORD PTR kind$[rsp], 1
  00312	75 1f		 jne	 SHORT $LN50@parse_arra
  00314	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR idx$[rsp]
  0031c	48 8b 4c 24 58	 mov	 rcx, QWORD PTR str$[rsp]
  00321	48 03 c8	 add	 rcx, rax
  00324	48 8b c1	 mov	 rax, rcx
  00327	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0032a	89 84 24 80 00
	00 00		 mov	 DWORD PTR tv206[rsp], eax
  00331	eb 46		 jmp	 SHORT $LN51@parse_arra
$LN50@parse_arra:
  00333	83 7c 24 30 02	 cmp	 DWORD PTR kind$[rsp], 2
  00338	75 1a		 jne	 SHORT $LN48@parse_arra
  0033a	48 8b 44 24 58	 mov	 rax, QWORD PTR str$[rsp]
  0033f	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  00347	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  0034b	89 84 24 84 00
	00 00		 mov	 DWORD PTR tv205[rsp], eax
  00352	eb 17		 jmp	 SHORT $LN49@parse_arra
$LN48@parse_arra:
  00354	48 8b 44 24 58	 mov	 rax, QWORD PTR str$[rsp]
  00359	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  00361	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  00364	89 84 24 84 00
	00 00		 mov	 DWORD PTR tv205[rsp], eax
$LN49@parse_arra:
  0036b	8b 84 24 84 00
	00 00		 mov	 eax, DWORD PTR tv205[rsp]
  00372	89 84 24 80 00
	00 00		 mov	 DWORD PTR tv206[rsp], eax
$LN51@parse_arra:
  00379	83 bc 24 80 00
	00 00 20	 cmp	 DWORD PTR tv206[rsp], 32 ; 00000020H
  00381	0f 84 66 01 00
	00		 je	 $LN26@parse_arra
  00387	83 7c 24 30 01	 cmp	 DWORD PTR kind$[rsp], 1
  0038c	75 1f		 jne	 SHORT $LN54@parse_arra
  0038e	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR idx$[rsp]
  00396	48 8b 4c 24 58	 mov	 rcx, QWORD PTR str$[rsp]
  0039b	48 03 c8	 add	 rcx, rax
  0039e	48 8b c1	 mov	 rax, rcx
  003a1	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  003a4	89 84 24 88 00
	00 00		 mov	 DWORD PTR tv218[rsp], eax
  003ab	eb 46		 jmp	 SHORT $LN55@parse_arra
$LN54@parse_arra:
  003ad	83 7c 24 30 02	 cmp	 DWORD PTR kind$[rsp], 2
  003b2	75 1a		 jne	 SHORT $LN52@parse_arra
  003b4	48 8b 44 24 58	 mov	 rax, QWORD PTR str$[rsp]
  003b9	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  003c1	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  003c5	89 84 24 8c 00
	00 00		 mov	 DWORD PTR tv217[rsp], eax
  003cc	eb 17		 jmp	 SHORT $LN53@parse_arra
$LN52@parse_arra:
  003ce	48 8b 44 24 58	 mov	 rax, QWORD PTR str$[rsp]
  003d3	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  003db	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  003de	89 84 24 8c 00
	00 00		 mov	 DWORD PTR tv217[rsp], eax
$LN53@parse_arra:
  003e5	8b 84 24 8c 00
	00 00		 mov	 eax, DWORD PTR tv217[rsp]
  003ec	89 84 24 88 00
	00 00		 mov	 DWORD PTR tv218[rsp], eax
$LN55@parse_arra:
  003f3	83 bc 24 88 00
	00 00 09	 cmp	 DWORD PTR tv218[rsp], 9
  003fb	0f 84 ec 00 00
	00		 je	 $LN26@parse_arra
  00401	83 7c 24 30 01	 cmp	 DWORD PTR kind$[rsp], 1
  00406	75 1f		 jne	 SHORT $LN58@parse_arra
  00408	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR idx$[rsp]
  00410	48 8b 4c 24 58	 mov	 rcx, QWORD PTR str$[rsp]
  00415	48 03 c8	 add	 rcx, rax
  00418	48 8b c1	 mov	 rax, rcx
  0041b	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0041e	89 84 24 90 00
	00 00		 mov	 DWORD PTR tv230[rsp], eax
  00425	eb 46		 jmp	 SHORT $LN59@parse_arra
$LN58@parse_arra:
  00427	83 7c 24 30 02	 cmp	 DWORD PTR kind$[rsp], 2
  0042c	75 1a		 jne	 SHORT $LN56@parse_arra
  0042e	48 8b 44 24 58	 mov	 rax, QWORD PTR str$[rsp]
  00433	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  0043b	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  0043f	89 84 24 94 00
	00 00		 mov	 DWORD PTR tv229[rsp], eax
  00446	eb 17		 jmp	 SHORT $LN57@parse_arra
$LN56@parse_arra:
  00448	48 8b 44 24 58	 mov	 rax, QWORD PTR str$[rsp]
  0044d	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  00455	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  00458	89 84 24 94 00
	00 00		 mov	 DWORD PTR tv229[rsp], eax
$LN57@parse_arra:
  0045f	8b 84 24 94 00
	00 00		 mov	 eax, DWORD PTR tv229[rsp]
  00466	89 84 24 90 00
	00 00		 mov	 DWORD PTR tv230[rsp], eax
$LN59@parse_arra:
  0046d	83 bc 24 90 00
	00 00 0a	 cmp	 DWORD PTR tv230[rsp], 10
  00475	74 76		 je	 SHORT $LN26@parse_arra
  00477	83 7c 24 30 01	 cmp	 DWORD PTR kind$[rsp], 1
  0047c	75 1f		 jne	 SHORT $LN62@parse_arra
  0047e	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR idx$[rsp]
  00486	48 8b 4c 24 58	 mov	 rcx, QWORD PTR str$[rsp]
  0048b	48 03 c8	 add	 rcx, rax
  0048e	48 8b c1	 mov	 rax, rcx
  00491	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00494	89 84 24 98 00
	00 00		 mov	 DWORD PTR tv242[rsp], eax
  0049b	eb 46		 jmp	 SHORT $LN63@parse_arra
$LN62@parse_arra:
  0049d	83 7c 24 30 02	 cmp	 DWORD PTR kind$[rsp], 2
  004a2	75 1a		 jne	 SHORT $LN60@parse_arra
  004a4	48 8b 44 24 58	 mov	 rax, QWORD PTR str$[rsp]
  004a9	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  004b1	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  004b5	89 84 24 9c 00
	00 00		 mov	 DWORD PTR tv241[rsp], eax
  004bc	eb 17		 jmp	 SHORT $LN61@parse_arra
$LN60@parse_arra:
  004be	48 8b 44 24 58	 mov	 rax, QWORD PTR str$[rsp]
  004c3	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  004cb	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  004ce	89 84 24 9c 00
	00 00		 mov	 DWORD PTR tv241[rsp], eax
$LN61@parse_arra:
  004d5	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR tv241[rsp]
  004dc	89 84 24 98 00
	00 00		 mov	 DWORD PTR tv242[rsp], eax
$LN63@parse_arra:
  004e3	83 bc 24 98 00
	00 00 0d	 cmp	 DWORD PTR tv242[rsp], 13
  004eb	75 18		 jne	 SHORT $LN27@parse_arra
$LN26@parse_arra:
  004ed	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR idx$[rsp]
  004f5	48 ff c0	 inc	 rax
  004f8	48 89 84 24 20
	01 00 00	 mov	 QWORD PTR idx$[rsp], rax
  00500	e9 f5 fd ff ff	 jmp	 $LN28@parse_arra
$LN27@parse_arra:

; 765  : 
; 766  :     /* only loop if the array is non-empty */
; 767  :     if (idx <= end_idx && PyUnicode_READ(kind, str, idx) != ']') {

  00505	48 8b 44 24 40	 mov	 rax, QWORD PTR end_idx$[rsp]
  0050a	48 39 84 24 20
	01 00 00	 cmp	 QWORD PTR idx$[rsp], rax
  00512	0f 8f 95 06 00
	00		 jg	 $LN25@parse_arra
  00518	83 7c 24 30 01	 cmp	 DWORD PTR kind$[rsp], 1
  0051d	75 1f		 jne	 SHORT $LN66@parse_arra
  0051f	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR idx$[rsp]
  00527	48 8b 4c 24 58	 mov	 rcx, QWORD PTR str$[rsp]
  0052c	48 03 c8	 add	 rcx, rax
  0052f	48 8b c1	 mov	 rax, rcx
  00532	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00535	89 84 24 a0 00
	00 00		 mov	 DWORD PTR tv256[rsp], eax
  0053c	eb 46		 jmp	 SHORT $LN67@parse_arra
$LN66@parse_arra:
  0053e	83 7c 24 30 02	 cmp	 DWORD PTR kind$[rsp], 2
  00543	75 1a		 jne	 SHORT $LN64@parse_arra
  00545	48 8b 44 24 58	 mov	 rax, QWORD PTR str$[rsp]
  0054a	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  00552	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  00556	89 84 24 a4 00
	00 00		 mov	 DWORD PTR tv255[rsp], eax
  0055d	eb 17		 jmp	 SHORT $LN65@parse_arra
$LN64@parse_arra:
  0055f	48 8b 44 24 58	 mov	 rax, QWORD PTR str$[rsp]
  00564	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  0056c	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  0056f	89 84 24 a4 00
	00 00		 mov	 DWORD PTR tv255[rsp], eax
$LN65@parse_arra:
  00576	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR tv255[rsp]
  0057d	89 84 24 a0 00
	00 00		 mov	 DWORD PTR tv256[rsp], eax
$LN67@parse_arra:
  00584	83 bc 24 a0 00
	00 00 5d	 cmp	 DWORD PTR tv256[rsp], 93 ; 0000005dH
  0058c	0f 84 1b 06 00
	00		 je	 $LN25@parse_arra
$LN24@parse_arra:

; 768  :         while (idx <= end_idx) {

  00592	48 8b 44 24 40	 mov	 rax, QWORD PTR end_idx$[rsp]
  00597	48 39 84 24 20
	01 00 00	 cmp	 QWORD PTR idx$[rsp], rax
  0059f	0f 8f 08 06 00
	00		 jg	 $LN23@parse_arra

; 769  : 
; 770  :             /* read any JSON term  */
; 771  :             val = scan_once_unicode(s, pystr, idx, &next_idx);

  005a5	4c 8d 4c 24 48	 lea	 r9, QWORD PTR next_idx$[rsp]
  005aa	4c 8b 84 24 20
	01 00 00	 mov	 r8, QWORD PTR idx$[rsp]
  005b2	48 8b 94 24 18
	01 00 00	 mov	 rdx, QWORD PTR pystr$[rsp]
  005ba	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  005c2	e8 00 00 00 00	 call	 scan_once_unicode
  005c7	48 89 44 24 50	 mov	 QWORD PTR val$[rsp], rax

; 772  :             if (val == NULL)

  005cc	48 83 7c 24 50
	00		 cmp	 QWORD PTR val$[rsp], 0
  005d2	75 05		 jne	 SHORT $LN22@parse_arra

; 773  :                 goto bail;

  005d4	e9 91 06 00 00	 jmp	 $bail$21494
$LN22@parse_arra:

; 774  : 
; 775  :             if (PyList_Append(rval, val) == -1)

  005d9	48 8b 54 24 50	 mov	 rdx, QWORD PTR val$[rsp]
  005de	48 8b 4c 24 38	 mov	 rcx, QWORD PTR rval$[rsp]
  005e3	e8 00 00 00 00	 call	 PyList_Append
  005e8	83 f8 ff	 cmp	 eax, -1
  005eb	75 05		 jne	 SHORT $LN21@parse_arra

; 776  :                 goto bail;

  005ed	e9 78 06 00 00	 jmp	 $bail$21494
$LN21@parse_arra:
$LN20@parse_arra:

; 777  : 
; 778  :             Py_CLEAR(val);

  005f2	48 83 7c 24 50
	00		 cmp	 QWORD PTR val$[rsp], 0
  005f8	74 47		 je	 SHORT $LN17@parse_arra
  005fa	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00602	4c 8b 4c 24 50	 mov	 r9, QWORD PTR val$[rsp]
  00607	41 b8 0a 03 00
	00		 mov	 r8d, 778		; 0000030aH
  0060d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@BIGPLMIN@?4?4?2Modules?2_json?4c?$AA@
  00614	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BF@JDHLIHOH@_parse_array_unicode?$AA@
  0061b	e8 00 00 00 00	 call	 _PyParallel_Guard
  00620	85 c0		 test	 eax, eax
  00622	75 1d		 jne	 SHORT $LN17@parse_arra
  00624	48 8b 44 24 50	 mov	 rax, QWORD PTR val$[rsp]
  00629	48 89 44 24 60	 mov	 QWORD PTR _py_tmp$21501[rsp], rax
  0062e	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR val$[rsp], 0
  00637	48 8b 4c 24 60	 mov	 rcx, QWORD PTR _py_tmp$21501[rsp]
  0063c	e8 00 00 00 00	 call	 _Py_DecRef
$LN17@parse_arra:
  00641	33 c0		 xor	 eax, eax
  00643	85 c0		 test	 eax, eax
  00645	75 ab		 jne	 SHORT $LN20@parse_arra

; 779  :             idx = next_idx;

  00647	48 8b 44 24 48	 mov	 rax, QWORD PTR next_idx$[rsp]
  0064c	48 89 84 24 20
	01 00 00	 mov	 QWORD PTR idx$[rsp], rax
$LN16@parse_arra:

; 780  : 
; 781  :             /* skip whitespace between term and , */
; 782  :             while (idx <= end_idx && IS_WHITESPACE(PyUnicode_READ(kind, str, idx))) idx++;

  00654	48 8b 44 24 40	 mov	 rax, QWORD PTR end_idx$[rsp]
  00659	48 39 84 24 20
	01 00 00	 cmp	 QWORD PTR idx$[rsp], rax
  00661	0f 8f f8 01 00
	00		 jg	 $LN15@parse_arra
  00667	83 7c 24 30 01	 cmp	 DWORD PTR kind$[rsp], 1
  0066c	75 1f		 jne	 SHORT $LN70@parse_arra
  0066e	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR idx$[rsp]
  00676	48 8b 4c 24 58	 mov	 rcx, QWORD PTR str$[rsp]
  0067b	48 03 c8	 add	 rcx, rax
  0067e	48 8b c1	 mov	 rax, rcx
  00681	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00684	89 84 24 a8 00
	00 00		 mov	 DWORD PTR tv290[rsp], eax
  0068b	eb 46		 jmp	 SHORT $LN71@parse_arra
$LN70@parse_arra:
  0068d	83 7c 24 30 02	 cmp	 DWORD PTR kind$[rsp], 2
  00692	75 1a		 jne	 SHORT $LN68@parse_arra
  00694	48 8b 44 24 58	 mov	 rax, QWORD PTR str$[rsp]
  00699	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  006a1	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  006a5	89 84 24 ac 00
	00 00		 mov	 DWORD PTR tv289[rsp], eax
  006ac	eb 17		 jmp	 SHORT $LN69@parse_arra
$LN68@parse_arra:
  006ae	48 8b 44 24 58	 mov	 rax, QWORD PTR str$[rsp]
  006b3	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  006bb	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  006be	89 84 24 ac 00
	00 00		 mov	 DWORD PTR tv289[rsp], eax
$LN69@parse_arra:
  006c5	8b 84 24 ac 00
	00 00		 mov	 eax, DWORD PTR tv289[rsp]
  006cc	89 84 24 a8 00
	00 00		 mov	 DWORD PTR tv290[rsp], eax
$LN71@parse_arra:
  006d3	83 bc 24 a8 00
	00 00 20	 cmp	 DWORD PTR tv290[rsp], 32 ; 00000020H
  006db	0f 84 66 01 00
	00		 je	 $LN14@parse_arra
  006e1	83 7c 24 30 01	 cmp	 DWORD PTR kind$[rsp], 1
  006e6	75 1f		 jne	 SHORT $LN74@parse_arra
  006e8	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR idx$[rsp]
  006f0	48 8b 4c 24 58	 mov	 rcx, QWORD PTR str$[rsp]
  006f5	48 03 c8	 add	 rcx, rax
  006f8	48 8b c1	 mov	 rax, rcx
  006fb	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  006fe	89 84 24 b0 00
	00 00		 mov	 DWORD PTR tv302[rsp], eax
  00705	eb 46		 jmp	 SHORT $LN75@parse_arra
$LN74@parse_arra:
  00707	83 7c 24 30 02	 cmp	 DWORD PTR kind$[rsp], 2
  0070c	75 1a		 jne	 SHORT $LN72@parse_arra
  0070e	48 8b 44 24 58	 mov	 rax, QWORD PTR str$[rsp]
  00713	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  0071b	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  0071f	89 84 24 b4 00
	00 00		 mov	 DWORD PTR tv301[rsp], eax
  00726	eb 17		 jmp	 SHORT $LN73@parse_arra
$LN72@parse_arra:
  00728	48 8b 44 24 58	 mov	 rax, QWORD PTR str$[rsp]
  0072d	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  00735	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  00738	89 84 24 b4 00
	00 00		 mov	 DWORD PTR tv301[rsp], eax
$LN73@parse_arra:
  0073f	8b 84 24 b4 00
	00 00		 mov	 eax, DWORD PTR tv301[rsp]
  00746	89 84 24 b0 00
	00 00		 mov	 DWORD PTR tv302[rsp], eax
$LN75@parse_arra:
  0074d	83 bc 24 b0 00
	00 00 09	 cmp	 DWORD PTR tv302[rsp], 9
  00755	0f 84 ec 00 00
	00		 je	 $LN14@parse_arra
  0075b	83 7c 24 30 01	 cmp	 DWORD PTR kind$[rsp], 1
  00760	75 1f		 jne	 SHORT $LN78@parse_arra
  00762	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR idx$[rsp]
  0076a	48 8b 4c 24 58	 mov	 rcx, QWORD PTR str$[rsp]
  0076f	48 03 c8	 add	 rcx, rax
  00772	48 8b c1	 mov	 rax, rcx
  00775	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00778	89 84 24 b8 00
	00 00		 mov	 DWORD PTR tv314[rsp], eax
  0077f	eb 46		 jmp	 SHORT $LN79@parse_arra
$LN78@parse_arra:
  00781	83 7c 24 30 02	 cmp	 DWORD PTR kind$[rsp], 2
  00786	75 1a		 jne	 SHORT $LN76@parse_arra
  00788	48 8b 44 24 58	 mov	 rax, QWORD PTR str$[rsp]
  0078d	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  00795	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  00799	89 84 24 bc 00
	00 00		 mov	 DWORD PTR tv313[rsp], eax
  007a0	eb 17		 jmp	 SHORT $LN77@parse_arra
$LN76@parse_arra:
  007a2	48 8b 44 24 58	 mov	 rax, QWORD PTR str$[rsp]
  007a7	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  007af	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  007b2	89 84 24 bc 00
	00 00		 mov	 DWORD PTR tv313[rsp], eax
$LN77@parse_arra:
  007b9	8b 84 24 bc 00
	00 00		 mov	 eax, DWORD PTR tv313[rsp]
  007c0	89 84 24 b8 00
	00 00		 mov	 DWORD PTR tv314[rsp], eax
$LN79@parse_arra:
  007c7	83 bc 24 b8 00
	00 00 0a	 cmp	 DWORD PTR tv314[rsp], 10
  007cf	74 76		 je	 SHORT $LN14@parse_arra
  007d1	83 7c 24 30 01	 cmp	 DWORD PTR kind$[rsp], 1
  007d6	75 1f		 jne	 SHORT $LN82@parse_arra
  007d8	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR idx$[rsp]
  007e0	48 8b 4c 24 58	 mov	 rcx, QWORD PTR str$[rsp]
  007e5	48 03 c8	 add	 rcx, rax
  007e8	48 8b c1	 mov	 rax, rcx
  007eb	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  007ee	89 84 24 c0 00
	00 00		 mov	 DWORD PTR tv326[rsp], eax
  007f5	eb 46		 jmp	 SHORT $LN83@parse_arra
$LN82@parse_arra:
  007f7	83 7c 24 30 02	 cmp	 DWORD PTR kind$[rsp], 2
  007fc	75 1a		 jne	 SHORT $LN80@parse_arra
  007fe	48 8b 44 24 58	 mov	 rax, QWORD PTR str$[rsp]
  00803	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  0080b	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  0080f	89 84 24 c4 00
	00 00		 mov	 DWORD PTR tv325[rsp], eax
  00816	eb 17		 jmp	 SHORT $LN81@parse_arra
$LN80@parse_arra:
  00818	48 8b 44 24 58	 mov	 rax, QWORD PTR str$[rsp]
  0081d	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  00825	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  00828	89 84 24 c4 00
	00 00		 mov	 DWORD PTR tv325[rsp], eax
$LN81@parse_arra:
  0082f	8b 84 24 c4 00
	00 00		 mov	 eax, DWORD PTR tv325[rsp]
  00836	89 84 24 c0 00
	00 00		 mov	 DWORD PTR tv326[rsp], eax
$LN83@parse_arra:
  0083d	83 bc 24 c0 00
	00 00 0d	 cmp	 DWORD PTR tv326[rsp], 13
  00845	75 18		 jne	 SHORT $LN15@parse_arra
$LN14@parse_arra:
  00847	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR idx$[rsp]
  0084f	48 ff c0	 inc	 rax
  00852	48 89 84 24 20
	01 00 00	 mov	 QWORD PTR idx$[rsp], rax
  0085a	e9 f5 fd ff ff	 jmp	 $LN16@parse_arra
$LN15@parse_arra:

; 783  : 
; 784  :             /* bail if the array is closed or we didn't get the , delimiter */
; 785  :             if (idx > end_idx) break;

  0085f	48 8b 44 24 40	 mov	 rax, QWORD PTR end_idx$[rsp]
  00864	48 39 84 24 20
	01 00 00	 cmp	 QWORD PTR idx$[rsp], rax
  0086c	7e 05		 jle	 SHORT $LN13@parse_arra
  0086e	e9 3a 03 00 00	 jmp	 $LN23@parse_arra
$LN13@parse_arra:

; 786  :             if (PyUnicode_READ(kind, str, idx) == ']') {

  00873	83 7c 24 30 01	 cmp	 DWORD PTR kind$[rsp], 1
  00878	75 1f		 jne	 SHORT $LN86@parse_arra
  0087a	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR idx$[rsp]
  00882	48 8b 4c 24 58	 mov	 rcx, QWORD PTR str$[rsp]
  00887	48 03 c8	 add	 rcx, rax
  0088a	48 8b c1	 mov	 rax, rcx
  0088d	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00890	89 84 24 c8 00
	00 00		 mov	 DWORD PTR tv340[rsp], eax
  00897	eb 46		 jmp	 SHORT $LN87@parse_arra
$LN86@parse_arra:
  00899	83 7c 24 30 02	 cmp	 DWORD PTR kind$[rsp], 2
  0089e	75 1a		 jne	 SHORT $LN84@parse_arra
  008a0	48 8b 44 24 58	 mov	 rax, QWORD PTR str$[rsp]
  008a5	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  008ad	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  008b1	89 84 24 cc 00
	00 00		 mov	 DWORD PTR tv339[rsp], eax
  008b8	eb 17		 jmp	 SHORT $LN85@parse_arra
$LN84@parse_arra:
  008ba	48 8b 44 24 58	 mov	 rax, QWORD PTR str$[rsp]
  008bf	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  008c7	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  008ca	89 84 24 cc 00
	00 00		 mov	 DWORD PTR tv339[rsp], eax
$LN85@parse_arra:
  008d1	8b 84 24 cc 00
	00 00		 mov	 eax, DWORD PTR tv339[rsp]
  008d8	89 84 24 c8 00
	00 00		 mov	 DWORD PTR tv340[rsp], eax
$LN87@parse_arra:
  008df	83 bc 24 c8 00
	00 00 5d	 cmp	 DWORD PTR tv340[rsp], 93 ; 0000005dH
  008e7	75 0a		 jne	 SHORT $LN12@parse_arra

; 787  :                 break;

  008e9	e9 bf 02 00 00	 jmp	 $LN23@parse_arra
  008ee	e9 97 00 00 00	 jmp	 $LN11@parse_arra
$LN12@parse_arra:

; 788  :             }
; 789  :             else if (PyUnicode_READ(kind, str, idx) != ',') {

  008f3	83 7c 24 30 01	 cmp	 DWORD PTR kind$[rsp], 1
  008f8	75 1f		 jne	 SHORT $LN90@parse_arra
  008fa	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR idx$[rsp]
  00902	48 8b 4c 24 58	 mov	 rcx, QWORD PTR str$[rsp]
  00907	48 03 c8	 add	 rcx, rax
  0090a	48 8b c1	 mov	 rax, rcx
  0090d	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00910	89 84 24 d0 00
	00 00		 mov	 DWORD PTR tv352[rsp], eax
  00917	eb 46		 jmp	 SHORT $LN91@parse_arra
$LN90@parse_arra:
  00919	83 7c 24 30 02	 cmp	 DWORD PTR kind$[rsp], 2
  0091e	75 1a		 jne	 SHORT $LN88@parse_arra
  00920	48 8b 44 24 58	 mov	 rax, QWORD PTR str$[rsp]
  00925	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  0092d	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  00931	89 84 24 d4 00
	00 00		 mov	 DWORD PTR tv351[rsp], eax
  00938	eb 17		 jmp	 SHORT $LN89@parse_arra
$LN88@parse_arra:
  0093a	48 8b 44 24 58	 mov	 rax, QWORD PTR str$[rsp]
  0093f	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  00947	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  0094a	89 84 24 d4 00
	00 00		 mov	 DWORD PTR tv351[rsp], eax
$LN89@parse_arra:
  00951	8b 84 24 d4 00
	00 00		 mov	 eax, DWORD PTR tv351[rsp]
  00958	89 84 24 d0 00
	00 00		 mov	 DWORD PTR tv352[rsp], eax
$LN91@parse_arra:
  0095f	83 bc 24 d0 00
	00 00 2c	 cmp	 DWORD PTR tv352[rsp], 44 ; 0000002cH
  00967	74 21		 je	 SHORT $LN10@parse_arra

; 790  :                 raise_errmsg("Expecting ',' delimiter", pystr, idx);

  00969	4c 8b 84 24 20
	01 00 00	 mov	 r8, QWORD PTR idx$[rsp]
  00971	48 8b 94 24 18
	01 00 00	 mov	 rdx, QWORD PTR pystr$[rsp]
  00979	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@EKLMLIIK@Expecting?5?8?0?8?5delimiter?$AA@
  00980	e8 00 00 00 00	 call	 raise_errmsg

; 791  :                 goto bail;

  00985	e9 e0 02 00 00	 jmp	 $bail$21494
$LN10@parse_arra:
$LN11@parse_arra:

; 792  :             }
; 793  :             idx++;

  0098a	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR idx$[rsp]
  00992	48 ff c0	 inc	 rax
  00995	48 89 84 24 20
	01 00 00	 mov	 QWORD PTR idx$[rsp], rax
$LN9@parse_arra:

; 794  : 
; 795  :             /* skip whitespace after , */
; 796  :             while (idx <= end_idx && IS_WHITESPACE(PyUnicode_READ(kind, str, idx))) idx++;

  0099d	48 8b 44 24 40	 mov	 rax, QWORD PTR end_idx$[rsp]
  009a2	48 39 84 24 20
	01 00 00	 cmp	 QWORD PTR idx$[rsp], rax
  009aa	0f 8f f8 01 00
	00		 jg	 $LN8@parse_arra
  009b0	83 7c 24 30 01	 cmp	 DWORD PTR kind$[rsp], 1
  009b5	75 1f		 jne	 SHORT $LN94@parse_arra
  009b7	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR idx$[rsp]
  009bf	48 8b 4c 24 58	 mov	 rcx, QWORD PTR str$[rsp]
  009c4	48 03 c8	 add	 rcx, rax
  009c7	48 8b c1	 mov	 rax, rcx
  009ca	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  009cd	89 84 24 d8 00
	00 00		 mov	 DWORD PTR tv369[rsp], eax
  009d4	eb 46		 jmp	 SHORT $LN95@parse_arra
$LN94@parse_arra:
  009d6	83 7c 24 30 02	 cmp	 DWORD PTR kind$[rsp], 2
  009db	75 1a		 jne	 SHORT $LN92@parse_arra
  009dd	48 8b 44 24 58	 mov	 rax, QWORD PTR str$[rsp]
  009e2	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  009ea	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  009ee	89 84 24 dc 00
	00 00		 mov	 DWORD PTR tv368[rsp], eax
  009f5	eb 17		 jmp	 SHORT $LN93@parse_arra
$LN92@parse_arra:
  009f7	48 8b 44 24 58	 mov	 rax, QWORD PTR str$[rsp]
  009fc	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  00a04	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  00a07	89 84 24 dc 00
	00 00		 mov	 DWORD PTR tv368[rsp], eax
$LN93@parse_arra:
  00a0e	8b 84 24 dc 00
	00 00		 mov	 eax, DWORD PTR tv368[rsp]
  00a15	89 84 24 d8 00
	00 00		 mov	 DWORD PTR tv369[rsp], eax
$LN95@parse_arra:
  00a1c	83 bc 24 d8 00
	00 00 20	 cmp	 DWORD PTR tv369[rsp], 32 ; 00000020H
  00a24	0f 84 66 01 00
	00		 je	 $LN7@parse_arra
  00a2a	83 7c 24 30 01	 cmp	 DWORD PTR kind$[rsp], 1
  00a2f	75 1f		 jne	 SHORT $LN98@parse_arra
  00a31	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR idx$[rsp]
  00a39	48 8b 4c 24 58	 mov	 rcx, QWORD PTR str$[rsp]
  00a3e	48 03 c8	 add	 rcx, rax
  00a41	48 8b c1	 mov	 rax, rcx
  00a44	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00a47	89 84 24 e0 00
	00 00		 mov	 DWORD PTR tv381[rsp], eax
  00a4e	eb 46		 jmp	 SHORT $LN99@parse_arra
$LN98@parse_arra:
  00a50	83 7c 24 30 02	 cmp	 DWORD PTR kind$[rsp], 2
  00a55	75 1a		 jne	 SHORT $LN96@parse_arra
  00a57	48 8b 44 24 58	 mov	 rax, QWORD PTR str$[rsp]
  00a5c	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  00a64	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  00a68	89 84 24 e4 00
	00 00		 mov	 DWORD PTR tv380[rsp], eax
  00a6f	eb 17		 jmp	 SHORT $LN97@parse_arra
$LN96@parse_arra:
  00a71	48 8b 44 24 58	 mov	 rax, QWORD PTR str$[rsp]
  00a76	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  00a7e	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  00a81	89 84 24 e4 00
	00 00		 mov	 DWORD PTR tv380[rsp], eax
$LN97@parse_arra:
  00a88	8b 84 24 e4 00
	00 00		 mov	 eax, DWORD PTR tv380[rsp]
  00a8f	89 84 24 e0 00
	00 00		 mov	 DWORD PTR tv381[rsp], eax
$LN99@parse_arra:
  00a96	83 bc 24 e0 00
	00 00 09	 cmp	 DWORD PTR tv381[rsp], 9
  00a9e	0f 84 ec 00 00
	00		 je	 $LN7@parse_arra
  00aa4	83 7c 24 30 01	 cmp	 DWORD PTR kind$[rsp], 1
  00aa9	75 1f		 jne	 SHORT $LN102@parse_arra
  00aab	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR idx$[rsp]
  00ab3	48 8b 4c 24 58	 mov	 rcx, QWORD PTR str$[rsp]
  00ab8	48 03 c8	 add	 rcx, rax
  00abb	48 8b c1	 mov	 rax, rcx
  00abe	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00ac1	89 84 24 e8 00
	00 00		 mov	 DWORD PTR tv393[rsp], eax
  00ac8	eb 46		 jmp	 SHORT $LN103@parse_arra
$LN102@parse_arra:
  00aca	83 7c 24 30 02	 cmp	 DWORD PTR kind$[rsp], 2
  00acf	75 1a		 jne	 SHORT $LN100@parse_arra
  00ad1	48 8b 44 24 58	 mov	 rax, QWORD PTR str$[rsp]
  00ad6	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  00ade	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  00ae2	89 84 24 ec 00
	00 00		 mov	 DWORD PTR tv392[rsp], eax
  00ae9	eb 17		 jmp	 SHORT $LN101@parse_arra
$LN100@parse_arra:
  00aeb	48 8b 44 24 58	 mov	 rax, QWORD PTR str$[rsp]
  00af0	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  00af8	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  00afb	89 84 24 ec 00
	00 00		 mov	 DWORD PTR tv392[rsp], eax
$LN101@parse_arra:
  00b02	8b 84 24 ec 00
	00 00		 mov	 eax, DWORD PTR tv392[rsp]
  00b09	89 84 24 e8 00
	00 00		 mov	 DWORD PTR tv393[rsp], eax
$LN103@parse_arra:
  00b10	83 bc 24 e8 00
	00 00 0a	 cmp	 DWORD PTR tv393[rsp], 10
  00b18	74 76		 je	 SHORT $LN7@parse_arra
  00b1a	83 7c 24 30 01	 cmp	 DWORD PTR kind$[rsp], 1
  00b1f	75 1f		 jne	 SHORT $LN106@parse_arra
  00b21	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR idx$[rsp]
  00b29	48 8b 4c 24 58	 mov	 rcx, QWORD PTR str$[rsp]
  00b2e	48 03 c8	 add	 rcx, rax
  00b31	48 8b c1	 mov	 rax, rcx
  00b34	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00b37	89 84 24 f0 00
	00 00		 mov	 DWORD PTR tv405[rsp], eax
  00b3e	eb 46		 jmp	 SHORT $LN107@parse_arra
$LN106@parse_arra:
  00b40	83 7c 24 30 02	 cmp	 DWORD PTR kind$[rsp], 2
  00b45	75 1a		 jne	 SHORT $LN104@parse_arra
  00b47	48 8b 44 24 58	 mov	 rax, QWORD PTR str$[rsp]
  00b4c	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  00b54	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  00b58	89 84 24 f4 00
	00 00		 mov	 DWORD PTR tv404[rsp], eax
  00b5f	eb 17		 jmp	 SHORT $LN105@parse_arra
$LN104@parse_arra:
  00b61	48 8b 44 24 58	 mov	 rax, QWORD PTR str$[rsp]
  00b66	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  00b6e	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  00b71	89 84 24 f4 00
	00 00		 mov	 DWORD PTR tv404[rsp], eax
$LN105@parse_arra:
  00b78	8b 84 24 f4 00
	00 00		 mov	 eax, DWORD PTR tv404[rsp]
  00b7f	89 84 24 f0 00
	00 00		 mov	 DWORD PTR tv405[rsp], eax
$LN107@parse_arra:
  00b86	83 bc 24 f0 00
	00 00 0d	 cmp	 DWORD PTR tv405[rsp], 13
  00b8e	75 18		 jne	 SHORT $LN8@parse_arra
$LN7@parse_arra:
  00b90	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR idx$[rsp]
  00b98	48 ff c0	 inc	 rax
  00b9b	48 89 84 24 20
	01 00 00	 mov	 QWORD PTR idx$[rsp], rax
  00ba3	e9 f5 fd ff ff	 jmp	 $LN9@parse_arra
$LN8@parse_arra:

; 797  :         }

  00ba8	e9 e5 f9 ff ff	 jmp	 $LN24@parse_arra
$LN23@parse_arra:
$LN25@parse_arra:

; 798  :     }
; 799  : 
; 800  :     /* verify that idx < end_idx, PyUnicode_READ(kind, str, idx) should be ']' */
; 801  :     if (idx > end_idx || PyUnicode_READ(kind, str, idx) != ']') {

  00bad	48 8b 44 24 40	 mov	 rax, QWORD PTR end_idx$[rsp]
  00bb2	48 39 84 24 20
	01 00 00	 cmp	 QWORD PTR idx$[rsp], rax
  00bba	7f 76		 jg	 SHORT $LN5@parse_arra
  00bbc	83 7c 24 30 01	 cmp	 DWORD PTR kind$[rsp], 1
  00bc1	75 1f		 jne	 SHORT $LN110@parse_arra
  00bc3	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR idx$[rsp]
  00bcb	48 8b 4c 24 58	 mov	 rcx, QWORD PTR str$[rsp]
  00bd0	48 03 c8	 add	 rcx, rax
  00bd3	48 8b c1	 mov	 rax, rcx
  00bd6	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00bd9	89 84 24 f8 00
	00 00		 mov	 DWORD PTR tv419[rsp], eax
  00be0	eb 46		 jmp	 SHORT $LN111@parse_arra
$LN110@parse_arra:
  00be2	83 7c 24 30 02	 cmp	 DWORD PTR kind$[rsp], 2
  00be7	75 1a		 jne	 SHORT $LN108@parse_arra
  00be9	48 8b 44 24 58	 mov	 rax, QWORD PTR str$[rsp]
  00bee	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  00bf6	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  00bfa	89 84 24 fc 00
	00 00		 mov	 DWORD PTR tv418[rsp], eax
  00c01	eb 17		 jmp	 SHORT $LN109@parse_arra
$LN108@parse_arra:
  00c03	48 8b 44 24 58	 mov	 rax, QWORD PTR str$[rsp]
  00c08	48 8b 8c 24 20
	01 00 00	 mov	 rcx, QWORD PTR idx$[rsp]
  00c10	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  00c13	89 84 24 fc 00
	00 00		 mov	 DWORD PTR tv418[rsp], eax
$LN109@parse_arra:
  00c1a	8b 84 24 fc 00
	00 00		 mov	 eax, DWORD PTR tv418[rsp]
  00c21	89 84 24 f8 00
	00 00		 mov	 DWORD PTR tv419[rsp], eax
$LN111@parse_arra:
  00c28	83 bc 24 f8 00
	00 00 5d	 cmp	 DWORD PTR tv419[rsp], 93 ; 0000005dH
  00c30	74 1b		 je	 SHORT $LN6@parse_arra
$LN5@parse_arra:

; 802  :         raise_errmsg("Expecting object", pystr, end_idx);

  00c32	4c 8b 44 24 40	 mov	 r8, QWORD PTR end_idx$[rsp]
  00c37	48 8b 94 24 18
	01 00 00	 mov	 rdx, QWORD PTR pystr$[rsp]
  00c3f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@GKGDLNNB@Expecting?5object?$AA@
  00c46	e8 00 00 00 00	 call	 raise_errmsg

; 803  :         goto bail;

  00c4b	eb 1d		 jmp	 SHORT $bail$21494
$LN6@parse_arra:

; 804  :     }
; 805  :     *next_idx_ptr = idx + 1;

  00c4d	48 8b 84 24 20
	01 00 00	 mov	 rax, QWORD PTR idx$[rsp]
  00c55	48 ff c0	 inc	 rax
  00c58	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR next_idx_ptr$[rsp]
  00c60	48 89 01	 mov	 QWORD PTR [rcx], rax

; 806  :     return rval;

  00c63	48 8b 44 24 38	 mov	 rax, QWORD PTR rval$[rsp]
  00c68	eb 24		 jmp	 SHORT $LN31@parse_arra
$bail$21494:
$LN4@parse_arra:

; 807  : bail:
; 808  :     Py_XDECREF(val);

  00c6a	48 83 7c 24 50
	00		 cmp	 QWORD PTR val$[rsp], 0
  00c70	74 0a		 je	 SHORT $LN1@parse_arra
  00c72	48 8b 4c 24 50	 mov	 rcx, QWORD PTR val$[rsp]
  00c77	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@parse_arra:
  00c7c	33 c0		 xor	 eax, eax
  00c7e	85 c0		 test	 eax, eax
  00c80	75 e8		 jne	 SHORT $LN4@parse_arra

; 809  :     Py_DECREF(rval);

  00c82	48 8b 4c 24 38	 mov	 rcx, QWORD PTR rval$[rsp]
  00c87	e8 00 00 00 00	 call	 _Py_DecRef

; 810  :     return NULL;

  00c8c	33 c0		 xor	 eax, eax
$LN31@parse_arra:

; 811  : }

  00c8e	48 81 c4 08 01
	00 00		 add	 rsp, 264		; 00000108H
  00c95	c3		 ret	 0
_parse_array_unicode ENDP
_TEXT	ENDS
PUBLIC	??_C@_1DC@NCDMMCKE@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAc?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CM@BNFNKLEN@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAc?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@ ; `string'
EXTRN	PyUnicode_InternFromString:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_parse_constant DD imagerel _parse_constant
	DD	imagerel _parse_constant+240
	DD	imagerel $unwind$_parse_constant
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_parse_constant DD 011801H
	DD	06218H
xdata	ENDS
;	COMDAT ??_C@_1DC@NCDMMCKE@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAc?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DC@NCDMMCKE@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAc?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'I', 00H, 'S', 00H, '_', 00H, 'R'
	DB	00H, 'E', 00H, 'A', 00H, 'D', 00H, 'Y', 00H, '(', 00H, 'c', 00H
	DB	's', 00H, 't', 00H, 'r', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CM@BNFNKLEN@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAc?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CM@BNFNKLEN@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAc?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, 'c', 00H, 's', 00H, 't', 00H, 'r', 00H
	DB	')', 00H, 00H, 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _parse_constant
_TEXT	SEGMENT
rval$ = 32
cstr$ = 40
s$ = 64
constant$ = 72
idx$ = 80
next_idx_ptr$ = 88
_parse_constant PROC					; COMDAT

; 814  : _parse_constant(PyScannerObject *s, char *constant, Py_ssize_t idx, Py_ssize_t *next_idx_ptr) {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 815  :     /* Read a JSON constant from PyString pystr.
; 816  :     constant is the constant string that was found
; 817  :         ("NaN", "Infinity", "-Infinity").
; 818  :     idx is the index of the first character of the constant
; 819  :     *next_idx_ptr is a return-by-reference index to the first character after
; 820  :         the constant.
; 821  : 
; 822  :     Returns the result of parse_constant
; 823  :     */
; 824  :     PyObject *cstr;
; 825  :     PyObject *rval;
; 826  :     /* constant is "NaN", "Infinity", or "-Infinity" */
; 827  :     cstr = PyUnicode_InternFromString(constant);

  00018	48 8b 4c 24 48	 mov	 rcx, QWORD PTR constant$[rsp]
  0001d	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  00022	48 89 44 24 28	 mov	 QWORD PTR cstr$[rsp], rax

; 828  :     if (cstr == NULL)

  00027	48 83 7c 24 28
	00		 cmp	 QWORD PTR cstr$[rsp], 0
  0002d	75 07		 jne	 SHORT $LN1@parse_cons

; 829  :         return NULL;

  0002f	33 c0		 xor	 eax, eax
  00031	e9 b5 00 00 00	 jmp	 $LN2@parse_cons
$LN1@parse_cons:

; 830  : 
; 831  :     /* rval = parse_constant(constant) */
; 832  :     rval = PyObject_CallFunctionObjArgs(s->parse_constant, cstr, NULL);

  00036	45 33 c0	 xor	 r8d, r8d
  00039	48 8b 54 24 28	 mov	 rdx, QWORD PTR cstr$[rsp]
  0003e	48 8b 44 24 40	 mov	 rax, QWORD PTR s$[rsp]
  00043	48 8b 88 88 00
	00 00		 mov	 rcx, QWORD PTR [rax+136]
  0004a	e8 00 00 00 00	 call	 PyObject_CallFunctionObjArgs
  0004f	48 89 44 24 20	 mov	 QWORD PTR rval$[rsp], rax

; 833  :     idx += PyUnicode_GET_LENGTH(cstr);

  00054	48 8b 44 24 28	 mov	 rax, QWORD PTR cstr$[rsp]
  00059	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0005d	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00063	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00068	85 c0		 test	 eax, eax
  0006a	75 1c		 jne	 SHORT $LN4@parse_cons
  0006c	41 b8 41 03 00
	00		 mov	 r8d, 833		; 00000341H
  00072	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@KOELJAMM@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAj?$AAs?$AAo?$AAn?$AA?4?$AAc?$AA?$AA@
  00079	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@BNFNKLEN@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAc?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  00080	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00086	33 c0		 xor	 eax, eax
$LN4@parse_cons:
  00088	48 8b 44 24 28	 mov	 rax, QWORD PTR cstr$[rsp]
  0008d	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00090	c1 e8 07	 shr	 eax, 7
  00093	83 e0 01	 and	 eax, 1
  00096	85 c0		 test	 eax, eax
  00098	75 1c		 jne	 SHORT $LN5@parse_cons
  0009a	41 b8 41 03 00
	00		 mov	 r8d, 833		; 00000341H
  000a0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@KOELJAMM@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAj?$AAs?$AAo?$AAn?$AA?4?$AAc?$AA?$AA@
  000a7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DC@NCDMMCKE@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAc?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  000ae	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000b4	33 c0		 xor	 eax, eax
$LN5@parse_cons:
  000b6	48 8b 44 24 28	 mov	 rax, QWORD PTR cstr$[rsp]
  000bb	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000bf	48 8b 4c 24 50	 mov	 rcx, QWORD PTR idx$[rsp]
  000c4	48 03 c8	 add	 rcx, rax
  000c7	48 8b c1	 mov	 rax, rcx
  000ca	48 89 44 24 50	 mov	 QWORD PTR idx$[rsp], rax

; 834  :     Py_DECREF(cstr);

  000cf	48 8b 4c 24 28	 mov	 rcx, QWORD PTR cstr$[rsp]
  000d4	e8 00 00 00 00	 call	 _Py_DecRef

; 835  :     *next_idx_ptr = idx;

  000d9	48 8b 44 24 58	 mov	 rax, QWORD PTR next_idx_ptr$[rsp]
  000de	48 8b 4c 24 50	 mov	 rcx, QWORD PTR idx$[rsp]
  000e3	48 89 08	 mov	 QWORD PTR [rax], rcx

; 836  :     return rval;

  000e6	48 8b 44 24 20	 mov	 rax, QWORD PTR rval$[rsp]
$LN2@parse_cons:

; 837  : }

  000eb	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000ef	c3		 ret	 0
_parse_constant ENDP
_TEXT	ENDS
PUBLIC	??_C@_1CM@GICJDECF@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAn?$AAu?$AAm?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@ ; `string'
EXTRN	PyLong_FromString:PROC
EXTRN	PyFloat_FromString:PROC
EXTRN	PyBytes_FromStringAndSize:PROC
EXTRN	PyLong_Type:BYTE
EXTRN	PyFloat_Type:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$_match_number_unicode DD imagerel _match_number_unicode
	DD	imagerel _match_number_unicode+3844
	DD	imagerel $unwind$_match_number_unicode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_match_number_unicode DD 021b01H
	DD	027011bH
xdata	ENDS
;	COMDAT ??_C@_1CM@GICJDECF@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAn?$AAu?$AAm?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CM@GICJDECF@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAn?$AAu?$AAm?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'B', 00H, 'y', 00H, 't', 00H, 'e', 00H, 's', 00H
	DB	'_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, '('
	DB	00H, 'n', 00H, 'u', 00H, 'm', 00H, 's', 00H, 't', 00H, 'r', 00H
	DB	')', 00H, 00H, 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _match_number_unicode
_TEXT	SEGMENT
is_float$ = 32
kind$ = 36
rval$ = 40
end_idx$ = 48
idx$ = 56
custom_func$ = 64
numstr$ = 72
str$ = 80
e_start$21713 = 88
n$21760 = 96
i$21759 = 104
buf$21761 = 112
tv78 = 120
tv145 = 128
tv154 = 136
tv202 = 144
tv201 = 148
tv217 = 152
tv216 = 156
tv229 = 160
tv228 = 164
tv243 = 168
tv242 = 172
tv255 = 176
tv254 = 180
tv268 = 184
tv267 = 188
tv283 = 192
tv282 = 196
tv298 = 200
tv297 = 204
tv313 = 208
tv312 = 212
tv327 = 216
tv326 = 220
tv339 = 224
tv338 = 228
tv353 = 232
tv352 = 236
tv365 = 240
tv364 = 244
tv379 = 248
tv378 = 252
tv391 = 256
tv390 = 260
tv405 = 264
tv404 = 268
tv417 = 272
tv416 = 276
tv433 = 280
tv432 = 284
tv448 = 288
tv447 = 292
tv502 = 296
tv501 = 300
s$ = 320
pystr$ = 328
start$ = 336
next_idx_ptr$ = 344
_match_number_unicode PROC				; COMDAT

; 840  : _match_number_unicode(PyScannerObject *s, PyObject *pystr, Py_ssize_t start, Py_ssize_t *next_idx_ptr) {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec 38 01
	00 00		 sub	 rsp, 312		; 00000138H

; 841  :     /* Read a JSON number from PyUnicode pystr.
; 842  :     idx is the index of the first character of the number
; 843  :     *next_idx_ptr is a return-by-reference index to the first character after
; 844  :         the number.
; 845  : 
; 846  :     Returns a new PyObject representation of that number:
; 847  :         PyInt, PyLong, or PyFloat.
; 848  :         May return other types if parse_int or parse_float are set
; 849  :     */
; 850  :     void *str;
; 851  :     int kind;
; 852  :     Py_ssize_t end_idx;
; 853  :     Py_ssize_t idx = start;

  0001b	48 8b 84 24 50
	01 00 00	 mov	 rax, QWORD PTR start$[rsp]
  00023	48 89 44 24 38	 mov	 QWORD PTR idx$[rsp], rax

; 854  :     int is_float = 0;

  00028	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR is_float$[rsp], 0

; 855  :     PyObject *rval;
; 856  :     PyObject *numstr = NULL;

  00030	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR numstr$[rsp], 0

; 857  :     PyObject *custom_func;
; 858  : 
; 859  :     if (PyUnicode_READY(pystr) == -1)

  00039	48 8b 84 24 48
	01 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  00041	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00045	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0004b	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00050	85 c0		 test	 eax, eax
  00052	75 1c		 jne	 SHORT $LN36@match_numb
  00054	41 b8 5b 03 00
	00		 mov	 r8d, 859		; 0000035bH
  0005a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@KOELJAMM@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAj?$AAs?$AAo?$AAn?$AA?4?$AAc?$AA?$AA@
  00061	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@GLPHKNNN@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAp?$AAy?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  00068	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0006e	33 c0		 xor	 eax, eax
$LN36@match_numb:
  00070	48 8b 84 24 48
	01 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  00078	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0007b	c1 e8 07	 shr	 eax, 7
  0007e	83 e0 01	 and	 eax, 1
  00081	85 c0		 test	 eax, eax
  00083	74 0a		 je	 SHORT $LN37@match_numb
  00085	c7 44 24 78 00
	00 00 00	 mov	 DWORD PTR tv78[rsp], 0
  0008d	eb 11		 jmp	 SHORT $LN38@match_numb
$LN37@match_numb:
  0008f	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR pystr$[rsp]
  00097	e8 00 00 00 00	 call	 _PyUnicode_Ready
  0009c	89 44 24 78	 mov	 DWORD PTR tv78[rsp], eax
$LN38@match_numb:
  000a0	83 7c 24 78 ff	 cmp	 DWORD PTR tv78[rsp], -1
  000a5	75 07		 jne	 SHORT $LN33@match_numb

; 860  :         return NULL;

  000a7	33 c0		 xor	 eax, eax
  000a9	e9 4e 0e 00 00	 jmp	 $LN34@match_numb
$LN33@match_numb:

; 861  : 
; 862  :     str = PyUnicode_DATA(pystr);

  000ae	48 8b 84 24 48
	01 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  000b6	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000ba	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000c0	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  000c5	85 c0		 test	 eax, eax
  000c7	75 1c		 jne	 SHORT $LN39@match_numb
  000c9	41 b8 5e 03 00
	00		 mov	 r8d, 862		; 0000035eH
  000cf	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@KOELJAMM@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAj?$AAs?$AAo?$AAn?$AA?4?$AAc?$AA?$AA@
  000d6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@GLPHKNNN@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAp?$AAy?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  000dd	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000e3	33 c0		 xor	 eax, eax
$LN39@match_numb:
  000e5	48 8b 84 24 48
	01 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  000ed	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  000f0	c1 e8 05	 shr	 eax, 5
  000f3	83 e0 01	 and	 eax, 1
  000f6	85 c0		 test	 eax, eax
  000f8	0f 84 bd 00 00
	00		 je	 $LN45@match_numb
  000fe	48 8b 84 24 48
	01 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  00106	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0010a	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00110	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00115	85 c0		 test	 eax, eax
  00117	75 1c		 jne	 SHORT $LN40@match_numb
  00119	41 b8 5e 03 00
	00		 mov	 r8d, 862		; 0000035eH
  0011f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@KOELJAMM@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAj?$AAs?$AAo?$AAn?$AA?4?$AAc?$AA?$AA@
  00126	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@GLPHKNNN@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAp?$AAy?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  0012d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00133	33 c0		 xor	 eax, eax
$LN40@match_numb:
  00135	48 8b 84 24 48
	01 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  0013d	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00140	c1 e8 07	 shr	 eax, 7
  00143	83 e0 01	 and	 eax, 1
  00146	85 c0		 test	 eax, eax
  00148	75 1c		 jne	 SHORT $LN41@match_numb
  0014a	41 b8 5e 03 00
	00		 mov	 r8d, 862		; 0000035eH
  00150	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@KOELJAMM@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAj?$AAs?$AAo?$AAn?$AA?4?$AAc?$AA?$AA@
  00157	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@NACFPDOF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAp?$AAy?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  0015e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00164	33 c0		 xor	 eax, eax
$LN41@match_numb:
  00166	48 8b 84 24 48
	01 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  0016e	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00171	c1 e8 06	 shr	 eax, 6
  00174	83 e0 01	 and	 eax, 1
  00177	85 c0		 test	 eax, eax
  00179	74 18		 je	 SHORT $LN42@match_numb
  0017b	48 8b 84 24 48
	01 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  00183	48 05 80 00 00
	00		 add	 rax, 128		; 00000080H
  00189	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv145[rsp], rax
  00191	eb 16		 jmp	 SHORT $LN43@match_numb
$LN42@match_numb:
  00193	48 8b 84 24 48
	01 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  0019b	48 05 a0 00 00
	00		 add	 rax, 160		; 000000a0H
  001a1	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv145[rsp], rax
$LN43@match_numb:
  001a9	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR tv145[rsp]
  001b1	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv154[rsp], rax
  001b9	eb 45		 jmp	 SHORT $LN46@match_numb
$LN45@match_numb:
  001bb	48 8b 84 24 48
	01 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  001c3	48 83 b8 a0 00
	00 00 00	 cmp	 QWORD PTR [rax+160], 0
  001cb	75 1c		 jne	 SHORT $LN44@match_numb
  001cd	41 b8 5e 03 00
	00		 mov	 r8d, 862		; 0000035eH
  001d3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@KOELJAMM@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAj?$AAs?$AAo?$AAn?$AA?4?$AAc?$AA?$AA@
  001da	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EM@FMOHIEKB@?$AA?$CI?$AA?$CI?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?$CK?$AA?$CJ?$AA?$CI?$AAp?$AAy?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$CJ?$AA?9?$AA?$DO?$AAd?$AAa?$AAt@
  001e1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  001e7	33 c0		 xor	 eax, eax
$LN44@match_numb:
  001e9	48 8b 84 24 48
	01 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  001f1	48 8b 80 a0 00
	00 00		 mov	 rax, QWORD PTR [rax+160]
  001f8	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv154[rsp], rax
$LN46@match_numb:
  00200	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR tv154[rsp]
  00208	48 89 44 24 50	 mov	 QWORD PTR str$[rsp], rax

; 863  :     kind = PyUnicode_KIND(pystr);

  0020d	48 8b 84 24 48
	01 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  00215	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00219	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0021f	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00224	85 c0		 test	 eax, eax
  00226	75 1c		 jne	 SHORT $LN47@match_numb
  00228	41 b8 5f 03 00
	00		 mov	 r8d, 863		; 0000035fH
  0022e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@KOELJAMM@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAj?$AAs?$AAo?$AAn?$AA?4?$AAc?$AA?$AA@
  00235	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@GLPHKNNN@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAp?$AAy?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  0023c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00242	33 c0		 xor	 eax, eax
$LN47@match_numb:
  00244	48 8b 84 24 48
	01 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  0024c	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0024f	c1 e8 07	 shr	 eax, 7
  00252	83 e0 01	 and	 eax, 1
  00255	85 c0		 test	 eax, eax
  00257	75 1c		 jne	 SHORT $LN48@match_numb
  00259	41 b8 5f 03 00
	00		 mov	 r8d, 863		; 0000035fH
  0025f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@KOELJAMM@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAj?$AAs?$AAo?$AAn?$AA?4?$AAc?$AA?$AA@
  00266	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@NACFPDOF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAp?$AAy?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  0026d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00273	33 c0		 xor	 eax, eax
$LN48@match_numb:
  00275	48 8b 84 24 48
	01 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  0027d	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  00280	c1 e8 02	 shr	 eax, 2
  00283	83 e0 07	 and	 eax, 7
  00286	89 44 24 24	 mov	 DWORD PTR kind$[rsp], eax

; 864  :     end_idx = PyUnicode_GET_LENGTH(pystr) - 1;

  0028a	48 8b 84 24 48
	01 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  00292	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00296	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0029c	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  002a1	85 c0		 test	 eax, eax
  002a3	75 1c		 jne	 SHORT $LN49@match_numb
  002a5	41 b8 60 03 00
	00		 mov	 r8d, 864		; 00000360H
  002ab	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@KOELJAMM@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAj?$AAs?$AAo?$AAn?$AA?4?$AAc?$AA?$AA@
  002b2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CO@GLPHKNNN@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAp?$AAy?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  002b9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  002bf	33 c0		 xor	 eax, eax
$LN49@match_numb:
  002c1	48 8b 84 24 48
	01 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  002c9	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  002cc	c1 e8 07	 shr	 eax, 7
  002cf	83 e0 01	 and	 eax, 1
  002d2	85 c0		 test	 eax, eax
  002d4	75 1c		 jne	 SHORT $LN50@match_numb
  002d6	41 b8 60 03 00
	00		 mov	 r8d, 864		; 00000360H
  002dc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@KOELJAMM@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAj?$AAs?$AAo?$AAn?$AA?4?$AAc?$AA?$AA@
  002e3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@NACFPDOF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAp?$AAy?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  002ea	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  002f0	33 c0		 xor	 eax, eax
$LN50@match_numb:
  002f2	48 8b 84 24 48
	01 00 00	 mov	 rax, QWORD PTR pystr$[rsp]
  002fa	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  002fe	48 ff c8	 dec	 rax
  00301	48 89 44 24 30	 mov	 QWORD PTR end_idx$[rsp], rax

; 865  : 
; 866  :     /* read a sign if it's there, make sure it's not the end of the string */
; 867  :     if (PyUnicode_READ(kind, str, idx) == '-') {

  00306	83 7c 24 24 01	 cmp	 DWORD PTR kind$[rsp], 1
  0030b	75 1c		 jne	 SHORT $LN53@match_numb
  0030d	48 8b 44 24 38	 mov	 rax, QWORD PTR idx$[rsp]
  00312	48 8b 4c 24 50	 mov	 rcx, QWORD PTR str$[rsp]
  00317	48 03 c8	 add	 rcx, rax
  0031a	48 8b c1	 mov	 rax, rcx
  0031d	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00320	89 84 24 90 00
	00 00		 mov	 DWORD PTR tv202[rsp], eax
  00327	eb 40		 jmp	 SHORT $LN54@match_numb
$LN53@match_numb:
  00329	83 7c 24 24 02	 cmp	 DWORD PTR kind$[rsp], 2
  0032e	75 17		 jne	 SHORT $LN51@match_numb
  00330	48 8b 44 24 50	 mov	 rax, QWORD PTR str$[rsp]
  00335	48 8b 4c 24 38	 mov	 rcx, QWORD PTR idx$[rsp]
  0033a	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  0033e	89 84 24 94 00
	00 00		 mov	 DWORD PTR tv201[rsp], eax
  00345	eb 14		 jmp	 SHORT $LN52@match_numb
$LN51@match_numb:
  00347	48 8b 44 24 50	 mov	 rax, QWORD PTR str$[rsp]
  0034c	48 8b 4c 24 38	 mov	 rcx, QWORD PTR idx$[rsp]
  00351	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  00354	89 84 24 94 00
	00 00		 mov	 DWORD PTR tv201[rsp], eax
$LN52@match_numb:
  0035b	8b 84 24 94 00
	00 00		 mov	 eax, DWORD PTR tv201[rsp]
  00362	89 84 24 90 00
	00 00		 mov	 DWORD PTR tv202[rsp], eax
$LN54@match_numb:
  00369	83 bc 24 90 00
	00 00 2d	 cmp	 DWORD PTR tv202[rsp], 45 ; 0000002dH
  00371	75 2c		 jne	 SHORT $LN32@match_numb

; 868  :         idx++;

  00373	48 8b 44 24 38	 mov	 rax, QWORD PTR idx$[rsp]
  00378	48 ff c0	 inc	 rax
  0037b	48 89 44 24 38	 mov	 QWORD PTR idx$[rsp], rax

; 869  :         if (idx > end_idx) {

  00380	48 8b 44 24 30	 mov	 rax, QWORD PTR end_idx$[rsp]
  00385	48 39 44 24 38	 cmp	 QWORD PTR idx$[rsp], rax
  0038a	7e 13		 jle	 SHORT $LN31@match_numb

; 870  :             PyErr_SetNone(PyExc_StopIteration);

  0038c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_StopIteration
  00393	e8 00 00 00 00	 call	 PyErr_SetNone

; 871  :             return NULL;

  00398	33 c0		 xor	 eax, eax
  0039a	e9 5d 0b 00 00	 jmp	 $LN34@match_numb
$LN31@match_numb:
$LN32@match_numb:

; 872  :         }
; 873  :     }
; 874  : 
; 875  :     /* read as many integer digits as we find as long as it doesn't start with 0 */
; 876  :     if (PyUnicode_READ(kind, str, idx) >= '1' && PyUnicode_READ(kind, str, idx) <= '9') {

  0039f	83 7c 24 24 01	 cmp	 DWORD PTR kind$[rsp], 1
  003a4	75 1c		 jne	 SHORT $LN57@match_numb
  003a6	48 8b 44 24 38	 mov	 rax, QWORD PTR idx$[rsp]
  003ab	48 8b 4c 24 50	 mov	 rcx, QWORD PTR str$[rsp]
  003b0	48 03 c8	 add	 rcx, rax
  003b3	48 8b c1	 mov	 rax, rcx
  003b6	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  003b9	89 84 24 98 00
	00 00		 mov	 DWORD PTR tv217[rsp], eax
  003c0	eb 40		 jmp	 SHORT $LN58@match_numb
$LN57@match_numb:
  003c2	83 7c 24 24 02	 cmp	 DWORD PTR kind$[rsp], 2
  003c7	75 17		 jne	 SHORT $LN55@match_numb
  003c9	48 8b 44 24 50	 mov	 rax, QWORD PTR str$[rsp]
  003ce	48 8b 4c 24 38	 mov	 rcx, QWORD PTR idx$[rsp]
  003d3	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  003d7	89 84 24 9c 00
	00 00		 mov	 DWORD PTR tv216[rsp], eax
  003de	eb 14		 jmp	 SHORT $LN56@match_numb
$LN55@match_numb:
  003e0	48 8b 44 24 50	 mov	 rax, QWORD PTR str$[rsp]
  003e5	48 8b 4c 24 38	 mov	 rcx, QWORD PTR idx$[rsp]
  003ea	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  003ed	89 84 24 9c 00
	00 00		 mov	 DWORD PTR tv216[rsp], eax
$LN56@match_numb:
  003f4	8b 84 24 9c 00
	00 00		 mov	 eax, DWORD PTR tv216[rsp]
  003fb	89 84 24 98 00
	00 00		 mov	 DWORD PTR tv217[rsp], eax
$LN58@match_numb:
  00402	83 bc 24 98 00
	00 00 31	 cmp	 DWORD PTR tv217[rsp], 49 ; 00000031H
  0040a	0f 82 7f 01 00
	00		 jb	 $LN30@match_numb
  00410	83 7c 24 24 01	 cmp	 DWORD PTR kind$[rsp], 1
  00415	75 1c		 jne	 SHORT $LN61@match_numb
  00417	48 8b 44 24 38	 mov	 rax, QWORD PTR idx$[rsp]
  0041c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR str$[rsp]
  00421	48 03 c8	 add	 rcx, rax
  00424	48 8b c1	 mov	 rax, rcx
  00427	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0042a	89 84 24 a0 00
	00 00		 mov	 DWORD PTR tv229[rsp], eax
  00431	eb 40		 jmp	 SHORT $LN62@match_numb
$LN61@match_numb:
  00433	83 7c 24 24 02	 cmp	 DWORD PTR kind$[rsp], 2
  00438	75 17		 jne	 SHORT $LN59@match_numb
  0043a	48 8b 44 24 50	 mov	 rax, QWORD PTR str$[rsp]
  0043f	48 8b 4c 24 38	 mov	 rcx, QWORD PTR idx$[rsp]
  00444	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  00448	89 84 24 a4 00
	00 00		 mov	 DWORD PTR tv228[rsp], eax
  0044f	eb 14		 jmp	 SHORT $LN60@match_numb
$LN59@match_numb:
  00451	48 8b 44 24 50	 mov	 rax, QWORD PTR str$[rsp]
  00456	48 8b 4c 24 38	 mov	 rcx, QWORD PTR idx$[rsp]
  0045b	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  0045e	89 84 24 a4 00
	00 00		 mov	 DWORD PTR tv228[rsp], eax
$LN60@match_numb:
  00465	8b 84 24 a4 00
	00 00		 mov	 eax, DWORD PTR tv228[rsp]
  0046c	89 84 24 a0 00
	00 00		 mov	 DWORD PTR tv229[rsp], eax
$LN62@match_numb:
  00473	83 bc 24 a0 00
	00 00 39	 cmp	 DWORD PTR tv229[rsp], 57 ; 00000039H
  0047b	0f 87 0e 01 00
	00		 ja	 $LN30@match_numb

; 877  :         idx++;

  00481	48 8b 44 24 38	 mov	 rax, QWORD PTR idx$[rsp]
  00486	48 ff c0	 inc	 rax
  00489	48 89 44 24 38	 mov	 QWORD PTR idx$[rsp], rax
$LN29@match_numb:

; 878  :         while (idx <= end_idx && PyUnicode_READ(kind, str, idx) >= '0' && PyUnicode_READ(kind, str, idx) <= '9') idx++;

  0048e	48 8b 44 24 30	 mov	 rax, QWORD PTR end_idx$[rsp]
  00493	48 39 44 24 38	 cmp	 QWORD PTR idx$[rsp], rax
  00498	0f 8f ec 00 00
	00		 jg	 $LN28@match_numb
  0049e	83 7c 24 24 01	 cmp	 DWORD PTR kind$[rsp], 1
  004a3	75 1c		 jne	 SHORT $LN65@match_numb
  004a5	48 8b 44 24 38	 mov	 rax, QWORD PTR idx$[rsp]
  004aa	48 8b 4c 24 50	 mov	 rcx, QWORD PTR str$[rsp]
  004af	48 03 c8	 add	 rcx, rax
  004b2	48 8b c1	 mov	 rax, rcx
  004b5	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  004b8	89 84 24 a8 00
	00 00		 mov	 DWORD PTR tv243[rsp], eax
  004bf	eb 40		 jmp	 SHORT $LN66@match_numb
$LN65@match_numb:
  004c1	83 7c 24 24 02	 cmp	 DWORD PTR kind$[rsp], 2
  004c6	75 17		 jne	 SHORT $LN63@match_numb
  004c8	48 8b 44 24 50	 mov	 rax, QWORD PTR str$[rsp]
  004cd	48 8b 4c 24 38	 mov	 rcx, QWORD PTR idx$[rsp]
  004d2	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  004d6	89 84 24 ac 00
	00 00		 mov	 DWORD PTR tv242[rsp], eax
  004dd	eb 14		 jmp	 SHORT $LN64@match_numb
$LN63@match_numb:
  004df	48 8b 44 24 50	 mov	 rax, QWORD PTR str$[rsp]
  004e4	48 8b 4c 24 38	 mov	 rcx, QWORD PTR idx$[rsp]
  004e9	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  004ec	89 84 24 ac 00
	00 00		 mov	 DWORD PTR tv242[rsp], eax
$LN64@match_numb:
  004f3	8b 84 24 ac 00
	00 00		 mov	 eax, DWORD PTR tv242[rsp]
  004fa	89 84 24 a8 00
	00 00		 mov	 DWORD PTR tv243[rsp], eax
$LN66@match_numb:
  00501	83 bc 24 a8 00
	00 00 30	 cmp	 DWORD PTR tv243[rsp], 48 ; 00000030H
  00509	72 7f		 jb	 SHORT $LN28@match_numb
  0050b	83 7c 24 24 01	 cmp	 DWORD PTR kind$[rsp], 1
  00510	75 1c		 jne	 SHORT $LN69@match_numb
  00512	48 8b 44 24 38	 mov	 rax, QWORD PTR idx$[rsp]
  00517	48 8b 4c 24 50	 mov	 rcx, QWORD PTR str$[rsp]
  0051c	48 03 c8	 add	 rcx, rax
  0051f	48 8b c1	 mov	 rax, rcx
  00522	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00525	89 84 24 b0 00
	00 00		 mov	 DWORD PTR tv255[rsp], eax
  0052c	eb 40		 jmp	 SHORT $LN70@match_numb
$LN69@match_numb:
  0052e	83 7c 24 24 02	 cmp	 DWORD PTR kind$[rsp], 2
  00533	75 17		 jne	 SHORT $LN67@match_numb
  00535	48 8b 44 24 50	 mov	 rax, QWORD PTR str$[rsp]
  0053a	48 8b 4c 24 38	 mov	 rcx, QWORD PTR idx$[rsp]
  0053f	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  00543	89 84 24 b4 00
	00 00		 mov	 DWORD PTR tv254[rsp], eax
  0054a	eb 14		 jmp	 SHORT $LN68@match_numb
$LN67@match_numb:
  0054c	48 8b 44 24 50	 mov	 rax, QWORD PTR str$[rsp]
  00551	48 8b 4c 24 38	 mov	 rcx, QWORD PTR idx$[rsp]
  00556	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  00559	89 84 24 b4 00
	00 00		 mov	 DWORD PTR tv254[rsp], eax
$LN68@match_numb:
  00560	8b 84 24 b4 00
	00 00		 mov	 eax, DWORD PTR tv254[rsp]
  00567	89 84 24 b0 00
	00 00		 mov	 DWORD PTR tv255[rsp], eax
$LN70@match_numb:
  0056e	83 bc 24 b0 00
	00 00 39	 cmp	 DWORD PTR tv255[rsp], 57 ; 00000039H
  00576	77 12		 ja	 SHORT $LN28@match_numb
  00578	48 8b 44 24 38	 mov	 rax, QWORD PTR idx$[rsp]
  0057d	48 ff c0	 inc	 rax
  00580	48 89 44 24 38	 mov	 QWORD PTR idx$[rsp], rax
  00585	e9 04 ff ff ff	 jmp	 $LN29@match_numb
$LN28@match_numb:

; 879  :     }
; 880  :     /* if it starts with 0 we only expect one integer digit */
; 881  :     else if (PyUnicode_READ(kind, str, idx) == '0') {

  0058a	e9 8f 00 00 00	 jmp	 $LN27@match_numb
$LN30@match_numb:
  0058f	83 7c 24 24 01	 cmp	 DWORD PTR kind$[rsp], 1
  00594	75 1c		 jne	 SHORT $LN73@match_numb
  00596	48 8b 44 24 38	 mov	 rax, QWORD PTR idx$[rsp]
  0059b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR str$[rsp]
  005a0	48 03 c8	 add	 rcx, rax
  005a3	48 8b c1	 mov	 rax, rcx
  005a6	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  005a9	89 84 24 b8 00
	00 00		 mov	 DWORD PTR tv268[rsp], eax
  005b0	eb 40		 jmp	 SHORT $LN74@match_numb
$LN73@match_numb:
  005b2	83 7c 24 24 02	 cmp	 DWORD PTR kind$[rsp], 2
  005b7	75 17		 jne	 SHORT $LN71@match_numb
  005b9	48 8b 44 24 50	 mov	 rax, QWORD PTR str$[rsp]
  005be	48 8b 4c 24 38	 mov	 rcx, QWORD PTR idx$[rsp]
  005c3	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  005c7	89 84 24 bc 00
	00 00		 mov	 DWORD PTR tv267[rsp], eax
  005ce	eb 14		 jmp	 SHORT $LN72@match_numb
$LN71@match_numb:
  005d0	48 8b 44 24 50	 mov	 rax, QWORD PTR str$[rsp]
  005d5	48 8b 4c 24 38	 mov	 rcx, QWORD PTR idx$[rsp]
  005da	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  005dd	89 84 24 bc 00
	00 00		 mov	 DWORD PTR tv267[rsp], eax
$LN72@match_numb:
  005e4	8b 84 24 bc 00
	00 00		 mov	 eax, DWORD PTR tv267[rsp]
  005eb	89 84 24 b8 00
	00 00		 mov	 DWORD PTR tv268[rsp], eax
$LN74@match_numb:
  005f2	83 bc 24 b8 00
	00 00 30	 cmp	 DWORD PTR tv268[rsp], 48 ; 00000030H
  005fa	75 0f		 jne	 SHORT $LN26@match_numb

; 882  :         idx++;

  005fc	48 8b 44 24 38	 mov	 rax, QWORD PTR idx$[rsp]
  00601	48 ff c0	 inc	 rax
  00604	48 89 44 24 38	 mov	 QWORD PTR idx$[rsp], rax

; 883  :     }
; 884  :     /* no integer digits, error */
; 885  :     else {

  00609	eb 13		 jmp	 SHORT $LN25@match_numb
$LN26@match_numb:

; 886  :         PyErr_SetNone(PyExc_StopIteration);

  0060b	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_StopIteration
  00612	e8 00 00 00 00	 call	 PyErr_SetNone

; 887  :         return NULL;

  00617	33 c0		 xor	 eax, eax
  00619	e9 de 08 00 00	 jmp	 $LN34@match_numb
$LN25@match_numb:
$LN27@match_numb:

; 888  :     }
; 889  : 
; 890  :     /* if the next char is '.' followed by a digit then read all float digits */
; 891  :     if (idx < end_idx && PyUnicode_READ(kind, str, idx) == '.' && PyUnicode_READ(kind, str, idx + 1) >= '0' && PyUnicode_READ(kind, str, idx + 1) <= '9') {

  0061e	48 8b 44 24 30	 mov	 rax, QWORD PTR end_idx$[rsp]
  00623	48 39 44 24 38	 cmp	 QWORD PTR idx$[rsp], rax
  00628	0f 8d 6b 02 00
	00		 jge	 $LN24@match_numb
  0062e	83 7c 24 24 01	 cmp	 DWORD PTR kind$[rsp], 1
  00633	75 1c		 jne	 SHORT $LN77@match_numb
  00635	48 8b 44 24 38	 mov	 rax, QWORD PTR idx$[rsp]
  0063a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR str$[rsp]
  0063f	48 03 c8	 add	 rcx, rax
  00642	48 8b c1	 mov	 rax, rcx
  00645	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00648	89 84 24 c0 00
	00 00		 mov	 DWORD PTR tv283[rsp], eax
  0064f	eb 40		 jmp	 SHORT $LN78@match_numb
$LN77@match_numb:
  00651	83 7c 24 24 02	 cmp	 DWORD PTR kind$[rsp], 2
  00656	75 17		 jne	 SHORT $LN75@match_numb
  00658	48 8b 44 24 50	 mov	 rax, QWORD PTR str$[rsp]
  0065d	48 8b 4c 24 38	 mov	 rcx, QWORD PTR idx$[rsp]
  00662	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  00666	89 84 24 c4 00
	00 00		 mov	 DWORD PTR tv282[rsp], eax
  0066d	eb 14		 jmp	 SHORT $LN76@match_numb
$LN75@match_numb:
  0066f	48 8b 44 24 50	 mov	 rax, QWORD PTR str$[rsp]
  00674	48 8b 4c 24 38	 mov	 rcx, QWORD PTR idx$[rsp]
  00679	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  0067c	89 84 24 c4 00
	00 00		 mov	 DWORD PTR tv282[rsp], eax
$LN76@match_numb:
  00683	8b 84 24 c4 00
	00 00		 mov	 eax, DWORD PTR tv282[rsp]
  0068a	89 84 24 c0 00
	00 00		 mov	 DWORD PTR tv283[rsp], eax
$LN78@match_numb:
  00691	83 bc 24 c0 00
	00 00 2e	 cmp	 DWORD PTR tv283[rsp], 46 ; 0000002eH
  00699	0f 85 fa 01 00
	00		 jne	 $LN24@match_numb
  0069f	83 7c 24 24 01	 cmp	 DWORD PTR kind$[rsp], 1
  006a4	75 1d		 jne	 SHORT $LN81@match_numb
  006a6	48 8b 44 24 38	 mov	 rax, QWORD PTR idx$[rsp]
  006ab	48 8b 4c 24 50	 mov	 rcx, QWORD PTR str$[rsp]
  006b0	48 03 c8	 add	 rcx, rax
  006b3	48 8b c1	 mov	 rax, rcx
  006b6	0f b6 40 01	 movzx	 eax, BYTE PTR [rax+1]
  006ba	89 84 24 c8 00
	00 00		 mov	 DWORD PTR tv298[rsp], eax
  006c1	eb 42		 jmp	 SHORT $LN82@match_numb
$LN81@match_numb:
  006c3	83 7c 24 24 02	 cmp	 DWORD PTR kind$[rsp], 2
  006c8	75 18		 jne	 SHORT $LN79@match_numb
  006ca	48 8b 44 24 50	 mov	 rax, QWORD PTR str$[rsp]
  006cf	48 8b 4c 24 38	 mov	 rcx, QWORD PTR idx$[rsp]
  006d4	0f b7 44 48 02	 movzx	 eax, WORD PTR [rax+rcx*2+2]
  006d9	89 84 24 cc 00
	00 00		 mov	 DWORD PTR tv297[rsp], eax
  006e0	eb 15		 jmp	 SHORT $LN80@match_numb
$LN79@match_numb:
  006e2	48 8b 44 24 50	 mov	 rax, QWORD PTR str$[rsp]
  006e7	48 8b 4c 24 38	 mov	 rcx, QWORD PTR idx$[rsp]
  006ec	8b 44 88 04	 mov	 eax, DWORD PTR [rax+rcx*4+4]
  006f0	89 84 24 cc 00
	00 00		 mov	 DWORD PTR tv297[rsp], eax
$LN80@match_numb:
  006f7	8b 84 24 cc 00
	00 00		 mov	 eax, DWORD PTR tv297[rsp]
  006fe	89 84 24 c8 00
	00 00		 mov	 DWORD PTR tv298[rsp], eax
$LN82@match_numb:
  00705	83 bc 24 c8 00
	00 00 30	 cmp	 DWORD PTR tv298[rsp], 48 ; 00000030H
  0070d	0f 82 86 01 00
	00		 jb	 $LN24@match_numb
  00713	83 7c 24 24 01	 cmp	 DWORD PTR kind$[rsp], 1
  00718	75 1d		 jne	 SHORT $LN85@match_numb
  0071a	48 8b 44 24 38	 mov	 rax, QWORD PTR idx$[rsp]
  0071f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR str$[rsp]
  00724	48 03 c8	 add	 rcx, rax
  00727	48 8b c1	 mov	 rax, rcx
  0072a	0f b6 40 01	 movzx	 eax, BYTE PTR [rax+1]
  0072e	89 84 24 d0 00
	00 00		 mov	 DWORD PTR tv313[rsp], eax
  00735	eb 42		 jmp	 SHORT $LN86@match_numb
$LN85@match_numb:
  00737	83 7c 24 24 02	 cmp	 DWORD PTR kind$[rsp], 2
  0073c	75 18		 jne	 SHORT $LN83@match_numb
  0073e	48 8b 44 24 50	 mov	 rax, QWORD PTR str$[rsp]
  00743	48 8b 4c 24 38	 mov	 rcx, QWORD PTR idx$[rsp]
  00748	0f b7 44 48 02	 movzx	 eax, WORD PTR [rax+rcx*2+2]
  0074d	89 84 24 d4 00
	00 00		 mov	 DWORD PTR tv312[rsp], eax
  00754	eb 15		 jmp	 SHORT $LN84@match_numb
$LN83@match_numb:
  00756	48 8b 44 24 50	 mov	 rax, QWORD PTR str$[rsp]
  0075b	48 8b 4c 24 38	 mov	 rcx, QWORD PTR idx$[rsp]
  00760	8b 44 88 04	 mov	 eax, DWORD PTR [rax+rcx*4+4]
  00764	89 84 24 d4 00
	00 00		 mov	 DWORD PTR tv312[rsp], eax
$LN84@match_numb:
  0076b	8b 84 24 d4 00
	00 00		 mov	 eax, DWORD PTR tv312[rsp]
  00772	89 84 24 d0 00
	00 00		 mov	 DWORD PTR tv313[rsp], eax
$LN86@match_numb:
  00779	83 bc 24 d0 00
	00 00 39	 cmp	 DWORD PTR tv313[rsp], 57 ; 00000039H
  00781	0f 87 12 01 00
	00		 ja	 $LN24@match_numb

; 892  :         is_float = 1;

  00787	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR is_float$[rsp], 1

; 893  :         idx += 2;

  0078f	48 8b 44 24 38	 mov	 rax, QWORD PTR idx$[rsp]
  00794	48 83 c0 02	 add	 rax, 2
  00798	48 89 44 24 38	 mov	 QWORD PTR idx$[rsp], rax
$LN23@match_numb:

; 894  :         while (idx <= end_idx && PyUnicode_READ(kind, str, idx) >= '0' && PyUnicode_READ(kind, str, idx) <= '9') idx++;

  0079d	48 8b 44 24 30	 mov	 rax, QWORD PTR end_idx$[rsp]
  007a2	48 39 44 24 38	 cmp	 QWORD PTR idx$[rsp], rax
  007a7	0f 8f ec 00 00
	00		 jg	 $LN22@match_numb
  007ad	83 7c 24 24 01	 cmp	 DWORD PTR kind$[rsp], 1
  007b2	75 1c		 jne	 SHORT $LN89@match_numb
  007b4	48 8b 44 24 38	 mov	 rax, QWORD PTR idx$[rsp]
  007b9	48 8b 4c 24 50	 mov	 rcx, QWORD PTR str$[rsp]
  007be	48 03 c8	 add	 rcx, rax
  007c1	48 8b c1	 mov	 rax, rcx
  007c4	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  007c7	89 84 24 d8 00
	00 00		 mov	 DWORD PTR tv327[rsp], eax
  007ce	eb 40		 jmp	 SHORT $LN90@match_numb
$LN89@match_numb:
  007d0	83 7c 24 24 02	 cmp	 DWORD PTR kind$[rsp], 2
  007d5	75 17		 jne	 SHORT $LN87@match_numb
  007d7	48 8b 44 24 50	 mov	 rax, QWORD PTR str$[rsp]
  007dc	48 8b 4c 24 38	 mov	 rcx, QWORD PTR idx$[rsp]
  007e1	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  007e5	89 84 24 dc 00
	00 00		 mov	 DWORD PTR tv326[rsp], eax
  007ec	eb 14		 jmp	 SHORT $LN88@match_numb
$LN87@match_numb:
  007ee	48 8b 44 24 50	 mov	 rax, QWORD PTR str$[rsp]
  007f3	48 8b 4c 24 38	 mov	 rcx, QWORD PTR idx$[rsp]
  007f8	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  007fb	89 84 24 dc 00
	00 00		 mov	 DWORD PTR tv326[rsp], eax
$LN88@match_numb:
  00802	8b 84 24 dc 00
	00 00		 mov	 eax, DWORD PTR tv326[rsp]
  00809	89 84 24 d8 00
	00 00		 mov	 DWORD PTR tv327[rsp], eax
$LN90@match_numb:
  00810	83 bc 24 d8 00
	00 00 30	 cmp	 DWORD PTR tv327[rsp], 48 ; 00000030H
  00818	72 7f		 jb	 SHORT $LN22@match_numb
  0081a	83 7c 24 24 01	 cmp	 DWORD PTR kind$[rsp], 1
  0081f	75 1c		 jne	 SHORT $LN93@match_numb
  00821	48 8b 44 24 38	 mov	 rax, QWORD PTR idx$[rsp]
  00826	48 8b 4c 24 50	 mov	 rcx, QWORD PTR str$[rsp]
  0082b	48 03 c8	 add	 rcx, rax
  0082e	48 8b c1	 mov	 rax, rcx
  00831	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00834	89 84 24 e0 00
	00 00		 mov	 DWORD PTR tv339[rsp], eax
  0083b	eb 40		 jmp	 SHORT $LN94@match_numb
$LN93@match_numb:
  0083d	83 7c 24 24 02	 cmp	 DWORD PTR kind$[rsp], 2
  00842	75 17		 jne	 SHORT $LN91@match_numb
  00844	48 8b 44 24 50	 mov	 rax, QWORD PTR str$[rsp]
  00849	48 8b 4c 24 38	 mov	 rcx, QWORD PTR idx$[rsp]
  0084e	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  00852	89 84 24 e4 00
	00 00		 mov	 DWORD PTR tv338[rsp], eax
  00859	eb 14		 jmp	 SHORT $LN92@match_numb
$LN91@match_numb:
  0085b	48 8b 44 24 50	 mov	 rax, QWORD PTR str$[rsp]
  00860	48 8b 4c 24 38	 mov	 rcx, QWORD PTR idx$[rsp]
  00865	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  00868	89 84 24 e4 00
	00 00		 mov	 DWORD PTR tv338[rsp], eax
$LN92@match_numb:
  0086f	8b 84 24 e4 00
	00 00		 mov	 eax, DWORD PTR tv338[rsp]
  00876	89 84 24 e0 00
	00 00		 mov	 DWORD PTR tv339[rsp], eax
$LN94@match_numb:
  0087d	83 bc 24 e0 00
	00 00 39	 cmp	 DWORD PTR tv339[rsp], 57 ; 00000039H
  00885	77 12		 ja	 SHORT $LN22@match_numb
  00887	48 8b 44 24 38	 mov	 rax, QWORD PTR idx$[rsp]
  0088c	48 ff c0	 inc	 rax
  0088f	48 89 44 24 38	 mov	 QWORD PTR idx$[rsp], rax
  00894	e9 04 ff ff ff	 jmp	 $LN23@match_numb
$LN22@match_numb:
$LN24@match_numb:

; 895  :     }
; 896  : 
; 897  :     /* if the next char is 'e' or 'E' then maybe read the exponent (or backtrack) */
; 898  :     if (idx < end_idx && (PyUnicode_READ(kind, str, idx) == 'e' || PyUnicode_READ(kind, str, idx) == 'E')) {

  00899	48 8b 44 24 30	 mov	 rax, QWORD PTR end_idx$[rsp]
  0089e	48 39 44 24 38	 cmp	 QWORD PTR idx$[rsp], rax
  008a3	0f 8d dc 03 00
	00		 jge	 $LN21@match_numb
  008a9	83 7c 24 24 01	 cmp	 DWORD PTR kind$[rsp], 1
  008ae	75 1c		 jne	 SHORT $LN97@match_numb
  008b0	48 8b 44 24 38	 mov	 rax, QWORD PTR idx$[rsp]
  008b5	48 8b 4c 24 50	 mov	 rcx, QWORD PTR str$[rsp]
  008ba	48 03 c8	 add	 rcx, rax
  008bd	48 8b c1	 mov	 rax, rcx
  008c0	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  008c3	89 84 24 e8 00
	00 00		 mov	 DWORD PTR tv353[rsp], eax
  008ca	eb 40		 jmp	 SHORT $LN98@match_numb
$LN97@match_numb:
  008cc	83 7c 24 24 02	 cmp	 DWORD PTR kind$[rsp], 2
  008d1	75 17		 jne	 SHORT $LN95@match_numb
  008d3	48 8b 44 24 50	 mov	 rax, QWORD PTR str$[rsp]
  008d8	48 8b 4c 24 38	 mov	 rcx, QWORD PTR idx$[rsp]
  008dd	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  008e1	89 84 24 ec 00
	00 00		 mov	 DWORD PTR tv352[rsp], eax
  008e8	eb 14		 jmp	 SHORT $LN96@match_numb
$LN95@match_numb:
  008ea	48 8b 44 24 50	 mov	 rax, QWORD PTR str$[rsp]
  008ef	48 8b 4c 24 38	 mov	 rcx, QWORD PTR idx$[rsp]
  008f4	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  008f7	89 84 24 ec 00
	00 00		 mov	 DWORD PTR tv352[rsp], eax
$LN96@match_numb:
  008fe	8b 84 24 ec 00
	00 00		 mov	 eax, DWORD PTR tv352[rsp]
  00905	89 84 24 e8 00
	00 00		 mov	 DWORD PTR tv353[rsp], eax
$LN98@match_numb:
  0090c	83 bc 24 e8 00
	00 00 65	 cmp	 DWORD PTR tv353[rsp], 101 ; 00000065H
  00914	74 71		 je	 SHORT $LN20@match_numb
  00916	83 7c 24 24 01	 cmp	 DWORD PTR kind$[rsp], 1
  0091b	75 1c		 jne	 SHORT $LN101@match_numb
  0091d	48 8b 44 24 38	 mov	 rax, QWORD PTR idx$[rsp]
  00922	48 8b 4c 24 50	 mov	 rcx, QWORD PTR str$[rsp]
  00927	48 03 c8	 add	 rcx, rax
  0092a	48 8b c1	 mov	 rax, rcx
  0092d	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00930	89 84 24 f0 00
	00 00		 mov	 DWORD PTR tv365[rsp], eax
  00937	eb 40		 jmp	 SHORT $LN102@match_numb
$LN101@match_numb:
  00939	83 7c 24 24 02	 cmp	 DWORD PTR kind$[rsp], 2
  0093e	75 17		 jne	 SHORT $LN99@match_numb
  00940	48 8b 44 24 50	 mov	 rax, QWORD PTR str$[rsp]
  00945	48 8b 4c 24 38	 mov	 rcx, QWORD PTR idx$[rsp]
  0094a	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  0094e	89 84 24 f4 00
	00 00		 mov	 DWORD PTR tv364[rsp], eax
  00955	eb 14		 jmp	 SHORT $LN100@match_numb
$LN99@match_numb:
  00957	48 8b 44 24 50	 mov	 rax, QWORD PTR str$[rsp]
  0095c	48 8b 4c 24 38	 mov	 rcx, QWORD PTR idx$[rsp]
  00961	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  00964	89 84 24 f4 00
	00 00		 mov	 DWORD PTR tv364[rsp], eax
$LN100@match_numb:
  0096b	8b 84 24 f4 00
	00 00		 mov	 eax, DWORD PTR tv364[rsp]
  00972	89 84 24 f0 00
	00 00		 mov	 DWORD PTR tv365[rsp], eax
$LN102@match_numb:
  00979	83 bc 24 f0 00
	00 00 45	 cmp	 DWORD PTR tv365[rsp], 69 ; 00000045H
  00981	0f 85 fe 02 00
	00		 jne	 $LN21@match_numb
$LN20@match_numb:

; 899  :         Py_ssize_t e_start = idx;

  00987	48 8b 44 24 38	 mov	 rax, QWORD PTR idx$[rsp]
  0098c	48 89 44 24 58	 mov	 QWORD PTR e_start$21713[rsp], rax

; 900  :         idx++;

  00991	48 8b 44 24 38	 mov	 rax, QWORD PTR idx$[rsp]
  00996	48 ff c0	 inc	 rax
  00999	48 89 44 24 38	 mov	 QWORD PTR idx$[rsp], rax

; 901  : 
; 902  :         /* read an exponent sign if present */
; 903  :         if (idx < end_idx && (PyUnicode_READ(kind, str, idx) == '-' || PyUnicode_READ(kind, str, idx) == '+')) idx++;

  0099e	48 8b 44 24 30	 mov	 rax, QWORD PTR end_idx$[rsp]
  009a3	48 39 44 24 38	 cmp	 QWORD PTR idx$[rsp], rax
  009a8	0f 8d e7 00 00
	00		 jge	 $LN19@match_numb
  009ae	83 7c 24 24 01	 cmp	 DWORD PTR kind$[rsp], 1
  009b3	75 1c		 jne	 SHORT $LN105@match_numb
  009b5	48 8b 44 24 38	 mov	 rax, QWORD PTR idx$[rsp]
  009ba	48 8b 4c 24 50	 mov	 rcx, QWORD PTR str$[rsp]
  009bf	48 03 c8	 add	 rcx, rax
  009c2	48 8b c1	 mov	 rax, rcx
  009c5	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  009c8	89 84 24 f8 00
	00 00		 mov	 DWORD PTR tv379[rsp], eax
  009cf	eb 40		 jmp	 SHORT $LN106@match_numb
$LN105@match_numb:
  009d1	83 7c 24 24 02	 cmp	 DWORD PTR kind$[rsp], 2
  009d6	75 17		 jne	 SHORT $LN103@match_numb
  009d8	48 8b 44 24 50	 mov	 rax, QWORD PTR str$[rsp]
  009dd	48 8b 4c 24 38	 mov	 rcx, QWORD PTR idx$[rsp]
  009e2	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  009e6	89 84 24 fc 00
	00 00		 mov	 DWORD PTR tv378[rsp], eax
  009ed	eb 14		 jmp	 SHORT $LN104@match_numb
$LN103@match_numb:
  009ef	48 8b 44 24 50	 mov	 rax, QWORD PTR str$[rsp]
  009f4	48 8b 4c 24 38	 mov	 rcx, QWORD PTR idx$[rsp]
  009f9	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  009fc	89 84 24 fc 00
	00 00		 mov	 DWORD PTR tv378[rsp], eax
$LN104@match_numb:
  00a03	8b 84 24 fc 00
	00 00		 mov	 eax, DWORD PTR tv378[rsp]
  00a0a	89 84 24 f8 00
	00 00		 mov	 DWORD PTR tv379[rsp], eax
$LN106@match_numb:
  00a11	83 bc 24 f8 00
	00 00 2d	 cmp	 DWORD PTR tv379[rsp], 45 ; 0000002dH
  00a19	74 6d		 je	 SHORT $LN18@match_numb
  00a1b	83 7c 24 24 01	 cmp	 DWORD PTR kind$[rsp], 1
  00a20	75 1c		 jne	 SHORT $LN109@match_numb
  00a22	48 8b 44 24 38	 mov	 rax, QWORD PTR idx$[rsp]
  00a27	48 8b 4c 24 50	 mov	 rcx, QWORD PTR str$[rsp]
  00a2c	48 03 c8	 add	 rcx, rax
  00a2f	48 8b c1	 mov	 rax, rcx
  00a32	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00a35	89 84 24 00 01
	00 00		 mov	 DWORD PTR tv391[rsp], eax
  00a3c	eb 40		 jmp	 SHORT $LN110@match_numb
$LN109@match_numb:
  00a3e	83 7c 24 24 02	 cmp	 DWORD PTR kind$[rsp], 2
  00a43	75 17		 jne	 SHORT $LN107@match_numb
  00a45	48 8b 44 24 50	 mov	 rax, QWORD PTR str$[rsp]
  00a4a	48 8b 4c 24 38	 mov	 rcx, QWORD PTR idx$[rsp]
  00a4f	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  00a53	89 84 24 04 01
	00 00		 mov	 DWORD PTR tv390[rsp], eax
  00a5a	eb 14		 jmp	 SHORT $LN108@match_numb
$LN107@match_numb:
  00a5c	48 8b 44 24 50	 mov	 rax, QWORD PTR str$[rsp]
  00a61	48 8b 4c 24 38	 mov	 rcx, QWORD PTR idx$[rsp]
  00a66	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  00a69	89 84 24 04 01
	00 00		 mov	 DWORD PTR tv390[rsp], eax
$LN108@match_numb:
  00a70	8b 84 24 04 01
	00 00		 mov	 eax, DWORD PTR tv390[rsp]
  00a77	89 84 24 00 01
	00 00		 mov	 DWORD PTR tv391[rsp], eax
$LN110@match_numb:
  00a7e	83 bc 24 00 01
	00 00 2b	 cmp	 DWORD PTR tv391[rsp], 43 ; 0000002bH
  00a86	75 0d		 jne	 SHORT $LN19@match_numb
$LN18@match_numb:
  00a88	48 8b 44 24 38	 mov	 rax, QWORD PTR idx$[rsp]
  00a8d	48 ff c0	 inc	 rax
  00a90	48 89 44 24 38	 mov	 QWORD PTR idx$[rsp], rax
$LN19@match_numb:
$LN17@match_numb:

; 904  : 
; 905  :         /* read all digits */
; 906  :         while (idx <= end_idx && PyUnicode_READ(kind, str, idx) >= '0' && PyUnicode_READ(kind, str, idx) <= '9') idx++;

  00a95	48 8b 44 24 30	 mov	 rax, QWORD PTR end_idx$[rsp]
  00a9a	48 39 44 24 38	 cmp	 QWORD PTR idx$[rsp], rax
  00a9f	0f 8f ec 00 00
	00		 jg	 $LN16@match_numb
  00aa5	83 7c 24 24 01	 cmp	 DWORD PTR kind$[rsp], 1
  00aaa	75 1c		 jne	 SHORT $LN113@match_numb
  00aac	48 8b 44 24 38	 mov	 rax, QWORD PTR idx$[rsp]
  00ab1	48 8b 4c 24 50	 mov	 rcx, QWORD PTR str$[rsp]
  00ab6	48 03 c8	 add	 rcx, rax
  00ab9	48 8b c1	 mov	 rax, rcx
  00abc	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00abf	89 84 24 08 01
	00 00		 mov	 DWORD PTR tv405[rsp], eax
  00ac6	eb 40		 jmp	 SHORT $LN114@match_numb
$LN113@match_numb:
  00ac8	83 7c 24 24 02	 cmp	 DWORD PTR kind$[rsp], 2
  00acd	75 17		 jne	 SHORT $LN111@match_numb
  00acf	48 8b 44 24 50	 mov	 rax, QWORD PTR str$[rsp]
  00ad4	48 8b 4c 24 38	 mov	 rcx, QWORD PTR idx$[rsp]
  00ad9	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  00add	89 84 24 0c 01
	00 00		 mov	 DWORD PTR tv404[rsp], eax
  00ae4	eb 14		 jmp	 SHORT $LN112@match_numb
$LN111@match_numb:
  00ae6	48 8b 44 24 50	 mov	 rax, QWORD PTR str$[rsp]
  00aeb	48 8b 4c 24 38	 mov	 rcx, QWORD PTR idx$[rsp]
  00af0	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  00af3	89 84 24 0c 01
	00 00		 mov	 DWORD PTR tv404[rsp], eax
$LN112@match_numb:
  00afa	8b 84 24 0c 01
	00 00		 mov	 eax, DWORD PTR tv404[rsp]
  00b01	89 84 24 08 01
	00 00		 mov	 DWORD PTR tv405[rsp], eax
$LN114@match_numb:
  00b08	83 bc 24 08 01
	00 00 30	 cmp	 DWORD PTR tv405[rsp], 48 ; 00000030H
  00b10	72 7f		 jb	 SHORT $LN16@match_numb
  00b12	83 7c 24 24 01	 cmp	 DWORD PTR kind$[rsp], 1
  00b17	75 1c		 jne	 SHORT $LN117@match_numb
  00b19	48 8b 44 24 38	 mov	 rax, QWORD PTR idx$[rsp]
  00b1e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR str$[rsp]
  00b23	48 03 c8	 add	 rcx, rax
  00b26	48 8b c1	 mov	 rax, rcx
  00b29	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00b2c	89 84 24 10 01
	00 00		 mov	 DWORD PTR tv417[rsp], eax
  00b33	eb 40		 jmp	 SHORT $LN118@match_numb
$LN117@match_numb:
  00b35	83 7c 24 24 02	 cmp	 DWORD PTR kind$[rsp], 2
  00b3a	75 17		 jne	 SHORT $LN115@match_numb
  00b3c	48 8b 44 24 50	 mov	 rax, QWORD PTR str$[rsp]
  00b41	48 8b 4c 24 38	 mov	 rcx, QWORD PTR idx$[rsp]
  00b46	0f b7 04 48	 movzx	 eax, WORD PTR [rax+rcx*2]
  00b4a	89 84 24 14 01
	00 00		 mov	 DWORD PTR tv416[rsp], eax
  00b51	eb 14		 jmp	 SHORT $LN116@match_numb
$LN115@match_numb:
  00b53	48 8b 44 24 50	 mov	 rax, QWORD PTR str$[rsp]
  00b58	48 8b 4c 24 38	 mov	 rcx, QWORD PTR idx$[rsp]
  00b5d	8b 04 88	 mov	 eax, DWORD PTR [rax+rcx*4]
  00b60	89 84 24 14 01
	00 00		 mov	 DWORD PTR tv416[rsp], eax
$LN116@match_numb:
  00b67	8b 84 24 14 01
	00 00		 mov	 eax, DWORD PTR tv416[rsp]
  00b6e	89 84 24 10 01
	00 00		 mov	 DWORD PTR tv417[rsp], eax
$LN118@match_numb:
  00b75	83 bc 24 10 01
	00 00 39	 cmp	 DWORD PTR tv417[rsp], 57 ; 00000039H
  00b7d	77 12		 ja	 SHORT $LN16@match_numb
  00b7f	48 8b 44 24 38	 mov	 rax, QWORD PTR idx$[rsp]
  00b84	48 ff c0	 inc	 rax
  00b87	48 89 44 24 38	 mov	 QWORD PTR idx$[rsp], rax
  00b8c	e9 04 ff ff ff	 jmp	 $LN17@match_numb
$LN16@match_numb:

; 907  : 
; 908  :         /* if we got a digit, then parse as float. if not, backtrack */
; 909  :         if (PyUnicode_READ(kind, str, idx - 1) >= '0' && PyUnicode_READ(kind, str, idx - 1) <= '9') {

  00b91	83 7c 24 24 01	 cmp	 DWORD PTR kind$[rsp], 1
  00b96	75 1d		 jne	 SHORT $LN121@match_numb
  00b98	48 8b 44 24 38	 mov	 rax, QWORD PTR idx$[rsp]
  00b9d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR str$[rsp]
  00ba2	48 03 c8	 add	 rcx, rax
  00ba5	48 8b c1	 mov	 rax, rcx
  00ba8	0f b6 40 ff	 movzx	 eax, BYTE PTR [rax-1]
  00bac	89 84 24 18 01
	00 00		 mov	 DWORD PTR tv433[rsp], eax
  00bb3	eb 42		 jmp	 SHORT $LN122@match_numb
$LN121@match_numb:
  00bb5	83 7c 24 24 02	 cmp	 DWORD PTR kind$[rsp], 2
  00bba	75 18		 jne	 SHORT $LN119@match_numb
  00bbc	48 8b 44 24 50	 mov	 rax, QWORD PTR str$[rsp]
  00bc1	48 8b 4c 24 38	 mov	 rcx, QWORD PTR idx$[rsp]
  00bc6	0f b7 44 48 fe	 movzx	 eax, WORD PTR [rax+rcx*2-2]
  00bcb	89 84 24 1c 01
	00 00		 mov	 DWORD PTR tv432[rsp], eax
  00bd2	eb 15		 jmp	 SHORT $LN120@match_numb
$LN119@match_numb:
  00bd4	48 8b 44 24 50	 mov	 rax, QWORD PTR str$[rsp]
  00bd9	48 8b 4c 24 38	 mov	 rcx, QWORD PTR idx$[rsp]
  00bde	8b 44 88 fc	 mov	 eax, DWORD PTR [rax+rcx*4-4]
  00be2	89 84 24 1c 01
	00 00		 mov	 DWORD PTR tv432[rsp], eax
$LN120@match_numb:
  00be9	8b 84 24 1c 01
	00 00		 mov	 eax, DWORD PTR tv432[rsp]
  00bf0	89 84 24 18 01
	00 00		 mov	 DWORD PTR tv433[rsp], eax
$LN122@match_numb:
  00bf7	83 bc 24 18 01
	00 00 30	 cmp	 DWORD PTR tv433[rsp], 48 ; 00000030H
  00bff	72 7a		 jb	 SHORT $LN15@match_numb
  00c01	83 7c 24 24 01	 cmp	 DWORD PTR kind$[rsp], 1
  00c06	75 1d		 jne	 SHORT $LN125@match_numb
  00c08	48 8b 44 24 38	 mov	 rax, QWORD PTR idx$[rsp]
  00c0d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR str$[rsp]
  00c12	48 03 c8	 add	 rcx, rax
  00c15	48 8b c1	 mov	 rax, rcx
  00c18	0f b6 40 ff	 movzx	 eax, BYTE PTR [rax-1]
  00c1c	89 84 24 20 01
	00 00		 mov	 DWORD PTR tv448[rsp], eax
  00c23	eb 42		 jmp	 SHORT $LN126@match_numb
$LN125@match_numb:
  00c25	83 7c 24 24 02	 cmp	 DWORD PTR kind$[rsp], 2
  00c2a	75 18		 jne	 SHORT $LN123@match_numb
  00c2c	48 8b 44 24 50	 mov	 rax, QWORD PTR str$[rsp]
  00c31	48 8b 4c 24 38	 mov	 rcx, QWORD PTR idx$[rsp]
  00c36	0f b7 44 48 fe	 movzx	 eax, WORD PTR [rax+rcx*2-2]
  00c3b	89 84 24 24 01
	00 00		 mov	 DWORD PTR tv447[rsp], eax
  00c42	eb 15		 jmp	 SHORT $LN124@match_numb
$LN123@match_numb:
  00c44	48 8b 44 24 50	 mov	 rax, QWORD PTR str$[rsp]
  00c49	48 8b 4c 24 38	 mov	 rcx, QWORD PTR idx$[rsp]
  00c4e	8b 44 88 fc	 mov	 eax, DWORD PTR [rax+rcx*4-4]
  00c52	89 84 24 24 01
	00 00		 mov	 DWORD PTR tv447[rsp], eax
$LN124@match_numb:
  00c59	8b 84 24 24 01
	00 00		 mov	 eax, DWORD PTR tv447[rsp]
  00c60	89 84 24 20 01
	00 00		 mov	 DWORD PTR tv448[rsp], eax
$LN126@match_numb:
  00c67	83 bc 24 20 01
	00 00 39	 cmp	 DWORD PTR tv448[rsp], 57 ; 00000039H
  00c6f	77 0a		 ja	 SHORT $LN15@match_numb

; 910  :             is_float = 1;

  00c71	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR is_float$[rsp], 1

; 911  :         }
; 912  :         else {

  00c79	eb 0a		 jmp	 SHORT $LN14@match_numb
$LN15@match_numb:

; 913  :             idx = e_start;

  00c7b	48 8b 44 24 58	 mov	 rax, QWORD PTR e_start$21713[rsp]
  00c80	48 89 44 24 38	 mov	 QWORD PTR idx$[rsp], rax
$LN14@match_numb:
$LN21@match_numb:

; 914  :         }
; 915  :     }
; 916  : 
; 917  :     if (is_float && s->parse_float != (PyObject *)&PyFloat_Type)

  00c85	83 7c 24 20 00	 cmp	 DWORD PTR is_float$[rsp], 0
  00c8a	74 28		 je	 SHORT $LN13@match_numb
  00c8c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyFloat_Type
  00c93	48 8b 8c 24 40
	01 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  00c9b	48 39 41 78	 cmp	 QWORD PTR [rcx+120], rax
  00c9f	74 13		 je	 SHORT $LN13@match_numb

; 918  :         custom_func = s->parse_float;

  00ca1	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00ca9	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  00cad	48 89 44 24 40	 mov	 QWORD PTR custom_func$[rsp], rax
  00cb2	eb 3e		 jmp	 SHORT $LN12@match_numb
$LN13@match_numb:

; 919  :     else if (!is_float && s->parse_int != (PyObject *) &PyLong_Type)

  00cb4	83 7c 24 20 00	 cmp	 DWORD PTR is_float$[rsp], 0
  00cb9	75 2e		 jne	 SHORT $LN11@match_numb
  00cbb	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyLong_Type
  00cc2	48 8b 8c 24 40
	01 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  00cca	48 39 81 80 00
	00 00		 cmp	 QWORD PTR [rcx+128], rax
  00cd1	74 16		 je	 SHORT $LN11@match_numb

; 920  :         custom_func = s->parse_int;

  00cd3	48 8b 84 24 40
	01 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00cdb	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  00ce2	48 89 44 24 40	 mov	 QWORD PTR custom_func$[rsp], rax

; 921  :     else

  00ce7	eb 09		 jmp	 SHORT $LN10@match_numb
$LN11@match_numb:

; 922  :         custom_func = NULL;

  00ce9	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR custom_func$[rsp], 0
$LN10@match_numb:
$LN12@match_numb:

; 923  : 
; 924  :     if (custom_func) {

  00cf2	48 83 7c 24 40
	00		 cmp	 QWORD PTR custom_func$[rsp], 0
  00cf8	74 6b		 je	 SHORT $LN9@match_numb

; 925  :         /* copy the section we determined to be a number */
; 926  :         numstr = PyUnicode_FromKindAndData(kind,
; 927  :                                            (char*)str + kind * start,
; 928  :                                            idx - start);

  00cfa	48 8b 84 24 50
	01 00 00	 mov	 rax, QWORD PTR start$[rsp]
  00d02	48 8b 4c 24 38	 mov	 rcx, QWORD PTR idx$[rsp]
  00d07	48 2b c8	 sub	 rcx, rax
  00d0a	48 8b c1	 mov	 rax, rcx
  00d0d	48 63 4c 24 24	 movsxd	 rcx, DWORD PTR kind$[rsp]
  00d12	48 0f af 8c 24
	50 01 00 00	 imul	 rcx, QWORD PTR start$[rsp]
  00d1b	48 8b 54 24 50	 mov	 rdx, QWORD PTR str$[rsp]
  00d20	48 03 d1	 add	 rdx, rcx
  00d23	48 8b ca	 mov	 rcx, rdx
  00d26	4c 8b c0	 mov	 r8, rax
  00d29	48 8b d1	 mov	 rdx, rcx
  00d2c	8b 4c 24 24	 mov	 ecx, DWORD PTR kind$[rsp]
  00d30	e8 00 00 00 00	 call	 PyUnicode_FromKindAndData
  00d35	48 89 44 24 48	 mov	 QWORD PTR numstr$[rsp], rax

; 929  :         if (numstr == NULL)

  00d3a	48 83 7c 24 48
	00		 cmp	 QWORD PTR numstr$[rsp], 0
  00d40	75 07		 jne	 SHORT $LN8@match_numb

; 930  :             return NULL;

  00d42	33 c0		 xor	 eax, eax
  00d44	e9 b3 01 00 00	 jmp	 $LN34@match_numb
$LN8@match_numb:

; 931  :         rval = PyObject_CallFunctionObjArgs(custom_func, numstr, NULL);

  00d49	45 33 c0	 xor	 r8d, r8d
  00d4c	48 8b 54 24 48	 mov	 rdx, QWORD PTR numstr$[rsp]
  00d51	48 8b 4c 24 40	 mov	 rcx, QWORD PTR custom_func$[rsp]
  00d56	e8 00 00 00 00	 call	 PyObject_CallFunctionObjArgs
  00d5b	48 89 44 24 28	 mov	 QWORD PTR rval$[rsp], rax

; 932  :     }
; 933  :     else {

  00d60	e9 78 01 00 00	 jmp	 $LN7@match_numb
$LN9@match_numb:

; 934  :         Py_ssize_t i, n;
; 935  :         char *buf;
; 936  :         /* Straight conversion to ASCII, to avoid costly conversion of
; 937  :            decimal unicode digits (which cannot appear here) */
; 938  :         n = idx - start;

  00d65	48 8b 84 24 50
	01 00 00	 mov	 rax, QWORD PTR start$[rsp]
  00d6d	48 8b 4c 24 38	 mov	 rcx, QWORD PTR idx$[rsp]
  00d72	48 2b c8	 sub	 rcx, rax
  00d75	48 8b c1	 mov	 rax, rcx
  00d78	48 89 44 24 60	 mov	 QWORD PTR n$21760[rsp], rax

; 939  :         numstr = PyBytes_FromStringAndSize(NULL, n);

  00d7d	48 8b 54 24 60	 mov	 rdx, QWORD PTR n$21760[rsp]
  00d82	33 c9		 xor	 ecx, ecx
  00d84	e8 00 00 00 00	 call	 PyBytes_FromStringAndSize
  00d89	48 89 44 24 48	 mov	 QWORD PTR numstr$[rsp], rax

; 940  :         if (numstr == NULL)

  00d8e	48 83 7c 24 48
	00		 cmp	 QWORD PTR numstr$[rsp], 0
  00d94	75 07		 jne	 SHORT $LN6@match_numb

; 941  :             return NULL;

  00d96	33 c0		 xor	 eax, eax
  00d98	e9 5f 01 00 00	 jmp	 $LN34@match_numb
$LN6@match_numb:

; 942  :         buf = PyBytes_AS_STRING(numstr);

  00d9d	48 8b 44 24 48	 mov	 rax, QWORD PTR numstr$[rsp]
  00da2	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00da6	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00dac	25 00 00 00 08	 and	 eax, 134217728		; 08000000H
  00db1	85 c0		 test	 eax, eax
  00db3	75 1c		 jne	 SHORT $LN127@match_numb
  00db5	41 b8 ae 03 00
	00		 mov	 r8d, 942		; 000003aeH
  00dbb	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@KOELJAMM@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAj?$AAs?$AAo?$AAn?$AA?4?$AAc?$AA?$AA@
  00dc2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@GICJDECF@?$AAP?$AAy?$AAB?$AAy?$AAt?$AAe?$AAs?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAn?$AAu?$AAm?$AAs?$AAt?$AAr?$AA?$CJ?$AA?$AA@
  00dc9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00dcf	33 c0		 xor	 eax, eax
$LN127@match_numb:
  00dd1	48 8b 44 24 48	 mov	 rax, QWORD PTR numstr$[rsp]
  00dd6	48 83 c0 78	 add	 rax, 120		; 00000078H
  00dda	48 89 44 24 70	 mov	 QWORD PTR buf$21761[rsp], rax

; 943  :         for (i = 0; i < n; i++) {

  00ddf	48 c7 44 24 68
	00 00 00 00	 mov	 QWORD PTR i$21759[rsp], 0
  00de8	eb 0d		 jmp	 SHORT $LN5@match_numb
$LN4@match_numb:
  00dea	48 8b 44 24 68	 mov	 rax, QWORD PTR i$21759[rsp]
  00def	48 ff c0	 inc	 rax
  00df2	48 89 44 24 68	 mov	 QWORD PTR i$21759[rsp], rax
$LN5@match_numb:
  00df7	48 8b 44 24 60	 mov	 rax, QWORD PTR n$21760[rsp]
  00dfc	48 39 44 24 68	 cmp	 QWORD PTR i$21759[rsp], rax
  00e01	0f 8d a7 00 00
	00		 jge	 $LN3@match_numb

; 944  :             buf[i] = (char) PyUnicode_READ(kind, str, i + start);

  00e07	83 7c 24 24 01	 cmp	 DWORD PTR kind$[rsp], 1
  00e0c	75 25		 jne	 SHORT $LN130@match_numb
  00e0e	48 8b 84 24 50
	01 00 00	 mov	 rax, QWORD PTR start$[rsp]
  00e16	48 8b 4c 24 68	 mov	 rcx, QWORD PTR i$21759[rsp]
  00e1b	48 03 c8	 add	 rcx, rax
  00e1e	48 8b c1	 mov	 rax, rcx
  00e21	48 8b 4c 24 50	 mov	 rcx, QWORD PTR str$[rsp]
  00e26	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  00e2a	89 84 24 28 01
	00 00		 mov	 DWORD PTR tv502[rsp], eax
  00e31	eb 5c		 jmp	 SHORT $LN131@match_numb
$LN130@match_numb:
  00e33	83 7c 24 24 02	 cmp	 DWORD PTR kind$[rsp], 2
  00e38	75 25		 jne	 SHORT $LN128@match_numb
  00e3a	48 8b 84 24 50
	01 00 00	 mov	 rax, QWORD PTR start$[rsp]
  00e42	48 8b 4c 24 68	 mov	 rcx, QWORD PTR i$21759[rsp]
  00e47	48 03 c8	 add	 rcx, rax
  00e4a	48 8b c1	 mov	 rax, rcx
  00e4d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR str$[rsp]
  00e52	0f b7 04 41	 movzx	 eax, WORD PTR [rcx+rax*2]
  00e56	89 84 24 2c 01
	00 00		 mov	 DWORD PTR tv501[rsp], eax
  00e5d	eb 22		 jmp	 SHORT $LN129@match_numb
$LN128@match_numb:
  00e5f	48 8b 84 24 50
	01 00 00	 mov	 rax, QWORD PTR start$[rsp]
  00e67	48 8b 4c 24 68	 mov	 rcx, QWORD PTR i$21759[rsp]
  00e6c	48 03 c8	 add	 rcx, rax
  00e6f	48 8b c1	 mov	 rax, rcx
  00e72	48 8b 4c 24 50	 mov	 rcx, QWORD PTR str$[rsp]
  00e77	8b 04 81	 mov	 eax, DWORD PTR [rcx+rax*4]
  00e7a	89 84 24 2c 01
	00 00		 mov	 DWORD PTR tv501[rsp], eax
$LN129@match_numb:
  00e81	8b 84 24 2c 01
	00 00		 mov	 eax, DWORD PTR tv501[rsp]
  00e88	89 84 24 28 01
	00 00		 mov	 DWORD PTR tv502[rsp], eax
$LN131@match_numb:
  00e8f	48 8b 44 24 68	 mov	 rax, QWORD PTR i$21759[rsp]
  00e94	48 8b 4c 24 70	 mov	 rcx, QWORD PTR buf$21761[rsp]
  00e99	48 03 c8	 add	 rcx, rax
  00e9c	48 8b c1	 mov	 rax, rcx
  00e9f	0f b6 8c 24 28
	01 00 00	 movzx	 ecx, BYTE PTR tv502[rsp]
  00ea7	88 08		 mov	 BYTE PTR [rax], cl

; 945  :         }

  00ea9	e9 3c ff ff ff	 jmp	 $LN4@match_numb
$LN3@match_numb:

; 946  :         if (is_float)

  00eae	83 7c 24 20 00	 cmp	 DWORD PTR is_float$[rsp], 0
  00eb3	74 11		 je	 SHORT $LN2@match_numb

; 947  :             rval = PyFloat_FromString(numstr);

  00eb5	48 8b 4c 24 48	 mov	 rcx, QWORD PTR numstr$[rsp]
  00eba	e8 00 00 00 00	 call	 PyFloat_FromString
  00ebf	48 89 44 24 28	 mov	 QWORD PTR rval$[rsp], rax

; 948  :         else

  00ec4	eb 17		 jmp	 SHORT $LN1@match_numb
$LN2@match_numb:

; 949  :             rval = PyLong_FromString(buf, NULL, 10);

  00ec6	41 b8 0a 00 00
	00		 mov	 r8d, 10
  00ecc	33 d2		 xor	 edx, edx
  00ece	48 8b 4c 24 70	 mov	 rcx, QWORD PTR buf$21761[rsp]
  00ed3	e8 00 00 00 00	 call	 PyLong_FromString
  00ed8	48 89 44 24 28	 mov	 QWORD PTR rval$[rsp], rax
$LN1@match_numb:
$LN7@match_numb:

; 950  :     }
; 951  :     Py_DECREF(numstr);

  00edd	48 8b 4c 24 48	 mov	 rcx, QWORD PTR numstr$[rsp]
  00ee2	e8 00 00 00 00	 call	 _Py_DecRef

; 952  :     *next_idx_ptr = idx;

  00ee7	48 8b 84 24 58
	01 00 00	 mov	 rax, QWORD PTR next_idx_ptr$[rsp]
  00eef	48 8b 4c 24 38	 mov	 rcx, QWORD PTR idx$[rsp]
  00ef4	48 89 08	 mov	 QWORD PTR [rax], rcx

; 953  :     return rval;

  00ef7	48 8b 44 24 28	 mov	 rax, QWORD PTR rval$[rsp]
$LN34@match_numb:

; 954  : }

  00efc	48 81 c4 38 01
	00 00		 add	 rsp, 312		; 00000138H
  00f03	c3		 ret	 0
_match_number_unicode ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$scanner_new DD imagerel scanner_new
	DD	imagerel scanner_new+144
	DD	imagerel $unwind$scanner_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$scanner_new DD 011301H
	DD	06213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT scanner_new
_TEXT	SEGMENT
s$ = 32
type$ = 64
args$ = 72
kwds$ = 80
scanner_new PROC					; COMDAT

; 1101 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1102 :     PyScannerObject *s;
; 1103 :     s = (PyScannerObject *)type->tp_alloc(type, 0);

  00013	33 d2		 xor	 edx, edx
  00015	48 8b 4c 24 40	 mov	 rcx, QWORD PTR type$[rsp]
  0001a	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  0001f	ff 90 88 01 00
	00		 call	 QWORD PTR [rax+392]
  00025	48 89 44 24 20	 mov	 QWORD PTR s$[rsp], rax

; 1104 :     if (s != NULL) {

  0002a	48 83 7c 24 20
	00		 cmp	 QWORD PTR s$[rsp], 0
  00030	74 54		 je	 SHORT $LN1@scanner_ne

; 1105 :         s->strict = NULL;

  00032	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  00037	48 c7 40 60 00
	00 00 00	 mov	 QWORD PTR [rax+96], 0

; 1106 :         s->object_hook = NULL;

  0003f	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  00044	48 c7 40 68 00
	00 00 00	 mov	 QWORD PTR [rax+104], 0

; 1107 :         s->object_pairs_hook = NULL;

  0004c	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  00051	48 c7 40 70 00
	00 00 00	 mov	 QWORD PTR [rax+112], 0

; 1108 :         s->parse_float = NULL;

  00059	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  0005e	48 c7 40 78 00
	00 00 00	 mov	 QWORD PTR [rax+120], 0

; 1109 :         s->parse_int = NULL;

  00066	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  0006b	48 c7 80 80 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+128], 0

; 1110 :         s->parse_constant = NULL;

  00076	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  0007b	48 c7 80 88 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+136], 0
$LN1@scanner_ne:

; 1111 :     }
; 1112 :     return (PyObject *)s;

  00086	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]

; 1113 : }

  0008b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0008f	c3		 ret	 0
scanner_new ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@DPAGDMGM@scanner_init?$AA@		; `string'
PUBLIC	??_C@_0P@CJIBFHCI@O?3make_scanner?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$scanner_init DD imagerel scanner_init
	DD	imagerel scanner_init+1128
	DD	imagerel $unwind$scanner_init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$scanner_init DD 011301H
	DD	0e213H
xdata	ENDS
;	COMDAT ??_C@_0N@DPAGDMGM@scanner_init?$AA@
CONST	SEGMENT
??_C@_0N@DPAGDMGM@scanner_init?$AA@ DB 'scanner_init', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@CJIBFHCI@O?3make_scanner?$AA@
CONST	SEGMENT
??_C@_0P@CJIBFHCI@O?3make_scanner?$AA@ DB 'O:make_scanner', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT scanner_init
_TEXT	SEGMENT
s$ = 48
ctx$ = 56
_py_tmp$22075 = 64
_py_tmp$22083 = 72
_py_tmp$22091 = 80
_py_tmp$22099 = 88
_py_tmp$22107 = 96
_py_tmp$22115 = 104
self$ = 128
args$ = 136
kwds$ = 144
scanner_init PROC					; COMDAT

; 1117 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 1118 :     /* Initialize Scanner object */
; 1119 :     PyObject *ctx;
; 1120 :     static char *kwlist[] = {"context", NULL};
; 1121 :     PyScannerObject *s;
; 1122 : 
; 1123 :     assert(PyScanner_Check(self));

  00013	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyScannerType
  0001a	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00022	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00026	74 38		 je	 SHORT $LN36@scanner_in
  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyScannerType
  0002f	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00037	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  0003b	e8 00 00 00 00	 call	 PyType_IsSubtype
  00040	85 c0		 test	 eax, eax
  00042	75 1c		 jne	 SHORT $LN36@scanner_in
  00044	41 b8 63 04 00
	00		 mov	 r8d, 1123		; 00000463H
  0004a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@KOELJAMM@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAj?$AAs?$AAo?$AAn?$AA?4?$AAc?$AA?$AA@
  00051	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@NDGIKJDC@?$AAP?$AAy?$AAS?$AAc?$AAa?$AAn?$AAn?$AAe?$AAr?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?$CJ?$AA?$AA@
  00058	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0005e	33 c0		 xor	 eax, eax
$LN36@scanner_in:

; 1124 :     s = (PyScannerObject *)self;

  00060	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00068	48 89 44 24 30	 mov	 QWORD PTR s$[rsp], rax

; 1125 : 
; 1126 :     if (!PyArg_ParseTupleAndKeywords(args, kwds, "O:make_scanner", kwlist, &ctx))

  0006d	48 8d 44 24 38	 lea	 rax, QWORD PTR ctx$[rsp]
  00072	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00077	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?kwlist@?1??scanner_init@@9@9
  0007e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0P@CJIBFHCI@O?3make_scanner?$AA@
  00085	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR kwds$[rsp]
  0008d	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  00095	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  0009a	85 c0		 test	 eax, eax
  0009c	75 0a		 jne	 SHORT $LN33@scanner_in

; 1127 :         return -1;

  0009e	b8 ff ff ff ff	 mov	 eax, -1
  000a3	e9 bb 03 00 00	 jmp	 $LN34@scanner_in
$LN33@scanner_in:

; 1128 : 
; 1129 :     if (s->memo == NULL) {

  000a8	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  000ad	48 83 b8 90 00
	00 00 00	 cmp	 QWORD PTR [rax+144], 0
  000b5	75 25		 jne	 SHORT $LN32@scanner_in

; 1130 :         s->memo = PyDict_New();

  000b7	e8 00 00 00 00	 call	 PyDict_New
  000bc	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s$[rsp]
  000c1	48 89 81 90 00
	00 00		 mov	 QWORD PTR [rcx+144], rax

; 1131 :         if (s->memo == NULL)

  000c8	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  000cd	48 83 b8 90 00
	00 00 00	 cmp	 QWORD PTR [rax+144], 0
  000d5	75 05		 jne	 SHORT $LN31@scanner_in

; 1132 :             goto bail;

  000d7	e9 0c 01 00 00	 jmp	 $bail$22057
$LN31@scanner_in:
$LN32@scanner_in:

; 1133 :     }
; 1134 : 
; 1135 :     /* All of these will fail "gracefully" so we don't need to verify them */
; 1136 :     s->strict = PyObject_GetAttrString(ctx, "strict");

  000dc	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_06OLFOGHEN@strict?$AA@
  000e3	48 8b 4c 24 38	 mov	 rcx, QWORD PTR ctx$[rsp]
  000e8	e8 00 00 00 00	 call	 PyObject_GetAttrString
  000ed	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s$[rsp]
  000f2	48 89 41 60	 mov	 QWORD PTR [rcx+96], rax

; 1137 :     if (s->strict == NULL)

  000f6	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  000fb	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00100	75 05		 jne	 SHORT $LN30@scanner_in

; 1138 :         goto bail;

  00102	e9 e1 00 00 00	 jmp	 $bail$22057
$LN30@scanner_in:

; 1139 :     s->object_hook = PyObject_GetAttrString(ctx, "object_hook");

  00107	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@LCHLLJKI@object_hook?$AA@
  0010e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR ctx$[rsp]
  00113	e8 00 00 00 00	 call	 PyObject_GetAttrString
  00118	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s$[rsp]
  0011d	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax

; 1140 :     if (s->object_hook == NULL)

  00121	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  00126	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  0012b	75 05		 jne	 SHORT $LN29@scanner_in

; 1141 :         goto bail;

  0012d	e9 b6 00 00 00	 jmp	 $bail$22057
$LN29@scanner_in:

; 1142 :     s->object_pairs_hook = PyObject_GetAttrString(ctx, "object_pairs_hook");

  00132	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BC@KHLDCHIO@object_pairs_hook?$AA@
  00139	48 8b 4c 24 38	 mov	 rcx, QWORD PTR ctx$[rsp]
  0013e	e8 00 00 00 00	 call	 PyObject_GetAttrString
  00143	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s$[rsp]
  00148	48 89 41 70	 mov	 QWORD PTR [rcx+112], rax

; 1143 :     if (s->object_pairs_hook == NULL)

  0014c	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  00151	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  00156	75 05		 jne	 SHORT $LN28@scanner_in

; 1144 :         goto bail;

  00158	e9 8b 00 00 00	 jmp	 $bail$22057
$LN28@scanner_in:

; 1145 :     s->parse_float = PyObject_GetAttrString(ctx, "parse_float");

  0015d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@KEFCOABD@parse_float?$AA@
  00164	48 8b 4c 24 38	 mov	 rcx, QWORD PTR ctx$[rsp]
  00169	e8 00 00 00 00	 call	 PyObject_GetAttrString
  0016e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s$[rsp]
  00173	48 89 41 78	 mov	 QWORD PTR [rcx+120], rax

; 1146 :     if (s->parse_float == NULL)

  00177	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  0017c	48 83 78 78 00	 cmp	 QWORD PTR [rax+120], 0
  00181	75 02		 jne	 SHORT $LN27@scanner_in

; 1147 :         goto bail;

  00183	eb 63		 jmp	 SHORT $bail$22057
$LN27@scanner_in:

; 1148 :     s->parse_int = PyObject_GetAttrString(ctx, "parse_int");

  00185	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09DPJPPPAP@parse_int?$AA@
  0018c	48 8b 4c 24 38	 mov	 rcx, QWORD PTR ctx$[rsp]
  00191	e8 00 00 00 00	 call	 PyObject_GetAttrString
  00196	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s$[rsp]
  0019b	48 89 81 80 00
	00 00		 mov	 QWORD PTR [rcx+128], rax

; 1149 :     if (s->parse_int == NULL)

  001a2	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  001a7	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  001af	75 02		 jne	 SHORT $LN26@scanner_in

; 1150 :         goto bail;

  001b1	eb 35		 jmp	 SHORT $bail$22057
$LN26@scanner_in:

; 1151 :     s->parse_constant = PyObject_GetAttrString(ctx, "parse_constant");

  001b3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0P@GDIKPOIP@parse_constant?$AA@
  001ba	48 8b 4c 24 38	 mov	 rcx, QWORD PTR ctx$[rsp]
  001bf	e8 00 00 00 00	 call	 PyObject_GetAttrString
  001c4	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s$[rsp]
  001c9	48 89 81 88 00
	00 00		 mov	 QWORD PTR [rcx+136], rax

; 1152 :     if (s->parse_constant == NULL)

  001d0	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  001d5	48 83 b8 88 00
	00 00 00	 cmp	 QWORD PTR [rax+136], 0
  001dd	75 02		 jne	 SHORT $LN25@scanner_in

; 1153 :         goto bail;

  001df	eb 07		 jmp	 SHORT $bail$22057
$LN25@scanner_in:

; 1154 : 
; 1155 :     return 0;

  001e1	33 c0		 xor	 eax, eax
  001e3	e9 7b 02 00 00	 jmp	 $LN34@scanner_in
$bail$22057:
$LN24@scanner_in:

; 1156 : 
; 1157 : bail:
; 1158 :     Py_CLEAR(s->strict);

  001e8	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  001ed	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  001f2	74 53		 je	 SHORT $LN21@scanner_in
  001f4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  001fc	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  00201	4c 8b 48 60	 mov	 r9, QWORD PTR [rax+96]
  00205	41 b8 86 04 00
	00		 mov	 r8d, 1158		; 00000486H
  0020b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@BIGPLMIN@?4?4?2Modules?2_json?4c?$AA@
  00212	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@DPAGDMGM@scanner_init?$AA@
  00219	e8 00 00 00 00	 call	 _PyParallel_Guard
  0021e	85 c0		 test	 eax, eax
  00220	75 25		 jne	 SHORT $LN21@scanner_in
  00222	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  00227	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0022b	48 89 44 24 40	 mov	 QWORD PTR _py_tmp$22075[rsp], rax
  00230	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  00235	48 c7 40 60 00
	00 00 00	 mov	 QWORD PTR [rax+96], 0
  0023d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _py_tmp$22075[rsp]
  00242	e8 00 00 00 00	 call	 _Py_DecRef
$LN21@scanner_in:
  00247	33 c0		 xor	 eax, eax
  00249	85 c0		 test	 eax, eax
  0024b	75 9b		 jne	 SHORT $LN24@scanner_in
$LN20@scanner_in:

; 1159 :     Py_CLEAR(s->object_hook);

  0024d	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  00252	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  00257	74 53		 je	 SHORT $LN17@scanner_in
  00259	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00261	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  00266	4c 8b 48 68	 mov	 r9, QWORD PTR [rax+104]
  0026a	41 b8 87 04 00
	00		 mov	 r8d, 1159		; 00000487H
  00270	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@BIGPLMIN@?4?4?2Modules?2_json?4c?$AA@
  00277	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@DPAGDMGM@scanner_init?$AA@
  0027e	e8 00 00 00 00	 call	 _PyParallel_Guard
  00283	85 c0		 test	 eax, eax
  00285	75 25		 jne	 SHORT $LN17@scanner_in
  00287	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  0028c	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00290	48 89 44 24 48	 mov	 QWORD PTR _py_tmp$22083[rsp], rax
  00295	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  0029a	48 c7 40 68 00
	00 00 00	 mov	 QWORD PTR [rax+104], 0
  002a2	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _py_tmp$22083[rsp]
  002a7	e8 00 00 00 00	 call	 _Py_DecRef
$LN17@scanner_in:
  002ac	33 c0		 xor	 eax, eax
  002ae	85 c0		 test	 eax, eax
  002b0	75 9b		 jne	 SHORT $LN20@scanner_in
$LN16@scanner_in:

; 1160 :     Py_CLEAR(s->object_pairs_hook);

  002b2	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  002b7	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  002bc	74 53		 je	 SHORT $LN13@scanner_in
  002be	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  002c6	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  002cb	4c 8b 48 70	 mov	 r9, QWORD PTR [rax+112]
  002cf	41 b8 88 04 00
	00		 mov	 r8d, 1160		; 00000488H
  002d5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@BIGPLMIN@?4?4?2Modules?2_json?4c?$AA@
  002dc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@DPAGDMGM@scanner_init?$AA@
  002e3	e8 00 00 00 00	 call	 _PyParallel_Guard
  002e8	85 c0		 test	 eax, eax
  002ea	75 25		 jne	 SHORT $LN13@scanner_in
  002ec	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  002f1	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  002f5	48 89 44 24 50	 mov	 QWORD PTR _py_tmp$22091[rsp], rax
  002fa	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  002ff	48 c7 40 70 00
	00 00 00	 mov	 QWORD PTR [rax+112], 0
  00307	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _py_tmp$22091[rsp]
  0030c	e8 00 00 00 00	 call	 _Py_DecRef
$LN13@scanner_in:
  00311	33 c0		 xor	 eax, eax
  00313	85 c0		 test	 eax, eax
  00315	75 9b		 jne	 SHORT $LN16@scanner_in
$LN12@scanner_in:

; 1161 :     Py_CLEAR(s->parse_float);

  00317	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  0031c	48 83 78 78 00	 cmp	 QWORD PTR [rax+120], 0
  00321	74 53		 je	 SHORT $LN9@scanner_in
  00323	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0032b	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  00330	4c 8b 48 78	 mov	 r9, QWORD PTR [rax+120]
  00334	41 b8 89 04 00
	00		 mov	 r8d, 1161		; 00000489H
  0033a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@BIGPLMIN@?4?4?2Modules?2_json?4c?$AA@
  00341	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@DPAGDMGM@scanner_init?$AA@
  00348	e8 00 00 00 00	 call	 _PyParallel_Guard
  0034d	85 c0		 test	 eax, eax
  0034f	75 25		 jne	 SHORT $LN9@scanner_in
  00351	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  00356	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  0035a	48 89 44 24 58	 mov	 QWORD PTR _py_tmp$22099[rsp], rax
  0035f	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  00364	48 c7 40 78 00
	00 00 00	 mov	 QWORD PTR [rax+120], 0
  0036c	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _py_tmp$22099[rsp]
  00371	e8 00 00 00 00	 call	 _Py_DecRef
$LN9@scanner_in:
  00376	33 c0		 xor	 eax, eax
  00378	85 c0		 test	 eax, eax
  0037a	75 9b		 jne	 SHORT $LN12@scanner_in
$LN8@scanner_in:

; 1162 :     Py_CLEAR(s->parse_int);

  0037c	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  00381	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  00389	74 5c		 je	 SHORT $LN5@scanner_in
  0038b	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00393	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  00398	4c 8b 88 80 00
	00 00		 mov	 r9, QWORD PTR [rax+128]
  0039f	41 b8 8a 04 00
	00		 mov	 r8d, 1162		; 0000048aH
  003a5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@BIGPLMIN@?4?4?2Modules?2_json?4c?$AA@
  003ac	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@DPAGDMGM@scanner_init?$AA@
  003b3	e8 00 00 00 00	 call	 _PyParallel_Guard
  003b8	85 c0		 test	 eax, eax
  003ba	75 2b		 jne	 SHORT $LN5@scanner_in
  003bc	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  003c1	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  003c8	48 89 44 24 60	 mov	 QWORD PTR _py_tmp$22107[rsp], rax
  003cd	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  003d2	48 c7 80 80 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+128], 0
  003dd	48 8b 4c 24 60	 mov	 rcx, QWORD PTR _py_tmp$22107[rsp]
  003e2	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@scanner_in:
  003e7	33 c0		 xor	 eax, eax
  003e9	85 c0		 test	 eax, eax
  003eb	75 8f		 jne	 SHORT $LN8@scanner_in
$LN4@scanner_in:

; 1163 :     Py_CLEAR(s->parse_constant);

  003ed	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  003f2	48 83 b8 88 00
	00 00 00	 cmp	 QWORD PTR [rax+136], 0
  003fa	74 5c		 je	 SHORT $LN1@scanner_in
  003fc	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00404	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  00409	4c 8b 88 88 00
	00 00		 mov	 r9, QWORD PTR [rax+136]
  00410	41 b8 8b 04 00
	00		 mov	 r8d, 1163		; 0000048bH
  00416	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@BIGPLMIN@?4?4?2Modules?2_json?4c?$AA@
  0041d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@DPAGDMGM@scanner_init?$AA@
  00424	e8 00 00 00 00	 call	 _PyParallel_Guard
  00429	85 c0		 test	 eax, eax
  0042b	75 2b		 jne	 SHORT $LN1@scanner_in
  0042d	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  00432	48 8b 80 88 00
	00 00		 mov	 rax, QWORD PTR [rax+136]
  00439	48 89 44 24 68	 mov	 QWORD PTR _py_tmp$22115[rsp], rax
  0043e	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  00443	48 c7 80 88 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+136], 0
  0044e	48 8b 4c 24 68	 mov	 rcx, QWORD PTR _py_tmp$22115[rsp]
  00453	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@scanner_in:
  00458	33 c0		 xor	 eax, eax
  0045a	85 c0		 test	 eax, eax
  0045c	75 8f		 jne	 SHORT $LN4@scanner_in

; 1164 :     return -1;

  0045e	b8 ff ff ff ff	 mov	 eax, -1
$LN34@scanner_in:

; 1165 : }

  00463	48 83 c4 78	 add	 rsp, 120		; 00000078H
  00467	c3		 ret	 0
scanner_init ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$encoder_new DD imagerel encoder_new
	DD	imagerel encoder_new+176
	DD	imagerel $unwind$encoder_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$encoder_new DD 011301H
	DD	06213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT encoder_new
_TEXT	SEGMENT
s$ = 32
type$ = 64
args$ = 72
kwds$ = 80
encoder_new PROC					; COMDAT

; 1214 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1215 :     PyEncoderObject *s;
; 1216 :     s = (PyEncoderObject *)type->tp_alloc(type, 0);

  00013	33 d2		 xor	 edx, edx
  00015	48 8b 4c 24 40	 mov	 rcx, QWORD PTR type$[rsp]
  0001a	48 8b 44 24 40	 mov	 rax, QWORD PTR type$[rsp]
  0001f	ff 90 88 01 00
	00		 call	 QWORD PTR [rax+392]
  00025	48 89 44 24 20	 mov	 QWORD PTR s$[rsp], rax

; 1217 :     if (s != NULL) {

  0002a	48 83 7c 24 20
	00		 cmp	 QWORD PTR s$[rsp], 0
  00030	74 74		 je	 SHORT $LN1@encoder_ne

; 1218 :         s->markers = NULL;

  00032	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  00037	48 c7 40 60 00
	00 00 00	 mov	 QWORD PTR [rax+96], 0

; 1219 :         s->defaultfn = NULL;

  0003f	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  00044	48 c7 40 68 00
	00 00 00	 mov	 QWORD PTR [rax+104], 0

; 1220 :         s->encoder = NULL;

  0004c	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  00051	48 c7 40 70 00
	00 00 00	 mov	 QWORD PTR [rax+112], 0

; 1221 :         s->indent = NULL;

  00059	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  0005e	48 c7 40 78 00
	00 00 00	 mov	 QWORD PTR [rax+120], 0

; 1222 :         s->key_separator = NULL;

  00066	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  0006b	48 c7 80 80 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+128], 0

; 1223 :         s->item_separator = NULL;

  00076	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  0007b	48 c7 80 88 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+136], 0

; 1224 :         s->sort_keys = NULL;

  00086	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  0008b	48 c7 80 90 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+144], 0

; 1225 :         s->skipkeys = NULL;

  00096	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  0009b	48 c7 80 98 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+152], 0
$LN1@encoder_ne:

; 1226 :     }
; 1227 :     return (PyObject *)s;

  000a6	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]

; 1228 : }

  000ab	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000af	c3		 ret	 0
encoder_new ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BH@KFFMMDOA@OOOOOOOOO?3make_encoder?$AA@	; `string'
PUBLIC	??_C@_1CM@BNGMPGPP@?$AAP?$AAy?$AAE?$AAn?$AAc?$AAo?$AAd?$AAe?$AAr?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?$CJ?$AA?$AA@ ; `string'
EXTRN	PyCFunction_GetFunction:PROC
EXTRN	PyCFunction_Type:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$encoder_init DD imagerel encoder_init
	DD	imagerel encoder_init+725
	DD	imagerel $unwind$encoder_init
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$encoder_init DD 021601H
	DD	01b0116H
xdata	ENDS
;	COMDAT ??_C@_0BH@KFFMMDOA@OOOOOOOOO?3make_encoder?$AA@
CONST	SEGMENT
??_C@_0BH@KFFMMDOA@OOOOOOOOO?3make_encoder?$AA@ DB 'OOOOOOOOO:make_encode'
	DB	'r', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1CM@BNGMPGPP@?$AAP?$AAy?$AAE?$AAn?$AAc?$AAo?$AAd?$AAe?$AAr?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CM@BNGMPGPP@?$AAP?$AAy?$AAE?$AAn?$AAc?$AAo?$AAd?$AAe?$AAr?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'E', 00H, 'n', 00H, 'c', 00H, 'o', 00H, 'd', 00H
	DB	'e', 00H, 'r', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, 's', 00H, 'e', 00H, 'l', 00H, 'f', 00H
	DB	')', 00H, 00H, 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT encoder_init
_TEXT	SEGMENT
allow_nan$ = 112
markers$ = 120
sort_keys$ = 128
s$ = 136
key_separator$ = 144
indent$ = 152
defaultfn$ = 160
item_separator$ = 168
skipkeys$ = 176
encoder$ = 184
tv138 = 192
self$ = 224
args$ = 232
kwds$ = 240
encoder_init PROC					; COMDAT

; 1232 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 81 ec d8 00
	00 00		 sub	 rsp, 216		; 000000d8H

; 1233 :     /* initialize Encoder object */
; 1234 :     static char *kwlist[] = {"markers", "default", "encoder", "indent", "key_separator", "item_separator", "sort_keys", "skipkeys", "allow_nan", NULL};
; 1235 : 
; 1236 :     PyEncoderObject *s;
; 1237 :     PyObject *markers, *defaultfn, *encoder, *indent, *key_separator;
; 1238 :     PyObject *item_separator, *sort_keys, *skipkeys, *allow_nan;
; 1239 : 
; 1240 :     assert(PyEncoder_Check(self));

  00016	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyEncoderType
  0001d	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00025	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00029	74 38		 je	 SHORT $LN4@encoder_in
  0002b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyEncoderType
  00032	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0003a	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  0003e	e8 00 00 00 00	 call	 PyType_IsSubtype
  00043	85 c0		 test	 eax, eax
  00045	75 1c		 jne	 SHORT $LN4@encoder_in
  00047	41 b8 d8 04 00
	00		 mov	 r8d, 1240		; 000004d8H
  0004d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@KOELJAMM@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAj?$AAs?$AAo?$AAn?$AA?4?$AAc?$AA?$AA@
  00054	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@BNGMPGPP@?$AAP?$AAy?$AAE?$AAn?$AAc?$AAo?$AAd?$AAe?$AAr?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?$CJ?$AA?$AA@
  0005b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00061	33 c0		 xor	 eax, eax
$LN4@encoder_in:

; 1241 :     s = (PyEncoderObject *)self;

  00063	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  0006b	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR s$[rsp], rax

; 1242 : 
; 1243 :     if (!PyArg_ParseTupleAndKeywords(args, kwds, "OOOOOOOOO:make_encoder", kwlist,
; 1244 :         &markers, &defaultfn, &encoder, &indent, &key_separator, &item_separator,
; 1245 :         &sort_keys, &skipkeys, &allow_nan))

  00073	48 8d 44 24 70	 lea	 rax, QWORD PTR allow_nan$[rsp]
  00078	48 89 44 24 60	 mov	 QWORD PTR [rsp+96], rax
  0007d	48 8d 84 24 b0
	00 00 00	 lea	 rax, QWORD PTR skipkeys$[rsp]
  00085	48 89 44 24 58	 mov	 QWORD PTR [rsp+88], rax
  0008a	48 8d 84 24 80
	00 00 00	 lea	 rax, QWORD PTR sort_keys$[rsp]
  00092	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  00097	48 8d 84 24 a8
	00 00 00	 lea	 rax, QWORD PTR item_separator$[rsp]
  0009f	48 89 44 24 48	 mov	 QWORD PTR [rsp+72], rax
  000a4	48 8d 84 24 90
	00 00 00	 lea	 rax, QWORD PTR key_separator$[rsp]
  000ac	48 89 44 24 40	 mov	 QWORD PTR [rsp+64], rax
  000b1	48 8d 84 24 98
	00 00 00	 lea	 rax, QWORD PTR indent$[rsp]
  000b9	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  000be	48 8d 84 24 b8
	00 00 00	 lea	 rax, QWORD PTR encoder$[rsp]
  000c6	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  000cb	48 8d 84 24 a0
	00 00 00	 lea	 rax, QWORD PTR defaultfn$[rsp]
  000d3	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  000d8	48 8d 44 24 78	 lea	 rax, QWORD PTR markers$[rsp]
  000dd	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  000e2	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?kwlist@?1??encoder_init@@9@9
  000e9	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BH@KFFMMDOA@OOOOOOOOO?3make_encoder?$AA@
  000f0	48 8b 94 24 f0
	00 00 00	 mov	 rdx, QWORD PTR kwds$[rsp]
  000f8	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  00100	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  00105	85 c0		 test	 eax, eax
  00107	75 0a		 jne	 SHORT $LN1@encoder_in

; 1246 :         return -1;

  00109	b8 ff ff ff ff	 mov	 eax, -1
  0010e	e9 ba 01 00 00	 jmp	 $LN2@encoder_in
$LN1@encoder_in:

; 1247 : 
; 1248 :     s->markers = markers;

  00113	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  0011b	48 8b 4c 24 78	 mov	 rcx, QWORD PTR markers$[rsp]
  00120	48 89 48 60	 mov	 QWORD PTR [rax+96], rcx

; 1249 :     s->defaultfn = defaultfn;

  00124	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  0012c	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR defaultfn$[rsp]
  00134	48 89 48 68	 mov	 QWORD PTR [rax+104], rcx

; 1250 :     s->encoder = encoder;

  00138	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00140	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR encoder$[rsp]
  00148	48 89 48 70	 mov	 QWORD PTR [rax+112], rcx

; 1251 :     s->indent = indent;

  0014c	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00154	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR indent$[rsp]
  0015c	48 89 48 78	 mov	 QWORD PTR [rax+120], rcx

; 1252 :     s->key_separator = key_separator;

  00160	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00168	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR key_separator$[rsp]
  00170	48 89 88 80 00
	00 00		 mov	 QWORD PTR [rax+128], rcx

; 1253 :     s->item_separator = item_separator;

  00177	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  0017f	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR item_separator$[rsp]
  00187	48 89 88 88 00
	00 00		 mov	 QWORD PTR [rax+136], rcx

; 1254 :     s->sort_keys = sort_keys;

  0018e	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00196	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR sort_keys$[rsp]
  0019e	48 89 88 90 00
	00 00		 mov	 QWORD PTR [rax+144], rcx

; 1255 :     s->skipkeys = skipkeys;

  001a5	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  001ad	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR skipkeys$[rsp]
  001b5	48 89 88 98 00
	00 00		 mov	 QWORD PTR [rax+152], rcx

; 1256 :     s->fast_encode = (PyCFunction_Check(s->encoder) && PyCFunction_GetFunction(s->encoder) == (PyCFunction)py_encode_basestring_ascii);

  001bc	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  001c4	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  001c8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyCFunction_Type
  001cf	48 39 48 58	 cmp	 QWORD PTR [rax+88], rcx
  001d3	75 2a		 jne	 SHORT $LN5@encoder_in
  001d5	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  001dd	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  001e1	e8 00 00 00 00	 call	 PyCFunction_GetFunction
  001e6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:py_encode_basestring_ascii
  001ed	48 3b c1	 cmp	 rax, rcx
  001f0	75 0d		 jne	 SHORT $LN5@encoder_in
  001f2	c7 84 24 c0 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv138[rsp], 1
  001fd	eb 0b		 jmp	 SHORT $LN6@encoder_in
$LN5@encoder_in:
  001ff	c7 84 24 c0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv138[rsp], 0
$LN6@encoder_in:
  0020a	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00212	8b 8c 24 c0 00
	00 00		 mov	 ecx, DWORD PTR tv138[rsp]
  00219	89 88 a0 00 00
	00		 mov	 DWORD PTR [rax+160], ecx

; 1257 :     s->allow_nan = PyObject_IsTrue(allow_nan);

  0021f	48 8b 4c 24 70	 mov	 rcx, QWORD PTR allow_nan$[rsp]
  00224	e8 00 00 00 00	 call	 PyObject_IsTrue
  00229	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  00231	89 81 a4 00 00
	00		 mov	 DWORD PTR [rcx+164], eax

; 1258 : 
; 1259 :     Py_INCREF(s->markers);

  00237	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  0023f	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00243	e8 00 00 00 00	 call	 _Py_IncRef

; 1260 :     Py_INCREF(s->defaultfn);

  00248	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00250	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  00254	e8 00 00 00 00	 call	 _Py_IncRef

; 1261 :     Py_INCREF(s->encoder);

  00259	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00261	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  00265	e8 00 00 00 00	 call	 _Py_IncRef

; 1262 :     Py_INCREF(s->indent);

  0026a	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00272	48 8b 48 78	 mov	 rcx, QWORD PTR [rax+120]
  00276	e8 00 00 00 00	 call	 _Py_IncRef

; 1263 :     Py_INCREF(s->key_separator);

  0027b	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00283	48 8b 88 80 00
	00 00		 mov	 rcx, QWORD PTR [rax+128]
  0028a	e8 00 00 00 00	 call	 _Py_IncRef

; 1264 :     Py_INCREF(s->item_separator);

  0028f	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00297	48 8b 88 88 00
	00 00		 mov	 rcx, QWORD PTR [rax+136]
  0029e	e8 00 00 00 00	 call	 _Py_IncRef

; 1265 :     Py_INCREF(s->sort_keys);

  002a3	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  002ab	48 8b 88 90 00
	00 00		 mov	 rcx, QWORD PTR [rax+144]
  002b2	e8 00 00 00 00	 call	 _Py_IncRef

; 1266 :     Py_INCREF(s->skipkeys);

  002b7	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  002bf	48 8b 88 98 00
	00 00		 mov	 rcx, QWORD PTR [rax+152]
  002c6	e8 00 00 00 00	 call	 _Py_IncRef

; 1267 :     return 0;

  002cb	33 c0		 xor	 eax, eax
$LN2@encoder_in:

; 1268 : }

  002cd	48 81 c4 d8 00
	00 00		 add	 rsp, 216		; 000000d8H
  002d4	c3		 ret	 0
encoder_init ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BA@EGIFCEHH@OO?$CG?3_iterencode?$AA@	; `string'
EXTRN	_PyAccu_FinishAsList:PROC
EXTRN	_PyAccu_Destroy:PROC
EXTRN	_PyAccu_Init:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$encoder_call DD imagerel encoder_call
	DD	imagerel encoder_call+260
	DD	imagerel $unwind$encoder_call
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$encoder_call DD 011301H
	DD	0e213H
xdata	ENDS
;	COMDAT ??_C@_0BA@EGIFCEHH@OO?$CG?3_iterencode?$AA@
CONST	SEGMENT
??_C@_0BA@EGIFCEHH@OO?$CG?3_iterencode?$AA@ DB 'OO&:_iterencode', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT encoder_call
_TEXT	SEGMENT
s$ = 64
acc$ = 72
indent_level$ = 88
obj$ = 96
self$ = 128
args$ = 136
kwds$ = 144
encoder_call PROC					; COMDAT

; 1272 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 1273 :     /* Python callable interface to encode_listencode_obj */
; 1274 :     static char *kwlist[] = {"obj", "_current_indent_level", NULL};
; 1275 :     PyObject *obj;
; 1276 :     Py_ssize_t indent_level;
; 1277 :     PyEncoderObject *s;
; 1278 :     _PyAccu acc;
; 1279 : 
; 1280 :     assert(PyEncoder_Check(self));

  00013	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyEncoderType
  0001a	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  00022	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00026	74 38		 je	 SHORT $LN6@encoder_ca
  00028	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyEncoderType
  0002f	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00037	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  0003b	e8 00 00 00 00	 call	 PyType_IsSubtype
  00040	85 c0		 test	 eax, eax
  00042	75 1c		 jne	 SHORT $LN6@encoder_ca
  00044	41 b8 00 05 00
	00		 mov	 r8d, 1280		; 00000500H
  0004a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@KOELJAMM@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAj?$AAs?$AAo?$AAn?$AA?4?$AAc?$AA?$AA@
  00051	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@BNGMPGPP@?$AAP?$AAy?$AAE?$AAn?$AAc?$AAo?$AAd?$AAe?$AAr?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?$CJ?$AA?$AA@
  00058	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0005e	33 c0		 xor	 eax, eax
$LN6@encoder_ca:

; 1281 :     s = (PyEncoderObject *)self;

  00060	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00068	48 89 44 24 40	 mov	 QWORD PTR s$[rsp], rax

; 1282 :     if (!PyArg_ParseTupleAndKeywords(args, kwds, "OO&:_iterencode", kwlist,
; 1283 :         &obj, _convertPyInt_AsSsize_t, &indent_level))

  0006d	48 8d 44 24 58	 lea	 rax, QWORD PTR indent_level$[rsp]
  00072	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00077	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_convertPyInt_AsSsize_t
  0007e	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00083	48 8d 44 24 60	 lea	 rax, QWORD PTR obj$[rsp]
  00088	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0008d	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?kwlist@?1??encoder_call@@9@9
  00094	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BA@EGIFCEHH@OO?$CG?3_iterencode?$AA@
  0009b	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR kwds$[rsp]
  000a3	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  000ab	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  000b0	85 c0		 test	 eax, eax
  000b2	75 04		 jne	 SHORT $LN3@encoder_ca

; 1284 :         return NULL;

  000b4	33 c0		 xor	 eax, eax
  000b6	eb 47		 jmp	 SHORT $LN4@encoder_ca
$LN3@encoder_ca:

; 1285 :     if (_PyAccu_Init(&acc))

  000b8	48 8d 4c 24 48	 lea	 rcx, QWORD PTR acc$[rsp]
  000bd	e8 00 00 00 00	 call	 _PyAccu_Init
  000c2	85 c0		 test	 eax, eax
  000c4	74 04		 je	 SHORT $LN2@encoder_ca

; 1286 :         return NULL;

  000c6	33 c0		 xor	 eax, eax
  000c8	eb 35		 jmp	 SHORT $LN4@encoder_ca
$LN2@encoder_ca:

; 1287 :     if (encoder_listencode_obj(s, &acc, obj, indent_level)) {

  000ca	4c 8b 4c 24 58	 mov	 r9, QWORD PTR indent_level$[rsp]
  000cf	4c 8b 44 24 60	 mov	 r8, QWORD PTR obj$[rsp]
  000d4	48 8d 54 24 48	 lea	 rdx, QWORD PTR acc$[rsp]
  000d9	48 8b 4c 24 40	 mov	 rcx, QWORD PTR s$[rsp]
  000de	e8 00 00 00 00	 call	 encoder_listencode_obj
  000e3	85 c0		 test	 eax, eax
  000e5	74 0e		 je	 SHORT $LN1@encoder_ca

; 1288 :         _PyAccu_Destroy(&acc);

  000e7	48 8d 4c 24 48	 lea	 rcx, QWORD PTR acc$[rsp]
  000ec	e8 00 00 00 00	 call	 _PyAccu_Destroy

; 1289 :         return NULL;

  000f1	33 c0		 xor	 eax, eax
  000f3	eb 0a		 jmp	 SHORT $LN4@encoder_ca
$LN1@encoder_ca:

; 1290 :     }
; 1291 :     return _PyAccu_FinishAsList(&acc);

  000f5	48 8d 4c 24 48	 lea	 rcx, QWORD PTR acc$[rsp]
  000fa	e8 00 00 00 00	 call	 _PyAccu_FinishAsList
$LN4@encoder_ca:

; 1292 : }

  000ff	48 83 c4 78	 add	 rsp, 120		; 00000078H
  00103	c3		 ret	 0
encoder_call ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BM@PEOODJKM@Circular?5reference?5detected?$AA@ ; `string'
PUBLIC	??_C@_0BO@PDLAPALN@?5while?5encoding?5a?5JSON?5object?$AA@ ; `string'
EXTRN	PyDict_DelItem:PROC
EXTRN	PyDict_Contains:PROC
EXTRN	PyLong_FromVoidPtr:PROC
EXTRN	PyObject_Str:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$encoder_listencode_obj DD imagerel encoder_listencode_obj
	DD	imagerel encoder_listencode_obj+1678
	DD	imagerel $unwind$encoder_listencode_obj
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$encoder_listencode_obj DD 021b01H
	DD	017011bH
xdata	ENDS
;	COMDAT ??_C@_0BM@PEOODJKM@Circular?5reference?5detected?$AA@
CONST	SEGMENT
??_C@_0BM@PEOODJKM@Circular?5reference?5detected?$AA@ DB 'Circular refere'
	DB	'nce detected', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@PDLAPALN@?5while?5encoding?5a?5JSON?5object?$AA@
CONST	SEGMENT
??_C@_0BO@PDLAPALN@?5while?5encoding?5a?5JSON?5object?$AA@ DB ' while enc'
	DB	'oding a JSON object', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT encoder_listencode_obj
_TEXT	SEGMENT
rv$ = 32
newobj$ = 40
cstr$22302 = 48
encoded$22308 = 56
encoded$22314 = 64
encoded$22322 = 72
ident$22345 = 80
has_key$22348 = 88
tv150 = 96
tv169 = 104
tv163 = 112
tv180 = 120
tv199 = 128
tv193 = 136
tv236 = 144
tv255 = 152
tv249 = 160
s$ = 192
acc$ = 200
obj$ = 208
indent_level$ = 216
encoder_listencode_obj PROC				; COMDAT

; 1374 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H

; 1375 :     /* Encode Python object obj to a JSON term */
; 1376 :     PyObject *newobj;
; 1377 :     int rv;
; 1378 : 
; 1379 :     if (obj == Py_None || obj == Py_True || obj == Py_False) {

  0001b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00022	48 39 84 24 d0
	00 00 00	 cmp	 QWORD PTR obj$[rsp], rax
  0002a	74 22		 je	 SHORT $LN58@encoder_li
  0002c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  00033	48 39 84 24 d0
	00 00 00	 cmp	 QWORD PTR obj$[rsp], rax
  0003b	74 11		 je	 SHORT $LN58@encoder_li
  0003d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct
  00044	48 39 84 24 d0
	00 00 00	 cmp	 QWORD PTR obj$[rsp], rax
  0004c	75 40		 jne	 SHORT $LN59@encoder_li
$LN58@encoder_li:

; 1380 :         PyObject *cstr = _encoded_const(obj);

  0004e	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  00056	e8 00 00 00 00	 call	 _encoded_const
  0005b	48 89 44 24 30	 mov	 QWORD PTR cstr$22302[rsp], rax

; 1381 :         if (cstr == NULL)

  00060	48 83 7c 24 30
	00		 cmp	 QWORD PTR cstr$22302[rsp], 0
  00066	75 0a		 jne	 SHORT $LN57@encoder_li

; 1382 :             return -1;

  00068	b8 ff ff ff ff	 mov	 eax, -1
  0006d	e9 14 06 00 00	 jmp	 $LN60@encoder_li
$LN57@encoder_li:

; 1383 :         return _steal_accumulate(acc, cstr);

  00072	48 8b 54 24 30	 mov	 rdx, QWORD PTR cstr$22302[rsp]
  00077	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR acc$[rsp]
  0007f	e8 00 00 00 00	 call	 _steal_accumulate
  00084	e9 fd 05 00 00	 jmp	 $LN60@encoder_li
  00089	e9 f8 05 00 00	 jmp	 $LN56@encoder_li
$LN59@encoder_li:

; 1384 :     }
; 1385 :     else if (PyUnicode_Check(obj))

  0008e	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR obj$[rsp]
  00096	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0009a	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000a0	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  000a5	85 c0		 test	 eax, eax
  000a7	74 48		 je	 SHORT $LN55@encoder_li

; 1386 :     {
; 1387 :         PyObject *encoded = encoder_encode_string(s, obj);

  000a9	48 8b 94 24 d0
	00 00 00	 mov	 rdx, QWORD PTR obj$[rsp]
  000b1	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  000b9	e8 00 00 00 00	 call	 encoder_encode_string
  000be	48 89 44 24 38	 mov	 QWORD PTR encoded$22308[rsp], rax

; 1388 :         if (encoded == NULL)

  000c3	48 83 7c 24 38
	00		 cmp	 QWORD PTR encoded$22308[rsp], 0
  000c9	75 0a		 jne	 SHORT $LN54@encoder_li

; 1389 :             return -1;

  000cb	b8 ff ff ff ff	 mov	 eax, -1
  000d0	e9 b1 05 00 00	 jmp	 $LN60@encoder_li
$LN54@encoder_li:

; 1390 :         return _steal_accumulate(acc, encoded);

  000d5	48 8b 54 24 38	 mov	 rdx, QWORD PTR encoded$22308[rsp]
  000da	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR acc$[rsp]
  000e2	e8 00 00 00 00	 call	 _steal_accumulate
  000e7	e9 9a 05 00 00	 jmp	 $LN60@encoder_li
  000ec	e9 95 05 00 00	 jmp	 $LN53@encoder_li
$LN55@encoder_li:

; 1391 :     }
; 1392 :     else if (PyLong_Check(obj)) {

  000f1	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR obj$[rsp]
  000f9	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000fd	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00103	25 00 00 00 01	 and	 eax, 16777216		; 01000000H
  00108	85 c0		 test	 eax, eax
  0010a	74 40		 je	 SHORT $LN52@encoder_li

; 1393 :         PyObject *encoded = PyObject_Str(obj);

  0010c	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  00114	e8 00 00 00 00	 call	 PyObject_Str
  00119	48 89 44 24 40	 mov	 QWORD PTR encoded$22314[rsp], rax

; 1394 :         if (encoded == NULL)

  0011e	48 83 7c 24 40
	00		 cmp	 QWORD PTR encoded$22314[rsp], 0
  00124	75 0a		 jne	 SHORT $LN51@encoder_li

; 1395 :             return -1;

  00126	b8 ff ff ff ff	 mov	 eax, -1
  0012b	e9 56 05 00 00	 jmp	 $LN60@encoder_li
$LN51@encoder_li:

; 1396 :         return _steal_accumulate(acc, encoded);

  00130	48 8b 54 24 40	 mov	 rdx, QWORD PTR encoded$22314[rsp]
  00135	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR acc$[rsp]
  0013d	e8 00 00 00 00	 call	 _steal_accumulate
  00142	e9 3f 05 00 00	 jmp	 $LN60@encoder_li
  00147	e9 3a 05 00 00	 jmp	 $LN50@encoder_li
$LN52@encoder_li:

; 1397 :     }
; 1398 :     else if (PyFloat_Check(obj)) {

  0014c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyFloat_Type
  00153	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  0015b	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0015f	74 1c		 je	 SHORT $LN48@encoder_li
  00161	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyFloat_Type
  00168	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR obj$[rsp]
  00170	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  00174	e8 00 00 00 00	 call	 PyType_IsSubtype
  00179	85 c0		 test	 eax, eax
  0017b	74 48		 je	 SHORT $LN49@encoder_li
$LN48@encoder_li:

; 1399 :         PyObject *encoded = encoder_encode_float(s, obj);

  0017d	48 8b 94 24 d0
	00 00 00	 mov	 rdx, QWORD PTR obj$[rsp]
  00185	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  0018d	e8 00 00 00 00	 call	 encoder_encode_float
  00192	48 89 44 24 48	 mov	 QWORD PTR encoded$22322[rsp], rax

; 1400 :         if (encoded == NULL)

  00197	48 83 7c 24 48
	00		 cmp	 QWORD PTR encoded$22322[rsp], 0
  0019d	75 0a		 jne	 SHORT $LN47@encoder_li

; 1401 :             return -1;

  0019f	b8 ff ff ff ff	 mov	 eax, -1
  001a4	e9 dd 04 00 00	 jmp	 $LN60@encoder_li
$LN47@encoder_li:

; 1402 :         return _steal_accumulate(acc, encoded);

  001a9	48 8b 54 24 48	 mov	 rdx, QWORD PTR encoded$22322[rsp]
  001ae	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR acc$[rsp]
  001b6	e8 00 00 00 00	 call	 _steal_accumulate
  001bb	e9 c6 04 00 00	 jmp	 $LN60@encoder_li
  001c0	e9 c1 04 00 00	 jmp	 $LN46@encoder_li
$LN49@encoder_li:

; 1403 :     }
; 1404 :     else if (PyList_Check(obj) || PyTuple_Check(obj)) {

  001c5	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR obj$[rsp]
  001cd	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  001d1	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  001d7	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  001dc	85 c0		 test	 eax, eax
  001de	75 1f		 jne	 SHORT $LN44@encoder_li
  001e0	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR obj$[rsp]
  001e8	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  001ec	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  001f2	25 00 00 00 04	 and	 eax, 67108864		; 04000000H
  001f7	85 c0		 test	 eax, eax
  001f9	0f 84 e0 00 00
	00		 je	 $LN45@encoder_li
$LN44@encoder_li:

; 1405 :         if (Py_EnterRecursiveCall(" while encoding a JSON object"))

  001ff	e8 00 00 00 00	 call	 PyThreadState_Get
  00204	48 83 c0 18	 add	 rax, 24
  00208	48 89 44 24 60	 mov	 QWORD PTR tv150[rsp], rax
  0020d	48 8b 44 24 60	 mov	 rax, QWORD PTR tv150[rsp]
  00212	8b 00		 mov	 eax, DWORD PTR [rax]
  00214	ff c0		 inc	 eax
  00216	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tv150[rsp]
  0021b	89 01		 mov	 DWORD PTR [rcx], eax
  0021d	48 8b 44 24 60	 mov	 rax, QWORD PTR tv150[rsp]
  00222	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _Py_CheckRecursionLimit
  00228	39 08		 cmp	 DWORD PTR [rax], ecx
  0022a	7e 1a		 jle	 SHORT $LN43@encoder_li
  0022c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BO@PDLAPALN@?5while?5encoding?5a?5JSON?5object?$AA@
  00233	e8 00 00 00 00	 call	 _Py_CheckRecursiveCall
  00238	85 c0		 test	 eax, eax
  0023a	74 0a		 je	 SHORT $LN43@encoder_li

; 1406 :             return -1;

  0023c	b8 ff ff ff ff	 mov	 eax, -1
  00241	e9 40 04 00 00	 jmp	 $LN60@encoder_li
$LN43@encoder_li:

; 1407 :         rv = encoder_listencode_list(s, acc, obj, indent_level);

  00246	4c 8b 8c 24 d8
	00 00 00	 mov	 r9, QWORD PTR indent_level$[rsp]
  0024e	4c 8b 84 24 d0
	00 00 00	 mov	 r8, QWORD PTR obj$[rsp]
  00256	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR acc$[rsp]
  0025e	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  00266	e8 00 00 00 00	 call	 encoder_listencode_list
  0026b	89 44 24 20	 mov	 DWORD PTR rv$[rsp], eax
$LN42@encoder_li:

; 1408 :         Py_LeaveRecursiveCall();

  0026f	83 3d 00 00 00
	00 64		 cmp	 DWORD PTR _Py_CheckRecursionLimit, 100 ; 00000064H
  00276	7e 0f		 jle	 SHORT $LN62@encoder_li
  00278	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR _Py_CheckRecursionLimit
  0027e	83 e8 32	 sub	 eax, 50			; 00000032H
  00281	89 44 24 68	 mov	 DWORD PTR tv169[rsp], eax
  00285	eb 10		 jmp	 SHORT $LN63@encoder_li
$LN62@encoder_li:
  00287	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR _Py_CheckRecursionLimit
  0028d	c1 f8 02	 sar	 eax, 2
  00290	6b c0 03	 imul	 eax, 3
  00293	89 44 24 68	 mov	 DWORD PTR tv169[rsp], eax
$LN63@encoder_li:
  00297	e8 00 00 00 00	 call	 PyThreadState_Get
  0029c	48 83 c0 18	 add	 rax, 24
  002a0	48 89 44 24 70	 mov	 QWORD PTR tv163[rsp], rax
  002a5	48 8b 44 24 70	 mov	 rax, QWORD PTR tv163[rsp]
  002aa	8b 00		 mov	 eax, DWORD PTR [rax]
  002ac	ff c8		 dec	 eax
  002ae	48 8b 4c 24 70	 mov	 rcx, QWORD PTR tv163[rsp]
  002b3	89 01		 mov	 DWORD PTR [rcx], eax
  002b5	48 8b 44 24 70	 mov	 rax, QWORD PTR tv163[rsp]
  002ba	8b 4c 24 68	 mov	 ecx, DWORD PTR tv169[rsp]
  002be	39 08		 cmp	 DWORD PTR [rax], ecx
  002c0	7d 09		 jge	 SHORT $LN39@encoder_li
  002c2	e8 00 00 00 00	 call	 PyThreadState_Get
  002c7	c6 40 1c 00	 mov	 BYTE PTR [rax+28], 0
$LN39@encoder_li:
  002cb	33 c0		 xor	 eax, eax
  002cd	85 c0		 test	 eax, eax
  002cf	75 9e		 jne	 SHORT $LN42@encoder_li

; 1409 :         return rv;

  002d1	8b 44 24 20	 mov	 eax, DWORD PTR rv$[rsp]
  002d5	e9 ac 03 00 00	 jmp	 $LN60@encoder_li
  002da	e9 a7 03 00 00	 jmp	 $LN38@encoder_li
$LN45@encoder_li:

; 1410 :     }
; 1411 :     else if (PyDict_Check(obj)) {

  002df	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR obj$[rsp]
  002e7	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  002eb	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  002f1	25 00 00 00 20	 and	 eax, 536870912		; 20000000H
  002f6	85 c0		 test	 eax, eax
  002f8	0f 84 f5 00 00
	00		 je	 $LN37@encoder_li

; 1412 :         if (Py_EnterRecursiveCall(" while encoding a JSON object"))

  002fe	e8 00 00 00 00	 call	 PyThreadState_Get
  00303	48 83 c0 18	 add	 rax, 24
  00307	48 89 44 24 78	 mov	 QWORD PTR tv180[rsp], rax
  0030c	48 8b 44 24 78	 mov	 rax, QWORD PTR tv180[rsp]
  00311	8b 00		 mov	 eax, DWORD PTR [rax]
  00313	ff c0		 inc	 eax
  00315	48 8b 4c 24 78	 mov	 rcx, QWORD PTR tv180[rsp]
  0031a	89 01		 mov	 DWORD PTR [rcx], eax
  0031c	48 8b 44 24 78	 mov	 rax, QWORD PTR tv180[rsp]
  00321	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _Py_CheckRecursionLimit
  00327	39 08		 cmp	 DWORD PTR [rax], ecx
  00329	7e 1a		 jle	 SHORT $LN36@encoder_li
  0032b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BO@PDLAPALN@?5while?5encoding?5a?5JSON?5object?$AA@
  00332	e8 00 00 00 00	 call	 _Py_CheckRecursiveCall
  00337	85 c0		 test	 eax, eax
  00339	74 0a		 je	 SHORT $LN36@encoder_li

; 1413 :             return -1;

  0033b	b8 ff ff ff ff	 mov	 eax, -1
  00340	e9 41 03 00 00	 jmp	 $LN60@encoder_li
$LN36@encoder_li:

; 1414 :         rv = encoder_listencode_dict(s, acc, obj, indent_level);

  00345	4c 8b 8c 24 d8
	00 00 00	 mov	 r9, QWORD PTR indent_level$[rsp]
  0034d	4c 8b 84 24 d0
	00 00 00	 mov	 r8, QWORD PTR obj$[rsp]
  00355	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR acc$[rsp]
  0035d	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  00365	e8 00 00 00 00	 call	 encoder_listencode_dict
  0036a	89 44 24 20	 mov	 DWORD PTR rv$[rsp], eax
$LN35@encoder_li:

; 1415 :         Py_LeaveRecursiveCall();

  0036e	83 3d 00 00 00
	00 64		 cmp	 DWORD PTR _Py_CheckRecursionLimit, 100 ; 00000064H
  00375	7e 12		 jle	 SHORT $LN64@encoder_li
  00377	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR _Py_CheckRecursionLimit
  0037d	83 e8 32	 sub	 eax, 50			; 00000032H
  00380	89 84 24 80 00
	00 00		 mov	 DWORD PTR tv199[rsp], eax
  00387	eb 13		 jmp	 SHORT $LN65@encoder_li
$LN64@encoder_li:
  00389	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR _Py_CheckRecursionLimit
  0038f	c1 f8 02	 sar	 eax, 2
  00392	6b c0 03	 imul	 eax, 3
  00395	89 84 24 80 00
	00 00		 mov	 DWORD PTR tv199[rsp], eax
$LN65@encoder_li:
  0039c	e8 00 00 00 00	 call	 PyThreadState_Get
  003a1	48 83 c0 18	 add	 rax, 24
  003a5	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv193[rsp], rax
  003ad	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR tv193[rsp]
  003b5	8b 00		 mov	 eax, DWORD PTR [rax]
  003b7	ff c8		 dec	 eax
  003b9	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR tv193[rsp]
  003c1	89 01		 mov	 DWORD PTR [rcx], eax
  003c3	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR tv193[rsp]
  003cb	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR tv199[rsp]
  003d2	39 08		 cmp	 DWORD PTR [rax], ecx
  003d4	7d 09		 jge	 SHORT $LN32@encoder_li
  003d6	e8 00 00 00 00	 call	 PyThreadState_Get
  003db	c6 40 1c 00	 mov	 BYTE PTR [rax+28], 0
$LN32@encoder_li:
  003df	33 c0		 xor	 eax, eax
  003e1	85 c0		 test	 eax, eax
  003e3	75 89		 jne	 SHORT $LN35@encoder_li

; 1416 :         return rv;

  003e5	8b 44 24 20	 mov	 eax, DWORD PTR rv$[rsp]
  003e9	e9 98 02 00 00	 jmp	 $LN60@encoder_li

; 1417 :     }
; 1418 :     else {

  003ee	e9 93 02 00 00	 jmp	 $LN31@encoder_li
$LN37@encoder_li:

; 1419 :         PyObject *ident = NULL;

  003f3	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR ident$22345[rsp], 0

; 1420 :         if (s->markers != Py_None) {

  003fc	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00403	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  0040b	48 39 41 60	 cmp	 QWORD PTR [rcx+96], rax
  0040f	0f 84 a9 00 00
	00		 je	 $LN30@encoder_li

; 1421 :             int has_key;
; 1422 :             ident = PyLong_FromVoidPtr(obj);

  00415	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  0041d	e8 00 00 00 00	 call	 PyLong_FromVoidPtr
  00422	48 89 44 24 50	 mov	 QWORD PTR ident$22345[rsp], rax

; 1423 :             if (ident == NULL)

  00427	48 83 7c 24 50
	00		 cmp	 QWORD PTR ident$22345[rsp], 0
  0042d	75 0a		 jne	 SHORT $LN29@encoder_li

; 1424 :                 return -1;

  0042f	b8 ff ff ff ff	 mov	 eax, -1
  00434	e9 4d 02 00 00	 jmp	 $LN60@encoder_li
$LN29@encoder_li:

; 1425 :             has_key = PyDict_Contains(s->markers, ident);

  00439	48 8b 54 24 50	 mov	 rdx, QWORD PTR ident$22345[rsp]
  0043e	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00446	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  0044a	e8 00 00 00 00	 call	 PyDict_Contains
  0044f	89 44 24 58	 mov	 DWORD PTR has_key$22348[rsp], eax

; 1426 :             if (has_key) {

  00453	83 7c 24 58 00	 cmp	 DWORD PTR has_key$22348[rsp], 0
  00458	74 2e		 je	 SHORT $LN28@encoder_li

; 1427 :                 if (has_key != -1)

  0045a	83 7c 24 58 ff	 cmp	 DWORD PTR has_key$22348[rsp], -1
  0045f	74 13		 je	 SHORT $LN27@encoder_li

; 1428 :                     PyErr_SetString(PyExc_ValueError, "Circular reference detected");

  00461	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@PEOODJKM@Circular?5reference?5detected?$AA@
  00468	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0046f	e8 00 00 00 00	 call	 PyErr_SetString
$LN27@encoder_li:

; 1429 :                 Py_DECREF(ident);

  00474	48 8b 4c 24 50	 mov	 rcx, QWORD PTR ident$22345[rsp]
  00479	e8 00 00 00 00	 call	 _Py_DecRef

; 1430 :                 return -1;

  0047e	b8 ff ff ff ff	 mov	 eax, -1
  00483	e9 fe 01 00 00	 jmp	 $LN60@encoder_li
$LN28@encoder_li:

; 1431 :             }
; 1432 :             if (PyDict_SetItem(s->markers, ident, obj)) {

  00488	4c 8b 84 24 d0
	00 00 00	 mov	 r8, QWORD PTR obj$[rsp]
  00490	48 8b 54 24 50	 mov	 rdx, QWORD PTR ident$22345[rsp]
  00495	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  0049d	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  004a1	e8 00 00 00 00	 call	 PyDict_SetItem
  004a6	85 c0		 test	 eax, eax
  004a8	74 14		 je	 SHORT $LN26@encoder_li

; 1433 :                 Py_DECREF(ident);

  004aa	48 8b 4c 24 50	 mov	 rcx, QWORD PTR ident$22345[rsp]
  004af	e8 00 00 00 00	 call	 _Py_DecRef

; 1434 :                 return -1;

  004b4	b8 ff ff ff ff	 mov	 eax, -1
  004b9	e9 c8 01 00 00	 jmp	 $LN60@encoder_li
$LN26@encoder_li:
$LN30@encoder_li:

; 1435 :             }
; 1436 :         }
; 1437 :         newobj = PyObject_CallFunctionObjArgs(s->defaultfn, obj, NULL);

  004be	45 33 c0	 xor	 r8d, r8d
  004c1	48 8b 94 24 d0
	00 00 00	 mov	 rdx, QWORD PTR obj$[rsp]
  004c9	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  004d1	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  004d5	e8 00 00 00 00	 call	 PyObject_CallFunctionObjArgs
  004da	48 89 44 24 28	 mov	 QWORD PTR newobj$[rsp], rax

; 1438 :         if (newobj == NULL) {

  004df	48 83 7c 24 28
	00		 cmp	 QWORD PTR newobj$[rsp], 0
  004e5	75 22		 jne	 SHORT $LN25@encoder_li
$LN24@encoder_li:

; 1439 :             Py_XDECREF(ident);

  004e7	48 83 7c 24 50
	00		 cmp	 QWORD PTR ident$22345[rsp], 0
  004ed	74 0a		 je	 SHORT $LN21@encoder_li
  004ef	48 8b 4c 24 50	 mov	 rcx, QWORD PTR ident$22345[rsp]
  004f4	e8 00 00 00 00	 call	 _Py_DecRef
$LN21@encoder_li:
  004f9	33 c0		 xor	 eax, eax
  004fb	85 c0		 test	 eax, eax
  004fd	75 e8		 jne	 SHORT $LN24@encoder_li

; 1440 :             return -1;

  004ff	b8 ff ff ff ff	 mov	 eax, -1
  00504	e9 7d 01 00 00	 jmp	 $LN60@encoder_li
$LN25@encoder_li:

; 1441 :         }
; 1442 : 
; 1443 :         if (Py_EnterRecursiveCall(" while encoding a JSON object"))

  00509	e8 00 00 00 00	 call	 PyThreadState_Get
  0050e	48 83 c0 18	 add	 rax, 24
  00512	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tv236[rsp], rax
  0051a	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR tv236[rsp]
  00522	8b 00		 mov	 eax, DWORD PTR [rax]
  00524	ff c0		 inc	 eax
  00526	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR tv236[rsp]
  0052e	89 01		 mov	 DWORD PTR [rcx], eax
  00530	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR tv236[rsp]
  00538	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR _Py_CheckRecursionLimit
  0053e	39 08		 cmp	 DWORD PTR [rax], ecx
  00540	7e 1a		 jle	 SHORT $LN20@encoder_li
  00542	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BO@PDLAPALN@?5while?5encoding?5a?5JSON?5object?$AA@
  00549	e8 00 00 00 00	 call	 _Py_CheckRecursiveCall
  0054e	85 c0		 test	 eax, eax
  00550	74 0a		 je	 SHORT $LN20@encoder_li

; 1444 :             return -1;

  00552	b8 ff ff ff ff	 mov	 eax, -1
  00557	e9 2a 01 00 00	 jmp	 $LN60@encoder_li
$LN20@encoder_li:

; 1445 :         rv = encoder_listencode_obj(s, acc, newobj, indent_level);

  0055c	4c 8b 8c 24 d8
	00 00 00	 mov	 r9, QWORD PTR indent_level$[rsp]
  00564	4c 8b 44 24 28	 mov	 r8, QWORD PTR newobj$[rsp]
  00569	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR acc$[rsp]
  00571	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  00579	e8 00 00 00 00	 call	 encoder_listencode_obj
  0057e	89 44 24 20	 mov	 DWORD PTR rv$[rsp], eax
$LN19@encoder_li:

; 1446 :         Py_LeaveRecursiveCall();

  00582	83 3d 00 00 00
	00 64		 cmp	 DWORD PTR _Py_CheckRecursionLimit, 100 ; 00000064H
  00589	7e 12		 jle	 SHORT $LN66@encoder_li
  0058b	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR _Py_CheckRecursionLimit
  00591	83 e8 32	 sub	 eax, 50			; 00000032H
  00594	89 84 24 98 00
	00 00		 mov	 DWORD PTR tv255[rsp], eax
  0059b	eb 13		 jmp	 SHORT $LN67@encoder_li
$LN66@encoder_li:
  0059d	8b 05 00 00 00
	00		 mov	 eax, DWORD PTR _Py_CheckRecursionLimit
  005a3	c1 f8 02	 sar	 eax, 2
  005a6	6b c0 03	 imul	 eax, 3
  005a9	89 84 24 98 00
	00 00		 mov	 DWORD PTR tv255[rsp], eax
$LN67@encoder_li:
  005b0	e8 00 00 00 00	 call	 PyThreadState_Get
  005b5	48 83 c0 18	 add	 rax, 24
  005b9	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR tv249[rsp], rax
  005c1	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR tv249[rsp]
  005c9	8b 00		 mov	 eax, DWORD PTR [rax]
  005cb	ff c8		 dec	 eax
  005cd	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR tv249[rsp]
  005d5	89 01		 mov	 DWORD PTR [rcx], eax
  005d7	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR tv249[rsp]
  005df	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR tv255[rsp]
  005e6	39 08		 cmp	 DWORD PTR [rax], ecx
  005e8	7d 09		 jge	 SHORT $LN16@encoder_li
  005ea	e8 00 00 00 00	 call	 PyThreadState_Get
  005ef	c6 40 1c 00	 mov	 BYTE PTR [rax+28], 0
$LN16@encoder_li:
  005f3	33 c0		 xor	 eax, eax
  005f5	85 c0		 test	 eax, eax
  005f7	75 89		 jne	 SHORT $LN19@encoder_li

; 1447 : 
; 1448 :         Py_DECREF(newobj);

  005f9	48 8b 4c 24 28	 mov	 rcx, QWORD PTR newobj$[rsp]
  005fe	e8 00 00 00 00	 call	 _Py_DecRef

; 1449 :         if (rv) {

  00603	83 7c 24 20 00	 cmp	 DWORD PTR rv$[rsp], 0
  00608	74 1f		 je	 SHORT $LN15@encoder_li
$LN14@encoder_li:

; 1450 :             Py_XDECREF(ident);

  0060a	48 83 7c 24 50
	00		 cmp	 QWORD PTR ident$22345[rsp], 0
  00610	74 0a		 je	 SHORT $LN11@encoder_li
  00612	48 8b 4c 24 50	 mov	 rcx, QWORD PTR ident$22345[rsp]
  00617	e8 00 00 00 00	 call	 _Py_DecRef
$LN11@encoder_li:
  0061c	33 c0		 xor	 eax, eax
  0061e	85 c0		 test	 eax, eax
  00620	75 e8		 jne	 SHORT $LN14@encoder_li

; 1451 :             return -1;

  00622	b8 ff ff ff ff	 mov	 eax, -1
  00627	eb 5d		 jmp	 SHORT $LN60@encoder_li
$LN15@encoder_li:

; 1452 :         }
; 1453 :         if (ident != NULL) {

  00629	48 83 7c 24 50
	00		 cmp	 QWORD PTR ident$22345[rsp], 0
  0062f	74 51		 je	 SHORT $LN10@encoder_li

; 1454 :             if (PyDict_DelItem(s->markers, ident)) {

  00631	48 8b 54 24 50	 mov	 rdx, QWORD PTR ident$22345[rsp]
  00636	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  0063e	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00642	e8 00 00 00 00	 call	 PyDict_DelItem
  00647	85 c0		 test	 eax, eax
  00649	74 1f		 je	 SHORT $LN9@encoder_li
$LN8@encoder_li:

; 1455 :                 Py_XDECREF(ident);

  0064b	48 83 7c 24 50
	00		 cmp	 QWORD PTR ident$22345[rsp], 0
  00651	74 0a		 je	 SHORT $LN5@encoder_li
  00653	48 8b 4c 24 50	 mov	 rcx, QWORD PTR ident$22345[rsp]
  00658	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@encoder_li:
  0065d	33 c0		 xor	 eax, eax
  0065f	85 c0		 test	 eax, eax
  00661	75 e8		 jne	 SHORT $LN8@encoder_li

; 1456 :                 return -1;

  00663	b8 ff ff ff ff	 mov	 eax, -1
  00668	eb 1c		 jmp	 SHORT $LN60@encoder_li
$LN9@encoder_li:
$LN4@encoder_li:

; 1457 :             }
; 1458 :             Py_XDECREF(ident);

  0066a	48 83 7c 24 50
	00		 cmp	 QWORD PTR ident$22345[rsp], 0
  00670	74 0a		 je	 SHORT $LN1@encoder_li
  00672	48 8b 4c 24 50	 mov	 rcx, QWORD PTR ident$22345[rsp]
  00677	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@encoder_li:
  0067c	33 c0		 xor	 eax, eax
  0067e	85 c0		 test	 eax, eax
  00680	75 e8		 jne	 SHORT $LN4@encoder_li
$LN10@encoder_li:

; 1459 :         }
; 1460 :         return rv;

  00682	8b 44 24 20	 mov	 eax, DWORD PTR rv$[rsp]
$LN31@encoder_li:
$LN38@encoder_li:
$LN46@encoder_li:
$LN50@encoder_li:
$LN53@encoder_li:
$LN56@encoder_li:
$LN60@encoder_li:

; 1461 :     }
; 1462 : }

  00686	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  0068d	c3		 ret	 0
encoder_listencode_obj ENDP
_TEXT	ENDS
PUBLIC	??_C@_0M@HLNFKNCD@not?5a?5const?$AA@		; `string'
PUBLIC	??_C@_05LAPONLG@false?$AA@			; `string'
PUBLIC	??_C@_04LOAJBDKD@true?$AA@			; `string'
PUBLIC	??_C@_04MLLLIHIP@null?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$_encoded_const DD imagerel _encoded_const
	DD	imagerel _encoded_const+239
	DD	imagerel $unwind$_encoded_const
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_encoded_const DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT ??_C@_0M@HLNFKNCD@not?5a?5const?$AA@
CONST	SEGMENT
??_C@_0M@HLNFKNCD@not?5a?5const?$AA@ DB 'not a const', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05LAPONLG@false?$AA@
CONST	SEGMENT
??_C@_05LAPONLG@false?$AA@ DB 'false', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04LOAJBDKD@true?$AA@
CONST	SEGMENT
??_C@_04LOAJBDKD@true?$AA@ DB 'true', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04MLLLIHIP@null?$AA@
CONST	SEGMENT
??_C@_04MLLLIHIP@null?$AA@ DB 'null', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _encoded_const
_TEXT	SEGMENT
obj$ = 48
_encoded_const PROC					; COMDAT

; 1296 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1297 :     /* Return the JSON string representation of None, True, False */
; 1298 :     if (obj == Py_None) {

  00009	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00010	48 39 44 24 30	 cmp	 QWORD PTR obj$[rsp], rax
  00015	75 3a		 jne	 SHORT $LN9@encoded_co

; 1299 :         static PyObject *s_null = NULL;
; 1300 :         if (s_null == NULL) {

  00017	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?s_null@?2??_encoded_const@@9@9, 0
  0001f	75 13		 jne	 SHORT $LN8@encoded_co

; 1301 :             s_null = PyUnicode_InternFromString("null");

  00021	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04MLLLIHIP@null?$AA@
  00028	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  0002d	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?s_null@?2??_encoded_const@@9@9, rax
$LN8@encoded_co:

; 1302 :         }
; 1303 :         Py_INCREF(s_null);

  00034	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?s_null@?2??_encoded_const@@9@9
  0003b	e8 00 00 00 00	 call	 _Py_IncRef

; 1304 :         return s_null;

  00040	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?s_null@?2??_encoded_const@@9@9
  00047	e9 9e 00 00 00	 jmp	 $LN10@encoded_co
  0004c	e9 99 00 00 00	 jmp	 $LN7@encoded_co
$LN9@encoded_co:

; 1305 :     }
; 1306 :     else if (obj == Py_True) {

  00051	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  00058	48 39 44 24 30	 cmp	 QWORD PTR obj$[rsp], rax
  0005d	75 34		 jne	 SHORT $LN6@encoded_co

; 1307 :         static PyObject *s_true = NULL;
; 1308 :         if (s_true == NULL) {

  0005f	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?s_true@?4??_encoded_const@@9@9, 0
  00067	75 13		 jne	 SHORT $LN5@encoded_co

; 1309 :             s_true = PyUnicode_InternFromString("true");

  00069	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04LOAJBDKD@true?$AA@
  00070	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  00075	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?s_true@?4??_encoded_const@@9@9, rax
$LN5@encoded_co:

; 1310 :         }
; 1311 :         Py_INCREF(s_true);

  0007c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?s_true@?4??_encoded_const@@9@9
  00083	e8 00 00 00 00	 call	 _Py_IncRef

; 1312 :         return s_true;

  00088	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?s_true@?4??_encoded_const@@9@9
  0008f	eb 59		 jmp	 SHORT $LN10@encoded_co
  00091	eb 57		 jmp	 SHORT $LN4@encoded_co
$LN6@encoded_co:

; 1313 :     }
; 1314 :     else if (obj == Py_False) {

  00093	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct
  0009a	48 39 44 24 30	 cmp	 QWORD PTR obj$[rsp], rax
  0009f	75 34		 jne	 SHORT $LN3@encoded_co

; 1315 :         static PyObject *s_false = NULL;
; 1316 :         if (s_false == NULL) {

  000a1	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?s_false@?6??_encoded_const@@9@9, 0
  000a9	75 13		 jne	 SHORT $LN2@encoded_co

; 1317 :             s_false = PyUnicode_InternFromString("false");

  000ab	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05LAPONLG@false?$AA@
  000b2	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  000b7	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?s_false@?6??_encoded_const@@9@9, rax
$LN2@encoded_co:

; 1318 :         }
; 1319 :         Py_INCREF(s_false);

  000be	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?s_false@?6??_encoded_const@@9@9
  000c5	e8 00 00 00 00	 call	 _Py_IncRef

; 1320 :         return s_false;

  000ca	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?s_false@?6??_encoded_const@@9@9
  000d1	eb 17		 jmp	 SHORT $LN10@encoded_co

; 1321 :     }
; 1322 :     else {

  000d3	eb 15		 jmp	 SHORT $LN1@encoded_co
$LN3@encoded_co:

; 1323 :         PyErr_SetString(PyExc_ValueError, "not a const");

  000d5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0M@HLNFKNCD@not?5a?5const?$AA@
  000dc	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  000e3	e8 00 00 00 00	 call	 PyErr_SetString

; 1324 :         return NULL;

  000e8	33 c0		 xor	 eax, eax
$LN1@encoded_co:
$LN4@encoded_co:
$LN7@encoded_co:
$LN10@encoded_co:

; 1325 :     }
; 1326 : }

  000ea	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000ee	c3		 ret	 0
_encoded_const ENDP
_TEXT	ENDS
PUBLIC	__real@0000000000000000
PUBLIC	??_C@_0DB@BGGMNKIO@Out?5of?5range?5float?5values?5are?5no@ ; `string'
EXTRN	PyObject_Repr:PROC
EXTRN	PyUnicode_FromString:PROC
EXTRN	__imp__finite:PROC
EXTRN	_fltused:DWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$encoder_encode_float DD imagerel encoder_encode_float
	DD	imagerel encoder_encode_float+172
	DD	imagerel $unwind$encoder_encode_float
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$encoder_encode_float DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT ??_C@_0DB@BGGMNKIO@Out?5of?5range?5float?5values?5are?5no@
CONST	SEGMENT
??_C@_0DB@BGGMNKIO@Out?5of?5range?5float?5values?5are?5no@ DB 'Out of ran'
	DB	'ge float values are not JSON compliant', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT encoder_encode_float
_TEXT	SEGMENT
i$ = 32
s$ = 64
obj$ = 72
encoder_encode_float PROC				; COMDAT

; 1330 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1331 :     /* Return the JSON representation of a PyFloat */
; 1332 :     double i = PyFloat_AS_DOUBLE(obj);

  0000e	48 8b 44 24 48	 mov	 rax, QWORD PTR obj$[rsp]
  00013	f2 0f 10 40 60	 movsdx	 xmm0, QWORD PTR [rax+96]
  00018	f2 0f 11 44 24
	20		 movsdx	 QWORD PTR i$[rsp], xmm0

; 1333 :     if (!Py_IS_FINITE(i)) {

  0001e	f2 0f 10 44 24
	20		 movsdx	 xmm0, QWORD PTR i$[rsp]
  00024	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__finite
  0002a	85 c0		 test	 eax, eax
  0002c	75 6f		 jne	 SHORT $LN6@encoder_en

; 1334 :         if (!s->allow_nan) {

  0002e	48 8b 44 24 40	 mov	 rax, QWORD PTR s$[rsp]
  00033	83 b8 a4 00 00
	00 00		 cmp	 DWORD PTR [rax+164], 0
  0003a	75 17		 jne	 SHORT $LN5@encoder_en

; 1335 :             PyErr_SetString(PyExc_ValueError, "Out of range float values are not JSON compliant");

  0003c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DB@BGGMNKIO@Out?5of?5range?5float?5values?5are?5no@
  00043	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0004a	e8 00 00 00 00	 call	 PyErr_SetString

; 1336 :             return NULL;

  0004f	33 c0		 xor	 eax, eax
  00051	eb 54		 jmp	 SHORT $LN7@encoder_en
$LN5@encoder_en:

; 1337 :         }
; 1338 :         if (i > 0) {

  00053	f2 0f 10 44 24
	20		 movsdx	 xmm0, QWORD PTR i$[rsp]
  00059	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@0000000000000000
  00061	76 10		 jbe	 SHORT $LN4@encoder_en

; 1339 :             return PyUnicode_FromString("Infinity");

  00063	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08KEBCLIFP@Infinity?$AA@
  0006a	e8 00 00 00 00	 call	 PyUnicode_FromString
  0006f	eb 36		 jmp	 SHORT $LN7@encoder_en
  00071	eb 2a		 jmp	 SHORT $LN3@encoder_en
$LN4@encoder_en:

; 1340 :         }
; 1341 :         else if (i < 0) {

  00073	66 0f 57 c0	 xorpd	 xmm0, xmm0
  00077	66 0f 2f 44 24
	20		 comisd	 xmm0, QWORD PTR i$[rsp]
  0007d	76 10		 jbe	 SHORT $LN2@encoder_en

; 1342 :             return PyUnicode_FromString("-Infinity");

  0007f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09BLDCEMOH@?9Infinity?$AA@
  00086	e8 00 00 00 00	 call	 PyUnicode_FromString
  0008b	eb 1a		 jmp	 SHORT $LN7@encoder_en

; 1343 :         }
; 1344 :         else {

  0008d	eb 0e		 jmp	 SHORT $LN1@encoder_en
$LN2@encoder_en:

; 1345 :             return PyUnicode_FromString("NaN");

  0008f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03ICJPMMHB@NaN?$AA@
  00096	e8 00 00 00 00	 call	 PyUnicode_FromString
  0009b	eb 0a		 jmp	 SHORT $LN7@encoder_en
$LN1@encoder_en:
$LN3@encoder_en:
$LN6@encoder_en:

; 1346 :         }
; 1347 :     }
; 1348 :     /* Use a better float format here? */
; 1349 :     return PyObject_Repr(obj);

  0009d	48 8b 4c 24 48	 mov	 rcx, QWORD PTR obj$[rsp]
  000a2	e8 00 00 00 00	 call	 PyObject_Repr
$LN7@encoder_en:

; 1350 : }

  000a7	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000ab	c3		 ret	 0
encoder_encode_float ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$encoder_encode_string DD imagerel encoder_encode_string
	DD	imagerel encoder_encode_string+71
	DD	imagerel $unwind$encoder_encode_string
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$encoder_encode_string DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT encoder_encode_string
_TEXT	SEGMENT
s$ = 48
obj$ = 56
encoder_encode_string PROC				; COMDAT

; 1354 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1355 :     /* Return the JSON representation of a string */
; 1356 :     if (s->fast_encode)

  0000e	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  00013	83 b8 a0 00 00
	00 00		 cmp	 DWORD PTR [rax+160], 0
  0001a	74 10		 je	 SHORT $LN2@encoder_en@2

; 1357 :         return py_encode_basestring_ascii(NULL, obj);

  0001c	48 8b 54 24 38	 mov	 rdx, QWORD PTR obj$[rsp]
  00021	33 c9		 xor	 ecx, ecx
  00023	e8 00 00 00 00	 call	 py_encode_basestring_ascii
  00028	eb 18		 jmp	 SHORT $LN3@encoder_en@2

; 1358 :     else

  0002a	eb 16		 jmp	 SHORT $LN1@encoder_en@2
$LN2@encoder_en@2:

; 1359 :         return PyObject_CallFunctionObjArgs(s->encoder, obj, NULL);

  0002c	45 33 c0	 xor	 r8d, r8d
  0002f	48 8b 54 24 38	 mov	 rdx, QWORD PTR obj$[rsp]
  00034	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  00039	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  0003d	e8 00 00 00 00	 call	 PyObject_CallFunctionObjArgs
$LN1@encoder_en@2:
$LN3@encoder_en@2:

; 1360 : }

  00042	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00046	c3		 ret	 0
encoder_encode_string ENDP
_TEXT	ENDS
EXTRN	_PyAccu_Accumulate:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$_steal_accumulate DD imagerel _steal_accumulate
	DD	imagerel _steal_accumulate+52
	DD	imagerel $unwind$_steal_accumulate
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_steal_accumulate DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _steal_accumulate
_TEXT	SEGMENT
rval$ = 32
acc$ = 64
stolen$ = 72
_steal_accumulate PROC					; COMDAT

; 1364 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1365 :     /* Append stolen and then decrement its reference count */
; 1366 :     int rval = _PyAccu_Accumulate(acc, stolen);

  0000e	48 8b 54 24 48	 mov	 rdx, QWORD PTR stolen$[rsp]
  00013	48 8b 4c 24 40	 mov	 rcx, QWORD PTR acc$[rsp]
  00018	e8 00 00 00 00	 call	 _PyAccu_Accumulate
  0001d	89 44 24 20	 mov	 DWORD PTR rval$[rsp], eax

; 1367 :     Py_DECREF(stolen);

  00021	48 8b 4c 24 48	 mov	 rcx, QWORD PTR stolen$[rsp]
  00026	e8 00 00 00 00	 call	 _Py_DecRef

; 1368 :     return rval;

  0002b	8b 44 24 20	 mov	 eax, DWORD PTR rval$[rsp]

; 1369 : }

  0002f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00033	c3		 ret	 0
_steal_accumulate ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BI@LAIECFEL@encoder_listencode_dict?$AA@	; `string'
PUBLIC	??_C@_0BG@KBENEGNI@keys?5must?5be?5a?5string?$AA@ ; `string'
PUBLIC	??_C@_0BL@NAMMALPE@items?5must?5return?52?9tuples?$AA@ ; `string'
PUBLIC	??_C@_0BG@MAFCIFGN@keys?5must?5return?5list?$AA@ ; `string'
PUBLIC	??_C@_02MCILKGOH@?$HL?$HN?$AA@			; `string'
PUBLIC	??_C@_01CELHOKLL@?$HN?$AA@			; `string'
PUBLIC	??_C@_01HCONENDN@?$HL?$AA@			; `string'
EXTRN	PyIter_Next:PROC
EXTRN	PyObject_GetIter:PROC
EXTRN	PyMapping_Items:PROC
EXTRN	PyList_Sort:PROC
EXTRN	PyMapping_Keys:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$encoder_listencode_dict DD imagerel encoder_listencode_dict
	DD	imagerel encoder_listencode_dict+2063
	DD	imagerel $unwind$encoder_listencode_dict
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$encoder_listencode_dict DD 021b01H
	DD	019011bH
xdata	ENDS
;	COMDAT ??_C@_0BI@LAIECFEL@encoder_listencode_dict?$AA@
CONST	SEGMENT
??_C@_0BI@LAIECFEL@encoder_listencode_dict?$AA@ DB 'encoder_listencode_di'
	DB	'ct', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@KBENEGNI@keys?5must?5be?5a?5string?$AA@
CONST	SEGMENT
??_C@_0BG@KBENEGNI@keys?5must?5be?5a?5string?$AA@ DB 'keys must be a stri'
	DB	'ng', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@NAMMALPE@items?5must?5return?52?9tuples?$AA@
CONST	SEGMENT
??_C@_0BL@NAMMALPE@items?5must?5return?52?9tuples?$AA@ DB 'items must ret'
	DB	'urn 2-tuples', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@MAFCIFGN@keys?5must?5return?5list?$AA@
CONST	SEGMENT
??_C@_0BG@MAFCIFGN@keys?5must?5return?5list?$AA@ DB 'keys must return lis'
	DB	't', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_02MCILKGOH@?$HL?$HN?$AA@
CONST	SEGMENT
??_C@_02MCILKGOH@?$HL?$HN?$AA@ DB '{}', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01CELHOKLL@?$HN?$AA@
CONST	SEGMENT
??_C@_01CELHOKLL@?$HN?$AA@ DB '}', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01HCONENDN@?$HL?$AA@
CONST	SEGMENT
??_C@_01HCONENDN@?$HL?$AA@ DB '{', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT encoder_listencode_dict
_TEXT	SEGMENT
it$ = 48
kstr$ = 56
idx$ = 64
skipkeys$ = 72
items$ = 80
item$ = 88
ident$ = 96
has_key$22435 = 104
i$22445 = 112
nitems$22446 = 120
value$22458 = 128
key$22457 = 136
encoded$22474 = 144
value$22476 = 152
key$22475 = 160
_py_tmp$22517 = 168
_py_tmp$22535 = 176
_py_tmp$22546 = 184
s$ = 208
acc$ = 216
dct$ = 224
indent_level$ = 232
encoder_listencode_dict PROC				; COMDAT

; 1467 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H

; 1468 :     /* Encode Python dict dct a JSON term */
; 1469 :     static PyObject *open_dict = NULL;
; 1470 :     static PyObject *close_dict = NULL;
; 1471 :     static PyObject *empty_dict = NULL;
; 1472 :     PyObject *kstr = NULL;

  0001b	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR kstr$[rsp], 0

; 1473 :     PyObject *ident = NULL;

  00024	48 c7 44 24 60
	00 00 00 00	 mov	 QWORD PTR ident$[rsp], 0

; 1474 :     PyObject *it = NULL;

  0002d	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR it$[rsp], 0

; 1475 :     PyObject *items;
; 1476 :     PyObject *item = NULL;

  00036	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR item$[rsp], 0

; 1477 :     int skipkeys;
; 1478 :     Py_ssize_t idx;
; 1479 : 
; 1480 :     if (open_dict == NULL || close_dict == NULL || empty_dict == NULL) {

  0003f	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?open_dict@?1??encoder_listencode_dict@@9@9, 0
  00047	74 14		 je	 SHORT $LN79@encoder_li@2
  00049	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?close_dict@?1??encoder_listencode_dict@@9@9, 0
  00051	74 0a		 je	 SHORT $LN79@encoder_li@2
  00053	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?empty_dict@?1??encoder_listencode_dict@@9@9, 0
  0005b	75 61		 jne	 SHORT $LN80@encoder_li@2
$LN79@encoder_li@2:

; 1481 :         open_dict = PyUnicode_InternFromString("{");

  0005d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01HCONENDN@?$HL?$AA@
  00064	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  00069	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?open_dict@?1??encoder_listencode_dict@@9@9, rax

; 1482 :         close_dict = PyUnicode_InternFromString("}");

  00070	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01CELHOKLL@?$HN?$AA@
  00077	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  0007c	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?close_dict@?1??encoder_listencode_dict@@9@9, rax

; 1483 :         empty_dict = PyUnicode_InternFromString("{}");

  00083	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02MCILKGOH@?$HL?$HN?$AA@
  0008a	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  0008f	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?empty_dict@?1??encoder_listencode_dict@@9@9, rax

; 1484 :         if (open_dict == NULL || close_dict == NULL || empty_dict == NULL)

  00096	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?open_dict@?1??encoder_listencode_dict@@9@9, 0
  0009e	74 14		 je	 SHORT $LN77@encoder_li@2
  000a0	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?close_dict@?1??encoder_listencode_dict@@9@9, 0
  000a8	74 0a		 je	 SHORT $LN77@encoder_li@2
  000aa	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?empty_dict@?1??encoder_listencode_dict@@9@9, 0
  000b2	75 0a		 jne	 SHORT $LN78@encoder_li@2
$LN77@encoder_li@2:

; 1485 :             return -1;

  000b4	b8 ff ff ff ff	 mov	 eax, -1
  000b9	e9 49 07 00 00	 jmp	 $LN81@encoder_li@2
$LN78@encoder_li@2:
$LN80@encoder_li@2:

; 1486 :     }
; 1487 :     if (Py_SIZE(dct) == 0)

  000be	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR dct$[rsp]
  000c6	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  000cb	75 19		 jne	 SHORT $LN76@encoder_li@2

; 1488 :         return _PyAccu_Accumulate(acc, empty_dict);

  000cd	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR ?empty_dict@?1??encoder_listencode_dict@@9@9
  000d4	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR acc$[rsp]
  000dc	e8 00 00 00 00	 call	 _PyAccu_Accumulate
  000e1	e9 21 07 00 00	 jmp	 $LN81@encoder_li@2
$LN76@encoder_li@2:

; 1489 : 
; 1490 :     if (s->markers != Py_None) {

  000e6	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000ed	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  000f5	48 39 41 60	 cmp	 QWORD PTR [rcx+96], rax
  000f9	0f 84 86 00 00
	00		 je	 $LN75@encoder_li@2

; 1491 :         int has_key;
; 1492 :         ident = PyLong_FromVoidPtr(dct);

  000ff	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dct$[rsp]
  00107	e8 00 00 00 00	 call	 PyLong_FromVoidPtr
  0010c	48 89 44 24 60	 mov	 QWORD PTR ident$[rsp], rax

; 1493 :         if (ident == NULL)

  00111	48 83 7c 24 60
	00		 cmp	 QWORD PTR ident$[rsp], 0
  00117	75 05		 jne	 SHORT $LN74@encoder_li@2

; 1494 :             goto bail;

  00119	e9 84 06 00 00	 jmp	 $bail$22438
$LN74@encoder_li@2:

; 1495 :         has_key = PyDict_Contains(s->markers, ident);

  0011e	48 8b 54 24 60	 mov	 rdx, QWORD PTR ident$[rsp]
  00123	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  0012b	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  0012f	e8 00 00 00 00	 call	 PyDict_Contains
  00134	89 44 24 68	 mov	 DWORD PTR has_key$22435[rsp], eax

; 1496 :         if (has_key) {

  00138	83 7c 24 68 00	 cmp	 DWORD PTR has_key$22435[rsp], 0
  0013d	74 1f		 je	 SHORT $LN73@encoder_li@2

; 1497 :             if (has_key != -1)

  0013f	83 7c 24 68 ff	 cmp	 DWORD PTR has_key$22435[rsp], -1
  00144	74 13		 je	 SHORT $LN72@encoder_li@2

; 1498 :                 PyErr_SetString(PyExc_ValueError, "Circular reference detected");

  00146	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@PEOODJKM@Circular?5reference?5detected?$AA@
  0014d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00154	e8 00 00 00 00	 call	 PyErr_SetString
$LN72@encoder_li@2:

; 1499 :             goto bail;

  00159	e9 44 06 00 00	 jmp	 $bail$22438
$LN73@encoder_li@2:

; 1500 :         }
; 1501 :         if (PyDict_SetItem(s->markers, ident, dct)) {

  0015e	4c 8b 84 24 e0
	00 00 00	 mov	 r8, QWORD PTR dct$[rsp]
  00166	48 8b 54 24 60	 mov	 rdx, QWORD PTR ident$[rsp]
  0016b	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00173	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00177	e8 00 00 00 00	 call	 PyDict_SetItem
  0017c	85 c0		 test	 eax, eax
  0017e	74 05		 je	 SHORT $LN71@encoder_li@2

; 1502 :             goto bail;

  00180	e9 1d 06 00 00	 jmp	 $bail$22438
$LN71@encoder_li@2:
$LN75@encoder_li@2:

; 1503 :         }
; 1504 :     }
; 1505 : 
; 1506 :     if (_PyAccu_Accumulate(acc, open_dict))

  00185	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR ?open_dict@?1??encoder_listencode_dict@@9@9
  0018c	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR acc$[rsp]
  00194	e8 00 00 00 00	 call	 _PyAccu_Accumulate
  00199	85 c0		 test	 eax, eax
  0019b	74 05		 je	 SHORT $LN70@encoder_li@2

; 1507 :         goto bail;

  0019d	e9 00 06 00 00	 jmp	 $bail$22438
$LN70@encoder_li@2:

; 1508 : 
; 1509 :     if (s->indent != Py_None) {

  001a2	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  001a9	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  001b1	48 39 41 78	 cmp	 QWORD PTR [rcx+120], rax
  001b5	74 13		 je	 SHORT $LN69@encoder_li@2

; 1510 :         /* TODO: DOES NOT RUN */
; 1511 :         indent_level += 1;

  001b7	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR indent_level$[rsp]
  001bf	48 ff c0	 inc	 rax
  001c2	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR indent_level$[rsp], rax
$LN69@encoder_li@2:

; 1512 :         /*
; 1513 :             newline_indent = '\n' + (' ' * (_indent * _current_indent_level))
; 1514 :             separator = _item_separator + newline_indent
; 1515 :             buf += newline_indent
; 1516 :         */
; 1517 :     }
; 1518 : 
; 1519 :     if (PyObject_IsTrue(s->sort_keys)) {

  001ca	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  001d2	48 8b 88 90 00
	00 00		 mov	 rcx, QWORD PTR [rax+144]
  001d9	e8 00 00 00 00	 call	 PyObject_IsTrue
  001de	85 c0		 test	 eax, eax
  001e0	0f 84 26 01 00
	00		 je	 $LN68@encoder_li@2

; 1520 :         /* First sort the keys then replace them with (key, value) tuples. */
; 1521 :         Py_ssize_t i, nitems;
; 1522 :         items = PyMapping_Keys(dct);

  001e6	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dct$[rsp]
  001ee	e8 00 00 00 00	 call	 PyMapping_Keys
  001f3	48 89 44 24 50	 mov	 QWORD PTR items$[rsp], rax

; 1523 :         if (items == NULL)

  001f8	48 83 7c 24 50
	00		 cmp	 QWORD PTR items$[rsp], 0
  001fe	75 05		 jne	 SHORT $LN67@encoder_li@2

; 1524 :             goto bail;

  00200	e9 9d 05 00 00	 jmp	 $bail$22438
$LN67@encoder_li@2:

; 1525 :         if (!PyList_Check(items)) {

  00205	48 8b 44 24 50	 mov	 rax, QWORD PTR items$[rsp]
  0020a	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0020e	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00214	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  00219	85 c0		 test	 eax, eax
  0021b	75 18		 jne	 SHORT $LN66@encoder_li@2

; 1526 :             PyErr_SetString(PyExc_ValueError, "keys must return list");

  0021d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@MAFCIFGN@keys?5must?5return?5list?$AA@
  00224	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0022b	e8 00 00 00 00	 call	 PyErr_SetString

; 1527 :             goto bail;

  00230	e9 6d 05 00 00	 jmp	 $bail$22438
$LN66@encoder_li@2:

; 1528 :         }
; 1529 :         if (PyList_Sort(items) < 0)

  00235	48 8b 4c 24 50	 mov	 rcx, QWORD PTR items$[rsp]
  0023a	e8 00 00 00 00	 call	 PyList_Sort
  0023f	85 c0		 test	 eax, eax
  00241	7d 05		 jge	 SHORT $LN65@encoder_li@2

; 1530 :             goto bail;

  00243	e9 5a 05 00 00	 jmp	 $bail$22438
$LN65@encoder_li@2:

; 1531 :         nitems = PyList_GET_SIZE(items);

  00248	48 8b 44 24 50	 mov	 rax, QWORD PTR items$[rsp]
  0024d	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00251	48 89 44 24 78	 mov	 QWORD PTR nitems$22446[rsp], rax

; 1532 :         for (i = 0; i < nitems; i++) {

  00256	48 c7 44 24 70
	00 00 00 00	 mov	 QWORD PTR i$22445[rsp], 0
  0025f	eb 0d		 jmp	 SHORT $LN64@encoder_li@2
$LN63@encoder_li@2:
  00261	48 8b 44 24 70	 mov	 rax, QWORD PTR i$22445[rsp]
  00266	48 ff c0	 inc	 rax
  00269	48 89 44 24 70	 mov	 QWORD PTR i$22445[rsp], rax
$LN64@encoder_li@2:
  0026e	48 8b 44 24 78	 mov	 rax, QWORD PTR nitems$22446[rsp]
  00273	48 39 44 24 70	 cmp	 QWORD PTR i$22445[rsp], rax
  00278	0f 8d 8c 00 00
	00		 jge	 $LN62@encoder_li@2

; 1533 :             PyObject *key, *value;
; 1534 :             key = PyList_GET_ITEM(items, i);

  0027e	48 8b 44 24 50	 mov	 rax, QWORD PTR items$[rsp]
  00283	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00287	48 8b 4c 24 70	 mov	 rcx, QWORD PTR i$22445[rsp]
  0028c	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  00290	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR key$22457[rsp], rax

; 1535 :             value = PyDict_GetItem(dct, key);

  00298	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR key$22457[rsp]
  002a0	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dct$[rsp]
  002a8	e8 00 00 00 00	 call	 PyDict_GetItem
  002ad	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR value$22458[rsp], rax

; 1536 :             item = PyTuple_Pack(2, key, value);

  002b5	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR value$22458[rsp]
  002bd	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR key$22457[rsp]
  002c5	b9 02 00 00 00	 mov	 ecx, 2
  002ca	e8 00 00 00 00	 call	 PyTuple_Pack
  002cf	48 89 44 24 58	 mov	 QWORD PTR item$[rsp], rax

; 1537 :             if (item == NULL)

  002d4	48 83 7c 24 58
	00		 cmp	 QWORD PTR item$[rsp], 0
  002da	75 05		 jne	 SHORT $LN61@encoder_li@2

; 1538 :                 goto bail;

  002dc	e9 c1 04 00 00	 jmp	 $bail$22438
$LN61@encoder_li@2:

; 1539 :             PyList_SET_ITEM(items, i, item);

  002e1	48 8b 44 24 50	 mov	 rax, QWORD PTR items$[rsp]
  002e6	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  002ea	48 8b 4c 24 70	 mov	 rcx, QWORD PTR i$22445[rsp]
  002ef	48 8b 54 24 58	 mov	 rdx, QWORD PTR item$[rsp]
  002f4	48 89 14 c8	 mov	 QWORD PTR [rax+rcx*8], rdx

; 1540 :             Py_DECREF(key);

  002f8	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR key$22457[rsp]
  00300	e8 00 00 00 00	 call	 _Py_DecRef

; 1541 :         }

  00305	e9 57 ff ff ff	 jmp	 $LN63@encoder_li@2
$LN62@encoder_li@2:

; 1542 :     }
; 1543 :     else {

  0030a	eb 12		 jmp	 SHORT $LN60@encoder_li@2
$LN68@encoder_li@2:

; 1544 :         items = PyMapping_Items(dct);

  0030c	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR dct$[rsp]
  00314	e8 00 00 00 00	 call	 PyMapping_Items
  00319	48 89 44 24 50	 mov	 QWORD PTR items$[rsp], rax
$LN60@encoder_li@2:

; 1545 :     }
; 1546 :     if (items == NULL)

  0031e	48 83 7c 24 50
	00		 cmp	 QWORD PTR items$[rsp], 0
  00324	75 05		 jne	 SHORT $LN59@encoder_li@2

; 1547 :         goto bail;

  00326	e9 77 04 00 00	 jmp	 $bail$22438
$LN59@encoder_li@2:

; 1548 :     it = PyObject_GetIter(items);

  0032b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR items$[rsp]
  00330	e8 00 00 00 00	 call	 PyObject_GetIter
  00335	48 89 44 24 30	 mov	 QWORD PTR it$[rsp], rax

; 1549 :     Py_DECREF(items);

  0033a	48 8b 4c 24 50	 mov	 rcx, QWORD PTR items$[rsp]
  0033f	e8 00 00 00 00	 call	 _Py_DecRef

; 1550 :     if (it == NULL)

  00344	48 83 7c 24 30
	00		 cmp	 QWORD PTR it$[rsp], 0
  0034a	75 05		 jne	 SHORT $LN58@encoder_li@2

; 1551 :         goto bail;

  0034c	e9 51 04 00 00	 jmp	 $bail$22438
$LN58@encoder_li@2:

; 1552 :     skipkeys = PyObject_IsTrue(s->skipkeys);

  00351	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00359	48 8b 88 98 00
	00 00		 mov	 rcx, QWORD PTR [rax+152]
  00360	e8 00 00 00 00	 call	 PyObject_IsTrue
  00365	89 44 24 48	 mov	 DWORD PTR skipkeys$[rsp], eax

; 1553 :     idx = 0;

  00369	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR idx$[rsp], 0
$LN83@encoder_li@2:
$LN57@encoder_li@2:

; 1554 :     while ((item = PyIter_Next(it)) != NULL) {

  00372	48 8b 4c 24 30	 mov	 rcx, QWORD PTR it$[rsp]
  00377	e8 00 00 00 00	 call	 PyIter_Next
  0037c	48 89 44 24 58	 mov	 QWORD PTR item$[rsp], rax
  00381	48 83 7c 24 58
	00		 cmp	 QWORD PTR item$[rsp], 0
  00387	0f 84 0e 03 00
	00		 je	 $LN56@encoder_li@2

; 1555 :         PyObject *encoded, *key, *value;
; 1556 :         if (!PyTuple_Check(item) || Py_SIZE(item) != 2) {

  0038d	48 8b 44 24 58	 mov	 rax, QWORD PTR item$[rsp]
  00392	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00396	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0039c	25 00 00 00 04	 and	 eax, 67108864		; 04000000H
  003a1	85 c0		 test	 eax, eax
  003a3	74 0c		 je	 SHORT $LN54@encoder_li@2
  003a5	48 8b 44 24 58	 mov	 rax, QWORD PTR item$[rsp]
  003aa	48 83 78 60 02	 cmp	 QWORD PTR [rax+96], 2
  003af	74 18		 je	 SHORT $LN55@encoder_li@2
$LN54@encoder_li@2:

; 1557 :             PyErr_SetString(PyExc_ValueError, "items must return 2-tuples");

  003b1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BL@NAMMALPE@items?5must?5return?52?9tuples?$AA@
  003b8	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  003bf	e8 00 00 00 00	 call	 PyErr_SetString

; 1558 :             goto bail;

  003c4	e9 d9 03 00 00	 jmp	 $bail$22438
$LN55@encoder_li@2:

; 1559 :         }
; 1560 :         key = PyTuple_GET_ITEM(item, 0);

  003c9	48 8b 44 24 58	 mov	 rax, QWORD PTR item$[rsp]
  003ce	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  003d2	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR key$22475[rsp], rax

; 1561 :         if (PyUnicode_Check(key)) {

  003da	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR key$22475[rsp]
  003e2	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  003e6	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  003ec	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  003f1	85 c0		 test	 eax, eax
  003f3	74 1f		 je	 SHORT $LN53@encoder_li@2

; 1562 :             Py_INCREF(key);

  003f5	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR key$22475[rsp]
  003fd	e8 00 00 00 00	 call	 _Py_IncRef

; 1563 :             kstr = key;

  00402	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR key$22475[rsp]
  0040a	48 89 44 24 38	 mov	 QWORD PTR kstr$[rsp], rax
  0040f	e9 1d 01 00 00	 jmp	 $LN52@encoder_li@2
$LN53@encoder_li@2:

; 1564 :         }
; 1565 :         else if (PyFloat_Check(key)) {

  00414	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyFloat_Type
  0041b	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR key$22475[rsp]
  00423	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00427	74 1c		 je	 SHORT $LN50@encoder_li@2
  00429	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyFloat_Type
  00430	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR key$22475[rsp]
  00438	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  0043c	e8 00 00 00 00	 call	 PyType_IsSubtype
  00441	85 c0		 test	 eax, eax
  00443	74 2c		 je	 SHORT $LN51@encoder_li@2
$LN50@encoder_li@2:

; 1566 :             kstr = encoder_encode_float(s, key);

  00445	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR key$22475[rsp]
  0044d	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  00455	e8 00 00 00 00	 call	 encoder_encode_float
  0045a	48 89 44 24 38	 mov	 QWORD PTR kstr$[rsp], rax

; 1567 :             if (kstr == NULL)

  0045f	48 83 7c 24 38
	00		 cmp	 QWORD PTR kstr$[rsp], 0
  00465	75 05		 jne	 SHORT $LN49@encoder_li@2

; 1568 :                 goto bail;

  00467	e9 36 03 00 00	 jmp	 $bail$22438
$LN49@encoder_li@2:

; 1569 :         }
; 1570 :         else if (key == Py_True || key == Py_False || key == Py_None) {

  0046c	e9 c0 00 00 00	 jmp	 $LN48@encoder_li@2
$LN51@encoder_li@2:
  00471	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  00478	48 39 84 24 a0
	00 00 00	 cmp	 QWORD PTR key$22475[rsp], rax
  00480	74 22		 je	 SHORT $LN46@encoder_li@2
  00482	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct
  00489	48 39 84 24 a0
	00 00 00	 cmp	 QWORD PTR key$22475[rsp], rax
  00491	74 11		 je	 SHORT $LN46@encoder_li@2
  00493	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  0049a	48 39 84 24 a0
	00 00 00	 cmp	 QWORD PTR key$22475[rsp], rax
  004a2	75 21		 jne	 SHORT $LN47@encoder_li@2
$LN46@encoder_li@2:

; 1571 :                         /* This must come before the PyLong_Check because
; 1572 :                            True and False are also 1 and 0.*/
; 1573 :             kstr = _encoded_const(key);

  004a4	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR key$22475[rsp]
  004ac	e8 00 00 00 00	 call	 _encoded_const
  004b1	48 89 44 24 38	 mov	 QWORD PTR kstr$[rsp], rax

; 1574 :             if (kstr == NULL)

  004b6	48 83 7c 24 38
	00		 cmp	 QWORD PTR kstr$[rsp], 0
  004bc	75 05		 jne	 SHORT $LN45@encoder_li@2

; 1575 :                 goto bail;

  004be	e9 df 02 00 00	 jmp	 $bail$22438
$LN45@encoder_li@2:

; 1576 :         }
; 1577 :         else if (PyLong_Check(key)) {

  004c3	eb 6c		 jmp	 SHORT $LN44@encoder_li@2
$LN47@encoder_li@2:
  004c5	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR key$22475[rsp]
  004cd	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  004d1	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  004d7	25 00 00 00 01	 and	 eax, 16777216		; 01000000H
  004dc	85 c0		 test	 eax, eax
  004de	74 21		 je	 SHORT $LN43@encoder_li@2

; 1578 :             kstr = PyObject_Str(key);

  004e0	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR key$22475[rsp]
  004e8	e8 00 00 00 00	 call	 PyObject_Str
  004ed	48 89 44 24 38	 mov	 QWORD PTR kstr$[rsp], rax

; 1579 :             if (kstr == NULL)

  004f2	48 83 7c 24 38
	00		 cmp	 QWORD PTR kstr$[rsp], 0
  004f8	75 05		 jne	 SHORT $LN42@encoder_li@2

; 1580 :                 goto bail;

  004fa	e9 a3 02 00 00	 jmp	 $bail$22438
$LN42@encoder_li@2:

; 1581 :         }
; 1582 :         else if (skipkeys) {

  004ff	eb 30		 jmp	 SHORT $LN41@encoder_li@2
$LN43@encoder_li@2:
  00501	83 7c 24 48 00	 cmp	 DWORD PTR skipkeys$[rsp], 0
  00506	74 11		 je	 SHORT $LN40@encoder_li@2

; 1583 :             Py_DECREF(item);

  00508	48 8b 4c 24 58	 mov	 rcx, QWORD PTR item$[rsp]
  0050d	e8 00 00 00 00	 call	 _Py_DecRef

; 1584 :             continue;

  00512	e9 5b fe ff ff	 jmp	 $LN57@encoder_li@2

; 1585 :         }
; 1586 :         else {

  00517	eb 18		 jmp	 SHORT $LN39@encoder_li@2
$LN40@encoder_li@2:

; 1587 :             /* TODO: include repr of key */
; 1588 :             PyErr_SetString(PyExc_TypeError, "keys must be a string");

  00519	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BG@KBENEGNI@keys?5must?5be?5a?5string?$AA@
  00520	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00527	e8 00 00 00 00	 call	 PyErr_SetString

; 1589 :             goto bail;

  0052c	e9 71 02 00 00	 jmp	 $bail$22438
$LN39@encoder_li@2:
$LN41@encoder_li@2:
$LN44@encoder_li@2:
$LN48@encoder_li@2:
$LN52@encoder_li@2:

; 1590 :         }
; 1591 : 
; 1592 :         if (idx) {

  00531	48 83 7c 24 40
	00		 cmp	 QWORD PTR idx$[rsp], 0
  00537	74 25		 je	 SHORT $LN38@encoder_li@2

; 1593 :             if (_PyAccu_Accumulate(acc, s->item_separator))

  00539	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00541	48 8b 90 88 00
	00 00		 mov	 rdx, QWORD PTR [rax+136]
  00548	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR acc$[rsp]
  00550	e8 00 00 00 00	 call	 _PyAccu_Accumulate
  00555	85 c0		 test	 eax, eax
  00557	74 05		 je	 SHORT $LN37@encoder_li@2

; 1594 :                 goto bail;

  00559	e9 44 02 00 00	 jmp	 $bail$22438
$LN37@encoder_li@2:
$LN38@encoder_li@2:

; 1595 :         }
; 1596 : 
; 1597 :         encoded = encoder_encode_string(s, kstr);

  0055e	48 8b 54 24 38	 mov	 rdx, QWORD PTR kstr$[rsp]
  00563	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  0056b	e8 00 00 00 00	 call	 encoder_encode_string
  00570	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR encoded$22474[rsp], rax
$LN36@encoder_li@2:

; 1598 :         Py_CLEAR(kstr);

  00578	48 83 7c 24 38
	00		 cmp	 QWORD PTR kstr$[rsp], 0
  0057e	74 4d		 je	 SHORT $LN33@encoder_li@2
  00580	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00588	4c 8b 4c 24 38	 mov	 r9, QWORD PTR kstr$[rsp]
  0058d	41 b8 3e 06 00
	00		 mov	 r8d, 1598		; 0000063eH
  00593	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@BIGPLMIN@?4?4?2Modules?2_json?4c?$AA@
  0059a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@LAIECFEL@encoder_listencode_dict?$AA@
  005a1	e8 00 00 00 00	 call	 _PyParallel_Guard
  005a6	85 c0		 test	 eax, eax
  005a8	75 23		 jne	 SHORT $LN33@encoder_li@2
  005aa	48 8b 44 24 38	 mov	 rax, QWORD PTR kstr$[rsp]
  005af	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR _py_tmp$22517[rsp], rax
  005b7	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR kstr$[rsp], 0
  005c0	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR _py_tmp$22517[rsp]
  005c8	e8 00 00 00 00	 call	 _Py_DecRef
$LN33@encoder_li@2:
  005cd	33 c0		 xor	 eax, eax
  005cf	85 c0		 test	 eax, eax
  005d1	75 a5		 jne	 SHORT $LN36@encoder_li@2

; 1599 :         if (encoded == NULL)

  005d3	48 83 bc 24 90
	00 00 00 00	 cmp	 QWORD PTR encoded$22474[rsp], 0
  005dc	75 05		 jne	 SHORT $LN32@encoder_li@2

; 1600 :             goto bail;

  005de	e9 bf 01 00 00	 jmp	 $bail$22438
$LN32@encoder_li@2:

; 1601 :         if (_PyAccu_Accumulate(acc, encoded)) {

  005e3	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR encoded$22474[rsp]
  005eb	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR acc$[rsp]
  005f3	e8 00 00 00 00	 call	 _PyAccu_Accumulate
  005f8	85 c0		 test	 eax, eax
  005fa	74 12		 je	 SHORT $LN31@encoder_li@2

; 1602 :             Py_DECREF(encoded);

  005fc	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR encoded$22474[rsp]
  00604	e8 00 00 00 00	 call	 _Py_DecRef

; 1603 :             goto bail;

  00609	e9 94 01 00 00	 jmp	 $bail$22438
$LN31@encoder_li@2:

; 1604 :         }
; 1605 :         Py_DECREF(encoded);

  0060e	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR encoded$22474[rsp]
  00616	e8 00 00 00 00	 call	 _Py_DecRef

; 1606 :         if (_PyAccu_Accumulate(acc, s->key_separator))

  0061b	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00623	48 8b 90 80 00
	00 00		 mov	 rdx, QWORD PTR [rax+128]
  0062a	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR acc$[rsp]
  00632	e8 00 00 00 00	 call	 _PyAccu_Accumulate
  00637	85 c0		 test	 eax, eax
  00639	74 05		 je	 SHORT $LN30@encoder_li@2

; 1607 :             goto bail;

  0063b	e9 62 01 00 00	 jmp	 $bail$22438
$LN30@encoder_li@2:

; 1608 : 
; 1609 :         value = PyTuple_GET_ITEM(item, 1);

  00640	48 8b 44 24 58	 mov	 rax, QWORD PTR item$[rsp]
  00645	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  00649	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR value$22476[rsp], rax

; 1610 :         if (encoder_listencode_obj(s, acc, value, indent_level))

  00651	4c 8b 8c 24 e8
	00 00 00	 mov	 r9, QWORD PTR indent_level$[rsp]
  00659	4c 8b 84 24 98
	00 00 00	 mov	 r8, QWORD PTR value$22476[rsp]
  00661	48 8b 94 24 d8
	00 00 00	 mov	 rdx, QWORD PTR acc$[rsp]
  00669	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  00671	e8 00 00 00 00	 call	 encoder_listencode_obj
  00676	85 c0		 test	 eax, eax
  00678	74 05		 je	 SHORT $LN29@encoder_li@2

; 1611 :             goto bail;

  0067a	e9 23 01 00 00	 jmp	 $bail$22438
$LN29@encoder_li@2:

; 1612 :         idx += 1;

  0067f	48 8b 44 24 40	 mov	 rax, QWORD PTR idx$[rsp]
  00684	48 ff c0	 inc	 rax
  00687	48 89 44 24 40	 mov	 QWORD PTR idx$[rsp], rax

; 1613 :         Py_DECREF(item);

  0068c	48 8b 4c 24 58	 mov	 rcx, QWORD PTR item$[rsp]
  00691	e8 00 00 00 00	 call	 _Py_DecRef

; 1614 :     }

  00696	e9 d7 fc ff ff	 jmp	 $LN83@encoder_li@2
$LN56@encoder_li@2:

; 1615 :     if (PyErr_Occurred())

  0069b	e8 00 00 00 00	 call	 PyErr_Occurred
  006a0	48 85 c0	 test	 rax, rax
  006a3	74 05		 je	 SHORT $LN28@encoder_li@2

; 1616 :         goto bail;

  006a5	e9 f8 00 00 00	 jmp	 $bail$22438
$LN28@encoder_li@2:
$LN27@encoder_li@2:

; 1617 :     Py_CLEAR(it);

  006aa	48 83 7c 24 30
	00		 cmp	 QWORD PTR it$[rsp], 0
  006b0	74 4d		 je	 SHORT $LN24@encoder_li@2
  006b2	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  006ba	4c 8b 4c 24 30	 mov	 r9, QWORD PTR it$[rsp]
  006bf	41 b8 51 06 00
	00		 mov	 r8d, 1617		; 00000651H
  006c5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@BIGPLMIN@?4?4?2Modules?2_json?4c?$AA@
  006cc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@LAIECFEL@encoder_listencode_dict?$AA@
  006d3	e8 00 00 00 00	 call	 _PyParallel_Guard
  006d8	85 c0		 test	 eax, eax
  006da	75 23		 jne	 SHORT $LN24@encoder_li@2
  006dc	48 8b 44 24 30	 mov	 rax, QWORD PTR it$[rsp]
  006e1	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR _py_tmp$22535[rsp], rax
  006e9	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR it$[rsp], 0
  006f2	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR _py_tmp$22535[rsp]
  006fa	e8 00 00 00 00	 call	 _Py_DecRef
$LN24@encoder_li@2:
  006ff	33 c0		 xor	 eax, eax
  00701	85 c0		 test	 eax, eax
  00703	75 a5		 jne	 SHORT $LN27@encoder_li@2

; 1618 : 
; 1619 :     if (ident != NULL) {

  00705	48 83 7c 24 60
	00		 cmp	 QWORD PTR ident$[rsp], 0
  0070b	74 77		 je	 SHORT $LN23@encoder_li@2

; 1620 :         if (PyDict_DelItem(s->markers, ident))

  0070d	48 8b 54 24 60	 mov	 rdx, QWORD PTR ident$[rsp]
  00712	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  0071a	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  0071e	e8 00 00 00 00	 call	 PyDict_DelItem
  00723	85 c0		 test	 eax, eax
  00725	74 02		 je	 SHORT $LN22@encoder_li@2

; 1621 :             goto bail;

  00727	eb 79		 jmp	 SHORT $bail$22438
$LN22@encoder_li@2:
$LN21@encoder_li@2:

; 1622 :         Py_CLEAR(ident);

  00729	48 83 7c 24 60
	00		 cmp	 QWORD PTR ident$[rsp], 0
  0072f	74 4d		 je	 SHORT $LN18@encoder_li@2
  00731	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00739	4c 8b 4c 24 60	 mov	 r9, QWORD PTR ident$[rsp]
  0073e	41 b8 56 06 00
	00		 mov	 r8d, 1622		; 00000656H
  00744	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@BIGPLMIN@?4?4?2Modules?2_json?4c?$AA@
  0074b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@LAIECFEL@encoder_listencode_dict?$AA@
  00752	e8 00 00 00 00	 call	 _PyParallel_Guard
  00757	85 c0		 test	 eax, eax
  00759	75 23		 jne	 SHORT $LN18@encoder_li@2
  0075b	48 8b 44 24 60	 mov	 rax, QWORD PTR ident$[rsp]
  00760	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR _py_tmp$22546[rsp], rax
  00768	48 c7 44 24 60
	00 00 00 00	 mov	 QWORD PTR ident$[rsp], 0
  00771	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR _py_tmp$22546[rsp]
  00779	e8 00 00 00 00	 call	 _Py_DecRef
$LN18@encoder_li@2:
  0077e	33 c0		 xor	 eax, eax
  00780	85 c0		 test	 eax, eax
  00782	75 a5		 jne	 SHORT $LN21@encoder_li@2
$LN23@encoder_li@2:

; 1623 :     }
; 1624 :     /* TODO DOES NOT RUN; dead code
; 1625 :     if (s->indent != Py_None) {
; 1626 :         indent_level -= 1;
; 1627 : 
; 1628 :         yield '\n' + (' ' * (_indent * _current_indent_level))
; 1629 :     }*/
; 1630 :     if (_PyAccu_Accumulate(acc, close_dict))

  00784	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR ?close_dict@?1??encoder_listencode_dict@@9@9
  0078b	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR acc$[rsp]
  00793	e8 00 00 00 00	 call	 _PyAccu_Accumulate
  00798	85 c0		 test	 eax, eax
  0079a	74 02		 je	 SHORT $LN17@encoder_li@2

; 1631 :         goto bail;

  0079c	eb 04		 jmp	 SHORT $bail$22438
$LN17@encoder_li@2:

; 1632 :     return 0;

  0079e	33 c0		 xor	 eax, eax
  007a0	eb 65		 jmp	 SHORT $LN81@encoder_li@2
$bail$22438:
$LN16@encoder_li@2:

; 1633 : 
; 1634 : bail:
; 1635 :     Py_XDECREF(it);

  007a2	48 83 7c 24 30
	00		 cmp	 QWORD PTR it$[rsp], 0
  007a8	74 0a		 je	 SHORT $LN13@encoder_li@2
  007aa	48 8b 4c 24 30	 mov	 rcx, QWORD PTR it$[rsp]
  007af	e8 00 00 00 00	 call	 _Py_DecRef
$LN13@encoder_li@2:
  007b4	33 c0		 xor	 eax, eax
  007b6	85 c0		 test	 eax, eax
  007b8	75 e8		 jne	 SHORT $LN16@encoder_li@2
$LN12@encoder_li@2:

; 1636 :     Py_XDECREF(item);

  007ba	48 83 7c 24 58
	00		 cmp	 QWORD PTR item$[rsp], 0
  007c0	74 0a		 je	 SHORT $LN9@encoder_li@2
  007c2	48 8b 4c 24 58	 mov	 rcx, QWORD PTR item$[rsp]
  007c7	e8 00 00 00 00	 call	 _Py_DecRef
$LN9@encoder_li@2:
  007cc	33 c0		 xor	 eax, eax
  007ce	85 c0		 test	 eax, eax
  007d0	75 e8		 jne	 SHORT $LN12@encoder_li@2
$LN8@encoder_li@2:

; 1637 :     Py_XDECREF(kstr);

  007d2	48 83 7c 24 38
	00		 cmp	 QWORD PTR kstr$[rsp], 0
  007d8	74 0a		 je	 SHORT $LN5@encoder_li@2
  007da	48 8b 4c 24 38	 mov	 rcx, QWORD PTR kstr$[rsp]
  007df	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@encoder_li@2:
  007e4	33 c0		 xor	 eax, eax
  007e6	85 c0		 test	 eax, eax
  007e8	75 e8		 jne	 SHORT $LN8@encoder_li@2
$LN4@encoder_li@2:

; 1638 :     Py_XDECREF(ident);

  007ea	48 83 7c 24 60
	00		 cmp	 QWORD PTR ident$[rsp], 0
  007f0	74 0a		 je	 SHORT $LN1@encoder_li@2
  007f2	48 8b 4c 24 60	 mov	 rcx, QWORD PTR ident$[rsp]
  007f7	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@encoder_li@2:
  007fc	33 c0		 xor	 eax, eax
  007fe	85 c0		 test	 eax, eax
  00800	75 e8		 jne	 SHORT $LN4@encoder_li@2

; 1639 :     return -1;

  00802	b8 ff ff ff ff	 mov	 eax, -1
$LN81@encoder_li@2:

; 1640 : }

  00807	48 81 c4 c8 00
	00 00		 add	 rsp, 200		; 000000c8H
  0080e	c3		 ret	 0
encoder_listencode_dict ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BI@JMNCMNPK@encoder_listencode_list?$AA@	; `string'
PUBLIC	??_C@_0CC@BFEMEHI@_iterencode_list?5needs?5a?5sequenc@ ; `string'
PUBLIC	??_C@_02GPECMEKF@?$FL?$FN?$AA@			; `string'
PUBLIC	??_C@_01LBDDMOBJ@?$FN?$AA@			; `string'
PUBLIC	??_C@_01OHGJGJJP@?$FL?$AA@			; `string'
EXTRN	PySequence_Fast:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$encoder_listencode_list DD imagerel encoder_listencode_list
	DD	imagerel encoder_listencode_list+1023
	DD	imagerel $unwind$encoder_listencode_list
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$encoder_listencode_list DD 021b01H
	DD	011011bH
xdata	ENDS
;	COMDAT ??_C@_0BI@JMNCMNPK@encoder_listencode_list?$AA@
CONST	SEGMENT
??_C@_0BI@JMNCMNPK@encoder_listencode_list?$AA@ DB 'encoder_listencode_li'
	DB	'st', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@BFEMEHI@_iterencode_list?5needs?5a?5sequenc@
CONST	SEGMENT
??_C@_0CC@BFEMEHI@_iterencode_list?5needs?5a?5sequenc@ DB '_iterencode_li'
	DB	'st needs a sequence', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02GPECMEKF@?$FL?$FN?$AA@
CONST	SEGMENT
??_C@_02GPECMEKF@?$FL?$FN?$AA@ DB '[]', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01LBDDMOBJ@?$FN?$AA@
CONST	SEGMENT
??_C@_01LBDDMOBJ@?$FN?$AA@ DB ']', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_01OHGJGJJP@?$FL?$AA@
CONST	SEGMENT
??_C@_01OHGJGJJP@?$FL?$AA@ DB '[', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT encoder_listencode_list
_TEXT	SEGMENT
s_fast$ = 48
i$ = 56
ident$ = 64
has_key$22617 = 72
obj$22632 = 80
_py_tmp$22647 = 88
tv86 = 96
tv157 = 104
tv169 = 112
s$ = 144
acc$ = 152
seq$ = 160
indent_level$ = 168
encoder_listencode_list PROC				; COMDAT

; 1646 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 1647 :     /* Encode Python list seq to a JSON term */
; 1648 :     static PyObject *open_array = NULL;
; 1649 :     static PyObject *close_array = NULL;
; 1650 :     static PyObject *empty_array = NULL;
; 1651 :     PyObject *ident = NULL;

  0001b	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR ident$[rsp], 0

; 1652 :     PyObject *s_fast = NULL;

  00024	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR s_fast$[rsp], 0

; 1653 :     Py_ssize_t i;
; 1654 : 
; 1655 :     if (open_array == NULL || close_array == NULL || empty_array == NULL) {

  0002d	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?open_array@?1??encoder_listencode_list@@9@9, 0
  00035	74 14		 je	 SHORT $LN29@encoder_li@3
  00037	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?close_array@?1??encoder_listencode_list@@9@9, 0
  0003f	74 0a		 je	 SHORT $LN29@encoder_li@3
  00041	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?empty_array@?1??encoder_listencode_list@@9@9, 0
  00049	75 61		 jne	 SHORT $LN30@encoder_li@3
$LN29@encoder_li@3:

; 1656 :         open_array = PyUnicode_InternFromString("[");

  0004b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01OHGJGJJP@?$FL?$AA@
  00052	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  00057	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?open_array@?1??encoder_listencode_list@@9@9, rax

; 1657 :         close_array = PyUnicode_InternFromString("]");

  0005e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_01LBDDMOBJ@?$FN?$AA@
  00065	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  0006a	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?close_array@?1??encoder_listencode_list@@9@9, rax

; 1658 :         empty_array = PyUnicode_InternFromString("[]");

  00071	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_02GPECMEKF@?$FL?$FN?$AA@
  00078	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  0007d	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?empty_array@?1??encoder_listencode_list@@9@9, rax

; 1659 :         if (open_array == NULL || close_array == NULL || empty_array == NULL)

  00084	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?open_array@?1??encoder_listencode_list@@9@9, 0
  0008c	74 14		 je	 SHORT $LN27@encoder_li@3
  0008e	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?close_array@?1??encoder_listencode_list@@9@9, 0
  00096	74 0a		 je	 SHORT $LN27@encoder_li@3
  00098	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR ?empty_array@?1??encoder_listencode_list@@9@9, 0
  000a0	75 0a		 jne	 SHORT $LN28@encoder_li@3
$LN27@encoder_li@3:

; 1660 :             return -1;

  000a2	b8 ff ff ff ff	 mov	 eax, -1
  000a7	e9 4b 03 00 00	 jmp	 $LN31@encoder_li@3
$LN28@encoder_li@3:
$LN30@encoder_li@3:

; 1661 :     }
; 1662 :     ident = NULL;

  000ac	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR ident$[rsp], 0

; 1663 :     s_fast = PySequence_Fast(seq, "_iterencode_list needs a sequence");

  000b5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CC@BFEMEHI@_iterencode_list?5needs?5a?5sequenc@
  000bc	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR seq$[rsp]
  000c4	e8 00 00 00 00	 call	 PySequence_Fast
  000c9	48 89 44 24 30	 mov	 QWORD PTR s_fast$[rsp], rax

; 1664 :     if (s_fast == NULL)

  000ce	48 83 7c 24 30
	00		 cmp	 QWORD PTR s_fast$[rsp], 0
  000d4	75 0a		 jne	 SHORT $LN26@encoder_li@3

; 1665 :         return -1;

  000d6	b8 ff ff ff ff	 mov	 eax, -1
  000db	e9 17 03 00 00	 jmp	 $LN31@encoder_li@3
$LN26@encoder_li@3:

; 1666 :     if (PySequence_Fast_GET_SIZE(s_fast) == 0) {

  000e0	48 8b 44 24 30	 mov	 rax, QWORD PTR s_fast$[rsp]
  000e5	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000e9	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000ef	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  000f4	85 c0		 test	 eax, eax
  000f6	74 10		 je	 SHORT $LN33@encoder_li@3
  000f8	48 8b 44 24 30	 mov	 rax, QWORD PTR s_fast$[rsp]
  000fd	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00101	48 89 44 24 60	 mov	 QWORD PTR tv86[rsp], rax
  00106	eb 0e		 jmp	 SHORT $LN34@encoder_li@3
$LN33@encoder_li@3:
  00108	48 8b 44 24 30	 mov	 rax, QWORD PTR s_fast$[rsp]
  0010d	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00111	48 89 44 24 60	 mov	 QWORD PTR tv86[rsp], rax
$LN34@encoder_li@3:
  00116	48 83 7c 24 60
	00		 cmp	 QWORD PTR tv86[rsp], 0
  0011c	75 23		 jne	 SHORT $LN25@encoder_li@3

; 1667 :         Py_DECREF(s_fast);

  0011e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s_fast$[rsp]
  00123	e8 00 00 00 00	 call	 _Py_DecRef

; 1668 :         return _PyAccu_Accumulate(acc, empty_array);

  00128	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR ?empty_array@?1??encoder_listencode_list@@9@9
  0012f	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR acc$[rsp]
  00137	e8 00 00 00 00	 call	 _PyAccu_Accumulate
  0013c	e9 b6 02 00 00	 jmp	 $LN31@encoder_li@3
$LN25@encoder_li@3:

; 1669 :     }
; 1670 : 
; 1671 :     if (s->markers != Py_None) {

  00141	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00148	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  00150	48 39 41 60	 cmp	 QWORD PTR [rcx+96], rax
  00154	0f 84 86 00 00
	00		 je	 $LN24@encoder_li@3

; 1672 :         int has_key;
; 1673 :         ident = PyLong_FromVoidPtr(seq);

  0015a	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR seq$[rsp]
  00162	e8 00 00 00 00	 call	 PyLong_FromVoidPtr
  00167	48 89 44 24 40	 mov	 QWORD PTR ident$[rsp], rax

; 1674 :         if (ident == NULL)

  0016c	48 83 7c 24 40
	00		 cmp	 QWORD PTR ident$[rsp], 0
  00172	75 05		 jne	 SHORT $LN23@encoder_li@3

; 1675 :             goto bail;

  00174	e9 57 02 00 00	 jmp	 $bail$22620
$LN23@encoder_li@3:

; 1676 :         has_key = PyDict_Contains(s->markers, ident);

  00179	48 8b 54 24 40	 mov	 rdx, QWORD PTR ident$[rsp]
  0017e	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00186	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  0018a	e8 00 00 00 00	 call	 PyDict_Contains
  0018f	89 44 24 48	 mov	 DWORD PTR has_key$22617[rsp], eax

; 1677 :         if (has_key) {

  00193	83 7c 24 48 00	 cmp	 DWORD PTR has_key$22617[rsp], 0
  00198	74 1f		 je	 SHORT $LN22@encoder_li@3

; 1678 :             if (has_key != -1)

  0019a	83 7c 24 48 ff	 cmp	 DWORD PTR has_key$22617[rsp], -1
  0019f	74 13		 je	 SHORT $LN21@encoder_li@3

; 1679 :                 PyErr_SetString(PyExc_ValueError, "Circular reference detected");

  001a1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BM@PEOODJKM@Circular?5reference?5detected?$AA@
  001a8	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  001af	e8 00 00 00 00	 call	 PyErr_SetString
$LN21@encoder_li@3:

; 1680 :             goto bail;

  001b4	e9 17 02 00 00	 jmp	 $bail$22620
$LN22@encoder_li@3:

; 1681 :         }
; 1682 :         if (PyDict_SetItem(s->markers, ident, seq)) {

  001b9	4c 8b 84 24 a0
	00 00 00	 mov	 r8, QWORD PTR seq$[rsp]
  001c1	48 8b 54 24 40	 mov	 rdx, QWORD PTR ident$[rsp]
  001c6	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  001ce	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  001d2	e8 00 00 00 00	 call	 PyDict_SetItem
  001d7	85 c0		 test	 eax, eax
  001d9	74 05		 je	 SHORT $LN20@encoder_li@3

; 1683 :             goto bail;

  001db	e9 f0 01 00 00	 jmp	 $bail$22620
$LN20@encoder_li@3:
$LN24@encoder_li@3:

; 1684 :         }
; 1685 :     }
; 1686 : 
; 1687 :     if (_PyAccu_Accumulate(acc, open_array))

  001e0	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR ?open_array@?1??encoder_listencode_list@@9@9
  001e7	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR acc$[rsp]
  001ef	e8 00 00 00 00	 call	 _PyAccu_Accumulate
  001f4	85 c0		 test	 eax, eax
  001f6	74 05		 je	 SHORT $LN19@encoder_li@3

; 1688 :         goto bail;

  001f8	e9 d3 01 00 00	 jmp	 $bail$22620
$LN19@encoder_li@3:

; 1689 :     if (s->indent != Py_None) {

  001fd	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00204	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  0020c	48 39 41 78	 cmp	 QWORD PTR [rcx+120], rax
  00210	74 13		 je	 SHORT $LN18@encoder_li@3

; 1690 :         /* TODO: DOES NOT RUN */
; 1691 :         indent_level += 1;

  00212	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR indent_level$[rsp]
  0021a	48 ff c0	 inc	 rax
  0021d	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR indent_level$[rsp], rax
$LN18@encoder_li@3:

; 1692 :         /*
; 1693 :             newline_indent = '\n' + (' ' * (_indent * _current_indent_level))
; 1694 :             separator = _item_separator + newline_indent
; 1695 :             buf += newline_indent
; 1696 :         */
; 1697 :     }
; 1698 :     for (i = 0; i < PySequence_Fast_GET_SIZE(s_fast); i++) {

  00225	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  0022e	eb 0d		 jmp	 SHORT $LN17@encoder_li@3
$LN16@encoder_li@3:
  00230	48 8b 44 24 38	 mov	 rax, QWORD PTR i$[rsp]
  00235	48 ff c0	 inc	 rax
  00238	48 89 44 24 38	 mov	 QWORD PTR i$[rsp], rax
$LN17@encoder_li@3:
  0023d	48 8b 44 24 30	 mov	 rax, QWORD PTR s_fast$[rsp]
  00242	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00246	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0024c	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  00251	85 c0		 test	 eax, eax
  00253	74 10		 je	 SHORT $LN35@encoder_li@3
  00255	48 8b 44 24 30	 mov	 rax, QWORD PTR s_fast$[rsp]
  0025a	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0025e	48 89 44 24 68	 mov	 QWORD PTR tv157[rsp], rax
  00263	eb 0e		 jmp	 SHORT $LN36@encoder_li@3
$LN35@encoder_li@3:
  00265	48 8b 44 24 30	 mov	 rax, QWORD PTR s_fast$[rsp]
  0026a	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0026e	48 89 44 24 68	 mov	 QWORD PTR tv157[rsp], rax
$LN36@encoder_li@3:
  00273	48 8b 44 24 68	 mov	 rax, QWORD PTR tv157[rsp]
  00278	48 39 44 24 38	 cmp	 QWORD PTR i$[rsp], rax
  0027d	0f 8d ac 00 00
	00		 jge	 $LN15@encoder_li@3

; 1699 :         PyObject *obj = PySequence_Fast_GET_ITEM(s_fast, i);

  00283	48 8b 44 24 30	 mov	 rax, QWORD PTR s_fast$[rsp]
  00288	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0028c	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00292	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  00297	85 c0		 test	 eax, eax
  00299	74 19		 je	 SHORT $LN37@encoder_li@3
  0029b	48 8b 44 24 30	 mov	 rax, QWORD PTR s_fast$[rsp]
  002a0	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  002a4	48 8b 4c 24 38	 mov	 rcx, QWORD PTR i$[rsp]
  002a9	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  002ad	48 89 44 24 70	 mov	 QWORD PTR tv169[rsp], rax
  002b2	eb 14		 jmp	 SHORT $LN38@encoder_li@3
$LN37@encoder_li@3:
  002b4	48 8b 44 24 30	 mov	 rax, QWORD PTR s_fast$[rsp]
  002b9	48 8b 4c 24 38	 mov	 rcx, QWORD PTR i$[rsp]
  002be	48 8b 44 c8 70	 mov	 rax, QWORD PTR [rax+rcx*8+112]
  002c3	48 89 44 24 70	 mov	 QWORD PTR tv169[rsp], rax
$LN38@encoder_li@3:
  002c8	48 8b 44 24 70	 mov	 rax, QWORD PTR tv169[rsp]
  002cd	48 89 44 24 50	 mov	 QWORD PTR obj$22632[rsp], rax

; 1700 :         if (i) {

  002d2	48 83 7c 24 38
	00		 cmp	 QWORD PTR i$[rsp], 0
  002d8	74 25		 je	 SHORT $LN14@encoder_li@3

; 1701 :             if (_PyAccu_Accumulate(acc, s->item_separator))

  002da	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  002e2	48 8b 90 88 00
	00 00		 mov	 rdx, QWORD PTR [rax+136]
  002e9	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR acc$[rsp]
  002f1	e8 00 00 00 00	 call	 _PyAccu_Accumulate
  002f6	85 c0		 test	 eax, eax
  002f8	74 05		 je	 SHORT $LN13@encoder_li@3

; 1702 :                 goto bail;

  002fa	e9 d1 00 00 00	 jmp	 $bail$22620
$LN13@encoder_li@3:
$LN14@encoder_li@3:

; 1703 :         }
; 1704 :         if (encoder_listencode_obj(s, acc, obj, indent_level))

  002ff	4c 8b 8c 24 a8
	00 00 00	 mov	 r9, QWORD PTR indent_level$[rsp]
  00307	4c 8b 44 24 50	 mov	 r8, QWORD PTR obj$22632[rsp]
  0030c	48 8b 94 24 98
	00 00 00	 mov	 rdx, QWORD PTR acc$[rsp]
  00314	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  0031c	e8 00 00 00 00	 call	 encoder_listencode_obj
  00321	85 c0		 test	 eax, eax
  00323	74 05		 je	 SHORT $LN12@encoder_li@3

; 1705 :             goto bail;

  00325	e9 a6 00 00 00	 jmp	 $bail$22620
$LN12@encoder_li@3:

; 1706 :     }

  0032a	e9 01 ff ff ff	 jmp	 $LN16@encoder_li@3
$LN15@encoder_li@3:

; 1707 :     if (ident != NULL) {

  0032f	48 83 7c 24 40
	00		 cmp	 QWORD PTR ident$[rsp], 0
  00335	74 71		 je	 SHORT $LN11@encoder_li@3

; 1708 :         if (PyDict_DelItem(s->markers, ident))

  00337	48 8b 54 24 40	 mov	 rdx, QWORD PTR ident$[rsp]
  0033c	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00344	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00348	e8 00 00 00 00	 call	 PyDict_DelItem
  0034d	85 c0		 test	 eax, eax
  0034f	74 02		 je	 SHORT $LN10@encoder_li@3

; 1709 :             goto bail;

  00351	eb 7d		 jmp	 SHORT $bail$22620
$LN10@encoder_li@3:
$LN9@encoder_li@3:

; 1710 :         Py_CLEAR(ident);

  00353	48 83 7c 24 40
	00		 cmp	 QWORD PTR ident$[rsp], 0
  00359	74 47		 je	 SHORT $LN6@encoder_li@3
  0035b	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00363	4c 8b 4c 24 40	 mov	 r9, QWORD PTR ident$[rsp]
  00368	41 b8 ae 06 00
	00		 mov	 r8d, 1710		; 000006aeH
  0036e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@BIGPLMIN@?4?4?2Modules?2_json?4c?$AA@
  00375	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@JMNCMNPK@encoder_listencode_list?$AA@
  0037c	e8 00 00 00 00	 call	 _PyParallel_Guard
  00381	85 c0		 test	 eax, eax
  00383	75 1d		 jne	 SHORT $LN6@encoder_li@3
  00385	48 8b 44 24 40	 mov	 rax, QWORD PTR ident$[rsp]
  0038a	48 89 44 24 58	 mov	 QWORD PTR _py_tmp$22647[rsp], rax
  0038f	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR ident$[rsp], 0
  00398	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _py_tmp$22647[rsp]
  0039d	e8 00 00 00 00	 call	 _Py_DecRef
$LN6@encoder_li@3:
  003a2	33 c0		 xor	 eax, eax
  003a4	85 c0		 test	 eax, eax
  003a6	75 ab		 jne	 SHORT $LN9@encoder_li@3
$LN11@encoder_li@3:

; 1711 :     }
; 1712 : 
; 1713 :     /* TODO: DOES NOT RUN
; 1714 :     if (s->indent != Py_None) {
; 1715 :         indent_level -= 1;
; 1716 : 
; 1717 :         yield '\n' + (' ' * (_indent * _current_indent_level))
; 1718 :     }*/
; 1719 :     if (_PyAccu_Accumulate(acc, close_array))

  003a8	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR ?close_array@?1??encoder_listencode_list@@9@9
  003af	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR acc$[rsp]
  003b7	e8 00 00 00 00	 call	 _PyAccu_Accumulate
  003bc	85 c0		 test	 eax, eax
  003be	74 02		 je	 SHORT $LN5@encoder_li@3

; 1720 :         goto bail;

  003c0	eb 0e		 jmp	 SHORT $bail$22620
$LN5@encoder_li@3:

; 1721 :     Py_DECREF(s_fast);

  003c2	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s_fast$[rsp]
  003c7	e8 00 00 00 00	 call	 _Py_DecRef

; 1722 :     return 0;

  003cc	33 c0		 xor	 eax, eax
  003ce	eb 27		 jmp	 SHORT $LN31@encoder_li@3
$bail$22620:
$LN4@encoder_li@3:

; 1723 : 
; 1724 : bail:
; 1725 :     Py_XDECREF(ident);

  003d0	48 83 7c 24 40
	00		 cmp	 QWORD PTR ident$[rsp], 0
  003d6	74 0a		 je	 SHORT $LN1@encoder_li@3
  003d8	48 8b 4c 24 40	 mov	 rcx, QWORD PTR ident$[rsp]
  003dd	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@encoder_li@3:
  003e2	33 c0		 xor	 eax, eax
  003e4	85 c0		 test	 eax, eax
  003e6	75 e8		 jne	 SHORT $LN4@encoder_li@3

; 1726 :     Py_DECREF(s_fast);

  003e8	48 8b 4c 24 30	 mov	 rcx, QWORD PTR s_fast$[rsp]
  003ed	e8 00 00 00 00	 call	 _Py_DecRef

; 1727 :     return -1;

  003f2	b8 ff ff ff ff	 mov	 eax, -1
$LN31@encoder_li@3:

; 1728 : }

  003f7	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  003fe	c3		 ret	 0
encoder_listencode_list ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$encoder_dealloc DD imagerel encoder_dealloc
	DD	imagerel encoder_dealloc+44
	DD	imagerel $unwind$encoder_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$encoder_dealloc DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT encoder_dealloc
_TEXT	SEGMENT
self$ = 48
encoder_dealloc PROC					; COMDAT

; 1732 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1733 :     /* Deallocate Encoder */
; 1734 :     encoder_clear(self);

  00009	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self$[rsp]
  0000e	e8 00 00 00 00	 call	 encoder_clear

; 1735 :     Py_TYPE(self)->tp_free(self);

  00013	48 8b 44 24 30	 mov	 rax, QWORD PTR self$[rsp]
  00018	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0001c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR self$[rsp]
  00021	ff 90 98 01 00
	00		 call	 QWORD PTR [rax+408]

; 1736 : }

  00027	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0002b	c3		 ret	 0
encoder_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BB@NMCBDDPG@encoder_traverse?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$encoder_traverse DD imagerel encoder_traverse
	DD	imagerel encoder_traverse+869
	DD	imagerel $unwind$encoder_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$encoder_traverse DD 011301H
	DD	0a213H
xdata	ENDS
;	COMDAT ??_C@_0BB@NMCBDDPG@encoder_traverse?$AA@
CONST	SEGMENT
??_C@_0BB@NMCBDDPG@encoder_traverse?$AA@ DB 'encoder_traverse', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT encoder_traverse
_TEXT	SEGMENT
s$ = 32
vret$22682 = 40
vret$22690 = 44
vret$22698 = 48
vret$22706 = 52
vret$22714 = 56
vret$22722 = 60
vret$22730 = 64
vret$22738 = 68
self$ = 96
visit$ = 104
arg$ = 112
encoder_traverse PROC					; COMDAT

; 1740 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 1741 :     PyEncoderObject *s;
; 1742 :     assert(PyEncoder_Check(self));

  00013	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyEncoderType
  0001a	48 8b 4c 24 60	 mov	 rcx, QWORD PTR self$[rsp]
  0001f	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00023	74 35		 je	 SHORT $LN51@encoder_tr
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyEncoderType
  0002c	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  00031	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  00035	e8 00 00 00 00	 call	 PyType_IsSubtype
  0003a	85 c0		 test	 eax, eax
  0003c	75 1c		 jne	 SHORT $LN51@encoder_tr
  0003e	41 b8 ce 06 00
	00		 mov	 r8d, 1742		; 000006ceH
  00044	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@KOELJAMM@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAj?$AAs?$AAo?$AAn?$AA?4?$AAc?$AA?$AA@
  0004b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@BNGMPGPP@?$AAP?$AAy?$AAE?$AAn?$AAc?$AAo?$AAd?$AAe?$AAr?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?$CJ?$AA?$AA@
  00052	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00058	33 c0		 xor	 eax, eax
$LN51@encoder_tr:

; 1743 :     s = (PyEncoderObject *)self;

  0005a	48 8b 44 24 60	 mov	 rax, QWORD PTR self$[rsp]
  0005f	48 89 44 24 20	 mov	 QWORD PTR s$[rsp], rax
$LN48@encoder_tr:

; 1744 :     Py_VISIT(s->markers);

  00064	e8 00 00 00 00	 call	 _Py_PXCTX
  00069	85 c0		 test	 eax, eax
  0006b	74 1c		 je	 SHORT $LN45@encoder_tr
  0006d	45 33 c9	 xor	 r9d, r9d
  00070	41 b8 d0 06 00
	00		 mov	 r8d, 1744		; 000006d0H
  00076	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@BIGPLMIN@?4?4?2Modules?2_json?4c?$AA@
  0007d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@NMCBDDPG@encoder_traverse?$AA@
  00084	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN45@encoder_tr:
  00089	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  0008e	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00093	74 26		 je	 SHORT $LN44@encoder_tr
  00095	48 8b 54 24 70	 mov	 rdx, QWORD PTR arg$[rsp]
  0009a	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  0009f	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  000a3	ff 54 24 68	 call	 QWORD PTR visit$[rsp]
  000a7	89 44 24 28	 mov	 DWORD PTR vret$22682[rsp], eax
  000ab	83 7c 24 28 00	 cmp	 DWORD PTR vret$22682[rsp], 0
  000b0	74 09		 je	 SHORT $LN43@encoder_tr
  000b2	8b 44 24 28	 mov	 eax, DWORD PTR vret$22682[rsp]
  000b6	e9 a5 02 00 00	 jmp	 $LN49@encoder_tr
$LN43@encoder_tr:
$LN44@encoder_tr:
  000bb	33 c0		 xor	 eax, eax
  000bd	85 c0		 test	 eax, eax
  000bf	75 a3		 jne	 SHORT $LN48@encoder_tr
$LN42@encoder_tr:

; 1745 :     Py_VISIT(s->defaultfn);

  000c1	e8 00 00 00 00	 call	 _Py_PXCTX
  000c6	85 c0		 test	 eax, eax
  000c8	74 1c		 je	 SHORT $LN39@encoder_tr
  000ca	45 33 c9	 xor	 r9d, r9d
  000cd	41 b8 d1 06 00
	00		 mov	 r8d, 1745		; 000006d1H
  000d3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@BIGPLMIN@?4?4?2Modules?2_json?4c?$AA@
  000da	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@NMCBDDPG@encoder_traverse?$AA@
  000e1	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN39@encoder_tr:
  000e6	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  000eb	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  000f0	74 26		 je	 SHORT $LN38@encoder_tr
  000f2	48 8b 54 24 70	 mov	 rdx, QWORD PTR arg$[rsp]
  000f7	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  000fc	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  00100	ff 54 24 68	 call	 QWORD PTR visit$[rsp]
  00104	89 44 24 2c	 mov	 DWORD PTR vret$22690[rsp], eax
  00108	83 7c 24 2c 00	 cmp	 DWORD PTR vret$22690[rsp], 0
  0010d	74 09		 je	 SHORT $LN37@encoder_tr
  0010f	8b 44 24 2c	 mov	 eax, DWORD PTR vret$22690[rsp]
  00113	e9 48 02 00 00	 jmp	 $LN49@encoder_tr
$LN37@encoder_tr:
$LN38@encoder_tr:
  00118	33 c0		 xor	 eax, eax
  0011a	85 c0		 test	 eax, eax
  0011c	75 a3		 jne	 SHORT $LN42@encoder_tr
$LN36@encoder_tr:

; 1746 :     Py_VISIT(s->encoder);

  0011e	e8 00 00 00 00	 call	 _Py_PXCTX
  00123	85 c0		 test	 eax, eax
  00125	74 1c		 je	 SHORT $LN33@encoder_tr
  00127	45 33 c9	 xor	 r9d, r9d
  0012a	41 b8 d2 06 00
	00		 mov	 r8d, 1746		; 000006d2H
  00130	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@BIGPLMIN@?4?4?2Modules?2_json?4c?$AA@
  00137	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@NMCBDDPG@encoder_traverse?$AA@
  0013e	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN33@encoder_tr:
  00143	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  00148	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  0014d	74 26		 je	 SHORT $LN32@encoder_tr
  0014f	48 8b 54 24 70	 mov	 rdx, QWORD PTR arg$[rsp]
  00154	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  00159	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  0015d	ff 54 24 68	 call	 QWORD PTR visit$[rsp]
  00161	89 44 24 30	 mov	 DWORD PTR vret$22698[rsp], eax
  00165	83 7c 24 30 00	 cmp	 DWORD PTR vret$22698[rsp], 0
  0016a	74 09		 je	 SHORT $LN31@encoder_tr
  0016c	8b 44 24 30	 mov	 eax, DWORD PTR vret$22698[rsp]
  00170	e9 eb 01 00 00	 jmp	 $LN49@encoder_tr
$LN31@encoder_tr:
$LN32@encoder_tr:
  00175	33 c0		 xor	 eax, eax
  00177	85 c0		 test	 eax, eax
  00179	75 a3		 jne	 SHORT $LN36@encoder_tr
$LN30@encoder_tr:

; 1747 :     Py_VISIT(s->indent);

  0017b	e8 00 00 00 00	 call	 _Py_PXCTX
  00180	85 c0		 test	 eax, eax
  00182	74 1c		 je	 SHORT $LN27@encoder_tr
  00184	45 33 c9	 xor	 r9d, r9d
  00187	41 b8 d3 06 00
	00		 mov	 r8d, 1747		; 000006d3H
  0018d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@BIGPLMIN@?4?4?2Modules?2_json?4c?$AA@
  00194	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@NMCBDDPG@encoder_traverse?$AA@
  0019b	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN27@encoder_tr:
  001a0	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  001a5	48 83 78 78 00	 cmp	 QWORD PTR [rax+120], 0
  001aa	74 26		 je	 SHORT $LN26@encoder_tr
  001ac	48 8b 54 24 70	 mov	 rdx, QWORD PTR arg$[rsp]
  001b1	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  001b6	48 8b 48 78	 mov	 rcx, QWORD PTR [rax+120]
  001ba	ff 54 24 68	 call	 QWORD PTR visit$[rsp]
  001be	89 44 24 34	 mov	 DWORD PTR vret$22706[rsp], eax
  001c2	83 7c 24 34 00	 cmp	 DWORD PTR vret$22706[rsp], 0
  001c7	74 09		 je	 SHORT $LN25@encoder_tr
  001c9	8b 44 24 34	 mov	 eax, DWORD PTR vret$22706[rsp]
  001cd	e9 8e 01 00 00	 jmp	 $LN49@encoder_tr
$LN25@encoder_tr:
$LN26@encoder_tr:
  001d2	33 c0		 xor	 eax, eax
  001d4	85 c0		 test	 eax, eax
  001d6	75 a3		 jne	 SHORT $LN30@encoder_tr
$LN24@encoder_tr:

; 1748 :     Py_VISIT(s->key_separator);

  001d8	e8 00 00 00 00	 call	 _Py_PXCTX
  001dd	85 c0		 test	 eax, eax
  001df	74 1c		 je	 SHORT $LN21@encoder_tr
  001e1	45 33 c9	 xor	 r9d, r9d
  001e4	41 b8 d4 06 00
	00		 mov	 r8d, 1748		; 000006d4H
  001ea	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@BIGPLMIN@?4?4?2Modules?2_json?4c?$AA@
  001f1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@NMCBDDPG@encoder_traverse?$AA@
  001f8	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN21@encoder_tr:
  001fd	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  00202	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  0020a	74 29		 je	 SHORT $LN20@encoder_tr
  0020c	48 8b 54 24 70	 mov	 rdx, QWORD PTR arg$[rsp]
  00211	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  00216	48 8b 88 80 00
	00 00		 mov	 rcx, QWORD PTR [rax+128]
  0021d	ff 54 24 68	 call	 QWORD PTR visit$[rsp]
  00221	89 44 24 38	 mov	 DWORD PTR vret$22714[rsp], eax
  00225	83 7c 24 38 00	 cmp	 DWORD PTR vret$22714[rsp], 0
  0022a	74 09		 je	 SHORT $LN19@encoder_tr
  0022c	8b 44 24 38	 mov	 eax, DWORD PTR vret$22714[rsp]
  00230	e9 2b 01 00 00	 jmp	 $LN49@encoder_tr
$LN19@encoder_tr:
$LN20@encoder_tr:
  00235	33 c0		 xor	 eax, eax
  00237	85 c0		 test	 eax, eax
  00239	75 9d		 jne	 SHORT $LN24@encoder_tr
$LN18@encoder_tr:

; 1749 :     Py_VISIT(s->item_separator);

  0023b	e8 00 00 00 00	 call	 _Py_PXCTX
  00240	85 c0		 test	 eax, eax
  00242	74 1c		 je	 SHORT $LN15@encoder_tr
  00244	45 33 c9	 xor	 r9d, r9d
  00247	41 b8 d5 06 00
	00		 mov	 r8d, 1749		; 000006d5H
  0024d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@BIGPLMIN@?4?4?2Modules?2_json?4c?$AA@
  00254	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@NMCBDDPG@encoder_traverse?$AA@
  0025b	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN15@encoder_tr:
  00260	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  00265	48 83 b8 88 00
	00 00 00	 cmp	 QWORD PTR [rax+136], 0
  0026d	74 29		 je	 SHORT $LN14@encoder_tr
  0026f	48 8b 54 24 70	 mov	 rdx, QWORD PTR arg$[rsp]
  00274	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  00279	48 8b 88 88 00
	00 00		 mov	 rcx, QWORD PTR [rax+136]
  00280	ff 54 24 68	 call	 QWORD PTR visit$[rsp]
  00284	89 44 24 3c	 mov	 DWORD PTR vret$22722[rsp], eax
  00288	83 7c 24 3c 00	 cmp	 DWORD PTR vret$22722[rsp], 0
  0028d	74 09		 je	 SHORT $LN13@encoder_tr
  0028f	8b 44 24 3c	 mov	 eax, DWORD PTR vret$22722[rsp]
  00293	e9 c8 00 00 00	 jmp	 $LN49@encoder_tr
$LN13@encoder_tr:
$LN14@encoder_tr:
  00298	33 c0		 xor	 eax, eax
  0029a	85 c0		 test	 eax, eax
  0029c	75 9d		 jne	 SHORT $LN18@encoder_tr
$LN12@encoder_tr:

; 1750 :     Py_VISIT(s->sort_keys);

  0029e	e8 00 00 00 00	 call	 _Py_PXCTX
  002a3	85 c0		 test	 eax, eax
  002a5	74 1c		 je	 SHORT $LN9@encoder_tr
  002a7	45 33 c9	 xor	 r9d, r9d
  002aa	41 b8 d6 06 00
	00		 mov	 r8d, 1750		; 000006d6H
  002b0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@BIGPLMIN@?4?4?2Modules?2_json?4c?$AA@
  002b7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@NMCBDDPG@encoder_traverse?$AA@
  002be	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN9@encoder_tr:
  002c3	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  002c8	48 83 b8 90 00
	00 00 00	 cmp	 QWORD PTR [rax+144], 0
  002d0	74 26		 je	 SHORT $LN8@encoder_tr
  002d2	48 8b 54 24 70	 mov	 rdx, QWORD PTR arg$[rsp]
  002d7	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  002dc	48 8b 88 90 00
	00 00		 mov	 rcx, QWORD PTR [rax+144]
  002e3	ff 54 24 68	 call	 QWORD PTR visit$[rsp]
  002e7	89 44 24 40	 mov	 DWORD PTR vret$22730[rsp], eax
  002eb	83 7c 24 40 00	 cmp	 DWORD PTR vret$22730[rsp], 0
  002f0	74 06		 je	 SHORT $LN7@encoder_tr
  002f2	8b 44 24 40	 mov	 eax, DWORD PTR vret$22730[rsp]
  002f6	eb 68		 jmp	 SHORT $LN49@encoder_tr
$LN7@encoder_tr:
$LN8@encoder_tr:
  002f8	33 c0		 xor	 eax, eax
  002fa	85 c0		 test	 eax, eax
  002fc	75 a0		 jne	 SHORT $LN12@encoder_tr
$LN6@encoder_tr:

; 1751 :     Py_VISIT(s->skipkeys);

  002fe	e8 00 00 00 00	 call	 _Py_PXCTX
  00303	85 c0		 test	 eax, eax
  00305	74 1c		 je	 SHORT $LN3@encoder_tr
  00307	45 33 c9	 xor	 r9d, r9d
  0030a	41 b8 d7 06 00
	00		 mov	 r8d, 1751		; 000006d7H
  00310	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@BIGPLMIN@?4?4?2Modules?2_json?4c?$AA@
  00317	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@NMCBDDPG@encoder_traverse?$AA@
  0031e	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@encoder_tr:
  00323	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  00328	48 83 b8 98 00
	00 00 00	 cmp	 QWORD PTR [rax+152], 0
  00330	74 26		 je	 SHORT $LN2@encoder_tr
  00332	48 8b 54 24 70	 mov	 rdx, QWORD PTR arg$[rsp]
  00337	48 8b 44 24 20	 mov	 rax, QWORD PTR s$[rsp]
  0033c	48 8b 88 98 00
	00 00		 mov	 rcx, QWORD PTR [rax+152]
  00343	ff 54 24 68	 call	 QWORD PTR visit$[rsp]
  00347	89 44 24 44	 mov	 DWORD PTR vret$22738[rsp], eax
  0034b	83 7c 24 44 00	 cmp	 DWORD PTR vret$22738[rsp], 0
  00350	74 06		 je	 SHORT $LN1@encoder_tr
  00352	8b 44 24 44	 mov	 eax, DWORD PTR vret$22738[rsp]
  00356	eb 08		 jmp	 SHORT $LN49@encoder_tr
$LN1@encoder_tr:
$LN2@encoder_tr:
  00358	33 c0		 xor	 eax, eax
  0035a	85 c0		 test	 eax, eax
  0035c	75 a0		 jne	 SHORT $LN6@encoder_tr

; 1752 :     return 0;

  0035e	33 c0		 xor	 eax, eax
$LN49@encoder_tr:

; 1753 : }

  00360	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00364	c3		 ret	 0
encoder_traverse ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@DBJJFICM@encoder_clear?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$encoder_clear DD imagerel encoder_clear
	DD	imagerel encoder_clear+968
	DD	imagerel $unwind$encoder_clear
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$encoder_clear DD 020c01H
	DD	011010cH
xdata	ENDS
;	COMDAT ??_C@_0O@DBJJFICM@encoder_clear?$AA@
CONST	SEGMENT
??_C@_0O@DBJJFICM@encoder_clear?$AA@ DB 'encoder_clear', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT encoder_clear
_TEXT	SEGMENT
s$ = 48
_py_tmp$22754 = 56
_py_tmp$22762 = 64
_py_tmp$22770 = 72
_py_tmp$22778 = 80
_py_tmp$22786 = 88
_py_tmp$22794 = 96
_py_tmp$22802 = 104
_py_tmp$22810 = 112
self$ = 144
encoder_clear PROC					; COMDAT

; 1757 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 1758 :     /* Deallocate Encoder */
; 1759 :     PyEncoderObject *s;
; 1760 :     assert(PyEncoder_Check(self));

  0000c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyEncoderType
  00013	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR self$[rsp]
  0001b	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0001f	74 38		 je	 SHORT $LN35@encoder_cl
  00021	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:PyEncoderType
  00028	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00030	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  00034	e8 00 00 00 00	 call	 PyType_IsSubtype
  00039	85 c0		 test	 eax, eax
  0003b	75 1c		 jne	 SHORT $LN35@encoder_cl
  0003d	41 b8 e0 06 00
	00		 mov	 r8d, 1760		; 000006e0H
  00043	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CG@KOELJAMM@?$AA?4?$AA?4?$AA?2?$AAM?$AAo?$AAd?$AAu?$AAl?$AAe?$AAs?$AA?2?$AA_?$AAj?$AAs?$AAo?$AAn?$AA?4?$AAc?$AA?$AA@
  0004a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@BNGMPGPP@?$AAP?$AAy?$AAE?$AAn?$AAc?$AAo?$AAd?$AAe?$AAr?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAe?$AAl?$AAf?$AA?$CJ?$AA?$AA@
  00051	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00057	33 c0		 xor	 eax, eax
$LN35@encoder_cl:

; 1761 :     s = (PyEncoderObject *)self;

  00059	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR self$[rsp]
  00061	48 89 44 24 30	 mov	 QWORD PTR s$[rsp], rax
$LN32@encoder_cl:

; 1762 :     Py_CLEAR(s->markers);

  00066	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  0006b	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00070	74 53		 je	 SHORT $LN29@encoder_cl
  00072	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0007a	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  0007f	4c 8b 48 60	 mov	 r9, QWORD PTR [rax+96]
  00083	41 b8 e2 06 00
	00		 mov	 r8d, 1762		; 000006e2H
  00089	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@BIGPLMIN@?4?4?2Modules?2_json?4c?$AA@
  00090	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@DBJJFICM@encoder_clear?$AA@
  00097	e8 00 00 00 00	 call	 _PyParallel_Guard
  0009c	85 c0		 test	 eax, eax
  0009e	75 25		 jne	 SHORT $LN29@encoder_cl
  000a0	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  000a5	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000a9	48 89 44 24 38	 mov	 QWORD PTR _py_tmp$22754[rsp], rax
  000ae	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  000b3	48 c7 40 60 00
	00 00 00	 mov	 QWORD PTR [rax+96], 0
  000bb	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _py_tmp$22754[rsp]
  000c0	e8 00 00 00 00	 call	 _Py_DecRef
$LN29@encoder_cl:
  000c5	33 c0		 xor	 eax, eax
  000c7	85 c0		 test	 eax, eax
  000c9	75 9b		 jne	 SHORT $LN32@encoder_cl
$LN28@encoder_cl:

; 1763 :     Py_CLEAR(s->defaultfn);

  000cb	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  000d0	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  000d5	74 53		 je	 SHORT $LN25@encoder_cl
  000d7	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000df	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  000e4	4c 8b 48 68	 mov	 r9, QWORD PTR [rax+104]
  000e8	41 b8 e3 06 00
	00		 mov	 r8d, 1763		; 000006e3H
  000ee	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@BIGPLMIN@?4?4?2Modules?2_json?4c?$AA@
  000f5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@DBJJFICM@encoder_clear?$AA@
  000fc	e8 00 00 00 00	 call	 _PyParallel_Guard
  00101	85 c0		 test	 eax, eax
  00103	75 25		 jne	 SHORT $LN25@encoder_cl
  00105	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  0010a	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0010e	48 89 44 24 40	 mov	 QWORD PTR _py_tmp$22762[rsp], rax
  00113	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  00118	48 c7 40 68 00
	00 00 00	 mov	 QWORD PTR [rax+104], 0
  00120	48 8b 4c 24 40	 mov	 rcx, QWORD PTR _py_tmp$22762[rsp]
  00125	e8 00 00 00 00	 call	 _Py_DecRef
$LN25@encoder_cl:
  0012a	33 c0		 xor	 eax, eax
  0012c	85 c0		 test	 eax, eax
  0012e	75 9b		 jne	 SHORT $LN28@encoder_cl
$LN24@encoder_cl:

; 1764 :     Py_CLEAR(s->encoder);

  00130	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  00135	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  0013a	74 53		 je	 SHORT $LN21@encoder_cl
  0013c	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00144	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  00149	4c 8b 48 70	 mov	 r9, QWORD PTR [rax+112]
  0014d	41 b8 e4 06 00
	00		 mov	 r8d, 1764		; 000006e4H
  00153	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@BIGPLMIN@?4?4?2Modules?2_json?4c?$AA@
  0015a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@DBJJFICM@encoder_clear?$AA@
  00161	e8 00 00 00 00	 call	 _PyParallel_Guard
  00166	85 c0		 test	 eax, eax
  00168	75 25		 jne	 SHORT $LN21@encoder_cl
  0016a	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  0016f	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00173	48 89 44 24 48	 mov	 QWORD PTR _py_tmp$22770[rsp], rax
  00178	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  0017d	48 c7 40 70 00
	00 00 00	 mov	 QWORD PTR [rax+112], 0
  00185	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _py_tmp$22770[rsp]
  0018a	e8 00 00 00 00	 call	 _Py_DecRef
$LN21@encoder_cl:
  0018f	33 c0		 xor	 eax, eax
  00191	85 c0		 test	 eax, eax
  00193	75 9b		 jne	 SHORT $LN24@encoder_cl
$LN20@encoder_cl:

; 1765 :     Py_CLEAR(s->indent);

  00195	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  0019a	48 83 78 78 00	 cmp	 QWORD PTR [rax+120], 0
  0019f	74 53		 je	 SHORT $LN17@encoder_cl
  001a1	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  001a9	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  001ae	4c 8b 48 78	 mov	 r9, QWORD PTR [rax+120]
  001b2	41 b8 e5 06 00
	00		 mov	 r8d, 1765		; 000006e5H
  001b8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@BIGPLMIN@?4?4?2Modules?2_json?4c?$AA@
  001bf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@DBJJFICM@encoder_clear?$AA@
  001c6	e8 00 00 00 00	 call	 _PyParallel_Guard
  001cb	85 c0		 test	 eax, eax
  001cd	75 25		 jne	 SHORT $LN17@encoder_cl
  001cf	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  001d4	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  001d8	48 89 44 24 50	 mov	 QWORD PTR _py_tmp$22778[rsp], rax
  001dd	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  001e2	48 c7 40 78 00
	00 00 00	 mov	 QWORD PTR [rax+120], 0
  001ea	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _py_tmp$22778[rsp]
  001ef	e8 00 00 00 00	 call	 _Py_DecRef
$LN17@encoder_cl:
  001f4	33 c0		 xor	 eax, eax
  001f6	85 c0		 test	 eax, eax
  001f8	75 9b		 jne	 SHORT $LN20@encoder_cl
$LN16@encoder_cl:

; 1766 :     Py_CLEAR(s->key_separator);

  001fa	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  001ff	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  00207	74 5c		 je	 SHORT $LN13@encoder_cl
  00209	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00211	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  00216	4c 8b 88 80 00
	00 00		 mov	 r9, QWORD PTR [rax+128]
  0021d	41 b8 e6 06 00
	00		 mov	 r8d, 1766		; 000006e6H
  00223	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@BIGPLMIN@?4?4?2Modules?2_json?4c?$AA@
  0022a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@DBJJFICM@encoder_clear?$AA@
  00231	e8 00 00 00 00	 call	 _PyParallel_Guard
  00236	85 c0		 test	 eax, eax
  00238	75 2b		 jne	 SHORT $LN13@encoder_cl
  0023a	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  0023f	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  00246	48 89 44 24 58	 mov	 QWORD PTR _py_tmp$22786[rsp], rax
  0024b	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  00250	48 c7 80 80 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+128], 0
  0025b	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _py_tmp$22786[rsp]
  00260	e8 00 00 00 00	 call	 _Py_DecRef
$LN13@encoder_cl:
  00265	33 c0		 xor	 eax, eax
  00267	85 c0		 test	 eax, eax
  00269	75 8f		 jne	 SHORT $LN16@encoder_cl
$LN12@encoder_cl:

; 1767 :     Py_CLEAR(s->item_separator);

  0026b	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  00270	48 83 b8 88 00
	00 00 00	 cmp	 QWORD PTR [rax+136], 0
  00278	74 5c		 je	 SHORT $LN9@encoder_cl
  0027a	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00282	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  00287	4c 8b 88 88 00
	00 00		 mov	 r9, QWORD PTR [rax+136]
  0028e	41 b8 e7 06 00
	00		 mov	 r8d, 1767		; 000006e7H
  00294	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@BIGPLMIN@?4?4?2Modules?2_json?4c?$AA@
  0029b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@DBJJFICM@encoder_clear?$AA@
  002a2	e8 00 00 00 00	 call	 _PyParallel_Guard
  002a7	85 c0		 test	 eax, eax
  002a9	75 2b		 jne	 SHORT $LN9@encoder_cl
  002ab	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  002b0	48 8b 80 88 00
	00 00		 mov	 rax, QWORD PTR [rax+136]
  002b7	48 89 44 24 60	 mov	 QWORD PTR _py_tmp$22794[rsp], rax
  002bc	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  002c1	48 c7 80 88 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+136], 0
  002cc	48 8b 4c 24 60	 mov	 rcx, QWORD PTR _py_tmp$22794[rsp]
  002d1	e8 00 00 00 00	 call	 _Py_DecRef
$LN9@encoder_cl:
  002d6	33 c0		 xor	 eax, eax
  002d8	85 c0		 test	 eax, eax
  002da	75 8f		 jne	 SHORT $LN12@encoder_cl
$LN8@encoder_cl:

; 1768 :     Py_CLEAR(s->sort_keys);

  002dc	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  002e1	48 83 b8 90 00
	00 00 00	 cmp	 QWORD PTR [rax+144], 0
  002e9	74 5c		 je	 SHORT $LN5@encoder_cl
  002eb	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  002f3	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  002f8	4c 8b 88 90 00
	00 00		 mov	 r9, QWORD PTR [rax+144]
  002ff	41 b8 e8 06 00
	00		 mov	 r8d, 1768		; 000006e8H
  00305	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@BIGPLMIN@?4?4?2Modules?2_json?4c?$AA@
  0030c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@DBJJFICM@encoder_clear?$AA@
  00313	e8 00 00 00 00	 call	 _PyParallel_Guard
  00318	85 c0		 test	 eax, eax
  0031a	75 2b		 jne	 SHORT $LN5@encoder_cl
  0031c	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  00321	48 8b 80 90 00
	00 00		 mov	 rax, QWORD PTR [rax+144]
  00328	48 89 44 24 68	 mov	 QWORD PTR _py_tmp$22802[rsp], rax
  0032d	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  00332	48 c7 80 90 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+144], 0
  0033d	48 8b 4c 24 68	 mov	 rcx, QWORD PTR _py_tmp$22802[rsp]
  00342	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@encoder_cl:
  00347	33 c0		 xor	 eax, eax
  00349	85 c0		 test	 eax, eax
  0034b	75 8f		 jne	 SHORT $LN8@encoder_cl
$LN4@encoder_cl:

; 1769 :     Py_CLEAR(s->skipkeys);

  0034d	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  00352	48 83 b8 98 00
	00 00 00	 cmp	 QWORD PTR [rax+152], 0
  0035a	74 5c		 je	 SHORT $LN1@encoder_cl
  0035c	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00364	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  00369	4c 8b 88 98 00
	00 00		 mov	 r9, QWORD PTR [rax+152]
  00370	41 b8 e9 06 00
	00		 mov	 r8d, 1769		; 000006e9H
  00376	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@BIGPLMIN@?4?4?2Modules?2_json?4c?$AA@
  0037d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@DBJJFICM@encoder_clear?$AA@
  00384	e8 00 00 00 00	 call	 _PyParallel_Guard
  00389	85 c0		 test	 eax, eax
  0038b	75 2b		 jne	 SHORT $LN1@encoder_cl
  0038d	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  00392	48 8b 80 98 00
	00 00		 mov	 rax, QWORD PTR [rax+152]
  00399	48 89 44 24 70	 mov	 QWORD PTR _py_tmp$22810[rsp], rax
  0039e	48 8b 44 24 30	 mov	 rax, QWORD PTR s$[rsp]
  003a3	48 c7 80 98 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+152], 0
  003ae	48 8b 4c 24 70	 mov	 rcx, QWORD PTR _py_tmp$22810[rsp]
  003b3	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@encoder_cl:
  003b8	33 c0		 xor	 eax, eax
  003ba	85 c0		 test	 eax, eax
  003bc	75 8f		 jne	 SHORT $LN4@encoder_cl

; 1770 :     return 0;

  003be	33 c0		 xor	 eax, eax

; 1771 : }

  003c0	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  003c7	c3		 ret	 0
encoder_clear ENDP
_TEXT	ENDS
PUBLIC	??_C@_0N@NCKCAFDB@make_encoder?$AA@		; `string'
PUBLIC	??_C@_0N@BGLEDEIC@make_scanner?$AA@		; `string'
PUBLIC	PyInit__json
EXTRN	PyModule_AddObject:PROC
EXTRN	PyType_Ready:PROC
EXTRN	PyType_GenericNew:PROC
EXTRN	PyModule_Create2TraceRefs:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyInit__json DD imagerel $LN8
	DD	imagerel $LN8+240
	DD	imagerel $unwind$PyInit__json
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyInit__json DD 010401H
	DD	06204H
xdata	ENDS
;	COMDAT ??_C@_0N@NCKCAFDB@make_encoder?$AA@
CONST	SEGMENT
??_C@_0N@NCKCAFDB@make_encoder?$AA@ DB 'make_encoder', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@BGLEDEIC@make_scanner?$AA@
CONST	SEGMENT
??_C@_0N@BGLEDEIC@make_scanner?$AA@ DB 'make_scanner', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyInit__json
_TEXT	SEGMENT
m$ = 32
PyInit__json PROC					; COMDAT

; 1847 : {

$LN8:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1848 :     PyObject *m = PyModule_Create(&jsonmodule);

  00004	ba f5 03 00 00	 mov	 edx, 1013		; 000003f5H
  00009	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:jsonmodule
  00010	e8 00 00 00 00	 call	 PyModule_Create2TraceRefs
  00015	48 89 44 24 20	 mov	 QWORD PTR m$[rsp], rax

; 1849 :     if (!m)

  0001a	48 83 7c 24 20
	00		 cmp	 QWORD PTR m$[rsp], 0
  00020	75 07		 jne	 SHORT $LN5@PyInit__js

; 1850 :         return NULL;

  00022	33 c0		 xor	 eax, eax
  00024	e9 c2 00 00 00	 jmp	 $LN6@PyInit__js
$LN5@PyInit__js:

; 1851 :     PyScannerType.tp_new = PyType_GenericNew;

  00029	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyType_GenericNew
  00030	48 89 05 90 01
	00 00		 mov	 QWORD PTR PyScannerType+400, rax

; 1852 :     if (PyType_Ready(&PyScannerType) < 0)

  00037	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyScannerType
  0003e	e8 00 00 00 00	 call	 PyType_Ready
  00043	85 c0		 test	 eax, eax
  00045	7d 05		 jge	 SHORT $LN4@PyInit__js

; 1853 :         goto fail;

  00047	e9 93 00 00 00	 jmp	 $fail$22867
$LN4@PyInit__js:

; 1854 :     PyEncoderType.tp_new = PyType_GenericNew;

  0004c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyType_GenericNew
  00053	48 89 05 90 01
	00 00		 mov	 QWORD PTR PyEncoderType+400, rax

; 1855 :     if (PyType_Ready(&PyEncoderType) < 0)

  0005a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyEncoderType
  00061	e8 00 00 00 00	 call	 PyType_Ready
  00066	85 c0		 test	 eax, eax
  00068	7d 02		 jge	 SHORT $LN3@PyInit__js

; 1856 :         goto fail;

  0006a	eb 73		 jmp	 SHORT $fail$22867
$LN3@PyInit__js:

; 1857 :     Py_INCREF((PyObject*)&PyScannerType);

  0006c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyScannerType
  00073	e8 00 00 00 00	 call	 _Py_IncRef

; 1858 :     if (PyModule_AddObject(m, "make_scanner", (PyObject*)&PyScannerType) < 0) {

  00078	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:PyScannerType
  0007f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@BGLEDEIC@make_scanner?$AA@
  00086	48 8b 4c 24 20	 mov	 rcx, QWORD PTR m$[rsp]
  0008b	e8 00 00 00 00	 call	 PyModule_AddObject
  00090	85 c0		 test	 eax, eax
  00092	7d 0e		 jge	 SHORT $LN2@PyInit__js

; 1859 :         Py_DECREF((PyObject*)&PyScannerType);

  00094	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyScannerType
  0009b	e8 00 00 00 00	 call	 _Py_DecRef

; 1860 :         goto fail;

  000a0	eb 3d		 jmp	 SHORT $fail$22867
$LN2@PyInit__js:

; 1861 :     }
; 1862 :     Py_INCREF((PyObject*)&PyEncoderType);

  000a2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyEncoderType
  000a9	e8 00 00 00 00	 call	 _Py_IncRef

; 1863 :     if (PyModule_AddObject(m, "make_encoder", (PyObject*)&PyEncoderType) < 0) {

  000ae	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:PyEncoderType
  000b5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0N@NCKCAFDB@make_encoder?$AA@
  000bc	48 8b 4c 24 20	 mov	 rcx, QWORD PTR m$[rsp]
  000c1	e8 00 00 00 00	 call	 PyModule_AddObject
  000c6	85 c0		 test	 eax, eax
  000c8	7d 0e		 jge	 SHORT $LN1@PyInit__js

; 1864 :         Py_DECREF((PyObject*)&PyEncoderType);

  000ca	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyEncoderType
  000d1	e8 00 00 00 00	 call	 _Py_DecRef

; 1865 :         goto fail;

  000d6	eb 07		 jmp	 SHORT $fail$22867
$LN1@PyInit__js:

; 1866 :     }
; 1867 :     return m;

  000d8	48 8b 44 24 20	 mov	 rax, QWORD PTR m$[rsp]
  000dd	eb 0c		 jmp	 SHORT $LN6@PyInit__js
$fail$22867:

; 1868 :   fail:
; 1869 :     Py_DECREF(m);

  000df	48 8b 4c 24 20	 mov	 rcx, QWORD PTR m$[rsp]
  000e4	e8 00 00 00 00	 call	 _Py_DecRef

; 1870 :     return NULL;

  000e9	33 c0		 xor	 eax, eax
$LN6@PyInit__js:

; 1871 : }

  000eb	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000ef	c3		 ret	 0
PyInit__json ENDP
_TEXT	ENDS
END
