; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0L@NNMACJIG@__reduce__?$AA@		; `string'
PUBLIC	??_C@_04BCIDKIGN@dict?$AA@			; `string'
PUBLIC	??_C@_08IBBDGPOF@sequence?$AA@			; `string'
PUBLIC	??_C@_0O@ELHOMFEL@unnamed?5field?$AA@		; `string'
PUBLIC	PyStructSequence_UnnamedField
EXTRN	PyType_Type:BYTE
;	COMDAT ??_C@_0L@NNMACJIG@__reduce__?$AA@
CONST	SEGMENT
??_C@_0L@NNMACJIG@__reduce__?$AA@ DB '__reduce__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04BCIDKIGN@dict?$AA@
CONST	SEGMENT
??_C@_04BCIDKIGN@dict?$AA@ DB 'dict', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08IBBDGPOF@sequence?$AA@
CONST	SEGMENT
??_C@_08IBBDGPOF@sequence?$AA@ DB 'sequence', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@ELHOMFEL@unnamed?5field?$AA@
CONST	SEGMENT
??_C@_0O@ELHOMFEL@unnamed?5field?$AA@ DB 'unnamed field', 00H ; `string'
CONST	ENDS
_DATA	SEGMENT
visible_length_key DB 'n_sequence_fields', 00H
	ORG $+6
real_length_key DB 'n_fields', 00H
	ORG $+7
unnamed_fields_key DB 'n_unnamed_fields', 00H
	ORG $+7
PyStructSequence_UnnamedField DQ FLAT:??_C@_0O@ELHOMFEL@unnamed?5field?$AA@
?kwlist@?1??structseq_new@@9@9 DQ FLAT:??_C@_08IBBDGPOF@sequence?$AA@ ; `structseq_new'::`2'::kwlist
	DQ	FLAT:??_C@_04BCIDKIGN@dict?$AA@
	DQ	0000000000000000H
structseq_methods DQ FLAT:??_C@_0L@NNMACJIG@__reduce__?$AA@
	DQ	FLAT:structseq_reduce
	DD	04H
	ORG $+4
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
_struct_sequence_template DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000000H
	DQ	0000000000000078H
	DQ	0000000000000008H
	DQ	FLAT:structseq_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:structseq_repr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	040000H
	ORG $+4
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:structseq_methods
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:structseq_new
	ORG $+72
_DATA	ENDS
PUBLIC	PyStructSequence_New
EXTRN	_PyObject_GC_NewVar:PROC
EXTRN	_PxObject_NewVar:PROC
EXTRN	_Py_PXCTX:PROC
EXTRN	PyLong_AsLong:PROC
EXTRN	PyDict_GetItemString:PROC
;	COMDAT pdata
; File c:\src\pyparallel\objects\structseq.c
pdata	SEGMENT
$pdata$PyStructSequence_New DD imagerel $LN9
	DD	imagerel $LN9+231
	DD	imagerel $unwind$PyStructSequence_New
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyStructSequence_New DD 010901H
	DD	08209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyStructSequence_New
_TEXT	SEGMENT
i$ = 32
size$ = 40
obj$ = 48
tv79 = 56
type$ = 80
PyStructSequence_New PROC				; COMDAT

; 30   : {

$LN9:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 31   :     PyStructSequence *obj;
; 32   :     Py_ssize_t size = REAL_SIZE_TP(type), i;

  00009	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:real_length_key
  00010	48 8b 44 24 50	 mov	 rax, QWORD PTR type$[rsp]
  00015	48 8b 88 60 01
	00 00		 mov	 rcx, QWORD PTR [rax+352]
  0001c	e8 00 00 00 00	 call	 PyDict_GetItemString
  00021	48 8b c8	 mov	 rcx, rax
  00024	e8 00 00 00 00	 call	 PyLong_AsLong
  00029	48 98		 cdqe
  0002b	48 89 44 24 28	 mov	 QWORD PTR size$[rsp], rax

; 33   : 
; 34   :     obj = PyObject_GC_NewVar(PyStructSequence, type, size);

  00030	e8 00 00 00 00	 call	 _Py_PXCTX
  00035	85 c0		 test	 eax, eax
  00037	74 16		 je	 SHORT $LN7@PyStructSe
  00039	48 8b 54 24 28	 mov	 rdx, QWORD PTR size$[rsp]
  0003e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR type$[rsp]
  00043	e8 00 00 00 00	 call	 _PxObject_NewVar
  00048	48 89 44 24 38	 mov	 QWORD PTR tv79[rsp], rax
  0004d	eb 14		 jmp	 SHORT $LN8@PyStructSe
$LN7@PyStructSe:
  0004f	48 8b 54 24 28	 mov	 rdx, QWORD PTR size$[rsp]
  00054	48 8b 4c 24 50	 mov	 rcx, QWORD PTR type$[rsp]
  00059	e8 00 00 00 00	 call	 _PyObject_GC_NewVar
  0005e	48 89 44 24 38	 mov	 QWORD PTR tv79[rsp], rax
$LN8@PyStructSe:
  00063	48 8b 44 24 38	 mov	 rax, QWORD PTR tv79[rsp]
  00068	48 89 44 24 30	 mov	 QWORD PTR obj$[rsp], rax

; 35   :     if (obj == NULL)

  0006d	48 83 7c 24 30
	00		 cmp	 QWORD PTR obj$[rsp], 0
  00073	75 04		 jne	 SHORT $LN4@PyStructSe

; 36   :         return NULL;

  00075	33 c0		 xor	 eax, eax
  00077	eb 69		 jmp	 SHORT $LN5@PyStructSe
$LN4@PyStructSe:

; 37   :     /* Hack the size of the variable object, so invisible fields don't appear
; 38   :      to Python code. */
; 39   :     Py_SIZE(obj) = VISIBLE_SIZE_TP(type);

  00079	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:visible_length_key
  00080	48 8b 44 24 50	 mov	 rax, QWORD PTR type$[rsp]
  00085	48 8b 88 60 01
	00 00		 mov	 rcx, QWORD PTR [rax+352]
  0008c	e8 00 00 00 00	 call	 PyDict_GetItemString
  00091	48 8b c8	 mov	 rcx, rax
  00094	e8 00 00 00 00	 call	 PyLong_AsLong
  00099	48 98		 cdqe
  0009b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR obj$[rsp]
  000a0	48 89 41 60	 mov	 QWORD PTR [rcx+96], rax

; 40   :     for (i = 0; i < size; i++)

  000a4	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  000ad	eb 0d		 jmp	 SHORT $LN3@PyStructSe
$LN2@PyStructSe:
  000af	48 8b 44 24 20	 mov	 rax, QWORD PTR i$[rsp]
  000b4	48 ff c0	 inc	 rax
  000b7	48 89 44 24 20	 mov	 QWORD PTR i$[rsp], rax
$LN3@PyStructSe:
  000bc	48 8b 44 24 28	 mov	 rax, QWORD PTR size$[rsp]
  000c1	48 39 44 24 20	 cmp	 QWORD PTR i$[rsp], rax
  000c6	7d 15		 jge	 SHORT $LN1@PyStructSe

; 41   :         obj->ob_item[i] = NULL;

  000c8	48 8b 44 24 30	 mov	 rax, QWORD PTR obj$[rsp]
  000cd	48 8b 4c 24 20	 mov	 rcx, QWORD PTR i$[rsp]
  000d2	48 c7 44 c8 70
	00 00 00 00	 mov	 QWORD PTR [rax+rcx*8+112], 0
  000db	eb d2		 jmp	 SHORT $LN2@PyStructSe
$LN1@PyStructSe:

; 42   : 
; 43   :     return (PyObject*)obj;

  000dd	48 8b 44 24 30	 mov	 rax, QWORD PTR obj$[rsp]
$LN5@PyStructSe:

; 44   : }

  000e2	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000e6	c3		 ret	 0
PyStructSequence_New ENDP
_TEXT	ENDS
PUBLIC	PyStructSequence_SetItem
; Function compile flags: /Odtp
;	COMDAT PyStructSequence_SetItem
_TEXT	SEGMENT
op$ = 8
i$ = 16
v$ = 24
PyStructSequence_SetItem PROC				; COMDAT

; 48   : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 49   :     PyStructSequence_SET_ITEM(op, i, v);

  0000f	48 8b 44 24 08	 mov	 rax, QWORD PTR op$[rsp]
  00014	48 8b 4c 24 10	 mov	 rcx, QWORD PTR i$[rsp]
  00019	48 8b 54 24 18	 mov	 rdx, QWORD PTR v$[rsp]
  0001e	48 89 54 c8 70	 mov	 QWORD PTR [rax+rcx*8+112], rdx

; 50   : }

  00023	c3		 ret	 0
PyStructSequence_SetItem ENDP
_TEXT	ENDS
PUBLIC	PyStructSequence_GetItem
; Function compile flags: /Odtp
;	COMDAT PyStructSequence_GetItem
_TEXT	SEGMENT
op$ = 8
i$ = 16
PyStructSequence_GetItem PROC				; COMDAT

; 54   : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 55   :     return PyStructSequence_GET_ITEM(op, i);

  0000a	48 8b 44 24 08	 mov	 rax, QWORD PTR op$[rsp]
  0000f	48 8b 4c 24 10	 mov	 rcx, QWORD PTR i$[rsp]
  00014	48 8b 44 c8 70	 mov	 rax, QWORD PTR [rax+rcx*8+112]

; 56   : }

  00019	c3		 ret	 0
PyStructSequence_GetItem ENDP
_TEXT	ENDS
PUBLIC	_Py_DecRef
EXTRN	PyObject_GC_Del:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$structseq_dealloc DD imagerel structseq_dealloc
	DD	imagerel structseq_dealloc+149
	DD	imagerel $unwind$structseq_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$structseq_dealloc DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT structseq_dealloc
_TEXT	SEGMENT
i$ = 32
size$ = 40
obj$ = 64
structseq_dealloc PROC					; COMDAT

; 60   : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 61   :     Py_ssize_t i, size;
; 62   :     
; 63   :     size = REAL_SIZE(obj);

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR obj$[rsp]
  0000e	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00012	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:real_length_key
  00019	48 8b 88 60 01
	00 00		 mov	 rcx, QWORD PTR [rax+352]
  00020	e8 00 00 00 00	 call	 PyDict_GetItemString
  00025	48 8b c8	 mov	 rcx, rax
  00028	e8 00 00 00 00	 call	 PyLong_AsLong
  0002d	48 98		 cdqe
  0002f	48 89 44 24 28	 mov	 QWORD PTR size$[rsp], rax

; 64   :     for (i = 0; i < size; ++i) {

  00034	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  0003d	eb 0d		 jmp	 SHORT $LN7@structseq_
$LN6@structseq_:
  0003f	48 8b 44 24 20	 mov	 rax, QWORD PTR i$[rsp]
  00044	48 ff c0	 inc	 rax
  00047	48 89 44 24 20	 mov	 QWORD PTR i$[rsp], rax
$LN7@structseq_:
  0004c	48 8b 44 24 28	 mov	 rax, QWORD PTR size$[rsp]
  00051	48 39 44 24 20	 cmp	 QWORD PTR i$[rsp], rax
  00056	7d 2e		 jge	 SHORT $LN5@structseq_
$LN4@structseq_:

; 65   :         Py_XDECREF(obj->ob_item[i]);

  00058	48 8b 44 24 40	 mov	 rax, QWORD PTR obj$[rsp]
  0005d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR i$[rsp]
  00062	48 83 7c c8 70
	00		 cmp	 QWORD PTR [rax+rcx*8+112], 0
  00068	74 14		 je	 SHORT $LN1@structseq_
  0006a	48 8b 44 24 40	 mov	 rax, QWORD PTR obj$[rsp]
  0006f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR i$[rsp]
  00074	48 8b 4c c8 70	 mov	 rcx, QWORD PTR [rax+rcx*8+112]
  00079	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@structseq_:
  0007e	33 c0		 xor	 eax, eax
  00080	85 c0		 test	 eax, eax
  00082	75 d4		 jne	 SHORT $LN4@structseq_

; 66   :     }

  00084	eb b9		 jmp	 SHORT $LN6@structseq_
$LN5@structseq_:

; 67   :     PyObject_GC_Del(obj);

  00086	48 8b 4c 24 40	 mov	 rcx, QWORD PTR obj$[rsp]
  0008b	e8 00 00 00 00	 call	 PyObject_GC_Del

; 68   : }

  00090	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00094	c3		 ret	 0
structseq_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
EXTRN	_Py_Dealloc:PROC
EXTRN	_Py_NegativeRefcount:PROC
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_RefTotal:QWORD
EXTRN	Px_DecRef:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN13
	DD	imagerel $LN13+257
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
tv81 = 48
op$ = 80
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN13:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	0f 85 e6 00 00
	00		 jne	 $LN8@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00016	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0001b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0001f	48 83 e0 20	 and	 rax, 32			; 00000020H
  00023	48 85 c0	 test	 rax, rax
  00026	75 14		 jne	 SHORT $LN6@Py_DecRef
  00028	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0002d	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00031	48 25 80 00 00
	00		 and	 rax, 128		; 00000080H
  00037	48 85 c0	 test	 rax, rax
  0003a	74 0f		 je	 SHORT $LN7@Py_DecRef
$LN6@Py_DecRef:

; 926  :             Px_DECREF(op);

  0003c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  00041	e8 00 00 00 00	 call	 Px_DecRef
  00046	e9 b1 00 00 00	 jmp	 $LN5@Py_DecRef
$LN7@Py_DecRef:

; 927  :         else if (!Px_ISPX(op)) {

  0004b	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00050	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00054	48 83 e0 02	 and	 rax, 2
  00058	48 85 c0	 test	 rax, rax
  0005b	0f 85 9b 00 00
	00		 jne	 $LN4@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;

  00061	e8 00 00 00 00	 call	 _Py_PXCTX
  00066	85 c0		 test	 eax, eax
  00068	74 02		 je	 SHORT $LN11@Py_DecRef
  0006a	eb 11		 jmp	 SHORT $LN12@Py_DecRef
$LN11@Py_DecRef:
  0006c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00073	48 ff c8	 dec	 rax
  00076	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN12@Py_DecRef:

; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  0007d	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00082	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00086	48 ff c8	 dec	 rax
  00089	48 89 44 24 30	 mov	 QWORD PTR tv81[rsp], rax
  0008e	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00093	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv81[rsp]
  00098	48 89 48 50	 mov	 QWORD PTR [rax+80], rcx
  0009c	48 83 7c 24 30
	00		 cmp	 QWORD PTR tv81[rsp], 0
  000a2	74 4e		 je	 SHORT $LN3@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);

  000a4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000ac	4c 8b 4c 24 50	 mov	 r9, QWORD PTR op$[rsp]
  000b1	41 b8 a2 03 00
	00		 mov	 r8d, 930		; 000003a2H
  000b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000c5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ca	85 c0		 test	 eax, eax
  000cc	75 22		 jne	 SHORT $LN2@Py_DecRef
  000ce	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  000d3	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000d8	7d 16		 jge	 SHORT $LN2@Py_DecRef
  000da	4c 8b 44 24 50	 mov	 r8, QWORD PTR op$[rsp]
  000df	ba a2 03 00 00	 mov	 edx, 930		; 000003a2H
  000e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000eb	e8 00 00 00 00	 call	 _Py_NegativeRefcount
$LN2@Py_DecRef:

; 931  :             } else

  000f0	eb 0a		 jmp	 SHORT $LN1@Py_DecRef
$LN3@Py_DecRef:

; 932  :                 _Py_Dealloc((PyObject *)(op));

  000f2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  000f7	e8 00 00 00 00	 call	 _Py_Dealloc
$LN1@Py_DecRef:
$LN4@Py_DecRef:
$LN5@Py_DecRef:
$LN8@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  000fc	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00100	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
PUBLIC	_Py_IncRef
PUBLIC	??_C@_0DD@ODKCNJON@?$CF?4500s?$CI?$CJ?5takes?5a?5?$CFzd?9sequence?5?$CI?$CF@ ; `string'
PUBLIC	??_C@_0DM@JOADAEEN@?$CF?4500s?$CI?$CJ?5takes?5an?5at?5most?5?$CFzd?9se@ ; `string'
PUBLIC	??_C@_0DN@OAOHDEAK@?$CF?4500s?$CI?$CJ?5takes?5an?5at?5least?5?$CFzd?9s@ ; `string'
PUBLIC	??_C@_0CM@HNEHEKCC@?$CF?4500s?$CI?$CJ?5takes?5a?5dict?5as?5second?5@ ; `string'
PUBLIC	??_C@_0CA@CFGGFGAN@constructor?5requires?5a?5sequence?$AA@ ; `string'
PUBLIC	??_C@_0O@PCIBILIP@O?$HMO?3structseq?$AA@	; `string'
EXTRN	_Py_NoneStruct:BYTE
EXTRN	PyErr_Format:PROC
EXTRN	PyExc_TypeError:QWORD
EXTRN	PySequence_Fast:PROC
EXTRN	PyArg_ParseTupleAndKeywords:PROC
;	COMDAT pdata
; File c:\src\pyparallel\objects\structseq.c
pdata	SEGMENT
$pdata$structseq_new DD imagerel structseq_new
	DD	imagerel structseq_new+1045
	DD	imagerel $unwind$structseq_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$structseq_new DD 021601H
	DD	0130116H
xdata	ENDS
;	COMDAT ??_C@_0DD@ODKCNJON@?$CF?4500s?$CI?$CJ?5takes?5a?5?$CFzd?9sequence?5?$CI?$CF@
CONST	SEGMENT
??_C@_0DD@ODKCNJON@?$CF?4500s?$CI?$CJ?5takes?5a?5?$CFzd?9sequence?5?$CI?$CF@ DB '%'
	DB	'.500s() takes a %zd-sequence (%zd-sequence given)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@JOADAEEN@?$CF?4500s?$CI?$CJ?5takes?5an?5at?5most?5?$CFzd?9se@
CONST	SEGMENT
??_C@_0DM@JOADAEEN@?$CF?4500s?$CI?$CJ?5takes?5an?5at?5most?5?$CFzd?9se@ DB '%'
	DB	'.500s() takes an at most %zd-sequence (%zd-sequence given)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DN@OAOHDEAK@?$CF?4500s?$CI?$CJ?5takes?5an?5at?5least?5?$CFzd?9s@
CONST	SEGMENT
??_C@_0DN@OAOHDEAK@?$CF?4500s?$CI?$CJ?5takes?5an?5at?5least?5?$CFzd?9s@ DB '%'
	DB	'.500s() takes an at least %zd-sequence (%zd-sequence given)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@HNEHEKCC@?$CF?4500s?$CI?$CJ?5takes?5a?5dict?5as?5second?5@
CONST	SEGMENT
??_C@_0CM@HNEHEKCC@?$CF?4500s?$CI?$CJ?5takes?5a?5dict?5as?5second?5@ DB '%'
	DB	'.500s() takes a dict as second arg, if any', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@CFGGFGAN@constructor?5requires?5a?5sequence?$AA@
CONST	SEGMENT
??_C@_0CA@CFGGFGAN@constructor?5requires?5a?5sequence?$AA@ DB 'constructo'
	DB	'r requires a sequence', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@PCIBILIP@O?$HMO?3structseq?$AA@
CONST	SEGMENT
??_C@_0O@PCIBILIP@O?$HMO?3structseq?$AA@ DB 'O|O:structseq', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT structseq_new
_TEXT	SEGMENT
res$ = 48
n_unnamed_fields$ = 56
i$ = 64
arg$ = 72
dict$ = 80
max_len$ = 88
ob$ = 96
len$ = 104
min_len$ = 112
v$20442 = 120
tv92 = 128
tv187 = 136
type$ = 160
args$ = 168
kwds$ = 176
structseq_new PROC					; COMDAT

; 72   : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 73   :     PyObject *arg = NULL;

  00016	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR arg$[rsp], 0

; 74   :     PyObject *dict = NULL;

  0001f	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR dict$[rsp], 0

; 75   :     PyObject *ob;
; 76   :     PyStructSequence *res = NULL;

  00028	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR res$[rsp], 0

; 77   :     Py_ssize_t len, min_len, max_len, i, n_unnamed_fields;
; 78   :     static char *kwlist[] = {"sequence", "dict", 0};
; 79   : 
; 80   :     if (!PyArg_ParseTupleAndKeywords(args, kwds, "O|O:structseq",
; 81   :                                      kwlist, &arg, &dict))

  00031	48 8d 44 24 50	 lea	 rax, QWORD PTR dict$[rsp]
  00036	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0003b	48 8d 44 24 48	 lea	 rax, QWORD PTR arg$[rsp]
  00040	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00045	4c 8d 0d 00 00
	00 00		 lea	 r9, OFFSET FLAT:?kwlist@?1??structseq_new@@9@9
  0004c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0O@PCIBILIP@O?$HMO?3structseq?$AA@
  00053	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR kwds$[rsp]
  0005b	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR args$[rsp]
  00063	e8 00 00 00 00	 call	 PyArg_ParseTupleAndKeywords
  00068	85 c0		 test	 eax, eax
  0006a	75 07		 jne	 SHORT $LN17@structseq_@2

; 82   :         return NULL;

  0006c	33 c0		 xor	 eax, eax
  0006e	e9 9a 03 00 00	 jmp	 $LN18@structseq_@2
$LN17@structseq_@2:

; 83   : 
; 84   :     arg = PySequence_Fast(arg, "constructor requires a sequence");

  00073	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CA@CFGGFGAN@constructor?5requires?5a?5sequence?$AA@
  0007a	48 8b 4c 24 48	 mov	 rcx, QWORD PTR arg$[rsp]
  0007f	e8 00 00 00 00	 call	 PySequence_Fast
  00084	48 89 44 24 48	 mov	 QWORD PTR arg$[rsp], rax

; 85   : 
; 86   :     if (!arg) {

  00089	48 83 7c 24 48
	00		 cmp	 QWORD PTR arg$[rsp], 0
  0008f	75 07		 jne	 SHORT $LN16@structseq_@2

; 87   :         return NULL;

  00091	33 c0		 xor	 eax, eax
  00093	e9 75 03 00 00	 jmp	 $LN18@structseq_@2
$LN16@structseq_@2:

; 88   :     }
; 89   : 
; 90   :     if (dict && !PyDict_Check(dict)) {

  00098	48 83 7c 24 50
	00		 cmp	 QWORD PTR dict$[rsp], 0
  0009e	74 48		 je	 SHORT $LN15@structseq_@2
  000a0	48 8b 44 24 50	 mov	 rax, QWORD PTR dict$[rsp]
  000a5	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000a9	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000af	25 00 00 00 20	 and	 eax, 536870912		; 20000000H
  000b4	85 c0		 test	 eax, eax
  000b6	75 30		 jne	 SHORT $LN15@structseq_@2

; 91   :         PyErr_Format(PyExc_TypeError,
; 92   :                      "%.500s() takes a dict as second arg, if any",
; 93   :                      type->tp_name);

  000b8	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  000c0	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  000c4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CM@HNEHEKCC@?$CF?4500s?$CI?$CJ?5takes?5a?5dict?5as?5second?5@
  000cb	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000d2	e8 00 00 00 00	 call	 PyErr_Format

; 94   :         Py_DECREF(arg);

  000d7	48 8b 4c 24 48	 mov	 rcx, QWORD PTR arg$[rsp]
  000dc	e8 00 00 00 00	 call	 _Py_DecRef

; 95   :         return NULL;

  000e1	33 c0		 xor	 eax, eax
  000e3	e9 25 03 00 00	 jmp	 $LN18@structseq_@2
$LN15@structseq_@2:

; 96   :     }
; 97   : 
; 98   :     len = PySequence_Fast_GET_SIZE(arg);

  000e8	48 8b 44 24 48	 mov	 rax, QWORD PTR arg$[rsp]
  000ed	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000f1	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000f7	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  000fc	85 c0		 test	 eax, eax
  000fe	74 13		 je	 SHORT $LN20@structseq_@2
  00100	48 8b 44 24 48	 mov	 rax, QWORD PTR arg$[rsp]
  00105	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00109	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv92[rsp], rax
  00111	eb 11		 jmp	 SHORT $LN21@structseq_@2
$LN20@structseq_@2:
  00113	48 8b 44 24 48	 mov	 rax, QWORD PTR arg$[rsp]
  00118	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0011c	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv92[rsp], rax
$LN21@structseq_@2:
  00124	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR tv92[rsp]
  0012c	48 89 44 24 68	 mov	 QWORD PTR len$[rsp], rax

; 99   :     min_len = VISIBLE_SIZE_TP(type);

  00131	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:visible_length_key
  00138	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  00140	48 8b 88 60 01
	00 00		 mov	 rcx, QWORD PTR [rax+352]
  00147	e8 00 00 00 00	 call	 PyDict_GetItemString
  0014c	48 8b c8	 mov	 rcx, rax
  0014f	e8 00 00 00 00	 call	 PyLong_AsLong
  00154	48 98		 cdqe
  00156	48 89 44 24 70	 mov	 QWORD PTR min_len$[rsp], rax

; 100  :     max_len = REAL_SIZE_TP(type);

  0015b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:real_length_key
  00162	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  0016a	48 8b 88 60 01
	00 00		 mov	 rcx, QWORD PTR [rax+352]
  00171	e8 00 00 00 00	 call	 PyDict_GetItemString
  00176	48 8b c8	 mov	 rcx, rax
  00179	e8 00 00 00 00	 call	 PyLong_AsLong
  0017e	48 98		 cdqe
  00180	48 89 44 24 58	 mov	 QWORD PTR max_len$[rsp], rax

; 101  :     n_unnamed_fields = UNNAMED_FIELDS_TP(type);

  00185	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:unnamed_fields_key
  0018c	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  00194	48 8b 88 60 01
	00 00		 mov	 rcx, QWORD PTR [rax+352]
  0019b	e8 00 00 00 00	 call	 PyDict_GetItemString
  001a0	48 8b c8	 mov	 rcx, rax
  001a3	e8 00 00 00 00	 call	 PyLong_AsLong
  001a8	48 98		 cdqe
  001aa	48 89 44 24 38	 mov	 QWORD PTR n_unnamed_fields$[rsp], rax

; 102  : 
; 103  :     if (min_len != max_len) {

  001af	48 8b 44 24 58	 mov	 rax, QWORD PTR max_len$[rsp]
  001b4	48 39 44 24 70	 cmp	 QWORD PTR min_len$[rsp], rax
  001b9	0f 84 98 00 00
	00		 je	 $LN14@structseq_@2

; 104  :         if (len < min_len) {

  001bf	48 8b 44 24 70	 mov	 rax, QWORD PTR min_len$[rsp]
  001c4	48 39 44 24 68	 cmp	 QWORD PTR len$[rsp], rax
  001c9	7d 3f		 jge	 SHORT $LN13@structseq_@2

; 105  :             PyErr_Format(PyExc_TypeError,
; 106  :                 "%.500s() takes an at least %zd-sequence (%zd-sequence given)",
; 107  :                 type->tp_name, min_len, len);

  001cb	48 8b 44 24 68	 mov	 rax, QWORD PTR len$[rsp]
  001d0	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001d5	4c 8b 4c 24 70	 mov	 r9, QWORD PTR min_len$[rsp]
  001da	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  001e2	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  001e6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DN@OAOHDEAK@?$CF?4500s?$CI?$CJ?5takes?5an?5at?5least?5?$CFzd?9s@
  001ed	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  001f4	e8 00 00 00 00	 call	 PyErr_Format

; 108  :             Py_DECREF(arg);

  001f9	48 8b 4c 24 48	 mov	 rcx, QWORD PTR arg$[rsp]
  001fe	e8 00 00 00 00	 call	 _Py_DecRef

; 109  :             return NULL;

  00203	33 c0		 xor	 eax, eax
  00205	e9 03 02 00 00	 jmp	 $LN18@structseq_@2
$LN13@structseq_@2:

; 110  :         }
; 111  : 
; 112  :         if (len > max_len) {

  0020a	48 8b 44 24 58	 mov	 rax, QWORD PTR max_len$[rsp]
  0020f	48 39 44 24 68	 cmp	 QWORD PTR len$[rsp], rax
  00214	7e 3f		 jle	 SHORT $LN12@structseq_@2

; 113  :             PyErr_Format(PyExc_TypeError,
; 114  :                 "%.500s() takes an at most %zd-sequence (%zd-sequence given)",
; 115  :                 type->tp_name, max_len, len);

  00216	48 8b 44 24 68	 mov	 rax, QWORD PTR len$[rsp]
  0021b	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00220	4c 8b 4c 24 58	 mov	 r9, QWORD PTR max_len$[rsp]
  00225	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  0022d	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  00231	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DM@JOADAEEN@?$CF?4500s?$CI?$CJ?5takes?5an?5at?5most?5?$CFzd?9se@
  00238	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0023f	e8 00 00 00 00	 call	 PyErr_Format

; 116  :             Py_DECREF(arg);

  00244	48 8b 4c 24 48	 mov	 rcx, QWORD PTR arg$[rsp]
  00249	e8 00 00 00 00	 call	 _Py_DecRef

; 117  :             return NULL;

  0024e	33 c0		 xor	 eax, eax
  00250	e9 b8 01 00 00	 jmp	 $LN18@structseq_@2
$LN12@structseq_@2:

; 118  :         }
; 119  :     }
; 120  :     else {

  00255	eb 4b		 jmp	 SHORT $LN11@structseq_@2
$LN14@structseq_@2:

; 121  :         if (len != min_len) {

  00257	48 8b 44 24 70	 mov	 rax, QWORD PTR min_len$[rsp]
  0025c	48 39 44 24 68	 cmp	 QWORD PTR len$[rsp], rax
  00261	74 3f		 je	 SHORT $LN10@structseq_@2

; 122  :             PyErr_Format(PyExc_TypeError,
; 123  :                          "%.500s() takes a %zd-sequence (%zd-sequence given)",
; 124  :                          type->tp_name, min_len, len);

  00263	48 8b 44 24 68	 mov	 rax, QWORD PTR len$[rsp]
  00268	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0026d	4c 8b 4c 24 70	 mov	 r9, QWORD PTR min_len$[rsp]
  00272	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  0027a	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  0027e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DD@ODKCNJON@?$CF?4500s?$CI?$CJ?5takes?5a?5?$CFzd?9sequence?5?$CI?$CF@
  00285	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  0028c	e8 00 00 00 00	 call	 PyErr_Format

; 125  :             Py_DECREF(arg);

  00291	48 8b 4c 24 48	 mov	 rcx, QWORD PTR arg$[rsp]
  00296	e8 00 00 00 00	 call	 _Py_DecRef

; 126  :             return NULL;

  0029b	33 c0		 xor	 eax, eax
  0029d	e9 6b 01 00 00	 jmp	 $LN18@structseq_@2
$LN10@structseq_@2:
$LN11@structseq_@2:

; 127  :         }
; 128  :     }
; 129  : 
; 130  :     res = (PyStructSequence*) PyStructSequence_New(type);

  002a2	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR type$[rsp]
  002aa	e8 00 00 00 00	 call	 PyStructSequence_New
  002af	48 89 44 24 30	 mov	 QWORD PTR res$[rsp], rax

; 131  :     if (res == NULL) {

  002b4	48 83 7c 24 30
	00		 cmp	 QWORD PTR res$[rsp], 0
  002ba	75 11		 jne	 SHORT $LN9@structseq_@2

; 132  :         Py_DECREF(arg);

  002bc	48 8b 4c 24 48	 mov	 rcx, QWORD PTR arg$[rsp]
  002c1	e8 00 00 00 00	 call	 _Py_DecRef

; 133  :         return NULL;

  002c6	33 c0		 xor	 eax, eax
  002c8	e9 40 01 00 00	 jmp	 $LN18@structseq_@2
$LN9@structseq_@2:

; 134  :     }
; 135  :     for (i = 0; i < len; ++i) {

  002cd	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR i$[rsp], 0
  002d6	eb 0d		 jmp	 SHORT $LN8@structseq_@2
$LN7@structseq_@2:
  002d8	48 8b 44 24 40	 mov	 rax, QWORD PTR i$[rsp]
  002dd	48 ff c0	 inc	 rax
  002e0	48 89 44 24 40	 mov	 QWORD PTR i$[rsp], rax
$LN8@structseq_@2:
  002e5	48 8b 44 24 68	 mov	 rax, QWORD PTR len$[rsp]
  002ea	48 39 44 24 40	 cmp	 QWORD PTR i$[rsp], rax
  002ef	7d 7b		 jge	 SHORT $LN6@structseq_@2

; 136  :         PyObject *v = PySequence_Fast_GET_ITEM(arg, i);

  002f1	48 8b 44 24 48	 mov	 rax, QWORD PTR arg$[rsp]
  002f6	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  002fa	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00300	25 00 00 00 02	 and	 eax, 33554432		; 02000000H
  00305	85 c0		 test	 eax, eax
  00307	74 1c		 je	 SHORT $LN22@structseq_@2
  00309	48 8b 44 24 48	 mov	 rax, QWORD PTR arg$[rsp]
  0030e	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00312	48 8b 4c 24 40	 mov	 rcx, QWORD PTR i$[rsp]
  00317	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  0031b	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv187[rsp], rax
  00323	eb 17		 jmp	 SHORT $LN23@structseq_@2
$LN22@structseq_@2:
  00325	48 8b 44 24 48	 mov	 rax, QWORD PTR arg$[rsp]
  0032a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR i$[rsp]
  0032f	48 8b 44 c8 70	 mov	 rax, QWORD PTR [rax+rcx*8+112]
  00334	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR tv187[rsp], rax
$LN23@structseq_@2:
  0033c	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR tv187[rsp]
  00344	48 89 44 24 78	 mov	 QWORD PTR v$20442[rsp], rax

; 137  :         Py_INCREF(v);

  00349	48 8b 4c 24 78	 mov	 rcx, QWORD PTR v$20442[rsp]
  0034e	e8 00 00 00 00	 call	 _Py_IncRef

; 138  :         res->ob_item[i] = v;

  00353	48 8b 44 24 30	 mov	 rax, QWORD PTR res$[rsp]
  00358	48 8b 4c 24 40	 mov	 rcx, QWORD PTR i$[rsp]
  0035d	48 8b 54 24 78	 mov	 rdx, QWORD PTR v$20442[rsp]
  00362	48 89 54 c8 70	 mov	 QWORD PTR [rax+rcx*8+112], rdx

; 139  :     }

  00367	e9 6c ff ff ff	 jmp	 $LN7@structseq_@2
$LN6@structseq_@2:

; 140  :     for (; i < max_len; ++i) {

  0036c	eb 0d		 jmp	 SHORT $LN5@structseq_@2
$LN4@structseq_@2:
  0036e	48 8b 44 24 40	 mov	 rax, QWORD PTR i$[rsp]
  00373	48 ff c0	 inc	 rax
  00376	48 89 44 24 40	 mov	 QWORD PTR i$[rsp], rax
$LN5@structseq_@2:
  0037b	48 8b 44 24 58	 mov	 rax, QWORD PTR max_len$[rsp]
  00380	48 39 44 24 40	 cmp	 QWORD PTR i$[rsp], rax
  00385	7d 77		 jge	 SHORT $LN3@structseq_@2

; 141  :         if (dict && (ob = PyDict_GetItemString(
; 142  :             dict, type->tp_members[i-n_unnamed_fields].name))) {

  00387	48 83 7c 24 50
	00		 cmp	 QWORD PTR dict$[rsp], 0
  0038d	74 40		 je	 SHORT $LN2@structseq_@2
  0038f	48 8b 44 24 38	 mov	 rax, QWORD PTR n_unnamed_fields$[rsp]
  00394	48 8b 4c 24 40	 mov	 rcx, QWORD PTR i$[rsp]
  00399	48 2b c8	 sub	 rcx, rax
  0039c	48 8b c1	 mov	 rax, rcx
  0039f	48 6b c0 28	 imul	 rax, 40			; 00000028H
  003a3	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR type$[rsp]
  003ab	48 8b 89 48 01
	00 00		 mov	 rcx, QWORD PTR [rcx+328]
  003b2	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  003b6	48 8b 4c 24 50	 mov	 rcx, QWORD PTR dict$[rsp]
  003bb	e8 00 00 00 00	 call	 PyDict_GetItemString
  003c0	48 89 44 24 60	 mov	 QWORD PTR ob$[rsp], rax
  003c5	48 83 7c 24 60
	00		 cmp	 QWORD PTR ob$[rsp], 0
  003cb	74 02		 je	 SHORT $LN2@structseq_@2

; 143  :         }
; 144  :         else {

  003cd	eb 0c		 jmp	 SHORT $LN1@structseq_@2
$LN2@structseq_@2:

; 145  :             ob = Py_None;

  003cf	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  003d6	48 89 44 24 60	 mov	 QWORD PTR ob$[rsp], rax
$LN1@structseq_@2:

; 146  :         }
; 147  :         Py_INCREF(ob);

  003db	48 8b 4c 24 60	 mov	 rcx, QWORD PTR ob$[rsp]
  003e0	e8 00 00 00 00	 call	 _Py_IncRef

; 148  :         res->ob_item[i] = ob;

  003e5	48 8b 44 24 30	 mov	 rax, QWORD PTR res$[rsp]
  003ea	48 8b 4c 24 40	 mov	 rcx, QWORD PTR i$[rsp]
  003ef	48 8b 54 24 60	 mov	 rdx, QWORD PTR ob$[rsp]
  003f4	48 89 54 c8 70	 mov	 QWORD PTR [rax+rcx*8+112], rdx

; 149  :     }

  003f9	e9 70 ff ff ff	 jmp	 $LN4@structseq_@2
$LN3@structseq_@2:

; 150  : 
; 151  :     Py_DECREF(arg);

  003fe	48 8b 4c 24 48	 mov	 rcx, QWORD PTR arg$[rsp]
  00403	e8 00 00 00 00	 call	 _Py_DecRef

; 152  :     return (PyObject*) res;

  00408	48 8b 44 24 30	 mov	 rax, QWORD PTR res$[rsp]
$LN18@structseq_@2:

; 153  : }

  0040d	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  00414	c3		 ret	 0
structseq_new ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN7
	DD	imagerel $LN7+132
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 6d		 jne	 SHORT $LN2@Py_IncRef
  00012	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0001a	4c 8b 4c 24 40	 mov	 r9, QWORD PTR op$[rsp]
  0001f	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_Guard
  00038	85 c0		 test	 eax, eax
  0003a	75 12		 jne	 SHORT $LN1@Py_IncRef
  0003c	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  00041	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00045	48 83 e0 20	 and	 rax, 32			; 00000020H
  00049	48 85 c0	 test	 rax, rax
  0004c	74 31		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;

  0004e	e8 00 00 00 00	 call	 _Py_PXCTX
  00053	85 c0		 test	 eax, eax
  00055	74 02		 je	 SHORT $LN5@Py_IncRef
  00057	eb 11		 jmp	 SHORT $LN6@Py_IncRef
$LN5@Py_IncRef:
  00059	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00060	48 ff c0	 inc	 rax
  00063	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN6@Py_IncRef:

; 907  :         (((PyObject*)(op))->ob_refcnt++);

  0006a	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  0006f	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00073	48 ff c0	 inc	 rax
  00076	48 8b 4c 24 40	 mov	 rcx, QWORD PTR op$[rsp]
  0007b	48 89 41 50	 mov	 QWORD PTR [rcx+80], rax
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  0007f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00083	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_03KHICJKCI@?4?4?4?$AA@			; `string'
PUBLIC	??_C@_0DM@IDAGGGPA@In?5structseq_repr?$CI?$CJ?0?5member?5?$CFd?5n@ ; `string'
EXTRN	PyUnicode_FromString:PROC
EXTRN	strcpy:PROC
EXTRN	PyUnicode_AsUTF8:PROC
EXTRN	PyObject_Repr:PROC
EXTRN	PyExc_SystemError:QWORD
EXTRN	__imp_strncpy:PROC
EXTRN	strlen:PROC
;	COMDAT pdata
; File c:\src\pyparallel\objects\structseq.c
pdata	SEGMENT
$pdata$structseq_repr DD imagerel structseq_repr
	DD	imagerel structseq_repr+856
	DD	imagerel $unwind$structseq_repr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$structseq_repr DD 020c01H
	DD	051010cH
xdata	ENDS
;	COMDAT ??_C@_03KHICJKCI@?4?4?4?$AA@
CONST	SEGMENT
??_C@_03KHICJKCI@?4?4?4?$AA@ DB '...', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@IDAGGGPA@In?5structseq_repr?$CI?$CJ?0?5member?5?$CFd?5n@
CONST	SEGMENT
??_C@_0DM@IDAGGGPA@In?5structseq_repr?$CI?$CJ?0?5member?5?$CFd?5n@ DB 'In'
	DB	' structseq_repr(), member %d name is NULL for type %.500s', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT structseq_repr
_TEXT	SEGMENT
pbuf$ = 32
i$ = 40
endofbuf$ = 48
len$ = 56
buf$ = 64
typ$ = 576
removelast$ = 584
cname$20475 = 592
crepr$20476 = 600
val$20473 = 608
repr$20474 = 616
tv73 = 624
tv137 = 632
obj$ = 656
structseq_repr PROC					; COMDAT

; 158  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 81 ec 88 02
	00 00		 sub	 rsp, 648		; 00000288H

; 159  :     /* buffer and type size were chosen well considered. */
; 160  : #define REPR_BUFFER_SIZE 512
; 161  : #define TYPE_MAXSIZE 100
; 162  : 
; 163  :     PyTypeObject *typ = Py_TYPE(obj);

  0000c	48 8b 84 24 90
	02 00 00	 mov	 rax, QWORD PTR obj$[rsp]
  00014	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00018	48 89 84 24 40
	02 00 00	 mov	 QWORD PTR typ$[rsp], rax

; 164  :     int i, removelast = 0;

  00020	c7 84 24 48 02
	00 00 00 00 00
	00		 mov	 DWORD PTR removelast$[rsp], 0

; 165  :     Py_ssize_t len;
; 166  :     char buf[REPR_BUFFER_SIZE];
; 167  :     char *endofbuf, *pbuf = buf;

  0002b	48 8d 44 24 40	 lea	 rax, QWORD PTR buf$[rsp]
  00030	48 89 44 24 20	 mov	 QWORD PTR pbuf$[rsp], rax

; 168  : 
; 169  :     /* pointer to end of writeable buffer; safes space for "...)\0" */
; 170  :     endofbuf= &buf[REPR_BUFFER_SIZE-5];

  00035	48 8d 84 24 3b
	02 00 00	 lea	 rax, QWORD PTR buf$[rsp+507]
  0003d	48 89 44 24 30	 mov	 QWORD PTR endofbuf$[rsp], rax

; 171  : 
; 172  :     /* "typename(", limited to  TYPE_MAXSIZE */
; 173  :     len = strlen(typ->tp_name) > TYPE_MAXSIZE ? TYPE_MAXSIZE :
; 174  :                             strlen(typ->tp_name);

  00042	48 8b 84 24 40
	02 00 00	 mov	 rax, QWORD PTR typ$[rsp]
  0004a	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  0004e	e8 00 00 00 00	 call	 strlen
  00053	48 83 f8 64	 cmp	 rax, 100		; 00000064H
  00057	76 0e		 jbe	 SHORT $LN12@structseq_@3
  00059	48 c7 84 24 70
	02 00 00 64 00
	00 00		 mov	 QWORD PTR tv73[rsp], 100 ; 00000064H
  00065	eb 19		 jmp	 SHORT $LN13@structseq_@3
$LN12@structseq_@3:
  00067	48 8b 84 24 40
	02 00 00	 mov	 rax, QWORD PTR typ$[rsp]
  0006f	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  00073	e8 00 00 00 00	 call	 strlen
  00078	48 89 84 24 70
	02 00 00	 mov	 QWORD PTR tv73[rsp], rax
$LN13@structseq_@3:
  00080	48 8b 84 24 70
	02 00 00	 mov	 rax, QWORD PTR tv73[rsp]
  00088	48 89 44 24 38	 mov	 QWORD PTR len$[rsp], rax

; 175  :     strncpy(pbuf, typ->tp_name, len);

  0008d	4c 8b 44 24 38	 mov	 r8, QWORD PTR len$[rsp]
  00092	48 8b 84 24 40
	02 00 00	 mov	 rax, QWORD PTR typ$[rsp]
  0009a	48 8b 50 70	 mov	 rdx, QWORD PTR [rax+112]
  0009e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR pbuf$[rsp]
  000a3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_strncpy

; 176  :     pbuf += len;

  000a9	48 8b 44 24 38	 mov	 rax, QWORD PTR len$[rsp]
  000ae	48 8b 4c 24 20	 mov	 rcx, QWORD PTR pbuf$[rsp]
  000b3	48 03 c8	 add	 rcx, rax
  000b6	48 8b c1	 mov	 rax, rcx
  000b9	48 89 44 24 20	 mov	 QWORD PTR pbuf$[rsp], rax

; 177  :     *pbuf++ = '(';

  000be	48 8b 44 24 20	 mov	 rax, QWORD PTR pbuf$[rsp]
  000c3	c6 00 28	 mov	 BYTE PTR [rax], 40	; 00000028H
  000c6	48 8b 44 24 20	 mov	 rax, QWORD PTR pbuf$[rsp]
  000cb	48 ff c0	 inc	 rax
  000ce	48 89 44 24 20	 mov	 QWORD PTR pbuf$[rsp], rax

; 178  : 
; 179  :     for (i=0; i < VISIBLE_SIZE(obj); i++) {

  000d3	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  000db	eb 0a		 jmp	 SHORT $LN9@structseq_@3
$LN8@structseq_@3:
  000dd	8b 44 24 28	 mov	 eax, DWORD PTR i$[rsp]
  000e1	ff c0		 inc	 eax
  000e3	89 44 24 28	 mov	 DWORD PTR i$[rsp], eax
$LN9@structseq_@3:
  000e7	48 63 44 24 28	 movsxd	 rax, DWORD PTR i$[rsp]
  000ec	48 8b 8c 24 90
	02 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  000f4	48 3b 41 60	 cmp	 rax, QWORD PTR [rcx+96]
  000f8	0f 8d 13 02 00
	00		 jge	 $LN7@structseq_@3

; 180  :         PyObject *val, *repr;
; 181  :         char *cname, *crepr;
; 182  : 
; 183  :         cname = typ->tp_members[i].name;

  000fe	48 63 44 24 28	 movsxd	 rax, DWORD PTR i$[rsp]
  00103	48 6b c0 28	 imul	 rax, 40			; 00000028H
  00107	48 8b 8c 24 40
	02 00 00	 mov	 rcx, QWORD PTR typ$[rsp]
  0010f	48 8b 89 48 01
	00 00		 mov	 rcx, QWORD PTR [rcx+328]
  00116	48 8b 04 08	 mov	 rax, QWORD PTR [rax+rcx]
  0011a	48 89 84 24 50
	02 00 00	 mov	 QWORD PTR cname$20475[rsp], rax

; 184  :         if (cname == NULL) {

  00122	48 83 bc 24 50
	02 00 00 00	 cmp	 QWORD PTR cname$20475[rsp], 0
  0012b	75 2b		 jne	 SHORT $LN6@structseq_@3

; 185  :             PyErr_Format(PyExc_SystemError, "In structseq_repr(), member %d name is NULL"
; 186  :                          " for type %.500s", i, typ->tp_name);

  0012d	48 8b 84 24 40
	02 00 00	 mov	 rax, QWORD PTR typ$[rsp]
  00135	4c 8b 48 70	 mov	 r9, QWORD PTR [rax+112]
  00139	44 8b 44 24 28	 mov	 r8d, DWORD PTR i$[rsp]
  0013e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DM@IDAGGGPA@In?5structseq_repr?$CI?$CJ?0?5member?5?$CFd?5n@
  00145	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SystemError
  0014c	e8 00 00 00 00	 call	 PyErr_Format

; 187  :             return NULL;

  00151	33 c0		 xor	 eax, eax
  00153	e9 f8 01 00 00	 jmp	 $LN10@structseq_@3
$LN6@structseq_@3:

; 188  :         }
; 189  :         val = PyStructSequence_GET_ITEM(obj, i);

  00158	48 63 44 24 28	 movsxd	 rax, DWORD PTR i$[rsp]
  0015d	48 8b 8c 24 90
	02 00 00	 mov	 rcx, QWORD PTR obj$[rsp]
  00165	48 8b 44 c1 70	 mov	 rax, QWORD PTR [rcx+rax*8+112]
  0016a	48 89 84 24 60
	02 00 00	 mov	 QWORD PTR val$20473[rsp], rax

; 190  :         repr = PyObject_Repr(val);

  00172	48 8b 8c 24 60
	02 00 00	 mov	 rcx, QWORD PTR val$20473[rsp]
  0017a	e8 00 00 00 00	 call	 PyObject_Repr
  0017f	48 89 84 24 68
	02 00 00	 mov	 QWORD PTR repr$20474[rsp], rax

; 191  :         if (repr == NULL)

  00187	48 83 bc 24 68
	02 00 00 00	 cmp	 QWORD PTR repr$20474[rsp], 0
  00190	75 07		 jne	 SHORT $LN5@structseq_@3

; 192  :             return NULL;

  00192	33 c0		 xor	 eax, eax
  00194	e9 b7 01 00 00	 jmp	 $LN10@structseq_@3
$LN5@structseq_@3:

; 193  :         crepr = _PyUnicode_AsString(repr);

  00199	48 8b 8c 24 68
	02 00 00	 mov	 rcx, QWORD PTR repr$20474[rsp]
  001a1	e8 00 00 00 00	 call	 PyUnicode_AsUTF8
  001a6	48 89 84 24 58
	02 00 00	 mov	 QWORD PTR crepr$20476[rsp], rax

; 194  :         if (crepr == NULL) {

  001ae	48 83 bc 24 58
	02 00 00 00	 cmp	 QWORD PTR crepr$20476[rsp], 0
  001b7	75 14		 jne	 SHORT $LN4@structseq_@3

; 195  :             Py_DECREF(repr);

  001b9	48 8b 8c 24 68
	02 00 00	 mov	 rcx, QWORD PTR repr$20474[rsp]
  001c1	e8 00 00 00 00	 call	 _Py_DecRef

; 196  :             return NULL;

  001c6	33 c0		 xor	 eax, eax
  001c8	e9 83 01 00 00	 jmp	 $LN10@structseq_@3
$LN4@structseq_@3:

; 197  :         }
; 198  : 
; 199  :         /* + 3: keep space for "=" and ", " */
; 200  :         len = strlen(cname) + strlen(crepr) + 3;

  001cd	48 8b 8c 24 50
	02 00 00	 mov	 rcx, QWORD PTR cname$20475[rsp]
  001d5	e8 00 00 00 00	 call	 strlen
  001da	48 89 84 24 78
	02 00 00	 mov	 QWORD PTR tv137[rsp], rax
  001e2	48 8b 8c 24 58
	02 00 00	 mov	 rcx, QWORD PTR crepr$20476[rsp]
  001ea	e8 00 00 00 00	 call	 strlen
  001ef	48 8b 8c 24 78
	02 00 00	 mov	 rcx, QWORD PTR tv137[rsp]
  001f7	48 8d 44 01 03	 lea	 rax, QWORD PTR [rcx+rax+3]
  001fc	48 89 44 24 38	 mov	 QWORD PTR len$[rsp], rax

; 201  :         if ((pbuf+len) <= endofbuf) {

  00201	48 8b 44 24 38	 mov	 rax, QWORD PTR len$[rsp]
  00206	48 8b 4c 24 20	 mov	 rcx, QWORD PTR pbuf$[rsp]
  0020b	48 03 c8	 add	 rcx, rax
  0020e	48 8b c1	 mov	 rax, rcx
  00211	48 3b 44 24 30	 cmp	 rax, QWORD PTR endofbuf$[rsp]
  00216	0f 87 b7 00 00
	00		 ja	 $LN3@structseq_@3

; 202  :             strcpy(pbuf, cname);

  0021c	48 8b 94 24 50
	02 00 00	 mov	 rdx, QWORD PTR cname$20475[rsp]
  00224	48 8b 4c 24 20	 mov	 rcx, QWORD PTR pbuf$[rsp]
  00229	e8 00 00 00 00	 call	 strcpy

; 203  :             pbuf += strlen(cname);

  0022e	48 8b 8c 24 50
	02 00 00	 mov	 rcx, QWORD PTR cname$20475[rsp]
  00236	e8 00 00 00 00	 call	 strlen
  0023b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR pbuf$[rsp]
  00240	48 03 c8	 add	 rcx, rax
  00243	48 8b c1	 mov	 rax, rcx
  00246	48 89 44 24 20	 mov	 QWORD PTR pbuf$[rsp], rax

; 204  :             *pbuf++ = '=';

  0024b	48 8b 44 24 20	 mov	 rax, QWORD PTR pbuf$[rsp]
  00250	c6 00 3d	 mov	 BYTE PTR [rax], 61	; 0000003dH
  00253	48 8b 44 24 20	 mov	 rax, QWORD PTR pbuf$[rsp]
  00258	48 ff c0	 inc	 rax
  0025b	48 89 44 24 20	 mov	 QWORD PTR pbuf$[rsp], rax

; 205  :             strcpy(pbuf, crepr);

  00260	48 8b 94 24 58
	02 00 00	 mov	 rdx, QWORD PTR crepr$20476[rsp]
  00268	48 8b 4c 24 20	 mov	 rcx, QWORD PTR pbuf$[rsp]
  0026d	e8 00 00 00 00	 call	 strcpy

; 206  :             pbuf += strlen(crepr);

  00272	48 8b 8c 24 58
	02 00 00	 mov	 rcx, QWORD PTR crepr$20476[rsp]
  0027a	e8 00 00 00 00	 call	 strlen
  0027f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR pbuf$[rsp]
  00284	48 03 c8	 add	 rcx, rax
  00287	48 8b c1	 mov	 rax, rcx
  0028a	48 89 44 24 20	 mov	 QWORD PTR pbuf$[rsp], rax

; 207  :             *pbuf++ = ',';

  0028f	48 8b 44 24 20	 mov	 rax, QWORD PTR pbuf$[rsp]
  00294	c6 00 2c	 mov	 BYTE PTR [rax], 44	; 0000002cH
  00297	48 8b 44 24 20	 mov	 rax, QWORD PTR pbuf$[rsp]
  0029c	48 ff c0	 inc	 rax
  0029f	48 89 44 24 20	 mov	 QWORD PTR pbuf$[rsp], rax

; 208  :             *pbuf++ = ' ';

  002a4	48 8b 44 24 20	 mov	 rax, QWORD PTR pbuf$[rsp]
  002a9	c6 00 20	 mov	 BYTE PTR [rax], 32	; 00000020H
  002ac	48 8b 44 24 20	 mov	 rax, QWORD PTR pbuf$[rsp]
  002b1	48 ff c0	 inc	 rax
  002b4	48 89 44 24 20	 mov	 QWORD PTR pbuf$[rsp], rax

; 209  :             removelast = 1;

  002b9	c7 84 24 48 02
	00 00 01 00 00
	00		 mov	 DWORD PTR removelast$[rsp], 1

; 210  :             Py_DECREF(repr);

  002c4	48 8b 8c 24 68
	02 00 00	 mov	 rcx, QWORD PTR repr$20474[rsp]
  002cc	e8 00 00 00 00	 call	 _Py_DecRef

; 211  :         }
; 212  :         else {

  002d1	eb 39		 jmp	 SHORT $LN2@structseq_@3
$LN3@structseq_@3:

; 213  :             strcpy(pbuf, "...");

  002d3	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_03KHICJKCI@?4?4?4?$AA@
  002da	48 8b 4c 24 20	 mov	 rcx, QWORD PTR pbuf$[rsp]
  002df	e8 00 00 00 00	 call	 strcpy

; 214  :             pbuf += 3;

  002e4	48 8b 44 24 20	 mov	 rax, QWORD PTR pbuf$[rsp]
  002e9	48 83 c0 03	 add	 rax, 3
  002ed	48 89 44 24 20	 mov	 QWORD PTR pbuf$[rsp], rax

; 215  :             removelast = 0;

  002f2	c7 84 24 48 02
	00 00 00 00 00
	00		 mov	 DWORD PTR removelast$[rsp], 0

; 216  :             Py_DECREF(repr);

  002fd	48 8b 8c 24 68
	02 00 00	 mov	 rcx, QWORD PTR repr$20474[rsp]
  00305	e8 00 00 00 00	 call	 _Py_DecRef

; 217  :             break;

  0030a	eb 05		 jmp	 SHORT $LN7@structseq_@3
$LN2@structseq_@3:

; 218  :         }
; 219  :     }

  0030c	e9 cc fd ff ff	 jmp	 $LN8@structseq_@3
$LN7@structseq_@3:

; 220  :     if (removelast) {

  00311	83 bc 24 48 02
	00 00 00	 cmp	 DWORD PTR removelast$[rsp], 0
  00319	74 0e		 je	 SHORT $LN1@structseq_@3

; 221  :         /* overwrite last ", " */
; 222  :         pbuf-=2;

  0031b	48 8b 44 24 20	 mov	 rax, QWORD PTR pbuf$[rsp]
  00320	48 83 e8 02	 sub	 rax, 2
  00324	48 89 44 24 20	 mov	 QWORD PTR pbuf$[rsp], rax
$LN1@structseq_@3:

; 223  :     }
; 224  :     *pbuf++ = ')';

  00329	48 8b 44 24 20	 mov	 rax, QWORD PTR pbuf$[rsp]
  0032e	c6 00 29	 mov	 BYTE PTR [rax], 41	; 00000029H
  00331	48 8b 44 24 20	 mov	 rax, QWORD PTR pbuf$[rsp]
  00336	48 ff c0	 inc	 rax
  00339	48 89 44 24 20	 mov	 QWORD PTR pbuf$[rsp], rax

; 225  :     *pbuf = '\0';

  0033e	48 8b 44 24 20	 mov	 rax, QWORD PTR pbuf$[rsp]
  00343	c6 00 00	 mov	 BYTE PTR [rax], 0

; 226  : 
; 227  :     return PyUnicode_FromString(buf);

  00346	48 8d 4c 24 40	 lea	 rcx, QWORD PTR buf$[rsp]
  0034b	e8 00 00 00 00	 call	 PyUnicode_FromString
$LN10@structseq_@3:

; 228  : }

  00350	48 81 c4 88 02
	00 00		 add	 rsp, 648		; 00000288H
  00357	c3		 ret	 0
structseq_repr ENDP
_TEXT	ENDS
PUBLIC	??_C@_07IDPMLOMJ@?$CIO?$CIOO?$CJ?$CJ?$AA@	; `string'
EXTRN	Py_BuildValue:PROC
EXTRN	PyDict_SetItemString:PROC
EXTRN	PyDict_New:PROC
EXTRN	PyTuple_New:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$structseq_reduce DD imagerel structseq_reduce
	DD	imagerel structseq_reduce+419
	DD	imagerel $unwind$structseq_reduce
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$structseq_reduce DD 010901H
	DD	0c209H
xdata	ENDS
;	COMDAT ??_C@_07IDPMLOMJ@?$CIO?$CIOO?$CJ?$CJ?$AA@
CONST	SEGMENT
??_C@_07IDPMLOMJ@?$CIO?$CIOO?$CJ?$CJ?$AA@ DB '(O(OO))', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT structseq_reduce
_TEXT	SEGMENT
n_visible_fields$ = 32
n_fields$ = 40
i$ = 48
n_unnamed_fields$ = 56
dict$ = 64
tup$ = 72
result$ = 80
n$20522 = 88
self$ = 112
structseq_reduce PROC					; COMDAT

; 232  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 233  :     PyObject* tup;
; 234  :     PyObject* dict;
; 235  :     PyObject* result;
; 236  :     Py_ssize_t n_fields, n_visible_fields, n_unnamed_fields;
; 237  :     int i;
; 238  : 
; 239  :     n_fields = REAL_SIZE(self);

  00009	48 8b 44 24 70	 mov	 rax, QWORD PTR self$[rsp]
  0000e	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00012	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:real_length_key
  00019	48 8b 88 60 01
	00 00		 mov	 rcx, QWORD PTR [rax+352]
  00020	e8 00 00 00 00	 call	 PyDict_GetItemString
  00025	48 8b c8	 mov	 rcx, rax
  00028	e8 00 00 00 00	 call	 PyLong_AsLong
  0002d	48 98		 cdqe
  0002f	48 89 44 24 28	 mov	 QWORD PTR n_fields$[rsp], rax

; 240  :     n_visible_fields = VISIBLE_SIZE(self);

  00034	48 8b 44 24 70	 mov	 rax, QWORD PTR self$[rsp]
  00039	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  0003d	48 89 44 24 20	 mov	 QWORD PTR n_visible_fields$[rsp], rax

; 241  :     n_unnamed_fields = UNNAMED_FIELDS(self);

  00042	48 8b 44 24 70	 mov	 rax, QWORD PTR self$[rsp]
  00047	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0004b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:unnamed_fields_key
  00052	48 8b 88 60 01
	00 00		 mov	 rcx, QWORD PTR [rax+352]
  00059	e8 00 00 00 00	 call	 PyDict_GetItemString
  0005e	48 8b c8	 mov	 rcx, rax
  00061	e8 00 00 00 00	 call	 PyLong_AsLong
  00066	48 98		 cdqe
  00068	48 89 44 24 38	 mov	 QWORD PTR n_unnamed_fields$[rsp], rax

; 242  :     tup = PyTuple_New(n_visible_fields);

  0006d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR n_visible_fields$[rsp]
  00072	e8 00 00 00 00	 call	 PyTuple_New
  00077	48 89 44 24 48	 mov	 QWORD PTR tup$[rsp], rax

; 243  :     if (!tup) {

  0007c	48 83 7c 24 48
	00		 cmp	 QWORD PTR tup$[rsp], 0
  00082	75 07		 jne	 SHORT $LN8@structseq_@4

; 244  :         return NULL;

  00084	33 c0		 xor	 eax, eax
  00086	e9 13 01 00 00	 jmp	 $LN9@structseq_@4
$LN8@structseq_@4:

; 245  :     }
; 246  : 
; 247  :     dict = PyDict_New();

  0008b	e8 00 00 00 00	 call	 PyDict_New
  00090	48 89 44 24 40	 mov	 QWORD PTR dict$[rsp], rax

; 248  :     if (!dict) {

  00095	48 83 7c 24 40
	00		 cmp	 QWORD PTR dict$[rsp], 0
  0009b	75 11		 jne	 SHORT $LN7@structseq_@4

; 249  :         Py_DECREF(tup);

  0009d	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tup$[rsp]
  000a2	e8 00 00 00 00	 call	 _Py_DecRef

; 250  :         return NULL;

  000a7	33 c0		 xor	 eax, eax
  000a9	e9 f0 00 00 00	 jmp	 $LN9@structseq_@4
$LN7@structseq_@4:

; 251  :     }
; 252  : 
; 253  :     for (i = 0; i < n_visible_fields; i++) {

  000ae	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  000b6	eb 0a		 jmp	 SHORT $LN6@structseq_@4
$LN5@structseq_@4:
  000b8	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  000bc	ff c0		 inc	 eax
  000be	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN6@structseq_@4:
  000c2	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$[rsp]
  000c7	48 3b 44 24 20	 cmp	 rax, QWORD PTR n_visible_fields$[rsp]
  000cc	7d 34		 jge	 SHORT $LN4@structseq_@4

; 254  :         Py_INCREF(self->ob_item[i]);

  000ce	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$[rsp]
  000d3	48 8b 4c 24 70	 mov	 rcx, QWORD PTR self$[rsp]
  000d8	48 8b 4c c1 70	 mov	 rcx, QWORD PTR [rcx+rax*8+112]
  000dd	e8 00 00 00 00	 call	 _Py_IncRef

; 255  :         PyTuple_SET_ITEM(tup, i, self->ob_item[i]);

  000e2	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$[rsp]
  000e7	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR i$[rsp]
  000ec	48 8b 54 24 48	 mov	 rdx, QWORD PTR tup$[rsp]
  000f1	4c 8b 44 24 70	 mov	 r8, QWORD PTR self$[rsp]
  000f6	49 8b 44 c0 70	 mov	 rax, QWORD PTR [r8+rax*8+112]
  000fb	48 89 44 ca 70	 mov	 QWORD PTR [rdx+rcx*8+112], rax

; 256  :     }

  00100	eb b6		 jmp	 SHORT $LN5@structseq_@4
$LN4@structseq_@4:

; 257  : 
; 258  :     for (; i < n_fields; i++) {

  00102	eb 0a		 jmp	 SHORT $LN3@structseq_@4
$LN2@structseq_@4:
  00104	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  00108	ff c0		 inc	 eax
  0010a	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN3@structseq_@4:
  0010e	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$[rsp]
  00113	48 3b 44 24 28	 cmp	 rax, QWORD PTR n_fields$[rsp]
  00118	7d 47		 jge	 SHORT $LN1@structseq_@4

; 259  :         char *n = Py_TYPE(self)->tp_members[i-n_unnamed_fields].name;

  0011a	48 8b 44 24 70	 mov	 rax, QWORD PTR self$[rsp]
  0011f	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00123	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR i$[rsp]
  00128	48 2b 4c 24 38	 sub	 rcx, QWORD PTR n_unnamed_fields$[rsp]
  0012d	48 6b c9 28	 imul	 rcx, 40			; 00000028H
  00131	48 8b 80 48 01
	00 00		 mov	 rax, QWORD PTR [rax+328]
  00138	48 8b 04 01	 mov	 rax, QWORD PTR [rcx+rax]
  0013c	48 89 44 24 58	 mov	 QWORD PTR n$20522[rsp], rax

; 260  :         PyDict_SetItemString(dict, n,
; 261  :                              self->ob_item[i]);

  00141	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$[rsp]
  00146	48 8b 4c 24 70	 mov	 rcx, QWORD PTR self$[rsp]
  0014b	4c 8b 44 c1 70	 mov	 r8, QWORD PTR [rcx+rax*8+112]
  00150	48 8b 54 24 58	 mov	 rdx, QWORD PTR n$20522[rsp]
  00155	48 8b 4c 24 40	 mov	 rcx, QWORD PTR dict$[rsp]
  0015a	e8 00 00 00 00	 call	 PyDict_SetItemString

; 262  :     }

  0015f	eb a3		 jmp	 SHORT $LN2@structseq_@4
$LN1@structseq_@4:

; 263  : 
; 264  :     result = Py_BuildValue("(O(OO))", Py_TYPE(self), tup, dict);

  00161	4c 8b 4c 24 40	 mov	 r9, QWORD PTR dict$[rsp]
  00166	4c 8b 44 24 48	 mov	 r8, QWORD PTR tup$[rsp]
  0016b	48 8b 44 24 70	 mov	 rax, QWORD PTR self$[rsp]
  00170	48 8b 50 58	 mov	 rdx, QWORD PTR [rax+88]
  00174	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07IDPMLOMJ@?$CIO?$CIOO?$CJ?$CJ?$AA@
  0017b	e8 00 00 00 00	 call	 Py_BuildValue
  00180	48 89 44 24 50	 mov	 QWORD PTR result$[rsp], rax

; 265  : 
; 266  :     Py_DECREF(tup);

  00185	48 8b 4c 24 48	 mov	 rcx, QWORD PTR tup$[rsp]
  0018a	e8 00 00 00 00	 call	 _Py_DecRef

; 267  :     Py_DECREF(dict);

  0018f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR dict$[rsp]
  00194	e8 00 00 00 00	 call	 _Py_DecRef

; 268  : 
; 269  :     return result;

  00199	48 8b 44 24 50	 mov	 rax, QWORD PTR result$[rsp]
$LN9@structseq_@4:

; 270  : }

  0019e	48 83 c4 68	 add	 rsp, 104		; 00000068H
  001a2	c3		 ret	 0
structseq_reduce ENDP
_TEXT	ENDS
PUBLIC	PyStructSequence_InitType
EXTRN	PyLong_FromLong:PROC
EXTRN	PyType_Ready:PROC
EXTRN	_PyMem_DebugMalloc:PROC
EXTRN	_PxMem_Malloc:PROC
EXTRN	PyTuple_Type:BYTE
EXTRN	memcpy:PROC
EXTRN	_Py_ForgetReference:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyStructSequence_InitType DD imagerel $LN30
	DD	imagerel $LN30+948
	DD	imagerel $unwind$PyStructSequence_InitType
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyStructSequence_InitType DD 010e01H
	DD	0e20eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyStructSequence_InitType
_TEXT	SEGMENT
i$ = 32
dict$ = 40
n_members$ = 48
n_unnamed_members$ = 52
k$ = 56
members$ = 64
v$20601 = 72
v$20609 = 80
v$20617 = 88
tv137 = 96
tv136 = 104
type$ = 128
desc$ = 136
PyStructSequence_InitType PROC				; COMDAT

; 320  : {

$LN30:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 321  :     PyObject *dict;
; 322  :     PyMemberDef* members;
; 323  :     int n_members, n_unnamed_members, i, k;
; 324  : 
; 325  : #ifdef Py_TRACE_REFS
; 326  :     /* if the type object was chained, unchain it first
; 327  :        before overwriting its storage */
; 328  :     if (type->ob_base.ob_base._ob_next) {

  0000e	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  00016	48 83 78 40 00	 cmp	 QWORD PTR [rax+64], 0
  0001b	74 0d		 je	 SHORT $LN23@PyStructSe@2

; 329  :         _Py_ForgetReference((PyObject*)type);

  0001d	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR type$[rsp]
  00025	e8 00 00 00 00	 call	 _Py_ForgetReference
$LN23@PyStructSe@2:

; 330  :     }
; 331  : #endif
; 332  : 
; 333  :     n_unnamed_members = 0;

  0002a	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR n_unnamed_members$[rsp], 0

; 334  :     for (i = 0; desc->fields[i].name != NULL; ++i)

  00032	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  0003a	eb 0a		 jmp	 SHORT $LN22@PyStructSe@2
$LN21@PyStructSe@2:
  0003c	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  00040	ff c0		 inc	 eax
  00042	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN22@PyStructSe@2:
  00046	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  0004b	48 6b c0 10	 imul	 rax, 16
  0004f	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR desc$[rsp]
  00057	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  0005b	48 83 3c 08 00	 cmp	 QWORD PTR [rax+rcx], 0
  00060	74 2e		 je	 SHORT $LN20@PyStructSe@2

; 335  :         if (desc->fields[i].name == PyStructSequence_UnnamedField)

  00062	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  00067	48 6b c0 10	 imul	 rax, 16
  0006b	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR desc$[rsp]
  00073	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  00077	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR PyStructSequence_UnnamedField
  0007e	48 39 14 08	 cmp	 QWORD PTR [rax+rcx], rdx
  00082	75 0a		 jne	 SHORT $LN19@PyStructSe@2

; 336  :             n_unnamed_members++;

  00084	8b 44 24 34	 mov	 eax, DWORD PTR n_unnamed_members$[rsp]
  00088	ff c0		 inc	 eax
  0008a	89 44 24 34	 mov	 DWORD PTR n_unnamed_members$[rsp], eax
$LN19@PyStructSe@2:

; 337  :     n_members = i;

  0008e	eb ac		 jmp	 SHORT $LN21@PyStructSe@2
$LN20@PyStructSe@2:
  00090	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  00094	89 44 24 30	 mov	 DWORD PTR n_members$[rsp], eax

; 338  : 
; 339  :     memcpy(type, &_struct_sequence_template, sizeof(PyTypeObject));

  00098	41 b8 e0 01 00
	00		 mov	 r8d, 480		; 000001e0H
  0009e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:_struct_sequence_template
  000a5	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR type$[rsp]
  000ad	e8 00 00 00 00	 call	 memcpy

; 340  :     type->tp_base = &PyTuple_Type;

  000b2	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  000ba	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyTuple_Type
  000c1	48 89 88 58 01
	00 00		 mov	 QWORD PTR [rax+344], rcx

; 341  :     type->tp_name = desc->name;

  000c8	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  000d0	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR desc$[rsp]
  000d8	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000db	48 89 48 70	 mov	 QWORD PTR [rax+112], rcx

; 342  :     type->tp_doc = desc->doc;

  000df	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  000e7	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR desc$[rsp]
  000ef	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  000f3	48 89 88 08 01
	00 00		 mov	 QWORD PTR [rax+264], rcx

; 343  : 
; 344  :     members = PyMem_NEW(PyMemberDef, n_members-n_unnamed_members+1);

  000fa	8b 44 24 34	 mov	 eax, DWORD PTR n_unnamed_members$[rsp]
  000fe	8b 4c 24 30	 mov	 ecx, DWORD PTR n_members$[rsp]
  00102	2b c8		 sub	 ecx, eax
  00104	8b c1		 mov	 eax, ecx
  00106	ff c0		 inc	 eax
  00108	48 98		 cdqe
  0010a	48 b9 33 33 33
	33 33 33 33 03	 mov	 rcx, 230584300921369395	; 0333333333333333H
  00114	48 3b c1	 cmp	 rax, rcx
  00117	76 0b		 jbe	 SHORT $LN28@PyStructSe@2
  00119	48 c7 44 24 60
	00 00 00 00	 mov	 QWORD PTR tv137[rsp], 0
  00122	eb 57		 jmp	 SHORT $LN29@PyStructSe@2
$LN28@PyStructSe@2:
  00124	e8 00 00 00 00	 call	 _Py_PXCTX
  00129	85 c0		 test	 eax, eax
  0012b	74 23		 je	 SHORT $LN26@PyStructSe@2
  0012d	8b 44 24 34	 mov	 eax, DWORD PTR n_unnamed_members$[rsp]
  00131	8b 4c 24 30	 mov	 ecx, DWORD PTR n_members$[rsp]
  00135	2b c8		 sub	 ecx, eax
  00137	8b c1		 mov	 eax, ecx
  00139	ff c0		 inc	 eax
  0013b	48 98		 cdqe
  0013d	48 6b c0 28	 imul	 rax, 40			; 00000028H
  00141	48 8b c8	 mov	 rcx, rax
  00144	e8 00 00 00 00	 call	 _PxMem_Malloc
  00149	48 89 44 24 68	 mov	 QWORD PTR tv136[rsp], rax
  0014e	eb 21		 jmp	 SHORT $LN27@PyStructSe@2
$LN26@PyStructSe@2:
  00150	8b 44 24 34	 mov	 eax, DWORD PTR n_unnamed_members$[rsp]
  00154	8b 4c 24 30	 mov	 ecx, DWORD PTR n_members$[rsp]
  00158	2b c8		 sub	 ecx, eax
  0015a	8b c1		 mov	 eax, ecx
  0015c	ff c0		 inc	 eax
  0015e	48 98		 cdqe
  00160	48 6b c0 28	 imul	 rax, 40			; 00000028H
  00164	48 8b c8	 mov	 rcx, rax
  00167	e8 00 00 00 00	 call	 _PyMem_DebugMalloc
  0016c	48 89 44 24 68	 mov	 QWORD PTR tv136[rsp], rax
$LN27@PyStructSe@2:
  00171	48 8b 44 24 68	 mov	 rax, QWORD PTR tv136[rsp]
  00176	48 89 44 24 60	 mov	 QWORD PTR tv137[rsp], rax
$LN29@PyStructSe@2:
  0017b	48 8b 44 24 60	 mov	 rax, QWORD PTR tv137[rsp]
  00180	48 89 44 24 40	 mov	 QWORD PTR members$[rsp], rax

; 345  :     if (members == NULL)

  00185	48 83 7c 24 40
	00		 cmp	 QWORD PTR members$[rsp], 0
  0018b	75 05		 jne	 SHORT $LN18@PyStructSe@2

; 346  :         return;

  0018d	e9 1d 02 00 00	 jmp	 $LN24@PyStructSe@2
$LN18@PyStructSe@2:

; 347  : 
; 348  :     for (i = k = 0; i < n_members; ++i) {

  00192	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR k$[rsp], 0
  0019a	8b 44 24 38	 mov	 eax, DWORD PTR k$[rsp]
  0019e	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
  001a2	eb 0a		 jmp	 SHORT $LN17@PyStructSe@2
$LN16@PyStructSe@2:
  001a4	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  001a8	ff c0		 inc	 eax
  001aa	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN17@PyStructSe@2:
  001ae	8b 44 24 30	 mov	 eax, DWORD PTR n_members$[rsp]
  001b2	39 44 24 20	 cmp	 DWORD PTR i$[rsp], eax
  001b6	0f 8d d7 00 00
	00		 jge	 $LN15@PyStructSe@2

; 349  :         if (desc->fields[i].name == PyStructSequence_UnnamedField)

  001bc	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  001c1	48 6b c0 10	 imul	 rax, 16
  001c5	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR desc$[rsp]
  001cd	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  001d1	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR PyStructSequence_UnnamedField
  001d8	48 39 14 08	 cmp	 QWORD PTR [rax+rcx], rdx
  001dc	75 02		 jne	 SHORT $LN14@PyStructSe@2

; 350  :             continue;

  001de	eb c4		 jmp	 SHORT $LN16@PyStructSe@2
$LN14@PyStructSe@2:

; 351  :         members[k].name = desc->fields[i].name;

  001e0	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  001e5	48 6b c0 10	 imul	 rax, 16
  001e9	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR desc$[rsp]
  001f1	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  001f5	48 63 54 24 38	 movsxd	 rdx, DWORD PTR k$[rsp]
  001fa	48 6b d2 28	 imul	 rdx, 40			; 00000028H
  001fe	4c 8b 44 24 40	 mov	 r8, QWORD PTR members$[rsp]
  00203	48 8b 04 08	 mov	 rax, QWORD PTR [rax+rcx]
  00207	49 89 04 10	 mov	 QWORD PTR [r8+rdx], rax

; 352  :         members[k].type = T_OBJECT;

  0020b	48 63 44 24 38	 movsxd	 rax, DWORD PTR k$[rsp]
  00210	48 6b c0 28	 imul	 rax, 40			; 00000028H
  00214	48 8b 4c 24 40	 mov	 rcx, QWORD PTR members$[rsp]
  00219	c7 44 01 08 06
	00 00 00	 mov	 DWORD PTR [rcx+rax+8], 6

; 353  :         members[k].offset = offsetof(PyStructSequence, ob_item)
; 354  :           + i * sizeof(PyObject*);

  00221	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  00226	48 8d 04 c5 70
	00 00 00	 lea	 rax, QWORD PTR [rax*8+112]
  0022e	48 63 4c 24 38	 movsxd	 rcx, DWORD PTR k$[rsp]
  00233	48 6b c9 28	 imul	 rcx, 40			; 00000028H
  00237	48 8b 54 24 40	 mov	 rdx, QWORD PTR members$[rsp]
  0023c	48 89 44 0a 10	 mov	 QWORD PTR [rdx+rcx+16], rax

; 355  :         members[k].flags = READONLY;

  00241	48 63 44 24 38	 movsxd	 rax, DWORD PTR k$[rsp]
  00246	48 6b c0 28	 imul	 rax, 40			; 00000028H
  0024a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR members$[rsp]
  0024f	c7 44 01 18 01
	00 00 00	 mov	 DWORD PTR [rcx+rax+24], 1

; 356  :         members[k].doc = desc->fields[i].doc;

  00257	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  0025c	48 6b c0 10	 imul	 rax, 16
  00260	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR desc$[rsp]
  00268	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  0026c	48 63 54 24 38	 movsxd	 rdx, DWORD PTR k$[rsp]
  00271	48 6b d2 28	 imul	 rdx, 40			; 00000028H
  00275	4c 8b 44 24 40	 mov	 r8, QWORD PTR members$[rsp]
  0027a	48 8b 44 01 08	 mov	 rax, QWORD PTR [rcx+rax+8]
  0027f	49 89 44 10 20	 mov	 QWORD PTR [r8+rdx+32], rax

; 357  :         k++;

  00284	8b 44 24 38	 mov	 eax, DWORD PTR k$[rsp]
  00288	ff c0		 inc	 eax
  0028a	89 44 24 38	 mov	 DWORD PTR k$[rsp], eax

; 358  :     }

  0028e	e9 11 ff ff ff	 jmp	 $LN16@PyStructSe@2
$LN15@PyStructSe@2:

; 359  :     members[k].name = NULL;

  00293	48 63 44 24 38	 movsxd	 rax, DWORD PTR k$[rsp]
  00298	48 6b c0 28	 imul	 rax, 40			; 00000028H
  0029c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR members$[rsp]
  002a1	48 c7 04 01 00
	00 00 00	 mov	 QWORD PTR [rcx+rax], 0

; 360  : 
; 361  :     type->tp_members = members;

  002a9	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  002b1	48 8b 4c 24 40	 mov	 rcx, QWORD PTR members$[rsp]
  002b6	48 89 88 48 01
	00 00		 mov	 QWORD PTR [rax+328], rcx

; 362  : 
; 363  :     if (PyType_Ready(type) < 0)

  002bd	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR type$[rsp]
  002c5	e8 00 00 00 00	 call	 PyType_Ready
  002ca	85 c0		 test	 eax, eax
  002cc	7d 05		 jge	 SHORT $LN13@PyStructSe@2

; 364  :         return;

  002ce	e9 dc 00 00 00	 jmp	 $LN24@PyStructSe@2
$LN13@PyStructSe@2:

; 365  :     Py_INCREF(type);

  002d3	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR type$[rsp]
  002db	e8 00 00 00 00	 call	 _Py_IncRef

; 366  : 
; 367  :     dict = type->tp_dict;

  002e0	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR type$[rsp]
  002e8	48 8b 80 60 01
	00 00		 mov	 rax, QWORD PTR [rax+352]
  002ef	48 89 44 24 28	 mov	 QWORD PTR dict$[rsp], rax
$LN12@PyStructSe@2:

; 368  : #define SET_DICT_FROM_INT(key, value)                           \
; 369  :     do {                                                        \
; 370  :         PyObject *v = PyLong_FromLong((long) value);            \
; 371  :         if (v != NULL) {                                        \
; 372  :             PyDict_SetItemString(dict, key, v);                 \
; 373  :             Py_DECREF(v);                                       \
; 374  :         }                                                       \
; 375  :     } while (0)
; 376  : 
; 377  :     SET_DICT_FROM_INT(visible_length_key, desc->n_in_sequence);

  002f4	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR desc$[rsp]
  002fc	8b 48 18	 mov	 ecx, DWORD PTR [rax+24]
  002ff	e8 00 00 00 00	 call	 PyLong_FromLong
  00304	48 89 44 24 48	 mov	 QWORD PTR v$20601[rsp], rax
  00309	48 83 7c 24 48
	00		 cmp	 QWORD PTR v$20601[rsp], 0
  0030f	74 20		 je	 SHORT $LN9@PyStructSe@2
  00311	4c 8b 44 24 48	 mov	 r8, QWORD PTR v$20601[rsp]
  00316	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:visible_length_key
  0031d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR dict$[rsp]
  00322	e8 00 00 00 00	 call	 PyDict_SetItemString
  00327	48 8b 4c 24 48	 mov	 rcx, QWORD PTR v$20601[rsp]
  0032c	e8 00 00 00 00	 call	 _Py_DecRef
$LN9@PyStructSe@2:
  00331	33 c0		 xor	 eax, eax
  00333	85 c0		 test	 eax, eax
  00335	75 bd		 jne	 SHORT $LN12@PyStructSe@2
$LN8@PyStructSe@2:

; 378  :     SET_DICT_FROM_INT(real_length_key, n_members);

  00337	8b 4c 24 30	 mov	 ecx, DWORD PTR n_members$[rsp]
  0033b	e8 00 00 00 00	 call	 PyLong_FromLong
  00340	48 89 44 24 50	 mov	 QWORD PTR v$20609[rsp], rax
  00345	48 83 7c 24 50
	00		 cmp	 QWORD PTR v$20609[rsp], 0
  0034b	74 20		 je	 SHORT $LN5@PyStructSe@2
  0034d	4c 8b 44 24 50	 mov	 r8, QWORD PTR v$20609[rsp]
  00352	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:real_length_key
  00359	48 8b 4c 24 28	 mov	 rcx, QWORD PTR dict$[rsp]
  0035e	e8 00 00 00 00	 call	 PyDict_SetItemString
  00363	48 8b 4c 24 50	 mov	 rcx, QWORD PTR v$20609[rsp]
  00368	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@PyStructSe@2:
  0036d	33 c0		 xor	 eax, eax
  0036f	85 c0		 test	 eax, eax
  00371	75 c4		 jne	 SHORT $LN8@PyStructSe@2
$LN4@PyStructSe@2:

; 379  :     SET_DICT_FROM_INT(unnamed_fields_key, n_unnamed_members);

  00373	8b 4c 24 34	 mov	 ecx, DWORD PTR n_unnamed_members$[rsp]
  00377	e8 00 00 00 00	 call	 PyLong_FromLong
  0037c	48 89 44 24 58	 mov	 QWORD PTR v$20617[rsp], rax
  00381	48 83 7c 24 58
	00		 cmp	 QWORD PTR v$20617[rsp], 0
  00387	74 20		 je	 SHORT $LN1@PyStructSe@2
  00389	4c 8b 44 24 58	 mov	 r8, QWORD PTR v$20617[rsp]
  0038e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:unnamed_fields_key
  00395	48 8b 4c 24 28	 mov	 rcx, QWORD PTR dict$[rsp]
  0039a	e8 00 00 00 00	 call	 PyDict_SetItemString
  0039f	48 8b 4c 24 58	 mov	 rcx, QWORD PTR v$20617[rsp]
  003a4	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@PyStructSe@2:
  003a9	33 c0		 xor	 eax, eax
  003ab	85 c0		 test	 eax, eax
  003ad	75 c4		 jne	 SHORT $LN4@PyStructSe@2
$LN24@PyStructSe@2:

; 380  : }

  003af	48 83 c4 78	 add	 rsp, 120		; 00000078H
  003b3	c3		 ret	 0
PyStructSequence_InitType ENDP
_TEXT	ENDS
PUBLIC	PyStructSequence_NewType
EXTRN	PyType_GenericAlloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyStructSequence_NewType DD imagerel $LN4
	DD	imagerel $LN4+61
	DD	imagerel $unwind$PyStructSequence_NewType
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyStructSequence_NewType DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PyStructSequence_NewType
_TEXT	SEGMENT
result$ = 32
desc$ = 64
PyStructSequence_NewType PROC				; COMDAT

; 384  : {

$LN4:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 385  :     PyTypeObject *result = (PyTypeObject*)PyType_GenericAlloc(&PyType_Type, 0);

  00009	33 d2		 xor	 edx, edx
  0000b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyType_Type
  00012	e8 00 00 00 00	 call	 PyType_GenericAlloc
  00017	48 89 44 24 20	 mov	 QWORD PTR result$[rsp], rax

; 386  :     if (result != NULL) {

  0001c	48 83 7c 24 20
	00		 cmp	 QWORD PTR result$[rsp], 0
  00022	74 0f		 je	 SHORT $LN1@PyStructSe@3

; 387  :         PyStructSequence_InitType(result, desc);

  00024	48 8b 54 24 40	 mov	 rdx, QWORD PTR desc$[rsp]
  00029	48 8b 4c 24 20	 mov	 rcx, QWORD PTR result$[rsp]
  0002e	e8 00 00 00 00	 call	 PyStructSequence_InitType
$LN1@PyStructSe@3:

; 388  :     }
; 389  :     return result;

  00033	48 8b 44 24 20	 mov	 rax, QWORD PTR result$[rsp]

; 390  : }

  00038	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003c	c3		 ret	 0
PyStructSequence_NewType ENDP
_TEXT	ENDS
END
