; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0BD@GOAHCCGP@longrange_iterator?$AA@	; `string'
PUBLIC	??_C@_0P@PFENEOO@range_iterator?$AA@		; `string'
PUBLIC	??_C@_0N@MOOGCAMH@__setstate__?$AA@		; `string'
PUBLIC	??_C@_0BA@BJLPBKGK@__length_hint__?$AA@		; `string'
PUBLIC	??_C@_05CCGOGOBM@range?$AA@			; `string'
PUBLIC	??_C@_04CNBNFAL@step?$AA@			; `string'
PUBLIC	??_C@_04PEGFANN@stop?$AA@			; `string'
PUBLIC	??_C@_05FAGFPHJG@start?$AA@			; `string'
PUBLIC	??_C@_05FKHKFDID@index?$AA@			; `string'
PUBLIC	??_C@_05IOMEMJEC@count?$AA@			; `string'
PUBLIC	??_C@_0L@NNMACJIG@__reduce__?$AA@		; `string'
PUBLIC	??_C@_0N@FDLIKANA@__reversed__?$AA@		; `string'
PUBLIC	PyRange_Type
PUBLIC	PyRangeIter_Type
PUBLIC	PyLongRangeIter_Type
EXTRN	PyObject_SelfIter:PROC
EXTRN	_PyObject_DebugFree:PROC
EXTRN	PyObject_GenericGetAttr:PROC
EXTRN	PyType_Type:BYTE
;	COMDAT ??_C@_0BD@GOAHCCGP@longrange_iterator?$AA@
CONST	SEGMENT
??_C@_0BD@GOAHCCGP@longrange_iterator?$AA@ DB 'longrange_iterator', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@PFENEOO@range_iterator?$AA@
CONST	SEGMENT
??_C@_0P@PFENEOO@range_iterator?$AA@ DB 'range_iterator', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MOOGCAMH@__setstate__?$AA@
CONST	SEGMENT
??_C@_0N@MOOGCAMH@__setstate__?$AA@ DB '__setstate__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@BJLPBKGK@__length_hint__?$AA@
CONST	SEGMENT
??_C@_0BA@BJLPBKGK@__length_hint__?$AA@ DB '__length_hint__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05CCGOGOBM@range?$AA@
CONST	SEGMENT
??_C@_05CCGOGOBM@range?$AA@ DB 'range', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04CNBNFAL@step?$AA@
CONST	SEGMENT
??_C@_04CNBNFAL@step?$AA@ DB 'step', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04PEGFANN@stop?$AA@
CONST	SEGMENT
??_C@_04PEGFANN@stop?$AA@ DB 'stop', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05FAGFPHJG@start?$AA@
CONST	SEGMENT
??_C@_05FAGFPHJG@start?$AA@ DB 'start', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05FKHKFDID@index?$AA@
CONST	SEGMENT
??_C@_05FKHKFDID@index?$AA@ DB 'index', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05IOMEMJEC@count?$AA@
CONST	SEGMENT
??_C@_05IOMEMJEC@count?$AA@ DB 'count', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NNMACJIG@__reduce__?$AA@
CONST	SEGMENT
??_C@_0L@NNMACJIG@__reduce__?$AA@ DB '__reduce__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@FDLIKANA@__reversed__?$AA@
CONST	SEGMENT
??_C@_0N@FDLIKANA@__reversed__?$AA@ DB '__reversed__', 00H ; `string'
CONST	ENDS
_DATA	SEGMENT
range_doc DB	'range(stop) -> range object', 0aH, 'range(start, stop[, '
	DB	'step]) -> range object', 0aH, 0aH, 'Return a virtual sequence'
	DB	' of numbers from start to stop by step.', 00H
	ORG $+7
range_as_sequence DQ FLAT:range_length
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:range_item
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:range_contains
	ORG $+16
range_as_mapping DQ FLAT:range_length
	DQ	FLAT:range_subscript
	DQ	0000000000000000H
reverse_doc DB	'Return a reverse iterator.', 00H
	ORG $+13
count_doc DB	'rangeobject.count(value) -> integer -- return number of '
	DB	'occurrences of value', 00H
	ORG $+3
index_doc DB	'rangeobject.index(value, [start, [stop]]) -> integer -- '
	DB	'return index of value.', 0aH, 'Raise ValueError if the value '
	DB	'is not present.', 00H
	ORG $+3
range_methods DQ FLAT:??_C@_0N@FDLIKANA@__reversed__?$AA@
	DQ	FLAT:range_reverse
	DD	04H
	ORG $+4
	DQ	FLAT:reverse_doc
	DQ	FLAT:??_C@_0L@NNMACJIG@__reduce__?$AA@
	DQ	FLAT:range_reduce
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_05IOMEMJEC@count?$AA@
	DQ	FLAT:range_count
	DD	08H
	ORG $+4
	DQ	FLAT:count_doc
	DQ	FLAT:??_C@_05FKHKFDID@index?$AA@
	DQ	FLAT:range_index
	DD	08H
	ORG $+4
	DQ	FLAT:index_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
range_members DQ FLAT:??_C@_05FAGFPHJG@start?$AA@
	DD	010H
	ORG $+4
	DQ	0000000000000060H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_04PEGFANN@stop?$AA@
	DD	010H
	ORG $+4
	DQ	0000000000000068H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_04CNBNFAL@step?$AA@
	DD	010H
	ORG $+4
	DQ	0000000000000070H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	0000000000000000H
	ORG $+32
PyRange_Type DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_05CCGOGOBM@range?$AA@
	DQ	0000000000000080H
	DQ	0000000000000000H
	DQ	FLAT:range_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:range_repr
	DQ	0000000000000000H
	DQ	FLAT:range_as_sequence
	DQ	FLAT:range_as_mapping
	DQ	FLAT:range_hash
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	040000H
	ORG $+4
	DQ	FLAT:range_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:range_richcompare
	DQ	0000000000000000H
	DQ	FLAT:range_iter
	DQ	0000000000000000H
	DQ	FLAT:range_methods
	DQ	FLAT:range_members
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:range_new
	ORG $+72
length_hint_doc DB 'Private method returning an estimate of len(list(it))'
	DB	'.', 00H
	ORG $+1
reduce_doc DB	'Return state information for pickling.', 00H
	ORG $+1
setstate_doc DB	'Set state information for unpickling.', 00H
	ORG $+10
rangeiter_methods DQ FLAT:??_C@_0BA@BJLPBKGK@__length_hint__?$AA@
	DQ	FLAT:rangeiter_len
	DD	04H
	ORG $+4
	DQ	FLAT:length_hint_doc
	DQ	FLAT:??_C@_0L@NNMACJIG@__reduce__?$AA@
	DQ	FLAT:rangeiter_reduce
	DD	04H
	ORG $+4
	DQ	FLAT:reduce_doc
	DQ	FLAT:??_C@_0N@MOOGCAMH@__setstate__?$AA@
	DQ	FLAT:rangeiter_setstate
	DD	08H
	ORG $+4
	DQ	FLAT:setstate_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
PyRangeIter_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0P@PFENEOO@range_iterator?$AA@
	DQ	0000000000000070H
	DQ	0000000000000000H
	DQ	FLAT:_PyObject_DebugFree
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	040000H
	ORG $+4
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_SelfIter
	DQ	FLAT:rangeiter_next
	DQ	FLAT:rangeiter_methods
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:rangeiter_new
	ORG $+72
longrangeiter_methods DQ FLAT:??_C@_0BA@BJLPBKGK@__length_hint__?$AA@
	DQ	FLAT:longrangeiter_len
	DD	04H
	ORG $+4
	DQ	FLAT:length_hint_doc
	DQ	FLAT:??_C@_0L@NNMACJIG@__reduce__?$AA@
	DQ	FLAT:longrangeiter_reduce
	DD	04H
	ORG $+4
	DQ	FLAT:reduce_doc
	DQ	FLAT:??_C@_0N@MOOGCAMH@__setstate__?$AA@
	DQ	FLAT:longrangeiter_setstate
	DD	08H
	ORG $+4
	DQ	FLAT:setstate_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
PyLongRangeIter_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0BD@GOAHCCGP@longrange_iterator?$AA@
	DQ	0000000000000080H
	DQ	0000000000000000H
	DQ	FLAT:longrangeiter_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	040000H
	ORG $+4
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_SelfIter
	DQ	FLAT:longrangeiter_next
	DQ	FLAT:longrangeiter_methods
	DQ	0000000000000000H
	ORG $+144
_DATA	ENDS
PUBLIC	_Py_DecRef
PUBLIC	??_C@_07DOGFLLNP@range?$CI?$CJ?$AA@		; `string'
EXTRN	PyLong_FromLong:PROC
EXTRN	PyNumber_Index:PROC
EXTRN	PyArg_UnpackTuple:PROC
EXTRN	PyTuple_Size:PROC
EXTRN	_PyArg_NoKeywords:PROC
;	COMDAT pdata
; File c:\src\pyparallel\objects\rangeobject.c
pdata	SEGMENT
$pdata$range_new DD imagerel range_new
	DD	imagerel range_new+580
	DD	imagerel $unwind$range_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$range_new DD 011301H
	DD	0c213H
xdata	ENDS
;	COMDAT ??_C@_07DOGFLLNP@range?$CI?$CJ?$AA@
CONST	SEGMENT
??_C@_07DOGFLLNP@range?$CI?$CJ?$AA@ DB 'range()', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT range_new
_TEXT	SEGMENT
step$ = 64
stop$ = 72
start$ = 80
obj$ = 88
type$ = 112
args$ = 120
kw$ = 128
range_new PROC						; COMDAT

; 80   : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 81   :     rangeobject *obj;
; 82   :     PyObject *start = NULL, *stop = NULL, *step = NULL;

  00013	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR start$[rsp], 0
  0001c	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR stop$[rsp], 0
  00025	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR step$[rsp], 0

; 83   : 
; 84   :     if (!_PyArg_NoKeywords("range()", kw))

  0002e	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR kw$[rsp]
  00036	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07DOGFLLNP@range?$CI?$CJ?$AA@
  0003d	e8 00 00 00 00	 call	 _PyArg_NoKeywords
  00042	85 c0		 test	 eax, eax
  00044	75 07		 jne	 SHORT $LN24@range_new

; 85   :         return NULL;

  00046	33 c0		 xor	 eax, eax
  00048	e9 f2 01 00 00	 jmp	 $LN25@range_new
$LN24@range_new:

; 86   : 
; 87   :     if (PyTuple_Size(args) <= 1) {

  0004d	48 8b 4c 24 78	 mov	 rcx, QWORD PTR args$[rsp]
  00052	e8 00 00 00 00	 call	 PyTuple_Size
  00057	48 83 f8 01	 cmp	 rax, 1
  0005b	0f 8f ac 00 00
	00		 jg	 $LN23@range_new

; 88   :         if (!PyArg_UnpackTuple(args, "range", 1, 1, &stop))

  00061	48 8d 44 24 48	 lea	 rax, QWORD PTR stop$[rsp]
  00066	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0006b	41 b9 01 00 00
	00		 mov	 r9d, 1
  00071	41 b8 01 00 00
	00		 mov	 r8d, 1
  00077	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05CCGOGOBM@range?$AA@
  0007e	48 8b 4c 24 78	 mov	 rcx, QWORD PTR args$[rsp]
  00083	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00088	85 c0		 test	 eax, eax
  0008a	75 07		 jne	 SHORT $LN22@range_new

; 89   :             return NULL;

  0008c	33 c0		 xor	 eax, eax
  0008e	e9 ac 01 00 00	 jmp	 $LN25@range_new
$LN22@range_new:

; 90   :         stop = PyNumber_Index(stop);

  00093	48 8b 4c 24 48	 mov	 rcx, QWORD PTR stop$[rsp]
  00098	e8 00 00 00 00	 call	 PyNumber_Index
  0009d	48 89 44 24 48	 mov	 QWORD PTR stop$[rsp], rax

; 91   :         if (!stop)

  000a2	48 83 7c 24 48
	00		 cmp	 QWORD PTR stop$[rsp], 0
  000a8	75 07		 jne	 SHORT $LN21@range_new

; 92   :             return NULL;

  000aa	33 c0		 xor	 eax, eax
  000ac	e9 8e 01 00 00	 jmp	 $LN25@range_new
$LN21@range_new:

; 93   :         start = PyLong_FromLong(0);

  000b1	33 c9		 xor	 ecx, ecx
  000b3	e8 00 00 00 00	 call	 PyLong_FromLong
  000b8	48 89 44 24 50	 mov	 QWORD PTR start$[rsp], rax

; 94   :         if (!start) {

  000bd	48 83 7c 24 50
	00		 cmp	 QWORD PTR start$[rsp], 0
  000c3	75 11		 jne	 SHORT $LN20@range_new

; 95   :             Py_DECREF(stop);

  000c5	48 8b 4c 24 48	 mov	 rcx, QWORD PTR stop$[rsp]
  000ca	e8 00 00 00 00	 call	 _Py_DecRef

; 96   :             return NULL;

  000cf	33 c0		 xor	 eax, eax
  000d1	e9 69 01 00 00	 jmp	 $LN25@range_new
$LN20@range_new:

; 97   :         }
; 98   :         step = PyLong_FromLong(1);

  000d6	b9 01 00 00 00	 mov	 ecx, 1
  000db	e8 00 00 00 00	 call	 PyLong_FromLong
  000e0	48 89 44 24 40	 mov	 QWORD PTR step$[rsp], rax

; 99   :         if (!step) {

  000e5	48 83 7c 24 40
	00		 cmp	 QWORD PTR step$[rsp], 0
  000eb	75 1b		 jne	 SHORT $LN19@range_new

; 100  :             Py_DECREF(stop);

  000ed	48 8b 4c 24 48	 mov	 rcx, QWORD PTR stop$[rsp]
  000f2	e8 00 00 00 00	 call	 _Py_DecRef

; 101  :             Py_DECREF(start);

  000f7	48 8b 4c 24 50	 mov	 rcx, QWORD PTR start$[rsp]
  000fc	e8 00 00 00 00	 call	 _Py_DecRef

; 102  :             return NULL;

  00101	33 c0		 xor	 eax, eax
  00103	e9 37 01 00 00	 jmp	 $LN25@range_new
$LN19@range_new:

; 103  :         }
; 104  :     }
; 105  :     else {

  00108	e9 bb 00 00 00	 jmp	 $LN18@range_new
$LN23@range_new:

; 106  :         if (!PyArg_UnpackTuple(args, "range", 2, 3,
; 107  :                                &start, &stop, &step))

  0010d	48 8d 44 24 40	 lea	 rax, QWORD PTR step$[rsp]
  00112	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  00117	48 8d 44 24 48	 lea	 rax, QWORD PTR stop$[rsp]
  0011c	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00121	48 8d 44 24 50	 lea	 rax, QWORD PTR start$[rsp]
  00126	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0012b	41 b9 03 00 00
	00		 mov	 r9d, 3
  00131	41 b8 02 00 00
	00		 mov	 r8d, 2
  00137	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05CCGOGOBM@range?$AA@
  0013e	48 8b 4c 24 78	 mov	 rcx, QWORD PTR args$[rsp]
  00143	e8 00 00 00 00	 call	 PyArg_UnpackTuple
  00148	85 c0		 test	 eax, eax
  0014a	75 07		 jne	 SHORT $LN17@range_new

; 108  :             return NULL;

  0014c	33 c0		 xor	 eax, eax
  0014e	e9 ec 00 00 00	 jmp	 $LN25@range_new
$LN17@range_new:

; 109  : 
; 110  :         /* Convert borrowed refs to owned refs */
; 111  :         start = PyNumber_Index(start);

  00153	48 8b 4c 24 50	 mov	 rcx, QWORD PTR start$[rsp]
  00158	e8 00 00 00 00	 call	 PyNumber_Index
  0015d	48 89 44 24 50	 mov	 QWORD PTR start$[rsp], rax

; 112  :         if (!start)

  00162	48 83 7c 24 50
	00		 cmp	 QWORD PTR start$[rsp], 0
  00168	75 07		 jne	 SHORT $LN16@range_new

; 113  :             return NULL;

  0016a	33 c0		 xor	 eax, eax
  0016c	e9 ce 00 00 00	 jmp	 $LN25@range_new
$LN16@range_new:

; 114  :         stop = PyNumber_Index(stop);

  00171	48 8b 4c 24 48	 mov	 rcx, QWORD PTR stop$[rsp]
  00176	e8 00 00 00 00	 call	 PyNumber_Index
  0017b	48 89 44 24 48	 mov	 QWORD PTR stop$[rsp], rax

; 115  :         if (!stop) {

  00180	48 83 7c 24 48
	00		 cmp	 QWORD PTR stop$[rsp], 0
  00186	75 11		 jne	 SHORT $LN15@range_new

; 116  :             Py_DECREF(start);

  00188	48 8b 4c 24 50	 mov	 rcx, QWORD PTR start$[rsp]
  0018d	e8 00 00 00 00	 call	 _Py_DecRef

; 117  :             return NULL;

  00192	33 c0		 xor	 eax, eax
  00194	e9 a6 00 00 00	 jmp	 $LN25@range_new
$LN15@range_new:

; 118  :         }
; 119  :         step = validate_step(step);    /* Caution, this can clear exceptions */

  00199	48 8b 4c 24 40	 mov	 rcx, QWORD PTR step$[rsp]
  0019e	e8 00 00 00 00	 call	 validate_step
  001a3	48 89 44 24 40	 mov	 QWORD PTR step$[rsp], rax

; 120  :         if (!step) {

  001a8	48 83 7c 24 40
	00		 cmp	 QWORD PTR step$[rsp], 0
  001ae	75 18		 jne	 SHORT $LN14@range_new

; 121  :             Py_DECREF(start);

  001b0	48 8b 4c 24 50	 mov	 rcx, QWORD PTR start$[rsp]
  001b5	e8 00 00 00 00	 call	 _Py_DecRef

; 122  :             Py_DECREF(stop);

  001ba	48 8b 4c 24 48	 mov	 rcx, QWORD PTR stop$[rsp]
  001bf	e8 00 00 00 00	 call	 _Py_DecRef

; 123  :             return NULL;

  001c4	33 c0		 xor	 eax, eax
  001c6	eb 77		 jmp	 SHORT $LN25@range_new
$LN14@range_new:
$LN18@range_new:

; 124  :         }
; 125  :     }
; 126  : 
; 127  :     obj = make_range_object(type, start, stop, step);

  001c8	4c 8b 4c 24 40	 mov	 r9, QWORD PTR step$[rsp]
  001cd	4c 8b 44 24 48	 mov	 r8, QWORD PTR stop$[rsp]
  001d2	48 8b 54 24 50	 mov	 rdx, QWORD PTR start$[rsp]
  001d7	48 8b 4c 24 70	 mov	 rcx, QWORD PTR type$[rsp]
  001dc	e8 00 00 00 00	 call	 make_range_object
  001e1	48 89 44 24 58	 mov	 QWORD PTR obj$[rsp], rax

; 128  :     if (obj != NULL)

  001e6	48 83 7c 24 58
	00		 cmp	 QWORD PTR obj$[rsp], 0
  001ec	74 07		 je	 SHORT $LN13@range_new

; 129  :         return (PyObject *) obj;

  001ee	48 8b 44 24 58	 mov	 rax, QWORD PTR obj$[rsp]
  001f3	eb 4a		 jmp	 SHORT $LN25@range_new
$LN13@range_new:
$LN12@range_new:

; 130  : 
; 131  :     /* Failed to create object, release attributes */
; 132  :     Py_XDECREF(start);

  001f5	48 83 7c 24 50
	00		 cmp	 QWORD PTR start$[rsp], 0
  001fb	74 0a		 je	 SHORT $LN9@range_new
  001fd	48 8b 4c 24 50	 mov	 rcx, QWORD PTR start$[rsp]
  00202	e8 00 00 00 00	 call	 _Py_DecRef
$LN9@range_new:
  00207	33 c0		 xor	 eax, eax
  00209	85 c0		 test	 eax, eax
  0020b	75 e8		 jne	 SHORT $LN12@range_new
$LN8@range_new:

; 133  :     Py_XDECREF(stop);

  0020d	48 83 7c 24 48
	00		 cmp	 QWORD PTR stop$[rsp], 0
  00213	74 0a		 je	 SHORT $LN5@range_new
  00215	48 8b 4c 24 48	 mov	 rcx, QWORD PTR stop$[rsp]
  0021a	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@range_new:
  0021f	33 c0		 xor	 eax, eax
  00221	85 c0		 test	 eax, eax
  00223	75 e8		 jne	 SHORT $LN8@range_new
$LN4@range_new:

; 134  :     Py_XDECREF(step);

  00225	48 83 7c 24 40
	00		 cmp	 QWORD PTR step$[rsp], 0
  0022b	74 0a		 je	 SHORT $LN1@range_new
  0022d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR step$[rsp]
  00232	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@range_new:
  00237	33 c0		 xor	 eax, eax
  00239	85 c0		 test	 eax, eax
  0023b	75 e8		 jne	 SHORT $LN4@range_new

; 135  :     return NULL;

  0023d	33 c0		 xor	 eax, eax
$LN25@range_new:

; 136  : }

  0023f	48 83 c4 68	 add	 rsp, 104		; 00000068H
  00243	c3		 ret	 0
range_new ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
EXTRN	_Py_Dealloc:PROC
EXTRN	_Py_NegativeRefcount:PROC
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_RefTotal:QWORD
EXTRN	Px_DecRef:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN13
	DD	imagerel $LN13+257
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
tv81 = 48
op$ = 80
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN13:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	0f 85 e6 00 00
	00		 jne	 $LN8@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00016	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0001b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0001f	48 83 e0 20	 and	 rax, 32			; 00000020H
  00023	48 85 c0	 test	 rax, rax
  00026	75 14		 jne	 SHORT $LN6@Py_DecRef
  00028	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0002d	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00031	48 25 80 00 00
	00		 and	 rax, 128		; 00000080H
  00037	48 85 c0	 test	 rax, rax
  0003a	74 0f		 je	 SHORT $LN7@Py_DecRef
$LN6@Py_DecRef:

; 926  :             Px_DECREF(op);

  0003c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  00041	e8 00 00 00 00	 call	 Px_DecRef
  00046	e9 b1 00 00 00	 jmp	 $LN5@Py_DecRef
$LN7@Py_DecRef:

; 927  :         else if (!Px_ISPX(op)) {

  0004b	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00050	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00054	48 83 e0 02	 and	 rax, 2
  00058	48 85 c0	 test	 rax, rax
  0005b	0f 85 9b 00 00
	00		 jne	 $LN4@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;

  00061	e8 00 00 00 00	 call	 _Py_PXCTX
  00066	85 c0		 test	 eax, eax
  00068	74 02		 je	 SHORT $LN11@Py_DecRef
  0006a	eb 11		 jmp	 SHORT $LN12@Py_DecRef
$LN11@Py_DecRef:
  0006c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00073	48 ff c8	 dec	 rax
  00076	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN12@Py_DecRef:

; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  0007d	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00082	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00086	48 ff c8	 dec	 rax
  00089	48 89 44 24 30	 mov	 QWORD PTR tv81[rsp], rax
  0008e	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00093	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv81[rsp]
  00098	48 89 48 50	 mov	 QWORD PTR [rax+80], rcx
  0009c	48 83 7c 24 30
	00		 cmp	 QWORD PTR tv81[rsp], 0
  000a2	74 4e		 je	 SHORT $LN3@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);

  000a4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000ac	4c 8b 4c 24 50	 mov	 r9, QWORD PTR op$[rsp]
  000b1	41 b8 a2 03 00
	00		 mov	 r8d, 930		; 000003a2H
  000b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000c5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ca	85 c0		 test	 eax, eax
  000cc	75 22		 jne	 SHORT $LN2@Py_DecRef
  000ce	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  000d3	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000d8	7d 16		 jge	 SHORT $LN2@Py_DecRef
  000da	4c 8b 44 24 50	 mov	 r8, QWORD PTR op$[rsp]
  000df	ba a2 03 00 00	 mov	 edx, 930		; 000003a2H
  000e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000eb	e8 00 00 00 00	 call	 _Py_NegativeRefcount
$LN2@Py_DecRef:

; 931  :             } else

  000f0	eb 0a		 jmp	 SHORT $LN1@Py_DecRef
$LN3@Py_DecRef:

; 932  :                 _Py_Dealloc((PyObject *)(op));

  000f2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  000f7	e8 00 00 00 00	 call	 _Py_Dealloc
$LN1@Py_DecRef:
$LN4@Py_DecRef:
$LN5@Py_DecRef:
$LN8@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  000fc	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00100	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@ENBJFOCK@validate_step?$AA@		; `string'
PUBLIC	??_C@_0BJ@JFGJIEKG@?4?4?2Objects?2rangeobject?4c?$AA@ ; `string'
PUBLIC	??_C@_0BP@EMMABHJN@range?$CI?$CJ?5arg?53?5must?5not?5be?5zero?$AA@ ; `string'
EXTRN	PyErr_SetString:PROC
EXTRN	PyExc_ValueError:QWORD
EXTRN	PyErr_Clear:PROC
EXTRN	PyErr_Occurred:PROC
EXTRN	PyNumber_AsSsize_t:PROC
;	COMDAT pdata
; File c:\src\pyparallel\objects\rangeobject.c
pdata	SEGMENT
$pdata$validate_step DD imagerel validate_step
	DD	imagerel validate_step+223
	DD	imagerel $unwind$validate_step
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$validate_step DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0O@ENBJFOCK@validate_step?$AA@
CONST	SEGMENT
??_C@_0O@ENBJFOCK@validate_step?$AA@ DB 'validate_step', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@JFGJIEKG@?4?4?2Objects?2rangeobject?4c?$AA@
CONST	SEGMENT
??_C@_0BJ@JFGJIEKG@?4?4?2Objects?2rangeobject?4c?$AA@ DB '..\Objects\rang'
	DB	'eobject.c', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@EMMABHJN@range?$CI?$CJ?5arg?53?5must?5not?5be?5zero?$AA@
CONST	SEGMENT
??_C@_0BP@EMMABHJN@range?$CI?$CJ?5arg?53?5must?5not?5be?5zero?$AA@ DB 'ra'
	DB	'nge() arg 3 must not be zero', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT validate_step
_TEXT	SEGMENT
istep$20339 = 48
_py_tmp$20351 = 56
step$ = 80
validate_step PROC					; COMDAT

; 26   : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 27   :     /* No step specified, use a step of 1. */
; 28   :     if (!step)

  00009	48 83 7c 24 50
	00		 cmp	 QWORD PTR step$[rsp], 0
  0000f	75 0f		 jne	 SHORT $LN9@validate_s

; 29   :         return PyLong_FromLong(1);

  00011	b9 01 00 00 00	 mov	 ecx, 1
  00016	e8 00 00 00 00	 call	 PyLong_FromLong
  0001b	e9 ba 00 00 00	 jmp	 $LN10@validate_s
$LN9@validate_s:

; 30   : 
; 31   :     step = PyNumber_Index(step);

  00020	48 8b 4c 24 50	 mov	 rcx, QWORD PTR step$[rsp]
  00025	e8 00 00 00 00	 call	 PyNumber_Index
  0002a	48 89 44 24 50	 mov	 QWORD PTR step$[rsp], rax

; 32   :     if (step) {

  0002f	48 83 7c 24 50
	00		 cmp	 QWORD PTR step$[rsp], 0
  00035	0f 84 9a 00 00
	00		 je	 $LN8@validate_s

; 33   :         Py_ssize_t istep = PyNumber_AsSsize_t(step, NULL);

  0003b	33 d2		 xor	 edx, edx
  0003d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR step$[rsp]
  00042	e8 00 00 00 00	 call	 PyNumber_AsSsize_t
  00047	48 89 44 24 30	 mov	 QWORD PTR istep$20339[rsp], rax

; 34   :         if (istep == -1 && PyErr_Occurred()) {

  0004c	48 83 7c 24 30
	ff		 cmp	 QWORD PTR istep$20339[rsp], -1
  00052	75 11		 jne	 SHORT $LN7@validate_s
  00054	e8 00 00 00 00	 call	 PyErr_Occurred
  00059	48 85 c0	 test	 rax, rax
  0005c	74 07		 je	 SHORT $LN7@validate_s

; 35   :             /* Ignore OverflowError, we know the value isn't 0. */
; 36   :             PyErr_Clear();

  0005e	e8 00 00 00 00	 call	 PyErr_Clear
  00063	eb 70		 jmp	 SHORT $LN6@validate_s
$LN7@validate_s:

; 37   :         }
; 38   :         else if (istep == 0) {

  00065	48 83 7c 24 30
	00		 cmp	 QWORD PTR istep$20339[rsp], 0
  0006b	75 68		 jne	 SHORT $LN5@validate_s

; 39   :             PyErr_SetString(PyExc_ValueError,
; 40   :                             "range() arg 3 must not be zero");

  0006d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BP@EMMABHJN@range?$CI?$CJ?5arg?53?5must?5not?5be?5zero?$AA@
  00074	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0007b	e8 00 00 00 00	 call	 PyErr_SetString
$LN4@validate_s:

; 41   :             Py_CLEAR(step);

  00080	48 83 7c 24 50
	00		 cmp	 QWORD PTR step$[rsp], 0
  00086	74 47		 je	 SHORT $LN1@validate_s
  00088	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00090	4c 8b 4c 24 50	 mov	 r9, QWORD PTR step$[rsp]
  00095	41 b8 29 00 00
	00		 mov	 r8d, 41			; 00000029H
  0009b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@JFGJIEKG@?4?4?2Objects?2rangeobject?4c?$AA@
  000a2	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@ENBJFOCK@validate_step?$AA@
  000a9	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ae	85 c0		 test	 eax, eax
  000b0	75 1d		 jne	 SHORT $LN1@validate_s
  000b2	48 8b 44 24 50	 mov	 rax, QWORD PTR step$[rsp]
  000b7	48 89 44 24 38	 mov	 QWORD PTR _py_tmp$20351[rsp], rax
  000bc	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR step$[rsp], 0
  000c5	48 8b 4c 24 38	 mov	 rcx, QWORD PTR _py_tmp$20351[rsp]
  000ca	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@validate_s:
  000cf	33 c0		 xor	 eax, eax
  000d1	85 c0		 test	 eax, eax
  000d3	75 ab		 jne	 SHORT $LN4@validate_s
$LN5@validate_s:
$LN6@validate_s:
$LN8@validate_s:

; 42   :         }
; 43   :     }
; 44   : 
; 45   :     return step;

  000d5	48 8b 44 24 50	 mov	 rax, QWORD PTR step$[rsp]
$LN10@validate_s:

; 46   : }

  000da	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000de	c3		 ret	 0
validate_step ENDP
_TEXT	ENDS
EXTRN	_PyObject_New:PROC
EXTRN	_PxObject_New:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$make_range_object DD imagerel make_range_object
	DD	imagerel make_range_object+212
	DD	imagerel $unwind$make_range_object
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$make_range_object DD 011801H
	DD	08218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT make_range_object
_TEXT	SEGMENT
length$ = 32
obj$ = 40
tv75 = 48
type$ = 80
start$ = 88
stop$ = 96
step$ = 104
make_range_object PROC					; COMDAT

; 54   : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 55   :     rangeobject *obj = NULL;

  00018	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR obj$[rsp], 0

; 56   :     PyObject *length;
; 57   :     length = compute_range_length(start, stop, step);

  00021	4c 8b 44 24 68	 mov	 r8, QWORD PTR step$[rsp]
  00026	48 8b 54 24 60	 mov	 rdx, QWORD PTR stop$[rsp]
  0002b	48 8b 4c 24 58	 mov	 rcx, QWORD PTR start$[rsp]
  00030	e8 00 00 00 00	 call	 compute_range_length
  00035	48 89 44 24 20	 mov	 QWORD PTR length$[rsp], rax

; 58   :     if (length == NULL) {

  0003a	48 83 7c 24 20
	00		 cmp	 QWORD PTR length$[rsp], 0
  00040	75 07		 jne	 SHORT $LN2@make_range

; 59   :         return NULL;

  00042	33 c0		 xor	 eax, eax
  00044	e9 86 00 00 00	 jmp	 $LN3@make_range
$LN2@make_range:

; 60   :     }
; 61   :     obj = PyObject_New(rangeobject, type);

  00049	e8 00 00 00 00	 call	 _Py_PXCTX
  0004e	85 c0		 test	 eax, eax
  00050	74 11		 je	 SHORT $LN5@make_range
  00052	48 8b 4c 24 50	 mov	 rcx, QWORD PTR type$[rsp]
  00057	e8 00 00 00 00	 call	 _PxObject_New
  0005c	48 89 44 24 30	 mov	 QWORD PTR tv75[rsp], rax
  00061	eb 0f		 jmp	 SHORT $LN6@make_range
$LN5@make_range:
  00063	48 8b 4c 24 50	 mov	 rcx, QWORD PTR type$[rsp]
  00068	e8 00 00 00 00	 call	 _PyObject_New
  0006d	48 89 44 24 30	 mov	 QWORD PTR tv75[rsp], rax
$LN6@make_range:
  00072	48 8b 44 24 30	 mov	 rax, QWORD PTR tv75[rsp]
  00077	48 89 44 24 28	 mov	 QWORD PTR obj$[rsp], rax

; 62   :     if (obj == NULL) {

  0007c	48 83 7c 24 28
	00		 cmp	 QWORD PTR obj$[rsp], 0
  00082	75 0e		 jne	 SHORT $LN1@make_range

; 63   :         Py_DECREF(length);

  00084	48 8b 4c 24 20	 mov	 rcx, QWORD PTR length$[rsp]
  00089	e8 00 00 00 00	 call	 _Py_DecRef

; 64   :         return NULL;

  0008e	33 c0		 xor	 eax, eax
  00090	eb 3d		 jmp	 SHORT $LN3@make_range
$LN1@make_range:

; 65   :     }
; 66   :     obj->start = start;

  00092	48 8b 44 24 28	 mov	 rax, QWORD PTR obj$[rsp]
  00097	48 8b 4c 24 58	 mov	 rcx, QWORD PTR start$[rsp]
  0009c	48 89 48 60	 mov	 QWORD PTR [rax+96], rcx

; 67   :     obj->stop = stop;

  000a0	48 8b 44 24 28	 mov	 rax, QWORD PTR obj$[rsp]
  000a5	48 8b 4c 24 60	 mov	 rcx, QWORD PTR stop$[rsp]
  000aa	48 89 48 68	 mov	 QWORD PTR [rax+104], rcx

; 68   :     obj->step = step;

  000ae	48 8b 44 24 28	 mov	 rax, QWORD PTR obj$[rsp]
  000b3	48 8b 4c 24 68	 mov	 rcx, QWORD PTR step$[rsp]
  000b8	48 89 48 70	 mov	 QWORD PTR [rax+112], rcx

; 69   :     obj->length = length;

  000bc	48 8b 44 24 28	 mov	 rax, QWORD PTR obj$[rsp]
  000c1	48 8b 4c 24 20	 mov	 rcx, QWORD PTR length$[rsp]
  000c6	48 89 48 78	 mov	 QWORD PTR [rax+120], rcx

; 70   :     return obj;

  000ca	48 8b 44 24 28	 mov	 rax, QWORD PTR obj$[rsp]
$LN3@make_range:

; 71   : }

  000cf	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000d3	c3		 ret	 0
make_range_object ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$range_dealloc DD imagerel range_dealloc
	DD	imagerel range_dealloc+80
	DD	imagerel $unwind$range_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$range_dealloc DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT range_dealloc
_TEXT	SEGMENT
r$ = 48
range_dealloc PROC					; COMDAT

; 146  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 147  :     Py_DECREF(r->start);

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR r$[rsp]
  0000e	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00012	e8 00 00 00 00	 call	 _Py_DecRef

; 148  :     Py_DECREF(r->stop);

  00017	48 8b 44 24 30	 mov	 rax, QWORD PTR r$[rsp]
  0001c	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  00020	e8 00 00 00 00	 call	 _Py_DecRef

; 149  :     Py_DECREF(r->step);

  00025	48 8b 44 24 30	 mov	 rax, QWORD PTR r$[rsp]
  0002a	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  0002e	e8 00 00 00 00	 call	 _Py_DecRef

; 150  :     Py_DECREF(r->length);

  00033	48 8b 44 24 30	 mov	 rax, QWORD PTR r$[rsp]
  00038	48 8b 48 78	 mov	 rcx, QWORD PTR [rax+120]
  0003c	e8 00 00 00 00	 call	 _Py_DecRef

; 151  :     PyObject_Del(r);

  00041	48 8b 4c 24 30	 mov	 rcx, QWORD PTR r$[rsp]
  00046	e8 00 00 00 00	 call	 _PyObject_DebugFree

; 152  : }

  0004b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004f	c3		 ret	 0
range_dealloc ENDP
_TEXT	ENDS
PUBLIC	_Py_IncRef
EXTRN	PyNumber_Add:PROC
EXTRN	PyNumber_FloorDivide:PROC
EXTRN	PyNumber_Subtract:PROC
EXTRN	PyNumber_Negative:PROC
EXTRN	PyObject_RichCompareBool:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$compute_range_length DD imagerel compute_range_length
	DD	imagerel compute_range_length+665
	DD	imagerel $unwind$compute_range_length
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$compute_range_length DD 011301H
	DD	0e213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT compute_range_length
_TEXT	SEGMENT
lo$ = 32
tmp2$ = 40
cmp_result$ = 48
tmp1$ = 56
zero$ = 64
one$ = 72
hi$ = 80
result$ = 88
diff$ = 96
start$ = 128
stop$ = 136
step$ = 144
compute_range_length PROC				; COMDAT

; 160  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 161  :     /* -------------------------------------------------------------
; 162  :     Algorithm is equal to that of get_len_of_range(), but it operates
; 163  :     on PyObjects (which are assumed to be PyLong objects).
; 164  :     ---------------------------------------------------------------*/
; 165  :     int cmp_result;
; 166  :     PyObject *lo, *hi;
; 167  :     PyObject *diff = NULL;

  00013	48 c7 44 24 60
	00 00 00 00	 mov	 QWORD PTR diff$[rsp], 0

; 168  :     PyObject *one = NULL;

  0001c	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR one$[rsp], 0

; 169  :     PyObject *tmp1 = NULL, *tmp2 = NULL, *result;

  00025	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR tmp1$[rsp], 0
  0002e	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR tmp2$[rsp], 0

; 170  :                 /* holds sub-expression evaluations */
; 171  : 
; 172  :     PyObject *zero = PyLong_FromLong(0);

  00037	33 c9		 xor	 ecx, ecx
  00039	e8 00 00 00 00	 call	 PyLong_FromLong
  0003e	48 89 44 24 40	 mov	 QWORD PTR zero$[rsp], rax

; 173  :     if (zero == NULL)

  00043	48 83 7c 24 40
	00		 cmp	 QWORD PTR zero$[rsp], 0
  00049	75 07		 jne	 SHORT $LN35@compute_ra

; 174  :         return NULL;

  0004b	33 c0		 xor	 eax, eax
  0004d	e9 42 02 00 00	 jmp	 $LN36@compute_ra
$LN35@compute_ra:

; 175  :     cmp_result = PyObject_RichCompareBool(step, zero, Py_GT);

  00052	41 b8 04 00 00
	00		 mov	 r8d, 4
  00058	48 8b 54 24 40	 mov	 rdx, QWORD PTR zero$[rsp]
  0005d	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR step$[rsp]
  00065	e8 00 00 00 00	 call	 PyObject_RichCompareBool
  0006a	89 44 24 30	 mov	 DWORD PTR cmp_result$[rsp], eax

; 176  :     Py_DECREF(zero);

  0006e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zero$[rsp]
  00073	e8 00 00 00 00	 call	 _Py_DecRef

; 177  :     if (cmp_result == -1)

  00078	83 7c 24 30 ff	 cmp	 DWORD PTR cmp_result$[rsp], -1
  0007d	75 07		 jne	 SHORT $LN34@compute_ra

; 178  :         return NULL;

  0007f	33 c0		 xor	 eax, eax
  00081	e9 0e 02 00 00	 jmp	 $LN36@compute_ra
$LN34@compute_ra:

; 179  : 
; 180  :     if (cmp_result == 1) {

  00086	83 7c 24 30 01	 cmp	 DWORD PTR cmp_result$[rsp], 1
  0008b	75 29		 jne	 SHORT $LN33@compute_ra

; 181  :         lo = start;

  0008d	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR start$[rsp]
  00095	48 89 44 24 20	 mov	 QWORD PTR lo$[rsp], rax

; 182  :         hi = stop;

  0009a	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR stop$[rsp]
  000a2	48 89 44 24 50	 mov	 QWORD PTR hi$[rsp], rax

; 183  :         Py_INCREF(step);

  000a7	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR step$[rsp]
  000af	e8 00 00 00 00	 call	 _Py_IncRef

; 184  :     } else {

  000b4	eb 41		 jmp	 SHORT $LN32@compute_ra
$LN33@compute_ra:

; 185  :         lo = stop;

  000b6	48 8b 84 24 88
	00 00 00	 mov	 rax, QWORD PTR stop$[rsp]
  000be	48 89 44 24 20	 mov	 QWORD PTR lo$[rsp], rax

; 186  :         hi = start;

  000c3	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR start$[rsp]
  000cb	48 89 44 24 50	 mov	 QWORD PTR hi$[rsp], rax

; 187  :         step = PyNumber_Negative(step);

  000d0	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR step$[rsp]
  000d8	e8 00 00 00 00	 call	 PyNumber_Negative
  000dd	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR step$[rsp], rax

; 188  :         if (!step)

  000e5	48 83 bc 24 90
	00 00 00 00	 cmp	 QWORD PTR step$[rsp], 0
  000ee	75 07		 jne	 SHORT $LN31@compute_ra

; 189  :             return NULL;

  000f0	33 c0		 xor	 eax, eax
  000f2	e9 9d 01 00 00	 jmp	 $LN36@compute_ra
$LN31@compute_ra:
$LN32@compute_ra:

; 190  :     }
; 191  : 
; 192  :     /* if (lo >= hi), return length of 0. */
; 193  :     if (PyObject_RichCompareBool(lo, hi, Py_GE) == 1) {

  000f7	41 b8 05 00 00
	00		 mov	 r8d, 5
  000fd	48 8b 54 24 50	 mov	 rdx, QWORD PTR hi$[rsp]
  00102	48 8b 4c 24 20	 mov	 rcx, QWORD PTR lo$[rsp]
  00107	e8 00 00 00 00	 call	 PyObject_RichCompareBool
  0010c	83 f8 01	 cmp	 eax, 1
  0010f	75 2a		 jne	 SHORT $LN30@compute_ra
$LN29@compute_ra:

; 194  :         Py_XDECREF(step);

  00111	48 83 bc 24 90
	00 00 00 00	 cmp	 QWORD PTR step$[rsp], 0
  0011a	74 0d		 je	 SHORT $LN26@compute_ra
  0011c	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR step$[rsp]
  00124	e8 00 00 00 00	 call	 _Py_DecRef
$LN26@compute_ra:
  00129	33 c0		 xor	 eax, eax
  0012b	85 c0		 test	 eax, eax
  0012d	75 e2		 jne	 SHORT $LN29@compute_ra

; 195  :         return PyLong_FromLong(0);

  0012f	33 c9		 xor	 ecx, ecx
  00131	e8 00 00 00 00	 call	 PyLong_FromLong
  00136	e9 59 01 00 00	 jmp	 $LN36@compute_ra
$LN30@compute_ra:

; 196  :     }
; 197  : 
; 198  :     if ((one = PyLong_FromLong(1L)) == NULL)

  0013b	b9 01 00 00 00	 mov	 ecx, 1
  00140	e8 00 00 00 00	 call	 PyLong_FromLong
  00145	48 89 44 24 48	 mov	 QWORD PTR one$[rsp], rax
  0014a	48 83 7c 24 48
	00		 cmp	 QWORD PTR one$[rsp], 0
  00150	75 05		 jne	 SHORT $LN25@compute_ra

; 199  :         goto Fail;

  00152	e9 bd 00 00 00	 jmp	 $Fail$20494
$LN25@compute_ra:

; 200  : 
; 201  :     if ((tmp1 = PyNumber_Subtract(hi, lo)) == NULL)

  00157	48 8b 54 24 20	 mov	 rdx, QWORD PTR lo$[rsp]
  0015c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR hi$[rsp]
  00161	e8 00 00 00 00	 call	 PyNumber_Subtract
  00166	48 89 44 24 38	 mov	 QWORD PTR tmp1$[rsp], rax
  0016b	48 83 7c 24 38
	00		 cmp	 QWORD PTR tmp1$[rsp], 0
  00171	75 05		 jne	 SHORT $LN24@compute_ra

; 202  :         goto Fail;

  00173	e9 9c 00 00 00	 jmp	 $Fail$20494
$LN24@compute_ra:

; 203  : 
; 204  :     if ((diff = PyNumber_Subtract(tmp1, one)) == NULL)

  00178	48 8b 54 24 48	 mov	 rdx, QWORD PTR one$[rsp]
  0017d	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tmp1$[rsp]
  00182	e8 00 00 00 00	 call	 PyNumber_Subtract
  00187	48 89 44 24 60	 mov	 QWORD PTR diff$[rsp], rax
  0018c	48 83 7c 24 60
	00		 cmp	 QWORD PTR diff$[rsp], 0
  00192	75 02		 jne	 SHORT $LN23@compute_ra

; 205  :         goto Fail;

  00194	eb 7e		 jmp	 SHORT $Fail$20494
$LN23@compute_ra:

; 206  : 
; 207  :     if ((tmp2 = PyNumber_FloorDivide(diff, step)) == NULL)

  00196	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR step$[rsp]
  0019e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR diff$[rsp]
  001a3	e8 00 00 00 00	 call	 PyNumber_FloorDivide
  001a8	48 89 44 24 28	 mov	 QWORD PTR tmp2$[rsp], rax
  001ad	48 83 7c 24 28
	00		 cmp	 QWORD PTR tmp2$[rsp], 0
  001b3	75 02		 jne	 SHORT $LN22@compute_ra

; 208  :         goto Fail;

  001b5	eb 5d		 jmp	 SHORT $Fail$20494
$LN22@compute_ra:

; 209  : 
; 210  :     if ((result = PyNumber_Add(tmp2, one)) == NULL)

  001b7	48 8b 54 24 48	 mov	 rdx, QWORD PTR one$[rsp]
  001bc	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tmp2$[rsp]
  001c1	e8 00 00 00 00	 call	 PyNumber_Add
  001c6	48 89 44 24 58	 mov	 QWORD PTR result$[rsp], rax
  001cb	48 83 7c 24 58
	00		 cmp	 QWORD PTR result$[rsp], 0
  001d1	75 02		 jne	 SHORT $LN21@compute_ra

; 211  :         goto Fail;

  001d3	eb 3f		 jmp	 SHORT $Fail$20494
$LN21@compute_ra:

; 212  : 
; 213  :     Py_DECREF(tmp2);

  001d5	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tmp2$[rsp]
  001da	e8 00 00 00 00	 call	 _Py_DecRef

; 214  :     Py_DECREF(diff);

  001df	48 8b 4c 24 60	 mov	 rcx, QWORD PTR diff$[rsp]
  001e4	e8 00 00 00 00	 call	 _Py_DecRef

; 215  :     Py_DECREF(step);

  001e9	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR step$[rsp]
  001f1	e8 00 00 00 00	 call	 _Py_DecRef

; 216  :     Py_DECREF(tmp1);

  001f6	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tmp1$[rsp]
  001fb	e8 00 00 00 00	 call	 _Py_DecRef

; 217  :     Py_DECREF(one);

  00200	48 8b 4c 24 48	 mov	 rcx, QWORD PTR one$[rsp]
  00205	e8 00 00 00 00	 call	 _Py_DecRef

; 218  :     return result;

  0020a	48 8b 44 24 58	 mov	 rax, QWORD PTR result$[rsp]
  0020f	e9 80 00 00 00	 jmp	 $LN36@compute_ra
$Fail$20494:
$LN20@compute_ra:

; 219  : 
; 220  :   Fail:
; 221  :     Py_XDECREF(tmp2);

  00214	48 83 7c 24 28
	00		 cmp	 QWORD PTR tmp2$[rsp], 0
  0021a	74 0a		 je	 SHORT $LN17@compute_ra
  0021c	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tmp2$[rsp]
  00221	e8 00 00 00 00	 call	 _Py_DecRef
$LN17@compute_ra:
  00226	33 c0		 xor	 eax, eax
  00228	85 c0		 test	 eax, eax
  0022a	75 e8		 jne	 SHORT $LN20@compute_ra
$LN16@compute_ra:

; 222  :     Py_XDECREF(diff);

  0022c	48 83 7c 24 60
	00		 cmp	 QWORD PTR diff$[rsp], 0
  00232	74 0a		 je	 SHORT $LN13@compute_ra
  00234	48 8b 4c 24 60	 mov	 rcx, QWORD PTR diff$[rsp]
  00239	e8 00 00 00 00	 call	 _Py_DecRef
$LN13@compute_ra:
  0023e	33 c0		 xor	 eax, eax
  00240	85 c0		 test	 eax, eax
  00242	75 e8		 jne	 SHORT $LN16@compute_ra
$LN12@compute_ra:

; 223  :     Py_XDECREF(step);

  00244	48 83 bc 24 90
	00 00 00 00	 cmp	 QWORD PTR step$[rsp], 0
  0024d	74 0d		 je	 SHORT $LN9@compute_ra
  0024f	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR step$[rsp]
  00257	e8 00 00 00 00	 call	 _Py_DecRef
$LN9@compute_ra:
  0025c	33 c0		 xor	 eax, eax
  0025e	85 c0		 test	 eax, eax
  00260	75 e2		 jne	 SHORT $LN12@compute_ra
$LN8@compute_ra:

; 224  :     Py_XDECREF(tmp1);

  00262	48 83 7c 24 38
	00		 cmp	 QWORD PTR tmp1$[rsp], 0
  00268	74 0a		 je	 SHORT $LN5@compute_ra
  0026a	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tmp1$[rsp]
  0026f	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@compute_ra:
  00274	33 c0		 xor	 eax, eax
  00276	85 c0		 test	 eax, eax
  00278	75 e8		 jne	 SHORT $LN8@compute_ra
$LN4@compute_ra:

; 225  :     Py_XDECREF(one);

  0027a	48 83 7c 24 48
	00		 cmp	 QWORD PTR one$[rsp], 0
  00280	74 0a		 je	 SHORT $LN1@compute_ra
  00282	48 8b 4c 24 48	 mov	 rcx, QWORD PTR one$[rsp]
  00287	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@compute_ra:
  0028c	33 c0		 xor	 eax, eax
  0028e	85 c0		 test	 eax, eax
  00290	75 e8		 jne	 SHORT $LN4@compute_ra

; 226  :     return NULL;

  00292	33 c0		 xor	 eax, eax
$LN36@compute_ra:

; 227  : }

  00294	48 83 c4 78	 add	 rsp, 120		; 00000078H
  00298	c3		 ret	 0
compute_range_length ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN7
	DD	imagerel $LN7+132
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 6d		 jne	 SHORT $LN2@Py_IncRef
  00012	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0001a	4c 8b 4c 24 40	 mov	 r9, QWORD PTR op$[rsp]
  0001f	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_Guard
  00038	85 c0		 test	 eax, eax
  0003a	75 12		 jne	 SHORT $LN1@Py_IncRef
  0003c	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  00041	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00045	48 83 e0 20	 and	 rax, 32			; 00000020H
  00049	48 85 c0	 test	 rax, rax
  0004c	74 31		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;

  0004e	e8 00 00 00 00	 call	 _Py_PXCTX
  00053	85 c0		 test	 eax, eax
  00055	74 02		 je	 SHORT $LN5@Py_IncRef
  00057	eb 11		 jmp	 SHORT $LN6@Py_IncRef
$LN5@Py_IncRef:
  00059	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00060	48 ff c0	 inc	 rax
  00063	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN6@Py_IncRef:

; 907  :         (((PyObject*)(op))->ob_refcnt++);

  0006a	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  0006f	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00073	48 ff c0	 inc	 rax
  00076	48 8b 4c 24 40	 mov	 rcx, QWORD PTR op$[rsp]
  0007b	48 89 41 50	 mov	 QWORD PTR [rcx+80], rax
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  0007f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00083	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
EXTRN	PyLong_AsSsize_t:PROC
;	COMDAT pdata
; File c:\src\pyparallel\objects\rangeobject.c
pdata	SEGMENT
$pdata$range_length DD imagerel range_length
	DD	imagerel range_length+28
	DD	imagerel $unwind$range_length
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$range_length DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT range_length
_TEXT	SEGMENT
r$ = 48
range_length PROC					; COMDAT

; 231  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 232  :     return PyLong_AsSsize_t(r->length);

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR r$[rsp]
  0000e	48 8b 48 78	 mov	 rcx, QWORD PTR [rax+120]
  00012	e8 00 00 00 00	 call	 PyLong_AsSsize_t

; 233  : }

  00017	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0001b	c3		 ret	 0
range_length ENDP
_TEXT	ENDS
EXTRN	PyLong_FromSsize_t:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$range_item DD imagerel range_item
	DD	imagerel range_item+81
	DD	imagerel $unwind$range_item
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$range_item DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT range_item
_TEXT	SEGMENT
res$ = 32
arg$ = 40
r$ = 64
i$ = 72
range_item PROC						; COMDAT

; 311  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 312  :     PyObject *res, *arg = PyLong_FromSsize_t(i);

  0000e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR i$[rsp]
  00013	e8 00 00 00 00	 call	 PyLong_FromSsize_t
  00018	48 89 44 24 28	 mov	 QWORD PTR arg$[rsp], rax

; 313  :     if (!arg) {

  0001d	48 83 7c 24 28
	00		 cmp	 QWORD PTR arg$[rsp], 0
  00023	75 04		 jne	 SHORT $LN1@range_item

; 314  :         return NULL;

  00025	33 c0		 xor	 eax, eax
  00027	eb 23		 jmp	 SHORT $LN2@range_item
$LN1@range_item:

; 315  :     }
; 316  :     res = compute_range_item(r, arg);

  00029	48 8b 54 24 28	 mov	 rdx, QWORD PTR arg$[rsp]
  0002e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR r$[rsp]
  00033	e8 00 00 00 00	 call	 compute_range_item
  00038	48 89 44 24 20	 mov	 QWORD PTR res$[rsp], rax

; 317  :     Py_DECREF(arg);

  0003d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR arg$[rsp]
  00042	e8 00 00 00 00	 call	 _Py_DecRef

; 318  :     return res;

  00047	48 8b 44 24 20	 mov	 rax, QWORD PTR res$[rsp]
$LN2@range_item:

; 319  : }

  0004c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00050	c3		 ret	 0
range_item ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CA@JHFAGFCE@range?5object?5index?5out?5of?5range?$AA@ ; `string'
EXTRN	PyExc_IndexError:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$compute_range_item DD imagerel compute_range_item
	DD	imagerel compute_range_item+334
	DD	imagerel $unwind$compute_range_item
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$compute_range_item DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_0CA@JHFAGFCE@range?5object?5index?5out?5of?5range?$AA@
CONST	SEGMENT
??_C@_0CA@JHFAGFCE@range?5object?5index?5out?5of?5range?$AA@ DB 'range ob'
	DB	'ject index out of range', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT compute_range_item
_TEXT	SEGMENT
i$ = 32
cmp_result$ = 40
zero$ = 48
result$ = 56
r$ = 80
arg$ = 88
compute_range_item PROC					; COMDAT

; 252  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 253  :     int cmp_result;
; 254  :     PyObject *i, *result;
; 255  : 
; 256  :     PyObject *zero = PyLong_FromLong(0);

  0000e	33 c9		 xor	 ecx, ecx
  00010	e8 00 00 00 00	 call	 PyLong_FromLong
  00015	48 89 44 24 30	 mov	 QWORD PTR zero$[rsp], rax

; 257  :     if (zero == NULL)

  0001a	48 83 7c 24 30
	00		 cmp	 QWORD PTR zero$[rsp], 0
  00020	75 07		 jne	 SHORT $LN8@compute_ra@2

; 258  :         return NULL;

  00022	33 c0		 xor	 eax, eax
  00024	e9 20 01 00 00	 jmp	 $LN9@compute_ra@2
$LN8@compute_ra@2:

; 259  : 
; 260  :     /* PyLong equivalent to:
; 261  :      *   if (arg < 0) {
; 262  :      *     i = r->length + arg
; 263  :      *   } else {
; 264  :      *     i = arg
; 265  :      *   }
; 266  :      */
; 267  :     cmp_result = PyObject_RichCompareBool(arg, zero, Py_LT);

  00029	45 33 c0	 xor	 r8d, r8d
  0002c	48 8b 54 24 30	 mov	 rdx, QWORD PTR zero$[rsp]
  00031	48 8b 4c 24 58	 mov	 rcx, QWORD PTR arg$[rsp]
  00036	e8 00 00 00 00	 call	 PyObject_RichCompareBool
  0003b	89 44 24 28	 mov	 DWORD PTR cmp_result$[rsp], eax

; 268  :     if (cmp_result == -1) {

  0003f	83 7c 24 28 ff	 cmp	 DWORD PTR cmp_result$[rsp], -1
  00044	75 11		 jne	 SHORT $LN7@compute_ra@2

; 269  :         Py_DECREF(zero);

  00046	48 8b 4c 24 30	 mov	 rcx, QWORD PTR zero$[rsp]
  0004b	e8 00 00 00 00	 call	 _Py_DecRef

; 270  :         return NULL;

  00050	33 c0		 xor	 eax, eax
  00052	e9 f2 00 00 00	 jmp	 $LN9@compute_ra@2
$LN7@compute_ra@2:

; 271  :     }
; 272  :     if (cmp_result == 1) {

  00057	83 7c 24 28 01	 cmp	 DWORD PTR cmp_result$[rsp], 1
  0005c	75 33		 jne	 SHORT $LN6@compute_ra@2

; 273  :       i = PyNumber_Add(r->length, arg);

  0005e	48 8b 54 24 58	 mov	 rdx, QWORD PTR arg$[rsp]
  00063	48 8b 44 24 50	 mov	 rax, QWORD PTR r$[rsp]
  00068	48 8b 48 78	 mov	 rcx, QWORD PTR [rax+120]
  0006c	e8 00 00 00 00	 call	 PyNumber_Add
  00071	48 89 44 24 20	 mov	 QWORD PTR i$[rsp], rax

; 274  :       if (!i) {

  00076	48 83 7c 24 20
	00		 cmp	 QWORD PTR i$[rsp], 0
  0007c	75 11		 jne	 SHORT $LN5@compute_ra@2

; 275  :         Py_DECREF(zero);

  0007e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR zero$[rsp]
  00083	e8 00 00 00 00	 call	 _Py_DecRef

; 276  :         return NULL;

  00088	33 c0		 xor	 eax, eax
  0008a	e9 ba 00 00 00	 jmp	 $LN9@compute_ra@2
$LN5@compute_ra@2:

; 277  :       }
; 278  :     } else {

  0008f	eb 14		 jmp	 SHORT $LN4@compute_ra@2
$LN6@compute_ra@2:

; 279  :       i = arg;

  00091	48 8b 44 24 58	 mov	 rax, QWORD PTR arg$[rsp]
  00096	48 89 44 24 20	 mov	 QWORD PTR i$[rsp], rax

; 280  :       Py_INCREF(i);

  0009b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR i$[rsp]
  000a0	e8 00 00 00 00	 call	 _Py_IncRef
$LN4@compute_ra@2:

; 281  :     }
; 282  : 
; 283  :     /* PyLong equivalent to:
; 284  :      *   if (i < 0 || i >= r->length) {
; 285  :      *     <report index out of bounds>
; 286  :      *   }
; 287  :      */
; 288  :     cmp_result = PyObject_RichCompareBool(i, zero, Py_LT);

  000a5	45 33 c0	 xor	 r8d, r8d
  000a8	48 8b 54 24 30	 mov	 rdx, QWORD PTR zero$[rsp]
  000ad	48 8b 4c 24 20	 mov	 rcx, QWORD PTR i$[rsp]
  000b2	e8 00 00 00 00	 call	 PyObject_RichCompareBool
  000b7	89 44 24 28	 mov	 DWORD PTR cmp_result$[rsp], eax

; 289  :     Py_DECREF(zero);

  000bb	48 8b 4c 24 30	 mov	 rcx, QWORD PTR zero$[rsp]
  000c0	e8 00 00 00 00	 call	 _Py_DecRef

; 290  :     if (cmp_result == 0) {

  000c5	83 7c 24 28 00	 cmp	 DWORD PTR cmp_result$[rsp], 0
  000ca	75 1d		 jne	 SHORT $LN3@compute_ra@2

; 291  :         cmp_result = PyObject_RichCompareBool(i, r->length, Py_GE);

  000cc	41 b8 05 00 00
	00		 mov	 r8d, 5
  000d2	48 8b 44 24 50	 mov	 rax, QWORD PTR r$[rsp]
  000d7	48 8b 50 78	 mov	 rdx, QWORD PTR [rax+120]
  000db	48 8b 4c 24 20	 mov	 rcx, QWORD PTR i$[rsp]
  000e0	e8 00 00 00 00	 call	 PyObject_RichCompareBool
  000e5	89 44 24 28	 mov	 DWORD PTR cmp_result$[rsp], eax
$LN3@compute_ra@2:

; 292  :     }
; 293  :     if (cmp_result == -1) {

  000e9	83 7c 24 28 ff	 cmp	 DWORD PTR cmp_result$[rsp], -1
  000ee	75 0e		 jne	 SHORT $LN2@compute_ra@2

; 294  :        Py_DECREF(i);

  000f0	48 8b 4c 24 20	 mov	 rcx, QWORD PTR i$[rsp]
  000f5	e8 00 00 00 00	 call	 _Py_DecRef

; 295  :        return NULL;

  000fa	33 c0		 xor	 eax, eax
  000fc	eb 4b		 jmp	 SHORT $LN9@compute_ra@2
$LN2@compute_ra@2:

; 296  :     }
; 297  :     if (cmp_result == 1) {

  000fe	83 7c 24 28 01	 cmp	 DWORD PTR cmp_result$[rsp], 1
  00103	75 21		 jne	 SHORT $LN1@compute_ra@2

; 298  :         Py_DECREF(i);

  00105	48 8b 4c 24 20	 mov	 rcx, QWORD PTR i$[rsp]
  0010a	e8 00 00 00 00	 call	 _Py_DecRef

; 299  :         PyErr_SetString(PyExc_IndexError,
; 300  :                         "range object index out of range");

  0010f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CA@JHFAGFCE@range?5object?5index?5out?5of?5range?$AA@
  00116	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_IndexError
  0011d	e8 00 00 00 00	 call	 PyErr_SetString

; 301  :         return NULL;

  00122	33 c0		 xor	 eax, eax
  00124	eb 23		 jmp	 SHORT $LN9@compute_ra@2
$LN1@compute_ra@2:

; 302  :     }
; 303  : 
; 304  :     result = compute_item(r, i);

  00126	48 8b 54 24 20	 mov	 rdx, QWORD PTR i$[rsp]
  0012b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR r$[rsp]
  00130	e8 00 00 00 00	 call	 compute_item
  00135	48 89 44 24 38	 mov	 QWORD PTR result$[rsp], rax

; 305  :     Py_DECREF(i);

  0013a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR i$[rsp]
  0013f	e8 00 00 00 00	 call	 _Py_DecRef

; 306  :     return result;

  00144	48 8b 44 24 38	 mov	 rax, QWORD PTR result$[rsp]
$LN9@compute_ra@2:

; 307  : }

  00149	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0014d	c3		 ret	 0
compute_range_item ENDP
_TEXT	ENDS
EXTRN	PyNumber_Multiply:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$compute_item DD imagerel compute_item
	DD	imagerel compute_item+94
	DD	imagerel $unwind$compute_item
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$compute_item DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT compute_item
_TEXT	SEGMENT
incr$ = 32
result$ = 40
r$ = 64
i$ = 72
compute_item PROC					; COMDAT

; 237  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 238  :     PyObject *incr, *result;
; 239  :     /* PyLong equivalent to:
; 240  :      *    return r->start + (i * r->step)
; 241  :      */
; 242  :     incr = PyNumber_Multiply(i, r->step);

  0000e	48 8b 44 24 40	 mov	 rax, QWORD PTR r$[rsp]
  00013	48 8b 50 70	 mov	 rdx, QWORD PTR [rax+112]
  00017	48 8b 4c 24 48	 mov	 rcx, QWORD PTR i$[rsp]
  0001c	e8 00 00 00 00	 call	 PyNumber_Multiply
  00021	48 89 44 24 20	 mov	 QWORD PTR incr$[rsp], rax

; 243  :     if (!incr)

  00026	48 83 7c 24 20
	00		 cmp	 QWORD PTR incr$[rsp], 0
  0002c	75 04		 jne	 SHORT $LN1@compute_it

; 244  :         return NULL;

  0002e	33 c0		 xor	 eax, eax
  00030	eb 27		 jmp	 SHORT $LN2@compute_it
$LN1@compute_it:

; 245  :     result = PyNumber_Add(r->start, incr);

  00032	48 8b 54 24 20	 mov	 rdx, QWORD PTR incr$[rsp]
  00037	48 8b 44 24 40	 mov	 rax, QWORD PTR r$[rsp]
  0003c	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00040	e8 00 00 00 00	 call	 PyNumber_Add
  00045	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax

; 246  :     Py_DECREF(incr);

  0004a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR incr$[rsp]
  0004f	e8 00 00 00 00	 call	 _Py_DecRef

; 247  :     return result;

  00054	48 8b 44 24 28	 mov	 rax, QWORD PTR result$[rsp]
$LN2@compute_it:

; 248  : }

  00059	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0005d	c3		 ret	 0
compute_item ENDP
_TEXT	ENDS
EXTRN	_PySequence_IterSearch:PROC
EXTRN	PyBool_Type:BYTE
EXTRN	PyLong_Type:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$range_contains DD imagerel range_contains
	DD	imagerel range_contains+93
	DD	imagerel $unwind$range_contains
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$range_contains DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT range_contains
_TEXT	SEGMENT
r$ = 48
ob$ = 56
range_contains PROC					; COMDAT

; 606  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 607  :     if (PyLong_CheckExact(ob) || PyBool_Check(ob))

  0000e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyLong_Type
  00015	48 8b 4c 24 38	 mov	 rcx, QWORD PTR ob$[rsp]
  0001a	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0001e	74 12		 je	 SHORT $LN1@range_cont
  00020	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyBool_Type
  00027	48 8b 4c 24 38	 mov	 rcx, QWORD PTR ob$[rsp]
  0002c	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00030	75 11		 jne	 SHORT $LN2@range_cont
$LN1@range_cont:

; 608  :         return range_contains_long(r, ob);

  00032	48 8b 54 24 38	 mov	 rdx, QWORD PTR ob$[rsp]
  00037	48 8b 4c 24 30	 mov	 rcx, QWORD PTR r$[rsp]
  0003c	e8 00 00 00 00	 call	 range_contains_long
  00041	eb 15		 jmp	 SHORT $LN3@range_cont
$LN2@range_cont:

; 609  : 
; 610  :     return (int)_PySequence_IterSearch((PyObject*)r, ob,
; 611  :                                        PY_ITERSEARCH_CONTAINS);

  00043	41 b8 03 00 00
	00		 mov	 r8d, 3
  00049	48 8b 54 24 38	 mov	 rdx, QWORD PTR ob$[rsp]
  0004e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR r$[rsp]
  00053	e8 00 00 00 00	 call	 _PySequence_IterSearch
$LN3@range_cont:

; 612  : }

  00058	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0005c	c3		 ret	 0
range_contains ENDP
_TEXT	ENDS
EXTRN	PyNumber_Remainder:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$range_contains_long DD imagerel range_contains_long
	DD	imagerel range_contains_long+448
	DD	imagerel $unwind$range_contains_long
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$range_contains_long DD 010e01H
	DD	0a20eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT range_contains_long
_TEXT	SEGMENT
cmp3$ = 32
tmp2$ = 40
cmp1$ = 48
tmp1$ = 56
zero$ = 64
cmp2$ = 72
result$ = 76
r$ = 96
ob$ = 104
range_contains_long PROC				; COMDAT

; 556  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 557  :     int cmp1, cmp2, cmp3;
; 558  :     PyObject *tmp1 = NULL;

  0000e	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR tmp1$[rsp], 0

; 559  :     PyObject *tmp2 = NULL;

  00017	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR tmp2$[rsp], 0

; 560  :     PyObject *zero = NULL;

  00020	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR zero$[rsp], 0

; 561  :     int result = -1;

  00029	c7 44 24 4c ff
	ff ff ff	 mov	 DWORD PTR result$[rsp], -1

; 562  : 
; 563  :     zero = PyLong_FromLong(0);

  00031	33 c9		 xor	 ecx, ecx
  00033	e8 00 00 00 00	 call	 PyLong_FromLong
  00038	48 89 44 24 40	 mov	 QWORD PTR zero$[rsp], rax

; 564  :     if (zero == NULL) /* MemoryError in int(0) */

  0003d	48 83 7c 24 40
	00		 cmp	 QWORD PTR zero$[rsp], 0
  00043	75 05		 jne	 SHORT $LN22@range_cont@2

; 565  :         goto end;

  00045	e9 25 01 00 00	 jmp	 $end$20905
$LN22@range_cont@2:

; 566  : 
; 567  :     /* Check if the value can possibly be in the range. */
; 568  : 
; 569  :     cmp1 = PyObject_RichCompareBool(r->step, zero, Py_GT);

  0004a	41 b8 04 00 00
	00		 mov	 r8d, 4
  00050	48 8b 54 24 40	 mov	 rdx, QWORD PTR zero$[rsp]
  00055	48 8b 44 24 60	 mov	 rax, QWORD PTR r$[rsp]
  0005a	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  0005e	e8 00 00 00 00	 call	 PyObject_RichCompareBool
  00063	89 44 24 30	 mov	 DWORD PTR cmp1$[rsp], eax

; 570  :     if (cmp1 == -1)

  00067	83 7c 24 30 ff	 cmp	 DWORD PTR cmp1$[rsp], -1
  0006c	75 05		 jne	 SHORT $LN21@range_cont@2

; 571  :         goto end;

  0006e	e9 fc 00 00 00	 jmp	 $end$20905
$LN21@range_cont@2:

; 572  :     if (cmp1 == 1) { /* positive steps: start <= ob < stop */

  00073	83 7c 24 30 01	 cmp	 DWORD PTR cmp1$[rsp], 1
  00078	75 39		 jne	 SHORT $LN20@range_cont@2

; 573  :         cmp2 = PyObject_RichCompareBool(r->start, ob, Py_LE);

  0007a	41 b8 01 00 00
	00		 mov	 r8d, 1
  00080	48 8b 54 24 68	 mov	 rdx, QWORD PTR ob$[rsp]
  00085	48 8b 44 24 60	 mov	 rax, QWORD PTR r$[rsp]
  0008a	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  0008e	e8 00 00 00 00	 call	 PyObject_RichCompareBool
  00093	89 44 24 48	 mov	 DWORD PTR cmp2$[rsp], eax

; 574  :         cmp3 = PyObject_RichCompareBool(ob, r->stop, Py_LT);

  00097	45 33 c0	 xor	 r8d, r8d
  0009a	48 8b 44 24 60	 mov	 rax, QWORD PTR r$[rsp]
  0009f	48 8b 50 68	 mov	 rdx, QWORD PTR [rax+104]
  000a3	48 8b 4c 24 68	 mov	 rcx, QWORD PTR ob$[rsp]
  000a8	e8 00 00 00 00	 call	 PyObject_RichCompareBool
  000ad	89 44 24 20	 mov	 DWORD PTR cmp3$[rsp], eax

; 575  :     }
; 576  :     else { /* negative steps: stop < ob <= start */

  000b1	eb 37		 jmp	 SHORT $LN19@range_cont@2
$LN20@range_cont@2:

; 577  :         cmp2 = PyObject_RichCompareBool(ob, r->start, Py_LE);

  000b3	41 b8 01 00 00
	00		 mov	 r8d, 1
  000b9	48 8b 44 24 60	 mov	 rax, QWORD PTR r$[rsp]
  000be	48 8b 50 60	 mov	 rdx, QWORD PTR [rax+96]
  000c2	48 8b 4c 24 68	 mov	 rcx, QWORD PTR ob$[rsp]
  000c7	e8 00 00 00 00	 call	 PyObject_RichCompareBool
  000cc	89 44 24 48	 mov	 DWORD PTR cmp2$[rsp], eax

; 578  :         cmp3 = PyObject_RichCompareBool(r->stop, ob, Py_LT);

  000d0	45 33 c0	 xor	 r8d, r8d
  000d3	48 8b 54 24 68	 mov	 rdx, QWORD PTR ob$[rsp]
  000d8	48 8b 44 24 60	 mov	 rax, QWORD PTR r$[rsp]
  000dd	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  000e1	e8 00 00 00 00	 call	 PyObject_RichCompareBool
  000e6	89 44 24 20	 mov	 DWORD PTR cmp3$[rsp], eax
$LN19@range_cont@2:

; 579  :     }
; 580  : 
; 581  :     if (cmp2 == -1 || cmp3 == -1) /* TypeError */

  000ea	83 7c 24 48 ff	 cmp	 DWORD PTR cmp2$[rsp], -1
  000ef	74 07		 je	 SHORT $LN17@range_cont@2
  000f1	83 7c 24 20 ff	 cmp	 DWORD PTR cmp3$[rsp], -1
  000f6	75 02		 jne	 SHORT $LN18@range_cont@2
$LN17@range_cont@2:

; 582  :         goto end;

  000f8	eb 75		 jmp	 SHORT $end$20905
$LN18@range_cont@2:

; 583  :     if (cmp2 == 0 || cmp3 == 0) { /* ob outside of range */

  000fa	83 7c 24 48 00	 cmp	 DWORD PTR cmp2$[rsp], 0
  000ff	74 07		 je	 SHORT $LN15@range_cont@2
  00101	83 7c 24 20 00	 cmp	 DWORD PTR cmp3$[rsp], 0
  00106	75 0a		 jne	 SHORT $LN16@range_cont@2
$LN15@range_cont@2:

; 584  :         result = 0;

  00108	c7 44 24 4c 00
	00 00 00	 mov	 DWORD PTR result$[rsp], 0

; 585  :         goto end;

  00110	eb 5d		 jmp	 SHORT $end$20905
$LN16@range_cont@2:

; 586  :     }
; 587  : 
; 588  :     /* Check that the stride does not invalidate ob's membership. */
; 589  :     tmp1 = PyNumber_Subtract(ob, r->start);

  00112	48 8b 44 24 60	 mov	 rax, QWORD PTR r$[rsp]
  00117	48 8b 50 60	 mov	 rdx, QWORD PTR [rax+96]
  0011b	48 8b 4c 24 68	 mov	 rcx, QWORD PTR ob$[rsp]
  00120	e8 00 00 00 00	 call	 PyNumber_Subtract
  00125	48 89 44 24 38	 mov	 QWORD PTR tmp1$[rsp], rax

; 590  :     if (tmp1 == NULL)

  0012a	48 83 7c 24 38
	00		 cmp	 QWORD PTR tmp1$[rsp], 0
  00130	75 02		 jne	 SHORT $LN14@range_cont@2

; 591  :         goto end;

  00132	eb 3b		 jmp	 SHORT $end$20905
$LN14@range_cont@2:

; 592  :     tmp2 = PyNumber_Remainder(tmp1, r->step);

  00134	48 8b 44 24 60	 mov	 rax, QWORD PTR r$[rsp]
  00139	48 8b 50 70	 mov	 rdx, QWORD PTR [rax+112]
  0013d	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tmp1$[rsp]
  00142	e8 00 00 00 00	 call	 PyNumber_Remainder
  00147	48 89 44 24 28	 mov	 QWORD PTR tmp2$[rsp], rax

; 593  :     if (tmp2 == NULL)

  0014c	48 83 7c 24 28
	00		 cmp	 QWORD PTR tmp2$[rsp], 0
  00152	75 02		 jne	 SHORT $LN13@range_cont@2

; 594  :         goto end;

  00154	eb 19		 jmp	 SHORT $end$20905
$LN13@range_cont@2:

; 595  :     /* result = (int(ob) - start % step) == 0 */
; 596  :     result = PyObject_RichCompareBool(tmp2, zero, Py_EQ);

  00156	41 b8 02 00 00
	00		 mov	 r8d, 2
  0015c	48 8b 54 24 40	 mov	 rdx, QWORD PTR zero$[rsp]
  00161	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tmp2$[rsp]
  00166	e8 00 00 00 00	 call	 PyObject_RichCompareBool
  0016b	89 44 24 4c	 mov	 DWORD PTR result$[rsp], eax
$end$20905:
$LN12@range_cont@2:

; 597  :   end:
; 598  :     Py_XDECREF(tmp1);

  0016f	48 83 7c 24 38
	00		 cmp	 QWORD PTR tmp1$[rsp], 0
  00175	74 0a		 je	 SHORT $LN9@range_cont@2
  00177	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tmp1$[rsp]
  0017c	e8 00 00 00 00	 call	 _Py_DecRef
$LN9@range_cont@2:
  00181	33 c0		 xor	 eax, eax
  00183	85 c0		 test	 eax, eax
  00185	75 e8		 jne	 SHORT $LN12@range_cont@2
$LN8@range_cont@2:

; 599  :     Py_XDECREF(tmp2);

  00187	48 83 7c 24 28
	00		 cmp	 QWORD PTR tmp2$[rsp], 0
  0018d	74 0a		 je	 SHORT $LN5@range_cont@2
  0018f	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tmp2$[rsp]
  00194	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@range_cont@2:
  00199	33 c0		 xor	 eax, eax
  0019b	85 c0		 test	 eax, eax
  0019d	75 e8		 jne	 SHORT $LN8@range_cont@2
$LN4@range_cont@2:

; 600  :     Py_XDECREF(zero);

  0019f	48 83 7c 24 40
	00		 cmp	 QWORD PTR zero$[rsp], 0
  001a5	74 0a		 je	 SHORT $LN1@range_cont@2
  001a7	48 8b 4c 24 40	 mov	 rcx, QWORD PTR zero$[rsp]
  001ac	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@range_cont@2:
  001b1	33 c0		 xor	 eax, eax
  001b3	85 c0		 test	 eax, eax
  001b5	75 e8		 jne	 SHORT $LN4@range_cont@2

; 601  :     return result;

  001b7	8b 44 24 4c	 mov	 eax, DWORD PTR result$[rsp]

; 602  : }

  001bb	48 83 c4 58	 add	 rsp, 88			; 00000058H
  001bf	c3		 ret	 0
range_contains_long ENDP
_TEXT	ENDS
EXTRN	PyErr_BadArgument:PROC
EXTRN	_Py_FalseStruct:BYTE
EXTRN	_Py_TrueStruct:BYTE
EXTRN	__ImageBase:BYTE
EXTRN	_Py_NotImplementedStruct:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$range_richcompare DD imagerel range_richcompare
	DD	imagerel range_richcompare+284
	DD	imagerel $unwind$range_richcompare
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$range_richcompare DD 011301H
	DD	06213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT range_richcompare
_TEXT	SEGMENT
result$ = 32
tv67 = 36
tv74 = 40
self$ = 64
other$ = 72
op$ = 80
range_richcompare PROC					; COMDAT

; 662  : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 663  :     int result;
; 664  : 
; 665  :     if (!PyRange_Check(other))

  00013	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyRange_Type
  0001a	48 8b 4c 24 48	 mov	 rcx, QWORD PTR other$[rsp]
  0001f	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00023	74 18		 je	 SHORT $LN10@range_rich

; 666  :         Py_RETURN_NOTIMPLEMENTED;

  00025	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NotImplementedStruct
  0002c	e8 00 00 00 00	 call	 _Py_IncRef
  00031	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NotImplementedStruct
  00038	e9 c0 00 00 00	 jmp	 $LN11@range_rich
$LN10@range_rich:

; 667  :     switch (op) {

  0003d	8b 44 24 50	 mov	 eax, DWORD PTR op$[rsp]
  00041	89 44 24 24	 mov	 DWORD PTR tv67[rsp], eax
  00045	83 7c 24 24 05	 cmp	 DWORD PTR tv67[rsp], 5
  0004a	0f 87 a6 00 00
	00		 ja	 $LN1@range_rich
  00050	48 63 44 24 24	 movsxd	 rax, DWORD PTR tv67[rsp]
  00055	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  0005c	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN15@range_rich[rcx+rax*4]
  00063	48 03 c1	 add	 rax, rcx
  00066	ff e0		 jmp	 rax
$LN7@range_rich:

; 668  :     case Py_NE:
; 669  :     case Py_EQ:
; 670  :         result = range_equals((rangeobject*)self, (rangeobject*)other);

  00068	48 8b 54 24 48	 mov	 rdx, QWORD PTR other$[rsp]
  0006d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  00072	e8 00 00 00 00	 call	 range_equals
  00077	89 44 24 20	 mov	 DWORD PTR result$[rsp], eax

; 671  :         if (result == -1)

  0007b	83 7c 24 20 ff	 cmp	 DWORD PTR result$[rsp], -1
  00080	75 04		 jne	 SHORT $LN6@range_rich

; 672  :             return NULL;

  00082	33 c0		 xor	 eax, eax
  00084	eb 77		 jmp	 SHORT $LN11@range_rich
$LN6@range_rich:

; 673  :         if (op == Py_NE)

  00086	83 7c 24 50 03	 cmp	 DWORD PTR op$[rsp], 3
  0008b	75 21		 jne	 SHORT $LN5@range_rich

; 674  :             result = !result;

  0008d	83 7c 24 20 00	 cmp	 DWORD PTR result$[rsp], 0
  00092	75 0a		 jne	 SHORT $LN13@range_rich
  00094	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR tv74[rsp], 1
  0009c	eb 08		 jmp	 SHORT $LN14@range_rich
$LN13@range_rich:
  0009e	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR tv74[rsp], 0
$LN14@range_rich:
  000a6	8b 44 24 28	 mov	 eax, DWORD PTR tv74[rsp]
  000aa	89 44 24 20	 mov	 DWORD PTR result$[rsp], eax
$LN5@range_rich:

; 675  :         if (result)

  000ae	83 7c 24 20 00	 cmp	 DWORD PTR result$[rsp], 0
  000b3	74 17		 je	 SHORT $LN4@range_rich

; 676  :             Py_RETURN_TRUE;

  000b5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_TrueStruct
  000bc	e8 00 00 00 00	 call	 _Py_IncRef
  000c1	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_TrueStruct
  000c8	eb 33		 jmp	 SHORT $LN11@range_rich

; 677  :         else

  000ca	eb 15		 jmp	 SHORT $LN3@range_rich
$LN4@range_rich:

; 678  :             Py_RETURN_FALSE;

  000cc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_FalseStruct
  000d3	e8 00 00 00 00	 call	 _Py_IncRef
  000d8	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_FalseStruct
  000df	eb 1c		 jmp	 SHORT $LN11@range_rich
$LN3@range_rich:
$LN2@range_rich:

; 679  :     case Py_LE:
; 680  :     case Py_GE:
; 681  :     case Py_LT:
; 682  :     case Py_GT:
; 683  :         Py_RETURN_NOTIMPLEMENTED;

  000e1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NotImplementedStruct
  000e8	e8 00 00 00 00	 call	 _Py_IncRef
  000ed	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NotImplementedStruct
  000f4	eb 07		 jmp	 SHORT $LN11@range_rich
$LN1@range_rich:

; 684  :     default:
; 685  :         PyErr_BadArgument();

  000f6	e8 00 00 00 00	 call	 PyErr_BadArgument

; 686  :         return NULL;

  000fb	33 c0		 xor	 eax, eax
$LN11@range_rich:

; 687  :     }
; 688  : }

  000fd	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00101	c3		 ret	 0
  00102	66 90		 npad	 2
$LN15@range_rich:
  00104	00 00 00 00	 DD	 $LN2@range_rich
  00108	00 00 00 00	 DD	 $LN2@range_rich
  0010c	00 00 00 00	 DD	 $LN7@range_rich
  00110	00 00 00 00	 DD	 $LN7@range_rich
  00114	00 00 00 00	 DD	 $LN2@range_rich
  00118	00 00 00 00	 DD	 $LN2@range_rich
range_richcompare ENDP
_TEXT	ENDS
EXTRN	PyObject_Not:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$range_equals DD imagerel range_equals
	DD	imagerel range_equals+281
	DD	imagerel $unwind$range_equals
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$range_equals DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT range_equals
_TEXT	SEGMENT
cmp_result$ = 32
one$ = 40
r0$ = 64
r1$ = 72
range_equals PROC					; COMDAT

; 631  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 632  :     int cmp_result;
; 633  :     PyObject *one;
; 634  : 
; 635  :     if (r0 == r1)

  0000e	48 8b 44 24 48	 mov	 rax, QWORD PTR r1$[rsp]
  00013	48 39 44 24 40	 cmp	 QWORD PTR r0$[rsp], rax
  00018	75 0a		 jne	 SHORT $LN6@range_equa

; 636  :         return 1;

  0001a	b8 01 00 00 00	 mov	 eax, 1
  0001f	e9 f0 00 00 00	 jmp	 $LN7@range_equa
$LN6@range_equa:

; 637  :     cmp_result = PyObject_RichCompareBool(r0->length, r1->length, Py_EQ);

  00024	41 b8 02 00 00
	00		 mov	 r8d, 2
  0002a	48 8b 44 24 48	 mov	 rax, QWORD PTR r1$[rsp]
  0002f	48 8b 50 78	 mov	 rdx, QWORD PTR [rax+120]
  00033	48 8b 44 24 40	 mov	 rax, QWORD PTR r0$[rsp]
  00038	48 8b 48 78	 mov	 rcx, QWORD PTR [rax+120]
  0003c	e8 00 00 00 00	 call	 PyObject_RichCompareBool
  00041	89 44 24 20	 mov	 DWORD PTR cmp_result$[rsp], eax

; 638  :     /* Return False or error to the caller. */
; 639  :     if (cmp_result != 1)

  00045	83 7c 24 20 01	 cmp	 DWORD PTR cmp_result$[rsp], 1
  0004a	74 09		 je	 SHORT $LN5@range_equa

; 640  :         return cmp_result;

  0004c	8b 44 24 20	 mov	 eax, DWORD PTR cmp_result$[rsp]
  00050	e9 bf 00 00 00	 jmp	 $LN7@range_equa
$LN5@range_equa:

; 641  :     cmp_result = PyObject_Not(r0->length);

  00055	48 8b 44 24 40	 mov	 rax, QWORD PTR r0$[rsp]
  0005a	48 8b 48 78	 mov	 rcx, QWORD PTR [rax+120]
  0005e	e8 00 00 00 00	 call	 PyObject_Not
  00063	89 44 24 20	 mov	 DWORD PTR cmp_result$[rsp], eax

; 642  :     /* Return True or error to the caller. */
; 643  :     if (cmp_result != 0)

  00067	83 7c 24 20 00	 cmp	 DWORD PTR cmp_result$[rsp], 0
  0006c	74 09		 je	 SHORT $LN4@range_equa

; 644  :         return cmp_result;

  0006e	8b 44 24 20	 mov	 eax, DWORD PTR cmp_result$[rsp]
  00072	e9 9d 00 00 00	 jmp	 $LN7@range_equa
$LN4@range_equa:

; 645  :     cmp_result = PyObject_RichCompareBool(r0->start, r1->start, Py_EQ);

  00077	41 b8 02 00 00
	00		 mov	 r8d, 2
  0007d	48 8b 44 24 48	 mov	 rax, QWORD PTR r1$[rsp]
  00082	48 8b 50 60	 mov	 rdx, QWORD PTR [rax+96]
  00086	48 8b 44 24 40	 mov	 rax, QWORD PTR r0$[rsp]
  0008b	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  0008f	e8 00 00 00 00	 call	 PyObject_RichCompareBool
  00094	89 44 24 20	 mov	 DWORD PTR cmp_result$[rsp], eax

; 646  :     /* Return False or error to the caller. */
; 647  :     if (cmp_result != 1)

  00098	83 7c 24 20 01	 cmp	 DWORD PTR cmp_result$[rsp], 1
  0009d	74 06		 je	 SHORT $LN3@range_equa

; 648  :         return cmp_result;

  0009f	8b 44 24 20	 mov	 eax, DWORD PTR cmp_result$[rsp]
  000a3	eb 6f		 jmp	 SHORT $LN7@range_equa
$LN3@range_equa:

; 649  :     one = PyLong_FromLong(1);

  000a5	b9 01 00 00 00	 mov	 ecx, 1
  000aa	e8 00 00 00 00	 call	 PyLong_FromLong
  000af	48 89 44 24 28	 mov	 QWORD PTR one$[rsp], rax

; 650  :     if (!one)

  000b4	48 83 7c 24 28
	00		 cmp	 QWORD PTR one$[rsp], 0
  000ba	75 07		 jne	 SHORT $LN2@range_equa

; 651  :         return -1;

  000bc	b8 ff ff ff ff	 mov	 eax, -1
  000c1	eb 51		 jmp	 SHORT $LN7@range_equa
$LN2@range_equa:

; 652  :     cmp_result = PyObject_RichCompareBool(r0->length, one, Py_EQ);

  000c3	41 b8 02 00 00
	00		 mov	 r8d, 2
  000c9	48 8b 54 24 28	 mov	 rdx, QWORD PTR one$[rsp]
  000ce	48 8b 44 24 40	 mov	 rax, QWORD PTR r0$[rsp]
  000d3	48 8b 48 78	 mov	 rcx, QWORD PTR [rax+120]
  000d7	e8 00 00 00 00	 call	 PyObject_RichCompareBool
  000dc	89 44 24 20	 mov	 DWORD PTR cmp_result$[rsp], eax

; 653  :     Py_DECREF(one);

  000e0	48 8b 4c 24 28	 mov	 rcx, QWORD PTR one$[rsp]
  000e5	e8 00 00 00 00	 call	 _Py_DecRef

; 654  :     /* Return True or error to the caller. */
; 655  :     if (cmp_result != 0)

  000ea	83 7c 24 20 00	 cmp	 DWORD PTR cmp_result$[rsp], 0
  000ef	74 06		 je	 SHORT $LN1@range_equa

; 656  :         return cmp_result;

  000f1	8b 44 24 20	 mov	 eax, DWORD PTR cmp_result$[rsp]
  000f5	eb 1d		 jmp	 SHORT $LN7@range_equa
$LN1@range_equa:

; 657  :     return PyObject_RichCompareBool(r0->step, r1->step, Py_EQ);

  000f7	41 b8 02 00 00
	00		 mov	 r8d, 2
  000fd	48 8b 44 24 48	 mov	 rax, QWORD PTR r1$[rsp]
  00102	48 8b 50 70	 mov	 rdx, QWORD PTR [rax+112]
  00106	48 8b 44 24 40	 mov	 rax, QWORD PTR r0$[rsp]
  0010b	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  0010f	e8 00 00 00 00	 call	 PyObject_RichCompareBool
$LN7@range_equa:

; 658  : }

  00114	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00118	c3		 ret	 0
range_equals ENDP
_TEXT	ENDS
EXTRN	PyObject_Hash:PROC
EXTRN	_Py_NoneStruct:BYTE
EXTRN	PyTuple_New:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$range_hash DD imagerel range_hash
	DD	imagerel range_hash+404
	DD	imagerel $unwind$range_hash
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$range_hash DD 010901H
	DD	08209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT range_hash
_TEXT	SEGMENT
cmp_result$ = 32
result$ = 40
t$ = 48
one$21011 = 56
r$ = 80
range_hash PROC						; COMDAT

; 700  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 701  :     PyObject *t;
; 702  :     Py_hash_t result = -1;

  00009	48 c7 44 24 28
	ff ff ff ff	 mov	 QWORD PTR result$[rsp], -1

; 703  :     int cmp_result;
; 704  : 
; 705  :     t = PyTuple_New(3);

  00012	b9 03 00 00 00	 mov	 ecx, 3
  00017	e8 00 00 00 00	 call	 PyTuple_New
  0001c	48 89 44 24 30	 mov	 QWORD PTR t$[rsp], rax

; 706  :     if (!t)

  00021	48 83 7c 24 30
	00		 cmp	 QWORD PTR t$[rsp], 0
  00027	75 0c		 jne	 SHORT $LN8@range_hash

; 707  :         return -1;

  00029	48 c7 c0 ff ff
	ff ff		 mov	 rax, -1
  00030	e9 5a 01 00 00	 jmp	 $LN9@range_hash
$LN8@range_hash:

; 708  :     Py_INCREF(r->length);

  00035	48 8b 44 24 50	 mov	 rax, QWORD PTR r$[rsp]
  0003a	48 8b 48 78	 mov	 rcx, QWORD PTR [rax+120]
  0003e	e8 00 00 00 00	 call	 _Py_IncRef

; 709  :     PyTuple_SET_ITEM(t, 0, r->length);

  00043	48 8b 44 24 30	 mov	 rax, QWORD PTR t$[rsp]
  00048	48 8b 4c 24 50	 mov	 rcx, QWORD PTR r$[rsp]
  0004d	48 8b 49 78	 mov	 rcx, QWORD PTR [rcx+120]
  00051	48 89 48 70	 mov	 QWORD PTR [rax+112], rcx

; 710  :     cmp_result = PyObject_Not(r->length);

  00055	48 8b 44 24 50	 mov	 rax, QWORD PTR r$[rsp]
  0005a	48 8b 48 78	 mov	 rcx, QWORD PTR [rax+120]
  0005e	e8 00 00 00 00	 call	 PyObject_Not
  00063	89 44 24 20	 mov	 DWORD PTR cmp_result$[rsp], eax

; 711  :     if (cmp_result == -1)

  00067	83 7c 24 20 ff	 cmp	 DWORD PTR cmp_result$[rsp], -1
  0006c	75 05		 jne	 SHORT $LN7@range_hash

; 712  :         goto end;

  0006e	e9 0d 01 00 00	 jmp	 $end$21004
$LN7@range_hash:

; 713  :     if (cmp_result == 1) {

  00073	83 7c 24 20 01	 cmp	 DWORD PTR cmp_result$[rsp], 1
  00078	75 40		 jne	 SHORT $LN6@range_hash

; 714  :         Py_INCREF(Py_None);

  0007a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00081	e8 00 00 00 00	 call	 _Py_IncRef

; 715  :         Py_INCREF(Py_None);

  00086	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  0008d	e8 00 00 00 00	 call	 _Py_IncRef

; 716  :         PyTuple_SET_ITEM(t, 1, Py_None);

  00092	48 8b 44 24 30	 mov	 rax, QWORD PTR t$[rsp]
  00097	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  0009e	48 89 48 78	 mov	 QWORD PTR [rax+120], rcx

; 717  :         PyTuple_SET_ITEM(t, 2, Py_None);

  000a2	48 8b 44 24 30	 mov	 rax, QWORD PTR t$[rsp]
  000a7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  000ae	48 89 88 80 00
	00 00		 mov	 QWORD PTR [rax+128], rcx

; 718  :     }
; 719  :     else {

  000b5	e9 b7 00 00 00	 jmp	 $LN5@range_hash
$LN6@range_hash:

; 720  :         PyObject *one;
; 721  :         Py_INCREF(r->start);

  000ba	48 8b 44 24 50	 mov	 rax, QWORD PTR r$[rsp]
  000bf	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  000c3	e8 00 00 00 00	 call	 _Py_IncRef

; 722  :         PyTuple_SET_ITEM(t, 1, r->start);

  000c8	48 8b 44 24 30	 mov	 rax, QWORD PTR t$[rsp]
  000cd	48 8b 4c 24 50	 mov	 rcx, QWORD PTR r$[rsp]
  000d2	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  000d6	48 89 48 78	 mov	 QWORD PTR [rax+120], rcx

; 723  :         one = PyLong_FromLong(1);

  000da	b9 01 00 00 00	 mov	 ecx, 1
  000df	e8 00 00 00 00	 call	 PyLong_FromLong
  000e4	48 89 44 24 38	 mov	 QWORD PTR one$21011[rsp], rax

; 724  :         if (!one)

  000e9	48 83 7c 24 38
	00		 cmp	 QWORD PTR one$21011[rsp], 0
  000ef	75 05		 jne	 SHORT $LN4@range_hash

; 725  :             goto end;

  000f1	e9 8a 00 00 00	 jmp	 $end$21004
$LN4@range_hash:

; 726  :         cmp_result = PyObject_RichCompareBool(r->length, one, Py_EQ);

  000f6	41 b8 02 00 00
	00		 mov	 r8d, 2
  000fc	48 8b 54 24 38	 mov	 rdx, QWORD PTR one$21011[rsp]
  00101	48 8b 44 24 50	 mov	 rax, QWORD PTR r$[rsp]
  00106	48 8b 48 78	 mov	 rcx, QWORD PTR [rax+120]
  0010a	e8 00 00 00 00	 call	 PyObject_RichCompareBool
  0010f	89 44 24 20	 mov	 DWORD PTR cmp_result$[rsp], eax

; 727  :         Py_DECREF(one);

  00113	48 8b 4c 24 38	 mov	 rcx, QWORD PTR one$21011[rsp]
  00118	e8 00 00 00 00	 call	 _Py_DecRef

; 728  :         if (cmp_result == -1)

  0011d	83 7c 24 20 ff	 cmp	 DWORD PTR cmp_result$[rsp], -1
  00122	75 02		 jne	 SHORT $LN3@range_hash

; 729  :             goto end;

  00124	eb 5a		 jmp	 SHORT $end$21004
$LN3@range_hash:

; 730  :         if (cmp_result == 1) {

  00126	83 7c 24 20 01	 cmp	 DWORD PTR cmp_result$[rsp], 1
  0012b	75 21		 jne	 SHORT $LN2@range_hash

; 731  :             Py_INCREF(Py_None);

  0012d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00134	e8 00 00 00 00	 call	 _Py_IncRef

; 732  :             PyTuple_SET_ITEM(t, 2, Py_None);

  00139	48 8b 44 24 30	 mov	 rax, QWORD PTR t$[rsp]
  0013e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00145	48 89 88 80 00
	00 00		 mov	 QWORD PTR [rax+128], rcx

; 733  :         }
; 734  :         else {

  0014c	eb 23		 jmp	 SHORT $LN1@range_hash
$LN2@range_hash:

; 735  :             Py_INCREF(r->step);

  0014e	48 8b 44 24 50	 mov	 rax, QWORD PTR r$[rsp]
  00153	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  00157	e8 00 00 00 00	 call	 _Py_IncRef

; 736  :             PyTuple_SET_ITEM(t, 2, r->step);

  0015c	48 8b 44 24 30	 mov	 rax, QWORD PTR t$[rsp]
  00161	48 8b 4c 24 50	 mov	 rcx, QWORD PTR r$[rsp]
  00166	48 8b 49 70	 mov	 rcx, QWORD PTR [rcx+112]
  0016a	48 89 88 80 00
	00 00		 mov	 QWORD PTR [rax+128], rcx
$LN1@range_hash:
$LN5@range_hash:

; 737  :         }
; 738  :     }
; 739  :     result = PyObject_Hash(t);

  00171	48 8b 4c 24 30	 mov	 rcx, QWORD PTR t$[rsp]
  00176	e8 00 00 00 00	 call	 PyObject_Hash
  0017b	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax
$end$21004:

; 740  :   end:
; 741  :     Py_DECREF(t);

  00180	48 8b 4c 24 30	 mov	 rcx, QWORD PTR t$[rsp]
  00185	e8 00 00 00 00	 call	 _Py_DecRef

; 742  :     return result;

  0018a	48 8b 44 24 28	 mov	 rax, QWORD PTR result$[rsp]
$LN9@range_hash:

; 743  : }

  0018f	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00193	c3		 ret	 0
range_hash ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$range_count DD imagerel range_count
	DD	imagerel range_count+167
	DD	imagerel $unwind$range_count
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$range_count DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT range_count
_TEXT	SEGMENT
result$21034 = 32
count$21041 = 40
r$ = 64
ob$ = 72
range_count PROC					; COMDAT

; 747  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 748  :     if (PyLong_CheckExact(ob) || PyBool_Check(ob)) {

  0000e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyLong_Type
  00015	48 8b 4c 24 48	 mov	 rcx, QWORD PTR ob$[rsp]
  0001a	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0001e	74 12		 je	 SHORT $LN7@range_coun
  00020	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyBool_Type
  00027	48 8b 4c 24 48	 mov	 rcx, QWORD PTR ob$[rsp]
  0002c	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00030	75 40		 jne	 SHORT $LN8@range_coun
$LN7@range_coun:

; 749  :         int result = range_contains_long(r, ob);

  00032	48 8b 54 24 48	 mov	 rdx, QWORD PTR ob$[rsp]
  00037	48 8b 4c 24 40	 mov	 rcx, QWORD PTR r$[rsp]
  0003c	e8 00 00 00 00	 call	 range_contains_long
  00041	89 44 24 20	 mov	 DWORD PTR result$21034[rsp], eax

; 750  :         if (result == -1)

  00045	83 7c 24 20 ff	 cmp	 DWORD PTR result$21034[rsp], -1
  0004a	75 06		 jne	 SHORT $LN6@range_coun

; 751  :             return NULL;

  0004c	33 c0		 xor	 eax, eax
  0004e	eb 52		 jmp	 SHORT $LN9@range_coun
  00050	eb 1e		 jmp	 SHORT $LN5@range_coun
$LN6@range_coun:

; 752  :         else if (result)

  00052	83 7c 24 20 00	 cmp	 DWORD PTR result$21034[rsp], 0
  00057	74 0e		 je	 SHORT $LN4@range_coun

; 753  :             return PyLong_FromLong(1);

  00059	b9 01 00 00 00	 mov	 ecx, 1
  0005e	e8 00 00 00 00	 call	 PyLong_FromLong
  00063	eb 3d		 jmp	 SHORT $LN9@range_coun

; 754  :         else

  00065	eb 09		 jmp	 SHORT $LN3@range_coun
$LN4@range_coun:

; 755  :             return PyLong_FromLong(0);

  00067	33 c9		 xor	 ecx, ecx
  00069	e8 00 00 00 00	 call	 PyLong_FromLong
  0006e	eb 32		 jmp	 SHORT $LN9@range_coun
$LN3@range_coun:
$LN5@range_coun:

; 756  :     } else {

  00070	eb 30		 jmp	 SHORT $LN2@range_coun
$LN8@range_coun:

; 757  :         Py_ssize_t count;
; 758  :         count = _PySequence_IterSearch((PyObject*)r, ob, PY_ITERSEARCH_COUNT);

  00072	41 b8 01 00 00
	00		 mov	 r8d, 1
  00078	48 8b 54 24 48	 mov	 rdx, QWORD PTR ob$[rsp]
  0007d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR r$[rsp]
  00082	e8 00 00 00 00	 call	 _PySequence_IterSearch
  00087	48 89 44 24 28	 mov	 QWORD PTR count$21041[rsp], rax

; 759  :         if (count == -1)

  0008c	48 83 7c 24 28
	ff		 cmp	 QWORD PTR count$21041[rsp], -1
  00092	75 04		 jne	 SHORT $LN1@range_coun

; 760  :             return NULL;

  00094	33 c0		 xor	 eax, eax
  00096	eb 0a		 jmp	 SHORT $LN9@range_coun
$LN1@range_coun:

; 761  :         return PyLong_FromSsize_t(count);

  00098	48 8b 4c 24 28	 mov	 rcx, QWORD PTR count$21041[rsp]
  0009d	e8 00 00 00 00	 call	 PyLong_FromSsize_t
$LN2@range_coun:
$LN9@range_coun:

; 762  :     }
; 763  : }

  000a2	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a6	c3		 ret	 0
range_count ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BD@IFOFHIPH@?$CFR?5is?5not?5in?5range?$AA@ ; `string'
EXTRN	PyErr_Format:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$range_index DD imagerel range_index
	DD	imagerel range_index+251
	DD	imagerel $unwind$range_index
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$range_index DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_0BD@IFOFHIPH@?$CFR?5is?5not?5in?5range?$AA@
CONST	SEGMENT
??_C@_0BD@IFOFHIPH@?$CFR?5is?5not?5in?5range?$AA@ DB '%R is not in range', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT range_index
_TEXT	SEGMENT
contains$ = 32
index$21055 = 40
tmp$21063 = 48
idx$21062 = 56
r$ = 80
ob$ = 88
range_index PROC					; COMDAT

; 767  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 768  :     int contains;
; 769  : 
; 770  :     if (!PyLong_CheckExact(ob) && !PyBool_Check(ob)) {

  0000e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyLong_Type
  00015	48 8b 4c 24 58	 mov	 rcx, QWORD PTR ob$[rsp]
  0001a	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0001e	74 4a		 je	 SHORT $LN5@range_inde
  00020	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyBool_Type
  00027	48 8b 4c 24 58	 mov	 rcx, QWORD PTR ob$[rsp]
  0002c	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00030	74 38		 je	 SHORT $LN5@range_inde

; 771  :         Py_ssize_t index;
; 772  :         index = _PySequence_IterSearch((PyObject*)r, ob, PY_ITERSEARCH_INDEX);

  00032	41 b8 02 00 00
	00		 mov	 r8d, 2
  00038	48 8b 54 24 58	 mov	 rdx, QWORD PTR ob$[rsp]
  0003d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR r$[rsp]
  00042	e8 00 00 00 00	 call	 _PySequence_IterSearch
  00047	48 89 44 24 28	 mov	 QWORD PTR index$21055[rsp], rax

; 773  :         if (index == -1)

  0004c	48 83 7c 24 28
	ff		 cmp	 QWORD PTR index$21055[rsp], -1
  00052	75 07		 jne	 SHORT $LN4@range_inde

; 774  :             return NULL;

  00054	33 c0		 xor	 eax, eax
  00056	e9 9b 00 00 00	 jmp	 $LN6@range_inde
$LN4@range_inde:

; 775  :         return PyLong_FromSsize_t(index);

  0005b	48 8b 4c 24 28	 mov	 rcx, QWORD PTR index$21055[rsp]
  00060	e8 00 00 00 00	 call	 PyLong_FromSsize_t
  00065	e9 8c 00 00 00	 jmp	 $LN6@range_inde
$LN5@range_inde:

; 776  :     }
; 777  : 
; 778  :     contains = range_contains_long(r, ob);

  0006a	48 8b 54 24 58	 mov	 rdx, QWORD PTR ob$[rsp]
  0006f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR r$[rsp]
  00074	e8 00 00 00 00	 call	 range_contains_long
  00079	89 44 24 20	 mov	 DWORD PTR contains$[rsp], eax

; 779  :     if (contains == -1)

  0007d	83 7c 24 20 ff	 cmp	 DWORD PTR contains$[rsp], -1
  00082	75 04		 jne	 SHORT $LN3@range_inde

; 780  :         return NULL;

  00084	33 c0		 xor	 eax, eax
  00086	eb 6e		 jmp	 SHORT $LN6@range_inde
$LN3@range_inde:

; 781  : 
; 782  :     if (contains) {

  00088	83 7c 24 20 00	 cmp	 DWORD PTR contains$[rsp], 0
  0008d	74 4d		 je	 SHORT $LN2@range_inde

; 783  :         PyObject *idx, *tmp = PyNumber_Subtract(ob, r->start);

  0008f	48 8b 44 24 50	 mov	 rax, QWORD PTR r$[rsp]
  00094	48 8b 50 60	 mov	 rdx, QWORD PTR [rax+96]
  00098	48 8b 4c 24 58	 mov	 rcx, QWORD PTR ob$[rsp]
  0009d	e8 00 00 00 00	 call	 PyNumber_Subtract
  000a2	48 89 44 24 30	 mov	 QWORD PTR tmp$21063[rsp], rax

; 784  :         if (tmp == NULL)

  000a7	48 83 7c 24 30
	00		 cmp	 QWORD PTR tmp$21063[rsp], 0
  000ad	75 04		 jne	 SHORT $LN1@range_inde

; 785  :             return NULL;

  000af	33 c0		 xor	 eax, eax
  000b1	eb 43		 jmp	 SHORT $LN6@range_inde
$LN1@range_inde:

; 786  :         /* idx = (ob - r.start) // r.step */
; 787  :         idx = PyNumber_FloorDivide(tmp, r->step);

  000b3	48 8b 44 24 50	 mov	 rax, QWORD PTR r$[rsp]
  000b8	48 8b 50 70	 mov	 rdx, QWORD PTR [rax+112]
  000bc	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tmp$21063[rsp]
  000c1	e8 00 00 00 00	 call	 PyNumber_FloorDivide
  000c6	48 89 44 24 38	 mov	 QWORD PTR idx$21062[rsp], rax

; 788  :         Py_DECREF(tmp);

  000cb	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tmp$21063[rsp]
  000d0	e8 00 00 00 00	 call	 _Py_DecRef

; 789  :         return idx;

  000d5	48 8b 44 24 38	 mov	 rax, QWORD PTR idx$21062[rsp]
  000da	eb 1a		 jmp	 SHORT $LN6@range_inde
$LN2@range_inde:

; 790  :     }
; 791  : 
; 792  :     /* object is not in the range */
; 793  :     PyErr_Format(PyExc_ValueError, "%R is not in range", ob);

  000dc	4c 8b 44 24 58	 mov	 r8, QWORD PTR ob$[rsp]
  000e1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@IFOFHIPH@?$CFR?5is?5not?5in?5range?$AA@
  000e8	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  000ef	e8 00 00 00 00	 call	 PyErr_Format

; 794  :     return NULL;

  000f4	33 c0		 xor	 eax, eax
$LN6@range_inde:

; 795  : }

  000f6	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000fa	c3		 ret	 0
range_index ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BC@PONFPGBB@range?$CI?$CFR?0?5?$CFR?0?5?$CFR?$CJ?$AA@ ; `string'
PUBLIC	??_C@_0O@EIKKGFPF@range?$CI?$CFR?0?5?$CFR?$CJ?$AA@ ; `string'
EXTRN	PyUnicode_FromFormat:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$range_repr DD imagerel range_repr
	DD	imagerel range_repr+147
	DD	imagerel $unwind$range_repr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$range_repr DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0BC@PONFPGBB@range?$CI?$CFR?0?5?$CFR?0?5?$CFR?$CJ?$AA@
CONST	SEGMENT
??_C@_0BC@PONFPGBB@range?$CI?$CFR?0?5?$CFR?0?5?$CFR?$CJ?$AA@ DB 'range(%R'
	DB	', %R, %R)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@EIKKGFPF@range?$CI?$CFR?0?5?$CFR?$CJ?$AA@
CONST	SEGMENT
??_C@_0O@EIKKGFPF@range?$CI?$CFR?0?5?$CFR?$CJ?$AA@ DB 'range(%R, %R)', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT range_repr
_TEXT	SEGMENT
istep$ = 32
r$ = 64
range_repr PROC						; COMDAT

; 810  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 811  :     Py_ssize_t istep;
; 812  : 
; 813  :     /* Check for special case values for printing.  We don't always
; 814  :        need the step value.  We don't care about errors
; 815  :        (it means overflow), so clear the errors. */
; 816  :     istep = PyNumber_AsSsize_t(r->step, NULL);

  00009	33 d2		 xor	 edx, edx
  0000b	48 8b 44 24 40	 mov	 rax, QWORD PTR r$[rsp]
  00010	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  00014	e8 00 00 00 00	 call	 PyNumber_AsSsize_t
  00019	48 89 44 24 20	 mov	 QWORD PTR istep$[rsp], rax

; 817  :     if (istep != 1 || (istep == -1 && PyErr_Occurred())) {

  0001e	48 83 7c 24 20
	01		 cmp	 QWORD PTR istep$[rsp], 1
  00024	75 12		 jne	 SHORT $LN3@range_repr
  00026	48 83 7c 24 20
	ff		 cmp	 QWORD PTR istep$[rsp], -1
  0002c	75 0f		 jne	 SHORT $LN4@range_repr
  0002e	e8 00 00 00 00	 call	 PyErr_Occurred
  00033	48 85 c0	 test	 rax, rax
  00036	74 05		 je	 SHORT $LN4@range_repr
$LN3@range_repr:

; 818  :         PyErr_Clear();

  00038	e8 00 00 00 00	 call	 PyErr_Clear
$LN4@range_repr:

; 819  :     }
; 820  : 
; 821  :     if (istep == 1)

  0003d	48 83 7c 24 20
	01		 cmp	 QWORD PTR istep$[rsp], 1
  00043	75 22		 jne	 SHORT $LN2@range_repr

; 822  :         return PyUnicode_FromFormat("range(%R, %R)", r->start, r->stop);

  00045	48 8b 44 24 40	 mov	 rax, QWORD PTR r$[rsp]
  0004a	4c 8b 40 68	 mov	 r8, QWORD PTR [rax+104]
  0004e	48 8b 44 24 40	 mov	 rax, QWORD PTR r$[rsp]
  00053	48 8b 50 60	 mov	 rdx, QWORD PTR [rax+96]
  00057	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@EIKKGFPF@range?$CI?$CFR?0?5?$CFR?$CJ?$AA@
  0005e	e8 00 00 00 00	 call	 PyUnicode_FromFormat
  00063	eb 29		 jmp	 SHORT $LN5@range_repr

; 823  :     else

  00065	eb 27		 jmp	 SHORT $LN1@range_repr
$LN2@range_repr:

; 824  :         return PyUnicode_FromFormat("range(%R, %R, %R)",
; 825  :                                     r->start, r->stop, r->step);

  00067	48 8b 44 24 40	 mov	 rax, QWORD PTR r$[rsp]
  0006c	4c 8b 48 70	 mov	 r9, QWORD PTR [rax+112]
  00070	48 8b 44 24 40	 mov	 rax, QWORD PTR r$[rsp]
  00075	4c 8b 40 68	 mov	 r8, QWORD PTR [rax+104]
  00079	48 8b 44 24 40	 mov	 rax, QWORD PTR r$[rsp]
  0007e	48 8b 50 60	 mov	 rdx, QWORD PTR [rax+96]
  00082	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@PONFPGBB@range?$CI?$CFR?0?5?$CFR?0?5?$CFR?$CJ?$AA@
  00089	e8 00 00 00 00	 call	 PyUnicode_FromFormat
$LN1@range_repr:
$LN5@range_repr:

; 826  : }

  0008e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00092	c3		 ret	 0
range_repr ENDP
_TEXT	ENDS
PUBLIC	??_C@_08LIDALBJO@?$CIO?$CIOOO?$CJ?$CJ?$AA@	; `string'
EXTRN	Py_BuildValue:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$range_reduce DD imagerel range_reduce
	DD	imagerel range_reduce+72
	DD	imagerel $unwind$range_reduce
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$range_reduce DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT ??_C@_08LIDALBJO@?$CIO?$CIOOO?$CJ?$CJ?$AA@
CONST	SEGMENT
??_C@_08LIDALBJO@?$CIO?$CIOOO?$CJ?$CJ?$AA@ DB '(O(OOO))', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT range_reduce
_TEXT	SEGMENT
r$ = 64
args$ = 72
range_reduce PROC					; COMDAT

; 831  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 832  :     return Py_BuildValue("(O(OOO))", Py_TYPE(r),
; 833  :                          r->start, r->stop, r->step);

  0000e	48 8b 44 24 40	 mov	 rax, QWORD PTR r$[rsp]
  00013	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00017	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0001c	48 8b 44 24 40	 mov	 rax, QWORD PTR r$[rsp]
  00021	4c 8b 48 68	 mov	 r9, QWORD PTR [rax+104]
  00025	48 8b 44 24 40	 mov	 rax, QWORD PTR r$[rsp]
  0002a	4c 8b 40 60	 mov	 r8, QWORD PTR [rax+96]
  0002e	48 8b 44 24 40	 mov	 rax, QWORD PTR r$[rsp]
  00033	48 8b 50 58	 mov	 rdx, QWORD PTR [rax+88]
  00037	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08LIDALBJO@?$CIO?$CIOOO?$CJ?$CJ?$AA@
  0003e	e8 00 00 00 00	 call	 Py_BuildValue

; 834  : }

  00043	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00047	c3		 ret	 0
range_reduce ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DF@LFAJHCEJ@range?5indices?5must?5be?5integers?5o@ ; `string'
EXTRN	PyExc_TypeError:QWORD
EXTRN	PySlice_Type:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$range_subscript DD imagerel range_subscript
	DD	imagerel range_subscript+197
	DD	imagerel $unwind$range_subscript
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$range_subscript DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT ??_C@_0DF@LFAJHCEJ@range?5indices?5must?5be?5integers?5o@
CONST	SEGMENT
??_C@_0DF@LFAJHCEJ@range?5indices?5must?5be?5integers?5o@ DB 'range indic'
	DB	'es must be integers or slices, not %.200s', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT range_subscript
_TEXT	SEGMENT
i$21103 = 32
result$21104 = 40
self$ = 64
item$ = 72
range_subscript PROC					; COMDAT

; 838  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 839  :     if (PyIndex_Check(item)) {

  0000e	48 8b 44 24 48	 mov	 rax, QWORD PTR item$[rsp]
  00013	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00017	48 83 b8 b8 00
	00 00 00	 cmp	 QWORD PTR [rax+184], 0
  0001f	74 5a		 je	 SHORT $LN3@range_subs
  00021	48 8b 44 24 48	 mov	 rax, QWORD PTR item$[rsp]
  00026	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0002a	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  00031	48 83 b8 08 01
	00 00 00	 cmp	 QWORD PTR [rax+264], 0
  00039	74 40		 je	 SHORT $LN3@range_subs

; 840  :         PyObject *i, *result;
; 841  :         i = PyNumber_Index(item);

  0003b	48 8b 4c 24 48	 mov	 rcx, QWORD PTR item$[rsp]
  00040	e8 00 00 00 00	 call	 PyNumber_Index
  00045	48 89 44 24 20	 mov	 QWORD PTR i$21103[rsp], rax

; 842  :         if (!i)

  0004a	48 83 7c 24 20
	00		 cmp	 QWORD PTR i$21103[rsp], 0
  00050	75 04		 jne	 SHORT $LN2@range_subs

; 843  :             return NULL;

  00052	33 c0		 xor	 eax, eax
  00054	eb 6a		 jmp	 SHORT $LN4@range_subs
$LN2@range_subs:

; 844  :         result = compute_range_item(self, i);

  00056	48 8b 54 24 20	 mov	 rdx, QWORD PTR i$21103[rsp]
  0005b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  00060	e8 00 00 00 00	 call	 compute_range_item
  00065	48 89 44 24 28	 mov	 QWORD PTR result$21104[rsp], rax

; 845  :         Py_DECREF(i);

  0006a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR i$21103[rsp]
  0006f	e8 00 00 00 00	 call	 _Py_DecRef

; 846  :         return result;

  00074	48 8b 44 24 28	 mov	 rax, QWORD PTR result$21104[rsp]
  00079	eb 45		 jmp	 SHORT $LN4@range_subs
$LN3@range_subs:

; 847  :     }
; 848  :     if (PySlice_Check(item)) {

  0007b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PySlice_Type
  00082	48 8b 4c 24 48	 mov	 rcx, QWORD PTR item$[rsp]
  00087	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0008b	75 11		 jne	 SHORT $LN1@range_subs

; 849  :         return compute_slice(self, item);

  0008d	48 8b 54 24 48	 mov	 rdx, QWORD PTR item$[rsp]
  00092	48 8b 4c 24 40	 mov	 rcx, QWORD PTR self$[rsp]
  00097	e8 00 00 00 00	 call	 compute_slice
  0009c	eb 22		 jmp	 SHORT $LN4@range_subs
$LN1@range_subs:

; 850  :     }
; 851  :     PyErr_Format(PyExc_TypeError,
; 852  :                  "range indices must be integers or slices, not %.200s",
; 853  :                  item->ob_type->tp_name);

  0009e	48 8b 44 24 48	 mov	 rax, QWORD PTR item$[rsp]
  000a3	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000a7	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  000ab	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DF@LFAJHCEJ@range?5indices?5must?5be?5integers?5o@
  000b2	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  000b9	e8 00 00 00 00	 call	 PyErr_Format

; 854  :     return NULL;

  000be	33 c0		 xor	 eax, eax
$LN4@range_subs:

; 855  : }

  000c0	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000c4	c3		 ret	 0
range_subscript ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@IKFMEAAB@compute_slice?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$compute_slice DD imagerel compute_slice
	DD	imagerel compute_slice+757
	DD	imagerel $unwind$compute_slice
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$compute_slice DD 021101H
	DD	0130111H
xdata	ENDS
;	COMDAT ??_C@_0O@IKFMEAAB@compute_slice?$AA@
CONST	SEGMENT
??_C@_0O@IKFMEAAB@compute_slice?$AA@ DB 'compute_slice', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT compute_slice
_TEXT	SEGMENT
slice$ = 48
substop$ = 56
substep$ = 64
step$ = 72
stop$ = 80
has_elements$ = 88
substart$ = 96
start$ = 104
result$ = 112
_py_tmp$20825 = 120
_py_tmp$20835 = 128
_py_tmp$20848 = 136
r$ = 160
_slice$ = 168
compute_slice PROC					; COMDAT

; 512  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 513  :     PySliceObject *slice = (PySliceObject *) _slice;

  00011	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR _slice$[rsp]
  00019	48 89 44 24 30	 mov	 QWORD PTR slice$[rsp], rax

; 514  :     rangeobject *result;
; 515  :     PyObject *start = NULL, *stop = NULL, *step = NULL;

  0001e	48 c7 44 24 68
	00 00 00 00	 mov	 QWORD PTR start$[rsp], 0
  00027	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR stop$[rsp], 0
  00030	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR step$[rsp], 0

; 516  :     PyObject *substart = NULL, *substop = NULL, *substep = NULL;

  00039	48 c7 44 24 60
	00 00 00 00	 mov	 QWORD PTR substart$[rsp], 0
  00042	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR substop$[rsp], 0
  0004b	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR substep$[rsp], 0

; 517  :     int has_elements;
; 518  : 
; 519  :     has_elements = compute_slice_indices(r, slice, &start, &stop, &step);

  00054	48 8d 44 24 48	 lea	 rax, QWORD PTR step$[rsp]
  00059	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0005e	4c 8d 4c 24 50	 lea	 r9, QWORD PTR stop$[rsp]
  00063	4c 8d 44 24 68	 lea	 r8, QWORD PTR start$[rsp]
  00068	48 8b 54 24 30	 mov	 rdx, QWORD PTR slice$[rsp]
  0006d	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR r$[rsp]
  00075	e8 00 00 00 00	 call	 compute_slice_indices
  0007a	89 44 24 58	 mov	 DWORD PTR has_elements$[rsp], eax

; 520  :     if (has_elements == -1) return NULL;

  0007e	83 7c 24 58 ff	 cmp	 DWORD PTR has_elements$[rsp], -1
  00083	75 07		 jne	 SHORT $LN43@compute_sl
  00085	33 c0		 xor	 eax, eax
  00087	e9 61 02 00 00	 jmp	 $LN44@compute_sl
$LN43@compute_sl:

; 521  : 
; 522  :     substep = PyNumber_Multiply(r->step, step);

  0008c	48 8b 54 24 48	 mov	 rdx, QWORD PTR step$[rsp]
  00091	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR r$[rsp]
  00099	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  0009d	e8 00 00 00 00	 call	 PyNumber_Multiply
  000a2	48 89 44 24 40	 mov	 QWORD PTR substep$[rsp], rax

; 523  :     if (substep == NULL) goto fail;

  000a7	48 83 7c 24 40
	00		 cmp	 QWORD PTR substep$[rsp], 0
  000ad	75 05		 jne	 SHORT $LN42@compute_sl
  000af	e9 a7 01 00 00	 jmp	 $fail$20819
$LN42@compute_sl:
$LN41@compute_sl:

; 524  :     Py_CLEAR(step);

  000b4	48 83 7c 24 48
	00		 cmp	 QWORD PTR step$[rsp], 0
  000ba	74 47		 je	 SHORT $LN38@compute_sl
  000bc	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000c4	4c 8b 4c 24 48	 mov	 r9, QWORD PTR step$[rsp]
  000c9	41 b8 0c 02 00
	00		 mov	 r8d, 524		; 0000020cH
  000cf	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@JFGJIEKG@?4?4?2Objects?2rangeobject?4c?$AA@
  000d6	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@IKFMEAAB@compute_slice?$AA@
  000dd	e8 00 00 00 00	 call	 _PyParallel_Guard
  000e2	85 c0		 test	 eax, eax
  000e4	75 1d		 jne	 SHORT $LN38@compute_sl
  000e6	48 8b 44 24 48	 mov	 rax, QWORD PTR step$[rsp]
  000eb	48 89 44 24 78	 mov	 QWORD PTR _py_tmp$20825[rsp], rax
  000f0	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR step$[rsp], 0
  000f9	48 8b 4c 24 78	 mov	 rcx, QWORD PTR _py_tmp$20825[rsp]
  000fe	e8 00 00 00 00	 call	 _Py_DecRef
$LN38@compute_sl:
  00103	33 c0		 xor	 eax, eax
  00105	85 c0		 test	 eax, eax
  00107	75 ab		 jne	 SHORT $LN41@compute_sl

; 525  : 
; 526  :     substart = compute_item(r, start);

  00109	48 8b 54 24 68	 mov	 rdx, QWORD PTR start$[rsp]
  0010e	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR r$[rsp]
  00116	e8 00 00 00 00	 call	 compute_item
  0011b	48 89 44 24 60	 mov	 QWORD PTR substart$[rsp], rax

; 527  :     if (substart == NULL) goto fail;

  00120	48 83 7c 24 60
	00		 cmp	 QWORD PTR substart$[rsp], 0
  00126	75 05		 jne	 SHORT $LN37@compute_sl
  00128	e9 2e 01 00 00	 jmp	 $fail$20819
$LN37@compute_sl:
$LN36@compute_sl:

; 528  :     Py_CLEAR(start);

  0012d	48 83 7c 24 68
	00		 cmp	 QWORD PTR start$[rsp], 0
  00133	74 4d		 je	 SHORT $LN33@compute_sl
  00135	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0013d	4c 8b 4c 24 68	 mov	 r9, QWORD PTR start$[rsp]
  00142	41 b8 10 02 00
	00		 mov	 r8d, 528		; 00000210H
  00148	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@JFGJIEKG@?4?4?2Objects?2rangeobject?4c?$AA@
  0014f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@IKFMEAAB@compute_slice?$AA@
  00156	e8 00 00 00 00	 call	 _PyParallel_Guard
  0015b	85 c0		 test	 eax, eax
  0015d	75 23		 jne	 SHORT $LN33@compute_sl
  0015f	48 8b 44 24 68	 mov	 rax, QWORD PTR start$[rsp]
  00164	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR _py_tmp$20835[rsp], rax
  0016c	48 c7 44 24 68
	00 00 00 00	 mov	 QWORD PTR start$[rsp], 0
  00175	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR _py_tmp$20835[rsp]
  0017d	e8 00 00 00 00	 call	 _Py_DecRef
$LN33@compute_sl:
  00182	33 c0		 xor	 eax, eax
  00184	85 c0		 test	 eax, eax
  00186	75 a5		 jne	 SHORT $LN36@compute_sl

; 529  : 
; 530  :     if (has_elements) {

  00188	83 7c 24 58 00	 cmp	 DWORD PTR has_elements$[rsp], 0
  0018d	74 26		 je	 SHORT $LN32@compute_sl

; 531  :         substop = compute_item(r, stop);

  0018f	48 8b 54 24 50	 mov	 rdx, QWORD PTR stop$[rsp]
  00194	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR r$[rsp]
  0019c	e8 00 00 00 00	 call	 compute_item
  001a1	48 89 44 24 38	 mov	 QWORD PTR substop$[rsp], rax

; 532  :         if (substop == NULL) goto fail;

  001a6	48 83 7c 24 38
	00		 cmp	 QWORD PTR substop$[rsp], 0
  001ac	75 05		 jne	 SHORT $LN31@compute_sl
  001ae	e9 a8 00 00 00	 jmp	 $fail$20819
$LN31@compute_sl:

; 533  :     } else {

  001b3	eb 14		 jmp	 SHORT $LN30@compute_sl
$LN32@compute_sl:

; 534  :         substop = substart;

  001b5	48 8b 44 24 60	 mov	 rax, QWORD PTR substart$[rsp]
  001ba	48 89 44 24 38	 mov	 QWORD PTR substop$[rsp], rax

; 535  :         Py_INCREF(substop);

  001bf	48 8b 4c 24 38	 mov	 rcx, QWORD PTR substop$[rsp]
  001c4	e8 00 00 00 00	 call	 _Py_IncRef
$LN30@compute_sl:
$LN29@compute_sl:

; 536  :     }
; 537  :     Py_CLEAR(stop);

  001c9	48 83 7c 24 50
	00		 cmp	 QWORD PTR stop$[rsp], 0
  001cf	74 4d		 je	 SHORT $LN26@compute_sl
  001d1	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  001d9	4c 8b 4c 24 50	 mov	 r9, QWORD PTR stop$[rsp]
  001de	41 b8 19 02 00
	00		 mov	 r8d, 537		; 00000219H
  001e4	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@JFGJIEKG@?4?4?2Objects?2rangeobject?4c?$AA@
  001eb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@IKFMEAAB@compute_slice?$AA@
  001f2	e8 00 00 00 00	 call	 _PyParallel_Guard
  001f7	85 c0		 test	 eax, eax
  001f9	75 23		 jne	 SHORT $LN26@compute_sl
  001fb	48 8b 44 24 50	 mov	 rax, QWORD PTR stop$[rsp]
  00200	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR _py_tmp$20848[rsp], rax
  00208	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR stop$[rsp], 0
  00211	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR _py_tmp$20848[rsp]
  00219	e8 00 00 00 00	 call	 _Py_DecRef
$LN26@compute_sl:
  0021e	33 c0		 xor	 eax, eax
  00220	85 c0		 test	 eax, eax
  00222	75 a5		 jne	 SHORT $LN29@compute_sl

; 538  : 
; 539  :     result = make_range_object(Py_TYPE(r), substart, substop, substep);

  00224	4c 8b 4c 24 40	 mov	 r9, QWORD PTR substep$[rsp]
  00229	4c 8b 44 24 38	 mov	 r8, QWORD PTR substop$[rsp]
  0022e	48 8b 54 24 60	 mov	 rdx, QWORD PTR substart$[rsp]
  00233	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR r$[rsp]
  0023b	48 8b 48 58	 mov	 rcx, QWORD PTR [rax+88]
  0023f	e8 00 00 00 00	 call	 make_range_object
  00244	48 89 44 24 70	 mov	 QWORD PTR result$[rsp], rax

; 540  :     if (result != NULL) {

  00249	48 83 7c 24 70
	00		 cmp	 QWORD PTR result$[rsp], 0
  0024f	74 0a		 je	 SHORT $LN25@compute_sl

; 541  :         return (PyObject *) result;

  00251	48 8b 44 24 70	 mov	 rax, QWORD PTR result$[rsp]
  00256	e9 92 00 00 00	 jmp	 $LN44@compute_sl
$LN25@compute_sl:
$fail$20819:
$LN24@compute_sl:

; 542  :     }
; 543  : fail:
; 544  :     Py_XDECREF(start);

  0025b	48 83 7c 24 68
	00		 cmp	 QWORD PTR start$[rsp], 0
  00261	74 0a		 je	 SHORT $LN21@compute_sl
  00263	48 8b 4c 24 68	 mov	 rcx, QWORD PTR start$[rsp]
  00268	e8 00 00 00 00	 call	 _Py_DecRef
$LN21@compute_sl:
  0026d	33 c0		 xor	 eax, eax
  0026f	85 c0		 test	 eax, eax
  00271	75 e8		 jne	 SHORT $LN24@compute_sl
$LN20@compute_sl:

; 545  :     Py_XDECREF(stop);

  00273	48 83 7c 24 50
	00		 cmp	 QWORD PTR stop$[rsp], 0
  00279	74 0a		 je	 SHORT $LN17@compute_sl
  0027b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR stop$[rsp]
  00280	e8 00 00 00 00	 call	 _Py_DecRef
$LN17@compute_sl:
  00285	33 c0		 xor	 eax, eax
  00287	85 c0		 test	 eax, eax
  00289	75 e8		 jne	 SHORT $LN20@compute_sl
$LN16@compute_sl:

; 546  :     Py_XDECREF(step);

  0028b	48 83 7c 24 48
	00		 cmp	 QWORD PTR step$[rsp], 0
  00291	74 0a		 je	 SHORT $LN13@compute_sl
  00293	48 8b 4c 24 48	 mov	 rcx, QWORD PTR step$[rsp]
  00298	e8 00 00 00 00	 call	 _Py_DecRef
$LN13@compute_sl:
  0029d	33 c0		 xor	 eax, eax
  0029f	85 c0		 test	 eax, eax
  002a1	75 e8		 jne	 SHORT $LN16@compute_sl
$LN12@compute_sl:

; 547  :     Py_XDECREF(substart);

  002a3	48 83 7c 24 60
	00		 cmp	 QWORD PTR substart$[rsp], 0
  002a9	74 0a		 je	 SHORT $LN9@compute_sl
  002ab	48 8b 4c 24 60	 mov	 rcx, QWORD PTR substart$[rsp]
  002b0	e8 00 00 00 00	 call	 _Py_DecRef
$LN9@compute_sl:
  002b5	33 c0		 xor	 eax, eax
  002b7	85 c0		 test	 eax, eax
  002b9	75 e8		 jne	 SHORT $LN12@compute_sl
$LN8@compute_sl:

; 548  :     Py_XDECREF(substop);

  002bb	48 83 7c 24 38
	00		 cmp	 QWORD PTR substop$[rsp], 0
  002c1	74 0a		 je	 SHORT $LN5@compute_sl
  002c3	48 8b 4c 24 38	 mov	 rcx, QWORD PTR substop$[rsp]
  002c8	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@compute_sl:
  002cd	33 c0		 xor	 eax, eax
  002cf	85 c0		 test	 eax, eax
  002d1	75 e8		 jne	 SHORT $LN8@compute_sl
$LN4@compute_sl:

; 549  :     Py_XDECREF(substep);

  002d3	48 83 7c 24 40
	00		 cmp	 QWORD PTR substep$[rsp], 0
  002d9	74 0a		 je	 SHORT $LN1@compute_sl
  002db	48 8b 4c 24 40	 mov	 rcx, QWORD PTR substep$[rsp]
  002e0	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@compute_sl:
  002e5	33 c0		 xor	 eax, eax
  002e7	85 c0		 test	 eax, eax
  002e9	75 e8		 jne	 SHORT $LN4@compute_sl

; 550  :     return NULL;

  002eb	33 c0		 xor	 eax, eax
$LN44@compute_sl:

; 551  : }

  002ed	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  002f4	c3		 ret	 0
compute_slice ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BG@NFKHDELE@compute_slice_indices?$AA@	; `string'
PUBLIC	??_C@_0BK@PFFNIAMP@slice?5step?5cannot?5be?5zero?$AA@ ; `string'
EXTRN	_PyEval_SliceIndex:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$compute_slice_indices DD imagerel compute_slice_indices
	DD	imagerel compute_slice_indices+2095
	DD	imagerel $unwind$compute_slice_indices
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$compute_slice_indices DD 021b01H
	DD	017011bH
xdata	ENDS
;	COMDAT ??_C@_0BG@NFKHDELE@compute_slice_indices?$AA@
CONST	SEGMENT
??_C@_0BG@NFKHDELE@compute_slice_indices?$AA@ DB 'compute_slice_indices', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@PFFNIAMP@slice?5step?5cannot?5be?5zero?$AA@
CONST	SEGMENT
??_C@_0BK@PFFNIAMP@slice?5step?5cannot?5be?5zero?$AA@ DB 'slice step cann'
	DB	'ot be zero', 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT compute_slice_indices
_TEXT	SEGMENT
tmp_step$ = 48
tmp_stop$ = 56
clamped_step$ = 64
has_elements$ = 72
cmp_result$ = 76
one$ = 80
zero$ = 88
tmp_start$ = 96
neg_one$ = 104
candidate$ = 112
_py_tmp$20667 = 120
_py_tmp$20679 = 128
_py_tmp$20693 = 136
_py_tmp$20717 = 144
_py_tmp$20729 = 152
_py_tmp$20743 = 160
r$ = 192
slice$ = 200
start$ = 208
stop$ = 216
step$ = 224
compute_slice_indices PROC				; COMDAT

; 350  : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H

; 351  :     int cmp_result, has_elements;
; 352  :     Py_ssize_t clamped_step = 0;

  0001b	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR clamped_step$[rsp], 0

; 353  :     PyObject *zero = NULL, *one = NULL, *neg_one = NULL, *candidate = NULL;

  00024	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR zero$[rsp], 0
  0002d	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR one$[rsp], 0
  00036	48 c7 44 24 68
	00 00 00 00	 mov	 QWORD PTR neg_one$[rsp], 0
  0003f	48 c7 44 24 70
	00 00 00 00	 mov	 QWORD PTR candidate$[rsp], 0

; 354  :     PyObject *tmp_start = NULL, *tmp_stop = NULL, *tmp_step = NULL;

  00048	48 c7 44 24 60
	00 00 00 00	 mov	 QWORD PTR tmp_start$[rsp], 0
  00051	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR tmp_stop$[rsp], 0
  0005a	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR tmp_step$[rsp], 0

; 355  :     zero = PyLong_FromLong(0);

  00063	33 c9		 xor	 ecx, ecx
  00065	e8 00 00 00 00	 call	 PyLong_FromLong
  0006a	48 89 44 24 58	 mov	 QWORD PTR zero$[rsp], rax

; 356  :     if (zero == NULL) goto Fail;

  0006f	48 83 7c 24 58
	00		 cmp	 QWORD PTR zero$[rsp], 0
  00075	75 05		 jne	 SHORT $LN102@compute_sl@2
  00077	e9 fe 06 00 00	 jmp	 $Fail$20636
$LN102@compute_sl@2:

; 357  :     one = PyLong_FromLong(1);

  0007c	b9 01 00 00 00	 mov	 ecx, 1
  00081	e8 00 00 00 00	 call	 PyLong_FromLong
  00086	48 89 44 24 50	 mov	 QWORD PTR one$[rsp], rax

; 358  :     if (one == NULL) goto Fail;

  0008b	48 83 7c 24 50
	00		 cmp	 QWORD PTR one$[rsp], 0
  00091	75 05		 jne	 SHORT $LN101@compute_sl@2
  00093	e9 e2 06 00 00	 jmp	 $Fail$20636
$LN101@compute_sl@2:

; 359  :     neg_one = PyLong_FromLong(-1);

  00098	b9 ff ff ff ff	 mov	 ecx, -1
  0009d	e8 00 00 00 00	 call	 PyLong_FromLong
  000a2	48 89 44 24 68	 mov	 QWORD PTR neg_one$[rsp], rax

; 360  :     if (neg_one == NULL) goto Fail;

  000a7	48 83 7c 24 68
	00		 cmp	 QWORD PTR neg_one$[rsp], 0
  000ad	75 05		 jne	 SHORT $LN100@compute_sl@2
  000af	e9 c6 06 00 00	 jmp	 $Fail$20636
$LN100@compute_sl@2:

; 361  : 
; 362  :     /* Calculate step value */
; 363  :     if (slice->step == Py_None) {

  000b4	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  000bb	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR slice$[rsp]
  000c3	48 39 41 70	 cmp	 QWORD PTR [rcx+112], rax
  000c7	75 1f		 jne	 SHORT $LN99@compute_sl@2

; 364  :         clamped_step = 1;

  000c9	48 c7 44 24 40
	01 00 00 00	 mov	 QWORD PTR clamped_step$[rsp], 1

; 365  :         tmp_step = one;

  000d2	48 8b 44 24 50	 mov	 rax, QWORD PTR one$[rsp]
  000d7	48 89 44 24 30	 mov	 QWORD PTR tmp_step$[rsp], rax

; 366  :         Py_INCREF(tmp_step);

  000dc	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tmp_step$[rsp]
  000e1	e8 00 00 00 00	 call	 _Py_IncRef

; 367  :     } else {

  000e6	eb 62		 jmp	 SHORT $LN98@compute_sl@2
$LN99@compute_sl@2:

; 368  :         if (!_PyEval_SliceIndex(slice->step, &clamped_step)) goto Fail;

  000e8	48 8d 54 24 40	 lea	 rdx, QWORD PTR clamped_step$[rsp]
  000ed	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR slice$[rsp]
  000f5	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  000f9	e8 00 00 00 00	 call	 _PyEval_SliceIndex
  000fe	85 c0		 test	 eax, eax
  00100	75 05		 jne	 SHORT $LN97@compute_sl@2
  00102	e9 73 06 00 00	 jmp	 $Fail$20636
$LN97@compute_sl@2:

; 369  :         if (clamped_step == 0) {

  00107	48 83 7c 24 40
	00		 cmp	 QWORD PTR clamped_step$[rsp], 0
  0010d	75 18		 jne	 SHORT $LN96@compute_sl@2

; 370  :             PyErr_SetString(PyExc_ValueError,
; 371  :                             "slice step cannot be zero");

  0010f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BK@PFFNIAMP@slice?5step?5cannot?5be?5zero?$AA@
  00116	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  0011d	e8 00 00 00 00	 call	 PyErr_SetString

; 372  :             goto Fail;

  00122	e9 53 06 00 00	 jmp	 $Fail$20636
$LN96@compute_sl@2:

; 373  :         }
; 374  :         tmp_step = compute_slice_element(slice->step);

  00127	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR slice$[rsp]
  0012f	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  00133	e8 00 00 00 00	 call	 compute_slice_element
  00138	48 89 44 24 30	 mov	 QWORD PTR tmp_step$[rsp], rax

; 375  :         if (tmp_step == NULL) goto Fail;

  0013d	48 83 7c 24 30
	00		 cmp	 QWORD PTR tmp_step$[rsp], 0
  00143	75 05		 jne	 SHORT $LN95@compute_sl@2
  00145	e9 30 06 00 00	 jmp	 $Fail$20636
$LN95@compute_sl@2:
$LN98@compute_sl@2:

; 376  :     }
; 377  : 
; 378  :     /* Calculate start value */
; 379  :     if (slice->start == Py_None) {

  0014a	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00151	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR slice$[rsp]
  00159	48 39 41 60	 cmp	 QWORD PTR [rcx+96], rax
  0015d	75 4b		 jne	 SHORT $LN94@compute_sl@2

; 380  :         if (clamped_step < 0) {

  0015f	48 83 7c 24 40
	00		 cmp	 QWORD PTR clamped_step$[rsp], 0
  00165	7d 2a		 jge	 SHORT $LN93@compute_sl@2

; 381  :             tmp_start = PyNumber_Subtract(r->length, one);

  00167	48 8b 54 24 50	 mov	 rdx, QWORD PTR one$[rsp]
  0016c	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR r$[rsp]
  00174	48 8b 48 78	 mov	 rcx, QWORD PTR [rax+120]
  00178	e8 00 00 00 00	 call	 PyNumber_Subtract
  0017d	48 89 44 24 60	 mov	 QWORD PTR tmp_start$[rsp], rax

; 382  :             if (tmp_start == NULL) goto Fail;

  00182	48 83 7c 24 60
	00		 cmp	 QWORD PTR tmp_start$[rsp], 0
  00188	75 05		 jne	 SHORT $LN92@compute_sl@2
  0018a	e9 eb 05 00 00	 jmp	 $Fail$20636
$LN92@compute_sl@2:

; 383  :         } else {

  0018f	eb 14		 jmp	 SHORT $LN91@compute_sl@2
$LN93@compute_sl@2:

; 384  :             tmp_start = zero;

  00191	48 8b 44 24 58	 mov	 rax, QWORD PTR zero$[rsp]
  00196	48 89 44 24 60	 mov	 QWORD PTR tmp_start$[rsp], rax

; 385  :             Py_INCREF(tmp_start);

  0019b	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tmp_start$[rsp]
  001a0	e8 00 00 00 00	 call	 _Py_IncRef
$LN91@compute_sl@2:

; 386  :         }
; 387  :     } else {

  001a5	e9 72 02 00 00	 jmp	 $LN90@compute_sl@2
$LN94@compute_sl@2:

; 388  :         candidate = compute_slice_element(slice->start);

  001aa	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR slice$[rsp]
  001b2	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  001b6	e8 00 00 00 00	 call	 compute_slice_element
  001bb	48 89 44 24 70	 mov	 QWORD PTR candidate$[rsp], rax

; 389  :         if (candidate == NULL) goto Fail;

  001c0	48 83 7c 24 70
	00		 cmp	 QWORD PTR candidate$[rsp], 0
  001c6	75 05		 jne	 SHORT $LN89@compute_sl@2
  001c8	e9 ad 05 00 00	 jmp	 $Fail$20636
$LN89@compute_sl@2:

; 390  :         cmp_result = PyObject_RichCompareBool(candidate, zero, Py_LT);

  001cd	45 33 c0	 xor	 r8d, r8d
  001d0	48 8b 54 24 58	 mov	 rdx, QWORD PTR zero$[rsp]
  001d5	48 8b 4c 24 70	 mov	 rcx, QWORD PTR candidate$[rsp]
  001da	e8 00 00 00 00	 call	 PyObject_RichCompareBool
  001df	89 44 24 4c	 mov	 DWORD PTR cmp_result$[rsp], eax

; 391  :         if (cmp_result == -1) goto Fail;

  001e3	83 7c 24 4c ff	 cmp	 DWORD PTR cmp_result$[rsp], -1
  001e8	75 05		 jne	 SHORT $LN88@compute_sl@2
  001ea	e9 8b 05 00 00	 jmp	 $Fail$20636
$LN88@compute_sl@2:

; 392  :         if (cmp_result) {

  001ef	83 7c 24 4c 00	 cmp	 DWORD PTR cmp_result$[rsp], 0
  001f4	74 7f		 je	 SHORT $LN87@compute_sl@2

; 393  :             /* candidate < 0 */
; 394  :             tmp_start = PyNumber_Add(r->length, candidate);

  001f6	48 8b 54 24 70	 mov	 rdx, QWORD PTR candidate$[rsp]
  001fb	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR r$[rsp]
  00203	48 8b 48 78	 mov	 rcx, QWORD PTR [rax+120]
  00207	e8 00 00 00 00	 call	 PyNumber_Add
  0020c	48 89 44 24 60	 mov	 QWORD PTR tmp_start$[rsp], rax

; 395  :             if (tmp_start == NULL) goto Fail;

  00211	48 83 7c 24 60
	00		 cmp	 QWORD PTR tmp_start$[rsp], 0
  00217	75 05		 jne	 SHORT $LN86@compute_sl@2
  00219	e9 5c 05 00 00	 jmp	 $Fail$20636
$LN86@compute_sl@2:
$LN85@compute_sl@2:

; 396  :             Py_CLEAR(candidate);

  0021e	48 83 7c 24 70
	00		 cmp	 QWORD PTR candidate$[rsp], 0
  00224	74 47		 je	 SHORT $LN82@compute_sl@2
  00226	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0022e	4c 8b 4c 24 70	 mov	 r9, QWORD PTR candidate$[rsp]
  00233	41 b8 8c 01 00
	00		 mov	 r8d, 396		; 0000018cH
  00239	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@JFGJIEKG@?4?4?2Objects?2rangeobject?4c?$AA@
  00240	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@NFKHDELE@compute_slice_indices?$AA@
  00247	e8 00 00 00 00	 call	 _PyParallel_Guard
  0024c	85 c0		 test	 eax, eax
  0024e	75 1d		 jne	 SHORT $LN82@compute_sl@2
  00250	48 8b 44 24 70	 mov	 rax, QWORD PTR candidate$[rsp]
  00255	48 89 44 24 78	 mov	 QWORD PTR _py_tmp$20667[rsp], rax
  0025a	48 c7 44 24 70
	00 00 00 00	 mov	 QWORD PTR candidate$[rsp], 0
  00263	48 8b 4c 24 78	 mov	 rcx, QWORD PTR _py_tmp$20667[rsp]
  00268	e8 00 00 00 00	 call	 _Py_DecRef
$LN82@compute_sl@2:
  0026d	33 c0		 xor	 eax, eax
  0026f	85 c0		 test	 eax, eax
  00271	75 ab		 jne	 SHORT $LN85@compute_sl@2

; 397  :         } else {

  00273	eb 13		 jmp	 SHORT $LN81@compute_sl@2
$LN87@compute_sl@2:

; 398  :             /* candidate >= 0 */
; 399  :             tmp_start = candidate;

  00275	48 8b 44 24 70	 mov	 rax, QWORD PTR candidate$[rsp]
  0027a	48 89 44 24 60	 mov	 QWORD PTR tmp_start$[rsp], rax

; 400  :             candidate = NULL;

  0027f	48 c7 44 24 70
	00 00 00 00	 mov	 QWORD PTR candidate$[rsp], 0
$LN81@compute_sl@2:

; 401  :         }
; 402  :         cmp_result = PyObject_RichCompareBool(tmp_start, zero, Py_LT);

  00288	45 33 c0	 xor	 r8d, r8d
  0028b	48 8b 54 24 58	 mov	 rdx, QWORD PTR zero$[rsp]
  00290	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tmp_start$[rsp]
  00295	e8 00 00 00 00	 call	 PyObject_RichCompareBool
  0029a	89 44 24 4c	 mov	 DWORD PTR cmp_result$[rsp], eax

; 403  :         if (cmp_result == -1) goto Fail;

  0029e	83 7c 24 4c ff	 cmp	 DWORD PTR cmp_result$[rsp], -1
  002a3	75 05		 jne	 SHORT $LN80@compute_sl@2
  002a5	e9 d0 04 00 00	 jmp	 $Fail$20636
$LN80@compute_sl@2:

; 404  :         if (cmp_result) {

  002aa	83 7c 24 4c 00	 cmp	 DWORD PTR cmp_result$[rsp], 0
  002af	0f 84 88 00 00
	00		 je	 $LN79@compute_sl@2
$LN78@compute_sl@2:

; 405  :             /* tmp_start < 0 */
; 406  :             Py_CLEAR(tmp_start);

  002b5	48 83 7c 24 60
	00		 cmp	 QWORD PTR tmp_start$[rsp], 0
  002bb	74 4d		 je	 SHORT $LN75@compute_sl@2
  002bd	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  002c5	4c 8b 4c 24 60	 mov	 r9, QWORD PTR tmp_start$[rsp]
  002ca	41 b8 96 01 00
	00		 mov	 r8d, 406		; 00000196H
  002d0	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@JFGJIEKG@?4?4?2Objects?2rangeobject?4c?$AA@
  002d7	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@NFKHDELE@compute_slice_indices?$AA@
  002de	e8 00 00 00 00	 call	 _PyParallel_Guard
  002e3	85 c0		 test	 eax, eax
  002e5	75 23		 jne	 SHORT $LN75@compute_sl@2
  002e7	48 8b 44 24 60	 mov	 rax, QWORD PTR tmp_start$[rsp]
  002ec	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR _py_tmp$20679[rsp], rax
  002f4	48 c7 44 24 60
	00 00 00 00	 mov	 QWORD PTR tmp_start$[rsp], 0
  002fd	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR _py_tmp$20679[rsp]
  00305	e8 00 00 00 00	 call	 _Py_DecRef
$LN75@compute_sl@2:
  0030a	33 c0		 xor	 eax, eax
  0030c	85 c0		 test	 eax, eax
  0030e	75 a5		 jne	 SHORT $LN78@compute_sl@2

; 407  :             if (clamped_step < 0) {

  00310	48 83 7c 24 40
	00		 cmp	 QWORD PTR clamped_step$[rsp], 0
  00316	7d 0c		 jge	 SHORT $LN74@compute_sl@2

; 408  :                 tmp_start = neg_one;

  00318	48 8b 44 24 68	 mov	 rax, QWORD PTR neg_one$[rsp]
  0031d	48 89 44 24 60	 mov	 QWORD PTR tmp_start$[rsp], rax

; 409  :             } else {

  00322	eb 0a		 jmp	 SHORT $LN73@compute_sl@2
$LN74@compute_sl@2:

; 410  :                 tmp_start = zero;

  00324	48 8b 44 24 58	 mov	 rax, QWORD PTR zero$[rsp]
  00329	48 89 44 24 60	 mov	 QWORD PTR tmp_start$[rsp], rax
$LN73@compute_sl@2:

; 411  :             }
; 412  :             Py_INCREF(tmp_start);

  0032e	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tmp_start$[rsp]
  00333	e8 00 00 00 00	 call	 _Py_IncRef

; 413  :         } else {

  00338	e9 df 00 00 00	 jmp	 $LN72@compute_sl@2
$LN79@compute_sl@2:

; 414  :             /* tmp_start >= 0 */
; 415  :             cmp_result = PyObject_RichCompareBool(tmp_start, r->length, Py_GE);

  0033d	41 b8 05 00 00
	00		 mov	 r8d, 5
  00343	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR r$[rsp]
  0034b	48 8b 50 78	 mov	 rdx, QWORD PTR [rax+120]
  0034f	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tmp_start$[rsp]
  00354	e8 00 00 00 00	 call	 PyObject_RichCompareBool
  00359	89 44 24 4c	 mov	 DWORD PTR cmp_result$[rsp], eax

; 416  :             if (cmp_result == -1) goto Fail;

  0035d	83 7c 24 4c ff	 cmp	 DWORD PTR cmp_result$[rsp], -1
  00362	75 05		 jne	 SHORT $LN71@compute_sl@2
  00364	e9 11 04 00 00	 jmp	 $Fail$20636
$LN71@compute_sl@2:

; 417  :             if (cmp_result) {

  00369	83 7c 24 4c 00	 cmp	 DWORD PTR cmp_result$[rsp], 0
  0036e	0f 84 a8 00 00
	00		 je	 $LN70@compute_sl@2
$LN69@compute_sl@2:

; 418  :                 /* tmp_start >= r->length */
; 419  :                 Py_CLEAR(tmp_start);

  00374	48 83 7c 24 60
	00		 cmp	 QWORD PTR tmp_start$[rsp], 0
  0037a	74 4d		 je	 SHORT $LN66@compute_sl@2
  0037c	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00384	4c 8b 4c 24 60	 mov	 r9, QWORD PTR tmp_start$[rsp]
  00389	41 b8 a3 01 00
	00		 mov	 r8d, 419		; 000001a3H
  0038f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@JFGJIEKG@?4?4?2Objects?2rangeobject?4c?$AA@
  00396	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@NFKHDELE@compute_slice_indices?$AA@
  0039d	e8 00 00 00 00	 call	 _PyParallel_Guard
  003a2	85 c0		 test	 eax, eax
  003a4	75 23		 jne	 SHORT $LN66@compute_sl@2
  003a6	48 8b 44 24 60	 mov	 rax, QWORD PTR tmp_start$[rsp]
  003ab	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR _py_tmp$20693[rsp], rax
  003b3	48 c7 44 24 60
	00 00 00 00	 mov	 QWORD PTR tmp_start$[rsp], 0
  003bc	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR _py_tmp$20693[rsp]
  003c4	e8 00 00 00 00	 call	 _Py_DecRef
$LN66@compute_sl@2:
  003c9	33 c0		 xor	 eax, eax
  003cb	85 c0		 test	 eax, eax
  003cd	75 a5		 jne	 SHORT $LN69@compute_sl@2

; 420  :                 if (clamped_step < 0) {

  003cf	48 83 7c 24 40
	00		 cmp	 QWORD PTR clamped_step$[rsp], 0
  003d5	7d 2a		 jge	 SHORT $LN65@compute_sl@2

; 421  :                     tmp_start = PyNumber_Subtract(r->length, one);

  003d7	48 8b 54 24 50	 mov	 rdx, QWORD PTR one$[rsp]
  003dc	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR r$[rsp]
  003e4	48 8b 48 78	 mov	 rcx, QWORD PTR [rax+120]
  003e8	e8 00 00 00 00	 call	 PyNumber_Subtract
  003ed	48 89 44 24 60	 mov	 QWORD PTR tmp_start$[rsp], rax

; 422  :                     if (tmp_start == NULL) goto Fail;

  003f2	48 83 7c 24 60
	00		 cmp	 QWORD PTR tmp_start$[rsp], 0
  003f8	75 05		 jne	 SHORT $LN64@compute_sl@2
  003fa	e9 7b 03 00 00	 jmp	 $Fail$20636
$LN64@compute_sl@2:

; 423  :                 } else {

  003ff	eb 1b		 jmp	 SHORT $LN63@compute_sl@2
$LN65@compute_sl@2:

; 424  :                     tmp_start = r->length;

  00401	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR r$[rsp]
  00409	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  0040d	48 89 44 24 60	 mov	 QWORD PTR tmp_start$[rsp], rax

; 425  :                     Py_INCREF(tmp_start);

  00412	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tmp_start$[rsp]
  00417	e8 00 00 00 00	 call	 _Py_IncRef
$LN63@compute_sl@2:
$LN70@compute_sl@2:
$LN72@compute_sl@2:
$LN90@compute_sl@2:

; 426  :                 }
; 427  :             }
; 428  :         }
; 429  :     }
; 430  : 
; 431  :     /* Calculate stop value */
; 432  :     if (slice->stop == Py_None) {

  0041c	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
  00423	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR slice$[rsp]
  0042b	48 39 41 68	 cmp	 QWORD PTR [rcx+104], rax
  0042f	75 34		 jne	 SHORT $LN62@compute_sl@2

; 433  :         if (clamped_step < 0) {

  00431	48 83 7c 24 40
	00		 cmp	 QWORD PTR clamped_step$[rsp], 0
  00437	7d 0c		 jge	 SHORT $LN61@compute_sl@2

; 434  :             tmp_stop = neg_one;

  00439	48 8b 44 24 68	 mov	 rax, QWORD PTR neg_one$[rsp]
  0043e	48 89 44 24 38	 mov	 QWORD PTR tmp_stop$[rsp], rax

; 435  :         } else {

  00443	eb 11		 jmp	 SHORT $LN60@compute_sl@2
$LN61@compute_sl@2:

; 436  :             tmp_stop = r->length;

  00445	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR r$[rsp]
  0044d	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  00451	48 89 44 24 38	 mov	 QWORD PTR tmp_stop$[rsp], rax
$LN60@compute_sl@2:

; 437  :         }
; 438  :         Py_INCREF(tmp_stop);

  00456	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tmp_stop$[rsp]
  0045b	e8 00 00 00 00	 call	 _Py_IncRef

; 439  :     } else {

  00460	e9 7c 02 00 00	 jmp	 $LN59@compute_sl@2
$LN62@compute_sl@2:

; 440  :         candidate = compute_slice_element(slice->stop);

  00465	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR slice$[rsp]
  0046d	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  00471	e8 00 00 00 00	 call	 compute_slice_element
  00476	48 89 44 24 70	 mov	 QWORD PTR candidate$[rsp], rax

; 441  :         if (candidate == NULL) goto Fail;

  0047b	48 83 7c 24 70
	00		 cmp	 QWORD PTR candidate$[rsp], 0
  00481	75 05		 jne	 SHORT $LN58@compute_sl@2
  00483	e9 f2 02 00 00	 jmp	 $Fail$20636
$LN58@compute_sl@2:

; 442  :         cmp_result = PyObject_RichCompareBool(candidate, zero, Py_LT);

  00488	45 33 c0	 xor	 r8d, r8d
  0048b	48 8b 54 24 58	 mov	 rdx, QWORD PTR zero$[rsp]
  00490	48 8b 4c 24 70	 mov	 rcx, QWORD PTR candidate$[rsp]
  00495	e8 00 00 00 00	 call	 PyObject_RichCompareBool
  0049a	89 44 24 4c	 mov	 DWORD PTR cmp_result$[rsp], eax

; 443  :         if (cmp_result == -1) goto Fail;

  0049e	83 7c 24 4c ff	 cmp	 DWORD PTR cmp_result$[rsp], -1
  004a3	75 05		 jne	 SHORT $LN57@compute_sl@2
  004a5	e9 d0 02 00 00	 jmp	 $Fail$20636
$LN57@compute_sl@2:

; 444  :         if (cmp_result) {

  004aa	83 7c 24 4c 00	 cmp	 DWORD PTR cmp_result$[rsp], 0
  004af	0f 84 85 00 00
	00		 je	 $LN56@compute_sl@2

; 445  :             /* candidate < 0 */
; 446  :             tmp_stop = PyNumber_Add(r->length, candidate);

  004b5	48 8b 54 24 70	 mov	 rdx, QWORD PTR candidate$[rsp]
  004ba	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR r$[rsp]
  004c2	48 8b 48 78	 mov	 rcx, QWORD PTR [rax+120]
  004c6	e8 00 00 00 00	 call	 PyNumber_Add
  004cb	48 89 44 24 38	 mov	 QWORD PTR tmp_stop$[rsp], rax

; 447  :             if (tmp_stop == NULL) goto Fail;

  004d0	48 83 7c 24 38
	00		 cmp	 QWORD PTR tmp_stop$[rsp], 0
  004d6	75 05		 jne	 SHORT $LN55@compute_sl@2
  004d8	e9 9d 02 00 00	 jmp	 $Fail$20636
$LN55@compute_sl@2:
$LN54@compute_sl@2:

; 448  :             Py_CLEAR(candidate);

  004dd	48 83 7c 24 70
	00		 cmp	 QWORD PTR candidate$[rsp], 0
  004e3	74 4d		 je	 SHORT $LN51@compute_sl@2
  004e5	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  004ed	4c 8b 4c 24 70	 mov	 r9, QWORD PTR candidate$[rsp]
  004f2	41 b8 c0 01 00
	00		 mov	 r8d, 448		; 000001c0H
  004f8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@JFGJIEKG@?4?4?2Objects?2rangeobject?4c?$AA@
  004ff	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@NFKHDELE@compute_slice_indices?$AA@
  00506	e8 00 00 00 00	 call	 _PyParallel_Guard
  0050b	85 c0		 test	 eax, eax
  0050d	75 23		 jne	 SHORT $LN51@compute_sl@2
  0050f	48 8b 44 24 70	 mov	 rax, QWORD PTR candidate$[rsp]
  00514	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR _py_tmp$20717[rsp], rax
  0051c	48 c7 44 24 70
	00 00 00 00	 mov	 QWORD PTR candidate$[rsp], 0
  00525	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR _py_tmp$20717[rsp]
  0052d	e8 00 00 00 00	 call	 _Py_DecRef
$LN51@compute_sl@2:
  00532	33 c0		 xor	 eax, eax
  00534	85 c0		 test	 eax, eax
  00536	75 a5		 jne	 SHORT $LN54@compute_sl@2

; 449  :         } else {

  00538	eb 13		 jmp	 SHORT $LN50@compute_sl@2
$LN56@compute_sl@2:

; 450  :             /* candidate >= 0 */
; 451  :             tmp_stop = candidate;

  0053a	48 8b 44 24 70	 mov	 rax, QWORD PTR candidate$[rsp]
  0053f	48 89 44 24 38	 mov	 QWORD PTR tmp_stop$[rsp], rax

; 452  :             candidate = NULL;

  00544	48 c7 44 24 70
	00 00 00 00	 mov	 QWORD PTR candidate$[rsp], 0
$LN50@compute_sl@2:

; 453  :         }
; 454  :         cmp_result = PyObject_RichCompareBool(tmp_stop, zero, Py_LT);

  0054d	45 33 c0	 xor	 r8d, r8d
  00550	48 8b 54 24 58	 mov	 rdx, QWORD PTR zero$[rsp]
  00555	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tmp_stop$[rsp]
  0055a	e8 00 00 00 00	 call	 PyObject_RichCompareBool
  0055f	89 44 24 4c	 mov	 DWORD PTR cmp_result$[rsp], eax

; 455  :         if (cmp_result == -1) goto Fail;

  00563	83 7c 24 4c ff	 cmp	 DWORD PTR cmp_result$[rsp], -1
  00568	75 05		 jne	 SHORT $LN49@compute_sl@2
  0056a	e9 0b 02 00 00	 jmp	 $Fail$20636
$LN49@compute_sl@2:

; 456  :         if (cmp_result) {

  0056f	83 7c 24 4c 00	 cmp	 DWORD PTR cmp_result$[rsp], 0
  00574	0f 84 88 00 00
	00		 je	 $LN48@compute_sl@2
$LN47@compute_sl@2:

; 457  :             /* tmp_stop < 0 */
; 458  :             Py_CLEAR(tmp_stop);

  0057a	48 83 7c 24 38
	00		 cmp	 QWORD PTR tmp_stop$[rsp], 0
  00580	74 4d		 je	 SHORT $LN44@compute_sl@2
  00582	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0058a	4c 8b 4c 24 38	 mov	 r9, QWORD PTR tmp_stop$[rsp]
  0058f	41 b8 ca 01 00
	00		 mov	 r8d, 458		; 000001caH
  00595	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@JFGJIEKG@?4?4?2Objects?2rangeobject?4c?$AA@
  0059c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@NFKHDELE@compute_slice_indices?$AA@
  005a3	e8 00 00 00 00	 call	 _PyParallel_Guard
  005a8	85 c0		 test	 eax, eax
  005aa	75 23		 jne	 SHORT $LN44@compute_sl@2
  005ac	48 8b 44 24 38	 mov	 rax, QWORD PTR tmp_stop$[rsp]
  005b1	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR _py_tmp$20729[rsp], rax
  005b9	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR tmp_stop$[rsp], 0
  005c2	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR _py_tmp$20729[rsp]
  005ca	e8 00 00 00 00	 call	 _Py_DecRef
$LN44@compute_sl@2:
  005cf	33 c0		 xor	 eax, eax
  005d1	85 c0		 test	 eax, eax
  005d3	75 a5		 jne	 SHORT $LN47@compute_sl@2

; 459  :             if (clamped_step < 0) {

  005d5	48 83 7c 24 40
	00		 cmp	 QWORD PTR clamped_step$[rsp], 0
  005db	7d 0c		 jge	 SHORT $LN43@compute_sl@2

; 460  :                 tmp_stop = neg_one;

  005dd	48 8b 44 24 68	 mov	 rax, QWORD PTR neg_one$[rsp]
  005e2	48 89 44 24 38	 mov	 QWORD PTR tmp_stop$[rsp], rax

; 461  :             } else {

  005e7	eb 0a		 jmp	 SHORT $LN42@compute_sl@2
$LN43@compute_sl@2:

; 462  :                 tmp_stop = zero;

  005e9	48 8b 44 24 58	 mov	 rax, QWORD PTR zero$[rsp]
  005ee	48 89 44 24 38	 mov	 QWORD PTR tmp_stop$[rsp], rax
$LN42@compute_sl@2:

; 463  :             }
; 464  :             Py_INCREF(tmp_stop);

  005f3	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tmp_stop$[rsp]
  005f8	e8 00 00 00 00	 call	 _Py_IncRef

; 465  :         } else {

  005fd	e9 df 00 00 00	 jmp	 $LN41@compute_sl@2
$LN48@compute_sl@2:

; 466  :             /* tmp_stop >= 0 */
; 467  :             cmp_result = PyObject_RichCompareBool(tmp_stop, r->length, Py_GE);

  00602	41 b8 05 00 00
	00		 mov	 r8d, 5
  00608	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR r$[rsp]
  00610	48 8b 50 78	 mov	 rdx, QWORD PTR [rax+120]
  00614	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tmp_stop$[rsp]
  00619	e8 00 00 00 00	 call	 PyObject_RichCompareBool
  0061e	89 44 24 4c	 mov	 DWORD PTR cmp_result$[rsp], eax

; 468  :             if (cmp_result == -1) goto Fail;

  00622	83 7c 24 4c ff	 cmp	 DWORD PTR cmp_result$[rsp], -1
  00627	75 05		 jne	 SHORT $LN40@compute_sl@2
  00629	e9 4c 01 00 00	 jmp	 $Fail$20636
$LN40@compute_sl@2:

; 469  :             if (cmp_result) {

  0062e	83 7c 24 4c 00	 cmp	 DWORD PTR cmp_result$[rsp], 0
  00633	0f 84 a8 00 00
	00		 je	 $LN39@compute_sl@2
$LN38@compute_sl@2:

; 470  :                 /* tmp_stop >= r->length */
; 471  :                 Py_CLEAR(tmp_stop);

  00639	48 83 7c 24 38
	00		 cmp	 QWORD PTR tmp_stop$[rsp], 0
  0063f	74 4d		 je	 SHORT $LN35@compute_sl@2
  00641	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00649	4c 8b 4c 24 38	 mov	 r9, QWORD PTR tmp_stop$[rsp]
  0064e	41 b8 d7 01 00
	00		 mov	 r8d, 471		; 000001d7H
  00654	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@JFGJIEKG@?4?4?2Objects?2rangeobject?4c?$AA@
  0065b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BG@NFKHDELE@compute_slice_indices?$AA@
  00662	e8 00 00 00 00	 call	 _PyParallel_Guard
  00667	85 c0		 test	 eax, eax
  00669	75 23		 jne	 SHORT $LN35@compute_sl@2
  0066b	48 8b 44 24 38	 mov	 rax, QWORD PTR tmp_stop$[rsp]
  00670	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR _py_tmp$20743[rsp], rax
  00678	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR tmp_stop$[rsp], 0
  00681	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR _py_tmp$20743[rsp]
  00689	e8 00 00 00 00	 call	 _Py_DecRef
$LN35@compute_sl@2:
  0068e	33 c0		 xor	 eax, eax
  00690	85 c0		 test	 eax, eax
  00692	75 a5		 jne	 SHORT $LN38@compute_sl@2

; 472  :                 if (clamped_step < 0) {

  00694	48 83 7c 24 40
	00		 cmp	 QWORD PTR clamped_step$[rsp], 0
  0069a	7d 2a		 jge	 SHORT $LN34@compute_sl@2

; 473  :                     tmp_stop = PyNumber_Subtract(r->length, one);

  0069c	48 8b 54 24 50	 mov	 rdx, QWORD PTR one$[rsp]
  006a1	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR r$[rsp]
  006a9	48 8b 48 78	 mov	 rcx, QWORD PTR [rax+120]
  006ad	e8 00 00 00 00	 call	 PyNumber_Subtract
  006b2	48 89 44 24 38	 mov	 QWORD PTR tmp_stop$[rsp], rax

; 474  :                     if (tmp_stop == NULL) goto Fail;

  006b7	48 83 7c 24 38
	00		 cmp	 QWORD PTR tmp_stop$[rsp], 0
  006bd	75 05		 jne	 SHORT $LN33@compute_sl@2
  006bf	e9 b6 00 00 00	 jmp	 $Fail$20636
$LN33@compute_sl@2:

; 475  :                 } else {

  006c4	eb 1b		 jmp	 SHORT $LN32@compute_sl@2
$LN34@compute_sl@2:

; 476  :                     tmp_stop = r->length;

  006c6	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR r$[rsp]
  006ce	48 8b 40 78	 mov	 rax, QWORD PTR [rax+120]
  006d2	48 89 44 24 38	 mov	 QWORD PTR tmp_stop$[rsp], rax

; 477  :                     Py_INCREF(tmp_stop);

  006d7	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tmp_stop$[rsp]
  006dc	e8 00 00 00 00	 call	 _Py_IncRef
$LN32@compute_sl@2:
$LN39@compute_sl@2:
$LN41@compute_sl@2:
$LN59@compute_sl@2:

; 478  :                 }
; 479  :             }
; 480  :         }
; 481  :     }
; 482  : 
; 483  :     /* Check if the slice is empty or not */
; 484  :     if (clamped_step < 0) {

  006e1	48 83 7c 24 40
	00		 cmp	 QWORD PTR clamped_step$[rsp], 0
  006e7	7d 1b		 jge	 SHORT $LN31@compute_sl@2

; 485  :         has_elements = PyObject_RichCompareBool(tmp_start, tmp_stop, Py_GT);

  006e9	41 b8 04 00 00
	00		 mov	 r8d, 4
  006ef	48 8b 54 24 38	 mov	 rdx, QWORD PTR tmp_stop$[rsp]
  006f4	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tmp_start$[rsp]
  006f9	e8 00 00 00 00	 call	 PyObject_RichCompareBool
  006fe	89 44 24 48	 mov	 DWORD PTR has_elements$[rsp], eax

; 486  :     } else {

  00702	eb 16		 jmp	 SHORT $LN30@compute_sl@2
$LN31@compute_sl@2:

; 487  :         has_elements = PyObject_RichCompareBool(tmp_start, tmp_stop, Py_LT);

  00704	45 33 c0	 xor	 r8d, r8d
  00707	48 8b 54 24 38	 mov	 rdx, QWORD PTR tmp_stop$[rsp]
  0070c	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tmp_start$[rsp]
  00711	e8 00 00 00 00	 call	 PyObject_RichCompareBool
  00716	89 44 24 48	 mov	 DWORD PTR has_elements$[rsp], eax
$LN30@compute_sl@2:

; 488  :     }
; 489  :     if (has_elements == -1) goto Fail;

  0071a	83 7c 24 48 ff	 cmp	 DWORD PTR has_elements$[rsp], -1
  0071f	75 02		 jne	 SHORT $LN29@compute_sl@2
  00721	eb 57		 jmp	 SHORT $Fail$20636
$LN29@compute_sl@2:

; 490  : 
; 491  :     *start = tmp_start;

  00723	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR start$[rsp]
  0072b	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tmp_start$[rsp]
  00730	48 89 08	 mov	 QWORD PTR [rax], rcx

; 492  :     *stop = tmp_stop;

  00733	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR stop$[rsp]
  0073b	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tmp_stop$[rsp]
  00740	48 89 08	 mov	 QWORD PTR [rax], rcx

; 493  :     *step = tmp_step;

  00743	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR step$[rsp]
  0074b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tmp_step$[rsp]
  00750	48 89 08	 mov	 QWORD PTR [rax], rcx

; 494  :     Py_DECREF(neg_one);

  00753	48 8b 4c 24 68	 mov	 rcx, QWORD PTR neg_one$[rsp]
  00758	e8 00 00 00 00	 call	 _Py_DecRef

; 495  :     Py_DECREF(one);

  0075d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR one$[rsp]
  00762	e8 00 00 00 00	 call	 _Py_DecRef

; 496  :     Py_DECREF(zero);

  00767	48 8b 4c 24 58	 mov	 rcx, QWORD PTR zero$[rsp]
  0076c	e8 00 00 00 00	 call	 _Py_DecRef

; 497  :     return has_elements;

  00771	8b 44 24 48	 mov	 eax, DWORD PTR has_elements$[rsp]
  00775	e9 ad 00 00 00	 jmp	 $LN103@compute_sl@2
$Fail$20636:
$LN28@compute_sl@2:

; 498  : 
; 499  :   Fail:
; 500  :     Py_XDECREF(tmp_start);

  0077a	48 83 7c 24 60
	00		 cmp	 QWORD PTR tmp_start$[rsp], 0
  00780	74 0a		 je	 SHORT $LN25@compute_sl@2
  00782	48 8b 4c 24 60	 mov	 rcx, QWORD PTR tmp_start$[rsp]
  00787	e8 00 00 00 00	 call	 _Py_DecRef
$LN25@compute_sl@2:
  0078c	33 c0		 xor	 eax, eax
  0078e	85 c0		 test	 eax, eax
  00790	75 e8		 jne	 SHORT $LN28@compute_sl@2
$LN24@compute_sl@2:

; 501  :     Py_XDECREF(tmp_stop);

  00792	48 83 7c 24 38
	00		 cmp	 QWORD PTR tmp_stop$[rsp], 0
  00798	74 0a		 je	 SHORT $LN21@compute_sl@2
  0079a	48 8b 4c 24 38	 mov	 rcx, QWORD PTR tmp_stop$[rsp]
  0079f	e8 00 00 00 00	 call	 _Py_DecRef
$LN21@compute_sl@2:
  007a4	33 c0		 xor	 eax, eax
  007a6	85 c0		 test	 eax, eax
  007a8	75 e8		 jne	 SHORT $LN24@compute_sl@2
$LN20@compute_sl@2:

; 502  :     Py_XDECREF(tmp_step);

  007aa	48 83 7c 24 30
	00		 cmp	 QWORD PTR tmp_step$[rsp], 0
  007b0	74 0a		 je	 SHORT $LN17@compute_sl@2
  007b2	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tmp_step$[rsp]
  007b7	e8 00 00 00 00	 call	 _Py_DecRef
$LN17@compute_sl@2:
  007bc	33 c0		 xor	 eax, eax
  007be	85 c0		 test	 eax, eax
  007c0	75 e8		 jne	 SHORT $LN20@compute_sl@2
$LN16@compute_sl@2:

; 503  :     Py_XDECREF(candidate);

  007c2	48 83 7c 24 70
	00		 cmp	 QWORD PTR candidate$[rsp], 0
  007c8	74 0a		 je	 SHORT $LN13@compute_sl@2
  007ca	48 8b 4c 24 70	 mov	 rcx, QWORD PTR candidate$[rsp]
  007cf	e8 00 00 00 00	 call	 _Py_DecRef
$LN13@compute_sl@2:
  007d4	33 c0		 xor	 eax, eax
  007d6	85 c0		 test	 eax, eax
  007d8	75 e8		 jne	 SHORT $LN16@compute_sl@2
$LN12@compute_sl@2:

; 504  :     Py_XDECREF(neg_one);

  007da	48 83 7c 24 68
	00		 cmp	 QWORD PTR neg_one$[rsp], 0
  007e0	74 0a		 je	 SHORT $LN9@compute_sl@2
  007e2	48 8b 4c 24 68	 mov	 rcx, QWORD PTR neg_one$[rsp]
  007e7	e8 00 00 00 00	 call	 _Py_DecRef
$LN9@compute_sl@2:
  007ec	33 c0		 xor	 eax, eax
  007ee	85 c0		 test	 eax, eax
  007f0	75 e8		 jne	 SHORT $LN12@compute_sl@2
$LN8@compute_sl@2:

; 505  :     Py_XDECREF(one);

  007f2	48 83 7c 24 50
	00		 cmp	 QWORD PTR one$[rsp], 0
  007f8	74 0a		 je	 SHORT $LN5@compute_sl@2
  007fa	48 8b 4c 24 50	 mov	 rcx, QWORD PTR one$[rsp]
  007ff	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@compute_sl@2:
  00804	33 c0		 xor	 eax, eax
  00806	85 c0		 test	 eax, eax
  00808	75 e8		 jne	 SHORT $LN8@compute_sl@2
$LN4@compute_sl@2:

; 506  :     Py_XDECREF(zero);

  0080a	48 83 7c 24 58
	00		 cmp	 QWORD PTR zero$[rsp], 0
  00810	74 0a		 je	 SHORT $LN1@compute_sl@2
  00812	48 8b 4c 24 58	 mov	 rcx, QWORD PTR zero$[rsp]
  00817	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@compute_sl@2:
  0081c	33 c0		 xor	 eax, eax
  0081e	85 c0		 test	 eax, eax
  00820	75 e8		 jne	 SHORT $LN4@compute_sl@2

; 507  :     return -1;

  00822	b8 ff ff ff ff	 mov	 eax, -1
$LN103@compute_sl@2:

; 508  : }

  00827	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  0082e	c3		 ret	 0
compute_slice_indices ENDP
_TEXT	ENDS
PUBLIC	??_C@_0ED@BCLNFLAD@slice?5indices?5must?5be?5integers?5o@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$compute_slice_element DD imagerel compute_slice_element
	DD	imagerel compute_slice_element+117
	DD	imagerel $unwind$compute_slice_element
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$compute_slice_element DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0ED@BCLNFLAD@slice?5indices?5must?5be?5integers?5o@
CONST	SEGMENT
??_C@_0ED@BCLNFLAD@slice?5indices?5must?5be?5integers?5o@ DB 'slice indic'
	DB	'es must be integers or None or have an __index__ method', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT compute_slice_element
_TEXT	SEGMENT
result$ = 32
obj$ = 64
compute_slice_element PROC				; COMDAT

; 328  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 329  :     PyObject *result = NULL;

  00009	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR result$[rsp], 0

; 330  :     if (obj != NULL) {

  00012	48 83 7c 24 40
	00		 cmp	 QWORD PTR obj$[rsp], 0
  00018	74 51		 je	 SHORT $LN3@compute_sl@3

; 331  :         if (PyIndex_Check(obj)) {

  0001a	48 8b 44 24 40	 mov	 rax, QWORD PTR obj$[rsp]
  0001f	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00023	48 83 b8 b8 00
	00 00 00	 cmp	 QWORD PTR [rax+184], 0
  0002b	74 2b		 je	 SHORT $LN2@compute_sl@3
  0002d	48 8b 44 24 40	 mov	 rax, QWORD PTR obj$[rsp]
  00032	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00036	48 8b 80 b8 00
	00 00		 mov	 rax, QWORD PTR [rax+184]
  0003d	48 83 b8 08 01
	00 00 00	 cmp	 QWORD PTR [rax+264], 0
  00045	74 11		 je	 SHORT $LN2@compute_sl@3

; 332  :             result = PyNumber_Index(obj);

  00047	48 8b 4c 24 40	 mov	 rcx, QWORD PTR obj$[rsp]
  0004c	e8 00 00 00 00	 call	 PyNumber_Index
  00051	48 89 44 24 20	 mov	 QWORD PTR result$[rsp], rax

; 333  :         }
; 334  :         else {

  00056	eb 13		 jmp	 SHORT $LN1@compute_sl@3
$LN2@compute_sl@3:

; 335  :             PyErr_SetString(PyExc_TypeError,
; 336  :                             "slice indices must be integers or "
; 337  :                             "None or have an __index__ method");

  00058	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0ED@BCLNFLAD@slice?5indices?5must?5be?5integers?5o@
  0005f	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_TypeError
  00066	e8 00 00 00 00	 call	 PyErr_SetString
$LN1@compute_sl@3:
$LN3@compute_sl@3:

; 338  :         }
; 339  :     }
; 340  :     return result;

  0006b	48 8b 44 24 20	 mov	 rax, QWORD PTR result$[rsp]

; 341  : }

  00070	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00074	c3		 ret	 0
compute_slice_element ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$rangeiter_next DD imagerel rangeiter_next
	DD	imagerel rangeiter_next+94
	DD	imagerel $unwind$rangeiter_next
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$rangeiter_next DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT rangeiter_next
_TEXT	SEGMENT
tv76 = 32
r$ = 64
rangeiter_next PROC					; COMDAT

; 950  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 951  :     if (r->index < r->len)

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR r$[rsp]
  0000e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR r$[rsp]
  00013	8b 49 6c	 mov	 ecx, DWORD PTR [rcx+108]
  00016	39 48 60	 cmp	 DWORD PTR [rax+96], ecx
  00019	7d 3c		 jge	 SHORT $LN1@rangeiter_

; 952  :         /* cast to unsigned to avoid possible signed overflow
; 953  :            in intermediate calculations. */
; 954  :         return PyLong_FromLong((long)(r->start +
; 955  :                                       (unsigned long)(r->index++) * r->step));

  0001b	48 8b 44 24 40	 mov	 rax, QWORD PTR r$[rsp]
  00020	48 8b 4c 24 40	 mov	 rcx, QWORD PTR r$[rsp]
  00025	8b 40 60	 mov	 eax, DWORD PTR [rax+96]
  00028	0f af 41 68	 imul	 eax, DWORD PTR [rcx+104]
  0002c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR r$[rsp]
  00031	8b 49 64	 mov	 ecx, DWORD PTR [rcx+100]
  00034	03 c8		 add	 ecx, eax
  00036	89 4c 24 20	 mov	 DWORD PTR tv76[rsp], ecx
  0003a	48 8b 44 24 40	 mov	 rax, QWORD PTR r$[rsp]
  0003f	8b 40 60	 mov	 eax, DWORD PTR [rax+96]
  00042	ff c0		 inc	 eax
  00044	48 8b 4c 24 40	 mov	 rcx, QWORD PTR r$[rsp]
  00049	89 41 60	 mov	 DWORD PTR [rcx+96], eax
  0004c	8b 4c 24 20	 mov	 ecx, DWORD PTR tv76[rsp]
  00050	e8 00 00 00 00	 call	 PyLong_FromLong
  00055	eb 02		 jmp	 SHORT $LN2@rangeiter_
$LN1@rangeiter_:

; 956  :     return NULL;

  00057	33 c0		 xor	 eax, eax
$LN2@rangeiter_:

; 957  : }

  00059	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0005d	c3		 ret	 0
rangeiter_next ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$rangeiter_len DD imagerel rangeiter_len
	DD	imagerel rangeiter_len+39
	DD	imagerel $unwind$rangeiter_len
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$rangeiter_len DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT rangeiter_len
_TEXT	SEGMENT
r$ = 48
rangeiter_len PROC					; COMDAT

; 961  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 962  :     return PyLong_FromLong(r->len - r->index);

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR r$[rsp]
  0000e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR r$[rsp]
  00013	8b 49 60	 mov	 ecx, DWORD PTR [rcx+96]
  00016	8b 40 6c	 mov	 eax, DWORD PTR [rax+108]
  00019	2b c1		 sub	 eax, ecx
  0001b	8b c8		 mov	 ecx, eax
  0001d	e8 00 00 00 00	 call	 PyLong_FromLong

; 963  : }

  00022	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00026	c3		 ret	 0
rangeiter_len ENDP
_TEXT	ENDS
PUBLIC	??_C@_05HCLGNDAK@N?$CIN?$CJi?$AA@		; `string'
PUBLIC	??_C@_04BKLHDIKK@iter?$AA@			; `string'
EXTRN	_PyObject_GetBuiltin:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$rangeiter_reduce DD imagerel rangeiter_reduce
	DD	imagerel rangeiter_reduce+306
	DD	imagerel $unwind$rangeiter_reduce
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$rangeiter_reduce DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_05HCLGNDAK@N?$CIN?$CJi?$AA@
CONST	SEGMENT
??_C@_05HCLGNDAK@N?$CIN?$CJi?$AA@ DB 'N(N)i', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04BKLHDIKK@iter?$AA@
CONST	SEGMENT
??_C@_04BKLHDIKK@iter?$AA@ DB 'iter', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT rangeiter_reduce
_TEXT	SEGMENT
step$ = 32
stop$ = 40
start$ = 48
range$ = 56
r$ = 80
rangeiter_reduce PROC					; COMDAT

; 970  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 971  :     PyObject *start=NULL, *stop=NULL, *step=NULL;

  00009	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR start$[rsp], 0
  00012	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR stop$[rsp], 0
  0001b	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR step$[rsp], 0

; 972  :     PyObject *range;
; 973  : 
; 974  :     /* create a range object for pickling */
; 975  :     start = PyLong_FromLong(r->start);

  00024	48 8b 44 24 50	 mov	 rax, QWORD PTR r$[rsp]
  00029	8b 48 64	 mov	 ecx, DWORD PTR [rax+100]
  0002c	e8 00 00 00 00	 call	 PyLong_FromLong
  00031	48 89 44 24 30	 mov	 QWORD PTR start$[rsp], rax

; 976  :     if (start == NULL)

  00036	48 83 7c 24 30
	00		 cmp	 QWORD PTR start$[rsp], 0
  0003c	75 05		 jne	 SHORT $LN16@rangeiter_@2

; 977  :         goto err;

  0003e	e9 a0 00 00 00	 jmp	 $err$21198
$LN16@rangeiter_@2:

; 978  :     stop = PyLong_FromLong(r->start + r->len * r->step);

  00043	48 8b 44 24 50	 mov	 rax, QWORD PTR r$[rsp]
  00048	48 8b 4c 24 50	 mov	 rcx, QWORD PTR r$[rsp]
  0004d	8b 40 6c	 mov	 eax, DWORD PTR [rax+108]
  00050	0f af 41 68	 imul	 eax, DWORD PTR [rcx+104]
  00054	48 8b 4c 24 50	 mov	 rcx, QWORD PTR r$[rsp]
  00059	03 41 64	 add	 eax, DWORD PTR [rcx+100]
  0005c	8b c8		 mov	 ecx, eax
  0005e	e8 00 00 00 00	 call	 PyLong_FromLong
  00063	48 89 44 24 28	 mov	 QWORD PTR stop$[rsp], rax

; 979  :     if (stop == NULL)

  00068	48 83 7c 24 28
	00		 cmp	 QWORD PTR stop$[rsp], 0
  0006e	75 02		 jne	 SHORT $LN15@rangeiter_@2

; 980  :         goto err;

  00070	eb 71		 jmp	 SHORT $err$21198
$LN15@rangeiter_@2:

; 981  :     step = PyLong_FromLong(r->step);

  00072	48 8b 44 24 50	 mov	 rax, QWORD PTR r$[rsp]
  00077	8b 48 68	 mov	 ecx, DWORD PTR [rax+104]
  0007a	e8 00 00 00 00	 call	 PyLong_FromLong
  0007f	48 89 44 24 20	 mov	 QWORD PTR step$[rsp], rax

; 982  :     if (step == NULL)

  00084	48 83 7c 24 20
	00		 cmp	 QWORD PTR step$[rsp], 0
  0008a	75 02		 jne	 SHORT $LN14@rangeiter_@2

; 983  :         goto err;

  0008c	eb 55		 jmp	 SHORT $err$21198
$LN14@rangeiter_@2:

; 984  :     range = (PyObject*)make_range_object(&PyRange_Type,
; 985  :                                start, stop, step);

  0008e	4c 8b 4c 24 20	 mov	 r9, QWORD PTR step$[rsp]
  00093	4c 8b 44 24 28	 mov	 r8, QWORD PTR stop$[rsp]
  00098	48 8b 54 24 30	 mov	 rdx, QWORD PTR start$[rsp]
  0009d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyRange_Type
  000a4	e8 00 00 00 00	 call	 make_range_object
  000a9	48 89 44 24 38	 mov	 QWORD PTR range$[rsp], rax

; 986  :     if (range == NULL)

  000ae	48 83 7c 24 38
	00		 cmp	 QWORD PTR range$[rsp], 0
  000b4	75 02		 jne	 SHORT $LN13@rangeiter_@2

; 987  :         goto err;

  000b6	eb 2b		 jmp	 SHORT $err$21198
$LN13@rangeiter_@2:

; 988  :     /* return the result */
; 989  :     return Py_BuildValue("N(N)i", _PyObject_GetBuiltin("iter"), range, r->index);

  000b8	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04BKLHDIKK@iter?$AA@
  000bf	e8 00 00 00 00	 call	 _PyObject_GetBuiltin
  000c4	48 8b 4c 24 50	 mov	 rcx, QWORD PTR r$[rsp]
  000c9	44 8b 49 60	 mov	 r9d, DWORD PTR [rcx+96]
  000cd	4c 8b 44 24 38	 mov	 r8, QWORD PTR range$[rsp]
  000d2	48 8b d0	 mov	 rdx, rax
  000d5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05HCLGNDAK@N?$CIN?$CJi?$AA@
  000dc	e8 00 00 00 00	 call	 Py_BuildValue
  000e1	eb 4a		 jmp	 SHORT $LN17@rangeiter_@2
$err$21198:
$LN12@rangeiter_@2:

; 990  : err:
; 991  :     Py_XDECREF(start);

  000e3	48 83 7c 24 30
	00		 cmp	 QWORD PTR start$[rsp], 0
  000e9	74 0a		 je	 SHORT $LN9@rangeiter_@2
  000eb	48 8b 4c 24 30	 mov	 rcx, QWORD PTR start$[rsp]
  000f0	e8 00 00 00 00	 call	 _Py_DecRef
$LN9@rangeiter_@2:
  000f5	33 c0		 xor	 eax, eax
  000f7	85 c0		 test	 eax, eax
  000f9	75 e8		 jne	 SHORT $LN12@rangeiter_@2
$LN8@rangeiter_@2:

; 992  :     Py_XDECREF(stop);

  000fb	48 83 7c 24 28
	00		 cmp	 QWORD PTR stop$[rsp], 0
  00101	74 0a		 je	 SHORT $LN5@rangeiter_@2
  00103	48 8b 4c 24 28	 mov	 rcx, QWORD PTR stop$[rsp]
  00108	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@rangeiter_@2:
  0010d	33 c0		 xor	 eax, eax
  0010f	85 c0		 test	 eax, eax
  00111	75 e8		 jne	 SHORT $LN8@rangeiter_@2
$LN4@rangeiter_@2:

; 993  :     Py_XDECREF(step);

  00113	48 83 7c 24 20
	00		 cmp	 QWORD PTR step$[rsp], 0
  00119	74 0a		 je	 SHORT $LN1@rangeiter_@2
  0011b	48 8b 4c 24 20	 mov	 rcx, QWORD PTR step$[rsp]
  00120	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@rangeiter_@2:
  00125	33 c0		 xor	 eax, eax
  00127	85 c0		 test	 eax, eax
  00129	75 e8		 jne	 SHORT $LN4@rangeiter_@2

; 994  :     return NULL;

  0012b	33 c0		 xor	 eax, eax
$LN17@rangeiter_@2:

; 995  : }

  0012d	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00131	c3		 ret	 0
rangeiter_reduce ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BD@ILOGJALA@index?5out?5of?5range?$AA@	; `string'
EXTRN	PyLong_AsLong:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$rangeiter_setstate DD imagerel rangeiter_setstate
	DD	imagerel rangeiter_setstate+129
	DD	imagerel $unwind$rangeiter_setstate
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$rangeiter_setstate DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT ??_C@_0BD@ILOGJALA@index?5out?5of?5range?$AA@
CONST	SEGMENT
??_C@_0BD@ILOGJALA@index?5out?5of?5range?$AA@ DB 'index out of range', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT rangeiter_setstate
_TEXT	SEGMENT
index$ = 32
r$ = 64
state$ = 72
rangeiter_setstate PROC					; COMDAT

; 999  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1000 :     long index = PyLong_AsLong(state);

  0000e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR state$[rsp]
  00013	e8 00 00 00 00	 call	 PyLong_AsLong
  00018	89 44 24 20	 mov	 DWORD PTR index$[rsp], eax

; 1001 :     if (index == -1 && PyErr_Occurred())

  0001c	83 7c 24 20 ff	 cmp	 DWORD PTR index$[rsp], -1
  00021	75 0e		 jne	 SHORT $LN3@rangeiter_@3
  00023	e8 00 00 00 00	 call	 PyErr_Occurred
  00028	48 85 c0	 test	 rax, rax
  0002b	74 04		 je	 SHORT $LN3@rangeiter_@3

; 1002 :         return NULL;

  0002d	33 c0		 xor	 eax, eax
  0002f	eb 4b		 jmp	 SHORT $LN4@rangeiter_@3
$LN3@rangeiter_@3:

; 1003 :     if (index < 0 || index >= r->len) {

  00031	83 7c 24 20 00	 cmp	 DWORD PTR index$[rsp], 0
  00036	7c 0e		 jl	 SHORT $LN1@rangeiter_@3
  00038	48 8b 44 24 40	 mov	 rax, QWORD PTR r$[rsp]
  0003d	8b 40 6c	 mov	 eax, DWORD PTR [rax+108]
  00040	39 44 24 20	 cmp	 DWORD PTR index$[rsp], eax
  00044	7c 17		 jl	 SHORT $LN2@rangeiter_@3
$LN1@rangeiter_@3:

; 1004 :         PyErr_SetString(PyExc_ValueError, "index out of range");

  00046	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BD@ILOGJALA@index?5out?5of?5range?$AA@
  0004d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_ValueError
  00054	e8 00 00 00 00	 call	 PyErr_SetString

; 1005 :         return NULL;

  00059	33 c0		 xor	 eax, eax
  0005b	eb 1f		 jmp	 SHORT $LN4@rangeiter_@3
$LN2@rangeiter_@3:

; 1006 :     }
; 1007 :     r->index = index;

  0005d	48 8b 44 24 40	 mov	 rax, QWORD PTR r$[rsp]
  00062	8b 4c 24 20	 mov	 ecx, DWORD PTR index$[rsp]
  00066	89 48 60	 mov	 DWORD PTR [rax+96], ecx

; 1008 :     Py_RETURN_NONE;

  00069	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00070	e8 00 00 00 00	 call	 _Py_IncRef
  00075	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
$LN4@rangeiter_@3:

; 1009 : }

  0007c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00080	c3		 ret	 0
rangeiter_setstate ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CJ@BHGBOPIB@lll?$DLrangeiter?$CI?$CJ?5requires?53?5int?5a@ ; `string'
PUBLIC	??_C@_0M@NOEHEHAK@rangeiter?$CI?$CJ?$AA@	; `string'
EXTRN	PyArg_ParseTuple:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$rangeiter_new DD imagerel rangeiter_new
	DD	imagerel rangeiter_new+112
	DD	imagerel $unwind$rangeiter_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$rangeiter_new DD 011301H
	DD	08213H
xdata	ENDS
;	COMDAT ??_C@_0CJ@BHGBOPIB@lll?$DLrangeiter?$CI?$CJ?5requires?53?5int?5a@
CONST	SEGMENT
??_C@_0CJ@BHGBOPIB@lll?$DLrangeiter?$CI?$CJ?5requires?53?5int?5a@ DB 'lll'
	DB	';rangeiter() requires 3 int arguments', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@NOEHEHAK@rangeiter?$CI?$CJ?$AA@
CONST	SEGMENT
??_C@_0M@NOEHEHAK@rangeiter?$CI?$CJ?$AA@ DB 'rangeiter()', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT rangeiter_new
_TEXT	SEGMENT
step$ = 48
stop$ = 52
start$ = 56
type$ = 80
args$ = 88
kw$ = 96
rangeiter_new PROC					; COMDAT

; 1122 : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1123 :     long start, stop, step;
; 1124 : 
; 1125 :     if (!_PyArg_NoKeywords("rangeiter()", kw))

  00013	48 8b 54 24 60	 mov	 rdx, QWORD PTR kw$[rsp]
  00018	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0M@NOEHEHAK@rangeiter?$CI?$CJ?$AA@
  0001f	e8 00 00 00 00	 call	 _PyArg_NoKeywords
  00024	85 c0		 test	 eax, eax
  00026	75 04		 jne	 SHORT $LN2@rangeiter_@4

; 1126 :         return NULL;

  00028	33 c0		 xor	 eax, eax
  0002a	eb 3f		 jmp	 SHORT $LN3@rangeiter_@4
$LN2@rangeiter_@4:

; 1127 : 
; 1128 :     if (!PyArg_ParseTuple(args, "lll;rangeiter() requires 3 int arguments",
; 1129 :                           &start, &stop, &step))

  0002c	48 8d 44 24 30	 lea	 rax, QWORD PTR step$[rsp]
  00031	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00036	4c 8d 4c 24 34	 lea	 r9, QWORD PTR stop$[rsp]
  0003b	4c 8d 44 24 38	 lea	 r8, QWORD PTR start$[rsp]
  00040	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CJ@BHGBOPIB@lll?$DLrangeiter?$CI?$CJ?5requires?53?5int?5a@
  00047	48 8b 4c 24 58	 mov	 rcx, QWORD PTR args$[rsp]
  0004c	e8 00 00 00 00	 call	 PyArg_ParseTuple
  00051	85 c0		 test	 eax, eax
  00053	75 04		 jne	 SHORT $LN1@rangeiter_@4

; 1130 :         return NULL;

  00055	33 c0		 xor	 eax, eax
  00057	eb 12		 jmp	 SHORT $LN3@rangeiter_@4
$LN1@rangeiter_@4:

; 1131 : 
; 1132 :     return fast_range_iter(start, stop, step);

  00059	44 8b 44 24 30	 mov	 r8d, DWORD PTR step$[rsp]
  0005e	8b 54 24 34	 mov	 edx, DWORD PTR stop$[rsp]
  00062	8b 4c 24 38	 mov	 ecx, DWORD PTR start$[rsp]
  00066	e8 00 00 00 00	 call	 fast_range_iter
$LN3@rangeiter_@4:

; 1133 : }

  0006b	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0006f	c3		 ret	 0
rangeiter_new ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DB@GNIMPPAA@range?5too?5large?5to?5represent?5as?5@ ; `string'
EXTRN	PyExc_OverflowError:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$fast_range_iter DD imagerel fast_range_iter
	DD	imagerel fast_range_iter+207
	DD	imagerel $unwind$fast_range_iter
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$fast_range_iter DD 011101H
	DD	08211H
xdata	ENDS
;	COMDAT ??_C@_0DB@GNIMPPAA@range?5too?5large?5to?5represent?5as?5@
CONST	SEGMENT
??_C@_0DB@GNIMPPAA@range?5too?5large?5to?5represent?5as?5@ DB 'range too '
	DB	'large to represent as a range_iterator', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT fast_range_iter
_TEXT	SEGMENT
it$ = 32
ulen$ = 40
tv70 = 48
start$ = 80
stop$ = 88
step$ = 96
fast_range_iter PROC					; COMDAT

; 1101 : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000d	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1102 :     rangeiterobject *it = PyObject_New(rangeiterobject, &PyRangeIter_Type);

  00011	e8 00 00 00 00	 call	 _Py_PXCTX
  00016	85 c0		 test	 eax, eax
  00018	74 13		 je	 SHORT $LN5@fast_range
  0001a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyRangeIter_Type
  00021	e8 00 00 00 00	 call	 _PxObject_New
  00026	48 89 44 24 30	 mov	 QWORD PTR tv70[rsp], rax
  0002b	eb 11		 jmp	 SHORT $LN6@fast_range
$LN5@fast_range:
  0002d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyRangeIter_Type
  00034	e8 00 00 00 00	 call	 _PyObject_New
  00039	48 89 44 24 30	 mov	 QWORD PTR tv70[rsp], rax
$LN6@fast_range:
  0003e	48 8b 44 24 30	 mov	 rax, QWORD PTR tv70[rsp]
  00043	48 89 44 24 20	 mov	 QWORD PTR it$[rsp], rax

; 1103 :     unsigned long ulen;
; 1104 :     if (it == NULL)

  00048	48 83 7c 24 20
	00		 cmp	 QWORD PTR it$[rsp], 0
  0004e	75 04		 jne	 SHORT $LN2@fast_range

; 1105 :         return NULL;

  00050	33 c0		 xor	 eax, eax
  00052	eb 76		 jmp	 SHORT $LN3@fast_range
$LN2@fast_range:

; 1106 :     it->start = start;

  00054	48 8b 44 24 20	 mov	 rax, QWORD PTR it$[rsp]
  00059	8b 4c 24 50	 mov	 ecx, DWORD PTR start$[rsp]
  0005d	89 48 64	 mov	 DWORD PTR [rax+100], ecx

; 1107 :     it->step = step;

  00060	48 8b 44 24 20	 mov	 rax, QWORD PTR it$[rsp]
  00065	8b 4c 24 60	 mov	 ecx, DWORD PTR step$[rsp]
  00069	89 48 68	 mov	 DWORD PTR [rax+104], ecx

; 1108 :     ulen = get_len_of_range(start, stop, step);

  0006c	44 8b 44 24 60	 mov	 r8d, DWORD PTR step$[rsp]
  00071	8b 54 24 58	 mov	 edx, DWORD PTR stop$[rsp]
  00075	8b 4c 24 50	 mov	 ecx, DWORD PTR start$[rsp]
  00079	e8 00 00 00 00	 call	 get_len_of_range
  0007e	89 44 24 28	 mov	 DWORD PTR ulen$[rsp], eax

; 1109 :     if (ulen > (unsigned long)LONG_MAX) {

  00082	81 7c 24 28 ff
	ff ff 7f	 cmp	 DWORD PTR ulen$[rsp], 2147483647 ; 7fffffffH
  0008a	76 21		 jbe	 SHORT $LN1@fast_range

; 1110 :         Py_DECREF(it);

  0008c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR it$[rsp]
  00091	e8 00 00 00 00	 call	 _Py_DecRef

; 1111 :         PyErr_SetString(PyExc_OverflowError,
; 1112 :                         "range too large to represent as a range_iterator");

  00096	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DB@GNIMPPAA@range?5too?5large?5to?5represent?5as?5@
  0009d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_OverflowError
  000a4	e8 00 00 00 00	 call	 PyErr_SetString

; 1113 :         return NULL;

  000a9	33 c0		 xor	 eax, eax
  000ab	eb 1d		 jmp	 SHORT $LN3@fast_range
$LN1@fast_range:

; 1114 :     }
; 1115 :     it->len = (long)ulen;

  000ad	48 8b 44 24 20	 mov	 rax, QWORD PTR it$[rsp]
  000b2	8b 4c 24 28	 mov	 ecx, DWORD PTR ulen$[rsp]
  000b6	89 48 6c	 mov	 DWORD PTR [rax+108], ecx

; 1116 :     it->index = 0;

  000b9	48 8b 44 24 20	 mov	 rax, QWORD PTR it$[rsp]
  000be	c7 40 60 00 00
	00 00		 mov	 DWORD PTR [rax+96], 0

; 1117 :     return (PyObject *)it;

  000c5	48 8b 44 24 20	 mov	 rax, QWORD PTR it$[rsp]
$LN3@fast_range:

; 1118 : }

  000ca	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000ce	c3		 ret	 0
fast_range_iter ENDP
_TEXT	ENDS
PUBLIC	??_C@_1BE@KKBHNKDH@?$AAs?$AAt?$AAe?$AAp?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DC@CCLFFDLE@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAr?$AAa?$AAn?$AAg?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@ ; `string'
EXTRN	__imp__wassert:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$get_len_of_range DD imagerel get_len_of_range
	DD	imagerel get_len_of_range+141
	DD	imagerel $unwind$get_len_of_range
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$get_len_of_range DD 011101H
	DD	04211H
xdata	ENDS
;	COMDAT ??_C@_1BE@KKBHNKDH@?$AAs?$AAt?$AAe?$AAp?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$AA@
CONST	SEGMENT
??_C@_1BE@KKBHNKDH@?$AAs?$AAt?$AAe?$AAp?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$AA@ DB 's'
	DB	00H, 't', 00H, 'e', 00H, 'p', 00H, ' ', 00H, '!', 00H, '=', 00H
	DB	' ', 00H, '0', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1DC@CCLFFDLE@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAr?$AAa?$AAn?$AAg?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
CONST	SEGMENT
??_C@_1DC@CCLFFDLE@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAr?$AAa?$AAn?$AAg?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@ DB '.'
	DB	00H, '.', 00H, '\', 00H, 'O', 00H, 'b', 00H, 'j', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 's', 00H, '\', 00H, 'r', 00H, 'a', 00H, 'n'
	DB	00H, 'g', 00H, 'e', 00H, 'o', 00H, 'b', 00H, 'j', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, '.', 00H, 'c', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT get_len_of_range
_TEXT	SEGMENT
lo$ = 48
hi$ = 56
step$ = 64
get_len_of_range PROC					; COMDAT

; 1073 : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000d	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1074 :     /* -------------------------------------------------------------
; 1075 :     If step > 0 and lo >= hi, or step < 0 and lo <= hi, the range is empty.
; 1076 :     Else for step > 0, if n values are in the range, the last one is
; 1077 :     lo + (n-1)*step, which must be <= hi-1.  Rearranging,
; 1078 :     n <= (hi - lo - 1)/step + 1, so taking the floor of the RHS gives
; 1079 :     the proper value.  Since lo < hi in this case, hi-lo-1 >= 0, so
; 1080 :     the RHS is non-negative and so truncation is the same as the
; 1081 :     floor.  Letting M be the largest positive long, the worst case
; 1082 :     for the RHS numerator is hi=M, lo=-M-1, and then
; 1083 :     hi-lo-1 = M-(-M-1)-1 = 2*M.  Therefore unsigned long has enough
; 1084 :     precision to compute the RHS exactly.  The analysis for step < 0
; 1085 :     is similar.
; 1086 :     ---------------------------------------------------------------*/
; 1087 :     assert(step != 0);

  00011	83 7c 24 40 00	 cmp	 DWORD PTR step$[rsp], 0
  00016	75 1c		 jne	 SHORT $LN7@get_len_of
  00018	41 b8 3f 04 00
	00		 mov	 r8d, 1087		; 0000043fH
  0001e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DC@CCLFFDLE@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAr?$AAa?$AAn?$AAg?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00025	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1BE@KKBHNKDH@?$AAs?$AAt?$AAe?$AAp?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0?$AA?$AA@
  0002c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00032	33 c0		 xor	 eax, eax
$LN7@get_len_of:

; 1088 :     if (step > 0 && lo < hi)

  00034	83 7c 24 40 00	 cmp	 DWORD PTR step$[rsp], 0
  00039	7e 20		 jle	 SHORT $LN4@get_len_of
  0003b	8b 44 24 38	 mov	 eax, DWORD PTR hi$[rsp]
  0003f	39 44 24 30	 cmp	 DWORD PTR lo$[rsp], eax
  00043	7d 16		 jge	 SHORT $LN4@get_len_of

; 1089 :         return 1UL + (hi - 1UL - lo) / step;

  00045	8b 44 24 38	 mov	 eax, DWORD PTR hi$[rsp]
  00049	ff c8		 dec	 eax
  0004b	2b 44 24 30	 sub	 eax, DWORD PTR lo$[rsp]
  0004f	33 d2		 xor	 edx, edx
  00051	f7 74 24 40	 div	 DWORD PTR step$[rsp]
  00055	ff c0		 inc	 eax
  00057	eb 2f		 jmp	 SHORT $LN5@get_len_of
  00059	eb 2d		 jmp	 SHORT $LN3@get_len_of
$LN4@get_len_of:

; 1090 :     else if (step < 0 && lo > hi)

  0005b	83 7c 24 40 00	 cmp	 DWORD PTR step$[rsp], 0
  00060	7d 24		 jge	 SHORT $LN2@get_len_of
  00062	8b 44 24 38	 mov	 eax, DWORD PTR hi$[rsp]
  00066	39 44 24 30	 cmp	 DWORD PTR lo$[rsp], eax
  0006a	7e 1a		 jle	 SHORT $LN2@get_len_of

; 1091 :         return 1UL + (lo - 1UL - hi) / (0UL - step);

  0006c	8b 44 24 30	 mov	 eax, DWORD PTR lo$[rsp]
  00070	ff c8		 dec	 eax
  00072	2b 44 24 38	 sub	 eax, DWORD PTR hi$[rsp]
  00076	33 c9		 xor	 ecx, ecx
  00078	2b 4c 24 40	 sub	 ecx, DWORD PTR step$[rsp]
  0007c	33 d2		 xor	 edx, edx
  0007e	f7 f1		 div	 ecx
  00080	ff c0		 inc	 eax
  00082	eb 04		 jmp	 SHORT $LN5@get_len_of

; 1092 :     else

  00084	eb 02		 jmp	 SHORT $LN1@get_len_of
$LN2@get_len_of:

; 1093 :         return 0UL;

  00086	33 c0		 xor	 eax, eax
$LN1@get_len_of:
$LN3@get_len_of:
$LN5@get_len_of:

; 1094 : }

  00088	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0008c	c3		 ret	 0
get_len_of_range ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$longrangeiter_len DD imagerel longrangeiter_len
	DD	imagerel longrangeiter_len+42
	DD	imagerel $unwind$longrangeiter_len
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$longrangeiter_len DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT longrangeiter_len
_TEXT	SEGMENT
r$ = 48
no_args$ = 56
longrangeiter_len PROC					; COMDAT

; 1145 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1146 :     return PyNumber_Subtract(r->len, r->index);

  0000e	48 8b 44 24 30	 mov	 rax, QWORD PTR r$[rsp]
  00013	48 8b 50 60	 mov	 rdx, QWORD PTR [rax+96]
  00017	48 8b 44 24 30	 mov	 rax, QWORD PTR r$[rsp]
  0001c	48 8b 48 78	 mov	 rcx, QWORD PTR [rax+120]
  00020	e8 00 00 00 00	 call	 PyNumber_Subtract

; 1147 : }

  00025	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00029	c3		 ret	 0
longrangeiter_len ENDP
_TEXT	ENDS
PUBLIC	??_C@_05LBGIFACO@N?$CIN?$CJO?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$longrangeiter_reduce DD imagerel longrangeiter_reduce
	DD	imagerel longrangeiter_reduce+274
	DD	imagerel $unwind$longrangeiter_reduce
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$longrangeiter_reduce DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_05LBGIFACO@N?$CIN?$CJO?$AA@
CONST	SEGMENT
??_C@_05LBGIFACO@N?$CIN?$CJO?$AA@ DB 'N(N)O', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT longrangeiter_reduce
_TEXT	SEGMENT
stop$ = 32
product$ = 40
range$ = 48
r$ = 80
longrangeiter_reduce PROC				; COMDAT

; 1151 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1152 :     PyObject *product, *stop=NULL;

  00009	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR stop$[rsp], 0

; 1153 :     PyObject *range;
; 1154 : 
; 1155 :     /* create a range object for pickling.  Must calculate the "stop" value */
; 1156 :     product = PyNumber_Multiply(r->len, r->step);

  00012	48 8b 44 24 50	 mov	 rax, QWORD PTR r$[rsp]
  00017	48 8b 50 70	 mov	 rdx, QWORD PTR [rax+112]
  0001b	48 8b 44 24 50	 mov	 rax, QWORD PTR r$[rsp]
  00020	48 8b 48 78	 mov	 rcx, QWORD PTR [rax+120]
  00024	e8 00 00 00 00	 call	 PyNumber_Multiply
  00029	48 89 44 24 28	 mov	 QWORD PTR product$[rsp], rax

; 1157 :     if (product == NULL)

  0002e	48 83 7c 24 28
	00		 cmp	 QWORD PTR product$[rsp], 0
  00034	75 07		 jne	 SHORT $LN3@longrangei

; 1158 :         return NULL;

  00036	33 c0		 xor	 eax, eax
  00038	e9 d0 00 00 00	 jmp	 $LN4@longrangei
$LN3@longrangei:

; 1159 :     stop = PyNumber_Add(r->start, product);

  0003d	48 8b 54 24 28	 mov	 rdx, QWORD PTR product$[rsp]
  00042	48 8b 44 24 50	 mov	 rax, QWORD PTR r$[rsp]
  00047	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  0004b	e8 00 00 00 00	 call	 PyNumber_Add
  00050	48 89 44 24 20	 mov	 QWORD PTR stop$[rsp], rax

; 1160 :     Py_DECREF(product);

  00055	48 8b 4c 24 28	 mov	 rcx, QWORD PTR product$[rsp]
  0005a	e8 00 00 00 00	 call	 _Py_DecRef

; 1161 :     if (stop ==  NULL)

  0005f	48 83 7c 24 20
	00		 cmp	 QWORD PTR stop$[rsp], 0
  00065	75 07		 jne	 SHORT $LN2@longrangei

; 1162 :         return NULL;

  00067	33 c0		 xor	 eax, eax
  00069	e9 9f 00 00 00	 jmp	 $LN4@longrangei
$LN2@longrangei:

; 1163 :     Py_INCREF(r->start);

  0006e	48 8b 44 24 50	 mov	 rax, QWORD PTR r$[rsp]
  00073	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  00077	e8 00 00 00 00	 call	 _Py_IncRef

; 1164 :     Py_INCREF(r->step);

  0007c	48 8b 44 24 50	 mov	 rax, QWORD PTR r$[rsp]
  00081	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  00085	e8 00 00 00 00	 call	 _Py_IncRef

; 1165 :     range =  (PyObject*)make_range_object(&PyRange_Type,
; 1166 :                                r->start, stop, r->step);

  0008a	48 8b 44 24 50	 mov	 rax, QWORD PTR r$[rsp]
  0008f	4c 8b 48 70	 mov	 r9, QWORD PTR [rax+112]
  00093	4c 8b 44 24 20	 mov	 r8, QWORD PTR stop$[rsp]
  00098	48 8b 44 24 50	 mov	 rax, QWORD PTR r$[rsp]
  0009d	48 8b 50 68	 mov	 rdx, QWORD PTR [rax+104]
  000a1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyRange_Type
  000a8	e8 00 00 00 00	 call	 make_range_object
  000ad	48 89 44 24 30	 mov	 QWORD PTR range$[rsp], rax

; 1167 :     if (range == NULL) {

  000b2	48 83 7c 24 30
	00		 cmp	 QWORD PTR range$[rsp], 0
  000b8	75 2a		 jne	 SHORT $LN1@longrangei

; 1168 :         Py_DECREF(r->start);

  000ba	48 8b 44 24 50	 mov	 rax, QWORD PTR r$[rsp]
  000bf	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  000c3	e8 00 00 00 00	 call	 _Py_DecRef

; 1169 :         Py_DECREF(stop);

  000c8	48 8b 4c 24 20	 mov	 rcx, QWORD PTR stop$[rsp]
  000cd	e8 00 00 00 00	 call	 _Py_DecRef

; 1170 :         Py_DECREF(r->step);

  000d2	48 8b 44 24 50	 mov	 rax, QWORD PTR r$[rsp]
  000d7	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  000db	e8 00 00 00 00	 call	 _Py_DecRef

; 1171 :         return NULL;

  000e0	33 c0		 xor	 eax, eax
  000e2	eb 29		 jmp	 SHORT $LN4@longrangei
$LN1@longrangei:

; 1172 :     }
; 1173 : 
; 1174 :     /* return the result */
; 1175 :     return Py_BuildValue("N(N)O", _PyObject_GetBuiltin("iter"), range, r->index);

  000e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04BKLHDIKK@iter?$AA@
  000eb	e8 00 00 00 00	 call	 _PyObject_GetBuiltin
  000f0	48 8b 4c 24 50	 mov	 rcx, QWORD PTR r$[rsp]
  000f5	4c 8b 49 60	 mov	 r9, QWORD PTR [rcx+96]
  000f9	4c 8b 44 24 30	 mov	 r8, QWORD PTR range$[rsp]
  000fe	48 8b d0	 mov	 rdx, rax
  00101	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05LBGIFACO@N?$CIN?$CJO?$AA@
  00108	e8 00 00 00 00	 call	 Py_BuildValue
$LN4@longrangei:

; 1176 : }

  0010d	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00111	c3		 ret	 0
longrangeiter_reduce ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BH@OPDDFHIK@longrangeiter_setstate?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$longrangeiter_setstate DD imagerel longrangeiter_setstate
	DD	imagerel longrangeiter_setstate+167
	DD	imagerel $unwind$longrangeiter_setstate
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$longrangeiter_setstate DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_0BH@OPDDFHIK@longrangeiter_setstate?$AA@
CONST	SEGMENT
??_C@_0BH@OPDDFHIK@longrangeiter_setstate?$AA@ DB 'longrangeiter_setstate'
	DB	00H						; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT longrangeiter_setstate
_TEXT	SEGMENT
_py_tmp$21372 = 48
r$ = 80
state$ = 88
longrangeiter_setstate PROC				; COMDAT

; 1180 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H
$LN4@longrangei@2:

; 1181 :     Py_CLEAR(r->index);

  0000e	48 8b 44 24 50	 mov	 rax, QWORD PTR r$[rsp]
  00013	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00018	74 53		 je	 SHORT $LN1@longrangei@2
  0001a	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00022	48 8b 44 24 50	 mov	 rax, QWORD PTR r$[rsp]
  00027	4c 8b 48 60	 mov	 r9, QWORD PTR [rax+96]
  0002b	41 b8 9d 04 00
	00		 mov	 r8d, 1181		; 0000049dH
  00031	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BJ@JFGJIEKG@?4?4?2Objects?2rangeobject?4c?$AA@
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BH@OPDDFHIK@longrangeiter_setstate?$AA@
  0003f	e8 00 00 00 00	 call	 _PyParallel_Guard
  00044	85 c0		 test	 eax, eax
  00046	75 25		 jne	 SHORT $LN1@longrangei@2
  00048	48 8b 44 24 50	 mov	 rax, QWORD PTR r$[rsp]
  0004d	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00051	48 89 44 24 30	 mov	 QWORD PTR _py_tmp$21372[rsp], rax
  00056	48 8b 44 24 50	 mov	 rax, QWORD PTR r$[rsp]
  0005b	48 c7 40 60 00
	00 00 00	 mov	 QWORD PTR [rax+96], 0
  00063	48 8b 4c 24 30	 mov	 rcx, QWORD PTR _py_tmp$21372[rsp]
  00068	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@longrangei@2:
  0006d	33 c0		 xor	 eax, eax
  0006f	85 c0		 test	 eax, eax
  00071	75 9b		 jne	 SHORT $LN4@longrangei@2

; 1182 :     r->index = state;

  00073	48 8b 44 24 50	 mov	 rax, QWORD PTR r$[rsp]
  00078	48 8b 4c 24 58	 mov	 rcx, QWORD PTR state$[rsp]
  0007d	48 89 48 60	 mov	 QWORD PTR [rax+96], rcx

; 1183 :     Py_INCREF(r->index);

  00081	48 8b 44 24 50	 mov	 rax, QWORD PTR r$[rsp]
  00086	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  0008a	e8 00 00 00 00	 call	 _Py_IncRef

; 1184 :     Py_RETURN_NONE;

  0008f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00096	e8 00 00 00 00	 call	 _Py_IncRef
  0009b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct

; 1185 : }

  000a2	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000a6	c3		 ret	 0
longrangeiter_setstate ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$longrangeiter_dealloc DD imagerel longrangeiter_dealloc
	DD	imagerel longrangeiter_dealloc+152
	DD	imagerel $unwind$longrangeiter_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$longrangeiter_dealloc DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT longrangeiter_dealloc
_TEXT	SEGMENT
r$ = 48
longrangeiter_dealloc PROC				; COMDAT

; 1199 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
$LN16@longrangei@3:

; 1200 :     Py_XDECREF(r->index);

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR r$[rsp]
  0000e	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00013	74 0e		 je	 SHORT $LN13@longrangei@3
  00015	48 8b 44 24 30	 mov	 rax, QWORD PTR r$[rsp]
  0001a	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  0001e	e8 00 00 00 00	 call	 _Py_DecRef
$LN13@longrangei@3:
  00023	33 c0		 xor	 eax, eax
  00025	85 c0		 test	 eax, eax
  00027	75 e0		 jne	 SHORT $LN16@longrangei@3
$LN12@longrangei@3:

; 1201 :     Py_XDECREF(r->start);

  00029	48 8b 44 24 30	 mov	 rax, QWORD PTR r$[rsp]
  0002e	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  00033	74 0e		 je	 SHORT $LN9@longrangei@3
  00035	48 8b 44 24 30	 mov	 rax, QWORD PTR r$[rsp]
  0003a	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  0003e	e8 00 00 00 00	 call	 _Py_DecRef
$LN9@longrangei@3:
  00043	33 c0		 xor	 eax, eax
  00045	85 c0		 test	 eax, eax
  00047	75 e0		 jne	 SHORT $LN12@longrangei@3
$LN8@longrangei@3:

; 1202 :     Py_XDECREF(r->step);

  00049	48 8b 44 24 30	 mov	 rax, QWORD PTR r$[rsp]
  0004e	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  00053	74 0e		 je	 SHORT $LN5@longrangei@3
  00055	48 8b 44 24 30	 mov	 rax, QWORD PTR r$[rsp]
  0005a	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  0005e	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@longrangei@3:
  00063	33 c0		 xor	 eax, eax
  00065	85 c0		 test	 eax, eax
  00067	75 e0		 jne	 SHORT $LN8@longrangei@3
$LN4@longrangei@3:

; 1203 :     Py_XDECREF(r->len);

  00069	48 8b 44 24 30	 mov	 rax, QWORD PTR r$[rsp]
  0006e	48 83 78 78 00	 cmp	 QWORD PTR [rax+120], 0
  00073	74 0e		 je	 SHORT $LN1@longrangei@3
  00075	48 8b 44 24 30	 mov	 rax, QWORD PTR r$[rsp]
  0007a	48 8b 48 78	 mov	 rcx, QWORD PTR [rax+120]
  0007e	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@longrangei@3:
  00083	33 c0		 xor	 eax, eax
  00085	85 c0		 test	 eax, eax
  00087	75 e0		 jne	 SHORT $LN4@longrangei@3

; 1204 :     PyObject_Del(r);

  00089	48 8b 4c 24 30	 mov	 rcx, QWORD PTR r$[rsp]
  0008e	e8 00 00 00 00	 call	 _PyObject_DebugFree

; 1205 : }

  00093	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00097	c3		 ret	 0
longrangeiter_dealloc ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$longrangeiter_next DD imagerel longrangeiter_next
	DD	imagerel longrangeiter_next+268
	DD	imagerel $unwind$longrangeiter_next
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$longrangeiter_next DD 010901H
	DD	08209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT longrangeiter_next
_TEXT	SEGMENT
new_index$ = 32
product$ = 40
one$ = 48
result$ = 56
r$ = 80
longrangeiter_next PROC					; COMDAT

; 1209 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1210 :     PyObject *one, *product, *new_index, *result;
; 1211 :     if (PyObject_RichCompareBool(r->index, r->len, Py_LT) != 1)

  00009	45 33 c0	 xor	 r8d, r8d
  0000c	48 8b 44 24 50	 mov	 rax, QWORD PTR r$[rsp]
  00011	48 8b 50 78	 mov	 rdx, QWORD PTR [rax+120]
  00015	48 8b 44 24 50	 mov	 rax, QWORD PTR r$[rsp]
  0001a	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  0001e	e8 00 00 00 00	 call	 PyObject_RichCompareBool
  00023	83 f8 01	 cmp	 eax, 1
  00026	74 07		 je	 SHORT $LN6@longrangei@4

; 1212 :         return NULL;

  00028	33 c0		 xor	 eax, eax
  0002a	e9 d8 00 00 00	 jmp	 $LN7@longrangei@4
$LN6@longrangei@4:

; 1213 : 
; 1214 :     one = PyLong_FromLong(1);

  0002f	b9 01 00 00 00	 mov	 ecx, 1
  00034	e8 00 00 00 00	 call	 PyLong_FromLong
  00039	48 89 44 24 30	 mov	 QWORD PTR one$[rsp], rax

; 1215 :     if (!one)

  0003e	48 83 7c 24 30
	00		 cmp	 QWORD PTR one$[rsp], 0
  00044	75 07		 jne	 SHORT $LN5@longrangei@4

; 1216 :         return NULL;

  00046	33 c0		 xor	 eax, eax
  00048	e9 ba 00 00 00	 jmp	 $LN7@longrangei@4
$LN5@longrangei@4:

; 1217 : 
; 1218 :     new_index = PyNumber_Add(r->index, one);

  0004d	48 8b 54 24 30	 mov	 rdx, QWORD PTR one$[rsp]
  00052	48 8b 44 24 50	 mov	 rax, QWORD PTR r$[rsp]
  00057	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  0005b	e8 00 00 00 00	 call	 PyNumber_Add
  00060	48 89 44 24 20	 mov	 QWORD PTR new_index$[rsp], rax

; 1219 :     Py_DECREF(one);

  00065	48 8b 4c 24 30	 mov	 rcx, QWORD PTR one$[rsp]
  0006a	e8 00 00 00 00	 call	 _Py_DecRef

; 1220 :     if (!new_index)

  0006f	48 83 7c 24 20
	00		 cmp	 QWORD PTR new_index$[rsp], 0
  00075	75 07		 jne	 SHORT $LN4@longrangei@4

; 1221 :         return NULL;

  00077	33 c0		 xor	 eax, eax
  00079	e9 89 00 00 00	 jmp	 $LN7@longrangei@4
$LN4@longrangei@4:

; 1222 : 
; 1223 :     product = PyNumber_Multiply(r->index, r->step);

  0007e	48 8b 44 24 50	 mov	 rax, QWORD PTR r$[rsp]
  00083	48 8b 50 70	 mov	 rdx, QWORD PTR [rax+112]
  00087	48 8b 44 24 50	 mov	 rax, QWORD PTR r$[rsp]
  0008c	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00090	e8 00 00 00 00	 call	 PyNumber_Multiply
  00095	48 89 44 24 28	 mov	 QWORD PTR product$[rsp], rax

; 1224 :     if (!product) {

  0009a	48 83 7c 24 28
	00		 cmp	 QWORD PTR product$[rsp], 0
  000a0	75 0e		 jne	 SHORT $LN3@longrangei@4

; 1225 :         Py_DECREF(new_index);

  000a2	48 8b 4c 24 20	 mov	 rcx, QWORD PTR new_index$[rsp]
  000a7	e8 00 00 00 00	 call	 _Py_DecRef

; 1226 :         return NULL;

  000ac	33 c0		 xor	 eax, eax
  000ae	eb 57		 jmp	 SHORT $LN7@longrangei@4
$LN3@longrangei@4:

; 1227 :     }
; 1228 : 
; 1229 :     result = PyNumber_Add(r->start, product);

  000b0	48 8b 54 24 28	 mov	 rdx, QWORD PTR product$[rsp]
  000b5	48 8b 44 24 50	 mov	 rax, QWORD PTR r$[rsp]
  000ba	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  000be	e8 00 00 00 00	 call	 PyNumber_Add
  000c3	48 89 44 24 38	 mov	 QWORD PTR result$[rsp], rax

; 1230 :     Py_DECREF(product);

  000c8	48 8b 4c 24 28	 mov	 rcx, QWORD PTR product$[rsp]
  000cd	e8 00 00 00 00	 call	 _Py_DecRef

; 1231 :     if (result) {

  000d2	48 83 7c 24 38
	00		 cmp	 QWORD PTR result$[rsp], 0
  000d8	74 1e		 je	 SHORT $LN2@longrangei@4

; 1232 :         Py_DECREF(r->index);

  000da	48 8b 44 24 50	 mov	 rax, QWORD PTR r$[rsp]
  000df	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  000e3	e8 00 00 00 00	 call	 _Py_DecRef

; 1233 :         r->index = new_index;

  000e8	48 8b 44 24 50	 mov	 rax, QWORD PTR r$[rsp]
  000ed	48 8b 4c 24 20	 mov	 rcx, QWORD PTR new_index$[rsp]
  000f2	48 89 48 60	 mov	 QWORD PTR [rax+96], rcx

; 1234 :     }
; 1235 :     else {

  000f6	eb 0a		 jmp	 SHORT $LN1@longrangei@4
$LN2@longrangei@4:

; 1236 :         Py_DECREF(new_index);

  000f8	48 8b 4c 24 20	 mov	 rcx, QWORD PTR new_index$[rsp]
  000fd	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@longrangei@4:

; 1237 :     }
; 1238 : 
; 1239 :     return result;

  00102	48 8b 44 24 38	 mov	 rax, QWORD PTR result$[rsp]
$LN7@longrangei@4:

; 1240 : }

  00107	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0010b	c3		 ret	 0
longrangeiter_next ENDP
_TEXT	ENDS
PUBLIC	??_C@_1CG@DPHGIFMM@?$AAP?$AAy?$AAR?$AAa?$AAn?$AAg?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAe?$AAq?$AA?$CJ?$AA?$AA@ ; `string'
EXTRN	PyErr_ExceptionMatches:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$range_iter DD imagerel range_iter
	DD	imagerel range_iter+478
	DD	imagerel $unwind$range_iter
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$range_iter DD 010901H
	DD	0a209H
xdata	ENDS
;	COMDAT ??_C@_1CG@DPHGIFMM@?$AAP?$AAy?$AAR?$AAa?$AAn?$AAg?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAe?$AAq?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CG@DPHGIFMM@?$AAP?$AAy?$AAR?$AAa?$AAn?$AAg?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAe?$AAq?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'R', 00H, 'a', 00H, 'n', 00H, 'g', 00H, 'e', 00H
	DB	'_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, '('
	DB	00H, 's', 00H, 'e', 00H, 'q', 00H, ')', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT range_iter
_TEXT	SEGMENT
int_it$ = 32
lstart$ = 40
it$ = 48
lstop$ = 56
lstep$ = 60
r$ = 64
tv134 = 72
seq$ = 96
range_iter PROC						; COMDAT

; 1277 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 1278 :     rangeobject *r = (rangeobject *)seq;

  00009	48 8b 44 24 60	 mov	 rax, QWORD PTR seq$[rsp]
  0000e	48 89 44 24 40	 mov	 QWORD PTR r$[rsp], rax

; 1279 :     longrangeiterobject *it;
; 1280 :     long lstart, lstop, lstep;
; 1281 :     PyObject *int_it;
; 1282 : 
; 1283 :     assert(PyRange_Check(seq));

  00013	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyRange_Type
  0001a	48 8b 4c 24 60	 mov	 rcx, QWORD PTR seq$[rsp]
  0001f	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00023	74 1c		 je	 SHORT $LN9@range_iter
  00025	41 b8 03 05 00
	00		 mov	 r8d, 1283		; 00000503H
  0002b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DC@CCLFFDLE@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAr?$AAa?$AAn?$AAg?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00032	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@DPHGIFMM@?$AAP?$AAy?$AAR?$AAa?$AAn?$AAg?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAe?$AAq?$AA?$CJ?$AA?$AA@
  00039	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0003f	33 c0		 xor	 eax, eax
$LN9@range_iter:

; 1284 : 
; 1285 :     /* If all three fields and the length convert to long, use the int
; 1286 :      * version */
; 1287 :     lstart = PyLong_AsLong(r->start);

  00041	48 8b 44 24 40	 mov	 rax, QWORD PTR r$[rsp]
  00046	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  0004a	e8 00 00 00 00	 call	 PyLong_AsLong
  0004f	89 44 24 28	 mov	 DWORD PTR lstart$[rsp], eax

; 1288 :     if (lstart == -1 && PyErr_Occurred()) {

  00053	83 7c 24 28 ff	 cmp	 DWORD PTR lstart$[rsp], -1
  00058	75 14		 jne	 SHORT $LN6@range_iter
  0005a	e8 00 00 00 00	 call	 PyErr_Occurred
  0005f	48 85 c0	 test	 rax, rax
  00062	74 0a		 je	 SHORT $LN6@range_iter

; 1289 :         PyErr_Clear();

  00064	e8 00 00 00 00	 call	 PyErr_Clear

; 1290 :         goto long_range;

  00069	e9 94 00 00 00	 jmp	 $long_range$21461
$LN6@range_iter:

; 1291 :     }
; 1292 :     lstop = PyLong_AsLong(r->stop);

  0006e	48 8b 44 24 40	 mov	 rax, QWORD PTR r$[rsp]
  00073	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  00077	e8 00 00 00 00	 call	 PyLong_AsLong
  0007c	89 44 24 38	 mov	 DWORD PTR lstop$[rsp], eax

; 1293 :     if (lstop == -1 && PyErr_Occurred()) {

  00080	83 7c 24 38 ff	 cmp	 DWORD PTR lstop$[rsp], -1
  00085	75 11		 jne	 SHORT $LN5@range_iter
  00087	e8 00 00 00 00	 call	 PyErr_Occurred
  0008c	48 85 c0	 test	 rax, rax
  0008f	74 07		 je	 SHORT $LN5@range_iter

; 1294 :         PyErr_Clear();

  00091	e8 00 00 00 00	 call	 PyErr_Clear

; 1295 :         goto long_range;

  00096	eb 6a		 jmp	 SHORT $long_range$21461
$LN5@range_iter:

; 1296 :     }
; 1297 :     lstep = PyLong_AsLong(r->step);

  00098	48 8b 44 24 40	 mov	 rax, QWORD PTR r$[rsp]
  0009d	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  000a1	e8 00 00 00 00	 call	 PyLong_AsLong
  000a6	89 44 24 3c	 mov	 DWORD PTR lstep$[rsp], eax

; 1298 :     if (lstep == -1 && PyErr_Occurred()) {

  000aa	83 7c 24 3c ff	 cmp	 DWORD PTR lstep$[rsp], -1
  000af	75 11		 jne	 SHORT $LN4@range_iter
  000b1	e8 00 00 00 00	 call	 PyErr_Occurred
  000b6	48 85 c0	 test	 rax, rax
  000b9	74 07		 je	 SHORT $LN4@range_iter

; 1299 :         PyErr_Clear();

  000bb	e8 00 00 00 00	 call	 PyErr_Clear

; 1300 :         goto long_range;

  000c0	eb 40		 jmp	 SHORT $long_range$21461
$LN4@range_iter:

; 1301 :     }
; 1302 :     int_it = fast_range_iter(lstart, lstop, lstep);

  000c2	44 8b 44 24 3c	 mov	 r8d, DWORD PTR lstep$[rsp]
  000c7	8b 54 24 38	 mov	 edx, DWORD PTR lstop$[rsp]
  000cb	8b 4c 24 28	 mov	 ecx, DWORD PTR lstart$[rsp]
  000cf	e8 00 00 00 00	 call	 fast_range_iter
  000d4	48 89 44 24 20	 mov	 QWORD PTR int_it$[rsp], rax

; 1303 :     if (int_it == NULL && PyErr_ExceptionMatches(PyExc_OverflowError)) {

  000d9	48 83 7c 24 20
	00		 cmp	 QWORD PTR int_it$[rsp], 0
  000df	75 17		 jne	 SHORT $LN3@range_iter
  000e1	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_OverflowError
  000e8	e8 00 00 00 00	 call	 PyErr_ExceptionMatches
  000ed	85 c0		 test	 eax, eax
  000ef	74 07		 je	 SHORT $LN3@range_iter

; 1304 :         PyErr_Clear();

  000f1	e8 00 00 00 00	 call	 PyErr_Clear

; 1305 :         goto long_range;

  000f6	eb 0a		 jmp	 SHORT $long_range$21461
$LN3@range_iter:

; 1306 :     }
; 1307 :     return (PyObject *)int_it;

  000f8	48 8b 44 24 20	 mov	 rax, QWORD PTR int_it$[rsp]
  000fd	e9 d7 00 00 00	 jmp	 $LN7@range_iter
$long_range$21461:

; 1308 : 
; 1309 :   long_range:
; 1310 :     it = PyObject_New(longrangeiterobject, &PyLongRangeIter_Type);

  00102	e8 00 00 00 00	 call	 _Py_PXCTX
  00107	85 c0		 test	 eax, eax
  00109	74 13		 je	 SHORT $LN10@range_iter
  0010b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyLongRangeIter_Type
  00112	e8 00 00 00 00	 call	 _PxObject_New
  00117	48 89 44 24 48	 mov	 QWORD PTR tv134[rsp], rax
  0011c	eb 11		 jmp	 SHORT $LN11@range_iter
$LN10@range_iter:
  0011e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyLongRangeIter_Type
  00125	e8 00 00 00 00	 call	 _PyObject_New
  0012a	48 89 44 24 48	 mov	 QWORD PTR tv134[rsp], rax
$LN11@range_iter:
  0012f	48 8b 44 24 48	 mov	 rax, QWORD PTR tv134[rsp]
  00134	48 89 44 24 30	 mov	 QWORD PTR it$[rsp], rax

; 1311 :     if (it == NULL)

  00139	48 83 7c 24 30
	00		 cmp	 QWORD PTR it$[rsp], 0
  0013f	75 07		 jne	 SHORT $LN2@range_iter

; 1312 :         return NULL;

  00141	33 c0		 xor	 eax, eax
  00143	e9 91 00 00 00	 jmp	 $LN7@range_iter
$LN2@range_iter:

; 1313 : 
; 1314 :     /* Do all initialization here, so we can DECREF on failure. */
; 1315 :     it->start = r->start;

  00148	48 8b 44 24 30	 mov	 rax, QWORD PTR it$[rsp]
  0014d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR r$[rsp]
  00152	48 8b 49 60	 mov	 rcx, QWORD PTR [rcx+96]
  00156	48 89 48 68	 mov	 QWORD PTR [rax+104], rcx

; 1316 :     it->step = r->step;

  0015a	48 8b 44 24 30	 mov	 rax, QWORD PTR it$[rsp]
  0015f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR r$[rsp]
  00164	48 8b 49 70	 mov	 rcx, QWORD PTR [rcx+112]
  00168	48 89 48 70	 mov	 QWORD PTR [rax+112], rcx

; 1317 :     it->len = r->length;

  0016c	48 8b 44 24 30	 mov	 rax, QWORD PTR it$[rsp]
  00171	48 8b 4c 24 40	 mov	 rcx, QWORD PTR r$[rsp]
  00176	48 8b 49 78	 mov	 rcx, QWORD PTR [rcx+120]
  0017a	48 89 48 78	 mov	 QWORD PTR [rax+120], rcx

; 1318 :     Py_INCREF(it->start);

  0017e	48 8b 44 24 30	 mov	 rax, QWORD PTR it$[rsp]
  00183	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  00187	e8 00 00 00 00	 call	 _Py_IncRef

; 1319 :     Py_INCREF(it->step);

  0018c	48 8b 44 24 30	 mov	 rax, QWORD PTR it$[rsp]
  00191	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  00195	e8 00 00 00 00	 call	 _Py_IncRef

; 1320 :     Py_INCREF(it->len);

  0019a	48 8b 44 24 30	 mov	 rax, QWORD PTR it$[rsp]
  0019f	48 8b 48 78	 mov	 rcx, QWORD PTR [rax+120]
  001a3	e8 00 00 00 00	 call	 _Py_IncRef

; 1321 : 
; 1322 :     it->index = PyLong_FromLong(0);

  001a8	33 c9		 xor	 ecx, ecx
  001aa	e8 00 00 00 00	 call	 PyLong_FromLong
  001af	48 8b 4c 24 30	 mov	 rcx, QWORD PTR it$[rsp]
  001b4	48 89 41 60	 mov	 QWORD PTR [rcx+96], rax

; 1323 :     if (!it->index)

  001b8	48 8b 44 24 30	 mov	 rax, QWORD PTR it$[rsp]
  001bd	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  001c2	75 02		 jne	 SHORT $LN1@range_iter

; 1324 :         goto create_failure;

  001c4	eb 07		 jmp	 SHORT $create_failure$21476
$LN1@range_iter:

; 1325 : 
; 1326 :     return (PyObject *)it;

  001c6	48 8b 44 24 30	 mov	 rax, QWORD PTR it$[rsp]
  001cb	eb 0c		 jmp	 SHORT $LN7@range_iter
$create_failure$21476:

; 1327 : 
; 1328 : create_failure:
; 1329 :     Py_DECREF(it);

  001cd	48 8b 4c 24 30	 mov	 rcx, QWORD PTR it$[rsp]
  001d2	e8 00 00 00 00	 call	 _Py_DecRef

; 1330 :     return NULL;

  001d7	33 c0		 xor	 eax, eax
$LN7@range_iter:

; 1331 : }

  001d9	48 83 c4 58	 add	 rsp, 88			; 00000058H
  001dd	c3		 ret	 0
range_iter ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$range_reverse DD imagerel range_reverse
	DD	imagerel range_reverse+749
	DD	imagerel $unwind$range_reverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$range_reverse DD 020c01H
	DD	011010cH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT range_reverse
_TEXT	SEGMENT
lstart$ = 32
it$ = 40
ulen$ = 48
lstop$ = 52
lstep$ = 56
product$ = 64
new_start$ = 72
sum$ = 80
range$ = 88
one$ = 96
new_stop$ = 104
diff$ = 112
tv146 = 120
seq$ = 144
range_reverse PROC					; COMDAT

; 1335 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 1336 :     rangeobject *range = (rangeobject*) seq;

  0000c	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR seq$[rsp]
  00014	48 89 44 24 58	 mov	 QWORD PTR range$[rsp], rax

; 1337 :     longrangeiterobject *it;
; 1338 :     PyObject *one, *sum, *diff, *product;
; 1339 :     long lstart, lstop, lstep, new_start, new_stop;
; 1340 :     unsigned long ulen;
; 1341 : 
; 1342 :     assert(PyRange_Check(seq));

  00019	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PyRange_Type
  00020	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR seq$[rsp]
  00028	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  0002c	74 1c		 je	 SHORT $LN19@range_reve
  0002e	41 b8 3e 05 00
	00		 mov	 r8d, 1342		; 0000053eH
  00034	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DC@CCLFFDLE@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAr?$AAa?$AAn?$AAg?$AAe?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  0003b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@DPHGIFMM@?$AAP?$AAy?$AAR?$AAa?$AAn?$AAg?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAs?$AAe?$AAq?$AA?$CJ?$AA?$AA@
  00042	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00048	33 c0		 xor	 eax, eax
$LN19@range_reve:

; 1343 : 
; 1344 :     /* reversed(range(start, stop, step)) can be expressed as
; 1345 :        range(start+(n-1)*step, start-step, -step), where n is the number of
; 1346 :        integers in the range.
; 1347 : 
; 1348 :        If each of start, stop, step, -step, start-step, and the length
; 1349 :        of the iterator is representable as a C long, use the int
; 1350 :        version.  This excludes some cases where the reversed range is
; 1351 :        representable as a range_iterator, but it's good enough for
; 1352 :        common cases and it makes the checks simple. */
; 1353 : 
; 1354 :     lstart = PyLong_AsLong(range->start);

  0004a	48 8b 44 24 58	 mov	 rax, QWORD PTR range$[rsp]
  0004f	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00053	e8 00 00 00 00	 call	 PyLong_AsLong
  00058	89 44 24 20	 mov	 DWORD PTR lstart$[rsp], eax

; 1355 :     if (lstart == -1 && PyErr_Occurred()) {

  0005c	83 7c 24 20 ff	 cmp	 DWORD PTR lstart$[rsp], -1
  00061	75 14		 jne	 SHORT $LN16@range_reve
  00063	e8 00 00 00 00	 call	 PyErr_Occurred
  00068	48 85 c0	 test	 rax, rax
  0006b	74 0a		 je	 SHORT $LN16@range_reve

; 1356 :         PyErr_Clear();

  0006d	e8 00 00 00 00	 call	 PyErr_Clear

; 1357 :         goto long_range;

  00072	e9 fa 00 00 00	 jmp	 $long_range$21499
$LN16@range_reve:

; 1358 :     }
; 1359 :     lstop = PyLong_AsLong(range->stop);

  00077	48 8b 44 24 58	 mov	 rax, QWORD PTR range$[rsp]
  0007c	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  00080	e8 00 00 00 00	 call	 PyLong_AsLong
  00085	89 44 24 34	 mov	 DWORD PTR lstop$[rsp], eax

; 1360 :     if (lstop == -1 && PyErr_Occurred()) {

  00089	83 7c 24 34 ff	 cmp	 DWORD PTR lstop$[rsp], -1
  0008e	75 14		 jne	 SHORT $LN15@range_reve
  00090	e8 00 00 00 00	 call	 PyErr_Occurred
  00095	48 85 c0	 test	 rax, rax
  00098	74 0a		 je	 SHORT $LN15@range_reve

; 1361 :         PyErr_Clear();

  0009a	e8 00 00 00 00	 call	 PyErr_Clear

; 1362 :         goto long_range;

  0009f	e9 cd 00 00 00	 jmp	 $long_range$21499
$LN15@range_reve:

; 1363 :     }
; 1364 :     lstep = PyLong_AsLong(range->step);

  000a4	48 8b 44 24 58	 mov	 rax, QWORD PTR range$[rsp]
  000a9	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  000ad	e8 00 00 00 00	 call	 PyLong_AsLong
  000b2	89 44 24 38	 mov	 DWORD PTR lstep$[rsp], eax

; 1365 :     if (lstep == -1 && PyErr_Occurred()) {

  000b6	83 7c 24 38 ff	 cmp	 DWORD PTR lstep$[rsp], -1
  000bb	75 14		 jne	 SHORT $LN14@range_reve
  000bd	e8 00 00 00 00	 call	 PyErr_Occurred
  000c2	48 85 c0	 test	 rax, rax
  000c5	74 0a		 je	 SHORT $LN14@range_reve

; 1366 :         PyErr_Clear();

  000c7	e8 00 00 00 00	 call	 PyErr_Clear

; 1367 :         goto long_range;

  000cc	e9 a0 00 00 00	 jmp	 $long_range$21499
$LN14@range_reve:

; 1368 :     }
; 1369 :     /* check for possible overflow of -lstep */
; 1370 :     if (lstep == LONG_MIN)

  000d1	81 7c 24 38 00
	00 00 80	 cmp	 DWORD PTR lstep$[rsp], -2147483648 ; ffffffff80000000H
  000d9	75 05		 jne	 SHORT $LN13@range_reve

; 1371 :         goto long_range;

  000db	e9 91 00 00 00	 jmp	 $long_range$21499
$LN13@range_reve:

; 1372 : 
; 1373 :     /* check for overflow of lstart - lstep:
; 1374 : 
; 1375 :        for lstep > 0, need only check whether lstart - lstep < LONG_MIN.
; 1376 :        for lstep < 0, need only check whether lstart - lstep > LONG_MAX
; 1377 : 
; 1378 :        Rearrange these inequalities as:
; 1379 : 
; 1380 :            lstart - LONG_MIN < lstep  (lstep > 0)
; 1381 :            LONG_MAX - lstart < -lstep  (lstep < 0)
; 1382 : 
; 1383 :        and compute both sides as unsigned longs, to avoid the
; 1384 :        possibility of undefined behaviour due to signed overflow. */
; 1385 : 
; 1386 :     if (lstep > 0) {

  000e0	83 7c 24 38 00	 cmp	 DWORD PTR lstep$[rsp], 0
  000e5	7e 13		 jle	 SHORT $LN12@range_reve

; 1387 :          if ((unsigned long)lstart - LONG_MIN < (unsigned long)lstep)

  000e7	8b 44 24 20	 mov	 eax, DWORD PTR lstart$[rsp]
  000eb	2d 00 00 00 80	 sub	 eax, -2147483648	; 80000000H
  000f0	3b 44 24 38	 cmp	 eax, DWORD PTR lstep$[rsp]
  000f4	73 02		 jae	 SHORT $LN11@range_reve

; 1388 :             goto long_range;

  000f6	eb 79		 jmp	 SHORT $long_range$21499
$LN11@range_reve:

; 1389 :     }
; 1390 :     else {

  000f8	eb 15		 jmp	 SHORT $LN10@range_reve
$LN12@range_reve:

; 1391 :         if (LONG_MAX - (unsigned long)lstart < 0UL - lstep)

  000fa	b8 ff ff ff 7f	 mov	 eax, 2147483647		; 7fffffffH
  000ff	2b 44 24 20	 sub	 eax, DWORD PTR lstart$[rsp]
  00103	33 c9		 xor	 ecx, ecx
  00105	2b 4c 24 38	 sub	 ecx, DWORD PTR lstep$[rsp]
  00109	3b c1		 cmp	 eax, ecx
  0010b	73 02		 jae	 SHORT $LN9@range_reve

; 1392 :             goto long_range;

  0010d	eb 62		 jmp	 SHORT $long_range$21499
$LN9@range_reve:
$LN10@range_reve:

; 1393 :     }
; 1394 : 
; 1395 :     ulen = get_len_of_range(lstart, lstop, lstep);

  0010f	44 8b 44 24 38	 mov	 r8d, DWORD PTR lstep$[rsp]
  00114	8b 54 24 34	 mov	 edx, DWORD PTR lstop$[rsp]
  00118	8b 4c 24 20	 mov	 ecx, DWORD PTR lstart$[rsp]
  0011c	e8 00 00 00 00	 call	 get_len_of_range
  00121	89 44 24 30	 mov	 DWORD PTR ulen$[rsp], eax

; 1396 :     if (ulen > (unsigned long)LONG_MAX)

  00125	81 7c 24 30 ff
	ff ff 7f	 cmp	 DWORD PTR ulen$[rsp], 2147483647 ; 7fffffffH
  0012d	76 02		 jbe	 SHORT $LN8@range_reve

; 1397 :         goto long_range;

  0012f	eb 40		 jmp	 SHORT $long_range$21499
$LN8@range_reve:

; 1398 : 
; 1399 :     new_stop = lstart - lstep;

  00131	8b 44 24 38	 mov	 eax, DWORD PTR lstep$[rsp]
  00135	8b 4c 24 20	 mov	 ecx, DWORD PTR lstart$[rsp]
  00139	2b c8		 sub	 ecx, eax
  0013b	8b c1		 mov	 eax, ecx
  0013d	89 44 24 68	 mov	 DWORD PTR new_stop$[rsp], eax

; 1400 :     new_start = (long)(new_stop + ulen * lstep);

  00141	8b 44 24 30	 mov	 eax, DWORD PTR ulen$[rsp]
  00145	0f af 44 24 38	 imul	 eax, DWORD PTR lstep$[rsp]
  0014a	8b 4c 24 68	 mov	 ecx, DWORD PTR new_stop$[rsp]
  0014e	03 c8		 add	 ecx, eax
  00150	8b c1		 mov	 eax, ecx
  00152	89 44 24 48	 mov	 DWORD PTR new_start$[rsp], eax

; 1401 :     return fast_range_iter(new_start, new_stop, -lstep);

  00156	8b 44 24 38	 mov	 eax, DWORD PTR lstep$[rsp]
  0015a	f7 d8		 neg	 eax
  0015c	44 8b c0	 mov	 r8d, eax
  0015f	8b 54 24 68	 mov	 edx, DWORD PTR new_stop$[rsp]
  00163	8b 4c 24 48	 mov	 ecx, DWORD PTR new_start$[rsp]
  00167	e8 00 00 00 00	 call	 fast_range_iter
  0016c	e9 74 01 00 00	 jmp	 $LN17@range_reve
$long_range$21499:

; 1402 : 
; 1403 : long_range:
; 1404 :     it = PyObject_New(longrangeiterobject, &PyLongRangeIter_Type);

  00171	e8 00 00 00 00	 call	 _Py_PXCTX
  00176	85 c0		 test	 eax, eax
  00178	74 13		 je	 SHORT $LN20@range_reve
  0017a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyLongRangeIter_Type
  00181	e8 00 00 00 00	 call	 _PxObject_New
  00186	48 89 44 24 78	 mov	 QWORD PTR tv146[rsp], rax
  0018b	eb 11		 jmp	 SHORT $LN21@range_reve
$LN20@range_reve:
  0018d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyLongRangeIter_Type
  00194	e8 00 00 00 00	 call	 _PyObject_New
  00199	48 89 44 24 78	 mov	 QWORD PTR tv146[rsp], rax
$LN21@range_reve:
  0019e	48 8b 44 24 78	 mov	 rax, QWORD PTR tv146[rsp]
  001a3	48 89 44 24 28	 mov	 QWORD PTR it$[rsp], rax

; 1405 :     if (it == NULL)

  001a8	48 83 7c 24 28
	00		 cmp	 QWORD PTR it$[rsp], 0
  001ae	75 07		 jne	 SHORT $LN7@range_reve

; 1406 :         return NULL;

  001b0	33 c0		 xor	 eax, eax
  001b2	e9 2e 01 00 00	 jmp	 $LN17@range_reve
$LN7@range_reve:

; 1407 : 
; 1408 :     /* start + (len - 1) * step */
; 1409 :     it->len = range->length;

  001b7	48 8b 44 24 28	 mov	 rax, QWORD PTR it$[rsp]
  001bc	48 8b 4c 24 58	 mov	 rcx, QWORD PTR range$[rsp]
  001c1	48 8b 49 78	 mov	 rcx, QWORD PTR [rcx+120]
  001c5	48 89 48 78	 mov	 QWORD PTR [rax+120], rcx

; 1410 :     Py_INCREF(it->len);

  001c9	48 8b 44 24 28	 mov	 rax, QWORD PTR it$[rsp]
  001ce	48 8b 48 78	 mov	 rcx, QWORD PTR [rax+120]
  001d2	e8 00 00 00 00	 call	 _Py_IncRef

; 1411 : 
; 1412 :     one = PyLong_FromLong(1);

  001d7	b9 01 00 00 00	 mov	 ecx, 1
  001dc	e8 00 00 00 00	 call	 PyLong_FromLong
  001e1	48 89 44 24 60	 mov	 QWORD PTR one$[rsp], rax

; 1413 :     if (!one)

  001e6	48 83 7c 24 60
	00		 cmp	 QWORD PTR one$[rsp], 0
  001ec	75 05		 jne	 SHORT $LN6@range_reve

; 1414 :         goto create_failure;

  001ee	e9 e6 00 00 00	 jmp	 $create_failure$21520
$LN6@range_reve:

; 1415 : 
; 1416 :     diff = PyNumber_Subtract(it->len, one);

  001f3	48 8b 54 24 60	 mov	 rdx, QWORD PTR one$[rsp]
  001f8	48 8b 44 24 28	 mov	 rax, QWORD PTR it$[rsp]
  001fd	48 8b 48 78	 mov	 rcx, QWORD PTR [rax+120]
  00201	e8 00 00 00 00	 call	 PyNumber_Subtract
  00206	48 89 44 24 70	 mov	 QWORD PTR diff$[rsp], rax

; 1417 :     Py_DECREF(one);

  0020b	48 8b 4c 24 60	 mov	 rcx, QWORD PTR one$[rsp]
  00210	e8 00 00 00 00	 call	 _Py_DecRef

; 1418 :     if (!diff)

  00215	48 83 7c 24 70
	00		 cmp	 QWORD PTR diff$[rsp], 0
  0021b	75 05		 jne	 SHORT $LN5@range_reve

; 1419 :         goto create_failure;

  0021d	e9 b7 00 00 00	 jmp	 $create_failure$21520
$LN5@range_reve:

; 1420 : 
; 1421 :     product = PyNumber_Multiply(diff, range->step);

  00222	48 8b 44 24 58	 mov	 rax, QWORD PTR range$[rsp]
  00227	48 8b 50 70	 mov	 rdx, QWORD PTR [rax+112]
  0022b	48 8b 4c 24 70	 mov	 rcx, QWORD PTR diff$[rsp]
  00230	e8 00 00 00 00	 call	 PyNumber_Multiply
  00235	48 89 44 24 40	 mov	 QWORD PTR product$[rsp], rax

; 1422 :     Py_DECREF(diff);

  0023a	48 8b 4c 24 70	 mov	 rcx, QWORD PTR diff$[rsp]
  0023f	e8 00 00 00 00	 call	 _Py_DecRef

; 1423 :     if (!product)

  00244	48 83 7c 24 40
	00		 cmp	 QWORD PTR product$[rsp], 0
  0024a	75 05		 jne	 SHORT $LN4@range_reve

; 1424 :         goto create_failure;

  0024c	e9 88 00 00 00	 jmp	 $create_failure$21520
$LN4@range_reve:

; 1425 : 
; 1426 :     sum = PyNumber_Add(range->start, product);

  00251	48 8b 54 24 40	 mov	 rdx, QWORD PTR product$[rsp]
  00256	48 8b 44 24 58	 mov	 rax, QWORD PTR range$[rsp]
  0025b	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  0025f	e8 00 00 00 00	 call	 PyNumber_Add
  00264	48 89 44 24 50	 mov	 QWORD PTR sum$[rsp], rax

; 1427 :     Py_DECREF(product);

  00269	48 8b 4c 24 40	 mov	 rcx, QWORD PTR product$[rsp]
  0026e	e8 00 00 00 00	 call	 _Py_DecRef

; 1428 :     it->start = sum;

  00273	48 8b 44 24 28	 mov	 rax, QWORD PTR it$[rsp]
  00278	48 8b 4c 24 50	 mov	 rcx, QWORD PTR sum$[rsp]
  0027d	48 89 48 68	 mov	 QWORD PTR [rax+104], rcx

; 1429 :     if (!it->start)

  00281	48 8b 44 24 28	 mov	 rax, QWORD PTR it$[rsp]
  00286	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  0028b	75 02		 jne	 SHORT $LN3@range_reve

; 1430 :         goto create_failure;

  0028d	eb 4a		 jmp	 SHORT $create_failure$21520
$LN3@range_reve:

; 1431 : 
; 1432 :     it->step = PyNumber_Negative(range->step);

  0028f	48 8b 44 24 58	 mov	 rax, QWORD PTR range$[rsp]
  00294	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  00298	e8 00 00 00 00	 call	 PyNumber_Negative
  0029d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR it$[rsp]
  002a2	48 89 41 70	 mov	 QWORD PTR [rcx+112], rax

; 1433 :     if (!it->step)

  002a6	48 8b 44 24 28	 mov	 rax, QWORD PTR it$[rsp]
  002ab	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  002b0	75 02		 jne	 SHORT $LN2@range_reve

; 1434 :         goto create_failure;

  002b2	eb 25		 jmp	 SHORT $create_failure$21520
$LN2@range_reve:

; 1435 : 
; 1436 :     it->index = PyLong_FromLong(0);

  002b4	33 c9		 xor	 ecx, ecx
  002b6	e8 00 00 00 00	 call	 PyLong_FromLong
  002bb	48 8b 4c 24 28	 mov	 rcx, QWORD PTR it$[rsp]
  002c0	48 89 41 60	 mov	 QWORD PTR [rcx+96], rax

; 1437 :     if (!it->index)

  002c4	48 8b 44 24 28	 mov	 rax, QWORD PTR it$[rsp]
  002c9	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  002ce	75 02		 jne	 SHORT $LN1@range_reve

; 1438 :         goto create_failure;

  002d0	eb 07		 jmp	 SHORT $create_failure$21520
$LN1@range_reve:

; 1439 : 
; 1440 :     return (PyObject *)it;

  002d2	48 8b 44 24 28	 mov	 rax, QWORD PTR it$[rsp]
  002d7	eb 0c		 jmp	 SHORT $LN17@range_reve
$create_failure$21520:

; 1441 : 
; 1442 : create_failure:
; 1443 :     Py_DECREF(it);

  002d9	48 8b 4c 24 28	 mov	 rcx, QWORD PTR it$[rsp]
  002de	e8 00 00 00 00	 call	 _Py_DecRef

; 1444 :     return NULL;

  002e3	33 c0		 xor	 eax, eax
$LN17@range_reve:

; 1445 : }

  002e5	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  002ec	c3		 ret	 0
range_reverse ENDP
_TEXT	ENDS
END
