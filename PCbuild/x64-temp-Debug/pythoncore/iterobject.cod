; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0BC@JKMIFFLL@callable_iterator?$AA@	; `string'
PUBLIC	??_C@_08EAMFHCBD@iterator?$AA@			; `string'
PUBLIC	??_C@_0N@MOOGCAMH@__setstate__?$AA@		; `string'
PUBLIC	??_C@_0L@NNMACJIG@__reduce__?$AA@		; `string'
PUBLIC	??_C@_0BA@BJLPBKGK@__length_hint__?$AA@		; `string'
PUBLIC	PySeqIter_Type
PUBLIC	PyCallIter_Type
EXTRN	PyObject_SelfIter:PROC
EXTRN	PyObject_GenericGetAttr:PROC
EXTRN	PyType_Type:BYTE
;	COMDAT ??_C@_0BC@JKMIFFLL@callable_iterator?$AA@
CONST	SEGMENT
??_C@_0BC@JKMIFFLL@callable_iterator?$AA@ DB 'callable_iterator', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08EAMFHCBD@iterator?$AA@
CONST	SEGMENT
??_C@_08EAMFHCBD@iterator?$AA@ DB 'iterator', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MOOGCAMH@__setstate__?$AA@
CONST	SEGMENT
??_C@_0N@MOOGCAMH@__setstate__?$AA@ DB '__setstate__', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NNMACJIG@__reduce__?$AA@
CONST	SEGMENT
??_C@_0L@NNMACJIG@__reduce__?$AA@ DB '__reduce__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@BJLPBKGK@__length_hint__?$AA@
CONST	SEGMENT
??_C@_0BA@BJLPBKGK@__length_hint__?$AA@ DB '__length_hint__', 00H ; `string'
CONST	ENDS
_DATA	SEGMENT
length_hint_doc DB 'Private method returning an estimate of len(list(it))'
	DB	'.', 00H
	ORG $+1
reduce_doc DB	'Return state information for pickling.', 00H
	ORG $+1
setstate_doc DB	'Set state information for unpickling.', 00H
	ORG $+10
seqiter_methods DQ FLAT:??_C@_0BA@BJLPBKGK@__length_hint__?$AA@
	DQ	FLAT:iter_len
	DD	04H
	ORG $+4
	DQ	FLAT:length_hint_doc
	DQ	FLAT:??_C@_0L@NNMACJIG@__reduce__?$AA@
	DQ	FLAT:iter_reduce
	DD	04H
	ORG $+4
	DQ	FLAT:reduce_doc
	DQ	FLAT:??_C@_0N@MOOGCAMH@__setstate__?$AA@
	DQ	FLAT:iter_setstate
	DD	08H
	ORG $+4
	DQ	FLAT:setstate_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
PySeqIter_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_08EAMFHCBD@iterator?$AA@
	DQ	0000000000000070H
	DQ	0000000000000000H
	DQ	FLAT:iter_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044000H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:iter_traverse
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_SelfIter
	DQ	FLAT:iter_iternext
	DQ	FLAT:seqiter_methods
	DQ	0000000000000000H
	ORG $+144
calliter_methods DQ FLAT:??_C@_0L@NNMACJIG@__reduce__?$AA@
	DQ	FLAT:calliter_reduce
	DD	04H
	ORG $+4
	DQ	FLAT:reduce_doc
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+16
PyCallIter_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0BC@JKMIFFLL@callable_iterator?$AA@
	DQ	0000000000000070H
	DQ	0000000000000000H
	DQ	FLAT:calliter_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	044000H
	ORG $+4
	DQ	0000000000000000H
	DQ	FLAT:calliter_traverse
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_SelfIter
	DQ	FLAT:calliter_iternext
	DQ	FLAT:calliter_methods
	ORG $+152
_DATA	ENDS
PUBLIC	??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@ ; `string'
PUBLIC	??_C@_0O@GNGGBDLJ@PySeqIter_New?$AA@		; `string'
PUBLIC	_Py_IncRef
PUBLIC	??_C@_0BI@INEGDJAC@?4?4?2Objects?2iterobject?4c?$AA@ ; `string'
PUBLIC	PySeqIter_New
EXTRN	_PyGC_generation0:QWORD
EXTRN	Py_FatalError:PROC
EXTRN	_PyParallel_Guard:PROC
EXTRN	_PyObject_GC_New:PROC
EXTRN	_PxObject_New:PROC
EXTRN	_Py_PXCTX:PROC
EXTRN	_PyErr_BadInternalCall:PROC
EXTRN	PySequence_Check:PROC
;	COMDAT pdata
; File c:\src\pyparallel\objects\iterobject.c
pdata	SEGMENT
$pdata$PySeqIter_New DD imagerel $LN14
	DD	imagerel $LN14+401
	DD	imagerel $unwind$PySeqIter_New
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PySeqIter_New DD 010901H
	DD	0a209H
xdata	ENDS
;	COMDAT ??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@
CONST	SEGMENT
??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@ DB 'GC object alread'
	DB	'y tracked', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@GNGGBDLJ@PySeqIter_New?$AA@
CONST	SEGMENT
??_C@_0O@GNGGBDLJ@PySeqIter_New?$AA@ DB 'PySeqIter_New', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@INEGDJAC@?4?4?2Objects?2iterobject?4c?$AA@
CONST	SEGMENT
??_C@_0BI@INEGDJAC@?4?4?2Objects?2iterobject?4c?$AA@ DB '..\Objects\itero'
	DB	'bject.c', 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PySeqIter_New
_TEXT	SEGMENT
it$ = 48
g$20310 = 56
tv75 = 64
tv95 = 72
seq$ = 96
PySeqIter_New PROC					; COMDAT

; 13   : {

$LN14:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 14   :     seqiterobject *it;
; 15   : 
; 16   :     if (!PySequence_Check(seq)) {

  00009	48 8b 4c 24 60	 mov	 rcx, QWORD PTR seq$[rsp]
  0000e	e8 00 00 00 00	 call	 PySequence_Check
  00013	85 c0		 test	 eax, eax
  00015	75 18		 jne	 SHORT $LN7@PySeqIter_

; 17   :         PyErr_BadInternalCall();

  00017	ba 11 00 00 00	 mov	 edx, 17
  0001c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BI@INEGDJAC@?4?4?2Objects?2iterobject?4c?$AA@
  00023	e8 00 00 00 00	 call	 _PyErr_BadInternalCall

; 18   :         return NULL;

  00028	33 c0		 xor	 eax, eax
  0002a	e9 5d 01 00 00	 jmp	 $LN8@PySeqIter_
$LN7@PySeqIter_:

; 19   :     }
; 20   :     it = PyObject_GC_New(seqiterobject, &PySeqIter_Type);

  0002f	e8 00 00 00 00	 call	 _Py_PXCTX
  00034	85 c0		 test	 eax, eax
  00036	74 13		 je	 SHORT $LN10@PySeqIter_
  00038	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PySeqIter_Type
  0003f	e8 00 00 00 00	 call	 _PxObject_New
  00044	48 89 44 24 40	 mov	 QWORD PTR tv75[rsp], rax
  00049	eb 11		 jmp	 SHORT $LN11@PySeqIter_
$LN10@PySeqIter_:
  0004b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PySeqIter_Type
  00052	e8 00 00 00 00	 call	 _PyObject_GC_New
  00057	48 89 44 24 40	 mov	 QWORD PTR tv75[rsp], rax
$LN11@PySeqIter_:
  0005c	48 8b 44 24 40	 mov	 rax, QWORD PTR tv75[rsp]
  00061	48 89 44 24 30	 mov	 QWORD PTR it$[rsp], rax

; 21   :     if (it == NULL)

  00066	48 83 7c 24 30
	00		 cmp	 QWORD PTR it$[rsp], 0
  0006c	75 07		 jne	 SHORT $LN6@PySeqIter_

; 22   :         return NULL;

  0006e	33 c0		 xor	 eax, eax
  00070	e9 17 01 00 00	 jmp	 $LN8@PySeqIter_
$LN6@PySeqIter_:

; 23   :     it->it_index = 0;

  00075	48 8b 44 24 30	 mov	 rax, QWORD PTR it$[rsp]
  0007a	c7 40 60 00 00
	00 00		 mov	 DWORD PTR [rax+96], 0

; 24   :     Py_INCREF(seq);

  00081	48 8b 4c 24 60	 mov	 rcx, QWORD PTR seq$[rsp]
  00086	e8 00 00 00 00	 call	 _Py_IncRef

; 25   :     it->it_seq = seq;

  0008b	48 8b 44 24 30	 mov	 rax, QWORD PTR it$[rsp]
  00090	48 8b 4c 24 60	 mov	 rcx, QWORD PTR seq$[rsp]
  00095	48 89 48 68	 mov	 QWORD PTR [rax+104], rcx

; 26   :     _PyObject_GC_TRACK(it);

  00099	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000a1	4c 8b 4c 24 30	 mov	 r9, QWORD PTR it$[rsp]
  000a6	41 b8 1a 00 00
	00		 mov	 r8d, 26
  000ac	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@INEGDJAC@?4?4?2Objects?2iterobject?4c?$AA@
  000b3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@GNGGBDLJ@PySeqIter_New?$AA@
  000ba	e8 00 00 00 00	 call	 _PyParallel_Guard
  000bf	85 c0		 test	 eax, eax
  000c1	0f 85 c0 00 00
	00		 jne	 $LN5@PySeqIter_
$LN4@PySeqIter_:
  000c7	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000cf	4c 8b 4c 24 30	 mov	 r9, QWORD PTR it$[rsp]
  000d4	41 b8 1a 00 00
	00		 mov	 r8d, 26
  000da	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@INEGDJAC@?4?4?2Objects?2iterobject?4c?$AA@
  000e1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@GNGGBDLJ@PySeqIter_New?$AA@
  000e8	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ed	85 c0		 test	 eax, eax
  000ef	74 0b		 je	 SHORT $LN12@PySeqIter_
  000f1	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR tv95[rsp], 0
  000fa	eb 0e		 jmp	 SHORT $LN13@PySeqIter_
$LN12@PySeqIter_:
  000fc	48 8b 44 24 30	 mov	 rax, QWORD PTR it$[rsp]
  00101	48 83 e8 18	 sub	 rax, 24
  00105	48 89 44 24 48	 mov	 QWORD PTR tv95[rsp], rax
$LN13@PySeqIter_:
  0010a	48 8b 44 24 48	 mov	 rax, QWORD PTR tv95[rsp]
  0010f	48 89 44 24 38	 mov	 QWORD PTR g$20310[rsp], rax
  00114	48 8b 44 24 38	 mov	 rax, QWORD PTR g$20310[rsp]
  00119	48 83 78 10 fe	 cmp	 QWORD PTR [rax+16], -2
  0011e	74 0c		 je	 SHORT $LN1@PySeqIter_
  00120	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@
  00127	e8 00 00 00 00	 call	 Py_FatalError
$LN1@PySeqIter_:
  0012c	48 8b 44 24 38	 mov	 rax, QWORD PTR g$20310[rsp]
  00131	48 c7 40 10 fd
	ff ff ff	 mov	 QWORD PTR [rax+16], -3
  00139	48 8b 44 24 38	 mov	 rax, QWORD PTR g$20310[rsp]
  0013e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR _PyGC_generation0
  00145	48 89 08	 mov	 QWORD PTR [rax], rcx
  00148	48 8b 44 24 38	 mov	 rax, QWORD PTR g$20310[rsp]
  0014d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR _PyGC_generation0
  00154	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00158	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  0015c	48 8b 44 24 38	 mov	 rax, QWORD PTR g$20310[rsp]
  00161	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00165	48 8b 4c 24 38	 mov	 rcx, QWORD PTR g$20310[rsp]
  0016a	48 89 08	 mov	 QWORD PTR [rax], rcx
  0016d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyGC_generation0
  00174	48 8b 4c 24 38	 mov	 rcx, QWORD PTR g$20310[rsp]
  00179	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  0017d	33 c0		 xor	 eax, eax
  0017f	85 c0		 test	 eax, eax
  00181	0f 85 40 ff ff
	ff		 jne	 $LN4@PySeqIter_
$LN5@PySeqIter_:

; 27   :     return (PyObject *)it;

  00187	48 8b 44 24 30	 mov	 rax, QWORD PTR it$[rsp]
$LN8@PySeqIter_:

; 28   : }

  0018c	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00190	c3		 ret	 0
PySeqIter_New ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
EXTRN	_Py_RefTotal:QWORD
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN7
	DD	imagerel $LN7+132
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 6d		 jne	 SHORT $LN2@Py_IncRef
  00012	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0001a	4c 8b 4c 24 40	 mov	 r9, QWORD PTR op$[rsp]
  0001f	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_Guard
  00038	85 c0		 test	 eax, eax
  0003a	75 12		 jne	 SHORT $LN1@Py_IncRef
  0003c	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  00041	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00045	48 83 e0 20	 and	 rax, 32			; 00000020H
  00049	48 85 c0	 test	 rax, rax
  0004c	74 31		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;

  0004e	e8 00 00 00 00	 call	 _Py_PXCTX
  00053	85 c0		 test	 eax, eax
  00055	74 02		 je	 SHORT $LN5@Py_IncRef
  00057	eb 11		 jmp	 SHORT $LN6@Py_IncRef
$LN5@Py_IncRef:
  00059	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00060	48 ff c0	 inc	 rax
  00063	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN6@Py_IncRef:

; 907  :         (((PyObject*)(op))->ob_refcnt++);

  0006a	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  0006f	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00073	48 ff c0	 inc	 rax
  00076	48 8b 4c 24 40	 mov	 rcx, QWORD PTR op$[rsp]
  0007b	48 89 41 50	 mov	 QWORD PTR [rcx+80], rax
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  0007f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00083	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	_Py_DecRef
PUBLIC	??_C@_1EM@HFMJMDDM@?$AAg?$AA?9?$AA?$DO?$AAg?$AAc?$AA?4?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AAG?$AAC?$AA_?$AAR?$AAE?$AAF?$AAS?$AA_?$AAU?$AAN?$AAT?$AAR@ ; `string'
PUBLIC	??_C@_1DA@ICJLLPIM@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAi?$AAt?$AAe?$AAr?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@ ; `string'
PUBLIC	??_C@_0N@EOJLEFEK@iter_dealloc?$AA@		; `string'
EXTRN	PyObject_GC_Del:PROC
EXTRN	__imp__wassert:PROC
;	COMDAT pdata
; File c:\src\pyparallel\objects\iterobject.c
pdata	SEGMENT
$pdata$iter_dealloc DD imagerel iter_dealloc
	DD	imagerel iter_dealloc+295
	DD	imagerel $unwind$iter_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$iter_dealloc DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_1EM@HFMJMDDM@?$AAg?$AA?9?$AA?$DO?$AAg?$AAc?$AA?4?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AAG?$AAC?$AA_?$AAR?$AAE?$AAF?$AAS?$AA_?$AAU?$AAN?$AAT?$AAR@
CONST	SEGMENT
??_C@_1EM@HFMJMDDM@?$AAg?$AA?9?$AA?$DO?$AAg?$AAc?$AA?4?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AAG?$AAC?$AA_?$AAR?$AAE?$AAF?$AAS?$AA_?$AAU?$AAN?$AAT?$AAR@ DB 'g'
	DB	00H, '-', 00H, '>', 00H, 'g', 00H, 'c', 00H, '.', 00H, 'g', 00H
	DB	'c', 00H, '_', 00H, 'r', 00H, 'e', 00H, 'f', 00H, 's', 00H, ' '
	DB	00H, '!', 00H, '=', 00H, ' ', 00H, '_', 00H, 'P', 00H, 'y', 00H
	DB	'G', 00H, 'C', 00H, '_', 00H, 'R', 00H, 'E', 00H, 'F', 00H, 'S'
	DB	00H, '_', 00H, 'U', 00H, 'N', 00H, 'T', 00H, 'R', 00H, 'A', 00H
	DB	'C', 00H, 'K', 00H, 'E', 00H, 'D', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1DA@ICJLLPIM@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAi?$AAt?$AAe?$AAr?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
CONST	SEGMENT
??_C@_1DA@ICJLLPIM@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAi?$AAt?$AAe?$AAr?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@ DB '.'
	DB	00H, '.', 00H, '\', 00H, 'O', 00H, 'b', 00H, 'j', 00H, 'e', 00H
	DB	'c', 00H, 't', 00H, 's', 00H, '\', 00H, 'i', 00H, 't', 00H, 'e'
	DB	00H, 'r', 00H, 'o', 00H, 'b', 00H, 'j', 00H, 'e', 00H, 'c', 00H
	DB	't', 00H, '.', 00H, 'c', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@EOJLEFEK@iter_dealloc?$AA@
CONST	SEGMENT
??_C@_0N@EOJLEFEK@iter_dealloc?$AA@ DB 'iter_dealloc', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT iter_dealloc
_TEXT	SEGMENT
g$20325 = 48
tv79 = 56
it$ = 80
iter_dealloc PROC					; COMDAT

; 32   : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 33   :     _PyObject_GC_UNTRACK(it);

  00009	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00011	4c 8b 4c 24 50	 mov	 r9, QWORD PTR it$[rsp]
  00016	41 b8 21 00 00
	00		 mov	 r8d, 33			; 00000021H
  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@INEGDJAC@?4?4?2Objects?2iterobject?4c?$AA@
  00023	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@EOJLEFEK@iter_dealloc?$AA@
  0002a	e8 00 00 00 00	 call	 _PyParallel_Guard
  0002f	85 c0		 test	 eax, eax
  00031	0f 85 c1 00 00
	00		 jne	 $LN8@iter_deall
$LN7@iter_deall:
  00037	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0003f	4c 8b 4c 24 50	 mov	 r9, QWORD PTR it$[rsp]
  00044	41 b8 21 00 00
	00		 mov	 r8d, 33			; 00000021H
  0004a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@INEGDJAC@?4?4?2Objects?2iterobject?4c?$AA@
  00051	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0N@EOJLEFEK@iter_dealloc?$AA@
  00058	e8 00 00 00 00	 call	 _PyParallel_Guard
  0005d	85 c0		 test	 eax, eax
  0005f	74 0b		 je	 SHORT $LN11@iter_deall
  00061	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR tv79[rsp], 0
  0006a	eb 0e		 jmp	 SHORT $LN12@iter_deall
$LN11@iter_deall:
  0006c	48 8b 44 24 50	 mov	 rax, QWORD PTR it$[rsp]
  00071	48 83 e8 18	 sub	 rax, 24
  00075	48 89 44 24 38	 mov	 QWORD PTR tv79[rsp], rax
$LN12@iter_deall:
  0007a	48 8b 44 24 38	 mov	 rax, QWORD PTR tv79[rsp]
  0007f	48 89 44 24 30	 mov	 QWORD PTR g$20325[rsp], rax
  00084	48 8b 44 24 30	 mov	 rax, QWORD PTR g$20325[rsp]
  00089	48 83 78 10 fe	 cmp	 QWORD PTR [rax+16], -2
  0008e	75 1c		 jne	 SHORT $LN13@iter_deall
  00090	41 b8 21 00 00
	00		 mov	 r8d, 33			; 00000021H
  00096	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@ICJLLPIM@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAi?$AAt?$AAe?$AAr?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  0009d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EM@HFMJMDDM@?$AAg?$AA?9?$AA?$DO?$AAg?$AAc?$AA?4?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AAG?$AAC?$AA_?$AAR?$AAE?$AAF?$AAS?$AA_?$AAU?$AAN?$AAT?$AAR@
  000a4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000aa	33 c0		 xor	 eax, eax
$LN13@iter_deall:
  000ac	48 8b 44 24 30	 mov	 rax, QWORD PTR g$20325[rsp]
  000b1	48 c7 40 10 fe
	ff ff ff	 mov	 QWORD PTR [rax+16], -2
  000b9	48 8b 44 24 30	 mov	 rax, QWORD PTR g$20325[rsp]
  000be	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  000c2	48 8b 4c 24 30	 mov	 rcx, QWORD PTR g$20325[rsp]
  000c7	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000ca	48 89 08	 mov	 QWORD PTR [rax], rcx
  000cd	48 8b 44 24 30	 mov	 rax, QWORD PTR g$20325[rsp]
  000d2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000d5	48 8b 4c 24 30	 mov	 rcx, QWORD PTR g$20325[rsp]
  000da	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  000de	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  000e2	48 8b 44 24 30	 mov	 rax, QWORD PTR g$20325[rsp]
  000e7	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
  000ee	33 c0		 xor	 eax, eax
  000f0	85 c0		 test	 eax, eax
  000f2	0f 85 3f ff ff
	ff		 jne	 $LN7@iter_deall
$LN8@iter_deall:
$LN4@iter_deall:

; 34   :     Py_XDECREF(it->it_seq);

  000f8	48 8b 44 24 50	 mov	 rax, QWORD PTR it$[rsp]
  000fd	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  00102	74 0e		 je	 SHORT $LN1@iter_deall
  00104	48 8b 44 24 50	 mov	 rax, QWORD PTR it$[rsp]
  00109	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  0010d	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@iter_deall:
  00112	33 c0		 xor	 eax, eax
  00114	85 c0		 test	 eax, eax
  00116	75 e0		 jne	 SHORT $LN4@iter_deall

; 35   :     PyObject_GC_Del(it);

  00118	48 8b 4c 24 50	 mov	 rcx, QWORD PTR it$[rsp]
  0011d	e8 00 00 00 00	 call	 PyObject_GC_Del

; 36   : }

  00122	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00126	c3		 ret	 0
iter_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
EXTRN	_Py_Dealloc:PROC
EXTRN	_Py_NegativeRefcount:PROC
EXTRN	Px_DecRef:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN13
	DD	imagerel $LN13+257
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
tv81 = 48
op$ = 80
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN13:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	0f 85 e6 00 00
	00		 jne	 $LN8@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00016	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0001b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0001f	48 83 e0 20	 and	 rax, 32			; 00000020H
  00023	48 85 c0	 test	 rax, rax
  00026	75 14		 jne	 SHORT $LN6@Py_DecRef
  00028	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0002d	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00031	48 25 80 00 00
	00		 and	 rax, 128		; 00000080H
  00037	48 85 c0	 test	 rax, rax
  0003a	74 0f		 je	 SHORT $LN7@Py_DecRef
$LN6@Py_DecRef:

; 926  :             Px_DECREF(op);

  0003c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  00041	e8 00 00 00 00	 call	 Px_DecRef
  00046	e9 b1 00 00 00	 jmp	 $LN5@Py_DecRef
$LN7@Py_DecRef:

; 927  :         else if (!Px_ISPX(op)) {

  0004b	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00050	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00054	48 83 e0 02	 and	 rax, 2
  00058	48 85 c0	 test	 rax, rax
  0005b	0f 85 9b 00 00
	00		 jne	 $LN4@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;

  00061	e8 00 00 00 00	 call	 _Py_PXCTX
  00066	85 c0		 test	 eax, eax
  00068	74 02		 je	 SHORT $LN11@Py_DecRef
  0006a	eb 11		 jmp	 SHORT $LN12@Py_DecRef
$LN11@Py_DecRef:
  0006c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00073	48 ff c8	 dec	 rax
  00076	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN12@Py_DecRef:

; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  0007d	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00082	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00086	48 ff c8	 dec	 rax
  00089	48 89 44 24 30	 mov	 QWORD PTR tv81[rsp], rax
  0008e	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00093	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv81[rsp]
  00098	48 89 48 50	 mov	 QWORD PTR [rax+80], rcx
  0009c	48 83 7c 24 30
	00		 cmp	 QWORD PTR tv81[rsp], 0
  000a2	74 4e		 je	 SHORT $LN3@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);

  000a4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000ac	4c 8b 4c 24 50	 mov	 r9, QWORD PTR op$[rsp]
  000b1	41 b8 a2 03 00
	00		 mov	 r8d, 930		; 000003a2H
  000b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000c5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ca	85 c0		 test	 eax, eax
  000cc	75 22		 jne	 SHORT $LN2@Py_DecRef
  000ce	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  000d3	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000d8	7d 16		 jge	 SHORT $LN2@Py_DecRef
  000da	4c 8b 44 24 50	 mov	 r8, QWORD PTR op$[rsp]
  000df	ba a2 03 00 00	 mov	 edx, 930		; 000003a2H
  000e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000eb	e8 00 00 00 00	 call	 _Py_NegativeRefcount
$LN2@Py_DecRef:

; 931  :             } else

  000f0	eb 0a		 jmp	 SHORT $LN1@Py_DecRef
$LN3@Py_DecRef:

; 932  :                 _Py_Dealloc((PyObject *)(op));

  000f2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  000f7	e8 00 00 00 00	 call	 _Py_Dealloc
$LN1@Py_DecRef:
$LN4@Py_DecRef:
$LN5@Py_DecRef:
$LN8@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  000fc	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00100	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0O@EFHLLJNE@iter_traverse?$AA@		; `string'
EXTRN	_PyParallel_ContextGuardFailure:PROC
;	COMDAT pdata
; File c:\src\pyparallel\objects\iterobject.c
pdata	SEGMENT
$pdata$iter_traverse DD imagerel iter_traverse
	DD	imagerel iter_traverse+116
	DD	imagerel $unwind$iter_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$iter_traverse DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT ??_C@_0O@EFHLLJNE@iter_traverse?$AA@
CONST	SEGMENT
??_C@_0O@EFHLLJNE@iter_traverse?$AA@ DB 'iter_traverse', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT iter_traverse
_TEXT	SEGMENT
vret$20351 = 32
it$ = 64
visit$ = 72
arg$ = 80
iter_traverse PROC					; COMDAT

; 40   : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN6@iter_trave:

; 41   :     Py_VISIT(it->it_seq);

  00013	e8 00 00 00 00	 call	 _Py_PXCTX
  00018	85 c0		 test	 eax, eax
  0001a	74 1c		 je	 SHORT $LN3@iter_trave
  0001c	45 33 c9	 xor	 r9d, r9d
  0001f	41 b8 29 00 00
	00		 mov	 r8d, 41			; 00000029H
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@INEGDJAC@?4?4?2Objects?2iterobject?4c?$AA@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0O@EFHLLJNE@iter_traverse?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@iter_trave:
  00038	48 8b 44 24 40	 mov	 rax, QWORD PTR it$[rsp]
  0003d	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  00042	74 23		 je	 SHORT $LN2@iter_trave
  00044	48 8b 54 24 50	 mov	 rdx, QWORD PTR arg$[rsp]
  00049	48 8b 44 24 40	 mov	 rax, QWORD PTR it$[rsp]
  0004e	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  00052	ff 54 24 48	 call	 QWORD PTR visit$[rsp]
  00056	89 44 24 20	 mov	 DWORD PTR vret$20351[rsp], eax
  0005a	83 7c 24 20 00	 cmp	 DWORD PTR vret$20351[rsp], 0
  0005f	74 06		 je	 SHORT $LN1@iter_trave
  00061	8b 44 24 20	 mov	 eax, DWORD PTR vret$20351[rsp]
  00065	eb 08		 jmp	 SHORT $LN7@iter_trave
$LN1@iter_trave:
$LN2@iter_trave:
  00067	33 c0		 xor	 eax, eax
  00069	85 c0		 test	 eax, eax
  0006b	75 a6		 jne	 SHORT $LN6@iter_trave

; 42   :     return 0;

  0006d	33 c0		 xor	 eax, eax
$LN7@iter_trave:

; 43   : }

  0006f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00073	c3		 ret	 0
iter_traverse ENDP
_TEXT	ENDS
PUBLIC	??_C@_1DE@FICCDPBP@?$AAP?$AAy?$AAS?$AAe?$AAq?$AAI?$AAt?$AAe?$AAr?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$CJ?$AA?$AA@ ; `string'
EXTRN	PyErr_Clear:PROC
EXTRN	PyExc_StopIteration:QWORD
EXTRN	PyErr_ExceptionMatches:PROC
EXTRN	PyExc_IndexError:QWORD
EXTRN	PySequence_GetItem:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$iter_iternext DD imagerel iter_iternext
	DD	imagerel iter_iternext+218
	DD	imagerel $unwind$iter_iternext
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$iter_iternext DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_1DE@FICCDPBP@?$AAP?$AAy?$AAS?$AAe?$AAq?$AAI?$AAt?$AAe?$AAr?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DE@FICCDPBP@?$AAP?$AAy?$AAS?$AAe?$AAq?$AAI?$AAt?$AAe?$AAr?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'S', 00H, 'e', 00H, 'q', 00H, 'I', 00H, 't', 00H
	DB	'e', 00H, 'r', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, 'i', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	'a', 00H, 't', 00H, 'o', 00H, 'r', 00H, ')', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT iter_iternext
_TEXT	SEGMENT
it$ = 32
seq$ = 40
result$ = 48
iterator$ = 80
iter_iternext PROC					; COMDAT

; 47   : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 48   :     seqiterobject *it;
; 49   :     PyObject *seq;
; 50   :     PyObject *result;
; 51   : 
; 52   :     assert(PySeqIter_Check(iterator));

  00009	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PySeqIter_Type
  00010	48 8b 4c 24 50	 mov	 rcx, QWORD PTR iterator$[rsp]
  00015	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00019	74 1c		 je	 SHORT $LN7@iter_itern
  0001b	41 b8 34 00 00
	00		 mov	 r8d, 52			; 00000034H
  00021	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@ICJLLPIM@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAi?$AAt?$AAe?$AAr?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  00028	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DE@FICCDPBP@?$AAP?$AAy?$AAS?$AAe?$AAq?$AAI?$AAt?$AAe?$AAr?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAi?$AAt?$AAe?$AAr?$AAa?$AAt?$AAo?$AAr?$AA?$CJ?$AA?$AA@
  0002f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00035	33 c0		 xor	 eax, eax
$LN7@iter_itern:

; 53   :     it = (seqiterobject *)iterator;

  00037	48 8b 44 24 50	 mov	 rax, QWORD PTR iterator$[rsp]
  0003c	48 89 44 24 20	 mov	 QWORD PTR it$[rsp], rax

; 54   :     seq = it->it_seq;

  00041	48 8b 44 24 20	 mov	 rax, QWORD PTR it$[rsp]
  00046	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0004a	48 89 44 24 28	 mov	 QWORD PTR seq$[rsp], rax

; 55   :     if (seq == NULL)

  0004f	48 83 7c 24 28
	00		 cmp	 QWORD PTR seq$[rsp], 0
  00055	75 04		 jne	 SHORT $LN4@iter_itern

; 56   :         return NULL;

  00057	33 c0		 xor	 eax, eax
  00059	eb 7a		 jmp	 SHORT $LN5@iter_itern
$LN4@iter_itern:

; 57   : 
; 58   :     result = PySequence_GetItem(seq, it->it_index);

  0005b	48 8b 44 24 20	 mov	 rax, QWORD PTR it$[rsp]
  00060	48 63 40 60	 movsxd	 rax, DWORD PTR [rax+96]
  00064	48 8b d0	 mov	 rdx, rax
  00067	48 8b 4c 24 28	 mov	 rcx, QWORD PTR seq$[rsp]
  0006c	e8 00 00 00 00	 call	 PySequence_GetItem
  00071	48 89 44 24 30	 mov	 QWORD PTR result$[rsp], rax

; 59   :     if (result != NULL) {

  00076	48 83 7c 24 30
	00		 cmp	 QWORD PTR result$[rsp], 0
  0007c	74 19		 je	 SHORT $LN3@iter_itern

; 60   :         it->it_index++;

  0007e	48 8b 44 24 20	 mov	 rax, QWORD PTR it$[rsp]
  00083	8b 40 60	 mov	 eax, DWORD PTR [rax+96]
  00086	ff c0		 inc	 eax
  00088	48 8b 4c 24 20	 mov	 rcx, QWORD PTR it$[rsp]
  0008d	89 41 60	 mov	 DWORD PTR [rcx+96], eax

; 61   :         return result;

  00090	48 8b 44 24 30	 mov	 rax, QWORD PTR result$[rsp]
  00095	eb 3e		 jmp	 SHORT $LN5@iter_itern
$LN3@iter_itern:

; 62   :     }
; 63   :     if (PyErr_ExceptionMatches(PyExc_IndexError) ||
; 64   :         PyErr_ExceptionMatches(PyExc_StopIteration))

  00097	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_IndexError
  0009e	e8 00 00 00 00	 call	 PyErr_ExceptionMatches
  000a3	85 c0		 test	 eax, eax
  000a5	75 10		 jne	 SHORT $LN1@iter_itern
  000a7	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_StopIteration
  000ae	e8 00 00 00 00	 call	 PyErr_ExceptionMatches
  000b3	85 c0		 test	 eax, eax
  000b5	74 1c		 je	 SHORT $LN2@iter_itern
$LN1@iter_itern:

; 65   :     {
; 66   :         PyErr_Clear();

  000b7	e8 00 00 00 00	 call	 PyErr_Clear

; 67   :         Py_DECREF(seq);

  000bc	48 8b 4c 24 28	 mov	 rcx, QWORD PTR seq$[rsp]
  000c1	e8 00 00 00 00	 call	 _Py_DecRef

; 68   :         it->it_seq = NULL;

  000c6	48 8b 44 24 20	 mov	 rax, QWORD PTR it$[rsp]
  000cb	48 c7 40 68 00
	00 00 00	 mov	 QWORD PTR [rax+104], 0
$LN2@iter_itern:

; 69   :     }
; 70   :     return NULL;

  000d3	33 c0		 xor	 eax, eax
$LN5@iter_itern:

; 71   : }

  000d5	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000d9	c3		 ret	 0
iter_iternext ENDP
_TEXT	ENDS
EXTRN	PyLong_FromLong:PROC
EXTRN	PyLong_FromSsize_t:PROC
EXTRN	PySequence_Size:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$iter_len DD imagerel iter_len
	DD	imagerel iter_len+109
	DD	imagerel $unwind$iter_len
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$iter_len DD 010901H
	DD	06209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT iter_len
_TEXT	SEGMENT
len$ = 32
seqsize$ = 40
it$ = 64
iter_len PROC						; COMDAT

; 75   : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 76   :     Py_ssize_t seqsize, len;
; 77   : 
; 78   :     if (it->it_seq) {

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR it$[rsp]
  0000e	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  00013	74 4c		 je	 SHORT $LN3@iter_len

; 79   :         seqsize = PySequence_Size(it->it_seq);

  00015	48 8b 44 24 40	 mov	 rax, QWORD PTR it$[rsp]
  0001a	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  0001e	e8 00 00 00 00	 call	 PySequence_Size
  00023	48 89 44 24 28	 mov	 QWORD PTR seqsize$[rsp], rax

; 80   :         if (seqsize == -1)

  00028	48 83 7c 24 28
	ff		 cmp	 QWORD PTR seqsize$[rsp], -1
  0002e	75 04		 jne	 SHORT $LN2@iter_len

; 81   :             return NULL;

  00030	33 c0		 xor	 eax, eax
  00032	eb 34		 jmp	 SHORT $LN4@iter_len
$LN2@iter_len:

; 82   :         len = seqsize - it->it_index;

  00034	48 8b 44 24 40	 mov	 rax, QWORD PTR it$[rsp]
  00039	48 63 40 60	 movsxd	 rax, DWORD PTR [rax+96]
  0003d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR seqsize$[rsp]
  00042	48 2b c8	 sub	 rcx, rax
  00045	48 8b c1	 mov	 rax, rcx
  00048	48 89 44 24 20	 mov	 QWORD PTR len$[rsp], rax

; 83   :         if (len >= 0)

  0004d	48 83 7c 24 20
	00		 cmp	 QWORD PTR len$[rsp], 0
  00053	7c 0c		 jl	 SHORT $LN1@iter_len

; 84   :             return PyLong_FromSsize_t(len);

  00055	48 8b 4c 24 20	 mov	 rcx, QWORD PTR len$[rsp]
  0005a	e8 00 00 00 00	 call	 PyLong_FromSsize_t
  0005f	eb 07		 jmp	 SHORT $LN4@iter_len
$LN1@iter_len:
$LN3@iter_len:

; 85   :     }
; 86   :     return PyLong_FromLong(0);

  00061	33 c9		 xor	 ecx, ecx
  00063	e8 00 00 00 00	 call	 PyLong_FromLong
$LN4@iter_len:

; 87   : }

  00068	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0006c	c3		 ret	 0
iter_len ENDP
_TEXT	ENDS
PUBLIC	??_C@_05JMICDENA@N?$CI?$CI?$CJ?$CJ?$AA@		; `string'
PUBLIC	??_C@_05IFELCCKI@N?$CIO?$CJn?$AA@		; `string'
PUBLIC	??_C@_04BKLHDIKK@iter?$AA@			; `string'
EXTRN	Py_BuildValue:PROC
EXTRN	_PyObject_GetBuiltin:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$iter_reduce DD imagerel iter_reduce
	DD	imagerel iter_reduce+102
	DD	imagerel $unwind$iter_reduce
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$iter_reduce DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT ??_C@_05JMICDENA@N?$CI?$CI?$CJ?$CJ?$AA@
CONST	SEGMENT
??_C@_05JMICDENA@N?$CI?$CI?$CJ?$CJ?$AA@ DB 'N(())', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05IFELCCKI@N?$CIO?$CJn?$AA@
CONST	SEGMENT
??_C@_05IFELCCKI@N?$CIO?$CJn?$AA@ DB 'N(O)n', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04BKLHDIKK@iter?$AA@
CONST	SEGMENT
??_C@_04BKLHDIKK@iter?$AA@ DB 'iter', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT iter_reduce
_TEXT	SEGMENT
it$ = 48
iter_reduce PROC					; COMDAT

; 93   : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 94   :     if (it->it_seq != NULL)

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR it$[rsp]
  0000e	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  00013	74 31		 je	 SHORT $LN2@iter_reduc

; 95   :         return Py_BuildValue("N(O)n", _PyObject_GetBuiltin("iter"),
; 96   :                              it->it_seq, it->it_index);

  00015	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04BKLHDIKK@iter?$AA@
  0001c	e8 00 00 00 00	 call	 _PyObject_GetBuiltin
  00021	48 8b 4c 24 30	 mov	 rcx, QWORD PTR it$[rsp]
  00026	44 8b 49 60	 mov	 r9d, DWORD PTR [rcx+96]
  0002a	48 8b 4c 24 30	 mov	 rcx, QWORD PTR it$[rsp]
  0002f	4c 8b 41 68	 mov	 r8, QWORD PTR [rcx+104]
  00033	48 8b d0	 mov	 rdx, rax
  00036	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05IFELCCKI@N?$CIO?$CJn?$AA@
  0003d	e8 00 00 00 00	 call	 Py_BuildValue
  00042	eb 1d		 jmp	 SHORT $LN3@iter_reduc

; 97   :     else

  00044	eb 1b		 jmp	 SHORT $LN1@iter_reduc
$LN2@iter_reduc:

; 98   :         return Py_BuildValue("N(())", _PyObject_GetBuiltin("iter"));

  00046	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04BKLHDIKK@iter?$AA@
  0004d	e8 00 00 00 00	 call	 _PyObject_GetBuiltin
  00052	48 8b d0	 mov	 rdx, rax
  00055	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05JMICDENA@N?$CI?$CI?$CJ?$CJ?$AA@
  0005c	e8 00 00 00 00	 call	 Py_BuildValue
$LN1@iter_reduc:
$LN3@iter_reduc:

; 99   : }

  00061	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00065	c3		 ret	 0
iter_reduce ENDP
_TEXT	ENDS
EXTRN	_Py_NoneStruct:BYTE
EXTRN	PyErr_Occurred:PROC
EXTRN	PyLong_AsSsize_t:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$iter_setstate DD imagerel iter_setstate
	DD	imagerel iter_setstate+116
	DD	imagerel $unwind$iter_setstate
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$iter_setstate DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT iter_setstate
_TEXT	SEGMENT
index$ = 32
it$ = 64
state$ = 72
iter_setstate PROC					; COMDAT

; 105  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 106  :     Py_ssize_t index = PyLong_AsSsize_t(state);

  0000e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR state$[rsp]
  00013	e8 00 00 00 00	 call	 PyLong_AsSsize_t
  00018	48 89 44 24 20	 mov	 QWORD PTR index$[rsp], rax

; 107  :     if (index == -1 && PyErr_Occurred())

  0001d	48 83 7c 24 20
	ff		 cmp	 QWORD PTR index$[rsp], -1
  00023	75 0e		 jne	 SHORT $LN3@iter_setst
  00025	e8 00 00 00 00	 call	 PyErr_Occurred
  0002a	48 85 c0	 test	 rax, rax
  0002d	74 04		 je	 SHORT $LN3@iter_setst

; 108  :         return NULL;

  0002f	33 c0		 xor	 eax, eax
  00031	eb 3c		 jmp	 SHORT $LN4@iter_setst
$LN3@iter_setst:

; 109  :     if (it->it_seq != NULL) {

  00033	48 8b 44 24 40	 mov	 rax, QWORD PTR it$[rsp]
  00038	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  0003d	74 1d		 je	 SHORT $LN2@iter_setst

; 110  :         if (index < 0)

  0003f	48 83 7c 24 20
	00		 cmp	 QWORD PTR index$[rsp], 0
  00045	7d 09		 jge	 SHORT $LN1@iter_setst

; 111  :             index = 0;

  00047	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR index$[rsp], 0
$LN1@iter_setst:

; 112  :         it->it_index = index;

  00050	48 8b 44 24 40	 mov	 rax, QWORD PTR it$[rsp]
  00055	8b 4c 24 20	 mov	 ecx, DWORD PTR index$[rsp]
  00059	89 48 60	 mov	 DWORD PTR [rax+96], ecx
$LN2@iter_setst:

; 113  :     }
; 114  :     Py_RETURN_NONE;

  0005c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_Py_NoneStruct
  00063	e8 00 00 00 00	 call	 _Py_IncRef
  00068	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:_Py_NoneStruct
$LN4@iter_setst:

; 115  : }

  0006f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00073	c3		 ret	 0
iter_setstate ENDP
_TEXT	ENDS
PUBLIC	??_C@_0P@OKIMBNHM@PyCallIter_New?$AA@		; `string'
PUBLIC	PyCallIter_New
;	COMDAT pdata
pdata	SEGMENT
$pdata$PyCallIter_New DD imagerel $LN13
	DD	imagerel $LN13+380
	DD	imagerel $unwind$PyCallIter_New
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyCallIter_New DD 010e01H
	DD	0a20eH
xdata	ENDS
;	COMDAT ??_C@_0P@OKIMBNHM@PyCallIter_New?$AA@
CONST	SEGMENT
??_C@_0P@OKIMBNHM@PyCallIter_New?$AA@ DB 'PyCallIter_New', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyCallIter_New
_TEXT	SEGMENT
it$ = 48
g$20459 = 56
tv70 = 64
tv91 = 72
callable$ = 96
sentinel$ = 104
PyCallIter_New PROC					; COMDAT

; 169  : {

$LN13:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 170  :     calliterobject *it;
; 171  :     it = PyObject_GC_New(calliterobject, &PyCallIter_Type);

  0000e	e8 00 00 00 00	 call	 _Py_PXCTX
  00013	85 c0		 test	 eax, eax
  00015	74 13		 je	 SHORT $LN9@PyCallIter
  00017	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyCallIter_Type
  0001e	e8 00 00 00 00	 call	 _PxObject_New
  00023	48 89 44 24 40	 mov	 QWORD PTR tv70[rsp], rax
  00028	eb 11		 jmp	 SHORT $LN10@PyCallIter
$LN9@PyCallIter:
  0002a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PyCallIter_Type
  00031	e8 00 00 00 00	 call	 _PyObject_GC_New
  00036	48 89 44 24 40	 mov	 QWORD PTR tv70[rsp], rax
$LN10@PyCallIter:
  0003b	48 8b 44 24 40	 mov	 rax, QWORD PTR tv70[rsp]
  00040	48 89 44 24 30	 mov	 QWORD PTR it$[rsp], rax

; 172  :     if (it == NULL)

  00045	48 83 7c 24 30
	00		 cmp	 QWORD PTR it$[rsp], 0
  0004b	75 07		 jne	 SHORT $LN6@PyCallIter

; 173  :         return NULL;

  0004d	33 c0		 xor	 eax, eax
  0004f	e9 23 01 00 00	 jmp	 $LN7@PyCallIter
$LN6@PyCallIter:

; 174  :     Py_INCREF(callable);

  00054	48 8b 4c 24 60	 mov	 rcx, QWORD PTR callable$[rsp]
  00059	e8 00 00 00 00	 call	 _Py_IncRef

; 175  :     it->it_callable = callable;

  0005e	48 8b 44 24 30	 mov	 rax, QWORD PTR it$[rsp]
  00063	48 8b 4c 24 60	 mov	 rcx, QWORD PTR callable$[rsp]
  00068	48 89 48 60	 mov	 QWORD PTR [rax+96], rcx

; 176  :     Py_INCREF(sentinel);

  0006c	48 8b 4c 24 68	 mov	 rcx, QWORD PTR sentinel$[rsp]
  00071	e8 00 00 00 00	 call	 _Py_IncRef

; 177  :     it->it_sentinel = sentinel;

  00076	48 8b 44 24 30	 mov	 rax, QWORD PTR it$[rsp]
  0007b	48 8b 4c 24 68	 mov	 rcx, QWORD PTR sentinel$[rsp]
  00080	48 89 48 68	 mov	 QWORD PTR [rax+104], rcx

; 178  :     _PyObject_GC_TRACK(it);

  00084	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0008c	4c 8b 4c 24 30	 mov	 r9, QWORD PTR it$[rsp]
  00091	41 b8 b2 00 00
	00		 mov	 r8d, 178		; 000000b2H
  00097	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@INEGDJAC@?4?4?2Objects?2iterobject?4c?$AA@
  0009e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@OKIMBNHM@PyCallIter_New?$AA@
  000a5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000aa	85 c0		 test	 eax, eax
  000ac	0f 85 c0 00 00
	00		 jne	 $LN5@PyCallIter
$LN4@PyCallIter:
  000b2	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000ba	4c 8b 4c 24 30	 mov	 r9, QWORD PTR it$[rsp]
  000bf	41 b8 b2 00 00
	00		 mov	 r8d, 178		; 000000b2H
  000c5	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@INEGDJAC@?4?4?2Objects?2iterobject?4c?$AA@
  000cc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0P@OKIMBNHM@PyCallIter_New?$AA@
  000d3	e8 00 00 00 00	 call	 _PyParallel_Guard
  000d8	85 c0		 test	 eax, eax
  000da	74 0b		 je	 SHORT $LN11@PyCallIter
  000dc	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR tv91[rsp], 0
  000e5	eb 0e		 jmp	 SHORT $LN12@PyCallIter
$LN11@PyCallIter:
  000e7	48 8b 44 24 30	 mov	 rax, QWORD PTR it$[rsp]
  000ec	48 83 e8 18	 sub	 rax, 24
  000f0	48 89 44 24 48	 mov	 QWORD PTR tv91[rsp], rax
$LN12@PyCallIter:
  000f5	48 8b 44 24 48	 mov	 rax, QWORD PTR tv91[rsp]
  000fa	48 89 44 24 38	 mov	 QWORD PTR g$20459[rsp], rax
  000ff	48 8b 44 24 38	 mov	 rax, QWORD PTR g$20459[rsp]
  00104	48 83 78 10 fe	 cmp	 QWORD PTR [rax+16], -2
  00109	74 0c		 je	 SHORT $LN1@PyCallIter
  0010b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BK@BNIPEKEF@GC?5object?5already?5tracked?$AA@
  00112	e8 00 00 00 00	 call	 Py_FatalError
$LN1@PyCallIter:
  00117	48 8b 44 24 38	 mov	 rax, QWORD PTR g$20459[rsp]
  0011c	48 c7 40 10 fd
	ff ff ff	 mov	 QWORD PTR [rax+16], -3
  00124	48 8b 44 24 38	 mov	 rax, QWORD PTR g$20459[rsp]
  00129	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR _PyGC_generation0
  00130	48 89 08	 mov	 QWORD PTR [rax], rcx
  00133	48 8b 44 24 38	 mov	 rax, QWORD PTR g$20459[rsp]
  00138	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR _PyGC_generation0
  0013f	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00143	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  00147	48 8b 44 24 38	 mov	 rax, QWORD PTR g$20459[rsp]
  0014c	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00150	48 8b 4c 24 38	 mov	 rcx, QWORD PTR g$20459[rsp]
  00155	48 89 08	 mov	 QWORD PTR [rax], rcx
  00158	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _PyGC_generation0
  0015f	48 8b 4c 24 38	 mov	 rcx, QWORD PTR g$20459[rsp]
  00164	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  00168	33 c0		 xor	 eax, eax
  0016a	85 c0		 test	 eax, eax
  0016c	0f 85 40 ff ff
	ff		 jne	 $LN4@PyCallIter
$LN5@PyCallIter:

; 179  :     return (PyObject *)it;

  00172	48 8b 44 24 30	 mov	 rax, QWORD PTR it$[rsp]
$LN7@PyCallIter:

; 180  : }

  00177	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0017b	c3		 ret	 0
PyCallIter_New ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BB@JOLFBAOK@calliter_dealloc?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$calliter_dealloc DD imagerel calliter_dealloc
	DD	imagerel calliter_dealloc+327
	DD	imagerel $unwind$calliter_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$calliter_dealloc DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0BB@JOLFBAOK@calliter_dealloc?$AA@
CONST	SEGMENT
??_C@_0BB@JOLFBAOK@calliter_dealloc?$AA@ DB 'calliter_dealloc', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT calliter_dealloc
_TEXT	SEGMENT
g$20473 = 48
tv79 = 56
it$ = 80
calliter_dealloc PROC					; COMDAT

; 183  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 184  :     _PyObject_GC_UNTRACK(it);

  00009	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00011	4c 8b 4c 24 50	 mov	 r9, QWORD PTR it$[rsp]
  00016	41 b8 b8 00 00
	00		 mov	 r8d, 184		; 000000b8H
  0001c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@INEGDJAC@?4?4?2Objects?2iterobject?4c?$AA@
  00023	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@JOLFBAOK@calliter_dealloc?$AA@
  0002a	e8 00 00 00 00	 call	 _PyParallel_Guard
  0002f	85 c0		 test	 eax, eax
  00031	0f 85 c1 00 00
	00		 jne	 $LN12@calliter_d
$LN11@calliter_d:
  00037	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  0003f	4c 8b 4c 24 50	 mov	 r9, QWORD PTR it$[rsp]
  00044	41 b8 b8 00 00
	00		 mov	 r8d, 184		; 000000b8H
  0004a	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@INEGDJAC@?4?4?2Objects?2iterobject?4c?$AA@
  00051	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BB@JOLFBAOK@calliter_dealloc?$AA@
  00058	e8 00 00 00 00	 call	 _PyParallel_Guard
  0005d	85 c0		 test	 eax, eax
  0005f	74 0b		 je	 SHORT $LN15@calliter_d
  00061	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR tv79[rsp], 0
  0006a	eb 0e		 jmp	 SHORT $LN16@calliter_d
$LN15@calliter_d:
  0006c	48 8b 44 24 50	 mov	 rax, QWORD PTR it$[rsp]
  00071	48 83 e8 18	 sub	 rax, 24
  00075	48 89 44 24 38	 mov	 QWORD PTR tv79[rsp], rax
$LN16@calliter_d:
  0007a	48 8b 44 24 38	 mov	 rax, QWORD PTR tv79[rsp]
  0007f	48 89 44 24 30	 mov	 QWORD PTR g$20473[rsp], rax
  00084	48 8b 44 24 30	 mov	 rax, QWORD PTR g$20473[rsp]
  00089	48 83 78 10 fe	 cmp	 QWORD PTR [rax+16], -2
  0008e	75 1c		 jne	 SHORT $LN17@calliter_d
  00090	41 b8 b8 00 00
	00		 mov	 r8d, 184		; 000000b8H
  00096	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1DA@ICJLLPIM@?$AA?4?$AA?4?$AA?2?$AAO?$AAb?$AAj?$AAe?$AAc?$AAt?$AAs?$AA?2?$AAi?$AAt?$AAe?$AAr?$AAo?$AAb?$AAj?$AAe?$AAc?$AAt?$AA?4?$AAc?$AA?$AA@
  0009d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EM@HFMJMDDM@?$AAg?$AA?9?$AA?$DO?$AAg?$AAc?$AA?4?$AAg?$AAc?$AA_?$AAr?$AAe?$AAf?$AAs?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA_?$AAP?$AAy?$AAG?$AAC?$AA_?$AAR?$AAE?$AAF?$AAS?$AA_?$AAU?$AAN?$AAT?$AAR@
  000a4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000aa	33 c0		 xor	 eax, eax
$LN17@calliter_d:
  000ac	48 8b 44 24 30	 mov	 rax, QWORD PTR g$20473[rsp]
  000b1	48 c7 40 10 fe
	ff ff ff	 mov	 QWORD PTR [rax+16], -2
  000b9	48 8b 44 24 30	 mov	 rax, QWORD PTR g$20473[rsp]
  000be	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  000c2	48 8b 4c 24 30	 mov	 rcx, QWORD PTR g$20473[rsp]
  000c7	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  000ca	48 89 08	 mov	 QWORD PTR [rax], rcx
  000cd	48 8b 44 24 30	 mov	 rax, QWORD PTR g$20473[rsp]
  000d2	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000d5	48 8b 4c 24 30	 mov	 rcx, QWORD PTR g$20473[rsp]
  000da	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  000de	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx
  000e2	48 8b 44 24 30	 mov	 rax, QWORD PTR g$20473[rsp]
  000e7	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0
  000ee	33 c0		 xor	 eax, eax
  000f0	85 c0		 test	 eax, eax
  000f2	0f 85 3f ff ff
	ff		 jne	 $LN11@calliter_d
$LN12@calliter_d:
$LN8@calliter_d:

; 185  :     Py_XDECREF(it->it_callable);

  000f8	48 8b 44 24 50	 mov	 rax, QWORD PTR it$[rsp]
  000fd	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00102	74 0e		 je	 SHORT $LN5@calliter_d
  00104	48 8b 44 24 50	 mov	 rax, QWORD PTR it$[rsp]
  00109	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  0010d	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@calliter_d:
  00112	33 c0		 xor	 eax, eax
  00114	85 c0		 test	 eax, eax
  00116	75 e0		 jne	 SHORT $LN8@calliter_d
$LN4@calliter_d:

; 186  :     Py_XDECREF(it->it_sentinel);

  00118	48 8b 44 24 50	 mov	 rax, QWORD PTR it$[rsp]
  0011d	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  00122	74 0e		 je	 SHORT $LN1@calliter_d
  00124	48 8b 44 24 50	 mov	 rax, QWORD PTR it$[rsp]
  00129	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  0012d	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@calliter_d:
  00132	33 c0		 xor	 eax, eax
  00134	85 c0		 test	 eax, eax
  00136	75 e0		 jne	 SHORT $LN4@calliter_d

; 187  :     PyObject_GC_Del(it);

  00138	48 8b 4c 24 50	 mov	 rcx, QWORD PTR it$[rsp]
  0013d	e8 00 00 00 00	 call	 PyObject_GC_Del

; 188  : }

  00142	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00146	c3		 ret	 0
calliter_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BC@JDHNDEGJ@calliter_traverse?$AA@	; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$calliter_traverse DD imagerel calliter_traverse
	DD	imagerel calliter_traverse+206
	DD	imagerel $unwind$calliter_traverse
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$calliter_traverse DD 011301H
	DD	06213H
xdata	ENDS
;	COMDAT ??_C@_0BC@JDHNDEGJ@calliter_traverse?$AA@
CONST	SEGMENT
??_C@_0BC@JDHNDEGJ@calliter_traverse?$AA@ DB 'calliter_traverse', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT calliter_traverse
_TEXT	SEGMENT
vret$20502 = 32
vret$20510 = 36
it$ = 64
visit$ = 72
arg$ = 80
calliter_traverse PROC					; COMDAT

; 192  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN12@calliter_t:

; 193  :     Py_VISIT(it->it_callable);

  00013	e8 00 00 00 00	 call	 _Py_PXCTX
  00018	85 c0		 test	 eax, eax
  0001a	74 1c		 je	 SHORT $LN9@calliter_t
  0001c	45 33 c9	 xor	 r9d, r9d
  0001f	41 b8 c1 00 00
	00		 mov	 r8d, 193		; 000000c1H
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@INEGDJAC@?4?4?2Objects?2iterobject?4c?$AA@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@JDHNDEGJ@calliter_traverse?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN9@calliter_t:
  00038	48 8b 44 24 40	 mov	 rax, QWORD PTR it$[rsp]
  0003d	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00042	74 23		 je	 SHORT $LN8@calliter_t
  00044	48 8b 54 24 50	 mov	 rdx, QWORD PTR arg$[rsp]
  00049	48 8b 44 24 40	 mov	 rax, QWORD PTR it$[rsp]
  0004e	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00052	ff 54 24 48	 call	 QWORD PTR visit$[rsp]
  00056	89 44 24 20	 mov	 DWORD PTR vret$20502[rsp], eax
  0005a	83 7c 24 20 00	 cmp	 DWORD PTR vret$20502[rsp], 0
  0005f	74 06		 je	 SHORT $LN7@calliter_t
  00061	8b 44 24 20	 mov	 eax, DWORD PTR vret$20502[rsp]
  00065	eb 62		 jmp	 SHORT $LN13@calliter_t
$LN7@calliter_t:
$LN8@calliter_t:
  00067	33 c0		 xor	 eax, eax
  00069	85 c0		 test	 eax, eax
  0006b	75 a6		 jne	 SHORT $LN12@calliter_t
$LN6@calliter_t:

; 194  :     Py_VISIT(it->it_sentinel);

  0006d	e8 00 00 00 00	 call	 _Py_PXCTX
  00072	85 c0		 test	 eax, eax
  00074	74 1c		 je	 SHORT $LN3@calliter_t
  00076	45 33 c9	 xor	 r9d, r9d
  00079	41 b8 c2 00 00
	00		 mov	 r8d, 194		; 000000c2H
  0007f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@INEGDJAC@?4?4?2Objects?2iterobject?4c?$AA@
  00086	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@JDHNDEGJ@calliter_traverse?$AA@
  0008d	e8 00 00 00 00	 call	 _PyParallel_ContextGuardFailure
$LN3@calliter_t:
  00092	48 8b 44 24 40	 mov	 rax, QWORD PTR it$[rsp]
  00097	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  0009c	74 23		 je	 SHORT $LN2@calliter_t
  0009e	48 8b 54 24 50	 mov	 rdx, QWORD PTR arg$[rsp]
  000a3	48 8b 44 24 40	 mov	 rax, QWORD PTR it$[rsp]
  000a8	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  000ac	ff 54 24 48	 call	 QWORD PTR visit$[rsp]
  000b0	89 44 24 24	 mov	 DWORD PTR vret$20510[rsp], eax
  000b4	83 7c 24 24 00	 cmp	 DWORD PTR vret$20510[rsp], 0
  000b9	74 06		 je	 SHORT $LN1@calliter_t
  000bb	8b 44 24 24	 mov	 eax, DWORD PTR vret$20510[rsp]
  000bf	eb 08		 jmp	 SHORT $LN13@calliter_t
$LN1@calliter_t:
$LN2@calliter_t:
  000c1	33 c0		 xor	 eax, eax
  000c3	85 c0		 test	 eax, eax
  000c5	75 a6		 jne	 SHORT $LN6@calliter_t

; 195  :     return 0;

  000c7	33 c0		 xor	 eax, eax
$LN13@calliter_t:

; 196  : }

  000c9	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000cd	c3		 ret	 0
calliter_traverse ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BC@ICNBGMAL@calliter_iternext?$AA@	; `string'
EXTRN	PyObject_RichCompareBool:PROC
EXTRN	PyObject_Call:PROC
EXTRN	PyTuple_New:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$calliter_iternext DD imagerel calliter_iternext
	DD	imagerel calliter_iternext+666
	DD	imagerel $unwind$calliter_iternext
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$calliter_iternext DD 010901H
	DD	0e209H
xdata	ENDS
;	COMDAT ??_C@_0BC@ICNBGMAL@calliter_iternext?$AA@
CONST	SEGMENT
??_C@_0BC@ICNBGMAL@calliter_iternext?$AA@ DB 'calliter_iternext', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT calliter_iternext
_TEXT	SEGMENT
args$20519 = 48
result$20520 = 56
ok$20528 = 64
_py_tmp$20537 = 72
_py_tmp$20545 = 80
_py_tmp$20555 = 88
_py_tmp$20563 = 96
it$ = 128
calliter_iternext PROC					; COMDAT

; 200  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 201  :     if (it->it_callable != NULL) {

  00009	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR it$[rsp]
  00011	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00016	0f 84 77 02 00
	00		 je	 $LN23@calliter_i

; 202  :         PyObject *args = PyTuple_New(0);

  0001c	33 c9		 xor	 ecx, ecx
  0001e	e8 00 00 00 00	 call	 PyTuple_New
  00023	48 89 44 24 30	 mov	 QWORD PTR args$20519[rsp], rax

; 203  :         PyObject *result;
; 204  :         if (args == NULL)

  00028	48 83 7c 24 30
	00		 cmp	 QWORD PTR args$20519[rsp], 0
  0002e	75 07		 jne	 SHORT $LN22@calliter_i

; 205  :             return NULL;

  00030	33 c0		 xor	 eax, eax
  00032	e9 5e 02 00 00	 jmp	 $LN24@calliter_i
$LN22@calliter_i:

; 206  :         result = PyObject_Call(it->it_callable, args, NULL);

  00037	45 33 c0	 xor	 r8d, r8d
  0003a	48 8b 54 24 30	 mov	 rdx, QWORD PTR args$20519[rsp]
  0003f	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR it$[rsp]
  00047	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  0004b	e8 00 00 00 00	 call	 PyObject_Call
  00050	48 89 44 24 38	 mov	 QWORD PTR result$20520[rsp], rax

; 207  :         Py_DECREF(args);

  00055	48 8b 4c 24 30	 mov	 rcx, QWORD PTR args$20519[rsp]
  0005a	e8 00 00 00 00	 call	 _Py_DecRef

; 208  :         if (result != NULL) {

  0005f	48 83 7c 24 38
	00		 cmp	 QWORD PTR result$20520[rsp], 0
  00065	0f 84 2d 01 00
	00		 je	 $LN21@calliter_i

; 209  :             int ok;
; 210  :             ok = PyObject_RichCompareBool(it->it_sentinel, result, Py_EQ);               

  0006b	41 b8 02 00 00
	00		 mov	 r8d, 2
  00071	48 8b 54 24 38	 mov	 rdx, QWORD PTR result$20520[rsp]
  00076	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR it$[rsp]
  0007e	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  00082	e8 00 00 00 00	 call	 PyObject_RichCompareBool
  00087	89 44 24 40	 mov	 DWORD PTR ok$20528[rsp], eax

; 211  :             if (ok == 0)

  0008b	83 7c 24 40 00	 cmp	 DWORD PTR ok$20528[rsp], 0
  00090	75 0a		 jne	 SHORT $LN20@calliter_i

; 212  :                 return result; /* Common case, fast path */

  00092	48 8b 44 24 38	 mov	 rax, QWORD PTR result$20520[rsp]
  00097	e9 f9 01 00 00	 jmp	 $LN24@calliter_i
$LN20@calliter_i:

; 213  :             Py_DECREF(result);

  0009c	48 8b 4c 24 38	 mov	 rcx, QWORD PTR result$20520[rsp]
  000a1	e8 00 00 00 00	 call	 _Py_DecRef

; 214  :             if (ok > 0) {

  000a6	83 7c 24 40 00	 cmp	 DWORD PTR ok$20528[rsp], 0
  000ab	0f 8e e2 00 00
	00		 jle	 $LN19@calliter_i
$LN18@calliter_i:

; 215  :                 Py_CLEAR(it->it_callable);

  000b1	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR it$[rsp]
  000b9	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  000be	74 5c		 je	 SHORT $LN15@calliter_i
  000c0	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000c8	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR it$[rsp]
  000d0	4c 8b 48 60	 mov	 r9, QWORD PTR [rax+96]
  000d4	41 b8 d7 00 00
	00		 mov	 r8d, 215		; 000000d7H
  000da	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@INEGDJAC@?4?4?2Objects?2iterobject?4c?$AA@
  000e1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@ICNBGMAL@calliter_iternext?$AA@
  000e8	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ed	85 c0		 test	 eax, eax
  000ef	75 2b		 jne	 SHORT $LN15@calliter_i
  000f1	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR it$[rsp]
  000f9	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  000fd	48 89 44 24 48	 mov	 QWORD PTR _py_tmp$20537[rsp], rax
  00102	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR it$[rsp]
  0010a	48 c7 40 60 00
	00 00 00	 mov	 QWORD PTR [rax+96], 0
  00112	48 8b 4c 24 48	 mov	 rcx, QWORD PTR _py_tmp$20537[rsp]
  00117	e8 00 00 00 00	 call	 _Py_DecRef
$LN15@calliter_i:
  0011c	33 c0		 xor	 eax, eax
  0011e	85 c0		 test	 eax, eax
  00120	75 8f		 jne	 SHORT $LN18@calliter_i
$LN14@calliter_i:

; 216  :                 Py_CLEAR(it->it_sentinel);

  00122	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR it$[rsp]
  0012a	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  0012f	74 5c		 je	 SHORT $LN11@calliter_i
  00131	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00139	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR it$[rsp]
  00141	4c 8b 48 68	 mov	 r9, QWORD PTR [rax+104]
  00145	41 b8 d8 00 00
	00		 mov	 r8d, 216		; 000000d8H
  0014b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@INEGDJAC@?4?4?2Objects?2iterobject?4c?$AA@
  00152	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@ICNBGMAL@calliter_iternext?$AA@
  00159	e8 00 00 00 00	 call	 _PyParallel_Guard
  0015e	85 c0		 test	 eax, eax
  00160	75 2b		 jne	 SHORT $LN11@calliter_i
  00162	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR it$[rsp]
  0016a	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0016e	48 89 44 24 50	 mov	 QWORD PTR _py_tmp$20545[rsp], rax
  00173	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR it$[rsp]
  0017b	48 c7 40 68 00
	00 00 00	 mov	 QWORD PTR [rax+104], 0
  00183	48 8b 4c 24 50	 mov	 rcx, QWORD PTR _py_tmp$20545[rsp]
  00188	e8 00 00 00 00	 call	 _Py_DecRef
$LN11@calliter_i:
  0018d	33 c0		 xor	 eax, eax
  0018f	85 c0		 test	 eax, eax
  00191	75 8f		 jne	 SHORT $LN14@calliter_i
$LN19@calliter_i:

; 217  :             }

  00193	e9 fb 00 00 00	 jmp	 $LN10@calliter_i
$LN21@calliter_i:

; 218  :         }
; 219  :         else if (PyErr_ExceptionMatches(PyExc_StopIteration)) {

  00198	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_StopIteration
  0019f	e8 00 00 00 00	 call	 PyErr_ExceptionMatches
  001a4	85 c0		 test	 eax, eax
  001a6	0f 84 e7 00 00
	00		 je	 $LN9@calliter_i

; 220  :             PyErr_Clear();

  001ac	e8 00 00 00 00	 call	 PyErr_Clear
$LN8@calliter_i:

; 221  :             Py_CLEAR(it->it_callable);

  001b1	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR it$[rsp]
  001b9	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  001be	74 5c		 je	 SHORT $LN5@calliter_i
  001c0	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  001c8	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR it$[rsp]
  001d0	4c 8b 48 60	 mov	 r9, QWORD PTR [rax+96]
  001d4	41 b8 dd 00 00
	00		 mov	 r8d, 221		; 000000ddH
  001da	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@INEGDJAC@?4?4?2Objects?2iterobject?4c?$AA@
  001e1	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@ICNBGMAL@calliter_iternext?$AA@
  001e8	e8 00 00 00 00	 call	 _PyParallel_Guard
  001ed	85 c0		 test	 eax, eax
  001ef	75 2b		 jne	 SHORT $LN5@calliter_i
  001f1	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR it$[rsp]
  001f9	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  001fd	48 89 44 24 58	 mov	 QWORD PTR _py_tmp$20555[rsp], rax
  00202	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR it$[rsp]
  0020a	48 c7 40 60 00
	00 00 00	 mov	 QWORD PTR [rax+96], 0
  00212	48 8b 4c 24 58	 mov	 rcx, QWORD PTR _py_tmp$20555[rsp]
  00217	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@calliter_i:
  0021c	33 c0		 xor	 eax, eax
  0021e	85 c0		 test	 eax, eax
  00220	75 8f		 jne	 SHORT $LN8@calliter_i
$LN4@calliter_i:

; 222  :             Py_CLEAR(it->it_sentinel);

  00222	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR it$[rsp]
  0022a	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  0022f	74 5c		 je	 SHORT $LN1@calliter_i
  00231	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  00239	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR it$[rsp]
  00241	4c 8b 48 68	 mov	 r9, QWORD PTR [rax+104]
  00245	41 b8 de 00 00
	00		 mov	 r8d, 222		; 000000deH
  0024b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BI@INEGDJAC@?4?4?2Objects?2iterobject?4c?$AA@
  00252	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0BC@ICNBGMAL@calliter_iternext?$AA@
  00259	e8 00 00 00 00	 call	 _PyParallel_Guard
  0025e	85 c0		 test	 eax, eax
  00260	75 2b		 jne	 SHORT $LN1@calliter_i
  00262	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR it$[rsp]
  0026a	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  0026e	48 89 44 24 60	 mov	 QWORD PTR _py_tmp$20563[rsp], rax
  00273	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR it$[rsp]
  0027b	48 c7 40 68 00
	00 00 00	 mov	 QWORD PTR [rax+104], 0
  00283	48 8b 4c 24 60	 mov	 rcx, QWORD PTR _py_tmp$20563[rsp]
  00288	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@calliter_i:
  0028d	33 c0		 xor	 eax, eax
  0028f	85 c0		 test	 eax, eax
  00291	75 8f		 jne	 SHORT $LN4@calliter_i
$LN9@calliter_i:
$LN10@calliter_i:
$LN23@calliter_i:

; 223  :         }
; 224  :     }
; 225  :     return NULL;

  00293	33 c0		 xor	 eax, eax
$LN24@calliter_i:

; 226  : }

  00295	48 83 c4 78	 add	 rsp, 120		; 00000078H
  00299	c3		 ret	 0
calliter_iternext ENDP
_TEXT	ENDS
PUBLIC	??_C@_05HGCJEMPI@N?$CIOO?$CJ?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$calliter_reduce DD imagerel calliter_reduce
	DD	imagerel calliter_reduce+114
	DD	imagerel $unwind$calliter_reduce
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$calliter_reduce DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT ??_C@_05HGCJEMPI@N?$CIOO?$CJ?$AA@
CONST	SEGMENT
??_C@_05HGCJEMPI@N?$CIOO?$CJ?$AA@ DB 'N(OO)', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT calliter_reduce
_TEXT	SEGMENT
it$ = 48
calliter_reduce PROC					; COMDAT

; 230  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 231  :     if (it->it_callable != NULL && it->it_sentinel != NULL)

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR it$[rsp]
  0000e	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00013	74 3d		 je	 SHORT $LN2@calliter_r
  00015	48 8b 44 24 30	 mov	 rax, QWORD PTR it$[rsp]
  0001a	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  0001f	74 31		 je	 SHORT $LN2@calliter_r

; 232  :         return Py_BuildValue("N(OO)", _PyObject_GetBuiltin("iter"),
; 233  :                              it->it_callable, it->it_sentinel);

  00021	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04BKLHDIKK@iter?$AA@
  00028	e8 00 00 00 00	 call	 _PyObject_GetBuiltin
  0002d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR it$[rsp]
  00032	4c 8b 49 68	 mov	 r9, QWORD PTR [rcx+104]
  00036	48 8b 4c 24 30	 mov	 rcx, QWORD PTR it$[rsp]
  0003b	4c 8b 41 60	 mov	 r8, QWORD PTR [rcx+96]
  0003f	48 8b d0	 mov	 rdx, rax
  00042	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05HGCJEMPI@N?$CIOO?$CJ?$AA@
  00049	e8 00 00 00 00	 call	 Py_BuildValue
  0004e	eb 1d		 jmp	 SHORT $LN3@calliter_r

; 234  :     else

  00050	eb 1b		 jmp	 SHORT $LN1@calliter_r
$LN2@calliter_r:

; 235  :         return Py_BuildValue("N(())", _PyObject_GetBuiltin("iter"));

  00052	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_04BKLHDIKK@iter?$AA@
  00059	e8 00 00 00 00	 call	 _PyObject_GetBuiltin
  0005e	48 8b d0	 mov	 rdx, rax
  00061	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_05JMICDENA@N?$CI?$CI?$CJ?$CJ?$AA@
  00068	e8 00 00 00 00	 call	 Py_BuildValue
$LN1@calliter_r:
$LN3@calliter_r:

; 236  : }

  0006d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00071	c3		 ret	 0
calliter_reduce ENDP
_TEXT	ENDS
END
