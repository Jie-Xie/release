; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0P@IPOAGGKK@symtable?5entry?$AA@		; `string'
PUBLIC	??_C@_06ILKIAHNN@lineno?$AA@			; `string'
PUBLIC	??_C@_04GPMDFGEJ@type?$AA@			; `string'
PUBLIC	??_C@_06PEIBIDGM@nested?$AA@			; `string'
PUBLIC	??_C@_09JBEJHDNF@optimized?$AA@			; `string'
PUBLIC	??_C@_08GOINNFB@children?$AA@			; `string'
PUBLIC	??_C@_08OIBHAMNO@varnames?$AA@			; `string'
PUBLIC	??_C@_07LAPAOEJA@symbols?$AA@			; `string'
PUBLIC	??_C@_04MEMAJGDJ@name?$AA@			; `string'
PUBLIC	??_C@_02EGCJHIOB@id?$AA@			; `string'
PUBLIC	PySTEntry_Type
EXTRN	PyObject_GenericGetAttr:PROC
EXTRN	PyType_Type:BYTE
_BSS	SEGMENT
top	DQ	01H DUP (?)
lambda	DQ	01H DUP (?)
genexpr	DQ	01H DUP (?)
listcomp DQ	01H DUP (?)
setcomp	DQ	01H DUP (?)
dictcomp DQ	01H DUP (?)
__class__ DQ	01H DUP (?)
__locals__ DQ	01H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_0P@IPOAGGKK@symtable?5entry?$AA@
CONST	SEGMENT
??_C@_0P@IPOAGGKK@symtable?5entry?$AA@ DB 'symtable entry', 00H ; `string'
CONST	ENDS
_DATA	SEGMENT
ste_memberlist DQ FLAT:??_C@_02EGCJHIOB@id?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000060H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_04MEMAJGDJ@name?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000070H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_07LAPAOEJA@symbols?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000068H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_08OIBHAMNO@varnames?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000078H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_08GOINNFB@children?$AA@
	DD	06H
	ORG $+4
	DQ	0000000000000080H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_09JBEJHDNF@optimized?$AA@
	DD	01H
	ORG $+4
	DQ	000000000000008cH
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_06PEIBIDGM@nested?$AA@
	DD	01H
	ORG $+4
	DQ	0000000000000090H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_04GPMDFGEJ@type?$AA@
	DD	01H
	ORG $+4
	DQ	0000000000000088H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	FLAT:??_C@_06ILKIAHNN@lineno?$AA@
	DD	01H
	ORG $+4
	DQ	0000000000000098H
	DD	01H
	ORG $+4
	ORG $+8
	DQ	0000000000000000H
	ORG $+32
PySTEntry_Type DQ dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	FLAT:PyType_Type
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_0P@IPOAGGKK@symtable?5entry?$AA@
	DQ	00000000000000c0H
	DQ	0000000000000000H
	DQ	FLAT:ste_dealloc
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:ste_repr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:PyObject_GenericGetAttr
	DQ	0000000000000000H
	DQ	0000000000000000H
	DD	040000H
	ORG $+4
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:ste_memberlist
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+72
_DATA	ENDS
;	COMDAT ??_C@_06ILKIAHNN@lineno?$AA@
CONST	SEGMENT
??_C@_06ILKIAHNN@lineno?$AA@ DB 'lineno', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04GPMDFGEJ@type?$AA@
CONST	SEGMENT
??_C@_04GPMDFGEJ@type?$AA@ DB 'type', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06PEIBIDGM@nested?$AA@
CONST	SEGMENT
??_C@_06PEIBIDGM@nested?$AA@ DB 'nested', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09JBEJHDNF@optimized?$AA@
CONST	SEGMENT
??_C@_09JBEJHDNF@optimized?$AA@ DB 'optimized', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08GOINNFB@children?$AA@
CONST	SEGMENT
??_C@_08GOINNFB@children?$AA@ DB 'children', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08OIBHAMNO@varnames?$AA@
CONST	SEGMENT
??_C@_08OIBHAMNO@varnames?$AA@ DB 'varnames', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07LAPAOEJA@symbols?$AA@
CONST	SEGMENT
??_C@_07LAPAOEJA@symbols?$AA@ DB 'symbols', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04MEMAJGDJ@name?$AA@
CONST	SEGMENT
??_C@_04MEMAJGDJ@name?$AA@ DB 'name', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02EGCJHIOB@id?$AA@
CONST	SEGMENT
??_C@_02EGCJHIOB@id?$AA@ DB 'id', 00H			; `string'
CONST	ENDS
PUBLIC	??_C@_0CC@MMMHNHK@?$DMsymtable?5entry?5?$CFU?$CI?$CFld?$CJ?0?5line?5?$CFd@ ; `string'
EXTRN	PyUnicode_FromFormat:PROC
EXTRN	PyLong_AsLong:PROC
;	COMDAT pdata
; File c:\src\pyparallel\python\symtable.c
pdata	SEGMENT
$pdata$ste_repr DD imagerel ste_repr
	DD	imagerel ste_repr+64
	DD	imagerel $unwind$ste_repr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ste_repr DD 010901H
	DD	04209H
xdata	ENDS
;	COMDAT ??_C@_0CC@MMMHNHK@?$DMsymtable?5entry?5?$CFU?$CI?$CFld?$CJ?0?5line?5?$CFd@
CONST	SEGMENT
??_C@_0CC@MMMHNHK@?$DMsymtable?5entry?5?$CFU?$CI?$CFld?$CJ?0?5line?5?$CFd@ DB '<'
	DB	'symtable entry %U(%ld), line %d>', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT ste_repr
_TEXT	SEGMENT
ste$ = 48
ste_repr PROC						; COMDAT

; 90   : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 91   :     return PyUnicode_FromFormat("<symtable entry %U(%ld), line %d>",
; 92   :                                 ste->ste_name,
; 93   :                                 PyLong_AS_LONG(ste->ste_id), ste->ste_lineno);

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR ste$[rsp]
  0000e	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  00012	e8 00 00 00 00	 call	 PyLong_AsLong
  00017	48 8b 4c 24 30	 mov	 rcx, QWORD PTR ste$[rsp]
  0001c	44 8b 89 98 00
	00 00		 mov	 r9d, DWORD PTR [rcx+152]
  00023	44 8b c0	 mov	 r8d, eax
  00026	48 8b 44 24 30	 mov	 rax, QWORD PTR ste$[rsp]
  0002b	48 8b 50 70	 mov	 rdx, QWORD PTR [rax+112]
  0002f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CC@MMMHNHK@?$DMsymtable?5entry?5?$CFU?$CI?$CFld?$CJ?0?5line?5?$CFd@
  00036	e8 00 00 00 00	 call	 PyUnicode_FromFormat

; 94   : }

  0003b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003f	c3		 ret	 0
ste_repr ENDP
_TEXT	ENDS
PUBLIC	_Py_DecRef
EXTRN	_PyObject_DebugFree:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$ste_dealloc DD imagerel ste_dealloc
	DD	imagerel ste_dealloc+206
	DD	imagerel $unwind$ste_dealloc
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ste_dealloc DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT ste_dealloc
_TEXT	SEGMENT
ste$ = 48
ste_dealloc PROC					; COMDAT

; 98   : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 99   :     ste->ste_table = NULL;

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR ste$[rsp]
  0000e	48 c7 80 b0 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+176], 0
$LN20@ste_deallo:

; 100  :     Py_XDECREF(ste->ste_id);

  00019	48 8b 44 24 30	 mov	 rax, QWORD PTR ste$[rsp]
  0001e	48 83 78 60 00	 cmp	 QWORD PTR [rax+96], 0
  00023	74 0e		 je	 SHORT $LN17@ste_deallo
  00025	48 8b 44 24 30	 mov	 rax, QWORD PTR ste$[rsp]
  0002a	48 8b 48 60	 mov	 rcx, QWORD PTR [rax+96]
  0002e	e8 00 00 00 00	 call	 _Py_DecRef
$LN17@ste_deallo:
  00033	33 c0		 xor	 eax, eax
  00035	85 c0		 test	 eax, eax
  00037	75 e0		 jne	 SHORT $LN20@ste_deallo
$LN16@ste_deallo:

; 101  :     Py_XDECREF(ste->ste_name);

  00039	48 8b 44 24 30	 mov	 rax, QWORD PTR ste$[rsp]
  0003e	48 83 78 70 00	 cmp	 QWORD PTR [rax+112], 0
  00043	74 0e		 je	 SHORT $LN13@ste_deallo
  00045	48 8b 44 24 30	 mov	 rax, QWORD PTR ste$[rsp]
  0004a	48 8b 48 70	 mov	 rcx, QWORD PTR [rax+112]
  0004e	e8 00 00 00 00	 call	 _Py_DecRef
$LN13@ste_deallo:
  00053	33 c0		 xor	 eax, eax
  00055	85 c0		 test	 eax, eax
  00057	75 e0		 jne	 SHORT $LN16@ste_deallo
$LN12@ste_deallo:

; 102  :     Py_XDECREF(ste->ste_symbols);

  00059	48 8b 44 24 30	 mov	 rax, QWORD PTR ste$[rsp]
  0005e	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  00063	74 0e		 je	 SHORT $LN9@ste_deallo
  00065	48 8b 44 24 30	 mov	 rax, QWORD PTR ste$[rsp]
  0006a	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  0006e	e8 00 00 00 00	 call	 _Py_DecRef
$LN9@ste_deallo:
  00073	33 c0		 xor	 eax, eax
  00075	85 c0		 test	 eax, eax
  00077	75 e0		 jne	 SHORT $LN12@ste_deallo
$LN8@ste_deallo:

; 103  :     Py_XDECREF(ste->ste_varnames);

  00079	48 8b 44 24 30	 mov	 rax, QWORD PTR ste$[rsp]
  0007e	48 83 78 78 00	 cmp	 QWORD PTR [rax+120], 0
  00083	74 0e		 je	 SHORT $LN5@ste_deallo
  00085	48 8b 44 24 30	 mov	 rax, QWORD PTR ste$[rsp]
  0008a	48 8b 48 78	 mov	 rcx, QWORD PTR [rax+120]
  0008e	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@ste_deallo:
  00093	33 c0		 xor	 eax, eax
  00095	85 c0		 test	 eax, eax
  00097	75 e0		 jne	 SHORT $LN8@ste_deallo
$LN4@ste_deallo:

; 104  :     Py_XDECREF(ste->ste_children);

  00099	48 8b 44 24 30	 mov	 rax, QWORD PTR ste$[rsp]
  0009e	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  000a6	74 11		 je	 SHORT $LN1@ste_deallo
  000a8	48 8b 44 24 30	 mov	 rax, QWORD PTR ste$[rsp]
  000ad	48 8b 88 80 00
	00 00		 mov	 rcx, QWORD PTR [rax+128]
  000b4	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@ste_deallo:
  000b9	33 c0		 xor	 eax, eax
  000bb	85 c0		 test	 eax, eax
  000bd	75 da		 jne	 SHORT $LN4@ste_deallo

; 105  :     PyObject_Del(ste);

  000bf	48 8b 4c 24 30	 mov	 rcx, QWORD PTR ste$[rsp]
  000c4	e8 00 00 00 00	 call	 _PyObject_DebugFree

; 106  : }

  000c9	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000cd	c3		 ret	 0
ste_dealloc ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
EXTRN	_Py_Dealloc:PROC
EXTRN	_Py_NegativeRefcount:PROC
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_RefTotal:QWORD
EXTRN	Px_DecRef:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN13
	DD	imagerel $LN13+257
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
tv81 = 48
op$ = 80
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN13:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	0f 85 e6 00 00
	00		 jne	 $LN8@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00016	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0001b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0001f	48 83 e0 20	 and	 rax, 32			; 00000020H
  00023	48 85 c0	 test	 rax, rax
  00026	75 14		 jne	 SHORT $LN6@Py_DecRef
  00028	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0002d	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00031	48 25 80 00 00
	00		 and	 rax, 128		; 00000080H
  00037	48 85 c0	 test	 rax, rax
  0003a	74 0f		 je	 SHORT $LN7@Py_DecRef
$LN6@Py_DecRef:

; 926  :             Px_DECREF(op);

  0003c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  00041	e8 00 00 00 00	 call	 Px_DecRef
  00046	e9 b1 00 00 00	 jmp	 $LN5@Py_DecRef
$LN7@Py_DecRef:

; 927  :         else if (!Px_ISPX(op)) {

  0004b	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00050	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00054	48 83 e0 02	 and	 rax, 2
  00058	48 85 c0	 test	 rax, rax
  0005b	0f 85 9b 00 00
	00		 jne	 $LN4@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;

  00061	e8 00 00 00 00	 call	 _Py_PXCTX
  00066	85 c0		 test	 eax, eax
  00068	74 02		 je	 SHORT $LN11@Py_DecRef
  0006a	eb 11		 jmp	 SHORT $LN12@Py_DecRef
$LN11@Py_DecRef:
  0006c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00073	48 ff c8	 dec	 rax
  00076	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN12@Py_DecRef:

; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  0007d	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00082	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00086	48 ff c8	 dec	 rax
  00089	48 89 44 24 30	 mov	 QWORD PTR tv81[rsp], rax
  0008e	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00093	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv81[rsp]
  00098	48 89 48 50	 mov	 QWORD PTR [rax+80], rcx
  0009c	48 83 7c 24 30
	00		 cmp	 QWORD PTR tv81[rsp], 0
  000a2	74 4e		 je	 SHORT $LN3@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);

  000a4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000ac	4c 8b 4c 24 50	 mov	 r9, QWORD PTR op$[rsp]
  000b1	41 b8 a2 03 00
	00		 mov	 r8d, 930		; 000003a2H
  000b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000c5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ca	85 c0		 test	 eax, eax
  000cc	75 22		 jne	 SHORT $LN2@Py_DecRef
  000ce	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  000d3	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000d8	7d 16		 jge	 SHORT $LN2@Py_DecRef
  000da	4c 8b 44 24 50	 mov	 r8, QWORD PTR op$[rsp]
  000df	ba a2 03 00 00	 mov	 edx, 930		; 000003a2H
  000e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000eb	e8 00 00 00 00	 call	 _Py_NegativeRefcount
$LN2@Py_DecRef:

; 931  :             } else

  000f0	eb 0a		 jmp	 SHORT $LN1@Py_DecRef
$LN3@Py_DecRef:

; 932  :                 _Py_Dealloc((PyObject *)(op));

  000f2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  000f7	e8 00 00 00 00	 call	 _Py_Dealloc
$LN1@Py_DecRef:
$LN4@Py_DecRef:
$LN5@Py_DecRef:
$LN8@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  000fc	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00100	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CF@NANCJFEE@this?5compiler?5does?5not?5handle?5Su@ ; `string'
PUBLIC	??_C@_03FGFCOCMD@top?$AA@			; `string'
PUBLIC	PySymtable_Free
PUBLIC	PySymtable_Build
EXTRN	PyErr_SetString:PROC
EXTRN	PyExc_RuntimeError:QWORD
EXTRN	PyUnicode_InternFromString:PROC
EXTRN	PyThreadState_Get:PROC
EXTRN	Py_GetRecursionLimit:PROC
;	COMDAT pdata
; File c:\src\pyparallel\python\symtable.c
pdata	SEGMENT
$pdata$PySymtable_Build DD imagerel $LN34
	DD	imagerel $LN34+856
	DD	imagerel $unwind$PySymtable_Build
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PySymtable_Build DD 021601H
	DD	0110116H
xdata	ENDS
;	COMDAT ??_C@_0CF@NANCJFEE@this?5compiler?5does?5not?5handle?5Su@
CONST	SEGMENT
??_C@_0CF@NANCJFEE@this?5compiler?5does?5not?5handle?5Su@ DB 'this compil'
	DB	'er does not handle Suites', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03FGFCOCMD@top?$AA@
CONST	SEGMENT
??_C@_03FGFCOCMD@top?$AA@ DB 'top', 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PySymtable_Build
_TEXT	SEGMENT
i$ = 48
tstate$ = 56
st$ = 64
seq$ = 72
recursion_limit$ = 80
tv77 = 84
tv81 = 88
tv85 = 96
tv132 = 104
tv137 = 112
tv156 = 120
mod$ = 144
filename$ = 152
future$ = 160
PySymtable_Build PROC					; COMDAT

; 237  : {

$LN34:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 81 ec 88 00
	00 00		 sub	 rsp, 136		; 00000088H

; 238  :     struct symtable *st = symtable_new();

  00016	e8 00 00 00 00	 call	 symtable_new
  0001b	48 89 44 24 40	 mov	 QWORD PTR st$[rsp], rax

; 239  :     asdl_seq *seq;
; 240  :     int i;
; 241  :     PyThreadState *tstate;
; 242  :     int recursion_limit = Py_GetRecursionLimit();

  00020	e8 00 00 00 00	 call	 Py_GetRecursionLimit
  00025	89 44 24 50	 mov	 DWORD PTR recursion_limit$[rsp], eax

; 243  : 
; 244  :     if (st == NULL)

  00029	48 83 7c 24 40
	00		 cmp	 QWORD PTR st$[rsp], 0
  0002f	75 0a		 jne	 SHORT $LN21@PySymtable

; 245  :         return st;

  00031	48 8b 44 24 40	 mov	 rax, QWORD PTR st$[rsp]
  00036	e9 15 03 00 00	 jmp	 $LN22@PySymtable
$LN21@PySymtable:

; 246  :     st->st_filename = filename;

  0003b	48 8b 44 24 40	 mov	 rax, QWORD PTR st$[rsp]
  00040	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR filename$[rsp]
  00048	48 89 08	 mov	 QWORD PTR [rax], rcx

; 247  :     st->st_future = future;

  0004b	48 8b 44 24 40	 mov	 rax, QWORD PTR st$[rsp]
  00050	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR future$[rsp]
  00058	48 89 48 40	 mov	 QWORD PTR [rax+64], rcx

; 248  : 
; 249  :     /* Setup recursion depth check counters */
; 250  :     tstate = PyThreadState_GET();

  0005c	e8 00 00 00 00	 call	 PyThreadState_Get
  00061	48 89 44 24 38	 mov	 QWORD PTR tstate$[rsp], rax

; 251  :     if (!tstate) {

  00066	48 83 7c 24 38
	00		 cmp	 QWORD PTR tstate$[rsp], 0
  0006c	75 11		 jne	 SHORT $LN20@PySymtable

; 252  :         PySymtable_Free(st);

  0006e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR st$[rsp]
  00073	e8 00 00 00 00	 call	 PySymtable_Free

; 253  :         return NULL;

  00078	33 c0		 xor	 eax, eax
  0007a	e9 d1 02 00 00	 jmp	 $LN22@PySymtable
$LN20@PySymtable:

; 254  :     }
; 255  :     /* Be careful here to prevent overflow. */
; 256  :     st->recursion_depth = (tstate->recursion_depth < INT_MAX / COMPILER_STACK_FRAME_SCALE) ?
; 257  :         tstate->recursion_depth * COMPILER_STACK_FRAME_SCALE : tstate->recursion_depth;

  0007f	48 8b 44 24 38	 mov	 rax, QWORD PTR tstate$[rsp]
  00084	81 78 18 aa aa
	aa 2a		 cmp	 DWORD PTR [rax+24], 715827882 ; 2aaaaaaaH
  0008b	7d 11		 jge	 SHORT $LN24@PySymtable
  0008d	48 8b 44 24 38	 mov	 rax, QWORD PTR tstate$[rsp]
  00092	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  00095	6b c0 03	 imul	 eax, 3
  00098	89 44 24 54	 mov	 DWORD PTR tv77[rsp], eax
  0009c	eb 0c		 jmp	 SHORT $LN25@PySymtable
$LN24@PySymtable:
  0009e	48 8b 44 24 38	 mov	 rax, QWORD PTR tstate$[rsp]
  000a3	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  000a6	89 44 24 54	 mov	 DWORD PTR tv77[rsp], eax
$LN25@PySymtable:
  000aa	48 8b 44 24 40	 mov	 rax, QWORD PTR st$[rsp]
  000af	8b 4c 24 54	 mov	 ecx, DWORD PTR tv77[rsp]
  000b3	89 48 48	 mov	 DWORD PTR [rax+72], ecx

; 258  :     st->recursion_limit = (recursion_limit < INT_MAX / COMPILER_STACK_FRAME_SCALE) ?
; 259  :         recursion_limit * COMPILER_STACK_FRAME_SCALE : recursion_limit;

  000b6	81 7c 24 50 aa
	aa aa 2a	 cmp	 DWORD PTR recursion_limit$[rsp], 715827882 ; 2aaaaaaaH
  000be	7d 0d		 jge	 SHORT $LN26@PySymtable
  000c0	8b 44 24 50	 mov	 eax, DWORD PTR recursion_limit$[rsp]
  000c4	6b c0 03	 imul	 eax, 3
  000c7	89 44 24 58	 mov	 DWORD PTR tv81[rsp], eax
  000cb	eb 08		 jmp	 SHORT $LN27@PySymtable
$LN26@PySymtable:
  000cd	8b 44 24 50	 mov	 eax, DWORD PTR recursion_limit$[rsp]
  000d1	89 44 24 58	 mov	 DWORD PTR tv81[rsp], eax
$LN27@PySymtable:
  000d5	48 8b 44 24 40	 mov	 rax, QWORD PTR st$[rsp]
  000da	8b 4c 24 58	 mov	 ecx, DWORD PTR tv81[rsp]
  000de	89 48 4c	 mov	 DWORD PTR [rax+76], ecx

; 260  : 
; 261  :     /* Make the initial symbol information gathering pass */
; 262  :     if (!GET_IDENTIFIER(top) ||
; 263  :         !symtable_enter_block(st, top, ModuleBlock, (void *)mod, 0, 0)) {

  000e1	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR top, 0
  000e9	74 0e		 je	 SHORT $LN28@PySymtable
  000eb	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR top
  000f2	48 89 44 24 60	 mov	 QWORD PTR tv85[rsp], rax
  000f7	eb 1f		 jmp	 SHORT $LN29@PySymtable
$LN28@PySymtable:
  000f9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03FGFCOCMD@top?$AA@
  00100	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  00105	48 89 05 00 00
	00 00		 mov	 QWORD PTR top, rax
  0010c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR top
  00113	48 89 44 24 60	 mov	 QWORD PTR tv85[rsp], rax
$LN29@PySymtable:
  00118	48 83 7c 24 60
	00		 cmp	 QWORD PTR tv85[rsp], 0
  0011e	74 33		 je	 SHORT $LN18@PySymtable
  00120	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  00128	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR [rsp+32], 0
  00130	4c 8b 8c 24 90
	00 00 00	 mov	 r9, QWORD PTR mod$[rsp]
  00138	41 b8 02 00 00
	00		 mov	 r8d, 2
  0013e	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR top
  00145	48 8b 4c 24 40	 mov	 rcx, QWORD PTR st$[rsp]
  0014a	e8 00 00 00 00	 call	 symtable_enter_block
  0014f	85 c0		 test	 eax, eax
  00151	75 11		 jne	 SHORT $LN19@PySymtable
$LN18@PySymtable:

; 264  :         PySymtable_Free(st);

  00153	48 8b 4c 24 40	 mov	 rcx, QWORD PTR st$[rsp]
  00158	e8 00 00 00 00	 call	 PySymtable_Free

; 265  :         return NULL;

  0015d	33 c0		 xor	 eax, eax
  0015f	e9 ec 01 00 00	 jmp	 $LN22@PySymtable
$LN19@PySymtable:

; 266  :     }
; 267  : 
; 268  :     st->st_top = st->st_cur;

  00164	48 8b 44 24 40	 mov	 rax, QWORD PTR st$[rsp]
  00169	48 8b 4c 24 40	 mov	 rcx, QWORD PTR st$[rsp]
  0016e	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00172	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 269  :     st->st_cur->ste_unoptimized = OPT_TOPLEVEL;

  00176	48 8b 44 24 40	 mov	 rax, QWORD PTR st$[rsp]
  0017b	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0017f	c7 80 8c 00 00
	00 02 00 00 00	 mov	 DWORD PTR [rax+140], 2

; 270  :     switch (mod->kind) {

  00189	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR mod$[rsp]
  00191	8b 00		 mov	 eax, DWORD PTR [rax]
  00193	89 44 24 68	 mov	 DWORD PTR tv132[rsp], eax
  00197	83 7c 24 68 01	 cmp	 DWORD PTR tv132[rsp], 1
  0019c	74 26		 je	 SHORT $LN15@PySymtable
  0019e	83 7c 24 68 02	 cmp	 DWORD PTR tv132[rsp], 2
  001a3	0f 84 b9 00 00
	00		 je	 $LN8@PySymtable
  001a9	83 7c 24 68 03	 cmp	 DWORD PTR tv132[rsp], 3
  001ae	0f 84 8a 00 00
	00		 je	 $LN10@PySymtable
  001b4	83 7c 24 68 04	 cmp	 DWORD PTR tv132[rsp], 4
  001b9	0f 84 17 01 00
	00		 je	 $LN3@PySymtable
  001bf	e9 27 01 00 00	 jmp	 $LN16@PySymtable
$LN15@PySymtable:

; 271  :     case Module_kind:
; 272  :         seq = mod->v.Module.body;

  001c4	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR mod$[rsp]
  001cc	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  001d0	48 89 44 24 48	 mov	 QWORD PTR seq$[rsp], rax

; 273  :         for (i = 0; i < asdl_seq_LEN(seq); i++)

  001d5	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  001dd	eb 0a		 jmp	 SHORT $LN14@PySymtable
$LN13@PySymtable:
  001df	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  001e3	ff c0		 inc	 eax
  001e5	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN14@PySymtable:
  001e9	48 83 7c 24 48
	00		 cmp	 QWORD PTR seq$[rsp], 0
  001ef	75 0b		 jne	 SHORT $LN30@PySymtable
  001f1	48 c7 44 24 70
	00 00 00 00	 mov	 QWORD PTR tv137[rsp], 0
  001fa	eb 0d		 jmp	 SHORT $LN31@PySymtable
$LN30@PySymtable:
  001fc	48 8b 44 24 48	 mov	 rax, QWORD PTR seq$[rsp]
  00201	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00204	48 89 44 24 70	 mov	 QWORD PTR tv137[rsp], rax
$LN31@PySymtable:
  00209	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$[rsp]
  0020e	48 3b 44 24 70	 cmp	 rax, QWORD PTR tv137[rsp]
  00213	7d 24		 jge	 SHORT $LN12@PySymtable

; 274  :             if (!symtable_visit_stmt(st,
; 275  :                         (stmt_ty)asdl_seq_GET(seq, i)))

  00215	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$[rsp]
  0021a	48 8b 4c 24 48	 mov	 rcx, QWORD PTR seq$[rsp]
  0021f	48 8b 54 c1 08	 mov	 rdx, QWORD PTR [rcx+rax*8+8]
  00224	48 8b 4c 24 40	 mov	 rcx, QWORD PTR st$[rsp]
  00229	e8 00 00 00 00	 call	 symtable_visit_stmt
  0022e	85 c0		 test	 eax, eax
  00230	75 05		 jne	 SHORT $LN11@PySymtable

; 276  :                 goto error;

  00232	e9 fb 00 00 00	 jmp	 $error$21821
$LN11@PySymtable:

; 277  :         break;

  00237	eb a6		 jmp	 SHORT $LN13@PySymtable
$LN12@PySymtable:
  00239	e9 ad 00 00 00	 jmp	 $LN16@PySymtable
$LN10@PySymtable:

; 278  :     case Expression_kind:
; 279  :         if (!symtable_visit_expr(st, mod->v.Expression.body))

  0023e	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR mod$[rsp]
  00246	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  0024a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR st$[rsp]
  0024f	e8 00 00 00 00	 call	 symtable_visit_expr
  00254	85 c0		 test	 eax, eax
  00256	75 05		 jne	 SHORT $LN9@PySymtable

; 280  :             goto error;

  00258	e9 d5 00 00 00	 jmp	 $error$21821
$LN9@PySymtable:

; 281  :         break;

  0025d	e9 89 00 00 00	 jmp	 $LN16@PySymtable
$LN8@PySymtable:

; 282  :     case Interactive_kind:
; 283  :         seq = mod->v.Interactive.body;

  00262	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR mod$[rsp]
  0026a	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0026e	48 89 44 24 48	 mov	 QWORD PTR seq$[rsp], rax

; 284  :         for (i = 0; i < asdl_seq_LEN(seq); i++)

  00273	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  0027b	eb 0a		 jmp	 SHORT $LN7@PySymtable
$LN6@PySymtable:
  0027d	8b 44 24 30	 mov	 eax, DWORD PTR i$[rsp]
  00281	ff c0		 inc	 eax
  00283	89 44 24 30	 mov	 DWORD PTR i$[rsp], eax
$LN7@PySymtable:
  00287	48 83 7c 24 48
	00		 cmp	 QWORD PTR seq$[rsp], 0
  0028d	75 0b		 jne	 SHORT $LN32@PySymtable
  0028f	48 c7 44 24 78
	00 00 00 00	 mov	 QWORD PTR tv156[rsp], 0
  00298	eb 0d		 jmp	 SHORT $LN33@PySymtable
$LN32@PySymtable:
  0029a	48 8b 44 24 48	 mov	 rax, QWORD PTR seq$[rsp]
  0029f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  002a2	48 89 44 24 78	 mov	 QWORD PTR tv156[rsp], rax
$LN33@PySymtable:
  002a7	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$[rsp]
  002ac	48 3b 44 24 78	 cmp	 rax, QWORD PTR tv156[rsp]
  002b1	7d 21		 jge	 SHORT $LN5@PySymtable

; 285  :             if (!symtable_visit_stmt(st,
; 286  :                         (stmt_ty)asdl_seq_GET(seq, i)))

  002b3	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$[rsp]
  002b8	48 8b 4c 24 48	 mov	 rcx, QWORD PTR seq$[rsp]
  002bd	48 8b 54 c1 08	 mov	 rdx, QWORD PTR [rcx+rax*8+8]
  002c2	48 8b 4c 24 40	 mov	 rcx, QWORD PTR st$[rsp]
  002c7	e8 00 00 00 00	 call	 symtable_visit_stmt
  002cc	85 c0		 test	 eax, eax
  002ce	75 02		 jne	 SHORT $LN4@PySymtable

; 287  :                 goto error;

  002d0	eb 60		 jmp	 SHORT $error$21821
$LN4@PySymtable:

; 288  :         break;

  002d2	eb a9		 jmp	 SHORT $LN6@PySymtable
$LN5@PySymtable:
  002d4	eb 15		 jmp	 SHORT $LN16@PySymtable
$LN3@PySymtable:

; 289  :     case Suite_kind:
; 290  :         PyErr_SetString(PyExc_RuntimeError,
; 291  :                         "this compiler does not handle Suites");

  002d6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CF@NANCJFEE@this?5compiler?5does?5not?5handle?5Su@
  002dd	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeError
  002e4	e8 00 00 00 00	 call	 PyErr_SetString

; 292  :         goto error;

  002e9	eb 47		 jmp	 SHORT $error$21821
$LN16@PySymtable:

; 293  :     }
; 294  :     if (!symtable_exit_block(st, (void *)mod)) {

  002eb	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR mod$[rsp]
  002f3	48 8b 4c 24 40	 mov	 rcx, QWORD PTR st$[rsp]
  002f8	e8 00 00 00 00	 call	 symtable_exit_block
  002fd	85 c0		 test	 eax, eax
  002ff	75 0e		 jne	 SHORT $LN2@PySymtable

; 295  :         PySymtable_Free(st);

  00301	48 8b 4c 24 40	 mov	 rcx, QWORD PTR st$[rsp]
  00306	e8 00 00 00 00	 call	 PySymtable_Free

; 296  :         return NULL;

  0030b	33 c0		 xor	 eax, eax
  0030d	eb 41		 jmp	 SHORT $LN22@PySymtable
$LN2@PySymtable:

; 297  :     }
; 298  :     /* Make the second symbol analysis pass */
; 299  :     if (symtable_analyze(st))

  0030f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR st$[rsp]
  00314	e8 00 00 00 00	 call	 symtable_analyze
  00319	85 c0		 test	 eax, eax
  0031b	74 07		 je	 SHORT $LN1@PySymtable

; 300  :         return st;

  0031d	48 8b 44 24 40	 mov	 rax, QWORD PTR st$[rsp]
  00322	eb 2c		 jmp	 SHORT $LN22@PySymtable
$LN1@PySymtable:

; 301  :     PySymtable_Free(st);

  00324	48 8b 4c 24 40	 mov	 rcx, QWORD PTR st$[rsp]
  00329	e8 00 00 00 00	 call	 PySymtable_Free

; 302  :     return NULL;

  0032e	33 c0		 xor	 eax, eax
  00330	eb 1e		 jmp	 SHORT $LN22@PySymtable
$error$21821:

; 303  :  error:
; 304  :     (void) symtable_exit_block(st, (void *)mod);

  00332	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR mod$[rsp]
  0033a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR st$[rsp]
  0033f	e8 00 00 00 00	 call	 symtable_exit_block

; 305  :     PySymtable_Free(st);

  00344	48 8b 4c 24 40	 mov	 rcx, QWORD PTR st$[rsp]
  00349	e8 00 00 00 00	 call	 PySymtable_Free

; 306  :     return NULL;

  0034e	33 c0		 xor	 eax, eax
$LN22@PySymtable:

; 307  : }

  00350	48 81 c4 88 00
	00 00		 add	 rsp, 136		; 00000088H
  00357	c3		 ret	 0
PySymtable_Build ENDP
_TEXT	ENDS
EXTRN	PyDict_New:PROC
EXTRN	PyList_New:PROC
EXTRN	PyMem_Malloc:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$symtable_new DD imagerel symtable_new
	DD	imagerel symtable_new+179
	DD	imagerel $unwind$symtable_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$symtable_new DD 010401H
	DD	08204H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT symtable_new
_TEXT	SEGMENT
st$ = 32
tv69 = 40
tv73 = 48
symtable_new PROC					; COMDAT

; 201  : {

  00000	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 202  :     struct symtable *st;
; 203  : 
; 204  :     st = (struct symtable *)PyMem_Malloc(sizeof(struct symtable));

  00004	b9 50 00 00 00	 mov	 ecx, 80			; 00000050H
  00009	e8 00 00 00 00	 call	 PyMem_Malloc
  0000e	48 89 44 24 20	 mov	 QWORD PTR st$[rsp], rax

; 205  :     if (st == NULL)

  00013	48 83 7c 24 20
	00		 cmp	 QWORD PTR st$[rsp], 0
  00019	75 07		 jne	 SHORT $LN3@symtable_n

; 206  :         return NULL;

  0001b	33 c0		 xor	 eax, eax
  0001d	e9 8c 00 00 00	 jmp	 $LN4@symtable_n
$LN3@symtable_n:

; 207  : 
; 208  :     st->st_filename = NULL;

  00022	48 8b 44 24 20	 mov	 rax, QWORD PTR st$[rsp]
  00027	48 c7 00 00 00
	00 00		 mov	 QWORD PTR [rax], 0

; 209  :     st->st_blocks = NULL;

  0002e	48 8b 44 24 20	 mov	 rax, QWORD PTR st$[rsp]
  00033	48 c7 40 18 00
	00 00 00	 mov	 QWORD PTR [rax+24], 0

; 210  : 
; 211  :     if ((st->st_stack = PyList_New(0)) == NULL)

  0003b	33 c9		 xor	 ecx, ecx
  0003d	e8 00 00 00 00	 call	 PyList_New
  00042	48 89 44 24 28	 mov	 QWORD PTR tv69[rsp], rax
  00047	48 8b 44 24 20	 mov	 rax, QWORD PTR st$[rsp]
  0004c	48 8b 4c 24 28	 mov	 rcx, QWORD PTR tv69[rsp]
  00051	48 89 48 20	 mov	 QWORD PTR [rax+32], rcx
  00055	48 83 7c 24 28
	00		 cmp	 QWORD PTR tv69[rsp], 0
  0005b	75 02		 jne	 SHORT $LN2@symtable_n

; 212  :         goto fail;

  0005d	eb 43		 jmp	 SHORT $fail$21782
$LN2@symtable_n:

; 213  :     if ((st->st_blocks = PyDict_New()) == NULL)

  0005f	e8 00 00 00 00	 call	 PyDict_New
  00064	48 89 44 24 30	 mov	 QWORD PTR tv73[rsp], rax
  00069	48 8b 44 24 20	 mov	 rax, QWORD PTR st$[rsp]
  0006e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv73[rsp]
  00073	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx
  00077	48 83 7c 24 30
	00		 cmp	 QWORD PTR tv73[rsp], 0
  0007d	75 02		 jne	 SHORT $LN1@symtable_n

; 214  :         goto fail;

  0007f	eb 21		 jmp	 SHORT $fail$21782
$LN1@symtable_n:

; 215  :     st->st_cur = NULL;

  00081	48 8b 44 24 20	 mov	 rax, QWORD PTR st$[rsp]
  00086	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0

; 216  :     st->st_private = NULL;

  0008e	48 8b 44 24 20	 mov	 rax, QWORD PTR st$[rsp]
  00093	48 c7 40 38 00
	00 00 00	 mov	 QWORD PTR [rax+56], 0

; 217  :     return st;

  0009b	48 8b 44 24 20	 mov	 rax, QWORD PTR st$[rsp]
  000a0	eb 0c		 jmp	 SHORT $LN4@symtable_n
$fail$21782:

; 218  :  fail:
; 219  :     PySymtable_Free(st);

  000a2	48 8b 4c 24 20	 mov	 rcx, QWORD PTR st$[rsp]
  000a7	e8 00 00 00 00	 call	 PySymtable_Free

; 220  :     return NULL;

  000ac	33 c0		 xor	 eax, eax
$LN4@symtable_n:

; 221  : }

  000ae	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000b2	c3		 ret	 0
symtable_new ENDP
_TEXT	ENDS
EXTRN	PyMem_Free:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PySymtable_Free DD imagerel $LN11
	DD	imagerel $LN11+88
	DD	imagerel $unwind$PySymtable_Free
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PySymtable_Free DD 010901H
	DD	04209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT PySymtable_Free
_TEXT	SEGMENT
st$ = 48
PySymtable_Free PROC					; COMDAT

; 311  : {

$LN11:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H
$LN8@PySymtable@2:

; 312  :     Py_XDECREF(st->st_blocks);

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR st$[rsp]
  0000e	48 83 78 18 00	 cmp	 QWORD PTR [rax+24], 0
  00013	74 0e		 je	 SHORT $LN5@PySymtable@2
  00015	48 8b 44 24 30	 mov	 rax, QWORD PTR st$[rsp]
  0001a	48 8b 48 18	 mov	 rcx, QWORD PTR [rax+24]
  0001e	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@PySymtable@2:
  00023	33 c0		 xor	 eax, eax
  00025	85 c0		 test	 eax, eax
  00027	75 e0		 jne	 SHORT $LN8@PySymtable@2
$LN4@PySymtable@2:

; 313  :     Py_XDECREF(st->st_stack);

  00029	48 8b 44 24 30	 mov	 rax, QWORD PTR st$[rsp]
  0002e	48 83 78 20 00	 cmp	 QWORD PTR [rax+32], 0
  00033	74 0e		 je	 SHORT $LN1@PySymtable@2
  00035	48 8b 44 24 30	 mov	 rax, QWORD PTR st$[rsp]
  0003a	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  0003e	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@PySymtable@2:
  00043	33 c0		 xor	 eax, eax
  00045	85 c0		 test	 eax, eax
  00047	75 e0		 jne	 SHORT $LN4@PySymtable@2

; 314  :     PyMem_Free((void *)st);

  00049	48 8b 4c 24 30	 mov	 rcx, QWORD PTR st$[rsp]
  0004e	e8 00 00 00 00	 call	 PyMem_Free

; 315  : }

  00053	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00057	c3		 ret	 0
PySymtable_Free ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BL@PNDJPBGF@unknown?5symbol?5table?5entry?$AA@ ; `string'
PUBLIC	_Py_IncRef
PUBLIC	??_C@_1CG@BBIHMPKL@?$AAP?$AAy?$AAS?$AAT?$AAE?$AAn?$AAt?$AAr?$AAy?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAv?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CK@FBNLAPOG@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAs?$AAy?$AAm?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@ ; `string'
PUBLIC	PySymtable_Lookup
EXTRN	PyExc_KeyError:QWORD
EXTRN	__imp__wassert:PROC
EXTRN	PyDict_GetItem:PROC
EXTRN	PyLong_FromVoidPtr:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$PySymtable_Lookup DD imagerel $LN7
	DD	imagerel $LN7+170
	DD	imagerel $unwind$PySymtable_Lookup
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PySymtable_Lookup DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT ??_C@_0BL@PNDJPBGF@unknown?5symbol?5table?5entry?$AA@
CONST	SEGMENT
??_C@_0BL@PNDJPBGF@unknown?5symbol?5table?5entry?$AA@ DB 'unknown symbol '
	DB	'table entry', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1CG@BBIHMPKL@?$AAP?$AAy?$AAS?$AAT?$AAE?$AAn?$AAt?$AAr?$AAy?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAv?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CG@BBIHMPKL@?$AAP?$AAy?$AAS?$AAT?$AAE?$AAn?$AAt?$AAr?$AAy?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAv?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'S', 00H, 'T', 00H, 'E', 00H, 'n', 00H, 't', 00H
	DB	'r', 00H, 'y', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, 'v', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CK@FBNLAPOG@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAs?$AAy?$AAm?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
CONST	SEGMENT
??_C@_1CK@FBNLAPOG@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAs?$AAy?$AAm?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@ DB '.'
	DB	00H, '.', 00H, '\', 00H, 'P', 00H, 'y', 00H, 't', 00H, 'h', 00H
	DB	'o', 00H, 'n', 00H, '\', 00H, 's', 00H, 'y', 00H, 'm', 00H, 't'
	DB	00H, 'a', 00H, 'b', 00H, 'l', 00H, 'e', 00H, '.', 00H, 'c', 00H
	DB	00H, 00H					; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PySymtable_Lookup
_TEXT	SEGMENT
v$ = 32
k$ = 40
st$ = 64
key$ = 72
PySymtable_Lookup PROC					; COMDAT

; 319  : {

$LN7:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 320  :     PyObject *k, *v;
; 321  : 
; 322  :     k = PyLong_FromVoidPtr(key);

  0000e	48 8b 4c 24 48	 mov	 rcx, QWORD PTR key$[rsp]
  00013	e8 00 00 00 00	 call	 PyLong_FromVoidPtr
  00018	48 89 44 24 28	 mov	 QWORD PTR k$[rsp], rax

; 323  :     if (k == NULL)

  0001d	48 83 7c 24 28
	00		 cmp	 QWORD PTR k$[rsp], 0
  00023	75 04		 jne	 SHORT $LN3@PySymtable@3

; 324  :         return NULL;

  00025	33 c0		 xor	 eax, eax
  00027	eb 7c		 jmp	 SHORT $LN4@PySymtable@3
$LN3@PySymtable@3:

; 325  :     v = PyDict_GetItem(st->st_blocks, k);

  00029	48 8b 54 24 28	 mov	 rdx, QWORD PTR k$[rsp]
  0002e	48 8b 44 24 40	 mov	 rax, QWORD PTR st$[rsp]
  00033	48 8b 48 18	 mov	 rcx, QWORD PTR [rax+24]
  00037	e8 00 00 00 00	 call	 PyDict_GetItem
  0003c	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax

; 326  :     if (v) {

  00041	48 83 7c 24 20
	00		 cmp	 QWORD PTR v$[rsp], 0
  00047	74 3a		 je	 SHORT $LN2@PySymtable@3

; 327  :         assert(PySTEntry_Check(v));

  00049	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PySTEntry_Type
  00050	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  00055	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00059	74 1c		 je	 SHORT $LN6@PySymtable@3
  0005b	41 b8 47 01 00
	00		 mov	 r8d, 327		; 00000147H
  00061	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CK@FBNLAPOG@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAs?$AAy?$AAm?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  00068	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CG@BBIHMPKL@?$AAP?$AAy?$AAS?$AAT?$AAE?$AAn?$AAt?$AAr?$AAy?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAv?$AA?$CJ?$AA?$AA@
  0006f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00075	33 c0		 xor	 eax, eax
$LN6@PySymtable@3:

; 328  :         Py_INCREF(v);

  00077	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  0007c	e8 00 00 00 00	 call	 _Py_IncRef

; 329  :     }
; 330  :     else {

  00081	eb 13		 jmp	 SHORT $LN1@PySymtable@3
$LN2@PySymtable@3:

; 331  :         PyErr_SetString(PyExc_KeyError,
; 332  :                         "unknown symbol table entry");

  00083	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BL@PNDJPBGF@unknown?5symbol?5table?5entry?$AA@
  0008a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_KeyError
  00091	e8 00 00 00 00	 call	 PyErr_SetString
$LN1@PySymtable@3:

; 333  :     }
; 334  : 
; 335  :     Py_DECREF(k);

  00096	48 8b 4c 24 28	 mov	 rcx, QWORD PTR k$[rsp]
  0009b	e8 00 00 00 00	 call	 _Py_DecRef

; 336  :     return (PySTEntryObject *)v;

  000a0	48 8b 44 24 20	 mov	 rax, QWORD PTR v$[rsp]
$LN4@PySymtable@3:

; 337  : }

  000a5	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a9	c3		 ret	 0
PySymtable_Lookup ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DHGMCEID@_Py_IncRef?$AA@		; `string'
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_IncRef DD imagerel $LN7
	DD	imagerel $LN7+132
	DD	imagerel $unwind$_Py_IncRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_IncRef DD 010901H
	DD	06209H
xdata	ENDS
;	COMDAT ??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
CONST	SEGMENT
??_C@_0L@DHGMCEID@_Py_IncRef?$AA@ DB '_Py_IncRef', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_IncRef
_TEXT	SEGMENT
op$ = 64
_Py_IncRef PROC						; COMDAT

; 904  : {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 905  :     if ((!Py_PXCTX && (Py_ISPY(op) || Px_PERSISTED(op)))) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	75 6d		 jne	 SHORT $LN2@Py_IncRef
  00012	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR [rsp+32], 2
  0001a	4c 8b 4c 24 40	 mov	 r9, QWORD PTR op$[rsp]
  0001f	41 b8 89 03 00
	00		 mov	 r8d, 905		; 00000389H
  00025	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  0002c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DHGMCEID@_Py_IncRef?$AA@
  00033	e8 00 00 00 00	 call	 _PyParallel_Guard
  00038	85 c0		 test	 eax, eax
  0003a	75 12		 jne	 SHORT $LN1@Py_IncRef
  0003c	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  00041	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00045	48 83 e0 20	 and	 rax, 32			; 00000020H
  00049	48 85 c0	 test	 rax, rax
  0004c	74 31		 je	 SHORT $LN2@Py_IncRef
$LN1@Py_IncRef:

; 906  :         _Py_INC_REFTOTAL;

  0004e	e8 00 00 00 00	 call	 _Py_PXCTX
  00053	85 c0		 test	 eax, eax
  00055	74 02		 je	 SHORT $LN5@Py_IncRef
  00057	eb 11		 jmp	 SHORT $LN6@Py_IncRef
$LN5@Py_IncRef:
  00059	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00060	48 ff c0	 inc	 rax
  00063	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN6@Py_IncRef:

; 907  :         (((PyObject*)(op))->ob_refcnt++);

  0006a	48 8b 44 24 40	 mov	 rax, QWORD PTR op$[rsp]
  0006f	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00073	48 ff c0	 inc	 rax
  00076	48 8b 4c 24 40	 mov	 rcx, QWORD PTR op$[rsp]
  0007b	48 89 41 50	 mov	 QWORD PTR [rcx+80], rax
$LN2@Py_IncRef:

; 908  :     }
; 909  : }

  0007f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00083	c3		 ret	 0
_Py_IncRef ENDP
_TEXT	ENDS
PUBLIC	??_C@_1CA@NJGFBMIA@?$AAP?$AAy?$AAL?$AAo?$AAn?$AAg?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAv?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	PyST_GetScope
;	COMDAT pdata
; File c:\src\pyparallel\python\symtable.c
pdata	SEGMENT
$pdata$PyST_GetScope DD imagerel $LN5
	DD	imagerel $LN5+123
	DD	imagerel $unwind$PyST_GetScope
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyST_GetScope DD 010e01H
	DD	0620eH
xdata	ENDS
;	COMDAT ??_C@_1CA@NJGFBMIA@?$AAP?$AAy?$AAL?$AAo?$AAn?$AAg?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAv?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CA@NJGFBMIA@?$AAP?$AAy?$AAL?$AAo?$AAn?$AAg?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAv?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'L', 00H, 'o', 00H, 'n', 00H, 'g', 00H, '_', 00H
	DB	'C', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H, '(', 00H, 'v'
	DB	00H, ')', 00H, 00H, 00H			; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyST_GetScope
_TEXT	SEGMENT
v$ = 32
ste$ = 64
name$ = 72
PyST_GetScope PROC					; COMDAT

; 341  : {

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 342  :     PyObject *v = PyDict_GetItem(ste->ste_symbols, name);

  0000e	48 8b 54 24 48	 mov	 rdx, QWORD PTR name$[rsp]
  00013	48 8b 44 24 40	 mov	 rax, QWORD PTR ste$[rsp]
  00018	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  0001c	e8 00 00 00 00	 call	 PyDict_GetItem
  00021	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax

; 343  :     if (!v)

  00026	48 83 7c 24 20
	00		 cmp	 QWORD PTR v$[rsp], 0
  0002c	75 04		 jne	 SHORT $LN1@PyST_GetSc

; 344  :         return 0;

  0002e	33 c0		 xor	 eax, eax
  00030	eb 44		 jmp	 SHORT $LN2@PyST_GetSc
$LN1@PyST_GetSc:

; 345  :     assert(PyLong_Check(v));

  00032	48 8b 44 24 20	 mov	 rax, QWORD PTR v$[rsp]
  00037	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0003b	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00041	25 00 00 00 01	 and	 eax, 16777216		; 01000000H
  00046	85 c0		 test	 eax, eax
  00048	75 1c		 jne	 SHORT $LN4@PyST_GetSc
  0004a	41 b8 59 01 00
	00		 mov	 r8d, 345		; 00000159H
  00050	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CK@FBNLAPOG@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAs?$AAy?$AAm?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  00057	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CA@NJGFBMIA@?$AAP?$AAy?$AAL?$AAo?$AAn?$AAg?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAv?$AA?$CJ?$AA?$AA@
  0005e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00064	33 c0		 xor	 eax, eax
$LN4@PyST_GetSc:

; 346  :     return (PyLong_AS_LONG(v) >> SCOPE_OFFSET) & SCOPE_MASK;

  00066	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  0006b	e8 00 00 00 00	 call	 PyLong_AsLong
  00070	c1 f8 0b	 sar	 eax, 11
  00073	83 e0 0f	 and	 eax, 15
$LN2@PyST_GetSc:

; 347  : }

  00076	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0007a	c3		 ret	 0
PyST_GetScope ENDP
_TEXT	ENDS
EXTRN	PySet_New:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$symtable_analyze DD imagerel symtable_analyze
	DD	imagerel symtable_analyze+126
	DD	imagerel $unwind$symtable_analyze
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$symtable_analyze DD 010901H
	DD	08209H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT symtable_analyze
_TEXT	SEGMENT
free$ = 32
r$ = 40
global$ = 48
st$ = 80
symtable_analyze PROC					; COMDAT

; 880  : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 881  :     PyObject *free, *global;
; 882  :     int r;
; 883  : 
; 884  :     free = PySet_New(NULL);

  00009	33 c9		 xor	 ecx, ecx
  0000b	e8 00 00 00 00	 call	 PySet_New
  00010	48 89 44 24 20	 mov	 QWORD PTR free$[rsp], rax

; 885  :     if (!free)

  00015	48 83 7c 24 20
	00		 cmp	 QWORD PTR free$[rsp], 0
  0001b	75 04		 jne	 SHORT $LN2@symtable_a

; 886  :         return 0;

  0001d	33 c0		 xor	 eax, eax
  0001f	eb 58		 jmp	 SHORT $LN3@symtable_a
$LN2@symtable_a:

; 887  :     global = PySet_New(NULL);

  00021	33 c9		 xor	 ecx, ecx
  00023	e8 00 00 00 00	 call	 PySet_New
  00028	48 89 44 24 30	 mov	 QWORD PTR global$[rsp], rax

; 888  :     if (!global) {

  0002d	48 83 7c 24 30
	00		 cmp	 QWORD PTR global$[rsp], 0
  00033	75 0e		 jne	 SHORT $LN1@symtable_a

; 889  :         Py_DECREF(free);

  00035	48 8b 4c 24 20	 mov	 rcx, QWORD PTR free$[rsp]
  0003a	e8 00 00 00 00	 call	 _Py_DecRef

; 890  :         return 0;

  0003f	33 c0		 xor	 eax, eax
  00041	eb 36		 jmp	 SHORT $LN3@symtable_a
$LN1@symtable_a:

; 891  :     }
; 892  :     r = analyze_block(st->st_top, NULL, free, global);

  00043	4c 8b 4c 24 30	 mov	 r9, QWORD PTR global$[rsp]
  00048	4c 8b 44 24 20	 mov	 r8, QWORD PTR free$[rsp]
  0004d	33 d2		 xor	 edx, edx
  0004f	48 8b 44 24 50	 mov	 rax, QWORD PTR st$[rsp]
  00054	48 8b 48 10	 mov	 rcx, QWORD PTR [rax+16]
  00058	e8 00 00 00 00	 call	 analyze_block
  0005d	89 44 24 28	 mov	 DWORD PTR r$[rsp], eax

; 893  :     Py_DECREF(free);

  00061	48 8b 4c 24 20	 mov	 rcx, QWORD PTR free$[rsp]
  00066	e8 00 00 00 00	 call	 _Py_DecRef

; 894  :     Py_DECREF(global);

  0006b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR global$[rsp]
  00070	e8 00 00 00 00	 call	 _Py_DecRef

; 895  :     return r;

  00075	8b 44 24 28	 mov	 eax, DWORD PTR r$[rsp]
$LN3@symtable_a:

; 896  : }

  00079	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0007d	c3		 ret	 0
symtable_analyze ENDP
_TEXT	ENDS
PUBLIC	??_C@_1CC@DNBCFJEA@?$AAP?$AAy?$AAE?$AAr?$AAr?$AA_?$AAO?$AAc?$AAc?$AAu?$AAr?$AAr?$AAe?$AAd?$AA?$CI?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1DA@PNIKMNGJ@?$AAc?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAP?$AAy?$AAS?$AAT?$AAE?$AAn?$AAt?$AAr?$AAy?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAc?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1EM@MCNBBFO@?$AAP?$AAy?$AAS?$AAe?$AAt?$AA_?$AAC?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAs?$AA?$CI?$AAl?$AAo?$AAc?$AAa?$AAl?$AA?0?$AA?5?$AA_?$AA_?$AAc?$AAl?$AAa?$AAs?$AAs?$AA_?$AA_?$AA?$CJ@ ; `string'
PUBLIC	??_C@_09LFGACEKG@__class__?$AA@			; `string'
EXTRN	PyErr_Occurred:PROC
EXTRN	PySet_Add:PROC
EXTRN	PySet_Contains:PROC
EXTRN	PyDict_Next:PROC
EXTRN	PyNumber_InPlaceOr:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$analyze_block DD imagerel analyze_block
	DD	imagerel analyze_block+1738
	DD	imagerel $unwind$analyze_block
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$analyze_block DD 021b01H
	DD	01b011bH
xdata	ENDS
;	COMDAT ??_C@_1CC@DNBCFJEA@?$AAP?$AAy?$AAE?$AAr?$AAr?$AA_?$AAO?$AAc?$AAc?$AAu?$AAr?$AAr?$AAe?$AAd?$AA?$CI?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CC@DNBCFJEA@?$AAP?$AAy?$AAE?$AAr?$AAr?$AA_?$AAO?$AAc?$AAc?$AAu?$AAr?$AAr?$AAe?$AAd?$AA?$CI?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'E', 00H, 'r', 00H, 'r', 00H, '_', 00H, 'O', 00H
	DB	'c', 00H, 'c', 00H, 'u', 00H, 'r', 00H, 'r', 00H, 'e', 00H, 'd'
	DB	00H, '(', 00H, ')', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1DA@PNIKMNGJ@?$AAc?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAP?$AAy?$AAS?$AAT?$AAE?$AAn?$AAt?$AAr?$AAy?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAc?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DA@PNIKMNGJ@?$AAc?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAP?$AAy?$AAS?$AAT?$AAE?$AAn?$AAt?$AAr?$AAy?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAc?$AA?$CJ?$AA?$AA@ DB 'c'
	DB	00H, ' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'P', 00H, 'y', 00H
	DB	'S', 00H, 'T', 00H, 'E', 00H, 'n', 00H, 't', 00H, 'r', 00H, 'y'
	DB	00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c', 00H, 'k', 00H
	DB	'(', 00H, 'c', 00H, ')', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1EM@MCNBBFO@?$AAP?$AAy?$AAS?$AAe?$AAt?$AA_?$AAC?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAs?$AA?$CI?$AAl?$AAo?$AAc?$AAa?$AAl?$AA?0?$AA?5?$AA_?$AA_?$AAc?$AAl?$AAa?$AAs?$AAs?$AA_?$AA_?$AA?$CJ@
CONST	SEGMENT
??_C@_1EM@MCNBBFO@?$AAP?$AAy?$AAS?$AAe?$AAt?$AA_?$AAC?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAs?$AA?$CI?$AAl?$AAo?$AAc?$AAa?$AAl?$AA?0?$AA?5?$AA_?$AA_?$AAc?$AAl?$AAa?$AAs?$AAs?$AA_?$AA_?$AA?$CJ@ DB 'P'
	DB	00H, 'y', 00H, 'S', 00H, 'e', 00H, 't', 00H, '_', 00H, 'C', 00H
	DB	'o', 00H, 'n', 00H, 't', 00H, 'a', 00H, 'i', 00H, 'n', 00H, 's'
	DB	00H, '(', 00H, 'l', 00H, 'o', 00H, 'c', 00H, 'a', 00H, 'l', 00H
	DB	',', 00H, ' ', 00H, '_', 00H, '_', 00H, 'c', 00H, 'l', 00H, 'a'
	DB	00H, 's', 00H, 's', 00H, '_', 00H, '_', 00H, ')', 00H, ' ', 00H
	DB	'=', 00H, '=', 00H, ' ', 00H, '1', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09LFGACEKG@__class__?$AA@
CONST	SEGMENT
??_C@_09LFGACEKG@__class__?$AA@ DB '__class__', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT analyze_block
_TEXT	SEGMENT
newglobal$ = 64
v$ = 72
i$ = 80
allfree$ = 88
temp$ = 96
scopes$ = 104
success$ = 112
name$ = 120
local$ = 128
newbound$ = 136
newfree$ = 144
pos$ = 152
flags$22130 = 160
entry$22155 = 168
c$22153 = 176
tv165 = 184
tv238 = 192
ste$ = 224
bound$ = 232
free$ = 240
global$ = 248
analyze_block PROC					; COMDAT

; 686  : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec d8 00
	00 00		 sub	 rsp, 216		; 000000d8H

; 687  :     PyObject *name, *v, *local = NULL, *scopes = NULL, *newbound = NULL;

  0001b	48 c7 84 24 80
	00 00 00 00 00
	00 00		 mov	 QWORD PTR local$[rsp], 0
  00027	48 c7 44 24 68
	00 00 00 00	 mov	 QWORD PTR scopes$[rsp], 0
  00030	48 c7 84 24 88
	00 00 00 00 00
	00 00		 mov	 QWORD PTR newbound$[rsp], 0

; 688  :     PyObject *newglobal = NULL, *newfree = NULL, *allfree = NULL;

  0003c	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR newglobal$[rsp], 0
  00045	48 c7 84 24 90
	00 00 00 00 00
	00 00		 mov	 QWORD PTR newfree$[rsp], 0
  00051	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR allfree$[rsp], 0

; 689  :     PyObject *temp;
; 690  :     int i, success = 0;

  0005a	c7 44 24 70 00
	00 00 00	 mov	 DWORD PTR success$[rsp], 0

; 691  :     Py_ssize_t pos = 0;

  00062	48 c7 84 24 98
	00 00 00 00 00
	00 00		 mov	 QWORD PTR pos$[rsp], 0

; 692  : 
; 693  :     local = PySet_New(NULL);  /* collect new names bound in block */

  0006e	33 c9		 xor	 ecx, ecx
  00070	e8 00 00 00 00	 call	 PySet_New
  00075	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR local$[rsp], rax

; 694  :     if (!local)

  0007d	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR local$[rsp], 0
  00086	75 05		 jne	 SHORT $LN60@analyze_bl

; 695  :         goto error;

  00088	e9 62 05 00 00	 jmp	 $error$22113
$LN60@analyze_bl:

; 696  :     scopes = PyDict_New();  /* collect scopes defined for each name */

  0008d	e8 00 00 00 00	 call	 PyDict_New
  00092	48 89 44 24 68	 mov	 QWORD PTR scopes$[rsp], rax

; 697  :     if (!scopes)

  00097	48 83 7c 24 68
	00		 cmp	 QWORD PTR scopes$[rsp], 0
  0009d	75 05		 jne	 SHORT $LN59@analyze_bl

; 698  :         goto error;

  0009f	e9 4b 05 00 00	 jmp	 $error$22113
$LN59@analyze_bl:

; 699  : 
; 700  :     /* Allocate new global and bound variable dictionaries.  These
; 701  :        dictionaries hold the names visible in nested blocks.  For
; 702  :        ClassBlocks, the bound and global names are initialized
; 703  :        before analyzing names, because class bindings aren't
; 704  :        visible in methods.  For other blocks, they are initialized
; 705  :        after names are analyzed.
; 706  :      */
; 707  : 
; 708  :     /* TODO(jhylton): Package these dicts in a struct so that we
; 709  :        can write reasonable helper functions?
; 710  :     */
; 711  :     newglobal = PySet_New(NULL);

  000a4	33 c9		 xor	 ecx, ecx
  000a6	e8 00 00 00 00	 call	 PySet_New
  000ab	48 89 44 24 40	 mov	 QWORD PTR newglobal$[rsp], rax

; 712  :     if (!newglobal)

  000b0	48 83 7c 24 40
	00		 cmp	 QWORD PTR newglobal$[rsp], 0
  000b6	75 05		 jne	 SHORT $LN58@analyze_bl

; 713  :         goto error;

  000b8	e9 32 05 00 00	 jmp	 $error$22113
$LN58@analyze_bl:

; 714  :     newfree = PySet_New(NULL);

  000bd	33 c9		 xor	 ecx, ecx
  000bf	e8 00 00 00 00	 call	 PySet_New
  000c4	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR newfree$[rsp], rax

; 715  :     if (!newfree)

  000cc	48 83 bc 24 90
	00 00 00 00	 cmp	 QWORD PTR newfree$[rsp], 0
  000d5	75 05		 jne	 SHORT $LN57@analyze_bl

; 716  :         goto error;

  000d7	e9 13 05 00 00	 jmp	 $error$22113
$LN57@analyze_bl:

; 717  :     newbound = PySet_New(NULL);

  000dc	33 c9		 xor	 ecx, ecx
  000de	e8 00 00 00 00	 call	 PySet_New
  000e3	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR newbound$[rsp], rax

; 718  :     if (!newbound)

  000eb	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR newbound$[rsp], 0
  000f4	75 05		 jne	 SHORT $LN56@analyze_bl

; 719  :         goto error;

  000f6	e9 f4 04 00 00	 jmp	 $error$22113
$LN56@analyze_bl:

; 720  : 
; 721  :     /* Class namespace has no effect on names visible in
; 722  :        nested functions, so populate the global and bound
; 723  :        sets to be passed to child blocks before analyzing
; 724  :        this one.
; 725  :      */
; 726  :     if (ste->ste_type == ClassBlock) {

  000fb	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR ste$[rsp]
  00103	83 b8 88 00 00
	00 01		 cmp	 DWORD PTR [rax+136], 1
  0010a	75 6a		 jne	 SHORT $LN55@analyze_bl

; 727  :         /* Pass down known globals */
; 728  :         temp = PyNumber_InPlaceOr(newglobal, global);

  0010c	48 8b 94 24 f8
	00 00 00	 mov	 rdx, QWORD PTR global$[rsp]
  00114	48 8b 4c 24 40	 mov	 rcx, QWORD PTR newglobal$[rsp]
  00119	e8 00 00 00 00	 call	 PyNumber_InPlaceOr
  0011e	48 89 44 24 60	 mov	 QWORD PTR temp$[rsp], rax

; 729  :         if (!temp)

  00123	48 83 7c 24 60
	00		 cmp	 QWORD PTR temp$[rsp], 0
  00129	75 05		 jne	 SHORT $LN54@analyze_bl

; 730  :             goto error;

  0012b	e9 bf 04 00 00	 jmp	 $error$22113
$LN54@analyze_bl:

; 731  :         Py_DECREF(temp);

  00130	48 8b 4c 24 60	 mov	 rcx, QWORD PTR temp$[rsp]
  00135	e8 00 00 00 00	 call	 _Py_DecRef

; 732  :         /* Pass down previously bound symbols */
; 733  :         if (bound) {

  0013a	48 83 bc 24 e8
	00 00 00 00	 cmp	 QWORD PTR bound$[rsp], 0
  00143	74 31		 je	 SHORT $LN53@analyze_bl

; 734  :             temp = PyNumber_InPlaceOr(newbound, bound);

  00145	48 8b 94 24 e8
	00 00 00	 mov	 rdx, QWORD PTR bound$[rsp]
  0014d	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR newbound$[rsp]
  00155	e8 00 00 00 00	 call	 PyNumber_InPlaceOr
  0015a	48 89 44 24 60	 mov	 QWORD PTR temp$[rsp], rax

; 735  :             if (!temp)

  0015f	48 83 7c 24 60
	00		 cmp	 QWORD PTR temp$[rsp], 0
  00165	75 05		 jne	 SHORT $LN52@analyze_bl

; 736  :                 goto error;

  00167	e9 83 04 00 00	 jmp	 $error$22113
$LN52@analyze_bl:

; 737  :             Py_DECREF(temp);

  0016c	48 8b 4c 24 60	 mov	 rcx, QWORD PTR temp$[rsp]
  00171	e8 00 00 00 00	 call	 _Py_DecRef
$LN53@analyze_bl:
$LN55@analyze_bl:
$LN51@analyze_bl:

; 738  :         }
; 739  :     }
; 740  : 
; 741  :     while (PyDict_Next(ste->ste_symbols, &pos, &name, &v)) {

  00176	4c 8d 4c 24 48	 lea	 r9, QWORD PTR v$[rsp]
  0017b	4c 8d 44 24 78	 lea	 r8, QWORD PTR name$[rsp]
  00180	48 8d 94 24 98
	00 00 00	 lea	 rdx, QWORD PTR pos$[rsp]
  00188	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR ste$[rsp]
  00190	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  00194	e8 00 00 00 00	 call	 PyDict_Next
  00199	85 c0		 test	 eax, eax
  0019b	74 72		 je	 SHORT $LN50@analyze_bl

; 742  :         long flags = PyLong_AS_LONG(v);

  0019d	48 8b 4c 24 48	 mov	 rcx, QWORD PTR v$[rsp]
  001a2	e8 00 00 00 00	 call	 PyLong_AsLong
  001a7	89 84 24 a0 00
	00 00		 mov	 DWORD PTR flags$22130[rsp], eax

; 743  :         if (!analyze_name(ste, scopes, name, flags,
; 744  :                           bound, local, free, global))

  001ae	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR global$[rsp]
  001b6	48 89 44 24 38	 mov	 QWORD PTR [rsp+56], rax
  001bb	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR free$[rsp]
  001c3	48 89 44 24 30	 mov	 QWORD PTR [rsp+48], rax
  001c8	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR local$[rsp]
  001d0	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  001d5	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR bound$[rsp]
  001dd	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  001e2	44 8b 8c 24 a0
	00 00 00	 mov	 r9d, DWORD PTR flags$22130[rsp]
  001ea	4c 8b 44 24 78	 mov	 r8, QWORD PTR name$[rsp]
  001ef	48 8b 54 24 68	 mov	 rdx, QWORD PTR scopes$[rsp]
  001f4	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR ste$[rsp]
  001fc	e8 00 00 00 00	 call	 analyze_name
  00201	85 c0		 test	 eax, eax
  00203	75 05		 jne	 SHORT $LN49@analyze_bl

; 745  :             goto error;

  00205	e9 e5 03 00 00	 jmp	 $error$22113
$LN49@analyze_bl:

; 746  :     }

  0020a	e9 67 ff ff ff	 jmp	 $LN51@analyze_bl
$LN50@analyze_bl:

; 747  : 
; 748  :     /* Populate global and bound sets to be passed to children. */
; 749  :     if (ste->ste_type != ClassBlock) {

  0020f	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR ste$[rsp]
  00217	83 b8 88 00 00
	00 01		 cmp	 DWORD PTR [rax+136], 1
  0021e	0f 84 b1 00 00
	00		 je	 $LN48@analyze_bl

; 750  :         /* Add function locals to bound set */
; 751  :         if (ste->ste_type == FunctionBlock) {

  00224	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR ste$[rsp]
  0022c	83 b8 88 00 00
	00 00		 cmp	 DWORD PTR [rax+136], 0
  00233	75 31		 jne	 SHORT $LN47@analyze_bl

; 752  :             temp = PyNumber_InPlaceOr(newbound, local);

  00235	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR local$[rsp]
  0023d	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR newbound$[rsp]
  00245	e8 00 00 00 00	 call	 PyNumber_InPlaceOr
  0024a	48 89 44 24 60	 mov	 QWORD PTR temp$[rsp], rax

; 753  :             if (!temp)

  0024f	48 83 7c 24 60
	00		 cmp	 QWORD PTR temp$[rsp], 0
  00255	75 05		 jne	 SHORT $LN46@analyze_bl

; 754  :                 goto error;

  00257	e9 93 03 00 00	 jmp	 $error$22113
$LN46@analyze_bl:

; 755  :             Py_DECREF(temp);

  0025c	48 8b 4c 24 60	 mov	 rcx, QWORD PTR temp$[rsp]
  00261	e8 00 00 00 00	 call	 _Py_DecRef
$LN47@analyze_bl:

; 756  :         }
; 757  :         /* Pass down previously bound symbols */
; 758  :         if (bound) {

  00266	48 83 bc 24 e8
	00 00 00 00	 cmp	 QWORD PTR bound$[rsp], 0
  0026f	74 31		 je	 SHORT $LN45@analyze_bl

; 759  :             temp = PyNumber_InPlaceOr(newbound, bound);

  00271	48 8b 94 24 e8
	00 00 00	 mov	 rdx, QWORD PTR bound$[rsp]
  00279	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR newbound$[rsp]
  00281	e8 00 00 00 00	 call	 PyNumber_InPlaceOr
  00286	48 89 44 24 60	 mov	 QWORD PTR temp$[rsp], rax

; 760  :             if (!temp)

  0028b	48 83 7c 24 60
	00		 cmp	 QWORD PTR temp$[rsp], 0
  00291	75 05		 jne	 SHORT $LN44@analyze_bl

; 761  :                 goto error;

  00293	e9 57 03 00 00	 jmp	 $error$22113
$LN44@analyze_bl:

; 762  :             Py_DECREF(temp);

  00298	48 8b 4c 24 60	 mov	 rcx, QWORD PTR temp$[rsp]
  0029d	e8 00 00 00 00	 call	 _Py_DecRef
$LN45@analyze_bl:

; 763  :         }
; 764  :         /* Pass down known globals */
; 765  :         temp = PyNumber_InPlaceOr(newglobal, global);

  002a2	48 8b 94 24 f8
	00 00 00	 mov	 rdx, QWORD PTR global$[rsp]
  002aa	48 8b 4c 24 40	 mov	 rcx, QWORD PTR newglobal$[rsp]
  002af	e8 00 00 00 00	 call	 PyNumber_InPlaceOr
  002b4	48 89 44 24 60	 mov	 QWORD PTR temp$[rsp], rax

; 766  :         if (!temp)

  002b9	48 83 7c 24 60
	00		 cmp	 QWORD PTR temp$[rsp], 0
  002bf	75 05		 jne	 SHORT $LN43@analyze_bl

; 767  :             goto error;

  002c1	e9 29 03 00 00	 jmp	 $error$22113
$LN43@analyze_bl:

; 768  :         Py_DECREF(temp);

  002c6	48 8b 4c 24 60	 mov	 rcx, QWORD PTR temp$[rsp]
  002cb	e8 00 00 00 00	 call	 _Py_DecRef

; 769  :     }
; 770  :     else {

  002d0	e9 9f 00 00 00	 jmp	 $LN42@analyze_bl
$LN48@analyze_bl:

; 771  :         /* Special-case __class__ */
; 772  :         if (!GET_IDENTIFIER(__class__))

  002d5	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR __class__, 0
  002dd	74 11		 je	 SHORT $LN63@analyze_bl
  002df	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __class__
  002e6	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR tv165[rsp], rax
  002ee	eb 22		 jmp	 SHORT $LN64@analyze_bl
$LN63@analyze_bl:
  002f0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09LFGACEKG@__class__?$AA@
  002f7	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  002fc	48 89 05 00 00
	00 00		 mov	 QWORD PTR __class__, rax
  00303	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __class__
  0030a	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR tv165[rsp], rax
$LN64@analyze_bl:
  00312	48 83 bc 24 b8
	00 00 00 00	 cmp	 QWORD PTR tv165[rsp], 0
  0031b	75 05		 jne	 SHORT $LN41@analyze_bl

; 773  :             goto error;

  0031d	e9 cd 02 00 00	 jmp	 $error$22113
$LN41@analyze_bl:

; 774  :         assert(PySet_Contains(local, __class__) == 1);

  00322	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR __class__
  00329	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR local$[rsp]
  00331	e8 00 00 00 00	 call	 PySet_Contains
  00336	83 f8 01	 cmp	 eax, 1
  00339	74 1c		 je	 SHORT $LN65@analyze_bl
  0033b	41 b8 06 03 00
	00		 mov	 r8d, 774		; 00000306H
  00341	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CK@FBNLAPOG@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAs?$AAy?$AAm?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  00348	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EM@MCNBBFO@?$AAP?$AAy?$AAS?$AAe?$AAt?$AA_?$AAC?$AAo?$AAn?$AAt?$AAa?$AAi?$AAn?$AAs?$AA?$CI?$AAl?$AAo?$AAc?$AAa?$AAl?$AA?0?$AA?5?$AA_?$AA_?$AAc?$AAl?$AAa?$AAs?$AAs?$AA_?$AA_?$AA?$CJ@
  0034f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00355	33 c0		 xor	 eax, eax
$LN65@analyze_bl:

; 775  :         if (PySet_Add(newbound, __class__) < 0)

  00357	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR __class__
  0035e	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR newbound$[rsp]
  00366	e8 00 00 00 00	 call	 PySet_Add
  0036b	85 c0		 test	 eax, eax
  0036d	7d 05		 jge	 SHORT $LN40@analyze_bl

; 776  :             goto error;

  0036f	e9 7b 02 00 00	 jmp	 $error$22113
$LN40@analyze_bl:
$LN42@analyze_bl:

; 777  :     }
; 778  : 
; 779  :     /* Recursively call analyze_child_block() on each child block.
; 780  : 
; 781  :        newbound, newglobal now contain the names visible in
; 782  :        nested blocks.  The free variables in the children will
; 783  :        be collected in allfree.
; 784  :     */
; 785  :     allfree = PySet_New(NULL);

  00374	33 c9		 xor	 ecx, ecx
  00376	e8 00 00 00 00	 call	 PySet_New
  0037b	48 89 44 24 58	 mov	 QWORD PTR allfree$[rsp], rax

; 786  :     if (!allfree)

  00380	48 83 7c 24 58
	00		 cmp	 QWORD PTR allfree$[rsp], 0
  00386	75 05		 jne	 SHORT $LN39@analyze_bl

; 787  :         goto error;

  00388	e9 62 02 00 00	 jmp	 $error$22113
$LN39@analyze_bl:

; 788  :     for (i = 0; i < PyList_GET_SIZE(ste->ste_children); ++i) {

  0038d	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00395	eb 0a		 jmp	 SHORT $LN38@analyze_bl
$LN37@analyze_bl:
  00397	8b 44 24 50	 mov	 eax, DWORD PTR i$[rsp]
  0039b	ff c0		 inc	 eax
  0039d	89 44 24 50	 mov	 DWORD PTR i$[rsp], eax
$LN38@analyze_bl:
  003a1	48 63 44 24 50	 movsxd	 rax, DWORD PTR i$[rsp]
  003a6	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR ste$[rsp]
  003ae	48 8b 89 80 00
	00 00		 mov	 rcx, QWORD PTR [rcx+128]
  003b5	48 3b 41 60	 cmp	 rax, QWORD PTR [rcx+96]
  003b9	0f 8d f5 00 00
	00		 jge	 $LN36@analyze_bl

; 789  :         PyObject *c = PyList_GET_ITEM(ste->ste_children, i);

  003bf	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR ste$[rsp]
  003c7	48 8b 80 80 00
	00 00		 mov	 rax, QWORD PTR [rax+128]
  003ce	48 63 4c 24 50	 movsxd	 rcx, DWORD PTR i$[rsp]
  003d3	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  003d7	48 8b 04 c8	 mov	 rax, QWORD PTR [rax+rcx*8]
  003db	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR c$22153[rsp], rax

; 790  :         PySTEntryObject* entry;
; 791  :         assert(c && PySTEntry_Check(c));

  003e3	48 83 bc 24 b0
	00 00 00 00	 cmp	 QWORD PTR c$22153[rsp], 0
  003ec	74 15		 je	 SHORT $LN66@analyze_bl
  003ee	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:PySTEntry_Type
  003f5	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR c$22153[rsp]
  003fd	48 39 41 58	 cmp	 QWORD PTR [rcx+88], rax
  00401	74 1c		 je	 SHORT $LN67@analyze_bl
$LN66@analyze_bl:
  00403	41 b8 17 03 00
	00		 mov	 r8d, 791		; 00000317H
  00409	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CK@FBNLAPOG@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAs?$AAy?$AAm?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  00410	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DA@PNIKMNGJ@?$AAc?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAP?$AAy?$AAS?$AAT?$AAE?$AAn?$AAt?$AAr?$AAy?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAc?$AA?$CJ?$AA?$AA@
  00417	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0041d	33 c0		 xor	 eax, eax
$LN67@analyze_bl:

; 792  :         entry = (PySTEntryObject*)c;

  0041f	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR c$22153[rsp]
  00427	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR entry$22155[rsp], rax

; 793  :         if (!analyze_child_block(entry, newbound, newfree, newglobal,
; 794  :                                  allfree))

  0042f	48 8b 44 24 58	 mov	 rax, QWORD PTR allfree$[rsp]
  00434	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00439	4c 8b 4c 24 40	 mov	 r9, QWORD PTR newglobal$[rsp]
  0043e	4c 8b 84 24 90
	00 00 00	 mov	 r8, QWORD PTR newfree$[rsp]
  00446	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR newbound$[rsp]
  0044e	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR entry$22155[rsp]
  00456	e8 00 00 00 00	 call	 analyze_child_block
  0045b	85 c0		 test	 eax, eax
  0045d	75 05		 jne	 SHORT $LN35@analyze_bl

; 795  :             goto error;

  0045f	e9 8b 01 00 00	 jmp	 $error$22113
$LN35@analyze_bl:

; 796  :         /* Check if any children have free variables */
; 797  :         if (entry->ste_free || entry->ste_child_free)

  00464	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR entry$22155[rsp]
  0046c	8b 80 94 00 00
	00		 mov	 eax, DWORD PTR [rax+148]
  00472	83 e0 01	 and	 eax, 1
  00475	85 c0		 test	 eax, eax
  00477	75 17		 jne	 SHORT $LN33@analyze_bl
  00479	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR entry$22155[rsp]
  00481	8b 80 94 00 00
	00		 mov	 eax, DWORD PTR [rax+148]
  00487	d1 e8		 shr	 eax, 1
  00489	83 e0 01	 and	 eax, 1
  0048c	85 c0		 test	 eax, eax
  0048e	74 1f		 je	 SHORT $LN34@analyze_bl
$LN33@analyze_bl:

; 798  :             ste->ste_child_free = 1;

  00490	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR ste$[rsp]
  00498	8b 80 94 00 00
	00		 mov	 eax, DWORD PTR [rax+148]
  0049e	83 c8 02	 or	 eax, 2
  004a1	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR ste$[rsp]
  004a9	89 81 94 00 00
	00		 mov	 DWORD PTR [rcx+148], eax
$LN34@analyze_bl:

; 799  :     }

  004af	e9 e3 fe ff ff	 jmp	 $LN37@analyze_bl
$LN36@analyze_bl:

; 800  : 
; 801  :     temp = PyNumber_InPlaceOr(newfree, allfree);

  004b4	48 8b 54 24 58	 mov	 rdx, QWORD PTR allfree$[rsp]
  004b9	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR newfree$[rsp]
  004c1	e8 00 00 00 00	 call	 PyNumber_InPlaceOr
  004c6	48 89 44 24 60	 mov	 QWORD PTR temp$[rsp], rax

; 802  :     if (!temp)

  004cb	48 83 7c 24 60
	00		 cmp	 QWORD PTR temp$[rsp], 0
  004d1	75 05		 jne	 SHORT $LN32@analyze_bl

; 803  :         goto error;

  004d3	e9 17 01 00 00	 jmp	 $error$22113
$LN32@analyze_bl:

; 804  :     Py_DECREF(temp);

  004d8	48 8b 4c 24 60	 mov	 rcx, QWORD PTR temp$[rsp]
  004dd	e8 00 00 00 00	 call	 _Py_DecRef

; 805  : 
; 806  :     /* Check if any local variables must be converted to cell variables */
; 807  :     if (ste->ste_type == FunctionBlock && !analyze_cells(scopes, newfree,
; 808  :                                                          NULL))

  004e2	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR ste$[rsp]
  004ea	83 b8 88 00 00
	00 00		 cmp	 DWORD PTR [rax+136], 0
  004f1	75 20		 jne	 SHORT $LN31@analyze_bl
  004f3	45 33 c0	 xor	 r8d, r8d
  004f6	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR newfree$[rsp]
  004fe	48 8b 4c 24 68	 mov	 rcx, QWORD PTR scopes$[rsp]
  00503	e8 00 00 00 00	 call	 analyze_cells
  00508	85 c0		 test	 eax, eax
  0050a	75 07		 jne	 SHORT $LN31@analyze_bl

; 809  :         goto error;

  0050c	e9 de 00 00 00	 jmp	 $error$22113

; 810  :     else if (ste->ste_type == ClassBlock && !analyze_cells(scopes, newfree,

  00511	eb 33		 jmp	 SHORT $LN30@analyze_bl
$LN31@analyze_bl:

; 811  :                                                            "__class__"))

  00513	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR ste$[rsp]
  0051b	83 b8 88 00 00
	00 01		 cmp	 DWORD PTR [rax+136], 1
  00522	75 22		 jne	 SHORT $LN29@analyze_bl
  00524	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_09LFGACEKG@__class__?$AA@
  0052b	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR newfree$[rsp]
  00533	48 8b 4c 24 68	 mov	 rcx, QWORD PTR scopes$[rsp]
  00538	e8 00 00 00 00	 call	 analyze_cells
  0053d	85 c0		 test	 eax, eax
  0053f	75 05		 jne	 SHORT $LN29@analyze_bl

; 812  :         goto error;

  00541	e9 a9 00 00 00	 jmp	 $error$22113
$LN29@analyze_bl:
$LN30@analyze_bl:

; 813  :     /* Records the results of the analysis in the symbol table entry */
; 814  :     if (!update_symbols(ste->ste_symbols, scopes, bound, newfree,
; 815  :                         ste->ste_type == ClassBlock))

  00546	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR ste$[rsp]
  0054e	83 b8 88 00 00
	00 01		 cmp	 DWORD PTR [rax+136], 1
  00555	75 0d		 jne	 SHORT $LN68@analyze_bl
  00557	c7 84 24 c0 00
	00 00 01 00 00
	00		 mov	 DWORD PTR tv238[rsp], 1
  00562	eb 0b		 jmp	 SHORT $LN69@analyze_bl
$LN68@analyze_bl:
  00564	c7 84 24 c0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR tv238[rsp], 0
$LN69@analyze_bl:
  0056f	8b 84 24 c0 00
	00 00		 mov	 eax, DWORD PTR tv238[rsp]
  00576	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0057a	4c 8b 8c 24 90
	00 00 00	 mov	 r9, QWORD PTR newfree$[rsp]
  00582	4c 8b 84 24 e8
	00 00 00	 mov	 r8, QWORD PTR bound$[rsp]
  0058a	48 8b 54 24 68	 mov	 rdx, QWORD PTR scopes$[rsp]
  0058f	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR ste$[rsp]
  00597	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  0059b	e8 00 00 00 00	 call	 update_symbols
  005a0	85 c0		 test	 eax, eax
  005a2	75 02		 jne	 SHORT $LN28@analyze_bl

; 816  :         goto error;

  005a4	eb 49		 jmp	 SHORT $error$22113
$LN28@analyze_bl:

; 817  :     if (!check_unoptimized(ste))

  005a6	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR ste$[rsp]
  005ae	e8 00 00 00 00	 call	 check_unoptimized
  005b3	85 c0		 test	 eax, eax
  005b5	75 02		 jne	 SHORT $LN27@analyze_bl

; 818  :         goto error;

  005b7	eb 36		 jmp	 SHORT $error$22113
$LN27@analyze_bl:

; 819  : 
; 820  :     temp = PyNumber_InPlaceOr(free, newfree);

  005b9	48 8b 94 24 90
	00 00 00	 mov	 rdx, QWORD PTR newfree$[rsp]
  005c1	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR free$[rsp]
  005c9	e8 00 00 00 00	 call	 PyNumber_InPlaceOr
  005ce	48 89 44 24 60	 mov	 QWORD PTR temp$[rsp], rax

; 821  :     if (!temp)

  005d3	48 83 7c 24 60
	00		 cmp	 QWORD PTR temp$[rsp], 0
  005d9	75 02		 jne	 SHORT $LN26@analyze_bl

; 822  :         goto error;

  005db	eb 12		 jmp	 SHORT $error$22113
$LN26@analyze_bl:

; 823  :     Py_DECREF(temp);

  005dd	48 8b 4c 24 60	 mov	 rcx, QWORD PTR temp$[rsp]
  005e2	e8 00 00 00 00	 call	 _Py_DecRef

; 824  :     success = 1;

  005e7	c7 44 24 70 01
	00 00 00	 mov	 DWORD PTR success$[rsp], 1
$error$22113:
$LN25@analyze_bl:

; 825  :  error:
; 826  :     Py_XDECREF(scopes);

  005ef	48 83 7c 24 68
	00		 cmp	 QWORD PTR scopes$[rsp], 0
  005f5	74 0a		 je	 SHORT $LN22@analyze_bl
  005f7	48 8b 4c 24 68	 mov	 rcx, QWORD PTR scopes$[rsp]
  005fc	e8 00 00 00 00	 call	 _Py_DecRef
$LN22@analyze_bl:
  00601	33 c0		 xor	 eax, eax
  00603	85 c0		 test	 eax, eax
  00605	75 e8		 jne	 SHORT $LN25@analyze_bl
$LN21@analyze_bl:

; 827  :     Py_XDECREF(local);

  00607	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR local$[rsp], 0
  00610	74 0d		 je	 SHORT $LN18@analyze_bl
  00612	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR local$[rsp]
  0061a	e8 00 00 00 00	 call	 _Py_DecRef
$LN18@analyze_bl:
  0061f	33 c0		 xor	 eax, eax
  00621	85 c0		 test	 eax, eax
  00623	75 e2		 jne	 SHORT $LN21@analyze_bl
$LN17@analyze_bl:

; 828  :     Py_XDECREF(newbound);

  00625	48 83 bc 24 88
	00 00 00 00	 cmp	 QWORD PTR newbound$[rsp], 0
  0062e	74 0d		 je	 SHORT $LN14@analyze_bl
  00630	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR newbound$[rsp]
  00638	e8 00 00 00 00	 call	 _Py_DecRef
$LN14@analyze_bl:
  0063d	33 c0		 xor	 eax, eax
  0063f	85 c0		 test	 eax, eax
  00641	75 e2		 jne	 SHORT $LN17@analyze_bl
$LN13@analyze_bl:

; 829  :     Py_XDECREF(newglobal);

  00643	48 83 7c 24 40
	00		 cmp	 QWORD PTR newglobal$[rsp], 0
  00649	74 0a		 je	 SHORT $LN10@analyze_bl
  0064b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR newglobal$[rsp]
  00650	e8 00 00 00 00	 call	 _Py_DecRef
$LN10@analyze_bl:
  00655	33 c0		 xor	 eax, eax
  00657	85 c0		 test	 eax, eax
  00659	75 e8		 jne	 SHORT $LN13@analyze_bl
$LN9@analyze_bl:

; 830  :     Py_XDECREF(newfree);

  0065b	48 83 bc 24 90
	00 00 00 00	 cmp	 QWORD PTR newfree$[rsp], 0
  00664	74 0d		 je	 SHORT $LN6@analyze_bl
  00666	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR newfree$[rsp]
  0066e	e8 00 00 00 00	 call	 _Py_DecRef
$LN6@analyze_bl:
  00673	33 c0		 xor	 eax, eax
  00675	85 c0		 test	 eax, eax
  00677	75 e2		 jne	 SHORT $LN9@analyze_bl
$LN5@analyze_bl:

; 831  :     Py_XDECREF(allfree);

  00679	48 83 7c 24 58
	00		 cmp	 QWORD PTR allfree$[rsp], 0
  0067f	74 0a		 je	 SHORT $LN2@analyze_bl
  00681	48 8b 4c 24 58	 mov	 rcx, QWORD PTR allfree$[rsp]
  00686	e8 00 00 00 00	 call	 _Py_DecRef
$LN2@analyze_bl:
  0068b	33 c0		 xor	 eax, eax
  0068d	85 c0		 test	 eax, eax
  0068f	75 e8		 jne	 SHORT $LN5@analyze_bl

; 832  :     if (!success)

  00691	83 7c 24 70 00	 cmp	 DWORD PTR success$[rsp], 0
  00696	75 26		 jne	 SHORT $LN1@analyze_bl

; 833  :         assert(PyErr_Occurred());

  00698	e8 00 00 00 00	 call	 PyErr_Occurred
  0069d	48 85 c0	 test	 rax, rax
  006a0	75 1c		 jne	 SHORT $LN70@analyze_bl
  006a2	41 b8 41 03 00
	00		 mov	 r8d, 833		; 00000341H
  006a8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CK@FBNLAPOG@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAs?$AAy?$AAm?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  006af	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CC@DNBCFJEA@?$AAP?$AAy?$AAE?$AAr?$AAr?$AA_?$AAO?$AAc?$AAc?$AAu?$AAr?$AAr?$AAe?$AAd?$AA?$CI?$AA?$CJ?$AA?$AA@
  006b6	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  006bc	33 c0		 xor	 eax, eax
$LN70@analyze_bl:
$LN1@analyze_bl:

; 834  :     return success;

  006be	8b 44 24 70	 mov	 eax, DWORD PTR success$[rsp]

; 835  : }

  006c2	48 81 c4 d8 00
	00 00		 add	 rsp, 216		; 000000d8H
  006c9	c3		 ret	 0
analyze_block ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CD@HPFNEAKB@no?5binding?5for?5nonlocal?5?8?$CFU?8?5fou@ ; `string'
PUBLIC	??_C@_0DB@DNKFLDHO@nonlocal?5declaration?5not?5allowed@ ; `string'
PUBLIC	??_C@_0CE@OLAGPHCF@name?5?8?$CFU?8?5is?5parameter?5and?5nonlo@ ; `string'
PUBLIC	??_C@_0CB@GJOAACGI@name?5?8?$CFU?8?5is?5nonlocal?5and?5global@ ; `string'
PUBLIC	??_C@_0CC@NFCHOBNE@name?5?8?$CFU?8?5is?5parameter?5and?5globa@ ; `string'
EXTRN	PySet_Discard:PROC
EXTRN	PyDict_SetItem:PROC
EXTRN	PyLong_FromLong:PROC
EXTRN	PyErr_SyntaxLocationEx:PROC
EXTRN	PyErr_Format:PROC
EXTRN	PyExc_SyntaxError:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$analyze_name DD imagerel analyze_name
	DD	imagerel analyze_name+1310
	DD	imagerel $unwind$analyze_name
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$analyze_name DD 011801H
	DD	0c218H
xdata	ENDS
;	COMDAT ??_C@_0CD@HPFNEAKB@no?5binding?5for?5nonlocal?5?8?$CFU?8?5fou@
CONST	SEGMENT
??_C@_0CD@HPFNEAKB@no?5binding?5for?5nonlocal?5?8?$CFU?8?5fou@ DB 'no bin'
	DB	'ding for nonlocal ''%U'' found', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@DNKFLDHO@nonlocal?5declaration?5not?5allowed@
CONST	SEGMENT
??_C@_0DB@DNKFLDHO@nonlocal?5declaration?5not?5allowed@ DB 'nonlocal decl'
	DB	'aration not allowed at module level', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@OLAGPHCF@name?5?8?$CFU?8?5is?5parameter?5and?5nonlo@
CONST	SEGMENT
??_C@_0CE@OLAGPHCF@name?5?8?$CFU?8?5is?5parameter?5and?5nonlo@ DB 'name '''
	DB	'%U'' is parameter and nonlocal', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@GJOAACGI@name?5?8?$CFU?8?5is?5nonlocal?5and?5global@
CONST	SEGMENT
??_C@_0CB@GJOAACGI@name?5?8?$CFU?8?5is?5nonlocal?5and?5global@ DB 'name '''
	DB	'%U'' is nonlocal and global', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@NFCHOBNE@name?5?8?$CFU?8?5is?5parameter?5and?5globa@
CONST	SEGMENT
??_C@_0CC@NFCHOBNE@name?5?8?$CFU?8?5is?5parameter?5and?5globa@ DB 'name '''
	DB	'%U'' is parameter and global', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT analyze_name
_TEXT	SEGMENT
o$21909 = 32
o$21923 = 40
o$21929 = 48
o$21937 = 56
o$21943 = 64
o$21949 = 72
tv168 = 80
tv211 = 84
ste$ = 112
scopes$ = 120
name$ = 128
flags$ = 136
bound$ = 144
local$ = 152
free$ = 160
global$ = 168
analyze_name PROC					; COMDAT

; 417  : {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 418  :     if (flags & DEF_GLOBAL) {

  00018	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR flags$[rsp]
  0001f	83 e0 01	 and	 eax, 1
  00022	85 c0		 test	 eax, eax
  00024	0f 84 34 01 00
	00		 je	 $LN27@analyze_na

; 419  :         if (flags & DEF_PARAM) {

  0002a	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR flags$[rsp]
  00031	83 e0 04	 and	 eax, 4
  00034	85 c0		 test	 eax, eax
  00036	74 4d		 je	 SHORT $LN26@analyze_na

; 420  :             PyErr_Format(PyExc_SyntaxError,
; 421  :                         "name '%U' is parameter and global",
; 422  :                         name);

  00038	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR name$[rsp]
  00040	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CC@NFCHOBNE@name?5?8?$CFU?8?5is?5parameter?5and?5globa@
  00047	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SyntaxError
  0004e	e8 00 00 00 00	 call	 PyErr_Format

; 423  :             PyErr_SyntaxLocationEx(ste->ste_table->st_filename,
; 424  :                                    ste->ste_lineno, ste->ste_col_offset);

  00053	48 8b 44 24 70	 mov	 rax, QWORD PTR ste$[rsp]
  00058	48 8b 80 b0 00
	00 00		 mov	 rax, QWORD PTR [rax+176]
  0005f	48 8b 4c 24 70	 mov	 rcx, QWORD PTR ste$[rsp]
  00064	44 8b 81 9c 00
	00 00		 mov	 r8d, DWORD PTR [rcx+156]
  0006b	48 8b 4c 24 70	 mov	 rcx, QWORD PTR ste$[rsp]
  00070	8b 91 98 00 00
	00		 mov	 edx, DWORD PTR [rcx+152]
  00076	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00079	e8 00 00 00 00	 call	 PyErr_SyntaxLocationEx

; 425  : 
; 426  :             return 0;

  0007e	33 c0		 xor	 eax, eax
  00080	e9 94 04 00 00	 jmp	 $LN28@analyze_na
$LN26@analyze_na:

; 427  :         }
; 428  :         if (flags & DEF_NONLOCAL) {

  00085	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR flags$[rsp]
  0008c	83 e0 08	 and	 eax, 8
  0008f	85 c0		 test	 eax, eax
  00091	74 22		 je	 SHORT $LN25@analyze_na

; 429  :             PyErr_Format(PyExc_SyntaxError,
; 430  :                          "name '%U' is nonlocal and global",
; 431  :                          name);

  00093	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR name$[rsp]
  0009b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CB@GJOAACGI@name?5?8?$CFU?8?5is?5nonlocal?5and?5global@
  000a2	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SyntaxError
  000a9	e8 00 00 00 00	 call	 PyErr_Format

; 432  :             return 0;

  000ae	33 c0		 xor	 eax, eax
  000b0	e9 64 04 00 00	 jmp	 $LN28@analyze_na
$LN25@analyze_na:

; 433  :         }
; 434  :         SET_SCOPE(scopes, name, GLOBAL_EXPLICIT);

  000b5	b9 02 00 00 00	 mov	 ecx, 2
  000ba	e8 00 00 00 00	 call	 PyLong_FromLong
  000bf	48 89 44 24 20	 mov	 QWORD PTR o$21909[rsp], rax
  000c4	48 83 7c 24 20
	00		 cmp	 QWORD PTR o$21909[rsp], 0
  000ca	75 07		 jne	 SHORT $LN24@analyze_na
  000cc	33 c0		 xor	 eax, eax
  000ce	e9 46 04 00 00	 jmp	 $LN28@analyze_na
$LN24@analyze_na:
  000d3	4c 8b 44 24 20	 mov	 r8, QWORD PTR o$21909[rsp]
  000d8	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR name$[rsp]
  000e0	48 8b 4c 24 78	 mov	 rcx, QWORD PTR scopes$[rsp]
  000e5	e8 00 00 00 00	 call	 PyDict_SetItem
  000ea	85 c0		 test	 eax, eax
  000ec	7d 11		 jge	 SHORT $LN23@analyze_na
  000ee	48 8b 4c 24 20	 mov	 rcx, QWORD PTR o$21909[rsp]
  000f3	e8 00 00 00 00	 call	 _Py_DecRef
  000f8	33 c0		 xor	 eax, eax
  000fa	e9 1a 04 00 00	 jmp	 $LN28@analyze_na
$LN23@analyze_na:
  000ff	48 8b 4c 24 20	 mov	 rcx, QWORD PTR o$21909[rsp]
  00104	e8 00 00 00 00	 call	 _Py_DecRef

; 435  :         if (PySet_Add(global, name) < 0)

  00109	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR name$[rsp]
  00111	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR global$[rsp]
  00119	e8 00 00 00 00	 call	 PySet_Add
  0011e	85 c0		 test	 eax, eax
  00120	7d 07		 jge	 SHORT $LN22@analyze_na

; 436  :             return 0;

  00122	33 c0		 xor	 eax, eax
  00124	e9 f0 03 00 00	 jmp	 $LN28@analyze_na
$LN22@analyze_na:

; 437  :         if (bound && (PySet_Discard(bound, name) < 0))

  00129	48 83 bc 24 90
	00 00 00 00	 cmp	 QWORD PTR bound$[rsp], 0
  00132	74 20		 je	 SHORT $LN21@analyze_na
  00134	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR name$[rsp]
  0013c	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR bound$[rsp]
  00144	e8 00 00 00 00	 call	 PySet_Discard
  00149	85 c0		 test	 eax, eax
  0014b	7d 07		 jge	 SHORT $LN21@analyze_na

; 438  :             return 0;

  0014d	33 c0		 xor	 eax, eax
  0014f	e9 c5 03 00 00	 jmp	 $LN28@analyze_na
$LN21@analyze_na:

; 439  :         return 1;

  00154	b8 01 00 00 00	 mov	 eax, 1
  00159	e9 bb 03 00 00	 jmp	 $LN28@analyze_na
$LN27@analyze_na:

; 440  :     }
; 441  :     if (flags & DEF_NONLOCAL) {

  0015e	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR flags$[rsp]
  00165	83 e0 08	 and	 eax, 8
  00168	85 c0		 test	 eax, eax
  0016a	0f 84 31 01 00
	00		 je	 $LN20@analyze_na

; 442  :         if (flags & DEF_PARAM) {

  00170	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR flags$[rsp]
  00177	83 e0 04	 and	 eax, 4
  0017a	85 c0		 test	 eax, eax
  0017c	74 22		 je	 SHORT $LN19@analyze_na

; 443  :             PyErr_Format(PyExc_SyntaxError,
; 444  :                          "name '%U' is parameter and nonlocal",
; 445  :                          name);

  0017e	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR name$[rsp]
  00186	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CE@OLAGPHCF@name?5?8?$CFU?8?5is?5parameter?5and?5nonlo@
  0018d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SyntaxError
  00194	e8 00 00 00 00	 call	 PyErr_Format

; 446  :             return 0;

  00199	33 c0		 xor	 eax, eax
  0019b	e9 79 03 00 00	 jmp	 $LN28@analyze_na
$LN19@analyze_na:

; 447  :         }
; 448  :         if (!bound) {

  001a0	48 83 bc 24 90
	00 00 00 00	 cmp	 QWORD PTR bound$[rsp], 0
  001a9	75 1a		 jne	 SHORT $LN18@analyze_na

; 449  :             PyErr_Format(PyExc_SyntaxError,
; 450  :                          "nonlocal declaration not allowed at module level");

  001ab	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DB@DNKFLDHO@nonlocal?5declaration?5not?5allowed@
  001b2	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SyntaxError
  001b9	e8 00 00 00 00	 call	 PyErr_Format

; 451  :             return 0;

  001be	33 c0		 xor	 eax, eax
  001c0	e9 54 03 00 00	 jmp	 $LN28@analyze_na
$LN18@analyze_na:

; 452  :         }
; 453  :         if (!PySet_Contains(bound, name)) {

  001c5	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR name$[rsp]
  001cd	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR bound$[rsp]
  001d5	e8 00 00 00 00	 call	 PySet_Contains
  001da	85 c0		 test	 eax, eax
  001dc	75 22		 jne	 SHORT $LN17@analyze_na

; 454  :             PyErr_Format(PyExc_SyntaxError,
; 455  :                          "no binding for nonlocal '%U' found",
; 456  :                          name);

  001de	4c 8b 84 24 80
	00 00 00	 mov	 r8, QWORD PTR name$[rsp]
  001e6	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HPFNEAKB@no?5binding?5for?5nonlocal?5?8?$CFU?8?5fou@
  001ed	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SyntaxError
  001f4	e8 00 00 00 00	 call	 PyErr_Format

; 457  : 
; 458  :             return 0;

  001f9	33 c0		 xor	 eax, eax
  001fb	e9 19 03 00 00	 jmp	 $LN28@analyze_na
$LN17@analyze_na:

; 459  :         }
; 460  :         SET_SCOPE(scopes, name, FREE);

  00200	b9 04 00 00 00	 mov	 ecx, 4
  00205	e8 00 00 00 00	 call	 PyLong_FromLong
  0020a	48 89 44 24 28	 mov	 QWORD PTR o$21923[rsp], rax
  0020f	48 83 7c 24 28
	00		 cmp	 QWORD PTR o$21923[rsp], 0
  00215	75 07		 jne	 SHORT $LN16@analyze_na
  00217	33 c0		 xor	 eax, eax
  00219	e9 fb 02 00 00	 jmp	 $LN28@analyze_na
$LN16@analyze_na:
  0021e	4c 8b 44 24 28	 mov	 r8, QWORD PTR o$21923[rsp]
  00223	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR name$[rsp]
  0022b	48 8b 4c 24 78	 mov	 rcx, QWORD PTR scopes$[rsp]
  00230	e8 00 00 00 00	 call	 PyDict_SetItem
  00235	85 c0		 test	 eax, eax
  00237	7d 11		 jge	 SHORT $LN15@analyze_na
  00239	48 8b 4c 24 28	 mov	 rcx, QWORD PTR o$21923[rsp]
  0023e	e8 00 00 00 00	 call	 _Py_DecRef
  00243	33 c0		 xor	 eax, eax
  00245	e9 cf 02 00 00	 jmp	 $LN28@analyze_na
$LN15@analyze_na:
  0024a	48 8b 4c 24 28	 mov	 rcx, QWORD PTR o$21923[rsp]
  0024f	e8 00 00 00 00	 call	 _Py_DecRef

; 461  :         ste->ste_free = 1;

  00254	48 8b 44 24 70	 mov	 rax, QWORD PTR ste$[rsp]
  00259	8b 80 94 00 00
	00		 mov	 eax, DWORD PTR [rax+148]
  0025f	83 c8 01	 or	 eax, 1
  00262	48 8b 4c 24 70	 mov	 rcx, QWORD PTR ste$[rsp]
  00267	89 81 94 00 00
	00		 mov	 DWORD PTR [rcx+148], eax

; 462  :         return PySet_Add(free, name) >= 0;

  0026d	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR name$[rsp]
  00275	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR free$[rsp]
  0027d	e8 00 00 00 00	 call	 PySet_Add
  00282	85 c0		 test	 eax, eax
  00284	7c 0a		 jl	 SHORT $LN30@analyze_na
  00286	c7 44 24 50 01
	00 00 00	 mov	 DWORD PTR tv168[rsp], 1
  0028e	eb 08		 jmp	 SHORT $LN31@analyze_na
$LN30@analyze_na:
  00290	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR tv168[rsp], 0
$LN31@analyze_na:
  00298	8b 44 24 50	 mov	 eax, DWORD PTR tv168[rsp]
  0029c	e9 78 02 00 00	 jmp	 $LN28@analyze_na
$LN20@analyze_na:

; 463  :     }
; 464  :     if (flags & DEF_BOUND) {

  002a1	8b 84 24 88 00
	00 00		 mov	 eax, DWORD PTR flags$[rsp]
  002a8	25 86 00 00 00	 and	 eax, 134		; 00000086H
  002ad	85 c0		 test	 eax, eax
  002af	0f 84 9e 00 00
	00		 je	 $LN14@analyze_na

; 465  :         SET_SCOPE(scopes, name, LOCAL);

  002b5	b9 01 00 00 00	 mov	 ecx, 1
  002ba	e8 00 00 00 00	 call	 PyLong_FromLong
  002bf	48 89 44 24 30	 mov	 QWORD PTR o$21929[rsp], rax
  002c4	48 83 7c 24 30
	00		 cmp	 QWORD PTR o$21929[rsp], 0
  002ca	75 07		 jne	 SHORT $LN13@analyze_na
  002cc	33 c0		 xor	 eax, eax
  002ce	e9 46 02 00 00	 jmp	 $LN28@analyze_na
$LN13@analyze_na:
  002d3	4c 8b 44 24 30	 mov	 r8, QWORD PTR o$21929[rsp]
  002d8	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR name$[rsp]
  002e0	48 8b 4c 24 78	 mov	 rcx, QWORD PTR scopes$[rsp]
  002e5	e8 00 00 00 00	 call	 PyDict_SetItem
  002ea	85 c0		 test	 eax, eax
  002ec	7d 11		 jge	 SHORT $LN12@analyze_na
  002ee	48 8b 4c 24 30	 mov	 rcx, QWORD PTR o$21929[rsp]
  002f3	e8 00 00 00 00	 call	 _Py_DecRef
  002f8	33 c0		 xor	 eax, eax
  002fa	e9 1a 02 00 00	 jmp	 $LN28@analyze_na
$LN12@analyze_na:
  002ff	48 8b 4c 24 30	 mov	 rcx, QWORD PTR o$21929[rsp]
  00304	e8 00 00 00 00	 call	 _Py_DecRef

; 466  :         if (PySet_Add(local, name) < 0)

  00309	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR name$[rsp]
  00311	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR local$[rsp]
  00319	e8 00 00 00 00	 call	 PySet_Add
  0031e	85 c0		 test	 eax, eax
  00320	7d 07		 jge	 SHORT $LN11@analyze_na

; 467  :             return 0;

  00322	33 c0		 xor	 eax, eax
  00324	e9 f0 01 00 00	 jmp	 $LN28@analyze_na
$LN11@analyze_na:

; 468  :         if (PySet_Discard(global, name) < 0)

  00329	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR name$[rsp]
  00331	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR global$[rsp]
  00339	e8 00 00 00 00	 call	 PySet_Discard
  0033e	85 c0		 test	 eax, eax
  00340	7d 07		 jge	 SHORT $LN10@analyze_na

; 469  :             return 0;

  00342	33 c0		 xor	 eax, eax
  00344	e9 d0 01 00 00	 jmp	 $LN28@analyze_na
$LN10@analyze_na:

; 470  :         return 1;

  00349	b8 01 00 00 00	 mov	 eax, 1
  0034e	e9 c6 01 00 00	 jmp	 $LN28@analyze_na
$LN14@analyze_na:

; 471  :     }
; 472  :     /* If an enclosing block has a binding for this name, it
; 473  :        is a free variable rather than a global variable.
; 474  :        Note that having a non-NULL bound implies that the block
; 475  :        is nested.
; 476  :     */
; 477  :     if (bound && PySet_Contains(bound, name)) {

  00353	48 83 bc 24 90
	00 00 00 00	 cmp	 QWORD PTR bound$[rsp], 0
  0035c	0f 84 be 00 00
	00		 je	 $LN9@analyze_na
  00362	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR name$[rsp]
  0036a	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR bound$[rsp]
  00372	e8 00 00 00 00	 call	 PySet_Contains
  00377	85 c0		 test	 eax, eax
  00379	0f 84 a1 00 00
	00		 je	 $LN9@analyze_na

; 478  :         SET_SCOPE(scopes, name, FREE);

  0037f	b9 04 00 00 00	 mov	 ecx, 4
  00384	e8 00 00 00 00	 call	 PyLong_FromLong
  00389	48 89 44 24 38	 mov	 QWORD PTR o$21937[rsp], rax
  0038e	48 83 7c 24 38
	00		 cmp	 QWORD PTR o$21937[rsp], 0
  00394	75 07		 jne	 SHORT $LN8@analyze_na
  00396	33 c0		 xor	 eax, eax
  00398	e9 7c 01 00 00	 jmp	 $LN28@analyze_na
$LN8@analyze_na:
  0039d	4c 8b 44 24 38	 mov	 r8, QWORD PTR o$21937[rsp]
  003a2	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR name$[rsp]
  003aa	48 8b 4c 24 78	 mov	 rcx, QWORD PTR scopes$[rsp]
  003af	e8 00 00 00 00	 call	 PyDict_SetItem
  003b4	85 c0		 test	 eax, eax
  003b6	7d 11		 jge	 SHORT $LN7@analyze_na
  003b8	48 8b 4c 24 38	 mov	 rcx, QWORD PTR o$21937[rsp]
  003bd	e8 00 00 00 00	 call	 _Py_DecRef
  003c2	33 c0		 xor	 eax, eax
  003c4	e9 50 01 00 00	 jmp	 $LN28@analyze_na
$LN7@analyze_na:
  003c9	48 8b 4c 24 38	 mov	 rcx, QWORD PTR o$21937[rsp]
  003ce	e8 00 00 00 00	 call	 _Py_DecRef

; 479  :         ste->ste_free = 1;

  003d3	48 8b 44 24 70	 mov	 rax, QWORD PTR ste$[rsp]
  003d8	8b 80 94 00 00
	00		 mov	 eax, DWORD PTR [rax+148]
  003de	83 c8 01	 or	 eax, 1
  003e1	48 8b 4c 24 70	 mov	 rcx, QWORD PTR ste$[rsp]
  003e6	89 81 94 00 00
	00		 mov	 DWORD PTR [rcx+148], eax

; 480  :         return PySet_Add(free, name) >= 0;

  003ec	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR name$[rsp]
  003f4	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR free$[rsp]
  003fc	e8 00 00 00 00	 call	 PySet_Add
  00401	85 c0		 test	 eax, eax
  00403	7c 0a		 jl	 SHORT $LN32@analyze_na
  00405	c7 44 24 54 01
	00 00 00	 mov	 DWORD PTR tv211[rsp], 1
  0040d	eb 08		 jmp	 SHORT $LN33@analyze_na
$LN32@analyze_na:
  0040f	c7 44 24 54 00
	00 00 00	 mov	 DWORD PTR tv211[rsp], 0
$LN33@analyze_na:
  00417	8b 44 24 54	 mov	 eax, DWORD PTR tv211[rsp]
  0041b	e9 f9 00 00 00	 jmp	 $LN28@analyze_na
$LN9@analyze_na:

; 481  :     }
; 482  :     /* If a parent has a global statement, then call it global
; 483  :        explicit?  It could also be global implicit.
; 484  :      */
; 485  :     if (global && PySet_Contains(global, name)) {

  00420	48 83 bc 24 a8
	00 00 00 00	 cmp	 QWORD PTR global$[rsp], 0
  00429	74 74		 je	 SHORT $LN6@analyze_na
  0042b	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR name$[rsp]
  00433	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR global$[rsp]
  0043b	e8 00 00 00 00	 call	 PySet_Contains
  00440	85 c0		 test	 eax, eax
  00442	74 5b		 je	 SHORT $LN6@analyze_na

; 486  :         SET_SCOPE(scopes, name, GLOBAL_IMPLICIT);

  00444	b9 03 00 00 00	 mov	 ecx, 3
  00449	e8 00 00 00 00	 call	 PyLong_FromLong
  0044e	48 89 44 24 40	 mov	 QWORD PTR o$21943[rsp], rax
  00453	48 83 7c 24 40
	00		 cmp	 QWORD PTR o$21943[rsp], 0
  00459	75 07		 jne	 SHORT $LN5@analyze_na
  0045b	33 c0		 xor	 eax, eax
  0045d	e9 b7 00 00 00	 jmp	 $LN28@analyze_na
$LN5@analyze_na:
  00462	4c 8b 44 24 40	 mov	 r8, QWORD PTR o$21943[rsp]
  00467	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR name$[rsp]
  0046f	48 8b 4c 24 78	 mov	 rcx, QWORD PTR scopes$[rsp]
  00474	e8 00 00 00 00	 call	 PyDict_SetItem
  00479	85 c0		 test	 eax, eax
  0047b	7d 11		 jge	 SHORT $LN4@analyze_na
  0047d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR o$21943[rsp]
  00482	e8 00 00 00 00	 call	 _Py_DecRef
  00487	33 c0		 xor	 eax, eax
  00489	e9 8b 00 00 00	 jmp	 $LN28@analyze_na
$LN4@analyze_na:
  0048e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR o$21943[rsp]
  00493	e8 00 00 00 00	 call	 _Py_DecRef

; 487  :         return 1;

  00498	b8 01 00 00 00	 mov	 eax, 1
  0049d	eb 7a		 jmp	 SHORT $LN28@analyze_na
$LN6@analyze_na:

; 488  :     }
; 489  :     if (ste->ste_nested)

  0049f	48 8b 44 24 70	 mov	 rax, QWORD PTR ste$[rsp]
  004a4	83 b8 90 00 00
	00 00		 cmp	 DWORD PTR [rax+144], 0
  004ab	74 19		 je	 SHORT $LN3@analyze_na

; 490  :         ste->ste_free = 1;

  004ad	48 8b 44 24 70	 mov	 rax, QWORD PTR ste$[rsp]
  004b2	8b 80 94 00 00
	00		 mov	 eax, DWORD PTR [rax+148]
  004b8	83 c8 01	 or	 eax, 1
  004bb	48 8b 4c 24 70	 mov	 rcx, QWORD PTR ste$[rsp]
  004c0	89 81 94 00 00
	00		 mov	 DWORD PTR [rcx+148], eax
$LN3@analyze_na:

; 491  :     SET_SCOPE(scopes, name, GLOBAL_IMPLICIT);

  004c6	b9 03 00 00 00	 mov	 ecx, 3
  004cb	e8 00 00 00 00	 call	 PyLong_FromLong
  004d0	48 89 44 24 48	 mov	 QWORD PTR o$21949[rsp], rax
  004d5	48 83 7c 24 48
	00		 cmp	 QWORD PTR o$21949[rsp], 0
  004db	75 04		 jne	 SHORT $LN2@analyze_na
  004dd	33 c0		 xor	 eax, eax
  004df	eb 38		 jmp	 SHORT $LN28@analyze_na
$LN2@analyze_na:
  004e1	4c 8b 44 24 48	 mov	 r8, QWORD PTR o$21949[rsp]
  004e6	48 8b 94 24 80
	00 00 00	 mov	 rdx, QWORD PTR name$[rsp]
  004ee	48 8b 4c 24 78	 mov	 rcx, QWORD PTR scopes$[rsp]
  004f3	e8 00 00 00 00	 call	 PyDict_SetItem
  004f8	85 c0		 test	 eax, eax
  004fa	7d 0e		 jge	 SHORT $LN1@analyze_na
  004fc	48 8b 4c 24 48	 mov	 rcx, QWORD PTR o$21949[rsp]
  00501	e8 00 00 00 00	 call	 _Py_DecRef
  00506	33 c0		 xor	 eax, eax
  00508	eb 0f		 jmp	 SHORT $LN28@analyze_na
$LN1@analyze_na:
  0050a	48 8b 4c 24 48	 mov	 rcx, QWORD PTR o$21949[rsp]
  0050f	e8 00 00 00 00	 call	 _Py_DecRef

; 492  :     return 1;

  00514	b8 01 00 00 00	 mov	 eax, 1
$LN28@analyze_na:

; 493  : }

  00519	48 83 c4 68	 add	 rsp, 104		; 00000068H
  0051d	c3		 ret	 0
analyze_name ENDP
_TEXT	ENDS
EXTRN	PyUnicode_CompareWithASCIIString:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$analyze_cells DD imagerel analyze_cells
	DD	imagerel analyze_cells+309
	DD	imagerel $unwind$analyze_cells
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$analyze_cells DD 011301H
	DD	0a213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT analyze_cells
_TEXT	SEGMENT
v$ = 32
v_cell$ = 40
success$ = 48
name$ = 56
pos$ = 64
scope$21971 = 72
scopes$ = 96
free$ = 104
restricted$ = 112
analyze_cells PROC					; COMDAT

; 510  : {

  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 511  :     PyObject *name, *v, *v_cell;
; 512  :     int success = 0;

  00013	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR success$[rsp], 0

; 513  :     Py_ssize_t pos = 0;

  0001b	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR pos$[rsp], 0

; 514  : 
; 515  :     v_cell = PyLong_FromLong(CELL);

  00024	b9 05 00 00 00	 mov	 ecx, 5
  00029	e8 00 00 00 00	 call	 PyLong_FromLong
  0002e	48 89 44 24 28	 mov	 QWORD PTR v_cell$[rsp], rax

; 516  :     if (!v_cell)

  00033	48 83 7c 24 28
	00		 cmp	 QWORD PTR v_cell$[rsp], 0
  00039	75 07		 jne	 SHORT $LN8@analyze_ce

; 517  :         return 0;

  0003b	33 c0		 xor	 eax, eax
  0003d	e9 ee 00 00 00	 jmp	 $LN9@analyze_ce
$LN8@analyze_ce:
$LN14@analyze_ce:
$LN13@analyze_ce:
$LN12@analyze_ce:
$LN7@analyze_ce:

; 518  :     while (PyDict_Next(scopes, &pos, &name, &v)) {

  00042	4c 8d 4c 24 20	 lea	 r9, QWORD PTR v$[rsp]
  00047	4c 8d 44 24 38	 lea	 r8, QWORD PTR name$[rsp]
  0004c	48 8d 54 24 40	 lea	 rdx, QWORD PTR pos$[rsp]
  00051	48 8b 4c 24 60	 mov	 rcx, QWORD PTR scopes$[rsp]
  00056	e8 00 00 00 00	 call	 PyDict_Next
  0005b	85 c0		 test	 eax, eax
  0005d	0f 84 b7 00 00
	00		 je	 $LN6@analyze_ce

; 519  :         long scope;
; 520  :         assert(PyLong_Check(v));

  00063	48 8b 44 24 20	 mov	 rax, QWORD PTR v$[rsp]
  00068	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0006c	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00072	25 00 00 00 01	 and	 eax, 16777216		; 01000000H
  00077	85 c0		 test	 eax, eax
  00079	75 1c		 jne	 SHORT $LN11@analyze_ce
  0007b	41 b8 08 02 00
	00		 mov	 r8d, 520		; 00000208H
  00081	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CK@FBNLAPOG@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAs?$AAy?$AAm?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  00088	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CA@NJGFBMIA@?$AAP?$AAy?$AAL?$AAo?$AAn?$AAg?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAv?$AA?$CJ?$AA?$AA@
  0008f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00095	33 c0		 xor	 eax, eax
$LN11@analyze_ce:

; 521  :         scope = PyLong_AS_LONG(v);

  00097	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  0009c	e8 00 00 00 00	 call	 PyLong_AsLong
  000a1	89 44 24 48	 mov	 DWORD PTR scope$21971[rsp], eax

; 522  :         if (scope != LOCAL)

  000a5	83 7c 24 48 01	 cmp	 DWORD PTR scope$21971[rsp], 1
  000aa	74 02		 je	 SHORT $LN5@analyze_ce

; 523  :             continue;

  000ac	eb 94		 jmp	 SHORT $LN7@analyze_ce
$LN5@analyze_ce:

; 524  :         if (!PySet_Contains(free, name))

  000ae	48 8b 54 24 38	 mov	 rdx, QWORD PTR name$[rsp]
  000b3	48 8b 4c 24 68	 mov	 rcx, QWORD PTR free$[rsp]
  000b8	e8 00 00 00 00	 call	 PySet_Contains
  000bd	85 c0		 test	 eax, eax
  000bf	75 05		 jne	 SHORT $LN4@analyze_ce

; 525  :             continue;

  000c1	e9 7c ff ff ff	 jmp	 $LN12@analyze_ce
$LN4@analyze_ce:

; 526  :         if (restricted != NULL &&
; 527  :             PyUnicode_CompareWithASCIIString(name, restricted))

  000c6	48 83 7c 24 70
	00		 cmp	 QWORD PTR restricted$[rsp], 0
  000cc	74 18		 je	 SHORT $LN3@analyze_ce
  000ce	48 8b 54 24 70	 mov	 rdx, QWORD PTR restricted$[rsp]
  000d3	48 8b 4c 24 38	 mov	 rcx, QWORD PTR name$[rsp]
  000d8	e8 00 00 00 00	 call	 PyUnicode_CompareWithASCIIString
  000dd	85 c0		 test	 eax, eax
  000df	74 05		 je	 SHORT $LN3@analyze_ce

; 528  :             continue;

  000e1	e9 5c ff ff ff	 jmp	 $LN13@analyze_ce
$LN3@analyze_ce:

; 529  :         /* Replace LOCAL with CELL for this name, and remove
; 530  :            from free. It is safe to replace the value of name
; 531  :            in the dict, because it will not cause a resize.
; 532  :          */
; 533  :         if (PyDict_SetItem(scopes, name, v_cell) < 0)

  000e6	4c 8b 44 24 28	 mov	 r8, QWORD PTR v_cell$[rsp]
  000eb	48 8b 54 24 38	 mov	 rdx, QWORD PTR name$[rsp]
  000f0	48 8b 4c 24 60	 mov	 rcx, QWORD PTR scopes$[rsp]
  000f5	e8 00 00 00 00	 call	 PyDict_SetItem
  000fa	85 c0		 test	 eax, eax
  000fc	7d 02		 jge	 SHORT $LN2@analyze_ce

; 534  :             goto error;

  000fe	eb 22		 jmp	 SHORT $error$21979
$LN2@analyze_ce:

; 535  :         if (PySet_Discard(free, name) < 0)

  00100	48 8b 54 24 38	 mov	 rdx, QWORD PTR name$[rsp]
  00105	48 8b 4c 24 68	 mov	 rcx, QWORD PTR free$[rsp]
  0010a	e8 00 00 00 00	 call	 PySet_Discard
  0010f	85 c0		 test	 eax, eax
  00111	7d 02		 jge	 SHORT $LN1@analyze_ce

; 536  :             goto error;

  00113	eb 0d		 jmp	 SHORT $error$21979
$LN1@analyze_ce:

; 537  :     }

  00115	e9 28 ff ff ff	 jmp	 $LN14@analyze_ce
$LN6@analyze_ce:

; 538  :     success = 1;

  0011a	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR success$[rsp], 1
$error$21979:

; 539  :  error:
; 540  :     Py_DECREF(v_cell);

  00122	48 8b 4c 24 28	 mov	 rcx, QWORD PTR v_cell$[rsp]
  00127	e8 00 00 00 00	 call	 _Py_DecRef

; 541  :     return success;

  0012c	8b 44 24 30	 mov	 eax, DWORD PTR success$[rsp]
$LN9@analyze_ce:

; 542  : }

  00130	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00134	c3		 ret	 0
analyze_cells ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DH@PNKKFHBN@import?5?$CK?5is?5not?5allowed?5in?5funct@ ; `string'
PUBLIC	??_C@_0BF@PABOBAIG@is?5a?5nested?5function?$AA@	; `string'
PUBLIC	??_C@_0CP@OCDIMPMO@contains?5a?5nested?5function?5with?5@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$check_unoptimized DD imagerel check_unoptimized
	DD	imagerel check_unoptimized+262
	DD	imagerel $unwind$check_unoptimized
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$check_unoptimized DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0DH@PNKKFHBN@import?5?$CK?5is?5not?5allowed?5in?5funct@
CONST	SEGMENT
??_C@_0DH@PNKKFHBN@import?5?$CK?5is?5not?5allowed?5in?5funct@ DB 'import '
	DB	'* is not allowed in function ''%U'' because it %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@PABOBAIG@is?5a?5nested?5function?$AA@
CONST	SEGMENT
??_C@_0BF@PABOBAIG@is?5a?5nested?5function?$AA@ DB 'is a nested function', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@OCDIMPMO@contains?5a?5nested?5function?5with?5@
CONST	SEGMENT
??_C@_0CP@OCDIMPMO@contains?5a?5nested?5function?5with?5@ DB 'contains a '
	DB	'nested function with free variables', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT check_unoptimized
_TEXT	SEGMENT
trailer$ = 32
tv79 = 40
tv81 = 48
ste$ = 80
check_unoptimized PROC					; COMDAT

; 546  : check_unoptimized(const PySTEntryObject* ste) {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 547  :     const char* trailer;
; 548  : 
; 549  :     if (ste->ste_type != FunctionBlock || !ste->ste_unoptimized
; 550  :         || !(ste->ste_free || ste->ste_child_free))

  00009	48 8b 44 24 50	 mov	 rax, QWORD PTR ste$[rsp]
  0000e	83 b8 88 00 00
	00 00		 cmp	 DWORD PTR [rax+136], 0
  00015	75 34		 jne	 SHORT $LN5@check_unop
  00017	48 8b 44 24 50	 mov	 rax, QWORD PTR ste$[rsp]
  0001c	83 b8 8c 00 00
	00 00		 cmp	 DWORD PTR [rax+140], 0
  00023	74 26		 je	 SHORT $LN5@check_unop
  00025	48 8b 44 24 50	 mov	 rax, QWORD PTR ste$[rsp]
  0002a	8b 80 94 00 00
	00		 mov	 eax, DWORD PTR [rax+148]
  00030	83 e0 01	 and	 eax, 1
  00033	85 c0		 test	 eax, eax
  00035	75 1e		 jne	 SHORT $LN6@check_unop
  00037	48 8b 44 24 50	 mov	 rax, QWORD PTR ste$[rsp]
  0003c	8b 80 94 00 00
	00		 mov	 eax, DWORD PTR [rax+148]
  00042	d1 e8		 shr	 eax, 1
  00044	83 e0 01	 and	 eax, 1
  00047	85 c0		 test	 eax, eax
  00049	75 0a		 jne	 SHORT $LN6@check_unop
$LN5@check_unop:

; 551  :         return 1;

  0004b	b8 01 00 00 00	 mov	 eax, 1
  00050	e9 ac 00 00 00	 jmp	 $LN7@check_unop
$LN6@check_unop:

; 552  : 
; 553  :     trailer = (ste->ste_child_free ?
; 554  :                    "contains a nested function with free variables" :
; 555  :                    "is a nested function");

  00055	48 8b 44 24 50	 mov	 rax, QWORD PTR ste$[rsp]
  0005a	8b 80 94 00 00
	00		 mov	 eax, DWORD PTR [rax+148]
  00060	d1 e8		 shr	 eax, 1
  00062	83 e0 01	 and	 eax, 1
  00065	85 c0		 test	 eax, eax
  00067	74 0e		 je	 SHORT $LN9@check_unop
  00069	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0CP@OCDIMPMO@contains?5a?5nested?5function?5with?5@
  00070	48 89 44 24 28	 mov	 QWORD PTR tv79[rsp], rax
  00075	eb 0c		 jmp	 SHORT $LN10@check_unop
$LN9@check_unop:
  00077	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:??_C@_0BF@PABOBAIG@is?5a?5nested?5function?$AA@
  0007e	48 89 44 24 28	 mov	 QWORD PTR tv79[rsp], rax
$LN10@check_unop:
  00083	48 8b 44 24 28	 mov	 rax, QWORD PTR tv79[rsp]
  00088	48 89 44 24 20	 mov	 QWORD PTR trailer$[rsp], rax

; 556  : 
; 557  :     switch (ste->ste_unoptimized) {

  0008d	48 8b 44 24 50	 mov	 rax, QWORD PTR ste$[rsp]
  00092	8b 80 8c 00 00
	00		 mov	 eax, DWORD PTR [rax+140]
  00098	89 44 24 30	 mov	 DWORD PTR tv81[rsp], eax
  0009c	83 7c 24 30 01	 cmp	 DWORD PTR tv81[rsp], 1
  000a1	74 10		 je	 SHORT $LN1@check_unop
  000a3	83 7c 24 30 02	 cmp	 DWORD PTR tv81[rsp], 2
  000a8	74 02		 je	 SHORT $LN2@check_unop
  000aa	eb 28		 jmp	 SHORT $LN3@check_unop
$LN2@check_unop:

; 558  :     case OPT_TOPLEVEL: /* import * at top-level is fine */
; 559  :         return 1;

  000ac	b8 01 00 00 00	 mov	 eax, 1
  000b1	eb 4e		 jmp	 SHORT $LN7@check_unop
$LN1@check_unop:

; 560  :     case OPT_IMPORT_STAR:
; 561  :         PyErr_Format(PyExc_SyntaxError,
; 562  :                      "import * is not allowed in function '%U' because it %s",
; 563  :                      ste->ste_name, trailer);

  000b3	4c 8b 4c 24 20	 mov	 r9, QWORD PTR trailer$[rsp]
  000b8	48 8b 44 24 50	 mov	 rax, QWORD PTR ste$[rsp]
  000bd	4c 8b 40 70	 mov	 r8, QWORD PTR [rax+112]
  000c1	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DH@PNKKFHBN@import?5?$CK?5is?5not?5allowed?5in?5funct@
  000c8	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SyntaxError
  000cf	e8 00 00 00 00	 call	 PyErr_Format
$LN3@check_unop:

; 564  :         break;
; 565  :     }
; 566  : 
; 567  :     PyErr_SyntaxLocationEx(ste->ste_table->st_filename, ste->ste_opt_lineno,
; 568  :                            ste->ste_opt_col_offset);

  000d4	48 8b 44 24 50	 mov	 rax, QWORD PTR ste$[rsp]
  000d9	48 8b 80 b0 00
	00 00		 mov	 rax, QWORD PTR [rax+176]
  000e0	48 8b 4c 24 50	 mov	 rcx, QWORD PTR ste$[rsp]
  000e5	44 8b 81 a4 00
	00 00		 mov	 r8d, DWORD PTR [rcx+164]
  000ec	48 8b 4c 24 50	 mov	 rcx, QWORD PTR ste$[rsp]
  000f1	8b 91 a0 00 00
	00		 mov	 edx, DWORD PTR [rcx+160]
  000f7	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  000fa	e8 00 00 00 00	 call	 PyErr_SyntaxLocationEx

; 569  :     return 0;

  000ff	33 c0		 xor	 eax, eax
$LN7@check_unop:

; 570  : }

  00101	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00105	c3		 ret	 0
check_unoptimized ENDP
_TEXT	ENDS
PUBLIC	??_C@_1EC@CIFJIPIP@?$AAv?$AA_?$AAs?$AAc?$AAo?$AAp?$AAe?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAP?$AAy?$AAL?$AAo?$AAn?$AAg?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAv?$AA_?$AAs?$AAc?$AAo?$AAp?$AAe?$AA?$CJ@ ; `string'
EXTRN	PyIter_Next:PROC
EXTRN	PyObject_GetIter:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$update_symbols DD imagerel update_symbols
	DD	imagerel update_symbols+843
	DD	imagerel $unwind$update_symbols
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$update_symbols DD 011801H
	DD	0e218H
xdata	ENDS
;	COMDAT ??_C@_1EC@CIFJIPIP@?$AAv?$AA_?$AAs?$AAc?$AAo?$AAp?$AAe?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAP?$AAy?$AAL?$AAo?$AAn?$AAg?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAv?$AA_?$AAs?$AAc?$AAo?$AAp?$AAe?$AA?$CJ@
CONST	SEGMENT
??_C@_1EC@CIFJIPIP@?$AAv?$AA_?$AAs?$AAc?$AAo?$AAp?$AAe?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAP?$AAy?$AAL?$AAo?$AAn?$AAg?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAv?$AA_?$AAs?$AAc?$AAo?$AAp?$AAe?$AA?$CJ@ DB 'v'
	DB	00H, '_', 00H, 's', 00H, 'c', 00H, 'o', 00H, 'p', 00H, 'e', 00H
	DB	' ', 00H, '&', 00H, '&', 00H, ' ', 00H, 'P', 00H, 'y', 00H, 'L'
	DB	00H, 'o', 00H, 'n', 00H, 'g', 00H, '_', 00H, 'C', 00H, 'h', 00H
	DB	'e', 00H, 'c', 00H, 'k', 00H, '(', 00H, 'v', 00H, '_', 00H, 's'
	DB	00H, 'c', 00H, 'o', 00H, 'p', 00H, 'e', 00H, ')', 00H, 00H, 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT update_symbols
_TEXT	SEGMENT
itr$ = 32
v_free$ = 40
v_scope$ = 48
v$ = 56
v_new$ = 64
name$ = 72
pos$ = 80
flags$22027 = 88
scope$22026 = 92
flags$22045 = 96
symbols$ = 128
scopes$ = 136
bound$ = 144
free$ = 152
classflag$ = 160
update_symbols PROC					; COMDAT

; 579  : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 78	 sub	 rsp, 120		; 00000078H

; 580  :     PyObject *name = NULL, *itr = NULL;

  00018	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR name$[rsp], 0
  00021	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR itr$[rsp], 0

; 581  :     PyObject *v = NULL, *v_scope = NULL, *v_new = NULL, *v_free = NULL;

  0002a	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR v$[rsp], 0
  00033	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR v_scope$[rsp], 0
  0003c	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR v_new$[rsp], 0
  00045	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR v_free$[rsp], 0

; 582  :     Py_ssize_t pos = 0;

  0004e	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR pos$[rsp], 0
$LN26@update_sym:

; 583  : 
; 584  :     /* Update scope information for all symbols in this scope */
; 585  :     while (PyDict_Next(symbols, &pos, &name, &v)) {

  00057	4c 8d 4c 24 38	 lea	 r9, QWORD PTR v$[rsp]
  0005c	4c 8d 44 24 48	 lea	 r8, QWORD PTR name$[rsp]
  00061	48 8d 54 24 50	 lea	 rdx, QWORD PTR pos$[rsp]
  00066	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR symbols$[rsp]
  0006e	e8 00 00 00 00	 call	 PyDict_Next
  00073	85 c0		 test	 eax, eax
  00075	0f 84 0e 01 00
	00		 je	 $LN25@update_sym

; 586  :         long scope, flags;
; 587  :         assert(PyLong_Check(v));

  0007b	48 8b 44 24 38	 mov	 rax, QWORD PTR v$[rsp]
  00080	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  00084	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  0008a	25 00 00 00 01	 and	 eax, 16777216		; 01000000H
  0008f	85 c0		 test	 eax, eax
  00091	75 1c		 jne	 SHORT $LN29@update_sym
  00093	41 b8 4b 02 00
	00		 mov	 r8d, 587		; 0000024bH
  00099	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CK@FBNLAPOG@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAs?$AAy?$AAm?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  000a0	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CA@NJGFBMIA@?$AAP?$AAy?$AAL?$AAo?$AAn?$AAg?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAv?$AA?$CJ?$AA?$AA@
  000a7	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000ad	33 c0		 xor	 eax, eax
$LN29@update_sym:

; 588  :         flags = PyLong_AS_LONG(v);

  000af	48 8b 4c 24 38	 mov	 rcx, QWORD PTR v$[rsp]
  000b4	e8 00 00 00 00	 call	 PyLong_AsLong
  000b9	89 44 24 58	 mov	 DWORD PTR flags$22027[rsp], eax

; 589  :         v_scope = PyDict_GetItem(scopes, name);

  000bd	48 8b 54 24 48	 mov	 rdx, QWORD PTR name$[rsp]
  000c2	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR scopes$[rsp]
  000ca	e8 00 00 00 00	 call	 PyDict_GetItem
  000cf	48 89 44 24 30	 mov	 QWORD PTR v_scope$[rsp], rax

; 590  :         assert(v_scope && PyLong_Check(v_scope));

  000d4	48 83 7c 24 30
	00		 cmp	 QWORD PTR v_scope$[rsp], 0
  000da	74 18		 je	 SHORT $LN30@update_sym
  000dc	48 8b 44 24 30	 mov	 rax, QWORD PTR v_scope$[rsp]
  000e1	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  000e5	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  000eb	25 00 00 00 01	 and	 eax, 16777216		; 01000000H
  000f0	85 c0		 test	 eax, eax
  000f2	75 1c		 jne	 SHORT $LN31@update_sym
$LN30@update_sym:
  000f4	41 b8 4e 02 00
	00		 mov	 r8d, 590		; 0000024eH
  000fa	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CK@FBNLAPOG@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAs?$AAy?$AAm?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  00101	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1EC@CIFJIPIP@?$AAv?$AA_?$AAs?$AAc?$AAo?$AAp?$AAe?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAP?$AAy?$AAL?$AAo?$AAn?$AAg?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAv?$AA_?$AAs?$AAc?$AAo?$AAp?$AAe?$AA?$CJ@
  00108	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  0010e	33 c0		 xor	 eax, eax
$LN31@update_sym:

; 591  :         scope = PyLong_AS_LONG(v_scope);

  00110	48 8b 4c 24 30	 mov	 rcx, QWORD PTR v_scope$[rsp]
  00115	e8 00 00 00 00	 call	 PyLong_AsLong
  0011a	89 44 24 5c	 mov	 DWORD PTR scope$22026[rsp], eax

; 592  :         flags |= (scope << SCOPE_OFFSET);

  0011e	8b 44 24 5c	 mov	 eax, DWORD PTR scope$22026[rsp]
  00122	c1 e0 0b	 shl	 eax, 11
  00125	8b 4c 24 58	 mov	 ecx, DWORD PTR flags$22027[rsp]
  00129	0b c8		 or	 ecx, eax
  0012b	8b c1		 mov	 eax, ecx
  0012d	89 44 24 58	 mov	 DWORD PTR flags$22027[rsp], eax

; 593  :         v_new = PyLong_FromLong(flags);

  00131	8b 4c 24 58	 mov	 ecx, DWORD PTR flags$22027[rsp]
  00135	e8 00 00 00 00	 call	 PyLong_FromLong
  0013a	48 89 44 24 40	 mov	 QWORD PTR v_new$[rsp], rax

; 594  :         if (!v_new)

  0013f	48 83 7c 24 40
	00		 cmp	 QWORD PTR v_new$[rsp], 0
  00145	75 07		 jne	 SHORT $LN24@update_sym

; 595  :             return 0;

  00147	33 c0		 xor	 eax, eax
  00149	e9 f8 01 00 00	 jmp	 $LN27@update_sym
$LN24@update_sym:

; 596  :         if (PyDict_SetItem(symbols, name, v_new) < 0) {

  0014e	4c 8b 44 24 40	 mov	 r8, QWORD PTR v_new$[rsp]
  00153	48 8b 54 24 48	 mov	 rdx, QWORD PTR name$[rsp]
  00158	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR symbols$[rsp]
  00160	e8 00 00 00 00	 call	 PyDict_SetItem
  00165	85 c0		 test	 eax, eax
  00167	7d 11		 jge	 SHORT $LN23@update_sym

; 597  :             Py_DECREF(v_new);

  00169	48 8b 4c 24 40	 mov	 rcx, QWORD PTR v_new$[rsp]
  0016e	e8 00 00 00 00	 call	 _Py_DecRef

; 598  :             return 0;

  00173	33 c0		 xor	 eax, eax
  00175	e9 cc 01 00 00	 jmp	 $LN27@update_sym
$LN23@update_sym:

; 599  :         }
; 600  :         Py_DECREF(v_new);

  0017a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR v_new$[rsp]
  0017f	e8 00 00 00 00	 call	 _Py_DecRef

; 601  :     }

  00184	e9 ce fe ff ff	 jmp	 $LN26@update_sym
$LN25@update_sym:

; 602  : 
; 603  :     /* Record not yet resolved free variables from children (if any) */
; 604  :     v_free = PyLong_FromLong(FREE << SCOPE_OFFSET);

  00189	b9 00 20 00 00	 mov	 ecx, 8192		; 00002000H
  0018e	e8 00 00 00 00	 call	 PyLong_FromLong
  00193	48 89 44 24 28	 mov	 QWORD PTR v_free$[rsp], rax

; 605  :     if (!v_free)

  00198	48 83 7c 24 28
	00		 cmp	 QWORD PTR v_free$[rsp], 0
  0019e	75 07		 jne	 SHORT $LN22@update_sym

; 606  :         return 0;

  001a0	33 c0		 xor	 eax, eax
  001a2	e9 9f 01 00 00	 jmp	 $LN27@update_sym
$LN22@update_sym:

; 607  : 
; 608  :     itr = PyObject_GetIter(free);

  001a7	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR free$[rsp]
  001af	e8 00 00 00 00	 call	 PyObject_GetIter
  001b4	48 89 44 24 20	 mov	 QWORD PTR itr$[rsp], rax

; 609  :     if (!itr)

  001b9	48 83 7c 24 20
	00		 cmp	 QWORD PTR itr$[rsp], 0
  001bf	75 05		 jne	 SHORT $LN21@update_sym

; 610  :         goto error;

  001c1	e9 36 01 00 00	 jmp	 $error$22039
$LN21@update_sym:
$LN33@update_sym:
$LN32@update_sym:
$LN20@update_sym:

; 611  : 
; 612  :     while ((name = PyIter_Next(itr))) {

  001c6	48 8b 4c 24 20	 mov	 rcx, QWORD PTR itr$[rsp]
  001cb	e8 00 00 00 00	 call	 PyIter_Next
  001d0	48 89 44 24 48	 mov	 QWORD PTR name$[rsp], rax
  001d5	48 83 7c 24 48
	00		 cmp	 QWORD PTR name$[rsp], 0
  001db	0f 84 00 01 00
	00		 je	 $LN19@update_sym

; 613  :         v = PyDict_GetItem(symbols, name);

  001e1	48 8b 54 24 48	 mov	 rdx, QWORD PTR name$[rsp]
  001e6	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR symbols$[rsp]
  001ee	e8 00 00 00 00	 call	 PyDict_GetItem
  001f3	48 89 44 24 38	 mov	 QWORD PTR v$[rsp], rax

; 614  : 
; 615  :         /* Handle symbol that already exists in this scope */
; 616  :         if (v) {

  001f8	48 83 7c 24 38
	00		 cmp	 QWORD PTR v$[rsp], 0
  001fe	0f 84 8c 00 00
	00		 je	 $LN18@update_sym

; 617  :             /* Handle a free variable in a method of
; 618  :                the class that has the same name as a local
; 619  :                or global in the class scope.
; 620  :             */
; 621  :             if  (classflag &&
; 622  :                  PyLong_AS_LONG(v) & (DEF_BOUND | DEF_GLOBAL)) {

  00204	83 bc 24 a0 00
	00 00 00	 cmp	 DWORD PTR classflag$[rsp], 0
  0020c	74 73		 je	 SHORT $LN17@update_sym
  0020e	48 8b 4c 24 38	 mov	 rcx, QWORD PTR v$[rsp]
  00213	e8 00 00 00 00	 call	 PyLong_AsLong
  00218	25 87 00 00 00	 and	 eax, 135		; 00000087H
  0021d	85 c0		 test	 eax, eax
  0021f	74 60		 je	 SHORT $LN17@update_sym

; 623  :                 long flags = PyLong_AS_LONG(v) | DEF_FREE_CLASS;

  00221	48 8b 4c 24 38	 mov	 rcx, QWORD PTR v$[rsp]
  00226	e8 00 00 00 00	 call	 PyLong_AsLong
  0022b	83 c8 40	 or	 eax, 64			; 00000040H
  0022e	89 44 24 60	 mov	 DWORD PTR flags$22045[rsp], eax

; 624  :                 v_new = PyLong_FromLong(flags);

  00232	8b 4c 24 60	 mov	 ecx, DWORD PTR flags$22045[rsp]
  00236	e8 00 00 00 00	 call	 PyLong_FromLong
  0023b	48 89 44 24 40	 mov	 QWORD PTR v_new$[rsp], rax

; 625  :                 if (!v_new) {

  00240	48 83 7c 24 40
	00		 cmp	 QWORD PTR v_new$[rsp], 0
  00246	75 05		 jne	 SHORT $LN16@update_sym

; 626  :                     goto error;

  00248	e9 af 00 00 00	 jmp	 $error$22039
$LN16@update_sym:

; 627  :                 }
; 628  :                 if (PyDict_SetItem(symbols, name, v_new) < 0) {

  0024d	4c 8b 44 24 40	 mov	 r8, QWORD PTR v_new$[rsp]
  00252	48 8b 54 24 48	 mov	 rdx, QWORD PTR name$[rsp]
  00257	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR symbols$[rsp]
  0025f	e8 00 00 00 00	 call	 PyDict_SetItem
  00264	85 c0		 test	 eax, eax
  00266	7d 0f		 jge	 SHORT $LN15@update_sym

; 629  :                     Py_DECREF(v_new);

  00268	48 8b 4c 24 40	 mov	 rcx, QWORD PTR v_new$[rsp]
  0026d	e8 00 00 00 00	 call	 _Py_DecRef

; 630  :                     goto error;

  00272	e9 85 00 00 00	 jmp	 $error$22039
$LN15@update_sym:

; 631  :                 }
; 632  :                 Py_DECREF(v_new);

  00277	48 8b 4c 24 40	 mov	 rcx, QWORD PTR v_new$[rsp]
  0027c	e8 00 00 00 00	 call	 _Py_DecRef
$LN17@update_sym:

; 633  :             }
; 634  :             /* It's a cell, or already free in this scope */
; 635  :             Py_DECREF(name);

  00281	48 8b 4c 24 48	 mov	 rcx, QWORD PTR name$[rsp]
  00286	e8 00 00 00 00	 call	 _Py_DecRef

; 636  :             continue;

  0028b	e9 36 ff ff ff	 jmp	 $LN20@update_sym
$LN18@update_sym:

; 637  :         }
; 638  :         /* Handle global symbol */
; 639  :         if (!PySet_Contains(bound, name)) {

  00290	48 8b 54 24 48	 mov	 rdx, QWORD PTR name$[rsp]
  00295	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR bound$[rsp]
  0029d	e8 00 00 00 00	 call	 PySet_Contains
  002a2	85 c0		 test	 eax, eax
  002a4	75 0f		 jne	 SHORT $LN14@update_sym

; 640  :             Py_DECREF(name);

  002a6	48 8b 4c 24 48	 mov	 rcx, QWORD PTR name$[rsp]
  002ab	e8 00 00 00 00	 call	 _Py_DecRef

; 641  :             continue;       /* it's a global */

  002b0	e9 11 ff ff ff	 jmp	 $LN32@update_sym
$LN14@update_sym:

; 642  :         }
; 643  :         /* Propagate new free symbol up the lexical stack */
; 644  :         if (PyDict_SetItem(symbols, name, v_free) < 0) {

  002b5	4c 8b 44 24 28	 mov	 r8, QWORD PTR v_free$[rsp]
  002ba	48 8b 54 24 48	 mov	 rdx, QWORD PTR name$[rsp]
  002bf	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR symbols$[rsp]
  002c7	e8 00 00 00 00	 call	 PyDict_SetItem
  002cc	85 c0		 test	 eax, eax
  002ce	7d 02		 jge	 SHORT $LN13@update_sym

; 645  :             goto error;

  002d0	eb 2a		 jmp	 SHORT $error$22039
$LN13@update_sym:

; 646  :         }
; 647  :         Py_DECREF(name);

  002d2	48 8b 4c 24 48	 mov	 rcx, QWORD PTR name$[rsp]
  002d7	e8 00 00 00 00	 call	 _Py_DecRef

; 648  :     }

  002dc	e9 e5 fe ff ff	 jmp	 $LN33@update_sym
$LN19@update_sym:

; 649  :     Py_DECREF(itr);

  002e1	48 8b 4c 24 20	 mov	 rcx, QWORD PTR itr$[rsp]
  002e6	e8 00 00 00 00	 call	 _Py_DecRef

; 650  :     Py_DECREF(v_free);

  002eb	48 8b 4c 24 28	 mov	 rcx, QWORD PTR v_free$[rsp]
  002f0	e8 00 00 00 00	 call	 _Py_DecRef

; 651  :     return 1;

  002f5	b8 01 00 00 00	 mov	 eax, 1
  002fa	eb 4a		 jmp	 SHORT $LN27@update_sym
$error$22039:
$LN12@update_sym:

; 652  : error:
; 653  :     Py_XDECREF(v_free);

  002fc	48 83 7c 24 28
	00		 cmp	 QWORD PTR v_free$[rsp], 0
  00302	74 0a		 je	 SHORT $LN9@update_sym
  00304	48 8b 4c 24 28	 mov	 rcx, QWORD PTR v_free$[rsp]
  00309	e8 00 00 00 00	 call	 _Py_DecRef
$LN9@update_sym:
  0030e	33 c0		 xor	 eax, eax
  00310	85 c0		 test	 eax, eax
  00312	75 e8		 jne	 SHORT $LN12@update_sym
$LN8@update_sym:

; 654  :     Py_XDECREF(itr);

  00314	48 83 7c 24 20
	00		 cmp	 QWORD PTR itr$[rsp], 0
  0031a	74 0a		 je	 SHORT $LN5@update_sym
  0031c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR itr$[rsp]
  00321	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@update_sym:
  00326	33 c0		 xor	 eax, eax
  00328	85 c0		 test	 eax, eax
  0032a	75 e8		 jne	 SHORT $LN8@update_sym
$LN4@update_sym:

; 655  :     Py_XDECREF(name);

  0032c	48 83 7c 24 48
	00		 cmp	 QWORD PTR name$[rsp], 0
  00332	74 0a		 je	 SHORT $LN1@update_sym
  00334	48 8b 4c 24 48	 mov	 rcx, QWORD PTR name$[rsp]
  00339	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@update_sym:
  0033e	33 c0		 xor	 eax, eax
  00340	85 c0		 test	 eax, eax
  00342	75 e8		 jne	 SHORT $LN4@update_sym

; 656  :     return 0;

  00344	33 c0		 xor	 eax, eax
$LN27@update_sym:

; 657  : }

  00346	48 83 c4 78	 add	 rsp, 120		; 00000078H
  0034a	c3		 ret	 0
update_symbols ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$analyze_child_block DD imagerel analyze_child_block
	DD	imagerel analyze_child_block+319
	DD	imagerel $unwind$analyze_child_block
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$analyze_child_block DD 011801H
	DD	08218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT analyze_child_block
_TEXT	SEGMENT
temp_global$ = 32
temp$ = 40
temp_bound$ = 48
temp_free$ = 56
entry$ = 80
bound$ = 88
free$ = 96
global$ = 104
child_free$ = 112
analyze_child_block PROC				; COMDAT

; 840  : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 841  :     PyObject *temp_bound = NULL, *temp_global = NULL, *temp_free = NULL;

  00018	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR temp_bound$[rsp], 0
  00021	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR temp_global$[rsp], 0
  0002a	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR temp_free$[rsp], 0

; 842  :     PyObject *temp;
; 843  : 
; 844  :     /* Copy the bound and global dictionaries.
; 845  : 
; 846  :        These dictionary are used by all blocks enclosed by the
; 847  :        current block.  The analyze_block() call modifies these
; 848  :        dictionaries.
; 849  : 
; 850  :     */
; 851  :     temp_bound = PySet_New(bound);

  00033	48 8b 4c 24 58	 mov	 rcx, QWORD PTR bound$[rsp]
  00038	e8 00 00 00 00	 call	 PySet_New
  0003d	48 89 44 24 30	 mov	 QWORD PTR temp_bound$[rsp], rax

; 852  :     if (!temp_bound)

  00042	48 83 7c 24 30
	00		 cmp	 QWORD PTR temp_bound$[rsp], 0
  00048	75 05		 jne	 SHORT $LN17@analyze_ch

; 853  :         goto error;

  0004a	e9 a1 00 00 00	 jmp	 $error$22225
$LN17@analyze_ch:

; 854  :     temp_free = PySet_New(free);

  0004f	48 8b 4c 24 60	 mov	 rcx, QWORD PTR free$[rsp]
  00054	e8 00 00 00 00	 call	 PySet_New
  00059	48 89 44 24 38	 mov	 QWORD PTR temp_free$[rsp], rax

; 855  :     if (!temp_free)

  0005e	48 83 7c 24 38
	00		 cmp	 QWORD PTR temp_free$[rsp], 0
  00064	75 05		 jne	 SHORT $LN16@analyze_ch

; 856  :         goto error;

  00066	e9 85 00 00 00	 jmp	 $error$22225
$LN16@analyze_ch:

; 857  :     temp_global = PySet_New(global);

  0006b	48 8b 4c 24 68	 mov	 rcx, QWORD PTR global$[rsp]
  00070	e8 00 00 00 00	 call	 PySet_New
  00075	48 89 44 24 20	 mov	 QWORD PTR temp_global$[rsp], rax

; 858  :     if (!temp_global)

  0007a	48 83 7c 24 20
	00		 cmp	 QWORD PTR temp_global$[rsp], 0
  00080	75 02		 jne	 SHORT $LN15@analyze_ch

; 859  :         goto error;

  00082	eb 6c		 jmp	 SHORT $error$22225
$LN15@analyze_ch:

; 860  : 
; 861  :     if (!analyze_block(entry, temp_bound, temp_free, temp_global))

  00084	4c 8b 4c 24 20	 mov	 r9, QWORD PTR temp_global$[rsp]
  00089	4c 8b 44 24 38	 mov	 r8, QWORD PTR temp_free$[rsp]
  0008e	48 8b 54 24 30	 mov	 rdx, QWORD PTR temp_bound$[rsp]
  00093	48 8b 4c 24 50	 mov	 rcx, QWORD PTR entry$[rsp]
  00098	e8 00 00 00 00	 call	 analyze_block
  0009d	85 c0		 test	 eax, eax
  0009f	75 02		 jne	 SHORT $LN14@analyze_ch

; 862  :         goto error;

  000a1	eb 4d		 jmp	 SHORT $error$22225
$LN14@analyze_ch:

; 863  :     temp = PyNumber_InPlaceOr(child_free, temp_free);

  000a3	48 8b 54 24 38	 mov	 rdx, QWORD PTR temp_free$[rsp]
  000a8	48 8b 4c 24 70	 mov	 rcx, QWORD PTR child_free$[rsp]
  000ad	e8 00 00 00 00	 call	 PyNumber_InPlaceOr
  000b2	48 89 44 24 28	 mov	 QWORD PTR temp$[rsp], rax

; 864  :     if (!temp)

  000b7	48 83 7c 24 28
	00		 cmp	 QWORD PTR temp$[rsp], 0
  000bd	75 02		 jne	 SHORT $LN13@analyze_ch

; 865  :         goto error;

  000bf	eb 2f		 jmp	 SHORT $error$22225
$LN13@analyze_ch:

; 866  :     Py_DECREF(temp);

  000c1	48 8b 4c 24 28	 mov	 rcx, QWORD PTR temp$[rsp]
  000c6	e8 00 00 00 00	 call	 _Py_DecRef

; 867  :     Py_DECREF(temp_bound);

  000cb	48 8b 4c 24 30	 mov	 rcx, QWORD PTR temp_bound$[rsp]
  000d0	e8 00 00 00 00	 call	 _Py_DecRef

; 868  :     Py_DECREF(temp_free);

  000d5	48 8b 4c 24 38	 mov	 rcx, QWORD PTR temp_free$[rsp]
  000da	e8 00 00 00 00	 call	 _Py_DecRef

; 869  :     Py_DECREF(temp_global);

  000df	48 8b 4c 24 20	 mov	 rcx, QWORD PTR temp_global$[rsp]
  000e4	e8 00 00 00 00	 call	 _Py_DecRef

; 870  :     return 1;

  000e9	b8 01 00 00 00	 mov	 eax, 1
  000ee	eb 4a		 jmp	 SHORT $LN18@analyze_ch
$error$22225:
$LN12@analyze_ch:

; 871  :  error:
; 872  :     Py_XDECREF(temp_bound);

  000f0	48 83 7c 24 30
	00		 cmp	 QWORD PTR temp_bound$[rsp], 0
  000f6	74 0a		 je	 SHORT $LN9@analyze_ch
  000f8	48 8b 4c 24 30	 mov	 rcx, QWORD PTR temp_bound$[rsp]
  000fd	e8 00 00 00 00	 call	 _Py_DecRef
$LN9@analyze_ch:
  00102	33 c0		 xor	 eax, eax
  00104	85 c0		 test	 eax, eax
  00106	75 e8		 jne	 SHORT $LN12@analyze_ch
$LN8@analyze_ch:

; 873  :     Py_XDECREF(temp_free);

  00108	48 83 7c 24 38
	00		 cmp	 QWORD PTR temp_free$[rsp], 0
  0010e	74 0a		 je	 SHORT $LN5@analyze_ch
  00110	48 8b 4c 24 38	 mov	 rcx, QWORD PTR temp_free$[rsp]
  00115	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@analyze_ch:
  0011a	33 c0		 xor	 eax, eax
  0011c	85 c0		 test	 eax, eax
  0011e	75 e8		 jne	 SHORT $LN8@analyze_ch
$LN4@analyze_ch:

; 874  :     Py_XDECREF(temp_global);

  00120	48 83 7c 24 20
	00		 cmp	 QWORD PTR temp_global$[rsp], 0
  00126	74 0a		 je	 SHORT $LN1@analyze_ch
  00128	48 8b 4c 24 20	 mov	 rcx, QWORD PTR temp_global$[rsp]
  0012d	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@analyze_ch:
  00132	33 c0		 xor	 eax, eax
  00134	85 c0		 test	 eax, eax
  00136	75 e8		 jne	 SHORT $LN4@analyze_ch

; 875  :     return 0;

  00138	33 c0		 xor	 eax, eax
$LN18@analyze_ch:

; 876  : }

  0013a	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0013e	c3		 ret	 0
analyze_child_block ENDP
_TEXT	ENDS
EXTRN	PyList_SetSlice:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$symtable_exit_block DD imagerel symtable_exit_block
	DD	imagerel symtable_exit_block+157
	DD	imagerel $unwind$symtable_exit_block
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$symtable_exit_block DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT symtable_exit_block
_TEXT	SEGMENT
size$ = 32
st$ = 64
ast$ = 72
symtable_exit_block PROC				; COMDAT

; 921  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 922  :     Py_ssize_t size;
; 923  : 
; 924  :     st->st_cur = NULL;

  0000e	48 8b 44 24 40	 mov	 rax, QWORD PTR st$[rsp]
  00013	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0

; 925  :     size = PyList_GET_SIZE(st->st_stack);

  0001b	48 8b 44 24 40	 mov	 rax, QWORD PTR st$[rsp]
  00020	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00024	48 8b 40 60	 mov	 rax, QWORD PTR [rax+96]
  00028	48 89 44 24 20	 mov	 QWORD PTR size$[rsp], rax

; 926  :     if (size) {

  0002d	48 83 7c 24 20
	00		 cmp	 QWORD PTR size$[rsp], 0
  00033	74 5e		 je	 SHORT $LN3@symtable_e

; 927  :         if (PyList_SetSlice(st->st_stack, size - 1, size, NULL) < 0)

  00035	48 8b 44 24 20	 mov	 rax, QWORD PTR size$[rsp]
  0003a	48 ff c8	 dec	 rax
  0003d	45 33 c9	 xor	 r9d, r9d
  00040	4c 8b 44 24 20	 mov	 r8, QWORD PTR size$[rsp]
  00045	48 8b d0	 mov	 rdx, rax
  00048	48 8b 44 24 40	 mov	 rax, QWORD PTR st$[rsp]
  0004d	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  00051	e8 00 00 00 00	 call	 PyList_SetSlice
  00056	85 c0		 test	 eax, eax
  00058	7d 04		 jge	 SHORT $LN2@symtable_e

; 928  :             return 0;

  0005a	33 c0		 xor	 eax, eax
  0005c	eb 3a		 jmp	 SHORT $LN4@symtable_e
$LN2@symtable_e:

; 929  :         if (--size)

  0005e	48 8b 44 24 20	 mov	 rax, QWORD PTR size$[rsp]
  00063	48 ff c8	 dec	 rax
  00066	48 89 44 24 20	 mov	 QWORD PTR size$[rsp], rax
  0006b	48 83 7c 24 20
	00		 cmp	 QWORD PTR size$[rsp], 0
  00071	74 20		 je	 SHORT $LN1@symtable_e

; 930  :             st->st_cur = (PySTEntryObject *)PyList_GET_ITEM(st->st_stack, size - 1);

  00073	48 8b 44 24 40	 mov	 rax, QWORD PTR st$[rsp]
  00078	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0007c	48 8b 40 70	 mov	 rax, QWORD PTR [rax+112]
  00080	48 8b 4c 24 40	 mov	 rcx, QWORD PTR st$[rsp]
  00085	48 8b 54 24 20	 mov	 rdx, QWORD PTR size$[rsp]
  0008a	48 8b 44 d0 f8	 mov	 rax, QWORD PTR [rax+rdx*8-8]
  0008f	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
$LN1@symtable_e:
$LN3@symtable_e:

; 931  :     }
; 932  :     return 1;

  00093	b8 01 00 00 00	 mov	 eax, 1
$LN4@symtable_e:

; 933  : }

  00098	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0009c	c3		 ret	 0
symtable_exit_block ENDP
_TEXT	ENDS
EXTRN	PyList_Append:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$symtable_enter_block DD imagerel symtable_enter_block
	DD	imagerel symtable_enter_block+246
	DD	imagerel $unwind$symtable_enter_block
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$symtable_enter_block DD 011801H
	DD	08218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT symtable_enter_block
_TEXT	SEGMENT
prev$ = 48
ste$ = 56
st$ = 80
name$ = 88
block$ = 96
ast$ = 104
lineno$ = 112
col_offset$ = 120
symtable_enter_block PROC				; COMDAT

; 938  : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 939  :     PySTEntryObject *prev = NULL, *ste;

  00018	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR prev$[rsp], 0

; 940  : 
; 941  :     ste = ste_new(st, name, block, ast, lineno, col_offset);

  00021	8b 44 24 78	 mov	 eax, DWORD PTR col_offset$[rsp]
  00025	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00029	8b 44 24 70	 mov	 eax, DWORD PTR lineno$[rsp]
  0002d	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00031	4c 8b 4c 24 68	 mov	 r9, QWORD PTR ast$[rsp]
  00036	44 8b 44 24 60	 mov	 r8d, DWORD PTR block$[rsp]
  0003b	48 8b 54 24 58	 mov	 rdx, QWORD PTR name$[rsp]
  00040	48 8b 4c 24 50	 mov	 rcx, QWORD PTR st$[rsp]
  00045	e8 00 00 00 00	 call	 ste_new
  0004a	48 89 44 24 38	 mov	 QWORD PTR ste$[rsp], rax

; 942  :     if (ste == NULL)

  0004f	48 83 7c 24 38
	00		 cmp	 QWORD PTR ste$[rsp], 0
  00055	75 07		 jne	 SHORT $LN5@symtable_e@2

; 943  :         return 0;

  00057	33 c0		 xor	 eax, eax
  00059	e9 93 00 00 00	 jmp	 $LN6@symtable_e@2
$LN5@symtable_e@2:

; 944  :     if (PyList_Append(st->st_stack, (PyObject *)ste) < 0) {

  0005e	48 8b 54 24 38	 mov	 rdx, QWORD PTR ste$[rsp]
  00063	48 8b 44 24 50	 mov	 rax, QWORD PTR st$[rsp]
  00068	48 8b 48 20	 mov	 rcx, QWORD PTR [rax+32]
  0006c	e8 00 00 00 00	 call	 PyList_Append
  00071	85 c0		 test	 eax, eax
  00073	7d 0e		 jge	 SHORT $LN4@symtable_e@2

; 945  :         Py_DECREF(ste);

  00075	48 8b 4c 24 38	 mov	 rcx, QWORD PTR ste$[rsp]
  0007a	e8 00 00 00 00	 call	 _Py_DecRef

; 946  :         return 0;

  0007f	33 c0		 xor	 eax, eax
  00081	eb 6e		 jmp	 SHORT $LN6@symtable_e@2
$LN4@symtable_e@2:

; 947  :     }
; 948  :     prev = st->st_cur;

  00083	48 8b 44 24 50	 mov	 rax, QWORD PTR st$[rsp]
  00088	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0008c	48 89 44 24 30	 mov	 QWORD PTR prev$[rsp], rax

; 949  :     /* The entry is owned by the stack. Borrow it for st_cur. */
; 950  :     Py_DECREF(ste);

  00091	48 8b 4c 24 38	 mov	 rcx, QWORD PTR ste$[rsp]
  00096	e8 00 00 00 00	 call	 _Py_DecRef

; 951  :     st->st_cur = ste;

  0009b	48 8b 44 24 50	 mov	 rax, QWORD PTR st$[rsp]
  000a0	48 8b 4c 24 38	 mov	 rcx, QWORD PTR ste$[rsp]
  000a5	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 952  :     if (block == ModuleBlock)

  000a9	83 7c 24 60 02	 cmp	 DWORD PTR block$[rsp], 2
  000ae	75 16		 jne	 SHORT $LN3@symtable_e@2

; 953  :         st->st_global = st->st_cur->ste_symbols;

  000b0	48 8b 44 24 50	 mov	 rax, QWORD PTR st$[rsp]
  000b5	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  000b9	48 8b 4c 24 50	 mov	 rcx, QWORD PTR st$[rsp]
  000be	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  000c2	48 89 41 28	 mov	 QWORD PTR [rcx+40], rax
$LN3@symtable_e@2:

; 954  :     if (prev) {

  000c6	48 83 7c 24 30
	00		 cmp	 QWORD PTR prev$[rsp], 0
  000cc	74 1e		 je	 SHORT $LN2@symtable_e@2

; 955  :         if (PyList_Append(prev->ste_children, (PyObject *)ste) < 0) {

  000ce	48 8b 54 24 38	 mov	 rdx, QWORD PTR ste$[rsp]
  000d3	48 8b 44 24 30	 mov	 rax, QWORD PTR prev$[rsp]
  000d8	48 8b 88 80 00
	00 00		 mov	 rcx, QWORD PTR [rax+128]
  000df	e8 00 00 00 00	 call	 PyList_Append
  000e4	85 c0		 test	 eax, eax
  000e6	7d 04		 jge	 SHORT $LN1@symtable_e@2

; 956  :             return 0;

  000e8	33 c0		 xor	 eax, eax
  000ea	eb 05		 jmp	 SHORT $LN6@symtable_e@2
$LN1@symtable_e@2:
$LN2@symtable_e@2:

; 957  :         }
; 958  :     }
; 959  :     return 1;

  000ec	b8 01 00 00 00	 mov	 eax, 1
$LN6@symtable_e@2:

; 960  : }

  000f1	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000f5	c3		 ret	 0
symtable_enter_block ENDP
_TEXT	ENDS
EXTRN	_PyObject_New:PROC
EXTRN	_PxObject_New:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$ste_new DD imagerel ste_new
	DD	imagerel ste_new+753
	DD	imagerel $unwind$ste_new
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ste_new DD 011801H
	DD	08218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT ste_new
_TEXT	SEGMENT
k$ = 32
ste$ = 40
tv73 = 48
st$ = 80
name$ = 88
block$ = 96
key$ = 104
lineno$ = 112
col_offset$ = 120
ste_new	PROC						; COMDAT

; 25   : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 26   :     PySTEntryObject *ste = NULL;

  00018	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR ste$[rsp], 0

; 27   :     PyObject *k = NULL;

  00021	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR k$[rsp], 0

; 28   : 
; 29   :     k = PyLong_FromVoidPtr(key);

  0002a	48 8b 4c 24 68	 mov	 rcx, QWORD PTR key$[rsp]
  0002f	e8 00 00 00 00	 call	 PyLong_FromVoidPtr
  00034	48 89 44 24 20	 mov	 QWORD PTR k$[rsp], rax

; 30   :     if (k == NULL)

  00039	48 83 7c 24 20
	00		 cmp	 QWORD PTR k$[rsp], 0
  0003f	75 05		 jne	 SHORT $LN12@ste_new

; 31   :         goto fail;

  00041	e9 8c 02 00 00	 jmp	 $fail$21527
$LN12@ste_new:

; 32   :     ste = PyObject_New(PySTEntryObject, &PySTEntry_Type);

  00046	e8 00 00 00 00	 call	 _Py_PXCTX
  0004b	85 c0		 test	 eax, eax
  0004d	74 13		 je	 SHORT $LN15@ste_new
  0004f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PySTEntry_Type
  00056	e8 00 00 00 00	 call	 _PxObject_New
  0005b	48 89 44 24 30	 mov	 QWORD PTR tv73[rsp], rax
  00060	eb 11		 jmp	 SHORT $LN16@ste_new
$LN15@ste_new:
  00062	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:PySTEntry_Type
  00069	e8 00 00 00 00	 call	 _PyObject_New
  0006e	48 89 44 24 30	 mov	 QWORD PTR tv73[rsp], rax
$LN16@ste_new:
  00073	48 8b 44 24 30	 mov	 rax, QWORD PTR tv73[rsp]
  00078	48 89 44 24 28	 mov	 QWORD PTR ste$[rsp], rax

; 33   :     if (ste == NULL) {

  0007d	48 83 7c 24 28
	00		 cmp	 QWORD PTR ste$[rsp], 0
  00083	75 0f		 jne	 SHORT $LN11@ste_new

; 34   :         Py_DECREF(k);

  00085	48 8b 4c 24 20	 mov	 rcx, QWORD PTR k$[rsp]
  0008a	e8 00 00 00 00	 call	 _Py_DecRef

; 35   :         goto fail;

  0008f	e9 3e 02 00 00	 jmp	 $fail$21527
$LN11@ste_new:

; 36   :     }
; 37   :     ste->ste_table = st;

  00094	48 8b 44 24 28	 mov	 rax, QWORD PTR ste$[rsp]
  00099	48 8b 4c 24 50	 mov	 rcx, QWORD PTR st$[rsp]
  0009e	48 89 88 b0 00
	00 00		 mov	 QWORD PTR [rax+176], rcx

; 38   :     ste->ste_id = k; /* ste owns reference to k */

  000a5	48 8b 44 24 28	 mov	 rax, QWORD PTR ste$[rsp]
  000aa	48 8b 4c 24 20	 mov	 rcx, QWORD PTR k$[rsp]
  000af	48 89 48 60	 mov	 QWORD PTR [rax+96], rcx

; 39   : 
; 40   :     ste->ste_name = name;

  000b3	48 8b 44 24 28	 mov	 rax, QWORD PTR ste$[rsp]
  000b8	48 8b 4c 24 58	 mov	 rcx, QWORD PTR name$[rsp]
  000bd	48 89 48 70	 mov	 QWORD PTR [rax+112], rcx

; 41   :     Py_INCREF(name);

  000c1	48 8b 4c 24 58	 mov	 rcx, QWORD PTR name$[rsp]
  000c6	e8 00 00 00 00	 call	 _Py_IncRef

; 42   : 
; 43   :     ste->ste_symbols = NULL;

  000cb	48 8b 44 24 28	 mov	 rax, QWORD PTR ste$[rsp]
  000d0	48 c7 40 68 00
	00 00 00	 mov	 QWORD PTR [rax+104], 0

; 44   :     ste->ste_varnames = NULL;

  000d8	48 8b 44 24 28	 mov	 rax, QWORD PTR ste$[rsp]
  000dd	48 c7 40 78 00
	00 00 00	 mov	 QWORD PTR [rax+120], 0

; 45   :     ste->ste_children = NULL;

  000e5	48 8b 44 24 28	 mov	 rax, QWORD PTR ste$[rsp]
  000ea	48 c7 80 80 00
	00 00 00 00 00
	00		 mov	 QWORD PTR [rax+128], 0

; 46   : 
; 47   :     ste->ste_symbols = PyDict_New();

  000f5	e8 00 00 00 00	 call	 PyDict_New
  000fa	48 8b 4c 24 28	 mov	 rcx, QWORD PTR ste$[rsp]
  000ff	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax

; 48   :     if (ste->ste_symbols == NULL)

  00103	48 8b 44 24 28	 mov	 rax, QWORD PTR ste$[rsp]
  00108	48 83 78 68 00	 cmp	 QWORD PTR [rax+104], 0
  0010d	75 05		 jne	 SHORT $LN10@ste_new

; 49   :         goto fail;

  0010f	e9 be 01 00 00	 jmp	 $fail$21527
$LN10@ste_new:

; 50   : 
; 51   :     ste->ste_varnames = PyList_New(0);

  00114	33 c9		 xor	 ecx, ecx
  00116	e8 00 00 00 00	 call	 PyList_New
  0011b	48 8b 4c 24 28	 mov	 rcx, QWORD PTR ste$[rsp]
  00120	48 89 41 78	 mov	 QWORD PTR [rcx+120], rax

; 52   :     if (ste->ste_varnames == NULL)

  00124	48 8b 44 24 28	 mov	 rax, QWORD PTR ste$[rsp]
  00129	48 83 78 78 00	 cmp	 QWORD PTR [rax+120], 0
  0012e	75 05		 jne	 SHORT $LN9@ste_new

; 53   :         goto fail;

  00130	e9 9d 01 00 00	 jmp	 $fail$21527
$LN9@ste_new:

; 54   : 
; 55   :     ste->ste_children = PyList_New(0);

  00135	33 c9		 xor	 ecx, ecx
  00137	e8 00 00 00 00	 call	 PyList_New
  0013c	48 8b 4c 24 28	 mov	 rcx, QWORD PTR ste$[rsp]
  00141	48 89 81 80 00
	00 00		 mov	 QWORD PTR [rcx+128], rax

; 56   :     if (ste->ste_children == NULL)

  00148	48 8b 44 24 28	 mov	 rax, QWORD PTR ste$[rsp]
  0014d	48 83 b8 80 00
	00 00 00	 cmp	 QWORD PTR [rax+128], 0
  00155	75 05		 jne	 SHORT $LN8@ste_new

; 57   :         goto fail;

  00157	e9 76 01 00 00	 jmp	 $fail$21527
$LN8@ste_new:

; 58   : 
; 59   :     ste->ste_type = block;

  0015c	48 8b 44 24 28	 mov	 rax, QWORD PTR ste$[rsp]
  00161	8b 4c 24 60	 mov	 ecx, DWORD PTR block$[rsp]
  00165	89 88 88 00 00
	00		 mov	 DWORD PTR [rax+136], ecx

; 60   :     ste->ste_unoptimized = 0;

  0016b	48 8b 44 24 28	 mov	 rax, QWORD PTR ste$[rsp]
  00170	c7 80 8c 00 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+140], 0

; 61   :     ste->ste_nested = 0;

  0017a	48 8b 44 24 28	 mov	 rax, QWORD PTR ste$[rsp]
  0017f	c7 80 90 00 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+144], 0

; 62   :     ste->ste_free = 0;

  00189	48 8b 44 24 28	 mov	 rax, QWORD PTR ste$[rsp]
  0018e	8b 80 94 00 00
	00		 mov	 eax, DWORD PTR [rax+148]
  00194	83 e0 fe	 and	 eax, -2			; fffffffeH
  00197	48 8b 4c 24 28	 mov	 rcx, QWORD PTR ste$[rsp]
  0019c	89 81 94 00 00
	00		 mov	 DWORD PTR [rcx+148], eax

; 63   :     ste->ste_varargs = 0;

  001a2	48 8b 44 24 28	 mov	 rax, QWORD PTR ste$[rsp]
  001a7	8b 80 94 00 00
	00		 mov	 eax, DWORD PTR [rax+148]
  001ad	83 e0 f7	 and	 eax, -9			; fffffff7H
  001b0	48 8b 4c 24 28	 mov	 rcx, QWORD PTR ste$[rsp]
  001b5	89 81 94 00 00
	00		 mov	 DWORD PTR [rcx+148], eax

; 64   :     ste->ste_varkeywords = 0;

  001bb	48 8b 44 24 28	 mov	 rax, QWORD PTR ste$[rsp]
  001c0	8b 80 94 00 00
	00		 mov	 eax, DWORD PTR [rax+148]
  001c6	83 e0 ef	 and	 eax, -17		; ffffffefH
  001c9	48 8b 4c 24 28	 mov	 rcx, QWORD PTR ste$[rsp]
  001ce	89 81 94 00 00
	00		 mov	 DWORD PTR [rcx+148], eax

; 65   :     ste->ste_opt_lineno = 0;

  001d4	48 8b 44 24 28	 mov	 rax, QWORD PTR ste$[rsp]
  001d9	c7 80 a0 00 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+160], 0

; 66   :     ste->ste_opt_col_offset = 0;

  001e3	48 8b 44 24 28	 mov	 rax, QWORD PTR ste$[rsp]
  001e8	c7 80 a4 00 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+164], 0

; 67   :     ste->ste_tmpname = 0;

  001f2	48 8b 44 24 28	 mov	 rax, QWORD PTR ste$[rsp]
  001f7	c7 80 a8 00 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+168], 0

; 68   :     ste->ste_lineno = lineno;

  00201	48 8b 44 24 28	 mov	 rax, QWORD PTR ste$[rsp]
  00206	8b 4c 24 70	 mov	 ecx, DWORD PTR lineno$[rsp]
  0020a	89 88 98 00 00
	00		 mov	 DWORD PTR [rax+152], ecx

; 69   :     ste->ste_col_offset = col_offset;

  00210	48 8b 44 24 28	 mov	 rax, QWORD PTR ste$[rsp]
  00215	8b 4c 24 78	 mov	 ecx, DWORD PTR col_offset$[rsp]
  00219	89 88 9c 00 00
	00		 mov	 DWORD PTR [rax+156], ecx

; 70   : 
; 71   :     if (st->st_cur != NULL &&
; 72   :         (st->st_cur->ste_nested ||
; 73   :          st->st_cur->ste_type == FunctionBlock))

  0021f	48 8b 44 24 50	 mov	 rax, QWORD PTR st$[rsp]
  00224	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00229	74 33		 je	 SHORT $LN7@ste_new
  0022b	48 8b 44 24 50	 mov	 rax, QWORD PTR st$[rsp]
  00230	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00234	83 b8 90 00 00
	00 00		 cmp	 DWORD PTR [rax+144], 0
  0023b	75 12		 jne	 SHORT $LN6@ste_new
  0023d	48 8b 44 24 50	 mov	 rax, QWORD PTR st$[rsp]
  00242	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00246	83 b8 88 00 00
	00 00		 cmp	 DWORD PTR [rax+136], 0
  0024d	75 0f		 jne	 SHORT $LN7@ste_new
$LN6@ste_new:

; 74   :         ste->ste_nested = 1;

  0024f	48 8b 44 24 28	 mov	 rax, QWORD PTR ste$[rsp]
  00254	c7 80 90 00 00
	00 01 00 00 00	 mov	 DWORD PTR [rax+144], 1
$LN7@ste_new:

; 75   :     ste->ste_child_free = 0;

  0025e	48 8b 44 24 28	 mov	 rax, QWORD PTR ste$[rsp]
  00263	8b 80 94 00 00
	00		 mov	 eax, DWORD PTR [rax+148]
  00269	83 e0 fd	 and	 eax, -3			; fffffffdH
  0026c	48 8b 4c 24 28	 mov	 rcx, QWORD PTR ste$[rsp]
  00271	89 81 94 00 00
	00		 mov	 DWORD PTR [rcx+148], eax

; 76   :     ste->ste_generator = 0;

  00277	48 8b 44 24 28	 mov	 rax, QWORD PTR ste$[rsp]
  0027c	8b 80 94 00 00
	00		 mov	 eax, DWORD PTR [rax+148]
  00282	83 e0 fb	 and	 eax, -5			; fffffffbH
  00285	48 8b 4c 24 28	 mov	 rcx, QWORD PTR ste$[rsp]
  0028a	89 81 94 00 00
	00		 mov	 DWORD PTR [rcx+148], eax

; 77   :     ste->ste_returns_value = 0;

  00290	48 8b 44 24 28	 mov	 rax, QWORD PTR ste$[rsp]
  00295	8b 80 94 00 00
	00		 mov	 eax, DWORD PTR [rax+148]
  0029b	83 e0 df	 and	 eax, -33		; ffffffdfH
  0029e	48 8b 4c 24 28	 mov	 rcx, QWORD PTR ste$[rsp]
  002a3	89 81 94 00 00
	00		 mov	 DWORD PTR [rcx+148], eax

; 78   : 
; 79   :     if (PyDict_SetItem(st->st_blocks, ste->ste_id, (PyObject *)ste) < 0)

  002a9	4c 8b 44 24 28	 mov	 r8, QWORD PTR ste$[rsp]
  002ae	48 8b 44 24 28	 mov	 rax, QWORD PTR ste$[rsp]
  002b3	48 8b 50 60	 mov	 rdx, QWORD PTR [rax+96]
  002b7	48 8b 44 24 50	 mov	 rax, QWORD PTR st$[rsp]
  002bc	48 8b 48 18	 mov	 rcx, QWORD PTR [rax+24]
  002c0	e8 00 00 00 00	 call	 PyDict_SetItem
  002c5	85 c0		 test	 eax, eax
  002c7	7d 02		 jge	 SHORT $LN5@ste_new

; 80   :         goto fail;

  002c9	eb 07		 jmp	 SHORT $fail$21527
$LN5@ste_new:

; 81   : 
; 82   :     return ste;

  002cb	48 8b 44 24 28	 mov	 rax, QWORD PTR ste$[rsp]
  002d0	eb 1a		 jmp	 SHORT $LN13@ste_new
$fail$21527:
$LN4@ste_new:

; 83   :  fail:
; 84   :     Py_XDECREF(ste);

  002d2	48 83 7c 24 28
	00		 cmp	 QWORD PTR ste$[rsp], 0
  002d8	74 0a		 je	 SHORT $LN1@ste_new
  002da	48 8b 4c 24 28	 mov	 rcx, QWORD PTR ste$[rsp]
  002df	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@ste_new:
  002e4	33 c0		 xor	 eax, eax
  002e6	85 c0		 test	 eax, eax
  002e8	75 e8		 jne	 SHORT $LN4@ste_new

; 85   :     return NULL;

  002ea	33 c0		 xor	 eax, eax
$LN13@ste_new:

; 86   : }

  002ec	48 83 c4 48	 add	 rsp, 72			; 00000048H
  002f0	c3		 ret	 0
ste_new	ENDP
_TEXT	ENDS
PUBLIC	??_C@_0DE@COCIPDM@name?5?8?$CF?4400s?8?5is?5used?5prior?5to?5n@ ; `string'
PUBLIC	??_C@_0DJ@JIAAIOIF@name?5?8?$CF?4400s?8?5is?5assigned?5to?5bef@ ; `string'
PUBLIC	??_C@_0DC@GDNGFAAH@name?5?8?$CF?4400s?8?5is?5used?5prior?5to?5g@ ; `string'
PUBLIC	??_C@_0DH@LJMCNDPN@name?5?8?$CF?4400s?8?5is?5assigned?5to?5bef@ ; `string'
PUBLIC	??_C@_0BN@GJGDMEHB@cannot?5make?5__class__?5global?$AA@ ; `string'
PUBLIC	??_C@_0L@ICMAENDM@__locals__?$AA@		; `string'
PUBLIC	??_C@_0DE@DFBPPMEI@maximum?5recursion?5depth?5exceeded@ ; `string'
EXTRN	PyOS_snprintf:PROC
EXTRN	PyUnicode_AsUTF8:PROC
EXTRN	__ImageBase:BYTE
;	COMDAT pdata
pdata	SEGMENT
$pdata$symtable_visit_stmt DD imagerel symtable_visit_stmt
	DD	imagerel symtable_visit_stmt+8480
	DD	imagerel $unwind$symtable_visit_stmt
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$symtable_visit_stmt DD 021101H
	DD	0b90111H
xdata	ENDS
;	COMDAT ??_C@_0DE@COCIPDM@name?5?8?$CF?4400s?8?5is?5used?5prior?5to?5n@
CONST	SEGMENT
??_C@_0DE@COCIPDM@name?5?8?$CF?4400s?8?5is?5used?5prior?5to?5n@ DB 'name '
	DB	'''%.400s'' is used prior to nonlocal declaration', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@JIAAIOIF@name?5?8?$CF?4400s?8?5is?5assigned?5to?5bef@
CONST	SEGMENT
??_C@_0DJ@JIAAIOIF@name?5?8?$CF?4400s?8?5is?5assigned?5to?5bef@ DB 'name '
	DB	'''%.400s'' is assigned to before nonlocal declaration', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@GDNGFAAH@name?5?8?$CF?4400s?8?5is?5used?5prior?5to?5g@
CONST	SEGMENT
??_C@_0DC@GDNGFAAH@name?5?8?$CF?4400s?8?5is?5used?5prior?5to?5g@ DB 'name'
	DB	' ''%.400s'' is used prior to global declaration', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@LJMCNDPN@name?5?8?$CF?4400s?8?5is?5assigned?5to?5bef@
CONST	SEGMENT
??_C@_0DH@LJMCNDPN@name?5?8?$CF?4400s?8?5is?5assigned?5to?5bef@ DB 'name '
	DB	'''%.400s'' is assigned to before global declaration', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@GJGDMEHB@cannot?5make?5__class__?5global?$AA@
CONST	SEGMENT
??_C@_0BN@GJGDMEHB@cannot?5make?5__class__?5global?$AA@ DB 'cannot make _'
	DB	'_class__ global', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@ICMAENDM@__locals__?$AA@
CONST	SEGMENT
??_C@_0L@ICMAENDM@__locals__?$AA@ DB '__locals__', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@DFBPPMEI@maximum?5recursion?5depth?5exceeded@
CONST	SEGMENT
??_C@_0DE@DFBPPMEI@maximum?5recursion?5depth?5exceeded@ DB 'maximum recur'
	DB	'sion depth exceeded during compilation', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT symtable_visit_stmt
_TEXT	SEGMENT
i$22389 = 48
seq$22390 = 56
elt$22395 = 64
i$22399 = 72
seq$22400 = 80
elt$22405 = 88
i$22411 = 96
seq$22412 = 104
elt$22417 = 112
i$22423 = 120
seq$22424 = 128
elt$22429 = 136
tmp$22434 = 144
i$22436 = 152
seq$22437 = 160
elt$22442 = 168
i$22445 = 176
seq$22446 = 184
elt$22451 = 192
i$22459 = 200
seq$22460 = 208
elt$22465 = 216
i$22473 = 224
seq$22474 = 232
elt$22479 = 240
i$22487 = 248
seq$22488 = 256
elt$22493 = 264
i$22497 = 272
seq$22498 = 280
elt$22503 = 288
i$22513 = 296
seq$22514 = 304
elt$22519 = 312
i$22523 = 320
seq$22524 = 328
elt$22529 = 336
i$22534 = 344
seq$22535 = 352
elt$22540 = 360
i$22544 = 368
seq$22545 = 376
elt$22550 = 384
i$22555 = 392
seq$22556 = 400
elt$22561 = 408
i$22565 = 416
seq$22566 = 424
elt$22571 = 432
i$22580 = 440
seq$22581 = 448
elt$22586 = 456
i$22589 = 464
seq$22590 = 472
elt$22595 = 480
i$22598 = 488
seq$22599 = 496
elt$22604 = 504
i$22607 = 512
seq$22608 = 520
elt$22613 = 528
i$22621 = 536
seq$22622 = 544
elt$22627 = 552
i$22632 = 560
seq$22633 = 568
elt$22638 = 576
i$22643 = 584
seq$22644 = 592
cur$22651 = 600
name$22649 = 608
c_name$22657 = 616
buf$22656 = 624
i$22666 = 880
seq$22667 = 888
cur$22674 = 896
name$22672 = 904
c_name$22678 = 912
buf$22677 = 928
i$22690 = 1184
seq$22691 = 1192
elt$22696 = 1200
i$22699 = 1208
seq$22700 = 1216
elt$22705 = 1224
tv66 = 1232
tv74 = 1236
tv92 = 1240
tv145 = 1248
tv172 = 1256
tv211 = 1264
tv244 = 1272
tv261 = 1280
tv300 = 1288
tv330 = 1296
tv340 = 1304
tv359 = 1312
tv399 = 1320
tv448 = 1328
tv505 = 1336
tv524 = 1344
tv549 = 1352
tv568 = 1360
tv593 = 1368
tv612 = 1376
tv649 = 1384
tv666 = 1392
tv683 = 1400
tv700 = 1408
tv735 = 1416
tv796 = 1424
tv825 = 1432
tv888 = 1440
tv945 = 1448
tv962 = 1456
st$ = 1488
s$ = 1496
symtable_visit_stmt PROC				; COMDAT

; 1106 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec c8 05
	00 00		 sub	 rsp, 1480		; 000005c8H

; 1107 :     if (++st->recursion_depth > st->recursion_limit) {

  00011	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR st$[rsp]
  00019	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  0001c	ff c0		 inc	 eax
  0001e	89 84 24 d0 04
	00 00		 mov	 DWORD PTR tv66[rsp], eax
  00025	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR st$[rsp]
  0002d	8b 8c 24 d0 04
	00 00		 mov	 ecx, DWORD PTR tv66[rsp]
  00034	89 48 48	 mov	 DWORD PTR [rax+72], ecx
  00037	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR st$[rsp]
  0003f	8b 40 4c	 mov	 eax, DWORD PTR [rax+76]
  00042	39 84 24 d0 04
	00 00		 cmp	 DWORD PTR tv66[rsp], eax
  00049	7e 32		 jle	 SHORT $LN180@symtable_v

; 1108 :         PyErr_SetString(PyExc_RuntimeError,
; 1109 :                         "maximum recursion depth exceeded during compilation");

  0004b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DE@DFBPPMEI@maximum?5recursion?5depth?5exceeded@
  00052	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeError
  00059	e8 00 00 00 00	 call	 PyErr_SetString

; 1110 :         VISIT_QUIT(st, 0);

  0005e	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR st$[rsp]
  00066	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  00069	ff c8		 dec	 eax
  0006b	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  00073	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  00076	33 c0		 xor	 eax, eax
  00078	e9 51 20 00 00	 jmp	 $LN181@symtable_v
$LN180@symtable_v:

; 1111 :     }
; 1112 :     switch (s->kind) {

  0007d	48 8b 84 24 d8
	05 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00085	8b 00		 mov	 eax, DWORD PTR [rax]
  00087	89 84 24 d4 04
	00 00		 mov	 DWORD PTR tv74[rsp], eax
  0008e	8b 84 24 d4 04
	00 00		 mov	 eax, DWORD PTR tv74[rsp]
  00095	ff c8		 dec	 eax
  00097	89 84 24 d4 04
	00 00		 mov	 DWORD PTR tv74[rsp], eax
  0009e	83 bc 24 d4 04
	00 00 11	 cmp	 DWORD PTR tv74[rsp], 17
  000a6	0f 87 05 20 00
	00		 ja	 $LN178@symtable_v
  000ac	48 63 84 24 d4
	04 00 00	 movsxd	 rax, DWORD PTR tv74[rsp]
  000b4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  000bb	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN239@symtable_v[rcx+rax*4]
  000c2	48 03 c1	 add	 rax, rcx
  000c5	ff e0		 jmp	 rax
$LN177@symtable_v:

; 1113 :     case FunctionDef_kind:
; 1114 :         if (!symtable_add_def(st, s->v.FunctionDef.name, DEF_LOCAL))

  000c7	41 b8 02 00 00
	00		 mov	 r8d, 2
  000cd	48 8b 84 24 d8
	05 00 00	 mov	 rax, QWORD PTR s$[rsp]
  000d5	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  000d9	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  000e1	e8 00 00 00 00	 call	 symtable_add_def
  000e6	85 c0		 test	 eax, eax
  000e8	75 1f		 jne	 SHORT $LN176@symtable_v

; 1115 :             VISIT_QUIT(st, 0);

  000ea	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR st$[rsp]
  000f2	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000f5	ff c8		 dec	 eax
  000f7	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  000ff	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  00102	33 c0		 xor	 eax, eax
  00104	e9 c5 1f 00 00	 jmp	 $LN181@symtable_v
$LN176@symtable_v:

; 1116 :         if (s->v.FunctionDef.args->defaults)

  00109	48 8b 84 24 d8
	05 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00111	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00115	48 83 78 30 00	 cmp	 QWORD PTR [rax+48], 0
  0011a	0f 84 ac 00 00
	00		 je	 $LN175@symtable_v

; 1117 :             VISIT_SEQ(st, expr, s->v.FunctionDef.args->defaults);

  00120	48 8b 84 24 d8
	05 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00128	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0012c	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  00130	48 89 44 24 38	 mov	 QWORD PTR seq$22390[rsp], rax
  00135	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$22389[rsp], 0
  0013d	eb 0a		 jmp	 SHORT $LN174@symtable_v
$LN173@symtable_v:
  0013f	8b 44 24 30	 mov	 eax, DWORD PTR i$22389[rsp]
  00143	ff c0		 inc	 eax
  00145	89 44 24 30	 mov	 DWORD PTR i$22389[rsp], eax
$LN174@symtable_v:
  00149	48 83 7c 24 38
	00		 cmp	 QWORD PTR seq$22390[rsp], 0
  0014f	75 0e		 jne	 SHORT $LN183@symtable_v
  00151	48 c7 84 24 d8
	04 00 00 00 00
	00 00		 mov	 QWORD PTR tv92[rsp], 0
  0015d	eb 10		 jmp	 SHORT $LN184@symtable_v
$LN183@symtable_v:
  0015f	48 8b 44 24 38	 mov	 rax, QWORD PTR seq$22390[rsp]
  00164	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00167	48 89 84 24 d8
	04 00 00	 mov	 QWORD PTR tv92[rsp], rax
$LN184@symtable_v:
  0016f	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$22389[rsp]
  00174	48 3b 84 24 d8
	04 00 00	 cmp	 rax, QWORD PTR tv92[rsp]
  0017c	7d 4e		 jge	 SHORT $LN172@symtable_v
  0017e	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$22389[rsp]
  00183	48 8b 4c 24 38	 mov	 rcx, QWORD PTR seq$22390[rsp]
  00188	48 8b 44 c1 08	 mov	 rax, QWORD PTR [rcx+rax*8+8]
  0018d	48 89 44 24 40	 mov	 QWORD PTR elt$22395[rsp], rax
  00192	48 8b 54 24 40	 mov	 rdx, QWORD PTR elt$22395[rsp]
  00197	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  0019f	e8 00 00 00 00	 call	 symtable_visit_expr
  001a4	85 c0		 test	 eax, eax
  001a6	75 1f		 jne	 SHORT $LN171@symtable_v
  001a8	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR st$[rsp]
  001b0	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  001b3	ff c8		 dec	 eax
  001b5	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  001bd	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  001c0	33 c0		 xor	 eax, eax
  001c2	e9 07 1f 00 00	 jmp	 $LN181@symtable_v
$LN171@symtable_v:
  001c7	e9 73 ff ff ff	 jmp	 $LN173@symtable_v
$LN172@symtable_v:
$LN175@symtable_v:

; 1118 :         if (s->v.FunctionDef.args->kw_defaults)

  001cc	48 8b 84 24 d8
	05 00 00	 mov	 rax, QWORD PTR s$[rsp]
  001d4	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  001d8	48 83 78 38 00	 cmp	 QWORD PTR [rax+56], 0
  001dd	0f 84 be 00 00
	00		 je	 $LN170@symtable_v

; 1119 :             VISIT_KWONLYDEFAULTS(st,
; 1120 :                                s->v.FunctionDef.args->kw_defaults);

  001e3	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR i$22399[rsp], 0
  001eb	48 8b 84 24 d8
	05 00 00	 mov	 rax, QWORD PTR s$[rsp]
  001f3	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  001f7	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  001fb	48 89 44 24 50	 mov	 QWORD PTR seq$22400[rsp], rax
  00200	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR i$22399[rsp], 0
  00208	eb 0a		 jmp	 SHORT $LN169@symtable_v
$LN168@symtable_v:
  0020a	8b 44 24 48	 mov	 eax, DWORD PTR i$22399[rsp]
  0020e	ff c0		 inc	 eax
  00210	89 44 24 48	 mov	 DWORD PTR i$22399[rsp], eax
$LN169@symtable_v:
  00214	48 83 7c 24 50
	00		 cmp	 QWORD PTR seq$22400[rsp], 0
  0021a	75 0e		 jne	 SHORT $LN185@symtable_v
  0021c	48 c7 84 24 e0
	04 00 00 00 00
	00 00		 mov	 QWORD PTR tv145[rsp], 0
  00228	eb 10		 jmp	 SHORT $LN186@symtable_v
$LN185@symtable_v:
  0022a	48 8b 44 24 50	 mov	 rax, QWORD PTR seq$22400[rsp]
  0022f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00232	48 89 84 24 e0
	04 00 00	 mov	 QWORD PTR tv145[rsp], rax
$LN186@symtable_v:
  0023a	48 63 44 24 48	 movsxd	 rax, DWORD PTR i$22399[rsp]
  0023f	48 3b 84 24 e0
	04 00 00	 cmp	 rax, QWORD PTR tv145[rsp]
  00247	7d 58		 jge	 SHORT $LN167@symtable_v
  00249	48 63 44 24 48	 movsxd	 rax, DWORD PTR i$22399[rsp]
  0024e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR seq$22400[rsp]
  00253	48 8b 44 c1 08	 mov	 rax, QWORD PTR [rcx+rax*8+8]
  00258	48 89 44 24 58	 mov	 QWORD PTR elt$22405[rsp], rax
  0025d	48 83 7c 24 58
	00		 cmp	 QWORD PTR elt$22405[rsp], 0
  00263	75 02		 jne	 SHORT $LN166@symtable_v
  00265	eb a3		 jmp	 SHORT $LN168@symtable_v
$LN166@symtable_v:
  00267	48 8b 54 24 58	 mov	 rdx, QWORD PTR elt$22405[rsp]
  0026c	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  00274	e8 00 00 00 00	 call	 symtable_visit_expr
  00279	85 c0		 test	 eax, eax
  0027b	75 1f		 jne	 SHORT $LN165@symtable_v
  0027d	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR st$[rsp]
  00285	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  00288	ff c8		 dec	 eax
  0028a	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  00292	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  00295	33 c0		 xor	 eax, eax
  00297	e9 32 1e 00 00	 jmp	 $LN181@symtable_v
$LN165@symtable_v:
  0029c	e9 69 ff ff ff	 jmp	 $LN168@symtable_v
$LN167@symtable_v:
$LN170@symtable_v:

; 1121 :         if (!symtable_visit_annotations(st, s))

  002a1	48 8b 94 24 d8
	05 00 00	 mov	 rdx, QWORD PTR s$[rsp]
  002a9	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  002b1	e8 00 00 00 00	 call	 symtable_visit_annotations
  002b6	85 c0		 test	 eax, eax
  002b8	75 1f		 jne	 SHORT $LN164@symtable_v

; 1122 :             VISIT_QUIT(st, 0);

  002ba	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR st$[rsp]
  002c2	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  002c5	ff c8		 dec	 eax
  002c7	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  002cf	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  002d2	33 c0		 xor	 eax, eax
  002d4	e9 f5 1d 00 00	 jmp	 $LN181@symtable_v
$LN164@symtable_v:

; 1123 :         if (s->v.FunctionDef.decorator_list)

  002d9	48 8b 84 24 d8
	05 00 00	 mov	 rax, QWORD PTR s$[rsp]
  002e1	48 83 78 20 00	 cmp	 QWORD PTR [rax+32], 0
  002e6	0f 84 a8 00 00
	00		 je	 $LN163@symtable_v

; 1124 :             VISIT_SEQ(st, expr, s->v.FunctionDef.decorator_list);

  002ec	48 8b 84 24 d8
	05 00 00	 mov	 rax, QWORD PTR s$[rsp]
  002f4	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  002f8	48 89 44 24 68	 mov	 QWORD PTR seq$22412[rsp], rax
  002fd	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR i$22411[rsp], 0
  00305	eb 0a		 jmp	 SHORT $LN162@symtable_v
$LN161@symtable_v:
  00307	8b 44 24 60	 mov	 eax, DWORD PTR i$22411[rsp]
  0030b	ff c0		 inc	 eax
  0030d	89 44 24 60	 mov	 DWORD PTR i$22411[rsp], eax
$LN162@symtable_v:
  00311	48 83 7c 24 68
	00		 cmp	 QWORD PTR seq$22412[rsp], 0
  00317	75 0e		 jne	 SHORT $LN187@symtable_v
  00319	48 c7 84 24 e8
	04 00 00 00 00
	00 00		 mov	 QWORD PTR tv172[rsp], 0
  00325	eb 10		 jmp	 SHORT $LN188@symtable_v
$LN187@symtable_v:
  00327	48 8b 44 24 68	 mov	 rax, QWORD PTR seq$22412[rsp]
  0032c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0032f	48 89 84 24 e8
	04 00 00	 mov	 QWORD PTR tv172[rsp], rax
$LN188@symtable_v:
  00337	48 63 44 24 60	 movsxd	 rax, DWORD PTR i$22411[rsp]
  0033c	48 3b 84 24 e8
	04 00 00	 cmp	 rax, QWORD PTR tv172[rsp]
  00344	7d 4e		 jge	 SHORT $LN160@symtable_v
  00346	48 63 44 24 60	 movsxd	 rax, DWORD PTR i$22411[rsp]
  0034b	48 8b 4c 24 68	 mov	 rcx, QWORD PTR seq$22412[rsp]
  00350	48 8b 44 c1 08	 mov	 rax, QWORD PTR [rcx+rax*8+8]
  00355	48 89 44 24 70	 mov	 QWORD PTR elt$22417[rsp], rax
  0035a	48 8b 54 24 70	 mov	 rdx, QWORD PTR elt$22417[rsp]
  0035f	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  00367	e8 00 00 00 00	 call	 symtable_visit_expr
  0036c	85 c0		 test	 eax, eax
  0036e	75 1f		 jne	 SHORT $LN159@symtable_v
  00370	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR st$[rsp]
  00378	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  0037b	ff c8		 dec	 eax
  0037d	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  00385	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  00388	33 c0		 xor	 eax, eax
  0038a	e9 3f 1d 00 00	 jmp	 $LN181@symtable_v
$LN159@symtable_v:
  0038f	e9 73 ff ff ff	 jmp	 $LN161@symtable_v
$LN160@symtable_v:
$LN163@symtable_v:

; 1125 :         if (!symtable_enter_block(st, s->v.FunctionDef.name,
; 1126 :                                   FunctionBlock, (void *)s, s->lineno,
; 1127 :                                   s->col_offset))

  00394	48 8b 84 24 d8
	05 00 00	 mov	 rax, QWORD PTR s$[rsp]
  0039c	8b 40 44	 mov	 eax, DWORD PTR [rax+68]
  0039f	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  003a3	48 8b 84 24 d8
	05 00 00	 mov	 rax, QWORD PTR s$[rsp]
  003ab	8b 40 40	 mov	 eax, DWORD PTR [rax+64]
  003ae	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  003b2	4c 8b 8c 24 d8
	05 00 00	 mov	 r9, QWORD PTR s$[rsp]
  003ba	45 33 c0	 xor	 r8d, r8d
  003bd	48 8b 84 24 d8
	05 00 00	 mov	 rax, QWORD PTR s$[rsp]
  003c5	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  003c9	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  003d1	e8 00 00 00 00	 call	 symtable_enter_block
  003d6	85 c0		 test	 eax, eax
  003d8	75 1f		 jne	 SHORT $LN158@symtable_v

; 1128 :             VISIT_QUIT(st, 0);

  003da	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR st$[rsp]
  003e2	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  003e5	ff c8		 dec	 eax
  003e7	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  003ef	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  003f2	33 c0		 xor	 eax, eax
  003f4	e9 d5 1c 00 00	 jmp	 $LN181@symtable_v
$LN158@symtable_v:

; 1129 :         VISIT(st, arguments, s->v.FunctionDef.args);

  003f9	48 8b 84 24 d8
	05 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00401	48 8b 50 10	 mov	 rdx, QWORD PTR [rax+16]
  00405	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  0040d	e8 00 00 00 00	 call	 symtable_visit_arguments
  00412	85 c0		 test	 eax, eax
  00414	75 1f		 jne	 SHORT $LN157@symtable_v
  00416	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR st$[rsp]
  0041e	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  00421	ff c8		 dec	 eax
  00423	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  0042b	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  0042e	33 c0		 xor	 eax, eax
  00430	e9 99 1c 00 00	 jmp	 $LN181@symtable_v
$LN157@symtable_v:

; 1130 :         VISIT_SEQ(st, stmt, s->v.FunctionDef.body);

  00435	48 8b 84 24 d8
	05 00 00	 mov	 rax, QWORD PTR s$[rsp]
  0043d	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  00441	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR seq$22424[rsp], rax
  00449	c7 44 24 78 00
	00 00 00	 mov	 DWORD PTR i$22423[rsp], 0
  00451	eb 0a		 jmp	 SHORT $LN156@symtable_v
$LN155@symtable_v:
  00453	8b 44 24 78	 mov	 eax, DWORD PTR i$22423[rsp]
  00457	ff c0		 inc	 eax
  00459	89 44 24 78	 mov	 DWORD PTR i$22423[rsp], eax
$LN156@symtable_v:
  0045d	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR seq$22424[rsp], 0
  00466	75 0e		 jne	 SHORT $LN189@symtable_v
  00468	48 c7 84 24 f0
	04 00 00 00 00
	00 00		 mov	 QWORD PTR tv211[rsp], 0
  00474	eb 13		 jmp	 SHORT $LN190@symtable_v
$LN189@symtable_v:
  00476	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR seq$22424[rsp]
  0047e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00481	48 89 84 24 f0
	04 00 00	 mov	 QWORD PTR tv211[rsp], rax
$LN190@symtable_v:
  00489	48 63 44 24 78	 movsxd	 rax, DWORD PTR i$22423[rsp]
  0048e	48 3b 84 24 f0
	04 00 00	 cmp	 rax, QWORD PTR tv211[rsp]
  00496	7d 57		 jge	 SHORT $LN154@symtable_v
  00498	48 63 44 24 78	 movsxd	 rax, DWORD PTR i$22423[rsp]
  0049d	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR seq$22424[rsp]
  004a5	48 8b 44 c1 08	 mov	 rax, QWORD PTR [rcx+rax*8+8]
  004aa	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR elt$22429[rsp], rax
  004b2	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR elt$22429[rsp]
  004ba	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  004c2	e8 00 00 00 00	 call	 symtable_visit_stmt
  004c7	85 c0		 test	 eax, eax
  004c9	75 1f		 jne	 SHORT $LN153@symtable_v
  004cb	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR st$[rsp]
  004d3	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  004d6	ff c8		 dec	 eax
  004d8	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  004e0	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  004e3	33 c0		 xor	 eax, eax
  004e5	e9 e4 1b 00 00	 jmp	 $LN181@symtable_v
$LN153@symtable_v:
  004ea	e9 64 ff ff ff	 jmp	 $LN155@symtable_v
$LN154@symtable_v:

; 1131 :         if (!symtable_exit_block(st, s))

  004ef	48 8b 94 24 d8
	05 00 00	 mov	 rdx, QWORD PTR s$[rsp]
  004f7	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  004ff	e8 00 00 00 00	 call	 symtable_exit_block
  00504	85 c0		 test	 eax, eax
  00506	75 1f		 jne	 SHORT $LN152@symtable_v

; 1132 :             VISIT_QUIT(st, 0);

  00508	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR st$[rsp]
  00510	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  00513	ff c8		 dec	 eax
  00515	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  0051d	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  00520	33 c0		 xor	 eax, eax
  00522	e9 a7 1b 00 00	 jmp	 $LN181@symtable_v
$LN152@symtable_v:

; 1133 :         break;

  00527	e9 85 1b 00 00	 jmp	 $LN178@symtable_v
$LN151@symtable_v:

; 1134 :     case ClassDef_kind: {
; 1135 :         PyObject *tmp;
; 1136 :         if (!symtable_add_def(st, s->v.ClassDef.name, DEF_LOCAL))

  0052c	41 b8 02 00 00
	00		 mov	 r8d, 2
  00532	48 8b 84 24 d8
	05 00 00	 mov	 rax, QWORD PTR s$[rsp]
  0053a	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  0053e	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  00546	e8 00 00 00 00	 call	 symtable_add_def
  0054b	85 c0		 test	 eax, eax
  0054d	75 1f		 jne	 SHORT $LN150@symtable_v

; 1137 :             VISIT_QUIT(st, 0);

  0054f	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR st$[rsp]
  00557	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  0055a	ff c8		 dec	 eax
  0055c	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  00564	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  00567	33 c0		 xor	 eax, eax
  00569	e9 60 1b 00 00	 jmp	 $LN181@symtable_v
$LN150@symtable_v:

; 1138 :         VISIT_SEQ(st, expr, s->v.ClassDef.bases);

  0056e	48 8b 84 24 d8
	05 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00576	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0057a	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR seq$22437[rsp], rax
  00582	c7 84 24 98 00
	00 00 00 00 00
	00		 mov	 DWORD PTR i$22436[rsp], 0
  0058d	eb 10		 jmp	 SHORT $LN149@symtable_v
$LN148@symtable_v:
  0058f	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR i$22436[rsp]
  00596	ff c0		 inc	 eax
  00598	89 84 24 98 00
	00 00		 mov	 DWORD PTR i$22436[rsp], eax
$LN149@symtable_v:
  0059f	48 83 bc 24 a0
	00 00 00 00	 cmp	 QWORD PTR seq$22437[rsp], 0
  005a8	75 0e		 jne	 SHORT $LN191@symtable_v
  005aa	48 c7 84 24 f8
	04 00 00 00 00
	00 00		 mov	 QWORD PTR tv244[rsp], 0
  005b6	eb 13		 jmp	 SHORT $LN192@symtable_v
$LN191@symtable_v:
  005b8	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR seq$22437[rsp]
  005c0	48 8b 00	 mov	 rax, QWORD PTR [rax]
  005c3	48 89 84 24 f8
	04 00 00	 mov	 QWORD PTR tv244[rsp], rax
$LN192@symtable_v:
  005cb	48 63 84 24 98
	00 00 00	 movsxd	 rax, DWORD PTR i$22436[rsp]
  005d3	48 3b 84 24 f8
	04 00 00	 cmp	 rax, QWORD PTR tv244[rsp]
  005db	7d 5a		 jge	 SHORT $LN147@symtable_v
  005dd	48 63 84 24 98
	00 00 00	 movsxd	 rax, DWORD PTR i$22436[rsp]
  005e5	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR seq$22437[rsp]
  005ed	48 8b 44 c1 08	 mov	 rax, QWORD PTR [rcx+rax*8+8]
  005f2	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR elt$22442[rsp], rax
  005fa	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR elt$22442[rsp]
  00602	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  0060a	e8 00 00 00 00	 call	 symtable_visit_expr
  0060f	85 c0		 test	 eax, eax
  00611	75 1f		 jne	 SHORT $LN146@symtable_v
  00613	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR st$[rsp]
  0061b	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  0061e	ff c8		 dec	 eax
  00620	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  00628	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  0062b	33 c0		 xor	 eax, eax
  0062d	e9 9c 1a 00 00	 jmp	 $LN181@symtable_v
$LN146@symtable_v:
  00632	e9 58 ff ff ff	 jmp	 $LN148@symtable_v
$LN147@symtable_v:

; 1139 :         VISIT_SEQ(st, keyword, s->v.ClassDef.keywords);

  00637	48 8b 84 24 d8
	05 00 00	 mov	 rax, QWORD PTR s$[rsp]
  0063f	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  00643	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR seq$22446[rsp], rax
  0064b	c7 84 24 b0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR i$22445[rsp], 0
  00656	eb 10		 jmp	 SHORT $LN145@symtable_v
$LN144@symtable_v:
  00658	8b 84 24 b0 00
	00 00		 mov	 eax, DWORD PTR i$22445[rsp]
  0065f	ff c0		 inc	 eax
  00661	89 84 24 b0 00
	00 00		 mov	 DWORD PTR i$22445[rsp], eax
$LN145@symtable_v:
  00668	48 83 bc 24 b8
	00 00 00 00	 cmp	 QWORD PTR seq$22446[rsp], 0
  00671	75 0e		 jne	 SHORT $LN193@symtable_v
  00673	48 c7 84 24 00
	05 00 00 00 00
	00 00		 mov	 QWORD PTR tv261[rsp], 0
  0067f	eb 13		 jmp	 SHORT $LN194@symtable_v
$LN193@symtable_v:
  00681	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR seq$22446[rsp]
  00689	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0068c	48 89 84 24 00
	05 00 00	 mov	 QWORD PTR tv261[rsp], rax
$LN194@symtable_v:
  00694	48 63 84 24 b0
	00 00 00	 movsxd	 rax, DWORD PTR i$22445[rsp]
  0069c	48 3b 84 24 00
	05 00 00	 cmp	 rax, QWORD PTR tv261[rsp]
  006a4	7d 5a		 jge	 SHORT $LN143@symtable_v
  006a6	48 63 84 24 b0
	00 00 00	 movsxd	 rax, DWORD PTR i$22445[rsp]
  006ae	48 8b 8c 24 b8
	00 00 00	 mov	 rcx, QWORD PTR seq$22446[rsp]
  006b6	48 8b 44 c1 08	 mov	 rax, QWORD PTR [rcx+rax*8+8]
  006bb	48 89 84 24 c0
	00 00 00	 mov	 QWORD PTR elt$22451[rsp], rax
  006c3	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR elt$22451[rsp]
  006cb	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  006d3	e8 00 00 00 00	 call	 symtable_visit_keyword
  006d8	85 c0		 test	 eax, eax
  006da	75 1f		 jne	 SHORT $LN142@symtable_v
  006dc	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR st$[rsp]
  006e4	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  006e7	ff c8		 dec	 eax
  006e9	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  006f1	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  006f4	33 c0		 xor	 eax, eax
  006f6	e9 d3 19 00 00	 jmp	 $LN181@symtable_v
$LN142@symtable_v:
  006fb	e9 58 ff ff ff	 jmp	 $LN144@symtable_v
$LN143@symtable_v:

; 1140 :         if (s->v.ClassDef.starargs)

  00700	48 8b 84 24 d8
	05 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00708	48 83 78 20 00	 cmp	 QWORD PTR [rax+32], 0
  0070d	74 3c		 je	 SHORT $LN141@symtable_v

; 1141 :             VISIT(st, expr, s->v.ClassDef.starargs);

  0070f	48 8b 84 24 d8
	05 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00717	48 8b 50 20	 mov	 rdx, QWORD PTR [rax+32]
  0071b	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  00723	e8 00 00 00 00	 call	 symtable_visit_expr
  00728	85 c0		 test	 eax, eax
  0072a	75 1f		 jne	 SHORT $LN140@symtable_v
  0072c	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR st$[rsp]
  00734	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  00737	ff c8		 dec	 eax
  00739	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  00741	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  00744	33 c0		 xor	 eax, eax
  00746	e9 83 19 00 00	 jmp	 $LN181@symtable_v
$LN140@symtable_v:
$LN141@symtable_v:

; 1142 :         if (s->v.ClassDef.kwargs)

  0074b	48 8b 84 24 d8
	05 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00753	48 83 78 28 00	 cmp	 QWORD PTR [rax+40], 0
  00758	74 3c		 je	 SHORT $LN139@symtable_v

; 1143 :             VISIT(st, expr, s->v.ClassDef.kwargs);

  0075a	48 8b 84 24 d8
	05 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00762	48 8b 50 28	 mov	 rdx, QWORD PTR [rax+40]
  00766	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  0076e	e8 00 00 00 00	 call	 symtable_visit_expr
  00773	85 c0		 test	 eax, eax
  00775	75 1f		 jne	 SHORT $LN138@symtable_v
  00777	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR st$[rsp]
  0077f	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  00782	ff c8		 dec	 eax
  00784	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  0078c	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  0078f	33 c0		 xor	 eax, eax
  00791	e9 38 19 00 00	 jmp	 $LN181@symtable_v
$LN138@symtable_v:
$LN139@symtable_v:

; 1144 :         if (s->v.ClassDef.decorator_list)

  00796	48 8b 84 24 d8
	05 00 00	 mov	 rax, QWORD PTR s$[rsp]
  0079e	48 83 78 38 00	 cmp	 QWORD PTR [rax+56], 0
  007a3	0f 84 c9 00 00
	00		 je	 $LN137@symtable_v

; 1145 :             VISIT_SEQ(st, expr, s->v.ClassDef.decorator_list);

  007a9	48 8b 84 24 d8
	05 00 00	 mov	 rax, QWORD PTR s$[rsp]
  007b1	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  007b5	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR seq$22460[rsp], rax
  007bd	c7 84 24 c8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR i$22459[rsp], 0
  007c8	eb 10		 jmp	 SHORT $LN136@symtable_v
$LN135@symtable_v:
  007ca	8b 84 24 c8 00
	00 00		 mov	 eax, DWORD PTR i$22459[rsp]
  007d1	ff c0		 inc	 eax
  007d3	89 84 24 c8 00
	00 00		 mov	 DWORD PTR i$22459[rsp], eax
$LN136@symtable_v:
  007da	48 83 bc 24 d0
	00 00 00 00	 cmp	 QWORD PTR seq$22460[rsp], 0
  007e3	75 0e		 jne	 SHORT $LN195@symtable_v
  007e5	48 c7 84 24 08
	05 00 00 00 00
	00 00		 mov	 QWORD PTR tv300[rsp], 0
  007f1	eb 13		 jmp	 SHORT $LN196@symtable_v
$LN195@symtable_v:
  007f3	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR seq$22460[rsp]
  007fb	48 8b 00	 mov	 rax, QWORD PTR [rax]
  007fe	48 89 84 24 08
	05 00 00	 mov	 QWORD PTR tv300[rsp], rax
$LN196@symtable_v:
  00806	48 63 84 24 c8
	00 00 00	 movsxd	 rax, DWORD PTR i$22459[rsp]
  0080e	48 3b 84 24 08
	05 00 00	 cmp	 rax, QWORD PTR tv300[rsp]
  00816	7d 5a		 jge	 SHORT $LN134@symtable_v
  00818	48 63 84 24 c8
	00 00 00	 movsxd	 rax, DWORD PTR i$22459[rsp]
  00820	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR seq$22460[rsp]
  00828	48 8b 44 c1 08	 mov	 rax, QWORD PTR [rcx+rax*8+8]
  0082d	48 89 84 24 d8
	00 00 00	 mov	 QWORD PTR elt$22465[rsp], rax
  00835	48 8b 94 24 d8
	00 00 00	 mov	 rdx, QWORD PTR elt$22465[rsp]
  0083d	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  00845	e8 00 00 00 00	 call	 symtable_visit_expr
  0084a	85 c0		 test	 eax, eax
  0084c	75 1f		 jne	 SHORT $LN133@symtable_v
  0084e	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR st$[rsp]
  00856	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  00859	ff c8		 dec	 eax
  0085b	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  00863	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  00866	33 c0		 xor	 eax, eax
  00868	e9 61 18 00 00	 jmp	 $LN181@symtable_v
$LN133@symtable_v:
  0086d	e9 58 ff ff ff	 jmp	 $LN135@symtable_v
$LN134@symtable_v:
$LN137@symtable_v:

; 1146 :         if (!symtable_enter_block(st, s->v.ClassDef.name, ClassBlock,
; 1147 :                                   (void *)s, s->lineno, s->col_offset))

  00872	48 8b 84 24 d8
	05 00 00	 mov	 rax, QWORD PTR s$[rsp]
  0087a	8b 40 44	 mov	 eax, DWORD PTR [rax+68]
  0087d	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00881	48 8b 84 24 d8
	05 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00889	8b 40 40	 mov	 eax, DWORD PTR [rax+64]
  0088c	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00890	4c 8b 8c 24 d8
	05 00 00	 mov	 r9, QWORD PTR s$[rsp]
  00898	41 b8 01 00 00
	00		 mov	 r8d, 1
  0089e	48 8b 84 24 d8
	05 00 00	 mov	 rax, QWORD PTR s$[rsp]
  008a6	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  008aa	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  008b2	e8 00 00 00 00	 call	 symtable_enter_block
  008b7	85 c0		 test	 eax, eax
  008b9	75 1f		 jne	 SHORT $LN132@symtable_v

; 1148 :             VISIT_QUIT(st, 0);

  008bb	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR st$[rsp]
  008c3	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  008c6	ff c8		 dec	 eax
  008c8	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  008d0	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  008d3	33 c0		 xor	 eax, eax
  008d5	e9 f4 17 00 00	 jmp	 $LN181@symtable_v
$LN132@symtable_v:

; 1149 :         if (!GET_IDENTIFIER(__class__) ||
; 1150 :             !symtable_add_def(st, __class__, DEF_LOCAL) ||
; 1151 :             !GET_IDENTIFIER(__locals__) ||
; 1152 :             !symtable_add_def(st, __locals__, DEF_PARAM)) {

  008da	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR __class__, 0
  008e2	74 11		 je	 SHORT $LN197@symtable_v
  008e4	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __class__
  008eb	48 89 84 24 10
	05 00 00	 mov	 QWORD PTR tv330[rsp], rax
  008f3	eb 22		 jmp	 SHORT $LN198@symtable_v
$LN197@symtable_v:
  008f5	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09LFGACEKG@__class__?$AA@
  008fc	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  00901	48 89 05 00 00
	00 00		 mov	 QWORD PTR __class__, rax
  00908	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __class__
  0090f	48 89 84 24 10
	05 00 00	 mov	 QWORD PTR tv330[rsp], rax
$LN198@symtable_v:
  00917	48 83 bc 24 10
	05 00 00 00	 cmp	 QWORD PTR tv330[rsp], 0
  00920	0f 84 84 00 00
	00		 je	 $LN130@symtable_v
  00926	41 b8 02 00 00
	00		 mov	 r8d, 2
  0092c	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR __class__
  00933	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  0093b	e8 00 00 00 00	 call	 symtable_add_def
  00940	85 c0		 test	 eax, eax
  00942	74 66		 je	 SHORT $LN130@symtable_v
  00944	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR __locals__, 0
  0094c	74 11		 je	 SHORT $LN199@symtable_v
  0094e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __locals__
  00955	48 89 84 24 18
	05 00 00	 mov	 QWORD PTR tv340[rsp], rax
  0095d	eb 22		 jmp	 SHORT $LN200@symtable_v
$LN199@symtable_v:
  0095f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@ICMAENDM@__locals__?$AA@
  00966	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  0096b	48 89 05 00 00
	00 00		 mov	 QWORD PTR __locals__, rax
  00972	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __locals__
  00979	48 89 84 24 18
	05 00 00	 mov	 QWORD PTR tv340[rsp], rax
$LN200@symtable_v:
  00981	48 83 bc 24 18
	05 00 00 00	 cmp	 QWORD PTR tv340[rsp], 0
  0098a	74 1e		 je	 SHORT $LN130@symtable_v
  0098c	41 b8 04 00 00
	00		 mov	 r8d, 4
  00992	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR __locals__
  00999	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  009a1	e8 00 00 00 00	 call	 symtable_add_def
  009a6	85 c0		 test	 eax, eax
  009a8	75 34		 jne	 SHORT $LN131@symtable_v
$LN130@symtable_v:

; 1153 :             symtable_exit_block(st, s);

  009aa	48 8b 94 24 d8
	05 00 00	 mov	 rdx, QWORD PTR s$[rsp]
  009b2	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  009ba	e8 00 00 00 00	 call	 symtable_exit_block

; 1154 :             VISIT_QUIT(st, 0);

  009bf	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR st$[rsp]
  009c7	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  009ca	ff c8		 dec	 eax
  009cc	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  009d4	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  009d7	33 c0		 xor	 eax, eax
  009d9	e9 f0 16 00 00	 jmp	 $LN181@symtable_v
$LN131@symtable_v:

; 1155 :         }
; 1156 :         tmp = st->st_private;

  009de	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR st$[rsp]
  009e6	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  009ea	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR tmp$22434[rsp], rax

; 1157 :         st->st_private = s->v.ClassDef.name;

  009f2	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR st$[rsp]
  009fa	48 8b 8c 24 d8
	05 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  00a02	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00a06	48 89 48 38	 mov	 QWORD PTR [rax+56], rcx

; 1158 :         VISIT_SEQ(st, stmt, s->v.ClassDef.body);

  00a0a	48 8b 84 24 d8
	05 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00a12	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  00a16	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR seq$22474[rsp], rax
  00a1e	c7 84 24 e0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR i$22473[rsp], 0
  00a29	eb 10		 jmp	 SHORT $LN129@symtable_v
$LN128@symtable_v:
  00a2b	8b 84 24 e0 00
	00 00		 mov	 eax, DWORD PTR i$22473[rsp]
  00a32	ff c0		 inc	 eax
  00a34	89 84 24 e0 00
	00 00		 mov	 DWORD PTR i$22473[rsp], eax
$LN129@symtable_v:
  00a3b	48 83 bc 24 e8
	00 00 00 00	 cmp	 QWORD PTR seq$22474[rsp], 0
  00a44	75 0e		 jne	 SHORT $LN201@symtable_v
  00a46	48 c7 84 24 20
	05 00 00 00 00
	00 00		 mov	 QWORD PTR tv359[rsp], 0
  00a52	eb 13		 jmp	 SHORT $LN202@symtable_v
$LN201@symtable_v:
  00a54	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR seq$22474[rsp]
  00a5c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00a5f	48 89 84 24 20
	05 00 00	 mov	 QWORD PTR tv359[rsp], rax
$LN202@symtable_v:
  00a67	48 63 84 24 e0
	00 00 00	 movsxd	 rax, DWORD PTR i$22473[rsp]
  00a6f	48 3b 84 24 20
	05 00 00	 cmp	 rax, QWORD PTR tv359[rsp]
  00a77	7d 5a		 jge	 SHORT $LN127@symtable_v
  00a79	48 63 84 24 e0
	00 00 00	 movsxd	 rax, DWORD PTR i$22473[rsp]
  00a81	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR seq$22474[rsp]
  00a89	48 8b 44 c1 08	 mov	 rax, QWORD PTR [rcx+rax*8+8]
  00a8e	48 89 84 24 f0
	00 00 00	 mov	 QWORD PTR elt$22479[rsp], rax
  00a96	48 8b 94 24 f0
	00 00 00	 mov	 rdx, QWORD PTR elt$22479[rsp]
  00a9e	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  00aa6	e8 00 00 00 00	 call	 symtable_visit_stmt
  00aab	85 c0		 test	 eax, eax
  00aad	75 1f		 jne	 SHORT $LN126@symtable_v
  00aaf	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR st$[rsp]
  00ab7	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  00aba	ff c8		 dec	 eax
  00abc	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  00ac4	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  00ac7	33 c0		 xor	 eax, eax
  00ac9	e9 00 16 00 00	 jmp	 $LN181@symtable_v
$LN126@symtable_v:
  00ace	e9 58 ff ff ff	 jmp	 $LN128@symtable_v
$LN127@symtable_v:

; 1159 :         st->st_private = tmp;

  00ad3	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR st$[rsp]
  00adb	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR tmp$22434[rsp]
  00ae3	48 89 48 38	 mov	 QWORD PTR [rax+56], rcx

; 1160 :         if (!symtable_exit_block(st, s))

  00ae7	48 8b 94 24 d8
	05 00 00	 mov	 rdx, QWORD PTR s$[rsp]
  00aef	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  00af7	e8 00 00 00 00	 call	 symtable_exit_block
  00afc	85 c0		 test	 eax, eax
  00afe	75 1f		 jne	 SHORT $LN125@symtable_v

; 1161 :             VISIT_QUIT(st, 0);

  00b00	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR st$[rsp]
  00b08	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  00b0b	ff c8		 dec	 eax
  00b0d	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  00b15	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  00b18	33 c0		 xor	 eax, eax
  00b1a	e9 af 15 00 00	 jmp	 $LN181@symtable_v
$LN125@symtable_v:

; 1162 :         break;

  00b1f	e9 8d 15 00 00	 jmp	 $LN178@symtable_v
$LN124@symtable_v:

; 1163 :     }
; 1164 :     case Return_kind:
; 1165 :         if (s->v.Return.value) {

  00b24	48 8b 84 24 d8
	05 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00b2c	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00b31	74 63		 je	 SHORT $LN123@symtable_v

; 1166 :             VISIT(st, expr, s->v.Return.value);

  00b33	48 8b 84 24 d8
	05 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00b3b	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  00b3f	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  00b47	e8 00 00 00 00	 call	 symtable_visit_expr
  00b4c	85 c0		 test	 eax, eax
  00b4e	75 1f		 jne	 SHORT $LN122@symtable_v
  00b50	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR st$[rsp]
  00b58	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  00b5b	ff c8		 dec	 eax
  00b5d	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  00b65	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  00b68	33 c0		 xor	 eax, eax
  00b6a	e9 5f 15 00 00	 jmp	 $LN181@symtable_v
$LN122@symtable_v:

; 1167 :             st->st_cur->ste_returns_value = 1;

  00b6f	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR st$[rsp]
  00b77	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00b7b	8b 80 94 00 00
	00		 mov	 eax, DWORD PTR [rax+148]
  00b81	83 c8 20	 or	 eax, 32			; 00000020H
  00b84	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  00b8c	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00b90	89 81 94 00 00
	00		 mov	 DWORD PTR [rcx+148], eax
$LN123@symtable_v:

; 1168 :         }
; 1169 :         break;

  00b96	e9 16 15 00 00	 jmp	 $LN178@symtable_v
$LN121@symtable_v:

; 1170 :     case Delete_kind:
; 1171 :         VISIT_SEQ(st, expr, s->v.Delete.targets);

  00b9b	48 8b 84 24 d8
	05 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00ba3	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00ba7	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR seq$22488[rsp], rax
  00baf	c7 84 24 f8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR i$22487[rsp], 0
  00bba	eb 10		 jmp	 SHORT $LN120@symtable_v
$LN119@symtable_v:
  00bbc	8b 84 24 f8 00
	00 00		 mov	 eax, DWORD PTR i$22487[rsp]
  00bc3	ff c0		 inc	 eax
  00bc5	89 84 24 f8 00
	00 00		 mov	 DWORD PTR i$22487[rsp], eax
$LN120@symtable_v:
  00bcc	48 83 bc 24 00
	01 00 00 00	 cmp	 QWORD PTR seq$22488[rsp], 0
  00bd5	75 0e		 jne	 SHORT $LN203@symtable_v
  00bd7	48 c7 84 24 28
	05 00 00 00 00
	00 00		 mov	 QWORD PTR tv399[rsp], 0
  00be3	eb 13		 jmp	 SHORT $LN204@symtable_v
$LN203@symtable_v:
  00be5	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR seq$22488[rsp]
  00bed	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00bf0	48 89 84 24 28
	05 00 00	 mov	 QWORD PTR tv399[rsp], rax
$LN204@symtable_v:
  00bf8	48 63 84 24 f8
	00 00 00	 movsxd	 rax, DWORD PTR i$22487[rsp]
  00c00	48 3b 84 24 28
	05 00 00	 cmp	 rax, QWORD PTR tv399[rsp]
  00c08	7d 5a		 jge	 SHORT $LN118@symtable_v
  00c0a	48 63 84 24 f8
	00 00 00	 movsxd	 rax, DWORD PTR i$22487[rsp]
  00c12	48 8b 8c 24 00
	01 00 00	 mov	 rcx, QWORD PTR seq$22488[rsp]
  00c1a	48 8b 44 c1 08	 mov	 rax, QWORD PTR [rcx+rax*8+8]
  00c1f	48 89 84 24 08
	01 00 00	 mov	 QWORD PTR elt$22493[rsp], rax
  00c27	48 8b 94 24 08
	01 00 00	 mov	 rdx, QWORD PTR elt$22493[rsp]
  00c2f	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  00c37	e8 00 00 00 00	 call	 symtable_visit_expr
  00c3c	85 c0		 test	 eax, eax
  00c3e	75 1f		 jne	 SHORT $LN117@symtable_v
  00c40	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR st$[rsp]
  00c48	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  00c4b	ff c8		 dec	 eax
  00c4d	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  00c55	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  00c58	33 c0		 xor	 eax, eax
  00c5a	e9 6f 14 00 00	 jmp	 $LN181@symtable_v
$LN117@symtable_v:
  00c5f	e9 58 ff ff ff	 jmp	 $LN119@symtable_v
$LN118@symtable_v:

; 1172 :         break;

  00c64	e9 48 14 00 00	 jmp	 $LN178@symtable_v
$LN116@symtable_v:

; 1173 :     case Assign_kind:
; 1174 :         VISIT_SEQ(st, expr, s->v.Assign.targets);

  00c69	48 8b 84 24 d8
	05 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00c71	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00c75	48 89 84 24 18
	01 00 00	 mov	 QWORD PTR seq$22498[rsp], rax
  00c7d	c7 84 24 10 01
	00 00 00 00 00
	00		 mov	 DWORD PTR i$22497[rsp], 0
  00c88	eb 10		 jmp	 SHORT $LN115@symtable_v
$LN114@symtable_v:
  00c8a	8b 84 24 10 01
	00 00		 mov	 eax, DWORD PTR i$22497[rsp]
  00c91	ff c0		 inc	 eax
  00c93	89 84 24 10 01
	00 00		 mov	 DWORD PTR i$22497[rsp], eax
$LN115@symtable_v:
  00c9a	48 83 bc 24 18
	01 00 00 00	 cmp	 QWORD PTR seq$22498[rsp], 0
  00ca3	75 0e		 jne	 SHORT $LN205@symtable_v
  00ca5	48 c7 84 24 30
	05 00 00 00 00
	00 00		 mov	 QWORD PTR tv448[rsp], 0
  00cb1	eb 13		 jmp	 SHORT $LN206@symtable_v
$LN205@symtable_v:
  00cb3	48 8b 84 24 18
	01 00 00	 mov	 rax, QWORD PTR seq$22498[rsp]
  00cbb	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00cbe	48 89 84 24 30
	05 00 00	 mov	 QWORD PTR tv448[rsp], rax
$LN206@symtable_v:
  00cc6	48 63 84 24 10
	01 00 00	 movsxd	 rax, DWORD PTR i$22497[rsp]
  00cce	48 3b 84 24 30
	05 00 00	 cmp	 rax, QWORD PTR tv448[rsp]
  00cd6	7d 5a		 jge	 SHORT $LN113@symtable_v
  00cd8	48 63 84 24 10
	01 00 00	 movsxd	 rax, DWORD PTR i$22497[rsp]
  00ce0	48 8b 8c 24 18
	01 00 00	 mov	 rcx, QWORD PTR seq$22498[rsp]
  00ce8	48 8b 44 c1 08	 mov	 rax, QWORD PTR [rcx+rax*8+8]
  00ced	48 89 84 24 20
	01 00 00	 mov	 QWORD PTR elt$22503[rsp], rax
  00cf5	48 8b 94 24 20
	01 00 00	 mov	 rdx, QWORD PTR elt$22503[rsp]
  00cfd	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  00d05	e8 00 00 00 00	 call	 symtable_visit_expr
  00d0a	85 c0		 test	 eax, eax
  00d0c	75 1f		 jne	 SHORT $LN112@symtable_v
  00d0e	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR st$[rsp]
  00d16	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  00d19	ff c8		 dec	 eax
  00d1b	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  00d23	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  00d26	33 c0		 xor	 eax, eax
  00d28	e9 a1 13 00 00	 jmp	 $LN181@symtable_v
$LN112@symtable_v:
  00d2d	e9 58 ff ff ff	 jmp	 $LN114@symtable_v
$LN113@symtable_v:

; 1175 :         VISIT(st, expr, s->v.Assign.value);

  00d32	48 8b 84 24 d8
	05 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00d3a	48 8b 50 10	 mov	 rdx, QWORD PTR [rax+16]
  00d3e	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  00d46	e8 00 00 00 00	 call	 symtable_visit_expr
  00d4b	85 c0		 test	 eax, eax
  00d4d	75 1f		 jne	 SHORT $LN111@symtable_v
  00d4f	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR st$[rsp]
  00d57	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  00d5a	ff c8		 dec	 eax
  00d5c	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  00d64	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  00d67	33 c0		 xor	 eax, eax
  00d69	e9 60 13 00 00	 jmp	 $LN181@symtable_v
$LN111@symtable_v:

; 1176 :         break;

  00d6e	e9 3e 13 00 00	 jmp	 $LN178@symtable_v
$LN110@symtable_v:

; 1177 :     case AugAssign_kind:
; 1178 :         VISIT(st, expr, s->v.AugAssign.target);

  00d73	48 8b 84 24 d8
	05 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00d7b	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  00d7f	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  00d87	e8 00 00 00 00	 call	 symtable_visit_expr
  00d8c	85 c0		 test	 eax, eax
  00d8e	75 1f		 jne	 SHORT $LN109@symtable_v
  00d90	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR st$[rsp]
  00d98	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  00d9b	ff c8		 dec	 eax
  00d9d	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  00da5	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  00da8	33 c0		 xor	 eax, eax
  00daa	e9 1f 13 00 00	 jmp	 $LN181@symtable_v
$LN109@symtable_v:

; 1179 :         VISIT(st, expr, s->v.AugAssign.value);

  00daf	48 8b 84 24 d8
	05 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00db7	48 8b 50 18	 mov	 rdx, QWORD PTR [rax+24]
  00dbb	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  00dc3	e8 00 00 00 00	 call	 symtable_visit_expr
  00dc8	85 c0		 test	 eax, eax
  00dca	75 1f		 jne	 SHORT $LN108@symtable_v
  00dcc	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR st$[rsp]
  00dd4	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  00dd7	ff c8		 dec	 eax
  00dd9	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  00de1	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  00de4	33 c0		 xor	 eax, eax
  00de6	e9 e3 12 00 00	 jmp	 $LN181@symtable_v
$LN108@symtable_v:

; 1180 :         break;

  00deb	e9 c1 12 00 00	 jmp	 $LN178@symtable_v
$LN107@symtable_v:

; 1181 :     case For_kind:
; 1182 :         VISIT(st, expr, s->v.For.target);

  00df0	48 8b 84 24 d8
	05 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00df8	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  00dfc	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  00e04	e8 00 00 00 00	 call	 symtable_visit_expr
  00e09	85 c0		 test	 eax, eax
  00e0b	75 1f		 jne	 SHORT $LN106@symtable_v
  00e0d	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR st$[rsp]
  00e15	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  00e18	ff c8		 dec	 eax
  00e1a	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  00e22	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  00e25	33 c0		 xor	 eax, eax
  00e27	e9 a2 12 00 00	 jmp	 $LN181@symtable_v
$LN106@symtable_v:

; 1183 :         VISIT(st, expr, s->v.For.iter);

  00e2c	48 8b 84 24 d8
	05 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00e34	48 8b 50 10	 mov	 rdx, QWORD PTR [rax+16]
  00e38	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  00e40	e8 00 00 00 00	 call	 symtable_visit_expr
  00e45	85 c0		 test	 eax, eax
  00e47	75 1f		 jne	 SHORT $LN105@symtable_v
  00e49	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR st$[rsp]
  00e51	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  00e54	ff c8		 dec	 eax
  00e56	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  00e5e	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  00e61	33 c0		 xor	 eax, eax
  00e63	e9 66 12 00 00	 jmp	 $LN181@symtable_v
$LN105@symtable_v:

; 1184 :         VISIT_SEQ(st, stmt, s->v.For.body);

  00e68	48 8b 84 24 d8
	05 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00e70	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  00e74	48 89 84 24 30
	01 00 00	 mov	 QWORD PTR seq$22514[rsp], rax
  00e7c	c7 84 24 28 01
	00 00 00 00 00
	00		 mov	 DWORD PTR i$22513[rsp], 0
  00e87	eb 10		 jmp	 SHORT $LN104@symtable_v
$LN103@symtable_v:
  00e89	8b 84 24 28 01
	00 00		 mov	 eax, DWORD PTR i$22513[rsp]
  00e90	ff c0		 inc	 eax
  00e92	89 84 24 28 01
	00 00		 mov	 DWORD PTR i$22513[rsp], eax
$LN104@symtable_v:
  00e99	48 83 bc 24 30
	01 00 00 00	 cmp	 QWORD PTR seq$22514[rsp], 0
  00ea2	75 0e		 jne	 SHORT $LN207@symtable_v
  00ea4	48 c7 84 24 38
	05 00 00 00 00
	00 00		 mov	 QWORD PTR tv505[rsp], 0
  00eb0	eb 13		 jmp	 SHORT $LN208@symtable_v
$LN207@symtable_v:
  00eb2	48 8b 84 24 30
	01 00 00	 mov	 rax, QWORD PTR seq$22514[rsp]
  00eba	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00ebd	48 89 84 24 38
	05 00 00	 mov	 QWORD PTR tv505[rsp], rax
$LN208@symtable_v:
  00ec5	48 63 84 24 28
	01 00 00	 movsxd	 rax, DWORD PTR i$22513[rsp]
  00ecd	48 3b 84 24 38
	05 00 00	 cmp	 rax, QWORD PTR tv505[rsp]
  00ed5	7d 5a		 jge	 SHORT $LN102@symtable_v
  00ed7	48 63 84 24 28
	01 00 00	 movsxd	 rax, DWORD PTR i$22513[rsp]
  00edf	48 8b 8c 24 30
	01 00 00	 mov	 rcx, QWORD PTR seq$22514[rsp]
  00ee7	48 8b 44 c1 08	 mov	 rax, QWORD PTR [rcx+rax*8+8]
  00eec	48 89 84 24 38
	01 00 00	 mov	 QWORD PTR elt$22519[rsp], rax
  00ef4	48 8b 94 24 38
	01 00 00	 mov	 rdx, QWORD PTR elt$22519[rsp]
  00efc	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  00f04	e8 00 00 00 00	 call	 symtable_visit_stmt
  00f09	85 c0		 test	 eax, eax
  00f0b	75 1f		 jne	 SHORT $LN101@symtable_v
  00f0d	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR st$[rsp]
  00f15	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  00f18	ff c8		 dec	 eax
  00f1a	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  00f22	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  00f25	33 c0		 xor	 eax, eax
  00f27	e9 a2 11 00 00	 jmp	 $LN181@symtable_v
$LN101@symtable_v:
  00f2c	e9 58 ff ff ff	 jmp	 $LN103@symtable_v
$LN102@symtable_v:

; 1185 :         if (s->v.For.orelse)

  00f31	48 8b 84 24 d8
	05 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00f39	48 83 78 20 00	 cmp	 QWORD PTR [rax+32], 0
  00f3e	0f 84 c9 00 00
	00		 je	 $LN100@symtable_v

; 1186 :             VISIT_SEQ(st, stmt, s->v.For.orelse);

  00f44	48 8b 84 24 d8
	05 00 00	 mov	 rax, QWORD PTR s$[rsp]
  00f4c	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00f50	48 89 84 24 48
	01 00 00	 mov	 QWORD PTR seq$22524[rsp], rax
  00f58	c7 84 24 40 01
	00 00 00 00 00
	00		 mov	 DWORD PTR i$22523[rsp], 0
  00f63	eb 10		 jmp	 SHORT $LN99@symtable_v
$LN98@symtable_v:
  00f65	8b 84 24 40 01
	00 00		 mov	 eax, DWORD PTR i$22523[rsp]
  00f6c	ff c0		 inc	 eax
  00f6e	89 84 24 40 01
	00 00		 mov	 DWORD PTR i$22523[rsp], eax
$LN99@symtable_v:
  00f75	48 83 bc 24 48
	01 00 00 00	 cmp	 QWORD PTR seq$22524[rsp], 0
  00f7e	75 0e		 jne	 SHORT $LN209@symtable_v
  00f80	48 c7 84 24 40
	05 00 00 00 00
	00 00		 mov	 QWORD PTR tv524[rsp], 0
  00f8c	eb 13		 jmp	 SHORT $LN210@symtable_v
$LN209@symtable_v:
  00f8e	48 8b 84 24 48
	01 00 00	 mov	 rax, QWORD PTR seq$22524[rsp]
  00f96	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00f99	48 89 84 24 40
	05 00 00	 mov	 QWORD PTR tv524[rsp], rax
$LN210@symtable_v:
  00fa1	48 63 84 24 40
	01 00 00	 movsxd	 rax, DWORD PTR i$22523[rsp]
  00fa9	48 3b 84 24 40
	05 00 00	 cmp	 rax, QWORD PTR tv524[rsp]
  00fb1	7d 5a		 jge	 SHORT $LN97@symtable_v
  00fb3	48 63 84 24 40
	01 00 00	 movsxd	 rax, DWORD PTR i$22523[rsp]
  00fbb	48 8b 8c 24 48
	01 00 00	 mov	 rcx, QWORD PTR seq$22524[rsp]
  00fc3	48 8b 44 c1 08	 mov	 rax, QWORD PTR [rcx+rax*8+8]
  00fc8	48 89 84 24 50
	01 00 00	 mov	 QWORD PTR elt$22529[rsp], rax
  00fd0	48 8b 94 24 50
	01 00 00	 mov	 rdx, QWORD PTR elt$22529[rsp]
  00fd8	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  00fe0	e8 00 00 00 00	 call	 symtable_visit_stmt
  00fe5	85 c0		 test	 eax, eax
  00fe7	75 1f		 jne	 SHORT $LN96@symtable_v
  00fe9	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR st$[rsp]
  00ff1	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  00ff4	ff c8		 dec	 eax
  00ff6	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  00ffe	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  01001	33 c0		 xor	 eax, eax
  01003	e9 c6 10 00 00	 jmp	 $LN181@symtable_v
$LN96@symtable_v:
  01008	e9 58 ff ff ff	 jmp	 $LN98@symtable_v
$LN97@symtable_v:
$LN100@symtable_v:

; 1187 :         break;

  0100d	e9 9f 10 00 00	 jmp	 $LN178@symtable_v
$LN95@symtable_v:

; 1188 :     case While_kind:
; 1189 :         VISIT(st, expr, s->v.While.test);

  01012	48 8b 84 24 d8
	05 00 00	 mov	 rax, QWORD PTR s$[rsp]
  0101a	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  0101e	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  01026	e8 00 00 00 00	 call	 symtable_visit_expr
  0102b	85 c0		 test	 eax, eax
  0102d	75 1f		 jne	 SHORT $LN94@symtable_v
  0102f	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR st$[rsp]
  01037	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  0103a	ff c8		 dec	 eax
  0103c	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  01044	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  01047	33 c0		 xor	 eax, eax
  01049	e9 80 10 00 00	 jmp	 $LN181@symtable_v
$LN94@symtable_v:

; 1190 :         VISIT_SEQ(st, stmt, s->v.While.body);

  0104e	48 8b 84 24 d8
	05 00 00	 mov	 rax, QWORD PTR s$[rsp]
  01056	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0105a	48 89 84 24 60
	01 00 00	 mov	 QWORD PTR seq$22535[rsp], rax
  01062	c7 84 24 58 01
	00 00 00 00 00
	00		 mov	 DWORD PTR i$22534[rsp], 0
  0106d	eb 10		 jmp	 SHORT $LN93@symtable_v
$LN92@symtable_v:
  0106f	8b 84 24 58 01
	00 00		 mov	 eax, DWORD PTR i$22534[rsp]
  01076	ff c0		 inc	 eax
  01078	89 84 24 58 01
	00 00		 mov	 DWORD PTR i$22534[rsp], eax
$LN93@symtable_v:
  0107f	48 83 bc 24 60
	01 00 00 00	 cmp	 QWORD PTR seq$22535[rsp], 0
  01088	75 0e		 jne	 SHORT $LN211@symtable_v
  0108a	48 c7 84 24 48
	05 00 00 00 00
	00 00		 mov	 QWORD PTR tv549[rsp], 0
  01096	eb 13		 jmp	 SHORT $LN212@symtable_v
$LN211@symtable_v:
  01098	48 8b 84 24 60
	01 00 00	 mov	 rax, QWORD PTR seq$22535[rsp]
  010a0	48 8b 00	 mov	 rax, QWORD PTR [rax]
  010a3	48 89 84 24 48
	05 00 00	 mov	 QWORD PTR tv549[rsp], rax
$LN212@symtable_v:
  010ab	48 63 84 24 58
	01 00 00	 movsxd	 rax, DWORD PTR i$22534[rsp]
  010b3	48 3b 84 24 48
	05 00 00	 cmp	 rax, QWORD PTR tv549[rsp]
  010bb	7d 5a		 jge	 SHORT $LN91@symtable_v
  010bd	48 63 84 24 58
	01 00 00	 movsxd	 rax, DWORD PTR i$22534[rsp]
  010c5	48 8b 8c 24 60
	01 00 00	 mov	 rcx, QWORD PTR seq$22535[rsp]
  010cd	48 8b 44 c1 08	 mov	 rax, QWORD PTR [rcx+rax*8+8]
  010d2	48 89 84 24 68
	01 00 00	 mov	 QWORD PTR elt$22540[rsp], rax
  010da	48 8b 94 24 68
	01 00 00	 mov	 rdx, QWORD PTR elt$22540[rsp]
  010e2	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  010ea	e8 00 00 00 00	 call	 symtable_visit_stmt
  010ef	85 c0		 test	 eax, eax
  010f1	75 1f		 jne	 SHORT $LN90@symtable_v
  010f3	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR st$[rsp]
  010fb	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  010fe	ff c8		 dec	 eax
  01100	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  01108	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  0110b	33 c0		 xor	 eax, eax
  0110d	e9 bc 0f 00 00	 jmp	 $LN181@symtable_v
$LN90@symtable_v:
  01112	e9 58 ff ff ff	 jmp	 $LN92@symtable_v
$LN91@symtable_v:

; 1191 :         if (s->v.While.orelse)

  01117	48 8b 84 24 d8
	05 00 00	 mov	 rax, QWORD PTR s$[rsp]
  0111f	48 83 78 18 00	 cmp	 QWORD PTR [rax+24], 0
  01124	0f 84 c9 00 00
	00		 je	 $LN89@symtable_v

; 1192 :             VISIT_SEQ(st, stmt, s->v.While.orelse);

  0112a	48 8b 84 24 d8
	05 00 00	 mov	 rax, QWORD PTR s$[rsp]
  01132	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  01136	48 89 84 24 78
	01 00 00	 mov	 QWORD PTR seq$22545[rsp], rax
  0113e	c7 84 24 70 01
	00 00 00 00 00
	00		 mov	 DWORD PTR i$22544[rsp], 0
  01149	eb 10		 jmp	 SHORT $LN88@symtable_v
$LN87@symtable_v:
  0114b	8b 84 24 70 01
	00 00		 mov	 eax, DWORD PTR i$22544[rsp]
  01152	ff c0		 inc	 eax
  01154	89 84 24 70 01
	00 00		 mov	 DWORD PTR i$22544[rsp], eax
$LN88@symtable_v:
  0115b	48 83 bc 24 78
	01 00 00 00	 cmp	 QWORD PTR seq$22545[rsp], 0
  01164	75 0e		 jne	 SHORT $LN213@symtable_v
  01166	48 c7 84 24 50
	05 00 00 00 00
	00 00		 mov	 QWORD PTR tv568[rsp], 0
  01172	eb 13		 jmp	 SHORT $LN214@symtable_v
$LN213@symtable_v:
  01174	48 8b 84 24 78
	01 00 00	 mov	 rax, QWORD PTR seq$22545[rsp]
  0117c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0117f	48 89 84 24 50
	05 00 00	 mov	 QWORD PTR tv568[rsp], rax
$LN214@symtable_v:
  01187	48 63 84 24 70
	01 00 00	 movsxd	 rax, DWORD PTR i$22544[rsp]
  0118f	48 3b 84 24 50
	05 00 00	 cmp	 rax, QWORD PTR tv568[rsp]
  01197	7d 5a		 jge	 SHORT $LN86@symtable_v
  01199	48 63 84 24 70
	01 00 00	 movsxd	 rax, DWORD PTR i$22544[rsp]
  011a1	48 8b 8c 24 78
	01 00 00	 mov	 rcx, QWORD PTR seq$22545[rsp]
  011a9	48 8b 44 c1 08	 mov	 rax, QWORD PTR [rcx+rax*8+8]
  011ae	48 89 84 24 80
	01 00 00	 mov	 QWORD PTR elt$22550[rsp], rax
  011b6	48 8b 94 24 80
	01 00 00	 mov	 rdx, QWORD PTR elt$22550[rsp]
  011be	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  011c6	e8 00 00 00 00	 call	 symtable_visit_stmt
  011cb	85 c0		 test	 eax, eax
  011cd	75 1f		 jne	 SHORT $LN85@symtable_v
  011cf	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR st$[rsp]
  011d7	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  011da	ff c8		 dec	 eax
  011dc	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  011e4	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  011e7	33 c0		 xor	 eax, eax
  011e9	e9 e0 0e 00 00	 jmp	 $LN181@symtable_v
$LN85@symtable_v:
  011ee	e9 58 ff ff ff	 jmp	 $LN87@symtable_v
$LN86@symtable_v:
$LN89@symtable_v:

; 1193 :         break;

  011f3	e9 b9 0e 00 00	 jmp	 $LN178@symtable_v
$LN84@symtable_v:

; 1194 :     case If_kind:
; 1195 :         /* XXX if 0: and lookup_yield() hacks */
; 1196 :         VISIT(st, expr, s->v.If.test);

  011f8	48 8b 84 24 d8
	05 00 00	 mov	 rax, QWORD PTR s$[rsp]
  01200	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  01204	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  0120c	e8 00 00 00 00	 call	 symtable_visit_expr
  01211	85 c0		 test	 eax, eax
  01213	75 1f		 jne	 SHORT $LN83@symtable_v
  01215	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR st$[rsp]
  0121d	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  01220	ff c8		 dec	 eax
  01222	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  0122a	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  0122d	33 c0		 xor	 eax, eax
  0122f	e9 9a 0e 00 00	 jmp	 $LN181@symtable_v
$LN83@symtable_v:

; 1197 :         VISIT_SEQ(st, stmt, s->v.If.body);

  01234	48 8b 84 24 d8
	05 00 00	 mov	 rax, QWORD PTR s$[rsp]
  0123c	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  01240	48 89 84 24 90
	01 00 00	 mov	 QWORD PTR seq$22556[rsp], rax
  01248	c7 84 24 88 01
	00 00 00 00 00
	00		 mov	 DWORD PTR i$22555[rsp], 0
  01253	eb 10		 jmp	 SHORT $LN82@symtable_v
$LN81@symtable_v:
  01255	8b 84 24 88 01
	00 00		 mov	 eax, DWORD PTR i$22555[rsp]
  0125c	ff c0		 inc	 eax
  0125e	89 84 24 88 01
	00 00		 mov	 DWORD PTR i$22555[rsp], eax
$LN82@symtable_v:
  01265	48 83 bc 24 90
	01 00 00 00	 cmp	 QWORD PTR seq$22556[rsp], 0
  0126e	75 0e		 jne	 SHORT $LN215@symtable_v
  01270	48 c7 84 24 58
	05 00 00 00 00
	00 00		 mov	 QWORD PTR tv593[rsp], 0
  0127c	eb 13		 jmp	 SHORT $LN216@symtable_v
$LN215@symtable_v:
  0127e	48 8b 84 24 90
	01 00 00	 mov	 rax, QWORD PTR seq$22556[rsp]
  01286	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01289	48 89 84 24 58
	05 00 00	 mov	 QWORD PTR tv593[rsp], rax
$LN216@symtable_v:
  01291	48 63 84 24 88
	01 00 00	 movsxd	 rax, DWORD PTR i$22555[rsp]
  01299	48 3b 84 24 58
	05 00 00	 cmp	 rax, QWORD PTR tv593[rsp]
  012a1	7d 5a		 jge	 SHORT $LN80@symtable_v
  012a3	48 63 84 24 88
	01 00 00	 movsxd	 rax, DWORD PTR i$22555[rsp]
  012ab	48 8b 8c 24 90
	01 00 00	 mov	 rcx, QWORD PTR seq$22556[rsp]
  012b3	48 8b 44 c1 08	 mov	 rax, QWORD PTR [rcx+rax*8+8]
  012b8	48 89 84 24 98
	01 00 00	 mov	 QWORD PTR elt$22561[rsp], rax
  012c0	48 8b 94 24 98
	01 00 00	 mov	 rdx, QWORD PTR elt$22561[rsp]
  012c8	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  012d0	e8 00 00 00 00	 call	 symtable_visit_stmt
  012d5	85 c0		 test	 eax, eax
  012d7	75 1f		 jne	 SHORT $LN79@symtable_v
  012d9	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR st$[rsp]
  012e1	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  012e4	ff c8		 dec	 eax
  012e6	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  012ee	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  012f1	33 c0		 xor	 eax, eax
  012f3	e9 d6 0d 00 00	 jmp	 $LN181@symtable_v
$LN79@symtable_v:
  012f8	e9 58 ff ff ff	 jmp	 $LN81@symtable_v
$LN80@symtable_v:

; 1198 :         if (s->v.If.orelse)

  012fd	48 8b 84 24 d8
	05 00 00	 mov	 rax, QWORD PTR s$[rsp]
  01305	48 83 78 18 00	 cmp	 QWORD PTR [rax+24], 0
  0130a	0f 84 c9 00 00
	00		 je	 $LN78@symtable_v

; 1199 :             VISIT_SEQ(st, stmt, s->v.If.orelse);

  01310	48 8b 84 24 d8
	05 00 00	 mov	 rax, QWORD PTR s$[rsp]
  01318	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  0131c	48 89 84 24 a8
	01 00 00	 mov	 QWORD PTR seq$22566[rsp], rax
  01324	c7 84 24 a0 01
	00 00 00 00 00
	00		 mov	 DWORD PTR i$22565[rsp], 0
  0132f	eb 10		 jmp	 SHORT $LN77@symtable_v
$LN76@symtable_v:
  01331	8b 84 24 a0 01
	00 00		 mov	 eax, DWORD PTR i$22565[rsp]
  01338	ff c0		 inc	 eax
  0133a	89 84 24 a0 01
	00 00		 mov	 DWORD PTR i$22565[rsp], eax
$LN77@symtable_v:
  01341	48 83 bc 24 a8
	01 00 00 00	 cmp	 QWORD PTR seq$22566[rsp], 0
  0134a	75 0e		 jne	 SHORT $LN217@symtable_v
  0134c	48 c7 84 24 60
	05 00 00 00 00
	00 00		 mov	 QWORD PTR tv612[rsp], 0
  01358	eb 13		 jmp	 SHORT $LN218@symtable_v
$LN217@symtable_v:
  0135a	48 8b 84 24 a8
	01 00 00	 mov	 rax, QWORD PTR seq$22566[rsp]
  01362	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01365	48 89 84 24 60
	05 00 00	 mov	 QWORD PTR tv612[rsp], rax
$LN218@symtable_v:
  0136d	48 63 84 24 a0
	01 00 00	 movsxd	 rax, DWORD PTR i$22565[rsp]
  01375	48 3b 84 24 60
	05 00 00	 cmp	 rax, QWORD PTR tv612[rsp]
  0137d	7d 5a		 jge	 SHORT $LN75@symtable_v
  0137f	48 63 84 24 a0
	01 00 00	 movsxd	 rax, DWORD PTR i$22565[rsp]
  01387	48 8b 8c 24 a8
	01 00 00	 mov	 rcx, QWORD PTR seq$22566[rsp]
  0138f	48 8b 44 c1 08	 mov	 rax, QWORD PTR [rcx+rax*8+8]
  01394	48 89 84 24 b0
	01 00 00	 mov	 QWORD PTR elt$22571[rsp], rax
  0139c	48 8b 94 24 b0
	01 00 00	 mov	 rdx, QWORD PTR elt$22571[rsp]
  013a4	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  013ac	e8 00 00 00 00	 call	 symtable_visit_stmt
  013b1	85 c0		 test	 eax, eax
  013b3	75 1f		 jne	 SHORT $LN74@symtable_v
  013b5	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR st$[rsp]
  013bd	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  013c0	ff c8		 dec	 eax
  013c2	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  013ca	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  013cd	33 c0		 xor	 eax, eax
  013cf	e9 fa 0c 00 00	 jmp	 $LN181@symtable_v
$LN74@symtable_v:
  013d4	e9 58 ff ff ff	 jmp	 $LN76@symtable_v
$LN75@symtable_v:
$LN78@symtable_v:

; 1200 :         break;

  013d9	e9 d3 0c 00 00	 jmp	 $LN178@symtable_v
$LN73@symtable_v:

; 1201 :     case Raise_kind:
; 1202 :         if (s->v.Raise.exc) {

  013de	48 8b 84 24 d8
	05 00 00	 mov	 rax, QWORD PTR s$[rsp]
  013e6	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  013eb	0f 84 87 00 00
	00		 je	 $LN72@symtable_v

; 1203 :             VISIT(st, expr, s->v.Raise.exc);

  013f1	48 8b 84 24 d8
	05 00 00	 mov	 rax, QWORD PTR s$[rsp]
  013f9	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  013fd	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  01405	e8 00 00 00 00	 call	 symtable_visit_expr
  0140a	85 c0		 test	 eax, eax
  0140c	75 1f		 jne	 SHORT $LN71@symtable_v
  0140e	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR st$[rsp]
  01416	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  01419	ff c8		 dec	 eax
  0141b	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  01423	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  01426	33 c0		 xor	 eax, eax
  01428	e9 a1 0c 00 00	 jmp	 $LN181@symtable_v
$LN71@symtable_v:

; 1204 :             if (s->v.Raise.cause) {

  0142d	48 8b 84 24 d8
	05 00 00	 mov	 rax, QWORD PTR s$[rsp]
  01435	48 83 78 10 00	 cmp	 QWORD PTR [rax+16], 0
  0143a	74 3c		 je	 SHORT $LN70@symtable_v

; 1205 :                 VISIT(st, expr, s->v.Raise.cause);

  0143c	48 8b 84 24 d8
	05 00 00	 mov	 rax, QWORD PTR s$[rsp]
  01444	48 8b 50 10	 mov	 rdx, QWORD PTR [rax+16]
  01448	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  01450	e8 00 00 00 00	 call	 symtable_visit_expr
  01455	85 c0		 test	 eax, eax
  01457	75 1f		 jne	 SHORT $LN69@symtable_v
  01459	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR st$[rsp]
  01461	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  01464	ff c8		 dec	 eax
  01466	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  0146e	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  01471	33 c0		 xor	 eax, eax
  01473	e9 56 0c 00 00	 jmp	 $LN181@symtable_v
$LN69@symtable_v:
$LN70@symtable_v:
$LN72@symtable_v:

; 1206 :             }
; 1207 :         }
; 1208 :         break;

  01478	e9 34 0c 00 00	 jmp	 $LN178@symtable_v
$LN68@symtable_v:

; 1209 :     case Try_kind:
; 1210 :         VISIT_SEQ(st, stmt, s->v.Try.body);

  0147d	48 8b 84 24 d8
	05 00 00	 mov	 rax, QWORD PTR s$[rsp]
  01485	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  01489	48 89 84 24 c0
	01 00 00	 mov	 QWORD PTR seq$22581[rsp], rax
  01491	c7 84 24 b8 01
	00 00 00 00 00
	00		 mov	 DWORD PTR i$22580[rsp], 0
  0149c	eb 10		 jmp	 SHORT $LN67@symtable_v
$LN66@symtable_v:
  0149e	8b 84 24 b8 01
	00 00		 mov	 eax, DWORD PTR i$22580[rsp]
  014a5	ff c0		 inc	 eax
  014a7	89 84 24 b8 01
	00 00		 mov	 DWORD PTR i$22580[rsp], eax
$LN67@symtable_v:
  014ae	48 83 bc 24 c0
	01 00 00 00	 cmp	 QWORD PTR seq$22581[rsp], 0
  014b7	75 0e		 jne	 SHORT $LN219@symtable_v
  014b9	48 c7 84 24 68
	05 00 00 00 00
	00 00		 mov	 QWORD PTR tv649[rsp], 0
  014c5	eb 13		 jmp	 SHORT $LN220@symtable_v
$LN219@symtable_v:
  014c7	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR seq$22581[rsp]
  014cf	48 8b 00	 mov	 rax, QWORD PTR [rax]
  014d2	48 89 84 24 68
	05 00 00	 mov	 QWORD PTR tv649[rsp], rax
$LN220@symtable_v:
  014da	48 63 84 24 b8
	01 00 00	 movsxd	 rax, DWORD PTR i$22580[rsp]
  014e2	48 3b 84 24 68
	05 00 00	 cmp	 rax, QWORD PTR tv649[rsp]
  014ea	7d 5a		 jge	 SHORT $LN65@symtable_v
  014ec	48 63 84 24 b8
	01 00 00	 movsxd	 rax, DWORD PTR i$22580[rsp]
  014f4	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR seq$22581[rsp]
  014fc	48 8b 44 c1 08	 mov	 rax, QWORD PTR [rcx+rax*8+8]
  01501	48 89 84 24 c8
	01 00 00	 mov	 QWORD PTR elt$22586[rsp], rax
  01509	48 8b 94 24 c8
	01 00 00	 mov	 rdx, QWORD PTR elt$22586[rsp]
  01511	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  01519	e8 00 00 00 00	 call	 symtable_visit_stmt
  0151e	85 c0		 test	 eax, eax
  01520	75 1f		 jne	 SHORT $LN64@symtable_v
  01522	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR st$[rsp]
  0152a	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  0152d	ff c8		 dec	 eax
  0152f	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  01537	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  0153a	33 c0		 xor	 eax, eax
  0153c	e9 8d 0b 00 00	 jmp	 $LN181@symtable_v
$LN64@symtable_v:
  01541	e9 58 ff ff ff	 jmp	 $LN66@symtable_v
$LN65@symtable_v:

; 1211 :         VISIT_SEQ(st, stmt, s->v.Try.orelse);

  01546	48 8b 84 24 d8
	05 00 00	 mov	 rax, QWORD PTR s$[rsp]
  0154e	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  01552	48 89 84 24 d8
	01 00 00	 mov	 QWORD PTR seq$22590[rsp], rax
  0155a	c7 84 24 d0 01
	00 00 00 00 00
	00		 mov	 DWORD PTR i$22589[rsp], 0
  01565	eb 10		 jmp	 SHORT $LN63@symtable_v
$LN62@symtable_v:
  01567	8b 84 24 d0 01
	00 00		 mov	 eax, DWORD PTR i$22589[rsp]
  0156e	ff c0		 inc	 eax
  01570	89 84 24 d0 01
	00 00		 mov	 DWORD PTR i$22589[rsp], eax
$LN63@symtable_v:
  01577	48 83 bc 24 d8
	01 00 00 00	 cmp	 QWORD PTR seq$22590[rsp], 0
  01580	75 0e		 jne	 SHORT $LN221@symtable_v
  01582	48 c7 84 24 70
	05 00 00 00 00
	00 00		 mov	 QWORD PTR tv666[rsp], 0
  0158e	eb 13		 jmp	 SHORT $LN222@symtable_v
$LN221@symtable_v:
  01590	48 8b 84 24 d8
	01 00 00	 mov	 rax, QWORD PTR seq$22590[rsp]
  01598	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0159b	48 89 84 24 70
	05 00 00	 mov	 QWORD PTR tv666[rsp], rax
$LN222@symtable_v:
  015a3	48 63 84 24 d0
	01 00 00	 movsxd	 rax, DWORD PTR i$22589[rsp]
  015ab	48 3b 84 24 70
	05 00 00	 cmp	 rax, QWORD PTR tv666[rsp]
  015b3	7d 5a		 jge	 SHORT $LN61@symtable_v
  015b5	48 63 84 24 d0
	01 00 00	 movsxd	 rax, DWORD PTR i$22589[rsp]
  015bd	48 8b 8c 24 d8
	01 00 00	 mov	 rcx, QWORD PTR seq$22590[rsp]
  015c5	48 8b 44 c1 08	 mov	 rax, QWORD PTR [rcx+rax*8+8]
  015ca	48 89 84 24 e0
	01 00 00	 mov	 QWORD PTR elt$22595[rsp], rax
  015d2	48 8b 94 24 e0
	01 00 00	 mov	 rdx, QWORD PTR elt$22595[rsp]
  015da	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  015e2	e8 00 00 00 00	 call	 symtable_visit_stmt
  015e7	85 c0		 test	 eax, eax
  015e9	75 1f		 jne	 SHORT $LN60@symtable_v
  015eb	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR st$[rsp]
  015f3	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  015f6	ff c8		 dec	 eax
  015f8	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  01600	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  01603	33 c0		 xor	 eax, eax
  01605	e9 c4 0a 00 00	 jmp	 $LN181@symtable_v
$LN60@symtable_v:
  0160a	e9 58 ff ff ff	 jmp	 $LN62@symtable_v
$LN61@symtable_v:

; 1212 :         VISIT_SEQ(st, excepthandler, s->v.Try.handlers);

  0160f	48 8b 84 24 d8
	05 00 00	 mov	 rax, QWORD PTR s$[rsp]
  01617	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0161b	48 89 84 24 f0
	01 00 00	 mov	 QWORD PTR seq$22599[rsp], rax
  01623	c7 84 24 e8 01
	00 00 00 00 00
	00		 mov	 DWORD PTR i$22598[rsp], 0
  0162e	eb 10		 jmp	 SHORT $LN59@symtable_v
$LN58@symtable_v:
  01630	8b 84 24 e8 01
	00 00		 mov	 eax, DWORD PTR i$22598[rsp]
  01637	ff c0		 inc	 eax
  01639	89 84 24 e8 01
	00 00		 mov	 DWORD PTR i$22598[rsp], eax
$LN59@symtable_v:
  01640	48 83 bc 24 f0
	01 00 00 00	 cmp	 QWORD PTR seq$22599[rsp], 0
  01649	75 0e		 jne	 SHORT $LN223@symtable_v
  0164b	48 c7 84 24 78
	05 00 00 00 00
	00 00		 mov	 QWORD PTR tv683[rsp], 0
  01657	eb 13		 jmp	 SHORT $LN224@symtable_v
$LN223@symtable_v:
  01659	48 8b 84 24 f0
	01 00 00	 mov	 rax, QWORD PTR seq$22599[rsp]
  01661	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01664	48 89 84 24 78
	05 00 00	 mov	 QWORD PTR tv683[rsp], rax
$LN224@symtable_v:
  0166c	48 63 84 24 e8
	01 00 00	 movsxd	 rax, DWORD PTR i$22598[rsp]
  01674	48 3b 84 24 78
	05 00 00	 cmp	 rax, QWORD PTR tv683[rsp]
  0167c	7d 5a		 jge	 SHORT $LN57@symtable_v
  0167e	48 63 84 24 e8
	01 00 00	 movsxd	 rax, DWORD PTR i$22598[rsp]
  01686	48 8b 8c 24 f0
	01 00 00	 mov	 rcx, QWORD PTR seq$22599[rsp]
  0168e	48 8b 44 c1 08	 mov	 rax, QWORD PTR [rcx+rax*8+8]
  01693	48 89 84 24 f8
	01 00 00	 mov	 QWORD PTR elt$22604[rsp], rax
  0169b	48 8b 94 24 f8
	01 00 00	 mov	 rdx, QWORD PTR elt$22604[rsp]
  016a3	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  016ab	e8 00 00 00 00	 call	 symtable_visit_excepthandler
  016b0	85 c0		 test	 eax, eax
  016b2	75 1f		 jne	 SHORT $LN56@symtable_v
  016b4	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR st$[rsp]
  016bc	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  016bf	ff c8		 dec	 eax
  016c1	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  016c9	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  016cc	33 c0		 xor	 eax, eax
  016ce	e9 fb 09 00 00	 jmp	 $LN181@symtable_v
$LN56@symtable_v:
  016d3	e9 58 ff ff ff	 jmp	 $LN58@symtable_v
$LN57@symtable_v:

; 1213 :         VISIT_SEQ(st, stmt, s->v.Try.finalbody);

  016d8	48 8b 84 24 d8
	05 00 00	 mov	 rax, QWORD PTR s$[rsp]
  016e0	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  016e4	48 89 84 24 08
	02 00 00	 mov	 QWORD PTR seq$22608[rsp], rax
  016ec	c7 84 24 00 02
	00 00 00 00 00
	00		 mov	 DWORD PTR i$22607[rsp], 0
  016f7	eb 10		 jmp	 SHORT $LN55@symtable_v
$LN54@symtable_v:
  016f9	8b 84 24 00 02
	00 00		 mov	 eax, DWORD PTR i$22607[rsp]
  01700	ff c0		 inc	 eax
  01702	89 84 24 00 02
	00 00		 mov	 DWORD PTR i$22607[rsp], eax
$LN55@symtable_v:
  01709	48 83 bc 24 08
	02 00 00 00	 cmp	 QWORD PTR seq$22608[rsp], 0
  01712	75 0e		 jne	 SHORT $LN225@symtable_v
  01714	48 c7 84 24 80
	05 00 00 00 00
	00 00		 mov	 QWORD PTR tv700[rsp], 0
  01720	eb 13		 jmp	 SHORT $LN226@symtable_v
$LN225@symtable_v:
  01722	48 8b 84 24 08
	02 00 00	 mov	 rax, QWORD PTR seq$22608[rsp]
  0172a	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0172d	48 89 84 24 80
	05 00 00	 mov	 QWORD PTR tv700[rsp], rax
$LN226@symtable_v:
  01735	48 63 84 24 00
	02 00 00	 movsxd	 rax, DWORD PTR i$22607[rsp]
  0173d	48 3b 84 24 80
	05 00 00	 cmp	 rax, QWORD PTR tv700[rsp]
  01745	7d 5a		 jge	 SHORT $LN53@symtable_v
  01747	48 63 84 24 00
	02 00 00	 movsxd	 rax, DWORD PTR i$22607[rsp]
  0174f	48 8b 8c 24 08
	02 00 00	 mov	 rcx, QWORD PTR seq$22608[rsp]
  01757	48 8b 44 c1 08	 mov	 rax, QWORD PTR [rcx+rax*8+8]
  0175c	48 89 84 24 10
	02 00 00	 mov	 QWORD PTR elt$22613[rsp], rax
  01764	48 8b 94 24 10
	02 00 00	 mov	 rdx, QWORD PTR elt$22613[rsp]
  0176c	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  01774	e8 00 00 00 00	 call	 symtable_visit_stmt
  01779	85 c0		 test	 eax, eax
  0177b	75 1f		 jne	 SHORT $LN52@symtable_v
  0177d	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR st$[rsp]
  01785	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  01788	ff c8		 dec	 eax
  0178a	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  01792	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  01795	33 c0		 xor	 eax, eax
  01797	e9 32 09 00 00	 jmp	 $LN181@symtable_v
$LN52@symtable_v:
  0179c	e9 58 ff ff ff	 jmp	 $LN54@symtable_v
$LN53@symtable_v:

; 1214 :         break;

  017a1	e9 0b 09 00 00	 jmp	 $LN178@symtable_v
$LN51@symtable_v:

; 1215 :     case Assert_kind:
; 1216 :         VISIT(st, expr, s->v.Assert.test);

  017a6	48 8b 84 24 d8
	05 00 00	 mov	 rax, QWORD PTR s$[rsp]
  017ae	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  017b2	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  017ba	e8 00 00 00 00	 call	 symtable_visit_expr
  017bf	85 c0		 test	 eax, eax
  017c1	75 1f		 jne	 SHORT $LN50@symtable_v
  017c3	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR st$[rsp]
  017cb	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  017ce	ff c8		 dec	 eax
  017d0	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  017d8	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  017db	33 c0		 xor	 eax, eax
  017dd	e9 ec 08 00 00	 jmp	 $LN181@symtable_v
$LN50@symtable_v:

; 1217 :         if (s->v.Assert.msg)

  017e2	48 8b 84 24 d8
	05 00 00	 mov	 rax, QWORD PTR s$[rsp]
  017ea	48 83 78 10 00	 cmp	 QWORD PTR [rax+16], 0
  017ef	74 3c		 je	 SHORT $LN49@symtable_v

; 1218 :             VISIT(st, expr, s->v.Assert.msg);

  017f1	48 8b 84 24 d8
	05 00 00	 mov	 rax, QWORD PTR s$[rsp]
  017f9	48 8b 50 10	 mov	 rdx, QWORD PTR [rax+16]
  017fd	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  01805	e8 00 00 00 00	 call	 symtable_visit_expr
  0180a	85 c0		 test	 eax, eax
  0180c	75 1f		 jne	 SHORT $LN48@symtable_v
  0180e	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR st$[rsp]
  01816	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  01819	ff c8		 dec	 eax
  0181b	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  01823	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  01826	33 c0		 xor	 eax, eax
  01828	e9 a1 08 00 00	 jmp	 $LN181@symtable_v
$LN48@symtable_v:
$LN49@symtable_v:

; 1219 :         break;

  0182d	e9 7f 08 00 00	 jmp	 $LN178@symtable_v
$LN47@symtable_v:

; 1220 :     case Import_kind:
; 1221 :         VISIT_SEQ(st, alias, s->v.Import.names);

  01832	48 8b 84 24 d8
	05 00 00	 mov	 rax, QWORD PTR s$[rsp]
  0183a	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0183e	48 89 84 24 20
	02 00 00	 mov	 QWORD PTR seq$22622[rsp], rax
  01846	c7 84 24 18 02
	00 00 00 00 00
	00		 mov	 DWORD PTR i$22621[rsp], 0
  01851	eb 10		 jmp	 SHORT $LN46@symtable_v
$LN45@symtable_v:
  01853	8b 84 24 18 02
	00 00		 mov	 eax, DWORD PTR i$22621[rsp]
  0185a	ff c0		 inc	 eax
  0185c	89 84 24 18 02
	00 00		 mov	 DWORD PTR i$22621[rsp], eax
$LN46@symtable_v:
  01863	48 83 bc 24 20
	02 00 00 00	 cmp	 QWORD PTR seq$22622[rsp], 0
  0186c	75 0e		 jne	 SHORT $LN227@symtable_v
  0186e	48 c7 84 24 88
	05 00 00 00 00
	00 00		 mov	 QWORD PTR tv735[rsp], 0
  0187a	eb 13		 jmp	 SHORT $LN228@symtable_v
$LN227@symtable_v:
  0187c	48 8b 84 24 20
	02 00 00	 mov	 rax, QWORD PTR seq$22622[rsp]
  01884	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01887	48 89 84 24 88
	05 00 00	 mov	 QWORD PTR tv735[rsp], rax
$LN228@symtable_v:
  0188f	48 63 84 24 18
	02 00 00	 movsxd	 rax, DWORD PTR i$22621[rsp]
  01897	48 3b 84 24 88
	05 00 00	 cmp	 rax, QWORD PTR tv735[rsp]
  0189f	7d 5a		 jge	 SHORT $LN44@symtable_v
  018a1	48 63 84 24 18
	02 00 00	 movsxd	 rax, DWORD PTR i$22621[rsp]
  018a9	48 8b 8c 24 20
	02 00 00	 mov	 rcx, QWORD PTR seq$22622[rsp]
  018b1	48 8b 44 c1 08	 mov	 rax, QWORD PTR [rcx+rax*8+8]
  018b6	48 89 84 24 28
	02 00 00	 mov	 QWORD PTR elt$22627[rsp], rax
  018be	48 8b 94 24 28
	02 00 00	 mov	 rdx, QWORD PTR elt$22627[rsp]
  018c6	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  018ce	e8 00 00 00 00	 call	 symtable_visit_alias
  018d3	85 c0		 test	 eax, eax
  018d5	75 1f		 jne	 SHORT $LN43@symtable_v
  018d7	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR st$[rsp]
  018df	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  018e2	ff c8		 dec	 eax
  018e4	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  018ec	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  018ef	33 c0		 xor	 eax, eax
  018f1	e9 d8 07 00 00	 jmp	 $LN181@symtable_v
$LN43@symtable_v:
  018f6	e9 58 ff ff ff	 jmp	 $LN45@symtable_v
$LN44@symtable_v:

; 1222 :         /* XXX Don't have the lineno available inside
; 1223 :            visit_alias */
; 1224 :         if (st->st_cur->ste_unoptimized && !st->st_cur->ste_opt_lineno) {

  018fb	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR st$[rsp]
  01903	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  01907	83 b8 8c 00 00
	00 00		 cmp	 DWORD PTR [rax+140], 0
  0190e	74 4f		 je	 SHORT $LN42@symtable_v
  01910	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR st$[rsp]
  01918	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0191c	83 b8 a0 00 00
	00 00		 cmp	 DWORD PTR [rax+160], 0
  01923	75 3a		 jne	 SHORT $LN42@symtable_v

; 1225 :             st->st_cur->ste_opt_lineno = s->lineno;

  01925	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR st$[rsp]
  0192d	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  01931	48 8b 8c 24 d8
	05 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  01939	8b 49 40	 mov	 ecx, DWORD PTR [rcx+64]
  0193c	89 88 a0 00 00
	00		 mov	 DWORD PTR [rax+160], ecx

; 1226 :             st->st_cur->ste_opt_col_offset = s->col_offset;

  01942	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR st$[rsp]
  0194a	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0194e	48 8b 8c 24 d8
	05 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  01956	8b 49 44	 mov	 ecx, DWORD PTR [rcx+68]
  01959	89 88 a4 00 00
	00		 mov	 DWORD PTR [rax+164], ecx
$LN42@symtable_v:

; 1227 :         }
; 1228 :         break;

  0195f	e9 4d 07 00 00	 jmp	 $LN178@symtable_v
$LN41@symtable_v:

; 1229 :     case ImportFrom_kind:
; 1230 :         VISIT_SEQ(st, alias, s->v.ImportFrom.names);

  01964	48 8b 84 24 d8
	05 00 00	 mov	 rax, QWORD PTR s$[rsp]
  0196c	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  01970	48 89 84 24 38
	02 00 00	 mov	 QWORD PTR seq$22633[rsp], rax
  01978	c7 84 24 30 02
	00 00 00 00 00
	00		 mov	 DWORD PTR i$22632[rsp], 0
  01983	eb 10		 jmp	 SHORT $LN40@symtable_v
$LN39@symtable_v:
  01985	8b 84 24 30 02
	00 00		 mov	 eax, DWORD PTR i$22632[rsp]
  0198c	ff c0		 inc	 eax
  0198e	89 84 24 30 02
	00 00		 mov	 DWORD PTR i$22632[rsp], eax
$LN40@symtable_v:
  01995	48 83 bc 24 38
	02 00 00 00	 cmp	 QWORD PTR seq$22633[rsp], 0
  0199e	75 0e		 jne	 SHORT $LN229@symtable_v
  019a0	48 c7 84 24 90
	05 00 00 00 00
	00 00		 mov	 QWORD PTR tv796[rsp], 0
  019ac	eb 13		 jmp	 SHORT $LN230@symtable_v
$LN229@symtable_v:
  019ae	48 8b 84 24 38
	02 00 00	 mov	 rax, QWORD PTR seq$22633[rsp]
  019b6	48 8b 00	 mov	 rax, QWORD PTR [rax]
  019b9	48 89 84 24 90
	05 00 00	 mov	 QWORD PTR tv796[rsp], rax
$LN230@symtable_v:
  019c1	48 63 84 24 30
	02 00 00	 movsxd	 rax, DWORD PTR i$22632[rsp]
  019c9	48 3b 84 24 90
	05 00 00	 cmp	 rax, QWORD PTR tv796[rsp]
  019d1	7d 5a		 jge	 SHORT $LN38@symtable_v
  019d3	48 63 84 24 30
	02 00 00	 movsxd	 rax, DWORD PTR i$22632[rsp]
  019db	48 8b 8c 24 38
	02 00 00	 mov	 rcx, QWORD PTR seq$22633[rsp]
  019e3	48 8b 44 c1 08	 mov	 rax, QWORD PTR [rcx+rax*8+8]
  019e8	48 89 84 24 40
	02 00 00	 mov	 QWORD PTR elt$22638[rsp], rax
  019f0	48 8b 94 24 40
	02 00 00	 mov	 rdx, QWORD PTR elt$22638[rsp]
  019f8	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  01a00	e8 00 00 00 00	 call	 symtable_visit_alias
  01a05	85 c0		 test	 eax, eax
  01a07	75 1f		 jne	 SHORT $LN37@symtable_v
  01a09	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR st$[rsp]
  01a11	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  01a14	ff c8		 dec	 eax
  01a16	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  01a1e	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  01a21	33 c0		 xor	 eax, eax
  01a23	e9 a6 06 00 00	 jmp	 $LN181@symtable_v
$LN37@symtable_v:
  01a28	e9 58 ff ff ff	 jmp	 $LN39@symtable_v
$LN38@symtable_v:

; 1231 :         /* XXX Don't have the lineno available inside
; 1232 :            visit_alias */
; 1233 :         if (st->st_cur->ste_unoptimized && !st->st_cur->ste_opt_lineno) {

  01a2d	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR st$[rsp]
  01a35	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  01a39	83 b8 8c 00 00
	00 00		 cmp	 DWORD PTR [rax+140], 0
  01a40	74 4f		 je	 SHORT $LN36@symtable_v
  01a42	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR st$[rsp]
  01a4a	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  01a4e	83 b8 a0 00 00
	00 00		 cmp	 DWORD PTR [rax+160], 0
  01a55	75 3a		 jne	 SHORT $LN36@symtable_v

; 1234 :             st->st_cur->ste_opt_lineno = s->lineno;

  01a57	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR st$[rsp]
  01a5f	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  01a63	48 8b 8c 24 d8
	05 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  01a6b	8b 49 40	 mov	 ecx, DWORD PTR [rcx+64]
  01a6e	89 88 a0 00 00
	00		 mov	 DWORD PTR [rax+160], ecx

; 1235 :             st->st_cur->ste_opt_col_offset = s->col_offset;

  01a74	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR st$[rsp]
  01a7c	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  01a80	48 8b 8c 24 d8
	05 00 00	 mov	 rcx, QWORD PTR s$[rsp]
  01a88	8b 49 44	 mov	 ecx, DWORD PTR [rcx+68]
  01a8b	89 88 a4 00 00
	00		 mov	 DWORD PTR [rax+164], ecx
$LN36@symtable_v:

; 1236 :         }
; 1237 :         break;

  01a91	e9 1b 06 00 00	 jmp	 $LN178@symtable_v
$LN35@symtable_v:

; 1238 :     case Global_kind: {
; 1239 :         int i;
; 1240 :         asdl_seq *seq = s->v.Global.names;

  01a96	48 8b 84 24 d8
	05 00 00	 mov	 rax, QWORD PTR s$[rsp]
  01a9e	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  01aa2	48 89 84 24 50
	02 00 00	 mov	 QWORD PTR seq$22644[rsp], rax

; 1241 :         for (i = 0; i < asdl_seq_LEN(seq); i++) {

  01aaa	c7 84 24 48 02
	00 00 00 00 00
	00		 mov	 DWORD PTR i$22643[rsp], 0
  01ab5	eb 10		 jmp	 SHORT $LN34@symtable_v
$LN33@symtable_v:
  01ab7	8b 84 24 48 02
	00 00		 mov	 eax, DWORD PTR i$22643[rsp]
  01abe	ff c0		 inc	 eax
  01ac0	89 84 24 48 02
	00 00		 mov	 DWORD PTR i$22643[rsp], eax
$LN34@symtable_v:
  01ac7	48 83 bc 24 50
	02 00 00 00	 cmp	 QWORD PTR seq$22644[rsp], 0
  01ad0	75 0e		 jne	 SHORT $LN231@symtable_v
  01ad2	48 c7 84 24 98
	05 00 00 00 00
	00 00		 mov	 QWORD PTR tv825[rsp], 0
  01ade	eb 13		 jmp	 SHORT $LN232@symtable_v
$LN231@symtable_v:
  01ae0	48 8b 84 24 50
	02 00 00	 mov	 rax, QWORD PTR seq$22644[rsp]
  01ae8	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01aeb	48 89 84 24 98
	05 00 00	 mov	 QWORD PTR tv825[rsp], rax
$LN232@symtable_v:
  01af3	48 63 84 24 48
	02 00 00	 movsxd	 rax, DWORD PTR i$22643[rsp]
  01afb	48 3b 84 24 98
	05 00 00	 cmp	 rax, QWORD PTR tv825[rsp]
  01b03	0f 8d e2 01 00
	00		 jge	 $LN32@symtable_v

; 1242 :             identifier name = (identifier)asdl_seq_GET(seq, i);

  01b09	48 63 84 24 48
	02 00 00	 movsxd	 rax, DWORD PTR i$22643[rsp]
  01b11	48 8b 8c 24 50
	02 00 00	 mov	 rcx, QWORD PTR seq$22644[rsp]
  01b19	48 8b 44 c1 08	 mov	 rax, QWORD PTR [rcx+rax*8+8]
  01b1e	48 89 84 24 60
	02 00 00	 mov	 QWORD PTR name$22649[rsp], rax

; 1243 :             long cur;
; 1244 :             if (st->st_cur->ste_type == ClassBlock &&
; 1245 :                 !PyUnicode_CompareWithASCIIString(name, "__class__")) {

  01b26	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR st$[rsp]
  01b2e	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  01b32	83 b8 88 00 00
	00 01		 cmp	 DWORD PTR [rax+136], 1
  01b39	75 59		 jne	 SHORT $LN31@symtable_v
  01b3b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09LFGACEKG@__class__?$AA@
  01b42	48 8b 8c 24 60
	02 00 00	 mov	 rcx, QWORD PTR name$22649[rsp]
  01b4a	e8 00 00 00 00	 call	 PyUnicode_CompareWithASCIIString
  01b4f	85 c0		 test	 eax, eax
  01b51	75 41		 jne	 SHORT $LN31@symtable_v

; 1246 :                 PyErr_SetString(PyExc_SyntaxError, "cannot make __class__ global");

  01b53	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0BN@GJGDMEHB@cannot?5make?5__class__?5global?$AA@
  01b5a	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SyntaxError
  01b61	e8 00 00 00 00	 call	 PyErr_SetString

; 1247 :                 PyErr_SyntaxLocationEx(st->st_filename, s->lineno, s->col_offset);

  01b66	48 8b 84 24 d8
	05 00 00	 mov	 rax, QWORD PTR s$[rsp]
  01b6e	44 8b 40 44	 mov	 r8d, DWORD PTR [rax+68]
  01b72	48 8b 84 24 d8
	05 00 00	 mov	 rax, QWORD PTR s$[rsp]
  01b7a	8b 50 40	 mov	 edx, DWORD PTR [rax+64]
  01b7d	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR st$[rsp]
  01b85	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  01b88	e8 00 00 00 00	 call	 PyErr_SyntaxLocationEx

; 1248 :                 return 0;

  01b8d	33 c0		 xor	 eax, eax
  01b8f	e9 3a 05 00 00	 jmp	 $LN181@symtable_v
$LN31@symtable_v:

; 1249 :             }
; 1250 :             cur = symtable_lookup(st, name);

  01b94	48 8b 94 24 60
	02 00 00	 mov	 rdx, QWORD PTR name$22649[rsp]
  01b9c	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  01ba4	e8 00 00 00 00	 call	 symtable_lookup
  01ba9	89 84 24 58 02
	00 00		 mov	 DWORD PTR cur$22651[rsp], eax

; 1251 :             if (cur < 0)

  01bb0	83 bc 24 58 02
	00 00 00	 cmp	 DWORD PTR cur$22651[rsp], 0
  01bb8	7d 1f		 jge	 SHORT $LN30@symtable_v

; 1252 :                 VISIT_QUIT(st, 0);

  01bba	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR st$[rsp]
  01bc2	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  01bc5	ff c8		 dec	 eax
  01bc7	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  01bcf	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  01bd2	33 c0		 xor	 eax, eax
  01bd4	e9 f5 04 00 00	 jmp	 $LN181@symtable_v
$LN30@symtable_v:

; 1253 :             if (cur & (DEF_LOCAL | USE)) {

  01bd9	8b 84 24 58 02
	00 00		 mov	 eax, DWORD PTR cur$22651[rsp]
  01be0	83 e0 12	 and	 eax, 18
  01be3	85 c0		 test	 eax, eax
  01be5	0f 84 bd 00 00
	00		 je	 $LN29@symtable_v

; 1254 :                 char buf[256];
; 1255 :                 char *c_name = _PyUnicode_AsString(name);

  01beb	48 8b 8c 24 60
	02 00 00	 mov	 rcx, QWORD PTR name$22649[rsp]
  01bf3	e8 00 00 00 00	 call	 PyUnicode_AsUTF8
  01bf8	48 89 84 24 68
	02 00 00	 mov	 QWORD PTR c_name$22657[rsp], rax

; 1256 :                 if (!c_name)

  01c00	48 83 bc 24 68
	02 00 00 00	 cmp	 QWORD PTR c_name$22657[rsp], 0
  01c09	75 07		 jne	 SHORT $LN28@symtable_v

; 1257 :                     return 0;

  01c0b	33 c0		 xor	 eax, eax
  01c0d	e9 bc 04 00 00	 jmp	 $LN181@symtable_v
$LN28@symtable_v:

; 1258 :                 if (cur & DEF_LOCAL)

  01c12	8b 84 24 58 02
	00 00		 mov	 eax, DWORD PTR cur$22651[rsp]
  01c19	83 e0 02	 and	 eax, 2
  01c1c	85 c0		 test	 eax, eax
  01c1e	74 23		 je	 SHORT $LN27@symtable_v

; 1259 :                     PyOS_snprintf(buf, sizeof(buf),
; 1260 :                                   GLOBAL_AFTER_ASSIGN,
; 1261 :                                   c_name);

  01c20	4c 8b 8c 24 68
	02 00 00	 mov	 r9, QWORD PTR c_name$22657[rsp]
  01c28	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0DH@LJMCNDPN@name?5?8?$CF?4400s?8?5is?5assigned?5to?5bef@
  01c2f	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  01c34	48 8d 8c 24 70
	02 00 00	 lea	 rcx, QWORD PTR buf$22656[rsp]
  01c3c	e8 00 00 00 00	 call	 PyOS_snprintf

; 1262 :                 else

  01c41	eb 21		 jmp	 SHORT $LN26@symtable_v
$LN27@symtable_v:

; 1263 :                     PyOS_snprintf(buf, sizeof(buf),
; 1264 :                                   GLOBAL_AFTER_USE,
; 1265 :                                   c_name);

  01c43	4c 8b 8c 24 68
	02 00 00	 mov	 r9, QWORD PTR c_name$22657[rsp]
  01c4b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0DC@GDNGFAAH@name?5?8?$CF?4400s?8?5is?5used?5prior?5to?5g@
  01c52	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  01c57	48 8d 8c 24 70
	02 00 00	 lea	 rcx, QWORD PTR buf$22656[rsp]
  01c5f	e8 00 00 00 00	 call	 PyOS_snprintf
$LN26@symtable_v:

; 1266 :                 if (!symtable_warn(st, buf, s->lineno))

  01c64	48 8b 84 24 d8
	05 00 00	 mov	 rax, QWORD PTR s$[rsp]
  01c6c	44 8b 40 40	 mov	 r8d, DWORD PTR [rax+64]
  01c70	48 8d 94 24 70
	02 00 00	 lea	 rdx, QWORD PTR buf$22656[rsp]
  01c78	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  01c80	e8 00 00 00 00	 call	 symtable_warn
  01c85	85 c0		 test	 eax, eax
  01c87	75 1f		 jne	 SHORT $LN25@symtable_v

; 1267 :                     VISIT_QUIT(st, 0);

  01c89	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR st$[rsp]
  01c91	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  01c94	ff c8		 dec	 eax
  01c96	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  01c9e	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  01ca1	33 c0		 xor	 eax, eax
  01ca3	e9 26 04 00 00	 jmp	 $LN181@symtable_v
$LN25@symtable_v:
$LN29@symtable_v:

; 1268 :             }
; 1269 :             if (!symtable_add_def(st, name, DEF_GLOBAL))

  01ca8	41 b8 01 00 00
	00		 mov	 r8d, 1
  01cae	48 8b 94 24 60
	02 00 00	 mov	 rdx, QWORD PTR name$22649[rsp]
  01cb6	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  01cbe	e8 00 00 00 00	 call	 symtable_add_def
  01cc3	85 c0		 test	 eax, eax
  01cc5	75 1f		 jne	 SHORT $LN24@symtable_v

; 1270 :                 VISIT_QUIT(st, 0);

  01cc7	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR st$[rsp]
  01ccf	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  01cd2	ff c8		 dec	 eax
  01cd4	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  01cdc	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  01cdf	33 c0		 xor	 eax, eax
  01ce1	e9 e8 03 00 00	 jmp	 $LN181@symtable_v
$LN24@symtable_v:

; 1271 :         }

  01ce6	e9 cc fd ff ff	 jmp	 $LN33@symtable_v
$LN32@symtable_v:

; 1272 :         break;

  01ceb	e9 c1 03 00 00	 jmp	 $LN178@symtable_v
$LN23@symtable_v:

; 1273 :     }
; 1274 :     case Nonlocal_kind: {
; 1275 :         int i;
; 1276 :         asdl_seq *seq = s->v.Nonlocal.names;

  01cf0	48 8b 84 24 d8
	05 00 00	 mov	 rax, QWORD PTR s$[rsp]
  01cf8	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  01cfc	48 89 84 24 78
	03 00 00	 mov	 QWORD PTR seq$22667[rsp], rax

; 1277 :         for (i = 0; i < asdl_seq_LEN(seq); i++) {

  01d04	c7 84 24 70 03
	00 00 00 00 00
	00		 mov	 DWORD PTR i$22666[rsp], 0
  01d0f	eb 10		 jmp	 SHORT $LN22@symtable_v
$LN21@symtable_v:
  01d11	8b 84 24 70 03
	00 00		 mov	 eax, DWORD PTR i$22666[rsp]
  01d18	ff c0		 inc	 eax
  01d1a	89 84 24 70 03
	00 00		 mov	 DWORD PTR i$22666[rsp], eax
$LN22@symtable_v:
  01d21	48 83 bc 24 78
	03 00 00 00	 cmp	 QWORD PTR seq$22667[rsp], 0
  01d2a	75 0e		 jne	 SHORT $LN233@symtable_v
  01d2c	48 c7 84 24 a0
	05 00 00 00 00
	00 00		 mov	 QWORD PTR tv888[rsp], 0
  01d38	eb 13		 jmp	 SHORT $LN234@symtable_v
$LN233@symtable_v:
  01d3a	48 8b 84 24 78
	03 00 00	 mov	 rax, QWORD PTR seq$22667[rsp]
  01d42	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01d45	48 89 84 24 a0
	05 00 00	 mov	 QWORD PTR tv888[rsp], rax
$LN234@symtable_v:
  01d4d	48 63 84 24 70
	03 00 00	 movsxd	 rax, DWORD PTR i$22666[rsp]
  01d55	48 3b 84 24 a0
	05 00 00	 cmp	 rax, QWORD PTR tv888[rsp]
  01d5d	0f 8d 74 01 00
	00		 jge	 $LN20@symtable_v

; 1278 :             identifier name = (identifier)asdl_seq_GET(seq, i);

  01d63	48 63 84 24 70
	03 00 00	 movsxd	 rax, DWORD PTR i$22666[rsp]
  01d6b	48 8b 8c 24 78
	03 00 00	 mov	 rcx, QWORD PTR seq$22667[rsp]
  01d73	48 8b 44 c1 08	 mov	 rax, QWORD PTR [rcx+rax*8+8]
  01d78	48 89 84 24 88
	03 00 00	 mov	 QWORD PTR name$22672[rsp], rax

; 1279 :             long cur = symtable_lookup(st, name);

  01d80	48 8b 94 24 88
	03 00 00	 mov	 rdx, QWORD PTR name$22672[rsp]
  01d88	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  01d90	e8 00 00 00 00	 call	 symtable_lookup
  01d95	89 84 24 80 03
	00 00		 mov	 DWORD PTR cur$22674[rsp], eax

; 1280 :             if (cur < 0)

  01d9c	83 bc 24 80 03
	00 00 00	 cmp	 DWORD PTR cur$22674[rsp], 0
  01da4	7d 1f		 jge	 SHORT $LN19@symtable_v

; 1281 :                 VISIT_QUIT(st, 0);

  01da6	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR st$[rsp]
  01dae	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  01db1	ff c8		 dec	 eax
  01db3	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  01dbb	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  01dbe	33 c0		 xor	 eax, eax
  01dc0	e9 09 03 00 00	 jmp	 $LN181@symtable_v
$LN19@symtable_v:

; 1282 :             if (cur & (DEF_LOCAL | USE)) {

  01dc5	8b 84 24 80 03
	00 00		 mov	 eax, DWORD PTR cur$22674[rsp]
  01dcc	83 e0 12	 and	 eax, 18
  01dcf	85 c0		 test	 eax, eax
  01dd1	0f 84 bd 00 00
	00		 je	 $LN18@symtable_v

; 1283 :                 char buf[256];
; 1284 :                 char *c_name = _PyUnicode_AsString(name);

  01dd7	48 8b 8c 24 88
	03 00 00	 mov	 rcx, QWORD PTR name$22672[rsp]
  01ddf	e8 00 00 00 00	 call	 PyUnicode_AsUTF8
  01de4	48 89 84 24 90
	03 00 00	 mov	 QWORD PTR c_name$22678[rsp], rax

; 1285 :                 if (!c_name)

  01dec	48 83 bc 24 90
	03 00 00 00	 cmp	 QWORD PTR c_name$22678[rsp], 0
  01df5	75 07		 jne	 SHORT $LN17@symtable_v

; 1286 :                     return 0;

  01df7	33 c0		 xor	 eax, eax
  01df9	e9 d0 02 00 00	 jmp	 $LN181@symtable_v
$LN17@symtable_v:

; 1287 :                 if (cur & DEF_LOCAL)

  01dfe	8b 84 24 80 03
	00 00		 mov	 eax, DWORD PTR cur$22674[rsp]
  01e05	83 e0 02	 and	 eax, 2
  01e08	85 c0		 test	 eax, eax
  01e0a	74 23		 je	 SHORT $LN16@symtable_v

; 1288 :                     PyOS_snprintf(buf, sizeof(buf),
; 1289 :                                   NONLOCAL_AFTER_ASSIGN,
; 1290 :                                   c_name);

  01e0c	4c 8b 8c 24 90
	03 00 00	 mov	 r9, QWORD PTR c_name$22678[rsp]
  01e14	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0DJ@JIAAIOIF@name?5?8?$CF?4400s?8?5is?5assigned?5to?5bef@
  01e1b	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  01e20	48 8d 8c 24 a0
	03 00 00	 lea	 rcx, QWORD PTR buf$22677[rsp]
  01e28	e8 00 00 00 00	 call	 PyOS_snprintf

; 1291 :                 else

  01e2d	eb 21		 jmp	 SHORT $LN15@symtable_v
$LN16@symtable_v:

; 1292 :                     PyOS_snprintf(buf, sizeof(buf),
; 1293 :                                   NONLOCAL_AFTER_USE,
; 1294 :                                   c_name);

  01e2f	4c 8b 8c 24 90
	03 00 00	 mov	 r9, QWORD PTR c_name$22678[rsp]
  01e37	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0DE@COCIPDM@name?5?8?$CF?4400s?8?5is?5used?5prior?5to?5n@
  01e3e	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  01e43	48 8d 8c 24 a0
	03 00 00	 lea	 rcx, QWORD PTR buf$22677[rsp]
  01e4b	e8 00 00 00 00	 call	 PyOS_snprintf
$LN15@symtable_v:

; 1295 :                 if (!symtable_warn(st, buf, s->lineno))

  01e50	48 8b 84 24 d8
	05 00 00	 mov	 rax, QWORD PTR s$[rsp]
  01e58	44 8b 40 40	 mov	 r8d, DWORD PTR [rax+64]
  01e5c	48 8d 94 24 a0
	03 00 00	 lea	 rdx, QWORD PTR buf$22677[rsp]
  01e64	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  01e6c	e8 00 00 00 00	 call	 symtable_warn
  01e71	85 c0		 test	 eax, eax
  01e73	75 1f		 jne	 SHORT $LN14@symtable_v

; 1296 :                     VISIT_QUIT(st, 0);

  01e75	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR st$[rsp]
  01e7d	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  01e80	ff c8		 dec	 eax
  01e82	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  01e8a	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  01e8d	33 c0		 xor	 eax, eax
  01e8f	e9 3a 02 00 00	 jmp	 $LN181@symtable_v
$LN14@symtable_v:
$LN18@symtable_v:

; 1297 :             }
; 1298 :             if (!symtable_add_def(st, name, DEF_NONLOCAL))

  01e94	41 b8 08 00 00
	00		 mov	 r8d, 8
  01e9a	48 8b 94 24 88
	03 00 00	 mov	 rdx, QWORD PTR name$22672[rsp]
  01ea2	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  01eaa	e8 00 00 00 00	 call	 symtable_add_def
  01eaf	85 c0		 test	 eax, eax
  01eb1	75 1f		 jne	 SHORT $LN13@symtable_v

; 1299 :                 VISIT_QUIT(st, 0);

  01eb3	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR st$[rsp]
  01ebb	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  01ebe	ff c8		 dec	 eax
  01ec0	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  01ec8	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  01ecb	33 c0		 xor	 eax, eax
  01ecd	e9 fc 01 00 00	 jmp	 $LN181@symtable_v
$LN13@symtable_v:

; 1300 :         }

  01ed2	e9 3a fe ff ff	 jmp	 $LN21@symtable_v
$LN20@symtable_v:

; 1301 :         break;

  01ed7	e9 d5 01 00 00	 jmp	 $LN178@symtable_v
$LN12@symtable_v:

; 1302 :     }
; 1303 :     case Expr_kind:
; 1304 :         VISIT(st, expr, s->v.Expr.value);

  01edc	48 8b 84 24 d8
	05 00 00	 mov	 rax, QWORD PTR s$[rsp]
  01ee4	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  01ee8	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  01ef0	e8 00 00 00 00	 call	 symtable_visit_expr
  01ef5	85 c0		 test	 eax, eax
  01ef7	75 1f		 jne	 SHORT $LN11@symtable_v
  01ef9	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR st$[rsp]
  01f01	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  01f04	ff c8		 dec	 eax
  01f06	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  01f0e	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  01f11	33 c0		 xor	 eax, eax
  01f13	e9 b6 01 00 00	 jmp	 $LN181@symtable_v
$LN11@symtable_v:

; 1305 :         break;

  01f18	e9 94 01 00 00	 jmp	 $LN178@symtable_v

; 1306 :     case Pass_kind:
; 1307 :     case Break_kind:
; 1308 :     case Continue_kind:
; 1309 :         /* nothing to do here */
; 1310 :         break;

  01f1d	e9 8f 01 00 00	 jmp	 $LN178@symtable_v
$LN9@symtable_v:

; 1311 :     case With_kind:
; 1312 :         VISIT_SEQ(st, withitem, s->v.With.items);

  01f22	48 8b 84 24 d8
	05 00 00	 mov	 rax, QWORD PTR s$[rsp]
  01f2a	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  01f2e	48 89 84 24 a8
	04 00 00	 mov	 QWORD PTR seq$22691[rsp], rax
  01f36	c7 84 24 a0 04
	00 00 00 00 00
	00		 mov	 DWORD PTR i$22690[rsp], 0
  01f41	eb 10		 jmp	 SHORT $LN8@symtable_v
$LN7@symtable_v:
  01f43	8b 84 24 a0 04
	00 00		 mov	 eax, DWORD PTR i$22690[rsp]
  01f4a	ff c0		 inc	 eax
  01f4c	89 84 24 a0 04
	00 00		 mov	 DWORD PTR i$22690[rsp], eax
$LN8@symtable_v:
  01f53	48 83 bc 24 a8
	04 00 00 00	 cmp	 QWORD PTR seq$22691[rsp], 0
  01f5c	75 0e		 jne	 SHORT $LN235@symtable_v
  01f5e	48 c7 84 24 a8
	05 00 00 00 00
	00 00		 mov	 QWORD PTR tv945[rsp], 0
  01f6a	eb 13		 jmp	 SHORT $LN236@symtable_v
$LN235@symtable_v:
  01f6c	48 8b 84 24 a8
	04 00 00	 mov	 rax, QWORD PTR seq$22691[rsp]
  01f74	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01f77	48 89 84 24 a8
	05 00 00	 mov	 QWORD PTR tv945[rsp], rax
$LN236@symtable_v:
  01f7f	48 63 84 24 a0
	04 00 00	 movsxd	 rax, DWORD PTR i$22690[rsp]
  01f87	48 3b 84 24 a8
	05 00 00	 cmp	 rax, QWORD PTR tv945[rsp]
  01f8f	7d 5a		 jge	 SHORT $LN6@symtable_v
  01f91	48 63 84 24 a0
	04 00 00	 movsxd	 rax, DWORD PTR i$22690[rsp]
  01f99	48 8b 8c 24 a8
	04 00 00	 mov	 rcx, QWORD PTR seq$22691[rsp]
  01fa1	48 8b 44 c1 08	 mov	 rax, QWORD PTR [rcx+rax*8+8]
  01fa6	48 89 84 24 b0
	04 00 00	 mov	 QWORD PTR elt$22696[rsp], rax
  01fae	48 8b 94 24 b0
	04 00 00	 mov	 rdx, QWORD PTR elt$22696[rsp]
  01fb6	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  01fbe	e8 00 00 00 00	 call	 symtable_visit_withitem
  01fc3	85 c0		 test	 eax, eax
  01fc5	75 1f		 jne	 SHORT $LN5@symtable_v
  01fc7	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR st$[rsp]
  01fcf	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  01fd2	ff c8		 dec	 eax
  01fd4	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  01fdc	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  01fdf	33 c0		 xor	 eax, eax
  01fe1	e9 e8 00 00 00	 jmp	 $LN181@symtable_v
$LN5@symtable_v:
  01fe6	e9 58 ff ff ff	 jmp	 $LN7@symtable_v
$LN6@symtable_v:

; 1313 :         VISIT_SEQ(st, stmt, s->v.With.body);

  01feb	48 8b 84 24 d8
	05 00 00	 mov	 rax, QWORD PTR s$[rsp]
  01ff3	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  01ff7	48 89 84 24 c0
	04 00 00	 mov	 QWORD PTR seq$22700[rsp], rax
  01fff	c7 84 24 b8 04
	00 00 00 00 00
	00		 mov	 DWORD PTR i$22699[rsp], 0
  0200a	eb 10		 jmp	 SHORT $LN4@symtable_v
$LN3@symtable_v:
  0200c	8b 84 24 b8 04
	00 00		 mov	 eax, DWORD PTR i$22699[rsp]
  02013	ff c0		 inc	 eax
  02015	89 84 24 b8 04
	00 00		 mov	 DWORD PTR i$22699[rsp], eax
$LN4@symtable_v:
  0201c	48 83 bc 24 c0
	04 00 00 00	 cmp	 QWORD PTR seq$22700[rsp], 0
  02025	75 0e		 jne	 SHORT $LN237@symtable_v
  02027	48 c7 84 24 b0
	05 00 00 00 00
	00 00		 mov	 QWORD PTR tv962[rsp], 0
  02033	eb 13		 jmp	 SHORT $LN238@symtable_v
$LN237@symtable_v:
  02035	48 8b 84 24 c0
	04 00 00	 mov	 rax, QWORD PTR seq$22700[rsp]
  0203d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  02040	48 89 84 24 b0
	05 00 00	 mov	 QWORD PTR tv962[rsp], rax
$LN238@symtable_v:
  02048	48 63 84 24 b8
	04 00 00	 movsxd	 rax, DWORD PTR i$22699[rsp]
  02050	48 3b 84 24 b0
	05 00 00	 cmp	 rax, QWORD PTR tv962[rsp]
  02058	7d 57		 jge	 SHORT $LN2@symtable_v
  0205a	48 63 84 24 b8
	04 00 00	 movsxd	 rax, DWORD PTR i$22699[rsp]
  02062	48 8b 8c 24 c0
	04 00 00	 mov	 rcx, QWORD PTR seq$22700[rsp]
  0206a	48 8b 44 c1 08	 mov	 rax, QWORD PTR [rcx+rax*8+8]
  0206f	48 89 84 24 c8
	04 00 00	 mov	 QWORD PTR elt$22705[rsp], rax
  02077	48 8b 94 24 c8
	04 00 00	 mov	 rdx, QWORD PTR elt$22705[rsp]
  0207f	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  02087	e8 00 00 00 00	 call	 symtable_visit_stmt
  0208c	85 c0		 test	 eax, eax
  0208e	75 1c		 jne	 SHORT $LN1@symtable_v
  02090	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR st$[rsp]
  02098	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  0209b	ff c8		 dec	 eax
  0209d	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  020a5	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  020a8	33 c0		 xor	 eax, eax
  020aa	eb 22		 jmp	 SHORT $LN181@symtable_v
$LN1@symtable_v:
  020ac	e9 5b ff ff ff	 jmp	 $LN3@symtable_v
$LN2@symtable_v:
$LN178@symtable_v:

; 1314 :         break;
; 1315 :     }
; 1316 :     VISIT_QUIT(st, 1);

  020b1	48 8b 84 24 d0
	05 00 00	 mov	 rax, QWORD PTR st$[rsp]
  020b9	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  020bc	ff c8		 dec	 eax
  020be	48 8b 8c 24 d0
	05 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  020c6	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  020c9	b8 01 00 00 00	 mov	 eax, 1
$LN181@symtable_v:

; 1317 : }

  020ce	48 81 c4 c8 05
	00 00		 add	 rsp, 1480		; 000005c8H
  020d5	c3		 ret	 0
  020d6	66 90		 npad	 2
$LN239@symtable_v:
  020d8	00 00 00 00	 DD	 $LN177@symtable_v
  020dc	00 00 00 00	 DD	 $LN151@symtable_v
  020e0	00 00 00 00	 DD	 $LN124@symtable_v
  020e4	00 00 00 00	 DD	 $LN121@symtable_v
  020e8	00 00 00 00	 DD	 $LN116@symtable_v
  020ec	00 00 00 00	 DD	 $LN110@symtable_v
  020f0	00 00 00 00	 DD	 $LN107@symtable_v
  020f4	00 00 00 00	 DD	 $LN95@symtable_v
  020f8	00 00 00 00	 DD	 $LN84@symtable_v
  020fc	00 00 00 00	 DD	 $LN9@symtable_v
  02100	00 00 00 00	 DD	 $LN73@symtable_v
  02104	00 00 00 00	 DD	 $LN68@symtable_v
  02108	00 00 00 00	 DD	 $LN51@symtable_v
  0210c	00 00 00 00	 DD	 $LN47@symtable_v
  02110	00 00 00 00	 DD	 $LN41@symtable_v
  02114	00 00 00 00	 DD	 $LN35@symtable_v
  02118	00 00 00 00	 DD	 $LN23@symtable_v
  0211c	00 00 00 00	 DD	 $LN12@symtable_v
symtable_visit_stmt ENDP
_TEXT	ENDS
EXTRN	PyErr_ExceptionMatches:PROC
EXTRN	PyErr_WarnExplicit:PROC
EXTRN	PyExc_SyntaxWarning:QWORD
;	COMDAT pdata
pdata	SEGMENT
$pdata$symtable_warn DD imagerel symtable_warn
	DD	imagerel symtable_warn+162
	DD	imagerel $unwind$symtable_warn
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$symtable_warn DD 011301H
	DD	06213H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT symtable_warn
_TEXT	SEGMENT
st$ = 64
msg$ = 72
lineno$ = 80
symtable_warn PROC					; COMDAT

; 901  : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 902  :     if (PyErr_WarnExplicit(PyExc_SyntaxWarning, msg, st->st_filename,
; 903  :                            lineno, NULL, NULL) < 0)     {

  00013	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR [rsp+40], 0
  0001c	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR [rsp+32], 0
  00025	44 8b 4c 24 50	 mov	 r9d, DWORD PTR lineno$[rsp]
  0002a	48 8b 44 24 40	 mov	 rax, QWORD PTR st$[rsp]
  0002f	4c 8b 00	 mov	 r8, QWORD PTR [rax]
  00032	48 8b 54 24 48	 mov	 rdx, QWORD PTR msg$[rsp]
  00037	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SyntaxWarning
  0003e	e8 00 00 00 00	 call	 PyErr_WarnExplicit
  00043	85 c0		 test	 eax, eax
  00045	7d 51		 jge	 SHORT $LN2@symtable_w

; 904  :         if (PyErr_ExceptionMatches(PyExc_SyntaxWarning)) {

  00047	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SyntaxWarning
  0004e	e8 00 00 00 00	 call	 PyErr_ExceptionMatches
  00053	85 c0		 test	 eax, eax
  00055	74 3d		 je	 SHORT $LN1@symtable_w

; 905  :             PyErr_SetString(PyExc_SyntaxError, msg);

  00057	48 8b 54 24 48	 mov	 rdx, QWORD PTR msg$[rsp]
  0005c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SyntaxError
  00063	e8 00 00 00 00	 call	 PyErr_SetString

; 906  :             PyErr_SyntaxLocationEx(st->st_filename, st->st_cur->ste_lineno,
; 907  :                                    st->st_cur->ste_col_offset);

  00068	48 8b 44 24 40	 mov	 rax, QWORD PTR st$[rsp]
  0006d	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00071	48 8b 4c 24 40	 mov	 rcx, QWORD PTR st$[rsp]
  00076	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  0007a	44 8b 80 9c 00
	00 00		 mov	 r8d, DWORD PTR [rax+156]
  00081	8b 91 98 00 00
	00		 mov	 edx, DWORD PTR [rcx+152]
  00087	48 8b 44 24 40	 mov	 rax, QWORD PTR st$[rsp]
  0008c	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0008f	e8 00 00 00 00	 call	 PyErr_SyntaxLocationEx
$LN1@symtable_w:

; 908  :         }
; 909  :         return 0;

  00094	33 c0		 xor	 eax, eax
  00096	eb 05		 jmp	 SHORT $LN3@symtable_w
$LN2@symtable_w:

; 910  :     }
; 911  :     return 1;

  00098	b8 01 00 00 00	 mov	 eax, 1
$LN3@symtable_w:

; 912  : }

  0009d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a1	c3		 ret	 0
symtable_warn ENDP
_TEXT	ENDS
EXTRN	_Py_Mangle:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$symtable_lookup DD imagerel symtable_lookup
	DD	imagerel symtable_lookup+115
	DD	imagerel $unwind$symtable_lookup
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$symtable_lookup DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT symtable_lookup
_TEXT	SEGMENT
mangled$ = 32
o$ = 40
st$ = 64
name$ = 72
symtable_lookup PROC					; COMDAT

; 964  : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 965  :     PyObject *o;
; 966  :     PyObject *mangled = _Py_Mangle(st->st_private, name);

  0000e	48 8b 54 24 48	 mov	 rdx, QWORD PTR name$[rsp]
  00013	48 8b 44 24 40	 mov	 rax, QWORD PTR st$[rsp]
  00018	48 8b 48 38	 mov	 rcx, QWORD PTR [rax+56]
  0001c	e8 00 00 00 00	 call	 _Py_Mangle
  00021	48 89 44 24 20	 mov	 QWORD PTR mangled$[rsp], rax

; 967  :     if (!mangled)

  00026	48 83 7c 24 20
	00		 cmp	 QWORD PTR mangled$[rsp], 0
  0002c	75 04		 jne	 SHORT $LN2@symtable_l

; 968  :         return 0;

  0002e	33 c0		 xor	 eax, eax
  00030	eb 3c		 jmp	 SHORT $LN3@symtable_l
$LN2@symtable_l:

; 969  :     o = PyDict_GetItem(st->st_cur->ste_symbols, mangled);

  00032	48 8b 44 24 40	 mov	 rax, QWORD PTR st$[rsp]
  00037	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0003b	48 8b 54 24 20	 mov	 rdx, QWORD PTR mangled$[rsp]
  00040	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  00044	e8 00 00 00 00	 call	 PyDict_GetItem
  00049	48 89 44 24 28	 mov	 QWORD PTR o$[rsp], rax

; 970  :     Py_DECREF(mangled);

  0004e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR mangled$[rsp]
  00053	e8 00 00 00 00	 call	 _Py_DecRef

; 971  :     if (!o)

  00058	48 83 7c 24 28
	00		 cmp	 QWORD PTR o$[rsp], 0
  0005e	75 04		 jne	 SHORT $LN1@symtable_l

; 972  :         return 0;

  00060	33 c0		 xor	 eax, eax
  00062	eb 0a		 jmp	 SHORT $LN3@symtable_l
$LN1@symtable_l:

; 973  :     return PyLong_AsLong(o);

  00064	48 8b 4c 24 28	 mov	 rcx, QWORD PTR o$[rsp]
  00069	e8 00 00 00 00	 call	 PyLong_AsLong
$LN3@symtable_l:

; 974  : }

  0006e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00072	c3		 ret	 0
symtable_lookup ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CP@OLFKADKB@duplicate?5argument?5?8?$CFU?8?5in?5funct@ ; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$symtable_add_def DD imagerel symtable_add_def
	DD	imagerel symtable_add_def+548
	DD	imagerel $unwind$symtable_add_def
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$symtable_add_def DD 011301H
	DD	08213H
xdata	ENDS
;	COMDAT ??_C@_0CP@OLFKADKB@duplicate?5argument?5?8?$CFU?8?5in?5funct@
CONST	SEGMENT
??_C@_0CP@OLFKADKB@duplicate?5argument?5?8?$CFU?8?5in?5funct@ DB 'duplica'
	DB	'te argument ''%U'' in function definition', 00H ; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT symtable_add_def
_TEXT	SEGMENT
dict$ = 32
mangled$ = 40
val$ = 48
o$ = 56
st$ = 80
name$ = 88
flag$ = 96
symtable_add_def PROC					; COMDAT

; 978  : {

  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 979  :     PyObject *o;
; 980  :     PyObject *dict;
; 981  :     long val;
; 982  :     PyObject *mangled = _Py_Mangle(st->st_private, name);

  00013	48 8b 54 24 58	 mov	 rdx, QWORD PTR name$[rsp]
  00018	48 8b 44 24 50	 mov	 rax, QWORD PTR st$[rsp]
  0001d	48 8b 48 38	 mov	 rcx, QWORD PTR [rax+56]
  00021	e8 00 00 00 00	 call	 _Py_Mangle
  00026	48 89 44 24 28	 mov	 QWORD PTR mangled$[rsp], rax

; 983  : 
; 984  : 
; 985  :     if (!mangled)

  0002b	48 83 7c 24 28
	00		 cmp	 QWORD PTR mangled$[rsp], 0
  00031	75 07		 jne	 SHORT $LN13@symtable_a@2

; 986  :         return 0;

  00033	33 c0		 xor	 eax, eax
  00035	e9 e5 01 00 00	 jmp	 $LN14@symtable_a@2
$LN13@symtable_a@2:

; 987  :     dict = st->st_cur->ste_symbols;

  0003a	48 8b 44 24 50	 mov	 rax, QWORD PTR st$[rsp]
  0003f	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00043	48 8b 40 68	 mov	 rax, QWORD PTR [rax+104]
  00047	48 89 44 24 20	 mov	 QWORD PTR dict$[rsp], rax

; 988  :     if ((o = PyDict_GetItem(dict, mangled))) {

  0004c	48 8b 54 24 28	 mov	 rdx, QWORD PTR mangled$[rsp]
  00051	48 8b 4c 24 20	 mov	 rcx, QWORD PTR dict$[rsp]
  00056	e8 00 00 00 00	 call	 PyDict_GetItem
  0005b	48 89 44 24 38	 mov	 QWORD PTR o$[rsp], rax
  00060	48 83 7c 24 38
	00		 cmp	 QWORD PTR o$[rsp], 0
  00066	74 7f		 je	 SHORT $LN12@symtable_a@2

; 989  :         val = PyLong_AS_LONG(o);

  00068	48 8b 4c 24 38	 mov	 rcx, QWORD PTR o$[rsp]
  0006d	e8 00 00 00 00	 call	 PyLong_AsLong
  00072	89 44 24 30	 mov	 DWORD PTR val$[rsp], eax

; 990  :         if ((flag & DEF_PARAM) && (val & DEF_PARAM)) {

  00076	8b 44 24 60	 mov	 eax, DWORD PTR flag$[rsp]
  0007a	83 e0 04	 and	 eax, 4
  0007d	85 c0		 test	 eax, eax
  0007f	74 54		 je	 SHORT $LN11@symtable_a@2
  00081	8b 44 24 30	 mov	 eax, DWORD PTR val$[rsp]
  00085	83 e0 04	 and	 eax, 4
  00088	85 c0		 test	 eax, eax
  0008a	74 49		 je	 SHORT $LN11@symtable_a@2

; 991  :             /* Is it better to use 'mangled' or 'name' here? */
; 992  :             PyErr_Format(PyExc_SyntaxError, DUPLICATE_ARGUMENT, name);

  0008c	4c 8b 44 24 58	 mov	 r8, QWORD PTR name$[rsp]
  00091	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CP@OLFKADKB@duplicate?5argument?5?8?$CFU?8?5in?5funct@
  00098	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SyntaxError
  0009f	e8 00 00 00 00	 call	 PyErr_Format

; 993  :             PyErr_SyntaxLocationEx(st->st_filename,
; 994  :                                    st->st_cur->ste_lineno,
; 995  :                                    st->st_cur->ste_col_offset);

  000a4	48 8b 44 24 50	 mov	 rax, QWORD PTR st$[rsp]
  000a9	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  000ad	48 8b 4c 24 50	 mov	 rcx, QWORD PTR st$[rsp]
  000b2	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  000b6	44 8b 80 9c 00
	00 00		 mov	 r8d, DWORD PTR [rax+156]
  000bd	8b 91 98 00 00
	00		 mov	 edx, DWORD PTR [rcx+152]
  000c3	48 8b 44 24 50	 mov	 rax, QWORD PTR st$[rsp]
  000c8	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  000cb	e8 00 00 00 00	 call	 PyErr_SyntaxLocationEx

; 996  :             goto error;

  000d0	e9 3e 01 00 00	 jmp	 $error$22341
$LN11@symtable_a@2:

; 997  :         }
; 998  :         val |= flag;

  000d5	8b 44 24 60	 mov	 eax, DWORD PTR flag$[rsp]
  000d9	8b 4c 24 30	 mov	 ecx, DWORD PTR val$[rsp]
  000dd	0b c8		 or	 ecx, eax
  000df	8b c1		 mov	 eax, ecx
  000e1	89 44 24 30	 mov	 DWORD PTR val$[rsp], eax

; 999  :     } else

  000e5	eb 08		 jmp	 SHORT $LN10@symtable_a@2
$LN12@symtable_a@2:

; 1000 :         val = flag;

  000e7	8b 44 24 60	 mov	 eax, DWORD PTR flag$[rsp]
  000eb	89 44 24 30	 mov	 DWORD PTR val$[rsp], eax
$LN10@symtable_a@2:

; 1001 :     o = PyLong_FromLong(val);

  000ef	8b 4c 24 30	 mov	 ecx, DWORD PTR val$[rsp]
  000f3	e8 00 00 00 00	 call	 PyLong_FromLong
  000f8	48 89 44 24 38	 mov	 QWORD PTR o$[rsp], rax

; 1002 :     if (o == NULL)

  000fd	48 83 7c 24 38
	00		 cmp	 QWORD PTR o$[rsp], 0
  00103	75 05		 jne	 SHORT $LN9@symtable_a@2

; 1003 :         goto error;

  00105	e9 09 01 00 00	 jmp	 $error$22341
$LN9@symtable_a@2:

; 1004 :     if (PyDict_SetItem(dict, mangled, o) < 0) {

  0010a	4c 8b 44 24 38	 mov	 r8, QWORD PTR o$[rsp]
  0010f	48 8b 54 24 28	 mov	 rdx, QWORD PTR mangled$[rsp]
  00114	48 8b 4c 24 20	 mov	 rcx, QWORD PTR dict$[rsp]
  00119	e8 00 00 00 00	 call	 PyDict_SetItem
  0011e	85 c0		 test	 eax, eax
  00120	7d 0f		 jge	 SHORT $LN8@symtable_a@2

; 1005 :         Py_DECREF(o);

  00122	48 8b 4c 24 38	 mov	 rcx, QWORD PTR o$[rsp]
  00127	e8 00 00 00 00	 call	 _Py_DecRef

; 1006 :         goto error;

  0012c	e9 e2 00 00 00	 jmp	 $error$22341
$LN8@symtable_a@2:

; 1007 :     }
; 1008 :     Py_DECREF(o);

  00131	48 8b 4c 24 38	 mov	 rcx, QWORD PTR o$[rsp]
  00136	e8 00 00 00 00	 call	 _Py_DecRef

; 1009 : 
; 1010 :     if (flag & DEF_PARAM) {

  0013b	8b 44 24 60	 mov	 eax, DWORD PTR flag$[rsp]
  0013f	83 e0 04	 and	 eax, 4
  00142	85 c0		 test	 eax, eax
  00144	74 25		 je	 SHORT $LN7@symtable_a@2

; 1011 :         if (PyList_Append(st->st_cur->ste_varnames, mangled) < 0)

  00146	48 8b 44 24 50	 mov	 rax, QWORD PTR st$[rsp]
  0014b	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0014f	48 8b 54 24 28	 mov	 rdx, QWORD PTR mangled$[rsp]
  00154	48 8b 48 78	 mov	 rcx, QWORD PTR [rax+120]
  00158	e8 00 00 00 00	 call	 PyList_Append
  0015d	85 c0		 test	 eax, eax
  0015f	7d 05		 jge	 SHORT $LN6@symtable_a@2

; 1012 :             goto error;

  00161	e9 ad 00 00 00	 jmp	 $error$22341
$LN6@symtable_a@2:

; 1013 :     } else      if (flag & DEF_GLOBAL) {

  00166	e9 97 00 00 00	 jmp	 $LN5@symtable_a@2
$LN7@symtable_a@2:
  0016b	8b 44 24 60	 mov	 eax, DWORD PTR flag$[rsp]
  0016f	83 e0 01	 and	 eax, 1
  00172	85 c0		 test	 eax, eax
  00174	0f 84 88 00 00
	00		 je	 $LN4@symtable_a@2

; 1014 :         /* XXX need to update DEF_GLOBAL for other flags too;
; 1015 :            perhaps only DEF_FREE_GLOBAL */
; 1016 :         val = flag;

  0017a	8b 44 24 60	 mov	 eax, DWORD PTR flag$[rsp]
  0017e	89 44 24 30	 mov	 DWORD PTR val$[rsp], eax

; 1017 :         if ((o = PyDict_GetItem(st->st_global, mangled))) {

  00182	48 8b 54 24 28	 mov	 rdx, QWORD PTR mangled$[rsp]
  00187	48 8b 44 24 50	 mov	 rax, QWORD PTR st$[rsp]
  0018c	48 8b 48 28	 mov	 rcx, QWORD PTR [rax+40]
  00190	e8 00 00 00 00	 call	 PyDict_GetItem
  00195	48 89 44 24 38	 mov	 QWORD PTR o$[rsp], rax
  0019a	48 83 7c 24 38
	00		 cmp	 QWORD PTR o$[rsp], 0
  001a0	74 16		 je	 SHORT $LN3@symtable_a@2

; 1018 :             val |= PyLong_AS_LONG(o);

  001a2	48 8b 4c 24 38	 mov	 rcx, QWORD PTR o$[rsp]
  001a7	e8 00 00 00 00	 call	 PyLong_AsLong
  001ac	8b 4c 24 30	 mov	 ecx, DWORD PTR val$[rsp]
  001b0	0b c8		 or	 ecx, eax
  001b2	8b c1		 mov	 eax, ecx
  001b4	89 44 24 30	 mov	 DWORD PTR val$[rsp], eax
$LN3@symtable_a@2:

; 1019 :         }
; 1020 :         o = PyLong_FromLong(val);

  001b8	8b 4c 24 30	 mov	 ecx, DWORD PTR val$[rsp]
  001bc	e8 00 00 00 00	 call	 PyLong_FromLong
  001c1	48 89 44 24 38	 mov	 QWORD PTR o$[rsp], rax

; 1021 :         if (o == NULL)

  001c6	48 83 7c 24 38
	00		 cmp	 QWORD PTR o$[rsp], 0
  001cc	75 02		 jne	 SHORT $LN2@symtable_a@2

; 1022 :             goto error;

  001ce	eb 43		 jmp	 SHORT $error$22341
$LN2@symtable_a@2:

; 1023 :         if (PyDict_SetItem(st->st_global, mangled, o) < 0) {

  001d0	4c 8b 44 24 38	 mov	 r8, QWORD PTR o$[rsp]
  001d5	48 8b 54 24 28	 mov	 rdx, QWORD PTR mangled$[rsp]
  001da	48 8b 44 24 50	 mov	 rax, QWORD PTR st$[rsp]
  001df	48 8b 48 28	 mov	 rcx, QWORD PTR [rax+40]
  001e3	e8 00 00 00 00	 call	 PyDict_SetItem
  001e8	85 c0		 test	 eax, eax
  001ea	7d 0c		 jge	 SHORT $LN1@symtable_a@2

; 1024 :             Py_DECREF(o);

  001ec	48 8b 4c 24 38	 mov	 rcx, QWORD PTR o$[rsp]
  001f1	e8 00 00 00 00	 call	 _Py_DecRef

; 1025 :             goto error;

  001f6	eb 1b		 jmp	 SHORT $error$22341
$LN1@symtable_a@2:

; 1026 :         }
; 1027 :         Py_DECREF(o);

  001f8	48 8b 4c 24 38	 mov	 rcx, QWORD PTR o$[rsp]
  001fd	e8 00 00 00 00	 call	 _Py_DecRef
$LN4@symtable_a@2:
$LN5@symtable_a@2:

; 1028 :     }
; 1029 :     Py_DECREF(mangled);

  00202	48 8b 4c 24 28	 mov	 rcx, QWORD PTR mangled$[rsp]
  00207	e8 00 00 00 00	 call	 _Py_DecRef

; 1030 :     return 1;

  0020c	b8 01 00 00 00	 mov	 eax, 1
  00211	eb 0c		 jmp	 SHORT $LN14@symtable_a@2
$error$22341:

; 1031 : 
; 1032 : error:
; 1033 :     Py_DECREF(mangled);

  00213	48 8b 4c 24 28	 mov	 rcx, QWORD PTR mangled$[rsp]
  00218	e8 00 00 00 00	 call	 _Py_DecRef

; 1034 :     return 0;

  0021d	33 c0		 xor	 eax, eax
$LN14@symtable_a@2:

; 1035 : }

  0021f	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00223	c3		 ret	 0
symtable_add_def ENDP
_TEXT	ENDS
PUBLIC	??_C@_05MKJDPMKP@super?$AA@			; `string'
PUBLIC	??_C@_06COJIGPIB@lambda?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$symtable_visit_expr DD imagerel symtable_visit_expr
	DD	imagerel symtable_visit_expr+4604
	DD	imagerel $unwind$symtable_visit_expr
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$symtable_visit_expr DD 021101H
	DD	0370111H
xdata	ENDS
;	COMDAT ??_C@_05MKJDPMKP@super?$AA@
CONST	SEGMENT
??_C@_05MKJDPMKP@super?$AA@ DB 'super', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06COJIGPIB@lambda?$AA@
CONST	SEGMENT
??_C@_06COJIGPIB@lambda?$AA@ DB 'lambda', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT symtable_visit_expr
_TEXT	SEGMENT
i$22719 = 48
seq$22720 = 56
elt$22725 = 64
i$22737 = 72
seq$22738 = 80
elt$22743 = 88
i$22747 = 96
seq$22748 = 104
elt$22753 = 112
i$22768 = 120
seq$22769 = 128
elt$22774 = 136
i$22777 = 144
seq$22778 = 152
elt$22783 = 160
i$22787 = 168
seq$22788 = 176
elt$22793 = 184
i$22811 = 192
seq$22812 = 200
elt$22817 = 208
i$22822 = 216
seq$22823 = 224
elt$22828 = 232
i$22831 = 240
seq$22832 = 248
elt$22837 = 256
i$22859 = 264
seq$22860 = 272
elt$22865 = 280
i$22869 = 288
seq$22870 = 296
elt$22875 = 304
tv66 = 312
tv74 = 316
tv79 = 320
tv151 = 328
tv164 = 336
tv185 = 344
tv263 = 352
tv280 = 360
tv297 = 368
tv378 = 376
tv403 = 384
tv420 = 392
tv488 = 400
tv510 = 408
tv524 = 416
tv541 = 424
st$ = 448
e$ = 456
symtable_visit_expr PROC				; COMDAT

; 1321 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 81 ec b8 01
	00 00		 sub	 rsp, 440		; 000001b8H

; 1322 :     if (++st->recursion_depth > st->recursion_limit) {

  00011	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR st$[rsp]
  00019	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  0001c	ff c0		 inc	 eax
  0001e	89 84 24 38 01
	00 00		 mov	 DWORD PTR tv66[rsp], eax
  00025	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR st$[rsp]
  0002d	8b 8c 24 38 01
	00 00		 mov	 ecx, DWORD PTR tv66[rsp]
  00034	89 48 48	 mov	 DWORD PTR [rax+72], ecx
  00037	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR st$[rsp]
  0003f	8b 40 4c	 mov	 eax, DWORD PTR [rax+76]
  00042	39 84 24 38 01
	00 00		 cmp	 DWORD PTR tv66[rsp], eax
  00049	7e 32		 jle	 SHORT $LN104@symtable_v@2

; 1323 :         PyErr_SetString(PyExc_RuntimeError,
; 1324 :                         "maximum recursion depth exceeded during compilation");

  0004b	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0DE@DFBPPMEI@maximum?5recursion?5depth?5exceeded@
  00052	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_RuntimeError
  00059	e8 00 00 00 00	 call	 PyErr_SetString

; 1325 :         VISIT_QUIT(st, 0);

  0005e	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR st$[rsp]
  00066	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  00069	ff c8		 dec	 eax
  0006b	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  00073	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  00076	33 c0		 xor	 eax, eax
  00078	e9 12 11 00 00	 jmp	 $LN105@symtable_v@2
$LN104@symtable_v@2:

; 1326 :     }
; 1327 :     switch (e->kind) {

  0007d	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR e$[rsp]
  00085	8b 00		 mov	 eax, DWORD PTR [rax]
  00087	89 84 24 3c 01
	00 00		 mov	 DWORD PTR tv74[rsp], eax
  0008e	8b 84 24 3c 01
	00 00		 mov	 eax, DWORD PTR tv74[rsp]
  00095	ff c8		 dec	 eax
  00097	89 84 24 3c 01
	00 00		 mov	 DWORD PTR tv74[rsp], eax
  0009e	83 bc 24 3c 01
	00 00 18	 cmp	 DWORD PTR tv74[rsp], 24
  000a6	0f 87 c6 10 00
	00		 ja	 $LN102@symtable_v@2
  000ac	48 63 84 24 3c
	01 00 00	 movsxd	 rax, DWORD PTR tv74[rsp]
  000b4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  000bb	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN135@symtable_v@2[rcx+rax*4]
  000c2	48 03 c1	 add	 rax, rcx
  000c5	ff e0		 jmp	 rax
$LN101@symtable_v@2:

; 1328 :     case BoolOp_kind:
; 1329 :         VISIT_SEQ(st, expr, e->v.BoolOp.values);

  000c7	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR e$[rsp]
  000cf	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000d3	48 89 44 24 38	 mov	 QWORD PTR seq$22720[rsp], rax
  000d8	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR i$22719[rsp], 0
  000e0	eb 0a		 jmp	 SHORT $LN100@symtable_v@2
$LN99@symtable_v@2:
  000e2	8b 44 24 30	 mov	 eax, DWORD PTR i$22719[rsp]
  000e6	ff c0		 inc	 eax
  000e8	89 44 24 30	 mov	 DWORD PTR i$22719[rsp], eax
$LN100@symtable_v@2:
  000ec	48 83 7c 24 38
	00		 cmp	 QWORD PTR seq$22720[rsp], 0
  000f2	75 0e		 jne	 SHORT $LN107@symtable_v@2
  000f4	48 c7 84 24 40
	01 00 00 00 00
	00 00		 mov	 QWORD PTR tv79[rsp], 0
  00100	eb 10		 jmp	 SHORT $LN108@symtable_v@2
$LN107@symtable_v@2:
  00102	48 8b 44 24 38	 mov	 rax, QWORD PTR seq$22720[rsp]
  00107	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0010a	48 89 84 24 40
	01 00 00	 mov	 QWORD PTR tv79[rsp], rax
$LN108@symtable_v@2:
  00112	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$22719[rsp]
  00117	48 3b 84 24 40
	01 00 00	 cmp	 rax, QWORD PTR tv79[rsp]
  0011f	7d 4e		 jge	 SHORT $LN98@symtable_v@2
  00121	48 63 44 24 30	 movsxd	 rax, DWORD PTR i$22719[rsp]
  00126	48 8b 4c 24 38	 mov	 rcx, QWORD PTR seq$22720[rsp]
  0012b	48 8b 44 c1 08	 mov	 rax, QWORD PTR [rcx+rax*8+8]
  00130	48 89 44 24 40	 mov	 QWORD PTR elt$22725[rsp], rax
  00135	48 8b 54 24 40	 mov	 rdx, QWORD PTR elt$22725[rsp]
  0013a	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  00142	e8 00 00 00 00	 call	 symtable_visit_expr
  00147	85 c0		 test	 eax, eax
  00149	75 1f		 jne	 SHORT $LN97@symtable_v@2
  0014b	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR st$[rsp]
  00153	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  00156	ff c8		 dec	 eax
  00158	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  00160	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  00163	33 c0		 xor	 eax, eax
  00165	e9 25 10 00 00	 jmp	 $LN105@symtable_v@2
$LN97@symtable_v@2:
  0016a	e9 73 ff ff ff	 jmp	 $LN99@symtable_v@2
$LN98@symtable_v@2:

; 1330 :         break;

  0016f	e9 fe 0f 00 00	 jmp	 $LN102@symtable_v@2
$LN96@symtable_v@2:

; 1331 :     case BinOp_kind:
; 1332 :         VISIT(st, expr, e->v.BinOp.left);

  00174	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR e$[rsp]
  0017c	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  00180	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  00188	e8 00 00 00 00	 call	 symtable_visit_expr
  0018d	85 c0		 test	 eax, eax
  0018f	75 1f		 jne	 SHORT $LN95@symtable_v@2
  00191	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR st$[rsp]
  00199	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  0019c	ff c8		 dec	 eax
  0019e	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  001a6	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  001a9	33 c0		 xor	 eax, eax
  001ab	e9 df 0f 00 00	 jmp	 $LN105@symtable_v@2
$LN95@symtable_v@2:

; 1333 :         VISIT(st, expr, e->v.BinOp.right);

  001b0	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR e$[rsp]
  001b8	48 8b 50 18	 mov	 rdx, QWORD PTR [rax+24]
  001bc	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  001c4	e8 00 00 00 00	 call	 symtable_visit_expr
  001c9	85 c0		 test	 eax, eax
  001cb	75 1f		 jne	 SHORT $LN94@symtable_v@2
  001cd	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR st$[rsp]
  001d5	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  001d8	ff c8		 dec	 eax
  001da	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  001e2	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  001e5	33 c0		 xor	 eax, eax
  001e7	e9 a3 0f 00 00	 jmp	 $LN105@symtable_v@2
$LN94@symtable_v@2:

; 1334 :         break;

  001ec	e9 81 0f 00 00	 jmp	 $LN102@symtable_v@2
$LN93@symtable_v@2:

; 1335 :     case UnaryOp_kind:
; 1336 :         VISIT(st, expr, e->v.UnaryOp.operand);

  001f1	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR e$[rsp]
  001f9	48 8b 50 10	 mov	 rdx, QWORD PTR [rax+16]
  001fd	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  00205	e8 00 00 00 00	 call	 symtable_visit_expr
  0020a	85 c0		 test	 eax, eax
  0020c	75 1f		 jne	 SHORT $LN92@symtable_v@2
  0020e	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR st$[rsp]
  00216	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  00219	ff c8		 dec	 eax
  0021b	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  00223	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  00226	33 c0		 xor	 eax, eax
  00228	e9 62 0f 00 00	 jmp	 $LN105@symtable_v@2
$LN92@symtable_v@2:

; 1337 :         break;

  0022d	e9 40 0f 00 00	 jmp	 $LN102@symtable_v@2
$LN91@symtable_v@2:

; 1338 :     case Lambda_kind: {
; 1339 :         if (!GET_IDENTIFIER(lambda))

  00232	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR lambda, 0
  0023a	74 11		 je	 SHORT $LN109@symtable_v@2
  0023c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR lambda
  00243	48 89 84 24 48
	01 00 00	 mov	 QWORD PTR tv151[rsp], rax
  0024b	eb 22		 jmp	 SHORT $LN110@symtable_v@2
$LN109@symtable_v@2:
  0024d	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_06COJIGPIB@lambda?$AA@
  00254	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  00259	48 89 05 00 00
	00 00		 mov	 QWORD PTR lambda, rax
  00260	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR lambda
  00267	48 89 84 24 48
	01 00 00	 mov	 QWORD PTR tv151[rsp], rax
$LN110@symtable_v@2:
  0026f	48 83 bc 24 48
	01 00 00 00	 cmp	 QWORD PTR tv151[rsp], 0
  00278	75 1f		 jne	 SHORT $LN90@symtable_v@2

; 1340 :             VISIT_QUIT(st, 0);

  0027a	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR st$[rsp]
  00282	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  00285	ff c8		 dec	 eax
  00287	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  0028f	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  00292	33 c0		 xor	 eax, eax
  00294	e9 f6 0e 00 00	 jmp	 $LN105@symtable_v@2
$LN90@symtable_v@2:

; 1341 :         if (e->v.Lambda.args->defaults)

  00299	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR e$[rsp]
  002a1	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  002a5	48 83 78 30 00	 cmp	 QWORD PTR [rax+48], 0
  002aa	0f 84 ac 00 00
	00		 je	 $LN89@symtable_v@2

; 1342 :             VISIT_SEQ(st, expr, e->v.Lambda.args->defaults);

  002b0	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR e$[rsp]
  002b8	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  002bc	48 8b 40 30	 mov	 rax, QWORD PTR [rax+48]
  002c0	48 89 44 24 50	 mov	 QWORD PTR seq$22738[rsp], rax
  002c5	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR i$22737[rsp], 0
  002cd	eb 0a		 jmp	 SHORT $LN88@symtable_v@2
$LN87@symtable_v@2:
  002cf	8b 44 24 48	 mov	 eax, DWORD PTR i$22737[rsp]
  002d3	ff c0		 inc	 eax
  002d5	89 44 24 48	 mov	 DWORD PTR i$22737[rsp], eax
$LN88@symtable_v@2:
  002d9	48 83 7c 24 50
	00		 cmp	 QWORD PTR seq$22738[rsp], 0
  002df	75 0e		 jne	 SHORT $LN111@symtable_v@2
  002e1	48 c7 84 24 50
	01 00 00 00 00
	00 00		 mov	 QWORD PTR tv164[rsp], 0
  002ed	eb 10		 jmp	 SHORT $LN112@symtable_v@2
$LN111@symtable_v@2:
  002ef	48 8b 44 24 50	 mov	 rax, QWORD PTR seq$22738[rsp]
  002f4	48 8b 00	 mov	 rax, QWORD PTR [rax]
  002f7	48 89 84 24 50
	01 00 00	 mov	 QWORD PTR tv164[rsp], rax
$LN112@symtable_v@2:
  002ff	48 63 44 24 48	 movsxd	 rax, DWORD PTR i$22737[rsp]
  00304	48 3b 84 24 50
	01 00 00	 cmp	 rax, QWORD PTR tv164[rsp]
  0030c	7d 4e		 jge	 SHORT $LN86@symtable_v@2
  0030e	48 63 44 24 48	 movsxd	 rax, DWORD PTR i$22737[rsp]
  00313	48 8b 4c 24 50	 mov	 rcx, QWORD PTR seq$22738[rsp]
  00318	48 8b 44 c1 08	 mov	 rax, QWORD PTR [rcx+rax*8+8]
  0031d	48 89 44 24 58	 mov	 QWORD PTR elt$22743[rsp], rax
  00322	48 8b 54 24 58	 mov	 rdx, QWORD PTR elt$22743[rsp]
  00327	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  0032f	e8 00 00 00 00	 call	 symtable_visit_expr
  00334	85 c0		 test	 eax, eax
  00336	75 1f		 jne	 SHORT $LN85@symtable_v@2
  00338	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR st$[rsp]
  00340	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  00343	ff c8		 dec	 eax
  00345	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  0034d	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  00350	33 c0		 xor	 eax, eax
  00352	e9 38 0e 00 00	 jmp	 $LN105@symtable_v@2
$LN85@symtable_v@2:
  00357	e9 73 ff ff ff	 jmp	 $LN87@symtable_v@2
$LN86@symtable_v@2:
$LN89@symtable_v@2:

; 1343 :         if (e->v.Lambda.args->kw_defaults)

  0035c	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR e$[rsp]
  00364	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00368	48 83 78 38 00	 cmp	 QWORD PTR [rax+56], 0
  0036d	0f 84 be 00 00
	00		 je	 $LN84@symtable_v@2

; 1344 :             VISIT_KWONLYDEFAULTS(st,
; 1345 :                                  e->v.Lambda.args->kw_defaults);

  00373	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR i$22747[rsp], 0
  0037b	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR e$[rsp]
  00383	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00387	48 8b 40 38	 mov	 rax, QWORD PTR [rax+56]
  0038b	48 89 44 24 68	 mov	 QWORD PTR seq$22748[rsp], rax
  00390	c7 44 24 60 00
	00 00 00	 mov	 DWORD PTR i$22747[rsp], 0
  00398	eb 0a		 jmp	 SHORT $LN83@symtable_v@2
$LN82@symtable_v@2:
  0039a	8b 44 24 60	 mov	 eax, DWORD PTR i$22747[rsp]
  0039e	ff c0		 inc	 eax
  003a0	89 44 24 60	 mov	 DWORD PTR i$22747[rsp], eax
$LN83@symtable_v@2:
  003a4	48 83 7c 24 68
	00		 cmp	 QWORD PTR seq$22748[rsp], 0
  003aa	75 0e		 jne	 SHORT $LN113@symtable_v@2
  003ac	48 c7 84 24 58
	01 00 00 00 00
	00 00		 mov	 QWORD PTR tv185[rsp], 0
  003b8	eb 10		 jmp	 SHORT $LN114@symtable_v@2
$LN113@symtable_v@2:
  003ba	48 8b 44 24 68	 mov	 rax, QWORD PTR seq$22748[rsp]
  003bf	48 8b 00	 mov	 rax, QWORD PTR [rax]
  003c2	48 89 84 24 58
	01 00 00	 mov	 QWORD PTR tv185[rsp], rax
$LN114@symtable_v@2:
  003ca	48 63 44 24 60	 movsxd	 rax, DWORD PTR i$22747[rsp]
  003cf	48 3b 84 24 58
	01 00 00	 cmp	 rax, QWORD PTR tv185[rsp]
  003d7	7d 58		 jge	 SHORT $LN81@symtable_v@2
  003d9	48 63 44 24 60	 movsxd	 rax, DWORD PTR i$22747[rsp]
  003de	48 8b 4c 24 68	 mov	 rcx, QWORD PTR seq$22748[rsp]
  003e3	48 8b 44 c1 08	 mov	 rax, QWORD PTR [rcx+rax*8+8]
  003e8	48 89 44 24 70	 mov	 QWORD PTR elt$22753[rsp], rax
  003ed	48 83 7c 24 70
	00		 cmp	 QWORD PTR elt$22753[rsp], 0
  003f3	75 02		 jne	 SHORT $LN80@symtable_v@2
  003f5	eb a3		 jmp	 SHORT $LN82@symtable_v@2
$LN80@symtable_v@2:
  003f7	48 8b 54 24 70	 mov	 rdx, QWORD PTR elt$22753[rsp]
  003fc	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  00404	e8 00 00 00 00	 call	 symtable_visit_expr
  00409	85 c0		 test	 eax, eax
  0040b	75 1f		 jne	 SHORT $LN79@symtable_v@2
  0040d	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR st$[rsp]
  00415	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  00418	ff c8		 dec	 eax
  0041a	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  00422	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  00425	33 c0		 xor	 eax, eax
  00427	e9 63 0d 00 00	 jmp	 $LN105@symtable_v@2
$LN79@symtable_v@2:
  0042c	e9 69 ff ff ff	 jmp	 $LN82@symtable_v@2
$LN81@symtable_v@2:
$LN84@symtable_v@2:

; 1346 :         if (!symtable_enter_block(st, lambda,
; 1347 :                                   FunctionBlock, (void *)e, e->lineno,
; 1348 :                                   e->col_offset))

  00431	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR e$[rsp]
  00439	8b 40 34	 mov	 eax, DWORD PTR [rax+52]
  0043c	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  00440	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR e$[rsp]
  00448	8b 40 30	 mov	 eax, DWORD PTR [rax+48]
  0044b	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0044f	4c 8b 8c 24 c8
	01 00 00	 mov	 r9, QWORD PTR e$[rsp]
  00457	45 33 c0	 xor	 r8d, r8d
  0045a	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR lambda
  00461	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  00469	e8 00 00 00 00	 call	 symtable_enter_block
  0046e	85 c0		 test	 eax, eax
  00470	75 1f		 jne	 SHORT $LN78@symtable_v@2

; 1349 :             VISIT_QUIT(st, 0);

  00472	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR st$[rsp]
  0047a	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  0047d	ff c8		 dec	 eax
  0047f	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  00487	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  0048a	33 c0		 xor	 eax, eax
  0048c	e9 fe 0c 00 00	 jmp	 $LN105@symtable_v@2
$LN78@symtable_v@2:

; 1350 :         VISIT(st, arguments, e->v.Lambda.args);

  00491	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR e$[rsp]
  00499	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  0049d	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  004a5	e8 00 00 00 00	 call	 symtable_visit_arguments
  004aa	85 c0		 test	 eax, eax
  004ac	75 1f		 jne	 SHORT $LN77@symtable_v@2
  004ae	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR st$[rsp]
  004b6	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  004b9	ff c8		 dec	 eax
  004bb	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  004c3	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  004c6	33 c0		 xor	 eax, eax
  004c8	e9 c2 0c 00 00	 jmp	 $LN105@symtable_v@2
$LN77@symtable_v@2:

; 1351 :         VISIT(st, expr, e->v.Lambda.body);

  004cd	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR e$[rsp]
  004d5	48 8b 50 10	 mov	 rdx, QWORD PTR [rax+16]
  004d9	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  004e1	e8 00 00 00 00	 call	 symtable_visit_expr
  004e6	85 c0		 test	 eax, eax
  004e8	75 1f		 jne	 SHORT $LN76@symtable_v@2
  004ea	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR st$[rsp]
  004f2	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  004f5	ff c8		 dec	 eax
  004f7	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  004ff	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  00502	33 c0		 xor	 eax, eax
  00504	e9 86 0c 00 00	 jmp	 $LN105@symtable_v@2
$LN76@symtable_v@2:

; 1352 :         if (!symtable_exit_block(st, (void *)e))

  00509	48 8b 94 24 c8
	01 00 00	 mov	 rdx, QWORD PTR e$[rsp]
  00511	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  00519	e8 00 00 00 00	 call	 symtable_exit_block
  0051e	85 c0		 test	 eax, eax
  00520	75 1f		 jne	 SHORT $LN75@symtable_v@2

; 1353 :             VISIT_QUIT(st, 0);

  00522	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR st$[rsp]
  0052a	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  0052d	ff c8		 dec	 eax
  0052f	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  00537	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  0053a	33 c0		 xor	 eax, eax
  0053c	e9 4e 0c 00 00	 jmp	 $LN105@symtable_v@2
$LN75@symtable_v@2:

; 1354 :         break;

  00541	e9 2c 0c 00 00	 jmp	 $LN102@symtable_v@2
$LN74@symtable_v@2:

; 1355 :     }
; 1356 :     case IfExp_kind:
; 1357 :         VISIT(st, expr, e->v.IfExp.test);

  00546	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR e$[rsp]
  0054e	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  00552	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  0055a	e8 00 00 00 00	 call	 symtable_visit_expr
  0055f	85 c0		 test	 eax, eax
  00561	75 1f		 jne	 SHORT $LN73@symtable_v@2
  00563	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR st$[rsp]
  0056b	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  0056e	ff c8		 dec	 eax
  00570	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  00578	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  0057b	33 c0		 xor	 eax, eax
  0057d	e9 0d 0c 00 00	 jmp	 $LN105@symtable_v@2
$LN73@symtable_v@2:

; 1358 :         VISIT(st, expr, e->v.IfExp.body);

  00582	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR e$[rsp]
  0058a	48 8b 50 10	 mov	 rdx, QWORD PTR [rax+16]
  0058e	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  00596	e8 00 00 00 00	 call	 symtable_visit_expr
  0059b	85 c0		 test	 eax, eax
  0059d	75 1f		 jne	 SHORT $LN72@symtable_v@2
  0059f	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR st$[rsp]
  005a7	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  005aa	ff c8		 dec	 eax
  005ac	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  005b4	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  005b7	33 c0		 xor	 eax, eax
  005b9	e9 d1 0b 00 00	 jmp	 $LN105@symtable_v@2
$LN72@symtable_v@2:

; 1359 :         VISIT(st, expr, e->v.IfExp.orelse);

  005be	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR e$[rsp]
  005c6	48 8b 50 18	 mov	 rdx, QWORD PTR [rax+24]
  005ca	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  005d2	e8 00 00 00 00	 call	 symtable_visit_expr
  005d7	85 c0		 test	 eax, eax
  005d9	75 1f		 jne	 SHORT $LN71@symtable_v@2
  005db	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR st$[rsp]
  005e3	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  005e6	ff c8		 dec	 eax
  005e8	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  005f0	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  005f3	33 c0		 xor	 eax, eax
  005f5	e9 95 0b 00 00	 jmp	 $LN105@symtable_v@2
$LN71@symtable_v@2:

; 1360 :         break;

  005fa	e9 73 0b 00 00	 jmp	 $LN102@symtable_v@2
$LN70@symtable_v@2:

; 1361 :     case Dict_kind:
; 1362 :         VISIT_SEQ(st, expr, e->v.Dict.keys);

  005ff	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR e$[rsp]
  00607	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0060b	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR seq$22769[rsp], rax
  00613	c7 44 24 78 00
	00 00 00	 mov	 DWORD PTR i$22768[rsp], 0
  0061b	eb 0a		 jmp	 SHORT $LN69@symtable_v@2
$LN68@symtable_v@2:
  0061d	8b 44 24 78	 mov	 eax, DWORD PTR i$22768[rsp]
  00621	ff c0		 inc	 eax
  00623	89 44 24 78	 mov	 DWORD PTR i$22768[rsp], eax
$LN69@symtable_v@2:
  00627	48 83 bc 24 80
	00 00 00 00	 cmp	 QWORD PTR seq$22769[rsp], 0
  00630	75 0e		 jne	 SHORT $LN115@symtable_v@2
  00632	48 c7 84 24 60
	01 00 00 00 00
	00 00		 mov	 QWORD PTR tv263[rsp], 0
  0063e	eb 13		 jmp	 SHORT $LN116@symtable_v@2
$LN115@symtable_v@2:
  00640	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR seq$22769[rsp]
  00648	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0064b	48 89 84 24 60
	01 00 00	 mov	 QWORD PTR tv263[rsp], rax
$LN116@symtable_v@2:
  00653	48 63 44 24 78	 movsxd	 rax, DWORD PTR i$22768[rsp]
  00658	48 3b 84 24 60
	01 00 00	 cmp	 rax, QWORD PTR tv263[rsp]
  00660	7d 57		 jge	 SHORT $LN67@symtable_v@2
  00662	48 63 44 24 78	 movsxd	 rax, DWORD PTR i$22768[rsp]
  00667	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR seq$22769[rsp]
  0066f	48 8b 44 c1 08	 mov	 rax, QWORD PTR [rcx+rax*8+8]
  00674	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR elt$22774[rsp], rax
  0067c	48 8b 94 24 88
	00 00 00	 mov	 rdx, QWORD PTR elt$22774[rsp]
  00684	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  0068c	e8 00 00 00 00	 call	 symtable_visit_expr
  00691	85 c0		 test	 eax, eax
  00693	75 1f		 jne	 SHORT $LN66@symtable_v@2
  00695	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR st$[rsp]
  0069d	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  006a0	ff c8		 dec	 eax
  006a2	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  006aa	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  006ad	33 c0		 xor	 eax, eax
  006af	e9 db 0a 00 00	 jmp	 $LN105@symtable_v@2
$LN66@symtable_v@2:
  006b4	e9 64 ff ff ff	 jmp	 $LN68@symtable_v@2
$LN67@symtable_v@2:

; 1363 :         VISIT_SEQ(st, expr, e->v.Dict.values);

  006b9	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR e$[rsp]
  006c1	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  006c5	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR seq$22778[rsp], rax
  006cd	c7 84 24 90 00
	00 00 00 00 00
	00		 mov	 DWORD PTR i$22777[rsp], 0
  006d8	eb 10		 jmp	 SHORT $LN65@symtable_v@2
$LN64@symtable_v@2:
  006da	8b 84 24 90 00
	00 00		 mov	 eax, DWORD PTR i$22777[rsp]
  006e1	ff c0		 inc	 eax
  006e3	89 84 24 90 00
	00 00		 mov	 DWORD PTR i$22777[rsp], eax
$LN65@symtable_v@2:
  006ea	48 83 bc 24 98
	00 00 00 00	 cmp	 QWORD PTR seq$22778[rsp], 0
  006f3	75 0e		 jne	 SHORT $LN117@symtable_v@2
  006f5	48 c7 84 24 68
	01 00 00 00 00
	00 00		 mov	 QWORD PTR tv280[rsp], 0
  00701	eb 13		 jmp	 SHORT $LN118@symtable_v@2
$LN117@symtable_v@2:
  00703	48 8b 84 24 98
	00 00 00	 mov	 rax, QWORD PTR seq$22778[rsp]
  0070b	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0070e	48 89 84 24 68
	01 00 00	 mov	 QWORD PTR tv280[rsp], rax
$LN118@symtable_v@2:
  00716	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$22777[rsp]
  0071e	48 3b 84 24 68
	01 00 00	 cmp	 rax, QWORD PTR tv280[rsp]
  00726	7d 5a		 jge	 SHORT $LN63@symtable_v@2
  00728	48 63 84 24 90
	00 00 00	 movsxd	 rax, DWORD PTR i$22777[rsp]
  00730	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR seq$22778[rsp]
  00738	48 8b 44 c1 08	 mov	 rax, QWORD PTR [rcx+rax*8+8]
  0073d	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR elt$22783[rsp], rax
  00745	48 8b 94 24 a0
	00 00 00	 mov	 rdx, QWORD PTR elt$22783[rsp]
  0074d	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  00755	e8 00 00 00 00	 call	 symtable_visit_expr
  0075a	85 c0		 test	 eax, eax
  0075c	75 1f		 jne	 SHORT $LN62@symtable_v@2
  0075e	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR st$[rsp]
  00766	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  00769	ff c8		 dec	 eax
  0076b	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  00773	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  00776	33 c0		 xor	 eax, eax
  00778	e9 12 0a 00 00	 jmp	 $LN105@symtable_v@2
$LN62@symtable_v@2:
  0077d	e9 58 ff ff ff	 jmp	 $LN64@symtable_v@2
$LN63@symtable_v@2:

; 1364 :         break;

  00782	e9 eb 09 00 00	 jmp	 $LN102@symtable_v@2
$LN61@symtable_v@2:

; 1365 :     case Set_kind:
; 1366 :         VISIT_SEQ(st, expr, e->v.Set.elts);

  00787	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR e$[rsp]
  0078f	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00793	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR seq$22788[rsp], rax
  0079b	c7 84 24 a8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR i$22787[rsp], 0
  007a6	eb 10		 jmp	 SHORT $LN60@symtable_v@2
$LN59@symtable_v@2:
  007a8	8b 84 24 a8 00
	00 00		 mov	 eax, DWORD PTR i$22787[rsp]
  007af	ff c0		 inc	 eax
  007b1	89 84 24 a8 00
	00 00		 mov	 DWORD PTR i$22787[rsp], eax
$LN60@symtable_v@2:
  007b8	48 83 bc 24 b0
	00 00 00 00	 cmp	 QWORD PTR seq$22788[rsp], 0
  007c1	75 0e		 jne	 SHORT $LN119@symtable_v@2
  007c3	48 c7 84 24 70
	01 00 00 00 00
	00 00		 mov	 QWORD PTR tv297[rsp], 0
  007cf	eb 13		 jmp	 SHORT $LN120@symtable_v@2
$LN119@symtable_v@2:
  007d1	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR seq$22788[rsp]
  007d9	48 8b 00	 mov	 rax, QWORD PTR [rax]
  007dc	48 89 84 24 70
	01 00 00	 mov	 QWORD PTR tv297[rsp], rax
$LN120@symtable_v@2:
  007e4	48 63 84 24 a8
	00 00 00	 movsxd	 rax, DWORD PTR i$22787[rsp]
  007ec	48 3b 84 24 70
	01 00 00	 cmp	 rax, QWORD PTR tv297[rsp]
  007f4	7d 5a		 jge	 SHORT $LN58@symtable_v@2
  007f6	48 63 84 24 a8
	00 00 00	 movsxd	 rax, DWORD PTR i$22787[rsp]
  007fe	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR seq$22788[rsp]
  00806	48 8b 44 c1 08	 mov	 rax, QWORD PTR [rcx+rax*8+8]
  0080b	48 89 84 24 b8
	00 00 00	 mov	 QWORD PTR elt$22793[rsp], rax
  00813	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR elt$22793[rsp]
  0081b	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  00823	e8 00 00 00 00	 call	 symtable_visit_expr
  00828	85 c0		 test	 eax, eax
  0082a	75 1f		 jne	 SHORT $LN57@symtable_v@2
  0082c	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR st$[rsp]
  00834	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  00837	ff c8		 dec	 eax
  00839	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  00841	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  00844	33 c0		 xor	 eax, eax
  00846	e9 44 09 00 00	 jmp	 $LN105@symtable_v@2
$LN57@symtable_v@2:
  0084b	e9 58 ff ff ff	 jmp	 $LN59@symtable_v@2
$LN58@symtable_v@2:

; 1367 :         break;

  00850	e9 1d 09 00 00	 jmp	 $LN102@symtable_v@2
$LN56@symtable_v@2:

; 1368 :     case GeneratorExp_kind:
; 1369 :         if (!symtable_visit_genexp(st, e))

  00855	48 8b 94 24 c8
	01 00 00	 mov	 rdx, QWORD PTR e$[rsp]
  0085d	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  00865	e8 00 00 00 00	 call	 symtable_visit_genexp
  0086a	85 c0		 test	 eax, eax
  0086c	75 1f		 jne	 SHORT $LN55@symtable_v@2

; 1370 :             VISIT_QUIT(st, 0);

  0086e	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR st$[rsp]
  00876	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  00879	ff c8		 dec	 eax
  0087b	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  00883	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  00886	33 c0		 xor	 eax, eax
  00888	e9 02 09 00 00	 jmp	 $LN105@symtable_v@2
$LN55@symtable_v@2:

; 1371 :         break;

  0088d	e9 e0 08 00 00	 jmp	 $LN102@symtable_v@2
$LN54@symtable_v@2:

; 1372 :     case ListComp_kind:
; 1373 :         if (!symtable_visit_listcomp(st, e))

  00892	48 8b 94 24 c8
	01 00 00	 mov	 rdx, QWORD PTR e$[rsp]
  0089a	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  008a2	e8 00 00 00 00	 call	 symtable_visit_listcomp
  008a7	85 c0		 test	 eax, eax
  008a9	75 1f		 jne	 SHORT $LN53@symtable_v@2

; 1374 :             VISIT_QUIT(st, 0);

  008ab	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR st$[rsp]
  008b3	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  008b6	ff c8		 dec	 eax
  008b8	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  008c0	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  008c3	33 c0		 xor	 eax, eax
  008c5	e9 c5 08 00 00	 jmp	 $LN105@symtable_v@2
$LN53@symtable_v@2:

; 1375 :         break;

  008ca	e9 a3 08 00 00	 jmp	 $LN102@symtable_v@2
$LN52@symtable_v@2:

; 1376 :     case SetComp_kind:
; 1377 :         if (!symtable_visit_setcomp(st, e))

  008cf	48 8b 94 24 c8
	01 00 00	 mov	 rdx, QWORD PTR e$[rsp]
  008d7	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  008df	e8 00 00 00 00	 call	 symtable_visit_setcomp
  008e4	85 c0		 test	 eax, eax
  008e6	75 1f		 jne	 SHORT $LN51@symtable_v@2

; 1378 :             VISIT_QUIT(st, 0);

  008e8	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR st$[rsp]
  008f0	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  008f3	ff c8		 dec	 eax
  008f5	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  008fd	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  00900	33 c0		 xor	 eax, eax
  00902	e9 88 08 00 00	 jmp	 $LN105@symtable_v@2
$LN51@symtable_v@2:

; 1379 :         break;

  00907	e9 66 08 00 00	 jmp	 $LN102@symtable_v@2
$LN50@symtable_v@2:

; 1380 :     case DictComp_kind:
; 1381 :         if (!symtable_visit_dictcomp(st, e))

  0090c	48 8b 94 24 c8
	01 00 00	 mov	 rdx, QWORD PTR e$[rsp]
  00914	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  0091c	e8 00 00 00 00	 call	 symtable_visit_dictcomp
  00921	85 c0		 test	 eax, eax
  00923	75 1f		 jne	 SHORT $LN49@symtable_v@2

; 1382 :             VISIT_QUIT(st, 0);

  00925	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR st$[rsp]
  0092d	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  00930	ff c8		 dec	 eax
  00932	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  0093a	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  0093d	33 c0		 xor	 eax, eax
  0093f	e9 4b 08 00 00	 jmp	 $LN105@symtable_v@2
$LN49@symtable_v@2:

; 1383 :         break;

  00944	e9 29 08 00 00	 jmp	 $LN102@symtable_v@2
$LN48@symtable_v@2:

; 1384 :     case Yield_kind:
; 1385 :         if (e->v.Yield.value)

  00949	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR e$[rsp]
  00951	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00956	74 3c		 je	 SHORT $LN47@symtable_v@2

; 1386 :             VISIT(st, expr, e->v.Yield.value);

  00958	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR e$[rsp]
  00960	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  00964	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  0096c	e8 00 00 00 00	 call	 symtable_visit_expr
  00971	85 c0		 test	 eax, eax
  00973	75 1f		 jne	 SHORT $LN46@symtable_v@2
  00975	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR st$[rsp]
  0097d	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  00980	ff c8		 dec	 eax
  00982	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  0098a	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  0098d	33 c0		 xor	 eax, eax
  0098f	e9 fb 07 00 00	 jmp	 $LN105@symtable_v@2
$LN46@symtable_v@2:
$LN47@symtable_v@2:

; 1387 :         st->st_cur->ste_generator = 1;

  00994	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR st$[rsp]
  0099c	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  009a0	8b 80 94 00 00
	00		 mov	 eax, DWORD PTR [rax+148]
  009a6	83 c8 04	 or	 eax, 4
  009a9	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  009b1	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  009b5	89 81 94 00 00
	00		 mov	 DWORD PTR [rcx+148], eax

; 1388 :         break;

  009bb	e9 b2 07 00 00	 jmp	 $LN102@symtable_v@2
$LN45@symtable_v@2:

; 1389 :     case YieldFrom_kind:
; 1390 :         VISIT(st, expr, e->v.YieldFrom.value);

  009c0	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR e$[rsp]
  009c8	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  009cc	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  009d4	e8 00 00 00 00	 call	 symtable_visit_expr
  009d9	85 c0		 test	 eax, eax
  009db	75 1f		 jne	 SHORT $LN44@symtable_v@2
  009dd	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR st$[rsp]
  009e5	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  009e8	ff c8		 dec	 eax
  009ea	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  009f2	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  009f5	33 c0		 xor	 eax, eax
  009f7	e9 93 07 00 00	 jmp	 $LN105@symtable_v@2
$LN44@symtable_v@2:

; 1391 :         st->st_cur->ste_generator = 1;

  009fc	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR st$[rsp]
  00a04	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00a08	8b 80 94 00 00
	00		 mov	 eax, DWORD PTR [rax+148]
  00a0e	83 c8 04	 or	 eax, 4
  00a11	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  00a19	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00a1d	89 81 94 00 00
	00		 mov	 DWORD PTR [rcx+148], eax

; 1392 :         break;

  00a23	e9 4a 07 00 00	 jmp	 $LN102@symtable_v@2
$LN43@symtable_v@2:

; 1393 :     case Compare_kind:
; 1394 :         VISIT(st, expr, e->v.Compare.left);

  00a28	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR e$[rsp]
  00a30	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  00a34	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  00a3c	e8 00 00 00 00	 call	 symtable_visit_expr
  00a41	85 c0		 test	 eax, eax
  00a43	75 1f		 jne	 SHORT $LN42@symtable_v@2
  00a45	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR st$[rsp]
  00a4d	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  00a50	ff c8		 dec	 eax
  00a52	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  00a5a	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  00a5d	33 c0		 xor	 eax, eax
  00a5f	e9 2b 07 00 00	 jmp	 $LN105@symtable_v@2
$LN42@symtable_v@2:

; 1395 :         VISIT_SEQ(st, expr, e->v.Compare.comparators);

  00a64	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR e$[rsp]
  00a6c	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  00a70	48 89 84 24 c8
	00 00 00	 mov	 QWORD PTR seq$22812[rsp], rax
  00a78	c7 84 24 c0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR i$22811[rsp], 0
  00a83	eb 10		 jmp	 SHORT $LN41@symtable_v@2
$LN40@symtable_v@2:
  00a85	8b 84 24 c0 00
	00 00		 mov	 eax, DWORD PTR i$22811[rsp]
  00a8c	ff c0		 inc	 eax
  00a8e	89 84 24 c0 00
	00 00		 mov	 DWORD PTR i$22811[rsp], eax
$LN41@symtable_v@2:
  00a95	48 83 bc 24 c8
	00 00 00 00	 cmp	 QWORD PTR seq$22812[rsp], 0
  00a9e	75 0e		 jne	 SHORT $LN121@symtable_v@2
  00aa0	48 c7 84 24 78
	01 00 00 00 00
	00 00		 mov	 QWORD PTR tv378[rsp], 0
  00aac	eb 13		 jmp	 SHORT $LN122@symtable_v@2
$LN121@symtable_v@2:
  00aae	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR seq$22812[rsp]
  00ab6	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00ab9	48 89 84 24 78
	01 00 00	 mov	 QWORD PTR tv378[rsp], rax
$LN122@symtable_v@2:
  00ac1	48 63 84 24 c0
	00 00 00	 movsxd	 rax, DWORD PTR i$22811[rsp]
  00ac9	48 3b 84 24 78
	01 00 00	 cmp	 rax, QWORD PTR tv378[rsp]
  00ad1	7d 5a		 jge	 SHORT $LN39@symtable_v@2
  00ad3	48 63 84 24 c0
	00 00 00	 movsxd	 rax, DWORD PTR i$22811[rsp]
  00adb	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR seq$22812[rsp]
  00ae3	48 8b 44 c1 08	 mov	 rax, QWORD PTR [rcx+rax*8+8]
  00ae8	48 89 84 24 d0
	00 00 00	 mov	 QWORD PTR elt$22817[rsp], rax
  00af0	48 8b 94 24 d0
	00 00 00	 mov	 rdx, QWORD PTR elt$22817[rsp]
  00af8	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  00b00	e8 00 00 00 00	 call	 symtable_visit_expr
  00b05	85 c0		 test	 eax, eax
  00b07	75 1f		 jne	 SHORT $LN38@symtable_v@2
  00b09	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR st$[rsp]
  00b11	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  00b14	ff c8		 dec	 eax
  00b16	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  00b1e	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  00b21	33 c0		 xor	 eax, eax
  00b23	e9 67 06 00 00	 jmp	 $LN105@symtable_v@2
$LN38@symtable_v@2:
  00b28	e9 58 ff ff ff	 jmp	 $LN40@symtable_v@2
$LN39@symtable_v@2:

; 1396 :         break;

  00b2d	e9 40 06 00 00	 jmp	 $LN102@symtable_v@2
$LN37@symtable_v@2:

; 1397 :     case Call_kind:
; 1398 :         VISIT(st, expr, e->v.Call.func);

  00b32	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR e$[rsp]
  00b3a	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  00b3e	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  00b46	e8 00 00 00 00	 call	 symtable_visit_expr
  00b4b	85 c0		 test	 eax, eax
  00b4d	75 1f		 jne	 SHORT $LN36@symtable_v@2
  00b4f	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR st$[rsp]
  00b57	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  00b5a	ff c8		 dec	 eax
  00b5c	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  00b64	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  00b67	33 c0		 xor	 eax, eax
  00b69	e9 21 06 00 00	 jmp	 $LN105@symtable_v@2
$LN36@symtable_v@2:

; 1399 :         VISIT_SEQ(st, expr, e->v.Call.args);

  00b6e	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR e$[rsp]
  00b76	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00b7a	48 89 84 24 e0
	00 00 00	 mov	 QWORD PTR seq$22823[rsp], rax
  00b82	c7 84 24 d8 00
	00 00 00 00 00
	00		 mov	 DWORD PTR i$22822[rsp], 0
  00b8d	eb 10		 jmp	 SHORT $LN35@symtable_v@2
$LN34@symtable_v@2:
  00b8f	8b 84 24 d8 00
	00 00		 mov	 eax, DWORD PTR i$22822[rsp]
  00b96	ff c0		 inc	 eax
  00b98	89 84 24 d8 00
	00 00		 mov	 DWORD PTR i$22822[rsp], eax
$LN35@symtable_v@2:
  00b9f	48 83 bc 24 e0
	00 00 00 00	 cmp	 QWORD PTR seq$22823[rsp], 0
  00ba8	75 0e		 jne	 SHORT $LN123@symtable_v@2
  00baa	48 c7 84 24 80
	01 00 00 00 00
	00 00		 mov	 QWORD PTR tv403[rsp], 0
  00bb6	eb 13		 jmp	 SHORT $LN124@symtable_v@2
$LN123@symtable_v@2:
  00bb8	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR seq$22823[rsp]
  00bc0	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00bc3	48 89 84 24 80
	01 00 00	 mov	 QWORD PTR tv403[rsp], rax
$LN124@symtable_v@2:
  00bcb	48 63 84 24 d8
	00 00 00	 movsxd	 rax, DWORD PTR i$22822[rsp]
  00bd3	48 3b 84 24 80
	01 00 00	 cmp	 rax, QWORD PTR tv403[rsp]
  00bdb	7d 5a		 jge	 SHORT $LN33@symtable_v@2
  00bdd	48 63 84 24 d8
	00 00 00	 movsxd	 rax, DWORD PTR i$22822[rsp]
  00be5	48 8b 8c 24 e0
	00 00 00	 mov	 rcx, QWORD PTR seq$22823[rsp]
  00bed	48 8b 44 c1 08	 mov	 rax, QWORD PTR [rcx+rax*8+8]
  00bf2	48 89 84 24 e8
	00 00 00	 mov	 QWORD PTR elt$22828[rsp], rax
  00bfa	48 8b 94 24 e8
	00 00 00	 mov	 rdx, QWORD PTR elt$22828[rsp]
  00c02	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  00c0a	e8 00 00 00 00	 call	 symtable_visit_expr
  00c0f	85 c0		 test	 eax, eax
  00c11	75 1f		 jne	 SHORT $LN32@symtable_v@2
  00c13	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR st$[rsp]
  00c1b	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  00c1e	ff c8		 dec	 eax
  00c20	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  00c28	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  00c2b	33 c0		 xor	 eax, eax
  00c2d	e9 5d 05 00 00	 jmp	 $LN105@symtable_v@2
$LN32@symtable_v@2:
  00c32	e9 58 ff ff ff	 jmp	 $LN34@symtable_v@2
$LN33@symtable_v@2:

; 1400 :         VISIT_SEQ(st, keyword, e->v.Call.keywords);

  00c37	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR e$[rsp]
  00c3f	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  00c43	48 89 84 24 f8
	00 00 00	 mov	 QWORD PTR seq$22832[rsp], rax
  00c4b	c7 84 24 f0 00
	00 00 00 00 00
	00		 mov	 DWORD PTR i$22831[rsp], 0
  00c56	eb 10		 jmp	 SHORT $LN31@symtable_v@2
$LN30@symtable_v@2:
  00c58	8b 84 24 f0 00
	00 00		 mov	 eax, DWORD PTR i$22831[rsp]
  00c5f	ff c0		 inc	 eax
  00c61	89 84 24 f0 00
	00 00		 mov	 DWORD PTR i$22831[rsp], eax
$LN31@symtable_v@2:
  00c68	48 83 bc 24 f8
	00 00 00 00	 cmp	 QWORD PTR seq$22832[rsp], 0
  00c71	75 0e		 jne	 SHORT $LN125@symtable_v@2
  00c73	48 c7 84 24 88
	01 00 00 00 00
	00 00		 mov	 QWORD PTR tv420[rsp], 0
  00c7f	eb 13		 jmp	 SHORT $LN126@symtable_v@2
$LN125@symtable_v@2:
  00c81	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR seq$22832[rsp]
  00c89	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00c8c	48 89 84 24 88
	01 00 00	 mov	 QWORD PTR tv420[rsp], rax
$LN126@symtable_v@2:
  00c94	48 63 84 24 f0
	00 00 00	 movsxd	 rax, DWORD PTR i$22831[rsp]
  00c9c	48 3b 84 24 88
	01 00 00	 cmp	 rax, QWORD PTR tv420[rsp]
  00ca4	7d 5a		 jge	 SHORT $LN29@symtable_v@2
  00ca6	48 63 84 24 f0
	00 00 00	 movsxd	 rax, DWORD PTR i$22831[rsp]
  00cae	48 8b 8c 24 f8
	00 00 00	 mov	 rcx, QWORD PTR seq$22832[rsp]
  00cb6	48 8b 44 c1 08	 mov	 rax, QWORD PTR [rcx+rax*8+8]
  00cbb	48 89 84 24 00
	01 00 00	 mov	 QWORD PTR elt$22837[rsp], rax
  00cc3	48 8b 94 24 00
	01 00 00	 mov	 rdx, QWORD PTR elt$22837[rsp]
  00ccb	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  00cd3	e8 00 00 00 00	 call	 symtable_visit_keyword
  00cd8	85 c0		 test	 eax, eax
  00cda	75 1f		 jne	 SHORT $LN28@symtable_v@2
  00cdc	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR st$[rsp]
  00ce4	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  00ce7	ff c8		 dec	 eax
  00ce9	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  00cf1	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  00cf4	33 c0		 xor	 eax, eax
  00cf6	e9 94 04 00 00	 jmp	 $LN105@symtable_v@2
$LN28@symtable_v@2:
  00cfb	e9 58 ff ff ff	 jmp	 $LN30@symtable_v@2
$LN29@symtable_v@2:

; 1401 :         if (e->v.Call.starargs)

  00d00	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR e$[rsp]
  00d08	48 83 78 20 00	 cmp	 QWORD PTR [rax+32], 0
  00d0d	74 3c		 je	 SHORT $LN27@symtable_v@2

; 1402 :             VISIT(st, expr, e->v.Call.starargs);

  00d0f	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR e$[rsp]
  00d17	48 8b 50 20	 mov	 rdx, QWORD PTR [rax+32]
  00d1b	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  00d23	e8 00 00 00 00	 call	 symtable_visit_expr
  00d28	85 c0		 test	 eax, eax
  00d2a	75 1f		 jne	 SHORT $LN26@symtable_v@2
  00d2c	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR st$[rsp]
  00d34	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  00d37	ff c8		 dec	 eax
  00d39	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  00d41	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  00d44	33 c0		 xor	 eax, eax
  00d46	e9 44 04 00 00	 jmp	 $LN105@symtable_v@2
$LN26@symtable_v@2:
$LN27@symtable_v@2:

; 1403 :         if (e->v.Call.kwargs)

  00d4b	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR e$[rsp]
  00d53	48 83 78 28 00	 cmp	 QWORD PTR [rax+40], 0
  00d58	74 3c		 je	 SHORT $LN25@symtable_v@2

; 1404 :             VISIT(st, expr, e->v.Call.kwargs);

  00d5a	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR e$[rsp]
  00d62	48 8b 50 28	 mov	 rdx, QWORD PTR [rax+40]
  00d66	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  00d6e	e8 00 00 00 00	 call	 symtable_visit_expr
  00d73	85 c0		 test	 eax, eax
  00d75	75 1f		 jne	 SHORT $LN24@symtable_v@2
  00d77	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR st$[rsp]
  00d7f	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  00d82	ff c8		 dec	 eax
  00d84	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  00d8c	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  00d8f	33 c0		 xor	 eax, eax
  00d91	e9 f9 03 00 00	 jmp	 $LN105@symtable_v@2
$LN24@symtable_v@2:
$LN25@symtable_v@2:

; 1405 :         break;

  00d96	e9 d7 03 00 00	 jmp	 $LN102@symtable_v@2

; 1406 :     case Num_kind:
; 1407 :     case Str_kind:
; 1408 :     case Bytes_kind:
; 1409 :     case Ellipsis_kind:
; 1410 :         /* Nothing to do here. */
; 1411 :         break;

  00d9b	e9 d2 03 00 00	 jmp	 $LN102@symtable_v@2
$LN22@symtable_v@2:

; 1412 :     /* The following exprs can be assignment targets. */
; 1413 :     case Attribute_kind:
; 1414 :         VISIT(st, expr, e->v.Attribute.value);

  00da0	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR e$[rsp]
  00da8	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  00dac	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  00db4	e8 00 00 00 00	 call	 symtable_visit_expr
  00db9	85 c0		 test	 eax, eax
  00dbb	75 1f		 jne	 SHORT $LN21@symtable_v@2
  00dbd	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR st$[rsp]
  00dc5	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  00dc8	ff c8		 dec	 eax
  00dca	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  00dd2	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  00dd5	33 c0		 xor	 eax, eax
  00dd7	e9 b3 03 00 00	 jmp	 $LN105@symtable_v@2
$LN21@symtable_v@2:

; 1415 :         break;

  00ddc	e9 91 03 00 00	 jmp	 $LN102@symtable_v@2
$LN20@symtable_v@2:

; 1416 :     case Subscript_kind:
; 1417 :         VISIT(st, expr, e->v.Subscript.value);

  00de1	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR e$[rsp]
  00de9	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  00ded	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  00df5	e8 00 00 00 00	 call	 symtable_visit_expr
  00dfa	85 c0		 test	 eax, eax
  00dfc	75 1f		 jne	 SHORT $LN19@symtable_v@2
  00dfe	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR st$[rsp]
  00e06	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  00e09	ff c8		 dec	 eax
  00e0b	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  00e13	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  00e16	33 c0		 xor	 eax, eax
  00e18	e9 72 03 00 00	 jmp	 $LN105@symtable_v@2
$LN19@symtable_v@2:

; 1418 :         VISIT(st, slice, e->v.Subscript.slice);

  00e1d	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR e$[rsp]
  00e25	48 8b 50 10	 mov	 rdx, QWORD PTR [rax+16]
  00e29	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  00e31	e8 00 00 00 00	 call	 symtable_visit_slice
  00e36	85 c0		 test	 eax, eax
  00e38	75 1f		 jne	 SHORT $LN18@symtable_v@2
  00e3a	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR st$[rsp]
  00e42	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  00e45	ff c8		 dec	 eax
  00e47	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  00e4f	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  00e52	33 c0		 xor	 eax, eax
  00e54	e9 36 03 00 00	 jmp	 $LN105@symtable_v@2
$LN18@symtable_v@2:

; 1419 :         break;

  00e59	e9 14 03 00 00	 jmp	 $LN102@symtable_v@2
$LN17@symtable_v@2:

; 1420 :     case Starred_kind:
; 1421 :         VISIT(st, expr, e->v.Starred.value);

  00e5e	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR e$[rsp]
  00e66	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  00e6a	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  00e72	e8 00 00 00 00	 call	 symtable_visit_expr
  00e77	85 c0		 test	 eax, eax
  00e79	75 1f		 jne	 SHORT $LN16@symtable_v@2
  00e7b	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR st$[rsp]
  00e83	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  00e86	ff c8		 dec	 eax
  00e88	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  00e90	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  00e93	33 c0		 xor	 eax, eax
  00e95	e9 f5 02 00 00	 jmp	 $LN105@symtable_v@2
$LN16@symtable_v@2:

; 1422 :         break;

  00e9a	e9 d3 02 00 00	 jmp	 $LN102@symtable_v@2
$LN15@symtable_v@2:

; 1423 :     case Name_kind:
; 1424 :         if (!symtable_add_def(st, e->v.Name.id,
; 1425 :                               e->v.Name.ctx == Load ? USE : DEF_LOCAL))

  00e9f	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR e$[rsp]
  00ea7	83 78 10 01	 cmp	 DWORD PTR [rax+16], 1
  00eab	75 0d		 jne	 SHORT $LN127@symtable_v@2
  00ead	c7 84 24 90 01
	00 00 10 00 00
	00		 mov	 DWORD PTR tv488[rsp], 16
  00eb8	eb 0b		 jmp	 SHORT $LN128@symtable_v@2
$LN127@symtable_v@2:
  00eba	c7 84 24 90 01
	00 00 02 00 00
	00		 mov	 DWORD PTR tv488[rsp], 2
$LN128@symtable_v@2:
  00ec5	44 8b 84 24 90
	01 00 00	 mov	 r8d, DWORD PTR tv488[rsp]
  00ecd	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR e$[rsp]
  00ed5	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  00ed9	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  00ee1	e8 00 00 00 00	 call	 symtable_add_def
  00ee6	85 c0		 test	 eax, eax
  00ee8	75 1f		 jne	 SHORT $LN14@symtable_v@2

; 1426 :             VISIT_QUIT(st, 0);

  00eea	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR st$[rsp]
  00ef2	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  00ef5	ff c8		 dec	 eax
  00ef7	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  00eff	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  00f02	33 c0		 xor	 eax, eax
  00f04	e9 86 02 00 00	 jmp	 $LN105@symtable_v@2
$LN14@symtable_v@2:

; 1427 :         /* Special-case super: it counts as a use of __class__ */
; 1428 :         if (e->v.Name.ctx == Load &&
; 1429 :             st->st_cur->ste_type == FunctionBlock &&
; 1430 :             !PyUnicode_CompareWithASCIIString(e->v.Name.id, "super")) {

  00f09	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR e$[rsp]
  00f11	83 78 10 01	 cmp	 DWORD PTR [rax+16], 1
  00f15	0f 85 be 00 00
	00		 jne	 $LN13@symtable_v@2
  00f1b	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR st$[rsp]
  00f23	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00f27	83 b8 88 00 00
	00 00		 cmp	 DWORD PTR [rax+136], 0
  00f2e	0f 85 a5 00 00
	00		 jne	 $LN13@symtable_v@2
  00f34	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_05MKJDPMKP@super?$AA@
  00f3b	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR e$[rsp]
  00f43	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00f47	e8 00 00 00 00	 call	 PyUnicode_CompareWithASCIIString
  00f4c	85 c0		 test	 eax, eax
  00f4e	0f 85 85 00 00
	00		 jne	 $LN13@symtable_v@2

; 1431 :             if (!GET_IDENTIFIER(__class__) ||
; 1432 :                 !symtable_add_def(st, __class__, USE))

  00f54	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR __class__, 0
  00f5c	74 11		 je	 SHORT $LN129@symtable_v@2
  00f5e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __class__
  00f65	48 89 84 24 98
	01 00 00	 mov	 QWORD PTR tv510[rsp], rax
  00f6d	eb 22		 jmp	 SHORT $LN130@symtable_v@2
$LN129@symtable_v@2:
  00f6f	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_09LFGACEKG@__class__?$AA@
  00f76	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  00f7b	48 89 05 00 00
	00 00		 mov	 QWORD PTR __class__, rax
  00f82	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __class__
  00f89	48 89 84 24 98
	01 00 00	 mov	 QWORD PTR tv510[rsp], rax
$LN130@symtable_v@2:
  00f91	48 83 bc 24 98
	01 00 00 00	 cmp	 QWORD PTR tv510[rsp], 0
  00f9a	74 1e		 je	 SHORT $LN11@symtable_v@2
  00f9c	41 b8 10 00 00
	00		 mov	 r8d, 16
  00fa2	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR __class__
  00fa9	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  00fb1	e8 00 00 00 00	 call	 symtable_add_def
  00fb6	85 c0		 test	 eax, eax
  00fb8	75 1f		 jne	 SHORT $LN12@symtable_v@2
$LN11@symtable_v@2:

; 1433 :                 VISIT_QUIT(st, 0);

  00fba	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR st$[rsp]
  00fc2	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  00fc5	ff c8		 dec	 eax
  00fc7	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  00fcf	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  00fd2	33 c0		 xor	 eax, eax
  00fd4	e9 b6 01 00 00	 jmp	 $LN105@symtable_v@2
$LN12@symtable_v@2:
$LN13@symtable_v@2:

; 1434 :         }
; 1435 :         break;

  00fd9	e9 94 01 00 00	 jmp	 $LN102@symtable_v@2
$LN10@symtable_v@2:

; 1436 :     /* child nodes of List and Tuple will have expr_context set */
; 1437 :     case List_kind:
; 1438 :         VISIT_SEQ(st, expr, e->v.List.elts);

  00fde	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR e$[rsp]
  00fe6	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00fea	48 89 84 24 10
	01 00 00	 mov	 QWORD PTR seq$22860[rsp], rax
  00ff2	c7 84 24 08 01
	00 00 00 00 00
	00		 mov	 DWORD PTR i$22859[rsp], 0
  00ffd	eb 10		 jmp	 SHORT $LN9@symtable_v@2
$LN8@symtable_v@2:
  00fff	8b 84 24 08 01
	00 00		 mov	 eax, DWORD PTR i$22859[rsp]
  01006	ff c0		 inc	 eax
  01008	89 84 24 08 01
	00 00		 mov	 DWORD PTR i$22859[rsp], eax
$LN9@symtable_v@2:
  0100f	48 83 bc 24 10
	01 00 00 00	 cmp	 QWORD PTR seq$22860[rsp], 0
  01018	75 0e		 jne	 SHORT $LN131@symtable_v@2
  0101a	48 c7 84 24 a0
	01 00 00 00 00
	00 00		 mov	 QWORD PTR tv524[rsp], 0
  01026	eb 13		 jmp	 SHORT $LN132@symtable_v@2
$LN131@symtable_v@2:
  01028	48 8b 84 24 10
	01 00 00	 mov	 rax, QWORD PTR seq$22860[rsp]
  01030	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01033	48 89 84 24 a0
	01 00 00	 mov	 QWORD PTR tv524[rsp], rax
$LN132@symtable_v@2:
  0103b	48 63 84 24 08
	01 00 00	 movsxd	 rax, DWORD PTR i$22859[rsp]
  01043	48 3b 84 24 a0
	01 00 00	 cmp	 rax, QWORD PTR tv524[rsp]
  0104b	7d 5a		 jge	 SHORT $LN7@symtable_v@2
  0104d	48 63 84 24 08
	01 00 00	 movsxd	 rax, DWORD PTR i$22859[rsp]
  01055	48 8b 8c 24 10
	01 00 00	 mov	 rcx, QWORD PTR seq$22860[rsp]
  0105d	48 8b 44 c1 08	 mov	 rax, QWORD PTR [rcx+rax*8+8]
  01062	48 89 84 24 18
	01 00 00	 mov	 QWORD PTR elt$22865[rsp], rax
  0106a	48 8b 94 24 18
	01 00 00	 mov	 rdx, QWORD PTR elt$22865[rsp]
  01072	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  0107a	e8 00 00 00 00	 call	 symtable_visit_expr
  0107f	85 c0		 test	 eax, eax
  01081	75 1f		 jne	 SHORT $LN6@symtable_v@2
  01083	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR st$[rsp]
  0108b	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  0108e	ff c8		 dec	 eax
  01090	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  01098	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  0109b	33 c0		 xor	 eax, eax
  0109d	e9 ed 00 00 00	 jmp	 $LN105@symtable_v@2
$LN6@symtable_v@2:
  010a2	e9 58 ff ff ff	 jmp	 $LN8@symtable_v@2
$LN7@symtable_v@2:

; 1439 :         break;

  010a7	e9 c6 00 00 00	 jmp	 $LN102@symtable_v@2
$LN5@symtable_v@2:

; 1440 :     case Tuple_kind:
; 1441 :         VISIT_SEQ(st, expr, e->v.Tuple.elts);

  010ac	48 8b 84 24 c8
	01 00 00	 mov	 rax, QWORD PTR e$[rsp]
  010b4	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  010b8	48 89 84 24 28
	01 00 00	 mov	 QWORD PTR seq$22870[rsp], rax
  010c0	c7 84 24 20 01
	00 00 00 00 00
	00		 mov	 DWORD PTR i$22869[rsp], 0
  010cb	eb 10		 jmp	 SHORT $LN4@symtable_v@2
$LN3@symtable_v@2:
  010cd	8b 84 24 20 01
	00 00		 mov	 eax, DWORD PTR i$22869[rsp]
  010d4	ff c0		 inc	 eax
  010d6	89 84 24 20 01
	00 00		 mov	 DWORD PTR i$22869[rsp], eax
$LN4@symtable_v@2:
  010dd	48 83 bc 24 28
	01 00 00 00	 cmp	 QWORD PTR seq$22870[rsp], 0
  010e6	75 0e		 jne	 SHORT $LN133@symtable_v@2
  010e8	48 c7 84 24 a8
	01 00 00 00 00
	00 00		 mov	 QWORD PTR tv541[rsp], 0
  010f4	eb 13		 jmp	 SHORT $LN134@symtable_v@2
$LN133@symtable_v@2:
  010f6	48 8b 84 24 28
	01 00 00	 mov	 rax, QWORD PTR seq$22870[rsp]
  010fe	48 8b 00	 mov	 rax, QWORD PTR [rax]
  01101	48 89 84 24 a8
	01 00 00	 mov	 QWORD PTR tv541[rsp], rax
$LN134@symtable_v@2:
  01109	48 63 84 24 20
	01 00 00	 movsxd	 rax, DWORD PTR i$22869[rsp]
  01111	48 3b 84 24 a8
	01 00 00	 cmp	 rax, QWORD PTR tv541[rsp]
  01119	7d 57		 jge	 SHORT $LN2@symtable_v@2
  0111b	48 63 84 24 20
	01 00 00	 movsxd	 rax, DWORD PTR i$22869[rsp]
  01123	48 8b 8c 24 28
	01 00 00	 mov	 rcx, QWORD PTR seq$22870[rsp]
  0112b	48 8b 44 c1 08	 mov	 rax, QWORD PTR [rcx+rax*8+8]
  01130	48 89 84 24 30
	01 00 00	 mov	 QWORD PTR elt$22875[rsp], rax
  01138	48 8b 94 24 30
	01 00 00	 mov	 rdx, QWORD PTR elt$22875[rsp]
  01140	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  01148	e8 00 00 00 00	 call	 symtable_visit_expr
  0114d	85 c0		 test	 eax, eax
  0114f	75 1c		 jne	 SHORT $LN1@symtable_v@2
  01151	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR st$[rsp]
  01159	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  0115c	ff c8		 dec	 eax
  0115e	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  01166	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  01169	33 c0		 xor	 eax, eax
  0116b	eb 22		 jmp	 SHORT $LN105@symtable_v@2
$LN1@symtable_v@2:
  0116d	e9 5b ff ff ff	 jmp	 $LN3@symtable_v@2
$LN2@symtable_v@2:
$LN102@symtable_v@2:

; 1442 :         break;
; 1443 :     }
; 1444 :     VISIT_QUIT(st, 1);

  01172	48 8b 84 24 c0
	01 00 00	 mov	 rax, QWORD PTR st$[rsp]
  0117a	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  0117d	ff c8		 dec	 eax
  0117f	48 8b 8c 24 c0
	01 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  01187	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  0118a	b8 01 00 00 00	 mov	 eax, 1
$LN105@symtable_v@2:

; 1445 : }

  0118f	48 81 c4 b8 01
	00 00		 add	 rsp, 440		; 000001b8H
  01196	c3		 ret	 0
  01197	90		 npad	 1
$LN135@symtable_v@2:
  01198	00 00 00 00	 DD	 $LN101@symtable_v@2
  0119c	00 00 00 00	 DD	 $LN96@symtable_v@2
  011a0	00 00 00 00	 DD	 $LN93@symtable_v@2
  011a4	00 00 00 00	 DD	 $LN91@symtable_v@2
  011a8	00 00 00 00	 DD	 $LN74@symtable_v@2
  011ac	00 00 00 00	 DD	 $LN70@symtable_v@2
  011b0	00 00 00 00	 DD	 $LN61@symtable_v@2
  011b4	00 00 00 00	 DD	 $LN54@symtable_v@2
  011b8	00 00 00 00	 DD	 $LN52@symtable_v@2
  011bc	00 00 00 00	 DD	 $LN50@symtable_v@2
  011c0	00 00 00 00	 DD	 $LN56@symtable_v@2
  011c4	00 00 00 00	 DD	 $LN48@symtable_v@2
  011c8	00 00 00 00	 DD	 $LN45@symtable_v@2
  011cc	00 00 00 00	 DD	 $LN43@symtable_v@2
  011d0	00 00 00 00	 DD	 $LN37@symtable_v@2
  011d4	00 00 00 00	 DD	 $LN102@symtable_v@2
  011d8	00 00 00 00	 DD	 $LN102@symtable_v@2
  011dc	00 00 00 00	 DD	 $LN102@symtable_v@2
  011e0	00 00 00 00	 DD	 $LN102@symtable_v@2
  011e4	00 00 00 00	 DD	 $LN22@symtable_v@2
  011e8	00 00 00 00	 DD	 $LN20@symtable_v@2
  011ec	00 00 00 00	 DD	 $LN17@symtable_v@2
  011f0	00 00 00 00	 DD	 $LN15@symtable_v@2
  011f4	00 00 00 00	 DD	 $LN10@symtable_v@2
  011f8	00 00 00 00	 DD	 $LN5@symtable_v@2
symtable_visit_expr ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$symtable_visit_annotations DD imagerel symtable_visit_annotations
	DD	imagerel symtable_visit_annotations+291
	DD	imagerel $unwind$symtable_visit_annotations
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$symtable_visit_annotations DD 010e01H
	DD	0620eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT symtable_visit_annotations
_TEXT	SEGMENT
a$ = 32
st$ = 64
s$ = 72
symtable_visit_annotations PROC				; COMDAT

; 1497 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1498 :     arguments_ty a = s->v.FunctionDef.args;

  0000e	48 8b 44 24 48	 mov	 rax, QWORD PTR s$[rsp]
  00013	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00017	48 89 44 24 20	 mov	 QWORD PTR a$[rsp], rax

; 1499 : 
; 1500 :     if (a->args && !symtable_visit_argannotations(st, a->args))

  0001c	48 8b 44 24 20	 mov	 rax, QWORD PTR a$[rsp]
  00021	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00025	74 1d		 je	 SHORT $LN8@symtable_v@3
  00027	48 8b 44 24 20	 mov	 rax, QWORD PTR a$[rsp]
  0002c	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  0002f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR st$[rsp]
  00034	e8 00 00 00 00	 call	 symtable_visit_argannotations
  00039	85 c0		 test	 eax, eax
  0003b	75 07		 jne	 SHORT $LN8@symtable_v@3

; 1501 :         return 0;

  0003d	33 c0		 xor	 eax, eax
  0003f	e9 da 00 00 00	 jmp	 $LN9@symtable_v@3
$LN8@symtable_v@3:

; 1502 :     if (a->varargannotation)

  00044	48 8b 44 24 20	 mov	 rax, QWORD PTR a$[rsp]
  00049	48 83 78 10 00	 cmp	 QWORD PTR [rax+16], 0
  0004e	74 30		 je	 SHORT $LN7@symtable_v@3

; 1503 :         VISIT(st, expr, a->varargannotation);

  00050	48 8b 44 24 20	 mov	 rax, QWORD PTR a$[rsp]
  00055	48 8b 50 10	 mov	 rdx, QWORD PTR [rax+16]
  00059	48 8b 4c 24 40	 mov	 rcx, QWORD PTR st$[rsp]
  0005e	e8 00 00 00 00	 call	 symtable_visit_expr
  00063	85 c0		 test	 eax, eax
  00065	75 19		 jne	 SHORT $LN6@symtable_v@3
  00067	48 8b 44 24 40	 mov	 rax, QWORD PTR st$[rsp]
  0006c	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  0006f	ff c8		 dec	 eax
  00071	48 8b 4c 24 40	 mov	 rcx, QWORD PTR st$[rsp]
  00076	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  00079	33 c0		 xor	 eax, eax
  0007b	e9 9e 00 00 00	 jmp	 $LN9@symtable_v@3
$LN6@symtable_v@3:
$LN7@symtable_v@3:

; 1504 :     if (a->kwargannotation)

  00080	48 8b 44 24 20	 mov	 rax, QWORD PTR a$[rsp]
  00085	48 83 78 28 00	 cmp	 QWORD PTR [rax+40], 0
  0008a	74 2d		 je	 SHORT $LN5@symtable_v@3

; 1505 :         VISIT(st, expr, a->kwargannotation);

  0008c	48 8b 44 24 20	 mov	 rax, QWORD PTR a$[rsp]
  00091	48 8b 50 28	 mov	 rdx, QWORD PTR [rax+40]
  00095	48 8b 4c 24 40	 mov	 rcx, QWORD PTR st$[rsp]
  0009a	e8 00 00 00 00	 call	 symtable_visit_expr
  0009f	85 c0		 test	 eax, eax
  000a1	75 16		 jne	 SHORT $LN4@symtable_v@3
  000a3	48 8b 44 24 40	 mov	 rax, QWORD PTR st$[rsp]
  000a8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000ab	ff c8		 dec	 eax
  000ad	48 8b 4c 24 40	 mov	 rcx, QWORD PTR st$[rsp]
  000b2	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  000b5	33 c0		 xor	 eax, eax
  000b7	eb 65		 jmp	 SHORT $LN9@symtable_v@3
$LN4@symtable_v@3:
$LN5@symtable_v@3:

; 1506 :     if (a->kwonlyargs && !symtable_visit_argannotations(st, a->kwonlyargs))

  000b9	48 8b 44 24 20	 mov	 rax, QWORD PTR a$[rsp]
  000be	48 83 78 18 00	 cmp	 QWORD PTR [rax+24], 0
  000c3	74 1b		 je	 SHORT $LN3@symtable_v@3
  000c5	48 8b 44 24 20	 mov	 rax, QWORD PTR a$[rsp]
  000ca	48 8b 50 18	 mov	 rdx, QWORD PTR [rax+24]
  000ce	48 8b 4c 24 40	 mov	 rcx, QWORD PTR st$[rsp]
  000d3	e8 00 00 00 00	 call	 symtable_visit_argannotations
  000d8	85 c0		 test	 eax, eax
  000da	75 04		 jne	 SHORT $LN3@symtable_v@3

; 1507 :         return 0;

  000dc	33 c0		 xor	 eax, eax
  000de	eb 3e		 jmp	 SHORT $LN9@symtable_v@3
$LN3@symtable_v@3:

; 1508 :     if (s->v.FunctionDef.returns)

  000e0	48 8b 44 24 48	 mov	 rax, QWORD PTR s$[rsp]
  000e5	48 83 78 28 00	 cmp	 QWORD PTR [rax+40], 0
  000ea	74 2d		 je	 SHORT $LN2@symtable_v@3

; 1509 :         VISIT(st, expr, s->v.FunctionDef.returns);

  000ec	48 8b 44 24 48	 mov	 rax, QWORD PTR s$[rsp]
  000f1	48 8b 50 28	 mov	 rdx, QWORD PTR [rax+40]
  000f5	48 8b 4c 24 40	 mov	 rcx, QWORD PTR st$[rsp]
  000fa	e8 00 00 00 00	 call	 symtable_visit_expr
  000ff	85 c0		 test	 eax, eax
  00101	75 16		 jne	 SHORT $LN1@symtable_v@3
  00103	48 8b 44 24 40	 mov	 rax, QWORD PTR st$[rsp]
  00108	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  0010b	ff c8		 dec	 eax
  0010d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR st$[rsp]
  00112	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  00115	33 c0		 xor	 eax, eax
  00117	eb 05		 jmp	 SHORT $LN9@symtable_v@3
$LN1@symtable_v@3:
$LN2@symtable_v@3:

; 1510 :     return 1;

  00119	b8 01 00 00 00	 mov	 eax, 1
$LN9@symtable_v@3:

; 1511 : }

  0011e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00122	c3		 ret	 0
symtable_visit_annotations ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$symtable_visit_argannotations DD imagerel symtable_visit_argannotations
	DD	imagerel symtable_visit_argannotations+188
	DD	imagerel $unwind$symtable_visit_argannotations
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$symtable_visit_argannotations DD 010e01H
	DD	0820eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT symtable_visit_argannotations
_TEXT	SEGMENT
i$ = 32
arg$22915 = 40
tv68 = 48
st$ = 80
args$ = 88
symtable_visit_argannotations PROC			; COMDAT

; 1480 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1481 :     int i;
; 1482 : 
; 1483 :     if (!args)

  0000e	48 83 7c 24 58
	00		 cmp	 QWORD PTR args$[rsp], 0
  00014	75 0a		 jne	 SHORT $LN6@symtable_v@4

; 1484 :         return -1;

  00016	b8 ff ff ff ff	 mov	 eax, -1
  0001b	e9 97 00 00 00	 jmp	 $LN7@symtable_v@4
$LN6@symtable_v@4:

; 1485 : 
; 1486 :     for (i = 0; i < asdl_seq_LEN(args); i++) {

  00020	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00028	eb 0a		 jmp	 SHORT $LN5@symtable_v@4
$LN4@symtable_v@4:
  0002a	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  0002e	ff c0		 inc	 eax
  00030	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN5@symtable_v@4:
  00034	48 83 7c 24 58
	00		 cmp	 QWORD PTR args$[rsp], 0
  0003a	75 0b		 jne	 SHORT $LN9@symtable_v@4
  0003c	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR tv68[rsp], 0
  00045	eb 0d		 jmp	 SHORT $LN10@symtable_v@4
$LN9@symtable_v@4:
  00047	48 8b 44 24 58	 mov	 rax, QWORD PTR args$[rsp]
  0004c	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0004f	48 89 44 24 30	 mov	 QWORD PTR tv68[rsp], rax
$LN10@symtable_v@4:
  00054	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  00059	48 3b 44 24 30	 cmp	 rax, QWORD PTR tv68[rsp]
  0005e	7d 52		 jge	 SHORT $LN3@symtable_v@4

; 1487 :         arg_ty arg = (arg_ty)asdl_seq_GET(args, i);

  00060	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  00065	48 8b 4c 24 58	 mov	 rcx, QWORD PTR args$[rsp]
  0006a	48 8b 44 c1 08	 mov	 rax, QWORD PTR [rcx+rax*8+8]
  0006f	48 89 44 24 28	 mov	 QWORD PTR arg$22915[rsp], rax

; 1488 :         if (arg->annotation)

  00074	48 8b 44 24 28	 mov	 rax, QWORD PTR arg$22915[rsp]
  00079	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  0007e	74 2d		 je	 SHORT $LN2@symtable_v@4

; 1489 :             VISIT(st, expr, arg->annotation);

  00080	48 8b 44 24 28	 mov	 rax, QWORD PTR arg$22915[rsp]
  00085	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  00089	48 8b 4c 24 50	 mov	 rcx, QWORD PTR st$[rsp]
  0008e	e8 00 00 00 00	 call	 symtable_visit_expr
  00093	85 c0		 test	 eax, eax
  00095	75 16		 jne	 SHORT $LN1@symtable_v@4
  00097	48 8b 44 24 50	 mov	 rax, QWORD PTR st$[rsp]
  0009c	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  0009f	ff c8		 dec	 eax
  000a1	48 8b 4c 24 50	 mov	 rcx, QWORD PTR st$[rsp]
  000a6	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  000a9	33 c0		 xor	 eax, eax
  000ab	eb 0a		 jmp	 SHORT $LN7@symtable_v@4
$LN1@symtable_v@4:
$LN2@symtable_v@4:

; 1490 :     }

  000ad	e9 78 ff ff ff	 jmp	 $LN4@symtable_v@4
$LN3@symtable_v@4:

; 1491 : 
; 1492 :     return 1;

  000b2	b8 01 00 00 00	 mov	 eax, 1
$LN7@symtable_v@4:

; 1493 : }

  000b7	48 83 c4 48	 add	 rsp, 72			; 00000048H
  000bb	c3		 ret	 0
symtable_visit_argannotations ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$symtable_visit_arguments DD imagerel symtable_visit_arguments
	DD	imagerel symtable_visit_arguments+262
	DD	imagerel $unwind$symtable_visit_arguments
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$symtable_visit_arguments DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT symtable_visit_arguments
_TEXT	SEGMENT
st$ = 48
a$ = 56
symtable_visit_arguments PROC				; COMDAT

; 1515 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1516 :     /* skip default arguments inside function block
; 1517 :        XXX should ast be different?
; 1518 :     */
; 1519 :     if (a->args && !symtable_visit_params(st, a->args))

  0000e	48 8b 44 24 38	 mov	 rax, QWORD PTR a$[rsp]
  00013	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00017	74 1d		 je	 SHORT $LN6@symtable_v@5
  00019	48 8b 44 24 38	 mov	 rax, QWORD PTR a$[rsp]
  0001e	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00021	48 8b 4c 24 30	 mov	 rcx, QWORD PTR st$[rsp]
  00026	e8 00 00 00 00	 call	 symtable_visit_params
  0002b	85 c0		 test	 eax, eax
  0002d	75 07		 jne	 SHORT $LN6@symtable_v@5

; 1520 :         return 0;

  0002f	33 c0		 xor	 eax, eax
  00031	e9 cb 00 00 00	 jmp	 $LN7@symtable_v@5
$LN6@symtable_v@5:

; 1521 :     if (a->kwonlyargs && !symtable_visit_params(st, a->kwonlyargs))

  00036	48 8b 44 24 38	 mov	 rax, QWORD PTR a$[rsp]
  0003b	48 83 78 18 00	 cmp	 QWORD PTR [rax+24], 0
  00040	74 1e		 je	 SHORT $LN5@symtable_v@5
  00042	48 8b 44 24 38	 mov	 rax, QWORD PTR a$[rsp]
  00047	48 8b 50 18	 mov	 rdx, QWORD PTR [rax+24]
  0004b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR st$[rsp]
  00050	e8 00 00 00 00	 call	 symtable_visit_params
  00055	85 c0		 test	 eax, eax
  00057	75 07		 jne	 SHORT $LN5@symtable_v@5

; 1522 :         return 0;

  00059	33 c0		 xor	 eax, eax
  0005b	e9 a1 00 00 00	 jmp	 $LN7@symtable_v@5
$LN5@symtable_v@5:

; 1523 :     if (a->vararg) {

  00060	48 8b 44 24 38	 mov	 rax, QWORD PTR a$[rsp]
  00065	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  0006a	74 42		 je	 SHORT $LN4@symtable_v@5

; 1524 :         if (!symtable_add_def(st, a->vararg, DEF_PARAM))

  0006c	41 b8 04 00 00
	00		 mov	 r8d, 4
  00072	48 8b 44 24 38	 mov	 rax, QWORD PTR a$[rsp]
  00077	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  0007b	48 8b 4c 24 30	 mov	 rcx, QWORD PTR st$[rsp]
  00080	e8 00 00 00 00	 call	 symtable_add_def
  00085	85 c0		 test	 eax, eax
  00087	75 04		 jne	 SHORT $LN3@symtable_v@5

; 1525 :             return 0;

  00089	33 c0		 xor	 eax, eax
  0008b	eb 74		 jmp	 SHORT $LN7@symtable_v@5
$LN3@symtable_v@5:

; 1526 :         st->st_cur->ste_varargs = 1;

  0008d	48 8b 44 24 30	 mov	 rax, QWORD PTR st$[rsp]
  00092	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00096	8b 80 94 00 00
	00		 mov	 eax, DWORD PTR [rax+148]
  0009c	83 c8 08	 or	 eax, 8
  0009f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR st$[rsp]
  000a4	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  000a8	89 81 94 00 00
	00		 mov	 DWORD PTR [rcx+148], eax
$LN4@symtable_v@5:

; 1527 :     }
; 1528 :     if (a->kwarg) {

  000ae	48 8b 44 24 38	 mov	 rax, QWORD PTR a$[rsp]
  000b3	48 83 78 20 00	 cmp	 QWORD PTR [rax+32], 0
  000b8	74 42		 je	 SHORT $LN2@symtable_v@5

; 1529 :         if (!symtable_add_def(st, a->kwarg, DEF_PARAM))

  000ba	41 b8 04 00 00
	00		 mov	 r8d, 4
  000c0	48 8b 44 24 38	 mov	 rax, QWORD PTR a$[rsp]
  000c5	48 8b 50 20	 mov	 rdx, QWORD PTR [rax+32]
  000c9	48 8b 4c 24 30	 mov	 rcx, QWORD PTR st$[rsp]
  000ce	e8 00 00 00 00	 call	 symtable_add_def
  000d3	85 c0		 test	 eax, eax
  000d5	75 04		 jne	 SHORT $LN1@symtable_v@5

; 1530 :             return 0;

  000d7	33 c0		 xor	 eax, eax
  000d9	eb 26		 jmp	 SHORT $LN7@symtable_v@5
$LN1@symtable_v@5:

; 1531 :         st->st_cur->ste_varkeywords = 1;

  000db	48 8b 44 24 30	 mov	 rax, QWORD PTR st$[rsp]
  000e0	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  000e4	8b 80 94 00 00
	00		 mov	 eax, DWORD PTR [rax+148]
  000ea	83 c8 10	 or	 eax, 16
  000ed	48 8b 4c 24 30	 mov	 rcx, QWORD PTR st$[rsp]
  000f2	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  000f6	89 81 94 00 00
	00		 mov	 DWORD PTR [rcx+148], eax
$LN2@symtable_v@5:

; 1532 :     }
; 1533 :     return 1;

  000fc	b8 01 00 00 00	 mov	 eax, 1
$LN7@symtable_v@5:

; 1534 : }

  00101	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00105	c3		 ret	 0
symtable_visit_arguments ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$symtable_visit_params DD imagerel symtable_visit_params
	DD	imagerel symtable_visit_params+157
	DD	imagerel $unwind$symtable_visit_params
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$symtable_visit_params DD 010e01H
	DD	0820eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT symtable_visit_params
_TEXT	SEGMENT
i$ = 32
arg$22901 = 40
tv68 = 48
st$ = 80
args$ = 88
symtable_visit_params PROC				; COMDAT

; 1463 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1464 :     int i;
; 1465 : 
; 1466 :     if (!args)

  0000e	48 83 7c 24 58
	00		 cmp	 QWORD PTR args$[rsp], 0
  00014	75 07		 jne	 SHORT $LN5@symtable_v@6

; 1467 :         return -1;

  00016	b8 ff ff ff ff	 mov	 eax, -1
  0001b	eb 7b		 jmp	 SHORT $LN6@symtable_v@6
$LN5@symtable_v@6:

; 1468 : 
; 1469 :     for (i = 0; i < asdl_seq_LEN(args); i++) {

  0001d	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$[rsp], 0
  00025	eb 0a		 jmp	 SHORT $LN4@symtable_v@6
$LN3@symtable_v@6:
  00027	8b 44 24 20	 mov	 eax, DWORD PTR i$[rsp]
  0002b	ff c0		 inc	 eax
  0002d	89 44 24 20	 mov	 DWORD PTR i$[rsp], eax
$LN4@symtable_v@6:
  00031	48 83 7c 24 58
	00		 cmp	 QWORD PTR args$[rsp], 0
  00037	75 0b		 jne	 SHORT $LN8@symtable_v@6
  00039	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR tv68[rsp], 0
  00042	eb 0d		 jmp	 SHORT $LN9@symtable_v@6
$LN8@symtable_v@6:
  00044	48 8b 44 24 58	 mov	 rax, QWORD PTR args$[rsp]
  00049	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0004c	48 89 44 24 30	 mov	 QWORD PTR tv68[rsp], rax
$LN9@symtable_v@6:
  00051	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  00056	48 3b 44 24 30	 cmp	 rax, QWORD PTR tv68[rsp]
  0005b	7d 36		 jge	 SHORT $LN2@symtable_v@6

; 1470 :         arg_ty arg = (arg_ty)asdl_seq_GET(args, i);

  0005d	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$[rsp]
  00062	48 8b 4c 24 58	 mov	 rcx, QWORD PTR args$[rsp]
  00067	48 8b 44 c1 08	 mov	 rax, QWORD PTR [rcx+rax*8+8]
  0006c	48 89 44 24 28	 mov	 QWORD PTR arg$22901[rsp], rax

; 1471 :         if (!symtable_add_def(st, arg->arg, DEF_PARAM))

  00071	41 b8 04 00 00
	00		 mov	 r8d, 4
  00077	48 8b 44 24 28	 mov	 rax, QWORD PTR arg$22901[rsp]
  0007c	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  0007f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR st$[rsp]
  00084	e8 00 00 00 00	 call	 symtable_add_def
  00089	85 c0		 test	 eax, eax
  0008b	75 04		 jne	 SHORT $LN1@symtable_v@6

; 1472 :             return 0;

  0008d	33 c0		 xor	 eax, eax
  0008f	eb 07		 jmp	 SHORT $LN6@symtable_v@6
$LN1@symtable_v@6:

; 1473 :     }

  00091	eb 94		 jmp	 SHORT $LN3@symtable_v@6
$LN2@symtable_v@6:

; 1474 : 
; 1475 :     return 1;

  00093	b8 01 00 00 00	 mov	 eax, 1
$LN6@symtable_v@6:

; 1476 : }

  00098	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0009c	c3		 ret	 0
symtable_visit_params ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$symtable_visit_excepthandler DD imagerel symtable_visit_excepthandler
	DD	imagerel symtable_visit_excepthandler+273
	DD	imagerel $unwind$symtable_visit_excepthandler
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$symtable_visit_excepthandler DD 010e01H
	DD	0820eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT symtable_visit_excepthandler
_TEXT	SEGMENT
i$22953 = 32
seq$22954 = 40
elt$22959 = 48
tv86 = 56
st$ = 80
eh$ = 88
symtable_visit_excepthandler PROC			; COMDAT

; 1539 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1540 :     if (eh->v.ExceptHandler.type)

  0000e	48 8b 44 24 58	 mov	 rax, QWORD PTR eh$[rsp]
  00013	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00018	74 30		 je	 SHORT $LN8@symtable_v@7

; 1541 :         VISIT(st, expr, eh->v.ExceptHandler.type);

  0001a	48 8b 44 24 58	 mov	 rax, QWORD PTR eh$[rsp]
  0001f	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  00023	48 8b 4c 24 50	 mov	 rcx, QWORD PTR st$[rsp]
  00028	e8 00 00 00 00	 call	 symtable_visit_expr
  0002d	85 c0		 test	 eax, eax
  0002f	75 19		 jne	 SHORT $LN7@symtable_v@7
  00031	48 8b 44 24 50	 mov	 rax, QWORD PTR st$[rsp]
  00036	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  00039	ff c8		 dec	 eax
  0003b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR st$[rsp]
  00040	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  00043	33 c0		 xor	 eax, eax
  00045	e9 c2 00 00 00	 jmp	 $LN9@symtable_v@7
$LN7@symtable_v@7:
$LN8@symtable_v@7:

; 1542 :     if (eh->v.ExceptHandler.name)

  0004a	48 8b 44 24 58	 mov	 rax, QWORD PTR eh$[rsp]
  0004f	48 83 78 10 00	 cmp	 QWORD PTR [rax+16], 0
  00054	74 24		 je	 SHORT $LN6@symtable_v@7

; 1543 :         if (!symtable_add_def(st, eh->v.ExceptHandler.name, DEF_LOCAL))

  00056	41 b8 02 00 00
	00		 mov	 r8d, 2
  0005c	48 8b 44 24 58	 mov	 rax, QWORD PTR eh$[rsp]
  00061	48 8b 50 10	 mov	 rdx, QWORD PTR [rax+16]
  00065	48 8b 4c 24 50	 mov	 rcx, QWORD PTR st$[rsp]
  0006a	e8 00 00 00 00	 call	 symtable_add_def
  0006f	85 c0		 test	 eax, eax
  00071	75 07		 jne	 SHORT $LN5@symtable_v@7

; 1544 :             return 0;

  00073	33 c0		 xor	 eax, eax
  00075	e9 92 00 00 00	 jmp	 $LN9@symtable_v@7
$LN5@symtable_v@7:
$LN6@symtable_v@7:

; 1545 :     VISIT_SEQ(st, stmt, eh->v.ExceptHandler.body);

  0007a	48 8b 44 24 58	 mov	 rax, QWORD PTR eh$[rsp]
  0007f	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  00083	48 89 44 24 28	 mov	 QWORD PTR seq$22954[rsp], rax
  00088	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$22953[rsp], 0
  00090	eb 0a		 jmp	 SHORT $LN4@symtable_v@7
$LN3@symtable_v@7:
  00092	8b 44 24 20	 mov	 eax, DWORD PTR i$22953[rsp]
  00096	ff c0		 inc	 eax
  00098	89 44 24 20	 mov	 DWORD PTR i$22953[rsp], eax
$LN4@symtable_v@7:
  0009c	48 83 7c 24 28
	00		 cmp	 QWORD PTR seq$22954[rsp], 0
  000a2	75 0b		 jne	 SHORT $LN11@symtable_v@7
  000a4	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR tv86[rsp], 0
  000ad	eb 0d		 jmp	 SHORT $LN12@symtable_v@7
$LN11@symtable_v@7:
  000af	48 8b 44 24 28	 mov	 rax, QWORD PTR seq$22954[rsp]
  000b4	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000b7	48 89 44 24 38	 mov	 QWORD PTR tv86[rsp], rax
$LN12@symtable_v@7:
  000bc	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$22953[rsp]
  000c1	48 3b 44 24 38	 cmp	 rax, QWORD PTR tv86[rsp]
  000c6	7d 3f		 jge	 SHORT $LN2@symtable_v@7
  000c8	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$22953[rsp]
  000cd	48 8b 4c 24 28	 mov	 rcx, QWORD PTR seq$22954[rsp]
  000d2	48 8b 44 c1 08	 mov	 rax, QWORD PTR [rcx+rax*8+8]
  000d7	48 89 44 24 30	 mov	 QWORD PTR elt$22959[rsp], rax
  000dc	48 8b 54 24 30	 mov	 rdx, QWORD PTR elt$22959[rsp]
  000e1	48 8b 4c 24 50	 mov	 rcx, QWORD PTR st$[rsp]
  000e6	e8 00 00 00 00	 call	 symtable_visit_stmt
  000eb	85 c0		 test	 eax, eax
  000ed	75 16		 jne	 SHORT $LN1@symtable_v@7
  000ef	48 8b 44 24 50	 mov	 rax, QWORD PTR st$[rsp]
  000f4	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000f7	ff c8		 dec	 eax
  000f9	48 8b 4c 24 50	 mov	 rcx, QWORD PTR st$[rsp]
  000fe	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  00101	33 c0		 xor	 eax, eax
  00103	eb 07		 jmp	 SHORT $LN9@symtable_v@7
$LN1@symtable_v@7:
  00105	eb 8b		 jmp	 SHORT $LN3@symtable_v@7
$LN2@symtable_v@7:

; 1546 :     return 1;

  00107	b8 01 00 00 00	 mov	 eax, 1
$LN9@symtable_v@7:

; 1547 : }

  0010c	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00110	c3		 ret	 0
symtable_visit_excepthandler ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$symtable_visit_withitem DD imagerel symtable_visit_withitem
	DD	imagerel symtable_visit_withitem+125
	DD	imagerel $unwind$symtable_visit_withitem
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$symtable_visit_withitem DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT symtable_visit_withitem
_TEXT	SEGMENT
st$ = 48
item$ = 56
symtable_visit_withitem PROC				; COMDAT

; 1551 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1552 :     VISIT(st, expr, item->context_expr);

  0000e	48 8b 44 24 38	 mov	 rax, QWORD PTR item$[rsp]
  00013	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00016	48 8b 4c 24 30	 mov	 rcx, QWORD PTR st$[rsp]
  0001b	e8 00 00 00 00	 call	 symtable_visit_expr
  00020	85 c0		 test	 eax, eax
  00022	75 16		 jne	 SHORT $LN3@symtable_v@8
  00024	48 8b 44 24 30	 mov	 rax, QWORD PTR st$[rsp]
  00029	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  0002c	ff c8		 dec	 eax
  0002e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR st$[rsp]
  00033	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  00036	33 c0		 xor	 eax, eax
  00038	eb 3e		 jmp	 SHORT $LN4@symtable_v@8
$LN3@symtable_v@8:

; 1553 :     if (item->optional_vars) {

  0003a	48 8b 44 24 38	 mov	 rax, QWORD PTR item$[rsp]
  0003f	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00044	74 2d		 je	 SHORT $LN2@symtable_v@8

; 1554 :         VISIT(st, expr, item->optional_vars);

  00046	48 8b 44 24 38	 mov	 rax, QWORD PTR item$[rsp]
  0004b	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  0004f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR st$[rsp]
  00054	e8 00 00 00 00	 call	 symtable_visit_expr
  00059	85 c0		 test	 eax, eax
  0005b	75 16		 jne	 SHORT $LN1@symtable_v@8
  0005d	48 8b 44 24 30	 mov	 rax, QWORD PTR st$[rsp]
  00062	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  00065	ff c8		 dec	 eax
  00067	48 8b 4c 24 30	 mov	 rcx, QWORD PTR st$[rsp]
  0006c	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  0006f	33 c0		 xor	 eax, eax
  00071	eb 05		 jmp	 SHORT $LN4@symtable_v@8
$LN1@symtable_v@8:
$LN2@symtable_v@8:

; 1555 :     }
; 1556 :     return 1;

  00073	b8 01 00 00 00	 mov	 eax, 1
$LN4@symtable_v@8:

; 1557 : }

  00078	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0007c	c3		 ret	 0
symtable_visit_withitem ENDP
_TEXT	ENDS
PUBLIC	??_C@_0CG@JHBDPOHA@import?5?$CK?5only?5allowed?5at?5module?5@ ; `string'
PUBLIC	??_C@_01NBENCBCI@?$CK?$AA@			; `string'
PUBLIC	??_C@_1DC@BCOPIKLM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAn?$AAa?$AAm?$AAe?$AA?$CJ?$AA?$AA@ ; `string'
PUBLIC	??_C@_1CM@NNIOODFF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAn?$AAa?$AAm?$AAe?$AA?$CJ?$AA?$AA@ ; `string'
EXTRN	PyUnicode_Substring:PROC
EXTRN	PyUnicode_FindChar:PROC
;	COMDAT pdata
pdata	SEGMENT
$pdata$symtable_visit_alias DD imagerel symtable_visit_alias
	DD	imagerel symtable_visit_alias+504
	DD	imagerel $unwind$symtable_visit_alias
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$symtable_visit_alias DD 010e01H
	DD	0c20eH
xdata	ENDS
;	COMDAT ??_C@_0CG@JHBDPOHA@import?5?$CK?5only?5allowed?5at?5module?5@
CONST	SEGMENT
??_C@_0CG@JHBDPOHA@import?5?$CK?5only?5allowed?5at?5module?5@ DB 'import '
	DB	'* only allowed at module level', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_01NBENCBCI@?$CK?$AA@
CONST	SEGMENT
??_C@_01NBENCBCI@?$CK?$AA@ DB '*', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1DC@BCOPIKLM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAn?$AAa?$AAm?$AAe?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1DC@BCOPIKLM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAn?$AAa?$AAm?$AAe?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'I', 00H, 'S', 00H, '_', 00H, 'R'
	DB	00H, 'E', 00H, 'A', 00H, 'D', 00H, 'Y', 00H, '(', 00H, 'n', 00H
	DB	'a', 00H, 'm', 00H, 'e', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_1CM@NNIOODFF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAn?$AAa?$AAm?$AAe?$AA?$CJ?$AA?$AA@
CONST	SEGMENT
??_C@_1CM@NNIOODFF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAn?$AAa?$AAm?$AAe?$AA?$CJ?$AA?$AA@ DB 'P'
	DB	00H, 'y', 00H, 'U', 00H, 'n', 00H, 'i', 00H, 'c', 00H, 'o', 00H
	DB	'd', 00H, 'e', 00H, '_', 00H, 'C', 00H, 'h', 00H, 'e', 00H, 'c'
	DB	00H, 'k', 00H, '(', 00H, 'n', 00H, 'a', 00H, 'm', 00H, 'e', 00H
	DB	')', 00H, 00H, 00H				; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT symtable_visit_alias
_TEXT	SEGMENT
dot$ = 48
name$ = 56
store_name$ = 64
r$22992 = 72
lineno$22996 = 76
col_offset$22997 = 80
tv67 = 88
st$ = 112
a$ = 120
symtable_visit_alias PROC				; COMDAT

; 1562 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 68	 sub	 rsp, 104		; 00000068H

; 1563 :     /* Compute store_name, the name actually bound by the import
; 1564 :        operation.  It is different than a->name when a->name is a
; 1565 :        dotted package name (e.g. spam.eggs)
; 1566 :     */
; 1567 :     PyObject *store_name;
; 1568 :     PyObject *name = (a->asname == NULL) ? a->name : a->asname;

  0000e	48 8b 44 24 78	 mov	 rax, QWORD PTR a$[rsp]
  00013	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00018	75 0f		 jne	 SHORT $LN9@symtable_v@9
  0001a	48 8b 44 24 78	 mov	 rax, QWORD PTR a$[rsp]
  0001f	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00022	48 89 44 24 58	 mov	 QWORD PTR tv67[rsp], rax
  00027	eb 0e		 jmp	 SHORT $LN10@symtable_v@9
$LN9@symtable_v@9:
  00029	48 8b 44 24 78	 mov	 rax, QWORD PTR a$[rsp]
  0002e	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00032	48 89 44 24 58	 mov	 QWORD PTR tv67[rsp], rax
$LN10@symtable_v@9:
  00037	48 8b 44 24 58	 mov	 rax, QWORD PTR tv67[rsp]
  0003c	48 89 44 24 38	 mov	 QWORD PTR name$[rsp], rax

; 1569 :     Py_ssize_t dot = PyUnicode_FindChar(name, '.', 0,
; 1570 :                                         PyUnicode_GET_LENGTH(name), 1);

  00041	48 8b 44 24 38	 mov	 rax, QWORD PTR name$[rsp]
  00046	48 8b 40 58	 mov	 rax, QWORD PTR [rax+88]
  0004a	8b 80 00 01 00
	00		 mov	 eax, DWORD PTR [rax+256]
  00050	25 00 00 00 10	 and	 eax, 268435456		; 10000000H
  00055	85 c0		 test	 eax, eax
  00057	75 1c		 jne	 SHORT $LN11@symtable_v@9
  00059	41 b8 22 06 00
	00		 mov	 r8d, 1570		; 00000622H
  0005f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CK@FBNLAPOG@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAs?$AAy?$AAm?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  00066	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1CM@NNIOODFF@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAC?$AAh?$AAe?$AAc?$AAk?$AA?$CI?$AAn?$AAa?$AAm?$AAe?$AA?$CJ?$AA?$AA@
  0006d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  00073	33 c0		 xor	 eax, eax
$LN11@symtable_v@9:
  00075	48 8b 44 24 38	 mov	 rax, QWORD PTR name$[rsp]
  0007a	8b 40 70	 mov	 eax, DWORD PTR [rax+112]
  0007d	c1 e8 07	 shr	 eax, 7
  00080	83 e0 01	 and	 eax, 1
  00083	85 c0		 test	 eax, eax
  00085	75 1c		 jne	 SHORT $LN12@symtable_v@9
  00087	41 b8 22 06 00
	00		 mov	 r8d, 1570		; 00000622H
  0008d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_1CK@FBNLAPOG@?$AA?4?$AA?4?$AA?2?$AAP?$AAy?$AAt?$AAh?$AAo?$AAn?$AA?2?$AAs?$AAy?$AAm?$AAt?$AAa?$AAb?$AAl?$AAe?$AA?4?$AAc?$AA?$AA@
  00094	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_1DC@BCOPIKLM@?$AAP?$AAy?$AAU?$AAn?$AAi?$AAc?$AAo?$AAd?$AAe?$AA_?$AAI?$AAS?$AA_?$AAR?$AAE?$AAA?$AAD?$AAY?$AA?$CI?$AAn?$AAa?$AAm?$AAe?$AA?$CJ?$AA?$AA@
  0009b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp__wassert
  000a1	33 c0		 xor	 eax, eax
$LN12@symtable_v@9:
  000a3	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR [rsp+32], 1
  000ab	48 8b 44 24 38	 mov	 rax, QWORD PTR name$[rsp]
  000b0	4c 8b 48 60	 mov	 r9, QWORD PTR [rax+96]
  000b4	45 33 c0	 xor	 r8d, r8d
  000b7	ba 2e 00 00 00	 mov	 edx, 46			; 0000002eH
  000bc	48 8b 4c 24 38	 mov	 rcx, QWORD PTR name$[rsp]
  000c1	e8 00 00 00 00	 call	 PyUnicode_FindChar
  000c6	48 89 44 24 30	 mov	 QWORD PTR dot$[rsp], rax

; 1571 :     if (dot != -1) {

  000cb	48 83 7c 24 30
	ff		 cmp	 QWORD PTR dot$[rsp], -1
  000d1	74 27		 je	 SHORT $LN6@symtable_v@9

; 1572 :         store_name = PyUnicode_Substring(name, 0, dot);

  000d3	4c 8b 44 24 30	 mov	 r8, QWORD PTR dot$[rsp]
  000d8	33 d2		 xor	 edx, edx
  000da	48 8b 4c 24 38	 mov	 rcx, QWORD PTR name$[rsp]
  000df	e8 00 00 00 00	 call	 PyUnicode_Substring
  000e4	48 89 44 24 40	 mov	 QWORD PTR store_name$[rsp], rax

; 1573 :         if (!store_name)

  000e9	48 83 7c 24 40
	00		 cmp	 QWORD PTR store_name$[rsp], 0
  000ef	75 07		 jne	 SHORT $LN5@symtable_v@9

; 1574 :             return 0;

  000f1	33 c0		 xor	 eax, eax
  000f3	e9 fb 00 00 00	 jmp	 $LN7@symtable_v@9
$LN5@symtable_v@9:

; 1575 :     }
; 1576 :     else {

  000f8	eb 14		 jmp	 SHORT $LN4@symtable_v@9
$LN6@symtable_v@9:

; 1577 :         store_name = name;

  000fa	48 8b 44 24 38	 mov	 rax, QWORD PTR name$[rsp]
  000ff	48 89 44 24 40	 mov	 QWORD PTR store_name$[rsp], rax

; 1578 :         Py_INCREF(store_name);

  00104	48 8b 4c 24 40	 mov	 rcx, QWORD PTR store_name$[rsp]
  00109	e8 00 00 00 00	 call	 _Py_IncRef
$LN4@symtable_v@9:

; 1579 :     }
; 1580 :     if (PyUnicode_CompareWithASCIIString(name, "*")) {

  0010e	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_01NBENCBCI@?$CK?$AA@
  00115	48 8b 4c 24 38	 mov	 rcx, QWORD PTR name$[rsp]
  0011a	e8 00 00 00 00	 call	 PyUnicode_CompareWithASCIIString
  0011f	85 c0		 test	 eax, eax
  00121	74 31		 je	 SHORT $LN3@symtable_v@9

; 1581 :         int r = symtable_add_def(st, store_name, DEF_IMPORT);

  00123	41 b8 80 00 00
	00		 mov	 r8d, 128		; 00000080H
  00129	48 8b 54 24 40	 mov	 rdx, QWORD PTR store_name$[rsp]
  0012e	48 8b 4c 24 70	 mov	 rcx, QWORD PTR st$[rsp]
  00133	e8 00 00 00 00	 call	 symtable_add_def
  00138	89 44 24 48	 mov	 DWORD PTR r$22992[rsp], eax

; 1582 :         Py_DECREF(store_name);

  0013c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR store_name$[rsp]
  00141	e8 00 00 00 00	 call	 _Py_DecRef

; 1583 :         return r;

  00146	8b 44 24 48	 mov	 eax, DWORD PTR r$22992[rsp]
  0014a	e9 a4 00 00 00	 jmp	 $LN7@symtable_v@9

; 1584 :     }
; 1585 :     else {

  0014f	e9 9f 00 00 00	 jmp	 $LN2@symtable_v@9
$LN3@symtable_v@9:

; 1586 :         if (st->st_cur->ste_type != ModuleBlock) {

  00154	48 8b 44 24 70	 mov	 rax, QWORD PTR st$[rsp]
  00159	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0015d	83 b8 88 00 00
	00 02		 cmp	 DWORD PTR [rax+136], 2
  00164	74 5d		 je	 SHORT $LN1@symtable_v@9

; 1587 :             int lineno = st->st_cur->ste_lineno;

  00166	48 8b 44 24 70	 mov	 rax, QWORD PTR st$[rsp]
  0016b	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0016f	8b 80 98 00 00
	00		 mov	 eax, DWORD PTR [rax+152]
  00175	89 44 24 4c	 mov	 DWORD PTR lineno$22996[rsp], eax

; 1588 :             int col_offset = st->st_cur->ste_col_offset;

  00179	48 8b 44 24 70	 mov	 rax, QWORD PTR st$[rsp]
  0017e	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00182	8b 80 9c 00 00
	00		 mov	 eax, DWORD PTR [rax+156]
  00188	89 44 24 50	 mov	 DWORD PTR col_offset$22997[rsp], eax

; 1589 :             PyErr_SetString(PyExc_SyntaxError, IMPORT_STAR_WARNING);

  0018c	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CG@JHBDPOHA@import?5?$CK?5only?5allowed?5at?5module?5@
  00193	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR PyExc_SyntaxError
  0019a	e8 00 00 00 00	 call	 PyErr_SetString

; 1590 :             PyErr_SyntaxLocationEx(st->st_filename, lineno, col_offset);

  0019f	44 8b 44 24 50	 mov	 r8d, DWORD PTR col_offset$22997[rsp]
  001a4	8b 54 24 4c	 mov	 edx, DWORD PTR lineno$22996[rsp]
  001a8	48 8b 44 24 70	 mov	 rax, QWORD PTR st$[rsp]
  001ad	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  001b0	e8 00 00 00 00	 call	 PyErr_SyntaxLocationEx

; 1591 :             Py_DECREF(store_name);

  001b5	48 8b 4c 24 40	 mov	 rcx, QWORD PTR store_name$[rsp]
  001ba	e8 00 00 00 00	 call	 _Py_DecRef

; 1592 :             return 0;

  001bf	33 c0		 xor	 eax, eax
  001c1	eb 30		 jmp	 SHORT $LN7@symtable_v@9
$LN1@symtable_v@9:

; 1593 :         }
; 1594 :         st->st_cur->ste_unoptimized |= OPT_IMPORT_STAR;

  001c3	48 8b 44 24 70	 mov	 rax, QWORD PTR st$[rsp]
  001c8	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  001cc	8b 80 8c 00 00
	00		 mov	 eax, DWORD PTR [rax+140]
  001d2	83 c8 01	 or	 eax, 1
  001d5	48 8b 4c 24 70	 mov	 rcx, QWORD PTR st$[rsp]
  001da	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  001de	89 81 8c 00 00
	00		 mov	 DWORD PTR [rcx+140], eax

; 1595 :         Py_DECREF(store_name);

  001e4	48 8b 4c 24 40	 mov	 rcx, QWORD PTR store_name$[rsp]
  001e9	e8 00 00 00 00	 call	 _Py_DecRef

; 1596 :         return 1;

  001ee	b8 01 00 00 00	 mov	 eax, 1
$LN2@symtable_v@9:
$LN7@symtable_v@9:

; 1597 :     }
; 1598 : }

  001f3	48 83 c4 68	 add	 rsp, 104		; 00000068H
  001f7	c3		 ret	 0
symtable_visit_alias ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$symtable_visit_keyword DD imagerel symtable_visit_keyword
	DD	imagerel symtable_visit_keyword+69
	DD	imagerel $unwind$symtable_visit_keyword
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$symtable_visit_keyword DD 010e01H
	DD	0420eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT symtable_visit_keyword
_TEXT	SEGMENT
st$ = 48
k$ = 56
symtable_visit_keyword PROC				; COMDAT

; 1613 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 1614 :     VISIT(st, expr, k->value);

  0000e	48 8b 44 24 38	 mov	 rax, QWORD PTR k$[rsp]
  00013	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  00017	48 8b 4c 24 30	 mov	 rcx, QWORD PTR st$[rsp]
  0001c	e8 00 00 00 00	 call	 symtable_visit_expr
  00021	85 c0		 test	 eax, eax
  00023	75 16		 jne	 SHORT $LN1@symtable_v@10
  00025	48 8b 44 24 30	 mov	 rax, QWORD PTR st$[rsp]
  0002a	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  0002d	ff c8		 dec	 eax
  0002f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR st$[rsp]
  00034	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  00037	33 c0		 xor	 eax, eax
  00039	eb 05		 jmp	 SHORT $LN2@symtable_v@10
$LN1@symtable_v@10:

; 1615 :     return 1;

  0003b	b8 01 00 00 00	 mov	 eax, 1
$LN2@symtable_v@10:

; 1616 : }

  00040	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00044	c3		 ret	 0
symtable_visit_keyword ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$symtable_visit_slice DD imagerel symtable_visit_slice
	DD	imagerel symtable_visit_slice+442
	DD	imagerel $unwind$symtable_visit_slice
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$symtable_visit_slice DD 010e01H
	DD	0a20eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT symtable_visit_slice
_TEXT	SEGMENT
i$23040 = 32
seq$23041 = 40
elt$23046 = 48
tv64 = 56
tv131 = 64
st$ = 96
s$ = 104
symtable_visit_slice PROC				; COMDAT

; 1621 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 1622 :     switch (s->kind) {

  0000e	48 8b 44 24 68	 mov	 rax, QWORD PTR s$[rsp]
  00013	8b 00		 mov	 eax, DWORD PTR [rax]
  00015	89 44 24 38	 mov	 DWORD PTR tv64[rsp], eax
  00019	83 7c 24 38 01	 cmp	 DWORD PTR tv64[rsp], 1
  0001e	74 1b		 je	 SHORT $LN14@symtable_v@11
  00020	83 7c 24 38 02	 cmp	 DWORD PTR tv64[rsp], 2
  00025	0f 84 c9 00 00
	00		 je	 $LN7@symtable_v@11
  0002b	83 7c 24 38 03	 cmp	 DWORD PTR tv64[rsp], 3
  00030	0f 84 4d 01 00
	00		 je	 $LN2@symtable_v@11
  00036	e9 75 01 00 00	 jmp	 $LN15@symtable_v@11
$LN14@symtable_v@11:

; 1623 :     case Slice_kind:
; 1624 :         if (s->v.Slice.lower)

  0003b	48 8b 44 24 68	 mov	 rax, QWORD PTR s$[rsp]
  00040	48 83 78 08 00	 cmp	 QWORD PTR [rax+8], 0
  00045	74 30		 je	 SHORT $LN13@symtable_v@11

; 1625 :             VISIT(st, expr, s->v.Slice.lower)

  00047	48 8b 44 24 68	 mov	 rax, QWORD PTR s$[rsp]
  0004c	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  00050	48 8b 4c 24 60	 mov	 rcx, QWORD PTR st$[rsp]
  00055	e8 00 00 00 00	 call	 symtable_visit_expr
  0005a	85 c0		 test	 eax, eax
  0005c	75 19		 jne	 SHORT $LN12@symtable_v@11
  0005e	48 8b 44 24 60	 mov	 rax, QWORD PTR st$[rsp]
  00063	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  00066	ff c8		 dec	 eax
  00068	48 8b 4c 24 60	 mov	 rcx, QWORD PTR st$[rsp]
  0006d	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  00070	33 c0		 xor	 eax, eax
  00072	e9 3e 01 00 00	 jmp	 $LN17@symtable_v@11
$LN12@symtable_v@11:
$LN13@symtable_v@11:

; 1626 :         if (s->v.Slice.upper)

  00077	48 8b 44 24 68	 mov	 rax, QWORD PTR s$[rsp]
  0007c	48 83 78 10 00	 cmp	 QWORD PTR [rax+16], 0
  00081	74 30		 je	 SHORT $LN11@symtable_v@11

; 1627 :             VISIT(st, expr, s->v.Slice.upper)

  00083	48 8b 44 24 68	 mov	 rax, QWORD PTR s$[rsp]
  00088	48 8b 50 10	 mov	 rdx, QWORD PTR [rax+16]
  0008c	48 8b 4c 24 60	 mov	 rcx, QWORD PTR st$[rsp]
  00091	e8 00 00 00 00	 call	 symtable_visit_expr
  00096	85 c0		 test	 eax, eax
  00098	75 19		 jne	 SHORT $LN10@symtable_v@11
  0009a	48 8b 44 24 60	 mov	 rax, QWORD PTR st$[rsp]
  0009f	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000a2	ff c8		 dec	 eax
  000a4	48 8b 4c 24 60	 mov	 rcx, QWORD PTR st$[rsp]
  000a9	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  000ac	33 c0		 xor	 eax, eax
  000ae	e9 02 01 00 00	 jmp	 $LN17@symtable_v@11
$LN10@symtable_v@11:
$LN11@symtable_v@11:

; 1628 :         if (s->v.Slice.step)

  000b3	48 8b 44 24 68	 mov	 rax, QWORD PTR s$[rsp]
  000b8	48 83 78 18 00	 cmp	 QWORD PTR [rax+24], 0
  000bd	74 30		 je	 SHORT $LN9@symtable_v@11

; 1629 :             VISIT(st, expr, s->v.Slice.step)

  000bf	48 8b 44 24 68	 mov	 rax, QWORD PTR s$[rsp]
  000c4	48 8b 50 18	 mov	 rdx, QWORD PTR [rax+24]
  000c8	48 8b 4c 24 60	 mov	 rcx, QWORD PTR st$[rsp]
  000cd	e8 00 00 00 00	 call	 symtable_visit_expr
  000d2	85 c0		 test	 eax, eax
  000d4	75 19		 jne	 SHORT $LN8@symtable_v@11
  000d6	48 8b 44 24 60	 mov	 rax, QWORD PTR st$[rsp]
  000db	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000de	ff c8		 dec	 eax
  000e0	48 8b 4c 24 60	 mov	 rcx, QWORD PTR st$[rsp]
  000e5	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  000e8	33 c0		 xor	 eax, eax
  000ea	e9 c6 00 00 00	 jmp	 $LN17@symtable_v@11
$LN8@symtable_v@11:
$LN9@symtable_v@11:

; 1630 :         break;

  000ef	e9 bc 00 00 00	 jmp	 $LN15@symtable_v@11
$LN7@symtable_v@11:

; 1631 :     case ExtSlice_kind:
; 1632 :         VISIT_SEQ(st, slice, s->v.ExtSlice.dims)

  000f4	48 8b 44 24 68	 mov	 rax, QWORD PTR s$[rsp]
  000f9	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  000fd	48 89 44 24 28	 mov	 QWORD PTR seq$23041[rsp], rax
  00102	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$23040[rsp], 0
  0010a	eb 0a		 jmp	 SHORT $LN6@symtable_v@11
$LN5@symtable_v@11:
  0010c	8b 44 24 20	 mov	 eax, DWORD PTR i$23040[rsp]
  00110	ff c0		 inc	 eax
  00112	89 44 24 20	 mov	 DWORD PTR i$23040[rsp], eax
$LN6@symtable_v@11:
  00116	48 83 7c 24 28
	00		 cmp	 QWORD PTR seq$23041[rsp], 0
  0011c	75 0b		 jne	 SHORT $LN19@symtable_v@11
  0011e	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR tv131[rsp], 0
  00127	eb 0d		 jmp	 SHORT $LN20@symtable_v@11
$LN19@symtable_v@11:
  00129	48 8b 44 24 28	 mov	 rax, QWORD PTR seq$23041[rsp]
  0012e	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00131	48 89 44 24 40	 mov	 QWORD PTR tv131[rsp], rax
$LN20@symtable_v@11:
  00136	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$23040[rsp]
  0013b	48 3b 44 24 40	 cmp	 rax, QWORD PTR tv131[rsp]
  00140	7d 3f		 jge	 SHORT $LN4@symtable_v@11
  00142	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$23040[rsp]
  00147	48 8b 4c 24 28	 mov	 rcx, QWORD PTR seq$23041[rsp]
  0014c	48 8b 44 c1 08	 mov	 rax, QWORD PTR [rcx+rax*8+8]
  00151	48 89 44 24 30	 mov	 QWORD PTR elt$23046[rsp], rax
  00156	48 8b 54 24 30	 mov	 rdx, QWORD PTR elt$23046[rsp]
  0015b	48 8b 4c 24 60	 mov	 rcx, QWORD PTR st$[rsp]
  00160	e8 00 00 00 00	 call	 symtable_visit_slice
  00165	85 c0		 test	 eax, eax
  00167	75 16		 jne	 SHORT $LN3@symtable_v@11
  00169	48 8b 44 24 60	 mov	 rax, QWORD PTR st$[rsp]
  0016e	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  00171	ff c8		 dec	 eax
  00173	48 8b 4c 24 60	 mov	 rcx, QWORD PTR st$[rsp]
  00178	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  0017b	33 c0		 xor	 eax, eax
  0017d	eb 36		 jmp	 SHORT $LN17@symtable_v@11
$LN3@symtable_v@11:
  0017f	eb 8b		 jmp	 SHORT $LN5@symtable_v@11
$LN4@symtable_v@11:

; 1633 :         break;

  00181	eb 2d		 jmp	 SHORT $LN15@symtable_v@11
$LN2@symtable_v@11:

; 1634 :     case Index_kind:
; 1635 :         VISIT(st, expr, s->v.Index.value)

  00183	48 8b 44 24 68	 mov	 rax, QWORD PTR s$[rsp]
  00188	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  0018c	48 8b 4c 24 60	 mov	 rcx, QWORD PTR st$[rsp]
  00191	e8 00 00 00 00	 call	 symtable_visit_expr
  00196	85 c0		 test	 eax, eax
  00198	75 16		 jne	 SHORT $LN1@symtable_v@11
  0019a	48 8b 44 24 60	 mov	 rax, QWORD PTR st$[rsp]
  0019f	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  001a2	ff c8		 dec	 eax
  001a4	48 8b 4c 24 60	 mov	 rcx, QWORD PTR st$[rsp]
  001a9	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  001ac	33 c0		 xor	 eax, eax
  001ae	eb 05		 jmp	 SHORT $LN17@symtable_v@11
$LN1@symtable_v@11:
$LN15@symtable_v@11:

; 1636 :         break;
; 1637 :     }
; 1638 :     return 1;

  001b0	b8 01 00 00 00	 mov	 eax, 1
$LN17@symtable_v@11:

; 1639 : }

  001b5	48 83 c4 58	 add	 rsp, 88			; 00000058H
  001b9	c3		 ret	 0
symtable_visit_slice ENDP
_TEXT	ENDS
PUBLIC	??_C@_07BNCCIHDG@genexpr?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$symtable_visit_genexp DD imagerel symtable_visit_genexp
	DD	imagerel symtable_visit_genexp+126
	DD	imagerel $unwind$symtable_visit_genexp
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$symtable_visit_genexp DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_07BNCCIHDG@genexpr?$AA@
CONST	SEGMENT
??_C@_07BNCCIHDG@genexpr?$AA@ DB 'genexpr', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT symtable_visit_genexp
_TEXT	SEGMENT
tv73 = 48
st$ = 80
e$ = 88
symtable_visit_genexp PROC				; COMDAT

; 1680 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1681 :     return symtable_handle_comprehension(st, e, GET_IDENTIFIER(genexpr),
; 1682 :                                          e->v.GeneratorExp.generators,
; 1683 :                                          e->v.GeneratorExp.elt, NULL);

  0000e	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR genexpr, 0
  00016	74 0e		 je	 SHORT $LN3@symtable_v@12
  00018	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR genexpr
  0001f	48 89 44 24 30	 mov	 QWORD PTR tv73[rsp], rax
  00024	eb 1f		 jmp	 SHORT $LN4@symtable_v@12
$LN3@symtable_v@12:
  00026	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07BNCCIHDG@genexpr?$AA@
  0002d	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  00032	48 89 05 00 00
	00 00		 mov	 QWORD PTR genexpr, rax
  00039	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR genexpr
  00040	48 89 44 24 30	 mov	 QWORD PTR tv73[rsp], rax
$LN4@symtable_v@12:
  00045	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR [rsp+40], 0
  0004e	48 8b 44 24 58	 mov	 rax, QWORD PTR e$[rsp]
  00053	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00057	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0005c	48 8b 44 24 58	 mov	 rax, QWORD PTR e$[rsp]
  00061	4c 8b 48 10	 mov	 r9, QWORD PTR [rax+16]
  00065	4c 8b 44 24 30	 mov	 r8, QWORD PTR tv73[rsp]
  0006a	48 8b 54 24 58	 mov	 rdx, QWORD PTR e$[rsp]
  0006f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR st$[rsp]
  00074	e8 00 00 00 00	 call	 symtable_handle_comprehension

; 1684 : }

  00079	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0007d	c3		 ret	 0
symtable_visit_genexp ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$symtable_handle_comprehension DD imagerel symtable_handle_comprehension
	DD	imagerel symtable_handle_comprehension+929
	DD	imagerel $unwind$symtable_handle_comprehension
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$symtable_handle_comprehension DD 021b01H
	DD	013011bH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT symtable_handle_comprehension
_TEXT	SEGMENT
needs_tmp$ = 48
is_generator$ = 52
outermost$ = 56
i$23078 = 64
seq$23079 = 72
elt$23084 = 80
i$23087 = 88
seq$23088 = 96
elt$23093 = 104
tv65 = 112
tv67 = 116
tv152 = 120
tv168 = 128
st$ = 160
e$ = 168
scope_name$ = 176
generators$ = 184
elt$ = 192
value$ = 200
symtable_handle_comprehension PROC			; COMDAT

; 1645 : {

  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 1646 :     int is_generator = (e->kind == GeneratorExp_kind);

  0001b	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR e$[rsp]
  00023	83 38 0b	 cmp	 DWORD PTR [rax], 11
  00026	75 0a		 jne	 SHORT $LN20@symtable_h
  00028	c7 44 24 70 01
	00 00 00	 mov	 DWORD PTR tv65[rsp], 1
  00030	eb 08		 jmp	 SHORT $LN21@symtable_h
$LN20@symtable_h:
  00032	c7 44 24 70 00
	00 00 00	 mov	 DWORD PTR tv65[rsp], 0
$LN21@symtable_h:
  0003a	8b 44 24 70	 mov	 eax, DWORD PTR tv65[rsp]
  0003e	89 44 24 34	 mov	 DWORD PTR is_generator$[rsp], eax

; 1647 :     int needs_tmp = !is_generator;

  00042	83 7c 24 34 00	 cmp	 DWORD PTR is_generator$[rsp], 0
  00047	75 0a		 jne	 SHORT $LN22@symtable_h
  00049	c7 44 24 74 01
	00 00 00	 mov	 DWORD PTR tv67[rsp], 1
  00051	eb 08		 jmp	 SHORT $LN23@symtable_h
$LN22@symtable_h:
  00053	c7 44 24 74 00
	00 00 00	 mov	 DWORD PTR tv67[rsp], 0
$LN23@symtable_h:
  0005b	8b 44 24 74	 mov	 eax, DWORD PTR tv67[rsp]
  0005f	89 44 24 30	 mov	 DWORD PTR needs_tmp$[rsp], eax

; 1648 :     comprehension_ty outermost = ((comprehension_ty)
; 1649 :                                     asdl_seq_GET(generators, 0));

  00063	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR generators$[rsp]
  0006b	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0006f	48 89 44 24 38	 mov	 QWORD PTR outermost$[rsp], rax

; 1650 :     /* Outermost iterator is evaluated in current scope */
; 1651 :     VISIT(st, expr, outermost->iter);

  00074	48 8b 44 24 38	 mov	 rax, QWORD PTR outermost$[rsp]
  00079	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  0007d	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  00085	e8 00 00 00 00	 call	 symtable_visit_expr
  0008a	85 c0		 test	 eax, eax
  0008c	75 1f		 jne	 SHORT $LN17@symtable_h
  0008e	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR st$[rsp]
  00096	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  00099	ff c8		 dec	 eax
  0009b	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  000a3	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  000a6	33 c0		 xor	 eax, eax
  000a8	e9 ec 02 00 00	 jmp	 $LN18@symtable_h
$LN17@symtable_h:

; 1652 :     /* Create comprehension scope for the rest */
; 1653 :     if (!scope_name ||
; 1654 :         !symtable_enter_block(st, scope_name, FunctionBlock, (void *)e,
; 1655 :                               e->lineno, e->col_offset)) {

  000ad	48 83 bc 24 b0
	00 00 00 00	 cmp	 QWORD PTR scope_name$[rsp], 0
  000b6	74 42		 je	 SHORT $LN15@symtable_h
  000b8	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR e$[rsp]
  000c0	8b 40 34	 mov	 eax, DWORD PTR [rax+52]
  000c3	89 44 24 28	 mov	 DWORD PTR [rsp+40], eax
  000c7	48 8b 84 24 a8
	00 00 00	 mov	 rax, QWORD PTR e$[rsp]
  000cf	8b 40 30	 mov	 eax, DWORD PTR [rax+48]
  000d2	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  000d6	4c 8b 8c 24 a8
	00 00 00	 mov	 r9, QWORD PTR e$[rsp]
  000de	45 33 c0	 xor	 r8d, r8d
  000e1	48 8b 94 24 b0
	00 00 00	 mov	 rdx, QWORD PTR scope_name$[rsp]
  000e9	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  000f1	e8 00 00 00 00	 call	 symtable_enter_block
  000f6	85 c0		 test	 eax, eax
  000f8	75 07		 jne	 SHORT $LN16@symtable_h
$LN15@symtable_h:

; 1656 :         return 0;

  000fa	33 c0		 xor	 eax, eax
  000fc	e9 98 02 00 00	 jmp	 $LN18@symtable_h
$LN16@symtable_h:

; 1657 :     }
; 1658 :     st->st_cur->ste_generator = is_generator;

  00101	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR st$[rsp]
  00109	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0010d	8b 4c 24 34	 mov	 ecx, DWORD PTR is_generator$[rsp]
  00111	83 e1 01	 and	 ecx, 1
  00114	c1 e1 02	 shl	 ecx, 2
  00117	8b 80 94 00 00
	00		 mov	 eax, DWORD PTR [rax+148]
  0011d	83 e0 fb	 and	 eax, -5			; fffffffbH
  00120	0b c1		 or	 eax, ecx
  00122	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  0012a	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  0012e	89 81 94 00 00
	00		 mov	 DWORD PTR [rcx+148], eax

; 1659 :     /* Outermost iter is received as an argument */
; 1660 :     if (!symtable_implicit_arg(st, 0)) {

  00134	33 d2		 xor	 edx, edx
  00136	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  0013e	e8 00 00 00 00	 call	 symtable_implicit_arg
  00143	85 c0		 test	 eax, eax
  00145	75 1c		 jne	 SHORT $LN14@symtable_h

; 1661 :         symtable_exit_block(st, (void *)e);

  00147	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR e$[rsp]
  0014f	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  00157	e8 00 00 00 00	 call	 symtable_exit_block

; 1662 :         return 0;

  0015c	33 c0		 xor	 eax, eax
  0015e	e9 36 02 00 00	 jmp	 $LN18@symtable_h
$LN14@symtable_h:

; 1663 :     }
; 1664 :     /* Allocate temporary name if needed */
; 1665 :     if (needs_tmp && !symtable_new_tmpname(st)) {

  00163	83 7c 24 30 00	 cmp	 DWORD PTR needs_tmp$[rsp], 0
  00168	74 2d		 je	 SHORT $LN13@symtable_h
  0016a	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  00172	e8 00 00 00 00	 call	 symtable_new_tmpname
  00177	85 c0		 test	 eax, eax
  00179	75 1c		 jne	 SHORT $LN13@symtable_h

; 1666 :         symtable_exit_block(st, (void *)e);

  0017b	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR e$[rsp]
  00183	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  0018b	e8 00 00 00 00	 call	 symtable_exit_block

; 1667 :         return 0;

  00190	33 c0		 xor	 eax, eax
  00192	e9 02 02 00 00	 jmp	 $LN18@symtable_h
$LN13@symtable_h:

; 1668 :     }
; 1669 :     VISIT(st, expr, outermost->target);

  00197	48 8b 44 24 38	 mov	 rax, QWORD PTR outermost$[rsp]
  0019c	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  0019f	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  001a7	e8 00 00 00 00	 call	 symtable_visit_expr
  001ac	85 c0		 test	 eax, eax
  001ae	75 1f		 jne	 SHORT $LN12@symtable_h
  001b0	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR st$[rsp]
  001b8	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  001bb	ff c8		 dec	 eax
  001bd	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  001c5	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  001c8	33 c0		 xor	 eax, eax
  001ca	e9 ca 01 00 00	 jmp	 $LN18@symtable_h
$LN12@symtable_h:

; 1670 :     VISIT_SEQ(st, expr, outermost->ifs);

  001cf	48 8b 44 24 38	 mov	 rax, QWORD PTR outermost$[rsp]
  001d4	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  001d8	48 89 44 24 48	 mov	 QWORD PTR seq$23079[rsp], rax
  001dd	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR i$23078[rsp], 0
  001e5	eb 0a		 jmp	 SHORT $LN11@symtable_h
$LN10@symtable_h:
  001e7	8b 44 24 40	 mov	 eax, DWORD PTR i$23078[rsp]
  001eb	ff c0		 inc	 eax
  001ed	89 44 24 40	 mov	 DWORD PTR i$23078[rsp], eax
$LN11@symtable_h:
  001f1	48 83 7c 24 48
	00		 cmp	 QWORD PTR seq$23079[rsp], 0
  001f7	75 0b		 jne	 SHORT $LN24@symtable_h
  001f9	48 c7 44 24 78
	00 00 00 00	 mov	 QWORD PTR tv152[rsp], 0
  00202	eb 0d		 jmp	 SHORT $LN25@symtable_h
$LN24@symtable_h:
  00204	48 8b 44 24 48	 mov	 rax, QWORD PTR seq$23079[rsp]
  00209	48 8b 00	 mov	 rax, QWORD PTR [rax]
  0020c	48 89 44 24 78	 mov	 QWORD PTR tv152[rsp], rax
$LN25@symtable_h:
  00211	48 63 44 24 40	 movsxd	 rax, DWORD PTR i$23078[rsp]
  00216	48 3b 44 24 78	 cmp	 rax, QWORD PTR tv152[rsp]
  0021b	7d 4e		 jge	 SHORT $LN9@symtable_h
  0021d	48 63 44 24 40	 movsxd	 rax, DWORD PTR i$23078[rsp]
  00222	48 8b 4c 24 48	 mov	 rcx, QWORD PTR seq$23079[rsp]
  00227	48 8b 44 c1 08	 mov	 rax, QWORD PTR [rcx+rax*8+8]
  0022c	48 89 44 24 50	 mov	 QWORD PTR elt$23084[rsp], rax
  00231	48 8b 54 24 50	 mov	 rdx, QWORD PTR elt$23084[rsp]
  00236	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  0023e	e8 00 00 00 00	 call	 symtable_visit_expr
  00243	85 c0		 test	 eax, eax
  00245	75 1f		 jne	 SHORT $LN8@symtable_h
  00247	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR st$[rsp]
  0024f	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  00252	ff c8		 dec	 eax
  00254	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  0025c	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  0025f	33 c0		 xor	 eax, eax
  00261	e9 33 01 00 00	 jmp	 $LN18@symtable_h
$LN8@symtable_h:
  00266	e9 7c ff ff ff	 jmp	 $LN10@symtable_h
$LN9@symtable_h:

; 1671 :     VISIT_SEQ_TAIL(st, comprehension, generators, 1);

  0026b	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR generators$[rsp]
  00273	48 89 44 24 60	 mov	 QWORD PTR seq$23088[rsp], rax
  00278	c7 44 24 58 01
	00 00 00	 mov	 DWORD PTR i$23087[rsp], 1
  00280	eb 0a		 jmp	 SHORT $LN7@symtable_h
$LN6@symtable_h:
  00282	8b 44 24 58	 mov	 eax, DWORD PTR i$23087[rsp]
  00286	ff c0		 inc	 eax
  00288	89 44 24 58	 mov	 DWORD PTR i$23087[rsp], eax
$LN7@symtable_h:
  0028c	48 83 7c 24 60
	00		 cmp	 QWORD PTR seq$23088[rsp], 0
  00292	75 0e		 jne	 SHORT $LN26@symtable_h
  00294	48 c7 84 24 80
	00 00 00 00 00
	00 00		 mov	 QWORD PTR tv168[rsp], 0
  002a0	eb 10		 jmp	 SHORT $LN27@symtable_h
$LN26@symtable_h:
  002a2	48 8b 44 24 60	 mov	 rax, QWORD PTR seq$23088[rsp]
  002a7	48 8b 00	 mov	 rax, QWORD PTR [rax]
  002aa	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR tv168[rsp], rax
$LN27@symtable_h:
  002b2	48 63 44 24 58	 movsxd	 rax, DWORD PTR i$23087[rsp]
  002b7	48 3b 84 24 80
	00 00 00	 cmp	 rax, QWORD PTR tv168[rsp]
  002bf	7d 4e		 jge	 SHORT $LN5@symtable_h
  002c1	48 63 44 24 58	 movsxd	 rax, DWORD PTR i$23087[rsp]
  002c6	48 8b 4c 24 60	 mov	 rcx, QWORD PTR seq$23088[rsp]
  002cb	48 8b 44 c1 08	 mov	 rax, QWORD PTR [rcx+rax*8+8]
  002d0	48 89 44 24 68	 mov	 QWORD PTR elt$23093[rsp], rax
  002d5	48 8b 54 24 68	 mov	 rdx, QWORD PTR elt$23093[rsp]
  002da	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  002e2	e8 00 00 00 00	 call	 symtable_visit_comprehension
  002e7	85 c0		 test	 eax, eax
  002e9	75 1f		 jne	 SHORT $LN4@symtable_h
  002eb	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR st$[rsp]
  002f3	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  002f6	ff c8		 dec	 eax
  002f8	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  00300	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  00303	33 c0		 xor	 eax, eax
  00305	e9 8f 00 00 00	 jmp	 $LN18@symtable_h
$LN4@symtable_h:
  0030a	e9 73 ff ff ff	 jmp	 $LN6@symtable_h
$LN5@symtable_h:

; 1672 :     if (value)

  0030f	48 83 bc 24 c8
	00 00 00 00	 cmp	 QWORD PTR value$[rsp], 0
  00318	74 35		 je	 SHORT $LN3@symtable_h

; 1673 :         VISIT(st, expr, value);

  0031a	48 8b 94 24 c8
	00 00 00	 mov	 rdx, QWORD PTR value$[rsp]
  00322	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  0032a	e8 00 00 00 00	 call	 symtable_visit_expr
  0032f	85 c0		 test	 eax, eax
  00331	75 1c		 jne	 SHORT $LN2@symtable_h
  00333	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR st$[rsp]
  0033b	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  0033e	ff c8		 dec	 eax
  00340	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  00348	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  0034b	33 c0		 xor	 eax, eax
  0034d	eb 4a		 jmp	 SHORT $LN18@symtable_h
$LN2@symtable_h:
$LN3@symtable_h:

; 1674 :     VISIT(st, expr, elt);

  0034f	48 8b 94 24 c0
	00 00 00	 mov	 rdx, QWORD PTR elt$[rsp]
  00357	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  0035f	e8 00 00 00 00	 call	 symtable_visit_expr
  00364	85 c0		 test	 eax, eax
  00366	75 1c		 jne	 SHORT $LN1@symtable_h
  00368	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR st$[rsp]
  00370	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  00373	ff c8		 dec	 eax
  00375	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  0037d	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  00380	33 c0		 xor	 eax, eax
  00382	eb 15		 jmp	 SHORT $LN18@symtable_h
$LN1@symtable_h:

; 1675 :     return symtable_exit_block(st, (void *)e);

  00384	48 8b 94 24 a8
	00 00 00	 mov	 rdx, QWORD PTR e$[rsp]
  0038c	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  00394	e8 00 00 00 00	 call	 symtable_exit_block
$LN18@symtable_h:

; 1676 : }

  00399	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  003a0	c3		 ret	 0
symtable_handle_comprehension ENDP
_TEXT	ENDS
PUBLIC	??_C@_05CLABAFEN@_?$FL?$CFd?$FN?$AA@		; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$symtable_new_tmpname DD imagerel symtable_new_tmpname
	DD	imagerel symtable_new_tmpname+176
	DD	imagerel $unwind$symtable_new_tmpname
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$symtable_new_tmpname DD 020c01H
	DD	029010cH
xdata	ENDS
;	COMDAT ??_C@_05CLABAFEN@_?$FL?$CFd?$FN?$AA@
CONST	SEGMENT
??_C@_05CLABAFEN@_?$FL?$CFd?$FN?$AA@ DB '_[%d]', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT symtable_new_tmpname
_TEXT	SEGMENT
tmp$ = 32
tmpname$ = 48
tv69 = 304
st$ = 336
symtable_new_tmpname PROC				; COMDAT

; 1088 : {

  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 81 ec 48 01
	00 00		 sub	 rsp, 328		; 00000148H

; 1089 :     char tmpname[256];
; 1090 :     identifier tmp;
; 1091 : 
; 1092 :     PyOS_snprintf(tmpname, sizeof(tmpname), "_[%d]",
; 1093 :                   ++st->st_cur->ste_tmpname);

  0000c	48 8b 84 24 50
	01 00 00	 mov	 rax, QWORD PTR st$[rsp]
  00014	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00018	8b 80 a8 00 00
	00		 mov	 eax, DWORD PTR [rax+168]
  0001e	ff c0		 inc	 eax
  00020	89 84 24 30 01
	00 00		 mov	 DWORD PTR tv69[rsp], eax
  00027	48 8b 84 24 50
	01 00 00	 mov	 rax, QWORD PTR st$[rsp]
  0002f	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00033	8b 8c 24 30 01
	00 00		 mov	 ecx, DWORD PTR tv69[rsp]
  0003a	89 88 a8 00 00
	00		 mov	 DWORD PTR [rax+168], ecx
  00040	44 8b 8c 24 30
	01 00 00	 mov	 r9d, DWORD PTR tv69[rsp]
  00048	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_05CLABAFEN@_?$FL?$CFd?$FN?$AA@
  0004f	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  00054	48 8d 4c 24 30	 lea	 rcx, QWORD PTR tmpname$[rsp]
  00059	e8 00 00 00 00	 call	 PyOS_snprintf

; 1094 :     tmp = PyUnicode_InternFromString(tmpname);

  0005e	48 8d 4c 24 30	 lea	 rcx, QWORD PTR tmpname$[rsp]
  00063	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  00068	48 89 44 24 20	 mov	 QWORD PTR tmp$[rsp], rax

; 1095 :     if (!tmp)

  0006d	48 83 7c 24 20
	00		 cmp	 QWORD PTR tmp$[rsp], 0
  00073	75 04		 jne	 SHORT $LN2@symtable_n@2

; 1096 :         return 0;

  00075	33 c0		 xor	 eax, eax
  00077	eb 2f		 jmp	 SHORT $LN3@symtable_n@2
$LN2@symtable_n@2:

; 1097 :     if (!symtable_add_def(st, tmp, DEF_LOCAL))

  00079	41 b8 02 00 00
	00		 mov	 r8d, 2
  0007f	48 8b 54 24 20	 mov	 rdx, QWORD PTR tmp$[rsp]
  00084	48 8b 8c 24 50
	01 00 00	 mov	 rcx, QWORD PTR st$[rsp]
  0008c	e8 00 00 00 00	 call	 symtable_add_def
  00091	85 c0		 test	 eax, eax
  00093	75 04		 jne	 SHORT $LN1@symtable_n@2

; 1098 :         return 0;

  00095	33 c0		 xor	 eax, eax
  00097	eb 0f		 jmp	 SHORT $LN3@symtable_n@2
$LN1@symtable_n@2:

; 1099 :     Py_DECREF(tmp);

  00099	48 8b 4c 24 20	 mov	 rcx, QWORD PTR tmp$[rsp]
  0009e	e8 00 00 00 00	 call	 _Py_DecRef

; 1100 :     return 1;

  000a3	b8 01 00 00 00	 mov	 eax, 1
$LN3@symtable_n@2:

; 1101 : }

  000a8	48 81 c4 48 01
	00 00		 add	 rsp, 328		; 00000148H
  000af	c3		 ret	 0
symtable_new_tmpname ENDP
_TEXT	ENDS
PUBLIC	??_C@_03KBEBNCEG@?4?$CFd?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$symtable_implicit_arg DD imagerel symtable_implicit_arg
	DD	imagerel symtable_implicit_arg+105
	DD	imagerel $unwind$symtable_implicit_arg
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$symtable_implicit_arg DD 010d01H
	DD	0620dH
xdata	ENDS
;	COMDAT ??_C@_03KBEBNCEG@?4?$CFd?$AA@
CONST	SEGMENT
??_C@_03KBEBNCEG@?4?$CFd?$AA@ DB '.%d', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT symtable_implicit_arg
_TEXT	SEGMENT
id$ = 32
st$ = 64
pos$ = 72
symtable_implicit_arg PROC				; COMDAT

; 1449 : {

  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 1450 :     PyObject *id = PyUnicode_FromFormat(".%d", pos);

  0000d	8b 54 24 48	 mov	 edx, DWORD PTR pos$[rsp]
  00011	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_03KBEBNCEG@?4?$CFd?$AA@
  00018	e8 00 00 00 00	 call	 PyUnicode_FromFormat
  0001d	48 89 44 24 20	 mov	 QWORD PTR id$[rsp], rax

; 1451 :     if (id == NULL)

  00022	48 83 7c 24 20
	00		 cmp	 QWORD PTR id$[rsp], 0
  00028	75 04		 jne	 SHORT $LN2@symtable_i

; 1452 :         return 0;

  0002a	33 c0		 xor	 eax, eax
  0002c	eb 36		 jmp	 SHORT $LN3@symtable_i
$LN2@symtable_i:

; 1453 :     if (!symtable_add_def(st, id, DEF_PARAM)) {

  0002e	41 b8 04 00 00
	00		 mov	 r8d, 4
  00034	48 8b 54 24 20	 mov	 rdx, QWORD PTR id$[rsp]
  00039	48 8b 4c 24 40	 mov	 rcx, QWORD PTR st$[rsp]
  0003e	e8 00 00 00 00	 call	 symtable_add_def
  00043	85 c0		 test	 eax, eax
  00045	75 0e		 jne	 SHORT $LN1@symtable_i

; 1454 :         Py_DECREF(id);

  00047	48 8b 4c 24 20	 mov	 rcx, QWORD PTR id$[rsp]
  0004c	e8 00 00 00 00	 call	 _Py_DecRef

; 1455 :         return 0;

  00051	33 c0		 xor	 eax, eax
  00053	eb 0f		 jmp	 SHORT $LN3@symtable_i
$LN1@symtable_i:

; 1456 :     }
; 1457 :     Py_DECREF(id);

  00055	48 8b 4c 24 20	 mov	 rcx, QWORD PTR id$[rsp]
  0005a	e8 00 00 00 00	 call	 _Py_DecRef

; 1458 :     return 1;

  0005f	b8 01 00 00 00	 mov	 eax, 1
$LN3@symtable_i:

; 1459 : }

  00064	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00068	c3		 ret	 0
symtable_implicit_arg ENDP
_TEXT	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$symtable_visit_comprehension DD imagerel symtable_visit_comprehension
	DD	imagerel symtable_visit_comprehension+260
	DD	imagerel $unwind$symtable_visit_comprehension
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$symtable_visit_comprehension DD 010e01H
	DD	0820eH
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT symtable_visit_comprehension
_TEXT	SEGMENT
i$23008 = 32
seq$23009 = 40
elt$23014 = 48
tv83 = 56
st$ = 80
lc$ = 88
symtable_visit_comprehension PROC			; COMDAT

; 1603 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1604 :     VISIT(st, expr, lc->target);

  0000e	48 8b 44 24 58	 mov	 rax, QWORD PTR lc$[rsp]
  00013	48 8b 10	 mov	 rdx, QWORD PTR [rax]
  00016	48 8b 4c 24 50	 mov	 rcx, QWORD PTR st$[rsp]
  0001b	e8 00 00 00 00	 call	 symtable_visit_expr
  00020	85 c0		 test	 eax, eax
  00022	75 19		 jne	 SHORT $LN6@symtable_v@13
  00024	48 8b 44 24 50	 mov	 rax, QWORD PTR st$[rsp]
  00029	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  0002c	ff c8		 dec	 eax
  0002e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR st$[rsp]
  00033	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  00036	33 c0		 xor	 eax, eax
  00038	e9 c2 00 00 00	 jmp	 $LN7@symtable_v@13
$LN6@symtable_v@13:

; 1605 :     VISIT(st, expr, lc->iter);

  0003d	48 8b 44 24 58	 mov	 rax, QWORD PTR lc$[rsp]
  00042	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  00046	48 8b 4c 24 50	 mov	 rcx, QWORD PTR st$[rsp]
  0004b	e8 00 00 00 00	 call	 symtable_visit_expr
  00050	85 c0		 test	 eax, eax
  00052	75 19		 jne	 SHORT $LN5@symtable_v@13
  00054	48 8b 44 24 50	 mov	 rax, QWORD PTR st$[rsp]
  00059	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  0005c	ff c8		 dec	 eax
  0005e	48 8b 4c 24 50	 mov	 rcx, QWORD PTR st$[rsp]
  00063	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  00066	33 c0		 xor	 eax, eax
  00068	e9 92 00 00 00	 jmp	 $LN7@symtable_v@13
$LN5@symtable_v@13:

; 1606 :     VISIT_SEQ(st, expr, lc->ifs);

  0006d	48 8b 44 24 58	 mov	 rax, QWORD PTR lc$[rsp]
  00072	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00076	48 89 44 24 28	 mov	 QWORD PTR seq$23009[rsp], rax
  0007b	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$23008[rsp], 0
  00083	eb 0a		 jmp	 SHORT $LN4@symtable_v@13
$LN3@symtable_v@13:
  00085	8b 44 24 20	 mov	 eax, DWORD PTR i$23008[rsp]
  00089	ff c0		 inc	 eax
  0008b	89 44 24 20	 mov	 DWORD PTR i$23008[rsp], eax
$LN4@symtable_v@13:
  0008f	48 83 7c 24 28
	00		 cmp	 QWORD PTR seq$23009[rsp], 0
  00095	75 0b		 jne	 SHORT $LN9@symtable_v@13
  00097	48 c7 44 24 38
	00 00 00 00	 mov	 QWORD PTR tv83[rsp], 0
  000a0	eb 0d		 jmp	 SHORT $LN10@symtable_v@13
$LN9@symtable_v@13:
  000a2	48 8b 44 24 28	 mov	 rax, QWORD PTR seq$23009[rsp]
  000a7	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000aa	48 89 44 24 38	 mov	 QWORD PTR tv83[rsp], rax
$LN10@symtable_v@13:
  000af	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$23008[rsp]
  000b4	48 3b 44 24 38	 cmp	 rax, QWORD PTR tv83[rsp]
  000b9	7d 3f		 jge	 SHORT $LN2@symtable_v@13
  000bb	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$23008[rsp]
  000c0	48 8b 4c 24 28	 mov	 rcx, QWORD PTR seq$23009[rsp]
  000c5	48 8b 44 c1 08	 mov	 rax, QWORD PTR [rcx+rax*8+8]
  000ca	48 89 44 24 30	 mov	 QWORD PTR elt$23014[rsp], rax
  000cf	48 8b 54 24 30	 mov	 rdx, QWORD PTR elt$23014[rsp]
  000d4	48 8b 4c 24 50	 mov	 rcx, QWORD PTR st$[rsp]
  000d9	e8 00 00 00 00	 call	 symtable_visit_expr
  000de	85 c0		 test	 eax, eax
  000e0	75 16		 jne	 SHORT $LN1@symtable_v@13
  000e2	48 8b 44 24 50	 mov	 rax, QWORD PTR st$[rsp]
  000e7	8b 40 48	 mov	 eax, DWORD PTR [rax+72]
  000ea	ff c8		 dec	 eax
  000ec	48 8b 4c 24 50	 mov	 rcx, QWORD PTR st$[rsp]
  000f1	89 41 48	 mov	 DWORD PTR [rcx+72], eax
  000f4	33 c0		 xor	 eax, eax
  000f6	eb 07		 jmp	 SHORT $LN7@symtable_v@13
$LN1@symtable_v@13:
  000f8	eb 8b		 jmp	 SHORT $LN3@symtable_v@13
$LN2@symtable_v@13:

; 1607 :     return 1;

  000fa	b8 01 00 00 00	 mov	 eax, 1
$LN7@symtable_v@13:

; 1608 : }

  000ff	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00103	c3		 ret	 0
symtable_visit_comprehension ENDP
_TEXT	ENDS
PUBLIC	??_C@_08PDNBGMFN@listcomp?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$symtable_visit_listcomp DD imagerel symtable_visit_listcomp
	DD	imagerel symtable_visit_listcomp+126
	DD	imagerel $unwind$symtable_visit_listcomp
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$symtable_visit_listcomp DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_08PDNBGMFN@listcomp?$AA@
CONST	SEGMENT
??_C@_08PDNBGMFN@listcomp?$AA@ DB 'listcomp', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT symtable_visit_listcomp
_TEXT	SEGMENT
tv73 = 48
st$ = 80
e$ = 88
symtable_visit_listcomp PROC				; COMDAT

; 1688 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1689 :     return symtable_handle_comprehension(st, e, GET_IDENTIFIER(listcomp),
; 1690 :                                          e->v.ListComp.generators,
; 1691 :                                          e->v.ListComp.elt, NULL);

  0000e	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR listcomp, 0
  00016	74 0e		 je	 SHORT $LN3@symtable_v@14
  00018	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR listcomp
  0001f	48 89 44 24 30	 mov	 QWORD PTR tv73[rsp], rax
  00024	eb 1f		 jmp	 SHORT $LN4@symtable_v@14
$LN3@symtable_v@14:
  00026	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08PDNBGMFN@listcomp?$AA@
  0002d	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  00032	48 89 05 00 00
	00 00		 mov	 QWORD PTR listcomp, rax
  00039	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR listcomp
  00040	48 89 44 24 30	 mov	 QWORD PTR tv73[rsp], rax
$LN4@symtable_v@14:
  00045	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR [rsp+40], 0
  0004e	48 8b 44 24 58	 mov	 rax, QWORD PTR e$[rsp]
  00053	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00057	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0005c	48 8b 44 24 58	 mov	 rax, QWORD PTR e$[rsp]
  00061	4c 8b 48 10	 mov	 r9, QWORD PTR [rax+16]
  00065	4c 8b 44 24 30	 mov	 r8, QWORD PTR tv73[rsp]
  0006a	48 8b 54 24 58	 mov	 rdx, QWORD PTR e$[rsp]
  0006f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR st$[rsp]
  00074	e8 00 00 00 00	 call	 symtable_handle_comprehension

; 1692 : }

  00079	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0007d	c3		 ret	 0
symtable_visit_listcomp ENDP
_TEXT	ENDS
PUBLIC	??_C@_07CDNIFBDN@setcomp?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$symtable_visit_setcomp DD imagerel symtable_visit_setcomp
	DD	imagerel symtable_visit_setcomp+126
	DD	imagerel $unwind$symtable_visit_setcomp
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$symtable_visit_setcomp DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_07CDNIFBDN@setcomp?$AA@
CONST	SEGMENT
??_C@_07CDNIFBDN@setcomp?$AA@ DB 'setcomp', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT symtable_visit_setcomp
_TEXT	SEGMENT
tv73 = 48
st$ = 80
e$ = 88
symtable_visit_setcomp PROC				; COMDAT

; 1696 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1697 :     return symtable_handle_comprehension(st, e, GET_IDENTIFIER(setcomp),
; 1698 :                                          e->v.SetComp.generators,
; 1699 :                                          e->v.SetComp.elt, NULL);

  0000e	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR setcomp, 0
  00016	74 0e		 je	 SHORT $LN3@symtable_v@15
  00018	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR setcomp
  0001f	48 89 44 24 30	 mov	 QWORD PTR tv73[rsp], rax
  00024	eb 1f		 jmp	 SHORT $LN4@symtable_v@15
$LN3@symtable_v@15:
  00026	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_07CDNIFBDN@setcomp?$AA@
  0002d	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  00032	48 89 05 00 00
	00 00		 mov	 QWORD PTR setcomp, rax
  00039	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR setcomp
  00040	48 89 44 24 30	 mov	 QWORD PTR tv73[rsp], rax
$LN4@symtable_v@15:
  00045	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR [rsp+40], 0
  0004e	48 8b 44 24 58	 mov	 rax, QWORD PTR e$[rsp]
  00053	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00057	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0005c	48 8b 44 24 58	 mov	 rax, QWORD PTR e$[rsp]
  00061	4c 8b 48 10	 mov	 r9, QWORD PTR [rax+16]
  00065	4c 8b 44 24 30	 mov	 r8, QWORD PTR tv73[rsp]
  0006a	48 8b 54 24 58	 mov	 rdx, QWORD PTR e$[rsp]
  0006f	48 8b 4c 24 50	 mov	 rcx, QWORD PTR st$[rsp]
  00074	e8 00 00 00 00	 call	 symtable_handle_comprehension

; 1700 : }

  00079	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0007d	c3		 ret	 0
symtable_visit_setcomp ENDP
_TEXT	ENDS
PUBLIC	??_C@_08CPNHFCIL@dictcomp?$AA@			; `string'
;	COMDAT pdata
pdata	SEGMENT
$pdata$symtable_visit_dictcomp DD imagerel symtable_visit_dictcomp
	DD	imagerel symtable_visit_dictcomp+131
	DD	imagerel $unwind$symtable_visit_dictcomp
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$symtable_visit_dictcomp DD 010e01H
	DD	0820eH
xdata	ENDS
;	COMDAT ??_C@_08CPNHFCIL@dictcomp?$AA@
CONST	SEGMENT
??_C@_08CPNHFCIL@dictcomp?$AA@ DB 'dictcomp', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT symtable_visit_dictcomp
_TEXT	SEGMENT
tv74 = 48
st$ = 80
e$ = 88
symtable_visit_dictcomp PROC				; COMDAT

; 1704 : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 1705 :     return symtable_handle_comprehension(st, e, GET_IDENTIFIER(dictcomp),
; 1706 :                                          e->v.DictComp.generators,
; 1707 :                                          e->v.DictComp.key,
; 1708 :                                          e->v.DictComp.value);

  0000e	48 83 3d 00 00
	00 00 00	 cmp	 QWORD PTR dictcomp, 0
  00016	74 0e		 je	 SHORT $LN3@symtable_v@16
  00018	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR dictcomp
  0001f	48 89 44 24 30	 mov	 QWORD PTR tv74[rsp], rax
  00024	eb 1f		 jmp	 SHORT $LN4@symtable_v@16
$LN3@symtable_v@16:
  00026	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_08CPNHFCIL@dictcomp?$AA@
  0002d	e8 00 00 00 00	 call	 PyUnicode_InternFromString
  00032	48 89 05 00 00
	00 00		 mov	 QWORD PTR dictcomp, rax
  00039	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR dictcomp
  00040	48 89 44 24 30	 mov	 QWORD PTR tv74[rsp], rax
$LN4@symtable_v@16:
  00045	48 8b 44 24 58	 mov	 rax, QWORD PTR e$[rsp]
  0004a	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  0004e	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00053	48 8b 44 24 58	 mov	 rax, QWORD PTR e$[rsp]
  00058	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0005c	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00061	48 8b 44 24 58	 mov	 rax, QWORD PTR e$[rsp]
  00066	4c 8b 48 18	 mov	 r9, QWORD PTR [rax+24]
  0006a	4c 8b 44 24 30	 mov	 r8, QWORD PTR tv74[rsp]
  0006f	48 8b 54 24 58	 mov	 rdx, QWORD PTR e$[rsp]
  00074	48 8b 4c 24 50	 mov	 rcx, QWORD PTR st$[rsp]
  00079	e8 00 00 00 00	 call	 symtable_handle_comprehension

; 1709 : }

  0007e	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00082	c3		 ret	 0
symtable_visit_dictcomp ENDP
_TEXT	ENDS
END
