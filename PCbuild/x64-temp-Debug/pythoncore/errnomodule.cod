; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.40219.01 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_05PEAMIKEP@errno?$AA@			; `string'
_BSS	SEGMENT
errno_methods DB 020H DUP (?)
_BSS	ENDS
;	COMDAT ??_C@_05PEAMIKEP@errno?$AA@
CONST	SEGMENT
??_C@_05PEAMIKEP@errno?$AA@ DB 'errno', 00H		; `string'
CONST	ENDS
_DATA	SEGMENT
errno__doc__ DB	'This module makes available standard errno system symbol'
	DB	's.', 0aH, 0aH, 'The value of each symbol is the corresponding'
	DB	' integer value,', 0aH, 'e.g., on most systems, errno.ENOENT e'
	DB	'quals the integer 2.', 0aH, 0aH, 'The dictionary errno.errorc'
	DB	'ode maps numeric codes to symbol names,', 0aH, 'e.g., errno.e'
	DB	'rrorcode[2] could be the string ''ENOENT''.', 0aH, 0aH, 'Symb'
	DB	'ols that are not relevant to the underlying system are not de'
	DB	'fined.', 0aH, 0aH, 'To map error codes to error messages, use'
	DB	' the function os.strerror(),', 0aH, 'e.g. os.strerror(2) coul'
	DB	'd return ''No such file or directory''.', 00H
	ORG $+4
errnomodule DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000000H
	ORG $+8
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	dead1234beef5678H
	DQ	dead1234beef5678H
	DQ	0000000000000001H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	ORG $+8
	DQ	FLAT:??_C@_05PEAMIKEP@errno?$AA@
	DQ	FLAT:errno__doc__
	DQ	ffffffffffffffffH
	DQ	FLAT:errno_methods
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	0000000000000000H
_DATA	ENDS
PUBLIC	_Py_DecRef
PUBLIC	??_C@_07NFHNCCMK@ENOTSUP?$AA@			; `string'
PUBLIC	??_C@_0BA@NJDAMECN@ENOTRECOVERABLE?$AA@		; `string'
PUBLIC	??_C@_0L@MFHDJDKB@EOWNERDEAD?$AA@		; `string'
PUBLIC	??_C@_09FIKDCFKM@ECANCELED?$AA@			; `string'
PUBLIC	??_C@_0N@KABONKCJ@WSAENETRESET?$AA@		; `string'
PUBLIC	??_C@_0BA@ECEEDLKJ@WSAECONNREFUSED?$AA@		; `string'
PUBLIC	??_C@_0BA@BLGPIJAD@WSAEDESTADDRREQ?$AA@		; `string'
PUBLIC	??_C@_0BD@KNONLHOA@WSAESOCKTNOSUPPORT?$AA@	; `string'
PUBLIC	??_C@_0P@FHEJEBJC@WSAEINPROGRESS?$AA@		; `string'
PUBLIC	??_C@_09PDAAOFKK@WSAEINVAL?$AA@			; `string'
PUBLIC	??_C@_0L@FBDKOKMM@WSAEREMOTE?$AA@		; `string'
PUBLIC	??_C@_0M@BJHJCMPN@WSAENOTCONN?$AA@		; `string'
PUBLIC	??_C@_09DHBOOMJK@WSAEDQUOT?$AA@			; `string'
PUBLIC	??_C@_0L@KMBJICHC@WSAEISCONN?$AA@		; `string'
PUBLIC	??_C@_0O@IFNEEJHC@WSAEOPNOTSUPP?$AA@		; `string'
PUBLIC	??_C@_0BA@KKILJDEG@WSAEPFNOSUPPORT?$AA@		; `string'
PUBLIC	??_C@_0P@BLDHJENA@WSAEWOULDBLOCK?$AA@		; `string'
PUBLIC	??_C@_0P@MDJAKAKC@WSASYSNOTREADY?$AA@		; `string'
PUBLIC	??_C@_0BD@EDJBJFH@WSAEPROTONOSUPPORT?$AA@	; `string'
PUBLIC	??_C@_0M@EAGDEEAC@WSAEALREADY?$AA@		; `string'
PUBLIC	??_C@_0BB@MBBPJMGK@WSAEADDRNOTAVAIL?$AA@	; `string'
PUBLIC	??_C@_0O@OPDDJBEB@WSAEADDRINUSE?$AA@		; `string'
PUBLIC	??_C@_0O@HCKGAENP@WSAEPROTOTYPE?$AA@		; `string'
PUBLIC	??_C@_08KEJFHKFF@WSAEINTR?$AA@			; `string'
PUBLIC	??_C@_0L@EEHHIAEC@WSAEDISCON?$AA@		; `string'
PUBLIC	??_C@_0L@OOBBNNPD@WSAENOBUFS?$AA@		; `string'
PUBLIC	??_C@_0N@BJEDIOFA@WSAETIMEDOUT?$AA@		; `string'
PUBLIC	??_C@_0O@CIPFFFJE@WSAECONNRESET?$AA@		; `string'
PUBLIC	??_C@_08LJKOCPDH@WSAEBADF?$AA@			; `string'
PUBLIC	??_C@_0M@PJKLHKI@WSAEMSGSIZE?$AA@		; `string'
PUBLIC	??_C@_0L@IGIFNHIB@WSABASEERR?$AA@		; `string'
PUBLIC	??_C@_09EKFHKCJJ@WSAEACCES?$AA@			; `string'
PUBLIC	??_C@_0BA@COKPFEMB@WSAETOOMANYREFS?$AA@		; `string'
PUBLIC	??_C@_0BA@DNDGDCNF@WSAEAFNOSUPPORT?$AA@		; `string'
PUBLIC	??_C@_0N@JOJKMOCF@WSAESHUTDOWN?$AA@		; `string'
PUBLIC	??_C@_0N@KFICKHOH@WSAENOTEMPTY?$AA@		; `string'
PUBLIC	??_C@_0BA@PCKIJCGI@WSAENAMETOOLONG?$AA@		; `string'
PUBLIC	??_C@_0BA@HNCPIGIO@WSAECONNABORTED?$AA@		; `string'
PUBLIC	??_C@_0P@KODINEND@WSAENOPROTOOPT?$AA@		; `string'
PUBLIC	??_C@_09IOPCJPLP@WSAEUSERS?$AA@			; `string'
PUBLIC	??_C@_0BC@CLCHBKPK@WSANOTINITIALISED?$AA@	; `string'
PUBLIC	??_C@_09BIHAGEEK@WSAEFAULT?$AA@			; `string'
PUBLIC	??_C@_0M@CDIHOKBK@WSAEPROCLIM?$AA@		; `string'
PUBLIC	??_C@_0P@MMGFNLEA@WSAENETUNREACH?$AA@		; `string'
PUBLIC	??_C@_0BD@PKACBPOA@WSAVERNOTSUPPORTED?$AA@	; `string'
PUBLIC	??_C@_09GPMJAMEI@WSAESTALE?$AA@			; `string'
PUBLIC	??_C@_09IJIBIDKO@WSAEMFILE?$AA@			; `string'
PUBLIC	??_C@_08PGIMLMFD@WSAELOOP?$AA@			; `string'
PUBLIC	??_C@_0BA@HKCFHLFG@WSAEHOSTUNREACH?$AA@		; `string'
PUBLIC	??_C@_0M@MDGNMGJ@WSAENOTSOCK?$AA@		; `string'
PUBLIC	??_C@_0M@BMNODHFM@WSAENETDOWN?$AA@		; `string'
PUBLIC	??_C@_0N@NJBKCOKK@WSAEHOSTDOWN?$AA@		; `string'
PUBLIC	??_C@_05PAHIOBGD@ENXIO?$AA@			; `string'
PUBLIC	??_C@_0M@NFKGMJFK@EINPROGRESS?$AA@		; `string'
PUBLIC	??_C@_07DFOKCEGI@ETXTBSY?$AA@			; `string'
PUBLIC	??_C@_06CEHBGFH@EMFILE?$AA@			; `string'
PUBLIC	??_C@_0N@LLJCPBML@ETOOMANYREFS?$AA@		; `string'
PUBLIC	??_C@_09MPHFKLCM@EDEADLOCK?$AA@			; `string'
PUBLIC	??_C@_05MPGLBOOM@ETIME?$AA@			; `string'
PUBLIC	??_C@_0BA@CLGCDGBO@ESOCKTNOSUPPORT?$AA@		; `string'
PUBLIC	??_C@_06NPPCCGFP@ENOTTY?$AA@			; `string'
PUBLIC	??_C@_0N@GHJFDHGC@ENAMETOOLONG?$AA@		; `string'
PUBLIC	??_C@_06GIGOMMFD@EAGAIN?$AA@			; `string'
PUBLIC	??_C@_0L@GCKIEACE@EOPNOTSUPP?$AA@		; `string'
PUBLIC	??_C@_0L@IEPJIBH@EADDRINUSE?$AA@		; `string'
PUBLIC	??_C@_0L@MPIJFMMC@ECONNRESET?$AA@		; `string'
PUBLIC	??_C@_06NDGFKNFB@ERANGE?$AA@			; `string'
PUBLIC	??_C@_06NFPAPHBG@EMLINK?$AA@			; `string'
PUBLIC	??_C@_08EJCNGKJA@ENOTSOCK?$AA@			; `string'
PUBLIC	??_C@_06MBKJCAFI@ENOMEM?$AA@			; `string'
PUBLIC	??_C@_05NDGLMEPP@ENOSR?$AA@			; `string'
PUBLIC	??_C@_06OEAPJJLB@ESTALE?$AA@			; `string'
PUBLIC	??_C@_0M@EOIKFDII@ENETUNREACH?$AA@		; `string'
PUBLIC	??_C@_0N@OIBCCDIE@ECONNABORTED?$AA@		; `string'
PUBLIC	??_C@_06CLMCJMAJ@ENOLCK?$AA@			; `string'
PUBLIC	??_C@_0N@IOFCCMAJ@EDESTADDRREQ?$AA@		; `string'
PUBLIC	??_C@_08FMGCJKAE@ENOTCONN?$AA@			; `string'
PUBLIC	??_C@_07PJJHKFD@EDEADLK?$AA@			; `string'
PUBLIC	??_C@_05DHHFJHFB@EFBIG?$AA@			; `string'
PUBLIC	??_C@_06JDLGPBLD@EFAULT?$AA@			; `string'
PUBLIC	??_C@_06KBNBMHCN@ENOSTR?$AA@			; `string'
PUBLIC	??_C@_06LMNIHJGD@EDQUOT?$AA@			; `string'
PUBLIC	??_C@_06HFGHHKIE@EEXIST?$AA@			; `string'
PUBLIC	??_C@_06JDEIEOEO@ENOENT?$AA@			; `string'
PUBLIC	??_C@_09NNGHNPFO@ETIMEDOUT?$AA@			; `string'
PUBLIC	??_C@_09GEDKILCH@ENETRESET?$AA@			; `string'
PUBLIC	??_C@_07DAMMOHJ@ENOLINK?$AA@			; `string'
PUBLIC	??_C@_06MBAHENIK@ESPIPE?$AA@			; `string'
PUBLIC	??_C@_06IENDGEPJ@ENFILE?$AA@			; `string'
PUBLIC	??_C@_07PJPPGGME@EBADMSG?$AA@			; `string'
PUBLIC	??_C@_05HKNCPLEH@EIDRM?$AA@			; `string'
PUBLIC	??_C@_0O@CBFPEINB@EADDRNOTAVAIL?$AA@		; `string'
PUBLIC	??_C@_05HFINOOKG@EROFS?$AA@			; `string'
PUBLIC	??_C@_0BA@ICLGJIKJ@EPROTONOSUPPORT?$AA@		; `string'
PUBLIC	??_C@_06MAPENCBD@EISDIR?$AA@			; `string'
PUBLIC	??_C@_0N@NHHJJOKD@ECONNREFUSED?$AA@		; `string'
PUBLIC	??_C@_04IDKJOLAE@EDOM?$AA@			; `string'
PUBLIC	??_C@_05KPJOGJNB@EPERM?$AA@			; `string'
PUBLIC	??_C@_07DPLJHFHK@ENOTDIR?$AA@			; `string'
PUBLIC	??_C@_06MNLNBHMB@EILSEQ?$AA@			; `string'
PUBLIC	??_C@_06MBJBDHGA@EACCES?$AA@			; `string'
PUBLIC	??_C@_08FJMFIBKF@ENETDOWN?$AA@			; `string'
PUBLIC	??_C@_08FHIPCPL@EALREADY?$AA@			; `string'
PUBLIC	??_C@_07CCDFPJBL@ENOEXEC?$AA@			; `string'
PUBLIC	??_C@_06PFABEMOB@ENOSPC?$AA@			; `string'
PUBLIC	??_C@_0L@JFNKANIJ@EPROTOTYPE?$AA@		; `string'
PUBLIC	??_C@_03HKNLGNGJ@EIO?$AA@			; `string'
PUBLIC	??_C@_05MBIDDMGN@EBADF?$AA@			; `string'
PUBLIC	??_C@_09FKLOJPCL@ESHUTDOWN?$AA@			; `string'
PUBLIC	??_C@_07GIPDAOFP@EISCONN?$AA@			; `string'
PUBLIC	??_C@_0M@JJNIBMBI@EWOULDBLOCK?$AA@		; `string'
PUBLIC	??_C@_05MKMLEHMO@EBUSY?$AA@			; `string'
PUBLIC	??_C@_0M@CMNHFMBL@ENOPROTOOPT?$AA@		; `string'
PUBLIC	??_C@_0N@DPLGDGEM@EPFNOSUPPORT?$AA@		; `string'
PUBLIC	??_C@_09BNDOHPKE@EHOSTDOWN?$AA@			; `string'
PUBLIC	??_C@_0N@KIALJHNP@EAFNOSUPPORT?$AA@		; `string'
PUBLIC	??_C@_08EKIBABFB@EMSGSIZE?$AA@			; `string'
PUBLIC	??_C@_05EFGDEBCF@ESRCH?$AA@			; `string'
PUBLIC	??_C@_05DLCHNBFO@E2BIG?$AA@			; `string'
PUBLIC	??_C@_05JHANDLBK@EXDEV?$AA@			; `string'
PUBLIC	??_C@_05IOKBKPAJ@ELOOP?$AA@			; `string'
PUBLIC	??_C@_06JOGGPIAH@ECHILD?$AA@			; `string'
PUBLIC	??_C@_07JFNAGGOB@EREMOTE?$AA@			; `string'
PUBLIC	??_C@_06OFNOHDMO@EPROTO?$AA@			; `string'
PUBLIC	??_C@_07CKPLFBNO@ENOBUFS?$AA@			; `string'
PUBLIC	??_C@_09GBKGPGOJ@ENOTEMPTY?$AA@			; `string'
PUBLIC	??_C@_06FDEAKEG@EUSERS?$AA@			; `string'
PUBLIC	??_C@_05NMLIGJAP@EINTR?$AA@			; `string'
PUBLIC	??_C@_09CJLMNFNK@EOVERFLOW?$AA@			; `string'
PUBLIC	??_C@_06HIMGHAFD@EINVAL?$AA@			; `string'
PUBLIC	??_C@_05COBFIIAP@EPIPE?$AA@			; `string'
PUBLIC	??_C@_06LABCGFDP@ENOSYS?$AA@			; `string'
PUBLIC	??_C@_07BNJGGDHL@ENODATA?$AA@			; `string'
PUBLIC	??_C@_06CDONBHBA@ENOMSG?$AA@			; `string'
PUBLIC	??_C@_0N@OPBINOFM@EHOSTUNREACH?$AA@		; `string'
PUBLIC	??_C@_06BFJHKEEI@ENODEV?$AA@			; `string'
PUBLIC	??_C@_09MKAMKDBD@errorcode?$AA@			; `string'
PUBLIC	PyInit_errno
EXTRN	PyDict_SetItemString:PROC
EXTRN	PyDict_New:PROC
EXTRN	PyModule_GetDict:PROC
EXTRN	PyModule_Create2TraceRefs:PROC
;	COMDAT pdata
; File c:\src\pyparallel\modules\errnomodule.c
pdata	SEGMENT
$pdata$PyInit_errno DD imagerel $LN6
	DD	imagerel $LN6+4027
	DD	imagerel $unwind$PyInit_errno
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PyInit_errno DD 010401H
	DD	08204H
xdata	ENDS
;	COMDAT ??_C@_07NFHNCCMK@ENOTSUP?$AA@
CONST	SEGMENT
??_C@_07NFHNCCMK@ENOTSUP?$AA@ DB 'ENOTSUP', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@NJDAMECN@ENOTRECOVERABLE?$AA@
CONST	SEGMENT
??_C@_0BA@NJDAMECN@ENOTRECOVERABLE?$AA@ DB 'ENOTRECOVERABLE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MFHDJDKB@EOWNERDEAD?$AA@
CONST	SEGMENT
??_C@_0L@MFHDJDKB@EOWNERDEAD?$AA@ DB 'EOWNERDEAD', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09FIKDCFKM@ECANCELED?$AA@
CONST	SEGMENT
??_C@_09FIKDCFKM@ECANCELED?$AA@ DB 'ECANCELED', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@KABONKCJ@WSAENETRESET?$AA@
CONST	SEGMENT
??_C@_0N@KABONKCJ@WSAENETRESET?$AA@ DB 'WSAENETRESET', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@ECEEDLKJ@WSAECONNREFUSED?$AA@
CONST	SEGMENT
??_C@_0BA@ECEEDLKJ@WSAECONNREFUSED?$AA@ DB 'WSAECONNREFUSED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@BLGPIJAD@WSAEDESTADDRREQ?$AA@
CONST	SEGMENT
??_C@_0BA@BLGPIJAD@WSAEDESTADDRREQ?$AA@ DB 'WSAEDESTADDRREQ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@KNONLHOA@WSAESOCKTNOSUPPORT?$AA@
CONST	SEGMENT
??_C@_0BD@KNONLHOA@WSAESOCKTNOSUPPORT?$AA@ DB 'WSAESOCKTNOSUPPORT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@FHEJEBJC@WSAEINPROGRESS?$AA@
CONST	SEGMENT
??_C@_0P@FHEJEBJC@WSAEINPROGRESS?$AA@ DB 'WSAEINPROGRESS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09PDAAOFKK@WSAEINVAL?$AA@
CONST	SEGMENT
??_C@_09PDAAOFKK@WSAEINVAL?$AA@ DB 'WSAEINVAL', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FBDKOKMM@WSAEREMOTE?$AA@
CONST	SEGMENT
??_C@_0L@FBDKOKMM@WSAEREMOTE?$AA@ DB 'WSAEREMOTE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@BJHJCMPN@WSAENOTCONN?$AA@
CONST	SEGMENT
??_C@_0M@BJHJCMPN@WSAENOTCONN?$AA@ DB 'WSAENOTCONN', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09DHBOOMJK@WSAEDQUOT?$AA@
CONST	SEGMENT
??_C@_09DHBOOMJK@WSAEDQUOT?$AA@ DB 'WSAEDQUOT', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@KMBJICHC@WSAEISCONN?$AA@
CONST	SEGMENT
??_C@_0L@KMBJICHC@WSAEISCONN?$AA@ DB 'WSAEISCONN', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@IFNEEJHC@WSAEOPNOTSUPP?$AA@
CONST	SEGMENT
??_C@_0O@IFNEEJHC@WSAEOPNOTSUPP?$AA@ DB 'WSAEOPNOTSUPP', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@KKILJDEG@WSAEPFNOSUPPORT?$AA@
CONST	SEGMENT
??_C@_0BA@KKILJDEG@WSAEPFNOSUPPORT?$AA@ DB 'WSAEPFNOSUPPORT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BLDHJENA@WSAEWOULDBLOCK?$AA@
CONST	SEGMENT
??_C@_0P@BLDHJENA@WSAEWOULDBLOCK?$AA@ DB 'WSAEWOULDBLOCK', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@MDJAKAKC@WSASYSNOTREADY?$AA@
CONST	SEGMENT
??_C@_0P@MDJAKAKC@WSASYSNOTREADY?$AA@ DB 'WSASYSNOTREADY', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@EDJBJFH@WSAEPROTONOSUPPORT?$AA@
CONST	SEGMENT
??_C@_0BD@EDJBJFH@WSAEPROTONOSUPPORT?$AA@ DB 'WSAEPROTONOSUPPORT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@EAGDEEAC@WSAEALREADY?$AA@
CONST	SEGMENT
??_C@_0M@EAGDEEAC@WSAEALREADY?$AA@ DB 'WSAEALREADY', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@MBBPJMGK@WSAEADDRNOTAVAIL?$AA@
CONST	SEGMENT
??_C@_0BB@MBBPJMGK@WSAEADDRNOTAVAIL?$AA@ DB 'WSAEADDRNOTAVAIL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@OPDDJBEB@WSAEADDRINUSE?$AA@
CONST	SEGMENT
??_C@_0O@OPDDJBEB@WSAEADDRINUSE?$AA@ DB 'WSAEADDRINUSE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@HCKGAENP@WSAEPROTOTYPE?$AA@
CONST	SEGMENT
??_C@_0O@HCKGAENP@WSAEPROTOTYPE?$AA@ DB 'WSAEPROTOTYPE', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08KEJFHKFF@WSAEINTR?$AA@
CONST	SEGMENT
??_C@_08KEJFHKFF@WSAEINTR?$AA@ DB 'WSAEINTR', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@EEHHIAEC@WSAEDISCON?$AA@
CONST	SEGMENT
??_C@_0L@EEHHIAEC@WSAEDISCON?$AA@ DB 'WSAEDISCON', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@OOBBNNPD@WSAENOBUFS?$AA@
CONST	SEGMENT
??_C@_0L@OOBBNNPD@WSAENOBUFS?$AA@ DB 'WSAENOBUFS', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@BJEDIOFA@WSAETIMEDOUT?$AA@
CONST	SEGMENT
??_C@_0N@BJEDIOFA@WSAETIMEDOUT?$AA@ DB 'WSAETIMEDOUT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@CIPFFFJE@WSAECONNRESET?$AA@
CONST	SEGMENT
??_C@_0O@CIPFFFJE@WSAECONNRESET?$AA@ DB 'WSAECONNRESET', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08LJKOCPDH@WSAEBADF?$AA@
CONST	SEGMENT
??_C@_08LJKOCPDH@WSAEBADF?$AA@ DB 'WSAEBADF', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@PJKLHKI@WSAEMSGSIZE?$AA@
CONST	SEGMENT
??_C@_0M@PJKLHKI@WSAEMSGSIZE?$AA@ DB 'WSAEMSGSIZE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@IGIFNHIB@WSABASEERR?$AA@
CONST	SEGMENT
??_C@_0L@IGIFNHIB@WSABASEERR?$AA@ DB 'WSABASEERR', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09EKFHKCJJ@WSAEACCES?$AA@
CONST	SEGMENT
??_C@_09EKFHKCJJ@WSAEACCES?$AA@ DB 'WSAEACCES', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@COKPFEMB@WSAETOOMANYREFS?$AA@
CONST	SEGMENT
??_C@_0BA@COKPFEMB@WSAETOOMANYREFS?$AA@ DB 'WSAETOOMANYREFS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@DNDGDCNF@WSAEAFNOSUPPORT?$AA@
CONST	SEGMENT
??_C@_0BA@DNDGDCNF@WSAEAFNOSUPPORT?$AA@ DB 'WSAEAFNOSUPPORT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@JOJKMOCF@WSAESHUTDOWN?$AA@
CONST	SEGMENT
??_C@_0N@JOJKMOCF@WSAESHUTDOWN?$AA@ DB 'WSAESHUTDOWN', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@KFICKHOH@WSAENOTEMPTY?$AA@
CONST	SEGMENT
??_C@_0N@KFICKHOH@WSAENOTEMPTY?$AA@ DB 'WSAENOTEMPTY', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@PCKIJCGI@WSAENAMETOOLONG?$AA@
CONST	SEGMENT
??_C@_0BA@PCKIJCGI@WSAENAMETOOLONG?$AA@ DB 'WSAENAMETOOLONG', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@HNCPIGIO@WSAECONNABORTED?$AA@
CONST	SEGMENT
??_C@_0BA@HNCPIGIO@WSAECONNABORTED?$AA@ DB 'WSAECONNABORTED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@KODINEND@WSAENOPROTOOPT?$AA@
CONST	SEGMENT
??_C@_0P@KODINEND@WSAENOPROTOOPT?$AA@ DB 'WSAENOPROTOOPT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09IOPCJPLP@WSAEUSERS?$AA@
CONST	SEGMENT
??_C@_09IOPCJPLP@WSAEUSERS?$AA@ DB 'WSAEUSERS', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@CLCHBKPK@WSANOTINITIALISED?$AA@
CONST	SEGMENT
??_C@_0BC@CLCHBKPK@WSANOTINITIALISED?$AA@ DB 'WSANOTINITIALISED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09BIHAGEEK@WSAEFAULT?$AA@
CONST	SEGMENT
??_C@_09BIHAGEEK@WSAEFAULT?$AA@ DB 'WSAEFAULT', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@CDIHOKBK@WSAEPROCLIM?$AA@
CONST	SEGMENT
??_C@_0M@CDIHOKBK@WSAEPROCLIM?$AA@ DB 'WSAEPROCLIM', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@MMGFNLEA@WSAENETUNREACH?$AA@
CONST	SEGMENT
??_C@_0P@MMGFNLEA@WSAENETUNREACH?$AA@ DB 'WSAENETUNREACH', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@PKACBPOA@WSAVERNOTSUPPORTED?$AA@
CONST	SEGMENT
??_C@_0BD@PKACBPOA@WSAVERNOTSUPPORTED?$AA@ DB 'WSAVERNOTSUPPORTED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09GPMJAMEI@WSAESTALE?$AA@
CONST	SEGMENT
??_C@_09GPMJAMEI@WSAESTALE?$AA@ DB 'WSAESTALE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09IJIBIDKO@WSAEMFILE?$AA@
CONST	SEGMENT
??_C@_09IJIBIDKO@WSAEMFILE?$AA@ DB 'WSAEMFILE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08PGIMLMFD@WSAELOOP?$AA@
CONST	SEGMENT
??_C@_08PGIMLMFD@WSAELOOP?$AA@ DB 'WSAELOOP', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@HKCFHLFG@WSAEHOSTUNREACH?$AA@
CONST	SEGMENT
??_C@_0BA@HKCFHLFG@WSAEHOSTUNREACH?$AA@ DB 'WSAEHOSTUNREACH', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MDGNMGJ@WSAENOTSOCK?$AA@
CONST	SEGMENT
??_C@_0M@MDGNMGJ@WSAENOTSOCK?$AA@ DB 'WSAENOTSOCK', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@BMNODHFM@WSAENETDOWN?$AA@
CONST	SEGMENT
??_C@_0M@BMNODHFM@WSAENETDOWN?$AA@ DB 'WSAENETDOWN', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NJBKCOKK@WSAEHOSTDOWN?$AA@
CONST	SEGMENT
??_C@_0N@NJBKCOKK@WSAEHOSTDOWN?$AA@ DB 'WSAEHOSTDOWN', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05PAHIOBGD@ENXIO?$AA@
CONST	SEGMENT
??_C@_05PAHIOBGD@ENXIO?$AA@ DB 'ENXIO', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@NFKGMJFK@EINPROGRESS?$AA@
CONST	SEGMENT
??_C@_0M@NFKGMJFK@EINPROGRESS?$AA@ DB 'EINPROGRESS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DFOKCEGI@ETXTBSY?$AA@
CONST	SEGMENT
??_C@_07DFOKCEGI@ETXTBSY?$AA@ DB 'ETXTBSY', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CEHBGFH@EMFILE?$AA@
CONST	SEGMENT
??_C@_06CEHBGFH@EMFILE?$AA@ DB 'EMFILE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LLJCPBML@ETOOMANYREFS?$AA@
CONST	SEGMENT
??_C@_0N@LLJCPBML@ETOOMANYREFS?$AA@ DB 'ETOOMANYREFS', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09MPHFKLCM@EDEADLOCK?$AA@
CONST	SEGMENT
??_C@_09MPHFKLCM@EDEADLOCK?$AA@ DB 'EDEADLOCK', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05MPGLBOOM@ETIME?$AA@
CONST	SEGMENT
??_C@_05MPGLBOOM@ETIME?$AA@ DB 'ETIME', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@CLGCDGBO@ESOCKTNOSUPPORT?$AA@
CONST	SEGMENT
??_C@_0BA@CLGCDGBO@ESOCKTNOSUPPORT?$AA@ DB 'ESOCKTNOSUPPORT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06NPPCCGFP@ENOTTY?$AA@
CONST	SEGMENT
??_C@_06NPPCCGFP@ENOTTY?$AA@ DB 'ENOTTY', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@GHJFDHGC@ENAMETOOLONG?$AA@
CONST	SEGMENT
??_C@_0N@GHJFDHGC@ENAMETOOLONG?$AA@ DB 'ENAMETOOLONG', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06GIGOMMFD@EAGAIN?$AA@
CONST	SEGMENT
??_C@_06GIGOMMFD@EAGAIN?$AA@ DB 'EAGAIN', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@GCKIEACE@EOPNOTSUPP?$AA@
CONST	SEGMENT
??_C@_0L@GCKIEACE@EOPNOTSUPP?$AA@ DB 'EOPNOTSUPP', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@IEPJIBH@EADDRINUSE?$AA@
CONST	SEGMENT
??_C@_0L@IEPJIBH@EADDRINUSE?$AA@ DB 'EADDRINUSE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MPIJFMMC@ECONNRESET?$AA@
CONST	SEGMENT
??_C@_0L@MPIJFMMC@ECONNRESET?$AA@ DB 'ECONNRESET', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06NDGFKNFB@ERANGE?$AA@
CONST	SEGMENT
??_C@_06NDGFKNFB@ERANGE?$AA@ DB 'ERANGE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06NFPAPHBG@EMLINK?$AA@
CONST	SEGMENT
??_C@_06NFPAPHBG@EMLINK?$AA@ DB 'EMLINK', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08EJCNGKJA@ENOTSOCK?$AA@
CONST	SEGMENT
??_C@_08EJCNGKJA@ENOTSOCK?$AA@ DB 'ENOTSOCK', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06MBKJCAFI@ENOMEM?$AA@
CONST	SEGMENT
??_C@_06MBKJCAFI@ENOMEM?$AA@ DB 'ENOMEM', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05NDGLMEPP@ENOSR?$AA@
CONST	SEGMENT
??_C@_05NDGLMEPP@ENOSR?$AA@ DB 'ENOSR', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OEAPJJLB@ESTALE?$AA@
CONST	SEGMENT
??_C@_06OEAPJJLB@ESTALE?$AA@ DB 'ESTALE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@EOIKFDII@ENETUNREACH?$AA@
CONST	SEGMENT
??_C@_0M@EOIKFDII@ENETUNREACH?$AA@ DB 'ENETUNREACH', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@OIBCCDIE@ECONNABORTED?$AA@
CONST	SEGMENT
??_C@_0N@OIBCCDIE@ECONNABORTED?$AA@ DB 'ECONNABORTED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06CLMCJMAJ@ENOLCK?$AA@
CONST	SEGMENT
??_C@_06CLMCJMAJ@ENOLCK?$AA@ DB 'ENOLCK', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@IOFCCMAJ@EDESTADDRREQ?$AA@
CONST	SEGMENT
??_C@_0N@IOFCCMAJ@EDESTADDRREQ?$AA@ DB 'EDESTADDRREQ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08FMGCJKAE@ENOTCONN?$AA@
CONST	SEGMENT
??_C@_08FMGCJKAE@ENOTCONN?$AA@ DB 'ENOTCONN', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07PJJHKFD@EDEADLK?$AA@
CONST	SEGMENT
??_C@_07PJJHKFD@EDEADLK?$AA@ DB 'EDEADLK', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05DHHFJHFB@EFBIG?$AA@
CONST	SEGMENT
??_C@_05DHHFJHFB@EFBIG?$AA@ DB 'EFBIG', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JDLGPBLD@EFAULT?$AA@
CONST	SEGMENT
??_C@_06JDLGPBLD@EFAULT?$AA@ DB 'EFAULT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KBNBMHCN@ENOSTR?$AA@
CONST	SEGMENT
??_C@_06KBNBMHCN@ENOSTR?$AA@ DB 'ENOSTR', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LMNIHJGD@EDQUOT?$AA@
CONST	SEGMENT
??_C@_06LMNIHJGD@EDQUOT?$AA@ DB 'EDQUOT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06HFGHHKIE@EEXIST?$AA@
CONST	SEGMENT
??_C@_06HFGHHKIE@EEXIST?$AA@ DB 'EEXIST', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JDEIEOEO@ENOENT?$AA@
CONST	SEGMENT
??_C@_06JDEIEOEO@ENOENT?$AA@ DB 'ENOENT', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09NNGHNPFO@ETIMEDOUT?$AA@
CONST	SEGMENT
??_C@_09NNGHNPFO@ETIMEDOUT?$AA@ DB 'ETIMEDOUT', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09GEDKILCH@ENETRESET?$AA@
CONST	SEGMENT
??_C@_09GEDKILCH@ENETRESET?$AA@ DB 'ENETRESET', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07DAMMOHJ@ENOLINK?$AA@
CONST	SEGMENT
??_C@_07DAMMOHJ@ENOLINK?$AA@ DB 'ENOLINK', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MBAHENIK@ESPIPE?$AA@
CONST	SEGMENT
??_C@_06MBAHENIK@ESPIPE?$AA@ DB 'ESPIPE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06IENDGEPJ@ENFILE?$AA@
CONST	SEGMENT
??_C@_06IENDGEPJ@ENFILE?$AA@ DB 'ENFILE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07PJPPGGME@EBADMSG?$AA@
CONST	SEGMENT
??_C@_07PJPPGGME@EBADMSG?$AA@ DB 'EBADMSG', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05HKNCPLEH@EIDRM?$AA@
CONST	SEGMENT
??_C@_05HKNCPLEH@EIDRM?$AA@ DB 'EIDRM', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@CBFPEINB@EADDRNOTAVAIL?$AA@
CONST	SEGMENT
??_C@_0O@CBFPEINB@EADDRNOTAVAIL?$AA@ DB 'EADDRNOTAVAIL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05HFINOOKG@EROFS?$AA@
CONST	SEGMENT
??_C@_05HFINOOKG@EROFS?$AA@ DB 'EROFS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@ICLGJIKJ@EPROTONOSUPPORT?$AA@
CONST	SEGMENT
??_C@_0BA@ICLGJIKJ@EPROTONOSUPPORT?$AA@ DB 'EPROTONOSUPPORT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06MAPENCBD@EISDIR?$AA@
CONST	SEGMENT
??_C@_06MAPENCBD@EISDIR?$AA@ DB 'EISDIR', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NHHJJOKD@ECONNREFUSED?$AA@
CONST	SEGMENT
??_C@_0N@NHHJJOKD@ECONNREFUSED?$AA@ DB 'ECONNREFUSED', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04IDKJOLAE@EDOM?$AA@
CONST	SEGMENT
??_C@_04IDKJOLAE@EDOM?$AA@ DB 'EDOM', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05KPJOGJNB@EPERM?$AA@
CONST	SEGMENT
??_C@_05KPJOGJNB@EPERM?$AA@ DB 'EPERM', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07DPLJHFHK@ENOTDIR?$AA@
CONST	SEGMENT
??_C@_07DPLJHFHK@ENOTDIR?$AA@ DB 'ENOTDIR', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MNLNBHMB@EILSEQ?$AA@
CONST	SEGMENT
??_C@_06MNLNBHMB@EILSEQ?$AA@ DB 'EILSEQ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MBJBDHGA@EACCES?$AA@
CONST	SEGMENT
??_C@_06MBJBDHGA@EACCES?$AA@ DB 'EACCES', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08FJMFIBKF@ENETDOWN?$AA@
CONST	SEGMENT
??_C@_08FJMFIBKF@ENETDOWN?$AA@ DB 'ENETDOWN', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08FHIPCPL@EALREADY?$AA@
CONST	SEGMENT
??_C@_08FHIPCPL@EALREADY?$AA@ DB 'EALREADY', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07CCDFPJBL@ENOEXEC?$AA@
CONST	SEGMENT
??_C@_07CCDFPJBL@ENOEXEC?$AA@ DB 'ENOEXEC', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06PFABEMOB@ENOSPC?$AA@
CONST	SEGMENT
??_C@_06PFABEMOB@ENOSPC?$AA@ DB 'ENOSPC', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JFNKANIJ@EPROTOTYPE?$AA@
CONST	SEGMENT
??_C@_0L@JFNKANIJ@EPROTOTYPE?$AA@ DB 'EPROTOTYPE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03HKNLGNGJ@EIO?$AA@
CONST	SEGMENT
??_C@_03HKNLGNGJ@EIO?$AA@ DB 'EIO', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05MBIDDMGN@EBADF?$AA@
CONST	SEGMENT
??_C@_05MBIDDMGN@EBADF?$AA@ DB 'EBADF', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09FKLOJPCL@ESHUTDOWN?$AA@
CONST	SEGMENT
??_C@_09FKLOJPCL@ESHUTDOWN?$AA@ DB 'ESHUTDOWN', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07GIPDAOFP@EISCONN?$AA@
CONST	SEGMENT
??_C@_07GIPDAOFP@EISCONN?$AA@ DB 'EISCONN', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@JJNIBMBI@EWOULDBLOCK?$AA@
CONST	SEGMENT
??_C@_0M@JJNIBMBI@EWOULDBLOCK?$AA@ DB 'EWOULDBLOCK', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05MKMLEHMO@EBUSY?$AA@
CONST	SEGMENT
??_C@_05MKMLEHMO@EBUSY?$AA@ DB 'EBUSY', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@CMNHFMBL@ENOPROTOOPT?$AA@
CONST	SEGMENT
??_C@_0M@CMNHFMBL@ENOPROTOOPT?$AA@ DB 'ENOPROTOOPT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@DPLGDGEM@EPFNOSUPPORT?$AA@
CONST	SEGMENT
??_C@_0N@DPLGDGEM@EPFNOSUPPORT?$AA@ DB 'EPFNOSUPPORT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09BNDOHPKE@EHOSTDOWN?$AA@
CONST	SEGMENT
??_C@_09BNDOHPKE@EHOSTDOWN?$AA@ DB 'EHOSTDOWN', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@KIALJHNP@EAFNOSUPPORT?$AA@
CONST	SEGMENT
??_C@_0N@KIALJHNP@EAFNOSUPPORT?$AA@ DB 'EAFNOSUPPORT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08EKIBABFB@EMSGSIZE?$AA@
CONST	SEGMENT
??_C@_08EKIBABFB@EMSGSIZE?$AA@ DB 'EMSGSIZE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05EFGDEBCF@ESRCH?$AA@
CONST	SEGMENT
??_C@_05EFGDEBCF@ESRCH?$AA@ DB 'ESRCH', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05DLCHNBFO@E2BIG?$AA@
CONST	SEGMENT
??_C@_05DLCHNBFO@E2BIG?$AA@ DB 'E2BIG', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05JHANDLBK@EXDEV?$AA@
CONST	SEGMENT
??_C@_05JHANDLBK@EXDEV?$AA@ DB 'EXDEV', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05IOKBKPAJ@ELOOP?$AA@
CONST	SEGMENT
??_C@_05IOKBKPAJ@ELOOP?$AA@ DB 'ELOOP', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JOGGPIAH@ECHILD?$AA@
CONST	SEGMENT
??_C@_06JOGGPIAH@ECHILD?$AA@ DB 'ECHILD', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07JFNAGGOB@EREMOTE?$AA@
CONST	SEGMENT
??_C@_07JFNAGGOB@EREMOTE?$AA@ DB 'EREMOTE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OFNOHDMO@EPROTO?$AA@
CONST	SEGMENT
??_C@_06OFNOHDMO@EPROTO?$AA@ DB 'EPROTO', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07CKPLFBNO@ENOBUFS?$AA@
CONST	SEGMENT
??_C@_07CKPLFBNO@ENOBUFS?$AA@ DB 'ENOBUFS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09GBKGPGOJ@ENOTEMPTY?$AA@
CONST	SEGMENT
??_C@_09GBKGPGOJ@ENOTEMPTY?$AA@ DB 'ENOTEMPTY', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06FDEAKEG@EUSERS?$AA@
CONST	SEGMENT
??_C@_06FDEAKEG@EUSERS?$AA@ DB 'EUSERS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05NMLIGJAP@EINTR?$AA@
CONST	SEGMENT
??_C@_05NMLIGJAP@EINTR?$AA@ DB 'EINTR', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09CJLMNFNK@EOVERFLOW?$AA@
CONST	SEGMENT
??_C@_09CJLMNFNK@EOVERFLOW?$AA@ DB 'EOVERFLOW', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06HIMGHAFD@EINVAL?$AA@
CONST	SEGMENT
??_C@_06HIMGHAFD@EINVAL?$AA@ DB 'EINVAL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05COBFIIAP@EPIPE?$AA@
CONST	SEGMENT
??_C@_05COBFIIAP@EPIPE?$AA@ DB 'EPIPE', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LABCGFDP@ENOSYS?$AA@
CONST	SEGMENT
??_C@_06LABCGFDP@ENOSYS?$AA@ DB 'ENOSYS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07BNJGGDHL@ENODATA?$AA@
CONST	SEGMENT
??_C@_07BNJGGDHL@ENODATA?$AA@ DB 'ENODATA', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CDONBHBA@ENOMSG?$AA@
CONST	SEGMENT
??_C@_06CDONBHBA@ENOMSG?$AA@ DB 'ENOMSG', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@OPBINOFM@EHOSTUNREACH?$AA@
CONST	SEGMENT
??_C@_0N@OPBINOFM@EHOSTUNREACH?$AA@ DB 'EHOSTUNREACH', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06BFJHKEEI@ENODEV?$AA@
CONST	SEGMENT
??_C@_06BFJHKEEI@ENODEV?$AA@ DB 'ENODEV', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09MKAMKDBD@errorcode?$AA@
CONST	SEGMENT
??_C@_09MKAMKDBD@errorcode?$AA@ DB 'errorcode', 00H	; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT PyInit_errno
_TEXT	SEGMENT
de$ = 32
d$ = 40
m$ = 48
PyInit_errno PROC					; COMDAT

; 97   : {

$LN6:
  00000	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 98   :     PyObject *m, *d, *de;
; 99   :     m = PyModule_Create(&errnomodule);

  00004	ba f5 03 00 00	 mov	 edx, 1013		; 000003f5H
  00009	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:errnomodule
  00010	e8 00 00 00 00	 call	 PyModule_Create2TraceRefs
  00015	48 89 44 24 30	 mov	 QWORD PTR m$[rsp], rax

; 100  :     if (m == NULL)

  0001a	48 83 7c 24 30
	00		 cmp	 QWORD PTR m$[rsp], 0
  00020	75 07		 jne	 SHORT $LN3@PyInit_err

; 101  :         return NULL;

  00022	33 c0		 xor	 eax, eax
  00024	e9 8d 0f 00 00	 jmp	 $LN4@PyInit_err
$LN3@PyInit_err:

; 102  :     d = PyModule_GetDict(m);

  00029	48 8b 4c 24 30	 mov	 rcx, QWORD PTR m$[rsp]
  0002e	e8 00 00 00 00	 call	 PyModule_GetDict
  00033	48 89 44 24 28	 mov	 QWORD PTR d$[rsp], rax

; 103  :     de = PyDict_New();

  00038	e8 00 00 00 00	 call	 PyDict_New
  0003d	48 89 44 24 20	 mov	 QWORD PTR de$[rsp], rax

; 104  :     if (!d || !de || PyDict_SetItemString(d, "errorcode", de) < 0)

  00042	48 83 7c 24 28
	00		 cmp	 QWORD PTR d$[rsp], 0
  00048	74 22		 je	 SHORT $LN1@PyInit_err
  0004a	48 83 7c 24 20
	00		 cmp	 QWORD PTR de$[rsp], 0
  00050	74 1a		 je	 SHORT $LN1@PyInit_err
  00052	4c 8b 44 24 20	 mov	 r8, QWORD PTR de$[rsp]
  00057	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_09MKAMKDBD@errorcode?$AA@
  0005e	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  00063	e8 00 00 00 00	 call	 PyDict_SetItemString
  00068	85 c0		 test	 eax, eax
  0006a	7d 07		 jge	 SHORT $LN2@PyInit_err
$LN1@PyInit_err:

; 105  :         return NULL;

  0006c	33 c0		 xor	 eax, eax
  0006e	e9 43 0f 00 00	 jmp	 $LN4@PyInit_err
$LN2@PyInit_err:

; 106  : 
; 107  : /* Macro so I don't have to edit each and every line below... */
; 108  : #define inscode(d, ds, de, name, code, comment) _inscode(d, de, name, code)
; 109  : 
; 110  :     /*
; 111  :      * The names and comments are borrowed from linux/include/errno.h,
; 112  :      * which should be pretty all-inclusive.  However, the Solaris specific
; 113  :      * names and comments are borrowed from sys/errno.h in Solaris.
; 114  :      * MacOSX specific names and comments are borrowed from sys/errno.h in
; 115  :      * MacOSX.
; 116  :      */
; 117  : 
; 118  : #ifdef ENODEV
; 119  :     inscode(d, ds, de, "ENODEV", ENODEV, "No such device");

  00073	41 b9 13 00 00
	00		 mov	 r9d, 19
  00079	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_06BFJHKEEI@ENODEV?$AA@
  00080	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  00085	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  0008a	e8 00 00 00 00	 call	 _inscode

; 120  : #endif
; 121  : #ifdef ENOCSI
; 122  :     inscode(d, ds, de, "ENOCSI", ENOCSI, "No CSI structure available");
; 123  : #endif
; 124  : #ifdef EHOSTUNREACH
; 125  :     inscode(d, ds, de, "EHOSTUNREACH", EHOSTUNREACH, "No route to host");
; 126  : #else
; 127  : #ifdef WSAEHOSTUNREACH
; 128  :     inscode(d, ds, de, "EHOSTUNREACH", WSAEHOSTUNREACH, "No route to host");

  0008f	41 b9 51 27 00
	00		 mov	 r9d, 10065		; 00002751H
  00095	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0N@OPBINOFM@EHOSTUNREACH?$AA@
  0009c	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  000a1	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  000a6	e8 00 00 00 00	 call	 _inscode

; 129  : #endif
; 130  : #endif
; 131  : #ifdef ENOMSG
; 132  :     inscode(d, ds, de, "ENOMSG", ENOMSG, "No message of desired type");

  000ab	41 b9 7a 00 00
	00		 mov	 r9d, 122		; 0000007aH
  000b1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_06CDONBHBA@ENOMSG?$AA@
  000b8	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  000bd	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  000c2	e8 00 00 00 00	 call	 _inscode

; 133  : #endif
; 134  : #ifdef EUCLEAN
; 135  :     inscode(d, ds, de, "EUCLEAN", EUCLEAN, "Structure needs cleaning");
; 136  : #endif
; 137  : #ifdef EL2NSYNC
; 138  :     inscode(d, ds, de, "EL2NSYNC", EL2NSYNC, "Level 2 not synchronized");
; 139  : #endif
; 140  : #ifdef EL2HLT
; 141  :     inscode(d, ds, de, "EL2HLT", EL2HLT, "Level 2 halted");
; 142  : #endif
; 143  : #ifdef ENODATA
; 144  :     inscode(d, ds, de, "ENODATA", ENODATA, "No data available");

  000c7	41 b9 78 00 00
	00		 mov	 r9d, 120		; 00000078H
  000cd	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_07BNJGGDHL@ENODATA?$AA@
  000d4	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  000d9	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  000de	e8 00 00 00 00	 call	 _inscode

; 145  : #endif
; 146  : #ifdef ENOTBLK
; 147  :     inscode(d, ds, de, "ENOTBLK", ENOTBLK, "Block device required");
; 148  : #endif
; 149  : #ifdef ENOSYS
; 150  :     inscode(d, ds, de, "ENOSYS", ENOSYS, "Function not implemented");

  000e3	41 b9 28 00 00
	00		 mov	 r9d, 40			; 00000028H
  000e9	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_06LABCGFDP@ENOSYS?$AA@
  000f0	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  000f5	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  000fa	e8 00 00 00 00	 call	 _inscode

; 151  : #endif
; 152  : #ifdef EPIPE
; 153  :     inscode(d, ds, de, "EPIPE", EPIPE, "Broken pipe");

  000ff	41 b9 20 00 00
	00		 mov	 r9d, 32			; 00000020H
  00105	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_05COBFIIAP@EPIPE?$AA@
  0010c	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  00111	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  00116	e8 00 00 00 00	 call	 _inscode

; 154  : #endif
; 155  : #ifdef EINVAL
; 156  :     inscode(d, ds, de, "EINVAL", EINVAL, "Invalid argument");

  0011b	41 b9 16 00 00
	00		 mov	 r9d, 22
  00121	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_06HIMGHAFD@EINVAL?$AA@
  00128	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  0012d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  00132	e8 00 00 00 00	 call	 _inscode

; 157  : #else
; 158  : #ifdef WSAEINVAL
; 159  :     inscode(d, ds, de, "EINVAL", WSAEINVAL, "Invalid argument");
; 160  : #endif
; 161  : #endif
; 162  : #ifdef EOVERFLOW
; 163  :     inscode(d, ds, de, "EOVERFLOW", EOVERFLOW, "Value too large for defined data type");

  00137	41 b9 84 00 00
	00		 mov	 r9d, 132		; 00000084H
  0013d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_09CJLMNFNK@EOVERFLOW?$AA@
  00144	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  00149	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  0014e	e8 00 00 00 00	 call	 _inscode

; 164  : #endif
; 165  : #ifdef EADV
; 166  :     inscode(d, ds, de, "EADV", EADV, "Advertise error");
; 167  : #endif
; 168  : #ifdef EINTR
; 169  :     inscode(d, ds, de, "EINTR", EINTR, "Interrupted system call");

  00153	41 b9 04 00 00
	00		 mov	 r9d, 4
  00159	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_05NMLIGJAP@EINTR?$AA@
  00160	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  00165	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  0016a	e8 00 00 00 00	 call	 _inscode

; 170  : #else
; 171  : #ifdef WSAEINTR
; 172  :     inscode(d, ds, de, "EINTR", WSAEINTR, "Interrupted system call");
; 173  : #endif
; 174  : #endif
; 175  : #ifdef EUSERS
; 176  :     inscode(d, ds, de, "EUSERS", EUSERS, "Too many users");
; 177  : #else
; 178  : #ifdef WSAEUSERS
; 179  :     inscode(d, ds, de, "EUSERS", WSAEUSERS, "Too many users");

  0016f	41 b9 54 27 00
	00		 mov	 r9d, 10068		; 00002754H
  00175	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_06FDEAKEG@EUSERS?$AA@
  0017c	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  00181	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  00186	e8 00 00 00 00	 call	 _inscode

; 180  : #endif
; 181  : #endif
; 182  : #ifdef ENOTEMPTY
; 183  :     inscode(d, ds, de, "ENOTEMPTY", ENOTEMPTY, "Directory not empty");

  0018b	41 b9 29 00 00
	00		 mov	 r9d, 41			; 00000029H
  00191	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_09GBKGPGOJ@ENOTEMPTY?$AA@
  00198	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  0019d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  001a2	e8 00 00 00 00	 call	 _inscode

; 184  : #else
; 185  : #ifdef WSAENOTEMPTY
; 186  :     inscode(d, ds, de, "ENOTEMPTY", WSAENOTEMPTY, "Directory not empty");
; 187  : #endif
; 188  : #endif
; 189  : #ifdef ENOBUFS
; 190  :     inscode(d, ds, de, "ENOBUFS", ENOBUFS, "No buffer space available");
; 191  : #else
; 192  : #ifdef WSAENOBUFS
; 193  :     inscode(d, ds, de, "ENOBUFS", WSAENOBUFS, "No buffer space available");

  001a7	41 b9 47 27 00
	00		 mov	 r9d, 10055		; 00002747H
  001ad	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_07CKPLFBNO@ENOBUFS?$AA@
  001b4	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  001b9	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  001be	e8 00 00 00 00	 call	 _inscode

; 194  : #endif
; 195  : #endif
; 196  : #ifdef EPROTO
; 197  :     inscode(d, ds, de, "EPROTO", EPROTO, "Protocol error");

  001c3	41 b9 86 00 00
	00		 mov	 r9d, 134		; 00000086H
  001c9	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_06OFNOHDMO@EPROTO?$AA@
  001d0	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  001d5	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  001da	e8 00 00 00 00	 call	 _inscode

; 198  : #endif
; 199  : #ifdef EREMOTE
; 200  :     inscode(d, ds, de, "EREMOTE", EREMOTE, "Object is remote");
; 201  : #else
; 202  : #ifdef WSAEREMOTE
; 203  :     inscode(d, ds, de, "EREMOTE", WSAEREMOTE, "Object is remote");

  001df	41 b9 57 27 00
	00		 mov	 r9d, 10071		; 00002757H
  001e5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_07JFNAGGOB@EREMOTE?$AA@
  001ec	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  001f1	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  001f6	e8 00 00 00 00	 call	 _inscode

; 204  : #endif
; 205  : #endif
; 206  : #ifdef ENAVAIL
; 207  :     inscode(d, ds, de, "ENAVAIL", ENAVAIL, "No XENIX semaphores available");
; 208  : #endif
; 209  : #ifdef ECHILD
; 210  :     inscode(d, ds, de, "ECHILD", ECHILD, "No child processes");

  001fb	41 b9 0a 00 00
	00		 mov	 r9d, 10
  00201	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_06JOGGPIAH@ECHILD?$AA@
  00208	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  0020d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  00212	e8 00 00 00 00	 call	 _inscode

; 211  : #endif
; 212  : #ifdef ELOOP
; 213  :     inscode(d, ds, de, "ELOOP", ELOOP, "Too many symbolic links encountered");
; 214  : #else
; 215  : #ifdef WSAELOOP
; 216  :     inscode(d, ds, de, "ELOOP", WSAELOOP, "Too many symbolic links encountered");

  00217	41 b9 4e 27 00
	00		 mov	 r9d, 10062		; 0000274eH
  0021d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_05IOKBKPAJ@ELOOP?$AA@
  00224	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  00229	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  0022e	e8 00 00 00 00	 call	 _inscode

; 217  : #endif
; 218  : #endif
; 219  : #ifdef EXDEV
; 220  :     inscode(d, ds, de, "EXDEV", EXDEV, "Cross-device link");

  00233	41 b9 12 00 00
	00		 mov	 r9d, 18
  00239	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_05JHANDLBK@EXDEV?$AA@
  00240	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  00245	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  0024a	e8 00 00 00 00	 call	 _inscode

; 221  : #endif
; 222  : #ifdef E2BIG
; 223  :     inscode(d, ds, de, "E2BIG", E2BIG, "Arg list too long");

  0024f	41 b9 07 00 00
	00		 mov	 r9d, 7
  00255	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_05DLCHNBFO@E2BIG?$AA@
  0025c	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  00261	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  00266	e8 00 00 00 00	 call	 _inscode

; 224  : #endif
; 225  : #ifdef ESRCH
; 226  :     inscode(d, ds, de, "ESRCH", ESRCH, "No such process");

  0026b	41 b9 03 00 00
	00		 mov	 r9d, 3
  00271	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_05EFGDEBCF@ESRCH?$AA@
  00278	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  0027d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  00282	e8 00 00 00 00	 call	 _inscode

; 227  : #endif
; 228  : #ifdef EMSGSIZE
; 229  :     inscode(d, ds, de, "EMSGSIZE", EMSGSIZE, "Message too long");
; 230  : #else
; 231  : #ifdef WSAEMSGSIZE
; 232  :     inscode(d, ds, de, "EMSGSIZE", WSAEMSGSIZE, "Message too long");

  00287	41 b9 38 27 00
	00		 mov	 r9d, 10040		; 00002738H
  0028d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_08EKIBABFB@EMSGSIZE?$AA@
  00294	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  00299	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  0029e	e8 00 00 00 00	 call	 _inscode

; 233  : #endif
; 234  : #endif
; 235  : #ifdef EAFNOSUPPORT
; 236  :     inscode(d, ds, de, "EAFNOSUPPORT", EAFNOSUPPORT, "Address family not supported by protocol");
; 237  : #else
; 238  : #ifdef WSAEAFNOSUPPORT
; 239  :     inscode(d, ds, de, "EAFNOSUPPORT", WSAEAFNOSUPPORT, "Address family not supported by protocol");

  002a3	41 b9 3f 27 00
	00		 mov	 r9d, 10047		; 0000273fH
  002a9	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0N@KIALJHNP@EAFNOSUPPORT?$AA@
  002b0	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  002b5	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  002ba	e8 00 00 00 00	 call	 _inscode

; 240  : #endif
; 241  : #endif
; 242  : #ifdef EBADR
; 243  :     inscode(d, ds, de, "EBADR", EBADR, "Invalid request descriptor");
; 244  : #endif
; 245  : #ifdef EHOSTDOWN
; 246  :     inscode(d, ds, de, "EHOSTDOWN", EHOSTDOWN, "Host is down");
; 247  : #else
; 248  : #ifdef WSAEHOSTDOWN
; 249  :     inscode(d, ds, de, "EHOSTDOWN", WSAEHOSTDOWN, "Host is down");

  002bf	41 b9 50 27 00
	00		 mov	 r9d, 10064		; 00002750H
  002c5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_09BNDOHPKE@EHOSTDOWN?$AA@
  002cc	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  002d1	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  002d6	e8 00 00 00 00	 call	 _inscode

; 250  : #endif
; 251  : #endif
; 252  : #ifdef EPFNOSUPPORT
; 253  :     inscode(d, ds, de, "EPFNOSUPPORT", EPFNOSUPPORT, "Protocol family not supported");
; 254  : #else
; 255  : #ifdef WSAEPFNOSUPPORT
; 256  :     inscode(d, ds, de, "EPFNOSUPPORT", WSAEPFNOSUPPORT, "Protocol family not supported");

  002db	41 b9 3e 27 00
	00		 mov	 r9d, 10046		; 0000273eH
  002e1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0N@DPLGDGEM@EPFNOSUPPORT?$AA@
  002e8	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  002ed	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  002f2	e8 00 00 00 00	 call	 _inscode

; 257  : #endif
; 258  : #endif
; 259  : #ifdef ENOPROTOOPT
; 260  :     inscode(d, ds, de, "ENOPROTOOPT", ENOPROTOOPT, "Protocol not available");
; 261  : #else
; 262  : #ifdef WSAENOPROTOOPT
; 263  :     inscode(d, ds, de, "ENOPROTOOPT", WSAENOPROTOOPT, "Protocol not available");

  002f7	41 b9 3a 27 00
	00		 mov	 r9d, 10042		; 0000273aH
  002fd	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0M@CMNHFMBL@ENOPROTOOPT?$AA@
  00304	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  00309	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  0030e	e8 00 00 00 00	 call	 _inscode

; 264  : #endif
; 265  : #endif
; 266  : #ifdef EBUSY
; 267  :     inscode(d, ds, de, "EBUSY", EBUSY, "Device or resource busy");

  00313	41 b9 10 00 00
	00		 mov	 r9d, 16
  00319	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_05MKMLEHMO@EBUSY?$AA@
  00320	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  00325	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  0032a	e8 00 00 00 00	 call	 _inscode

; 268  : #endif
; 269  : #ifdef EWOULDBLOCK
; 270  :     inscode(d, ds, de, "EWOULDBLOCK", EWOULDBLOCK, "Operation would block");
; 271  : #else
; 272  : #ifdef WSAEWOULDBLOCK
; 273  :     inscode(d, ds, de, "EWOULDBLOCK", WSAEWOULDBLOCK, "Operation would block");

  0032f	41 b9 33 27 00
	00		 mov	 r9d, 10035		; 00002733H
  00335	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0M@JJNIBMBI@EWOULDBLOCK?$AA@
  0033c	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  00341	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  00346	e8 00 00 00 00	 call	 _inscode

; 274  : #endif
; 275  : #endif
; 276  : #ifdef EBADFD
; 277  :     inscode(d, ds, de, "EBADFD", EBADFD, "File descriptor in bad state");
; 278  : #endif
; 279  : #ifdef EDOTDOT
; 280  :     inscode(d, ds, de, "EDOTDOT", EDOTDOT, "RFS specific error");
; 281  : #endif
; 282  : #ifdef EISCONN
; 283  :     inscode(d, ds, de, "EISCONN", EISCONN, "Transport endpoint is already connected");
; 284  : #else
; 285  : #ifdef WSAEISCONN
; 286  :     inscode(d, ds, de, "EISCONN", WSAEISCONN, "Transport endpoint is already connected");

  0034b	41 b9 48 27 00
	00		 mov	 r9d, 10056		; 00002748H
  00351	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_07GIPDAOFP@EISCONN?$AA@
  00358	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  0035d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  00362	e8 00 00 00 00	 call	 _inscode

; 287  : #endif
; 288  : #endif
; 289  : #ifdef ENOANO
; 290  :     inscode(d, ds, de, "ENOANO", ENOANO, "No anode");
; 291  : #endif
; 292  : #ifdef ESHUTDOWN
; 293  :     inscode(d, ds, de, "ESHUTDOWN", ESHUTDOWN, "Cannot send after transport endpoint shutdown");
; 294  : #else
; 295  : #ifdef WSAESHUTDOWN
; 296  :     inscode(d, ds, de, "ESHUTDOWN", WSAESHUTDOWN, "Cannot send after transport endpoint shutdown");

  00367	41 b9 4a 27 00
	00		 mov	 r9d, 10058		; 0000274aH
  0036d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_09FKLOJPCL@ESHUTDOWN?$AA@
  00374	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  00379	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  0037e	e8 00 00 00 00	 call	 _inscode

; 297  : #endif
; 298  : #endif
; 299  : #ifdef ECHRNG
; 300  :     inscode(d, ds, de, "ECHRNG", ECHRNG, "Channel number out of range");
; 301  : #endif
; 302  : #ifdef ELIBBAD
; 303  :     inscode(d, ds, de, "ELIBBAD", ELIBBAD, "Accessing a corrupted shared library");
; 304  : #endif
; 305  : #ifdef ENONET
; 306  :     inscode(d, ds, de, "ENONET", ENONET, "Machine is not on the network");
; 307  : #endif
; 308  : #ifdef EBADE
; 309  :     inscode(d, ds, de, "EBADE", EBADE, "Invalid exchange");
; 310  : #endif
; 311  : #ifdef EBADF
; 312  :     inscode(d, ds, de, "EBADF", EBADF, "Bad file number");

  00383	41 b9 09 00 00
	00		 mov	 r9d, 9
  00389	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_05MBIDDMGN@EBADF?$AA@
  00390	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  00395	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  0039a	e8 00 00 00 00	 call	 _inscode

; 313  : #else
; 314  : #ifdef WSAEBADF
; 315  :     inscode(d, ds, de, "EBADF", WSAEBADF, "Bad file number");
; 316  : #endif
; 317  : #endif
; 318  : #ifdef EMULTIHOP
; 319  :     inscode(d, ds, de, "EMULTIHOP", EMULTIHOP, "Multihop attempted");
; 320  : #endif
; 321  : #ifdef EIO
; 322  :     inscode(d, ds, de, "EIO", EIO, "I/O error");

  0039f	41 b9 05 00 00
	00		 mov	 r9d, 5
  003a5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_03HKNLGNGJ@EIO?$AA@
  003ac	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  003b1	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  003b6	e8 00 00 00 00	 call	 _inscode

; 323  : #endif
; 324  : #ifdef EUNATCH
; 325  :     inscode(d, ds, de, "EUNATCH", EUNATCH, "Protocol driver not attached");
; 326  : #endif
; 327  : #ifdef EPROTOTYPE
; 328  :     inscode(d, ds, de, "EPROTOTYPE", EPROTOTYPE, "Protocol wrong type for socket");
; 329  : #else
; 330  : #ifdef WSAEPROTOTYPE
; 331  :     inscode(d, ds, de, "EPROTOTYPE", WSAEPROTOTYPE, "Protocol wrong type for socket");

  003bb	41 b9 39 27 00
	00		 mov	 r9d, 10041		; 00002739H
  003c1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0L@JFNKANIJ@EPROTOTYPE?$AA@
  003c8	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  003cd	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  003d2	e8 00 00 00 00	 call	 _inscode

; 332  : #endif
; 333  : #endif
; 334  : #ifdef ENOSPC
; 335  :     inscode(d, ds, de, "ENOSPC", ENOSPC, "No space left on device");

  003d7	41 b9 1c 00 00
	00		 mov	 r9d, 28
  003dd	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_06PFABEMOB@ENOSPC?$AA@
  003e4	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  003e9	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  003ee	e8 00 00 00 00	 call	 _inscode

; 336  : #endif
; 337  : #ifdef ENOEXEC
; 338  :     inscode(d, ds, de, "ENOEXEC", ENOEXEC, "Exec format error");

  003f3	41 b9 08 00 00
	00		 mov	 r9d, 8
  003f9	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_07CCDFPJBL@ENOEXEC?$AA@
  00400	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  00405	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  0040a	e8 00 00 00 00	 call	 _inscode

; 339  : #endif
; 340  : #ifdef EALREADY
; 341  :     inscode(d, ds, de, "EALREADY", EALREADY, "Operation already in progress");
; 342  : #else
; 343  : #ifdef WSAEALREADY
; 344  :     inscode(d, ds, de, "EALREADY", WSAEALREADY, "Operation already in progress");

  0040f	41 b9 35 27 00
	00		 mov	 r9d, 10037		; 00002735H
  00415	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_08FHIPCPL@EALREADY?$AA@
  0041c	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  00421	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  00426	e8 00 00 00 00	 call	 _inscode

; 345  : #endif
; 346  : #endif
; 347  : #ifdef ENETDOWN
; 348  :     inscode(d, ds, de, "ENETDOWN", ENETDOWN, "Network is down");
; 349  : #else
; 350  : #ifdef WSAENETDOWN
; 351  :     inscode(d, ds, de, "ENETDOWN", WSAENETDOWN, "Network is down");

  0042b	41 b9 42 27 00
	00		 mov	 r9d, 10050		; 00002742H
  00431	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_08FJMFIBKF@ENETDOWN?$AA@
  00438	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  0043d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  00442	e8 00 00 00 00	 call	 _inscode

; 352  : #endif
; 353  : #endif
; 354  : #ifdef ENOTNAM
; 355  :     inscode(d, ds, de, "ENOTNAM", ENOTNAM, "Not a XENIX named type file");
; 356  : #endif
; 357  : #ifdef EACCES
; 358  :     inscode(d, ds, de, "EACCES", EACCES, "Permission denied");

  00447	41 b9 0d 00 00
	00		 mov	 r9d, 13
  0044d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_06MBJBDHGA@EACCES?$AA@
  00454	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  00459	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  0045e	e8 00 00 00 00	 call	 _inscode

; 359  : #else
; 360  : #ifdef WSAEACCES
; 361  :     inscode(d, ds, de, "EACCES", WSAEACCES, "Permission denied");
; 362  : #endif
; 363  : #endif
; 364  : #ifdef ELNRNG
; 365  :     inscode(d, ds, de, "ELNRNG", ELNRNG, "Link number out of range");
; 366  : #endif
; 367  : #ifdef EILSEQ
; 368  :     inscode(d, ds, de, "EILSEQ", EILSEQ, "Illegal byte sequence");

  00463	41 b9 2a 00 00
	00		 mov	 r9d, 42			; 0000002aH
  00469	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_06MNLNBHMB@EILSEQ?$AA@
  00470	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  00475	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  0047a	e8 00 00 00 00	 call	 _inscode

; 369  : #endif
; 370  : #ifdef ENOTDIR
; 371  :     inscode(d, ds, de, "ENOTDIR", ENOTDIR, "Not a directory");

  0047f	41 b9 14 00 00
	00		 mov	 r9d, 20
  00485	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_07DPLJHFHK@ENOTDIR?$AA@
  0048c	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  00491	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  00496	e8 00 00 00 00	 call	 _inscode

; 372  : #endif
; 373  : #ifdef ENOTUNIQ
; 374  :     inscode(d, ds, de, "ENOTUNIQ", ENOTUNIQ, "Name not unique on network");
; 375  : #endif
; 376  : #ifdef EPERM
; 377  :     inscode(d, ds, de, "EPERM", EPERM, "Operation not permitted");

  0049b	41 b9 01 00 00
	00		 mov	 r9d, 1
  004a1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_05KPJOGJNB@EPERM?$AA@
  004a8	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  004ad	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  004b2	e8 00 00 00 00	 call	 _inscode

; 378  : #endif
; 379  : #ifdef EDOM
; 380  :     inscode(d, ds, de, "EDOM", EDOM, "Math argument out of domain of func");

  004b7	41 b9 21 00 00
	00		 mov	 r9d, 33			; 00000021H
  004bd	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_04IDKJOLAE@EDOM?$AA@
  004c4	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  004c9	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  004ce	e8 00 00 00 00	 call	 _inscode

; 381  : #endif
; 382  : #ifdef EXFULL
; 383  :     inscode(d, ds, de, "EXFULL", EXFULL, "Exchange full");
; 384  : #endif
; 385  : #ifdef ECONNREFUSED
; 386  :     inscode(d, ds, de, "ECONNREFUSED", ECONNREFUSED, "Connection refused");
; 387  : #else
; 388  : #ifdef WSAECONNREFUSED
; 389  :     inscode(d, ds, de, "ECONNREFUSED", WSAECONNREFUSED, "Connection refused");

  004d3	41 b9 4d 27 00
	00		 mov	 r9d, 10061		; 0000274dH
  004d9	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0N@NHHJJOKD@ECONNREFUSED?$AA@
  004e0	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  004e5	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  004ea	e8 00 00 00 00	 call	 _inscode

; 390  : #endif
; 391  : #endif
; 392  : #ifdef EISDIR
; 393  :     inscode(d, ds, de, "EISDIR", EISDIR, "Is a directory");

  004ef	41 b9 15 00 00
	00		 mov	 r9d, 21
  004f5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_06MAPENCBD@EISDIR?$AA@
  004fc	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  00501	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  00506	e8 00 00 00 00	 call	 _inscode

; 394  : #endif
; 395  : #ifdef EPROTONOSUPPORT
; 396  :     inscode(d, ds, de, "EPROTONOSUPPORT", EPROTONOSUPPORT, "Protocol not supported");
; 397  : #else
; 398  : #ifdef WSAEPROTONOSUPPORT
; 399  :     inscode(d, ds, de, "EPROTONOSUPPORT", WSAEPROTONOSUPPORT, "Protocol not supported");

  0050b	41 b9 3b 27 00
	00		 mov	 r9d, 10043		; 0000273bH
  00511	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BA@ICLGJIKJ@EPROTONOSUPPORT?$AA@
  00518	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  0051d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  00522	e8 00 00 00 00	 call	 _inscode

; 400  : #endif
; 401  : #endif
; 402  : #ifdef EROFS
; 403  :     inscode(d, ds, de, "EROFS", EROFS, "Read-only file system");

  00527	41 b9 1e 00 00
	00		 mov	 r9d, 30
  0052d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_05HFINOOKG@EROFS?$AA@
  00534	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  00539	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  0053e	e8 00 00 00 00	 call	 _inscode

; 404  : #endif
; 405  : #ifdef EADDRNOTAVAIL
; 406  :     inscode(d, ds, de, "EADDRNOTAVAIL", EADDRNOTAVAIL, "Cannot assign requested address");
; 407  : #else
; 408  : #ifdef WSAEADDRNOTAVAIL
; 409  :     inscode(d, ds, de, "EADDRNOTAVAIL", WSAEADDRNOTAVAIL, "Cannot assign requested address");

  00543	41 b9 41 27 00
	00		 mov	 r9d, 10049		; 00002741H
  00549	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0O@CBFPEINB@EADDRNOTAVAIL?$AA@
  00550	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  00555	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  0055a	e8 00 00 00 00	 call	 _inscode

; 410  : #endif
; 411  : #endif
; 412  : #ifdef EIDRM
; 413  :     inscode(d, ds, de, "EIDRM", EIDRM, "Identifier removed");

  0055f	41 b9 6f 00 00
	00		 mov	 r9d, 111		; 0000006fH
  00565	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_05HKNCPLEH@EIDRM?$AA@
  0056c	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  00571	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  00576	e8 00 00 00 00	 call	 _inscode

; 414  : #endif
; 415  : #ifdef ECOMM
; 416  :     inscode(d, ds, de, "ECOMM", ECOMM, "Communication error on send");
; 417  : #endif
; 418  : #ifdef ESRMNT
; 419  :     inscode(d, ds, de, "ESRMNT", ESRMNT, "Srmount error");
; 420  : #endif
; 421  : #ifdef EREMOTEIO
; 422  :     inscode(d, ds, de, "EREMOTEIO", EREMOTEIO, "Remote I/O error");
; 423  : #endif
; 424  : #ifdef EL3RST
; 425  :     inscode(d, ds, de, "EL3RST", EL3RST, "Level 3 reset");
; 426  : #endif
; 427  : #ifdef EBADMSG
; 428  :     inscode(d, ds, de, "EBADMSG", EBADMSG, "Not a data message");

  0057b	41 b9 68 00 00
	00		 mov	 r9d, 104		; 00000068H
  00581	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_07PJPPGGME@EBADMSG?$AA@
  00588	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  0058d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  00592	e8 00 00 00 00	 call	 _inscode

; 429  : #endif
; 430  : #ifdef ENFILE
; 431  :     inscode(d, ds, de, "ENFILE", ENFILE, "File table overflow");

  00597	41 b9 17 00 00
	00		 mov	 r9d, 23
  0059d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_06IENDGEPJ@ENFILE?$AA@
  005a4	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  005a9	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  005ae	e8 00 00 00 00	 call	 _inscode

; 432  : #endif
; 433  : #ifdef ELIBMAX
; 434  :     inscode(d, ds, de, "ELIBMAX", ELIBMAX, "Attempting to link in too many shared libraries");
; 435  : #endif
; 436  : #ifdef ESPIPE
; 437  :     inscode(d, ds, de, "ESPIPE", ESPIPE, "Illegal seek");

  005b3	41 b9 1d 00 00
	00		 mov	 r9d, 29
  005b9	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_06MBAHENIK@ESPIPE?$AA@
  005c0	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  005c5	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  005ca	e8 00 00 00 00	 call	 _inscode

; 438  : #endif
; 439  : #ifdef ENOLINK
; 440  :     inscode(d, ds, de, "ENOLINK", ENOLINK, "Link has been severed");

  005cf	41 b9 79 00 00
	00		 mov	 r9d, 121		; 00000079H
  005d5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_07DAMMOHJ@ENOLINK?$AA@
  005dc	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  005e1	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  005e6	e8 00 00 00 00	 call	 _inscode

; 441  : #endif
; 442  : #ifdef ENETRESET
; 443  :     inscode(d, ds, de, "ENETRESET", ENETRESET, "Network dropped connection because of reset");
; 444  : #else
; 445  : #ifdef WSAENETRESET
; 446  :     inscode(d, ds, de, "ENETRESET", WSAENETRESET, "Network dropped connection because of reset");

  005eb	41 b9 44 27 00
	00		 mov	 r9d, 10052		; 00002744H
  005f1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_09GEDKILCH@ENETRESET?$AA@
  005f8	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  005fd	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  00602	e8 00 00 00 00	 call	 _inscode

; 447  : #endif
; 448  : #endif
; 449  : #ifdef ETIMEDOUT
; 450  :     inscode(d, ds, de, "ETIMEDOUT", ETIMEDOUT, "Connection timed out");
; 451  : #else
; 452  : #ifdef WSAETIMEDOUT
; 453  :     inscode(d, ds, de, "ETIMEDOUT", WSAETIMEDOUT, "Connection timed out");

  00607	41 b9 4c 27 00
	00		 mov	 r9d, 10060		; 0000274cH
  0060d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_09NNGHNPFO@ETIMEDOUT?$AA@
  00614	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  00619	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  0061e	e8 00 00 00 00	 call	 _inscode

; 454  : #endif
; 455  : #endif
; 456  : #ifdef ENOENT
; 457  :     inscode(d, ds, de, "ENOENT", ENOENT, "No such file or directory");

  00623	41 b9 02 00 00
	00		 mov	 r9d, 2
  00629	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_06JDEIEOEO@ENOENT?$AA@
  00630	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  00635	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  0063a	e8 00 00 00 00	 call	 _inscode

; 458  : #endif
; 459  : #ifdef EEXIST
; 460  :     inscode(d, ds, de, "EEXIST", EEXIST, "File exists");

  0063f	41 b9 11 00 00
	00		 mov	 r9d, 17
  00645	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_06HFGHHKIE@EEXIST?$AA@
  0064c	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  00651	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  00656	e8 00 00 00 00	 call	 _inscode

; 461  : #endif
; 462  : #ifdef EDQUOT
; 463  :     inscode(d, ds, de, "EDQUOT", EDQUOT, "Quota exceeded");
; 464  : #else
; 465  : #ifdef WSAEDQUOT
; 466  :     inscode(d, ds, de, "EDQUOT", WSAEDQUOT, "Quota exceeded");

  0065b	41 b9 55 27 00
	00		 mov	 r9d, 10069		; 00002755H
  00661	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_06LMNIHJGD@EDQUOT?$AA@
  00668	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  0066d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  00672	e8 00 00 00 00	 call	 _inscode

; 467  : #endif
; 468  : #endif
; 469  : #ifdef ENOSTR
; 470  :     inscode(d, ds, de, "ENOSTR", ENOSTR, "Device not a stream");

  00677	41 b9 7d 00 00
	00		 mov	 r9d, 125		; 0000007dH
  0067d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_06KBNBMHCN@ENOSTR?$AA@
  00684	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  00689	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  0068e	e8 00 00 00 00	 call	 _inscode

; 471  : #endif
; 472  : #ifdef EBADSLT
; 473  :     inscode(d, ds, de, "EBADSLT", EBADSLT, "Invalid slot");
; 474  : #endif
; 475  : #ifdef EBADRQC
; 476  :     inscode(d, ds, de, "EBADRQC", EBADRQC, "Invalid request code");
; 477  : #endif
; 478  : #ifdef ELIBACC
; 479  :     inscode(d, ds, de, "ELIBACC", ELIBACC, "Can not access a needed shared library");
; 480  : #endif
; 481  : #ifdef EFAULT
; 482  :     inscode(d, ds, de, "EFAULT", EFAULT, "Bad address");

  00693	41 b9 0e 00 00
	00		 mov	 r9d, 14
  00699	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_06JDLGPBLD@EFAULT?$AA@
  006a0	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  006a5	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  006aa	e8 00 00 00 00	 call	 _inscode

; 483  : #else
; 484  : #ifdef WSAEFAULT
; 485  :     inscode(d, ds, de, "EFAULT", WSAEFAULT, "Bad address");
; 486  : #endif
; 487  : #endif
; 488  : #ifdef EFBIG
; 489  :     inscode(d, ds, de, "EFBIG", EFBIG, "File too large");

  006af	41 b9 1b 00 00
	00		 mov	 r9d, 27
  006b5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_05DHHFJHFB@EFBIG?$AA@
  006bc	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  006c1	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  006c6	e8 00 00 00 00	 call	 _inscode

; 490  : #endif
; 491  : #ifdef EDEADLK
; 492  :     inscode(d, ds, de, "EDEADLK", EDEADLK, "Resource deadlock would occur");

  006cb	41 b9 24 00 00
	00		 mov	 r9d, 36			; 00000024H
  006d1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_07PJJHKFD@EDEADLK?$AA@
  006d8	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  006dd	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  006e2	e8 00 00 00 00	 call	 _inscode

; 493  : #endif
; 494  : #ifdef ENOTCONN
; 495  :     inscode(d, ds, de, "ENOTCONN", ENOTCONN, "Transport endpoint is not connected");
; 496  : #else
; 497  : #ifdef WSAENOTCONN
; 498  :     inscode(d, ds, de, "ENOTCONN", WSAENOTCONN, "Transport endpoint is not connected");

  006e7	41 b9 49 27 00
	00		 mov	 r9d, 10057		; 00002749H
  006ed	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_08FMGCJKAE@ENOTCONN?$AA@
  006f4	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  006f9	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  006fe	e8 00 00 00 00	 call	 _inscode

; 499  : #endif
; 500  : #endif
; 501  : #ifdef EDESTADDRREQ
; 502  :     inscode(d, ds, de, "EDESTADDRREQ", EDESTADDRREQ, "Destination address required");
; 503  : #else
; 504  : #ifdef WSAEDESTADDRREQ
; 505  :     inscode(d, ds, de, "EDESTADDRREQ", WSAEDESTADDRREQ, "Destination address required");

  00703	41 b9 37 27 00
	00		 mov	 r9d, 10039		; 00002737H
  00709	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0N@IOFCCMAJ@EDESTADDRREQ?$AA@
  00710	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  00715	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  0071a	e8 00 00 00 00	 call	 _inscode

; 506  : #endif
; 507  : #endif
; 508  : #ifdef ELIBSCN
; 509  :     inscode(d, ds, de, "ELIBSCN", ELIBSCN, ".lib section in a.out corrupted");
; 510  : #endif
; 511  : #ifdef ENOLCK
; 512  :     inscode(d, ds, de, "ENOLCK", ENOLCK, "No record locks available");

  0071f	41 b9 27 00 00
	00		 mov	 r9d, 39			; 00000027H
  00725	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_06CLMCJMAJ@ENOLCK?$AA@
  0072c	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  00731	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  00736	e8 00 00 00 00	 call	 _inscode

; 513  : #endif
; 514  : #ifdef EISNAM
; 515  :     inscode(d, ds, de, "EISNAM", EISNAM, "Is a named type file");
; 516  : #endif
; 517  : #ifdef ECONNABORTED
; 518  :     inscode(d, ds, de, "ECONNABORTED", ECONNABORTED, "Software caused connection abort");
; 519  : #else
; 520  : #ifdef WSAECONNABORTED
; 521  :     inscode(d, ds, de, "ECONNABORTED", WSAECONNABORTED, "Software caused connection abort");

  0073b	41 b9 45 27 00
	00		 mov	 r9d, 10053		; 00002745H
  00741	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0N@OIBCCDIE@ECONNABORTED?$AA@
  00748	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  0074d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  00752	e8 00 00 00 00	 call	 _inscode

; 522  : #endif
; 523  : #endif
; 524  : #ifdef ENETUNREACH
; 525  :     inscode(d, ds, de, "ENETUNREACH", ENETUNREACH, "Network is unreachable");
; 526  : #else
; 527  : #ifdef WSAENETUNREACH
; 528  :     inscode(d, ds, de, "ENETUNREACH", WSAENETUNREACH, "Network is unreachable");

  00757	41 b9 43 27 00
	00		 mov	 r9d, 10051		; 00002743H
  0075d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0M@EOIKFDII@ENETUNREACH?$AA@
  00764	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  00769	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  0076e	e8 00 00 00 00	 call	 _inscode

; 529  : #endif
; 530  : #endif
; 531  : #ifdef ESTALE
; 532  :     inscode(d, ds, de, "ESTALE", ESTALE, "Stale NFS file handle");
; 533  : #else
; 534  : #ifdef WSAESTALE
; 535  :     inscode(d, ds, de, "ESTALE", WSAESTALE, "Stale NFS file handle");

  00773	41 b9 56 27 00
	00		 mov	 r9d, 10070		; 00002756H
  00779	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_06OEAPJJLB@ESTALE?$AA@
  00780	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  00785	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  0078a	e8 00 00 00 00	 call	 _inscode

; 536  : #endif
; 537  : #endif
; 538  : #ifdef ENOSR
; 539  :     inscode(d, ds, de, "ENOSR", ENOSR, "Out of streams resources");

  0078f	41 b9 7c 00 00
	00		 mov	 r9d, 124		; 0000007cH
  00795	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_05NDGLMEPP@ENOSR?$AA@
  0079c	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  007a1	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  007a6	e8 00 00 00 00	 call	 _inscode

; 540  : #endif
; 541  : #ifdef ENOMEM
; 542  :     inscode(d, ds, de, "ENOMEM", ENOMEM, "Out of memory");

  007ab	41 b9 0c 00 00
	00		 mov	 r9d, 12
  007b1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_06MBKJCAFI@ENOMEM?$AA@
  007b8	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  007bd	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  007c2	e8 00 00 00 00	 call	 _inscode

; 543  : #endif
; 544  : #ifdef ENOTSOCK
; 545  :     inscode(d, ds, de, "ENOTSOCK", ENOTSOCK, "Socket operation on non-socket");
; 546  : #else
; 547  : #ifdef WSAENOTSOCK
; 548  :     inscode(d, ds, de, "ENOTSOCK", WSAENOTSOCK, "Socket operation on non-socket");

  007c7	41 b9 36 27 00
	00		 mov	 r9d, 10038		; 00002736H
  007cd	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_08EJCNGKJA@ENOTSOCK?$AA@
  007d4	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  007d9	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  007de	e8 00 00 00 00	 call	 _inscode

; 549  : #endif
; 550  : #endif
; 551  : #ifdef ESTRPIPE
; 552  :     inscode(d, ds, de, "ESTRPIPE", ESTRPIPE, "Streams pipe error");
; 553  : #endif
; 554  : #ifdef EMLINK
; 555  :     inscode(d, ds, de, "EMLINK", EMLINK, "Too many links");

  007e3	41 b9 1f 00 00
	00		 mov	 r9d, 31
  007e9	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_06NFPAPHBG@EMLINK?$AA@
  007f0	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  007f5	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  007fa	e8 00 00 00 00	 call	 _inscode

; 556  : #endif
; 557  : #ifdef ERANGE
; 558  :     inscode(d, ds, de, "ERANGE", ERANGE, "Math result not representable");

  007ff	41 b9 22 00 00
	00		 mov	 r9d, 34			; 00000022H
  00805	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_06NDGFKNFB@ERANGE?$AA@
  0080c	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  00811	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  00816	e8 00 00 00 00	 call	 _inscode

; 559  : #endif
; 560  : #ifdef ELIBEXEC
; 561  :     inscode(d, ds, de, "ELIBEXEC", ELIBEXEC, "Cannot exec a shared library directly");
; 562  : #endif
; 563  : #ifdef EL3HLT
; 564  :     inscode(d, ds, de, "EL3HLT", EL3HLT, "Level 3 halted");
; 565  : #endif
; 566  : #ifdef ECONNRESET
; 567  :     inscode(d, ds, de, "ECONNRESET", ECONNRESET, "Connection reset by peer");
; 568  : #else
; 569  : #ifdef WSAECONNRESET
; 570  :     inscode(d, ds, de, "ECONNRESET", WSAECONNRESET, "Connection reset by peer");

  0081b	41 b9 46 27 00
	00		 mov	 r9d, 10054		; 00002746H
  00821	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0L@MPIJFMMC@ECONNRESET?$AA@
  00828	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  0082d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  00832	e8 00 00 00 00	 call	 _inscode

; 571  : #endif
; 572  : #endif
; 573  : #ifdef EADDRINUSE
; 574  :     inscode(d, ds, de, "EADDRINUSE", EADDRINUSE, "Address already in use");
; 575  : #else
; 576  : #ifdef WSAEADDRINUSE
; 577  :     inscode(d, ds, de, "EADDRINUSE", WSAEADDRINUSE, "Address already in use");

  00837	41 b9 40 27 00
	00		 mov	 r9d, 10048		; 00002740H
  0083d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0L@IEPJIBH@EADDRINUSE?$AA@
  00844	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  00849	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  0084e	e8 00 00 00 00	 call	 _inscode

; 578  : #endif
; 579  : #endif
; 580  : #ifdef EOPNOTSUPP
; 581  :     inscode(d, ds, de, "EOPNOTSUPP", EOPNOTSUPP, "Operation not supported on transport endpoint");
; 582  : #else
; 583  : #ifdef WSAEOPNOTSUPP
; 584  :     inscode(d, ds, de, "EOPNOTSUPP", WSAEOPNOTSUPP, "Operation not supported on transport endpoint");

  00853	41 b9 3d 27 00
	00		 mov	 r9d, 10045		; 0000273dH
  00859	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0L@GCKIEACE@EOPNOTSUPP?$AA@
  00860	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  00865	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  0086a	e8 00 00 00 00	 call	 _inscode

; 585  : #endif
; 586  : #endif
; 587  : #ifdef EREMCHG
; 588  :     inscode(d, ds, de, "EREMCHG", EREMCHG, "Remote address changed");
; 589  : #endif
; 590  : #ifdef EAGAIN
; 591  :     inscode(d, ds, de, "EAGAIN", EAGAIN, "Try again");

  0086f	41 b9 0b 00 00
	00		 mov	 r9d, 11
  00875	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_06GIGOMMFD@EAGAIN?$AA@
  0087c	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  00881	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  00886	e8 00 00 00 00	 call	 _inscode

; 592  : #endif
; 593  : #ifdef ENAMETOOLONG
; 594  :     inscode(d, ds, de, "ENAMETOOLONG", ENAMETOOLONG, "File name too long");

  0088b	41 b9 26 00 00
	00		 mov	 r9d, 38			; 00000026H
  00891	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0N@GHJFDHGC@ENAMETOOLONG?$AA@
  00898	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  0089d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  008a2	e8 00 00 00 00	 call	 _inscode

; 595  : #else
; 596  : #ifdef WSAENAMETOOLONG
; 597  :     inscode(d, ds, de, "ENAMETOOLONG", WSAENAMETOOLONG, "File name too long");
; 598  : #endif
; 599  : #endif
; 600  : #ifdef ENOTTY
; 601  :     inscode(d, ds, de, "ENOTTY", ENOTTY, "Not a typewriter");

  008a7	41 b9 19 00 00
	00		 mov	 r9d, 25
  008ad	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_06NPPCCGFP@ENOTTY?$AA@
  008b4	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  008b9	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  008be	e8 00 00 00 00	 call	 _inscode

; 602  : #endif
; 603  : #ifdef ERESTART
; 604  :     inscode(d, ds, de, "ERESTART", ERESTART, "Interrupted system call should be restarted");
; 605  : #endif
; 606  : #ifdef ESOCKTNOSUPPORT
; 607  :     inscode(d, ds, de, "ESOCKTNOSUPPORT", ESOCKTNOSUPPORT, "Socket type not supported");
; 608  : #else
; 609  : #ifdef WSAESOCKTNOSUPPORT
; 610  :     inscode(d, ds, de, "ESOCKTNOSUPPORT", WSAESOCKTNOSUPPORT, "Socket type not supported");

  008c3	41 b9 3c 27 00
	00		 mov	 r9d, 10044		; 0000273cH
  008c9	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BA@CLGCDGBO@ESOCKTNOSUPPORT?$AA@
  008d0	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  008d5	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  008da	e8 00 00 00 00	 call	 _inscode

; 611  : #endif
; 612  : #endif
; 613  : #ifdef ETIME
; 614  :     inscode(d, ds, de, "ETIME", ETIME, "Timer expired");

  008df	41 b9 89 00 00
	00		 mov	 r9d, 137		; 00000089H
  008e5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_05MPGLBOOM@ETIME?$AA@
  008ec	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  008f1	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  008f6	e8 00 00 00 00	 call	 _inscode

; 615  : #endif
; 616  : #ifdef EBFONT
; 617  :     inscode(d, ds, de, "EBFONT", EBFONT, "Bad font file format");
; 618  : #endif
; 619  : #ifdef EDEADLOCK
; 620  :     inscode(d, ds, de, "EDEADLOCK", EDEADLOCK, "Error EDEADLOCK");

  008fb	41 b9 24 00 00
	00		 mov	 r9d, 36			; 00000024H
  00901	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_09MPHFKLCM@EDEADLOCK?$AA@
  00908	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  0090d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  00912	e8 00 00 00 00	 call	 _inscode

; 621  : #endif
; 622  : #ifdef ETOOMANYREFS
; 623  :     inscode(d, ds, de, "ETOOMANYREFS", ETOOMANYREFS, "Too many references: cannot splice");
; 624  : #else
; 625  : #ifdef WSAETOOMANYREFS
; 626  :     inscode(d, ds, de, "ETOOMANYREFS", WSAETOOMANYREFS, "Too many references: cannot splice");

  00917	41 b9 4b 27 00
	00		 mov	 r9d, 10059		; 0000274bH
  0091d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0N@LLJCPBML@ETOOMANYREFS?$AA@
  00924	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  00929	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  0092e	e8 00 00 00 00	 call	 _inscode

; 627  : #endif
; 628  : #endif
; 629  : #ifdef EMFILE
; 630  :     inscode(d, ds, de, "EMFILE", EMFILE, "Too many open files");

  00933	41 b9 18 00 00
	00		 mov	 r9d, 24
  00939	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_06CEHBGFH@EMFILE?$AA@
  00940	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  00945	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  0094a	e8 00 00 00 00	 call	 _inscode

; 631  : #else
; 632  : #ifdef WSAEMFILE
; 633  :     inscode(d, ds, de, "EMFILE", WSAEMFILE, "Too many open files");
; 634  : #endif
; 635  : #endif
; 636  : #ifdef ETXTBSY
; 637  :     inscode(d, ds, de, "ETXTBSY", ETXTBSY, "Text file busy");

  0094f	41 b9 8b 00 00
	00		 mov	 r9d, 139		; 0000008bH
  00955	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_07DFOKCEGI@ETXTBSY?$AA@
  0095c	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  00961	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  00966	e8 00 00 00 00	 call	 _inscode

; 638  : #endif
; 639  : #ifdef EINPROGRESS
; 640  :     inscode(d, ds, de, "EINPROGRESS", EINPROGRESS, "Operation now in progress");
; 641  : #else
; 642  : #ifdef WSAEINPROGRESS
; 643  :     inscode(d, ds, de, "EINPROGRESS", WSAEINPROGRESS, "Operation now in progress");

  0096b	41 b9 34 27 00
	00		 mov	 r9d, 10036		; 00002734H
  00971	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0M@NFKGMJFK@EINPROGRESS?$AA@
  00978	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  0097d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  00982	e8 00 00 00 00	 call	 _inscode

; 644  : #endif
; 645  : #endif
; 646  : #ifdef ENXIO
; 647  :     inscode(d, ds, de, "ENXIO", ENXIO, "No such device or address");

  00987	41 b9 06 00 00
	00		 mov	 r9d, 6
  0098d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_05PAHIOBGD@ENXIO?$AA@
  00994	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  00999	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  0099e	e8 00 00 00 00	 call	 _inscode

; 648  : #endif
; 649  : #ifdef ENOPKG
; 650  :     inscode(d, ds, de, "ENOPKG", ENOPKG, "Package not installed");
; 651  : #endif
; 652  : #ifdef WSASY
; 653  :     inscode(d, ds, de, "WSASY", WSASY, "Error WSASY");
; 654  : #endif
; 655  : #ifdef WSAEHOSTDOWN
; 656  :     inscode(d, ds, de, "WSAEHOSTDOWN", WSAEHOSTDOWN, "Host is down");

  009a3	41 b9 50 27 00
	00		 mov	 r9d, 10064		; 00002750H
  009a9	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0N@NJBKCOKK@WSAEHOSTDOWN?$AA@
  009b0	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  009b5	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  009ba	e8 00 00 00 00	 call	 _inscode

; 657  : #endif
; 658  : #ifdef WSAENETDOWN
; 659  :     inscode(d, ds, de, "WSAENETDOWN", WSAENETDOWN, "Network is down");

  009bf	41 b9 42 27 00
	00		 mov	 r9d, 10050		; 00002742H
  009c5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0M@BMNODHFM@WSAENETDOWN?$AA@
  009cc	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  009d1	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  009d6	e8 00 00 00 00	 call	 _inscode

; 660  : #endif
; 661  : #ifdef WSAENOTSOCK
; 662  :     inscode(d, ds, de, "WSAENOTSOCK", WSAENOTSOCK, "Socket operation on non-socket");

  009db	41 b9 36 27 00
	00		 mov	 r9d, 10038		; 00002736H
  009e1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0M@MDGNMGJ@WSAENOTSOCK?$AA@
  009e8	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  009ed	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  009f2	e8 00 00 00 00	 call	 _inscode

; 663  : #endif
; 664  : #ifdef WSAEHOSTUNREACH
; 665  :     inscode(d, ds, de, "WSAEHOSTUNREACH", WSAEHOSTUNREACH, "No route to host");

  009f7	41 b9 51 27 00
	00		 mov	 r9d, 10065		; 00002751H
  009fd	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BA@HKCFHLFG@WSAEHOSTUNREACH?$AA@
  00a04	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  00a09	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  00a0e	e8 00 00 00 00	 call	 _inscode

; 666  : #endif
; 667  : #ifdef WSAELOOP
; 668  :     inscode(d, ds, de, "WSAELOOP", WSAELOOP, "Too many symbolic links encountered");

  00a13	41 b9 4e 27 00
	00		 mov	 r9d, 10062		; 0000274eH
  00a19	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_08PGIMLMFD@WSAELOOP?$AA@
  00a20	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  00a25	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  00a2a	e8 00 00 00 00	 call	 _inscode

; 669  : #endif
; 670  : #ifdef WSAEMFILE
; 671  :     inscode(d, ds, de, "WSAEMFILE", WSAEMFILE, "Too many open files");

  00a2f	41 b9 28 27 00
	00		 mov	 r9d, 10024		; 00002728H
  00a35	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_09IJIBIDKO@WSAEMFILE?$AA@
  00a3c	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  00a41	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  00a46	e8 00 00 00 00	 call	 _inscode

; 672  : #endif
; 673  : #ifdef WSAESTALE
; 674  :     inscode(d, ds, de, "WSAESTALE", WSAESTALE, "Stale NFS file handle");

  00a4b	41 b9 56 27 00
	00		 mov	 r9d, 10070		; 00002756H
  00a51	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_09GPMJAMEI@WSAESTALE?$AA@
  00a58	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  00a5d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  00a62	e8 00 00 00 00	 call	 _inscode

; 675  : #endif
; 676  : #ifdef WSAVERNOTSUPPORTED
; 677  :     inscode(d, ds, de, "WSAVERNOTSUPPORTED", WSAVERNOTSUPPORTED, "Error WSAVERNOTSUPPORTED");

  00a67	41 b9 6c 27 00
	00		 mov	 r9d, 10092		; 0000276cH
  00a6d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BD@PKACBPOA@WSAVERNOTSUPPORTED?$AA@
  00a74	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  00a79	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  00a7e	e8 00 00 00 00	 call	 _inscode

; 678  : #endif
; 679  : #ifdef WSAENETUNREACH
; 680  :     inscode(d, ds, de, "WSAENETUNREACH", WSAENETUNREACH, "Network is unreachable");

  00a83	41 b9 43 27 00
	00		 mov	 r9d, 10051		; 00002743H
  00a89	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0P@MMGFNLEA@WSAENETUNREACH?$AA@
  00a90	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  00a95	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  00a9a	e8 00 00 00 00	 call	 _inscode

; 681  : #endif
; 682  : #ifdef WSAEPROCLIM
; 683  :     inscode(d, ds, de, "WSAEPROCLIM", WSAEPROCLIM, "Error WSAEPROCLIM");

  00a9f	41 b9 53 27 00
	00		 mov	 r9d, 10067		; 00002753H
  00aa5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0M@CDIHOKBK@WSAEPROCLIM?$AA@
  00aac	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  00ab1	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  00ab6	e8 00 00 00 00	 call	 _inscode

; 684  : #endif
; 685  : #ifdef WSAEFAULT
; 686  :     inscode(d, ds, de, "WSAEFAULT", WSAEFAULT, "Bad address");

  00abb	41 b9 1e 27 00
	00		 mov	 r9d, 10014		; 0000271eH
  00ac1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_09BIHAGEEK@WSAEFAULT?$AA@
  00ac8	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  00acd	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  00ad2	e8 00 00 00 00	 call	 _inscode

; 687  : #endif
; 688  : #ifdef WSANOTINITIALISED
; 689  :     inscode(d, ds, de, "WSANOTINITIALISED", WSANOTINITIALISED, "Error WSANOTINITIALISED");

  00ad7	41 b9 6d 27 00
	00		 mov	 r9d, 10093		; 0000276dH
  00add	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BC@CLCHBKPK@WSANOTINITIALISED?$AA@
  00ae4	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  00ae9	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  00aee	e8 00 00 00 00	 call	 _inscode

; 690  : #endif
; 691  : #ifdef WSAEUSERS
; 692  :     inscode(d, ds, de, "WSAEUSERS", WSAEUSERS, "Too many users");

  00af3	41 b9 54 27 00
	00		 mov	 r9d, 10068		; 00002754H
  00af9	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_09IOPCJPLP@WSAEUSERS?$AA@
  00b00	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  00b05	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  00b0a	e8 00 00 00 00	 call	 _inscode

; 693  : #endif
; 694  : #ifdef WSAMAKEASYNCREPL
; 695  :     inscode(d, ds, de, "WSAMAKEASYNCREPL", WSAMAKEASYNCREPL, "Error WSAMAKEASYNCREPL");
; 696  : #endif
; 697  : #ifdef WSAENOPROTOOPT
; 698  :     inscode(d, ds, de, "WSAENOPROTOOPT", WSAENOPROTOOPT, "Protocol not available");

  00b0f	41 b9 3a 27 00
	00		 mov	 r9d, 10042		; 0000273aH
  00b15	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0P@KODINEND@WSAENOPROTOOPT?$AA@
  00b1c	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  00b21	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  00b26	e8 00 00 00 00	 call	 _inscode

; 699  : #endif
; 700  : #ifdef WSAECONNABORTED
; 701  :     inscode(d, ds, de, "WSAECONNABORTED", WSAECONNABORTED, "Software caused connection abort");

  00b2b	41 b9 45 27 00
	00		 mov	 r9d, 10053		; 00002745H
  00b31	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BA@HNCPIGIO@WSAECONNABORTED?$AA@
  00b38	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  00b3d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  00b42	e8 00 00 00 00	 call	 _inscode

; 702  : #endif
; 703  : #ifdef WSAENAMETOOLONG
; 704  :     inscode(d, ds, de, "WSAENAMETOOLONG", WSAENAMETOOLONG, "File name too long");

  00b47	41 b9 4f 27 00
	00		 mov	 r9d, 10063		; 0000274fH
  00b4d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BA@PCKIJCGI@WSAENAMETOOLONG?$AA@
  00b54	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  00b59	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  00b5e	e8 00 00 00 00	 call	 _inscode

; 705  : #endif
; 706  : #ifdef WSAENOTEMPTY
; 707  :     inscode(d, ds, de, "WSAENOTEMPTY", WSAENOTEMPTY, "Directory not empty");

  00b63	41 b9 52 27 00
	00		 mov	 r9d, 10066		; 00002752H
  00b69	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0N@KFICKHOH@WSAENOTEMPTY?$AA@
  00b70	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  00b75	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  00b7a	e8 00 00 00 00	 call	 _inscode

; 708  : #endif
; 709  : #ifdef WSAESHUTDOWN
; 710  :     inscode(d, ds, de, "WSAESHUTDOWN", WSAESHUTDOWN, "Cannot send after transport endpoint shutdown");

  00b7f	41 b9 4a 27 00
	00		 mov	 r9d, 10058		; 0000274aH
  00b85	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0N@JOJKMOCF@WSAESHUTDOWN?$AA@
  00b8c	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  00b91	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  00b96	e8 00 00 00 00	 call	 _inscode

; 711  : #endif
; 712  : #ifdef WSAEAFNOSUPPORT
; 713  :     inscode(d, ds, de, "WSAEAFNOSUPPORT", WSAEAFNOSUPPORT, "Address family not supported by protocol");

  00b9b	41 b9 3f 27 00
	00		 mov	 r9d, 10047		; 0000273fH
  00ba1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BA@DNDGDCNF@WSAEAFNOSUPPORT?$AA@
  00ba8	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  00bad	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  00bb2	e8 00 00 00 00	 call	 _inscode

; 714  : #endif
; 715  : #ifdef WSAETOOMANYREFS
; 716  :     inscode(d, ds, de, "WSAETOOMANYREFS", WSAETOOMANYREFS, "Too many references: cannot splice");

  00bb7	41 b9 4b 27 00
	00		 mov	 r9d, 10059		; 0000274bH
  00bbd	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BA@COKPFEMB@WSAETOOMANYREFS?$AA@
  00bc4	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  00bc9	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  00bce	e8 00 00 00 00	 call	 _inscode

; 717  : #endif
; 718  : #ifdef WSAEACCES
; 719  :     inscode(d, ds, de, "WSAEACCES", WSAEACCES, "Permission denied");

  00bd3	41 b9 1d 27 00
	00		 mov	 r9d, 10013		; 0000271dH
  00bd9	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_09EKFHKCJJ@WSAEACCES?$AA@
  00be0	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  00be5	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  00bea	e8 00 00 00 00	 call	 _inscode

; 720  : #endif
; 721  : #ifdef WSATR
; 722  :     inscode(d, ds, de, "WSATR", WSATR, "Error WSATR");
; 723  : #endif
; 724  : #ifdef WSABASEERR
; 725  :     inscode(d, ds, de, "WSABASEERR", WSABASEERR, "Error WSABASEERR");

  00bef	41 b9 10 27 00
	00		 mov	 r9d, 10000		; 00002710H
  00bf5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0L@IGIFNHIB@WSABASEERR?$AA@
  00bfc	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  00c01	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  00c06	e8 00 00 00 00	 call	 _inscode

; 726  : #endif
; 727  : #ifdef WSADESCRIPTIO
; 728  :     inscode(d, ds, de, "WSADESCRIPTIO", WSADESCRIPTIO, "Error WSADESCRIPTIO");
; 729  : #endif
; 730  : #ifdef WSAEMSGSIZE
; 731  :     inscode(d, ds, de, "WSAEMSGSIZE", WSAEMSGSIZE, "Message too long");

  00c0b	41 b9 38 27 00
	00		 mov	 r9d, 10040		; 00002738H
  00c11	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0M@PJKLHKI@WSAEMSGSIZE?$AA@
  00c18	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  00c1d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  00c22	e8 00 00 00 00	 call	 _inscode

; 732  : #endif
; 733  : #ifdef WSAEBADF
; 734  :     inscode(d, ds, de, "WSAEBADF", WSAEBADF, "Bad file number");

  00c27	41 b9 19 27 00
	00		 mov	 r9d, 10009		; 00002719H
  00c2d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_08LJKOCPDH@WSAEBADF?$AA@
  00c34	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  00c39	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  00c3e	e8 00 00 00 00	 call	 _inscode

; 735  : #endif
; 736  : #ifdef WSAECONNRESET
; 737  :     inscode(d, ds, de, "WSAECONNRESET", WSAECONNRESET, "Connection reset by peer");

  00c43	41 b9 46 27 00
	00		 mov	 r9d, 10054		; 00002746H
  00c49	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0O@CIPFFFJE@WSAECONNRESET?$AA@
  00c50	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  00c55	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  00c5a	e8 00 00 00 00	 call	 _inscode

; 738  : #endif
; 739  : #ifdef WSAGETSELECTERRO
; 740  :     inscode(d, ds, de, "WSAGETSELECTERRO", WSAGETSELECTERRO, "Error WSAGETSELECTERRO");
; 741  : #endif
; 742  : #ifdef WSAETIMEDOUT
; 743  :     inscode(d, ds, de, "WSAETIMEDOUT", WSAETIMEDOUT, "Connection timed out");

  00c5f	41 b9 4c 27 00
	00		 mov	 r9d, 10060		; 0000274cH
  00c65	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0N@BJEDIOFA@WSAETIMEDOUT?$AA@
  00c6c	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  00c71	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  00c76	e8 00 00 00 00	 call	 _inscode

; 744  : #endif
; 745  : #ifdef WSAENOBUFS
; 746  :     inscode(d, ds, de, "WSAENOBUFS", WSAENOBUFS, "No buffer space available");

  00c7b	41 b9 47 27 00
	00		 mov	 r9d, 10055		; 00002747H
  00c81	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0L@OOBBNNPD@WSAENOBUFS?$AA@
  00c88	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  00c8d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  00c92	e8 00 00 00 00	 call	 _inscode

; 747  : #endif
; 748  : #ifdef WSAEDISCON
; 749  :     inscode(d, ds, de, "WSAEDISCON", WSAEDISCON, "Error WSAEDISCON");

  00c97	41 b9 75 27 00
	00		 mov	 r9d, 10101		; 00002775H
  00c9d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0L@EEHHIAEC@WSAEDISCON?$AA@
  00ca4	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  00ca9	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  00cae	e8 00 00 00 00	 call	 _inscode

; 750  : #endif
; 751  : #ifdef WSAEINTR
; 752  :     inscode(d, ds, de, "WSAEINTR", WSAEINTR, "Interrupted system call");

  00cb3	41 b9 14 27 00
	00		 mov	 r9d, 10004		; 00002714H
  00cb9	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_08KEJFHKFF@WSAEINTR?$AA@
  00cc0	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  00cc5	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  00cca	e8 00 00 00 00	 call	 _inscode

; 753  : #endif
; 754  : #ifdef WSAEPROTOTYPE
; 755  :     inscode(d, ds, de, "WSAEPROTOTYPE", WSAEPROTOTYPE, "Protocol wrong type for socket");

  00ccf	41 b9 39 27 00
	00		 mov	 r9d, 10041		; 00002739H
  00cd5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0O@HCKGAENP@WSAEPROTOTYPE?$AA@
  00cdc	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  00ce1	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  00ce6	e8 00 00 00 00	 call	 _inscode

; 756  : #endif
; 757  : #ifdef WSAHOS
; 758  :     inscode(d, ds, de, "WSAHOS", WSAHOS, "Error WSAHOS");
; 759  : #endif
; 760  : #ifdef WSAEADDRINUSE
; 761  :     inscode(d, ds, de, "WSAEADDRINUSE", WSAEADDRINUSE, "Address already in use");

  00ceb	41 b9 40 27 00
	00		 mov	 r9d, 10048		; 00002740H
  00cf1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0O@OPDDJBEB@WSAEADDRINUSE?$AA@
  00cf8	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  00cfd	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  00d02	e8 00 00 00 00	 call	 _inscode

; 762  : #endif
; 763  : #ifdef WSAEADDRNOTAVAIL
; 764  :     inscode(d, ds, de, "WSAEADDRNOTAVAIL", WSAEADDRNOTAVAIL, "Cannot assign requested address");

  00d07	41 b9 41 27 00
	00		 mov	 r9d, 10049		; 00002741H
  00d0d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BB@MBBPJMGK@WSAEADDRNOTAVAIL?$AA@
  00d14	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  00d19	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  00d1e	e8 00 00 00 00	 call	 _inscode

; 765  : #endif
; 766  : #ifdef WSAEALREADY
; 767  :     inscode(d, ds, de, "WSAEALREADY", WSAEALREADY, "Operation already in progress");

  00d23	41 b9 35 27 00
	00		 mov	 r9d, 10037		; 00002735H
  00d29	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0M@EAGDEEAC@WSAEALREADY?$AA@
  00d30	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  00d35	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  00d3a	e8 00 00 00 00	 call	 _inscode

; 768  : #endif
; 769  : #ifdef WSAEPROTONOSUPPORT
; 770  :     inscode(d, ds, de, "WSAEPROTONOSUPPORT", WSAEPROTONOSUPPORT, "Protocol not supported");

  00d3f	41 b9 3b 27 00
	00		 mov	 r9d, 10043		; 0000273bH
  00d45	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BD@EDJBJFH@WSAEPROTONOSUPPORT?$AA@
  00d4c	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  00d51	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  00d56	e8 00 00 00 00	 call	 _inscode

; 771  : #endif
; 772  : #ifdef WSASYSNOTREADY
; 773  :     inscode(d, ds, de, "WSASYSNOTREADY", WSASYSNOTREADY, "Error WSASYSNOTREADY");

  00d5b	41 b9 6b 27 00
	00		 mov	 r9d, 10091		; 0000276bH
  00d61	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0P@MDJAKAKC@WSASYSNOTREADY?$AA@
  00d68	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  00d6d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  00d72	e8 00 00 00 00	 call	 _inscode

; 774  : #endif
; 775  : #ifdef WSAEWOULDBLOCK
; 776  :     inscode(d, ds, de, "WSAEWOULDBLOCK", WSAEWOULDBLOCK, "Operation would block");

  00d77	41 b9 33 27 00
	00		 mov	 r9d, 10035		; 00002733H
  00d7d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0P@BLDHJENA@WSAEWOULDBLOCK?$AA@
  00d84	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  00d89	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  00d8e	e8 00 00 00 00	 call	 _inscode

; 777  : #endif
; 778  : #ifdef WSAEPFNOSUPPORT
; 779  :     inscode(d, ds, de, "WSAEPFNOSUPPORT", WSAEPFNOSUPPORT, "Protocol family not supported");

  00d93	41 b9 3e 27 00
	00		 mov	 r9d, 10046		; 0000273eH
  00d99	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BA@KKILJDEG@WSAEPFNOSUPPORT?$AA@
  00da0	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  00da5	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  00daa	e8 00 00 00 00	 call	 _inscode

; 780  : #endif
; 781  : #ifdef WSAEOPNOTSUPP
; 782  :     inscode(d, ds, de, "WSAEOPNOTSUPP", WSAEOPNOTSUPP, "Operation not supported on transport endpoint");

  00daf	41 b9 3d 27 00
	00		 mov	 r9d, 10045		; 0000273dH
  00db5	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0O@IFNEEJHC@WSAEOPNOTSUPP?$AA@
  00dbc	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  00dc1	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  00dc6	e8 00 00 00 00	 call	 _inscode

; 783  : #endif
; 784  : #ifdef WSAEISCONN
; 785  :     inscode(d, ds, de, "WSAEISCONN", WSAEISCONN, "Transport endpoint is already connected");

  00dcb	41 b9 48 27 00
	00		 mov	 r9d, 10056		; 00002748H
  00dd1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0L@KMBJICHC@WSAEISCONN?$AA@
  00dd8	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  00ddd	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  00de2	e8 00 00 00 00	 call	 _inscode

; 786  : #endif
; 787  : #ifdef WSAEDQUOT
; 788  :     inscode(d, ds, de, "WSAEDQUOT", WSAEDQUOT, "Quota exceeded");

  00de7	41 b9 55 27 00
	00		 mov	 r9d, 10069		; 00002755H
  00ded	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_09DHBOOMJK@WSAEDQUOT?$AA@
  00df4	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  00df9	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  00dfe	e8 00 00 00 00	 call	 _inscode

; 789  : #endif
; 790  : #ifdef WSAENOTCONN
; 791  :     inscode(d, ds, de, "WSAENOTCONN", WSAENOTCONN, "Transport endpoint is not connected");

  00e03	41 b9 49 27 00
	00		 mov	 r9d, 10057		; 00002749H
  00e09	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0M@BJHJCMPN@WSAENOTCONN?$AA@
  00e10	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  00e15	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  00e1a	e8 00 00 00 00	 call	 _inscode

; 792  : #endif
; 793  : #ifdef WSAEREMOTE
; 794  :     inscode(d, ds, de, "WSAEREMOTE", WSAEREMOTE, "Object is remote");

  00e1f	41 b9 57 27 00
	00		 mov	 r9d, 10071		; 00002757H
  00e25	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0L@FBDKOKMM@WSAEREMOTE?$AA@
  00e2c	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  00e31	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  00e36	e8 00 00 00 00	 call	 _inscode

; 795  : #endif
; 796  : #ifdef WSAEINVAL
; 797  :     inscode(d, ds, de, "WSAEINVAL", WSAEINVAL, "Invalid argument");

  00e3b	41 b9 26 27 00
	00		 mov	 r9d, 10022		; 00002726H
  00e41	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_09PDAAOFKK@WSAEINVAL?$AA@
  00e48	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  00e4d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  00e52	e8 00 00 00 00	 call	 _inscode

; 798  : #endif
; 799  : #ifdef WSAEINPROGRESS
; 800  :     inscode(d, ds, de, "WSAEINPROGRESS", WSAEINPROGRESS, "Operation now in progress");

  00e57	41 b9 34 27 00
	00		 mov	 r9d, 10036		; 00002734H
  00e5d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0P@FHEJEBJC@WSAEINPROGRESS?$AA@
  00e64	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  00e69	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  00e6e	e8 00 00 00 00	 call	 _inscode

; 801  : #endif
; 802  : #ifdef WSAGETSELECTEVEN
; 803  :     inscode(d, ds, de, "WSAGETSELECTEVEN", WSAGETSELECTEVEN, "Error WSAGETSELECTEVEN");
; 804  : #endif
; 805  : #ifdef WSAESOCKTNOSUPPORT
; 806  :     inscode(d, ds, de, "WSAESOCKTNOSUPPORT", WSAESOCKTNOSUPPORT, "Socket type not supported");

  00e73	41 b9 3c 27 00
	00		 mov	 r9d, 10044		; 0000273cH
  00e79	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BD@KNONLHOA@WSAESOCKTNOSUPPORT?$AA@
  00e80	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  00e85	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  00e8a	e8 00 00 00 00	 call	 _inscode

; 807  : #endif
; 808  : #ifdef WSAGETASYNCERRO
; 809  :     inscode(d, ds, de, "WSAGETASYNCERRO", WSAGETASYNCERRO, "Error WSAGETASYNCERRO");
; 810  : #endif
; 811  : #ifdef WSAMAKESELECTREPL
; 812  :     inscode(d, ds, de, "WSAMAKESELECTREPL", WSAMAKESELECTREPL, "Error WSAMAKESELECTREPL");
; 813  : #endif
; 814  : #ifdef WSAGETASYNCBUFLE
; 815  :     inscode(d, ds, de, "WSAGETASYNCBUFLE", WSAGETASYNCBUFLE, "Error WSAGETASYNCBUFLE");
; 816  : #endif
; 817  : #ifdef WSAEDESTADDRREQ
; 818  :     inscode(d, ds, de, "WSAEDESTADDRREQ", WSAEDESTADDRREQ, "Destination address required");

  00e8f	41 b9 37 27 00
	00		 mov	 r9d, 10039		; 00002737H
  00e95	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BA@BLGPIJAD@WSAEDESTADDRREQ?$AA@
  00e9c	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  00ea1	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  00ea6	e8 00 00 00 00	 call	 _inscode

; 819  : #endif
; 820  : #ifdef WSAECONNREFUSED
; 821  :     inscode(d, ds, de, "WSAECONNREFUSED", WSAECONNREFUSED, "Connection refused");

  00eab	41 b9 4d 27 00
	00		 mov	 r9d, 10061		; 0000274dH
  00eb1	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BA@ECEEDLKJ@WSAECONNREFUSED?$AA@
  00eb8	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  00ebd	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  00ec2	e8 00 00 00 00	 call	 _inscode

; 822  : #endif
; 823  : #ifdef WSAENETRESET
; 824  :     inscode(d, ds, de, "WSAENETRESET", WSAENETRESET, "Network dropped connection because of reset");

  00ec7	41 b9 44 27 00
	00		 mov	 r9d, 10052		; 00002744H
  00ecd	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0N@KABONKCJ@WSAENETRESET?$AA@
  00ed4	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  00ed9	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  00ede	e8 00 00 00 00	 call	 _inscode

; 825  : #endif
; 826  : #ifdef WSAN
; 827  :     inscode(d, ds, de, "WSAN", WSAN, "Error WSAN");
; 828  : #endif
; 829  : #ifdef ENOMEDIUM
; 830  :     inscode(d, ds, de, "ENOMEDIUM", ENOMEDIUM, "No medium found");
; 831  : #endif
; 832  : #ifdef EMEDIUMTYPE
; 833  :     inscode(d, ds, de, "EMEDIUMTYPE", EMEDIUMTYPE, "Wrong medium type");
; 834  : #endif
; 835  : #ifdef ECANCELED
; 836  :     inscode(d, ds, de, "ECANCELED", ECANCELED, "Operation Canceled");

  00ee3	41 b9 69 00 00
	00		 mov	 r9d, 105		; 00000069H
  00ee9	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_09FIKDCFKM@ECANCELED?$AA@
  00ef0	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  00ef5	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  00efa	e8 00 00 00 00	 call	 _inscode

; 837  : #endif
; 838  : #ifdef ENOKEY
; 839  :     inscode(d, ds, de, "ENOKEY", ENOKEY, "Required key not available");
; 840  : #endif
; 841  : #ifdef EKEYEXPIRED
; 842  :     inscode(d, ds, de, "EKEYEXPIRED", EKEYEXPIRED, "Key has expired");
; 843  : #endif
; 844  : #ifdef EKEYREVOKED
; 845  :     inscode(d, ds, de, "EKEYREVOKED", EKEYREVOKED, "Key has been revoked");
; 846  : #endif
; 847  : #ifdef EKEYREJECTED
; 848  :     inscode(d, ds, de, "EKEYREJECTED", EKEYREJECTED, "Key was rejected by service");
; 849  : #endif
; 850  : #ifdef EOWNERDEAD
; 851  :     inscode(d, ds, de, "EOWNERDEAD", EOWNERDEAD, "Owner died");

  00eff	41 b9 85 00 00
	00		 mov	 r9d, 133		; 00000085H
  00f05	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0L@MFHDJDKB@EOWNERDEAD?$AA@
  00f0c	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  00f11	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  00f16	e8 00 00 00 00	 call	 _inscode

; 852  : #endif
; 853  : #ifdef ENOTRECOVERABLE
; 854  :     inscode(d, ds, de, "ENOTRECOVERABLE", ENOTRECOVERABLE, "State not recoverable");

  00f1b	41 b9 7f 00 00
	00		 mov	 r9d, 127		; 0000007fH
  00f21	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BA@NJDAMECN@ENOTRECOVERABLE?$AA@
  00f28	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  00f2d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  00f32	e8 00 00 00 00	 call	 _inscode

; 855  : #endif
; 856  : #ifdef ERFKILL
; 857  :     inscode(d, ds, de, "ERFKILL", ERFKILL, "Operation not possible due to RF-kill");
; 858  : #endif
; 859  : 
; 860  :     /* Solaris-specific errnos */
; 861  : #ifdef ECANCELED
; 862  :     inscode(d, ds, de, "ECANCELED", ECANCELED, "Operation canceled");

  00f37	41 b9 69 00 00
	00		 mov	 r9d, 105		; 00000069H
  00f3d	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_09FIKDCFKM@ECANCELED?$AA@
  00f44	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  00f49	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  00f4e	e8 00 00 00 00	 call	 _inscode

; 863  : #endif
; 864  : #ifdef ENOTSUP
; 865  :     inscode(d, ds, de, "ENOTSUP", ENOTSUP, "Operation not supported");

  00f53	41 b9 81 00 00
	00		 mov	 r9d, 129		; 00000081H
  00f59	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_07NFHNCCMK@ENOTSUP?$AA@
  00f60	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  00f65	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  00f6a	e8 00 00 00 00	 call	 _inscode

; 866  : #endif
; 867  : #ifdef EOWNERDEAD
; 868  :     inscode(d, ds, de, "EOWNERDEAD", EOWNERDEAD, "Process died with the lock");

  00f6f	41 b9 85 00 00
	00		 mov	 r9d, 133		; 00000085H
  00f75	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0L@MFHDJDKB@EOWNERDEAD?$AA@
  00f7c	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  00f81	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  00f86	e8 00 00 00 00	 call	 _inscode

; 869  : #endif
; 870  : #ifdef ENOTRECOVERABLE
; 871  :     inscode(d, ds, de, "ENOTRECOVERABLE", ENOTRECOVERABLE, "Lock is not recoverable");

  00f8b	41 b9 7f 00 00
	00		 mov	 r9d, 127		; 0000007fH
  00f91	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:??_C@_0BA@NJDAMECN@ENOTRECOVERABLE?$AA@
  00f98	48 8b 54 24 20	 mov	 rdx, QWORD PTR de$[rsp]
  00f9d	48 8b 4c 24 28	 mov	 rcx, QWORD PTR d$[rsp]
  00fa2	e8 00 00 00 00	 call	 _inscode

; 872  : #endif
; 873  : #ifdef ELOCKUNMAPPED
; 874  :     inscode(d, ds, de, "ELOCKUNMAPPED", ELOCKUNMAPPED, "Locked lock was unmapped");
; 875  : #endif
; 876  : #ifdef ENOTACTIVE
; 877  :     inscode(d, ds, de, "ENOTACTIVE", ENOTACTIVE, "Facility is not active");
; 878  : #endif
; 879  : 
; 880  :     /* MacOSX specific errnos */
; 881  : #ifdef EAUTH
; 882  :     inscode(d, ds, de, "EAUTH", EAUTH, "Authentication error");
; 883  : #endif
; 884  : #ifdef EBADARCH
; 885  :     inscode(d, ds, de, "EBADARCH", EBADARCH, "Bad CPU type in executable");
; 886  : #endif
; 887  : #ifdef EBADEXEC
; 888  :     inscode(d, ds, de, "EBADEXEC", EBADEXEC, "Bad executable (or shared library)");
; 889  : #endif
; 890  : #ifdef EBADMACHO
; 891  :     inscode(d, ds, de, "EBADMACHO", EBADMACHO, "Malformed Mach-o file");
; 892  : #endif
; 893  : #ifdef EBADRPC
; 894  :     inscode(d, ds, de, "EBADRPC", EBADRPC, "RPC struct is bad");
; 895  : #endif
; 896  : #ifdef EDEVERR
; 897  :     inscode(d, ds, de, "EDEVERR", EDEVERR, "Device error");
; 898  : #endif
; 899  : #ifdef EFTYPE
; 900  :     inscode(d, ds, de, "EFTYPE", EFTYPE, "Inappropriate file type or format");
; 901  : #endif
; 902  : #ifdef ENEEDAUTH
; 903  :     inscode(d, ds, de, "ENEEDAUTH", ENEEDAUTH, "Need authenticator");
; 904  : #endif
; 905  : #ifdef ENOATTR
; 906  :     inscode(d, ds, de, "ENOATTR", ENOATTR, "Attribute not found");
; 907  : #endif
; 908  : #ifdef ENOPOLICY
; 909  :     inscode(d, ds, de, "ENOPOLICY", ENOPOLICY, "Policy not found");
; 910  : #endif
; 911  : #ifdef EPROCLIM
; 912  :     inscode(d, ds, de, "EPROCLIM", EPROCLIM, "Too many processes");
; 913  : #endif
; 914  : #ifdef EPROCUNAVAIL
; 915  :     inscode(d, ds, de, "EPROCUNAVAIL", EPROCUNAVAIL, "Bad procedure for program");
; 916  : #endif
; 917  : #ifdef EPROGMISMATCH
; 918  :     inscode(d, ds, de, "EPROGMISMATCH", EPROGMISMATCH, "Program version wrong");
; 919  : #endif
; 920  : #ifdef EPROGUNAVAIL
; 921  :     inscode(d, ds, de, "EPROGUNAVAIL", EPROGUNAVAIL, "RPC prog. not avail");
; 922  : #endif
; 923  : #ifdef EPWROFF
; 924  :     inscode(d, ds, de, "EPWROFF", EPWROFF, "Device power is off");
; 925  : #endif
; 926  : #ifdef ERPCMISMATCH
; 927  :     inscode(d, ds, de, "ERPCMISMATCH", ERPCMISMATCH, "RPC version wrong");
; 928  : #endif
; 929  : #ifdef ESHLIBVERS
; 930  :     inscode(d, ds, de, "ESHLIBVERS", ESHLIBVERS, "Shared library version mismatch");
; 931  : #endif
; 932  : 
; 933  :     Py_DECREF(de);

  00fa7	48 8b 4c 24 20	 mov	 rcx, QWORD PTR de$[rsp]
  00fac	e8 00 00 00 00	 call	 _Py_DecRef

; 934  :     return m;

  00fb1	48 8b 44 24 30	 mov	 rax, QWORD PTR m$[rsp]
$LN4@PyInit_err:

; 935  : }

  00fb6	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00fba	c3		 ret	 0
PyInit_errno ENDP
_TEXT	ENDS
PUBLIC	??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@		; `string'
PUBLIC	??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ ; `string'
EXTRN	_Py_Dealloc:PROC
EXTRN	_Py_NegativeRefcount:PROC
EXTRN	_PyParallel_Guard:PROC
EXTRN	_Py_RefTotal:QWORD
EXTRN	Px_DecRef:PROC
EXTRN	_Py_PXCTX:PROC
;	COMDAT pdata
; File c:\src\pyparallel\include\object.h
pdata	SEGMENT
$pdata$_Py_DecRef DD imagerel $LN13
	DD	imagerel $LN13+257
	DD	imagerel $unwind$_Py_DecRef
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_Py_DecRef DD 010901H
	DD	08209H
xdata	ENDS
;	COMDAT ??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
CONST	SEGMENT
??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@ DB '_Py_DecRef', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
CONST	SEGMENT
??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@ DB 'c:\src\pypa'
	DB	'rallel\include\object.h', 00H		; `string'
; Function compile flags: /Odtp
CONST	ENDS
;	COMDAT _Py_DecRef
_TEXT	SEGMENT
tv81 = 48
op$ = 80
_Py_DecRef PROC						; COMDAT

; 923  : {

$LN13:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 924  :     if (!Py_PXCTX) {

  00009	e8 00 00 00 00	 call	 _Py_PXCTX
  0000e	85 c0		 test	 eax, eax
  00010	0f 85 e6 00 00
	00		 jne	 $LN8@Py_DecRef

; 925  :         if (Px_PERSISTED(op) || Px_CLONED(op))

  00016	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0001b	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  0001f	48 83 e0 20	 and	 rax, 32			; 00000020H
  00023	48 85 c0	 test	 rax, rax
  00026	75 14		 jne	 SHORT $LN6@Py_DecRef
  00028	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  0002d	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00031	48 25 80 00 00
	00		 and	 rax, 128		; 00000080H
  00037	48 85 c0	 test	 rax, rax
  0003a	74 0f		 je	 SHORT $LN7@Py_DecRef
$LN6@Py_DecRef:

; 926  :             Px_DECREF(op);

  0003c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  00041	e8 00 00 00 00	 call	 Px_DecRef
  00046	e9 b1 00 00 00	 jmp	 $LN5@Py_DecRef
$LN7@Py_DecRef:

; 927  :         else if (!Px_ISPX(op)) {

  0004b	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00050	48 8b 40 20	 mov	 rax, QWORD PTR [rax+32]
  00054	48 83 e0 02	 and	 rax, 2
  00058	48 85 c0	 test	 rax, rax
  0005b	0f 85 9b 00 00
	00		 jne	 $LN4@Py_DecRef

; 928  :             _Py_DEC_REFTOTAL;

  00061	e8 00 00 00 00	 call	 _Py_PXCTX
  00066	85 c0		 test	 eax, eax
  00068	74 02		 je	 SHORT $LN11@Py_DecRef
  0006a	eb 11		 jmp	 SHORT $LN12@Py_DecRef
$LN11@Py_DecRef:
  0006c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR _Py_RefTotal
  00073	48 ff c8	 dec	 rax
  00076	48 89 05 00 00
	00 00		 mov	 QWORD PTR _Py_RefTotal, rax
$LN12@Py_DecRef:

; 929  :             if ((--((PyObject *)(op))->ob_refcnt) != 0) {

  0007d	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00082	48 8b 40 50	 mov	 rax, QWORD PTR [rax+80]
  00086	48 ff c8	 dec	 rax
  00089	48 89 44 24 30	 mov	 QWORD PTR tv81[rsp], rax
  0008e	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  00093	48 8b 4c 24 30	 mov	 rcx, QWORD PTR tv81[rsp]
  00098	48 89 48 50	 mov	 QWORD PTR [rax+80], rcx
  0009c	48 83 7c 24 30
	00		 cmp	 QWORD PTR tv81[rsp], 0
  000a2	74 4e		 je	 SHORT $LN3@Py_DecRef

; 930  :                 _Py_CHECK_REFCNT(op);

  000a4	c7 44 24 20 10
	00 00 00	 mov	 DWORD PTR [rsp+32], 16
  000ac	4c 8b 4c 24 50	 mov	 r9, QWORD PTR op$[rsp]
  000b1	41 b8 a2 03 00
	00		 mov	 r8d, 930		; 000003a2H
  000b7	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000be	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0L@DMHMLFIA@_Py_DecRef?$AA@
  000c5	e8 00 00 00 00	 call	 _PyParallel_Guard
  000ca	85 c0		 test	 eax, eax
  000cc	75 22		 jne	 SHORT $LN2@Py_DecRef
  000ce	48 8b 44 24 50	 mov	 rax, QWORD PTR op$[rsp]
  000d3	48 83 78 50 00	 cmp	 QWORD PTR [rax+80], 0
  000d8	7d 16		 jge	 SHORT $LN2@Py_DecRef
  000da	4c 8b 44 24 50	 mov	 r8, QWORD PTR op$[rsp]
  000df	ba a2 03 00 00	 mov	 edx, 930		; 000003a2H
  000e4	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:??_C@_0CD@HDJFDCDP@c?3?2src?2pyparallel?2include?2object@
  000eb	e8 00 00 00 00	 call	 _Py_NegativeRefcount
$LN2@Py_DecRef:

; 931  :             } else

  000f0	eb 0a		 jmp	 SHORT $LN1@Py_DecRef
$LN3@Py_DecRef:

; 932  :                 _Py_Dealloc((PyObject *)(op));

  000f2	48 8b 4c 24 50	 mov	 rcx, QWORD PTR op$[rsp]
  000f7	e8 00 00 00 00	 call	 _Py_Dealloc
$LN1@Py_DecRef:
$LN4@Py_DecRef:
$LN5@Py_DecRef:
$LN8@Py_DecRef:

; 933  :         }
; 934  :     }
; 935  : }

  000fc	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00100	c3		 ret	 0
_Py_DecRef ENDP
_TEXT	ENDS
EXTRN	PyDict_SetItem:PROC
EXTRN	PyLong_FromLong:PROC
EXTRN	PyUnicode_FromString:PROC
;	COMDAT pdata
; File c:\src\pyparallel\modules\errnomodule.c
pdata	SEGMENT
$pdata$_inscode DD imagerel _inscode
	DD	imagerel _inscode+162
	DD	imagerel $unwind$_inscode
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_inscode DD 011801H
	DD	06218H
; Function compile flags: /Odtp
xdata	ENDS
;	COMDAT _inscode
_TEXT	SEGMENT
v$ = 32
u$ = 40
d$ = 64
de$ = 72
name$ = 80
code$ = 88
_inscode PROC						; COMDAT

; 51   : {

  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 52   :     PyObject *u = PyUnicode_FromString(name);

  00018	48 8b 4c 24 50	 mov	 rcx, QWORD PTR name$[rsp]
  0001d	e8 00 00 00 00	 call	 PyUnicode_FromString
  00022	48 89 44 24 28	 mov	 QWORD PTR u$[rsp], rax

; 53   :     PyObject *v = PyLong_FromLong((long) code);

  00027	8b 4c 24 58	 mov	 ecx, DWORD PTR code$[rsp]
  0002b	e8 00 00 00 00	 call	 PyLong_FromLong
  00030	48 89 44 24 20	 mov	 QWORD PTR v$[rsp], rax

; 54   : 
; 55   :     /* Don't bother checking for errors; they'll be caught at the end
; 56   :      * of the module initialization function by the caller of
; 57   :      * initerrno().
; 58   :      */
; 59   :     if (u && v) {

  00035	48 83 7c 24 28
	00		 cmp	 QWORD PTR u$[rsp], 0
  0003b	74 30		 je	 SHORT $LN9@inscode
  0003d	48 83 7c 24 20
	00		 cmp	 QWORD PTR v$[rsp], 0
  00043	74 28		 je	 SHORT $LN9@inscode

; 60   :         /* insert in modules dict */
; 61   :         PyDict_SetItem(d, u, v);

  00045	4c 8b 44 24 20	 mov	 r8, QWORD PTR v$[rsp]
  0004a	48 8b 54 24 28	 mov	 rdx, QWORD PTR u$[rsp]
  0004f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR d$[rsp]
  00054	e8 00 00 00 00	 call	 PyDict_SetItem

; 62   :         /* insert in errorcode dict */
; 63   :         PyDict_SetItem(de, v, u);

  00059	4c 8b 44 24 28	 mov	 r8, QWORD PTR u$[rsp]
  0005e	48 8b 54 24 20	 mov	 rdx, QWORD PTR v$[rsp]
  00063	48 8b 4c 24 48	 mov	 rcx, QWORD PTR de$[rsp]
  00068	e8 00 00 00 00	 call	 PyDict_SetItem
$LN9@inscode:
$LN8@inscode:

; 64   :     }
; 65   :     Py_XDECREF(u);

  0006d	48 83 7c 24 28
	00		 cmp	 QWORD PTR u$[rsp], 0
  00073	74 0a		 je	 SHORT $LN5@inscode
  00075	48 8b 4c 24 28	 mov	 rcx, QWORD PTR u$[rsp]
  0007a	e8 00 00 00 00	 call	 _Py_DecRef
$LN5@inscode:
  0007f	33 c0		 xor	 eax, eax
  00081	85 c0		 test	 eax, eax
  00083	75 e8		 jne	 SHORT $LN8@inscode
$LN4@inscode:

; 66   :     Py_XDECREF(v);

  00085	48 83 7c 24 20
	00		 cmp	 QWORD PTR v$[rsp], 0
  0008b	74 0a		 je	 SHORT $LN1@inscode
  0008d	48 8b 4c 24 20	 mov	 rcx, QWORD PTR v$[rsp]
  00092	e8 00 00 00 00	 call	 _Py_DecRef
$LN1@inscode:
  00097	33 c0		 xor	 eax, eax
  00099	85 c0		 test	 eax, eax
  0009b	75 e8		 jne	 SHORT $LN4@inscode

; 67   : }

  0009d	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000a1	c3		 ret	 0
_inscode ENDP
_TEXT	ENDS
END
